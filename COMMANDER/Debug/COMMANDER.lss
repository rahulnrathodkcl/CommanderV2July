
COMMANDER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001bb14  00010000  00010000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0002bb14  0002bb14  0002bb14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000001fc  20000000  0002bb1c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000078c  20000200  0002bd20  00030200  2**4
                  ALLOC
  4 .stack        00002004  2000098c  0002c4ac  00030200  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY
  7 .debug_info   0007fe6d  00000000  00000000  0003027d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00008ae9  00000000  00000000  000b00ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000abeb  00000000  00000000  000b8bd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001db8  00000000  00000000  000c37be  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001bc0  00000000  00000000  000c5576  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000287d2  00000000  00000000  000c7136  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00027ba3  00000000  00000000  000ef908  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a28f3  00000000  00000000  001174ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000750c  00000000  00000000  001b9da0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00010000 <exception_table>:
   10000:	90 29 00 20 a9 54 02 00 a1 55 02 00 a1 55 02 00     .). .T...U...U..
	...
   1002c:	91 f3 01 00 00 00 00 00 00 00 00 00 c1 f4 01 00     ................
   1003c:	09 f5 01 00 a1 55 02 00 a1 55 02 00 01 1c 02 00     .....U...U......
   1004c:	0d ed 01 00 29 2c 02 00 a1 55 02 00 a5 e2 01 00     ....),...U......
   1005c:	a1 55 02 00 95 2c 02 00 21 2a 02 00 39 2a 02 00     .U...,..!*..9*..
   1006c:	51 2a 02 00 69 2a 02 00 81 2a 02 00 99 2a 02 00     Q*..i*...*...*..
   1007c:	25 1c 02 00 39 1c 02 00 4d 1c 02 00 dd 1c 02 00     %...9...M.......
   1008c:	f1 1c 02 00 05 1d 02 00 19 1d 02 00 2d 1d 02 00     ............-...
   1009c:	85 e0 01 00 ed 2f 02 00 69 e2 01 00 a1 55 02 00     ...../..i....U..
   100ac:	a1 55 02 00 00 00 00 00                             .U......

000100b4 <__do_global_dtors_aux>:
   100b4:	b510      	push	{r4, lr}
   100b6:	4c06      	ldr	r4, [pc, #24]	; (100d0 <__do_global_dtors_aux+0x1c>)
   100b8:	7823      	ldrb	r3, [r4, #0]
   100ba:	2b00      	cmp	r3, #0
   100bc:	d107      	bne.n	100ce <__do_global_dtors_aux+0x1a>
   100be:	4b05      	ldr	r3, [pc, #20]	; (100d4 <__do_global_dtors_aux+0x20>)
   100c0:	2b00      	cmp	r3, #0
   100c2:	d002      	beq.n	100ca <__do_global_dtors_aux+0x16>
   100c4:	4804      	ldr	r0, [pc, #16]	; (100d8 <__do_global_dtors_aux+0x24>)
   100c6:	e000      	b.n	100ca <__do_global_dtors_aux+0x16>
   100c8:	bf00      	nop
   100ca:	2301      	movs	r3, #1
   100cc:	7023      	strb	r3, [r4, #0]
   100ce:	bd10      	pop	{r4, pc}
   100d0:	20000200 	.word	0x20000200
   100d4:	00000000 	.word	0x00000000
   100d8:	0002bb1c 	.word	0x0002bb1c

000100dc <frame_dummy>:
   100dc:	4b08      	ldr	r3, [pc, #32]	; (10100 <frame_dummy+0x24>)
   100de:	b510      	push	{r4, lr}
   100e0:	2b00      	cmp	r3, #0
   100e2:	d003      	beq.n	100ec <frame_dummy+0x10>
   100e4:	4907      	ldr	r1, [pc, #28]	; (10104 <frame_dummy+0x28>)
   100e6:	4808      	ldr	r0, [pc, #32]	; (10108 <frame_dummy+0x2c>)
   100e8:	e000      	b.n	100ec <frame_dummy+0x10>
   100ea:	bf00      	nop
   100ec:	4807      	ldr	r0, [pc, #28]	; (1010c <frame_dummy+0x30>)
   100ee:	6803      	ldr	r3, [r0, #0]
   100f0:	2b00      	cmp	r3, #0
   100f2:	d100      	bne.n	100f6 <frame_dummy+0x1a>
   100f4:	bd10      	pop	{r4, pc}
   100f6:	4b06      	ldr	r3, [pc, #24]	; (10110 <frame_dummy+0x34>)
   100f8:	2b00      	cmp	r3, #0
   100fa:	d0fb      	beq.n	100f4 <frame_dummy+0x18>
   100fc:	4798      	blx	r3
   100fe:	e7f9      	b.n	100f4 <frame_dummy+0x18>
   10100:	00000000 	.word	0x00000000
   10104:	20000204 	.word	0x20000204
   10108:	0002bb1c 	.word	0x0002bb1c
   1010c:	0002bb1c 	.word	0x0002bb1c
   10110:	00000000 	.word	0x00000000

00010114 <configure_eeprom>:
#include "eeprom_driver.h"

void configure_eeprom(void)
{
   10114:	b590      	push	{r4, r7, lr}
   10116:	b083      	sub	sp, #12
   10118:	af00      	add	r7, sp, #0
	enum status_code error_code = eeprom_emulator_init();
   1011a:	1dfc      	adds	r4, r7, #7
   1011c:	4b0a      	ldr	r3, [pc, #40]	; (10148 <configure_eeprom+0x34>)
   1011e:	4798      	blx	r3
   10120:	0003      	movs	r3, r0
   10122:	7023      	strb	r3, [r4, #0]
	if (error_code == STATUS_ERR_NO_MEMORY)
   10124:	1dfb      	adds	r3, r7, #7
   10126:	781b      	ldrb	r3, [r3, #0]
   10128:	2b16      	cmp	r3, #22
   1012a:	d100      	bne.n	1012e <configure_eeprom+0x1a>
	{
		while (true);
   1012c:	e7fe      	b.n	1012c <configure_eeprom+0x18>
	}
	else if (error_code != STATUS_OK)
   1012e:	1dfb      	adds	r3, r7, #7
   10130:	781b      	ldrb	r3, [r3, #0]
   10132:	2b00      	cmp	r3, #0
   10134:	d003      	beq.n	1013e <configure_eeprom+0x2a>
	{
		eeprom_emulator_erase_memory();
   10136:	4b05      	ldr	r3, [pc, #20]	; (1014c <configure_eeprom+0x38>)
   10138:	4798      	blx	r3
		eeprom_emulator_init();
   1013a:	4b03      	ldr	r3, [pc, #12]	; (10148 <configure_eeprom+0x34>)
   1013c:	4798      	blx	r3
	}
}
   1013e:	46c0      	nop			; (mov r8, r8)
   10140:	46bd      	mov	sp, r7
   10142:	b003      	add	sp, #12
   10144:	bd90      	pop	{r4, r7, pc}
   10146:	46c0      	nop			; (mov r8, r8)
   10148:	00024065 	.word	0x00024065
   1014c:	0002414d 	.word	0x0002414d

00010150 <init_eeprom>:

void init_eeprom(void)
{
   10150:	b580      	push	{r7, lr}
   10152:	af00      	add	r7, sp, #0
	configure_eeprom();
   10154:	4bf6      	ldr	r3, [pc, #984]	; (10530 <init_eeprom+0x3e0>)
   10156:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(BOOTLOADER_PARAMETER_PAGE, page_data);
   10158:	4bf6      	ldr	r3, [pc, #984]	; (10534 <init_eeprom+0x3e4>)
   1015a:	0019      	movs	r1, r3
   1015c:	2000      	movs	r0, #0
   1015e:	4bf6      	ldr	r3, [pc, #984]	; (10538 <init_eeprom+0x3e8>)
   10160:	4798      	blx	r3
	memcpy(&bootloader_parameter,page_data,sizeof(bootloader_parameter));
   10162:	49f4      	ldr	r1, [pc, #976]	; (10534 <init_eeprom+0x3e4>)
   10164:	4bf5      	ldr	r3, [pc, #980]	; (1053c <init_eeprom+0x3ec>)
   10166:	221c      	movs	r2, #28
   10168:	0018      	movs	r0, r3
   1016a:	4bf5      	ldr	r3, [pc, #980]	; (10540 <init_eeprom+0x3f0>)
   1016c:	4798      	blx	r3
	if (bootloader_parameter.ucharFirst_Time_Write != 85)
   1016e:	4bf3      	ldr	r3, [pc, #972]	; (1053c <init_eeprom+0x3ec>)
   10170:	791b      	ldrb	r3, [r3, #4]
   10172:	2b55      	cmp	r3, #85	; 0x55
   10174:	d02c      	beq.n	101d0 <init_eeprom+0x80>
	{
		bootloader_parameter.ulongintDiscard		   = 0;
   10176:	4bf1      	ldr	r3, [pc, #964]	; (1053c <init_eeprom+0x3ec>)
   10178:	2200      	movs	r2, #0
   1017a:	601a      	str	r2, [r3, #0]
		bootloader_parameter.ucharFirst_Time_Write	   = 85;
   1017c:	4bef      	ldr	r3, [pc, #956]	; (1053c <init_eeprom+0x3ec>)
   1017e:	2255      	movs	r2, #85	; 0x55
   10180:	711a      	strb	r2, [r3, #4]
		bootloader_parameter.firmware_download_pending = false;
   10182:	4bee      	ldr	r3, [pc, #952]	; (1053c <init_eeprom+0x3ec>)
   10184:	2200      	movs	r2, #0
   10186:	715a      	strb	r2, [r3, #5]
		bootloader_parameter.firmware_update_process_completed = false;
   10188:	4bec      	ldr	r3, [pc, #944]	; (1053c <init_eeprom+0x3ec>)
   1018a:	2200      	movs	r2, #0
   1018c:	719a      	strb	r2, [r3, #6]
		bootloader_parameter.firmware_update_error_code = 0;
   1018e:	4beb      	ldr	r3, [pc, #940]	; (1053c <init_eeprom+0x3ec>)
   10190:	2200      	movs	r2, #0
   10192:	71da      	strb	r2, [r3, #7]
		bootloader_parameter.retries= 0;
   10194:	4be9      	ldr	r3, [pc, #932]	; (1053c <init_eeprom+0x3ec>)
   10196:	2200      	movs	r2, #0
   10198:	721a      	strb	r2, [r3, #8]
		
		
		memset(bootloader_parameter.firmware_updater_mobile_no, '\0', sizeof(bootloader_parameter.firmware_updater_mobile_no));
   1019a:	4bea      	ldr	r3, [pc, #936]	; (10544 <init_eeprom+0x3f4>)
   1019c:	2210      	movs	r2, #16
   1019e:	2100      	movs	r1, #0
   101a0:	0018      	movs	r0, r3
   101a2:	4be9      	ldr	r3, [pc, #932]	; (10548 <init_eeprom+0x3f8>)
   101a4:	4798      	blx	r3
		strcpy(bootloader_parameter.firmware_updater_mobile_no,"0000000000");
   101a6:	4be7      	ldr	r3, [pc, #924]	; (10544 <init_eeprom+0x3f4>)
   101a8:	4ae8      	ldr	r2, [pc, #928]	; (1054c <init_eeprom+0x3fc>)
   101aa:	ca03      	ldmia	r2!, {r0, r1}
   101ac:	c303      	stmia	r3!, {r0, r1}
   101ae:	8811      	ldrh	r1, [r2, #0]
   101b0:	8019      	strh	r1, [r3, #0]
   101b2:	7892      	ldrb	r2, [r2, #2]
   101b4:	709a      	strb	r2, [r3, #2]
		
		memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
   101b6:	49e1      	ldr	r1, [pc, #900]	; (1053c <init_eeprom+0x3ec>)
   101b8:	4bde      	ldr	r3, [pc, #888]	; (10534 <init_eeprom+0x3e4>)
   101ba:	221c      	movs	r2, #28
   101bc:	0018      	movs	r0, r3
   101be:	4be0      	ldr	r3, [pc, #896]	; (10540 <init_eeprom+0x3f0>)
   101c0:	4798      	blx	r3
		eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
   101c2:	4bdc      	ldr	r3, [pc, #880]	; (10534 <init_eeprom+0x3e4>)
   101c4:	0019      	movs	r1, r3
   101c6:	2000      	movs	r0, #0
   101c8:	4be1      	ldr	r3, [pc, #900]	; (10550 <init_eeprom+0x400>)
   101ca:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   101cc:	4be1      	ldr	r3, [pc, #900]	; (10554 <init_eeprom+0x404>)
   101ce:	4798      	blx	r3
	}
	
	eeprom_emulator_read_page(FTP_PATH_PARAMETER_PAGE, page_data);
   101d0:	4bd8      	ldr	r3, [pc, #864]	; (10534 <init_eeprom+0x3e4>)
   101d2:	0019      	movs	r1, r3
   101d4:	2001      	movs	r0, #1
   101d6:	4bd8      	ldr	r3, [pc, #864]	; (10538 <init_eeprom+0x3e8>)
   101d8:	4798      	blx	r3
	memcpy(&ftp_path_parameter,page_data,sizeof(ftp_path_parameter));
   101da:	49d6      	ldr	r1, [pc, #856]	; (10534 <init_eeprom+0x3e4>)
   101dc:	4bde      	ldr	r3, [pc, #888]	; (10558 <init_eeprom+0x408>)
   101de:	2238      	movs	r2, #56	; 0x38
   101e0:	0018      	movs	r0, r3
   101e2:	4bd7      	ldr	r3, [pc, #860]	; (10540 <init_eeprom+0x3f0>)
   101e4:	4798      	blx	r3
	if (ftp_path_parameter.ucharFirst_Time_Write !=85)
   101e6:	4bdc      	ldr	r3, [pc, #880]	; (10558 <init_eeprom+0x408>)
   101e8:	791b      	ldrb	r3, [r3, #4]
   101ea:	2b55      	cmp	r3, #85	; 0x55
   101ec:	d02e      	beq.n	1024c <init_eeprom+0xfc>
	{
		ftp_path_parameter.ulongintDiscard			   = 0;
   101ee:	4bda      	ldr	r3, [pc, #872]	; (10558 <init_eeprom+0x408>)
   101f0:	2200      	movs	r2, #0
   101f2:	601a      	str	r2, [r3, #0]
		ftp_path_parameter.ucharFirst_Time_Write	   = 85;
   101f4:	4bd8      	ldr	r3, [pc, #864]	; (10558 <init_eeprom+0x408>)
   101f6:	2255      	movs	r2, #85	; 0x55
   101f8:	711a      	strb	r2, [r3, #4]
		
		memset(ftp_path_parameter.ftp_address, '\0', sizeof(ftp_path_parameter.ftp_address));
   101fa:	4bd8      	ldr	r3, [pc, #864]	; (1055c <init_eeprom+0x40c>)
   101fc:	221e      	movs	r2, #30
   101fe:	2100      	movs	r1, #0
   10200:	0018      	movs	r0, r3
   10202:	4bd1      	ldr	r3, [pc, #836]	; (10548 <init_eeprom+0x3f8>)
   10204:	4798      	blx	r3
		strcpy(ftp_path_parameter.ftp_address,"ftp.drivehq.com");
   10206:	4ad5      	ldr	r2, [pc, #852]	; (1055c <init_eeprom+0x40c>)
   10208:	4bd5      	ldr	r3, [pc, #852]	; (10560 <init_eeprom+0x410>)
   1020a:	0010      	movs	r0, r2
   1020c:	0019      	movs	r1, r3
   1020e:	2310      	movs	r3, #16
   10210:	001a      	movs	r2, r3
   10212:	4bcb      	ldr	r3, [pc, #812]	; (10540 <init_eeprom+0x3f0>)
   10214:	4798      	blx	r3
		
		memset(ftp_path_parameter.ftp_path, '\0', sizeof(ftp_path_parameter.ftp_path));
   10216:	4bd3      	ldr	r3, [pc, #844]	; (10564 <init_eeprom+0x414>)
   10218:	2214      	movs	r2, #20
   1021a:	2100      	movs	r1, #0
   1021c:	0018      	movs	r0, r3
   1021e:	4bca      	ldr	r3, [pc, #808]	; (10548 <init_eeprom+0x3f8>)
   10220:	4798      	blx	r3
		strcpy(ftp_path_parameter.ftp_path,"/firmware/");
   10222:	4ad0      	ldr	r2, [pc, #832]	; (10564 <init_eeprom+0x414>)
   10224:	4bd0      	ldr	r3, [pc, #832]	; (10568 <init_eeprom+0x418>)
   10226:	0010      	movs	r0, r2
   10228:	0019      	movs	r1, r3
   1022a:	230b      	movs	r3, #11
   1022c:	001a      	movs	r2, r3
   1022e:	4bc4      	ldr	r3, [pc, #784]	; (10540 <init_eeprom+0x3f0>)
   10230:	4798      	blx	r3
		
		memcpy(page_data,&ftp_path_parameter,sizeof(ftp_path_parameter));
   10232:	49c9      	ldr	r1, [pc, #804]	; (10558 <init_eeprom+0x408>)
   10234:	4bbf      	ldr	r3, [pc, #764]	; (10534 <init_eeprom+0x3e4>)
   10236:	2238      	movs	r2, #56	; 0x38
   10238:	0018      	movs	r0, r3
   1023a:	4bc1      	ldr	r3, [pc, #772]	; (10540 <init_eeprom+0x3f0>)
   1023c:	4798      	blx	r3
		eeprom_emulator_write_page(FTP_PATH_PARAMETER_PAGE, page_data);
   1023e:	4bbd      	ldr	r3, [pc, #756]	; (10534 <init_eeprom+0x3e4>)
   10240:	0019      	movs	r1, r3
   10242:	2001      	movs	r0, #1
   10244:	4bc2      	ldr	r3, [pc, #776]	; (10550 <init_eeprom+0x400>)
   10246:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   10248:	4bc2      	ldr	r3, [pc, #776]	; (10554 <init_eeprom+0x404>)
   1024a:	4798      	blx	r3
	}
	
	eeprom_emulator_read_page(FTP_USER_PARAMETER_PAGE, page_data);
   1024c:	4bb9      	ldr	r3, [pc, #740]	; (10534 <init_eeprom+0x3e4>)
   1024e:	0019      	movs	r1, r3
   10250:	2002      	movs	r0, #2
   10252:	4bb9      	ldr	r3, [pc, #740]	; (10538 <init_eeprom+0x3e8>)
   10254:	4798      	blx	r3
	memcpy(&ftp_user_parameter,page_data,sizeof(ftp_user_parameter));
   10256:	49b7      	ldr	r1, [pc, #732]	; (10534 <init_eeprom+0x3e4>)
   10258:	4bc4      	ldr	r3, [pc, #784]	; (1056c <init_eeprom+0x41c>)
   1025a:	2238      	movs	r2, #56	; 0x38
   1025c:	0018      	movs	r0, r3
   1025e:	4bb8      	ldr	r3, [pc, #736]	; (10540 <init_eeprom+0x3f0>)
   10260:	4798      	blx	r3
	if (ftp_user_parameter.ucharFirst_Time_Write !=85)
   10262:	4bc2      	ldr	r3, [pc, #776]	; (1056c <init_eeprom+0x41c>)
   10264:	791b      	ldrb	r3, [r3, #4]
   10266:	2b55      	cmp	r3, #85	; 0x55
   10268:	d03c      	beq.n	102e4 <init_eeprom+0x194>
	{
		ftp_user_parameter.ulongintDiscard			   = 0;
   1026a:	4bc0      	ldr	r3, [pc, #768]	; (1056c <init_eeprom+0x41c>)
   1026c:	2200      	movs	r2, #0
   1026e:	601a      	str	r2, [r3, #0]
		ftp_user_parameter.ucharFirst_Time_Write	   = 85;
   10270:	4bbe      	ldr	r3, [pc, #760]	; (1056c <init_eeprom+0x41c>)
   10272:	2255      	movs	r2, #85	; 0x55
   10274:	711a      	strb	r2, [r3, #4]
		
		memset(ftp_user_parameter.ftp_username, '\0', sizeof(ftp_user_parameter.ftp_username));
   10276:	4bbe      	ldr	r3, [pc, #760]	; (10570 <init_eeprom+0x420>)
   10278:	2210      	movs	r2, #16
   1027a:	2100      	movs	r1, #0
   1027c:	0018      	movs	r0, r3
   1027e:	4bb2      	ldr	r3, [pc, #712]	; (10548 <init_eeprom+0x3f8>)
   10280:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_username,"rahulnrathodkcl");
   10282:	4bba      	ldr	r3, [pc, #744]	; (1056c <init_eeprom+0x41c>)
   10284:	2205      	movs	r2, #5
   10286:	49bb      	ldr	r1, [pc, #748]	; (10574 <init_eeprom+0x424>)
   10288:	189b      	adds	r3, r3, r2
   1028a:	2210      	movs	r2, #16
   1028c:	0018      	movs	r0, r3
   1028e:	4bac      	ldr	r3, [pc, #688]	; (10540 <init_eeprom+0x3f0>)
   10290:	4798      	blx	r3
		
		memset(ftp_user_parameter.ftp_filename, '\0', sizeof(ftp_user_parameter.ftp_password));
   10292:	4bb9      	ldr	r3, [pc, #740]	; (10578 <init_eeprom+0x428>)
   10294:	2210      	movs	r2, #16
   10296:	2100      	movs	r1, #0
   10298:	0018      	movs	r0, r3
   1029a:	4bab      	ldr	r3, [pc, #684]	; (10548 <init_eeprom+0x3f8>)
   1029c:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_password,"123456789");
   1029e:	4ab7      	ldr	r2, [pc, #732]	; (1057c <init_eeprom+0x42c>)
   102a0:	4bb7      	ldr	r3, [pc, #732]	; (10580 <init_eeprom+0x430>)
   102a2:	0010      	movs	r0, r2
   102a4:	0019      	movs	r1, r3
   102a6:	230a      	movs	r3, #10
   102a8:	001a      	movs	r2, r3
   102aa:	4ba5      	ldr	r3, [pc, #660]	; (10540 <init_eeprom+0x3f0>)
   102ac:	4798      	blx	r3
		
		memset(ftp_user_parameter.ftp_filename, '\0', sizeof(ftp_user_parameter.ftp_filename));
   102ae:	4bb2      	ldr	r3, [pc, #712]	; (10578 <init_eeprom+0x428>)
   102b0:	2210      	movs	r2, #16
   102b2:	2100      	movs	r1, #0
   102b4:	0018      	movs	r0, r3
   102b6:	4ba4      	ldr	r3, [pc, #656]	; (10548 <init_eeprom+0x3f8>)
   102b8:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_filename,"firmware.bin");
   102ba:	4aaf      	ldr	r2, [pc, #700]	; (10578 <init_eeprom+0x428>)
   102bc:	4bb1      	ldr	r3, [pc, #708]	; (10584 <init_eeprom+0x434>)
   102be:	0010      	movs	r0, r2
   102c0:	0019      	movs	r1, r3
   102c2:	230d      	movs	r3, #13
   102c4:	001a      	movs	r2, r3
   102c6:	4b9e      	ldr	r3, [pc, #632]	; (10540 <init_eeprom+0x3f0>)
   102c8:	4798      	blx	r3
		
		memcpy(page_data,&ftp_user_parameter,sizeof(ftp_user_parameter));
   102ca:	49a8      	ldr	r1, [pc, #672]	; (1056c <init_eeprom+0x41c>)
   102cc:	4b99      	ldr	r3, [pc, #612]	; (10534 <init_eeprom+0x3e4>)
   102ce:	2238      	movs	r2, #56	; 0x38
   102d0:	0018      	movs	r0, r3
   102d2:	4b9b      	ldr	r3, [pc, #620]	; (10540 <init_eeprom+0x3f0>)
   102d4:	4798      	blx	r3
		eeprom_emulator_write_page(FTP_USER_PARAMETER_PAGE, page_data);
   102d6:	4b97      	ldr	r3, [pc, #604]	; (10534 <init_eeprom+0x3e4>)
   102d8:	0019      	movs	r1, r3
   102da:	2002      	movs	r0, #2
   102dc:	4b9c      	ldr	r3, [pc, #624]	; (10550 <init_eeprom+0x400>)
   102de:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   102e0:	4b9c      	ldr	r3, [pc, #624]	; (10554 <init_eeprom+0x404>)
   102e2:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(USER_COUNTER_PAGE, page_data);
   102e4:	4b93      	ldr	r3, [pc, #588]	; (10534 <init_eeprom+0x3e4>)
   102e6:	0019      	movs	r1, r3
   102e8:	2008      	movs	r0, #8
   102ea:	4b93      	ldr	r3, [pc, #588]	; (10538 <init_eeprom+0x3e8>)
   102ec:	4798      	blx	r3
	memcpy(&user_count_struct,page_data,sizeof(user_count_struct));
   102ee:	4aa6      	ldr	r2, [pc, #664]	; (10588 <init_eeprom+0x438>)
   102f0:	4b90      	ldr	r3, [pc, #576]	; (10534 <init_eeprom+0x3e4>)
   102f2:	0010      	movs	r0, r2
   102f4:	0019      	movs	r1, r3
   102f6:	2308      	movs	r3, #8
   102f8:	001a      	movs	r2, r3
   102fa:	4b91      	ldr	r3, [pc, #580]	; (10540 <init_eeprom+0x3f0>)
   102fc:	4798      	blx	r3
	if (user_count_struct.u8tfirst_time_write_ee != 85)
   102fe:	4ba2      	ldr	r3, [pc, #648]	; (10588 <init_eeprom+0x438>)
   10300:	781b      	ldrb	r3, [r3, #0]
   10302:	2b55      	cmp	r3, #85	; 0x55
   10304:	d01d      	beq.n	10342 <init_eeprom+0x1f2>
	{
		user_count_struct.u8tfirst_time_write_ee = 85;
   10306:	4ba0      	ldr	r3, [pc, #640]	; (10588 <init_eeprom+0x438>)
   10308:	2255      	movs	r2, #85	; 0x55
   1030a:	701a      	strb	r2, [r3, #0]
		user_count_struct.total_user_no_count    = 15;
   1030c:	4b9e      	ldr	r3, [pc, #632]	; (10588 <init_eeprom+0x438>)
   1030e:	220f      	movs	r2, #15
   10310:	705a      	strb	r2, [r3, #1]
		user_count_struct.current_user_no_count  = 0;
   10312:	4b9d      	ldr	r3, [pc, #628]	; (10588 <init_eeprom+0x438>)
   10314:	2200      	movs	r2, #0
   10316:	709a      	strb	r2, [r3, #2]
		user_count_struct.primaryNumberIndex = 0;
   10318:	4b9b      	ldr	r3, [pc, #620]	; (10588 <init_eeprom+0x438>)
   1031a:	2200      	movs	r2, #0
   1031c:	70da      	strb	r2, [r3, #3]
		user_count_struct.secondaryNumberIndex = 1;
   1031e:	4b9a      	ldr	r3, [pc, #616]	; (10588 <init_eeprom+0x438>)
   10320:	2201      	movs	r2, #1
   10322:	711a      	strb	r2, [r3, #4]
		
		
		memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   10324:	4a83      	ldr	r2, [pc, #524]	; (10534 <init_eeprom+0x3e4>)
   10326:	4b98      	ldr	r3, [pc, #608]	; (10588 <init_eeprom+0x438>)
   10328:	0010      	movs	r0, r2
   1032a:	0019      	movs	r1, r3
   1032c:	2308      	movs	r3, #8
   1032e:	001a      	movs	r2, r3
   10330:	4b83      	ldr	r3, [pc, #524]	; (10540 <init_eeprom+0x3f0>)
   10332:	4798      	blx	r3
		eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   10334:	4b7f      	ldr	r3, [pc, #508]	; (10534 <init_eeprom+0x3e4>)
   10336:	0019      	movs	r1, r3
   10338:	2008      	movs	r0, #8
   1033a:	4b85      	ldr	r3, [pc, #532]	; (10550 <init_eeprom+0x400>)
   1033c:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   1033e:	4b85      	ldr	r3, [pc, #532]	; (10554 <init_eeprom+0x404>)
   10340:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	config_mobile_no_ee(ADMIN_1_MOBILE_NUMBER_PAGE,"7041196959");
   10342:	4b92      	ldr	r3, [pc, #584]	; (1058c <init_eeprom+0x43c>)
   10344:	0019      	movs	r1, r3
   10346:	2003      	movs	r0, #3
   10348:	4b91      	ldr	r3, [pc, #580]	; (10590 <init_eeprom+0x440>)
   1034a:	4798      	blx	r3
	config_mobile_no_ee(ADMIN_2_MOBILE_NUMBER_PAGE,"7698439201");
   1034c:	4b91      	ldr	r3, [pc, #580]	; (10594 <init_eeprom+0x444>)
   1034e:	0019      	movs	r1, r3
   10350:	2004      	movs	r0, #4
   10352:	4b8f      	ldr	r3, [pc, #572]	; (10590 <init_eeprom+0x440>)
   10354:	4798      	blx	r3
	config_mobile_no_ee(ADMIN_3_MOBILE_NUMBER_PAGE,"7383614214");
   10356:	4b90      	ldr	r3, [pc, #576]	; (10598 <init_eeprom+0x448>)
   10358:	0019      	movs	r1, r3
   1035a:	2005      	movs	r0, #5
   1035c:	4b8c      	ldr	r3, [pc, #560]	; (10590 <init_eeprom+0x440>)
   1035e:	4798      	blx	r3
	config_mobile_no_ee(ADMIN_4_MOBILE_NUMBER_PAGE,"7383622678");
   10360:	4b8e      	ldr	r3, [pc, #568]	; (1059c <init_eeprom+0x44c>)
   10362:	0019      	movs	r1, r3
   10364:	2006      	movs	r0, #6
   10366:	4b8a      	ldr	r3, [pc, #552]	; (10590 <init_eeprom+0x440>)
   10368:	4798      	blx	r3
	//config_mobile_no_ee(ADMIN_5_MOBILE_NUMBER_PAGE,"9586135978");
	config_mobile_no_ee(ADMIN_5_MOBILE_NUMBER_PAGE,"9586135978");
   1036a:	4b8d      	ldr	r3, [pc, #564]	; (105a0 <init_eeprom+0x450>)
   1036c:	0019      	movs	r1, r3
   1036e:	2007      	movs	r0, #7
   10370:	4b87      	ldr	r3, [pc, #540]	; (10590 <init_eeprom+0x440>)
   10372:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_mobile_no_ee(USER_1_MOBILE_NUMBER_PAGE ,"0000000000");
   10374:	4b75      	ldr	r3, [pc, #468]	; (1054c <init_eeprom+0x3fc>)
   10376:	0019      	movs	r1, r3
   10378:	2009      	movs	r0, #9
   1037a:	4b85      	ldr	r3, [pc, #532]	; (10590 <init_eeprom+0x440>)
   1037c:	4798      	blx	r3
	config_mobile_no_ee(USER_2_MOBILE_NUMBER_PAGE ,"0000000000");
   1037e:	4b73      	ldr	r3, [pc, #460]	; (1054c <init_eeprom+0x3fc>)
   10380:	0019      	movs	r1, r3
   10382:	200a      	movs	r0, #10
   10384:	4b82      	ldr	r3, [pc, #520]	; (10590 <init_eeprom+0x440>)
   10386:	4798      	blx	r3
	config_mobile_no_ee(USER_3_MOBILE_NUMBER_PAGE ,"0000000000");
   10388:	4b70      	ldr	r3, [pc, #448]	; (1054c <init_eeprom+0x3fc>)
   1038a:	0019      	movs	r1, r3
   1038c:	200b      	movs	r0, #11
   1038e:	4b80      	ldr	r3, [pc, #512]	; (10590 <init_eeprom+0x440>)
   10390:	4798      	blx	r3
	config_mobile_no_ee(USER_4_MOBILE_NUMBER_PAGE ,"0000000000");
   10392:	4b6e      	ldr	r3, [pc, #440]	; (1054c <init_eeprom+0x3fc>)
   10394:	0019      	movs	r1, r3
   10396:	200c      	movs	r0, #12
   10398:	4b7d      	ldr	r3, [pc, #500]	; (10590 <init_eeprom+0x440>)
   1039a:	4798      	blx	r3
	config_mobile_no_ee(USER_5_MOBILE_NUMBER_PAGE ,"0000000000");
   1039c:	4b6b      	ldr	r3, [pc, #428]	; (1054c <init_eeprom+0x3fc>)
   1039e:	0019      	movs	r1, r3
   103a0:	200d      	movs	r0, #13
   103a2:	4b7b      	ldr	r3, [pc, #492]	; (10590 <init_eeprom+0x440>)
   103a4:	4798      	blx	r3
	config_mobile_no_ee(USER_6_MOBILE_NUMBER_PAGE ,"0000000000");
   103a6:	4b69      	ldr	r3, [pc, #420]	; (1054c <init_eeprom+0x3fc>)
   103a8:	0019      	movs	r1, r3
   103aa:	200e      	movs	r0, #14
   103ac:	4b78      	ldr	r3, [pc, #480]	; (10590 <init_eeprom+0x440>)
   103ae:	4798      	blx	r3
	config_mobile_no_ee(USER_7_MOBILE_NUMBER_PAGE ,"0000000000");
   103b0:	4b66      	ldr	r3, [pc, #408]	; (1054c <init_eeprom+0x3fc>)
   103b2:	0019      	movs	r1, r3
   103b4:	200f      	movs	r0, #15
   103b6:	4b76      	ldr	r3, [pc, #472]	; (10590 <init_eeprom+0x440>)
   103b8:	4798      	blx	r3
	config_mobile_no_ee(USER_8_MOBILE_NUMBER_PAGE ,"0000000000");
   103ba:	4b64      	ldr	r3, [pc, #400]	; (1054c <init_eeprom+0x3fc>)
   103bc:	0019      	movs	r1, r3
   103be:	2010      	movs	r0, #16
   103c0:	4b73      	ldr	r3, [pc, #460]	; (10590 <init_eeprom+0x440>)
   103c2:	4798      	blx	r3
	config_mobile_no_ee(USER_9_MOBILE_NUMBER_PAGE ,"0000000000");
   103c4:	4b61      	ldr	r3, [pc, #388]	; (1054c <init_eeprom+0x3fc>)
   103c6:	0019      	movs	r1, r3
   103c8:	2011      	movs	r0, #17
   103ca:	4b71      	ldr	r3, [pc, #452]	; (10590 <init_eeprom+0x440>)
   103cc:	4798      	blx	r3
	config_mobile_no_ee(USER_10_MOBILE_NUMBER_PAGE,"0000000000");
   103ce:	4b5f      	ldr	r3, [pc, #380]	; (1054c <init_eeprom+0x3fc>)
   103d0:	0019      	movs	r1, r3
   103d2:	2012      	movs	r0, #18
   103d4:	4b6e      	ldr	r3, [pc, #440]	; (10590 <init_eeprom+0x440>)
   103d6:	4798      	blx	r3
	config_mobile_no_ee(USER_11_MOBILE_NUMBER_PAGE,"0000000000");
   103d8:	4b5c      	ldr	r3, [pc, #368]	; (1054c <init_eeprom+0x3fc>)
   103da:	0019      	movs	r1, r3
   103dc:	2013      	movs	r0, #19
   103de:	4b6c      	ldr	r3, [pc, #432]	; (10590 <init_eeprom+0x440>)
   103e0:	4798      	blx	r3
	config_mobile_no_ee(USER_12_MOBILE_NUMBER_PAGE,"0000000000");
   103e2:	4b5a      	ldr	r3, [pc, #360]	; (1054c <init_eeprom+0x3fc>)
   103e4:	0019      	movs	r1, r3
   103e6:	2014      	movs	r0, #20
   103e8:	4b69      	ldr	r3, [pc, #420]	; (10590 <init_eeprom+0x440>)
   103ea:	4798      	blx	r3
	config_mobile_no_ee(USER_13_MOBILE_NUMBER_PAGE,"0000000000");
   103ec:	4b57      	ldr	r3, [pc, #348]	; (1054c <init_eeprom+0x3fc>)
   103ee:	0019      	movs	r1, r3
   103f0:	2015      	movs	r0, #21
   103f2:	4b67      	ldr	r3, [pc, #412]	; (10590 <init_eeprom+0x440>)
   103f4:	4798      	blx	r3
	config_mobile_no_ee(USER_14_MOBILE_NUMBER_PAGE,"0000000000");
   103f6:	4b55      	ldr	r3, [pc, #340]	; (1054c <init_eeprom+0x3fc>)
   103f8:	0019      	movs	r1, r3
   103fa:	2016      	movs	r0, #22
   103fc:	4b64      	ldr	r3, [pc, #400]	; (10590 <init_eeprom+0x440>)
   103fe:	4798      	blx	r3
	config_mobile_no_ee(USER_15_MOBILE_NUMBER_PAGE,"0000000000");
   10400:	4b52      	ldr	r3, [pc, #328]	; (1054c <init_eeprom+0x3fc>)
   10402:	0019      	movs	r1, r3
   10404:	2017      	movs	r0, #23
   10406:	4b62      	ldr	r3, [pc, #392]	; (10590 <init_eeprom+0x440>)
   10408:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(ALTARNATE_NUMBERS_PAGE, page_data);
   1040a:	4b4a      	ldr	r3, [pc, #296]	; (10534 <init_eeprom+0x3e4>)
   1040c:	0019      	movs	r1, r3
   1040e:	2018      	movs	r0, #24
   10410:	4b49      	ldr	r3, [pc, #292]	; (10538 <init_eeprom+0x3e8>)
   10412:	4798      	blx	r3
	memcpy(&alternateNumber_struct,page_data,sizeof(alternateNumber_struct));
   10414:	4a63      	ldr	r2, [pc, #396]	; (105a4 <init_eeprom+0x454>)
   10416:	4b47      	ldr	r3, [pc, #284]	; (10534 <init_eeprom+0x3e4>)
   10418:	0010      	movs	r0, r2
   1041a:	0019      	movs	r1, r3
   1041c:	2318      	movs	r3, #24
   1041e:	001a      	movs	r2, r3
   10420:	4b47      	ldr	r3, [pc, #284]	; (10540 <init_eeprom+0x3f0>)
   10422:	4798      	blx	r3
	if (alternateNumber_struct.u8tfirst_time_write_ee != 85)
   10424:	4b5f      	ldr	r3, [pc, #380]	; (105a4 <init_eeprom+0x454>)
   10426:	781b      	ldrb	r3, [r3, #0]
   10428:	2b55      	cmp	r3, #85	; 0x55
   1042a:	d025      	beq.n	10478 <init_eeprom+0x328>
	{
		alternateNumber_struct.u8tfirst_time_write_ee = 85;
   1042c:	4b5d      	ldr	r3, [pc, #372]	; (105a4 <init_eeprom+0x454>)
   1042e:	2255      	movs	r2, #85	; 0x55
   10430:	701a      	strb	r2, [r3, #0]
		
		alternateNumber_struct.alterNumberPresent = false;
   10432:	4b5c      	ldr	r3, [pc, #368]	; (105a4 <init_eeprom+0x454>)
   10434:	2200      	movs	r2, #0
   10436:	709a      	strb	r2, [r3, #2]
		alternateNumber_struct.alterNumberSetting = false;
   10438:	4b5a      	ldr	r3, [pc, #360]	; (105a4 <init_eeprom+0x454>)
   1043a:	2200      	movs	r2, #0
   1043c:	705a      	strb	r2, [r3, #1]
		
		memset(alternateNumber_struct.alternateNumber_ee, '\0', sizeof(alternateNumber_struct.alternateNumber_ee));
   1043e:	4b5a      	ldr	r3, [pc, #360]	; (105a8 <init_eeprom+0x458>)
   10440:	2214      	movs	r2, #20
   10442:	2100      	movs	r1, #0
   10444:	0018      	movs	r0, r3
   10446:	4b40      	ldr	r3, [pc, #256]	; (10548 <init_eeprom+0x3f8>)
   10448:	4798      	blx	r3
		strcpy(alternateNumber_struct.alternateNumber_ee,"0000000000");
   1044a:	4a57      	ldr	r2, [pc, #348]	; (105a8 <init_eeprom+0x458>)
   1044c:	4b3f      	ldr	r3, [pc, #252]	; (1054c <init_eeprom+0x3fc>)
   1044e:	0010      	movs	r0, r2
   10450:	0019      	movs	r1, r3
   10452:	230b      	movs	r3, #11
   10454:	001a      	movs	r2, r3
   10456:	4b3a      	ldr	r3, [pc, #232]	; (10540 <init_eeprom+0x3f0>)
   10458:	4798      	blx	r3
		
		memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
   1045a:	4a36      	ldr	r2, [pc, #216]	; (10534 <init_eeprom+0x3e4>)
   1045c:	4b51      	ldr	r3, [pc, #324]	; (105a4 <init_eeprom+0x454>)
   1045e:	0010      	movs	r0, r2
   10460:	0019      	movs	r1, r3
   10462:	2318      	movs	r3, #24
   10464:	001a      	movs	r2, r3
   10466:	4b36      	ldr	r3, [pc, #216]	; (10540 <init_eeprom+0x3f0>)
   10468:	4798      	blx	r3
		eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
   1046a:	4b32      	ldr	r3, [pc, #200]	; (10534 <init_eeprom+0x3e4>)
   1046c:	0019      	movs	r1, r3
   1046e:	2018      	movs	r0, #24
   10470:	4b37      	ldr	r3, [pc, #220]	; (10550 <init_eeprom+0x400>)
   10472:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   10474:	4b37      	ldr	r3, [pc, #220]	; (10554 <init_eeprom+0x404>)
   10476:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(M2M_NUMBERS_PAGE, page_data);
   10478:	4b2e      	ldr	r3, [pc, #184]	; (10534 <init_eeprom+0x3e4>)
   1047a:	0019      	movs	r1, r3
   1047c:	2019      	movs	r0, #25
   1047e:	4b2e      	ldr	r3, [pc, #184]	; (10538 <init_eeprom+0x3e8>)
   10480:	4798      	blx	r3
	memcpy(&m2m_Numbers_struct,page_data,sizeof(m2m_Numbers_struct));
   10482:	4a4a      	ldr	r2, [pc, #296]	; (105ac <init_eeprom+0x45c>)
   10484:	4b2b      	ldr	r3, [pc, #172]	; (10534 <init_eeprom+0x3e4>)
   10486:	0010      	movs	r0, r2
   10488:	0019      	movs	r1, r3
   1048a:	2330      	movs	r3, #48	; 0x30
   1048c:	001a      	movs	r2, r3
   1048e:	4b2c      	ldr	r3, [pc, #176]	; (10540 <init_eeprom+0x3f0>)
   10490:	4798      	blx	r3
	if (m2m_Numbers_struct.u8tfirst_time_write_ee != 85)
   10492:	4b46      	ldr	r3, [pc, #280]	; (105ac <init_eeprom+0x45c>)
   10494:	781b      	ldrb	r3, [r3, #0]
   10496:	2b55      	cmp	r3, #85	; 0x55
   10498:	d03c      	beq.n	10514 <init_eeprom+0x3c4>
	{
		m2m_Numbers_struct.u8tfirst_time_write_ee = 85;
   1049a:	4b44      	ldr	r3, [pc, #272]	; (105ac <init_eeprom+0x45c>)
   1049c:	2255      	movs	r2, #85	; 0x55
   1049e:	701a      	strb	r2, [r3, #0]
		
		memset(m2m_Numbers_struct.m2mNumber_ee, '\0', sizeof(m2m_Numbers_struct.m2mNumber_ee));
   104a0:	4b43      	ldr	r3, [pc, #268]	; (105b0 <init_eeprom+0x460>)
   104a2:	2214      	movs	r2, #20
   104a4:	2100      	movs	r1, #0
   104a6:	0018      	movs	r0, r3
   104a8:	4b27      	ldr	r3, [pc, #156]	; (10548 <init_eeprom+0x3f8>)
   104aa:	4798      	blx	r3
		strcpy(m2m_Numbers_struct.m2mNumber_ee,"0000000000");
   104ac:	4a40      	ldr	r2, [pc, #256]	; (105b0 <init_eeprom+0x460>)
   104ae:	4b27      	ldr	r3, [pc, #156]	; (1054c <init_eeprom+0x3fc>)
   104b0:	0010      	movs	r0, r2
   104b2:	0019      	movs	r1, r3
   104b4:	230b      	movs	r3, #11
   104b6:	001a      	movs	r2, r3
   104b8:	4b21      	ldr	r3, [pc, #132]	; (10540 <init_eeprom+0x3f0>)
   104ba:	4798      	blx	r3
		
		memset(m2m_Numbers_struct.m2mremoteNumber_ee, '\0', sizeof(m2m_Numbers_struct.m2mremoteNumber_ee));
   104bc:	4b3d      	ldr	r3, [pc, #244]	; (105b4 <init_eeprom+0x464>)
   104be:	2214      	movs	r2, #20
   104c0:	2100      	movs	r1, #0
   104c2:	0018      	movs	r0, r3
   104c4:	4b20      	ldr	r3, [pc, #128]	; (10548 <init_eeprom+0x3f8>)
   104c6:	4798      	blx	r3
		strcpy(m2m_Numbers_struct.m2mremoteNumber_ee,"0000000000");
   104c8:	4a3a      	ldr	r2, [pc, #232]	; (105b4 <init_eeprom+0x464>)
   104ca:	4b20      	ldr	r3, [pc, #128]	; (1054c <init_eeprom+0x3fc>)
   104cc:	0010      	movs	r0, r2
   104ce:	0019      	movs	r1, r3
   104d0:	230b      	movs	r3, #11
   104d2:	001a      	movs	r2, r3
   104d4:	4b1a      	ldr	r3, [pc, #104]	; (10540 <init_eeprom+0x3f0>)
   104d6:	4798      	blx	r3
		
		m2m_Numbers_struct.m2mPresent			= false;
   104d8:	4b34      	ldr	r3, [pc, #208]	; (105ac <init_eeprom+0x45c>)
   104da:	2200      	movs	r2, #0
   104dc:	705a      	strb	r2, [r3, #1]
		m2m_Numbers_struct.m2mVerified			= false;
   104de:	4b33      	ldr	r3, [pc, #204]	; (105ac <init_eeprom+0x45c>)
   104e0:	2200      	movs	r2, #0
   104e2:	709a      	strb	r2, [r3, #2]
		
		m2m_Numbers_struct.m2mRemotePresent		= false;
   104e4:	4b31      	ldr	r3, [pc, #196]	; (105ac <init_eeprom+0x45c>)
   104e6:	2200      	movs	r2, #0
   104e8:	70da      	strb	r2, [r3, #3]
		m2m_Numbers_struct.m2mRemoteVerified	= false;
   104ea:	4b30      	ldr	r3, [pc, #192]	; (105ac <init_eeprom+0x45c>)
   104ec:	2200      	movs	r2, #0
   104ee:	711a      	strb	r2, [r3, #4]
		
		m2m_Numbers_struct.m2mSetting			= false;
   104f0:	4b2e      	ldr	r3, [pc, #184]	; (105ac <init_eeprom+0x45c>)
   104f2:	2200      	movs	r2, #0
   104f4:	715a      	strb	r2, [r3, #5]
		
		memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   104f6:	4a0f      	ldr	r2, [pc, #60]	; (10534 <init_eeprom+0x3e4>)
   104f8:	4b2c      	ldr	r3, [pc, #176]	; (105ac <init_eeprom+0x45c>)
   104fa:	0010      	movs	r0, r2
   104fc:	0019      	movs	r1, r3
   104fe:	2330      	movs	r3, #48	; 0x30
   10500:	001a      	movs	r2, r3
   10502:	4b0f      	ldr	r3, [pc, #60]	; (10540 <init_eeprom+0x3f0>)
   10504:	4798      	blx	r3
		eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10506:	4b0b      	ldr	r3, [pc, #44]	; (10534 <init_eeprom+0x3e4>)
   10508:	0019      	movs	r1, r3
   1050a:	2019      	movs	r0, #25
   1050c:	4b10      	ldr	r3, [pc, #64]	; (10550 <init_eeprom+0x400>)
   1050e:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   10510:	4b10      	ldr	r3, [pc, #64]	; (10554 <init_eeprom+0x404>)
   10512:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   10514:	4b07      	ldr	r3, [pc, #28]	; (10534 <init_eeprom+0x3e4>)
   10516:	0019      	movs	r1, r3
   10518:	201a      	movs	r0, #26
   1051a:	4b07      	ldr	r3, [pc, #28]	; (10538 <init_eeprom+0x3e8>)
   1051c:	4798      	blx	r3
	memcpy(&user_settings_parameter_struct,page_data,sizeof(user_settings_parameter_struct));
   1051e:	4905      	ldr	r1, [pc, #20]	; (10534 <init_eeprom+0x3e4>)
   10520:	4b25      	ldr	r3, [pc, #148]	; (105b8 <init_eeprom+0x468>)
   10522:	2230      	movs	r2, #48	; 0x30
   10524:	0018      	movs	r0, r3
   10526:	4b06      	ldr	r3, [pc, #24]	; (10540 <init_eeprom+0x3f0>)
   10528:	4798      	blx	r3
	if (user_settings_parameter_struct.u8tfirst_time_write_ee != 85)
   1052a:	4b23      	ldr	r3, [pc, #140]	; (105b8 <init_eeprom+0x468>)
   1052c:	781b      	ldrb	r3, [r3, #0]
   1052e:	e045      	b.n	105bc <init_eeprom+0x46c>
   10530:	00010115 	.word	0x00010115
   10534:	20000584 	.word	0x20000584
   10538:	0002427d 	.word	0x0002427d
   1053c:	200005f8 	.word	0x200005f8
   10540:	00029881 	.word	0x00029881
   10544:	20000604 	.word	0x20000604
   10548:	000298b7 	.word	0x000298b7
   1054c:	0002a4b8 	.word	0x0002a4b8
   10550:	00024171 	.word	0x00024171
   10554:	00024319 	.word	0x00024319
   10558:	2000051c 	.word	0x2000051c
   1055c:	20000521 	.word	0x20000521
   10560:	0002a4c4 	.word	0x0002a4c4
   10564:	2000053f 	.word	0x2000053f
   10568:	0002a4d4 	.word	0x0002a4d4
   1056c:	200005c0 	.word	0x200005c0
   10570:	200005c5 	.word	0x200005c5
   10574:	0002a4e0 	.word	0x0002a4e0
   10578:	200005e5 	.word	0x200005e5
   1057c:	200005d5 	.word	0x200005d5
   10580:	0002a4f0 	.word	0x0002a4f0
   10584:	0002a4fc 	.word	0x0002a4fc
   10588:	20000614 	.word	0x20000614
   1058c:	0002a50c 	.word	0x0002a50c
   10590:	00010729 	.word	0x00010729
   10594:	0002a518 	.word	0x0002a518
   10598:	0002a524 	.word	0x0002a524
   1059c:	0002a530 	.word	0x0002a530
   105a0:	0002a53c 	.word	0x0002a53c
   105a4:	2000063c 	.word	0x2000063c
   105a8:	20000640 	.word	0x20000640
   105ac:	20000554 	.word	0x20000554
   105b0:	2000055c 	.word	0x2000055c
   105b4:	20000570 	.word	0x20000570
   105b8:	20000654 	.word	0x20000654
   105bc:	2b55      	cmp	r3, #85	; 0x55
   105be:	d065      	beq.n	1068c <init_eeprom+0x53c>
	{
		user_settings_parameter_struct.u8tfirst_time_write_ee		= 85;
   105c0:	4b51      	ldr	r3, [pc, #324]	; (10708 <init_eeprom+0x5b8>)
   105c2:	2255      	movs	r2, #85	; 0x55
   105c4:	701a      	strb	r2, [r3, #0]
		
		user_settings_parameter_struct.autoStartAddress				= false;
   105c6:	4b50      	ldr	r3, [pc, #320]	; (10708 <init_eeprom+0x5b8>)
   105c8:	2200      	movs	r2, #0
   105ca:	705a      	strb	r2, [r3, #1]
		user_settings_parameter_struct.autoStartTimeAddress			= 50;
   105cc:	4b4e      	ldr	r3, [pc, #312]	; (10708 <init_eeprom+0x5b8>)
   105ce:	2232      	movs	r2, #50	; 0x32
   105d0:	805a      	strh	r2, [r3, #2]
		user_settings_parameter_struct.dndAddress					= DND_OFF;
   105d2:	4b4d      	ldr	r3, [pc, #308]	; (10708 <init_eeprom+0x5b8>)
   105d4:	224f      	movs	r2, #79	; 0x4f
   105d6:	711a      	strb	r2, [r3, #4]
		user_settings_parameter_struct.responseAddress				= 'T';
   105d8:	4b4b      	ldr	r3, [pc, #300]	; (10708 <init_eeprom+0x5b8>)
   105da:	2254      	movs	r2, #84	; 0x54
   105dc:	715a      	strb	r2, [r3, #5]
		user_settings_parameter_struct.starDeltaTimerAddress		= 2;
   105de:	4b4a      	ldr	r3, [pc, #296]	; (10708 <init_eeprom+0x5b8>)
   105e0:	2202      	movs	r2, #2
   105e2:	80da      	strh	r2, [r3, #6]
		//user_settings_parameter_struct.bypassAddress				= false;
		user_settings_parameter_struct.eventStageAddress			= 0;
   105e4:	4b48      	ldr	r3, [pc, #288]	; (10708 <init_eeprom+0x5b8>)
   105e6:	2200      	movs	r2, #0
   105e8:	721a      	strb	r2, [r3, #8]
		user_settings_parameter_struct.noCallAddress				= false;
   105ea:	4b47      	ldr	r3, [pc, #284]	; (10708 <init_eeprom+0x5b8>)
   105ec:	2200      	movs	r2, #0
   105ee:	725a      	strb	r2, [r3, #9]
		user_settings_parameter_struct.noCallStartTimeHourAddress	= 0;
   105f0:	4b45      	ldr	r3, [pc, #276]	; (10708 <init_eeprom+0x5b8>)
   105f2:	2200      	movs	r2, #0
   105f4:	729a      	strb	r2, [r3, #10]
		user_settings_parameter_struct.noCallStartTimeMinuteAddress = 0;
   105f6:	4b44      	ldr	r3, [pc, #272]	; (10708 <init_eeprom+0x5b8>)
   105f8:	2200      	movs	r2, #0
   105fa:	72da      	strb	r2, [r3, #11]
		user_settings_parameter_struct.noCallStopTimeHourAddress	= 0;
   105fc:	4b42      	ldr	r3, [pc, #264]	; (10708 <init_eeprom+0x5b8>)
   105fe:	2200      	movs	r2, #0
   10600:	731a      	strb	r2, [r3, #12]
		user_settings_parameter_struct.noCallStopTimeMinuteAddress	= 0;
   10602:	4b41      	ldr	r3, [pc, #260]	; (10708 <init_eeprom+0x5b8>)
   10604:	2200      	movs	r2, #0
   10606:	735a      	strb	r2, [r3, #13]
		user_settings_parameter_struct.lowVoltAddress				= 0;
   10608:	4b3f      	ldr	r3, [pc, #252]	; (10708 <init_eeprom+0x5b8>)
   1060a:	2200      	movs	r2, #0
   1060c:	739a      	strb	r2, [r3, #14]
		user_settings_parameter_struct.currentDetectionAddress		= false;
   1060e:	4b3e      	ldr	r3, [pc, #248]	; (10708 <init_eeprom+0x5b8>)
   10610:	2200      	movs	r2, #0
   10612:	73da      	strb	r2, [r3, #15]
		user_settings_parameter_struct.normalLoadAddress			= 0;
   10614:	4b3c      	ldr	r3, [pc, #240]	; (10708 <init_eeprom+0x5b8>)
   10616:	2200      	movs	r2, #0
   10618:	611a      	str	r2, [r3, #16]
		user_settings_parameter_struct.overloadAddress				= 0;
   1061a:	4b3b      	ldr	r3, [pc, #236]	; (10708 <init_eeprom+0x5b8>)
   1061c:	2200      	movs	r2, #0
   1061e:	615a      	str	r2, [r3, #20]
		user_settings_parameter_struct.underloadAddress				= 0;
   10620:	4b39      	ldr	r3, [pc, #228]	; (10708 <init_eeprom+0x5b8>)
   10622:	2200      	movs	r2, #0
   10624:	619a      	str	r2, [r3, #24]
		user_settings_parameter_struct.underloadPerAddress			= 85;
   10626:	4b38      	ldr	r3, [pc, #224]	; (10708 <init_eeprom+0x5b8>)
   10628:	2255      	movs	r2, #85	; 0x55
   1062a:	771a      	strb	r2, [r3, #28]
		user_settings_parameter_struct.overloadPerAddress			= 120;
   1062c:	4b36      	ldr	r3, [pc, #216]	; (10708 <init_eeprom+0x5b8>)
   1062e:	2278      	movs	r2, #120	; 0x78
   10630:	775a      	strb	r2, [r3, #29]
		//user_settings_parameter_struct.jumperSettingAddress			= 1;
		user_settings_parameter_struct.preventOverFlowAddress		= false;
   10632:	4b35      	ldr	r3, [pc, #212]	; (10708 <init_eeprom+0x5b8>)
   10634:	2200      	movs	r2, #0
   10636:	779a      	strb	r2, [r3, #30]
		user_settings_parameter_struct.waterBypassAddress			= false;
   10638:	4b33      	ldr	r3, [pc, #204]	; (10708 <init_eeprom+0x5b8>)
   1063a:	2200      	movs	r2, #0
   1063c:	77da      	strb	r2, [r3, #31]
		
		user_settings_parameter_struct.detectSinglePhasing			= true;
   1063e:	4b32      	ldr	r3, [pc, #200]	; (10708 <init_eeprom+0x5b8>)
   10640:	2220      	movs	r2, #32
   10642:	2101      	movs	r1, #1
   10644:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.singlePhasingVoltage			= 80;
   10646:	4b30      	ldr	r3, [pc, #192]	; (10708 <init_eeprom+0x5b8>)
   10648:	2250      	movs	r2, #80	; 0x50
   1064a:	845a      	strh	r2, [r3, #34]	; 0x22
		user_settings_parameter_struct.detectPhaseSequence			= true;
   1064c:	4b2e      	ldr	r3, [pc, #184]	; (10708 <init_eeprom+0x5b8>)
   1064e:	2224      	movs	r2, #36	; 0x24
   10650:	2101      	movs	r1, #1
   10652:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.detectMotorFeedback			= MOTORFEEDBACK_DETECTION_ON;
   10654:	4b2c      	ldr	r3, [pc, #176]	; (10708 <init_eeprom+0x5b8>)
   10656:	2225      	movs	r2, #37	; 0x25
   10658:	2102      	movs	r1, #2
   1065a:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.over_under_DetectionMethod	= MOTOR_UNDEROVER_DETECTION_CURRENT;
   1065c:	4b2a      	ldr	r3, [pc, #168]	; (10708 <init_eeprom+0x5b8>)
   1065e:	2226      	movs	r2, #38	; 0x26
   10660:	2102      	movs	r1, #2
   10662:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.motorVoltageBypass			= MOTOR_VOLTAGE_BYPASS_OFF;
   10664:	4b28      	ldr	r3, [pc, #160]	; (10708 <init_eeprom+0x5b8>)
   10666:	2227      	movs	r2, #39	; 0x27
   10668:	2100      	movs	r1, #0
   1066a:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.motorVoltageBypassTime		= 10000L;
   1066c:	4b26      	ldr	r3, [pc, #152]	; (10708 <init_eeprom+0x5b8>)
   1066e:	4a27      	ldr	r2, [pc, #156]	; (1070c <init_eeprom+0x5bc>)
   10670:	629a      	str	r2, [r3, #40]	; 0x28

		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   10672:	4925      	ldr	r1, [pc, #148]	; (10708 <init_eeprom+0x5b8>)
   10674:	4b26      	ldr	r3, [pc, #152]	; (10710 <init_eeprom+0x5c0>)
   10676:	2230      	movs	r2, #48	; 0x30
   10678:	0018      	movs	r0, r3
   1067a:	4b26      	ldr	r3, [pc, #152]	; (10714 <init_eeprom+0x5c4>)
   1067c:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1067e:	4b24      	ldr	r3, [pc, #144]	; (10710 <init_eeprom+0x5c0>)
   10680:	0019      	movs	r1, r3
   10682:	201a      	movs	r0, #26
   10684:	4b24      	ldr	r3, [pc, #144]	; (10718 <init_eeprom+0x5c8>)
   10686:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   10688:	4b24      	ldr	r3, [pc, #144]	; (1071c <init_eeprom+0x5cc>)
   1068a:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(FACTORY_SETTING_PARAMETERS_PAGE, page_data);
   1068c:	4b20      	ldr	r3, [pc, #128]	; (10710 <init_eeprom+0x5c0>)
   1068e:	0019      	movs	r1, r3
   10690:	201b      	movs	r0, #27
   10692:	4b23      	ldr	r3, [pc, #140]	; (10720 <init_eeprom+0x5d0>)
   10694:	4798      	blx	r3
	memcpy(&factory_settings_parameter_struct,page_data,sizeof(factory_settings_parameter_struct));
   10696:	491e      	ldr	r1, [pc, #120]	; (10710 <init_eeprom+0x5c0>)
   10698:	4b22      	ldr	r3, [pc, #136]	; (10724 <init_eeprom+0x5d4>)
   1069a:	2210      	movs	r2, #16
   1069c:	0018      	movs	r0, r3
   1069e:	4b1d      	ldr	r3, [pc, #116]	; (10714 <init_eeprom+0x5c4>)
   106a0:	4798      	blx	r3
	if (factory_settings_parameter_struct.u8tfirst_time_write_ee != 85)
   106a2:	4b20      	ldr	r3, [pc, #128]	; (10724 <init_eeprom+0x5d4>)
   106a4:	781b      	ldrb	r3, [r3, #0]
   106a6:	2b55      	cmp	r3, #85	; 0x55
   106a8:	d02a      	beq.n	10700 <init_eeprom+0x5b0>
	{
		factory_settings_parameter_struct.u8tfirst_time_write_ee	= 85;
   106aa:	4b1e      	ldr	r3, [pc, #120]	; (10724 <init_eeprom+0x5d4>)
   106ac:	2255      	movs	r2, #85	; 0x55
   106ae:	701a      	strb	r2, [r3, #0]
		factory_settings_parameter_struct.AMPERE_SPEAK				= true;
   106b0:	4b1c      	ldr	r3, [pc, #112]	; (10724 <init_eeprom+0x5d4>)
   106b2:	2201      	movs	r2, #1
   106b4:	709a      	strb	r2, [r3, #2]
		factory_settings_parameter_struct.ENABLE_CURRENT			= true;
   106b6:	4b1b      	ldr	r3, [pc, #108]	; (10724 <init_eeprom+0x5d4>)
   106b8:	2201      	movs	r2, #1
   106ba:	705a      	strb	r2, [r3, #1]
		factory_settings_parameter_struct.DUAL_LEVEL			    = false;	//= true;
   106bc:	4b19      	ldr	r3, [pc, #100]	; (10724 <init_eeprom+0x5d4>)
   106be:	2200      	movs	r2, #0
   106c0:	719a      	strb	r2, [r3, #6]
		factory_settings_parameter_struct.ENABLE_WATER				= false;	//= true;
   106c2:	4b18      	ldr	r3, [pc, #96]	; (10724 <init_eeprom+0x5d4>)
   106c4:	2200      	movs	r2, #0
   106c6:	715a      	strb	r2, [r3, #5]
		factory_settings_parameter_struct.ENABLE_GP					= false;	// = true;
   106c8:	4b16      	ldr	r3, [pc, #88]	; (10724 <init_eeprom+0x5d4>)
   106ca:	2200      	movs	r2, #0
   106cc:	711a      	strb	r2, [r3, #4]
		factory_settings_parameter_struct.ENABLE_M2M				= false;
   106ce:	4b15      	ldr	r3, [pc, #84]	; (10724 <init_eeprom+0x5d4>)
   106d0:	2200      	movs	r2, #0
   106d2:	70da      	strb	r2, [r3, #3]
		factory_settings_parameter_struct.NOLEVELCHANGECALL			= false;
   106d4:	4b13      	ldr	r3, [pc, #76]	; (10724 <init_eeprom+0x5d4>)
   106d6:	2200      	movs	r2, #0
   106d8:	71da      	strb	r2, [r3, #7]
		
		factory_settings_parameter_struct.DeviceId_ee				= 0;
   106da:	4b12      	ldr	r3, [pc, #72]	; (10724 <init_eeprom+0x5d4>)
   106dc:	2200      	movs	r2, #0
   106de:	609a      	str	r2, [r3, #8]
		factory_settings_parameter_struct.dateCode					= 0;
   106e0:	4b10      	ldr	r3, [pc, #64]	; (10724 <init_eeprom+0x5d4>)
   106e2:	2200      	movs	r2, #0
   106e4:	60da      	str	r2, [r3, #12]

		//memset(factory_settings_parameter_struct.DeviceID_ee, '\0', sizeof(factory_settings_parameter_struct.DeviceID_ee));
		//strcpy(factory_settings_parameter_struct.DeviceID_ee,"0000000000");
		
		memcpy(page_data,&factory_settings_parameter_struct,sizeof(factory_settings_parameter_struct));
   106e6:	490f      	ldr	r1, [pc, #60]	; (10724 <init_eeprom+0x5d4>)
   106e8:	4b09      	ldr	r3, [pc, #36]	; (10710 <init_eeprom+0x5c0>)
   106ea:	2210      	movs	r2, #16
   106ec:	0018      	movs	r0, r3
   106ee:	4b09      	ldr	r3, [pc, #36]	; (10714 <init_eeprom+0x5c4>)
   106f0:	4798      	blx	r3
		eeprom_emulator_write_page(FACTORY_SETTING_PARAMETERS_PAGE, page_data);
   106f2:	4b07      	ldr	r3, [pc, #28]	; (10710 <init_eeprom+0x5c0>)
   106f4:	0019      	movs	r1, r3
   106f6:	201b      	movs	r0, #27
   106f8:	4b07      	ldr	r3, [pc, #28]	; (10718 <init_eeprom+0x5c8>)
   106fa:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   106fc:	4b07      	ldr	r3, [pc, #28]	; (1071c <init_eeprom+0x5cc>)
   106fe:	4798      	blx	r3
	}
}
   10700:	46c0      	nop			; (mov r8, r8)
   10702:	46bd      	mov	sp, r7
   10704:	bd80      	pop	{r7, pc}
   10706:	46c0      	nop			; (mov r8, r8)
   10708:	20000654 	.word	0x20000654
   1070c:	00002710 	.word	0x00002710
   10710:	20000584 	.word	0x20000584
   10714:	00029881 	.word	0x00029881
   10718:	00024171 	.word	0x00024171
   1071c:	00024319 	.word	0x00024319
   10720:	0002427d 	.word	0x0002427d
   10724:	2000062c 	.word	0x2000062c

00010728 <config_mobile_no_ee>:

void config_mobile_no_ee(const uint8_t page_loc,const char *mobile_number)
{
   10728:	b580      	push	{r7, lr}
   1072a:	b088      	sub	sp, #32
   1072c:	af00      	add	r7, sp, #0
   1072e:	0002      	movs	r2, r0
   10730:	6039      	str	r1, [r7, #0]
   10732:	1dfb      	adds	r3, r7, #7
   10734:	701a      	strb	r2, [r3, #0]
	struct mobile_no_struct mobile_no;
	memset(page_data, '\0', sizeof(page_data));
   10736:	4b28      	ldr	r3, [pc, #160]	; (107d8 <config_mobile_no_ee+0xb0>)
   10738:	223c      	movs	r2, #60	; 0x3c
   1073a:	2100      	movs	r1, #0
   1073c:	0018      	movs	r0, r3
   1073e:	4b27      	ldr	r3, [pc, #156]	; (107dc <config_mobile_no_ee+0xb4>)
   10740:	4798      	blx	r3
	eeprom_emulator_read_page(page_loc, page_data);
   10742:	4a25      	ldr	r2, [pc, #148]	; (107d8 <config_mobile_no_ee+0xb0>)
   10744:	1dfb      	adds	r3, r7, #7
   10746:	781b      	ldrb	r3, [r3, #0]
   10748:	0011      	movs	r1, r2
   1074a:	0018      	movs	r0, r3
   1074c:	4b24      	ldr	r3, [pc, #144]	; (107e0 <config_mobile_no_ee+0xb8>)
   1074e:	4798      	blx	r3
	memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10750:	2308      	movs	r3, #8
   10752:	18fa      	adds	r2, r7, r3
   10754:	4b20      	ldr	r3, [pc, #128]	; (107d8 <config_mobile_no_ee+0xb0>)
   10756:	0010      	movs	r0, r2
   10758:	0019      	movs	r1, r3
   1075a:	2318      	movs	r3, #24
   1075c:	001a      	movs	r2, r3
   1075e:	4b21      	ldr	r3, [pc, #132]	; (107e4 <config_mobile_no_ee+0xbc>)
   10760:	4798      	blx	r3
	if (mobile_no.u8tfirst_time_write_ee != 85)
   10762:	2308      	movs	r3, #8
   10764:	18fb      	adds	r3, r7, r3
   10766:	781b      	ldrb	r3, [r3, #0]
   10768:	2b55      	cmp	r3, #85	; 0x55
   1076a:	d031      	beq.n	107d0 <config_mobile_no_ee+0xa8>
	{
		mobile_no.u8tfirst_time_write_ee = 85;
   1076c:	2308      	movs	r3, #8
   1076e:	18fb      	adds	r3, r7, r3
   10770:	2255      	movs	r2, #85	; 0x55
   10772:	701a      	strb	r2, [r3, #0]
		mobile_no.dummy1 = 0;
   10774:	2308      	movs	r3, #8
   10776:	18fb      	adds	r3, r7, r3
   10778:	2200      	movs	r2, #0
   1077a:	705a      	strb	r2, [r3, #1]
		mobile_no.dummy2 = 0;
   1077c:	2308      	movs	r3, #8
   1077e:	18fb      	adds	r3, r7, r3
   10780:	2200      	movs	r2, #0
   10782:	709a      	strb	r2, [r3, #2]
		mobile_no.dummy3 = 0;
   10784:	2308      	movs	r3, #8
   10786:	18fb      	adds	r3, r7, r3
   10788:	2200      	movs	r2, #0
   1078a:	70da      	strb	r2, [r3, #3]
		memset(mobile_no.mobile_no_ee, '\0', sizeof(mobile_no.mobile_no_ee));
   1078c:	2308      	movs	r3, #8
   1078e:	18fb      	adds	r3, r7, r3
   10790:	3304      	adds	r3, #4
   10792:	2214      	movs	r2, #20
   10794:	2100      	movs	r1, #0
   10796:	0018      	movs	r0, r3
   10798:	4b10      	ldr	r3, [pc, #64]	; (107dc <config_mobile_no_ee+0xb4>)
   1079a:	4798      	blx	r3
		strcpy(mobile_no.mobile_no_ee,mobile_number);
   1079c:	683a      	ldr	r2, [r7, #0]
   1079e:	2308      	movs	r3, #8
   107a0:	18fb      	adds	r3, r7, r3
   107a2:	3304      	adds	r3, #4
   107a4:	0011      	movs	r1, r2
   107a6:	0018      	movs	r0, r3
   107a8:	4b0f      	ldr	r3, [pc, #60]	; (107e8 <config_mobile_no_ee+0xc0>)
   107aa:	4798      	blx	r3
		
		memcpy(page_data,&mobile_no,sizeof(mobile_no));
   107ac:	4a0a      	ldr	r2, [pc, #40]	; (107d8 <config_mobile_no_ee+0xb0>)
   107ae:	2308      	movs	r3, #8
   107b0:	18fb      	adds	r3, r7, r3
   107b2:	0010      	movs	r0, r2
   107b4:	0019      	movs	r1, r3
   107b6:	2318      	movs	r3, #24
   107b8:	001a      	movs	r2, r3
   107ba:	4b0a      	ldr	r3, [pc, #40]	; (107e4 <config_mobile_no_ee+0xbc>)
   107bc:	4798      	blx	r3
		eeprom_emulator_write_page(page_loc, page_data);
   107be:	4a06      	ldr	r2, [pc, #24]	; (107d8 <config_mobile_no_ee+0xb0>)
   107c0:	1dfb      	adds	r3, r7, #7
   107c2:	781b      	ldrb	r3, [r3, #0]
   107c4:	0011      	movs	r1, r2
   107c6:	0018      	movs	r0, r3
   107c8:	4b08      	ldr	r3, [pc, #32]	; (107ec <config_mobile_no_ee+0xc4>)
   107ca:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   107cc:	4b08      	ldr	r3, [pc, #32]	; (107f0 <config_mobile_no_ee+0xc8>)
   107ce:	4798      	blx	r3
	}
}
   107d0:	46c0      	nop			; (mov r8, r8)
   107d2:	46bd      	mov	sp, r7
   107d4:	b008      	add	sp, #32
   107d6:	bd80      	pop	{r7, pc}
   107d8:	20000584 	.word	0x20000584
   107dc:	000298b7 	.word	0x000298b7
   107e0:	0002427d 	.word	0x0002427d
   107e4:	00029881 	.word	0x00029881
   107e8:	00029b37 	.word	0x00029b37
   107ec:	00024171 	.word	0x00024171
   107f0:	00024319 	.word	0x00024319

000107f4 <getNumbers>:


void getNumbers(char *string)
{
   107f4:	b580      	push	{r7, lr}
   107f6:	b08a      	sub	sp, #40	; 0x28
   107f8:	af00      	add	r7, sp, #0
   107fa:	6078      	str	r0, [r7, #4]
	strcpy(string,"");
   107fc:	687b      	ldr	r3, [r7, #4]
   107fe:	2200      	movs	r2, #0
   10800:	701a      	strb	r2, [r3, #0]
	
	for(uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
   10802:	2327      	movs	r3, #39	; 0x27
   10804:	18fb      	adds	r3, r7, r3
   10806:	2200      	movs	r2, #0
   10808:	701a      	strb	r2, [r3, #0]
   1080a:	e063      	b.n	108d4 <getNumbers+0xe0>
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
   1080c:	4b37      	ldr	r3, [pc, #220]	; (108ec <getNumbers+0xf8>)
   1080e:	223c      	movs	r2, #60	; 0x3c
   10810:	2100      	movs	r1, #0
   10812:	0018      	movs	r0, r3
   10814:	4b36      	ldr	r3, [pc, #216]	; (108f0 <getNumbers+0xfc>)
   10816:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
   10818:	2327      	movs	r3, #39	; 0x27
   1081a:	18fb      	adds	r3, r7, r3
   1081c:	781b      	ldrb	r3, [r3, #0]
   1081e:	3309      	adds	r3, #9
   10820:	b2db      	uxtb	r3, r3
   10822:	4a32      	ldr	r2, [pc, #200]	; (108ec <getNumbers+0xf8>)
   10824:	0011      	movs	r1, r2
   10826:	0018      	movs	r0, r3
   10828:	4b32      	ldr	r3, [pc, #200]	; (108f4 <getNumbers+0x100>)
   1082a:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
   1082c:	230c      	movs	r3, #12
   1082e:	18fa      	adds	r2, r7, r3
   10830:	4b2e      	ldr	r3, [pc, #184]	; (108ec <getNumbers+0xf8>)
   10832:	0010      	movs	r0, r2
   10834:	0019      	movs	r1, r3
   10836:	2318      	movs	r3, #24
   10838:	001a      	movs	r2, r3
   1083a:	4b2f      	ldr	r3, [pc, #188]	; (108f8 <getNumbers+0x104>)
   1083c:	4798      	blx	r3
		if(i==user_count_struct.primaryNumberIndex)
   1083e:	4b2f      	ldr	r3, [pc, #188]	; (108fc <getNumbers+0x108>)
   10840:	78db      	ldrb	r3, [r3, #3]
   10842:	2227      	movs	r2, #39	; 0x27
   10844:	18ba      	adds	r2, r7, r2
   10846:	7812      	ldrb	r2, [r2, #0]
   10848:	429a      	cmp	r2, r3
   1084a:	d10f      	bne.n	1086c <getNumbers+0x78>
		{
			strcat(string,"P:");
   1084c:	687b      	ldr	r3, [r7, #4]
   1084e:	0018      	movs	r0, r3
   10850:	4b2b      	ldr	r3, [pc, #172]	; (10900 <getNumbers+0x10c>)
   10852:	4798      	blx	r3
   10854:	0003      	movs	r3, r0
   10856:	001a      	movs	r2, r3
   10858:	687b      	ldr	r3, [r7, #4]
   1085a:	189a      	adds	r2, r3, r2
   1085c:	4b29      	ldr	r3, [pc, #164]	; (10904 <getNumbers+0x110>)
   1085e:	0010      	movs	r0, r2
   10860:	0019      	movs	r1, r3
   10862:	2303      	movs	r3, #3
   10864:	001a      	movs	r2, r3
   10866:	4b24      	ldr	r3, [pc, #144]	; (108f8 <getNumbers+0x104>)
   10868:	4798      	blx	r3
   1086a:	e015      	b.n	10898 <getNumbers+0xa4>
		}
		else if(i==user_count_struct.secondaryNumberIndex)
   1086c:	4b23      	ldr	r3, [pc, #140]	; (108fc <getNumbers+0x108>)
   1086e:	791b      	ldrb	r3, [r3, #4]
   10870:	2227      	movs	r2, #39	; 0x27
   10872:	18ba      	adds	r2, r7, r2
   10874:	7812      	ldrb	r2, [r2, #0]
   10876:	429a      	cmp	r2, r3
   10878:	d10e      	bne.n	10898 <getNumbers+0xa4>
		{
			strcat(string,"S:");
   1087a:	687b      	ldr	r3, [r7, #4]
   1087c:	0018      	movs	r0, r3
   1087e:	4b20      	ldr	r3, [pc, #128]	; (10900 <getNumbers+0x10c>)
   10880:	4798      	blx	r3
   10882:	0003      	movs	r3, r0
   10884:	001a      	movs	r2, r3
   10886:	687b      	ldr	r3, [r7, #4]
   10888:	189a      	adds	r2, r3, r2
   1088a:	4b1f      	ldr	r3, [pc, #124]	; (10908 <getNumbers+0x114>)
   1088c:	0010      	movs	r0, r2
   1088e:	0019      	movs	r1, r3
   10890:	2303      	movs	r3, #3
   10892:	001a      	movs	r2, r3
   10894:	4b18      	ldr	r3, [pc, #96]	; (108f8 <getNumbers+0x104>)
   10896:	4798      	blx	r3
		}
		strcat(string,mobile_no.mobile_no_ee);
   10898:	230c      	movs	r3, #12
   1089a:	18fb      	adds	r3, r7, r3
   1089c:	1d1a      	adds	r2, r3, #4
   1089e:	687b      	ldr	r3, [r7, #4]
   108a0:	0011      	movs	r1, r2
   108a2:	0018      	movs	r0, r3
   108a4:	4b19      	ldr	r3, [pc, #100]	; (1090c <getNumbers+0x118>)
   108a6:	4798      	blx	r3
		strcat(string,"\n");
   108a8:	687b      	ldr	r3, [r7, #4]
   108aa:	0018      	movs	r0, r3
   108ac:	4b14      	ldr	r3, [pc, #80]	; (10900 <getNumbers+0x10c>)
   108ae:	4798      	blx	r3
   108b0:	0003      	movs	r3, r0
   108b2:	001a      	movs	r2, r3
   108b4:	687b      	ldr	r3, [r7, #4]
   108b6:	189a      	adds	r2, r3, r2
   108b8:	4b15      	ldr	r3, [pc, #84]	; (10910 <getNumbers+0x11c>)
   108ba:	0010      	movs	r0, r2
   108bc:	0019      	movs	r1, r3
   108be:	2302      	movs	r3, #2
   108c0:	001a      	movs	r2, r3
   108c2:	4b0d      	ldr	r3, [pc, #52]	; (108f8 <getNumbers+0x104>)
   108c4:	4798      	blx	r3
	for(uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
   108c6:	2327      	movs	r3, #39	; 0x27
   108c8:	18fb      	adds	r3, r7, r3
   108ca:	781a      	ldrb	r2, [r3, #0]
   108cc:	2327      	movs	r3, #39	; 0x27
   108ce:	18fb      	adds	r3, r7, r3
   108d0:	3201      	adds	r2, #1
   108d2:	701a      	strb	r2, [r3, #0]
   108d4:	4b09      	ldr	r3, [pc, #36]	; (108fc <getNumbers+0x108>)
   108d6:	789b      	ldrb	r3, [r3, #2]
   108d8:	2227      	movs	r2, #39	; 0x27
   108da:	18ba      	adds	r2, r7, r2
   108dc:	7812      	ldrb	r2, [r2, #0]
   108de:	429a      	cmp	r2, r3
   108e0:	d394      	bcc.n	1080c <getNumbers+0x18>
	}
}
   108e2:	46c0      	nop			; (mov r8, r8)
   108e4:	46bd      	mov	sp, r7
   108e6:	b00a      	add	sp, #40	; 0x28
   108e8:	bd80      	pop	{r7, pc}
   108ea:	46c0      	nop			; (mov r8, r8)
   108ec:	20000584 	.word	0x20000584
   108f0:	000298b7 	.word	0x000298b7
   108f4:	0002427d 	.word	0x0002427d
   108f8:	00029881 	.word	0x00029881
   108fc:	20000614 	.word	0x20000614
   10900:	00029b47 	.word	0x00029b47
   10904:	0002a548 	.word	0x0002a548
   10908:	0002a54c 	.word	0x0002a54c
   1090c:	00029b01 	.word	0x00029b01
   10910:	0002a550 	.word	0x0002a550

00010914 <getIndexedNumber>:

char *getIndexedNumber(char *IndexNo, uint8_t index)
{
   10914:	b580      	push	{r7, lr}
   10916:	b088      	sub	sp, #32
   10918:	af00      	add	r7, sp, #0
   1091a:	6078      	str	r0, [r7, #4]
   1091c:	000a      	movs	r2, r1
   1091e:	1cfb      	adds	r3, r7, #3
   10920:	701a      	strb	r2, [r3, #0]
	strcpy(IndexNo,"");
   10922:	687b      	ldr	r3, [r7, #4]
   10924:	2200      	movs	r2, #0
   10926:	701a      	strb	r2, [r3, #0]
	if(user_count_struct.current_user_no_count>index)
   10928:	4b15      	ldr	r3, [pc, #84]	; (10980 <getIndexedNumber+0x6c>)
   1092a:	789b      	ldrb	r3, [r3, #2]
   1092c:	1cfa      	adds	r2, r7, #3
   1092e:	7812      	ldrb	r2, [r2, #0]
   10930:	429a      	cmp	r2, r3
   10932:	d21f      	bcs.n	10974 <getIndexedNumber+0x60>
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
   10934:	4b13      	ldr	r3, [pc, #76]	; (10984 <getIndexedNumber+0x70>)
   10936:	223c      	movs	r2, #60	; 0x3c
   10938:	2100      	movs	r1, #0
   1093a:	0018      	movs	r0, r3
   1093c:	4b12      	ldr	r3, [pc, #72]	; (10988 <getIndexedNumber+0x74>)
   1093e:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+index, page_data);
   10940:	1cfb      	adds	r3, r7, #3
   10942:	781b      	ldrb	r3, [r3, #0]
   10944:	3309      	adds	r3, #9
   10946:	b2db      	uxtb	r3, r3
   10948:	4a0e      	ldr	r2, [pc, #56]	; (10984 <getIndexedNumber+0x70>)
   1094a:	0011      	movs	r1, r2
   1094c:	0018      	movs	r0, r3
   1094e:	4b0f      	ldr	r3, [pc, #60]	; (1098c <getIndexedNumber+0x78>)
   10950:	4798      	blx	r3
		//eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+index-1, page_data);
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10952:	2308      	movs	r3, #8
   10954:	18fa      	adds	r2, r7, r3
   10956:	4b0b      	ldr	r3, [pc, #44]	; (10984 <getIndexedNumber+0x70>)
   10958:	0010      	movs	r0, r2
   1095a:	0019      	movs	r1, r3
   1095c:	2318      	movs	r3, #24
   1095e:	001a      	movs	r2, r3
   10960:	4b0b      	ldr	r3, [pc, #44]	; (10990 <getIndexedNumber+0x7c>)
   10962:	4798      	blx	r3
		strcat(IndexNo,mobile_no.mobile_no_ee);
   10964:	2308      	movs	r3, #8
   10966:	18fb      	adds	r3, r7, r3
   10968:	1d1a      	adds	r2, r3, #4
   1096a:	687b      	ldr	r3, [r7, #4]
   1096c:	0011      	movs	r1, r2
   1096e:	0018      	movs	r0, r3
   10970:	4b08      	ldr	r3, [pc, #32]	; (10994 <getIndexedNumber+0x80>)
   10972:	4798      	blx	r3
	}
	return IndexNo;
   10974:	687b      	ldr	r3, [r7, #4]
}
   10976:	0018      	movs	r0, r3
   10978:	46bd      	mov	sp, r7
   1097a:	b008      	add	sp, #32
   1097c:	bd80      	pop	{r7, pc}
   1097e:	46c0      	nop			; (mov r8, r8)
   10980:	20000614 	.word	0x20000614
   10984:	20000584 	.word	0x20000584
   10988:	000298b7 	.word	0x000298b7
   1098c:	0002427d 	.word	0x0002427d
   10990:	00029881 	.word	0x00029881
   10994:	00029b01 	.word	0x00029b01

00010998 <isPrimaryNumber>:

bool isPrimaryNumber(char *number)
{
   10998:	b580      	push	{r7, lr}
   1099a:	b088      	sub	sp, #32
   1099c:	af00      	add	r7, sp, #0
   1099e:	6078      	str	r0, [r7, #4]
	if(user_count_struct.current_user_no_count > 0)
   109a0:	4b14      	ldr	r3, [pc, #80]	; (109f4 <isPrimaryNumber+0x5c>)
   109a2:	789b      	ldrb	r3, [r3, #2]
   109a4:	2b00      	cmp	r3, #0
   109a6:	d020      	beq.n	109ea <isPrimaryNumber+0x52>
	{
		char primaryNumber[20] = {0};
   109a8:	230c      	movs	r3, #12
   109aa:	18fb      	adds	r3, r7, r3
   109ac:	0018      	movs	r0, r3
   109ae:	2314      	movs	r3, #20
   109b0:	001a      	movs	r2, r3
   109b2:	2100      	movs	r1, #0
   109b4:	4b10      	ldr	r3, [pc, #64]	; (109f8 <isPrimaryNumber+0x60>)
   109b6:	4798      	blx	r3
		getIndexedNumber(&primaryNumber,user_count_struct.primaryNumberIndex);
   109b8:	4b0e      	ldr	r3, [pc, #56]	; (109f4 <isPrimaryNumber+0x5c>)
   109ba:	78da      	ldrb	r2, [r3, #3]
   109bc:	230c      	movs	r3, #12
   109be:	18fb      	adds	r3, r7, r3
   109c0:	0011      	movs	r1, r2
   109c2:	0018      	movs	r0, r3
   109c4:	4b0d      	ldr	r3, [pc, #52]	; (109fc <isPrimaryNumber+0x64>)
   109c6:	4798      	blx	r3
		if(strstr(number,primaryNumber))
   109c8:	230c      	movs	r3, #12
   109ca:	18fa      	adds	r2, r7, r3
   109cc:	687b      	ldr	r3, [r7, #4]
   109ce:	0011      	movs	r1, r2
   109d0:	0018      	movs	r0, r3
   109d2:	4b0b      	ldr	r3, [pc, #44]	; (10a00 <isPrimaryNumber+0x68>)
   109d4:	4798      	blx	r3
   109d6:	1e03      	subs	r3, r0, #0
   109d8:	d001      	beq.n	109de <isPrimaryNumber+0x46>
		{
			return true;
   109da:	2301      	movs	r3, #1
   109dc:	e006      	b.n	109ec <isPrimaryNumber+0x54>
		}
		else
		{
			return isAlterNumber(number);
   109de:	687b      	ldr	r3, [r7, #4]
   109e0:	0018      	movs	r0, r3
   109e2:	4b08      	ldr	r3, [pc, #32]	; (10a04 <isPrimaryNumber+0x6c>)
   109e4:	4798      	blx	r3
   109e6:	0003      	movs	r3, r0
   109e8:	e000      	b.n	109ec <isPrimaryNumber+0x54>
		//else
		//{
		//return isAlterNumber(number);
		//}
	}
	return false;
   109ea:	2300      	movs	r3, #0
}
   109ec:	0018      	movs	r0, r3
   109ee:	46bd      	mov	sp, r7
   109f0:	b008      	add	sp, #32
   109f2:	bd80      	pop	{r7, pc}
   109f4:	20000614 	.word	0x20000614
   109f8:	000298b7 	.word	0x000298b7
   109fc:	00010915 	.word	0x00010915
   10a00:	00029b77 	.word	0x00029b77
   10a04:	00010a09 	.word	0x00010a09

00010a08 <isAlterNumber>:

bool isAlterNumber(char *number)
{
   10a08:	b580      	push	{r7, lr}
   10a0a:	b082      	sub	sp, #8
   10a0c:	af00      	add	r7, sp, #0
   10a0e:	6078      	str	r0, [r7, #4]
	if(user_count_struct.current_user_no_count > 0)
   10a10:	4b0b      	ldr	r3, [pc, #44]	; (10a40 <isAlterNumber+0x38>)
   10a12:	789b      	ldrb	r3, [r3, #2]
   10a14:	2b00      	cmp	r3, #0
   10a16:	d00d      	beq.n	10a34 <isAlterNumber+0x2c>
	{
		if ((alternateNumber_struct.alterNumberPresent) && (strstr(number, alternateNumber_struct.alternateNumber_ee)))
   10a18:	4b0a      	ldr	r3, [pc, #40]	; (10a44 <isAlterNumber+0x3c>)
   10a1a:	789b      	ldrb	r3, [r3, #2]
   10a1c:	2b00      	cmp	r3, #0
   10a1e:	d009      	beq.n	10a34 <isAlterNumber+0x2c>
   10a20:	4a09      	ldr	r2, [pc, #36]	; (10a48 <isAlterNumber+0x40>)
   10a22:	687b      	ldr	r3, [r7, #4]
   10a24:	0011      	movs	r1, r2
   10a26:	0018      	movs	r0, r3
   10a28:	4b08      	ldr	r3, [pc, #32]	; (10a4c <isAlterNumber+0x44>)
   10a2a:	4798      	blx	r3
   10a2c:	1e03      	subs	r3, r0, #0
   10a2e:	d001      	beq.n	10a34 <isAlterNumber+0x2c>
		{
			return true;
   10a30:	2301      	movs	r3, #1
   10a32:	e000      	b.n	10a36 <isAlterNumber+0x2e>
		}
	}
	return false;
   10a34:	2300      	movs	r3, #0
}
   10a36:	0018      	movs	r0, r3
   10a38:	46bd      	mov	sp, r7
   10a3a:	b002      	add	sp, #8
   10a3c:	bd80      	pop	{r7, pc}
   10a3e:	46c0      	nop			; (mov r8, r8)
   10a40:	20000614 	.word	0x20000614
   10a44:	2000063c 	.word	0x2000063c
   10a48:	20000640 	.word	0x20000640
   10a4c:	00029b77 	.word	0x00029b77

00010a50 <isM2MNumber>:

bool isM2MNumber(char *number)
{
   10a50:	b580      	push	{r7, lr}
   10a52:	b082      	sub	sp, #8
   10a54:	af00      	add	r7, sp, #0
   10a56:	6078      	str	r0, [r7, #4]
	if ((m2m_Numbers_struct.m2mPresent) && strstr(number,m2m_Numbers_struct.m2mNumber_ee))
   10a58:	4b09      	ldr	r3, [pc, #36]	; (10a80 <isM2MNumber+0x30>)
   10a5a:	785b      	ldrb	r3, [r3, #1]
   10a5c:	2b00      	cmp	r3, #0
   10a5e:	d009      	beq.n	10a74 <isM2MNumber+0x24>
   10a60:	4a08      	ldr	r2, [pc, #32]	; (10a84 <isM2MNumber+0x34>)
   10a62:	687b      	ldr	r3, [r7, #4]
   10a64:	0011      	movs	r1, r2
   10a66:	0018      	movs	r0, r3
   10a68:	4b07      	ldr	r3, [pc, #28]	; (10a88 <isM2MNumber+0x38>)
   10a6a:	4798      	blx	r3
   10a6c:	1e03      	subs	r3, r0, #0
   10a6e:	d001      	beq.n	10a74 <isM2MNumber+0x24>
	{
		return true;
   10a70:	2301      	movs	r3, #1
   10a72:	e000      	b.n	10a76 <isM2MNumber+0x26>
	}
	return false;
   10a74:	2300      	movs	r3, #0
}
   10a76:	0018      	movs	r0, r3
   10a78:	46bd      	mov	sp, r7
   10a7a:	b002      	add	sp, #8
   10a7c:	bd80      	pop	{r7, pc}
   10a7e:	46c0      	nop			; (mov r8, r8)
   10a80:	20000554 	.word	0x20000554
   10a84:	2000055c 	.word	0x2000055c
   10a88:	00029b77 	.word	0x00029b77

00010a8c <isM2MRemoteNumber>:

bool isM2MRemoteNumber(char *number)
{
   10a8c:	b580      	push	{r7, lr}
   10a8e:	b082      	sub	sp, #8
   10a90:	af00      	add	r7, sp, #0
   10a92:	6078      	str	r0, [r7, #4]
	if ((m2m_Numbers_struct.m2mRemotePresent) && strstr(number,m2m_Numbers_struct.m2mremoteNumber_ee))
   10a94:	4b09      	ldr	r3, [pc, #36]	; (10abc <isM2MRemoteNumber+0x30>)
   10a96:	78db      	ldrb	r3, [r3, #3]
   10a98:	2b00      	cmp	r3, #0
   10a9a:	d009      	beq.n	10ab0 <isM2MRemoteNumber+0x24>
   10a9c:	4a08      	ldr	r2, [pc, #32]	; (10ac0 <isM2MRemoteNumber+0x34>)
   10a9e:	687b      	ldr	r3, [r7, #4]
   10aa0:	0011      	movs	r1, r2
   10aa2:	0018      	movs	r0, r3
   10aa4:	4b07      	ldr	r3, [pc, #28]	; (10ac4 <isM2MRemoteNumber+0x38>)
   10aa6:	4798      	blx	r3
   10aa8:	1e03      	subs	r3, r0, #0
   10aaa:	d001      	beq.n	10ab0 <isM2MRemoteNumber+0x24>
	{
		return true;
   10aac:	2301      	movs	r3, #1
   10aae:	e000      	b.n	10ab2 <isM2MRemoteNumber+0x26>
	}
	return false;
   10ab0:	2300      	movs	r3, #0
}
   10ab2:	0018      	movs	r0, r3
   10ab4:	46bd      	mov	sp, r7
   10ab6:	b002      	add	sp, #8
   10ab8:	bd80      	pop	{r7, pc}
   10aba:	46c0      	nop			; (mov r8, r8)
   10abc:	20000554 	.word	0x20000554
   10ac0:	20000570 	.word	0x20000570
   10ac4:	00029b77 	.word	0x00029b77

00010ac8 <getM2MNumber>:

char *getM2MNumber(char *m2mNo)
{
   10ac8:	b580      	push	{r7, lr}
   10aca:	b082      	sub	sp, #8
   10acc:	af00      	add	r7, sp, #0
   10ace:	6078      	str	r0, [r7, #4]
	if (m2m_Numbers_struct.m2mPresent)
   10ad0:	4b09      	ldr	r3, [pc, #36]	; (10af8 <getM2MNumber+0x30>)
   10ad2:	785b      	ldrb	r3, [r3, #1]
   10ad4:	2b00      	cmp	r3, #0
   10ad6:	d006      	beq.n	10ae6 <getM2MNumber+0x1e>
	{
		//strstr(m2mNo,m2m_Numbers_struct.m2mNumber_ee);
		strcpy(m2mNo,m2m_Numbers_struct.m2mNumber_ee);
   10ad8:	4a08      	ldr	r2, [pc, #32]	; (10afc <getM2MNumber+0x34>)
   10ada:	687b      	ldr	r3, [r7, #4]
   10adc:	0011      	movs	r1, r2
   10ade:	0018      	movs	r0, r3
   10ae0:	4b07      	ldr	r3, [pc, #28]	; (10b00 <getM2MNumber+0x38>)
   10ae2:	4798      	blx	r3
   10ae4:	e002      	b.n	10aec <getM2MNumber+0x24>
	}
	else
	{
		strcpy(m2mNo,"");
   10ae6:	687b      	ldr	r3, [r7, #4]
   10ae8:	2200      	movs	r2, #0
   10aea:	701a      	strb	r2, [r3, #0]
	}
	return m2mNo;
   10aec:	687b      	ldr	r3, [r7, #4]
}
   10aee:	0018      	movs	r0, r3
   10af0:	46bd      	mov	sp, r7
   10af2:	b002      	add	sp, #8
   10af4:	bd80      	pop	{r7, pc}
   10af6:	46c0      	nop			; (mov r8, r8)
   10af8:	20000554 	.word	0x20000554
   10afc:	2000055c 	.word	0x2000055c
   10b00:	00029b37 	.word	0x00029b37

00010b04 <getM2MRemoteNumber>:

char *getM2MRemoteNumber(char *m2mNoRemotNo)
{
   10b04:	b580      	push	{r7, lr}
   10b06:	b082      	sub	sp, #8
   10b08:	af00      	add	r7, sp, #0
   10b0a:	6078      	str	r0, [r7, #4]
	if (m2m_Numbers_struct.m2mRemotePresent)
   10b0c:	4b09      	ldr	r3, [pc, #36]	; (10b34 <getM2MRemoteNumber+0x30>)
   10b0e:	78db      	ldrb	r3, [r3, #3]
   10b10:	2b00      	cmp	r3, #0
   10b12:	d006      	beq.n	10b22 <getM2MRemoteNumber+0x1e>
	{
		strcpy(m2mNoRemotNo,m2m_Numbers_struct.m2mremoteNumber_ee);
   10b14:	4a08      	ldr	r2, [pc, #32]	; (10b38 <getM2MRemoteNumber+0x34>)
   10b16:	687b      	ldr	r3, [r7, #4]
   10b18:	0011      	movs	r1, r2
   10b1a:	0018      	movs	r0, r3
   10b1c:	4b07      	ldr	r3, [pc, #28]	; (10b3c <getM2MRemoteNumber+0x38>)
   10b1e:	4798      	blx	r3
   10b20:	e002      	b.n	10b28 <getM2MRemoteNumber+0x24>
	}
	else
	{
		strcpy(m2mNoRemotNo,"");
   10b22:	687b      	ldr	r3, [r7, #4]
   10b24:	2200      	movs	r2, #0
   10b26:	701a      	strb	r2, [r3, #0]
	}
	return m2mNoRemotNo;
   10b28:	687b      	ldr	r3, [r7, #4]
}
   10b2a:	0018      	movs	r0, r3
   10b2c:	46bd      	mov	sp, r7
   10b2e:	b002      	add	sp, #8
   10b30:	bd80      	pop	{r7, pc}
   10b32:	46c0      	nop			; (mov r8, r8)
   10b34:	20000554 	.word	0x20000554
   10b38:	20000570 	.word	0x20000570
   10b3c:	00029b37 	.word	0x00029b37

00010b40 <setM2MVerify>:

void setM2MVerify(bool flag)
{
   10b40:	b580      	push	{r7, lr}
   10b42:	b082      	sub	sp, #8
   10b44:	af00      	add	r7, sp, #0
   10b46:	0002      	movs	r2, r0
   10b48:	1dfb      	adds	r3, r7, #7
   10b4a:	701a      	strb	r2, [r3, #0]
	m2m_Numbers_struct.m2mVerified = (uint8_t)flag;
   10b4c:	1dfb      	adds	r3, r7, #7
   10b4e:	781a      	ldrb	r2, [r3, #0]
   10b50:	4b0a      	ldr	r3, [pc, #40]	; (10b7c <setM2MVerify+0x3c>)
   10b52:	709a      	strb	r2, [r3, #2]
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10b54:	4a0a      	ldr	r2, [pc, #40]	; (10b80 <setM2MVerify+0x40>)
   10b56:	4b09      	ldr	r3, [pc, #36]	; (10b7c <setM2MVerify+0x3c>)
   10b58:	0010      	movs	r0, r2
   10b5a:	0019      	movs	r1, r3
   10b5c:	2330      	movs	r3, #48	; 0x30
   10b5e:	001a      	movs	r2, r3
   10b60:	4b08      	ldr	r3, [pc, #32]	; (10b84 <setM2MVerify+0x44>)
   10b62:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10b64:	4b06      	ldr	r3, [pc, #24]	; (10b80 <setM2MVerify+0x40>)
   10b66:	0019      	movs	r1, r3
   10b68:	2019      	movs	r0, #25
   10b6a:	4b07      	ldr	r3, [pc, #28]	; (10b88 <setM2MVerify+0x48>)
   10b6c:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10b6e:	4b07      	ldr	r3, [pc, #28]	; (10b8c <setM2MVerify+0x4c>)
   10b70:	4798      	blx	r3
}
   10b72:	46c0      	nop			; (mov r8, r8)
   10b74:	46bd      	mov	sp, r7
   10b76:	b002      	add	sp, #8
   10b78:	bd80      	pop	{r7, pc}
   10b7a:	46c0      	nop			; (mov r8, r8)
   10b7c:	20000554 	.word	0x20000554
   10b80:	20000584 	.word	0x20000584
   10b84:	00029881 	.word	0x00029881
   10b88:	00024171 	.word	0x00024171
   10b8c:	00024319 	.word	0x00024319

00010b90 <setM2MRemoteVerified>:

void setM2MRemoteVerified(bool flag)
{
   10b90:	b580      	push	{r7, lr}
   10b92:	b082      	sub	sp, #8
   10b94:	af00      	add	r7, sp, #0
   10b96:	0002      	movs	r2, r0
   10b98:	1dfb      	adds	r3, r7, #7
   10b9a:	701a      	strb	r2, [r3, #0]
	m2m_Numbers_struct.m2mRemoteVerified = (uint8_t)flag;
   10b9c:	1dfb      	adds	r3, r7, #7
   10b9e:	781a      	ldrb	r2, [r3, #0]
   10ba0:	4b0a      	ldr	r3, [pc, #40]	; (10bcc <setM2MRemoteVerified+0x3c>)
   10ba2:	711a      	strb	r2, [r3, #4]
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10ba4:	4a0a      	ldr	r2, [pc, #40]	; (10bd0 <setM2MRemoteVerified+0x40>)
   10ba6:	4b09      	ldr	r3, [pc, #36]	; (10bcc <setM2MRemoteVerified+0x3c>)
   10ba8:	0010      	movs	r0, r2
   10baa:	0019      	movs	r1, r3
   10bac:	2330      	movs	r3, #48	; 0x30
   10bae:	001a      	movs	r2, r3
   10bb0:	4b08      	ldr	r3, [pc, #32]	; (10bd4 <setM2MRemoteVerified+0x44>)
   10bb2:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10bb4:	4b06      	ldr	r3, [pc, #24]	; (10bd0 <setM2MRemoteVerified+0x40>)
   10bb6:	0019      	movs	r1, r3
   10bb8:	2019      	movs	r0, #25
   10bba:	4b07      	ldr	r3, [pc, #28]	; (10bd8 <setM2MRemoteVerified+0x48>)
   10bbc:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10bbe:	4b07      	ldr	r3, [pc, #28]	; (10bdc <setM2MRemoteVerified+0x4c>)
   10bc0:	4798      	blx	r3
}
   10bc2:	46c0      	nop			; (mov r8, r8)
   10bc4:	46bd      	mov	sp, r7
   10bc6:	b002      	add	sp, #8
   10bc8:	bd80      	pop	{r7, pc}
   10bca:	46c0      	nop			; (mov r8, r8)
   10bcc:	20000554 	.word	0x20000554
   10bd0:	20000584 	.word	0x20000584
   10bd4:	00029881 	.word	0x00029881
   10bd8:	00024171 	.word	0x00024171
   10bdc:	00024319 	.word	0x00024319

00010be0 <saveM2MSettings>:

void saveM2MSettings(bool flag)
{
   10be0:	b580      	push	{r7, lr}
   10be2:	b082      	sub	sp, #8
   10be4:	af00      	add	r7, sp, #0
   10be6:	0002      	movs	r2, r0
   10be8:	1dfb      	adds	r3, r7, #7
   10bea:	701a      	strb	r2, [r3, #0]
	m2m_Numbers_struct.m2mSetting = (uint8_t)flag;
   10bec:	1dfb      	adds	r3, r7, #7
   10bee:	781a      	ldrb	r2, [r3, #0]
   10bf0:	4b0f      	ldr	r3, [pc, #60]	; (10c30 <saveM2MSettings+0x50>)
   10bf2:	715a      	strb	r2, [r3, #5]
	if(!flag)					// m2m turned off
   10bf4:	1dfb      	adds	r3, r7, #7
   10bf6:	781b      	ldrb	r3, [r3, #0]
   10bf8:	2201      	movs	r2, #1
   10bfa:	4053      	eors	r3, r2
   10bfc:	b2db      	uxtb	r3, r3
   10bfe:	2b00      	cmp	r3, #0
   10c00:	d002      	beq.n	10c08 <saveM2MSettings+0x28>
	{
		m2m_Numbers_struct.m2mRemoteVerified=false;
   10c02:	4b0b      	ldr	r3, [pc, #44]	; (10c30 <saveM2MSettings+0x50>)
   10c04:	2200      	movs	r2, #0
   10c06:	711a      	strb	r2, [r3, #4]
	}
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10c08:	4a0a      	ldr	r2, [pc, #40]	; (10c34 <saveM2MSettings+0x54>)
   10c0a:	4b09      	ldr	r3, [pc, #36]	; (10c30 <saveM2MSettings+0x50>)
   10c0c:	0010      	movs	r0, r2
   10c0e:	0019      	movs	r1, r3
   10c10:	2330      	movs	r3, #48	; 0x30
   10c12:	001a      	movs	r2, r3
   10c14:	4b08      	ldr	r3, [pc, #32]	; (10c38 <saveM2MSettings+0x58>)
   10c16:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10c18:	4b06      	ldr	r3, [pc, #24]	; (10c34 <saveM2MSettings+0x54>)
   10c1a:	0019      	movs	r1, r3
   10c1c:	2019      	movs	r0, #25
   10c1e:	4b07      	ldr	r3, [pc, #28]	; (10c3c <saveM2MSettings+0x5c>)
   10c20:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10c22:	4b07      	ldr	r3, [pc, #28]	; (10c40 <saveM2MSettings+0x60>)
   10c24:	4798      	blx	r3
}
   10c26:	46c0      	nop			; (mov r8, r8)
   10c28:	46bd      	mov	sp, r7
   10c2a:	b002      	add	sp, #8
   10c2c:	bd80      	pop	{r7, pc}
   10c2e:	46c0      	nop			; (mov r8, r8)
   10c30:	20000554 	.word	0x20000554
   10c34:	20000584 	.word	0x20000584
   10c38:	00029881 	.word	0x00029881
   10c3c:	00024171 	.word	0x00024171
   10c40:	00024319 	.word	0x00024319

00010c44 <addM2MNumber>:

void addM2MNumber(char *no)
{
   10c44:	b580      	push	{r7, lr}
   10c46:	b082      	sub	sp, #8
   10c48:	af00      	add	r7, sp, #0
   10c4a:	6078      	str	r0, [r7, #4]
	m2m_Numbers_struct.m2mPresent = true;
   10c4c:	4b0f      	ldr	r3, [pc, #60]	; (10c8c <addM2MNumber+0x48>)
   10c4e:	2201      	movs	r2, #1
   10c50:	705a      	strb	r2, [r3, #1]
	strcpy(m2m_Numbers_struct.m2mNumber_ee,no);
   10c52:	687a      	ldr	r2, [r7, #4]
   10c54:	4b0e      	ldr	r3, [pc, #56]	; (10c90 <addM2MNumber+0x4c>)
   10c56:	0011      	movs	r1, r2
   10c58:	0018      	movs	r0, r3
   10c5a:	4b0e      	ldr	r3, [pc, #56]	; (10c94 <addM2MNumber+0x50>)
   10c5c:	4798      	blx	r3
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10c5e:	4a0e      	ldr	r2, [pc, #56]	; (10c98 <addM2MNumber+0x54>)
   10c60:	4b0a      	ldr	r3, [pc, #40]	; (10c8c <addM2MNumber+0x48>)
   10c62:	0010      	movs	r0, r2
   10c64:	0019      	movs	r1, r3
   10c66:	2330      	movs	r3, #48	; 0x30
   10c68:	001a      	movs	r2, r3
   10c6a:	4b0c      	ldr	r3, [pc, #48]	; (10c9c <addM2MNumber+0x58>)
   10c6c:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10c6e:	4b0a      	ldr	r3, [pc, #40]	; (10c98 <addM2MNumber+0x54>)
   10c70:	0019      	movs	r1, r3
   10c72:	2019      	movs	r0, #25
   10c74:	4b0a      	ldr	r3, [pc, #40]	; (10ca0 <addM2MNumber+0x5c>)
   10c76:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10c78:	4b0a      	ldr	r3, [pc, #40]	; (10ca4 <addM2MNumber+0x60>)
   10c7a:	4798      	blx	r3
	setM2MVerify(false);
   10c7c:	2000      	movs	r0, #0
   10c7e:	4b0a      	ldr	r3, [pc, #40]	; (10ca8 <addM2MNumber+0x64>)
   10c80:	4798      	blx	r3
}
   10c82:	46c0      	nop			; (mov r8, r8)
   10c84:	46bd      	mov	sp, r7
   10c86:	b002      	add	sp, #8
   10c88:	bd80      	pop	{r7, pc}
   10c8a:	46c0      	nop			; (mov r8, r8)
   10c8c:	20000554 	.word	0x20000554
   10c90:	2000055c 	.word	0x2000055c
   10c94:	00029b37 	.word	0x00029b37
   10c98:	20000584 	.word	0x20000584
   10c9c:	00029881 	.word	0x00029881
   10ca0:	00024171 	.word	0x00024171
   10ca4:	00024319 	.word	0x00024319
   10ca8:	00010b41 	.word	0x00010b41

00010cac <addM2MRemoteNumber>:

void addM2MRemoteNumber(char *no)
{
   10cac:	b580      	push	{r7, lr}
   10cae:	b082      	sub	sp, #8
   10cb0:	af00      	add	r7, sp, #0
   10cb2:	6078      	str	r0, [r7, #4]
	m2m_Numbers_struct.m2mRemotePresent = true;
   10cb4:	4b10      	ldr	r3, [pc, #64]	; (10cf8 <addM2MRemoteNumber+0x4c>)
   10cb6:	2201      	movs	r2, #1
   10cb8:	70da      	strb	r2, [r3, #3]
	strcpy(m2m_Numbers_struct.m2mremoteNumber_ee,no);
   10cba:	687a      	ldr	r2, [r7, #4]
   10cbc:	4b0f      	ldr	r3, [pc, #60]	; (10cfc <addM2MRemoteNumber+0x50>)
   10cbe:	0011      	movs	r1, r2
   10cc0:	0018      	movs	r0, r3
   10cc2:	4b0f      	ldr	r3, [pc, #60]	; (10d00 <addM2MRemoteNumber+0x54>)
   10cc4:	4798      	blx	r3
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10cc6:	4a0f      	ldr	r2, [pc, #60]	; (10d04 <addM2MRemoteNumber+0x58>)
   10cc8:	4b0b      	ldr	r3, [pc, #44]	; (10cf8 <addM2MRemoteNumber+0x4c>)
   10cca:	0010      	movs	r0, r2
   10ccc:	0019      	movs	r1, r3
   10cce:	2330      	movs	r3, #48	; 0x30
   10cd0:	001a      	movs	r2, r3
   10cd2:	4b0d      	ldr	r3, [pc, #52]	; (10d08 <addM2MRemoteNumber+0x5c>)
   10cd4:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10cd6:	4b0b      	ldr	r3, [pc, #44]	; (10d04 <addM2MRemoteNumber+0x58>)
   10cd8:	0019      	movs	r1, r3
   10cda:	2019      	movs	r0, #25
   10cdc:	4b0b      	ldr	r3, [pc, #44]	; (10d0c <addM2MRemoteNumber+0x60>)
   10cde:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10ce0:	4b0b      	ldr	r3, [pc, #44]	; (10d10 <addM2MRemoteNumber+0x64>)
   10ce2:	4798      	blx	r3
	setM2MRemoteVerified(false);
   10ce4:	2000      	movs	r0, #0
   10ce6:	4b0b      	ldr	r3, [pc, #44]	; (10d14 <addM2MRemoteNumber+0x68>)
   10ce8:	4798      	blx	r3
	saveM2MSettings(false);
   10cea:	2000      	movs	r0, #0
   10cec:	4b0a      	ldr	r3, [pc, #40]	; (10d18 <addM2MRemoteNumber+0x6c>)
   10cee:	4798      	blx	r3
}
   10cf0:	46c0      	nop			; (mov r8, r8)
   10cf2:	46bd      	mov	sp, r7
   10cf4:	b002      	add	sp, #8
   10cf6:	bd80      	pop	{r7, pc}
   10cf8:	20000554 	.word	0x20000554
   10cfc:	20000570 	.word	0x20000570
   10d00:	00029b37 	.word	0x00029b37
   10d04:	20000584 	.word	0x20000584
   10d08:	00029881 	.word	0x00029881
   10d0c:	00024171 	.word	0x00024171
   10d10:	00024319 	.word	0x00024319
   10d14:	00010b91 	.word	0x00010b91
   10d18:	00010be1 	.word	0x00010be1

00010d1c <getActiveNumber>:

char *getActiveNumber(char *ActiveNo)
{
   10d1c:	b580      	push	{r7, lr}
   10d1e:	b08e      	sub	sp, #56	; 0x38
   10d20:	af00      	add	r7, sp, #0
   10d22:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count > 0)
   10d24:	4b28      	ldr	r3, [pc, #160]	; (10dc8 <getActiveNumber+0xac>)
   10d26:	789b      	ldrb	r3, [r3, #2]
   10d28:	2b00      	cmp	r3, #0
   10d2a:	d02b      	beq.n	10d84 <getActiveNumber+0x68>
	{
		if ((alternateNumber_struct.alterNumberSetting))
   10d2c:	4b27      	ldr	r3, [pc, #156]	; (10dcc <getActiveNumber+0xb0>)
   10d2e:	785b      	ldrb	r3, [r3, #1]
   10d30:	2b00      	cmp	r3, #0
   10d32:	d006      	beq.n	10d42 <getActiveNumber+0x26>
		{
			strcpy(ActiveNo,alternateNumber_struct.alternateNumber_ee);
   10d34:	4a26      	ldr	r2, [pc, #152]	; (10dd0 <getActiveNumber+0xb4>)
   10d36:	687b      	ldr	r3, [r7, #4]
   10d38:	0011      	movs	r1, r2
   10d3a:	0018      	movs	r0, r3
   10d3c:	4b25      	ldr	r3, [pc, #148]	; (10dd4 <getActiveNumber+0xb8>)
   10d3e:	4798      	blx	r3
   10d40:	e03c      	b.n	10dbc <getActiveNumber+0xa0>
		}
		else
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
   10d42:	4b25      	ldr	r3, [pc, #148]	; (10dd8 <getActiveNumber+0xbc>)
   10d44:	223c      	movs	r2, #60	; 0x3c
   10d46:	2100      	movs	r1, #0
   10d48:	0018      	movs	r0, r3
   10d4a:	4b24      	ldr	r3, [pc, #144]	; (10ddc <getActiveNumber+0xc0>)
   10d4c:	4798      	blx	r3
			eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+user_count_struct.primaryNumberIndex, page_data);
   10d4e:	4b1e      	ldr	r3, [pc, #120]	; (10dc8 <getActiveNumber+0xac>)
   10d50:	78db      	ldrb	r3, [r3, #3]
   10d52:	3309      	adds	r3, #9
   10d54:	b2db      	uxtb	r3, r3
   10d56:	4a20      	ldr	r2, [pc, #128]	; (10dd8 <getActiveNumber+0xbc>)
   10d58:	0011      	movs	r1, r2
   10d5a:	0018      	movs	r0, r3
   10d5c:	4b20      	ldr	r3, [pc, #128]	; (10de0 <getActiveNumber+0xc4>)
   10d5e:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10d60:	2320      	movs	r3, #32
   10d62:	18fa      	adds	r2, r7, r3
   10d64:	4b1c      	ldr	r3, [pc, #112]	; (10dd8 <getActiveNumber+0xbc>)
   10d66:	0010      	movs	r0, r2
   10d68:	0019      	movs	r1, r3
   10d6a:	2318      	movs	r3, #24
   10d6c:	001a      	movs	r2, r3
   10d6e:	4b1d      	ldr	r3, [pc, #116]	; (10de4 <getActiveNumber+0xc8>)
   10d70:	4798      	blx	r3
			strcpy(ActiveNo,mobile_no.mobile_no_ee);
   10d72:	2320      	movs	r3, #32
   10d74:	18fb      	adds	r3, r7, r3
   10d76:	1d1a      	adds	r2, r3, #4
   10d78:	687b      	ldr	r3, [r7, #4]
   10d7a:	0011      	movs	r1, r2
   10d7c:	0018      	movs	r0, r3
   10d7e:	4b15      	ldr	r3, [pc, #84]	; (10dd4 <getActiveNumber+0xb8>)
   10d80:	4798      	blx	r3
   10d82:	e01b      	b.n	10dbc <getActiveNumber+0xa0>
		}
	}
	else																					// no effect of this portion as registerEvent checks for numbercount is > 0
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
   10d84:	4b14      	ldr	r3, [pc, #80]	; (10dd8 <getActiveNumber+0xbc>)
   10d86:	223c      	movs	r2, #60	; 0x3c
   10d88:	2100      	movs	r1, #0
   10d8a:	0018      	movs	r0, r3
   10d8c:	4b13      	ldr	r3, [pc, #76]	; (10ddc <getActiveNumber+0xc0>)
   10d8e:	4798      	blx	r3
		eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE, page_data);
   10d90:	4b11      	ldr	r3, [pc, #68]	; (10dd8 <getActiveNumber+0xbc>)
   10d92:	0019      	movs	r1, r3
   10d94:	2003      	movs	r0, #3
   10d96:	4b12      	ldr	r3, [pc, #72]	; (10de0 <getActiveNumber+0xc4>)
   10d98:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10d9a:	2308      	movs	r3, #8
   10d9c:	18fa      	adds	r2, r7, r3
   10d9e:	4b0e      	ldr	r3, [pc, #56]	; (10dd8 <getActiveNumber+0xbc>)
   10da0:	0010      	movs	r0, r2
   10da2:	0019      	movs	r1, r3
   10da4:	2318      	movs	r3, #24
   10da6:	001a      	movs	r2, r3
   10da8:	4b0e      	ldr	r3, [pc, #56]	; (10de4 <getActiveNumber+0xc8>)
   10daa:	4798      	blx	r3
		strcpy(ActiveNo,mobile_no.mobile_no_ee);
   10dac:	2308      	movs	r3, #8
   10dae:	18fb      	adds	r3, r7, r3
   10db0:	1d1a      	adds	r2, r3, #4
   10db2:	687b      	ldr	r3, [r7, #4]
   10db4:	0011      	movs	r1, r2
   10db6:	0018      	movs	r0, r3
   10db8:	4b06      	ldr	r3, [pc, #24]	; (10dd4 <getActiveNumber+0xb8>)
   10dba:	4798      	blx	r3
	}
	
	return ActiveNo;
   10dbc:	687b      	ldr	r3, [r7, #4]
}
   10dbe:	0018      	movs	r0, r3
   10dc0:	46bd      	mov	sp, r7
   10dc2:	b00e      	add	sp, #56	; 0x38
   10dc4:	bd80      	pop	{r7, pc}
   10dc6:	46c0      	nop			; (mov r8, r8)
   10dc8:	20000614 	.word	0x20000614
   10dcc:	2000063c 	.word	0x2000063c
   10dd0:	20000640 	.word	0x20000640
   10dd4:	00029b37 	.word	0x00029b37
   10dd8:	20000584 	.word	0x20000584
   10ddc:	000298b7 	.word	0x000298b7
   10de0:	0002427d 	.word	0x0002427d
   10de4:	00029881 	.word	0x00029881

00010de8 <checkExists>:
uint8_t checkExists(char *number)
{
   10de8:	b580      	push	{r7, lr}
   10dea:	b08a      	sub	sp, #40	; 0x28
   10dec:	af00      	add	r7, sp, #0
   10dee:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count > 0)
   10df0:	4b33      	ldr	r3, [pc, #204]	; (10ec0 <checkExists+0xd8>)
   10df2:	789b      	ldrb	r3, [r3, #2]
   10df4:	2b00      	cmp	r3, #0
   10df6:	d039      	beq.n	10e6c <checkExists+0x84>
		//if(isPrimaryNumber(number))
		//{
		//return 0;
		//}
		
		for (uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
   10df8:	2327      	movs	r3, #39	; 0x27
   10dfa:	18fb      	adds	r3, r7, r3
   10dfc:	2200      	movs	r2, #0
   10dfe:	701a      	strb	r2, [r3, #0]
   10e00:	e02d      	b.n	10e5e <checkExists+0x76>
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
   10e02:	4b30      	ldr	r3, [pc, #192]	; (10ec4 <checkExists+0xdc>)
   10e04:	223c      	movs	r2, #60	; 0x3c
   10e06:	2100      	movs	r1, #0
   10e08:	0018      	movs	r0, r3
   10e0a:	4b2f      	ldr	r3, [pc, #188]	; (10ec8 <checkExists+0xe0>)
   10e0c:	4798      	blx	r3
			eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
   10e0e:	2327      	movs	r3, #39	; 0x27
   10e10:	18fb      	adds	r3, r7, r3
   10e12:	781b      	ldrb	r3, [r3, #0]
   10e14:	3309      	adds	r3, #9
   10e16:	b2db      	uxtb	r3, r3
   10e18:	4a2a      	ldr	r2, [pc, #168]	; (10ec4 <checkExists+0xdc>)
   10e1a:	0011      	movs	r1, r2
   10e1c:	0018      	movs	r0, r3
   10e1e:	4b2b      	ldr	r3, [pc, #172]	; (10ecc <checkExists+0xe4>)
   10e20:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10e22:	230c      	movs	r3, #12
   10e24:	18fa      	adds	r2, r7, r3
   10e26:	4b27      	ldr	r3, [pc, #156]	; (10ec4 <checkExists+0xdc>)
   10e28:	0010      	movs	r0, r2
   10e2a:	0019      	movs	r1, r3
   10e2c:	2318      	movs	r3, #24
   10e2e:	001a      	movs	r2, r3
   10e30:	4b27      	ldr	r3, [pc, #156]	; (10ed0 <checkExists+0xe8>)
   10e32:	4798      	blx	r3
			if (strstr(number,mobile_no.mobile_no_ee))
   10e34:	230c      	movs	r3, #12
   10e36:	18fb      	adds	r3, r7, r3
   10e38:	1d1a      	adds	r2, r3, #4
   10e3a:	687b      	ldr	r3, [r7, #4]
   10e3c:	0011      	movs	r1, r2
   10e3e:	0018      	movs	r0, r3
   10e40:	4b24      	ldr	r3, [pc, #144]	; (10ed4 <checkExists+0xec>)
   10e42:	4798      	blx	r3
   10e44:	1e03      	subs	r3, r0, #0
   10e46:	d003      	beq.n	10e50 <checkExists+0x68>
			{
				return i;
   10e48:	2327      	movs	r3, #39	; 0x27
   10e4a:	18fb      	adds	r3, r7, r3
   10e4c:	781b      	ldrb	r3, [r3, #0]
   10e4e:	e032      	b.n	10eb6 <checkExists+0xce>
		for (uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
   10e50:	2327      	movs	r3, #39	; 0x27
   10e52:	18fb      	adds	r3, r7, r3
   10e54:	781a      	ldrb	r2, [r3, #0]
   10e56:	2327      	movs	r3, #39	; 0x27
   10e58:	18fb      	adds	r3, r7, r3
   10e5a:	3201      	adds	r2, #1
   10e5c:	701a      	strb	r2, [r3, #0]
   10e5e:	4b18      	ldr	r3, [pc, #96]	; (10ec0 <checkExists+0xd8>)
   10e60:	789b      	ldrb	r3, [r3, #2]
   10e62:	2227      	movs	r2, #39	; 0x27
   10e64:	18ba      	adds	r2, r7, r2
   10e66:	7812      	ldrb	r2, [r2, #0]
   10e68:	429a      	cmp	r2, r3
   10e6a:	d3ca      	bcc.n	10e02 <checkExists+0x1a>
			}
		}
	}

	if(isAlterNumber(number))
   10e6c:	687b      	ldr	r3, [r7, #4]
   10e6e:	0018      	movs	r0, r3
   10e70:	4b19      	ldr	r3, [pc, #100]	; (10ed8 <checkExists+0xf0>)
   10e72:	4798      	blx	r3
   10e74:	1e03      	subs	r3, r0, #0
   10e76:	d001      	beq.n	10e7c <checkExists+0x94>
	{
		return 0xFD;
   10e78:	23fd      	movs	r3, #253	; 0xfd
   10e7a:	e01c      	b.n	10eb6 <checkExists+0xce>
	}

	if((m2m_Numbers_struct.m2mVerified) && isM2MNumber(number))
   10e7c:	4b17      	ldr	r3, [pc, #92]	; (10edc <checkExists+0xf4>)
   10e7e:	789b      	ldrb	r3, [r3, #2]
   10e80:	2b00      	cmp	r3, #0
   10e82:	d007      	beq.n	10e94 <checkExists+0xac>
   10e84:	687b      	ldr	r3, [r7, #4]
   10e86:	0018      	movs	r0, r3
   10e88:	4b15      	ldr	r3, [pc, #84]	; (10ee0 <checkExists+0xf8>)
   10e8a:	4798      	blx	r3
   10e8c:	1e03      	subs	r3, r0, #0
   10e8e:	d001      	beq.n	10e94 <checkExists+0xac>
	{
		return 0xFE;
   10e90:	23fe      	movs	r3, #254	; 0xfe
   10e92:	e010      	b.n	10eb6 <checkExists+0xce>
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
   10e94:	4b13      	ldr	r3, [pc, #76]	; (10ee4 <checkExists+0xfc>)
   10e96:	78db      	ldrb	r3, [r3, #3]
   10e98:	2b00      	cmp	r3, #0
   10e9a:	d00b      	beq.n	10eb4 <checkExists+0xcc>
	{
		if ((m2m_Numbers_struct.m2mRemoteVerified) && isM2MRemoteNumber(number))
   10e9c:	4b0f      	ldr	r3, [pc, #60]	; (10edc <checkExists+0xf4>)
   10e9e:	791b      	ldrb	r3, [r3, #4]
   10ea0:	2b00      	cmp	r3, #0
   10ea2:	d007      	beq.n	10eb4 <checkExists+0xcc>
   10ea4:	687b      	ldr	r3, [r7, #4]
   10ea6:	0018      	movs	r0, r3
   10ea8:	4b0f      	ldr	r3, [pc, #60]	; (10ee8 <checkExists+0x100>)
   10eaa:	4798      	blx	r3
   10eac:	1e03      	subs	r3, r0, #0
   10eae:	d001      	beq.n	10eb4 <checkExists+0xcc>
		{
			return 0xFE;
   10eb0:	23fe      	movs	r3, #254	; 0xfe
   10eb2:	e000      	b.n	10eb6 <checkExists+0xce>
		}
	}
	return 0xFF;
   10eb4:	23ff      	movs	r3, #255	; 0xff
}
   10eb6:	0018      	movs	r0, r3
   10eb8:	46bd      	mov	sp, r7
   10eba:	b00a      	add	sp, #40	; 0x28
   10ebc:	bd80      	pop	{r7, pc}
   10ebe:	46c0      	nop			; (mov r8, r8)
   10ec0:	20000614 	.word	0x20000614
   10ec4:	20000584 	.word	0x20000584
   10ec8:	000298b7 	.word	0x000298b7
   10ecc:	0002427d 	.word	0x0002427d
   10ed0:	00029881 	.word	0x00029881
   10ed4:	00029b77 	.word	0x00029b77
   10ed8:	00010a09 	.word	0x00010a09
   10edc:	20000554 	.word	0x20000554
   10ee0:	00010a51 	.word	0x00010a51
   10ee4:	2000062c 	.word	0x2000062c
   10ee8:	00010a8d 	.word	0x00010a8d

00010eec <addNumber>:

bool addNumber(char *number)
{
   10eec:	b580      	push	{r7, lr}
   10eee:	b088      	sub	sp, #32
   10ef0:	af00      	add	r7, sp, #0
   10ef2:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count == user_count_struct.total_user_no_count)
   10ef4:	4b33      	ldr	r3, [pc, #204]	; (10fc4 <addNumber+0xd8>)
   10ef6:	789a      	ldrb	r2, [r3, #2]
   10ef8:	4b32      	ldr	r3, [pc, #200]	; (10fc4 <addNumber+0xd8>)
   10efa:	785b      	ldrb	r3, [r3, #1]
   10efc:	429a      	cmp	r2, r3
   10efe:	d101      	bne.n	10f04 <addNumber+0x18>
	{
		return false;
   10f00:	2300      	movs	r3, #0
   10f02:	e05a      	b.n	10fba <addNumber+0xce>
	}
	else
	{
		if (checkExists(number) > 0xF0)
   10f04:	687b      	ldr	r3, [r7, #4]
   10f06:	0018      	movs	r0, r3
   10f08:	4b2f      	ldr	r3, [pc, #188]	; (10fc8 <addNumber+0xdc>)
   10f0a:	4798      	blx	r3
   10f0c:	0003      	movs	r3, r0
   10f0e:	2bf0      	cmp	r3, #240	; 0xf0
   10f10:	d952      	bls.n	10fb8 <addNumber+0xcc>
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
   10f12:	4b2e      	ldr	r3, [pc, #184]	; (10fcc <addNumber+0xe0>)
   10f14:	223c      	movs	r2, #60	; 0x3c
   10f16:	2100      	movs	r1, #0
   10f18:	0018      	movs	r0, r3
   10f1a:	4b2d      	ldr	r3, [pc, #180]	; (10fd0 <addNumber+0xe4>)
   10f1c:	4798      	blx	r3
			eeprom_emulator_read_page((USER_1_MOBILE_NUMBER_PAGE+user_count_struct.current_user_no_count), page_data);
   10f1e:	4b29      	ldr	r3, [pc, #164]	; (10fc4 <addNumber+0xd8>)
   10f20:	789b      	ldrb	r3, [r3, #2]
   10f22:	3309      	adds	r3, #9
   10f24:	b2db      	uxtb	r3, r3
   10f26:	4a29      	ldr	r2, [pc, #164]	; (10fcc <addNumber+0xe0>)
   10f28:	0011      	movs	r1, r2
   10f2a:	0018      	movs	r0, r3
   10f2c:	4b29      	ldr	r3, [pc, #164]	; (10fd4 <addNumber+0xe8>)
   10f2e:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10f30:	2308      	movs	r3, #8
   10f32:	18fa      	adds	r2, r7, r3
   10f34:	4b25      	ldr	r3, [pc, #148]	; (10fcc <addNumber+0xe0>)
   10f36:	0010      	movs	r0, r2
   10f38:	0019      	movs	r1, r3
   10f3a:	2318      	movs	r3, #24
   10f3c:	001a      	movs	r2, r3
   10f3e:	4b26      	ldr	r3, [pc, #152]	; (10fd8 <addNumber+0xec>)
   10f40:	4798      	blx	r3
			
			memset(mobile_no.mobile_no_ee, '\0', sizeof(mobile_no.mobile_no_ee));
   10f42:	2308      	movs	r3, #8
   10f44:	18fb      	adds	r3, r7, r3
   10f46:	3304      	adds	r3, #4
   10f48:	2214      	movs	r2, #20
   10f4a:	2100      	movs	r1, #0
   10f4c:	0018      	movs	r0, r3
   10f4e:	4b20      	ldr	r3, [pc, #128]	; (10fd0 <addNumber+0xe4>)
   10f50:	4798      	blx	r3
			strcpy(mobile_no.mobile_no_ee,number);
   10f52:	687a      	ldr	r2, [r7, #4]
   10f54:	2308      	movs	r3, #8
   10f56:	18fb      	adds	r3, r7, r3
   10f58:	3304      	adds	r3, #4
   10f5a:	0011      	movs	r1, r2
   10f5c:	0018      	movs	r0, r3
   10f5e:	4b1f      	ldr	r3, [pc, #124]	; (10fdc <addNumber+0xf0>)
   10f60:	4798      	blx	r3
			
			memcpy(page_data,&mobile_no,sizeof(mobile_no));
   10f62:	4a1a      	ldr	r2, [pc, #104]	; (10fcc <addNumber+0xe0>)
   10f64:	2308      	movs	r3, #8
   10f66:	18fb      	adds	r3, r7, r3
   10f68:	0010      	movs	r0, r2
   10f6a:	0019      	movs	r1, r3
   10f6c:	2318      	movs	r3, #24
   10f6e:	001a      	movs	r2, r3
   10f70:	4b19      	ldr	r3, [pc, #100]	; (10fd8 <addNumber+0xec>)
   10f72:	4798      	blx	r3
			eeprom_emulator_write_page((USER_1_MOBILE_NUMBER_PAGE+user_count_struct.current_user_no_count), page_data);
   10f74:	4b13      	ldr	r3, [pc, #76]	; (10fc4 <addNumber+0xd8>)
   10f76:	789b      	ldrb	r3, [r3, #2]
   10f78:	3309      	adds	r3, #9
   10f7a:	b2db      	uxtb	r3, r3
   10f7c:	4a13      	ldr	r2, [pc, #76]	; (10fcc <addNumber+0xe0>)
   10f7e:	0011      	movs	r1, r2
   10f80:	0018      	movs	r0, r3
   10f82:	4b17      	ldr	r3, [pc, #92]	; (10fe0 <addNumber+0xf4>)
   10f84:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
   10f86:	4b17      	ldr	r3, [pc, #92]	; (10fe4 <addNumber+0xf8>)
   10f88:	4798      	blx	r3
			
			user_count_struct.current_user_no_count++;
   10f8a:	4b0e      	ldr	r3, [pc, #56]	; (10fc4 <addNumber+0xd8>)
   10f8c:	789b      	ldrb	r3, [r3, #2]
   10f8e:	3301      	adds	r3, #1
   10f90:	b2da      	uxtb	r2, r3
   10f92:	4b0c      	ldr	r3, [pc, #48]	; (10fc4 <addNumber+0xd8>)
   10f94:	709a      	strb	r2, [r3, #2]
			
			memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   10f96:	4a0d      	ldr	r2, [pc, #52]	; (10fcc <addNumber+0xe0>)
   10f98:	4b0a      	ldr	r3, [pc, #40]	; (10fc4 <addNumber+0xd8>)
   10f9a:	0010      	movs	r0, r2
   10f9c:	0019      	movs	r1, r3
   10f9e:	2308      	movs	r3, #8
   10fa0:	001a      	movs	r2, r3
   10fa2:	4b0d      	ldr	r3, [pc, #52]	; (10fd8 <addNumber+0xec>)
   10fa4:	4798      	blx	r3
			eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   10fa6:	4b09      	ldr	r3, [pc, #36]	; (10fcc <addNumber+0xe0>)
   10fa8:	0019      	movs	r1, r3
   10faa:	2008      	movs	r0, #8
   10fac:	4b0c      	ldr	r3, [pc, #48]	; (10fe0 <addNumber+0xf4>)
   10fae:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
   10fb0:	4b0c      	ldr	r3, [pc, #48]	; (10fe4 <addNumber+0xf8>)
   10fb2:	4798      	blx	r3
			
			return true;
   10fb4:	2301      	movs	r3, #1
   10fb6:	e000      	b.n	10fba <addNumber+0xce>
		}
	}
	return false;
   10fb8:	2300      	movs	r3, #0
}
   10fba:	0018      	movs	r0, r3
   10fbc:	46bd      	mov	sp, r7
   10fbe:	b008      	add	sp, #32
   10fc0:	bd80      	pop	{r7, pc}
   10fc2:	46c0      	nop			; (mov r8, r8)
   10fc4:	20000614 	.word	0x20000614
   10fc8:	00010de9 	.word	0x00010de9
   10fcc:	20000584 	.word	0x20000584
   10fd0:	000298b7 	.word	0x000298b7
   10fd4:	0002427d 	.word	0x0002427d
   10fd8:	00029881 	.word	0x00029881
   10fdc:	00029b37 	.word	0x00029b37
   10fe0:	00024171 	.word	0x00024171
   10fe4:	00024319 	.word	0x00024319

00010fe8 <removeNumber>:

bool removeNumber(char *numer)
{
   10fe8:	b590      	push	{r4, r7, lr}
   10fea:	b085      	sub	sp, #20
   10fec:	af00      	add	r7, sp, #0
   10fee:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count < 2)
   10ff0:	4b3d      	ldr	r3, [pc, #244]	; (110e8 <removeNumber+0x100>)
   10ff2:	789b      	ldrb	r3, [r3, #2]
   10ff4:	2b01      	cmp	r3, #1
   10ff6:	d801      	bhi.n	10ffc <removeNumber+0x14>
	{
		return false;
   10ff8:	2300      	movs	r3, #0
   10ffa:	e071      	b.n	110e0 <removeNumber+0xf8>
	}
	else
	{
		uint8_t loc =  checkExists(numer);
   10ffc:	230e      	movs	r3, #14
   10ffe:	18fc      	adds	r4, r7, r3
   11000:	687b      	ldr	r3, [r7, #4]
   11002:	0018      	movs	r0, r3
   11004:	4b39      	ldr	r3, [pc, #228]	; (110ec <removeNumber+0x104>)
   11006:	4798      	blx	r3
   11008:	0003      	movs	r3, r0
   1100a:	7023      	strb	r3, [r4, #0]
		if ((loc < user_count_struct.total_user_no_count) && (loc != user_count_struct.primaryNumberIndex))	//number is not special number(i.e. alter,m2m,m2mRemote) and not primary number
   1100c:	4b36      	ldr	r3, [pc, #216]	; (110e8 <removeNumber+0x100>)
   1100e:	785b      	ldrb	r3, [r3, #1]
   11010:	220e      	movs	r2, #14
   11012:	18ba      	adds	r2, r7, r2
   11014:	7812      	ldrb	r2, [r2, #0]
   11016:	429a      	cmp	r2, r3
   11018:	d261      	bcs.n	110de <removeNumber+0xf6>
   1101a:	4b33      	ldr	r3, [pc, #204]	; (110e8 <removeNumber+0x100>)
   1101c:	78db      	ldrb	r3, [r3, #3]
   1101e:	220e      	movs	r2, #14
   11020:	18ba      	adds	r2, r7, r2
   11022:	7812      	ldrb	r2, [r2, #0]
   11024:	429a      	cmp	r2, r3
   11026:	d05a      	beq.n	110de <removeNumber+0xf6>
		{
			for (uint8_t i=loc;i<(user_count_struct.current_user_no_count-1);i++)
   11028:	230f      	movs	r3, #15
   1102a:	18fb      	adds	r3, r7, r3
   1102c:	220e      	movs	r2, #14
   1102e:	18ba      	adds	r2, r7, r2
   11030:	7812      	ldrb	r2, [r2, #0]
   11032:	701a      	strb	r2, [r3, #0]
   11034:	e022      	b.n	1107c <removeNumber+0x94>
			{
				memset(page_data, '\0', sizeof(page_data));
   11036:	4b2e      	ldr	r3, [pc, #184]	; (110f0 <removeNumber+0x108>)
   11038:	223c      	movs	r2, #60	; 0x3c
   1103a:	2100      	movs	r1, #0
   1103c:	0018      	movs	r0, r3
   1103e:	4b2d      	ldr	r3, [pc, #180]	; (110f4 <removeNumber+0x10c>)
   11040:	4798      	blx	r3
				eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i+1, page_data);
   11042:	230f      	movs	r3, #15
   11044:	18fb      	adds	r3, r7, r3
   11046:	781b      	ldrb	r3, [r3, #0]
   11048:	330a      	adds	r3, #10
   1104a:	b2db      	uxtb	r3, r3
   1104c:	4a28      	ldr	r2, [pc, #160]	; (110f0 <removeNumber+0x108>)
   1104e:	0011      	movs	r1, r2
   11050:	0018      	movs	r0, r3
   11052:	4b29      	ldr	r3, [pc, #164]	; (110f8 <removeNumber+0x110>)
   11054:	4798      	blx	r3
				eeprom_emulator_write_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
   11056:	230f      	movs	r3, #15
   11058:	18fb      	adds	r3, r7, r3
   1105a:	781b      	ldrb	r3, [r3, #0]
   1105c:	3309      	adds	r3, #9
   1105e:	b2db      	uxtb	r3, r3
   11060:	4a23      	ldr	r2, [pc, #140]	; (110f0 <removeNumber+0x108>)
   11062:	0011      	movs	r1, r2
   11064:	0018      	movs	r0, r3
   11066:	4b25      	ldr	r3, [pc, #148]	; (110fc <removeNumber+0x114>)
   11068:	4798      	blx	r3
				eeprom_emulator_commit_page_buffer();
   1106a:	4b25      	ldr	r3, [pc, #148]	; (11100 <removeNumber+0x118>)
   1106c:	4798      	blx	r3
			for (uint8_t i=loc;i<(user_count_struct.current_user_no_count-1);i++)
   1106e:	230f      	movs	r3, #15
   11070:	18fb      	adds	r3, r7, r3
   11072:	781a      	ldrb	r2, [r3, #0]
   11074:	230f      	movs	r3, #15
   11076:	18fb      	adds	r3, r7, r3
   11078:	3201      	adds	r2, #1
   1107a:	701a      	strb	r2, [r3, #0]
   1107c:	230f      	movs	r3, #15
   1107e:	18fb      	adds	r3, r7, r3
   11080:	781a      	ldrb	r2, [r3, #0]
   11082:	4b19      	ldr	r3, [pc, #100]	; (110e8 <removeNumber+0x100>)
   11084:	789b      	ldrb	r3, [r3, #2]
   11086:	3b01      	subs	r3, #1
   11088:	429a      	cmp	r2, r3
   1108a:	dbd4      	blt.n	11036 <removeNumber+0x4e>
			}
			user_count_struct.current_user_no_count--;
   1108c:	4b16      	ldr	r3, [pc, #88]	; (110e8 <removeNumber+0x100>)
   1108e:	789b      	ldrb	r3, [r3, #2]
   11090:	3b01      	subs	r3, #1
   11092:	b2da      	uxtb	r2, r3
   11094:	4b14      	ldr	r3, [pc, #80]	; (110e8 <removeNumber+0x100>)
   11096:	709a      	strb	r2, [r3, #2]
			
			if(loc==user_count_struct.secondaryNumberIndex || loc>user_count_struct.current_user_no_count-1)
   11098:	4b13      	ldr	r3, [pc, #76]	; (110e8 <removeNumber+0x100>)
   1109a:	791b      	ldrb	r3, [r3, #4]
   1109c:	220e      	movs	r2, #14
   1109e:	18ba      	adds	r2, r7, r2
   110a0:	7812      	ldrb	r2, [r2, #0]
   110a2:	429a      	cmp	r2, r3
   110a4:	d007      	beq.n	110b6 <removeNumber+0xce>
   110a6:	230e      	movs	r3, #14
   110a8:	18fb      	adds	r3, r7, r3
   110aa:	781a      	ldrb	r2, [r3, #0]
   110ac:	4b0e      	ldr	r3, [pc, #56]	; (110e8 <removeNumber+0x100>)
   110ae:	789b      	ldrb	r3, [r3, #2]
   110b0:	3b01      	subs	r3, #1
   110b2:	429a      	cmp	r2, r3
   110b4:	dd02      	ble.n	110bc <removeNumber+0xd4>
			{
				user_count_struct.secondaryNumberIndex= 1;
   110b6:	4b0c      	ldr	r3, [pc, #48]	; (110e8 <removeNumber+0x100>)
   110b8:	2201      	movs	r2, #1
   110ba:	711a      	strb	r2, [r3, #4]
			}
			memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   110bc:	4a0c      	ldr	r2, [pc, #48]	; (110f0 <removeNumber+0x108>)
   110be:	4b0a      	ldr	r3, [pc, #40]	; (110e8 <removeNumber+0x100>)
   110c0:	0010      	movs	r0, r2
   110c2:	0019      	movs	r1, r3
   110c4:	2308      	movs	r3, #8
   110c6:	001a      	movs	r2, r3
   110c8:	4b0e      	ldr	r3, [pc, #56]	; (11104 <removeNumber+0x11c>)
   110ca:	4798      	blx	r3
			eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   110cc:	4b08      	ldr	r3, [pc, #32]	; (110f0 <removeNumber+0x108>)
   110ce:	0019      	movs	r1, r3
   110d0:	2008      	movs	r0, #8
   110d2:	4b0a      	ldr	r3, [pc, #40]	; (110fc <removeNumber+0x114>)
   110d4:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
   110d6:	4b0a      	ldr	r3, [pc, #40]	; (11100 <removeNumber+0x118>)
   110d8:	4798      	blx	r3
			return true;
   110da:	2301      	movs	r3, #1
   110dc:	e000      	b.n	110e0 <removeNumber+0xf8>
		}
	}
	return false;
   110de:	2300      	movs	r3, #0
}
   110e0:	0018      	movs	r0, r3
   110e2:	46bd      	mov	sp, r7
   110e4:	b005      	add	sp, #20
   110e6:	bd90      	pop	{r4, r7, pc}
   110e8:	20000614 	.word	0x20000614
   110ec:	00010de9 	.word	0x00010de9
   110f0:	20000584 	.word	0x20000584
   110f4:	000298b7 	.word	0x000298b7
   110f8:	0002427d 	.word	0x0002427d
   110fc:	00024171 	.word	0x00024171
   11100:	00024319 	.word	0x00024319
   11104:	00029881 	.word	0x00029881

00011108 <clearNumbers>:

void clearNumbers(bool admin)
{
   11108:	b580      	push	{r7, lr}
   1110a:	b082      	sub	sp, #8
   1110c:	af00      	add	r7, sp, #0
   1110e:	0002      	movs	r2, r0
   11110:	1dfb      	adds	r3, r7, #7
   11112:	701a      	strb	r2, [r3, #0]
	if (admin)
   11114:	1dfb      	adds	r3, r7, #7
   11116:	781b      	ldrb	r3, [r3, #0]
   11118:	2b00      	cmp	r3, #0
   1111a:	d003      	beq.n	11124 <clearNumbers+0x1c>
	{
		user_count_struct.current_user_no_count = 0;
   1111c:	4b28      	ldr	r3, [pc, #160]	; (111c0 <clearNumbers+0xb8>)
   1111e:	2200      	movs	r2, #0
   11120:	709a      	strb	r2, [r3, #2]
   11122:	e018      	b.n	11156 <clearNumbers+0x4e>
	}
	else
	{
		memset(page_data, '\0', sizeof(page_data));
   11124:	4b27      	ldr	r3, [pc, #156]	; (111c4 <clearNumbers+0xbc>)
   11126:	223c      	movs	r2, #60	; 0x3c
   11128:	2100      	movs	r1, #0
   1112a:	0018      	movs	r0, r3
   1112c:	4b26      	ldr	r3, [pc, #152]	; (111c8 <clearNumbers+0xc0>)
   1112e:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+user_count_struct.primaryNumberIndex, page_data);
   11130:	4b23      	ldr	r3, [pc, #140]	; (111c0 <clearNumbers+0xb8>)
   11132:	78db      	ldrb	r3, [r3, #3]
   11134:	3309      	adds	r3, #9
   11136:	b2db      	uxtb	r3, r3
   11138:	4a22      	ldr	r2, [pc, #136]	; (111c4 <clearNumbers+0xbc>)
   1113a:	0011      	movs	r1, r2
   1113c:	0018      	movs	r0, r3
   1113e:	4b23      	ldr	r3, [pc, #140]	; (111cc <clearNumbers+0xc4>)
   11140:	4798      	blx	r3
		eeprom_emulator_write_page(USER_1_MOBILE_NUMBER_PAGE, page_data);
   11142:	4b20      	ldr	r3, [pc, #128]	; (111c4 <clearNumbers+0xbc>)
   11144:	0019      	movs	r1, r3
   11146:	2009      	movs	r0, #9
   11148:	4b21      	ldr	r3, [pc, #132]	; (111d0 <clearNumbers+0xc8>)
   1114a:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   1114c:	4b21      	ldr	r3, [pc, #132]	; (111d4 <clearNumbers+0xcc>)
   1114e:	4798      	blx	r3

		user_count_struct.current_user_no_count = 1;
   11150:	4b1b      	ldr	r3, [pc, #108]	; (111c0 <clearNumbers+0xb8>)
   11152:	2201      	movs	r2, #1
   11154:	709a      	strb	r2, [r3, #2]
		
	}
	user_count_struct.primaryNumberIndex=0;
   11156:	4b1a      	ldr	r3, [pc, #104]	; (111c0 <clearNumbers+0xb8>)
   11158:	2200      	movs	r2, #0
   1115a:	70da      	strb	r2, [r3, #3]
	user_count_struct.secondaryNumberIndex=1;
   1115c:	4b18      	ldr	r3, [pc, #96]	; (111c0 <clearNumbers+0xb8>)
   1115e:	2201      	movs	r2, #1
   11160:	711a      	strb	r2, [r3, #4]

	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   11162:	4a18      	ldr	r2, [pc, #96]	; (111c4 <clearNumbers+0xbc>)
   11164:	4b16      	ldr	r3, [pc, #88]	; (111c0 <clearNumbers+0xb8>)
   11166:	0010      	movs	r0, r2
   11168:	0019      	movs	r1, r3
   1116a:	2308      	movs	r3, #8
   1116c:	001a      	movs	r2, r3
   1116e:	4b1a      	ldr	r3, [pc, #104]	; (111d8 <clearNumbers+0xd0>)
   11170:	4798      	blx	r3
	user_count_struct.primaryNumberIndex=0;
   11172:	4b13      	ldr	r3, [pc, #76]	; (111c0 <clearNumbers+0xb8>)
   11174:	2200      	movs	r2, #0
   11176:	70da      	strb	r2, [r3, #3]
	user_count_struct.secondaryNumberIndex=1;
   11178:	4b11      	ldr	r3, [pc, #68]	; (111c0 <clearNumbers+0xb8>)
   1117a:	2201      	movs	r2, #1
   1117c:	711a      	strb	r2, [r3, #4]
	eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   1117e:	4b11      	ldr	r3, [pc, #68]	; (111c4 <clearNumbers+0xbc>)
   11180:	0019      	movs	r1, r3
   11182:	2008      	movs	r0, #8
   11184:	4b12      	ldr	r3, [pc, #72]	; (111d0 <clearNumbers+0xc8>)
   11186:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11188:	4b12      	ldr	r3, [pc, #72]	; (111d4 <clearNumbers+0xcc>)
   1118a:	4798      	blx	r3
	
	saveAlterNumberSetting(false);
   1118c:	2000      	movs	r0, #0
   1118e:	4b13      	ldr	r3, [pc, #76]	; (111dc <clearNumbers+0xd4>)
   11190:	4798      	blx	r3
	
	alternateNumber_struct.alterNumberPresent = false;
   11192:	4b13      	ldr	r3, [pc, #76]	; (111e0 <clearNumbers+0xd8>)
   11194:	2200      	movs	r2, #0
   11196:	709a      	strb	r2, [r3, #2]
	memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
   11198:	4a0a      	ldr	r2, [pc, #40]	; (111c4 <clearNumbers+0xbc>)
   1119a:	4b11      	ldr	r3, [pc, #68]	; (111e0 <clearNumbers+0xd8>)
   1119c:	0010      	movs	r0, r2
   1119e:	0019      	movs	r1, r3
   111a0:	2318      	movs	r3, #24
   111a2:	001a      	movs	r2, r3
   111a4:	4b0c      	ldr	r3, [pc, #48]	; (111d8 <clearNumbers+0xd0>)
   111a6:	4798      	blx	r3
	eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
   111a8:	4b06      	ldr	r3, [pc, #24]	; (111c4 <clearNumbers+0xbc>)
   111aa:	0019      	movs	r1, r3
   111ac:	2018      	movs	r0, #24
   111ae:	4b08      	ldr	r3, [pc, #32]	; (111d0 <clearNumbers+0xc8>)
   111b0:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   111b2:	4b08      	ldr	r3, [pc, #32]	; (111d4 <clearNumbers+0xcc>)
   111b4:	4798      	blx	r3
}
   111b6:	46c0      	nop			; (mov r8, r8)
   111b8:	46bd      	mov	sp, r7
   111ba:	b002      	add	sp, #8
   111bc:	bd80      	pop	{r7, pc}
   111be:	46c0      	nop			; (mov r8, r8)
   111c0:	20000614 	.word	0x20000614
   111c4:	20000584 	.word	0x20000584
   111c8:	000298b7 	.word	0x000298b7
   111cc:	0002427d 	.word	0x0002427d
   111d0:	00024171 	.word	0x00024171
   111d4:	00024319 	.word	0x00024319
   111d8:	00029881 	.word	0x00029881
   111dc:	000111e5 	.word	0x000111e5
   111e0:	2000063c 	.word	0x2000063c

000111e4 <saveAlterNumberSetting>:

void saveAlterNumberSetting(bool flag)
{
   111e4:	b580      	push	{r7, lr}
   111e6:	b082      	sub	sp, #8
   111e8:	af00      	add	r7, sp, #0
   111ea:	0002      	movs	r2, r0
   111ec:	1dfb      	adds	r3, r7, #7
   111ee:	701a      	strb	r2, [r3, #0]
	alternateNumber_struct.alterNumberSetting = flag;
   111f0:	1dfb      	adds	r3, r7, #7
   111f2:	781a      	ldrb	r2, [r3, #0]
   111f4:	4b0a      	ldr	r3, [pc, #40]	; (11220 <saveAlterNumberSetting+0x3c>)
   111f6:	705a      	strb	r2, [r3, #1]
	memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
   111f8:	4a0a      	ldr	r2, [pc, #40]	; (11224 <saveAlterNumberSetting+0x40>)
   111fa:	4b09      	ldr	r3, [pc, #36]	; (11220 <saveAlterNumberSetting+0x3c>)
   111fc:	0010      	movs	r0, r2
   111fe:	0019      	movs	r1, r3
   11200:	2318      	movs	r3, #24
   11202:	001a      	movs	r2, r3
   11204:	4b08      	ldr	r3, [pc, #32]	; (11228 <saveAlterNumberSetting+0x44>)
   11206:	4798      	blx	r3
	eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
   11208:	4b06      	ldr	r3, [pc, #24]	; (11224 <saveAlterNumberSetting+0x40>)
   1120a:	0019      	movs	r1, r3
   1120c:	2018      	movs	r0, #24
   1120e:	4b07      	ldr	r3, [pc, #28]	; (1122c <saveAlterNumberSetting+0x48>)
   11210:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11212:	4b07      	ldr	r3, [pc, #28]	; (11230 <saveAlterNumberSetting+0x4c>)
   11214:	4798      	blx	r3
}
   11216:	46c0      	nop			; (mov r8, r8)
   11218:	46bd      	mov	sp, r7
   1121a:	b002      	add	sp, #8
   1121c:	bd80      	pop	{r7, pc}
   1121e:	46c0      	nop			; (mov r8, r8)
   11220:	2000063c 	.word	0x2000063c
   11224:	20000584 	.word	0x20000584
   11228:	00029881 	.word	0x00029881
   1122c:	00024171 	.word	0x00024171
   11230:	00024319 	.word	0x00024319

00011234 <addAlternateNumber>:

bool addAlternateNumber(char *numer)
{
   11234:	b580      	push	{r7, lr}
   11236:	b082      	sub	sp, #8
   11238:	af00      	add	r7, sp, #0
   1123a:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count > 0)
   1123c:	4b11      	ldr	r3, [pc, #68]	; (11284 <addAlternateNumber+0x50>)
   1123e:	789b      	ldrb	r3, [r3, #2]
   11240:	2b00      	cmp	r3, #0
   11242:	d019      	beq.n	11278 <addAlternateNumber+0x44>
	{
		alternateNumber_struct.alterNumberPresent = true;
   11244:	4b10      	ldr	r3, [pc, #64]	; (11288 <addAlternateNumber+0x54>)
   11246:	2201      	movs	r2, #1
   11248:	709a      	strb	r2, [r3, #2]
		strcpy(alternateNumber_struct.alternateNumber_ee,numer);
   1124a:	687a      	ldr	r2, [r7, #4]
   1124c:	4b0f      	ldr	r3, [pc, #60]	; (1128c <addAlternateNumber+0x58>)
   1124e:	0011      	movs	r1, r2
   11250:	0018      	movs	r0, r3
   11252:	4b0f      	ldr	r3, [pc, #60]	; (11290 <addAlternateNumber+0x5c>)
   11254:	4798      	blx	r3
		memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
   11256:	4a0f      	ldr	r2, [pc, #60]	; (11294 <addAlternateNumber+0x60>)
   11258:	4b0b      	ldr	r3, [pc, #44]	; (11288 <addAlternateNumber+0x54>)
   1125a:	0010      	movs	r0, r2
   1125c:	0019      	movs	r1, r3
   1125e:	2318      	movs	r3, #24
   11260:	001a      	movs	r2, r3
   11262:	4b0d      	ldr	r3, [pc, #52]	; (11298 <addAlternateNumber+0x64>)
   11264:	4798      	blx	r3
		eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
   11266:	4b0b      	ldr	r3, [pc, #44]	; (11294 <addAlternateNumber+0x60>)
   11268:	0019      	movs	r1, r3
   1126a:	2018      	movs	r0, #24
   1126c:	4b0b      	ldr	r3, [pc, #44]	; (1129c <addAlternateNumber+0x68>)
   1126e:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   11270:	4b0b      	ldr	r3, [pc, #44]	; (112a0 <addAlternateNumber+0x6c>)
   11272:	4798      	blx	r3
		
		return true;
   11274:	2301      	movs	r3, #1
   11276:	e000      	b.n	1127a <addAlternateNumber+0x46>
	}
	return false;
   11278:	2300      	movs	r3, #0
}
   1127a:	0018      	movs	r0, r3
   1127c:	46bd      	mov	sp, r7
   1127e:	b002      	add	sp, #8
   11280:	bd80      	pop	{r7, pc}
   11282:	46c0      	nop			; (mov r8, r8)
   11284:	20000614 	.word	0x20000614
   11288:	2000063c 	.word	0x2000063c
   1128c:	20000640 	.word	0x20000640
   11290:	00029b37 	.word	0x00029b37
   11294:	20000584 	.word	0x20000584
   11298:	00029881 	.word	0x00029881
   1129c:	00024171 	.word	0x00024171
   112a0:	00024319 	.word	0x00024319

000112a4 <saveAutoStartSettings>:

void saveAutoStartSettings(bool flag)
{
   112a4:	b580      	push	{r7, lr}
   112a6:	b082      	sub	sp, #8
   112a8:	af00      	add	r7, sp, #0
   112aa:	0002      	movs	r2, r0
   112ac:	1dfb      	adds	r3, r7, #7
   112ae:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.autoStartAddress = (uint8_t)flag;
   112b0:	1dfb      	adds	r3, r7, #7
   112b2:	781a      	ldrb	r2, [r3, #0]
   112b4:	4b09      	ldr	r3, [pc, #36]	; (112dc <saveAutoStartSettings+0x38>)
   112b6:	705a      	strb	r2, [r3, #1]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   112b8:	4908      	ldr	r1, [pc, #32]	; (112dc <saveAutoStartSettings+0x38>)
   112ba:	4b09      	ldr	r3, [pc, #36]	; (112e0 <saveAutoStartSettings+0x3c>)
   112bc:	2230      	movs	r2, #48	; 0x30
   112be:	0018      	movs	r0, r3
   112c0:	4b08      	ldr	r3, [pc, #32]	; (112e4 <saveAutoStartSettings+0x40>)
   112c2:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   112c4:	4b06      	ldr	r3, [pc, #24]	; (112e0 <saveAutoStartSettings+0x3c>)
   112c6:	0019      	movs	r1, r3
   112c8:	201a      	movs	r0, #26
   112ca:	4b07      	ldr	r3, [pc, #28]	; (112e8 <saveAutoStartSettings+0x44>)
   112cc:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   112ce:	4b07      	ldr	r3, [pc, #28]	; (112ec <saveAutoStartSettings+0x48>)
   112d0:	4798      	blx	r3
}
   112d2:	46c0      	nop			; (mov r8, r8)
   112d4:	46bd      	mov	sp, r7
   112d6:	b002      	add	sp, #8
   112d8:	bd80      	pop	{r7, pc}
   112da:	46c0      	nop			; (mov r8, r8)
   112dc:	20000654 	.word	0x20000654
   112e0:	20000584 	.word	0x20000584
   112e4:	00029881 	.word	0x00029881
   112e8:	00024171 	.word	0x00024171
   112ec:	00024319 	.word	0x00024319

000112f0 <saveAutoStartTimeSettings>:

void saveAutoStartTimeSettings(uint16_t value)
{
   112f0:	b580      	push	{r7, lr}
   112f2:	b082      	sub	sp, #8
   112f4:	af00      	add	r7, sp, #0
   112f6:	0002      	movs	r2, r0
   112f8:	1dbb      	adds	r3, r7, #6
   112fa:	801a      	strh	r2, [r3, #0]
	user_settings_parameter_struct.autoStartTimeAddress = value;
   112fc:	4b0a      	ldr	r3, [pc, #40]	; (11328 <saveAutoStartTimeSettings+0x38>)
   112fe:	1dba      	adds	r2, r7, #6
   11300:	8812      	ldrh	r2, [r2, #0]
   11302:	805a      	strh	r2, [r3, #2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11304:	4908      	ldr	r1, [pc, #32]	; (11328 <saveAutoStartTimeSettings+0x38>)
   11306:	4b09      	ldr	r3, [pc, #36]	; (1132c <saveAutoStartTimeSettings+0x3c>)
   11308:	2230      	movs	r2, #48	; 0x30
   1130a:	0018      	movs	r0, r3
   1130c:	4b08      	ldr	r3, [pc, #32]	; (11330 <saveAutoStartTimeSettings+0x40>)
   1130e:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11310:	4b06      	ldr	r3, [pc, #24]	; (1132c <saveAutoStartTimeSettings+0x3c>)
   11312:	0019      	movs	r1, r3
   11314:	201a      	movs	r0, #26
   11316:	4b07      	ldr	r3, [pc, #28]	; (11334 <saveAutoStartTimeSettings+0x44>)
   11318:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   1131a:	4b07      	ldr	r3, [pc, #28]	; (11338 <saveAutoStartTimeSettings+0x48>)
   1131c:	4798      	blx	r3
}
   1131e:	46c0      	nop			; (mov r8, r8)
   11320:	46bd      	mov	sp, r7
   11322:	b002      	add	sp, #8
   11324:	bd80      	pop	{r7, pc}
   11326:	46c0      	nop			; (mov r8, r8)
   11328:	20000654 	.word	0x20000654
   1132c:	20000584 	.word	0x20000584
   11330:	00029881 	.word	0x00029881
   11334:	00024171 	.word	0x00024171
   11338:	00024319 	.word	0x00024319

0001133c <saveDNDSettings>:

void saveDNDSettings(char flag)
{
   1133c:	b580      	push	{r7, lr}
   1133e:	b082      	sub	sp, #8
   11340:	af00      	add	r7, sp, #0
   11342:	0002      	movs	r2, r0
   11344:	1dfb      	adds	r3, r7, #7
   11346:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.dndAddress = flag;
   11348:	4b0a      	ldr	r3, [pc, #40]	; (11374 <saveDNDSettings+0x38>)
   1134a:	1dfa      	adds	r2, r7, #7
   1134c:	7812      	ldrb	r2, [r2, #0]
   1134e:	711a      	strb	r2, [r3, #4]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11350:	4908      	ldr	r1, [pc, #32]	; (11374 <saveDNDSettings+0x38>)
   11352:	4b09      	ldr	r3, [pc, #36]	; (11378 <saveDNDSettings+0x3c>)
   11354:	2230      	movs	r2, #48	; 0x30
   11356:	0018      	movs	r0, r3
   11358:	4b08      	ldr	r3, [pc, #32]	; (1137c <saveDNDSettings+0x40>)
   1135a:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1135c:	4b06      	ldr	r3, [pc, #24]	; (11378 <saveDNDSettings+0x3c>)
   1135e:	0019      	movs	r1, r3
   11360:	201a      	movs	r0, #26
   11362:	4b07      	ldr	r3, [pc, #28]	; (11380 <saveDNDSettings+0x44>)
   11364:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11366:	4b07      	ldr	r3, [pc, #28]	; (11384 <saveDNDSettings+0x48>)
   11368:	4798      	blx	r3
}
   1136a:	46c0      	nop			; (mov r8, r8)
   1136c:	46bd      	mov	sp, r7
   1136e:	b002      	add	sp, #8
   11370:	bd80      	pop	{r7, pc}
   11372:	46c0      	nop			; (mov r8, r8)
   11374:	20000654 	.word	0x20000654
   11378:	20000584 	.word	0x20000584
   1137c:	00029881 	.word	0x00029881
   11380:	00024171 	.word	0x00024171
   11384:	00024319 	.word	0x00024319

00011388 <saveResponseSettings>:
//eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
//eeprom_emulator_commit_page_buffer();
//}

void saveResponseSettings(char response)
{
   11388:	b580      	push	{r7, lr}
   1138a:	b082      	sub	sp, #8
   1138c:	af00      	add	r7, sp, #0
   1138e:	0002      	movs	r2, r0
   11390:	1dfb      	adds	r3, r7, #7
   11392:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.responseAddress = response;
   11394:	4b0a      	ldr	r3, [pc, #40]	; (113c0 <saveResponseSettings+0x38>)
   11396:	1dfa      	adds	r2, r7, #7
   11398:	7812      	ldrb	r2, [r2, #0]
   1139a:	715a      	strb	r2, [r3, #5]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1139c:	4908      	ldr	r1, [pc, #32]	; (113c0 <saveResponseSettings+0x38>)
   1139e:	4b09      	ldr	r3, [pc, #36]	; (113c4 <saveResponseSettings+0x3c>)
   113a0:	2230      	movs	r2, #48	; 0x30
   113a2:	0018      	movs	r0, r3
   113a4:	4b08      	ldr	r3, [pc, #32]	; (113c8 <saveResponseSettings+0x40>)
   113a6:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   113a8:	4b06      	ldr	r3, [pc, #24]	; (113c4 <saveResponseSettings+0x3c>)
   113aa:	0019      	movs	r1, r3
   113ac:	201a      	movs	r0, #26
   113ae:	4b07      	ldr	r3, [pc, #28]	; (113cc <saveResponseSettings+0x44>)
   113b0:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   113b2:	4b07      	ldr	r3, [pc, #28]	; (113d0 <saveResponseSettings+0x48>)
   113b4:	4798      	blx	r3
}
   113b6:	46c0      	nop			; (mov r8, r8)
   113b8:	46bd      	mov	sp, r7
   113ba:	b002      	add	sp, #8
   113bc:	bd80      	pop	{r7, pc}
   113be:	46c0      	nop			; (mov r8, r8)
   113c0:	20000654 	.word	0x20000654
   113c4:	20000584 	.word	0x20000584
   113c8:	00029881 	.word	0x00029881
   113cc:	00024171 	.word	0x00024171
   113d0:	00024319 	.word	0x00024319

000113d4 <saveNoCallSettings>:

void saveNoCallSettings(bool flag,uint8_t startHour,uint8_t startMinute,uint8_t stopHour,uint8_t stopMinute)
{
   113d4:	b5b0      	push	{r4, r5, r7, lr}
   113d6:	b082      	sub	sp, #8
   113d8:	af00      	add	r7, sp, #0
   113da:	0005      	movs	r5, r0
   113dc:	000c      	movs	r4, r1
   113de:	0010      	movs	r0, r2
   113e0:	0019      	movs	r1, r3
   113e2:	1dfb      	adds	r3, r7, #7
   113e4:	1c2a      	adds	r2, r5, #0
   113e6:	701a      	strb	r2, [r3, #0]
   113e8:	1dbb      	adds	r3, r7, #6
   113ea:	1c22      	adds	r2, r4, #0
   113ec:	701a      	strb	r2, [r3, #0]
   113ee:	1d7b      	adds	r3, r7, #5
   113f0:	1c02      	adds	r2, r0, #0
   113f2:	701a      	strb	r2, [r3, #0]
   113f4:	1d3b      	adds	r3, r7, #4
   113f6:	1c0a      	adds	r2, r1, #0
   113f8:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.noCallAddress = (uint8_t)flag;
   113fa:	1dfb      	adds	r3, r7, #7
   113fc:	781a      	ldrb	r2, [r3, #0]
   113fe:	4b14      	ldr	r3, [pc, #80]	; (11450 <saveNoCallSettings+0x7c>)
   11400:	725a      	strb	r2, [r3, #9]
	if (user_settings_parameter_struct.noCallAddress)
   11402:	4b13      	ldr	r3, [pc, #76]	; (11450 <saveNoCallSettings+0x7c>)
   11404:	7a5b      	ldrb	r3, [r3, #9]
   11406:	2b00      	cmp	r3, #0
   11408:	d010      	beq.n	1142c <saveNoCallSettings+0x58>
	{
		user_settings_parameter_struct.noCallStartTimeHourAddress = startHour;
   1140a:	4b11      	ldr	r3, [pc, #68]	; (11450 <saveNoCallSettings+0x7c>)
   1140c:	1dba      	adds	r2, r7, #6
   1140e:	7812      	ldrb	r2, [r2, #0]
   11410:	729a      	strb	r2, [r3, #10]
		user_settings_parameter_struct.noCallStartTimeMinuteAddress = startMinute;
   11412:	4b0f      	ldr	r3, [pc, #60]	; (11450 <saveNoCallSettings+0x7c>)
   11414:	1d7a      	adds	r2, r7, #5
   11416:	7812      	ldrb	r2, [r2, #0]
   11418:	72da      	strb	r2, [r3, #11]
		
		user_settings_parameter_struct.noCallStopTimeHourAddress = stopHour;
   1141a:	4b0d      	ldr	r3, [pc, #52]	; (11450 <saveNoCallSettings+0x7c>)
   1141c:	1d3a      	adds	r2, r7, #4
   1141e:	7812      	ldrb	r2, [r2, #0]
   11420:	731a      	strb	r2, [r3, #12]
		user_settings_parameter_struct.noCallStopTimeMinuteAddress = stopMinute;
   11422:	4b0b      	ldr	r3, [pc, #44]	; (11450 <saveNoCallSettings+0x7c>)
   11424:	2218      	movs	r2, #24
   11426:	18ba      	adds	r2, r7, r2
   11428:	7812      	ldrb	r2, [r2, #0]
   1142a:	735a      	strb	r2, [r3, #13]
	}
	
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1142c:	4908      	ldr	r1, [pc, #32]	; (11450 <saveNoCallSettings+0x7c>)
   1142e:	4b09      	ldr	r3, [pc, #36]	; (11454 <saveNoCallSettings+0x80>)
   11430:	2230      	movs	r2, #48	; 0x30
   11432:	0018      	movs	r0, r3
   11434:	4b08      	ldr	r3, [pc, #32]	; (11458 <saveNoCallSettings+0x84>)
   11436:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11438:	4b06      	ldr	r3, [pc, #24]	; (11454 <saveNoCallSettings+0x80>)
   1143a:	0019      	movs	r1, r3
   1143c:	201a      	movs	r0, #26
   1143e:	4b07      	ldr	r3, [pc, #28]	; (1145c <saveNoCallSettings+0x88>)
   11440:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11442:	4b07      	ldr	r3, [pc, #28]	; (11460 <saveNoCallSettings+0x8c>)
   11444:	4798      	blx	r3
}
   11446:	46c0      	nop			; (mov r8, r8)
   11448:	46bd      	mov	sp, r7
   1144a:	b002      	add	sp, #8
   1144c:	bdb0      	pop	{r4, r5, r7, pc}
   1144e:	46c0      	nop			; (mov r8, r8)
   11450:	20000654 	.word	0x20000654
   11454:	20000584 	.word	0x20000584
   11458:	00029881 	.word	0x00029881
   1145c:	00024171 	.word	0x00024171
   11460:	00024319 	.word	0x00024319

00011464 <saveWaterBypassSettings>:

void saveWaterBypassSettings(bool flag)
{
   11464:	b580      	push	{r7, lr}
   11466:	b082      	sub	sp, #8
   11468:	af00      	add	r7, sp, #0
   1146a:	0002      	movs	r2, r0
   1146c:	1dfb      	adds	r3, r7, #7
   1146e:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.waterBypassAddress = (uint8_t)flag;
   11470:	1dfb      	adds	r3, r7, #7
   11472:	781a      	ldrb	r2, [r3, #0]
   11474:	4b09      	ldr	r3, [pc, #36]	; (1149c <saveWaterBypassSettings+0x38>)
   11476:	77da      	strb	r2, [r3, #31]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11478:	4908      	ldr	r1, [pc, #32]	; (1149c <saveWaterBypassSettings+0x38>)
   1147a:	4b09      	ldr	r3, [pc, #36]	; (114a0 <saveWaterBypassSettings+0x3c>)
   1147c:	2230      	movs	r2, #48	; 0x30
   1147e:	0018      	movs	r0, r3
   11480:	4b08      	ldr	r3, [pc, #32]	; (114a4 <saveWaterBypassSettings+0x40>)
   11482:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11484:	4b06      	ldr	r3, [pc, #24]	; (114a0 <saveWaterBypassSettings+0x3c>)
   11486:	0019      	movs	r1, r3
   11488:	201a      	movs	r0, #26
   1148a:	4b07      	ldr	r3, [pc, #28]	; (114a8 <saveWaterBypassSettings+0x44>)
   1148c:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   1148e:	4b07      	ldr	r3, [pc, #28]	; (114ac <saveWaterBypassSettings+0x48>)
   11490:	4798      	blx	r3
}
   11492:	46c0      	nop			; (mov r8, r8)
   11494:	46bd      	mov	sp, r7
   11496:	b002      	add	sp, #8
   11498:	bd80      	pop	{r7, pc}
   1149a:	46c0      	nop			; (mov r8, r8)
   1149c:	20000654 	.word	0x20000654
   114a0:	20000584 	.word	0x20000584
   114a4:	00029881 	.word	0x00029881
   114a8:	00024171 	.word	0x00024171
   114ac:	00024319 	.word	0x00024319

000114b0 <savePreventOverFlowSettings>:

void savePreventOverFlowSettings(bool flag)
{
   114b0:	b580      	push	{r7, lr}
   114b2:	b082      	sub	sp, #8
   114b4:	af00      	add	r7, sp, #0
   114b6:	0002      	movs	r2, r0
   114b8:	1dfb      	adds	r3, r7, #7
   114ba:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.preventOverFlowAddress = (uint8_t)flag;
   114bc:	1dfb      	adds	r3, r7, #7
   114be:	781a      	ldrb	r2, [r3, #0]
   114c0:	4b09      	ldr	r3, [pc, #36]	; (114e8 <savePreventOverFlowSettings+0x38>)
   114c2:	779a      	strb	r2, [r3, #30]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   114c4:	4908      	ldr	r1, [pc, #32]	; (114e8 <savePreventOverFlowSettings+0x38>)
   114c6:	4b09      	ldr	r3, [pc, #36]	; (114ec <savePreventOverFlowSettings+0x3c>)
   114c8:	2230      	movs	r2, #48	; 0x30
   114ca:	0018      	movs	r0, r3
   114cc:	4b08      	ldr	r3, [pc, #32]	; (114f0 <savePreventOverFlowSettings+0x40>)
   114ce:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   114d0:	4b06      	ldr	r3, [pc, #24]	; (114ec <savePreventOverFlowSettings+0x3c>)
   114d2:	0019      	movs	r1, r3
   114d4:	201a      	movs	r0, #26
   114d6:	4b07      	ldr	r3, [pc, #28]	; (114f4 <savePreventOverFlowSettings+0x44>)
   114d8:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   114da:	4b07      	ldr	r3, [pc, #28]	; (114f8 <savePreventOverFlowSettings+0x48>)
   114dc:	4798      	blx	r3
}
   114de:	46c0      	nop			; (mov r8, r8)
   114e0:	46bd      	mov	sp, r7
   114e2:	b002      	add	sp, #8
   114e4:	bd80      	pop	{r7, pc}
   114e6:	46c0      	nop			; (mov r8, r8)
   114e8:	20000654 	.word	0x20000654
   114ec:	20000584 	.word	0x20000584
   114f0:	00029881 	.word	0x00029881
   114f4:	00024171 	.word	0x00024171
   114f8:	00024319 	.word	0x00024319

000114fc <setOverloadPer>:
//eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
//eeprom_emulator_commit_page_buffer();
//}

bool setOverloadPer(uint8_t overloadPerValue)
{
   114fc:	b580      	push	{r7, lr}
   114fe:	b082      	sub	sp, #8
   11500:	af00      	add	r7, sp, #0
   11502:	0002      	movs	r2, r0
   11504:	1dfb      	adds	r3, r7, #7
   11506:	701a      	strb	r2, [r3, #0]
	if(overloadPerValue>100)
   11508:	1dfb      	adds	r3, r7, #7
   1150a:	781b      	ldrb	r3, [r3, #0]
   1150c:	2b64      	cmp	r3, #100	; 0x64
   1150e:	d918      	bls.n	11542 <setOverloadPer+0x46>
	{
		user_settings_parameter_struct.overloadPerAddress = overloadPerValue;
   11510:	4b0e      	ldr	r3, [pc, #56]	; (1154c <setOverloadPer+0x50>)
   11512:	1dfa      	adds	r2, r7, #7
   11514:	7812      	ldrb	r2, [r2, #0]
   11516:	775a      	strb	r2, [r3, #29]
		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11518:	490c      	ldr	r1, [pc, #48]	; (1154c <setOverloadPer+0x50>)
   1151a:	4b0d      	ldr	r3, [pc, #52]	; (11550 <setOverloadPer+0x54>)
   1151c:	2230      	movs	r2, #48	; 0x30
   1151e:	0018      	movs	r0, r3
   11520:	4b0c      	ldr	r3, [pc, #48]	; (11554 <setOverloadPer+0x58>)
   11522:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11524:	4b0a      	ldr	r3, [pc, #40]	; (11550 <setOverloadPer+0x54>)
   11526:	0019      	movs	r1, r3
   11528:	201a      	movs	r0, #26
   1152a:	4b0b      	ldr	r3, [pc, #44]	; (11558 <setOverloadPer+0x5c>)
   1152c:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   1152e:	4b0b      	ldr	r3, [pc, #44]	; (1155c <setOverloadPer+0x60>)
   11530:	4798      	blx	r3
		
		if (user_settings_parameter_struct.currentDetectionAddress)
   11532:	4b06      	ldr	r3, [pc, #24]	; (1154c <setOverloadPer+0x50>)
   11534:	7bdb      	ldrb	r3, [r3, #15]
   11536:	2b00      	cmp	r3, #0
   11538:	d001      	beq.n	1153e <setOverloadPer+0x42>
		{
			calcCurrentValues();
   1153a:	4b09      	ldr	r3, [pc, #36]	; (11560 <setOverloadPer+0x64>)
   1153c:	4798      	blx	r3
		}
		return true;
   1153e:	2301      	movs	r3, #1
   11540:	e000      	b.n	11544 <setOverloadPer+0x48>
	}
	return false;
   11542:	2300      	movs	r3, #0
}
   11544:	0018      	movs	r0, r3
   11546:	46bd      	mov	sp, r7
   11548:	b002      	add	sp, #8
   1154a:	bd80      	pop	{r7, pc}
   1154c:	20000654 	.word	0x20000654
   11550:	20000584 	.word	0x20000584
   11554:	00029881 	.word	0x00029881
   11558:	00024171 	.word	0x00024171
   1155c:	00024319 	.word	0x00024319
   11560:	000117e1 	.word	0x000117e1

00011564 <setUnderloadPer>:

bool setUnderloadPer(uint8_t underloadPerValue)
{
   11564:	b580      	push	{r7, lr}
   11566:	b082      	sub	sp, #8
   11568:	af00      	add	r7, sp, #0
   1156a:	0002      	movs	r2, r0
   1156c:	1dfb      	adds	r3, r7, #7
   1156e:	701a      	strb	r2, [r3, #0]
	if(underloadPerValue>0 && underloadPerValue <100)
   11570:	1dfb      	adds	r3, r7, #7
   11572:	781b      	ldrb	r3, [r3, #0]
   11574:	2b00      	cmp	r3, #0
   11576:	d01c      	beq.n	115b2 <setUnderloadPer+0x4e>
   11578:	1dfb      	adds	r3, r7, #7
   1157a:	781b      	ldrb	r3, [r3, #0]
   1157c:	2b63      	cmp	r3, #99	; 0x63
   1157e:	d818      	bhi.n	115b2 <setUnderloadPer+0x4e>
	{
		user_settings_parameter_struct.underloadPerAddress = underloadPerValue;
   11580:	4b0e      	ldr	r3, [pc, #56]	; (115bc <setUnderloadPer+0x58>)
   11582:	1dfa      	adds	r2, r7, #7
   11584:	7812      	ldrb	r2, [r2, #0]
   11586:	771a      	strb	r2, [r3, #28]
		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11588:	490c      	ldr	r1, [pc, #48]	; (115bc <setUnderloadPer+0x58>)
   1158a:	4b0d      	ldr	r3, [pc, #52]	; (115c0 <setUnderloadPer+0x5c>)
   1158c:	2230      	movs	r2, #48	; 0x30
   1158e:	0018      	movs	r0, r3
   11590:	4b0c      	ldr	r3, [pc, #48]	; (115c4 <setUnderloadPer+0x60>)
   11592:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11594:	4b0a      	ldr	r3, [pc, #40]	; (115c0 <setUnderloadPer+0x5c>)
   11596:	0019      	movs	r1, r3
   11598:	201a      	movs	r0, #26
   1159a:	4b0b      	ldr	r3, [pc, #44]	; (115c8 <setUnderloadPer+0x64>)
   1159c:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   1159e:	4b0b      	ldr	r3, [pc, #44]	; (115cc <setUnderloadPer+0x68>)
   115a0:	4798      	blx	r3
		if (user_settings_parameter_struct.currentDetectionAddress)
   115a2:	4b06      	ldr	r3, [pc, #24]	; (115bc <setUnderloadPer+0x58>)
   115a4:	7bdb      	ldrb	r3, [r3, #15]
   115a6:	2b00      	cmp	r3, #0
   115a8:	d001      	beq.n	115ae <setUnderloadPer+0x4a>
		{
			calcCurrentValues();
   115aa:	4b09      	ldr	r3, [pc, #36]	; (115d0 <setUnderloadPer+0x6c>)
   115ac:	4798      	blx	r3
		}
		return true;
   115ae:	2301      	movs	r3, #1
   115b0:	e000      	b.n	115b4 <setUnderloadPer+0x50>
	}
	return false;
   115b2:	2300      	movs	r3, #0
}
   115b4:	0018      	movs	r0, r3
   115b6:	46bd      	mov	sp, r7
   115b8:	b002      	add	sp, #8
   115ba:	bd80      	pop	{r7, pc}
   115bc:	20000654 	.word	0x20000654
   115c0:	20000584 	.word	0x20000584
   115c4:	00029881 	.word	0x00029881
   115c8:	00024171 	.word	0x00024171
   115cc:	00024319 	.word	0x00024319
   115d0:	000117e1 	.word	0x000117e1

000115d4 <saveSinglePhasingSettings>:

void saveSinglePhasingSettings(bool singlePhasing)
{
   115d4:	b580      	push	{r7, lr}
   115d6:	b082      	sub	sp, #8
   115d8:	af00      	add	r7, sp, #0
   115da:	0002      	movs	r2, r0
   115dc:	1dfb      	adds	r3, r7, #7
   115de:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.detectSinglePhasing=singlePhasing;
   115e0:	1dfb      	adds	r3, r7, #7
   115e2:	7819      	ldrb	r1, [r3, #0]
   115e4:	4b09      	ldr	r3, [pc, #36]	; (1160c <saveSinglePhasingSettings+0x38>)
   115e6:	2220      	movs	r2, #32
   115e8:	5499      	strb	r1, [r3, r2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   115ea:	4908      	ldr	r1, [pc, #32]	; (1160c <saveSinglePhasingSettings+0x38>)
   115ec:	4b08      	ldr	r3, [pc, #32]	; (11610 <saveSinglePhasingSettings+0x3c>)
   115ee:	2230      	movs	r2, #48	; 0x30
   115f0:	0018      	movs	r0, r3
   115f2:	4b08      	ldr	r3, [pc, #32]	; (11614 <saveSinglePhasingSettings+0x40>)
   115f4:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   115f6:	4b06      	ldr	r3, [pc, #24]	; (11610 <saveSinglePhasingSettings+0x3c>)
   115f8:	0019      	movs	r1, r3
   115fa:	201a      	movs	r0, #26
   115fc:	4b06      	ldr	r3, [pc, #24]	; (11618 <saveSinglePhasingSettings+0x44>)
   115fe:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11600:	4b06      	ldr	r3, [pc, #24]	; (1161c <saveSinglePhasingSettings+0x48>)
   11602:	4798      	blx	r3
}
   11604:	46c0      	nop			; (mov r8, r8)
   11606:	46bd      	mov	sp, r7
   11608:	b002      	add	sp, #8
   1160a:	bd80      	pop	{r7, pc}
   1160c:	20000654 	.word	0x20000654
   11610:	20000584 	.word	0x20000584
   11614:	00029881 	.word	0x00029881
   11618:	00024171 	.word	0x00024171
   1161c:	00024319 	.word	0x00024319

00011620 <saveSinglePhasingVoltage>:

void saveSinglePhasingVoltage(uint16_t voltage)
{
   11620:	b580      	push	{r7, lr}
   11622:	b082      	sub	sp, #8
   11624:	af00      	add	r7, sp, #0
   11626:	0002      	movs	r2, r0
   11628:	1dbb      	adds	r3, r7, #6
   1162a:	801a      	strh	r2, [r3, #0]
	user_settings_parameter_struct.singlePhasingVoltage= voltage;
   1162c:	4b0a      	ldr	r3, [pc, #40]	; (11658 <saveSinglePhasingVoltage+0x38>)
   1162e:	1dba      	adds	r2, r7, #6
   11630:	8812      	ldrh	r2, [r2, #0]
   11632:	845a      	strh	r2, [r3, #34]	; 0x22
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11634:	4908      	ldr	r1, [pc, #32]	; (11658 <saveSinglePhasingVoltage+0x38>)
   11636:	4b09      	ldr	r3, [pc, #36]	; (1165c <saveSinglePhasingVoltage+0x3c>)
   11638:	2230      	movs	r2, #48	; 0x30
   1163a:	0018      	movs	r0, r3
   1163c:	4b08      	ldr	r3, [pc, #32]	; (11660 <saveSinglePhasingVoltage+0x40>)
   1163e:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11640:	4b06      	ldr	r3, [pc, #24]	; (1165c <saveSinglePhasingVoltage+0x3c>)
   11642:	0019      	movs	r1, r3
   11644:	201a      	movs	r0, #26
   11646:	4b07      	ldr	r3, [pc, #28]	; (11664 <saveSinglePhasingVoltage+0x44>)
   11648:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   1164a:	4b07      	ldr	r3, [pc, #28]	; (11668 <saveSinglePhasingVoltage+0x48>)
   1164c:	4798      	blx	r3
}
   1164e:	46c0      	nop			; (mov r8, r8)
   11650:	46bd      	mov	sp, r7
   11652:	b002      	add	sp, #8
   11654:	bd80      	pop	{r7, pc}
   11656:	46c0      	nop			; (mov r8, r8)
   11658:	20000654 	.word	0x20000654
   1165c:	20000584 	.word	0x20000584
   11660:	00029881 	.word	0x00029881
   11664:	00024171 	.word	0x00024171
   11668:	00024319 	.word	0x00024319

0001166c <savePhaseSequenceProtectionSettings>:

void savePhaseSequenceProtectionSettings(bool phaseSequenceSetting)
{
   1166c:	b580      	push	{r7, lr}
   1166e:	b082      	sub	sp, #8
   11670:	af00      	add	r7, sp, #0
   11672:	0002      	movs	r2, r0
   11674:	1dfb      	adds	r3, r7, #7
   11676:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.detectPhaseSequence= phaseSequenceSetting;
   11678:	1dfb      	adds	r3, r7, #7
   1167a:	7819      	ldrb	r1, [r3, #0]
   1167c:	4b09      	ldr	r3, [pc, #36]	; (116a4 <savePhaseSequenceProtectionSettings+0x38>)
   1167e:	2224      	movs	r2, #36	; 0x24
   11680:	5499      	strb	r1, [r3, r2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11682:	4908      	ldr	r1, [pc, #32]	; (116a4 <savePhaseSequenceProtectionSettings+0x38>)
   11684:	4b08      	ldr	r3, [pc, #32]	; (116a8 <savePhaseSequenceProtectionSettings+0x3c>)
   11686:	2230      	movs	r2, #48	; 0x30
   11688:	0018      	movs	r0, r3
   1168a:	4b08      	ldr	r3, [pc, #32]	; (116ac <savePhaseSequenceProtectionSettings+0x40>)
   1168c:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1168e:	4b06      	ldr	r3, [pc, #24]	; (116a8 <savePhaseSequenceProtectionSettings+0x3c>)
   11690:	0019      	movs	r1, r3
   11692:	201a      	movs	r0, #26
   11694:	4b06      	ldr	r3, [pc, #24]	; (116b0 <savePhaseSequenceProtectionSettings+0x44>)
   11696:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11698:	4b06      	ldr	r3, [pc, #24]	; (116b4 <savePhaseSequenceProtectionSettings+0x48>)
   1169a:	4798      	blx	r3
}
   1169c:	46c0      	nop			; (mov r8, r8)
   1169e:	46bd      	mov	sp, r7
   116a0:	b002      	add	sp, #8
   116a2:	bd80      	pop	{r7, pc}
   116a4:	20000654 	.word	0x20000654
   116a8:	20000584 	.word	0x20000584
   116ac:	00029881 	.word	0x00029881
   116b0:	00024171 	.word	0x00024171
   116b4:	00024319 	.word	0x00024319

000116b8 <saveUnderOverDetectionMethodSettings>:


void saveUnderOverDetectionMethodSettings(uint8_t oumethodDetection)
{
   116b8:	b580      	push	{r7, lr}
   116ba:	b082      	sub	sp, #8
   116bc:	af00      	add	r7, sp, #0
   116be:	0002      	movs	r2, r0
   116c0:	1dfb      	adds	r3, r7, #7
   116c2:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.over_under_DetectionMethod = oumethodDetection;
   116c4:	4b0a      	ldr	r3, [pc, #40]	; (116f0 <saveUnderOverDetectionMethodSettings+0x38>)
   116c6:	1dfa      	adds	r2, r7, #7
   116c8:	2126      	movs	r1, #38	; 0x26
   116ca:	7812      	ldrb	r2, [r2, #0]
   116cc:	545a      	strb	r2, [r3, r1]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   116ce:	4908      	ldr	r1, [pc, #32]	; (116f0 <saveUnderOverDetectionMethodSettings+0x38>)
   116d0:	4b08      	ldr	r3, [pc, #32]	; (116f4 <saveUnderOverDetectionMethodSettings+0x3c>)
   116d2:	2230      	movs	r2, #48	; 0x30
   116d4:	0018      	movs	r0, r3
   116d6:	4b08      	ldr	r3, [pc, #32]	; (116f8 <saveUnderOverDetectionMethodSettings+0x40>)
   116d8:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   116da:	4b06      	ldr	r3, [pc, #24]	; (116f4 <saveUnderOverDetectionMethodSettings+0x3c>)
   116dc:	0019      	movs	r1, r3
   116de:	201a      	movs	r0, #26
   116e0:	4b06      	ldr	r3, [pc, #24]	; (116fc <saveUnderOverDetectionMethodSettings+0x44>)
   116e2:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   116e4:	4b06      	ldr	r3, [pc, #24]	; (11700 <saveUnderOverDetectionMethodSettings+0x48>)
   116e6:	4798      	blx	r3
}
   116e8:	46c0      	nop			; (mov r8, r8)
   116ea:	46bd      	mov	sp, r7
   116ec:	b002      	add	sp, #8
   116ee:	bd80      	pop	{r7, pc}
   116f0:	20000654 	.word	0x20000654
   116f4:	20000584 	.word	0x20000584
   116f8:	00029881 	.word	0x00029881
   116fc:	00024171 	.word	0x00024171
   11700:	00024319 	.word	0x00024319

00011704 <saveMotorVoltageBypassSettings>:

void saveMotorVoltageBypassSettings(bool flag)
{
   11704:	b580      	push	{r7, lr}
   11706:	b082      	sub	sp, #8
   11708:	af00      	add	r7, sp, #0
   1170a:	0002      	movs	r2, r0
   1170c:	1dfb      	adds	r3, r7, #7
   1170e:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.motorVoltageBypass=flag;
   11710:	1dfb      	adds	r3, r7, #7
   11712:	7819      	ldrb	r1, [r3, #0]
   11714:	4b09      	ldr	r3, [pc, #36]	; (1173c <saveMotorVoltageBypassSettings+0x38>)
   11716:	2227      	movs	r2, #39	; 0x27
   11718:	5499      	strb	r1, [r3, r2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1171a:	4908      	ldr	r1, [pc, #32]	; (1173c <saveMotorVoltageBypassSettings+0x38>)
   1171c:	4b08      	ldr	r3, [pc, #32]	; (11740 <saveMotorVoltageBypassSettings+0x3c>)
   1171e:	2230      	movs	r2, #48	; 0x30
   11720:	0018      	movs	r0, r3
   11722:	4b08      	ldr	r3, [pc, #32]	; (11744 <saveMotorVoltageBypassSettings+0x40>)
   11724:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11726:	4b06      	ldr	r3, [pc, #24]	; (11740 <saveMotorVoltageBypassSettings+0x3c>)
   11728:	0019      	movs	r1, r3
   1172a:	201a      	movs	r0, #26
   1172c:	4b06      	ldr	r3, [pc, #24]	; (11748 <saveMotorVoltageBypassSettings+0x44>)
   1172e:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11730:	4b06      	ldr	r3, [pc, #24]	; (1174c <saveMotorVoltageBypassSettings+0x48>)
   11732:	4798      	blx	r3
}
   11734:	46c0      	nop			; (mov r8, r8)
   11736:	46bd      	mov	sp, r7
   11738:	b002      	add	sp, #8
   1173a:	bd80      	pop	{r7, pc}
   1173c:	20000654 	.word	0x20000654
   11740:	20000584 	.word	0x20000584
   11744:	00029881 	.word	0x00029881
   11748:	00024171 	.word	0x00024171
   1174c:	00024319 	.word	0x00024319

00011750 <saveMotorVoltageBypasssTimeSettings>:

void saveMotorVoltageBypasssTimeSettings(uint32_t value)
{
   11750:	b580      	push	{r7, lr}
   11752:	b082      	sub	sp, #8
   11754:	af00      	add	r7, sp, #0
   11756:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.motorVoltageBypassTime=value;
   11758:	4b09      	ldr	r3, [pc, #36]	; (11780 <saveMotorVoltageBypasssTimeSettings+0x30>)
   1175a:	687a      	ldr	r2, [r7, #4]
   1175c:	629a      	str	r2, [r3, #40]	; 0x28
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1175e:	4908      	ldr	r1, [pc, #32]	; (11780 <saveMotorVoltageBypasssTimeSettings+0x30>)
   11760:	4b08      	ldr	r3, [pc, #32]	; (11784 <saveMotorVoltageBypasssTimeSettings+0x34>)
   11762:	2230      	movs	r2, #48	; 0x30
   11764:	0018      	movs	r0, r3
   11766:	4b08      	ldr	r3, [pc, #32]	; (11788 <saveMotorVoltageBypasssTimeSettings+0x38>)
   11768:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1176a:	4b06      	ldr	r3, [pc, #24]	; (11784 <saveMotorVoltageBypasssTimeSettings+0x34>)
   1176c:	0019      	movs	r1, r3
   1176e:	201a      	movs	r0, #26
   11770:	4b06      	ldr	r3, [pc, #24]	; (1178c <saveMotorVoltageBypasssTimeSettings+0x3c>)
   11772:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11774:	4b06      	ldr	r3, [pc, #24]	; (11790 <saveMotorVoltageBypasssTimeSettings+0x40>)
   11776:	4798      	blx	r3
}
   11778:	46c0      	nop			; (mov r8, r8)
   1177a:	46bd      	mov	sp, r7
   1177c:	b002      	add	sp, #8
   1177e:	bd80      	pop	{r7, pc}
   11780:	20000654 	.word	0x20000654
   11784:	20000584 	.word	0x20000584
   11788:	00029881 	.word	0x00029881
   1178c:	00024171 	.word	0x00024171
   11790:	00024319 	.word	0x00024319

00011794 <saveMotorFeedbackDetectionSettings>:

void saveMotorFeedbackDetectionSettings(uint8_t motorFeedbackDetection)
{
   11794:	b580      	push	{r7, lr}
   11796:	b082      	sub	sp, #8
   11798:	af00      	add	r7, sp, #0
   1179a:	0002      	movs	r2, r0
   1179c:	1dfb      	adds	r3, r7, #7
   1179e:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.detectMotorFeedback = motorFeedbackDetection;
   117a0:	4b0a      	ldr	r3, [pc, #40]	; (117cc <saveMotorFeedbackDetectionSettings+0x38>)
   117a2:	1dfa      	adds	r2, r7, #7
   117a4:	2125      	movs	r1, #37	; 0x25
   117a6:	7812      	ldrb	r2, [r2, #0]
   117a8:	545a      	strb	r2, [r3, r1]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   117aa:	4908      	ldr	r1, [pc, #32]	; (117cc <saveMotorFeedbackDetectionSettings+0x38>)
   117ac:	4b08      	ldr	r3, [pc, #32]	; (117d0 <saveMotorFeedbackDetectionSettings+0x3c>)
   117ae:	2230      	movs	r2, #48	; 0x30
   117b0:	0018      	movs	r0, r3
   117b2:	4b08      	ldr	r3, [pc, #32]	; (117d4 <saveMotorFeedbackDetectionSettings+0x40>)
   117b4:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   117b6:	4b06      	ldr	r3, [pc, #24]	; (117d0 <saveMotorFeedbackDetectionSettings+0x3c>)
   117b8:	0019      	movs	r1, r3
   117ba:	201a      	movs	r0, #26
   117bc:	4b06      	ldr	r3, [pc, #24]	; (117d8 <saveMotorFeedbackDetectionSettings+0x44>)
   117be:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   117c0:	4b06      	ldr	r3, [pc, #24]	; (117dc <saveMotorFeedbackDetectionSettings+0x48>)
   117c2:	4798      	blx	r3
}
   117c4:	46c0      	nop			; (mov r8, r8)
   117c6:	46bd      	mov	sp, r7
   117c8:	b002      	add	sp, #8
   117ca:	bd80      	pop	{r7, pc}
   117cc:	20000654 	.word	0x20000654
   117d0:	20000584 	.word	0x20000584
   117d4:	00029881 	.word	0x00029881
   117d8:	00024171 	.word	0x00024171
   117dc:	00024319 	.word	0x00024319

000117e0 <calcCurrentValues>:


void calcCurrentValues(void)
{
   117e0:	b590      	push	{r4, r7, lr}
   117e2:	b083      	sub	sp, #12
   117e4:	af00      	add	r7, sp, #0
	uint16_t temp = (user_settings_parameter_struct.normalLoadAddress * (float)user_settings_parameter_struct.underloadPerAddress) / 100.0;
   117e6:	4b2b      	ldr	r3, [pc, #172]	; (11894 <calcCurrentValues+0xb4>)
   117e8:	691a      	ldr	r2, [r3, #16]
   117ea:	4b2b      	ldr	r3, [pc, #172]	; (11898 <calcCurrentValues+0xb8>)
   117ec:	0010      	movs	r0, r2
   117ee:	4798      	blx	r3
   117f0:	1c04      	adds	r4, r0, #0
   117f2:	4b28      	ldr	r3, [pc, #160]	; (11894 <calcCurrentValues+0xb4>)
   117f4:	7f1a      	ldrb	r2, [r3, #28]
   117f6:	4b28      	ldr	r3, [pc, #160]	; (11898 <calcCurrentValues+0xb8>)
   117f8:	0010      	movs	r0, r2
   117fa:	4798      	blx	r3
   117fc:	1c02      	adds	r2, r0, #0
   117fe:	4b27      	ldr	r3, [pc, #156]	; (1189c <calcCurrentValues+0xbc>)
   11800:	1c11      	adds	r1, r2, #0
   11802:	1c20      	adds	r0, r4, #0
   11804:	4798      	blx	r3
   11806:	1c03      	adds	r3, r0, #0
   11808:	1c1a      	adds	r2, r3, #0
   1180a:	4b25      	ldr	r3, [pc, #148]	; (118a0 <calcCurrentValues+0xc0>)
   1180c:	1c10      	adds	r0, r2, #0
   1180e:	4798      	blx	r3
   11810:	4c24      	ldr	r4, [pc, #144]	; (118a4 <calcCurrentValues+0xc4>)
   11812:	2200      	movs	r2, #0
   11814:	4b24      	ldr	r3, [pc, #144]	; (118a8 <calcCurrentValues+0xc8>)
   11816:	47a0      	blx	r4
   11818:	0003      	movs	r3, r0
   1181a:	000c      	movs	r4, r1
   1181c:	0019      	movs	r1, r3
   1181e:	0022      	movs	r2, r4
   11820:	1dbc      	adds	r4, r7, #6
   11822:	4b22      	ldr	r3, [pc, #136]	; (118ac <calcCurrentValues+0xcc>)
   11824:	0008      	movs	r0, r1
   11826:	0011      	movs	r1, r2
   11828:	4798      	blx	r3
   1182a:	0003      	movs	r3, r0
   1182c:	8023      	strh	r3, [r4, #0]
	setUnderloadValue(temp);
   1182e:	1dbb      	adds	r3, r7, #6
   11830:	881b      	ldrh	r3, [r3, #0]
   11832:	0018      	movs	r0, r3
   11834:	4b1e      	ldr	r3, [pc, #120]	; (118b0 <calcCurrentValues+0xd0>)
   11836:	4798      	blx	r3

	temp = (user_settings_parameter_struct.normalLoadAddress * (float)user_settings_parameter_struct.overloadPerAddress) / 100.0;
   11838:	4b16      	ldr	r3, [pc, #88]	; (11894 <calcCurrentValues+0xb4>)
   1183a:	691a      	ldr	r2, [r3, #16]
   1183c:	4b16      	ldr	r3, [pc, #88]	; (11898 <calcCurrentValues+0xb8>)
   1183e:	0010      	movs	r0, r2
   11840:	4798      	blx	r3
   11842:	1c04      	adds	r4, r0, #0
   11844:	4b13      	ldr	r3, [pc, #76]	; (11894 <calcCurrentValues+0xb4>)
   11846:	7f5a      	ldrb	r2, [r3, #29]
   11848:	4b13      	ldr	r3, [pc, #76]	; (11898 <calcCurrentValues+0xb8>)
   1184a:	0010      	movs	r0, r2
   1184c:	4798      	blx	r3
   1184e:	1c02      	adds	r2, r0, #0
   11850:	4b12      	ldr	r3, [pc, #72]	; (1189c <calcCurrentValues+0xbc>)
   11852:	1c11      	adds	r1, r2, #0
   11854:	1c20      	adds	r0, r4, #0
   11856:	4798      	blx	r3
   11858:	1c03      	adds	r3, r0, #0
   1185a:	1c1a      	adds	r2, r3, #0
   1185c:	4b10      	ldr	r3, [pc, #64]	; (118a0 <calcCurrentValues+0xc0>)
   1185e:	1c10      	adds	r0, r2, #0
   11860:	4798      	blx	r3
   11862:	4c10      	ldr	r4, [pc, #64]	; (118a4 <calcCurrentValues+0xc4>)
   11864:	2200      	movs	r2, #0
   11866:	4b10      	ldr	r3, [pc, #64]	; (118a8 <calcCurrentValues+0xc8>)
   11868:	47a0      	blx	r4
   1186a:	0003      	movs	r3, r0
   1186c:	000c      	movs	r4, r1
   1186e:	0019      	movs	r1, r3
   11870:	0022      	movs	r2, r4
   11872:	1dbc      	adds	r4, r7, #6
   11874:	4b0d      	ldr	r3, [pc, #52]	; (118ac <calcCurrentValues+0xcc>)
   11876:	0008      	movs	r0, r1
   11878:	0011      	movs	r1, r2
   1187a:	4798      	blx	r3
   1187c:	0003      	movs	r3, r0
   1187e:	8023      	strh	r3, [r4, #0]
	setOverloadValue(temp);
   11880:	1dbb      	adds	r3, r7, #6
   11882:	881b      	ldrh	r3, [r3, #0]
   11884:	0018      	movs	r0, r3
   11886:	4b0b      	ldr	r3, [pc, #44]	; (118b4 <calcCurrentValues+0xd4>)
   11888:	4798      	blx	r3
}
   1188a:	46c0      	nop			; (mov r8, r8)
   1188c:	46bd      	mov	sp, r7
   1188e:	b003      	add	sp, #12
   11890:	bd90      	pop	{r4, r7, pc}
   11892:	46c0      	nop			; (mov r8, r8)
   11894:	20000654 	.word	0x20000654
   11898:	00027ac9 	.word	0x00027ac9
   1189c:	000277e9 	.word	0x000277e9
   118a0:	000296a5 	.word	0x000296a5
   118a4:	00028175 	.word	0x00028175
   118a8:	40590000 	.word	0x40590000
   118ac:	00027079 	.word	0x00027079
   118b0:	000118b9 	.word	0x000118b9
   118b4:	000118fd 	.word	0x000118fd

000118b8 <setUnderloadValue>:

void setUnderloadValue(uint32_t underValue)
{
   118b8:	b580      	push	{r7, lr}
   118ba:	b082      	sub	sp, #8
   118bc:	af00      	add	r7, sp, #0
   118be:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.underloadAddress = underValue;
   118c0:	4b09      	ldr	r3, [pc, #36]	; (118e8 <setUnderloadValue+0x30>)
   118c2:	687a      	ldr	r2, [r7, #4]
   118c4:	619a      	str	r2, [r3, #24]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   118c6:	4908      	ldr	r1, [pc, #32]	; (118e8 <setUnderloadValue+0x30>)
   118c8:	4b08      	ldr	r3, [pc, #32]	; (118ec <setUnderloadValue+0x34>)
   118ca:	2230      	movs	r2, #48	; 0x30
   118cc:	0018      	movs	r0, r3
   118ce:	4b08      	ldr	r3, [pc, #32]	; (118f0 <setUnderloadValue+0x38>)
   118d0:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   118d2:	4b06      	ldr	r3, [pc, #24]	; (118ec <setUnderloadValue+0x34>)
   118d4:	0019      	movs	r1, r3
   118d6:	201a      	movs	r0, #26
   118d8:	4b06      	ldr	r3, [pc, #24]	; (118f4 <setUnderloadValue+0x3c>)
   118da:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   118dc:	4b06      	ldr	r3, [pc, #24]	; (118f8 <setUnderloadValue+0x40>)
   118de:	4798      	blx	r3
}
   118e0:	46c0      	nop			; (mov r8, r8)
   118e2:	46bd      	mov	sp, r7
   118e4:	b002      	add	sp, #8
   118e6:	bd80      	pop	{r7, pc}
   118e8:	20000654 	.word	0x20000654
   118ec:	20000584 	.word	0x20000584
   118f0:	00029881 	.word	0x00029881
   118f4:	00024171 	.word	0x00024171
   118f8:	00024319 	.word	0x00024319

000118fc <setOverloadValue>:

void setOverloadValue(uint32_t overValue)
{
   118fc:	b580      	push	{r7, lr}
   118fe:	b082      	sub	sp, #8
   11900:	af00      	add	r7, sp, #0
   11902:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.overloadAddress = overValue;
   11904:	4b09      	ldr	r3, [pc, #36]	; (1192c <setOverloadValue+0x30>)
   11906:	687a      	ldr	r2, [r7, #4]
   11908:	615a      	str	r2, [r3, #20]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1190a:	4908      	ldr	r1, [pc, #32]	; (1192c <setOverloadValue+0x30>)
   1190c:	4b08      	ldr	r3, [pc, #32]	; (11930 <setOverloadValue+0x34>)
   1190e:	2230      	movs	r2, #48	; 0x30
   11910:	0018      	movs	r0, r3
   11912:	4b08      	ldr	r3, [pc, #32]	; (11934 <setOverloadValue+0x38>)
   11914:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11916:	4b06      	ldr	r3, [pc, #24]	; (11930 <setOverloadValue+0x34>)
   11918:	0019      	movs	r1, r3
   1191a:	201a      	movs	r0, #26
   1191c:	4b06      	ldr	r3, [pc, #24]	; (11938 <setOverloadValue+0x3c>)
   1191e:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11920:	4b06      	ldr	r3, [pc, #24]	; (1193c <setOverloadValue+0x40>)
   11922:	4798      	blx	r3
}
   11924:	46c0      	nop			; (mov r8, r8)
   11926:	46bd      	mov	sp, r7
   11928:	b002      	add	sp, #8
   1192a:	bd80      	pop	{r7, pc}
   1192c:	20000654 	.word	0x20000654
   11930:	20000584 	.word	0x20000584
   11934:	00029881 	.word	0x00029881
   11938:	00024171 	.word	0x00024171
   1193c:	00024319 	.word	0x00024319

00011940 <setNormalLoadValue>:

void setNormalLoadValue(uint32_t normalVal)
{
   11940:	b580      	push	{r7, lr}
   11942:	b082      	sub	sp, #8
   11944:	af00      	add	r7, sp, #0
   11946:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.normalLoadAddress = normalVal;
   11948:	4b09      	ldr	r3, [pc, #36]	; (11970 <setNormalLoadValue+0x30>)
   1194a:	687a      	ldr	r2, [r7, #4]
   1194c:	611a      	str	r2, [r3, #16]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1194e:	4908      	ldr	r1, [pc, #32]	; (11970 <setNormalLoadValue+0x30>)
   11950:	4b08      	ldr	r3, [pc, #32]	; (11974 <setNormalLoadValue+0x34>)
   11952:	2230      	movs	r2, #48	; 0x30
   11954:	0018      	movs	r0, r3
   11956:	4b08      	ldr	r3, [pc, #32]	; (11978 <setNormalLoadValue+0x38>)
   11958:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1195a:	4b06      	ldr	r3, [pc, #24]	; (11974 <setNormalLoadValue+0x34>)
   1195c:	0019      	movs	r1, r3
   1195e:	201a      	movs	r0, #26
   11960:	4b06      	ldr	r3, [pc, #24]	; (1197c <setNormalLoadValue+0x3c>)
   11962:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11964:	4b06      	ldr	r3, [pc, #24]	; (11980 <setNormalLoadValue+0x40>)
   11966:	4798      	blx	r3
}
   11968:	46c0      	nop			; (mov r8, r8)
   1196a:	46bd      	mov	sp, r7
   1196c:	b002      	add	sp, #8
   1196e:	bd80      	pop	{r7, pc}
   11970:	20000654 	.word	0x20000654
   11974:	20000584 	.word	0x20000584
   11978:	00029881 	.word	0x00029881
   1197c:	00024171 	.word	0x00024171
   11980:	00024319 	.word	0x00024319

00011984 <setCurrentDetection>:

void setCurrentDetection(bool cValue)
{
   11984:	b580      	push	{r7, lr}
   11986:	b082      	sub	sp, #8
   11988:	af00      	add	r7, sp, #0
   1198a:	0002      	movs	r2, r0
   1198c:	1dfb      	adds	r3, r7, #7
   1198e:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.currentDetectionAddress = cValue;
   11990:	1dfb      	adds	r3, r7, #7
   11992:	781a      	ldrb	r2, [r3, #0]
   11994:	4b09      	ldr	r3, [pc, #36]	; (119bc <setCurrentDetection+0x38>)
   11996:	73da      	strb	r2, [r3, #15]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11998:	4908      	ldr	r1, [pc, #32]	; (119bc <setCurrentDetection+0x38>)
   1199a:	4b09      	ldr	r3, [pc, #36]	; (119c0 <setCurrentDetection+0x3c>)
   1199c:	2230      	movs	r2, #48	; 0x30
   1199e:	0018      	movs	r0, r3
   119a0:	4b08      	ldr	r3, [pc, #32]	; (119c4 <setCurrentDetection+0x40>)
   119a2:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   119a4:	4b06      	ldr	r3, [pc, #24]	; (119c0 <setCurrentDetection+0x3c>)
   119a6:	0019      	movs	r1, r3
   119a8:	201a      	movs	r0, #26
   119aa:	4b07      	ldr	r3, [pc, #28]	; (119c8 <setCurrentDetection+0x44>)
   119ac:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   119ae:	4b07      	ldr	r3, [pc, #28]	; (119cc <setCurrentDetection+0x48>)
   119b0:	4798      	blx	r3
}
   119b2:	46c0      	nop			; (mov r8, r8)
   119b4:	46bd      	mov	sp, r7
   119b6:	b002      	add	sp, #8
   119b8:	bd80      	pop	{r7, pc}
   119ba:	46c0      	nop			; (mov r8, r8)
   119bc:	20000654 	.word	0x20000654
   119c0:	20000584 	.word	0x20000584
   119c4:	00029881 	.word	0x00029881
   119c8:	00024171 	.word	0x00024171
   119cc:	00024319 	.word	0x00024319

000119d0 <saveStarDeltaTimer>:
	//strcpy(deviceID,factory_settings_parameter_struct.DeviceID_ee);
	return deviceID;
}

void saveStarDeltaTimer(uint16_t StartDeltaTime)
{
   119d0:	b580      	push	{r7, lr}
   119d2:	b082      	sub	sp, #8
   119d4:	af00      	add	r7, sp, #0
   119d6:	0002      	movs	r2, r0
   119d8:	1dbb      	adds	r3, r7, #6
   119da:	801a      	strh	r2, [r3, #0]
	user_settings_parameter_struct.starDeltaTimerAddress = StartDeltaTime;
   119dc:	4b0a      	ldr	r3, [pc, #40]	; (11a08 <saveStarDeltaTimer+0x38>)
   119de:	1dba      	adds	r2, r7, #6
   119e0:	8812      	ldrh	r2, [r2, #0]
   119e2:	80da      	strh	r2, [r3, #6]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   119e4:	4908      	ldr	r1, [pc, #32]	; (11a08 <saveStarDeltaTimer+0x38>)
   119e6:	4b09      	ldr	r3, [pc, #36]	; (11a0c <saveStarDeltaTimer+0x3c>)
   119e8:	2230      	movs	r2, #48	; 0x30
   119ea:	0018      	movs	r0, r3
   119ec:	4b08      	ldr	r3, [pc, #32]	; (11a10 <saveStarDeltaTimer+0x40>)
   119ee:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   119f0:	4b06      	ldr	r3, [pc, #24]	; (11a0c <saveStarDeltaTimer+0x3c>)
   119f2:	0019      	movs	r1, r3
   119f4:	201a      	movs	r0, #26
   119f6:	4b07      	ldr	r3, [pc, #28]	; (11a14 <saveStarDeltaTimer+0x44>)
   119f8:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   119fa:	4b07      	ldr	r3, [pc, #28]	; (11a18 <saveStarDeltaTimer+0x48>)
   119fc:	4798      	blx	r3
}
   119fe:	46c0      	nop			; (mov r8, r8)
   11a00:	46bd      	mov	sp, r7
   11a02:	b002      	add	sp, #8
   11a04:	bd80      	pop	{r7, pc}
   11a06:	46c0      	nop			; (mov r8, r8)
   11a08:	20000654 	.word	0x20000654
   11a0c:	20000584 	.word	0x20000584
   11a10:	00029881 	.word	0x00029881
   11a14:	00024171 	.word	0x00024171
   11a18:	00024319 	.word	0x00024319

00011a1c <saveEventStageSettings>:

void saveEventStageSettings(uint8_t data)
{
   11a1c:	b580      	push	{r7, lr}
   11a1e:	b082      	sub	sp, #8
   11a20:	af00      	add	r7, sp, #0
   11a22:	0002      	movs	r2, r0
   11a24:	1dfb      	adds	r3, r7, #7
   11a26:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.eventStageAddress = data;
   11a28:	4b0a      	ldr	r3, [pc, #40]	; (11a54 <saveEventStageSettings+0x38>)
   11a2a:	1dfa      	adds	r2, r7, #7
   11a2c:	7812      	ldrb	r2, [r2, #0]
   11a2e:	721a      	strb	r2, [r3, #8]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11a30:	4908      	ldr	r1, [pc, #32]	; (11a54 <saveEventStageSettings+0x38>)
   11a32:	4b09      	ldr	r3, [pc, #36]	; (11a58 <saveEventStageSettings+0x3c>)
   11a34:	2230      	movs	r2, #48	; 0x30
   11a36:	0018      	movs	r0, r3
   11a38:	4b08      	ldr	r3, [pc, #32]	; (11a5c <saveEventStageSettings+0x40>)
   11a3a:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11a3c:	4b06      	ldr	r3, [pc, #24]	; (11a58 <saveEventStageSettings+0x3c>)
   11a3e:	0019      	movs	r1, r3
   11a40:	201a      	movs	r0, #26
   11a42:	4b07      	ldr	r3, [pc, #28]	; (11a60 <saveEventStageSettings+0x44>)
   11a44:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11a46:	4b07      	ldr	r3, [pc, #28]	; (11a64 <saveEventStageSettings+0x48>)
   11a48:	4798      	blx	r3
}
   11a4a:	46c0      	nop			; (mov r8, r8)
   11a4c:	46bd      	mov	sp, r7
   11a4e:	b002      	add	sp, #8
   11a50:	bd80      	pop	{r7, pc}
   11a52:	46c0      	nop			; (mov r8, r8)
   11a54:	20000654 	.word	0x20000654
   11a58:	20000584 	.word	0x20000584
   11a5c:	00029881 	.word	0x00029881
   11a60:	00024171 	.word	0x00024171
   11a64:	00024319 	.word	0x00024319

00011a68 <isAdmin>:

bool isAdmin(char *number)
{
   11a68:	b580      	push	{r7, lr}
   11a6a:	b08a      	sub	sp, #40	; 0x28
   11a6c:	af00      	add	r7, sp, #0
   11a6e:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<5;i++)
   11a70:	2327      	movs	r3, #39	; 0x27
   11a72:	18fb      	adds	r3, r7, r3
   11a74:	2200      	movs	r2, #0
   11a76:	701a      	strb	r2, [r3, #0]
   11a78:	e02b      	b.n	11ad2 <isAdmin+0x6a>
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
   11a7a:	4b1b      	ldr	r3, [pc, #108]	; (11ae8 <isAdmin+0x80>)
   11a7c:	223c      	movs	r2, #60	; 0x3c
   11a7e:	2100      	movs	r1, #0
   11a80:	0018      	movs	r0, r3
   11a82:	4b1a      	ldr	r3, [pc, #104]	; (11aec <isAdmin+0x84>)
   11a84:	4798      	blx	r3
		eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE+i, page_data);
   11a86:	2327      	movs	r3, #39	; 0x27
   11a88:	18fb      	adds	r3, r7, r3
   11a8a:	781b      	ldrb	r3, [r3, #0]
   11a8c:	3303      	adds	r3, #3
   11a8e:	b2db      	uxtb	r3, r3
   11a90:	4a15      	ldr	r2, [pc, #84]	; (11ae8 <isAdmin+0x80>)
   11a92:	0011      	movs	r1, r2
   11a94:	0018      	movs	r0, r3
   11a96:	4b16      	ldr	r3, [pc, #88]	; (11af0 <isAdmin+0x88>)
   11a98:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
   11a9a:	230c      	movs	r3, #12
   11a9c:	18fa      	adds	r2, r7, r3
   11a9e:	4b12      	ldr	r3, [pc, #72]	; (11ae8 <isAdmin+0x80>)
   11aa0:	0010      	movs	r0, r2
   11aa2:	0019      	movs	r1, r3
   11aa4:	2318      	movs	r3, #24
   11aa6:	001a      	movs	r2, r3
   11aa8:	4b12      	ldr	r3, [pc, #72]	; (11af4 <isAdmin+0x8c>)
   11aaa:	4798      	blx	r3
		
		if (strstr(number,mobile_no.mobile_no_ee))
   11aac:	230c      	movs	r3, #12
   11aae:	18fb      	adds	r3, r7, r3
   11ab0:	1d1a      	adds	r2, r3, #4
   11ab2:	687b      	ldr	r3, [r7, #4]
   11ab4:	0011      	movs	r1, r2
   11ab6:	0018      	movs	r0, r3
   11ab8:	4b0f      	ldr	r3, [pc, #60]	; (11af8 <isAdmin+0x90>)
   11aba:	4798      	blx	r3
   11abc:	1e03      	subs	r3, r0, #0
   11abe:	d001      	beq.n	11ac4 <isAdmin+0x5c>
		{
			return true;
   11ac0:	2301      	movs	r3, #1
   11ac2:	e00c      	b.n	11ade <isAdmin+0x76>
	for (uint8_t i=0;i<5;i++)
   11ac4:	2327      	movs	r3, #39	; 0x27
   11ac6:	18fb      	adds	r3, r7, r3
   11ac8:	781a      	ldrb	r2, [r3, #0]
   11aca:	2327      	movs	r3, #39	; 0x27
   11acc:	18fb      	adds	r3, r7, r3
   11ace:	3201      	adds	r2, #1
   11ad0:	701a      	strb	r2, [r3, #0]
   11ad2:	2327      	movs	r3, #39	; 0x27
   11ad4:	18fb      	adds	r3, r7, r3
   11ad6:	781b      	ldrb	r3, [r3, #0]
   11ad8:	2b04      	cmp	r3, #4
   11ada:	d9ce      	bls.n	11a7a <isAdmin+0x12>
		}
	}
	return false;
   11adc:	2300      	movs	r3, #0
}
   11ade:	0018      	movs	r0, r3
   11ae0:	46bd      	mov	sp, r7
   11ae2:	b00a      	add	sp, #40	; 0x28
   11ae4:	bd80      	pop	{r7, pc}
   11ae6:	46c0      	nop			; (mov r8, r8)
   11ae8:	20000584 	.word	0x20000584
   11aec:	000298b7 	.word	0x000298b7
   11af0:	0002427d 	.word	0x0002427d
   11af4:	00029881 	.word	0x00029881
   11af8:	00029b77 	.word	0x00029b77

00011afc <setPrimaryNumberIndex>:


void setPrimaryNumberIndex(uint8_t index)
{
   11afc:	b580      	push	{r7, lr}
   11afe:	b082      	sub	sp, #8
   11b00:	af00      	add	r7, sp, #0
   11b02:	0002      	movs	r2, r0
   11b04:	1dfb      	adds	r3, r7, #7
   11b06:	701a      	strb	r2, [r3, #0]
	user_count_struct.primaryNumberIndex = index;
   11b08:	4b0b      	ldr	r3, [pc, #44]	; (11b38 <setPrimaryNumberIndex+0x3c>)
   11b0a:	1dfa      	adds	r2, r7, #7
   11b0c:	7812      	ldrb	r2, [r2, #0]
   11b0e:	70da      	strb	r2, [r3, #3]
	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   11b10:	4a0a      	ldr	r2, [pc, #40]	; (11b3c <setPrimaryNumberIndex+0x40>)
   11b12:	4b09      	ldr	r3, [pc, #36]	; (11b38 <setPrimaryNumberIndex+0x3c>)
   11b14:	0010      	movs	r0, r2
   11b16:	0019      	movs	r1, r3
   11b18:	2308      	movs	r3, #8
   11b1a:	001a      	movs	r2, r3
   11b1c:	4b08      	ldr	r3, [pc, #32]	; (11b40 <setPrimaryNumberIndex+0x44>)
   11b1e:	4798      	blx	r3
	eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   11b20:	4b06      	ldr	r3, [pc, #24]	; (11b3c <setPrimaryNumberIndex+0x40>)
   11b22:	0019      	movs	r1, r3
   11b24:	2008      	movs	r0, #8
   11b26:	4b07      	ldr	r3, [pc, #28]	; (11b44 <setPrimaryNumberIndex+0x48>)
   11b28:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11b2a:	4b07      	ldr	r3, [pc, #28]	; (11b48 <setPrimaryNumberIndex+0x4c>)
   11b2c:	4798      	blx	r3

}
   11b2e:	46c0      	nop			; (mov r8, r8)
   11b30:	46bd      	mov	sp, r7
   11b32:	b002      	add	sp, #8
   11b34:	bd80      	pop	{r7, pc}
   11b36:	46c0      	nop			; (mov r8, r8)
   11b38:	20000614 	.word	0x20000614
   11b3c:	20000584 	.word	0x20000584
   11b40:	00029881 	.word	0x00029881
   11b44:	00024171 	.word	0x00024171
   11b48:	00024319 	.word	0x00024319

00011b4c <setSecondaryNumberIndex>:

void setSecondaryNumberIndex(uint8_t index)
{
   11b4c:	b580      	push	{r7, lr}
   11b4e:	b082      	sub	sp, #8
   11b50:	af00      	add	r7, sp, #0
   11b52:	0002      	movs	r2, r0
   11b54:	1dfb      	adds	r3, r7, #7
   11b56:	701a      	strb	r2, [r3, #0]
	user_count_struct.secondaryNumberIndex = index;
   11b58:	4b0b      	ldr	r3, [pc, #44]	; (11b88 <setSecondaryNumberIndex+0x3c>)
   11b5a:	1dfa      	adds	r2, r7, #7
   11b5c:	7812      	ldrb	r2, [r2, #0]
   11b5e:	711a      	strb	r2, [r3, #4]
	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   11b60:	4a0a      	ldr	r2, [pc, #40]	; (11b8c <setSecondaryNumberIndex+0x40>)
   11b62:	4b09      	ldr	r3, [pc, #36]	; (11b88 <setSecondaryNumberIndex+0x3c>)
   11b64:	0010      	movs	r0, r2
   11b66:	0019      	movs	r1, r3
   11b68:	2308      	movs	r3, #8
   11b6a:	001a      	movs	r2, r3
   11b6c:	4b08      	ldr	r3, [pc, #32]	; (11b90 <setSecondaryNumberIndex+0x44>)
   11b6e:	4798      	blx	r3
	eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   11b70:	4b06      	ldr	r3, [pc, #24]	; (11b8c <setSecondaryNumberIndex+0x40>)
   11b72:	0019      	movs	r1, r3
   11b74:	2008      	movs	r0, #8
   11b76:	4b07      	ldr	r3, [pc, #28]	; (11b94 <setSecondaryNumberIndex+0x48>)
   11b78:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11b7a:	4b07      	ldr	r3, [pc, #28]	; (11b98 <setSecondaryNumberIndex+0x4c>)
   11b7c:	4798      	blx	r3
}
   11b7e:	46c0      	nop			; (mov r8, r8)
   11b80:	46bd      	mov	sp, r7
   11b82:	b002      	add	sp, #8
   11b84:	bd80      	pop	{r7, pc}
   11b86:	46c0      	nop			; (mov r8, r8)
   11b88:	20000614 	.word	0x20000614
   11b8c:	20000584 	.word	0x20000584
   11b90:	00029881 	.word	0x00029881
   11b94:	00024171 	.word	0x00024171
   11b98:	00024319 	.word	0x00024319

00011b9c <addPrimaryIndexedNumber>:

bool addPrimaryIndexedNumber(char *number)
{
   11b9c:	b590      	push	{r4, r7, lr}
   11b9e:	b085      	sub	sp, #20
   11ba0:	af00      	add	r7, sp, #0
   11ba2:	6078      	str	r0, [r7, #4]
	//checkUserExists would return a 1 based index,starting at 1 and not at 0
	uint8_t index = checkExists(number);
   11ba4:	230e      	movs	r3, #14
   11ba6:	18fc      	adds	r4, r7, r3
   11ba8:	687b      	ldr	r3, [r7, #4]
   11baa:	0018      	movs	r0, r3
   11bac:	4b21      	ldr	r3, [pc, #132]	; (11c34 <addPrimaryIndexedNumber+0x98>)
   11bae:	4798      	blx	r3
   11bb0:	0003      	movs	r3, r0
   11bb2:	7023      	strb	r3, [r4, #0]

	uint8_t newPrimaryIndex=0xFF;
   11bb4:	230f      	movs	r3, #15
   11bb6:	18fb      	adds	r3, r7, r3
   11bb8:	22ff      	movs	r2, #255	; 0xff
   11bba:	701a      	strb	r2, [r3, #0]
	if(index >= user_count_struct.total_user_no_count)								//the numebr does not exists, need to add it
   11bbc:	4b1e      	ldr	r3, [pc, #120]	; (11c38 <addPrimaryIndexedNumber+0x9c>)
   11bbe:	785b      	ldrb	r3, [r3, #1]
   11bc0:	220e      	movs	r2, #14
   11bc2:	18ba      	adds	r2, r7, r2
   11bc4:	7812      	ldrb	r2, [r2, #0]
   11bc6:	429a      	cmp	r2, r3
   11bc8:	d309      	bcc.n	11bde <addPrimaryIndexedNumber+0x42>
	{
		newPrimaryIndex = user_count_struct.current_user_no_count;
   11bca:	230f      	movs	r3, #15
   11bcc:	18fb      	adds	r3, r7, r3
   11bce:	4a1a      	ldr	r2, [pc, #104]	; (11c38 <addPrimaryIndexedNumber+0x9c>)
   11bd0:	7892      	ldrb	r2, [r2, #2]
   11bd2:	701a      	strb	r2, [r3, #0]
		addNumber(number);
   11bd4:	687b      	ldr	r3, [r7, #4]
   11bd6:	0018      	movs	r0, r3
   11bd8:	4b18      	ldr	r3, [pc, #96]	; (11c3c <addPrimaryIndexedNumber+0xa0>)
   11bda:	4798      	blx	r3
   11bdc:	e00c      	b.n	11bf8 <addPrimaryIndexedNumber+0x5c>
	}
	else if(index<user_count_struct.total_user_no_count)
   11bde:	4b16      	ldr	r3, [pc, #88]	; (11c38 <addPrimaryIndexedNumber+0x9c>)
   11be0:	785b      	ldrb	r3, [r3, #1]
   11be2:	220e      	movs	r2, #14
   11be4:	18ba      	adds	r2, r7, r2
   11be6:	7812      	ldrb	r2, [r2, #0]
   11be8:	429a      	cmp	r2, r3
   11bea:	d205      	bcs.n	11bf8 <addPrimaryIndexedNumber+0x5c>
	{
		newPrimaryIndex = index;
   11bec:	230f      	movs	r3, #15
   11bee:	18fb      	adds	r3, r7, r3
   11bf0:	220e      	movs	r2, #14
   11bf2:	18ba      	adds	r2, r7, r2
   11bf4:	7812      	ldrb	r2, [r2, #0]
   11bf6:	701a      	strb	r2, [r3, #0]
	}

	if(newPrimaryIndex < user_count_struct.total_user_no_count)
   11bf8:	4b0f      	ldr	r3, [pc, #60]	; (11c38 <addPrimaryIndexedNumber+0x9c>)
   11bfa:	785b      	ldrb	r3, [r3, #1]
   11bfc:	220f      	movs	r2, #15
   11bfe:	18ba      	adds	r2, r7, r2
   11c00:	7812      	ldrb	r2, [r2, #0]
   11c02:	429a      	cmp	r2, r3
   11c04:	d210      	bcs.n	11c28 <addPrimaryIndexedNumber+0x8c>
	{
		// if current numbers present are more than 1, than set the previous primary number as secondary number
		if (user_count_struct.current_user_no_count>1)
   11c06:	4b0c      	ldr	r3, [pc, #48]	; (11c38 <addPrimaryIndexedNumber+0x9c>)
   11c08:	789b      	ldrb	r3, [r3, #2]
   11c0a:	2b01      	cmp	r3, #1
   11c0c:	d904      	bls.n	11c18 <addPrimaryIndexedNumber+0x7c>
		{
			setSecondaryNumberIndex(user_count_struct.primaryNumberIndex);
   11c0e:	4b0a      	ldr	r3, [pc, #40]	; (11c38 <addPrimaryIndexedNumber+0x9c>)
   11c10:	78db      	ldrb	r3, [r3, #3]
   11c12:	0018      	movs	r0, r3
   11c14:	4b0a      	ldr	r3, [pc, #40]	; (11c40 <addPrimaryIndexedNumber+0xa4>)
   11c16:	4798      	blx	r3
		}
		
		setPrimaryNumberIndex(newPrimaryIndex);
   11c18:	230f      	movs	r3, #15
   11c1a:	18fb      	adds	r3, r7, r3
   11c1c:	781b      	ldrb	r3, [r3, #0]
   11c1e:	0018      	movs	r0, r3
   11c20:	4b08      	ldr	r3, [pc, #32]	; (11c44 <addPrimaryIndexedNumber+0xa8>)
   11c22:	4798      	blx	r3
		return true;
   11c24:	2301      	movs	r3, #1
   11c26:	e000      	b.n	11c2a <addPrimaryIndexedNumber+0x8e>
	}

	return false;
   11c28:	2300      	movs	r3, #0
}
   11c2a:	0018      	movs	r0, r3
   11c2c:	46bd      	mov	sp, r7
   11c2e:	b005      	add	sp, #20
   11c30:	bd90      	pop	{r4, r7, pc}
   11c32:	46c0      	nop			; (mov r8, r8)
   11c34:	00010de9 	.word	0x00010de9
   11c38:	20000614 	.word	0x20000614
   11c3c:	00010eed 	.word	0x00010eed
   11c40:	00011b4d 	.word	0x00011b4d
   11c44:	00011afd 	.word	0x00011afd

00011c48 <addSecondaryIndexedNumber>:

bool addSecondaryIndexedNumber(char *number)
{
   11c48:	b590      	push	{r4, r7, lr}
   11c4a:	b085      	sub	sp, #20
   11c4c:	af00      	add	r7, sp, #0
   11c4e:	6078      	str	r0, [r7, #4]
	//check if any 2 numbers are present in system one of which would be primary, than only allow to add secondary number
	if(user_count_struct.current_user_no_count<2)
   11c50:	4b21      	ldr	r3, [pc, #132]	; (11cd8 <addSecondaryIndexedNumber+0x90>)
   11c52:	789b      	ldrb	r3, [r3, #2]
   11c54:	2b01      	cmp	r3, #1
   11c56:	d801      	bhi.n	11c5c <addSecondaryIndexedNumber+0x14>
	return false;
   11c58:	2300      	movs	r3, #0
   11c5a:	e039      	b.n	11cd0 <addSecondaryIndexedNumber+0x88>

	//checkUserExists would return a 1 based index,starting at 1 and not at 0
	uint8_t index = checkExists(number);
   11c5c:	230e      	movs	r3, #14
   11c5e:	18fc      	adds	r4, r7, r3
   11c60:	687b      	ldr	r3, [r7, #4]
   11c62:	0018      	movs	r0, r3
   11c64:	4b1d      	ldr	r3, [pc, #116]	; (11cdc <addSecondaryIndexedNumber+0x94>)
   11c66:	4798      	blx	r3
   11c68:	0003      	movs	r3, r0
   11c6a:	7023      	strb	r3, [r4, #0]

	uint8_t newSecondaryIndex=0xFF;
   11c6c:	230f      	movs	r3, #15
   11c6e:	18fb      	adds	r3, r7, r3
   11c70:	22ff      	movs	r2, #255	; 0xff
   11c72:	701a      	strb	r2, [r3, #0]
	if(index >= user_count_struct.total_user_no_count)								//number not present, need to add the number
   11c74:	4b18      	ldr	r3, [pc, #96]	; (11cd8 <addSecondaryIndexedNumber+0x90>)
   11c76:	785b      	ldrb	r3, [r3, #1]
   11c78:	220e      	movs	r2, #14
   11c7a:	18ba      	adds	r2, r7, r2
   11c7c:	7812      	ldrb	r2, [r2, #0]
   11c7e:	429a      	cmp	r2, r3
   11c80:	d309      	bcc.n	11c96 <addSecondaryIndexedNumber+0x4e>
	{
		newSecondaryIndex = user_count_struct.current_user_no_count;
   11c82:	230f      	movs	r3, #15
   11c84:	18fb      	adds	r3, r7, r3
   11c86:	4a14      	ldr	r2, [pc, #80]	; (11cd8 <addSecondaryIndexedNumber+0x90>)
   11c88:	7892      	ldrb	r2, [r2, #2]
   11c8a:	701a      	strb	r2, [r3, #0]
		addNumber(number);
   11c8c:	687b      	ldr	r3, [r7, #4]
   11c8e:	0018      	movs	r0, r3
   11c90:	4b13      	ldr	r3, [pc, #76]	; (11ce0 <addSecondaryIndexedNumber+0x98>)
   11c92:	4798      	blx	r3
   11c94:	e00c      	b.n	11cb0 <addSecondaryIndexedNumber+0x68>
	}
	else if(index < user_count_struct.total_user_no_count)
   11c96:	4b10      	ldr	r3, [pc, #64]	; (11cd8 <addSecondaryIndexedNumber+0x90>)
   11c98:	785b      	ldrb	r3, [r3, #1]
   11c9a:	220e      	movs	r2, #14
   11c9c:	18ba      	adds	r2, r7, r2
   11c9e:	7812      	ldrb	r2, [r2, #0]
   11ca0:	429a      	cmp	r2, r3
   11ca2:	d205      	bcs.n	11cb0 <addSecondaryIndexedNumber+0x68>
	{
		newSecondaryIndex = index;
   11ca4:	230f      	movs	r3, #15
   11ca6:	18fb      	adds	r3, r7, r3
   11ca8:	220e      	movs	r2, #14
   11caa:	18ba      	adds	r2, r7, r2
   11cac:	7812      	ldrb	r2, [r2, #0]
   11cae:	701a      	strb	r2, [r3, #0]
	}

	if(newSecondaryIndex < user_count_struct.total_user_no_count)
   11cb0:	4b09      	ldr	r3, [pc, #36]	; (11cd8 <addSecondaryIndexedNumber+0x90>)
   11cb2:	785b      	ldrb	r3, [r3, #1]
   11cb4:	220f      	movs	r2, #15
   11cb6:	18ba      	adds	r2, r7, r2
   11cb8:	7812      	ldrb	r2, [r2, #0]
   11cba:	429a      	cmp	r2, r3
   11cbc:	d207      	bcs.n	11cce <addSecondaryIndexedNumber+0x86>
	{
		setSecondaryNumberIndex(newSecondaryIndex);
   11cbe:	230f      	movs	r3, #15
   11cc0:	18fb      	adds	r3, r7, r3
   11cc2:	781b      	ldrb	r3, [r3, #0]
   11cc4:	0018      	movs	r0, r3
   11cc6:	4b07      	ldr	r3, [pc, #28]	; (11ce4 <addSecondaryIndexedNumber+0x9c>)
   11cc8:	4798      	blx	r3
		return true;
   11cca:	2301      	movs	r3, #1
   11ccc:	e000      	b.n	11cd0 <addSecondaryIndexedNumber+0x88>
	}
	return false;
   11cce:	2300      	movs	r3, #0
}
   11cd0:	0018      	movs	r0, r3
   11cd2:	46bd      	mov	sp, r7
   11cd4:	b005      	add	sp, #20
   11cd6:	bd90      	pop	{r4, r7, pc}
   11cd8:	20000614 	.word	0x20000614
   11cdc:	00010de9 	.word	0x00010de9
   11ce0:	00010eed 	.word	0x00010eed
   11ce4:	00011b4d 	.word	0x00011b4d

00011ce8 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
   11ce8:	b580      	push	{r7, lr}
   11cea:	b082      	sub	sp, #8
   11cec:	af00      	add	r7, sp, #0
   11cee:	0002      	movs	r2, r0
   11cf0:	1dfb      	adds	r3, r7, #7
   11cf2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   11cf4:	4b06      	ldr	r3, [pc, #24]	; (11d10 <system_interrupt_enable+0x28>)
   11cf6:	1dfa      	adds	r2, r7, #7
   11cf8:	7812      	ldrb	r2, [r2, #0]
   11cfa:	0011      	movs	r1, r2
   11cfc:	221f      	movs	r2, #31
   11cfe:	400a      	ands	r2, r1
   11d00:	2101      	movs	r1, #1
   11d02:	4091      	lsls	r1, r2
   11d04:	000a      	movs	r2, r1
   11d06:	601a      	str	r2, [r3, #0]
}
   11d08:	46c0      	nop			; (mov r8, r8)
   11d0a:	46bd      	mov	sp, r7
   11d0c:	b002      	add	sp, #8
   11d0e:	bd80      	pop	{r7, pc}
   11d10:	e000e100 	.word	0xe000e100

00011d14 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   11d14:	b580      	push	{r7, lr}
   11d16:	b082      	sub	sp, #8
   11d18:	af00      	add	r7, sp, #0
   11d1a:	0002      	movs	r2, r0
   11d1c:	1dfb      	adds	r3, r7, #7
   11d1e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   11d20:	4a07      	ldr	r2, [pc, #28]	; (11d40 <system_interrupt_disable+0x2c>)
   11d22:	1dfb      	adds	r3, r7, #7
   11d24:	781b      	ldrb	r3, [r3, #0]
   11d26:	0019      	movs	r1, r3
   11d28:	231f      	movs	r3, #31
   11d2a:	400b      	ands	r3, r1
   11d2c:	2101      	movs	r1, #1
   11d2e:	4099      	lsls	r1, r3
   11d30:	000b      	movs	r3, r1
   11d32:	0019      	movs	r1, r3
   11d34:	2380      	movs	r3, #128	; 0x80
   11d36:	50d1      	str	r1, [r2, r3]
}
   11d38:	46c0      	nop			; (mov r8, r8)
   11d3a:	46bd      	mov	sp, r7
   11d3c:	b002      	add	sp, #8
   11d3e:	bd80      	pop	{r7, pc}
   11d40:	e000e100 	.word	0xe000e100

00011d44 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   11d44:	b580      	push	{r7, lr}
   11d46:	b084      	sub	sp, #16
   11d48:	af00      	add	r7, sp, #0
   11d4a:	0002      	movs	r2, r0
   11d4c:	1dfb      	adds	r3, r7, #7
   11d4e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   11d50:	230f      	movs	r3, #15
   11d52:	18fb      	adds	r3, r7, r3
   11d54:	1dfa      	adds	r2, r7, #7
   11d56:	7812      	ldrb	r2, [r2, #0]
   11d58:	09d2      	lsrs	r2, r2, #7
   11d5a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   11d5c:	230e      	movs	r3, #14
   11d5e:	18fb      	adds	r3, r7, r3
   11d60:	1dfa      	adds	r2, r7, #7
   11d62:	7812      	ldrb	r2, [r2, #0]
   11d64:	0952      	lsrs	r2, r2, #5
   11d66:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   11d68:	4b0d      	ldr	r3, [pc, #52]	; (11da0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   11d6a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   11d6c:	230f      	movs	r3, #15
   11d6e:	18fb      	adds	r3, r7, r3
   11d70:	781b      	ldrb	r3, [r3, #0]
   11d72:	2b00      	cmp	r3, #0
   11d74:	d10f      	bne.n	11d96 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   11d76:	230f      	movs	r3, #15
   11d78:	18fb      	adds	r3, r7, r3
   11d7a:	781b      	ldrb	r3, [r3, #0]
   11d7c:	009b      	lsls	r3, r3, #2
   11d7e:	2210      	movs	r2, #16
   11d80:	4694      	mov	ip, r2
   11d82:	44bc      	add	ip, r7
   11d84:	4463      	add	r3, ip
   11d86:	3b08      	subs	r3, #8
   11d88:	681a      	ldr	r2, [r3, #0]
   11d8a:	230e      	movs	r3, #14
   11d8c:	18fb      	adds	r3, r7, r3
   11d8e:	781b      	ldrb	r3, [r3, #0]
   11d90:	01db      	lsls	r3, r3, #7
   11d92:	18d3      	adds	r3, r2, r3
   11d94:	e000      	b.n	11d98 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   11d96:	2300      	movs	r3, #0
	}
}
   11d98:	0018      	movs	r0, r3
   11d9a:	46bd      	mov	sp, r7
   11d9c:	b004      	add	sp, #16
   11d9e:	bd80      	pop	{r7, pc}
   11da0:	41004400 	.word	0x41004400

00011da4 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   11da4:	b580      	push	{r7, lr}
   11da6:	b082      	sub	sp, #8
   11da8:	af00      	add	r7, sp, #0
   11daa:	0002      	movs	r2, r0
   11dac:	1dfb      	adds	r3, r7, #7
   11dae:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   11db0:	1dfb      	adds	r3, r7, #7
   11db2:	781b      	ldrb	r3, [r3, #0]
   11db4:	0018      	movs	r0, r3
   11db6:	4b03      	ldr	r3, [pc, #12]	; (11dc4 <port_get_group_from_gpio_pin+0x20>)
   11db8:	4798      	blx	r3
   11dba:	0003      	movs	r3, r0
}
   11dbc:	0018      	movs	r0, r3
   11dbe:	46bd      	mov	sp, r7
   11dc0:	b002      	add	sp, #8
   11dc2:	bd80      	pop	{r7, pc}
   11dc4:	00011d45 	.word	0x00011d45

00011dc8 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
   11dc8:	b580      	push	{r7, lr}
   11dca:	b082      	sub	sp, #8
   11dcc:	af00      	add	r7, sp, #0
   11dce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
   11dd0:	687b      	ldr	r3, [r7, #4]
   11dd2:	2200      	movs	r2, #0
   11dd4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   11dd6:	687b      	ldr	r3, [r7, #4]
   11dd8:	2201      	movs	r2, #1
   11dda:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   11ddc:	687b      	ldr	r3, [r7, #4]
   11dde:	2200      	movs	r2, #0
   11de0:	709a      	strb	r2, [r3, #2]
}
   11de2:	46c0      	nop			; (mov r8, r8)
   11de4:	46bd      	mov	sp, r7
   11de6:	b002      	add	sp, #8
   11de8:	bd80      	pop	{r7, pc}
	...

00011dec <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
   11dec:	b580      	push	{r7, lr}
   11dee:	b084      	sub	sp, #16
   11df0:	af00      	add	r7, sp, #0
   11df2:	0002      	movs	r2, r0
   11df4:	1dfb      	adds	r3, r7, #7
   11df6:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   11df8:	1dfb      	adds	r3, r7, #7
   11dfa:	781b      	ldrb	r3, [r3, #0]
   11dfc:	0018      	movs	r0, r3
   11dfe:	4b0b      	ldr	r3, [pc, #44]	; (11e2c <port_pin_get_input_level+0x40>)
   11e00:	4798      	blx	r3
   11e02:	0003      	movs	r3, r0
   11e04:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   11e06:	1dfb      	adds	r3, r7, #7
   11e08:	781b      	ldrb	r3, [r3, #0]
   11e0a:	221f      	movs	r2, #31
   11e0c:	4013      	ands	r3, r2
   11e0e:	2201      	movs	r2, #1
   11e10:	409a      	lsls	r2, r3
   11e12:	0013      	movs	r3, r2
   11e14:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
   11e16:	68fb      	ldr	r3, [r7, #12]
   11e18:	6a1b      	ldr	r3, [r3, #32]
   11e1a:	68ba      	ldr	r2, [r7, #8]
   11e1c:	4013      	ands	r3, r2
   11e1e:	1e5a      	subs	r2, r3, #1
   11e20:	4193      	sbcs	r3, r2
   11e22:	b2db      	uxtb	r3, r3
}
   11e24:	0018      	movs	r0, r3
   11e26:	46bd      	mov	sp, r7
   11e28:	b004      	add	sp, #16
   11e2a:	bd80      	pop	{r7, pc}
   11e2c:	00011da5 	.word	0x00011da5

00011e30 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   11e30:	b580      	push	{r7, lr}
   11e32:	b084      	sub	sp, #16
   11e34:	af00      	add	r7, sp, #0
   11e36:	0002      	movs	r2, r0
   11e38:	1dfb      	adds	r3, r7, #7
   11e3a:	701a      	strb	r2, [r3, #0]
   11e3c:	1dbb      	adds	r3, r7, #6
   11e3e:	1c0a      	adds	r2, r1, #0
   11e40:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   11e42:	1dfb      	adds	r3, r7, #7
   11e44:	781b      	ldrb	r3, [r3, #0]
   11e46:	0018      	movs	r0, r3
   11e48:	4b0d      	ldr	r3, [pc, #52]	; (11e80 <port_pin_set_output_level+0x50>)
   11e4a:	4798      	blx	r3
   11e4c:	0003      	movs	r3, r0
   11e4e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   11e50:	1dfb      	adds	r3, r7, #7
   11e52:	781b      	ldrb	r3, [r3, #0]
   11e54:	221f      	movs	r2, #31
   11e56:	4013      	ands	r3, r2
   11e58:	2201      	movs	r2, #1
   11e5a:	409a      	lsls	r2, r3
   11e5c:	0013      	movs	r3, r2
   11e5e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   11e60:	1dbb      	adds	r3, r7, #6
   11e62:	781b      	ldrb	r3, [r3, #0]
   11e64:	2b00      	cmp	r3, #0
   11e66:	d003      	beq.n	11e70 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   11e68:	68fb      	ldr	r3, [r7, #12]
   11e6a:	68ba      	ldr	r2, [r7, #8]
   11e6c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   11e6e:	e002      	b.n	11e76 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   11e70:	68fb      	ldr	r3, [r7, #12]
   11e72:	68ba      	ldr	r2, [r7, #8]
   11e74:	615a      	str	r2, [r3, #20]
}
   11e76:	46c0      	nop			; (mov r8, r8)
   11e78:	46bd      	mov	sp, r7
   11e7a:	b004      	add	sp, #16
   11e7c:	bd80      	pop	{r7, pc}
   11e7e:	46c0      	nop			; (mov r8, r8)
   11e80:	00011da5 	.word	0x00011da5

00011e84 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   11e84:	b580      	push	{r7, lr}
   11e86:	b084      	sub	sp, #16
   11e88:	af00      	add	r7, sp, #0
   11e8a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   11e8c:	687b      	ldr	r3, [r7, #4]
   11e8e:	681b      	ldr	r3, [r3, #0]
   11e90:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   11e92:	68fb      	ldr	r3, [r7, #12]
   11e94:	69db      	ldr	r3, [r3, #28]
   11e96:	1e5a      	subs	r2, r3, #1
   11e98:	4193      	sbcs	r3, r2
   11e9a:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   11e9c:	0018      	movs	r0, r3
   11e9e:	46bd      	mov	sp, r7
   11ea0:	b004      	add	sp, #16
   11ea2:	bd80      	pop	{r7, pc}

00011ea4 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   11ea4:	b580      	push	{r7, lr}
   11ea6:	b082      	sub	sp, #8
   11ea8:	af00      	add	r7, sp, #0
   11eaa:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   11eac:	46c0      	nop			; (mov r8, r8)
   11eae:	687b      	ldr	r3, [r7, #4]
   11eb0:	0018      	movs	r0, r3
   11eb2:	4b04      	ldr	r3, [pc, #16]	; (11ec4 <_usart_wait_for_sync+0x20>)
   11eb4:	4798      	blx	r3
   11eb6:	1e03      	subs	r3, r0, #0
   11eb8:	d1f9      	bne.n	11eae <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   11eba:	46c0      	nop			; (mov r8, r8)
   11ebc:	46bd      	mov	sp, r7
   11ebe:	b002      	add	sp, #8
   11ec0:	bd80      	pop	{r7, pc}
   11ec2:	46c0      	nop			; (mov r8, r8)
   11ec4:	00011e85 	.word	0x00011e85

00011ec8 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   11ec8:	b580      	push	{r7, lr}
   11eca:	b082      	sub	sp, #8
   11ecc:	af00      	add	r7, sp, #0
   11ece:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   11ed0:	687b      	ldr	r3, [r7, #4]
   11ed2:	2280      	movs	r2, #128	; 0x80
   11ed4:	05d2      	lsls	r2, r2, #23
   11ed6:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   11ed8:	687b      	ldr	r3, [r7, #4]
   11eda:	2200      	movs	r2, #0
   11edc:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   11ede:	687b      	ldr	r3, [r7, #4]
   11ee0:	22ff      	movs	r2, #255	; 0xff
   11ee2:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   11ee4:	687b      	ldr	r3, [r7, #4]
   11ee6:	2200      	movs	r2, #0
   11ee8:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   11eea:	687b      	ldr	r3, [r7, #4]
   11eec:	2200      	movs	r2, #0
   11eee:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   11ef0:	687b      	ldr	r3, [r7, #4]
   11ef2:	2296      	movs	r2, #150	; 0x96
   11ef4:	0192      	lsls	r2, r2, #6
   11ef6:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   11ef8:	687b      	ldr	r3, [r7, #4]
   11efa:	2224      	movs	r2, #36	; 0x24
   11efc:	2101      	movs	r1, #1
   11efe:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   11f00:	687b      	ldr	r3, [r7, #4]
   11f02:	2225      	movs	r2, #37	; 0x25
   11f04:	2101      	movs	r1, #1
   11f06:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   11f08:	687b      	ldr	r3, [r7, #4]
   11f0a:	2226      	movs	r2, #38	; 0x26
   11f0c:	2100      	movs	r1, #0
   11f0e:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   11f10:	687b      	ldr	r3, [r7, #4]
   11f12:	2227      	movs	r2, #39	; 0x27
   11f14:	2100      	movs	r1, #0
   11f16:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   11f18:	687b      	ldr	r3, [r7, #4]
   11f1a:	2200      	movs	r2, #0
   11f1c:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   11f1e:	687b      	ldr	r3, [r7, #4]
   11f20:	2288      	movs	r2, #136	; 0x88
   11f22:	0352      	lsls	r2, r2, #13
   11f24:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   11f26:	687b      	ldr	r3, [r7, #4]
   11f28:	222c      	movs	r2, #44	; 0x2c
   11f2a:	2100      	movs	r1, #0
   11f2c:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   11f2e:	687b      	ldr	r3, [r7, #4]
   11f30:	222d      	movs	r2, #45	; 0x2d
   11f32:	2100      	movs	r1, #0
   11f34:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   11f36:	687b      	ldr	r3, [r7, #4]
   11f38:	2200      	movs	r2, #0
   11f3a:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   11f3c:	687b      	ldr	r3, [r7, #4]
   11f3e:	2200      	movs	r2, #0
   11f40:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   11f42:	687b      	ldr	r3, [r7, #4]
   11f44:	2200      	movs	r2, #0
   11f46:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   11f48:	687b      	ldr	r3, [r7, #4]
   11f4a:	2200      	movs	r2, #0
   11f4c:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   11f4e:	687b      	ldr	r3, [r7, #4]
   11f50:	2200      	movs	r2, #0
   11f52:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   11f54:	687b      	ldr	r3, [r7, #4]
   11f56:	2200      	movs	r2, #0
   11f58:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   11f5a:	687b      	ldr	r3, [r7, #4]
   11f5c:	2200      	movs	r2, #0
   11f5e:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   11f60:	687b      	ldr	r3, [r7, #4]
   11f62:	2200      	movs	r2, #0
   11f64:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   11f66:	687b      	ldr	r3, [r7, #4]
   11f68:	2200      	movs	r2, #0
   11f6a:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   11f6c:	687b      	ldr	r3, [r7, #4]
   11f6e:	2200      	movs	r2, #0
   11f70:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   11f72:	687b      	ldr	r3, [r7, #4]
   11f74:	2213      	movs	r2, #19
   11f76:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   11f78:	687b      	ldr	r3, [r7, #4]
   11f7a:	2200      	movs	r2, #0
   11f7c:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   11f7e:	46c0      	nop			; (mov r8, r8)
   11f80:	46bd      	mov	sp, r7
   11f82:	b002      	add	sp, #8
   11f84:	bd80      	pop	{r7, pc}
	...

00011f88 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   11f88:	b580      	push	{r7, lr}
   11f8a:	b084      	sub	sp, #16
   11f8c:	af00      	add	r7, sp, #0
   11f8e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   11f90:	687b      	ldr	r3, [r7, #4]
   11f92:	681b      	ldr	r3, [r3, #0]
   11f94:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   11f96:	687b      	ldr	r3, [r7, #4]
   11f98:	681b      	ldr	r3, [r3, #0]
   11f9a:	0018      	movs	r0, r3
   11f9c:	4b09      	ldr	r3, [pc, #36]	; (11fc4 <usart_enable+0x3c>)
   11f9e:	4798      	blx	r3
   11fa0:	0003      	movs	r3, r0
   11fa2:	0018      	movs	r0, r3
   11fa4:	4b08      	ldr	r3, [pc, #32]	; (11fc8 <usart_enable+0x40>)
   11fa6:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   11fa8:	687b      	ldr	r3, [r7, #4]
   11faa:	0018      	movs	r0, r3
   11fac:	4b07      	ldr	r3, [pc, #28]	; (11fcc <usart_enable+0x44>)
   11fae:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   11fb0:	68fb      	ldr	r3, [r7, #12]
   11fb2:	681b      	ldr	r3, [r3, #0]
   11fb4:	2202      	movs	r2, #2
   11fb6:	431a      	orrs	r2, r3
   11fb8:	68fb      	ldr	r3, [r7, #12]
   11fba:	601a      	str	r2, [r3, #0]
}
   11fbc:	46c0      	nop			; (mov r8, r8)
   11fbe:	46bd      	mov	sp, r7
   11fc0:	b004      	add	sp, #16
   11fc2:	bd80      	pop	{r7, pc}
   11fc4:	000229dd 	.word	0x000229dd
   11fc8:	00011ce9 	.word	0x00011ce9
   11fcc:	00011ea5 	.word	0x00011ea5

00011fd0 <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
   11fd0:	b580      	push	{r7, lr}
   11fd2:	b084      	sub	sp, #16
   11fd4:	af00      	add	r7, sp, #0
   11fd6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   11fd8:	687b      	ldr	r3, [r7, #4]
   11fda:	681b      	ldr	r3, [r3, #0]
   11fdc:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   11fde:	687b      	ldr	r3, [r7, #4]
   11fe0:	681b      	ldr	r3, [r3, #0]
   11fe2:	0018      	movs	r0, r3
   11fe4:	4b0a      	ldr	r3, [pc, #40]	; (12010 <usart_disable+0x40>)
   11fe6:	4798      	blx	r3
   11fe8:	0003      	movs	r3, r0
   11fea:	0018      	movs	r0, r3
   11fec:	4b09      	ldr	r3, [pc, #36]	; (12014 <usart_disable+0x44>)
   11fee:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   11ff0:	687b      	ldr	r3, [r7, #4]
   11ff2:	0018      	movs	r0, r3
   11ff4:	4b08      	ldr	r3, [pc, #32]	; (12018 <usart_disable+0x48>)
   11ff6:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
   11ff8:	68fb      	ldr	r3, [r7, #12]
   11ffa:	681b      	ldr	r3, [r3, #0]
   11ffc:	2202      	movs	r2, #2
   11ffe:	4393      	bics	r3, r2
   12000:	001a      	movs	r2, r3
   12002:	68fb      	ldr	r3, [r7, #12]
   12004:	601a      	str	r2, [r3, #0]
}
   12006:	46c0      	nop			; (mov r8, r8)
   12008:	46bd      	mov	sp, r7
   1200a:	b004      	add	sp, #16
   1200c:	bd80      	pop	{r7, pc}
   1200e:	46c0      	nop			; (mov r8, r8)
   12010:	000229dd 	.word	0x000229dd
   12014:	00011d15 	.word	0x00011d15
   12018:	00011ea5 	.word	0x00011ea5

0001201c <usart_reset>:
 *
 * \param[in]  module  Pointer to the USART software instance struct
 */
static inline void usart_reset(
		const struct usart_module *const module)
{
   1201c:	b580      	push	{r7, lr}
   1201e:	b084      	sub	sp, #16
   12020:	af00      	add	r7, sp, #0
   12022:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   12024:	687b      	ldr	r3, [r7, #4]
   12026:	681b      	ldr	r3, [r3, #0]
   12028:	60fb      	str	r3, [r7, #12]

	usart_disable(module);
   1202a:	687b      	ldr	r3, [r7, #4]
   1202c:	0018      	movs	r0, r3
   1202e:	4b06      	ldr	r3, [pc, #24]	; (12048 <usart_reset+0x2c>)
   12030:	4798      	blx	r3

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   12032:	687b      	ldr	r3, [r7, #4]
   12034:	0018      	movs	r0, r3
   12036:	4b05      	ldr	r3, [pc, #20]	; (1204c <usart_reset+0x30>)
   12038:	4798      	blx	r3

	/* Reset module */
	usart_hw->CTRLA.reg = SERCOM_USART_CTRLA_SWRST;
   1203a:	68fb      	ldr	r3, [r7, #12]
   1203c:	2201      	movs	r2, #1
   1203e:	601a      	str	r2, [r3, #0]
}
   12040:	46c0      	nop			; (mov r8, r8)
   12042:	46bd      	mov	sp, r7
   12044:	b004      	add	sp, #16
   12046:	bd80      	pop	{r7, pc}
   12048:	00011fd1 	.word	0x00011fd1
   1204c:	00011ea5 	.word	0x00011ea5

00012050 <gsm_timer_callback>:
/** FreeRTOS timer callback function, fired when the a timer period has elapsed.
*
*  \param[in]  timer  ID of the timer that has expired.
*/
static void gsm_timer_callback(TimerHandle_t timer)
{
   12050:	b580      	push	{r7, lr}
   12052:	b082      	sub	sp, #8
   12054:	af00      	add	r7, sp, #0
   12056:	6078      	str	r0, [r7, #4]
}
   12058:	46c0      	nop			; (mov r8, r8)
   1205a:	46bd      	mov	sp, r7
   1205c:	b002      	add	sp, #8
   1205e:	bd80      	pop	{r7, pc}

00012060 <Flush_RX_Buffer>:

void Flush_RX_Buffer(void)
{
   12060:	b580      	push	{r7, lr}
   12062:	b082      	sub	sp, #8
   12064:	af00      	add	r7, sp, #0
	uint8_t ucharTemp_Value;
	portBASE_TYPE xStatus;
	while(1)
	{
		xStatus=xQueueReceive(gsm_rx_queue,&ucharTemp_Value,0);
   12066:	4b09      	ldr	r3, [pc, #36]	; (1208c <Flush_RX_Buffer+0x2c>)
   12068:	681b      	ldr	r3, [r3, #0]
   1206a:	1cf9      	adds	r1, r7, #3
   1206c:	2200      	movs	r2, #0
   1206e:	0018      	movs	r0, r3
   12070:	4b07      	ldr	r3, [pc, #28]	; (12090 <Flush_RX_Buffer+0x30>)
   12072:	4798      	blx	r3
   12074:	0003      	movs	r3, r0
   12076:	607b      	str	r3, [r7, #4]
		if (xStatus==errQUEUE_EMPTY)
   12078:	687b      	ldr	r3, [r7, #4]
   1207a:	2b00      	cmp	r3, #0
   1207c:	d000      	beq.n	12080 <Flush_RX_Buffer+0x20>
		xStatus=xQueueReceive(gsm_rx_queue,&ucharTemp_Value,0);
   1207e:	e7f2      	b.n	12066 <Flush_RX_Buffer+0x6>
		{
			break;
   12080:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   12082:	46c0      	nop			; (mov r8, r8)
   12084:	46bd      	mov	sp, r7
   12086:	b002      	add	sp, #8
   12088:	bd80      	pop	{r7, pc}
   1208a:	46c0      	nop			; (mov r8, r8)
   1208c:	2000021c 	.word	0x2000021c
   12090:	0001fbc1 	.word	0x0001fbc1

00012094 <gsm_rx_handler>:

static void gsm_rx_handler(uint8_t instance)
{
   12094:	b590      	push	{r4, r7, lr}
   12096:	b085      	sub	sp, #20
   12098:	af00      	add	r7, sp, #0
   1209a:	0002      	movs	r2, r0
   1209c:	1dfb      	adds	r3, r7, #7
   1209e:	701a      	strb	r2, [r3, #0]
	SercomUsart *const usart_hw = &GSM_SERCOM->USART;
   120a0:	4b18      	ldr	r3, [pc, #96]	; (12104 <gsm_rx_handler+0x70>)
   120a2:	60fb      	str	r3, [r7, #12]
	UNUSED(instance);
	if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)
   120a4:	68fb      	ldr	r3, [r7, #12]
   120a6:	7e1b      	ldrb	r3, [r3, #24]
   120a8:	b2db      	uxtb	r3, r3
   120aa:	001a      	movs	r2, r3
   120ac:	2304      	movs	r3, #4
   120ae:	4013      	ands	r3, r2
   120b0:	d023      	beq.n	120fa <gsm_rx_handler+0x66>
	{
		/* Check if a data reception error occurred */
		uint8_t rx_error = usart_hw->STATUS.reg &
   120b2:	68fb      	ldr	r3, [r7, #12]
   120b4:	8b5b      	ldrh	r3, [r3, #26]
   120b6:	b29b      	uxth	r3, r3
   120b8:	b2da      	uxtb	r2, r3
   120ba:	230b      	movs	r3, #11
   120bc:	18fb      	adds	r3, r7, r3
   120be:	2106      	movs	r1, #6
   120c0:	400a      	ands	r2, r1
   120c2:	701a      	strb	r2, [r3, #0]
		(SERCOM_USART_STATUS_FERR | SERCOM_USART_STATUS_BUFOVF);
		/* If error occurred clear the error flags, otherwise queue new data */
		if (rx_error)
   120c4:	230b      	movs	r3, #11
   120c6:	18fb      	adds	r3, r7, r3
   120c8:	781b      	ldrb	r3, [r3, #0]
   120ca:	2b00      	cmp	r3, #0
   120cc:	d006      	beq.n	120dc <gsm_rx_handler+0x48>
		{
			usart_hw->STATUS.reg = rx_error;
   120ce:	230b      	movs	r3, #11
   120d0:	18fb      	adds	r3, r7, r3
   120d2:	781b      	ldrb	r3, [r3, #0]
   120d4:	b29a      	uxth	r2, r3
   120d6:	68fb      	ldr	r3, [r7, #12]
   120d8:	835a      	strh	r2, [r3, #26]
			uint8_t data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
			xQueueSendFromISR(gsm_rx_queue, &data, NULL);
			//gsm_module_exit_sleep(true);
		}
	}
}
   120da:	e00e      	b.n	120fa <gsm_rx_handler+0x66>
			uint8_t data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   120dc:	68fb      	ldr	r3, [r7, #12]
   120de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   120e0:	b29b      	uxth	r3, r3
   120e2:	b2da      	uxtb	r2, r3
   120e4:	230a      	movs	r3, #10
   120e6:	18fb      	adds	r3, r7, r3
   120e8:	701a      	strb	r2, [r3, #0]
			xQueueSendFromISR(gsm_rx_queue, &data, NULL);
   120ea:	4b07      	ldr	r3, [pc, #28]	; (12108 <gsm_rx_handler+0x74>)
   120ec:	6818      	ldr	r0, [r3, #0]
   120ee:	230a      	movs	r3, #10
   120f0:	18f9      	adds	r1, r7, r3
   120f2:	2300      	movs	r3, #0
   120f4:	2200      	movs	r2, #0
   120f6:	4c05      	ldr	r4, [pc, #20]	; (1210c <gsm_rx_handler+0x78>)
   120f8:	47a0      	blx	r4
}
   120fa:	46c0      	nop			; (mov r8, r8)
   120fc:	46bd      	mov	sp, r7
   120fe:	b005      	add	sp, #20
   12100:	bd90      	pop	{r4, r7, pc}
   12102:	46c0      	nop			; (mov r8, r8)
   12104:	42001400 	.word	0x42001400
   12108:	2000021c 	.word	0x2000021c
   1210c:	0001faa1 	.word	0x0001faa1

00012110 <gsm_ring_detect_pin_callback>:

static void gsm_ring_detect_pin_callback(void)
{
   12110:	b580      	push	{r7, lr}
   12112:	af00      	add	r7, sp, #0
	isRinging = !port_pin_get_input_level(GSM_RING_PIN);
   12114:	2031      	movs	r0, #49	; 0x31
   12116:	4b0b      	ldr	r3, [pc, #44]	; (12144 <gsm_ring_detect_pin_callback+0x34>)
   12118:	4798      	blx	r3
   1211a:	0003      	movs	r3, r0
   1211c:	1e5a      	subs	r2, r3, #1
   1211e:	4193      	sbcs	r3, r2
   12120:	b2db      	uxtb	r3, r3
   12122:	2201      	movs	r2, #1
   12124:	4053      	eors	r3, r2
   12126:	b2db      	uxtb	r3, r3
   12128:	1c1a      	adds	r2, r3, #0
   1212a:	2301      	movs	r3, #1
   1212c:	4013      	ands	r3, r2
   1212e:	b2da      	uxtb	r2, r3
   12130:	4b05      	ldr	r3, [pc, #20]	; (12148 <gsm_ring_detect_pin_callback+0x38>)
   12132:	701a      	strb	r2, [r3, #0]
	lastRingStateChangeTime = xTaskGetTickCountFromISR();
   12134:	4b05      	ldr	r3, [pc, #20]	; (1214c <gsm_ring_detect_pin_callback+0x3c>)
   12136:	4798      	blx	r3
   12138:	0002      	movs	r2, r0
   1213a:	4b05      	ldr	r3, [pc, #20]	; (12150 <gsm_ring_detect_pin_callback+0x40>)
   1213c:	601a      	str	r2, [r3, #0]
}
   1213e:	46c0      	nop			; (mov r8, r8)
   12140:	46bd      	mov	sp, r7
   12142:	bd80      	pop	{r7, pc}
   12144:	00011ded 	.word	0x00011ded
   12148:	2000068e 	.word	0x2000068e
   1214c:	000209e9 	.word	0x000209e9
   12150:	200006cc 	.word	0x200006cc

00012154 <gsm_init>:

void gsm_init(void)
{
   12154:	b590      	push	{r4, r7, lr}
   12156:	b097      	sub	sp, #92	; 0x5c
   12158:	af02      	add	r7, sp, #8
	struct port_config gsm_pin_config;
	port_get_config_defaults(&gsm_pin_config);
   1215a:	234c      	movs	r3, #76	; 0x4c
   1215c:	18fb      	adds	r3, r7, r3
   1215e:	0018      	movs	r0, r3
   12160:	4b4d      	ldr	r3, [pc, #308]	; (12298 <gsm_init+0x144>)
   12162:	4798      	blx	r3
	
	/* Configure pin to control the GSM module sleep state */
	gsm_pin_config.direction = PORT_PIN_DIR_OUTPUT;
   12164:	234c      	movs	r3, #76	; 0x4c
   12166:	18fb      	adds	r3, r7, r3
   12168:	2201      	movs	r2, #1
   1216a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(GSM_DTR_PIN, &gsm_pin_config);
   1216c:	234c      	movs	r3, #76	; 0x4c
   1216e:	18fb      	adds	r3, r7, r3
   12170:	0019      	movs	r1, r3
   12172:	2014      	movs	r0, #20
   12174:	4b49      	ldr	r3, [pc, #292]	; (1229c <gsm_init+0x148>)
   12176:	4798      	blx	r3
	port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
   12178:	2100      	movs	r1, #0
   1217a:	2014      	movs	r0, #20
   1217c:	4b48      	ldr	r3, [pc, #288]	; (122a0 <gsm_init+0x14c>)
   1217e:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
   12180:	2340      	movs	r3, #64	; 0x40
   12182:	18fb      	adds	r3, r7, r3
   12184:	0018      	movs	r0, r3
   12186:	4b47      	ldr	r3, [pc, #284]	; (122a4 <gsm_init+0x150>)
   12188:	4798      	blx	r3
	config_extint_chan.gpio_pin = GSM_RING_EIC_PIN;
   1218a:	2340      	movs	r3, #64	; 0x40
   1218c:	18fb      	adds	r3, r7, r3
   1218e:	2231      	movs	r2, #49	; 0x31
   12190:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = GSM_RING_EIC_MUX;
   12192:	2340      	movs	r3, #64	; 0x40
   12194:	18fb      	adds	r3, r7, r3
   12196:	2200      	movs	r2, #0
   12198:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1219a:	2340      	movs	r3, #64	; 0x40
   1219c:	18fb      	adds	r3, r7, r3
   1219e:	2201      	movs	r2, #1
   121a0:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
   121a2:	2340      	movs	r3, #64	; 0x40
   121a4:	18fb      	adds	r3, r7, r3
   121a6:	2203      	movs	r2, #3
   121a8:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(GSM_RING_EIC_LINE, &config_extint_chan);
   121aa:	2340      	movs	r3, #64	; 0x40
   121ac:	18fb      	adds	r3, r7, r3
   121ae:	0019      	movs	r1, r3
   121b0:	2001      	movs	r0, #1
   121b2:	4b3d      	ldr	r3, [pc, #244]	; (122a8 <gsm_init+0x154>)
   121b4:	4798      	blx	r3
	
	extint_chan_enable_callback(GSM_RING_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   121b6:	2100      	movs	r1, #0
   121b8:	2001      	movs	r0, #1
   121ba:	4b3c      	ldr	r3, [pc, #240]	; (122ac <gsm_init+0x158>)
   121bc:	4798      	blx	r3
	extint_register_callback(gsm_ring_detect_pin_callback,GSM_RING_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   121be:	4b3c      	ldr	r3, [pc, #240]	; (122b0 <gsm_init+0x15c>)
   121c0:	2200      	movs	r2, #0
   121c2:	2101      	movs	r1, #1
   121c4:	0018      	movs	r0, r3
   121c6:	4b3b      	ldr	r3, [pc, #236]	; (122b4 <gsm_init+0x160>)
   121c8:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	
	gsm_rx_queue = xQueueCreate(240, sizeof(uint8_t));
   121ca:	2200      	movs	r2, #0
   121cc:	2101      	movs	r1, #1
   121ce:	20f0      	movs	r0, #240	; 0xf0
   121d0:	4b39      	ldr	r3, [pc, #228]	; (122b8 <gsm_init+0x164>)
   121d2:	4798      	blx	r3
   121d4:	0002      	movs	r2, r0
   121d6:	4b39      	ldr	r3, [pc, #228]	; (122bc <gsm_init+0x168>)
   121d8:	601a      	str	r2, [r3, #0]
	gsm_cmd_timeout_timer = xTimerCreate((const char *)"GSM Timeout",GSM_TIMEOUT_PERIOD_TICKS, pdFALSE, NULL, gsm_timer_callback);
   121da:	4939      	ldr	r1, [pc, #228]	; (122c0 <gsm_init+0x16c>)
   121dc:	4839      	ldr	r0, [pc, #228]	; (122c4 <gsm_init+0x170>)
   121de:	4b3a      	ldr	r3, [pc, #232]	; (122c8 <gsm_init+0x174>)
   121e0:	9300      	str	r3, [sp, #0]
   121e2:	2300      	movs	r3, #0
   121e4:	2200      	movs	r2, #0
   121e6:	4c39      	ldr	r4, [pc, #228]	; (122cc <gsm_init+0x178>)
   121e8:	47a0      	blx	r4
   121ea:	0002      	movs	r2, r0
   121ec:	4b38      	ldr	r3, [pc, #224]	; (122d0 <gsm_init+0x17c>)
   121ee:	601a      	str	r2, [r3, #0]
	vSemaphoreCreateBinary(gsm_busy_semaphore);
   121f0:	2203      	movs	r2, #3
   121f2:	2100      	movs	r1, #0
   121f4:	2001      	movs	r0, #1
   121f6:	4b30      	ldr	r3, [pc, #192]	; (122b8 <gsm_init+0x164>)
   121f8:	4798      	blx	r3
   121fa:	0002      	movs	r2, r0
   121fc:	4b35      	ldr	r3, [pc, #212]	; (122d4 <gsm_init+0x180>)
   121fe:	601a      	str	r2, [r3, #0]
   12200:	4b34      	ldr	r3, [pc, #208]	; (122d4 <gsm_init+0x180>)
   12202:	681b      	ldr	r3, [r3, #0]
   12204:	2b00      	cmp	r3, #0
   12206:	d006      	beq.n	12216 <gsm_init+0xc2>
   12208:	4b32      	ldr	r3, [pc, #200]	; (122d4 <gsm_init+0x180>)
   1220a:	6818      	ldr	r0, [r3, #0]
   1220c:	2300      	movs	r3, #0
   1220e:	2200      	movs	r2, #0
   12210:	2100      	movs	r1, #0
   12212:	4c31      	ldr	r4, [pc, #196]	; (122d8 <gsm_init+0x184>)
   12214:	47a0      	blx	r4
	
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
   12216:	003b      	movs	r3, r7
   12218:	0018      	movs	r0, r3
   1221a:	4b30      	ldr	r3, [pc, #192]	; (122dc <gsm_init+0x188>)
   1221c:	4798      	blx	r3
	config_usart.baudrate		= GSM_BAUDRATE;
   1221e:	003b      	movs	r3, r7
   12220:	2296      	movs	r2, #150	; 0x96
   12222:	01d2      	lsls	r2, r2, #7
   12224:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting	= GSM_SERCOM_MUX;
   12226:	003b      	movs	r3, r7
   12228:	2280      	movs	r2, #128	; 0x80
   1222a:	0352      	lsls	r2, r2, #13
   1222c:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0	= GSM_SERCOM_PAD0_MUX;
   1222e:	003b      	movs	r3, r7
   12230:	4a2b      	ldr	r2, [pc, #172]	; (122e0 <gsm_init+0x18c>)
   12232:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1	= GSM_SERCOM_PAD1_MUX;
   12234:	003b      	movs	r3, r7
   12236:	4a2b      	ldr	r2, [pc, #172]	; (122e4 <gsm_init+0x190>)
   12238:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2	= GSM_SERCOM_PAD2_MUX;
   1223a:	003b      	movs	r3, r7
   1223c:	2201      	movs	r2, #1
   1223e:	4252      	negs	r2, r2
   12240:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3	= GSM_SERCOM_PAD3_MUX;
   12242:	003b      	movs	r3, r7
   12244:	2201      	movs	r2, #1
   12246:	4252      	negs	r2, r2
   12248:	63da      	str	r2, [r3, #60]	; 0x3c
	config_usart.run_in_standby = true;
   1224a:	003b      	movs	r3, r7
   1224c:	222c      	movs	r2, #44	; 0x2c
   1224e:	2101      	movs	r1, #1
   12250:	5499      	strb	r1, [r3, r2]
	while (usart_init(&gsm_usart,GSM_SERCOM, &config_usart) != STATUS_OK)
   12252:	e003      	b.n	1225c <gsm_init+0x108>
	{
		usart_reset(&gsm_usart);
   12254:	4b24      	ldr	r3, [pc, #144]	; (122e8 <gsm_init+0x194>)
   12256:	0018      	movs	r0, r3
   12258:	4b24      	ldr	r3, [pc, #144]	; (122ec <gsm_init+0x198>)
   1225a:	4798      	blx	r3
	while (usart_init(&gsm_usart,GSM_SERCOM, &config_usart) != STATUS_OK)
   1225c:	003a      	movs	r2, r7
   1225e:	4924      	ldr	r1, [pc, #144]	; (122f0 <gsm_init+0x19c>)
   12260:	4b21      	ldr	r3, [pc, #132]	; (122e8 <gsm_init+0x194>)
   12262:	0018      	movs	r0, r3
   12264:	4b23      	ldr	r3, [pc, #140]	; (122f4 <gsm_init+0x1a0>)
   12266:	4798      	blx	r3
   12268:	1e03      	subs	r3, r0, #0
   1226a:	d1f3      	bne.n	12254 <gsm_init+0x100>
	}
	usart_enable(&gsm_usart);
   1226c:	4b1e      	ldr	r3, [pc, #120]	; (122e8 <gsm_init+0x194>)
   1226e:	0018      	movs	r0, r3
   12270:	4b21      	ldr	r3, [pc, #132]	; (122f8 <gsm_init+0x1a4>)
   12272:	4798      	blx	r3
	_sercom_set_handler(_sercom_get_sercom_inst_index(GSM_SERCOM),gsm_rx_handler);
   12274:	4b1e      	ldr	r3, [pc, #120]	; (122f0 <gsm_init+0x19c>)
   12276:	0018      	movs	r0, r3
   12278:	4b20      	ldr	r3, [pc, #128]	; (122fc <gsm_init+0x1a8>)
   1227a:	4798      	blx	r3
   1227c:	0003      	movs	r3, r0
   1227e:	001a      	movs	r2, r3
   12280:	4b1f      	ldr	r3, [pc, #124]	; (12300 <gsm_init+0x1ac>)
   12282:	0019      	movs	r1, r3
   12284:	0010      	movs	r0, r2
   12286:	4b1f      	ldr	r3, [pc, #124]	; (12304 <gsm_init+0x1b0>)
   12288:	4798      	blx	r3
	GSM_SERCOM->USART.INTENSET.reg=SERCOM_USART_INTFLAG_RXC;
   1228a:	4b19      	ldr	r3, [pc, #100]	; (122f0 <gsm_init+0x19c>)
   1228c:	2204      	movs	r2, #4
   1228e:	759a      	strb	r2, [r3, #22]
}
   12290:	46c0      	nop			; (mov r8, r8)
   12292:	46bd      	mov	sp, r7
   12294:	b015      	add	sp, #84	; 0x54
   12296:	bd90      	pop	{r4, r7, pc}
   12298:	00011dc9 	.word	0x00011dc9
   1229c:	000236f1 	.word	0x000236f1
   122a0:	00011e31 	.word	0x00011e31
   122a4:	0001e689 	.word	0x0001e689
   122a8:	0001e6bd 	.word	0x0001e6bd
   122ac:	00022be1 	.word	0x00022be1
   122b0:	00012111 	.word	0x00012111
   122b4:	00022b7d 	.word	0x00022b7d
   122b8:	0001f805 	.word	0x0001f805
   122bc:	2000021c 	.word	0x2000021c
   122c0:	00001388 	.word	0x00001388
   122c4:	0002a558 	.word	0x0002a558
   122c8:	00012051 	.word	0x00012051
   122cc:	00021589 	.word	0x00021589
   122d0:	20000220 	.word	0x20000220
   122d4:	20000224 	.word	0x20000224
   122d8:	0001f8c1 	.word	0x0001f8c1
   122dc:	00011ec9 	.word	0x00011ec9
   122e0:	00160002 	.word	0x00160002
   122e4:	00170002 	.word	0x00170002
   122e8:	20000698 	.word	0x20000698
   122ec:	0001201d 	.word	0x0001201d
   122f0:	42001400 	.word	0x42001400
   122f4:	000221d5 	.word	0x000221d5
   122f8:	00011f89 	.word	0x00011f89
   122fc:	0001f29d 	.word	0x0001f29d
   12300:	00012095 	.word	0x00012095
   12304:	00022971 	.word	0x00022971

00012308 <gsm_module_exit_sleep>:

void gsm_module_exit_sleep(bool calledFromRead)
{
   12308:	b580      	push	{r7, lr}
   1230a:	b082      	sub	sp, #8
   1230c:	af00      	add	r7, sp, #0
   1230e:	0002      	movs	r2, r0
   12310:	1dfb      	adds	r3, r7, #7
   12312:	701a      	strb	r2, [r3, #0]
	if (!isGSMModuleAwake)
   12314:	4b12      	ldr	r3, [pc, #72]	; (12360 <gsm_module_exit_sleep+0x58>)
   12316:	781b      	ldrb	r3, [r3, #0]
   12318:	b2db      	uxtb	r3, r3
   1231a:	2201      	movs	r2, #1
   1231c:	4053      	eors	r3, r2
   1231e:	b2db      	uxtb	r3, r3
   12320:	2b00      	cmp	r3, #0
   12322:	d010      	beq.n	12346 <gsm_module_exit_sleep+0x3e>
	{
		port_pin_set_output_level(GSM_DTR_PIN, GSM_DTR_PIN_ACTIVE);
   12324:	2101      	movs	r1, #1
   12326:	2014      	movs	r0, #20
   12328:	4b0e      	ldr	r3, [pc, #56]	; (12364 <gsm_module_exit_sleep+0x5c>)
   1232a:	4798      	blx	r3
		isGSMModuleAwake = true;
   1232c:	4b0c      	ldr	r3, [pc, #48]	; (12360 <gsm_module_exit_sleep+0x58>)
   1232e:	2201      	movs	r2, #1
   12330:	701a      	strb	r2, [r3, #0]
		if (!calledFromRead)
   12332:	1dfb      	adds	r3, r7, #7
   12334:	781b      	ldrb	r3, [r3, #0]
   12336:	2201      	movs	r2, #1
   12338:	4053      	eors	r3, r2
   1233a:	b2db      	uxtb	r3, r3
   1233c:	2b00      	cmp	r3, #0
   1233e:	d002      	beq.n	12346 <gsm_module_exit_sleep+0x3e>
		{
			vTaskDelay(100 / portTICK_PERIOD_MS);
   12340:	2064      	movs	r0, #100	; 0x64
   12342:	4b09      	ldr	r3, [pc, #36]	; (12368 <gsm_module_exit_sleep+0x60>)
   12344:	4798      	blx	r3
		}
	}
	lastToLastGSMCommunicationTime=lastGSMCommunicationTime;
   12346:	4b09      	ldr	r3, [pc, #36]	; (1236c <gsm_module_exit_sleep+0x64>)
   12348:	681a      	ldr	r2, [r3, #0]
   1234a:	4b09      	ldr	r3, [pc, #36]	; (12370 <gsm_module_exit_sleep+0x68>)
   1234c:	601a      	str	r2, [r3, #0]
	lastGSMCommunicationTime=xTaskGetTickCount();
   1234e:	4b09      	ldr	r3, [pc, #36]	; (12374 <gsm_module_exit_sleep+0x6c>)
   12350:	4798      	blx	r3
   12352:	0002      	movs	r2, r0
   12354:	4b05      	ldr	r3, [pc, #20]	; (1236c <gsm_module_exit_sleep+0x64>)
   12356:	601a      	str	r2, [r3, #0]
}
   12358:	46c0      	nop			; (mov r8, r8)
   1235a:	46bd      	mov	sp, r7
   1235c:	b002      	add	sp, #8
   1235e:	bd80      	pop	{r7, pc}
   12360:	20000684 	.word	0x20000684
   12364:	00011e31 	.word	0x00011e31
   12368:	00020669 	.word	0x00020669
   1236c:	20000694 	.word	0x20000694
   12370:	20000690 	.word	0x20000690
   12374:	000209cd 	.word	0x000209cd

00012378 <gsm_module_enter_sleep>:

void gsm_module_enter_sleep(void)
{
   12378:	b580      	push	{r7, lr}
   1237a:	af00      	add	r7, sp, #0
	//port_pin_set_output_level(GSM_DTR_PIN, GSM_DTR_PIN_DEACTIVE);
	isGSMModuleAwake = false;
   1237c:	4b02      	ldr	r3, [pc, #8]	; (12388 <gsm_module_enter_sleep+0x10>)
   1237e:	2200      	movs	r2, #0
   12380:	701a      	strb	r2, [r3, #0]
}
   12382:	46c0      	nop			; (mov r8, r8)
   12384:	46bd      	mov	sp, r7
   12386:	bd80      	pop	{r7, pc}
   12388:	20000684 	.word	0x20000684

0001238c <gsm_module_sleep_elligible>:

bool gsm_module_sleep_elligible(void)
{
   1238c:	b580      	push	{r7, lr}
   1238e:	b082      	sub	sp, #8
   12390:	af00      	add	r7, sp, #0
	if(isGSMModuleAwake)
   12392:	4b0e      	ldr	r3, [pc, #56]	; (123cc <gsm_module_sleep_elligible+0x40>)
   12394:	781b      	ldrb	r3, [r3, #0]
   12396:	b2db      	uxtb	r3, r3
   12398:	2b00      	cmp	r3, #0
   1239a:	d011      	beq.n	123c0 <gsm_module_sleep_elligible+0x34>
	{
		bool ret=false;
   1239c:	1dfb      	adds	r3, r7, #7
   1239e:	2200      	movs	r2, #0
   123a0:	701a      	strb	r2, [r3, #0]
		ret= ((xTaskGetTickCount() - lastGSMCommunicationTime)>=30000L);
   123a2:	4b0b      	ldr	r3, [pc, #44]	; (123d0 <gsm_module_sleep_elligible+0x44>)
   123a4:	4798      	blx	r3
   123a6:	0002      	movs	r2, r0
   123a8:	4b0a      	ldr	r3, [pc, #40]	; (123d4 <gsm_module_sleep_elligible+0x48>)
   123aa:	681b      	ldr	r3, [r3, #0]
   123ac:	1ad2      	subs	r2, r2, r3
   123ae:	1dfb      	adds	r3, r7, #7
   123b0:	4909      	ldr	r1, [pc, #36]	; (123d8 <gsm_module_sleep_elligible+0x4c>)
   123b2:	4291      	cmp	r1, r2
   123b4:	4192      	sbcs	r2, r2
   123b6:	4252      	negs	r2, r2
   123b8:	701a      	strb	r2, [r3, #0]
		return ret;
   123ba:	1dfb      	adds	r3, r7, #7
   123bc:	781b      	ldrb	r3, [r3, #0]
   123be:	e000      	b.n	123c2 <gsm_module_sleep_elligible+0x36>
	}
	return true;
   123c0:	2301      	movs	r3, #1
}
   123c2:	0018      	movs	r0, r3
   123c4:	46bd      	mov	sp, r7
   123c6:	b002      	add	sp, #8
   123c8:	bd80      	pop	{r7, pc}
   123ca:	46c0      	nop			; (mov r8, r8)
   123cc:	20000684 	.word	0x20000684
   123d0:	000209cd 	.word	0x000209cd
   123d4:	20000694 	.word	0x20000694
   123d8:	0000752f 	.word	0x0000752f

000123dc <gsm_send_at_command>:

enum gsm_error gsm_send_at_command(const char *const atcommand,const char* aResponExit,const uint32_t aTimeoutMax,const uint8_t aLenOut, char *aResponOut)
{
   123dc:	b590      	push	{r4, r7, lr}
   123de:	b08b      	sub	sp, #44	; 0x2c
   123e0:	af02      	add	r7, sp, #8
   123e2:	60f8      	str	r0, [r7, #12]
   123e4:	60b9      	str	r1, [r7, #8]
   123e6:	607a      	str	r2, [r7, #4]
   123e8:	001a      	movs	r2, r3
   123ea:	1cfb      	adds	r3, r7, #3
   123ec:	701a      	strb	r2, [r3, #0]
	
	/* Try to acquire the command lock; if already busy with a command, abort */
	if (xSemaphoreTake(gsm_busy_semaphore, 1) == pdFALSE)
   123ee:	4b66      	ldr	r3, [pc, #408]	; (12588 <gsm_send_at_command+0x1ac>)
   123f0:	681b      	ldr	r3, [r3, #0]
   123f2:	2101      	movs	r1, #1
   123f4:	0018      	movs	r0, r3
   123f6:	4b65      	ldr	r3, [pc, #404]	; (1258c <gsm_send_at_command+0x1b0>)
   123f8:	4798      	blx	r3
   123fa:	1e03      	subs	r3, r0, #0
   123fc:	d101      	bne.n	12402 <gsm_send_at_command+0x26>
	{
		return GSM_ERROR_OPERATION_IN_PROGRESS;
   123fe:	2302      	movs	r3, #2
   12400:	e0bd      	b.n	1257e <gsm_send_at_command+0x1a2>
	}
	
	
	/* Enable DTR and wait for the module to be ready to accept a command */
	gsm_module_exit_sleep(false);
   12402:	2000      	movs	r0, #0
   12404:	4b62      	ldr	r3, [pc, #392]	; (12590 <gsm_send_at_command+0x1b4>)
   12406:	4798      	blx	r3
	/*                                                                      */
	
	//lastGSMCommandTime=xTaskGetTickCount();
	
	//////////////////////////////////////////////////////////////////////////
	Flush_RX_Buffer();
   12408:	4b62      	ldr	r3, [pc, #392]	; (12594 <gsm_send_at_command+0x1b8>)
   1240a:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	enum gsm_error err_no=GSM_ERROR_NONE;
   1240c:	231f      	movs	r3, #31
   1240e:	18fb      	adds	r3, r7, r3
   12410:	2200      	movs	r2, #0
   12412:	701a      	strb	r2, [r3, #0]
	
	uint8_t u8tRx_Index=0;
   12414:	231e      	movs	r3, #30
   12416:	18fb      	adds	r3, r7, r3
   12418:	2200      	movs	r2, #0
   1241a:	701a      	strb	r2, [r3, #0]
	char u8tTemp_Char=0;
   1241c:	2313      	movs	r3, #19
   1241e:	18fb      	adds	r3, r7, r3
   12420:	2200      	movs	r2, #0
   12422:	701a      	strb	r2, [r3, #0]
	portBASE_TYPE xStatus;

	char *aDataBuffer = (char*) calloc(MAX_BUFFER_TMP,sizeof(char));
   12424:	2101      	movs	r1, #1
   12426:	20f0      	movs	r0, #240	; 0xf0
   12428:	4b5b      	ldr	r3, [pc, #364]	; (12598 <gsm_send_at_command+0x1bc>)
   1242a:	4798      	blx	r3
   1242c:	0003      	movs	r3, r0
   1242e:	61bb      	str	r3, [r7, #24]
	
	//buffer created???
	if (aDataBuffer == NULL)
   12430:	69bb      	ldr	r3, [r7, #24]
   12432:	2b00      	cmp	r3, #0
   12434:	d101      	bne.n	1243a <gsm_send_at_command+0x5e>
	{
		//port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
		return 0;
   12436:	2300      	movs	r3, #0
   12438:	e0a1      	b.n	1257e <gsm_send_at_command+0x1a2>
	}

	//reset to all 0
	memset(aDataBuffer, '\0', MAX_BUFFER_TMP);
   1243a:	69bb      	ldr	r3, [r7, #24]
   1243c:	22f0      	movs	r2, #240	; 0xf0
   1243e:	2100      	movs	r1, #0
   12440:	0018      	movs	r0, r3
   12442:	4b56      	ldr	r3, [pc, #344]	; (1259c <gsm_send_at_command+0x1c0>)
   12444:	4798      	blx	r3
	
	/* Send the command to the GSM module when it is ready */
	usart_write_buffer_wait(&gsm_usart, (uint8_t *)atcommand, strlen(atcommand));
   12446:	68fb      	ldr	r3, [r7, #12]
   12448:	0018      	movs	r0, r3
   1244a:	4b55      	ldr	r3, [pc, #340]	; (125a0 <gsm_send_at_command+0x1c4>)
   1244c:	4798      	blx	r3
   1244e:	0003      	movs	r3, r0
   12450:	b29a      	uxth	r2, r3
   12452:	68f9      	ldr	r1, [r7, #12]
   12454:	4b53      	ldr	r3, [pc, #332]	; (125a4 <gsm_send_at_command+0x1c8>)
   12456:	0018      	movs	r0, r3
   12458:	4b53      	ldr	r3, [pc, #332]	; (125a8 <gsm_send_at_command+0x1cc>)
   1245a:	4798      	blx	r3
	
	/* Start the timeout timer to ensure a timely response from the module */
	xTimerChangePeriod(gsm_cmd_timeout_timer,(aTimeoutMax / portTICK_PERIOD_MS),portMAX_DELAY);
   1245c:	4b53      	ldr	r3, [pc, #332]	; (125ac <gsm_send_at_command+0x1d0>)
   1245e:	6818      	ldr	r0, [r3, #0]
   12460:	687a      	ldr	r2, [r7, #4]
   12462:	2301      	movs	r3, #1
   12464:	425b      	negs	r3, r3
   12466:	9300      	str	r3, [sp, #0]
   12468:	2300      	movs	r3, #0
   1246a:	2104      	movs	r1, #4
   1246c:	4c50      	ldr	r4, [pc, #320]	; (125b0 <gsm_send_at_command+0x1d4>)
   1246e:	47a0      	blx	r4
	
	while (true)
	{
		if(xTimerIsTimerActive(gsm_cmd_timeout_timer))
   12470:	4b4e      	ldr	r3, [pc, #312]	; (125ac <gsm_send_at_command+0x1d0>)
   12472:	681b      	ldr	r3, [r3, #0]
   12474:	0018      	movs	r0, r3
   12476:	4b4f      	ldr	r3, [pc, #316]	; (125b4 <gsm_send_at_command+0x1d8>)
   12478:	4798      	blx	r3
   1247a:	1e03      	subs	r3, r0, #0
   1247c:	d03e      	beq.n	124fc <gsm_send_at_command+0x120>
		{
			if (u8tRx_Index<240)
   1247e:	231e      	movs	r3, #30
   12480:	18fb      	adds	r3, r7, r3
   12482:	781b      	ldrb	r3, [r3, #0]
   12484:	2bef      	cmp	r3, #239	; 0xef
   12486:	d81c      	bhi.n	124c2 <gsm_send_at_command+0xe6>
			{
				xStatus=xQueueReceive(gsm_rx_queue,&u8tTemp_Char, 0);
   12488:	4b4b      	ldr	r3, [pc, #300]	; (125b8 <gsm_send_at_command+0x1dc>)
   1248a:	681b      	ldr	r3, [r3, #0]
   1248c:	2213      	movs	r2, #19
   1248e:	18b9      	adds	r1, r7, r2
   12490:	2200      	movs	r2, #0
   12492:	0018      	movs	r0, r3
   12494:	4b49      	ldr	r3, [pc, #292]	; (125bc <gsm_send_at_command+0x1e0>)
   12496:	4798      	blx	r3
   12498:	0003      	movs	r3, r0
   1249a:	617b      	str	r3, [r7, #20]
				if(xStatus!=errQUEUE_EMPTY)
   1249c:	697b      	ldr	r3, [r7, #20]
   1249e:	2b00      	cmp	r3, #0
   124a0:	d00f      	beq.n	124c2 <gsm_send_at_command+0xe6>
				{
					aDataBuffer[u8tRx_Index] = u8tTemp_Char;
   124a2:	231e      	movs	r3, #30
   124a4:	18fb      	adds	r3, r7, r3
   124a6:	781b      	ldrb	r3, [r3, #0]
   124a8:	69ba      	ldr	r2, [r7, #24]
   124aa:	18d3      	adds	r3, r2, r3
   124ac:	2213      	movs	r2, #19
   124ae:	18ba      	adds	r2, r7, r2
   124b0:	7812      	ldrb	r2, [r2, #0]
   124b2:	701a      	strb	r2, [r3, #0]
					u8tRx_Index++;
   124b4:	231e      	movs	r3, #30
   124b6:	18fb      	adds	r3, r7, r3
   124b8:	781a      	ldrb	r2, [r3, #0]
   124ba:	231e      	movs	r3, #30
   124bc:	18fb      	adds	r3, r7, r3
   124be:	3201      	adds	r2, #1
   124c0:	701a      	strb	r2, [r3, #0]
				}
			}
			if (aResponExit != NULL)
   124c2:	68bb      	ldr	r3, [r7, #8]
   124c4:	2b00      	cmp	r3, #0
   124c6:	d00c      	beq.n	124e2 <gsm_send_at_command+0x106>
			{
				if (strstr((const char*)aDataBuffer, (const char*)aResponExit) != NULL)
   124c8:	68ba      	ldr	r2, [r7, #8]
   124ca:	69bb      	ldr	r3, [r7, #24]
   124cc:	0011      	movs	r1, r2
   124ce:	0018      	movs	r0, r3
   124d0:	4b3b      	ldr	r3, [pc, #236]	; (125c0 <gsm_send_at_command+0x1e4>)
   124d2:	4798      	blx	r3
   124d4:	1e03      	subs	r3, r0, #0
   124d6:	d004      	beq.n	124e2 <gsm_send_at_command+0x106>
				{
					err_no = GSM_ERROR_NONE;
   124d8:	231f      	movs	r3, #31
   124da:	18fb      	adds	r3, r7, r3
   124dc:	2200      	movs	r2, #0
   124de:	701a      	strb	r2, [r3, #0]
					break;
   124e0:	e024      	b.n	1252c <gsm_send_at_command+0x150>
				}
			}
			if (strstr((const char*)aDataBuffer, (const char*)RESPONS_ERROR) != NULL)
   124e2:	4a38      	ldr	r2, [pc, #224]	; (125c4 <gsm_send_at_command+0x1e8>)
   124e4:	69bb      	ldr	r3, [r7, #24]
   124e6:	0011      	movs	r1, r2
   124e8:	0018      	movs	r0, r3
   124ea:	4b35      	ldr	r3, [pc, #212]	; (125c0 <gsm_send_at_command+0x1e4>)
   124ec:	4798      	blx	r3
   124ee:	1e03      	subs	r3, r0, #0
   124f0:	d0be      	beq.n	12470 <gsm_send_at_command+0x94>
			{
				err_no = GSM_ERROR_COMMAND_ERROR;
   124f2:	231f      	movs	r3, #31
   124f4:	18fb      	adds	r3, r7, r3
   124f6:	220b      	movs	r2, #11
   124f8:	701a      	strb	r2, [r3, #0]
				break;
   124fa:	e017      	b.n	1252c <gsm_send_at_command+0x150>
			}
		}
		else
		{
			xTimerStop(gsm_cmd_timeout_timer, portMAX_DELAY);
   124fc:	4b2b      	ldr	r3, [pc, #172]	; (125ac <gsm_send_at_command+0x1d0>)
   124fe:	6818      	ldr	r0, [r3, #0]
   12500:	2301      	movs	r3, #1
   12502:	425b      	negs	r3, r3
   12504:	9300      	str	r3, [sp, #0]
   12506:	2300      	movs	r3, #0
   12508:	2200      	movs	r2, #0
   1250a:	2103      	movs	r1, #3
   1250c:	4c28      	ldr	r4, [pc, #160]	; (125b0 <gsm_send_at_command+0x1d4>)
   1250e:	47a0      	blx	r4
			if (u8tRx_Index==0)
   12510:	231e      	movs	r3, #30
   12512:	18fb      	adds	r3, r7, r3
   12514:	781b      	ldrb	r3, [r3, #0]
   12516:	2b00      	cmp	r3, #0
   12518:	d104      	bne.n	12524 <gsm_send_at_command+0x148>
			{
				err_no = GSM_ERROR_TIMEOUT;
   1251a:	231f      	movs	r3, #31
   1251c:	18fb      	adds	r3, r7, r3
   1251e:	2207      	movs	r2, #7
   12520:	701a      	strb	r2, [r3, #0]
				break;
   12522:	e003      	b.n	1252c <gsm_send_at_command+0x150>
			}
			else
			{
				err_no = GSM_ERROR_UNKWON;
   12524:	231f      	movs	r3, #31
   12526:	18fb      	adds	r3, r7, r3
   12528:	2208      	movs	r2, #8
   1252a:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	
	//copy it to the out
	if ((aLenOut != 0) && (aResponOut != NULL) && (aLenOut > u8tRx_Index) && (err_no==GSM_ERROR_NONE))
   1252c:	1cfb      	adds	r3, r7, #3
   1252e:	781b      	ldrb	r3, [r3, #0]
   12530:	2b00      	cmp	r3, #0
   12532:	d016      	beq.n	12562 <gsm_send_at_command+0x186>
   12534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12536:	2b00      	cmp	r3, #0
   12538:	d013      	beq.n	12562 <gsm_send_at_command+0x186>
   1253a:	1cfa      	adds	r2, r7, #3
   1253c:	231e      	movs	r3, #30
   1253e:	18fb      	adds	r3, r7, r3
   12540:	7812      	ldrb	r2, [r2, #0]
   12542:	781b      	ldrb	r3, [r3, #0]
   12544:	429a      	cmp	r2, r3
   12546:	d90c      	bls.n	12562 <gsm_send_at_command+0x186>
   12548:	231f      	movs	r3, #31
   1254a:	18fb      	adds	r3, r7, r3
   1254c:	781b      	ldrb	r3, [r3, #0]
   1254e:	2b00      	cmp	r3, #0
   12550:	d107      	bne.n	12562 <gsm_send_at_command+0x186>
	{
		memcpy(aResponOut, aDataBuffer, u8tRx_Index *sizeof(uint8_t));
   12552:	231e      	movs	r3, #30
   12554:	18fb      	adds	r3, r7, r3
   12556:	781a      	ldrb	r2, [r3, #0]
   12558:	69b9      	ldr	r1, [r7, #24]
   1255a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1255c:	0018      	movs	r0, r3
   1255e:	4b1a      	ldr	r3, [pc, #104]	; (125c8 <gsm_send_at_command+0x1ec>)
   12560:	4798      	blx	r3
	}
	
	//port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
	
	xSemaphoreGive(gsm_busy_semaphore);
   12562:	4b09      	ldr	r3, [pc, #36]	; (12588 <gsm_send_at_command+0x1ac>)
   12564:	6818      	ldr	r0, [r3, #0]
   12566:	2300      	movs	r3, #0
   12568:	2200      	movs	r2, #0
   1256a:	2100      	movs	r1, #0
   1256c:	4c17      	ldr	r4, [pc, #92]	; (125cc <gsm_send_at_command+0x1f0>)
   1256e:	47a0      	blx	r4
	free(aDataBuffer);
   12570:	69bb      	ldr	r3, [r7, #24]
   12572:	0018      	movs	r0, r3
   12574:	4b16      	ldr	r3, [pc, #88]	; (125d0 <gsm_send_at_command+0x1f4>)
   12576:	4798      	blx	r3
	return err_no;
   12578:	231f      	movs	r3, #31
   1257a:	18fb      	adds	r3, r7, r3
   1257c:	781b      	ldrb	r3, [r3, #0]
}
   1257e:	0018      	movs	r0, r3
   12580:	46bd      	mov	sp, r7
   12582:	b009      	add	sp, #36	; 0x24
   12584:	bd90      	pop	{r4, r7, pc}
   12586:	46c0      	nop			; (mov r8, r8)
   12588:	20000224 	.word	0x20000224
   1258c:	0001fd61 	.word	0x0001fd61
   12590:	00012309 	.word	0x00012309
   12594:	00012061 	.word	0x00012061
   12598:	000297a9 	.word	0x000297a9
   1259c:	000298b7 	.word	0x000298b7
   125a0:	00029b47 	.word	0x00029b47
   125a4:	20000698 	.word	0x20000698
   125a8:	000224ad 	.word	0x000224ad
   125ac:	20000220 	.word	0x20000220
   125b0:	0002162d 	.word	0x0002162d
   125b4:	00021ba9 	.word	0x00021ba9
   125b8:	2000021c 	.word	0x2000021c
   125bc:	0001fbc1 	.word	0x0001fbc1
   125c0:	00029b77 	.word	0x00029b77
   125c4:	0002a564 	.word	0x0002a564
   125c8:	00029881 	.word	0x00029881
   125cc:	0001f8c1 	.word	0x0001f8c1
   125d0:	00029849 	.word	0x00029849

000125d4 <gsm_check_module>:


enum gsm_error gsm_check_module(void)
{
   125d4:	b590      	push	{r4, r7, lr}
   125d6:	b083      	sub	sp, #12
   125d8:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT\r"),(const char*)RESPONS_OK,5000,0, NULL);
   125da:	4a06      	ldr	r2, [pc, #24]	; (125f4 <gsm_check_module+0x20>)
   125dc:	4906      	ldr	r1, [pc, #24]	; (125f8 <gsm_check_module+0x24>)
   125de:	4807      	ldr	r0, [pc, #28]	; (125fc <gsm_check_module+0x28>)
   125e0:	2300      	movs	r3, #0
   125e2:	9300      	str	r3, [sp, #0]
   125e4:	2300      	movs	r3, #0
   125e6:	4c06      	ldr	r4, [pc, #24]	; (12600 <gsm_check_module+0x2c>)
   125e8:	47a0      	blx	r4
   125ea:	0003      	movs	r3, r0
}
   125ec:	0018      	movs	r0, r3
   125ee:	46bd      	mov	sp, r7
   125f0:	b001      	add	sp, #4
   125f2:	bd90      	pop	{r4, r7, pc}
   125f4:	00001388 	.word	0x00001388
   125f8:	0002a56c 	.word	0x0002a56c
   125fc:	0002a570 	.word	0x0002a570
   12600:	000123dd 	.word	0x000123dd

00012604 <gsm_is_network_registered>:
{
	return gsm_send_at_command((const char*)("AT+IFC=0,0\r"), (const char*)RESPONS_OK,5000,0, NULL);
}

enum gsm_error gsm_is_network_registered(void)
{
   12604:	b5b0      	push	{r4, r5, r7, lr}
   12606:	b084      	sub	sp, #16
   12608:	af02      	add	r7, sp, #8
	enum gsm_error errHomeNw;
	enum gsm_error errRomNw;
	errHomeNw = gsm_send_at_command((const char*)("AT+CREG?\r"), (const char*)"+CREG: 0,1",5000,0, NULL);
   1260a:	1dfc      	adds	r4, r7, #7
   1260c:	4a12      	ldr	r2, [pc, #72]	; (12658 <gsm_is_network_registered+0x54>)
   1260e:	4913      	ldr	r1, [pc, #76]	; (1265c <gsm_is_network_registered+0x58>)
   12610:	4813      	ldr	r0, [pc, #76]	; (12660 <gsm_is_network_registered+0x5c>)
   12612:	2300      	movs	r3, #0
   12614:	9300      	str	r3, [sp, #0]
   12616:	2300      	movs	r3, #0
   12618:	4d12      	ldr	r5, [pc, #72]	; (12664 <gsm_is_network_registered+0x60>)
   1261a:	47a8      	blx	r5
   1261c:	0003      	movs	r3, r0
   1261e:	7023      	strb	r3, [r4, #0]
	if (errHomeNw==GSM_ERROR_NONE)
   12620:	1dfb      	adds	r3, r7, #7
   12622:	781b      	ldrb	r3, [r3, #0]
   12624:	2b00      	cmp	r3, #0
   12626:	d101      	bne.n	1262c <gsm_is_network_registered+0x28>
	{
		return GSM_NETWORK_REGISTERED;
   12628:	2309      	movs	r3, #9
   1262a:	e011      	b.n	12650 <gsm_is_network_registered+0x4c>
	}
	else
	{
		errRomNw = gsm_send_at_command((const char*)("AT+CREG?\r"), (const char*)"+CREG: 0,5",5000,0, NULL);
   1262c:	1dbc      	adds	r4, r7, #6
   1262e:	4a0a      	ldr	r2, [pc, #40]	; (12658 <gsm_is_network_registered+0x54>)
   12630:	490d      	ldr	r1, [pc, #52]	; (12668 <gsm_is_network_registered+0x64>)
   12632:	480b      	ldr	r0, [pc, #44]	; (12660 <gsm_is_network_registered+0x5c>)
   12634:	2300      	movs	r3, #0
   12636:	9300      	str	r3, [sp, #0]
   12638:	2300      	movs	r3, #0
   1263a:	4d0a      	ldr	r5, [pc, #40]	; (12664 <gsm_is_network_registered+0x60>)
   1263c:	47a8      	blx	r5
   1263e:	0003      	movs	r3, r0
   12640:	7023      	strb	r3, [r4, #0]
		{
			if (errRomNw==GSM_ERROR_NONE)
   12642:	1dbb      	adds	r3, r7, #6
   12644:	781b      	ldrb	r3, [r3, #0]
   12646:	2b00      	cmp	r3, #0
   12648:	d101      	bne.n	1264e <gsm_is_network_registered+0x4a>
			{
				return GSM_NETWORK_REGISTERED;
   1264a:	2309      	movs	r3, #9
   1264c:	e000      	b.n	12650 <gsm_is_network_registered+0x4c>
			}
			else
			{
				return GSM_NETWORK_NOT_REGISTERED;
   1264e:	230a      	movs	r3, #10
			}
		}
	}
}
   12650:	0018      	movs	r0, r3
   12652:	46bd      	mov	sp, r7
   12654:	b002      	add	sp, #8
   12656:	bdb0      	pop	{r4, r5, r7, pc}
   12658:	00001388 	.word	0x00001388
   1265c:	0002a580 	.word	0x0002a580
   12660:	0002a58c 	.word	0x0002a58c
   12664:	000123dd 	.word	0x000123dd
   12668:	0002a598 	.word	0x0002a598

0001266c <gsm_set_baudrate>:

enum gsm_error gsm_set_baudrate(void)
{
   1266c:	b590      	push	{r4, r7, lr}
   1266e:	b089      	sub	sp, #36	; 0x24
   12670:	af02      	add	r7, sp, #8
	char baurate_at_command[20]={0};
   12672:	1d3b      	adds	r3, r7, #4
   12674:	0018      	movs	r0, r3
   12676:	2314      	movs	r3, #20
   12678:	001a      	movs	r2, r3
   1267a:	2100      	movs	r1, #0
   1267c:	4b0a      	ldr	r3, [pc, #40]	; (126a8 <gsm_set_baudrate+0x3c>)
   1267e:	4798      	blx	r3
	
	sprintf(baurate_at_command, "AT+IPR=%d\r",GSM_BAUDRATE);
   12680:	2396      	movs	r3, #150	; 0x96
   12682:	01da      	lsls	r2, r3, #7
   12684:	4909      	ldr	r1, [pc, #36]	; (126ac <gsm_set_baudrate+0x40>)
   12686:	1d3b      	adds	r3, r7, #4
   12688:	0018      	movs	r0, r3
   1268a:	4b09      	ldr	r3, [pc, #36]	; (126b0 <gsm_set_baudrate+0x44>)
   1268c:	4798      	blx	r3
	
	return gsm_send_at_command((const char*)(baurate_at_command), (const char*)RESPONS_OK,5000,0, NULL);
   1268e:	4a09      	ldr	r2, [pc, #36]	; (126b4 <gsm_set_baudrate+0x48>)
   12690:	4909      	ldr	r1, [pc, #36]	; (126b8 <gsm_set_baudrate+0x4c>)
   12692:	1d38      	adds	r0, r7, #4
   12694:	2300      	movs	r3, #0
   12696:	9300      	str	r3, [sp, #0]
   12698:	2300      	movs	r3, #0
   1269a:	4c08      	ldr	r4, [pc, #32]	; (126bc <gsm_set_baudrate+0x50>)
   1269c:	47a0      	blx	r4
   1269e:	0003      	movs	r3, r0
}
   126a0:	0018      	movs	r0, r3
   126a2:	46bd      	mov	sp, r7
   126a4:	b007      	add	sp, #28
   126a6:	bd90      	pop	{r4, r7, pc}
   126a8:	000298b7 	.word	0x000298b7
   126ac:	0002a5a4 	.word	0x0002a5a4
   126b0:	00029abd 	.word	0x00029abd
   126b4:	00001388 	.word	0x00001388
   126b8:	0002a56c 	.word	0x0002a56c
   126bc:	000123dd 	.word	0x000123dd

000126c0 <gsm_detect_simcard>:
{
	return gsm_send_at_command((const char*)("AT+CFUN=1,1\r"), (const char*)RESPONS_OK,10000,0, NULL);
}

enum gsm_error gsm_detect_simcard(void)
{
   126c0:	b590      	push	{r4, r7, lr}
   126c2:	b083      	sub	sp, #12
   126c4:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CPIN?\r"), (const char*)"+CPIN: READY",5000,0, NULL);
   126c6:	4a06      	ldr	r2, [pc, #24]	; (126e0 <gsm_detect_simcard+0x20>)
   126c8:	4906      	ldr	r1, [pc, #24]	; (126e4 <gsm_detect_simcard+0x24>)
   126ca:	4807      	ldr	r0, [pc, #28]	; (126e8 <gsm_detect_simcard+0x28>)
   126cc:	2300      	movs	r3, #0
   126ce:	9300      	str	r3, [sp, #0]
   126d0:	2300      	movs	r3, #0
   126d2:	4c06      	ldr	r4, [pc, #24]	; (126ec <gsm_detect_simcard+0x2c>)
   126d4:	47a0      	blx	r4
   126d6:	0003      	movs	r3, r0
}
   126d8:	0018      	movs	r0, r3
   126da:	46bd      	mov	sp, r7
   126dc:	b001      	add	sp, #4
   126de:	bd90      	pop	{r4, r7, pc}
   126e0:	00001388 	.word	0x00001388
   126e4:	0002a614 	.word	0x0002a614
   126e8:	0002a624 	.word	0x0002a624
   126ec:	000123dd 	.word	0x000123dd

000126f0 <gsm_delete_all_sms>:

enum gsm_error gsm_delete_all_sms(void)
{
   126f0:	b590      	push	{r4, r7, lr}
   126f2:	b083      	sub	sp, #12
   126f4:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CMGDA=\"DEL ALL\"\r"), (const char*)RESPONS_OK,25000,0, NULL);
   126f6:	4a06      	ldr	r2, [pc, #24]	; (12710 <gsm_delete_all_sms+0x20>)
   126f8:	4906      	ldr	r1, [pc, #24]	; (12714 <gsm_delete_all_sms+0x24>)
   126fa:	4807      	ldr	r0, [pc, #28]	; (12718 <gsm_delete_all_sms+0x28>)
   126fc:	2300      	movs	r3, #0
   126fe:	9300      	str	r3, [sp, #0]
   12700:	2300      	movs	r3, #0
   12702:	4c06      	ldr	r4, [pc, #24]	; (1271c <gsm_delete_all_sms+0x2c>)
   12704:	47a0      	blx	r4
   12706:	0003      	movs	r3, r0
}
   12708:	0018      	movs	r0, r3
   1270a:	46bd      	mov	sp, r7
   1270c:	b001      	add	sp, #4
   1270e:	bd90      	pop	{r4, r7, pc}
   12710:	000061a8 	.word	0x000061a8
   12714:	0002a56c 	.word	0x0002a56c
   12718:	0002a630 	.word	0x0002a630
   1271c:	000123dd 	.word	0x000123dd

00012720 <gsm_store_active_profile>:

enum gsm_error gsm_store_active_profile(void)
{
   12720:	b590      	push	{r4, r7, lr}
   12722:	b083      	sub	sp, #12
   12724:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT&W\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12726:	4a06      	ldr	r2, [pc, #24]	; (12740 <gsm_store_active_profile+0x20>)
   12728:	4906      	ldr	r1, [pc, #24]	; (12744 <gsm_store_active_profile+0x24>)
   1272a:	4807      	ldr	r0, [pc, #28]	; (12748 <gsm_store_active_profile+0x28>)
   1272c:	2300      	movs	r3, #0
   1272e:	9300      	str	r3, [sp, #0]
   12730:	2300      	movs	r3, #0
   12732:	4c06      	ldr	r4, [pc, #24]	; (1274c <gsm_store_active_profile+0x2c>)
   12734:	47a0      	blx	r4
   12736:	0003      	movs	r3, r0
}
   12738:	0018      	movs	r0, r3
   1273a:	46bd      	mov	sp, r7
   1273c:	b001      	add	sp, #4
   1273e:	bd90      	pop	{r4, r7, pc}
   12740:	00001388 	.word	0x00001388
   12744:	0002a56c 	.word	0x0002a56c
   12748:	0002a644 	.word	0x0002a644
   1274c:	000123dd 	.word	0x000123dd

00012750 <gsm_enable_calling_line_identification>:


enum gsm_error gsm_enable_calling_line_identification(void)
{
   12750:	b590      	push	{r4, r7, lr}
   12752:	b083      	sub	sp, #12
   12754:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CLIP=1\r"), (const char*)RESPONS_OK,15000,0, NULL);
   12756:	4a06      	ldr	r2, [pc, #24]	; (12770 <gsm_enable_calling_line_identification+0x20>)
   12758:	4906      	ldr	r1, [pc, #24]	; (12774 <gsm_enable_calling_line_identification+0x24>)
   1275a:	4807      	ldr	r0, [pc, #28]	; (12778 <gsm_enable_calling_line_identification+0x28>)
   1275c:	2300      	movs	r3, #0
   1275e:	9300      	str	r3, [sp, #0]
   12760:	2300      	movs	r3, #0
   12762:	4c06      	ldr	r4, [pc, #24]	; (1277c <gsm_enable_calling_line_identification+0x2c>)
   12764:	47a0      	blx	r4
   12766:	0003      	movs	r3, r0
}
   12768:	0018      	movs	r0, r3
   1276a:	46bd      	mov	sp, r7
   1276c:	b001      	add	sp, #4
   1276e:	bd90      	pop	{r4, r7, pc}
   12770:	00003a98 	.word	0x00003a98
   12774:	0002a56c 	.word	0x0002a56c
   12778:	0002a64c 	.word	0x0002a64c
   1277c:	000123dd 	.word	0x000123dd

00012780 <gsm_enable_connected_line_identification_presentation>:

enum gsm_error gsm_enable_connected_line_identification_presentation(void)
{
   12780:	b590      	push	{r4, r7, lr}
   12782:	b083      	sub	sp, #12
   12784:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+COLP=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12786:	4a06      	ldr	r2, [pc, #24]	; (127a0 <gsm_enable_connected_line_identification_presentation+0x20>)
   12788:	4906      	ldr	r1, [pc, #24]	; (127a4 <gsm_enable_connected_line_identification_presentation+0x24>)
   1278a:	4807      	ldr	r0, [pc, #28]	; (127a8 <gsm_enable_connected_line_identification_presentation+0x28>)
   1278c:	2300      	movs	r3, #0
   1278e:	9300      	str	r3, [sp, #0]
   12790:	2300      	movs	r3, #0
   12792:	4c06      	ldr	r4, [pc, #24]	; (127ac <gsm_enable_connected_line_identification_presentation+0x2c>)
   12794:	47a0      	blx	r4
   12796:	0003      	movs	r3, r0
}
   12798:	0018      	movs	r0, r3
   1279a:	46bd      	mov	sp, r7
   1279c:	b001      	add	sp, #4
   1279e:	bd90      	pop	{r4, r7, pc}
   127a0:	00001388 	.word	0x00001388
   127a4:	0002a56c 	.word	0x0002a56c
   127a8:	0002a658 	.word	0x0002a658
   127ac:	000123dd 	.word	0x000123dd

000127b0 <gsm_enable_sleep_mode>:


//The +CSCLK value can not be reset by AT&F or ATZ command.
enum gsm_error gsm_enable_sleep_mode(void)
{
   127b0:	b590      	push	{r4, r7, lr}
   127b2:	b083      	sub	sp, #12
   127b4:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CSCLK=1\r"), (const char*)RESPONS_OK,10000,0, NULL);
   127b6:	4a06      	ldr	r2, [pc, #24]	; (127d0 <gsm_enable_sleep_mode+0x20>)
   127b8:	4906      	ldr	r1, [pc, #24]	; (127d4 <gsm_enable_sleep_mode+0x24>)
   127ba:	4807      	ldr	r0, [pc, #28]	; (127d8 <gsm_enable_sleep_mode+0x28>)
   127bc:	2300      	movs	r3, #0
   127be:	9300      	str	r3, [sp, #0]
   127c0:	2300      	movs	r3, #0
   127c2:	4c06      	ldr	r4, [pc, #24]	; (127dc <gsm_enable_sleep_mode+0x2c>)
   127c4:	47a0      	blx	r4
   127c6:	0003      	movs	r3, r0
}
   127c8:	0018      	movs	r0, r3
   127ca:	46bd      	mov	sp, r7
   127cc:	b001      	add	sp, #4
   127ce:	bd90      	pop	{r4, r7, pc}
   127d0:	00002710 	.word	0x00002710
   127d4:	0002a56c 	.word	0x0002a56c
   127d8:	0002a664 	.word	0x0002a664
   127dc:	000123dd 	.word	0x000123dd

000127e0 <gsm_enable_list_current_calls_of_ME>:
	}
}


enum gsm_error gsm_enable_list_current_calls_of_ME(void)
{
   127e0:	b590      	push	{r4, r7, lr}
   127e2:	b083      	sub	sp, #12
   127e4:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CLCC=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
   127e6:	4a06      	ldr	r2, [pc, #24]	; (12800 <gsm_enable_list_current_calls_of_ME+0x20>)
   127e8:	4906      	ldr	r1, [pc, #24]	; (12804 <gsm_enable_list_current_calls_of_ME+0x24>)
   127ea:	4807      	ldr	r0, [pc, #28]	; (12808 <gsm_enable_list_current_calls_of_ME+0x28>)
   127ec:	2300      	movs	r3, #0
   127ee:	9300      	str	r3, [sp, #0]
   127f0:	2300      	movs	r3, #0
   127f2:	4c06      	ldr	r4, [pc, #24]	; (1280c <gsm_enable_list_current_calls_of_ME+0x2c>)
   127f4:	47a0      	blx	r4
   127f6:	0003      	movs	r3, r0
}
   127f8:	0018      	movs	r0, r3
   127fa:	46bd      	mov	sp, r7
   127fc:	b001      	add	sp, #4
   127fe:	bd90      	pop	{r4, r7, pc}
   12800:	00001388 	.word	0x00001388
   12804:	0002a56c 	.word	0x0002a56c
   12808:	0002a68c 	.word	0x0002a68c
   1280c:	000123dd 	.word	0x000123dd

00012810 <gsm_factory_reset>:

enum gsm_error gsm_factory_reset(void)
{
   12810:	b590      	push	{r4, r7, lr}
   12812:	b083      	sub	sp, #12
   12814:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT&F\r"), (const char*)RESPONS_OK,15000,0, NULL);
   12816:	4a06      	ldr	r2, [pc, #24]	; (12830 <gsm_factory_reset+0x20>)
   12818:	4906      	ldr	r1, [pc, #24]	; (12834 <gsm_factory_reset+0x24>)
   1281a:	4807      	ldr	r0, [pc, #28]	; (12838 <gsm_factory_reset+0x28>)
   1281c:	2300      	movs	r3, #0
   1281e:	9300      	str	r3, [sp, #0]
   12820:	2300      	movs	r3, #0
   12822:	4c06      	ldr	r4, [pc, #24]	; (1283c <gsm_factory_reset+0x2c>)
   12824:	47a0      	blx	r4
   12826:	0003      	movs	r3, r0
}
   12828:	0018      	movs	r0, r3
   1282a:	46bd      	mov	sp, r7
   1282c:	b001      	add	sp, #4
   1282e:	bd90      	pop	{r4, r7, pc}
   12830:	00003a98 	.word	0x00003a98
   12834:	0002a56c 	.word	0x0002a56c
   12838:	0002a698 	.word	0x0002a698
   1283c:	000123dd 	.word	0x000123dd

00012840 <gsm_echo_off>:

enum gsm_error gsm_echo_off(void)
{
   12840:	b590      	push	{r4, r7, lr}
   12842:	b083      	sub	sp, #12
   12844:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("ATE0\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12846:	4a06      	ldr	r2, [pc, #24]	; (12860 <gsm_echo_off+0x20>)
   12848:	4906      	ldr	r1, [pc, #24]	; (12864 <gsm_echo_off+0x24>)
   1284a:	4807      	ldr	r0, [pc, #28]	; (12868 <gsm_echo_off+0x28>)
   1284c:	2300      	movs	r3, #0
   1284e:	9300      	str	r3, [sp, #0]
   12850:	2300      	movs	r3, #0
   12852:	4c06      	ldr	r4, [pc, #24]	; (1286c <gsm_echo_off+0x2c>)
   12854:	47a0      	blx	r4
   12856:	0003      	movs	r3, r0
}
   12858:	0018      	movs	r0, r3
   1285a:	46bd      	mov	sp, r7
   1285c:	b001      	add	sp, #4
   1285e:	bd90      	pop	{r4, r7, pc}
   12860:	00001388 	.word	0x00001388
   12864:	0002a56c 	.word	0x0002a56c
   12868:	0002a6a0 	.word	0x0002a6a0
   1286c:	000123dd 	.word	0x000123dd

00012870 <gsm_select_sms_message_formate_text_mode>:

enum gsm_error gsm_select_sms_message_formate_text_mode(void) //PDU:0,TEXT:1
{
   12870:	b590      	push	{r4, r7, lr}
   12872:	b083      	sub	sp, #12
   12874:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CMGF=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12876:	4a06      	ldr	r2, [pc, #24]	; (12890 <gsm_select_sms_message_formate_text_mode+0x20>)
   12878:	4906      	ldr	r1, [pc, #24]	; (12894 <gsm_select_sms_message_formate_text_mode+0x24>)
   1287a:	4807      	ldr	r0, [pc, #28]	; (12898 <gsm_select_sms_message_formate_text_mode+0x28>)
   1287c:	2300      	movs	r3, #0
   1287e:	9300      	str	r3, [sp, #0]
   12880:	2300      	movs	r3, #0
   12882:	4c06      	ldr	r4, [pc, #24]	; (1289c <gsm_select_sms_message_formate_text_mode+0x2c>)
   12884:	47a0      	blx	r4
   12886:	0003      	movs	r3, r0
}
   12888:	0018      	movs	r0, r3
   1288a:	46bd      	mov	sp, r7
   1288c:	b001      	add	sp, #4
   1288e:	bd90      	pop	{r4, r7, pc}
   12890:	00001388 	.word	0x00001388
   12894:	0002a56c 	.word	0x0002a56c
   12898:	0002a6a8 	.word	0x0002a6a8
   1289c:	000123dd 	.word	0x000123dd

000128a0 <gsm_set_sms_text_mode_parameter>:

enum gsm_error gsm_set_sms_text_mode_parameter(void)
{
   128a0:	b590      	push	{r4, r7, lr}
   128a2:	b083      	sub	sp, #12
   128a4:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CSMP=17,167,0,0\r"), (const char*)RESPONS_OK,7000,0, NULL);
   128a6:	4a06      	ldr	r2, [pc, #24]	; (128c0 <gsm_set_sms_text_mode_parameter+0x20>)
   128a8:	4906      	ldr	r1, [pc, #24]	; (128c4 <gsm_set_sms_text_mode_parameter+0x24>)
   128aa:	4807      	ldr	r0, [pc, #28]	; (128c8 <gsm_set_sms_text_mode_parameter+0x28>)
   128ac:	2300      	movs	r3, #0
   128ae:	9300      	str	r3, [sp, #0]
   128b0:	2300      	movs	r3, #0
   128b2:	4c06      	ldr	r4, [pc, #24]	; (128cc <gsm_set_sms_text_mode_parameter+0x2c>)
   128b4:	47a0      	blx	r4
   128b6:	0003      	movs	r3, r0
}
   128b8:	0018      	movs	r0, r3
   128ba:	46bd      	mov	sp, r7
   128bc:	b001      	add	sp, #4
   128be:	bd90      	pop	{r4, r7, pc}
   128c0:	00001b58 	.word	0x00001b58
   128c4:	0002a56c 	.word	0x0002a56c
   128c8:	0002a6b4 	.word	0x0002a6b4
   128cc:	000123dd 	.word	0x000123dd

000128d0 <gsm_getsignalstrength>:
20--25   4
26--31   5

*/
uint8_t gsm_getsignalstrength(void)
{
   128d0:	b5b0      	push	{r4, r5, r7, lr}
   128d2:	b088      	sub	sp, #32
   128d4:	af02      	add	r7, sp, #8
	
	uint8_t sig_strength;
	
	const uint8_t MAX_BUFFER = 100;
   128d6:	2316      	movs	r3, #22
   128d8:	18fb      	adds	r3, r7, r3
   128da:	2264      	movs	r2, #100	; 0x64
   128dc:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   128de:	2316      	movs	r3, #22
   128e0:	18fb      	adds	r3, r7, r3
   128e2:	781b      	ldrb	r3, [r3, #0]
   128e4:	2101      	movs	r1, #1
   128e6:	0018      	movs	r0, r3
   128e8:	4b60      	ldr	r3, [pc, #384]	; (12a6c <gsm_getsignalstrength+0x19c>)
   128ea:	4798      	blx	r3
   128ec:	0003      	movs	r3, r0
   128ee:	613b      	str	r3, [r7, #16]
	if (cmdx == NULL)
   128f0:	693b      	ldr	r3, [r7, #16]
   128f2:	2b00      	cmp	r3, #0
   128f4:	d105      	bne.n	12902 <gsm_getsignalstrength+0x32>
	{
		free(cmdx);
   128f6:	693b      	ldr	r3, [r7, #16]
   128f8:	0018      	movs	r0, r3
   128fa:	4b5d      	ldr	r3, [pc, #372]	; (12a70 <gsm_getsignalstrength+0x1a0>)
   128fc:	4798      	blx	r3
		return 0;
   128fe:	2300      	movs	r3, #0
   12900:	e0af      	b.n	12a62 <gsm_getsignalstrength+0x192>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   12902:	2316      	movs	r3, #22
   12904:	18fb      	adds	r3, r7, r3
   12906:	781a      	ldrb	r2, [r3, #0]
   12908:	693b      	ldr	r3, [r7, #16]
   1290a:	2100      	movs	r1, #0
   1290c:	0018      	movs	r0, r3
   1290e:	4b59      	ldr	r3, [pc, #356]	; (12a74 <gsm_getsignalstrength+0x1a4>)
   12910:	4798      	blx	r3
	enum gsm_error gsm_err =  gsm_send_at_command((const char*)("AT+CSQ\r"), (const char*)RESPONS_OK,5000,MAX_BUFFER,cmdx);
   12912:	230f      	movs	r3, #15
   12914:	18fc      	adds	r4, r7, r3
   12916:	2316      	movs	r3, #22
   12918:	18fb      	adds	r3, r7, r3
   1291a:	781a      	ldrb	r2, [r3, #0]
   1291c:	4d56      	ldr	r5, [pc, #344]	; (12a78 <gsm_getsignalstrength+0x1a8>)
   1291e:	4957      	ldr	r1, [pc, #348]	; (12a7c <gsm_getsignalstrength+0x1ac>)
   12920:	4857      	ldr	r0, [pc, #348]	; (12a80 <gsm_getsignalstrength+0x1b0>)
   12922:	693b      	ldr	r3, [r7, #16]
   12924:	9300      	str	r3, [sp, #0]
   12926:	0013      	movs	r3, r2
   12928:	002a      	movs	r2, r5
   1292a:	4d56      	ldr	r5, [pc, #344]	; (12a84 <gsm_getsignalstrength+0x1b4>)
   1292c:	47a8      	blx	r5
   1292e:	0003      	movs	r3, r0
   12930:	7023      	strb	r3, [r4, #0]
	
	if(gsm_err == GSM_ERROR_NONE)
   12932:	230f      	movs	r3, #15
   12934:	18fb      	adds	r3, r7, r3
   12936:	781b      	ldrb	r3, [r3, #0]
   12938:	2b00      	cmp	r3, #0
   1293a:	d000      	beq.n	1293e <gsm_getsignalstrength+0x6e>
   1293c:	e086      	b.n	12a4c <gsm_getsignalstrength+0x17c>
	{
		if (strstr(cmdx,"99")==NULL)
   1293e:	4a52      	ldr	r2, [pc, #328]	; (12a88 <gsm_getsignalstrength+0x1b8>)
   12940:	693b      	ldr	r3, [r7, #16]
   12942:	0011      	movs	r1, r2
   12944:	0018      	movs	r0, r3
   12946:	4b51      	ldr	r3, [pc, #324]	; (12a8c <gsm_getsignalstrength+0x1bc>)
   12948:	4798      	blx	r3
   1294a:	1e03      	subs	r3, r0, #0
   1294c:	d000      	beq.n	12950 <gsm_getsignalstrength+0x80>
   1294e:	e078      	b.n	12a42 <gsm_getsignalstrength+0x172>
		{
			char *ptr_tocken;
			ptr_tocken = strtok(cmdx,":");
   12950:	4a4f      	ldr	r2, [pc, #316]	; (12a90 <gsm_getsignalstrength+0x1c0>)
   12952:	693b      	ldr	r3, [r7, #16]
   12954:	0011      	movs	r1, r2
   12956:	0018      	movs	r0, r3
   12958:	4b4e      	ldr	r3, [pc, #312]	; (12a94 <gsm_getsignalstrength+0x1c4>)
   1295a:	4798      	blx	r3
   1295c:	0003      	movs	r3, r0
   1295e:	60bb      	str	r3, [r7, #8]
			ptr_tocken = strtok(NULL,":");
   12960:	4b4b      	ldr	r3, [pc, #300]	; (12a90 <gsm_getsignalstrength+0x1c0>)
   12962:	0019      	movs	r1, r3
   12964:	2000      	movs	r0, #0
   12966:	4b4b      	ldr	r3, [pc, #300]	; (12a94 <gsm_getsignalstrength+0x1c4>)
   12968:	4798      	blx	r3
   1296a:	0003      	movs	r3, r0
   1296c:	60bb      	str	r3, [r7, #8]
			ptr_tocken = strtok(ptr_tocken,",");
   1296e:	4a4a      	ldr	r2, [pc, #296]	; (12a98 <gsm_getsignalstrength+0x1c8>)
   12970:	68bb      	ldr	r3, [r7, #8]
   12972:	0011      	movs	r1, r2
   12974:	0018      	movs	r0, r3
   12976:	4b47      	ldr	r3, [pc, #284]	; (12a94 <gsm_getsignalstrength+0x1c4>)
   12978:	4798      	blx	r3
   1297a:	0003      	movs	r3, r0
   1297c:	60bb      	str	r3, [r7, #8]
			RemoveSpaces(ptr_tocken);
   1297e:	68bb      	ldr	r3, [r7, #8]
   12980:	0018      	movs	r0, r3
   12982:	4b46      	ldr	r3, [pc, #280]	; (12a9c <gsm_getsignalstrength+0x1cc>)
   12984:	4798      	blx	r3
			uint8_t nw = atoi(ptr_tocken);
   12986:	68bb      	ldr	r3, [r7, #8]
   12988:	0018      	movs	r0, r3
   1298a:	4b45      	ldr	r3, [pc, #276]	; (12aa0 <gsm_getsignalstrength+0x1d0>)
   1298c:	4798      	blx	r3
   1298e:	0002      	movs	r2, r0
   12990:	1dfb      	adds	r3, r7, #7
   12992:	701a      	strb	r2, [r3, #0]
			if (nw==0 || nw==1 || nw== 99)
   12994:	1dfb      	adds	r3, r7, #7
   12996:	781b      	ldrb	r3, [r3, #0]
   12998:	2b00      	cmp	r3, #0
   1299a:	d007      	beq.n	129ac <gsm_getsignalstrength+0xdc>
   1299c:	1dfb      	adds	r3, r7, #7
   1299e:	781b      	ldrb	r3, [r3, #0]
   129a0:	2b01      	cmp	r3, #1
   129a2:	d003      	beq.n	129ac <gsm_getsignalstrength+0xdc>
   129a4:	1dfb      	adds	r3, r7, #7
   129a6:	781b      	ldrb	r3, [r3, #0]
   129a8:	2b63      	cmp	r3, #99	; 0x63
   129aa:	d104      	bne.n	129b6 <gsm_getsignalstrength+0xe6>
			{
				sig_strength = 0;
   129ac:	2317      	movs	r3, #23
   129ae:	18fb      	adds	r3, r7, r3
   129b0:	2200      	movs	r2, #0
   129b2:	701a      	strb	r2, [r3, #0]
   129b4:	e04e      	b.n	12a54 <gsm_getsignalstrength+0x184>
			}
			else
			{
				if (nw>=2 && nw<=7)
   129b6:	1dfb      	adds	r3, r7, #7
   129b8:	781b      	ldrb	r3, [r3, #0]
   129ba:	2b01      	cmp	r3, #1
   129bc:	d908      	bls.n	129d0 <gsm_getsignalstrength+0x100>
   129be:	1dfb      	adds	r3, r7, #7
   129c0:	781b      	ldrb	r3, [r3, #0]
   129c2:	2b07      	cmp	r3, #7
   129c4:	d804      	bhi.n	129d0 <gsm_getsignalstrength+0x100>
				{
					sig_strength = 1;
   129c6:	2317      	movs	r3, #23
   129c8:	18fb      	adds	r3, r7, r3
   129ca:	2201      	movs	r2, #1
   129cc:	701a      	strb	r2, [r3, #0]
   129ce:	e041      	b.n	12a54 <gsm_getsignalstrength+0x184>
				}
				else if (nw>=8 && nw<=13)
   129d0:	1dfb      	adds	r3, r7, #7
   129d2:	781b      	ldrb	r3, [r3, #0]
   129d4:	2b07      	cmp	r3, #7
   129d6:	d908      	bls.n	129ea <gsm_getsignalstrength+0x11a>
   129d8:	1dfb      	adds	r3, r7, #7
   129da:	781b      	ldrb	r3, [r3, #0]
   129dc:	2b0d      	cmp	r3, #13
   129de:	d804      	bhi.n	129ea <gsm_getsignalstrength+0x11a>
				{
					sig_strength = 2;
   129e0:	2317      	movs	r3, #23
   129e2:	18fb      	adds	r3, r7, r3
   129e4:	2202      	movs	r2, #2
   129e6:	701a      	strb	r2, [r3, #0]
   129e8:	e034      	b.n	12a54 <gsm_getsignalstrength+0x184>
				}
				else if (nw>=14 && nw<=19)
   129ea:	1dfb      	adds	r3, r7, #7
   129ec:	781b      	ldrb	r3, [r3, #0]
   129ee:	2b0d      	cmp	r3, #13
   129f0:	d908      	bls.n	12a04 <gsm_getsignalstrength+0x134>
   129f2:	1dfb      	adds	r3, r7, #7
   129f4:	781b      	ldrb	r3, [r3, #0]
   129f6:	2b13      	cmp	r3, #19
   129f8:	d804      	bhi.n	12a04 <gsm_getsignalstrength+0x134>
				{
					sig_strength = 3;
   129fa:	2317      	movs	r3, #23
   129fc:	18fb      	adds	r3, r7, r3
   129fe:	2203      	movs	r2, #3
   12a00:	701a      	strb	r2, [r3, #0]
   12a02:	e027      	b.n	12a54 <gsm_getsignalstrength+0x184>
				}
				else if (nw>=20 && nw<=25)
   12a04:	1dfb      	adds	r3, r7, #7
   12a06:	781b      	ldrb	r3, [r3, #0]
   12a08:	2b13      	cmp	r3, #19
   12a0a:	d908      	bls.n	12a1e <gsm_getsignalstrength+0x14e>
   12a0c:	1dfb      	adds	r3, r7, #7
   12a0e:	781b      	ldrb	r3, [r3, #0]
   12a10:	2b19      	cmp	r3, #25
   12a12:	d804      	bhi.n	12a1e <gsm_getsignalstrength+0x14e>
				{
					sig_strength = 4;
   12a14:	2317      	movs	r3, #23
   12a16:	18fb      	adds	r3, r7, r3
   12a18:	2204      	movs	r2, #4
   12a1a:	701a      	strb	r2, [r3, #0]
   12a1c:	e01a      	b.n	12a54 <gsm_getsignalstrength+0x184>
				}
				else if (nw>=26 && nw<=31)
   12a1e:	1dfb      	adds	r3, r7, #7
   12a20:	781b      	ldrb	r3, [r3, #0]
   12a22:	2b19      	cmp	r3, #25
   12a24:	d908      	bls.n	12a38 <gsm_getsignalstrength+0x168>
   12a26:	1dfb      	adds	r3, r7, #7
   12a28:	781b      	ldrb	r3, [r3, #0]
   12a2a:	2b1f      	cmp	r3, #31
   12a2c:	d804      	bhi.n	12a38 <gsm_getsignalstrength+0x168>
				{
					sig_strength = 5;
   12a2e:	2317      	movs	r3, #23
   12a30:	18fb      	adds	r3, r7, r3
   12a32:	2205      	movs	r2, #5
   12a34:	701a      	strb	r2, [r3, #0]
   12a36:	e00d      	b.n	12a54 <gsm_getsignalstrength+0x184>
				}
				else
				{
					sig_strength = 0;
   12a38:	2317      	movs	r3, #23
   12a3a:	18fb      	adds	r3, r7, r3
   12a3c:	2200      	movs	r2, #0
   12a3e:	701a      	strb	r2, [r3, #0]
   12a40:	e008      	b.n	12a54 <gsm_getsignalstrength+0x184>
				}
			}
		}
		else
		{
			sig_strength = 0;
   12a42:	2317      	movs	r3, #23
   12a44:	18fb      	adds	r3, r7, r3
   12a46:	2200      	movs	r2, #0
   12a48:	701a      	strb	r2, [r3, #0]
   12a4a:	e003      	b.n	12a54 <gsm_getsignalstrength+0x184>
		}
	}
	else
	{
		sig_strength = 0;
   12a4c:	2317      	movs	r3, #23
   12a4e:	18fb      	adds	r3, r7, r3
   12a50:	2200      	movs	r2, #0
   12a52:	701a      	strb	r2, [r3, #0]
	}
	
	free(cmdx);
   12a54:	693b      	ldr	r3, [r7, #16]
   12a56:	0018      	movs	r0, r3
   12a58:	4b05      	ldr	r3, [pc, #20]	; (12a70 <gsm_getsignalstrength+0x1a0>)
   12a5a:	4798      	blx	r3
	
	return sig_strength;
   12a5c:	2317      	movs	r3, #23
   12a5e:	18fb      	adds	r3, r7, r3
   12a60:	781b      	ldrb	r3, [r3, #0]
}
   12a62:	0018      	movs	r0, r3
   12a64:	46bd      	mov	sp, r7
   12a66:	b006      	add	sp, #24
   12a68:	bdb0      	pop	{r4, r5, r7, pc}
   12a6a:	46c0      	nop			; (mov r8, r8)
   12a6c:	000297a9 	.word	0x000297a9
   12a70:	00029849 	.word	0x00029849
   12a74:	000298b7 	.word	0x000298b7
   12a78:	00001388 	.word	0x00001388
   12a7c:	0002a56c 	.word	0x0002a56c
   12a80:	0002a6e0 	.word	0x0002a6e0
   12a84:	000123dd 	.word	0x000123dd
   12a88:	0002a6e8 	.word	0x0002a6e8
   12a8c:	00029b77 	.word	0x00029b77
   12a90:	0002a684 	.word	0x0002a684
   12a94:	00029ba9 	.word	0x00029ba9
   12a98:	0002a688 	.word	0x0002a688
   12a9c:	00012aa5 	.word	0x00012aa5
   12aa0:	0002979d 	.word	0x0002979d

00012aa4 <RemoveSpaces>:

void RemoveSpaces(char* source)
{
   12aa4:	b580      	push	{r7, lr}
   12aa6:	b084      	sub	sp, #16
   12aa8:	af00      	add	r7, sp, #0
   12aaa:	6078      	str	r0, [r7, #4]
	char* i = source;
   12aac:	687b      	ldr	r3, [r7, #4]
   12aae:	60fb      	str	r3, [r7, #12]
	char* j = source;
   12ab0:	687b      	ldr	r3, [r7, #4]
   12ab2:	60bb      	str	r3, [r7, #8]
	while(*j != 0)
   12ab4:	e00c      	b.n	12ad0 <RemoveSpaces+0x2c>
	{
		*i = *j++;
   12ab6:	68bb      	ldr	r3, [r7, #8]
   12ab8:	1c5a      	adds	r2, r3, #1
   12aba:	60ba      	str	r2, [r7, #8]
   12abc:	781a      	ldrb	r2, [r3, #0]
   12abe:	68fb      	ldr	r3, [r7, #12]
   12ac0:	701a      	strb	r2, [r3, #0]
		if(*i != ' ')
   12ac2:	68fb      	ldr	r3, [r7, #12]
   12ac4:	781b      	ldrb	r3, [r3, #0]
   12ac6:	2b20      	cmp	r3, #32
   12ac8:	d002      	beq.n	12ad0 <RemoveSpaces+0x2c>
		i++;
   12aca:	68fb      	ldr	r3, [r7, #12]
   12acc:	3301      	adds	r3, #1
   12ace:	60fb      	str	r3, [r7, #12]
	while(*j != 0)
   12ad0:	68bb      	ldr	r3, [r7, #8]
   12ad2:	781b      	ldrb	r3, [r3, #0]
   12ad4:	2b00      	cmp	r3, #0
   12ad6:	d1ee      	bne.n	12ab6 <RemoveSpaces+0x12>
	}
	*i = 0;
   12ad8:	68fb      	ldr	r3, [r7, #12]
   12ada:	2200      	movs	r2, #0
   12adc:	701a      	strb	r2, [r3, #0]
}
   12ade:	46c0      	nop			; (mov r8, r8)
   12ae0:	46bd      	mov	sp, r7
   12ae2:	b004      	add	sp, #16
   12ae4:	bd80      	pop	{r7, pc}
	...

00012ae8 <gsm_enable_new_sms_message_indications>:
{
	return gsm_send_at_command((const char*)("AT&F\r"), (const char*)RESPONS_OK,10000,0,NULL);
}

enum gsm_error gsm_enable_new_sms_message_indications(void)
{
   12ae8:	b590      	push	{r4, r7, lr}
   12aea:	b083      	sub	sp, #12
   12aec:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CNMI=2,1,0,0,0\r"), (const char*)RESPONS_OK,5000,0,NULL);
   12aee:	4a06      	ldr	r2, [pc, #24]	; (12b08 <gsm_enable_new_sms_message_indications+0x20>)
   12af0:	4906      	ldr	r1, [pc, #24]	; (12b0c <gsm_enable_new_sms_message_indications+0x24>)
   12af2:	4807      	ldr	r0, [pc, #28]	; (12b10 <gsm_enable_new_sms_message_indications+0x28>)
   12af4:	2300      	movs	r3, #0
   12af6:	9300      	str	r3, [sp, #0]
   12af8:	2300      	movs	r3, #0
   12afa:	4c06      	ldr	r4, [pc, #24]	; (12b14 <gsm_enable_new_sms_message_indications+0x2c>)
   12afc:	47a0      	blx	r4
   12afe:	0003      	movs	r3, r0
}
   12b00:	0018      	movs	r0, r3
   12b02:	46bd      	mov	sp, r7
   12b04:	b001      	add	sp, #4
   12b06:	bd90      	pop	{r4, r7, pc}
   12b08:	00001388 	.word	0x00001388
   12b0c:	0002a56c 	.word	0x0002a56c
   12b10:	0002a6ec 	.word	0x0002a6ec
   12b14:	000123dd 	.word	0x000123dd

00012b18 <gsm_enable_csqn_urc>:
{
	return gsm_send_at_command((const char*)("AT+CNMI=1,0,0,0,0\r"), (const char*)RESPONS_OK,5000,0,NULL);
}

enum gsm_error gsm_enable_csqn_urc(void)
{
   12b18:	b590      	push	{r4, r7, lr}
   12b1a:	b083      	sub	sp, #12
   12b1c:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+EXUNSOL=\"SQ\",1\r"), (const char*)RESPONS_OK,1000,0,NULL);
   12b1e:	23fa      	movs	r3, #250	; 0xfa
   12b20:	009a      	lsls	r2, r3, #2
   12b22:	4906      	ldr	r1, [pc, #24]	; (12b3c <gsm_enable_csqn_urc+0x24>)
   12b24:	4806      	ldr	r0, [pc, #24]	; (12b40 <gsm_enable_csqn_urc+0x28>)
   12b26:	2300      	movs	r3, #0
   12b28:	9300      	str	r3, [sp, #0]
   12b2a:	2300      	movs	r3, #0
   12b2c:	4c05      	ldr	r4, [pc, #20]	; (12b44 <gsm_enable_csqn_urc+0x2c>)
   12b2e:	47a0      	blx	r4
   12b30:	0003      	movs	r3, r0
}
   12b32:	0018      	movs	r0, r3
   12b34:	46bd      	mov	sp, r7
   12b36:	b001      	add	sp, #4
   12b38:	bd90      	pop	{r4, r7, pc}
   12b3a:	46c0      	nop			; (mov r8, r8)
   12b3c:	0002a56c 	.word	0x0002a56c
   12b40:	0002a714 	.word	0x0002a714
   12b44:	000123dd 	.word	0x000123dd

00012b48 <gsm_disable_csqn_urc>:

enum gsm_error gsm_disable_csqn_urc(void)
{
   12b48:	b590      	push	{r4, r7, lr}
   12b4a:	b083      	sub	sp, #12
   12b4c:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+EXUNSOL=\"SQ\",0\r"), (const char*)RESPONS_OK,1000,0,NULL);
   12b4e:	23fa      	movs	r3, #250	; 0xfa
   12b50:	009a      	lsls	r2, r3, #2
   12b52:	4906      	ldr	r1, [pc, #24]	; (12b6c <gsm_disable_csqn_urc+0x24>)
   12b54:	4806      	ldr	r0, [pc, #24]	; (12b70 <gsm_disable_csqn_urc+0x28>)
   12b56:	2300      	movs	r3, #0
   12b58:	9300      	str	r3, [sp, #0]
   12b5a:	2300      	movs	r3, #0
   12b5c:	4c05      	ldr	r4, [pc, #20]	; (12b74 <gsm_disable_csqn_urc+0x2c>)
   12b5e:	47a0      	blx	r4
   12b60:	0003      	movs	r3, r0
}
   12b62:	0018      	movs	r0, r3
   12b64:	46bd      	mov	sp, r7
   12b66:	b001      	add	sp, #4
   12b68:	bd90      	pop	{r4, r7, pc}
   12b6a:	46c0      	nop			; (mov r8, r8)
   12b6c:	0002a56c 	.word	0x0002a56c
   12b70:	0002a728 	.word	0x0002a728
   12b74:	000123dd 	.word	0x000123dd

00012b78 <gsm_send_sms>:


enum gsm_error gsm_send_sms(const char *phone_number, const char *message)
{
   12b78:	b5b0      	push	{r4, r5, r7, lr}
   12b7a:	b088      	sub	sp, #32
   12b7c:	af02      	add	r7, sp, #8
   12b7e:	6078      	str	r0, [r7, #4]
   12b80:	6039      	str	r1, [r7, #0]
	/* Double-check the message length is acceptable (160 byte max payload) */
	if (strlen(message) > 250)
   12b82:	683b      	ldr	r3, [r7, #0]
   12b84:	0018      	movs	r0, r3
   12b86:	4b3b      	ldr	r3, [pc, #236]	; (12c74 <gsm_send_sms+0xfc>)
   12b88:	4798      	blx	r3
   12b8a:	0003      	movs	r3, r0
   12b8c:	2bfa      	cmp	r3, #250	; 0xfa
   12b8e:	d901      	bls.n	12b94 <gsm_send_sms+0x1c>
	{
		return GSM_ERROR_MESSAGE_LENGTH;
   12b90:	2303      	movs	r3, #3
   12b92:	e06b      	b.n	12c6c <gsm_send_sms+0xf4>
	}
	/* Double-check the recipient phone number length */
	if (strlen(phone_number) < 6)
   12b94:	687b      	ldr	r3, [r7, #4]
   12b96:	0018      	movs	r0, r3
   12b98:	4b36      	ldr	r3, [pc, #216]	; (12c74 <gsm_send_sms+0xfc>)
   12b9a:	4798      	blx	r3
   12b9c:	0003      	movs	r3, r0
   12b9e:	2b05      	cmp	r3, #5
   12ba0:	d801      	bhi.n	12ba6 <gsm_send_sms+0x2e>
	{
		return GSM_ERROR_PHONE_NUMBER_LENGTH;
   12ba2:	2304      	movs	r3, #4
   12ba4:	e062      	b.n	12c6c <gsm_send_sms+0xf4>
	}
	
	enum gsm_error err;
	const uint8_t MAX_BUFFER = 250;
   12ba6:	2317      	movs	r3, #23
   12ba8:	18fb      	adds	r3, r7, r3
   12baa:	22fa      	movs	r2, #250	; 0xfa
   12bac:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   12bae:	2317      	movs	r3, #23
   12bb0:	18fb      	adds	r3, r7, r3
   12bb2:	781b      	ldrb	r3, [r3, #0]
   12bb4:	2101      	movs	r1, #1
   12bb6:	0018      	movs	r0, r3
   12bb8:	4b2f      	ldr	r3, [pc, #188]	; (12c78 <gsm_send_sms+0x100>)
   12bba:	4798      	blx	r3
   12bbc:	0003      	movs	r3, r0
   12bbe:	613b      	str	r3, [r7, #16]
	//buffer created???
	if (cmdx == NULL)
   12bc0:	693b      	ldr	r3, [r7, #16]
   12bc2:	2b00      	cmp	r3, #0
   12bc4:	d101      	bne.n	12bca <gsm_send_sms+0x52>
	{
		return 0;
   12bc6:	2300      	movs	r3, #0
   12bc8:	e050      	b.n	12c6c <gsm_send_sms+0xf4>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   12bca:	2317      	movs	r3, #23
   12bcc:	18fb      	adds	r3, r7, r3
   12bce:	781a      	ldrb	r2, [r3, #0]
   12bd0:	693b      	ldr	r3, [r7, #16]
   12bd2:	2100      	movs	r1, #0
   12bd4:	0018      	movs	r0, r3
   12bd6:	4b29      	ldr	r3, [pc, #164]	; (12c7c <gsm_send_sms+0x104>)
   12bd8:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER, "AT+CMGS=\"%s\"\r", phone_number);
   12bda:	2317      	movs	r3, #23
   12bdc:	18fb      	adds	r3, r7, r3
   12bde:	7819      	ldrb	r1, [r3, #0]
   12be0:	687b      	ldr	r3, [r7, #4]
   12be2:	4a27      	ldr	r2, [pc, #156]	; (12c80 <gsm_send_sms+0x108>)
   12be4:	6938      	ldr	r0, [r7, #16]
   12be6:	4c27      	ldr	r4, [pc, #156]	; (12c84 <gsm_send_sms+0x10c>)
   12be8:	47a0      	blx	r4
	if (gsm_send_at_command((const char*)cmdx, (const char*)">",60000, 0, NULL)==GSM_ERROR_NONE)
   12bea:	4a27      	ldr	r2, [pc, #156]	; (12c88 <gsm_send_sms+0x110>)
   12bec:	4927      	ldr	r1, [pc, #156]	; (12c8c <gsm_send_sms+0x114>)
   12bee:	6938      	ldr	r0, [r7, #16]
   12bf0:	2300      	movs	r3, #0
   12bf2:	9300      	str	r3, [sp, #0]
   12bf4:	2300      	movs	r3, #0
   12bf6:	4c26      	ldr	r4, [pc, #152]	; (12c90 <gsm_send_sms+0x118>)
   12bf8:	47a0      	blx	r4
   12bfa:	1e03      	subs	r3, r0, #0
   12bfc:	d131      	bne.n	12c62 <gsm_send_sms+0xea>
	{
		vTaskDelay(500/portTICK_PERIOD_MS);		//todo: check if sms is reaching time is reduced than 30 seconds, if yes, than keep this statement, else remove it.
   12bfe:	23fa      	movs	r3, #250	; 0xfa
   12c00:	005b      	lsls	r3, r3, #1
   12c02:	0018      	movs	r0, r3
   12c04:	4b23      	ldr	r3, [pc, #140]	; (12c94 <gsm_send_sms+0x11c>)
   12c06:	4798      	blx	r3
		memset(cmdx, '\0', MAX_BUFFER);
   12c08:	2317      	movs	r3, #23
   12c0a:	18fb      	adds	r3, r7, r3
   12c0c:	781a      	ldrb	r2, [r3, #0]
   12c0e:	693b      	ldr	r3, [r7, #16]
   12c10:	2100      	movs	r1, #0
   12c12:	0018      	movs	r0, r3
   12c14:	4b19      	ldr	r3, [pc, #100]	; (12c7c <gsm_send_sms+0x104>)
   12c16:	4798      	blx	r3
		
		snprintf((char*)cmdx, MAX_BUFFER, "%s\x1A\x0D",message);
   12c18:	2317      	movs	r3, #23
   12c1a:	18fb      	adds	r3, r7, r3
   12c1c:	7819      	ldrb	r1, [r3, #0]
   12c1e:	683b      	ldr	r3, [r7, #0]
   12c20:	4a1d      	ldr	r2, [pc, #116]	; (12c98 <gsm_send_sms+0x120>)
   12c22:	6938      	ldr	r0, [r7, #16]
   12c24:	4c17      	ldr	r4, [pc, #92]	; (12c84 <gsm_send_sms+0x10c>)
   12c26:	47a0      	blx	r4
		
		err = gsm_send_at_command((const char*)cmdx, (const char*)RESPONS_OK,60000, 0, NULL);
   12c28:	230f      	movs	r3, #15
   12c2a:	18fc      	adds	r4, r7, r3
   12c2c:	4a16      	ldr	r2, [pc, #88]	; (12c88 <gsm_send_sms+0x110>)
   12c2e:	491b      	ldr	r1, [pc, #108]	; (12c9c <gsm_send_sms+0x124>)
   12c30:	6938      	ldr	r0, [r7, #16]
   12c32:	2300      	movs	r3, #0
   12c34:	9300      	str	r3, [sp, #0]
   12c36:	2300      	movs	r3, #0
   12c38:	4d15      	ldr	r5, [pc, #84]	; (12c90 <gsm_send_sms+0x118>)
   12c3a:	47a8      	blx	r5
   12c3c:	0003      	movs	r3, r0
   12c3e:	7023      	strb	r3, [r4, #0]
		if (err == GSM_ERROR_NONE)
   12c40:	230f      	movs	r3, #15
   12c42:	18fb      	adds	r3, r7, r3
   12c44:	781b      	ldrb	r3, [r3, #0]
   12c46:	2b00      	cmp	r3, #0
   12c48:	d105      	bne.n	12c56 <gsm_send_sms+0xde>
		{
			free(cmdx);
   12c4a:	693b      	ldr	r3, [r7, #16]
   12c4c:	0018      	movs	r0, r3
   12c4e:	4b14      	ldr	r3, [pc, #80]	; (12ca0 <gsm_send_sms+0x128>)
   12c50:	4798      	blx	r3
			return GSM_ERROR_NONE;
   12c52:	2300      	movs	r3, #0
   12c54:	e00a      	b.n	12c6c <gsm_send_sms+0xf4>
		}
		else
		{
			free(cmdx);
   12c56:	693b      	ldr	r3, [r7, #16]
   12c58:	0018      	movs	r0, r3
   12c5a:	4b11      	ldr	r3, [pc, #68]	; (12ca0 <gsm_send_sms+0x128>)
   12c5c:	4798      	blx	r3
			return GSM_ERROR_SMS_SEND_FAILED;
   12c5e:	2306      	movs	r3, #6
   12c60:	e004      	b.n	12c6c <gsm_send_sms+0xf4>
		}
	}
	else
	{
		free(cmdx);
   12c62:	693b      	ldr	r3, [r7, #16]
   12c64:	0018      	movs	r0, r3
   12c66:	4b0e      	ldr	r3, [pc, #56]	; (12ca0 <gsm_send_sms+0x128>)
   12c68:	4798      	blx	r3
		return GSM_ERROR_SMS_SEND_FAILED;
   12c6a:	2306      	movs	r3, #6
	}
}
   12c6c:	0018      	movs	r0, r3
   12c6e:	46bd      	mov	sp, r7
   12c70:	b006      	add	sp, #24
   12c72:	bdb0      	pop	{r4, r5, r7, pc}
   12c74:	00029b47 	.word	0x00029b47
   12c78:	000297a9 	.word	0x000297a9
   12c7c:	000298b7 	.word	0x000298b7
   12c80:	0002a73c 	.word	0x0002a73c
   12c84:	00029a59 	.word	0x00029a59
   12c88:	0000ea60 	.word	0x0000ea60
   12c8c:	0002a74c 	.word	0x0002a74c
   12c90:	000123dd 	.word	0x000123dd
   12c94:	00020669 	.word	0x00020669
   12c98:	0002a750 	.word	0x0002a750
   12c9c:	0002a56c 	.word	0x0002a56c
   12ca0:	00029849 	.word	0x00029849

00012ca4 <gsm_read_sms>:
	free(cmdx);
	return sms_index;
}

enum gsm_error gsm_read_sms(uint8_t position, char *phone_number, uint8_t max_phone_len, char *SMS_text, uint8_t max_SMS_len)
{
   12ca4:	b590      	push	{r4, r7, lr}
   12ca6:	b08f      	sub	sp, #60	; 0x3c
   12ca8:	af02      	add	r7, sp, #8
   12caa:	60b9      	str	r1, [r7, #8]
   12cac:	0011      	movs	r1, r2
   12cae:	607b      	str	r3, [r7, #4]
   12cb0:	230f      	movs	r3, #15
   12cb2:	18fb      	adds	r3, r7, r3
   12cb4:	1c02      	adds	r2, r0, #0
   12cb6:	701a      	strb	r2, [r3, #0]
   12cb8:	230e      	movs	r3, #14
   12cba:	18fb      	adds	r3, r7, r3
   12cbc:	1c0a      	adds	r2, r1, #0
   12cbe:	701a      	strb	r2, [r3, #0]
	const uint8_t MAX_BUFFER = 230;
   12cc0:	232f      	movs	r3, #47	; 0x2f
   12cc2:	18fb      	adds	r3, r7, r3
   12cc4:	22e6      	movs	r2, #230	; 0xe6
   12cc6:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   12cc8:	232f      	movs	r3, #47	; 0x2f
   12cca:	18fb      	adds	r3, r7, r3
   12ccc:	781b      	ldrb	r3, [r3, #0]
   12cce:	2101      	movs	r1, #1
   12cd0:	0018      	movs	r0, r3
   12cd2:	4b6e      	ldr	r3, [pc, #440]	; (12e8c <gsm_read_sms+0x1e8>)
   12cd4:	4798      	blx	r3
   12cd6:	0003      	movs	r3, r0
   12cd8:	62bb      	str	r3, [r7, #40]	; 0x28
	if (cmdx == NULL)
   12cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12cdc:	2b00      	cmp	r3, #0
   12cde:	d105      	bne.n	12cec <gsm_read_sms+0x48>
	{
		free(cmdx);
   12ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12ce2:	0018      	movs	r0, r3
   12ce4:	4b6a      	ldr	r3, [pc, #424]	; (12e90 <gsm_read_sms+0x1ec>)
   12ce6:	4798      	blx	r3
		return 0;
   12ce8:	2300      	movs	r3, #0
   12cea:	e0ca      	b.n	12e82 <gsm_read_sms+0x1de>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   12cec:	232f      	movs	r3, #47	; 0x2f
   12cee:	18fb      	adds	r3, r7, r3
   12cf0:	781a      	ldrb	r2, [r3, #0]
   12cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12cf4:	2100      	movs	r1, #0
   12cf6:	0018      	movs	r0, r3
   12cf8:	4b66      	ldr	r3, [pc, #408]	; (12e94 <gsm_read_sms+0x1f0>)
   12cfa:	4798      	blx	r3
	
	uint8_t cmgr_at_command[10] = {0};
   12cfc:	2310      	movs	r3, #16
   12cfe:	18fb      	adds	r3, r7, r3
   12d00:	0018      	movs	r0, r3
   12d02:	230a      	movs	r3, #10
   12d04:	001a      	movs	r2, r3
   12d06:	2100      	movs	r1, #0
   12d08:	4b62      	ldr	r3, [pc, #392]	; (12e94 <gsm_read_sms+0x1f0>)
   12d0a:	4798      	blx	r3
	
	snprintf((char*)cmgr_at_command, MAX_BUFFER, "AT+CMGR=%d\r",position);
   12d0c:	232f      	movs	r3, #47	; 0x2f
   12d0e:	18fb      	adds	r3, r7, r3
   12d10:	7819      	ldrb	r1, [r3, #0]
   12d12:	230f      	movs	r3, #15
   12d14:	18fb      	adds	r3, r7, r3
   12d16:	781b      	ldrb	r3, [r3, #0]
   12d18:	4a5f      	ldr	r2, [pc, #380]	; (12e98 <gsm_read_sms+0x1f4>)
   12d1a:	2010      	movs	r0, #16
   12d1c:	1838      	adds	r0, r7, r0
   12d1e:	4c5f      	ldr	r4, [pc, #380]	; (12e9c <gsm_read_sms+0x1f8>)
   12d20:	47a0      	blx	r4
	
	if (gsm_send_at_command((const char*)cmgr_at_command, (const char*)RESPONS_OK,5000, MAX_BUFFER, cmdx)==GSM_ERROR_NONE)
   12d22:	232f      	movs	r3, #47	; 0x2f
   12d24:	18fb      	adds	r3, r7, r3
   12d26:	781a      	ldrb	r2, [r3, #0]
   12d28:	4c5d      	ldr	r4, [pc, #372]	; (12ea0 <gsm_read_sms+0x1fc>)
   12d2a:	495e      	ldr	r1, [pc, #376]	; (12ea4 <gsm_read_sms+0x200>)
   12d2c:	2310      	movs	r3, #16
   12d2e:	18f8      	adds	r0, r7, r3
   12d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12d32:	9300      	str	r3, [sp, #0]
   12d34:	0013      	movs	r3, r2
   12d36:	0022      	movs	r2, r4
   12d38:	4c5b      	ldr	r4, [pc, #364]	; (12ea8 <gsm_read_sms+0x204>)
   12d3a:	47a0      	blx	r4
   12d3c:	1e03      	subs	r3, r0, #0
   12d3e:	d000      	beq.n	12d42 <gsm_read_sms+0x9e>
   12d40:	e094      	b.n	12e6c <gsm_read_sms+0x1c8>
	{
		char *strig_cmp;
		char *p_char;
		char *p_char1;
		strig_cmp = strstr(cmdx,"+CMGR");
   12d42:	4a5a      	ldr	r2, [pc, #360]	; (12eac <gsm_read_sms+0x208>)
   12d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12d46:	0011      	movs	r1, r2
   12d48:	0018      	movs	r0, r3
   12d4a:	4b59      	ldr	r3, [pc, #356]	; (12eb0 <gsm_read_sms+0x20c>)
   12d4c:	4798      	blx	r3
   12d4e:	0003      	movs	r3, r0
   12d50:	627b      	str	r3, [r7, #36]	; 0x24
		if (strig_cmp != 0)
   12d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12d54:	2b00      	cmp	r3, #0
   12d56:	d100      	bne.n	12d5a <gsm_read_sms+0xb6>
   12d58:	e082      	b.n	12e60 <gsm_read_sms+0x1bc>
		{
			p_char = strchr((char *)(cmdx),',');
   12d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12d5c:	212c      	movs	r1, #44	; 0x2c
   12d5e:	0018      	movs	r0, r3
   12d60:	4b54      	ldr	r3, [pc, #336]	; (12eb4 <gsm_read_sms+0x210>)
   12d62:	4798      	blx	r3
   12d64:	0003      	movs	r3, r0
   12d66:	623b      	str	r3, [r7, #32]
			p_char1 = p_char+2;
   12d68:	6a3b      	ldr	r3, [r7, #32]
   12d6a:	3302      	adds	r3, #2
   12d6c:	61fb      	str	r3, [r7, #28]
			p_char = strchr((char *)(p_char1),'"');
   12d6e:	69fb      	ldr	r3, [r7, #28]
   12d70:	2122      	movs	r1, #34	; 0x22
   12d72:	0018      	movs	r0, r3
   12d74:	4b4f      	ldr	r3, [pc, #316]	; (12eb4 <gsm_read_sms+0x210>)
   12d76:	4798      	blx	r3
   12d78:	0003      	movs	r3, r0
   12d7a:	623b      	str	r3, [r7, #32]
			uint8_t len;
			if (p_char != NULL)
   12d7c:	6a3b      	ldr	r3, [r7, #32]
   12d7e:	2b00      	cmp	r3, #0
   12d80:	d02a      	beq.n	12dd8 <gsm_read_sms+0x134>
			{
				*p_char = 0;
   12d82:	6a3b      	ldr	r3, [r7, #32]
   12d84:	2200      	movs	r2, #0
   12d86:	701a      	strb	r2, [r3, #0]
				len = strlen(p_char1);
   12d88:	69fb      	ldr	r3, [r7, #28]
   12d8a:	0018      	movs	r0, r3
   12d8c:	4b4a      	ldr	r3, [pc, #296]	; (12eb8 <gsm_read_sms+0x214>)
   12d8e:	4798      	blx	r3
   12d90:	0002      	movs	r2, r0
   12d92:	231b      	movs	r3, #27
   12d94:	18fb      	adds	r3, r7, r3
   12d96:	701a      	strb	r2, [r3, #0]
				if(len < max_phone_len)
   12d98:	231b      	movs	r3, #27
   12d9a:	18fa      	adds	r2, r7, r3
   12d9c:	230e      	movs	r3, #14
   12d9e:	18fb      	adds	r3, r7, r3
   12da0:	7812      	ldrb	r2, [r2, #0]
   12da2:	781b      	ldrb	r3, [r3, #0]
   12da4:	429a      	cmp	r2, r3
   12da6:	d206      	bcs.n	12db6 <gsm_read_sms+0x112>
				{
					strcpy(phone_number, (char *)(p_char1));
   12da8:	69fa      	ldr	r2, [r7, #28]
   12daa:	68bb      	ldr	r3, [r7, #8]
   12dac:	0011      	movs	r1, r2
   12dae:	0018      	movs	r0, r3
   12db0:	4b42      	ldr	r3, [pc, #264]	; (12ebc <gsm_read_sms+0x218>)
   12db2:	4798      	blx	r3
   12db4:	e010      	b.n	12dd8 <gsm_read_sms+0x134>
				}
				else
				{
					memcpy(phone_number,(char *)p_char1,(max_phone_len-1));
   12db6:	230e      	movs	r3, #14
   12db8:	18fb      	adds	r3, r7, r3
   12dba:	781b      	ldrb	r3, [r3, #0]
   12dbc:	3b01      	subs	r3, #1
   12dbe:	001a      	movs	r2, r3
   12dc0:	69f9      	ldr	r1, [r7, #28]
   12dc2:	68bb      	ldr	r3, [r7, #8]
   12dc4:	0018      	movs	r0, r3
   12dc6:	4b3e      	ldr	r3, [pc, #248]	; (12ec0 <gsm_read_sms+0x21c>)
   12dc8:	4798      	blx	r3
					phone_number[max_phone_len]=0;
   12dca:	230e      	movs	r3, #14
   12dcc:	18fb      	adds	r3, r7, r3
   12dce:	781b      	ldrb	r3, [r3, #0]
   12dd0:	68ba      	ldr	r2, [r7, #8]
   12dd2:	18d3      	adds	r3, r2, r3
   12dd4:	2200      	movs	r2, #0
   12dd6:	701a      	strb	r2, [r3, #0]
				}
			}
			p_char = strchr(p_char+1, 0x0a);
   12dd8:	6a3b      	ldr	r3, [r7, #32]
   12dda:	3301      	adds	r3, #1
   12ddc:	210a      	movs	r1, #10
   12dde:	0018      	movs	r0, r3
   12de0:	4b34      	ldr	r3, [pc, #208]	; (12eb4 <gsm_read_sms+0x210>)
   12de2:	4798      	blx	r3
   12de4:	0003      	movs	r3, r0
   12de6:	623b      	str	r3, [r7, #32]
			if (p_char != NULL)
   12de8:	6a3b      	ldr	r3, [r7, #32]
   12dea:	2b00      	cmp	r3, #0
   12dec:	d044      	beq.n	12e78 <gsm_read_sms+0x1d4>
			{
				p_char++;
   12dee:	6a3b      	ldr	r3, [r7, #32]
   12df0:	3301      	adds	r3, #1
   12df2:	623b      	str	r3, [r7, #32]
				p_char1 = strchr((char *)(p_char), 0x0d);
   12df4:	6a3b      	ldr	r3, [r7, #32]
   12df6:	210d      	movs	r1, #13
   12df8:	0018      	movs	r0, r3
   12dfa:	4b2e      	ldr	r3, [pc, #184]	; (12eb4 <gsm_read_sms+0x210>)
   12dfc:	4798      	blx	r3
   12dfe:	0003      	movs	r3, r0
   12e00:	61fb      	str	r3, [r7, #28]
				if (p_char1 != NULL)
   12e02:	69fb      	ldr	r3, [r7, #28]
   12e04:	2b00      	cmp	r3, #0
   12e06:	d002      	beq.n	12e0e <gsm_read_sms+0x16a>
				{
					*p_char1 = 0;
   12e08:	69fb      	ldr	r3, [r7, #28]
   12e0a:	2200      	movs	r2, #0
   12e0c:	701a      	strb	r2, [r3, #0]
				}
				len = strlen(p_char);
   12e0e:	6a3b      	ldr	r3, [r7, #32]
   12e10:	0018      	movs	r0, r3
   12e12:	4b29      	ldr	r3, [pc, #164]	; (12eb8 <gsm_read_sms+0x214>)
   12e14:	4798      	blx	r3
   12e16:	0002      	movs	r2, r0
   12e18:	231b      	movs	r3, #27
   12e1a:	18fb      	adds	r3, r7, r3
   12e1c:	701a      	strb	r2, [r3, #0]
				if (len < max_SMS_len)
   12e1e:	231b      	movs	r3, #27
   12e20:	18fb      	adds	r3, r7, r3
   12e22:	2240      	movs	r2, #64	; 0x40
   12e24:	18b9      	adds	r1, r7, r2
   12e26:	781a      	ldrb	r2, [r3, #0]
   12e28:	780b      	ldrb	r3, [r1, #0]
   12e2a:	429a      	cmp	r2, r3
   12e2c:	d206      	bcs.n	12e3c <gsm_read_sms+0x198>
				{
					strcpy(SMS_text, (char *)(p_char));
   12e2e:	6a3a      	ldr	r2, [r7, #32]
   12e30:	687b      	ldr	r3, [r7, #4]
   12e32:	0011      	movs	r1, r2
   12e34:	0018      	movs	r0, r3
   12e36:	4b21      	ldr	r3, [pc, #132]	; (12ebc <gsm_read_sms+0x218>)
   12e38:	4798      	blx	r3
   12e3a:	e01d      	b.n	12e78 <gsm_read_sms+0x1d4>
				}
				else
				{
					memcpy(SMS_text, (char *)(p_char), (max_SMS_len-1));
   12e3c:	2340      	movs	r3, #64	; 0x40
   12e3e:	18fb      	adds	r3, r7, r3
   12e40:	781b      	ldrb	r3, [r3, #0]
   12e42:	3b01      	subs	r3, #1
   12e44:	001a      	movs	r2, r3
   12e46:	6a39      	ldr	r1, [r7, #32]
   12e48:	687b      	ldr	r3, [r7, #4]
   12e4a:	0018      	movs	r0, r3
   12e4c:	4b1c      	ldr	r3, [pc, #112]	; (12ec0 <gsm_read_sms+0x21c>)
   12e4e:	4798      	blx	r3
					SMS_text[max_SMS_len] = 0;
   12e50:	2340      	movs	r3, #64	; 0x40
   12e52:	18fb      	adds	r3, r7, r3
   12e54:	781b      	ldrb	r3, [r3, #0]
   12e56:	687a      	ldr	r2, [r7, #4]
   12e58:	18d3      	adds	r3, r2, r3
   12e5a:	2200      	movs	r2, #0
   12e5c:	701a      	strb	r2, [r3, #0]
   12e5e:	e00b      	b.n	12e78 <gsm_read_sms+0x1d4>
				}
			}
		}
		else
		{
			free(cmdx);
   12e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12e62:	0018      	movs	r0, r3
   12e64:	4b0a      	ldr	r3, [pc, #40]	; (12e90 <gsm_read_sms+0x1ec>)
   12e66:	4798      	blx	r3
			return GSM_ERROR_SMS_NOT_AVAILABLE;
   12e68:	230c      	movs	r3, #12
   12e6a:	e00a      	b.n	12e82 <gsm_read_sms+0x1de>
		}
	}
	else
	{
		free(cmdx);
   12e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12e6e:	0018      	movs	r0, r3
   12e70:	4b07      	ldr	r3, [pc, #28]	; (12e90 <gsm_read_sms+0x1ec>)
   12e72:	4798      	blx	r3
		return GSM_ERROR_SMS_NOT_AVAILABLE;
   12e74:	230c      	movs	r3, #12
   12e76:	e004      	b.n	12e82 <gsm_read_sms+0x1de>
	}
	free(cmdx);
   12e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12e7a:	0018      	movs	r0, r3
   12e7c:	4b04      	ldr	r3, [pc, #16]	; (12e90 <gsm_read_sms+0x1ec>)
   12e7e:	4798      	blx	r3
	return GSM_ERROR_NONE;
   12e80:	2300      	movs	r3, #0
}
   12e82:	0018      	movs	r0, r3
   12e84:	46bd      	mov	sp, r7
   12e86:	b00d      	add	sp, #52	; 0x34
   12e88:	bd90      	pop	{r4, r7, pc}
   12e8a:	46c0      	nop			; (mov r8, r8)
   12e8c:	000297a9 	.word	0x000297a9
   12e90:	00029849 	.word	0x00029849
   12e94:	000298b7 	.word	0x000298b7
   12e98:	0002a79c 	.word	0x0002a79c
   12e9c:	00029a59 	.word	0x00029a59
   12ea0:	00001388 	.word	0x00001388
   12ea4:	0002a56c 	.word	0x0002a56c
   12ea8:	000123dd 	.word	0x000123dd
   12eac:	0002a7a8 	.word	0x0002a7a8
   12eb0:	00029b77 	.word	0x00029b77
   12eb4:	00029b1b 	.word	0x00029b1b
   12eb8:	00029b47 	.word	0x00029b47
   12ebc:	00029b37 	.word	0x00029b37
   12ec0:	00029881 	.word	0x00029881

00012ec4 <gsm_call_to_dial_a_number>:


enum gsm_error gsm_call_to_dial_a_number(const char *to)
{
   12ec4:	b5b0      	push	{r4, r5, r7, lr}
   12ec6:	b088      	sub	sp, #32
   12ec8:	af02      	add	r7, sp, #8
   12eca:	6078      	str	r0, [r7, #4]
	const uint8_t MAX_BUFFER = 30;
   12ecc:	2317      	movs	r3, #23
   12ece:	18fb      	adds	r3, r7, r3
   12ed0:	221e      	movs	r2, #30
   12ed2:	701a      	strb	r2, [r3, #0]
	enum gsm_error err;
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   12ed4:	2317      	movs	r3, #23
   12ed6:	18fb      	adds	r3, r7, r3
   12ed8:	781b      	ldrb	r3, [r3, #0]
   12eda:	2101      	movs	r1, #1
   12edc:	0018      	movs	r0, r3
   12ede:	4b18      	ldr	r3, [pc, #96]	; (12f40 <gsm_call_to_dial_a_number+0x7c>)
   12ee0:	4798      	blx	r3
   12ee2:	0003      	movs	r3, r0
   12ee4:	613b      	str	r3, [r7, #16]
	
	//buffer created?
	if (cmdx == NULL)
   12ee6:	693b      	ldr	r3, [r7, #16]
   12ee8:	2b00      	cmp	r3, #0
   12eea:	d101      	bne.n	12ef0 <gsm_call_to_dial_a_number+0x2c>
	{
		return 0;
   12eec:	2300      	movs	r3, #0
   12eee:	e023      	b.n	12f38 <gsm_call_to_dial_a_number+0x74>
	}
	
	//init string
	memset(cmdx, '\0', MAX_BUFFER);
   12ef0:	2317      	movs	r3, #23
   12ef2:	18fb      	adds	r3, r7, r3
   12ef4:	781a      	ldrb	r2, [r3, #0]
   12ef6:	693b      	ldr	r3, [r7, #16]
   12ef8:	2100      	movs	r1, #0
   12efa:	0018      	movs	r0, r3
   12efc:	4b11      	ldr	r3, [pc, #68]	; (12f44 <gsm_call_to_dial_a_number+0x80>)
   12efe:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER, "ATD%s;\r", to);
   12f00:	2317      	movs	r3, #23
   12f02:	18fb      	adds	r3, r7, r3
   12f04:	7819      	ldrb	r1, [r3, #0]
   12f06:	687b      	ldr	r3, [r7, #4]
   12f08:	4a0f      	ldr	r2, [pc, #60]	; (12f48 <gsm_call_to_dial_a_number+0x84>)
   12f0a:	6938      	ldr	r0, [r7, #16]
   12f0c:	4c0f      	ldr	r4, [pc, #60]	; (12f4c <gsm_call_to_dial_a_number+0x88>)
   12f0e:	47a0      	blx	r4
	
	err = gsm_send_at_command((const char*)cmdx, (const char*)RESPONS_OK,2000,0, NULL);
   12f10:	230f      	movs	r3, #15
   12f12:	18fc      	adds	r4, r7, r3
   12f14:	23fa      	movs	r3, #250	; 0xfa
   12f16:	00da      	lsls	r2, r3, #3
   12f18:	490d      	ldr	r1, [pc, #52]	; (12f50 <gsm_call_to_dial_a_number+0x8c>)
   12f1a:	6938      	ldr	r0, [r7, #16]
   12f1c:	2300      	movs	r3, #0
   12f1e:	9300      	str	r3, [sp, #0]
   12f20:	2300      	movs	r3, #0
   12f22:	4d0c      	ldr	r5, [pc, #48]	; (12f54 <gsm_call_to_dial_a_number+0x90>)
   12f24:	47a8      	blx	r5
   12f26:	0003      	movs	r3, r0
   12f28:	7023      	strb	r3, [r4, #0]
	free(cmdx);
   12f2a:	693b      	ldr	r3, [r7, #16]
   12f2c:	0018      	movs	r0, r3
   12f2e:	4b0a      	ldr	r3, [pc, #40]	; (12f58 <gsm_call_to_dial_a_number+0x94>)
   12f30:	4798      	blx	r3
	return err;
   12f32:	230f      	movs	r3, #15
   12f34:	18fb      	adds	r3, r7, r3
   12f36:	781b      	ldrb	r3, [r3, #0]
	
}
   12f38:	0018      	movs	r0, r3
   12f3a:	46bd      	mov	sp, r7
   12f3c:	b006      	add	sp, #24
   12f3e:	bdb0      	pop	{r4, r5, r7, pc}
   12f40:	000297a9 	.word	0x000297a9
   12f44:	000298b7 	.word	0x000298b7
   12f48:	0002a7b0 	.word	0x0002a7b0
   12f4c:	00029a59 	.word	0x00029a59
   12f50:	0002a56c 	.word	0x0002a56c
   12f54:	000123dd 	.word	0x000123dd
   12f58:	00029849 	.word	0x00029849

00012f5c <gsm_answer_an_incomming_call>:

enum gsm_error gsm_answer_an_incomming_call(void)
{
   12f5c:	b590      	push	{r4, r7, lr}
   12f5e:	b083      	sub	sp, #12
   12f60:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("ATA\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12f62:	4a06      	ldr	r2, [pc, #24]	; (12f7c <gsm_answer_an_incomming_call+0x20>)
   12f64:	4906      	ldr	r1, [pc, #24]	; (12f80 <gsm_answer_an_incomming_call+0x24>)
   12f66:	4807      	ldr	r0, [pc, #28]	; (12f84 <gsm_answer_an_incomming_call+0x28>)
   12f68:	2300      	movs	r3, #0
   12f6a:	9300      	str	r3, [sp, #0]
   12f6c:	2300      	movs	r3, #0
   12f6e:	4c06      	ldr	r4, [pc, #24]	; (12f88 <gsm_answer_an_incomming_call+0x2c>)
   12f70:	47a0      	blx	r4
   12f72:	0003      	movs	r3, r0
}
   12f74:	0018      	movs	r0, r3
   12f76:	46bd      	mov	sp, r7
   12f78:	b001      	add	sp, #4
   12f7a:	bd90      	pop	{r4, r7, pc}
   12f7c:	00001388 	.word	0x00001388
   12f80:	0002a56c 	.word	0x0002a56c
   12f84:	0002a7b8 	.word	0x0002a7b8
   12f88:	000123dd 	.word	0x000123dd

00012f8c <gsm_enable_network_time_update>:


enum gsm_error gsm_enable_network_time_update(void)
{
   12f8c:	b590      	push	{r4, r7, lr}
   12f8e:	b083      	sub	sp, #12
   12f90:	af02      	add	r7, sp, #8
	return 	gsm_send_at_command((const char*)("AT+CLTS=1\r"), (const char*)RESPONS_OK,10000,0, NULL);
   12f92:	4a06      	ldr	r2, [pc, #24]	; (12fac <gsm_enable_network_time_update+0x20>)
   12f94:	4906      	ldr	r1, [pc, #24]	; (12fb0 <gsm_enable_network_time_update+0x24>)
   12f96:	4807      	ldr	r0, [pc, #28]	; (12fb4 <gsm_enable_network_time_update+0x28>)
   12f98:	2300      	movs	r3, #0
   12f9a:	9300      	str	r3, [sp, #0]
   12f9c:	2300      	movs	r3, #0
   12f9e:	4c06      	ldr	r4, [pc, #24]	; (12fb8 <gsm_enable_network_time_update+0x2c>)
   12fa0:	47a0      	blx	r4
   12fa2:	0003      	movs	r3, r0
}
   12fa4:	0018      	movs	r0, r3
   12fa6:	46bd      	mov	sp, r7
   12fa8:	b001      	add	sp, #4
   12faa:	bd90      	pop	{r4, r7, pc}
   12fac:	00002710 	.word	0x00002710
   12fb0:	0002a56c 	.word	0x0002a56c
   12fb4:	0002a7c0 	.word	0x0002a7c0
   12fb8:	000123dd 	.word	0x000123dd

00012fbc <gsm_enable_DTMF_detection>:
{
	return 	gsm_send_at_command((const char*)("AT+CLTS=0\r"), (const char*)RESPONS_OK,10000,0, NULL);
}

enum gsm_error gsm_enable_DTMF_detection(void)
{
   12fbc:	b590      	push	{r4, r7, lr}
   12fbe:	b083      	sub	sp, #12
   12fc0:	af02      	add	r7, sp, #8
	return 	gsm_send_at_command((const char*)("AT+DDET=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12fc2:	4a06      	ldr	r2, [pc, #24]	; (12fdc <gsm_enable_DTMF_detection+0x20>)
   12fc4:	4906      	ldr	r1, [pc, #24]	; (12fe0 <gsm_enable_DTMF_detection+0x24>)
   12fc6:	4807      	ldr	r0, [pc, #28]	; (12fe4 <gsm_enable_DTMF_detection+0x28>)
   12fc8:	2300      	movs	r3, #0
   12fca:	9300      	str	r3, [sp, #0]
   12fcc:	2300      	movs	r3, #0
   12fce:	4c06      	ldr	r4, [pc, #24]	; (12fe8 <gsm_enable_DTMF_detection+0x2c>)
   12fd0:	47a0      	blx	r4
   12fd2:	0003      	movs	r3, r0
}
   12fd4:	0018      	movs	r0, r3
   12fd6:	46bd      	mov	sp, r7
   12fd8:	b001      	add	sp, #4
   12fda:	bd90      	pop	{r4, r7, pc}
   12fdc:	00001388 	.word	0x00001388
   12fe0:	0002a56c 	.word	0x0002a56c
   12fe4:	0002a7d8 	.word	0x0002a7d8
   12fe8:	000123dd 	.word	0x000123dd

00012fec <gsm_send_DTMF_Tone>:

enum gsm_error gsm_send_DTMF_Tone(char *tone)
{
   12fec:	b5b0      	push	{r4, r5, r7, lr}
   12fee:	b088      	sub	sp, #32
   12ff0:	af02      	add	r7, sp, #8
   12ff2:	6078      	str	r0, [r7, #4]
	const uint8_t MAX_BUFFER = 30;
   12ff4:	2317      	movs	r3, #23
   12ff6:	18fb      	adds	r3, r7, r3
   12ff8:	221e      	movs	r2, #30
   12ffa:	701a      	strb	r2, [r3, #0]
	enum gsm_error err;
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   12ffc:	2317      	movs	r3, #23
   12ffe:	18fb      	adds	r3, r7, r3
   13000:	781b      	ldrb	r3, [r3, #0]
   13002:	2101      	movs	r1, #1
   13004:	0018      	movs	r0, r3
   13006:	4b18      	ldr	r3, [pc, #96]	; (13068 <gsm_send_DTMF_Tone+0x7c>)
   13008:	4798      	blx	r3
   1300a:	0003      	movs	r3, r0
   1300c:	613b      	str	r3, [r7, #16]
	
	//buffer created?
	if (cmdx == NULL)
   1300e:	693b      	ldr	r3, [r7, #16]
   13010:	2b00      	cmp	r3, #0
   13012:	d101      	bne.n	13018 <gsm_send_DTMF_Tone+0x2c>
	{
		return 0;
   13014:	2300      	movs	r3, #0
   13016:	e022      	b.n	1305e <gsm_send_DTMF_Tone+0x72>
	}
	
	//init string
	memset(cmdx, '\0', MAX_BUFFER);
   13018:	2317      	movs	r3, #23
   1301a:	18fb      	adds	r3, r7, r3
   1301c:	781a      	ldrb	r2, [r3, #0]
   1301e:	693b      	ldr	r3, [r7, #16]
   13020:	2100      	movs	r1, #0
   13022:	0018      	movs	r0, r3
   13024:	4b11      	ldr	r3, [pc, #68]	; (1306c <gsm_send_DTMF_Tone+0x80>)
   13026:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER,"AT+VTS=\"%s\"\r",tone);
   13028:	2317      	movs	r3, #23
   1302a:	18fb      	adds	r3, r7, r3
   1302c:	7819      	ldrb	r1, [r3, #0]
   1302e:	687b      	ldr	r3, [r7, #4]
   13030:	4a0f      	ldr	r2, [pc, #60]	; (13070 <gsm_send_DTMF_Tone+0x84>)
   13032:	6938      	ldr	r0, [r7, #16]
   13034:	4c0f      	ldr	r4, [pc, #60]	; (13074 <gsm_send_DTMF_Tone+0x88>)
   13036:	47a0      	blx	r4
	
	err = gsm_send_at_command((const char*)(cmdx), (const char*)RESPONS_OK,5000,0, NULL);
   13038:	230f      	movs	r3, #15
   1303a:	18fc      	adds	r4, r7, r3
   1303c:	4a0e      	ldr	r2, [pc, #56]	; (13078 <gsm_send_DTMF_Tone+0x8c>)
   1303e:	490f      	ldr	r1, [pc, #60]	; (1307c <gsm_send_DTMF_Tone+0x90>)
   13040:	6938      	ldr	r0, [r7, #16]
   13042:	2300      	movs	r3, #0
   13044:	9300      	str	r3, [sp, #0]
   13046:	2300      	movs	r3, #0
   13048:	4d0d      	ldr	r5, [pc, #52]	; (13080 <gsm_send_DTMF_Tone+0x94>)
   1304a:	47a8      	blx	r5
   1304c:	0003      	movs	r3, r0
   1304e:	7023      	strb	r3, [r4, #0]
	free(cmdx);
   13050:	693b      	ldr	r3, [r7, #16]
   13052:	0018      	movs	r0, r3
   13054:	4b0b      	ldr	r3, [pc, #44]	; (13084 <gsm_send_DTMF_Tone+0x98>)
   13056:	4798      	blx	r3
	return err;
   13058:	230f      	movs	r3, #15
   1305a:	18fb      	adds	r3, r7, r3
   1305c:	781b      	ldrb	r3, [r3, #0]
}
   1305e:	0018      	movs	r0, r3
   13060:	46bd      	mov	sp, r7
   13062:	b006      	add	sp, #24
   13064:	bdb0      	pop	{r4, r5, r7, pc}
   13066:	46c0      	nop			; (mov r8, r8)
   13068:	000297a9 	.word	0x000297a9
   1306c:	000298b7 	.word	0x000298b7
   13070:	0002a7e4 	.word	0x0002a7e4
   13074:	00029a59 	.word	0x00029a59
   13078:	00001388 	.word	0x00001388
   1307c:	0002a56c 	.word	0x0002a56c
   13080:	000123dd 	.word	0x000123dd
   13084:	00029849 	.word	0x00029849

00013088 <gsm_hangup_call>:

enum gsm_error gsm_hangup_call(void)
{
   13088:	b590      	push	{r4, r7, lr}
   1308a:	b083      	sub	sp, #12
   1308c:	af02      	add	r7, sp, #8
	return 	gsm_send_at_command((const char*)("AT+CHUP\r"), (const char*)RESPONS_OK,5000,0, NULL);
   1308e:	4a06      	ldr	r2, [pc, #24]	; (130a8 <gsm_hangup_call+0x20>)
   13090:	4906      	ldr	r1, [pc, #24]	; (130ac <gsm_hangup_call+0x24>)
   13092:	4807      	ldr	r0, [pc, #28]	; (130b0 <gsm_hangup_call+0x28>)
   13094:	2300      	movs	r3, #0
   13096:	9300      	str	r3, [sp, #0]
   13098:	2300      	movs	r3, #0
   1309a:	4c06      	ldr	r4, [pc, #24]	; (130b4 <gsm_hangup_call+0x2c>)
   1309c:	47a0      	blx	r4
   1309e:	0003      	movs	r3, r0
}
   130a0:	0018      	movs	r0, r3
   130a2:	46bd      	mov	sp, r7
   130a4:	b001      	add	sp, #4
   130a6:	bd90      	pop	{r4, r7, pc}
   130a8:	00001388 	.word	0x00001388
   130ac:	0002a56c 	.word	0x0002a56c
   130b0:	0002a7f4 	.word	0x0002a7f4
   130b4:	000123dd 	.word	0x000123dd

000130b8 <gsm_disable_call_waiting>:

enum gsm_error gsm_disable_call_waiting(void)
{
   130b8:	b590      	push	{r4, r7, lr}
   130ba:	b083      	sub	sp, #12
   130bc:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CCWA=0,0\r"), (const char*)RESPONS_OK,18000,0, NULL);
   130be:	4a06      	ldr	r2, [pc, #24]	; (130d8 <gsm_disable_call_waiting+0x20>)
   130c0:	4906      	ldr	r1, [pc, #24]	; (130dc <gsm_disable_call_waiting+0x24>)
   130c2:	4807      	ldr	r0, [pc, #28]	; (130e0 <gsm_disable_call_waiting+0x28>)
   130c4:	2300      	movs	r3, #0
   130c6:	9300      	str	r3, [sp, #0]
   130c8:	2300      	movs	r3, #0
   130ca:	4c06      	ldr	r4, [pc, #24]	; (130e4 <gsm_disable_call_waiting+0x2c>)
   130cc:	47a0      	blx	r4
   130ce:	0003      	movs	r3, r0
}
   130d0:	0018      	movs	r0, r3
   130d2:	46bd      	mov	sp, r7
   130d4:	b001      	add	sp, #4
   130d6:	bd90      	pop	{r4, r7, pc}
   130d8:	00004650 	.word	0x00004650
   130dc:	0002a56c 	.word	0x0002a56c
   130e0:	0002a800 	.word	0x0002a800
   130e4:	000123dd 	.word	0x000123dd

000130e8 <gsm_stop_play_record_file>:
	return gsm_send_at_command((const char*)("AT+GSMBUSY=0\r"), (const char*)RESPONS_OK,5000,0, NULL);
}


enum gsm_error gsm_stop_play_record_file(void)
{
   130e8:	b590      	push	{r4, r7, lr}
   130ea:	b083      	sub	sp, #12
   130ec:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CREC=5\r"), (const char*)RESPONS_OK,500,0, NULL);
   130ee:	23fa      	movs	r3, #250	; 0xfa
   130f0:	005a      	lsls	r2, r3, #1
   130f2:	4906      	ldr	r1, [pc, #24]	; (1310c <gsm_stop_play_record_file+0x24>)
   130f4:	4806      	ldr	r0, [pc, #24]	; (13110 <gsm_stop_play_record_file+0x28>)
   130f6:	2300      	movs	r3, #0
   130f8:	9300      	str	r3, [sp, #0]
   130fa:	2300      	movs	r3, #0
   130fc:	4c05      	ldr	r4, [pc, #20]	; (13114 <gsm_stop_play_record_file+0x2c>)
   130fe:	47a0      	blx	r4
   13100:	0003      	movs	r3, r0
}
   13102:	0018      	movs	r0, r3
   13104:	46bd      	mov	sp, r7
   13106:	b001      	add	sp, #4
   13108:	bd90      	pop	{r4, r7, pc}
   1310a:	46c0      	nop			; (mov r8, r8)
   1310c:	0002a56c 	.word	0x0002a56c
   13110:	0002a830 	.word	0x0002a830
   13114:	000123dd 	.word	0x000123dd

00013118 <gsm_play_record_file>:

enum gsm_error gsm_play_record_file(const char *filename,bool playInfinitely)
{
   13118:	b590      	push	{r4, r7, lr}
   1311a:	b087      	sub	sp, #28
   1311c:	af02      	add	r7, sp, #8
   1311e:	6078      	str	r0, [r7, #4]
   13120:	000a      	movs	r2, r1
   13122:	1cfb      	adds	r3, r7, #3
   13124:	701a      	strb	r2, [r3, #0]
	//AT+CREC=4,"C:\User\555.amr",0,100$0D
	
	uint8_t repeat = 0;
   13126:	230f      	movs	r3, #15
   13128:	18fb      	adds	r3, r7, r3
   1312a:	2200      	movs	r2, #0
   1312c:	701a      	strb	r2, [r3, #0]
	if (playInfinitely)
   1312e:	1cfb      	adds	r3, r7, #3
   13130:	781b      	ldrb	r3, [r3, #0]
   13132:	2b00      	cmp	r3, #0
   13134:	d003      	beq.n	1313e <gsm_play_record_file+0x26>
	{
		repeat = 1;
   13136:	230f      	movs	r3, #15
   13138:	18fb      	adds	r3, r7, r3
   1313a:	2201      	movs	r2, #1
   1313c:	701a      	strb	r2, [r3, #0]
	}
	
	const uint8_t MAX_BUFFER = 50;
   1313e:	230e      	movs	r3, #14
   13140:	18fb      	adds	r3, r7, r3
   13142:	2232      	movs	r2, #50	; 0x32
   13144:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   13146:	230e      	movs	r3, #14
   13148:	18fb      	adds	r3, r7, r3
   1314a:	781b      	ldrb	r3, [r3, #0]
   1314c:	2101      	movs	r1, #1
   1314e:	0018      	movs	r0, r3
   13150:	4b17      	ldr	r3, [pc, #92]	; (131b0 <gsm_play_record_file+0x98>)
   13152:	4798      	blx	r3
   13154:	0003      	movs	r3, r0
   13156:	60bb      	str	r3, [r7, #8]
	//buffer created???
	if (cmdx == NULL)
   13158:	68bb      	ldr	r3, [r7, #8]
   1315a:	2b00      	cmp	r3, #0
   1315c:	d101      	bne.n	13162 <gsm_play_record_file+0x4a>
	{
		return 0;
   1315e:	2300      	movs	r3, #0
   13160:	e022      	b.n	131a8 <gsm_play_record_file+0x90>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   13162:	230e      	movs	r3, #14
   13164:	18fb      	adds	r3, r7, r3
   13166:	781a      	ldrb	r2, [r3, #0]
   13168:	68bb      	ldr	r3, [r7, #8]
   1316a:	2100      	movs	r1, #0
   1316c:	0018      	movs	r0, r3
   1316e:	4b11      	ldr	r3, [pc, #68]	; (131b4 <gsm_play_record_file+0x9c>)
   13170:	4798      	blx	r3
	
	snprintf((char*)cmdx, MAX_BUFFER, "AT+CREC=4,\"C:\\User\\%c.amr\",0,90,%u\r",filename,repeat);
   13172:	230e      	movs	r3, #14
   13174:	18fb      	adds	r3, r7, r3
   13176:	7819      	ldrb	r1, [r3, #0]
   13178:	230f      	movs	r3, #15
   1317a:	18fb      	adds	r3, r7, r3
   1317c:	781b      	ldrb	r3, [r3, #0]
   1317e:	687c      	ldr	r4, [r7, #4]
   13180:	4a0d      	ldr	r2, [pc, #52]	; (131b8 <gsm_play_record_file+0xa0>)
   13182:	68b8      	ldr	r0, [r7, #8]
   13184:	9300      	str	r3, [sp, #0]
   13186:	0023      	movs	r3, r4
   13188:	4c0c      	ldr	r4, [pc, #48]	; (131bc <gsm_play_record_file+0xa4>)
   1318a:	47a0      	blx	r4
	
	gsm_send_at_command((const char*)(cmdx), (const char*)RESPONS_OK,2000,0, NULL);
   1318c:	23fa      	movs	r3, #250	; 0xfa
   1318e:	00da      	lsls	r2, r3, #3
   13190:	490b      	ldr	r1, [pc, #44]	; (131c0 <gsm_play_record_file+0xa8>)
   13192:	68b8      	ldr	r0, [r7, #8]
   13194:	2300      	movs	r3, #0
   13196:	9300      	str	r3, [sp, #0]
   13198:	2300      	movs	r3, #0
   1319a:	4c0a      	ldr	r4, [pc, #40]	; (131c4 <gsm_play_record_file+0xac>)
   1319c:	47a0      	blx	r4
	free(cmdx);
   1319e:	68bb      	ldr	r3, [r7, #8]
   131a0:	0018      	movs	r0, r3
   131a2:	4b09      	ldr	r3, [pc, #36]	; (131c8 <gsm_play_record_file+0xb0>)
   131a4:	4798      	blx	r3
	return GSM_ERROR_NONE;
   131a6:	2300      	movs	r3, #0
	
}
   131a8:	0018      	movs	r0, r3
   131aa:	46bd      	mov	sp, r7
   131ac:	b005      	add	sp, #20
   131ae:	bd90      	pop	{r4, r7, pc}
   131b0:	000297a9 	.word	0x000297a9
   131b4:	000298b7 	.word	0x000298b7
   131b8:	0002a83c 	.word	0x0002a83c
   131bc:	00029a59 	.word	0x00029a59
   131c0:	0002a56c 	.word	0x0002a56c
   131c4:	000123dd 	.word	0x000123dd
   131c8:	00029849 	.word	0x00029849

000131cc <gsm_get_internal_rtc_time>:

enum gsm_error gsm_get_internal_rtc_time(void)
{
   131cc:	b5b0      	push	{r4, r5, r7, lr}
   131ce:	b086      	sub	sp, #24
   131d0:	af02      	add	r7, sp, #8
	const uint8_t MAX_BUFFER = 70;
   131d2:	230f      	movs	r3, #15
   131d4:	18fb      	adds	r3, r7, r3
   131d6:	2246      	movs	r2, #70	; 0x46
   131d8:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   131da:	230f      	movs	r3, #15
   131dc:	18fb      	adds	r3, r7, r3
   131de:	781b      	ldrb	r3, [r3, #0]
   131e0:	2101      	movs	r1, #1
   131e2:	0018      	movs	r0, r3
   131e4:	4b57      	ldr	r3, [pc, #348]	; (13344 <gsm_get_internal_rtc_time+0x178>)
   131e6:	4798      	blx	r3
   131e8:	0003      	movs	r3, r0
   131ea:	60bb      	str	r3, [r7, #8]
	if (cmdx == NULL)
   131ec:	68bb      	ldr	r3, [r7, #8]
   131ee:	2b00      	cmp	r3, #0
   131f0:	d105      	bne.n	131fe <gsm_get_internal_rtc_time+0x32>
	{
		free(cmdx);
   131f2:	68bb      	ldr	r3, [r7, #8]
   131f4:	0018      	movs	r0, r3
   131f6:	4b54      	ldr	r3, [pc, #336]	; (13348 <gsm_get_internal_rtc_time+0x17c>)
   131f8:	4798      	blx	r3
		return 0;
   131fa:	2300      	movs	r3, #0
   131fc:	e09d      	b.n	1333a <gsm_get_internal_rtc_time+0x16e>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   131fe:	230f      	movs	r3, #15
   13200:	18fb      	adds	r3, r7, r3
   13202:	781a      	ldrb	r2, [r3, #0]
   13204:	68bb      	ldr	r3, [r7, #8]
   13206:	2100      	movs	r1, #0
   13208:	0018      	movs	r0, r3
   1320a:	4b50      	ldr	r3, [pc, #320]	; (1334c <gsm_get_internal_rtc_time+0x180>)
   1320c:	4798      	blx	r3
	
	enum gsm_error err;
	err = gsm_send_at_command((const char*)"AT+CCLK?\r", (const char*)RESPONS_OK,5000,MAX_BUFFER, cmdx);
   1320e:	1dfc      	adds	r4, r7, #7
   13210:	230f      	movs	r3, #15
   13212:	18fb      	adds	r3, r7, r3
   13214:	781a      	ldrb	r2, [r3, #0]
   13216:	4d4e      	ldr	r5, [pc, #312]	; (13350 <gsm_get_internal_rtc_time+0x184>)
   13218:	494e      	ldr	r1, [pc, #312]	; (13354 <gsm_get_internal_rtc_time+0x188>)
   1321a:	484f      	ldr	r0, [pc, #316]	; (13358 <gsm_get_internal_rtc_time+0x18c>)
   1321c:	68bb      	ldr	r3, [r7, #8]
   1321e:	9300      	str	r3, [sp, #0]
   13220:	0013      	movs	r3, r2
   13222:	002a      	movs	r2, r5
   13224:	4d4d      	ldr	r5, [pc, #308]	; (1335c <gsm_get_internal_rtc_time+0x190>)
   13226:	47a8      	blx	r5
   13228:	0003      	movs	r3, r0
   1322a:	7023      	strb	r3, [r4, #0]
	if(err==GSM_ERROR_NONE)
   1322c:	1dfb      	adds	r3, r7, #7
   1322e:	781b      	ldrb	r3, [r3, #0]
   13230:	2b00      	cmp	r3, #0
   13232:	d16a      	bne.n	1330a <gsm_get_internal_rtc_time+0x13e>
	{
		char *cclktocken;
		cclktocken = strtok(cmdx,"\"");
   13234:	4a4a      	ldr	r2, [pc, #296]	; (13360 <gsm_get_internal_rtc_time+0x194>)
   13236:	68bb      	ldr	r3, [r7, #8]
   13238:	0011      	movs	r1, r2
   1323a:	0018      	movs	r0, r3
   1323c:	4b49      	ldr	r3, [pc, #292]	; (13364 <gsm_get_internal_rtc_time+0x198>)
   1323e:	4798      	blx	r3
   13240:	0003      	movs	r3, r0
   13242:	603b      	str	r3, [r7, #0]
		cclktocken = strtok(NULL,"\"");
   13244:	4b46      	ldr	r3, [pc, #280]	; (13360 <gsm_get_internal_rtc_time+0x194>)
   13246:	0019      	movs	r1, r3
   13248:	2000      	movs	r0, #0
   1324a:	4b46      	ldr	r3, [pc, #280]	; (13364 <gsm_get_internal_rtc_time+0x198>)
   1324c:	4798      	blx	r3
   1324e:	0003      	movs	r3, r0
   13250:	603b      	str	r3, [r7, #0]
		
		cclktocken = strtok(cclktocken,"/");
   13252:	4a45      	ldr	r2, [pc, #276]	; (13368 <gsm_get_internal_rtc_time+0x19c>)
   13254:	683b      	ldr	r3, [r7, #0]
   13256:	0011      	movs	r1, r2
   13258:	0018      	movs	r0, r3
   1325a:	4b42      	ldr	r3, [pc, #264]	; (13364 <gsm_get_internal_rtc_time+0x198>)
   1325c:	4798      	blx	r3
   1325e:	0003      	movs	r3, r0
   13260:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_year = atoi(cclktocken);
   13262:	683b      	ldr	r3, [r7, #0]
   13264:	0018      	movs	r0, r3
   13266:	4b41      	ldr	r3, [pc, #260]	; (1336c <gsm_get_internal_rtc_time+0x1a0>)
   13268:	4798      	blx	r3
   1326a:	0003      	movs	r3, r0
   1326c:	b2da      	uxtb	r2, r3
   1326e:	4b40      	ldr	r3, [pc, #256]	; (13370 <gsm_get_internal_rtc_time+0x1a4>)
   13270:	701a      	strb	r2, [r3, #0]
		
		cclktocken = strtok(NULL,"/");
   13272:	4b3d      	ldr	r3, [pc, #244]	; (13368 <gsm_get_internal_rtc_time+0x19c>)
   13274:	0019      	movs	r1, r3
   13276:	2000      	movs	r0, #0
   13278:	4b3a      	ldr	r3, [pc, #232]	; (13364 <gsm_get_internal_rtc_time+0x198>)
   1327a:	4798      	blx	r3
   1327c:	0003      	movs	r3, r0
   1327e:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_month = atoi(cclktocken);
   13280:	683b      	ldr	r3, [r7, #0]
   13282:	0018      	movs	r0, r3
   13284:	4b39      	ldr	r3, [pc, #228]	; (1336c <gsm_get_internal_rtc_time+0x1a0>)
   13286:	4798      	blx	r3
   13288:	0003      	movs	r3, r0
   1328a:	b2da      	uxtb	r2, r3
   1328c:	4b38      	ldr	r3, [pc, #224]	; (13370 <gsm_get_internal_rtc_time+0x1a4>)
   1328e:	705a      	strb	r2, [r3, #1]
		
		cclktocken = strtok(NULL,",");
   13290:	4b38      	ldr	r3, [pc, #224]	; (13374 <gsm_get_internal_rtc_time+0x1a8>)
   13292:	0019      	movs	r1, r3
   13294:	2000      	movs	r0, #0
   13296:	4b33      	ldr	r3, [pc, #204]	; (13364 <gsm_get_internal_rtc_time+0x198>)
   13298:	4798      	blx	r3
   1329a:	0003      	movs	r3, r0
   1329c:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_date = atoi(cclktocken);
   1329e:	683b      	ldr	r3, [r7, #0]
   132a0:	0018      	movs	r0, r3
   132a2:	4b32      	ldr	r3, [pc, #200]	; (1336c <gsm_get_internal_rtc_time+0x1a0>)
   132a4:	4798      	blx	r3
   132a6:	0003      	movs	r3, r0
   132a8:	b2da      	uxtb	r2, r3
   132aa:	4b31      	ldr	r3, [pc, #196]	; (13370 <gsm_get_internal_rtc_time+0x1a4>)
   132ac:	709a      	strb	r2, [r3, #2]
		
		cclktocken = strtok(NULL,":");
   132ae:	4b32      	ldr	r3, [pc, #200]	; (13378 <gsm_get_internal_rtc_time+0x1ac>)
   132b0:	0019      	movs	r1, r3
   132b2:	2000      	movs	r0, #0
   132b4:	4b2b      	ldr	r3, [pc, #172]	; (13364 <gsm_get_internal_rtc_time+0x198>)
   132b6:	4798      	blx	r3
   132b8:	0003      	movs	r3, r0
   132ba:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_hour = atoi(cclktocken);
   132bc:	683b      	ldr	r3, [r7, #0]
   132be:	0018      	movs	r0, r3
   132c0:	4b2a      	ldr	r3, [pc, #168]	; (1336c <gsm_get_internal_rtc_time+0x1a0>)
   132c2:	4798      	blx	r3
   132c4:	0003      	movs	r3, r0
   132c6:	b2da      	uxtb	r2, r3
   132c8:	4b29      	ldr	r3, [pc, #164]	; (13370 <gsm_get_internal_rtc_time+0x1a4>)
   132ca:	70da      	strb	r2, [r3, #3]
		
		cclktocken = strtok(NULL,":");
   132cc:	4b2a      	ldr	r3, [pc, #168]	; (13378 <gsm_get_internal_rtc_time+0x1ac>)
   132ce:	0019      	movs	r1, r3
   132d0:	2000      	movs	r0, #0
   132d2:	4b24      	ldr	r3, [pc, #144]	; (13364 <gsm_get_internal_rtc_time+0x198>)
   132d4:	4798      	blx	r3
   132d6:	0003      	movs	r3, r0
   132d8:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_minute = atoi(cclktocken);
   132da:	683b      	ldr	r3, [r7, #0]
   132dc:	0018      	movs	r0, r3
   132de:	4b23      	ldr	r3, [pc, #140]	; (1336c <gsm_get_internal_rtc_time+0x1a0>)
   132e0:	4798      	blx	r3
   132e2:	0003      	movs	r3, r0
   132e4:	b2da      	uxtb	r2, r3
   132e6:	4b22      	ldr	r3, [pc, #136]	; (13370 <gsm_get_internal_rtc_time+0x1a4>)
   132e8:	711a      	strb	r2, [r3, #4]
		
		cclktocken = strtok(NULL,"+");
   132ea:	4b24      	ldr	r3, [pc, #144]	; (1337c <gsm_get_internal_rtc_time+0x1b0>)
   132ec:	0019      	movs	r1, r3
   132ee:	2000      	movs	r0, #0
   132f0:	4b1c      	ldr	r3, [pc, #112]	; (13364 <gsm_get_internal_rtc_time+0x198>)
   132f2:	4798      	blx	r3
   132f4:	0003      	movs	r3, r0
   132f6:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_second = atoi(cclktocken);
   132f8:	683b      	ldr	r3, [r7, #0]
   132fa:	0018      	movs	r0, r3
   132fc:	4b1b      	ldr	r3, [pc, #108]	; (1336c <gsm_get_internal_rtc_time+0x1a0>)
   132fe:	4798      	blx	r3
   13300:	0003      	movs	r3, r0
   13302:	b2da      	uxtb	r2, r3
   13304:	4b1a      	ldr	r3, [pc, #104]	; (13370 <gsm_get_internal_rtc_time+0x1a4>)
   13306:	715a      	strb	r2, [r3, #5]
   13308:	e011      	b.n	1332e <gsm_get_internal_rtc_time+0x162>
	}
	else
	{
		struct_internal_rtc.Network_year = 0;
   1330a:	4b19      	ldr	r3, [pc, #100]	; (13370 <gsm_get_internal_rtc_time+0x1a4>)
   1330c:	2200      	movs	r2, #0
   1330e:	701a      	strb	r2, [r3, #0]
		struct_internal_rtc.Network_month = 0;
   13310:	4b17      	ldr	r3, [pc, #92]	; (13370 <gsm_get_internal_rtc_time+0x1a4>)
   13312:	2200      	movs	r2, #0
   13314:	705a      	strb	r2, [r3, #1]
		struct_internal_rtc.Network_date = 0;
   13316:	4b16      	ldr	r3, [pc, #88]	; (13370 <gsm_get_internal_rtc_time+0x1a4>)
   13318:	2200      	movs	r2, #0
   1331a:	709a      	strb	r2, [r3, #2]
		struct_internal_rtc.Network_hour = 0;
   1331c:	4b14      	ldr	r3, [pc, #80]	; (13370 <gsm_get_internal_rtc_time+0x1a4>)
   1331e:	2200      	movs	r2, #0
   13320:	70da      	strb	r2, [r3, #3]
		struct_internal_rtc.Network_minute = 0;
   13322:	4b13      	ldr	r3, [pc, #76]	; (13370 <gsm_get_internal_rtc_time+0x1a4>)
   13324:	2200      	movs	r2, #0
   13326:	711a      	strb	r2, [r3, #4]
		struct_internal_rtc.Network_second = 0;
   13328:	4b11      	ldr	r3, [pc, #68]	; (13370 <gsm_get_internal_rtc_time+0x1a4>)
   1332a:	2200      	movs	r2, #0
   1332c:	715a      	strb	r2, [r3, #5]
	}
	
	free(cmdx);
   1332e:	68bb      	ldr	r3, [r7, #8]
   13330:	0018      	movs	r0, r3
   13332:	4b05      	ldr	r3, [pc, #20]	; (13348 <gsm_get_internal_rtc_time+0x17c>)
   13334:	4798      	blx	r3
	return err;
   13336:	1dfb      	adds	r3, r7, #7
   13338:	781b      	ldrb	r3, [r3, #0]
}
   1333a:	0018      	movs	r0, r3
   1333c:	46bd      	mov	sp, r7
   1333e:	b004      	add	sp, #16
   13340:	bdb0      	pop	{r4, r5, r7, pc}
   13342:	46c0      	nop			; (mov r8, r8)
   13344:	000297a9 	.word	0x000297a9
   13348:	00029849 	.word	0x00029849
   1334c:	000298b7 	.word	0x000298b7
   13350:	00001388 	.word	0x00001388
   13354:	0002a56c 	.word	0x0002a56c
   13358:	0002a860 	.word	0x0002a860
   1335c:	000123dd 	.word	0x000123dd
   13360:	0002a86c 	.word	0x0002a86c
   13364:	00029ba9 	.word	0x00029ba9
   13368:	0002a870 	.word	0x0002a870
   1336c:	0002979d 	.word	0x0002979d
   13370:	20000688 	.word	0x20000688
   13374:	0002a688 	.word	0x0002a688
   13378:	0002a684 	.word	0x0002a684
   1337c:	0002a874 	.word	0x0002a874

00013380 <gsm_config_module>:


enum gsm_error gsm_config_module(void)
{
   13380:	b580      	push	{r7, lr}
   13382:	af00      	add	r7, sp, #0
	if (gsm_check_module() == GSM_ERROR_NONE)
   13384:	4b34      	ldr	r3, [pc, #208]	; (13458 <gsm_config_module+0xd8>)
   13386:	4798      	blx	r3
   13388:	1e03      	subs	r3, r0, #0
   1338a:	d000      	beq.n	1338e <gsm_config_module+0xe>
   1338c:	e05e      	b.n	1344c <gsm_config_module+0xcc>
	{
		if (gsm_factory_reset() == GSM_ERROR_NONE)
   1338e:	4b33      	ldr	r3, [pc, #204]	; (1345c <gsm_config_module+0xdc>)
   13390:	4798      	blx	r3
   13392:	1e03      	subs	r3, r0, #0
   13394:	d000      	beq.n	13398 <gsm_config_module+0x18>
   13396:	e057      	b.n	13448 <gsm_config_module+0xc8>
		{
			vTaskDelay(2000/portTICK_PERIOD_MS);
   13398:	23fa      	movs	r3, #250	; 0xfa
   1339a:	00db      	lsls	r3, r3, #3
   1339c:	0018      	movs	r0, r3
   1339e:	4b30      	ldr	r3, [pc, #192]	; (13460 <gsm_config_module+0xe0>)
   133a0:	4798      	blx	r3
			
			if (gsm_detect_simcard() == GSM_ERROR_NONE)
   133a2:	4b30      	ldr	r3, [pc, #192]	; (13464 <gsm_config_module+0xe4>)
   133a4:	4798      	blx	r3
   133a6:	1e03      	subs	r3, r0, #0
   133a8:	d14c      	bne.n	13444 <gsm_config_module+0xc4>
			{
				if (gsm_echo_off() == GSM_ERROR_NONE)
   133aa:	4b2f      	ldr	r3, [pc, #188]	; (13468 <gsm_config_module+0xe8>)
   133ac:	4798      	blx	r3
   133ae:	1e03      	subs	r3, r0, #0
   133b0:	d14e      	bne.n	13450 <gsm_config_module+0xd0>
				{
					if (gsm_set_baudrate() == GSM_ERROR_NONE)
   133b2:	4b2e      	ldr	r3, [pc, #184]	; (1346c <gsm_config_module+0xec>)
   133b4:	4798      	blx	r3
   133b6:	1e03      	subs	r3, r0, #0
   133b8:	d142      	bne.n	13440 <gsm_config_module+0xc0>
					{
						vTaskDelay(2000/portTICK_PERIOD_MS);
   133ba:	23fa      	movs	r3, #250	; 0xfa
   133bc:	00db      	lsls	r3, r3, #3
   133be:	0018      	movs	r0, r3
   133c0:	4b27      	ldr	r3, [pc, #156]	; (13460 <gsm_config_module+0xe0>)
   133c2:	4798      	blx	r3
						
						if (gsm_enable_calling_line_identification()==GSM_ERROR_NONE)
   133c4:	4b2a      	ldr	r3, [pc, #168]	; (13470 <gsm_config_module+0xf0>)
   133c6:	4798      	blx	r3
   133c8:	1e03      	subs	r3, r0, #0
   133ca:	d137      	bne.n	1343c <gsm_config_module+0xbc>
						{
							if (gsm_enable_connected_line_identification_presentation() == GSM_ERROR_NONE)
   133cc:	4b29      	ldr	r3, [pc, #164]	; (13474 <gsm_config_module+0xf4>)
   133ce:	4798      	blx	r3
   133d0:	1e03      	subs	r3, r0, #0
   133d2:	d131      	bne.n	13438 <gsm_config_module+0xb8>
							{
								if (gsm_enable_list_current_calls_of_ME() == GSM_ERROR_NONE)
   133d4:	4b28      	ldr	r3, [pc, #160]	; (13478 <gsm_config_module+0xf8>)
   133d6:	4798      	blx	r3
   133d8:	1e03      	subs	r3, r0, #0
   133da:	d12b      	bne.n	13434 <gsm_config_module+0xb4>
								{
									if (gsm_select_sms_message_formate_text_mode() == GSM_ERROR_NONE)
   133dc:	4b27      	ldr	r3, [pc, #156]	; (1347c <gsm_config_module+0xfc>)
   133de:	4798      	blx	r3
   133e0:	1e03      	subs	r3, r0, #0
   133e2:	d125      	bne.n	13430 <gsm_config_module+0xb0>
									{
										if (gsm_set_sms_text_mode_parameter() == GSM_ERROR_NONE)
   133e4:	4b26      	ldr	r3, [pc, #152]	; (13480 <gsm_config_module+0x100>)
   133e6:	4798      	blx	r3
   133e8:	1e03      	subs	r3, r0, #0
   133ea:	d11f      	bne.n	1342c <gsm_config_module+0xac>
										{
											if (gsm_enable_new_sms_message_indications() == GSM_ERROR_NONE)
   133ec:	4b25      	ldr	r3, [pc, #148]	; (13484 <gsm_config_module+0x104>)
   133ee:	4798      	blx	r3
   133f0:	1e03      	subs	r3, r0, #0
   133f2:	d119      	bne.n	13428 <gsm_config_module+0xa8>
											{
												if (gsm_enable_network_time_update() == GSM_ERROR_NONE)
   133f4:	4b24      	ldr	r3, [pc, #144]	; (13488 <gsm_config_module+0x108>)
   133f6:	4798      	blx	r3
   133f8:	1e03      	subs	r3, r0, #0
   133fa:	d113      	bne.n	13424 <gsm_config_module+0xa4>
												{
													if (gsm_enable_DTMF_detection() == GSM_ERROR_NONE)
   133fc:	4b23      	ldr	r3, [pc, #140]	; (1348c <gsm_config_module+0x10c>)
   133fe:	4798      	blx	r3
   13400:	1e03      	subs	r3, r0, #0
   13402:	d10d      	bne.n	13420 <gsm_config_module+0xa0>
													{
														if (gsm_enable_sleep_mode()==GSM_ERROR_NONE)
   13404:	4b22      	ldr	r3, [pc, #136]	; (13490 <gsm_config_module+0x110>)
   13406:	4798      	blx	r3
   13408:	1e03      	subs	r3, r0, #0
   1340a:	d107      	bne.n	1341c <gsm_config_module+0x9c>
														{
															if (gsm_store_active_profile() == GSM_ERROR_NONE)
   1340c:	4b21      	ldr	r3, [pc, #132]	; (13494 <gsm_config_module+0x114>)
   1340e:	4798      	blx	r3
   13410:	1e03      	subs	r3, r0, #0
   13412:	d101      	bne.n	13418 <gsm_config_module+0x98>
															{
																return GSM_ERROR_NONE;
   13414:	2300      	movs	r3, #0
   13416:	e01c      	b.n	13452 <gsm_config_module+0xd2>
															}
															else
															{
																return GSM_ERROR_CONFIG_FAILED;
   13418:	2310      	movs	r3, #16
   1341a:	e01a      	b.n	13452 <gsm_config_module+0xd2>
															}
														}
														else
														{
																return GSM_ERROR_CONFIG_FAILED;
   1341c:	2310      	movs	r3, #16
   1341e:	e018      	b.n	13452 <gsm_config_module+0xd2>
														}
													}
													else
													{
														return GSM_ERROR_CONFIG_FAILED;
   13420:	2310      	movs	r3, #16
   13422:	e016      	b.n	13452 <gsm_config_module+0xd2>
													}
												}
												else
												{
													return GSM_ERROR_CONFIG_FAILED;
   13424:	2310      	movs	r3, #16
   13426:	e014      	b.n	13452 <gsm_config_module+0xd2>
												}
											}
											else
											{
												return GSM_ERROR_CONFIG_FAILED;
   13428:	2310      	movs	r3, #16
   1342a:	e012      	b.n	13452 <gsm_config_module+0xd2>
											}
										}
										else
										{
											return GSM_ERROR_CONFIG_FAILED;
   1342c:	2310      	movs	r3, #16
   1342e:	e010      	b.n	13452 <gsm_config_module+0xd2>
										}
									}
									else
									{
										return GSM_ERROR_CONFIG_FAILED;
   13430:	2310      	movs	r3, #16
   13432:	e00e      	b.n	13452 <gsm_config_module+0xd2>
									}
								}
								else
								{
									return GSM_ERROR_CONFIG_FAILED;
   13434:	2310      	movs	r3, #16
   13436:	e00c      	b.n	13452 <gsm_config_module+0xd2>
								}
							}
							else
							{
								return GSM_ERROR_CONFIG_FAILED;
   13438:	2310      	movs	r3, #16
   1343a:	e00a      	b.n	13452 <gsm_config_module+0xd2>
							}
						}
						else
						{
							return GSM_ERROR_CONFIG_FAILED;
   1343c:	2310      	movs	r3, #16
   1343e:	e008      	b.n	13452 <gsm_config_module+0xd2>
						}
					}
					else
					{
						return GSM_ERROR_CONFIG_FAILED;
   13440:	2310      	movs	r3, #16
   13442:	e006      	b.n	13452 <gsm_config_module+0xd2>
					}
				}
			}
			else
			{
				return GSM_ERROR_CONFIG_FAILED;
   13444:	2310      	movs	r3, #16
   13446:	e004      	b.n	13452 <gsm_config_module+0xd2>
			}
		}
		else
		{
			return GSM_ERROR_CONFIG_FAILED;
   13448:	2310      	movs	r3, #16
   1344a:	e002      	b.n	13452 <gsm_config_module+0xd2>
		}
	}
	else
	{
		return GSM_ERROR_CONFIG_FAILED;
   1344c:	2310      	movs	r3, #16
   1344e:	e000      	b.n	13452 <gsm_config_module+0xd2>
	}
	
	return GSM_ERROR_CONFIG_FAILED;
   13450:	2310      	movs	r3, #16
}
   13452:	0018      	movs	r0, r3
   13454:	46bd      	mov	sp, r7
   13456:	bd80      	pop	{r7, pc}
   13458:	000125d5 	.word	0x000125d5
   1345c:	00012811 	.word	0x00012811
   13460:	00020669 	.word	0x00020669
   13464:	000126c1 	.word	0x000126c1
   13468:	00012841 	.word	0x00012841
   1346c:	0001266d 	.word	0x0001266d
   13470:	00012751 	.word	0x00012751
   13474:	00012781 	.word	0x00012781
   13478:	000127e1 	.word	0x000127e1
   1347c:	00012871 	.word	0x00012871
   13480:	000128a1 	.word	0x000128a1
   13484:	00012ae9 	.word	0x00012ae9
   13488:	00012f8d 	.word	0x00012f8d
   1348c:	00012fbd 	.word	0x00012fbd
   13490:	000127b1 	.word	0x000127b1
   13494:	00012721 	.word	0x00012721

00013498 <gsm_read_response_line>:

bool gsm_read_response_line(char *buffer,uint8_t length)
{
   13498:	b580      	push	{r7, lr}
   1349a:	b084      	sub	sp, #16
   1349c:	af00      	add	r7, sp, #0
   1349e:	6078      	str	r0, [r7, #4]
   134a0:	000a      	movs	r2, r1
   134a2:	1cfb      	adds	r3, r7, #3
   134a4:	701a      	strb	r2, [r3, #0]
	bool line_non_empty = false;
   134a6:	230f      	movs	r3, #15
   134a8:	18fb      	adds	r3, r7, r3
   134aa:	2200      	movs	r2, #0
   134ac:	701a      	strb	r2, [r3, #0]
	while (length > 1)
   134ae:	e026      	b.n	134fe <gsm_read_response_line+0x66>
	{
		
		uint8_t curr_rx;
		/* Fetch next buffered character received from the module */
		if (xQueueReceive(gsm_rx_queue, &curr_rx, 500 / portTICK_PERIOD_MS) == pdFALSE)
   134b0:	4b1f      	ldr	r3, [pc, #124]	; (13530 <gsm_read_response_line+0x98>)
   134b2:	6818      	ldr	r0, [r3, #0]
   134b4:	23fa      	movs	r3, #250	; 0xfa
   134b6:	005a      	lsls	r2, r3, #1
   134b8:	230e      	movs	r3, #14
   134ba:	18fb      	adds	r3, r7, r3
   134bc:	0019      	movs	r1, r3
   134be:	4b1d      	ldr	r3, [pc, #116]	; (13534 <gsm_read_response_line+0x9c>)
   134c0:	4798      	blx	r3
   134c2:	1e03      	subs	r3, r0, #0
   134c4:	d101      	bne.n	134ca <gsm_read_response_line+0x32>
		{
			return false;
   134c6:	2300      	movs	r3, #0
   134c8:	e02d      	b.n	13526 <gsm_read_response_line+0x8e>
		}

		if (curr_rx == '\n')
   134ca:	230e      	movs	r3, #14
   134cc:	18fb      	adds	r3, r7, r3
   134ce:	781b      	ldrb	r3, [r3, #0]
   134d0:	2b0a      	cmp	r3, #10
   134d2:	d014      	beq.n	134fe <gsm_read_response_line+0x66>
		{
			/* Ignore newline characters */
		}
		else if (curr_rx != '\r')
   134d4:	230e      	movs	r3, #14
   134d6:	18fb      	adds	r3, r7, r3
   134d8:	781b      	ldrb	r3, [r3, #0]
   134da:	2b0d      	cmp	r3, #13
   134dc:	d014      	beq.n	13508 <gsm_read_response_line+0x70>
		{
			/* Non end-of-command CR character */
			*(buffer++) = curr_rx;
   134de:	687b      	ldr	r3, [r7, #4]
   134e0:	1c5a      	adds	r2, r3, #1
   134e2:	607a      	str	r2, [r7, #4]
   134e4:	220e      	movs	r2, #14
   134e6:	18ba      	adds	r2, r7, r2
   134e8:	7812      	ldrb	r2, [r2, #0]
   134ea:	701a      	strb	r2, [r3, #0]
			length--;
   134ec:	1cfb      	adds	r3, r7, #3
   134ee:	781a      	ldrb	r2, [r3, #0]
   134f0:	1cfb      	adds	r3, r7, #3
   134f2:	3a01      	subs	r2, #1
   134f4:	701a      	strb	r2, [r3, #0]
			line_non_empty = true;
   134f6:	230f      	movs	r3, #15
   134f8:	18fb      	adds	r3, r7, r3
   134fa:	2201      	movs	r2, #1
   134fc:	701a      	strb	r2, [r3, #0]
	while (length > 1)
   134fe:	1cfb      	adds	r3, r7, #3
   13500:	781b      	ldrb	r3, [r3, #0]
   13502:	2b01      	cmp	r3, #1
   13504:	d8d4      	bhi.n	134b0 <gsm_read_response_line+0x18>
   13506:	e000      	b.n	1350a <gsm_read_response_line+0x72>
		}
		else
		{
			/* End of command, finished reading line */
			break;
   13508:	46c0      	nop			; (mov r8, r8)
		}
	}

	if(line_non_empty)
   1350a:	230f      	movs	r3, #15
   1350c:	18fb      	adds	r3, r7, r3
   1350e:	781b      	ldrb	r3, [r3, #0]
   13510:	2b00      	cmp	r3, #0
   13512:	d002      	beq.n	1351a <gsm_read_response_line+0x82>
	{
		gsm_module_exit_sleep(true);
   13514:	2001      	movs	r0, #1
   13516:	4b08      	ldr	r3, [pc, #32]	; (13538 <gsm_read_response_line+0xa0>)
   13518:	4798      	blx	r3
	}

	*(buffer) = '\0';
   1351a:	687b      	ldr	r3, [r7, #4]
   1351c:	2200      	movs	r2, #0
   1351e:	701a      	strb	r2, [r3, #0]
	return line_non_empty;
   13520:	230f      	movs	r3, #15
   13522:	18fb      	adds	r3, r7, r3
   13524:	781b      	ldrb	r3, [r3, #0]
}
   13526:	0018      	movs	r0, r3
   13528:	46bd      	mov	sp, r7
   1352a:	b004      	add	sp, #16
   1352c:	bd80      	pop	{r7, pc}
   1352e:	46c0      	nop			; (mov r8, r8)
   13530:	2000021c 	.word	0x2000021c
   13534:	0001fbc1 	.word	0x0001fbc1
   13538:	00012309 	.word	0x00012309

0001353c <gsm_responseLine_isNew_SMS_Received>:

char gsm_responseLine_isNew_SMS_Received(char *response)
{
   1353c:	b580      	push	{r7, lr}
   1353e:	b084      	sub	sp, #16
   13540:	af00      	add	r7, sp, #0
   13542:	6078      	str	r0, [r7, #4]
	
	char sms_index = 0;
   13544:	230f      	movs	r3, #15
   13546:	18fb      	adds	r3, r7, r3
   13548:	2200      	movs	r2, #0
   1354a:	701a      	strb	r2, [r3, #0]
	
	if (strstr(response,"+CMTI:"))
   1354c:	4a17      	ldr	r2, [pc, #92]	; (135ac <gsm_responseLine_isNew_SMS_Received+0x70>)
   1354e:	687b      	ldr	r3, [r7, #4]
   13550:	0011      	movs	r1, r2
   13552:	0018      	movs	r0, r3
   13554:	4b16      	ldr	r3, [pc, #88]	; (135b0 <gsm_responseLine_isNew_SMS_Received+0x74>)
   13556:	4798      	blx	r3
   13558:	1e03      	subs	r3, r0, #0
   1355a:	d01b      	beq.n	13594 <gsm_responseLine_isNew_SMS_Received+0x58>
	{
		char *ptr_tocken;
		ptr_tocken = strtok(response,",");
   1355c:	4a15      	ldr	r2, [pc, #84]	; (135b4 <gsm_responseLine_isNew_SMS_Received+0x78>)
   1355e:	687b      	ldr	r3, [r7, #4]
   13560:	0011      	movs	r1, r2
   13562:	0018      	movs	r0, r3
   13564:	4b14      	ldr	r3, [pc, #80]	; (135b8 <gsm_responseLine_isNew_SMS_Received+0x7c>)
   13566:	4798      	blx	r3
   13568:	0003      	movs	r3, r0
   1356a:	60bb      	str	r3, [r7, #8]
		ptr_tocken = strtok(NULL,",");
   1356c:	4b11      	ldr	r3, [pc, #68]	; (135b4 <gsm_responseLine_isNew_SMS_Received+0x78>)
   1356e:	0019      	movs	r1, r3
   13570:	2000      	movs	r0, #0
   13572:	4b11      	ldr	r3, [pc, #68]	; (135b8 <gsm_responseLine_isNew_SMS_Received+0x7c>)
   13574:	4798      	blx	r3
   13576:	0003      	movs	r3, r0
   13578:	60bb      	str	r3, [r7, #8]
		
		RemoveSpaces(ptr_tocken);
   1357a:	68bb      	ldr	r3, [r7, #8]
   1357c:	0018      	movs	r0, r3
   1357e:	4b0f      	ldr	r3, [pc, #60]	; (135bc <gsm_responseLine_isNew_SMS_Received+0x80>)
   13580:	4798      	blx	r3
		
		sms_index = atoi(ptr_tocken);
   13582:	68bb      	ldr	r3, [r7, #8]
   13584:	0018      	movs	r0, r3
   13586:	4b0e      	ldr	r3, [pc, #56]	; (135c0 <gsm_responseLine_isNew_SMS_Received+0x84>)
   13588:	4798      	blx	r3
   1358a:	0002      	movs	r2, r0
   1358c:	230f      	movs	r3, #15
   1358e:	18fb      	adds	r3, r7, r3
   13590:	701a      	strb	r2, [r3, #0]
   13592:	e003      	b.n	1359c <gsm_responseLine_isNew_SMS_Received+0x60>
		
	}
	else
	{
		sms_index =  0;
   13594:	230f      	movs	r3, #15
   13596:	18fb      	adds	r3, r7, r3
   13598:	2200      	movs	r2, #0
   1359a:	701a      	strb	r2, [r3, #0]
	}
	
	return sms_index;
   1359c:	230f      	movs	r3, #15
   1359e:	18fb      	adds	r3, r7, r3
   135a0:	781b      	ldrb	r3, [r3, #0]
}
   135a2:	0018      	movs	r0, r3
   135a4:	46bd      	mov	sp, r7
   135a6:	b004      	add	sp, #16
   135a8:	bd80      	pop	{r7, pc}
   135aa:	46c0      	nop			; (mov r8, r8)
   135ac:	0002a878 	.word	0x0002a878
   135b0:	00029b77 	.word	0x00029b77
   135b4:	0002a688 	.word	0x0002a688
   135b8:	00029ba9 	.word	0x00029ba9
   135bc:	00012aa5 	.word	0x00012aa5
   135c0:	0002979d 	.word	0x0002979d

000135c4 <gsm_responseLine_isRinging>:

bool gsm_responseLine_isRinging(char *response)
{
   135c4:	b580      	push	{r7, lr}
   135c6:	b082      	sub	sp, #8
   135c8:	af00      	add	r7, sp, #0
   135ca:	6078      	str	r0, [r7, #4]
	if (strstr(response,"RING"))
   135cc:	4a07      	ldr	r2, [pc, #28]	; (135ec <gsm_responseLine_isRinging+0x28>)
   135ce:	687b      	ldr	r3, [r7, #4]
   135d0:	0011      	movs	r1, r2
   135d2:	0018      	movs	r0, r3
   135d4:	4b06      	ldr	r3, [pc, #24]	; (135f0 <gsm_responseLine_isRinging+0x2c>)
   135d6:	4798      	blx	r3
   135d8:	1e03      	subs	r3, r0, #0
   135da:	d001      	beq.n	135e0 <gsm_responseLine_isRinging+0x1c>
	{
		return true;
   135dc:	2301      	movs	r3, #1
   135de:	e000      	b.n	135e2 <gsm_responseLine_isRinging+0x1e>
	}
	else
	{
		return false;
   135e0:	2300      	movs	r3, #0
	}
}
   135e2:	0018      	movs	r0, r3
   135e4:	46bd      	mov	sp, r7
   135e6:	b002      	add	sp, #8
   135e8:	bd80      	pop	{r7, pc}
   135ea:	46c0      	nop			; (mov r8, r8)
   135ec:	0002a880 	.word	0x0002a880
   135f0:	00029b77 	.word	0x00029b77

000135f4 <gsm_responseLine_isCSQN>:

bool gsm_responseLine_isCSQN(char *response,uint8_t *signal)
{
   135f4:	b580      	push	{r7, lr}
   135f6:	b084      	sub	sp, #16
   135f8:	af00      	add	r7, sp, #0
   135fa:	6078      	str	r0, [r7, #4]
   135fc:	6039      	str	r1, [r7, #0]
	if(strstr(response,"+CSQN"))
   135fe:	4a4e      	ldr	r2, [pc, #312]	; (13738 <gsm_responseLine_isCSQN+0x144>)
   13600:	687b      	ldr	r3, [r7, #4]
   13602:	0011      	movs	r1, r2
   13604:	0018      	movs	r0, r3
   13606:	4b4d      	ldr	r3, [pc, #308]	; (1373c <gsm_responseLine_isCSQN+0x148>)
   13608:	4798      	blx	r3
   1360a:	1e03      	subs	r3, r0, #0
   1360c:	d100      	bne.n	13610 <gsm_responseLine_isCSQN+0x1c>
   1360e:	e08d      	b.n	1372c <gsm_responseLine_isCSQN+0x138>
	{
		if (strstr(response,"99")==NULL)
   13610:	4a4b      	ldr	r2, [pc, #300]	; (13740 <gsm_responseLine_isCSQN+0x14c>)
   13612:	687b      	ldr	r3, [r7, #4]
   13614:	0011      	movs	r1, r2
   13616:	0018      	movs	r0, r3
   13618:	4b48      	ldr	r3, [pc, #288]	; (1373c <gsm_responseLine_isCSQN+0x148>)
   1361a:	4798      	blx	r3
   1361c:	1e03      	subs	r3, r0, #0
   1361e:	d000      	beq.n	13622 <gsm_responseLine_isCSQN+0x2e>
   13620:	e07f      	b.n	13722 <gsm_responseLine_isCSQN+0x12e>
		{
			char *ptr_tocken;
			ptr_tocken = strtok(response,":");
   13622:	4a48      	ldr	r2, [pc, #288]	; (13744 <gsm_responseLine_isCSQN+0x150>)
   13624:	687b      	ldr	r3, [r7, #4]
   13626:	0011      	movs	r1, r2
   13628:	0018      	movs	r0, r3
   1362a:	4b47      	ldr	r3, [pc, #284]	; (13748 <gsm_responseLine_isCSQN+0x154>)
   1362c:	4798      	blx	r3
   1362e:	0003      	movs	r3, r0
   13630:	60fb      	str	r3, [r7, #12]
			ptr_tocken = strtok(NULL,":");
   13632:	4b44      	ldr	r3, [pc, #272]	; (13744 <gsm_responseLine_isCSQN+0x150>)
   13634:	0019      	movs	r1, r3
   13636:	2000      	movs	r0, #0
   13638:	4b43      	ldr	r3, [pc, #268]	; (13748 <gsm_responseLine_isCSQN+0x154>)
   1363a:	4798      	blx	r3
   1363c:	0003      	movs	r3, r0
   1363e:	60fb      	str	r3, [r7, #12]
			ptr_tocken = strtok(ptr_tocken,",");
   13640:	4a42      	ldr	r2, [pc, #264]	; (1374c <gsm_responseLine_isCSQN+0x158>)
   13642:	68fb      	ldr	r3, [r7, #12]
   13644:	0011      	movs	r1, r2
   13646:	0018      	movs	r0, r3
   13648:	4b3f      	ldr	r3, [pc, #252]	; (13748 <gsm_responseLine_isCSQN+0x154>)
   1364a:	4798      	blx	r3
   1364c:	0003      	movs	r3, r0
   1364e:	60fb      	str	r3, [r7, #12]
			RemoveSpaces(ptr_tocken);
   13650:	68fb      	ldr	r3, [r7, #12]
   13652:	0018      	movs	r0, r3
   13654:	4b3e      	ldr	r3, [pc, #248]	; (13750 <gsm_responseLine_isCSQN+0x15c>)
   13656:	4798      	blx	r3
			uint8_t nw = atoi(ptr_tocken);
   13658:	68fb      	ldr	r3, [r7, #12]
   1365a:	0018      	movs	r0, r3
   1365c:	4b3d      	ldr	r3, [pc, #244]	; (13754 <gsm_responseLine_isCSQN+0x160>)
   1365e:	4798      	blx	r3
   13660:	0002      	movs	r2, r0
   13662:	230b      	movs	r3, #11
   13664:	18fb      	adds	r3, r7, r3
   13666:	701a      	strb	r2, [r3, #0]
			if (nw==0 || nw==1 || nw== 99)
   13668:	230b      	movs	r3, #11
   1366a:	18fb      	adds	r3, r7, r3
   1366c:	781b      	ldrb	r3, [r3, #0]
   1366e:	2b00      	cmp	r3, #0
   13670:	d009      	beq.n	13686 <gsm_responseLine_isCSQN+0x92>
   13672:	230b      	movs	r3, #11
   13674:	18fb      	adds	r3, r7, r3
   13676:	781b      	ldrb	r3, [r3, #0]
   13678:	2b01      	cmp	r3, #1
   1367a:	d004      	beq.n	13686 <gsm_responseLine_isCSQN+0x92>
   1367c:	230b      	movs	r3, #11
   1367e:	18fb      	adds	r3, r7, r3
   13680:	781b      	ldrb	r3, [r3, #0]
   13682:	2b63      	cmp	r3, #99	; 0x63
   13684:	d103      	bne.n	1368e <gsm_responseLine_isCSQN+0x9a>
			{
				*signal = 0;
   13686:	683b      	ldr	r3, [r7, #0]
   13688:	2200      	movs	r2, #0
   1368a:	701a      	strb	r2, [r3, #0]
   1368c:	e04c      	b.n	13728 <gsm_responseLine_isCSQN+0x134>
			}
			else
			{
				if (nw>=2 && nw<=7)
   1368e:	230b      	movs	r3, #11
   13690:	18fb      	adds	r3, r7, r3
   13692:	781b      	ldrb	r3, [r3, #0]
   13694:	2b01      	cmp	r3, #1
   13696:	d908      	bls.n	136aa <gsm_responseLine_isCSQN+0xb6>
   13698:	230b      	movs	r3, #11
   1369a:	18fb      	adds	r3, r7, r3
   1369c:	781b      	ldrb	r3, [r3, #0]
   1369e:	2b07      	cmp	r3, #7
   136a0:	d803      	bhi.n	136aa <gsm_responseLine_isCSQN+0xb6>
				{
					*signal = 1;
   136a2:	683b      	ldr	r3, [r7, #0]
   136a4:	2201      	movs	r2, #1
   136a6:	701a      	strb	r2, [r3, #0]
   136a8:	e03e      	b.n	13728 <gsm_responseLine_isCSQN+0x134>
				}
				else if (nw>=8 && nw<=13)
   136aa:	230b      	movs	r3, #11
   136ac:	18fb      	adds	r3, r7, r3
   136ae:	781b      	ldrb	r3, [r3, #0]
   136b0:	2b07      	cmp	r3, #7
   136b2:	d908      	bls.n	136c6 <gsm_responseLine_isCSQN+0xd2>
   136b4:	230b      	movs	r3, #11
   136b6:	18fb      	adds	r3, r7, r3
   136b8:	781b      	ldrb	r3, [r3, #0]
   136ba:	2b0d      	cmp	r3, #13
   136bc:	d803      	bhi.n	136c6 <gsm_responseLine_isCSQN+0xd2>
				{
					*signal = 2;
   136be:	683b      	ldr	r3, [r7, #0]
   136c0:	2202      	movs	r2, #2
   136c2:	701a      	strb	r2, [r3, #0]
   136c4:	e030      	b.n	13728 <gsm_responseLine_isCSQN+0x134>
				}
				else if (nw>=14 && nw<=19)
   136c6:	230b      	movs	r3, #11
   136c8:	18fb      	adds	r3, r7, r3
   136ca:	781b      	ldrb	r3, [r3, #0]
   136cc:	2b0d      	cmp	r3, #13
   136ce:	d908      	bls.n	136e2 <gsm_responseLine_isCSQN+0xee>
   136d0:	230b      	movs	r3, #11
   136d2:	18fb      	adds	r3, r7, r3
   136d4:	781b      	ldrb	r3, [r3, #0]
   136d6:	2b13      	cmp	r3, #19
   136d8:	d803      	bhi.n	136e2 <gsm_responseLine_isCSQN+0xee>
				{
					*signal = 3;
   136da:	683b      	ldr	r3, [r7, #0]
   136dc:	2203      	movs	r2, #3
   136de:	701a      	strb	r2, [r3, #0]
   136e0:	e022      	b.n	13728 <gsm_responseLine_isCSQN+0x134>
				}
				else if (nw>=20 && nw<=25)
   136e2:	230b      	movs	r3, #11
   136e4:	18fb      	adds	r3, r7, r3
   136e6:	781b      	ldrb	r3, [r3, #0]
   136e8:	2b13      	cmp	r3, #19
   136ea:	d908      	bls.n	136fe <gsm_responseLine_isCSQN+0x10a>
   136ec:	230b      	movs	r3, #11
   136ee:	18fb      	adds	r3, r7, r3
   136f0:	781b      	ldrb	r3, [r3, #0]
   136f2:	2b19      	cmp	r3, #25
   136f4:	d803      	bhi.n	136fe <gsm_responseLine_isCSQN+0x10a>
				{
					*signal = 4;
   136f6:	683b      	ldr	r3, [r7, #0]
   136f8:	2204      	movs	r2, #4
   136fa:	701a      	strb	r2, [r3, #0]
   136fc:	e014      	b.n	13728 <gsm_responseLine_isCSQN+0x134>
				}
				else if (nw>=26 && nw<=31)
   136fe:	230b      	movs	r3, #11
   13700:	18fb      	adds	r3, r7, r3
   13702:	781b      	ldrb	r3, [r3, #0]
   13704:	2b19      	cmp	r3, #25
   13706:	d908      	bls.n	1371a <gsm_responseLine_isCSQN+0x126>
   13708:	230b      	movs	r3, #11
   1370a:	18fb      	adds	r3, r7, r3
   1370c:	781b      	ldrb	r3, [r3, #0]
   1370e:	2b1f      	cmp	r3, #31
   13710:	d803      	bhi.n	1371a <gsm_responseLine_isCSQN+0x126>
				{
					*signal = 5;
   13712:	683b      	ldr	r3, [r7, #0]
   13714:	2205      	movs	r2, #5
   13716:	701a      	strb	r2, [r3, #0]
   13718:	e006      	b.n	13728 <gsm_responseLine_isCSQN+0x134>
				}
				else
				{
					*signal = 0;
   1371a:	683b      	ldr	r3, [r7, #0]
   1371c:	2200      	movs	r2, #0
   1371e:	701a      	strb	r2, [r3, #0]
   13720:	e002      	b.n	13728 <gsm_responseLine_isCSQN+0x134>
				}
			}
		}
		else
		{
			*signal  = 0;
   13722:	683b      	ldr	r3, [r7, #0]
   13724:	2200      	movs	r2, #0
   13726:	701a      	strb	r2, [r3, #0]
		}
		return true;
   13728:	2301      	movs	r3, #1
   1372a:	e000      	b.n	1372e <gsm_responseLine_isCSQN+0x13a>
	}
	
	return false;
   1372c:	2300      	movs	r3, #0
}
   1372e:	0018      	movs	r0, r3
   13730:	46bd      	mov	sp, r7
   13732:	b004      	add	sp, #16
   13734:	bd80      	pop	{r7, pc}
   13736:	46c0      	nop			; (mov r8, r8)
   13738:	0002a888 	.word	0x0002a888
   1373c:	00029b77 	.word	0x00029b77
   13740:	0002a6e8 	.word	0x0002a6e8
   13744:	0002a684 	.word	0x0002a684
   13748:	00029ba9 	.word	0x00029ba9
   1374c:	0002a688 	.word	0x0002a688
   13750:	00012aa5 	.word	0x00012aa5
   13754:	0002979d 	.word	0x0002979d

00013758 <gsm_responseLine_get_IncommingCallNo>:

bool gsm_responseLine_get_IncommingCallNo(char *response,char *phone_number)
{
   13758:	b580      	push	{r7, lr}
   1375a:	b084      	sub	sp, #16
   1375c:	af00      	add	r7, sp, #0
   1375e:	6078      	str	r0, [r7, #4]
   13760:	6039      	str	r1, [r7, #0]
	if(strstr(response,"+CLIP"))
   13762:	4a1e      	ldr	r2, [pc, #120]	; (137dc <gsm_responseLine_get_IncommingCallNo+0x84>)
   13764:	687b      	ldr	r3, [r7, #4]
   13766:	0011      	movs	r1, r2
   13768:	0018      	movs	r0, r3
   1376a:	4b1d      	ldr	r3, [pc, #116]	; (137e0 <gsm_responseLine_get_IncommingCallNo+0x88>)
   1376c:	4798      	blx	r3
   1376e:	1e03      	subs	r3, r0, #0
   13770:	d02e      	beq.n	137d0 <gsm_responseLine_get_IncommingCallNo+0x78>
	{
		char *ptr_tocken;
		ptr_tocken = strtok(response,":");
   13772:	4a1c      	ldr	r2, [pc, #112]	; (137e4 <gsm_responseLine_get_IncommingCallNo+0x8c>)
   13774:	687b      	ldr	r3, [r7, #4]
   13776:	0011      	movs	r1, r2
   13778:	0018      	movs	r0, r3
   1377a:	4b1b      	ldr	r3, [pc, #108]	; (137e8 <gsm_responseLine_get_IncommingCallNo+0x90>)
   1377c:	4798      	blx	r3
   1377e:	0003      	movs	r3, r0
   13780:	60fb      	str	r3, [r7, #12]
		ptr_tocken = strtok(NULL,",");
   13782:	4b1a      	ldr	r3, [pc, #104]	; (137ec <gsm_responseLine_get_IncommingCallNo+0x94>)
   13784:	0019      	movs	r1, r3
   13786:	2000      	movs	r0, #0
   13788:	4b17      	ldr	r3, [pc, #92]	; (137e8 <gsm_responseLine_get_IncommingCallNo+0x90>)
   1378a:	4798      	blx	r3
   1378c:	0003      	movs	r3, r0
   1378e:	60fb      	str	r3, [r7, #12]
		ptr_tocken = strtok(ptr_tocken,"\"");
   13790:	4a17      	ldr	r2, [pc, #92]	; (137f0 <gsm_responseLine_get_IncommingCallNo+0x98>)
   13792:	68fb      	ldr	r3, [r7, #12]
   13794:	0011      	movs	r1, r2
   13796:	0018      	movs	r0, r3
   13798:	4b13      	ldr	r3, [pc, #76]	; (137e8 <gsm_responseLine_get_IncommingCallNo+0x90>)
   1379a:	4798      	blx	r3
   1379c:	0003      	movs	r3, r0
   1379e:	60fb      	str	r3, [r7, #12]
		ptr_tocken = strtok(NULL,"\"");
   137a0:	4b13      	ldr	r3, [pc, #76]	; (137f0 <gsm_responseLine_get_IncommingCallNo+0x98>)
   137a2:	0019      	movs	r1, r3
   137a4:	2000      	movs	r0, #0
   137a6:	4b10      	ldr	r3, [pc, #64]	; (137e8 <gsm_responseLine_get_IncommingCallNo+0x90>)
   137a8:	4798      	blx	r3
   137aa:	0003      	movs	r3, r0
   137ac:	60fb      	str	r3, [r7, #12]
		
		if (!strstr(ptr_tocken,"+"))
   137ae:	68fb      	ldr	r3, [r7, #12]
   137b0:	212b      	movs	r1, #43	; 0x2b
   137b2:	0018      	movs	r0, r3
   137b4:	4b0f      	ldr	r3, [pc, #60]	; (137f4 <gsm_responseLine_get_IncommingCallNo+0x9c>)
   137b6:	4798      	blx	r3
   137b8:	1e03      	subs	r3, r0, #0
   137ba:	d101      	bne.n	137c0 <gsm_responseLine_get_IncommingCallNo+0x68>
		{
			return false;
   137bc:	2300      	movs	r3, #0
   137be:	e008      	b.n	137d2 <gsm_responseLine_get_IncommingCallNo+0x7a>
		}
		strcpy(phone_number, (char *)(ptr_tocken));
   137c0:	68fa      	ldr	r2, [r7, #12]
   137c2:	683b      	ldr	r3, [r7, #0]
   137c4:	0011      	movs	r1, r2
   137c6:	0018      	movs	r0, r3
   137c8:	4b0b      	ldr	r3, [pc, #44]	; (137f8 <gsm_responseLine_get_IncommingCallNo+0xa0>)
   137ca:	4798      	blx	r3
		return true;
   137cc:	2301      	movs	r3, #1
   137ce:	e000      	b.n	137d2 <gsm_responseLine_get_IncommingCallNo+0x7a>
	}
	else
	{
		return false;
   137d0:	2300      	movs	r3, #0
	}
}
   137d2:	0018      	movs	r0, r3
   137d4:	46bd      	mov	sp, r7
   137d6:	b004      	add	sp, #16
   137d8:	bd80      	pop	{r7, pc}
   137da:	46c0      	nop			; (mov r8, r8)
   137dc:	0002a890 	.word	0x0002a890
   137e0:	00029b77 	.word	0x00029b77
   137e4:	0002a684 	.word	0x0002a684
   137e8:	00029ba9 	.word	0x00029ba9
   137ec:	0002a688 	.word	0x0002a688
   137f0:	0002a86c 	.word	0x0002a86c
   137f4:	00029b1b 	.word	0x00029b1b
   137f8:	00029b37 	.word	0x00029b37

000137fc <gsm_responseLine_isCallCut>:

bool gsm_responseLine_isCallCut(char *response)
{
   137fc:	b580      	push	{r7, lr}
   137fe:	b082      	sub	sp, #8
   13800:	af00      	add	r7, sp, #0
   13802:	6078      	str	r0, [r7, #4]
	if (strstr(response,"NO CARRIER"))
   13804:	4a16      	ldr	r2, [pc, #88]	; (13860 <gsm_responseLine_isCallCut+0x64>)
   13806:	687b      	ldr	r3, [r7, #4]
   13808:	0011      	movs	r1, r2
   1380a:	0018      	movs	r0, r3
   1380c:	4b15      	ldr	r3, [pc, #84]	; (13864 <gsm_responseLine_isCallCut+0x68>)
   1380e:	4798      	blx	r3
   13810:	1e03      	subs	r3, r0, #0
   13812:	d001      	beq.n	13818 <gsm_responseLine_isCallCut+0x1c>
	{
		return true;
   13814:	2301      	movs	r3, #1
   13816:	e01e      	b.n	13856 <gsm_responseLine_isCallCut+0x5a>
	}
	else if (strstr(response,"BUSY"))
   13818:	4a13      	ldr	r2, [pc, #76]	; (13868 <gsm_responseLine_isCallCut+0x6c>)
   1381a:	687b      	ldr	r3, [r7, #4]
   1381c:	0011      	movs	r1, r2
   1381e:	0018      	movs	r0, r3
   13820:	4b10      	ldr	r3, [pc, #64]	; (13864 <gsm_responseLine_isCallCut+0x68>)
   13822:	4798      	blx	r3
   13824:	1e03      	subs	r3, r0, #0
   13826:	d001      	beq.n	1382c <gsm_responseLine_isCallCut+0x30>
	{
		return true;
   13828:	2301      	movs	r3, #1
   1382a:	e014      	b.n	13856 <gsm_responseLine_isCallCut+0x5a>
	}
	else if (strstr(response,"NO ANSWER"))
   1382c:	4a0f      	ldr	r2, [pc, #60]	; (1386c <gsm_responseLine_isCallCut+0x70>)
   1382e:	687b      	ldr	r3, [r7, #4]
   13830:	0011      	movs	r1, r2
   13832:	0018      	movs	r0, r3
   13834:	4b0b      	ldr	r3, [pc, #44]	; (13864 <gsm_responseLine_isCallCut+0x68>)
   13836:	4798      	blx	r3
   13838:	1e03      	subs	r3, r0, #0
   1383a:	d001      	beq.n	13840 <gsm_responseLine_isCallCut+0x44>
	{
		return true;
   1383c:	2301      	movs	r3, #1
   1383e:	e00a      	b.n	13856 <gsm_responseLine_isCallCut+0x5a>
	}
	else if (strstr(response,"ERROR"))
   13840:	4a0b      	ldr	r2, [pc, #44]	; (13870 <gsm_responseLine_isCallCut+0x74>)
   13842:	687b      	ldr	r3, [r7, #4]
   13844:	0011      	movs	r1, r2
   13846:	0018      	movs	r0, r3
   13848:	4b06      	ldr	r3, [pc, #24]	; (13864 <gsm_responseLine_isCallCut+0x68>)
   1384a:	4798      	blx	r3
   1384c:	1e03      	subs	r3, r0, #0
   1384e:	d001      	beq.n	13854 <gsm_responseLine_isCallCut+0x58>
	{
		return true;
   13850:	2301      	movs	r3, #1
   13852:	e000      	b.n	13856 <gsm_responseLine_isCallCut+0x5a>
	}

	return false;
   13854:	2300      	movs	r3, #0
}
   13856:	0018      	movs	r0, r3
   13858:	46bd      	mov	sp, r7
   1385a:	b002      	add	sp, #8
   1385c:	bd80      	pop	{r7, pc}
   1385e:	46c0      	nop			; (mov r8, r8)
   13860:	0002a898 	.word	0x0002a898
   13864:	00029b77 	.word	0x00029b77
   13868:	0002a8a4 	.word	0x0002a8a4
   1386c:	0002a8ac 	.word	0x0002a8ac
   13870:	0002a564 	.word	0x0002a564

00013874 <gsm_responseLine_isNew_DTMF_Command_Received>:

bool gsm_responseLine_isNew_DTMF_Command_Received(char *response)
{
   13874:	b580      	push	{r7, lr}
   13876:	b082      	sub	sp, #8
   13878:	af00      	add	r7, sp, #0
   1387a:	6078      	str	r0, [r7, #4]
	if (strstr(response,"+DTMF:"))
   1387c:	4a07      	ldr	r2, [pc, #28]	; (1389c <gsm_responseLine_isNew_DTMF_Command_Received+0x28>)
   1387e:	687b      	ldr	r3, [r7, #4]
   13880:	0011      	movs	r1, r2
   13882:	0018      	movs	r0, r3
   13884:	4b06      	ldr	r3, [pc, #24]	; (138a0 <gsm_responseLine_isNew_DTMF_Command_Received+0x2c>)
   13886:	4798      	blx	r3
   13888:	1e03      	subs	r3, r0, #0
   1388a:	d001      	beq.n	13890 <gsm_responseLine_isNew_DTMF_Command_Received+0x1c>
	{
		return true;
   1388c:	2301      	movs	r3, #1
   1388e:	e000      	b.n	13892 <gsm_responseLine_isNew_DTMF_Command_Received+0x1e>
	}
	else
	{
		return false;
   13890:	2300      	movs	r3, #0
	}
}
   13892:	0018      	movs	r0, r3
   13894:	46bd      	mov	sp, r7
   13896:	b002      	add	sp, #8
   13898:	bd80      	pop	{r7, pc}
   1389a:	46c0      	nop			; (mov r8, r8)
   1389c:	0002a8b8 	.word	0x0002a8b8
   138a0:	00029b77 	.word	0x00029b77

000138a4 <gsm_responseLine_is_StopSound_Received>:

bool gsm_responseLine_is_StopSound_Received(char *response)
{
   138a4:	b580      	push	{r7, lr}
   138a6:	b082      	sub	sp, #8
   138a8:	af00      	add	r7, sp, #0
   138aa:	6078      	str	r0, [r7, #4]
	if (strstr(response,"+CREC: 0"))
   138ac:	4a07      	ldr	r2, [pc, #28]	; (138cc <gsm_responseLine_is_StopSound_Received+0x28>)
   138ae:	687b      	ldr	r3, [r7, #4]
   138b0:	0011      	movs	r1, r2
   138b2:	0018      	movs	r0, r3
   138b4:	4b06      	ldr	r3, [pc, #24]	; (138d0 <gsm_responseLine_is_StopSound_Received+0x2c>)
   138b6:	4798      	blx	r3
   138b8:	1e03      	subs	r3, r0, #0
   138ba:	d001      	beq.n	138c0 <gsm_responseLine_is_StopSound_Received+0x1c>
	{
		return true;
   138bc:	2301      	movs	r3, #1
   138be:	e000      	b.n	138c2 <gsm_responseLine_is_StopSound_Received+0x1e>
	}
	else
	{
		return false;
   138c0:	2300      	movs	r3, #0
	}
}
   138c2:	0018      	movs	r0, r3
   138c4:	46bd      	mov	sp, r7
   138c6:	b002      	add	sp, #8
   138c8:	bd80      	pop	{r7, pc}
   138ca:	46c0      	nop			; (mov r8, r8)
   138cc:	0002a8c0 	.word	0x0002a8c0
   138d0:	00029b77 	.word	0x00029b77

000138d4 <system_pinmux_get_group_from_gpio_pin>:
{
   138d4:	b580      	push	{r7, lr}
   138d6:	b084      	sub	sp, #16
   138d8:	af00      	add	r7, sp, #0
   138da:	0002      	movs	r2, r0
   138dc:	1dfb      	adds	r3, r7, #7
   138de:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   138e0:	230f      	movs	r3, #15
   138e2:	18fb      	adds	r3, r7, r3
   138e4:	1dfa      	adds	r2, r7, #7
   138e6:	7812      	ldrb	r2, [r2, #0]
   138e8:	09d2      	lsrs	r2, r2, #7
   138ea:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   138ec:	230e      	movs	r3, #14
   138ee:	18fb      	adds	r3, r7, r3
   138f0:	1dfa      	adds	r2, r7, #7
   138f2:	7812      	ldrb	r2, [r2, #0]
   138f4:	0952      	lsrs	r2, r2, #5
   138f6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   138f8:	4b0d      	ldr	r3, [pc, #52]	; (13930 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   138fa:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   138fc:	230f      	movs	r3, #15
   138fe:	18fb      	adds	r3, r7, r3
   13900:	781b      	ldrb	r3, [r3, #0]
   13902:	2b00      	cmp	r3, #0
   13904:	d10f      	bne.n	13926 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   13906:	230f      	movs	r3, #15
   13908:	18fb      	adds	r3, r7, r3
   1390a:	781b      	ldrb	r3, [r3, #0]
   1390c:	009b      	lsls	r3, r3, #2
   1390e:	2210      	movs	r2, #16
   13910:	4694      	mov	ip, r2
   13912:	44bc      	add	ip, r7
   13914:	4463      	add	r3, ip
   13916:	3b08      	subs	r3, #8
   13918:	681a      	ldr	r2, [r3, #0]
   1391a:	230e      	movs	r3, #14
   1391c:	18fb      	adds	r3, r7, r3
   1391e:	781b      	ldrb	r3, [r3, #0]
   13920:	01db      	lsls	r3, r3, #7
   13922:	18d3      	adds	r3, r2, r3
   13924:	e000      	b.n	13928 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   13926:	2300      	movs	r3, #0
}
   13928:	0018      	movs	r0, r3
   1392a:	46bd      	mov	sp, r7
   1392c:	b004      	add	sp, #16
   1392e:	bd80      	pop	{r7, pc}
   13930:	41004400 	.word	0x41004400

00013934 <port_get_group_from_gpio_pin>:
{
   13934:	b580      	push	{r7, lr}
   13936:	b082      	sub	sp, #8
   13938:	af00      	add	r7, sp, #0
   1393a:	0002      	movs	r2, r0
   1393c:	1dfb      	adds	r3, r7, #7
   1393e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   13940:	1dfb      	adds	r3, r7, #7
   13942:	781b      	ldrb	r3, [r3, #0]
   13944:	0018      	movs	r0, r3
   13946:	4b03      	ldr	r3, [pc, #12]	; (13954 <port_get_group_from_gpio_pin+0x20>)
   13948:	4798      	blx	r3
   1394a:	0003      	movs	r3, r0
}
   1394c:	0018      	movs	r0, r3
   1394e:	46bd      	mov	sp, r7
   13950:	b002      	add	sp, #8
   13952:	bd80      	pop	{r7, pc}
   13954:	000138d5 	.word	0x000138d5

00013958 <port_get_config_defaults>:
{
   13958:	b580      	push	{r7, lr}
   1395a:	b082      	sub	sp, #8
   1395c:	af00      	add	r7, sp, #0
   1395e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   13960:	687b      	ldr	r3, [r7, #4]
   13962:	2200      	movs	r2, #0
   13964:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   13966:	687b      	ldr	r3, [r7, #4]
   13968:	2201      	movs	r2, #1
   1396a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1396c:	687b      	ldr	r3, [r7, #4]
   1396e:	2200      	movs	r2, #0
   13970:	709a      	strb	r2, [r3, #2]
}
   13972:	46c0      	nop			; (mov r8, r8)
   13974:	46bd      	mov	sp, r7
   13976:	b002      	add	sp, #8
   13978:	bd80      	pop	{r7, pc}
	...

0001397c <port_pin_set_output_level>:
{
   1397c:	b580      	push	{r7, lr}
   1397e:	b084      	sub	sp, #16
   13980:	af00      	add	r7, sp, #0
   13982:	0002      	movs	r2, r0
   13984:	1dfb      	adds	r3, r7, #7
   13986:	701a      	strb	r2, [r3, #0]
   13988:	1dbb      	adds	r3, r7, #6
   1398a:	1c0a      	adds	r2, r1, #0
   1398c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1398e:	1dfb      	adds	r3, r7, #7
   13990:	781b      	ldrb	r3, [r3, #0]
   13992:	0018      	movs	r0, r3
   13994:	4b0d      	ldr	r3, [pc, #52]	; (139cc <port_pin_set_output_level+0x50>)
   13996:	4798      	blx	r3
   13998:	0003      	movs	r3, r0
   1399a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1399c:	1dfb      	adds	r3, r7, #7
   1399e:	781b      	ldrb	r3, [r3, #0]
   139a0:	221f      	movs	r2, #31
   139a2:	4013      	ands	r3, r2
   139a4:	2201      	movs	r2, #1
   139a6:	409a      	lsls	r2, r3
   139a8:	0013      	movs	r3, r2
   139aa:	60bb      	str	r3, [r7, #8]
	if (level) {
   139ac:	1dbb      	adds	r3, r7, #6
   139ae:	781b      	ldrb	r3, [r3, #0]
   139b0:	2b00      	cmp	r3, #0
   139b2:	d003      	beq.n	139bc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   139b4:	68fb      	ldr	r3, [r7, #12]
   139b6:	68ba      	ldr	r2, [r7, #8]
   139b8:	619a      	str	r2, [r3, #24]
}
   139ba:	e002      	b.n	139c2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   139bc:	68fb      	ldr	r3, [r7, #12]
   139be:	68ba      	ldr	r2, [r7, #8]
   139c0:	615a      	str	r2, [r3, #20]
}
   139c2:	46c0      	nop			; (mov r8, r8)
   139c4:	46bd      	mov	sp, r7
   139c6:	b004      	add	sp, #16
   139c8:	bd80      	pop	{r7, pc}
   139ca:	46c0      	nop			; (mov r8, r8)
   139cc:	00013935 	.word	0x00013935

000139d0 <LCD_init>:
#include <asf.h>
#include "lcd_driver.h"


void LCD_init()
{
   139d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   139d2:	b08b      	sub	sp, #44	; 0x2c
   139d4:	af00      	add	r7, sp, #0
	uint8_t cols = LCD_COLS;
   139d6:	230b      	movs	r3, #11
   139d8:	2218      	movs	r2, #24
   139da:	4694      	mov	ip, r2
   139dc:	44bc      	add	ip, r7
   139de:	4463      	add	r3, ip
   139e0:	2210      	movs	r2, #16
   139e2:	701a      	strb	r2, [r3, #0]
	uint8_t lines = LCD_ROWS;
   139e4:	230a      	movs	r3, #10
   139e6:	2218      	movs	r2, #24
   139e8:	4694      	mov	ip, r2
   139ea:	44bc      	add	ip, r7
   139ec:	4463      	add	r3, ip
   139ee:	2202      	movs	r2, #2
   139f0:	701a      	strb	r2, [r3, #0]
	delay_init();
   139f2:	4b90      	ldr	r3, [pc, #576]	; (13c34 <LCD_init+0x264>)
   139f4:	4798      	blx	r3
	_rs_pin     = LCD_RS_PIN;
   139f6:	4b90      	ldr	r3, [pc, #576]	; (13c38 <LCD_init+0x268>)
   139f8:	223f      	movs	r2, #63	; 0x3f
   139fa:	701a      	strb	r2, [r3, #0]
	_enable_pin = LCD_EN_PIN;
   139fc:	4b8f      	ldr	r3, [pc, #572]	; (13c3c <LCD_init+0x26c>)
   139fe:	223e      	movs	r2, #62	; 0x3e
   13a00:	701a      	strb	r2, [r3, #0]
	
	_data_pins[0] = LCD_DATA_LINE_D4_PIN;
   13a02:	4b8f      	ldr	r3, [pc, #572]	; (13c40 <LCD_init+0x270>)
   13a04:	2221      	movs	r2, #33	; 0x21
   13a06:	701a      	strb	r2, [r3, #0]
	_data_pins[1] = LCD_DATA_LINE_D5_PIN;
   13a08:	4b8d      	ldr	r3, [pc, #564]	; (13c40 <LCD_init+0x270>)
   13a0a:	2220      	movs	r2, #32
   13a0c:	705a      	strb	r2, [r3, #1]
	_data_pins[2] = LCD_DATA_LINE_D6_PIN;
   13a0e:	4b8c      	ldr	r3, [pc, #560]	; (13c40 <LCD_init+0x270>)
   13a10:	2223      	movs	r2, #35	; 0x23
   13a12:	709a      	strb	r2, [r3, #2]
	_data_pins[3] = LCD_DATA_LINE_D7_PIN;
   13a14:	4b8a      	ldr	r3, [pc, #552]	; (13c40 <LCD_init+0x270>)
   13a16:	2222      	movs	r2, #34	; 0x22
   13a18:	70da      	strb	r2, [r3, #3]

	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
   13a1a:	4b8a      	ldr	r3, [pc, #552]	; (13c44 <LCD_init+0x274>)
   13a1c:	2200      	movs	r2, #0
   13a1e:	701a      	strb	r2, [r3, #0]
	
	if (lines > 1)
   13a20:	230a      	movs	r3, #10
   13a22:	2218      	movs	r2, #24
   13a24:	4694      	mov	ip, r2
   13a26:	44bc      	add	ip, r7
   13a28:	4463      	add	r3, ip
   13a2a:	781b      	ldrb	r3, [r3, #0]
   13a2c:	2b01      	cmp	r3, #1
   13a2e:	d906      	bls.n	13a3e <LCD_init+0x6e>
	{
		_displayfunction |= LCD_2LINE;
   13a30:	4b84      	ldr	r3, [pc, #528]	; (13c44 <LCD_init+0x274>)
   13a32:	781b      	ldrb	r3, [r3, #0]
   13a34:	2208      	movs	r2, #8
   13a36:	4313      	orrs	r3, r2
   13a38:	b2da      	uxtb	r2, r3
   13a3a:	4b82      	ldr	r3, [pc, #520]	; (13c44 <LCD_init+0x274>)
   13a3c:	701a      	strb	r2, [r3, #0]
	}
	_numlines = lines;
   13a3e:	4b82      	ldr	r3, [pc, #520]	; (13c48 <LCD_init+0x278>)
   13a40:	220a      	movs	r2, #10
   13a42:	2118      	movs	r1, #24
   13a44:	468c      	mov	ip, r1
   13a46:	44bc      	add	ip, r7
   13a48:	4462      	add	r2, ip
   13a4a:	7812      	ldrb	r2, [r2, #0]
   13a4c:	701a      	strb	r2, [r3, #0]
	LCD_setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
   13a4e:	230b      	movs	r3, #11
   13a50:	2218      	movs	r2, #24
   13a52:	4694      	mov	ip, r2
   13a54:	44bc      	add	ip, r7
   13a56:	4463      	add	r3, ip
   13a58:	781a      	ldrb	r2, [r3, #0]
   13a5a:	230b      	movs	r3, #11
   13a5c:	2118      	movs	r1, #24
   13a5e:	468c      	mov	ip, r1
   13a60:	44bc      	add	ip, r7
   13a62:	4463      	add	r3, ip
   13a64:	781b      	ldrb	r3, [r3, #0]
   13a66:	3340      	adds	r3, #64	; 0x40
   13a68:	2140      	movs	r1, #64	; 0x40
   13a6a:	2000      	movs	r0, #0
   13a6c:	4c77      	ldr	r4, [pc, #476]	; (13c4c <LCD_init+0x27c>)
   13a6e:	47a0      	blx	r4
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
   13a70:	231c      	movs	r3, #28
   13a72:	18fb      	adds	r3, r7, r3
   13a74:	0018      	movs	r0, r3
   13a76:	4b76      	ldr	r3, [pc, #472]	; (13c50 <LCD_init+0x280>)
   13a78:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   13a7a:	231c      	movs	r3, #28
   13a7c:	18fb      	adds	r3, r7, r3
   13a7e:	2201      	movs	r2, #1
   13a80:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(_rs_pin,&config_port_pin);
   13a82:	4b6d      	ldr	r3, [pc, #436]	; (13c38 <LCD_init+0x268>)
   13a84:	781b      	ldrb	r3, [r3, #0]
   13a86:	221c      	movs	r2, #28
   13a88:	18ba      	adds	r2, r7, r2
   13a8a:	0011      	movs	r1, r2
   13a8c:	0018      	movs	r0, r3
   13a8e:	4b71      	ldr	r3, [pc, #452]	; (13c54 <LCD_init+0x284>)
   13a90:	4798      	blx	r3
	port_pin_set_config(_enable_pin,&config_port_pin);
   13a92:	4b6a      	ldr	r3, [pc, #424]	; (13c3c <LCD_init+0x26c>)
   13a94:	781b      	ldrb	r3, [r3, #0]
   13a96:	221c      	movs	r2, #28
   13a98:	18ba      	adds	r2, r7, r2
   13a9a:	0011      	movs	r1, r2
   13a9c:	0018      	movs	r0, r3
   13a9e:	4b6d      	ldr	r3, [pc, #436]	; (13c54 <LCD_init+0x284>)
   13aa0:	4798      	blx	r3
	//port_pin_set_config(LCD_BACKLIGHT,&config_port_pin);
	
	for (int i=0; i<4; ++i)
   13aa2:	2300      	movs	r3, #0
   13aa4:	627b      	str	r3, [r7, #36]	; 0x24
   13aa6:	e00c      	b.n	13ac2 <LCD_init+0xf2>
	{
		port_pin_set_config(_data_pins[i],&config_port_pin);
   13aa8:	4a65      	ldr	r2, [pc, #404]	; (13c40 <LCD_init+0x270>)
   13aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13aac:	18d3      	adds	r3, r2, r3
   13aae:	781b      	ldrb	r3, [r3, #0]
   13ab0:	221c      	movs	r2, #28
   13ab2:	18ba      	adds	r2, r7, r2
   13ab4:	0011      	movs	r1, r2
   13ab6:	0018      	movs	r0, r3
   13ab8:	4b66      	ldr	r3, [pc, #408]	; (13c54 <LCD_init+0x284>)
   13aba:	4798      	blx	r3
	for (int i=0; i<4; ++i)
   13abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13abe:	3301      	adds	r3, #1
   13ac0:	627b      	str	r3, [r7, #36]	; 0x24
   13ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13ac4:	2b03      	cmp	r3, #3
   13ac6:	ddef      	ble.n	13aa8 <LCD_init+0xd8>
	}
	delay_us(50000);
   13ac8:	2000      	movs	r0, #0
   13aca:	4b63      	ldr	r3, [pc, #396]	; (13c58 <LCD_init+0x288>)
   13acc:	4798      	blx	r3
   13ace:	0003      	movs	r3, r0
   13ad0:	613b      	str	r3, [r7, #16]
   13ad2:	2300      	movs	r3, #0
   13ad4:	617b      	str	r3, [r7, #20]
   13ad6:	4c61      	ldr	r4, [pc, #388]	; (13c5c <LCD_init+0x28c>)
   13ad8:	4a61      	ldr	r2, [pc, #388]	; (13c60 <LCD_init+0x290>)
   13ada:	2300      	movs	r3, #0
   13adc:	6938      	ldr	r0, [r7, #16]
   13ade:	6979      	ldr	r1, [r7, #20]
   13ae0:	47a0      	blx	r4
   13ae2:	0003      	movs	r3, r0
   13ae4:	000c      	movs	r4, r1
   13ae6:	0019      	movs	r1, r3
   13ae8:	0022      	movs	r2, r4
   13aea:	4b5e      	ldr	r3, [pc, #376]	; (13c64 <LCD_init+0x294>)
   13aec:	2400      	movs	r4, #0
   13aee:	18c9      	adds	r1, r1, r3
   13af0:	4162      	adcs	r2, r4
   13af2:	0008      	movs	r0, r1
   13af4:	0011      	movs	r1, r2
   13af6:	4c5c      	ldr	r4, [pc, #368]	; (13c68 <LCD_init+0x298>)
   13af8:	4a5c      	ldr	r2, [pc, #368]	; (13c6c <LCD_init+0x29c>)
   13afa:	2300      	movs	r3, #0
   13afc:	47a0      	blx	r4
   13afe:	0003      	movs	r3, r0
   13b00:	000c      	movs	r4, r1
   13b02:	0018      	movs	r0, r3
   13b04:	4b5a      	ldr	r3, [pc, #360]	; (13c70 <LCD_init+0x2a0>)
   13b06:	4798      	blx	r3
	port_pin_set_output_level(_rs_pin,LOW);
   13b08:	4b4b      	ldr	r3, [pc, #300]	; (13c38 <LCD_init+0x268>)
   13b0a:	781b      	ldrb	r3, [r3, #0]
   13b0c:	2100      	movs	r1, #0
   13b0e:	0018      	movs	r0, r3
   13b10:	4b58      	ldr	r3, [pc, #352]	; (13c74 <LCD_init+0x2a4>)
   13b12:	4798      	blx	r3
	port_pin_set_output_level(_enable_pin,LOW);
   13b14:	4b49      	ldr	r3, [pc, #292]	; (13c3c <LCD_init+0x26c>)
   13b16:	781b      	ldrb	r3, [r3, #0]
   13b18:	2100      	movs	r1, #0
   13b1a:	0018      	movs	r0, r3
   13b1c:	4b55      	ldr	r3, [pc, #340]	; (13c74 <LCD_init+0x2a4>)
   13b1e:	4798      	blx	r3
	//port_pin_set_output_level(LCD_BACKLIGHT,LOW);
	
	 write4bits(0x03);
   13b20:	2003      	movs	r0, #3
   13b22:	4b55      	ldr	r3, [pc, #340]	; (13c78 <LCD_init+0x2a8>)
   13b24:	4798      	blx	r3
	 delay_us(4500); 
   13b26:	2000      	movs	r0, #0
   13b28:	4b4b      	ldr	r3, [pc, #300]	; (13c58 <LCD_init+0x288>)
   13b2a:	4798      	blx	r3
   13b2c:	0003      	movs	r3, r0
   13b2e:	60bb      	str	r3, [r7, #8]
   13b30:	2300      	movs	r3, #0
   13b32:	60fb      	str	r3, [r7, #12]
   13b34:	4c49      	ldr	r4, [pc, #292]	; (13c5c <LCD_init+0x28c>)
   13b36:	4a51      	ldr	r2, [pc, #324]	; (13c7c <LCD_init+0x2ac>)
   13b38:	2300      	movs	r3, #0
   13b3a:	68b8      	ldr	r0, [r7, #8]
   13b3c:	68f9      	ldr	r1, [r7, #12]
   13b3e:	47a0      	blx	r4
   13b40:	0003      	movs	r3, r0
   13b42:	000c      	movs	r4, r1
   13b44:	0019      	movs	r1, r3
   13b46:	0022      	movs	r2, r4
   13b48:	4b46      	ldr	r3, [pc, #280]	; (13c64 <LCD_init+0x294>)
   13b4a:	2400      	movs	r4, #0
   13b4c:	18c9      	adds	r1, r1, r3
   13b4e:	4162      	adcs	r2, r4
   13b50:	0008      	movs	r0, r1
   13b52:	0011      	movs	r1, r2
   13b54:	4c44      	ldr	r4, [pc, #272]	; (13c68 <LCD_init+0x298>)
   13b56:	4a45      	ldr	r2, [pc, #276]	; (13c6c <LCD_init+0x29c>)
   13b58:	2300      	movs	r3, #0
   13b5a:	47a0      	blx	r4
   13b5c:	0003      	movs	r3, r0
   13b5e:	000c      	movs	r4, r1
   13b60:	0018      	movs	r0, r3
   13b62:	4b43      	ldr	r3, [pc, #268]	; (13c70 <LCD_init+0x2a0>)
   13b64:	4798      	blx	r3
	 
	 write4bits(0x03);
   13b66:	2003      	movs	r0, #3
   13b68:	4b43      	ldr	r3, [pc, #268]	; (13c78 <LCD_init+0x2a8>)
   13b6a:	4798      	blx	r3
	 delay_us(4500); 
   13b6c:	2000      	movs	r0, #0
   13b6e:	4b3a      	ldr	r3, [pc, #232]	; (13c58 <LCD_init+0x288>)
   13b70:	4798      	blx	r3
   13b72:	0003      	movs	r3, r0
   13b74:	603b      	str	r3, [r7, #0]
   13b76:	2300      	movs	r3, #0
   13b78:	607b      	str	r3, [r7, #4]
   13b7a:	4c38      	ldr	r4, [pc, #224]	; (13c5c <LCD_init+0x28c>)
   13b7c:	4a3f      	ldr	r2, [pc, #252]	; (13c7c <LCD_init+0x2ac>)
   13b7e:	2300      	movs	r3, #0
   13b80:	6838      	ldr	r0, [r7, #0]
   13b82:	6879      	ldr	r1, [r7, #4]
   13b84:	47a0      	blx	r4
   13b86:	0003      	movs	r3, r0
   13b88:	000c      	movs	r4, r1
   13b8a:	0019      	movs	r1, r3
   13b8c:	0022      	movs	r2, r4
   13b8e:	4b35      	ldr	r3, [pc, #212]	; (13c64 <LCD_init+0x294>)
   13b90:	2400      	movs	r4, #0
   13b92:	18c9      	adds	r1, r1, r3
   13b94:	4162      	adcs	r2, r4
   13b96:	0008      	movs	r0, r1
   13b98:	0011      	movs	r1, r2
   13b9a:	4c33      	ldr	r4, [pc, #204]	; (13c68 <LCD_init+0x298>)
   13b9c:	4a33      	ldr	r2, [pc, #204]	; (13c6c <LCD_init+0x29c>)
   13b9e:	2300      	movs	r3, #0
   13ba0:	47a0      	blx	r4
   13ba2:	0003      	movs	r3, r0
   13ba4:	000c      	movs	r4, r1
   13ba6:	0018      	movs	r0, r3
   13ba8:	4b31      	ldr	r3, [pc, #196]	; (13c70 <LCD_init+0x2a0>)
   13baa:	4798      	blx	r3
	
	 write4bits(0x03);
   13bac:	2003      	movs	r0, #3
   13bae:	4b32      	ldr	r3, [pc, #200]	; (13c78 <LCD_init+0x2a8>)
   13bb0:	4798      	blx	r3
	 delay_us(150);
   13bb2:	2000      	movs	r0, #0
   13bb4:	4b28      	ldr	r3, [pc, #160]	; (13c58 <LCD_init+0x288>)
   13bb6:	4798      	blx	r3
   13bb8:	0003      	movs	r3, r0
   13bba:	001d      	movs	r5, r3
   13bbc:	2300      	movs	r3, #0
   13bbe:	001e      	movs	r6, r3
   13bc0:	4c26      	ldr	r4, [pc, #152]	; (13c5c <LCD_init+0x28c>)
   13bc2:	2296      	movs	r2, #150	; 0x96
   13bc4:	2300      	movs	r3, #0
   13bc6:	0028      	movs	r0, r5
   13bc8:	0031      	movs	r1, r6
   13bca:	47a0      	blx	r4
   13bcc:	0003      	movs	r3, r0
   13bce:	000c      	movs	r4, r1
   13bd0:	0019      	movs	r1, r3
   13bd2:	0022      	movs	r2, r4
   13bd4:	4b23      	ldr	r3, [pc, #140]	; (13c64 <LCD_init+0x294>)
   13bd6:	2400      	movs	r4, #0
   13bd8:	18c9      	adds	r1, r1, r3
   13bda:	4162      	adcs	r2, r4
   13bdc:	0008      	movs	r0, r1
   13bde:	0011      	movs	r1, r2
   13be0:	4c21      	ldr	r4, [pc, #132]	; (13c68 <LCD_init+0x298>)
   13be2:	4a22      	ldr	r2, [pc, #136]	; (13c6c <LCD_init+0x29c>)
   13be4:	2300      	movs	r3, #0
   13be6:	47a0      	blx	r4
   13be8:	0003      	movs	r3, r0
   13bea:	000c      	movs	r4, r1
   13bec:	0018      	movs	r0, r3
   13bee:	4b20      	ldr	r3, [pc, #128]	; (13c70 <LCD_init+0x2a0>)
   13bf0:	4798      	blx	r3

	 write4bits(0x02);
   13bf2:	2002      	movs	r0, #2
   13bf4:	4b20      	ldr	r3, [pc, #128]	; (13c78 <LCD_init+0x2a8>)
   13bf6:	4798      	blx	r3

	 command(LCD_FUNCTIONSET | _displayfunction);
   13bf8:	4b12      	ldr	r3, [pc, #72]	; (13c44 <LCD_init+0x274>)
   13bfa:	781b      	ldrb	r3, [r3, #0]
   13bfc:	2220      	movs	r2, #32
   13bfe:	4313      	orrs	r3, r2
   13c00:	b2db      	uxtb	r3, r3
   13c02:	0018      	movs	r0, r3
   13c04:	4b1e      	ldr	r3, [pc, #120]	; (13c80 <LCD_init+0x2b0>)
   13c06:	4798      	blx	r3
	 
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
   13c08:	4b1e      	ldr	r3, [pc, #120]	; (13c84 <LCD_init+0x2b4>)
   13c0a:	2204      	movs	r2, #4
   13c0c:	701a      	strb	r2, [r3, #0]
	LCD_display();
   13c0e:	4b1e      	ldr	r3, [pc, #120]	; (13c88 <LCD_init+0x2b8>)
   13c10:	4798      	blx	r3
	LCD_clear();
   13c12:	4b1e      	ldr	r3, [pc, #120]	; (13c8c <LCD_init+0x2bc>)
   13c14:	4798      	blx	r3
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
   13c16:	4b1e      	ldr	r3, [pc, #120]	; (13c90 <LCD_init+0x2c0>)
   13c18:	2202      	movs	r2, #2
   13c1a:	701a      	strb	r2, [r3, #0]
	command(LCD_ENTRYMODESET | _displaymode);
   13c1c:	4b1c      	ldr	r3, [pc, #112]	; (13c90 <LCD_init+0x2c0>)
   13c1e:	781b      	ldrb	r3, [r3, #0]
   13c20:	2204      	movs	r2, #4
   13c22:	4313      	orrs	r3, r2
   13c24:	b2db      	uxtb	r3, r3
   13c26:	0018      	movs	r0, r3
   13c28:	4b15      	ldr	r3, [pc, #84]	; (13c80 <LCD_init+0x2b0>)
   13c2a:	4798      	blx	r3
}
   13c2c:	46c0      	nop			; (mov r8, r8)
   13c2e:	46bd      	mov	sp, r7
   13c30:	b00b      	add	sp, #44	; 0x2c
   13c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13c34:	0002309d 	.word	0x0002309d
   13c38:	200006e0 	.word	0x200006e0
   13c3c:	200006df 	.word	0x200006df
   13c40:	200006d8 	.word	0x200006d8
   13c44:	200006dd 	.word	0x200006dd
   13c48:	200006d6 	.word	0x200006d6
   13c4c:	00013d41 	.word	0x00013d41
   13c50:	00013959 	.word	0x00013959
   13c54:	000236f1 	.word	0x000236f1
   13c58:	0002505d 	.word	0x0002505d
   13c5c:	00027025 	.word	0x00027025
   13c60:	0000c350 	.word	0x0000c350
   13c64:	006acfbf 	.word	0x006acfbf
   13c68:	00026fe5 	.word	0x00026fe5
   13c6c:	006acfc0 	.word	0x006acfc0
   13c70:	20000001 	.word	0x20000001
   13c74:	0001397d 	.word	0x0001397d
   13c78:	00013d7d 	.word	0x00013d7d
   13c7c:	00001194 	.word	0x00001194
   13c80:	00013ec1 	.word	0x00013ec1
   13c84:	200006d5 	.word	0x200006d5
   13c88:	000140a9 	.word	0x000140a9
   13c8c:	00013f61 	.word	0x00013f61
   13c90:	200006dc 	.word	0x200006dc

00013c94 <LCD_PWR_CONFIG>:

void LCD_PWR_CONFIG()
{
   13c94:	b580      	push	{r7, lr}
   13c96:	b082      	sub	sp, #8
   13c98:	af00      	add	r7, sp, #0
	struct port_config pin_conf_gsm_status;
	port_get_config_defaults(&pin_conf_gsm_status);
   13c9a:	1d3b      	adds	r3, r7, #4
   13c9c:	0018      	movs	r0, r3
   13c9e:	4b08      	ldr	r3, [pc, #32]	; (13cc0 <LCD_PWR_CONFIG+0x2c>)
   13ca0:	4798      	blx	r3
	pin_conf_gsm_status.direction  = PORT_PIN_DIR_OUTPUT;
   13ca2:	1d3b      	adds	r3, r7, #4
   13ca4:	2201      	movs	r2, #1
   13ca6:	701a      	strb	r2, [r3, #0]
	pin_conf_gsm_status.input_pull = PORT_PIN_PULL_NONE;
   13ca8:	1d3b      	adds	r3, r7, #4
   13caa:	2200      	movs	r2, #0
   13cac:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(LCD_PWR_CNTRL, &pin_conf_gsm_status);
   13cae:	1d3b      	adds	r3, r7, #4
   13cb0:	0019      	movs	r1, r3
   13cb2:	2024      	movs	r0, #36	; 0x24
   13cb4:	4b03      	ldr	r3, [pc, #12]	; (13cc4 <LCD_PWR_CONFIG+0x30>)
   13cb6:	4798      	blx	r3
}
   13cb8:	46c0      	nop			; (mov r8, r8)
   13cba:	46bd      	mov	sp, r7
   13cbc:	b002      	add	sp, #8
   13cbe:	bd80      	pop	{r7, pc}
   13cc0:	00013959 	.word	0x00013959
   13cc4:	000236f1 	.word	0x000236f1

00013cc8 <LCD_PWR_EN>:

void LCD_PWR_EN()
{
   13cc8:	b580      	push	{r7, lr}
   13cca:	af00      	add	r7, sp, #0
	port_pin_set_output_level(LCD_PWR_CNTRL,HIGH);
   13ccc:	2101      	movs	r1, #1
   13cce:	2024      	movs	r0, #36	; 0x24
   13cd0:	4b02      	ldr	r3, [pc, #8]	; (13cdc <LCD_PWR_EN+0x14>)
   13cd2:	4798      	blx	r3
}
   13cd4:	46c0      	nop			; (mov r8, r8)
   13cd6:	46bd      	mov	sp, r7
   13cd8:	bd80      	pop	{r7, pc}
   13cda:	46c0      	nop			; (mov r8, r8)
   13cdc:	0001397d 	.word	0x0001397d

00013ce0 <LCD_PWR_DIS>:
void LCD_PWR_DIS()
{
   13ce0:	b580      	push	{r7, lr}
   13ce2:	b082      	sub	sp, #8
   13ce4:	af00      	add	r7, sp, #0
	port_pin_set_output_level(LCD_PWR_CNTRL,LOW);
   13ce6:	2100      	movs	r1, #0
   13ce8:	2024      	movs	r0, #36	; 0x24
   13cea:	4b11      	ldr	r3, [pc, #68]	; (13d30 <LCD_PWR_DIS+0x50>)
   13cec:	4798      	blx	r3
	
	for (int i = 0; i < 4; i++)
   13cee:	2300      	movs	r3, #0
   13cf0:	607b      	str	r3, [r7, #4]
   13cf2:	e00a      	b.n	13d0a <LCD_PWR_DIS+0x2a>
	{
		port_pin_set_output_level(_data_pins[i],LOW);
   13cf4:	4a0f      	ldr	r2, [pc, #60]	; (13d34 <LCD_PWR_DIS+0x54>)
   13cf6:	687b      	ldr	r3, [r7, #4]
   13cf8:	18d3      	adds	r3, r2, r3
   13cfa:	781b      	ldrb	r3, [r3, #0]
   13cfc:	2100      	movs	r1, #0
   13cfe:	0018      	movs	r0, r3
   13d00:	4b0b      	ldr	r3, [pc, #44]	; (13d30 <LCD_PWR_DIS+0x50>)
   13d02:	4798      	blx	r3
	for (int i = 0; i < 4; i++)
   13d04:	687b      	ldr	r3, [r7, #4]
   13d06:	3301      	adds	r3, #1
   13d08:	607b      	str	r3, [r7, #4]
   13d0a:	687b      	ldr	r3, [r7, #4]
   13d0c:	2b03      	cmp	r3, #3
   13d0e:	ddf1      	ble.n	13cf4 <LCD_PWR_DIS+0x14>
	}
	
	port_pin_set_output_level(_enable_pin, LOW);
   13d10:	4b09      	ldr	r3, [pc, #36]	; (13d38 <LCD_PWR_DIS+0x58>)
   13d12:	781b      	ldrb	r3, [r3, #0]
   13d14:	2100      	movs	r1, #0
   13d16:	0018      	movs	r0, r3
   13d18:	4b05      	ldr	r3, [pc, #20]	; (13d30 <LCD_PWR_DIS+0x50>)
   13d1a:	4798      	blx	r3
	
	port_pin_set_output_level(_rs_pin, LOW);
   13d1c:	4b07      	ldr	r3, [pc, #28]	; (13d3c <LCD_PWR_DIS+0x5c>)
   13d1e:	781b      	ldrb	r3, [r3, #0]
   13d20:	2100      	movs	r1, #0
   13d22:	0018      	movs	r0, r3
   13d24:	4b02      	ldr	r3, [pc, #8]	; (13d30 <LCD_PWR_DIS+0x50>)
   13d26:	4798      	blx	r3
	
}
   13d28:	46c0      	nop			; (mov r8, r8)
   13d2a:	46bd      	mov	sp, r7
   13d2c:	b002      	add	sp, #8
   13d2e:	bd80      	pop	{r7, pc}
   13d30:	0001397d 	.word	0x0001397d
   13d34:	200006d8 	.word	0x200006d8
   13d38:	200006df 	.word	0x200006df
   13d3c:	200006e0 	.word	0x200006e0

00013d40 <LCD_setRowOffsets>:

void LCD_setRowOffsets(int row0, int row1, int row2, int row3)
{
   13d40:	b580      	push	{r7, lr}
   13d42:	b084      	sub	sp, #16
   13d44:	af00      	add	r7, sp, #0
   13d46:	60f8      	str	r0, [r7, #12]
   13d48:	60b9      	str	r1, [r7, #8]
   13d4a:	607a      	str	r2, [r7, #4]
   13d4c:	603b      	str	r3, [r7, #0]
	_row_offsets[0] = row0;
   13d4e:	68fb      	ldr	r3, [r7, #12]
   13d50:	b2da      	uxtb	r2, r3
   13d52:	4b09      	ldr	r3, [pc, #36]	; (13d78 <LCD_setRowOffsets+0x38>)
   13d54:	701a      	strb	r2, [r3, #0]
	_row_offsets[1] = row1;
   13d56:	68bb      	ldr	r3, [r7, #8]
   13d58:	b2da      	uxtb	r2, r3
   13d5a:	4b07      	ldr	r3, [pc, #28]	; (13d78 <LCD_setRowOffsets+0x38>)
   13d5c:	705a      	strb	r2, [r3, #1]
	_row_offsets[2] = row2;
   13d5e:	687b      	ldr	r3, [r7, #4]
   13d60:	b2da      	uxtb	r2, r3
   13d62:	4b05      	ldr	r3, [pc, #20]	; (13d78 <LCD_setRowOffsets+0x38>)
   13d64:	709a      	strb	r2, [r3, #2]
	_row_offsets[3] = row3;
   13d66:	683b      	ldr	r3, [r7, #0]
   13d68:	b2da      	uxtb	r2, r3
   13d6a:	4b03      	ldr	r3, [pc, #12]	; (13d78 <LCD_setRowOffsets+0x38>)
   13d6c:	70da      	strb	r2, [r3, #3]
}
   13d6e:	46c0      	nop			; (mov r8, r8)
   13d70:	46bd      	mov	sp, r7
   13d72:	b004      	add	sp, #16
   13d74:	bd80      	pop	{r7, pc}
   13d76:	46c0      	nop			; (mov r8, r8)
   13d78:	200006d0 	.word	0x200006d0

00013d7c <write4bits>:

void write4bits(uint8_t value)
{
   13d7c:	b580      	push	{r7, lr}
   13d7e:	b084      	sub	sp, #16
   13d80:	af00      	add	r7, sp, #0
   13d82:	0002      	movs	r2, r0
   13d84:	1dfb      	adds	r3, r7, #7
   13d86:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++) 
   13d88:	2300      	movs	r3, #0
   13d8a:	60fb      	str	r3, [r7, #12]
   13d8c:	e013      	b.n	13db6 <write4bits+0x3a>
	{
		port_pin_set_output_level(_data_pins[i], (value >> i) & 0x01);
   13d8e:	4a0e      	ldr	r2, [pc, #56]	; (13dc8 <write4bits+0x4c>)
   13d90:	68fb      	ldr	r3, [r7, #12]
   13d92:	18d3      	adds	r3, r2, r3
   13d94:	7818      	ldrb	r0, [r3, #0]
   13d96:	1dfb      	adds	r3, r7, #7
   13d98:	781a      	ldrb	r2, [r3, #0]
   13d9a:	68fb      	ldr	r3, [r7, #12]
   13d9c:	411a      	asrs	r2, r3
   13d9e:	0013      	movs	r3, r2
   13da0:	2201      	movs	r2, #1
   13da2:	4013      	ands	r3, r2
   13da4:	1e5a      	subs	r2, r3, #1
   13da6:	4193      	sbcs	r3, r2
   13da8:	b2db      	uxtb	r3, r3
   13daa:	0019      	movs	r1, r3
   13dac:	4b07      	ldr	r3, [pc, #28]	; (13dcc <write4bits+0x50>)
   13dae:	4798      	blx	r3
	for (int i = 0; i < 4; i++) 
   13db0:	68fb      	ldr	r3, [r7, #12]
   13db2:	3301      	adds	r3, #1
   13db4:	60fb      	str	r3, [r7, #12]
   13db6:	68fb      	ldr	r3, [r7, #12]
   13db8:	2b03      	cmp	r3, #3
   13dba:	dde8      	ble.n	13d8e <write4bits+0x12>
	}
	pulseEnable();
   13dbc:	4b04      	ldr	r3, [pc, #16]	; (13dd0 <write4bits+0x54>)
   13dbe:	4798      	blx	r3
}
   13dc0:	46c0      	nop			; (mov r8, r8)
   13dc2:	46bd      	mov	sp, r7
   13dc4:	b004      	add	sp, #16
   13dc6:	bd80      	pop	{r7, pc}
   13dc8:	200006d8 	.word	0x200006d8
   13dcc:	0001397d 	.word	0x0001397d
   13dd0:	00013dd5 	.word	0x00013dd5

00013dd4 <pulseEnable>:



void pulseEnable(void)
{
   13dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   13dd6:	b085      	sub	sp, #20
   13dd8:	af00      	add	r7, sp, #0
 	port_pin_set_output_level(_enable_pin, LOW);
   13dda:	4b31      	ldr	r3, [pc, #196]	; (13ea0 <pulseEnable+0xcc>)
   13ddc:	781b      	ldrb	r3, [r3, #0]
   13dde:	2100      	movs	r1, #0
   13de0:	0018      	movs	r0, r3
   13de2:	4b30      	ldr	r3, [pc, #192]	; (13ea4 <pulseEnable+0xd0>)
   13de4:	4798      	blx	r3
 	delay_us(1);
   13de6:	2000      	movs	r0, #0
   13de8:	4b2f      	ldr	r3, [pc, #188]	; (13ea8 <pulseEnable+0xd4>)
   13dea:	4798      	blx	r3
   13dec:	0003      	movs	r3, r0
   13dee:	60bb      	str	r3, [r7, #8]
   13df0:	2300      	movs	r3, #0
   13df2:	60fb      	str	r3, [r7, #12]
   13df4:	4b2d      	ldr	r3, [pc, #180]	; (13eac <pulseEnable+0xd8>)
   13df6:	2400      	movs	r4, #0
   13df8:	68b8      	ldr	r0, [r7, #8]
   13dfa:	68f9      	ldr	r1, [r7, #12]
   13dfc:	18c0      	adds	r0, r0, r3
   13dfe:	4161      	adcs	r1, r4
   13e00:	4c2b      	ldr	r4, [pc, #172]	; (13eb0 <pulseEnable+0xdc>)
   13e02:	4a2c      	ldr	r2, [pc, #176]	; (13eb4 <pulseEnable+0xe0>)
   13e04:	2300      	movs	r3, #0
   13e06:	47a0      	blx	r4
   13e08:	0003      	movs	r3, r0
   13e0a:	000c      	movs	r4, r1
   13e0c:	0018      	movs	r0, r3
   13e0e:	4b2a      	ldr	r3, [pc, #168]	; (13eb8 <pulseEnable+0xe4>)
   13e10:	4798      	blx	r3
 	port_pin_set_output_level(_enable_pin, HIGH);
   13e12:	4b23      	ldr	r3, [pc, #140]	; (13ea0 <pulseEnable+0xcc>)
   13e14:	781b      	ldrb	r3, [r3, #0]
   13e16:	2101      	movs	r1, #1
   13e18:	0018      	movs	r0, r3
   13e1a:	4b22      	ldr	r3, [pc, #136]	; (13ea4 <pulseEnable+0xd0>)
   13e1c:	4798      	blx	r3
 	delay_us(1);
   13e1e:	2000      	movs	r0, #0
   13e20:	4b21      	ldr	r3, [pc, #132]	; (13ea8 <pulseEnable+0xd4>)
   13e22:	4798      	blx	r3
   13e24:	0003      	movs	r3, r0
   13e26:	001d      	movs	r5, r3
   13e28:	2300      	movs	r3, #0
   13e2a:	001e      	movs	r6, r3
   13e2c:	4b1f      	ldr	r3, [pc, #124]	; (13eac <pulseEnable+0xd8>)
   13e2e:	2400      	movs	r4, #0
   13e30:	0028      	movs	r0, r5
   13e32:	0031      	movs	r1, r6
   13e34:	18c0      	adds	r0, r0, r3
   13e36:	4161      	adcs	r1, r4
   13e38:	4c1d      	ldr	r4, [pc, #116]	; (13eb0 <pulseEnable+0xdc>)
   13e3a:	4a1e      	ldr	r2, [pc, #120]	; (13eb4 <pulseEnable+0xe0>)
   13e3c:	2300      	movs	r3, #0
   13e3e:	47a0      	blx	r4
   13e40:	0003      	movs	r3, r0
   13e42:	000c      	movs	r4, r1
   13e44:	0018      	movs	r0, r3
   13e46:	4b1c      	ldr	r3, [pc, #112]	; (13eb8 <pulseEnable+0xe4>)
   13e48:	4798      	blx	r3
 	port_pin_set_output_level(_enable_pin, LOW);
   13e4a:	4b15      	ldr	r3, [pc, #84]	; (13ea0 <pulseEnable+0xcc>)
   13e4c:	781b      	ldrb	r3, [r3, #0]
   13e4e:	2100      	movs	r1, #0
   13e50:	0018      	movs	r0, r3
   13e52:	4b14      	ldr	r3, [pc, #80]	; (13ea4 <pulseEnable+0xd0>)
   13e54:	4798      	blx	r3
 	delay_us(100);
   13e56:	2000      	movs	r0, #0
   13e58:	4b13      	ldr	r3, [pc, #76]	; (13ea8 <pulseEnable+0xd4>)
   13e5a:	4798      	blx	r3
   13e5c:	0003      	movs	r3, r0
   13e5e:	603b      	str	r3, [r7, #0]
   13e60:	2300      	movs	r3, #0
   13e62:	607b      	str	r3, [r7, #4]
   13e64:	4c15      	ldr	r4, [pc, #84]	; (13ebc <pulseEnable+0xe8>)
   13e66:	2264      	movs	r2, #100	; 0x64
   13e68:	2300      	movs	r3, #0
   13e6a:	6838      	ldr	r0, [r7, #0]
   13e6c:	6879      	ldr	r1, [r7, #4]
   13e6e:	47a0      	blx	r4
   13e70:	0003      	movs	r3, r0
   13e72:	000c      	movs	r4, r1
   13e74:	0019      	movs	r1, r3
   13e76:	0022      	movs	r2, r4
   13e78:	4b0c      	ldr	r3, [pc, #48]	; (13eac <pulseEnable+0xd8>)
   13e7a:	2400      	movs	r4, #0
   13e7c:	18c9      	adds	r1, r1, r3
   13e7e:	4162      	adcs	r2, r4
   13e80:	0008      	movs	r0, r1
   13e82:	0011      	movs	r1, r2
   13e84:	4c0a      	ldr	r4, [pc, #40]	; (13eb0 <pulseEnable+0xdc>)
   13e86:	4a0b      	ldr	r2, [pc, #44]	; (13eb4 <pulseEnable+0xe0>)
   13e88:	2300      	movs	r3, #0
   13e8a:	47a0      	blx	r4
   13e8c:	0003      	movs	r3, r0
   13e8e:	000c      	movs	r4, r1
   13e90:	0018      	movs	r0, r3
   13e92:	4b09      	ldr	r3, [pc, #36]	; (13eb8 <pulseEnable+0xe4>)
   13e94:	4798      	blx	r3

	//port_pin_set_output_level(_enable_pin, HIGH);
	//delay_us(1);
	//port_pin_set_output_level(_enable_pin, LOW);
	//delay_us(500);
}
   13e96:	46c0      	nop			; (mov r8, r8)
   13e98:	46bd      	mov	sp, r7
   13e9a:	b005      	add	sp, #20
   13e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13e9e:	46c0      	nop			; (mov r8, r8)
   13ea0:	200006df 	.word	0x200006df
   13ea4:	0001397d 	.word	0x0001397d
   13ea8:	0002505d 	.word	0x0002505d
   13eac:	006acfbf 	.word	0x006acfbf
   13eb0:	00026fe5 	.word	0x00026fe5
   13eb4:	006acfc0 	.word	0x006acfc0
   13eb8:	20000001 	.word	0x20000001
   13ebc:	00027025 	.word	0x00027025

00013ec0 <command>:

inline void command(uint8_t value) 
{
   13ec0:	b580      	push	{r7, lr}
   13ec2:	b082      	sub	sp, #8
   13ec4:	af00      	add	r7, sp, #0
   13ec6:	0002      	movs	r2, r0
   13ec8:	1dfb      	adds	r3, r7, #7
   13eca:	701a      	strb	r2, [r3, #0]
	send(value, LOW);
   13ecc:	1dfb      	adds	r3, r7, #7
   13ece:	781b      	ldrb	r3, [r3, #0]
   13ed0:	2100      	movs	r1, #0
   13ed2:	0018      	movs	r0, r3
   13ed4:	4b02      	ldr	r3, [pc, #8]	; (13ee0 <command+0x20>)
   13ed6:	4798      	blx	r3
}
   13ed8:	46c0      	nop			; (mov r8, r8)
   13eda:	46bd      	mov	sp, r7
   13edc:	b002      	add	sp, #8
   13ede:	bd80      	pop	{r7, pc}
   13ee0:	00013f0d 	.word	0x00013f0d

00013ee4 <LCD_write>:

inline size_t LCD_write(uint8_t value)
{
   13ee4:	b580      	push	{r7, lr}
   13ee6:	b082      	sub	sp, #8
   13ee8:	af00      	add	r7, sp, #0
   13eea:	0002      	movs	r2, r0
   13eec:	1dfb      	adds	r3, r7, #7
   13eee:	701a      	strb	r2, [r3, #0]
	send(value, HIGH);
   13ef0:	1dfb      	adds	r3, r7, #7
   13ef2:	781b      	ldrb	r3, [r3, #0]
   13ef4:	2101      	movs	r1, #1
   13ef6:	0018      	movs	r0, r3
   13ef8:	4b03      	ldr	r3, [pc, #12]	; (13f08 <LCD_write+0x24>)
   13efa:	4798      	blx	r3
	return 1;
   13efc:	2301      	movs	r3, #1
}
   13efe:	0018      	movs	r0, r3
   13f00:	46bd      	mov	sp, r7
   13f02:	b002      	add	sp, #8
   13f04:	bd80      	pop	{r7, pc}
   13f06:	46c0      	nop			; (mov r8, r8)
   13f08:	00013f0d 	.word	0x00013f0d

00013f0c <send>:

void send(uint8_t value, uint8_t mode) 
{
   13f0c:	b580      	push	{r7, lr}
   13f0e:	b082      	sub	sp, #8
   13f10:	af00      	add	r7, sp, #0
   13f12:	0002      	movs	r2, r0
   13f14:	1dfb      	adds	r3, r7, #7
   13f16:	701a      	strb	r2, [r3, #0]
   13f18:	1dbb      	adds	r3, r7, #6
   13f1a:	1c0a      	adds	r2, r1, #0
   13f1c:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(_rs_pin, mode);
   13f1e:	4b0d      	ldr	r3, [pc, #52]	; (13f54 <send+0x48>)
   13f20:	781a      	ldrb	r2, [r3, #0]
   13f22:	1dbb      	adds	r3, r7, #6
   13f24:	781b      	ldrb	r3, [r3, #0]
   13f26:	1e59      	subs	r1, r3, #1
   13f28:	418b      	sbcs	r3, r1
   13f2a:	b2db      	uxtb	r3, r3
   13f2c:	0019      	movs	r1, r3
   13f2e:	0010      	movs	r0, r2
   13f30:	4b09      	ldr	r3, [pc, #36]	; (13f58 <send+0x4c>)
   13f32:	4798      	blx	r3
	
	{
		write4bits(value>>4);
   13f34:	1dfb      	adds	r3, r7, #7
   13f36:	781b      	ldrb	r3, [r3, #0]
   13f38:	091b      	lsrs	r3, r3, #4
   13f3a:	b2db      	uxtb	r3, r3
   13f3c:	0018      	movs	r0, r3
   13f3e:	4b07      	ldr	r3, [pc, #28]	; (13f5c <send+0x50>)
   13f40:	4798      	blx	r3
		write4bits(value);
   13f42:	1dfb      	adds	r3, r7, #7
   13f44:	781b      	ldrb	r3, [r3, #0]
   13f46:	0018      	movs	r0, r3
   13f48:	4b04      	ldr	r3, [pc, #16]	; (13f5c <send+0x50>)
   13f4a:	4798      	blx	r3
	}
}
   13f4c:	46c0      	nop			; (mov r8, r8)
   13f4e:	46bd      	mov	sp, r7
   13f50:	b002      	add	sp, #8
   13f52:	bd80      	pop	{r7, pc}
   13f54:	200006e0 	.word	0x200006e0
   13f58:	0001397d 	.word	0x0001397d
   13f5c:	00013d7d 	.word	0x00013d7d

00013f60 <LCD_clear>:

void LCD_clear(void)
{
   13f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13f62:	af00      	add	r7, sp, #0
	command(LCD_CLEARDISPLAY);
   13f64:	2001      	movs	r0, #1
   13f66:	4b13      	ldr	r3, [pc, #76]	; (13fb4 <LCD_clear+0x54>)
   13f68:	4798      	blx	r3
	delay_us(2000);
   13f6a:	2000      	movs	r0, #0
   13f6c:	4b12      	ldr	r3, [pc, #72]	; (13fb8 <LCD_clear+0x58>)
   13f6e:	4798      	blx	r3
   13f70:	0003      	movs	r3, r0
   13f72:	001d      	movs	r5, r3
   13f74:	2300      	movs	r3, #0
   13f76:	001e      	movs	r6, r3
   13f78:	4c10      	ldr	r4, [pc, #64]	; (13fbc <LCD_clear+0x5c>)
   13f7a:	22fa      	movs	r2, #250	; 0xfa
   13f7c:	00d2      	lsls	r2, r2, #3
   13f7e:	2300      	movs	r3, #0
   13f80:	0028      	movs	r0, r5
   13f82:	0031      	movs	r1, r6
   13f84:	47a0      	blx	r4
   13f86:	0003      	movs	r3, r0
   13f88:	000c      	movs	r4, r1
   13f8a:	0019      	movs	r1, r3
   13f8c:	0022      	movs	r2, r4
   13f8e:	4b0c      	ldr	r3, [pc, #48]	; (13fc0 <LCD_clear+0x60>)
   13f90:	2400      	movs	r4, #0
   13f92:	18c9      	adds	r1, r1, r3
   13f94:	4162      	adcs	r2, r4
   13f96:	0008      	movs	r0, r1
   13f98:	0011      	movs	r1, r2
   13f9a:	4c0a      	ldr	r4, [pc, #40]	; (13fc4 <LCD_clear+0x64>)
   13f9c:	4a0a      	ldr	r2, [pc, #40]	; (13fc8 <LCD_clear+0x68>)
   13f9e:	2300      	movs	r3, #0
   13fa0:	47a0      	blx	r4
   13fa2:	0003      	movs	r3, r0
   13fa4:	000c      	movs	r4, r1
   13fa6:	0018      	movs	r0, r3
   13fa8:	4b08      	ldr	r3, [pc, #32]	; (13fcc <LCD_clear+0x6c>)
   13faa:	4798      	blx	r3
}
   13fac:	46c0      	nop			; (mov r8, r8)
   13fae:	46bd      	mov	sp, r7
   13fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13fb2:	46c0      	nop			; (mov r8, r8)
   13fb4:	00013ec1 	.word	0x00013ec1
   13fb8:	0002505d 	.word	0x0002505d
   13fbc:	00027025 	.word	0x00027025
   13fc0:	006acfbf 	.word	0x006acfbf
   13fc4:	00026fe5 	.word	0x00026fe5
   13fc8:	006acfc0 	.word	0x006acfc0
   13fcc:	20000001 	.word	0x20000001

00013fd0 <LCD_Create_Custom_createChar>:


void LCD_Create_Custom_createChar(uint8_t location, uint8_t charmap[]) 
{
   13fd0:	b580      	push	{r7, lr}
   13fd2:	b084      	sub	sp, #16
   13fd4:	af00      	add	r7, sp, #0
   13fd6:	0002      	movs	r2, r0
   13fd8:	6039      	str	r1, [r7, #0]
   13fda:	1dfb      	adds	r3, r7, #7
   13fdc:	701a      	strb	r2, [r3, #0]
	location &= 0x7;
   13fde:	1dfb      	adds	r3, r7, #7
   13fe0:	1dfa      	adds	r2, r7, #7
   13fe2:	7812      	ldrb	r2, [r2, #0]
   13fe4:	2107      	movs	r1, #7
   13fe6:	400a      	ands	r2, r1
   13fe8:	701a      	strb	r2, [r3, #0]
	command(LCD_SETCGRAMADDR | (location << 3));
   13fea:	1dfb      	adds	r3, r7, #7
   13fec:	781b      	ldrb	r3, [r3, #0]
   13fee:	00db      	lsls	r3, r3, #3
   13ff0:	b25b      	sxtb	r3, r3
   13ff2:	2240      	movs	r2, #64	; 0x40
   13ff4:	4313      	orrs	r3, r2
   13ff6:	b25b      	sxtb	r3, r3
   13ff8:	b2db      	uxtb	r3, r3
   13ffa:	0018      	movs	r0, r3
   13ffc:	4b0a      	ldr	r3, [pc, #40]	; (14028 <LCD_Create_Custom_createChar+0x58>)
   13ffe:	4798      	blx	r3
	for (int i=0; i<8; i++)
   14000:	2300      	movs	r3, #0
   14002:	60fb      	str	r3, [r7, #12]
   14004:	e009      	b.n	1401a <LCD_Create_Custom_createChar+0x4a>
	{
		LCD_write(charmap[i]);
   14006:	68fb      	ldr	r3, [r7, #12]
   14008:	683a      	ldr	r2, [r7, #0]
   1400a:	18d3      	adds	r3, r2, r3
   1400c:	781b      	ldrb	r3, [r3, #0]
   1400e:	0018      	movs	r0, r3
   14010:	4b06      	ldr	r3, [pc, #24]	; (1402c <LCD_Create_Custom_createChar+0x5c>)
   14012:	4798      	blx	r3
	for (int i=0; i<8; i++)
   14014:	68fb      	ldr	r3, [r7, #12]
   14016:	3301      	adds	r3, #1
   14018:	60fb      	str	r3, [r7, #12]
   1401a:	68fb      	ldr	r3, [r7, #12]
   1401c:	2b07      	cmp	r3, #7
   1401e:	ddf2      	ble.n	14006 <LCD_Create_Custom_createChar+0x36>
	}
}
   14020:	46c0      	nop			; (mov r8, r8)
   14022:	46bd      	mov	sp, r7
   14024:	b004      	add	sp, #16
   14026:	bd80      	pop	{r7, pc}
   14028:	00013ec1 	.word	0x00013ec1
   1402c:	00013ee5 	.word	0x00013ee5

00014030 <LCD_setCursor>:
	command(LCD_RETURNHOME);
	delay_us(2000);
}

void LCD_setCursor(uint8_t col, uint8_t row)
{
   14030:	b580      	push	{r7, lr}
   14032:	b084      	sub	sp, #16
   14034:	af00      	add	r7, sp, #0
   14036:	0002      	movs	r2, r0
   14038:	1dfb      	adds	r3, r7, #7
   1403a:	701a      	strb	r2, [r3, #0]
   1403c:	1dbb      	adds	r3, r7, #6
   1403e:	1c0a      	adds	r2, r1, #0
   14040:	701a      	strb	r2, [r3, #0]
	const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
   14042:	2304      	movs	r3, #4
   14044:	60fb      	str	r3, [r7, #12]
	if ( row >= max_lines ) 
   14046:	1dbb      	adds	r3, r7, #6
   14048:	781a      	ldrb	r2, [r3, #0]
   1404a:	68fb      	ldr	r3, [r7, #12]
   1404c:	429a      	cmp	r2, r3
   1404e:	d304      	bcc.n	1405a <LCD_setCursor+0x2a>
	{
		row = max_lines - 1; 
   14050:	68fb      	ldr	r3, [r7, #12]
   14052:	b2da      	uxtb	r2, r3
   14054:	1dbb      	adds	r3, r7, #6
   14056:	3a01      	subs	r2, #1
   14058:	701a      	strb	r2, [r3, #0]
	}
	if ( row >= _numlines )
   1405a:	4b10      	ldr	r3, [pc, #64]	; (1409c <LCD_setCursor+0x6c>)
   1405c:	781b      	ldrb	r3, [r3, #0]
   1405e:	1dba      	adds	r2, r7, #6
   14060:	7812      	ldrb	r2, [r2, #0]
   14062:	429a      	cmp	r2, r3
   14064:	d304      	bcc.n	14070 <LCD_setCursor+0x40>
	{
		row = _numlines - 1;
   14066:	4b0d      	ldr	r3, [pc, #52]	; (1409c <LCD_setCursor+0x6c>)
   14068:	781a      	ldrb	r2, [r3, #0]
   1406a:	1dbb      	adds	r3, r7, #6
   1406c:	3a01      	subs	r2, #1
   1406e:	701a      	strb	r2, [r3, #0]
	}
	command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
   14070:	1dbb      	adds	r3, r7, #6
   14072:	781b      	ldrb	r3, [r3, #0]
   14074:	4a0a      	ldr	r2, [pc, #40]	; (140a0 <LCD_setCursor+0x70>)
   14076:	5cd2      	ldrb	r2, [r2, r3]
   14078:	1dfb      	adds	r3, r7, #7
   1407a:	781b      	ldrb	r3, [r3, #0]
   1407c:	18d3      	adds	r3, r2, r3
   1407e:	b2db      	uxtb	r3, r3
   14080:	b25b      	sxtb	r3, r3
   14082:	2280      	movs	r2, #128	; 0x80
   14084:	4252      	negs	r2, r2
   14086:	4313      	orrs	r3, r2
   14088:	b25b      	sxtb	r3, r3
   1408a:	b2db      	uxtb	r3, r3
   1408c:	0018      	movs	r0, r3
   1408e:	4b05      	ldr	r3, [pc, #20]	; (140a4 <LCD_setCursor+0x74>)
   14090:	4798      	blx	r3
}
   14092:	46c0      	nop			; (mov r8, r8)
   14094:	46bd      	mov	sp, r7
   14096:	b004      	add	sp, #16
   14098:	bd80      	pop	{r7, pc}
   1409a:	46c0      	nop			; (mov r8, r8)
   1409c:	200006d6 	.word	0x200006d6
   140a0:	200006d0 	.word	0x200006d0
   140a4:	00013ec1 	.word	0x00013ec1

000140a8 <LCD_display>:
{
	_displaycontrol &= ~LCD_DISPLAYON;
	command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LCD_display(void) 
{
   140a8:	b580      	push	{r7, lr}
   140aa:	af00      	add	r7, sp, #0
	_displaycontrol |= LCD_DISPLAYON;
   140ac:	4b08      	ldr	r3, [pc, #32]	; (140d0 <LCD_display+0x28>)
   140ae:	781b      	ldrb	r3, [r3, #0]
   140b0:	2204      	movs	r2, #4
   140b2:	4313      	orrs	r3, r2
   140b4:	b2da      	uxtb	r2, r3
   140b6:	4b06      	ldr	r3, [pc, #24]	; (140d0 <LCD_display+0x28>)
   140b8:	701a      	strb	r2, [r3, #0]
	command(LCD_DISPLAYCONTROL | _displaycontrol);
   140ba:	4b05      	ldr	r3, [pc, #20]	; (140d0 <LCD_display+0x28>)
   140bc:	781b      	ldrb	r3, [r3, #0]
   140be:	2208      	movs	r2, #8
   140c0:	4313      	orrs	r3, r2
   140c2:	b2db      	uxtb	r3, r3
   140c4:	0018      	movs	r0, r3
   140c6:	4b03      	ldr	r3, [pc, #12]	; (140d4 <LCD_display+0x2c>)
   140c8:	4798      	blx	r3
}
   140ca:	46c0      	nop			; (mov r8, r8)
   140cc:	46bd      	mov	sp, r7
   140ce:	bd80      	pop	{r7, pc}
   140d0:	200006d5 	.word	0x200006d5
   140d4:	00013ec1 	.word	0x00013ec1

000140d8 <Buffer_writer>:

//////////////////////////////////////////////////////////////////////////


size_t Buffer_writer(const char *buffer)
{
   140d8:	b580      	push	{r7, lr}
   140da:	b084      	sub	sp, #16
   140dc:	af00      	add	r7, sp, #0
   140de:	6078      	str	r0, [r7, #4]
	size_t size = strlen(buffer);
   140e0:	687b      	ldr	r3, [r7, #4]
   140e2:	0018      	movs	r0, r3
   140e4:	4b0f      	ldr	r3, [pc, #60]	; (14124 <Buffer_writer+0x4c>)
   140e6:	4798      	blx	r3
   140e8:	0003      	movs	r3, r0
   140ea:	60fb      	str	r3, [r7, #12]
	size_t n = 0;
   140ec:	2300      	movs	r3, #0
   140ee:	60bb      	str	r3, [r7, #8]
	while (size--) {
   140f0:	e00b      	b.n	1410a <Buffer_writer+0x32>
		if (LCD_write(*buffer++)) n++;
   140f2:	687b      	ldr	r3, [r7, #4]
   140f4:	1c5a      	adds	r2, r3, #1
   140f6:	607a      	str	r2, [r7, #4]
   140f8:	781b      	ldrb	r3, [r3, #0]
   140fa:	0018      	movs	r0, r3
   140fc:	4b0a      	ldr	r3, [pc, #40]	; (14128 <Buffer_writer+0x50>)
   140fe:	4798      	blx	r3
   14100:	1e03      	subs	r3, r0, #0
   14102:	d008      	beq.n	14116 <Buffer_writer+0x3e>
   14104:	68bb      	ldr	r3, [r7, #8]
   14106:	3301      	adds	r3, #1
   14108:	60bb      	str	r3, [r7, #8]
	while (size--) {
   1410a:	68fb      	ldr	r3, [r7, #12]
   1410c:	1e5a      	subs	r2, r3, #1
   1410e:	60fa      	str	r2, [r7, #12]
   14110:	2b00      	cmp	r3, #0
   14112:	d1ee      	bne.n	140f2 <Buffer_writer+0x1a>
   14114:	e000      	b.n	14118 <Buffer_writer+0x40>
		else break;
   14116:	46c0      	nop			; (mov r8, r8)
	}
	return n;
   14118:	68bb      	ldr	r3, [r7, #8]
}
   1411a:	0018      	movs	r0, r3
   1411c:	46bd      	mov	sp, r7
   1411e:	b004      	add	sp, #16
   14120:	bd80      	pop	{r7, pc}
   14122:	46c0      	nop			; (mov r8, r8)
   14124:	00029b47 	.word	0x00029b47
   14128:	00013ee5 	.word	0x00013ee5

0001412c <lcd_printf>:
	return n;
}


void lcd_printf(const  char *fmt, ...)
{
   1412c:	b40f      	push	{r0, r1, r2, r3}
   1412e:	b580      	push	{r7, lr}
   14130:	b084      	sub	sp, #16
   14132:	af00      	add	r7, sp, #0
	int num_chars;
	char *lcd_buff;
	num_chars = strlen(fmt) + 3;
   14134:	69bb      	ldr	r3, [r7, #24]
   14136:	0018      	movs	r0, r3
   14138:	4b11      	ldr	r3, [pc, #68]	; (14180 <lcd_printf+0x54>)
   1413a:	4798      	blx	r3
   1413c:	0003      	movs	r3, r0
   1413e:	3303      	adds	r3, #3
   14140:	60fb      	str	r3, [r7, #12]
	lcd_buff = (char *)malloc(sizeof(char) * num_chars);
   14142:	68fb      	ldr	r3, [r7, #12]
   14144:	0018      	movs	r0, r3
   14146:	4b0f      	ldr	r3, [pc, #60]	; (14184 <lcd_printf+0x58>)
   14148:	4798      	blx	r3
   1414a:	0003      	movs	r3, r0
   1414c:	60bb      	str	r3, [r7, #8]
	va_list args;
	va_start(args, fmt);
   1414e:	231c      	movs	r3, #28
   14150:	18fb      	adds	r3, r7, r3
   14152:	607b      	str	r3, [r7, #4]
	vsprintf(lcd_buff,fmt,args);
   14154:	687a      	ldr	r2, [r7, #4]
   14156:	69b9      	ldr	r1, [r7, #24]
   14158:	68bb      	ldr	r3, [r7, #8]
   1415a:	0018      	movs	r0, r3
   1415c:	4b0a      	ldr	r3, [pc, #40]	; (14188 <lcd_printf+0x5c>)
   1415e:	4798      	blx	r3
	Buffer_writer(lcd_buff);
   14160:	68bb      	ldr	r3, [r7, #8]
   14162:	0018      	movs	r0, r3
   14164:	4b09      	ldr	r3, [pc, #36]	; (1418c <lcd_printf+0x60>)
   14166:	4798      	blx	r3
	va_end(args);
	free(lcd_buff);
   14168:	68bb      	ldr	r3, [r7, #8]
   1416a:	0018      	movs	r0, r3
   1416c:	4b08      	ldr	r3, [pc, #32]	; (14190 <lcd_printf+0x64>)
   1416e:	4798      	blx	r3
}
   14170:	46c0      	nop			; (mov r8, r8)
   14172:	46bd      	mov	sp, r7
   14174:	b004      	add	sp, #16
   14176:	bc80      	pop	{r7}
   14178:	bc08      	pop	{r3}
   1417a:	b004      	add	sp, #16
   1417c:	4718      	bx	r3
   1417e:	46c0      	nop			; (mov r8, r8)
   14180:	00029b47 	.word	0x00029b47
   14184:	00029835 	.word	0x00029835
   14188:	00029e35 	.word	0x00029e35
   1418c:	000140d9 	.word	0x000140d9
   14190:	00029849 	.word	0x00029849

00014194 <StringtoUpperCase>:
#include "yalgo.h"
#include "itoa.h"


void StringtoUpperCase(char *str)
{
   14194:	b580      	push	{r7, lr}
   14196:	b084      	sub	sp, #16
   14198:	af00      	add	r7, sp, #0
   1419a:	6078      	str	r0, [r7, #4]
	if (!str) return;
   1419c:	687b      	ldr	r3, [r7, #4]
   1419e:	2b00      	cmp	r3, #0
   141a0:	d028      	beq.n	141f4 <StringtoUpperCase+0x60>
	for (char *p = str; *p; p++) {
   141a2:	687b      	ldr	r3, [r7, #4]
   141a4:	60fb      	str	r3, [r7, #12]
   141a6:	e020      	b.n	141ea <StringtoUpperCase+0x56>
		*p = toupper(*p);
   141a8:	230b      	movs	r3, #11
   141aa:	18fb      	adds	r3, r7, r3
   141ac:	68fa      	ldr	r2, [r7, #12]
   141ae:	7812      	ldrb	r2, [r2, #0]
   141b0:	701a      	strb	r2, [r3, #0]
   141b2:	4b12      	ldr	r3, [pc, #72]	; (141fc <StringtoUpperCase+0x68>)
   141b4:	4798      	blx	r3
   141b6:	0002      	movs	r2, r0
   141b8:	230b      	movs	r3, #11
   141ba:	18fb      	adds	r3, r7, r3
   141bc:	781b      	ldrb	r3, [r3, #0]
   141be:	3301      	adds	r3, #1
   141c0:	18d3      	adds	r3, r2, r3
   141c2:	781b      	ldrb	r3, [r3, #0]
   141c4:	001a      	movs	r2, r3
   141c6:	2303      	movs	r3, #3
   141c8:	4013      	ands	r3, r2
   141ca:	2b02      	cmp	r3, #2
   141cc:	d104      	bne.n	141d8 <StringtoUpperCase+0x44>
   141ce:	230b      	movs	r3, #11
   141d0:	18fb      	adds	r3, r7, r3
   141d2:	781b      	ldrb	r3, [r3, #0]
   141d4:	3b20      	subs	r3, #32
   141d6:	e002      	b.n	141de <StringtoUpperCase+0x4a>
   141d8:	230b      	movs	r3, #11
   141da:	18fb      	adds	r3, r7, r3
   141dc:	781b      	ldrb	r3, [r3, #0]
   141de:	b2da      	uxtb	r2, r3
   141e0:	68fb      	ldr	r3, [r7, #12]
   141e2:	701a      	strb	r2, [r3, #0]
	for (char *p = str; *p; p++) {
   141e4:	68fb      	ldr	r3, [r7, #12]
   141e6:	3301      	adds	r3, #1
   141e8:	60fb      	str	r3, [r7, #12]
   141ea:	68fb      	ldr	r3, [r7, #12]
   141ec:	781b      	ldrb	r3, [r3, #0]
   141ee:	2b00      	cmp	r3, #0
   141f0:	d1da      	bne.n	141a8 <StringtoUpperCase+0x14>
   141f2:	e000      	b.n	141f6 <StringtoUpperCase+0x62>
	if (!str) return;
   141f4:	46c0      	nop			; (mov r8, r8)
	}
}
   141f6:	46bd      	mov	sp, r7
   141f8:	b004      	add	sp, #16
   141fa:	bd80      	pop	{r7, pc}
   141fc:	00029819 	.word	0x00029819

00014200 <StringstartsWith>:

bool StringstartsWith(const char *str,const char *pre)
{
   14200:	b580      	push	{r7, lr}
   14202:	b084      	sub	sp, #16
   14204:	af00      	add	r7, sp, #0
   14206:	6078      	str	r0, [r7, #4]
   14208:	6039      	str	r1, [r7, #0]
	size_t lenpre = strlen(pre),
   1420a:	683b      	ldr	r3, [r7, #0]
   1420c:	0018      	movs	r0, r3
   1420e:	4b10      	ldr	r3, [pc, #64]	; (14250 <StringstartsWith+0x50>)
   14210:	4798      	blx	r3
   14212:	0003      	movs	r3, r0
   14214:	60fb      	str	r3, [r7, #12]
	lenstr = strlen(str);
   14216:	687b      	ldr	r3, [r7, #4]
   14218:	0018      	movs	r0, r3
   1421a:	4b0d      	ldr	r3, [pc, #52]	; (14250 <StringstartsWith+0x50>)
   1421c:	4798      	blx	r3
   1421e:	0003      	movs	r3, r0
   14220:	60bb      	str	r3, [r7, #8]
	return lenstr < lenpre ? false : strncmp(pre, str, lenpre) == 0;
   14222:	68ba      	ldr	r2, [r7, #8]
   14224:	68fb      	ldr	r3, [r7, #12]
   14226:	429a      	cmp	r2, r3
   14228:	d309      	bcc.n	1423e <StringstartsWith+0x3e>
   1422a:	68fa      	ldr	r2, [r7, #12]
   1422c:	6879      	ldr	r1, [r7, #4]
   1422e:	683b      	ldr	r3, [r7, #0]
   14230:	0018      	movs	r0, r3
   14232:	4b08      	ldr	r3, [pc, #32]	; (14254 <StringstartsWith+0x54>)
   14234:	4798      	blx	r3
   14236:	1e03      	subs	r3, r0, #0
   14238:	d101      	bne.n	1423e <StringstartsWith+0x3e>
   1423a:	2301      	movs	r3, #1
   1423c:	e000      	b.n	14240 <StringstartsWith+0x40>
   1423e:	2300      	movs	r3, #0
   14240:	1c1a      	adds	r2, r3, #0
   14242:	2301      	movs	r3, #1
   14244:	4013      	ands	r3, r2
   14246:	b2db      	uxtb	r3, r3
}
   14248:	0018      	movs	r0, r3
   1424a:	46bd      	mov	sp, r7
   1424c:	b004      	add	sp, #16
   1424e:	bd80      	pop	{r7, pc}
   14250:	00029b47 	.word	0x00029b47
   14254:	00029b55 	.word	0x00029b55

00014258 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   14258:	b580      	push	{r7, lr}
   1425a:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   1425c:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   14260:	4b02      	ldr	r3, [pc, #8]	; (1426c <NVIC_SystemReset+0x14>)
   14262:	4a03      	ldr	r2, [pc, #12]	; (14270 <NVIC_SystemReset+0x18>)
   14264:	60da      	str	r2, [r3, #12]
   14266:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   1426a:	e7fe      	b.n	1426a <NVIC_SystemReset+0x12>
   1426c:	e000ed00 	.word	0xe000ed00
   14270:	05fa0004 	.word	0x05fa0004

00014274 <system_pinmux_get_group_from_gpio_pin>:
{
   14274:	b580      	push	{r7, lr}
   14276:	b084      	sub	sp, #16
   14278:	af00      	add	r7, sp, #0
   1427a:	0002      	movs	r2, r0
   1427c:	1dfb      	adds	r3, r7, #7
   1427e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   14280:	230f      	movs	r3, #15
   14282:	18fb      	adds	r3, r7, r3
   14284:	1dfa      	adds	r2, r7, #7
   14286:	7812      	ldrb	r2, [r2, #0]
   14288:	09d2      	lsrs	r2, r2, #7
   1428a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1428c:	230e      	movs	r3, #14
   1428e:	18fb      	adds	r3, r7, r3
   14290:	1dfa      	adds	r2, r7, #7
   14292:	7812      	ldrb	r2, [r2, #0]
   14294:	0952      	lsrs	r2, r2, #5
   14296:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   14298:	4b0d      	ldr	r3, [pc, #52]	; (142d0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1429a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1429c:	230f      	movs	r3, #15
   1429e:	18fb      	adds	r3, r7, r3
   142a0:	781b      	ldrb	r3, [r3, #0]
   142a2:	2b00      	cmp	r3, #0
   142a4:	d10f      	bne.n	142c6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   142a6:	230f      	movs	r3, #15
   142a8:	18fb      	adds	r3, r7, r3
   142aa:	781b      	ldrb	r3, [r3, #0]
   142ac:	009b      	lsls	r3, r3, #2
   142ae:	2210      	movs	r2, #16
   142b0:	4694      	mov	ip, r2
   142b2:	44bc      	add	ip, r7
   142b4:	4463      	add	r3, ip
   142b6:	3b08      	subs	r3, #8
   142b8:	681a      	ldr	r2, [r3, #0]
   142ba:	230e      	movs	r3, #14
   142bc:	18fb      	adds	r3, r7, r3
   142be:	781b      	ldrb	r3, [r3, #0]
   142c0:	01db      	lsls	r3, r3, #7
   142c2:	18d3      	adds	r3, r2, r3
   142c4:	e000      	b.n	142c8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   142c6:	2300      	movs	r3, #0
}
   142c8:	0018      	movs	r0, r3
   142ca:	46bd      	mov	sp, r7
   142cc:	b004      	add	sp, #16
   142ce:	bd80      	pop	{r7, pc}
   142d0:	41004400 	.word	0x41004400

000142d4 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   142d4:	b580      	push	{r7, lr}
   142d6:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   142d8:	4b02      	ldr	r3, [pc, #8]	; (142e4 <system_reset+0x10>)
   142da:	4798      	blx	r3
}
   142dc:	46c0      	nop			; (mov r8, r8)
   142de:	46bd      	mov	sp, r7
   142e0:	bd80      	pop	{r7, pc}
   142e2:	46c0      	nop			; (mov r8, r8)
   142e4:	00014259 	.word	0x00014259

000142e8 <port_get_group_from_gpio_pin>:
{
   142e8:	b580      	push	{r7, lr}
   142ea:	b082      	sub	sp, #8
   142ec:	af00      	add	r7, sp, #0
   142ee:	0002      	movs	r2, r0
   142f0:	1dfb      	adds	r3, r7, #7
   142f2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   142f4:	1dfb      	adds	r3, r7, #7
   142f6:	781b      	ldrb	r3, [r3, #0]
   142f8:	0018      	movs	r0, r3
   142fa:	4b03      	ldr	r3, [pc, #12]	; (14308 <port_get_group_from_gpio_pin+0x20>)
   142fc:	4798      	blx	r3
   142fe:	0003      	movs	r3, r0
}
   14300:	0018      	movs	r0, r3
   14302:	46bd      	mov	sp, r7
   14304:	b002      	add	sp, #8
   14306:	bd80      	pop	{r7, pc}
   14308:	00014275 	.word	0x00014275

0001430c <port_get_config_defaults>:
{
   1430c:	b580      	push	{r7, lr}
   1430e:	b082      	sub	sp, #8
   14310:	af00      	add	r7, sp, #0
   14312:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   14314:	687b      	ldr	r3, [r7, #4]
   14316:	2200      	movs	r2, #0
   14318:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1431a:	687b      	ldr	r3, [r7, #4]
   1431c:	2201      	movs	r2, #1
   1431e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   14320:	687b      	ldr	r3, [r7, #4]
   14322:	2200      	movs	r2, #0
   14324:	709a      	strb	r2, [r3, #2]
}
   14326:	46c0      	nop			; (mov r8, r8)
   14328:	46bd      	mov	sp, r7
   1432a:	b002      	add	sp, #8
   1432c:	bd80      	pop	{r7, pc}
	...

00014330 <port_pin_get_input_level>:
{
   14330:	b580      	push	{r7, lr}
   14332:	b084      	sub	sp, #16
   14334:	af00      	add	r7, sp, #0
   14336:	0002      	movs	r2, r0
   14338:	1dfb      	adds	r3, r7, #7
   1433a:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1433c:	1dfb      	adds	r3, r7, #7
   1433e:	781b      	ldrb	r3, [r3, #0]
   14340:	0018      	movs	r0, r3
   14342:	4b0b      	ldr	r3, [pc, #44]	; (14370 <port_pin_get_input_level+0x40>)
   14344:	4798      	blx	r3
   14346:	0003      	movs	r3, r0
   14348:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1434a:	1dfb      	adds	r3, r7, #7
   1434c:	781b      	ldrb	r3, [r3, #0]
   1434e:	221f      	movs	r2, #31
   14350:	4013      	ands	r3, r2
   14352:	2201      	movs	r2, #1
   14354:	409a      	lsls	r2, r3
   14356:	0013      	movs	r3, r2
   14358:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
   1435a:	68fb      	ldr	r3, [r7, #12]
   1435c:	6a1b      	ldr	r3, [r3, #32]
   1435e:	68ba      	ldr	r2, [r7, #8]
   14360:	4013      	ands	r3, r2
   14362:	1e5a      	subs	r2, r3, #1
   14364:	4193      	sbcs	r3, r2
   14366:	b2db      	uxtb	r3, r3
}
   14368:	0018      	movs	r0, r3
   1436a:	46bd      	mov	sp, r7
   1436c:	b004      	add	sp, #16
   1436e:	bd80      	pop	{r7, pc}
   14370:	000142e9 	.word	0x000142e9

00014374 <port_pin_set_output_level>:
{
   14374:	b580      	push	{r7, lr}
   14376:	b084      	sub	sp, #16
   14378:	af00      	add	r7, sp, #0
   1437a:	0002      	movs	r2, r0
   1437c:	1dfb      	adds	r3, r7, #7
   1437e:	701a      	strb	r2, [r3, #0]
   14380:	1dbb      	adds	r3, r7, #6
   14382:	1c0a      	adds	r2, r1, #0
   14384:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   14386:	1dfb      	adds	r3, r7, #7
   14388:	781b      	ldrb	r3, [r3, #0]
   1438a:	0018      	movs	r0, r3
   1438c:	4b0d      	ldr	r3, [pc, #52]	; (143c4 <port_pin_set_output_level+0x50>)
   1438e:	4798      	blx	r3
   14390:	0003      	movs	r3, r0
   14392:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   14394:	1dfb      	adds	r3, r7, #7
   14396:	781b      	ldrb	r3, [r3, #0]
   14398:	221f      	movs	r2, #31
   1439a:	4013      	ands	r3, r2
   1439c:	2201      	movs	r2, #1
   1439e:	409a      	lsls	r2, r3
   143a0:	0013      	movs	r3, r2
   143a2:	60bb      	str	r3, [r7, #8]
	if (level) {
   143a4:	1dbb      	adds	r3, r7, #6
   143a6:	781b      	ldrb	r3, [r3, #0]
   143a8:	2b00      	cmp	r3, #0
   143aa:	d003      	beq.n	143b4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   143ac:	68fb      	ldr	r3, [r7, #12]
   143ae:	68ba      	ldr	r2, [r7, #8]
   143b0:	619a      	str	r2, [r3, #24]
}
   143b2:	e002      	b.n	143ba <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   143b4:	68fb      	ldr	r3, [r7, #12]
   143b6:	68ba      	ldr	r2, [r7, #8]
   143b8:	615a      	str	r2, [r3, #20]
}
   143ba:	46c0      	nop			; (mov r8, r8)
   143bc:	46bd      	mov	sp, r7
   143be:	b004      	add	sp, #16
   143c0:	bd80      	pop	{r7, pc}
   143c2:	46c0      	nop			; (mov r8, r8)
   143c4:	000142e9 	.word	0x000142e9

000143c8 <setObtainEvent>:

static void vTask_GSM_service(void *params);


void setObtainEvent(void)
{
   143c8:	b580      	push	{r7, lr}
   143ca:	af00      	add	r7, sp, #0
	if (!obtainNewEvent  && xTaskGetTickCount() - obtainEventTimer > 1000)
   143cc:	4b0b      	ldr	r3, [pc, #44]	; (143fc <setObtainEvent+0x34>)
   143ce:	781b      	ldrb	r3, [r3, #0]
   143d0:	2201      	movs	r2, #1
   143d2:	4053      	eors	r3, r2
   143d4:	b2db      	uxtb	r3, r3
   143d6:	2b00      	cmp	r3, #0
   143d8:	d00c      	beq.n	143f4 <setObtainEvent+0x2c>
   143da:	4b09      	ldr	r3, [pc, #36]	; (14400 <setObtainEvent+0x38>)
   143dc:	4798      	blx	r3
   143de:	0002      	movs	r2, r0
   143e0:	4b08      	ldr	r3, [pc, #32]	; (14404 <setObtainEvent+0x3c>)
   143e2:	681b      	ldr	r3, [r3, #0]
   143e4:	1ad2      	subs	r2, r2, r3
   143e6:	23fa      	movs	r3, #250	; 0xfa
   143e8:	009b      	lsls	r3, r3, #2
   143ea:	429a      	cmp	r2, r3
   143ec:	d902      	bls.n	143f4 <setObtainEvent+0x2c>
	{
		obtainNewEvent = true;
   143ee:	4b03      	ldr	r3, [pc, #12]	; (143fc <setObtainEvent+0x34>)
   143f0:	2201      	movs	r2, #1
   143f2:	701a      	strb	r2, [r3, #0]
	}
}
   143f4:	46c0      	nop			; (mov r8, r8)
   143f6:	46bd      	mov	sp, r7
   143f8:	bd80      	pop	{r7, pc}
   143fa:	46c0      	nop			; (mov r8, r8)
   143fc:	20000772 	.word	0x20000772
   14400:	000209cd 	.word	0x000209cd
   14404:	20000810 	.word	0x20000810

00014408 <operateOnStagedEvent>:

void operateOnStagedEvent(void)
{
   14408:	b580      	push	{r7, lr}
   1440a:	b082      	sub	sp, #8
   1440c:	af00      	add	r7, sp, #0
	uint8_t temp1= 1;
   1440e:	1dfb      	adds	r3, r7, #7
   14410:	2201      	movs	r2, #1
   14412:	701a      	strb	r2, [r3, #0]
	if(eventStaged)
   14414:	4b23      	ldr	r3, [pc, #140]	; (144a4 <operateOnStagedEvent+0x9c>)
   14416:	781b      	ldrb	r3, [r3, #0]
   14418:	2b00      	cmp	r3, #0
   1441a:	d003      	beq.n	14424 <operateOnStagedEvent+0x1c>
	{
		temp1 = user_settings_parameter_struct.eventStageAddress;
   1441c:	1dfb      	adds	r3, r7, #7
   1441e:	4a22      	ldr	r2, [pc, #136]	; (144a8 <operateOnStagedEvent+0xa0>)
   14420:	7a12      	ldrb	r2, [r2, #8]
   14422:	701a      	strb	r2, [r3, #0]
	}
	
	if(obtainNewEvent && (retries==1 || (xTaskGetTickCount()-tempEventStageTime>((unsigned long)temp1*60000L))))
   14424:	4b21      	ldr	r3, [pc, #132]	; (144ac <operateOnStagedEvent+0xa4>)
   14426:	781b      	ldrb	r3, [r3, #0]
   14428:	2b00      	cmp	r3, #0
   1442a:	d037      	beq.n	1449c <operateOnStagedEvent+0x94>
   1442c:	4b20      	ldr	r3, [pc, #128]	; (144b0 <operateOnStagedEvent+0xa8>)
   1442e:	781b      	ldrb	r3, [r3, #0]
   14430:	2b01      	cmp	r3, #1
   14432:	d00b      	beq.n	1444c <operateOnStagedEvent+0x44>
   14434:	4b1f      	ldr	r3, [pc, #124]	; (144b4 <operateOnStagedEvent+0xac>)
   14436:	4798      	blx	r3
   14438:	0002      	movs	r2, r0
   1443a:	4b1f      	ldr	r3, [pc, #124]	; (144b8 <operateOnStagedEvent+0xb0>)
   1443c:	681b      	ldr	r3, [r3, #0]
   1443e:	1ad2      	subs	r2, r2, r3
   14440:	1dfb      	adds	r3, r7, #7
   14442:	781b      	ldrb	r3, [r3, #0]
   14444:	491d      	ldr	r1, [pc, #116]	; (144bc <operateOnStagedEvent+0xb4>)
   14446:	434b      	muls	r3, r1
   14448:	429a      	cmp	r2, r3
   1444a:	d927      	bls.n	1449c <operateOnStagedEvent+0x94>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   1444c:	4b1c      	ldr	r3, [pc, #112]	; (144c0 <operateOnStagedEvent+0xb8>)
   1444e:	78db      	ldrb	r3, [r3, #3]
   14450:	2b00      	cmp	r3, #0
   14452:	d01a      	beq.n	1448a <operateOnStagedEvent+0x82>
		{
			if (eventStaged)
   14454:	4b13      	ldr	r3, [pc, #76]	; (144a4 <operateOnStagedEvent+0x9c>)
   14456:	781b      	ldrb	r3, [r3, #0]
   14458:	2b00      	cmp	r3, #0
   1445a:	d007      	beq.n	1446c <operateOnStagedEvent+0x64>
			{
				actionType=stagedEventType;
   1445c:	4b19      	ldr	r3, [pc, #100]	; (144c4 <operateOnStagedEvent+0xbc>)
   1445e:	781a      	ldrb	r2, [r3, #0]
   14460:	4b19      	ldr	r3, [pc, #100]	; (144c8 <operateOnStagedEvent+0xc0>)
   14462:	701a      	strb	r2, [r3, #0]
				eventStaged=false;
   14464:	4b0f      	ldr	r3, [pc, #60]	; (144a4 <operateOnStagedEvent+0x9c>)
   14466:	2200      	movs	r2, #0
   14468:	701a      	strb	r2, [r3, #0]
   1446a:	e015      	b.n	14498 <operateOnStagedEvent+0x90>
			}
			else if (m2mEventStaged)
   1446c:	4b17      	ldr	r3, [pc, #92]	; (144cc <operateOnStagedEvent+0xc4>)
   1446e:	781b      	ldrb	r3, [r3, #0]
   14470:	2b00      	cmp	r3, #0
   14472:	d011      	beq.n	14498 <operateOnStagedEvent+0x90>
			{
				m2mEventNo=stagedEventType;
   14474:	4b13      	ldr	r3, [pc, #76]	; (144c4 <operateOnStagedEvent+0xbc>)
   14476:	781a      	ldrb	r2, [r3, #0]
   14478:	4b15      	ldr	r3, [pc, #84]	; (144d0 <operateOnStagedEvent+0xc8>)
   1447a:	701a      	strb	r2, [r3, #0]
				m2mEvent=true;
   1447c:	4b15      	ldr	r3, [pc, #84]	; (144d4 <operateOnStagedEvent+0xcc>)
   1447e:	2201      	movs	r2, #1
   14480:	701a      	strb	r2, [r3, #0]
				m2mEventStaged=false;
   14482:	4b12      	ldr	r3, [pc, #72]	; (144cc <operateOnStagedEvent+0xc4>)
   14484:	2200      	movs	r2, #0
   14486:	701a      	strb	r2, [r3, #0]
   14488:	e006      	b.n	14498 <operateOnStagedEvent+0x90>
			}
		}
		else
		{
			actionType=stagedEventType;
   1448a:	4b0e      	ldr	r3, [pc, #56]	; (144c4 <operateOnStagedEvent+0xbc>)
   1448c:	781a      	ldrb	r2, [r3, #0]
   1448e:	4b0e      	ldr	r3, [pc, #56]	; (144c8 <operateOnStagedEvent+0xc0>)
   14490:	701a      	strb	r2, [r3, #0]
			eventStaged=false;
   14492:	4b04      	ldr	r3, [pc, #16]	; (144a4 <operateOnStagedEvent+0x9c>)
   14494:	2200      	movs	r2, #0
   14496:	701a      	strb	r2, [r3, #0]
		}
		makeResponseAction();
   14498:	4b0f      	ldr	r3, [pc, #60]	; (144d8 <operateOnStagedEvent+0xd0>)
   1449a:	4798      	blx	r3
	}
}
   1449c:	46c0      	nop			; (mov r8, r8)
   1449e:	46bd      	mov	sp, r7
   144a0:	b002      	add	sp, #8
   144a2:	bd80      	pop	{r7, pc}
   144a4:	200007d3 	.word	0x200007d3
   144a8:	20000654 	.word	0x20000654
   144ac:	20000772 	.word	0x20000772
   144b0:	200006e5 	.word	0x200006e5
   144b4:	000209cd 	.word	0x000209cd
   144b8:	200007f0 	.word	0x200007f0
   144bc:	0000ea60 	.word	0x0000ea60
   144c0:	2000062c 	.word	0x2000062c
   144c4:	20000775 	.word	0x20000775
   144c8:	20000763 	.word	0x20000763
   144cc:	2000078e 	.word	0x2000078e
   144d0:	2000072d 	.word	0x2000072d
   144d4:	20000743 	.word	0x20000743
   144d8:	000144dd 	.word	0x000144dd

000144dc <makeResponseAction>:

void makeResponseAction(void)
{
   144dc:	b580      	push	{r7, lr}
   144de:	af00      	add	r7, sp, #0
	if(user_settings_parameter_struct.responseAddress != 'N' || m2mEvent)
   144e0:	4b07      	ldr	r3, [pc, #28]	; (14500 <makeResponseAction+0x24>)
   144e2:	795b      	ldrb	r3, [r3, #5]
   144e4:	2b4e      	cmp	r3, #78	; 0x4e
   144e6:	d103      	bne.n	144f0 <makeResponseAction+0x14>
   144e8:	4b06      	ldr	r3, [pc, #24]	; (14504 <makeResponseAction+0x28>)
   144ea:	781b      	ldrb	r3, [r3, #0]
   144ec:	2b00      	cmp	r3, #0
   144ee:	d004      	beq.n	144fa <makeResponseAction+0x1e>
	{
		freezeIncomingCalls = true;
   144f0:	4b05      	ldr	r3, [pc, #20]	; (14508 <makeResponseAction+0x2c>)
   144f2:	2201      	movs	r2, #1
   144f4:	701a      	strb	r2, [r3, #0]
		//acceptCommands();
		makeCall();
   144f6:	4b05      	ldr	r3, [pc, #20]	; (1450c <makeResponseAction+0x30>)
   144f8:	4798      	blx	r3
	}
}
   144fa:	46c0      	nop			; (mov r8, r8)
   144fc:	46bd      	mov	sp, r7
   144fe:	bd80      	pop	{r7, pc}
   14500:	20000654 	.word	0x20000654
   14504:	20000743 	.word	0x20000743
   14508:	20000744 	.word	0x20000744
   1450c:	00014745 	.word	0x00014745

00014510 <endCall>:

void endCall(void)
{
   14510:	b580      	push	{r7, lr}
   14512:	af00      	add	r7, sp, #0
	nr  = 0;
   14514:	4b6d      	ldr	r3, [pc, #436]	; (146cc <endCall+0x1bc>)
   14516:	2200      	movs	r2, #0
   14518:	701a      	strb	r2, [r3, #0]
	inCall=false;
   1451a:	4b6d      	ldr	r3, [pc, #436]	; (146d0 <endCall+0x1c0>)
   1451c:	2200      	movs	r2, #0
   1451e:	701a      	strb	r2, [r3, #0]
	
	gsm_hangup_call();
   14520:	4b6c      	ldr	r3, [pc, #432]	; (146d4 <endCall+0x1c4>)
   14522:	4798      	blx	r3
	setCallStateOnLCD(LCDCALLSTATE_IDLE,NULL,false);
   14524:	2200      	movs	r2, #0
   14526:	2100      	movs	r1, #0
   14528:	2000      	movs	r0, #0
   1452a:	4b6b      	ldr	r3, [pc, #428]	; (146d8 <endCall+0x1c8>)
   1452c:	4798      	blx	r3
	//unsigned long temp = xTaskGetTickCount();
	vTaskDelay(1000);
   1452e:	23fa      	movs	r3, #250	; 0xfa
   14530:	009b      	lsls	r3, r3, #2
   14532:	0018      	movs	r0, r3
   14534:	4b69      	ldr	r3, [pc, #420]	; (146dc <endCall+0x1cc>)
   14536:	4798      	blx	r3
	freezeIncomingCalls = false;
   14538:	4b69      	ldr	r3, [pc, #420]	; (146e0 <endCall+0x1d0>)
   1453a:	2200      	movs	r2, #0
   1453c:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1453e:	4b69      	ldr	r3, [pc, #420]	; (146e4 <endCall+0x1d4>)
   14540:	785b      	ldrb	r3, [r3, #1]
   14542:	2b00      	cmp	r3, #0
   14544:	d002      	beq.n	1454c <endCall+0x3c>
	{
		zeroPressed=false;
   14546:	4b68      	ldr	r3, [pc, #416]	; (146e8 <endCall+0x1d8>)
   14548:	2200      	movs	r2, #0
   1454a:	701a      	strb	r2, [r3, #0]
	}
	
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
   1454c:	4b65      	ldr	r3, [pc, #404]	; (146e4 <endCall+0x1d4>)
   1454e:	78db      	ldrb	r3, [r3, #3]
   14550:	2b01      	cmp	r3, #1
   14552:	d11d      	bne.n	14590 <endCall+0x80>
	((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O' && !m2mEvent):
   14554:	4b65      	ldr	r3, [pc, #404]	; (146ec <endCall+0x1dc>)
   14556:	781b      	ldrb	r3, [r3, #0]
   14558:	b2db      	uxtb	r3, r3
   1455a:	2b4e      	cmp	r3, #78	; 0x4e
   1455c:	d004      	beq.n	14568 <endCall+0x58>
   1455e:	4b63      	ldr	r3, [pc, #396]	; (146ec <endCall+0x1dc>)
   14560:	781b      	ldrb	r3, [r3, #0]
   14562:	b2db      	uxtb	r3, r3
   14564:	2b52      	cmp	r3, #82	; 0x52
   14566:	d10d      	bne.n	14584 <endCall+0x74>
   14568:	4b61      	ldr	r3, [pc, #388]	; (146f0 <endCall+0x1e0>)
   1456a:	781b      	ldrb	r3, [r3, #0]
   1456c:	b2db      	uxtb	r3, r3
   1456e:	2b4f      	cmp	r3, #79	; 0x4f
   14570:	d108      	bne.n	14584 <endCall+0x74>
   14572:	4b60      	ldr	r3, [pc, #384]	; (146f4 <endCall+0x1e4>)
   14574:	781b      	ldrb	r3, [r3, #0]
   14576:	2201      	movs	r2, #1
   14578:	4053      	eors	r3, r2
   1457a:	b2db      	uxtb	r3, r3
   1457c:	2b00      	cmp	r3, #0
   1457e:	d001      	beq.n	14584 <endCall+0x74>
   14580:	2301      	movs	r3, #1
   14582:	e000      	b.n	14586 <endCall+0x76>
   14584:	2300      	movs	r3, #0
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
   14586:	1c1a      	adds	r2, r3, #0
   14588:	2301      	movs	r3, #1
   1458a:	4013      	ands	r3, r2
   1458c:	b2db      	uxtb	r3, r3
   1458e:	e015      	b.n	145bc <endCall+0xac>
	((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O'))
   14590:	4b56      	ldr	r3, [pc, #344]	; (146ec <endCall+0x1dc>)
   14592:	781b      	ldrb	r3, [r3, #0]
   14594:	b2db      	uxtb	r3, r3
   14596:	2b4e      	cmp	r3, #78	; 0x4e
   14598:	d004      	beq.n	145a4 <endCall+0x94>
   1459a:	4b54      	ldr	r3, [pc, #336]	; (146ec <endCall+0x1dc>)
   1459c:	781b      	ldrb	r3, [r3, #0]
   1459e:	b2db      	uxtb	r3, r3
   145a0:	2b52      	cmp	r3, #82	; 0x52
   145a2:	d106      	bne.n	145b2 <endCall+0xa2>
   145a4:	4b52      	ldr	r3, [pc, #328]	; (146f0 <endCall+0x1e0>)
   145a6:	781b      	ldrb	r3, [r3, #0]
   145a8:	b2db      	uxtb	r3, r3
   145aa:	2b4f      	cmp	r3, #79	; 0x4f
   145ac:	d101      	bne.n	145b2 <endCall+0xa2>
   145ae:	2301      	movs	r3, #1
   145b0:	e000      	b.n	145b4 <endCall+0xa4>
   145b2:	2300      	movs	r3, #0
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
   145b4:	1c1a      	adds	r2, r3, #0
   145b6:	2301      	movs	r3, #1
   145b8:	4013      	ands	r3, r2
   145ba:	b2db      	uxtb	r3, r3
   145bc:	2b00      	cmp	r3, #0
   145be:	d021      	beq.n	14604 <endCall+0xf4>
	{
		if((retries==0) && !callAccepted && (user_settings_parameter_struct.responseAddress=='T') && (user_count_struct.current_user_no_count>1))
   145c0:	4b4d      	ldr	r3, [pc, #308]	; (146f8 <endCall+0x1e8>)
   145c2:	781b      	ldrb	r3, [r3, #0]
   145c4:	2b00      	cmp	r3, #0
   145c6:	d11d      	bne.n	14604 <endCall+0xf4>
   145c8:	4b4c      	ldr	r3, [pc, #304]	; (146fc <endCall+0x1ec>)
   145ca:	781b      	ldrb	r3, [r3, #0]
   145cc:	2201      	movs	r2, #1
   145ce:	4053      	eors	r3, r2
   145d0:	b2db      	uxtb	r3, r3
   145d2:	2b00      	cmp	r3, #0
   145d4:	d016      	beq.n	14604 <endCall+0xf4>
   145d6:	4b4a      	ldr	r3, [pc, #296]	; (14700 <endCall+0x1f0>)
   145d8:	795b      	ldrb	r3, [r3, #5]
   145da:	2b54      	cmp	r3, #84	; 0x54
   145dc:	d112      	bne.n	14604 <endCall+0xf4>
   145de:	4b49      	ldr	r3, [pc, #292]	; (14704 <endCall+0x1f4>)
   145e0:	789b      	ldrb	r3, [r3, #2]
   145e2:	2b01      	cmp	r3, #1
   145e4:	d90e      	bls.n	14604 <endCall+0xf4>
		{
			retries=1;
   145e6:	4b44      	ldr	r3, [pc, #272]	; (146f8 <endCall+0x1e8>)
   145e8:	2201      	movs	r2, #1
   145ea:	701a      	strb	r2, [r3, #0]
			eventStaged=true;
   145ec:	4b46      	ldr	r3, [pc, #280]	; (14708 <endCall+0x1f8>)
   145ee:	2201      	movs	r2, #1
   145f0:	701a      	strb	r2, [r3, #0]
			tempEventStageTime=xTaskGetTickCount();
   145f2:	4b46      	ldr	r3, [pc, #280]	; (1470c <endCall+0x1fc>)
   145f4:	4798      	blx	r3
   145f6:	0002      	movs	r2, r0
   145f8:	4b45      	ldr	r3, [pc, #276]	; (14710 <endCall+0x200>)
   145fa:	601a      	str	r2, [r3, #0]
			stagedEventType=actionType;
   145fc:	4b45      	ldr	r3, [pc, #276]	; (14714 <endCall+0x204>)
   145fe:	781a      	ldrb	r2, [r3, #0]
   14600:	4b45      	ldr	r3, [pc, #276]	; (14718 <endCall+0x208>)
   14602:	701a      	strb	r2, [r3, #0]
		}
	}
	
	if (factory_settings_parameter_struct.ENABLE_M2M)
   14604:	4b37      	ldr	r3, [pc, #220]	; (146e4 <endCall+0x1d4>)
   14606:	78db      	ldrb	r3, [r3, #3]
   14608:	2b00      	cmp	r3, #0
   1460a:	d047      	beq.n	1469c <endCall+0x18c>
	{
		if((currentStatus == 'I' || currentStatus=='R') && currentCallStatus == 'O' && m2mEvent && m2m_Numbers_struct.m2mSetting)
   1460c:	4b37      	ldr	r3, [pc, #220]	; (146ec <endCall+0x1dc>)
   1460e:	781b      	ldrb	r3, [r3, #0]
   14610:	b2db      	uxtb	r3, r3
   14612:	2b49      	cmp	r3, #73	; 0x49
   14614:	d004      	beq.n	14620 <endCall+0x110>
   14616:	4b35      	ldr	r3, [pc, #212]	; (146ec <endCall+0x1dc>)
   14618:	781b      	ldrb	r3, [r3, #0]
   1461a:	b2db      	uxtb	r3, r3
   1461c:	2b52      	cmp	r3, #82	; 0x52
   1461e:	d137      	bne.n	14690 <endCall+0x180>
   14620:	4b33      	ldr	r3, [pc, #204]	; (146f0 <endCall+0x1e0>)
   14622:	781b      	ldrb	r3, [r3, #0]
   14624:	b2db      	uxtb	r3, r3
   14626:	2b4f      	cmp	r3, #79	; 0x4f
   14628:	d132      	bne.n	14690 <endCall+0x180>
   1462a:	4b32      	ldr	r3, [pc, #200]	; (146f4 <endCall+0x1e4>)
   1462c:	781b      	ldrb	r3, [r3, #0]
   1462e:	2b00      	cmp	r3, #0
   14630:	d02e      	beq.n	14690 <endCall+0x180>
   14632:	4b3a      	ldr	r3, [pc, #232]	; (1471c <endCall+0x20c>)
   14634:	795b      	ldrb	r3, [r3, #5]
   14636:	2b00      	cmp	r3, #0
   14638:	d02a      	beq.n	14690 <endCall+0x180>
		{
			m2mEventCalls++;
   1463a:	4b39      	ldr	r3, [pc, #228]	; (14720 <endCall+0x210>)
   1463c:	781b      	ldrb	r3, [r3, #0]
   1463e:	3301      	adds	r3, #1
   14640:	b2da      	uxtb	r2, r3
   14642:	4b37      	ldr	r3, [pc, #220]	; (14720 <endCall+0x210>)
   14644:	701a      	strb	r2, [r3, #0]
			if(m2mAck)
   14646:	4b37      	ldr	r3, [pc, #220]	; (14724 <endCall+0x214>)
   14648:	781b      	ldrb	r3, [r3, #0]
   1464a:	2b00      	cmp	r3, #0
   1464c:	d006      	beq.n	1465c <endCall+0x14c>
			{
				setM2MEventState(m2mEventNo,ME_CLEARED);
   1464e:	4b36      	ldr	r3, [pc, #216]	; (14728 <endCall+0x218>)
   14650:	781b      	ldrb	r3, [r3, #0]
   14652:	2100      	movs	r1, #0
   14654:	0018      	movs	r0, r3
   14656:	4b35      	ldr	r3, [pc, #212]	; (1472c <endCall+0x21c>)
   14658:	4798      	blx	r3
   1465a:	e016      	b.n	1468a <endCall+0x17a>
			}
			else
			{
				if(m2mEventCalls<2)
   1465c:	4b30      	ldr	r3, [pc, #192]	; (14720 <endCall+0x210>)
   1465e:	781b      	ldrb	r3, [r3, #0]
   14660:	2b01      	cmp	r3, #1
   14662:	d80c      	bhi.n	1467e <endCall+0x16e>
				{
					tempEventStageTime=xTaskGetTickCount();
   14664:	4b29      	ldr	r3, [pc, #164]	; (1470c <endCall+0x1fc>)
   14666:	4798      	blx	r3
   14668:	0002      	movs	r2, r0
   1466a:	4b29      	ldr	r3, [pc, #164]	; (14710 <endCall+0x200>)
   1466c:	601a      	str	r2, [r3, #0]
					stagedEventType=m2mEventNo;
   1466e:	4b2e      	ldr	r3, [pc, #184]	; (14728 <endCall+0x218>)
   14670:	781a      	ldrb	r2, [r3, #0]
   14672:	4b29      	ldr	r3, [pc, #164]	; (14718 <endCall+0x208>)
   14674:	701a      	strb	r2, [r3, #0]
					m2mEventStaged=true;
   14676:	4b2e      	ldr	r3, [pc, #184]	; (14730 <endCall+0x220>)
   14678:	2201      	movs	r2, #1
   1467a:	701a      	strb	r2, [r3, #0]
   1467c:	e005      	b.n	1468a <endCall+0x17a>
				}
				else
				{
					setM2MEventState(m2mEventNo,ME_NOTAVAILABLE);
   1467e:	4b2a      	ldr	r3, [pc, #168]	; (14728 <endCall+0x218>)
   14680:	781b      	ldrb	r3, [r3, #0]
   14682:	2103      	movs	r1, #3
   14684:	0018      	movs	r0, r3
   14686:	4b29      	ldr	r3, [pc, #164]	; (1472c <endCall+0x21c>)
   14688:	4798      	blx	r3
				}
			}
			m2mEvent = false;
   1468a:	4b1a      	ldr	r3, [pc, #104]	; (146f4 <endCall+0x1e4>)
   1468c:	2200      	movs	r2, #0
   1468e:	701a      	strb	r2, [r3, #0]
		}
		keyPressed=false;
   14690:	4b28      	ldr	r3, [pc, #160]	; (14734 <endCall+0x224>)
   14692:	2200      	movs	r2, #0
   14694:	701a      	strb	r2, [r3, #0]
		m2mAck=false;
   14696:	4b23      	ldr	r3, [pc, #140]	; (14724 <endCall+0x214>)
   14698:	2200      	movs	r2, #0
   1469a:	701a      	strb	r2, [r3, #0]
	}
	callAccepted = false;
   1469c:	4b17      	ldr	r3, [pc, #92]	; (146fc <endCall+0x1ec>)
   1469e:	2200      	movs	r2, #0
   146a0:	701a      	strb	r2, [r3, #0]
	currentStatus = 'N';
   146a2:	4b12      	ldr	r3, [pc, #72]	; (146ec <endCall+0x1dc>)
   146a4:	224e      	movs	r2, #78	; 0x4e
   146a6:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'N';
   146a8:	4b11      	ldr	r3, [pc, #68]	; (146f0 <endCall+0x1e0>)
   146aa:	224e      	movs	r2, #78	; 0x4e
   146ac:	701a      	strb	r2, [r3, #0]

	isRegisteredNumber=false;
   146ae:	4b22      	ldr	r3, [pc, #136]	; (14738 <endCall+0x228>)
   146b0:	2200      	movs	r2, #0
   146b2:	701a      	strb	r2, [r3, #0]
	obtainEventTimer = xTaskGetTickCount();
   146b4:	4b15      	ldr	r3, [pc, #84]	; (1470c <endCall+0x1fc>)
   146b6:	4798      	blx	r3
   146b8:	0002      	movs	r2, r0
   146ba:	4b20      	ldr	r3, [pc, #128]	; (1473c <endCall+0x22c>)
   146bc:	601a      	str	r2, [r3, #0]
	obtainNewEvent = false;
   146be:	4b20      	ldr	r3, [pc, #128]	; (14740 <endCall+0x230>)
   146c0:	2200      	movs	r2, #0
   146c2:	701a      	strb	r2, [r3, #0]
}
   146c4:	46c0      	nop			; (mov r8, r8)
   146c6:	46bd      	mov	sp, r7
   146c8:	bd80      	pop	{r7, pc}
   146ca:	46c0      	nop			; (mov r8, r8)
   146cc:	200006e4 	.word	0x200006e4
   146d0:	2000079c 	.word	0x2000079c
   146d4:	00013089 	.word	0x00013089
   146d8:	0001d2b9 	.word	0x0001d2b9
   146dc:	00020669 	.word	0x00020669
   146e0:	20000744 	.word	0x20000744
   146e4:	2000062c 	.word	0x2000062c
   146e8:	2000080b 	.word	0x2000080b
   146ec:	200007dc 	.word	0x200007dc
   146f0:	2000078f 	.word	0x2000078f
   146f4:	20000743 	.word	0x20000743
   146f8:	200006e5 	.word	0x200006e5
   146fc:	2000079e 	.word	0x2000079e
   14700:	20000654 	.word	0x20000654
   14704:	20000614 	.word	0x20000614
   14708:	200007d3 	.word	0x200007d3
   1470c:	000209cd 	.word	0x000209cd
   14710:	200007f0 	.word	0x200007f0
   14714:	20000763 	.word	0x20000763
   14718:	20000775 	.word	0x20000775
   1471c:	20000554 	.word	0x20000554
   14720:	200007d4 	.word	0x200007d4
   14724:	2000072c 	.word	0x2000072c
   14728:	2000072d 	.word	0x2000072d
   1472c:	0001c175 	.word	0x0001c175
   14730:	2000078e 	.word	0x2000078e
   14734:	200007d0 	.word	0x200007d0
   14738:	20000798 	.word	0x20000798
   1473c:	20000810 	.word	0x20000810
   14740:	20000772 	.word	0x20000772

00014744 <makeCall>:


void makeCall(void)
{
   14744:	b580      	push	{r7, lr}
   14746:	b086      	sub	sp, #24
   14748:	af00      	add	r7, sp, #0
	inCall=true;
   1474a:	4b20      	ldr	r3, [pc, #128]	; (147cc <makeCall+0x88>)
   1474c:	2201      	movs	r2, #1
   1474e:	701a      	strb	r2, [r3, #0]
	
	char command[20] = {0};
   14750:	1d3b      	adds	r3, r7, #4
   14752:	0018      	movs	r0, r3
   14754:	2314      	movs	r3, #20
   14756:	001a      	movs	r2, r3
   14758:	2100      	movs	r1, #0
   1475a:	4b1d      	ldr	r3, [pc, #116]	; (147d0 <makeCall+0x8c>)
   1475c:	4798      	blx	r3
	
	if(m2m_Numbers_struct.m2mSetting && m2mEvent)
   1475e:	4b1d      	ldr	r3, [pc, #116]	; (147d4 <makeCall+0x90>)
   14760:	795b      	ldrb	r3, [r3, #5]
   14762:	2b00      	cmp	r3, #0
   14764:	d008      	beq.n	14778 <makeCall+0x34>
   14766:	4b1c      	ldr	r3, [pc, #112]	; (147d8 <makeCall+0x94>)
   14768:	781b      	ldrb	r3, [r3, #0]
   1476a:	2b00      	cmp	r3, #0
   1476c:	d004      	beq.n	14778 <makeCall+0x34>
	{
		getM2MRemoteNumber(command);
   1476e:	1d3b      	adds	r3, r7, #4
   14770:	0018      	movs	r0, r3
   14772:	4b1a      	ldr	r3, [pc, #104]	; (147dc <makeCall+0x98>)
   14774:	4798      	blx	r3
   14776:	e00f      	b.n	14798 <makeCall+0x54>
	}
	else
	{
		if(retries)
   14778:	4b19      	ldr	r3, [pc, #100]	; (147e0 <makeCall+0x9c>)
   1477a:	781b      	ldrb	r3, [r3, #0]
   1477c:	2b00      	cmp	r3, #0
   1477e:	d007      	beq.n	14790 <makeCall+0x4c>
		{
			getIndexedNumber(command,user_count_struct.secondaryNumberIndex);
   14780:	4b18      	ldr	r3, [pc, #96]	; (147e4 <makeCall+0xa0>)
   14782:	791a      	ldrb	r2, [r3, #4]
   14784:	1d3b      	adds	r3, r7, #4
   14786:	0011      	movs	r1, r2
   14788:	0018      	movs	r0, r3
   1478a:	4b17      	ldr	r3, [pc, #92]	; (147e8 <makeCall+0xa4>)
   1478c:	4798      	blx	r3
   1478e:	e003      	b.n	14798 <makeCall+0x54>
		}
		else
		{
			getActiveNumber(command);
   14790:	1d3b      	adds	r3, r7, #4
   14792:	0018      	movs	r0, r3
   14794:	4b15      	ldr	r3, [pc, #84]	; (147ec <makeCall+0xa8>)
   14796:	4798      	blx	r3
		}
	}
	gsm_call_to_dial_a_number(command);
   14798:	1d3b      	adds	r3, r7, #4
   1479a:	0018      	movs	r0, r3
   1479c:	4b14      	ldr	r3, [pc, #80]	; (147f0 <makeCall+0xac>)
   1479e:	4798      	blx	r3
	setCallStateOnLCD(LCDCALLSTATE_OUTGOING,command,false);
   147a0:	1d3b      	adds	r3, r7, #4
   147a2:	2200      	movs	r2, #0
   147a4:	0019      	movs	r1, r3
   147a6:	2003      	movs	r0, #3
   147a8:	4b12      	ldr	r3, [pc, #72]	; (147f4 <makeCall+0xb0>)
   147aa:	4798      	blx	r3
	callCutWait = xTaskGetTickCount();
   147ac:	4b12      	ldr	r3, [pc, #72]	; (147f8 <makeCall+0xb4>)
   147ae:	4798      	blx	r3
   147b0:	0002      	movs	r2, r0
   147b2:	4b12      	ldr	r3, [pc, #72]	; (147fc <makeCall+0xb8>)
   147b4:	601a      	str	r2, [r3, #0]
	currentStatus = 'R';
   147b6:	4b12      	ldr	r3, [pc, #72]	; (14800 <makeCall+0xbc>)
   147b8:	2252      	movs	r2, #82	; 0x52
   147ba:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'O';
   147bc:	4b11      	ldr	r3, [pc, #68]	; (14804 <makeCall+0xc0>)
   147be:	224f      	movs	r2, #79	; 0x4f
   147c0:	701a      	strb	r2, [r3, #0]
}
   147c2:	46c0      	nop			; (mov r8, r8)
   147c4:	46bd      	mov	sp, r7
   147c6:	b006      	add	sp, #24
   147c8:	bd80      	pop	{r7, pc}
   147ca:	46c0      	nop			; (mov r8, r8)
   147cc:	2000079c 	.word	0x2000079c
   147d0:	000298b7 	.word	0x000298b7
   147d4:	20000554 	.word	0x20000554
   147d8:	20000743 	.word	0x20000743
   147dc:	00010b05 	.word	0x00010b05
   147e0:	200006e5 	.word	0x200006e5
   147e4:	20000614 	.word	0x20000614
   147e8:	00010915 	.word	0x00010915
   147ec:	00010d1d 	.word	0x00010d1d
   147f0:	00012ec5 	.word	0x00012ec5
   147f4:	0001d2b9 	.word	0x0001d2b9
   147f8:	000209cd 	.word	0x000209cd
   147fc:	20000814 	.word	0x20000814
   14800:	200007dc 	.word	0x200007dc
   14804:	2000078f 	.word	0x2000078f

00014808 <acceptCall>:

void acceptCall(void)
{
   14808:	b580      	push	{r7, lr}
   1480a:	af00      	add	r7, sp, #0
	isRegisteredNumber=false;   //clear flag for next call, in case any error occures and endCall() is not called for ending the call
   1480c:	4b0a      	ldr	r3, [pc, #40]	; (14838 <acceptCall+0x30>)
   1480e:	2200      	movs	r2, #0
   14810:	701a      	strb	r2, [r3, #0]
	callAccepted = true;
   14812:	4b0a      	ldr	r3, [pc, #40]	; (1483c <acceptCall+0x34>)
   14814:	2201      	movs	r2, #1
   14816:	701a      	strb	r2, [r3, #0]
	gsm_answer_an_incomming_call();
   14818:	4b09      	ldr	r3, [pc, #36]	; (14840 <acceptCall+0x38>)
   1481a:	4798      	blx	r3
	currentStatus = 'I';
   1481c:	4b09      	ldr	r3, [pc, #36]	; (14844 <acceptCall+0x3c>)
   1481e:	2249      	movs	r2, #73	; 0x49
   14820:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'I';
   14822:	4b09      	ldr	r3, [pc, #36]	; (14848 <acceptCall+0x40>)
   14824:	2249      	movs	r2, #73	; 0x49
   14826:	701a      	strb	r2, [r3, #0]
	playSound('M',true);
   14828:	2101      	movs	r1, #1
   1482a:	204d      	movs	r0, #77	; 0x4d
   1482c:	4b07      	ldr	r3, [pc, #28]	; (1484c <acceptCall+0x44>)
   1482e:	4798      	blx	r3
	//displayInIncomingCall
}
   14830:	46c0      	nop			; (mov r8, r8)
   14832:	46bd      	mov	sp, r7
   14834:	bd80      	pop	{r7, pc}
   14836:	46c0      	nop			; (mov r8, r8)
   14838:	20000798 	.word	0x20000798
   1483c:	2000079e 	.word	0x2000079e
   14840:	00012f5d 	.word	0x00012f5d
   14844:	200007dc 	.word	0x200007dc
   14848:	2000078f 	.word	0x2000078f
   1484c:	00014851 	.word	0x00014851

00014850 <playSound>:

//void playSound(char actionType, bool newAction=true)
void playSound(char actionTypeT, bool newAction)
{
   14850:	b580      	push	{r7, lr}
   14852:	b082      	sub	sp, #8
   14854:	af00      	add	r7, sp, #0
   14856:	0002      	movs	r2, r0
   14858:	1dfb      	adds	r3, r7, #7
   1485a:	701a      	strb	r2, [r3, #0]
   1485c:	1dbb      	adds	r3, r7, #6
   1485e:	1c0a      	adds	r2, r1, #0
   14860:	701a      	strb	r2, [r3, #0]
	gsm_stop_play_record_file();
   14862:	4b14      	ldr	r3, [pc, #80]	; (148b4 <playSound+0x64>)
   14864:	4798      	blx	r3
	bplaySound = true;
   14866:	4b14      	ldr	r3, [pc, #80]	; (148b8 <playSound+0x68>)
   14868:	2201      	movs	r2, #1
   1486a:	701a      	strb	r2, [r3, #0]
	if (newAction)
   1486c:	1dbb      	adds	r3, r7, #6
   1486e:	781b      	ldrb	r3, [r3, #0]
   14870:	2b00      	cmp	r3, #0
   14872:	d016      	beq.n	148a2 <playSound+0x52>
	{
		maxPlayingFiles=1;
   14874:	4b11      	ldr	r3, [pc, #68]	; (148bc <playSound+0x6c>)
   14876:	2201      	movs	r2, #1
   14878:	701a      	strb	r2, [r3, #0]
		currentPlayingFileIndex=0;
   1487a:	4b11      	ldr	r3, [pc, #68]	; (148c0 <playSound+0x70>)
   1487c:	2200      	movs	r2, #0
   1487e:	701a      	strb	r2, [r3, #0]
		playFilesList[currentPlayingFileIndex]=actionTypeT;
   14880:	4b0f      	ldr	r3, [pc, #60]	; (148c0 <playSound+0x70>)
   14882:	781b      	ldrb	r3, [r3, #0]
   14884:	0019      	movs	r1, r3
   14886:	4b0f      	ldr	r3, [pc, #60]	; (148c4 <playSound+0x74>)
   14888:	1dfa      	adds	r2, r7, #7
   1488a:	7812      	ldrb	r2, [r2, #0]
   1488c:	545a      	strb	r2, [r3, r1]
		playFilesList[currentPlayingFileIndex+1]='\0';
   1488e:	4b0c      	ldr	r3, [pc, #48]	; (148c0 <playSound+0x70>)
   14890:	781b      	ldrb	r3, [r3, #0]
   14892:	3301      	adds	r3, #1
   14894:	4a0b      	ldr	r2, [pc, #44]	; (148c4 <playSound+0x74>)
   14896:	2100      	movs	r1, #0
   14898:	54d1      	strb	r1, [r2, r3]
		actionType = actionTypeT;
   1489a:	4b0b      	ldr	r3, [pc, #44]	; (148c8 <playSound+0x78>)
   1489c:	1dfa      	adds	r2, r7, #7
   1489e:	7812      	ldrb	r2, [r2, #0]
   148a0:	701a      	strb	r2, [r3, #0]
	}
	playFile = actionTypeT;
   148a2:	4b0a      	ldr	r3, [pc, #40]	; (148cc <playSound+0x7c>)
   148a4:	1dfa      	adds	r2, r7, #7
   148a6:	7812      	ldrb	r2, [r2, #0]
   148a8:	701a      	strb	r2, [r3, #0]
}
   148aa:	46c0      	nop			; (mov r8, r8)
   148ac:	46bd      	mov	sp, r7
   148ae:	b002      	add	sp, #8
   148b0:	bd80      	pop	{r7, pc}
   148b2:	46c0      	nop			; (mov r8, r8)
   148b4:	000130e9 	.word	0x000130e9
   148b8:	20000862 	.word	0x20000862
   148bc:	200007d5 	.word	0x200007d5
   148c0:	200007c5 	.word	0x200007c5
   148c4:	2000074c 	.word	0x2000074c
   148c8:	20000763 	.word	0x20000763
   148cc:	200007c3 	.word	0x200007c3

000148d0 <playSoundElligible>:

bool playSoundElligible(void)
{
   148d0:	b580      	push	{r7, lr}
   148d2:	af00      	add	r7, sp, #0
	return (bplaySound && ((xTaskGetTickCount() - soundWait) > (soundWaitTime * 100)));
   148d4:	4b0d      	ldr	r3, [pc, #52]	; (1490c <playSoundElligible+0x3c>)
   148d6:	781b      	ldrb	r3, [r3, #0]
   148d8:	2b00      	cmp	r3, #0
   148da:	d00e      	beq.n	148fa <playSoundElligible+0x2a>
   148dc:	4b0c      	ldr	r3, [pc, #48]	; (14910 <playSoundElligible+0x40>)
   148de:	4798      	blx	r3
   148e0:	0002      	movs	r2, r0
   148e2:	4b0c      	ldr	r3, [pc, #48]	; (14914 <playSoundElligible+0x44>)
   148e4:	681b      	ldr	r3, [r3, #0]
   148e6:	1ad3      	subs	r3, r2, r3
   148e8:	4a0b      	ldr	r2, [pc, #44]	; (14918 <playSoundElligible+0x48>)
   148ea:	7812      	ldrb	r2, [r2, #0]
   148ec:	0011      	movs	r1, r2
   148ee:	2264      	movs	r2, #100	; 0x64
   148f0:	434a      	muls	r2, r1
   148f2:	4293      	cmp	r3, r2
   148f4:	d901      	bls.n	148fa <playSoundElligible+0x2a>
   148f6:	2301      	movs	r3, #1
   148f8:	e000      	b.n	148fc <playSoundElligible+0x2c>
   148fa:	2300      	movs	r3, #0
   148fc:	1c1a      	adds	r2, r3, #0
   148fe:	2301      	movs	r3, #1
   14900:	4013      	ands	r3, r2
   14902:	b2db      	uxtb	r3, r3
}
   14904:	0018      	movs	r0, r3
   14906:	46bd      	mov	sp, r7
   14908:	bd80      	pop	{r7, pc}
   1490a:	46c0      	nop			; (mov r8, r8)
   1490c:	20000862 	.word	0x20000862
   14910:	000209cd 	.word	0x000209cd
   14914:	2000083c 	.word	0x2000083c
   14918:	200007d6 	.word	0x200007d6

0001491c <triggerPlaySound>:

void triggerPlaySound(void)
{
   1491c:	b580      	push	{r7, lr}
   1491e:	af00      	add	r7, sp, #0
	if(maxPlayingFiles>1)
   14920:	4b0b      	ldr	r3, [pc, #44]	; (14950 <triggerPlaySound+0x34>)
   14922:	781b      	ldrb	r3, [r3, #0]
   14924:	2b01      	cmp	r3, #1
   14926:	d906      	bls.n	14936 <triggerPlaySound+0x1a>
	{
		gsm_play_record_file((char*)playFile,false);
   14928:	4b0a      	ldr	r3, [pc, #40]	; (14954 <triggerPlaySound+0x38>)
   1492a:	781b      	ldrb	r3, [r3, #0]
   1492c:	2100      	movs	r1, #0
   1492e:	0018      	movs	r0, r3
   14930:	4b09      	ldr	r3, [pc, #36]	; (14958 <triggerPlaySound+0x3c>)
   14932:	4798      	blx	r3
   14934:	e005      	b.n	14942 <triggerPlaySound+0x26>
	}
	else
	{
		gsm_play_record_file((char*)playFile,true);
   14936:	4b07      	ldr	r3, [pc, #28]	; (14954 <triggerPlaySound+0x38>)
   14938:	781b      	ldrb	r3, [r3, #0]
   1493a:	2101      	movs	r1, #1
   1493c:	0018      	movs	r0, r3
   1493e:	4b06      	ldr	r3, [pc, #24]	; (14958 <triggerPlaySound+0x3c>)
   14940:	4798      	blx	r3
	}
	bplaySound = false;
   14942:	4b06      	ldr	r3, [pc, #24]	; (1495c <triggerPlaySound+0x40>)
   14944:	2200      	movs	r2, #0
   14946:	701a      	strb	r2, [r3, #0]
}
   14948:	46c0      	nop			; (mov r8, r8)
   1494a:	46bd      	mov	sp, r7
   1494c:	bd80      	pop	{r7, pc}
   1494e:	46c0      	nop			; (mov r8, r8)
   14950:	200007d5 	.word	0x200007d5
   14954:	200007c3 	.word	0x200007c3
   14958:	00013119 	.word	0x00013119
   1495c:	20000862 	.word	0x20000862

00014960 <playSoundAgain>:

void playSoundAgain(char *string)
{
   14960:	b580      	push	{r7, lr}
   14962:	b082      	sub	sp, #8
   14964:	af00      	add	r7, sp, #0
   14966:	6078      	str	r0, [r7, #4]
	if (!bplaySound && gsm_responseLine_is_StopSound_Received(string))
   14968:	4b1c      	ldr	r3, [pc, #112]	; (149dc <playSoundAgain+0x7c>)
   1496a:	781b      	ldrb	r3, [r3, #0]
   1496c:	2201      	movs	r2, #1
   1496e:	4053      	eors	r3, r2
   14970:	b2db      	uxtb	r3, r3
   14972:	2b00      	cmp	r3, #0
   14974:	d02e      	beq.n	149d4 <playSoundAgain+0x74>
   14976:	687b      	ldr	r3, [r7, #4]
   14978:	0018      	movs	r0, r3
   1497a:	4b19      	ldr	r3, [pc, #100]	; (149e0 <playSoundAgain+0x80>)
   1497c:	4798      	blx	r3
   1497e:	1e03      	subs	r3, r0, #0
   14980:	d028      	beq.n	149d4 <playSoundAgain+0x74>
	{
		if(maxPlayingFiles>1)
   14982:	4b18      	ldr	r3, [pc, #96]	; (149e4 <playSoundAgain+0x84>)
   14984:	781b      	ldrb	r3, [r3, #0]
   14986:	2b01      	cmp	r3, #1
   14988:	d91c      	bls.n	149c4 <playSoundAgain+0x64>
		{
			if(currentPlayingFileIndex<maxPlayingFiles-1)
   1498a:	4b17      	ldr	r3, [pc, #92]	; (149e8 <playSoundAgain+0x88>)
   1498c:	781b      	ldrb	r3, [r3, #0]
   1498e:	001a      	movs	r2, r3
   14990:	4b14      	ldr	r3, [pc, #80]	; (149e4 <playSoundAgain+0x84>)
   14992:	781b      	ldrb	r3, [r3, #0]
   14994:	3b01      	subs	r3, #1
   14996:	429a      	cmp	r2, r3
   14998:	da0f      	bge.n	149ba <playSoundAgain+0x5a>
			{
				playSound(playFilesList[++currentPlayingFileIndex],false);
   1499a:	4b13      	ldr	r3, [pc, #76]	; (149e8 <playSoundAgain+0x88>)
   1499c:	781b      	ldrb	r3, [r3, #0]
   1499e:	3301      	adds	r3, #1
   149a0:	b2da      	uxtb	r2, r3
   149a2:	4b11      	ldr	r3, [pc, #68]	; (149e8 <playSoundAgain+0x88>)
   149a4:	701a      	strb	r2, [r3, #0]
   149a6:	4b10      	ldr	r3, [pc, #64]	; (149e8 <playSoundAgain+0x88>)
   149a8:	781b      	ldrb	r3, [r3, #0]
   149aa:	001a      	movs	r2, r3
   149ac:	4b0f      	ldr	r3, [pc, #60]	; (149ec <playSoundAgain+0x8c>)
   149ae:	5c9b      	ldrb	r3, [r3, r2]
   149b0:	2100      	movs	r1, #0
   149b2:	0018      	movs	r0, r3
   149b4:	4b0e      	ldr	r3, [pc, #56]	; (149f0 <playSoundAgain+0x90>)
   149b6:	4798      	blx	r3
		else if(maxPlayingFiles==1)
		{
			playSound('M',true);
		}
	}
}
   149b8:	e00c      	b.n	149d4 <playSoundAgain+0x74>
				playSound('M',true);
   149ba:	2101      	movs	r1, #1
   149bc:	204d      	movs	r0, #77	; 0x4d
   149be:	4b0c      	ldr	r3, [pc, #48]	; (149f0 <playSoundAgain+0x90>)
   149c0:	4798      	blx	r3
}
   149c2:	e007      	b.n	149d4 <playSoundAgain+0x74>
		else if(maxPlayingFiles==1)
   149c4:	4b07      	ldr	r3, [pc, #28]	; (149e4 <playSoundAgain+0x84>)
   149c6:	781b      	ldrb	r3, [r3, #0]
   149c8:	2b01      	cmp	r3, #1
   149ca:	d103      	bne.n	149d4 <playSoundAgain+0x74>
			playSound('M',true);
   149cc:	2101      	movs	r1, #1
   149ce:	204d      	movs	r0, #77	; 0x4d
   149d0:	4b07      	ldr	r3, [pc, #28]	; (149f0 <playSoundAgain+0x90>)
   149d2:	4798      	blx	r3
}
   149d4:	46c0      	nop			; (mov r8, r8)
   149d6:	46bd      	mov	sp, r7
   149d8:	b002      	add	sp, #8
   149da:	bd80      	pop	{r7, pc}
   149dc:	20000862 	.word	0x20000862
   149e0:	000138a5 	.word	0x000138a5
   149e4:	200007d5 	.word	0x200007d5
   149e8:	200007c5 	.word	0x200007c5
   149ec:	2000074c 	.word	0x2000074c
   149f0:	00014851 	.word	0x00014851

000149f4 <playRepeatedFiles>:

void playRepeatedFiles(char *fileList)
{
   149f4:	b580      	push	{r7, lr}
   149f6:	b082      	sub	sp, #8
   149f8:	af00      	add	r7, sp, #0
   149fa:	6078      	str	r0, [r7, #4]
	if(strlen(fileList)<15)
   149fc:	687b      	ldr	r3, [r7, #4]
   149fe:	0018      	movs	r0, r3
   14a00:	4b14      	ldr	r3, [pc, #80]	; (14a54 <playRepeatedFiles+0x60>)
   14a02:	4798      	blx	r3
   14a04:	0003      	movs	r3, r0
   14a06:	2b0e      	cmp	r3, #14
   14a08:	d81f      	bhi.n	14a4a <playRepeatedFiles+0x56>
	{
		currentPlayingFileIndex=0;
   14a0a:	4b13      	ldr	r3, [pc, #76]	; (14a58 <playRepeatedFiles+0x64>)
   14a0c:	2200      	movs	r2, #0
   14a0e:	701a      	strb	r2, [r3, #0]
		maxPlayingFiles=strlen(fileList);
   14a10:	687b      	ldr	r3, [r7, #4]
   14a12:	0018      	movs	r0, r3
   14a14:	4b0f      	ldr	r3, [pc, #60]	; (14a54 <playRepeatedFiles+0x60>)
   14a16:	4798      	blx	r3
   14a18:	0003      	movs	r3, r0
   14a1a:	b2da      	uxtb	r2, r3
   14a1c:	4b0f      	ldr	r3, [pc, #60]	; (14a5c <playRepeatedFiles+0x68>)
   14a1e:	701a      	strb	r2, [r3, #0]
		strcpy(playFilesList,fileList);
   14a20:	687a      	ldr	r2, [r7, #4]
   14a22:	4b0f      	ldr	r3, [pc, #60]	; (14a60 <playRepeatedFiles+0x6c>)
   14a24:	0011      	movs	r1, r2
   14a26:	0018      	movs	r0, r3
   14a28:	4b0e      	ldr	r3, [pc, #56]	; (14a64 <playRepeatedFiles+0x70>)
   14a2a:	4798      	blx	r3
		soundWait = xTaskGetTickCount();
   14a2c:	4b0e      	ldr	r3, [pc, #56]	; (14a68 <playRepeatedFiles+0x74>)
   14a2e:	4798      	blx	r3
   14a30:	0002      	movs	r2, r0
   14a32:	4b0e      	ldr	r3, [pc, #56]	; (14a6c <playRepeatedFiles+0x78>)
   14a34:	601a      	str	r2, [r3, #0]
		playFile = playFilesList[currentPlayingFileIndex];
   14a36:	4b08      	ldr	r3, [pc, #32]	; (14a58 <playRepeatedFiles+0x64>)
   14a38:	781b      	ldrb	r3, [r3, #0]
   14a3a:	001a      	movs	r2, r3
   14a3c:	4b08      	ldr	r3, [pc, #32]	; (14a60 <playRepeatedFiles+0x6c>)
   14a3e:	5c9a      	ldrb	r2, [r3, r2]
   14a40:	4b0b      	ldr	r3, [pc, #44]	; (14a70 <playRepeatedFiles+0x7c>)
   14a42:	701a      	strb	r2, [r3, #0]
		bplaySound = true;
   14a44:	4b0b      	ldr	r3, [pc, #44]	; (14a74 <playRepeatedFiles+0x80>)
   14a46:	2201      	movs	r2, #1
   14a48:	701a      	strb	r2, [r3, #0]
	}
}
   14a4a:	46c0      	nop			; (mov r8, r8)
   14a4c:	46bd      	mov	sp, r7
   14a4e:	b002      	add	sp, #8
   14a50:	bd80      	pop	{r7, pc}
   14a52:	46c0      	nop			; (mov r8, r8)
   14a54:	00029b47 	.word	0x00029b47
   14a58:	200007c5 	.word	0x200007c5
   14a5c:	200007d5 	.word	0x200007d5
   14a60:	2000074c 	.word	0x2000074c
   14a64:	00029b37 	.word	0x00029b37
   14a68:	000209cd 	.word	0x000209cd
   14a6c:	2000083c 	.word	0x2000083c
   14a70:	200007c3 	.word	0x200007c3
   14a74:	20000862 	.word	0x20000862

00014a78 <callTimerExpire>:

bool callTimerExpire(void)
{
   14a78:	b580      	push	{r7, lr}
   14a7a:	af00      	add	r7, sp, #0
	if(isRinging)
   14a7c:	4b12      	ldr	r3, [pc, #72]	; (14ac8 <callTimerExpire+0x50>)
   14a7e:	781b      	ldrb	r3, [r3, #0]
   14a80:	b2db      	uxtb	r3, r3
   14a82:	2b00      	cmp	r3, #0
   14a84:	d00a      	beq.n	14a9c <callTimerExpire+0x24>
	{
		if(xTaskGetTickCount()-lastRingStateChangeTime>3000)
   14a86:	4b11      	ldr	r3, [pc, #68]	; (14acc <callTimerExpire+0x54>)
   14a88:	4798      	blx	r3
   14a8a:	0002      	movs	r2, r0
   14a8c:	4b10      	ldr	r3, [pc, #64]	; (14ad0 <callTimerExpire+0x58>)
   14a8e:	681b      	ldr	r3, [r3, #0]
   14a90:	1ad3      	subs	r3, r2, r3
   14a92:	4a10      	ldr	r2, [pc, #64]	; (14ad4 <callTimerExpire+0x5c>)
   14a94:	4293      	cmp	r3, r2
   14a96:	d912      	bls.n	14abe <callTimerExpire+0x46>
		{
			return true;
   14a98:	2301      	movs	r3, #1
   14a9a:	e011      	b.n	14ac0 <callTimerExpire+0x48>
		}
	}
	else
	{
		return ((xTaskGetTickCount() - callCutWait) >= (callCutWaitTime * 100));
   14a9c:	4b0b      	ldr	r3, [pc, #44]	; (14acc <callTimerExpire+0x54>)
   14a9e:	4798      	blx	r3
   14aa0:	0002      	movs	r2, r0
   14aa2:	4b0d      	ldr	r3, [pc, #52]	; (14ad8 <callTimerExpire+0x60>)
   14aa4:	681b      	ldr	r3, [r3, #0]
   14aa6:	1ad2      	subs	r2, r2, r3
   14aa8:	4b0c      	ldr	r3, [pc, #48]	; (14adc <callTimerExpire+0x64>)
   14aaa:	881b      	ldrh	r3, [r3, #0]
   14aac:	0019      	movs	r1, r3
   14aae:	2364      	movs	r3, #100	; 0x64
   14ab0:	434b      	muls	r3, r1
   14ab2:	0019      	movs	r1, r3
   14ab4:	2300      	movs	r3, #0
   14ab6:	428a      	cmp	r2, r1
   14ab8:	415b      	adcs	r3, r3
   14aba:	b2db      	uxtb	r3, r3
   14abc:	e000      	b.n	14ac0 <callTimerExpire+0x48>
	}
	return false;
   14abe:	2300      	movs	r3, #0
}
   14ac0:	0018      	movs	r0, r3
   14ac2:	46bd      	mov	sp, r7
   14ac4:	bd80      	pop	{r7, pc}
   14ac6:	46c0      	nop			; (mov r8, r8)
   14ac8:	2000068e 	.word	0x2000068e
   14acc:	000209cd 	.word	0x000209cd
   14ad0:	200006cc 	.word	0x200006cc
   14ad4:	00000bb8 	.word	0x00000bb8
   14ad8:	20000814 	.word	0x20000814
   14adc:	20000764 	.word	0x20000764

00014ae0 <OutGoingcallState>:

char OutGoingcallState(char *response)
{
   14ae0:	b580      	push	{r7, lr}
   14ae2:	b082      	sub	sp, #8
   14ae4:	af00      	add	r7, sp, #0
   14ae6:	6078      	str	r0, [r7, #4]
	if(strstr(response,"+CLCC: 1,0,2"))
   14ae8:	4a16      	ldr	r2, [pc, #88]	; (14b44 <OutGoingcallState+0x64>)
   14aea:	687b      	ldr	r3, [r7, #4]
   14aec:	0011      	movs	r1, r2
   14aee:	0018      	movs	r0, r3
   14af0:	4b15      	ldr	r3, [pc, #84]	; (14b48 <OutGoingcallState+0x68>)
   14af2:	4798      	blx	r3
   14af4:	1e03      	subs	r3, r0, #0
   14af6:	d001      	beq.n	14afc <OutGoingcallState+0x1c>
	{
		return 'D';								//dialling
   14af8:	2344      	movs	r3, #68	; 0x44
   14afa:	e01e      	b.n	14b3a <OutGoingcallState+0x5a>
	}
	else if (strstr(response,"+CLCC: 1,0,3"))
   14afc:	4a13      	ldr	r2, [pc, #76]	; (14b4c <OutGoingcallState+0x6c>)
   14afe:	687b      	ldr	r3, [r7, #4]
   14b00:	0011      	movs	r1, r2
   14b02:	0018      	movs	r0, r3
   14b04:	4b10      	ldr	r3, [pc, #64]	; (14b48 <OutGoingcallState+0x68>)
   14b06:	4798      	blx	r3
   14b08:	1e03      	subs	r3, r0, #0
   14b0a:	d001      	beq.n	14b10 <OutGoingcallState+0x30>
	{
		return 'R';								//alerting
   14b0c:	2352      	movs	r3, #82	; 0x52
   14b0e:	e014      	b.n	14b3a <OutGoingcallState+0x5a>
	}
	else if (strstr(response,"+CLCC: 1,0,0"))
   14b10:	4a0f      	ldr	r2, [pc, #60]	; (14b50 <OutGoingcallState+0x70>)
   14b12:	687b      	ldr	r3, [r7, #4]
   14b14:	0011      	movs	r1, r2
   14b16:	0018      	movs	r0, r3
   14b18:	4b0b      	ldr	r3, [pc, #44]	; (14b48 <OutGoingcallState+0x68>)
   14b1a:	4798      	blx	r3
   14b1c:	1e03      	subs	r3, r0, #0
   14b1e:	d001      	beq.n	14b24 <OutGoingcallState+0x44>
	{
		return 'I';								//active call
   14b20:	2349      	movs	r3, #73	; 0x49
   14b22:	e00a      	b.n	14b3a <OutGoingcallState+0x5a>
	}
	else if (strstr(response,"+CLCC: 1,0,6"))
   14b24:	4a0b      	ldr	r2, [pc, #44]	; (14b54 <OutGoingcallState+0x74>)
   14b26:	687b      	ldr	r3, [r7, #4]
   14b28:	0011      	movs	r1, r2
   14b2a:	0018      	movs	r0, r3
   14b2c:	4b06      	ldr	r3, [pc, #24]	; (14b48 <OutGoingcallState+0x68>)
   14b2e:	4798      	blx	r3
   14b30:	1e03      	subs	r3, r0, #0
   14b32:	d001      	beq.n	14b38 <OutGoingcallState+0x58>
	{
		return 'E';								//call ended
   14b34:	2345      	movs	r3, #69	; 0x45
   14b36:	e000      	b.n	14b3a <OutGoingcallState+0x5a>
	}
	else
	{
		return 'N';
   14b38:	234e      	movs	r3, #78	; 0x4e
	}
}
   14b3a:	0018      	movs	r0, r3
   14b3c:	46bd      	mov	sp, r7
   14b3e:	b002      	add	sp, #8
   14b40:	bd80      	pop	{r7, pc}
   14b42:	46c0      	nop			; (mov r8, r8)
   14b44:	0002aae0 	.word	0x0002aae0
   14b48:	00029b77 	.word	0x00029b77
   14b4c:	0002aaf0 	.word	0x0002aaf0
   14b50:	0002ab00 	.word	0x0002ab00
   14b54:	0002ab10 	.word	0x0002ab10

00014b58 <registerEvent>:

bool registerEvent(char eventType)
{
   14b58:	b580      	push	{r7, lr}
   14b5a:	b082      	sub	sp, #8
   14b5c:	af00      	add	r7, sp, #0
   14b5e:	0002      	movs	r2, r0
   14b60:	1dfb      	adds	r3, r7, #7
   14b62:	701a      	strb	r2, [r3, #0]
	//if(isSIMReset())
	//{
	//return false;
	//}
	if(user_count_struct.current_user_no_count==0 || user_settings_parameter_struct.responseAddress=='N')
   14b64:	4b34      	ldr	r3, [pc, #208]	; (14c38 <registerEvent+0xe0>)
   14b66:	789b      	ldrb	r3, [r3, #2]
   14b68:	2b00      	cmp	r3, #0
   14b6a:	d003      	beq.n	14b74 <registerEvent+0x1c>
   14b6c:	4b33      	ldr	r3, [pc, #204]	; (14c3c <registerEvent+0xe4>)
   14b6e:	795b      	ldrb	r3, [r3, #5]
   14b70:	2b4e      	cmp	r3, #78	; 0x4e
   14b72:	d101      	bne.n	14b78 <registerEvent+0x20>
	{
		return true;
   14b74:	2301      	movs	r3, #1
   14b76:	e05b      	b.n	14c30 <registerEvent+0xd8>
	}
	if (!initialized)
   14b78:	4b31      	ldr	r3, [pc, #196]	; (14c40 <registerEvent+0xe8>)
   14b7a:	781b      	ldrb	r3, [r3, #0]
   14b7c:	b2db      	uxtb	r3, r3
   14b7e:	2201      	movs	r2, #1
   14b80:	4053      	eors	r3, r2
   14b82:	b2db      	uxtb	r3, r3
   14b84:	2b00      	cmp	r3, #0
   14b86:	d001      	beq.n	14b8c <registerEvent+0x34>
	{
		return true;
   14b88:	2301      	movs	r3, #1
   14b8a:	e051      	b.n	14c30 <registerEvent+0xd8>
	}
	if(!eventStaged && actionType==eventType)
   14b8c:	4b2d      	ldr	r3, [pc, #180]	; (14c44 <registerEvent+0xec>)
   14b8e:	781b      	ldrb	r3, [r3, #0]
   14b90:	2201      	movs	r2, #1
   14b92:	4053      	eors	r3, r2
   14b94:	b2db      	uxtb	r3, r3
   14b96:	2b00      	cmp	r3, #0
   14b98:	d007      	beq.n	14baa <registerEvent+0x52>
   14b9a:	4b2b      	ldr	r3, [pc, #172]	; (14c48 <registerEvent+0xf0>)
   14b9c:	781b      	ldrb	r3, [r3, #0]
   14b9e:	1dfa      	adds	r2, r7, #7
   14ba0:	7812      	ldrb	r2, [r2, #0]
   14ba2:	429a      	cmp	r2, r3
   14ba4:	d101      	bne.n	14baa <registerEvent+0x52>
	{
		return true;
   14ba6:	2301      	movs	r3, #1
   14ba8:	e042      	b.n	14c30 <registerEvent+0xd8>
	}
	//if ((factory_settings_parameter_struct.ENABLE_M2M==true)?
	//(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged):
	//(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged))
	if(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged)
   14baa:	4b28      	ldr	r3, [pc, #160]	; (14c4c <registerEvent+0xf4>)
   14bac:	781b      	ldrb	r3, [r3, #0]
   14bae:	b2db      	uxtb	r3, r3
   14bb0:	2b4e      	cmp	r3, #78	; 0x4e
   14bb2:	d13c      	bne.n	14c2e <registerEvent+0xd6>
   14bb4:	4b26      	ldr	r3, [pc, #152]	; (14c50 <registerEvent+0xf8>)
   14bb6:	781b      	ldrb	r3, [r3, #0]
   14bb8:	b2db      	uxtb	r3, r3
   14bba:	2b4e      	cmp	r3, #78	; 0x4e
   14bbc:	d137      	bne.n	14c2e <registerEvent+0xd6>
   14bbe:	4b25      	ldr	r3, [pc, #148]	; (14c54 <registerEvent+0xfc>)
   14bc0:	781b      	ldrb	r3, [r3, #0]
   14bc2:	2b00      	cmp	r3, #0
   14bc4:	d033      	beq.n	14c2e <registerEvent+0xd6>
   14bc6:	4b1f      	ldr	r3, [pc, #124]	; (14c44 <registerEvent+0xec>)
   14bc8:	781b      	ldrb	r3, [r3, #0]
   14bca:	2201      	movs	r2, #1
   14bcc:	4053      	eors	r3, r2
   14bce:	b2db      	uxtb	r3, r3
   14bd0:	2b00      	cmp	r3, #0
   14bd2:	d02c      	beq.n	14c2e <registerEvent+0xd6>
   14bd4:	4b20      	ldr	r3, [pc, #128]	; (14c58 <registerEvent+0x100>)
   14bd6:	781b      	ldrb	r3, [r3, #0]
   14bd8:	2201      	movs	r2, #1
   14bda:	4053      	eors	r3, r2
   14bdc:	b2db      	uxtb	r3, r3
   14bde:	2b00      	cmp	r3, #0
   14be0:	d025      	beq.n	14c2e <registerEvent+0xd6>
	{
		if(user_settings_parameter_struct.noCallAddress && checkNoCallTime())
   14be2:	4b16      	ldr	r3, [pc, #88]	; (14c3c <registerEvent+0xe4>)
   14be4:	7a5b      	ldrb	r3, [r3, #9]
   14be6:	2b00      	cmp	r3, #0
   14be8:	d005      	beq.n	14bf6 <registerEvent+0x9e>
   14bea:	4b1c      	ldr	r3, [pc, #112]	; (14c5c <registerEvent+0x104>)
   14bec:	4798      	blx	r3
   14bee:	1e03      	subs	r3, r0, #0
   14bf0:	d001      	beq.n	14bf6 <registerEvent+0x9e>
		{
			return true;
   14bf2:	2301      	movs	r3, #1
   14bf4:	e01c      	b.n	14c30 <registerEvent+0xd8>
		}
		retries=0;
   14bf6:	4b1a      	ldr	r3, [pc, #104]	; (14c60 <registerEvent+0x108>)
   14bf8:	2200      	movs	r2, #0
   14bfa:	701a      	strb	r2, [r3, #0]
		if(user_settings_parameter_struct.eventStageAddress>0x00)
   14bfc:	4b0f      	ldr	r3, [pc, #60]	; (14c3c <registerEvent+0xe4>)
   14bfe:	7a1b      	ldrb	r3, [r3, #8]
   14c00:	2b00      	cmp	r3, #0
   14c02:	d00c      	beq.n	14c1e <registerEvent+0xc6>
		{
			tempEventStageTime=xTaskGetTickCount();
   14c04:	4b17      	ldr	r3, [pc, #92]	; (14c64 <registerEvent+0x10c>)
   14c06:	4798      	blx	r3
   14c08:	0002      	movs	r2, r0
   14c0a:	4b17      	ldr	r3, [pc, #92]	; (14c68 <registerEvent+0x110>)
   14c0c:	601a      	str	r2, [r3, #0]
			stagedEventType=eventType;
   14c0e:	4b17      	ldr	r3, [pc, #92]	; (14c6c <registerEvent+0x114>)
   14c10:	1dfa      	adds	r2, r7, #7
   14c12:	7812      	ldrb	r2, [r2, #0]
   14c14:	701a      	strb	r2, [r3, #0]
			eventStaged=true;
   14c16:	4b0b      	ldr	r3, [pc, #44]	; (14c44 <registerEvent+0xec>)
   14c18:	2201      	movs	r2, #1
   14c1a:	701a      	strb	r2, [r3, #0]
   14c1c:	e005      	b.n	14c2a <registerEvent+0xd2>
		}
		else
		{
			actionType = eventType;
   14c1e:	4b0a      	ldr	r3, [pc, #40]	; (14c48 <registerEvent+0xf0>)
   14c20:	1dfa      	adds	r2, r7, #7
   14c22:	7812      	ldrb	r2, [r2, #0]
   14c24:	701a      	strb	r2, [r3, #0]
			makeResponseAction();
   14c26:	4b12      	ldr	r3, [pc, #72]	; (14c70 <registerEvent+0x118>)
   14c28:	4798      	blx	r3
		}
		return true;
   14c2a:	2301      	movs	r3, #1
   14c2c:	e000      	b.n	14c30 <registerEvent+0xd8>
	}
	else
	{
		return false;
   14c2e:	2300      	movs	r3, #0
	}
}
   14c30:	0018      	movs	r0, r3
   14c32:	46bd      	mov	sp, r7
   14c34:	b002      	add	sp, #8
   14c36:	bd80      	pop	{r7, pc}
   14c38:	20000614 	.word	0x20000614
   14c3c:	20000654 	.word	0x20000654
   14c40:	2000079d 	.word	0x2000079d
   14c44:	200007d3 	.word	0x200007d3
   14c48:	20000763 	.word	0x20000763
   14c4c:	200007dc 	.word	0x200007dc
   14c50:	2000078f 	.word	0x2000078f
   14c54:	20000772 	.word	0x20000772
   14c58:	2000078e 	.word	0x2000078e
   14c5c:	00017359 	.word	0x00017359
   14c60:	200006e5 	.word	0x200006e5
   14c64:	000209cd 	.word	0x000209cd
   14c68:	200007f0 	.word	0x200007f0
   14c6c:	20000775 	.word	0x20000775
   14c70:	000144dd 	.word	0x000144dd

00014c74 <registerM2MEvent>:

void registerM2MEvent(uint8_t eventNo)
{
   14c74:	b580      	push	{r7, lr}
   14c76:	b082      	sub	sp, #8
   14c78:	af00      	add	r7, sp, #0
   14c7a:	0002      	movs	r2, r0
   14c7c:	1dfb      	adds	r3, r7, #7
   14c7e:	701a      	strb	r2, [r3, #0]
	if (!initialized)
   14c80:	4b20      	ldr	r3, [pc, #128]	; (14d04 <registerM2MEvent+0x90>)
   14c82:	781b      	ldrb	r3, [r3, #0]
   14c84:	b2db      	uxtb	r3, r3
   14c86:	2201      	movs	r2, #1
   14c88:	4053      	eors	r3, r2
   14c8a:	b2db      	uxtb	r3, r3
   14c8c:	2b00      	cmp	r3, #0
   14c8e:	d006      	beq.n	14c9e <registerM2MEvent+0x2a>
	{
		setM2MEventState(eventNo,ME_CLEARED);
   14c90:	1dfb      	adds	r3, r7, #7
   14c92:	781b      	ldrb	r3, [r3, #0]
   14c94:	2100      	movs	r1, #0
   14c96:	0018      	movs	r0, r3
   14c98:	4b1b      	ldr	r3, [pc, #108]	; (14d08 <registerM2MEvent+0x94>)
   14c9a:	4798      	blx	r3
		return;
   14c9c:	e02e      	b.n	14cfc <registerM2MEvent+0x88>
	}

	if (currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged)
   14c9e:	4b1b      	ldr	r3, [pc, #108]	; (14d0c <registerM2MEvent+0x98>)
   14ca0:	781b      	ldrb	r3, [r3, #0]
   14ca2:	b2db      	uxtb	r3, r3
   14ca4:	2b4e      	cmp	r3, #78	; 0x4e
   14ca6:	d129      	bne.n	14cfc <registerM2MEvent+0x88>
   14ca8:	4b19      	ldr	r3, [pc, #100]	; (14d10 <registerM2MEvent+0x9c>)
   14caa:	781b      	ldrb	r3, [r3, #0]
   14cac:	b2db      	uxtb	r3, r3
   14cae:	2b4e      	cmp	r3, #78	; 0x4e
   14cb0:	d124      	bne.n	14cfc <registerM2MEvent+0x88>
   14cb2:	4b18      	ldr	r3, [pc, #96]	; (14d14 <registerM2MEvent+0xa0>)
   14cb4:	781b      	ldrb	r3, [r3, #0]
   14cb6:	2b00      	cmp	r3, #0
   14cb8:	d020      	beq.n	14cfc <registerM2MEvent+0x88>
   14cba:	4b17      	ldr	r3, [pc, #92]	; (14d18 <registerM2MEvent+0xa4>)
   14cbc:	781b      	ldrb	r3, [r3, #0]
   14cbe:	2201      	movs	r2, #1
   14cc0:	4053      	eors	r3, r2
   14cc2:	b2db      	uxtb	r3, r3
   14cc4:	2b00      	cmp	r3, #0
   14cc6:	d019      	beq.n	14cfc <registerM2MEvent+0x88>
   14cc8:	4b14      	ldr	r3, [pc, #80]	; (14d1c <registerM2MEvent+0xa8>)
   14cca:	781b      	ldrb	r3, [r3, #0]
   14ccc:	2201      	movs	r2, #1
   14cce:	4053      	eors	r3, r2
   14cd0:	b2db      	uxtb	r3, r3
   14cd2:	2b00      	cmp	r3, #0
   14cd4:	d012      	beq.n	14cfc <registerM2MEvent+0x88>
	{
		setM2MEventState(eventNo,ME_SERVICING);
   14cd6:	1dfb      	adds	r3, r7, #7
   14cd8:	781b      	ldrb	r3, [r3, #0]
   14cda:	2102      	movs	r1, #2
   14cdc:	0018      	movs	r0, r3
   14cde:	4b0a      	ldr	r3, [pc, #40]	; (14d08 <registerM2MEvent+0x94>)
   14ce0:	4798      	blx	r3
		m2mEvent=true;
   14ce2:	4b0f      	ldr	r3, [pc, #60]	; (14d20 <registerM2MEvent+0xac>)
   14ce4:	2201      	movs	r2, #1
   14ce6:	701a      	strb	r2, [r3, #0]
		m2mEventNo = eventNo;
   14ce8:	4b0e      	ldr	r3, [pc, #56]	; (14d24 <registerM2MEvent+0xb0>)
   14cea:	1dfa      	adds	r2, r7, #7
   14cec:	7812      	ldrb	r2, [r2, #0]
   14cee:	701a      	strb	r2, [r3, #0]
		m2mEventCalls=0;
   14cf0:	4b0d      	ldr	r3, [pc, #52]	; (14d28 <registerM2MEvent+0xb4>)
   14cf2:	2200      	movs	r2, #0
   14cf4:	701a      	strb	r2, [r3, #0]
		makeResponseAction();
   14cf6:	4b0d      	ldr	r3, [pc, #52]	; (14d2c <registerM2MEvent+0xb8>)
   14cf8:	4798      	blx	r3
		return;
   14cfa:	46c0      	nop			; (mov r8, r8)
	}
}
   14cfc:	46bd      	mov	sp, r7
   14cfe:	b002      	add	sp, #8
   14d00:	bd80      	pop	{r7, pc}
   14d02:	46c0      	nop			; (mov r8, r8)
   14d04:	2000079d 	.word	0x2000079d
   14d08:	0001c175 	.word	0x0001c175
   14d0c:	200007dc 	.word	0x200007dc
   14d10:	2000078f 	.word	0x2000078f
   14d14:	20000772 	.word	0x20000772
   14d18:	200007d3 	.word	0x200007d3
   14d1c:	2000078e 	.word	0x2000078e
   14d20:	20000743 	.word	0x20000743
   14d24:	2000072d 	.word	0x2000072d
   14d28:	200007d4 	.word	0x200007d4
   14d2c:	000144dd 	.word	0x000144dd

00014d30 <setMotorMGRResponse>:

void setMotorMGRResponse(char response)
{
   14d30:	b580      	push	{r7, lr}
   14d32:	b082      	sub	sp, #8
   14d34:	af00      	add	r7, sp, #0
   14d36:	0002      	movs	r2, r0
   14d38:	1dfb      	adds	r3, r7, #7
   14d3a:	701a      	strb	r2, [r3, #0]
	if(currentStatus!='I')    // not in Call than return.
   14d3c:	4b07      	ldr	r3, [pc, #28]	; (14d5c <setMotorMGRResponse+0x2c>)
   14d3e:	781b      	ldrb	r3, [r3, #0]
   14d40:	b2db      	uxtb	r3, r3
   14d42:	2b49      	cmp	r3, #73	; 0x49
   14d44:	d106      	bne.n	14d54 <setMotorMGRResponse+0x24>
	{
		return;
	}
	playSound(response,true);
   14d46:	1dfb      	adds	r3, r7, #7
   14d48:	781b      	ldrb	r3, [r3, #0]
   14d4a:	2101      	movs	r1, #1
   14d4c:	0018      	movs	r0, r3
   14d4e:	4b04      	ldr	r3, [pc, #16]	; (14d60 <setMotorMGRResponse+0x30>)
   14d50:	4798      	blx	r3
   14d52:	e000      	b.n	14d56 <setMotorMGRResponse+0x26>
		return;
   14d54:	46c0      	nop			; (mov r8, r8)
}
   14d56:	46bd      	mov	sp, r7
   14d58:	b002      	add	sp, #8
   14d5a:	bd80      	pop	{r7, pc}
   14d5c:	200007dc 	.word	0x200007dc
   14d60:	00014851 	.word	0x00014851

00014d64 <checkRespSMS>:

void checkRespSMS(char t1)
{
   14d64:	b580      	push	{r7, lr}
   14d66:	b082      	sub	sp, #8
   14d68:	af00      	add	r7, sp, #0
   14d6a:	0002      	movs	r2, r0
   14d6c:	1dfb      	adds	r3, r7, #7
   14d6e:	701a      	strb	r2, [r3, #0]
	if (!callAccepted && user_settings_parameter_struct.responseAddress=='A')
   14d70:	4b0c      	ldr	r3, [pc, #48]	; (14da4 <checkRespSMS+0x40>)
   14d72:	781b      	ldrb	r3, [r3, #0]
   14d74:	2201      	movs	r2, #1
   14d76:	4053      	eors	r3, r2
   14d78:	b2db      	uxtb	r3, r3
   14d7a:	2b00      	cmp	r3, #0
   14d7c:	d00d      	beq.n	14d9a <checkRespSMS+0x36>
   14d7e:	4b0a      	ldr	r3, [pc, #40]	; (14da8 <checkRespSMS+0x44>)
   14d80:	795b      	ldrb	r3, [r3, #5]
   14d82:	2b41      	cmp	r3, #65	; 0x41
   14d84:	d109      	bne.n	14d9a <checkRespSMS+0x36>
	{
		actionType = t1;
   14d86:	4b09      	ldr	r3, [pc, #36]	; (14dac <checkRespSMS+0x48>)
   14d88:	1dfa      	adds	r2, r7, #7
   14d8a:	7812      	ldrb	r2, [r2, #0]
   14d8c:	701a      	strb	r2, [r3, #0]
		sendSMS("",false,false);
   14d8e:	4b08      	ldr	r3, [pc, #32]	; (14db0 <checkRespSMS+0x4c>)
   14d90:	2200      	movs	r2, #0
   14d92:	2100      	movs	r1, #0
   14d94:	0018      	movs	r0, r3
   14d96:	4b07      	ldr	r3, [pc, #28]	; (14db4 <checkRespSMS+0x50>)
   14d98:	4798      	blx	r3
	}
}
   14d9a:	46c0      	nop			; (mov r8, r8)
   14d9c:	46bd      	mov	sp, r7
   14d9e:	b002      	add	sp, #8
   14da0:	bd80      	pop	{r7, pc}
   14da2:	46c0      	nop			; (mov r8, r8)
   14da4:	2000079e 	.word	0x2000079e
   14da8:	20000654 	.word	0x20000654
   14dac:	20000763 	.word	0x20000763
   14db0:	0002ab20 	.word	0x0002ab20
   14db4:	0001743d 	.word	0x0001743d

00014db8 <subDTMF>:

void subDTMF(void)
{
   14db8:	b580      	push	{r7, lr}
   14dba:	af00      	add	r7, sp, #0
	gsm_stop_play_record_file();
   14dbc:	4b04      	ldr	r3, [pc, #16]	; (14dd0 <subDTMF+0x18>)
   14dbe:	4798      	blx	r3
	callCutWait =xTaskGetTickCount();
   14dc0:	4b04      	ldr	r3, [pc, #16]	; (14dd4 <subDTMF+0x1c>)
   14dc2:	4798      	blx	r3
   14dc4:	0002      	movs	r2, r0
   14dc6:	4b04      	ldr	r3, [pc, #16]	; (14dd8 <subDTMF+0x20>)
   14dc8:	601a      	str	r2, [r3, #0]
}
   14dca:	46c0      	nop			; (mov r8, r8)
   14dcc:	46bd      	mov	sp, r7
   14dce:	bd80      	pop	{r7, pc}
   14dd0:	000130e9 	.word	0x000130e9
   14dd4:	000209cd 	.word	0x000209cd
   14dd8:	20000814 	.word	0x20000814

00014ddc <processOnDTMF>:

void processOnDTMF(char *dtmf_cmd)
{
   14ddc:	b580      	push	{r7, lr}
   14dde:	b084      	sub	sp, #16
   14de0:	af00      	add	r7, sp, #0
   14de2:	6078      	str	r0, [r7, #4]
	char dtmf = dtmf_cmd[0];
   14de4:	230f      	movs	r3, #15
   14de6:	18fb      	adds	r3, r7, r3
   14de8:	687a      	ldr	r2, [r7, #4]
   14dea:	7812      	ldrb	r2, [r2, #0]
   14dec:	701a      	strb	r2, [r3, #0]
	
	//LCD_clear();
	//lcd_printf("%c",dtmf);
	if (factory_settings_parameter_struct.ENABLE_M2M)
   14dee:	4b6a      	ldr	r3, [pc, #424]	; (14f98 <processOnDTMF+0x1bc>)
   14df0:	78db      	ldrb	r3, [r3, #3]
   14df2:	2b00      	cmp	r3, #0
   14df4:	d010      	beq.n	14e18 <processOnDTMF+0x3c>
	{
		if (m2mEvent)
   14df6:	4b69      	ldr	r3, [pc, #420]	; (14f9c <processOnDTMF+0x1c0>)
   14df8:	781b      	ldrb	r3, [r3, #0]
   14dfa:	2b00      	cmp	r3, #0
   14dfc:	d100      	bne.n	14e00 <processOnDTMF+0x24>
   14dfe:	e0c7      	b.n	14f90 <processOnDTMF+0x1b4>
		{
			if(dtmf == 'A')
   14e00:	230f      	movs	r3, #15
   14e02:	18fb      	adds	r3, r7, r3
   14e04:	781b      	ldrb	r3, [r3, #0]
   14e06:	2b41      	cmp	r3, #65	; 0x41
   14e08:	d000      	beq.n	14e0c <processOnDTMF+0x30>
   14e0a:	e0c1      	b.n	14f90 <processOnDTMF+0x1b4>
			{
				m2mAck=true;
   14e0c:	4b64      	ldr	r3, [pc, #400]	; (14fa0 <processOnDTMF+0x1c4>)
   14e0e:	2201      	movs	r2, #1
   14e10:	701a      	strb	r2, [r3, #0]
				gsm_hangup_call();
   14e12:	4b64      	ldr	r3, [pc, #400]	; (14fa4 <processOnDTMF+0x1c8>)
   14e14:	4798      	blx	r3
		{
			subDTMF();
			voltageOnCall();
		}
	}
}
   14e16:	e0bb      	b.n	14f90 <processOnDTMF+0x1b4>
		if (dtmf == '1') //Motor On
   14e18:	230f      	movs	r3, #15
   14e1a:	18fb      	adds	r3, r7, r3
   14e1c:	781b      	ldrb	r3, [r3, #0]
   14e1e:	2b31      	cmp	r3, #49	; 0x31
   14e20:	d106      	bne.n	14e30 <processOnDTMF+0x54>
			subDTMF();
   14e22:	4b61      	ldr	r3, [pc, #388]	; (14fa8 <processOnDTMF+0x1cc>)
   14e24:	4798      	blx	r3
			startMotor(true,false);
   14e26:	2100      	movs	r1, #0
   14e28:	2001      	movs	r0, #1
   14e2a:	4b60      	ldr	r3, [pc, #384]	; (14fac <processOnDTMF+0x1d0>)
   14e2c:	4798      	blx	r3
}
   14e2e:	e0af      	b.n	14f90 <processOnDTMF+0x1b4>
		else if (dtmf == '2') //Motor Off
   14e30:	230f      	movs	r3, #15
   14e32:	18fb      	adds	r3, r7, r3
   14e34:	781b      	ldrb	r3, [r3, #0]
   14e36:	2b32      	cmp	r3, #50	; 0x32
   14e38:	d107      	bne.n	14e4a <processOnDTMF+0x6e>
			subDTMF();
   14e3a:	4b5b      	ldr	r3, [pc, #364]	; (14fa8 <processOnDTMF+0x1cc>)
   14e3c:	4798      	blx	r3
			stopMotor(true,false,false);
   14e3e:	2200      	movs	r2, #0
   14e40:	2100      	movs	r1, #0
   14e42:	2001      	movs	r0, #1
   14e44:	4b5a      	ldr	r3, [pc, #360]	; (14fb0 <processOnDTMF+0x1d4>)
   14e46:	4798      	blx	r3
}
   14e48:	e0a2      	b.n	14f90 <processOnDTMF+0x1b4>
		else if (dtmf == '3') //Status
   14e4a:	230f      	movs	r3, #15
   14e4c:	18fb      	adds	r3, r7, r3
   14e4e:	781b      	ldrb	r3, [r3, #0]
   14e50:	2b33      	cmp	r3, #51	; 0x33
   14e52:	d104      	bne.n	14e5e <processOnDTMF+0x82>
			subDTMF();
   14e54:	4b54      	ldr	r3, [pc, #336]	; (14fa8 <processOnDTMF+0x1cc>)
   14e56:	4798      	blx	r3
			statusOnCall();
   14e58:	4b56      	ldr	r3, [pc, #344]	; (14fb4 <processOnDTMF+0x1d8>)
   14e5a:	4798      	blx	r3
}
   14e5c:	e098      	b.n	14f90 <processOnDTMF+0x1b4>
		else if (dtmf == '4') //underground status
   14e5e:	230f      	movs	r3, #15
   14e60:	18fb      	adds	r3, r7, r3
   14e62:	781b      	ldrb	r3, [r3, #0]
   14e64:	2b34      	cmp	r3, #52	; 0x34
   14e66:	d10a      	bne.n	14e7e <processOnDTMF+0xa2>
			if (factory_settings_parameter_struct.ENABLE_WATER)
   14e68:	4b4b      	ldr	r3, [pc, #300]	; (14f98 <processOnDTMF+0x1bc>)
   14e6a:	795b      	ldrb	r3, [r3, #5]
   14e6c:	2b00      	cmp	r3, #0
   14e6e:	d100      	bne.n	14e72 <processOnDTMF+0x96>
   14e70:	e08e      	b.n	14f90 <processOnDTMF+0x1b4>
				subDTMF();
   14e72:	4b4d      	ldr	r3, [pc, #308]	; (14fa8 <processOnDTMF+0x1cc>)
   14e74:	4798      	blx	r3
				waterStatusOnCall(false);
   14e76:	2000      	movs	r0, #0
   14e78:	4b4f      	ldr	r3, [pc, #316]	; (14fb8 <processOnDTMF+0x1dc>)
   14e7a:	4798      	blx	r3
}
   14e7c:	e088      	b.n	14f90 <processOnDTMF+0x1b4>
		else if (dtmf == '5') //overHead Status
   14e7e:	230f      	movs	r3, #15
   14e80:	18fb      	adds	r3, r7, r3
   14e82:	781b      	ldrb	r3, [r3, #0]
   14e84:	2b35      	cmp	r3, #53	; 0x35
   14e86:	d10a      	bne.n	14e9e <processOnDTMF+0xc2>
			if (factory_settings_parameter_struct.ENABLE_GP)
   14e88:	4b43      	ldr	r3, [pc, #268]	; (14f98 <processOnDTMF+0x1bc>)
   14e8a:	791b      	ldrb	r3, [r3, #4]
   14e8c:	2b00      	cmp	r3, #0
   14e8e:	d100      	bne.n	14e92 <processOnDTMF+0xb6>
   14e90:	e07e      	b.n	14f90 <processOnDTMF+0x1b4>
				subDTMF();
   14e92:	4b45      	ldr	r3, [pc, #276]	; (14fa8 <processOnDTMF+0x1cc>)
   14e94:	4798      	blx	r3
				overHeadWaterStatusOnCall(false);
   14e96:	2000      	movs	r0, #0
   14e98:	4b48      	ldr	r3, [pc, #288]	; (14fbc <processOnDTMF+0x1e0>)
   14e9a:	4798      	blx	r3
}
   14e9c:	e078      	b.n	14f90 <processOnDTMF+0x1b4>
		else if(dtmf == '0')
   14e9e:	230f      	movs	r3, #15
   14ea0:	18fb      	adds	r3, r7, r3
   14ea2:	781b      	ldrb	r3, [r3, #0]
   14ea4:	2b30      	cmp	r3, #48	; 0x30
   14ea6:	d114      	bne.n	14ed2 <processOnDTMF+0xf6>
			if (factory_settings_parameter_struct.ENABLE_CURRENT)
   14ea8:	4b3b      	ldr	r3, [pc, #236]	; (14f98 <processOnDTMF+0x1bc>)
   14eaa:	785b      	ldrb	r3, [r3, #1]
   14eac:	2b00      	cmp	r3, #0
   14eae:	d100      	bne.n	14eb2 <processOnDTMF+0xd6>
   14eb0:	e06e      	b.n	14f90 <processOnDTMF+0x1b4>
				if(zeroPressed)
   14eb2:	4b43      	ldr	r3, [pc, #268]	; (14fc0 <processOnDTMF+0x1e4>)
   14eb4:	781b      	ldrb	r3, [r3, #0]
   14eb6:	2b00      	cmp	r3, #0
   14eb8:	d007      	beq.n	14eca <processOnDTMF+0xee>
					autoSetCurrent();   //to enable or disable current detection
   14eba:	4b42      	ldr	r3, [pc, #264]	; (14fc4 <processOnDTMF+0x1e8>)
   14ebc:	4798      	blx	r3
					subDTMF();
   14ebe:	4b3a      	ldr	r3, [pc, #232]	; (14fa8 <processOnDTMF+0x1cc>)
   14ec0:	4798      	blx	r3
					zeroPressed=false;
   14ec2:	4b3f      	ldr	r3, [pc, #252]	; (14fc0 <processOnDTMF+0x1e4>)
   14ec4:	2200      	movs	r2, #0
   14ec6:	701a      	strb	r2, [r3, #0]
}
   14ec8:	e062      	b.n	14f90 <processOnDTMF+0x1b4>
					zeroPressed=true;
   14eca:	4b3d      	ldr	r3, [pc, #244]	; (14fc0 <processOnDTMF+0x1e4>)
   14ecc:	2201      	movs	r2, #1
   14ece:	701a      	strb	r2, [r3, #0]
}
   14ed0:	e05e      	b.n	14f90 <processOnDTMF+0x1b4>
		else if (dtmf == '7') //Speak Current Ampere On Call
   14ed2:	230f      	movs	r3, #15
   14ed4:	18fb      	adds	r3, r7, r3
   14ed6:	781b      	ldrb	r3, [r3, #0]
   14ed8:	2b37      	cmp	r3, #55	; 0x37
   14eda:	d108      	bne.n	14eee <processOnDTMF+0x112>
			if (factory_settings_parameter_struct.AMPERE_SPEAK)
   14edc:	4b2e      	ldr	r3, [pc, #184]	; (14f98 <processOnDTMF+0x1bc>)
   14ede:	789b      	ldrb	r3, [r3, #2]
   14ee0:	2b00      	cmp	r3, #0
   14ee2:	d055      	beq.n	14f90 <processOnDTMF+0x1b4>
				subDTMF();
   14ee4:	4b30      	ldr	r3, [pc, #192]	; (14fa8 <processOnDTMF+0x1cc>)
   14ee6:	4798      	blx	r3
				speakAmpere();
   14ee8:	4b37      	ldr	r3, [pc, #220]	; (14fc8 <processOnDTMF+0x1ec>)
   14eea:	4798      	blx	r3
}
   14eec:	e050      	b.n	14f90 <processOnDTMF+0x1b4>
		else if(dtmf=='D')
   14eee:	230f      	movs	r3, #15
   14ef0:	18fb      	adds	r3, r7, r3
   14ef2:	781b      	ldrb	r3, [r3, #0]
   14ef4:	2b44      	cmp	r3, #68	; 0x44
   14ef6:	d10d      	bne.n	14f14 <processOnDTMF+0x138>
			saveAutoStartSettings(true);  //set AutoStart to True in EEPROM
   14ef8:	2001      	movs	r0, #1
   14efa:	4b34      	ldr	r3, [pc, #208]	; (14fcc <processOnDTMF+0x1f0>)
   14efc:	4798      	blx	r3
			resetAutoStart(true);
   14efe:	2001      	movs	r0, #1
   14f00:	4b33      	ldr	r3, [pc, #204]	; (14fd0 <processOnDTMF+0x1f4>)
   14f02:	4798      	blx	r3
			startMotor(false,false);
   14f04:	2100      	movs	r1, #0
   14f06:	2000      	movs	r0, #0
   14f08:	4b28      	ldr	r3, [pc, #160]	; (14fac <processOnDTMF+0x1d0>)
   14f0a:	4798      	blx	r3
			sendDTMFTone(0xFF);
   14f0c:	20ff      	movs	r0, #255	; 0xff
   14f0e:	4b31      	ldr	r3, [pc, #196]	; (14fd4 <processOnDTMF+0x1f8>)
   14f10:	4798      	blx	r3
}
   14f12:	e03d      	b.n	14f90 <processOnDTMF+0x1b4>
		else if(dtmf=='C')
   14f14:	230f      	movs	r3, #15
   14f16:	18fb      	adds	r3, r7, r3
   14f18:	781b      	ldrb	r3, [r3, #0]
   14f1a:	2b43      	cmp	r3, #67	; 0x43
   14f1c:	d10b      	bne.n	14f36 <processOnDTMF+0x15a>
			saveAutoStartSettings(false);  //set AutoStart to false in EEPROM
   14f1e:	2000      	movs	r0, #0
   14f20:	4b2a      	ldr	r3, [pc, #168]	; (14fcc <processOnDTMF+0x1f0>)
   14f22:	4798      	blx	r3
			stopMotor(false,false,true);
   14f24:	2201      	movs	r2, #1
   14f26:	2100      	movs	r1, #0
   14f28:	2000      	movs	r0, #0
   14f2a:	4b21      	ldr	r3, [pc, #132]	; (14fb0 <processOnDTMF+0x1d4>)
   14f2c:	4798      	blx	r3
			sendDTMFTone(0xFF);
   14f2e:	20ff      	movs	r0, #255	; 0xff
   14f30:	4b28      	ldr	r3, [pc, #160]	; (14fd4 <processOnDTMF+0x1f8>)
   14f32:	4798      	blx	r3
}
   14f34:	e02c      	b.n	14f90 <processOnDTMF+0x1b4>
		else if (dtmf == '8') //Set AUTOTIMER ON
   14f36:	230f      	movs	r3, #15
   14f38:	18fb      	adds	r3, r7, r3
   14f3a:	781b      	ldrb	r3, [r3, #0]
   14f3c:	2b38      	cmp	r3, #56	; 0x38
   14f3e:	d10c      	bne.n	14f5a <processOnDTMF+0x17e>
			subDTMF();
   14f40:	4b19      	ldr	r3, [pc, #100]	; (14fa8 <processOnDTMF+0x1cc>)
   14f42:	4798      	blx	r3
			saveAutoStartSettings(true);  //set AutoStart to True in EEPROM
   14f44:	2001      	movs	r0, #1
   14f46:	4b21      	ldr	r3, [pc, #132]	; (14fcc <processOnDTMF+0x1f0>)
   14f48:	4798      	blx	r3
			resetAutoStart(true);
   14f4a:	2001      	movs	r0, #1
   14f4c:	4b20      	ldr	r3, [pc, #128]	; (14fd0 <processOnDTMF+0x1f4>)
   14f4e:	4798      	blx	r3
			playSound(')',true);     // playFile AutoStart is On
   14f50:	2101      	movs	r1, #1
   14f52:	2029      	movs	r0, #41	; 0x29
   14f54:	4b20      	ldr	r3, [pc, #128]	; (14fd8 <processOnDTMF+0x1fc>)
   14f56:	4798      	blx	r3
}
   14f58:	e01a      	b.n	14f90 <processOnDTMF+0x1b4>
		else if (dtmf == '9') //Set AUTOTIMER OFF
   14f5a:	230f      	movs	r3, #15
   14f5c:	18fb      	adds	r3, r7, r3
   14f5e:	781b      	ldrb	r3, [r3, #0]
   14f60:	2b39      	cmp	r3, #57	; 0x39
   14f62:	d10c      	bne.n	14f7e <processOnDTMF+0x1a2>
			subDTMF();
   14f64:	4b10      	ldr	r3, [pc, #64]	; (14fa8 <processOnDTMF+0x1cc>)
   14f66:	4798      	blx	r3
			saveAutoStartSettings(false);  //set AUtoStart to False in EEPROM
   14f68:	2000      	movs	r0, #0
   14f6a:	4b18      	ldr	r3, [pc, #96]	; (14fcc <processOnDTMF+0x1f0>)
   14f6c:	4798      	blx	r3
			resetAutoStart(true);
   14f6e:	2001      	movs	r0, #1
   14f70:	4b17      	ldr	r3, [pc, #92]	; (14fd0 <processOnDTMF+0x1f4>)
   14f72:	4798      	blx	r3
			playSound('[',true); //playFile autoStart is turned oFF
   14f74:	2101      	movs	r1, #1
   14f76:	205b      	movs	r0, #91	; 0x5b
   14f78:	4b17      	ldr	r3, [pc, #92]	; (14fd8 <processOnDTMF+0x1fc>)
   14f7a:	4798      	blx	r3
}
   14f7c:	e008      	b.n	14f90 <processOnDTMF+0x1b4>
		else if(dtmf == '*')
   14f7e:	230f      	movs	r3, #15
   14f80:	18fb      	adds	r3, r7, r3
   14f82:	781b      	ldrb	r3, [r3, #0]
   14f84:	2b2a      	cmp	r3, #42	; 0x2a
   14f86:	d103      	bne.n	14f90 <processOnDTMF+0x1b4>
			subDTMF();
   14f88:	4b07      	ldr	r3, [pc, #28]	; (14fa8 <processOnDTMF+0x1cc>)
   14f8a:	4798      	blx	r3
			voltageOnCall();
   14f8c:	4b13      	ldr	r3, [pc, #76]	; (14fdc <processOnDTMF+0x200>)
   14f8e:	4798      	blx	r3
}
   14f90:	46c0      	nop			; (mov r8, r8)
   14f92:	46bd      	mov	sp, r7
   14f94:	b004      	add	sp, #16
   14f96:	bd80      	pop	{r7, pc}
   14f98:	2000062c 	.word	0x2000062c
   14f9c:	20000743 	.word	0x20000743
   14fa0:	2000072c 	.word	0x2000072c
   14fa4:	00013089 	.word	0x00013089
   14fa8:	00014db9 	.word	0x00014db9
   14fac:	0001ba05 	.word	0x0001ba05
   14fb0:	0001bbe1 	.word	0x0001bbe1
   14fb4:	0001c025 	.word	0x0001c025
   14fb8:	00019995 	.word	0x00019995
   14fbc:	0001984d 	.word	0x0001984d
   14fc0:	2000080b 	.word	0x2000080b
   14fc4:	0001a621 	.word	0x0001a621
   14fc8:	0001a715 	.word	0x0001a715
   14fcc:	000112a5 	.word	0x000112a5
   14fd0:	0001b60d 	.word	0x0001b60d
   14fd4:	000175f9 	.word	0x000175f9
   14fd8:	00014851 	.word	0x00014851
   14fdc:	0001c135 	.word	0x0001c135

00014fe0 <processOnSMS>:

void processOnSMS(char *received_command, bool admin,bool response_sms_processed_cmd,bool alterNumber, char *phone_number)
{
   14fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
   14fe2:	46c6      	mov	lr, r8
   14fe4:	b500      	push	{lr}
   14fe6:	b0d2      	sub	sp, #328	; 0x148
   14fe8:	af06      	add	r7, sp, #24
   14fea:	60f8      	str	r0, [r7, #12]
   14fec:	000c      	movs	r4, r1
   14fee:	0010      	movs	r0, r2
   14ff0:	0019      	movs	r1, r3
   14ff2:	4be1      	ldr	r3, [pc, #900]	; (15378 <processOnSMS+0x398>)
   14ff4:	2294      	movs	r2, #148	; 0x94
   14ff6:	0052      	lsls	r2, r2, #1
   14ff8:	4694      	mov	ip, r2
   14ffa:	2208      	movs	r2, #8
   14ffc:	4690      	mov	r8, r2
   14ffe:	44b8      	add	r8, r7
   15000:	44c4      	add	ip, r8
   15002:	4463      	add	r3, ip
   15004:	1c22      	adds	r2, r4, #0
   15006:	701a      	strb	r2, [r3, #0]
   15008:	4bdc      	ldr	r3, [pc, #880]	; (1537c <processOnSMS+0x39c>)
   1500a:	2294      	movs	r2, #148	; 0x94
   1500c:	0052      	lsls	r2, r2, #1
   1500e:	4694      	mov	ip, r2
   15010:	2208      	movs	r2, #8
   15012:	4690      	mov	r8, r2
   15014:	44b8      	add	r8, r7
   15016:	44c4      	add	ip, r8
   15018:	4463      	add	r3, ip
   1501a:	1c02      	adds	r2, r0, #0
   1501c:	701a      	strb	r2, [r3, #0]
   1501e:	4bd8      	ldr	r3, [pc, #864]	; (15380 <processOnSMS+0x3a0>)
   15020:	2294      	movs	r2, #148	; 0x94
   15022:	0052      	lsls	r2, r2, #1
   15024:	4694      	mov	ip, r2
   15026:	2208      	movs	r2, #8
   15028:	4690      	mov	r8, r2
   1502a:	44b8      	add	r8, r7
   1502c:	44c4      	add	ip, r8
   1502e:	4463      	add	r3, ip
   15030:	1c0a      	adds	r2, r1, #0
   15032:	701a      	strb	r2, [r3, #0]
	char *copy_received_command;
	char resep_msg[250];
	bool incomingSMSProcessed=false;
   15034:	2328      	movs	r3, #40	; 0x28
   15036:	33ff      	adds	r3, #255	; 0xff
   15038:	2208      	movs	r2, #8
   1503a:	4694      	mov	ip, r2
   1503c:	44bc      	add	ip, r7
   1503e:	4463      	add	r3, ip
   15040:	2200      	movs	r2, #0
   15042:	701a      	strb	r2, [r3, #0]

	copy_received_command = received_command;
   15044:	68fb      	ldr	r3, [r7, #12]
   15046:	228c      	movs	r2, #140	; 0x8c
   15048:	0052      	lsls	r2, r2, #1
   1504a:	2108      	movs	r1, #8
   1504c:	468c      	mov	ip, r1
   1504e:	44bc      	add	ip, r7
   15050:	4462      	add	r2, ip
   15052:	6013      	str	r3, [r2, #0]
	
	if(alterNumber)
   15054:	4bca      	ldr	r3, [pc, #808]	; (15380 <processOnSMS+0x3a0>)
   15056:	2294      	movs	r2, #148	; 0x94
   15058:	0052      	lsls	r2, r2, #1
   1505a:	4694      	mov	ip, r2
   1505c:	2208      	movs	r2, #8
   1505e:	4690      	mov	r8, r2
   15060:	44b8      	add	r8, r7
   15062:	44c4      	add	ip, r8
   15064:	4463      	add	r3, ip
   15066:	781b      	ldrb	r3, [r3, #0]
   15068:	2b00      	cmp	r3, #0
   1506a:	d00e      	beq.n	1508a <processOnSMS+0xaa>
	{
		if(!StringstartsWith(received_command,"AMON"))
   1506c:	4ac5      	ldr	r2, [pc, #788]	; (15384 <processOnSMS+0x3a4>)
   1506e:	68fb      	ldr	r3, [r7, #12]
   15070:	0011      	movs	r1, r2
   15072:	0018      	movs	r0, r3
   15074:	4bc4      	ldr	r3, [pc, #784]	; (15388 <processOnSMS+0x3a8>)
   15076:	4798      	blx	r3
   15078:	0003      	movs	r3, r0
   1507a:	001a      	movs	r2, r3
   1507c:	2301      	movs	r3, #1
   1507e:	4053      	eors	r3, r2
   15080:	b2db      	uxtb	r3, r3
   15082:	2b00      	cmp	r3, #0
   15084:	d001      	beq.n	1508a <processOnSMS+0xaa>
   15086:	f002 f8a5 	bl	171d4 <processOnSMS+0x21f4>
		return;
	}
	
	if (StringstartsWith(received_command,"PRGUPD"))
   1508a:	4ac0      	ldr	r2, [pc, #768]	; (1538c <processOnSMS+0x3ac>)
   1508c:	68fb      	ldr	r3, [r7, #12]
   1508e:	0011      	movs	r1, r2
   15090:	0018      	movs	r0, r3
   15092:	4bbd      	ldr	r3, [pc, #756]	; (15388 <processOnSMS+0x3a8>)
   15094:	4798      	blx	r3
   15096:	1e03      	subs	r3, r0, #0
   15098:	d029      	beq.n	150ee <processOnSMS+0x10e>
	{
		//if (admin)
		{
			bootloader_parameter.firmware_download_pending = true;
   1509a:	4bbd      	ldr	r3, [pc, #756]	; (15390 <processOnSMS+0x3b0>)
   1509c:	2201      	movs	r2, #1
   1509e:	715a      	strb	r2, [r3, #5]
			memset(bootloader_parameter.firmware_updater_mobile_no, '\0', sizeof(bootloader_parameter.firmware_updater_mobile_no));
   150a0:	4bbc      	ldr	r3, [pc, #752]	; (15394 <processOnSMS+0x3b4>)
   150a2:	2210      	movs	r2, #16
   150a4:	2100      	movs	r1, #0
   150a6:	0018      	movs	r0, r3
   150a8:	4bbb      	ldr	r3, [pc, #748]	; (15398 <processOnSMS+0x3b8>)
   150aa:	4798      	blx	r3
			strcpy(bootloader_parameter.firmware_updater_mobile_no,phone_number);
   150ac:	23a0      	movs	r3, #160	; 0xa0
   150ae:	005b      	lsls	r3, r3, #1
   150b0:	2208      	movs	r2, #8
   150b2:	4694      	mov	ip, r2
   150b4:	44bc      	add	ip, r7
   150b6:	4463      	add	r3, ip
   150b8:	681a      	ldr	r2, [r3, #0]
   150ba:	4bb6      	ldr	r3, [pc, #728]	; (15394 <processOnSMS+0x3b4>)
   150bc:	0011      	movs	r1, r2
   150be:	0018      	movs	r0, r3
   150c0:	4bb6      	ldr	r3, [pc, #728]	; (1539c <processOnSMS+0x3bc>)
   150c2:	4798      	blx	r3
			gsm_module_exit_sleep(false);
   150c4:	2000      	movs	r0, #0
   150c6:	4bb6      	ldr	r3, [pc, #728]	; (153a0 <processOnSMS+0x3c0>)
   150c8:	4798      	blx	r3

			memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
   150ca:	49b1      	ldr	r1, [pc, #708]	; (15390 <processOnSMS+0x3b0>)
   150cc:	4bb5      	ldr	r3, [pc, #724]	; (153a4 <processOnSMS+0x3c4>)
   150ce:	221c      	movs	r2, #28
   150d0:	0018      	movs	r0, r3
   150d2:	4bb5      	ldr	r3, [pc, #724]	; (153a8 <processOnSMS+0x3c8>)
   150d4:	4798      	blx	r3
			eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
   150d6:	4bb3      	ldr	r3, [pc, #716]	; (153a4 <processOnSMS+0x3c4>)
   150d8:	0019      	movs	r1, r3
   150da:	2000      	movs	r0, #0
   150dc:	4bb3      	ldr	r3, [pc, #716]	; (153ac <processOnSMS+0x3cc>)
   150de:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
   150e0:	4bb3      	ldr	r3, [pc, #716]	; (153b0 <processOnSMS+0x3d0>)
   150e2:	4798      	blx	r3
			vTaskDelay(100);
   150e4:	2064      	movs	r0, #100	; 0x64
   150e6:	4bb3      	ldr	r3, [pc, #716]	; (153b4 <processOnSMS+0x3d4>)
   150e8:	4798      	blx	r3
			system_reset();
   150ea:	4bb3      	ldr	r3, [pc, #716]	; (153b8 <processOnSMS+0x3d8>)
   150ec:	4798      	blx	r3
		}
	}
	
	if (StringstartsWith(received_command,"WAIT"))
   150ee:	4ab3      	ldr	r2, [pc, #716]	; (153bc <processOnSMS+0x3dc>)
   150f0:	68fb      	ldr	r3, [r7, #12]
   150f2:	0011      	movs	r1, r2
   150f4:	0018      	movs	r0, r3
   150f6:	4ba4      	ldr	r3, [pc, #656]	; (15388 <processOnSMS+0x3a8>)
   150f8:	4798      	blx	r3
   150fa:	1e03      	subs	r3, r0, #0
   150fc:	d047      	beq.n	1518e <processOnSMS+0x1ae>
	{
		enum gsm_error err = gsm_disable_call_waiting();
   150fe:	2318      	movs	r3, #24
   15100:	33ff      	adds	r3, #255	; 0xff
   15102:	2208      	movs	r2, #8
   15104:	18ba      	adds	r2, r7, r2
   15106:	18d4      	adds	r4, r2, r3
   15108:	4bad      	ldr	r3, [pc, #692]	; (153c0 <processOnSMS+0x3e0>)
   1510a:	4798      	blx	r3
   1510c:	0003      	movs	r3, r0
   1510e:	7023      	strb	r3, [r4, #0]
		incomingSMSProcessed=true;
   15110:	2328      	movs	r3, #40	; 0x28
   15112:	33ff      	adds	r3, #255	; 0xff
   15114:	2208      	movs	r2, #8
   15116:	4694      	mov	ip, r2
   15118:	44bc      	add	ip, r7
   1511a:	4463      	add	r3, ip
   1511c:	2201      	movs	r2, #1
   1511e:	701a      	strb	r2, [r3, #0]
		if (response_sms_processed_cmd == true)
   15120:	4b96      	ldr	r3, [pc, #600]	; (1537c <processOnSMS+0x39c>)
   15122:	2294      	movs	r2, #148	; 0x94
   15124:	0052      	lsls	r2, r2, #1
   15126:	4694      	mov	ip, r2
   15128:	2208      	movs	r2, #8
   1512a:	4690      	mov	r8, r2
   1512c:	44b8      	add	r8, r7
   1512e:	44c4      	add	ip, r8
   15130:	4463      	add	r3, ip
   15132:	781b      	ldrb	r3, [r3, #0]
   15134:	2b00      	cmp	r3, #0
   15136:	d101      	bne.n	1513c <processOnSMS+0x15c>
   15138:	f002 f806 	bl	17148 <processOnSMS+0x2168>
		{
			if (err == GSM_ERROR_NONE)
   1513c:	2318      	movs	r3, #24
   1513e:	33ff      	adds	r3, #255	; 0xff
   15140:	2208      	movs	r2, #8
   15142:	4694      	mov	ip, r2
   15144:	44bc      	add	ip, r7
   15146:	4463      	add	r3, ip
   15148:	781b      	ldrb	r3, [r3, #0]
   1514a:	2b00      	cmp	r3, #0
   1514c:	d10d      	bne.n	1516a <processOnSMS+0x18a>
			{
				strcpy(resep_msg,"GSM CALL WAITTING DISABLE : SUCCESS");
   1514e:	230c      	movs	r3, #12
   15150:	2208      	movs	r2, #8
   15152:	4694      	mov	ip, r2
   15154:	44bc      	add	ip, r7
   15156:	4463      	add	r3, ip
   15158:	4a9a      	ldr	r2, [pc, #616]	; (153c4 <processOnSMS+0x3e4>)
   1515a:	ca13      	ldmia	r2!, {r0, r1, r4}
   1515c:	c313      	stmia	r3!, {r0, r1, r4}
   1515e:	ca13      	ldmia	r2!, {r0, r1, r4}
   15160:	c313      	stmia	r3!, {r0, r1, r4}
   15162:	ca13      	ldmia	r2!, {r0, r1, r4}
   15164:	c313      	stmia	r3!, {r0, r1, r4}
   15166:	f001 ffef 	bl	17148 <processOnSMS+0x2168>
			}
			else
			{
				strcpy(resep_msg,"GSM CALL WAITTING DISABLE : FAILED");
   1516a:	230c      	movs	r3, #12
   1516c:	2208      	movs	r2, #8
   1516e:	4694      	mov	ip, r2
   15170:	44bc      	add	ip, r7
   15172:	4463      	add	r3, ip
   15174:	4a94      	ldr	r2, [pc, #592]	; (153c8 <processOnSMS+0x3e8>)
   15176:	ca13      	ldmia	r2!, {r0, r1, r4}
   15178:	c313      	stmia	r3!, {r0, r1, r4}
   1517a:	ca13      	ldmia	r2!, {r0, r1, r4}
   1517c:	c313      	stmia	r3!, {r0, r1, r4}
   1517e:	ca03      	ldmia	r2!, {r0, r1}
   15180:	c303      	stmia	r3!, {r0, r1}
   15182:	8811      	ldrh	r1, [r2, #0]
   15184:	8019      	strh	r1, [r3, #0]
   15186:	7892      	ldrb	r2, [r2, #2]
   15188:	709a      	strb	r2, [r3, #2]
   1518a:	f001 ffdd 	bl	17148 <processOnSMS+0x2168>
			}
		}
	}
	else if (StringstartsWith(received_command,"CLEARALL"))
   1518e:	4a8f      	ldr	r2, [pc, #572]	; (153cc <processOnSMS+0x3ec>)
   15190:	68fb      	ldr	r3, [r7, #12]
   15192:	0011      	movs	r1, r2
   15194:	0018      	movs	r0, r3
   15196:	4b7c      	ldr	r3, [pc, #496]	; (15388 <processOnSMS+0x3a8>)
   15198:	4798      	blx	r3
   1519a:	1e03      	subs	r3, r0, #0
   1519c:	d030      	beq.n	15200 <processOnSMS+0x220>
	{
		clearNumbers(admin);
   1519e:	4b76      	ldr	r3, [pc, #472]	; (15378 <processOnSMS+0x398>)
   151a0:	2294      	movs	r2, #148	; 0x94
   151a2:	0052      	lsls	r2, r2, #1
   151a4:	4694      	mov	ip, r2
   151a6:	2208      	movs	r2, #8
   151a8:	4690      	mov	r8, r2
   151aa:	44b8      	add	r8, r7
   151ac:	44c4      	add	ip, r8
   151ae:	4463      	add	r3, ip
   151b0:	781b      	ldrb	r3, [r3, #0]
   151b2:	0018      	movs	r0, r3
   151b4:	4b86      	ldr	r3, [pc, #536]	; (153d0 <processOnSMS+0x3f0>)
   151b6:	4798      	blx	r3
		incomingSMSProcessed=true;
   151b8:	2328      	movs	r3, #40	; 0x28
   151ba:	33ff      	adds	r3, #255	; 0xff
   151bc:	2208      	movs	r2, #8
   151be:	4694      	mov	ip, r2
   151c0:	44bc      	add	ip, r7
   151c2:	4463      	add	r3, ip
   151c4:	2201      	movs	r2, #1
   151c6:	701a      	strb	r2, [r3, #0]
		if (response_sms_processed_cmd == true)
   151c8:	4b6c      	ldr	r3, [pc, #432]	; (1537c <processOnSMS+0x39c>)
   151ca:	2294      	movs	r2, #148	; 0x94
   151cc:	0052      	lsls	r2, r2, #1
   151ce:	4694      	mov	ip, r2
   151d0:	2208      	movs	r2, #8
   151d2:	4690      	mov	r8, r2
   151d4:	44b8      	add	r8, r7
   151d6:	44c4      	add	ip, r8
   151d8:	4463      	add	r3, ip
   151da:	781b      	ldrb	r3, [r3, #0]
   151dc:	2b00      	cmp	r3, #0
   151de:	d101      	bne.n	151e4 <processOnSMS+0x204>
   151e0:	f001 ffb2 	bl	17148 <processOnSMS+0x2168>
		{
			strcpy(resep_msg,"ALL USER NUMBERS CLEARED");
   151e4:	230c      	movs	r3, #12
   151e6:	2208      	movs	r2, #8
   151e8:	4694      	mov	ip, r2
   151ea:	44bc      	add	ip, r7
   151ec:	4463      	add	r3, ip
   151ee:	4a79      	ldr	r2, [pc, #484]	; (153d4 <processOnSMS+0x3f4>)
   151f0:	ca13      	ldmia	r2!, {r0, r1, r4}
   151f2:	c313      	stmia	r3!, {r0, r1, r4}
   151f4:	ca13      	ldmia	r2!, {r0, r1, r4}
   151f6:	c313      	stmia	r3!, {r0, r1, r4}
   151f8:	7812      	ldrb	r2, [r2, #0]
   151fa:	701a      	strb	r2, [r3, #0]
   151fc:	f001 ffa4 	bl	17148 <processOnSMS+0x2168>
		}
	}
	else if (StringstartsWith(received_command,"DEFAULT"))
   15200:	4a75      	ldr	r2, [pc, #468]	; (153d8 <processOnSMS+0x3f8>)
   15202:	68fb      	ldr	r3, [r7, #12]
   15204:	0011      	movs	r1, r2
   15206:	0018      	movs	r0, r3
   15208:	4b5f      	ldr	r3, [pc, #380]	; (15388 <processOnSMS+0x3a8>)
   1520a:	4798      	blx	r3
   1520c:	1e03      	subs	r3, r0, #0
   1520e:	d065      	beq.n	152dc <processOnSMS+0x2fc>
	{
		saveAutoStartSettings(false);
   15210:	2000      	movs	r0, #0
   15212:	4b72      	ldr	r3, [pc, #456]	; (153dc <processOnSMS+0x3fc>)
   15214:	4798      	blx	r3
		if (factory_settings_parameter_struct.ENABLE_WATER)
   15216:	4b72      	ldr	r3, [pc, #456]	; (153e0 <processOnSMS+0x400>)
   15218:	795b      	ldrb	r3, [r3, #5]
   1521a:	2b00      	cmp	r3, #0
   1521c:	d00d      	beq.n	1523a <processOnSMS+0x25a>
		{
			saveWaterBypassSettings(false);
   1521e:	2000      	movs	r0, #0
   15220:	4b70      	ldr	r3, [pc, #448]	; (153e4 <processOnSMS+0x404>)
   15222:	4798      	blx	r3
			if (factory_settings_parameter_struct.ENABLE_M2M)
   15224:	4b6e      	ldr	r3, [pc, #440]	; (153e0 <processOnSMS+0x400>)
   15226:	78db      	ldrb	r3, [r3, #3]
   15228:	2b00      	cmp	r3, #0
   1522a:	d003      	beq.n	15234 <processOnSMS+0x254>
			{
				saveM2MSettings(false);
   1522c:	2000      	movs	r0, #0
   1522e:	4b6e      	ldr	r3, [pc, #440]	; (153e8 <processOnSMS+0x408>)
   15230:	4798      	blx	r3
   15232:	e002      	b.n	1523a <processOnSMS+0x25a>
			}
			else
			{
				savePreventOverFlowSettings(false);
   15234:	2000      	movs	r0, #0
   15236:	4b6d      	ldr	r3, [pc, #436]	; (153ec <processOnSMS+0x40c>)
   15238:	4798      	blx	r3
			}
		}
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1523a:	4b69      	ldr	r3, [pc, #420]	; (153e0 <processOnSMS+0x400>)
   1523c:	785b      	ldrb	r3, [r3, #1]
   1523e:	2b00      	cmp	r3, #0
   15240:	d008      	beq.n	15254 <processOnSMS+0x274>
		{
			setOverloadPer(120);
   15242:	2078      	movs	r0, #120	; 0x78
   15244:	4b6a      	ldr	r3, [pc, #424]	; (153f0 <processOnSMS+0x410>)
   15246:	4798      	blx	r3
			setUnderloadPer(85);
   15248:	2055      	movs	r0, #85	; 0x55
   1524a:	4b6a      	ldr	r3, [pc, #424]	; (153f4 <processOnSMS+0x414>)
   1524c:	4798      	blx	r3
			setCurrentDetection(false);
   1524e:	2000      	movs	r0, #0
   15250:	4b69      	ldr	r3, [pc, #420]	; (153f8 <processOnSMS+0x418>)
   15252:	4798      	blx	r3
		}
		saveEventStageSettings(0);
   15254:	2000      	movs	r0, #0
   15256:	4b69      	ldr	r3, [pc, #420]	; (153fc <processOnSMS+0x41c>)
   15258:	4798      	blx	r3
		//saveBypassSettings(false);
		saveDNDSettings(false);
   1525a:	2000      	movs	r0, #0
   1525c:	4b68      	ldr	r3, [pc, #416]	; (15400 <processOnSMS+0x420>)
   1525e:	4798      	blx	r3
		saveResponseSettings('C');
   15260:	2043      	movs	r0, #67	; 0x43
   15262:	4b68      	ldr	r3, [pc, #416]	; (15404 <processOnSMS+0x424>)
   15264:	4798      	blx	r3
		saveAutoStartTimeSettings(50);
   15266:	2032      	movs	r0, #50	; 0x32
   15268:	4b67      	ldr	r3, [pc, #412]	; (15408 <processOnSMS+0x428>)
   1526a:	4798      	blx	r3
		saveStarDeltaTimer(2);
   1526c:	2002      	movs	r0, #2
   1526e:	4b67      	ldr	r3, [pc, #412]	; (1540c <processOnSMS+0x42c>)
   15270:	4798      	blx	r3
		
		saveSinglePhasingSettings(true);
   15272:	2001      	movs	r0, #1
   15274:	4b66      	ldr	r3, [pc, #408]	; (15410 <processOnSMS+0x430>)
   15276:	4798      	blx	r3
		saveSinglePhasingVoltage(80);
   15278:	2050      	movs	r0, #80	; 0x50
   1527a:	4b66      	ldr	r3, [pc, #408]	; (15414 <processOnSMS+0x434>)
   1527c:	4798      	blx	r3
		savePhaseSequenceProtectionSettings(true);
   1527e:	2001      	movs	r0, #1
   15280:	4b65      	ldr	r3, [pc, #404]	; (15418 <processOnSMS+0x438>)
   15282:	4798      	blx	r3
		setPrimaryNumberIndex(0);
   15284:	2000      	movs	r0, #0
   15286:	4b65      	ldr	r3, [pc, #404]	; (1541c <processOnSMS+0x43c>)
   15288:	4798      	blx	r3
		setSecondaryNumberIndex(1);
   1528a:	2001      	movs	r0, #1
   1528c:	4b64      	ldr	r3, [pc, #400]	; (15420 <processOnSMS+0x440>)
   1528e:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   15290:	2328      	movs	r3, #40	; 0x28
   15292:	33ff      	adds	r3, #255	; 0xff
   15294:	2208      	movs	r2, #8
   15296:	4694      	mov	ip, r2
   15298:	44bc      	add	ip, r7
   1529a:	4463      	add	r3, ip
   1529c:	2201      	movs	r2, #1
   1529e:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   152a0:	4b36      	ldr	r3, [pc, #216]	; (1537c <processOnSMS+0x39c>)
   152a2:	2294      	movs	r2, #148	; 0x94
   152a4:	0052      	lsls	r2, r2, #1
   152a6:	4694      	mov	ip, r2
   152a8:	2208      	movs	r2, #8
   152aa:	4690      	mov	r8, r2
   152ac:	44b8      	add	r8, r7
   152ae:	44c4      	add	ip, r8
   152b0:	4463      	add	r3, ip
   152b2:	781b      	ldrb	r3, [r3, #0]
   152b4:	2b00      	cmp	r3, #0
   152b6:	d101      	bne.n	152bc <processOnSMS+0x2dc>
   152b8:	f001 ff46 	bl	17148 <processOnSMS+0x2168>
		{
			strcpy(resep_msg,"ALL SETTINGS ARE NOW FACTORY DEFAULT");
   152bc:	230c      	movs	r3, #12
   152be:	2208      	movs	r2, #8
   152c0:	4694      	mov	ip, r2
   152c2:	44bc      	add	ip, r7
   152c4:	4463      	add	r3, ip
   152c6:	4a57      	ldr	r2, [pc, #348]	; (15424 <processOnSMS+0x444>)
   152c8:	ca13      	ldmia	r2!, {r0, r1, r4}
   152ca:	c313      	stmia	r3!, {r0, r1, r4}
   152cc:	ca13      	ldmia	r2!, {r0, r1, r4}
   152ce:	c313      	stmia	r3!, {r0, r1, r4}
   152d0:	ca13      	ldmia	r2!, {r0, r1, r4}
   152d2:	c313      	stmia	r3!, {r0, r1, r4}
   152d4:	7812      	ldrb	r2, [r2, #0]
   152d6:	701a      	strb	r2, [r3, #0]
   152d8:	f001 ff36 	bl	17148 <processOnSMS+0x2168>
		}
	}
	else if (StringstartsWith(received_command,"NUM"))
   152dc:	4a52      	ldr	r2, [pc, #328]	; (15428 <processOnSMS+0x448>)
   152de:	68fb      	ldr	r3, [r7, #12]
   152e0:	0011      	movs	r1, r2
   152e2:	0018      	movs	r0, r3
   152e4:	4b28      	ldr	r3, [pc, #160]	; (15388 <processOnSMS+0x3a8>)
   152e6:	4798      	blx	r3
   152e8:	1e03      	subs	r3, r0, #0
   152ea:	d038      	beq.n	1535e <processOnSMS+0x37e>
	{
		response_sms_processed_cmd = true;
   152ec:	4b23      	ldr	r3, [pc, #140]	; (1537c <processOnSMS+0x39c>)
   152ee:	2294      	movs	r2, #148	; 0x94
   152f0:	0052      	lsls	r2, r2, #1
   152f2:	4694      	mov	ip, r2
   152f4:	2208      	movs	r2, #8
   152f6:	4690      	mov	r8, r2
   152f8:	44b8      	add	r8, r7
   152fa:	44c4      	add	ip, r8
   152fc:	4463      	add	r3, ip
   152fe:	2201      	movs	r2, #1
   15300:	701a      	strb	r2, [r3, #0]
		incomingSMSProcessed=true;
   15302:	2328      	movs	r3, #40	; 0x28
   15304:	33ff      	adds	r3, #255	; 0xff
   15306:	2208      	movs	r2, #8
   15308:	4694      	mov	ip, r2
   1530a:	44bc      	add	ip, r7
   1530c:	4463      	add	r3, ip
   1530e:	2201      	movs	r2, #1
   15310:	701a      	strb	r2, [r3, #0]
		
		memset(resep_msg, '\0', sizeof(resep_msg));
   15312:	230c      	movs	r3, #12
   15314:	2208      	movs	r2, #8
   15316:	4694      	mov	ip, r2
   15318:	44bc      	add	ip, r7
   1531a:	4463      	add	r3, ip
   1531c:	22fa      	movs	r2, #250	; 0xfa
   1531e:	2100      	movs	r1, #0
   15320:	0018      	movs	r0, r3
   15322:	4b1d      	ldr	r3, [pc, #116]	; (15398 <processOnSMS+0x3b8>)
   15324:	4798      	blx	r3
		if (user_count_struct.current_user_no_count==0)
   15326:	4b41      	ldr	r3, [pc, #260]	; (1542c <processOnSMS+0x44c>)
   15328:	789b      	ldrb	r3, [r3, #2]
   1532a:	2b00      	cmp	r3, #0
   1532c:	d10d      	bne.n	1534a <processOnSMS+0x36a>
		{
			strcpy(resep_msg,"No Numbers Exists");
   1532e:	230c      	movs	r3, #12
   15330:	2208      	movs	r2, #8
   15332:	4694      	mov	ip, r2
   15334:	44bc      	add	ip, r7
   15336:	4463      	add	r3, ip
   15338:	4a3d      	ldr	r2, [pc, #244]	; (15430 <processOnSMS+0x450>)
   1533a:	ca13      	ldmia	r2!, {r0, r1, r4}
   1533c:	c313      	stmia	r3!, {r0, r1, r4}
   1533e:	6811      	ldr	r1, [r2, #0]
   15340:	6019      	str	r1, [r3, #0]
   15342:	8892      	ldrh	r2, [r2, #4]
   15344:	809a      	strh	r2, [r3, #4]
   15346:	f001 feff 	bl	17148 <processOnSMS+0x2168>
		}
		else
		{
			getNumbers(resep_msg);
   1534a:	230c      	movs	r3, #12
   1534c:	2208      	movs	r2, #8
   1534e:	4694      	mov	ip, r2
   15350:	44bc      	add	ip, r7
   15352:	4463      	add	r3, ip
   15354:	0018      	movs	r0, r3
   15356:	4b37      	ldr	r3, [pc, #220]	; (15434 <processOnSMS+0x454>)
   15358:	4798      	blx	r3
   1535a:	f001 fef5 	bl	17148 <processOnSMS+0x2168>
		}
	}
	else if (StringstartsWith(received_command,"RESET"))
   1535e:	4a36      	ldr	r2, [pc, #216]	; (15438 <processOnSMS+0x458>)
   15360:	68fb      	ldr	r3, [r7, #12]
   15362:	0011      	movs	r1, r2
   15364:	0018      	movs	r0, r3
   15366:	4b08      	ldr	r3, [pc, #32]	; (15388 <processOnSMS+0x3a8>)
   15368:	4798      	blx	r3
   1536a:	1e03      	subs	r3, r0, #0
   1536c:	d066      	beq.n	1543c <processOnSMS+0x45c>
	{
		system_reset();
   1536e:	4b12      	ldr	r3, [pc, #72]	; (153b8 <processOnSMS+0x3d8>)
   15370:	4798      	blx	r3
   15372:	f001 fee9 	bl	17148 <processOnSMS+0x2168>
   15376:	46c0      	nop			; (mov r8, r8)
   15378:	fffffedb 	.word	0xfffffedb
   1537c:	fffffeda 	.word	0xfffffeda
   15380:	fffffed9 	.word	0xfffffed9
   15384:	0002ab24 	.word	0x0002ab24
   15388:	00014201 	.word	0x00014201
   1538c:	0002ab2c 	.word	0x0002ab2c
   15390:	200005f8 	.word	0x200005f8
   15394:	20000604 	.word	0x20000604
   15398:	000298b7 	.word	0x000298b7
   1539c:	00029b37 	.word	0x00029b37
   153a0:	00012309 	.word	0x00012309
   153a4:	20000584 	.word	0x20000584
   153a8:	00029881 	.word	0x00029881
   153ac:	00024171 	.word	0x00024171
   153b0:	00024319 	.word	0x00024319
   153b4:	00020669 	.word	0x00020669
   153b8:	000142d5 	.word	0x000142d5
   153bc:	0002ab34 	.word	0x0002ab34
   153c0:	000130b9 	.word	0x000130b9
   153c4:	0002ab3c 	.word	0x0002ab3c
   153c8:	0002ab60 	.word	0x0002ab60
   153cc:	0002ab84 	.word	0x0002ab84
   153d0:	00011109 	.word	0x00011109
   153d4:	0002ab90 	.word	0x0002ab90
   153d8:	0002abac 	.word	0x0002abac
   153dc:	000112a5 	.word	0x000112a5
   153e0:	2000062c 	.word	0x2000062c
   153e4:	00011465 	.word	0x00011465
   153e8:	00010be1 	.word	0x00010be1
   153ec:	000114b1 	.word	0x000114b1
   153f0:	000114fd 	.word	0x000114fd
   153f4:	00011565 	.word	0x00011565
   153f8:	00011985 	.word	0x00011985
   153fc:	00011a1d 	.word	0x00011a1d
   15400:	0001133d 	.word	0x0001133d
   15404:	00011389 	.word	0x00011389
   15408:	000112f1 	.word	0x000112f1
   1540c:	000119d1 	.word	0x000119d1
   15410:	000115d5 	.word	0x000115d5
   15414:	00011621 	.word	0x00011621
   15418:	0001166d 	.word	0x0001166d
   1541c:	00011afd 	.word	0x00011afd
   15420:	00011b4d 	.word	0x00011b4d
   15424:	0002abb4 	.word	0x0002abb4
   15428:	0002abdc 	.word	0x0002abdc
   1542c:	20000614 	.word	0x20000614
   15430:	0002abe0 	.word	0x0002abe0
   15434:	000107f5 	.word	0x000107f5
   15438:	0002abf4 	.word	0x0002abf4
	}
	else if (StringstartsWith(received_command,"DID"))
   1543c:	4aea      	ldr	r2, [pc, #936]	; (157e8 <processOnSMS+0x808>)
   1543e:	68fb      	ldr	r3, [r7, #12]
   15440:	0011      	movs	r1, r2
   15442:	0018      	movs	r0, r3
   15444:	4be9      	ldr	r3, [pc, #932]	; (157ec <processOnSMS+0x80c>)
   15446:	4798      	blx	r3
   15448:	1e03      	subs	r3, r0, #0
   1544a:	d01f      	beq.n	1548c <processOnSMS+0x4ac>
	{
		response_sms_processed_cmd=true;
   1544c:	4be8      	ldr	r3, [pc, #928]	; (157f0 <processOnSMS+0x810>)
   1544e:	2294      	movs	r2, #148	; 0x94
   15450:	0052      	lsls	r2, r2, #1
   15452:	4694      	mov	ip, r2
   15454:	2208      	movs	r2, #8
   15456:	4690      	mov	r8, r2
   15458:	44b8      	add	r8, r7
   1545a:	44c4      	add	ip, r8
   1545c:	4463      	add	r3, ip
   1545e:	2201      	movs	r2, #1
   15460:	701a      	strb	r2, [r3, #0]
		incomingSMSProcessed=true;
   15462:	2328      	movs	r3, #40	; 0x28
   15464:	33ff      	adds	r3, #255	; 0xff
   15466:	2208      	movs	r2, #8
   15468:	4694      	mov	ip, r2
   1546a:	44bc      	add	ip, r7
   1546c:	4463      	add	r3, ip
   1546e:	2201      	movs	r2, #1
   15470:	701a      	strb	r2, [r3, #0]
		sprintf(resep_msg,"%lu %s",factory_settings_parameter_struct.DeviceId_ee,VERSION_NO);
   15472:	4be0      	ldr	r3, [pc, #896]	; (157f4 <processOnSMS+0x814>)
   15474:	689a      	ldr	r2, [r3, #8]
   15476:	4be0      	ldr	r3, [pc, #896]	; (157f8 <processOnSMS+0x818>)
   15478:	49e0      	ldr	r1, [pc, #896]	; (157fc <processOnSMS+0x81c>)
   1547a:	200c      	movs	r0, #12
   1547c:	2408      	movs	r4, #8
   1547e:	46a4      	mov	ip, r4
   15480:	44bc      	add	ip, r7
   15482:	4460      	add	r0, ip
   15484:	4cde      	ldr	r4, [pc, #888]	; (15800 <processOnSMS+0x820>)
   15486:	47a0      	blx	r4
   15488:	f001 fe5e 	bl	17148 <processOnSMS+0x2168>
		//sprintf(resep_msg,"Software:%s\nModel:%d\nDeviceId:%lu\nHW:%d",
		//SOFTWARE_VER,factory_parameter_struct.u16tmodelNo,factory_parameter_struct.u32deviceId,
		//factory_parameter_struct.u16thardwareVer);

	}
	else if (StringstartsWith(received_command,"AUTOON"))
   1548c:	4add      	ldr	r2, [pc, #884]	; (15804 <processOnSMS+0x824>)
   1548e:	68fb      	ldr	r3, [r7, #12]
   15490:	0011      	movs	r1, r2
   15492:	0018      	movs	r0, r3
   15494:	4bd5      	ldr	r3, [pc, #852]	; (157ec <processOnSMS+0x80c>)
   15496:	4798      	blx	r3
   15498:	1e03      	subs	r3, r0, #0
   1549a:	d027      	beq.n	154ec <processOnSMS+0x50c>
	{
		saveAutoStartSettings(true);
   1549c:	2001      	movs	r0, #1
   1549e:	4bda      	ldr	r3, [pc, #872]	; (15808 <processOnSMS+0x828>)
   154a0:	4798      	blx	r3
		resetAutoStart(true);
   154a2:	2001      	movs	r0, #1
   154a4:	4bd9      	ldr	r3, [pc, #868]	; (1580c <processOnSMS+0x82c>)
   154a6:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   154a8:	2328      	movs	r3, #40	; 0x28
   154aa:	33ff      	adds	r3, #255	; 0xff
   154ac:	2208      	movs	r2, #8
   154ae:	4694      	mov	ip, r2
   154b0:	44bc      	add	ip, r7
   154b2:	4463      	add	r3, ip
   154b4:	2201      	movs	r2, #1
   154b6:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   154b8:	4bcd      	ldr	r3, [pc, #820]	; (157f0 <processOnSMS+0x810>)
   154ba:	2294      	movs	r2, #148	; 0x94
   154bc:	0052      	lsls	r2, r2, #1
   154be:	4694      	mov	ip, r2
   154c0:	2208      	movs	r2, #8
   154c2:	4690      	mov	r8, r2
   154c4:	44b8      	add	r8, r7
   154c6:	44c4      	add	ip, r8
   154c8:	4463      	add	r3, ip
   154ca:	781b      	ldrb	r3, [r3, #0]
   154cc:	2b00      	cmp	r3, #0
   154ce:	d101      	bne.n	154d4 <processOnSMS+0x4f4>
   154d0:	f001 fe3a 	bl	17148 <processOnSMS+0x2168>
		{
			strcpy(resep_msg,"MOTOR AUTOON ON");
   154d4:	230c      	movs	r3, #12
   154d6:	2208      	movs	r2, #8
   154d8:	4694      	mov	ip, r2
   154da:	44bc      	add	ip, r7
   154dc:	4463      	add	r3, ip
   154de:	4acc      	ldr	r2, [pc, #816]	; (15810 <processOnSMS+0x830>)
   154e0:	ca13      	ldmia	r2!, {r0, r1, r4}
   154e2:	c313      	stmia	r3!, {r0, r1, r4}
   154e4:	6812      	ldr	r2, [r2, #0]
   154e6:	601a      	str	r2, [r3, #0]
   154e8:	f001 fe2e 	bl	17148 <processOnSMS+0x2168>
		}
	}
	else if (StringstartsWith(received_command,"AUTOOFF"))
   154ec:	4ac9      	ldr	r2, [pc, #804]	; (15814 <processOnSMS+0x834>)
   154ee:	68fb      	ldr	r3, [r7, #12]
   154f0:	0011      	movs	r1, r2
   154f2:	0018      	movs	r0, r3
   154f4:	4bbd      	ldr	r3, [pc, #756]	; (157ec <processOnSMS+0x80c>)
   154f6:	4798      	blx	r3
   154f8:	1e03      	subs	r3, r0, #0
   154fa:	d029      	beq.n	15550 <processOnSMS+0x570>
	{
		saveAutoStartSettings(false);
   154fc:	2000      	movs	r0, #0
   154fe:	4bc2      	ldr	r3, [pc, #776]	; (15808 <processOnSMS+0x828>)
   15500:	4798      	blx	r3
		resetAutoStart(true);
   15502:	2001      	movs	r0, #1
   15504:	4bc1      	ldr	r3, [pc, #772]	; (1580c <processOnSMS+0x82c>)
   15506:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   15508:	2328      	movs	r3, #40	; 0x28
   1550a:	33ff      	adds	r3, #255	; 0xff
   1550c:	2208      	movs	r2, #8
   1550e:	4694      	mov	ip, r2
   15510:	44bc      	add	ip, r7
   15512:	4463      	add	r3, ip
   15514:	2201      	movs	r2, #1
   15516:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   15518:	4bb5      	ldr	r3, [pc, #724]	; (157f0 <processOnSMS+0x810>)
   1551a:	2294      	movs	r2, #148	; 0x94
   1551c:	0052      	lsls	r2, r2, #1
   1551e:	4694      	mov	ip, r2
   15520:	2208      	movs	r2, #8
   15522:	4690      	mov	r8, r2
   15524:	44b8      	add	r8, r7
   15526:	44c4      	add	ip, r8
   15528:	4463      	add	r3, ip
   1552a:	781b      	ldrb	r3, [r3, #0]
   1552c:	2b00      	cmp	r3, #0
   1552e:	d101      	bne.n	15534 <processOnSMS+0x554>
   15530:	f001 fe0a 	bl	17148 <processOnSMS+0x2168>
		{
			strcpy(resep_msg,"MOTOR AUTOON OFF");
   15534:	230c      	movs	r3, #12
   15536:	2208      	movs	r2, #8
   15538:	4694      	mov	ip, r2
   1553a:	44bc      	add	ip, r7
   1553c:	4463      	add	r3, ip
   1553e:	4ab6      	ldr	r2, [pc, #728]	; (15818 <processOnSMS+0x838>)
   15540:	ca13      	ldmia	r2!, {r0, r1, r4}
   15542:	c313      	stmia	r3!, {r0, r1, r4}
   15544:	6811      	ldr	r1, [r2, #0]
   15546:	6019      	str	r1, [r3, #0]
   15548:	7912      	ldrb	r2, [r2, #4]
   1554a:	711a      	strb	r2, [r3, #4]
   1554c:	f001 fdfc 	bl	17148 <processOnSMS+0x2168>
		}
	}
	else if (StringstartsWith(received_command,"WBYPON"))
   15550:	4ab2      	ldr	r2, [pc, #712]	; (1581c <processOnSMS+0x83c>)
   15552:	68fb      	ldr	r3, [r7, #12]
   15554:	0011      	movs	r1, r2
   15556:	0018      	movs	r0, r3
   15558:	4ba4      	ldr	r3, [pc, #656]	; (157ec <processOnSMS+0x80c>)
   1555a:	4798      	blx	r3
   1555c:	1e03      	subs	r3, r0, #0
   1555e:	d02a      	beq.n	155b6 <processOnSMS+0x5d6>
	{
		
		if (factory_settings_parameter_struct.ENABLE_WATER)
   15560:	4ba4      	ldr	r3, [pc, #656]	; (157f4 <processOnSMS+0x814>)
   15562:	795b      	ldrb	r3, [r3, #5]
   15564:	2b00      	cmp	r3, #0
   15566:	d101      	bne.n	1556c <processOnSMS+0x58c>
   15568:	f001 fdee 	bl	17148 <processOnSMS+0x2168>
		{
			incomingSMSProcessed=true;
   1556c:	2328      	movs	r3, #40	; 0x28
   1556e:	33ff      	adds	r3, #255	; 0xff
   15570:	2208      	movs	r2, #8
   15572:	4694      	mov	ip, r2
   15574:	44bc      	add	ip, r7
   15576:	4463      	add	r3, ip
   15578:	2201      	movs	r2, #1
   1557a:	701a      	strb	r2, [r3, #0]
			saveWaterBypassSettings(true);
   1557c:	2001      	movs	r0, #1
   1557e:	4ba8      	ldr	r3, [pc, #672]	; (15820 <processOnSMS+0x840>)
   15580:	4798      	blx	r3
			if (response_sms_processed_cmd == true)
   15582:	4b9b      	ldr	r3, [pc, #620]	; (157f0 <processOnSMS+0x810>)
   15584:	2294      	movs	r2, #148	; 0x94
   15586:	0052      	lsls	r2, r2, #1
   15588:	4694      	mov	ip, r2
   1558a:	2208      	movs	r2, #8
   1558c:	4690      	mov	r8, r2
   1558e:	44b8      	add	r8, r7
   15590:	44c4      	add	ip, r8
   15592:	4463      	add	r3, ip
   15594:	781b      	ldrb	r3, [r3, #0]
   15596:	2b00      	cmp	r3, #0
   15598:	d101      	bne.n	1559e <processOnSMS+0x5be>
   1559a:	f001 fdd5 	bl	17148 <processOnSMS+0x2168>
			{
				strcpy(resep_msg,"WATER BYPASS ON");
   1559e:	230c      	movs	r3, #12
   155a0:	2208      	movs	r2, #8
   155a2:	4694      	mov	ip, r2
   155a4:	44bc      	add	ip, r7
   155a6:	4463      	add	r3, ip
   155a8:	4a9e      	ldr	r2, [pc, #632]	; (15824 <processOnSMS+0x844>)
   155aa:	ca13      	ldmia	r2!, {r0, r1, r4}
   155ac:	c313      	stmia	r3!, {r0, r1, r4}
   155ae:	6812      	ldr	r2, [r2, #0]
   155b0:	601a      	str	r2, [r3, #0]
   155b2:	f001 fdc9 	bl	17148 <processOnSMS+0x2168>
			}
		}
	}
	else if (StringstartsWith(received_command,"WBYPOFF"))
   155b6:	4a9c      	ldr	r2, [pc, #624]	; (15828 <processOnSMS+0x848>)
   155b8:	68fb      	ldr	r3, [r7, #12]
   155ba:	0011      	movs	r1, r2
   155bc:	0018      	movs	r0, r3
   155be:	4b8b      	ldr	r3, [pc, #556]	; (157ec <processOnSMS+0x80c>)
   155c0:	4798      	blx	r3
   155c2:	1e03      	subs	r3, r0, #0
   155c4:	d02c      	beq.n	15620 <processOnSMS+0x640>
	{
		if (factory_settings_parameter_struct.ENABLE_WATER)
   155c6:	4b8b      	ldr	r3, [pc, #556]	; (157f4 <processOnSMS+0x814>)
   155c8:	795b      	ldrb	r3, [r3, #5]
   155ca:	2b00      	cmp	r3, #0
   155cc:	d101      	bne.n	155d2 <processOnSMS+0x5f2>
   155ce:	f001 fdbb 	bl	17148 <processOnSMS+0x2168>
		{
			incomingSMSProcessed=true;
   155d2:	2328      	movs	r3, #40	; 0x28
   155d4:	33ff      	adds	r3, #255	; 0xff
   155d6:	2208      	movs	r2, #8
   155d8:	4694      	mov	ip, r2
   155da:	44bc      	add	ip, r7
   155dc:	4463      	add	r3, ip
   155de:	2201      	movs	r2, #1
   155e0:	701a      	strb	r2, [r3, #0]
			saveWaterBypassSettings(false);
   155e2:	2000      	movs	r0, #0
   155e4:	4b8e      	ldr	r3, [pc, #568]	; (15820 <processOnSMS+0x840>)
   155e6:	4798      	blx	r3
			if (response_sms_processed_cmd == true)
   155e8:	4b81      	ldr	r3, [pc, #516]	; (157f0 <processOnSMS+0x810>)
   155ea:	2294      	movs	r2, #148	; 0x94
   155ec:	0052      	lsls	r2, r2, #1
   155ee:	4694      	mov	ip, r2
   155f0:	2208      	movs	r2, #8
   155f2:	4690      	mov	r8, r2
   155f4:	44b8      	add	r8, r7
   155f6:	44c4      	add	ip, r8
   155f8:	4463      	add	r3, ip
   155fa:	781b      	ldrb	r3, [r3, #0]
   155fc:	2b00      	cmp	r3, #0
   155fe:	d101      	bne.n	15604 <processOnSMS+0x624>
   15600:	f001 fda2 	bl	17148 <processOnSMS+0x2168>
			{
				strcpy(resep_msg,"WATER BYPASS OFF");
   15604:	230c      	movs	r3, #12
   15606:	2208      	movs	r2, #8
   15608:	4694      	mov	ip, r2
   1560a:	44bc      	add	ip, r7
   1560c:	4463      	add	r3, ip
   1560e:	4a87      	ldr	r2, [pc, #540]	; (1582c <processOnSMS+0x84c>)
   15610:	ca13      	ldmia	r2!, {r0, r1, r4}
   15612:	c313      	stmia	r3!, {r0, r1, r4}
   15614:	6811      	ldr	r1, [r2, #0]
   15616:	6019      	str	r1, [r3, #0]
   15618:	7912      	ldrb	r2, [r2, #4]
   1561a:	711a      	strb	r2, [r3, #4]
   1561c:	f001 fd94 	bl	17148 <processOnSMS+0x2168>
			}
		}
	}
	else if (StringstartsWith(received_command,"SPPON"))
   15620:	4a83      	ldr	r2, [pc, #524]	; (15830 <processOnSMS+0x850>)
   15622:	68fb      	ldr	r3, [r7, #12]
   15624:	0011      	movs	r1, r2
   15626:	0018      	movs	r0, r3
   15628:	4b70      	ldr	r3, [pc, #448]	; (157ec <processOnSMS+0x80c>)
   1562a:	4798      	blx	r3
   1562c:	1e03      	subs	r3, r0, #0
   1562e:	d026      	beq.n	1567e <processOnSMS+0x69e>
	{
		saveSinglePhasingSettings(true);
   15630:	2001      	movs	r0, #1
   15632:	4b80      	ldr	r3, [pc, #512]	; (15834 <processOnSMS+0x854>)
   15634:	4798      	blx	r3
		incomingSMSProcessed=true;
   15636:	2328      	movs	r3, #40	; 0x28
   15638:	33ff      	adds	r3, #255	; 0xff
   1563a:	2208      	movs	r2, #8
   1563c:	4694      	mov	ip, r2
   1563e:	44bc      	add	ip, r7
   15640:	4463      	add	r3, ip
   15642:	2201      	movs	r2, #1
   15644:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
   15646:	4b6a      	ldr	r3, [pc, #424]	; (157f0 <processOnSMS+0x810>)
   15648:	2294      	movs	r2, #148	; 0x94
   1564a:	0052      	lsls	r2, r2, #1
   1564c:	4694      	mov	ip, r2
   1564e:	2208      	movs	r2, #8
   15650:	4690      	mov	r8, r2
   15652:	44b8      	add	r8, r7
   15654:	44c4      	add	ip, r8
   15656:	4463      	add	r3, ip
   15658:	781b      	ldrb	r3, [r3, #0]
   1565a:	2b00      	cmp	r3, #0
   1565c:	d101      	bne.n	15662 <processOnSMS+0x682>
   1565e:	f001 fd73 	bl	17148 <processOnSMS+0x2168>
		{
			strcpy(resep_msg,"SPP ON");
   15662:	230c      	movs	r3, #12
   15664:	2208      	movs	r2, #8
   15666:	4694      	mov	ip, r2
   15668:	44bc      	add	ip, r7
   1566a:	4463      	add	r3, ip
   1566c:	4a72      	ldr	r2, [pc, #456]	; (15838 <processOnSMS+0x858>)
   1566e:	6811      	ldr	r1, [r2, #0]
   15670:	6019      	str	r1, [r3, #0]
   15672:	8891      	ldrh	r1, [r2, #4]
   15674:	8099      	strh	r1, [r3, #4]
   15676:	7992      	ldrb	r2, [r2, #6]
   15678:	719a      	strb	r2, [r3, #6]
   1567a:	f001 fd65 	bl	17148 <processOnSMS+0x2168>
		}
	}
	else if (StringstartsWith(received_command,"SPPOFF"))
   1567e:	4a6f      	ldr	r2, [pc, #444]	; (1583c <processOnSMS+0x85c>)
   15680:	68fb      	ldr	r3, [r7, #12]
   15682:	0011      	movs	r1, r2
   15684:	0018      	movs	r0, r3
   15686:	4b59      	ldr	r3, [pc, #356]	; (157ec <processOnSMS+0x80c>)
   15688:	4798      	blx	r3
   1568a:	1e03      	subs	r3, r0, #0
   1568c:	d022      	beq.n	156d4 <processOnSMS+0x6f4>
	{
		saveSinglePhasingSettings(false);
   1568e:	2000      	movs	r0, #0
   15690:	4b68      	ldr	r3, [pc, #416]	; (15834 <processOnSMS+0x854>)
   15692:	4798      	blx	r3
		incomingSMSProcessed=true;
   15694:	2328      	movs	r3, #40	; 0x28
   15696:	33ff      	adds	r3, #255	; 0xff
   15698:	2208      	movs	r2, #8
   1569a:	4694      	mov	ip, r2
   1569c:	44bc      	add	ip, r7
   1569e:	4463      	add	r3, ip
   156a0:	2201      	movs	r2, #1
   156a2:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
   156a4:	4b52      	ldr	r3, [pc, #328]	; (157f0 <processOnSMS+0x810>)
   156a6:	2294      	movs	r2, #148	; 0x94
   156a8:	0052      	lsls	r2, r2, #1
   156aa:	4694      	mov	ip, r2
   156ac:	2208      	movs	r2, #8
   156ae:	4690      	mov	r8, r2
   156b0:	44b8      	add	r8, r7
   156b2:	44c4      	add	ip, r8
   156b4:	4463      	add	r3, ip
   156b6:	781b      	ldrb	r3, [r3, #0]
   156b8:	2b00      	cmp	r3, #0
   156ba:	d101      	bne.n	156c0 <processOnSMS+0x6e0>
   156bc:	f001 fd44 	bl	17148 <processOnSMS+0x2168>
		{
			strcpy(resep_msg,"SPP OFF");
   156c0:	230c      	movs	r3, #12
   156c2:	2208      	movs	r2, #8
   156c4:	4694      	mov	ip, r2
   156c6:	44bc      	add	ip, r7
   156c8:	4463      	add	r3, ip
   156ca:	4a5d      	ldr	r2, [pc, #372]	; (15840 <processOnSMS+0x860>)
   156cc:	ca03      	ldmia	r2!, {r0, r1}
   156ce:	c303      	stmia	r3!, {r0, r1}
   156d0:	f001 fd3a 	bl	17148 <processOnSMS+0x2168>
		}
	}
	else if(StringstartsWith(received_command,"SPPV"))
   156d4:	4a5b      	ldr	r2, [pc, #364]	; (15844 <processOnSMS+0x864>)
   156d6:	68fb      	ldr	r3, [r7, #12]
   156d8:	0011      	movs	r1, r2
   156da:	0018      	movs	r0, r3
   156dc:	4b43      	ldr	r3, [pc, #268]	; (157ec <processOnSMS+0x80c>)
   156de:	4798      	blx	r3
   156e0:	1e03      	subs	r3, r0, #0
   156e2:	d055      	beq.n	15790 <processOnSMS+0x7b0>
	{
		memmove(received_command,received_command+4,strlen(received_command));
   156e4:	68fb      	ldr	r3, [r7, #12]
   156e6:	1d1c      	adds	r4, r3, #4
   156e8:	68fb      	ldr	r3, [r7, #12]
   156ea:	0018      	movs	r0, r3
   156ec:	4b56      	ldr	r3, [pc, #344]	; (15848 <processOnSMS+0x868>)
   156ee:	4798      	blx	r3
   156f0:	0002      	movs	r2, r0
   156f2:	68fb      	ldr	r3, [r7, #12]
   156f4:	0021      	movs	r1, r4
   156f6:	0018      	movs	r0, r3
   156f8:	4b54      	ldr	r3, [pc, #336]	; (1584c <processOnSMS+0x86c>)
   156fa:	4798      	blx	r3
		uint8_t sppVoltage = atoi(received_command);
   156fc:	68fb      	ldr	r3, [r7, #12]
   156fe:	0018      	movs	r0, r3
   15700:	4b53      	ldr	r3, [pc, #332]	; (15850 <processOnSMS+0x870>)
   15702:	4798      	blx	r3
   15704:	0002      	movs	r2, r0
   15706:	2393      	movs	r3, #147	; 0x93
   15708:	005b      	lsls	r3, r3, #1
   1570a:	2108      	movs	r1, #8
   1570c:	468c      	mov	ip, r1
   1570e:	44bc      	add	ip, r7
   15710:	4463      	add	r3, ip
   15712:	701a      	strb	r2, [r3, #0]
		if(sppVoltage<20) sppVoltage=20;
   15714:	2393      	movs	r3, #147	; 0x93
   15716:	005b      	lsls	r3, r3, #1
   15718:	2208      	movs	r2, #8
   1571a:	4694      	mov	ip, r2
   1571c:	44bc      	add	ip, r7
   1571e:	4463      	add	r3, ip
   15720:	781b      	ldrb	r3, [r3, #0]
   15722:	2b13      	cmp	r3, #19
   15724:	d807      	bhi.n	15736 <processOnSMS+0x756>
   15726:	2393      	movs	r3, #147	; 0x93
   15728:	005b      	lsls	r3, r3, #1
   1572a:	2208      	movs	r2, #8
   1572c:	4694      	mov	ip, r2
   1572e:	44bc      	add	ip, r7
   15730:	4463      	add	r3, ip
   15732:	2214      	movs	r2, #20
   15734:	701a      	strb	r2, [r3, #0]
		if(sppVoltage>440) sppVoltage=440;
		saveSinglePhasingVoltage(sppVoltage);
   15736:	2393      	movs	r3, #147	; 0x93
   15738:	005b      	lsls	r3, r3, #1
   1573a:	2208      	movs	r2, #8
   1573c:	4694      	mov	ip, r2
   1573e:	44bc      	add	ip, r7
   15740:	4463      	add	r3, ip
   15742:	781b      	ldrb	r3, [r3, #0]
   15744:	b29b      	uxth	r3, r3
   15746:	0018      	movs	r0, r3
   15748:	4b42      	ldr	r3, [pc, #264]	; (15854 <processOnSMS+0x874>)
   1574a:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   1574c:	2328      	movs	r3, #40	; 0x28
   1574e:	33ff      	adds	r3, #255	; 0xff
   15750:	2208      	movs	r2, #8
   15752:	4694      	mov	ip, r2
   15754:	44bc      	add	ip, r7
   15756:	4463      	add	r3, ip
   15758:	2201      	movs	r2, #1
   1575a:	701a      	strb	r2, [r3, #0]
		
		
		if (response_sms_processed_cmd == true)
   1575c:	4b24      	ldr	r3, [pc, #144]	; (157f0 <processOnSMS+0x810>)
   1575e:	2294      	movs	r2, #148	; 0x94
   15760:	0052      	lsls	r2, r2, #1
   15762:	4694      	mov	ip, r2
   15764:	2208      	movs	r2, #8
   15766:	4690      	mov	r8, r2
   15768:	44b8      	add	r8, r7
   1576a:	44c4      	add	ip, r8
   1576c:	4463      	add	r3, ip
   1576e:	781b      	ldrb	r3, [r3, #0]
   15770:	2b00      	cmp	r3, #0
   15772:	d101      	bne.n	15778 <processOnSMS+0x798>
   15774:	f001 fce8 	bl	17148 <processOnSMS+0x2168>
		{
			strcpy(resep_msg,"SPP VOLT SET");
   15778:	230c      	movs	r3, #12
   1577a:	2208      	movs	r2, #8
   1577c:	4694      	mov	ip, r2
   1577e:	44bc      	add	ip, r7
   15780:	4463      	add	r3, ip
   15782:	4a35      	ldr	r2, [pc, #212]	; (15858 <processOnSMS+0x878>)
   15784:	ca13      	ldmia	r2!, {r0, r1, r4}
   15786:	c313      	stmia	r3!, {r0, r1, r4}
   15788:	7812      	ldrb	r2, [r2, #0]
   1578a:	701a      	strb	r2, [r3, #0]
   1578c:	f001 fcdc 	bl	17148 <processOnSMS+0x2168>
		}
	}
	else if(StringstartsWith(received_command,"SEQON"))
   15790:	4a32      	ldr	r2, [pc, #200]	; (1585c <processOnSMS+0x87c>)
   15792:	68fb      	ldr	r3, [r7, #12]
   15794:	0011      	movs	r1, r2
   15796:	0018      	movs	r0, r3
   15798:	4b14      	ldr	r3, [pc, #80]	; (157ec <processOnSMS+0x80c>)
   1579a:	4798      	blx	r3
   1579c:	1e03      	subs	r3, r0, #0
   1579e:	d063      	beq.n	15868 <processOnSMS+0x888>
	{
		savePhaseSequenceProtectionSettings(true);
   157a0:	2001      	movs	r0, #1
   157a2:	4b2f      	ldr	r3, [pc, #188]	; (15860 <processOnSMS+0x880>)
   157a4:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   157a6:	2328      	movs	r3, #40	; 0x28
   157a8:	33ff      	adds	r3, #255	; 0xff
   157aa:	2208      	movs	r2, #8
   157ac:	4694      	mov	ip, r2
   157ae:	44bc      	add	ip, r7
   157b0:	4463      	add	r3, ip
   157b2:	2201      	movs	r2, #1
   157b4:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   157b6:	4b0e      	ldr	r3, [pc, #56]	; (157f0 <processOnSMS+0x810>)
   157b8:	2294      	movs	r2, #148	; 0x94
   157ba:	0052      	lsls	r2, r2, #1
   157bc:	4694      	mov	ip, r2
   157be:	2208      	movs	r2, #8
   157c0:	4690      	mov	r8, r2
   157c2:	44b8      	add	r8, r7
   157c4:	44c4      	add	ip, r8
   157c6:	4463      	add	r3, ip
   157c8:	781b      	ldrb	r3, [r3, #0]
   157ca:	2b00      	cmp	r3, #0
   157cc:	d101      	bne.n	157d2 <processOnSMS+0x7f2>
   157ce:	f001 fcbb 	bl	17148 <processOnSMS+0x2168>
		{
			strcpy(resep_msg,"SEQP ON");
   157d2:	230c      	movs	r3, #12
   157d4:	2208      	movs	r2, #8
   157d6:	4694      	mov	ip, r2
   157d8:	44bc      	add	ip, r7
   157da:	4463      	add	r3, ip
   157dc:	4a21      	ldr	r2, [pc, #132]	; (15864 <processOnSMS+0x884>)
   157de:	ca03      	ldmia	r2!, {r0, r1}
   157e0:	c303      	stmia	r3!, {r0, r1}
   157e2:	f001 fcb1 	bl	17148 <processOnSMS+0x2168>
   157e6:	46c0      	nop			; (mov r8, r8)
   157e8:	0002abfc 	.word	0x0002abfc
   157ec:	00014201 	.word	0x00014201
   157f0:	fffffeda 	.word	0xfffffeda
   157f4:	2000062c 	.word	0x2000062c
   157f8:	0002ac00 	.word	0x0002ac00
   157fc:	0002ac14 	.word	0x0002ac14
   15800:	00029abd 	.word	0x00029abd
   15804:	0002ac1c 	.word	0x0002ac1c
   15808:	000112a5 	.word	0x000112a5
   1580c:	0001b60d 	.word	0x0001b60d
   15810:	0002ac24 	.word	0x0002ac24
   15814:	0002ac34 	.word	0x0002ac34
   15818:	0002ac3c 	.word	0x0002ac3c
   1581c:	0002ac50 	.word	0x0002ac50
   15820:	00011465 	.word	0x00011465
   15824:	0002ac58 	.word	0x0002ac58
   15828:	0002ac68 	.word	0x0002ac68
   1582c:	0002ac70 	.word	0x0002ac70
   15830:	0002ac84 	.word	0x0002ac84
   15834:	000115d5 	.word	0x000115d5
   15838:	0002ac8c 	.word	0x0002ac8c
   1583c:	0002ac94 	.word	0x0002ac94
   15840:	0002ac9c 	.word	0x0002ac9c
   15844:	0002aca4 	.word	0x0002aca4
   15848:	00029b47 	.word	0x00029b47
   1584c:	00029893 	.word	0x00029893
   15850:	0002979d 	.word	0x0002979d
   15854:	00011621 	.word	0x00011621
   15858:	0002acac 	.word	0x0002acac
   1585c:	0002acbc 	.word	0x0002acbc
   15860:	0001166d 	.word	0x0001166d
   15864:	0002acc4 	.word	0x0002acc4
		}
	}
	else if(StringstartsWith(received_command,"SEQOFF"))
   15868:	4adc      	ldr	r2, [pc, #880]	; (15bdc <processOnSMS+0xbfc>)
   1586a:	68fb      	ldr	r3, [r7, #12]
   1586c:	0011      	movs	r1, r2
   1586e:	0018      	movs	r0, r3
   15870:	4bdb      	ldr	r3, [pc, #876]	; (15be0 <processOnSMS+0xc00>)
   15872:	4798      	blx	r3
   15874:	1e03      	subs	r3, r0, #0
   15876:	d024      	beq.n	158c2 <processOnSMS+0x8e2>
	{
		savePhaseSequenceProtectionSettings(false);
   15878:	2000      	movs	r0, #0
   1587a:	4bda      	ldr	r3, [pc, #872]	; (15be4 <processOnSMS+0xc04>)
   1587c:	4798      	blx	r3

		incomingSMSProcessed=true;
   1587e:	2328      	movs	r3, #40	; 0x28
   15880:	33ff      	adds	r3, #255	; 0xff
   15882:	2208      	movs	r2, #8
   15884:	4694      	mov	ip, r2
   15886:	44bc      	add	ip, r7
   15888:	4463      	add	r3, ip
   1588a:	2201      	movs	r2, #1
   1588c:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
   1588e:	4bd6      	ldr	r3, [pc, #856]	; (15be8 <processOnSMS+0xc08>)
   15890:	2294      	movs	r2, #148	; 0x94
   15892:	0052      	lsls	r2, r2, #1
   15894:	4694      	mov	ip, r2
   15896:	2208      	movs	r2, #8
   15898:	4690      	mov	r8, r2
   1589a:	44b8      	add	r8, r7
   1589c:	44c4      	add	ip, r8
   1589e:	4463      	add	r3, ip
   158a0:	781b      	ldrb	r3, [r3, #0]
   158a2:	2b00      	cmp	r3, #0
   158a4:	d101      	bne.n	158aa <processOnSMS+0x8ca>
   158a6:	f001 fc4f 	bl	17148 <processOnSMS+0x2168>
		{
			strcpy(resep_msg,"SEQP OFF");
   158aa:	230c      	movs	r3, #12
   158ac:	2208      	movs	r2, #8
   158ae:	4694      	mov	ip, r2
   158b0:	44bc      	add	ip, r7
   158b2:	4463      	add	r3, ip
   158b4:	4acd      	ldr	r2, [pc, #820]	; (15bec <processOnSMS+0xc0c>)
   158b6:	ca03      	ldmia	r2!, {r0, r1}
   158b8:	c303      	stmia	r3!, {r0, r1}
   158ba:	7812      	ldrb	r2, [r2, #0]
   158bc:	701a      	strb	r2, [r3, #0]
   158be:	f001 fc43 	bl	17148 <processOnSMS+0x2168>
		}
	}
	else if (StringstartsWith(received_command,"DND"))
   158c2:	4acb      	ldr	r2, [pc, #812]	; (15bf0 <processOnSMS+0xc10>)
   158c4:	68fb      	ldr	r3, [r7, #12]
   158c6:	0011      	movs	r1, r2
   158c8:	0018      	movs	r0, r3
   158ca:	4bc5      	ldr	r3, [pc, #788]	; (15be0 <processOnSMS+0xc00>)
   158cc:	4798      	blx	r3
   158ce:	1e03      	subs	r3, r0, #0
   158d0:	d06c      	beq.n	159ac <processOnSMS+0x9cc>
	{
		if (strlen(received_command)>3)
   158d2:	68fb      	ldr	r3, [r7, #12]
   158d4:	0018      	movs	r0, r3
   158d6:	4bc7      	ldr	r3, [pc, #796]	; (15bf4 <processOnSMS+0xc14>)
   158d8:	4798      	blx	r3
   158da:	0003      	movs	r3, r0
   158dc:	2b03      	cmp	r3, #3
   158de:	d801      	bhi.n	158e4 <processOnSMS+0x904>
   158e0:	f001 fc32 	bl	17148 <processOnSMS+0x2168>
		{
			memmove(received_command,received_command+3,strlen(received_command));
   158e4:	68fb      	ldr	r3, [r7, #12]
   158e6:	1cdc      	adds	r4, r3, #3
   158e8:	68fb      	ldr	r3, [r7, #12]
   158ea:	0018      	movs	r0, r3
   158ec:	4bc1      	ldr	r3, [pc, #772]	; (15bf4 <processOnSMS+0xc14>)
   158ee:	4798      	blx	r3
   158f0:	0002      	movs	r2, r0
   158f2:	68fb      	ldr	r3, [r7, #12]
   158f4:	0021      	movs	r1, r4
   158f6:	0018      	movs	r0, r3
   158f8:	4bbf      	ldr	r3, [pc, #764]	; (15bf8 <processOnSMS+0xc18>)
   158fa:	4798      	blx	r3
			if(received_command[0]=='L' || received_command[0]=='S' || received_command[0]=='O')
   158fc:	68fb      	ldr	r3, [r7, #12]
   158fe:	781b      	ldrb	r3, [r3, #0]
   15900:	2b4c      	cmp	r3, #76	; 0x4c
   15902:	d009      	beq.n	15918 <processOnSMS+0x938>
   15904:	68fb      	ldr	r3, [r7, #12]
   15906:	781b      	ldrb	r3, [r3, #0]
   15908:	2b53      	cmp	r3, #83	; 0x53
   1590a:	d005      	beq.n	15918 <processOnSMS+0x938>
   1590c:	68fb      	ldr	r3, [r7, #12]
   1590e:	781b      	ldrb	r3, [r3, #0]
   15910:	2b4f      	cmp	r3, #79	; 0x4f
   15912:	d001      	beq.n	15918 <processOnSMS+0x938>
   15914:	f001 fc18 	bl	17148 <processOnSMS+0x2168>
			{
				saveDNDSettings((char)received_command);  //save specific RESPONSE settings
   15918:	68fb      	ldr	r3, [r7, #12]
   1591a:	b2db      	uxtb	r3, r3
   1591c:	0018      	movs	r0, r3
   1591e:	4bb7      	ldr	r3, [pc, #732]	; (15bfc <processOnSMS+0xc1c>)
   15920:	4798      	blx	r3
				
				incomingSMSProcessed=true;
   15922:	2328      	movs	r3, #40	; 0x28
   15924:	33ff      	adds	r3, #255	; 0xff
   15926:	2208      	movs	r2, #8
   15928:	4694      	mov	ip, r2
   1592a:	44bc      	add	ip, r7
   1592c:	4463      	add	r3, ip
   1592e:	2201      	movs	r2, #1
   15930:	701a      	strb	r2, [r3, #0]
				
				if (response_sms_processed_cmd == true)
   15932:	4bad      	ldr	r3, [pc, #692]	; (15be8 <processOnSMS+0xc08>)
   15934:	2294      	movs	r2, #148	; 0x94
   15936:	0052      	lsls	r2, r2, #1
   15938:	4694      	mov	ip, r2
   1593a:	2208      	movs	r2, #8
   1593c:	4690      	mov	r8, r2
   1593e:	44b8      	add	r8, r7
   15940:	44c4      	add	ip, r8
   15942:	4463      	add	r3, ip
   15944:	781b      	ldrb	r3, [r3, #0]
   15946:	2b00      	cmp	r3, #0
   15948:	d101      	bne.n	1594e <processOnSMS+0x96e>
   1594a:	f001 fbfd 	bl	17148 <processOnSMS+0x2168>
				{
					strcpy(resep_msg,"DND : ");
   1594e:	230c      	movs	r3, #12
   15950:	2208      	movs	r2, #8
   15952:	4694      	mov	ip, r2
   15954:	44bc      	add	ip, r7
   15956:	4463      	add	r3, ip
   15958:	4aa9      	ldr	r2, [pc, #676]	; (15c00 <processOnSMS+0xc20>)
   1595a:	6811      	ldr	r1, [r2, #0]
   1595c:	6019      	str	r1, [r3, #0]
   1595e:	8891      	ldrh	r1, [r2, #4]
   15960:	8099      	strh	r1, [r3, #4]
   15962:	7992      	ldrb	r2, [r2, #6]
   15964:	719a      	strb	r2, [r3, #6]
					strcat(resep_msg,received_command);
   15966:	68fa      	ldr	r2, [r7, #12]
   15968:	230c      	movs	r3, #12
   1596a:	2108      	movs	r1, #8
   1596c:	468c      	mov	ip, r1
   1596e:	44bc      	add	ip, r7
   15970:	4463      	add	r3, ip
   15972:	0011      	movs	r1, r2
   15974:	0018      	movs	r0, r3
   15976:	4ba3      	ldr	r3, [pc, #652]	; (15c04 <processOnSMS+0xc24>)
   15978:	4798      	blx	r3
					strcat(resep_msg," OK");
   1597a:	230c      	movs	r3, #12
   1597c:	2208      	movs	r2, #8
   1597e:	4694      	mov	ip, r2
   15980:	44bc      	add	ip, r7
   15982:	4463      	add	r3, ip
   15984:	0018      	movs	r0, r3
   15986:	4b9b      	ldr	r3, [pc, #620]	; (15bf4 <processOnSMS+0xc14>)
   15988:	4798      	blx	r3
   1598a:	0003      	movs	r3, r0
   1598c:	001a      	movs	r2, r3
   1598e:	230c      	movs	r3, #12
   15990:	2108      	movs	r1, #8
   15992:	468c      	mov	ip, r1
   15994:	44bc      	add	ip, r7
   15996:	4463      	add	r3, ip
   15998:	189a      	adds	r2, r3, r2
   1599a:	4b9b      	ldr	r3, [pc, #620]	; (15c08 <processOnSMS+0xc28>)
   1599c:	0010      	movs	r0, r2
   1599e:	0019      	movs	r1, r3
   159a0:	2304      	movs	r3, #4
   159a2:	001a      	movs	r2, r3
   159a4:	4b99      	ldr	r3, [pc, #612]	; (15c0c <processOnSMS+0xc2c>)
   159a6:	4798      	blx	r3
   159a8:	f001 fbce 	bl	17148 <processOnSMS+0x2168>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"FDBK"))
   159ac:	4a98      	ldr	r2, [pc, #608]	; (15c10 <processOnSMS+0xc30>)
   159ae:	68fb      	ldr	r3, [r7, #12]
   159b0:	0011      	movs	r1, r2
   159b2:	0018      	movs	r0, r3
   159b4:	4b8a      	ldr	r3, [pc, #552]	; (15be0 <processOnSMS+0xc00>)
   159b6:	4798      	blx	r3
   159b8:	1e03      	subs	r3, r0, #0
   159ba:	d072      	beq.n	15aa2 <processOnSMS+0xac2>
	{
		if (strlen(received_command)>4)
   159bc:	68fb      	ldr	r3, [r7, #12]
   159be:	0018      	movs	r0, r3
   159c0:	4b8c      	ldr	r3, [pc, #560]	; (15bf4 <processOnSMS+0xc14>)
   159c2:	4798      	blx	r3
   159c4:	0003      	movs	r3, r0
   159c6:	2b04      	cmp	r3, #4
   159c8:	d801      	bhi.n	159ce <processOnSMS+0x9ee>
   159ca:	f001 fbbd 	bl	17148 <processOnSMS+0x2168>
		{
			memmove(received_command,received_command+4,strlen(received_command));
   159ce:	68fb      	ldr	r3, [r7, #12]
   159d0:	1d1c      	adds	r4, r3, #4
   159d2:	68fb      	ldr	r3, [r7, #12]
   159d4:	0018      	movs	r0, r3
   159d6:	4b87      	ldr	r3, [pc, #540]	; (15bf4 <processOnSMS+0xc14>)
   159d8:	4798      	blx	r3
   159da:	0002      	movs	r2, r0
   159dc:	68fb      	ldr	r3, [r7, #12]
   159de:	0021      	movs	r1, r4
   159e0:	0018      	movs	r0, r3
   159e2:	4b85      	ldr	r3, [pc, #532]	; (15bf8 <processOnSMS+0xc18>)
   159e4:	4798      	blx	r3
			uint8_t fdbkValue = atoi(received_command);
   159e6:	68fb      	ldr	r3, [r7, #12]
   159e8:	0018      	movs	r0, r3
   159ea:	4b8a      	ldr	r3, [pc, #552]	; (15c14 <processOnSMS+0xc34>)
   159ec:	4798      	blx	r3
   159ee:	0002      	movs	r2, r0
   159f0:	2326      	movs	r3, #38	; 0x26
   159f2:	33ff      	adds	r3, #255	; 0xff
   159f4:	2108      	movs	r1, #8
   159f6:	468c      	mov	ip, r1
   159f8:	44bc      	add	ip, r7
   159fa:	4463      	add	r3, ip
   159fc:	701a      	strb	r2, [r3, #0]
			if (fdbkValue <= MOTORFEEDBACK_DETECTION_ON)
   159fe:	2326      	movs	r3, #38	; 0x26
   15a00:	33ff      	adds	r3, #255	; 0xff
   15a02:	2208      	movs	r2, #8
   15a04:	4694      	mov	ip, r2
   15a06:	44bc      	add	ip, r7
   15a08:	4463      	add	r3, ip
   15a0a:	781b      	ldrb	r3, [r3, #0]
   15a0c:	2b02      	cmp	r3, #2
   15a0e:	d901      	bls.n	15a14 <processOnSMS+0xa34>
   15a10:	f001 fb9a 	bl	17148 <processOnSMS+0x2168>
			{
				if (fdbkValue == MOTORFEEDBACK_DETECTION_CURRENT)
   15a14:	2326      	movs	r3, #38	; 0x26
   15a16:	33ff      	adds	r3, #255	; 0xff
   15a18:	2208      	movs	r2, #8
   15a1a:	4694      	mov	ip, r2
   15a1c:	44bc      	add	ip, r7
   15a1e:	4463      	add	r3, ip
   15a20:	781b      	ldrb	r3, [r3, #0]
   15a22:	2b01      	cmp	r3, #1
   15a24:	d10b      	bne.n	15a3e <processOnSMS+0xa5e>
				{
					if (!factory_settings_parameter_struct.ENABLE_CURRENT)
   15a26:	4b7c      	ldr	r3, [pc, #496]	; (15c18 <processOnSMS+0xc38>)
   15a28:	785b      	ldrb	r3, [r3, #1]
   15a2a:	2b00      	cmp	r3, #0
   15a2c:	d107      	bne.n	15a3e <processOnSMS+0xa5e>
					{
						fdbkValue=MOTORFEEDBACK_DETECTION_OFF;
   15a2e:	2326      	movs	r3, #38	; 0x26
   15a30:	33ff      	adds	r3, #255	; 0xff
   15a32:	2208      	movs	r2, #8
   15a34:	4694      	mov	ip, r2
   15a36:	44bc      	add	ip, r7
   15a38:	4463      	add	r3, ip
   15a3a:	2200      	movs	r2, #0
   15a3c:	701a      	strb	r2, [r3, #0]
					}
				}
				saveMotorFeedbackDetectionSettings(fdbkValue);
   15a3e:	2326      	movs	r3, #38	; 0x26
   15a40:	33ff      	adds	r3, #255	; 0xff
   15a42:	2208      	movs	r2, #8
   15a44:	4694      	mov	ip, r2
   15a46:	44bc      	add	ip, r7
   15a48:	4463      	add	r3, ip
   15a4a:	781b      	ldrb	r3, [r3, #0]
   15a4c:	0018      	movs	r0, r3
   15a4e:	4b73      	ldr	r3, [pc, #460]	; (15c1c <processOnSMS+0xc3c>)
   15a50:	4798      	blx	r3
				incomingSMSProcessed=true;
   15a52:	2328      	movs	r3, #40	; 0x28
   15a54:	33ff      	adds	r3, #255	; 0xff
   15a56:	2208      	movs	r2, #8
   15a58:	4694      	mov	ip, r2
   15a5a:	44bc      	add	ip, r7
   15a5c:	4463      	add	r3, ip
   15a5e:	2201      	movs	r2, #1
   15a60:	701a      	strb	r2, [r3, #0]
				
				if (response_sms_processed_cmd == true)
   15a62:	4b61      	ldr	r3, [pc, #388]	; (15be8 <processOnSMS+0xc08>)
   15a64:	2294      	movs	r2, #148	; 0x94
   15a66:	0052      	lsls	r2, r2, #1
   15a68:	4694      	mov	ip, r2
   15a6a:	2208      	movs	r2, #8
   15a6c:	4690      	mov	r8, r2
   15a6e:	44b8      	add	r8, r7
   15a70:	44c4      	add	ip, r8
   15a72:	4463      	add	r3, ip
   15a74:	781b      	ldrb	r3, [r3, #0]
   15a76:	2b00      	cmp	r3, #0
   15a78:	d101      	bne.n	15a7e <processOnSMS+0xa9e>
   15a7a:	f001 fb65 	bl	17148 <processOnSMS+0x2168>
				{
					sprintf(resep_msg,"FDBK : %d", fdbkValue);
   15a7e:	2326      	movs	r3, #38	; 0x26
   15a80:	33ff      	adds	r3, #255	; 0xff
   15a82:	2208      	movs	r2, #8
   15a84:	4694      	mov	ip, r2
   15a86:	44bc      	add	ip, r7
   15a88:	4463      	add	r3, ip
   15a8a:	781a      	ldrb	r2, [r3, #0]
   15a8c:	4964      	ldr	r1, [pc, #400]	; (15c20 <processOnSMS+0xc40>)
   15a8e:	230c      	movs	r3, #12
   15a90:	2008      	movs	r0, #8
   15a92:	4684      	mov	ip, r0
   15a94:	44bc      	add	ip, r7
   15a96:	4463      	add	r3, ip
   15a98:	0018      	movs	r0, r3
   15a9a:	4b62      	ldr	r3, [pc, #392]	; (15c24 <processOnSMS+0xc44>)
   15a9c:	4798      	blx	r3
   15a9e:	f001 fb53 	bl	17148 <processOnSMS+0x2168>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"UOMETHOD"))
   15aa2:	4a61      	ldr	r2, [pc, #388]	; (15c28 <processOnSMS+0xc48>)
   15aa4:	68fb      	ldr	r3, [r7, #12]
   15aa6:	0011      	movs	r1, r2
   15aa8:	0018      	movs	r0, r3
   15aaa:	4b4d      	ldr	r3, [pc, #308]	; (15be0 <processOnSMS+0xc00>)
   15aac:	4798      	blx	r3
   15aae:	1e03      	subs	r3, r0, #0
   15ab0:	d100      	bne.n	15ab4 <processOnSMS+0xad4>
   15ab2:	e0bf      	b.n	15c34 <processOnSMS+0xc54>
	{
		if (strlen(received_command)>8)
   15ab4:	68fb      	ldr	r3, [r7, #12]
   15ab6:	0018      	movs	r0, r3
   15ab8:	4b4e      	ldr	r3, [pc, #312]	; (15bf4 <processOnSMS+0xc14>)
   15aba:	4798      	blx	r3
   15abc:	0003      	movs	r3, r0
   15abe:	2b08      	cmp	r3, #8
   15ac0:	d801      	bhi.n	15ac6 <processOnSMS+0xae6>
   15ac2:	f001 fb41 	bl	17148 <processOnSMS+0x2168>
		{
			memmove(received_command,received_command+8,strlen(received_command));
   15ac6:	68fb      	ldr	r3, [r7, #12]
   15ac8:	3308      	adds	r3, #8
   15aca:	001c      	movs	r4, r3
   15acc:	68fb      	ldr	r3, [r7, #12]
   15ace:	0018      	movs	r0, r3
   15ad0:	4b48      	ldr	r3, [pc, #288]	; (15bf4 <processOnSMS+0xc14>)
   15ad2:	4798      	blx	r3
   15ad4:	0002      	movs	r2, r0
   15ad6:	68fb      	ldr	r3, [r7, #12]
   15ad8:	0021      	movs	r1, r4
   15ada:	0018      	movs	r0, r3
   15adc:	4b46      	ldr	r3, [pc, #280]	; (15bf8 <processOnSMS+0xc18>)
   15ade:	4798      	blx	r3
			
			if(factory_settings_parameter_struct.ENABLE_CURRENT)
   15ae0:	4b4d      	ldr	r3, [pc, #308]	; (15c18 <processOnSMS+0xc38>)
   15ae2:	785b      	ldrb	r3, [r3, #1]
   15ae4:	2b00      	cmp	r3, #0
   15ae6:	d101      	bne.n	15aec <processOnSMS+0xb0c>
   15ae8:	f001 fb2e 	bl	17148 <processOnSMS+0x2168>
			{
				uint8_t detectionMethod=0;
   15aec:	2392      	movs	r3, #146	; 0x92
   15aee:	005b      	lsls	r3, r3, #1
   15af0:	2208      	movs	r2, #8
   15af2:	4694      	mov	ip, r2
   15af4:	44bc      	add	ip, r7
   15af6:	4463      	add	r3, ip
   15af8:	2200      	movs	r2, #0
   15afa:	701a      	strb	r2, [r3, #0]
				if(received_command[0]=='C')
   15afc:	68fb      	ldr	r3, [r7, #12]
   15afe:	781b      	ldrb	r3, [r3, #0]
   15b00:	2b43      	cmp	r3, #67	; 0x43
   15b02:	d108      	bne.n	15b16 <processOnSMS+0xb36>
				{
					detectionMethod=MOTOR_UNDEROVER_DETECTION_CURRENT;
   15b04:	2392      	movs	r3, #146	; 0x92
   15b06:	005b      	lsls	r3, r3, #1
   15b08:	2208      	movs	r2, #8
   15b0a:	4694      	mov	ip, r2
   15b0c:	44bc      	add	ip, r7
   15b0e:	4463      	add	r3, ip
   15b10:	2202      	movs	r2, #2
   15b12:	701a      	strb	r2, [r3, #0]
   15b14:	e00b      	b.n	15b2e <processOnSMS+0xb4e>
				}
				else if(received_command[0]=='P')
   15b16:	68fb      	ldr	r3, [r7, #12]
   15b18:	781b      	ldrb	r3, [r3, #0]
   15b1a:	2b50      	cmp	r3, #80	; 0x50
   15b1c:	d107      	bne.n	15b2e <processOnSMS+0xb4e>
				{
					detectionMethod=MOTOR_UNDEROVER_DETECTION_POWER;
   15b1e:	2392      	movs	r3, #146	; 0x92
   15b20:	005b      	lsls	r3, r3, #1
   15b22:	2208      	movs	r2, #8
   15b24:	4694      	mov	ip, r2
   15b26:	44bc      	add	ip, r7
   15b28:	4463      	add	r3, ip
   15b2a:	2201      	movs	r2, #1
   15b2c:	701a      	strb	r2, [r3, #0]
				}
				
				if(detectionMethod!=0)
   15b2e:	2392      	movs	r3, #146	; 0x92
   15b30:	005b      	lsls	r3, r3, #1
   15b32:	2208      	movs	r2, #8
   15b34:	4694      	mov	ip, r2
   15b36:	44bc      	add	ip, r7
   15b38:	4463      	add	r3, ip
   15b3a:	781b      	ldrb	r3, [r3, #0]
   15b3c:	2b00      	cmp	r3, #0
   15b3e:	d101      	bne.n	15b44 <processOnSMS+0xb64>
   15b40:	f001 fb02 	bl	17148 <processOnSMS+0x2168>
				{
					saveUnderOverDetectionMethodSettings(detectionMethod);
   15b44:	2392      	movs	r3, #146	; 0x92
   15b46:	005b      	lsls	r3, r3, #1
   15b48:	2208      	movs	r2, #8
   15b4a:	4694      	mov	ip, r2
   15b4c:	44bc      	add	ip, r7
   15b4e:	4463      	add	r3, ip
   15b50:	781b      	ldrb	r3, [r3, #0]
   15b52:	0018      	movs	r0, r3
   15b54:	4b35      	ldr	r3, [pc, #212]	; (15c2c <processOnSMS+0xc4c>)
   15b56:	4798      	blx	r3
					incomingSMSProcessed=true;
   15b58:	2328      	movs	r3, #40	; 0x28
   15b5a:	33ff      	adds	r3, #255	; 0xff
   15b5c:	2208      	movs	r2, #8
   15b5e:	4694      	mov	ip, r2
   15b60:	44bc      	add	ip, r7
   15b62:	4463      	add	r3, ip
   15b64:	2201      	movs	r2, #1
   15b66:	701a      	strb	r2, [r3, #0]
					if (response_sms_processed_cmd == true)
   15b68:	4b1f      	ldr	r3, [pc, #124]	; (15be8 <processOnSMS+0xc08>)
   15b6a:	2294      	movs	r2, #148	; 0x94
   15b6c:	0052      	lsls	r2, r2, #1
   15b6e:	4694      	mov	ip, r2
   15b70:	2208      	movs	r2, #8
   15b72:	4690      	mov	r8, r2
   15b74:	44b8      	add	r8, r7
   15b76:	44c4      	add	ip, r8
   15b78:	4463      	add	r3, ip
   15b7a:	781b      	ldrb	r3, [r3, #0]
   15b7c:	2b00      	cmp	r3, #0
   15b7e:	d101      	bne.n	15b84 <processOnSMS+0xba4>
   15b80:	f001 fae2 	bl	17148 <processOnSMS+0x2168>
					{
						strcpy(resep_msg,"UOMETHOD : ");
   15b84:	230c      	movs	r3, #12
   15b86:	2208      	movs	r2, #8
   15b88:	4694      	mov	ip, r2
   15b8a:	44bc      	add	ip, r7
   15b8c:	4463      	add	r3, ip
   15b8e:	4a28      	ldr	r2, [pc, #160]	; (15c30 <processOnSMS+0xc50>)
   15b90:	ca13      	ldmia	r2!, {r0, r1, r4}
   15b92:	c313      	stmia	r3!, {r0, r1, r4}
						strcat(resep_msg,received_command);
   15b94:	68fa      	ldr	r2, [r7, #12]
   15b96:	230c      	movs	r3, #12
   15b98:	2108      	movs	r1, #8
   15b9a:	468c      	mov	ip, r1
   15b9c:	44bc      	add	ip, r7
   15b9e:	4463      	add	r3, ip
   15ba0:	0011      	movs	r1, r2
   15ba2:	0018      	movs	r0, r3
   15ba4:	4b17      	ldr	r3, [pc, #92]	; (15c04 <processOnSMS+0xc24>)
   15ba6:	4798      	blx	r3
						strcat(resep_msg," OK");
   15ba8:	230c      	movs	r3, #12
   15baa:	2208      	movs	r2, #8
   15bac:	4694      	mov	ip, r2
   15bae:	44bc      	add	ip, r7
   15bb0:	4463      	add	r3, ip
   15bb2:	0018      	movs	r0, r3
   15bb4:	4b0f      	ldr	r3, [pc, #60]	; (15bf4 <processOnSMS+0xc14>)
   15bb6:	4798      	blx	r3
   15bb8:	0003      	movs	r3, r0
   15bba:	001a      	movs	r2, r3
   15bbc:	230c      	movs	r3, #12
   15bbe:	2108      	movs	r1, #8
   15bc0:	468c      	mov	ip, r1
   15bc2:	44bc      	add	ip, r7
   15bc4:	4463      	add	r3, ip
   15bc6:	189a      	adds	r2, r3, r2
   15bc8:	4b0f      	ldr	r3, [pc, #60]	; (15c08 <processOnSMS+0xc28>)
   15bca:	0010      	movs	r0, r2
   15bcc:	0019      	movs	r1, r3
   15bce:	2304      	movs	r3, #4
   15bd0:	001a      	movs	r2, r3
   15bd2:	4b0e      	ldr	r3, [pc, #56]	; (15c0c <processOnSMS+0xc2c>)
   15bd4:	4798      	blx	r3
   15bd6:	f001 fab7 	bl	17148 <processOnSMS+0x2168>
   15bda:	46c0      	nop			; (mov r8, r8)
   15bdc:	0002accc 	.word	0x0002accc
   15be0:	00014201 	.word	0x00014201
   15be4:	0001166d 	.word	0x0001166d
   15be8:	fffffeda 	.word	0xfffffeda
   15bec:	0002acd4 	.word	0x0002acd4
   15bf0:	0002ace0 	.word	0x0002ace0
   15bf4:	00029b47 	.word	0x00029b47
   15bf8:	00029893 	.word	0x00029893
   15bfc:	0001133d 	.word	0x0001133d
   15c00:	0002ace4 	.word	0x0002ace4
   15c04:	00029b01 	.word	0x00029b01
   15c08:	0002acec 	.word	0x0002acec
   15c0c:	00029881 	.word	0x00029881
   15c10:	0002acf0 	.word	0x0002acf0
   15c14:	0002979d 	.word	0x0002979d
   15c18:	2000062c 	.word	0x2000062c
   15c1c:	00011795 	.word	0x00011795
   15c20:	0002acf8 	.word	0x0002acf8
   15c24:	00029abd 	.word	0x00029abd
   15c28:	0002ad04 	.word	0x0002ad04
   15c2c:	000116b9 	.word	0x000116b9
   15c30:	0002ad10 	.word	0x0002ad10
					}
				}
			}
		}
	}
	else if(StringstartsWith(received_command,"MVBYPON"))
   15c34:	4acf      	ldr	r2, [pc, #828]	; (15f74 <processOnSMS+0xf94>)
   15c36:	68fb      	ldr	r3, [r7, #12]
   15c38:	0011      	movs	r1, r2
   15c3a:	0018      	movs	r0, r3
   15c3c:	4bce      	ldr	r3, [pc, #824]	; (15f78 <processOnSMS+0xf98>)
   15c3e:	4798      	blx	r3
   15c40:	1e03      	subs	r3, r0, #0
   15c42:	d024      	beq.n	15c8e <processOnSMS+0xcae>
	{
		saveMotorVoltageBypassSettings(true);
   15c44:	2001      	movs	r0, #1
   15c46:	4bcd      	ldr	r3, [pc, #820]	; (15f7c <processOnSMS+0xf9c>)
   15c48:	4798      	blx	r3
		incomingSMSProcessed=true;
   15c4a:	2328      	movs	r3, #40	; 0x28
   15c4c:	33ff      	adds	r3, #255	; 0xff
   15c4e:	2208      	movs	r2, #8
   15c50:	4694      	mov	ip, r2
   15c52:	44bc      	add	ip, r7
   15c54:	4463      	add	r3, ip
   15c56:	2201      	movs	r2, #1
   15c58:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   15c5a:	4bc9      	ldr	r3, [pc, #804]	; (15f80 <processOnSMS+0xfa0>)
   15c5c:	2294      	movs	r2, #148	; 0x94
   15c5e:	0052      	lsls	r2, r2, #1
   15c60:	4694      	mov	ip, r2
   15c62:	2208      	movs	r2, #8
   15c64:	4690      	mov	r8, r2
   15c66:	44b8      	add	r8, r7
   15c68:	44c4      	add	ip, r8
   15c6a:	4463      	add	r3, ip
   15c6c:	781b      	ldrb	r3, [r3, #0]
   15c6e:	2b00      	cmp	r3, #0
   15c70:	d101      	bne.n	15c76 <processOnSMS+0xc96>
   15c72:	f001 fa69 	bl	17148 <processOnSMS+0x2168>
		{
			strcpy(resep_msg,"MOTOR VOLTAGE BYPASS ON");
   15c76:	230c      	movs	r3, #12
   15c78:	2208      	movs	r2, #8
   15c7a:	4694      	mov	ip, r2
   15c7c:	44bc      	add	ip, r7
   15c7e:	4463      	add	r3, ip
   15c80:	4ac0      	ldr	r2, [pc, #768]	; (15f84 <processOnSMS+0xfa4>)
   15c82:	ca13      	ldmia	r2!, {r0, r1, r4}
   15c84:	c313      	stmia	r3!, {r0, r1, r4}
   15c86:	ca13      	ldmia	r2!, {r0, r1, r4}
   15c88:	c313      	stmia	r3!, {r0, r1, r4}
   15c8a:	f001 fa5d 	bl	17148 <processOnSMS+0x2168>
		}
	}
	else if(StringstartsWith(received_command,"MVBYPOFF"))
   15c8e:	4abe      	ldr	r2, [pc, #760]	; (15f88 <processOnSMS+0xfa8>)
   15c90:	68fb      	ldr	r3, [r7, #12]
   15c92:	0011      	movs	r1, r2
   15c94:	0018      	movs	r0, r3
   15c96:	4bb8      	ldr	r3, [pc, #736]	; (15f78 <processOnSMS+0xf98>)
   15c98:	4798      	blx	r3
   15c9a:	1e03      	subs	r3, r0, #0
   15c9c:	d026      	beq.n	15cec <processOnSMS+0xd0c>
	{
		saveMotorVoltageBypassSettings(false);
   15c9e:	2000      	movs	r0, #0
   15ca0:	4bb6      	ldr	r3, [pc, #728]	; (15f7c <processOnSMS+0xf9c>)
   15ca2:	4798      	blx	r3
		incomingSMSProcessed=true;
   15ca4:	2328      	movs	r3, #40	; 0x28
   15ca6:	33ff      	adds	r3, #255	; 0xff
   15ca8:	2208      	movs	r2, #8
   15caa:	4694      	mov	ip, r2
   15cac:	44bc      	add	ip, r7
   15cae:	4463      	add	r3, ip
   15cb0:	2201      	movs	r2, #1
   15cb2:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   15cb4:	4bb2      	ldr	r3, [pc, #712]	; (15f80 <processOnSMS+0xfa0>)
   15cb6:	2294      	movs	r2, #148	; 0x94
   15cb8:	0052      	lsls	r2, r2, #1
   15cba:	4694      	mov	ip, r2
   15cbc:	2208      	movs	r2, #8
   15cbe:	4690      	mov	r8, r2
   15cc0:	44b8      	add	r8, r7
   15cc2:	44c4      	add	ip, r8
   15cc4:	4463      	add	r3, ip
   15cc6:	781b      	ldrb	r3, [r3, #0]
   15cc8:	2b00      	cmp	r3, #0
   15cca:	d101      	bne.n	15cd0 <processOnSMS+0xcf0>
   15ccc:	f001 fa3c 	bl	17148 <processOnSMS+0x2168>
		{
			strcpy(resep_msg,"MOTOR VOLTAGE BYPASS OFF");
   15cd0:	230c      	movs	r3, #12
   15cd2:	2208      	movs	r2, #8
   15cd4:	4694      	mov	ip, r2
   15cd6:	44bc      	add	ip, r7
   15cd8:	4463      	add	r3, ip
   15cda:	4aac      	ldr	r2, [pc, #688]	; (15f8c <processOnSMS+0xfac>)
   15cdc:	ca13      	ldmia	r2!, {r0, r1, r4}
   15cde:	c313      	stmia	r3!, {r0, r1, r4}
   15ce0:	ca13      	ldmia	r2!, {r0, r1, r4}
   15ce2:	c313      	stmia	r3!, {r0, r1, r4}
   15ce4:	7812      	ldrb	r2, [r2, #0]
   15ce6:	701a      	strb	r2, [r3, #0]
   15ce8:	f001 fa2e 	bl	17148 <processOnSMS+0x2168>
		}
	}
	else if(StringstartsWith(received_command,"MVBYPT"))
   15cec:	4aa8      	ldr	r2, [pc, #672]	; (15f90 <processOnSMS+0xfb0>)
   15cee:	68fb      	ldr	r3, [r7, #12]
   15cf0:	0011      	movs	r1, r2
   15cf2:	0018      	movs	r0, r3
   15cf4:	4ba0      	ldr	r3, [pc, #640]	; (15f78 <processOnSMS+0xf98>)
   15cf6:	4798      	blx	r3
   15cf8:	1e03      	subs	r3, r0, #0
   15cfa:	d06b      	beq.n	15dd4 <processOnSMS+0xdf4>
	{
		memmove(received_command,received_command+6,strlen(received_command));
   15cfc:	68fb      	ldr	r3, [r7, #12]
   15cfe:	1d9c      	adds	r4, r3, #6
   15d00:	68fb      	ldr	r3, [r7, #12]
   15d02:	0018      	movs	r0, r3
   15d04:	4ba3      	ldr	r3, [pc, #652]	; (15f94 <processOnSMS+0xfb4>)
   15d06:	4798      	blx	r3
   15d08:	0002      	movs	r2, r0
   15d0a:	68fb      	ldr	r3, [r7, #12]
   15d0c:	0021      	movs	r1, r4
   15d0e:	0018      	movs	r0, r3
   15d10:	4ba1      	ldr	r3, [pc, #644]	; (15f98 <processOnSMS+0xfb8>)
   15d12:	4798      	blx	r3
		uint8_t voltageBypTime = atoi(received_command);
   15d14:	68fb      	ldr	r3, [r7, #12]
   15d16:	0018      	movs	r0, r3
   15d18:	4ba0      	ldr	r3, [pc, #640]	; (15f9c <processOnSMS+0xfbc>)
   15d1a:	4798      	blx	r3
   15d1c:	0002      	movs	r2, r0
   15d1e:	2324      	movs	r3, #36	; 0x24
   15d20:	33ff      	adds	r3, #255	; 0xff
   15d22:	2108      	movs	r1, #8
   15d24:	468c      	mov	ip, r1
   15d26:	44bc      	add	ip, r7
   15d28:	4463      	add	r3, ip
   15d2a:	701a      	strb	r2, [r3, #0]
		if (voltageBypTime<10) voltageBypTime = 10;
   15d2c:	2324      	movs	r3, #36	; 0x24
   15d2e:	33ff      	adds	r3, #255	; 0xff
   15d30:	2208      	movs	r2, #8
   15d32:	4694      	mov	ip, r2
   15d34:	44bc      	add	ip, r7
   15d36:	4463      	add	r3, ip
   15d38:	781b      	ldrb	r3, [r3, #0]
   15d3a:	2b09      	cmp	r3, #9
   15d3c:	d807      	bhi.n	15d4e <processOnSMS+0xd6e>
   15d3e:	2324      	movs	r3, #36	; 0x24
   15d40:	33ff      	adds	r3, #255	; 0xff
   15d42:	2208      	movs	r2, #8
   15d44:	4694      	mov	ip, r2
   15d46:	44bc      	add	ip, r7
   15d48:	4463      	add	r3, ip
   15d4a:	220a      	movs	r2, #10
   15d4c:	701a      	strb	r2, [r3, #0]
		if (voltageBypTime>3600L) voltageBypTime=3600L;
		
		voltageBypTime=voltageBypTime*1000L;
   15d4e:	2324      	movs	r3, #36	; 0x24
   15d50:	33ff      	adds	r3, #255	; 0xff
   15d52:	2208      	movs	r2, #8
   15d54:	4694      	mov	ip, r2
   15d56:	44bc      	add	ip, r7
   15d58:	4463      	add	r3, ip
   15d5a:	2224      	movs	r2, #36	; 0x24
   15d5c:	32ff      	adds	r2, #255	; 0xff
   15d5e:	2108      	movs	r1, #8
   15d60:	468c      	mov	ip, r1
   15d62:	44bc      	add	ip, r7
   15d64:	4462      	add	r2, ip
   15d66:	7812      	ldrb	r2, [r2, #0]
   15d68:	2118      	movs	r1, #24
   15d6a:	4249      	negs	r1, r1
   15d6c:	434a      	muls	r2, r1
   15d6e:	701a      	strb	r2, [r3, #0]
		
		saveMotorVoltageBypasssTimeSettings(voltageBypTime);
   15d70:	2324      	movs	r3, #36	; 0x24
   15d72:	33ff      	adds	r3, #255	; 0xff
   15d74:	2208      	movs	r2, #8
   15d76:	4694      	mov	ip, r2
   15d78:	44bc      	add	ip, r7
   15d7a:	4463      	add	r3, ip
   15d7c:	781b      	ldrb	r3, [r3, #0]
   15d7e:	0018      	movs	r0, r3
   15d80:	4b87      	ldr	r3, [pc, #540]	; (15fa0 <processOnSMS+0xfc0>)
   15d82:	4798      	blx	r3
		incomingSMSProcessed=true;
   15d84:	2328      	movs	r3, #40	; 0x28
   15d86:	33ff      	adds	r3, #255	; 0xff
   15d88:	2208      	movs	r2, #8
   15d8a:	4694      	mov	ip, r2
   15d8c:	44bc      	add	ip, r7
   15d8e:	4463      	add	r3, ip
   15d90:	2201      	movs	r2, #1
   15d92:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   15d94:	4b7a      	ldr	r3, [pc, #488]	; (15f80 <processOnSMS+0xfa0>)
   15d96:	2294      	movs	r2, #148	; 0x94
   15d98:	0052      	lsls	r2, r2, #1
   15d9a:	4694      	mov	ip, r2
   15d9c:	2208      	movs	r2, #8
   15d9e:	4690      	mov	r8, r2
   15da0:	44b8      	add	r8, r7
   15da2:	44c4      	add	ip, r8
   15da4:	4463      	add	r3, ip
   15da6:	781b      	ldrb	r3, [r3, #0]
   15da8:	2b00      	cmp	r3, #0
   15daa:	d101      	bne.n	15db0 <processOnSMS+0xdd0>
   15dac:	f001 f9cc 	bl	17148 <processOnSMS+0x2168>
		{
			sprintf(resep_msg,"Motor Voltage Bypass Time Set to %d",voltageBypTime);
   15db0:	2324      	movs	r3, #36	; 0x24
   15db2:	33ff      	adds	r3, #255	; 0xff
   15db4:	2208      	movs	r2, #8
   15db6:	4694      	mov	ip, r2
   15db8:	44bc      	add	ip, r7
   15dba:	4463      	add	r3, ip
   15dbc:	781a      	ldrb	r2, [r3, #0]
   15dbe:	4979      	ldr	r1, [pc, #484]	; (15fa4 <processOnSMS+0xfc4>)
   15dc0:	230c      	movs	r3, #12
   15dc2:	2008      	movs	r0, #8
   15dc4:	4684      	mov	ip, r0
   15dc6:	44bc      	add	ip, r7
   15dc8:	4463      	add	r3, ip
   15dca:	0018      	movs	r0, r3
   15dcc:	4b76      	ldr	r3, [pc, #472]	; (15fa8 <processOnSMS+0xfc8>)
   15dce:	4798      	blx	r3
   15dd0:	f001 f9ba 	bl	17148 <processOnSMS+0x2168>
		}
	}
	else if (StringstartsWith(received_command,"RESP"))
   15dd4:	4a75      	ldr	r2, [pc, #468]	; (15fac <processOnSMS+0xfcc>)
   15dd6:	68fb      	ldr	r3, [r7, #12]
   15dd8:	0011      	movs	r1, r2
   15dda:	0018      	movs	r0, r3
   15ddc:	4b66      	ldr	r3, [pc, #408]	; (15f78 <processOnSMS+0xf98>)
   15dde:	4798      	blx	r3
   15de0:	1e03      	subs	r3, r0, #0
   15de2:	d06c      	beq.n	15ebe <processOnSMS+0xede>
	{
		if (strlen(received_command)>4)
   15de4:	68fb      	ldr	r3, [r7, #12]
   15de6:	0018      	movs	r0, r3
   15de8:	4b6a      	ldr	r3, [pc, #424]	; (15f94 <processOnSMS+0xfb4>)
   15dea:	4798      	blx	r3
   15dec:	0003      	movs	r3, r0
   15dee:	2b04      	cmp	r3, #4
   15df0:	d801      	bhi.n	15df6 <processOnSMS+0xe16>
   15df2:	f001 f9a9 	bl	17148 <processOnSMS+0x2168>
		{
			memmove(received_command,received_command+4,strlen(received_command));
   15df6:	68fb      	ldr	r3, [r7, #12]
   15df8:	1d1c      	adds	r4, r3, #4
   15dfa:	68fb      	ldr	r3, [r7, #12]
   15dfc:	0018      	movs	r0, r3
   15dfe:	4b65      	ldr	r3, [pc, #404]	; (15f94 <processOnSMS+0xfb4>)
   15e00:	4798      	blx	r3
   15e02:	0002      	movs	r2, r0
   15e04:	68fb      	ldr	r3, [r7, #12]
   15e06:	0021      	movs	r1, r4
   15e08:	0018      	movs	r0, r3
   15e0a:	4b63      	ldr	r3, [pc, #396]	; (15f98 <processOnSMS+0xfb8>)
   15e0c:	4798      	blx	r3
			if(received_command[0]=='C' || received_command[0]=='A' || received_command[0]=='T' || received_command[0]=='N')
   15e0e:	68fb      	ldr	r3, [r7, #12]
   15e10:	781b      	ldrb	r3, [r3, #0]
   15e12:	2b43      	cmp	r3, #67	; 0x43
   15e14:	d00d      	beq.n	15e32 <processOnSMS+0xe52>
   15e16:	68fb      	ldr	r3, [r7, #12]
   15e18:	781b      	ldrb	r3, [r3, #0]
   15e1a:	2b41      	cmp	r3, #65	; 0x41
   15e1c:	d009      	beq.n	15e32 <processOnSMS+0xe52>
   15e1e:	68fb      	ldr	r3, [r7, #12]
   15e20:	781b      	ldrb	r3, [r3, #0]
   15e22:	2b54      	cmp	r3, #84	; 0x54
   15e24:	d005      	beq.n	15e32 <processOnSMS+0xe52>
   15e26:	68fb      	ldr	r3, [r7, #12]
   15e28:	781b      	ldrb	r3, [r3, #0]
   15e2a:	2b4e      	cmp	r3, #78	; 0x4e
   15e2c:	d001      	beq.n	15e32 <processOnSMS+0xe52>
   15e2e:	f001 f98b 	bl	17148 <processOnSMS+0x2168>
			{
				saveResponseSettings((char)received_command);  //save specific RESPONSE settings
   15e32:	68fb      	ldr	r3, [r7, #12]
   15e34:	b2db      	uxtb	r3, r3
   15e36:	0018      	movs	r0, r3
   15e38:	4b5d      	ldr	r3, [pc, #372]	; (15fb0 <processOnSMS+0xfd0>)
   15e3a:	4798      	blx	r3
				
				incomingSMSProcessed=true;
   15e3c:	2328      	movs	r3, #40	; 0x28
   15e3e:	33ff      	adds	r3, #255	; 0xff
   15e40:	2208      	movs	r2, #8
   15e42:	4694      	mov	ip, r2
   15e44:	44bc      	add	ip, r7
   15e46:	4463      	add	r3, ip
   15e48:	2201      	movs	r2, #1
   15e4a:	701a      	strb	r2, [r3, #0]
				
				if (response_sms_processed_cmd == true)
   15e4c:	4b4c      	ldr	r3, [pc, #304]	; (15f80 <processOnSMS+0xfa0>)
   15e4e:	2294      	movs	r2, #148	; 0x94
   15e50:	0052      	lsls	r2, r2, #1
   15e52:	4694      	mov	ip, r2
   15e54:	2208      	movs	r2, #8
   15e56:	4690      	mov	r8, r2
   15e58:	44b8      	add	r8, r7
   15e5a:	44c4      	add	ip, r8
   15e5c:	4463      	add	r3, ip
   15e5e:	781b      	ldrb	r3, [r3, #0]
   15e60:	2b00      	cmp	r3, #0
   15e62:	d101      	bne.n	15e68 <processOnSMS+0xe88>
   15e64:	f001 f970 	bl	17148 <processOnSMS+0x2168>
				{
					strcpy(resep_msg,"RESP : ");
   15e68:	230c      	movs	r3, #12
   15e6a:	2208      	movs	r2, #8
   15e6c:	4694      	mov	ip, r2
   15e6e:	44bc      	add	ip, r7
   15e70:	4463      	add	r3, ip
   15e72:	4a50      	ldr	r2, [pc, #320]	; (15fb4 <processOnSMS+0xfd4>)
   15e74:	ca03      	ldmia	r2!, {r0, r1}
   15e76:	c303      	stmia	r3!, {r0, r1}
					strcat(resep_msg,received_command);
   15e78:	68fa      	ldr	r2, [r7, #12]
   15e7a:	230c      	movs	r3, #12
   15e7c:	2108      	movs	r1, #8
   15e7e:	468c      	mov	ip, r1
   15e80:	44bc      	add	ip, r7
   15e82:	4463      	add	r3, ip
   15e84:	0011      	movs	r1, r2
   15e86:	0018      	movs	r0, r3
   15e88:	4b4b      	ldr	r3, [pc, #300]	; (15fb8 <processOnSMS+0xfd8>)
   15e8a:	4798      	blx	r3
					strcat(resep_msg," OK");
   15e8c:	230c      	movs	r3, #12
   15e8e:	2208      	movs	r2, #8
   15e90:	4694      	mov	ip, r2
   15e92:	44bc      	add	ip, r7
   15e94:	4463      	add	r3, ip
   15e96:	0018      	movs	r0, r3
   15e98:	4b3e      	ldr	r3, [pc, #248]	; (15f94 <processOnSMS+0xfb4>)
   15e9a:	4798      	blx	r3
   15e9c:	0003      	movs	r3, r0
   15e9e:	001a      	movs	r2, r3
   15ea0:	230c      	movs	r3, #12
   15ea2:	2108      	movs	r1, #8
   15ea4:	468c      	mov	ip, r1
   15ea6:	44bc      	add	ip, r7
   15ea8:	4463      	add	r3, ip
   15eaa:	189a      	adds	r2, r3, r2
   15eac:	4b43      	ldr	r3, [pc, #268]	; (15fbc <processOnSMS+0xfdc>)
   15eae:	0010      	movs	r0, r2
   15eb0:	0019      	movs	r1, r3
   15eb2:	2304      	movs	r3, #4
   15eb4:	001a      	movs	r2, r3
   15eb6:	4b42      	ldr	r3, [pc, #264]	; (15fc0 <processOnSMS+0xfe0>)
   15eb8:	4798      	blx	r3
   15eba:	f001 f945 	bl	17148 <processOnSMS+0x2168>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"OVR"))
   15ebe:	4a41      	ldr	r2, [pc, #260]	; (15fc4 <processOnSMS+0xfe4>)
   15ec0:	68fb      	ldr	r3, [r7, #12]
   15ec2:	0011      	movs	r1, r2
   15ec4:	0018      	movs	r0, r3
   15ec6:	4b2c      	ldr	r3, [pc, #176]	; (15f78 <processOnSMS+0xf98>)
   15ec8:	4798      	blx	r3
   15eca:	1e03      	subs	r3, r0, #0
   15ecc:	d100      	bne.n	15ed0 <processOnSMS+0xef0>
   15ece:	e07f      	b.n	15fd0 <processOnSMS+0xff0>
	{
		memmove(received_command,received_command+3,strlen(received_command));
   15ed0:	68fb      	ldr	r3, [r7, #12]
   15ed2:	1cdc      	adds	r4, r3, #3
   15ed4:	68fb      	ldr	r3, [r7, #12]
   15ed6:	0018      	movs	r0, r3
   15ed8:	4b2e      	ldr	r3, [pc, #184]	; (15f94 <processOnSMS+0xfb4>)
   15eda:	4798      	blx	r3
   15edc:	0002      	movs	r2, r0
   15ede:	68fb      	ldr	r3, [r7, #12]
   15ee0:	0021      	movs	r1, r4
   15ee2:	0018      	movs	r0, r3
   15ee4:	4b2c      	ldr	r3, [pc, #176]	; (15f98 <processOnSMS+0xfb8>)
   15ee6:	4798      	blx	r3
		uint8_t ovr_per = atoi(received_command);
   15ee8:	68fb      	ldr	r3, [r7, #12]
   15eea:	0018      	movs	r0, r3
   15eec:	4b2b      	ldr	r3, [pc, #172]	; (15f9c <processOnSMS+0xfbc>)
   15eee:	4798      	blx	r3
   15ef0:	0002      	movs	r2, r0
   15ef2:	238b      	movs	r3, #139	; 0x8b
   15ef4:	005b      	lsls	r3, r3, #1
   15ef6:	2108      	movs	r1, #8
   15ef8:	468c      	mov	ip, r1
   15efa:	44bc      	add	ip, r7
   15efc:	4463      	add	r3, ip
   15efe:	701a      	strb	r2, [r3, #0]
		if(ovr_per>104)
   15f00:	238b      	movs	r3, #139	; 0x8b
   15f02:	005b      	lsls	r3, r3, #1
   15f04:	2208      	movs	r2, #8
   15f06:	4694      	mov	ip, r2
   15f08:	44bc      	add	ip, r7
   15f0a:	4463      	add	r3, ip
   15f0c:	781b      	ldrb	r3, [r3, #0]
   15f0e:	2b68      	cmp	r3, #104	; 0x68
   15f10:	d801      	bhi.n	15f16 <processOnSMS+0xf36>
   15f12:	f001 f919 	bl	17148 <processOnSMS+0x2168>
		{
			setOverloadPer(ovr_per);
   15f16:	238b      	movs	r3, #139	; 0x8b
   15f18:	005b      	lsls	r3, r3, #1
   15f1a:	2208      	movs	r2, #8
   15f1c:	4694      	mov	ip, r2
   15f1e:	44bc      	add	ip, r7
   15f20:	4463      	add	r3, ip
   15f22:	781b      	ldrb	r3, [r3, #0]
   15f24:	0018      	movs	r0, r3
   15f26:	4b28      	ldr	r3, [pc, #160]	; (15fc8 <processOnSMS+0xfe8>)
   15f28:	4798      	blx	r3
			incomingSMSProcessed=true;
   15f2a:	2328      	movs	r3, #40	; 0x28
   15f2c:	33ff      	adds	r3, #255	; 0xff
   15f2e:	2208      	movs	r2, #8
   15f30:	4694      	mov	ip, r2
   15f32:	44bc      	add	ip, r7
   15f34:	4463      	add	r3, ip
   15f36:	2201      	movs	r2, #1
   15f38:	701a      	strb	r2, [r3, #0]
			
			if (response_sms_processed_cmd == true)
   15f3a:	4b11      	ldr	r3, [pc, #68]	; (15f80 <processOnSMS+0xfa0>)
   15f3c:	2294      	movs	r2, #148	; 0x94
   15f3e:	0052      	lsls	r2, r2, #1
   15f40:	4694      	mov	ip, r2
   15f42:	2208      	movs	r2, #8
   15f44:	4690      	mov	r8, r2
   15f46:	44b8      	add	r8, r7
   15f48:	44c4      	add	ip, r8
   15f4a:	4463      	add	r3, ip
   15f4c:	781b      	ldrb	r3, [r3, #0]
   15f4e:	2b00      	cmp	r3, #0
   15f50:	d101      	bne.n	15f56 <processOnSMS+0xf76>
   15f52:	f001 f8f9 	bl	17148 <processOnSMS+0x2168>
			{
				strcpy(resep_msg,"OVR SET OK");
   15f56:	230c      	movs	r3, #12
   15f58:	2208      	movs	r2, #8
   15f5a:	4694      	mov	ip, r2
   15f5c:	44bc      	add	ip, r7
   15f5e:	4463      	add	r3, ip
   15f60:	4a1a      	ldr	r2, [pc, #104]	; (15fcc <processOnSMS+0xfec>)
   15f62:	ca03      	ldmia	r2!, {r0, r1}
   15f64:	c303      	stmia	r3!, {r0, r1}
   15f66:	8811      	ldrh	r1, [r2, #0]
   15f68:	8019      	strh	r1, [r3, #0]
   15f6a:	7892      	ldrb	r2, [r2, #2]
   15f6c:	709a      	strb	r2, [r3, #2]
   15f6e:	f001 f8eb 	bl	17148 <processOnSMS+0x2168>
   15f72:	46c0      	nop			; (mov r8, r8)
   15f74:	0002ad1c 	.word	0x0002ad1c
   15f78:	00014201 	.word	0x00014201
   15f7c:	00011705 	.word	0x00011705
   15f80:	fffffeda 	.word	0xfffffeda
   15f84:	0002ad24 	.word	0x0002ad24
   15f88:	0002ad3c 	.word	0x0002ad3c
   15f8c:	0002ad48 	.word	0x0002ad48
   15f90:	0002ad64 	.word	0x0002ad64
   15f94:	00029b47 	.word	0x00029b47
   15f98:	00029893 	.word	0x00029893
   15f9c:	0002979d 	.word	0x0002979d
   15fa0:	00011751 	.word	0x00011751
   15fa4:	0002ad6c 	.word	0x0002ad6c
   15fa8:	00029abd 	.word	0x00029abd
   15fac:	0002ad90 	.word	0x0002ad90
   15fb0:	00011389 	.word	0x00011389
   15fb4:	0002ad98 	.word	0x0002ad98
   15fb8:	00029b01 	.word	0x00029b01
   15fbc:	0002acec 	.word	0x0002acec
   15fc0:	00029881 	.word	0x00029881
   15fc4:	0002ada0 	.word	0x0002ada0
   15fc8:	000114fd 	.word	0x000114fd
   15fcc:	0002ada4 	.word	0x0002ada4
			}
		}
	}
	else if (StringstartsWith(received_command,"UNDR"))
   15fd0:	4aee      	ldr	r2, [pc, #952]	; (1638c <processOnSMS+0x13ac>)
   15fd2:	68fb      	ldr	r3, [r7, #12]
   15fd4:	0011      	movs	r1, r2
   15fd6:	0018      	movs	r0, r3
   15fd8:	4bed      	ldr	r3, [pc, #948]	; (16390 <processOnSMS+0x13b0>)
   15fda:	4798      	blx	r3
   15fdc:	1e03      	subs	r3, r0, #0
   15fde:	d057      	beq.n	16090 <processOnSMS+0x10b0>
	{
		memmove(received_command,received_command+4,strlen(received_command));
   15fe0:	68fb      	ldr	r3, [r7, #12]
   15fe2:	1d1c      	adds	r4, r3, #4
   15fe4:	68fb      	ldr	r3, [r7, #12]
   15fe6:	0018      	movs	r0, r3
   15fe8:	4bea      	ldr	r3, [pc, #936]	; (16394 <processOnSMS+0x13b4>)
   15fea:	4798      	blx	r3
   15fec:	0002      	movs	r2, r0
   15fee:	68fb      	ldr	r3, [r7, #12]
   15ff0:	0021      	movs	r1, r4
   15ff2:	0018      	movs	r0, r3
   15ff4:	4be8      	ldr	r3, [pc, #928]	; (16398 <processOnSMS+0x13b8>)
   15ff6:	4798      	blx	r3
		uint8_t undr_per = atoi(received_command);
   15ff8:	68fb      	ldr	r3, [r7, #12]
   15ffa:	0018      	movs	r0, r3
   15ffc:	4be7      	ldr	r3, [pc, #924]	; (1639c <processOnSMS+0x13bc>)
   15ffe:	4798      	blx	r3
   16000:	0002      	movs	r2, r0
   16002:	2316      	movs	r3, #22
   16004:	33ff      	adds	r3, #255	; 0xff
   16006:	2108      	movs	r1, #8
   16008:	468c      	mov	ip, r1
   1600a:	44bc      	add	ip, r7
   1600c:	4463      	add	r3, ip
   1600e:	701a      	strb	r2, [r3, #0]
		if(undr_per<98 && undr_per>0)
   16010:	2316      	movs	r3, #22
   16012:	33ff      	adds	r3, #255	; 0xff
   16014:	2208      	movs	r2, #8
   16016:	4694      	mov	ip, r2
   16018:	44bc      	add	ip, r7
   1601a:	4463      	add	r3, ip
   1601c:	781b      	ldrb	r3, [r3, #0]
   1601e:	2b61      	cmp	r3, #97	; 0x61
   16020:	d901      	bls.n	16026 <processOnSMS+0x1046>
   16022:	f001 f891 	bl	17148 <processOnSMS+0x2168>
   16026:	2316      	movs	r3, #22
   16028:	33ff      	adds	r3, #255	; 0xff
   1602a:	2208      	movs	r2, #8
   1602c:	4694      	mov	ip, r2
   1602e:	44bc      	add	ip, r7
   16030:	4463      	add	r3, ip
   16032:	781b      	ldrb	r3, [r3, #0]
   16034:	2b00      	cmp	r3, #0
   16036:	d101      	bne.n	1603c <processOnSMS+0x105c>
   16038:	f001 f886 	bl	17148 <processOnSMS+0x2168>
		{

			setUnderloadPer(undr_per);
   1603c:	2316      	movs	r3, #22
   1603e:	33ff      	adds	r3, #255	; 0xff
   16040:	2208      	movs	r2, #8
   16042:	4694      	mov	ip, r2
   16044:	44bc      	add	ip, r7
   16046:	4463      	add	r3, ip
   16048:	781b      	ldrb	r3, [r3, #0]
   1604a:	0018      	movs	r0, r3
   1604c:	4bd4      	ldr	r3, [pc, #848]	; (163a0 <processOnSMS+0x13c0>)
   1604e:	4798      	blx	r3

			incomingSMSProcessed=true;
   16050:	2328      	movs	r3, #40	; 0x28
   16052:	33ff      	adds	r3, #255	; 0xff
   16054:	2208      	movs	r2, #8
   16056:	4694      	mov	ip, r2
   16058:	44bc      	add	ip, r7
   1605a:	4463      	add	r3, ip
   1605c:	2201      	movs	r2, #1
   1605e:	701a      	strb	r2, [r3, #0]

			if (response_sms_processed_cmd == true)
   16060:	4bd0      	ldr	r3, [pc, #832]	; (163a4 <processOnSMS+0x13c4>)
   16062:	2294      	movs	r2, #148	; 0x94
   16064:	0052      	lsls	r2, r2, #1
   16066:	4694      	mov	ip, r2
   16068:	2208      	movs	r2, #8
   1606a:	4690      	mov	r8, r2
   1606c:	44b8      	add	r8, r7
   1606e:	44c4      	add	ip, r8
   16070:	4463      	add	r3, ip
   16072:	781b      	ldrb	r3, [r3, #0]
   16074:	2b00      	cmp	r3, #0
   16076:	d101      	bne.n	1607c <processOnSMS+0x109c>
   16078:	f001 f866 	bl	17148 <processOnSMS+0x2168>
			{
				strcpy(resep_msg,"UNDR SET OK");
   1607c:	230c      	movs	r3, #12
   1607e:	2208      	movs	r2, #8
   16080:	4694      	mov	ip, r2
   16082:	44bc      	add	ip, r7
   16084:	4463      	add	r3, ip
   16086:	4ac8      	ldr	r2, [pc, #800]	; (163a8 <processOnSMS+0x13c8>)
   16088:	ca13      	ldmia	r2!, {r0, r1, r4}
   1608a:	c313      	stmia	r3!, {r0, r1, r4}
   1608c:	f001 f85c 	bl	17148 <processOnSMS+0x2168>
			}
		}
	}
	else if (StringstartsWith(received_command,"ASTAT"))
   16090:	4ac6      	ldr	r2, [pc, #792]	; (163ac <processOnSMS+0x13cc>)
   16092:	68fb      	ldr	r3, [r7, #12]
   16094:	0011      	movs	r1, r2
   16096:	0018      	movs	r0, r3
   16098:	4bbd      	ldr	r3, [pc, #756]	; (16390 <processOnSMS+0x13b0>)
   1609a:	4798      	blx	r3
   1609c:	1e03      	subs	r3, r0, #0
   1609e:	d040      	beq.n	16122 <processOnSMS+0x1142>
	{
		if(factory_settings_parameter_struct.ENABLE_CURRENT)
   160a0:	4bc3      	ldr	r3, [pc, #780]	; (163b0 <processOnSMS+0x13d0>)
   160a2:	785b      	ldrb	r3, [r3, #1]
   160a4:	2b00      	cmp	r3, #0
   160a6:	d101      	bne.n	160ac <processOnSMS+0x10cc>
   160a8:	f001 f84e 	bl	17148 <processOnSMS+0x2168>
		{
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
			Analog_Parameter_Struct.Motor_Current_IntPart,
   160ac:	4bc1      	ldr	r3, [pc, #772]	; (163b4 <processOnSMS+0x13d4>)
   160ae:	8a9b      	ldrh	r3, [r3, #20]
   160b0:	b29b      	uxth	r3, r3
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
   160b2:	607b      	str	r3, [r7, #4]
			Analog_Parameter_Struct.Motor_Current_DecPart,
   160b4:	4bbf      	ldr	r3, [pc, #764]	; (163b4 <processOnSMS+0x13d4>)
   160b6:	8adb      	ldrh	r3, [r3, #22]
   160b8:	b29b      	uxth	r3, r3
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
   160ba:	603b      	str	r3, [r7, #0]
   160bc:	4bbe      	ldr	r3, [pc, #760]	; (163b8 <processOnSMS+0x13d8>)
   160be:	691a      	ldr	r2, [r3, #16]
   160c0:	4bbd      	ldr	r3, [pc, #756]	; (163b8 <processOnSMS+0x13d8>)
   160c2:	6959      	ldr	r1, [r3, #20]
   160c4:	4bbc      	ldr	r3, [pc, #752]	; (163b8 <processOnSMS+0x13d8>)
   160c6:	699b      	ldr	r3, [r3, #24]
   160c8:	4698      	mov	r8, r3
			user_settings_parameter_struct.normalLoadAddress,
			user_settings_parameter_struct.overloadAddress,
			user_settings_parameter_struct.underloadAddress,
			user_settings_parameter_struct.overloadPerAddress,
   160ca:	48bb      	ldr	r0, [pc, #748]	; (163b8 <processOnSMS+0x13d8>)
   160cc:	7f40      	ldrb	r0, [r0, #29]
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
   160ce:	0005      	movs	r5, r0
			user_settings_parameter_struct.underloadPerAddress);
   160d0:	48b9      	ldr	r0, [pc, #740]	; (163b8 <processOnSMS+0x13d8>)
   160d2:	7f00      	ldrb	r0, [r0, #28]
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
   160d4:	0006      	movs	r6, r0
   160d6:	4cb9      	ldr	r4, [pc, #740]	; (163bc <processOnSMS+0x13dc>)
   160d8:	200c      	movs	r0, #12
   160da:	2308      	movs	r3, #8
   160dc:	469c      	mov	ip, r3
   160de:	44bc      	add	ip, r7
   160e0:	4460      	add	r0, ip
   160e2:	9604      	str	r6, [sp, #16]
   160e4:	9503      	str	r5, [sp, #12]
   160e6:	4643      	mov	r3, r8
   160e8:	9302      	str	r3, [sp, #8]
   160ea:	9101      	str	r1, [sp, #4]
   160ec:	9200      	str	r2, [sp, #0]
   160ee:	683b      	ldr	r3, [r7, #0]
   160f0:	687a      	ldr	r2, [r7, #4]
   160f2:	0021      	movs	r1, r4
   160f4:	4cb2      	ldr	r4, [pc, #712]	; (163c0 <processOnSMS+0x13e0>)
   160f6:	47a0      	blx	r4
			response_sms_processed_cmd = true;
   160f8:	4baa      	ldr	r3, [pc, #680]	; (163a4 <processOnSMS+0x13c4>)
   160fa:	2294      	movs	r2, #148	; 0x94
   160fc:	0052      	lsls	r2, r2, #1
   160fe:	4694      	mov	ip, r2
   16100:	2208      	movs	r2, #8
   16102:	4690      	mov	r8, r2
   16104:	44b8      	add	r8, r7
   16106:	44c4      	add	ip, r8
   16108:	4463      	add	r3, ip
   1610a:	2201      	movs	r2, #1
   1610c:	701a      	strb	r2, [r3, #0]
			incomingSMSProcessed=true;
   1610e:	2328      	movs	r3, #40	; 0x28
   16110:	33ff      	adds	r3, #255	; 0xff
   16112:	2208      	movs	r2, #8
   16114:	4694      	mov	ip, r2
   16116:	44bc      	add	ip, r7
   16118:	4463      	add	r3, ip
   1611a:	2201      	movs	r2, #1
   1611c:	701a      	strb	r2, [r3, #0]
   1611e:	f001 f813 	bl	17148 <processOnSMS+0x2168>
		}

	}
	else if (StringstartsWith(received_command,"OVFON"))
   16122:	4aa8      	ldr	r2, [pc, #672]	; (163c4 <processOnSMS+0x13e4>)
   16124:	68fb      	ldr	r3, [r7, #12]
   16126:	0011      	movs	r1, r2
   16128:	0018      	movs	r0, r3
   1612a:	4b99      	ldr	r3, [pc, #612]	; (16390 <processOnSMS+0x13b0>)
   1612c:	4798      	blx	r3
   1612e:	1e03      	subs	r3, r0, #0
   16130:	d032      	beq.n	16198 <processOnSMS+0x11b8>
	{
		if (factory_settings_parameter_struct.ENABLE_WATER && !(factory_settings_parameter_struct.ENABLE_M2M))
   16132:	4b9f      	ldr	r3, [pc, #636]	; (163b0 <processOnSMS+0x13d0>)
   16134:	795b      	ldrb	r3, [r3, #5]
   16136:	2b00      	cmp	r3, #0
   16138:	d101      	bne.n	1613e <processOnSMS+0x115e>
   1613a:	f001 f805 	bl	17148 <processOnSMS+0x2168>
   1613e:	4b9c      	ldr	r3, [pc, #624]	; (163b0 <processOnSMS+0x13d0>)
   16140:	78db      	ldrb	r3, [r3, #3]
   16142:	2b00      	cmp	r3, #0
   16144:	d001      	beq.n	1614a <processOnSMS+0x116a>
   16146:	f000 ffff 	bl	17148 <processOnSMS+0x2168>
		{
			savePreventOverFlowSettings(true);  //set DND to False in EEPROM
   1614a:	2001      	movs	r0, #1
   1614c:	4b9e      	ldr	r3, [pc, #632]	; (163c8 <processOnSMS+0x13e8>)
   1614e:	4798      	blx	r3
			
			incomingSMSProcessed=true;
   16150:	2328      	movs	r3, #40	; 0x28
   16152:	33ff      	adds	r3, #255	; 0xff
   16154:	2208      	movs	r2, #8
   16156:	4694      	mov	ip, r2
   16158:	44bc      	add	ip, r7
   1615a:	4463      	add	r3, ip
   1615c:	2201      	movs	r2, #1
   1615e:	701a      	strb	r2, [r3, #0]
			
			if(response_sms_processed_cmd == true)
   16160:	4b90      	ldr	r3, [pc, #576]	; (163a4 <processOnSMS+0x13c4>)
   16162:	2294      	movs	r2, #148	; 0x94
   16164:	0052      	lsls	r2, r2, #1
   16166:	4694      	mov	ip, r2
   16168:	2208      	movs	r2, #8
   1616a:	4690      	mov	r8, r2
   1616c:	44b8      	add	r8, r7
   1616e:	44c4      	add	ip, r8
   16170:	4463      	add	r3, ip
   16172:	781b      	ldrb	r3, [r3, #0]
   16174:	2b00      	cmp	r3, #0
   16176:	d101      	bne.n	1617c <processOnSMS+0x119c>
   16178:	f000 ffe6 	bl	17148 <processOnSMS+0x2168>
			{
				strcpy(resep_msg,"PREVENT OVERFLOW SETTING ON");
   1617c:	230c      	movs	r3, #12
   1617e:	2208      	movs	r2, #8
   16180:	4694      	mov	ip, r2
   16182:	44bc      	add	ip, r7
   16184:	4463      	add	r3, ip
   16186:	4a91      	ldr	r2, [pc, #580]	; (163cc <processOnSMS+0x13ec>)
   16188:	ca13      	ldmia	r2!, {r0, r1, r4}
   1618a:	c313      	stmia	r3!, {r0, r1, r4}
   1618c:	ca13      	ldmia	r2!, {r0, r1, r4}
   1618e:	c313      	stmia	r3!, {r0, r1, r4}
   16190:	6812      	ldr	r2, [r2, #0]
   16192:	601a      	str	r2, [r3, #0]
   16194:	f000 ffd8 	bl	17148 <processOnSMS+0x2168>
			}
		}
	}
	else if (StringstartsWith(received_command,"OVFOFF"))
   16198:	4a8d      	ldr	r2, [pc, #564]	; (163d0 <processOnSMS+0x13f0>)
   1619a:	68fb      	ldr	r3, [r7, #12]
   1619c:	0011      	movs	r1, r2
   1619e:	0018      	movs	r0, r3
   161a0:	4b7b      	ldr	r3, [pc, #492]	; (16390 <processOnSMS+0x13b0>)
   161a2:	4798      	blx	r3
   161a4:	1e03      	subs	r3, r0, #0
   161a6:	d034      	beq.n	16212 <processOnSMS+0x1232>
	{
		if (factory_settings_parameter_struct.ENABLE_WATER && !(factory_settings_parameter_struct.ENABLE_M2M))
   161a8:	4b81      	ldr	r3, [pc, #516]	; (163b0 <processOnSMS+0x13d0>)
   161aa:	795b      	ldrb	r3, [r3, #5]
   161ac:	2b00      	cmp	r3, #0
   161ae:	d101      	bne.n	161b4 <processOnSMS+0x11d4>
   161b0:	f000 ffca 	bl	17148 <processOnSMS+0x2168>
   161b4:	4b7e      	ldr	r3, [pc, #504]	; (163b0 <processOnSMS+0x13d0>)
   161b6:	78db      	ldrb	r3, [r3, #3]
   161b8:	2b00      	cmp	r3, #0
   161ba:	d001      	beq.n	161c0 <processOnSMS+0x11e0>
   161bc:	f000 ffc4 	bl	17148 <processOnSMS+0x2168>
		{
			savePreventOverFlowSettings(false);  //set DND to False in EEPROM
   161c0:	2000      	movs	r0, #0
   161c2:	4b81      	ldr	r3, [pc, #516]	; (163c8 <processOnSMS+0x13e8>)
   161c4:	4798      	blx	r3

			incomingSMSProcessed=true;
   161c6:	2328      	movs	r3, #40	; 0x28
   161c8:	33ff      	adds	r3, #255	; 0xff
   161ca:	2208      	movs	r2, #8
   161cc:	4694      	mov	ip, r2
   161ce:	44bc      	add	ip, r7
   161d0:	4463      	add	r3, ip
   161d2:	2201      	movs	r2, #1
   161d4:	701a      	strb	r2, [r3, #0]

			if(response_sms_processed_cmd == true)
   161d6:	4b73      	ldr	r3, [pc, #460]	; (163a4 <processOnSMS+0x13c4>)
   161d8:	2294      	movs	r2, #148	; 0x94
   161da:	0052      	lsls	r2, r2, #1
   161dc:	4694      	mov	ip, r2
   161de:	2208      	movs	r2, #8
   161e0:	4690      	mov	r8, r2
   161e2:	44b8      	add	r8, r7
   161e4:	44c4      	add	ip, r8
   161e6:	4463      	add	r3, ip
   161e8:	781b      	ldrb	r3, [r3, #0]
   161ea:	2b00      	cmp	r3, #0
   161ec:	d101      	bne.n	161f2 <processOnSMS+0x1212>
   161ee:	f000 ffab 	bl	17148 <processOnSMS+0x2168>
			{
				strcpy(resep_msg,"PREVENT OVERFLOW SETTING OFF");
   161f2:	230c      	movs	r3, #12
   161f4:	2208      	movs	r2, #8
   161f6:	4694      	mov	ip, r2
   161f8:	44bc      	add	ip, r7
   161fa:	4463      	add	r3, ip
   161fc:	4a75      	ldr	r2, [pc, #468]	; (163d4 <processOnSMS+0x13f4>)
   161fe:	ca13      	ldmia	r2!, {r0, r1, r4}
   16200:	c313      	stmia	r3!, {r0, r1, r4}
   16202:	ca13      	ldmia	r2!, {r0, r1, r4}
   16204:	c313      	stmia	r3!, {r0, r1, r4}
   16206:	6811      	ldr	r1, [r2, #0]
   16208:	6019      	str	r1, [r3, #0]
   1620a:	7912      	ldrb	r2, [r2, #4]
   1620c:	711a      	strb	r2, [r3, #4]
   1620e:	f000 ff9b 	bl	17148 <processOnSMS+0x2168>
			}
		}
	}
	else if (StringstartsWith(received_command,"M2MON"))
   16212:	4a71      	ldr	r2, [pc, #452]	; (163d8 <processOnSMS+0x13f8>)
   16214:	68fb      	ldr	r3, [r7, #12]
   16216:	0011      	movs	r1, r2
   16218:	0018      	movs	r0, r3
   1621a:	4b5d      	ldr	r3, [pc, #372]	; (16390 <processOnSMS+0x13b0>)
   1621c:	4798      	blx	r3
   1621e:	1e03      	subs	r3, r0, #0
   16220:	d05c      	beq.n	162dc <processOnSMS+0x12fc>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   16222:	4b63      	ldr	r3, [pc, #396]	; (163b0 <processOnSMS+0x13d0>)
   16224:	78db      	ldrb	r3, [r3, #3]
   16226:	2b00      	cmp	r3, #0
   16228:	d101      	bne.n	1622e <processOnSMS+0x124e>
   1622a:	f000 ff8d 	bl	17148 <processOnSMS+0x2168>
		{
			incomingSMSProcessed=true;
   1622e:	2328      	movs	r3, #40	; 0x28
   16230:	33ff      	adds	r3, #255	; 0xff
   16232:	2208      	movs	r2, #8
   16234:	4694      	mov	ip, r2
   16236:	44bc      	add	ip, r7
   16238:	4463      	add	r3, ip
   1623a:	2201      	movs	r2, #1
   1623c:	701a      	strb	r2, [r3, #0]
			
			if(m2m_Numbers_struct.m2mRemotePresent)
   1623e:	4b67      	ldr	r3, [pc, #412]	; (163dc <processOnSMS+0x13fc>)
   16240:	78db      	ldrb	r3, [r3, #3]
   16242:	2b00      	cmp	r3, #0
   16244:	d02f      	beq.n	162a6 <processOnSMS+0x12c6>
			{
				if(!m2m_Numbers_struct.m2mRemoteVerified)
   16246:	4b65      	ldr	r3, [pc, #404]	; (163dc <processOnSMS+0x13fc>)
   16248:	791b      	ldrb	r3, [r3, #4]
   1624a:	2b00      	cmp	r3, #0
   1624c:	d10e      	bne.n	1626c <processOnSMS+0x128c>
				{
					response_sms_processed_cmd = false;
   1624e:	4b55      	ldr	r3, [pc, #340]	; (163a4 <processOnSMS+0x13c4>)
   16250:	2294      	movs	r2, #148	; 0x94
   16252:	0052      	lsls	r2, r2, #1
   16254:	4694      	mov	ip, r2
   16256:	2208      	movs	r2, #8
   16258:	4690      	mov	r8, r2
   1625a:	44b8      	add	r8, r7
   1625c:	44c4      	add	ip, r8
   1625e:	4463      	add	r3, ip
   16260:	2200      	movs	r2, #0
   16262:	701a      	strb	r2, [r3, #0]
					verifyRemoteNumber();
   16264:	4b5e      	ldr	r3, [pc, #376]	; (163e0 <processOnSMS+0x1400>)
   16266:	4798      	blx	r3
   16268:	f000 ff6e 	bl	17148 <processOnSMS+0x2168>
				}
				else
				{
					response_sms_processed_cmd = true;
   1626c:	4b4d      	ldr	r3, [pc, #308]	; (163a4 <processOnSMS+0x13c4>)
   1626e:	2294      	movs	r2, #148	; 0x94
   16270:	0052      	lsls	r2, r2, #1
   16272:	4694      	mov	ip, r2
   16274:	2208      	movs	r2, #8
   16276:	4690      	mov	r8, r2
   16278:	44b8      	add	r8, r7
   1627a:	44c4      	add	ip, r8
   1627c:	4463      	add	r3, ip
   1627e:	2201      	movs	r2, #1
   16280:	701a      	strb	r2, [r3, #0]
					strcpy(resep_msg,"M2M Turned On, Remote Number Already Verified");
   16282:	230c      	movs	r3, #12
   16284:	2208      	movs	r2, #8
   16286:	4694      	mov	ip, r2
   16288:	44bc      	add	ip, r7
   1628a:	4463      	add	r3, ip
   1628c:	4a55      	ldr	r2, [pc, #340]	; (163e4 <processOnSMS+0x1404>)
   1628e:	ca13      	ldmia	r2!, {r0, r1, r4}
   16290:	c313      	stmia	r3!, {r0, r1, r4}
   16292:	ca13      	ldmia	r2!, {r0, r1, r4}
   16294:	c313      	stmia	r3!, {r0, r1, r4}
   16296:	ca13      	ldmia	r2!, {r0, r1, r4}
   16298:	c313      	stmia	r3!, {r0, r1, r4}
   1629a:	ca03      	ldmia	r2!, {r0, r1}
   1629c:	c303      	stmia	r3!, {r0, r1}
   1629e:	8812      	ldrh	r2, [r2, #0]
   162a0:	801a      	strh	r2, [r3, #0]
   162a2:	f000 ff51 	bl	17148 <processOnSMS+0x2168>
				}
			}
			else
			{
				response_sms_processed_cmd=true;
   162a6:	4b3f      	ldr	r3, [pc, #252]	; (163a4 <processOnSMS+0x13c4>)
   162a8:	2294      	movs	r2, #148	; 0x94
   162aa:	0052      	lsls	r2, r2, #1
   162ac:	4694      	mov	ip, r2
   162ae:	2208      	movs	r2, #8
   162b0:	4690      	mov	r8, r2
   162b2:	44b8      	add	r8, r7
   162b4:	44c4      	add	ip, r8
   162b6:	4463      	add	r3, ip
   162b8:	2201      	movs	r2, #1
   162ba:	701a      	strb	r2, [r3, #0]
				strcpy(resep_msg,"Error: M2M Remote Number Not Present");
   162bc:	230c      	movs	r3, #12
   162be:	2208      	movs	r2, #8
   162c0:	4694      	mov	ip, r2
   162c2:	44bc      	add	ip, r7
   162c4:	4463      	add	r3, ip
   162c6:	4a48      	ldr	r2, [pc, #288]	; (163e8 <processOnSMS+0x1408>)
   162c8:	ca13      	ldmia	r2!, {r0, r1, r4}
   162ca:	c313      	stmia	r3!, {r0, r1, r4}
   162cc:	ca13      	ldmia	r2!, {r0, r1, r4}
   162ce:	c313      	stmia	r3!, {r0, r1, r4}
   162d0:	ca13      	ldmia	r2!, {r0, r1, r4}
   162d2:	c313      	stmia	r3!, {r0, r1, r4}
   162d4:	7812      	ldrb	r2, [r2, #0]
   162d6:	701a      	strb	r2, [r3, #0]
   162d8:	f000 ff36 	bl	17148 <processOnSMS+0x2168>
			}
		}
	}
	else if (StringstartsWith(received_command,"M2MOFF"))
   162dc:	4a43      	ldr	r2, [pc, #268]	; (163ec <processOnSMS+0x140c>)
   162de:	68fb      	ldr	r3, [r7, #12]
   162e0:	0011      	movs	r1, r2
   162e2:	0018      	movs	r0, r3
   162e4:	4b2a      	ldr	r3, [pc, #168]	; (16390 <processOnSMS+0x13b0>)
   162e6:	4798      	blx	r3
   162e8:	1e03      	subs	r3, r0, #0
   162ea:	d02a      	beq.n	16342 <processOnSMS+0x1362>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   162ec:	4b30      	ldr	r3, [pc, #192]	; (163b0 <processOnSMS+0x13d0>)
   162ee:	78db      	ldrb	r3, [r3, #3]
   162f0:	2b00      	cmp	r3, #0
   162f2:	d101      	bne.n	162f8 <processOnSMS+0x1318>
   162f4:	f000 ff28 	bl	17148 <processOnSMS+0x2168>
		{
			incomingSMSProcessed=true;
   162f8:	2328      	movs	r3, #40	; 0x28
   162fa:	33ff      	adds	r3, #255	; 0xff
   162fc:	2208      	movs	r2, #8
   162fe:	4694      	mov	ip, r2
   16300:	44bc      	add	ip, r7
   16302:	4463      	add	r3, ip
   16304:	2201      	movs	r2, #1
   16306:	701a      	strb	r2, [r3, #0]
			
			saveM2MSettings(false);
   16308:	2000      	movs	r0, #0
   1630a:	4b39      	ldr	r3, [pc, #228]	; (163f0 <processOnSMS+0x1410>)
   1630c:	4798      	blx	r3
			if(response_sms_processed_cmd == true)
   1630e:	4b25      	ldr	r3, [pc, #148]	; (163a4 <processOnSMS+0x13c4>)
   16310:	2294      	movs	r2, #148	; 0x94
   16312:	0052      	lsls	r2, r2, #1
   16314:	4694      	mov	ip, r2
   16316:	2208      	movs	r2, #8
   16318:	4690      	mov	r8, r2
   1631a:	44b8      	add	r8, r7
   1631c:	44c4      	add	ip, r8
   1631e:	4463      	add	r3, ip
   16320:	781b      	ldrb	r3, [r3, #0]
   16322:	2b00      	cmp	r3, #0
   16324:	d101      	bne.n	1632a <processOnSMS+0x134a>
   16326:	f000 ff0f 	bl	17148 <processOnSMS+0x2168>
			{
				strcpy(resep_msg,"M2M SETTING OFF");
   1632a:	230c      	movs	r3, #12
   1632c:	2208      	movs	r2, #8
   1632e:	4694      	mov	ip, r2
   16330:	44bc      	add	ip, r7
   16332:	4463      	add	r3, ip
   16334:	4a2f      	ldr	r2, [pc, #188]	; (163f4 <processOnSMS+0x1414>)
   16336:	ca13      	ldmia	r2!, {r0, r1, r4}
   16338:	c313      	stmia	r3!, {r0, r1, r4}
   1633a:	6812      	ldr	r2, [r2, #0]
   1633c:	601a      	str	r2, [r3, #0]
   1633e:	f000 ff03 	bl	17148 <processOnSMS+0x2168>
			}
		}
	}
	else if (StringstartsWith(received_command,"STATUS"))
   16342:	4a2d      	ldr	r2, [pc, #180]	; (163f8 <processOnSMS+0x1418>)
   16344:	68fb      	ldr	r3, [r7, #12]
   16346:	0011      	movs	r1, r2
   16348:	0018      	movs	r0, r3
   1634a:	4b11      	ldr	r3, [pc, #68]	; (16390 <processOnSMS+0x13b0>)
   1634c:	4798      	blx	r3
   1634e:	1e03      	subs	r3, r0, #0
   16350:	d056      	beq.n	16400 <processOnSMS+0x1420>
	{
		incomingSMSProcessed=true;
   16352:	2328      	movs	r3, #40	; 0x28
   16354:	33ff      	adds	r3, #255	; 0xff
   16356:	2208      	movs	r2, #8
   16358:	4694      	mov	ip, r2
   1635a:	44bc      	add	ip, r7
   1635c:	4463      	add	r3, ip
   1635e:	2201      	movs	r2, #1
   16360:	701a      	strb	r2, [r3, #0]
		response_sms_processed_cmd=true;
   16362:	4b10      	ldr	r3, [pc, #64]	; (163a4 <processOnSMS+0x13c4>)
   16364:	2294      	movs	r2, #148	; 0x94
   16366:	0052      	lsls	r2, r2, #1
   16368:	4694      	mov	ip, r2
   1636a:	2208      	movs	r2, #8
   1636c:	4690      	mov	r8, r2
   1636e:	44b8      	add	r8, r7
   16370:	44c4      	add	ip, r8
   16372:	4463      	add	r3, ip
   16374:	2201      	movs	r2, #1
   16376:	701a      	strb	r2, [r3, #0]
		
		buildStatusMessage(&resep_msg);
   16378:	230c      	movs	r3, #12
   1637a:	2208      	movs	r2, #8
   1637c:	4694      	mov	ip, r2
   1637e:	44bc      	add	ip, r7
   16380:	4463      	add	r3, ip
   16382:	0018      	movs	r0, r3
   16384:	4b1d      	ldr	r3, [pc, #116]	; (163fc <processOnSMS+0x141c>)
   16386:	4798      	blx	r3
   16388:	f000 fede 	bl	17148 <processOnSMS+0x2168>
   1638c:	0002adb0 	.word	0x0002adb0
   16390:	00014201 	.word	0x00014201
   16394:	00029b47 	.word	0x00029b47
   16398:	00029893 	.word	0x00029893
   1639c:	0002979d 	.word	0x0002979d
   163a0:	00011565 	.word	0x00011565
   163a4:	fffffeda 	.word	0xfffffeda
   163a8:	0002adb8 	.word	0x0002adb8
   163ac:	0002adc4 	.word	0x0002adc4
   163b0:	2000062c 	.word	0x2000062c
   163b4:	200006e8 	.word	0x200006e8
   163b8:	20000654 	.word	0x20000654
   163bc:	0002adcc 	.word	0x0002adcc
   163c0:	00029abd 	.word	0x00029abd
   163c4:	0002adf0 	.word	0x0002adf0
   163c8:	000114b1 	.word	0x000114b1
   163cc:	0002adf8 	.word	0x0002adf8
   163d0:	0002ae14 	.word	0x0002ae14
   163d4:	0002ae1c 	.word	0x0002ae1c
   163d8:	0002ae3c 	.word	0x0002ae3c
   163dc:	20000554 	.word	0x20000554
   163e0:	0001741d 	.word	0x0001741d
   163e4:	0002ae44 	.word	0x0002ae44
   163e8:	0002ae74 	.word	0x0002ae74
   163ec:	0002ae9c 	.word	0x0002ae9c
   163f0:	00010be1 	.word	0x00010be1
   163f4:	0002aea4 	.word	0x0002aea4
   163f8:	0002aeb4 	.word	0x0002aeb4
   163fc:	00017211 	.word	0x00017211
	}
	else if (StringstartsWith(received_command,"AMON") && (admin || alterNumber))
   16400:	4a87      	ldr	r2, [pc, #540]	; (16620 <processOnSMS+0x1640>)
   16402:	68fb      	ldr	r3, [r7, #12]
   16404:	0011      	movs	r1, r2
   16406:	0018      	movs	r0, r3
   16408:	4b86      	ldr	r3, [pc, #536]	; (16624 <processOnSMS+0x1644>)
   1640a:	4798      	blx	r3
   1640c:	1e03      	subs	r3, r0, #0
   1640e:	d05e      	beq.n	164ce <processOnSMS+0x14ee>
   16410:	4b85      	ldr	r3, [pc, #532]	; (16628 <processOnSMS+0x1648>)
   16412:	2294      	movs	r2, #148	; 0x94
   16414:	0052      	lsls	r2, r2, #1
   16416:	4694      	mov	ip, r2
   16418:	2208      	movs	r2, #8
   1641a:	4690      	mov	r8, r2
   1641c:	44b8      	add	r8, r7
   1641e:	44c4      	add	ip, r8
   16420:	4463      	add	r3, ip
   16422:	781b      	ldrb	r3, [r3, #0]
   16424:	2b00      	cmp	r3, #0
   16426:	d10b      	bne.n	16440 <processOnSMS+0x1460>
   16428:	4b80      	ldr	r3, [pc, #512]	; (1662c <processOnSMS+0x164c>)
   1642a:	2294      	movs	r2, #148	; 0x94
   1642c:	0052      	lsls	r2, r2, #1
   1642e:	4694      	mov	ip, r2
   16430:	2208      	movs	r2, #8
   16432:	4690      	mov	r8, r2
   16434:	44b8      	add	r8, r7
   16436:	44c4      	add	ip, r8
   16438:	4463      	add	r3, ip
   1643a:	781b      	ldrb	r3, [r3, #0]
   1643c:	2b00      	cmp	r3, #0
   1643e:	d046      	beq.n	164ce <processOnSMS+0x14ee>
	{
		incomingSMSProcessed=true;
   16440:	2328      	movs	r3, #40	; 0x28
   16442:	33ff      	adds	r3, #255	; 0xff
   16444:	2208      	movs	r2, #8
   16446:	4694      	mov	ip, r2
   16448:	44bc      	add	ip, r7
   1644a:	4463      	add	r3, ip
   1644c:	2201      	movs	r2, #1
   1644e:	701a      	strb	r2, [r3, #0]
		
		if (alternateNumber_struct.alterNumberPresent)
   16450:	4b77      	ldr	r3, [pc, #476]	; (16630 <processOnSMS+0x1650>)
   16452:	789b      	ldrb	r3, [r3, #2]
   16454:	2b00      	cmp	r3, #0
   16456:	d01c      	beq.n	16492 <processOnSMS+0x14b2>
		{
			saveAlterNumberSetting(true);
   16458:	2001      	movs	r0, #1
   1645a:	4b76      	ldr	r3, [pc, #472]	; (16634 <processOnSMS+0x1654>)
   1645c:	4798      	blx	r3
			if(response_sms_processed_cmd == true)
   1645e:	4b76      	ldr	r3, [pc, #472]	; (16638 <processOnSMS+0x1658>)
   16460:	2294      	movs	r2, #148	; 0x94
   16462:	0052      	lsls	r2, r2, #1
   16464:	4694      	mov	ip, r2
   16466:	2208      	movs	r2, #8
   16468:	4690      	mov	r8, r2
   1646a:	44b8      	add	r8, r7
   1646c:	44c4      	add	ip, r8
   1646e:	4463      	add	r3, ip
   16470:	781b      	ldrb	r3, [r3, #0]
   16472:	2b00      	cmp	r3, #0
   16474:	d101      	bne.n	1647a <processOnSMS+0x149a>
   16476:	f000 fe66 	bl	17146 <processOnSMS+0x2166>
			{
				strcpy(resep_msg,"ALTERNATE NUMBER ON");
   1647a:	230c      	movs	r3, #12
   1647c:	2208      	movs	r2, #8
   1647e:	4694      	mov	ip, r2
   16480:	44bc      	add	ip, r7
   16482:	4463      	add	r3, ip
   16484:	4a6d      	ldr	r2, [pc, #436]	; (1663c <processOnSMS+0x165c>)
   16486:	ca13      	ldmia	r2!, {r0, r1, r4}
   16488:	c313      	stmia	r3!, {r0, r1, r4}
   1648a:	ca03      	ldmia	r2!, {r0, r1}
   1648c:	c303      	stmia	r3!, {r0, r1}
		if (alternateNumber_struct.alterNumberPresent)
   1648e:	f000 fe5a 	bl	17146 <processOnSMS+0x2166>
			}
		}
		else
		{
			if(response_sms_processed_cmd == true)
   16492:	4b69      	ldr	r3, [pc, #420]	; (16638 <processOnSMS+0x1658>)
   16494:	2294      	movs	r2, #148	; 0x94
   16496:	0052      	lsls	r2, r2, #1
   16498:	4694      	mov	ip, r2
   1649a:	2208      	movs	r2, #8
   1649c:	4690      	mov	r8, r2
   1649e:	44b8      	add	r8, r7
   164a0:	44c4      	add	ip, r8
   164a2:	4463      	add	r3, ip
   164a4:	781b      	ldrb	r3, [r3, #0]
   164a6:	2b00      	cmp	r3, #0
   164a8:	d101      	bne.n	164ae <processOnSMS+0x14ce>
   164aa:	f000 fe4c 	bl	17146 <processOnSMS+0x2166>
			{
				strcpy(resep_msg,"ALTERNATE NUMBER NOT PRESENT");
   164ae:	230c      	movs	r3, #12
   164b0:	2208      	movs	r2, #8
   164b2:	4694      	mov	ip, r2
   164b4:	44bc      	add	ip, r7
   164b6:	4463      	add	r3, ip
   164b8:	4a61      	ldr	r2, [pc, #388]	; (16640 <processOnSMS+0x1660>)
   164ba:	ca13      	ldmia	r2!, {r0, r1, r4}
   164bc:	c313      	stmia	r3!, {r0, r1, r4}
   164be:	ca13      	ldmia	r2!, {r0, r1, r4}
   164c0:	c313      	stmia	r3!, {r0, r1, r4}
   164c2:	6811      	ldr	r1, [r2, #0]
   164c4:	6019      	str	r1, [r3, #0]
   164c6:	7912      	ldrb	r2, [r2, #4]
   164c8:	711a      	strb	r2, [r3, #4]
		if (alternateNumber_struct.alterNumberPresent)
   164ca:	f000 fe3c 	bl	17146 <processOnSMS+0x2166>
			}
		}
	}
	else if (StringstartsWith(received_command,"AMOFF"))
   164ce:	4a5d      	ldr	r2, [pc, #372]	; (16644 <processOnSMS+0x1664>)
   164d0:	68fb      	ldr	r3, [r7, #12]
   164d2:	0011      	movs	r1, r2
   164d4:	0018      	movs	r0, r3
   164d6:	4b53      	ldr	r3, [pc, #332]	; (16624 <processOnSMS+0x1644>)
   164d8:	4798      	blx	r3
   164da:	1e03      	subs	r3, r0, #0
   164dc:	d026      	beq.n	1652c <processOnSMS+0x154c>
	{
		saveAlterNumberSetting(false);
   164de:	2000      	movs	r0, #0
   164e0:	4b54      	ldr	r3, [pc, #336]	; (16634 <processOnSMS+0x1654>)
   164e2:	4798      	blx	r3
		incomingSMSProcessed=true;
   164e4:	2328      	movs	r3, #40	; 0x28
   164e6:	33ff      	adds	r3, #255	; 0xff
   164e8:	2208      	movs	r2, #8
   164ea:	4694      	mov	ip, r2
   164ec:	44bc      	add	ip, r7
   164ee:	4463      	add	r3, ip
   164f0:	2201      	movs	r2, #1
   164f2:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   164f4:	4b50      	ldr	r3, [pc, #320]	; (16638 <processOnSMS+0x1658>)
   164f6:	2294      	movs	r2, #148	; 0x94
   164f8:	0052      	lsls	r2, r2, #1
   164fa:	4694      	mov	ip, r2
   164fc:	2208      	movs	r2, #8
   164fe:	4690      	mov	r8, r2
   16500:	44b8      	add	r8, r7
   16502:	44c4      	add	ip, r8
   16504:	4463      	add	r3, ip
   16506:	781b      	ldrb	r3, [r3, #0]
   16508:	2b00      	cmp	r3, #0
   1650a:	d101      	bne.n	16510 <processOnSMS+0x1530>
   1650c:	f000 fe1c 	bl	17148 <processOnSMS+0x2168>
		{
			strcpy(resep_msg,"ALTERNATE MOBILE NUMBER OFF");
   16510:	230c      	movs	r3, #12
   16512:	2208      	movs	r2, #8
   16514:	4694      	mov	ip, r2
   16516:	44bc      	add	ip, r7
   16518:	4463      	add	r3, ip
   1651a:	4a4b      	ldr	r2, [pc, #300]	; (16648 <processOnSMS+0x1668>)
   1651c:	ca13      	ldmia	r2!, {r0, r1, r4}
   1651e:	c313      	stmia	r3!, {r0, r1, r4}
   16520:	ca13      	ldmia	r2!, {r0, r1, r4}
   16522:	c313      	stmia	r3!, {r0, r1, r4}
   16524:	6812      	ldr	r2, [r2, #0]
   16526:	601a      	str	r2, [r3, #0]
   16528:	f000 fe0e 	bl	17148 <processOnSMS+0x2168>
		}
	}
	else if (StringstartsWith(received_command,"NCOFF"))
   1652c:	4a47      	ldr	r2, [pc, #284]	; (1664c <processOnSMS+0x166c>)
   1652e:	68fb      	ldr	r3, [r7, #12]
   16530:	0011      	movs	r1, r2
   16532:	0018      	movs	r0, r3
   16534:	4b3b      	ldr	r3, [pc, #236]	; (16624 <processOnSMS+0x1644>)
   16536:	4798      	blx	r3
   16538:	1e03      	subs	r3, r0, #0
   1653a:	d029      	beq.n	16590 <processOnSMS+0x15b0>
	{
		saveNoCallSettings(false,0,0,0,0);
   1653c:	2300      	movs	r3, #0
   1653e:	9300      	str	r3, [sp, #0]
   16540:	2300      	movs	r3, #0
   16542:	2200      	movs	r2, #0
   16544:	2100      	movs	r1, #0
   16546:	2000      	movs	r0, #0
   16548:	4c41      	ldr	r4, [pc, #260]	; (16650 <processOnSMS+0x1670>)
   1654a:	47a0      	blx	r4
		incomingSMSProcessed=true;
   1654c:	2328      	movs	r3, #40	; 0x28
   1654e:	33ff      	adds	r3, #255	; 0xff
   16550:	2208      	movs	r2, #8
   16552:	4694      	mov	ip, r2
   16554:	44bc      	add	ip, r7
   16556:	4463      	add	r3, ip
   16558:	2201      	movs	r2, #1
   1655a:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
   1655c:	4b36      	ldr	r3, [pc, #216]	; (16638 <processOnSMS+0x1658>)
   1655e:	2294      	movs	r2, #148	; 0x94
   16560:	0052      	lsls	r2, r2, #1
   16562:	4694      	mov	ip, r2
   16564:	2208      	movs	r2, #8
   16566:	4690      	mov	r8, r2
   16568:	44b8      	add	r8, r7
   1656a:	44c4      	add	ip, r8
   1656c:	4463      	add	r3, ip
   1656e:	781b      	ldrb	r3, [r3, #0]
   16570:	2b00      	cmp	r3, #0
   16572:	d101      	bne.n	16578 <processOnSMS+0x1598>
   16574:	f000 fde8 	bl	17148 <processOnSMS+0x2168>
		{
			strcpy(resep_msg,"NO CALL SETTING OFF");
   16578:	230c      	movs	r3, #12
   1657a:	2208      	movs	r2, #8
   1657c:	4694      	mov	ip, r2
   1657e:	44bc      	add	ip, r7
   16580:	4463      	add	r3, ip
   16582:	4a34      	ldr	r2, [pc, #208]	; (16654 <processOnSMS+0x1674>)
   16584:	ca13      	ldmia	r2!, {r0, r1, r4}
   16586:	c313      	stmia	r3!, {r0, r1, r4}
   16588:	ca03      	ldmia	r2!, {r0, r1}
   1658a:	c303      	stmia	r3!, {r0, r1}
   1658c:	f000 fddc 	bl	17148 <processOnSMS+0x2168>
		}
	}
	else if (StringstartsWith(received_command,"GETTIME"))
   16590:	4a31      	ldr	r2, [pc, #196]	; (16658 <processOnSMS+0x1678>)
   16592:	68fb      	ldr	r3, [r7, #12]
   16594:	0011      	movs	r1, r2
   16596:	0018      	movs	r0, r3
   16598:	4b22      	ldr	r3, [pc, #136]	; (16624 <processOnSMS+0x1644>)
   1659a:	4798      	blx	r3
   1659c:	1e03      	subs	r3, r0, #0
   1659e:	d067      	beq.n	16670 <processOnSMS+0x1690>
	{
		uint8_t globalHours,globalMinutes;
		getSystemTime(&globalHours,&globalMinutes);
   165a0:	230a      	movs	r3, #10
   165a2:	2208      	movs	r2, #8
   165a4:	18ba      	adds	r2, r7, r2
   165a6:	18d2      	adds	r2, r2, r3
   165a8:	230b      	movs	r3, #11
   165aa:	2108      	movs	r1, #8
   165ac:	468c      	mov	ip, r1
   165ae:	44bc      	add	ip, r7
   165b0:	4463      	add	r3, ip
   165b2:	0011      	movs	r1, r2
   165b4:	0018      	movs	r0, r3
   165b6:	4b29      	ldr	r3, [pc, #164]	; (1665c <processOnSMS+0x167c>)
   165b8:	4798      	blx	r3
		
		sprintf(resep_msg,"TIME : %u:%u",
   165ba:	4b29      	ldr	r3, [pc, #164]	; (16660 <processOnSMS+0x1680>)
   165bc:	2294      	movs	r2, #148	; 0x94
   165be:	0052      	lsls	r2, r2, #1
   165c0:	4694      	mov	ip, r2
   165c2:	2208      	movs	r2, #8
   165c4:	4690      	mov	r8, r2
   165c6:	44b8      	add	r8, r7
   165c8:	44c4      	add	ip, r8
   165ca:	4463      	add	r3, ip
   165cc:	781b      	ldrb	r3, [r3, #0]
   165ce:	001a      	movs	r2, r3
   165d0:	4b24      	ldr	r3, [pc, #144]	; (16664 <processOnSMS+0x1684>)
   165d2:	2194      	movs	r1, #148	; 0x94
   165d4:	0049      	lsls	r1, r1, #1
   165d6:	468c      	mov	ip, r1
   165d8:	2108      	movs	r1, #8
   165da:	4688      	mov	r8, r1
   165dc:	44b8      	add	r8, r7
   165de:	44c4      	add	ip, r8
   165e0:	4463      	add	r3, ip
   165e2:	781b      	ldrb	r3, [r3, #0]
   165e4:	4920      	ldr	r1, [pc, #128]	; (16668 <processOnSMS+0x1688>)
   165e6:	200c      	movs	r0, #12
   165e8:	2408      	movs	r4, #8
   165ea:	46a4      	mov	ip, r4
   165ec:	44bc      	add	ip, r7
   165ee:	4460      	add	r0, ip
   165f0:	4c1e      	ldr	r4, [pc, #120]	; (1666c <processOnSMS+0x168c>)
   165f2:	47a0      	blx	r4
		globalHours,globalMinutes);

		incomingSMSProcessed=true;
   165f4:	2328      	movs	r3, #40	; 0x28
   165f6:	33ff      	adds	r3, #255	; 0xff
   165f8:	2208      	movs	r2, #8
   165fa:	4694      	mov	ip, r2
   165fc:	44bc      	add	ip, r7
   165fe:	4463      	add	r3, ip
   16600:	2201      	movs	r2, #1
   16602:	701a      	strb	r2, [r3, #0]

		response_sms_processed_cmd = true;
   16604:	4b0c      	ldr	r3, [pc, #48]	; (16638 <processOnSMS+0x1658>)
   16606:	2294      	movs	r2, #148	; 0x94
   16608:	0052      	lsls	r2, r2, #1
   1660a:	4694      	mov	ip, r2
   1660c:	2208      	movs	r2, #8
   1660e:	4690      	mov	r8, r2
   16610:	44b8      	add	r8, r7
   16612:	44c4      	add	ip, r8
   16614:	4463      	add	r3, ip
   16616:	2201      	movs	r2, #1
   16618:	701a      	strb	r2, [r3, #0]
   1661a:	f000 fd95 	bl	17148 <processOnSMS+0x2168>
   1661e:	46c0      	nop			; (mov r8, r8)
   16620:	0002ab24 	.word	0x0002ab24
   16624:	00014201 	.word	0x00014201
   16628:	fffffedb 	.word	0xfffffedb
   1662c:	fffffed9 	.word	0xfffffed9
   16630:	2000063c 	.word	0x2000063c
   16634:	000111e5 	.word	0x000111e5
   16638:	fffffeda 	.word	0xfffffeda
   1663c:	0002aebc 	.word	0x0002aebc
   16640:	0002aed0 	.word	0x0002aed0
   16644:	0002aef0 	.word	0x0002aef0
   16648:	0002aef8 	.word	0x0002aef8
   1664c:	0002af14 	.word	0x0002af14
   16650:	000113d5 	.word	0x000113d5
   16654:	0002af1c 	.word	0x0002af1c
   16658:	0002af30 	.word	0x0002af30
   1665c:	00017655 	.word	0x00017655
   16660:	fffffee3 	.word	0xfffffee3
   16664:	fffffee2 	.word	0xfffffee2
   16668:	0002af38 	.word	0x0002af38
   1666c:	00029abd 	.word	0x00029abd
	}
	else if (StringstartsWith(received_command,"SETTIME"))
   16670:	4ada      	ldr	r2, [pc, #872]	; (169dc <processOnSMS+0x19fc>)
   16672:	68fb      	ldr	r3, [r7, #12]
   16674:	0011      	movs	r1, r2
   16676:	0018      	movs	r0, r3
   16678:	4bd9      	ldr	r3, [pc, #868]	; (169e0 <processOnSMS+0x1a00>)
   1667a:	4798      	blx	r3
   1667c:	1e03      	subs	r3, r0, #0
   1667e:	d001      	beq.n	16684 <processOnSMS+0x16a4>
   16680:	f000 fd62 	bl	17148 <processOnSMS+0x2168>
		//todo: implement
		//set internal RTC of Either MCU or SIM800 to check no call time
		

	}
	else if (StringstartsWith(received_command,"NCTIME"))
   16684:	4ad7      	ldr	r2, [pc, #860]	; (169e4 <processOnSMS+0x1a04>)
   16686:	68fb      	ldr	r3, [r7, #12]
   16688:	0011      	movs	r1, r2
   1668a:	0018      	movs	r0, r3
   1668c:	4bd4      	ldr	r3, [pc, #848]	; (169e0 <processOnSMS+0x1a00>)
   1668e:	4798      	blx	r3
   16690:	1e03      	subs	r3, r0, #0
   16692:	d100      	bne.n	16696 <processOnSMS+0x16b6>
   16694:	e13c      	b.n	16910 <processOnSMS+0x1930>
	{
		char *ptrclcc;
		uint8_t startHH, startMM, stopHH, stopMM;

		ptrclcc = strtok(received_command,"-");
   16696:	4ad4      	ldr	r2, [pc, #848]	; (169e8 <processOnSMS+0x1a08>)
   16698:	68fb      	ldr	r3, [r7, #12]
   1669a:	0011      	movs	r1, r2
   1669c:	0018      	movs	r0, r3
   1669e:	4bd3      	ldr	r3, [pc, #844]	; (169ec <processOnSMS+0x1a0c>)
   166a0:	4798      	blx	r3
   166a2:	0003      	movs	r3, r0
   166a4:	2288      	movs	r2, #136	; 0x88
   166a6:	0052      	lsls	r2, r2, #1
   166a8:	2108      	movs	r1, #8
   166aa:	468c      	mov	ip, r1
   166ac:	44bc      	add	ip, r7
   166ae:	4462      	add	r2, ip
   166b0:	6013      	str	r3, [r2, #0]
		ptrclcc = strtok(NULL,":");
   166b2:	4bcf      	ldr	r3, [pc, #828]	; (169f0 <processOnSMS+0x1a10>)
   166b4:	0019      	movs	r1, r3
   166b6:	2000      	movs	r0, #0
   166b8:	4bcc      	ldr	r3, [pc, #816]	; (169ec <processOnSMS+0x1a0c>)
   166ba:	4798      	blx	r3
   166bc:	0003      	movs	r3, r0
   166be:	2288      	movs	r2, #136	; 0x88
   166c0:	0052      	lsls	r2, r2, #1
   166c2:	2108      	movs	r1, #8
   166c4:	468c      	mov	ip, r1
   166c6:	44bc      	add	ip, r7
   166c8:	4462      	add	r2, ip
   166ca:	6013      	str	r3, [r2, #0]
		startHH=atoi(*ptrclcc);
   166cc:	2388      	movs	r3, #136	; 0x88
   166ce:	005b      	lsls	r3, r3, #1
   166d0:	2208      	movs	r2, #8
   166d2:	4694      	mov	ip, r2
   166d4:	44bc      	add	ip, r7
   166d6:	4463      	add	r3, ip
   166d8:	681b      	ldr	r3, [r3, #0]
   166da:	781b      	ldrb	r3, [r3, #0]
   166dc:	0018      	movs	r0, r3
   166de:	4bc5      	ldr	r3, [pc, #788]	; (169f4 <processOnSMS+0x1a14>)
   166e0:	4798      	blx	r3
   166e2:	0002      	movs	r2, r0
   166e4:	2310      	movs	r3, #16
   166e6:	33ff      	adds	r3, #255	; 0xff
   166e8:	2108      	movs	r1, #8
   166ea:	468c      	mov	ip, r1
   166ec:	44bc      	add	ip, r7
   166ee:	4463      	add	r3, ip
   166f0:	701a      	strb	r2, [r3, #0]
		ptrclcc = strtok(NULL,"-");
   166f2:	4bbd      	ldr	r3, [pc, #756]	; (169e8 <processOnSMS+0x1a08>)
   166f4:	0019      	movs	r1, r3
   166f6:	2000      	movs	r0, #0
   166f8:	4bbc      	ldr	r3, [pc, #752]	; (169ec <processOnSMS+0x1a0c>)
   166fa:	4798      	blx	r3
   166fc:	0003      	movs	r3, r0
   166fe:	2288      	movs	r2, #136	; 0x88
   16700:	0052      	lsls	r2, r2, #1
   16702:	2108      	movs	r1, #8
   16704:	468c      	mov	ip, r1
   16706:	44bc      	add	ip, r7
   16708:	4462      	add	r2, ip
   1670a:	6013      	str	r3, [r2, #0]
		startMM=atoi(*ptrclcc);
   1670c:	2388      	movs	r3, #136	; 0x88
   1670e:	005b      	lsls	r3, r3, #1
   16710:	2208      	movs	r2, #8
   16712:	4694      	mov	ip, r2
   16714:	44bc      	add	ip, r7
   16716:	4463      	add	r3, ip
   16718:	681b      	ldr	r3, [r3, #0]
   1671a:	781b      	ldrb	r3, [r3, #0]
   1671c:	0018      	movs	r0, r3
   1671e:	4bb5      	ldr	r3, [pc, #724]	; (169f4 <processOnSMS+0x1a14>)
   16720:	4798      	blx	r3
   16722:	0002      	movs	r2, r0
   16724:	2387      	movs	r3, #135	; 0x87
   16726:	005b      	lsls	r3, r3, #1
   16728:	2108      	movs	r1, #8
   1672a:	468c      	mov	ip, r1
   1672c:	44bc      	add	ip, r7
   1672e:	4463      	add	r3, ip
   16730:	701a      	strb	r2, [r3, #0]
		ptrclcc = strtok(NULL,":");
   16732:	4baf      	ldr	r3, [pc, #700]	; (169f0 <processOnSMS+0x1a10>)
   16734:	0019      	movs	r1, r3
   16736:	2000      	movs	r0, #0
   16738:	4bac      	ldr	r3, [pc, #688]	; (169ec <processOnSMS+0x1a0c>)
   1673a:	4798      	blx	r3
   1673c:	0003      	movs	r3, r0
   1673e:	2288      	movs	r2, #136	; 0x88
   16740:	0052      	lsls	r2, r2, #1
   16742:	2108      	movs	r1, #8
   16744:	468c      	mov	ip, r1
   16746:	44bc      	add	ip, r7
   16748:	4462      	add	r2, ip
   1674a:	6013      	str	r3, [r2, #0]
		stopHH=atoi(*ptrclcc);
   1674c:	2388      	movs	r3, #136	; 0x88
   1674e:	005b      	lsls	r3, r3, #1
   16750:	2208      	movs	r2, #8
   16752:	4694      	mov	ip, r2
   16754:	44bc      	add	ip, r7
   16756:	4463      	add	r3, ip
   16758:	681b      	ldr	r3, [r3, #0]
   1675a:	781b      	ldrb	r3, [r3, #0]
   1675c:	0018      	movs	r0, r3
   1675e:	4ba5      	ldr	r3, [pc, #660]	; (169f4 <processOnSMS+0x1a14>)
   16760:	4798      	blx	r3
   16762:	0002      	movs	r2, r0
   16764:	230e      	movs	r3, #14
   16766:	33ff      	adds	r3, #255	; 0xff
   16768:	2108      	movs	r1, #8
   1676a:	468c      	mov	ip, r1
   1676c:	44bc      	add	ip, r7
   1676e:	4463      	add	r3, ip
   16770:	701a      	strb	r2, [r3, #0]
		ptrclcc = strtok(NULL,":");
   16772:	4b9f      	ldr	r3, [pc, #636]	; (169f0 <processOnSMS+0x1a10>)
   16774:	0019      	movs	r1, r3
   16776:	2000      	movs	r0, #0
   16778:	4b9c      	ldr	r3, [pc, #624]	; (169ec <processOnSMS+0x1a0c>)
   1677a:	4798      	blx	r3
   1677c:	0003      	movs	r3, r0
   1677e:	2288      	movs	r2, #136	; 0x88
   16780:	0052      	lsls	r2, r2, #1
   16782:	2108      	movs	r1, #8
   16784:	468c      	mov	ip, r1
   16786:	44bc      	add	ip, r7
   16788:	4462      	add	r2, ip
   1678a:	6013      	str	r3, [r2, #0]
		stopMM=atoi(*ptrclcc);
   1678c:	2388      	movs	r3, #136	; 0x88
   1678e:	005b      	lsls	r3, r3, #1
   16790:	2208      	movs	r2, #8
   16792:	4694      	mov	ip, r2
   16794:	44bc      	add	ip, r7
   16796:	4463      	add	r3, ip
   16798:	681b      	ldr	r3, [r3, #0]
   1679a:	781b      	ldrb	r3, [r3, #0]
   1679c:	0018      	movs	r0, r3
   1679e:	4b95      	ldr	r3, [pc, #596]	; (169f4 <processOnSMS+0x1a14>)
   167a0:	4798      	blx	r3
   167a2:	0002      	movs	r2, r0
   167a4:	2386      	movs	r3, #134	; 0x86
   167a6:	005b      	lsls	r3, r3, #1
   167a8:	2108      	movs	r1, #8
   167aa:	468c      	mov	ip, r1
   167ac:	44bc      	add	ip, r7
   167ae:	4463      	add	r3, ip
   167b0:	701a      	strb	r2, [r3, #0]

		if(startHH>=0 && startHH<24 && startMM>=0 && startMM<60)
   167b2:	2310      	movs	r3, #16
   167b4:	33ff      	adds	r3, #255	; 0xff
   167b6:	2208      	movs	r2, #8
   167b8:	4694      	mov	ip, r2
   167ba:	44bc      	add	ip, r7
   167bc:	4463      	add	r3, ip
   167be:	781b      	ldrb	r3, [r3, #0]
   167c0:	2b17      	cmp	r3, #23
   167c2:	d901      	bls.n	167c8 <processOnSMS+0x17e8>
   167c4:	f000 fcc0 	bl	17148 <processOnSMS+0x2168>
   167c8:	2387      	movs	r3, #135	; 0x87
   167ca:	005b      	lsls	r3, r3, #1
   167cc:	2208      	movs	r2, #8
   167ce:	4694      	mov	ip, r2
   167d0:	44bc      	add	ip, r7
   167d2:	4463      	add	r3, ip
   167d4:	781b      	ldrb	r3, [r3, #0]
   167d6:	2b3b      	cmp	r3, #59	; 0x3b
   167d8:	d901      	bls.n	167de <processOnSMS+0x17fe>
   167da:	f000 fcb5 	bl	17148 <processOnSMS+0x2168>
		{
			if(stopHH>=0 && stopHH<24 && stopMM>=0 && stopMM<60)
   167de:	230e      	movs	r3, #14
   167e0:	33ff      	adds	r3, #255	; 0xff
   167e2:	2208      	movs	r2, #8
   167e4:	4694      	mov	ip, r2
   167e6:	44bc      	add	ip, r7
   167e8:	4463      	add	r3, ip
   167ea:	781b      	ldrb	r3, [r3, #0]
   167ec:	2b17      	cmp	r3, #23
   167ee:	d901      	bls.n	167f4 <processOnSMS+0x1814>
   167f0:	f000 fcaa 	bl	17148 <processOnSMS+0x2168>
   167f4:	2386      	movs	r3, #134	; 0x86
   167f6:	005b      	lsls	r3, r3, #1
   167f8:	2208      	movs	r2, #8
   167fa:	4694      	mov	ip, r2
   167fc:	44bc      	add	ip, r7
   167fe:	4463      	add	r3, ip
   16800:	781b      	ldrb	r3, [r3, #0]
   16802:	2b3b      	cmp	r3, #59	; 0x3b
   16804:	d901      	bls.n	1680a <processOnSMS+0x182a>
   16806:	f000 fc9f 	bl	17148 <processOnSMS+0x2168>
			{
				incomingSMSProcessed=true;
   1680a:	2328      	movs	r3, #40	; 0x28
   1680c:	33ff      	adds	r3, #255	; 0xff
   1680e:	2208      	movs	r2, #8
   16810:	4694      	mov	ip, r2
   16812:	44bc      	add	ip, r7
   16814:	4463      	add	r3, ip
   16816:	2201      	movs	r2, #1
   16818:	701a      	strb	r2, [r3, #0]
				
				if(startHH==stopHH && startMM==stopMM)
   1681a:	2310      	movs	r3, #16
   1681c:	33ff      	adds	r3, #255	; 0xff
   1681e:	2208      	movs	r2, #8
   16820:	18ba      	adds	r2, r7, r2
   16822:	18d2      	adds	r2, r2, r3
   16824:	230e      	movs	r3, #14
   16826:	33ff      	adds	r3, #255	; 0xff
   16828:	2108      	movs	r1, #8
   1682a:	468c      	mov	ip, r1
   1682c:	44bc      	add	ip, r7
   1682e:	4463      	add	r3, ip
   16830:	7812      	ldrb	r2, [r2, #0]
   16832:	781b      	ldrb	r3, [r3, #0]
   16834:	429a      	cmp	r2, r3
   16836:	d130      	bne.n	1689a <processOnSMS+0x18ba>
   16838:	2387      	movs	r3, #135	; 0x87
   1683a:	005b      	lsls	r3, r3, #1
   1683c:	2208      	movs	r2, #8
   1683e:	18ba      	adds	r2, r7, r2
   16840:	18d2      	adds	r2, r2, r3
   16842:	2386      	movs	r3, #134	; 0x86
   16844:	005b      	lsls	r3, r3, #1
   16846:	2108      	movs	r1, #8
   16848:	468c      	mov	ip, r1
   1684a:	44bc      	add	ip, r7
   1684c:	4463      	add	r3, ip
   1684e:	7812      	ldrb	r2, [r2, #0]
   16850:	781b      	ldrb	r3, [r3, #0]
   16852:	429a      	cmp	r2, r3
   16854:	d121      	bne.n	1689a <processOnSMS+0x18ba>
				{
					saveNoCallSettings(false,0,0,0,0);
   16856:	2300      	movs	r3, #0
   16858:	9300      	str	r3, [sp, #0]
   1685a:	2300      	movs	r3, #0
   1685c:	2200      	movs	r2, #0
   1685e:	2100      	movs	r1, #0
   16860:	2000      	movs	r0, #0
   16862:	4c65      	ldr	r4, [pc, #404]	; (169f8 <processOnSMS+0x1a18>)
   16864:	47a0      	blx	r4
					if(response_sms_processed_cmd)
   16866:	4b65      	ldr	r3, [pc, #404]	; (169fc <processOnSMS+0x1a1c>)
   16868:	2294      	movs	r2, #148	; 0x94
   1686a:	0052      	lsls	r2, r2, #1
   1686c:	4694      	mov	ip, r2
   1686e:	2208      	movs	r2, #8
   16870:	4690      	mov	r8, r2
   16872:	44b8      	add	r8, r7
   16874:	44c4      	add	ip, r8
   16876:	4463      	add	r3, ip
   16878:	781b      	ldrb	r3, [r3, #0]
   1687a:	2b00      	cmp	r3, #0
   1687c:	d101      	bne.n	16882 <processOnSMS+0x18a2>
   1687e:	f000 fc63 	bl	17148 <processOnSMS+0x2168>
					{
						strcpy(resep_msg,"NO CALL SETTING OFF");
   16882:	230c      	movs	r3, #12
   16884:	2208      	movs	r2, #8
   16886:	4694      	mov	ip, r2
   16888:	44bc      	add	ip, r7
   1688a:	4463      	add	r3, ip
   1688c:	4a5c      	ldr	r2, [pc, #368]	; (16a00 <processOnSMS+0x1a20>)
   1688e:	ca13      	ldmia	r2!, {r0, r1, r4}
   16890:	c313      	stmia	r3!, {r0, r1, r4}
   16892:	ca03      	ldmia	r2!, {r0, r1}
   16894:	c303      	stmia	r3!, {r0, r1}
					if(response_sms_processed_cmd)
   16896:	f000 fc57 	bl	17148 <processOnSMS+0x2168>
					}
				}
				else
				{
					saveNoCallSettings(true,startHH,startMM,stopHH,stopMM);
   1689a:	230e      	movs	r3, #14
   1689c:	33ff      	adds	r3, #255	; 0xff
   1689e:	2208      	movs	r2, #8
   168a0:	4694      	mov	ip, r2
   168a2:	44bc      	add	ip, r7
   168a4:	4463      	add	r3, ip
   168a6:	7818      	ldrb	r0, [r3, #0]
   168a8:	2387      	movs	r3, #135	; 0x87
   168aa:	005b      	lsls	r3, r3, #1
   168ac:	2208      	movs	r2, #8
   168ae:	4694      	mov	ip, r2
   168b0:	44bc      	add	ip, r7
   168b2:	4463      	add	r3, ip
   168b4:	781a      	ldrb	r2, [r3, #0]
   168b6:	2310      	movs	r3, #16
   168b8:	33ff      	adds	r3, #255	; 0xff
   168ba:	2108      	movs	r1, #8
   168bc:	468c      	mov	ip, r1
   168be:	44bc      	add	ip, r7
   168c0:	4463      	add	r3, ip
   168c2:	7819      	ldrb	r1, [r3, #0]
   168c4:	2386      	movs	r3, #134	; 0x86
   168c6:	005b      	lsls	r3, r3, #1
   168c8:	2408      	movs	r4, #8
   168ca:	46a4      	mov	ip, r4
   168cc:	44bc      	add	ip, r7
   168ce:	4463      	add	r3, ip
   168d0:	781b      	ldrb	r3, [r3, #0]
   168d2:	9300      	str	r3, [sp, #0]
   168d4:	0003      	movs	r3, r0
   168d6:	2001      	movs	r0, #1
   168d8:	4c47      	ldr	r4, [pc, #284]	; (169f8 <processOnSMS+0x1a18>)
   168da:	47a0      	blx	r4
					if(response_sms_processed_cmd)
   168dc:	4b47      	ldr	r3, [pc, #284]	; (169fc <processOnSMS+0x1a1c>)
   168de:	2294      	movs	r2, #148	; 0x94
   168e0:	0052      	lsls	r2, r2, #1
   168e2:	4694      	mov	ip, r2
   168e4:	2208      	movs	r2, #8
   168e6:	4690      	mov	r8, r2
   168e8:	44b8      	add	r8, r7
   168ea:	44c4      	add	ip, r8
   168ec:	4463      	add	r3, ip
   168ee:	781b      	ldrb	r3, [r3, #0]
   168f0:	2b00      	cmp	r3, #0
   168f2:	d101      	bne.n	168f8 <processOnSMS+0x1918>
   168f4:	f000 fc28 	bl	17148 <processOnSMS+0x2168>
					{
						strcpy(resep_msg,"NO CALL TIMINGS SET");
   168f8:	230c      	movs	r3, #12
   168fa:	2208      	movs	r2, #8
   168fc:	4694      	mov	ip, r2
   168fe:	44bc      	add	ip, r7
   16900:	4463      	add	r3, ip
   16902:	4a40      	ldr	r2, [pc, #256]	; (16a04 <processOnSMS+0x1a24>)
   16904:	ca13      	ldmia	r2!, {r0, r1, r4}
   16906:	c313      	stmia	r3!, {r0, r1, r4}
   16908:	ca03      	ldmia	r2!, {r0, r1}
   1690a:	c303      	stmia	r3!, {r0, r1}
   1690c:	f000 fc1c 	bl	17148 <processOnSMS+0x2168>
					}
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"STAGE"))
   16910:	4a3d      	ldr	r2, [pc, #244]	; (16a08 <processOnSMS+0x1a28>)
   16912:	68fb      	ldr	r3, [r7, #12]
   16914:	0011      	movs	r1, r2
   16916:	0018      	movs	r0, r3
   16918:	4b31      	ldr	r3, [pc, #196]	; (169e0 <processOnSMS+0x1a00>)
   1691a:	4798      	blx	r3
   1691c:	1e03      	subs	r3, r0, #0
   1691e:	d100      	bne.n	16922 <processOnSMS+0x1942>
   16920:	e07e      	b.n	16a20 <processOnSMS+0x1a40>
	{
		memmove(received_command,received_command+5,strlen(received_command));
   16922:	68fb      	ldr	r3, [r7, #12]
   16924:	1d5c      	adds	r4, r3, #5
   16926:	68fb      	ldr	r3, [r7, #12]
   16928:	0018      	movs	r0, r3
   1692a:	4b38      	ldr	r3, [pc, #224]	; (16a0c <processOnSMS+0x1a2c>)
   1692c:	4798      	blx	r3
   1692e:	0002      	movs	r2, r0
   16930:	68fb      	ldr	r3, [r7, #12]
   16932:	0021      	movs	r1, r4
   16934:	0018      	movs	r0, r3
   16936:	4b36      	ldr	r3, [pc, #216]	; (16a10 <processOnSMS+0x1a30>)
   16938:	4798      	blx	r3
		uint16_t stageLevel = atoi(received_command);
   1693a:	68fb      	ldr	r3, [r7, #12]
   1693c:	0018      	movs	r0, r3
   1693e:	4b2d      	ldr	r3, [pc, #180]	; (169f4 <processOnSMS+0x1a14>)
   16940:	4798      	blx	r3
   16942:	0002      	movs	r2, r0
   16944:	2390      	movs	r3, #144	; 0x90
   16946:	005b      	lsls	r3, r3, #1
   16948:	2108      	movs	r1, #8
   1694a:	468c      	mov	ip, r1
   1694c:	44bc      	add	ip, r7
   1694e:	4463      	add	r3, ip
   16950:	801a      	strh	r2, [r3, #0]
		if (stageLevel < 0) stageLevel = 0;
		if (stageLevel > 5) stageLevel = 5;
   16952:	2390      	movs	r3, #144	; 0x90
   16954:	005b      	lsls	r3, r3, #1
   16956:	2208      	movs	r2, #8
   16958:	4694      	mov	ip, r2
   1695a:	44bc      	add	ip, r7
   1695c:	4463      	add	r3, ip
   1695e:	881b      	ldrh	r3, [r3, #0]
   16960:	2b05      	cmp	r3, #5
   16962:	d907      	bls.n	16974 <processOnSMS+0x1994>
   16964:	2390      	movs	r3, #144	; 0x90
   16966:	005b      	lsls	r3, r3, #1
   16968:	2208      	movs	r2, #8
   1696a:	4694      	mov	ip, r2
   1696c:	44bc      	add	ip, r7
   1696e:	4463      	add	r3, ip
   16970:	2205      	movs	r2, #5
   16972:	801a      	strh	r2, [r3, #0]
		saveEventStageSettings(stageLevel);  //Store in EEPROM the EVENT STAGE
   16974:	2390      	movs	r3, #144	; 0x90
   16976:	005b      	lsls	r3, r3, #1
   16978:	2208      	movs	r2, #8
   1697a:	4694      	mov	ip, r2
   1697c:	44bc      	add	ip, r7
   1697e:	4463      	add	r3, ip
   16980:	881b      	ldrh	r3, [r3, #0]
   16982:	b2db      	uxtb	r3, r3
   16984:	0018      	movs	r0, r3
   16986:	4b23      	ldr	r3, [pc, #140]	; (16a14 <processOnSMS+0x1a34>)
   16988:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   1698a:	2328      	movs	r3, #40	; 0x28
   1698c:	33ff      	adds	r3, #255	; 0xff
   1698e:	2208      	movs	r2, #8
   16990:	4694      	mov	ip, r2
   16992:	44bc      	add	ip, r7
   16994:	4463      	add	r3, ip
   16996:	2201      	movs	r2, #1
   16998:	701a      	strb	r2, [r3, #0]
		
		if(response_sms_processed_cmd)
   1699a:	4b18      	ldr	r3, [pc, #96]	; (169fc <processOnSMS+0x1a1c>)
   1699c:	2294      	movs	r2, #148	; 0x94
   1699e:	0052      	lsls	r2, r2, #1
   169a0:	4694      	mov	ip, r2
   169a2:	2208      	movs	r2, #8
   169a4:	4690      	mov	r8, r2
   169a6:	44b8      	add	r8, r7
   169a8:	44c4      	add	ip, r8
   169aa:	4463      	add	r3, ip
   169ac:	781b      	ldrb	r3, [r3, #0]
   169ae:	2b00      	cmp	r3, #0
   169b0:	d101      	bne.n	169b6 <processOnSMS+0x19d6>
   169b2:	f000 fbc9 	bl	17148 <processOnSMS+0x2168>
		{
			sprintf(resep_msg,"CALL STAGE SET TO : %d", stageLevel);
   169b6:	2390      	movs	r3, #144	; 0x90
   169b8:	005b      	lsls	r3, r3, #1
   169ba:	2208      	movs	r2, #8
   169bc:	4694      	mov	ip, r2
   169be:	44bc      	add	ip, r7
   169c0:	4463      	add	r3, ip
   169c2:	881a      	ldrh	r2, [r3, #0]
   169c4:	4914      	ldr	r1, [pc, #80]	; (16a18 <processOnSMS+0x1a38>)
   169c6:	230c      	movs	r3, #12
   169c8:	2008      	movs	r0, #8
   169ca:	4684      	mov	ip, r0
   169cc:	44bc      	add	ip, r7
   169ce:	4463      	add	r3, ip
   169d0:	0018      	movs	r0, r3
   169d2:	4b12      	ldr	r3, [pc, #72]	; (16a1c <processOnSMS+0x1a3c>)
   169d4:	4798      	blx	r3
   169d6:	f000 fbb7 	bl	17148 <processOnSMS+0x2168>
   169da:	46c0      	nop			; (mov r8, r8)
   169dc:	0002af48 	.word	0x0002af48
   169e0:	00014201 	.word	0x00014201
   169e4:	0002af50 	.word	0x0002af50
   169e8:	0002af58 	.word	0x0002af58
   169ec:	00029ba9 	.word	0x00029ba9
   169f0:	0002af5c 	.word	0x0002af5c
   169f4:	0002979d 	.word	0x0002979d
   169f8:	000113d5 	.word	0x000113d5
   169fc:	fffffeda 	.word	0xfffffeda
   16a00:	0002af1c 	.word	0x0002af1c
   16a04:	0002af60 	.word	0x0002af60
   16a08:	0002af74 	.word	0x0002af74
   16a0c:	00029b47 	.word	0x00029b47
   16a10:	00029893 	.word	0x00029893
   16a14:	00011a1d 	.word	0x00011a1d
   16a18:	0002af7c 	.word	0x0002af7c
   16a1c:	00029abd 	.word	0x00029abd
		}
	}
	else if (StringstartsWith(received_command,"STARTIME"))
   16a20:	4aa5      	ldr	r2, [pc, #660]	; (16cb8 <processOnSMS+0x1cd8>)
   16a22:	68fb      	ldr	r3, [r7, #12]
   16a24:	0011      	movs	r1, r2
   16a26:	0018      	movs	r0, r3
   16a28:	4ba4      	ldr	r3, [pc, #656]	; (16cbc <processOnSMS+0x1cdc>)
   16a2a:	4798      	blx	r3
   16a2c:	1e03      	subs	r3, r0, #0
   16a2e:	d06b      	beq.n	16b08 <processOnSMS+0x1b28>
	{
		memmove(received_command,received_command+8,strlen(received_command));
   16a30:	68fb      	ldr	r3, [r7, #12]
   16a32:	3308      	adds	r3, #8
   16a34:	001c      	movs	r4, r3
   16a36:	68fb      	ldr	r3, [r7, #12]
   16a38:	0018      	movs	r0, r3
   16a3a:	4ba1      	ldr	r3, [pc, #644]	; (16cc0 <processOnSMS+0x1ce0>)
   16a3c:	4798      	blx	r3
   16a3e:	0002      	movs	r2, r0
   16a40:	68fb      	ldr	r3, [r7, #12]
   16a42:	0021      	movs	r1, r4
   16a44:	0018      	movs	r0, r3
   16a46:	4b9f      	ldr	r3, [pc, #636]	; (16cc4 <processOnSMS+0x1ce4>)
   16a48:	4798      	blx	r3
		uint16_t STARTIME = atoi(received_command);
   16a4a:	68fb      	ldr	r3, [r7, #12]
   16a4c:	0018      	movs	r0, r3
   16a4e:	4b9e      	ldr	r3, [pc, #632]	; (16cc8 <processOnSMS+0x1ce8>)
   16a50:	4798      	blx	r3
   16a52:	0002      	movs	r2, r0
   16a54:	238f      	movs	r3, #143	; 0x8f
   16a56:	005b      	lsls	r3, r3, #1
   16a58:	2108      	movs	r1, #8
   16a5a:	468c      	mov	ip, r1
   16a5c:	44bc      	add	ip, r7
   16a5e:	4463      	add	r3, ip
   16a60:	801a      	strh	r2, [r3, #0]
		if (STARTIME < 2)
   16a62:	238f      	movs	r3, #143	; 0x8f
   16a64:	005b      	lsls	r3, r3, #1
   16a66:	2208      	movs	r2, #8
   16a68:	4694      	mov	ip, r2
   16a6a:	44bc      	add	ip, r7
   16a6c:	4463      	add	r3, ip
   16a6e:	881b      	ldrh	r3, [r3, #0]
   16a70:	2b01      	cmp	r3, #1
   16a72:	d807      	bhi.n	16a84 <processOnSMS+0x1aa4>
		{
			STARTIME = 2;
   16a74:	238f      	movs	r3, #143	; 0x8f
   16a76:	005b      	lsls	r3, r3, #1
   16a78:	2208      	movs	r2, #8
   16a7a:	4694      	mov	ip, r2
   16a7c:	44bc      	add	ip, r7
   16a7e:	4463      	add	r3, ip
   16a80:	2202      	movs	r2, #2
   16a82:	801a      	strh	r2, [r3, #0]
		}
		if (STARTIME > 65000)
   16a84:	238f      	movs	r3, #143	; 0x8f
   16a86:	005b      	lsls	r3, r3, #1
   16a88:	2208      	movs	r2, #8
   16a8a:	4694      	mov	ip, r2
   16a8c:	44bc      	add	ip, r7
   16a8e:	4463      	add	r3, ip
   16a90:	881b      	ldrh	r3, [r3, #0]
   16a92:	4a8e      	ldr	r2, [pc, #568]	; (16ccc <processOnSMS+0x1cec>)
   16a94:	4293      	cmp	r3, r2
   16a96:	d907      	bls.n	16aa8 <processOnSMS+0x1ac8>
		{
			STARTIME = 65000;
   16a98:	238f      	movs	r3, #143	; 0x8f
   16a9a:	005b      	lsls	r3, r3, #1
   16a9c:	2208      	movs	r2, #8
   16a9e:	4694      	mov	ip, r2
   16aa0:	44bc      	add	ip, r7
   16aa2:	4463      	add	r3, ip
   16aa4:	4a8a      	ldr	r2, [pc, #552]	; (16cd0 <processOnSMS+0x1cf0>)
   16aa6:	801a      	strh	r2, [r3, #0]
		}
		saveStarDeltaTimer(STARTIME);
   16aa8:	238f      	movs	r3, #143	; 0x8f
   16aaa:	005b      	lsls	r3, r3, #1
   16aac:	2208      	movs	r2, #8
   16aae:	4694      	mov	ip, r2
   16ab0:	44bc      	add	ip, r7
   16ab2:	4463      	add	r3, ip
   16ab4:	881b      	ldrh	r3, [r3, #0]
   16ab6:	0018      	movs	r0, r3
   16ab8:	4b86      	ldr	r3, [pc, #536]	; (16cd4 <processOnSMS+0x1cf4>)
   16aba:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   16abc:	2328      	movs	r3, #40	; 0x28
   16abe:	33ff      	adds	r3, #255	; 0xff
   16ac0:	2208      	movs	r2, #8
   16ac2:	4694      	mov	ip, r2
   16ac4:	44bc      	add	ip, r7
   16ac6:	4463      	add	r3, ip
   16ac8:	2201      	movs	r2, #1
   16aca:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   16acc:	4b82      	ldr	r3, [pc, #520]	; (16cd8 <processOnSMS+0x1cf8>)
   16ace:	2294      	movs	r2, #148	; 0x94
   16ad0:	0052      	lsls	r2, r2, #1
   16ad2:	4694      	mov	ip, r2
   16ad4:	2208      	movs	r2, #8
   16ad6:	4690      	mov	r8, r2
   16ad8:	44b8      	add	r8, r7
   16ada:	44c4      	add	ip, r8
   16adc:	4463      	add	r3, ip
   16ade:	781b      	ldrb	r3, [r3, #0]
   16ae0:	2b00      	cmp	r3, #0
   16ae2:	d100      	bne.n	16ae6 <processOnSMS+0x1b06>
   16ae4:	e330      	b.n	17148 <processOnSMS+0x2168>
		{
			sprintf(resep_msg," STARTIME SET TO : %d",STARTIME);
   16ae6:	238f      	movs	r3, #143	; 0x8f
   16ae8:	005b      	lsls	r3, r3, #1
   16aea:	2208      	movs	r2, #8
   16aec:	4694      	mov	ip, r2
   16aee:	44bc      	add	ip, r7
   16af0:	4463      	add	r3, ip
   16af2:	881a      	ldrh	r2, [r3, #0]
   16af4:	4979      	ldr	r1, [pc, #484]	; (16cdc <processOnSMS+0x1cfc>)
   16af6:	230c      	movs	r3, #12
   16af8:	2008      	movs	r0, #8
   16afa:	4684      	mov	ip, r0
   16afc:	44bc      	add	ip, r7
   16afe:	4463      	add	r3, ip
   16b00:	0018      	movs	r0, r3
   16b02:	4b77      	ldr	r3, [pc, #476]	; (16ce0 <processOnSMS+0x1d00>)
   16b04:	4798      	blx	r3
   16b06:	e31f      	b.n	17148 <processOnSMS+0x2168>
		}
	}
	else if (StringstartsWith(received_command,"AUTOTIME"))
   16b08:	4a76      	ldr	r2, [pc, #472]	; (16ce4 <processOnSMS+0x1d04>)
   16b0a:	68fb      	ldr	r3, [r7, #12]
   16b0c:	0011      	movs	r1, r2
   16b0e:	0018      	movs	r0, r3
   16b10:	4b6a      	ldr	r3, [pc, #424]	; (16cbc <processOnSMS+0x1cdc>)
   16b12:	4798      	blx	r3
   16b14:	1e03      	subs	r3, r0, #0
   16b16:	d06d      	beq.n	16bf4 <processOnSMS+0x1c14>
	{
		memmove(received_command,received_command+8,strlen(received_command));
   16b18:	68fb      	ldr	r3, [r7, #12]
   16b1a:	3308      	adds	r3, #8
   16b1c:	001c      	movs	r4, r3
   16b1e:	68fb      	ldr	r3, [r7, #12]
   16b20:	0018      	movs	r0, r3
   16b22:	4b67      	ldr	r3, [pc, #412]	; (16cc0 <processOnSMS+0x1ce0>)
   16b24:	4798      	blx	r3
   16b26:	0002      	movs	r2, r0
   16b28:	68fb      	ldr	r3, [r7, #12]
   16b2a:	0021      	movs	r1, r4
   16b2c:	0018      	movs	r0, r3
   16b2e:	4b65      	ldr	r3, [pc, #404]	; (16cc4 <processOnSMS+0x1ce4>)
   16b30:	4798      	blx	r3
		uint16_t AUTOTIME = atoi(received_command);
   16b32:	68fb      	ldr	r3, [r7, #12]
   16b34:	0018      	movs	r0, r3
   16b36:	4b64      	ldr	r3, [pc, #400]	; (16cc8 <processOnSMS+0x1ce8>)
   16b38:	4798      	blx	r3
   16b3a:	0002      	movs	r2, r0
   16b3c:	238e      	movs	r3, #142	; 0x8e
   16b3e:	005b      	lsls	r3, r3, #1
   16b40:	2108      	movs	r1, #8
   16b42:	468c      	mov	ip, r1
   16b44:	44bc      	add	ip, r7
   16b46:	4463      	add	r3, ip
   16b48:	801a      	strh	r2, [r3, #0]
		if (AUTOTIME < 50)
   16b4a:	238e      	movs	r3, #142	; 0x8e
   16b4c:	005b      	lsls	r3, r3, #1
   16b4e:	2208      	movs	r2, #8
   16b50:	4694      	mov	ip, r2
   16b52:	44bc      	add	ip, r7
   16b54:	4463      	add	r3, ip
   16b56:	881b      	ldrh	r3, [r3, #0]
   16b58:	2b31      	cmp	r3, #49	; 0x31
   16b5a:	d807      	bhi.n	16b6c <processOnSMS+0x1b8c>
		{
			AUTOTIME = 50;
   16b5c:	238e      	movs	r3, #142	; 0x8e
   16b5e:	005b      	lsls	r3, r3, #1
   16b60:	2208      	movs	r2, #8
   16b62:	4694      	mov	ip, r2
   16b64:	44bc      	add	ip, r7
   16b66:	4463      	add	r3, ip
   16b68:	2232      	movs	r2, #50	; 0x32
   16b6a:	801a      	strh	r2, [r3, #0]
		}
		if (AUTOTIME > 28800)
   16b6c:	238e      	movs	r3, #142	; 0x8e
   16b6e:	005b      	lsls	r3, r3, #1
   16b70:	2208      	movs	r2, #8
   16b72:	4694      	mov	ip, r2
   16b74:	44bc      	add	ip, r7
   16b76:	4463      	add	r3, ip
   16b78:	881a      	ldrh	r2, [r3, #0]
   16b7a:	23e1      	movs	r3, #225	; 0xe1
   16b7c:	01db      	lsls	r3, r3, #7
   16b7e:	429a      	cmp	r2, r3
   16b80:	d908      	bls.n	16b94 <processOnSMS+0x1bb4>
		{
			AUTOTIME = 28800;
   16b82:	238e      	movs	r3, #142	; 0x8e
   16b84:	005b      	lsls	r3, r3, #1
   16b86:	2208      	movs	r2, #8
   16b88:	4694      	mov	ip, r2
   16b8a:	44bc      	add	ip, r7
   16b8c:	4463      	add	r3, ip
   16b8e:	22e1      	movs	r2, #225	; 0xe1
   16b90:	01d2      	lsls	r2, r2, #7
   16b92:	801a      	strh	r2, [r3, #0]
		}
		saveAutoStartTimeSettings(AUTOTIME);
   16b94:	238e      	movs	r3, #142	; 0x8e
   16b96:	005b      	lsls	r3, r3, #1
   16b98:	2208      	movs	r2, #8
   16b9a:	4694      	mov	ip, r2
   16b9c:	44bc      	add	ip, r7
   16b9e:	4463      	add	r3, ip
   16ba0:	881b      	ldrh	r3, [r3, #0]
   16ba2:	0018      	movs	r0, r3
   16ba4:	4b50      	ldr	r3, [pc, #320]	; (16ce8 <processOnSMS+0x1d08>)
   16ba6:	4798      	blx	r3
		incomingSMSProcessed=true;
   16ba8:	2328      	movs	r3, #40	; 0x28
   16baa:	33ff      	adds	r3, #255	; 0xff
   16bac:	2208      	movs	r2, #8
   16bae:	4694      	mov	ip, r2
   16bb0:	44bc      	add	ip, r7
   16bb2:	4463      	add	r3, ip
   16bb4:	2201      	movs	r2, #1
   16bb6:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   16bb8:	4b47      	ldr	r3, [pc, #284]	; (16cd8 <processOnSMS+0x1cf8>)
   16bba:	2294      	movs	r2, #148	; 0x94
   16bbc:	0052      	lsls	r2, r2, #1
   16bbe:	4694      	mov	ip, r2
   16bc0:	2208      	movs	r2, #8
   16bc2:	4690      	mov	r8, r2
   16bc4:	44b8      	add	r8, r7
   16bc6:	44c4      	add	ip, r8
   16bc8:	4463      	add	r3, ip
   16bca:	781b      	ldrb	r3, [r3, #0]
   16bcc:	2b00      	cmp	r3, #0
   16bce:	d100      	bne.n	16bd2 <processOnSMS+0x1bf2>
   16bd0:	e2ba      	b.n	17148 <processOnSMS+0x2168>
		{
			sprintf(resep_msg," AUTOTIME SET TO : %d",AUTOTIME);
   16bd2:	238e      	movs	r3, #142	; 0x8e
   16bd4:	005b      	lsls	r3, r3, #1
   16bd6:	2208      	movs	r2, #8
   16bd8:	4694      	mov	ip, r2
   16bda:	44bc      	add	ip, r7
   16bdc:	4463      	add	r3, ip
   16bde:	881a      	ldrh	r2, [r3, #0]
   16be0:	4942      	ldr	r1, [pc, #264]	; (16cec <processOnSMS+0x1d0c>)
   16be2:	230c      	movs	r3, #12
   16be4:	2008      	movs	r0, #8
   16be6:	4684      	mov	ip, r0
   16be8:	44bc      	add	ip, r7
   16bea:	4463      	add	r3, ip
   16bec:	0018      	movs	r0, r3
   16bee:	4b3c      	ldr	r3, [pc, #240]	; (16ce0 <processOnSMS+0x1d00>)
   16bf0:	4798      	blx	r3
   16bf2:	e2a9      	b.n	17148 <processOnSMS+0x2168>
		}
	}
	else if (StringstartsWith(received_command,"BAL"))
   16bf4:	4a3e      	ldr	r2, [pc, #248]	; (16cf0 <processOnSMS+0x1d10>)
   16bf6:	68fb      	ldr	r3, [r7, #12]
   16bf8:	0011      	movs	r1, r2
   16bfa:	0018      	movs	r0, r3
   16bfc:	4b2f      	ldr	r3, [pc, #188]	; (16cbc <processOnSMS+0x1cdc>)
   16bfe:	4798      	blx	r3
   16c00:	1e03      	subs	r3, r0, #0
   16c02:	d000      	beq.n	16c06 <processOnSMS+0x1c26>
   16c04:	e2a0      	b.n	17148 <processOnSMS+0x2168>
		// The received sms will be like BAL*141# for vodafone
		// We need to extract the URC number and check the balance, and send it to user
		//todo: implement mechanism to check current balance of sim card
		
	}
	else if(StringstartsWith(received_command,"MP+"))
   16c06:	4a3b      	ldr	r2, [pc, #236]	; (16cf4 <processOnSMS+0x1d14>)
   16c08:	68fb      	ldr	r3, [r7, #12]
   16c0a:	0011      	movs	r1, r2
   16c0c:	0018      	movs	r0, r3
   16c0e:	4b2b      	ldr	r3, [pc, #172]	; (16cbc <processOnSMS+0x1cdc>)
   16c10:	4798      	blx	r3
   16c12:	1e03      	subs	r3, r0, #0
   16c14:	d023      	beq.n	16c5e <processOnSMS+0x1c7e>
	{
		memmove(received_command,received_command+3,strlen(received_command));
   16c16:	68fb      	ldr	r3, [r7, #12]
   16c18:	1cdc      	adds	r4, r3, #3
   16c1a:	68fb      	ldr	r3, [r7, #12]
   16c1c:	0018      	movs	r0, r3
   16c1e:	4b28      	ldr	r3, [pc, #160]	; (16cc0 <processOnSMS+0x1ce0>)
   16c20:	4798      	blx	r3
   16c22:	0002      	movs	r2, r0
   16c24:	68fb      	ldr	r3, [r7, #12]
   16c26:	0021      	movs	r1, r4
   16c28:	0018      	movs	r0, r3
   16c2a:	4b26      	ldr	r3, [pc, #152]	; (16cc4 <processOnSMS+0x1ce4>)
   16c2c:	4798      	blx	r3
		if(addPrimaryIndexedNumber(received_command))
   16c2e:	68fb      	ldr	r3, [r7, #12]
   16c30:	0018      	movs	r0, r3
   16c32:	4b31      	ldr	r3, [pc, #196]	; (16cf8 <processOnSMS+0x1d18>)
   16c34:	4798      	blx	r3
   16c36:	1e03      	subs	r3, r0, #0
   16c38:	d100      	bne.n	16c3c <processOnSMS+0x1c5c>
   16c3a:	e285      	b.n	17148 <processOnSMS+0x2168>
		{
			incomingSMSProcessed=true;
   16c3c:	2328      	movs	r3, #40	; 0x28
   16c3e:	33ff      	adds	r3, #255	; 0xff
   16c40:	2208      	movs	r2, #8
   16c42:	4694      	mov	ip, r2
   16c44:	44bc      	add	ip, r7
   16c46:	4463      	add	r3, ip
   16c48:	2201      	movs	r2, #1
   16c4a:	701a      	strb	r2, [r3, #0]
			strcpy(resep_msg,"P NO ADDDED");
   16c4c:	230c      	movs	r3, #12
   16c4e:	2208      	movs	r2, #8
   16c50:	4694      	mov	ip, r2
   16c52:	44bc      	add	ip, r7
   16c54:	4463      	add	r3, ip
   16c56:	4a29      	ldr	r2, [pc, #164]	; (16cfc <processOnSMS+0x1d1c>)
   16c58:	ca13      	ldmia	r2!, {r0, r1, r4}
   16c5a:	c313      	stmia	r3!, {r0, r1, r4}
   16c5c:	e274      	b.n	17148 <processOnSMS+0x2168>
		}
	}
	else if(StringstartsWith(received_command,"MS+"))
   16c5e:	4a28      	ldr	r2, [pc, #160]	; (16d00 <processOnSMS+0x1d20>)
   16c60:	68fb      	ldr	r3, [r7, #12]
   16c62:	0011      	movs	r1, r2
   16c64:	0018      	movs	r0, r3
   16c66:	4b15      	ldr	r3, [pc, #84]	; (16cbc <processOnSMS+0x1cdc>)
   16c68:	4798      	blx	r3
   16c6a:	1e03      	subs	r3, r0, #0
   16c6c:	d04e      	beq.n	16d0c <processOnSMS+0x1d2c>
	{
		memmove(received_command,received_command+3,strlen(received_command));
   16c6e:	68fb      	ldr	r3, [r7, #12]
   16c70:	1cdc      	adds	r4, r3, #3
   16c72:	68fb      	ldr	r3, [r7, #12]
   16c74:	0018      	movs	r0, r3
   16c76:	4b12      	ldr	r3, [pc, #72]	; (16cc0 <processOnSMS+0x1ce0>)
   16c78:	4798      	blx	r3
   16c7a:	0002      	movs	r2, r0
   16c7c:	68fb      	ldr	r3, [r7, #12]
   16c7e:	0021      	movs	r1, r4
   16c80:	0018      	movs	r0, r3
   16c82:	4b10      	ldr	r3, [pc, #64]	; (16cc4 <processOnSMS+0x1ce4>)
   16c84:	4798      	blx	r3
		if(addSecondaryIndexedNumber(received_command))
   16c86:	68fb      	ldr	r3, [r7, #12]
   16c88:	0018      	movs	r0, r3
   16c8a:	4b1e      	ldr	r3, [pc, #120]	; (16d04 <processOnSMS+0x1d24>)
   16c8c:	4798      	blx	r3
   16c8e:	1e03      	subs	r3, r0, #0
   16c90:	d100      	bne.n	16c94 <processOnSMS+0x1cb4>
   16c92:	e259      	b.n	17148 <processOnSMS+0x2168>
		{
			incomingSMSProcessed=true;
   16c94:	2328      	movs	r3, #40	; 0x28
   16c96:	33ff      	adds	r3, #255	; 0xff
   16c98:	2208      	movs	r2, #8
   16c9a:	4694      	mov	ip, r2
   16c9c:	44bc      	add	ip, r7
   16c9e:	4463      	add	r3, ip
   16ca0:	2201      	movs	r2, #1
   16ca2:	701a      	strb	r2, [r3, #0]
			strcpy(resep_msg,"S NO ADDDED");
   16ca4:	230c      	movs	r3, #12
   16ca6:	2208      	movs	r2, #8
   16ca8:	4694      	mov	ip, r2
   16caa:	44bc      	add	ip, r7
   16cac:	4463      	add	r3, ip
   16cae:	4a16      	ldr	r2, [pc, #88]	; (16d08 <processOnSMS+0x1d28>)
   16cb0:	ca13      	ldmia	r2!, {r0, r1, r4}
   16cb2:	c313      	stmia	r3!, {r0, r1, r4}
   16cb4:	e248      	b.n	17148 <processOnSMS+0x2168>
   16cb6:	46c0      	nop			; (mov r8, r8)
   16cb8:	0002af94 	.word	0x0002af94
   16cbc:	00014201 	.word	0x00014201
   16cc0:	00029b47 	.word	0x00029b47
   16cc4:	00029893 	.word	0x00029893
   16cc8:	0002979d 	.word	0x0002979d
   16ccc:	0000fde8 	.word	0x0000fde8
   16cd0:	fffffde8 	.word	0xfffffde8
   16cd4:	000119d1 	.word	0x000119d1
   16cd8:	fffffeda 	.word	0xfffffeda
   16cdc:	0002afa0 	.word	0x0002afa0
   16ce0:	00029abd 	.word	0x00029abd
   16ce4:	0002afb8 	.word	0x0002afb8
   16ce8:	000112f1 	.word	0x000112f1
   16cec:	0002afc4 	.word	0x0002afc4
   16cf0:	0002afdc 	.word	0x0002afdc
   16cf4:	0002afe0 	.word	0x0002afe0
   16cf8:	00011b9d 	.word	0x00011b9d
   16cfc:	0002afe4 	.word	0x0002afe4
   16d00:	0002aff0 	.word	0x0002aff0
   16d04:	00011c49 	.word	0x00011c49
   16d08:	0002aff4 	.word	0x0002aff4
		}
	}
	else if (StringstartsWith(received_command,"M+"))
   16d0c:	4adb      	ldr	r2, [pc, #876]	; (1707c <processOnSMS+0x209c>)
   16d0e:	68fb      	ldr	r3, [r7, #12]
   16d10:	0011      	movs	r1, r2
   16d12:	0018      	movs	r0, r3
   16d14:	4bda      	ldr	r3, [pc, #872]	; (17080 <processOnSMS+0x20a0>)
   16d16:	4798      	blx	r3
   16d18:	1e03      	subs	r3, r0, #0
   16d1a:	d100      	bne.n	16d1e <processOnSMS+0x1d3e>
   16d1c:	e091      	b.n	16e42 <processOnSMS+0x1e62>
	{
		memmove(received_command,received_command+2,strlen(received_command));
   16d1e:	68fb      	ldr	r3, [r7, #12]
   16d20:	1c9c      	adds	r4, r3, #2
   16d22:	68fb      	ldr	r3, [r7, #12]
   16d24:	0018      	movs	r0, r3
   16d26:	4bd7      	ldr	r3, [pc, #860]	; (17084 <processOnSMS+0x20a4>)
   16d28:	4798      	blx	r3
   16d2a:	0002      	movs	r2, r0
   16d2c:	68fb      	ldr	r3, [r7, #12]
   16d2e:	0021      	movs	r1, r4
   16d30:	0018      	movs	r0, r3
   16d32:	4bd5      	ldr	r3, [pc, #852]	; (17088 <processOnSMS+0x20a8>)
   16d34:	4798      	blx	r3
		bool result = addNumber(received_command);
   16d36:	230c      	movs	r3, #12
   16d38:	33ff      	adds	r3, #255	; 0xff
   16d3a:	2208      	movs	r2, #8
   16d3c:	18ba      	adds	r2, r7, r2
   16d3e:	18d4      	adds	r4, r2, r3
   16d40:	68fb      	ldr	r3, [r7, #12]
   16d42:	0018      	movs	r0, r3
   16d44:	4bd1      	ldr	r3, [pc, #836]	; (1708c <processOnSMS+0x20ac>)
   16d46:	4798      	blx	r3
   16d48:	0003      	movs	r3, r0
   16d4a:	7023      	strb	r3, [r4, #0]
		if(result)
   16d4c:	230c      	movs	r3, #12
   16d4e:	33ff      	adds	r3, #255	; 0xff
   16d50:	2208      	movs	r2, #8
   16d52:	4694      	mov	ip, r2
   16d54:	44bc      	add	ip, r7
   16d56:	4463      	add	r3, ip
   16d58:	781b      	ldrb	r3, [r3, #0]
   16d5a:	2b00      	cmp	r3, #0
   16d5c:	d100      	bne.n	16d60 <processOnSMS+0x1d80>
   16d5e:	e1f3      	b.n	17148 <processOnSMS+0x2168>
		{
			incomingSMSProcessed=true;
   16d60:	2328      	movs	r3, #40	; 0x28
   16d62:	33ff      	adds	r3, #255	; 0xff
   16d64:	2208      	movs	r2, #8
   16d66:	4694      	mov	ip, r2
   16d68:	44bc      	add	ip, r7
   16d6a:	4463      	add	r3, ip
   16d6c:	2201      	movs	r2, #1
   16d6e:	701a      	strb	r2, [r3, #0]
			if (response_sms_processed_cmd == true)
   16d70:	4bc7      	ldr	r3, [pc, #796]	; (17090 <processOnSMS+0x20b0>)
   16d72:	2294      	movs	r2, #148	; 0x94
   16d74:	0052      	lsls	r2, r2, #1
   16d76:	4694      	mov	ip, r2
   16d78:	2208      	movs	r2, #8
   16d7a:	4690      	mov	r8, r2
   16d7c:	44b8      	add	r8, r7
   16d7e:	44c4      	add	ip, r8
   16d80:	4463      	add	r3, ip
   16d82:	781b      	ldrb	r3, [r3, #0]
   16d84:	2b00      	cmp	r3, #0
   16d86:	d100      	bne.n	16d8a <processOnSMS+0x1daa>
   16d88:	e1de      	b.n	17148 <processOnSMS+0x2168>
			{
				strcpy(resep_msg,"MOBILE NO:");
   16d8a:	230c      	movs	r3, #12
   16d8c:	2208      	movs	r2, #8
   16d8e:	4694      	mov	ip, r2
   16d90:	44bc      	add	ip, r7
   16d92:	4463      	add	r3, ip
   16d94:	4abf      	ldr	r2, [pc, #764]	; (17094 <processOnSMS+0x20b4>)
   16d96:	ca03      	ldmia	r2!, {r0, r1}
   16d98:	c303      	stmia	r3!, {r0, r1}
   16d9a:	8811      	ldrh	r1, [r2, #0]
   16d9c:	8019      	strh	r1, [r3, #0]
   16d9e:	7892      	ldrb	r2, [r2, #2]
   16da0:	709a      	strb	r2, [r3, #2]
				strcat(resep_msg,"\n");
   16da2:	230c      	movs	r3, #12
   16da4:	2208      	movs	r2, #8
   16da6:	4694      	mov	ip, r2
   16da8:	44bc      	add	ip, r7
   16daa:	4463      	add	r3, ip
   16dac:	0018      	movs	r0, r3
   16dae:	4bb5      	ldr	r3, [pc, #724]	; (17084 <processOnSMS+0x20a4>)
   16db0:	4798      	blx	r3
   16db2:	0003      	movs	r3, r0
   16db4:	001a      	movs	r2, r3
   16db6:	230c      	movs	r3, #12
   16db8:	2108      	movs	r1, #8
   16dba:	468c      	mov	ip, r1
   16dbc:	44bc      	add	ip, r7
   16dbe:	4463      	add	r3, ip
   16dc0:	189a      	adds	r2, r3, r2
   16dc2:	4bb5      	ldr	r3, [pc, #724]	; (17098 <processOnSMS+0x20b8>)
   16dc4:	0010      	movs	r0, r2
   16dc6:	0019      	movs	r1, r3
   16dc8:	2302      	movs	r3, #2
   16dca:	001a      	movs	r2, r3
   16dcc:	4bb3      	ldr	r3, [pc, #716]	; (1709c <processOnSMS+0x20bc>)
   16dce:	4798      	blx	r3
				strcat(resep_msg,received_command);
   16dd0:	68fa      	ldr	r2, [r7, #12]
   16dd2:	230c      	movs	r3, #12
   16dd4:	2108      	movs	r1, #8
   16dd6:	468c      	mov	ip, r1
   16dd8:	44bc      	add	ip, r7
   16dda:	4463      	add	r3, ip
   16ddc:	0011      	movs	r1, r2
   16dde:	0018      	movs	r0, r3
   16de0:	4baf      	ldr	r3, [pc, #700]	; (170a0 <processOnSMS+0x20c0>)
   16de2:	4798      	blx	r3
				strcat(resep_msg,"\n");
   16de4:	230c      	movs	r3, #12
   16de6:	2208      	movs	r2, #8
   16de8:	4694      	mov	ip, r2
   16dea:	44bc      	add	ip, r7
   16dec:	4463      	add	r3, ip
   16dee:	0018      	movs	r0, r3
   16df0:	4ba4      	ldr	r3, [pc, #656]	; (17084 <processOnSMS+0x20a4>)
   16df2:	4798      	blx	r3
   16df4:	0003      	movs	r3, r0
   16df6:	001a      	movs	r2, r3
   16df8:	230c      	movs	r3, #12
   16dfa:	2108      	movs	r1, #8
   16dfc:	468c      	mov	ip, r1
   16dfe:	44bc      	add	ip, r7
   16e00:	4463      	add	r3, ip
   16e02:	189a      	adds	r2, r3, r2
   16e04:	4ba4      	ldr	r3, [pc, #656]	; (17098 <processOnSMS+0x20b8>)
   16e06:	0010      	movs	r0, r2
   16e08:	0019      	movs	r1, r3
   16e0a:	2302      	movs	r3, #2
   16e0c:	001a      	movs	r2, r3
   16e0e:	4ba3      	ldr	r3, [pc, #652]	; (1709c <processOnSMS+0x20bc>)
   16e10:	4798      	blx	r3
				strcat(resep_msg,"ADDED SUCCESSFULLY");
   16e12:	230c      	movs	r3, #12
   16e14:	2208      	movs	r2, #8
   16e16:	4694      	mov	ip, r2
   16e18:	44bc      	add	ip, r7
   16e1a:	4463      	add	r3, ip
   16e1c:	0018      	movs	r0, r3
   16e1e:	4b99      	ldr	r3, [pc, #612]	; (17084 <processOnSMS+0x20a4>)
   16e20:	4798      	blx	r3
   16e22:	0003      	movs	r3, r0
   16e24:	001a      	movs	r2, r3
   16e26:	230c      	movs	r3, #12
   16e28:	2108      	movs	r1, #8
   16e2a:	468c      	mov	ip, r1
   16e2c:	44bc      	add	ip, r7
   16e2e:	4463      	add	r3, ip
   16e30:	189a      	adds	r2, r3, r2
   16e32:	4b9c      	ldr	r3, [pc, #624]	; (170a4 <processOnSMS+0x20c4>)
   16e34:	0010      	movs	r0, r2
   16e36:	0019      	movs	r1, r3
   16e38:	2313      	movs	r3, #19
   16e3a:	001a      	movs	r2, r3
   16e3c:	4b97      	ldr	r3, [pc, #604]	; (1709c <processOnSMS+0x20bc>)
   16e3e:	4798      	blx	r3
   16e40:	e182      	b.n	17148 <processOnSMS+0x2168>
			}
		}
	}
	else if (StringstartsWith(received_command,"M-"))
   16e42:	4a99      	ldr	r2, [pc, #612]	; (170a8 <processOnSMS+0x20c8>)
   16e44:	68fb      	ldr	r3, [r7, #12]
   16e46:	0011      	movs	r1, r2
   16e48:	0018      	movs	r0, r3
   16e4a:	4b8d      	ldr	r3, [pc, #564]	; (17080 <processOnSMS+0x20a0>)
   16e4c:	4798      	blx	r3
   16e4e:	1e03      	subs	r3, r0, #0
   16e50:	d100      	bne.n	16e54 <processOnSMS+0x1e74>
   16e52:	e091      	b.n	16f78 <processOnSMS+0x1f98>
	{
		memmove(received_command,received_command+2,strlen(received_command));
   16e54:	68fb      	ldr	r3, [r7, #12]
   16e56:	1c9c      	adds	r4, r3, #2
   16e58:	68fb      	ldr	r3, [r7, #12]
   16e5a:	0018      	movs	r0, r3
   16e5c:	4b89      	ldr	r3, [pc, #548]	; (17084 <processOnSMS+0x20a4>)
   16e5e:	4798      	blx	r3
   16e60:	0002      	movs	r2, r0
   16e62:	68fb      	ldr	r3, [r7, #12]
   16e64:	0021      	movs	r1, r4
   16e66:	0018      	movs	r0, r3
   16e68:	4b87      	ldr	r3, [pc, #540]	; (17088 <processOnSMS+0x20a8>)
   16e6a:	4798      	blx	r3
		bool result = removeNumber(received_command);
   16e6c:	2385      	movs	r3, #133	; 0x85
   16e6e:	005b      	lsls	r3, r3, #1
   16e70:	2208      	movs	r2, #8
   16e72:	18ba      	adds	r2, r7, r2
   16e74:	18d4      	adds	r4, r2, r3
   16e76:	68fb      	ldr	r3, [r7, #12]
   16e78:	0018      	movs	r0, r3
   16e7a:	4b8c      	ldr	r3, [pc, #560]	; (170ac <processOnSMS+0x20cc>)
   16e7c:	4798      	blx	r3
   16e7e:	0003      	movs	r3, r0
   16e80:	7023      	strb	r3, [r4, #0]
		if(result)
   16e82:	2385      	movs	r3, #133	; 0x85
   16e84:	005b      	lsls	r3, r3, #1
   16e86:	2208      	movs	r2, #8
   16e88:	4694      	mov	ip, r2
   16e8a:	44bc      	add	ip, r7
   16e8c:	4463      	add	r3, ip
   16e8e:	781b      	ldrb	r3, [r3, #0]
   16e90:	2b00      	cmp	r3, #0
   16e92:	d100      	bne.n	16e96 <processOnSMS+0x1eb6>
   16e94:	e158      	b.n	17148 <processOnSMS+0x2168>
		{
			incomingSMSProcessed=true;
   16e96:	2328      	movs	r3, #40	; 0x28
   16e98:	33ff      	adds	r3, #255	; 0xff
   16e9a:	2208      	movs	r2, #8
   16e9c:	4694      	mov	ip, r2
   16e9e:	44bc      	add	ip, r7
   16ea0:	4463      	add	r3, ip
   16ea2:	2201      	movs	r2, #1
   16ea4:	701a      	strb	r2, [r3, #0]
			
			if (response_sms_processed_cmd == true)
   16ea6:	4b7a      	ldr	r3, [pc, #488]	; (17090 <processOnSMS+0x20b0>)
   16ea8:	2294      	movs	r2, #148	; 0x94
   16eaa:	0052      	lsls	r2, r2, #1
   16eac:	4694      	mov	ip, r2
   16eae:	2208      	movs	r2, #8
   16eb0:	4690      	mov	r8, r2
   16eb2:	44b8      	add	r8, r7
   16eb4:	44c4      	add	ip, r8
   16eb6:	4463      	add	r3, ip
   16eb8:	781b      	ldrb	r3, [r3, #0]
   16eba:	2b00      	cmp	r3, #0
   16ebc:	d100      	bne.n	16ec0 <processOnSMS+0x1ee0>
   16ebe:	e143      	b.n	17148 <processOnSMS+0x2168>
			{
				strcpy(resep_msg,"MOBILE NO:");
   16ec0:	230c      	movs	r3, #12
   16ec2:	2208      	movs	r2, #8
   16ec4:	4694      	mov	ip, r2
   16ec6:	44bc      	add	ip, r7
   16ec8:	4463      	add	r3, ip
   16eca:	4a72      	ldr	r2, [pc, #456]	; (17094 <processOnSMS+0x20b4>)
   16ecc:	ca03      	ldmia	r2!, {r0, r1}
   16ece:	c303      	stmia	r3!, {r0, r1}
   16ed0:	8811      	ldrh	r1, [r2, #0]
   16ed2:	8019      	strh	r1, [r3, #0]
   16ed4:	7892      	ldrb	r2, [r2, #2]
   16ed6:	709a      	strb	r2, [r3, #2]
				strcat(resep_msg,"\n");
   16ed8:	230c      	movs	r3, #12
   16eda:	2208      	movs	r2, #8
   16edc:	4694      	mov	ip, r2
   16ede:	44bc      	add	ip, r7
   16ee0:	4463      	add	r3, ip
   16ee2:	0018      	movs	r0, r3
   16ee4:	4b67      	ldr	r3, [pc, #412]	; (17084 <processOnSMS+0x20a4>)
   16ee6:	4798      	blx	r3
   16ee8:	0003      	movs	r3, r0
   16eea:	001a      	movs	r2, r3
   16eec:	230c      	movs	r3, #12
   16eee:	2108      	movs	r1, #8
   16ef0:	468c      	mov	ip, r1
   16ef2:	44bc      	add	ip, r7
   16ef4:	4463      	add	r3, ip
   16ef6:	189a      	adds	r2, r3, r2
   16ef8:	4b67      	ldr	r3, [pc, #412]	; (17098 <processOnSMS+0x20b8>)
   16efa:	0010      	movs	r0, r2
   16efc:	0019      	movs	r1, r3
   16efe:	2302      	movs	r3, #2
   16f00:	001a      	movs	r2, r3
   16f02:	4b66      	ldr	r3, [pc, #408]	; (1709c <processOnSMS+0x20bc>)
   16f04:	4798      	blx	r3
				strcat(resep_msg,received_command);
   16f06:	68fa      	ldr	r2, [r7, #12]
   16f08:	230c      	movs	r3, #12
   16f0a:	2108      	movs	r1, #8
   16f0c:	468c      	mov	ip, r1
   16f0e:	44bc      	add	ip, r7
   16f10:	4463      	add	r3, ip
   16f12:	0011      	movs	r1, r2
   16f14:	0018      	movs	r0, r3
   16f16:	4b62      	ldr	r3, [pc, #392]	; (170a0 <processOnSMS+0x20c0>)
   16f18:	4798      	blx	r3
				strcat(resep_msg,"\n");
   16f1a:	230c      	movs	r3, #12
   16f1c:	2208      	movs	r2, #8
   16f1e:	4694      	mov	ip, r2
   16f20:	44bc      	add	ip, r7
   16f22:	4463      	add	r3, ip
   16f24:	0018      	movs	r0, r3
   16f26:	4b57      	ldr	r3, [pc, #348]	; (17084 <processOnSMS+0x20a4>)
   16f28:	4798      	blx	r3
   16f2a:	0003      	movs	r3, r0
   16f2c:	001a      	movs	r2, r3
   16f2e:	230c      	movs	r3, #12
   16f30:	2108      	movs	r1, #8
   16f32:	468c      	mov	ip, r1
   16f34:	44bc      	add	ip, r7
   16f36:	4463      	add	r3, ip
   16f38:	189a      	adds	r2, r3, r2
   16f3a:	4b57      	ldr	r3, [pc, #348]	; (17098 <processOnSMS+0x20b8>)
   16f3c:	0010      	movs	r0, r2
   16f3e:	0019      	movs	r1, r3
   16f40:	2302      	movs	r3, #2
   16f42:	001a      	movs	r2, r3
   16f44:	4b55      	ldr	r3, [pc, #340]	; (1709c <processOnSMS+0x20bc>)
   16f46:	4798      	blx	r3
				strcat(resep_msg,"REMOVED SUCCESSFULLY");
   16f48:	230c      	movs	r3, #12
   16f4a:	2208      	movs	r2, #8
   16f4c:	4694      	mov	ip, r2
   16f4e:	44bc      	add	ip, r7
   16f50:	4463      	add	r3, ip
   16f52:	0018      	movs	r0, r3
   16f54:	4b4b      	ldr	r3, [pc, #300]	; (17084 <processOnSMS+0x20a4>)
   16f56:	4798      	blx	r3
   16f58:	0003      	movs	r3, r0
   16f5a:	001a      	movs	r2, r3
   16f5c:	230c      	movs	r3, #12
   16f5e:	2108      	movs	r1, #8
   16f60:	468c      	mov	ip, r1
   16f62:	44bc      	add	ip, r7
   16f64:	4463      	add	r3, ip
   16f66:	189a      	adds	r2, r3, r2
   16f68:	4b51      	ldr	r3, [pc, #324]	; (170b0 <processOnSMS+0x20d0>)
   16f6a:	0010      	movs	r0, r2
   16f6c:	0019      	movs	r1, r3
   16f6e:	2315      	movs	r3, #21
   16f70:	001a      	movs	r2, r3
   16f72:	4b4a      	ldr	r3, [pc, #296]	; (1709c <processOnSMS+0x20bc>)
   16f74:	4798      	blx	r3
   16f76:	e0e7      	b.n	17148 <processOnSMS+0x2168>
			}
		}
	}
	else if (StringstartsWith(received_command,"AM+"))
   16f78:	4a4e      	ldr	r2, [pc, #312]	; (170b4 <processOnSMS+0x20d4>)
   16f7a:	68fb      	ldr	r3, [r7, #12]
   16f7c:	0011      	movs	r1, r2
   16f7e:	0018      	movs	r0, r3
   16f80:	4b3f      	ldr	r3, [pc, #252]	; (17080 <processOnSMS+0x20a0>)
   16f82:	4798      	blx	r3
   16f84:	1e03      	subs	r3, r0, #0
   16f86:	d042      	beq.n	1700e <processOnSMS+0x202e>
	{
		//if (isNumeric(str))
		{
			memmove(received_command,received_command+3,strlen(received_command));
   16f88:	68fb      	ldr	r3, [r7, #12]
   16f8a:	1cdc      	adds	r4, r3, #3
   16f8c:	68fb      	ldr	r3, [r7, #12]
   16f8e:	0018      	movs	r0, r3
   16f90:	4b3c      	ldr	r3, [pc, #240]	; (17084 <processOnSMS+0x20a4>)
   16f92:	4798      	blx	r3
   16f94:	0002      	movs	r2, r0
   16f96:	68fb      	ldr	r3, [r7, #12]
   16f98:	0021      	movs	r1, r4
   16f9a:	0018      	movs	r0, r3
   16f9c:	4b3a      	ldr	r3, [pc, #232]	; (17088 <processOnSMS+0x20a8>)
   16f9e:	4798      	blx	r3
			bool result  = addAlternateNumber(received_command);
   16fa0:	230a      	movs	r3, #10
   16fa2:	33ff      	adds	r3, #255	; 0xff
   16fa4:	2208      	movs	r2, #8
   16fa6:	18ba      	adds	r2, r7, r2
   16fa8:	18d4      	adds	r4, r2, r3
   16faa:	68fb      	ldr	r3, [r7, #12]
   16fac:	0018      	movs	r0, r3
   16fae:	4b42      	ldr	r3, [pc, #264]	; (170b8 <processOnSMS+0x20d8>)
   16fb0:	4798      	blx	r3
   16fb2:	0003      	movs	r3, r0
   16fb4:	7023      	strb	r3, [r4, #0]
			incomingSMSProcessed=true;
   16fb6:	2328      	movs	r3, #40	; 0x28
   16fb8:	33ff      	adds	r3, #255	; 0xff
   16fba:	2208      	movs	r2, #8
   16fbc:	4694      	mov	ip, r2
   16fbe:	44bc      	add	ip, r7
   16fc0:	4463      	add	r3, ip
   16fc2:	2201      	movs	r2, #1
   16fc4:	701a      	strb	r2, [r3, #0]
			if(result)
   16fc6:	230a      	movs	r3, #10
   16fc8:	33ff      	adds	r3, #255	; 0xff
   16fca:	2208      	movs	r2, #8
   16fcc:	4694      	mov	ip, r2
   16fce:	44bc      	add	ip, r7
   16fd0:	4463      	add	r3, ip
   16fd2:	781b      	ldrb	r3, [r3, #0]
   16fd4:	2b00      	cmp	r3, #0
   16fd6:	d100      	bne.n	16fda <processOnSMS+0x1ffa>
   16fd8:	e0b6      	b.n	17148 <processOnSMS+0x2168>
			{
				if (response_sms_processed_cmd == true)
   16fda:	4b2d      	ldr	r3, [pc, #180]	; (17090 <processOnSMS+0x20b0>)
   16fdc:	2294      	movs	r2, #148	; 0x94
   16fde:	0052      	lsls	r2, r2, #1
   16fe0:	4694      	mov	ip, r2
   16fe2:	2208      	movs	r2, #8
   16fe4:	4690      	mov	r8, r2
   16fe6:	44b8      	add	r8, r7
   16fe8:	44c4      	add	ip, r8
   16fea:	4463      	add	r3, ip
   16fec:	781b      	ldrb	r3, [r3, #0]
   16fee:	2b00      	cmp	r3, #0
   16ff0:	d100      	bne.n	16ff4 <processOnSMS+0x2014>
   16ff2:	e0a9      	b.n	17148 <processOnSMS+0x2168>
				{
					strcpy(resep_msg,"ALTERNATE MOBILE NO ADD SUCCESS");
   16ff4:	230c      	movs	r3, #12
   16ff6:	2208      	movs	r2, #8
   16ff8:	4694      	mov	ip, r2
   16ffa:	44bc      	add	ip, r7
   16ffc:	4463      	add	r3, ip
   16ffe:	4a2f      	ldr	r2, [pc, #188]	; (170bc <processOnSMS+0x20dc>)
   17000:	ca13      	ldmia	r2!, {r0, r1, r4}
   17002:	c313      	stmia	r3!, {r0, r1, r4}
   17004:	ca13      	ldmia	r2!, {r0, r1, r4}
   17006:	c313      	stmia	r3!, {r0, r1, r4}
   17008:	ca03      	ldmia	r2!, {r0, r1}
   1700a:	c303      	stmia	r3!, {r0, r1}
   1700c:	e09c      	b.n	17148 <processOnSMS+0x2168>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"MM+"))
   1700e:	4a2c      	ldr	r2, [pc, #176]	; (170c0 <processOnSMS+0x20e0>)
   17010:	68fb      	ldr	r3, [r7, #12]
   17012:	0011      	movs	r1, r2
   17014:	0018      	movs	r0, r3
   17016:	4b1a      	ldr	r3, [pc, #104]	; (17080 <processOnSMS+0x20a0>)
   17018:	4798      	blx	r3
   1701a:	1e03      	subs	r3, r0, #0
   1701c:	d056      	beq.n	170cc <processOnSMS+0x20ec>
	{
		//if (isNumeric(str))
		{
			memmove(received_command,received_command+3,strlen(received_command));
   1701e:	68fb      	ldr	r3, [r7, #12]
   17020:	1cdc      	adds	r4, r3, #3
   17022:	68fb      	ldr	r3, [r7, #12]
   17024:	0018      	movs	r0, r3
   17026:	4b17      	ldr	r3, [pc, #92]	; (17084 <processOnSMS+0x20a4>)
   17028:	4798      	blx	r3
   1702a:	0002      	movs	r2, r0
   1702c:	68fb      	ldr	r3, [r7, #12]
   1702e:	0021      	movs	r1, r4
   17030:	0018      	movs	r0, r3
   17032:	4b15      	ldr	r3, [pc, #84]	; (17088 <processOnSMS+0x20a8>)
   17034:	4798      	blx	r3
			addM2MNumber(received_command);
   17036:	68fb      	ldr	r3, [r7, #12]
   17038:	0018      	movs	r0, r3
   1703a:	4b22      	ldr	r3, [pc, #136]	; (170c4 <processOnSMS+0x20e4>)
   1703c:	4798      	blx	r3
			incomingSMSProcessed=true;
   1703e:	2328      	movs	r3, #40	; 0x28
   17040:	33ff      	adds	r3, #255	; 0xff
   17042:	2208      	movs	r2, #8
   17044:	4694      	mov	ip, r2
   17046:	44bc      	add	ip, r7
   17048:	4463      	add	r3, ip
   1704a:	2201      	movs	r2, #1
   1704c:	701a      	strb	r2, [r3, #0]

			if (response_sms_processed_cmd == true)
   1704e:	4b10      	ldr	r3, [pc, #64]	; (17090 <processOnSMS+0x20b0>)
   17050:	2294      	movs	r2, #148	; 0x94
   17052:	0052      	lsls	r2, r2, #1
   17054:	4694      	mov	ip, r2
   17056:	2208      	movs	r2, #8
   17058:	4690      	mov	r8, r2
   1705a:	44b8      	add	r8, r7
   1705c:	44c4      	add	ip, r8
   1705e:	4463      	add	r3, ip
   17060:	781b      	ldrb	r3, [r3, #0]
   17062:	2b00      	cmp	r3, #0
   17064:	d070      	beq.n	17148 <processOnSMS+0x2168>
			{
				strcpy(resep_msg,"M2M NO. ADDED");
   17066:	230c      	movs	r3, #12
   17068:	2208      	movs	r2, #8
   1706a:	4694      	mov	ip, r2
   1706c:	44bc      	add	ip, r7
   1706e:	4463      	add	r3, ip
   17070:	4a15      	ldr	r2, [pc, #84]	; (170c8 <processOnSMS+0x20e8>)
   17072:	ca13      	ldmia	r2!, {r0, r1, r4}
   17074:	c313      	stmia	r3!, {r0, r1, r4}
   17076:	8812      	ldrh	r2, [r2, #0]
   17078:	801a      	strh	r2, [r3, #0]
   1707a:	e065      	b.n	17148 <processOnSMS+0x2168>
   1707c:	0002b000 	.word	0x0002b000
   17080:	00014201 	.word	0x00014201
   17084:	00029b47 	.word	0x00029b47
   17088:	00029893 	.word	0x00029893
   1708c:	00010eed 	.word	0x00010eed
   17090:	fffffeda 	.word	0xfffffeda
   17094:	0002b004 	.word	0x0002b004
   17098:	0002b010 	.word	0x0002b010
   1709c:	00029881 	.word	0x00029881
   170a0:	00029b01 	.word	0x00029b01
   170a4:	0002b014 	.word	0x0002b014
   170a8:	0002b028 	.word	0x0002b028
   170ac:	00010fe9 	.word	0x00010fe9
   170b0:	0002b02c 	.word	0x0002b02c
   170b4:	0002b044 	.word	0x0002b044
   170b8:	00011235 	.word	0x00011235
   170bc:	0002b048 	.word	0x0002b048
   170c0:	0002b068 	.word	0x0002b068
   170c4:	00010c45 	.word	0x00010c45
   170c8:	0002b06c 	.word	0x0002b06c
			}
		}
	}
	
	else if (StringstartsWith(received_command,"MR+"))
   170cc:	4a44      	ldr	r2, [pc, #272]	; (171e0 <processOnSMS+0x2200>)
   170ce:	68fb      	ldr	r3, [r7, #12]
   170d0:	0011      	movs	r1, r2
   170d2:	0018      	movs	r0, r3
   170d4:	4b43      	ldr	r3, [pc, #268]	; (171e4 <processOnSMS+0x2204>)
   170d6:	4798      	blx	r3
   170d8:	1e03      	subs	r3, r0, #0
   170da:	d035      	beq.n	17148 <processOnSMS+0x2168>
	{
		//if (isNumeric(str))
		if(factory_settings_parameter_struct.ENABLE_M2M)
   170dc:	4b42      	ldr	r3, [pc, #264]	; (171e8 <processOnSMS+0x2208>)
   170de:	78db      	ldrb	r3, [r3, #3]
   170e0:	2b00      	cmp	r3, #0
   170e2:	d031      	beq.n	17148 <processOnSMS+0x2168>
		{
			memmove(received_command,received_command+3,strlen(received_command));
   170e4:	68fb      	ldr	r3, [r7, #12]
   170e6:	1cdc      	adds	r4, r3, #3
   170e8:	68fb      	ldr	r3, [r7, #12]
   170ea:	0018      	movs	r0, r3
   170ec:	4b3f      	ldr	r3, [pc, #252]	; (171ec <processOnSMS+0x220c>)
   170ee:	4798      	blx	r3
   170f0:	0002      	movs	r2, r0
   170f2:	68fb      	ldr	r3, [r7, #12]
   170f4:	0021      	movs	r1, r4
   170f6:	0018      	movs	r0, r3
   170f8:	4b3d      	ldr	r3, [pc, #244]	; (171f0 <processOnSMS+0x2210>)
   170fa:	4798      	blx	r3
			incomingSMSProcessed=true;
   170fc:	2328      	movs	r3, #40	; 0x28
   170fe:	33ff      	adds	r3, #255	; 0xff
   17100:	2208      	movs	r2, #8
   17102:	4694      	mov	ip, r2
   17104:	44bc      	add	ip, r7
   17106:	4463      	add	r3, ip
   17108:	2201      	movs	r2, #1
   1710a:	701a      	strb	r2, [r3, #0]
			
			addM2MRemoteNumber(received_command);
   1710c:	68fb      	ldr	r3, [r7, #12]
   1710e:	0018      	movs	r0, r3
   17110:	4b38      	ldr	r3, [pc, #224]	; (171f4 <processOnSMS+0x2214>)
   17112:	4798      	blx	r3
			if (response_sms_processed_cmd == true)
   17114:	4b38      	ldr	r3, [pc, #224]	; (171f8 <processOnSMS+0x2218>)
   17116:	2294      	movs	r2, #148	; 0x94
   17118:	0052      	lsls	r2, r2, #1
   1711a:	4694      	mov	ip, r2
   1711c:	2208      	movs	r2, #8
   1711e:	4690      	mov	r8, r2
   17120:	44b8      	add	r8, r7
   17122:	44c4      	add	ip, r8
   17124:	4463      	add	r3, ip
   17126:	781b      	ldrb	r3, [r3, #0]
   17128:	2b00      	cmp	r3, #0
   1712a:	d00d      	beq.n	17148 <processOnSMS+0x2168>
			{
				strcpy(resep_msg,"M2M REMOTE NO. ADDED");
   1712c:	230c      	movs	r3, #12
   1712e:	2208      	movs	r2, #8
   17130:	4694      	mov	ip, r2
   17132:	44bc      	add	ip, r7
   17134:	4463      	add	r3, ip
   17136:	4a31      	ldr	r2, [pc, #196]	; (171fc <processOnSMS+0x221c>)
   17138:	ca13      	ldmia	r2!, {r0, r1, r4}
   1713a:	c313      	stmia	r3!, {r0, r1, r4}
   1713c:	ca03      	ldmia	r2!, {r0, r1}
   1713e:	c303      	stmia	r3!, {r0, r1}
   17140:	7812      	ldrb	r2, [r2, #0]
   17142:	701a      	strb	r2, [r3, #0]
   17144:	e000      	b.n	17148 <processOnSMS+0x2168>
		if (alternateNumber_struct.alterNumberPresent)
   17146:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	
	if (response_sms_processed_cmd == true)
   17148:	4b2b      	ldr	r3, [pc, #172]	; (171f8 <processOnSMS+0x2218>)
   1714a:	2294      	movs	r2, #148	; 0x94
   1714c:	0052      	lsls	r2, r2, #1
   1714e:	4694      	mov	ip, r2
   17150:	2208      	movs	r2, #8
   17152:	4690      	mov	r8, r2
   17154:	44b8      	add	r8, r7
   17156:	44c4      	add	ip, r8
   17158:	4463      	add	r3, ip
   1715a:	781b      	ldrb	r3, [r3, #0]
   1715c:	2b00      	cmp	r3, #0
   1715e:	d03a      	beq.n	171d6 <processOnSMS+0x21f6>
	{
		if(!incomingSMSProcessed)
   17160:	2328      	movs	r3, #40	; 0x28
   17162:	33ff      	adds	r3, #255	; 0xff
   17164:	2208      	movs	r2, #8
   17166:	4694      	mov	ip, r2
   17168:	44bc      	add	ip, r7
   1716a:	4463      	add	r3, ip
   1716c:	781b      	ldrb	r3, [r3, #0]
   1716e:	2201      	movs	r2, #1
   17170:	4053      	eors	r3, r2
   17172:	b2db      	uxtb	r3, r3
   17174:	2b00      	cmp	r3, #0
   17176:	d011      	beq.n	1719c <processOnSMS+0x21bc>
		{
			sprintf(resep_msg,"ERROR : %s",*copy_received_command);
   17178:	238c      	movs	r3, #140	; 0x8c
   1717a:	005b      	lsls	r3, r3, #1
   1717c:	2208      	movs	r2, #8
   1717e:	4694      	mov	ip, r2
   17180:	44bc      	add	ip, r7
   17182:	4463      	add	r3, ip
   17184:	681b      	ldr	r3, [r3, #0]
   17186:	781b      	ldrb	r3, [r3, #0]
   17188:	001a      	movs	r2, r3
   1718a:	491d      	ldr	r1, [pc, #116]	; (17200 <processOnSMS+0x2220>)
   1718c:	230c      	movs	r3, #12
   1718e:	2008      	movs	r0, #8
   17190:	4684      	mov	ip, r0
   17192:	44bc      	add	ip, r7
   17194:	4463      	add	r3, ip
   17196:	0018      	movs	r0, r3
   17198:	4b1a      	ldr	r3, [pc, #104]	; (17204 <processOnSMS+0x2224>)
   1719a:	4798      	blx	r3
		}
		setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
   1719c:	23a0      	movs	r3, #160	; 0xa0
   1719e:	005b      	lsls	r3, r3, #1
   171a0:	2208      	movs	r2, #8
   171a2:	4694      	mov	ip, r2
   171a4:	44bc      	add	ip, r7
   171a6:	4463      	add	r3, ip
   171a8:	681b      	ldr	r3, [r3, #0]
   171aa:	2200      	movs	r2, #0
   171ac:	0019      	movs	r1, r3
   171ae:	2005      	movs	r0, #5
   171b0:	4b15      	ldr	r3, [pc, #84]	; (17208 <processOnSMS+0x2228>)
   171b2:	4798      	blx	r3
		gsm_send_sms(phone_number,resep_msg);
   171b4:	230c      	movs	r3, #12
   171b6:	2208      	movs	r2, #8
   171b8:	18ba      	adds	r2, r7, r2
   171ba:	18d2      	adds	r2, r2, r3
   171bc:	23a0      	movs	r3, #160	; 0xa0
   171be:	005b      	lsls	r3, r3, #1
   171c0:	2108      	movs	r1, #8
   171c2:	468c      	mov	ip, r1
   171c4:	44bc      	add	ip, r7
   171c6:	4463      	add	r3, ip
   171c8:	681b      	ldr	r3, [r3, #0]
   171ca:	0011      	movs	r1, r2
   171cc:	0018      	movs	r0, r3
   171ce:	4b0f      	ldr	r3, [pc, #60]	; (1720c <processOnSMS+0x222c>)
   171d0:	4798      	blx	r3
   171d2:	e000      	b.n	171d6 <processOnSMS+0x21f6>
		return;
   171d4:	46c0      	nop			; (mov r8, r8)
	}
}
   171d6:	46bd      	mov	sp, r7
   171d8:	b04c      	add	sp, #304	; 0x130
   171da:	bc04      	pop	{r2}
   171dc:	4690      	mov	r8, r2
   171de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   171e0:	0002b07c 	.word	0x0002b07c
   171e4:	00014201 	.word	0x00014201
   171e8:	2000062c 	.word	0x2000062c
   171ec:	00029b47 	.word	0x00029b47
   171f0:	00029893 	.word	0x00029893
   171f4:	00010cad 	.word	0x00010cad
   171f8:	fffffeda 	.word	0xfffffeda
   171fc:	0002b080 	.word	0x0002b080
   17200:	0002b098 	.word	0x0002b098
   17204:	00029abd 	.word	0x00029abd
   17208:	0001d2b9 	.word	0x0001d2b9
   1720c:	00012b79 	.word	0x00012b79

00017210 <buildStatusMessage>:

void buildStatusMessage(char *resep_msg)
{
   17210:	b5f0      	push	{r4, r5, r6, r7, lr}
   17212:	b091      	sub	sp, #68	; 0x44
   17214:	af06      	add	r7, sp, #24
   17216:	6078      	str	r0, [r7, #4]
	uint8_t network= gsm_getsignalstrength();
   17218:	2327      	movs	r3, #39	; 0x27
   1721a:	18fc      	adds	r4, r7, r3
   1721c:	4b32      	ldr	r3, [pc, #200]	; (172e8 <buildStatusMessage+0xd8>)
   1721e:	4798      	blx	r3
   17220:	0003      	movs	r3, r0
   17222:	7023      	strb	r3, [r4, #0]
	char strACState[10],strSeq[7],strMotor[5];
	switch(structThreePhase_state.u8t_phase_ac_state)
   17224:	4b31      	ldr	r3, [pc, #196]	; (172ec <buildStatusMessage+0xdc>)
   17226:	785b      	ldrb	r3, [r3, #1]
   17228:	b2db      	uxtb	r3, r3
   1722a:	2b02      	cmp	r3, #2
   1722c:	d009      	beq.n	17242 <buildStatusMessage+0x32>
   1722e:	2b03      	cmp	r3, #3
   17230:	d10d      	bne.n	1724e <buildStatusMessage+0x3e>
	{
		case AC_3PH:
		sprintf(strACState,(const uint8_t*)("ON"));
   17232:	231c      	movs	r3, #28
   17234:	18fb      	adds	r3, r7, r3
   17236:	4a2e      	ldr	r2, [pc, #184]	; (172f0 <buildStatusMessage+0xe0>)
   17238:	8811      	ldrh	r1, [r2, #0]
   1723a:	8019      	strh	r1, [r3, #0]
   1723c:	7892      	ldrb	r2, [r2, #2]
   1723e:	709a      	strb	r2, [r3, #2]
		break;
   17240:	e00a      	b.n	17258 <buildStatusMessage+0x48>
		case AC_2PH:
		sprintf(strACState,(const uint8_t*)("2 PHASE"));
   17242:	231c      	movs	r3, #28
   17244:	18fb      	adds	r3, r7, r3
   17246:	4a2b      	ldr	r2, [pc, #172]	; (172f4 <buildStatusMessage+0xe4>)
   17248:	ca03      	ldmia	r2!, {r0, r1}
   1724a:	c303      	stmia	r3!, {r0, r1}
		break;
   1724c:	e004      	b.n	17258 <buildStatusMessage+0x48>
		default:
		sprintf(strACState,(const uint8_t*)("OFF"));
   1724e:	231c      	movs	r3, #28
   17250:	18fb      	adds	r3, r7, r3
   17252:	4a29      	ldr	r2, [pc, #164]	; (172f8 <buildStatusMessage+0xe8>)
   17254:	601a      	str	r2, [r3, #0]
		break;
   17256:	46c0      	nop			; (mov r8, r8)
	}
	
	if(structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
   17258:	4b24      	ldr	r3, [pc, #144]	; (172ec <buildStatusMessage+0xdc>)
   1725a:	781b      	ldrb	r3, [r3, #0]
   1725c:	b2db      	uxtb	r3, r3
   1725e:	2b02      	cmp	r3, #2
   17260:	d107      	bne.n	17272 <buildStatusMessage+0x62>
	{
		sprintf(strSeq,(const uint8_t*)("OK"));
   17262:	2314      	movs	r3, #20
   17264:	18fb      	adds	r3, r7, r3
   17266:	4a25      	ldr	r2, [pc, #148]	; (172fc <buildStatusMessage+0xec>)
   17268:	8811      	ldrh	r1, [r2, #0]
   1726a:	8019      	strh	r1, [r3, #0]
   1726c:	7892      	ldrb	r2, [r2, #2]
   1726e:	709a      	strb	r2, [r3, #2]
   17270:	e006      	b.n	17280 <buildStatusMessage+0x70>
	}
	else
	{
		sprintf(strSeq,(const uint8_t*)("ERROR"));
   17272:	2314      	movs	r3, #20
   17274:	18fb      	adds	r3, r7, r3
   17276:	4a22      	ldr	r2, [pc, #136]	; (17300 <buildStatusMessage+0xf0>)
   17278:	6811      	ldr	r1, [r2, #0]
   1727a:	6019      	str	r1, [r3, #0]
   1727c:	8892      	ldrh	r2, [r2, #4]
   1727e:	809a      	strh	r2, [r3, #4]
	}
	
	if(getMotorState())
   17280:	4b20      	ldr	r3, [pc, #128]	; (17304 <buildStatusMessage+0xf4>)
   17282:	4798      	blx	r3
   17284:	1e03      	subs	r3, r0, #0
   17286:	d007      	beq.n	17298 <buildStatusMessage+0x88>
	{
		sprintf(strMotor,(const uint8_t*)("ON"));
   17288:	230c      	movs	r3, #12
   1728a:	18fb      	adds	r3, r7, r3
   1728c:	4a18      	ldr	r2, [pc, #96]	; (172f0 <buildStatusMessage+0xe0>)
   1728e:	8811      	ldrh	r1, [r2, #0]
   17290:	8019      	strh	r1, [r3, #0]
   17292:	7892      	ldrb	r2, [r2, #2]
   17294:	709a      	strb	r2, [r3, #2]
   17296:	e003      	b.n	172a0 <buildStatusMessage+0x90>
	}
	else
	{
		sprintf(strMotor,(const uint8_t*)("OFF"));
   17298:	230c      	movs	r3, #12
   1729a:	18fb      	adds	r3, r7, r3
   1729c:	4a16      	ldr	r2, [pc, #88]	; (172f8 <buildStatusMessage+0xe8>)
   1729e:	601a      	str	r2, [r3, #0]
	}
	
	sprintf(resep_msg,"RY: %d YB: %d BR: %d\nAC: %s\nSequence: %s\nMotor: %s\nCurrent: %dA\nNetwork: %d",
   172a0:	4b19      	ldr	r3, [pc, #100]	; (17308 <buildStatusMessage+0xf8>)
   172a2:	681c      	ldr	r4, [r3, #0]
   172a4:	4b18      	ldr	r3, [pc, #96]	; (17308 <buildStatusMessage+0xf8>)
   172a6:	685d      	ldr	r5, [r3, #4]
   172a8:	4b17      	ldr	r3, [pc, #92]	; (17308 <buildStatusMessage+0xf8>)
   172aa:	689b      	ldr	r3, [r3, #8]
	Analog_Parameter_Struct.PhaseRY_Voltage,Analog_Parameter_Struct.PhaseYB_Voltage,Analog_Parameter_Struct.PhaseBR_Voltage,
	strACState,strSeq,strMotor,Analog_Parameter_Struct.Motor_Current_IntPart,network);
   172ac:	4a16      	ldr	r2, [pc, #88]	; (17308 <buildStatusMessage+0xf8>)
   172ae:	8a92      	ldrh	r2, [r2, #20]
   172b0:	b292      	uxth	r2, r2
	sprintf(resep_msg,"RY: %d YB: %d BR: %d\nAC: %s\nSequence: %s\nMotor: %s\nCurrent: %dA\nNetwork: %d",
   172b2:	0016      	movs	r6, r2
   172b4:	2227      	movs	r2, #39	; 0x27
   172b6:	18ba      	adds	r2, r7, r2
   172b8:	7812      	ldrb	r2, [r2, #0]
   172ba:	4914      	ldr	r1, [pc, #80]	; (1730c <buildStatusMessage+0xfc>)
   172bc:	6878      	ldr	r0, [r7, #4]
   172be:	9205      	str	r2, [sp, #20]
   172c0:	9604      	str	r6, [sp, #16]
   172c2:	220c      	movs	r2, #12
   172c4:	18ba      	adds	r2, r7, r2
   172c6:	9203      	str	r2, [sp, #12]
   172c8:	2214      	movs	r2, #20
   172ca:	18ba      	adds	r2, r7, r2
   172cc:	9202      	str	r2, [sp, #8]
   172ce:	221c      	movs	r2, #28
   172d0:	18ba      	adds	r2, r7, r2
   172d2:	9201      	str	r2, [sp, #4]
   172d4:	9300      	str	r3, [sp, #0]
   172d6:	002b      	movs	r3, r5
   172d8:	0022      	movs	r2, r4
   172da:	4c0d      	ldr	r4, [pc, #52]	; (17310 <buildStatusMessage+0x100>)
   172dc:	47a0      	blx	r4
}
   172de:	46c0      	nop			; (mov r8, r8)
   172e0:	46bd      	mov	sp, r7
   172e2:	b00b      	add	sp, #44	; 0x2c
   172e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   172e6:	46c0      	nop			; (mov r8, r8)
   172e8:	000128d1 	.word	0x000128d1
   172ec:	20000748 	.word	0x20000748
   172f0:	0002b0a4 	.word	0x0002b0a4
   172f4:	0002b0a8 	.word	0x0002b0a8
   172f8:	0046464f 	.word	0x0046464f
   172fc:	0002b0b0 	.word	0x0002b0b0
   17300:	0002b0b4 	.word	0x0002b0b4
   17304:	0001b311 	.word	0x0001b311
   17308:	200006e8 	.word	0x200006e8
   1730c:	0002b0bc 	.word	0x0002b0bc
   17310:	00029abd 	.word	0x00029abd

00017314 <checkNumber>:


bool checkNumber(char *number)
{
   17314:	b580      	push	{r7, lr}
   17316:	b082      	sub	sp, #8
   17318:	af00      	add	r7, sp, #0
   1731a:	6078      	str	r0, [r7, #4]
	if ((isAdmin(number)) || (checkExists(number)<user_count_struct.total_user_no_count))
   1731c:	687b      	ldr	r3, [r7, #4]
   1731e:	0018      	movs	r0, r3
   17320:	4b0a      	ldr	r3, [pc, #40]	; (1734c <checkNumber+0x38>)
   17322:	4798      	blx	r3
   17324:	1e03      	subs	r3, r0, #0
   17326:	d109      	bne.n	1733c <checkNumber+0x28>
   17328:	687b      	ldr	r3, [r7, #4]
   1732a:	0018      	movs	r0, r3
   1732c:	4b08      	ldr	r3, [pc, #32]	; (17350 <checkNumber+0x3c>)
   1732e:	4798      	blx	r3
   17330:	0003      	movs	r3, r0
   17332:	001a      	movs	r2, r3
   17334:	4b07      	ldr	r3, [pc, #28]	; (17354 <checkNumber+0x40>)
   17336:	785b      	ldrb	r3, [r3, #1]
   17338:	429a      	cmp	r2, r3
   1733a:	d201      	bcs.n	17340 <checkNumber+0x2c>
	{
		return true;
   1733c:	2301      	movs	r3, #1
   1733e:	e000      	b.n	17342 <checkNumber+0x2e>
	}
	else
	{
		return false;
   17340:	2300      	movs	r3, #0
	}
}
   17342:	0018      	movs	r0, r3
   17344:	46bd      	mov	sp, r7
   17346:	b002      	add	sp, #8
   17348:	bd80      	pop	{r7, pc}
   1734a:	46c0      	nop			; (mov r8, r8)
   1734c:	00011a69 	.word	0x00011a69
   17350:	00010de9 	.word	0x00010de9
   17354:	20000614 	.word	0x20000614

00017358 <checkNoCallTime>:

bool checkNoCallTime(void)
{
   17358:	b580      	push	{r7, lr}
   1735a:	b082      	sub	sp, #8
   1735c:	af00      	add	r7, sp, #0
	uint8_t globalHours, globalMinutes;
	getSystemTime(&globalHours,&globalMinutes);
   1735e:	1dba      	adds	r2, r7, #6
   17360:	1dfb      	adds	r3, r7, #7
   17362:	0011      	movs	r1, r2
   17364:	0018      	movs	r0, r3
   17366:	4b2b      	ldr	r3, [pc, #172]	; (17414 <checkNoCallTime+0xbc>)
   17368:	4798      	blx	r3
	if(globalHours >= (user_settings_parameter_struct.noCallStartTimeHourAddress) && globalHours <=(user_settings_parameter_struct.noCallStopTimeHourAddress))
   1736a:	4b2b      	ldr	r3, [pc, #172]	; (17418 <checkNoCallTime+0xc0>)
   1736c:	7a9a      	ldrb	r2, [r3, #10]
   1736e:	1dfb      	adds	r3, r7, #7
   17370:	781b      	ldrb	r3, [r3, #0]
   17372:	429a      	cmp	r2, r3
   17374:	d849      	bhi.n	1740a <checkNoCallTime+0xb2>
   17376:	4b28      	ldr	r3, [pc, #160]	; (17418 <checkNoCallTime+0xc0>)
   17378:	7b1a      	ldrb	r2, [r3, #12]
   1737a:	1dfb      	adds	r3, r7, #7
   1737c:	781b      	ldrb	r3, [r3, #0]
   1737e:	429a      	cmp	r2, r3
   17380:	d343      	bcc.n	1740a <checkNoCallTime+0xb2>
	{
		if(user_settings_parameter_struct.noCallStartTimeHourAddress==user_settings_parameter_struct.noCallStopTimeHourAddress)
   17382:	4b25      	ldr	r3, [pc, #148]	; (17418 <checkNoCallTime+0xc0>)
   17384:	7a9a      	ldrb	r2, [r3, #10]
   17386:	4b24      	ldr	r3, [pc, #144]	; (17418 <checkNoCallTime+0xc0>)
   17388:	7b1b      	ldrb	r3, [r3, #12]
   1738a:	429a      	cmp	r2, r3
   1738c:	d10f      	bne.n	173ae <checkNoCallTime+0x56>
		{
			if(globalMinutes>=(user_settings_parameter_struct.noCallStartTimeMinuteAddress) && globalMinutes<=(user_settings_parameter_struct.noCallStopTimeMinuteAddress))
   1738e:	4b22      	ldr	r3, [pc, #136]	; (17418 <checkNoCallTime+0xc0>)
   17390:	7ada      	ldrb	r2, [r3, #11]
   17392:	1dbb      	adds	r3, r7, #6
   17394:	781b      	ldrb	r3, [r3, #0]
   17396:	429a      	cmp	r2, r3
   17398:	d807      	bhi.n	173aa <checkNoCallTime+0x52>
   1739a:	4b1f      	ldr	r3, [pc, #124]	; (17418 <checkNoCallTime+0xc0>)
   1739c:	7b5a      	ldrb	r2, [r3, #13]
   1739e:	1dbb      	adds	r3, r7, #6
   173a0:	781b      	ldrb	r3, [r3, #0]
   173a2:	429a      	cmp	r2, r3
   173a4:	d301      	bcc.n	173aa <checkNoCallTime+0x52>
			return true;
   173a6:	2301      	movs	r3, #1
   173a8:	e030      	b.n	1740c <checkNoCallTime+0xb4>
			else
			return false;
   173aa:	2300      	movs	r3, #0
   173ac:	e02e      	b.n	1740c <checkNoCallTime+0xb4>
		}
		if(globalHours==user_settings_parameter_struct.noCallStartTimeHourAddress)
   173ae:	4b1a      	ldr	r3, [pc, #104]	; (17418 <checkNoCallTime+0xc0>)
   173b0:	7a9a      	ldrb	r2, [r3, #10]
   173b2:	1dfb      	adds	r3, r7, #7
   173b4:	781b      	ldrb	r3, [r3, #0]
   173b6:	429a      	cmp	r2, r3
   173b8:	d109      	bne.n	173ce <checkNoCallTime+0x76>
		{
			if(globalMinutes>=user_settings_parameter_struct.noCallStartTimeMinuteAddress)
   173ba:	4b17      	ldr	r3, [pc, #92]	; (17418 <checkNoCallTime+0xc0>)
   173bc:	7ada      	ldrb	r2, [r3, #11]
   173be:	1dbb      	adds	r3, r7, #6
   173c0:	781b      	ldrb	r3, [r3, #0]
   173c2:	429a      	cmp	r2, r3
   173c4:	d801      	bhi.n	173ca <checkNoCallTime+0x72>
			return true;
   173c6:	2301      	movs	r3, #1
   173c8:	e020      	b.n	1740c <checkNoCallTime+0xb4>
			else
			return false;
   173ca:	2300      	movs	r3, #0
   173cc:	e01e      	b.n	1740c <checkNoCallTime+0xb4>
		}
		if(globalHours==user_settings_parameter_struct.noCallStopTimeHourAddress)
   173ce:	4b12      	ldr	r3, [pc, #72]	; (17418 <checkNoCallTime+0xc0>)
   173d0:	7b1a      	ldrb	r2, [r3, #12]
   173d2:	1dfb      	adds	r3, r7, #7
   173d4:	781b      	ldrb	r3, [r3, #0]
   173d6:	429a      	cmp	r2, r3
   173d8:	d109      	bne.n	173ee <checkNoCallTime+0x96>
		{
			if(globalMinutes<=(user_settings_parameter_struct.noCallStopTimeMinuteAddress))
   173da:	4b0f      	ldr	r3, [pc, #60]	; (17418 <checkNoCallTime+0xc0>)
   173dc:	7b5a      	ldrb	r2, [r3, #13]
   173de:	1dbb      	adds	r3, r7, #6
   173e0:	781b      	ldrb	r3, [r3, #0]
   173e2:	429a      	cmp	r2, r3
   173e4:	d301      	bcc.n	173ea <checkNoCallTime+0x92>
			return true;
   173e6:	2301      	movs	r3, #1
   173e8:	e010      	b.n	1740c <checkNoCallTime+0xb4>
			else
			return false;
   173ea:	2300      	movs	r3, #0
   173ec:	e00e      	b.n	1740c <checkNoCallTime+0xb4>
		}
		if(globalHours > (user_settings_parameter_struct.noCallStartTimeHourAddress) && globalHours < (user_settings_parameter_struct.noCallStopTimeHourAddress))
   173ee:	4b0a      	ldr	r3, [pc, #40]	; (17418 <checkNoCallTime+0xc0>)
   173f0:	7a9a      	ldrb	r2, [r3, #10]
   173f2:	1dfb      	adds	r3, r7, #7
   173f4:	781b      	ldrb	r3, [r3, #0]
   173f6:	429a      	cmp	r2, r3
   173f8:	d207      	bcs.n	1740a <checkNoCallTime+0xb2>
   173fa:	4b07      	ldr	r3, [pc, #28]	; (17418 <checkNoCallTime+0xc0>)
   173fc:	7b1a      	ldrb	r2, [r3, #12]
   173fe:	1dfb      	adds	r3, r7, #7
   17400:	781b      	ldrb	r3, [r3, #0]
   17402:	429a      	cmp	r2, r3
   17404:	d901      	bls.n	1740a <checkNoCallTime+0xb2>
		return true;
   17406:	2301      	movs	r3, #1
   17408:	e000      	b.n	1740c <checkNoCallTime+0xb4>
	}
	return false;
   1740a:	2300      	movs	r3, #0
}
   1740c:	0018      	movs	r0, r3
   1740e:	46bd      	mov	sp, r7
   17410:	b002      	add	sp, #8
   17412:	bd80      	pop	{r7, pc}
   17414:	00017655 	.word	0x00017655
   17418:	20000654 	.word	0x20000654

0001741c <verifyRemoteNumber>:

void verifyRemoteNumber(void)
{
   1741c:	b580      	push	{r7, lr}
   1741e:	af00      	add	r7, sp, #0
	sendSMS(("VMM01"),true,SEND_TO_M2M_REMOTE);
   17420:	4b04      	ldr	r3, [pc, #16]	; (17434 <verifyRemoteNumber+0x18>)
   17422:	2201      	movs	r2, #1
   17424:	2101      	movs	r1, #1
   17426:	0018      	movs	r0, r3
   17428:	4b03      	ldr	r3, [pc, #12]	; (17438 <verifyRemoteNumber+0x1c>)
   1742a:	4798      	blx	r3
}
   1742c:	46c0      	nop			; (mov r8, r8)
   1742e:	46bd      	mov	sp, r7
   17430:	bd80      	pop	{r7, pc}
   17432:	46c0      	nop			; (mov r8, r8)
   17434:	0002b108 	.word	0x0002b108
   17438:	0001743d 	.word	0x0001743d

0001743c <sendSMS>:

void sendSMS(char *msg, bool predefMsg, uint8_t isM2M)  ////void sendSMS(char *msg, bool predefMsg = false, uint8_t isM2M);
{
   1743c:	b580      	push	{r7, lr}
   1743e:	b08e      	sub	sp, #56	; 0x38
   17440:	af00      	add	r7, sp, #0
   17442:	6078      	str	r0, [r7, #4]
   17444:	0008      	movs	r0, r1
   17446:	0011      	movs	r1, r2
   17448:	1cfb      	adds	r3, r7, #3
   1744a:	1c02      	adds	r2, r0, #0
   1744c:	701a      	strb	r2, [r3, #0]
   1744e:	1cbb      	adds	r3, r7, #2
   17450:	1c0a      	adds	r2, r1, #0
   17452:	701a      	strb	r2, [r3, #0]
	inCall=true;
   17454:	4b55      	ldr	r3, [pc, #340]	; (175ac <sendSMS+0x170>)
   17456:	2201      	movs	r2, #1
   17458:	701a      	strb	r2, [r3, #0]
	if (!predefMsg)
   1745a:	1cfb      	adds	r3, r7, #3
   1745c:	781b      	ldrb	r3, [r3, #0]
   1745e:	2201      	movs	r2, #1
   17460:	4053      	eors	r3, r2
   17462:	b2db      	uxtb	r3, r3
   17464:	2b00      	cmp	r3, #0
   17466:	d048      	beq.n	174fa <sendSMS+0xbe>
	{
		switch(actionType)
   17468:	4b51      	ldr	r3, [pc, #324]	; (175b0 <sendSMS+0x174>)
   1746a:	781b      	ldrb	r3, [r3, #0]
   1746c:	3b43      	subs	r3, #67	; 0x43
   1746e:	2b12      	cmp	r3, #18
   17470:	d900      	bls.n	17474 <sendSMS+0x38>
   17472:	e096      	b.n	175a2 <sendSMS+0x166>
   17474:	009a      	lsls	r2, r3, #2
   17476:	4b4f      	ldr	r3, [pc, #316]	; (175b4 <sendSMS+0x178>)
   17478:	18d3      	adds	r3, r2, r3
   1747a:	681b      	ldr	r3, [r3, #0]
   1747c:	469f      	mov	pc, r3
		{
			case 'S':
			strcat(msg,STR_MOTOR);
   1747e:	687b      	ldr	r3, [r7, #4]
   17480:	0018      	movs	r0, r3
   17482:	4b4d      	ldr	r3, [pc, #308]	; (175b8 <sendSMS+0x17c>)
   17484:	4798      	blx	r3
   17486:	0003      	movs	r3, r0
   17488:	001a      	movs	r2, r3
   1748a:	687b      	ldr	r3, [r7, #4]
   1748c:	189a      	adds	r2, r3, r2
   1748e:	4b4b      	ldr	r3, [pc, #300]	; (175bc <sendSMS+0x180>)
   17490:	0010      	movs	r0, r2
   17492:	0019      	movs	r1, r3
   17494:	2307      	movs	r3, #7
   17496:	001a      	movs	r2, r3
   17498:	4b49      	ldr	r3, [pc, #292]	; (175c0 <sendSMS+0x184>)
   1749a:	4798      	blx	r3
			strcat(msg,STR_ON);
   1749c:	687b      	ldr	r3, [r7, #4]
   1749e:	0018      	movs	r0, r3
   174a0:	4b45      	ldr	r3, [pc, #276]	; (175b8 <sendSMS+0x17c>)
   174a2:	4798      	blx	r3
   174a4:	0003      	movs	r3, r0
   174a6:	001a      	movs	r2, r3
   174a8:	687b      	ldr	r3, [r7, #4]
   174aa:	189a      	adds	r2, r3, r2
   174ac:	4b45      	ldr	r3, [pc, #276]	; (175c4 <sendSMS+0x188>)
   174ae:	0010      	movs	r0, r2
   174b0:	0019      	movs	r1, r3
   174b2:	2303      	movs	r3, #3
   174b4:	001a      	movs	r2, r3
   174b6:	4b42      	ldr	r3, [pc, #264]	; (175c0 <sendSMS+0x184>)
   174b8:	4798      	blx	r3
			break;
   174ba:	e01e      	b.n	174fa <sendSMS+0xbe>
			case 'O':
			case 'U':
			case 'C':
			case 'F':
			strcat(msg,STR_MOTOR);
   174bc:	687b      	ldr	r3, [r7, #4]
   174be:	0018      	movs	r0, r3
   174c0:	4b3d      	ldr	r3, [pc, #244]	; (175b8 <sendSMS+0x17c>)
   174c2:	4798      	blx	r3
   174c4:	0003      	movs	r3, r0
   174c6:	001a      	movs	r2, r3
   174c8:	687b      	ldr	r3, [r7, #4]
   174ca:	189a      	adds	r2, r3, r2
   174cc:	4b3b      	ldr	r3, [pc, #236]	; (175bc <sendSMS+0x180>)
   174ce:	0010      	movs	r0, r2
   174d0:	0019      	movs	r1, r3
   174d2:	2307      	movs	r3, #7
   174d4:	001a      	movs	r2, r3
   174d6:	4b3a      	ldr	r3, [pc, #232]	; (175c0 <sendSMS+0x184>)
   174d8:	4798      	blx	r3
			strcat(msg,STR_OFF);
   174da:	687b      	ldr	r3, [r7, #4]
   174dc:	0018      	movs	r0, r3
   174de:	4b36      	ldr	r3, [pc, #216]	; (175b8 <sendSMS+0x17c>)
   174e0:	4798      	blx	r3
   174e2:	0003      	movs	r3, r0
   174e4:	001a      	movs	r2, r3
   174e6:	687b      	ldr	r3, [r7, #4]
   174e8:	189a      	adds	r2, r3, r2
   174ea:	4b37      	ldr	r3, [pc, #220]	; (175c8 <sendSMS+0x18c>)
   174ec:	0010      	movs	r0, r2
   174ee:	0019      	movs	r1, r3
   174f0:	2304      	movs	r3, #4
   174f2:	001a      	movs	r2, r3
   174f4:	4b32      	ldr	r3, [pc, #200]	; (175c0 <sendSMS+0x184>)
   174f6:	4798      	blx	r3
			break;
   174f8:	46c0      	nop			; (mov r8, r8)
		}
	}
	
	char phone_number[20];
	
	if(isM2M==SEND_TO_M2M_MASTER)
   174fa:	1cbb      	adds	r3, r7, #2
   174fc:	781b      	ldrb	r3, [r3, #0]
   174fe:	2b02      	cmp	r3, #2
   17500:	d105      	bne.n	1750e <sendSMS+0xd2>
	{
		getM2MNumber(phone_number);
   17502:	2324      	movs	r3, #36	; 0x24
   17504:	18fb      	adds	r3, r7, r3
   17506:	0018      	movs	r0, r3
   17508:	4b30      	ldr	r3, [pc, #192]	; (175cc <sendSMS+0x190>)
   1750a:	4798      	blx	r3
   1750c:	e034      	b.n	17578 <sendSMS+0x13c>
	}
	else if (isM2M==SEND_TO_M2M_REMOTE)
   1750e:	1cbb      	adds	r3, r7, #2
   17510:	781b      	ldrb	r3, [r3, #0]
   17512:	2b01      	cmp	r3, #1
   17514:	d109      	bne.n	1752a <sendSMS+0xee>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   17516:	4b2e      	ldr	r3, [pc, #184]	; (175d0 <sendSMS+0x194>)
   17518:	78db      	ldrb	r3, [r3, #3]
   1751a:	2b00      	cmp	r3, #0
   1751c:	d02c      	beq.n	17578 <sendSMS+0x13c>
		{
			getM2MRemoteNumber(phone_number);
   1751e:	2324      	movs	r3, #36	; 0x24
   17520:	18fb      	adds	r3, r7, r3
   17522:	0018      	movs	r0, r3
   17524:	4b2b      	ldr	r3, [pc, #172]	; (175d4 <sendSMS+0x198>)
   17526:	4798      	blx	r3
   17528:	e026      	b.n	17578 <sendSMS+0x13c>
		}
	}
	else
	{
		if (isMsgFromAdmin)
   1752a:	4b2b      	ldr	r3, [pc, #172]	; (175d8 <sendSMS+0x19c>)
   1752c:	781b      	ldrb	r3, [r3, #0]
   1752e:	2b00      	cmp	r3, #0
   17530:	d01d      	beq.n	1756e <sendSMS+0x132>
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
   17532:	4b2a      	ldr	r3, [pc, #168]	; (175dc <sendSMS+0x1a0>)
   17534:	223c      	movs	r2, #60	; 0x3c
   17536:	2100      	movs	r1, #0
   17538:	0018      	movs	r0, r3
   1753a:	4b29      	ldr	r3, [pc, #164]	; (175e0 <sendSMS+0x1a4>)
   1753c:	4798      	blx	r3
			eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE, page_data);
   1753e:	4b27      	ldr	r3, [pc, #156]	; (175dc <sendSMS+0x1a0>)
   17540:	0019      	movs	r1, r3
   17542:	2003      	movs	r0, #3
   17544:	4b27      	ldr	r3, [pc, #156]	; (175e4 <sendSMS+0x1a8>)
   17546:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
   17548:	230c      	movs	r3, #12
   1754a:	18fa      	adds	r2, r7, r3
   1754c:	4b23      	ldr	r3, [pc, #140]	; (175dc <sendSMS+0x1a0>)
   1754e:	0010      	movs	r0, r2
   17550:	0019      	movs	r1, r3
   17552:	2318      	movs	r3, #24
   17554:	001a      	movs	r2, r3
   17556:	4b1a      	ldr	r3, [pc, #104]	; (175c0 <sendSMS+0x184>)
   17558:	4798      	blx	r3
			strcpy(phone_number,mobile_no.mobile_no_ee);
   1755a:	230c      	movs	r3, #12
   1755c:	18fb      	adds	r3, r7, r3
   1755e:	1d1a      	adds	r2, r3, #4
   17560:	2324      	movs	r3, #36	; 0x24
   17562:	18fb      	adds	r3, r7, r3
   17564:	0011      	movs	r1, r2
   17566:	0018      	movs	r0, r3
   17568:	4b1f      	ldr	r3, [pc, #124]	; (175e8 <sendSMS+0x1ac>)
   1756a:	4798      	blx	r3
   1756c:	e004      	b.n	17578 <sendSMS+0x13c>
		}
		else
		{
			getActiveNumber(phone_number);
   1756e:	2324      	movs	r3, #36	; 0x24
   17570:	18fb      	adds	r3, r7, r3
   17572:	0018      	movs	r0, r3
   17574:	4b1d      	ldr	r3, [pc, #116]	; (175ec <sendSMS+0x1b0>)
   17576:	4798      	blx	r3
		}
	}
	setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
   17578:	2324      	movs	r3, #36	; 0x24
   1757a:	18fb      	adds	r3, r7, r3
   1757c:	2200      	movs	r2, #0
   1757e:	0019      	movs	r1, r3
   17580:	2005      	movs	r0, #5
   17582:	4b1b      	ldr	r3, [pc, #108]	; (175f0 <sendSMS+0x1b4>)
   17584:	4798      	blx	r3
	gsm_send_sms(phone_number,msg);
   17586:	687a      	ldr	r2, [r7, #4]
   17588:	2324      	movs	r3, #36	; 0x24
   1758a:	18fb      	adds	r3, r7, r3
   1758c:	0011      	movs	r1, r2
   1758e:	0018      	movs	r0, r3
   17590:	4b18      	ldr	r3, [pc, #96]	; (175f4 <sendSMS+0x1b8>)
   17592:	4798      	blx	r3
	isMsgFromAdmin = false;
   17594:	4b10      	ldr	r3, [pc, #64]	; (175d8 <sendSMS+0x19c>)
   17596:	2200      	movs	r2, #0
   17598:	701a      	strb	r2, [r3, #0]
	inCall=false;
   1759a:	4b04      	ldr	r3, [pc, #16]	; (175ac <sendSMS+0x170>)
   1759c:	2200      	movs	r2, #0
   1759e:	701a      	strb	r2, [r3, #0]
   175a0:	e000      	b.n	175a4 <sendSMS+0x168>
			return;
   175a2:	46c0      	nop			; (mov r8, r8)
}
   175a4:	46bd      	mov	sp, r7
   175a6:	b00e      	add	sp, #56	; 0x38
   175a8:	bd80      	pop	{r7, pc}
   175aa:	46c0      	nop			; (mov r8, r8)
   175ac:	2000079c 	.word	0x2000079c
   175b0:	20000763 	.word	0x20000763
   175b4:	0002b184 	.word	0x0002b184
   175b8:	00029b47 	.word	0x00029b47
   175bc:	0002b110 	.word	0x0002b110
   175c0:	00029881 	.word	0x00029881
   175c4:	0002b0a4 	.word	0x0002b0a4
   175c8:	0002b118 	.word	0x0002b118
   175cc:	00010ac9 	.word	0x00010ac9
   175d0:	2000062c 	.word	0x2000062c
   175d4:	00010b05 	.word	0x00010b05
   175d8:	20000777 	.word	0x20000777
   175dc:	20000584 	.word	0x20000584
   175e0:	000298b7 	.word	0x000298b7
   175e4:	0002427d 	.word	0x0002427d
   175e8:	00029b37 	.word	0x00029b37
   175ec:	00010d1d 	.word	0x00010d1d
   175f0:	0001d2b9 	.word	0x0001d2b9
   175f4:	00012b79 	.word	0x00012b79

000175f8 <sendDTMFTone>:

void sendDTMFTone(uint8_t eventNo)
{
   175f8:	b580      	push	{r7, lr}
   175fa:	b082      	sub	sp, #8
   175fc:	af00      	add	r7, sp, #0
   175fe:	0002      	movs	r2, r0
   17600:	1dfb      	adds	r3, r7, #7
   17602:	701a      	strb	r2, [r3, #0]
	if(eventNo==0xFF)
   17604:	1dfb      	adds	r3, r7, #7
   17606:	781b      	ldrb	r3, [r3, #0]
   17608:	2bff      	cmp	r3, #255	; 0xff
   1760a:	d103      	bne.n	17614 <sendDTMFTone+0x1c>
	{
		gsm_send_DTMF_Tone('A');
   1760c:	2041      	movs	r0, #65	; 0x41
   1760e:	4b0f      	ldr	r3, [pc, #60]	; (1764c <sendDTMFTone+0x54>)
   17610:	4798      	blx	r3
	}
	else if (eventNo==1 && factory_settings_parameter_struct.ENABLE_M2M)
	{
		gsm_send_DTMF_Tone('C');
	}
}
   17612:	e016      	b.n	17642 <sendDTMFTone+0x4a>
	else if (eventNo==0 && factory_settings_parameter_struct.ENABLE_M2M)
   17614:	1dfb      	adds	r3, r7, #7
   17616:	781b      	ldrb	r3, [r3, #0]
   17618:	2b00      	cmp	r3, #0
   1761a:	d107      	bne.n	1762c <sendDTMFTone+0x34>
   1761c:	4b0c      	ldr	r3, [pc, #48]	; (17650 <sendDTMFTone+0x58>)
   1761e:	78db      	ldrb	r3, [r3, #3]
   17620:	2b00      	cmp	r3, #0
   17622:	d003      	beq.n	1762c <sendDTMFTone+0x34>
		gsm_send_DTMF_Tone('D');
   17624:	2044      	movs	r0, #68	; 0x44
   17626:	4b09      	ldr	r3, [pc, #36]	; (1764c <sendDTMFTone+0x54>)
   17628:	4798      	blx	r3
}
   1762a:	e00a      	b.n	17642 <sendDTMFTone+0x4a>
	else if (eventNo==1 && factory_settings_parameter_struct.ENABLE_M2M)
   1762c:	1dfb      	adds	r3, r7, #7
   1762e:	781b      	ldrb	r3, [r3, #0]
   17630:	2b01      	cmp	r3, #1
   17632:	d106      	bne.n	17642 <sendDTMFTone+0x4a>
   17634:	4b06      	ldr	r3, [pc, #24]	; (17650 <sendDTMFTone+0x58>)
   17636:	78db      	ldrb	r3, [r3, #3]
   17638:	2b00      	cmp	r3, #0
   1763a:	d002      	beq.n	17642 <sendDTMFTone+0x4a>
		gsm_send_DTMF_Tone('C');
   1763c:	2043      	movs	r0, #67	; 0x43
   1763e:	4b03      	ldr	r3, [pc, #12]	; (1764c <sendDTMFTone+0x54>)
   17640:	4798      	blx	r3
}
   17642:	46c0      	nop			; (mov r8, r8)
   17644:	46bd      	mov	sp, r7
   17646:	b002      	add	sp, #8
   17648:	bd80      	pop	{r7, pc}
   1764a:	46c0      	nop			; (mov r8, r8)
   1764c:	00012fed 	.word	0x00012fed
   17650:	2000062c 	.word	0x2000062c

00017654 <getSystemTime>:

void getSystemTime(uint8_t *Hours, uint8_t *Minutes)
{
   17654:	b580      	push	{r7, lr}
   17656:	b082      	sub	sp, #8
   17658:	af00      	add	r7, sp, #0
   1765a:	6078      	str	r0, [r7, #4]
   1765c:	6039      	str	r1, [r7, #0]
	if (gsm_get_internal_rtc_time() == GSM_ERROR_NONE)
   1765e:	4b09      	ldr	r3, [pc, #36]	; (17684 <getSystemTime+0x30>)
   17660:	4798      	blx	r3
   17662:	1e03      	subs	r3, r0, #0
   17664:	d109      	bne.n	1767a <getSystemTime+0x26>
	{
		*Hours = struct_internal_rtc.Network_hour;
   17666:	4b08      	ldr	r3, [pc, #32]	; (17688 <getSystemTime+0x34>)
   17668:	78db      	ldrb	r3, [r3, #3]
   1766a:	b2da      	uxtb	r2, r3
   1766c:	687b      	ldr	r3, [r7, #4]
   1766e:	701a      	strb	r2, [r3, #0]
		*Minutes = struct_internal_rtc.Network_minute;
   17670:	4b05      	ldr	r3, [pc, #20]	; (17688 <getSystemTime+0x34>)
   17672:	791b      	ldrb	r3, [r3, #4]
   17674:	b2da      	uxtb	r2, r3
   17676:	683b      	ldr	r3, [r7, #0]
   17678:	701a      	strb	r2, [r3, #0]
	}
}
   1767a:	46c0      	nop			; (mov r8, r8)
   1767c:	46bd      	mov	sp, r7
   1767e:	b002      	add	sp, #8
   17680:	bd80      	pop	{r7, pc}
   17682:	46c0      	nop			; (mov r8, r8)
   17684:	000131cd 	.word	0x000131cd
   17688:	20000688 	.word	0x20000688

0001768c <checkSMSForPassCode>:


bool checkSMSForPassCode(char *receivedSMS)
{
   1768c:	b590      	push	{r4, r7, lr}
   1768e:	b087      	sub	sp, #28
   17690:	af00      	add	r7, sp, #0
   17692:	6078      	str	r0, [r7, #4]
	char passCode[10]={0};
   17694:	2308      	movs	r3, #8
   17696:	18fb      	adds	r3, r7, r3
   17698:	0018      	movs	r0, r3
   1769a:	230a      	movs	r3, #10
   1769c:	001a      	movs	r2, r3
   1769e:	2100      	movs	r1, #0
   176a0:	4b1f      	ldr	r3, [pc, #124]	; (17720 <checkSMSForPassCode+0x94>)
   176a2:	4798      	blx	r3
	uint32_t pCodeint = factory_settings_parameter_struct.DeviceId_ee + (factory_settings_parameter_struct.dateCode/2);
   176a4:	4b1f      	ldr	r3, [pc, #124]	; (17724 <checkSMSForPassCode+0x98>)
   176a6:	689a      	ldr	r2, [r3, #8]
   176a8:	4b1e      	ldr	r3, [pc, #120]	; (17724 <checkSMSForPassCode+0x98>)
   176aa:	68db      	ldr	r3, [r3, #12]
   176ac:	085b      	lsrs	r3, r3, #1
   176ae:	18d3      	adds	r3, r2, r3
   176b0:	617b      	str	r3, [r7, #20]
	pCodeint = pCodeint >> 4;
   176b2:	697b      	ldr	r3, [r7, #20]
   176b4:	091b      	lsrs	r3, r3, #4
   176b6:	617b      	str	r3, [r7, #20]
	pCodeint = pCodeint << 4;
   176b8:	697b      	ldr	r3, [r7, #20]
   176ba:	011b      	lsls	r3, r3, #4
   176bc:	617b      	str	r3, [r7, #20]
	pCodeint = pCodeint % 1000000L;
   176be:	697a      	ldr	r2, [r7, #20]
   176c0:	4b19      	ldr	r3, [pc, #100]	; (17728 <checkSMSForPassCode+0x9c>)
   176c2:	491a      	ldr	r1, [pc, #104]	; (1772c <checkSMSForPassCode+0xa0>)
   176c4:	0010      	movs	r0, r2
   176c6:	4798      	blx	r3
   176c8:	000b      	movs	r3, r1
   176ca:	617b      	str	r3, [r7, #20]
	
	sprintf(passCode, "~%u~",pCodeint);
   176cc:	697a      	ldr	r2, [r7, #20]
   176ce:	4918      	ldr	r1, [pc, #96]	; (17730 <checkSMSForPassCode+0xa4>)
   176d0:	2308      	movs	r3, #8
   176d2:	18fb      	adds	r3, r7, r3
   176d4:	0018      	movs	r0, r3
   176d6:	4b17      	ldr	r3, [pc, #92]	; (17734 <checkSMSForPassCode+0xa8>)
   176d8:	4798      	blx	r3
	
	if(strstr(receivedSMS,passCode))							//check passCode exists
   176da:	2308      	movs	r3, #8
   176dc:	18fa      	adds	r2, r7, r3
   176de:	687b      	ldr	r3, [r7, #4]
   176e0:	0011      	movs	r1, r2
   176e2:	0018      	movs	r0, r3
   176e4:	4b14      	ldr	r3, [pc, #80]	; (17738 <checkSMSForPassCode+0xac>)
   176e6:	4798      	blx	r3
   176e8:	1e03      	subs	r3, r0, #0
   176ea:	d013      	beq.n	17714 <checkSMSForPassCode+0x88>
	{
		memmove(receivedSMS,receivedSMS+strlen(passCode),strlen(receivedSMS));		//discard passPhrase
   176ec:	2308      	movs	r3, #8
   176ee:	18fb      	adds	r3, r7, r3
   176f0:	0018      	movs	r0, r3
   176f2:	4b12      	ldr	r3, [pc, #72]	; (1773c <checkSMSForPassCode+0xb0>)
   176f4:	4798      	blx	r3
   176f6:	0002      	movs	r2, r0
   176f8:	687b      	ldr	r3, [r7, #4]
   176fa:	189c      	adds	r4, r3, r2
   176fc:	687b      	ldr	r3, [r7, #4]
   176fe:	0018      	movs	r0, r3
   17700:	4b0e      	ldr	r3, [pc, #56]	; (1773c <checkSMSForPassCode+0xb0>)
   17702:	4798      	blx	r3
   17704:	0002      	movs	r2, r0
   17706:	687b      	ldr	r3, [r7, #4]
   17708:	0021      	movs	r1, r4
   1770a:	0018      	movs	r0, r3
   1770c:	4b0c      	ldr	r3, [pc, #48]	; (17740 <checkSMSForPassCode+0xb4>)
   1770e:	4798      	blx	r3
		return true;
   17710:	2301      	movs	r3, #1
   17712:	e000      	b.n	17716 <checkSMSForPassCode+0x8a>
	}

	return false;
   17714:	2300      	movs	r3, #0
}
   17716:	0018      	movs	r0, r3
   17718:	46bd      	mov	sp, r7
   1771a:	b007      	add	sp, #28
   1771c:	bd90      	pop	{r4, r7, pc}
   1771e:	46c0      	nop			; (mov r8, r8)
   17720:	000298b7 	.word	0x000298b7
   17724:	2000062c 	.word	0x2000062c
   17728:	00026d89 	.word	0x00026d89
   1772c:	000f4240 	.word	0x000f4240
   17730:	0002b11c 	.word	0x0002b11c
   17734:	00029abd 	.word	0x00029abd
   17738:	00029b77 	.word	0x00029b77
   1773c:	00029b47 	.word	0x00029b47
   17740:	00029893 	.word	0x00029893

00017744 <sendFWUpdateSMS>:

void sendFWUpdateSMS(void)
{
   17744:	b590      	push	{r4, r7, lr}
   17746:	b089      	sub	sp, #36	; 0x24
   17748:	af00      	add	r7, sp, #0
	if(bootloader_parameter.firmware_update_process_completed)
   1774a:	4b2f      	ldr	r3, [pc, #188]	; (17808 <sendFWUpdateSMS+0xc4>)
   1774c:	799b      	ldrb	r3, [r3, #6]
   1774e:	2b00      	cmp	r3, #0
   17750:	d055      	beq.n	177fe <sendFWUpdateSMS+0xba>
	{
		char uResp_SMS[25]={0};
   17752:	1d3b      	adds	r3, r7, #4
   17754:	0018      	movs	r0, r3
   17756:	2319      	movs	r3, #25
   17758:	001a      	movs	r2, r3
   1775a:	2100      	movs	r1, #0
   1775c:	4b2b      	ldr	r3, [pc, #172]	; (1780c <sendFWUpdateSMS+0xc8>)
   1775e:	4798      	blx	r3
		
		/*Firmware update Completed Successfully*/
		if(bootloader_parameter.firmware_update_error_code==0)
   17760:	4b29      	ldr	r3, [pc, #164]	; (17808 <sendFWUpdateSMS+0xc4>)
   17762:	79db      	ldrb	r3, [r3, #7]
   17764:	2b00      	cmp	r3, #0
   17766:	d108      	bne.n	1777a <sendFWUpdateSMS+0x36>
		{
			strcpy(uResp_SMS,"F/W Update Completed");
   17768:	1d3b      	adds	r3, r7, #4
   1776a:	4a29      	ldr	r2, [pc, #164]	; (17810 <sendFWUpdateSMS+0xcc>)
   1776c:	ca13      	ldmia	r2!, {r0, r1, r4}
   1776e:	c313      	stmia	r3!, {r0, r1, r4}
   17770:	ca03      	ldmia	r2!, {r0, r1}
   17772:	c303      	stmia	r3!, {r0, r1}
   17774:	7812      	ldrb	r2, [r2, #0]
   17776:	701a      	strb	r2, [r3, #0]
   17778:	e007      	b.n	1778a <sendFWUpdateSMS+0x46>
		}
		/*Error in Firmware update*/
		else
		{
			strcpy(uResp_SMS,"F/W Update Error");
   1777a:	1d3b      	adds	r3, r7, #4
   1777c:	4a25      	ldr	r2, [pc, #148]	; (17814 <sendFWUpdateSMS+0xd0>)
   1777e:	ca13      	ldmia	r2!, {r0, r1, r4}
   17780:	c313      	stmia	r3!, {r0, r1, r4}
   17782:	6811      	ldr	r1, [r2, #0]
   17784:	6019      	str	r1, [r3, #0]
   17786:	7912      	ldrb	r2, [r2, #4]
   17788:	711a      	strb	r2, [r3, #4]
		}
		
		if(bootloader_parameter.firmware_updater_mobile_no[0]!='0')
   1778a:	4b1f      	ldr	r3, [pc, #124]	; (17808 <sendFWUpdateSMS+0xc4>)
   1778c:	7b1b      	ldrb	r3, [r3, #12]
   1778e:	2b30      	cmp	r3, #48	; 0x30
   17790:	d006      	beq.n	177a0 <sendFWUpdateSMS+0x5c>
		{
			gsm_send_sms(bootloader_parameter.firmware_updater_mobile_no,uResp_SMS);
   17792:	1d3a      	adds	r2, r7, #4
   17794:	4b20      	ldr	r3, [pc, #128]	; (17818 <sendFWUpdateSMS+0xd4>)
   17796:	0011      	movs	r1, r2
   17798:	0018      	movs	r0, r3
   1779a:	4b20      	ldr	r3, [pc, #128]	; (1781c <sendFWUpdateSMS+0xd8>)
   1779c:	4798      	blx	r3
   1779e:	e004      	b.n	177aa <sendFWUpdateSMS+0x66>
		}
		else
		{
			gsm_send_sms(ADMIN_1_MOBILE_NUMBER_PAGE,uResp_SMS);
   177a0:	1d3b      	adds	r3, r7, #4
   177a2:	0019      	movs	r1, r3
   177a4:	2003      	movs	r0, #3
   177a6:	4b1d      	ldr	r3, [pc, #116]	; (1781c <sendFWUpdateSMS+0xd8>)
   177a8:	4798      	blx	r3
		}
		
		bootloader_parameter.ulongintDiscard = 0;
   177aa:	4b17      	ldr	r3, [pc, #92]	; (17808 <sendFWUpdateSMS+0xc4>)
   177ac:	2200      	movs	r2, #0
   177ae:	601a      	str	r2, [r3, #0]
		bootloader_parameter.firmware_download_pending = false;
   177b0:	4b15      	ldr	r3, [pc, #84]	; (17808 <sendFWUpdateSMS+0xc4>)
   177b2:	2200      	movs	r2, #0
   177b4:	715a      	strb	r2, [r3, #5]
		bootloader_parameter.firmware_update_process_completed = false;
   177b6:	4b14      	ldr	r3, [pc, #80]	; (17808 <sendFWUpdateSMS+0xc4>)
   177b8:	2200      	movs	r2, #0
   177ba:	719a      	strb	r2, [r3, #6]
		bootloader_parameter.firmware_update_error_code = 0;
   177bc:	4b12      	ldr	r3, [pc, #72]	; (17808 <sendFWUpdateSMS+0xc4>)
   177be:	2200      	movs	r2, #0
   177c0:	71da      	strb	r2, [r3, #7]
		bootloader_parameter.retries = 0;
   177c2:	4b11      	ldr	r3, [pc, #68]	; (17808 <sendFWUpdateSMS+0xc4>)
   177c4:	2200      	movs	r2, #0
   177c6:	721a      	strb	r2, [r3, #8]
		
		memset(bootloader_parameter.firmware_updater_mobile_no, '\0', sizeof(bootloader_parameter.firmware_updater_mobile_no));
   177c8:	4b13      	ldr	r3, [pc, #76]	; (17818 <sendFWUpdateSMS+0xd4>)
   177ca:	2210      	movs	r2, #16
   177cc:	2100      	movs	r1, #0
   177ce:	0018      	movs	r0, r3
   177d0:	4b0e      	ldr	r3, [pc, #56]	; (1780c <sendFWUpdateSMS+0xc8>)
   177d2:	4798      	blx	r3
		strcpy(bootloader_parameter.firmware_updater_mobile_no,"0000000000");
   177d4:	4b10      	ldr	r3, [pc, #64]	; (17818 <sendFWUpdateSMS+0xd4>)
   177d6:	4a12      	ldr	r2, [pc, #72]	; (17820 <sendFWUpdateSMS+0xdc>)
   177d8:	ca03      	ldmia	r2!, {r0, r1}
   177da:	c303      	stmia	r3!, {r0, r1}
   177dc:	8811      	ldrh	r1, [r2, #0]
   177de:	8019      	strh	r1, [r3, #0]
   177e0:	7892      	ldrb	r2, [r2, #2]
   177e2:	709a      	strb	r2, [r3, #2]
		
		memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
   177e4:	4908      	ldr	r1, [pc, #32]	; (17808 <sendFWUpdateSMS+0xc4>)
   177e6:	4b0f      	ldr	r3, [pc, #60]	; (17824 <sendFWUpdateSMS+0xe0>)
   177e8:	221c      	movs	r2, #28
   177ea:	0018      	movs	r0, r3
   177ec:	4b0e      	ldr	r3, [pc, #56]	; (17828 <sendFWUpdateSMS+0xe4>)
   177ee:	4798      	blx	r3
		eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
   177f0:	4b0c      	ldr	r3, [pc, #48]	; (17824 <sendFWUpdateSMS+0xe0>)
   177f2:	0019      	movs	r1, r3
   177f4:	2000      	movs	r0, #0
   177f6:	4b0d      	ldr	r3, [pc, #52]	; (1782c <sendFWUpdateSMS+0xe8>)
   177f8:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   177fa:	4b0d      	ldr	r3, [pc, #52]	; (17830 <sendFWUpdateSMS+0xec>)
   177fc:	4798      	blx	r3
	}
}
   177fe:	46c0      	nop			; (mov r8, r8)
   17800:	46bd      	mov	sp, r7
   17802:	b009      	add	sp, #36	; 0x24
   17804:	bd90      	pop	{r4, r7, pc}
   17806:	46c0      	nop			; (mov r8, r8)
   17808:	200005f8 	.word	0x200005f8
   1780c:	000298b7 	.word	0x000298b7
   17810:	0002b124 	.word	0x0002b124
   17814:	0002b13c 	.word	0x0002b13c
   17818:	20000604 	.word	0x20000604
   1781c:	00012b79 	.word	0x00012b79
   17820:	0002b150 	.word	0x0002b150
   17824:	20000584 	.word	0x20000584
   17828:	00029881 	.word	0x00029881
   1782c:	00024171 	.word	0x00024171
   17830:	00024319 	.word	0x00024319

00017834 <vTask_GSM_service>:
#define GSM_PWR_AS_OP	GSM_PWR_DDR|=GSM_PWR_POS
#define GSM_PWR_ON		GSM_PWR_PORT|=GSM_PWR_POS
#define GSM_PWR_OFF		GSM_PWR_PORT&=~(GSM_PWR_POS)
//////////////////////////////////////////////////////////////////////////
static void vTask_GSM_service(void *params)
{
   17834:	b590      	push	{r4, r7, lr}
   17836:	b0cf      	sub	sp, #316	; 0x13c
   17838:	af02      	add	r7, sp, #8
   1783a:	6078      	str	r0, [r7, #4]
	
	uint32_t network_update_time = 0;
   1783c:	2300      	movs	r3, #0
   1783e:	2296      	movs	r2, #150	; 0x96
   17840:	0052      	lsls	r2, r2, #1
   17842:	18ba      	adds	r2, r7, r2
   17844:	6013      	str	r3, [r2, #0]
	
	GSM_PWR_AS_OP;
   17846:	4bc7      	ldr	r3, [pc, #796]	; (17b64 <vTask_GSM_service+0x330>)
   17848:	4ac6      	ldr	r2, [pc, #792]	; (17b64 <vTask_GSM_service+0x330>)
   1784a:	6812      	ldr	r2, [r2, #0]
   1784c:	2180      	movs	r1, #128	; 0x80
   1784e:	0249      	lsls	r1, r1, #9
   17850:	430a      	orrs	r2, r1
   17852:	601a      	str	r2, [r3, #0]
	
	struct port_config pin_conf_gsm_status;
	port_get_config_defaults(&pin_conf_gsm_status);
   17854:	2388      	movs	r3, #136	; 0x88
   17856:	005b      	lsls	r3, r3, #1
   17858:	18fb      	adds	r3, r7, r3
   1785a:	0018      	movs	r0, r3
   1785c:	4bc2      	ldr	r3, [pc, #776]	; (17b68 <vTask_GSM_service+0x334>)
   1785e:	4798      	blx	r3
	pin_conf_gsm_status.direction  = PORT_PIN_DIR_INPUT;
   17860:	2388      	movs	r3, #136	; 0x88
   17862:	005b      	lsls	r3, r3, #1
   17864:	18fb      	adds	r3, r7, r3
   17866:	2200      	movs	r2, #0
   17868:	701a      	strb	r2, [r3, #0]
	pin_conf_gsm_status.input_pull = PORT_PIN_PULL_NONE;
   1786a:	2388      	movs	r3, #136	; 0x88
   1786c:	005b      	lsls	r3, r3, #1
   1786e:	18fb      	adds	r3, r7, r3
   17870:	2200      	movs	r2, #0
   17872:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(GSM_STATUS_POSITION, &pin_conf_gsm_status);
   17874:	2388      	movs	r3, #136	; 0x88
   17876:	005b      	lsls	r3, r3, #1
   17878:	18fb      	adds	r3, r7, r3
   1787a:	0019      	movs	r1, r3
   1787c:	201b      	movs	r0, #27
   1787e:	4bbb      	ldr	r3, [pc, #748]	; (17b6c <vTask_GSM_service+0x338>)
   17880:	4798      	blx	r3
	
	gsm_init();
   17882:	4bbb      	ldr	r3, [pc, #748]	; (17b70 <vTask_GSM_service+0x33c>)
   17884:	4798      	blx	r3
	
	initialized = false;
   17886:	4bbb      	ldr	r3, [pc, #748]	; (17b74 <vTask_GSM_service+0x340>)
   17888:	2200      	movs	r2, #0
   1788a:	701a      	strb	r2, [r3, #0]
	
	
	inCall=false;
   1788c:	4bba      	ldr	r3, [pc, #744]	; (17b78 <vTask_GSM_service+0x344>)
   1788e:	2200      	movs	r2, #0
   17890:	701a      	strb	r2, [r3, #0]
	simReInit=false;
   17892:	4bba      	ldr	r3, [pc, #744]	; (17b7c <vTask_GSM_service+0x348>)
   17894:	2200      	movs	r2, #0
   17896:	701a      	strb	r2, [r3, #0]
	
	boolGsm_config_flag			=false;
   17898:	4bb9      	ldr	r3, [pc, #740]	; (17b80 <vTask_GSM_service+0x34c>)
   1789a:	2200      	movs	r2, #0
   1789c:	701a      	strb	r2, [r3, #0]
	boolOne_Time_Msg_Delete_Flag   =false;
   1789e:	4bb9      	ldr	r3, [pc, #740]	; (17b84 <vTask_GSM_service+0x350>)
   178a0:	2200      	movs	r2, #0
   178a2:	701a      	strb	r2, [r3, #0]
	
	Signal_Strength = 0;
   178a4:	4bb8      	ldr	r3, [pc, #736]	; (17b88 <vTask_GSM_service+0x354>)
   178a6:	2200      	movs	r2, #0
   178a8:	701a      	strb	r2, [r3, #0]
	
	soundWaitTime = 5;
   178aa:	4bb8      	ldr	r3, [pc, #736]	; (17b8c <vTask_GSM_service+0x358>)
   178ac:	2205      	movs	r2, #5
   178ae:	701a      	strb	r2, [r3, #0]
	bplaySound = false;
   178b0:	4bb7      	ldr	r3, [pc, #732]	; (17b90 <vTask_GSM_service+0x35c>)
   178b2:	2200      	movs	r2, #0
   178b4:	701a      	strb	r2, [r3, #0]
	
	//actionType = 'N';
	callCutWaitTime = 580;
   178b6:	4bb7      	ldr	r3, [pc, #732]	; (17b94 <vTask_GSM_service+0x360>)
   178b8:	2291      	movs	r2, #145	; 0x91
   178ba:	0092      	lsls	r2, r2, #2
   178bc:	801a      	strh	r2, [r3, #0]
	nr = 0;
   178be:	4bb6      	ldr	r3, [pc, #728]	; (17b98 <vTask_GSM_service+0x364>)
   178c0:	2200      	movs	r2, #0
   178c2:	701a      	strb	r2, [r3, #0]
	currentStatus = 'N';
   178c4:	4bb5      	ldr	r3, [pc, #724]	; (17b9c <vTask_GSM_service+0x368>)
   178c6:	224e      	movs	r2, #78	; 0x4e
   178c8:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'N';
   178ca:	4bb5      	ldr	r3, [pc, #724]	; (17ba0 <vTask_GSM_service+0x36c>)
   178cc:	224e      	movs	r2, #78	; 0x4e
   178ce:	701a      	strb	r2, [r3, #0]
	callAccepted = false;
   178d0:	4bb4      	ldr	r3, [pc, #720]	; (17ba4 <vTask_GSM_service+0x370>)
   178d2:	2200      	movs	r2, #0
   178d4:	701a      	strb	r2, [r3, #0]
	freezeIncomingCalls = false;
   178d6:	4bb4      	ldr	r3, [pc, #720]	; (17ba8 <vTask_GSM_service+0x374>)
   178d8:	2200      	movs	r2, #0
   178da:	701a      	strb	r2, [r3, #0]
	obtainNewEvent = true;
   178dc:	4bb3      	ldr	r3, [pc, #716]	; (17bac <vTask_GSM_service+0x378>)
   178de:	2201      	movs	r2, #1
   178e0:	701a      	strb	r2, [r3, #0]
	isMsgFromAdmin = false;
   178e2:	4bb3      	ldr	r3, [pc, #716]	; (17bb0 <vTask_GSM_service+0x37c>)
   178e4:	2200      	movs	r2, #0
   178e6:	701a      	strb	r2, [r3, #0]
	eventStaged=false;
   178e8:	4bb2      	ldr	r3, [pc, #712]	; (17bb4 <vTask_GSM_service+0x380>)
   178ea:	2200      	movs	r2, #0
   178ec:	701a      	strb	r2, [r3, #0]
	stagedEventType = 'N';
   178ee:	4bb2      	ldr	r3, [pc, #712]	; (17bb8 <vTask_GSM_service+0x384>)
   178f0:	224e      	movs	r2, #78	; 0x4e
   178f2:	701a      	strb	r2, [r3, #0]
	isRegisteredNumber=false;
   178f4:	4bb1      	ldr	r3, [pc, #708]	; (17bbc <vTask_GSM_service+0x388>)
   178f6:	2200      	movs	r2, #0
   178f8:	701a      	strb	r2, [r3, #0]
	retries=0;
   178fa:	4bb1      	ldr	r3, [pc, #708]	; (17bc0 <vTask_GSM_service+0x38c>)
   178fc:	2200      	movs	r2, #0
   178fe:	701a      	strb	r2, [r3, #0]
	autoNetworkDetection=false;
   17900:	4bb0      	ldr	r3, [pc, #704]	; (17bc4 <vTask_GSM_service+0x390>)
   17902:	2200      	movs	r2, #0
   17904:	701a      	strb	r2, [r3, #0]
	mcuWakeUpFromSleep=false;
   17906:	4bb0      	ldr	r3, [pc, #704]	; (17bc8 <vTask_GSM_service+0x394>)
   17908:	2200      	movs	r2, #0
   1790a:	701a      	strb	r2, [r3, #0]
	
	
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1790c:	4baf      	ldr	r3, [pc, #700]	; (17bcc <vTask_GSM_service+0x398>)
   1790e:	785b      	ldrb	r3, [r3, #1]
   17910:	2b00      	cmp	r3, #0
   17912:	d002      	beq.n	1791a <vTask_GSM_service+0xe6>
	{
		zeroPressed=false;
   17914:	4bae      	ldr	r3, [pc, #696]	; (17bd0 <vTask_GSM_service+0x39c>)
   17916:	2200      	movs	r2, #0
   17918:	701a      	strb	r2, [r3, #0]
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
   1791a:	4bac      	ldr	r3, [pc, #688]	; (17bcc <vTask_GSM_service+0x398>)
   1791c:	78db      	ldrb	r3, [r3, #3]
   1791e:	2b00      	cmp	r3, #0
   17920:	d012      	beq.n	17948 <vTask_GSM_service+0x114>
	{
		m2mAck=false;
   17922:	4bac      	ldr	r3, [pc, #688]	; (17bd4 <vTask_GSM_service+0x3a0>)
   17924:	2200      	movs	r2, #0
   17926:	701a      	strb	r2, [r3, #0]
		m2mEventCalls=m2mEventNo=0;
   17928:	4bab      	ldr	r3, [pc, #684]	; (17bd8 <vTask_GSM_service+0x3a4>)
   1792a:	2200      	movs	r2, #0
   1792c:	701a      	strb	r2, [r3, #0]
   1792e:	4baa      	ldr	r3, [pc, #680]	; (17bd8 <vTask_GSM_service+0x3a4>)
   17930:	781a      	ldrb	r2, [r3, #0]
   17932:	4baa      	ldr	r3, [pc, #680]	; (17bdc <vTask_GSM_service+0x3a8>)
   17934:	701a      	strb	r2, [r3, #0]
		m2mEventStaged=false;
   17936:	4baa      	ldr	r3, [pc, #680]	; (17be0 <vTask_GSM_service+0x3ac>)
   17938:	2200      	movs	r2, #0
   1793a:	701a      	strb	r2, [r3, #0]
		m2mEvent=false;
   1793c:	4ba9      	ldr	r3, [pc, #676]	; (17be4 <vTask_GSM_service+0x3b0>)
   1793e:	2200      	movs	r2, #0
   17940:	701a      	strb	r2, [r3, #0]
		keyPressed=false;
   17942:	4ba9      	ldr	r3, [pc, #676]	; (17be8 <vTask_GSM_service+0x3b4>)
   17944:	2200      	movs	r2, #0
   17946:	701a      	strb	r2, [r3, #0]
	}
	
	if(GSM_STATUS_OK)
   17948:	201b      	movs	r0, #27
   1794a:	4ba8      	ldr	r3, [pc, #672]	; (17bec <vTask_GSM_service+0x3b8>)
   1794c:	4798      	blx	r3
   1794e:	1e03      	subs	r3, r0, #0
   17950:	d01a      	beq.n	17988 <vTask_GSM_service+0x154>
	{
		boolGsm_config_flag			=false;
   17952:	4b8b      	ldr	r3, [pc, #556]	; (17b80 <vTask_GSM_service+0x34c>)
   17954:	2200      	movs	r2, #0
   17956:	701a      	strb	r2, [r3, #0]
		boolOne_Time_Msg_Delete_Flag   =false;
   17958:	4b8a      	ldr	r3, [pc, #552]	; (17b84 <vTask_GSM_service+0x350>)
   1795a:	2200      	movs	r2, #0
   1795c:	701a      	strb	r2, [r3, #0]
		
		GSM_PWR_ON;
   1795e:	4ba4      	ldr	r3, [pc, #656]	; (17bf0 <vTask_GSM_service+0x3bc>)
   17960:	4aa3      	ldr	r2, [pc, #652]	; (17bf0 <vTask_GSM_service+0x3bc>)
   17962:	6812      	ldr	r2, [r2, #0]
   17964:	2180      	movs	r1, #128	; 0x80
   17966:	0249      	lsls	r1, r1, #9
   17968:	430a      	orrs	r2, r1
   1796a:	601a      	str	r2, [r3, #0]
		vTaskDelay(3000);
   1796c:	4ba1      	ldr	r3, [pc, #644]	; (17bf4 <vTask_GSM_service+0x3c0>)
   1796e:	0018      	movs	r0, r3
   17970:	4ba1      	ldr	r3, [pc, #644]	; (17bf8 <vTask_GSM_service+0x3c4>)
   17972:	4798      	blx	r3
		GSM_PWR_OFF;
   17974:	4b9e      	ldr	r3, [pc, #632]	; (17bf0 <vTask_GSM_service+0x3bc>)
   17976:	4a9e      	ldr	r2, [pc, #632]	; (17bf0 <vTask_GSM_service+0x3bc>)
   17978:	6812      	ldr	r2, [r2, #0]
   1797a:	49a0      	ldr	r1, [pc, #640]	; (17bfc <vTask_GSM_service+0x3c8>)
   1797c:	400a      	ands	r2, r1
   1797e:	601a      	str	r2, [r3, #0]
		vTaskDelay(5000);
   17980:	4b9f      	ldr	r3, [pc, #636]	; (17c00 <vTask_GSM_service+0x3cc>)
   17982:	0018      	movs	r0, r3
   17984:	4b9c      	ldr	r3, [pc, #624]	; (17bf8 <vTask_GSM_service+0x3c4>)
   17986:	4798      	blx	r3
	}
	
	isGSMModuleAwake=false;
   17988:	4b9e      	ldr	r3, [pc, #632]	; (17c04 <vTask_GSM_service+0x3d0>)
   1798a:	2200      	movs	r2, #0
   1798c:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(GSM_DTR_PIN, GSM_DTR_PIN_ACTIVE);
   1798e:	2101      	movs	r1, #1
   17990:	2014      	movs	r0, #20
   17992:	4b9d      	ldr	r3, [pc, #628]	; (17c08 <vTask_GSM_service+0x3d4>)
   17994:	4798      	blx	r3
	lastGSMCommunicationTime=0;
   17996:	4b9d      	ldr	r3, [pc, #628]	; (17c0c <vTask_GSM_service+0x3d8>)
   17998:	2200      	movs	r2, #0
   1799a:	601a      	str	r2, [r3, #0]
	gsm_module_exit_sleep(false);				//to switch DTR pin so that sim remains active
   1799c:	2000      	movs	r0, #0
   1799e:	4b9c      	ldr	r3, [pc, #624]	; (17c10 <vTask_GSM_service+0x3dc>)
   179a0:	4798      	blx	r3
	{

		/************************************************************************/
		/*  Check for Call Timer Expire in case GSM Status is not OK            */
		/************************************************************************/
		if (currentStatus == 'I' || currentStatus == 'R')
   179a2:	4b7e      	ldr	r3, [pc, #504]	; (17b9c <vTask_GSM_service+0x368>)
   179a4:	781b      	ldrb	r3, [r3, #0]
   179a6:	b2db      	uxtb	r3, r3
   179a8:	2b49      	cmp	r3, #73	; 0x49
   179aa:	d004      	beq.n	179b6 <vTask_GSM_service+0x182>
   179ac:	4b7b      	ldr	r3, [pc, #492]	; (17b9c <vTask_GSM_service+0x368>)
   179ae:	781b      	ldrb	r3, [r3, #0]
   179b0:	b2db      	uxtb	r3, r3
   179b2:	2b52      	cmp	r3, #82	; 0x52
   179b4:	d112      	bne.n	179dc <vTask_GSM_service+0x1a8>
		{
			if (callTimerExpire())
   179b6:	4b97      	ldr	r3, [pc, #604]	; (17c14 <vTask_GSM_service+0x3e0>)
   179b8:	4798      	blx	r3
   179ba:	1e03      	subs	r3, r0, #0
   179bc:	d00e      	beq.n	179dc <vTask_GSM_service+0x1a8>
			{
				char t1 = actionType;
   179be:	2328      	movs	r3, #40	; 0x28
   179c0:	33ff      	adds	r3, #255	; 0xff
   179c2:	18fb      	adds	r3, r7, r3
   179c4:	4a94      	ldr	r2, [pc, #592]	; (17c18 <vTask_GSM_service+0x3e4>)
   179c6:	7812      	ldrb	r2, [r2, #0]
   179c8:	701a      	strb	r2, [r3, #0]
				endCall();
   179ca:	4b94      	ldr	r3, [pc, #592]	; (17c1c <vTask_GSM_service+0x3e8>)
   179cc:	4798      	blx	r3
				checkRespSMS(t1);
   179ce:	2328      	movs	r3, #40	; 0x28
   179d0:	33ff      	adds	r3, #255	; 0xff
   179d2:	18fb      	adds	r3, r7, r3
   179d4:	781b      	ldrb	r3, [r3, #0]
   179d6:	0018      	movs	r0, r3
   179d8:	4b91      	ldr	r3, [pc, #580]	; (17c20 <vTask_GSM_service+0x3ec>)
   179da:	4798      	blx	r3
			}
		}
		/************************************************************************/
		
		if (GSM_STATUS_OK)
   179dc:	201b      	movs	r0, #27
   179de:	4b83      	ldr	r3, [pc, #524]	; (17bec <vTask_GSM_service+0x3b8>)
   179e0:	4798      	blx	r3
   179e2:	1e03      	subs	r3, r0, #0
   179e4:	d101      	bne.n	179ea <vTask_GSM_service+0x1b6>
   179e6:	f000 fccd 	bl	18384 <vTask_GSM_service+0xb50>
		{
			if (boolGsm_config_flag == false)
   179ea:	4b65      	ldr	r3, [pc, #404]	; (17b80 <vTask_GSM_service+0x34c>)
   179ec:	781b      	ldrb	r3, [r3, #0]
   179ee:	b2db      	uxtb	r3, r3
   179f0:	2201      	movs	r2, #1
   179f2:	4053      	eors	r3, r2
   179f4:	b2db      	uxtb	r3, r3
   179f6:	2b00      	cmp	r3, #0
   179f8:	d02d      	beq.n	17a56 <vTask_GSM_service+0x222>
			{
				
				if (gsm_is_network_registered() == GSM_NETWORK_REGISTERED)
   179fa:	4b8a      	ldr	r3, [pc, #552]	; (17c24 <vTask_GSM_service+0x3f0>)
   179fc:	4798      	blx	r3
   179fe:	0003      	movs	r3, r0
   17a00:	2b09      	cmp	r3, #9
   17a02:	d122      	bne.n	17a4a <vTask_GSM_service+0x216>
				{
					if(gsm_config_module()==GSM_ERROR_NONE)
   17a04:	4b88      	ldr	r3, [pc, #544]	; (17c28 <vTask_GSM_service+0x3f4>)
   17a06:	4798      	blx	r3
   17a08:	1e03      	subs	r3, r0, #0
   17a0a:	d11a      	bne.n	17a42 <vTask_GSM_service+0x20e>
					{
						if(gsm_enable_csqn_urc()==GSM_ERROR_NONE)
   17a0c:	4b87      	ldr	r3, [pc, #540]	; (17c2c <vTask_GSM_service+0x3f8>)
   17a0e:	4798      	blx	r3
   17a10:	1e03      	subs	r3, r0, #0
   17a12:	d102      	bne.n	17a1a <vTask_GSM_service+0x1e6>
						{
							autoNetworkDetection = true;
   17a14:	4b6b      	ldr	r3, [pc, #428]	; (17bc4 <vTask_GSM_service+0x390>)
   17a16:	2201      	movs	r2, #1
   17a18:	701a      	strb	r2, [r3, #0]
						}
						
						Signal_Strength = gsm_getsignalstrength();
   17a1a:	4b85      	ldr	r3, [pc, #532]	; (17c30 <vTask_GSM_service+0x3fc>)
   17a1c:	4798      	blx	r3
   17a1e:	0003      	movs	r3, r0
   17a20:	001a      	movs	r2, r3
   17a22:	4b59      	ldr	r3, [pc, #356]	; (17b88 <vTask_GSM_service+0x354>)
   17a24:	701a      	strb	r2, [r3, #0]
						network_update_time = xTaskGetTickCount();
   17a26:	4b83      	ldr	r3, [pc, #524]	; (17c34 <vTask_GSM_service+0x400>)
   17a28:	4798      	blx	r3
   17a2a:	0003      	movs	r3, r0
   17a2c:	2296      	movs	r2, #150	; 0x96
   17a2e:	0052      	lsls	r2, r2, #1
   17a30:	18ba      	adds	r2, r7, r2
   17a32:	6013      	str	r3, [r2, #0]
							
						boolGsm_config_flag = true;
   17a34:	4b52      	ldr	r3, [pc, #328]	; (17b80 <vTask_GSM_service+0x34c>)
   17a36:	2201      	movs	r2, #1
   17a38:	701a      	strb	r2, [r3, #0]
						gsmStatusChange=true;
   17a3a:	4b7f      	ldr	r3, [pc, #508]	; (17c38 <vTask_GSM_service+0x404>)
   17a3c:	2201      	movs	r2, #1
   17a3e:	701a      	strb	r2, [r3, #0]
   17a40:	e7af      	b.n	179a2 <vTask_GSM_service+0x16e>
					}
					else
					{
						boolGsm_config_flag = false;
   17a42:	4b4f      	ldr	r3, [pc, #316]	; (17b80 <vTask_GSM_service+0x34c>)
   17a44:	2200      	movs	r2, #0
   17a46:	701a      	strb	r2, [r3, #0]
   17a48:	e7ab      	b.n	179a2 <vTask_GSM_service+0x16e>
					}
				}
				else
				{
					vTaskDelay(2000/portTICK_PERIOD_MS);
   17a4a:	23fa      	movs	r3, #250	; 0xfa
   17a4c:	00db      	lsls	r3, r3, #3
   17a4e:	0018      	movs	r0, r3
   17a50:	4b69      	ldr	r3, [pc, #420]	; (17bf8 <vTask_GSM_service+0x3c4>)
   17a52:	4798      	blx	r3
   17a54:	e7a5      	b.n	179a2 <vTask_GSM_service+0x16e>
				}
			}
			else
			{
				if(mcuWakeUpFromSleep)
   17a56:	4b5c      	ldr	r3, [pc, #368]	; (17bc8 <vTask_GSM_service+0x394>)
   17a58:	781b      	ldrb	r3, [r3, #0]
   17a5a:	b2db      	uxtb	r3, r3
   17a5c:	2b00      	cmp	r3, #0
   17a5e:	d00c      	beq.n	17a7a <vTask_GSM_service+0x246>
				{
					mcuWakeUpFromSleep=false;
   17a60:	4b59      	ldr	r3, [pc, #356]	; (17bc8 <vTask_GSM_service+0x394>)
   17a62:	2200      	movs	r2, #0
   17a64:	701a      	strb	r2, [r3, #0]
					gsm_module_exit_sleep(false);
   17a66:	2000      	movs	r0, #0
   17a68:	4b69      	ldr	r3, [pc, #420]	; (17c10 <vTask_GSM_service+0x3dc>)
   17a6a:	4798      	blx	r3
					if(gsm_enable_csqn_urc()==GSM_ERROR_NONE)
   17a6c:	4b6f      	ldr	r3, [pc, #444]	; (17c2c <vTask_GSM_service+0x3f8>)
   17a6e:	4798      	blx	r3
   17a70:	1e03      	subs	r3, r0, #0
   17a72:	d102      	bne.n	17a7a <vTask_GSM_service+0x246>
					{
						autoNetworkDetection = true;
   17a74:	4b53      	ldr	r3, [pc, #332]	; (17bc4 <vTask_GSM_service+0x390>)
   17a76:	2201      	movs	r2, #1
   17a78:	701a      	strb	r2, [r3, #0]
				
				
				/************************************************************************/
				/* Firmware Update Status SMS                                           */
				/************************************************************************/
				if(bootloader_parameter.firmware_update_process_completed)
   17a7a:	4b70      	ldr	r3, [pc, #448]	; (17c3c <vTask_GSM_service+0x408>)
   17a7c:	799b      	ldrb	r3, [r3, #6]
   17a7e:	2b00      	cmp	r3, #0
   17a80:	d001      	beq.n	17a86 <vTask_GSM_service+0x252>
				{
					sendFWUpdateSMS();
   17a82:	4b6f      	ldr	r3, [pc, #444]	; (17c40 <vTask_GSM_service+0x40c>)
   17a84:	4798      	blx	r3
				}
				
				if ((boolOne_Time_Msg_Delete_Flag == false) && (boolGsm_config_flag == true))
   17a86:	4b3f      	ldr	r3, [pc, #252]	; (17b84 <vTask_GSM_service+0x350>)
   17a88:	781b      	ldrb	r3, [r3, #0]
   17a8a:	b2db      	uxtb	r3, r3
   17a8c:	2201      	movs	r2, #1
   17a8e:	4053      	eors	r3, r2
   17a90:	b2db      	uxtb	r3, r3
   17a92:	2b00      	cmp	r3, #0
   17a94:	d015      	beq.n	17ac2 <vTask_GSM_service+0x28e>
   17a96:	4b3a      	ldr	r3, [pc, #232]	; (17b80 <vTask_GSM_service+0x34c>)
   17a98:	781b      	ldrb	r3, [r3, #0]
   17a9a:	b2db      	uxtb	r3, r3
   17a9c:	2b00      	cmp	r3, #0
   17a9e:	d010      	beq.n	17ac2 <vTask_GSM_service+0x28e>
				{
					if (gsm_delete_all_sms() == GSM_ERROR_NONE)
   17aa0:	4b68      	ldr	r3, [pc, #416]	; (17c44 <vTask_GSM_service+0x410>)
   17aa2:	4798      	blx	r3
   17aa4:	1e03      	subs	r3, r0, #0
   17aa6:	d107      	bne.n	17ab8 <vTask_GSM_service+0x284>
					{
						boolOne_Time_Msg_Delete_Flag = true;
   17aa8:	4b36      	ldr	r3, [pc, #216]	; (17b84 <vTask_GSM_service+0x350>)
   17aaa:	2201      	movs	r2, #1
   17aac:	701a      	strb	r2, [r3, #0]
						initialized = true;
   17aae:	4b31      	ldr	r3, [pc, #196]	; (17b74 <vTask_GSM_service+0x340>)
   17ab0:	2201      	movs	r2, #1
   17ab2:	701a      	strb	r2, [r3, #0]
					if (gsm_delete_all_sms() == GSM_ERROR_NONE)
   17ab4:	f000 fc87 	bl	183c6 <vTask_GSM_service+0xb92>
					}
					else
					{
						boolOne_Time_Msg_Delete_Flag = false;
   17ab8:	4b32      	ldr	r3, [pc, #200]	; (17b84 <vTask_GSM_service+0x350>)
   17aba:	2200      	movs	r2, #0
   17abc:	701a      	strb	r2, [r3, #0]
					if (gsm_delete_all_sms() == GSM_ERROR_NONE)
   17abe:	f000 fc82 	bl	183c6 <vTask_GSM_service+0xb92>
					}
				}
				else
				{
					
					if (currentStatus == 'N' && currentCallStatus == 'N')
   17ac2:	4b36      	ldr	r3, [pc, #216]	; (17b9c <vTask_GSM_service+0x368>)
   17ac4:	781b      	ldrb	r3, [r3, #0]
   17ac6:	b2db      	uxtb	r3, r3
   17ac8:	2b4e      	cmp	r3, #78	; 0x4e
   17aca:	d000      	beq.n	17ace <vTask_GSM_service+0x29a>
   17acc:	e0cc      	b.n	17c68 <vTask_GSM_service+0x434>
   17ace:	4b34      	ldr	r3, [pc, #208]	; (17ba0 <vTask_GSM_service+0x36c>)
   17ad0:	781b      	ldrb	r3, [r3, #0]
   17ad2:	b2db      	uxtb	r3, r3
   17ad4:	2b4e      	cmp	r3, #78	; 0x4e
   17ad6:	d000      	beq.n	17ada <vTask_GSM_service+0x2a6>
   17ad8:	e0c6      	b.n	17c68 <vTask_GSM_service+0x434>
					{
						if(getAllPhaseState()==AC_OFF &&  isGSMModuleAwake && gsm_module_sleep_elligible())
   17ada:	4b5b      	ldr	r3, [pc, #364]	; (17c48 <vTask_GSM_service+0x414>)
   17adc:	4798      	blx	r3
   17ade:	1e03      	subs	r3, r0, #0
   17ae0:	d115      	bne.n	17b0e <vTask_GSM_service+0x2da>
   17ae2:	4b48      	ldr	r3, [pc, #288]	; (17c04 <vTask_GSM_service+0x3d0>)
   17ae4:	781b      	ldrb	r3, [r3, #0]
   17ae6:	b2db      	uxtb	r3, r3
   17ae8:	2b00      	cmp	r3, #0
   17aea:	d010      	beq.n	17b0e <vTask_GSM_service+0x2da>
   17aec:	4b57      	ldr	r3, [pc, #348]	; (17c4c <vTask_GSM_service+0x418>)
   17aee:	4798      	blx	r3
   17af0:	1e03      	subs	r3, r0, #0
   17af2:	d00c      	beq.n	17b0e <vTask_GSM_service+0x2da>
						{
							if(motor_checkSleepElligible())
   17af4:	4b56      	ldr	r3, [pc, #344]	; (17c50 <vTask_GSM_service+0x41c>)
   17af6:	4798      	blx	r3
   17af8:	1e03      	subs	r3, r0, #0
   17afa:	d008      	beq.n	17b0e <vTask_GSM_service+0x2da>
							{
								if(gsm_disable_csqn_urc()==GSM_ERROR_NONE)
   17afc:	4b55      	ldr	r3, [pc, #340]	; (17c54 <vTask_GSM_service+0x420>)
   17afe:	4798      	blx	r3
   17b00:	1e03      	subs	r3, r0, #0
   17b02:	d102      	bne.n	17b0a <vTask_GSM_service+0x2d6>
								{
									autoNetworkDetection=false;
   17b04:	4b2f      	ldr	r3, [pc, #188]	; (17bc4 <vTask_GSM_service+0x390>)
   17b06:	2200      	movs	r2, #0
   17b08:	701a      	strb	r2, [r3, #0]
								}
								gsm_module_enter_sleep();				//this statement goes after sending AT command, to ignore the wakeup of the module done by sending AT Command.
   17b0a:	4b53      	ldr	r3, [pc, #332]	; (17c58 <vTask_GSM_service+0x424>)
   17b0c:	4798      	blx	r3
							}
						}

						if(isGSMModuleAwake)
   17b0e:	4b3d      	ldr	r3, [pc, #244]	; (17c04 <vTask_GSM_service+0x3d0>)
   17b10:	781b      	ldrb	r3, [r3, #0]
   17b12:	b2db      	uxtb	r3, r3
   17b14:	2b00      	cmp	r3, #0
   17b16:	d017      	beq.n	17b48 <vTask_GSM_service+0x314>
						{
							////Update network
							if (((xTaskGetTickCount() - network_update_time)>= (1*60*1000)))
   17b18:	4b46      	ldr	r3, [pc, #280]	; (17c34 <vTask_GSM_service+0x400>)
   17b1a:	4798      	blx	r3
   17b1c:	0002      	movs	r2, r0
   17b1e:	2396      	movs	r3, #150	; 0x96
   17b20:	005b      	lsls	r3, r3, #1
   17b22:	18fb      	adds	r3, r7, r3
   17b24:	681b      	ldr	r3, [r3, #0]
   17b26:	1ad3      	subs	r3, r2, r3
   17b28:	4a4c      	ldr	r2, [pc, #304]	; (17c5c <vTask_GSM_service+0x428>)
   17b2a:	4293      	cmp	r3, r2
   17b2c:	d90c      	bls.n	17b48 <vTask_GSM_service+0x314>
							{
								network_update_time = xTaskGetTickCount();
   17b2e:	4b41      	ldr	r3, [pc, #260]	; (17c34 <vTask_GSM_service+0x400>)
   17b30:	4798      	blx	r3
   17b32:	0003      	movs	r3, r0
   17b34:	2296      	movs	r2, #150	; 0x96
   17b36:	0052      	lsls	r2, r2, #1
   17b38:	18ba      	adds	r2, r7, r2
   17b3a:	6013      	str	r3, [r2, #0]
								Signal_Strength = gsm_getsignalstrength();
   17b3c:	4b3c      	ldr	r3, [pc, #240]	; (17c30 <vTask_GSM_service+0x3fc>)
   17b3e:	4798      	blx	r3
   17b40:	0003      	movs	r3, r0
   17b42:	001a      	movs	r2, r3
   17b44:	4b10      	ldr	r3, [pc, #64]	; (17b88 <vTask_GSM_service+0x354>)
   17b46:	701a      	strb	r2, [r3, #0]
							}
						}
						
						setObtainEvent();
   17b48:	4b45      	ldr	r3, [pc, #276]	; (17c60 <vTask_GSM_service+0x42c>)
   17b4a:	4798      	blx	r3
						if (eventStaged || m2mEventStaged)
   17b4c:	4b19      	ldr	r3, [pc, #100]	; (17bb4 <vTask_GSM_service+0x380>)
   17b4e:	781b      	ldrb	r3, [r3, #0]
   17b50:	2b00      	cmp	r3, #0
   17b52:	d104      	bne.n	17b5e <vTask_GSM_service+0x32a>
   17b54:	4b22      	ldr	r3, [pc, #136]	; (17be0 <vTask_GSM_service+0x3ac>)
   17b56:	781b      	ldrb	r3, [r3, #0]
   17b58:	2b00      	cmp	r3, #0
   17b5a:	d100      	bne.n	17b5e <vTask_GSM_service+0x32a>
   17b5c:	e0cd      	b.n	17cfa <vTask_GSM_service+0x4c6>
						{
							operateOnStagedEvent();
   17b5e:	4b41      	ldr	r3, [pc, #260]	; (17c64 <vTask_GSM_service+0x430>)
   17b60:	4798      	blx	r3
						if (eventStaged || m2mEventStaged)
   17b62:	e0ca      	b.n	17cfa <vTask_GSM_service+0x4c6>
   17b64:	41004480 	.word	0x41004480
   17b68:	0001430d 	.word	0x0001430d
   17b6c:	000236f1 	.word	0x000236f1
   17b70:	00012155 	.word	0x00012155
   17b74:	2000079d 	.word	0x2000079d
   17b78:	2000079c 	.word	0x2000079c
   17b7c:	2000077f 	.word	0x2000077f
   17b80:	200007c4 	.word	0x200007c4
   17b84:	200007d1 	.word	0x200007d1
   17b88:	20000789 	.word	0x20000789
   17b8c:	200007d6 	.word	0x200007d6
   17b90:	20000862 	.word	0x20000862
   17b94:	20000764 	.word	0x20000764
   17b98:	200006e4 	.word	0x200006e4
   17b9c:	200007dc 	.word	0x200007dc
   17ba0:	2000078f 	.word	0x2000078f
   17ba4:	2000079e 	.word	0x2000079e
   17ba8:	20000744 	.word	0x20000744
   17bac:	20000772 	.word	0x20000772
   17bb0:	20000777 	.word	0x20000777
   17bb4:	200007d3 	.word	0x200007d3
   17bb8:	20000775 	.word	0x20000775
   17bbc:	20000798 	.word	0x20000798
   17bc0:	200006e5 	.word	0x200006e5
   17bc4:	20000861 	.word	0x20000861
   17bc8:	20000840 	.word	0x20000840
   17bcc:	2000062c 	.word	0x2000062c
   17bd0:	2000080b 	.word	0x2000080b
   17bd4:	2000072c 	.word	0x2000072c
   17bd8:	2000072d 	.word	0x2000072d
   17bdc:	200007d4 	.word	0x200007d4
   17be0:	2000078e 	.word	0x2000078e
   17be4:	20000743 	.word	0x20000743
   17be8:	200007d0 	.word	0x200007d0
   17bec:	00014331 	.word	0x00014331
   17bf0:	41004490 	.word	0x41004490
   17bf4:	00000bb8 	.word	0x00000bb8
   17bf8:	00020669 	.word	0x00020669
   17bfc:	fffeffff 	.word	0xfffeffff
   17c00:	00001388 	.word	0x00001388
   17c04:	20000684 	.word	0x20000684
   17c08:	00014375 	.word	0x00014375
   17c0c:	20000694 	.word	0x20000694
   17c10:	00012309 	.word	0x00012309
   17c14:	00014a79 	.word	0x00014a79
   17c18:	20000763 	.word	0x20000763
   17c1c:	00014511 	.word	0x00014511
   17c20:	00014d65 	.word	0x00014d65
   17c24:	00012605 	.word	0x00012605
   17c28:	00013381 	.word	0x00013381
   17c2c:	00012b19 	.word	0x00012b19
   17c30:	000128d1 	.word	0x000128d1
   17c34:	000209cd 	.word	0x000209cd
   17c38:	200006de 	.word	0x200006de
   17c3c:	200005f8 	.word	0x200005f8
   17c40:	00017745 	.word	0x00017745
   17c44:	000126f1 	.word	0x000126f1
   17c48:	0001b2a9 	.word	0x0001b2a9
   17c4c:	0001238d 	.word	0x0001238d
   17c50:	0001cd05 	.word	0x0001cd05
   17c54:	00012b49 	.word	0x00012b49
   17c58:	00012379 	.word	0x00012379
   17c5c:	0000ea5f 	.word	0x0000ea5f
   17c60:	000143c9 	.word	0x000143c9
   17c64:	00014409 	.word	0x00014409
						}
					}
					else if (currentStatus == 'I' || currentStatus == 'R')
   17c68:	4bd9      	ldr	r3, [pc, #868]	; (17fd0 <vTask_GSM_service+0x79c>)
   17c6a:	781b      	ldrb	r3, [r3, #0]
   17c6c:	b2db      	uxtb	r3, r3
   17c6e:	2b49      	cmp	r3, #73	; 0x49
   17c70:	d004      	beq.n	17c7c <vTask_GSM_service+0x448>
   17c72:	4bd7      	ldr	r3, [pc, #860]	; (17fd0 <vTask_GSM_service+0x79c>)
   17c74:	781b      	ldrb	r3, [r3, #0]
   17c76:	b2db      	uxtb	r3, r3
   17c78:	2b52      	cmp	r3, #82	; 0x52
   17c7a:	d13f      	bne.n	17cfc <vTask_GSM_service+0x4c8>
					{
						if (callTimerExpire())
   17c7c:	4bd5      	ldr	r3, [pc, #852]	; (17fd4 <vTask_GSM_service+0x7a0>)
   17c7e:	4798      	blx	r3
   17c80:	1e03      	subs	r3, r0, #0
   17c82:	d00e      	beq.n	17ca2 <vTask_GSM_service+0x46e>
						{
							char t1 = actionType;
   17c84:	2393      	movs	r3, #147	; 0x93
   17c86:	005b      	lsls	r3, r3, #1
   17c88:	18fb      	adds	r3, r7, r3
   17c8a:	4ad3      	ldr	r2, [pc, #844]	; (17fd8 <vTask_GSM_service+0x7a4>)
   17c8c:	7812      	ldrb	r2, [r2, #0]
   17c8e:	701a      	strb	r2, [r3, #0]
							endCall();
   17c90:	4bd2      	ldr	r3, [pc, #840]	; (17fdc <vTask_GSM_service+0x7a8>)
   17c92:	4798      	blx	r3
							checkRespSMS(t1);
   17c94:	2393      	movs	r3, #147	; 0x93
   17c96:	005b      	lsls	r3, r3, #1
   17c98:	18fb      	adds	r3, r7, r3
   17c9a:	781b      	ldrb	r3, [r3, #0]
   17c9c:	0018      	movs	r0, r3
   17c9e:	4bd0      	ldr	r3, [pc, #832]	; (17fe0 <vTask_GSM_service+0x7ac>)
   17ca0:	4798      	blx	r3
						}
						if (factory_settings_parameter_struct.ENABLE_M2M)
   17ca2:	4bd0      	ldr	r3, [pc, #832]	; (17fe4 <vTask_GSM_service+0x7b0>)
   17ca4:	78db      	ldrb	r3, [r3, #3]
   17ca6:	2b00      	cmp	r3, #0
   17ca8:	d020      	beq.n	17cec <vTask_GSM_service+0x4b8>
						{
							if(m2mEvent && callAccepted)
   17caa:	4bcf      	ldr	r3, [pc, #828]	; (17fe8 <vTask_GSM_service+0x7b4>)
   17cac:	781b      	ldrb	r3, [r3, #0]
   17cae:	2b00      	cmp	r3, #0
   17cb0:	d01c      	beq.n	17cec <vTask_GSM_service+0x4b8>
   17cb2:	4bce      	ldr	r3, [pc, #824]	; (17fec <vTask_GSM_service+0x7b8>)
   17cb4:	781b      	ldrb	r3, [r3, #0]
   17cb6:	2b00      	cmp	r3, #0
   17cb8:	d018      	beq.n	17cec <vTask_GSM_service+0x4b8>
							{
								if(!keyPressed &&  xTaskGetTickCount() - callCutWait > 2000)
   17cba:	4bcd      	ldr	r3, [pc, #820]	; (17ff0 <vTask_GSM_service+0x7bc>)
   17cbc:	781b      	ldrb	r3, [r3, #0]
   17cbe:	2201      	movs	r2, #1
   17cc0:	4053      	eors	r3, r2
   17cc2:	b2db      	uxtb	r3, r3
   17cc4:	2b00      	cmp	r3, #0
   17cc6:	d011      	beq.n	17cec <vTask_GSM_service+0x4b8>
   17cc8:	4bca      	ldr	r3, [pc, #808]	; (17ff4 <vTask_GSM_service+0x7c0>)
   17cca:	4798      	blx	r3
   17ccc:	0002      	movs	r2, r0
   17cce:	4bca      	ldr	r3, [pc, #808]	; (17ff8 <vTask_GSM_service+0x7c4>)
   17cd0:	681b      	ldr	r3, [r3, #0]
   17cd2:	1ad2      	subs	r2, r2, r3
   17cd4:	23fa      	movs	r3, #250	; 0xfa
   17cd6:	00db      	lsls	r3, r3, #3
   17cd8:	429a      	cmp	r2, r3
   17cda:	d907      	bls.n	17cec <vTask_GSM_service+0x4b8>
								{
									keyPressed=true;
   17cdc:	4bc4      	ldr	r3, [pc, #784]	; (17ff0 <vTask_GSM_service+0x7bc>)
   17cde:	2201      	movs	r2, #1
   17ce0:	701a      	strb	r2, [r3, #0]
									sendDTMFTone(m2mEventNo);
   17ce2:	4bc6      	ldr	r3, [pc, #792]	; (17ffc <vTask_GSM_service+0x7c8>)
   17ce4:	781b      	ldrb	r3, [r3, #0]
   17ce6:	0018      	movs	r0, r3
   17ce8:	4bc5      	ldr	r3, [pc, #788]	; (18000 <vTask_GSM_service+0x7cc>)
   17cea:	4798      	blx	r3
								}
							}
						}
						if (playSoundElligible())
   17cec:	4bc5      	ldr	r3, [pc, #788]	; (18004 <vTask_GSM_service+0x7d0>)
   17cee:	4798      	blx	r3
   17cf0:	1e03      	subs	r3, r0, #0
   17cf2:	d003      	beq.n	17cfc <vTask_GSM_service+0x4c8>
						{
							triggerPlaySound();
   17cf4:	4bc4      	ldr	r3, [pc, #784]	; (18008 <vTask_GSM_service+0x7d4>)
   17cf6:	4798      	blx	r3
   17cf8:	e000      	b.n	17cfc <vTask_GSM_service+0x4c8>
						if (eventStaged || m2mEventStaged)
   17cfa:	46c0      	nop			; (mov r8, r8)
						}
					}
					//////////////////////////////////////////////////////////////////////////
					char response[64] = {0};
   17cfc:	4bc3      	ldr	r3, [pc, #780]	; (1800c <vTask_GSM_service+0x7d8>)
   17cfe:	2298      	movs	r2, #152	; 0x98
   17d00:	0052      	lsls	r2, r2, #1
   17d02:	4694      	mov	ip, r2
   17d04:	44bc      	add	ip, r7
   17d06:	4463      	add	r3, ip
   17d08:	0018      	movs	r0, r3
   17d0a:	2340      	movs	r3, #64	; 0x40
   17d0c:	001a      	movs	r2, r3
   17d0e:	2100      	movs	r1, #0
   17d10:	4bbf      	ldr	r3, [pc, #764]	; (18010 <vTask_GSM_service+0x7dc>)
   17d12:	4798      	blx	r3
					if (gsm_read_response_line(response,sizeof(response)))
   17d14:	230c      	movs	r3, #12
   17d16:	18fb      	adds	r3, r7, r3
   17d18:	2140      	movs	r1, #64	; 0x40
   17d1a:	0018      	movs	r0, r3
   17d1c:	4bbd      	ldr	r3, [pc, #756]	; (18014 <vTask_GSM_service+0x7e0>)
   17d1e:	4798      	blx	r3
   17d20:	1e03      	subs	r3, r0, #0
   17d22:	d100      	bne.n	17d26 <vTask_GSM_service+0x4f2>
   17d24:	e63d      	b.n	179a2 <vTask_GSM_service+0x16e>
					{
						uint8_t sms_index;
						sms_index = gsm_responseLine_isNew_SMS_Received(response);
   17d26:	2326      	movs	r3, #38	; 0x26
   17d28:	33ff      	adds	r3, #255	; 0xff
   17d2a:	18fc      	adds	r4, r7, r3
   17d2c:	230c      	movs	r3, #12
   17d2e:	18fb      	adds	r3, r7, r3
   17d30:	0018      	movs	r0, r3
   17d32:	4bb9      	ldr	r3, [pc, #740]	; (18018 <vTask_GSM_service+0x7e4>)
   17d34:	4798      	blx	r3
   17d36:	0003      	movs	r3, r0
   17d38:	7023      	strb	r3, [r4, #0]
						if (sms_index>0)
   17d3a:	2326      	movs	r3, #38	; 0x26
   17d3c:	33ff      	adds	r3, #255	; 0xff
   17d3e:	18fb      	adds	r3, r7, r3
   17d40:	781b      	ldrb	r3, [r3, #0]
   17d42:	2b00      	cmp	r3, #0
   17d44:	d100      	bne.n	17d48 <vTask_GSM_service+0x514>
   17d46:	e0e8      	b.n	17f1a <vTask_GSM_service+0x6e6>
						{
							char phone_number[15];
							char Received_SMS[160];
							gsm_read_sms(sms_index,phone_number,15,Received_SMS,160);
   17d48:	234c      	movs	r3, #76	; 0x4c
   17d4a:	18fa      	adds	r2, r7, r3
   17d4c:	1c79      	adds	r1, r7, #1
   17d4e:	31ff      	adds	r1, #255	; 0xff
   17d50:	2326      	movs	r3, #38	; 0x26
   17d52:	33ff      	adds	r3, #255	; 0xff
   17d54:	18fb      	adds	r3, r7, r3
   17d56:	7818      	ldrb	r0, [r3, #0]
   17d58:	23a0      	movs	r3, #160	; 0xa0
   17d5a:	9300      	str	r3, [sp, #0]
   17d5c:	0013      	movs	r3, r2
   17d5e:	220f      	movs	r2, #15
   17d60:	4cae      	ldr	r4, [pc, #696]	; (1801c <vTask_GSM_service+0x7e8>)
   17d62:	47a0      	blx	r4
							bool admin = isAdmin(phone_number);
   17d64:	232c      	movs	r3, #44	; 0x2c
   17d66:	33ff      	adds	r3, #255	; 0xff
   17d68:	18fc      	adds	r4, r7, r3
   17d6a:	1c7b      	adds	r3, r7, #1
   17d6c:	33ff      	adds	r3, #255	; 0xff
   17d6e:	0018      	movs	r0, r3
   17d70:	4bab      	ldr	r3, [pc, #684]	; (18020 <vTask_GSM_service+0x7ec>)
   17d72:	4798      	blx	r3
   17d74:	0003      	movs	r3, r0
   17d76:	7023      	strb	r3, [r4, #0]
							bool primaryUser = isPrimaryNumber(phone_number);
   17d78:	2392      	movs	r3, #146	; 0x92
   17d7a:	005b      	lsls	r3, r3, #1
   17d7c:	18fc      	adds	r4, r7, r3
   17d7e:	1c7b      	adds	r3, r7, #1
   17d80:	33ff      	adds	r3, #255	; 0xff
   17d82:	0018      	movs	r0, r3
   17d84:	4ba7      	ldr	r3, [pc, #668]	; (18024 <vTask_GSM_service+0x7f0>)
   17d86:	4798      	blx	r3
   17d88:	0003      	movs	r3, r0
   17d8a:	7023      	strb	r3, [r4, #0]
							bool alterUsr = isAlterNumber(phone_number);
   17d8c:	2324      	movs	r3, #36	; 0x24
   17d8e:	33ff      	adds	r3, #255	; 0xff
   17d90:	18fc      	adds	r4, r7, r3
   17d92:	1c7b      	adds	r3, r7, #1
   17d94:	33ff      	adds	r3, #255	; 0xff
   17d96:	0018      	movs	r0, r3
   17d98:	4ba3      	ldr	r3, [pc, #652]	; (18028 <vTask_GSM_service+0x7f4>)
   17d9a:	4798      	blx	r3
   17d9c:	0003      	movs	r3, r0
   17d9e:	7023      	strb	r3, [r4, #0]
							bool response_sms_processed_cmd = true;
   17da0:	2395      	movs	r3, #149	; 0x95
   17da2:	005b      	lsls	r3, r3, #1
   17da4:	18fb      	adds	r3, r7, r3
   17da6:	2201      	movs	r2, #1
   17da8:	701a      	strb	r2, [r3, #0]
							
							if(isAdmin)
							{
								setCallStateOnLCD(LCDCALLSTATE_INCOMINGSMS,"ADMIN",false);
   17daa:	4ba0      	ldr	r3, [pc, #640]	; (1802c <vTask_GSM_service+0x7f8>)
   17dac:	2200      	movs	r2, #0
   17dae:	0019      	movs	r1, r3
   17db0:	2004      	movs	r0, #4
   17db2:	4b9f      	ldr	r3, [pc, #636]	; (18030 <vTask_GSM_service+0x7fc>)
   17db4:	4798      	blx	r3
							else
							{
								setCallStateOnLCD(LCDCALLSTATE_INCOMINGSMS,phone_number,false);
							}
							
							StringtoUpperCase(Received_SMS);
   17db6:	234c      	movs	r3, #76	; 0x4c
   17db8:	18fb      	adds	r3, r7, r3
   17dba:	0018      	movs	r0, r3
   17dbc:	4b9d      	ldr	r3, [pc, #628]	; (18034 <vTask_GSM_service+0x800>)
   17dbe:	4798      	blx	r3
							
							if(!admin)
   17dc0:	232c      	movs	r3, #44	; 0x2c
   17dc2:	33ff      	adds	r3, #255	; 0xff
   17dc4:	18fb      	adds	r3, r7, r3
   17dc6:	781b      	ldrb	r3, [r3, #0]
   17dc8:	2201      	movs	r2, #1
   17dca:	4053      	eors	r3, r2
   17dcc:	b2db      	uxtb	r3, r3
   17dce:	2b00      	cmp	r3, #0
   17dd0:	d009      	beq.n	17de6 <vTask_GSM_service+0x5b2>
							{
								admin = checkSMSForPassCode(Received_SMS);
   17dd2:	232c      	movs	r3, #44	; 0x2c
   17dd4:	33ff      	adds	r3, #255	; 0xff
   17dd6:	18fc      	adds	r4, r7, r3
   17dd8:	234c      	movs	r3, #76	; 0x4c
   17dda:	18fb      	adds	r3, r7, r3
   17ddc:	0018      	movs	r0, r3
   17dde:	4b96      	ldr	r3, [pc, #600]	; (18038 <vTask_GSM_service+0x804>)
   17de0:	4798      	blx	r3
   17de2:	0003      	movs	r3, r0
   17de4:	7023      	strb	r3, [r4, #0]
							}

							if (admin || primaryUser || alterUsr)
   17de6:	232c      	movs	r3, #44	; 0x2c
   17de8:	33ff      	adds	r3, #255	; 0xff
   17dea:	18fb      	adds	r3, r7, r3
   17dec:	781b      	ldrb	r3, [r3, #0]
   17dee:	2b00      	cmp	r3, #0
   17df0:	d10b      	bne.n	17e0a <vTask_GSM_service+0x5d6>
   17df2:	2392      	movs	r3, #146	; 0x92
   17df4:	005b      	lsls	r3, r3, #1
   17df6:	18fb      	adds	r3, r7, r3
   17df8:	781b      	ldrb	r3, [r3, #0]
   17dfa:	2b00      	cmp	r3, #0
   17dfc:	d105      	bne.n	17e0a <vTask_GSM_service+0x5d6>
   17dfe:	2324      	movs	r3, #36	; 0x24
   17e00:	33ff      	adds	r3, #255	; 0xff
   17e02:	18fb      	adds	r3, r7, r3
   17e04:	781b      	ldrb	r3, [r3, #0]
   17e06:	2b00      	cmp	r3, #0
   17e08:	d031      	beq.n	17e6e <vTask_GSM_service+0x63a>
							{
								if(StringstartsWith(Received_SMS,"#"))
   17e0a:	4a8c      	ldr	r2, [pc, #560]	; (1803c <vTask_GSM_service+0x808>)
   17e0c:	234c      	movs	r3, #76	; 0x4c
   17e0e:	18fb      	adds	r3, r7, r3
   17e10:	0011      	movs	r1, r2
   17e12:	0018      	movs	r0, r3
   17e14:	4b8a      	ldr	r3, [pc, #552]	; (18040 <vTask_GSM_service+0x80c>)
   17e16:	4798      	blx	r3
   17e18:	1e03      	subs	r3, r0, #0
   17e1a:	d013      	beq.n	17e44 <vTask_GSM_service+0x610>
								{
									memmove(Received_SMS, Received_SMS+1, strlen(Received_SMS));  //this will remove '#'
   17e1c:	234c      	movs	r3, #76	; 0x4c
   17e1e:	18fc      	adds	r4, r7, r3
   17e20:	3401      	adds	r4, #1
   17e22:	234c      	movs	r3, #76	; 0x4c
   17e24:	18fb      	adds	r3, r7, r3
   17e26:	0018      	movs	r0, r3
   17e28:	4b86      	ldr	r3, [pc, #536]	; (18044 <vTask_GSM_service+0x810>)
   17e2a:	4798      	blx	r3
   17e2c:	0002      	movs	r2, r0
   17e2e:	234c      	movs	r3, #76	; 0x4c
   17e30:	18fb      	adds	r3, r7, r3
   17e32:	0021      	movs	r1, r4
   17e34:	0018      	movs	r0, r3
   17e36:	4b84      	ldr	r3, [pc, #528]	; (18048 <vTask_GSM_service+0x814>)
   17e38:	4798      	blx	r3
									response_sms_processed_cmd=false;
   17e3a:	2395      	movs	r3, #149	; 0x95
   17e3c:	005b      	lsls	r3, r3, #1
   17e3e:	18fb      	adds	r3, r7, r3
   17e40:	2200      	movs	r2, #0
   17e42:	701a      	strb	r2, [r3, #0]
								}
								processOnSMS(Received_SMS,admin,response_sms_processed_cmd,alterUsr,phone_number);
   17e44:	2324      	movs	r3, #36	; 0x24
   17e46:	33ff      	adds	r3, #255	; 0xff
   17e48:	18fb      	adds	r3, r7, r3
   17e4a:	781c      	ldrb	r4, [r3, #0]
   17e4c:	2395      	movs	r3, #149	; 0x95
   17e4e:	005b      	lsls	r3, r3, #1
   17e50:	18fb      	adds	r3, r7, r3
   17e52:	781a      	ldrb	r2, [r3, #0]
   17e54:	232c      	movs	r3, #44	; 0x2c
   17e56:	33ff      	adds	r3, #255	; 0xff
   17e58:	18fb      	adds	r3, r7, r3
   17e5a:	7819      	ldrb	r1, [r3, #0]
   17e5c:	234c      	movs	r3, #76	; 0x4c
   17e5e:	18f8      	adds	r0, r7, r3
   17e60:	1c7b      	adds	r3, r7, #1
   17e62:	33ff      	adds	r3, #255	; 0xff
   17e64:	9300      	str	r3, [sp, #0]
   17e66:	0023      	movs	r3, r4
   17e68:	4c78      	ldr	r4, [pc, #480]	; (1804c <vTask_GSM_service+0x818>)
   17e6a:	47a0      	blx	r4
   17e6c:	e053      	b.n	17f16 <vTask_GSM_service+0x6e2>
							}
							else if(isM2MNumber(phone_number))
   17e6e:	1c7b      	adds	r3, r7, #1
   17e70:	33ff      	adds	r3, #255	; 0xff
   17e72:	0018      	movs	r0, r3
   17e74:	4b76      	ldr	r3, [pc, #472]	; (18050 <vTask_GSM_service+0x81c>)
   17e76:	4798      	blx	r3
   17e78:	1e03      	subs	r3, r0, #0
   17e7a:	d01f      	beq.n	17ebc <vTask_GSM_service+0x688>
							{
								if(StringstartsWith(Received_SMS,"VMM01"))
   17e7c:	4a75      	ldr	r2, [pc, #468]	; (18054 <vTask_GSM_service+0x820>)
   17e7e:	234c      	movs	r3, #76	; 0x4c
   17e80:	18fb      	adds	r3, r7, r3
   17e82:	0011      	movs	r1, r2
   17e84:	0018      	movs	r0, r3
   17e86:	4b6e      	ldr	r3, [pc, #440]	; (18040 <vTask_GSM_service+0x80c>)
   17e88:	4798      	blx	r3
   17e8a:	1e03      	subs	r3, r0, #0
   17e8c:	d043      	beq.n	17f16 <vTask_GSM_service+0x6e2>
								{
									setM2MVerify(true);
   17e8e:	2001      	movs	r0, #1
   17e90:	4b71      	ldr	r3, [pc, #452]	; (18058 <vTask_GSM_service+0x824>)
   17e92:	4798      	blx	r3
									getM2MNumber(phone_number);
   17e94:	1c7b      	adds	r3, r7, #1
   17e96:	33ff      	adds	r3, #255	; 0xff
   17e98:	0018      	movs	r0, r3
   17e9a:	4b70      	ldr	r3, [pc, #448]	; (1805c <vTask_GSM_service+0x828>)
   17e9c:	4798      	blx	r3
									setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
   17e9e:	1c7b      	adds	r3, r7, #1
   17ea0:	33ff      	adds	r3, #255	; 0xff
   17ea2:	2200      	movs	r2, #0
   17ea4:	0019      	movs	r1, r3
   17ea6:	2005      	movs	r0, #5
   17ea8:	4b61      	ldr	r3, [pc, #388]	; (18030 <vTask_GSM_service+0x7fc>)
   17eaa:	4798      	blx	r3
									gsm_send_sms(phone_number,"VMR02");
   17eac:	4a6c      	ldr	r2, [pc, #432]	; (18060 <vTask_GSM_service+0x82c>)
   17eae:	1c7b      	adds	r3, r7, #1
   17eb0:	33ff      	adds	r3, #255	; 0xff
   17eb2:	0011      	movs	r1, r2
   17eb4:	0018      	movs	r0, r3
   17eb6:	4b6b      	ldr	r3, [pc, #428]	; (18064 <vTask_GSM_service+0x830>)
   17eb8:	4798      	blx	r3
   17eba:	e02c      	b.n	17f16 <vTask_GSM_service+0x6e2>
								}
							}
							else if(factory_settings_parameter_struct.ENABLE_M2M && isM2MRemoteNumber(phone_number))
   17ebc:	4b49      	ldr	r3, [pc, #292]	; (17fe4 <vTask_GSM_service+0x7b0>)
   17ebe:	78db      	ldrb	r3, [r3, #3]
   17ec0:	2b00      	cmp	r3, #0
   17ec2:	d028      	beq.n	17f16 <vTask_GSM_service+0x6e2>
   17ec4:	1c7b      	adds	r3, r7, #1
   17ec6:	33ff      	adds	r3, #255	; 0xff
   17ec8:	0018      	movs	r0, r3
   17eca:	4b67      	ldr	r3, [pc, #412]	; (18068 <vTask_GSM_service+0x834>)
   17ecc:	4798      	blx	r3
   17ece:	1e03      	subs	r3, r0, #0
   17ed0:	d021      	beq.n	17f16 <vTask_GSM_service+0x6e2>
							{
								if(StringstartsWith(Received_SMS,"VMR02"))
   17ed2:	4a63      	ldr	r2, [pc, #396]	; (18060 <vTask_GSM_service+0x82c>)
   17ed4:	234c      	movs	r3, #76	; 0x4c
   17ed6:	18fb      	adds	r3, r7, r3
   17ed8:	0011      	movs	r1, r2
   17eda:	0018      	movs	r0, r3
   17edc:	4b58      	ldr	r3, [pc, #352]	; (18040 <vTask_GSM_service+0x80c>)
   17ede:	4798      	blx	r3
   17ee0:	1e03      	subs	r3, r0, #0
   17ee2:	d018      	beq.n	17f16 <vTask_GSM_service+0x6e2>
								{
									setM2MRemoteVerified(true);
   17ee4:	2001      	movs	r0, #1
   17ee6:	4b61      	ldr	r3, [pc, #388]	; (1806c <vTask_GSM_service+0x838>)
   17ee8:	4798      	blx	r3
									saveM2MSettings(true);
   17eea:	2001      	movs	r0, #1
   17eec:	4b60      	ldr	r3, [pc, #384]	; (18070 <vTask_GSM_service+0x83c>)
   17eee:	4798      	blx	r3
									getActiveNumber(phone_number);
   17ef0:	1c7b      	adds	r3, r7, #1
   17ef2:	33ff      	adds	r3, #255	; 0xff
   17ef4:	0018      	movs	r0, r3
   17ef6:	4b5f      	ldr	r3, [pc, #380]	; (18074 <vTask_GSM_service+0x840>)
   17ef8:	4798      	blx	r3
									setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
   17efa:	1c7b      	adds	r3, r7, #1
   17efc:	33ff      	adds	r3, #255	; 0xff
   17efe:	2200      	movs	r2, #0
   17f00:	0019      	movs	r1, r3
   17f02:	2005      	movs	r0, #5
   17f04:	4b4a      	ldr	r3, [pc, #296]	; (18030 <vTask_GSM_service+0x7fc>)
   17f06:	4798      	blx	r3
									gsm_send_sms(phone_number,"M2M TURNED ON");
   17f08:	4a5b      	ldr	r2, [pc, #364]	; (18078 <vTask_GSM_service+0x844>)
   17f0a:	1c7b      	adds	r3, r7, #1
   17f0c:	33ff      	adds	r3, #255	; 0xff
   17f0e:	0011      	movs	r1, r2
   17f10:	0018      	movs	r0, r3
   17f12:	4b54      	ldr	r3, [pc, #336]	; (18064 <vTask_GSM_service+0x830>)
   17f14:	4798      	blx	r3
								}
							}
							gsm_delete_all_sms();
   17f16:	4b59      	ldr	r3, [pc, #356]	; (1807c <vTask_GSM_service+0x848>)
   17f18:	4798      	blx	r3


						/************************************************************************/
						/* Automatic Detection of Network Using CSQN URC, and continue to next loop*/
						/************************************************************************/
						if(autoNetworkDetection && gsm_responseLine_isCSQN(response,&Signal_Strength))
   17f1a:	4b59      	ldr	r3, [pc, #356]	; (18080 <vTask_GSM_service+0x84c>)
   17f1c:	781b      	ldrb	r3, [r3, #0]
   17f1e:	2b00      	cmp	r3, #0
   17f20:	d014      	beq.n	17f4c <vTask_GSM_service+0x718>
   17f22:	4a58      	ldr	r2, [pc, #352]	; (18084 <vTask_GSM_service+0x850>)
   17f24:	230c      	movs	r3, #12
   17f26:	18fb      	adds	r3, r7, r3
   17f28:	0011      	movs	r1, r2
   17f2a:	0018      	movs	r0, r3
   17f2c:	4b56      	ldr	r3, [pc, #344]	; (18088 <vTask_GSM_service+0x854>)
   17f2e:	4798      	blx	r3
   17f30:	1e03      	subs	r3, r0, #0
   17f32:	d00b      	beq.n	17f4c <vTask_GSM_service+0x718>
						{
							lastGSMCommunicationTime=lastToLastGSMCommunicationTime;
   17f34:	4b55      	ldr	r3, [pc, #340]	; (1808c <vTask_GSM_service+0x858>)
   17f36:	681a      	ldr	r2, [r3, #0]
   17f38:	4b55      	ldr	r3, [pc, #340]	; (18090 <vTask_GSM_service+0x85c>)
   17f3a:	601a      	str	r2, [r3, #0]
							network_update_time = xTaskGetTickCount();
   17f3c:	4b2d      	ldr	r3, [pc, #180]	; (17ff4 <vTask_GSM_service+0x7c0>)
   17f3e:	4798      	blx	r3
   17f40:	0003      	movs	r3, r0
   17f42:	2296      	movs	r2, #150	; 0x96
   17f44:	0052      	lsls	r2, r2, #1
   17f46:	18ba      	adds	r2, r7, r2
   17f48:	6013      	str	r3, [r2, #0]
   17f4a:	e52a      	b.n	179a2 <vTask_GSM_service+0x16e>
							continue;
						}


						if (!freezeIncomingCalls &&  (currentStatus == 'N' || currentStatus == 'R') && (currentCallStatus == 'N' || currentCallStatus == 'I')) //Ringing Incoming Call
   17f4c:	4b51      	ldr	r3, [pc, #324]	; (18094 <vTask_GSM_service+0x860>)
   17f4e:	781b      	ldrb	r3, [r3, #0]
   17f50:	2201      	movs	r2, #1
   17f52:	4053      	eors	r3, r2
   17f54:	b2db      	uxtb	r3, r3
   17f56:	2b00      	cmp	r3, #0
   17f58:	d100      	bne.n	17f5c <vTask_GSM_service+0x728>
   17f5a:	e104      	b.n	18166 <vTask_GSM_service+0x932>
   17f5c:	4b1c      	ldr	r3, [pc, #112]	; (17fd0 <vTask_GSM_service+0x79c>)
   17f5e:	781b      	ldrb	r3, [r3, #0]
   17f60:	b2db      	uxtb	r3, r3
   17f62:	2b4e      	cmp	r3, #78	; 0x4e
   17f64:	d005      	beq.n	17f72 <vTask_GSM_service+0x73e>
   17f66:	4b1a      	ldr	r3, [pc, #104]	; (17fd0 <vTask_GSM_service+0x79c>)
   17f68:	781b      	ldrb	r3, [r3, #0]
   17f6a:	b2db      	uxtb	r3, r3
   17f6c:	2b52      	cmp	r3, #82	; 0x52
   17f6e:	d000      	beq.n	17f72 <vTask_GSM_service+0x73e>
   17f70:	e0f9      	b.n	18166 <vTask_GSM_service+0x932>
   17f72:	4b49      	ldr	r3, [pc, #292]	; (18098 <vTask_GSM_service+0x864>)
   17f74:	781b      	ldrb	r3, [r3, #0]
   17f76:	b2db      	uxtb	r3, r3
   17f78:	2b4e      	cmp	r3, #78	; 0x4e
   17f7a:	d005      	beq.n	17f88 <vTask_GSM_service+0x754>
   17f7c:	4b46      	ldr	r3, [pc, #280]	; (18098 <vTask_GSM_service+0x864>)
   17f7e:	781b      	ldrb	r3, [r3, #0]
   17f80:	b2db      	uxtb	r3, r3
   17f82:	2b49      	cmp	r3, #73	; 0x49
   17f84:	d000      	beq.n	17f88 <vTask_GSM_service+0x754>
   17f86:	e0ee      	b.n	18166 <vTask_GSM_service+0x932>
						{
							if (gsm_responseLine_isRinging(response))
   17f88:	230c      	movs	r3, #12
   17f8a:	18fb      	adds	r3, r7, r3
   17f8c:	0018      	movs	r0, r3
   17f8e:	4b43      	ldr	r3, [pc, #268]	; (1809c <vTask_GSM_service+0x868>)
   17f90:	4798      	blx	r3
   17f92:	1e03      	subs	r3, r0, #0
   17f94:	d100      	bne.n	17f98 <vTask_GSM_service+0x764>
   17f96:	e0db      	b.n	18150 <vTask_GSM_service+0x91c>
							{
								currentStatus = 'R';
   17f98:	4b0d      	ldr	r3, [pc, #52]	; (17fd0 <vTask_GSM_service+0x79c>)
   17f9a:	2252      	movs	r2, #82	; 0x52
   17f9c:	701a      	strb	r2, [r3, #0]
								currentCallStatus = 'I';
   17f9e:	4b3e      	ldr	r3, [pc, #248]	; (18098 <vTask_GSM_service+0x864>)
   17fa0:	2249      	movs	r2, #73	; 0x49
   17fa2:	701a      	strb	r2, [r3, #0]
								char incoming_caller[20]={0};
   17fa4:	23ec      	movs	r3, #236	; 0xec
   17fa6:	18fb      	adds	r3, r7, r3
   17fa8:	0018      	movs	r0, r3
   17faa:	2314      	movs	r3, #20
   17fac:	001a      	movs	r2, r3
   17fae:	2100      	movs	r1, #0
   17fb0:	4b17      	ldr	r3, [pc, #92]	; (18010 <vTask_GSM_service+0x7dc>)
   17fb2:	4798      	blx	r3
								inCall = true;
   17fb4:	4b3a      	ldr	r3, [pc, #232]	; (180a0 <vTask_GSM_service+0x86c>)
   17fb6:	2201      	movs	r2, #1
   17fb8:	701a      	strb	r2, [r3, #0]
								
								bool new_call = false;
   17fba:	232a      	movs	r3, #42	; 0x2a
   17fbc:	33ff      	adds	r3, #255	; 0xff
   17fbe:	18fb      	adds	r3, r7, r3
   17fc0:	2200      	movs	r2, #0
   17fc2:	701a      	strb	r2, [r3, #0]
								for (uint8_t i=0;i<4;i++)
   17fc4:	2394      	movs	r3, #148	; 0x94
   17fc6:	005b      	lsls	r3, r3, #1
   17fc8:	18fb      	adds	r3, r7, r3
   17fca:	2200      	movs	r2, #0
   17fcc:	701a      	strb	r2, [r3, #0]
   17fce:	e099      	b.n	18104 <vTask_GSM_service+0x8d0>
   17fd0:	200007dc 	.word	0x200007dc
   17fd4:	00014a79 	.word	0x00014a79
   17fd8:	20000763 	.word	0x20000763
   17fdc:	00014511 	.word	0x00014511
   17fe0:	00014d65 	.word	0x00014d65
   17fe4:	2000062c 	.word	0x2000062c
   17fe8:	20000743 	.word	0x20000743
   17fec:	2000079e 	.word	0x2000079e
   17ff0:	200007d0 	.word	0x200007d0
   17ff4:	000209cd 	.word	0x000209cd
   17ff8:	20000814 	.word	0x20000814
   17ffc:	2000072d 	.word	0x2000072d
   18000:	000175f9 	.word	0x000175f9
   18004:	000148d1 	.word	0x000148d1
   18008:	0001491d 	.word	0x0001491d
   1800c:	fffffedc 	.word	0xfffffedc
   18010:	000298b7 	.word	0x000298b7
   18014:	00013499 	.word	0x00013499
   18018:	0001353d 	.word	0x0001353d
   1801c:	00012ca5 	.word	0x00012ca5
   18020:	00011a69 	.word	0x00011a69
   18024:	00010999 	.word	0x00010999
   18028:	00010a09 	.word	0x00010a09
   1802c:	0002b15c 	.word	0x0002b15c
   18030:	0001d2b9 	.word	0x0001d2b9
   18034:	00014195 	.word	0x00014195
   18038:	0001768d 	.word	0x0001768d
   1803c:	0002b164 	.word	0x0002b164
   18040:	00014201 	.word	0x00014201
   18044:	00029b47 	.word	0x00029b47
   18048:	00029893 	.word	0x00029893
   1804c:	00014fe1 	.word	0x00014fe1
   18050:	00010a51 	.word	0x00010a51
   18054:	0002b108 	.word	0x0002b108
   18058:	00010b41 	.word	0x00010b41
   1805c:	00010ac9 	.word	0x00010ac9
   18060:	0002b168 	.word	0x0002b168
   18064:	00012b79 	.word	0x00012b79
   18068:	00010a8d 	.word	0x00010a8d
   1806c:	00010b91 	.word	0x00010b91
   18070:	00010be1 	.word	0x00010be1
   18074:	00010d1d 	.word	0x00010d1d
   18078:	0002b170 	.word	0x0002b170
   1807c:	000126f1 	.word	0x000126f1
   18080:	20000861 	.word	0x20000861
   18084:	20000789 	.word	0x20000789
   18088:	000135f5 	.word	0x000135f5
   1808c:	20000690 	.word	0x20000690
   18090:	20000694 	.word	0x20000694
   18094:	20000744 	.word	0x20000744
   18098:	2000078f 	.word	0x2000078f
   1809c:	000135c5 	.word	0x000135c5
   180a0:	2000079c 	.word	0x2000079c
								{
									vTaskDelay(500/portTICK_PERIOD_MS);
   180a4:	23fa      	movs	r3, #250	; 0xfa
   180a6:	005b      	lsls	r3, r3, #1
   180a8:	0018      	movs	r0, r3
   180aa:	4bc8      	ldr	r3, [pc, #800]	; (183cc <vTask_GSM_service+0xb98>)
   180ac:	4798      	blx	r3
									gsm_read_response_line(response,sizeof(response));
   180ae:	230c      	movs	r3, #12
   180b0:	18fb      	adds	r3, r7, r3
   180b2:	2140      	movs	r1, #64	; 0x40
   180b4:	0018      	movs	r0, r3
   180b6:	4bc6      	ldr	r3, [pc, #792]	; (183d0 <vTask_GSM_service+0xb9c>)
   180b8:	4798      	blx	r3
									if (gsm_responseLine_get_IncommingCallNo(response,incoming_caller))
   180ba:	23ec      	movs	r3, #236	; 0xec
   180bc:	18fa      	adds	r2, r7, r3
   180be:	230c      	movs	r3, #12
   180c0:	18fb      	adds	r3, r7, r3
   180c2:	0011      	movs	r1, r2
   180c4:	0018      	movs	r0, r3
   180c6:	4bc3      	ldr	r3, [pc, #780]	; (183d4 <vTask_GSM_service+0xba0>)
   180c8:	4798      	blx	r3
   180ca:	1e03      	subs	r3, r0, #0
   180cc:	d011      	beq.n	180f2 <vTask_GSM_service+0x8be>
									{
										setCallStateOnLCD(LCDCALLSTATE_RINGING,incoming_caller,false);
   180ce:	23ec      	movs	r3, #236	; 0xec
   180d0:	18fb      	adds	r3, r7, r3
   180d2:	2200      	movs	r2, #0
   180d4:	0019      	movs	r1, r3
   180d6:	2001      	movs	r0, #1
   180d8:	4bbf      	ldr	r3, [pc, #764]	; (183d8 <vTask_GSM_service+0xba4>)
   180da:	4798      	blx	r3
										new_call = true;
   180dc:	232a      	movs	r3, #42	; 0x2a
   180de:	33ff      	adds	r3, #255	; 0xff
   180e0:	18fb      	adds	r3, r7, r3
   180e2:	2201      	movs	r2, #1
   180e4:	701a      	strb	r2, [r3, #0]
										callCutWait = xTaskGetTickCount();
   180e6:	4bbd      	ldr	r3, [pc, #756]	; (183dc <vTask_GSM_service+0xba8>)
   180e8:	4798      	blx	r3
   180ea:	0002      	movs	r2, r0
   180ec:	4bbc      	ldr	r3, [pc, #752]	; (183e0 <vTask_GSM_service+0xbac>)
   180ee:	601a      	str	r2, [r3, #0]
										break;
   180f0:	e00e      	b.n	18110 <vTask_GSM_service+0x8dc>
								for (uint8_t i=0;i<4;i++)
   180f2:	2394      	movs	r3, #148	; 0x94
   180f4:	005b      	lsls	r3, r3, #1
   180f6:	18fb      	adds	r3, r7, r3
   180f8:	781a      	ldrb	r2, [r3, #0]
   180fa:	2394      	movs	r3, #148	; 0x94
   180fc:	005b      	lsls	r3, r3, #1
   180fe:	18fb      	adds	r3, r7, r3
   18100:	3201      	adds	r2, #1
   18102:	701a      	strb	r2, [r3, #0]
   18104:	2394      	movs	r3, #148	; 0x94
   18106:	005b      	lsls	r3, r3, #1
   18108:	18fb      	adds	r3, r7, r3
   1810a:	781b      	ldrb	r3, [r3, #0]
   1810c:	2b03      	cmp	r3, #3
   1810e:	d9c9      	bls.n	180a4 <vTask_GSM_service+0x870>
									}
								}
								if (new_call)
   18110:	232a      	movs	r3, #42	; 0x2a
   18112:	33ff      	adds	r3, #255	; 0xff
   18114:	18fb      	adds	r3, r7, r3
   18116:	781b      	ldrb	r3, [r3, #0]
   18118:	2b00      	cmp	r3, #0
   1811a:	d100      	bne.n	1811e <vTask_GSM_service+0x8ea>
   1811c:	e14f      	b.n	183be <vTask_GSM_service+0xb8a>
								{
									new_call = false;
   1811e:	232a      	movs	r3, #42	; 0x2a
   18120:	33ff      	adds	r3, #255	; 0xff
   18122:	18fb      	adds	r3, r7, r3
   18124:	2200      	movs	r2, #0
   18126:	701a      	strb	r2, [r3, #0]
									if (checkNumber(incoming_caller))
   18128:	23ec      	movs	r3, #236	; 0xec
   1812a:	18fb      	adds	r3, r7, r3
   1812c:	0018      	movs	r0, r3
   1812e:	4bad      	ldr	r3, [pc, #692]	; (183e4 <vTask_GSM_service+0xbb0>)
   18130:	4798      	blx	r3
   18132:	1e03      	subs	r3, r0, #0
   18134:	d009      	beq.n	1814a <vTask_GSM_service+0x916>
									{
										acceptCall();
   18136:	4bac      	ldr	r3, [pc, #688]	; (183e8 <vTask_GSM_service+0xbb4>)
   18138:	4798      	blx	r3
										setCallStateOnLCD(LCDCALLSTATE_INCALL,incoming_caller,false);
   1813a:	23ec      	movs	r3, #236	; 0xec
   1813c:	18fb      	adds	r3, r7, r3
   1813e:	2200      	movs	r2, #0
   18140:	0019      	movs	r1, r3
   18142:	2002      	movs	r0, #2
   18144:	4ba4      	ldr	r3, [pc, #656]	; (183d8 <vTask_GSM_service+0xba4>)
   18146:	4798      	blx	r3
							if (gsm_responseLine_isRinging(response))
   18148:	e139      	b.n	183be <vTask_GSM_service+0xb8a>
									}
									else
									{
										endCall();
   1814a:	4ba8      	ldr	r3, [pc, #672]	; (183ec <vTask_GSM_service+0xbb8>)
   1814c:	4798      	blx	r3
							if (gsm_responseLine_isRinging(response))
   1814e:	e136      	b.n	183be <vTask_GSM_service+0xb8a>
									}
								}
							}
							else if (gsm_responseLine_isCallCut(response))
   18150:	230c      	movs	r3, #12
   18152:	18fb      	adds	r3, r7, r3
   18154:	0018      	movs	r0, r3
   18156:	4ba6      	ldr	r3, [pc, #664]	; (183f0 <vTask_GSM_service+0xbbc>)
   18158:	4798      	blx	r3
   1815a:	1e03      	subs	r3, r0, #0
   1815c:	d100      	bne.n	18160 <vTask_GSM_service+0x92c>
   1815e:	e12e      	b.n	183be <vTask_GSM_service+0xb8a>
							{
								endCall();
   18160:	4ba2      	ldr	r3, [pc, #648]	; (183ec <vTask_GSM_service+0xbb8>)
   18162:	4798      	blx	r3
							if (gsm_responseLine_isRinging(response))
   18164:	e12b      	b.n	183be <vTask_GSM_service+0xb8a>
							}
						}
						else if (!freezeIncomingCalls && currentStatus == 'I' && currentCallStatus == 'I') //IN CALL INCOMING CALL
   18166:	4ba3      	ldr	r3, [pc, #652]	; (183f4 <vTask_GSM_service+0xbc0>)
   18168:	781b      	ldrb	r3, [r3, #0]
   1816a:	2201      	movs	r2, #1
   1816c:	4053      	eors	r3, r2
   1816e:	b2db      	uxtb	r3, r3
   18170:	2b00      	cmp	r3, #0
   18172:	d045      	beq.n	18200 <vTask_GSM_service+0x9cc>
   18174:	4ba0      	ldr	r3, [pc, #640]	; (183f8 <vTask_GSM_service+0xbc4>)
   18176:	781b      	ldrb	r3, [r3, #0]
   18178:	b2db      	uxtb	r3, r3
   1817a:	2b49      	cmp	r3, #73	; 0x49
   1817c:	d140      	bne.n	18200 <vTask_GSM_service+0x9cc>
   1817e:	4b9f      	ldr	r3, [pc, #636]	; (183fc <vTask_GSM_service+0xbc8>)
   18180:	781b      	ldrb	r3, [r3, #0]
   18182:	b2db      	uxtb	r3, r3
   18184:	2b49      	cmp	r3, #73	; 0x49
   18186:	d13b      	bne.n	18200 <vTask_GSM_service+0x9cc>
						{
							if (gsm_responseLine_isCallCut(response))
   18188:	230c      	movs	r3, #12
   1818a:	18fb      	adds	r3, r7, r3
   1818c:	0018      	movs	r0, r3
   1818e:	4b98      	ldr	r3, [pc, #608]	; (183f0 <vTask_GSM_service+0xbbc>)
   18190:	4798      	blx	r3
   18192:	1e03      	subs	r3, r0, #0
   18194:	d002      	beq.n	1819c <vTask_GSM_service+0x968>
							{
								endCall();
   18196:	4b95      	ldr	r3, [pc, #596]	; (183ec <vTask_GSM_service+0xbb8>)
   18198:	4798      	blx	r3
							if (gsm_responseLine_isCallCut(response))
   1819a:	e114      	b.n	183c6 <vTask_GSM_service+0xb92>
							}
							else if(gsm_responseLine_isNew_DTMF_Command_Received(response))
   1819c:	230c      	movs	r3, #12
   1819e:	18fb      	adds	r3, r7, r3
   181a0:	0018      	movs	r0, r3
   181a2:	4b97      	ldr	r3, [pc, #604]	; (18400 <vTask_GSM_service+0xbcc>)
   181a4:	4798      	blx	r3
   181a6:	1e03      	subs	r3, r0, #0
   181a8:	d024      	beq.n	181f4 <vTask_GSM_service+0x9c0>
							{
								char *dtmf_tocken;
								dtmf_tocken = strtok(response,": ");
   181aa:	4a96      	ldr	r2, [pc, #600]	; (18404 <vTask_GSM_service+0xbd0>)
   181ac:	230c      	movs	r3, #12
   181ae:	18fb      	adds	r3, r7, r3
   181b0:	0011      	movs	r1, r2
   181b2:	0018      	movs	r0, r3
   181b4:	4b94      	ldr	r3, [pc, #592]	; (18408 <vTask_GSM_service+0xbd4>)
   181b6:	4798      	blx	r3
   181b8:	0003      	movs	r3, r0
   181ba:	228e      	movs	r2, #142	; 0x8e
   181bc:	0052      	lsls	r2, r2, #1
   181be:	18ba      	adds	r2, r7, r2
   181c0:	6013      	str	r3, [r2, #0]
								dtmf_tocken = strtok(NULL,": ");
   181c2:	4b90      	ldr	r3, [pc, #576]	; (18404 <vTask_GSM_service+0xbd0>)
   181c4:	0019      	movs	r1, r3
   181c6:	2000      	movs	r0, #0
   181c8:	4b8f      	ldr	r3, [pc, #572]	; (18408 <vTask_GSM_service+0xbd4>)
   181ca:	4798      	blx	r3
   181cc:	0003      	movs	r3, r0
   181ce:	228e      	movs	r2, #142	; 0x8e
   181d0:	0052      	lsls	r2, r2, #1
   181d2:	18ba      	adds	r2, r7, r2
   181d4:	6013      	str	r3, [r2, #0]
								RemoveSpaces(dtmf_tocken);
   181d6:	238e      	movs	r3, #142	; 0x8e
   181d8:	005b      	lsls	r3, r3, #1
   181da:	18fb      	adds	r3, r7, r3
   181dc:	681b      	ldr	r3, [r3, #0]
   181de:	0018      	movs	r0, r3
   181e0:	4b8a      	ldr	r3, [pc, #552]	; (1840c <vTask_GSM_service+0xbd8>)
   181e2:	4798      	blx	r3
								processOnDTMF(dtmf_tocken);
   181e4:	238e      	movs	r3, #142	; 0x8e
   181e6:	005b      	lsls	r3, r3, #1
   181e8:	18fb      	adds	r3, r7, r3
   181ea:	681b      	ldr	r3, [r3, #0]
   181ec:	0018      	movs	r0, r3
   181ee:	4b88      	ldr	r3, [pc, #544]	; (18410 <vTask_GSM_service+0xbdc>)
   181f0:	4798      	blx	r3
							if (gsm_responseLine_isCallCut(response))
   181f2:	e0e8      	b.n	183c6 <vTask_GSM_service+0xb92>
							}
							else
							{
								playSoundAgain(response);
   181f4:	230c      	movs	r3, #12
   181f6:	18fb      	adds	r3, r7, r3
   181f8:	0018      	movs	r0, r3
   181fa:	4b86      	ldr	r3, [pc, #536]	; (18414 <vTask_GSM_service+0xbe0>)
   181fc:	4798      	blx	r3
							if (gsm_responseLine_isCallCut(response))
   181fe:	e0e2      	b.n	183c6 <vTask_GSM_service+0xb92>
							}
						}
						else if ((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O') // OUTGOING CALL
   18200:	4b7d      	ldr	r3, [pc, #500]	; (183f8 <vTask_GSM_service+0xbc4>)
   18202:	781b      	ldrb	r3, [r3, #0]
   18204:	b2db      	uxtb	r3, r3
   18206:	2b4e      	cmp	r3, #78	; 0x4e
   18208:	d004      	beq.n	18214 <vTask_GSM_service+0x9e0>
   1820a:	4b7b      	ldr	r3, [pc, #492]	; (183f8 <vTask_GSM_service+0xbc4>)
   1820c:	781b      	ldrb	r3, [r3, #0]
   1820e:	b2db      	uxtb	r3, r3
   18210:	2b52      	cmp	r3, #82	; 0x52
   18212:	d163      	bne.n	182dc <vTask_GSM_service+0xaa8>
   18214:	4b79      	ldr	r3, [pc, #484]	; (183fc <vTask_GSM_service+0xbc8>)
   18216:	781b      	ldrb	r3, [r3, #0]
   18218:	b2db      	uxtb	r3, r3
   1821a:	2b4f      	cmp	r3, #79	; 0x4f
   1821c:	d15e      	bne.n	182dc <vTask_GSM_service+0xaa8>
						{
							if (OutGoingcallState(response) == 'R')
   1821e:	230c      	movs	r3, #12
   18220:	18fb      	adds	r3, r7, r3
   18222:	0018      	movs	r0, r3
   18224:	4b7c      	ldr	r3, [pc, #496]	; (18418 <vTask_GSM_service+0xbe4>)
   18226:	4798      	blx	r3
   18228:	0003      	movs	r3, r0
   1822a:	2b52      	cmp	r3, #82	; 0x52
   1822c:	d10b      	bne.n	18246 <vTask_GSM_service+0xa12>
							{
								callCutWait = xTaskGetTickCount();
   1822e:	4b6b      	ldr	r3, [pc, #428]	; (183dc <vTask_GSM_service+0xba8>)
   18230:	4798      	blx	r3
   18232:	0002      	movs	r2, r0
   18234:	4b6a      	ldr	r3, [pc, #424]	; (183e0 <vTask_GSM_service+0xbac>)
   18236:	601a      	str	r2, [r3, #0]
								currentStatus = 'R';
   18238:	4b6f      	ldr	r3, [pc, #444]	; (183f8 <vTask_GSM_service+0xbc4>)
   1823a:	2252      	movs	r2, #82	; 0x52
   1823c:	701a      	strb	r2, [r3, #0]
								currentCallStatus = 'O';
   1823e:	4b6f      	ldr	r3, [pc, #444]	; (183fc <vTask_GSM_service+0xbc8>)
   18240:	224f      	movs	r2, #79	; 0x4f
   18242:	701a      	strb	r2, [r3, #0]
							if (OutGoingcallState(response) == 'R')
   18244:	e0be      	b.n	183c4 <vTask_GSM_service+0xb90>
							}
							else if (gsm_responseLine_isCallCut(response) || OutGoingcallState(response) == 'E') //
   18246:	230c      	movs	r3, #12
   18248:	18fb      	adds	r3, r7, r3
   1824a:	0018      	movs	r0, r3
   1824c:	4b68      	ldr	r3, [pc, #416]	; (183f0 <vTask_GSM_service+0xbbc>)
   1824e:	4798      	blx	r3
   18250:	1e03      	subs	r3, r0, #0
   18252:	d107      	bne.n	18264 <vTask_GSM_service+0xa30>
   18254:	230c      	movs	r3, #12
   18256:	18fb      	adds	r3, r7, r3
   18258:	0018      	movs	r0, r3
   1825a:	4b6f      	ldr	r3, [pc, #444]	; (18418 <vTask_GSM_service+0xbe4>)
   1825c:	4798      	blx	r3
   1825e:	0003      	movs	r3, r0
   18260:	2b45      	cmp	r3, #69	; 0x45
   18262:	d110      	bne.n	18286 <vTask_GSM_service+0xa52>
							{
								char t1 = actionType;
   18264:	231c      	movs	r3, #28
   18266:	33ff      	adds	r3, #255	; 0xff
   18268:	18fb      	adds	r3, r7, r3
   1826a:	4a6c      	ldr	r2, [pc, #432]	; (1841c <vTask_GSM_service+0xbe8>)
   1826c:	7812      	ldrb	r2, [r2, #0]
   1826e:	701a      	strb	r2, [r3, #0]
								endCall();
   18270:	4b5e      	ldr	r3, [pc, #376]	; (183ec <vTask_GSM_service+0xbb8>)
   18272:	4798      	blx	r3
								checkRespSMS(t1);
   18274:	231c      	movs	r3, #28
   18276:	33ff      	adds	r3, #255	; 0xff
   18278:	18fb      	adds	r3, r7, r3
   1827a:	781b      	ldrb	r3, [r3, #0]
   1827c:	0018      	movs	r0, r3
   1827e:	4b68      	ldr	r3, [pc, #416]	; (18420 <vTask_GSM_service+0xbec>)
   18280:	4798      	blx	r3
							{
   18282:	46c0      	nop			; (mov r8, r8)
							if (OutGoingcallState(response) == 'R')
   18284:	e09e      	b.n	183c4 <vTask_GSM_service+0xb90>
							}
							else if (OutGoingcallState(response) == 'I')
   18286:	230c      	movs	r3, #12
   18288:	18fb      	adds	r3, r7, r3
   1828a:	0018      	movs	r0, r3
   1828c:	4b62      	ldr	r3, [pc, #392]	; (18418 <vTask_GSM_service+0xbe4>)
   1828e:	4798      	blx	r3
   18290:	0003      	movs	r3, r0
   18292:	2b49      	cmp	r3, #73	; 0x49
   18294:	d000      	beq.n	18298 <vTask_GSM_service+0xa64>
   18296:	e095      	b.n	183c4 <vTask_GSM_service+0xb90>
							{
								callCutWait = xTaskGetTickCount();
   18298:	4b50      	ldr	r3, [pc, #320]	; (183dc <vTask_GSM_service+0xba8>)
   1829a:	4798      	blx	r3
   1829c:	0002      	movs	r2, r0
   1829e:	4b50      	ldr	r3, [pc, #320]	; (183e0 <vTask_GSM_service+0xbac>)
   182a0:	601a      	str	r2, [r3, #0]
								currentStatus = 'I';
   182a2:	4b55      	ldr	r3, [pc, #340]	; (183f8 <vTask_GSM_service+0xbc4>)
   182a4:	2249      	movs	r2, #73	; 0x49
   182a6:	701a      	strb	r2, [r3, #0]
								currentCallStatus = 'O';
   182a8:	4b54      	ldr	r3, [pc, #336]	; (183fc <vTask_GSM_service+0xbc8>)
   182aa:	224f      	movs	r2, #79	; 0x4f
   182ac:	701a      	strb	r2, [r3, #0]
								callAccepted = true;
   182ae:	4b5d      	ldr	r3, [pc, #372]	; (18424 <vTask_GSM_service+0xbf0>)
   182b0:	2201      	movs	r2, #1
   182b2:	701a      	strb	r2, [r3, #0]
								setCallStateOnLCD(LCDCALLSTATE_INCALL,NULL,true);
   182b4:	2201      	movs	r2, #1
   182b6:	2100      	movs	r1, #0
   182b8:	2002      	movs	r0, #2
   182ba:	4b47      	ldr	r3, [pc, #284]	; (183d8 <vTask_GSM_service+0xba4>)
   182bc:	4798      	blx	r3
								if (!m2mEvent)
   182be:	4b5a      	ldr	r3, [pc, #360]	; (18428 <vTask_GSM_service+0xbf4>)
   182c0:	781b      	ldrb	r3, [r3, #0]
   182c2:	2201      	movs	r2, #1
   182c4:	4053      	eors	r3, r2
   182c6:	b2db      	uxtb	r3, r3
   182c8:	2b00      	cmp	r3, #0
   182ca:	d100      	bne.n	182ce <vTask_GSM_service+0xa9a>
   182cc:	e07a      	b.n	183c4 <vTask_GSM_service+0xb90>
								{
									playSound(actionType,true);
   182ce:	4b53      	ldr	r3, [pc, #332]	; (1841c <vTask_GSM_service+0xbe8>)
   182d0:	781b      	ldrb	r3, [r3, #0]
   182d2:	2101      	movs	r1, #1
   182d4:	0018      	movs	r0, r3
   182d6:	4b55      	ldr	r3, [pc, #340]	; (1842c <vTask_GSM_service+0xbf8>)
   182d8:	4798      	blx	r3
							if (OutGoingcallState(response) == 'R')
   182da:	e073      	b.n	183c4 <vTask_GSM_service+0xb90>
								}
							}
						}
						else if (currentStatus == 'I' && currentCallStatus == 'O') //IN CALL OUTGOING CALL
   182dc:	4b46      	ldr	r3, [pc, #280]	; (183f8 <vTask_GSM_service+0xbc4>)
   182de:	781b      	ldrb	r3, [r3, #0]
   182e0:	b2db      	uxtb	r3, r3
   182e2:	2b49      	cmp	r3, #73	; 0x49
   182e4:	d001      	beq.n	182ea <vTask_GSM_service+0xab6>
   182e6:	f7ff fb5c 	bl	179a2 <vTask_GSM_service+0x16e>
   182ea:	4b44      	ldr	r3, [pc, #272]	; (183fc <vTask_GSM_service+0xbc8>)
   182ec:	781b      	ldrb	r3, [r3, #0]
   182ee:	b2db      	uxtb	r3, r3
   182f0:	2b4f      	cmp	r3, #79	; 0x4f
   182f2:	d001      	beq.n	182f8 <vTask_GSM_service+0xac4>
   182f4:	f7ff fb55 	bl	179a2 <vTask_GSM_service+0x16e>
						{
							if (gsm_responseLine_isCallCut(response) || OutGoingcallState(response) == 'E')
   182f8:	230c      	movs	r3, #12
   182fa:	18fb      	adds	r3, r7, r3
   182fc:	0018      	movs	r0, r3
   182fe:	4b3c      	ldr	r3, [pc, #240]	; (183f0 <vTask_GSM_service+0xbbc>)
   18300:	4798      	blx	r3
   18302:	1e03      	subs	r3, r0, #0
   18304:	d107      	bne.n	18316 <vTask_GSM_service+0xae2>
   18306:	230c      	movs	r3, #12
   18308:	18fb      	adds	r3, r7, r3
   1830a:	0018      	movs	r0, r3
   1830c:	4b42      	ldr	r3, [pc, #264]	; (18418 <vTask_GSM_service+0xbe4>)
   1830e:	4798      	blx	r3
   18310:	0003      	movs	r3, r0
   18312:	2b45      	cmp	r3, #69	; 0x45
   18314:	d102      	bne.n	1831c <vTask_GSM_service+0xae8>
							{
								endCall();
   18316:	4b35      	ldr	r3, [pc, #212]	; (183ec <vTask_GSM_service+0xbb8>)
   18318:	4798      	blx	r3
   1831a:	e054      	b.n	183c6 <vTask_GSM_service+0xb92>
							}
							else if (gsm_responseLine_isNew_DTMF_Command_Received(response))
   1831c:	230c      	movs	r3, #12
   1831e:	18fb      	adds	r3, r7, r3
   18320:	0018      	movs	r0, r3
   18322:	4b37      	ldr	r3, [pc, #220]	; (18400 <vTask_GSM_service+0xbcc>)
   18324:	4798      	blx	r3
   18326:	1e03      	subs	r3, r0, #0
   18328:	d025      	beq.n	18376 <vTask_GSM_service+0xb42>
							{
								char *dtmf_tocken;
								dtmf_tocken = strtok(response,": ");
   1832a:	4a36      	ldr	r2, [pc, #216]	; (18404 <vTask_GSM_service+0xbd0>)
   1832c:	230c      	movs	r3, #12
   1832e:	18fb      	adds	r3, r7, r3
   18330:	0011      	movs	r1, r2
   18332:	0018      	movs	r0, r3
   18334:	4b34      	ldr	r3, [pc, #208]	; (18408 <vTask_GSM_service+0xbd4>)
   18336:	4798      	blx	r3
   18338:	0003      	movs	r3, r0
   1833a:	228a      	movs	r2, #138	; 0x8a
   1833c:	0052      	lsls	r2, r2, #1
   1833e:	18ba      	adds	r2, r7, r2
   18340:	6013      	str	r3, [r2, #0]
								dtmf_tocken = strtok(NULL,": ");
   18342:	4b30      	ldr	r3, [pc, #192]	; (18404 <vTask_GSM_service+0xbd0>)
   18344:	0019      	movs	r1, r3
   18346:	2000      	movs	r0, #0
   18348:	4b2f      	ldr	r3, [pc, #188]	; (18408 <vTask_GSM_service+0xbd4>)
   1834a:	4798      	blx	r3
   1834c:	0003      	movs	r3, r0
   1834e:	228a      	movs	r2, #138	; 0x8a
   18350:	0052      	lsls	r2, r2, #1
   18352:	18ba      	adds	r2, r7, r2
   18354:	6013      	str	r3, [r2, #0]
								RemoveSpaces(dtmf_tocken);
   18356:	238a      	movs	r3, #138	; 0x8a
   18358:	005b      	lsls	r3, r3, #1
   1835a:	18fb      	adds	r3, r7, r3
   1835c:	681b      	ldr	r3, [r3, #0]
   1835e:	0018      	movs	r0, r3
   18360:	4b2a      	ldr	r3, [pc, #168]	; (1840c <vTask_GSM_service+0xbd8>)
   18362:	4798      	blx	r3
								processOnDTMF(dtmf_tocken);
   18364:	238a      	movs	r3, #138	; 0x8a
   18366:	005b      	lsls	r3, r3, #1
   18368:	18fb      	adds	r3, r7, r3
   1836a:	681b      	ldr	r3, [r3, #0]
   1836c:	0018      	movs	r0, r3
   1836e:	4b28      	ldr	r3, [pc, #160]	; (18410 <vTask_GSM_service+0xbdc>)
   18370:	4798      	blx	r3
   18372:	f7ff fb16 	bl	179a2 <vTask_GSM_service+0x16e>
							}
							else
							{
								playSoundAgain(response);
   18376:	230c      	movs	r3, #12
   18378:	18fb      	adds	r3, r7, r3
   1837a:	0018      	movs	r0, r3
   1837c:	4b25      	ldr	r3, [pc, #148]	; (18414 <vTask_GSM_service+0xbe0>)
   1837e:	4798      	blx	r3
   18380:	f7ff fb0f 	bl	179a2 <vTask_GSM_service+0x16e>
				}
			}
		}
		else
		{
			boolGsm_config_flag			=false;
   18384:	4b2a      	ldr	r3, [pc, #168]	; (18430 <vTask_GSM_service+0xbfc>)
   18386:	2200      	movs	r2, #0
   18388:	701a      	strb	r2, [r3, #0]
			boolOne_Time_Msg_Delete_Flag   =false;
   1838a:	4b2a      	ldr	r3, [pc, #168]	; (18434 <vTask_GSM_service+0xc00>)
   1838c:	2200      	movs	r2, #0
   1838e:	701a      	strb	r2, [r3, #0]
			
			GSM_PWR_ON;
   18390:	4b29      	ldr	r3, [pc, #164]	; (18438 <vTask_GSM_service+0xc04>)
   18392:	4a29      	ldr	r2, [pc, #164]	; (18438 <vTask_GSM_service+0xc04>)
   18394:	6812      	ldr	r2, [r2, #0]
   18396:	2180      	movs	r1, #128	; 0x80
   18398:	0249      	lsls	r1, r1, #9
   1839a:	430a      	orrs	r2, r1
   1839c:	601a      	str	r2, [r3, #0]
			vTaskDelay(3000);
   1839e:	4b27      	ldr	r3, [pc, #156]	; (1843c <vTask_GSM_service+0xc08>)
   183a0:	0018      	movs	r0, r3
   183a2:	4b0a      	ldr	r3, [pc, #40]	; (183cc <vTask_GSM_service+0xb98>)
   183a4:	4798      	blx	r3
			GSM_PWR_OFF;
   183a6:	4b24      	ldr	r3, [pc, #144]	; (18438 <vTask_GSM_service+0xc04>)
   183a8:	4a23      	ldr	r2, [pc, #140]	; (18438 <vTask_GSM_service+0xc04>)
   183aa:	6812      	ldr	r2, [r2, #0]
   183ac:	4924      	ldr	r1, [pc, #144]	; (18440 <vTask_GSM_service+0xc0c>)
   183ae:	400a      	ands	r2, r1
   183b0:	601a      	str	r2, [r3, #0]
			vTaskDelay(5000);
   183b2:	4b24      	ldr	r3, [pc, #144]	; (18444 <vTask_GSM_service+0xc10>)
   183b4:	0018      	movs	r0, r3
   183b6:	4b05      	ldr	r3, [pc, #20]	; (183cc <vTask_GSM_service+0xb98>)
   183b8:	4798      	blx	r3
   183ba:	f7ff faf2 	bl	179a2 <vTask_GSM_service+0x16e>
							if (gsm_responseLine_isRinging(response))
   183be:	46c0      	nop			; (mov r8, r8)
   183c0:	f7ff faef 	bl	179a2 <vTask_GSM_service+0x16e>
							if (OutGoingcallState(response) == 'R')
   183c4:	46c0      	nop			; (mov r8, r8)
		if (currentStatus == 'I' || currentStatus == 'R')
   183c6:	f7ff faec 	bl	179a2 <vTask_GSM_service+0x16e>
   183ca:	46c0      	nop			; (mov r8, r8)
   183cc:	00020669 	.word	0x00020669
   183d0:	00013499 	.word	0x00013499
   183d4:	00013759 	.word	0x00013759
   183d8:	0001d2b9 	.word	0x0001d2b9
   183dc:	000209cd 	.word	0x000209cd
   183e0:	20000814 	.word	0x20000814
   183e4:	00017315 	.word	0x00017315
   183e8:	00014809 	.word	0x00014809
   183ec:	00014511 	.word	0x00014511
   183f0:	000137fd 	.word	0x000137fd
   183f4:	20000744 	.word	0x20000744
   183f8:	200007dc 	.word	0x200007dc
   183fc:	2000078f 	.word	0x2000078f
   18400:	00013875 	.word	0x00013875
   18404:	0002b180 	.word	0x0002b180
   18408:	00029ba9 	.word	0x00029ba9
   1840c:	00012aa5 	.word	0x00012aa5
   18410:	00014ddd 	.word	0x00014ddd
   18414:	00014961 	.word	0x00014961
   18418:	00014ae1 	.word	0x00014ae1
   1841c:	20000763 	.word	0x20000763
   18420:	00014d65 	.word	0x00014d65
   18424:	2000079e 	.word	0x2000079e
   18428:	20000743 	.word	0x20000743
   1842c:	00014851 	.word	0x00014851
   18430:	200007c4 	.word	0x200007c4
   18434:	200007d1 	.word	0x200007d1
   18438:	41004490 	.word	0x41004490
   1843c:	00000bb8 	.word	0x00000bb8
   18440:	fffeffff 	.word	0xfffeffff
   18444:	00001388 	.word	0x00001388

00018448 <start_gsm_service>:
		}
	}
}
void start_gsm_service(void)
{
   18448:	b590      	push	{r4, r7, lr}
   1844a:	b083      	sub	sp, #12
   1844c:	af02      	add	r7, sp, #8
	xTaskCreate(vTask_GSM_service,NULL,(uint16_t)940,NULL,1,NULL);
   1844e:	23eb      	movs	r3, #235	; 0xeb
   18450:	009a      	lsls	r2, r3, #2
   18452:	4806      	ldr	r0, [pc, #24]	; (1846c <start_gsm_service+0x24>)
   18454:	2300      	movs	r3, #0
   18456:	9301      	str	r3, [sp, #4]
   18458:	2301      	movs	r3, #1
   1845a:	9300      	str	r3, [sp, #0]
   1845c:	2300      	movs	r3, #0
   1845e:	2100      	movs	r1, #0
   18460:	4c03      	ldr	r4, [pc, #12]	; (18470 <start_gsm_service+0x28>)
   18462:	47a0      	blx	r4
}
   18464:	46c0      	nop			; (mov r8, r8)
   18466:	46bd      	mov	sp, r7
   18468:	b001      	add	sp, #4
   1846a:	bd90      	pop	{r4, r7, pc}
   1846c:	00017835 	.word	0x00017835
   18470:	00020329 	.word	0x00020329

00018474 <busy>:

bool busy(void)
{
   18474:	b580      	push	{r7, lr}
   18476:	af00      	add	r7, sp, #0
	return (inCall || isRinging  /*|| inInterrupt*/);
   18478:	4b09      	ldr	r3, [pc, #36]	; (184a0 <busy+0x2c>)
   1847a:	781b      	ldrb	r3, [r3, #0]
   1847c:	2b00      	cmp	r3, #0
   1847e:	d104      	bne.n	1848a <busy+0x16>
   18480:	4b08      	ldr	r3, [pc, #32]	; (184a4 <busy+0x30>)
   18482:	781b      	ldrb	r3, [r3, #0]
   18484:	b2db      	uxtb	r3, r3
   18486:	2b00      	cmp	r3, #0
   18488:	d001      	beq.n	1848e <busy+0x1a>
   1848a:	2301      	movs	r3, #1
   1848c:	e000      	b.n	18490 <busy+0x1c>
   1848e:	2300      	movs	r3, #0
   18490:	1c1a      	adds	r2, r3, #0
   18492:	2301      	movs	r3, #1
   18494:	4013      	ands	r3, r2
   18496:	b2db      	uxtb	r3, r3
}
   18498:	0018      	movs	r0, r3
   1849a:	46bd      	mov	sp, r7
   1849c:	bd80      	pop	{r7, pc}
   1849e:	46c0      	nop			; (mov r8, r8)
   184a0:	2000079c 	.word	0x2000079c
   184a4:	2000068e 	.word	0x2000068e

000184a8 <checkNotInCall>:

bool checkNotInCall(void)
{
   184a8:	b580      	push	{r7, lr}
   184aa:	af00      	add	r7, sp, #0
	return ( /*!sendCUSDResponse     &&*/  currentStatus=='N'
   184ac:	4b13      	ldr	r3, [pc, #76]	; (184fc <checkNotInCall+0x54>)
   184ae:	781b      	ldrb	r3, [r3, #0]
   184b0:	b2db      	uxtb	r3, r3
	&&  currentCallStatus=='N'  &&  obtainNewEvent
	&&  !freezeIncomingCalls && !busy());
   184b2:	2b4e      	cmp	r3, #78	; 0x4e
   184b4:	d11a      	bne.n	184ec <checkNotInCall+0x44>
	&&  currentCallStatus=='N'  &&  obtainNewEvent
   184b6:	4b12      	ldr	r3, [pc, #72]	; (18500 <checkNotInCall+0x58>)
   184b8:	781b      	ldrb	r3, [r3, #0]
   184ba:	b2db      	uxtb	r3, r3
   184bc:	2b4e      	cmp	r3, #78	; 0x4e
   184be:	d115      	bne.n	184ec <checkNotInCall+0x44>
   184c0:	4b10      	ldr	r3, [pc, #64]	; (18504 <checkNotInCall+0x5c>)
   184c2:	781b      	ldrb	r3, [r3, #0]
   184c4:	2b00      	cmp	r3, #0
   184c6:	d011      	beq.n	184ec <checkNotInCall+0x44>
	&&  !freezeIncomingCalls && !busy());
   184c8:	4b0f      	ldr	r3, [pc, #60]	; (18508 <checkNotInCall+0x60>)
   184ca:	781b      	ldrb	r3, [r3, #0]
   184cc:	2201      	movs	r2, #1
   184ce:	4053      	eors	r3, r2
   184d0:	b2db      	uxtb	r3, r3
   184d2:	2b00      	cmp	r3, #0
   184d4:	d00a      	beq.n	184ec <checkNotInCall+0x44>
   184d6:	4b0d      	ldr	r3, [pc, #52]	; (1850c <checkNotInCall+0x64>)
   184d8:	4798      	blx	r3
   184da:	0003      	movs	r3, r0
   184dc:	001a      	movs	r2, r3
   184de:	2301      	movs	r3, #1
   184e0:	4053      	eors	r3, r2
   184e2:	b2db      	uxtb	r3, r3
   184e4:	2b00      	cmp	r3, #0
   184e6:	d001      	beq.n	184ec <checkNotInCall+0x44>
   184e8:	2301      	movs	r3, #1
   184ea:	e000      	b.n	184ee <checkNotInCall+0x46>
   184ec:	2300      	movs	r3, #0
   184ee:	1c1a      	adds	r2, r3, #0
   184f0:	2301      	movs	r3, #1
   184f2:	4013      	ands	r3, r2
   184f4:	b2db      	uxtb	r3, r3
}
   184f6:	0018      	movs	r0, r3
   184f8:	46bd      	mov	sp, r7
   184fa:	bd80      	pop	{r7, pc}
   184fc:	200007dc 	.word	0x200007dc
   18500:	2000078f 	.word	0x2000078f
   18504:	20000772 	.word	0x20000772
   18508:	20000744 	.word	0x20000744
   1850c:	00018475 	.word	0x00018475

00018510 <gsm_checkSleepElligible>:

bool gsm_checkSleepElligible(void)
{
   18510:	b580      	push	{r7, lr}
   18512:	af00      	add	r7, sp, #0
	if (factory_settings_parameter_struct.ENABLE_M2M)
   18514:	4b21      	ldr	r3, [pc, #132]	; (1859c <gsm_checkSleepElligible+0x8c>)
   18516:	78db      	ldrb	r3, [r3, #3]
   18518:	2b00      	cmp	r3, #0
   1851a:	d021      	beq.n	18560 <gsm_checkSleepElligible+0x50>
	{
		return(!isGSMModuleAwake  && checkNotInCall() && !m2mEventStaged && !eventStaged);
   1851c:	4b20      	ldr	r3, [pc, #128]	; (185a0 <gsm_checkSleepElligible+0x90>)
   1851e:	781b      	ldrb	r3, [r3, #0]
   18520:	b2db      	uxtb	r3, r3
   18522:	2201      	movs	r2, #1
   18524:	4053      	eors	r3, r2
   18526:	b2db      	uxtb	r3, r3
   18528:	2b00      	cmp	r3, #0
   1852a:	d013      	beq.n	18554 <gsm_checkSleepElligible+0x44>
   1852c:	4b1d      	ldr	r3, [pc, #116]	; (185a4 <gsm_checkSleepElligible+0x94>)
   1852e:	4798      	blx	r3
   18530:	1e03      	subs	r3, r0, #0
   18532:	d00f      	beq.n	18554 <gsm_checkSleepElligible+0x44>
   18534:	4b1c      	ldr	r3, [pc, #112]	; (185a8 <gsm_checkSleepElligible+0x98>)
   18536:	781b      	ldrb	r3, [r3, #0]
   18538:	2201      	movs	r2, #1
   1853a:	4053      	eors	r3, r2
   1853c:	b2db      	uxtb	r3, r3
   1853e:	2b00      	cmp	r3, #0
   18540:	d008      	beq.n	18554 <gsm_checkSleepElligible+0x44>
   18542:	4b1a      	ldr	r3, [pc, #104]	; (185ac <gsm_checkSleepElligible+0x9c>)
   18544:	781b      	ldrb	r3, [r3, #0]
   18546:	2201      	movs	r2, #1
   18548:	4053      	eors	r3, r2
   1854a:	b2db      	uxtb	r3, r3
   1854c:	2b00      	cmp	r3, #0
   1854e:	d001      	beq.n	18554 <gsm_checkSleepElligible+0x44>
   18550:	2301      	movs	r3, #1
   18552:	e000      	b.n	18556 <gsm_checkSleepElligible+0x46>
   18554:	2300      	movs	r3, #0
   18556:	1c1a      	adds	r2, r3, #0
   18558:	2301      	movs	r3, #1
   1855a:	4013      	ands	r3, r2
   1855c:	b2db      	uxtb	r3, r3
   1855e:	e019      	b.n	18594 <gsm_checkSleepElligible+0x84>
	}
	else
	{
		return(!isGSMModuleAwake  && checkNotInCall() && !eventStaged);
   18560:	4b0f      	ldr	r3, [pc, #60]	; (185a0 <gsm_checkSleepElligible+0x90>)
   18562:	781b      	ldrb	r3, [r3, #0]
   18564:	b2db      	uxtb	r3, r3
   18566:	2201      	movs	r2, #1
   18568:	4053      	eors	r3, r2
   1856a:	b2db      	uxtb	r3, r3
   1856c:	2b00      	cmp	r3, #0
   1856e:	d00c      	beq.n	1858a <gsm_checkSleepElligible+0x7a>
   18570:	4b0c      	ldr	r3, [pc, #48]	; (185a4 <gsm_checkSleepElligible+0x94>)
   18572:	4798      	blx	r3
   18574:	1e03      	subs	r3, r0, #0
   18576:	d008      	beq.n	1858a <gsm_checkSleepElligible+0x7a>
   18578:	4b0c      	ldr	r3, [pc, #48]	; (185ac <gsm_checkSleepElligible+0x9c>)
   1857a:	781b      	ldrb	r3, [r3, #0]
   1857c:	2201      	movs	r2, #1
   1857e:	4053      	eors	r3, r2
   18580:	b2db      	uxtb	r3, r3
   18582:	2b00      	cmp	r3, #0
   18584:	d001      	beq.n	1858a <gsm_checkSleepElligible+0x7a>
   18586:	2301      	movs	r3, #1
   18588:	e000      	b.n	1858c <gsm_checkSleepElligible+0x7c>
   1858a:	2300      	movs	r3, #0
   1858c:	1c1a      	adds	r2, r3, #0
   1858e:	2301      	movs	r3, #1
   18590:	4013      	ands	r3, r2
   18592:	b2db      	uxtb	r3, r3
	}
   18594:	0018      	movs	r0, r3
   18596:	46bd      	mov	sp, r7
   18598:	bd80      	pop	{r7, pc}
   1859a:	46c0      	nop			; (mov r8, r8)
   1859c:	2000062c 	.word	0x2000062c
   185a0:	20000684 	.word	0x20000684
   185a4:	000184a9 	.word	0x000184a9
   185a8:	2000078e 	.word	0x2000078e
   185ac:	200007d3 	.word	0x200007d3

000185b0 <lcd_displaying_task>:
static QueueHandle_t xfour_Second_Queue;
static TimerHandle_t four_Second_timeout_timer=NULL;
static void four_second_timer_callback(TimerHandle_t timer);

static void lcd_displaying_task(void *params)
{
   185b0:	b590      	push	{r4, r7, lr}
   185b2:	b093      	sub	sp, #76	; 0x4c
   185b4:	af02      	add	r7, sp, #8
   185b6:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	
	gsmStatusChange=true;
   185b8:	4be6      	ldr	r3, [pc, #920]	; (18954 <lcd_displaying_task+0x3a4>)
   185ba:	2201      	movs	r2, #1
   185bc:	701a      	strb	r2, [r3, #0]
	lcd_in_sleep =false;
   185be:	4be6      	ldr	r3, [pc, #920]	; (18958 <lcd_displaying_task+0x3a8>)
   185c0:	2200      	movs	r2, #0
   185c2:	701a      	strb	r2, [r3, #0]
	setNetworkCharacter=true;
   185c4:	4be5      	ldr	r3, [pc, #916]	; (1895c <lcd_displaying_task+0x3ac>)
   185c6:	2201      	movs	r2, #1
   185c8:	701a      	strb	r2, [r3, #0]
	LCD_PWR_CONFIG();
   185ca:	4be5      	ldr	r3, [pc, #916]	; (18960 <lcd_displaying_task+0x3b0>)
   185cc:	4798      	blx	r3
	LCD_PWR_EN();
   185ce:	4be5      	ldr	r3, [pc, #916]	; (18964 <lcd_displaying_task+0x3b4>)
   185d0:	4798      	blx	r3
	vTaskDelay(500);
   185d2:	23fa      	movs	r3, #250	; 0xfa
   185d4:	005b      	lsls	r3, r3, #1
   185d6:	0018      	movs	r0, r3
   185d8:	4be3      	ldr	r3, [pc, #908]	; (18968 <lcd_displaying_task+0x3b8>)
   185da:	4798      	blx	r3
	
	LCD_init();
   185dc:	4be3      	ldr	r3, [pc, #908]	; (1896c <lcd_displaying_task+0x3bc>)
   185de:	4798      	blx	r3
	
	uint8_t screen=1;
   185e0:	233f      	movs	r3, #63	; 0x3f
   185e2:	18fb      	adds	r3, r7, r3
   185e4:	2201      	movs	r2, #1
   185e6:	701a      	strb	r2, [r3, #0]
	bool four_sec_timer_is_active = true;
   185e8:	233d      	movs	r3, #61	; 0x3d
   185ea:	18fb      	adds	r3, r7, r3
   185ec:	2201      	movs	r2, #1
   185ee:	701a      	strb	r2, [r3, #0]
	bool two_sec_timer_is_active = false;
   185f0:	233c      	movs	r3, #60	; 0x3c
   185f2:	18fb      	adds	r3, r7, r3
   185f4:	2200      	movs	r2, #0
   185f6:	701a      	strb	r2, [r3, #0]
	
	uint8_t time=0;
   185f8:	233a      	movs	r3, #58	; 0x3a
   185fa:	18fb      	adds	r3, r7, r3
   185fc:	2200      	movs	r2, #0
   185fe:	701a      	strb	r2, [r3, #0]
	
	
	
	
	LCD_clear();
   18600:	4bdb      	ldr	r3, [pc, #876]	; (18970 <lcd_displaying_task+0x3c0>)
   18602:	4798      	blx	r3
	LCD_setCursor(0,0);
   18604:	2100      	movs	r1, #0
   18606:	2000      	movs	r0, #0
   18608:	4bda      	ldr	r3, [pc, #872]	; (18974 <lcd_displaying_task+0x3c4>)
   1860a:	4798      	blx	r3
	lcd_printf(" KRISHNA  SMART ");
   1860c:	4bda      	ldr	r3, [pc, #872]	; (18978 <lcd_displaying_task+0x3c8>)
   1860e:	0018      	movs	r0, r3
   18610:	4bda      	ldr	r3, [pc, #872]	; (1897c <lcd_displaying_task+0x3cc>)
   18612:	4798      	blx	r3
	LCD_setCursor(0,1);
   18614:	2101      	movs	r1, #1
   18616:	2000      	movs	r0, #0
   18618:	4bd6      	ldr	r3, [pc, #856]	; (18974 <lcd_displaying_task+0x3c4>)
   1861a:	4798      	blx	r3
	lcd_printf("   TECHNOLOGY   ");
   1861c:	4bd8      	ldr	r3, [pc, #864]	; (18980 <lcd_displaying_task+0x3d0>)
   1861e:	0018      	movs	r0, r3
   18620:	4bd6      	ldr	r3, [pc, #856]	; (1897c <lcd_displaying_task+0x3cc>)
   18622:	4798      	blx	r3
	vTaskDelay(3000);
   18624:	4bd7      	ldr	r3, [pc, #860]	; (18984 <lcd_displaying_task+0x3d4>)
   18626:	0018      	movs	r0, r3
   18628:	4bcf      	ldr	r3, [pc, #828]	; (18968 <lcd_displaying_task+0x3b8>)
   1862a:	4798      	blx	r3
	
	LCD_clear();
   1862c:	4bd0      	ldr	r3, [pc, #832]	; (18970 <lcd_displaying_task+0x3c0>)
   1862e:	4798      	blx	r3
	LCD_setCursor(0,0);
   18630:	2100      	movs	r1, #0
   18632:	2000      	movs	r0, #0
   18634:	4bcf      	ldr	r3, [pc, #828]	; (18974 <lcd_displaying_task+0x3c4>)
   18636:	4798      	blx	r3
	lcd_printf("  SOFTWARE VER  ");
   18638:	4bd3      	ldr	r3, [pc, #844]	; (18988 <lcd_displaying_task+0x3d8>)
   1863a:	0018      	movs	r0, r3
   1863c:	4bcf      	ldr	r3, [pc, #828]	; (1897c <lcd_displaying_task+0x3cc>)
   1863e:	4798      	blx	r3
	LCD_setCursor(0,1);
   18640:	2101      	movs	r1, #1
   18642:	2000      	movs	r0, #0
   18644:	4bcb      	ldr	r3, [pc, #812]	; (18974 <lcd_displaying_task+0x3c4>)
   18646:	4798      	blx	r3
	lcd_printf("%s",VERSION_NO);
   18648:	4ad0      	ldr	r2, [pc, #832]	; (1898c <lcd_displaying_task+0x3dc>)
   1864a:	4bd1      	ldr	r3, [pc, #836]	; (18990 <lcd_displaying_task+0x3e0>)
   1864c:	0011      	movs	r1, r2
   1864e:	0018      	movs	r0, r3
   18650:	4bca      	ldr	r3, [pc, #808]	; (1897c <lcd_displaying_task+0x3cc>)
   18652:	4798      	blx	r3
	vTaskDelay(2000);
   18654:	23fa      	movs	r3, #250	; 0xfa
   18656:	00db      	lsls	r3, r3, #3
   18658:	0018      	movs	r0, r3
   1865a:	4bc3      	ldr	r3, [pc, #780]	; (18968 <lcd_displaying_task+0x3b8>)
   1865c:	4798      	blx	r3
	
	four_Second_timeout_timer = xTimerCreate(NULL,(1 * 4000 / portTICK_PERIOD_MS), pdTRUE, NULL, four_second_timer_callback);
   1865e:	23fa      	movs	r3, #250	; 0xfa
   18660:	0119      	lsls	r1, r3, #4
   18662:	4bcc      	ldr	r3, [pc, #816]	; (18994 <lcd_displaying_task+0x3e4>)
   18664:	9300      	str	r3, [sp, #0]
   18666:	2300      	movs	r3, #0
   18668:	2201      	movs	r2, #1
   1866a:	2000      	movs	r0, #0
   1866c:	4cca      	ldr	r4, [pc, #808]	; (18998 <lcd_displaying_task+0x3e8>)
   1866e:	47a0      	blx	r4
   18670:	0002      	movs	r2, r0
   18672:	4bca      	ldr	r3, [pc, #808]	; (1899c <lcd_displaying_task+0x3ec>)
   18674:	601a      	str	r2, [r3, #0]
	xTimerStart( four_Second_timeout_timer, 0 );
   18676:	4bc9      	ldr	r3, [pc, #804]	; (1899c <lcd_displaying_task+0x3ec>)
   18678:	681c      	ldr	r4, [r3, #0]
   1867a:	4bc9      	ldr	r3, [pc, #804]	; (189a0 <lcd_displaying_task+0x3f0>)
   1867c:	4798      	blx	r3
   1867e:	0002      	movs	r2, r0
   18680:	2300      	movs	r3, #0
   18682:	9300      	str	r3, [sp, #0]
   18684:	2300      	movs	r3, #0
   18686:	2101      	movs	r1, #1
   18688:	0020      	movs	r0, r4
   1868a:	4cc6      	ldr	r4, [pc, #792]	; (189a4 <lcd_displaying_task+0x3f4>)
   1868c:	47a0      	blx	r4
	
	
	for (;;)
	{
		if (lcd_in_sleep)
   1868e:	4bb2      	ldr	r3, [pc, #712]	; (18958 <lcd_displaying_task+0x3a8>)
   18690:	781b      	ldrb	r3, [r3, #0]
   18692:	b2db      	uxtb	r3, r3
   18694:	2b00      	cmp	r3, #0
   18696:	d009      	beq.n	186ac <lcd_displaying_task+0xfc>
		{
			lcd_in_sleep = false;
   18698:	4baf      	ldr	r3, [pc, #700]	; (18958 <lcd_displaying_task+0x3a8>)
   1869a:	2200      	movs	r2, #0
   1869c:	701a      	strb	r2, [r3, #0]
			LCD_PWR_EN();
   1869e:	4bb1      	ldr	r3, [pc, #708]	; (18964 <lcd_displaying_task+0x3b4>)
   186a0:	4798      	blx	r3
			vTaskDelay(100);
   186a2:	2064      	movs	r0, #100	; 0x64
   186a4:	4bb0      	ldr	r3, [pc, #704]	; (18968 <lcd_displaying_task+0x3b8>)
   186a6:	4798      	blx	r3
			LCD_init();
   186a8:	4bb0      	ldr	r3, [pc, #704]	; (1896c <lcd_displaying_task+0x3bc>)
   186aa:	4798      	blx	r3
		}
		
		if(setNetworkCharacter)
   186ac:	4bab      	ldr	r3, [pc, #684]	; (1895c <lcd_displaying_task+0x3ac>)
   186ae:	781b      	ldrb	r3, [r3, #0]
   186b0:	b2db      	uxtb	r3, r3
   186b2:	2b00      	cmp	r3, #0
   186b4:	d047      	beq.n	18746 <lcd_displaying_task+0x196>
		{
			setNetworkCharacter=false;
   186b6:	4ba9      	ldr	r3, [pc, #676]	; (1895c <lcd_displaying_task+0x3ac>)
   186b8:	2200      	movs	r2, #0
   186ba:	701a      	strb	r2, [r3, #0]
			byte Network_0[8]={
   186bc:	2330      	movs	r3, #48	; 0x30
   186be:	18fb      	adds	r3, r7, r3
   186c0:	0018      	movs	r0, r3
   186c2:	2308      	movs	r3, #8
   186c4:	001a      	movs	r2, r3
   186c6:	2100      	movs	r1, #0
   186c8:	4bb7      	ldr	r3, [pc, #732]	; (189a8 <lcd_displaying_task+0x3f8>)
   186ca:	4798      	blx	r3
				0B00000,
				0B00000,
				0B00000
			};
			
			byte Network_1[8]={
   186cc:	2328      	movs	r3, #40	; 0x28
   186ce:	18fb      	adds	r3, r7, r3
   186d0:	4ab6      	ldr	r2, [pc, #728]	; (189ac <lcd_displaying_task+0x3fc>)
   186d2:	ca03      	ldmia	r2!, {r0, r1}
   186d4:	c303      	stmia	r3!, {r0, r1}
				0B00000,
				0B00000,
				0B11111,
				0B11111
			};
			byte Network_2[8]={
   186d6:	2320      	movs	r3, #32
   186d8:	18fb      	adds	r3, r7, r3
   186da:	4ab5      	ldr	r2, [pc, #724]	; (189b0 <lcd_displaying_task+0x400>)
   186dc:	ca03      	ldmia	r2!, {r0, r1}
   186de:	c303      	stmia	r3!, {r0, r1}
				0B00000,
				0B11111,
				0B11111,
				0B11111
			};
			byte Network_3[8]={
   186e0:	2318      	movs	r3, #24
   186e2:	18fb      	adds	r3, r7, r3
   186e4:	4ab3      	ldr	r2, [pc, #716]	; (189b4 <lcd_displaying_task+0x404>)
   186e6:	ca03      	ldmia	r2!, {r0, r1}
   186e8:	c303      	stmia	r3!, {r0, r1}
				0B11111,
				0B11111,
				0B11111,
				0B11111
			};
			byte Network_4[8]={
   186ea:	2310      	movs	r3, #16
   186ec:	18fb      	adds	r3, r7, r3
   186ee:	4ab2      	ldr	r2, [pc, #712]	; (189b8 <lcd_displaying_task+0x408>)
   186f0:	ca03      	ldmia	r2!, {r0, r1}
   186f2:	c303      	stmia	r3!, {r0, r1}
				0B11111,
				0B11111,
				0B11111
			};

			byte Network_5[8]={
   186f4:	2308      	movs	r3, #8
   186f6:	18fb      	adds	r3, r7, r3
   186f8:	4ab0      	ldr	r2, [pc, #704]	; (189bc <lcd_displaying_task+0x40c>)
   186fa:	ca03      	ldmia	r2!, {r0, r1}
   186fc:	c303      	stmia	r3!, {r0, r1}
				0B11111,
				0B11111,
				0B11111
			};
			
			LCD_Create_Custom_createChar(0,Network_0);
   186fe:	2330      	movs	r3, #48	; 0x30
   18700:	18fb      	adds	r3, r7, r3
   18702:	0019      	movs	r1, r3
   18704:	2000      	movs	r0, #0
   18706:	4bae      	ldr	r3, [pc, #696]	; (189c0 <lcd_displaying_task+0x410>)
   18708:	4798      	blx	r3
			LCD_Create_Custom_createChar(1,Network_1);
   1870a:	2328      	movs	r3, #40	; 0x28
   1870c:	18fb      	adds	r3, r7, r3
   1870e:	0019      	movs	r1, r3
   18710:	2001      	movs	r0, #1
   18712:	4bab      	ldr	r3, [pc, #684]	; (189c0 <lcd_displaying_task+0x410>)
   18714:	4798      	blx	r3
			LCD_Create_Custom_createChar(2,Network_2);
   18716:	2320      	movs	r3, #32
   18718:	18fb      	adds	r3, r7, r3
   1871a:	0019      	movs	r1, r3
   1871c:	2002      	movs	r0, #2
   1871e:	4ba8      	ldr	r3, [pc, #672]	; (189c0 <lcd_displaying_task+0x410>)
   18720:	4798      	blx	r3
			LCD_Create_Custom_createChar(3,Network_3);
   18722:	2318      	movs	r3, #24
   18724:	18fb      	adds	r3, r7, r3
   18726:	0019      	movs	r1, r3
   18728:	2003      	movs	r0, #3
   1872a:	4ba5      	ldr	r3, [pc, #660]	; (189c0 <lcd_displaying_task+0x410>)
   1872c:	4798      	blx	r3
			LCD_Create_Custom_createChar(4,Network_4);
   1872e:	2310      	movs	r3, #16
   18730:	18fb      	adds	r3, r7, r3
   18732:	0019      	movs	r1, r3
   18734:	2004      	movs	r0, #4
   18736:	4ba2      	ldr	r3, [pc, #648]	; (189c0 <lcd_displaying_task+0x410>)
   18738:	4798      	blx	r3
			LCD_Create_Custom_createChar(5,Network_5);
   1873a:	2308      	movs	r3, #8
   1873c:	18fb      	adds	r3, r7, r3
   1873e:	0019      	movs	r1, r3
   18740:	2005      	movs	r0, #5
   18742:	4b9f      	ldr	r3, [pc, #636]	; (189c0 <lcd_displaying_task+0x410>)
   18744:	4798      	blx	r3
		}
		
		
		if(firstEvent)
   18746:	4b9f      	ldr	r3, [pc, #636]	; (189c4 <lcd_displaying_task+0x414>)
   18748:	781b      	ldrb	r3, [r3, #0]
   1874a:	b2db      	uxtb	r3, r3
   1874c:	2b00      	cmp	r3, #0
   1874e:	d014      	beq.n	1877a <lcd_displaying_task+0x1ca>
		{
			LCD_setCursor(0,0);
   18750:	2100      	movs	r1, #0
   18752:	2000      	movs	r0, #0
   18754:	4b87      	ldr	r3, [pc, #540]	; (18974 <lcd_displaying_task+0x3c4>)
   18756:	4798      	blx	r3
			lcd_printf("Initializing... ");
   18758:	4b9b      	ldr	r3, [pc, #620]	; (189c8 <lcd_displaying_task+0x418>)
   1875a:	0018      	movs	r0, r3
   1875c:	4b87      	ldr	r3, [pc, #540]	; (1897c <lcd_displaying_task+0x3cc>)
   1875e:	4798      	blx	r3
			LCD_setCursor(0,1);
   18760:	2101      	movs	r1, #1
   18762:	2000      	movs	r0, #0
   18764:	4b83      	ldr	r3, [pc, #524]	; (18974 <lcd_displaying_task+0x3c4>)
   18766:	4798      	blx	r3
			lcd_printf("COMMANDER v2    ");
   18768:	4b98      	ldr	r3, [pc, #608]	; (189cc <lcd_displaying_task+0x41c>)
   1876a:	0018      	movs	r0, r3
   1876c:	4b83      	ldr	r3, [pc, #524]	; (1897c <lcd_displaying_task+0x3cc>)
   1876e:	4798      	blx	r3
			screen=1;
   18770:	233f      	movs	r3, #63	; 0x3f
   18772:	18fb      	adds	r3, r7, r3
   18774:	2201      	movs	r2, #1
   18776:	701a      	strb	r2, [r3, #0]
   18778:	e279      	b.n	18c6e <lcd_displaying_task+0x6be>
		}
		else
		{
			if(gsmStatusChange)
   1877a:	4b76      	ldr	r3, [pc, #472]	; (18954 <lcd_displaying_task+0x3a4>)
   1877c:	781b      	ldrb	r3, [r3, #0]
   1877e:	b2db      	uxtb	r3, r3
   18780:	2b00      	cmp	r3, #0
   18782:	d025      	beq.n	187d0 <lcd_displaying_task+0x220>
			{
				LCD_setCursor(0,0);
   18784:	2100      	movs	r1, #0
   18786:	2000      	movs	r0, #0
   18788:	4b7a      	ldr	r3, [pc, #488]	; (18974 <lcd_displaying_task+0x3c4>)
   1878a:	4798      	blx	r3
				lcd_printf("PHONE STATUS    ");
   1878c:	4b90      	ldr	r3, [pc, #576]	; (189d0 <lcd_displaying_task+0x420>)
   1878e:	0018      	movs	r0, r3
   18790:	4b7a      	ldr	r3, [pc, #488]	; (1897c <lcd_displaying_task+0x3cc>)
   18792:	4798      	blx	r3
				if(boolGsm_config_flag)
   18794:	4b8f      	ldr	r3, [pc, #572]	; (189d4 <lcd_displaying_task+0x424>)
   18796:	781b      	ldrb	r3, [r3, #0]
   18798:	b2db      	uxtb	r3, r3
   1879a:	2b00      	cmp	r3, #0
   1879c:	d008      	beq.n	187b0 <lcd_displaying_task+0x200>
				{
					LCD_setCursor(0,1);
   1879e:	2101      	movs	r1, #1
   187a0:	2000      	movs	r0, #0
   187a2:	4b74      	ldr	r3, [pc, #464]	; (18974 <lcd_displaying_task+0x3c4>)
   187a4:	4798      	blx	r3
					lcd_printf("ON              ");
   187a6:	4b8c      	ldr	r3, [pc, #560]	; (189d8 <lcd_displaying_task+0x428>)
   187a8:	0018      	movs	r0, r3
   187aa:	4b74      	ldr	r3, [pc, #464]	; (1897c <lcd_displaying_task+0x3cc>)
   187ac:	4798      	blx	r3
   187ae:	e007      	b.n	187c0 <lcd_displaying_task+0x210>
				}	
				else
				{
					LCD_setCursor(0,1);
   187b0:	2101      	movs	r1, #1
   187b2:	2000      	movs	r0, #0
   187b4:	4b6f      	ldr	r3, [pc, #444]	; (18974 <lcd_displaying_task+0x3c4>)
   187b6:	4798      	blx	r3
					lcd_printf("OFF             ");
   187b8:	4b88      	ldr	r3, [pc, #544]	; (189dc <lcd_displaying_task+0x42c>)
   187ba:	0018      	movs	r0, r3
   187bc:	4b6f      	ldr	r3, [pc, #444]	; (1897c <lcd_displaying_task+0x3cc>)
   187be:	4798      	blx	r3
				}
				gsmStatusChange = false;
   187c0:	4b64      	ldr	r3, [pc, #400]	; (18954 <lcd_displaying_task+0x3a4>)
   187c2:	2200      	movs	r2, #0
   187c4:	701a      	strb	r2, [r3, #0]
				vTaskDelay(2000/portTICK_PERIOD_MS);
   187c6:	23fa      	movs	r3, #250	; 0xfa
   187c8:	00db      	lsls	r3, r3, #3
   187ca:	0018      	movs	r0, r3
   187cc:	4b66      	ldr	r3, [pc, #408]	; (18968 <lcd_displaying_task+0x3b8>)
   187ce:	4798      	blx	r3
			}
			
			switch(screen)
   187d0:	233f      	movs	r3, #63	; 0x3f
   187d2:	18fb      	adds	r3, r7, r3
   187d4:	781b      	ldrb	r3, [r3, #0]
   187d6:	2b09      	cmp	r3, #9
   187d8:	d900      	bls.n	187dc <lcd_displaying_task+0x22c>
   187da:	e248      	b.n	18c6e <lcd_displaying_task+0x6be>
   187dc:	009a      	lsls	r2, r3, #2
   187de:	4b80      	ldr	r3, [pc, #512]	; (189e0 <lcd_displaying_task+0x430>)
   187e0:	18d3      	adds	r3, r2, r3
   187e2:	681b      	ldr	r3, [r3, #0]
   187e4:	469f      	mov	pc, r3
			{
				case  1:
				{
					LCD_setCursor(0,0);
   187e6:	2100      	movs	r1, #0
   187e8:	2000      	movs	r0, #0
   187ea:	4b62      	ldr	r3, [pc, #392]	; (18974 <lcd_displaying_task+0x3c4>)
   187ec:	4798      	blx	r3
					lcd_printf("VRY   VYB   VBR ");
   187ee:	4b7d      	ldr	r3, [pc, #500]	; (189e4 <lcd_displaying_task+0x434>)
   187f0:	0018      	movs	r0, r3
   187f2:	4b62      	ldr	r3, [pc, #392]	; (1897c <lcd_displaying_task+0x3cc>)
   187f4:	4798      	blx	r3
					LCD_setCursor(0,1);
   187f6:	2101      	movs	r1, #1
   187f8:	2000      	movs	r0, #0
   187fa:	4b5e      	ldr	r3, [pc, #376]	; (18974 <lcd_displaying_task+0x3c4>)
   187fc:	4798      	blx	r3
					lcd_printf("%03lu   ",(Analog_Parameter_Struct.PhaseRY_Voltage));
   187fe:	4b7a      	ldr	r3, [pc, #488]	; (189e8 <lcd_displaying_task+0x438>)
   18800:	681a      	ldr	r2, [r3, #0]
   18802:	4b7a      	ldr	r3, [pc, #488]	; (189ec <lcd_displaying_task+0x43c>)
   18804:	0011      	movs	r1, r2
   18806:	0018      	movs	r0, r3
   18808:	4b5c      	ldr	r3, [pc, #368]	; (1897c <lcd_displaying_task+0x3cc>)
   1880a:	4798      	blx	r3
					lcd_printf("%03lu   ",(Analog_Parameter_Struct.PhaseYB_Voltage));
   1880c:	4b76      	ldr	r3, [pc, #472]	; (189e8 <lcd_displaying_task+0x438>)
   1880e:	685a      	ldr	r2, [r3, #4]
   18810:	4b76      	ldr	r3, [pc, #472]	; (189ec <lcd_displaying_task+0x43c>)
   18812:	0011      	movs	r1, r2
   18814:	0018      	movs	r0, r3
   18816:	4b59      	ldr	r3, [pc, #356]	; (1897c <lcd_displaying_task+0x3cc>)
   18818:	4798      	blx	r3
					lcd_printf("%03lu ",(Analog_Parameter_Struct.PhaseBR_Voltage));
   1881a:	4b73      	ldr	r3, [pc, #460]	; (189e8 <lcd_displaying_task+0x438>)
   1881c:	689a      	ldr	r2, [r3, #8]
   1881e:	4b74      	ldr	r3, [pc, #464]	; (189f0 <lcd_displaying_task+0x440>)
   18820:	0011      	movs	r1, r2
   18822:	0018      	movs	r0, r3
   18824:	4b55      	ldr	r3, [pc, #340]	; (1897c <lcd_displaying_task+0x3cc>)
   18826:	4798      	blx	r3
					break;
   18828:	e221      	b.n	18c6e <lcd_displaying_task+0x6be>
				}
				case  2:
				{
					LCD_setCursor(0,0);
   1882a:	2100      	movs	r1, #0
   1882c:	2000      	movs	r0, #0
   1882e:	4b51      	ldr	r3, [pc, #324]	; (18974 <lcd_displaying_task+0x3c4>)
   18830:	4798      	blx	r3
					if(!getMotorState())
   18832:	4b70      	ldr	r3, [pc, #448]	; (189f4 <lcd_displaying_task+0x444>)
   18834:	4798      	blx	r3
   18836:	0003      	movs	r3, r0
   18838:	001a      	movs	r2, r3
   1883a:	2301      	movs	r3, #1
   1883c:	4053      	eors	r3, r2
   1883e:	b2db      	uxtb	r3, r3
   18840:	2b00      	cmp	r3, #0
   18842:	d004      	beq.n	1884e <lcd_displaying_task+0x29e>
					{
						lcd_printf("MOTOR :  OFF    ");
   18844:	4b6c      	ldr	r3, [pc, #432]	; (189f8 <lcd_displaying_task+0x448>)
   18846:	0018      	movs	r0, r3
   18848:	4b4c      	ldr	r3, [pc, #304]	; (1897c <lcd_displaying_task+0x3cc>)
   1884a:	4798      	blx	r3
   1884c:	e003      	b.n	18856 <lcd_displaying_task+0x2a6>
					}
					else
					{
						lcd_printf("MOTOR :  ON     ");
   1884e:	4b6b      	ldr	r3, [pc, #428]	; (189fc <lcd_displaying_task+0x44c>)
   18850:	0018      	movs	r0, r3
   18852:	4b4a      	ldr	r3, [pc, #296]	; (1897c <lcd_displaying_task+0x3cc>)
   18854:	4798      	blx	r3
					}
					
					LCD_setCursor(0,1);
   18856:	2101      	movs	r1, #1
   18858:	2000      	movs	r0, #0
   1885a:	4b46      	ldr	r3, [pc, #280]	; (18974 <lcd_displaying_task+0x3c4>)
   1885c:	4798      	blx	r3
					if(user_settings_parameter_struct.autoStartAddress)
   1885e:	4b68      	ldr	r3, [pc, #416]	; (18a00 <lcd_displaying_task+0x450>)
   18860:	785b      	ldrb	r3, [r3, #1]
   18862:	2b00      	cmp	r3, #0
   18864:	d004      	beq.n	18870 <lcd_displaying_task+0x2c0>
					{
						lcd_printf("AUTO  :  ON     ");
   18866:	4b67      	ldr	r3, [pc, #412]	; (18a04 <lcd_displaying_task+0x454>)
   18868:	0018      	movs	r0, r3
   1886a:	4b44      	ldr	r3, [pc, #272]	; (1897c <lcd_displaying_task+0x3cc>)
   1886c:	4798      	blx	r3
					//LCD_setCursor(0,0);
					//lcd_printf("MOTOR WATTAGE:  ");
					//LCD_setCursor(0,1);
					//lcd_printf("%03lu.%02lu kW         ",(Analog_Parameter_Struct.Motor_Power_IntPart),(Analog_Parameter_Struct.Motor_Power_DecPart));
					//}
					break;
   1886e:	e1fe      	b.n	18c6e <lcd_displaying_task+0x6be>
						lcd_printf("AUTO  :  OFF    ");
   18870:	4b65      	ldr	r3, [pc, #404]	; (18a08 <lcd_displaying_task+0x458>)
   18872:	0018      	movs	r0, r3
   18874:	4b41      	ldr	r3, [pc, #260]	; (1897c <lcd_displaying_task+0x3cc>)
   18876:	4798      	blx	r3
					break;
   18878:	e1f9      	b.n	18c6e <lcd_displaying_task+0x6be>
				}
				case  3:
				{
					LCD_setCursor(0,0);
   1887a:	2100      	movs	r1, #0
   1887c:	2000      	movs	r0, #0
   1887e:	4b3d      	ldr	r3, [pc, #244]	; (18974 <lcd_displaying_task+0x3c4>)
   18880:	4798      	blx	r3
					lcd_printf("MOTOR CURRENT:  ");
   18882:	4b62      	ldr	r3, [pc, #392]	; (18a0c <lcd_displaying_task+0x45c>)
   18884:	0018      	movs	r0, r3
   18886:	4b3d      	ldr	r3, [pc, #244]	; (1897c <lcd_displaying_task+0x3cc>)
   18888:	4798      	blx	r3
					LCD_setCursor(0,1);
   1888a:	2101      	movs	r1, #1
   1888c:	2000      	movs	r0, #0
   1888e:	4b39      	ldr	r3, [pc, #228]	; (18974 <lcd_displaying_task+0x3c4>)
   18890:	4798      	blx	r3
					lcd_printf("%03lu.%02lu            ",(Analog_Parameter_Struct.Motor_Current_IntPart),(Analog_Parameter_Struct.Motor_Current_DecPart));
   18892:	4b55      	ldr	r3, [pc, #340]	; (189e8 <lcd_displaying_task+0x438>)
   18894:	8a9b      	ldrh	r3, [r3, #20]
   18896:	b29b      	uxth	r3, r3
   18898:	0019      	movs	r1, r3
   1889a:	4b53      	ldr	r3, [pc, #332]	; (189e8 <lcd_displaying_task+0x438>)
   1889c:	8adb      	ldrh	r3, [r3, #22]
   1889e:	b29b      	uxth	r3, r3
   188a0:	001a      	movs	r2, r3
   188a2:	4b5b      	ldr	r3, [pc, #364]	; (18a10 <lcd_displaying_task+0x460>)
   188a4:	0018      	movs	r0, r3
   188a6:	4b35      	ldr	r3, [pc, #212]	; (1897c <lcd_displaying_task+0x3cc>)
   188a8:	4798      	blx	r3
					break;
   188aa:	e1e0      	b.n	18c6e <lcd_displaying_task+0x6be>
				}
				case 4:
				{
					LCD_setCursor(0,0);
   188ac:	2100      	movs	r1, #0
   188ae:	2000      	movs	r0, #0
   188b0:	4b30      	ldr	r3, [pc, #192]	; (18974 <lcd_displaying_task+0x3c4>)
   188b2:	4798      	blx	r3
					lcd_printf("3 PHASE SEQ:");
   188b4:	4b57      	ldr	r3, [pc, #348]	; (18a14 <lcd_displaying_task+0x464>)
   188b6:	0018      	movs	r0, r3
   188b8:	4b30      	ldr	r3, [pc, #192]	; (1897c <lcd_displaying_task+0x3cc>)
   188ba:	4798      	blx	r3
					if (structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
   188bc:	4b56      	ldr	r3, [pc, #344]	; (18a18 <lcd_displaying_task+0x468>)
   188be:	781b      	ldrb	r3, [r3, #0]
   188c0:	b2db      	uxtb	r3, r3
   188c2:	2b02      	cmp	r3, #2
   188c4:	d104      	bne.n	188d0 <lcd_displaying_task+0x320>
					{
						lcd_printf(" OK ");
   188c6:	4b55      	ldr	r3, [pc, #340]	; (18a1c <lcd_displaying_task+0x46c>)
   188c8:	0018      	movs	r0, r3
   188ca:	4b2c      	ldr	r3, [pc, #176]	; (1897c <lcd_displaying_task+0x3cc>)
   188cc:	4798      	blx	r3
   188ce:	e003      	b.n	188d8 <lcd_displaying_task+0x328>
					}
					else
					{
						lcd_printf(" ERR");
   188d0:	4b53      	ldr	r3, [pc, #332]	; (18a20 <lcd_displaying_task+0x470>)
   188d2:	0018      	movs	r0, r3
   188d4:	4b29      	ldr	r3, [pc, #164]	; (1897c <lcd_displaying_task+0x3cc>)
   188d6:	4798      	blx	r3
					}
					LCD_setCursor(0,1);
   188d8:	2101      	movs	r1, #1
   188da:	2000      	movs	r0, #0
   188dc:	4b25      	ldr	r3, [pc, #148]	; (18974 <lcd_displaying_task+0x3c4>)
   188de:	4798      	blx	r3
					lcd_printf("PHASE STATE:");
   188e0:	4b50      	ldr	r3, [pc, #320]	; (18a24 <lcd_displaying_task+0x474>)
   188e2:	0018      	movs	r0, r3
   188e4:	4b25      	ldr	r3, [pc, #148]	; (1897c <lcd_displaying_task+0x3cc>)
   188e6:	4798      	blx	r3
					if (structThreePhase_state.u8t_phase_ac_state == AC_3PH)
   188e8:	4b4b      	ldr	r3, [pc, #300]	; (18a18 <lcd_displaying_task+0x468>)
   188ea:	785b      	ldrb	r3, [r3, #1]
   188ec:	b2db      	uxtb	r3, r3
   188ee:	2b03      	cmp	r3, #3
   188f0:	d104      	bne.n	188fc <lcd_displaying_task+0x34c>
					{
						lcd_printf(" 3PH ");
   188f2:	4b4d      	ldr	r3, [pc, #308]	; (18a28 <lcd_displaying_task+0x478>)
   188f4:	0018      	movs	r0, r3
   188f6:	4b21      	ldr	r3, [pc, #132]	; (1897c <lcd_displaying_task+0x3cc>)
   188f8:	4798      	blx	r3
					}
					else
					{
						lcd_printf(" OFF");
					}
					break;
   188fa:	e1b8      	b.n	18c6e <lcd_displaying_task+0x6be>
					else if(structThreePhase_state.u8t_phase_ac_state == AC_2PH)
   188fc:	4b46      	ldr	r3, [pc, #280]	; (18a18 <lcd_displaying_task+0x468>)
   188fe:	785b      	ldrb	r3, [r3, #1]
   18900:	b2db      	uxtb	r3, r3
   18902:	2b02      	cmp	r3, #2
   18904:	d104      	bne.n	18910 <lcd_displaying_task+0x360>
						lcd_printf(" 2PH ");
   18906:	4b49      	ldr	r3, [pc, #292]	; (18a2c <lcd_displaying_task+0x47c>)
   18908:	0018      	movs	r0, r3
   1890a:	4b1c      	ldr	r3, [pc, #112]	; (1897c <lcd_displaying_task+0x3cc>)
   1890c:	4798      	blx	r3
					break;
   1890e:	e1ae      	b.n	18c6e <lcd_displaying_task+0x6be>
						lcd_printf(" OFF");
   18910:	4b47      	ldr	r3, [pc, #284]	; (18a30 <lcd_displaying_task+0x480>)
   18912:	0018      	movs	r0, r3
   18914:	4b19      	ldr	r3, [pc, #100]	; (1897c <lcd_displaying_task+0x3cc>)
   18916:	4798      	blx	r3
					break;
   18918:	e1a9      	b.n	18c6e <lcd_displaying_task+0x6be>
				}
				case 5:
				{
					LCD_setCursor(0,0);
   1891a:	2100      	movs	r1, #0
   1891c:	2000      	movs	r0, #0
   1891e:	4b15      	ldr	r3, [pc, #84]	; (18974 <lcd_displaying_task+0x3c4>)
   18920:	4798      	blx	r3
					lcd_printf("O-LEVEL : ");
   18922:	4b44      	ldr	r3, [pc, #272]	; (18a34 <lcd_displaying_task+0x484>)
   18924:	0018      	movs	r0, r3
   18926:	4b15      	ldr	r3, [pc, #84]	; (1897c <lcd_displaying_task+0x3cc>)
   18928:	4798      	blx	r3
					if (overheadLevel == OVERHEADHIGHLEVEL)
   1892a:	4b43      	ldr	r3, [pc, #268]	; (18a38 <lcd_displaying_task+0x488>)
   1892c:	781b      	ldrb	r3, [r3, #0]
   1892e:	b2db      	uxtb	r3, r3
   18930:	2b02      	cmp	r3, #2
   18932:	d104      	bne.n	1893e <lcd_displaying_task+0x38e>
					{
						lcd_printf("HIGH  ");
   18934:	4b41      	ldr	r3, [pc, #260]	; (18a3c <lcd_displaying_task+0x48c>)
   18936:	0018      	movs	r0, r3
   18938:	4b10      	ldr	r3, [pc, #64]	; (1897c <lcd_displaying_task+0x3cc>)
   1893a:	4798      	blx	r3
   1893c:	e08b      	b.n	18a56 <lcd_displaying_task+0x4a6>
					}
					else if (overheadLevel == OVERHEADMIDLEVEL)
   1893e:	4b3e      	ldr	r3, [pc, #248]	; (18a38 <lcd_displaying_task+0x488>)
   18940:	781b      	ldrb	r3, [r3, #0]
   18942:	b2db      	uxtb	r3, r3
   18944:	2b01      	cmp	r3, #1
   18946:	d000      	beq.n	1894a <lcd_displaying_task+0x39a>
   18948:	e07c      	b.n	18a44 <lcd_displaying_task+0x494>
					{
						lcd_printf("MID   ");
   1894a:	4b3d      	ldr	r3, [pc, #244]	; (18a40 <lcd_displaying_task+0x490>)
   1894c:	0018      	movs	r0, r3
   1894e:	4b0b      	ldr	r3, [pc, #44]	; (1897c <lcd_displaying_task+0x3cc>)
   18950:	4798      	blx	r3
   18952:	e080      	b.n	18a56 <lcd_displaying_task+0x4a6>
   18954:	200006de 	.word	0x200006de
   18958:	20000864 	.word	0x20000864
   1895c:	20000865 	.word	0x20000865
   18960:	00013c95 	.word	0x00013c95
   18964:	00013cc9 	.word	0x00013cc9
   18968:	00020669 	.word	0x00020669
   1896c:	000139d1 	.word	0x000139d1
   18970:	00013f61 	.word	0x00013f61
   18974:	00014031 	.word	0x00014031
   18978:	0002b1d0 	.word	0x0002b1d0
   1897c:	0001412d 	.word	0x0001412d
   18980:	0002b1e4 	.word	0x0002b1e4
   18984:	00000bb8 	.word	0x00000bb8
   18988:	0002b1f8 	.word	0x0002b1f8
   1898c:	0002b20c 	.word	0x0002b20c
   18990:	0002b220 	.word	0x0002b220
   18994:	00018e55 	.word	0x00018e55
   18998:	00021589 	.word	0x00021589
   1899c:	2000022c 	.word	0x2000022c
   189a0:	000209cd 	.word	0x000209cd
   189a4:	0002162d 	.word	0x0002162d
   189a8:	000298b7 	.word	0x000298b7
   189ac:	0002b47c 	.word	0x0002b47c
   189b0:	0002b484 	.word	0x0002b484
   189b4:	0002b48c 	.word	0x0002b48c
   189b8:	0002b494 	.word	0x0002b494
   189bc:	0002b49c 	.word	0x0002b49c
   189c0:	00013fd1 	.word	0x00013fd1
   189c4:	20000776 	.word	0x20000776
   189c8:	0002b224 	.word	0x0002b224
   189cc:	0002b238 	.word	0x0002b238
   189d0:	0002b24c 	.word	0x0002b24c
   189d4:	200007c4 	.word	0x200007c4
   189d8:	0002b260 	.word	0x0002b260
   189dc:	0002b274 	.word	0x0002b274
   189e0:	0002b4a4 	.word	0x0002b4a4
   189e4:	0002b288 	.word	0x0002b288
   189e8:	200006e8 	.word	0x200006e8
   189ec:	0002b29c 	.word	0x0002b29c
   189f0:	0002b2a8 	.word	0x0002b2a8
   189f4:	0001b311 	.word	0x0001b311
   189f8:	0002b2b0 	.word	0x0002b2b0
   189fc:	0002b2c4 	.word	0x0002b2c4
   18a00:	20000654 	.word	0x20000654
   18a04:	0002b2d8 	.word	0x0002b2d8
   18a08:	0002b2ec 	.word	0x0002b2ec
   18a0c:	0002b300 	.word	0x0002b300
   18a10:	0002b314 	.word	0x0002b314
   18a14:	0002b32c 	.word	0x0002b32c
   18a18:	20000748 	.word	0x20000748
   18a1c:	0002b33c 	.word	0x0002b33c
   18a20:	0002b344 	.word	0x0002b344
   18a24:	0002b34c 	.word	0x0002b34c
   18a28:	0002b35c 	.word	0x0002b35c
   18a2c:	0002b364 	.word	0x0002b364
   18a30:	0002b36c 	.word	0x0002b36c
   18a34:	0002b374 	.word	0x0002b374
   18a38:	20000790 	.word	0x20000790
   18a3c:	0002b380 	.word	0x0002b380
   18a40:	0002b388 	.word	0x0002b388
					}
					else if (overheadLevel == OVERHEADCRITICALLEVEL)
   18a44:	4bc8      	ldr	r3, [pc, #800]	; (18d68 <lcd_displaying_task+0x7b8>)
   18a46:	781b      	ldrb	r3, [r3, #0]
   18a48:	b2db      	uxtb	r3, r3
   18a4a:	2b00      	cmp	r3, #0
   18a4c:	d103      	bne.n	18a56 <lcd_displaying_task+0x4a6>
					{
						lcd_printf("LOW   ");
   18a4e:	4bc7      	ldr	r3, [pc, #796]	; (18d6c <lcd_displaying_task+0x7bc>)
   18a50:	0018      	movs	r0, r3
   18a52:	4bc7      	ldr	r3, [pc, #796]	; (18d70 <lcd_displaying_task+0x7c0>)
   18a54:	4798      	blx	r3
					}
					LCD_setCursor(0,1);
   18a56:	2101      	movs	r1, #1
   18a58:	2000      	movs	r0, #0
   18a5a:	4bc6      	ldr	r3, [pc, #792]	; (18d74 <lcd_displaying_task+0x7c4>)
   18a5c:	4798      	blx	r3
					lcd_printf("U-LEVEL : ");
   18a5e:	4bc6      	ldr	r3, [pc, #792]	; (18d78 <lcd_displaying_task+0x7c8>)
   18a60:	0018      	movs	r0, r3
   18a62:	4bc3      	ldr	r3, [pc, #780]	; (18d70 <lcd_displaying_task+0x7c0>)
   18a64:	4798      	blx	r3
					if (undergroundLevel == CRITICALLEVEL)
   18a66:	4bc5      	ldr	r3, [pc, #788]	; (18d7c <lcd_displaying_task+0x7cc>)
   18a68:	781b      	ldrb	r3, [r3, #0]
   18a6a:	2b00      	cmp	r3, #0
   18a6c:	d104      	bne.n	18a78 <lcd_displaying_task+0x4c8>
					{
						lcd_printf("CRTCL ");
   18a6e:	4bc4      	ldr	r3, [pc, #784]	; (18d80 <lcd_displaying_task+0x7d0>)
   18a70:	0018      	movs	r0, r3
   18a72:	4bbf      	ldr	r3, [pc, #764]	; (18d70 <lcd_displaying_task+0x7c0>)
   18a74:	4798      	blx	r3
					}
					else if (undergroundLevel == HIGHLEVEL)
					{
						lcd_printf("HIGH  ");
					}
					break;
   18a76:	e0f7      	b.n	18c68 <lcd_displaying_task+0x6b8>
					else if (undergroundLevel == LOWLEVEL)
   18a78:	4bc0      	ldr	r3, [pc, #768]	; (18d7c <lcd_displaying_task+0x7cc>)
   18a7a:	781b      	ldrb	r3, [r3, #0]
   18a7c:	2b01      	cmp	r3, #1
   18a7e:	d104      	bne.n	18a8a <lcd_displaying_task+0x4da>
						lcd_printf("LOW   ");
   18a80:	4bba      	ldr	r3, [pc, #744]	; (18d6c <lcd_displaying_task+0x7bc>)
   18a82:	0018      	movs	r0, r3
   18a84:	4bba      	ldr	r3, [pc, #744]	; (18d70 <lcd_displaying_task+0x7c0>)
   18a86:	4798      	blx	r3
					break;
   18a88:	e0ee      	b.n	18c68 <lcd_displaying_task+0x6b8>
					else if (undergroundLevel == MIDLEVEL)
   18a8a:	4bbc      	ldr	r3, [pc, #752]	; (18d7c <lcd_displaying_task+0x7cc>)
   18a8c:	781b      	ldrb	r3, [r3, #0]
   18a8e:	2b02      	cmp	r3, #2
   18a90:	d104      	bne.n	18a9c <lcd_displaying_task+0x4ec>
						lcd_printf("MID   ");
   18a92:	4bbc      	ldr	r3, [pc, #752]	; (18d84 <lcd_displaying_task+0x7d4>)
   18a94:	0018      	movs	r0, r3
   18a96:	4bb6      	ldr	r3, [pc, #728]	; (18d70 <lcd_displaying_task+0x7c0>)
   18a98:	4798      	blx	r3
					break;
   18a9a:	e0e5      	b.n	18c68 <lcd_displaying_task+0x6b8>
					else if (undergroundLevel == HIGHLEVEL)
   18a9c:	4bb7      	ldr	r3, [pc, #732]	; (18d7c <lcd_displaying_task+0x7cc>)
   18a9e:	781b      	ldrb	r3, [r3, #0]
   18aa0:	2b03      	cmp	r3, #3
   18aa2:	d000      	beq.n	18aa6 <lcd_displaying_task+0x4f6>
   18aa4:	e0e0      	b.n	18c68 <lcd_displaying_task+0x6b8>
						lcd_printf("HIGH  ");
   18aa6:	4bb8      	ldr	r3, [pc, #736]	; (18d88 <lcd_displaying_task+0x7d8>)
   18aa8:	0018      	movs	r0, r3
   18aaa:	4bb1      	ldr	r3, [pc, #708]	; (18d70 <lcd_displaying_task+0x7c0>)
   18aac:	4798      	blx	r3
					break;
   18aae:	e0db      	b.n	18c68 <lcd_displaying_task+0x6b8>
				}
				case 6:
				{
					LCD_setCursor(0,0);
   18ab0:	2100      	movs	r1, #0
   18ab2:	2000      	movs	r0, #0
   18ab4:	4baf      	ldr	r3, [pc, #700]	; (18d74 <lcd_displaying_task+0x7c4>)
   18ab6:	4798      	blx	r3
					lcd_printf("BatteryPer: %u%% ",Analog_Parameter_Struct.Battery_percentage);
   18ab8:	4bb4      	ldr	r3, [pc, #720]	; (18d8c <lcd_displaying_task+0x7dc>)
   18aba:	7f1b      	ldrb	r3, [r3, #28]
   18abc:	b2db      	uxtb	r3, r3
   18abe:	001a      	movs	r2, r3
   18ac0:	4bb3      	ldr	r3, [pc, #716]	; (18d90 <lcd_displaying_task+0x7e0>)
   18ac2:	0011      	movs	r1, r2
   18ac4:	0018      	movs	r0, r3
   18ac6:	4baa      	ldr	r3, [pc, #680]	; (18d70 <lcd_displaying_task+0x7c0>)
   18ac8:	4798      	blx	r3
					LCD_setCursor(0,1);
   18aca:	2101      	movs	r1, #1
   18acc:	2000      	movs	r0, #0
   18ace:	4ba9      	ldr	r3, [pc, #676]	; (18d74 <lcd_displaying_task+0x7c4>)
   18ad0:	4798      	blx	r3
					lcd_printf("SIGNAL : ");
   18ad2:	4bb0      	ldr	r3, [pc, #704]	; (18d94 <lcd_displaying_task+0x7e4>)
   18ad4:	0018      	movs	r0, r3
   18ad6:	4ba6      	ldr	r3, [pc, #664]	; (18d70 <lcd_displaying_task+0x7c0>)
   18ad8:	4798      	blx	r3
					LCD_setCursor(9,1);
   18ada:	2101      	movs	r1, #1
   18adc:	2009      	movs	r0, #9
   18ade:	4ba5      	ldr	r3, [pc, #660]	; (18d74 <lcd_displaying_task+0x7c4>)
   18ae0:	4798      	blx	r3
					lcd_printf("       ");
   18ae2:	4bad      	ldr	r3, [pc, #692]	; (18d98 <lcd_displaying_task+0x7e8>)
   18ae4:	0018      	movs	r0, r3
   18ae6:	4ba2      	ldr	r3, [pc, #648]	; (18d70 <lcd_displaying_task+0x7c0>)
   18ae8:	4798      	blx	r3
					LCD_setCursor(9,1);
   18aea:	2101      	movs	r1, #1
   18aec:	2009      	movs	r0, #9
   18aee:	4ba1      	ldr	r3, [pc, #644]	; (18d74 <lcd_displaying_task+0x7c4>)
   18af0:	4798      	blx	r3
					
					uint8_t tempSignal = Signal_Strength;
   18af2:	233b      	movs	r3, #59	; 0x3b
   18af4:	18fb      	adds	r3, r7, r3
   18af6:	4aa9      	ldr	r2, [pc, #676]	; (18d9c <lcd_displaying_task+0x7ec>)
   18af8:	7812      	ldrb	r2, [r2, #0]
   18afa:	701a      	strb	r2, [r3, #0]
					for (uint8_t i=0;i<=tempSignal;i++)
   18afc:	233e      	movs	r3, #62	; 0x3e
   18afe:	18fb      	adds	r3, r7, r3
   18b00:	2200      	movs	r2, #0
   18b02:	701a      	strb	r2, [r3, #0]
   18b04:	e00c      	b.n	18b20 <lcd_displaying_task+0x570>
					{
						LCD_write(i);
   18b06:	233e      	movs	r3, #62	; 0x3e
   18b08:	18fb      	adds	r3, r7, r3
   18b0a:	781b      	ldrb	r3, [r3, #0]
   18b0c:	0018      	movs	r0, r3
   18b0e:	4ba4      	ldr	r3, [pc, #656]	; (18da0 <lcd_displaying_task+0x7f0>)
   18b10:	4798      	blx	r3
					for (uint8_t i=0;i<=tempSignal;i++)
   18b12:	233e      	movs	r3, #62	; 0x3e
   18b14:	18fb      	adds	r3, r7, r3
   18b16:	781a      	ldrb	r2, [r3, #0]
   18b18:	233e      	movs	r3, #62	; 0x3e
   18b1a:	18fb      	adds	r3, r7, r3
   18b1c:	3201      	adds	r2, #1
   18b1e:	701a      	strb	r2, [r3, #0]
   18b20:	233e      	movs	r3, #62	; 0x3e
   18b22:	18fa      	adds	r2, r7, r3
   18b24:	233b      	movs	r3, #59	; 0x3b
   18b26:	18fb      	adds	r3, r7, r3
   18b28:	7812      	ldrb	r2, [r2, #0]
   18b2a:	781b      	ldrb	r3, [r3, #0]
   18b2c:	429a      	cmp	r2, r3
   18b2e:	d9ea      	bls.n	18b06 <lcd_displaying_task+0x556>
					}

					break;
   18b30:	e09d      	b.n	18c6e <lcd_displaying_task+0x6be>
				}
				case 7:
				{
					LCD_setCursor(0,0);
   18b32:	2100      	movs	r1, #0
   18b34:	2000      	movs	r0, #0
   18b36:	4b8f      	ldr	r3, [pc, #572]	; (18d74 <lcd_displaying_task+0x7c4>)
   18b38:	4798      	blx	r3
					switch(callStateOnLCD)
   18b3a:	4b9a      	ldr	r3, [pc, #616]	; (18da4 <lcd_displaying_task+0x7f4>)
   18b3c:	781b      	ldrb	r3, [r3, #0]
   18b3e:	2b05      	cmp	r3, #5
   18b40:	d900      	bls.n	18b44 <lcd_displaying_task+0x594>
   18b42:	e093      	b.n	18c6c <lcd_displaying_task+0x6bc>
   18b44:	009a      	lsls	r2, r3, #2
   18b46:	4b98      	ldr	r3, [pc, #608]	; (18da8 <lcd_displaying_task+0x7f8>)
   18b48:	18d3      	adds	r3, r2, r3
   18b4a:	681b      	ldr	r3, [r3, #0]
   18b4c:	469f      	mov	pc, r3
					{
						case LCDCALLSTATE_RINGING:
						{
							lcd_printf("INCOMING CALL.. ");
   18b4e:	4b97      	ldr	r3, [pc, #604]	; (18dac <lcd_displaying_task+0x7fc>)
   18b50:	0018      	movs	r0, r3
   18b52:	4b87      	ldr	r3, [pc, #540]	; (18d70 <lcd_displaying_task+0x7c0>)
   18b54:	4798      	blx	r3
							LCD_setCursor(0,1);
   18b56:	2101      	movs	r1, #1
   18b58:	2000      	movs	r0, #0
   18b5a:	4b86      	ldr	r3, [pc, #536]	; (18d74 <lcd_displaying_task+0x7c4>)
   18b5c:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   18b5e:	4a94      	ldr	r2, [pc, #592]	; (18db0 <lcd_displaying_task+0x800>)
   18b60:	4b94      	ldr	r3, [pc, #592]	; (18db4 <lcd_displaying_task+0x804>)
   18b62:	0011      	movs	r1, r2
   18b64:	0018      	movs	r0, r3
   18b66:	4b82      	ldr	r3, [pc, #520]	; (18d70 <lcd_displaying_task+0x7c0>)
   18b68:	4798      	blx	r3
							break;
   18b6a:	e045      	b.n	18bf8 <lcd_displaying_task+0x648>
						}
						case LCDCALLSTATE_INCALL:
						{
							lcd_printf("IN CALL...      ");
   18b6c:	4b92      	ldr	r3, [pc, #584]	; (18db8 <lcd_displaying_task+0x808>)
   18b6e:	0018      	movs	r0, r3
   18b70:	4b7f      	ldr	r3, [pc, #508]	; (18d70 <lcd_displaying_task+0x7c0>)
   18b72:	4798      	blx	r3
							LCD_setCursor(0,1);
   18b74:	2101      	movs	r1, #1
   18b76:	2000      	movs	r0, #0
   18b78:	4b7e      	ldr	r3, [pc, #504]	; (18d74 <lcd_displaying_task+0x7c4>)
   18b7a:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   18b7c:	4a8c      	ldr	r2, [pc, #560]	; (18db0 <lcd_displaying_task+0x800>)
   18b7e:	4b8d      	ldr	r3, [pc, #564]	; (18db4 <lcd_displaying_task+0x804>)
   18b80:	0011      	movs	r1, r2
   18b82:	0018      	movs	r0, r3
   18b84:	4b7a      	ldr	r3, [pc, #488]	; (18d70 <lcd_displaying_task+0x7c0>)
   18b86:	4798      	blx	r3
							break;
   18b88:	e036      	b.n	18bf8 <lcd_displaying_task+0x648>
						}
						case LCDCALLSTATE_OUTGOING:
						{
							lcd_printf("DIALING...      ");
   18b8a:	4b8c      	ldr	r3, [pc, #560]	; (18dbc <lcd_displaying_task+0x80c>)
   18b8c:	0018      	movs	r0, r3
   18b8e:	4b78      	ldr	r3, [pc, #480]	; (18d70 <lcd_displaying_task+0x7c0>)
   18b90:	4798      	blx	r3
							LCD_setCursor(0,1);
   18b92:	2101      	movs	r1, #1
   18b94:	2000      	movs	r0, #0
   18b96:	4b77      	ldr	r3, [pc, #476]	; (18d74 <lcd_displaying_task+0x7c4>)
   18b98:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   18b9a:	4a85      	ldr	r2, [pc, #532]	; (18db0 <lcd_displaying_task+0x800>)
   18b9c:	4b85      	ldr	r3, [pc, #532]	; (18db4 <lcd_displaying_task+0x804>)
   18b9e:	0011      	movs	r1, r2
   18ba0:	0018      	movs	r0, r3
   18ba2:	4b73      	ldr	r3, [pc, #460]	; (18d70 <lcd_displaying_task+0x7c0>)
   18ba4:	4798      	blx	r3
							break;
   18ba6:	e027      	b.n	18bf8 <lcd_displaying_task+0x648>
						}
						case LCDCALLSTATE_INCOMINGSMS:
						{
							lcd_printf("INCOMING SMS... ");
   18ba8:	4b85      	ldr	r3, [pc, #532]	; (18dc0 <lcd_displaying_task+0x810>)
   18baa:	0018      	movs	r0, r3
   18bac:	4b70      	ldr	r3, [pc, #448]	; (18d70 <lcd_displaying_task+0x7c0>)
   18bae:	4798      	blx	r3
							LCD_setCursor(0,1);
   18bb0:	2101      	movs	r1, #1
   18bb2:	2000      	movs	r0, #0
   18bb4:	4b6f      	ldr	r3, [pc, #444]	; (18d74 <lcd_displaying_task+0x7c4>)
   18bb6:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   18bb8:	4a7d      	ldr	r2, [pc, #500]	; (18db0 <lcd_displaying_task+0x800>)
   18bba:	4b7e      	ldr	r3, [pc, #504]	; (18db4 <lcd_displaying_task+0x804>)
   18bbc:	0011      	movs	r1, r2
   18bbe:	0018      	movs	r0, r3
   18bc0:	4b6b      	ldr	r3, [pc, #428]	; (18d70 <lcd_displaying_task+0x7c0>)
   18bc2:	4798      	blx	r3
							setCallStateOnLCD(LCDCALLSTATE_IDLE,NULL,false);
   18bc4:	2200      	movs	r2, #0
   18bc6:	2100      	movs	r1, #0
   18bc8:	2000      	movs	r0, #0
   18bca:	4b7e      	ldr	r3, [pc, #504]	; (18dc4 <lcd_displaying_task+0x814>)
   18bcc:	4798      	blx	r3
							break;
   18bce:	e013      	b.n	18bf8 <lcd_displaying_task+0x648>
						}
						case LCDCALLSTATE_OUTGOINGSMS:
						{
							lcd_printf("OUTGOING SMS... ");
   18bd0:	4b7d      	ldr	r3, [pc, #500]	; (18dc8 <lcd_displaying_task+0x818>)
   18bd2:	0018      	movs	r0, r3
   18bd4:	4b66      	ldr	r3, [pc, #408]	; (18d70 <lcd_displaying_task+0x7c0>)
   18bd6:	4798      	blx	r3
							LCD_setCursor(0,1);
   18bd8:	2101      	movs	r1, #1
   18bda:	2000      	movs	r0, #0
   18bdc:	4b65      	ldr	r3, [pc, #404]	; (18d74 <lcd_displaying_task+0x7c4>)
   18bde:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   18be0:	4a73      	ldr	r2, [pc, #460]	; (18db0 <lcd_displaying_task+0x800>)
   18be2:	4b74      	ldr	r3, [pc, #464]	; (18db4 <lcd_displaying_task+0x804>)
   18be4:	0011      	movs	r1, r2
   18be6:	0018      	movs	r0, r3
   18be8:	4b61      	ldr	r3, [pc, #388]	; (18d70 <lcd_displaying_task+0x7c0>)
   18bea:	4798      	blx	r3
							setCallStateOnLCD(LCDCALLSTATE_IDLE,NULL,false);
   18bec:	2200      	movs	r2, #0
   18bee:	2100      	movs	r1, #0
   18bf0:	2000      	movs	r0, #0
   18bf2:	4b74      	ldr	r3, [pc, #464]	; (18dc4 <lcd_displaying_task+0x814>)
   18bf4:	4798      	blx	r3
							break;
   18bf6:	46c0      	nop			; (mov r8, r8)
						}
					}
					break;
   18bf8:	e038      	b.n	18c6c <lcd_displaying_task+0x6bc>
				}
				case 8:
				{
					if(Analog_Parameter_Struct.Battery_percentage<35)
   18bfa:	4b64      	ldr	r3, [pc, #400]	; (18d8c <lcd_displaying_task+0x7dc>)
   18bfc:	7f1b      	ldrb	r3, [r3, #28]
   18bfe:	b2db      	uxtb	r3, r3
   18c00:	2b22      	cmp	r3, #34	; 0x22
   18c02:	d810      	bhi.n	18c26 <lcd_displaying_task+0x676>
					{
						LCD_setCursor(0,0);
   18c04:	2100      	movs	r1, #0
   18c06:	2000      	movs	r0, #0
   18c08:	4b5a      	ldr	r3, [pc, #360]	; (18d74 <lcd_displaying_task+0x7c4>)
   18c0a:	4798      	blx	r3
						lcd_printf("LOW BATTERY     ");
   18c0c:	4b6f      	ldr	r3, [pc, #444]	; (18dcc <lcd_displaying_task+0x81c>)
   18c0e:	0018      	movs	r0, r3
   18c10:	4b57      	ldr	r3, [pc, #348]	; (18d70 <lcd_displaying_task+0x7c0>)
   18c12:	4798      	blx	r3
						LCD_setCursor(0,1);
   18c14:	2101      	movs	r1, #1
   18c16:	2000      	movs	r0, #0
   18c18:	4b56      	ldr	r3, [pc, #344]	; (18d74 <lcd_displaying_task+0x7c4>)
   18c1a:	4798      	blx	r3
						lcd_printf("                ");
   18c1c:	4b6c      	ldr	r3, [pc, #432]	; (18dd0 <lcd_displaying_task+0x820>)
   18c1e:	0018      	movs	r0, r3
   18c20:	4b53      	ldr	r3, [pc, #332]	; (18d70 <lcd_displaying_task+0x7c0>)
   18c22:	4798      	blx	r3
						break;
   18c24:	e023      	b.n	18c6e <lcd_displaying_task+0x6be>
					}
					else
					{
						screen++;
   18c26:	233f      	movs	r3, #63	; 0x3f
   18c28:	18fb      	adds	r3, r7, r3
   18c2a:	781a      	ldrb	r2, [r3, #0]
   18c2c:	233f      	movs	r3, #63	; 0x3f
   18c2e:	18fb      	adds	r3, r7, r3
   18c30:	3201      	adds	r2, #1
   18c32:	701a      	strb	r2, [r3, #0]
					}
				}
				case 9:
				{
					LCD_setCursor(0,0);
   18c34:	2100      	movs	r1, #0
   18c36:	2000      	movs	r0, #0
   18c38:	4b4e      	ldr	r3, [pc, #312]	; (18d74 <lcd_displaying_task+0x7c4>)
   18c3a:	4798      	blx	r3
					lcd_printf("CURRENT SETTING ");
   18c3c:	4b65      	ldr	r3, [pc, #404]	; (18dd4 <lcd_displaying_task+0x824>)
   18c3e:	0018      	movs	r0, r3
   18c40:	4b4b      	ldr	r3, [pc, #300]	; (18d70 <lcd_displaying_task+0x7c0>)
   18c42:	4798      	blx	r3
					LCD_setCursor(0,1);
   18c44:	2101      	movs	r1, #1
   18c46:	2000      	movs	r0, #0
   18c48:	4b4a      	ldr	r3, [pc, #296]	; (18d74 <lcd_displaying_task+0x7c4>)
   18c4a:	4798      	blx	r3
					if(user_settings_parameter_struct.currentDetectionAddress)
   18c4c:	4b62      	ldr	r3, [pc, #392]	; (18dd8 <lcd_displaying_task+0x828>)
   18c4e:	7bdb      	ldrb	r3, [r3, #15]
   18c50:	2b00      	cmp	r3, #0
   18c52:	d004      	beq.n	18c5e <lcd_displaying_task+0x6ae>
					{
						lcd_printf("ON              ");
   18c54:	4b61      	ldr	r3, [pc, #388]	; (18ddc <lcd_displaying_task+0x82c>)
   18c56:	0018      	movs	r0, r3
   18c58:	4b45      	ldr	r3, [pc, #276]	; (18d70 <lcd_displaying_task+0x7c0>)
   18c5a:	4798      	blx	r3
					}
					else
					{
						lcd_printf("OFF             ");
					}
					break;
   18c5c:	e007      	b.n	18c6e <lcd_displaying_task+0x6be>
						lcd_printf("OFF             ");
   18c5e:	4b60      	ldr	r3, [pc, #384]	; (18de0 <lcd_displaying_task+0x830>)
   18c60:	0018      	movs	r0, r3
   18c62:	4b43      	ldr	r3, [pc, #268]	; (18d70 <lcd_displaying_task+0x7c0>)
   18c64:	4798      	blx	r3
					break;
   18c66:	e002      	b.n	18c6e <lcd_displaying_task+0x6be>
					break;
   18c68:	46c0      	nop			; (mov r8, r8)
   18c6a:	e000      	b.n	18c6e <lcd_displaying_task+0x6be>
					break;
   18c6c:	46c0      	nop			; (mov r8, r8)
				//break;
				//}
			}
		}
		
		if (xQueueReceive(xfour_Second_Queue,&time,0))
   18c6e:	4b5d      	ldr	r3, [pc, #372]	; (18de4 <lcd_displaying_task+0x834>)
   18c70:	681b      	ldr	r3, [r3, #0]
   18c72:	223a      	movs	r2, #58	; 0x3a
   18c74:	18b9      	adds	r1, r7, r2
   18c76:	2200      	movs	r2, #0
   18c78:	0018      	movs	r0, r3
   18c7a:	4b5b      	ldr	r3, [pc, #364]	; (18de8 <lcd_displaying_task+0x838>)
   18c7c:	4798      	blx	r3
   18c7e:	1e03      	subs	r3, r0, #0
   18c80:	d057      	beq.n	18d32 <lcd_displaying_task+0x782>
		{
			xTimerChangePeriod( four_Second_timeout_timer, 4000/portTICK_PERIOD_MS, portMAX_DELAY);
   18c82:	4b5a      	ldr	r3, [pc, #360]	; (18dec <lcd_displaying_task+0x83c>)
   18c84:	6818      	ldr	r0, [r3, #0]
   18c86:	23fa      	movs	r3, #250	; 0xfa
   18c88:	011a      	lsls	r2, r3, #4
   18c8a:	2301      	movs	r3, #1
   18c8c:	425b      	negs	r3, r3
   18c8e:	9300      	str	r3, [sp, #0]
   18c90:	2300      	movs	r3, #0
   18c92:	2104      	movs	r1, #4
   18c94:	4c56      	ldr	r4, [pc, #344]	; (18df0 <lcd_displaying_task+0x840>)
   18c96:	47a0      	blx	r4
			if(varPauseDisplay==false)
   18c98:	4b56      	ldr	r3, [pc, #344]	; (18df4 <lcd_displaying_task+0x844>)
   18c9a:	781b      	ldrb	r3, [r3, #0]
   18c9c:	b2db      	uxtb	r3, r3
   18c9e:	2201      	movs	r2, #1
   18ca0:	4053      	eors	r3, r2
   18ca2:	b2db      	uxtb	r3, r3
   18ca4:	2b00      	cmp	r3, #0
   18ca6:	d044      	beq.n	18d32 <lcd_displaying_task+0x782>
			{
				screen++;
   18ca8:	233f      	movs	r3, #63	; 0x3f
   18caa:	18fb      	adds	r3, r7, r3
   18cac:	781a      	ldrb	r2, [r3, #0]
   18cae:	233f      	movs	r3, #63	; 0x3f
   18cb0:	18fb      	adds	r3, r7, r3
   18cb2:	3201      	adds	r2, #1
   18cb4:	701a      	strb	r2, [r3, #0]
				if(!getMotorState() && screen==3)
   18cb6:	4b50      	ldr	r3, [pc, #320]	; (18df8 <lcd_displaying_task+0x848>)
   18cb8:	4798      	blx	r3
   18cba:	0003      	movs	r3, r0
   18cbc:	001a      	movs	r2, r3
   18cbe:	2301      	movs	r3, #1
   18cc0:	4053      	eors	r3, r2
   18cc2:	b2db      	uxtb	r3, r3
   18cc4:	2b00      	cmp	r3, #0
   18cc6:	d00b      	beq.n	18ce0 <lcd_displaying_task+0x730>
   18cc8:	233f      	movs	r3, #63	; 0x3f
   18cca:	18fb      	adds	r3, r7, r3
   18ccc:	781b      	ldrb	r3, [r3, #0]
   18cce:	2b03      	cmp	r3, #3
   18cd0:	d106      	bne.n	18ce0 <lcd_displaying_task+0x730>
				{
					screen++;
   18cd2:	233f      	movs	r3, #63	; 0x3f
   18cd4:	18fb      	adds	r3, r7, r3
   18cd6:	781a      	ldrb	r2, [r3, #0]
   18cd8:	233f      	movs	r3, #63	; 0x3f
   18cda:	18fb      	adds	r3, r7, r3
   18cdc:	3201      	adds	r2, #1
   18cde:	701a      	strb	r2, [r3, #0]
				}
				
				if(!factory_settings_parameter_struct.ENABLE_WATER && screen==5)
   18ce0:	4b46      	ldr	r3, [pc, #280]	; (18dfc <lcd_displaying_task+0x84c>)
   18ce2:	795b      	ldrb	r3, [r3, #5]
   18ce4:	2b00      	cmp	r3, #0
   18ce6:	d10b      	bne.n	18d00 <lcd_displaying_task+0x750>
   18ce8:	233f      	movs	r3, #63	; 0x3f
   18cea:	18fb      	adds	r3, r7, r3
   18cec:	781b      	ldrb	r3, [r3, #0]
   18cee:	2b05      	cmp	r3, #5
   18cf0:	d106      	bne.n	18d00 <lcd_displaying_task+0x750>
				{
					screen++;
   18cf2:	233f      	movs	r3, #63	; 0x3f
   18cf4:	18fb      	adds	r3, r7, r3
   18cf6:	781a      	ldrb	r2, [r3, #0]
   18cf8:	233f      	movs	r3, #63	; 0x3f
   18cfa:	18fb      	adds	r3, r7, r3
   18cfc:	3201      	adds	r2, #1
   18cfe:	701a      	strb	r2, [r3, #0]
				}
				
				{
					if(callStateOnLCD==LCDCALLSTATE_IDLE && screen==7)
   18d00:	4b28      	ldr	r3, [pc, #160]	; (18da4 <lcd_displaying_task+0x7f4>)
   18d02:	781b      	ldrb	r3, [r3, #0]
   18d04:	2b00      	cmp	r3, #0
   18d06:	d10c      	bne.n	18d22 <lcd_displaying_task+0x772>
   18d08:	233f      	movs	r3, #63	; 0x3f
   18d0a:	18fb      	adds	r3, r7, r3
   18d0c:	781b      	ldrb	r3, [r3, #0]
   18d0e:	2b07      	cmp	r3, #7
   18d10:	d107      	bne.n	18d22 <lcd_displaying_task+0x772>
					{
						screen++;
   18d12:	233f      	movs	r3, #63	; 0x3f
   18d14:	18fb      	adds	r3, r7, r3
   18d16:	781a      	ldrb	r2, [r3, #0]
   18d18:	233f      	movs	r3, #63	; 0x3f
   18d1a:	18fb      	adds	r3, r7, r3
   18d1c:	3201      	adds	r2, #1
   18d1e:	701a      	strb	r2, [r3, #0]
   18d20:	e007      	b.n	18d32 <lcd_displaying_task+0x782>
					}
					else if(callStateOnLCD!=LCDCALLSTATE_IDLE)
   18d22:	4b20      	ldr	r3, [pc, #128]	; (18da4 <lcd_displaying_task+0x7f4>)
   18d24:	781b      	ldrb	r3, [r3, #0]
   18d26:	2b00      	cmp	r3, #0
   18d28:	d003      	beq.n	18d32 <lcd_displaying_task+0x782>
					{
						screen=7;
   18d2a:	233f      	movs	r3, #63	; 0x3f
   18d2c:	18fb      	adds	r3, r7, r3
   18d2e:	2207      	movs	r2, #7
   18d30:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		
		//screen = 8;
		vTaskDelay(500);
   18d32:	23fa      	movs	r3, #250	; 0xfa
   18d34:	005b      	lsls	r3, r3, #1
   18d36:	0018      	movs	r0, r3
   18d38:	4b31      	ldr	r3, [pc, #196]	; (18e00 <lcd_displaying_task+0x850>)
   18d3a:	4798      	blx	r3

		if (screen>9)
   18d3c:	233f      	movs	r3, #63	; 0x3f
   18d3e:	18fb      	adds	r3, r7, r3
   18d40:	781b      	ldrb	r3, [r3, #0]
   18d42:	2b09      	cmp	r3, #9
   18d44:	d800      	bhi.n	18d48 <lcd_displaying_task+0x798>
   18d46:	e4a2      	b.n	1868e <lcd_displaying_task+0xde>
		{
			screen=1;
   18d48:	233f      	movs	r3, #63	; 0x3f
   18d4a:	18fb      	adds	r3, r7, r3
   18d4c:	2201      	movs	r2, #1
   18d4e:	701a      	strb	r2, [r3, #0]
			
			LCD_PWR_DIS();
   18d50:	4b2c      	ldr	r3, [pc, #176]	; (18e04 <lcd_displaying_task+0x854>)
   18d52:	4798      	blx	r3
			lcd_in_sleep = true;
   18d54:	4b2c      	ldr	r3, [pc, #176]	; (18e08 <lcd_displaying_task+0x858>)
   18d56:	2201      	movs	r2, #1
   18d58:	701a      	strb	r2, [r3, #0]
			setNetworkCharacter=true;
   18d5a:	4b2c      	ldr	r3, [pc, #176]	; (18e0c <lcd_displaying_task+0x85c>)
   18d5c:	2201      	movs	r2, #1
   18d5e:	701a      	strb	r2, [r3, #0]
			vTaskDelay(100);
   18d60:	2064      	movs	r0, #100	; 0x64
   18d62:	4b27      	ldr	r3, [pc, #156]	; (18e00 <lcd_displaying_task+0x850>)
   18d64:	4798      	blx	r3
		if (lcd_in_sleep)
   18d66:	e492      	b.n	1868e <lcd_displaying_task+0xde>
   18d68:	20000790 	.word	0x20000790
   18d6c:	0002b390 	.word	0x0002b390
   18d70:	0001412d 	.word	0x0001412d
   18d74:	00014031 	.word	0x00014031
   18d78:	0002b398 	.word	0x0002b398
   18d7c:	20000858 	.word	0x20000858
   18d80:	0002b3a4 	.word	0x0002b3a4
   18d84:	0002b388 	.word	0x0002b388
   18d88:	0002b380 	.word	0x0002b380
   18d8c:	200006e8 	.word	0x200006e8
   18d90:	0002b3ac 	.word	0x0002b3ac
   18d94:	0002b3c0 	.word	0x0002b3c0
   18d98:	0002b3cc 	.word	0x0002b3cc
   18d9c:	20000789 	.word	0x20000789
   18da0:	00013ee5 	.word	0x00013ee5
   18da4:	200007d2 	.word	0x200007d2
   18da8:	0002b4cc 	.word	0x0002b4cc
   18dac:	0002b3d4 	.word	0x0002b3d4
   18db0:	20000844 	.word	0x20000844
   18db4:	0002b3e8 	.word	0x0002b3e8
   18db8:	0002b3f0 	.word	0x0002b3f0
   18dbc:	0002b404 	.word	0x0002b404
   18dc0:	0002b418 	.word	0x0002b418
   18dc4:	0001d2b9 	.word	0x0001d2b9
   18dc8:	0002b42c 	.word	0x0002b42c
   18dcc:	0002b440 	.word	0x0002b440
   18dd0:	0002b454 	.word	0x0002b454
   18dd4:	0002b468 	.word	0x0002b468
   18dd8:	20000654 	.word	0x20000654
   18ddc:	0002b260 	.word	0x0002b260
   18de0:	0002b274 	.word	0x0002b274
   18de4:	20000228 	.word	0x20000228
   18de8:	0001fbc1 	.word	0x0001fbc1
   18dec:	2000022c 	.word	0x2000022c
   18df0:	0002162d 	.word	0x0002162d
   18df4:	200007ac 	.word	0x200007ac
   18df8:	0001b311 	.word	0x0001b311
   18dfc:	2000062c 	.word	0x2000062c
   18e00:	00020669 	.word	0x00020669
   18e04:	00013ce1 	.word	0x00013ce1
   18e08:	20000864 	.word	0x20000864
   18e0c:	20000865 	.word	0x20000865

00018e10 <start_lcd_service>:
	}
}


void start_lcd_service(void)
{
   18e10:	b590      	push	{r4, r7, lr}
   18e12:	b083      	sub	sp, #12
   18e14:	af02      	add	r7, sp, #8
	xfour_Second_Queue=xQueueCreate(1,sizeof(uint8_t));
   18e16:	2200      	movs	r2, #0
   18e18:	2101      	movs	r1, #1
   18e1a:	2001      	movs	r0, #1
   18e1c:	4b09      	ldr	r3, [pc, #36]	; (18e44 <start_lcd_service+0x34>)
   18e1e:	4798      	blx	r3
   18e20:	0002      	movs	r2, r0
   18e22:	4b09      	ldr	r3, [pc, #36]	; (18e48 <start_lcd_service+0x38>)
   18e24:	601a      	str	r2, [r3, #0]
	xTaskCreate(lcd_displaying_task,NULL,(uint16_t)400,NULL,1,NULL);
   18e26:	23c8      	movs	r3, #200	; 0xc8
   18e28:	005a      	lsls	r2, r3, #1
   18e2a:	4808      	ldr	r0, [pc, #32]	; (18e4c <start_lcd_service+0x3c>)
   18e2c:	2300      	movs	r3, #0
   18e2e:	9301      	str	r3, [sp, #4]
   18e30:	2301      	movs	r3, #1
   18e32:	9300      	str	r3, [sp, #0]
   18e34:	2300      	movs	r3, #0
   18e36:	2100      	movs	r1, #0
   18e38:	4c05      	ldr	r4, [pc, #20]	; (18e50 <start_lcd_service+0x40>)
   18e3a:	47a0      	blx	r4
	
}
   18e3c:	46c0      	nop			; (mov r8, r8)
   18e3e:	46bd      	mov	sp, r7
   18e40:	b001      	add	sp, #4
   18e42:	bd90      	pop	{r4, r7, pc}
   18e44:	0001f805 	.word	0x0001f805
   18e48:	20000228 	.word	0x20000228
   18e4c:	000185b1 	.word	0x000185b1
   18e50:	00020329 	.word	0x00020329

00018e54 <four_second_timer_callback>:

static void four_second_timer_callback(TimerHandle_t timer)
{
   18e54:	b590      	push	{r4, r7, lr}
   18e56:	b085      	sub	sp, #20
   18e58:	af00      	add	r7, sp, #0
   18e5a:	6078      	str	r0, [r7, #4]
	uint8_t ucharfour_Second=1;
   18e5c:	230f      	movs	r3, #15
   18e5e:	18fb      	adds	r3, r7, r3
   18e60:	2201      	movs	r2, #1
   18e62:	701a      	strb	r2, [r3, #0]
	xQueueSendFromISR(xfour_Second_Queue,&ucharfour_Second,0);
   18e64:	4b05      	ldr	r3, [pc, #20]	; (18e7c <four_second_timer_callback+0x28>)
   18e66:	6818      	ldr	r0, [r3, #0]
   18e68:	230f      	movs	r3, #15
   18e6a:	18f9      	adds	r1, r7, r3
   18e6c:	2300      	movs	r3, #0
   18e6e:	2200      	movs	r2, #0
   18e70:	4c03      	ldr	r4, [pc, #12]	; (18e80 <four_second_timer_callback+0x2c>)
   18e72:	47a0      	blx	r4
}
   18e74:	46c0      	nop			; (mov r8, r8)
   18e76:	46bd      	mov	sp, r7
   18e78:	b005      	add	sp, #20
   18e7a:	bd90      	pop	{r4, r7, pc}
   18e7c:	20000228 	.word	0x20000228
   18e80:	0001faa1 	.word	0x0001faa1

00018e84 <ac_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval ture If the module synchronization is ongoing
 */
static inline bool ac_is_syncing(
        struct ac_module *const module_inst)
{
   18e84:	b580      	push	{r7, lr}
   18e86:	b084      	sub	sp, #16
   18e88:	af00      	add	r7, sp, #0
   18e8a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Ac *const ac_module = module_inst->hw;
   18e8c:	687b      	ldr	r3, [r7, #4]
   18e8e:	681b      	ldr	r3, [r3, #0]
   18e90:	60fb      	str	r3, [r7, #12]
		return true;
	}

	return false;
#else
	if (ac_module->STATUSB.reg & AC_STATUSB_SYNCBUSY) {
   18e92:	68fb      	ldr	r3, [r7, #12]
   18e94:	7a5b      	ldrb	r3, [r3, #9]
   18e96:	b2db      	uxtb	r3, r3
   18e98:	b25b      	sxtb	r3, r3
   18e9a:	2b00      	cmp	r3, #0
   18e9c:	da01      	bge.n	18ea2 <ac_is_syncing+0x1e>
		return true;
   18e9e:	2301      	movs	r3, #1
   18ea0:	e000      	b.n	18ea4 <ac_is_syncing+0x20>
	}

	return false;
   18ea2:	2300      	movs	r3, #0
#endif
}
   18ea4:	0018      	movs	r0, r3
   18ea6:	46bd      	mov	sp, r7
   18ea8:	b004      	add	sp, #16
   18eaa:	bd80      	pop	{r7, pc}

00018eac <ac_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void ac_get_config_defaults(
		struct ac_config *const config)
{
   18eac:	b580      	push	{r7, lr}
   18eae:	b084      	sub	sp, #16
   18eb0:	af00      	add	r7, sp, #0
   18eb2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);
#ifdef FEATURE_AC_RUN_IN_STANDY_PAIR_COMPARATOR
	/* Default configuration values */
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
   18eb4:	2300      	movs	r3, #0
   18eb6:	60fb      	str	r3, [r7, #12]
   18eb8:	e007      	b.n	18eca <ac_get_config_defaults+0x1e>
		config->run_in_standby[i] = false;
   18eba:	687a      	ldr	r2, [r7, #4]
   18ebc:	68fb      	ldr	r3, [r7, #12]
   18ebe:	18d3      	adds	r3, r2, r3
   18ec0:	2200      	movs	r2, #0
   18ec2:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
   18ec4:	68fb      	ldr	r3, [r7, #12]
   18ec6:	3301      	adds	r3, #1
   18ec8:	60fb      	str	r3, [r7, #12]
   18eca:	68fb      	ldr	r3, [r7, #12]
   18ecc:	2b00      	cmp	r3, #0
   18ece:	d0f4      	beq.n	18eba <ac_get_config_defaults+0xe>
	}
#endif
#if (SAMD) || (SAMHA1) || (SAMHA0) || (SAMR21)
	config->dig_source_generator = GCLK_GENERATOR_0;
   18ed0:	687b      	ldr	r3, [r7, #4]
   18ed2:	2200      	movs	r2, #0
   18ed4:	705a      	strb	r2, [r3, #1]
	config->ana_source_generator = GCLK_GENERATOR_3;
   18ed6:	687b      	ldr	r3, [r7, #4]
   18ed8:	2203      	movs	r2, #3
   18eda:	709a      	strb	r2, [r3, #2]
#else
	config->source_generator = GCLK_GENERATOR_0;
#endif
}
   18edc:	46c0      	nop			; (mov r8, r8)
   18ede:	46bd      	mov	sp, r7
   18ee0:	b004      	add	sp, #16
   18ee2:	bd80      	pop	{r7, pc}

00018ee4 <ac_enable>:
 *
 * \param[in] module_inst  Software instance for the Analog Comparator peripheral
 */
static inline void ac_enable(
		struct ac_module *const module_inst)
{
   18ee4:	b580      	push	{r7, lr}
   18ee6:	b084      	sub	sp, #16
   18ee8:	af00      	add	r7, sp, #0
   18eea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
   18eec:	687b      	ldr	r3, [r7, #4]
   18eee:	681b      	ldr	r3, [r3, #0]
   18ef0:	60fb      	str	r3, [r7, #12]

	while (ac_is_syncing(module_inst)) {
   18ef2:	46c0      	nop			; (mov r8, r8)
   18ef4:	687b      	ldr	r3, [r7, #4]
   18ef6:	0018      	movs	r0, r3
   18ef8:	4b07      	ldr	r3, [pc, #28]	; (18f18 <ac_enable+0x34>)
   18efa:	4798      	blx	r3
   18efc:	1e03      	subs	r3, r0, #0
   18efe:	d1f9      	bne.n	18ef4 <ac_enable+0x10>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->CTRLA.reg |= AC_CTRLA_ENABLE;
   18f00:	68fb      	ldr	r3, [r7, #12]
   18f02:	781b      	ldrb	r3, [r3, #0]
   18f04:	b2db      	uxtb	r3, r3
   18f06:	2202      	movs	r2, #2
   18f08:	4313      	orrs	r3, r2
   18f0a:	b2da      	uxtb	r2, r3
   18f0c:	68fb      	ldr	r3, [r7, #12]
   18f0e:	701a      	strb	r2, [r3, #0]
}
   18f10:	46c0      	nop			; (mov r8, r8)
   18f12:	46bd      	mov	sp, r7
   18f14:	b004      	add	sp, #16
   18f16:	bd80      	pop	{r7, pc}
   18f18:	00018e85 	.word	0x00018e85

00018f1c <ac_enable_events>:
 *  \param[in] events       Struct containing flags of events to enable
 */
static inline void ac_enable_events(
		struct ac_module *const module_inst,
		struct ac_events *const events)
{
   18f1c:	b580      	push	{r7, lr}
   18f1e:	b086      	sub	sp, #24
   18f20:	af00      	add	r7, sp, #0
   18f22:	6078      	str	r0, [r7, #4]
   18f24:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(events);

	Ac *const ac_module = module_inst->hw;
   18f26:	687b      	ldr	r3, [r7, #4]
   18f28:	681b      	ldr	r3, [r3, #0]
   18f2a:	60fb      	str	r3, [r7, #12]

	uint32_t event_mask = 0;
   18f2c:	2300      	movs	r3, #0
   18f2e:	617b      	str	r3, [r7, #20]

	/* Configure window output events for each comparator pair */
	for (uint8_t i = 0; i < AC_PAIRS; i++) {
   18f30:	2313      	movs	r3, #19
   18f32:	18fb      	adds	r3, r7, r3
   18f34:	2200      	movs	r2, #0
   18f36:	701a      	strb	r2, [r3, #0]
   18f38:	e017      	b.n	18f6a <ac_enable_events+0x4e>
		if (events->generate_event_on_window[i] == true) {
   18f3a:	2313      	movs	r3, #19
   18f3c:	18fb      	adds	r3, r7, r3
   18f3e:	781b      	ldrb	r3, [r3, #0]
   18f40:	683a      	ldr	r2, [r7, #0]
   18f42:	5cd3      	ldrb	r3, [r2, r3]
   18f44:	2b00      	cmp	r3, #0
   18f46:	d009      	beq.n	18f5c <ac_enable_events+0x40>
			event_mask |= (AC_EVCTRL_WINEO0 << i);
   18f48:	2313      	movs	r3, #19
   18f4a:	18fb      	adds	r3, r7, r3
   18f4c:	781b      	ldrb	r3, [r3, #0]
   18f4e:	2210      	movs	r2, #16
   18f50:	409a      	lsls	r2, r3
   18f52:	0013      	movs	r3, r2
   18f54:	001a      	movs	r2, r3
   18f56:	697b      	ldr	r3, [r7, #20]
   18f58:	4313      	orrs	r3, r2
   18f5a:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < AC_PAIRS; i++) {
   18f5c:	2313      	movs	r3, #19
   18f5e:	18fb      	adds	r3, r7, r3
   18f60:	781a      	ldrb	r2, [r3, #0]
   18f62:	2313      	movs	r3, #19
   18f64:	18fb      	adds	r3, r7, r3
   18f66:	3201      	adds	r2, #1
   18f68:	701a      	strb	r2, [r3, #0]
   18f6a:	2313      	movs	r3, #19
   18f6c:	18fb      	adds	r3, r7, r3
   18f6e:	781b      	ldrb	r3, [r3, #0]
   18f70:	2b00      	cmp	r3, #0
   18f72:	d0e2      	beq.n	18f3a <ac_enable_events+0x1e>
		}
	}

	/* Configure sample input/output events for each comparator */
	for (uint8_t i = 0; i < AC_NUM_CMP; i++) {
   18f74:	2312      	movs	r3, #18
   18f76:	18fb      	adds	r3, r7, r3
   18f78:	2200      	movs	r2, #0
   18f7a:	701a      	strb	r2, [r3, #0]
   18f7c:	e02b      	b.n	18fd6 <ac_enable_events+0xba>
		if (events->on_event_sample[i] == true) {
   18f7e:	2312      	movs	r3, #18
   18f80:	18fb      	adds	r3, r7, r3
   18f82:	781b      	ldrb	r3, [r3, #0]
   18f84:	683a      	ldr	r2, [r7, #0]
   18f86:	18d3      	adds	r3, r2, r3
   18f88:	78db      	ldrb	r3, [r3, #3]
   18f8a:	2b00      	cmp	r3, #0
   18f8c:	d00a      	beq.n	18fa4 <ac_enable_events+0x88>
			event_mask |= (AC_EVCTRL_COMPEI0 << i);
   18f8e:	2312      	movs	r3, #18
   18f90:	18fb      	adds	r3, r7, r3
   18f92:	781b      	ldrb	r3, [r3, #0]
   18f94:	2280      	movs	r2, #128	; 0x80
   18f96:	0052      	lsls	r2, r2, #1
   18f98:	409a      	lsls	r2, r3
   18f9a:	0013      	movs	r3, r2
   18f9c:	001a      	movs	r2, r3
   18f9e:	697b      	ldr	r3, [r7, #20]
   18fa0:	4313      	orrs	r3, r2
   18fa2:	617b      	str	r3, [r7, #20]
		}

		if (events->generate_event_on_state[i] == true) {
   18fa4:	2312      	movs	r3, #18
   18fa6:	18fb      	adds	r3, r7, r3
   18fa8:	781b      	ldrb	r3, [r3, #0]
   18faa:	683a      	ldr	r2, [r7, #0]
   18fac:	18d3      	adds	r3, r2, r3
   18fae:	785b      	ldrb	r3, [r3, #1]
   18fb0:	2b00      	cmp	r3, #0
   18fb2:	d009      	beq.n	18fc8 <ac_enable_events+0xac>
			event_mask |= (AC_EVCTRL_COMPEO0 << i);
   18fb4:	2312      	movs	r3, #18
   18fb6:	18fb      	adds	r3, r7, r3
   18fb8:	781b      	ldrb	r3, [r3, #0]
   18fba:	2201      	movs	r2, #1
   18fbc:	409a      	lsls	r2, r3
   18fbe:	0013      	movs	r3, r2
   18fc0:	001a      	movs	r2, r3
   18fc2:	697b      	ldr	r3, [r7, #20]
   18fc4:	4313      	orrs	r3, r2
   18fc6:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < AC_NUM_CMP; i++) {
   18fc8:	2312      	movs	r3, #18
   18fca:	18fb      	adds	r3, r7, r3
   18fcc:	781a      	ldrb	r2, [r3, #0]
   18fce:	2312      	movs	r3, #18
   18fd0:	18fb      	adds	r3, r7, r3
   18fd2:	3201      	adds	r2, #1
   18fd4:	701a      	strb	r2, [r3, #0]
   18fd6:	2312      	movs	r3, #18
   18fd8:	18fb      	adds	r3, r7, r3
   18fda:	781b      	ldrb	r3, [r3, #0]
   18fdc:	2b01      	cmp	r3, #1
   18fde:	d9ce      	bls.n	18f7e <ac_enable_events+0x62>
		}
	}

	ac_module->EVCTRL.reg |= event_mask;
   18fe0:	68fb      	ldr	r3, [r7, #12]
   18fe2:	885b      	ldrh	r3, [r3, #2]
   18fe4:	b29a      	uxth	r2, r3
   18fe6:	697b      	ldr	r3, [r7, #20]
   18fe8:	b29b      	uxth	r3, r3
   18fea:	4313      	orrs	r3, r2
   18fec:	b29a      	uxth	r2, r3
   18fee:	68fb      	ldr	r3, [r7, #12]
   18ff0:	805a      	strh	r2, [r3, #2]
}
   18ff2:	46c0      	nop			; (mov r8, r8)
   18ff4:	46bd      	mov	sp, r7
   18ff6:	b006      	add	sp, #24
   18ff8:	bd80      	pop	{r7, pc}
	...

00018ffc <ac_chan_enable>:
 *  \param[in] channel      Comparator channel to enable
 */
static inline void ac_chan_enable(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel)
{
   18ffc:	b580      	push	{r7, lr}
   18ffe:	b084      	sub	sp, #16
   19000:	af00      	add	r7, sp, #0
   19002:	6078      	str	r0, [r7, #4]
   19004:	000a      	movs	r2, r1
   19006:	1cfb      	adds	r3, r7, #3
   19008:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
   1900a:	687b      	ldr	r3, [r7, #4]
   1900c:	681b      	ldr	r3, [r3, #0]
   1900e:	60fb      	str	r3, [r7, #12]

	while (ac_is_syncing(module_inst)) {
   19010:	46c0      	nop			; (mov r8, r8)
   19012:	687b      	ldr	r3, [r7, #4]
   19014:	0018      	movs	r0, r3
   19016:	4b0b      	ldr	r3, [pc, #44]	; (19044 <ac_chan_enable+0x48>)
   19018:	4798      	blx	r3
   1901a:	1e03      	subs	r3, r0, #0
   1901c:	d1f9      	bne.n	19012 <ac_chan_enable+0x16>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->COMPCTRL[(uint8_t)channel].reg |= AC_COMPCTRL_ENABLE;
   1901e:	1cfb      	adds	r3, r7, #3
   19020:	781a      	ldrb	r2, [r3, #0]
   19022:	1cfb      	adds	r3, r7, #3
   19024:	7819      	ldrb	r1, [r3, #0]
   19026:	68fb      	ldr	r3, [r7, #12]
   19028:	3104      	adds	r1, #4
   1902a:	0089      	lsls	r1, r1, #2
   1902c:	58cb      	ldr	r3, [r1, r3]
   1902e:	2101      	movs	r1, #1
   19030:	4319      	orrs	r1, r3
   19032:	68fb      	ldr	r3, [r7, #12]
   19034:	3204      	adds	r2, #4
   19036:	0092      	lsls	r2, r2, #2
   19038:	50d1      	str	r1, [r2, r3]
}
   1903a:	46c0      	nop			; (mov r8, r8)
   1903c:	46bd      	mov	sp, r7
   1903e:	b004      	add	sp, #16
   19040:	bd80      	pop	{r7, pc}
   19042:	46c0      	nop			; (mov r8, r8)
   19044:	00018e85 	.word	0x00018e85

00019048 <ac_chan_is_ready>:
 *  \return Comparator channel readiness state.
 */
static inline bool ac_chan_is_ready(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel)
{
   19048:	b580      	push	{r7, lr}
   1904a:	b084      	sub	sp, #16
   1904c:	af00      	add	r7, sp, #0
   1904e:	6078      	str	r0, [r7, #4]
   19050:	000a      	movs	r2, r1
   19052:	1cfb      	adds	r3, r7, #3
   19054:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
   19056:	687b      	ldr	r3, [r7, #4]
   19058:	681b      	ldr	r3, [r3, #0]
   1905a:	60fb      	str	r3, [r7, #12]

	return (ac_module->STATUSB.reg & (AC_STATUSB_READY0 << (uint8_t)channel));
   1905c:	68fb      	ldr	r3, [r7, #12]
   1905e:	7a5b      	ldrb	r3, [r3, #9]
   19060:	b2db      	uxtb	r3, r3
   19062:	0019      	movs	r1, r3
   19064:	1cfb      	adds	r3, r7, #3
   19066:	781b      	ldrb	r3, [r3, #0]
   19068:	2201      	movs	r2, #1
   1906a:	409a      	lsls	r2, r3
   1906c:	0013      	movs	r3, r2
   1906e:	400b      	ands	r3, r1
   19070:	1e5a      	subs	r2, r3, #1
   19072:	4193      	sbcs	r3, r2
   19074:	b2db      	uxtb	r3, r3
}
   19076:	0018      	movs	r0, r3
   19078:	46bd      	mov	sp, r7
   1907a:	b004      	add	sp, #16
   1907c:	bd80      	pop	{r7, pc}
	...

00019080 <ac_chan_get_status>:
 *  \return Bit mask of comparator channel status flags.
 */
static inline uint8_t ac_chan_get_status(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel)
{
   19080:	b580      	push	{r7, lr}
   19082:	b084      	sub	sp, #16
   19084:	af00      	add	r7, sp, #0
   19086:	6078      	str	r0, [r7, #4]
   19088:	000a      	movs	r2, r1
   1908a:	1cfb      	adds	r3, r7, #3
   1908c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
   1908e:	687b      	ldr	r3, [r7, #4]
   19090:	681b      	ldr	r3, [r3, #0]
   19092:	60bb      	str	r3, [r7, #8]

	uint8_t status_mask = 0;
   19094:	230f      	movs	r3, #15
   19096:	18fb      	adds	r3, r7, r3
   19098:	2200      	movs	r2, #0
   1909a:	701a      	strb	r2, [r3, #0]

	if (ac_module->INTFLAG.reg & (1 << channel)) {
   1909c:	68bb      	ldr	r3, [r7, #8]
   1909e:	799b      	ldrb	r3, [r3, #6]
   190a0:	b2db      	uxtb	r3, r3
   190a2:	001a      	movs	r2, r3
   190a4:	1cfb      	adds	r3, r7, #3
   190a6:	781b      	ldrb	r3, [r3, #0]
   190a8:	411a      	asrs	r2, r3
   190aa:	0013      	movs	r3, r2
   190ac:	2201      	movs	r2, #1
   190ae:	4013      	ands	r3, r2
   190b0:	d003      	beq.n	190ba <ac_chan_get_status+0x3a>
		status_mask = AC_CHAN_STATUS_INTERRUPT_SET;
   190b2:	230f      	movs	r3, #15
   190b4:	18fb      	adds	r3, r7, r3
   190b6:	2208      	movs	r2, #8
   190b8:	701a      	strb	r2, [r3, #0]
	}

	if (ac_chan_is_ready(module_inst, channel) == false) {
   190ba:	1cfb      	adds	r3, r7, #3
   190bc:	781a      	ldrb	r2, [r3, #0]
   190be:	687b      	ldr	r3, [r7, #4]
   190c0:	0011      	movs	r1, r2
   190c2:	0018      	movs	r0, r3
   190c4:	4b1b      	ldr	r3, [pc, #108]	; (19134 <ac_chan_get_status+0xb4>)
   190c6:	4798      	blx	r3
   190c8:	0003      	movs	r3, r0
   190ca:	001a      	movs	r2, r3
   190cc:	2301      	movs	r3, #1
   190ce:	4053      	eors	r3, r2
   190d0:	b2db      	uxtb	r3, r3
   190d2:	2b00      	cmp	r3, #0
   190d4:	d00b      	beq.n	190ee <ac_chan_get_status+0x6e>
		status_mask |= AC_CHAN_STATUS_UNKNOWN;
   190d6:	230f      	movs	r3, #15
   190d8:	18fb      	adds	r3, r7, r3
   190da:	220f      	movs	r2, #15
   190dc:	18ba      	adds	r2, r7, r2
   190de:	7812      	ldrb	r2, [r2, #0]
   190e0:	2101      	movs	r1, #1
   190e2:	430a      	orrs	r2, r1
   190e4:	701a      	strb	r2, [r3, #0]
		return status_mask;
   190e6:	230f      	movs	r3, #15
   190e8:	18fb      	adds	r3, r7, r3
   190ea:	781b      	ldrb	r3, [r3, #0]
   190ec:	e01e      	b.n	1912c <ac_chan_get_status+0xac>
	}

	if (ac_module->STATUSA.reg & (AC_STATUSA_STATE0 << (uint8_t)channel)) {
   190ee:	68bb      	ldr	r3, [r7, #8]
   190f0:	7a1b      	ldrb	r3, [r3, #8]
   190f2:	b2db      	uxtb	r3, r3
   190f4:	001a      	movs	r2, r3
   190f6:	1cfb      	adds	r3, r7, #3
   190f8:	781b      	ldrb	r3, [r3, #0]
   190fa:	411a      	asrs	r2, r3
   190fc:	0013      	movs	r3, r2
   190fe:	2201      	movs	r2, #1
   19100:	4013      	ands	r3, r2
   19102:	d008      	beq.n	19116 <ac_chan_get_status+0x96>
		status_mask |= AC_CHAN_STATUS_POS_ABOVE_NEG;
   19104:	230f      	movs	r3, #15
   19106:	18fb      	adds	r3, r7, r3
   19108:	220f      	movs	r2, #15
   1910a:	18ba      	adds	r2, r7, r2
   1910c:	7812      	ldrb	r2, [r2, #0]
   1910e:	2104      	movs	r1, #4
   19110:	430a      	orrs	r2, r1
   19112:	701a      	strb	r2, [r3, #0]
   19114:	e007      	b.n	19126 <ac_chan_get_status+0xa6>
	} else {
		status_mask |= AC_CHAN_STATUS_NEG_ABOVE_POS;
   19116:	230f      	movs	r3, #15
   19118:	18fb      	adds	r3, r7, r3
   1911a:	220f      	movs	r2, #15
   1911c:	18ba      	adds	r2, r7, r2
   1911e:	7812      	ldrb	r2, [r2, #0]
   19120:	2102      	movs	r1, #2
   19122:	430a      	orrs	r2, r1
   19124:	701a      	strb	r2, [r3, #0]
	}
	return status_mask;
   19126:	230f      	movs	r3, #15
   19128:	18fb      	adds	r3, r7, r3
   1912a:	781b      	ldrb	r3, [r3, #0]
}
   1912c:	0018      	movs	r0, r3
   1912e:	46bd      	mov	sp, r7
   19130:	b004      	add	sp, #16
   19132:	bd80      	pop	{r7, pc}
   19134:	00019049 	.word	0x00019049

00019138 <system_interrupt_enable>:
{
   19138:	b580      	push	{r7, lr}
   1913a:	b082      	sub	sp, #8
   1913c:	af00      	add	r7, sp, #0
   1913e:	0002      	movs	r2, r0
   19140:	1dfb      	adds	r3, r7, #7
   19142:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   19144:	4b06      	ldr	r3, [pc, #24]	; (19160 <system_interrupt_enable+0x28>)
   19146:	1dfa      	adds	r2, r7, #7
   19148:	7812      	ldrb	r2, [r2, #0]
   1914a:	0011      	movs	r1, r2
   1914c:	221f      	movs	r2, #31
   1914e:	400a      	ands	r2, r1
   19150:	2101      	movs	r1, #1
   19152:	4091      	lsls	r1, r2
   19154:	000a      	movs	r2, r1
   19156:	601a      	str	r2, [r3, #0]
}
   19158:	46c0      	nop			; (mov r8, r8)
   1915a:	46bd      	mov	sp, r7
   1915c:	b002      	add	sp, #8
   1915e:	bd80      	pop	{r7, pc}
   19160:	e000e100 	.word	0xe000e100

00019164 <ac_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void ac_enable_callback(
		struct ac_module *const module,
		const enum ac_callback callback_type)
{
   19164:	b580      	push	{r7, lr}
   19166:	b084      	sub	sp, #16
   19168:	af00      	add	r7, sp, #0
   1916a:	6078      	str	r0, [r7, #4]
   1916c:	000a      	movs	r2, r1
   1916e:	1cfb      	adds	r3, r7, #3
   19170:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Set software flag for the callback */
	module->enable_callback_mask |= (1 << callback_type);
   19172:	687b      	ldr	r3, [r7, #4]
   19174:	7e5b      	ldrb	r3, [r3, #25]
   19176:	b25a      	sxtb	r2, r3
   19178:	1cfb      	adds	r3, r7, #3
   1917a:	781b      	ldrb	r3, [r3, #0]
   1917c:	2101      	movs	r1, #1
   1917e:	4099      	lsls	r1, r3
   19180:	000b      	movs	r3, r1
   19182:	b25b      	sxtb	r3, r3
   19184:	4313      	orrs	r3, r2
   19186:	b25b      	sxtb	r3, r3
   19188:	b2da      	uxtb	r2, r3
   1918a:	687b      	ldr	r3, [r7, #4]
   1918c:	765a      	strb	r2, [r3, #25]

	uint32_t inenset_temp = 0;
   1918e:	2300      	movs	r3, #0
   19190:	60fb      	str	r3, [r7, #12]

	switch (callback_type)
   19192:	1cfb      	adds	r3, r7, #3
   19194:	781b      	ldrb	r3, [r3, #0]
   19196:	2b01      	cmp	r3, #1
   19198:	d009      	beq.n	191ae <ac_enable_callback+0x4a>
   1919a:	2b04      	cmp	r3, #4
   1919c:	d00c      	beq.n	191b8 <ac_enable_callback+0x54>
   1919e:	2b00      	cmp	r3, #0
   191a0:	d000      	beq.n	191a4 <ac_enable_callback+0x40>
			inenset_temp |= AC_INTFLAG_WIN1;
			break;
#  endif
#endif
		default:
			break;
   191a2:	e00e      	b.n	191c2 <ac_enable_callback+0x5e>
			inenset_temp |= AC_INTFLAG_COMP0;
   191a4:	68fb      	ldr	r3, [r7, #12]
   191a6:	2201      	movs	r2, #1
   191a8:	4313      	orrs	r3, r2
   191aa:	60fb      	str	r3, [r7, #12]
			break;
   191ac:	e009      	b.n	191c2 <ac_enable_callback+0x5e>
			inenset_temp |= AC_INTFLAG_COMP1;
   191ae:	68fb      	ldr	r3, [r7, #12]
   191b0:	2202      	movs	r2, #2
   191b2:	4313      	orrs	r3, r2
   191b4:	60fb      	str	r3, [r7, #12]
			break;
   191b6:	e004      	b.n	191c2 <ac_enable_callback+0x5e>
			inenset_temp |= AC_INTFLAG_WIN0;
   191b8:	68fb      	ldr	r3, [r7, #12]
   191ba:	2210      	movs	r2, #16
   191bc:	4313      	orrs	r3, r2
   191be:	60fb      	str	r3, [r7, #12]
			break;
   191c0:	46c0      	nop			; (mov r8, r8)
	}

	/* Enable the interrupt for the callback */
	module->hw->INTENSET.reg = inenset_temp;
   191c2:	687b      	ldr	r3, [r7, #4]
   191c4:	681b      	ldr	r3, [r3, #0]
   191c6:	68fa      	ldr	r2, [r7, #12]
   191c8:	b2d2      	uxtb	r2, r2
   191ca:	715a      	strb	r2, [r3, #5]

#if (AC_INST_NUM == 1)
	/* Enable interrupts for AC module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_AC);
   191cc:	2018      	movs	r0, #24
   191ce:	4b03      	ldr	r3, [pc, #12]	; (191dc <ac_enable_callback+0x78>)
   191d0:	4798      	blx	r3
#elif (AC_INST_NUM > 1)
	system_interrupt_enable(_ac_interrupt_get_interrupt_vector(_ac_get_inst_index(module->hw)));
#endif /* (AC_INST_NUM > 1) */
}
   191d2:	46c0      	nop			; (mov r8, r8)
   191d4:	46bd      	mov	sp, r7
   191d6:	b004      	add	sp, #16
   191d8:	bd80      	pop	{r7, pc}
   191da:	46c0      	nop			; (mov r8, r8)
   191dc:	00019139 	.word	0x00019139

000191e0 <system_pinmux_get_group_from_gpio_pin>:
{
   191e0:	b580      	push	{r7, lr}
   191e2:	b084      	sub	sp, #16
   191e4:	af00      	add	r7, sp, #0
   191e6:	0002      	movs	r2, r0
   191e8:	1dfb      	adds	r3, r7, #7
   191ea:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   191ec:	230f      	movs	r3, #15
   191ee:	18fb      	adds	r3, r7, r3
   191f0:	1dfa      	adds	r2, r7, #7
   191f2:	7812      	ldrb	r2, [r2, #0]
   191f4:	09d2      	lsrs	r2, r2, #7
   191f6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   191f8:	230e      	movs	r3, #14
   191fa:	18fb      	adds	r3, r7, r3
   191fc:	1dfa      	adds	r2, r7, #7
   191fe:	7812      	ldrb	r2, [r2, #0]
   19200:	0952      	lsrs	r2, r2, #5
   19202:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   19204:	4b0d      	ldr	r3, [pc, #52]	; (1923c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   19206:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   19208:	230f      	movs	r3, #15
   1920a:	18fb      	adds	r3, r7, r3
   1920c:	781b      	ldrb	r3, [r3, #0]
   1920e:	2b00      	cmp	r3, #0
   19210:	d10f      	bne.n	19232 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   19212:	230f      	movs	r3, #15
   19214:	18fb      	adds	r3, r7, r3
   19216:	781b      	ldrb	r3, [r3, #0]
   19218:	009b      	lsls	r3, r3, #2
   1921a:	2210      	movs	r2, #16
   1921c:	4694      	mov	ip, r2
   1921e:	44bc      	add	ip, r7
   19220:	4463      	add	r3, ip
   19222:	3b08      	subs	r3, #8
   19224:	681a      	ldr	r2, [r3, #0]
   19226:	230e      	movs	r3, #14
   19228:	18fb      	adds	r3, r7, r3
   1922a:	781b      	ldrb	r3, [r3, #0]
   1922c:	01db      	lsls	r3, r3, #7
   1922e:	18d3      	adds	r3, r2, r3
   19230:	e000      	b.n	19234 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   19232:	2300      	movs	r3, #0
}
   19234:	0018      	movs	r0, r3
   19236:	46bd      	mov	sp, r7
   19238:	b004      	add	sp, #16
   1923a:	bd80      	pop	{r7, pc}
   1923c:	41004400 	.word	0x41004400

00019240 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   19240:	b580      	push	{r7, lr}
   19242:	b084      	sub	sp, #16
   19244:	af00      	add	r7, sp, #0
   19246:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   19248:	687b      	ldr	r3, [r7, #4]
   1924a:	681b      	ldr	r3, [r3, #0]
   1924c:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   1924e:	68fb      	ldr	r3, [r7, #12]
   19250:	7e5b      	ldrb	r3, [r3, #25]
   19252:	b2db      	uxtb	r3, r3
   19254:	b25b      	sxtb	r3, r3
   19256:	2b00      	cmp	r3, #0
   19258:	da01      	bge.n	1925e <adc_is_syncing+0x1e>
		return true;
   1925a:	2301      	movs	r3, #1
   1925c:	e000      	b.n	19260 <adc_is_syncing+0x20>
	}

	return false;
   1925e:	2300      	movs	r3, #0
}
   19260:	0018      	movs	r0, r3
   19262:	46bd      	mov	sp, r7
   19264:	b004      	add	sp, #16
   19266:	bd80      	pop	{r7, pc}

00019268 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
   19268:	b580      	push	{r7, lr}
   1926a:	b086      	sub	sp, #24
   1926c:	af00      	add	r7, sp, #0
   1926e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   19270:	687b      	ldr	r3, [r7, #4]
   19272:	681b      	ldr	r3, [r3, #0]
   19274:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
   19276:	693b      	ldr	r3, [r7, #16]
   19278:	7e1b      	ldrb	r3, [r3, #24]
   1927a:	b2db      	uxtb	r3, r3
   1927c:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
   1927e:	2300      	movs	r3, #0
   19280:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
   19282:	68fb      	ldr	r3, [r7, #12]
   19284:	2201      	movs	r2, #1
   19286:	4013      	ands	r3, r2
   19288:	d003      	beq.n	19292 <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
   1928a:	697b      	ldr	r3, [r7, #20]
   1928c:	2201      	movs	r2, #1
   1928e:	4313      	orrs	r3, r2
   19290:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
   19292:	68fb      	ldr	r3, [r7, #12]
   19294:	2204      	movs	r2, #4
   19296:	4013      	ands	r3, r2
   19298:	d003      	beq.n	192a2 <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
   1929a:	697b      	ldr	r3, [r7, #20]
   1929c:	2202      	movs	r2, #2
   1929e:	4313      	orrs	r3, r2
   192a0:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
   192a2:	68fb      	ldr	r3, [r7, #12]
   192a4:	2202      	movs	r2, #2
   192a6:	4013      	ands	r3, r2
   192a8:	d003      	beq.n	192b2 <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
   192aa:	697b      	ldr	r3, [r7, #20]
   192ac:	2204      	movs	r2, #4
   192ae:	4313      	orrs	r3, r2
   192b0:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
   192b2:	697b      	ldr	r3, [r7, #20]
}
   192b4:	0018      	movs	r0, r3
   192b6:	46bd      	mov	sp, r7
   192b8:	b006      	add	sp, #24
   192ba:	bd80      	pop	{r7, pc}

000192bc <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
   192bc:	b580      	push	{r7, lr}
   192be:	b084      	sub	sp, #16
   192c0:	af00      	add	r7, sp, #0
   192c2:	6078      	str	r0, [r7, #4]
   192c4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   192c6:	687b      	ldr	r3, [r7, #4]
   192c8:	681b      	ldr	r3, [r3, #0]
   192ca:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
   192cc:	2300      	movs	r3, #0
   192ce:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
   192d0:	683b      	ldr	r3, [r7, #0]
   192d2:	2201      	movs	r2, #1
   192d4:	4013      	ands	r3, r2
   192d6:	d003      	beq.n	192e0 <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
   192d8:	68fb      	ldr	r3, [r7, #12]
   192da:	2201      	movs	r2, #1
   192dc:	4313      	orrs	r3, r2
   192de:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
   192e0:	683b      	ldr	r3, [r7, #0]
   192e2:	2202      	movs	r2, #2
   192e4:	4013      	ands	r3, r2
   192e6:	d003      	beq.n	192f0 <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
   192e8:	68fb      	ldr	r3, [r7, #12]
   192ea:	2204      	movs	r2, #4
   192ec:	4313      	orrs	r3, r2
   192ee:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
   192f0:	683b      	ldr	r3, [r7, #0]
   192f2:	2204      	movs	r2, #4
   192f4:	4013      	ands	r3, r2
   192f6:	d003      	beq.n	19300 <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
   192f8:	68fb      	ldr	r3, [r7, #12]
   192fa:	2202      	movs	r2, #2
   192fc:	4313      	orrs	r3, r2
   192fe:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
   19300:	68fb      	ldr	r3, [r7, #12]
   19302:	b2da      	uxtb	r2, r3
   19304:	68bb      	ldr	r3, [r7, #8]
   19306:	761a      	strb	r2, [r3, #24]
}
   19308:	46c0      	nop			; (mov r8, r8)
   1930a:	46bd      	mov	sp, r7
   1930c:	b004      	add	sp, #16
   1930e:	bd80      	pop	{r7, pc}

00019310 <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
   19310:	b580      	push	{r7, lr}
   19312:	b084      	sub	sp, #16
   19314:	af00      	add	r7, sp, #0
   19316:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   19318:	687b      	ldr	r3, [r7, #4]
   1931a:	681b      	ldr	r3, [r3, #0]
   1931c:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   1931e:	46c0      	nop			; (mov r8, r8)
   19320:	687b      	ldr	r3, [r7, #4]
   19322:	0018      	movs	r0, r3
   19324:	4b10      	ldr	r3, [pc, #64]	; (19368 <adc_enable+0x58>)
   19326:	4798      	blx	r3
   19328:	1e03      	subs	r3, r0, #0
   1932a:	d1f9      	bne.n	19320 <adc_enable+0x10>
	system_interrupt_enable(_adc_interrupt_get_interrupt_vector(
			_adc_get_inst_index(adc_module)));
#   elif (SAMC20)
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC0);
#	else
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
   1932c:	2017      	movs	r0, #23
   1932e:	4b0f      	ldr	r3, [pc, #60]	; (1936c <adc_enable+0x5c>)
   19330:	4798      	blx	r3
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
   19332:	68fb      	ldr	r3, [r7, #12]
   19334:	220f      	movs	r2, #15
   19336:	759a      	strb	r2, [r3, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
   19338:	68fb      	ldr	r3, [r7, #12]
   1933a:	220f      	movs	r2, #15
   1933c:	761a      	strb	r2, [r3, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
   1933e:	68fb      	ldr	r3, [r7, #12]
   19340:	781b      	ldrb	r3, [r3, #0]
   19342:	b2db      	uxtb	r3, r3
   19344:	2202      	movs	r2, #2
   19346:	4313      	orrs	r3, r2
   19348:	b2da      	uxtb	r2, r3
   1934a:	68fb      	ldr	r3, [r7, #12]
   1934c:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
   1934e:	46c0      	nop			; (mov r8, r8)
   19350:	687b      	ldr	r3, [r7, #4]
   19352:	0018      	movs	r0, r3
   19354:	4b04      	ldr	r3, [pc, #16]	; (19368 <adc_enable+0x58>)
   19356:	4798      	blx	r3
   19358:	1e03      	subs	r3, r0, #0
   1935a:	d1f9      	bne.n	19350 <adc_enable+0x40>
		/* Wait for synchronization */
	}
	return STATUS_OK;
   1935c:	2300      	movs	r3, #0
}
   1935e:	0018      	movs	r0, r3
   19360:	46bd      	mov	sp, r7
   19362:	b004      	add	sp, #16
   19364:	bd80      	pop	{r7, pc}
   19366:	46c0      	nop			; (mov r8, r8)
   19368:	00019241 	.word	0x00019241
   1936c:	00019139 	.word	0x00019139

00019370 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   19370:	b580      	push	{r7, lr}
   19372:	b084      	sub	sp, #16
   19374:	af00      	add	r7, sp, #0
   19376:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   19378:	687b      	ldr	r3, [r7, #4]
   1937a:	681b      	ldr	r3, [r3, #0]
   1937c:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   1937e:	46c0      	nop			; (mov r8, r8)
   19380:	687b      	ldr	r3, [r7, #4]
   19382:	0018      	movs	r0, r3
   19384:	4b0b      	ldr	r3, [pc, #44]	; (193b4 <adc_start_conversion+0x44>)
   19386:	4798      	blx	r3
   19388:	1e03      	subs	r3, r0, #0
   1938a:	d1f9      	bne.n	19380 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   1938c:	68fb      	ldr	r3, [r7, #12]
   1938e:	7b1b      	ldrb	r3, [r3, #12]
   19390:	b2db      	uxtb	r3, r3
   19392:	2202      	movs	r2, #2
   19394:	4313      	orrs	r3, r2
   19396:	b2da      	uxtb	r2, r3
   19398:	68fb      	ldr	r3, [r7, #12]
   1939a:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   1939c:	46c0      	nop			; (mov r8, r8)
   1939e:	687b      	ldr	r3, [r7, #4]
   193a0:	0018      	movs	r0, r3
   193a2:	4b04      	ldr	r3, [pc, #16]	; (193b4 <adc_start_conversion+0x44>)
   193a4:	4798      	blx	r3
   193a6:	1e03      	subs	r3, r0, #0
   193a8:	d1f9      	bne.n	1939e <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   193aa:	46c0      	nop			; (mov r8, r8)
   193ac:	46bd      	mov	sp, r7
   193ae:	b004      	add	sp, #16
   193b0:	bd80      	pop	{r7, pc}
   193b2:	46c0      	nop			; (mov r8, r8)
   193b4:	00019241 	.word	0x00019241

000193b8 <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
   193b8:	b580      	push	{r7, lr}
   193ba:	b084      	sub	sp, #16
   193bc:	af00      	add	r7, sp, #0
   193be:	6078      	str	r0, [r7, #4]
   193c0:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
   193c2:	687b      	ldr	r3, [r7, #4]
   193c4:	0018      	movs	r0, r3
   193c6:	4b18      	ldr	r3, [pc, #96]	; (19428 <adc_read+0x70>)
   193c8:	4798      	blx	r3
   193ca:	0002      	movs	r2, r0
   193cc:	2301      	movs	r3, #1
   193ce:	4013      	ands	r3, r2
   193d0:	d101      	bne.n	193d6 <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
   193d2:	2305      	movs	r3, #5
   193d4:	e023      	b.n	1941e <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
   193d6:	687b      	ldr	r3, [r7, #4]
   193d8:	681b      	ldr	r3, [r3, #0]
   193da:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMHA1) || (SAMHA0) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
   193dc:	46c0      	nop			; (mov r8, r8)
   193de:	687b      	ldr	r3, [r7, #4]
   193e0:	0018      	movs	r0, r3
   193e2:	4b12      	ldr	r3, [pc, #72]	; (1942c <adc_read+0x74>)
   193e4:	4798      	blx	r3
   193e6:	1e03      	subs	r3, r0, #0
   193e8:	d1f9      	bne.n	193de <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
   193ea:	68fb      	ldr	r3, [r7, #12]
   193ec:	8b5b      	ldrh	r3, [r3, #26]
   193ee:	b29a      	uxth	r2, r3
   193f0:	683b      	ldr	r3, [r7, #0]
   193f2:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
   193f4:	687b      	ldr	r3, [r7, #4]
   193f6:	2101      	movs	r1, #1
   193f8:	0018      	movs	r0, r3
   193fa:	4b0d      	ldr	r3, [pc, #52]	; (19430 <adc_read+0x78>)
   193fc:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
   193fe:	687b      	ldr	r3, [r7, #4]
   19400:	0018      	movs	r0, r3
   19402:	4b09      	ldr	r3, [pc, #36]	; (19428 <adc_read+0x70>)
   19404:	4798      	blx	r3
   19406:	0002      	movs	r2, r0
   19408:	2304      	movs	r3, #4
   1940a:	4013      	ands	r3, r2
   1940c:	d006      	beq.n	1941c <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
   1940e:	687b      	ldr	r3, [r7, #4]
   19410:	2104      	movs	r1, #4
   19412:	0018      	movs	r0, r3
   19414:	4b06      	ldr	r3, [pc, #24]	; (19430 <adc_read+0x78>)
   19416:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
   19418:	231e      	movs	r3, #30
   1941a:	e000      	b.n	1941e <adc_read+0x66>
	}

	return STATUS_OK;
   1941c:	2300      	movs	r3, #0
}
   1941e:	0018      	movs	r0, r3
   19420:	46bd      	mov	sp, r7
   19422:	b004      	add	sp, #16
   19424:	bd80      	pop	{r7, pc}
   19426:	46c0      	nop			; (mov r8, r8)
   19428:	00019269 	.word	0x00019269
   1942c:	00019241 	.word	0x00019241
   19430:	000192bd 	.word	0x000192bd

00019434 <adc_set_positive_input>:
 * \param[in] positive_input  Positive input pin
 */
static inline void adc_set_positive_input(
		struct adc_module *const module_inst,
		const enum adc_positive_input positive_input)
{
   19434:	b580      	push	{r7, lr}
   19436:	b084      	sub	sp, #16
   19438:	af00      	add	r7, sp, #0
   1943a:	6078      	str	r0, [r7, #4]
   1943c:	000a      	movs	r2, r1
   1943e:	1cfb      	adds	r3, r7, #3
   19440:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   19442:	687b      	ldr	r3, [r7, #4]
   19444:	681b      	ldr	r3, [r3, #0]
   19446:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   19448:	46c0      	nop			; (mov r8, r8)
   1944a:	687b      	ldr	r3, [r7, #4]
   1944c:	0018      	movs	r0, r3
   1944e:	4b0c      	ldr	r3, [pc, #48]	; (19480 <adc_set_positive_input+0x4c>)
   19450:	4798      	blx	r3
   19452:	1e03      	subs	r3, r0, #0
   19454:	d1f9      	bne.n	1944a <adc_set_positive_input+0x16>
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
   19456:	68fb      	ldr	r3, [r7, #12]
   19458:	691b      	ldr	r3, [r3, #16]
   1945a:	221f      	movs	r2, #31
   1945c:	4393      	bics	r3, r2
   1945e:	001a      	movs	r2, r3
   19460:	1cfb      	adds	r3, r7, #3
   19462:	781b      	ldrb	r3, [r3, #0]
   19464:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
   19466:	68fb      	ldr	r3, [r7, #12]
   19468:	611a      	str	r2, [r3, #16]
			(positive_input);

	while (adc_is_syncing(module_inst)) {
   1946a:	46c0      	nop			; (mov r8, r8)
   1946c:	687b      	ldr	r3, [r7, #4]
   1946e:	0018      	movs	r0, r3
   19470:	4b03      	ldr	r3, [pc, #12]	; (19480 <adc_set_positive_input+0x4c>)
   19472:	4798      	blx	r3
   19474:	1e03      	subs	r3, r0, #0
   19476:	d1f9      	bne.n	1946c <adc_set_positive_input+0x38>
		/* Wait for synchronization */
	}
}
   19478:	46c0      	nop			; (mov r8, r8)
   1947a:	46bd      	mov	sp, r7
   1947c:	b004      	add	sp, #16
   1947e:	bd80      	pop	{r7, pc}
   19480:	00019241 	.word	0x00019241

00019484 <adc_enable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to enable
 */
static inline void adc_enable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   19484:	b580      	push	{r7, lr}
   19486:	b084      	sub	sp, #16
   19488:	af00      	add	r7, sp, #0
   1948a:	6078      	str	r0, [r7, #4]
   1948c:	000a      	movs	r2, r1
   1948e:	1cfb      	adds	r3, r7, #3
   19490:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   19492:	687b      	ldr	r3, [r7, #4]
   19494:	681b      	ldr	r3, [r3, #0]
   19496:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENSET.reg = interrupt;
   19498:	68fb      	ldr	r3, [r7, #12]
   1949a:	1cfa      	adds	r2, r7, #3
   1949c:	7812      	ldrb	r2, [r2, #0]
   1949e:	75da      	strb	r2, [r3, #23]
}
   194a0:	46c0      	nop			; (mov r8, r8)
   194a2:	46bd      	mov	sp, r7
   194a4:	b004      	add	sp, #16
   194a6:	bd80      	pop	{r7, pc}

000194a8 <adc_enable_callback>:
 *
 */
static inline void adc_enable_callback(
		struct adc_module *const module,
		enum adc_callback callback_type)
{
   194a8:	b580      	push	{r7, lr}
   194aa:	b082      	sub	sp, #8
   194ac:	af00      	add	r7, sp, #0
   194ae:	6078      	str	r0, [r7, #4]
   194b0:	000a      	movs	r2, r1
   194b2:	1cfb      	adds	r3, r7, #3
   194b4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback_mask |= (1 << callback_type);
   194b6:	687b      	ldr	r3, [r7, #4]
   194b8:	7edb      	ldrb	r3, [r3, #27]
   194ba:	b25a      	sxtb	r2, r3
   194bc:	1cfb      	adds	r3, r7, #3
   194be:	781b      	ldrb	r3, [r3, #0]
   194c0:	2101      	movs	r1, #1
   194c2:	4099      	lsls	r1, r3
   194c4:	000b      	movs	r3, r1
   194c6:	b25b      	sxtb	r3, r3
   194c8:	4313      	orrs	r3, r2
   194ca:	b25b      	sxtb	r3, r3
   194cc:	b2da      	uxtb	r2, r3
   194ce:	687b      	ldr	r3, [r7, #4]
   194d0:	76da      	strb	r2, [r3, #27]

	/* Enable window interrupt if this is a window callback */
	if (callback_type == ADC_CALLBACK_WINDOW) {
   194d2:	1cfb      	adds	r3, r7, #3
   194d4:	781b      	ldrb	r3, [r3, #0]
   194d6:	2b01      	cmp	r3, #1
   194d8:	d104      	bne.n	194e4 <adc_enable_callback+0x3c>
		adc_enable_interrupt(module, ADC_INTERRUPT_WINDOW);
   194da:	687b      	ldr	r3, [r7, #4]
   194dc:	2104      	movs	r1, #4
   194de:	0018      	movs	r0, r3
   194e0:	4b07      	ldr	r3, [pc, #28]	; (19500 <adc_enable_callback+0x58>)
   194e2:	4798      	blx	r3
	}
	/* Enable overrun interrupt if error callback is registered */
	if (callback_type == ADC_CALLBACK_ERROR) {
   194e4:	1cfb      	adds	r3, r7, #3
   194e6:	781b      	ldrb	r3, [r3, #0]
   194e8:	2b02      	cmp	r3, #2
   194ea:	d104      	bne.n	194f6 <adc_enable_callback+0x4e>
		adc_enable_interrupt(module, ADC_INTERRUPT_OVERRUN);
   194ec:	687b      	ldr	r3, [r7, #4]
   194ee:	2102      	movs	r1, #2
   194f0:	0018      	movs	r0, r3
   194f2:	4b03      	ldr	r3, [pc, #12]	; (19500 <adc_enable_callback+0x58>)
   194f4:	4798      	blx	r3
	}
}
   194f6:	46c0      	nop			; (mov r8, r8)
   194f8:	46bd      	mov	sp, r7
   194fa:	b002      	add	sp, #8
   194fc:	bd80      	pop	{r7, pc}
   194fe:	46c0      	nop			; (mov r8, r8)
   19500:	00019485 	.word	0x00019485

00019504 <port_get_group_from_gpio_pin>:
{
   19504:	b580      	push	{r7, lr}
   19506:	b082      	sub	sp, #8
   19508:	af00      	add	r7, sp, #0
   1950a:	0002      	movs	r2, r0
   1950c:	1dfb      	adds	r3, r7, #7
   1950e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   19510:	1dfb      	adds	r3, r7, #7
   19512:	781b      	ldrb	r3, [r3, #0]
   19514:	0018      	movs	r0, r3
   19516:	4b03      	ldr	r3, [pc, #12]	; (19524 <port_get_group_from_gpio_pin+0x20>)
   19518:	4798      	blx	r3
   1951a:	0003      	movs	r3, r0
}
   1951c:	0018      	movs	r0, r3
   1951e:	46bd      	mov	sp, r7
   19520:	b002      	add	sp, #8
   19522:	bd80      	pop	{r7, pc}
   19524:	000191e1 	.word	0x000191e1

00019528 <port_get_config_defaults>:
{
   19528:	b580      	push	{r7, lr}
   1952a:	b082      	sub	sp, #8
   1952c:	af00      	add	r7, sp, #0
   1952e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   19530:	687b      	ldr	r3, [r7, #4]
   19532:	2200      	movs	r2, #0
   19534:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   19536:	687b      	ldr	r3, [r7, #4]
   19538:	2201      	movs	r2, #1
   1953a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1953c:	687b      	ldr	r3, [r7, #4]
   1953e:	2200      	movs	r2, #0
   19540:	709a      	strb	r2, [r3, #2]
}
   19542:	46c0      	nop			; (mov r8, r8)
   19544:	46bd      	mov	sp, r7
   19546:	b002      	add	sp, #8
   19548:	bd80      	pop	{r7, pc}
	...

0001954c <port_pin_get_input_level>:
{
   1954c:	b580      	push	{r7, lr}
   1954e:	b084      	sub	sp, #16
   19550:	af00      	add	r7, sp, #0
   19552:	0002      	movs	r2, r0
   19554:	1dfb      	adds	r3, r7, #7
   19556:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   19558:	1dfb      	adds	r3, r7, #7
   1955a:	781b      	ldrb	r3, [r3, #0]
   1955c:	0018      	movs	r0, r3
   1955e:	4b0b      	ldr	r3, [pc, #44]	; (1958c <port_pin_get_input_level+0x40>)
   19560:	4798      	blx	r3
   19562:	0003      	movs	r3, r0
   19564:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   19566:	1dfb      	adds	r3, r7, #7
   19568:	781b      	ldrb	r3, [r3, #0]
   1956a:	221f      	movs	r2, #31
   1956c:	4013      	ands	r3, r2
   1956e:	2201      	movs	r2, #1
   19570:	409a      	lsls	r2, r3
   19572:	0013      	movs	r3, r2
   19574:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
   19576:	68fb      	ldr	r3, [r7, #12]
   19578:	6a1b      	ldr	r3, [r3, #32]
   1957a:	68ba      	ldr	r2, [r7, #8]
   1957c:	4013      	ands	r3, r2
   1957e:	1e5a      	subs	r2, r3, #1
   19580:	4193      	sbcs	r3, r2
   19582:	b2db      	uxtb	r3, r3
}
   19584:	0018      	movs	r0, r3
   19586:	46bd      	mov	sp, r7
   19588:	b004      	add	sp, #16
   1958a:	bd80      	pop	{r7, pc}
   1958c:	00019505 	.word	0x00019505

00019590 <port_pin_set_output_level>:
{
   19590:	b580      	push	{r7, lr}
   19592:	b084      	sub	sp, #16
   19594:	af00      	add	r7, sp, #0
   19596:	0002      	movs	r2, r0
   19598:	1dfb      	adds	r3, r7, #7
   1959a:	701a      	strb	r2, [r3, #0]
   1959c:	1dbb      	adds	r3, r7, #6
   1959e:	1c0a      	adds	r2, r1, #0
   195a0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   195a2:	1dfb      	adds	r3, r7, #7
   195a4:	781b      	ldrb	r3, [r3, #0]
   195a6:	0018      	movs	r0, r3
   195a8:	4b0d      	ldr	r3, [pc, #52]	; (195e0 <port_pin_set_output_level+0x50>)
   195aa:	4798      	blx	r3
   195ac:	0003      	movs	r3, r0
   195ae:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   195b0:	1dfb      	adds	r3, r7, #7
   195b2:	781b      	ldrb	r3, [r3, #0]
   195b4:	221f      	movs	r2, #31
   195b6:	4013      	ands	r3, r2
   195b8:	2201      	movs	r2, #1
   195ba:	409a      	lsls	r2, r3
   195bc:	0013      	movs	r3, r2
   195be:	60bb      	str	r3, [r7, #8]
	if (level) {
   195c0:	1dbb      	adds	r3, r7, #6
   195c2:	781b      	ldrb	r3, [r3, #0]
   195c4:	2b00      	cmp	r3, #0
   195c6:	d003      	beq.n	195d0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   195c8:	68fb      	ldr	r3, [r7, #12]
   195ca:	68ba      	ldr	r2, [r7, #8]
   195cc:	619a      	str	r2, [r3, #24]
}
   195ce:	e002      	b.n	195d6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   195d0:	68fb      	ldr	r3, [r7, #12]
   195d2:	68ba      	ldr	r2, [r7, #8]
   195d4:	615a      	str	r2, [r3, #20]
}
   195d6:	46c0      	nop			; (mov r8, r8)
   195d8:	46bd      	mov	sp, r7
   195da:	b004      	add	sp, #16
   195dc:	bd80      	pop	{r7, pc}
   195de:	46c0      	nop			; (mov r8, r8)
   195e0:	00019505 	.word	0x00019505

000195e4 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   195e4:	b580      	push	{r7, lr}
   195e6:	b084      	sub	sp, #16
   195e8:	af00      	add	r7, sp, #0
   195ea:	0002      	movs	r2, r0
   195ec:	1dfb      	adds	r3, r7, #7
   195ee:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   195f0:	230f      	movs	r3, #15
   195f2:	18fb      	adds	r3, r7, r3
   195f4:	1dfa      	adds	r2, r7, #7
   195f6:	7812      	ldrb	r2, [r2, #0]
   195f8:	0952      	lsrs	r2, r2, #5
   195fa:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   195fc:	230f      	movs	r3, #15
   195fe:	18fb      	adds	r3, r7, r3
   19600:	781b      	ldrb	r3, [r3, #0]
   19602:	2b00      	cmp	r3, #0
   19604:	d10c      	bne.n	19620 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   19606:	4b09      	ldr	r3, [pc, #36]	; (1962c <_extint_get_eic_from_channel+0x48>)
   19608:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   1960a:	230f      	movs	r3, #15
   1960c:	18fb      	adds	r3, r7, r3
   1960e:	781b      	ldrb	r3, [r3, #0]
   19610:	009b      	lsls	r3, r3, #2
   19612:	2210      	movs	r2, #16
   19614:	4694      	mov	ip, r2
   19616:	44bc      	add	ip, r7
   19618:	4463      	add	r3, ip
   1961a:	3b08      	subs	r3, #8
   1961c:	681b      	ldr	r3, [r3, #0]
   1961e:	e000      	b.n	19622 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   19620:	2300      	movs	r3, #0
	}
}
   19622:	0018      	movs	r0, r3
   19624:	46bd      	mov	sp, r7
   19626:	b004      	add	sp, #16
   19628:	bd80      	pop	{r7, pc}
   1962a:	46c0      	nop			; (mov r8, r8)
   1962c:	40001800 	.word	0x40001800

00019630 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   19630:	b580      	push	{r7, lr}
   19632:	b084      	sub	sp, #16
   19634:	af00      	add	r7, sp, #0
   19636:	0002      	movs	r2, r0
   19638:	1dfb      	adds	r3, r7, #7
   1963a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   1963c:	1dfb      	adds	r3, r7, #7
   1963e:	781b      	ldrb	r3, [r3, #0]
   19640:	0018      	movs	r0, r3
   19642:	4b09      	ldr	r3, [pc, #36]	; (19668 <extint_chan_clear_detected+0x38>)
   19644:	4798      	blx	r3
   19646:	0003      	movs	r3, r0
   19648:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   1964a:	1dfb      	adds	r3, r7, #7
   1964c:	781b      	ldrb	r3, [r3, #0]
   1964e:	221f      	movs	r2, #31
   19650:	4013      	ands	r3, r2
   19652:	2201      	movs	r2, #1
   19654:	409a      	lsls	r2, r3
   19656:	0013      	movs	r3, r2
   19658:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   1965a:	68fb      	ldr	r3, [r7, #12]
   1965c:	68ba      	ldr	r2, [r7, #8]
   1965e:	611a      	str	r2, [r3, #16]
}
   19660:	46c0      	nop			; (mov r8, r8)
   19662:	46bd      	mov	sp, r7
   19664:	b004      	add	sp, #16
   19666:	bd80      	pop	{r7, pc}
   19668:	000195e5 	.word	0x000195e5

0001966c <rtc_count_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_count_get_config_defaults(
		struct rtc_count_config *const config)
{
   1966c:	b580      	push	{r7, lr}
   1966e:	b084      	sub	sp, #16
   19670:	af00      	add	r7, sp, #0
   19672:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
   19674:	687b      	ldr	r3, [r7, #4]
   19676:	22a0      	movs	r2, #160	; 0xa0
   19678:	0112      	lsls	r2, r2, #4
   1967a:	801a      	strh	r2, [r3, #0]
	config->mode                = RTC_COUNT_MODE_32BIT;
   1967c:	687b      	ldr	r3, [r7, #4]
   1967e:	2201      	movs	r2, #1
   19680:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
   19682:	687b      	ldr	r3, [r7, #4]
   19684:	2200      	movs	r2, #0
   19686:	70da      	strb	r2, [r3, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   19688:	687b      	ldr	r3, [r7, #4]
   1968a:	2200      	movs	r2, #0
   1968c:	711a      	strb	r2, [r3, #4]
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   1968e:	230f      	movs	r3, #15
   19690:	18fb      	adds	r3, r7, r3
   19692:	2200      	movs	r2, #0
   19694:	701a      	strb	r2, [r3, #0]
   19696:	e00e      	b.n	196b6 <rtc_count_get_config_defaults+0x4a>
		config->compare_values[i] = 0;
   19698:	230f      	movs	r3, #15
   1969a:	18fb      	adds	r3, r7, r3
   1969c:	781a      	ldrb	r2, [r3, #0]
   1969e:	687b      	ldr	r3, [r7, #4]
   196a0:	3202      	adds	r2, #2
   196a2:	0092      	lsls	r2, r2, #2
   196a4:	2100      	movs	r1, #0
   196a6:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   196a8:	230f      	movs	r3, #15
   196aa:	18fb      	adds	r3, r7, r3
   196ac:	781a      	ldrb	r2, [r3, #0]
   196ae:	230f      	movs	r3, #15
   196b0:	18fb      	adds	r3, r7, r3
   196b2:	3201      	adds	r2, #1
   196b4:	701a      	strb	r2, [r3, #0]
   196b6:	230f      	movs	r3, #15
   196b8:	18fb      	adds	r3, r7, r3
   196ba:	781b      	ldrb	r3, [r3, #0]
   196bc:	2b01      	cmp	r3, #1
   196be:	d9eb      	bls.n	19698 <rtc_count_get_config_defaults+0x2c>
	}
}
   196c0:	46c0      	nop			; (mov r8, r8)
   196c2:	46bd      	mov	sp, r7
   196c4:	b004      	add	sp, #16
   196c6:	bd80      	pop	{r7, pc}

000196c8 <rtc_count_enable_events>:
 *  \param[in] events    Struct containing flags of events to enable
 */
static inline void rtc_count_enable_events(
		struct rtc_module *const module,
		struct rtc_count_events *const events)
{
   196c8:	b580      	push	{r7, lr}
   196ca:	b086      	sub	sp, #24
   196cc:	af00      	add	r7, sp, #0
   196ce:	6078      	str	r0, [r7, #4]
   196d0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   196d2:	687b      	ldr	r3, [r7, #4]
   196d4:	681b      	ldr	r3, [r3, #0]
   196d6:	60fb      	str	r3, [r7, #12]

	uint32_t event_mask = 0;
   196d8:	2300      	movs	r3, #0
   196da:	617b      	str	r3, [r7, #20]

	/* Check if the user has requested an overflow event */
	if (events->generate_event_on_overflow) {
   196dc:	683b      	ldr	r3, [r7, #0]
   196de:	781b      	ldrb	r3, [r3, #0]
   196e0:	2b00      	cmp	r3, #0
   196e2:	d004      	beq.n	196ee <rtc_count_enable_events+0x26>
		event_mask |= RTC_MODE0_EVCTRL_OVFEO;
   196e4:	697b      	ldr	r3, [r7, #20]
   196e6:	2280      	movs	r2, #128	; 0x80
   196e8:	0212      	lsls	r2, r2, #8
   196ea:	4313      	orrs	r3, r2
   196ec:	617b      	str	r3, [r7, #20]
	}

	/* Check if the user has requested any compare events */
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   196ee:	2313      	movs	r3, #19
   196f0:	18fb      	adds	r3, r7, r3
   196f2:	2200      	movs	r2, #0
   196f4:	701a      	strb	r2, [r3, #0]
   196f6:	e01c      	b.n	19732 <rtc_count_enable_events+0x6a>
		if (events->generate_event_on_compare[i]) {
   196f8:	2313      	movs	r3, #19
   196fa:	18fb      	adds	r3, r7, r3
   196fc:	781b      	ldrb	r3, [r3, #0]
   196fe:	683a      	ldr	r2, [r7, #0]
   19700:	18d3      	adds	r3, r2, r3
   19702:	785b      	ldrb	r3, [r3, #1]
   19704:	2b00      	cmp	r3, #0
   19706:	d00d      	beq.n	19724 <rtc_count_enable_events+0x5c>
			event_mask |= RTC_MODE0_EVCTRL_CMPEO(1 << i);
   19708:	2313      	movs	r3, #19
   1970a:	18fb      	adds	r3, r7, r3
   1970c:	781b      	ldrb	r3, [r3, #0]
   1970e:	2201      	movs	r2, #1
   19710:	409a      	lsls	r2, r3
   19712:	0013      	movs	r3, r2
   19714:	021b      	lsls	r3, r3, #8
   19716:	001a      	movs	r2, r3
   19718:	2380      	movs	r3, #128	; 0x80
   1971a:	005b      	lsls	r3, r3, #1
   1971c:	4013      	ands	r3, r2
   1971e:	697a      	ldr	r2, [r7, #20]
   19720:	4313      	orrs	r3, r2
   19722:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   19724:	2313      	movs	r3, #19
   19726:	18fb      	adds	r3, r7, r3
   19728:	781a      	ldrb	r2, [r3, #0]
   1972a:	2313      	movs	r3, #19
   1972c:	18fb      	adds	r3, r7, r3
   1972e:	3201      	adds	r2, #1
   19730:	701a      	strb	r2, [r3, #0]
   19732:	2313      	movs	r3, #19
   19734:	18fb      	adds	r3, r7, r3
   19736:	781b      	ldrb	r3, [r3, #0]
   19738:	2b01      	cmp	r3, #1
   1973a:	d9dd      	bls.n	196f8 <rtc_count_enable_events+0x30>
		}
	}

	/* Check if the user has requested any periodic events */
	for (uint8_t i = 0; i < 8; i++) {
   1973c:	2312      	movs	r3, #18
   1973e:	18fb      	adds	r3, r7, r3
   19740:	2200      	movs	r2, #0
   19742:	701a      	strb	r2, [r3, #0]
   19744:	e01a      	b.n	1977c <rtc_count_enable_events+0xb4>
		if (events->generate_event_on_periodic[i]) {
   19746:	2312      	movs	r3, #18
   19748:	18fb      	adds	r3, r7, r3
   1974a:	781b      	ldrb	r3, [r3, #0]
   1974c:	683a      	ldr	r2, [r7, #0]
   1974e:	18d3      	adds	r3, r2, r3
   19750:	78db      	ldrb	r3, [r3, #3]
   19752:	2b00      	cmp	r3, #0
   19754:	d00b      	beq.n	1976e <rtc_count_enable_events+0xa6>
			event_mask |= RTC_MODE0_EVCTRL_PEREO(1 << i);
   19756:	2312      	movs	r3, #18
   19758:	18fb      	adds	r3, r7, r3
   1975a:	781b      	ldrb	r3, [r3, #0]
   1975c:	2201      	movs	r2, #1
   1975e:	409a      	lsls	r2, r3
   19760:	0013      	movs	r3, r2
   19762:	001a      	movs	r2, r3
   19764:	23ff      	movs	r3, #255	; 0xff
   19766:	4013      	ands	r3, r2
   19768:	697a      	ldr	r2, [r7, #20]
   1976a:	4313      	orrs	r3, r2
   1976c:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < 8; i++) {
   1976e:	2312      	movs	r3, #18
   19770:	18fb      	adds	r3, r7, r3
   19772:	781a      	ldrb	r2, [r3, #0]
   19774:	2312      	movs	r3, #18
   19776:	18fb      	adds	r3, r7, r3
   19778:	3201      	adds	r2, #1
   1977a:	701a      	strb	r2, [r3, #0]
   1977c:	2312      	movs	r3, #18
   1977e:	18fb      	adds	r3, r7, r3
   19780:	781b      	ldrb	r3, [r3, #0]
   19782:	2b07      	cmp	r3, #7
   19784:	d9df      	bls.n	19746 <rtc_count_enable_events+0x7e>
		event_mask |= RTC_MODE0_EVCTRL_TAMPEVEI;
	}
#endif

	/* Enable given event(s). */
	rtc_module->MODE0.EVCTRL.reg |= event_mask;
   19786:	68fb      	ldr	r3, [r7, #12]
   19788:	889b      	ldrh	r3, [r3, #4]
   1978a:	b29a      	uxth	r2, r3
   1978c:	697b      	ldr	r3, [r7, #20]
   1978e:	b29b      	uxth	r3, r3
   19790:	4313      	orrs	r3, r2
   19792:	b29a      	uxth	r2, r3
   19794:	68fb      	ldr	r3, [r7, #12]
   19796:	809a      	strh	r2, [r3, #4]
}
   19798:	46c0      	nop			; (mov r8, r8)
   1979a:	46bd      	mov	sp, r7
   1979c:	b006      	add	sp, #24
   1979e:	bd80      	pop	{r7, pc}

000197a0 <readOverHeadWaterSensorState>:
simEventTemp[9]		: lost AC power in 1 phase						A
*/


void readOverHeadWaterSensorState(bool *olow,bool *ohigh)
{
   197a0:	b580      	push	{r7, lr}
   197a2:	b082      	sub	sp, #8
   197a4:	af00      	add	r7, sp, #0
   197a6:	6078      	str	r0, [r7, #4]
   197a8:	6039      	str	r1, [r7, #0]
	*olow = port_pin_get_input_level(OVERHEAD_TANK_LL_PIN);
   197aa:	200d      	movs	r0, #13
   197ac:	4b08      	ldr	r3, [pc, #32]	; (197d0 <readOverHeadWaterSensorState+0x30>)
   197ae:	4798      	blx	r3
   197b0:	0003      	movs	r3, r0
   197b2:	001a      	movs	r2, r3
   197b4:	687b      	ldr	r3, [r7, #4]
   197b6:	701a      	strb	r2, [r3, #0]
	//*omid = port_pin_get_input_level(OVERHEAD_TANK_ML_PIN);
	*ohigh = port_pin_get_input_level(OVERHEAD_TANK_HL_PIN);
   197b8:	202f      	movs	r0, #47	; 0x2f
   197ba:	4b05      	ldr	r3, [pc, #20]	; (197d0 <readOverHeadWaterSensorState+0x30>)
   197bc:	4798      	blx	r3
   197be:	0003      	movs	r3, r0
   197c0:	001a      	movs	r2, r3
   197c2:	683b      	ldr	r3, [r7, #0]
   197c4:	701a      	strb	r2, [r3, #0]
}
   197c6:	46c0      	nop			; (mov r8, r8)
   197c8:	46bd      	mov	sp, r7
   197ca:	b002      	add	sp, #8
   197cc:	bd80      	pop	{r7, pc}
   197ce:	46c0      	nop			; (mov r8, r8)
   197d0:	0001954d 	.word	0x0001954d

000197d4 <updateOverheadLevel>:

void updateOverheadLevel(uint8_t level)
{
   197d4:	b580      	push	{r7, lr}
   197d6:	b082      	sub	sp, #8
   197d8:	af00      	add	r7, sp, #0
   197da:	0002      	movs	r2, r0
   197dc:	1dfb      	adds	r3, r7, #7
   197de:	701a      	strb	r2, [r3, #0]
	overheadLevel=level;
   197e0:	4b03      	ldr	r3, [pc, #12]	; (197f0 <updateOverheadLevel+0x1c>)
   197e2:	1dfa      	adds	r2, r7, #7
   197e4:	7812      	ldrb	r2, [r2, #0]
   197e6:	701a      	strb	r2, [r3, #0]
}
   197e8:	46c0      	nop			; (mov r8, r8)
   197ea:	46bd      	mov	sp, r7
   197ec:	b002      	add	sp, #8
   197ee:	bd80      	pop	{r7, pc}
   197f0:	20000790 	.word	0x20000790

000197f4 <getOverHeadWaterSensorState>:

uint8_t getOverHeadWaterSensorState(void)
{
   197f4:	b580      	push	{r7, lr}
   197f6:	b082      	sub	sp, #8
   197f8:	af00      	add	r7, sp, #0
	bool olow,omid,ohigh;
	readOverHeadWaterSensorState(&olow,&ohigh);
   197fa:	1d7a      	adds	r2, r7, #5
   197fc:	1dbb      	adds	r3, r7, #6
   197fe:	0011      	movs	r1, r2
   19800:	0018      	movs	r0, r3
   19802:	4b11      	ldr	r3, [pc, #68]	; (19848 <getOverHeadWaterSensorState+0x54>)
   19804:	4798      	blx	r3
	uint8_t ans=0;
   19806:	1dfb      	adds	r3, r7, #7
   19808:	2200      	movs	r2, #0
   1980a:	701a      	strb	r2, [r3, #0]
	if(!olow)
   1980c:	1dbb      	adds	r3, r7, #6
   1980e:	781b      	ldrb	r3, [r3, #0]
   19810:	2201      	movs	r2, #1
   19812:	4053      	eors	r3, r2
   19814:	b2db      	uxtb	r3, r3
   19816:	2b00      	cmp	r3, #0
   19818:	d010      	beq.n	1983c <getOverHeadWaterSensorState+0x48>
	{
		ans++;
   1981a:	1dfb      	adds	r3, r7, #7
   1981c:	781a      	ldrb	r2, [r3, #0]
   1981e:	1dfb      	adds	r3, r7, #7
   19820:	3201      	adds	r2, #1
   19822:	701a      	strb	r2, [r3, #0]
		//if(!omid)
		{
			//ans++;
			if (!ohigh)
   19824:	1d7b      	adds	r3, r7, #5
   19826:	781b      	ldrb	r3, [r3, #0]
   19828:	2201      	movs	r2, #1
   1982a:	4053      	eors	r3, r2
   1982c:	b2db      	uxtb	r3, r3
   1982e:	2b00      	cmp	r3, #0
   19830:	d004      	beq.n	1983c <getOverHeadWaterSensorState+0x48>
			{
				ans++;
   19832:	1dfb      	adds	r3, r7, #7
   19834:	781a      	ldrb	r2, [r3, #0]
   19836:	1dfb      	adds	r3, r7, #7
   19838:	3201      	adds	r2, #1
   1983a:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return ans;
   1983c:	1dfb      	adds	r3, r7, #7
   1983e:	781b      	ldrb	r3, [r3, #0]
}
   19840:	0018      	movs	r0, r3
   19842:	46bd      	mov	sp, r7
   19844:	b002      	add	sp, #8
   19846:	bd80      	pop	{r7, pc}
   19848:	000197a1 	.word	0x000197a1

0001984c <overHeadWaterStatusOnCall>:

void overHeadWaterStatusOnCall(bool current)
{
   1984c:	b590      	push	{r4, r7, lr}
   1984e:	b085      	sub	sp, #20
   19850:	af00      	add	r7, sp, #0
   19852:	0002      	movs	r2, r0
   19854:	1dfb      	adds	r3, r7, #7
   19856:	701a      	strb	r2, [r3, #0]
	uint8_t temp = getOverHeadWaterSensorState();
   19858:	230f      	movs	r3, #15
   1985a:	18fc      	adds	r4, r7, r3
   1985c:	4b15      	ldr	r3, [pc, #84]	; (198b4 <overHeadWaterStatusOnCall+0x68>)
   1985e:	4798      	blx	r3
   19860:	0003      	movs	r3, r0
   19862:	7023      	strb	r3, [r4, #0]
	if(current)
   19864:	1dfb      	adds	r3, r7, #7
   19866:	781b      	ldrb	r3, [r3, #0]
   19868:	2b00      	cmp	r3, #0
   1986a:	d004      	beq.n	19876 <overHeadWaterStatusOnCall+0x2a>
	temp = overheadLevel;
   1986c:	230f      	movs	r3, #15
   1986e:	18fb      	adds	r3, r7, r3
   19870:	4a11      	ldr	r2, [pc, #68]	; (198b8 <overHeadWaterStatusOnCall+0x6c>)
   19872:	7812      	ldrb	r2, [r2, #0]
   19874:	701a      	strb	r2, [r3, #0]
	if(temp == OVERHEADHIGHLEVEL)
   19876:	230f      	movs	r3, #15
   19878:	18fb      	adds	r3, r7, r3
   1987a:	781b      	ldrb	r3, [r3, #0]
   1987c:	2b02      	cmp	r3, #2
   1987e:	d103      	bne.n	19888 <overHeadWaterStatusOnCall+0x3c>
	{
		setMotorMGRResponse('V');
   19880:	2056      	movs	r0, #86	; 0x56
   19882:	4b0e      	ldr	r3, [pc, #56]	; (198bc <overHeadWaterStatusOnCall+0x70>)
   19884:	4798      	blx	r3
	}
	else if (temp == OVERHEADCRITICALLEVEL)
	{
		setMotorMGRResponse('W');
	}
}
   19886:	e010      	b.n	198aa <overHeadWaterStatusOnCall+0x5e>
	else if(temp == OVERHEADMIDLEVEL)
   19888:	230f      	movs	r3, #15
   1988a:	18fb      	adds	r3, r7, r3
   1988c:	781b      	ldrb	r3, [r3, #0]
   1988e:	2b01      	cmp	r3, #1
   19890:	d103      	bne.n	1989a <overHeadWaterStatusOnCall+0x4e>
		setMotorMGRResponse('X');
   19892:	2058      	movs	r0, #88	; 0x58
   19894:	4b09      	ldr	r3, [pc, #36]	; (198bc <overHeadWaterStatusOnCall+0x70>)
   19896:	4798      	blx	r3
}
   19898:	e007      	b.n	198aa <overHeadWaterStatusOnCall+0x5e>
	else if (temp == OVERHEADCRITICALLEVEL)
   1989a:	230f      	movs	r3, #15
   1989c:	18fb      	adds	r3, r7, r3
   1989e:	781b      	ldrb	r3, [r3, #0]
   198a0:	2b00      	cmp	r3, #0
   198a2:	d102      	bne.n	198aa <overHeadWaterStatusOnCall+0x5e>
		setMotorMGRResponse('W');
   198a4:	2057      	movs	r0, #87	; 0x57
   198a6:	4b05      	ldr	r3, [pc, #20]	; (198bc <overHeadWaterStatusOnCall+0x70>)
   198a8:	4798      	blx	r3
}
   198aa:	46c0      	nop			; (mov r8, r8)
   198ac:	46bd      	mov	sp, r7
   198ae:	b005      	add	sp, #20
   198b0:	bd90      	pop	{r4, r7, pc}
   198b2:	46c0      	nop			; (mov r8, r8)
   198b4:	000197f5 	.word	0x000197f5
   198b8:	20000790 	.word	0x20000790
   198bc:	00014d31 	.word	0x00014d31

000198c0 <readWaterSensorState>:

void readWaterSensorState(bool *low,bool *mid,bool *high)
{
   198c0:	b580      	push	{r7, lr}
   198c2:	b084      	sub	sp, #16
   198c4:	af00      	add	r7, sp, #0
   198c6:	60f8      	str	r0, [r7, #12]
   198c8:	60b9      	str	r1, [r7, #8]
   198ca:	607a      	str	r2, [r7, #4]
	*low = port_pin_get_input_level(UNDERGRUND_TANK_LL_PIN);
   198cc:	2037      	movs	r0, #55	; 0x37
   198ce:	4b0c      	ldr	r3, [pc, #48]	; (19900 <readWaterSensorState+0x40>)
   198d0:	4798      	blx	r3
   198d2:	0003      	movs	r3, r0
   198d4:	001a      	movs	r2, r3
   198d6:	68fb      	ldr	r3, [r7, #12]
   198d8:	701a      	strb	r2, [r3, #0]
	*mid = port_pin_get_input_level(UNDERGRUND_TANK_ML_PIN);
   198da:	200f      	movs	r0, #15
   198dc:	4b08      	ldr	r3, [pc, #32]	; (19900 <readWaterSensorState+0x40>)
   198de:	4798      	blx	r3
   198e0:	0003      	movs	r3, r0
   198e2:	001a      	movs	r2, r3
   198e4:	68bb      	ldr	r3, [r7, #8]
   198e6:	701a      	strb	r2, [r3, #0]
	*high = port_pin_get_input_level(UNDERGRUND_TANK_HL_PIN);
   198e8:	200e      	movs	r0, #14
   198ea:	4b05      	ldr	r3, [pc, #20]	; (19900 <readWaterSensorState+0x40>)
   198ec:	4798      	blx	r3
   198ee:	0003      	movs	r3, r0
   198f0:	001a      	movs	r2, r3
   198f2:	687b      	ldr	r3, [r7, #4]
   198f4:	701a      	strb	r2, [r3, #0]
}
   198f6:	46c0      	nop			; (mov r8, r8)
   198f8:	46bd      	mov	sp, r7
   198fa:	b004      	add	sp, #16
   198fc:	bd80      	pop	{r7, pc}
   198fe:	46c0      	nop			; (mov r8, r8)
   19900:	0001954d 	.word	0x0001954d

00019904 <updateUndergroundLevel>:

void updateUndergroundLevel(uint8_t level)
{
   19904:	b580      	push	{r7, lr}
   19906:	b082      	sub	sp, #8
   19908:	af00      	add	r7, sp, #0
   1990a:	0002      	movs	r2, r0
   1990c:	1dfb      	adds	r3, r7, #7
   1990e:	701a      	strb	r2, [r3, #0]
	undergroundLevel=level;
   19910:	4b03      	ldr	r3, [pc, #12]	; (19920 <updateUndergroundLevel+0x1c>)
   19912:	1dfa      	adds	r2, r7, #7
   19914:	7812      	ldrb	r2, [r2, #0]
   19916:	701a      	strb	r2, [r3, #0]
}
   19918:	46c0      	nop			; (mov r8, r8)
   1991a:	46bd      	mov	sp, r7
   1991c:	b002      	add	sp, #8
   1991e:	bd80      	pop	{r7, pc}
   19920:	20000858 	.word	0x20000858

00019924 <getWaterSensorState>:

uint8_t getWaterSensorState(void)
{
   19924:	b580      	push	{r7, lr}
   19926:	b082      	sub	sp, #8
   19928:	af00      	add	r7, sp, #0
	bool l,m,h;
	readWaterSensorState(&l,&m,&h);
   1992a:	1d3a      	adds	r2, r7, #4
   1992c:	1d79      	adds	r1, r7, #5
   1992e:	1dbb      	adds	r3, r7, #6
   19930:	0018      	movs	r0, r3
   19932:	4b17      	ldr	r3, [pc, #92]	; (19990 <getWaterSensorState+0x6c>)
   19934:	4798      	blx	r3
	uint8_t ans=0;
   19936:	1dfb      	adds	r3, r7, #7
   19938:	2200      	movs	r2, #0
   1993a:	701a      	strb	r2, [r3, #0]

	if(!l)
   1993c:	1dbb      	adds	r3, r7, #6
   1993e:	781b      	ldrb	r3, [r3, #0]
   19940:	2201      	movs	r2, #1
   19942:	4053      	eors	r3, r2
   19944:	b2db      	uxtb	r3, r3
   19946:	2b00      	cmp	r3, #0
   19948:	d01c      	beq.n	19984 <getWaterSensorState+0x60>
	{
		ans++;
   1994a:	1dfb      	adds	r3, r7, #7
   1994c:	781a      	ldrb	r2, [r3, #0]
   1994e:	1dfb      	adds	r3, r7, #7
   19950:	3201      	adds	r2, #1
   19952:	701a      	strb	r2, [r3, #0]
		if(!m)
   19954:	1d7b      	adds	r3, r7, #5
   19956:	781b      	ldrb	r3, [r3, #0]
   19958:	2201      	movs	r2, #1
   1995a:	4053      	eors	r3, r2
   1995c:	b2db      	uxtb	r3, r3
   1995e:	2b00      	cmp	r3, #0
   19960:	d010      	beq.n	19984 <getWaterSensorState+0x60>
		{
			ans++;
   19962:	1dfb      	adds	r3, r7, #7
   19964:	781a      	ldrb	r2, [r3, #0]
   19966:	1dfb      	adds	r3, r7, #7
   19968:	3201      	adds	r2, #1
   1996a:	701a      	strb	r2, [r3, #0]
			if(!h)
   1996c:	1d3b      	adds	r3, r7, #4
   1996e:	781b      	ldrb	r3, [r3, #0]
   19970:	2201      	movs	r2, #1
   19972:	4053      	eors	r3, r2
   19974:	b2db      	uxtb	r3, r3
   19976:	2b00      	cmp	r3, #0
   19978:	d004      	beq.n	19984 <getWaterSensorState+0x60>
			{
				ans++;
   1997a:	1dfb      	adds	r3, r7, #7
   1997c:	781a      	ldrb	r2, [r3, #0]
   1997e:	1dfb      	adds	r3, r7, #7
   19980:	3201      	adds	r2, #1
   19982:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return ans;
   19984:	1dfb      	adds	r3, r7, #7
   19986:	781b      	ldrb	r3, [r3, #0]
}
   19988:	0018      	movs	r0, r3
   1998a:	46bd      	mov	sp, r7
   1998c:	b002      	add	sp, #8
   1998e:	bd80      	pop	{r7, pc}
   19990:	000198c1 	.word	0x000198c1

00019994 <waterStatusOnCall>:

void waterStatusOnCall(bool current)
{
   19994:	b590      	push	{r4, r7, lr}
   19996:	b085      	sub	sp, #20
   19998:	af00      	add	r7, sp, #0
   1999a:	0002      	movs	r2, r0
   1999c:	1dfb      	adds	r3, r7, #7
   1999e:	701a      	strb	r2, [r3, #0]
	uint8_t temp = getWaterSensorState();
   199a0:	230f      	movs	r3, #15
   199a2:	18fc      	adds	r4, r7, r3
   199a4:	4b19      	ldr	r3, [pc, #100]	; (19a0c <waterStatusOnCall+0x78>)
   199a6:	4798      	blx	r3
   199a8:	0003      	movs	r3, r0
   199aa:	7023      	strb	r3, [r4, #0]
	if(current)
   199ac:	1dfb      	adds	r3, r7, #7
   199ae:	781b      	ldrb	r3, [r3, #0]
   199b0:	2b00      	cmp	r3, #0
   199b2:	d004      	beq.n	199be <waterStatusOnCall+0x2a>
	temp = undergroundLevel;
   199b4:	230f      	movs	r3, #15
   199b6:	18fb      	adds	r3, r7, r3
   199b8:	4a15      	ldr	r2, [pc, #84]	; (19a10 <waterStatusOnCall+0x7c>)
   199ba:	7812      	ldrb	r2, [r2, #0]
   199bc:	701a      	strb	r2, [r3, #0]

	if(temp==CRITICALLEVEL)
   199be:	230f      	movs	r3, #15
   199c0:	18fb      	adds	r3, r7, r3
   199c2:	781b      	ldrb	r3, [r3, #0]
   199c4:	2b00      	cmp	r3, #0
   199c6:	d103      	bne.n	199d0 <waterStatusOnCall+0x3c>
	{
		setMotorMGRResponse('T');	//water level insufficient
   199c8:	2054      	movs	r0, #84	; 0x54
   199ca:	4b12      	ldr	r3, [pc, #72]	; (19a14 <waterStatusOnCall+0x80>)
   199cc:	4798      	blx	r3
	}
	else if(temp==HIGHLEVEL)
	{
		setMotorMGRResponse('E');	//well is full
	}
}
   199ce:	e019      	b.n	19a04 <waterStatusOnCall+0x70>
	else if(temp==LOWLEVEL)
   199d0:	230f      	movs	r3, #15
   199d2:	18fb      	adds	r3, r7, r3
   199d4:	781b      	ldrb	r3, [r3, #0]
   199d6:	2b01      	cmp	r3, #1
   199d8:	d103      	bne.n	199e2 <waterStatusOnCall+0x4e>
		setMotorMGRResponse('Q');	//water below 2nd sensor
   199da:	2051      	movs	r0, #81	; 0x51
   199dc:	4b0d      	ldr	r3, [pc, #52]	; (19a14 <waterStatusOnCall+0x80>)
   199de:	4798      	blx	r3
}
   199e0:	e010      	b.n	19a04 <waterStatusOnCall+0x70>
	else if(temp==MIDLEVEL)
   199e2:	230f      	movs	r3, #15
   199e4:	18fb      	adds	r3, r7, r3
   199e6:	781b      	ldrb	r3, [r3, #0]
   199e8:	2b02      	cmp	r3, #2
   199ea:	d103      	bne.n	199f4 <waterStatusOnCall+0x60>
		setMotorMGRResponse('R');	//water below 1st sensor
   199ec:	2052      	movs	r0, #82	; 0x52
   199ee:	4b09      	ldr	r3, [pc, #36]	; (19a14 <waterStatusOnCall+0x80>)
   199f0:	4798      	blx	r3
}
   199f2:	e007      	b.n	19a04 <waterStatusOnCall+0x70>
	else if(temp==HIGHLEVEL)
   199f4:	230f      	movs	r3, #15
   199f6:	18fb      	adds	r3, r7, r3
   199f8:	781b      	ldrb	r3, [r3, #0]
   199fa:	2b03      	cmp	r3, #3
   199fc:	d102      	bne.n	19a04 <waterStatusOnCall+0x70>
		setMotorMGRResponse('E');	//well is full
   199fe:	2045      	movs	r0, #69	; 0x45
   19a00:	4b04      	ldr	r3, [pc, #16]	; (19a14 <waterStatusOnCall+0x80>)
   19a02:	4798      	blx	r3
}
   19a04:	46c0      	nop			; (mov r8, r8)
   19a06:	46bd      	mov	sp, r7
   19a08:	b005      	add	sp, #20
   19a0a:	bd90      	pop	{r4, r7, pc}
   19a0c:	00019925 	.word	0x00019925
   19a10:	20000858 	.word	0x20000858
   19a14:	00014d31 	.word	0x00014d31

00019a18 <Water_Level_Task>:

static void Water_Level_Task(void *params)
{
   19a18:	b590      	push	{r4, r7, lr}
   19a1a:	b085      	sub	sp, #20
   19a1c:	af00      	add	r7, sp, #0
   19a1e:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	
	struct port_config water_level_sensor_pin_config;
	port_get_config_defaults(&water_level_sensor_pin_config);
   19a20:	2308      	movs	r3, #8
   19a22:	18fb      	adds	r3, r7, r3
   19a24:	0018      	movs	r0, r3
   19a26:	4b8b      	ldr	r3, [pc, #556]	; (19c54 <Water_Level_Task+0x23c>)
   19a28:	4798      	blx	r3
	
	water_level_sensor_pin_config.direction = PORT_PIN_DIR_INPUT;
   19a2a:	2308      	movs	r3, #8
   19a2c:	18fb      	adds	r3, r7, r3
   19a2e:	2200      	movs	r2, #0
   19a30:	701a      	strb	r2, [r3, #0]
	water_level_sensor_pin_config.input_pull = PORT_PIN_PULL_UP;
   19a32:	2308      	movs	r3, #8
   19a34:	18fb      	adds	r3, r7, r3
   19a36:	2201      	movs	r2, #1
   19a38:	705a      	strb	r2, [r3, #1]
	
	port_pin_set_config(OVERHEAD_TANK_HL_PIN,	&water_level_sensor_pin_config);
   19a3a:	2308      	movs	r3, #8
   19a3c:	18fb      	adds	r3, r7, r3
   19a3e:	0019      	movs	r1, r3
   19a40:	202f      	movs	r0, #47	; 0x2f
   19a42:	4b85      	ldr	r3, [pc, #532]	; (19c58 <Water_Level_Task+0x240>)
   19a44:	4798      	blx	r3
	port_pin_set_config(OVERHEAD_TANK_ML_PIN,	&water_level_sensor_pin_config);
   19a46:	2308      	movs	r3, #8
   19a48:	18fb      	adds	r3, r7, r3
   19a4a:	0019      	movs	r1, r3
   19a4c:	200c      	movs	r0, #12
   19a4e:	4b82      	ldr	r3, [pc, #520]	; (19c58 <Water_Level_Task+0x240>)
   19a50:	4798      	blx	r3
	port_pin_set_config(OVERHEAD_TANK_LL_PIN,	&water_level_sensor_pin_config);
   19a52:	2308      	movs	r3, #8
   19a54:	18fb      	adds	r3, r7, r3
   19a56:	0019      	movs	r1, r3
   19a58:	200d      	movs	r0, #13
   19a5a:	4b7f      	ldr	r3, [pc, #508]	; (19c58 <Water_Level_Task+0x240>)
   19a5c:	4798      	blx	r3
	port_pin_set_config(UNDERGRUND_TANK_HL_PIN, &water_level_sensor_pin_config);
   19a5e:	2308      	movs	r3, #8
   19a60:	18fb      	adds	r3, r7, r3
   19a62:	0019      	movs	r1, r3
   19a64:	200e      	movs	r0, #14
   19a66:	4b7c      	ldr	r3, [pc, #496]	; (19c58 <Water_Level_Task+0x240>)
   19a68:	4798      	blx	r3
	port_pin_set_config(UNDERGRUND_TANK_ML_PIN, &water_level_sensor_pin_config);
   19a6a:	2308      	movs	r3, #8
   19a6c:	18fb      	adds	r3, r7, r3
   19a6e:	0019      	movs	r1, r3
   19a70:	200f      	movs	r0, #15
   19a72:	4b79      	ldr	r3, [pc, #484]	; (19c58 <Water_Level_Task+0x240>)
   19a74:	4798      	blx	r3
	port_pin_set_config(UNDERGRUND_TANK_LL_PIN, &water_level_sensor_pin_config);
   19a76:	2308      	movs	r3, #8
   19a78:	18fb      	adds	r3, r7, r3
   19a7a:	0019      	movs	r1, r3
   19a7c:	2037      	movs	r0, #55	; 0x37
   19a7e:	4b76      	ldr	r3, [pc, #472]	; (19c58 <Water_Level_Task+0x240>)
   19a80:	4798      	blx	r3
	
	undergroundLevel = MIDLEVEL;
   19a82:	4b76      	ldr	r3, [pc, #472]	; (19c5c <Water_Level_Task+0x244>)
   19a84:	2202      	movs	r2, #2
   19a86:	701a      	strb	r2, [r3, #0]
	tempUndergroundLevel = MIDLEVEL;
   19a88:	4b75      	ldr	r3, [pc, #468]	; (19c60 <Water_Level_Task+0x248>)
   19a8a:	2202      	movs	r2, #2
   19a8c:	701a      	strb	r2, [r3, #0]
	
	overheadLevel = OVERHEADMIDLEVEL;
   19a8e:	4b75      	ldr	r3, [pc, #468]	; (19c64 <Water_Level_Task+0x24c>)
   19a90:	2201      	movs	r2, #1
   19a92:	701a      	strb	r2, [r3, #0]
	tempOverheadLevel = OVERHEADMIDLEVEL;
   19a94:	4b74      	ldr	r3, [pc, #464]	; (19c68 <Water_Level_Task+0x250>)
   19a96:	2201      	movs	r2, #1
   19a98:	701a      	strb	r2, [r3, #0]
	tempWaterEventCount = 0;
   19a9a:	4b74      	ldr	r3, [pc, #464]	; (19c6c <Water_Level_Task+0x254>)
   19a9c:	2200      	movs	r2, #0
   19a9e:	701a      	strb	r2, [r3, #0]
	
	uint8_t j = 0;
   19aa0:	230f      	movs	r3, #15
   19aa2:	18fb      	adds	r3, r7, r3
   19aa4:	2200      	movs	r2, #0
   19aa6:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_GP)
   19aa8:	4b71      	ldr	r3, [pc, #452]	; (19c70 <Water_Level_Task+0x258>)
   19aaa:	791b      	ldrb	r3, [r3, #4]
   19aac:	2b00      	cmp	r3, #0
   19aae:	d004      	beq.n	19aba <Water_Level_Task+0xa2>
	{
		j = 19;
   19ab0:	230f      	movs	r3, #15
   19ab2:	18fb      	adds	r3, r7, r3
   19ab4:	2213      	movs	r2, #19
   19ab6:	701a      	strb	r2, [r3, #0]
   19ab8:	e003      	b.n	19ac2 <Water_Level_Task+0xaa>
	}
	else
	{
		j= 17;
   19aba:	230f      	movs	r3, #15
   19abc:	18fb      	adds	r3, r7, r3
   19abe:	2211      	movs	r2, #17
   19ac0:	701a      	strb	r2, [r3, #0]
	}
	for (uint8_t i=12;i<j;i++)
   19ac2:	230e      	movs	r3, #14
   19ac4:	18fb      	adds	r3, r7, r3
   19ac6:	220c      	movs	r2, #12
   19ac8:	701a      	strb	r2, [r3, #0]
   19aca:	e00c      	b.n	19ae6 <Water_Level_Task+0xce>
	{
		simEventTemp[i] = true;
   19acc:	230e      	movs	r3, #14
   19ace:	18fb      	adds	r3, r7, r3
   19ad0:	781b      	ldrb	r3, [r3, #0]
   19ad2:	4a68      	ldr	r2, [pc, #416]	; (19c74 <Water_Level_Task+0x25c>)
   19ad4:	2101      	movs	r1, #1
   19ad6:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=12;i<j;i++)
   19ad8:	230e      	movs	r3, #14
   19ada:	18fb      	adds	r3, r7, r3
   19adc:	781a      	ldrb	r2, [r3, #0]
   19ade:	230e      	movs	r3, #14
   19ae0:	18fb      	adds	r3, r7, r3
   19ae2:	3201      	adds	r2, #1
   19ae4:	701a      	strb	r2, [r3, #0]
   19ae6:	230e      	movs	r3, #14
   19ae8:	18fa      	adds	r2, r7, r3
   19aea:	230f      	movs	r3, #15
   19aec:	18fb      	adds	r3, r7, r3
   19aee:	7812      	ldrb	r2, [r2, #0]
   19af0:	781b      	ldrb	r3, [r3, #0]
   19af2:	429a      	cmp	r2, r3
   19af4:	d3ea      	bcc.n	19acc <Water_Level_Task+0xb4>
	}
	simEvent[12] = 'I';
   19af6:	4b60      	ldr	r3, [pc, #384]	; (19c78 <Water_Level_Task+0x260>)
   19af8:	2249      	movs	r2, #73	; 0x49
   19afa:	731a      	strb	r2, [r3, #12]
	simEvent[13] = 'D';
   19afc:	4b5e      	ldr	r3, [pc, #376]	; (19c78 <Water_Level_Task+0x260>)
   19afe:	2244      	movs	r2, #68	; 0x44
   19b00:	735a      	strb	r2, [r3, #13]
	simEvent[14] = 'H';
   19b02:	4b5d      	ldr	r3, [pc, #372]	; (19c78 <Water_Level_Task+0x260>)
   19b04:	2248      	movs	r2, #72	; 0x48
   19b06:	739a      	strb	r2, [r3, #14]
	simEvent[15] = 'E';
   19b08:	4b5b      	ldr	r3, [pc, #364]	; (19c78 <Water_Level_Task+0x260>)
   19b0a:	2245      	movs	r2, #69	; 0x45
   19b0c:	73da      	strb	r2, [r3, #15]
	simEvent[16] = 'Z';
   19b0e:	4b5a      	ldr	r3, [pc, #360]	; (19c78 <Water_Level_Task+0x260>)
   19b10:	225a      	movs	r2, #90	; 0x5a
   19b12:	741a      	strb	r2, [r3, #16]
	if (factory_settings_parameter_struct.ENABLE_GP)
   19b14:	4b56      	ldr	r3, [pc, #344]	; (19c70 <Water_Level_Task+0x258>)
   19b16:	791b      	ldrb	r3, [r3, #4]
   19b18:	2b00      	cmp	r3, #0
   19b1a:	d005      	beq.n	19b28 <Water_Level_Task+0x110>
	{
		simEvent[17] = 'V';
   19b1c:	4b56      	ldr	r3, [pc, #344]	; (19c78 <Water_Level_Task+0x260>)
   19b1e:	2256      	movs	r2, #86	; 0x56
   19b20:	745a      	strb	r2, [r3, #17]
		simEvent[18] = 'W';
   19b22:	4b55      	ldr	r3, [pc, #340]	; (19c78 <Water_Level_Task+0x260>)
   19b24:	2257      	movs	r2, #87	; 0x57
   19b26:	749a      	strb	r2, [r3, #18]
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
   19b28:	4b51      	ldr	r3, [pc, #324]	; (19c70 <Water_Level_Task+0x258>)
   19b2a:	78db      	ldrb	r3, [r3, #3]
   19b2c:	2b00      	cmp	r3, #0
   19b2e:	d00b      	beq.n	19b48 <Water_Level_Task+0x130>
	{
		m2mEvent_arr[0] = ME_CLEARED;
   19b30:	4b52      	ldr	r3, [pc, #328]	; (19c7c <Water_Level_Task+0x264>)
   19b32:	2200      	movs	r2, #0
   19b34:	701a      	strb	r2, [r3, #0]
		m2mEvent_arr[1] = ME_CLEARED;
   19b36:	4b51      	ldr	r3, [pc, #324]	; (19c7c <Water_Level_Task+0x264>)
   19b38:	2200      	movs	r2, #0
   19b3a:	705a      	strb	r2, [r3, #1]
		
		mapTable[0] = 13;
   19b3c:	4b50      	ldr	r3, [pc, #320]	; (19c80 <Water_Level_Task+0x268>)
   19b3e:	220d      	movs	r2, #13
   19b40:	701a      	strb	r2, [r3, #0]
		mapTable[1] = 15;
   19b42:	4b4f      	ldr	r3, [pc, #316]	; (19c80 <Water_Level_Task+0x268>)
   19b44:	220f      	movs	r2, #15
   19b46:	705a      	strb	r2, [r3, #1]
	}
	
	
	for (;;)
	{
		bool result=false;
   19b48:	230c      	movs	r3, #12
   19b4a:	18fb      	adds	r3, r7, r3
   19b4c:	2200      	movs	r2, #0
   19b4e:	701a      	strb	r2, [r3, #0]
		
		if (!(user_settings_parameter_struct.waterBypassAddress))
   19b50:	4b4c      	ldr	r3, [pc, #304]	; (19c84 <Water_Level_Task+0x26c>)
   19b52:	7fdb      	ldrb	r3, [r3, #31]
   19b54:	2b00      	cmp	r3, #0
   19b56:	d000      	beq.n	19b5a <Water_Level_Task+0x142>
   19b58:	e073      	b.n	19c42 <Water_Level_Task+0x22a>
		{
			uint8_t uLevel;
			uint8_t oLevel;
			uLevel = getWaterSensorState();
   19b5a:	230b      	movs	r3, #11
   19b5c:	18fc      	adds	r4, r7, r3
   19b5e:	4b4a      	ldr	r3, [pc, #296]	; (19c88 <Water_Level_Task+0x270>)
   19b60:	4798      	blx	r3
   19b62:	0003      	movs	r3, r0
   19b64:	7023      	strb	r3, [r4, #0]
			
			if (factory_settings_parameter_struct.ENABLE_GP)
   19b66:	4b42      	ldr	r3, [pc, #264]	; (19c70 <Water_Level_Task+0x258>)
   19b68:	791b      	ldrb	r3, [r3, #4]
   19b6a:	2b00      	cmp	r3, #0
   19b6c:	d005      	beq.n	19b7a <Water_Level_Task+0x162>
			{
				oLevel =getOverHeadWaterSensorState();
   19b6e:	230d      	movs	r3, #13
   19b70:	18fc      	adds	r4, r7, r3
   19b72:	4b46      	ldr	r3, [pc, #280]	; (19c8c <Water_Level_Task+0x274>)
   19b74:	4798      	blx	r3
   19b76:	0003      	movs	r3, r0
   19b78:	7023      	strb	r3, [r4, #0]
			}
			
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
   19b7a:	4b3d      	ldr	r3, [pc, #244]	; (19c70 <Water_Level_Task+0x258>)
   19b7c:	791b      	ldrb	r3, [r3, #4]
   19b7e:	2b01      	cmp	r3, #1
   19b80:	d125      	bne.n	19bce <Water_Level_Task+0x1b6>
			((uLevel!=undergroundLevel && uLevel==tempUndergroundLevel) ||(oLevel!=overheadLevel && oLevel==tempOverheadLevel)):
   19b82:	4b36      	ldr	r3, [pc, #216]	; (19c5c <Water_Level_Task+0x244>)
   19b84:	781b      	ldrb	r3, [r3, #0]
   19b86:	220b      	movs	r2, #11
   19b88:	18ba      	adds	r2, r7, r2
   19b8a:	7812      	ldrb	r2, [r2, #0]
   19b8c:	429a      	cmp	r2, r3
   19b8e:	d006      	beq.n	19b9e <Water_Level_Task+0x186>
   19b90:	4b33      	ldr	r3, [pc, #204]	; (19c60 <Water_Level_Task+0x248>)
   19b92:	781b      	ldrb	r3, [r3, #0]
   19b94:	220b      	movs	r2, #11
   19b96:	18ba      	adds	r2, r7, r2
   19b98:	7812      	ldrb	r2, [r2, #0]
   19b9a:	429a      	cmp	r2, r3
   19b9c:	d00f      	beq.n	19bbe <Water_Level_Task+0x1a6>
   19b9e:	4b31      	ldr	r3, [pc, #196]	; (19c64 <Water_Level_Task+0x24c>)
   19ba0:	781b      	ldrb	r3, [r3, #0]
   19ba2:	b2db      	uxtb	r3, r3
   19ba4:	220d      	movs	r2, #13
   19ba6:	18ba      	adds	r2, r7, r2
   19ba8:	7812      	ldrb	r2, [r2, #0]
   19baa:	429a      	cmp	r2, r3
   19bac:	d009      	beq.n	19bc2 <Water_Level_Task+0x1aa>
   19bae:	4b2e      	ldr	r3, [pc, #184]	; (19c68 <Water_Level_Task+0x250>)
   19bb0:	781b      	ldrb	r3, [r3, #0]
   19bb2:	b2db      	uxtb	r3, r3
   19bb4:	220d      	movs	r2, #13
   19bb6:	18ba      	adds	r2, r7, r2
   19bb8:	7812      	ldrb	r2, [r2, #0]
   19bba:	429a      	cmp	r2, r3
   19bbc:	d101      	bne.n	19bc2 <Water_Level_Task+0x1aa>
   19bbe:	2301      	movs	r3, #1
   19bc0:	e000      	b.n	19bc4 <Water_Level_Task+0x1ac>
   19bc2:	2300      	movs	r3, #0
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
   19bc4:	1c1a      	adds	r2, r3, #0
   19bc6:	2301      	movs	r3, #1
   19bc8:	4013      	ands	r3, r2
   19bca:	b2db      	uxtb	r3, r3
   19bcc:	e014      	b.n	19bf8 <Water_Level_Task+0x1e0>
			((uLevel!=undergroundLevel && uLevel==tempUndergroundLevel))
   19bce:	4b23      	ldr	r3, [pc, #140]	; (19c5c <Water_Level_Task+0x244>)
   19bd0:	781b      	ldrb	r3, [r3, #0]
   19bd2:	220b      	movs	r2, #11
   19bd4:	18ba      	adds	r2, r7, r2
   19bd6:	7812      	ldrb	r2, [r2, #0]
   19bd8:	429a      	cmp	r2, r3
   19bda:	d008      	beq.n	19bee <Water_Level_Task+0x1d6>
   19bdc:	4b20      	ldr	r3, [pc, #128]	; (19c60 <Water_Level_Task+0x248>)
   19bde:	781b      	ldrb	r3, [r3, #0]
   19be0:	220b      	movs	r2, #11
   19be2:	18ba      	adds	r2, r7, r2
   19be4:	7812      	ldrb	r2, [r2, #0]
   19be6:	429a      	cmp	r2, r3
   19be8:	d101      	bne.n	19bee <Water_Level_Task+0x1d6>
   19bea:	2301      	movs	r3, #1
   19bec:	e000      	b.n	19bf0 <Water_Level_Task+0x1d8>
   19bee:	2300      	movs	r3, #0
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
   19bf0:	1c1a      	adds	r2, r3, #0
   19bf2:	2301      	movs	r3, #1
   19bf4:	4013      	ands	r3, r2
   19bf6:	b2db      	uxtb	r3, r3
   19bf8:	2b00      	cmp	r3, #0
   19bfa:	d010      	beq.n	19c1e <Water_Level_Task+0x206>
			)
			{
				tempWaterEventCount++;
   19bfc:	4b1b      	ldr	r3, [pc, #108]	; (19c6c <Water_Level_Task+0x254>)
   19bfe:	781b      	ldrb	r3, [r3, #0]
   19c00:	3301      	adds	r3, #1
   19c02:	b2da      	uxtb	r2, r3
   19c04:	4b19      	ldr	r3, [pc, #100]	; (19c6c <Water_Level_Task+0x254>)
   19c06:	701a      	strb	r2, [r3, #0]
				if(tempWaterEventCount>9)
   19c08:	4b18      	ldr	r3, [pc, #96]	; (19c6c <Water_Level_Task+0x254>)
   19c0a:	781b      	ldrb	r3, [r3, #0]
   19c0c:	2b09      	cmp	r3, #9
   19c0e:	d909      	bls.n	19c24 <Water_Level_Task+0x20c>
				{
					operateOnWaterEvent();
   19c10:	4b1f      	ldr	r3, [pc, #124]	; (19c90 <Water_Level_Task+0x278>)
   19c12:	4798      	blx	r3
					result=true;
   19c14:	230c      	movs	r3, #12
   19c16:	18fb      	adds	r3, r7, r3
   19c18:	2201      	movs	r2, #1
   19c1a:	701a      	strb	r2, [r3, #0]
   19c1c:	e002      	b.n	19c24 <Water_Level_Task+0x20c>
				}
			}
			else
			{
				tempWaterEventCount=0;
   19c1e:	4b13      	ldr	r3, [pc, #76]	; (19c6c <Water_Level_Task+0x254>)
   19c20:	2200      	movs	r2, #0
   19c22:	701a      	strb	r2, [r3, #0]
			}
			tempUndergroundLevel=uLevel;
   19c24:	4b0e      	ldr	r3, [pc, #56]	; (19c60 <Water_Level_Task+0x248>)
   19c26:	220b      	movs	r2, #11
   19c28:	18ba      	adds	r2, r7, r2
   19c2a:	7812      	ldrb	r2, [r2, #0]
   19c2c:	701a      	strb	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_GP)
   19c2e:	4b10      	ldr	r3, [pc, #64]	; (19c70 <Water_Level_Task+0x258>)
   19c30:	791b      	ldrb	r3, [r3, #4]
   19c32:	2b00      	cmp	r3, #0
   19c34:	d009      	beq.n	19c4a <Water_Level_Task+0x232>
			{
				tempOverheadLevel=oLevel;
   19c36:	4b0c      	ldr	r3, [pc, #48]	; (19c68 <Water_Level_Task+0x250>)
   19c38:	220d      	movs	r2, #13
   19c3a:	18ba      	adds	r2, r7, r2
   19c3c:	7812      	ldrb	r2, [r2, #0]
   19c3e:	701a      	strb	r2, [r3, #0]
   19c40:	e003      	b.n	19c4a <Water_Level_Task+0x232>
			}
		}
		else
		{
			vTaskDelay(5000/portTICK_PERIOD_MS);
   19c42:	4b14      	ldr	r3, [pc, #80]	; (19c94 <Water_Level_Task+0x27c>)
   19c44:	0018      	movs	r0, r3
   19c46:	4b14      	ldr	r3, [pc, #80]	; (19c98 <Water_Level_Task+0x280>)
   19c48:	4798      	blx	r3
		}
		vTaskDelay(100/portTICK_PERIOD_MS);
   19c4a:	2064      	movs	r0, #100	; 0x64
   19c4c:	4b12      	ldr	r3, [pc, #72]	; (19c98 <Water_Level_Task+0x280>)
   19c4e:	4798      	blx	r3
	{
   19c50:	e77a      	b.n	19b48 <Water_Level_Task+0x130>
   19c52:	46c0      	nop			; (mov r8, r8)
   19c54:	00019529 	.word	0x00019529
   19c58:	000236f1 	.word	0x000236f1
   19c5c:	20000858 	.word	0x20000858
   19c60:	20000771 	.word	0x20000771
   19c64:	20000790 	.word	0x20000790
   19c68:	20000762 	.word	0x20000762
   19c6c:	2000078c 	.word	0x2000078c
   19c70:	2000062c 	.word	0x2000062c
   19c74:	20000718 	.word	0x20000718
   19c78:	200007f8 	.word	0x200007f8
   19c7c:	200007c0 	.word	0x200007c0
   19c80:	20000740 	.word	0x20000740
   19c84:	20000654 	.word	0x20000654
   19c88:	00019925 	.word	0x00019925
   19c8c:	000197f5 	.word	0x000197f5
   19c90:	00019c9d 	.word	0x00019c9d
   19c94:	00001388 	.word	0x00001388
   19c98:	00020669 	.word	0x00020669

00019c9c <operateOnWaterEvent>:
	}
}

void operateOnWaterEvent(void)
{
   19c9c:	b580      	push	{r7, lr}
   19c9e:	b082      	sub	sp, #8
   19ca0:	af00      	add	r7, sp, #0
	uint8_t uLevel = tempUndergroundLevel;
   19ca2:	1dfb      	adds	r3, r7, #7
   19ca4:	4abb      	ldr	r2, [pc, #748]	; (19f94 <operateOnWaterEvent+0x2f8>)
   19ca6:	7812      	ldrb	r2, [r2, #0]
   19ca8:	701a      	strb	r2, [r3, #0]
	uint8_t oLevel = tempOverheadLevel;
   19caa:	1dbb      	adds	r3, r7, #6
   19cac:	4aba      	ldr	r2, [pc, #744]	; (19f98 <operateOnWaterEvent+0x2fc>)
   19cae:	7812      	ldrb	r2, [r2, #0]
   19cb0:	701a      	strb	r2, [r3, #0]
	if(uLevel == undergroundLevel)
   19cb2:	4bba      	ldr	r3, [pc, #744]	; (19f9c <operateOnWaterEvent+0x300>)
   19cb4:	781b      	ldrb	r3, [r3, #0]
   19cb6:	1dfa      	adds	r2, r7, #7
   19cb8:	7812      	ldrb	r2, [r2, #0]
   19cba:	429a      	cmp	r2, r3
   19cbc:	d10c      	bne.n	19cd8 <operateOnWaterEvent+0x3c>
	{
		if (factory_settings_parameter_struct.ENABLE_GP)
   19cbe:	4bb8      	ldr	r3, [pc, #736]	; (19fa0 <operateOnWaterEvent+0x304>)
   19cc0:	791b      	ldrb	r3, [r3, #4]
   19cc2:	2b00      	cmp	r3, #0
   19cc4:	d000      	beq.n	19cc8 <operateOnWaterEvent+0x2c>
   19cc6:	e15e      	b.n	19f86 <operateOnWaterEvent+0x2ea>
		{
			return;
		}
		else
		{
			if(oLevel==overheadLevel)
   19cc8:	4bb6      	ldr	r3, [pc, #728]	; (19fa4 <operateOnWaterEvent+0x308>)
   19cca:	781b      	ldrb	r3, [r3, #0]
   19ccc:	b2db      	uxtb	r3, r3
   19cce:	1dba      	adds	r2, r7, #6
   19cd0:	7812      	ldrb	r2, [r2, #0]
   19cd2:	429a      	cmp	r2, r3
   19cd4:	d100      	bne.n	19cd8 <operateOnWaterEvent+0x3c>
   19cd6:	e158      	b.n	19f8a <operateOnWaterEvent+0x2ee>
			{
				return;
			}
		}
	}
	if (getMotorState())
   19cd8:	4bb3      	ldr	r3, [pc, #716]	; (19fa8 <operateOnWaterEvent+0x30c>)
   19cda:	4798      	blx	r3
   19cdc:	1e03      	subs	r3, r0, #0
   19cde:	d100      	bne.n	19ce2 <operateOnWaterEvent+0x46>
   19ce0:	e0c3      	b.n	19e6a <operateOnWaterEvent+0x1ce>
	{
		if ((uLevel == CRITICALLEVEL) && (undergroundLevel>CRITICALLEVEL))	//no water in well
   19ce2:	1dfb      	adds	r3, r7, #7
   19ce4:	781b      	ldrb	r3, [r3, #0]
   19ce6:	2b00      	cmp	r3, #0
   19ce8:	d122      	bne.n	19d30 <operateOnWaterEvent+0x94>
   19cea:	4bac      	ldr	r3, [pc, #688]	; (19f9c <operateOnWaterEvent+0x300>)
   19cec:	781b      	ldrb	r3, [r3, #0]
   19cee:	2b00      	cmp	r3, #0
   19cf0:	d01e      	beq.n	19d30 <operateOnWaterEvent+0x94>
		{
			stopMotor(false,true,false);
   19cf2:	2200      	movs	r2, #0
   19cf4:	2101      	movs	r1, #1
   19cf6:	2000      	movs	r0, #0
   19cf8:	4bac      	ldr	r3, [pc, #688]	; (19fac <operateOnWaterEvent+0x310>)
   19cfa:	4798      	blx	r3
			simEventTemp[12] = registerEvent('I');	//report To SIM Motor Off due to insufficient water level
   19cfc:	2049      	movs	r0, #73	; 0x49
   19cfe:	4bac      	ldr	r3, [pc, #688]	; (19fb0 <operateOnWaterEvent+0x314>)
   19d00:	4798      	blx	r3
   19d02:	0003      	movs	r3, r0
   19d04:	001a      	movs	r2, r3
   19d06:	4bab      	ldr	r3, [pc, #684]	; (19fb4 <operateOnWaterEvent+0x318>)
   19d08:	731a      	strb	r2, [r3, #12]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19d0a:	4ba5      	ldr	r3, [pc, #660]	; (19fa0 <operateOnWaterEvent+0x304>)
   19d0c:	78db      	ldrb	r3, [r3, #3]
   19d0e:	2b00      	cmp	r3, #0
   19d10:	d100      	bne.n	19d14 <operateOnWaterEvent+0x78>
   19d12:	e071      	b.n	19df8 <operateOnWaterEvent+0x15c>
			{
				if ((m2m_Numbers_struct.m2mSetting) && (undergroundLevel>LOWLEVEL))
   19d14:	4ba8      	ldr	r3, [pc, #672]	; (19fb8 <operateOnWaterEvent+0x31c>)
   19d16:	795b      	ldrb	r3, [r3, #5]
   19d18:	2b00      	cmp	r3, #0
   19d1a:	d100      	bne.n	19d1e <operateOnWaterEvent+0x82>
   19d1c:	e06c      	b.n	19df8 <operateOnWaterEvent+0x15c>
   19d1e:	4b9f      	ldr	r3, [pc, #636]	; (19f9c <operateOnWaterEvent+0x300>)
   19d20:	781b      	ldrb	r3, [r3, #0]
   19d22:	2b01      	cmp	r3, #1
   19d24:	d800      	bhi.n	19d28 <operateOnWaterEvent+0x8c>
   19d26:	e067      	b.n	19df8 <operateOnWaterEvent+0x15c>
				{
					m2mEvent_arr[0] = ME_WAITREGISTER;
   19d28:	4ba4      	ldr	r3, [pc, #656]	; (19fbc <operateOnWaterEvent+0x320>)
   19d2a:	2201      	movs	r2, #1
   19d2c:	701a      	strb	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19d2e:	e063      	b.n	19df8 <operateOnWaterEvent+0x15c>
				}
			}
		}
		else if (uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)
   19d30:	1dfb      	adds	r3, r7, #7
   19d32:	781b      	ldrb	r3, [r3, #0]
   19d34:	2b03      	cmp	r3, #3
   19d36:	d12f      	bne.n	19d98 <operateOnWaterEvent+0xfc>
   19d38:	4b98      	ldr	r3, [pc, #608]	; (19f9c <operateOnWaterEvent+0x300>)
   19d3a:	781b      	ldrb	r3, [r3, #0]
   19d3c:	2b02      	cmp	r3, #2
   19d3e:	d82b      	bhi.n	19d98 <operateOnWaterEvent+0xfc>
		{
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19d40:	4b97      	ldr	r3, [pc, #604]	; (19fa0 <operateOnWaterEvent+0x304>)
   19d42:	78db      	ldrb	r3, [r3, #3]
   19d44:	2b00      	cmp	r3, #0
   19d46:	d05a      	beq.n	19dfe <operateOnWaterEvent+0x162>
			{
				if (m2m_Numbers_struct.m2mSetting)
   19d48:	4b9b      	ldr	r3, [pc, #620]	; (19fb8 <operateOnWaterEvent+0x31c>)
   19d4a:	795b      	ldrb	r3, [r3, #5]
   19d4c:	2b00      	cmp	r3, #0
   19d4e:	d003      	beq.n	19d58 <operateOnWaterEvent+0xbc>
				{
					m2mEvent_arr[1] = ME_WAITREGISTER;
   19d50:	4b9a      	ldr	r3, [pc, #616]	; (19fbc <operateOnWaterEvent+0x320>)
   19d52:	2201      	movs	r2, #1
   19d54:	705a      	strb	r2, [r3, #1]
   19d56:	e006      	b.n	19d66 <operateOnWaterEvent+0xca>
				}
				else
				{
					simEventTemp[15] = registerEvent('E');	//report To SIM well is full.
   19d58:	2045      	movs	r0, #69	; 0x45
   19d5a:	4b95      	ldr	r3, [pc, #596]	; (19fb0 <operateOnWaterEvent+0x314>)
   19d5c:	4798      	blx	r3
   19d5e:	0003      	movs	r3, r0
   19d60:	001a      	movs	r2, r3
   19d62:	4b94      	ldr	r3, [pc, #592]	; (19fb4 <operateOnWaterEvent+0x318>)
   19d64:	73da      	strb	r2, [r3, #15]
				}
				if (user_settings_parameter_struct.preventOverFlowAddress)
   19d66:	4b96      	ldr	r3, [pc, #600]	; (19fc0 <operateOnWaterEvent+0x324>)
   19d68:	7f9b      	ldrb	r3, [r3, #30]
   19d6a:	2b00      	cmp	r3, #0
   19d6c:	d00c      	beq.n	19d88 <operateOnWaterEvent+0xec>
				{
					stopMotor(false,true,false);
   19d6e:	2200      	movs	r2, #0
   19d70:	2101      	movs	r1, #1
   19d72:	2000      	movs	r0, #0
   19d74:	4b8d      	ldr	r3, [pc, #564]	; (19fac <operateOnWaterEvent+0x310>)
   19d76:	4798      	blx	r3
					simEventTemp[14] = registerEvent('H'); //report To SIM well is full, so stopped motor
   19d78:	2048      	movs	r0, #72	; 0x48
   19d7a:	4b8d      	ldr	r3, [pc, #564]	; (19fb0 <operateOnWaterEvent+0x314>)
   19d7c:	4798      	blx	r3
   19d7e:	0003      	movs	r3, r0
   19d80:	001a      	movs	r2, r3
   19d82:	4b8c      	ldr	r3, [pc, #560]	; (19fb4 <operateOnWaterEvent+0x318>)
   19d84:	739a      	strb	r2, [r3, #14]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19d86:	e03a      	b.n	19dfe <operateOnWaterEvent+0x162>
				}
				else
				{
					simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
   19d88:	2045      	movs	r0, #69	; 0x45
   19d8a:	4b89      	ldr	r3, [pc, #548]	; (19fb0 <operateOnWaterEvent+0x314>)
   19d8c:	4798      	blx	r3
   19d8e:	0003      	movs	r3, r0
   19d90:	001a      	movs	r2, r3
   19d92:	4b88      	ldr	r3, [pc, #544]	; (19fb4 <operateOnWaterEvent+0x318>)
   19d94:	73da      	strb	r2, [r3, #15]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19d96:	e032      	b.n	19dfe <operateOnWaterEvent+0x162>
				}
			}
		}
		else if ((uLevel==LOWLEVEL) && (undergroundLevel>LOWLEVEL))		// decrease in water level
   19d98:	1dfb      	adds	r3, r7, #7
   19d9a:	781b      	ldrb	r3, [r3, #0]
   19d9c:	2b01      	cmp	r3, #1
   19d9e:	d11b      	bne.n	19dd8 <operateOnWaterEvent+0x13c>
   19da0:	4b7e      	ldr	r3, [pc, #504]	; (19f9c <operateOnWaterEvent+0x300>)
   19da2:	781b      	ldrb	r3, [r3, #0]
   19da4:	2b01      	cmp	r3, #1
   19da6:	d917      	bls.n	19dd8 <operateOnWaterEvent+0x13c>
		{
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19da8:	4b7d      	ldr	r3, [pc, #500]	; (19fa0 <operateOnWaterEvent+0x304>)
   19daa:	78db      	ldrb	r3, [r3, #3]
   19dac:	2b00      	cmp	r3, #0
   19dae:	d007      	beq.n	19dc0 <operateOnWaterEvent+0x124>
			{
				if (m2m_Numbers_struct.m2mSetting)
   19db0:	4b81      	ldr	r3, [pc, #516]	; (19fb8 <operateOnWaterEvent+0x31c>)
   19db2:	795b      	ldrb	r3, [r3, #5]
   19db4:	2b00      	cmp	r3, #0
   19db6:	d021      	beq.n	19dfc <operateOnWaterEvent+0x160>
				{
					m2mEvent_arr[0] = ME_WAITREGISTER;
   19db8:	4b80      	ldr	r3, [pc, #512]	; (19fbc <operateOnWaterEvent+0x320>)
   19dba:	2201      	movs	r2, #1
   19dbc:	701a      	strb	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19dbe:	e01d      	b.n	19dfc <operateOnWaterEvent+0x160>
				}
			}
			else
			{
				if (factory_settings_parameter_struct.NOLEVELCHANGECALL)
   19dc0:	4b77      	ldr	r3, [pc, #476]	; (19fa0 <operateOnWaterEvent+0x304>)
   19dc2:	79db      	ldrb	r3, [r3, #7]
   19dc4:	2b00      	cmp	r3, #0
   19dc6:	d019      	beq.n	19dfc <operateOnWaterEvent+0x160>
				{
					simEventTemp[13] = registerEvent('D'); //report To SIM water level is decrease..
   19dc8:	2044      	movs	r0, #68	; 0x44
   19dca:	4b79      	ldr	r3, [pc, #484]	; (19fb0 <operateOnWaterEvent+0x314>)
   19dcc:	4798      	blx	r3
   19dce:	0003      	movs	r3, r0
   19dd0:	001a      	movs	r2, r3
   19dd2:	4b78      	ldr	r3, [pc, #480]	; (19fb4 <operateOnWaterEvent+0x318>)
   19dd4:	735a      	strb	r2, [r3, #13]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19dd6:	e011      	b.n	19dfc <operateOnWaterEvent+0x160>
				}
			}
		}
		else if (uLevel==MIDLEVEL && undergroundLevel<MIDLEVEL)		// increase in water level
   19dd8:	1dfb      	adds	r3, r7, #7
   19dda:	781b      	ldrb	r3, [r3, #0]
   19ddc:	2b02      	cmp	r3, #2
   19dde:	d10e      	bne.n	19dfe <operateOnWaterEvent+0x162>
   19de0:	4b6e      	ldr	r3, [pc, #440]	; (19f9c <operateOnWaterEvent+0x300>)
   19de2:	781b      	ldrb	r3, [r3, #0]
   19de4:	2b01      	cmp	r3, #1
   19de6:	d80a      	bhi.n	19dfe <operateOnWaterEvent+0x162>
		{
			simEventTemp[16] = registerEvent('Z'); //report To SIM water level is increasing..
   19de8:	205a      	movs	r0, #90	; 0x5a
   19dea:	4b71      	ldr	r3, [pc, #452]	; (19fb0 <operateOnWaterEvent+0x314>)
   19dec:	4798      	blx	r3
   19dee:	0003      	movs	r3, r0
   19df0:	001a      	movs	r2, r3
   19df2:	4b70      	ldr	r3, [pc, #448]	; (19fb4 <operateOnWaterEvent+0x318>)
   19df4:	741a      	strb	r2, [r3, #16]
   19df6:	e002      	b.n	19dfe <operateOnWaterEvent+0x162>
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19df8:	46c0      	nop			; (mov r8, r8)
   19dfa:	e000      	b.n	19dfe <operateOnWaterEvent+0x162>
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19dfc:	46c0      	nop			; (mov r8, r8)
		}
		if (factory_settings_parameter_struct.ENABLE_GP)
   19dfe:	4b68      	ldr	r3, [pc, #416]	; (19fa0 <operateOnWaterEvent+0x304>)
   19e00:	791b      	ldrb	r3, [r3, #4]
   19e02:	2b00      	cmp	r3, #0
   19e04:	d100      	bne.n	19e08 <operateOnWaterEvent+0x16c>
   19e06:	e0af      	b.n	19f68 <operateOnWaterEvent+0x2cc>
		{
			if(oLevel!=overheadLevel)
   19e08:	4b66      	ldr	r3, [pc, #408]	; (19fa4 <operateOnWaterEvent+0x308>)
   19e0a:	781b      	ldrb	r3, [r3, #0]
   19e0c:	b2db      	uxtb	r3, r3
   19e0e:	1dba      	adds	r2, r7, #6
   19e10:	7812      	ldrb	r2, [r2, #0]
   19e12:	429a      	cmp	r2, r3
   19e14:	d100      	bne.n	19e18 <operateOnWaterEvent+0x17c>
   19e16:	e0a7      	b.n	19f68 <operateOnWaterEvent+0x2cc>
			{
				if(oLevel==OVERHEADHIGHLEVEL && overheadLevel<OVERHEADHIGHLEVEL)		////overhead tank is full
   19e18:	1dbb      	adds	r3, r7, #6
   19e1a:	781b      	ldrb	r3, [r3, #0]
   19e1c:	2b02      	cmp	r3, #2
   19e1e:	d111      	bne.n	19e44 <operateOnWaterEvent+0x1a8>
   19e20:	4b60      	ldr	r3, [pc, #384]	; (19fa4 <operateOnWaterEvent+0x308>)
   19e22:	781b      	ldrb	r3, [r3, #0]
   19e24:	b2db      	uxtb	r3, r3
   19e26:	2b01      	cmp	r3, #1
   19e28:	d80c      	bhi.n	19e44 <operateOnWaterEvent+0x1a8>
				{
					stopMotor(false,true,false);
   19e2a:	2200      	movs	r2, #0
   19e2c:	2101      	movs	r1, #1
   19e2e:	2000      	movs	r0, #0
   19e30:	4b5e      	ldr	r3, [pc, #376]	; (19fac <operateOnWaterEvent+0x310>)
   19e32:	4798      	blx	r3
					simEventTemp[17] = registerEvent('V'); //report To SIM Motor Off due to overhead tank full
   19e34:	2056      	movs	r0, #86	; 0x56
   19e36:	4b5e      	ldr	r3, [pc, #376]	; (19fb0 <operateOnWaterEvent+0x314>)
   19e38:	4798      	blx	r3
   19e3a:	0003      	movs	r3, r0
   19e3c:	001a      	movs	r2, r3
   19e3e:	4b5d      	ldr	r3, [pc, #372]	; (19fb4 <operateOnWaterEvent+0x318>)
   19e40:	745a      	strb	r2, [r3, #17]
   19e42:	e091      	b.n	19f68 <operateOnWaterEvent+0x2cc>
				}
				else if (oLevel==OVERHEADCRITICALLEVEL && overheadLevel>OVERHEADCRITICALLEVEL)	// overhead tank empty.
   19e44:	1dbb      	adds	r3, r7, #6
   19e46:	781b      	ldrb	r3, [r3, #0]
   19e48:	2b00      	cmp	r3, #0
   19e4a:	d000      	beq.n	19e4e <operateOnWaterEvent+0x1b2>
   19e4c:	e08c      	b.n	19f68 <operateOnWaterEvent+0x2cc>
   19e4e:	4b55      	ldr	r3, [pc, #340]	; (19fa4 <operateOnWaterEvent+0x308>)
   19e50:	781b      	ldrb	r3, [r3, #0]
   19e52:	b2db      	uxtb	r3, r3
   19e54:	2b00      	cmp	r3, #0
   19e56:	d100      	bne.n	19e5a <operateOnWaterEvent+0x1be>
   19e58:	e086      	b.n	19f68 <operateOnWaterEvent+0x2cc>
				{
					simEventTemp[18] = registerEvent('W'); //report To SIM , overhead tank empty.
   19e5a:	2057      	movs	r0, #87	; 0x57
   19e5c:	4b54      	ldr	r3, [pc, #336]	; (19fb0 <operateOnWaterEvent+0x314>)
   19e5e:	4798      	blx	r3
   19e60:	0003      	movs	r3, r0
   19e62:	001a      	movs	r2, r3
   19e64:	4b53      	ldr	r3, [pc, #332]	; (19fb4 <operateOnWaterEvent+0x318>)
   19e66:	749a      	strb	r2, [r3, #18]
   19e68:	e07e      	b.n	19f68 <operateOnWaterEvent+0x2cc>
			}
		}
	}
	else
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   19e6a:	4b4d      	ldr	r3, [pc, #308]	; (19fa0 <operateOnWaterEvent+0x304>)
   19e6c:	78db      	ldrb	r3, [r3, #3]
   19e6e:	2b00      	cmp	r3, #0
   19e70:	d027      	beq.n	19ec2 <operateOnWaterEvent+0x226>
		{
			if(m2m_Numbers_struct.m2mSetting && uLevel<MIDLEVEL && undergroundLevel>=MIDLEVEL)	//level is decreased
   19e72:	4b51      	ldr	r3, [pc, #324]	; (19fb8 <operateOnWaterEvent+0x31c>)
   19e74:	795b      	ldrb	r3, [r3, #5]
   19e76:	2b00      	cmp	r3, #0
   19e78:	d00b      	beq.n	19e92 <operateOnWaterEvent+0x1f6>
   19e7a:	1dfb      	adds	r3, r7, #7
   19e7c:	781b      	ldrb	r3, [r3, #0]
   19e7e:	2b01      	cmp	r3, #1
   19e80:	d807      	bhi.n	19e92 <operateOnWaterEvent+0x1f6>
   19e82:	4b46      	ldr	r3, [pc, #280]	; (19f9c <operateOnWaterEvent+0x300>)
   19e84:	781b      	ldrb	r3, [r3, #0]
   19e86:	2b01      	cmp	r3, #1
   19e88:	d903      	bls.n	19e92 <operateOnWaterEvent+0x1f6>
			{
				m2mEvent_arr[0] = ME_WAITREGISTER;
   19e8a:	4b4c      	ldr	r3, [pc, #304]	; (19fbc <operateOnWaterEvent+0x320>)
   19e8c:	2201      	movs	r2, #1
   19e8e:	701a      	strb	r2, [r3, #0]
   19e90:	e04b      	b.n	19f2a <operateOnWaterEvent+0x28e>
			}
			else if (uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)			//well is full
   19e92:	1dfb      	adds	r3, r7, #7
   19e94:	781b      	ldrb	r3, [r3, #0]
   19e96:	2b03      	cmp	r3, #3
   19e98:	d147      	bne.n	19f2a <operateOnWaterEvent+0x28e>
   19e9a:	4b40      	ldr	r3, [pc, #256]	; (19f9c <operateOnWaterEvent+0x300>)
   19e9c:	781b      	ldrb	r3, [r3, #0]
   19e9e:	2b02      	cmp	r3, #2
   19ea0:	d843      	bhi.n	19f2a <operateOnWaterEvent+0x28e>
			{
				if(m2m_Numbers_struct.m2mSetting)
   19ea2:	4b45      	ldr	r3, [pc, #276]	; (19fb8 <operateOnWaterEvent+0x31c>)
   19ea4:	795b      	ldrb	r3, [r3, #5]
   19ea6:	2b00      	cmp	r3, #0
   19ea8:	d003      	beq.n	19eb2 <operateOnWaterEvent+0x216>
				{
					m2mEvent_arr[1] = ME_WAITREGISTER;
   19eaa:	4b44      	ldr	r3, [pc, #272]	; (19fbc <operateOnWaterEvent+0x320>)
   19eac:	2201      	movs	r2, #1
   19eae:	705a      	strb	r2, [r3, #1]
   19eb0:	e03b      	b.n	19f2a <operateOnWaterEvent+0x28e>
				}
				else
				{
					simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
   19eb2:	2045      	movs	r0, #69	; 0x45
   19eb4:	4b3e      	ldr	r3, [pc, #248]	; (19fb0 <operateOnWaterEvent+0x314>)
   19eb6:	4798      	blx	r3
   19eb8:	0003      	movs	r3, r0
   19eba:	001a      	movs	r2, r3
   19ebc:	4b3d      	ldr	r3, [pc, #244]	; (19fb4 <operateOnWaterEvent+0x318>)
   19ebe:	73da      	strb	r2, [r3, #15]
   19ec0:	e033      	b.n	19f2a <operateOnWaterEvent+0x28e>
				}
			}
		}
		else if(uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)		//well is full
   19ec2:	1dfb      	adds	r3, r7, #7
   19ec4:	781b      	ldrb	r3, [r3, #0]
   19ec6:	2b03      	cmp	r3, #3
   19ec8:	d10b      	bne.n	19ee2 <operateOnWaterEvent+0x246>
   19eca:	4b34      	ldr	r3, [pc, #208]	; (19f9c <operateOnWaterEvent+0x300>)
   19ecc:	781b      	ldrb	r3, [r3, #0]
   19ece:	2b02      	cmp	r3, #2
   19ed0:	d807      	bhi.n	19ee2 <operateOnWaterEvent+0x246>
		{
			simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
   19ed2:	2045      	movs	r0, #69	; 0x45
   19ed4:	4b36      	ldr	r3, [pc, #216]	; (19fb0 <operateOnWaterEvent+0x314>)
   19ed6:	4798      	blx	r3
   19ed8:	0003      	movs	r3, r0
   19eda:	001a      	movs	r2, r3
   19edc:	4b35      	ldr	r3, [pc, #212]	; (19fb4 <operateOnWaterEvent+0x318>)
   19ede:	73da      	strb	r2, [r3, #15]
   19ee0:	e023      	b.n	19f2a <operateOnWaterEvent+0x28e>
		}
		else if (uLevel==MIDLEVEL && undergroundLevel<MIDLEVEL)		// underground level is increasing
   19ee2:	1dfb      	adds	r3, r7, #7
   19ee4:	781b      	ldrb	r3, [r3, #0]
   19ee6:	2b02      	cmp	r3, #2
   19ee8:	d11f      	bne.n	19f2a <operateOnWaterEvent+0x28e>
   19eea:	4b2c      	ldr	r3, [pc, #176]	; (19f9c <operateOnWaterEvent+0x300>)
   19eec:	781b      	ldrb	r3, [r3, #0]
   19eee:	2b01      	cmp	r3, #1
   19ef0:	d81b      	bhi.n	19f2a <operateOnWaterEvent+0x28e>
		{
			if (factory_settings_parameter_struct.ENABLE_GP)
   19ef2:	4b2b      	ldr	r3, [pc, #172]	; (19fa0 <operateOnWaterEvent+0x304>)
   19ef4:	791b      	ldrb	r3, [r3, #4]
   19ef6:	2b00      	cmp	r3, #0
   19ef8:	d00d      	beq.n	19f16 <operateOnWaterEvent+0x27a>
			{
				if (factory_settings_parameter_struct.DUAL_LEVEL)
   19efa:	4b29      	ldr	r3, [pc, #164]	; (19fa0 <operateOnWaterEvent+0x304>)
   19efc:	799b      	ldrb	r3, [r3, #6]
   19efe:	2b00      	cmp	r3, #0
   19f00:	d009      	beq.n	19f16 <operateOnWaterEvent+0x27a>
				{
					if(oLevel<OVERHEADHIGHLEVEL)
   19f02:	1dbb      	adds	r3, r7, #6
   19f04:	781b      	ldrb	r3, [r3, #0]
   19f06:	2b01      	cmp	r3, #1
   19f08:	d805      	bhi.n	19f16 <operateOnWaterEvent+0x27a>
					{
						if(user_settings_parameter_struct.autoStartAddress)			//autoStart is ON
   19f0a:	4b2d      	ldr	r3, [pc, #180]	; (19fc0 <operateOnWaterEvent+0x324>)
   19f0c:	785b      	ldrb	r3, [r3, #1]
   19f0e:	2b00      	cmp	r3, #0
   19f10:	d001      	beq.n	19f16 <operateOnWaterEvent+0x27a>
						{
							triggerAutoStart();
   19f12:	4b2c      	ldr	r3, [pc, #176]	; (19fc4 <operateOnWaterEvent+0x328>)
   19f14:	4798      	blx	r3
						}
					}
				}
			}
			if (factory_settings_parameter_struct.DUAL_LEVEL)
   19f16:	4b22      	ldr	r3, [pc, #136]	; (19fa0 <operateOnWaterEvent+0x304>)
   19f18:	799b      	ldrb	r3, [r3, #6]
   19f1a:	2b00      	cmp	r3, #0
   19f1c:	d005      	beq.n	19f2a <operateOnWaterEvent+0x28e>
			{
				if(user_settings_parameter_struct.autoStartAddress)			//autoStart is ON
   19f1e:	4b28      	ldr	r3, [pc, #160]	; (19fc0 <operateOnWaterEvent+0x324>)
   19f20:	785b      	ldrb	r3, [r3, #1]
   19f22:	2b00      	cmp	r3, #0
   19f24:	d001      	beq.n	19f2a <operateOnWaterEvent+0x28e>
				{
					triggerAutoStart();
   19f26:	4b27      	ldr	r3, [pc, #156]	; (19fc4 <operateOnWaterEvent+0x328>)
   19f28:	4798      	blx	r3
				}
			}
		}
		if (factory_settings_parameter_struct.ENABLE_GP)
   19f2a:	4b1d      	ldr	r3, [pc, #116]	; (19fa0 <operateOnWaterEvent+0x304>)
   19f2c:	791b      	ldrb	r3, [r3, #4]
   19f2e:	2b00      	cmp	r3, #0
   19f30:	d01a      	beq.n	19f68 <operateOnWaterEvent+0x2cc>
		{
			if (oLevel==OVERHEADCRITICALLEVEL && overheadLevel>OVERHEADCRITICALLEVEL && uLevel>CRITICALLEVEL) // overhead tank is empty, and underground not low
   19f32:	1dbb      	adds	r3, r7, #6
   19f34:	781b      	ldrb	r3, [r3, #0]
   19f36:	2b00      	cmp	r3, #0
   19f38:	d116      	bne.n	19f68 <operateOnWaterEvent+0x2cc>
   19f3a:	4b1a      	ldr	r3, [pc, #104]	; (19fa4 <operateOnWaterEvent+0x308>)
   19f3c:	781b      	ldrb	r3, [r3, #0]
   19f3e:	b2db      	uxtb	r3, r3
   19f40:	2b00      	cmp	r3, #0
   19f42:	d011      	beq.n	19f68 <operateOnWaterEvent+0x2cc>
   19f44:	1dfb      	adds	r3, r7, #7
   19f46:	781b      	ldrb	r3, [r3, #0]
   19f48:	2b00      	cmp	r3, #0
   19f4a:	d00d      	beq.n	19f68 <operateOnWaterEvent+0x2cc>
			{
				if(user_settings_parameter_struct.autoStartAddress)		//autoStart is ON
   19f4c:	4b1c      	ldr	r3, [pc, #112]	; (19fc0 <operateOnWaterEvent+0x324>)
   19f4e:	785b      	ldrb	r3, [r3, #1]
   19f50:	2b00      	cmp	r3, #0
   19f52:	d002      	beq.n	19f5a <operateOnWaterEvent+0x2be>
				{
					triggerAutoStart();
   19f54:	4b1b      	ldr	r3, [pc, #108]	; (19fc4 <operateOnWaterEvent+0x328>)
   19f56:	4798      	blx	r3
   19f58:	e006      	b.n	19f68 <operateOnWaterEvent+0x2cc>
				}
				else
				{
					simEventTemp[18] = registerEvent('W'); //report To SIM overhead tank is empty.
   19f5a:	2057      	movs	r0, #87	; 0x57
   19f5c:	4b14      	ldr	r3, [pc, #80]	; (19fb0 <operateOnWaterEvent+0x314>)
   19f5e:	4798      	blx	r3
   19f60:	0003      	movs	r3, r0
   19f62:	001a      	movs	r2, r3
   19f64:	4b13      	ldr	r3, [pc, #76]	; (19fb4 <operateOnWaterEvent+0x318>)
   19f66:	749a      	strb	r2, [r3, #18]
				}
			}
		}
	}
	if (factory_settings_parameter_struct.ENABLE_GP)
   19f68:	4b0d      	ldr	r3, [pc, #52]	; (19fa0 <operateOnWaterEvent+0x304>)
   19f6a:	791b      	ldrb	r3, [r3, #4]
   19f6c:	2b00      	cmp	r3, #0
   19f6e:	d004      	beq.n	19f7a <operateOnWaterEvent+0x2de>
	{
		updateOverheadLevel(oLevel);
   19f70:	1dbb      	adds	r3, r7, #6
   19f72:	781b      	ldrb	r3, [r3, #0]
   19f74:	0018      	movs	r0, r3
   19f76:	4b14      	ldr	r3, [pc, #80]	; (19fc8 <operateOnWaterEvent+0x32c>)
   19f78:	4798      	blx	r3
	}
	updateUndergroundLevel(uLevel);
   19f7a:	1dfb      	adds	r3, r7, #7
   19f7c:	781b      	ldrb	r3, [r3, #0]
   19f7e:	0018      	movs	r0, r3
   19f80:	4b12      	ldr	r3, [pc, #72]	; (19fcc <operateOnWaterEvent+0x330>)
   19f82:	4798      	blx	r3
   19f84:	e002      	b.n	19f8c <operateOnWaterEvent+0x2f0>
			return;
   19f86:	46c0      	nop			; (mov r8, r8)
   19f88:	e000      	b.n	19f8c <operateOnWaterEvent+0x2f0>
				return;
   19f8a:	46c0      	nop			; (mov r8, r8)
}
   19f8c:	46bd      	mov	sp, r7
   19f8e:	b002      	add	sp, #8
   19f90:	bd80      	pop	{r7, pc}
   19f92:	46c0      	nop			; (mov r8, r8)
   19f94:	20000771 	.word	0x20000771
   19f98:	20000762 	.word	0x20000762
   19f9c:	20000858 	.word	0x20000858
   19fa0:	2000062c 	.word	0x2000062c
   19fa4:	20000790 	.word	0x20000790
   19fa8:	0001b311 	.word	0x0001b311
   19fac:	0001bbe1 	.word	0x0001bbe1
   19fb0:	00014b59 	.word	0x00014b59
   19fb4:	20000718 	.word	0x20000718
   19fb8:	20000554 	.word	0x20000554
   19fbc:	200007c0 	.word	0x200007c0
   19fc0:	20000654 	.word	0x20000654
   19fc4:	0001b665 	.word	0x0001b665
   19fc8:	000197d5 	.word	0x000197d5
   19fcc:	00019905 	.word	0x00019905

00019fd0 <Configure_ADC0>:

void Configure_ADC0(void)
{
   19fd0:	b580      	push	{r7, lr}
   19fd2:	b08c      	sub	sp, #48	; 0x30
   19fd4:	af00      	add	r7, sp, #0
	struct adc_config config;
	adc_get_config_defaults(&config);
   19fd6:	003b      	movs	r3, r7
   19fd8:	0018      	movs	r0, r3
   19fda:	4b1a      	ldr	r3, [pc, #104]	; (1a044 <Configure_ADC0+0x74>)
   19fdc:	4798      	blx	r3
	config.positive_input = ADC_POSITIVE_INPUT_PIN19;
   19fde:	003b      	movs	r3, r7
   19fe0:	2213      	movs	r2, #19
   19fe2:	731a      	strb	r2, [r3, #12]
	config.negative_input = ADC_NEGATIVE_INPUT_GND;
   19fe4:	003b      	movs	r3, r7
   19fe6:	22c0      	movs	r2, #192	; 0xc0
   19fe8:	0152      	lsls	r2, r2, #5
   19fea:	81da      	strh	r2, [r3, #14]
	config.reference      = ADC_REFERENCE_AREFA;//ADC_REFERENCE_INT1V;
   19fec:	003b      	movs	r3, r7
   19fee:	2203      	movs	r2, #3
   19ff0:	705a      	strb	r2, [r3, #1]
	config.clock_source   = GCLK_GENERATOR_3;
   19ff2:	003b      	movs	r3, r7
   19ff4:	2203      	movs	r2, #3
   19ff6:	701a      	strb	r2, [r3, #0]
	config.gain_factor    = ADC_GAIN_FACTOR_1X;
   19ff8:	003b      	movs	r3, r7
   19ffa:	2200      	movs	r2, #0
   19ffc:	609a      	str	r2, [r3, #8]
	config.resolution	= ADC_RESOLUTION_12BIT;
   19ffe:	003b      	movs	r3, r7
   1a000:	2200      	movs	r2, #0
   1a002:	711a      	strb	r2, [r3, #4]
	
	config.clock_prescaler = ADC_CLOCK_PRESCALER_DIV64; //125kHz adc clock (8MHz/64)
   1a004:	003b      	movs	r3, r7
   1a006:	2280      	movs	r2, #128	; 0x80
   1a008:	00d2      	lsls	r2, r2, #3
   1a00a:	805a      	strh	r2, [r3, #2]
	config.run_in_standby = true;
   1a00c:	003b      	movs	r3, r7
   1a00e:	2201      	movs	r2, #1
   1a010:	755a      	strb	r2, [r3, #21]
	
	adc_init(&adc_inst, ADC, &config);// Initialize the ADC
   1a012:	003a      	movs	r2, r7
   1a014:	490c      	ldr	r1, [pc, #48]	; (1a048 <Configure_ADC0+0x78>)
   1a016:	4b0d      	ldr	r3, [pc, #52]	; (1a04c <Configure_ADC0+0x7c>)
   1a018:	0018      	movs	r0, r3
   1a01a:	4b0d      	ldr	r3, [pc, #52]	; (1a050 <Configure_ADC0+0x80>)
   1a01c:	4798      	blx	r3
	
	/************************************************************************/
	/*ADC Callback Setup                                                    */
	adc_register_callback(&adc_inst, adc_buffer_complete_callback, ADC_CALLBACK_READ_BUFFER);
   1a01e:	490d      	ldr	r1, [pc, #52]	; (1a054 <Configure_ADC0+0x84>)
   1a020:	4b0a      	ldr	r3, [pc, #40]	; (1a04c <Configure_ADC0+0x7c>)
   1a022:	2200      	movs	r2, #0
   1a024:	0018      	movs	r0, r3
   1a026:	4b0c      	ldr	r3, [pc, #48]	; (1a058 <Configure_ADC0+0x88>)
   1a028:	4798      	blx	r3
	adc_enable_callback(&adc_inst, ADC_CALLBACK_READ_BUFFER);
   1a02a:	4b08      	ldr	r3, [pc, #32]	; (1a04c <Configure_ADC0+0x7c>)
   1a02c:	2100      	movs	r1, #0
   1a02e:	0018      	movs	r0, r3
   1a030:	4b0a      	ldr	r3, [pc, #40]	; (1a05c <Configure_ADC0+0x8c>)
   1a032:	4798      	blx	r3
	/************************************************************************/
	
	adc_enable(&adc_inst);
   1a034:	4b05      	ldr	r3, [pc, #20]	; (1a04c <Configure_ADC0+0x7c>)
   1a036:	0018      	movs	r0, r3
   1a038:	4b09      	ldr	r3, [pc, #36]	; (1a060 <Configure_ADC0+0x90>)
   1a03a:	4798      	blx	r3
}
   1a03c:	46c0      	nop			; (mov r8, r8)
   1a03e:	46bd      	mov	sp, r7
   1a040:	b00c      	add	sp, #48	; 0x30
   1a042:	bd80      	pop	{r7, pc}
   1a044:	0001d749 	.word	0x0001d749
   1a048:	42004000 	.word	0x42004000
   1a04c:	2000081c 	.word	0x2000081c
   1a050:	0001dd99 	.word	0x0001dd99
   1a054:	0001a065 	.word	0x0001a065
   1a058:	0001e099 	.word	0x0001e099
   1a05c:	000194a9 	.word	0x000194a9
   1a060:	00019311 	.word	0x00019311

0001a064 <adc_buffer_complete_callback>:

void adc_buffer_complete_callback(const struct adc_module *const module)
{
   1a064:	b580      	push	{r7, lr}
   1a066:	b082      	sub	sp, #8
   1a068:	af00      	add	r7, sp, #0
   1a06a:	6078      	str	r0, [r7, #4]
	adc_read_buffer_done = true;
   1a06c:	4b06      	ldr	r3, [pc, #24]	; (1a088 <adc_buffer_complete_callback+0x24>)
   1a06e:	2201      	movs	r2, #1
   1a070:	701a      	strb	r2, [r3, #0]
	vTaskNotifyGiveFromISR(motorTask,NULL);
   1a072:	4b06      	ldr	r3, [pc, #24]	; (1a08c <adc_buffer_complete_callback+0x28>)
   1a074:	681b      	ldr	r3, [r3, #0]
   1a076:	2100      	movs	r1, #0
   1a078:	0018      	movs	r0, r3
   1a07a:	4b05      	ldr	r3, [pc, #20]	; (1a090 <adc_buffer_complete_callback+0x2c>)
   1a07c:	4798      	blx	r3
}
   1a07e:	46c0      	nop			; (mov r8, r8)
   1a080:	46bd      	mov	sp, r7
   1a082:	b002      	add	sp, #8
   1a084:	bd80      	pop	{r7, pc}
   1a086:	46c0      	nop			; (mov r8, r8)
   1a088:	20000745 	.word	0x20000745
   1a08c:	20000238 	.word	0x20000238
   1a090:	00021375 	.word	0x00021375

0001a094 <Read_ADC0>:

uint32_t Read_ADC0(uint32_t adc_pin,uint16_t samples)
{
   1a094:	b580      	push	{r7, lr}
   1a096:	b084      	sub	sp, #16
   1a098:	af00      	add	r7, sp, #0
   1a09a:	6078      	str	r0, [r7, #4]
   1a09c:	000a      	movs	r2, r1
   1a09e:	1cbb      	adds	r3, r7, #2
   1a0a0:	801a      	strh	r2, [r3, #0]
	adc_set_positive_input(&adc_inst, adc_pin);
   1a0a2:	687b      	ldr	r3, [r7, #4]
   1a0a4:	b2da      	uxtb	r2, r3
   1a0a6:	4b24      	ldr	r3, [pc, #144]	; (1a138 <Read_ADC0+0xa4>)
   1a0a8:	0011      	movs	r1, r2
   1a0aa:	0018      	movs	r0, r3
   1a0ac:	4b23      	ldr	r3, [pc, #140]	; (1a13c <Read_ADC0+0xa8>)
   1a0ae:	4798      	blx	r3
	uint16_t current_value = 0;
   1a0b0:	2308      	movs	r3, #8
   1a0b2:	18fb      	adds	r3, r7, r3
   1a0b4:	2200      	movs	r2, #0
   1a0b6:	801a      	strh	r2, [r3, #0]
	uint32_t total_value = 0;
   1a0b8:	2300      	movs	r3, #0
   1a0ba:	60fb      	str	r3, [r7, #12]
	for (uint16_t uintLoop=0;uintLoop<samples;uintLoop++)
   1a0bc:	230a      	movs	r3, #10
   1a0be:	18fb      	adds	r3, r7, r3
   1a0c0:	2200      	movs	r2, #0
   1a0c2:	801a      	strh	r2, [r3, #0]
   1a0c4:	e026      	b.n	1a114 <Read_ADC0+0x80>
	{
		current_value = 0;
   1a0c6:	2308      	movs	r3, #8
   1a0c8:	18fb      	adds	r3, r7, r3
   1a0ca:	2200      	movs	r2, #0
   1a0cc:	801a      	strh	r2, [r3, #0]
		adc_start_conversion(&adc_inst);
   1a0ce:	4b1a      	ldr	r3, [pc, #104]	; (1a138 <Read_ADC0+0xa4>)
   1a0d0:	0018      	movs	r0, r3
   1a0d2:	4b1b      	ldr	r3, [pc, #108]	; (1a140 <Read_ADC0+0xac>)
   1a0d4:	4798      	blx	r3
		while((adc_get_status(&adc_inst) & ADC_STATUS_RESULT_READY) != 1);
   1a0d6:	46c0      	nop			; (mov r8, r8)
   1a0d8:	4b17      	ldr	r3, [pc, #92]	; (1a138 <Read_ADC0+0xa4>)
   1a0da:	0018      	movs	r0, r3
   1a0dc:	4b19      	ldr	r3, [pc, #100]	; (1a144 <Read_ADC0+0xb0>)
   1a0de:	4798      	blx	r3
   1a0e0:	0002      	movs	r2, r0
   1a0e2:	2301      	movs	r3, #1
   1a0e4:	4013      	ands	r3, r2
   1a0e6:	2b01      	cmp	r3, #1
   1a0e8:	d1f6      	bne.n	1a0d8 <Read_ADC0+0x44>
		adc_read(&adc_inst, &current_value);
   1a0ea:	2308      	movs	r3, #8
   1a0ec:	18fa      	adds	r2, r7, r3
   1a0ee:	4b12      	ldr	r3, [pc, #72]	; (1a138 <Read_ADC0+0xa4>)
   1a0f0:	0011      	movs	r1, r2
   1a0f2:	0018      	movs	r0, r3
   1a0f4:	4b14      	ldr	r3, [pc, #80]	; (1a148 <Read_ADC0+0xb4>)
   1a0f6:	4798      	blx	r3
		total_value+=current_value;
   1a0f8:	2308      	movs	r3, #8
   1a0fa:	18fb      	adds	r3, r7, r3
   1a0fc:	881b      	ldrh	r3, [r3, #0]
   1a0fe:	001a      	movs	r2, r3
   1a100:	68fb      	ldr	r3, [r7, #12]
   1a102:	189b      	adds	r3, r3, r2
   1a104:	60fb      	str	r3, [r7, #12]
	for (uint16_t uintLoop=0;uintLoop<samples;uintLoop++)
   1a106:	230a      	movs	r3, #10
   1a108:	18fb      	adds	r3, r7, r3
   1a10a:	881a      	ldrh	r2, [r3, #0]
   1a10c:	230a      	movs	r3, #10
   1a10e:	18fb      	adds	r3, r7, r3
   1a110:	3201      	adds	r2, #1
   1a112:	801a      	strh	r2, [r3, #0]
   1a114:	230a      	movs	r3, #10
   1a116:	18fa      	adds	r2, r7, r3
   1a118:	1cbb      	adds	r3, r7, #2
   1a11a:	8812      	ldrh	r2, [r2, #0]
   1a11c:	881b      	ldrh	r3, [r3, #0]
   1a11e:	429a      	cmp	r2, r3
   1a120:	d3d1      	bcc.n	1a0c6 <Read_ADC0+0x32>
	}
	
	return (total_value/samples);
   1a122:	1cbb      	adds	r3, r7, #2
   1a124:	881a      	ldrh	r2, [r3, #0]
   1a126:	4b09      	ldr	r3, [pc, #36]	; (1a14c <Read_ADC0+0xb8>)
   1a128:	0011      	movs	r1, r2
   1a12a:	68f8      	ldr	r0, [r7, #12]
   1a12c:	4798      	blx	r3
   1a12e:	0003      	movs	r3, r0
}
   1a130:	0018      	movs	r0, r3
   1a132:	46bd      	mov	sp, r7
   1a134:	b004      	add	sp, #16
   1a136:	bd80      	pop	{r7, pc}
   1a138:	2000081c 	.word	0x2000081c
   1a13c:	00019435 	.word	0x00019435
   1a140:	00019371 	.word	0x00019371
   1a144:	00019269 	.word	0x00019269
   1a148:	000193b9 	.word	0x000193b9
   1a14c:	00026c7d 	.word	0x00026c7d

0001a150 <Read_Voltage_ADC0>:


uint32_t Read_Voltage_ADC0(uint32_t adc_pin)
{
   1a150:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a152:	b0a3      	sub	sp, #140	; 0x8c
   1a154:	af00      	add	r7, sp, #0
   1a156:	6578      	str	r0, [r7, #84]	; 0x54
   1a158:	466b      	mov	r3, sp
   1a15a:	653b      	str	r3, [r7, #80]	; 0x50
	delay_ms(5);
   1a15c:	2000      	movs	r0, #0
   1a15e:	4bd0      	ldr	r3, [pc, #832]	; (1a4a0 <Read_Voltage_ADC0+0x350>)
   1a160:	4798      	blx	r3
   1a162:	0003      	movs	r3, r0
   1a164:	62bb      	str	r3, [r7, #40]	; 0x28
   1a166:	2300      	movs	r3, #0
   1a168:	62fb      	str	r3, [r7, #44]	; 0x2c
   1a16a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1a16c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1a16e:	0003      	movs	r3, r0
   1a170:	000c      	movs	r4, r1
   1a172:	0f9a      	lsrs	r2, r3, #30
   1a174:	00a6      	lsls	r6, r4, #2
   1a176:	4316      	orrs	r6, r2
   1a178:	009d      	lsls	r5, r3, #2
   1a17a:	000a      	movs	r2, r1
   1a17c:	0001      	movs	r1, r0
   1a17e:	1949      	adds	r1, r1, r5
   1a180:	4172      	adcs	r2, r6
   1a182:	4bc8      	ldr	r3, [pc, #800]	; (1a4a4 <Read_Voltage_ADC0+0x354>)
   1a184:	2400      	movs	r4, #0
   1a186:	18c9      	adds	r1, r1, r3
   1a188:	4162      	adcs	r2, r4
   1a18a:	0008      	movs	r0, r1
   1a18c:	0011      	movs	r1, r2
   1a18e:	4cc6      	ldr	r4, [pc, #792]	; (1a4a8 <Read_Voltage_ADC0+0x358>)
   1a190:	4ac6      	ldr	r2, [pc, #792]	; (1a4ac <Read_Voltage_ADC0+0x35c>)
   1a192:	2300      	movs	r3, #0
   1a194:	47a0      	blx	r4
   1a196:	0003      	movs	r3, r0
   1a198:	000c      	movs	r4, r1
   1a19a:	0018      	movs	r0, r3
   1a19c:	4bc4      	ldr	r3, [pc, #784]	; (1a4b0 <Read_Voltage_ADC0+0x360>)
   1a19e:	4798      	blx	r3
	
	adc_set_positive_input(&adc_inst, adc_pin);
   1a1a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1a1a2:	b2da      	uxtb	r2, r3
   1a1a4:	4bc3      	ldr	r3, [pc, #780]	; (1a4b4 <Read_Voltage_ADC0+0x364>)
   1a1a6:	0011      	movs	r1, r2
   1a1a8:	0018      	movs	r0, r3
   1a1aa:	4bc3      	ldr	r3, [pc, #780]	; (1a4b8 <Read_Voltage_ADC0+0x368>)
   1a1ac:	4798      	blx	r3
	//read 500 samples
	
	uint16_t no_of_samples = 544;  //272 samples contain one full cycle
   1a1ae:	2330      	movs	r3, #48	; 0x30
   1a1b0:	2250      	movs	r2, #80	; 0x50
   1a1b2:	18ba      	adds	r2, r7, r2
   1a1b4:	18d2      	adds	r2, r2, r3
   1a1b6:	2388      	movs	r3, #136	; 0x88
   1a1b8:	009b      	lsls	r3, r3, #2
   1a1ba:	8013      	strh	r3, [r2, #0]
	uint16_t samples_buffer[no_of_samples];
   1a1bc:	2330      	movs	r3, #48	; 0x30
   1a1be:	2250      	movs	r2, #80	; 0x50
   1a1c0:	4694      	mov	ip, r2
   1a1c2:	44bc      	add	ip, r7
   1a1c4:	4463      	add	r3, ip
   1a1c6:	881a      	ldrh	r2, [r3, #0]
   1a1c8:	0013      	movs	r3, r2
   1a1ca:	3b01      	subs	r3, #1
   1a1cc:	67fb      	str	r3, [r7, #124]	; 0x7c
   1a1ce:	623a      	str	r2, [r7, #32]
   1a1d0:	2300      	movs	r3, #0
   1a1d2:	627b      	str	r3, [r7, #36]	; 0x24
   1a1d4:	6a38      	ldr	r0, [r7, #32]
   1a1d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1a1d8:	0003      	movs	r3, r0
   1a1da:	0f1b      	lsrs	r3, r3, #28
   1a1dc:	000c      	movs	r4, r1
   1a1de:	0124      	lsls	r4, r4, #4
   1a1e0:	64fc      	str	r4, [r7, #76]	; 0x4c
   1a1e2:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
   1a1e4:	431c      	orrs	r4, r3
   1a1e6:	64fc      	str	r4, [r7, #76]	; 0x4c
   1a1e8:	0003      	movs	r3, r0
   1a1ea:	011b      	lsls	r3, r3, #4
   1a1ec:	64bb      	str	r3, [r7, #72]	; 0x48
   1a1ee:	61ba      	str	r2, [r7, #24]
   1a1f0:	2300      	movs	r3, #0
   1a1f2:	61fb      	str	r3, [r7, #28]
   1a1f4:	69b8      	ldr	r0, [r7, #24]
   1a1f6:	69f9      	ldr	r1, [r7, #28]
   1a1f8:	0003      	movs	r3, r0
   1a1fa:	0f1b      	lsrs	r3, r3, #28
   1a1fc:	000c      	movs	r4, r1
   1a1fe:	0124      	lsls	r4, r4, #4
   1a200:	647c      	str	r4, [r7, #68]	; 0x44
   1a202:	6c7c      	ldr	r4, [r7, #68]	; 0x44
   1a204:	431c      	orrs	r4, r3
   1a206:	647c      	str	r4, [r7, #68]	; 0x44
   1a208:	0003      	movs	r3, r0
   1a20a:	011b      	lsls	r3, r3, #4
   1a20c:	643b      	str	r3, [r7, #64]	; 0x40
   1a20e:	0013      	movs	r3, r2
   1a210:	005b      	lsls	r3, r3, #1
   1a212:	3301      	adds	r3, #1
   1a214:	3307      	adds	r3, #7
   1a216:	08db      	lsrs	r3, r3, #3
   1a218:	00db      	lsls	r3, r3, #3
   1a21a:	466a      	mov	r2, sp
   1a21c:	1ad3      	subs	r3, r2, r3
   1a21e:	469d      	mov	sp, r3
   1a220:	466b      	mov	r3, sp
   1a222:	3301      	adds	r3, #1
   1a224:	085b      	lsrs	r3, r3, #1
   1a226:	005b      	lsls	r3, r3, #1
   1a228:	67bb      	str	r3, [r7, #120]	; 0x78
	uint16_t output_buffer[no_of_samples];
   1a22a:	2330      	movs	r3, #48	; 0x30
   1a22c:	2250      	movs	r2, #80	; 0x50
   1a22e:	4694      	mov	ip, r2
   1a230:	44bc      	add	ip, r7
   1a232:	4463      	add	r3, ip
   1a234:	881a      	ldrh	r2, [r3, #0]
   1a236:	0013      	movs	r3, r2
   1a238:	3b01      	subs	r3, #1
   1a23a:	677b      	str	r3, [r7, #116]	; 0x74
   1a23c:	613a      	str	r2, [r7, #16]
   1a23e:	2300      	movs	r3, #0
   1a240:	617b      	str	r3, [r7, #20]
   1a242:	6938      	ldr	r0, [r7, #16]
   1a244:	6979      	ldr	r1, [r7, #20]
   1a246:	0003      	movs	r3, r0
   1a248:	0f1b      	lsrs	r3, r3, #28
   1a24a:	000c      	movs	r4, r1
   1a24c:	0124      	lsls	r4, r4, #4
   1a24e:	63fc      	str	r4, [r7, #60]	; 0x3c
   1a250:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
   1a252:	431c      	orrs	r4, r3
   1a254:	63fc      	str	r4, [r7, #60]	; 0x3c
   1a256:	0003      	movs	r3, r0
   1a258:	011b      	lsls	r3, r3, #4
   1a25a:	63bb      	str	r3, [r7, #56]	; 0x38
   1a25c:	60ba      	str	r2, [r7, #8]
   1a25e:	2300      	movs	r3, #0
   1a260:	60fb      	str	r3, [r7, #12]
   1a262:	68b8      	ldr	r0, [r7, #8]
   1a264:	68f9      	ldr	r1, [r7, #12]
   1a266:	0003      	movs	r3, r0
   1a268:	0f1b      	lsrs	r3, r3, #28
   1a26a:	000c      	movs	r4, r1
   1a26c:	0124      	lsls	r4, r4, #4
   1a26e:	637c      	str	r4, [r7, #52]	; 0x34
   1a270:	6b7c      	ldr	r4, [r7, #52]	; 0x34
   1a272:	431c      	orrs	r4, r3
   1a274:	637c      	str	r4, [r7, #52]	; 0x34
   1a276:	0003      	movs	r3, r0
   1a278:	011b      	lsls	r3, r3, #4
   1a27a:	633b      	str	r3, [r7, #48]	; 0x30
   1a27c:	0013      	movs	r3, r2
   1a27e:	005b      	lsls	r3, r3, #1
   1a280:	3301      	adds	r3, #1
   1a282:	3307      	adds	r3, #7
   1a284:	08db      	lsrs	r3, r3, #3
   1a286:	00db      	lsls	r3, r3, #3
   1a288:	466a      	mov	r2, sp
   1a28a:	1ad3      	subs	r3, r2, r3
   1a28c:	469d      	mov	sp, r3
   1a28e:	466b      	mov	r3, sp
   1a290:	3301      	adds	r3, #1
   1a292:	085b      	lsrs	r3, r3, #1
   1a294:	005b      	lsls	r3, r3, #1
   1a296:	673b      	str	r3, [r7, #112]	; 0x70
	
	/************************************************************************/
	/*Using Buffered ADC to take Readings                                   */
	/************************************************************************/
	adc_read_buffer_done = false;
   1a298:	4b88      	ldr	r3, [pc, #544]	; (1a4bc <Read_Voltage_ADC0+0x36c>)
   1a29a:	2200      	movs	r2, #0
   1a29c:	701a      	strb	r2, [r3, #0]
	uint32_t temp = xTaskGetTickCount();
   1a29e:	4b88      	ldr	r3, [pc, #544]	; (1a4c0 <Read_Voltage_ADC0+0x370>)
   1a2a0:	4798      	blx	r3
   1a2a2:	0003      	movs	r3, r0
   1a2a4:	66fb      	str	r3, [r7, #108]	; 0x6c
	while(adc_read_buffer_job(&adc_inst, samples_buffer, no_of_samples)!=STATUS_OK)
   1a2a6:	46c0      	nop			; (mov r8, r8)
   1a2a8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
   1a2aa:	2330      	movs	r3, #48	; 0x30
   1a2ac:	2250      	movs	r2, #80	; 0x50
   1a2ae:	4694      	mov	ip, r2
   1a2b0:	44bc      	add	ip, r7
   1a2b2:	4463      	add	r3, ip
   1a2b4:	881a      	ldrh	r2, [r3, #0]
   1a2b6:	4b7f      	ldr	r3, [pc, #508]	; (1a4b4 <Read_Voltage_ADC0+0x364>)
   1a2b8:	0018      	movs	r0, r3
   1a2ba:	4b82      	ldr	r3, [pc, #520]	; (1a4c4 <Read_Voltage_ADC0+0x374>)
   1a2bc:	4798      	blx	r3
   1a2be:	1e03      	subs	r3, r0, #0
   1a2c0:	d1f2      	bne.n	1a2a8 <Read_Voltage_ADC0+0x158>
	{}
	ulTaskNotifyTake(pdTRUE,100/portTICK_PERIOD_MS);
   1a2c2:	2164      	movs	r1, #100	; 0x64
   1a2c4:	2001      	movs	r0, #1
   1a2c6:	4b80      	ldr	r3, [pc, #512]	; (1a4c8 <Read_Voltage_ADC0+0x378>)
   1a2c8:	4798      	blx	r3
	/************************************************************************/
	temp = xTaskGetTickCount();
   1a2ca:	4b7d      	ldr	r3, [pc, #500]	; (1a4c0 <Read_Voltage_ADC0+0x370>)
   1a2cc:	4798      	blx	r3
   1a2ce:	0003      	movs	r3, r0
   1a2d0:	66fb      	str	r3, [r7, #108]	; 0x6c
	//while (adc_read(&adc_inst, &samples_buffer[i]) != STATUS_OK) {
	//}
	//}

	
	if(adc_read_buffer_done)
   1a2d2:	4b7a      	ldr	r3, [pc, #488]	; (1a4bc <Read_Voltage_ADC0+0x36c>)
   1a2d4:	781b      	ldrb	r3, [r3, #0]
   1a2d6:	2b00      	cmp	r3, #0
   1a2d8:	d100      	bne.n	1a2dc <Read_Voltage_ADC0+0x18c>
   1a2da:	e0d9      	b.n	1a490 <Read_Voltage_ADC0+0x340>
	{
		
		lowPassFrequency(samples_buffer,output_buffer,no_of_samples);
   1a2dc:	6fb8      	ldr	r0, [r7, #120]	; 0x78
   1a2de:	6f39      	ldr	r1, [r7, #112]	; 0x70
   1a2e0:	2330      	movs	r3, #48	; 0x30
   1a2e2:	2250      	movs	r2, #80	; 0x50
   1a2e4:	4694      	mov	ip, r2
   1a2e6:	44bc      	add	ip, r7
   1a2e8:	4463      	add	r3, ip
   1a2ea:	881b      	ldrh	r3, [r3, #0]
   1a2ec:	001a      	movs	r2, r3
   1a2ee:	4b77      	ldr	r3, [pc, #476]	; (1a4cc <Read_Voltage_ADC0+0x37c>)
   1a2f0:	4798      	blx	r3
		
		uint32_t square = 0;
   1a2f2:	2300      	movs	r3, #0
   1a2f4:	2284      	movs	r2, #132	; 0x84
   1a2f6:	18ba      	adds	r2, r7, r2
   1a2f8:	6013      	str	r3, [r2, #0]
		double  mean = 0.0;
   1a2fa:	2300      	movs	r3, #0
   1a2fc:	2400      	movs	r4, #0
   1a2fe:	663b      	str	r3, [r7, #96]	; 0x60
   1a300:	667c      	str	r4, [r7, #100]	; 0x64
		double  root = 0.0;
   1a302:	2300      	movs	r3, #0
   1a304:	2400      	movs	r4, #0
   1a306:	65bb      	str	r3, [r7, #88]	; 0x58
   1a308:	65fc      	str	r4, [r7, #92]	; 0x5c
		
		for (uint16_t i = 0; i < no_of_samples; i++)
   1a30a:	2332      	movs	r3, #50	; 0x32
   1a30c:	2250      	movs	r2, #80	; 0x50
   1a30e:	4694      	mov	ip, r2
   1a310:	44bc      	add	ip, r7
   1a312:	4463      	add	r3, ip
   1a314:	2200      	movs	r2, #0
   1a316:	801a      	strh	r2, [r3, #0]
   1a318:	e036      	b.n	1a388 <Read_Voltage_ADC0+0x238>
		{
			square += pow(output_buffer[i], 2);
   1a31a:	2332      	movs	r3, #50	; 0x32
   1a31c:	2250      	movs	r2, #80	; 0x50
   1a31e:	4694      	mov	ip, r2
   1a320:	44bc      	add	ip, r7
   1a322:	4463      	add	r3, ip
   1a324:	881a      	ldrh	r2, [r3, #0]
   1a326:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1a328:	0052      	lsls	r2, r2, #1
   1a32a:	5ad2      	ldrh	r2, [r2, r3]
   1a32c:	4b68      	ldr	r3, [pc, #416]	; (1a4d0 <Read_Voltage_ADC0+0x380>)
   1a32e:	0010      	movs	r0, r2
   1a330:	4798      	blx	r3
   1a332:	2300      	movs	r3, #0
   1a334:	2480      	movs	r4, #128	; 0x80
   1a336:	05e4      	lsls	r4, r4, #23
   1a338:	001a      	movs	r2, r3
   1a33a:	0023      	movs	r3, r4
   1a33c:	4c65      	ldr	r4, [pc, #404]	; (1a4d4 <Read_Voltage_ADC0+0x384>)
   1a33e:	47a0      	blx	r4
   1a340:	0005      	movs	r5, r0
   1a342:	000e      	movs	r6, r1
   1a344:	4b62      	ldr	r3, [pc, #392]	; (1a4d0 <Read_Voltage_ADC0+0x380>)
   1a346:	2284      	movs	r2, #132	; 0x84
   1a348:	18ba      	adds	r2, r7, r2
   1a34a:	6810      	ldr	r0, [r2, #0]
   1a34c:	4798      	blx	r3
   1a34e:	4c62      	ldr	r4, [pc, #392]	; (1a4d8 <Read_Voltage_ADC0+0x388>)
   1a350:	002a      	movs	r2, r5
   1a352:	0033      	movs	r3, r6
   1a354:	47a0      	blx	r4
   1a356:	0003      	movs	r3, r0
   1a358:	000c      	movs	r4, r1
   1a35a:	0019      	movs	r1, r3
   1a35c:	0022      	movs	r2, r4
   1a35e:	4b5f      	ldr	r3, [pc, #380]	; (1a4dc <Read_Voltage_ADC0+0x38c>)
   1a360:	0008      	movs	r0, r1
   1a362:	0011      	movs	r1, r2
   1a364:	4798      	blx	r3
   1a366:	0003      	movs	r3, r0
   1a368:	2284      	movs	r2, #132	; 0x84
   1a36a:	18ba      	adds	r2, r7, r2
   1a36c:	6013      	str	r3, [r2, #0]
		for (uint16_t i = 0; i < no_of_samples; i++)
   1a36e:	2332      	movs	r3, #50	; 0x32
   1a370:	2250      	movs	r2, #80	; 0x50
   1a372:	4694      	mov	ip, r2
   1a374:	44bc      	add	ip, r7
   1a376:	4463      	add	r3, ip
   1a378:	881a      	ldrh	r2, [r3, #0]
   1a37a:	2332      	movs	r3, #50	; 0x32
   1a37c:	2150      	movs	r1, #80	; 0x50
   1a37e:	468c      	mov	ip, r1
   1a380:	44bc      	add	ip, r7
   1a382:	4463      	add	r3, ip
   1a384:	3201      	adds	r2, #1
   1a386:	801a      	strh	r2, [r3, #0]
   1a388:	2332      	movs	r3, #50	; 0x32
   1a38a:	2250      	movs	r2, #80	; 0x50
   1a38c:	18ba      	adds	r2, r7, r2
   1a38e:	18d2      	adds	r2, r2, r3
   1a390:	2330      	movs	r3, #48	; 0x30
   1a392:	2150      	movs	r1, #80	; 0x50
   1a394:	468c      	mov	ip, r1
   1a396:	44bc      	add	ip, r7
   1a398:	4463      	add	r3, ip
   1a39a:	8812      	ldrh	r2, [r2, #0]
   1a39c:	881b      	ldrh	r3, [r3, #0]
   1a39e:	429a      	cmp	r2, r3
   1a3a0:	d3bb      	bcc.n	1a31a <Read_Voltage_ADC0+0x1ca>
		}
		
		mean = (square / (float)(no_of_samples));
   1a3a2:	4b4f      	ldr	r3, [pc, #316]	; (1a4e0 <Read_Voltage_ADC0+0x390>)
   1a3a4:	2284      	movs	r2, #132	; 0x84
   1a3a6:	18ba      	adds	r2, r7, r2
   1a3a8:	6810      	ldr	r0, [r2, #0]
   1a3aa:	4798      	blx	r3
   1a3ac:	1c04      	adds	r4, r0, #0
   1a3ae:	2330      	movs	r3, #48	; 0x30
   1a3b0:	2250      	movs	r2, #80	; 0x50
   1a3b2:	4694      	mov	ip, r2
   1a3b4:	44bc      	add	ip, r7
   1a3b6:	4463      	add	r3, ip
   1a3b8:	881a      	ldrh	r2, [r3, #0]
   1a3ba:	4b49      	ldr	r3, [pc, #292]	; (1a4e0 <Read_Voltage_ADC0+0x390>)
   1a3bc:	0010      	movs	r0, r2
   1a3be:	4798      	blx	r3
   1a3c0:	1c02      	adds	r2, r0, #0
   1a3c2:	4b48      	ldr	r3, [pc, #288]	; (1a4e4 <Read_Voltage_ADC0+0x394>)
   1a3c4:	1c11      	adds	r1, r2, #0
   1a3c6:	1c20      	adds	r0, r4, #0
   1a3c8:	4798      	blx	r3
   1a3ca:	1c03      	adds	r3, r0, #0
   1a3cc:	1c1a      	adds	r2, r3, #0
   1a3ce:	4b46      	ldr	r3, [pc, #280]	; (1a4e8 <Read_Voltage_ADC0+0x398>)
   1a3d0:	1c10      	adds	r0, r2, #0
   1a3d2:	4798      	blx	r3
   1a3d4:	0003      	movs	r3, r0
   1a3d6:	000c      	movs	r4, r1
   1a3d8:	663b      	str	r3, [r7, #96]	; 0x60
   1a3da:	667c      	str	r4, [r7, #100]	; 0x64
		// Calculate Root.
		root = sqrt(mean);
   1a3dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1a3de:	6e7c      	ldr	r4, [r7, #100]	; 0x64
   1a3e0:	0018      	movs	r0, r3
   1a3e2:	0021      	movs	r1, r4
   1a3e4:	4b41      	ldr	r3, [pc, #260]	; (1a4ec <Read_Voltage_ADC0+0x39c>)
   1a3e6:	4798      	blx	r3
   1a3e8:	0003      	movs	r3, r0
   1a3ea:	000c      	movs	r4, r1
   1a3ec:	65bb      	str	r3, [r7, #88]	; 0x58
   1a3ee:	65fc      	str	r4, [r7, #92]	; 0x5c

		//
		temp = (root-20)*655/1000;
   1a3f0:	4c3f      	ldr	r4, [pc, #252]	; (1a4f0 <Read_Voltage_ADC0+0x3a0>)
   1a3f2:	2200      	movs	r2, #0
   1a3f4:	4b3f      	ldr	r3, [pc, #252]	; (1a4f4 <Read_Voltage_ADC0+0x3a4>)
   1a3f6:	6db8      	ldr	r0, [r7, #88]	; 0x58
   1a3f8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   1a3fa:	47a0      	blx	r4
   1a3fc:	0003      	movs	r3, r0
   1a3fe:	000c      	movs	r4, r1
   1a400:	0018      	movs	r0, r3
   1a402:	0021      	movs	r1, r4
   1a404:	4c3c      	ldr	r4, [pc, #240]	; (1a4f8 <Read_Voltage_ADC0+0x3a8>)
   1a406:	2200      	movs	r2, #0
   1a408:	4b3c      	ldr	r3, [pc, #240]	; (1a4fc <Read_Voltage_ADC0+0x3ac>)
   1a40a:	47a0      	blx	r4
   1a40c:	0003      	movs	r3, r0
   1a40e:	000c      	movs	r4, r1
   1a410:	0018      	movs	r0, r3
   1a412:	0021      	movs	r1, r4
   1a414:	4c3a      	ldr	r4, [pc, #232]	; (1a500 <Read_Voltage_ADC0+0x3b0>)
   1a416:	2200      	movs	r2, #0
   1a418:	4b3a      	ldr	r3, [pc, #232]	; (1a504 <Read_Voltage_ADC0+0x3b4>)
   1a41a:	47a0      	blx	r4
   1a41c:	0003      	movs	r3, r0
   1a41e:	000c      	movs	r4, r1
   1a420:	0019      	movs	r1, r3
   1a422:	0022      	movs	r2, r4
   1a424:	4b2d      	ldr	r3, [pc, #180]	; (1a4dc <Read_Voltage_ADC0+0x38c>)
   1a426:	0008      	movs	r0, r1
   1a428:	0011      	movs	r1, r2
   1a42a:	4798      	blx	r3
   1a42c:	0003      	movs	r3, r0
   1a42e:	66fb      	str	r3, [r7, #108]	; 0x6c
		if (abs(Analog_Parameter_Struct.PhaseRY_Voltage - temp)> 80)
   1a430:	4b35      	ldr	r3, [pc, #212]	; (1a508 <Read_Voltage_ADC0+0x3b8>)
   1a432:	681a      	ldr	r2, [r3, #0]
   1a434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1a436:	1ad3      	subs	r3, r2, r3
   1a438:	17da      	asrs	r2, r3, #31
   1a43a:	189b      	adds	r3, r3, r2
   1a43c:	4053      	eors	r3, r2
   1a43e:	2b50      	cmp	r3, #80	; 0x50
   1a440:	dd15      	ble.n	1a46e <Read_Voltage_ADC0+0x31e>
		{
			delay_us(1);
   1a442:	2000      	movs	r0, #0
   1a444:	4b16      	ldr	r3, [pc, #88]	; (1a4a0 <Read_Voltage_ADC0+0x350>)
   1a446:	4798      	blx	r3
   1a448:	0003      	movs	r3, r0
   1a44a:	603b      	str	r3, [r7, #0]
   1a44c:	2300      	movs	r3, #0
   1a44e:	607b      	str	r3, [r7, #4]
   1a450:	4b2e      	ldr	r3, [pc, #184]	; (1a50c <Read_Voltage_ADC0+0x3bc>)
   1a452:	2400      	movs	r4, #0
   1a454:	6838      	ldr	r0, [r7, #0]
   1a456:	6879      	ldr	r1, [r7, #4]
   1a458:	18c0      	adds	r0, r0, r3
   1a45a:	4161      	adcs	r1, r4
   1a45c:	4c12      	ldr	r4, [pc, #72]	; (1a4a8 <Read_Voltage_ADC0+0x358>)
   1a45e:	4a2c      	ldr	r2, [pc, #176]	; (1a510 <Read_Voltage_ADC0+0x3c0>)
   1a460:	2300      	movs	r3, #0
   1a462:	47a0      	blx	r4
   1a464:	0003      	movs	r3, r0
   1a466:	000c      	movs	r4, r1
   1a468:	0018      	movs	r0, r3
   1a46a:	4b11      	ldr	r3, [pc, #68]	; (1a4b0 <Read_Voltage_ADC0+0x360>)
   1a46c:	4798      	blx	r3
		}
		//

		lowPassFrequency(samples_buffer,output_buffer,no_of_samples);
   1a46e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
   1a470:	6f39      	ldr	r1, [r7, #112]	; 0x70
   1a472:	2330      	movs	r3, #48	; 0x30
   1a474:	2250      	movs	r2, #80	; 0x50
   1a476:	4694      	mov	ip, r2
   1a478:	44bc      	add	ip, r7
   1a47a:	4463      	add	r3, ip
   1a47c:	881b      	ldrh	r3, [r3, #0]
   1a47e:	001a      	movs	r2, r3
   1a480:	4b12      	ldr	r3, [pc, #72]	; (1a4cc <Read_Voltage_ADC0+0x37c>)
   1a482:	4798      	blx	r3
		
		return (uint32_t)root;
   1a484:	4b15      	ldr	r3, [pc, #84]	; (1a4dc <Read_Voltage_ADC0+0x38c>)
   1a486:	6db8      	ldr	r0, [r7, #88]	; 0x58
   1a488:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   1a48a:	4798      	blx	r3
   1a48c:	0003      	movs	r3, r0
   1a48e:	e000      	b.n	1a492 <Read_Voltage_ADC0+0x342>
	}
	else
	{
		return 0;
   1a490:	2300      	movs	r3, #0
   1a492:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   1a494:	4695      	mov	sp, r2
	//}
	//}
	//}
	//
	//return samples_buffer[5]; //0,1,2,3,4 are considered as voltage spikes
}
   1a496:	0018      	movs	r0, r3
   1a498:	46bd      	mov	sp, r7
   1a49a:	b023      	add	sp, #140	; 0x8c
   1a49c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a49e:	46c0      	nop			; (mov r8, r8)
   1a4a0:	0002505d 	.word	0x0002505d
   1a4a4:	00001b57 	.word	0x00001b57
   1a4a8:	00026fe5 	.word	0x00026fe5
   1a4ac:	00001b58 	.word	0x00001b58
   1a4b0:	20000001 	.word	0x20000001
   1a4b4:	2000081c 	.word	0x2000081c
   1a4b8:	00019435 	.word	0x00019435
   1a4bc:	20000745 	.word	0x20000745
   1a4c0:	000209cd 	.word	0x000209cd
   1a4c4:	0001e0d9 	.word	0x0001e0d9
   1a4c8:	000212e1 	.word	0x000212e1
   1a4cc:	0001a515 	.word	0x0001a515
   1a4d0:	00029635 	.word	0x00029635
   1a4d4:	000259e9 	.word	0x000259e9
   1a4d8:	00027b55 	.word	0x00027b55
   1a4dc:	00027079 	.word	0x00027079
   1a4e0:	00027ac9 	.word	0x00027ac9
   1a4e4:	00027559 	.word	0x00027559
   1a4e8:	000296a5 	.word	0x000296a5
   1a4ec:	00025d41 	.word	0x00025d41
   1a4f0:	00028edd 	.word	0x00028edd
   1a4f4:	40340000 	.word	0x40340000
   1a4f8:	000289dd 	.word	0x000289dd
   1a4fc:	40847800 	.word	0x40847800
   1a500:	00028175 	.word	0x00028175
   1a504:	408f4000 	.word	0x408f4000
   1a508:	200006e8 	.word	0x200006e8
   1a50c:	006acfbf 	.word	0x006acfbf
   1a510:	006acfc0 	.word	0x006acfc0

0001a514 <lowPassFrequency>:

void lowPassFrequency(uint16_t* input, uint16_t* output, int points)
{
   1a514:	b5b0      	push	{r4, r5, r7, lr}
   1a516:	b08c      	sub	sp, #48	; 0x30
   1a518:	af00      	add	r7, sp, #0
   1a51a:	6178      	str	r0, [r7, #20]
   1a51c:	6139      	str	r1, [r7, #16]
   1a51e:	60fa      	str	r2, [r7, #12]
			//// calculations in fixed-point using SmoothData
			//SmoothDataINT = SmoothDataFP>> FP_Shift;
		//}
	//}

	float RC = 1.0/(100*2*3.14);  //0.0015923566
   1a520:	4b34      	ldr	r3, [pc, #208]	; (1a5f4 <lowPassFrequency+0xe0>)
   1a522:	62bb      	str	r3, [r7, #40]	; 0x28
	float dt = 1.0/25600;//0.0000390625
   1a524:	4b34      	ldr	r3, [pc, #208]	; (1a5f8 <lowPassFrequency+0xe4>)
   1a526:	627b      	str	r3, [r7, #36]	; 0x24
	double alpha = dt/(RC+dt);
   1a528:	4b34      	ldr	r3, [pc, #208]	; (1a5fc <lowPassFrequency+0xe8>)
   1a52a:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1a52c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1a52e:	4798      	blx	r3
   1a530:	1c03      	adds	r3, r0, #0
   1a532:	1c1a      	adds	r2, r3, #0
   1a534:	4b32      	ldr	r3, [pc, #200]	; (1a600 <lowPassFrequency+0xec>)
   1a536:	1c11      	adds	r1, r2, #0
   1a538:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1a53a:	4798      	blx	r3
   1a53c:	1c03      	adds	r3, r0, #0
   1a53e:	1c1a      	adds	r2, r3, #0
   1a540:	4b30      	ldr	r3, [pc, #192]	; (1a604 <lowPassFrequency+0xf0>)
   1a542:	1c10      	adds	r0, r2, #0
   1a544:	4798      	blx	r3
   1a546:	0003      	movs	r3, r0
   1a548:	000c      	movs	r4, r1
   1a54a:	61bb      	str	r3, [r7, #24]
   1a54c:	61fc      	str	r4, [r7, #28]
	//float alpha = 0.1;
	output[0] = input[0];
   1a54e:	697b      	ldr	r3, [r7, #20]
   1a550:	881a      	ldrh	r2, [r3, #0]
   1a552:	693b      	ldr	r3, [r7, #16]
   1a554:	801a      	strh	r2, [r3, #0]
	
	for(int i = 1; i < points; ++i)
   1a556:	2301      	movs	r3, #1
   1a558:	62fb      	str	r3, [r7, #44]	; 0x2c
   1a55a:	e042      	b.n	1a5e2 <lowPassFrequency+0xce>
	{
		//output[i] = output[i-1] + (alpha*(input[i] - output[i-1]));
		output[i] = ((float)output[i-1]) - (alpha*((float)(output[i-1] - input[i])));
   1a55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a55e:	005b      	lsls	r3, r3, #1
   1a560:	693a      	ldr	r2, [r7, #16]
   1a562:	18d4      	adds	r4, r2, r3
   1a564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a566:	4a28      	ldr	r2, [pc, #160]	; (1a608 <lowPassFrequency+0xf4>)
   1a568:	4694      	mov	ip, r2
   1a56a:	4463      	add	r3, ip
   1a56c:	005b      	lsls	r3, r3, #1
   1a56e:	693a      	ldr	r2, [r7, #16]
   1a570:	18d3      	adds	r3, r2, r3
   1a572:	881a      	ldrh	r2, [r3, #0]
   1a574:	4b25      	ldr	r3, [pc, #148]	; (1a60c <lowPassFrequency+0xf8>)
   1a576:	0010      	movs	r0, r2
   1a578:	4798      	blx	r3
   1a57a:	1c02      	adds	r2, r0, #0
   1a57c:	4b21      	ldr	r3, [pc, #132]	; (1a604 <lowPassFrequency+0xf0>)
   1a57e:	1c10      	adds	r0, r2, #0
   1a580:	4798      	blx	r3
   1a582:	6038      	str	r0, [r7, #0]
   1a584:	6079      	str	r1, [r7, #4]
   1a586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a588:	4a1f      	ldr	r2, [pc, #124]	; (1a608 <lowPassFrequency+0xf4>)
   1a58a:	4694      	mov	ip, r2
   1a58c:	4463      	add	r3, ip
   1a58e:	005b      	lsls	r3, r3, #1
   1a590:	693a      	ldr	r2, [r7, #16]
   1a592:	18d3      	adds	r3, r2, r3
   1a594:	881b      	ldrh	r3, [r3, #0]
   1a596:	0019      	movs	r1, r3
   1a598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a59a:	005b      	lsls	r3, r3, #1
   1a59c:	697a      	ldr	r2, [r7, #20]
   1a59e:	18d3      	adds	r3, r2, r3
   1a5a0:	881b      	ldrh	r3, [r3, #0]
   1a5a2:	1aca      	subs	r2, r1, r3
   1a5a4:	4b1a      	ldr	r3, [pc, #104]	; (1a610 <lowPassFrequency+0xfc>)
   1a5a6:	0010      	movs	r0, r2
   1a5a8:	4798      	blx	r3
   1a5aa:	1c02      	adds	r2, r0, #0
   1a5ac:	4b15      	ldr	r3, [pc, #84]	; (1a604 <lowPassFrequency+0xf0>)
   1a5ae:	1c10      	adds	r0, r2, #0
   1a5b0:	4798      	blx	r3
   1a5b2:	4d18      	ldr	r5, [pc, #96]	; (1a614 <lowPassFrequency+0x100>)
   1a5b4:	69ba      	ldr	r2, [r7, #24]
   1a5b6:	69fb      	ldr	r3, [r7, #28]
   1a5b8:	47a8      	blx	r5
   1a5ba:	0002      	movs	r2, r0
   1a5bc:	000b      	movs	r3, r1
   1a5be:	4d16      	ldr	r5, [pc, #88]	; (1a618 <lowPassFrequency+0x104>)
   1a5c0:	6838      	ldr	r0, [r7, #0]
   1a5c2:	6879      	ldr	r1, [r7, #4]
   1a5c4:	47a8      	blx	r5
   1a5c6:	0002      	movs	r2, r0
   1a5c8:	000b      	movs	r3, r1
   1a5ca:	0011      	movs	r1, r2
   1a5cc:	001a      	movs	r2, r3
   1a5ce:	4b13      	ldr	r3, [pc, #76]	; (1a61c <lowPassFrequency+0x108>)
   1a5d0:	0008      	movs	r0, r1
   1a5d2:	0011      	movs	r1, r2
   1a5d4:	4798      	blx	r3
   1a5d6:	0003      	movs	r3, r0
   1a5d8:	b29b      	uxth	r3, r3
   1a5da:	8023      	strh	r3, [r4, #0]
	for(int i = 1; i < points; ++i)
   1a5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a5de:	3301      	adds	r3, #1
   1a5e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   1a5e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1a5e4:	68fb      	ldr	r3, [r7, #12]
   1a5e6:	429a      	cmp	r2, r3
   1a5e8:	dbb8      	blt.n	1a55c <lowPassFrequency+0x48>
	}
}
   1a5ea:	46c0      	nop			; (mov r8, r8)
   1a5ec:	46bd      	mov	sp, r7
   1a5ee:	b00c      	add	sp, #48	; 0x30
   1a5f0:	bdb0      	pop	{r4, r5, r7, pc}
   1a5f2:	46c0      	nop			; (mov r8, r8)
   1a5f4:	3ad0b6a0 	.word	0x3ad0b6a0
   1a5f8:	3823d70a 	.word	0x3823d70a
   1a5fc:	00027235 	.word	0x00027235
   1a600:	00027559 	.word	0x00027559
   1a604:	000296a5 	.word	0x000296a5
   1a608:	7fffffff 	.word	0x7fffffff
   1a60c:	00027ac9 	.word	0x00027ac9
   1a610:	00027a29 	.word	0x00027a29
   1a614:	000289dd 	.word	0x000289dd
   1a618:	00028edd 	.word	0x00028edd
   1a61c:	00027079 	.word	0x00027079

0001a620 <autoSetCurrent>:


void autoSetCurrent(void)
{
   1a620:	b580      	push	{r7, lr}
   1a622:	b084      	sub	sp, #16
   1a624:	af00      	add	r7, sp, #0
	if(getMotorState() && !startSequenceOn && !starDeltaTimerOn && !stopSequenceOn && getAllPhaseState())
   1a626:	4b2e      	ldr	r3, [pc, #184]	; (1a6e0 <autoSetCurrent+0xc0>)
   1a628:	4798      	blx	r3
   1a62a:	1e03      	subs	r3, r0, #0
   1a62c:	d04e      	beq.n	1a6cc <autoSetCurrent+0xac>
   1a62e:	4b2d      	ldr	r3, [pc, #180]	; (1a6e4 <autoSetCurrent+0xc4>)
   1a630:	781b      	ldrb	r3, [r3, #0]
   1a632:	2201      	movs	r2, #1
   1a634:	4053      	eors	r3, r2
   1a636:	b2db      	uxtb	r3, r3
   1a638:	2b00      	cmp	r3, #0
   1a63a:	d047      	beq.n	1a6cc <autoSetCurrent+0xac>
   1a63c:	4b2a      	ldr	r3, [pc, #168]	; (1a6e8 <autoSetCurrent+0xc8>)
   1a63e:	781b      	ldrb	r3, [r3, #0]
   1a640:	2201      	movs	r2, #1
   1a642:	4053      	eors	r3, r2
   1a644:	b2db      	uxtb	r3, r3
   1a646:	2b00      	cmp	r3, #0
   1a648:	d040      	beq.n	1a6cc <autoSetCurrent+0xac>
   1a64a:	4b28      	ldr	r3, [pc, #160]	; (1a6ec <autoSetCurrent+0xcc>)
   1a64c:	781b      	ldrb	r3, [r3, #0]
   1a64e:	2201      	movs	r2, #1
   1a650:	4053      	eors	r3, r2
   1a652:	b2db      	uxtb	r3, r3
   1a654:	2b00      	cmp	r3, #0
   1a656:	d039      	beq.n	1a6cc <autoSetCurrent+0xac>
   1a658:	4b25      	ldr	r3, [pc, #148]	; (1a6f0 <autoSetCurrent+0xd0>)
   1a65a:	4798      	blx	r3
   1a65c:	1e03      	subs	r3, r0, #0
   1a65e:	d035      	beq.n	1a6cc <autoSetCurrent+0xac>
	{
		uint32_t ADCcurrent = Analog_Parameter_Struct.Motor_Current;
   1a660:	4b24      	ldr	r3, [pc, #144]	; (1a6f4 <autoSetCurrent+0xd4>)
   1a662:	691b      	ldr	r3, [r3, #16]
   1a664:	60fb      	str	r3, [r7, #12]
		//ADCcurrent = Read_ADC0(ADC_POSITIVE_INPUT_PIN16,200);
		//xSemaphoreGive(xADC_Semaphore);
		//}
		
		
		if(ADCcurrent<250)     //ADC VALUE FOR 2.5A
   1a666:	68fb      	ldr	r3, [r7, #12]
   1a668:	2bf9      	cmp	r3, #249	; 0xf9
   1a66a:	d806      	bhi.n	1a67a <autoSetCurrent+0x5a>
		{
			setCurrentDetection(false);
   1a66c:	2000      	movs	r0, #0
   1a66e:	4b22      	ldr	r3, [pc, #136]	; (1a6f8 <autoSetCurrent+0xd8>)
   1a670:	4798      	blx	r3
			setMotorMGRResponse('Y');		//ampere cleared
   1a672:	2059      	movs	r0, #89	; 0x59
   1a674:	4b21      	ldr	r3, [pc, #132]	; (1a6fc <autoSetCurrent+0xdc>)
   1a676:	4798      	blx	r3
			return;
   1a678:	e02e      	b.n	1a6d8 <autoSetCurrent+0xb8>
		}
		
		uint32_t tempUnder = ADCcurrent  * user_settings_parameter_struct.underloadPerAddress / 100;
   1a67a:	4b21      	ldr	r3, [pc, #132]	; (1a700 <autoSetCurrent+0xe0>)
   1a67c:	7f1b      	ldrb	r3, [r3, #28]
   1a67e:	001a      	movs	r2, r3
   1a680:	68fb      	ldr	r3, [r7, #12]
   1a682:	435a      	muls	r2, r3
   1a684:	4b1f      	ldr	r3, [pc, #124]	; (1a704 <autoSetCurrent+0xe4>)
   1a686:	2164      	movs	r1, #100	; 0x64
   1a688:	0010      	movs	r0, r2
   1a68a:	4798      	blx	r3
   1a68c:	0003      	movs	r3, r0
   1a68e:	60bb      	str	r3, [r7, #8]
		uint32_t tempOver = ADCcurrent  * user_settings_parameter_struct.overloadPerAddress / 100;
   1a690:	4b1b      	ldr	r3, [pc, #108]	; (1a700 <autoSetCurrent+0xe0>)
   1a692:	7f5b      	ldrb	r3, [r3, #29]
   1a694:	001a      	movs	r2, r3
   1a696:	68fb      	ldr	r3, [r7, #12]
   1a698:	435a      	muls	r2, r3
   1a69a:	4b1a      	ldr	r3, [pc, #104]	; (1a704 <autoSetCurrent+0xe4>)
   1a69c:	2164      	movs	r1, #100	; 0x64
   1a69e:	0010      	movs	r0, r2
   1a6a0:	4798      	blx	r3
   1a6a2:	0003      	movs	r3, r0
   1a6a4:	607b      	str	r3, [r7, #4]

		setNormalLoadValue(ADCcurrent);
   1a6a6:	68fb      	ldr	r3, [r7, #12]
   1a6a8:	0018      	movs	r0, r3
   1a6aa:	4b17      	ldr	r3, [pc, #92]	; (1a708 <autoSetCurrent+0xe8>)
   1a6ac:	4798      	blx	r3
		setUnderloadValue(tempUnder);
   1a6ae:	68bb      	ldr	r3, [r7, #8]
   1a6b0:	0018      	movs	r0, r3
   1a6b2:	4b16      	ldr	r3, [pc, #88]	; (1a70c <autoSetCurrent+0xec>)
   1a6b4:	4798      	blx	r3
		setOverloadValue(tempOver);
   1a6b6:	687b      	ldr	r3, [r7, #4]
   1a6b8:	0018      	movs	r0, r3
   1a6ba:	4b15      	ldr	r3, [pc, #84]	; (1a710 <autoSetCurrent+0xf0>)
   1a6bc:	4798      	blx	r3
		setCurrentDetection(true);
   1a6be:	2001      	movs	r0, #1
   1a6c0:	4b0d      	ldr	r3, [pc, #52]	; (1a6f8 <autoSetCurrent+0xd8>)
   1a6c2:	4798      	blx	r3
		setMotorMGRResponse('K');		//ampere settings complete
   1a6c4:	204b      	movs	r0, #75	; 0x4b
   1a6c6:	4b0d      	ldr	r3, [pc, #52]	; (1a6fc <autoSetCurrent+0xdc>)
   1a6c8:	4798      	blx	r3
	{
   1a6ca:	e005      	b.n	1a6d8 <autoSetCurrent+0xb8>
	}
	else
	{
		setCurrentDetection(false);
   1a6cc:	2000      	movs	r0, #0
   1a6ce:	4b0a      	ldr	r3, [pc, #40]	; (1a6f8 <autoSetCurrent+0xd8>)
   1a6d0:	4798      	blx	r3
		setMotorMGRResponse('Y');		//ampere cleared
   1a6d2:	2059      	movs	r0, #89	; 0x59
   1a6d4:	4b09      	ldr	r3, [pc, #36]	; (1a6fc <autoSetCurrent+0xdc>)
   1a6d6:	4798      	blx	r3
	}
}
   1a6d8:	46bd      	mov	sp, r7
   1a6da:	b004      	add	sp, #16
   1a6dc:	bd80      	pop	{r7, pc}
   1a6de:	46c0      	nop			; (mov r8, r8)
   1a6e0:	0001b311 	.word	0x0001b311
   1a6e4:	20000799 	.word	0x20000799
   1a6e8:	2000079b 	.word	0x2000079b
   1a6ec:	20000788 	.word	0x20000788
   1a6f0:	0001b2a9 	.word	0x0001b2a9
   1a6f4:	200006e8 	.word	0x200006e8
   1a6f8:	00011985 	.word	0x00011985
   1a6fc:	00014d31 	.word	0x00014d31
   1a700:	20000654 	.word	0x20000654
   1a704:	00026c7d 	.word	0x00026c7d
   1a708:	00011941 	.word	0x00011941
   1a70c:	000118b9 	.word	0x000118b9
   1a710:	000118fd 	.word	0x000118fd

0001a714 <speakAmpere>:

void speakAmpere(void)
{
   1a714:	b580      	push	{r7, lr}
   1a716:	b084      	sub	sp, #16
   1a718:	af00      	add	r7, sp, #0
	if(getMotorState())
   1a71a:	4b0d      	ldr	r3, [pc, #52]	; (1a750 <speakAmpere+0x3c>)
   1a71c:	4798      	blx	r3
   1a71e:	1e03      	subs	r3, r0, #0
   1a720:	d00f      	beq.n	1a742 <speakAmpere+0x2e>
	{
		char cTemp[8];
		
		uint32_t ADCcurrent = Analog_Parameter_Struct.Motor_Current_IntPart;
   1a722:	4b0c      	ldr	r3, [pc, #48]	; (1a754 <speakAmpere+0x40>)
   1a724:	8a9b      	ldrh	r3, [r3, #20]
   1a726:	b29b      	uxth	r3, r3
   1a728:	60fb      	str	r3, [r7, #12]
		//xSemaphoreGive(xADC_Semaphore);
		//ADCcurrent = (ADCcurrent*7225)/100000;
		//xSemaphoreGive(xADC_Semaphore);
		//}
		
		utoa(ADCcurrent, cTemp, 10);
   1a72a:	1d39      	adds	r1, r7, #4
   1a72c:	68fb      	ldr	r3, [r7, #12]
   1a72e:	220a      	movs	r2, #10
   1a730:	0018      	movs	r0, r3
   1a732:	4b09      	ldr	r3, [pc, #36]	; (1a758 <speakAmpere+0x44>)
   1a734:	4798      	blx	r3
		playRepeatedFiles(cTemp);
   1a736:	1d3b      	adds	r3, r7, #4
   1a738:	0018      	movs	r0, r3
   1a73a:	4b08      	ldr	r3, [pc, #32]	; (1a75c <speakAmpere+0x48>)
   1a73c:	4798      	blx	r3
		return;
   1a73e:	46c0      	nop			; (mov r8, r8)
   1a740:	e002      	b.n	1a748 <speakAmpere+0x34>
	}
	setMotorMGRResponse('-');
   1a742:	202d      	movs	r0, #45	; 0x2d
   1a744:	4b06      	ldr	r3, [pc, #24]	; (1a760 <speakAmpere+0x4c>)
   1a746:	4798      	blx	r3
}
   1a748:	46bd      	mov	sp, r7
   1a74a:	b004      	add	sp, #16
   1a74c:	bd80      	pop	{r7, pc}
   1a74e:	46c0      	nop			; (mov r8, r8)
   1a750:	0001b311 	.word	0x0001b311
   1a754:	200006e8 	.word	0x200006e8
   1a758:	00029dfd 	.word	0x00029dfd
   1a75c:	000149f5 	.word	0x000149f5
   1a760:	00014d31 	.word	0x00014d31

0001a764 <PR2_ISR>:

void PR2_ISR(void)
{
   1a764:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a766:	b08b      	sub	sp, #44	; 0x2c
   1a768:	af00      	add	r7, sp, #0
	if (ucharPhase_Seq_Check_Flag==1)
   1a76a:	4b77      	ldr	r3, [pc, #476]	; (1a948 <PR2_ISR+0x1e4>)
   1a76c:	781b      	ldrb	r3, [r3, #0]
   1a76e:	b2db      	uxtb	r3, r3
   1a770:	2b01      	cmp	r3, #1
   1a772:	d000      	beq.n	1a776 <PR2_ISR+0x12>
   1a774:	e0e3      	b.n	1a93e <PR2_ISR+0x1da>
	{
		ucharPhase_1_Timer_Counter=0;
   1a776:	4b75      	ldr	r3, [pc, #468]	; (1a94c <PR2_ISR+0x1e8>)
   1a778:	2200      	movs	r2, #0
   1a77a:	701a      	strb	r2, [r3, #0]
		delay_ms(5);
   1a77c:	2000      	movs	r0, #0
   1a77e:	4b74      	ldr	r3, [pc, #464]	; (1a950 <PR2_ISR+0x1ec>)
   1a780:	4798      	blx	r3
   1a782:	0003      	movs	r3, r0
   1a784:	60bb      	str	r3, [r7, #8]
   1a786:	2300      	movs	r3, #0
   1a788:	60fb      	str	r3, [r7, #12]
   1a78a:	68bb      	ldr	r3, [r7, #8]
   1a78c:	68fc      	ldr	r4, [r7, #12]
   1a78e:	0f9a      	lsrs	r2, r3, #30
   1a790:	00a0      	lsls	r0, r4, #2
   1a792:	61f8      	str	r0, [r7, #28]
   1a794:	69f8      	ldr	r0, [r7, #28]
   1a796:	4310      	orrs	r0, r2
   1a798:	61f8      	str	r0, [r7, #28]
   1a79a:	009b      	lsls	r3, r3, #2
   1a79c:	61bb      	str	r3, [r7, #24]
   1a79e:	69bb      	ldr	r3, [r7, #24]
   1a7a0:	69fc      	ldr	r4, [r7, #28]
   1a7a2:	68b9      	ldr	r1, [r7, #8]
   1a7a4:	68fa      	ldr	r2, [r7, #12]
   1a7a6:	185b      	adds	r3, r3, r1
   1a7a8:	4154      	adcs	r4, r2
   1a7aa:	496a      	ldr	r1, [pc, #424]	; (1a954 <PR2_ISR+0x1f0>)
   1a7ac:	2200      	movs	r2, #0
   1a7ae:	185b      	adds	r3, r3, r1
   1a7b0:	4154      	adcs	r4, r2
   1a7b2:	0018      	movs	r0, r3
   1a7b4:	0021      	movs	r1, r4
   1a7b6:	4c68      	ldr	r4, [pc, #416]	; (1a958 <PR2_ISR+0x1f4>)
   1a7b8:	4a68      	ldr	r2, [pc, #416]	; (1a95c <PR2_ISR+0x1f8>)
   1a7ba:	2300      	movs	r3, #0
   1a7bc:	47a0      	blx	r4
   1a7be:	0003      	movs	r3, r0
   1a7c0:	000c      	movs	r4, r1
   1a7c2:	0018      	movs	r0, r3
   1a7c4:	4b66      	ldr	r3, [pc, #408]	; (1a960 <PR2_ISR+0x1fc>)
   1a7c6:	4798      	blx	r3
		volatile unsigned char ucharHigh_Flag=0,ucharLow_Flag=0,ucharHigh_To_Low_Flag=0,ucharLow_To_High_Flag=0;
   1a7c8:	2323      	movs	r3, #35	; 0x23
   1a7ca:	18fb      	adds	r3, r7, r3
   1a7cc:	2200      	movs	r2, #0
   1a7ce:	701a      	strb	r2, [r3, #0]
   1a7d0:	2322      	movs	r3, #34	; 0x22
   1a7d2:	18fb      	adds	r3, r7, r3
   1a7d4:	2200      	movs	r2, #0
   1a7d6:	701a      	strb	r2, [r3, #0]
   1a7d8:	2321      	movs	r3, #33	; 0x21
   1a7da:	18fb      	adds	r3, r7, r3
   1a7dc:	2200      	movs	r2, #0
   1a7de:	701a      	strb	r2, [r3, #0]
   1a7e0:	2320      	movs	r3, #32
   1a7e2:	18fb      	adds	r3, r7, r3
   1a7e4:	2200      	movs	r2, #0
   1a7e6:	701a      	strb	r2, [r3, #0]
		if (port_pin_get_input_level(PR2_PIN)==HIGH)
   1a7e8:	202b      	movs	r0, #43	; 0x2b
   1a7ea:	4b5e      	ldr	r3, [pc, #376]	; (1a964 <PR2_ISR+0x200>)
   1a7ec:	4798      	blx	r3
   1a7ee:	1e03      	subs	r3, r0, #0
   1a7f0:	d100      	bne.n	1a7f4 <PR2_ISR+0x90>
   1a7f2:	e08e      	b.n	1a912 <PR2_ISR+0x1ae>
		{
			for (unsigned int uintLoop=0;uintLoop<120;uintLoop++)
   1a7f4:	2300      	movs	r3, #0
   1a7f6:	627b      	str	r3, [r7, #36]	; 0x24
   1a7f8:	e085      	b.n	1a906 <PR2_ISR+0x1a2>
			{
				delay_us(25);
   1a7fa:	2000      	movs	r0, #0
   1a7fc:	4b54      	ldr	r3, [pc, #336]	; (1a950 <PR2_ISR+0x1ec>)
   1a7fe:	4798      	blx	r3
   1a800:	0003      	movs	r3, r0
   1a802:	603b      	str	r3, [r7, #0]
   1a804:	2300      	movs	r3, #0
   1a806:	607b      	str	r3, [r7, #4]
   1a808:	6838      	ldr	r0, [r7, #0]
   1a80a:	6879      	ldr	r1, [r7, #4]
   1a80c:	0003      	movs	r3, r0
   1a80e:	000c      	movs	r4, r1
   1a810:	0f9a      	lsrs	r2, r3, #30
   1a812:	00a6      	lsls	r6, r4, #2
   1a814:	4316      	orrs	r6, r2
   1a816:	009d      	lsls	r5, r3, #2
   1a818:	0003      	movs	r3, r0
   1a81a:	000c      	movs	r4, r1
   1a81c:	195b      	adds	r3, r3, r5
   1a81e:	4174      	adcs	r4, r6
   1a820:	0f9a      	lsrs	r2, r3, #30
   1a822:	00a1      	lsls	r1, r4, #2
   1a824:	6179      	str	r1, [r7, #20]
   1a826:	6979      	ldr	r1, [r7, #20]
   1a828:	4311      	orrs	r1, r2
   1a82a:	6179      	str	r1, [r7, #20]
   1a82c:	009a      	lsls	r2, r3, #2
   1a82e:	613a      	str	r2, [r7, #16]
   1a830:	6939      	ldr	r1, [r7, #16]
   1a832:	697a      	ldr	r2, [r7, #20]
   1a834:	185b      	adds	r3, r3, r1
   1a836:	4154      	adcs	r4, r2
   1a838:	494b      	ldr	r1, [pc, #300]	; (1a968 <PR2_ISR+0x204>)
   1a83a:	2200      	movs	r2, #0
   1a83c:	185b      	adds	r3, r3, r1
   1a83e:	4154      	adcs	r4, r2
   1a840:	0018      	movs	r0, r3
   1a842:	0021      	movs	r1, r4
   1a844:	4c44      	ldr	r4, [pc, #272]	; (1a958 <PR2_ISR+0x1f4>)
   1a846:	4a49      	ldr	r2, [pc, #292]	; (1a96c <PR2_ISR+0x208>)
   1a848:	2300      	movs	r3, #0
   1a84a:	47a0      	blx	r4
   1a84c:	0003      	movs	r3, r0
   1a84e:	000c      	movs	r4, r1
   1a850:	0018      	movs	r0, r3
   1a852:	4b43      	ldr	r3, [pc, #268]	; (1a960 <PR2_ISR+0x1fc>)
   1a854:	4798      	blx	r3
				if ((port_pin_get_input_level(PR1_PIN)==HIGH)&&(ucharHigh_Flag==0))
   1a856:	202a      	movs	r0, #42	; 0x2a
   1a858:	4b42      	ldr	r3, [pc, #264]	; (1a964 <PR2_ISR+0x200>)
   1a85a:	4798      	blx	r3
   1a85c:	1e03      	subs	r3, r0, #0
   1a85e:	d014      	beq.n	1a88a <PR2_ISR+0x126>
   1a860:	2323      	movs	r3, #35	; 0x23
   1a862:	18fb      	adds	r3, r7, r3
   1a864:	781b      	ldrb	r3, [r3, #0]
   1a866:	b2db      	uxtb	r3, r3
   1a868:	2b00      	cmp	r3, #0
   1a86a:	d10e      	bne.n	1a88a <PR2_ISR+0x126>
				{
					ucharHigh_Flag=1;
   1a86c:	2323      	movs	r3, #35	; 0x23
   1a86e:	18fb      	adds	r3, r7, r3
   1a870:	2201      	movs	r2, #1
   1a872:	701a      	strb	r2, [r3, #0]
					if (ucharLow_Flag==1)
   1a874:	2322      	movs	r3, #34	; 0x22
   1a876:	18fb      	adds	r3, r7, r3
   1a878:	781b      	ldrb	r3, [r3, #0]
   1a87a:	b2db      	uxtb	r3, r3
   1a87c:	2b01      	cmp	r3, #1
   1a87e:	d104      	bne.n	1a88a <PR2_ISR+0x126>
					{
						ucharLow_To_High_Flag=1;
   1a880:	2320      	movs	r3, #32
   1a882:	18fb      	adds	r3, r7, r3
   1a884:	2201      	movs	r2, #1
   1a886:	701a      	strb	r2, [r3, #0]
						break;
   1a888:	e043      	b.n	1a912 <PR2_ISR+0x1ae>
					}
				}
				if ((port_pin_get_input_level(PR1_PIN)==LOW)&&(ucharLow_Flag==0))
   1a88a:	202a      	movs	r0, #42	; 0x2a
   1a88c:	4b35      	ldr	r3, [pc, #212]	; (1a964 <PR2_ISR+0x200>)
   1a88e:	4798      	blx	r3
   1a890:	0003      	movs	r3, r0
   1a892:	001a      	movs	r2, r3
   1a894:	2301      	movs	r3, #1
   1a896:	4053      	eors	r3, r2
   1a898:	b2db      	uxtb	r3, r3
   1a89a:	2b00      	cmp	r3, #0
   1a89c:	d013      	beq.n	1a8c6 <PR2_ISR+0x162>
   1a89e:	2322      	movs	r3, #34	; 0x22
   1a8a0:	18fb      	adds	r3, r7, r3
   1a8a2:	781b      	ldrb	r3, [r3, #0]
   1a8a4:	b2db      	uxtb	r3, r3
   1a8a6:	2b00      	cmp	r3, #0
   1a8a8:	d10d      	bne.n	1a8c6 <PR2_ISR+0x162>
				{
					ucharLow_Flag=1;
   1a8aa:	2322      	movs	r3, #34	; 0x22
   1a8ac:	18fb      	adds	r3, r7, r3
   1a8ae:	2201      	movs	r2, #1
   1a8b0:	701a      	strb	r2, [r3, #0]
					if (ucharHigh_Flag==1)
   1a8b2:	2323      	movs	r3, #35	; 0x23
   1a8b4:	18fb      	adds	r3, r7, r3
   1a8b6:	781b      	ldrb	r3, [r3, #0]
   1a8b8:	b2db      	uxtb	r3, r3
   1a8ba:	2b01      	cmp	r3, #1
   1a8bc:	d103      	bne.n	1a8c6 <PR2_ISR+0x162>
					{
						ucharHigh_To_Low_Flag=1;
   1a8be:	2321      	movs	r3, #33	; 0x21
   1a8c0:	18fb      	adds	r3, r7, r3
   1a8c2:	2201      	movs	r2, #1
   1a8c4:	701a      	strb	r2, [r3, #0]
					}
				}
				if (ucharHigh_To_Low_Flag==1)
   1a8c6:	2321      	movs	r3, #33	; 0x21
   1a8c8:	18fb      	adds	r3, r7, r3
   1a8ca:	781b      	ldrb	r3, [r3, #0]
   1a8cc:	b2db      	uxtb	r3, r3
   1a8ce:	2b01      	cmp	r3, #1
   1a8d0:	d10c      	bne.n	1a8ec <PR2_ISR+0x188>
				{
					// LCD takes data from structThreePhase_state, which should have latest sequence data.
					structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_OK;
   1a8d2:	4b27      	ldr	r3, [pc, #156]	; (1a970 <PR2_ISR+0x20c>)
   1a8d4:	2202      	movs	r2, #2
   1a8d6:	701a      	strb	r2, [r3, #0]
					ucharPhase_Seq_Err_Flag=2;//0=undefined, 1=error, 2=ok
   1a8d8:	4b26      	ldr	r3, [pc, #152]	; (1a974 <PR2_ISR+0x210>)
   1a8da:	2202      	movs	r2, #2
   1a8dc:	701a      	strb	r2, [r3, #0]
					ucharPhase_Seq_Err_Counter=0;
   1a8de:	4b26      	ldr	r3, [pc, #152]	; (1a978 <PR2_ISR+0x214>)
   1a8e0:	2200      	movs	r2, #0
   1a8e2:	701a      	strb	r2, [r3, #0]
					ucharPhase_Seq_Check_Flag=0;
   1a8e4:	4b18      	ldr	r3, [pc, #96]	; (1a948 <PR2_ISR+0x1e4>)
   1a8e6:	2200      	movs	r2, #0
   1a8e8:	701a      	strb	r2, [r3, #0]
					break;
   1a8ea:	e012      	b.n	1a912 <PR2_ISR+0x1ae>
				}
				if ((port_pin_get_input_level(PR2_PIN)==LOW))
   1a8ec:	202b      	movs	r0, #43	; 0x2b
   1a8ee:	4b1d      	ldr	r3, [pc, #116]	; (1a964 <PR2_ISR+0x200>)
   1a8f0:	4798      	blx	r3
   1a8f2:	0003      	movs	r3, r0
   1a8f4:	001a      	movs	r2, r3
   1a8f6:	2301      	movs	r3, #1
   1a8f8:	4053      	eors	r3, r2
   1a8fa:	b2db      	uxtb	r3, r3
   1a8fc:	2b00      	cmp	r3, #0
   1a8fe:	d107      	bne.n	1a910 <PR2_ISR+0x1ac>
			for (unsigned int uintLoop=0;uintLoop<120;uintLoop++)
   1a900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a902:	3301      	adds	r3, #1
   1a904:	627b      	str	r3, [r7, #36]	; 0x24
   1a906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a908:	2b77      	cmp	r3, #119	; 0x77
   1a90a:	d800      	bhi.n	1a90e <PR2_ISR+0x1aa>
   1a90c:	e775      	b.n	1a7fa <PR2_ISR+0x96>
   1a90e:	e000      	b.n	1a912 <PR2_ISR+0x1ae>
				{
					break;
   1a910:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
		if (++ucharPhase_Seq_Err_Counter>2)
   1a912:	4b19      	ldr	r3, [pc, #100]	; (1a978 <PR2_ISR+0x214>)
   1a914:	781b      	ldrb	r3, [r3, #0]
   1a916:	b2db      	uxtb	r3, r3
   1a918:	3301      	adds	r3, #1
   1a91a:	b2db      	uxtb	r3, r3
   1a91c:	4a16      	ldr	r2, [pc, #88]	; (1a978 <PR2_ISR+0x214>)
   1a91e:	1c19      	adds	r1, r3, #0
   1a920:	7011      	strb	r1, [r2, #0]
   1a922:	2b02      	cmp	r3, #2
   1a924:	d90b      	bls.n	1a93e <PR2_ISR+0x1da>
		{
			ucharPhase_Seq_Err_Counter=0;
   1a926:	4b14      	ldr	r3, [pc, #80]	; (1a978 <PR2_ISR+0x214>)
   1a928:	2200      	movs	r2, #0
   1a92a:	701a      	strb	r2, [r3, #0]
			structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_ERROR;
   1a92c:	4b10      	ldr	r3, [pc, #64]	; (1a970 <PR2_ISR+0x20c>)
   1a92e:	2201      	movs	r2, #1
   1a930:	701a      	strb	r2, [r3, #0]
			ucharPhase_Seq_Err_Flag=1;//0=undefined, 1=error, 2=ok
   1a932:	4b10      	ldr	r3, [pc, #64]	; (1a974 <PR2_ISR+0x210>)
   1a934:	2201      	movs	r2, #1
   1a936:	701a      	strb	r2, [r3, #0]
			ucharPhase_Seq_Check_Flag=0;
   1a938:	4b03      	ldr	r3, [pc, #12]	; (1a948 <PR2_ISR+0x1e4>)
   1a93a:	2200      	movs	r2, #0
   1a93c:	701a      	strb	r2, [r3, #0]
		}
	}
}
   1a93e:	46c0      	nop			; (mov r8, r8)
   1a940:	46bd      	mov	sp, r7
   1a942:	b00b      	add	sp, #44	; 0x2c
   1a944:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a946:	46c0      	nop			; (mov r8, r8)
   1a948:	2000000c 	.word	0x2000000c
   1a94c:	20000244 	.word	0x20000244
   1a950:	0002505d 	.word	0x0002505d
   1a954:	00001b57 	.word	0x00001b57
   1a958:	00026fe5 	.word	0x00026fe5
   1a95c:	00001b58 	.word	0x00001b58
   1a960:	20000001 	.word	0x20000001
   1a964:	0001954d 	.word	0x0001954d
   1a968:	006acfbf 	.word	0x006acfbf
   1a96c:	006acfc0 	.word	0x006acfc0
   1a970:	20000748 	.word	0x20000748
   1a974:	20000240 	.word	0x20000240
   1a978:	20000241 	.word	0x20000241

0001a97c <vTask_10ms_Timer>:

static void vTask_10ms_Timer(void *params)
{
   1a97c:	b580      	push	{r7, lr}
   1a97e:	b084      	sub	sp, #16
   1a980:	af00      	add	r7, sp, #0
   1a982:	6078      	str	r0, [r7, #4]
	TickType_t xLastExecutionGsm_Send_Time;
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
   1a984:	4b12      	ldr	r3, [pc, #72]	; (1a9d0 <vTask_10ms_Timer+0x54>)
   1a986:	4798      	blx	r3
   1a988:	0003      	movs	r3, r0
   1a98a:	60fb      	str	r3, [r7, #12]
	//--------------------------------
	for( ;; )
	{
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (10/portTICK_PERIOD_MS));
   1a98c:	230c      	movs	r3, #12
   1a98e:	18fb      	adds	r3, r7, r3
   1a990:	210a      	movs	r1, #10
   1a992:	0018      	movs	r0, r3
   1a994:	4b0f      	ldr	r3, [pc, #60]	; (1a9d4 <vTask_10ms_Timer+0x58>)
   1a996:	4798      	blx	r3
		if(ucharPhase_Seq_Check_Flag==1)
   1a998:	4b0f      	ldr	r3, [pc, #60]	; (1a9d8 <vTask_10ms_Timer+0x5c>)
   1a99a:	781b      	ldrb	r3, [r3, #0]
   1a99c:	b2db      	uxtb	r3, r3
   1a99e:	2b01      	cmp	r3, #1
   1a9a0:	d1f4      	bne.n	1a98c <vTask_10ms_Timer+0x10>
		{
			if(++ucharPhase_1_Timer_Counter>=20)
   1a9a2:	4b0e      	ldr	r3, [pc, #56]	; (1a9dc <vTask_10ms_Timer+0x60>)
   1a9a4:	781b      	ldrb	r3, [r3, #0]
   1a9a6:	3301      	adds	r3, #1
   1a9a8:	b2da      	uxtb	r2, r3
   1a9aa:	4b0c      	ldr	r3, [pc, #48]	; (1a9dc <vTask_10ms_Timer+0x60>)
   1a9ac:	701a      	strb	r2, [r3, #0]
   1a9ae:	4b0b      	ldr	r3, [pc, #44]	; (1a9dc <vTask_10ms_Timer+0x60>)
   1a9b0:	781b      	ldrb	r3, [r3, #0]
   1a9b2:	2b13      	cmp	r3, #19
   1a9b4:	d9ea      	bls.n	1a98c <vTask_10ms_Timer+0x10>
			{
				ucharPhase_1_Timer_Counter=0;
   1a9b6:	4b09      	ldr	r3, [pc, #36]	; (1a9dc <vTask_10ms_Timer+0x60>)
   1a9b8:	2200      	movs	r2, #0
   1a9ba:	701a      	strb	r2, [r3, #0]
				structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_ERROR;
   1a9bc:	4b08      	ldr	r3, [pc, #32]	; (1a9e0 <vTask_10ms_Timer+0x64>)
   1a9be:	2201      	movs	r2, #1
   1a9c0:	701a      	strb	r2, [r3, #0]
				ucharPhase_Seq_Err_Flag=1;//0=undefined, 1=error, 2=ok
   1a9c2:	4b08      	ldr	r3, [pc, #32]	; (1a9e4 <vTask_10ms_Timer+0x68>)
   1a9c4:	2201      	movs	r2, #1
   1a9c6:	701a      	strb	r2, [r3, #0]
				ucharPhase_Seq_Check_Flag=0;
   1a9c8:	4b03      	ldr	r3, [pc, #12]	; (1a9d8 <vTask_10ms_Timer+0x5c>)
   1a9ca:	2200      	movs	r2, #0
   1a9cc:	701a      	strb	r2, [r3, #0]
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (10/portTICK_PERIOD_MS));
   1a9ce:	e7dd      	b.n	1a98c <vTask_10ms_Timer+0x10>
   1a9d0:	000209cd 	.word	0x000209cd
   1a9d4:	000205a1 	.word	0x000205a1
   1a9d8:	2000000c 	.word	0x2000000c
   1a9dc:	20000244 	.word	0x20000244
   1a9e0:	20000748 	.word	0x20000748
   1a9e4:	20000240 	.word	0x20000240

0001a9e8 <vTask_100ms_Timer>:
		}
	}
}

static void vTask_100ms_Timer(void *params)
{
   1a9e8:	b580      	push	{r7, lr}
   1a9ea:	b084      	sub	sp, #16
   1a9ec:	af00      	add	r7, sp, #0
   1a9ee:	6078      	str	r0, [r7, #4]
	TickType_t xLastExecutionGsm_Send_Time;
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
   1a9f0:	4b17      	ldr	r3, [pc, #92]	; (1aa50 <vTask_100ms_Timer+0x68>)
   1a9f2:	4798      	blx	r3
   1a9f4:	0003      	movs	r3, r0
   1a9f6:	60fb      	str	r3, [r7, #12]
	//--------------------------------
	for( ;; )
	{
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (100/portTICK_PERIOD_MS));
   1a9f8:	230c      	movs	r3, #12
   1a9fa:	18fb      	adds	r3, r7, r3
   1a9fc:	2164      	movs	r1, #100	; 0x64
   1a9fe:	0018      	movs	r0, r3
   1aa00:	4b14      	ldr	r3, [pc, #80]	; (1aa54 <vTask_100ms_Timer+0x6c>)
   1aa02:	4798      	blx	r3
		
		////////
		//Voltaqe Detect Timer Counter, Reset every 500ms to 0, which triggers the New Voltage Reading Acquisition from ADC.
		if(ucharVoltage_Detect_Timer_Counter++>4)
   1aa04:	4b14      	ldr	r3, [pc, #80]	; (1aa58 <vTask_100ms_Timer+0x70>)
   1aa06:	781b      	ldrb	r3, [r3, #0]
   1aa08:	b2db      	uxtb	r3, r3
   1aa0a:	1c5a      	adds	r2, r3, #1
   1aa0c:	b2d1      	uxtb	r1, r2
   1aa0e:	4a12      	ldr	r2, [pc, #72]	; (1aa58 <vTask_100ms_Timer+0x70>)
   1aa10:	7011      	strb	r1, [r2, #0]
   1aa12:	2b04      	cmp	r3, #4
   1aa14:	d905      	bls.n	1aa22 <vTask_100ms_Timer+0x3a>
		{
			ucharVoltage_Detect_Timer_Counter=0;
   1aa16:	4b10      	ldr	r3, [pc, #64]	; (1aa58 <vTask_100ms_Timer+0x70>)
   1aa18:	2200      	movs	r2, #0
   1aa1a:	701a      	strb	r2, [r3, #0]
			//Add Flag to enable detection of current, as the Voltage Detect Timer Counter won't be 0, as voltage reading takes 100ms Time.
			ucharCurrent_Detect_Flag=1;
   1aa1c:	4b0f      	ldr	r3, [pc, #60]	; (1aa5c <vTask_100ms_Timer+0x74>)
   1aa1e:	2201      	movs	r2, #1
   1aa20:	701a      	strb	r2, [r3, #0]
			
		}
		/////////
		if (ucharPhase_Seq_Timer_Counter++>4)
   1aa22:	4b0f      	ldr	r3, [pc, #60]	; (1aa60 <vTask_100ms_Timer+0x78>)
   1aa24:	781b      	ldrb	r3, [r3, #0]
   1aa26:	b2db      	uxtb	r3, r3
   1aa28:	1c5a      	adds	r2, r3, #1
   1aa2a:	b2d1      	uxtb	r1, r2
   1aa2c:	4a0c      	ldr	r2, [pc, #48]	; (1aa60 <vTask_100ms_Timer+0x78>)
   1aa2e:	7011      	strb	r1, [r2, #0]
   1aa30:	2b04      	cmp	r3, #4
   1aa32:	d9e1      	bls.n	1a9f8 <vTask_100ms_Timer+0x10>
		{
			ucharPhase_Seq_Timer_Counter=0;
   1aa34:	4b0a      	ldr	r3, [pc, #40]	; (1aa60 <vTask_100ms_Timer+0x78>)
   1aa36:	2200      	movs	r2, #0
   1aa38:	701a      	strb	r2, [r3, #0]
			ucharPhase_Seq_Check_Flag=1;//0=not check, 1=Check
   1aa3a:	4b0a      	ldr	r3, [pc, #40]	; (1aa64 <vTask_100ms_Timer+0x7c>)
   1aa3c:	2201      	movs	r2, #1
   1aa3e:	701a      	strb	r2, [r3, #0]
			ucharPhase_1_Timer_Counter=0;
   1aa40:	4b09      	ldr	r3, [pc, #36]	; (1aa68 <vTask_100ms_Timer+0x80>)
   1aa42:	2200      	movs	r2, #0
   1aa44:	701a      	strb	r2, [r3, #0]
			extint_chan_clear_detected(11);
   1aa46:	200b      	movs	r0, #11
   1aa48:	4b08      	ldr	r3, [pc, #32]	; (1aa6c <vTask_100ms_Timer+0x84>)
   1aa4a:	4798      	blx	r3
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (100/portTICK_PERIOD_MS));
   1aa4c:	e7d4      	b.n	1a9f8 <vTask_100ms_Timer+0x10>
   1aa4e:	46c0      	nop			; (mov r8, r8)
   1aa50:	000209cd 	.word	0x000209cd
   1aa54:	000205a1 	.word	0x000205a1
   1aa58:	2000000d 	.word	0x2000000d
   1aa5c:	20000243 	.word	0x20000243
   1aa60:	20000242 	.word	0x20000242
   1aa64:	2000000c 	.word	0x2000000c
   1aa68:	20000244 	.word	0x20000244
   1aa6c:	00019631 	.word	0x00019631

0001aa70 <should_Detect_New_Voltage>:
		}
	}
}

//Function to check if new Voltage reading should be acquired from the ADC, by checking the timer Variable for reading Voltage with 0.
bool should_Detect_New_Voltage(void) {
   1aa70:	b580      	push	{r7, lr}
   1aa72:	af00      	add	r7, sp, #0
	return (ucharVoltage_Detect_Timer_Counter == 0);
   1aa74:	4b04      	ldr	r3, [pc, #16]	; (1aa88 <should_Detect_New_Voltage+0x18>)
   1aa76:	781b      	ldrb	r3, [r3, #0]
   1aa78:	b2db      	uxtb	r3, r3
   1aa7a:	425a      	negs	r2, r3
   1aa7c:	4153      	adcs	r3, r2
   1aa7e:	b2db      	uxtb	r3, r3
}
   1aa80:	0018      	movs	r0, r3
   1aa82:	46bd      	mov	sp, r7
   1aa84:	bd80      	pop	{r7, pc}
   1aa86:	46c0      	nop			; (mov r8, r8)
   1aa88:	2000000d 	.word	0x2000000d

0001aa8c <detect_battery_voltage_and_percentage>:

void detect_battery_voltage_and_percentage(void)
{
   1aa8c:	b590      	push	{r4, r7, lr}
   1aa8e:	b083      	sub	sp, #12
   1aa90:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
   1aa92:	4b25      	ldr	r3, [pc, #148]	; (1ab28 <detect_battery_voltage_and_percentage+0x9c>)
   1aa94:	681a      	ldr	r2, [r3, #0]
   1aa96:	2301      	movs	r3, #1
   1aa98:	425b      	negs	r3, r3
   1aa9a:	0019      	movs	r1, r3
   1aa9c:	0010      	movs	r0, r2
   1aa9e:	4b23      	ldr	r3, [pc, #140]	; (1ab2c <detect_battery_voltage_and_percentage+0xa0>)
   1aaa0:	4798      	blx	r3
   1aaa2:	0003      	movs	r3, r0
   1aaa4:	2b01      	cmp	r3, #1
   1aaa6:	d13b      	bne.n	1ab20 <detect_battery_voltage_and_percentage+0x94>
	{
		uint32_t bat_v = Read_ADC0(ADC_POSITIVE_INPUT_PIN7,200);
   1aaa8:	21c8      	movs	r1, #200	; 0xc8
   1aaaa:	2007      	movs	r0, #7
   1aaac:	4b20      	ldr	r3, [pc, #128]	; (1ab30 <detect_battery_voltage_and_percentage+0xa4>)
   1aaae:	4798      	blx	r3
   1aab0:	0003      	movs	r3, r0
   1aab2:	603b      	str	r3, [r7, #0]
		Analog_Parameter_Struct.Battery_Voltage = (bat_v * 1457)/1000;
   1aab4:	683b      	ldr	r3, [r7, #0]
   1aab6:	4a1f      	ldr	r2, [pc, #124]	; (1ab34 <detect_battery_voltage_and_percentage+0xa8>)
   1aab8:	435a      	muls	r2, r3
   1aaba:	0010      	movs	r0, r2
   1aabc:	4b1e      	ldr	r3, [pc, #120]	; (1ab38 <detect_battery_voltage_and_percentage+0xac>)
   1aabe:	22fa      	movs	r2, #250	; 0xfa
   1aac0:	0091      	lsls	r1, r2, #2
   1aac2:	4798      	blx	r3
   1aac4:	0003      	movs	r3, r0
   1aac6:	001a      	movs	r2, r3
   1aac8:	4b1c      	ldr	r3, [pc, #112]	; (1ab3c <detect_battery_voltage_and_percentage+0xb0>)
   1aaca:	619a      	str	r2, [r3, #24]
		uint8_t bat_per = 0;
   1aacc:	1dfb      	adds	r3, r7, #7
   1aace:	2200      	movs	r2, #0
   1aad0:	701a      	strb	r2, [r3, #0]
		
		if (Analog_Parameter_Struct.Battery_Voltage <= 3300)
   1aad2:	4b1a      	ldr	r3, [pc, #104]	; (1ab3c <detect_battery_voltage_and_percentage+0xb0>)
   1aad4:	699b      	ldr	r3, [r3, #24]
   1aad6:	4a1a      	ldr	r2, [pc, #104]	; (1ab40 <detect_battery_voltage_and_percentage+0xb4>)
   1aad8:	4293      	cmp	r3, r2
   1aada:	d803      	bhi.n	1aae4 <detect_battery_voltage_and_percentage+0x58>
		{
			bat_per = 0;
   1aadc:	1dfb      	adds	r3, r7, #7
   1aade:	2200      	movs	r2, #0
   1aae0:	701a      	strb	r2, [r3, #0]
   1aae2:	e012      	b.n	1ab0a <detect_battery_voltage_and_percentage+0x7e>
		}
		else
		{
			//bat_per = ((((float)Analog_Parameter_Struct.Battery_Voltage/1000)-3.3)*100)/0.9;
			bat_per = (Analog_Parameter_Struct.Battery_Voltage-3300)/9;
   1aae4:	4b15      	ldr	r3, [pc, #84]	; (1ab3c <detect_battery_voltage_and_percentage+0xb0>)
   1aae6:	699b      	ldr	r3, [r3, #24]
   1aae8:	4a16      	ldr	r2, [pc, #88]	; (1ab44 <detect_battery_voltage_and_percentage+0xb8>)
   1aaea:	189a      	adds	r2, r3, r2
   1aaec:	4b12      	ldr	r3, [pc, #72]	; (1ab38 <detect_battery_voltage_and_percentage+0xac>)
   1aaee:	2109      	movs	r1, #9
   1aaf0:	0010      	movs	r0, r2
   1aaf2:	4798      	blx	r3
   1aaf4:	0003      	movs	r3, r0
   1aaf6:	001a      	movs	r2, r3
   1aaf8:	1dfb      	adds	r3, r7, #7
   1aafa:	701a      	strb	r2, [r3, #0]
			if (bat_per>100) bat_per=100;
   1aafc:	1dfb      	adds	r3, r7, #7
   1aafe:	781b      	ldrb	r3, [r3, #0]
   1ab00:	2b64      	cmp	r3, #100	; 0x64
   1ab02:	d902      	bls.n	1ab0a <detect_battery_voltage_and_percentage+0x7e>
   1ab04:	1dfb      	adds	r3, r7, #7
   1ab06:	2264      	movs	r2, #100	; 0x64
   1ab08:	701a      	strb	r2, [r3, #0]
		}
		
		Analog_Parameter_Struct.Battery_percentage = bat_per;
   1ab0a:	4b0c      	ldr	r3, [pc, #48]	; (1ab3c <detect_battery_voltage_and_percentage+0xb0>)
   1ab0c:	1dfa      	adds	r2, r7, #7
   1ab0e:	7812      	ldrb	r2, [r2, #0]
   1ab10:	771a      	strb	r2, [r3, #28]
		
		xSemaphoreGive(xADC_Semaphore);
   1ab12:	4b05      	ldr	r3, [pc, #20]	; (1ab28 <detect_battery_voltage_and_percentage+0x9c>)
   1ab14:	6818      	ldr	r0, [r3, #0]
   1ab16:	2300      	movs	r3, #0
   1ab18:	2200      	movs	r2, #0
   1ab1a:	2100      	movs	r1, #0
   1ab1c:	4c0a      	ldr	r4, [pc, #40]	; (1ab48 <detect_battery_voltage_and_percentage+0xbc>)
   1ab1e:	47a0      	blx	r4
	}
}
   1ab20:	46c0      	nop			; (mov r8, r8)
   1ab22:	46bd      	mov	sp, r7
   1ab24:	b003      	add	sp, #12
   1ab26:	bd90      	pop	{r4, r7, pc}
   1ab28:	20000230 	.word	0x20000230
   1ab2c:	0001fd61 	.word	0x0001fd61
   1ab30:	0001a095 	.word	0x0001a095
   1ab34:	000005b1 	.word	0x000005b1
   1ab38:	00026c7d 	.word	0x00026c7d
   1ab3c:	200006e8 	.word	0x200006e8
   1ab40:	00000ce4 	.word	0x00000ce4
   1ab44:	fffff31c 	.word	0xfffff31c
   1ab48:	0001f8c1 	.word	0x0001f8c1

0001ab4c <initPhaseRMStruct>:

void initPhaseRMStruct(struct rmsVoltage *phaseRMSStruct)
{
   1ab4c:	b580      	push	{r7, lr}
   1ab4e:	b084      	sub	sp, #16
   1ab50:	af00      	add	r7, sp, #0
   1ab52:	6078      	str	r0, [r7, #4]
	phaseRMSStruct->hasZeroReading = true;
   1ab54:	687b      	ldr	r3, [r7, #4]
   1ab56:	2201      	movs	r2, #1
   1ab58:	735a      	strb	r2, [r3, #13]
	phaseRMSStruct->index=0;
   1ab5a:	687b      	ldr	r3, [r7, #4]
   1ab5c:	2200      	movs	r2, #0
   1ab5e:	731a      	strb	r2, [r3, #12]
	phaseRMSStruct->rmsVoltage=0;
   1ab60:	687b      	ldr	r3, [r7, #4]
   1ab62:	2200      	movs	r2, #0
   1ab64:	815a      	strh	r2, [r3, #10]
	for (uint8_t cnt =0;cnt< NO_RMS_VOLTAGE_READINGS;cnt++)
   1ab66:	230f      	movs	r3, #15
   1ab68:	18fb      	adds	r3, r7, r3
   1ab6a:	2200      	movs	r2, #0
   1ab6c:	701a      	strb	r2, [r3, #0]
   1ab6e:	e00d      	b.n	1ab8c <initPhaseRMStruct+0x40>
	{
		phaseRMSStruct->voltRange[cnt]=0;
   1ab70:	230f      	movs	r3, #15
   1ab72:	18fb      	adds	r3, r7, r3
   1ab74:	781a      	ldrb	r2, [r3, #0]
   1ab76:	687b      	ldr	r3, [r7, #4]
   1ab78:	0052      	lsls	r2, r2, #1
   1ab7a:	2100      	movs	r1, #0
   1ab7c:	52d1      	strh	r1, [r2, r3]
	for (uint8_t cnt =0;cnt< NO_RMS_VOLTAGE_READINGS;cnt++)
   1ab7e:	230f      	movs	r3, #15
   1ab80:	18fb      	adds	r3, r7, r3
   1ab82:	781a      	ldrb	r2, [r3, #0]
   1ab84:	230f      	movs	r3, #15
   1ab86:	18fb      	adds	r3, r7, r3
   1ab88:	3201      	adds	r2, #1
   1ab8a:	701a      	strb	r2, [r3, #0]
   1ab8c:	230f      	movs	r3, #15
   1ab8e:	18fb      	adds	r3, r7, r3
   1ab90:	781b      	ldrb	r3, [r3, #0]
   1ab92:	2b04      	cmp	r3, #4
   1ab94:	d9ec      	bls.n	1ab70 <initPhaseRMStruct+0x24>
	}
}
   1ab96:	46c0      	nop			; (mov r8, r8)
   1ab98:	46bd      	mov	sp, r7
   1ab9a:	b004      	add	sp, #16
   1ab9c:	bd80      	pop	{r7, pc}
	...

0001aba0 <updateRMSValues>:

void updateRMSValues(struct rmsVoltage *phaseRMSStruct)
{
   1aba0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aba2:	b089      	sub	sp, #36	; 0x24
   1aba4:	af00      	add	r7, sp, #0
   1aba6:	6078      	str	r0, [r7, #4]
	uint8_t cnt;
	uint32_t result=0;
   1aba8:	2300      	movs	r3, #0
   1abaa:	61bb      	str	r3, [r7, #24]
	double mean = 0.0;
   1abac:	2300      	movs	r3, #0
   1abae:	2400      	movs	r4, #0
   1abb0:	613b      	str	r3, [r7, #16]
   1abb2:	617c      	str	r4, [r7, #20]
	double root = 0.0;
   1abb4:	2300      	movs	r3, #0
   1abb6:	2400      	movs	r4, #0
   1abb8:	60bb      	str	r3, [r7, #8]
   1abba:	60fc      	str	r4, [r7, #12]
	phaseRMSStruct->hasZeroReading=false;
   1abbc:	687b      	ldr	r3, [r7, #4]
   1abbe:	2200      	movs	r2, #0
   1abc0:	735a      	strb	r2, [r3, #13]
	for(cnt=0;cnt<NO_RMS_VOLTAGE_READINGS;cnt++)
   1abc2:	231f      	movs	r3, #31
   1abc4:	18fb      	adds	r3, r7, r3
   1abc6:	2200      	movs	r2, #0
   1abc8:	701a      	strb	r2, [r3, #0]
   1abca:	e036      	b.n	1ac3a <updateRMSValues+0x9a>
	{
		if(phaseRMSStruct->voltRange[cnt]==0)
   1abcc:	231f      	movs	r3, #31
   1abce:	18fb      	adds	r3, r7, r3
   1abd0:	781a      	ldrb	r2, [r3, #0]
   1abd2:	687b      	ldr	r3, [r7, #4]
   1abd4:	0052      	lsls	r2, r2, #1
   1abd6:	5ad3      	ldrh	r3, [r2, r3]
   1abd8:	2b00      	cmp	r3, #0
   1abda:	d102      	bne.n	1abe2 <updateRMSValues+0x42>
		{
			phaseRMSStruct->hasZeroReading=true;
   1abdc:	687b      	ldr	r3, [r7, #4]
   1abde:	2201      	movs	r2, #1
   1abe0:	735a      	strb	r2, [r3, #13]
		}
		result= result + pow(phaseRMSStruct->voltRange[cnt],2);
   1abe2:	4b31      	ldr	r3, [pc, #196]	; (1aca8 <updateRMSValues+0x108>)
   1abe4:	69b8      	ldr	r0, [r7, #24]
   1abe6:	4798      	blx	r3
   1abe8:	0005      	movs	r5, r0
   1abea:	000e      	movs	r6, r1
   1abec:	231f      	movs	r3, #31
   1abee:	18fb      	adds	r3, r7, r3
   1abf0:	781a      	ldrb	r2, [r3, #0]
   1abf2:	687b      	ldr	r3, [r7, #4]
   1abf4:	0052      	lsls	r2, r2, #1
   1abf6:	5ad2      	ldrh	r2, [r2, r3]
   1abf8:	4b2b      	ldr	r3, [pc, #172]	; (1aca8 <updateRMSValues+0x108>)
   1abfa:	0010      	movs	r0, r2
   1abfc:	4798      	blx	r3
   1abfe:	2300      	movs	r3, #0
   1ac00:	2480      	movs	r4, #128	; 0x80
   1ac02:	05e4      	lsls	r4, r4, #23
   1ac04:	001a      	movs	r2, r3
   1ac06:	0023      	movs	r3, r4
   1ac08:	4c28      	ldr	r4, [pc, #160]	; (1acac <updateRMSValues+0x10c>)
   1ac0a:	47a0      	blx	r4
   1ac0c:	0002      	movs	r2, r0
   1ac0e:	000b      	movs	r3, r1
   1ac10:	4c27      	ldr	r4, [pc, #156]	; (1acb0 <updateRMSValues+0x110>)
   1ac12:	0028      	movs	r0, r5
   1ac14:	0031      	movs	r1, r6
   1ac16:	47a0      	blx	r4
   1ac18:	0003      	movs	r3, r0
   1ac1a:	000c      	movs	r4, r1
   1ac1c:	0019      	movs	r1, r3
   1ac1e:	0022      	movs	r2, r4
   1ac20:	4b24      	ldr	r3, [pc, #144]	; (1acb4 <updateRMSValues+0x114>)
   1ac22:	0008      	movs	r0, r1
   1ac24:	0011      	movs	r1, r2
   1ac26:	4798      	blx	r3
   1ac28:	0003      	movs	r3, r0
   1ac2a:	61bb      	str	r3, [r7, #24]
	for(cnt=0;cnt<NO_RMS_VOLTAGE_READINGS;cnt++)
   1ac2c:	231f      	movs	r3, #31
   1ac2e:	18fb      	adds	r3, r7, r3
   1ac30:	781a      	ldrb	r2, [r3, #0]
   1ac32:	231f      	movs	r3, #31
   1ac34:	18fb      	adds	r3, r7, r3
   1ac36:	3201      	adds	r2, #1
   1ac38:	701a      	strb	r2, [r3, #0]
   1ac3a:	231f      	movs	r3, #31
   1ac3c:	18fb      	adds	r3, r7, r3
   1ac3e:	781b      	ldrb	r3, [r3, #0]
   1ac40:	2b04      	cmp	r3, #4
   1ac42:	d9c3      	bls.n	1abcc <updateRMSValues+0x2c>
	}
	mean= result / (float)NO_RMS_VOLTAGE_READINGS;
   1ac44:	4b1c      	ldr	r3, [pc, #112]	; (1acb8 <updateRMSValues+0x118>)
   1ac46:	69b8      	ldr	r0, [r7, #24]
   1ac48:	4798      	blx	r3
   1ac4a:	1c02      	adds	r2, r0, #0
   1ac4c:	4b1b      	ldr	r3, [pc, #108]	; (1acbc <updateRMSValues+0x11c>)
   1ac4e:	491c      	ldr	r1, [pc, #112]	; (1acc0 <updateRMSValues+0x120>)
   1ac50:	1c10      	adds	r0, r2, #0
   1ac52:	4798      	blx	r3
   1ac54:	1c03      	adds	r3, r0, #0
   1ac56:	1c1a      	adds	r2, r3, #0
   1ac58:	4b1a      	ldr	r3, [pc, #104]	; (1acc4 <updateRMSValues+0x124>)
   1ac5a:	1c10      	adds	r0, r2, #0
   1ac5c:	4798      	blx	r3
   1ac5e:	0003      	movs	r3, r0
   1ac60:	000c      	movs	r4, r1
   1ac62:	613b      	str	r3, [r7, #16]
   1ac64:	617c      	str	r4, [r7, #20]
	root = (uint32_t) (sqrt(mean));
   1ac66:	693b      	ldr	r3, [r7, #16]
   1ac68:	697c      	ldr	r4, [r7, #20]
   1ac6a:	0018      	movs	r0, r3
   1ac6c:	0021      	movs	r1, r4
   1ac6e:	4b16      	ldr	r3, [pc, #88]	; (1acc8 <updateRMSValues+0x128>)
   1ac70:	4798      	blx	r3
   1ac72:	000a      	movs	r2, r1
   1ac74:	0001      	movs	r1, r0
   1ac76:	4b0f      	ldr	r3, [pc, #60]	; (1acb4 <updateRMSValues+0x114>)
   1ac78:	0008      	movs	r0, r1
   1ac7a:	0011      	movs	r1, r2
   1ac7c:	4798      	blx	r3
   1ac7e:	0002      	movs	r2, r0
   1ac80:	4b09      	ldr	r3, [pc, #36]	; (1aca8 <updateRMSValues+0x108>)
   1ac82:	0010      	movs	r0, r2
   1ac84:	4798      	blx	r3
   1ac86:	0003      	movs	r3, r0
   1ac88:	000c      	movs	r4, r1
   1ac8a:	60bb      	str	r3, [r7, #8]
   1ac8c:	60fc      	str	r4, [r7, #12]
	
	phaseRMSStruct->rmsVoltage = (uint16_t) root;
   1ac8e:	4b09      	ldr	r3, [pc, #36]	; (1acb4 <updateRMSValues+0x114>)
   1ac90:	68b8      	ldr	r0, [r7, #8]
   1ac92:	68f9      	ldr	r1, [r7, #12]
   1ac94:	4798      	blx	r3
   1ac96:	0003      	movs	r3, r0
   1ac98:	b29a      	uxth	r2, r3
   1ac9a:	687b      	ldr	r3, [r7, #4]
   1ac9c:	815a      	strh	r2, [r3, #10]
}
   1ac9e:	46c0      	nop			; (mov r8, r8)
   1aca0:	46bd      	mov	sp, r7
   1aca2:	b009      	add	sp, #36	; 0x24
   1aca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1aca6:	46c0      	nop			; (mov r8, r8)
   1aca8:	00029635 	.word	0x00029635
   1acac:	000259e9 	.word	0x000259e9
   1acb0:	00027b55 	.word	0x00027b55
   1acb4:	00027079 	.word	0x00027079
   1acb8:	00027ac9 	.word	0x00027ac9
   1acbc:	00027559 	.word	0x00027559
   1acc0:	40a00000 	.word	0x40a00000
   1acc4:	000296a5 	.word	0x000296a5
   1acc8:	00025d41 	.word	0x00025d41

0001accc <filterVoltage>:

uint16_t filterVoltage(enum phaseReading phase,uint16_t voltReading)
{
   1accc:	b590      	push	{r4, r7, lr}
   1acce:	b085      	sub	sp, #20
   1acd0:	af00      	add	r7, sp, #0
   1acd2:	0002      	movs	r2, r0
   1acd4:	1dfb      	adds	r3, r7, #7
   1acd6:	701a      	strb	r2, [r3, #0]
   1acd8:	1d3b      	adds	r3, r7, #4
   1acda:	1c0a      	adds	r2, r1, #0
   1acdc:	801a      	strh	r2, [r3, #0]
	struct rmsVoltage *p1;
	if(phase==PHASE_RY)
   1acde:	1dfb      	adds	r3, r7, #7
   1ace0:	781b      	ldrb	r3, [r3, #0]
   1ace2:	2b00      	cmp	r3, #0
   1ace4:	d102      	bne.n	1acec <filterVoltage+0x20>
	{
		p1 = &struct_rmsRY;
   1ace6:	4b29      	ldr	r3, [pc, #164]	; (1ad8c <filterVoltage+0xc0>)
   1ace8:	60fb      	str	r3, [r7, #12]
   1acea:	e00c      	b.n	1ad06 <filterVoltage+0x3a>
	}
	else if(phase==PHASE_YB)
   1acec:	1dfb      	adds	r3, r7, #7
   1acee:	781b      	ldrb	r3, [r3, #0]
   1acf0:	2b01      	cmp	r3, #1
   1acf2:	d102      	bne.n	1acfa <filterVoltage+0x2e>
	{
		p1 = &struct_rmsYB;
   1acf4:	4b26      	ldr	r3, [pc, #152]	; (1ad90 <filterVoltage+0xc4>)
   1acf6:	60fb      	str	r3, [r7, #12]
   1acf8:	e005      	b.n	1ad06 <filterVoltage+0x3a>
	}
	else if(phase==PHASE_BR)
   1acfa:	1dfb      	adds	r3, r7, #7
   1acfc:	781b      	ldrb	r3, [r3, #0]
   1acfe:	2b02      	cmp	r3, #2
   1ad00:	d101      	bne.n	1ad06 <filterVoltage+0x3a>
	{
		p1 = &struct_rmsBR;
   1ad02:	4b24      	ldr	r3, [pc, #144]	; (1ad94 <filterVoltage+0xc8>)
   1ad04:	60fb      	str	r3, [r7, #12]
	}
	
	p1->voltRange[p1->index%NO_RMS_VOLTAGE_READINGS]=voltReading;
   1ad06:	68fb      	ldr	r3, [r7, #12]
   1ad08:	7b1a      	ldrb	r2, [r3, #12]
   1ad0a:	4b23      	ldr	r3, [pc, #140]	; (1ad98 <filterVoltage+0xcc>)
   1ad0c:	2105      	movs	r1, #5
   1ad0e:	0010      	movs	r0, r2
   1ad10:	4798      	blx	r3
   1ad12:	000b      	movs	r3, r1
   1ad14:	b2db      	uxtb	r3, r3
   1ad16:	001a      	movs	r2, r3
   1ad18:	68fb      	ldr	r3, [r7, #12]
   1ad1a:	0052      	lsls	r2, r2, #1
   1ad1c:	1d39      	adds	r1, r7, #4
   1ad1e:	8809      	ldrh	r1, [r1, #0]
   1ad20:	52d1      	strh	r1, [r2, r3]
	p1->index = ((p1->index) + 1 )%NO_RMS_VOLTAGE_READINGS;
   1ad22:	68fb      	ldr	r3, [r7, #12]
   1ad24:	7b1b      	ldrb	r3, [r3, #12]
   1ad26:	1c5a      	adds	r2, r3, #1
   1ad28:	4b1c      	ldr	r3, [pc, #112]	; (1ad9c <filterVoltage+0xd0>)
   1ad2a:	2105      	movs	r1, #5
   1ad2c:	0010      	movs	r0, r2
   1ad2e:	4798      	blx	r3
   1ad30:	000b      	movs	r3, r1
   1ad32:	b2da      	uxtb	r2, r3
   1ad34:	68fb      	ldr	r3, [r7, #12]
   1ad36:	731a      	strb	r2, [r3, #12]
	
	updateRMSValues(p1);
   1ad38:	68fb      	ldr	r3, [r7, #12]
   1ad3a:	0018      	movs	r0, r3
   1ad3c:	4b18      	ldr	r3, [pc, #96]	; (1ada0 <filterVoltage+0xd4>)
   1ad3e:	4798      	blx	r3
	
	//if(voltReading > p1->rmsVoltage)
	{
		if(p1->hasZeroReading)
   1ad40:	68fb      	ldr	r3, [r7, #12]
   1ad42:	7b5b      	ldrb	r3, [r3, #13]
   1ad44:	2b00      	cmp	r3, #0
   1ad46:	d002      	beq.n	1ad4e <filterVoltage+0x82>
		{
			return voltReading;
   1ad48:	1d3b      	adds	r3, r7, #4
   1ad4a:	881b      	ldrh	r3, [r3, #0]
   1ad4c:	e019      	b.n	1ad82 <filterVoltage+0xb6>
		
		//if ((voltReading - p1->rmsVoltage)>(p1->rmsVoltage * 6/100))
		//{
		//return p1->rmsVoltage;
		//}
		if((p1->rmsVoltage - voltReading)<(p1->rmsVoltage * 40/100))
   1ad4e:	68fb      	ldr	r3, [r7, #12]
   1ad50:	895b      	ldrh	r3, [r3, #10]
   1ad52:	001a      	movs	r2, r3
   1ad54:	1d3b      	adds	r3, r7, #4
   1ad56:	881b      	ldrh	r3, [r3, #0]
   1ad58:	1ad4      	subs	r4, r2, r3
   1ad5a:	68fb      	ldr	r3, [r7, #12]
   1ad5c:	895b      	ldrh	r3, [r3, #10]
   1ad5e:	001a      	movs	r2, r3
   1ad60:	0013      	movs	r3, r2
   1ad62:	009b      	lsls	r3, r3, #2
   1ad64:	189b      	adds	r3, r3, r2
   1ad66:	00db      	lsls	r3, r3, #3
   1ad68:	001a      	movs	r2, r3
   1ad6a:	4b0e      	ldr	r3, [pc, #56]	; (1ada4 <filterVoltage+0xd8>)
   1ad6c:	2164      	movs	r1, #100	; 0x64
   1ad6e:	0010      	movs	r0, r2
   1ad70:	4798      	blx	r3
   1ad72:	0003      	movs	r3, r0
   1ad74:	429c      	cmp	r4, r3
   1ad76:	da02      	bge.n	1ad7e <filterVoltage+0xb2>
		{
			return p1->rmsVoltage;
   1ad78:	68fb      	ldr	r3, [r7, #12]
   1ad7a:	895b      	ldrh	r3, [r3, #10]
   1ad7c:	e001      	b.n	1ad82 <filterVoltage+0xb6>
		}
		else
		{
			return voltReading;
   1ad7e:	1d3b      	adds	r3, r7, #4
   1ad80:	881b      	ldrh	r3, [r3, #0]
		}
	}
	
	return voltReading;
}
   1ad82:	0018      	movs	r0, r3
   1ad84:	46bd      	mov	sp, r7
   1ad86:	b005      	add	sp, #20
   1ad88:	bd90      	pop	{r4, r7, pc}
   1ad8a:	46c0      	nop			; (mov r8, r8)
   1ad8c:	200007b0 	.word	0x200007b0
   1ad90:	20000730 	.word	0x20000730
   1ad94:	200007e0 	.word	0x200007e0
   1ad98:	00026d89 	.word	0x00026d89
   1ad9c:	00026f5d 	.word	0x00026f5d
   1ada0:	0001aba1 	.word	0x0001aba1
   1ada4:	00026d91 	.word	0x00026d91

0001ada8 <detect_Three_Phase_Voltage>:

//Function to save the 3 phase voltage from ADC in to the structure, ADC values are filtered, and multiplied by factor here.
void detect_Three_Phase_Voltage(void) {
   1ada8:	b590      	push	{r4, r7, lr}
   1adaa:	b085      	sub	sp, #20
   1adac:	af00      	add	r7, sp, #0
	
	
	
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
   1adae:	4b49      	ldr	r3, [pc, #292]	; (1aed4 <detect_Three_Phase_Voltage+0x12c>)
   1adb0:	681a      	ldr	r2, [r3, #0]
   1adb2:	2301      	movs	r3, #1
   1adb4:	425b      	negs	r3, r3
   1adb6:	0019      	movs	r1, r3
   1adb8:	0010      	movs	r0, r2
   1adba:	4b47      	ldr	r3, [pc, #284]	; (1aed8 <detect_Three_Phase_Voltage+0x130>)
   1adbc:	4798      	blx	r3
   1adbe:	0003      	movs	r3, r0
   1adc0:	2b01      	cmp	r3, #1
   1adc2:	d000      	beq.n	1adc6 <detect_Three_Phase_Voltage+0x1e>
   1adc4:	e082      	b.n	1aecc <detect_Three_Phase_Voltage+0x124>
	{
		//int32_t adcRY = Read_ADC0(ADC_POSITIVE_INPUT_PIN19,2000);
		int32_t adcRY = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN19);
   1adc6:	2013      	movs	r0, #19
   1adc8:	4b44      	ldr	r3, [pc, #272]	; (1aedc <detect_Three_Phase_Voltage+0x134>)
   1adca:	4798      	blx	r3
   1adcc:	0003      	movs	r3, r0
   1adce:	60fb      	str	r3, [r7, #12]
		int32_t adcYB = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN18);
   1add0:	2012      	movs	r0, #18
   1add2:	4b42      	ldr	r3, [pc, #264]	; (1aedc <detect_Three_Phase_Voltage+0x134>)
   1add4:	4798      	blx	r3
   1add6:	0003      	movs	r3, r0
   1add8:	60bb      	str	r3, [r7, #8]
		int32_t adcBR = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN17);
   1adda:	2011      	movs	r0, #17
   1addc:	4b3f      	ldr	r3, [pc, #252]	; (1aedc <detect_Three_Phase_Voltage+0x134>)
   1adde:	4798      	blx	r3
   1ade0:	0003      	movs	r3, r0
   1ade2:	607b      	str	r3, [r7, #4]
		adcRY = (adcRY-10);
   1ade4:	68fb      	ldr	r3, [r7, #12]
   1ade6:	3b0a      	subs	r3, #10
   1ade8:	60fb      	str	r3, [r7, #12]
		if (adcRY<0)
   1adea:	68fb      	ldr	r3, [r7, #12]
   1adec:	2b00      	cmp	r3, #0
   1adee:	da02      	bge.n	1adf6 <detect_Three_Phase_Voltage+0x4e>
		{
			adcRY = 0;
   1adf0:	2300      	movs	r3, #0
   1adf2:	60fb      	str	r3, [r7, #12]
   1adf4:	e010      	b.n	1ae18 <detect_Three_Phase_Voltage+0x70>
		}
		else
		{
			adcRY = (((adcRY-10)*660)/1000);
   1adf6:	68fb      	ldr	r3, [r7, #12]
   1adf8:	3b0a      	subs	r3, #10
   1adfa:	22a5      	movs	r2, #165	; 0xa5
   1adfc:	0092      	lsls	r2, r2, #2
   1adfe:	435a      	muls	r2, r3
   1ae00:	0010      	movs	r0, r2
   1ae02:	4b37      	ldr	r3, [pc, #220]	; (1aee0 <detect_Three_Phase_Voltage+0x138>)
   1ae04:	22fa      	movs	r2, #250	; 0xfa
   1ae06:	0091      	lsls	r1, r2, #2
   1ae08:	4798      	blx	r3
   1ae0a:	0003      	movs	r3, r0
   1ae0c:	60fb      	str	r3, [r7, #12]
			if (adcRY<0)
   1ae0e:	68fb      	ldr	r3, [r7, #12]
   1ae10:	2b00      	cmp	r3, #0
   1ae12:	da01      	bge.n	1ae18 <detect_Three_Phase_Voltage+0x70>
			{
				adcRY = 0;
   1ae14:	2300      	movs	r3, #0
   1ae16:	60fb      	str	r3, [r7, #12]
			}
		}
		//int32_t adcYB = Read_ADC0(ADC_POSITIVE_INPUT_PIN18,2000);
		adcYB = (adcYB-10);
   1ae18:	68bb      	ldr	r3, [r7, #8]
   1ae1a:	3b0a      	subs	r3, #10
   1ae1c:	60bb      	str	r3, [r7, #8]
		if (adcYB<0)
   1ae1e:	68bb      	ldr	r3, [r7, #8]
   1ae20:	2b00      	cmp	r3, #0
   1ae22:	da02      	bge.n	1ae2a <detect_Three_Phase_Voltage+0x82>
		{
			adcYB = 0;
   1ae24:	2300      	movs	r3, #0
   1ae26:	60bb      	str	r3, [r7, #8]
   1ae28:	e010      	b.n	1ae4c <detect_Three_Phase_Voltage+0xa4>
		}
		else
		{
			adcYB = (((adcYB-10)*660)/1000);
   1ae2a:	68bb      	ldr	r3, [r7, #8]
   1ae2c:	3b0a      	subs	r3, #10
   1ae2e:	22a5      	movs	r2, #165	; 0xa5
   1ae30:	0092      	lsls	r2, r2, #2
   1ae32:	435a      	muls	r2, r3
   1ae34:	0010      	movs	r0, r2
   1ae36:	4b2a      	ldr	r3, [pc, #168]	; (1aee0 <detect_Three_Phase_Voltage+0x138>)
   1ae38:	22fa      	movs	r2, #250	; 0xfa
   1ae3a:	0091      	lsls	r1, r2, #2
   1ae3c:	4798      	blx	r3
   1ae3e:	0003      	movs	r3, r0
   1ae40:	60bb      	str	r3, [r7, #8]
			if (adcYB<0)
   1ae42:	68bb      	ldr	r3, [r7, #8]
   1ae44:	2b00      	cmp	r3, #0
   1ae46:	da01      	bge.n	1ae4c <detect_Three_Phase_Voltage+0xa4>
			{
				adcYB = 0;
   1ae48:	2300      	movs	r3, #0
   1ae4a:	60bb      	str	r3, [r7, #8]
			}
		}

		//int32_t adcBR =  Read_ADC0(ADC_POSITIVE_INPUT_PIN17,2000);
		adcBR = (adcBR-12);
   1ae4c:	687b      	ldr	r3, [r7, #4]
   1ae4e:	3b0c      	subs	r3, #12
   1ae50:	607b      	str	r3, [r7, #4]
		if (adcBR<0)
   1ae52:	687b      	ldr	r3, [r7, #4]
   1ae54:	2b00      	cmp	r3, #0
   1ae56:	da02      	bge.n	1ae5e <detect_Three_Phase_Voltage+0xb6>
		{
			adcBR = 0;
   1ae58:	2300      	movs	r3, #0
   1ae5a:	607b      	str	r3, [r7, #4]
   1ae5c:	e00f      	b.n	1ae7e <detect_Three_Phase_Voltage+0xd6>
		}
		else
		{
			adcBR = (((adcBR-12)*670)/1000);
   1ae5e:	687b      	ldr	r3, [r7, #4]
   1ae60:	3b0c      	subs	r3, #12
   1ae62:	4a20      	ldr	r2, [pc, #128]	; (1aee4 <detect_Three_Phase_Voltage+0x13c>)
   1ae64:	435a      	muls	r2, r3
   1ae66:	0010      	movs	r0, r2
   1ae68:	4b1d      	ldr	r3, [pc, #116]	; (1aee0 <detect_Three_Phase_Voltage+0x138>)
   1ae6a:	22fa      	movs	r2, #250	; 0xfa
   1ae6c:	0091      	lsls	r1, r2, #2
   1ae6e:	4798      	blx	r3
   1ae70:	0003      	movs	r3, r0
   1ae72:	607b      	str	r3, [r7, #4]
			if (adcBR<0)
   1ae74:	687b      	ldr	r3, [r7, #4]
   1ae76:	2b00      	cmp	r3, #0
   1ae78:	da01      	bge.n	1ae7e <detect_Three_Phase_Voltage+0xd6>
			{
				adcBR = 0;
   1ae7a:	2300      	movs	r3, #0
   1ae7c:	607b      	str	r3, [r7, #4]
			}
		}
		
		Analog_Parameter_Struct.PhaseRY_Voltage = filterVoltage(PHASE_RY,adcRY);
   1ae7e:	68fb      	ldr	r3, [r7, #12]
   1ae80:	b29b      	uxth	r3, r3
   1ae82:	0019      	movs	r1, r3
   1ae84:	2000      	movs	r0, #0
   1ae86:	4b18      	ldr	r3, [pc, #96]	; (1aee8 <detect_Three_Phase_Voltage+0x140>)
   1ae88:	4798      	blx	r3
   1ae8a:	0003      	movs	r3, r0
   1ae8c:	001a      	movs	r2, r3
   1ae8e:	4b17      	ldr	r3, [pc, #92]	; (1aeec <detect_Three_Phase_Voltage+0x144>)
   1ae90:	601a      	str	r2, [r3, #0]
		Analog_Parameter_Struct.PhaseYB_Voltage = filterVoltage(PHASE_YB,adcYB);
   1ae92:	68bb      	ldr	r3, [r7, #8]
   1ae94:	b29b      	uxth	r3, r3
   1ae96:	0019      	movs	r1, r3
   1ae98:	2001      	movs	r0, #1
   1ae9a:	4b13      	ldr	r3, [pc, #76]	; (1aee8 <detect_Three_Phase_Voltage+0x140>)
   1ae9c:	4798      	blx	r3
   1ae9e:	0003      	movs	r3, r0
   1aea0:	001a      	movs	r2, r3
   1aea2:	4b12      	ldr	r3, [pc, #72]	; (1aeec <detect_Three_Phase_Voltage+0x144>)
   1aea4:	605a      	str	r2, [r3, #4]
		Analog_Parameter_Struct.PhaseBR_Voltage = filterVoltage(PHASE_BR,adcBR);
   1aea6:	687b      	ldr	r3, [r7, #4]
   1aea8:	b29b      	uxth	r3, r3
   1aeaa:	0019      	movs	r1, r3
   1aeac:	2002      	movs	r0, #2
   1aeae:	4b0e      	ldr	r3, [pc, #56]	; (1aee8 <detect_Three_Phase_Voltage+0x140>)
   1aeb0:	4798      	blx	r3
   1aeb2:	0003      	movs	r3, r0
   1aeb4:	001a      	movs	r2, r3
   1aeb6:	4b0d      	ldr	r3, [pc, #52]	; (1aeec <detect_Three_Phase_Voltage+0x144>)
   1aeb8:	609a      	str	r2, [r3, #8]
		
		//Analog_Parameter_Struct.PhaseRY_Voltage = adcRY;
		//Analog_Parameter_Struct.PhaseYB_Voltage = adcYB;
		//Analog_Parameter_Struct.PhaseBR_Voltage = adcBR;
		
		set_Three_Phase_State_From_Voltage();
   1aeba:	4b0d      	ldr	r3, [pc, #52]	; (1aef0 <detect_Three_Phase_Voltage+0x148>)
   1aebc:	4798      	blx	r3
		xSemaphoreGive(xADC_Semaphore);
   1aebe:	4b05      	ldr	r3, [pc, #20]	; (1aed4 <detect_Three_Phase_Voltage+0x12c>)
   1aec0:	6818      	ldr	r0, [r3, #0]
   1aec2:	2300      	movs	r3, #0
   1aec4:	2200      	movs	r2, #0
   1aec6:	2100      	movs	r1, #0
   1aec8:	4c0a      	ldr	r4, [pc, #40]	; (1aef4 <detect_Three_Phase_Voltage+0x14c>)
   1aeca:	47a0      	blx	r4
	}
}
   1aecc:	46c0      	nop			; (mov r8, r8)
   1aece:	46bd      	mov	sp, r7
   1aed0:	b005      	add	sp, #20
   1aed2:	bd90      	pop	{r4, r7, pc}
   1aed4:	20000230 	.word	0x20000230
   1aed8:	0001fd61 	.word	0x0001fd61
   1aedc:	0001a151 	.word	0x0001a151
   1aee0:	00026d91 	.word	0x00026d91
   1aee4:	0000029e 	.word	0x0000029e
   1aee8:	0001accd 	.word	0x0001accd
   1aeec:	200006e8 	.word	0x200006e8
   1aef0:	0001aef9 	.word	0x0001aef9
   1aef4:	0001f8c1 	.word	0x0001f8c1

0001aef8 <set_Three_Phase_State_From_Voltage>:

//Function to set the Three Phase State from acquired voltage
void set_Three_Phase_State_From_Voltage(void) {
   1aef8:	b580      	push	{r7, lr}
   1aefa:	b082      	sub	sp, #8
   1aefc:	af00      	add	r7, sp, #0
	
	if(startSequenceOn)
   1aefe:	4b40      	ldr	r3, [pc, #256]	; (1b000 <set_Three_Phase_State_From_Voltage+0x108>)
   1af00:	781b      	ldrb	r3, [r3, #0]
   1af02:	2b00      	cmp	r3, #0
   1af04:	d000      	beq.n	1af08 <set_Three_Phase_State_From_Voltage+0x10>
   1af06:	e076      	b.n	1aff6 <set_Three_Phase_State_From_Voltage+0xfe>
	{
		return;
	}
	
	uint8_t temp_phase_state = structThreePhase_state.u8t_phase_ac_state;		//save last AC Phase State, in case AC Phase State is going to change
   1af08:	1dfb      	adds	r3, r7, #7
   1af0a:	4a3e      	ldr	r2, [pc, #248]	; (1b004 <set_Three_Phase_State_From_Voltage+0x10c>)
   1af0c:	7852      	ldrb	r2, [r2, #1]
   1af0e:	701a      	strb	r2, [r3, #0]
	
	
	if ((Analog_Parameter_Struct.PhaseRY_Voltage < 80) &&
   1af10:	4b3d      	ldr	r3, [pc, #244]	; (1b008 <set_Three_Phase_State_From_Voltage+0x110>)
   1af12:	681b      	ldr	r3, [r3, #0]
   1af14:	2b4f      	cmp	r3, #79	; 0x4f
   1af16:	d80b      	bhi.n	1af30 <set_Three_Phase_State_From_Voltage+0x38>
	(Analog_Parameter_Struct.PhaseYB_Voltage < 80) &&
   1af18:	4b3b      	ldr	r3, [pc, #236]	; (1b008 <set_Three_Phase_State_From_Voltage+0x110>)
   1af1a:	685b      	ldr	r3, [r3, #4]
	if ((Analog_Parameter_Struct.PhaseRY_Voltage < 80) &&
   1af1c:	2b4f      	cmp	r3, #79	; 0x4f
   1af1e:	d807      	bhi.n	1af30 <set_Three_Phase_State_From_Voltage+0x38>
	(Analog_Parameter_Struct.PhaseBR_Voltage < 80))				// if All phase volt, less than 40
   1af20:	4b39      	ldr	r3, [pc, #228]	; (1b008 <set_Three_Phase_State_From_Voltage+0x110>)
   1af22:	689b      	ldr	r3, [r3, #8]
	(Analog_Parameter_Struct.PhaseYB_Voltage < 80) &&
   1af24:	2b4f      	cmp	r3, #79	; 0x4f
   1af26:	d803      	bhi.n	1af30 <set_Three_Phase_State_From_Voltage+0x38>
	{
		structThreePhase_state.u8t_phase_ac_state = AC_OFF; //no phase is present, light is cut off
   1af28:	4b36      	ldr	r3, [pc, #216]	; (1b004 <set_Three_Phase_State_From_Voltage+0x10c>)
   1af2a:	2200      	movs	r2, #0
   1af2c:	705a      	strb	r2, [r3, #1]
   1af2e:	e046      	b.n	1afbe <set_Three_Phase_State_From_Voltage+0xc6>
	}
	else if((abs(Analog_Parameter_Struct.PhaseRY_Voltage-Analog_Parameter_Struct.PhaseYB_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
   1af30:	4b35      	ldr	r3, [pc, #212]	; (1b008 <set_Three_Phase_State_From_Voltage+0x110>)
   1af32:	681a      	ldr	r2, [r3, #0]
   1af34:	4b34      	ldr	r3, [pc, #208]	; (1b008 <set_Three_Phase_State_From_Voltage+0x110>)
   1af36:	685b      	ldr	r3, [r3, #4]
   1af38:	1ad3      	subs	r3, r2, r3
   1af3a:	17da      	asrs	r2, r3, #31
   1af3c:	189b      	adds	r3, r3, r2
   1af3e:	4053      	eors	r3, r2
   1af40:	4a32      	ldr	r2, [pc, #200]	; (1b00c <set_Three_Phase_State_From_Voltage+0x114>)
   1af42:	8c52      	ldrh	r2, [r2, #34]	; 0x22
   1af44:	4293      	cmp	r3, r2
   1af46:	dc17      	bgt.n	1af78 <set_Three_Phase_State_From_Voltage+0x80>
	(abs(Analog_Parameter_Struct.PhaseYB_Voltage-Analog_Parameter_Struct.PhaseBR_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
   1af48:	4b2f      	ldr	r3, [pc, #188]	; (1b008 <set_Three_Phase_State_From_Voltage+0x110>)
   1af4a:	685a      	ldr	r2, [r3, #4]
   1af4c:	4b2e      	ldr	r3, [pc, #184]	; (1b008 <set_Three_Phase_State_From_Voltage+0x110>)
   1af4e:	689b      	ldr	r3, [r3, #8]
   1af50:	1ad3      	subs	r3, r2, r3
   1af52:	17da      	asrs	r2, r3, #31
   1af54:	189b      	adds	r3, r3, r2
   1af56:	4053      	eors	r3, r2
   1af58:	4a2c      	ldr	r2, [pc, #176]	; (1b00c <set_Three_Phase_State_From_Voltage+0x114>)
   1af5a:	8c52      	ldrh	r2, [r2, #34]	; 0x22
	else if((abs(Analog_Parameter_Struct.PhaseRY_Voltage-Analog_Parameter_Struct.PhaseYB_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
   1af5c:	4293      	cmp	r3, r2
   1af5e:	dc0b      	bgt.n	1af78 <set_Three_Phase_State_From_Voltage+0x80>
	(abs(Analog_Parameter_Struct.PhaseBR_Voltage-Analog_Parameter_Struct.PhaseRY_Voltage)>user_settings_parameter_struct.singlePhasingVoltage))  // if diff betweeen any 2 phases > 80
   1af60:	4b29      	ldr	r3, [pc, #164]	; (1b008 <set_Three_Phase_State_From_Voltage+0x110>)
   1af62:	689a      	ldr	r2, [r3, #8]
   1af64:	4b28      	ldr	r3, [pc, #160]	; (1b008 <set_Three_Phase_State_From_Voltage+0x110>)
   1af66:	681b      	ldr	r3, [r3, #0]
   1af68:	1ad3      	subs	r3, r2, r3
   1af6a:	17da      	asrs	r2, r3, #31
   1af6c:	189b      	adds	r3, r3, r2
   1af6e:	4053      	eors	r3, r2
   1af70:	4a26      	ldr	r2, [pc, #152]	; (1b00c <set_Three_Phase_State_From_Voltage+0x114>)
   1af72:	8c52      	ldrh	r2, [r2, #34]	; 0x22
	(abs(Analog_Parameter_Struct.PhaseYB_Voltage-Analog_Parameter_Struct.PhaseBR_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
   1af74:	4293      	cmp	r3, r2
   1af76:	dd1f      	ble.n	1afb8 <set_Three_Phase_State_From_Voltage+0xc0>
	{
			if((Analog_Parameter_Struct.PhaseRY_Voltage>100 && Analog_Parameter_Struct.PhaseYB_Voltage>100) ||
   1af78:	4b23      	ldr	r3, [pc, #140]	; (1b008 <set_Three_Phase_State_From_Voltage+0x110>)
   1af7a:	681b      	ldr	r3, [r3, #0]
   1af7c:	2b64      	cmp	r3, #100	; 0x64
   1af7e:	d903      	bls.n	1af88 <set_Three_Phase_State_From_Voltage+0x90>
   1af80:	4b21      	ldr	r3, [pc, #132]	; (1b008 <set_Three_Phase_State_From_Voltage+0x110>)
   1af82:	685b      	ldr	r3, [r3, #4]
   1af84:	2b64      	cmp	r3, #100	; 0x64
   1af86:	d80f      	bhi.n	1afa8 <set_Three_Phase_State_From_Voltage+0xb0>
			(Analog_Parameter_Struct.PhaseYB_Voltage>100 && Analog_Parameter_Struct.PhaseBR_Voltage>100) ||
   1af88:	4b1f      	ldr	r3, [pc, #124]	; (1b008 <set_Three_Phase_State_From_Voltage+0x110>)
   1af8a:	685b      	ldr	r3, [r3, #4]
			if((Analog_Parameter_Struct.PhaseRY_Voltage>100 && Analog_Parameter_Struct.PhaseYB_Voltage>100) ||
   1af8c:	2b64      	cmp	r3, #100	; 0x64
   1af8e:	d903      	bls.n	1af98 <set_Three_Phase_State_From_Voltage+0xa0>
			(Analog_Parameter_Struct.PhaseYB_Voltage>100 && Analog_Parameter_Struct.PhaseBR_Voltage>100) ||
   1af90:	4b1d      	ldr	r3, [pc, #116]	; (1b008 <set_Three_Phase_State_From_Voltage+0x110>)
   1af92:	689b      	ldr	r3, [r3, #8]
   1af94:	2b64      	cmp	r3, #100	; 0x64
   1af96:	d807      	bhi.n	1afa8 <set_Three_Phase_State_From_Voltage+0xb0>
			(Analog_Parameter_Struct.PhaseBR_Voltage>100 && Analog_Parameter_Struct.PhaseRY_Voltage>100))
   1af98:	4b1b      	ldr	r3, [pc, #108]	; (1b008 <set_Three_Phase_State_From_Voltage+0x110>)
   1af9a:	689b      	ldr	r3, [r3, #8]
			(Analog_Parameter_Struct.PhaseYB_Voltage>100 && Analog_Parameter_Struct.PhaseBR_Voltage>100) ||
   1af9c:	2b64      	cmp	r3, #100	; 0x64
   1af9e:	d907      	bls.n	1afb0 <set_Three_Phase_State_From_Voltage+0xb8>
			(Analog_Parameter_Struct.PhaseBR_Voltage>100 && Analog_Parameter_Struct.PhaseRY_Voltage>100))
   1afa0:	4b19      	ldr	r3, [pc, #100]	; (1b008 <set_Three_Phase_State_From_Voltage+0x110>)
   1afa2:	681b      	ldr	r3, [r3, #0]
   1afa4:	2b64      	cmp	r3, #100	; 0x64
   1afa6:	d903      	bls.n	1afb0 <set_Three_Phase_State_From_Voltage+0xb8>
			{
				structThreePhase_state.u8t_phase_ac_state = AC_2PH;//Single phasing Occured
   1afa8:	4b16      	ldr	r3, [pc, #88]	; (1b004 <set_Three_Phase_State_From_Voltage+0x10c>)
   1afaa:	2202      	movs	r2, #2
   1afac:	705a      	strb	r2, [r3, #1]
			if((Analog_Parameter_Struct.PhaseRY_Voltage>100 && Analog_Parameter_Struct.PhaseYB_Voltage>100) ||
   1afae:	e006      	b.n	1afbe <set_Three_Phase_State_From_Voltage+0xc6>
			}
			else
			{
				structThreePhase_state.u8t_phase_ac_state = AC_OFF; //no phase is present, light is cut off
   1afb0:	4b14      	ldr	r3, [pc, #80]	; (1b004 <set_Three_Phase_State_From_Voltage+0x10c>)
   1afb2:	2200      	movs	r2, #0
   1afb4:	705a      	strb	r2, [r3, #1]
			if((Analog_Parameter_Struct.PhaseRY_Voltage>100 && Analog_Parameter_Struct.PhaseYB_Voltage>100) ||
   1afb6:	e002      	b.n	1afbe <set_Three_Phase_State_From_Voltage+0xc6>
				
			}
	}
	else  //all Phase are present
	{
		structThreePhase_state.u8t_phase_ac_state = AC_3PH;
   1afb8:	4b12      	ldr	r3, [pc, #72]	; (1b004 <set_Three_Phase_State_From_Voltage+0x10c>)
   1afba:	2203      	movs	r2, #3
   1afbc:	705a      	strb	r2, [r3, #1]
	}
	
	if (current_three_phase_state != structThreePhase_state.u8t_phase_ac_state)
   1afbe:	4b11      	ldr	r3, [pc, #68]	; (1b004 <set_Three_Phase_State_From_Voltage+0x10c>)
   1afc0:	785b      	ldrb	r3, [r3, #1]
   1afc2:	b2da      	uxtb	r2, r3
   1afc4:	4b12      	ldr	r3, [pc, #72]	; (1b010 <set_Three_Phase_State_From_Voltage+0x118>)
   1afc6:	781b      	ldrb	r3, [r3, #0]
   1afc8:	b2db      	uxtb	r3, r3
   1afca:	429a      	cmp	r2, r3
   1afcc:	d014      	beq.n	1aff8 <set_Three_Phase_State_From_Voltage+0x100>
	{
		if(!motorRelatedVoltageBypassOn)
   1afce:	4b11      	ldr	r3, [pc, #68]	; (1b014 <set_Three_Phase_State_From_Voltage+0x11c>)
   1afd0:	781b      	ldrb	r3, [r3, #0]
   1afd2:	2201      	movs	r2, #1
   1afd4:	4053      	eors	r3, r2
   1afd6:	b2db      	uxtb	r3, r3
   1afd8:	2b00      	cmp	r3, #0
   1afda:	d00d      	beq.n	1aff8 <set_Three_Phase_State_From_Voltage+0x100>
		{
			last_three_phase_state  = 	temp_phase_state;								//assign saved temp AC Phase State to last_three_phase_state
   1afdc:	4b0e      	ldr	r3, [pc, #56]	; (1b018 <set_Three_Phase_State_From_Voltage+0x120>)
   1afde:	1dfa      	adds	r2, r7, #7
   1afe0:	7812      	ldrb	r2, [r2, #0]
   1afe2:	701a      	strb	r2, [r3, #0]
			current_three_phase_state = structThreePhase_state.u8t_phase_ac_state;
   1afe4:	4b07      	ldr	r3, [pc, #28]	; (1b004 <set_Three_Phase_State_From_Voltage+0x10c>)
   1afe6:	785b      	ldrb	r3, [r3, #1]
   1afe8:	b2da      	uxtb	r2, r3
   1afea:	4b09      	ldr	r3, [pc, #36]	; (1b010 <set_Three_Phase_State_From_Voltage+0x118>)
   1afec:	701a      	strb	r2, [r3, #0]
			eventOccured = true;
   1afee:	4b0b      	ldr	r3, [pc, #44]	; (1b01c <set_Three_Phase_State_From_Voltage+0x124>)
   1aff0:	2201      	movs	r2, #1
   1aff2:	701a      	strb	r2, [r3, #0]
   1aff4:	e000      	b.n	1aff8 <set_Three_Phase_State_From_Voltage+0x100>
		return;
   1aff6:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   1aff8:	46bd      	mov	sp, r7
   1affa:	b002      	add	sp, #8
   1affc:	bd80      	pop	{r7, pc}
   1affe:	46c0      	nop			; (mov r8, r8)
   1b000:	20000799 	.word	0x20000799
   1b004:	20000748 	.word	0x20000748
   1b008:	200006e8 	.word	0x200006e8
   1b00c:	20000654 	.word	0x20000654
   1b010:	20000841 	.word	0x20000841
   1b014:	20000773 	.word	0x20000773
   1b018:	2000072b 	.word	0x2000072b
   1b01c:	2000072e 	.word	0x2000072e

0001b020 <detect_Motor_Current>:

//Function to detect the Motor Current, From ADC, Average it (using ADC_0) , and store it in the Analog_Parameter_Struct
void detect_Motor_Current(void){
   1b020:	b590      	push	{r4, r7, lr}
   1b022:	b083      	sub	sp, #12
   1b024:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
   1b026:	4b33      	ldr	r3, [pc, #204]	; (1b0f4 <detect_Motor_Current+0xd4>)
   1b028:	681a      	ldr	r2, [r3, #0]
   1b02a:	2301      	movs	r3, #1
   1b02c:	425b      	negs	r3, r3
   1b02e:	0019      	movs	r1, r3
   1b030:	0010      	movs	r0, r2
   1b032:	4b31      	ldr	r3, [pc, #196]	; (1b0f8 <detect_Motor_Current+0xd8>)
   1b034:	4798      	blx	r3
   1b036:	0003      	movs	r3, r0
   1b038:	2b01      	cmp	r3, #1
   1b03a:	d157      	bne.n	1b0ec <detect_Motor_Current+0xcc>
	{
		uint32_t ADCcurrent = Read_ADC0(ADC_POSITIVE_INPUT_PIN16,200);
   1b03c:	21c8      	movs	r1, #200	; 0xc8
   1b03e:	2010      	movs	r0, #16
   1b040:	4b2e      	ldr	r3, [pc, #184]	; (1b0fc <detect_Motor_Current+0xdc>)
   1b042:	4798      	blx	r3
   1b044:	0003      	movs	r3, r0
   1b046:	607b      	str	r3, [r7, #4]
		
		
		if(ADCcurrent>15)
   1b048:	687b      	ldr	r3, [r7, #4]
   1b04a:	2b0f      	cmp	r3, #15
   1b04c:	d906      	bls.n	1b05c <detect_Motor_Current+0x3c>
		{
			ADCcurrent = abs(ADCcurrent - 15);
   1b04e:	687b      	ldr	r3, [r7, #4]
   1b050:	3b0f      	subs	r3, #15
   1b052:	17da      	asrs	r2, r3, #31
   1b054:	189b      	adds	r3, r3, r2
   1b056:	4053      	eors	r3, r2
   1b058:	607b      	str	r3, [r7, #4]
   1b05a:	e004      	b.n	1b066 <detect_Motor_Current+0x46>
		}
		else if(ADCcurrent <= 15)
   1b05c:	687b      	ldr	r3, [r7, #4]
   1b05e:	2b0f      	cmp	r3, #15
   1b060:	d801      	bhi.n	1b066 <detect_Motor_Current+0x46>
		{
			ADCcurrent = 0;
   1b062:	2300      	movs	r3, #0
   1b064:	607b      	str	r3, [r7, #4]
		}
		
		xSemaphoreGive(xADC_Semaphore);
   1b066:	4b23      	ldr	r3, [pc, #140]	; (1b0f4 <detect_Motor_Current+0xd4>)
   1b068:	6818      	ldr	r0, [r3, #0]
   1b06a:	2300      	movs	r3, #0
   1b06c:	2200      	movs	r2, #0
   1b06e:	2100      	movs	r1, #0
   1b070:	4c23      	ldr	r4, [pc, #140]	; (1b100 <detect_Motor_Current+0xe0>)
   1b072:	47a0      	blx	r4
		Analog_Parameter_Struct.Motor_Current_ADC_Value = ADCcurrent;				// does ADCcurrent here have ADC Value of Current ?
   1b074:	4b23      	ldr	r3, [pc, #140]	; (1b104 <detect_Motor_Current+0xe4>)
   1b076:	687a      	ldr	r2, [r7, #4]
   1b078:	60da      	str	r2, [r3, #12]
		//ADCcurrent = (ADCcurrent*7225)/1000;
		ADCcurrent = (ADCcurrent*3425)/1000;
   1b07a:	687b      	ldr	r3, [r7, #4]
   1b07c:	4a22      	ldr	r2, [pc, #136]	; (1b108 <detect_Motor_Current+0xe8>)
   1b07e:	435a      	muls	r2, r3
   1b080:	0010      	movs	r0, r2
   1b082:	4b22      	ldr	r3, [pc, #136]	; (1b10c <detect_Motor_Current+0xec>)
   1b084:	22fa      	movs	r2, #250	; 0xfa
   1b086:	0091      	lsls	r1, r2, #2
   1b088:	4798      	blx	r3
   1b08a:	0003      	movs	r3, r0
   1b08c:	607b      	str	r3, [r7, #4]
		if(ADCcurrent<1200 && ADCcurrent!=0)
   1b08e:	687b      	ldr	r3, [r7, #4]
   1b090:	4a1f      	ldr	r2, [pc, #124]	; (1b110 <detect_Motor_Current+0xf0>)
   1b092:	4293      	cmp	r3, r2
   1b094:	d810      	bhi.n	1b0b8 <detect_Motor_Current+0x98>
   1b096:	687b      	ldr	r3, [r7, #4]
   1b098:	2b00      	cmp	r3, #0
   1b09a:	d00d      	beq.n	1b0b8 <detect_Motor_Current+0x98>
		{
			ADCcurrent = ADCcurrent + (((1200-ADCcurrent)*272)/1000);
   1b09c:	687b      	ldr	r3, [r7, #4]
   1b09e:	4a1d      	ldr	r2, [pc, #116]	; (1b114 <detect_Motor_Current+0xf4>)
   1b0a0:	4353      	muls	r3, r2
   1b0a2:	4a1d      	ldr	r2, [pc, #116]	; (1b118 <detect_Motor_Current+0xf8>)
   1b0a4:	1898      	adds	r0, r3, r2
   1b0a6:	4b19      	ldr	r3, [pc, #100]	; (1b10c <detect_Motor_Current+0xec>)
   1b0a8:	22fa      	movs	r2, #250	; 0xfa
   1b0aa:	0091      	lsls	r1, r2, #2
   1b0ac:	4798      	blx	r3
   1b0ae:	0003      	movs	r3, r0
   1b0b0:	001a      	movs	r2, r3
   1b0b2:	687b      	ldr	r3, [r7, #4]
   1b0b4:	189b      	adds	r3, r3, r2
   1b0b6:	607b      	str	r3, [r7, #4]
		}
		Analog_Parameter_Struct.Motor_Current = ADCcurrent;
   1b0b8:	4b12      	ldr	r3, [pc, #72]	; (1b104 <detect_Motor_Current+0xe4>)
   1b0ba:	687a      	ldr	r2, [r7, #4]
   1b0bc:	611a      	str	r2, [r3, #16]
		Analog_Parameter_Struct.Motor_Current_IntPart = ADCcurrent/100;
   1b0be:	687a      	ldr	r2, [r7, #4]
   1b0c0:	4b12      	ldr	r3, [pc, #72]	; (1b10c <detect_Motor_Current+0xec>)
   1b0c2:	2164      	movs	r1, #100	; 0x64
   1b0c4:	0010      	movs	r0, r2
   1b0c6:	4798      	blx	r3
   1b0c8:	0003      	movs	r3, r0
   1b0ca:	b29a      	uxth	r2, r3
   1b0cc:	4b0d      	ldr	r3, [pc, #52]	; (1b104 <detect_Motor_Current+0xe4>)
   1b0ce:	829a      	strh	r2, [r3, #20]
		Analog_Parameter_Struct.Motor_Current_DecPart = ADCcurrent%100;
   1b0d0:	687a      	ldr	r2, [r7, #4]
   1b0d2:	4b12      	ldr	r3, [pc, #72]	; (1b11c <detect_Motor_Current+0xfc>)
   1b0d4:	2164      	movs	r1, #100	; 0x64
   1b0d6:	0010      	movs	r0, r2
   1b0d8:	4798      	blx	r3
   1b0da:	000b      	movs	r3, r1
   1b0dc:	b29a      	uxth	r2, r3
   1b0de:	4b09      	ldr	r3, [pc, #36]	; (1b104 <detect_Motor_Current+0xe4>)
   1b0e0:	82da      	strh	r2, [r3, #22]
		ucharCurrent_Detect_Flag = 0;												//reset the flag, to disable current reading for next 500ms
   1b0e2:	4b0f      	ldr	r3, [pc, #60]	; (1b120 <detect_Motor_Current+0x100>)
   1b0e4:	2200      	movs	r2, #0
   1b0e6:	701a      	strb	r2, [r3, #0]
		calcPowerConsumption();
   1b0e8:	4b0e      	ldr	r3, [pc, #56]	; (1b124 <detect_Motor_Current+0x104>)
   1b0ea:	4798      	blx	r3
	}
}
   1b0ec:	46c0      	nop			; (mov r8, r8)
   1b0ee:	46bd      	mov	sp, r7
   1b0f0:	b003      	add	sp, #12
   1b0f2:	bd90      	pop	{r4, r7, pc}
   1b0f4:	20000230 	.word	0x20000230
   1b0f8:	0001fd61 	.word	0x0001fd61
   1b0fc:	0001a095 	.word	0x0001a095
   1b100:	0001f8c1 	.word	0x0001f8c1
   1b104:	200006e8 	.word	0x200006e8
   1b108:	00000d61 	.word	0x00000d61
   1b10c:	00026c7d 	.word	0x00026c7d
   1b110:	000004af 	.word	0x000004af
   1b114:	fffffef0 	.word	0xfffffef0
   1b118:	0004fb00 	.word	0x0004fb00
   1b11c:	00026d89 	.word	0x00026d89
   1b120:	20000243 	.word	0x20000243
   1b124:	0001b129 	.word	0x0001b129

0001b128 <calcPowerConsumption>:

/************************************************************************/
/* To Calculate Power Consumption of Motor                              */
/************************************************************************/
void calcPowerConsumption(void)
{
   1b128:	b590      	push	{r4, r7, lr}
   1b12a:	b085      	sub	sp, #20
   1b12c:	af00      	add	r7, sp, #0
	uint16_t avgVotlage = Analog_Parameter_Struct.PhaseRY_Voltage + Analog_Parameter_Struct.PhaseYB_Voltage + Analog_Parameter_Struct.PhaseBR_Voltage;
   1b12e:	4b39      	ldr	r3, [pc, #228]	; (1b214 <calcPowerConsumption+0xec>)
   1b130:	681b      	ldr	r3, [r3, #0]
   1b132:	b29a      	uxth	r2, r3
   1b134:	4b37      	ldr	r3, [pc, #220]	; (1b214 <calcPowerConsumption+0xec>)
   1b136:	685b      	ldr	r3, [r3, #4]
   1b138:	b29b      	uxth	r3, r3
   1b13a:	18d3      	adds	r3, r2, r3
   1b13c:	b299      	uxth	r1, r3
   1b13e:	4b35      	ldr	r3, [pc, #212]	; (1b214 <calcPowerConsumption+0xec>)
   1b140:	689b      	ldr	r3, [r3, #8]
   1b142:	b29a      	uxth	r2, r3
   1b144:	230e      	movs	r3, #14
   1b146:	18fb      	adds	r3, r7, r3
   1b148:	188a      	adds	r2, r1, r2
   1b14a:	801a      	strh	r2, [r3, #0]
	
	double result = (avgVotlage/(float)3) * (Analog_Parameter_Struct.Motor_Current/(float)100);
   1b14c:	230e      	movs	r3, #14
   1b14e:	18fb      	adds	r3, r7, r3
   1b150:	881a      	ldrh	r2, [r3, #0]
   1b152:	4b31      	ldr	r3, [pc, #196]	; (1b218 <calcPowerConsumption+0xf0>)
   1b154:	0010      	movs	r0, r2
   1b156:	4798      	blx	r3
   1b158:	1c02      	adds	r2, r0, #0
   1b15a:	4b30      	ldr	r3, [pc, #192]	; (1b21c <calcPowerConsumption+0xf4>)
   1b15c:	4930      	ldr	r1, [pc, #192]	; (1b220 <calcPowerConsumption+0xf8>)
   1b15e:	1c10      	adds	r0, r2, #0
   1b160:	4798      	blx	r3
   1b162:	1c03      	adds	r3, r0, #0
   1b164:	1c1c      	adds	r4, r3, #0
   1b166:	4b2b      	ldr	r3, [pc, #172]	; (1b214 <calcPowerConsumption+0xec>)
   1b168:	691a      	ldr	r2, [r3, #16]
   1b16a:	4b2e      	ldr	r3, [pc, #184]	; (1b224 <calcPowerConsumption+0xfc>)
   1b16c:	0010      	movs	r0, r2
   1b16e:	4798      	blx	r3
   1b170:	1c02      	adds	r2, r0, #0
   1b172:	4b2a      	ldr	r3, [pc, #168]	; (1b21c <calcPowerConsumption+0xf4>)
   1b174:	492c      	ldr	r1, [pc, #176]	; (1b228 <calcPowerConsumption+0x100>)
   1b176:	1c10      	adds	r0, r2, #0
   1b178:	4798      	blx	r3
   1b17a:	1c03      	adds	r3, r0, #0
   1b17c:	1c1a      	adds	r2, r3, #0
   1b17e:	4b2b      	ldr	r3, [pc, #172]	; (1b22c <calcPowerConsumption+0x104>)
   1b180:	1c11      	adds	r1, r2, #0
   1b182:	1c20      	adds	r0, r4, #0
   1b184:	4798      	blx	r3
   1b186:	1c03      	adds	r3, r0, #0
   1b188:	1c1a      	adds	r2, r3, #0
   1b18a:	4b29      	ldr	r3, [pc, #164]	; (1b230 <calcPowerConsumption+0x108>)
   1b18c:	1c10      	adds	r0, r2, #0
   1b18e:	4798      	blx	r3
   1b190:	0003      	movs	r3, r0
   1b192:	000c      	movs	r4, r1
   1b194:	603b      	str	r3, [r7, #0]
   1b196:	607c      	str	r4, [r7, #4]
	result = sqrt(3) * result * 85 / (float)100;
   1b198:	4c26      	ldr	r4, [pc, #152]	; (1b234 <calcPowerConsumption+0x10c>)
   1b19a:	4a27      	ldr	r2, [pc, #156]	; (1b238 <calcPowerConsumption+0x110>)
   1b19c:	4b27      	ldr	r3, [pc, #156]	; (1b23c <calcPowerConsumption+0x114>)
   1b19e:	6838      	ldr	r0, [r7, #0]
   1b1a0:	6879      	ldr	r1, [r7, #4]
   1b1a2:	47a0      	blx	r4
   1b1a4:	0003      	movs	r3, r0
   1b1a6:	000c      	movs	r4, r1
   1b1a8:	0018      	movs	r0, r3
   1b1aa:	0021      	movs	r1, r4
   1b1ac:	4c21      	ldr	r4, [pc, #132]	; (1b234 <calcPowerConsumption+0x10c>)
   1b1ae:	2200      	movs	r2, #0
   1b1b0:	4b23      	ldr	r3, [pc, #140]	; (1b240 <calcPowerConsumption+0x118>)
   1b1b2:	47a0      	blx	r4
   1b1b4:	0003      	movs	r3, r0
   1b1b6:	000c      	movs	r4, r1
   1b1b8:	0018      	movs	r0, r3
   1b1ba:	0021      	movs	r1, r4
   1b1bc:	4c21      	ldr	r4, [pc, #132]	; (1b244 <calcPowerConsumption+0x11c>)
   1b1be:	2200      	movs	r2, #0
   1b1c0:	4b21      	ldr	r3, [pc, #132]	; (1b248 <calcPowerConsumption+0x120>)
   1b1c2:	47a0      	blx	r4
   1b1c4:	0003      	movs	r3, r0
   1b1c6:	000c      	movs	r4, r1
   1b1c8:	603b      	str	r3, [r7, #0]
   1b1ca:	607c      	str	r4, [r7, #4]

	Analog_Parameter_Struct.Motor_Power = (uint32_t) result;
   1b1cc:	4b1f      	ldr	r3, [pc, #124]	; (1b24c <calcPowerConsumption+0x124>)
   1b1ce:	6838      	ldr	r0, [r7, #0]
   1b1d0:	6879      	ldr	r1, [r7, #4]
   1b1d2:	4798      	blx	r3
   1b1d4:	0002      	movs	r2, r0
   1b1d6:	4b0f      	ldr	r3, [pc, #60]	; (1b214 <calcPowerConsumption+0xec>)
   1b1d8:	621a      	str	r2, [r3, #32]
	Analog_Parameter_Struct.Motor_Power_IntPart = (uint32_t) result / 1000;
   1b1da:	4b1c      	ldr	r3, [pc, #112]	; (1b24c <calcPowerConsumption+0x124>)
   1b1dc:	6838      	ldr	r0, [r7, #0]
   1b1de:	6879      	ldr	r1, [r7, #4]
   1b1e0:	4798      	blx	r3
   1b1e2:	4b1b      	ldr	r3, [pc, #108]	; (1b250 <calcPowerConsumption+0x128>)
   1b1e4:	22fa      	movs	r2, #250	; 0xfa
   1b1e6:	0091      	lsls	r1, r2, #2
   1b1e8:	4798      	blx	r3
   1b1ea:	0003      	movs	r3, r0
   1b1ec:	b29a      	uxth	r2, r3
   1b1ee:	4b09      	ldr	r3, [pc, #36]	; (1b214 <calcPowerConsumption+0xec>)
   1b1f0:	849a      	strh	r2, [r3, #36]	; 0x24
	Analog_Parameter_Struct.Motor_Power_DecPart =  (uint32_t) result % 1000;
   1b1f2:	4b16      	ldr	r3, [pc, #88]	; (1b24c <calcPowerConsumption+0x124>)
   1b1f4:	6838      	ldr	r0, [r7, #0]
   1b1f6:	6879      	ldr	r1, [r7, #4]
   1b1f8:	4798      	blx	r3
   1b1fa:	4b16      	ldr	r3, [pc, #88]	; (1b254 <calcPowerConsumption+0x12c>)
   1b1fc:	22fa      	movs	r2, #250	; 0xfa
   1b1fe:	0091      	lsls	r1, r2, #2
   1b200:	4798      	blx	r3
   1b202:	000b      	movs	r3, r1
   1b204:	001a      	movs	r2, r3
   1b206:	4b03      	ldr	r3, [pc, #12]	; (1b214 <calcPowerConsumption+0xec>)
   1b208:	629a      	str	r2, [r3, #40]	; 0x28
}
   1b20a:	46c0      	nop			; (mov r8, r8)
   1b20c:	46bd      	mov	sp, r7
   1b20e:	b005      	add	sp, #20
   1b210:	bd90      	pop	{r4, r7, pc}
   1b212:	46c0      	nop			; (mov r8, r8)
   1b214:	200006e8 	.word	0x200006e8
   1b218:	00027a29 	.word	0x00027a29
   1b21c:	00027559 	.word	0x00027559
   1b220:	40400000 	.word	0x40400000
   1b224:	00027ac9 	.word	0x00027ac9
   1b228:	42c80000 	.word	0x42c80000
   1b22c:	000277e9 	.word	0x000277e9
   1b230:	000296a5 	.word	0x000296a5
   1b234:	000289dd 	.word	0x000289dd
   1b238:	e8584caa 	.word	0xe8584caa
   1b23c:	3ffbb67a 	.word	0x3ffbb67a
   1b240:	40554000 	.word	0x40554000
   1b244:	00028175 	.word	0x00028175
   1b248:	40590000 	.word	0x40590000
   1b24c:	00027079 	.word	0x00027079
   1b250:	00026c7d 	.word	0x00026c7d
   1b254:	00026d89 	.word	0x00026d89

0001b258 <should_Detect_New_Current>:

//Function to check if the New Current Reading should be read
bool should_Detect_New_Current(void){
   1b258:	b580      	push	{r7, lr}
   1b25a:	af00      	add	r7, sp, #0
	
	//todo : add all the conditions checks i.e. motor ON, current consumption ON etc. , and should get new reading every 500ms
	
	return (ucharCurrent_Detect_Flag == 1);
   1b25c:	4b04      	ldr	r3, [pc, #16]	; (1b270 <should_Detect_New_Current+0x18>)
   1b25e:	781b      	ldrb	r3, [r3, #0]
   1b260:	b2db      	uxtb	r3, r3
   1b262:	3b01      	subs	r3, #1
   1b264:	425a      	negs	r2, r3
   1b266:	4153      	adcs	r3, r2
   1b268:	b2db      	uxtb	r3, r3
	
	//return (should_Detect_New_Voltage());
}
   1b26a:	0018      	movs	r0, r3
   1b26c:	46bd      	mov	sp, r7
   1b26e:	bd80      	pop	{r7, pc}
   1b270:	20000243 	.word	0x20000243

0001b274 <getACPowerState>:

bool getACPowerState(void)
{
   1b274:	b580      	push	{r7, lr}
   1b276:	af00      	add	r7, sp, #0
	//return false;
	return phaseAC;
   1b278:	4b02      	ldr	r3, [pc, #8]	; (1b284 <getACPowerState+0x10>)
   1b27a:	781b      	ldrb	r3, [r3, #0]
   1b27c:	b2db      	uxtb	r3, r3
}
   1b27e:	0018      	movs	r0, r3
   1b280:	46bd      	mov	sp, r7
   1b282:	bd80      	pop	{r7, pc}
   1b284:	200007c2 	.word	0x200007c2

0001b288 <setACPowerState>:

void setACPowerState(bool state)
{
   1b288:	b580      	push	{r7, lr}
   1b28a:	b082      	sub	sp, #8
   1b28c:	af00      	add	r7, sp, #0
   1b28e:	0002      	movs	r2, r0
   1b290:	1dfb      	adds	r3, r7, #7
   1b292:	701a      	strb	r2, [r3, #0]
	phaseAC = state;
   1b294:	4b03      	ldr	r3, [pc, #12]	; (1b2a4 <setACPowerState+0x1c>)
   1b296:	1dfa      	adds	r2, r7, #7
   1b298:	7812      	ldrb	r2, [r2, #0]
   1b29a:	701a      	strb	r2, [r3, #0]
}
   1b29c:	46c0      	nop			; (mov r8, r8)
   1b29e:	46bd      	mov	sp, r7
   1b2a0:	b002      	add	sp, #8
   1b2a2:	bd80      	pop	{r7, pc}
   1b2a4:	200007c2 	.word	0x200007c2

0001b2a8 <getAllPhaseState>:

uint8_t getAllPhaseState(void)
{
   1b2a8:	b580      	push	{r7, lr}
   1b2aa:	af00      	add	r7, sp, #0
	return allPhase;
   1b2ac:	4b02      	ldr	r3, [pc, #8]	; (1b2b8 <getAllPhaseState+0x10>)
   1b2ae:	781b      	ldrb	r3, [r3, #0]
   1b2b0:	b2db      	uxtb	r3, r3
	//}
	//else
	//{
	//return allPhase;
	//}
}
   1b2b2:	0018      	movs	r0, r3
   1b2b4:	46bd      	mov	sp, r7
   1b2b6:	bd80      	pop	{r7, pc}
   1b2b8:	20000761 	.word	0x20000761

0001b2bc <setAllPhaseState>:

void setAllPhaseState(uint8_t state)
{
   1b2bc:	b580      	push	{r7, lr}
   1b2be:	b082      	sub	sp, #8
   1b2c0:	af00      	add	r7, sp, #0
   1b2c2:	0002      	movs	r2, r0
   1b2c4:	1dfb      	adds	r3, r7, #7
   1b2c6:	701a      	strb	r2, [r3, #0]
	allPhase = state;
   1b2c8:	4b03      	ldr	r3, [pc, #12]	; (1b2d8 <setAllPhaseState+0x1c>)
   1b2ca:	1dfa      	adds	r2, r7, #7
   1b2cc:	7812      	ldrb	r2, [r2, #0]
   1b2ce:	701a      	strb	r2, [r3, #0]
}
   1b2d0:	46c0      	nop			; (mov r8, r8)
   1b2d2:	46bd      	mov	sp, r7
   1b2d4:	b002      	add	sp, #8
   1b2d6:	bd80      	pop	{r7, pc}
   1b2d8:	20000761 	.word	0x20000761

0001b2dc <getPhaseSequence>:

bool getPhaseSequence()
{
   1b2dc:	b580      	push	{r7, lr}
   1b2de:	af00      	add	r7, sp, #0
	return vBoolPhaseSeq;
   1b2e0:	4b02      	ldr	r3, [pc, #8]	; (1b2ec <getPhaseSequence+0x10>)
   1b2e2:	781b      	ldrb	r3, [r3, #0]
   1b2e4:	b2db      	uxtb	r3, r3
}
   1b2e6:	0018      	movs	r0, r3
   1b2e8:	46bd      	mov	sp, r7
   1b2ea:	bd80      	pop	{r7, pc}
   1b2ec:	20000774 	.word	0x20000774

0001b2f0 <setPhaseSequence>:

void setPhaseSequence(bool phaseSequence)
{
   1b2f0:	b580      	push	{r7, lr}
   1b2f2:	b082      	sub	sp, #8
   1b2f4:	af00      	add	r7, sp, #0
   1b2f6:	0002      	movs	r2, r0
   1b2f8:	1dfb      	adds	r3, r7, #7
   1b2fa:	701a      	strb	r2, [r3, #0]
	vBoolPhaseSeq=phaseSequence;
   1b2fc:	4b03      	ldr	r3, [pc, #12]	; (1b30c <setPhaseSequence+0x1c>)
   1b2fe:	1dfa      	adds	r2, r7, #7
   1b300:	7812      	ldrb	r2, [r2, #0]
   1b302:	701a      	strb	r2, [r3, #0]
}
   1b304:	46c0      	nop			; (mov r8, r8)
   1b306:	46bd      	mov	sp, r7
   1b308:	b002      	add	sp, #8
   1b30a:	bd80      	pop	{r7, pc}
   1b30c:	20000774 	.word	0x20000774

0001b310 <getMotorState>:


bool getMotorState(void)
{
   1b310:	b580      	push	{r7, lr}
   1b312:	af00      	add	r7, sp, #0
	return mFeedback;
   1b314:	4b02      	ldr	r3, [pc, #8]	; (1b320 <getMotorState+0x10>)
   1b316:	781b      	ldrb	r3, [r3, #0]
   1b318:	b2db      	uxtb	r3, r3
}
   1b31a:	0018      	movs	r0, r3
   1b31c:	46bd      	mov	sp, r7
   1b31e:	bd80      	pop	{r7, pc}
   1b320:	20000742 	.word	0x20000742

0001b324 <setMotorState>:

void setMotorState(bool state)
{
   1b324:	b580      	push	{r7, lr}
   1b326:	b082      	sub	sp, #8
   1b328:	af00      	add	r7, sp, #0
   1b32a:	0002      	movs	r2, r0
   1b32c:	1dfb      	adds	r3, r7, #7
   1b32e:	701a      	strb	r2, [r3, #0]
	mFeedback = state;
   1b330:	4b0a      	ldr	r3, [pc, #40]	; (1b35c <setMotorState+0x38>)
   1b332:	1dfa      	adds	r2, r7, #7
   1b334:	7812      	ldrb	r2, [r2, #0]
   1b336:	701a      	strb	r2, [r3, #0]
	if (state)
   1b338:	1dfb      	adds	r3, r7, #7
   1b33a:	781b      	ldrb	r3, [r3, #0]
   1b33c:	2b00      	cmp	r3, #0
   1b33e:	d004      	beq.n	1b34a <setMotorState+0x26>
	{
		MOTOR_ON_LED_ON;
   1b340:	2100      	movs	r1, #0
   1b342:	2005      	movs	r0, #5
   1b344:	4b06      	ldr	r3, [pc, #24]	; (1b360 <setMotorState+0x3c>)
   1b346:	4798      	blx	r3
	}
	else
	{
		MOTOR_ON_LED_OFF;
	}
}
   1b348:	e003      	b.n	1b352 <setMotorState+0x2e>
		MOTOR_ON_LED_OFF;
   1b34a:	2101      	movs	r1, #1
   1b34c:	2005      	movs	r0, #5
   1b34e:	4b04      	ldr	r3, [pc, #16]	; (1b360 <setMotorState+0x3c>)
   1b350:	4798      	blx	r3
}
   1b352:	46c0      	nop			; (mov r8, r8)
   1b354:	46bd      	mov	sp, r7
   1b356:	b002      	add	sp, #8
   1b358:	bd80      	pop	{r7, pc}
   1b35a:	46c0      	nop			; (mov r8, r8)
   1b35c:	20000742 	.word	0x20000742
   1b360:	00019591 	.word	0x00019591

0001b364 <getMotorState_from_pin>:

bool getMotorState_from_pin(void)
{
   1b364:	b590      	push	{r4, r7, lr}
   1b366:	b083      	sub	sp, #12
   1b368:	af00      	add	r7, sp, #0
	uint8_t p1;
	bool p2, p3, p4;
	readSensorState(&p1, &p2, &p3, &p4);
   1b36a:	1d3b      	adds	r3, r7, #4
   1b36c:	1d7a      	adds	r2, r7, #5
   1b36e:	1db9      	adds	r1, r7, #6
   1b370:	1df8      	adds	r0, r7, #7
   1b372:	4c06      	ldr	r4, [pc, #24]	; (1b38c <getMotorState_from_pin+0x28>)
   1b374:	47a0      	blx	r4
	setMotorState(p3);
   1b376:	1d7b      	adds	r3, r7, #5
   1b378:	781b      	ldrb	r3, [r3, #0]
   1b37a:	0018      	movs	r0, r3
   1b37c:	4b04      	ldr	r3, [pc, #16]	; (1b390 <getMotorState_from_pin+0x2c>)
   1b37e:	4798      	blx	r3
	return p3;
   1b380:	1d7b      	adds	r3, r7, #5
   1b382:	781b      	ldrb	r3, [r3, #0]
}
   1b384:	0018      	movs	r0, r3
   1b386:	46bd      	mov	sp, r7
   1b388:	b003      	add	sp, #12
   1b38a:	bd90      	pop	{r4, r7, pc}
   1b38c:	0001b395 	.word	0x0001b395
   1b390:	0001b325 	.word	0x0001b325

0001b394 <readSensorState>:



void readSensorState(uint8_t *allPhase, bool *phaseSeq,bool *motor, bool *acPhase)
{
   1b394:	b590      	push	{r4, r7, lr}
   1b396:	b087      	sub	sp, #28
   1b398:	af00      	add	r7, sp, #0
   1b39a:	60f8      	str	r0, [r7, #12]
   1b39c:	60b9      	str	r1, [r7, #8]
   1b39e:	607a      	str	r2, [r7, #4]
   1b3a0:	603b      	str	r3, [r7, #0]
	*allPhase = structThreePhase_state.u8t_phase_ac_state;
   1b3a2:	4b37      	ldr	r3, [pc, #220]	; (1b480 <readSensorState+0xec>)
   1b3a4:	785b      	ldrb	r3, [r3, #1]
   1b3a6:	b2da      	uxtb	r2, r3
   1b3a8:	68fb      	ldr	r3, [r7, #12]
   1b3aa:	701a      	strb	r2, [r3, #0]
	//*phaseSeq = structThreePhase_state.u8t_phase_sequence_flag;
	if(structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
   1b3ac:	4b34      	ldr	r3, [pc, #208]	; (1b480 <readSensorState+0xec>)
   1b3ae:	781b      	ldrb	r3, [r3, #0]
   1b3b0:	b2db      	uxtb	r3, r3
   1b3b2:	2b02      	cmp	r3, #2
   1b3b4:	d103      	bne.n	1b3be <readSensorState+0x2a>
	{
		*phaseSeq=true;
   1b3b6:	68bb      	ldr	r3, [r7, #8]
   1b3b8:	2201      	movs	r2, #1
   1b3ba:	701a      	strb	r2, [r3, #0]
   1b3bc:	e002      	b.n	1b3c4 <readSensorState+0x30>
	}
	else
	{
		*phaseSeq = false;
   1b3be:	68bb      	ldr	r3, [r7, #8]
   1b3c0:	2200      	movs	r2, #0
   1b3c2:	701a      	strb	r2, [r3, #0]
	//{
	//*p1 = false;
	//}

	// If MotorFeedback Detection is disabled
	if (user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_OFF)
   1b3c4:	4b2f      	ldr	r3, [pc, #188]	; (1b484 <readSensorState+0xf0>)
   1b3c6:	2225      	movs	r2, #37	; 0x25
   1b3c8:	5c9b      	ldrb	r3, [r3, r2]
   1b3ca:	2b00      	cmp	r3, #0
   1b3cc:	d106      	bne.n	1b3dc <readSensorState+0x48>
	{
		*motor  = getMotorState();
   1b3ce:	4b2e      	ldr	r3, [pc, #184]	; (1b488 <readSensorState+0xf4>)
   1b3d0:	4798      	blx	r3
   1b3d2:	0003      	movs	r3, r0
   1b3d4:	001a      	movs	r2, r3
   1b3d6:	687b      	ldr	r3, [r7, #4]
   1b3d8:	701a      	strb	r2, [r3, #0]
   1b3da:	e020      	b.n	1b41e <readSensorState+0x8a>
	}
	// If Motor Feedback is to be detected using Current
	else if(user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_CURRENT)
   1b3dc:	4b29      	ldr	r3, [pc, #164]	; (1b484 <readSensorState+0xf0>)
   1b3de:	2225      	movs	r2, #37	; 0x25
   1b3e0:	5c9b      	ldrb	r3, [r3, r2]
   1b3e2:	2b01      	cmp	r3, #1
   1b3e4:	d106      	bne.n	1b3f4 <readSensorState+0x60>
	{
		*motor = checkMotorStatusUsingCurrent();
   1b3e6:	4b29      	ldr	r3, [pc, #164]	; (1b48c <readSensorState+0xf8>)
   1b3e8:	4798      	blx	r3
   1b3ea:	0003      	movs	r3, r0
   1b3ec:	001a      	movs	r2, r3
   1b3ee:	687b      	ldr	r3, [r7, #4]
   1b3f0:	701a      	strb	r2, [r3, #0]
   1b3f2:	e014      	b.n	1b41e <readSensorState+0x8a>
		
	}
	// if Motor Feedback is to be detected using HW Feedback Circuit
	else if(user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_ON)
   1b3f4:	4b23      	ldr	r3, [pc, #140]	; (1b484 <readSensorState+0xf0>)
   1b3f6:	2225      	movs	r2, #37	; 0x25
   1b3f8:	5c9b      	ldrb	r3, [r3, r2]
   1b3fa:	2b02      	cmp	r3, #2
   1b3fc:	d10f      	bne.n	1b41e <readSensorState+0x8a>
	{
		*motor  = !(port_pin_get_input_level(PIN_MOTOR_FEEDBACK));
   1b3fe:	202e      	movs	r0, #46	; 0x2e
   1b400:	4b23      	ldr	r3, [pc, #140]	; (1b490 <readSensorState+0xfc>)
   1b402:	4798      	blx	r3
   1b404:	0003      	movs	r3, r0
   1b406:	1e5a      	subs	r2, r3, #1
   1b408:	4193      	sbcs	r3, r2
   1b40a:	b2db      	uxtb	r3, r3
   1b40c:	2201      	movs	r2, #1
   1b40e:	4053      	eors	r3, r2
   1b410:	b2db      	uxtb	r3, r3
   1b412:	1c1a      	adds	r2, r3, #0
   1b414:	2301      	movs	r3, #1
   1b416:	4013      	ands	r3, r2
   1b418:	b2da      	uxtb	r2, r3
   1b41a:	687b      	ldr	r3, [r7, #4]
   1b41c:	701a      	strb	r2, [r3, #0]
	}


	
	uint8_t last_comparison = AC_CHAN_STATUS_UNKNOWN;
   1b41e:	2317      	movs	r3, #23
   1b420:	18fb      	adds	r3, r7, r3
   1b422:	2201      	movs	r2, #1
   1b424:	701a      	strb	r2, [r3, #0]
	
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0);
   1b426:	2317      	movs	r3, #23
   1b428:	18fc      	adds	r4, r7, r3
   1b42a:	4b1a      	ldr	r3, [pc, #104]	; (1b494 <readSensorState+0x100>)
   1b42c:	2100      	movs	r1, #0
   1b42e:	0018      	movs	r0, r3
   1b430:	4b19      	ldr	r3, [pc, #100]	; (1b498 <readSensorState+0x104>)
   1b432:	4798      	blx	r3
   1b434:	0003      	movs	r3, r0
   1b436:	7023      	strb	r3, [r4, #0]
	vTaskDelay(500/portTICK_PERIOD_MS);
   1b438:	23fa      	movs	r3, #250	; 0xfa
   1b43a:	005b      	lsls	r3, r3, #1
   1b43c:	0018      	movs	r0, r3
   1b43e:	4b17      	ldr	r3, [pc, #92]	; (1b49c <readSensorState+0x108>)
   1b440:	4798      	blx	r3
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0); //read again
   1b442:	2317      	movs	r3, #23
   1b444:	18fc      	adds	r4, r7, r3
   1b446:	4b13      	ldr	r3, [pc, #76]	; (1b494 <readSensorState+0x100>)
   1b448:	2100      	movs	r1, #0
   1b44a:	0018      	movs	r0, r3
   1b44c:	4b12      	ldr	r3, [pc, #72]	; (1b498 <readSensorState+0x104>)
   1b44e:	4798      	blx	r3
   1b450:	0003      	movs	r3, r0
   1b452:	7023      	strb	r3, [r4, #0]
	
	if (last_comparison & AC_CHAN_STATUS_POS_ABOVE_NEG)
   1b454:	2317      	movs	r3, #23
   1b456:	18fb      	adds	r3, r7, r3
   1b458:	781b      	ldrb	r3, [r3, #0]
   1b45a:	2204      	movs	r2, #4
   1b45c:	4013      	ands	r3, r2
   1b45e:	d003      	beq.n	1b468 <readSensorState+0xd4>
	{
		isACpowerAvailable = true;
   1b460:	4b0f      	ldr	r3, [pc, #60]	; (1b4a0 <readSensorState+0x10c>)
   1b462:	2201      	movs	r2, #1
   1b464:	701a      	strb	r2, [r3, #0]
   1b466:	e002      	b.n	1b46e <readSensorState+0xda>
	}
	else
	{
		isACpowerAvailable = false;
   1b468:	4b0d      	ldr	r3, [pc, #52]	; (1b4a0 <readSensorState+0x10c>)
   1b46a:	2200      	movs	r2, #0
   1b46c:	701a      	strb	r2, [r3, #0]
	}
	
	*acPhase =  isACpowerAvailable;
   1b46e:	4b0c      	ldr	r3, [pc, #48]	; (1b4a0 <readSensorState+0x10c>)
   1b470:	781b      	ldrb	r3, [r3, #0]
   1b472:	b2da      	uxtb	r2, r3
   1b474:	683b      	ldr	r3, [r7, #0]
   1b476:	701a      	strb	r2, [r3, #0]
}
   1b478:	46c0      	nop			; (mov r8, r8)
   1b47a:	46bd      	mov	sp, r7
   1b47c:	b007      	add	sp, #28
   1b47e:	bd90      	pop	{r4, r7, pc}
   1b480:	20000748 	.word	0x20000748
   1b484:	20000654 	.word	0x20000654
   1b488:	0001b311 	.word	0x0001b311
   1b48c:	0001b4a5 	.word	0x0001b4a5
   1b490:	0001954d 	.word	0x0001954d
   1b494:	2000088c 	.word	0x2000088c
   1b498:	00019081 	.word	0x00019081
   1b49c:	00020669 	.word	0x00020669
   1b4a0:	2000078d 	.word	0x2000078d

0001b4a4 <checkMotorStatusUsingCurrent>:

bool checkMotorStatusUsingCurrent(void)
{
   1b4a4:	b580      	push	{r7, lr}
   1b4a6:	af00      	add	r7, sp, #0
	if(stopMotorCommandGiven)
   1b4a8:	4b0e      	ldr	r3, [pc, #56]	; (1b4e4 <checkMotorStatusUsingCurrent+0x40>)
   1b4aa:	781b      	ldrb	r3, [r3, #0]
   1b4ac:	2b00      	cmp	r3, #0
   1b4ae:	d00d      	beq.n	1b4cc <checkMotorStatusUsingCurrent+0x28>
	{
		if(Analog_Parameter_Struct.Motor_Current_IntPart <= (fdbkRefCurrent/2))
   1b4b0:	4b0d      	ldr	r3, [pc, #52]	; (1b4e8 <checkMotorStatusUsingCurrent+0x44>)
   1b4b2:	8a9b      	ldrh	r3, [r3, #20]
   1b4b4:	b29a      	uxth	r2, r3
   1b4b6:	4b0d      	ldr	r3, [pc, #52]	; (1b4ec <checkMotorStatusUsingCurrent+0x48>)
   1b4b8:	781b      	ldrb	r3, [r3, #0]
   1b4ba:	085b      	lsrs	r3, r3, #1
   1b4bc:	b2db      	uxtb	r3, r3
   1b4be:	b29b      	uxth	r3, r3
   1b4c0:	429a      	cmp	r2, r3
   1b4c2:	d801      	bhi.n	1b4c8 <checkMotorStatusUsingCurrent+0x24>
		{
			return false;
   1b4c4:	2300      	movs	r3, #0
   1b4c6:	e009      	b.n	1b4dc <checkMotorStatusUsingCurrent+0x38>
		}
		else
		{
			return true;
   1b4c8:	2301      	movs	r3, #1
   1b4ca:	e007      	b.n	1b4dc <checkMotorStatusUsingCurrent+0x38>
		}
	}
	else
	{
		if (Analog_Parameter_Struct.Motor_Current_IntPart > 4)
   1b4cc:	4b06      	ldr	r3, [pc, #24]	; (1b4e8 <checkMotorStatusUsingCurrent+0x44>)
   1b4ce:	8a9b      	ldrh	r3, [r3, #20]
   1b4d0:	b29b      	uxth	r3, r3
   1b4d2:	2b04      	cmp	r3, #4
   1b4d4:	d901      	bls.n	1b4da <checkMotorStatusUsingCurrent+0x36>
		{
			return true;
   1b4d6:	2301      	movs	r3, #1
   1b4d8:	e000      	b.n	1b4dc <checkMotorStatusUsingCurrent+0x38>
		}
		else
		{
			return false;
   1b4da:	2300      	movs	r3, #0
		}
	}
}
   1b4dc:	0018      	movs	r0, r3
   1b4de:	46bd      	mov	sp, r7
   1b4e0:	bd80      	pop	{r7, pc}
   1b4e2:	46c0      	nop			; (mov r8, r8)
   1b4e4:	20000860 	.word	0x20000860
   1b4e8:	200006e8 	.word	0x200006e8
   1b4ec:	200007f4 	.word	0x200007f4

0001b4f0 <detectMotorStateChangeUsingCurrent>:

bool detectMotorStateChangeUsingCurrent(void)
{
   1b4f0:	b5b0      	push	{r4, r5, r7, lr}
   1b4f2:	af00      	add	r7, sp, #0
	if (getMotorState() != checkMotorStatusUsingCurrent())
   1b4f4:	4b07      	ldr	r3, [pc, #28]	; (1b514 <detectMotorStateChangeUsingCurrent+0x24>)
   1b4f6:	4798      	blx	r3
   1b4f8:	0003      	movs	r3, r0
   1b4fa:	001c      	movs	r4, r3
   1b4fc:	4b06      	ldr	r3, [pc, #24]	; (1b518 <detectMotorStateChangeUsingCurrent+0x28>)
   1b4fe:	4798      	blx	r3
   1b500:	0003      	movs	r3, r0
   1b502:	429c      	cmp	r4, r3
   1b504:	d001      	beq.n	1b50a <detectMotorStateChangeUsingCurrent+0x1a>
	{
		return true;
   1b506:	2301      	movs	r3, #1
   1b508:	e000      	b.n	1b50c <detectMotorStateChangeUsingCurrent+0x1c>
	}
	else
	{
		return false;
   1b50a:	2300      	movs	r3, #0
	}
}
   1b50c:	0018      	movs	r0, r3
   1b50e:	46bd      	mov	sp, r7
   1b510:	bdb0      	pop	{r4, r5, r7, pc}
   1b512:	46c0      	nop			; (mov r8, r8)
   1b514:	0001b311 	.word	0x0001b311
   1b518:	0001b4a5 	.word	0x0001b4a5

0001b51c <updateSensorState>:


void updateSensorState(uint8_t var3PhaseState, bool var3PhaseSeq, bool motorState, bool acPhaseState)
{
   1b51c:	b5b0      	push	{r4, r5, r7, lr}
   1b51e:	b084      	sub	sp, #16
   1b520:	af00      	add	r7, sp, #0
   1b522:	0005      	movs	r5, r0
   1b524:	000c      	movs	r4, r1
   1b526:	0010      	movs	r0, r2
   1b528:	0019      	movs	r1, r3
   1b52a:	1dfb      	adds	r3, r7, #7
   1b52c:	1c2a      	adds	r2, r5, #0
   1b52e:	701a      	strb	r2, [r3, #0]
   1b530:	1dbb      	adds	r3, r7, #6
   1b532:	1c22      	adds	r2, r4, #0
   1b534:	701a      	strb	r2, [r3, #0]
   1b536:	1d7b      	adds	r3, r7, #5
   1b538:	1c02      	adds	r2, r0, #0
   1b53a:	701a      	strb	r2, [r3, #0]
   1b53c:	1d3b      	adds	r3, r7, #4
   1b53e:	1c0a      	adds	r2, r1, #0
   1b540:	701a      	strb	r2, [r3, #0]
	setAllPhaseState(var3PhaseState); // allPhase = p1;
   1b542:	1dfb      	adds	r3, r7, #7
   1b544:	781b      	ldrb	r3, [r3, #0]
   1b546:	0018      	movs	r0, r3
   1b548:	4b27      	ldr	r3, [pc, #156]	; (1b5e8 <updateSensorState+0xcc>)
   1b54a:	4798      	blx	r3
	setPhaseSequence(var3PhaseSeq);
   1b54c:	1dbb      	adds	r3, r7, #6
   1b54e:	781b      	ldrb	r3, [r3, #0]
   1b550:	0018      	movs	r0, r3
   1b552:	4b26      	ldr	r3, [pc, #152]	; (1b5ec <updateSensorState+0xd0>)
   1b554:	4798      	blx	r3
	setMotorState(motorState); // mFeedback = p2;
   1b556:	1d7b      	adds	r3, r7, #5
   1b558:	781b      	ldrb	r3, [r3, #0]
   1b55a:	0018      	movs	r0, r3
   1b55c:	4b24      	ldr	r3, [pc, #144]	; (1b5f0 <updateSensorState+0xd4>)
   1b55e:	4798      	blx	r3
	setACPowerState(acPhaseState); // phaseAC = p4;
   1b560:	1d3b      	adds	r3, r7, #4
   1b562:	781b      	ldrb	r3, [r3, #0]
   1b564:	0018      	movs	r0, r3
   1b566:	4b23      	ldr	r3, [pc, #140]	; (1b5f4 <updateSensorState+0xd8>)
   1b568:	4798      	blx	r3
	
	//if(getAllPhaseState()==AC_3PH && getACPowerState())
	if(getAllPhaseState()==AC_3PH)
   1b56a:	4b23      	ldr	r3, [pc, #140]	; (1b5f8 <updateSensorState+0xdc>)
   1b56c:	4798      	blx	r3
   1b56e:	0003      	movs	r3, r0
   1b570:	2b03      	cmp	r3, #3
   1b572:	d12a      	bne.n	1b5ca <updateSensorState+0xae>
	{
		bool tempPhaseSequence = true;									// init temp variable with default value as correct sequence
   1b574:	230f      	movs	r3, #15
   1b576:	18fb      	adds	r3, r7, r3
   1b578:	2201      	movs	r2, #1
   1b57a:	701a      	strb	r2, [r3, #0]

		if(user_settings_parameter_struct.detectPhaseSequence)			// if detection of Phase Sequence is enabled
   1b57c:	4b1f      	ldr	r3, [pc, #124]	; (1b5fc <updateSensorState+0xe0>)
   1b57e:	2224      	movs	r2, #36	; 0x24
   1b580:	5c9b      	ldrb	r3, [r3, r2]
   1b582:	2b00      	cmp	r3, #0
   1b584:	d005      	beq.n	1b592 <updateSensorState+0x76>
		{
			tempPhaseSequence = getPhaseSequence();						// save the current phase sequence  in temp varialbe for further use
   1b586:	230f      	movs	r3, #15
   1b588:	18fc      	adds	r4, r7, r3
   1b58a:	4b1d      	ldr	r3, [pc, #116]	; (1b600 <updateSensorState+0xe4>)
   1b58c:	4798      	blx	r3
   1b58e:	0003      	movs	r3, r0
   1b590:	7023      	strb	r3, [r4, #0]
		}

		if(tempPhaseSequence)											// check if sequence is correct
   1b592:	230f      	movs	r3, #15
   1b594:	18fb      	adds	r3, r7, r3
   1b596:	781b      	ldrb	r3, [r3, #0]
   1b598:	2b00      	cmp	r3, #0
   1b59a:	d004      	beq.n	1b5a6 <updateSensorState+0x8a>
		{
			THREEPHASE_OK_LED_ON;
   1b59c:	2100      	movs	r1, #0
   1b59e:	2027      	movs	r0, #39	; 0x27
   1b5a0:	4b18      	ldr	r3, [pc, #96]	; (1b604 <updateSensorState+0xe8>)
   1b5a2:	4798      	blx	r3
   1b5a4:	e003      	b.n	1b5ae <updateSensorState+0x92>
		}
		else
		{
			THREEPHASE_OK_LED_OFF;
   1b5a6:	2101      	movs	r1, #1
   1b5a8:	2027      	movs	r0, #39	; 0x27
   1b5aa:	4b16      	ldr	r3, [pc, #88]	; (1b604 <updateSensorState+0xe8>)
   1b5ac:	4798      	blx	r3
		}
		
		if((bool)user_settings_parameter_struct.autoStartAddress)
   1b5ae:	4b13      	ldr	r3, [pc, #76]	; (1b5fc <updateSensorState+0xe0>)
   1b5b0:	785b      	ldrb	r3, [r3, #1]
   1b5b2:	2b00      	cmp	r3, #0
   1b5b4:	d004      	beq.n	1b5c0 <updateSensorState+0xa4>
		{
			AUTO_ON_LED_ON;
   1b5b6:	2100      	movs	r1, #0
   1b5b8:	2028      	movs	r0, #40	; 0x28
   1b5ba:	4b12      	ldr	r3, [pc, #72]	; (1b604 <updateSensorState+0xe8>)
   1b5bc:	4798      	blx	r3
	//
	//if (!getACPowerState() || !getAllPhaseState())
	//{
	//startTimerOn = false;
	//}
}
   1b5be:	e00f      	b.n	1b5e0 <updateSensorState+0xc4>
			AUTO_ON_LED_OFF;
   1b5c0:	2101      	movs	r1, #1
   1b5c2:	2028      	movs	r0, #40	; 0x28
   1b5c4:	4b0f      	ldr	r3, [pc, #60]	; (1b604 <updateSensorState+0xe8>)
   1b5c6:	4798      	blx	r3
}
   1b5c8:	e00a      	b.n	1b5e0 <updateSensorState+0xc4>
		THREEPHASE_OK_LED_OFF;
   1b5ca:	2101      	movs	r1, #1
   1b5cc:	2027      	movs	r0, #39	; 0x27
   1b5ce:	4b0d      	ldr	r3, [pc, #52]	; (1b604 <updateSensorState+0xe8>)
   1b5d0:	4798      	blx	r3
		AUTO_ON_LED_OFF;
   1b5d2:	2101      	movs	r1, #1
   1b5d4:	2028      	movs	r0, #40	; 0x28
   1b5d6:	4b0b      	ldr	r3, [pc, #44]	; (1b604 <updateSensorState+0xe8>)
   1b5d8:	4798      	blx	r3
		startTimerOn=false;
   1b5da:	4b0b      	ldr	r3, [pc, #44]	; (1b608 <updateSensorState+0xec>)
   1b5dc:	2200      	movs	r2, #0
   1b5de:	701a      	strb	r2, [r3, #0]
}
   1b5e0:	46c0      	nop			; (mov r8, r8)
   1b5e2:	46bd      	mov	sp, r7
   1b5e4:	b004      	add	sp, #16
   1b5e6:	bdb0      	pop	{r4, r5, r7, pc}
   1b5e8:	0001b2bd 	.word	0x0001b2bd
   1b5ec:	0001b2f1 	.word	0x0001b2f1
   1b5f0:	0001b325 	.word	0x0001b325
   1b5f4:	0001b289 	.word	0x0001b289
   1b5f8:	0001b2a9 	.word	0x0001b2a9
   1b5fc:	20000654 	.word	0x20000654
   1b600:	0001b2dd 	.word	0x0001b2dd
   1b604:	00019591 	.word	0x00019591
   1b608:	2000079a 	.word	0x2000079a

0001b60c <resetAutoStart>:

void resetAutoStart(bool setChange)
{
   1b60c:	b580      	push	{r7, lr}
   1b60e:	b082      	sub	sp, #8
   1b610:	af00      	add	r7, sp, #0
   1b612:	0002      	movs	r2, r0
   1b614:	1dfb      	adds	r3, r7, #7
   1b616:	701a      	strb	r2, [r3, #0]
	if (!(bool)user_settings_parameter_struct.autoStartAddress)
   1b618:	4b0e      	ldr	r3, [pc, #56]	; (1b654 <resetAutoStart+0x48>)
   1b61a:	785b      	ldrb	r3, [r3, #1]
   1b61c:	2b00      	cmp	r3, #0
   1b61e:	d107      	bne.n	1b630 <resetAutoStart+0x24>
	{
		startTimerOn=false;
   1b620:	4b0d      	ldr	r3, [pc, #52]	; (1b658 <resetAutoStart+0x4c>)
   1b622:	2200      	movs	r2, #0
   1b624:	701a      	strb	r2, [r3, #0]
		AUTO_ON_LED_OFF;
   1b626:	2101      	movs	r1, #1
   1b628:	2028      	movs	r0, #40	; 0x28
   1b62a:	4b0c      	ldr	r3, [pc, #48]	; (1b65c <resetAutoStart+0x50>)
   1b62c:	4798      	blx	r3
		if (setChange)
		{
			triggerAutoStart();
		}
	}
}
   1b62e:	e00d      	b.n	1b64c <resetAutoStart+0x40>
	else if ((bool)user_settings_parameter_struct.autoStartAddress)
   1b630:	4b08      	ldr	r3, [pc, #32]	; (1b654 <resetAutoStart+0x48>)
   1b632:	785b      	ldrb	r3, [r3, #1]
   1b634:	2b00      	cmp	r3, #0
   1b636:	d009      	beq.n	1b64c <resetAutoStart+0x40>
		AUTO_ON_LED_ON;
   1b638:	2100      	movs	r1, #0
   1b63a:	2028      	movs	r0, #40	; 0x28
   1b63c:	4b07      	ldr	r3, [pc, #28]	; (1b65c <resetAutoStart+0x50>)
   1b63e:	4798      	blx	r3
		if (setChange)
   1b640:	1dfb      	adds	r3, r7, #7
   1b642:	781b      	ldrb	r3, [r3, #0]
   1b644:	2b00      	cmp	r3, #0
   1b646:	d001      	beq.n	1b64c <resetAutoStart+0x40>
			triggerAutoStart();
   1b648:	4b05      	ldr	r3, [pc, #20]	; (1b660 <resetAutoStart+0x54>)
   1b64a:	4798      	blx	r3
}
   1b64c:	46c0      	nop			; (mov r8, r8)
   1b64e:	46bd      	mov	sp, r7
   1b650:	b002      	add	sp, #8
   1b652:	bd80      	pop	{r7, pc}
   1b654:	20000654 	.word	0x20000654
   1b658:	2000079a 	.word	0x2000079a
   1b65c:	00019591 	.word	0x00019591
   1b660:	0001b665 	.word	0x0001b665

0001b664 <triggerAutoStart>:

void triggerAutoStart(void)
{
   1b664:	b580      	push	{r7, lr}
   1b666:	af00      	add	r7, sp, #0
	if (!getMotorState())
   1b668:	4b0b      	ldr	r3, [pc, #44]	; (1b698 <triggerAutoStart+0x34>)
   1b66a:	4798      	blx	r3
   1b66c:	0003      	movs	r3, r0
   1b66e:	001a      	movs	r2, r3
   1b670:	2301      	movs	r3, #1
   1b672:	4053      	eors	r3, r2
   1b674:	b2db      	uxtb	r3, r3
   1b676:	2b00      	cmp	r3, #0
   1b678:	d00b      	beq.n	1b692 <triggerAutoStart+0x2e>
	{
		//if (getAllPhaseState() && getACPowerState())
		if (getAllPhaseState())
   1b67a:	4b08      	ldr	r3, [pc, #32]	; (1b69c <triggerAutoStart+0x38>)
   1b67c:	4798      	blx	r3
   1b67e:	1e03      	subs	r3, r0, #0
   1b680:	d007      	beq.n	1b692 <triggerAutoStart+0x2e>
		{
			startTimerOn = true;
   1b682:	4b07      	ldr	r3, [pc, #28]	; (1b6a0 <triggerAutoStart+0x3c>)
   1b684:	2201      	movs	r2, #1
   1b686:	701a      	strb	r2, [r3, #0]
			tempStartTimer = xTaskGetTickCount();
   1b688:	4b06      	ldr	r3, [pc, #24]	; (1b6a4 <triggerAutoStart+0x40>)
   1b68a:	4798      	blx	r3
   1b68c:	0002      	movs	r2, r0
   1b68e:	4b06      	ldr	r3, [pc, #24]	; (1b6a8 <triggerAutoStart+0x44>)
   1b690:	601a      	str	r2, [r3, #0]
		}
	}
}
   1b692:	46c0      	nop			; (mov r8, r8)
   1b694:	46bd      	mov	sp, r7
   1b696:	bd80      	pop	{r7, pc}
   1b698:	0001b311 	.word	0x0001b311
   1b69c:	0001b2a9 	.word	0x0001b2a9
   1b6a0:	2000079a 	.word	0x2000079a
   1b6a4:	000209cd 	.word	0x000209cd
   1b6a8:	200007a0 	.word	0x200007a0

0001b6ac <operateOnEvent>:

void operateOnEvent(void)
{
   1b6ac:	b590      	push	{r4, r7, lr}
   1b6ae:	b083      	sub	sp, #12
   1b6b0:	af00      	add	r7, sp, #0
	uint8_t t3Phase;
	//bool t3Phase, tMotor, tacPhase;
	bool tPhaseSeq, tMotor, tacPhase;
	readSensorState(&t3Phase, &tPhaseSeq, &tMotor, &tacPhase);
   1b6b2:	1d3b      	adds	r3, r7, #4
   1b6b4:	1d7a      	adds	r2, r7, #5
   1b6b6:	1db9      	adds	r1, r7, #6
   1b6b8:	1df8      	adds	r0, r7, #7
   1b6ba:	4c5c      	ldr	r4, [pc, #368]	; (1b82c <operateOnEvent+0x180>)
   1b6bc:	47a0      	blx	r4
	eventOccured = false;
   1b6be:	4b5c      	ldr	r3, [pc, #368]	; (1b830 <operateOnEvent+0x184>)
   1b6c0:	2200      	movs	r2, #0
   1b6c2:	701a      	strb	r2, [r3, #0]
	
	//todo: add current phase Sequence and previous phase sequence is equals check here
	//if ((t3Phase == getAllPhaseState()) && (tMotor == getMotorState()) && (tacPhase == getACPowerState()))
	if ((t3Phase == getAllPhaseState()) && (tMotor == getMotorState()))
   1b6c4:	4b5b      	ldr	r3, [pc, #364]	; (1b834 <operateOnEvent+0x188>)
   1b6c6:	4798      	blx	r3
   1b6c8:	0003      	movs	r3, r0
   1b6ca:	001a      	movs	r2, r3
   1b6cc:	1dfb      	adds	r3, r7, #7
   1b6ce:	781b      	ldrb	r3, [r3, #0]
   1b6d0:	429a      	cmp	r2, r3
   1b6d2:	d108      	bne.n	1b6e6 <operateOnEvent+0x3a>
   1b6d4:	4b58      	ldr	r3, [pc, #352]	; (1b838 <operateOnEvent+0x18c>)
   1b6d6:	4798      	blx	r3
   1b6d8:	0003      	movs	r3, r0
   1b6da:	001a      	movs	r2, r3
   1b6dc:	1d7b      	adds	r3, r7, #5
   1b6de:	781b      	ldrb	r3, [r3, #0]
   1b6e0:	429a      	cmp	r2, r3
   1b6e2:	d100      	bne.n	1b6e6 <operateOnEvent+0x3a>
   1b6e4:	e09e      	b.n	1b824 <operateOnEvent+0x178>
	{
		return;
	}
	if (getMotorState())	//motorOn
   1b6e6:	4b54      	ldr	r3, [pc, #336]	; (1b838 <operateOnEvent+0x18c>)
   1b6e8:	4798      	blx	r3
   1b6ea:	1e03      	subs	r3, r0, #0
   1b6ec:	d05a      	beq.n	1b7a4 <operateOnEvent+0xf8>
	{
		if (t3Phase==AC_OFF && !tMotor && !tacPhase)	//acPower Cut Off
   1b6ee:	1dfb      	adds	r3, r7, #7
   1b6f0:	781b      	ldrb	r3, [r3, #0]
   1b6f2:	2b00      	cmp	r3, #0
   1b6f4:	d11e      	bne.n	1b734 <operateOnEvent+0x88>
   1b6f6:	1d7b      	adds	r3, r7, #5
   1b6f8:	781b      	ldrb	r3, [r3, #0]
   1b6fa:	2201      	movs	r2, #1
   1b6fc:	4053      	eors	r3, r2
   1b6fe:	b2db      	uxtb	r3, r3
   1b700:	2b00      	cmp	r3, #0
   1b702:	d017      	beq.n	1b734 <operateOnEvent+0x88>
   1b704:	1d3b      	adds	r3, r7, #4
   1b706:	781b      	ldrb	r3, [r3, #0]
   1b708:	2201      	movs	r2, #1
   1b70a:	4053      	eors	r3, r2
   1b70c:	b2db      	uxtb	r3, r3
   1b70e:	2b00      	cmp	r3, #0
   1b710:	d010      	beq.n	1b734 <operateOnEvent+0x88>
		{
			stopMotor(false,true,false);
   1b712:	2200      	movs	r2, #0
   1b714:	2101      	movs	r1, #1
   1b716:	2000      	movs	r0, #0
   1b718:	4b48      	ldr	r3, [pc, #288]	; (1b83c <operateOnEvent+0x190>)
   1b71a:	4798      	blx	r3
			THREEPHASE_OK_LED_OFF;
   1b71c:	2101      	movs	r1, #1
   1b71e:	2027      	movs	r0, #39	; 0x27
   1b720:	4b47      	ldr	r3, [pc, #284]	; (1b840 <operateOnEvent+0x194>)
   1b722:	4798      	blx	r3
			simEventTemp[6] = registerEvent('C'); //report To SIM Motor Off due to POWER CUT OFF
   1b724:	2043      	movs	r0, #67	; 0x43
   1b726:	4b47      	ldr	r3, [pc, #284]	; (1b844 <operateOnEvent+0x198>)
   1b728:	4798      	blx	r3
   1b72a:	0003      	movs	r3, r0
   1b72c:	001a      	movs	r2, r3
   1b72e:	4b46      	ldr	r3, [pc, #280]	; (1b848 <operateOnEvent+0x19c>)
   1b730:	719a      	strb	r2, [r3, #6]
   1b732:	e06c      	b.n	1b80e <operateOnEvent+0x162>
		}
		////////////////////////////////////////Unknown Motor Off Check ////////////////////////////////////////
		
		//else if ((tacPhase && getACPowerState()) &&																										//AC PHASE PRESENT
		else if (((user_settings_parameter_struct.detectSinglePhasing && t3Phase==AC_3PH && getAllPhaseState()==AC_3PH) ||								//IF SPP ON, 3 phase old and current is present
   1b734:	4b45      	ldr	r3, [pc, #276]	; (1b84c <operateOnEvent+0x1a0>)
   1b736:	2220      	movs	r2, #32
   1b738:	5c9b      	ldrb	r3, [r3, r2]
   1b73a:	2b00      	cmp	r3, #0
   1b73c:	d008      	beq.n	1b750 <operateOnEvent+0xa4>
   1b73e:	1dfb      	adds	r3, r7, #7
   1b740:	781b      	ldrb	r3, [r3, #0]
   1b742:	2b03      	cmp	r3, #3
   1b744:	d104      	bne.n	1b750 <operateOnEvent+0xa4>
   1b746:	4b3b      	ldr	r3, [pc, #236]	; (1b834 <operateOnEvent+0x188>)
   1b748:	4798      	blx	r3
   1b74a:	0003      	movs	r3, r0
   1b74c:	2b03      	cmp	r3, #3
   1b74e:	d00d      	beq.n	1b76c <operateOnEvent+0xc0>
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
   1b750:	4b3e      	ldr	r3, [pc, #248]	; (1b84c <operateOnEvent+0x1a0>)
   1b752:	2220      	movs	r2, #32
   1b754:	5c9b      	ldrb	r3, [r3, r2]
		else if (((user_settings_parameter_struct.detectSinglePhasing && t3Phase==AC_3PH && getAllPhaseState()==AC_3PH) ||								//IF SPP ON, 3 phase old and current is present
   1b756:	2b00      	cmp	r3, #0
   1b758:	d112      	bne.n	1b780 <operateOnEvent+0xd4>
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
   1b75a:	1dfb      	adds	r3, r7, #7
   1b75c:	781b      	ldrb	r3, [r3, #0]
   1b75e:	2b01      	cmp	r3, #1
   1b760:	d90e      	bls.n	1b780 <operateOnEvent+0xd4>
   1b762:	4b34      	ldr	r3, [pc, #208]	; (1b834 <operateOnEvent+0x188>)
   1b764:	4798      	blx	r3
   1b766:	0003      	movs	r3, r0
   1b768:	2b01      	cmp	r3, #1
   1b76a:	d909      	bls.n	1b780 <operateOnEvent+0xd4>
		(!tMotor))																																// AND MOTOR HAS TURNED OFF
   1b76c:	1d7b      	adds	r3, r7, #5
   1b76e:	781b      	ldrb	r3, [r3, #0]
   1b770:	2201      	movs	r2, #1
   1b772:	4053      	eors	r3, r2
   1b774:	b2db      	uxtb	r3, r3
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
   1b776:	2b00      	cmp	r3, #0
   1b778:	d002      	beq.n	1b780 <operateOnEvent+0xd4>
		{
			unknownMotorOff();
   1b77a:	4b35      	ldr	r3, [pc, #212]	; (1b850 <operateOnEvent+0x1a4>)
   1b77c:	4798      	blx	r3
   1b77e:	e046      	b.n	1b80e <operateOnEvent+0x162>
		}
		///////////////////////// SINGLE PHASING CHECK /////////////////////////
		else if (user_settings_parameter_struct.detectSinglePhasing &&																						//SPP IS ON
   1b780:	4b32      	ldr	r3, [pc, #200]	; (1b84c <operateOnEvent+0x1a0>)
   1b782:	2220      	movs	r2, #32
   1b784:	5c9b      	ldrb	r3, [r3, r2]
   1b786:	2b00      	cmp	r3, #0
   1b788:	d041      	beq.n	1b80e <operateOnEvent+0x162>
		t3Phase==AC_2PH) /*&&																														// Only 2 Phase Present
   1b78a:	1dfb      	adds	r3, r7, #7
   1b78c:	781b      	ldrb	r3, [r3, #0]
		else if (user_settings_parameter_struct.detectSinglePhasing &&																						//SPP IS ON
   1b78e:	2b02      	cmp	r3, #2
   1b790:	d13d      	bne.n	1b80e <operateOnEvent+0x162>
		tacPhase)*/ ////single phasing occured																									// AC Phase is Present
		{
			tempSinglePhasingTimer = xTaskGetTickCount();
   1b792:	4b30      	ldr	r3, [pc, #192]	; (1b854 <operateOnEvent+0x1a8>)
   1b794:	4798      	blx	r3
   1b796:	0002      	movs	r2, r0
   1b798:	4b2f      	ldr	r3, [pc, #188]	; (1b858 <operateOnEvent+0x1ac>)
   1b79a:	601a      	str	r2, [r3, #0]
			singlePhasingTimerOn = true;
   1b79c:	4b2f      	ldr	r3, [pc, #188]	; (1b85c <operateOnEvent+0x1b0>)
   1b79e:	2201      	movs	r2, #1
   1b7a0:	701a      	strb	r2, [r3, #0]
   1b7a2:	e034      	b.n	1b80e <operateOnEvent+0x162>
		}
	}
	else
	{
		if (tMotor)		// motor turn on manually
   1b7a4:	1d7b      	adds	r3, r7, #5
   1b7a6:	781b      	ldrb	r3, [r3, #0]
   1b7a8:	2b00      	cmp	r3, #0
   1b7aa:	d028      	beq.n	1b7fe <operateOnEvent+0x152>
		{
			if (t3Phase==AC_3PH && tPhaseSeq && tacPhase)
   1b7ac:	1dfb      	adds	r3, r7, #7
   1b7ae:	781b      	ldrb	r3, [r3, #0]
   1b7b0:	2b03      	cmp	r3, #3
   1b7b2:	d11e      	bne.n	1b7f2 <operateOnEvent+0x146>
   1b7b4:	1dbb      	adds	r3, r7, #6
   1b7b6:	781b      	ldrb	r3, [r3, #0]
   1b7b8:	2b00      	cmp	r3, #0
   1b7ba:	d01a      	beq.n	1b7f2 <operateOnEvent+0x146>
   1b7bc:	1d3b      	adds	r3, r7, #4
   1b7be:	781b      	ldrb	r3, [r3, #0]
   1b7c0:	2b00      	cmp	r3, #0
   1b7c2:	d016      	beq.n	1b7f2 <operateOnEvent+0x146>
			{
				if (startTimerOn)
   1b7c4:	4b26      	ldr	r3, [pc, #152]	; (1b860 <operateOnEvent+0x1b4>)
   1b7c6:	781b      	ldrb	r3, [r3, #0]
   1b7c8:	2b00      	cmp	r3, #0
   1b7ca:	d002      	beq.n	1b7d2 <operateOnEvent+0x126>
				{
					startTimerOn = false;
   1b7cc:	4b24      	ldr	r3, [pc, #144]	; (1b860 <operateOnEvent+0x1b4>)
   1b7ce:	2200      	movs	r2, #0
   1b7d0:	701a      	strb	r2, [r3, #0]
				}
				THREEPHASE_OK_LED_ON;
   1b7d2:	2100      	movs	r1, #0
   1b7d4:	2027      	movs	r0, #39	; 0x27
   1b7d6:	4b1a      	ldr	r3, [pc, #104]	; (1b840 <operateOnEvent+0x194>)
   1b7d8:	4798      	blx	r3
				simEventTemp[7] = registerEvent('S');	//register To SIM Motor has started
   1b7da:	2053      	movs	r0, #83	; 0x53
   1b7dc:	4b19      	ldr	r3, [pc, #100]	; (1b844 <operateOnEvent+0x198>)
   1b7de:	4798      	blx	r3
   1b7e0:	0003      	movs	r3, r0
   1b7e2:	001a      	movs	r2, r3
   1b7e4:	4b18      	ldr	r3, [pc, #96]	; (1b848 <operateOnEvent+0x19c>)
   1b7e6:	71da      	strb	r2, [r3, #7]
				startMotor(true,true);
   1b7e8:	2101      	movs	r1, #1
   1b7ea:	2001      	movs	r0, #1
   1b7ec:	4b1d      	ldr	r3, [pc, #116]	; (1b864 <operateOnEvent+0x1b8>)
   1b7ee:	4798      	blx	r3
   1b7f0:	e00d      	b.n	1b80e <operateOnEvent+0x162>
			}
			else
			{
				stopMotor(false,true,false);
   1b7f2:	2200      	movs	r2, #0
   1b7f4:	2101      	movs	r1, #1
   1b7f6:	2000      	movs	r0, #0
   1b7f8:	4b10      	ldr	r3, [pc, #64]	; (1b83c <operateOnEvent+0x190>)
   1b7fa:	4798      	blx	r3
   1b7fc:	e007      	b.n	1b80e <operateOnEvent+0x162>
			}
		}
		else
		{
			waitStableLineOn = true;
   1b7fe:	4b1a      	ldr	r3, [pc, #104]	; (1b868 <operateOnEvent+0x1bc>)
   1b800:	2201      	movs	r2, #1
   1b802:	701a      	strb	r2, [r3, #0]
			waitStableLineTimer = xTaskGetTickCount();
   1b804:	4b13      	ldr	r3, [pc, #76]	; (1b854 <operateOnEvent+0x1a8>)
   1b806:	4798      	blx	r3
   1b808:	0002      	movs	r2, r0
   1b80a:	4b18      	ldr	r3, [pc, #96]	; (1b86c <operateOnEvent+0x1c0>)
   1b80c:	601a      	str	r2, [r3, #0]
		}
	}
	updateSensorState(t3Phase,tPhaseSeq, tMotor,tacPhase);
   1b80e:	1dfb      	adds	r3, r7, #7
   1b810:	7818      	ldrb	r0, [r3, #0]
   1b812:	1dbb      	adds	r3, r7, #6
   1b814:	7819      	ldrb	r1, [r3, #0]
   1b816:	1d7b      	adds	r3, r7, #5
   1b818:	781a      	ldrb	r2, [r3, #0]
   1b81a:	1d3b      	adds	r3, r7, #4
   1b81c:	781b      	ldrb	r3, [r3, #0]
   1b81e:	4c14      	ldr	r4, [pc, #80]	; (1b870 <operateOnEvent+0x1c4>)
   1b820:	47a0      	blx	r4
   1b822:	e000      	b.n	1b826 <operateOnEvent+0x17a>
		return;
   1b824:	46c0      	nop			; (mov r8, r8)
}
   1b826:	46bd      	mov	sp, r7
   1b828:	b003      	add	sp, #12
   1b82a:	bd90      	pop	{r4, r7, pc}
   1b82c:	0001b395 	.word	0x0001b395
   1b830:	2000072e 	.word	0x2000072e
   1b834:	0001b2a9 	.word	0x0001b2a9
   1b838:	0001b311 	.word	0x0001b311
   1b83c:	0001bbe1 	.word	0x0001bbe1
   1b840:	00019591 	.word	0x00019591
   1b844:	00014b59 	.word	0x00014b59
   1b848:	20000718 	.word	0x20000718
   1b84c:	20000654 	.word	0x20000654
   1b850:	0001bd09 	.word	0x0001bd09
   1b854:	000209cd 	.word	0x000209cd
   1b858:	20000778 	.word	0x20000778
   1b85c:	20000791 	.word	0x20000791
   1b860:	2000079a 	.word	0x2000079a
   1b864:	0001ba05 	.word	0x0001ba05
   1b868:	2000080d 	.word	0x2000080d
   1b86c:	200007cc 	.word	0x200007cc
   1b870:	0001b51d 	.word	0x0001b51d

0001b874 <checkLineSensors>:

uint8_t checkLineSensors(void)
{
   1b874:	b580      	push	{r7, lr}
   1b876:	af00      	add	r7, sp, #0
	return structThreePhase_state.u8t_phase_ac_state;
   1b878:	4b02      	ldr	r3, [pc, #8]	; (1b884 <checkLineSensors+0x10>)
   1b87a:	785b      	ldrb	r3, [r3, #1]
   1b87c:	b2db      	uxtb	r3, r3
}
   1b87e:	0018      	movs	r0, r3
   1b880:	46bd      	mov	sp, r7
   1b882:	bd80      	pop	{r7, pc}
   1b884:	20000748 	.word	0x20000748

0001b888 <operateOnStableLine>:

void operateOnStableLine(void)
{
   1b888:	b590      	push	{r4, r7, lr}
   1b88a:	b083      	sub	sp, #12
   1b88c:	af00      	add	r7, sp, #0
	waitStableLineOn = false;
   1b88e:	4b41      	ldr	r3, [pc, #260]	; (1b994 <operateOnStableLine+0x10c>)
   1b890:	2200      	movs	r2, #0
   1b892:	701a      	strb	r2, [r3, #0]
	uint8_t temp = checkLineSensors();
   1b894:	1dbc      	adds	r4, r7, #6
   1b896:	4b40      	ldr	r3, [pc, #256]	; (1b998 <operateOnStableLine+0x110>)
   1b898:	4798      	blx	r3
   1b89a:	0003      	movs	r3, r0
   1b89c:	7023      	strb	r3, [r4, #0]
	if (temp == AC_3PH)
   1b89e:	1dbb      	adds	r3, r7, #6
   1b8a0:	781b      	ldrb	r3, [r3, #0]
   1b8a2:	2b03      	cmp	r3, #3
   1b8a4:	d133      	bne.n	1b90e <operateOnStableLine+0x86>
	{
		bool tempPhaseSeq = true;													//Set Temp Phase Seq to True
   1b8a6:	1dfb      	adds	r3, r7, #7
   1b8a8:	2201      	movs	r2, #1
   1b8aa:	701a      	strb	r2, [r3, #0]
		if(user_settings_parameter_struct.detectPhaseSequence)						// if Sequence Detection is needed
   1b8ac:	4b3b      	ldr	r3, [pc, #236]	; (1b99c <operateOnStableLine+0x114>)
   1b8ae:	2224      	movs	r2, #36	; 0x24
   1b8b0:	5c9b      	ldrb	r3, [r3, r2]
   1b8b2:	2b00      	cmp	r3, #0
   1b8b4:	d004      	beq.n	1b8c0 <operateOnStableLine+0x38>
		{
			tempPhaseSeq = getPhaseSequence();										// set current phase seq to the temp variable
   1b8b6:	1dfc      	adds	r4, r7, #7
   1b8b8:	4b39      	ldr	r3, [pc, #228]	; (1b9a0 <operateOnStableLine+0x118>)
   1b8ba:	4798      	blx	r3
   1b8bc:	0003      	movs	r3, r0
   1b8be:	7023      	strb	r3, [r4, #0]
		}
		
		if(tempPhaseSeq)															// if correct phase seq than
   1b8c0:	1dfb      	adds	r3, r7, #7
   1b8c2:	781b      	ldrb	r3, [r3, #0]
   1b8c4:	2b00      	cmp	r3, #0
   1b8c6:	d016      	beq.n	1b8f6 <operateOnStableLine+0x6e>
		{
			THREEPHASE_OK_LED_ON;
   1b8c8:	2100      	movs	r1, #0
   1b8ca:	2027      	movs	r0, #39	; 0x27
   1b8cc:	4b35      	ldr	r3, [pc, #212]	; (1b9a4 <operateOnStableLine+0x11c>)
   1b8ce:	4798      	blx	r3
			if (user_settings_parameter_struct.autoStartAddress)
   1b8d0:	4b32      	ldr	r3, [pc, #200]	; (1b99c <operateOnStableLine+0x114>)
   1b8d2:	785b      	ldrb	r3, [r3, #1]
   1b8d4:	2b00      	cmp	r3, #0
   1b8d6:	d002      	beq.n	1b8de <operateOnStableLine+0x56>
			{
				triggerAutoStart();
   1b8d8:	4b33      	ldr	r3, [pc, #204]	; (1b9a8 <operateOnStableLine+0x120>)
   1b8da:	4798      	blx	r3
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
		{
			simEventTemp[5] = registerEvent('L'); //register To SIM AC Power OFF
		}
	}
}
   1b8dc:	e055      	b.n	1b98a <operateOnStableLine+0x102>
				if (user_settings_parameter_struct.dndAddress!=DND_LIGHT)			//DND IS OFF FOR ALL 3 PHASE LIGHT EVENTS, DND IS ON FOR SINGLE PHASING EVENTS
   1b8de:	4b2f      	ldr	r3, [pc, #188]	; (1b99c <operateOnStableLine+0x114>)
   1b8e0:	791b      	ldrb	r3, [r3, #4]
   1b8e2:	2b4c      	cmp	r3, #76	; 0x4c
   1b8e4:	d051      	beq.n	1b98a <operateOnStableLine+0x102>
					simEventTemp[4] = registerEvent('G');							//register TO SIM AC power ON
   1b8e6:	2047      	movs	r0, #71	; 0x47
   1b8e8:	4b30      	ldr	r3, [pc, #192]	; (1b9ac <operateOnStableLine+0x124>)
   1b8ea:	4798      	blx	r3
   1b8ec:	0003      	movs	r3, r0
   1b8ee:	001a      	movs	r2, r3
   1b8f0:	4b2f      	ldr	r3, [pc, #188]	; (1b9b0 <operateOnStableLine+0x128>)
   1b8f2:	711a      	strb	r2, [r3, #4]
}
   1b8f4:	e049      	b.n	1b98a <operateOnStableLine+0x102>
			THREEPHASE_OK_LED_OFF;
   1b8f6:	2101      	movs	r1, #1
   1b8f8:	2027      	movs	r0, #39	; 0x27
   1b8fa:	4b2a      	ldr	r3, [pc, #168]	; (1b9a4 <operateOnStableLine+0x11c>)
   1b8fc:	4798      	blx	r3
			simEventTemp[9] = registerEvent('A');								//incorrect sequence
   1b8fe:	2041      	movs	r0, #65	; 0x41
   1b900:	4b2a      	ldr	r3, [pc, #168]	; (1b9ac <operateOnStableLine+0x124>)
   1b902:	4798      	blx	r3
   1b904:	0003      	movs	r3, r0
   1b906:	001a      	movs	r2, r3
   1b908:	4b29      	ldr	r3, [pc, #164]	; (1b9b0 <operateOnStableLine+0x128>)
   1b90a:	725a      	strb	r2, [r3, #9]
}
   1b90c:	e03d      	b.n	1b98a <operateOnStableLine+0x102>
	else if (temp == AC_2PH) //Got Power in 2 phase
   1b90e:	1dbb      	adds	r3, r7, #6
   1b910:	781b      	ldrb	r3, [r3, #0]
   1b912:	2b02      	cmp	r3, #2
   1b914:	d114      	bne.n	1b940 <operateOnStableLine+0xb8>
		THREEPHASE_OK_LED_OFF;
   1b916:	2101      	movs	r1, #1
   1b918:	2027      	movs	r0, #39	; 0x27
   1b91a:	4b22      	ldr	r3, [pc, #136]	; (1b9a4 <operateOnStableLine+0x11c>)
   1b91c:	4798      	blx	r3
		if (user_settings_parameter_struct.dndAddress == DND_OFF &&					//DND IS OFF FOR ALL KIND OF EVENTS
   1b91e:	4b1f      	ldr	r3, [pc, #124]	; (1b99c <operateOnStableLine+0x114>)
   1b920:	791b      	ldrb	r3, [r3, #4]
   1b922:	2b4f      	cmp	r3, #79	; 0x4f
   1b924:	d131      	bne.n	1b98a <operateOnStableLine+0x102>
		user_settings_parameter_struct.detectSinglePhasing)					//SINGLE PHASING PROTECTION IS ON
   1b926:	4b1d      	ldr	r3, [pc, #116]	; (1b99c <operateOnStableLine+0x114>)
   1b928:	2220      	movs	r2, #32
   1b92a:	5c9b      	ldrb	r3, [r3, r2]
		if (user_settings_parameter_struct.dndAddress == DND_OFF &&					//DND IS OFF FOR ALL KIND OF EVENTS
   1b92c:	2b00      	cmp	r3, #0
   1b92e:	d02c      	beq.n	1b98a <operateOnStableLine+0x102>
			simEventTemp[9] = registerEvent('A'); //register TO SIM 2 phase power ON
   1b930:	2041      	movs	r0, #65	; 0x41
   1b932:	4b1e      	ldr	r3, [pc, #120]	; (1b9ac <operateOnStableLine+0x124>)
   1b934:	4798      	blx	r3
   1b936:	0003      	movs	r3, r0
   1b938:	001a      	movs	r2, r3
   1b93a:	4b1d      	ldr	r3, [pc, #116]	; (1b9b0 <operateOnStableLine+0x128>)
   1b93c:	725a      	strb	r2, [r3, #9]
}
   1b93e:	e024      	b.n	1b98a <operateOnStableLine+0x102>
	else if (temp == AC_OFF)	//Lost Power in All Phase
   1b940:	1dbb      	adds	r3, r7, #6
   1b942:	781b      	ldrb	r3, [r3, #0]
   1b944:	2b00      	cmp	r3, #0
   1b946:	d120      	bne.n	1b98a <operateOnStableLine+0x102>
		THREEPHASE_OK_LED_OFF;
   1b948:	2101      	movs	r1, #1
   1b94a:	2027      	movs	r0, #39	; 0x27
   1b94c:	4b15      	ldr	r3, [pc, #84]	; (1b9a4 <operateOnStableLine+0x11c>)
   1b94e:	4798      	blx	r3
		if ((user_settings_parameter_struct.dndAddress == DND_OFF) ||												//DND IS OFF FOR ALL EVENTS
   1b950:	4b12      	ldr	r3, [pc, #72]	; (1b99c <operateOnStableLine+0x114>)
   1b952:	791b      	ldrb	r3, [r3, #4]
   1b954:	2b4f      	cmp	r3, #79	; 0x4f
   1b956:	d011      	beq.n	1b97c <operateOnStableLine+0xf4>
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
   1b958:	4b16      	ldr	r3, [pc, #88]	; (1b9b4 <operateOnStableLine+0x12c>)
   1b95a:	781b      	ldrb	r3, [r3, #0]
   1b95c:	b2db      	uxtb	r3, r3
		if ((user_settings_parameter_struct.dndAddress == DND_OFF) ||												//DND IS OFF FOR ALL EVENTS
   1b95e:	2b02      	cmp	r3, #2
   1b960:	d103      	bne.n	1b96a <operateOnStableLine+0xe2>
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
   1b962:	4b0e      	ldr	r3, [pc, #56]	; (1b99c <operateOnStableLine+0x114>)
   1b964:	791b      	ldrb	r3, [r3, #4]
   1b966:	2b4f      	cmp	r3, #79	; 0x4f
   1b968:	d008      	beq.n	1b97c <operateOnStableLine+0xf4>
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
   1b96a:	4b12      	ldr	r3, [pc, #72]	; (1b9b4 <operateOnStableLine+0x12c>)
   1b96c:	781b      	ldrb	r3, [r3, #0]
   1b96e:	b2db      	uxtb	r3, r3
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
   1b970:	2b03      	cmp	r3, #3
   1b972:	d10a      	bne.n	1b98a <operateOnStableLine+0x102>
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
   1b974:	4b09      	ldr	r3, [pc, #36]	; (1b99c <operateOnStableLine+0x114>)
   1b976:	791b      	ldrb	r3, [r3, #4]
   1b978:	2b4c      	cmp	r3, #76	; 0x4c
   1b97a:	d006      	beq.n	1b98a <operateOnStableLine+0x102>
			simEventTemp[5] = registerEvent('L'); //register To SIM AC Power OFF
   1b97c:	204c      	movs	r0, #76	; 0x4c
   1b97e:	4b0b      	ldr	r3, [pc, #44]	; (1b9ac <operateOnStableLine+0x124>)
   1b980:	4798      	blx	r3
   1b982:	0003      	movs	r3, r0
   1b984:	001a      	movs	r2, r3
   1b986:	4b0a      	ldr	r3, [pc, #40]	; (1b9b0 <operateOnStableLine+0x128>)
   1b988:	715a      	strb	r2, [r3, #5]
}
   1b98a:	46c0      	nop			; (mov r8, r8)
   1b98c:	46bd      	mov	sp, r7
   1b98e:	b003      	add	sp, #12
   1b990:	bd90      	pop	{r4, r7, pc}
   1b992:	46c0      	nop			; (mov r8, r8)
   1b994:	2000080d 	.word	0x2000080d
   1b998:	0001b875 	.word	0x0001b875
   1b99c:	20000654 	.word	0x20000654
   1b9a0:	0001b2dd 	.word	0x0001b2dd
   1b9a4:	00019591 	.word	0x00019591
   1b9a8:	0001b665 	.word	0x0001b665
   1b9ac:	00014b59 	.word	0x00014b59
   1b9b0:	20000718 	.word	0x20000718
   1b9b4:	2000072b 	.word	0x2000072b

0001b9b8 <waitStableLineOver>:

bool waitStableLineOver(void)
{
   1b9b8:	b580      	push	{r7, lr}
   1b9ba:	af00      	add	r7, sp, #0
	return (waitStableLineOn && xTaskGetTickCount() - waitStableLineTimer >= (waitStableLineTime * 100));
   1b9bc:	4b0d      	ldr	r3, [pc, #52]	; (1b9f4 <waitStableLineOver+0x3c>)
   1b9be:	781b      	ldrb	r3, [r3, #0]
   1b9c0:	2b00      	cmp	r3, #0
   1b9c2:	d00e      	beq.n	1b9e2 <waitStableLineOver+0x2a>
   1b9c4:	4b0c      	ldr	r3, [pc, #48]	; (1b9f8 <waitStableLineOver+0x40>)
   1b9c6:	4798      	blx	r3
   1b9c8:	0002      	movs	r2, r0
   1b9ca:	4b0c      	ldr	r3, [pc, #48]	; (1b9fc <waitStableLineOver+0x44>)
   1b9cc:	681b      	ldr	r3, [r3, #0]
   1b9ce:	1ad3      	subs	r3, r2, r3
   1b9d0:	4a0b      	ldr	r2, [pc, #44]	; (1ba00 <waitStableLineOver+0x48>)
   1b9d2:	7812      	ldrb	r2, [r2, #0]
   1b9d4:	0011      	movs	r1, r2
   1b9d6:	2264      	movs	r2, #100	; 0x64
   1b9d8:	434a      	muls	r2, r1
   1b9da:	4293      	cmp	r3, r2
   1b9dc:	d301      	bcc.n	1b9e2 <waitStableLineOver+0x2a>
   1b9de:	2301      	movs	r3, #1
   1b9e0:	e000      	b.n	1b9e4 <waitStableLineOver+0x2c>
   1b9e2:	2300      	movs	r3, #0
   1b9e4:	1c1a      	adds	r2, r3, #0
   1b9e6:	2301      	movs	r3, #1
   1b9e8:	4013      	ands	r3, r2
   1b9ea:	b2db      	uxtb	r3, r3
}
   1b9ec:	0018      	movs	r0, r3
   1b9ee:	46bd      	mov	sp, r7
   1b9f0:	bd80      	pop	{r7, pc}
   1b9f2:	46c0      	nop			; (mov r8, r8)
   1b9f4:	2000080d 	.word	0x2000080d
   1b9f8:	000209cd 	.word	0x000209cd
   1b9fc:	200007cc 	.word	0x200007cc
   1ba00:	200007dd 	.word	0x200007dd

0001ba04 <startMotor>:


void startMotor(bool commanded, bool forcedStart)
{
   1ba04:	b580      	push	{r7, lr}
   1ba06:	b082      	sub	sp, #8
   1ba08:	af00      	add	r7, sp, #0
   1ba0a:	0002      	movs	r2, r0
   1ba0c:	1dfb      	adds	r3, r7, #7
   1ba0e:	701a      	strb	r2, [r3, #0]
   1ba10:	1dbb      	adds	r3, r7, #6
   1ba12:	1c0a      	adds	r2, r1, #0
   1ba14:	701a      	strb	r2, [r3, #0]
	startTimerOn = false;
   1ba16:	4b5c      	ldr	r3, [pc, #368]	; (1bb88 <startMotor+0x184>)
   1ba18:	2200      	movs	r2, #0
   1ba1a:	701a      	strb	r2, [r3, #0]

	//if (forcedStart || (getACPowerState() &&																														//AC Phase is Presnet
	//((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
	//((user_settings_parameter_struct.detectPhaseSequence && getPhaseSequence()) || (!user_settings_parameter_struct.detectPhaseSequence))))	//Phase Sequnce Protection is ON and correct phase seq, or Phase Seq Protection is off
	
	if (forcedStart || 																														//AC Phase is Presnet
   1ba1c:	1dbb      	adds	r3, r7, #6
   1ba1e:	781b      	ldrb	r3, [r3, #0]
   1ba20:	2b00      	cmp	r3, #0
   1ba22:	d11f      	bne.n	1ba64 <startMotor+0x60>
	(((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
   1ba24:	4b59      	ldr	r3, [pc, #356]	; (1bb8c <startMotor+0x188>)
   1ba26:	4798      	blx	r3
   1ba28:	0003      	movs	r3, r0
	if (forcedStart || 																														//AC Phase is Presnet
   1ba2a:	2b03      	cmp	r3, #3
   1ba2c:	d00b      	beq.n	1ba46 <startMotor+0x42>
	(((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
   1ba2e:	4b57      	ldr	r3, [pc, #348]	; (1bb8c <startMotor+0x188>)
   1ba30:	4798      	blx	r3
   1ba32:	0003      	movs	r3, r0
   1ba34:	2b02      	cmp	r3, #2
   1ba36:	d000      	beq.n	1ba3a <startMotor+0x36>
   1ba38:	e091      	b.n	1bb5e <startMotor+0x15a>
   1ba3a:	4b55      	ldr	r3, [pc, #340]	; (1bb90 <startMotor+0x18c>)
   1ba3c:	2220      	movs	r2, #32
   1ba3e:	5c9b      	ldrb	r3, [r3, r2]
   1ba40:	2b00      	cmp	r3, #0
   1ba42:	d000      	beq.n	1ba46 <startMotor+0x42>
   1ba44:	e08b      	b.n	1bb5e <startMotor+0x15a>
	((user_settings_parameter_struct.detectPhaseSequence && getPhaseSequence()) || (!user_settings_parameter_struct.detectPhaseSequence))))	//Phase Sequnce Protection is ON and correct phase seq, or Phase Seq Protection is off
   1ba46:	4b52      	ldr	r3, [pc, #328]	; (1bb90 <startMotor+0x18c>)
   1ba48:	2224      	movs	r2, #36	; 0x24
   1ba4a:	5c9b      	ldrb	r3, [r3, r2]
	(((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
   1ba4c:	2b00      	cmp	r3, #0
   1ba4e:	d003      	beq.n	1ba58 <startMotor+0x54>
	((user_settings_parameter_struct.detectPhaseSequence && getPhaseSequence()) || (!user_settings_parameter_struct.detectPhaseSequence))))	//Phase Sequnce Protection is ON and correct phase seq, or Phase Seq Protection is off
   1ba50:	4b50      	ldr	r3, [pc, #320]	; (1bb94 <startMotor+0x190>)
   1ba52:	4798      	blx	r3
   1ba54:	1e03      	subs	r3, r0, #0
   1ba56:	d105      	bne.n	1ba64 <startMotor+0x60>
   1ba58:	4b4d      	ldr	r3, [pc, #308]	; (1bb90 <startMotor+0x18c>)
   1ba5a:	2224      	movs	r2, #36	; 0x24
   1ba5c:	5c9b      	ldrb	r3, [r3, r2]
   1ba5e:	2b00      	cmp	r3, #0
   1ba60:	d000      	beq.n	1ba64 <startMotor+0x60>
   1ba62:	e07c      	b.n	1bb5e <startMotor+0x15a>
	{
		if (!getMotorState())
   1ba64:	4b4c      	ldr	r3, [pc, #304]	; (1bb98 <startMotor+0x194>)
   1ba66:	4798      	blx	r3
   1ba68:	0003      	movs	r3, r0
   1ba6a:	001a      	movs	r2, r3
   1ba6c:	2301      	movs	r3, #1
   1ba6e:	4053      	eors	r3, r2
   1ba70:	b2db      	uxtb	r3, r3
   1ba72:	2b00      	cmp	r3, #0
   1ba74:	d100      	bne.n	1ba78 <startMotor+0x74>
   1ba76:	e06a      	b.n	1bb4e <startMotor+0x14a>
		{
			if (factory_settings_parameter_struct.ENABLE_WATER)
   1ba78:	4b48      	ldr	r3, [pc, #288]	; (1bb9c <startMotor+0x198>)
   1ba7a:	795b      	ldrb	r3, [r3, #5]
   1ba7c:	2b00      	cmp	r3, #0
   1ba7e:	d034      	beq.n	1baea <startMotor+0xe6>
			{
				if(!(user_settings_parameter_struct.waterBypassAddress) && getWaterSensorState()==CRITICALLEVEL)
   1ba80:	4b43      	ldr	r3, [pc, #268]	; (1bb90 <startMotor+0x18c>)
   1ba82:	7fdb      	ldrb	r3, [r3, #31]
   1ba84:	2b00      	cmp	r3, #0
   1ba86:	d113      	bne.n	1bab0 <startMotor+0xac>
   1ba88:	4b45      	ldr	r3, [pc, #276]	; (1bba0 <startMotor+0x19c>)
   1ba8a:	4798      	blx	r3
   1ba8c:	1e03      	subs	r3, r0, #0
   1ba8e:	d10f      	bne.n	1bab0 <startMotor+0xac>
				{
					if (commanded)
   1ba90:	1dfb      	adds	r3, r7, #7
   1ba92:	781b      	ldrb	r3, [r3, #0]
   1ba94:	2b00      	cmp	r3, #0
   1ba96:	d003      	beq.n	1baa0 <startMotor+0x9c>
					{
						setMotorMGRResponse('T');	//cannot start motor due to some problem
   1ba98:	2054      	movs	r0, #84	; 0x54
   1ba9a:	4b42      	ldr	r3, [pc, #264]	; (1bba4 <startMotor+0x1a0>)
   1ba9c:	4798      	blx	r3
					}
					else
					{
						simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
					}
					return;
   1ba9e:	e06f      	b.n	1bb80 <startMotor+0x17c>
						simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
   1baa0:	204e      	movs	r0, #78	; 0x4e
   1baa2:	4b41      	ldr	r3, [pc, #260]	; (1bba8 <startMotor+0x1a4>)
   1baa4:	4798      	blx	r3
   1baa6:	0003      	movs	r3, r0
   1baa8:	001a      	movs	r2, r3
   1baaa:	4b40      	ldr	r3, [pc, #256]	; (1bbac <startMotor+0x1a8>)
   1baac:	701a      	strb	r2, [r3, #0]
					return;
   1baae:	e067      	b.n	1bb80 <startMotor+0x17c>
				}
				
				if (factory_settings_parameter_struct.ENABLE_GP)
   1bab0:	4b3a      	ldr	r3, [pc, #232]	; (1bb9c <startMotor+0x198>)
   1bab2:	791b      	ldrb	r3, [r3, #4]
   1bab4:	2b00      	cmp	r3, #0
   1bab6:	d018      	beq.n	1baea <startMotor+0xe6>
				{
					if(!(user_settings_parameter_struct.waterBypassAddress) && getOverHeadWaterSensorState()==OVERHEADHIGHLEVEL)
   1bab8:	4b35      	ldr	r3, [pc, #212]	; (1bb90 <startMotor+0x18c>)
   1baba:	7fdb      	ldrb	r3, [r3, #31]
   1babc:	2b00      	cmp	r3, #0
   1babe:	d114      	bne.n	1baea <startMotor+0xe6>
   1bac0:	4b3b      	ldr	r3, [pc, #236]	; (1bbb0 <startMotor+0x1ac>)
   1bac2:	4798      	blx	r3
   1bac4:	0003      	movs	r3, r0
   1bac6:	2b02      	cmp	r3, #2
   1bac8:	d10f      	bne.n	1baea <startMotor+0xe6>
					{
						if(commanded)
   1baca:	1dfb      	adds	r3, r7, #7
   1bacc:	781b      	ldrb	r3, [r3, #0]
   1bace:	2b00      	cmp	r3, #0
   1bad0:	d003      	beq.n	1bada <startMotor+0xd6>
						{
							setMotorMGRResponse('V');	//cannot start motor as OverHead Tank Full.
   1bad2:	2056      	movs	r0, #86	; 0x56
   1bad4:	4b33      	ldr	r3, [pc, #204]	; (1bba4 <startMotor+0x1a0>)
   1bad6:	4798      	blx	r3
						}
						else
						{
							simEventTemp[17] = registerEvent('V');//register To SIM motor not started due to ANY REASON
						}
						return;
   1bad8:	e052      	b.n	1bb80 <startMotor+0x17c>
							simEventTemp[17] = registerEvent('V');//register To SIM motor not started due to ANY REASON
   1bada:	2056      	movs	r0, #86	; 0x56
   1badc:	4b32      	ldr	r3, [pc, #200]	; (1bba8 <startMotor+0x1a4>)
   1bade:	4798      	blx	r3
   1bae0:	0003      	movs	r3, r0
   1bae2:	001a      	movs	r2, r3
   1bae4:	4b31      	ldr	r3, [pc, #196]	; (1bbac <startMotor+0x1a8>)
   1bae6:	745a      	strb	r2, [r3, #17]
						return;
   1bae8:	e04a      	b.n	1bb80 <startMotor+0x17c>
					}
				}
			}

			STOP_RELAY_ON;
   1baea:	2101      	movs	r1, #1
   1baec:	202c      	movs	r0, #44	; 0x2c
   1baee:	4b31      	ldr	r3, [pc, #196]	; (1bbb4 <startMotor+0x1b0>)
   1baf0:	4798      	blx	r3
			START_RELAY_ON;
   1baf2:	2101      	movs	r1, #1
   1baf4:	202d      	movs	r0, #45	; 0x2d
   1baf6:	4b2f      	ldr	r3, [pc, #188]	; (1bbb4 <startMotor+0x1b0>)
   1baf8:	4798      	blx	r3
			stopMotorCommandGiven=false;
   1bafa:	4b2f      	ldr	r3, [pc, #188]	; (1bbb8 <startMotor+0x1b4>)
   1bafc:	2200      	movs	r2, #0
   1bafe:	701a      	strb	r2, [r3, #0]
			//MOTOR_ON_LED_ON;
			tempStartSequenceTimer = xTaskGetTickCount();
   1bb00:	4b2e      	ldr	r3, [pc, #184]	; (1bbbc <startMotor+0x1b8>)
   1bb02:	4798      	blx	r3
   1bb04:	0002      	movs	r2, r0
   1bb06:	4b2e      	ldr	r3, [pc, #184]	; (1bbc0 <startMotor+0x1bc>)
   1bb08:	601a      	str	r2, [r3, #0]
			startSequenceOn = true;
   1bb0a:	4b2e      	ldr	r3, [pc, #184]	; (1bbc4 <startMotor+0x1c0>)
   1bb0c:	2201      	movs	r2, #1
   1bb0e:	701a      	strb	r2, [r3, #0]

			if(user_settings_parameter_struct.motorVoltageBypass==MOTOR_VOLTAGE_BYPASS_ON)
   1bb10:	4b1f      	ldr	r3, [pc, #124]	; (1bb90 <startMotor+0x18c>)
   1bb12:	2227      	movs	r2, #39	; 0x27
   1bb14:	5c9b      	ldrb	r3, [r3, r2]
   1bb16:	2b01      	cmp	r3, #1
   1bb18:	d107      	bne.n	1bb2a <startMotor+0x126>
			{
				motorRelatedVoltageBypassOn=true;
   1bb1a:	4b2b      	ldr	r3, [pc, #172]	; (1bbc8 <startMotor+0x1c4>)
   1bb1c:	2201      	movs	r2, #1
   1bb1e:	701a      	strb	r2, [r3, #0]
				motorVoltageBypassTimerTime=xTaskGetTickCount();
   1bb20:	4b26      	ldr	r3, [pc, #152]	; (1bbbc <startMotor+0x1b8>)
   1bb22:	4798      	blx	r3
   1bb24:	0002      	movs	r2, r0
   1bb26:	4b29      	ldr	r3, [pc, #164]	; (1bbcc <startMotor+0x1c8>)
   1bb28:	601a      	str	r2, [r3, #0]
			}

			setMotorState(true);
   1bb2a:	2001      	movs	r0, #1
   1bb2c:	4b28      	ldr	r3, [pc, #160]	; (1bbd0 <startMotor+0x1cc>)
   1bb2e:	4798      	blx	r3

			if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1bb30:	4b1a      	ldr	r3, [pc, #104]	; (1bb9c <startMotor+0x198>)
   1bb32:	785b      	ldrb	r3, [r3, #1]
   1bb34:	2b00      	cmp	r3, #0
   1bb36:	d005      	beq.n	1bb44 <startMotor+0x140>
			{
				enableCurrentBuffer=false;
   1bb38:	4b26      	ldr	r3, [pc, #152]	; (1bbd4 <startMotor+0x1d0>)
   1bb3a:	2200      	movs	r2, #0
   1bb3c:	701a      	strb	r2, [r3, #0]
				lastCurrentReading=CR_NORMAL;
   1bb3e:	4b26      	ldr	r3, [pc, #152]	; (1bbd8 <startMotor+0x1d4>)
   1bb40:	2200      	movs	r2, #0
   1bb42:	701a      	strb	r2, [r3, #0]
			}
			gotOnCommand = commanded;
   1bb44:	4b25      	ldr	r3, [pc, #148]	; (1bbdc <startMotor+0x1d8>)
   1bb46:	1dfa      	adds	r2, r7, #7
   1bb48:	7812      	ldrb	r2, [r2, #0]
   1bb4a:	701a      	strb	r2, [r3, #0]
		if (!getMotorState())
   1bb4c:	e017      	b.n	1bb7e <startMotor+0x17a>
		}
		else
		{
			if (commanded)
   1bb4e:	1dfb      	adds	r3, r7, #7
   1bb50:	781b      	ldrb	r3, [r3, #0]
   1bb52:	2b00      	cmp	r3, #0
   1bb54:	d013      	beq.n	1bb7e <startMotor+0x17a>
			{
				setMotorMGRResponse('+');		//motor is already on
   1bb56:	202b      	movs	r0, #43	; 0x2b
   1bb58:	4b12      	ldr	r3, [pc, #72]	; (1bba4 <startMotor+0x1a0>)
   1bb5a:	4798      	blx	r3
		if (!getMotorState())
   1bb5c:	e00f      	b.n	1bb7e <startMotor+0x17a>
			}
		}
	}
	else
	{
		if (commanded)
   1bb5e:	1dfb      	adds	r3, r7, #7
   1bb60:	781b      	ldrb	r3, [r3, #0]
   1bb62:	2b00      	cmp	r3, #0
   1bb64:	d003      	beq.n	1bb6e <startMotor+0x16a>
		{
			setMotorMGRResponse('N');	//cannot start motor due to some problem
   1bb66:	204e      	movs	r0, #78	; 0x4e
   1bb68:	4b0e      	ldr	r3, [pc, #56]	; (1bba4 <startMotor+0x1a0>)
   1bb6a:	4798      	blx	r3
   1bb6c:	e008      	b.n	1bb80 <startMotor+0x17c>
		}
		else
		{
			simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
   1bb6e:	204e      	movs	r0, #78	; 0x4e
   1bb70:	4b0d      	ldr	r3, [pc, #52]	; (1bba8 <startMotor+0x1a4>)
   1bb72:	4798      	blx	r3
   1bb74:	0003      	movs	r3, r0
   1bb76:	001a      	movs	r2, r3
   1bb78:	4b0c      	ldr	r3, [pc, #48]	; (1bbac <startMotor+0x1a8>)
   1bb7a:	701a      	strb	r2, [r3, #0]
   1bb7c:	e000      	b.n	1bb80 <startMotor+0x17c>
		if (!getMotorState())
   1bb7e:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   1bb80:	46bd      	mov	sp, r7
   1bb82:	b002      	add	sp, #8
   1bb84:	bd80      	pop	{r7, pc}
   1bb86:	46c0      	nop			; (mov r8, r8)
   1bb88:	2000079a 	.word	0x2000079a
   1bb8c:	0001b2a9 	.word	0x0001b2a9
   1bb90:	20000654 	.word	0x20000654
   1bb94:	0001b2dd 	.word	0x0001b2dd
   1bb98:	0001b311 	.word	0x0001b311
   1bb9c:	2000062c 	.word	0x2000062c
   1bba0:	00019925 	.word	0x00019925
   1bba4:	00014d31 	.word	0x00014d31
   1bba8:	00014b59 	.word	0x00014b59
   1bbac:	20000718 	.word	0x20000718
   1bbb0:	000197f5 	.word	0x000197f5
   1bbb4:	00019591 	.word	0x00019591
   1bbb8:	20000860 	.word	0x20000860
   1bbbc:	000209cd 	.word	0x000209cd
   1bbc0:	20000794 	.word	0x20000794
   1bbc4:	20000799 	.word	0x20000799
   1bbc8:	20000773 	.word	0x20000773
   1bbcc:	20000784 	.word	0x20000784
   1bbd0:	0001b325 	.word	0x0001b325
   1bbd4:	20000760 	.word	0x20000760
   1bbd8:	2000077e 	.word	0x2000077e
   1bbdc:	20000714 	.word	0x20000714

0001bbe0 <stopMotor>:

void stopMotor(bool commanded, bool forceStop,bool offButton)
{
   1bbe0:	b590      	push	{r4, r7, lr}
   1bbe2:	b083      	sub	sp, #12
   1bbe4:	af00      	add	r7, sp, #0
   1bbe6:	0004      	movs	r4, r0
   1bbe8:	0008      	movs	r0, r1
   1bbea:	0011      	movs	r1, r2
   1bbec:	1dfb      	adds	r3, r7, #7
   1bbee:	1c22      	adds	r2, r4, #0
   1bbf0:	701a      	strb	r2, [r3, #0]
   1bbf2:	1dbb      	adds	r3, r7, #6
   1bbf4:	1c02      	adds	r2, r0, #0
   1bbf6:	701a      	strb	r2, [r3, #0]
   1bbf8:	1d7b      	adds	r3, r7, #5
   1bbfa:	1c0a      	adds	r2, r1, #0
   1bbfc:	701a      	strb	r2, [r3, #0]
	if (forceStop || getMotorState())
   1bbfe:	1dbb      	adds	r3, r7, #6
   1bc00:	781b      	ldrb	r3, [r3, #0]
   1bc02:	2b00      	cmp	r3, #0
   1bc04:	d103      	bne.n	1bc0e <stopMotor+0x2e>
   1bc06:	4b21      	ldr	r3, [pc, #132]	; (1bc8c <stopMotor+0xac>)
   1bc08:	4798      	blx	r3
   1bc0a:	1e03      	subs	r3, r0, #0
   1bc0c:	d032      	beq.n	1bc74 <stopMotor+0x94>
	{
		singlePhasingTimerOn = false;
   1bc0e:	4b20      	ldr	r3, [pc, #128]	; (1bc90 <stopMotor+0xb0>)
   1bc10:	2200      	movs	r2, #0
   1bc12:	701a      	strb	r2, [r3, #0]
		if (user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_CURRENT)
   1bc14:	4b1f      	ldr	r3, [pc, #124]	; (1bc94 <stopMotor+0xb4>)
   1bc16:	2225      	movs	r2, #37	; 0x25
   1bc18:	5c9b      	ldrb	r3, [r3, r2]
   1bc1a:	2b01      	cmp	r3, #1
   1bc1c:	d105      	bne.n	1bc2a <stopMotor+0x4a>
		{
			fdbkRefCurrent = Analog_Parameter_Struct.Motor_Current_IntPart;
   1bc1e:	4b1e      	ldr	r3, [pc, #120]	; (1bc98 <stopMotor+0xb8>)
   1bc20:	8a9b      	ldrh	r3, [r3, #20]
   1bc22:	b29b      	uxth	r3, r3
   1bc24:	b2da      	uxtb	r2, r3
   1bc26:	4b1d      	ldr	r3, [pc, #116]	; (1bc9c <stopMotor+0xbc>)
   1bc28:	701a      	strb	r2, [r3, #0]
		}
		motorRelatedVoltageBypassOn=false;
   1bc2a:	4b1d      	ldr	r3, [pc, #116]	; (1bca0 <stopMotor+0xc0>)
   1bc2c:	2200      	movs	r2, #0
   1bc2e:	701a      	strb	r2, [r3, #0]
		STOP_RELAY_OFF;
   1bc30:	2100      	movs	r1, #0
   1bc32:	202c      	movs	r0, #44	; 0x2c
   1bc34:	4b1b      	ldr	r3, [pc, #108]	; (1bca4 <stopMotor+0xc4>)
   1bc36:	4798      	blx	r3
		stopMotorCommandGiven=true;
   1bc38:	4b1b      	ldr	r3, [pc, #108]	; (1bca8 <stopMotor+0xc8>)
   1bc3a:	2201      	movs	r2, #1
   1bc3c:	701a      	strb	r2, [r3, #0]
		tempStopSequenceTimer = xTaskGetTickCount();
   1bc3e:	4b1b      	ldr	r3, [pc, #108]	; (1bcac <stopMotor+0xcc>)
   1bc40:	4798      	blx	r3
   1bc42:	0002      	movs	r2, r0
   1bc44:	4b1a      	ldr	r3, [pc, #104]	; (1bcb0 <stopMotor+0xd0>)
   1bc46:	601a      	str	r2, [r3, #0]
		stopSequenceOn = true;
   1bc48:	4b1a      	ldr	r3, [pc, #104]	; (1bcb4 <stopMotor+0xd4>)
   1bc4a:	2201      	movs	r2, #1
   1bc4c:	701a      	strb	r2, [r3, #0]
		setMotorState(false);
   1bc4e:	2000      	movs	r0, #0
   1bc50:	4b19      	ldr	r3, [pc, #100]	; (1bcb8 <stopMotor+0xd8>)
   1bc52:	4798      	blx	r3
		gotOffCommand = commanded;
   1bc54:	4b19      	ldr	r3, [pc, #100]	; (1bcbc <stopMotor+0xdc>)
   1bc56:	1dfa      	adds	r2, r7, #7
   1bc58:	7812      	ldrb	r2, [r2, #0]
   1bc5a:	701a      	strb	r2, [r3, #0]
		offButtonPressed=offButton;
   1bc5c:	4b18      	ldr	r3, [pc, #96]	; (1bcc0 <stopMotor+0xe0>)
   1bc5e:	1d7a      	adds	r2, r7, #5
   1bc60:	7812      	ldrb	r2, [r2, #0]
   1bc62:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1bc64:	4b17      	ldr	r3, [pc, #92]	; (1bcc4 <stopMotor+0xe4>)
   1bc66:	785b      	ldrb	r3, [r3, #1]
   1bc68:	2b00      	cmp	r3, #0
   1bc6a:	d00b      	beq.n	1bc84 <stopMotor+0xa4>
		{
			lastCurrentReading=CR_NORMAL;			//to make the current readings normal
   1bc6c:	4b16      	ldr	r3, [pc, #88]	; (1bcc8 <stopMotor+0xe8>)
   1bc6e:	2200      	movs	r2, #0
   1bc70:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1bc72:	e007      	b.n	1bc84 <stopMotor+0xa4>
		}
	}
	else
	{
		if (commanded)
   1bc74:	1dfb      	adds	r3, r7, #7
   1bc76:	781b      	ldrb	r3, [r3, #0]
   1bc78:	2b00      	cmp	r3, #0
   1bc7a:	d003      	beq.n	1bc84 <stopMotor+0xa4>
		{
			setMotorMGRResponse('-');	//motor is already off
   1bc7c:	202d      	movs	r0, #45	; 0x2d
   1bc7e:	4b13      	ldr	r3, [pc, #76]	; (1bccc <stopMotor+0xec>)
   1bc80:	4798      	blx	r3
		}
	}
}
   1bc82:	e7ff      	b.n	1bc84 <stopMotor+0xa4>
   1bc84:	46c0      	nop			; (mov r8, r8)
   1bc86:	46bd      	mov	sp, r7
   1bc88:	b003      	add	sp, #12
   1bc8a:	bd90      	pop	{r4, r7, pc}
   1bc8c:	0001b311 	.word	0x0001b311
   1bc90:	20000791 	.word	0x20000791
   1bc94:	20000654 	.word	0x20000654
   1bc98:	200006e8 	.word	0x200006e8
   1bc9c:	200007f4 	.word	0x200007f4
   1bca0:	20000773 	.word	0x20000773
   1bca4:	00019591 	.word	0x00019591
   1bca8:	20000860 	.word	0x20000860
   1bcac:	000209cd 	.word	0x000209cd
   1bcb0:	200007a8 	.word	0x200007a8
   1bcb4:	20000788 	.word	0x20000788
   1bcb8:	0001b325 	.word	0x0001b325
   1bcbc:	2000080c 	.word	0x2000080c
   1bcc0:	200007a4 	.word	0x200007a4
   1bcc4:	2000062c 	.word	0x2000062c
   1bcc8:	2000077e 	.word	0x2000077e
   1bccc:	00014d31 	.word	0x00014d31

0001bcd0 <startMotorTimerOver>:

bool startMotorTimerOver(void)
{
   1bcd0:	b580      	push	{r7, lr}
   1bcd2:	af00      	add	r7, sp, #0
	return (xTaskGetTickCount() - tempStartTimer >= (((unsigned long int)user_settings_parameter_struct.autoStartTimeAddress * 1000)));
   1bcd4:	4b09      	ldr	r3, [pc, #36]	; (1bcfc <startMotorTimerOver+0x2c>)
   1bcd6:	4798      	blx	r3
   1bcd8:	0002      	movs	r2, r0
   1bcda:	4b09      	ldr	r3, [pc, #36]	; (1bd00 <startMotorTimerOver+0x30>)
   1bcdc:	681b      	ldr	r3, [r3, #0]
   1bcde:	1ad1      	subs	r1, r2, r3
   1bce0:	4b08      	ldr	r3, [pc, #32]	; (1bd04 <startMotorTimerOver+0x34>)
   1bce2:	885b      	ldrh	r3, [r3, #2]
   1bce4:	001a      	movs	r2, r3
   1bce6:	23fa      	movs	r3, #250	; 0xfa
   1bce8:	009b      	lsls	r3, r3, #2
   1bcea:	435a      	muls	r2, r3
   1bcec:	2300      	movs	r3, #0
   1bcee:	4291      	cmp	r1, r2
   1bcf0:	415b      	adcs	r3, r3
   1bcf2:	b2db      	uxtb	r3, r3
}
   1bcf4:	0018      	movs	r0, r3
   1bcf6:	46bd      	mov	sp, r7
   1bcf8:	bd80      	pop	{r7, pc}
   1bcfa:	46c0      	nop			; (mov r8, r8)
   1bcfc:	000209cd 	.word	0x000209cd
   1bd00:	200007a0 	.word	0x200007a0
   1bd04:	20000654 	.word	0x20000654

0001bd08 <unknownMotorOff>:

void unknownMotorOff(void)
{
   1bd08:	b580      	push	{r7, lr}
   1bd0a:	af00      	add	r7, sp, #0
	// waitCheckACTimerOn = false;
	//report to SIM Motor Off due to Unknown Reason
	stopMotor(false,true,false);
   1bd0c:	2200      	movs	r2, #0
   1bd0e:	2101      	movs	r1, #1
   1bd10:	2000      	movs	r0, #0
   1bd12:	4b06      	ldr	r3, [pc, #24]	; (1bd2c <unknownMotorOff+0x24>)
   1bd14:	4798      	blx	r3
	simEventTemp[2] = registerEvent('_');
   1bd16:	205f      	movs	r0, #95	; 0x5f
   1bd18:	4b05      	ldr	r3, [pc, #20]	; (1bd30 <unknownMotorOff+0x28>)
   1bd1a:	4798      	blx	r3
   1bd1c:	0003      	movs	r3, r0
   1bd1e:	001a      	movs	r2, r3
   1bd20:	4b04      	ldr	r3, [pc, #16]	; (1bd34 <unknownMotorOff+0x2c>)
   1bd22:	709a      	strb	r2, [r3, #2]
}
   1bd24:	46c0      	nop			; (mov r8, r8)
   1bd26:	46bd      	mov	sp, r7
   1bd28:	bd80      	pop	{r7, pc}
   1bd2a:	46c0      	nop			; (mov r8, r8)
   1bd2c:	0001bbe1 	.word	0x0001bbe1
   1bd30:	00014b59 	.word	0x00014b59
   1bd34:	20000718 	.word	0x20000718

0001bd38 <singlePhasingTimerOver>:

bool singlePhasingTimerOver(void)
{
   1bd38:	b580      	push	{r7, lr}
   1bd3a:	af00      	add	r7, sp, #0
	return (singlePhasingTimerOn && xTaskGetTickCount() - tempSinglePhasingTimer > ((unsigned int)singlePhasingTime * 100));
   1bd3c:	4b0d      	ldr	r3, [pc, #52]	; (1bd74 <singlePhasingTimerOver+0x3c>)
   1bd3e:	781b      	ldrb	r3, [r3, #0]
   1bd40:	2b00      	cmp	r3, #0
   1bd42:	d00e      	beq.n	1bd62 <singlePhasingTimerOver+0x2a>
   1bd44:	4b0c      	ldr	r3, [pc, #48]	; (1bd78 <singlePhasingTimerOver+0x40>)
   1bd46:	4798      	blx	r3
   1bd48:	0002      	movs	r2, r0
   1bd4a:	4b0c      	ldr	r3, [pc, #48]	; (1bd7c <singlePhasingTimerOver+0x44>)
   1bd4c:	681b      	ldr	r3, [r3, #0]
   1bd4e:	1ad2      	subs	r2, r2, r3
   1bd50:	4b0b      	ldr	r3, [pc, #44]	; (1bd80 <singlePhasingTimerOver+0x48>)
   1bd52:	781b      	ldrb	r3, [r3, #0]
   1bd54:	0019      	movs	r1, r3
   1bd56:	2364      	movs	r3, #100	; 0x64
   1bd58:	434b      	muls	r3, r1
   1bd5a:	429a      	cmp	r2, r3
   1bd5c:	d901      	bls.n	1bd62 <singlePhasingTimerOver+0x2a>
   1bd5e:	2301      	movs	r3, #1
   1bd60:	e000      	b.n	1bd64 <singlePhasingTimerOver+0x2c>
   1bd62:	2300      	movs	r3, #0
   1bd64:	1c1a      	adds	r2, r3, #0
   1bd66:	2301      	movs	r3, #1
   1bd68:	4013      	ands	r3, r2
   1bd6a:	b2db      	uxtb	r3, r3
}
   1bd6c:	0018      	movs	r0, r3
   1bd6e:	46bd      	mov	sp, r7
   1bd70:	bd80      	pop	{r7, pc}
   1bd72:	46c0      	nop			; (mov r8, r8)
   1bd74:	20000791 	.word	0x20000791
   1bd78:	000209cd 	.word	0x000209cd
   1bd7c:	20000778 	.word	0x20000778
   1bd80:	20000770 	.word	0x20000770

0001bd84 <operateOnSinglePhasing>:

void operateOnSinglePhasing(void)
{
   1bd84:	b580      	push	{r7, lr}
   1bd86:	af00      	add	r7, sp, #0
	THREEPHASE_OK_LED_OFF;
   1bd88:	2101      	movs	r1, #1
   1bd8a:	2027      	movs	r0, #39	; 0x27
   1bd8c:	4b08      	ldr	r3, [pc, #32]	; (1bdb0 <operateOnSinglePhasing+0x2c>)
   1bd8e:	4798      	blx	r3
	stopMotor(false,true,false);
   1bd90:	2200      	movs	r2, #0
   1bd92:	2101      	movs	r1, #1
   1bd94:	2000      	movs	r0, #0
   1bd96:	4b07      	ldr	r3, [pc, #28]	; (1bdb4 <operateOnSinglePhasing+0x30>)
   1bd98:	4798      	blx	r3
	simEventTemp[3] = registerEvent('F');
   1bd9a:	2046      	movs	r0, #70	; 0x46
   1bd9c:	4b06      	ldr	r3, [pc, #24]	; (1bdb8 <operateOnSinglePhasing+0x34>)
   1bd9e:	4798      	blx	r3
   1bda0:	0003      	movs	r3, r0
   1bda2:	001a      	movs	r2, r3
   1bda4:	4b05      	ldr	r3, [pc, #20]	; (1bdbc <operateOnSinglePhasing+0x38>)
   1bda6:	70da      	strb	r2, [r3, #3]
}
   1bda8:	46c0      	nop			; (mov r8, r8)
   1bdaa:	46bd      	mov	sp, r7
   1bdac:	bd80      	pop	{r7, pc}
   1bdae:	46c0      	nop			; (mov r8, r8)
   1bdb0:	00019591 	.word	0x00019591
   1bdb4:	0001bbe1 	.word	0x0001bbe1
   1bdb8:	00014b59 	.word	0x00014b59
   1bdbc:	20000718 	.word	0x20000718

0001bdc0 <terminateStopRelay>:

void terminateStopRelay(void)
{
   1bdc0:	b580      	push	{r7, lr}
   1bdc2:	af00      	add	r7, sp, #0
	if (stopSequenceOn && xTaskGetTickCount() - tempStopSequenceTimer > (stopSequenceTimerTime * 100))
   1bdc4:	4b28      	ldr	r3, [pc, #160]	; (1be68 <terminateStopRelay+0xa8>)
   1bdc6:	781b      	ldrb	r3, [r3, #0]
   1bdc8:	2b00      	cmp	r3, #0
   1bdca:	d04a      	beq.n	1be62 <terminateStopRelay+0xa2>
   1bdcc:	4b27      	ldr	r3, [pc, #156]	; (1be6c <terminateStopRelay+0xac>)
   1bdce:	4798      	blx	r3
   1bdd0:	0002      	movs	r2, r0
   1bdd2:	4b27      	ldr	r3, [pc, #156]	; (1be70 <terminateStopRelay+0xb0>)
   1bdd4:	681b      	ldr	r3, [r3, #0]
   1bdd6:	1ad3      	subs	r3, r2, r3
   1bdd8:	4a26      	ldr	r2, [pc, #152]	; (1be74 <terminateStopRelay+0xb4>)
   1bdda:	7812      	ldrb	r2, [r2, #0]
   1bddc:	0011      	movs	r1, r2
   1bdde:	2264      	movs	r2, #100	; 0x64
   1bde0:	434a      	muls	r2, r1
   1bde2:	4293      	cmp	r3, r2
   1bde4:	d93d      	bls.n	1be62 <terminateStopRelay+0xa2>
	{
		//if ((bool)(user_settings_parameter_struct.autoStartAddress) && getACPowerState())
		//{
		//STOP_RELAY_ON;
		//}
		stopSequenceOn = false;
   1bde6:	4b20      	ldr	r3, [pc, #128]	; (1be68 <terminateStopRelay+0xa8>)
   1bde8:	2200      	movs	r2, #0
   1bdea:	701a      	strb	r2, [r3, #0]
		stopMotorCommandGiven=true;
   1bdec:	4b22      	ldr	r3, [pc, #136]	; (1be78 <terminateStopRelay+0xb8>)
   1bdee:	2201      	movs	r2, #1
   1bdf0:	701a      	strb	r2, [r3, #0]
		if(!getMotorState_from_pin())															//motor has turned off OR NOT
   1bdf2:	4b22      	ldr	r3, [pc, #136]	; (1be7c <terminateStopRelay+0xbc>)
   1bdf4:	4798      	blx	r3
   1bdf6:	0003      	movs	r3, r0
   1bdf8:	001a      	movs	r2, r3
   1bdfa:	2301      	movs	r3, #1
   1bdfc:	4053      	eors	r3, r2
   1bdfe:	b2db      	uxtb	r3, r3
   1be00:	2b00      	cmp	r3, #0
   1be02:	d019      	beq.n	1be38 <terminateStopRelay+0x78>
		{
			if (gotOffCommand)
   1be04:	4b1e      	ldr	r3, [pc, #120]	; (1be80 <terminateStopRelay+0xc0>)
   1be06:	781b      	ldrb	r3, [r3, #0]
   1be08:	2b00      	cmp	r3, #0
   1be0a:	d006      	beq.n	1be1a <terminateStopRelay+0x5a>
			{
				gotOffCommand = false;
   1be0c:	4b1c      	ldr	r3, [pc, #112]	; (1be80 <terminateStopRelay+0xc0>)
   1be0e:	2200      	movs	r2, #0
   1be10:	701a      	strb	r2, [r3, #0]
				setMotorMGRResponse('O');		//motor has stopped
   1be12:	204f      	movs	r0, #79	; 0x4f
   1be14:	4b1b      	ldr	r3, [pc, #108]	; (1be84 <terminateStopRelay+0xc4>)
   1be16:	4798      	blx	r3
   1be18:	e020      	b.n	1be5c <terminateStopRelay+0x9c>
			}
			else if(offButtonPressed)
   1be1a:	4b1b      	ldr	r3, [pc, #108]	; (1be88 <terminateStopRelay+0xc8>)
   1be1c:	781b      	ldrb	r3, [r3, #0]
   1be1e:	2b00      	cmp	r3, #0
   1be20:	d01c      	beq.n	1be5c <terminateStopRelay+0x9c>
			{
				offButtonPressed=false;
   1be22:	4b19      	ldr	r3, [pc, #100]	; (1be88 <terminateStopRelay+0xc8>)
   1be24:	2200      	movs	r2, #0
   1be26:	701a      	strb	r2, [r3, #0]
				simEventTemp[8] = registerEvent('O'); //register TO SIM motor has turned off
   1be28:	204f      	movs	r0, #79	; 0x4f
   1be2a:	4b18      	ldr	r3, [pc, #96]	; (1be8c <terminateStopRelay+0xcc>)
   1be2c:	4798      	blx	r3
   1be2e:	0003      	movs	r3, r0
   1be30:	001a      	movs	r2, r3
   1be32:	4b17      	ldr	r3, [pc, #92]	; (1be90 <terminateStopRelay+0xd0>)
   1be34:	721a      	strb	r2, [r3, #8]
   1be36:	e011      	b.n	1be5c <terminateStopRelay+0x9c>
			}
		}
		else
		{
			if (gotOffCommand)
   1be38:	4b11      	ldr	r3, [pc, #68]	; (1be80 <terminateStopRelay+0xc0>)
   1be3a:	781b      	ldrb	r3, [r3, #0]
   1be3c:	2b00      	cmp	r3, #0
   1be3e:	d006      	beq.n	1be4e <terminateStopRelay+0x8e>
			{
				gotOffCommand = false;
   1be40:	4b0f      	ldr	r3, [pc, #60]	; (1be80 <terminateStopRelay+0xc0>)
   1be42:	2200      	movs	r2, #0
   1be44:	701a      	strb	r2, [r3, #0]
				setMotorMGRResponse('P');		//cannot turn off motor
   1be46:	2050      	movs	r0, #80	; 0x50
   1be48:	4b0e      	ldr	r3, [pc, #56]	; (1be84 <terminateStopRelay+0xc4>)
   1be4a:	4798      	blx	r3
   1be4c:	e006      	b.n	1be5c <terminateStopRelay+0x9c>
			}
			else
			{
				simEventTemp[1] = registerEvent('P');
   1be4e:	2050      	movs	r0, #80	; 0x50
   1be50:	4b0e      	ldr	r3, [pc, #56]	; (1be8c <terminateStopRelay+0xcc>)
   1be52:	4798      	blx	r3
   1be54:	0003      	movs	r3, r0
   1be56:	001a      	movs	r2, r3
   1be58:	4b0d      	ldr	r3, [pc, #52]	; (1be90 <terminateStopRelay+0xd0>)
   1be5a:	705a      	strb	r2, [r3, #1]
			}
		}
		offButtonPressed=false;
   1be5c:	4b0a      	ldr	r3, [pc, #40]	; (1be88 <terminateStopRelay+0xc8>)
   1be5e:	2200      	movs	r2, #0
   1be60:	701a      	strb	r2, [r3, #0]
	}
}
   1be62:	46c0      	nop			; (mov r8, r8)
   1be64:	46bd      	mov	sp, r7
   1be66:	bd80      	pop	{r7, pc}
   1be68:	20000788 	.word	0x20000788
   1be6c:	000209cd 	.word	0x000209cd
   1be70:	200007a8 	.word	0x200007a8
   1be74:	20000863 	.word	0x20000863
   1be78:	20000860 	.word	0x20000860
   1be7c:	0001b365 	.word	0x0001b365
   1be80:	2000080c 	.word	0x2000080c
   1be84:	00014d31 	.word	0x00014d31
   1be88:	200007a4 	.word	0x200007a4
   1be8c:	00014b59 	.word	0x00014b59
   1be90:	20000718 	.word	0x20000718

0001be94 <terminateStarDeltaTimer>:

void terminateStarDeltaTimer(void)
{
   1be94:	b580      	push	{r7, lr}
   1be96:	af00      	add	r7, sp, #0
	if(starDeltaTimerOn && xTaskGetTickCount() - tempStartSequenceTimer > ((unsigned long int)(user_settings_parameter_struct.starDeltaTimerAddress) *1000L))
   1be98:	4b13      	ldr	r3, [pc, #76]	; (1bee8 <terminateStarDeltaTimer+0x54>)
   1be9a:	781b      	ldrb	r3, [r3, #0]
   1be9c:	2b00      	cmp	r3, #0
   1be9e:	d020      	beq.n	1bee2 <terminateStarDeltaTimer+0x4e>
   1bea0:	4b12      	ldr	r3, [pc, #72]	; (1beec <terminateStarDeltaTimer+0x58>)
   1bea2:	4798      	blx	r3
   1bea4:	0002      	movs	r2, r0
   1bea6:	4b12      	ldr	r3, [pc, #72]	; (1bef0 <terminateStarDeltaTimer+0x5c>)
   1bea8:	681b      	ldr	r3, [r3, #0]
   1beaa:	1ad2      	subs	r2, r2, r3
   1beac:	4b11      	ldr	r3, [pc, #68]	; (1bef4 <terminateStarDeltaTimer+0x60>)
   1beae:	88db      	ldrh	r3, [r3, #6]
   1beb0:	0019      	movs	r1, r3
   1beb2:	23fa      	movs	r3, #250	; 0xfa
   1beb4:	009b      	lsls	r3, r3, #2
   1beb6:	434b      	muls	r3, r1
   1beb8:	429a      	cmp	r2, r3
   1beba:	d912      	bls.n	1bee2 <terminateStarDeltaTimer+0x4e>
	{
		START_RELAY_OFF;
   1bebc:	2100      	movs	r1, #0
   1bebe:	202d      	movs	r0, #45	; 0x2d
   1bec0:	4b0d      	ldr	r3, [pc, #52]	; (1bef8 <terminateStarDeltaTimer+0x64>)
   1bec2:	4798      	blx	r3
		starDeltaTimerOn=false;
   1bec4:	4b08      	ldr	r3, [pc, #32]	; (1bee8 <terminateStarDeltaTimer+0x54>)
   1bec6:	2200      	movs	r2, #0
   1bec8:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1beca:	4b0c      	ldr	r3, [pc, #48]	; (1befc <terminateStarDeltaTimer+0x68>)
   1becc:	785b      	ldrb	r3, [r3, #1]
   1bece:	2b00      	cmp	r3, #0
   1bed0:	d007      	beq.n	1bee2 <terminateStarDeltaTimer+0x4e>
		{
			enableCurrentBuffer=true;
   1bed2:	4b0b      	ldr	r3, [pc, #44]	; (1bf00 <terminateStarDeltaTimer+0x6c>)
   1bed4:	2201      	movs	r2, #1
   1bed6:	701a      	strb	r2, [r3, #0]
			tempStartSequenceTimer=xTaskGetTickCount();
   1bed8:	4b04      	ldr	r3, [pc, #16]	; (1beec <terminateStarDeltaTimer+0x58>)
   1beda:	4798      	blx	r3
   1bedc:	0002      	movs	r2, r0
   1bede:	4b04      	ldr	r3, [pc, #16]	; (1bef0 <terminateStarDeltaTimer+0x5c>)
   1bee0:	601a      	str	r2, [r3, #0]
		}
	}
}
   1bee2:	46c0      	nop			; (mov r8, r8)
   1bee4:	46bd      	mov	sp, r7
   1bee6:	bd80      	pop	{r7, pc}
   1bee8:	2000079b 	.word	0x2000079b
   1beec:	000209cd 	.word	0x000209cd
   1bef0:	20000794 	.word	0x20000794
   1bef4:	20000654 	.word	0x20000654
   1bef8:	00019591 	.word	0x00019591
   1befc:	2000062c 	.word	0x2000062c
   1bf00:	20000760 	.word	0x20000760

0001bf04 <terminateStartRelay>:

void terminateStartRelay(void)
{
   1bf04:	b590      	push	{r4, r7, lr}
   1bf06:	b083      	sub	sp, #12
   1bf08:	af00      	add	r7, sp, #0
	if (startSequenceOn &&  xTaskGetTickCount() - tempStartSequenceTimer > (startSequenceTimerTime * 100))
   1bf0a:	4b37      	ldr	r3, [pc, #220]	; (1bfe8 <terminateStartRelay+0xe4>)
   1bf0c:	781b      	ldrb	r3, [r3, #0]
   1bf0e:	2b00      	cmp	r3, #0
   1bf10:	d065      	beq.n	1bfde <terminateStartRelay+0xda>
   1bf12:	4b36      	ldr	r3, [pc, #216]	; (1bfec <terminateStartRelay+0xe8>)
   1bf14:	4798      	blx	r3
   1bf16:	0002      	movs	r2, r0
   1bf18:	4b35      	ldr	r3, [pc, #212]	; (1bff0 <terminateStartRelay+0xec>)
   1bf1a:	681b      	ldr	r3, [r3, #0]
   1bf1c:	1ad3      	subs	r3, r2, r3
   1bf1e:	4a35      	ldr	r2, [pc, #212]	; (1bff4 <terminateStartRelay+0xf0>)
   1bf20:	7812      	ldrb	r2, [r2, #0]
   1bf22:	0011      	movs	r1, r2
   1bf24:	2264      	movs	r2, #100	; 0x64
   1bf26:	434a      	muls	r2, r1
   1bf28:	4293      	cmp	r3, r2
   1bf2a:	d958      	bls.n	1bfde <terminateStartRelay+0xda>
	{
		if((((unsigned int)user_settings_parameter_struct.starDeltaTimerAddress) * 1000) <= (((uint16_t)startSequenceTimerTime)*100))
   1bf2c:	4b32      	ldr	r3, [pc, #200]	; (1bff8 <terminateStartRelay+0xf4>)
   1bf2e:	88db      	ldrh	r3, [r3, #6]
   1bf30:	001a      	movs	r2, r3
   1bf32:	23fa      	movs	r3, #250	; 0xfa
   1bf34:	009b      	lsls	r3, r3, #2
   1bf36:	4353      	muls	r3, r2
   1bf38:	4a2e      	ldr	r2, [pc, #184]	; (1bff4 <terminateStartRelay+0xf0>)
   1bf3a:	7812      	ldrb	r2, [r2, #0]
   1bf3c:	0011      	movs	r1, r2
   1bf3e:	2264      	movs	r2, #100	; 0x64
   1bf40:	434a      	muls	r2, r1
   1bf42:	4293      	cmp	r3, r2
   1bf44:	d810      	bhi.n	1bf68 <terminateStartRelay+0x64>
		{
			START_RELAY_OFF;
   1bf46:	2100      	movs	r1, #0
   1bf48:	202d      	movs	r0, #45	; 0x2d
   1bf4a:	4b2c      	ldr	r3, [pc, #176]	; (1bffc <terminateStartRelay+0xf8>)
   1bf4c:	4798      	blx	r3
			tempStartSequenceTimer=xTaskGetTickCount();
   1bf4e:	4b27      	ldr	r3, [pc, #156]	; (1bfec <terminateStartRelay+0xe8>)
   1bf50:	4798      	blx	r3
   1bf52:	0002      	movs	r2, r0
   1bf54:	4b26      	ldr	r3, [pc, #152]	; (1bff0 <terminateStartRelay+0xec>)
   1bf56:	601a      	str	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1bf58:	4b29      	ldr	r3, [pc, #164]	; (1c000 <terminateStartRelay+0xfc>)
   1bf5a:	785b      	ldrb	r3, [r3, #1]
   1bf5c:	2b00      	cmp	r3, #0
   1bf5e:	d006      	beq.n	1bf6e <terminateStartRelay+0x6a>
			{
				enableCurrentBuffer=true;
   1bf60:	4b28      	ldr	r3, [pc, #160]	; (1c004 <terminateStartRelay+0x100>)
   1bf62:	2201      	movs	r2, #1
   1bf64:	701a      	strb	r2, [r3, #0]
   1bf66:	e002      	b.n	1bf6e <terminateStartRelay+0x6a>
			}
		}
		else
		{
			starDeltaTimerOn=true;
   1bf68:	4b27      	ldr	r3, [pc, #156]	; (1c008 <terminateStartRelay+0x104>)
   1bf6a:	2201      	movs	r2, #1
   1bf6c:	701a      	strb	r2, [r3, #0]
		}
		startSequenceOn = false;
   1bf6e:	4b1e      	ldr	r3, [pc, #120]	; (1bfe8 <terminateStartRelay+0xe4>)
   1bf70:	2200      	movs	r2, #0
   1bf72:	701a      	strb	r2, [r3, #0]
		bool motor = getMotorState_from_pin();
   1bf74:	1dfc      	adds	r4, r7, #7
   1bf76:	4b25      	ldr	r3, [pc, #148]	; (1c00c <terminateStartRelay+0x108>)
   1bf78:	4798      	blx	r3
   1bf7a:	0003      	movs	r3, r0
   1bf7c:	7023      	strb	r3, [r4, #0]
		if (gotOnCommand)
   1bf7e:	4b24      	ldr	r3, [pc, #144]	; (1c010 <terminateStartRelay+0x10c>)
   1bf80:	781b      	ldrb	r3, [r3, #0]
   1bf82:	2b00      	cmp	r3, #0
   1bf84:	d013      	beq.n	1bfae <terminateStartRelay+0xaa>
		{
			gotOnCommand = false;
   1bf86:	4b22      	ldr	r3, [pc, #136]	; (1c010 <terminateStartRelay+0x10c>)
   1bf88:	2200      	movs	r2, #0
   1bf8a:	701a      	strb	r2, [r3, #0]
			if (motor)
   1bf8c:	1dfb      	adds	r3, r7, #7
   1bf8e:	781b      	ldrb	r3, [r3, #0]
   1bf90:	2b00      	cmp	r3, #0
   1bf92:	d003      	beq.n	1bf9c <terminateStartRelay+0x98>
			{
				setMotorMGRResponse('S'); // motor has started
   1bf94:	2053      	movs	r0, #83	; 0x53
   1bf96:	4b1f      	ldr	r3, [pc, #124]	; (1c014 <terminateStartRelay+0x110>)
   1bf98:	4798      	blx	r3
				stopMotor(false,true,false);
				simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
			}
		}
	}
}
   1bf9a:	e020      	b.n	1bfde <terminateStartRelay+0xda>
				stopMotor(false,true,false);
   1bf9c:	2200      	movs	r2, #0
   1bf9e:	2101      	movs	r1, #1
   1bfa0:	2000      	movs	r0, #0
   1bfa2:	4b1d      	ldr	r3, [pc, #116]	; (1c018 <terminateStartRelay+0x114>)
   1bfa4:	4798      	blx	r3
				setMotorMGRResponse('N');	//cannot start motor due to some problem
   1bfa6:	204e      	movs	r0, #78	; 0x4e
   1bfa8:	4b1a      	ldr	r3, [pc, #104]	; (1c014 <terminateStartRelay+0x110>)
   1bfaa:	4798      	blx	r3
}
   1bfac:	e017      	b.n	1bfde <terminateStartRelay+0xda>
			if (motor)
   1bfae:	1dfb      	adds	r3, r7, #7
   1bfb0:	781b      	ldrb	r3, [r3, #0]
   1bfb2:	2b00      	cmp	r3, #0
   1bfb4:	d007      	beq.n	1bfc6 <terminateStartRelay+0xc2>
				simEventTemp[7] = registerEvent('S');// ;//register To SIM Motor has started
   1bfb6:	2053      	movs	r0, #83	; 0x53
   1bfb8:	4b18      	ldr	r3, [pc, #96]	; (1c01c <terminateStartRelay+0x118>)
   1bfba:	4798      	blx	r3
   1bfbc:	0003      	movs	r3, r0
   1bfbe:	001a      	movs	r2, r3
   1bfc0:	4b17      	ldr	r3, [pc, #92]	; (1c020 <terminateStartRelay+0x11c>)
   1bfc2:	71da      	strb	r2, [r3, #7]
}
   1bfc4:	e00b      	b.n	1bfde <terminateStartRelay+0xda>
				stopMotor(false,true,false);
   1bfc6:	2200      	movs	r2, #0
   1bfc8:	2101      	movs	r1, #1
   1bfca:	2000      	movs	r0, #0
   1bfcc:	4b12      	ldr	r3, [pc, #72]	; (1c018 <terminateStartRelay+0x114>)
   1bfce:	4798      	blx	r3
				simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
   1bfd0:	204e      	movs	r0, #78	; 0x4e
   1bfd2:	4b12      	ldr	r3, [pc, #72]	; (1c01c <terminateStartRelay+0x118>)
   1bfd4:	4798      	blx	r3
   1bfd6:	0003      	movs	r3, r0
   1bfd8:	001a      	movs	r2, r3
   1bfda:	4b11      	ldr	r3, [pc, #68]	; (1c020 <terminateStartRelay+0x11c>)
   1bfdc:	701a      	strb	r2, [r3, #0]
}
   1bfde:	46c0      	nop			; (mov r8, r8)
   1bfe0:	46bd      	mov	sp, r7
   1bfe2:	b003      	add	sp, #12
   1bfe4:	bd90      	pop	{r4, r7, pc}
   1bfe6:	46c0      	nop			; (mov r8, r8)
   1bfe8:	20000799 	.word	0x20000799
   1bfec:	000209cd 	.word	0x000209cd
   1bff0:	20000794 	.word	0x20000794
   1bff4:	20000818 	.word	0x20000818
   1bff8:	20000654 	.word	0x20000654
   1bffc:	00019591 	.word	0x00019591
   1c000:	2000062c 	.word	0x2000062c
   1c004:	20000760 	.word	0x20000760
   1c008:	2000079b 	.word	0x2000079b
   1c00c:	0001b365 	.word	0x0001b365
   1c010:	20000714 	.word	0x20000714
   1c014:	00014d31 	.word	0x00014d31
   1c018:	0001bbe1 	.word	0x0001bbe1
   1c01c:	00014b59 	.word	0x00014b59
   1c020:	20000718 	.word	0x20000718

0001c024 <statusOnCall>:

void statusOnCall(void)
{
   1c024:	b590      	push	{r4, r7, lr}
   1c026:	b083      	sub	sp, #12
   1c028:	af00      	add	r7, sp, #0
	char status[5];
	uint8_t index=0;
   1c02a:	1dfb      	adds	r3, r7, #7
   1c02c:	2200      	movs	r2, #0
   1c02e:	701a      	strb	r2, [r3, #0]
	uint8_t b = checkLineSensors();
   1c030:	1dbc      	adds	r4, r7, #6
   1c032:	4b3b      	ldr	r3, [pc, #236]	; (1c120 <statusOnCall+0xfc>)
   1c034:	4798      	blx	r3
   1c036:	0003      	movs	r3, r0
   1c038:	7023      	strb	r3, [r4, #0]
	if (b == AC_OFF)
   1c03a:	1dbb      	adds	r3, r7, #6
   1c03c:	781b      	ldrb	r3, [r3, #0]
   1c03e:	2b00      	cmp	r3, #0
   1c040:	d109      	bne.n	1c056 <statusOnCall+0x32>
	{
		status[index++]='L';
   1c042:	1dfb      	adds	r3, r7, #7
   1c044:	781b      	ldrb	r3, [r3, #0]
   1c046:	1dfa      	adds	r2, r7, #7
   1c048:	1c59      	adds	r1, r3, #1
   1c04a:	7011      	strb	r1, [r2, #0]
   1c04c:	001a      	movs	r2, r3
   1c04e:	003b      	movs	r3, r7
   1c050:	214c      	movs	r1, #76	; 0x4c
   1c052:	5499      	strb	r1, [r3, r2]
   1c054:	e03b      	b.n	1c0ce <statusOnCall+0xaa>
		// sim1->setMotorMGRResponse('L');	//motor off, no light
	}
	else if (b == AC_2PH)	//power only in 2 phase
   1c056:	1dbb      	adds	r3, r7, #6
   1c058:	781b      	ldrb	r3, [r3, #0]
   1c05a:	2b02      	cmp	r3, #2
   1c05c:	d109      	bne.n	1c072 <statusOnCall+0x4e>
	{
		status[index++]='A';
   1c05e:	1dfb      	adds	r3, r7, #7
   1c060:	781b      	ldrb	r3, [r3, #0]
   1c062:	1dfa      	adds	r2, r7, #7
   1c064:	1c59      	adds	r1, r3, #1
   1c066:	7011      	strb	r1, [r2, #0]
   1c068:	001a      	movs	r2, r3
   1c06a:	003b      	movs	r3, r7
   1c06c:	2141      	movs	r1, #65	; 0x41
   1c06e:	5499      	strb	r1, [r3, r2]
   1c070:	e02d      	b.n	1c0ce <statusOnCall+0xaa>
		// sim1->setMotorMGRResponse('A');
	}
	else if (b == AC_3PH)
   1c072:	1dbb      	adds	r3, r7, #6
   1c074:	781b      	ldrb	r3, [r3, #0]
   1c076:	2b03      	cmp	r3, #3
   1c078:	d129      	bne.n	1c0ce <statusOnCall+0xaa>
	{
		bool temp = getMotorState_from_pin();
   1c07a:	1d7c      	adds	r4, r7, #5
   1c07c:	4b29      	ldr	r3, [pc, #164]	; (1c124 <statusOnCall+0x100>)
   1c07e:	4798      	blx	r3
   1c080:	0003      	movs	r3, r0
   1c082:	7023      	strb	r3, [r4, #0]
		if (temp)
   1c084:	1d7b      	adds	r3, r7, #5
   1c086:	781b      	ldrb	r3, [r3, #0]
   1c088:	2b00      	cmp	r3, #0
   1c08a:	d009      	beq.n	1c0a0 <statusOnCall+0x7c>
		{
			status[index++]='+';
   1c08c:	1dfb      	adds	r3, r7, #7
   1c08e:	781b      	ldrb	r3, [r3, #0]
   1c090:	1dfa      	adds	r2, r7, #7
   1c092:	1c59      	adds	r1, r3, #1
   1c094:	7011      	strb	r1, [r2, #0]
   1c096:	001a      	movs	r2, r3
   1c098:	003b      	movs	r3, r7
   1c09a:	212b      	movs	r1, #43	; 0x2b
   1c09c:	5499      	strb	r1, [r3, r2]
   1c09e:	e016      	b.n	1c0ce <statusOnCall+0xaa>
			// sim1->setMotorMGRResponse('+');	//motor is on
		}
		else
		{
			status[index++]='_';
   1c0a0:	1dfb      	adds	r3, r7, #7
   1c0a2:	781b      	ldrb	r3, [r3, #0]
   1c0a4:	1dfa      	adds	r2, r7, #7
   1c0a6:	1c59      	adds	r1, r3, #1
   1c0a8:	7011      	strb	r1, [r2, #0]
   1c0aa:	001a      	movs	r2, r3
   1c0ac:	003b      	movs	r3, r7
   1c0ae:	215f      	movs	r1, #95	; 0x5f
   1c0b0:	5499      	strb	r1, [r3, r2]
			
			//Play File for Wrong Phase Sequence if phase seq is wrong
			if(structThreePhase_state.u8t_phase_sequence_flag !=THREEPHASE_OK)					//3 phase sequence is incorrect
   1c0b2:	4b1d      	ldr	r3, [pc, #116]	; (1c128 <statusOnCall+0x104>)
   1c0b4:	781b      	ldrb	r3, [r3, #0]
   1c0b6:	b2db      	uxtb	r3, r3
   1c0b8:	2b02      	cmp	r3, #2
   1c0ba:	d008      	beq.n	1c0ce <statusOnCall+0xaa>
			{
				//todo: replace A(single Phasing) in below statement with Character for Wrong Phase Sequence Event
				status[index++]='A';
   1c0bc:	1dfb      	adds	r3, r7, #7
   1c0be:	781b      	ldrb	r3, [r3, #0]
   1c0c0:	1dfa      	adds	r2, r7, #7
   1c0c2:	1c59      	adds	r1, r3, #1
   1c0c4:	7011      	strb	r1, [r2, #0]
   1c0c6:	001a      	movs	r2, r3
   1c0c8:	003b      	movs	r3, r7
   1c0ca:	2141      	movs	r1, #65	; 0x41
   1c0cc:	5499      	strb	r1, [r3, r2]

			// sim1->setMotorMGRResponse('_');	//motor off, light on
		}
	}

	if(user_settings_parameter_struct.autoStartAddress)
   1c0ce:	4b17      	ldr	r3, [pc, #92]	; (1c12c <statusOnCall+0x108>)
   1c0d0:	785b      	ldrb	r3, [r3, #1]
   1c0d2:	2b00      	cmp	r3, #0
   1c0d4:	d009      	beq.n	1c0ea <statusOnCall+0xc6>
	{
		status[index++]=')';
   1c0d6:	1dfb      	adds	r3, r7, #7
   1c0d8:	781b      	ldrb	r3, [r3, #0]
   1c0da:	1dfa      	adds	r2, r7, #7
   1c0dc:	1c59      	adds	r1, r3, #1
   1c0de:	7011      	strb	r1, [r2, #0]
   1c0e0:	001a      	movs	r2, r3
   1c0e2:	003b      	movs	r3, r7
   1c0e4:	2129      	movs	r1, #41	; 0x29
   1c0e6:	5499      	strb	r1, [r3, r2]
   1c0e8:	e008      	b.n	1c0fc <statusOnCall+0xd8>
	}
	else
	{
		status[index++]='[';
   1c0ea:	1dfb      	adds	r3, r7, #7
   1c0ec:	781b      	ldrb	r3, [r3, #0]
   1c0ee:	1dfa      	adds	r2, r7, #7
   1c0f0:	1c59      	adds	r1, r3, #1
   1c0f2:	7011      	strb	r1, [r2, #0]
   1c0f4:	001a      	movs	r2, r3
   1c0f6:	003b      	movs	r3, r7
   1c0f8:	215b      	movs	r1, #91	; 0x5b
   1c0fa:	5499      	strb	r1, [r3, r2]
	}
	
	status[index++]='\0';
   1c0fc:	1dfb      	adds	r3, r7, #7
   1c0fe:	781b      	ldrb	r3, [r3, #0]
   1c100:	1dfa      	adds	r2, r7, #7
   1c102:	1c59      	adds	r1, r3, #1
   1c104:	7011      	strb	r1, [r2, #0]
   1c106:	001a      	movs	r2, r3
   1c108:	003b      	movs	r3, r7
   1c10a:	2100      	movs	r1, #0
   1c10c:	5499      	strb	r1, [r3, r2]

	playRepeatedFiles(status);
   1c10e:	003b      	movs	r3, r7
   1c110:	0018      	movs	r0, r3
   1c112:	4b07      	ldr	r3, [pc, #28]	; (1c130 <statusOnCall+0x10c>)
   1c114:	4798      	blx	r3
}
   1c116:	46c0      	nop			; (mov r8, r8)
   1c118:	46bd      	mov	sp, r7
   1c11a:	b003      	add	sp, #12
   1c11c:	bd90      	pop	{r4, r7, pc}
   1c11e:	46c0      	nop			; (mov r8, r8)
   1c120:	0001b875 	.word	0x0001b875
   1c124:	0001b365 	.word	0x0001b365
   1c128:	20000748 	.word	0x20000748
   1c12c:	20000654 	.word	0x20000654
   1c130:	000149f5 	.word	0x000149f5

0001c134 <voltageOnCall>:

void voltageOnCall(void)
{
   1c134:	b590      	push	{r4, r7, lr}
   1c136:	b087      	sub	sp, #28
   1c138:	af02      	add	r7, sp, #8
	char voltFiles[13];
	//change the below string seq to speak R Y B instead of 0
	sprintf(voltFiles,"]%lu{%lu}%lu",Analog_Parameter_Struct.PhaseRY_Voltage,Analog_Parameter_Struct.PhaseYB_Voltage,Analog_Parameter_Struct.PhaseBR_Voltage);
   1c13a:	4b0a      	ldr	r3, [pc, #40]	; (1c164 <voltageOnCall+0x30>)
   1c13c:	681a      	ldr	r2, [r3, #0]
   1c13e:	4b09      	ldr	r3, [pc, #36]	; (1c164 <voltageOnCall+0x30>)
   1c140:	685c      	ldr	r4, [r3, #4]
   1c142:	4b08      	ldr	r3, [pc, #32]	; (1c164 <voltageOnCall+0x30>)
   1c144:	689b      	ldr	r3, [r3, #8]
   1c146:	4908      	ldr	r1, [pc, #32]	; (1c168 <voltageOnCall+0x34>)
   1c148:	0038      	movs	r0, r7
   1c14a:	9300      	str	r3, [sp, #0]
   1c14c:	0023      	movs	r3, r4
   1c14e:	4c07      	ldr	r4, [pc, #28]	; (1c16c <voltageOnCall+0x38>)
   1c150:	47a0      	blx	r4
	playRepeatedFiles(voltFiles);
   1c152:	003b      	movs	r3, r7
   1c154:	0018      	movs	r0, r3
   1c156:	4b06      	ldr	r3, [pc, #24]	; (1c170 <voltageOnCall+0x3c>)
   1c158:	4798      	blx	r3
}
   1c15a:	46c0      	nop			; (mov r8, r8)
   1c15c:	46bd      	mov	sp, r7
   1c15e:	b005      	add	sp, #20
   1c160:	bd90      	pop	{r4, r7, pc}
   1c162:	46c0      	nop			; (mov r8, r8)
   1c164:	200006e8 	.word	0x200006e8
   1c168:	0002b4e4 	.word	0x0002b4e4
   1c16c:	00029abd 	.word	0x00029abd
   1c170:	000149f5 	.word	0x000149f5

0001c174 <setM2MEventState>:

void setM2MEventState(uint8_t eventNo, uint8_t state)
{
   1c174:	b580      	push	{r7, lr}
   1c176:	b082      	sub	sp, #8
   1c178:	af00      	add	r7, sp, #0
   1c17a:	0002      	movs	r2, r0
   1c17c:	1dfb      	adds	r3, r7, #7
   1c17e:	701a      	strb	r2, [r3, #0]
   1c180:	1dbb      	adds	r3, r7, #6
   1c182:	1c0a      	adds	r2, r1, #0
   1c184:	701a      	strb	r2, [r3, #0]
	if(m2mEvent_arr[eventNo]==ME_SERVICING)
   1c186:	1dfb      	adds	r3, r7, #7
   1c188:	781b      	ldrb	r3, [r3, #0]
   1c18a:	4a0e      	ldr	r2, [pc, #56]	; (1c1c4 <setM2MEventState+0x50>)
   1c18c:	5cd3      	ldrb	r3, [r2, r3]
   1c18e:	2b02      	cmp	r3, #2
   1c190:	d10e      	bne.n	1c1b0 <setM2MEventState+0x3c>
	{
		if(state==ME_NOTAVAILABLE)
   1c192:	1dbb      	adds	r3, r7, #6
   1c194:	781b      	ldrb	r3, [r3, #0]
   1c196:	2b03      	cmp	r3, #3
   1c198:	d10a      	bne.n	1c1b0 <setM2MEventState+0x3c>
		{
			state=ME_CLEARED;
   1c19a:	1dbb      	adds	r3, r7, #6
   1c19c:	2200      	movs	r2, #0
   1c19e:	701a      	strb	r2, [r3, #0]
			simEventTemp[mapTable[eventNo]]=false;	//regsiter relevant Normal Event
   1c1a0:	1dfb      	adds	r3, r7, #7
   1c1a2:	781b      	ldrb	r3, [r3, #0]
   1c1a4:	4a08      	ldr	r2, [pc, #32]	; (1c1c8 <setM2MEventState+0x54>)
   1c1a6:	5cd3      	ldrb	r3, [r2, r3]
   1c1a8:	001a      	movs	r2, r3
   1c1aa:	4b08      	ldr	r3, [pc, #32]	; (1c1cc <setM2MEventState+0x58>)
   1c1ac:	2100      	movs	r1, #0
   1c1ae:	5499      	strb	r1, [r3, r2]
		}
	}
	m2mEvent_arr[eventNo]=state;
   1c1b0:	1dfb      	adds	r3, r7, #7
   1c1b2:	781b      	ldrb	r3, [r3, #0]
   1c1b4:	4a03      	ldr	r2, [pc, #12]	; (1c1c4 <setM2MEventState+0x50>)
   1c1b6:	1db9      	adds	r1, r7, #6
   1c1b8:	7809      	ldrb	r1, [r1, #0]
   1c1ba:	54d1      	strb	r1, [r2, r3]
}
   1c1bc:	46c0      	nop			; (mov r8, r8)
   1c1be:	46bd      	mov	sp, r7
   1c1c0:	b002      	add	sp, #8
   1c1c2:	bd80      	pop	{r7, pc}
   1c1c4:	200007c0 	.word	0x200007c0
   1c1c8:	20000740 	.word	0x20000740
   1c1cc:	20000718 	.word	0x20000718

0001c1d0 <M2MEventManager>:

void M2MEventManager(void)
{
   1c1d0:	b580      	push	{r7, lr}
   1c1d2:	b082      	sub	sp, #8
   1c1d4:	af00      	add	r7, sp, #0
	uint8_t j=2;
   1c1d6:	1dfb      	adds	r3, r7, #7
   1c1d8:	2202      	movs	r2, #2
   1c1da:	701a      	strb	r2, [r3, #0]
	while(j--)
   1c1dc:	e00a      	b.n	1c1f4 <M2MEventManager+0x24>
	{
		if(m2mEvent_arr[j]==ME_WAITREGISTER)
   1c1de:	1dfb      	adds	r3, r7, #7
   1c1e0:	781b      	ldrb	r3, [r3, #0]
   1c1e2:	4a0a      	ldr	r2, [pc, #40]	; (1c20c <M2MEventManager+0x3c>)
   1c1e4:	5cd3      	ldrb	r3, [r2, r3]
   1c1e6:	2b01      	cmp	r3, #1
   1c1e8:	d104      	bne.n	1c1f4 <M2MEventManager+0x24>
		{
			registerM2MEvent(j);
   1c1ea:	1dfb      	adds	r3, r7, #7
   1c1ec:	781b      	ldrb	r3, [r3, #0]
   1c1ee:	0018      	movs	r0, r3
   1c1f0:	4b07      	ldr	r3, [pc, #28]	; (1c210 <M2MEventManager+0x40>)
   1c1f2:	4798      	blx	r3
	while(j--)
   1c1f4:	1dfb      	adds	r3, r7, #7
   1c1f6:	781b      	ldrb	r3, [r3, #0]
   1c1f8:	1dfa      	adds	r2, r7, #7
   1c1fa:	1e59      	subs	r1, r3, #1
   1c1fc:	7011      	strb	r1, [r2, #0]
   1c1fe:	2b00      	cmp	r3, #0
   1c200:	d1ed      	bne.n	1c1de <M2MEventManager+0xe>
		}
	}
}
   1c202:	46c0      	nop			; (mov r8, r8)
   1c204:	46bd      	mov	sp, r7
   1c206:	b002      	add	sp, #8
   1c208:	bd80      	pop	{r7, pc}
   1c20a:	46c0      	nop			; (mov r8, r8)
   1c20c:	200007c0 	.word	0x200007c0
   1c210:	00014c75 	.word	0x00014c75

0001c214 <SIMEventManager>:

void SIMEventManager(void)
{
   1c214:	b590      	push	{r4, r7, lr}
   1c216:	b083      	sub	sp, #12
   1c218:	af00      	add	r7, sp, #0
	uint8_t i = 0;
   1c21a:	1dfb      	adds	r3, r7, #7
   1c21c:	2200      	movs	r2, #0
   1c21e:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_WATER)
   1c220:	4b1e      	ldr	r3, [pc, #120]	; (1c29c <SIMEventManager+0x88>)
   1c222:	795b      	ldrb	r3, [r3, #5]
   1c224:	2b00      	cmp	r3, #0
   1c226:	d00b      	beq.n	1c240 <SIMEventManager+0x2c>
	{
		if (factory_settings_parameter_struct.ENABLE_GP)
   1c228:	4b1c      	ldr	r3, [pc, #112]	; (1c29c <SIMEventManager+0x88>)
   1c22a:	791b      	ldrb	r3, [r3, #4]
   1c22c:	2b00      	cmp	r3, #0
   1c22e:	d003      	beq.n	1c238 <SIMEventManager+0x24>
		{
			i = 19;
   1c230:	1dfb      	adds	r3, r7, #7
   1c232:	2213      	movs	r2, #19
   1c234:	701a      	strb	r2, [r3, #0]
   1c236:	e025      	b.n	1c284 <SIMEventManager+0x70>
		}
		else
		{
			i = 17;
   1c238:	1dfb      	adds	r3, r7, #7
   1c23a:	2211      	movs	r2, #17
   1c23c:	701a      	strb	r2, [r3, #0]
   1c23e:	e021      	b.n	1c284 <SIMEventManager+0x70>
		}
	}
	else
	{
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1c240:	4b16      	ldr	r3, [pc, #88]	; (1c29c <SIMEventManager+0x88>)
   1c242:	785b      	ldrb	r3, [r3, #1]
   1c244:	2b00      	cmp	r3, #0
   1c246:	d003      	beq.n	1c250 <SIMEventManager+0x3c>
		{
			i = 14;
   1c248:	1dfb      	adds	r3, r7, #7
   1c24a:	220e      	movs	r2, #14
   1c24c:	701a      	strb	r2, [r3, #0]
   1c24e:	e019      	b.n	1c284 <SIMEventManager+0x70>
		}
		else
		{
			i = 12;
   1c250:	1dfb      	adds	r3, r7, #7
   1c252:	220c      	movs	r2, #12
   1c254:	701a      	strb	r2, [r3, #0]
		}
	}
	
	while(i--)
   1c256:	e015      	b.n	1c284 <SIMEventManager+0x70>
	{
		if (!simEventTemp[i])
   1c258:	1dfb      	adds	r3, r7, #7
   1c25a:	781b      	ldrb	r3, [r3, #0]
   1c25c:	4a10      	ldr	r2, [pc, #64]	; (1c2a0 <SIMEventManager+0x8c>)
   1c25e:	5cd3      	ldrb	r3, [r2, r3]
   1c260:	2201      	movs	r2, #1
   1c262:	4053      	eors	r3, r2
   1c264:	b2db      	uxtb	r3, r3
   1c266:	2b00      	cmp	r3, #0
   1c268:	d00c      	beq.n	1c284 <SIMEventManager+0x70>
		simEventTemp[i] = registerEvent(simEvent[i]);
   1c26a:	1dfb      	adds	r3, r7, #7
   1c26c:	781c      	ldrb	r4, [r3, #0]
   1c26e:	1dfb      	adds	r3, r7, #7
   1c270:	781b      	ldrb	r3, [r3, #0]
   1c272:	4a0c      	ldr	r2, [pc, #48]	; (1c2a4 <SIMEventManager+0x90>)
   1c274:	5cd3      	ldrb	r3, [r2, r3]
   1c276:	0018      	movs	r0, r3
   1c278:	4b0b      	ldr	r3, [pc, #44]	; (1c2a8 <SIMEventManager+0x94>)
   1c27a:	4798      	blx	r3
   1c27c:	0003      	movs	r3, r0
   1c27e:	001a      	movs	r2, r3
   1c280:	4b07      	ldr	r3, [pc, #28]	; (1c2a0 <SIMEventManager+0x8c>)
   1c282:	551a      	strb	r2, [r3, r4]
	while(i--)
   1c284:	1dfb      	adds	r3, r7, #7
   1c286:	781b      	ldrb	r3, [r3, #0]
   1c288:	1dfa      	adds	r2, r7, #7
   1c28a:	1e59      	subs	r1, r3, #1
   1c28c:	7011      	strb	r1, [r2, #0]
   1c28e:	2b00      	cmp	r3, #0
   1c290:	d1e2      	bne.n	1c258 <SIMEventManager+0x44>
	}
}
   1c292:	46c0      	nop			; (mov r8, r8)
   1c294:	46bd      	mov	sp, r7
   1c296:	b003      	add	sp, #12
   1c298:	bd90      	pop	{r4, r7, pc}
   1c29a:	46c0      	nop			; (mov r8, r8)
   1c29c:	2000062c 	.word	0x2000062c
   1c2a0:	20000718 	.word	0x20000718
   1c2a4:	200007f8 	.word	0x200007f8
   1c2a8:	00014b59 	.word	0x00014b59

0001c2ac <MotorVoltageBypassTimerOver>:

bool MotorVoltageBypassTimerOver(void)
{
   1c2ac:	b580      	push	{r7, lr}
   1c2ae:	af00      	add	r7, sp, #0
	return ((xTaskGetTickCount()-motorVoltageBypassTimerTime) > user_settings_parameter_struct.motorVoltageBypassTime);
   1c2b0:	4b07      	ldr	r3, [pc, #28]	; (1c2d0 <MotorVoltageBypassTimerOver+0x24>)
   1c2b2:	4798      	blx	r3
   1c2b4:	0002      	movs	r2, r0
   1c2b6:	4b07      	ldr	r3, [pc, #28]	; (1c2d4 <MotorVoltageBypassTimerOver+0x28>)
   1c2b8:	681b      	ldr	r3, [r3, #0]
   1c2ba:	1ad2      	subs	r2, r2, r3
   1c2bc:	4b06      	ldr	r3, [pc, #24]	; (1c2d8 <MotorVoltageBypassTimerOver+0x2c>)
   1c2be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c2c0:	4293      	cmp	r3, r2
   1c2c2:	419b      	sbcs	r3, r3
   1c2c4:	425b      	negs	r3, r3
   1c2c6:	b2db      	uxtb	r3, r3
}
   1c2c8:	0018      	movs	r0, r3
   1c2ca:	46bd      	mov	sp, r7
   1c2cc:	bd80      	pop	{r7, pc}
   1c2ce:	46c0      	nop			; (mov r8, r8)
   1c2d0:	000209cd 	.word	0x000209cd
   1c2d4:	20000784 	.word	0x20000784
   1c2d8:	20000654 	.word	0x20000654

0001c2dc <checkCurrentConsumption>:


void checkCurrentConsumption(void)
{
   1c2dc:	b580      	push	{r7, lr}
   1c2de:	b084      	sub	sp, #16
   1c2e0:	af00      	add	r7, sp, #0
	if(startSequenceOn || stopSequenceOn || !getMotorState() || !(user_settings_parameter_struct.currentDetectionAddress) || starDeltaTimerOn)
   1c2e2:	4b6f      	ldr	r3, [pc, #444]	; (1c4a0 <checkCurrentConsumption+0x1c4>)
   1c2e4:	781b      	ldrb	r3, [r3, #0]
   1c2e6:	2b00      	cmp	r3, #0
   1c2e8:	d000      	beq.n	1c2ec <checkCurrentConsumption+0x10>
   1c2ea:	e0d4      	b.n	1c496 <checkCurrentConsumption+0x1ba>
   1c2ec:	4b6d      	ldr	r3, [pc, #436]	; (1c4a4 <checkCurrentConsumption+0x1c8>)
   1c2ee:	781b      	ldrb	r3, [r3, #0]
   1c2f0:	2b00      	cmp	r3, #0
   1c2f2:	d000      	beq.n	1c2f6 <checkCurrentConsumption+0x1a>
   1c2f4:	e0cf      	b.n	1c496 <checkCurrentConsumption+0x1ba>
   1c2f6:	4b6c      	ldr	r3, [pc, #432]	; (1c4a8 <checkCurrentConsumption+0x1cc>)
   1c2f8:	4798      	blx	r3
   1c2fa:	0003      	movs	r3, r0
   1c2fc:	001a      	movs	r2, r3
   1c2fe:	2301      	movs	r3, #1
   1c300:	4053      	eors	r3, r2
   1c302:	b2db      	uxtb	r3, r3
   1c304:	2b00      	cmp	r3, #0
   1c306:	d000      	beq.n	1c30a <checkCurrentConsumption+0x2e>
   1c308:	e0c5      	b.n	1c496 <checkCurrentConsumption+0x1ba>
   1c30a:	4b68      	ldr	r3, [pc, #416]	; (1c4ac <checkCurrentConsumption+0x1d0>)
   1c30c:	7bdb      	ldrb	r3, [r3, #15]
   1c30e:	2b00      	cmp	r3, #0
   1c310:	d100      	bne.n	1c314 <checkCurrentConsumption+0x38>
   1c312:	e0c0      	b.n	1c496 <checkCurrentConsumption+0x1ba>
   1c314:	4b66      	ldr	r3, [pc, #408]	; (1c4b0 <checkCurrentConsumption+0x1d4>)
   1c316:	781b      	ldrb	r3, [r3, #0]
   1c318:	2b00      	cmp	r3, #0
   1c31a:	d000      	beq.n	1c31e <checkCurrentConsumption+0x42>
   1c31c:	e0bb      	b.n	1c496 <checkCurrentConsumption+0x1ba>
	{
		return;
	}
	//|| ((xTaskGetTickCount()-lastCurrentReadingTime)<500))
	
	if(enableCurrentBuffer && xTaskGetTickCount()-tempStartSequenceTimer>30000)
   1c31e:	4b65      	ldr	r3, [pc, #404]	; (1c4b4 <checkCurrentConsumption+0x1d8>)
   1c320:	781b      	ldrb	r3, [r3, #0]
   1c322:	2b00      	cmp	r3, #0
   1c324:	d00b      	beq.n	1c33e <checkCurrentConsumption+0x62>
   1c326:	4b64      	ldr	r3, [pc, #400]	; (1c4b8 <checkCurrentConsumption+0x1dc>)
   1c328:	4798      	blx	r3
   1c32a:	0002      	movs	r2, r0
   1c32c:	4b63      	ldr	r3, [pc, #396]	; (1c4bc <checkCurrentConsumption+0x1e0>)
   1c32e:	681b      	ldr	r3, [r3, #0]
   1c330:	1ad3      	subs	r3, r2, r3
   1c332:	4a63      	ldr	r2, [pc, #396]	; (1c4c0 <checkCurrentConsumption+0x1e4>)
   1c334:	4293      	cmp	r3, r2
   1c336:	d902      	bls.n	1c33e <checkCurrentConsumption+0x62>
	{
		enableCurrentBuffer=false;
   1c338:	4b5e      	ldr	r3, [pc, #376]	; (1c4b4 <checkCurrentConsumption+0x1d8>)
   1c33a:	2200      	movs	r2, #0
   1c33c:	701a      	strb	r2, [r3, #0]
	//{
	//ADCcurrent = Read_ADC0(ADC_POSITIVE_INPUT_PIN16,200);
	//xSemaphoreGive(xADC_Semaphore);
	//}
	
	uint32_t temp=0;
   1c33e:	2300      	movs	r3, #0
   1c340:	60fb      	str	r3, [r7, #12]
	if(user_settings_parameter_struct.over_under_DetectionMethod== MOTOR_UNDEROVER_DETECTION_POWER)
   1c342:	4b5a      	ldr	r3, [pc, #360]	; (1c4ac <checkCurrentConsumption+0x1d0>)
   1c344:	2226      	movs	r2, #38	; 0x26
   1c346:	5c9b      	ldrb	r3, [r3, r2]
   1c348:	2b01      	cmp	r3, #1
   1c34a:	d103      	bne.n	1c354 <checkCurrentConsumption+0x78>
	{
		temp = Analog_Parameter_Struct.Motor_Power;
   1c34c:	4b5d      	ldr	r3, [pc, #372]	; (1c4c4 <checkCurrentConsumption+0x1e8>)
   1c34e:	6a1b      	ldr	r3, [r3, #32]
   1c350:	60fb      	str	r3, [r7, #12]
   1c352:	e002      	b.n	1c35a <checkCurrentConsumption+0x7e>
	}
	else
	{
		temp = Analog_Parameter_Struct.Motor_Current;
   1c354:	4b5b      	ldr	r3, [pc, #364]	; (1c4c4 <checkCurrentConsumption+0x1e8>)
   1c356:	691b      	ldr	r3, [r3, #16]
   1c358:	60fb      	str	r3, [r7, #12]
	}
	
	uint32_t overLoadDetectValue=12000;
   1c35a:	4b5b      	ldr	r3, [pc, #364]	; (1c4c8 <checkCurrentConsumption+0x1ec>)
   1c35c:	60bb      	str	r3, [r7, #8]
	
	uint8_t temp2;
	
	if(enableCurrentBuffer && temp>(user_settings_parameter_struct.normalLoadAddress<<1))    //more than double  <<1 gives mulile of 2 value (double the orignal value)
   1c35e:	4b55      	ldr	r3, [pc, #340]	; (1c4b4 <checkCurrentConsumption+0x1d8>)
   1c360:	781b      	ldrb	r3, [r3, #0]
   1c362:	2b00      	cmp	r3, #0
   1c364:	d00b      	beq.n	1c37e <checkCurrentConsumption+0xa2>
   1c366:	4b51      	ldr	r3, [pc, #324]	; (1c4ac <checkCurrentConsumption+0x1d0>)
   1c368:	691b      	ldr	r3, [r3, #16]
   1c36a:	005a      	lsls	r2, r3, #1
   1c36c:	68fb      	ldr	r3, [r7, #12]
   1c36e:	429a      	cmp	r2, r3
   1c370:	d205      	bcs.n	1c37e <checkCurrentConsumption+0xa2>
	{
		temp2 = CR_OVER2;
   1c372:	1dfb      	adds	r3, r7, #7
   1c374:	2202      	movs	r2, #2
   1c376:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=18000;
   1c378:	4b54      	ldr	r3, [pc, #336]	; (1c4cc <checkCurrentConsumption+0x1f0>)
   1c37a:	60bb      	str	r3, [r7, #8]
   1c37c:	e050      	b.n	1c420 <checkCurrentConsumption+0x144>
	}
	else if(!enableCurrentBuffer && temp>(user_settings_parameter_struct.normalLoadAddress<<1))			//more than double
   1c37e:	4b4d      	ldr	r3, [pc, #308]	; (1c4b4 <checkCurrentConsumption+0x1d8>)
   1c380:	781b      	ldrb	r3, [r3, #0]
   1c382:	2201      	movs	r2, #1
   1c384:	4053      	eors	r3, r2
   1c386:	b2db      	uxtb	r3, r3
   1c388:	2b00      	cmp	r3, #0
   1c38a:	d00c      	beq.n	1c3a6 <checkCurrentConsumption+0xca>
   1c38c:	4b47      	ldr	r3, [pc, #284]	; (1c4ac <checkCurrentConsumption+0x1d0>)
   1c38e:	691b      	ldr	r3, [r3, #16]
   1c390:	005a      	lsls	r2, r3, #1
   1c392:	68fb      	ldr	r3, [r7, #12]
   1c394:	429a      	cmp	r2, r3
   1c396:	d206      	bcs.n	1c3a6 <checkCurrentConsumption+0xca>
	{
		temp2 = CR_OVER;
   1c398:	1dfb      	adds	r3, r7, #7
   1c39a:	2201      	movs	r2, #1
   1c39c:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>2;
   1c39e:	68bb      	ldr	r3, [r7, #8]
   1c3a0:	089b      	lsrs	r3, r3, #2
   1c3a2:	60bb      	str	r3, [r7, #8]
   1c3a4:	e03c      	b.n	1c420 <checkCurrentConsumption+0x144>
	}
	else if(!enableCurrentBuffer && temp> (user_settings_parameter_struct.normalLoadAddress+(user_settings_parameter_struct.normalLoadAddress>>1))) // more than 1.5
   1c3a6:	4b43      	ldr	r3, [pc, #268]	; (1c4b4 <checkCurrentConsumption+0x1d8>)
   1c3a8:	781b      	ldrb	r3, [r3, #0]
   1c3aa:	2201      	movs	r2, #1
   1c3ac:	4053      	eors	r3, r2
   1c3ae:	b2db      	uxtb	r3, r3
   1c3b0:	2b00      	cmp	r3, #0
   1c3b2:	d00f      	beq.n	1c3d4 <checkCurrentConsumption+0xf8>
   1c3b4:	4b3d      	ldr	r3, [pc, #244]	; (1c4ac <checkCurrentConsumption+0x1d0>)
   1c3b6:	691a      	ldr	r2, [r3, #16]
   1c3b8:	4b3c      	ldr	r3, [pc, #240]	; (1c4ac <checkCurrentConsumption+0x1d0>)
   1c3ba:	691b      	ldr	r3, [r3, #16]
   1c3bc:	085b      	lsrs	r3, r3, #1
   1c3be:	18d2      	adds	r2, r2, r3
   1c3c0:	68fb      	ldr	r3, [r7, #12]
   1c3c2:	429a      	cmp	r2, r3
   1c3c4:	d206      	bcs.n	1c3d4 <checkCurrentConsumption+0xf8>
	{
		temp2 = CR_OVER;
   1c3c6:	1dfb      	adds	r3, r7, #7
   1c3c8:	2201      	movs	r2, #1
   1c3ca:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>1;
   1c3cc:	68bb      	ldr	r3, [r7, #8]
   1c3ce:	085b      	lsrs	r3, r3, #1
   1c3d0:	60bb      	str	r3, [r7, #8]
   1c3d2:	e025      	b.n	1c420 <checkCurrentConsumption+0x144>
	}
	else if (!enableCurrentBuffer && temp>user_settings_parameter_struct.overloadAddress)		// more than 1.25 to 1.5
   1c3d4:	4b37      	ldr	r3, [pc, #220]	; (1c4b4 <checkCurrentConsumption+0x1d8>)
   1c3d6:	781b      	ldrb	r3, [r3, #0]
   1c3d8:	2201      	movs	r2, #1
   1c3da:	4053      	eors	r3, r2
   1c3dc:	b2db      	uxtb	r3, r3
   1c3de:	2b00      	cmp	r3, #0
   1c3e0:	d008      	beq.n	1c3f4 <checkCurrentConsumption+0x118>
   1c3e2:	4b32      	ldr	r3, [pc, #200]	; (1c4ac <checkCurrentConsumption+0x1d0>)
   1c3e4:	695a      	ldr	r2, [r3, #20]
   1c3e6:	68fb      	ldr	r3, [r7, #12]
   1c3e8:	429a      	cmp	r2, r3
   1c3ea:	d203      	bcs.n	1c3f4 <checkCurrentConsumption+0x118>
	{
		temp2 = CR_OVER;
   1c3ec:	1dfb      	adds	r3, r7, #7
   1c3ee:	2201      	movs	r2, #1
   1c3f0:	701a      	strb	r2, [r3, #0]
   1c3f2:	e015      	b.n	1c420 <checkCurrentConsumption+0x144>
	}
	else if(!enableCurrentBuffer && temp < user_settings_parameter_struct.underloadAddress)		// only consider noLoad after 30 secs
   1c3f4:	4b2f      	ldr	r3, [pc, #188]	; (1c4b4 <checkCurrentConsumption+0x1d8>)
   1c3f6:	781b      	ldrb	r3, [r3, #0]
   1c3f8:	2201      	movs	r2, #1
   1c3fa:	4053      	eors	r3, r2
   1c3fc:	b2db      	uxtb	r3, r3
   1c3fe:	2b00      	cmp	r3, #0
   1c400:	d00b      	beq.n	1c41a <checkCurrentConsumption+0x13e>
   1c402:	4b2a      	ldr	r3, [pc, #168]	; (1c4ac <checkCurrentConsumption+0x1d0>)
   1c404:	699a      	ldr	r2, [r3, #24]
   1c406:	68fb      	ldr	r3, [r7, #12]
   1c408:	429a      	cmp	r2, r3
   1c40a:	d906      	bls.n	1c41a <checkCurrentConsumption+0x13e>
	{
		temp2 = CR_UNDER;
   1c40c:	1dfb      	adds	r3, r7, #7
   1c40e:	2202      	movs	r2, #2
   1c410:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>2;
   1c412:	68bb      	ldr	r3, [r7, #8]
   1c414:	089b      	lsrs	r3, r3, #2
   1c416:	60bb      	str	r3, [r7, #8]
   1c418:	e002      	b.n	1c420 <checkCurrentConsumption+0x144>
	//temp2 = CR_UNDER;
	//overLoadDetectValue=overLoadDetectValue>>2;
	//}
	else
	{
		temp2= CR_NORMAL;
   1c41a:	1dfb      	adds	r3, r7, #7
   1c41c:	2200      	movs	r2, #0
   1c41e:	701a      	strb	r2, [r3, #0]
	}
	if(lastCurrentReading == temp2)
   1c420:	4b2b      	ldr	r3, [pc, #172]	; (1c4d0 <checkCurrentConsumption+0x1f4>)
   1c422:	781b      	ldrb	r3, [r3, #0]
   1c424:	1dfa      	adds	r2, r7, #7
   1c426:	7812      	ldrb	r2, [r2, #0]
   1c428:	429a      	cmp	r2, r3
   1c42a:	d12a      	bne.n	1c482 <checkCurrentConsumption+0x1a6>
	{
		if(xTaskGetTickCount()-currentEventFilterTempTime>overLoadDetectValue)
   1c42c:	4b22      	ldr	r3, [pc, #136]	; (1c4b8 <checkCurrentConsumption+0x1dc>)
   1c42e:	4798      	blx	r3
   1c430:	0002      	movs	r2, r0
   1c432:	4b28      	ldr	r3, [pc, #160]	; (1c4d4 <checkCurrentConsumption+0x1f8>)
   1c434:	681b      	ldr	r3, [r3, #0]
   1c436:	1ad2      	subs	r2, r2, r3
   1c438:	68bb      	ldr	r3, [r7, #8]
   1c43a:	429a      	cmp	r2, r3
   1c43c:	d92c      	bls.n	1c498 <checkCurrentConsumption+0x1bc>
		{
			if(temp2==CR_OVER)
   1c43e:	1dfb      	adds	r3, r7, #7
   1c440:	781b      	ldrb	r3, [r3, #0]
   1c442:	2b01      	cmp	r3, #1
   1c444:	d10c      	bne.n	1c460 <checkCurrentConsumption+0x184>
			{
				stopMotor(false,true,false);
   1c446:	2200      	movs	r2, #0
   1c448:	2101      	movs	r1, #1
   1c44a:	2000      	movs	r0, #0
   1c44c:	4b22      	ldr	r3, [pc, #136]	; (1c4d8 <checkCurrentConsumption+0x1fc>)
   1c44e:	4798      	blx	r3
				simEventTemp[12] = registerEvent('B');			//register overload Event
   1c450:	2042      	movs	r0, #66	; 0x42
   1c452:	4b22      	ldr	r3, [pc, #136]	; (1c4dc <checkCurrentConsumption+0x200>)
   1c454:	4798      	blx	r3
   1c456:	0003      	movs	r3, r0
   1c458:	001a      	movs	r2, r3
   1c45a:	4b21      	ldr	r3, [pc, #132]	; (1c4e0 <checkCurrentConsumption+0x204>)
   1c45c:	731a      	strb	r2, [r3, #12]
   1c45e:	e01b      	b.n	1c498 <checkCurrentConsumption+0x1bc>
			}
			else if(temp2==CR_UNDER)
   1c460:	1dfb      	adds	r3, r7, #7
   1c462:	781b      	ldrb	r3, [r3, #0]
   1c464:	2b02      	cmp	r3, #2
   1c466:	d117      	bne.n	1c498 <checkCurrentConsumption+0x1bc>
			{
				stopMotor(false,true,false);
   1c468:	2200      	movs	r2, #0
   1c46a:	2101      	movs	r1, #1
   1c46c:	2000      	movs	r0, #0
   1c46e:	4b1a      	ldr	r3, [pc, #104]	; (1c4d8 <checkCurrentConsumption+0x1fc>)
   1c470:	4798      	blx	r3
				simEventTemp[13] = registerEvent('J');			// register Underload Event
   1c472:	204a      	movs	r0, #74	; 0x4a
   1c474:	4b19      	ldr	r3, [pc, #100]	; (1c4dc <checkCurrentConsumption+0x200>)
   1c476:	4798      	blx	r3
   1c478:	0003      	movs	r3, r0
   1c47a:	001a      	movs	r2, r3
   1c47c:	4b18      	ldr	r3, [pc, #96]	; (1c4e0 <checkCurrentConsumption+0x204>)
   1c47e:	735a      	strb	r2, [r3, #13]
   1c480:	e00a      	b.n	1c498 <checkCurrentConsumption+0x1bc>
			}
		}
	}
	else
	{
		currentEventFilterTempTime = xTaskGetTickCount();
   1c482:	4b0d      	ldr	r3, [pc, #52]	; (1c4b8 <checkCurrentConsumption+0x1dc>)
   1c484:	4798      	blx	r3
   1c486:	0002      	movs	r2, r0
   1c488:	4b12      	ldr	r3, [pc, #72]	; (1c4d4 <checkCurrentConsumption+0x1f8>)
   1c48a:	601a      	str	r2, [r3, #0]
		lastCurrentReading=temp2;
   1c48c:	4b10      	ldr	r3, [pc, #64]	; (1c4d0 <checkCurrentConsumption+0x1f4>)
   1c48e:	1dfa      	adds	r2, r7, #7
   1c490:	7812      	ldrb	r2, [r2, #0]
   1c492:	701a      	strb	r2, [r3, #0]
   1c494:	e000      	b.n	1c498 <checkCurrentConsumption+0x1bc>
		return;
   1c496:	46c0      	nop			; (mov r8, r8)
	}
}
   1c498:	46bd      	mov	sp, r7
   1c49a:	b004      	add	sp, #16
   1c49c:	bd80      	pop	{r7, pc}
   1c49e:	46c0      	nop			; (mov r8, r8)
   1c4a0:	20000799 	.word	0x20000799
   1c4a4:	20000788 	.word	0x20000788
   1c4a8:	0001b311 	.word	0x0001b311
   1c4ac:	20000654 	.word	0x20000654
   1c4b0:	2000079b 	.word	0x2000079b
   1c4b4:	20000760 	.word	0x20000760
   1c4b8:	000209cd 	.word	0x000209cd
   1c4bc:	20000794 	.word	0x20000794
   1c4c0:	00007530 	.word	0x00007530
   1c4c4:	200006e8 	.word	0x200006e8
   1c4c8:	00002ee0 	.word	0x00002ee0
   1c4cc:	00004650 	.word	0x00004650
   1c4d0:	2000077e 	.word	0x2000077e
   1c4d4:	2000076c 	.word	0x2000076c
   1c4d8:	0001bbe1 	.word	0x0001bbe1
   1c4dc:	00014b59 	.word	0x00014b59
   1c4e0:	20000718 	.word	0x20000718

0001c4e4 <button_detect_pin_callback>:

static void button_detect_pin_callback(void)
{
   1c4e4:	b580      	push	{r7, lr}
   1c4e6:	af00      	add	r7, sp, #0
	buttonEventOccured = true;
   1c4e8:	4b02      	ldr	r3, [pc, #8]	; (1c4f4 <button_detect_pin_callback+0x10>)
   1c4ea:	2201      	movs	r2, #1
   1c4ec:	701a      	strb	r2, [r3, #0]
	//	xTaskNotifyGive(fiftymsTask);
}
   1c4ee:	46c0      	nop			; (mov r8, r8)
   1c4f0:	46bd      	mov	sp, r7
   1c4f2:	bd80      	pop	{r7, pc}
   1c4f4:	2000079f 	.word	0x2000079f

0001c4f8 <vTask_MOTORCONTROL>:

static void vTask_MOTORCONTROL(void *params)
{
   1c4f8:	b590      	push	{r4, r7, lr}
   1c4fa:	b087      	sub	sp, #28
   1c4fc:	af00      	add	r7, sp, #0
   1c4fe:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	
	Configure_ADC0();
   1c500:	4bd1      	ldr	r3, [pc, #836]	; (1c848 <vTask_MOTORCONTROL+0x350>)
   1c502:	4798      	blx	r3
	
	configure_ac();
   1c504:	4bd1      	ldr	r3, [pc, #836]	; (1c84c <vTask_MOTORCONTROL+0x354>)
   1c506:	4798      	blx	r3
	configure_rtc();
   1c508:	4bd1      	ldr	r3, [pc, #836]	; (1c850 <vTask_MOTORCONTROL+0x358>)
   1c50a:	4798      	blx	r3
	configure_event();
   1c50c:	4bd1      	ldr	r3, [pc, #836]	; (1c854 <vTask_MOTORCONTROL+0x35c>)
   1c50e:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	gotOffCommand = false;
   1c510:	4bd1      	ldr	r3, [pc, #836]	; (1c858 <vTask_MOTORCONTROL+0x360>)
   1c512:	2200      	movs	r2, #0
   1c514:	701a      	strb	r2, [r3, #0]
	gotOnCommand = false;
   1c516:	4bd1      	ldr	r3, [pc, #836]	; (1c85c <vTask_MOTORCONTROL+0x364>)
   1c518:	2200      	movs	r2, #0
   1c51a:	701a      	strb	r2, [r3, #0]

	//////////////////////////////////////////////////////////////////////////
	eventOccured = false;
   1c51c:	4bd0      	ldr	r3, [pc, #832]	; (1c860 <vTask_MOTORCONTROL+0x368>)
   1c51e:	2200      	movs	r2, #0
   1c520:	701a      	strb	r2, [r3, #0]
	
	uint8_t last_comparison = AC_CHAN_STATUS_UNKNOWN;
   1c522:	2315      	movs	r3, #21
   1c524:	18fb      	adds	r3, r7, r3
   1c526:	2201      	movs	r2, #1
   1c528:	701a      	strb	r2, [r3, #0]
	
	//sets the variable to store current ticks, so that we can delay first event operation
	uint32_t delayForFirstEvent = xTaskGetTickCount();
   1c52a:	4bce      	ldr	r3, [pc, #824]	; (1c864 <vTask_MOTORCONTROL+0x36c>)
   1c52c:	4798      	blx	r3
   1c52e:	0003      	movs	r3, r0
   1c530:	613b      	str	r3, [r7, #16]
	firstEvent = true;
   1c532:	4bcd      	ldr	r3, [pc, #820]	; (1c868 <vTask_MOTORCONTROL+0x370>)
   1c534:	2201      	movs	r2, #1
   1c536:	701a      	strb	r2, [r3, #0]
	
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0);
   1c538:	2315      	movs	r3, #21
   1c53a:	18fc      	adds	r4, r7, r3
   1c53c:	4bcb      	ldr	r3, [pc, #812]	; (1c86c <vTask_MOTORCONTROL+0x374>)
   1c53e:	2100      	movs	r1, #0
   1c540:	0018      	movs	r0, r3
   1c542:	4bcb      	ldr	r3, [pc, #812]	; (1c870 <vTask_MOTORCONTROL+0x378>)
   1c544:	4798      	blx	r3
   1c546:	0003      	movs	r3, r0
   1c548:	7023      	strb	r3, [r4, #0]
	vTaskDelay(500/portTICK_PERIOD_MS);
   1c54a:	23fa      	movs	r3, #250	; 0xfa
   1c54c:	005b      	lsls	r3, r3, #1
   1c54e:	0018      	movs	r0, r3
   1c550:	4bc8      	ldr	r3, [pc, #800]	; (1c874 <vTask_MOTORCONTROL+0x37c>)
   1c552:	4798      	blx	r3
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0); //read again
   1c554:	2315      	movs	r3, #21
   1c556:	18fc      	adds	r4, r7, r3
   1c558:	4bc4      	ldr	r3, [pc, #784]	; (1c86c <vTask_MOTORCONTROL+0x374>)
   1c55a:	2100      	movs	r1, #0
   1c55c:	0018      	movs	r0, r3
   1c55e:	4bc4      	ldr	r3, [pc, #784]	; (1c870 <vTask_MOTORCONTROL+0x378>)
   1c560:	4798      	blx	r3
   1c562:	0003      	movs	r3, r0
   1c564:	7023      	strb	r3, [r4, #0]
	
	if (last_comparison & AC_CHAN_STATUS_POS_ABOVE_NEG)
   1c566:	2315      	movs	r3, #21
   1c568:	18fb      	adds	r3, r7, r3
   1c56a:	781b      	ldrb	r3, [r3, #0]
   1c56c:	2204      	movs	r2, #4
   1c56e:	4013      	ands	r3, r2
   1c570:	d003      	beq.n	1c57a <vTask_MOTORCONTROL+0x82>
	{
		isACpowerAvailable = true;
   1c572:	4bc1      	ldr	r3, [pc, #772]	; (1c878 <vTask_MOTORCONTROL+0x380>)
   1c574:	2201      	movs	r2, #1
   1c576:	701a      	strb	r2, [r3, #0]
   1c578:	e002      	b.n	1c580 <vTask_MOTORCONTROL+0x88>
	}
	else
	{
		isACpowerAvailable = false;
   1c57a:	4bbf      	ldr	r3, [pc, #764]	; (1c878 <vTask_MOTORCONTROL+0x380>)
   1c57c:	2200      	movs	r2, #0
   1c57e:	701a      	strb	r2, [r3, #0]
	}
	
	current_three_phase_state = AC_OFF;
   1c580:	4bbe      	ldr	r3, [pc, #760]	; (1c87c <vTask_MOTORCONTROL+0x384>)
   1c582:	2200      	movs	r2, #0
   1c584:	701a      	strb	r2, [r3, #0]
	//////////////////////////////////////////////////////////////////////////
	
	startTimerOn = false;
   1c586:	4bbe      	ldr	r3, [pc, #760]	; (1c880 <vTask_MOTORCONTROL+0x388>)
   1c588:	2200      	movs	r2, #0
   1c58a:	701a      	strb	r2, [r3, #0]

	singlePhasingTime = 6;
   1c58c:	4bbd      	ldr	r3, [pc, #756]	; (1c884 <vTask_MOTORCONTROL+0x38c>)
   1c58e:	2206      	movs	r2, #6
   1c590:	701a      	strb	r2, [r3, #0]
	singlePhasingTimerOn = false;
   1c592:	4bbd      	ldr	r3, [pc, #756]	; (1c888 <vTask_MOTORCONTROL+0x390>)
   1c594:	2200      	movs	r2, #0
   1c596:	701a      	strb	r2, [r3, #0]

	startSequenceTimerTime = 20;
   1c598:	4bbc      	ldr	r3, [pc, #752]	; (1c88c <vTask_MOTORCONTROL+0x394>)
   1c59a:	2214      	movs	r2, #20
   1c59c:	701a      	strb	r2, [r3, #0]
	starDeltaTimerOn=false;
   1c59e:	4bbc      	ldr	r3, [pc, #752]	; (1c890 <vTask_MOTORCONTROL+0x398>)
   1c5a0:	2200      	movs	r2, #0
   1c5a2:	701a      	strb	r2, [r3, #0]
	startSequenceOn = false;
   1c5a4:	4bbb      	ldr	r3, [pc, #748]	; (1c894 <vTask_MOTORCONTROL+0x39c>)
   1c5a6:	2200      	movs	r2, #0
   1c5a8:	701a      	strb	r2, [r3, #0]

	stopSequenceTimerTime = 20;
   1c5aa:	4bbb      	ldr	r3, [pc, #748]	; (1c898 <vTask_MOTORCONTROL+0x3a0>)
   1c5ac:	2214      	movs	r2, #20
   1c5ae:	701a      	strb	r2, [r3, #0]
	stopSequenceOn = false;
   1c5b0:	4bba      	ldr	r3, [pc, #744]	; (1c89c <vTask_MOTORCONTROL+0x3a4>)
   1c5b2:	2200      	movs	r2, #0
   1c5b4:	701a      	strb	r2, [r3, #0]
	
	setAllPhaseState(false); // allPhase = false;
   1c5b6:	2000      	movs	r0, #0
   1c5b8:	4bb9      	ldr	r3, [pc, #740]	; (1c8a0 <vTask_MOTORCONTROL+0x3a8>)
   1c5ba:	4798      	blx	r3
	setMotorState(false);// mFeedback = false;
   1c5bc:	2000      	movs	r0, #0
   1c5be:	4bb9      	ldr	r3, [pc, #740]	; (1c8a4 <vTask_MOTORCONTROL+0x3ac>)
   1c5c0:	4798      	blx	r3
	setACPowerState(false);//  phaseAC = false;
   1c5c2:	2000      	movs	r0, #0
   1c5c4:	4bb8      	ldr	r3, [pc, #736]	; (1c8a8 <vTask_MOTORCONTROL+0x3b0>)
   1c5c6:	4798      	blx	r3

	initPhaseRMStruct(&struct_rmsRY);
   1c5c8:	4bb8      	ldr	r3, [pc, #736]	; (1c8ac <vTask_MOTORCONTROL+0x3b4>)
   1c5ca:	0018      	movs	r0, r3
   1c5cc:	4bb8      	ldr	r3, [pc, #736]	; (1c8b0 <vTask_MOTORCONTROL+0x3b8>)
   1c5ce:	4798      	blx	r3
	initPhaseRMStruct(&struct_rmsYB);
   1c5d0:	4bb8      	ldr	r3, [pc, #736]	; (1c8b4 <vTask_MOTORCONTROL+0x3bc>)
   1c5d2:	0018      	movs	r0, r3
   1c5d4:	4bb6      	ldr	r3, [pc, #728]	; (1c8b0 <vTask_MOTORCONTROL+0x3b8>)
   1c5d6:	4798      	blx	r3
	initPhaseRMStruct(&struct_rmsBR);
   1c5d8:	4bb7      	ldr	r3, [pc, #732]	; (1c8b8 <vTask_MOTORCONTROL+0x3c0>)
   1c5da:	0018      	movs	r0, r3
   1c5dc:	4bb4      	ldr	r3, [pc, #720]	; (1c8b0 <vTask_MOTORCONTROL+0x3b8>)
   1c5de:	4798      	blx	r3
	
	lastPressTime=0;
   1c5e0:	4bb6      	ldr	r3, [pc, #728]	; (1c8bc <vTask_MOTORCONTROL+0x3c4>)
   1c5e2:	2200      	movs	r2, #0
   1c5e4:	601a      	str	r2, [r3, #0]
	lastButtonEvent=0;
   1c5e6:	4bb6      	ldr	r3, [pc, #728]	; (1c8c0 <vTask_MOTORCONTROL+0x3c8>)
   1c5e8:	2200      	movs	r2, #0
   1c5ea:	701a      	strb	r2, [r3, #0]

	motorRelatedVoltageBypassOn=false;
   1c5ec:	4bb5      	ldr	r3, [pc, #724]	; (1c8c4 <vTask_MOTORCONTROL+0x3cc>)
   1c5ee:	2200      	movs	r2, #0
   1c5f0:	701a      	strb	r2, [r3, #0]
	motorVoltageBypassTimerTime= 0;
   1c5f2:	4bb5      	ldr	r3, [pc, #724]	; (1c8c8 <vTask_MOTORCONTROL+0x3d0>)
   1c5f4:	2200      	movs	r2, #0
   1c5f6:	601a      	str	r2, [r3, #0]
	
	uint8_t i= 0;
   1c5f8:	2317      	movs	r3, #23
   1c5fa:	18fb      	adds	r3, r7, r3
   1c5fc:	2200      	movs	r2, #0
   1c5fe:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1c600:	4bb2      	ldr	r3, [pc, #712]	; (1c8cc <vTask_MOTORCONTROL+0x3d4>)
   1c602:	785b      	ldrb	r3, [r3, #1]
   1c604:	2b00      	cmp	r3, #0
   1c606:	d004      	beq.n	1c612 <vTask_MOTORCONTROL+0x11a>
	{
		i=14;
   1c608:	2317      	movs	r3, #23
   1c60a:	18fb      	adds	r3, r7, r3
   1c60c:	220e      	movs	r2, #14
   1c60e:	701a      	strb	r2, [r3, #0]
   1c610:	e00a      	b.n	1c628 <vTask_MOTORCONTROL+0x130>
	}
	else
	{
		i = 12;
   1c612:	2317      	movs	r3, #23
   1c614:	18fb      	adds	r3, r7, r3
   1c616:	220c      	movs	r2, #12
   1c618:	701a      	strb	r2, [r3, #0]
	}
	while(i--)
   1c61a:	e005      	b.n	1c628 <vTask_MOTORCONTROL+0x130>
	{
		simEventTemp[i] = true;
   1c61c:	2317      	movs	r3, #23
   1c61e:	18fb      	adds	r3, r7, r3
   1c620:	781b      	ldrb	r3, [r3, #0]
   1c622:	4aab      	ldr	r2, [pc, #684]	; (1c8d0 <vTask_MOTORCONTROL+0x3d8>)
   1c624:	2101      	movs	r1, #1
   1c626:	54d1      	strb	r1, [r2, r3]
	while(i--)
   1c628:	2317      	movs	r3, #23
   1c62a:	18fb      	adds	r3, r7, r3
   1c62c:	781b      	ldrb	r3, [r3, #0]
   1c62e:	2217      	movs	r2, #23
   1c630:	18ba      	adds	r2, r7, r2
   1c632:	1e59      	subs	r1, r3, #1
   1c634:	7011      	strb	r1, [r2, #0]
   1c636:	2b00      	cmp	r3, #0
   1c638:	d1f0      	bne.n	1c61c <vTask_MOTORCONTROL+0x124>
	}
	simEvent[0] = 'N';
   1c63a:	4ba6      	ldr	r3, [pc, #664]	; (1c8d4 <vTask_MOTORCONTROL+0x3dc>)
   1c63c:	224e      	movs	r2, #78	; 0x4e
   1c63e:	701a      	strb	r2, [r3, #0]
	simEvent[1] = 'P';
   1c640:	4ba4      	ldr	r3, [pc, #656]	; (1c8d4 <vTask_MOTORCONTROL+0x3dc>)
   1c642:	2250      	movs	r2, #80	; 0x50
   1c644:	705a      	strb	r2, [r3, #1]
	simEvent[2] = '_';					//chnage the recording when playing from flash, as sim800c does not have enough space right now.
   1c646:	4ba3      	ldr	r3, [pc, #652]	; (1c8d4 <vTask_MOTORCONTROL+0x3dc>)
   1c648:	225f      	movs	r2, #95	; 0x5f
   1c64a:	709a      	strb	r2, [r3, #2]
	simEvent[3] = 'F';
   1c64c:	4ba1      	ldr	r3, [pc, #644]	; (1c8d4 <vTask_MOTORCONTROL+0x3dc>)
   1c64e:	2246      	movs	r2, #70	; 0x46
   1c650:	70da      	strb	r2, [r3, #3]
	simEvent[4] = 'G';
   1c652:	4ba0      	ldr	r3, [pc, #640]	; (1c8d4 <vTask_MOTORCONTROL+0x3dc>)
   1c654:	2247      	movs	r2, #71	; 0x47
   1c656:	711a      	strb	r2, [r3, #4]
	simEvent[5] = 'L';
   1c658:	4b9e      	ldr	r3, [pc, #632]	; (1c8d4 <vTask_MOTORCONTROL+0x3dc>)
   1c65a:	224c      	movs	r2, #76	; 0x4c
   1c65c:	715a      	strb	r2, [r3, #5]
	simEvent[6] = 'C';
   1c65e:	4b9d      	ldr	r3, [pc, #628]	; (1c8d4 <vTask_MOTORCONTROL+0x3dc>)
   1c660:	2243      	movs	r2, #67	; 0x43
   1c662:	719a      	strb	r2, [r3, #6]
	simEvent[7] = 'S';
   1c664:	4b9b      	ldr	r3, [pc, #620]	; (1c8d4 <vTask_MOTORCONTROL+0x3dc>)
   1c666:	2253      	movs	r2, #83	; 0x53
   1c668:	71da      	strb	r2, [r3, #7]
	simEvent[8] = 'O';
   1c66a:	4b9a      	ldr	r3, [pc, #616]	; (1c8d4 <vTask_MOTORCONTROL+0x3dc>)
   1c66c:	224f      	movs	r2, #79	; 0x4f
   1c66e:	721a      	strb	r2, [r3, #8]
	simEvent[9] = 'A';
   1c670:	4b98      	ldr	r3, [pc, #608]	; (1c8d4 <vTask_MOTORCONTROL+0x3dc>)
   1c672:	2241      	movs	r2, #65	; 0x41
   1c674:	725a      	strb	r2, [r3, #9]

	simEvent[10] = ')';		//AUTO ON EVENT
   1c676:	4b97      	ldr	r3, [pc, #604]	; (1c8d4 <vTask_MOTORCONTROL+0x3dc>)
   1c678:	2229      	movs	r2, #41	; 0x29
   1c67a:	729a      	strb	r2, [r3, #10]
	simEvent[11] = '[';		//AUTO OFF EVENT
   1c67c:	4b95      	ldr	r3, [pc, #596]	; (1c8d4 <vTask_MOTORCONTROL+0x3dc>)
   1c67e:	225b      	movs	r2, #91	; 0x5b
   1c680:	72da      	strb	r2, [r3, #11]
	
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1c682:	4b92      	ldr	r3, [pc, #584]	; (1c8cc <vTask_MOTORCONTROL+0x3d4>)
   1c684:	785b      	ldrb	r3, [r3, #1]
   1c686:	2b00      	cmp	r3, #0
   1c688:	d005      	beq.n	1c696 <vTask_MOTORCONTROL+0x19e>
	{
		simEvent[12] = 'B';		//Overload Event
   1c68a:	4b92      	ldr	r3, [pc, #584]	; (1c8d4 <vTask_MOTORCONTROL+0x3dc>)
   1c68c:	2242      	movs	r2, #66	; 0x42
   1c68e:	731a      	strb	r2, [r3, #12]
		simEvent[13] = 'J';		//Underload EVENT
   1c690:	4b90      	ldr	r3, [pc, #576]	; (1c8d4 <vTask_MOTORCONTROL+0x3dc>)
   1c692:	224a      	movs	r2, #74	; 0x4a
   1c694:	735a      	strb	r2, [r3, #13]
	}
	//////////////////////////////////////////////////////////////////////////
	
	resetAutoStart(true);
   1c696:	2001      	movs	r0, #1
   1c698:	4b8f      	ldr	r3, [pc, #572]	; (1c8d8 <vTask_MOTORCONTROL+0x3e0>)
   1c69a:	4798      	blx	r3
	eventOccured=true;
   1c69c:	4b70      	ldr	r3, [pc, #448]	; (1c860 <vTask_MOTORCONTROL+0x368>)
   1c69e:	2201      	movs	r2, #1
   1c6a0:	701a      	strb	r2, [r3, #0]
	//port_pin_set_config(PIN_PA10, &adc_pin_config);
	//port_pin_set_config(PIN_PA11, &adc_pin_config);
	
	for (;;)
	{
		xSemaphoreTake(xButton_Semaphore, portMAX_DELAY);
   1c6a2:	4b8e      	ldr	r3, [pc, #568]	; (1c8dc <vTask_MOTORCONTROL+0x3e4>)
   1c6a4:	681a      	ldr	r2, [r3, #0]
   1c6a6:	2301      	movs	r3, #1
   1c6a8:	425b      	negs	r3, r3
   1c6aa:	0019      	movs	r1, r3
   1c6ac:	0010      	movs	r0, r2
   1c6ae:	4b8c      	ldr	r3, [pc, #560]	; (1c8e0 <vTask_MOTORCONTROL+0x3e8>)
   1c6b0:	4798      	blx	r3
		if(taskPSet)
   1c6b2:	4b8c      	ldr	r3, [pc, #560]	; (1c8e4 <vTask_MOTORCONTROL+0x3ec>)
   1c6b4:	781b      	ldrb	r3, [r3, #0]
   1c6b6:	b2db      	uxtb	r3, r3
   1c6b8:	2b00      	cmp	r3, #0
   1c6ba:	d006      	beq.n	1c6ca <vTask_MOTORCONTROL+0x1d2>
		{
			vTaskPrioritySet(NULL,1);
   1c6bc:	2101      	movs	r1, #1
   1c6be:	2000      	movs	r0, #0
   1c6c0:	4b89      	ldr	r3, [pc, #548]	; (1c8e8 <vTask_MOTORCONTROL+0x3f0>)
   1c6c2:	4798      	blx	r3
			taskPSet=false;
   1c6c4:	4b87      	ldr	r3, [pc, #540]	; (1c8e4 <vTask_MOTORCONTROL+0x3ec>)
   1c6c6:	2200      	movs	r2, #0
   1c6c8:	701a      	strb	r2, [r3, #0]
		}
		xSemaphoreGive(xButton_Semaphore);
   1c6ca:	4b84      	ldr	r3, [pc, #528]	; (1c8dc <vTask_MOTORCONTROL+0x3e4>)
   1c6cc:	6818      	ldr	r0, [r3, #0]
   1c6ce:	2300      	movs	r3, #0
   1c6d0:	2200      	movs	r2, #0
   1c6d2:	2100      	movs	r1, #0
   1c6d4:	4c85      	ldr	r4, [pc, #532]	; (1c8ec <vTask_MOTORCONTROL+0x3f4>)
   1c6d6:	47a0      	blx	r4
		
		if(!startSequenceOn && !stopSequenceOn)
   1c6d8:	4b6e      	ldr	r3, [pc, #440]	; (1c894 <vTask_MOTORCONTROL+0x39c>)
   1c6da:	781b      	ldrb	r3, [r3, #0]
   1c6dc:	2201      	movs	r2, #1
   1c6de:	4053      	eors	r3, r2
   1c6e0:	b2db      	uxtb	r3, r3
   1c6e2:	2b00      	cmp	r3, #0
   1c6e4:	d04b      	beq.n	1c77e <vTask_MOTORCONTROL+0x286>
   1c6e6:	4b6d      	ldr	r3, [pc, #436]	; (1c89c <vTask_MOTORCONTROL+0x3a4>)
   1c6e8:	781b      	ldrb	r3, [r3, #0]
   1c6ea:	2201      	movs	r2, #1
   1c6ec:	4053      	eors	r3, r2
   1c6ee:	b2db      	uxtb	r3, r3
   1c6f0:	2b00      	cmp	r3, #0
   1c6f2:	d044      	beq.n	1c77e <vTask_MOTORCONTROL+0x286>
		{
			uint8_t tempEventOccured=eventOccured;
   1c6f4:	4b5a      	ldr	r3, [pc, #360]	; (1c860 <vTask_MOTORCONTROL+0x368>)
   1c6f6:	781b      	ldrb	r3, [r3, #0]
   1c6f8:	b2da      	uxtb	r2, r3
   1c6fa:	230f      	movs	r3, #15
   1c6fc:	18fb      	adds	r3, r7, r3
   1c6fe:	701a      	strb	r2, [r3, #0]
			uint8_t tempButtonEventOccured=buttonEventOccured;
   1c700:	4b7b      	ldr	r3, [pc, #492]	; (1c8f0 <vTask_MOTORCONTROL+0x3f8>)
   1c702:	781b      	ldrb	r3, [r3, #0]
   1c704:	b2da      	uxtb	r2, r3
   1c706:	230e      	movs	r3, #14
   1c708:	18fb      	adds	r3, r7, r3
   1c70a:	701a      	strb	r2, [r3, #0]
			
			
			if(tempEventOccured)
   1c70c:	230f      	movs	r3, #15
   1c70e:	18fb      	adds	r3, r7, r3
   1c710:	781b      	ldrb	r3, [r3, #0]
   1c712:	2b00      	cmp	r3, #0
   1c714:	d02c      	beq.n	1c770 <vTask_MOTORCONTROL+0x278>
			{
				if(firstEvent)
   1c716:	4b54      	ldr	r3, [pc, #336]	; (1c868 <vTask_MOTORCONTROL+0x370>)
   1c718:	781b      	ldrb	r3, [r3, #0]
   1c71a:	b2db      	uxtb	r3, r3
   1c71c:	2b00      	cmp	r3, #0
   1c71e:	d010      	beq.n	1c742 <vTask_MOTORCONTROL+0x24a>
				{
					if((xTaskGetTickCount()-delayForFirstEvent>35000L) || boolGsm_config_flag)
   1c720:	4b50      	ldr	r3, [pc, #320]	; (1c864 <vTask_MOTORCONTROL+0x36c>)
   1c722:	4798      	blx	r3
   1c724:	0002      	movs	r2, r0
   1c726:	693b      	ldr	r3, [r7, #16]
   1c728:	1ad3      	subs	r3, r2, r3
   1c72a:	4a72      	ldr	r2, [pc, #456]	; (1c8f4 <vTask_MOTORCONTROL+0x3fc>)
   1c72c:	4293      	cmp	r3, r2
   1c72e:	d804      	bhi.n	1c73a <vTask_MOTORCONTROL+0x242>
   1c730:	4b71      	ldr	r3, [pc, #452]	; (1c8f8 <vTask_MOTORCONTROL+0x400>)
   1c732:	781b      	ldrb	r3, [r3, #0]
   1c734:	b2db      	uxtb	r3, r3
   1c736:	2b00      	cmp	r3, #0
   1c738:	d01a      	beq.n	1c770 <vTask_MOTORCONTROL+0x278>
					{
						firstEvent = false;
   1c73a:	4b4b      	ldr	r3, [pc, #300]	; (1c868 <vTask_MOTORCONTROL+0x370>)
   1c73c:	2200      	movs	r2, #0
   1c73e:	701a      	strb	r2, [r3, #0]
   1c740:	e016      	b.n	1c770 <vTask_MOTORCONTROL+0x278>
					}
				}
				else
				{
					
					if(motorFeedbackEvent)
   1c742:	4b6e      	ldr	r3, [pc, #440]	; (1c8fc <vTask_MOTORCONTROL+0x404>)
   1c744:	781b      	ldrb	r3, [r3, #0]
   1c746:	b2db      	uxtb	r3, r3
   1c748:	2b00      	cmp	r3, #0
   1c74a:	d00f      	beq.n	1c76c <vTask_MOTORCONTROL+0x274>
					{
						if((xTaskGetTickCount()-motorFeedbackEventTime>1800))
   1c74c:	4b45      	ldr	r3, [pc, #276]	; (1c864 <vTask_MOTORCONTROL+0x36c>)
   1c74e:	4798      	blx	r3
   1c750:	0002      	movs	r2, r0
   1c752:	4b6b      	ldr	r3, [pc, #428]	; (1c900 <vTask_MOTORCONTROL+0x408>)
   1c754:	681b      	ldr	r3, [r3, #0]
   1c756:	1ad2      	subs	r2, r2, r3
   1c758:	23e1      	movs	r3, #225	; 0xe1
   1c75a:	00db      	lsls	r3, r3, #3
   1c75c:	429a      	cmp	r2, r3
   1c75e:	d907      	bls.n	1c770 <vTask_MOTORCONTROL+0x278>
						{
							motorFeedbackEvent=false;
   1c760:	4b66      	ldr	r3, [pc, #408]	; (1c8fc <vTask_MOTORCONTROL+0x404>)
   1c762:	2200      	movs	r2, #0
   1c764:	701a      	strb	r2, [r3, #0]
							operateOnEvent();
   1c766:	4b67      	ldr	r3, [pc, #412]	; (1c904 <vTask_MOTORCONTROL+0x40c>)
   1c768:	4798      	blx	r3
   1c76a:	e001      	b.n	1c770 <vTask_MOTORCONTROL+0x278>
						}
					}
					else
					{
						operateOnEvent();
   1c76c:	4b65      	ldr	r3, [pc, #404]	; (1c904 <vTask_MOTORCONTROL+0x40c>)
   1c76e:	4798      	blx	r3
			//if(tempButtonEventOccured)
			//{
			//operateOnButtonEvent();
			//}
			
			if(lastButtonEvent)
   1c770:	4b53      	ldr	r3, [pc, #332]	; (1c8c0 <vTask_MOTORCONTROL+0x3c8>)
   1c772:	781b      	ldrb	r3, [r3, #0]
   1c774:	b2db      	uxtb	r3, r3
   1c776:	2b00      	cmp	r3, #0
   1c778:	d001      	beq.n	1c77e <vTask_MOTORCONTROL+0x286>
			{
				buttonFilter();
   1c77a:	4b63      	ldr	r3, [pc, #396]	; (1c908 <vTask_MOTORCONTROL+0x410>)
   1c77c:	4798      	blx	r3
			}
		}
		//// check if it is the time for new Voltage reading and if so than get new Voltage Reading.
		if(should_Detect_New_Voltage()) {
   1c77e:	4b63      	ldr	r3, [pc, #396]	; (1c90c <vTask_MOTORCONTROL+0x414>)
   1c780:	4798      	blx	r3
   1c782:	1e03      	subs	r3, r0, #0
   1c784:	d003      	beq.n	1c78e <vTask_MOTORCONTROL+0x296>
					detect_battery_voltage_and_percentage();
   1c786:	4b62      	ldr	r3, [pc, #392]	; (1c910 <vTask_MOTORCONTROL+0x418>)
   1c788:	4798      	blx	r3
					detect_Three_Phase_Voltage();
   1c78a:	4b62      	ldr	r3, [pc, #392]	; (1c914 <vTask_MOTORCONTROL+0x41c>)
   1c78c:	4798      	blx	r3
		}
		////////
		
		// To check if new reading of motor current is needed, and get new reading, and update in Analog_Parameter_Struct
		
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1c78e:	4b4f      	ldr	r3, [pc, #316]	; (1c8cc <vTask_MOTORCONTROL+0x3d4>)
   1c790:	785b      	ldrb	r3, [r3, #1]
   1c792:	2b00      	cmp	r3, #0
   1c794:	d013      	beq.n	1c7be <vTask_MOTORCONTROL+0x2c6>
		{
			if(should_Detect_New_Current()) {
   1c796:	4b60      	ldr	r3, [pc, #384]	; (1c918 <vTask_MOTORCONTROL+0x420>)
   1c798:	4798      	blx	r3
   1c79a:	1e03      	subs	r3, r0, #0
   1c79c:	d00f      	beq.n	1c7be <vTask_MOTORCONTROL+0x2c6>
				detect_Motor_Current();
   1c79e:	4b5f      	ldr	r3, [pc, #380]	; (1c91c <vTask_MOTORCONTROL+0x424>)
   1c7a0:	4798      	blx	r3
				if (user_settings_parameter_struct.detectMotorFeedback== MOTORFEEDBACK_DETECTION_CURRENT)
   1c7a2:	4b5f      	ldr	r3, [pc, #380]	; (1c920 <vTask_MOTORCONTROL+0x428>)
   1c7a4:	2225      	movs	r2, #37	; 0x25
   1c7a6:	5c9b      	ldrb	r3, [r3, r2]
   1c7a8:	2b01      	cmp	r3, #1
   1c7aa:	d106      	bne.n	1c7ba <vTask_MOTORCONTROL+0x2c2>
				{
					if(detectMotorStateChangeUsingCurrent())
   1c7ac:	4b5d      	ldr	r3, [pc, #372]	; (1c924 <vTask_MOTORCONTROL+0x42c>)
   1c7ae:	4798      	blx	r3
   1c7b0:	1e03      	subs	r3, r0, #0
   1c7b2:	d002      	beq.n	1c7ba <vTask_MOTORCONTROL+0x2c2>
					{
						eventOccured=true;
   1c7b4:	4b2a      	ldr	r3, [pc, #168]	; (1c860 <vTask_MOTORCONTROL+0x368>)
   1c7b6:	2201      	movs	r2, #1
   1c7b8:	701a      	strb	r2, [r3, #0]
					}
				}
				
				checkCurrentConsumption();
   1c7ba:	4b5b      	ldr	r3, [pc, #364]	; (1c928 <vTask_MOTORCONTROL+0x430>)
   1c7bc:	4798      	blx	r3
			}
		}
		///////
		if (waitStableLineOn && waitStableLineOver())
   1c7be:	4b5b      	ldr	r3, [pc, #364]	; (1c92c <vTask_MOTORCONTROL+0x434>)
   1c7c0:	781b      	ldrb	r3, [r3, #0]
   1c7c2:	2b00      	cmp	r3, #0
   1c7c4:	d005      	beq.n	1c7d2 <vTask_MOTORCONTROL+0x2da>
   1c7c6:	4b5a      	ldr	r3, [pc, #360]	; (1c930 <vTask_MOTORCONTROL+0x438>)
   1c7c8:	4798      	blx	r3
   1c7ca:	1e03      	subs	r3, r0, #0
   1c7cc:	d001      	beq.n	1c7d2 <vTask_MOTORCONTROL+0x2da>
		{
			operateOnStableLine();
   1c7ce:	4b59      	ldr	r3, [pc, #356]	; (1c934 <vTask_MOTORCONTROL+0x43c>)
   1c7d0:	4798      	blx	r3
		}
		
		if(stopMotorCommandGiven && xTaskGetTickCount()-tempStopSequenceTimer>5000)
   1c7d2:	4b59      	ldr	r3, [pc, #356]	; (1c938 <vTask_MOTORCONTROL+0x440>)
   1c7d4:	781b      	ldrb	r3, [r3, #0]
   1c7d6:	2b00      	cmp	r3, #0
   1c7d8:	d00b      	beq.n	1c7f2 <vTask_MOTORCONTROL+0x2fa>
   1c7da:	4b22      	ldr	r3, [pc, #136]	; (1c864 <vTask_MOTORCONTROL+0x36c>)
   1c7dc:	4798      	blx	r3
   1c7de:	0002      	movs	r2, r0
   1c7e0:	4b56      	ldr	r3, [pc, #344]	; (1c93c <vTask_MOTORCONTROL+0x444>)
   1c7e2:	681b      	ldr	r3, [r3, #0]
   1c7e4:	1ad3      	subs	r3, r2, r3
   1c7e6:	4a56      	ldr	r2, [pc, #344]	; (1c940 <vTask_MOTORCONTROL+0x448>)
   1c7e8:	4293      	cmp	r3, r2
   1c7ea:	d902      	bls.n	1c7f2 <vTask_MOTORCONTROL+0x2fa>
		{
			stopMotorCommandGiven=false;
   1c7ec:	4b52      	ldr	r3, [pc, #328]	; (1c938 <vTask_MOTORCONTROL+0x440>)
   1c7ee:	2200      	movs	r2, #0
   1c7f0:	701a      	strb	r2, [r3, #0]
		}
		
		if(motorRelatedVoltageBypassOn)
   1c7f2:	4b34      	ldr	r3, [pc, #208]	; (1c8c4 <vTask_MOTORCONTROL+0x3cc>)
   1c7f4:	781b      	ldrb	r3, [r3, #0]
   1c7f6:	2b00      	cmp	r3, #0
   1c7f8:	d006      	beq.n	1c808 <vTask_MOTORCONTROL+0x310>
		{
			if(MotorVoltageBypassTimerOver())
   1c7fa:	4b52      	ldr	r3, [pc, #328]	; (1c944 <vTask_MOTORCONTROL+0x44c>)
   1c7fc:	4798      	blx	r3
   1c7fe:	1e03      	subs	r3, r0, #0
   1c800:	d002      	beq.n	1c808 <vTask_MOTORCONTROL+0x310>
			{
				motorRelatedVoltageBypassOn=false;
   1c802:	4b30      	ldr	r3, [pc, #192]	; (1c8c4 <vTask_MOTORCONTROL+0x3cc>)
   1c804:	2200      	movs	r2, #0
   1c806:	701a      	strb	r2, [r3, #0]
			}
		}
		
		if(singlePhasingTimerOn)
   1c808:	4b1f      	ldr	r3, [pc, #124]	; (1c888 <vTask_MOTORCONTROL+0x390>)
   1c80a:	781b      	ldrb	r3, [r3, #0]
   1c80c:	2b00      	cmp	r3, #0
   1c80e:	d100      	bne.n	1c812 <vTask_MOTORCONTROL+0x31a>
   1c810:	e0a3      	b.n	1c95a <vTask_MOTORCONTROL+0x462>
		{
			bool b;
			if (structThreePhase_state.u8t_phase_ac_state != AC_3PH)
   1c812:	4b4d      	ldr	r3, [pc, #308]	; (1c948 <vTask_MOTORCONTROL+0x450>)
   1c814:	785b      	ldrb	r3, [r3, #1]
   1c816:	b2db      	uxtb	r3, r3
   1c818:	2b03      	cmp	r3, #3
   1c81a:	d003      	beq.n	1c824 <vTask_MOTORCONTROL+0x32c>
			{
				b = false;
   1c81c:	2316      	movs	r3, #22
   1c81e:	18fb      	adds	r3, r7, r3
   1c820:	2200      	movs	r2, #0
   1c822:	701a      	strb	r2, [r3, #0]
			}
			if(!b)		//3 phase pin is low
   1c824:	2316      	movs	r3, #22
   1c826:	18fb      	adds	r3, r7, r3
   1c828:	781b      	ldrb	r3, [r3, #0]
   1c82a:	2201      	movs	r2, #1
   1c82c:	4053      	eors	r3, r2
   1c82e:	b2db      	uxtb	r3, r3
   1c830:	2b00      	cmp	r3, #0
   1c832:	d100      	bne.n	1c836 <vTask_MOTORCONTROL+0x33e>
   1c834:	e08e      	b.n	1c954 <vTask_MOTORCONTROL+0x45c>
			{
				if(singlePhasingTimerOver())
   1c836:	4b45      	ldr	r3, [pc, #276]	; (1c94c <vTask_MOTORCONTROL+0x454>)
   1c838:	4798      	blx	r3
   1c83a:	1e03      	subs	r3, r0, #0
   1c83c:	d100      	bne.n	1c840 <vTask_MOTORCONTROL+0x348>
   1c83e:	e08c      	b.n	1c95a <vTask_MOTORCONTROL+0x462>
				{
					operateOnSinglePhasing();
   1c840:	4b43      	ldr	r3, [pc, #268]	; (1c950 <vTask_MOTORCONTROL+0x458>)
   1c842:	4798      	blx	r3
   1c844:	e089      	b.n	1c95a <vTask_MOTORCONTROL+0x462>
   1c846:	46c0      	nop			; (mov r8, r8)
   1c848:	00019fd1 	.word	0x00019fd1
   1c84c:	0001ce79 	.word	0x0001ce79
   1c850:	0001cf6d 	.word	0x0001cf6d
   1c854:	0001d03d 	.word	0x0001d03d
   1c858:	2000080c 	.word	0x2000080c
   1c85c:	20000714 	.word	0x20000714
   1c860:	2000072e 	.word	0x2000072e
   1c864:	000209cd 	.word	0x000209cd
   1c868:	20000776 	.word	0x20000776
   1c86c:	2000088c 	.word	0x2000088c
   1c870:	00019081 	.word	0x00019081
   1c874:	00020669 	.word	0x00020669
   1c878:	2000078d 	.word	0x2000078d
   1c87c:	20000841 	.word	0x20000841
   1c880:	2000079a 	.word	0x2000079a
   1c884:	20000770 	.word	0x20000770
   1c888:	20000791 	.word	0x20000791
   1c88c:	20000818 	.word	0x20000818
   1c890:	2000079b 	.word	0x2000079b
   1c894:	20000799 	.word	0x20000799
   1c898:	20000863 	.word	0x20000863
   1c89c:	20000788 	.word	0x20000788
   1c8a0:	0001b2bd 	.word	0x0001b2bd
   1c8a4:	0001b325 	.word	0x0001b325
   1c8a8:	0001b289 	.word	0x0001b289
   1c8ac:	200007b0 	.word	0x200007b0
   1c8b0:	0001ab4d 	.word	0x0001ab4d
   1c8b4:	20000730 	.word	0x20000730
   1c8b8:	200007e0 	.word	0x200007e0
   1c8bc:	20000768 	.word	0x20000768
   1c8c0:	20000780 	.word	0x20000780
   1c8c4:	20000773 	.word	0x20000773
   1c8c8:	20000784 	.word	0x20000784
   1c8cc:	2000062c 	.word	0x2000062c
   1c8d0:	20000718 	.word	0x20000718
   1c8d4:	200007f8 	.word	0x200007f8
   1c8d8:	0001b60d 	.word	0x0001b60d
   1c8dc:	20000234 	.word	0x20000234
   1c8e0:	0001fd61 	.word	0x0001fd61
   1c8e4:	20000880 	.word	0x20000880
   1c8e8:	000206c5 	.word	0x000206c5
   1c8ec:	0001f8c1 	.word	0x0001f8c1
   1c8f0:	2000079f 	.word	0x2000079f
   1c8f4:	000088b8 	.word	0x000088b8
   1c8f8:	200007c4 	.word	0x200007c4
   1c8fc:	2000078a 	.word	0x2000078a
   1c900:	2000085c 	.word	0x2000085c
   1c904:	0001b6ad 	.word	0x0001b6ad
   1c908:	0001d149 	.word	0x0001d149
   1c90c:	0001aa71 	.word	0x0001aa71
   1c910:	0001aa8d 	.word	0x0001aa8d
   1c914:	0001ada9 	.word	0x0001ada9
   1c918:	0001b259 	.word	0x0001b259
   1c91c:	0001b021 	.word	0x0001b021
   1c920:	20000654 	.word	0x20000654
   1c924:	0001b4f1 	.word	0x0001b4f1
   1c928:	0001c2dd 	.word	0x0001c2dd
   1c92c:	2000080d 	.word	0x2000080d
   1c930:	0001b9b9 	.word	0x0001b9b9
   1c934:	0001b889 	.word	0x0001b889
   1c938:	20000860 	.word	0x20000860
   1c93c:	200007a8 	.word	0x200007a8
   1c940:	00001388 	.word	0x00001388
   1c944:	0001c2ad 	.word	0x0001c2ad
   1c948:	20000748 	.word	0x20000748
   1c94c:	0001bd39 	.word	0x0001bd39
   1c950:	0001bd85 	.word	0x0001bd85
				}
			}
			else
			{
				singlePhasingTimerOn=false;
   1c954:	4b15      	ldr	r3, [pc, #84]	; (1c9ac <vTask_MOTORCONTROL+0x4b4>)
   1c956:	2200      	movs	r2, #0
   1c958:	701a      	strb	r2, [r3, #0]
			}
		}
		if (startTimerOn)
   1c95a:	4b15      	ldr	r3, [pc, #84]	; (1c9b0 <vTask_MOTORCONTROL+0x4b8>)
   1c95c:	781b      	ldrb	r3, [r3, #0]
   1c95e:	2b00      	cmp	r3, #0
   1c960:	d007      	beq.n	1c972 <vTask_MOTORCONTROL+0x47a>
		{
			if (startMotorTimerOver())
   1c962:	4b14      	ldr	r3, [pc, #80]	; (1c9b4 <vTask_MOTORCONTROL+0x4bc>)
   1c964:	4798      	blx	r3
   1c966:	1e03      	subs	r3, r0, #0
   1c968:	d003      	beq.n	1c972 <vTask_MOTORCONTROL+0x47a>
			{
				startMotor(false,false);
   1c96a:	2100      	movs	r1, #0
   1c96c:	2000      	movs	r0, #0
   1c96e:	4b12      	ldr	r3, [pc, #72]	; (1c9b8 <vTask_MOTORCONTROL+0x4c0>)
   1c970:	4798      	blx	r3
			}
		}
		if (startSequenceOn)
   1c972:	4b12      	ldr	r3, [pc, #72]	; (1c9bc <vTask_MOTORCONTROL+0x4c4>)
   1c974:	781b      	ldrb	r3, [r3, #0]
   1c976:	2b00      	cmp	r3, #0
   1c978:	d001      	beq.n	1c97e <vTask_MOTORCONTROL+0x486>
		{
			terminateStartRelay();
   1c97a:	4b11      	ldr	r3, [pc, #68]	; (1c9c0 <vTask_MOTORCONTROL+0x4c8>)
   1c97c:	4798      	blx	r3
		}
		if(starDeltaTimerOn)
   1c97e:	4b11      	ldr	r3, [pc, #68]	; (1c9c4 <vTask_MOTORCONTROL+0x4cc>)
   1c980:	781b      	ldrb	r3, [r3, #0]
   1c982:	2b00      	cmp	r3, #0
   1c984:	d001      	beq.n	1c98a <vTask_MOTORCONTROL+0x492>
		{
			terminateStarDeltaTimer();
   1c986:	4b10      	ldr	r3, [pc, #64]	; (1c9c8 <vTask_MOTORCONTROL+0x4d0>)
   1c988:	4798      	blx	r3
		}
		if(stopSequenceOn)
   1c98a:	4b10      	ldr	r3, [pc, #64]	; (1c9cc <vTask_MOTORCONTROL+0x4d4>)
   1c98c:	781b      	ldrb	r3, [r3, #0]
   1c98e:	2b00      	cmp	r3, #0
   1c990:	d001      	beq.n	1c996 <vTask_MOTORCONTROL+0x49e>
		{
			terminateStopRelay();
   1c992:	4b0f      	ldr	r3, [pc, #60]	; (1c9d0 <vTask_MOTORCONTROL+0x4d8>)
   1c994:	4798      	blx	r3
		}
		
		SIMEventManager();
   1c996:	4b0f      	ldr	r3, [pc, #60]	; (1c9d4 <vTask_MOTORCONTROL+0x4dc>)
   1c998:	4798      	blx	r3
		if (factory_settings_parameter_struct.ENABLE_M2M)
   1c99a:	4b0f      	ldr	r3, [pc, #60]	; (1c9d8 <vTask_MOTORCONTROL+0x4e0>)
   1c99c:	78db      	ldrb	r3, [r3, #3]
   1c99e:	2b00      	cmp	r3, #0
   1c9a0:	d100      	bne.n	1c9a4 <vTask_MOTORCONTROL+0x4ac>
   1c9a2:	e67e      	b.n	1c6a2 <vTask_MOTORCONTROL+0x1aa>
		{
			M2MEventManager();
   1c9a4:	4b0d      	ldr	r3, [pc, #52]	; (1c9dc <vTask_MOTORCONTROL+0x4e4>)
   1c9a6:	4798      	blx	r3
		xSemaphoreTake(xButton_Semaphore, portMAX_DELAY);
   1c9a8:	e67b      	b.n	1c6a2 <vTask_MOTORCONTROL+0x1aa>
   1c9aa:	46c0      	nop			; (mov r8, r8)
   1c9ac:	20000791 	.word	0x20000791
   1c9b0:	2000079a 	.word	0x2000079a
   1c9b4:	0001bcd1 	.word	0x0001bcd1
   1c9b8:	0001ba05 	.word	0x0001ba05
   1c9bc:	20000799 	.word	0x20000799
   1c9c0:	0001bf05 	.word	0x0001bf05
   1c9c4:	2000079b 	.word	0x2000079b
   1c9c8:	0001be95 	.word	0x0001be95
   1c9cc:	20000788 	.word	0x20000788
   1c9d0:	0001bdc1 	.word	0x0001bdc1
   1c9d4:	0001c215 	.word	0x0001c215
   1c9d8:	2000062c 	.word	0x2000062c
   1c9dc:	0001c1d1 	.word	0x0001c1d1

0001c9e0 <start_motor_service>:
		}
	}
}

void start_motor_service(void)
{
   1c9e0:	b590      	push	{r4, r7, lr}
   1c9e2:	b08b      	sub	sp, #44	; 0x2c
   1c9e4:	af02      	add	r7, sp, #8
	struct extint_chan_conf config_extint_chan_isr;
	extint_chan_get_config_defaults(&config_extint_chan_isr);
   1c9e6:	2314      	movs	r3, #20
   1c9e8:	18fb      	adds	r3, r7, r3
   1c9ea:	0018      	movs	r0, r3
   1c9ec:	4bad      	ldr	r3, [pc, #692]	; (1cca4 <start_motor_service+0x2c4>)
   1c9ee:	4798      	blx	r3
	config_extint_chan_isr.gpio_pin           = PIN_PB11A_EIC_EXTINT11;
   1c9f0:	2314      	movs	r3, #20
   1c9f2:	18fb      	adds	r3, r7, r3
   1c9f4:	222b      	movs	r2, #43	; 0x2b
   1c9f6:	601a      	str	r2, [r3, #0]
	config_extint_chan_isr.gpio_pin_mux       = MUX_PB11A_EIC_EXTINT11;
   1c9f8:	2314      	movs	r3, #20
   1c9fa:	18fb      	adds	r3, r7, r3
   1c9fc:	2200      	movs	r2, #0
   1c9fe:	605a      	str	r2, [r3, #4]
	config_extint_chan_isr.gpio_pin_pull      = EXTINT_PULL_UP;
   1ca00:	2314      	movs	r3, #20
   1ca02:	18fb      	adds	r3, r7, r3
   1ca04:	2201      	movs	r2, #1
   1ca06:	721a      	strb	r2, [r3, #8]
	config_extint_chan_isr.detection_criteria = EXTINT_DETECT_RISING;
   1ca08:	2314      	movs	r3, #20
   1ca0a:	18fb      	adds	r3, r7, r3
   1ca0c:	2201      	movs	r2, #1
   1ca0e:	72da      	strb	r2, [r3, #11]
	config_extint_chan_isr.wake_if_sleeping   = true;
   1ca10:	2314      	movs	r3, #20
   1ca12:	18fb      	adds	r3, r7, r3
   1ca14:	2201      	movs	r2, #1
   1ca16:	725a      	strb	r2, [r3, #9]
	extint_chan_set_config(11, &config_extint_chan_isr);
   1ca18:	2314      	movs	r3, #20
   1ca1a:	18fb      	adds	r3, r7, r3
   1ca1c:	0019      	movs	r1, r3
   1ca1e:	200b      	movs	r0, #11
   1ca20:	4ba1      	ldr	r3, [pc, #644]	; (1cca8 <start_motor_service+0x2c8>)
   1ca22:	4798      	blx	r3
	
	extint_register_callback(PR2_ISR,11,EXTINT_CALLBACK_TYPE_DETECT);
   1ca24:	4ba1      	ldr	r3, [pc, #644]	; (1ccac <start_motor_service+0x2cc>)
   1ca26:	2200      	movs	r2, #0
   1ca28:	210b      	movs	r1, #11
   1ca2a:	0018      	movs	r0, r3
   1ca2c:	4ba0      	ldr	r3, [pc, #640]	; (1ccb0 <start_motor_service+0x2d0>)
   1ca2e:	4798      	blx	r3
	extint_chan_enable_callback(11,EXTINT_CALLBACK_TYPE_DETECT);
   1ca30:	2100      	movs	r1, #0
   1ca32:	200b      	movs	r0, #11
   1ca34:	4b9f      	ldr	r3, [pc, #636]	; (1ccb4 <start_motor_service+0x2d4>)
   1ca36:	4798      	blx	r3
	
	struct port_config pin_confg;
	port_get_config_defaults(&pin_confg);
   1ca38:	2310      	movs	r3, #16
   1ca3a:	18fb      	adds	r3, r7, r3
   1ca3c:	0018      	movs	r0, r3
   1ca3e:	4b9e      	ldr	r3, [pc, #632]	; (1ccb8 <start_motor_service+0x2d8>)
   1ca40:	4798      	blx	r3
	pin_confg.direction = PORT_PIN_DIR_INPUT;
   1ca42:	2310      	movs	r3, #16
   1ca44:	18fb      	adds	r3, r7, r3
   1ca46:	2200      	movs	r2, #0
   1ca48:	701a      	strb	r2, [r3, #0]
	pin_confg.input_pull = PORT_PIN_PULL_UP;
   1ca4a:	2310      	movs	r3, #16
   1ca4c:	18fb      	adds	r3, r7, r3
   1ca4e:	2201      	movs	r2, #1
   1ca50:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(PR1_PIN, &pin_confg);
   1ca52:	2310      	movs	r3, #16
   1ca54:	18fb      	adds	r3, r7, r3
   1ca56:	0019      	movs	r1, r3
   1ca58:	202a      	movs	r0, #42	; 0x2a
   1ca5a:	4b98      	ldr	r3, [pc, #608]	; (1ccbc <start_motor_service+0x2dc>)
   1ca5c:	4798      	blx	r3
	
	//Transferring the below statement from LCD_SERVICE to here, as it solves the problem of the device hanging.
	// Whenever xSemaphoreTake is executed on xADC_Semaphore in task other than which xADC_Semaphore is defined in, than the MCU hangs.
	vSemaphoreCreateBinary(xADC_Semaphore);
   1ca5e:	2203      	movs	r2, #3
   1ca60:	2100      	movs	r1, #0
   1ca62:	2001      	movs	r0, #1
   1ca64:	4b96      	ldr	r3, [pc, #600]	; (1ccc0 <start_motor_service+0x2e0>)
   1ca66:	4798      	blx	r3
   1ca68:	0002      	movs	r2, r0
   1ca6a:	4b96      	ldr	r3, [pc, #600]	; (1ccc4 <start_motor_service+0x2e4>)
   1ca6c:	601a      	str	r2, [r3, #0]
   1ca6e:	4b95      	ldr	r3, [pc, #596]	; (1ccc4 <start_motor_service+0x2e4>)
   1ca70:	681b      	ldr	r3, [r3, #0]
   1ca72:	2b00      	cmp	r3, #0
   1ca74:	d006      	beq.n	1ca84 <start_motor_service+0xa4>
   1ca76:	4b93      	ldr	r3, [pc, #588]	; (1ccc4 <start_motor_service+0x2e4>)
   1ca78:	6818      	ldr	r0, [r3, #0]
   1ca7a:	2300      	movs	r3, #0
   1ca7c:	2200      	movs	r2, #0
   1ca7e:	2100      	movs	r1, #0
   1ca80:	4c91      	ldr	r4, [pc, #580]	; (1ccc8 <start_motor_service+0x2e8>)
   1ca82:	47a0      	blx	r4
	
	vSemaphoreCreateBinary(xButton_Semaphore);
   1ca84:	2203      	movs	r2, #3
   1ca86:	2100      	movs	r1, #0
   1ca88:	2001      	movs	r0, #1
   1ca8a:	4b8d      	ldr	r3, [pc, #564]	; (1ccc0 <start_motor_service+0x2e0>)
   1ca8c:	4798      	blx	r3
   1ca8e:	0002      	movs	r2, r0
   1ca90:	4b8e      	ldr	r3, [pc, #568]	; (1cccc <start_motor_service+0x2ec>)
   1ca92:	601a      	str	r2, [r3, #0]
   1ca94:	4b8d      	ldr	r3, [pc, #564]	; (1cccc <start_motor_service+0x2ec>)
   1ca96:	681b      	ldr	r3, [r3, #0]
   1ca98:	2b00      	cmp	r3, #0
   1ca9a:	d006      	beq.n	1caaa <start_motor_service+0xca>
   1ca9c:	4b8b      	ldr	r3, [pc, #556]	; (1cccc <start_motor_service+0x2ec>)
   1ca9e:	6818      	ldr	r0, [r3, #0]
   1caa0:	2300      	movs	r3, #0
   1caa2:	2200      	movs	r2, #0
   1caa4:	2100      	movs	r1, #0
   1caa6:	4c88      	ldr	r4, [pc, #544]	; (1ccc8 <start_motor_service+0x2e8>)
   1caa8:	47a0      	blx	r4
	
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	struct port_config config_pins;
	port_get_config_defaults(&config_pins);
   1caaa:	230c      	movs	r3, #12
   1caac:	18fb      	adds	r3, r7, r3
   1caae:	0018      	movs	r0, r3
   1cab0:	4b81      	ldr	r3, [pc, #516]	; (1ccb8 <start_motor_service+0x2d8>)
   1cab2:	4798      	blx	r3
	
	config_pins.direction = PORT_PIN_DIR_OUTPUT;
   1cab4:	230c      	movs	r3, #12
   1cab6:	18fb      	adds	r3, r7, r3
   1cab8:	2201      	movs	r2, #1
   1caba:	701a      	strb	r2, [r3, #0]
	config_pins.input_pull = PORT_PIN_PULL_NONE;
   1cabc:	230c      	movs	r3, #12
   1cabe:	18fb      	adds	r3, r7, r3
   1cac0:	2200      	movs	r2, #0
   1cac2:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(START_RELAY_PIN,&config_pins);
   1cac4:	230c      	movs	r3, #12
   1cac6:	18fb      	adds	r3, r7, r3
   1cac8:	0019      	movs	r1, r3
   1caca:	202d      	movs	r0, #45	; 0x2d
   1cacc:	4b7b      	ldr	r3, [pc, #492]	; (1ccbc <start_motor_service+0x2dc>)
   1cace:	4798      	blx	r3
	port_pin_set_config(STOP_RELAY_PIN,&config_pins);
   1cad0:	230c      	movs	r3, #12
   1cad2:	18fb      	adds	r3, r7, r3
   1cad4:	0019      	movs	r1, r3
   1cad6:	202c      	movs	r0, #44	; 0x2c
   1cad8:	4b78      	ldr	r3, [pc, #480]	; (1ccbc <start_motor_service+0x2dc>)
   1cada:	4798      	blx	r3
	port_pin_set_config(AUTO_ON_LED_PIN,&config_pins);
   1cadc:	230c      	movs	r3, #12
   1cade:	18fb      	adds	r3, r7, r3
   1cae0:	0019      	movs	r1, r3
   1cae2:	2028      	movs	r0, #40	; 0x28
   1cae4:	4b75      	ldr	r3, [pc, #468]	; (1ccbc <start_motor_service+0x2dc>)
   1cae6:	4798      	blx	r3
	port_pin_set_config(THREEPHASE_OK_LED_PIN,&config_pins);
   1cae8:	230c      	movs	r3, #12
   1caea:	18fb      	adds	r3, r7, r3
   1caec:	0019      	movs	r1, r3
   1caee:	2027      	movs	r0, #39	; 0x27
   1caf0:	4b72      	ldr	r3, [pc, #456]	; (1ccbc <start_motor_service+0x2dc>)
   1caf2:	4798      	blx	r3
	port_pin_set_config(MOTOR_ON_LED_PIN,&config_pins);
   1caf4:	230c      	movs	r3, #12
   1caf6:	18fb      	adds	r3, r7, r3
   1caf8:	0019      	movs	r1, r3
   1cafa:	2005      	movs	r0, #5
   1cafc:	4b6f      	ldr	r3, [pc, #444]	; (1ccbc <start_motor_service+0x2dc>)
   1cafe:	4798      	blx	r3
	
	AUTO_ON_LED_OFF;
   1cb00:	2101      	movs	r1, #1
   1cb02:	2028      	movs	r0, #40	; 0x28
   1cb04:	4b72      	ldr	r3, [pc, #456]	; (1ccd0 <start_motor_service+0x2f0>)
   1cb06:	4798      	blx	r3
	MOTOR_ON_LED_OFF;
   1cb08:	2101      	movs	r1, #1
   1cb0a:	2005      	movs	r0, #5
   1cb0c:	4b70      	ldr	r3, [pc, #448]	; (1ccd0 <start_motor_service+0x2f0>)
   1cb0e:	4798      	blx	r3
	THREEPHASE_OK_LED_OFF;
   1cb10:	2101      	movs	r1, #1
   1cb12:	2027      	movs	r0, #39	; 0x27
   1cb14:	4b6e      	ldr	r3, [pc, #440]	; (1ccd0 <start_motor_service+0x2f0>)
   1cb16:	4798      	blx	r3
	//port_pin_set_config(PIN_MOTOR_FEEDBACK,&config_pins);
	
	
	
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
   1cb18:	003b      	movs	r3, r7
   1cb1a:	0018      	movs	r0, r3
   1cb1c:	4b61      	ldr	r3, [pc, #388]	; (1cca4 <start_motor_service+0x2c4>)
   1cb1e:	4798      	blx	r3
	
	config_extint_chan.gpio_pin = MOTOR_FEEDBACK_EIC_PIN;
   1cb20:	003b      	movs	r3, r7
   1cb22:	222e      	movs	r2, #46	; 0x2e
   1cb24:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = MOTOR_FEEDBACK_EIC_MUX;
   1cb26:	003b      	movs	r3, r7
   1cb28:	2200      	movs	r2, #0
   1cb2a:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_NONE;
   1cb2c:	003b      	movs	r3, r7
   1cb2e:	2200      	movs	r2, #0
   1cb30:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
   1cb32:	003b      	movs	r3, r7
   1cb34:	2203      	movs	r2, #3
   1cb36:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(MOTOR_FEEDBACK_EIC_LINE, &config_extint_chan);
   1cb38:	003b      	movs	r3, r7
   1cb3a:	0019      	movs	r1, r3
   1cb3c:	200e      	movs	r0, #14
   1cb3e:	4b5a      	ldr	r3, [pc, #360]	; (1cca8 <start_motor_service+0x2c8>)
   1cb40:	4798      	blx	r3
	
	extint_chan_enable_callback(MOTOR_FEEDBACK_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1cb42:	2100      	movs	r1, #0
   1cb44:	200e      	movs	r0, #14
   1cb46:	4b5b      	ldr	r3, [pc, #364]	; (1ccb4 <start_motor_service+0x2d4>)
   1cb48:	4798      	blx	r3
	extint_register_callback(motor_feedback_callback,MOTOR_FEEDBACK_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1cb4a:	4b62      	ldr	r3, [pc, #392]	; (1ccd4 <start_motor_service+0x2f4>)
   1cb4c:	2200      	movs	r2, #0
   1cb4e:	210e      	movs	r1, #14
   1cb50:	0018      	movs	r0, r3
   1cb52:	4b57      	ldr	r3, [pc, #348]	; (1ccb0 <start_motor_service+0x2d0>)
   1cb54:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	
	config_extint_chan.gpio_pin = START_BUTTON_EIC_PIN;
   1cb56:	003b      	movs	r3, r7
   1cb58:	2226      	movs	r2, #38	; 0x26
   1cb5a:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = START_BUTTON_EIC_MUX;
   1cb5c:	003b      	movs	r3, r7
   1cb5e:	2200      	movs	r2, #0
   1cb60:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1cb62:	003b      	movs	r3, r7
   1cb64:	2201      	movs	r2, #1
   1cb66:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1cb68:	003b      	movs	r3, r7
   1cb6a:	2202      	movs	r2, #2
   1cb6c:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(START_BUTTON_EIC_LINE, &config_extint_chan);
   1cb6e:	003b      	movs	r3, r7
   1cb70:	0019      	movs	r1, r3
   1cb72:	2006      	movs	r0, #6
   1cb74:	4b4c      	ldr	r3, [pc, #304]	; (1cca8 <start_motor_service+0x2c8>)
   1cb76:	4798      	blx	r3
	
	extint_chan_enable_callback(START_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1cb78:	2100      	movs	r1, #0
   1cb7a:	2006      	movs	r0, #6
   1cb7c:	4b4d      	ldr	r3, [pc, #308]	; (1ccb4 <start_motor_service+0x2d4>)
   1cb7e:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,START_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1cb80:	4b55      	ldr	r3, [pc, #340]	; (1ccd8 <start_motor_service+0x2f8>)
   1cb82:	2200      	movs	r2, #0
   1cb84:	2106      	movs	r1, #6
   1cb86:	0018      	movs	r0, r3
   1cb88:	4b49      	ldr	r3, [pc, #292]	; (1ccb0 <start_motor_service+0x2d0>)
   1cb8a:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_extint_chan.gpio_pin = STOP_BUTTON_EIC_PIN;
   1cb8c:	003b      	movs	r3, r7
   1cb8e:	2225      	movs	r2, #37	; 0x25
   1cb90:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = STOP_BUTTON_EIC_MUX;
   1cb92:	003b      	movs	r3, r7
   1cb94:	2200      	movs	r2, #0
   1cb96:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1cb98:	003b      	movs	r3, r7
   1cb9a:	2201      	movs	r2, #1
   1cb9c:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1cb9e:	003b      	movs	r3, r7
   1cba0:	2202      	movs	r2, #2
   1cba2:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(STOP_BUTTON_EIC_LINE, &config_extint_chan);
   1cba4:	003b      	movs	r3, r7
   1cba6:	0019      	movs	r1, r3
   1cba8:	2005      	movs	r0, #5
   1cbaa:	4b3f      	ldr	r3, [pc, #252]	; (1cca8 <start_motor_service+0x2c8>)
   1cbac:	4798      	blx	r3
	extint_chan_enable_callback(STOP_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1cbae:	2100      	movs	r1, #0
   1cbb0:	2005      	movs	r0, #5
   1cbb2:	4b40      	ldr	r3, [pc, #256]	; (1ccb4 <start_motor_service+0x2d4>)
   1cbb4:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,STOP_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1cbb6:	4b48      	ldr	r3, [pc, #288]	; (1ccd8 <start_motor_service+0x2f8>)
   1cbb8:	2200      	movs	r2, #0
   1cbba:	2105      	movs	r1, #5
   1cbbc:	0018      	movs	r0, r3
   1cbbe:	4b3c      	ldr	r3, [pc, #240]	; (1ccb0 <start_motor_service+0x2d0>)
   1cbc0:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_extint_chan.gpio_pin = AUTO_BUTTON_EIC_PIN;
   1cbc2:	003b      	movs	r3, r7
   1cbc4:	221c      	movs	r2, #28
   1cbc6:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = AUTO_BUTTON_EIC_MUX;
   1cbc8:	003b      	movs	r3, r7
   1cbca:	2200      	movs	r2, #0
   1cbcc:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1cbce:	003b      	movs	r3, r7
   1cbd0:	2201      	movs	r2, #1
   1cbd2:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1cbd4:	003b      	movs	r3, r7
   1cbd6:	2202      	movs	r2, #2
   1cbd8:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(AUTO_BUTTON_EIC_LINE, &config_extint_chan);
   1cbda:	003b      	movs	r3, r7
   1cbdc:	0019      	movs	r1, r3
   1cbde:	2008      	movs	r0, #8
   1cbe0:	4b31      	ldr	r3, [pc, #196]	; (1cca8 <start_motor_service+0x2c8>)
   1cbe2:	4798      	blx	r3
	extint_chan_enable_callback(AUTO_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1cbe4:	2100      	movs	r1, #0
   1cbe6:	2008      	movs	r0, #8
   1cbe8:	4b32      	ldr	r3, [pc, #200]	; (1ccb4 <start_motor_service+0x2d4>)
   1cbea:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,AUTO_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1cbec:	4b3a      	ldr	r3, [pc, #232]	; (1ccd8 <start_motor_service+0x2f8>)
   1cbee:	2200      	movs	r2, #0
   1cbf0:	2108      	movs	r1, #8
   1cbf2:	0018      	movs	r0, r3
   1cbf4:	4b2e      	ldr	r3, [pc, #184]	; (1ccb0 <start_motor_service+0x2d0>)
   1cbf6:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_extint_chan.gpio_pin = LCD_SHOW_BUTTON_EIC_PIN;
   1cbf8:	003b      	movs	r3, r7
   1cbfa:	2229      	movs	r2, #41	; 0x29
   1cbfc:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = LCD_SHOW_BUTTON_EIC_MUX;
   1cbfe:	003b      	movs	r3, r7
   1cc00:	2200      	movs	r2, #0
   1cc02:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1cc04:	003b      	movs	r3, r7
   1cc06:	2201      	movs	r2, #1
   1cc08:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1cc0a:	003b      	movs	r3, r7
   1cc0c:	2202      	movs	r2, #2
   1cc0e:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(LCD_SHOW_BUTTON_EIC_LINE, &config_extint_chan);
   1cc10:	003b      	movs	r3, r7
   1cc12:	0019      	movs	r1, r3
   1cc14:	2009      	movs	r0, #9
   1cc16:	4b24      	ldr	r3, [pc, #144]	; (1cca8 <start_motor_service+0x2c8>)
   1cc18:	4798      	blx	r3
	extint_chan_enable_callback(LCD_SHOW_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1cc1a:	2100      	movs	r1, #0
   1cc1c:	2009      	movs	r0, #9
   1cc1e:	4b25      	ldr	r3, [pc, #148]	; (1ccb4 <start_motor_service+0x2d4>)
   1cc20:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,LCD_SHOW_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1cc22:	4b2d      	ldr	r3, [pc, #180]	; (1ccd8 <start_motor_service+0x2f8>)
   1cc24:	2200      	movs	r2, #0
   1cc26:	2109      	movs	r1, #9
   1cc28:	0018      	movs	r0, r3
   1cc2a:	4b21      	ldr	r3, [pc, #132]	; (1ccb0 <start_motor_service+0x2d0>)
   1cc2c:	4798      	blx	r3
	////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	
	xTaskCreate(vTask_10ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,NULL);
   1cc2e:	482b      	ldr	r0, [pc, #172]	; (1ccdc <start_motor_service+0x2fc>)
   1cc30:	2300      	movs	r3, #0
   1cc32:	9301      	str	r3, [sp, #4]
   1cc34:	2301      	movs	r3, #1
   1cc36:	9300      	str	r3, [sp, #0]
   1cc38:	2300      	movs	r3, #0
   1cc3a:	2282      	movs	r2, #130	; 0x82
   1cc3c:	2100      	movs	r1, #0
   1cc3e:	4c28      	ldr	r4, [pc, #160]	; (1cce0 <start_motor_service+0x300>)
   1cc40:	47a0      	blx	r4
	xTaskCreate(vTask_100ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,NULL);
   1cc42:	4828      	ldr	r0, [pc, #160]	; (1cce4 <start_motor_service+0x304>)
   1cc44:	2300      	movs	r3, #0
   1cc46:	9301      	str	r3, [sp, #4]
   1cc48:	2301      	movs	r3, #1
   1cc4a:	9300      	str	r3, [sp, #0]
   1cc4c:	2300      	movs	r3, #0
   1cc4e:	2282      	movs	r2, #130	; 0x82
   1cc50:	2100      	movs	r1, #0
   1cc52:	4c23      	ldr	r4, [pc, #140]	; (1cce0 <start_motor_service+0x300>)
   1cc54:	47a0      	blx	r4
	xTaskCreate(vTask_50ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,&fiftymsTask);
   1cc56:	4824      	ldr	r0, [pc, #144]	; (1cce8 <start_motor_service+0x308>)
   1cc58:	4b24      	ldr	r3, [pc, #144]	; (1ccec <start_motor_service+0x30c>)
   1cc5a:	9301      	str	r3, [sp, #4]
   1cc5c:	2301      	movs	r3, #1
   1cc5e:	9300      	str	r3, [sp, #0]
   1cc60:	2300      	movs	r3, #0
   1cc62:	2282      	movs	r2, #130	; 0x82
   1cc64:	2100      	movs	r1, #0
   1cc66:	4c1e      	ldr	r4, [pc, #120]	; (1cce0 <start_motor_service+0x300>)
   1cc68:	47a0      	blx	r4
	
	if(factory_settings_parameter_struct.ENABLE_WATER)
   1cc6a:	4b21      	ldr	r3, [pc, #132]	; (1ccf0 <start_motor_service+0x310>)
   1cc6c:	795b      	ldrb	r3, [r3, #5]
   1cc6e:	2b00      	cmp	r3, #0
   1cc70:	d00a      	beq.n	1cc88 <start_motor_service+0x2a8>
	{
		xTaskCreate(Water_Level_Task,NULL,(uint16_t)700,NULL,1,NULL);
   1cc72:	23af      	movs	r3, #175	; 0xaf
   1cc74:	009a      	lsls	r2, r3, #2
   1cc76:	481f      	ldr	r0, [pc, #124]	; (1ccf4 <start_motor_service+0x314>)
   1cc78:	2300      	movs	r3, #0
   1cc7a:	9301      	str	r3, [sp, #4]
   1cc7c:	2301      	movs	r3, #1
   1cc7e:	9300      	str	r3, [sp, #0]
   1cc80:	2300      	movs	r3, #0
   1cc82:	2100      	movs	r1, #0
   1cc84:	4c16      	ldr	r4, [pc, #88]	; (1cce0 <start_motor_service+0x300>)
   1cc86:	47a0      	blx	r4
	}
	
	xTaskCreate(vTask_MOTORCONTROL,NULL,(uint16_t)1300,NULL,1, &motorTask);
   1cc88:	4a1b      	ldr	r2, [pc, #108]	; (1ccf8 <start_motor_service+0x318>)
   1cc8a:	481c      	ldr	r0, [pc, #112]	; (1ccfc <start_motor_service+0x31c>)
   1cc8c:	4b1c      	ldr	r3, [pc, #112]	; (1cd00 <start_motor_service+0x320>)
   1cc8e:	9301      	str	r3, [sp, #4]
   1cc90:	2301      	movs	r3, #1
   1cc92:	9300      	str	r3, [sp, #0]
   1cc94:	2300      	movs	r3, #0
   1cc96:	2100      	movs	r1, #0
   1cc98:	4c11      	ldr	r4, [pc, #68]	; (1cce0 <start_motor_service+0x300>)
   1cc9a:	47a0      	blx	r4

}
   1cc9c:	46c0      	nop			; (mov r8, r8)
   1cc9e:	46bd      	mov	sp, r7
   1cca0:	b009      	add	sp, #36	; 0x24
   1cca2:	bd90      	pop	{r4, r7, pc}
   1cca4:	0001e689 	.word	0x0001e689
   1cca8:	0001e6bd 	.word	0x0001e6bd
   1ccac:	0001a765 	.word	0x0001a765
   1ccb0:	00022b7d 	.word	0x00022b7d
   1ccb4:	00022be1 	.word	0x00022be1
   1ccb8:	00019529 	.word	0x00019529
   1ccbc:	000236f1 	.word	0x000236f1
   1ccc0:	0001f805 	.word	0x0001f805
   1ccc4:	20000230 	.word	0x20000230
   1ccc8:	0001f8c1 	.word	0x0001f8c1
   1cccc:	20000234 	.word	0x20000234
   1ccd0:	00019591 	.word	0x00019591
   1ccd4:	0001d00d 	.word	0x0001d00d
   1ccd8:	0001c4e5 	.word	0x0001c4e5
   1ccdc:	0001a97d 	.word	0x0001a97d
   1cce0:	00020329 	.word	0x00020329
   1cce4:	0001a9e9 	.word	0x0001a9e9
   1cce8:	0001d31d 	.word	0x0001d31d
   1ccec:	2000023c 	.word	0x2000023c
   1ccf0:	2000062c 	.word	0x2000062c
   1ccf4:	00019a19 	.word	0x00019a19
   1ccf8:	00000514 	.word	0x00000514
   1ccfc:	0001c4f9 	.word	0x0001c4f9
   1cd00:	20000238 	.word	0x20000238

0001cd04 <motor_checkSleepElligible>:

bool motor_checkSleepElligible(void)
{
   1cd04:	b580      	push	{r7, lr}
   1cd06:	b082      	sub	sp, #8
   1cd08:	af00      	add	r7, sp, #0
	uint8_t j = 0;
   1cd0a:	1dfb      	adds	r3, r7, #7
   1cd0c:	2200      	movs	r2, #0
   1cd0e:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_WATER)
   1cd10:	4b4c      	ldr	r3, [pc, #304]	; (1ce44 <motor_checkSleepElligible+0x140>)
   1cd12:	795b      	ldrb	r3, [r3, #5]
   1cd14:	2b00      	cmp	r3, #0
   1cd16:	d00b      	beq.n	1cd30 <motor_checkSleepElligible+0x2c>
	{
		if (factory_settings_parameter_struct.ENABLE_GP)
   1cd18:	4b4a      	ldr	r3, [pc, #296]	; (1ce44 <motor_checkSleepElligible+0x140>)
   1cd1a:	791b      	ldrb	r3, [r3, #4]
   1cd1c:	2b00      	cmp	r3, #0
   1cd1e:	d003      	beq.n	1cd28 <motor_checkSleepElligible+0x24>
		{
			j = 19;
   1cd20:	1dfb      	adds	r3, r7, #7
   1cd22:	2213      	movs	r2, #19
   1cd24:	701a      	strb	r2, [r3, #0]
   1cd26:	e00e      	b.n	1cd46 <motor_checkSleepElligible+0x42>
		}
		else
		{
			j = 17;
   1cd28:	1dfb      	adds	r3, r7, #7
   1cd2a:	2211      	movs	r2, #17
   1cd2c:	701a      	strb	r2, [r3, #0]
   1cd2e:	e00a      	b.n	1cd46 <motor_checkSleepElligible+0x42>
		}
	}
	else
	{
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1cd30:	4b44      	ldr	r3, [pc, #272]	; (1ce44 <motor_checkSleepElligible+0x140>)
   1cd32:	785b      	ldrb	r3, [r3, #1]
   1cd34:	2b00      	cmp	r3, #0
   1cd36:	d003      	beq.n	1cd40 <motor_checkSleepElligible+0x3c>
		{
			j = 14;
   1cd38:	1dfb      	adds	r3, r7, #7
   1cd3a:	220e      	movs	r2, #14
   1cd3c:	701a      	strb	r2, [r3, #0]
   1cd3e:	e002      	b.n	1cd46 <motor_checkSleepElligible+0x42>
		}
		else
		{
			j = 12;
   1cd40:	1dfb      	adds	r3, r7, #7
   1cd42:	220c      	movs	r2, #12
   1cd44:	701a      	strb	r2, [r3, #0]
		}
	}
	
	bool event=true;
   1cd46:	1dbb      	adds	r3, r7, #6
   1cd48:	2201      	movs	r2, #1
   1cd4a:	701a      	strb	r2, [r3, #0]
	while(j--)
   1cd4c:	e00c      	b.n	1cd68 <motor_checkSleepElligible+0x64>
	{
		if(!simEventTemp[j])
   1cd4e:	1dfb      	adds	r3, r7, #7
   1cd50:	781b      	ldrb	r3, [r3, #0]
   1cd52:	4a3d      	ldr	r2, [pc, #244]	; (1ce48 <motor_checkSleepElligible+0x144>)
   1cd54:	5cd3      	ldrb	r3, [r2, r3]
   1cd56:	2201      	movs	r2, #1
   1cd58:	4053      	eors	r3, r2
   1cd5a:	b2db      	uxtb	r3, r3
   1cd5c:	2b00      	cmp	r3, #0
   1cd5e:	d003      	beq.n	1cd68 <motor_checkSleepElligible+0x64>
		{
			event=false;
   1cd60:	1dbb      	adds	r3, r7, #6
   1cd62:	2200      	movs	r2, #0
   1cd64:	701a      	strb	r2, [r3, #0]
			break;
   1cd66:	e006      	b.n	1cd76 <motor_checkSleepElligible+0x72>
	while(j--)
   1cd68:	1dfb      	adds	r3, r7, #7
   1cd6a:	781b      	ldrb	r3, [r3, #0]
   1cd6c:	1dfa      	adds	r2, r7, #7
   1cd6e:	1e59      	subs	r1, r3, #1
   1cd70:	7011      	strb	r1, [r2, #0]
   1cd72:	2b00      	cmp	r3, #0
   1cd74:	d1eb      	bne.n	1cd4e <motor_checkSleepElligible+0x4a>
		}
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
   1cd76:	4b33      	ldr	r3, [pc, #204]	; (1ce44 <motor_checkSleepElligible+0x140>)
   1cd78:	78db      	ldrb	r3, [r3, #3]
   1cd7a:	2b00      	cmp	r3, #0
   1cd7c:	d00e      	beq.n	1cd9c <motor_checkSleepElligible+0x98>
	{
		if(event && m2mEvent_arr[0] == ME_WAITREGISTER || m2mEvent_arr[1]==ME_WAITREGISTER)
   1cd7e:	1dbb      	adds	r3, r7, #6
   1cd80:	781b      	ldrb	r3, [r3, #0]
   1cd82:	2b00      	cmp	r3, #0
   1cd84:	d003      	beq.n	1cd8e <motor_checkSleepElligible+0x8a>
   1cd86:	4b31      	ldr	r3, [pc, #196]	; (1ce4c <motor_checkSleepElligible+0x148>)
   1cd88:	781b      	ldrb	r3, [r3, #0]
   1cd8a:	2b01      	cmp	r3, #1
   1cd8c:	d003      	beq.n	1cd96 <motor_checkSleepElligible+0x92>
   1cd8e:	4b2f      	ldr	r3, [pc, #188]	; (1ce4c <motor_checkSleepElligible+0x148>)
   1cd90:	785b      	ldrb	r3, [r3, #1]
   1cd92:	2b01      	cmp	r3, #1
   1cd94:	d102      	bne.n	1cd9c <motor_checkSleepElligible+0x98>
		{
			event = false;
   1cd96:	1dbb      	adds	r3, r7, #6
   1cd98:	2200      	movs	r2, #0
   1cd9a:	701a      	strb	r2, [r3, #0]
		}
	}
	
	return ((getAllPhaseState()==AC_OFF) && !eventOccured && event && !waitStableLineOn && !singlePhasingTimerOn
   1cd9c:	4b2c      	ldr	r3, [pc, #176]	; (1ce50 <motor_checkSleepElligible+0x14c>)
   1cd9e:	4798      	blx	r3
   1cda0:	1e03      	subs	r3, r0, #0
	&& !startTimerOn && !startSequenceOn && !stopSequenceOn && !firstEvent && !buttonEventOccured && (lastButtonEvent==0));
   1cda2:	d145      	bne.n	1ce30 <motor_checkSleepElligible+0x12c>
	return ((getAllPhaseState()==AC_OFF) && !eventOccured && event && !waitStableLineOn && !singlePhasingTimerOn
   1cda4:	4b2b      	ldr	r3, [pc, #172]	; (1ce54 <motor_checkSleepElligible+0x150>)
   1cda6:	781b      	ldrb	r3, [r3, #0]
   1cda8:	b2db      	uxtb	r3, r3
   1cdaa:	2201      	movs	r2, #1
   1cdac:	4053      	eors	r3, r2
   1cdae:	b2db      	uxtb	r3, r3
   1cdb0:	2b00      	cmp	r3, #0
   1cdb2:	d03d      	beq.n	1ce30 <motor_checkSleepElligible+0x12c>
   1cdb4:	1dbb      	adds	r3, r7, #6
   1cdb6:	781b      	ldrb	r3, [r3, #0]
   1cdb8:	2b00      	cmp	r3, #0
   1cdba:	d039      	beq.n	1ce30 <motor_checkSleepElligible+0x12c>
   1cdbc:	4b26      	ldr	r3, [pc, #152]	; (1ce58 <motor_checkSleepElligible+0x154>)
   1cdbe:	781b      	ldrb	r3, [r3, #0]
   1cdc0:	2201      	movs	r2, #1
   1cdc2:	4053      	eors	r3, r2
   1cdc4:	b2db      	uxtb	r3, r3
   1cdc6:	2b00      	cmp	r3, #0
   1cdc8:	d032      	beq.n	1ce30 <motor_checkSleepElligible+0x12c>
   1cdca:	4b24      	ldr	r3, [pc, #144]	; (1ce5c <motor_checkSleepElligible+0x158>)
   1cdcc:	781b      	ldrb	r3, [r3, #0]
   1cdce:	2201      	movs	r2, #1
   1cdd0:	4053      	eors	r3, r2
   1cdd2:	b2db      	uxtb	r3, r3
   1cdd4:	2b00      	cmp	r3, #0
   1cdd6:	d02b      	beq.n	1ce30 <motor_checkSleepElligible+0x12c>
	&& !startTimerOn && !startSequenceOn && !stopSequenceOn && !firstEvent && !buttonEventOccured && (lastButtonEvent==0));
   1cdd8:	4b21      	ldr	r3, [pc, #132]	; (1ce60 <motor_checkSleepElligible+0x15c>)
   1cdda:	781b      	ldrb	r3, [r3, #0]
   1cddc:	2201      	movs	r2, #1
   1cdde:	4053      	eors	r3, r2
   1cde0:	b2db      	uxtb	r3, r3
   1cde2:	2b00      	cmp	r3, #0
   1cde4:	d024      	beq.n	1ce30 <motor_checkSleepElligible+0x12c>
   1cde6:	4b1f      	ldr	r3, [pc, #124]	; (1ce64 <motor_checkSleepElligible+0x160>)
   1cde8:	781b      	ldrb	r3, [r3, #0]
   1cdea:	2201      	movs	r2, #1
   1cdec:	4053      	eors	r3, r2
   1cdee:	b2db      	uxtb	r3, r3
   1cdf0:	2b00      	cmp	r3, #0
   1cdf2:	d01d      	beq.n	1ce30 <motor_checkSleepElligible+0x12c>
   1cdf4:	4b1c      	ldr	r3, [pc, #112]	; (1ce68 <motor_checkSleepElligible+0x164>)
   1cdf6:	781b      	ldrb	r3, [r3, #0]
   1cdf8:	2201      	movs	r2, #1
   1cdfa:	4053      	eors	r3, r2
   1cdfc:	b2db      	uxtb	r3, r3
   1cdfe:	2b00      	cmp	r3, #0
   1ce00:	d016      	beq.n	1ce30 <motor_checkSleepElligible+0x12c>
   1ce02:	4b1a      	ldr	r3, [pc, #104]	; (1ce6c <motor_checkSleepElligible+0x168>)
   1ce04:	781b      	ldrb	r3, [r3, #0]
   1ce06:	b2db      	uxtb	r3, r3
   1ce08:	2201      	movs	r2, #1
   1ce0a:	4053      	eors	r3, r2
   1ce0c:	b2db      	uxtb	r3, r3
   1ce0e:	2b00      	cmp	r3, #0
   1ce10:	d00e      	beq.n	1ce30 <motor_checkSleepElligible+0x12c>
   1ce12:	4b17      	ldr	r3, [pc, #92]	; (1ce70 <motor_checkSleepElligible+0x16c>)
   1ce14:	781b      	ldrb	r3, [r3, #0]
   1ce16:	b2db      	uxtb	r3, r3
   1ce18:	2201      	movs	r2, #1
   1ce1a:	4053      	eors	r3, r2
   1ce1c:	b2db      	uxtb	r3, r3
   1ce1e:	2b00      	cmp	r3, #0
   1ce20:	d006      	beq.n	1ce30 <motor_checkSleepElligible+0x12c>
   1ce22:	4b14      	ldr	r3, [pc, #80]	; (1ce74 <motor_checkSleepElligible+0x170>)
   1ce24:	781b      	ldrb	r3, [r3, #0]
   1ce26:	b2db      	uxtb	r3, r3
   1ce28:	2b00      	cmp	r3, #0
   1ce2a:	d101      	bne.n	1ce30 <motor_checkSleepElligible+0x12c>
   1ce2c:	2301      	movs	r3, #1
   1ce2e:	e000      	b.n	1ce32 <motor_checkSleepElligible+0x12e>
   1ce30:	2300      	movs	r3, #0
   1ce32:	1c1a      	adds	r2, r3, #0
   1ce34:	2301      	movs	r3, #1
   1ce36:	4013      	ands	r3, r2
   1ce38:	b2db      	uxtb	r3, r3
	
}
   1ce3a:	0018      	movs	r0, r3
   1ce3c:	46bd      	mov	sp, r7
   1ce3e:	b002      	add	sp, #8
   1ce40:	bd80      	pop	{r7, pc}
   1ce42:	46c0      	nop			; (mov r8, r8)
   1ce44:	2000062c 	.word	0x2000062c
   1ce48:	20000718 	.word	0x20000718
   1ce4c:	200007c0 	.word	0x200007c0
   1ce50:	0001b2a9 	.word	0x0001b2a9
   1ce54:	2000072e 	.word	0x2000072e
   1ce58:	2000080d 	.word	0x2000080d
   1ce5c:	20000791 	.word	0x20000791
   1ce60:	2000079a 	.word	0x2000079a
   1ce64:	20000799 	.word	0x20000799
   1ce68:	20000788 	.word	0x20000788
   1ce6c:	20000776 	.word	0x20000776
   1ce70:	2000079f 	.word	0x2000079f
   1ce74:	20000780 	.word	0x20000780

0001ce78 <configure_ac>:


void configure_ac(void)
{
   1ce78:	b580      	push	{r7, lr}
   1ce7a:	b08a      	sub	sp, #40	; 0x28
   1ce7c:	af00      	add	r7, sp, #0
	struct ac_config conf_ac;
	struct ac_events conf_ac_events = {{0}};
   1ce7e:	231c      	movs	r3, #28
   1ce80:	18fb      	adds	r3, r7, r3
   1ce82:	0018      	movs	r0, r3
   1ce84:	2305      	movs	r3, #5
   1ce86:	001a      	movs	r2, r3
   1ce88:	2100      	movs	r1, #0
   1ce8a:	4b2c      	ldr	r3, [pc, #176]	; (1cf3c <configure_ac+0xc4>)
   1ce8c:	4798      	blx	r3
	
	struct ac_chan_config conf_ac_channel;
	struct port_config pin_conf;
	
	ac_get_config_defaults(&conf_ac);
   1ce8e:	2324      	movs	r3, #36	; 0x24
   1ce90:	18fb      	adds	r3, r7, r3
   1ce92:	0018      	movs	r0, r3
   1ce94:	4b2a      	ldr	r3, [pc, #168]	; (1cf40 <configure_ac+0xc8>)
   1ce96:	4798      	blx	r3
	conf_ac.run_in_standby[0] = true;
   1ce98:	2324      	movs	r3, #36	; 0x24
   1ce9a:	18fb      	adds	r3, r7, r3
   1ce9c:	2201      	movs	r2, #1
   1ce9e:	701a      	strb	r2, [r3, #0]
	conf_ac.dig_source_generator = GCLK_GENERATOR_6;
   1cea0:	2324      	movs	r3, #36	; 0x24
   1cea2:	18fb      	adds	r3, r7, r3
   1cea4:	2206      	movs	r2, #6
   1cea6:	705a      	strb	r2, [r3, #1]
	ac_init(&ac_instance, AC, &conf_ac);
   1cea8:	2324      	movs	r3, #36	; 0x24
   1ceaa:	18fa      	adds	r2, r7, r3
   1ceac:	4925      	ldr	r1, [pc, #148]	; (1cf44 <configure_ac+0xcc>)
   1ceae:	4b26      	ldr	r3, [pc, #152]	; (1cf48 <configure_ac+0xd0>)
   1ceb0:	0018      	movs	r0, r3
   1ceb2:	4b26      	ldr	r3, [pc, #152]	; (1cf4c <configure_ac+0xd4>)
   1ceb4:	4798      	blx	r3
	
	conf_ac_channel.sample_mode = AC_CHAN_MODE_CONTINUOUS;
   1ceb6:	1d3b      	adds	r3, r7, #4
   1ceb8:	2200      	movs	r2, #0
   1ceba:	701a      	strb	r2, [r3, #0]
	conf_ac_channel.filter = AC_CHAN_FILTER_NONE;
   1cebc:	1d3b      	adds	r3, r7, #4
   1cebe:	2200      	movs	r2, #0
   1cec0:	605a      	str	r2, [r3, #4]
	conf_ac_channel.enable_hysteresis = false;
   1cec2:	1d3b      	adds	r3, r7, #4
   1cec4:	2200      	movs	r2, #0
   1cec6:	721a      	strb	r2, [r3, #8]
	conf_ac_channel.output_mode = AC_CHAN_OUTPUT_INTERNAL;
   1cec8:	1d3b      	adds	r3, r7, #4
   1ceca:	2200      	movs	r2, #0
   1cecc:	60da      	str	r2, [r3, #12]
	conf_ac_channel.positive_input = AC_CHAN_POS_MUX_PIN0;
   1cece:	1d3b      	adds	r3, r7, #4
   1ced0:	2200      	movs	r2, #0
   1ced2:	821a      	strh	r2, [r3, #16]
	conf_ac_channel.negative_input = AC_CHAN_NEG_MUX_SCALED_VCC;
   1ced4:	1d3b      	adds	r3, r7, #4
   1ced6:	22a0      	movs	r2, #160	; 0xa0
   1ced8:	00d2      	lsls	r2, r2, #3
   1ceda:	825a      	strh	r2, [r3, #18]
	/* Detect threshold 0.515625V */
	conf_ac_channel.vcc_scale_factor = 45;
   1cedc:	1d3b      	adds	r3, r7, #4
   1cede:	222d      	movs	r2, #45	; 0x2d
   1cee0:	751a      	strb	r2, [r3, #20]
	conf_ac_channel.interrupt_selection = AC_CHAN_INTERRUPT_SELECTION_TOGGLE;
   1cee2:	1d3b      	adds	r3, r7, #4
   1cee4:	2200      	movs	r2, #0
   1cee6:	755a      	strb	r2, [r3, #21]
	ac_chan_set_config(&ac_instance, AC_CHAN_CHANNEL_0, &conf_ac_channel);
   1cee8:	1d3a      	adds	r2, r7, #4
   1ceea:	4b17      	ldr	r3, [pc, #92]	; (1cf48 <configure_ac+0xd0>)
   1ceec:	2100      	movs	r1, #0
   1ceee:	0018      	movs	r0, r3
   1cef0:	4b17      	ldr	r3, [pc, #92]	; (1cf50 <configure_ac+0xd8>)
   1cef2:	4798      	blx	r3
	ac_chan_enable(&ac_instance, AC_CHAN_CHANNEL_0);
   1cef4:	4b14      	ldr	r3, [pc, #80]	; (1cf48 <configure_ac+0xd0>)
   1cef6:	2100      	movs	r1, #0
   1cef8:	0018      	movs	r0, r3
   1cefa:	4b16      	ldr	r3, [pc, #88]	; (1cf54 <configure_ac+0xdc>)
   1cefc:	4798      	blx	r3
	
	conf_ac_events.on_event_sample[0] = true;
   1cefe:	231c      	movs	r3, #28
   1cf00:	18fb      	adds	r3, r7, r3
   1cf02:	2201      	movs	r2, #1
   1cf04:	70da      	strb	r2, [r3, #3]
	ac_enable_events(&ac_instance ,&conf_ac_events);
   1cf06:	231c      	movs	r3, #28
   1cf08:	18fa      	adds	r2, r7, r3
   1cf0a:	4b0f      	ldr	r3, [pc, #60]	; (1cf48 <configure_ac+0xd0>)
   1cf0c:	0011      	movs	r1, r2
   1cf0e:	0018      	movs	r0, r3
   1cf10:	4b11      	ldr	r3, [pc, #68]	; (1cf58 <configure_ac+0xe0>)
   1cf12:	4798      	blx	r3
	
	ac_enable(&ac_instance);
   1cf14:	4b0c      	ldr	r3, [pc, #48]	; (1cf48 <configure_ac+0xd0>)
   1cf16:	0018      	movs	r0, r3
   1cf18:	4b10      	ldr	r3, [pc, #64]	; (1cf5c <configure_ac+0xe4>)
   1cf1a:	4798      	blx	r3
	
	ac_register_callback(&ac_instance, ac_detect_callback,AC_CALLBACK_COMPARATOR_0);
   1cf1c:	4910      	ldr	r1, [pc, #64]	; (1cf60 <configure_ac+0xe8>)
   1cf1e:	4b0a      	ldr	r3, [pc, #40]	; (1cf48 <configure_ac+0xd0>)
   1cf20:	2200      	movs	r2, #0
   1cf22:	0018      	movs	r0, r3
   1cf24:	4b0f      	ldr	r3, [pc, #60]	; (1cf64 <configure_ac+0xec>)
   1cf26:	4798      	blx	r3
	ac_enable_callback(&ac_instance, AC_CALLBACK_COMPARATOR_0);
   1cf28:	4b07      	ldr	r3, [pc, #28]	; (1cf48 <configure_ac+0xd0>)
   1cf2a:	2100      	movs	r1, #0
   1cf2c:	0018      	movs	r0, r3
   1cf2e:	4b0e      	ldr	r3, [pc, #56]	; (1cf68 <configure_ac+0xf0>)
   1cf30:	4798      	blx	r3
}
   1cf32:	46c0      	nop			; (mov r8, r8)
   1cf34:	46bd      	mov	sp, r7
   1cf36:	b00a      	add	sp, #40	; 0x28
   1cf38:	bd80      	pop	{r7, pc}
   1cf3a:	46c0      	nop			; (mov r8, r8)
   1cf3c:	000298b7 	.word	0x000298b7
   1cf40:	00018ead 	.word	0x00018ead
   1cf44:	42004400 	.word	0x42004400
   1cf48:	2000088c 	.word	0x2000088c
   1cf4c:	0001d4b1 	.word	0x0001d4b1
   1cf50:	0001d591 	.word	0x0001d591
   1cf54:	00018ffd 	.word	0x00018ffd
   1cf58:	00018f1d 	.word	0x00018f1d
   1cf5c:	00018ee5 	.word	0x00018ee5
   1cf60:	0001cffd 	.word	0x0001cffd
   1cf64:	00022fa9 	.word	0x00022fa9
   1cf68:	00019165 	.word	0x00019165

0001cf6c <configure_rtc>:

void configure_rtc(void)
{
   1cf6c:	b580      	push	{r7, lr}
   1cf6e:	b088      	sub	sp, #32
   1cf70:	af00      	add	r7, sp, #0
	struct rtc_count_config conf_rtc_count;
	struct rtc_count_events conf_rtc_events = {0};
   1cf72:	1d3b      	adds	r3, r7, #4
   1cf74:	0018      	movs	r0, r3
   1cf76:	230b      	movs	r3, #11
   1cf78:	001a      	movs	r2, r3
   1cf7a:	2100      	movs	r1, #0
   1cf7c:	4b17      	ldr	r3, [pc, #92]	; (1cfdc <configure_rtc+0x70>)
   1cf7e:	4798      	blx	r3
	
	rtc_count_get_config_defaults(&conf_rtc_count);
   1cf80:	2310      	movs	r3, #16
   1cf82:	18fb      	adds	r3, r7, r3
   1cf84:	0018      	movs	r0, r3
   1cf86:	4b16      	ldr	r3, [pc, #88]	; (1cfe0 <configure_rtc+0x74>)
   1cf88:	4798      	blx	r3
	conf_rtc_count.prescaler  = RTC_COUNT_PRESCALER_DIV_1;
   1cf8a:	2310      	movs	r3, #16
   1cf8c:	18fb      	adds	r3, r7, r3
   1cf8e:	2200      	movs	r2, #0
   1cf90:	801a      	strh	r2, [r3, #0]
	conf_rtc_count.mode       = RTC_COUNT_MODE_16BIT;
   1cf92:	2310      	movs	r3, #16
   1cf94:	18fb      	adds	r3, r7, r3
   1cf96:	2200      	movs	r2, #0
   1cf98:	709a      	strb	r2, [r3, #2]
	conf_rtc_count.continuously_update =  true;
   1cf9a:	2310      	movs	r3, #16
   1cf9c:	18fb      	adds	r3, r7, r3
   1cf9e:	2201      	movs	r2, #1
   1cfa0:	711a      	strb	r2, [r3, #4]
	rtc_count_init(&rtc_instance, RTC, &conf_rtc_count);
   1cfa2:	2310      	movs	r3, #16
   1cfa4:	18fa      	adds	r2, r7, r3
   1cfa6:	490f      	ldr	r1, [pc, #60]	; (1cfe4 <configure_rtc+0x78>)
   1cfa8:	4b0f      	ldr	r3, [pc, #60]	; (1cfe8 <configure_rtc+0x7c>)
   1cfaa:	0018      	movs	r0, r3
   1cfac:	4b0f      	ldr	r3, [pc, #60]	; (1cfec <configure_rtc+0x80>)
   1cfae:	4798      	blx	r3
	rtc_count_set_period(&rtc_instance, 10);
   1cfb0:	4b0d      	ldr	r3, [pc, #52]	; (1cfe8 <configure_rtc+0x7c>)
   1cfb2:	210a      	movs	r1, #10
   1cfb4:	0018      	movs	r0, r3
   1cfb6:	4b0e      	ldr	r3, [pc, #56]	; (1cff0 <configure_rtc+0x84>)
   1cfb8:	4798      	blx	r3
	conf_rtc_events.generate_event_on_overflow = true;
   1cfba:	1d3b      	adds	r3, r7, #4
   1cfbc:	2201      	movs	r2, #1
   1cfbe:	701a      	strb	r2, [r3, #0]
	
	rtc_count_enable_events(&rtc_instance, &conf_rtc_events);
   1cfc0:	1d3a      	adds	r2, r7, #4
   1cfc2:	4b09      	ldr	r3, [pc, #36]	; (1cfe8 <configure_rtc+0x7c>)
   1cfc4:	0011      	movs	r1, r2
   1cfc6:	0018      	movs	r0, r3
   1cfc8:	4b0a      	ldr	r3, [pc, #40]	; (1cff4 <configure_rtc+0x88>)
   1cfca:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
   1cfcc:	4b06      	ldr	r3, [pc, #24]	; (1cfe8 <configure_rtc+0x7c>)
   1cfce:	0018      	movs	r0, r3
   1cfd0:	4b09      	ldr	r3, [pc, #36]	; (1cff8 <configure_rtc+0x8c>)
   1cfd2:	4798      	blx	r3
}
   1cfd4:	46c0      	nop			; (mov r8, r8)
   1cfd6:	46bd      	mov	sp, r7
   1cfd8:	b008      	add	sp, #32
   1cfda:	bd80      	pop	{r7, pc}
   1cfdc:	000298b7 	.word	0x000298b7
   1cfe0:	0001966d 	.word	0x0001966d
   1cfe4:	40001400 	.word	0x40001400
   1cfe8:	20000868 	.word	0x20000868
   1cfec:	0001ead9 	.word	0x0001ead9
   1cff0:	0001ebf5 	.word	0x0001ebf5
   1cff4:	000196c9 	.word	0x000196c9
   1cff8:	0001e8b1 	.word	0x0001e8b1

0001cffc <ac_detect_callback>:

void ac_detect_callback(struct ac_module *const module_inst)
{
   1cffc:	b580      	push	{r7, lr}
   1cffe:	b082      	sub	sp, #8
   1d000:	af00      	add	r7, sp, #0
   1d002:	6078      	str	r0, [r7, #4]
	;
	//eventOccured = true;
}
   1d004:	46c0      	nop			; (mov r8, r8)
   1d006:	46bd      	mov	sp, r7
   1d008:	b002      	add	sp, #8
   1d00a:	bd80      	pop	{r7, pc}

0001d00c <motor_feedback_callback>:

static void motor_feedback_callback(void)
{
   1d00c:	b580      	push	{r7, lr}
   1d00e:	af00      	add	r7, sp, #0
	eventOccured = true;
   1d010:	4b06      	ldr	r3, [pc, #24]	; (1d02c <motor_feedback_callback+0x20>)
   1d012:	2201      	movs	r2, #1
   1d014:	701a      	strb	r2, [r3, #0]
	motorFeedbackEvent=true;
   1d016:	4b06      	ldr	r3, [pc, #24]	; (1d030 <motor_feedback_callback+0x24>)
   1d018:	2201      	movs	r2, #1
   1d01a:	701a      	strb	r2, [r3, #0]
	motorFeedbackEventTime=xTaskGetTickCountFromISR();
   1d01c:	4b05      	ldr	r3, [pc, #20]	; (1d034 <motor_feedback_callback+0x28>)
   1d01e:	4798      	blx	r3
   1d020:	0002      	movs	r2, r0
   1d022:	4b05      	ldr	r3, [pc, #20]	; (1d038 <motor_feedback_callback+0x2c>)
   1d024:	601a      	str	r2, [r3, #0]
}
   1d026:	46c0      	nop			; (mov r8, r8)
   1d028:	46bd      	mov	sp, r7
   1d02a:	bd80      	pop	{r7, pc}
   1d02c:	2000072e 	.word	0x2000072e
   1d030:	2000078a 	.word	0x2000078a
   1d034:	000209e9 	.word	0x000209e9
   1d038:	2000085c 	.word	0x2000085c

0001d03c <configure_event>:

void configure_event(void)
{
   1d03c:	b580      	push	{r7, lr}
   1d03e:	b082      	sub	sp, #8
   1d040:	af00      	add	r7, sp, #0
	struct events_config conf_event;
	events_get_config_defaults(&conf_event);
   1d042:	1d3b      	adds	r3, r7, #4
   1d044:	0018      	movs	r0, r3
   1d046:	4b0d      	ldr	r3, [pc, #52]	; (1d07c <configure_event+0x40>)
   1d048:	4798      	blx	r3
	conf_event.generator = EVSYS_ID_GEN_RTC_OVF;
   1d04a:	1d3b      	adds	r3, r7, #4
   1d04c:	2203      	movs	r2, #3
   1d04e:	709a      	strb	r2, [r3, #2]
	conf_event.edge_detect = EVENTS_EDGE_DETECT_NONE;
   1d050:	1d3b      	adds	r3, r7, #4
   1d052:	2200      	movs	r2, #0
   1d054:	701a      	strb	r2, [r3, #0]
	conf_event.path       = EVENTS_PATH_ASYNCHRONOUS;
   1d056:	1d3b      	adds	r3, r7, #4
   1d058:	2202      	movs	r2, #2
   1d05a:	705a      	strb	r2, [r3, #1]
	
	events_allocate(&resource, &conf_event);
   1d05c:	1d3a      	adds	r2, r7, #4
   1d05e:	4b08      	ldr	r3, [pc, #32]	; (1d080 <configure_event+0x44>)
   1d060:	0011      	movs	r1, r2
   1d062:	0018      	movs	r0, r3
   1d064:	4b07      	ldr	r3, [pc, #28]	; (1d084 <configure_event+0x48>)
   1d066:	4798      	blx	r3
	events_attach_user(&resource, EVSYS_ID_USER_AC_SOC_0);
   1d068:	4b05      	ldr	r3, [pc, #20]	; (1d080 <configure_event+0x44>)
   1d06a:	2119      	movs	r1, #25
   1d06c:	0018      	movs	r0, r3
   1d06e:	4b06      	ldr	r3, [pc, #24]	; (1d088 <configure_event+0x4c>)
   1d070:	4798      	blx	r3
}
   1d072:	46c0      	nop			; (mov r8, r8)
   1d074:	46bd      	mov	sp, r7
   1d076:	b002      	add	sp, #8
   1d078:	bd80      	pop	{r7, pc}
   1d07a:	46c0      	nop			; (mov r8, r8)
   1d07c:	00022e69 	.word	0x00022e69
   1d080:	20000884 	.word	0x20000884
   1d084:	00022e91 	.word	0x00022e91
   1d088:	00022f59 	.word	0x00022f59

0001d08c <operateOnButtonEvent>:

void operateOnButtonEvent(void)
{
   1d08c:	b580      	push	{r7, lr}
   1d08e:	af00      	add	r7, sp, #0
	buttonEventOccured=false;
   1d090:	4b28      	ldr	r3, [pc, #160]	; (1d134 <operateOnButtonEvent+0xa8>)
   1d092:	2200      	movs	r2, #0
   1d094:	701a      	strb	r2, [r3, #0]
	if (START_BUTTON_INPUT_COMES)
   1d096:	2026      	movs	r0, #38	; 0x26
   1d098:	4b27      	ldr	r3, [pc, #156]	; (1d138 <operateOnButtonEvent+0xac>)
   1d09a:	4798      	blx	r3
   1d09c:	0003      	movs	r3, r0
   1d09e:	001a      	movs	r2, r3
   1d0a0:	2301      	movs	r3, #1
   1d0a2:	4053      	eors	r3, r2
   1d0a4:	b2db      	uxtb	r3, r3
   1d0a6:	2b00      	cmp	r3, #0
   1d0a8:	d008      	beq.n	1d0bc <operateOnButtonEvent+0x30>
	{
		lastPressTime=xTaskGetTickCount();
   1d0aa:	4b24      	ldr	r3, [pc, #144]	; (1d13c <operateOnButtonEvent+0xb0>)
   1d0ac:	4798      	blx	r3
   1d0ae:	0002      	movs	r2, r0
   1d0b0:	4b23      	ldr	r3, [pc, #140]	; (1d140 <operateOnButtonEvent+0xb4>)
   1d0b2:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTSTART;
   1d0b4:	4b23      	ldr	r3, [pc, #140]	; (1d144 <operateOnButtonEvent+0xb8>)
   1d0b6:	2201      	movs	r2, #1
   1d0b8:	701a      	strb	r2, [r3, #0]
	else if(LCDSHOW_BUTTON_INPUT_COMES)
	{
		lastPressTime= xTaskGetTickCount();
		lastButtonEvent=BTNEVENTLCDSHOW;
	}
}
   1d0ba:	e037      	b.n	1d12c <operateOnButtonEvent+0xa0>
	else if (STOP_BUTTON_INPUT_COMES)
   1d0bc:	2025      	movs	r0, #37	; 0x25
   1d0be:	4b1e      	ldr	r3, [pc, #120]	; (1d138 <operateOnButtonEvent+0xac>)
   1d0c0:	4798      	blx	r3
   1d0c2:	0003      	movs	r3, r0
   1d0c4:	001a      	movs	r2, r3
   1d0c6:	2301      	movs	r3, #1
   1d0c8:	4053      	eors	r3, r2
   1d0ca:	b2db      	uxtb	r3, r3
   1d0cc:	2b00      	cmp	r3, #0
   1d0ce:	d008      	beq.n	1d0e2 <operateOnButtonEvent+0x56>
		lastPressTime=xTaskGetTickCount();
   1d0d0:	4b1a      	ldr	r3, [pc, #104]	; (1d13c <operateOnButtonEvent+0xb0>)
   1d0d2:	4798      	blx	r3
   1d0d4:	0002      	movs	r2, r0
   1d0d6:	4b1a      	ldr	r3, [pc, #104]	; (1d140 <operateOnButtonEvent+0xb4>)
   1d0d8:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTSTOP;
   1d0da:	4b1a      	ldr	r3, [pc, #104]	; (1d144 <operateOnButtonEvent+0xb8>)
   1d0dc:	2202      	movs	r2, #2
   1d0de:	701a      	strb	r2, [r3, #0]
}
   1d0e0:	e024      	b.n	1d12c <operateOnButtonEvent+0xa0>
	else if (AUTO_BUTTON_INPUT_COMES)
   1d0e2:	201c      	movs	r0, #28
   1d0e4:	4b14      	ldr	r3, [pc, #80]	; (1d138 <operateOnButtonEvent+0xac>)
   1d0e6:	4798      	blx	r3
   1d0e8:	0003      	movs	r3, r0
   1d0ea:	001a      	movs	r2, r3
   1d0ec:	2301      	movs	r3, #1
   1d0ee:	4053      	eors	r3, r2
   1d0f0:	b2db      	uxtb	r3, r3
   1d0f2:	2b00      	cmp	r3, #0
   1d0f4:	d008      	beq.n	1d108 <operateOnButtonEvent+0x7c>
		lastPressTime=xTaskGetTickCount();
   1d0f6:	4b11      	ldr	r3, [pc, #68]	; (1d13c <operateOnButtonEvent+0xb0>)
   1d0f8:	4798      	blx	r3
   1d0fa:	0002      	movs	r2, r0
   1d0fc:	4b10      	ldr	r3, [pc, #64]	; (1d140 <operateOnButtonEvent+0xb4>)
   1d0fe:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTAUTO;
   1d100:	4b10      	ldr	r3, [pc, #64]	; (1d144 <operateOnButtonEvent+0xb8>)
   1d102:	2203      	movs	r2, #3
   1d104:	701a      	strb	r2, [r3, #0]
}
   1d106:	e011      	b.n	1d12c <operateOnButtonEvent+0xa0>
	else if(LCDSHOW_BUTTON_INPUT_COMES)
   1d108:	2029      	movs	r0, #41	; 0x29
   1d10a:	4b0b      	ldr	r3, [pc, #44]	; (1d138 <operateOnButtonEvent+0xac>)
   1d10c:	4798      	blx	r3
   1d10e:	0003      	movs	r3, r0
   1d110:	001a      	movs	r2, r3
   1d112:	2301      	movs	r3, #1
   1d114:	4053      	eors	r3, r2
   1d116:	b2db      	uxtb	r3, r3
   1d118:	2b00      	cmp	r3, #0
   1d11a:	d007      	beq.n	1d12c <operateOnButtonEvent+0xa0>
		lastPressTime= xTaskGetTickCount();
   1d11c:	4b07      	ldr	r3, [pc, #28]	; (1d13c <operateOnButtonEvent+0xb0>)
   1d11e:	4798      	blx	r3
   1d120:	0002      	movs	r2, r0
   1d122:	4b07      	ldr	r3, [pc, #28]	; (1d140 <operateOnButtonEvent+0xb4>)
   1d124:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTLCDSHOW;
   1d126:	4b07      	ldr	r3, [pc, #28]	; (1d144 <operateOnButtonEvent+0xb8>)
   1d128:	2204      	movs	r2, #4
   1d12a:	701a      	strb	r2, [r3, #0]
}
   1d12c:	46c0      	nop			; (mov r8, r8)
   1d12e:	46bd      	mov	sp, r7
   1d130:	bd80      	pop	{r7, pc}
   1d132:	46c0      	nop			; (mov r8, r8)
   1d134:	2000079f 	.word	0x2000079f
   1d138:	0001954d 	.word	0x0001954d
   1d13c:	000209cd 	.word	0x000209cd
   1d140:	20000768 	.word	0x20000768
   1d144:	20000780 	.word	0x20000780

0001d148 <buttonFilter>:

void buttonFilter(void)
{
   1d148:	b580      	push	{r7, lr}
   1d14a:	af00      	add	r7, sp, #0
	//&& xTaskGetTickCount() - lastPressTime > 30
	if(lastButtonEvent>0)
   1d14c:	4b47      	ldr	r3, [pc, #284]	; (1d26c <buttonFilter+0x124>)
   1d14e:	781b      	ldrb	r3, [r3, #0]
   1d150:	b2db      	uxtb	r3, r3
   1d152:	2b00      	cmp	r3, #0
   1d154:	d100      	bne.n	1d158 <buttonFilter+0x10>
   1d156:	e086      	b.n	1d266 <buttonFilter+0x11e>
	{
		if(lastButtonEvent==BTNEVENTSTART && START_BUTTON_INPUT_COMES)
   1d158:	4b44      	ldr	r3, [pc, #272]	; (1d26c <buttonFilter+0x124>)
   1d15a:	781b      	ldrb	r3, [r3, #0]
   1d15c:	b2db      	uxtb	r3, r3
   1d15e:	2b01      	cmp	r3, #1
   1d160:	d111      	bne.n	1d186 <buttonFilter+0x3e>
   1d162:	2026      	movs	r0, #38	; 0x26
   1d164:	4b42      	ldr	r3, [pc, #264]	; (1d270 <buttonFilter+0x128>)
   1d166:	4798      	blx	r3
   1d168:	0003      	movs	r3, r0
   1d16a:	001a      	movs	r2, r3
   1d16c:	2301      	movs	r3, #1
   1d16e:	4053      	eors	r3, r2
   1d170:	b2db      	uxtb	r3, r3
   1d172:	2b00      	cmp	r3, #0
   1d174:	d007      	beq.n	1d186 <buttonFilter+0x3e>
		{
			lastButtonEvent=0;
   1d176:	4b3d      	ldr	r3, [pc, #244]	; (1d26c <buttonFilter+0x124>)
   1d178:	2200      	movs	r2, #0
   1d17a:	701a      	strb	r2, [r3, #0]
			startMotor(false,false);
   1d17c:	2100      	movs	r1, #0
   1d17e:	2000      	movs	r0, #0
   1d180:	4b3c      	ldr	r3, [pc, #240]	; (1d274 <buttonFilter+0x12c>)
   1d182:	4798      	blx	r3
   1d184:	e06f      	b.n	1d266 <buttonFilter+0x11e>
		}
		else if(lastButtonEvent==BTNEVENTSTOP && STOP_BUTTON_INPUT_COMES)
   1d186:	4b39      	ldr	r3, [pc, #228]	; (1d26c <buttonFilter+0x124>)
   1d188:	781b      	ldrb	r3, [r3, #0]
   1d18a:	b2db      	uxtb	r3, r3
   1d18c:	2b02      	cmp	r3, #2
   1d18e:	d112      	bne.n	1d1b6 <buttonFilter+0x6e>
   1d190:	2025      	movs	r0, #37	; 0x25
   1d192:	4b37      	ldr	r3, [pc, #220]	; (1d270 <buttonFilter+0x128>)
   1d194:	4798      	blx	r3
   1d196:	0003      	movs	r3, r0
   1d198:	001a      	movs	r2, r3
   1d19a:	2301      	movs	r3, #1
   1d19c:	4053      	eors	r3, r2
   1d19e:	b2db      	uxtb	r3, r3
   1d1a0:	2b00      	cmp	r3, #0
   1d1a2:	d008      	beq.n	1d1b6 <buttonFilter+0x6e>
		{
			lastButtonEvent=0;
   1d1a4:	4b31      	ldr	r3, [pc, #196]	; (1d26c <buttonFilter+0x124>)
   1d1a6:	2200      	movs	r2, #0
   1d1a8:	701a      	strb	r2, [r3, #0]
			stopMotor(false,false,true);
   1d1aa:	2201      	movs	r2, #1
   1d1ac:	2100      	movs	r1, #0
   1d1ae:	2000      	movs	r0, #0
   1d1b0:	4b31      	ldr	r3, [pc, #196]	; (1d278 <buttonFilter+0x130>)
   1d1b2:	4798      	blx	r3
   1d1b4:	e057      	b.n	1d266 <buttonFilter+0x11e>
		}
		else if(lastButtonEvent==BTNEVENTAUTO && AUTO_BUTTON_INPUT_COMES)
   1d1b6:	4b2d      	ldr	r3, [pc, #180]	; (1d26c <buttonFilter+0x124>)
   1d1b8:	781b      	ldrb	r3, [r3, #0]
   1d1ba:	b2db      	uxtb	r3, r3
   1d1bc:	2b03      	cmp	r3, #3
   1d1be:	d12b      	bne.n	1d218 <buttonFilter+0xd0>
   1d1c0:	201c      	movs	r0, #28
   1d1c2:	4b2b      	ldr	r3, [pc, #172]	; (1d270 <buttonFilter+0x128>)
   1d1c4:	4798      	blx	r3
   1d1c6:	0003      	movs	r3, r0
   1d1c8:	001a      	movs	r2, r3
   1d1ca:	2301      	movs	r3, #1
   1d1cc:	4053      	eors	r3, r2
   1d1ce:	b2db      	uxtb	r3, r3
   1d1d0:	2b00      	cmp	r3, #0
   1d1d2:	d021      	beq.n	1d218 <buttonFilter+0xd0>
		{
			lastButtonEvent=0;
   1d1d4:	4b25      	ldr	r3, [pc, #148]	; (1d26c <buttonFilter+0x124>)
   1d1d6:	2200      	movs	r2, #0
   1d1d8:	701a      	strb	r2, [r3, #0]
			saveAutoStartSettings(!((bool)user_settings_parameter_struct.autoStartAddress));  //set AutoStart to True in EEPROM
   1d1da:	4b28      	ldr	r3, [pc, #160]	; (1d27c <buttonFilter+0x134>)
   1d1dc:	785b      	ldrb	r3, [r3, #1]
   1d1de:	425a      	negs	r2, r3
   1d1e0:	4153      	adcs	r3, r2
   1d1e2:	b2db      	uxtb	r3, r3
   1d1e4:	0018      	movs	r0, r3
   1d1e6:	4b26      	ldr	r3, [pc, #152]	; (1d280 <buttonFilter+0x138>)
   1d1e8:	4798      	blx	r3
			resetAutoStart(true);
   1d1ea:	2001      	movs	r0, #1
   1d1ec:	4b25      	ldr	r3, [pc, #148]	; (1d284 <buttonFilter+0x13c>)
   1d1ee:	4798      	blx	r3
			if(user_settings_parameter_struct.autoStartAddress)
   1d1f0:	4b22      	ldr	r3, [pc, #136]	; (1d27c <buttonFilter+0x134>)
   1d1f2:	785b      	ldrb	r3, [r3, #1]
   1d1f4:	2b00      	cmp	r3, #0
   1d1f6:	d007      	beq.n	1d208 <buttonFilter+0xc0>
			{
				simEventTemp[10] = registerEvent(')');
   1d1f8:	2029      	movs	r0, #41	; 0x29
   1d1fa:	4b23      	ldr	r3, [pc, #140]	; (1d288 <buttonFilter+0x140>)
   1d1fc:	4798      	blx	r3
   1d1fe:	0003      	movs	r3, r0
   1d200:	001a      	movs	r2, r3
   1d202:	4b22      	ldr	r3, [pc, #136]	; (1d28c <buttonFilter+0x144>)
   1d204:	729a      	strb	r2, [r3, #10]
			if(user_settings_parameter_struct.autoStartAddress)
   1d206:	e02e      	b.n	1d266 <buttonFilter+0x11e>
			}
			else
			{
				simEventTemp[11] = registerEvent('[');
   1d208:	205b      	movs	r0, #91	; 0x5b
   1d20a:	4b1f      	ldr	r3, [pc, #124]	; (1d288 <buttonFilter+0x140>)
   1d20c:	4798      	blx	r3
   1d20e:	0003      	movs	r3, r0
   1d210:	001a      	movs	r2, r3
   1d212:	4b1e      	ldr	r3, [pc, #120]	; (1d28c <buttonFilter+0x144>)
   1d214:	72da      	strb	r2, [r3, #11]
			if(user_settings_parameter_struct.autoStartAddress)
   1d216:	e026      	b.n	1d266 <buttonFilter+0x11e>
			}
		}
		else if(lastButtonEvent==BTNEVENTLCDSHOW && LCDSHOW_BUTTON_INPUT_COMES)
   1d218:	4b14      	ldr	r3, [pc, #80]	; (1d26c <buttonFilter+0x124>)
   1d21a:	781b      	ldrb	r3, [r3, #0]
   1d21c:	b2db      	uxtb	r3, r3
   1d21e:	2b04      	cmp	r3, #4
   1d220:	d11d      	bne.n	1d25e <buttonFilter+0x116>
   1d222:	2029      	movs	r0, #41	; 0x29
   1d224:	4b12      	ldr	r3, [pc, #72]	; (1d270 <buttonFilter+0x128>)
   1d226:	4798      	blx	r3
   1d228:	0003      	movs	r3, r0
   1d22a:	001a      	movs	r2, r3
   1d22c:	2301      	movs	r3, #1
   1d22e:	4053      	eors	r3, r2
   1d230:	b2db      	uxtb	r3, r3
   1d232:	2b00      	cmp	r3, #0
   1d234:	d013      	beq.n	1d25e <buttonFilter+0x116>
		{
			lastButtonEvent=0;
   1d236:	4b0d      	ldr	r3, [pc, #52]	; (1d26c <buttonFilter+0x124>)
   1d238:	2200      	movs	r2, #0
   1d23a:	701a      	strb	r2, [r3, #0]
			setDisplayPause(!varPauseDisplay);
   1d23c:	4b14      	ldr	r3, [pc, #80]	; (1d290 <buttonFilter+0x148>)
   1d23e:	781b      	ldrb	r3, [r3, #0]
   1d240:	b2db      	uxtb	r3, r3
   1d242:	1e5a      	subs	r2, r3, #1
   1d244:	4193      	sbcs	r3, r2
   1d246:	b2db      	uxtb	r3, r3
   1d248:	2201      	movs	r2, #1
   1d24a:	4053      	eors	r3, r2
   1d24c:	b2db      	uxtb	r3, r3
   1d24e:	1c1a      	adds	r2, r3, #0
   1d250:	2301      	movs	r3, #1
   1d252:	4013      	ands	r3, r2
   1d254:	b2db      	uxtb	r3, r3
   1d256:	0018      	movs	r0, r3
   1d258:	4b0e      	ldr	r3, [pc, #56]	; (1d294 <buttonFilter+0x14c>)
   1d25a:	4798      	blx	r3
   1d25c:	e003      	b.n	1d266 <buttonFilter+0x11e>
		}
		else
		{
			lastButtonEvent=0;
   1d25e:	4b03      	ldr	r3, [pc, #12]	; (1d26c <buttonFilter+0x124>)
   1d260:	2200      	movs	r2, #0
   1d262:	701a      	strb	r2, [r3, #0]
		}
	}
}
   1d264:	e7ff      	b.n	1d266 <buttonFilter+0x11e>
   1d266:	46c0      	nop			; (mov r8, r8)
   1d268:	46bd      	mov	sp, r7
   1d26a:	bd80      	pop	{r7, pc}
   1d26c:	20000780 	.word	0x20000780
   1d270:	0001954d 	.word	0x0001954d
   1d274:	0001ba05 	.word	0x0001ba05
   1d278:	0001bbe1 	.word	0x0001bbe1
   1d27c:	20000654 	.word	0x20000654
   1d280:	000112a5 	.word	0x000112a5
   1d284:	0001b60d 	.word	0x0001b60d
   1d288:	00014b59 	.word	0x00014b59
   1d28c:	20000718 	.word	0x20000718
   1d290:	200007ac 	.word	0x200007ac
   1d294:	0001d299 	.word	0x0001d299

0001d298 <setDisplayPause>:
//}
//}


void setDisplayPause(bool value)
{
   1d298:	b580      	push	{r7, lr}
   1d29a:	b082      	sub	sp, #8
   1d29c:	af00      	add	r7, sp, #0
   1d29e:	0002      	movs	r2, r0
   1d2a0:	1dfb      	adds	r3, r7, #7
   1d2a2:	701a      	strb	r2, [r3, #0]
	varPauseDisplay=value;
   1d2a4:	4b03      	ldr	r3, [pc, #12]	; (1d2b4 <setDisplayPause+0x1c>)
   1d2a6:	1dfa      	adds	r2, r7, #7
   1d2a8:	7812      	ldrb	r2, [r2, #0]
   1d2aa:	701a      	strb	r2, [r3, #0]
}
   1d2ac:	46c0      	nop			; (mov r8, r8)
   1d2ae:	46bd      	mov	sp, r7
   1d2b0:	b002      	add	sp, #8
   1d2b2:	bd80      	pop	{r7, pc}
   1d2b4:	200007ac 	.word	0x200007ac

0001d2b8 <setCallStateOnLCD>:

void setCallStateOnLCD(uint8_t callState,char* number,bool usePrevious)
{
   1d2b8:	b580      	push	{r7, lr}
   1d2ba:	b082      	sub	sp, #8
   1d2bc:	af00      	add	r7, sp, #0
   1d2be:	6039      	str	r1, [r7, #0]
   1d2c0:	0011      	movs	r1, r2
   1d2c2:	1dfb      	adds	r3, r7, #7
   1d2c4:	1c02      	adds	r2, r0, #0
   1d2c6:	701a      	strb	r2, [r3, #0]
   1d2c8:	1dbb      	adds	r3, r7, #6
   1d2ca:	1c0a      	adds	r2, r1, #0
   1d2cc:	701a      	strb	r2, [r3, #0]
	callStateOnLCD = callState;
   1d2ce:	4b0f      	ldr	r3, [pc, #60]	; (1d30c <setCallStateOnLCD+0x54>)
   1d2d0:	1dfa      	adds	r2, r7, #7
   1d2d2:	7812      	ldrb	r2, [r2, #0]
   1d2d4:	701a      	strb	r2, [r3, #0]

	if(!usePrevious)
   1d2d6:	1dbb      	adds	r3, r7, #6
   1d2d8:	781b      	ldrb	r3, [r3, #0]
   1d2da:	2201      	movs	r2, #1
   1d2dc:	4053      	eors	r3, r2
   1d2de:	b2db      	uxtb	r3, r3
   1d2e0:	2b00      	cmp	r3, #0
   1d2e2:	d00f      	beq.n	1d304 <setCallStateOnLCD+0x4c>
	{
		memset(numberOnLCD, '\0', sizeof(numberOnLCD));
   1d2e4:	4b0a      	ldr	r3, [pc, #40]	; (1d310 <setCallStateOnLCD+0x58>)
   1d2e6:	2214      	movs	r2, #20
   1d2e8:	2100      	movs	r1, #0
   1d2ea:	0018      	movs	r0, r3
   1d2ec:	4b09      	ldr	r3, [pc, #36]	; (1d314 <setCallStateOnLCD+0x5c>)
   1d2ee:	4798      	blx	r3
		if(callStateOnLCD!=LCDCALLSTATE_IDLE)
   1d2f0:	4b06      	ldr	r3, [pc, #24]	; (1d30c <setCallStateOnLCD+0x54>)
   1d2f2:	781b      	ldrb	r3, [r3, #0]
   1d2f4:	2b00      	cmp	r3, #0
   1d2f6:	d005      	beq.n	1d304 <setCallStateOnLCD+0x4c>
		{
			strcpy(numberOnLCD,number);
   1d2f8:	683a      	ldr	r2, [r7, #0]
   1d2fa:	4b05      	ldr	r3, [pc, #20]	; (1d310 <setCallStateOnLCD+0x58>)
   1d2fc:	0011      	movs	r1, r2
   1d2fe:	0018      	movs	r0, r3
   1d300:	4b05      	ldr	r3, [pc, #20]	; (1d318 <setCallStateOnLCD+0x60>)
   1d302:	4798      	blx	r3
			//sprintf(numberOnLCD,"%s",number);
		}
	}
}
   1d304:	46c0      	nop			; (mov r8, r8)
   1d306:	46bd      	mov	sp, r7
   1d308:	b002      	add	sp, #8
   1d30a:	bd80      	pop	{r7, pc}
   1d30c:	200007d2 	.word	0x200007d2
   1d310:	20000844 	.word	0x20000844
   1d314:	000298b7 	.word	0x000298b7
   1d318:	00029b37 	.word	0x00029b37

0001d31c <vTask_50ms_Timer>:

static void vTask_50ms_Timer(void *params)
{
   1d31c:	b590      	push	{r4, r7, lr}
   1d31e:	b085      	sub	sp, #20
   1d320:	af00      	add	r7, sp, #0
   1d322:	6078      	str	r0, [r7, #4]
	TickType_t xLastExecutionGsm_Send_Time;
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
   1d324:	4b17      	ldr	r3, [pc, #92]	; (1d384 <vTask_50ms_Timer+0x68>)
   1d326:	4798      	blx	r3
   1d328:	0003      	movs	r3, r0
   1d32a:	60fb      	str	r3, [r7, #12]
	//--------------------------------
	for( ;; )
	{
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (25/portTICK_PERIOD_MS));
   1d32c:	230c      	movs	r3, #12
   1d32e:	18fb      	adds	r3, r7, r3
   1d330:	2119      	movs	r1, #25
   1d332:	0018      	movs	r0, r3
   1d334:	4b14      	ldr	r3, [pc, #80]	; (1d388 <vTask_50ms_Timer+0x6c>)
   1d336:	4798      	blx	r3
		if(buttonEventOccured)
   1d338:	4b14      	ldr	r3, [pc, #80]	; (1d38c <vTask_50ms_Timer+0x70>)
   1d33a:	781b      	ldrb	r3, [r3, #0]
   1d33c:	b2db      	uxtb	r3, r3
   1d33e:	2b00      	cmp	r3, #0
   1d340:	d001      	beq.n	1d346 <vTask_50ms_Timer+0x2a>
		{
			operateOnButtonEvent();
   1d342:	4b13      	ldr	r3, [pc, #76]	; (1d390 <vTask_50ms_Timer+0x74>)
   1d344:	4798      	blx	r3
		}

		xSemaphoreTake(xButton_Semaphore,portMAX_DELAY);
   1d346:	4b13      	ldr	r3, [pc, #76]	; (1d394 <vTask_50ms_Timer+0x78>)
   1d348:	681a      	ldr	r2, [r3, #0]
   1d34a:	2301      	movs	r3, #1
   1d34c:	425b      	negs	r3, r3
   1d34e:	0019      	movs	r1, r3
   1d350:	0010      	movs	r0, r2
   1d352:	4b11      	ldr	r3, [pc, #68]	; (1d398 <vTask_50ms_Timer+0x7c>)
   1d354:	4798      	blx	r3
		if(lastButtonEvent>0)
   1d356:	4b11      	ldr	r3, [pc, #68]	; (1d39c <vTask_50ms_Timer+0x80>)
   1d358:	781b      	ldrb	r3, [r3, #0]
   1d35a:	b2db      	uxtb	r3, r3
   1d35c:	2b00      	cmp	r3, #0
   1d35e:	d008      	beq.n	1d372 <vTask_50ms_Timer+0x56>
		{
			taskPSet=true;
   1d360:	4b0f      	ldr	r3, [pc, #60]	; (1d3a0 <vTask_50ms_Timer+0x84>)
   1d362:	2201      	movs	r2, #1
   1d364:	701a      	strb	r2, [r3, #0]
			vTaskPrioritySet(motorTask,2);
   1d366:	4b0f      	ldr	r3, [pc, #60]	; (1d3a4 <vTask_50ms_Timer+0x88>)
   1d368:	681b      	ldr	r3, [r3, #0]
   1d36a:	2102      	movs	r1, #2
   1d36c:	0018      	movs	r0, r3
   1d36e:	4b0e      	ldr	r3, [pc, #56]	; (1d3a8 <vTask_50ms_Timer+0x8c>)
   1d370:	4798      	blx	r3
		}
		xSemaphoreGive(xButton_Semaphore);
   1d372:	4b08      	ldr	r3, [pc, #32]	; (1d394 <vTask_50ms_Timer+0x78>)
   1d374:	6818      	ldr	r0, [r3, #0]
   1d376:	2300      	movs	r3, #0
   1d378:	2200      	movs	r2, #0
   1d37a:	2100      	movs	r1, #0
   1d37c:	4c0b      	ldr	r4, [pc, #44]	; (1d3ac <vTask_50ms_Timer+0x90>)
   1d37e:	47a0      	blx	r4
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (25/portTICK_PERIOD_MS));
   1d380:	e7d4      	b.n	1d32c <vTask_50ms_Timer+0x10>
   1d382:	46c0      	nop			; (mov r8, r8)
   1d384:	000209cd 	.word	0x000209cd
   1d388:	000205a1 	.word	0x000205a1
   1d38c:	2000079f 	.word	0x2000079f
   1d390:	0001d08d 	.word	0x0001d08d
   1d394:	20000234 	.word	0x20000234
   1d398:	0001fd61 	.word	0x0001fd61
   1d39c:	20000780 	.word	0x20000780
   1d3a0:	20000880 	.word	0x20000880
   1d3a4:	20000238 	.word	0x20000238
   1d3a8:	000206c5 	.word	0x000206c5
   1d3ac:	0001f8c1 	.word	0x0001f8c1

0001d3b0 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   1d3b0:	b580      	push	{r7, lr}
   1d3b2:	b082      	sub	sp, #8
   1d3b4:	af00      	add	r7, sp, #0
   1d3b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   1d3b8:	687b      	ldr	r3, [r7, #4]
   1d3ba:	2200      	movs	r2, #0
   1d3bc:	701a      	strb	r2, [r3, #0]
}
   1d3be:	46c0      	nop			; (mov r8, r8)
   1d3c0:	46bd      	mov	sp, r7
   1d3c2:	b002      	add	sp, #8
   1d3c4:	bd80      	pop	{r7, pc}
	...

0001d3c8 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   1d3c8:	b580      	push	{r7, lr}
   1d3ca:	b082      	sub	sp, #8
   1d3cc:	af00      	add	r7, sp, #0
   1d3ce:	0002      	movs	r2, r0
   1d3d0:	6039      	str	r1, [r7, #0]
   1d3d2:	1dfb      	adds	r3, r7, #7
   1d3d4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1d3d6:	1dfb      	adds	r3, r7, #7
   1d3d8:	781b      	ldrb	r3, [r3, #0]
   1d3da:	2b01      	cmp	r3, #1
   1d3dc:	d00a      	beq.n	1d3f4 <system_apb_clock_set_mask+0x2c>
   1d3de:	2b02      	cmp	r3, #2
   1d3e0:	d00f      	beq.n	1d402 <system_apb_clock_set_mask+0x3a>
   1d3e2:	2b00      	cmp	r3, #0
   1d3e4:	d114      	bne.n	1d410 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   1d3e6:	4b0e      	ldr	r3, [pc, #56]	; (1d420 <system_apb_clock_set_mask+0x58>)
   1d3e8:	4a0d      	ldr	r2, [pc, #52]	; (1d420 <system_apb_clock_set_mask+0x58>)
   1d3ea:	6991      	ldr	r1, [r2, #24]
   1d3ec:	683a      	ldr	r2, [r7, #0]
   1d3ee:	430a      	orrs	r2, r1
   1d3f0:	619a      	str	r2, [r3, #24]
			break;
   1d3f2:	e00f      	b.n	1d414 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   1d3f4:	4b0a      	ldr	r3, [pc, #40]	; (1d420 <system_apb_clock_set_mask+0x58>)
   1d3f6:	4a0a      	ldr	r2, [pc, #40]	; (1d420 <system_apb_clock_set_mask+0x58>)
   1d3f8:	69d1      	ldr	r1, [r2, #28]
   1d3fa:	683a      	ldr	r2, [r7, #0]
   1d3fc:	430a      	orrs	r2, r1
   1d3fe:	61da      	str	r2, [r3, #28]
			break;
   1d400:	e008      	b.n	1d414 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   1d402:	4b07      	ldr	r3, [pc, #28]	; (1d420 <system_apb_clock_set_mask+0x58>)
   1d404:	4a06      	ldr	r2, [pc, #24]	; (1d420 <system_apb_clock_set_mask+0x58>)
   1d406:	6a11      	ldr	r1, [r2, #32]
   1d408:	683a      	ldr	r2, [r7, #0]
   1d40a:	430a      	orrs	r2, r1
   1d40c:	621a      	str	r2, [r3, #32]
			break;
   1d40e:	e001      	b.n	1d414 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   1d410:	2317      	movs	r3, #23
   1d412:	e000      	b.n	1d416 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   1d414:	2300      	movs	r3, #0
}
   1d416:	0018      	movs	r0, r3
   1d418:	46bd      	mov	sp, r7
   1d41a:	b002      	add	sp, #8
   1d41c:	bd80      	pop	{r7, pc}
   1d41e:	46c0      	nop			; (mov r8, r8)
   1d420:	40000400 	.word	0x40000400

0001d424 <ac_is_syncing>:
{
   1d424:	b580      	push	{r7, lr}
   1d426:	b084      	sub	sp, #16
   1d428:	af00      	add	r7, sp, #0
   1d42a:	6078      	str	r0, [r7, #4]
	Ac *const ac_module = module_inst->hw;
   1d42c:	687b      	ldr	r3, [r7, #4]
   1d42e:	681b      	ldr	r3, [r3, #0]
   1d430:	60fb      	str	r3, [r7, #12]
	if (ac_module->STATUSB.reg & AC_STATUSB_SYNCBUSY) {
   1d432:	68fb      	ldr	r3, [r7, #12]
   1d434:	7a5b      	ldrb	r3, [r3, #9]
   1d436:	b2db      	uxtb	r3, r3
   1d438:	b25b      	sxtb	r3, r3
   1d43a:	2b00      	cmp	r3, #0
   1d43c:	da01      	bge.n	1d442 <ac_is_syncing+0x1e>
		return true;
   1d43e:	2301      	movs	r3, #1
   1d440:	e000      	b.n	1d444 <ac_is_syncing+0x20>
	return false;
   1d442:	2300      	movs	r3, #0
}
   1d444:	0018      	movs	r0, r3
   1d446:	46bd      	mov	sp, r7
   1d448:	b004      	add	sp, #16
   1d44a:	bd80      	pop	{r7, pc}

0001d44c <_ac_set_config>:
#include "ac.h"

static enum status_code _ac_set_config(
		struct ac_module *const module_inst,
		struct ac_config *const config)
{
   1d44c:	b580      	push	{r7, lr}
   1d44e:	b086      	sub	sp, #24
   1d450:	af00      	add	r7, sp, #0
   1d452:	6078      	str	r0, [r7, #4]
   1d454:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(config);

	Ac *const ac_module = module_inst->hw;
   1d456:	687b      	ldr	r3, [r7, #4]
   1d458:	681b      	ldr	r3, [r3, #0]
   1d45a:	60fb      	str	r3, [r7, #12]

	/* Use a temporary register for computing the control bits */
	uint32_t ctrla_temp = 0;
   1d45c:	2300      	movs	r3, #0
   1d45e:	617b      	str	r3, [r7, #20]

	/* Check if the comparators should be enabled during sleep */
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
   1d460:	2300      	movs	r3, #0
   1d462:	613b      	str	r3, [r7, #16]
   1d464:	e00f      	b.n	1d486 <_ac_set_config+0x3a>
		if (config->run_in_standby[i] == true) {
   1d466:	683a      	ldr	r2, [r7, #0]
   1d468:	693b      	ldr	r3, [r7, #16]
   1d46a:	18d3      	adds	r3, r2, r3
   1d46c:	781b      	ldrb	r3, [r3, #0]
   1d46e:	2b00      	cmp	r3, #0
   1d470:	d006      	beq.n	1d480 <_ac_set_config+0x34>
			ctrla_temp |= (AC_CTRLA_RUNSTDBY_Msk << i);
   1d472:	2204      	movs	r2, #4
   1d474:	693b      	ldr	r3, [r7, #16]
   1d476:	409a      	lsls	r2, r3
   1d478:	0013      	movs	r3, r2
   1d47a:	697a      	ldr	r2, [r7, #20]
   1d47c:	4313      	orrs	r3, r2
   1d47e:	617b      	str	r3, [r7, #20]
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
   1d480:	693b      	ldr	r3, [r7, #16]
   1d482:	3301      	adds	r3, #1
   1d484:	613b      	str	r3, [r7, #16]
   1d486:	693b      	ldr	r3, [r7, #16]
   1d488:	2b00      	cmp	r3, #0
   1d48a:	d0ec      	beq.n	1d466 <_ac_set_config+0x1a>
		}
	}

	while (ac_is_syncing(module_inst)) {
   1d48c:	46c0      	nop			; (mov r8, r8)
   1d48e:	687b      	ldr	r3, [r7, #4]
   1d490:	0018      	movs	r0, r3
   1d492:	4b06      	ldr	r3, [pc, #24]	; (1d4ac <_ac_set_config+0x60>)
   1d494:	4798      	blx	r3
   1d496:	1e03      	subs	r3, r0, #0
   1d498:	d1f9      	bne.n	1d48e <_ac_set_config+0x42>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->CTRLA.reg = ctrla_temp;
   1d49a:	697b      	ldr	r3, [r7, #20]
   1d49c:	b2da      	uxtb	r2, r3
   1d49e:	68fb      	ldr	r3, [r7, #12]
   1d4a0:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   1d4a2:	2300      	movs	r3, #0
}
   1d4a4:	0018      	movs	r0, r3
   1d4a6:	46bd      	mov	sp, r7
   1d4a8:	b006      	add	sp, #24
   1d4aa:	bd80      	pop	{r7, pc}
   1d4ac:	0001d425 	.word	0x0001d425

0001d4b0 <ac_init>:
 */
enum status_code ac_init(
		struct ac_module *const module_inst,
		Ac *const hw,
		struct ac_config *const config)
{
   1d4b0:	b580      	push	{r7, lr}
   1d4b2:	b086      	sub	sp, #24
   1d4b4:	af00      	add	r7, sp, #0
   1d4b6:	60f8      	str	r0, [r7, #12]
   1d4b8:	60b9      	str	r1, [r7, #8]
   1d4ba:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module_inst->hw = hw;
   1d4bc:	68fb      	ldr	r3, [r7, #12]
   1d4be:	68ba      	ldr	r2, [r7, #8]
   1d4c0:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock and GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1d4c2:	2314      	movs	r3, #20
   1d4c4:	18fb      	adds	r3, r7, r3
   1d4c6:	0018      	movs	r0, r3
   1d4c8:	4b2a      	ldr	r3, [pc, #168]	; (1d574 <ac_init+0xc4>)
   1d4ca:	4798      	blx	r3

	if (hw == AC) {
   1d4cc:	68bb      	ldr	r3, [r7, #8]
   1d4ce:	4a2a      	ldr	r2, [pc, #168]	; (1d578 <ac_init+0xc8>)
   1d4d0:	4293      	cmp	r3, r2
   1d4d2:	d121      	bne.n	1d518 <ac_init+0x68>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_AC);
   1d4d4:	2380      	movs	r3, #128	; 0x80
   1d4d6:	029b      	lsls	r3, r3, #10
   1d4d8:	0019      	movs	r1, r3
   1d4da:	2002      	movs	r0, #2
   1d4dc:	4b27      	ldr	r3, [pc, #156]	; (1d57c <ac_init+0xcc>)
   1d4de:	4798      	blx	r3
		gclk_chan_conf.source_generator = config->dig_source_generator;
   1d4e0:	687b      	ldr	r3, [r7, #4]
   1d4e2:	785a      	ldrb	r2, [r3, #1]
   1d4e4:	2314      	movs	r3, #20
   1d4e6:	18fb      	adds	r3, r7, r3
   1d4e8:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(AC_GCLK_ID_DIG, &gclk_chan_conf);
   1d4ea:	2314      	movs	r3, #20
   1d4ec:	18fb      	adds	r3, r7, r3
   1d4ee:	0019      	movs	r1, r3
   1d4f0:	201f      	movs	r0, #31
   1d4f2:	4b23      	ldr	r3, [pc, #140]	; (1d580 <ac_init+0xd0>)
   1d4f4:	4798      	blx	r3
		system_gclk_chan_enable(AC_GCLK_ID_DIG);
   1d4f6:	201f      	movs	r0, #31
   1d4f8:	4b22      	ldr	r3, [pc, #136]	; (1d584 <ac_init+0xd4>)
   1d4fa:	4798      	blx	r3
		gclk_chan_conf.source_generator = config->ana_source_generator;
   1d4fc:	687b      	ldr	r3, [r7, #4]
   1d4fe:	789a      	ldrb	r2, [r3, #2]
   1d500:	2314      	movs	r3, #20
   1d502:	18fb      	adds	r3, r7, r3
   1d504:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(AC_GCLK_ID_ANA, &gclk_chan_conf);
   1d506:	2314      	movs	r3, #20
   1d508:	18fb      	adds	r3, r7, r3
   1d50a:	0019      	movs	r1, r3
   1d50c:	2020      	movs	r0, #32
   1d50e:	4b1c      	ldr	r3, [pc, #112]	; (1d580 <ac_init+0xd0>)
   1d510:	4798      	blx	r3
		system_gclk_chan_enable(AC_GCLK_ID_ANA);
   1d512:	2020      	movs	r0, #32
   1d514:	4b1b      	ldr	r3, [pc, #108]	; (1d584 <ac_init+0xd4>)
   1d516:	4798      	blx	r3
#  error This driver is not support more than three AC instances.
#endif

#if AC_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < AC_CALLBACK_N; i++) {
   1d518:	2317      	movs	r3, #23
   1d51a:	18fb      	adds	r3, r7, r3
   1d51c:	2200      	movs	r2, #0
   1d51e:	701a      	strb	r2, [r3, #0]
   1d520:	e00f      	b.n	1d542 <ac_init+0x92>
		module_inst->callback[i]        = NULL;
   1d522:	2317      	movs	r3, #23
   1d524:	18fb      	adds	r3, r7, r3
   1d526:	781b      	ldrb	r3, [r3, #0]
   1d528:	68fa      	ldr	r2, [r7, #12]
   1d52a:	009b      	lsls	r3, r3, #2
   1d52c:	18d3      	adds	r3, r2, r3
   1d52e:	3304      	adds	r3, #4
   1d530:	2200      	movs	r2, #0
   1d532:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < AC_CALLBACK_N; i++) {
   1d534:	2317      	movs	r3, #23
   1d536:	18fb      	adds	r3, r7, r3
   1d538:	781a      	ldrb	r2, [r3, #0]
   1d53a:	2317      	movs	r3, #23
   1d53c:	18fb      	adds	r3, r7, r3
   1d53e:	3201      	adds	r2, #1
   1d540:	701a      	strb	r2, [r3, #0]
   1d542:	2317      	movs	r3, #23
   1d544:	18fb      	adds	r3, r7, r3
   1d546:	781b      	ldrb	r3, [r3, #0]
   1d548:	2b04      	cmp	r3, #4
   1d54a:	d9ea      	bls.n	1d522 <ac_init+0x72>
	}

	/* Initialize software flags*/
	module_inst->register_callback_mask = 0x00;
   1d54c:	68fb      	ldr	r3, [r7, #12]
   1d54e:	2200      	movs	r2, #0
   1d550:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask   = 0x00;
   1d552:	68fb      	ldr	r3, [r7, #12]
   1d554:	2200      	movs	r2, #0
   1d556:	765a      	strb	r2, [r3, #25]

#  if (AC_INST_NUM == 1)
	_ac_instance[0] = module_inst;
   1d558:	4b0b      	ldr	r3, [pc, #44]	; (1d588 <ac_init+0xd8>)
   1d55a:	68fa      	ldr	r2, [r7, #12]
   1d55c:	601a      	str	r2, [r3, #0]
	_ac_instance[_ac_get_inst_index(hw)] = module_inst;
#  endif
#endif

	/* Write configuration to module */
	return _ac_set_config(module_inst, config);
   1d55e:	687a      	ldr	r2, [r7, #4]
   1d560:	68fb      	ldr	r3, [r7, #12]
   1d562:	0011      	movs	r1, r2
   1d564:	0018      	movs	r0, r3
   1d566:	4b09      	ldr	r3, [pc, #36]	; (1d58c <ac_init+0xdc>)
   1d568:	4798      	blx	r3
   1d56a:	0003      	movs	r3, r0
}
   1d56c:	0018      	movs	r0, r3
   1d56e:	46bd      	mov	sp, r7
   1d570:	b006      	add	sp, #24
   1d572:	bd80      	pop	{r7, pc}
   1d574:	0001d3b1 	.word	0x0001d3b1
   1d578:	42004400 	.word	0x42004400
   1d57c:	0001d3c9 	.word	0x0001d3c9
   1d580:	00025135 	.word	0x00025135
   1d584:	00025179 	.word	0x00025179
   1d588:	20000984 	.word	0x20000984
   1d58c:	0001d44d 	.word	0x0001d44d

0001d590 <ac_chan_set_config>:
 */
enum status_code ac_chan_set_config(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel,
		struct ac_chan_config *const config)
{
   1d590:	b580      	push	{r7, lr}
   1d592:	b086      	sub	sp, #24
   1d594:	af00      	add	r7, sp, #0
   1d596:	60f8      	str	r0, [r7, #12]
   1d598:	607a      	str	r2, [r7, #4]
   1d59a:	230b      	movs	r3, #11
   1d59c:	18fb      	adds	r3, r7, r3
   1d59e:	1c0a      	adds	r2, r1, #0
   1d5a0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(config);

	Ac *const ac_module = module_inst->hw;
   1d5a2:	68fb      	ldr	r3, [r7, #12]
   1d5a4:	681b      	ldr	r3, [r3, #0]
   1d5a6:	613b      	str	r3, [r7, #16]

	/* Use a temporary variable to compute the comparator configuration */
	uint32_t compctrl_temp = 0;
   1d5a8:	2300      	movs	r3, #0
   1d5aa:	617b      	str	r3, [r7, #20]

	/* Enable output filter mode */
	compctrl_temp |= config->filter;
   1d5ac:	687b      	ldr	r3, [r7, #4]
   1d5ae:	685b      	ldr	r3, [r3, #4]
   1d5b0:	697a      	ldr	r2, [r7, #20]
   1d5b2:	4313      	orrs	r3, r2
   1d5b4:	617b      	str	r3, [r7, #20]

	/* Enable output hysteresis if required */
	if (config->enable_hysteresis == true) {
   1d5b6:	687b      	ldr	r3, [r7, #4]
   1d5b8:	7a1b      	ldrb	r3, [r3, #8]
   1d5ba:	2b00      	cmp	r3, #0
   1d5bc:	d004      	beq.n	1d5c8 <ac_chan_set_config+0x38>
		compctrl_temp |= AC_COMPCTRL_HYST;
   1d5be:	697b      	ldr	r3, [r7, #20]
   1d5c0:	2280      	movs	r2, #128	; 0x80
   1d5c2:	0312      	lsls	r2, r2, #12
   1d5c4:	4313      	orrs	r3, r2
   1d5c6:	617b      	str	r3, [r7, #20]
	}

	/* Set output signal routing mode */
	compctrl_temp |= config->output_mode;
   1d5c8:	687b      	ldr	r3, [r7, #4]
   1d5ca:	68db      	ldr	r3, [r3, #12]
   1d5cc:	697a      	ldr	r2, [r7, #20]
   1d5ce:	4313      	orrs	r3, r2
   1d5d0:	617b      	str	r3, [r7, #20]

	/* Configure comparator positive and negative pin MUX configurations */
	compctrl_temp |=
			(uint32_t)config->positive_input |
   1d5d2:	687b      	ldr	r3, [r7, #4]
   1d5d4:	8a1a      	ldrh	r2, [r3, #16]
			(uint32_t)config->negative_input;
   1d5d6:	687b      	ldr	r3, [r7, #4]
   1d5d8:	8a5b      	ldrh	r3, [r3, #18]
			(uint32_t)config->positive_input |
   1d5da:	4313      	orrs	r3, r2
   1d5dc:	b29b      	uxth	r3, r3
   1d5de:	001a      	movs	r2, r3
	compctrl_temp |=
   1d5e0:	697b      	ldr	r3, [r7, #20]
   1d5e2:	4313      	orrs	r3, r2
   1d5e4:	617b      	str	r3, [r7, #20]

	/* Set sampling mode (single shot or continuous) */
	compctrl_temp |= config->sample_mode;
   1d5e6:	687b      	ldr	r3, [r7, #4]
   1d5e8:	781b      	ldrb	r3, [r3, #0]
   1d5ea:	001a      	movs	r2, r3
   1d5ec:	697b      	ldr	r3, [r7, #20]
   1d5ee:	4313      	orrs	r3, r2
   1d5f0:	617b      	str	r3, [r7, #20]

	/* Set channel interrupt selection */
	compctrl_temp |= config->interrupt_selection;
   1d5f2:	687b      	ldr	r3, [r7, #4]
   1d5f4:	7d5b      	ldrb	r3, [r3, #21]
   1d5f6:	001a      	movs	r2, r3
   1d5f8:	697b      	ldr	r3, [r7, #20]
   1d5fa:	4313      	orrs	r3, r2
   1d5fc:	617b      	str	r3, [r7, #20]

	while (ac_is_syncing(module_inst)) {
   1d5fe:	46c0      	nop			; (mov r8, r8)
   1d600:	68fb      	ldr	r3, [r7, #12]
   1d602:	0018      	movs	r0, r3
   1d604:	4b0e      	ldr	r3, [pc, #56]	; (1d640 <ac_chan_set_config+0xb0>)
   1d606:	4798      	blx	r3
   1d608:	1e03      	subs	r3, r0, #0
   1d60a:	d1f9      	bne.n	1d600 <ac_chan_set_config+0x70>
		/* Wait until synchronization is complete */
	}

	/* Write the final configuration to the module's control register */
	ac_module->COMPCTRL[(uint8_t)channel].reg = compctrl_temp;
   1d60c:	230b      	movs	r3, #11
   1d60e:	18fb      	adds	r3, r7, r3
   1d610:	781a      	ldrb	r2, [r3, #0]
   1d612:	693b      	ldr	r3, [r7, #16]
   1d614:	3204      	adds	r2, #4
   1d616:	0092      	lsls	r2, r2, #2
   1d618:	6979      	ldr	r1, [r7, #20]
   1d61a:	50d1      	str	r1, [r2, r3]

	/* Configure VCC voltage scaling for the comparator */
	ac_module->SCALER[(uint8_t)channel].reg   = config->vcc_scale_factor - 1;
   1d61c:	230b      	movs	r3, #11
   1d61e:	18fb      	adds	r3, r7, r3
   1d620:	781b      	ldrb	r3, [r3, #0]
   1d622:	687a      	ldr	r2, [r7, #4]
   1d624:	7d12      	ldrb	r2, [r2, #20]
   1d626:	3a01      	subs	r2, #1
   1d628:	b2d0      	uxtb	r0, r2
   1d62a:	693a      	ldr	r2, [r7, #16]
   1d62c:	2120      	movs	r1, #32
   1d62e:	18d3      	adds	r3, r2, r3
   1d630:	185b      	adds	r3, r3, r1
   1d632:	1c02      	adds	r2, r0, #0
   1d634:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   1d636:	2300      	movs	r3, #0
}
   1d638:	0018      	movs	r0, r3
   1d63a:	46bd      	mov	sp, r7
   1d63c:	b006      	add	sp, #24
   1d63e:	bd80      	pop	{r7, pc}
   1d640:	0001d425 	.word	0x0001d425

0001d644 <system_gclk_chan_get_config_defaults>:
{
   1d644:	b580      	push	{r7, lr}
   1d646:	b082      	sub	sp, #8
   1d648:	af00      	add	r7, sp, #0
   1d64a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1d64c:	687b      	ldr	r3, [r7, #4]
   1d64e:	2200      	movs	r2, #0
   1d650:	701a      	strb	r2, [r3, #0]
}
   1d652:	46c0      	nop			; (mov r8, r8)
   1d654:	46bd      	mov	sp, r7
   1d656:	b002      	add	sp, #8
   1d658:	bd80      	pop	{r7, pc}
	...

0001d65c <system_apb_clock_set_mask>:
{
   1d65c:	b580      	push	{r7, lr}
   1d65e:	b082      	sub	sp, #8
   1d660:	af00      	add	r7, sp, #0
   1d662:	0002      	movs	r2, r0
   1d664:	6039      	str	r1, [r7, #0]
   1d666:	1dfb      	adds	r3, r7, #7
   1d668:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1d66a:	1dfb      	adds	r3, r7, #7
   1d66c:	781b      	ldrb	r3, [r3, #0]
   1d66e:	2b01      	cmp	r3, #1
   1d670:	d00a      	beq.n	1d688 <system_apb_clock_set_mask+0x2c>
   1d672:	2b02      	cmp	r3, #2
   1d674:	d00f      	beq.n	1d696 <system_apb_clock_set_mask+0x3a>
   1d676:	2b00      	cmp	r3, #0
   1d678:	d114      	bne.n	1d6a4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1d67a:	4b0e      	ldr	r3, [pc, #56]	; (1d6b4 <system_apb_clock_set_mask+0x58>)
   1d67c:	4a0d      	ldr	r2, [pc, #52]	; (1d6b4 <system_apb_clock_set_mask+0x58>)
   1d67e:	6991      	ldr	r1, [r2, #24]
   1d680:	683a      	ldr	r2, [r7, #0]
   1d682:	430a      	orrs	r2, r1
   1d684:	619a      	str	r2, [r3, #24]
			break;
   1d686:	e00f      	b.n	1d6a8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1d688:	4b0a      	ldr	r3, [pc, #40]	; (1d6b4 <system_apb_clock_set_mask+0x58>)
   1d68a:	4a0a      	ldr	r2, [pc, #40]	; (1d6b4 <system_apb_clock_set_mask+0x58>)
   1d68c:	69d1      	ldr	r1, [r2, #28]
   1d68e:	683a      	ldr	r2, [r7, #0]
   1d690:	430a      	orrs	r2, r1
   1d692:	61da      	str	r2, [r3, #28]
			break;
   1d694:	e008      	b.n	1d6a8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1d696:	4b07      	ldr	r3, [pc, #28]	; (1d6b4 <system_apb_clock_set_mask+0x58>)
   1d698:	4a06      	ldr	r2, [pc, #24]	; (1d6b4 <system_apb_clock_set_mask+0x58>)
   1d69a:	6a11      	ldr	r1, [r2, #32]
   1d69c:	683a      	ldr	r2, [r7, #0]
   1d69e:	430a      	orrs	r2, r1
   1d6a0:	621a      	str	r2, [r3, #32]
			break;
   1d6a2:	e001      	b.n	1d6a8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   1d6a4:	2317      	movs	r3, #23
   1d6a6:	e000      	b.n	1d6aa <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1d6a8:	2300      	movs	r3, #0
}
   1d6aa:	0018      	movs	r0, r3
   1d6ac:	46bd      	mov	sp, r7
   1d6ae:	b002      	add	sp, #8
   1d6b0:	bd80      	pop	{r7, pc}
   1d6b2:	46c0      	nop			; (mov r8, r8)
   1d6b4:	40000400 	.word	0x40000400

0001d6b8 <system_pinmux_get_config_defaults>:
{
   1d6b8:	b580      	push	{r7, lr}
   1d6ba:	b082      	sub	sp, #8
   1d6bc:	af00      	add	r7, sp, #0
   1d6be:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1d6c0:	687b      	ldr	r3, [r7, #4]
   1d6c2:	2280      	movs	r2, #128	; 0x80
   1d6c4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1d6c6:	687b      	ldr	r3, [r7, #4]
   1d6c8:	2200      	movs	r2, #0
   1d6ca:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1d6cc:	687b      	ldr	r3, [r7, #4]
   1d6ce:	2201      	movs	r2, #1
   1d6d0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1d6d2:	687b      	ldr	r3, [r7, #4]
   1d6d4:	2200      	movs	r2, #0
   1d6d6:	70da      	strb	r2, [r3, #3]
}
   1d6d8:	46c0      	nop			; (mov r8, r8)
   1d6da:	46bd      	mov	sp, r7
   1d6dc:	b002      	add	sp, #8
   1d6de:	bd80      	pop	{r7, pc}

0001d6e0 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
   1d6e0:	b580      	push	{r7, lr}
   1d6e2:	b082      	sub	sp, #8
   1d6e4:	af00      	add	r7, sp, #0
   1d6e6:	0002      	movs	r2, r0
   1d6e8:	1dfb      	adds	r3, r7, #7
   1d6ea:	701a      	strb	r2, [r3, #0]
	switch (vref) {
   1d6ec:	1dfb      	adds	r3, r7, #7
   1d6ee:	781b      	ldrb	r3, [r3, #0]
   1d6f0:	2b00      	cmp	r3, #0
   1d6f2:	d002      	beq.n	1d6fa <system_voltage_reference_enable+0x1a>
   1d6f4:	2b01      	cmp	r3, #1
   1d6f6:	d007      	beq.n	1d708 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
   1d6f8:	e00d      	b.n	1d716 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
   1d6fa:	4b08      	ldr	r3, [pc, #32]	; (1d71c <system_voltage_reference_enable+0x3c>)
   1d6fc:	4a07      	ldr	r2, [pc, #28]	; (1d71c <system_voltage_reference_enable+0x3c>)
   1d6fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
   1d700:	2102      	movs	r1, #2
   1d702:	430a      	orrs	r2, r1
   1d704:	641a      	str	r2, [r3, #64]	; 0x40
			break;
   1d706:	e006      	b.n	1d716 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
   1d708:	4b04      	ldr	r3, [pc, #16]	; (1d71c <system_voltage_reference_enable+0x3c>)
   1d70a:	4a04      	ldr	r2, [pc, #16]	; (1d71c <system_voltage_reference_enable+0x3c>)
   1d70c:	6c12      	ldr	r2, [r2, #64]	; 0x40
   1d70e:	2104      	movs	r1, #4
   1d710:	430a      	orrs	r2, r1
   1d712:	641a      	str	r2, [r3, #64]	; 0x40
			break;
   1d714:	46c0      	nop			; (mov r8, r8)
	}
}
   1d716:	46bd      	mov	sp, r7
   1d718:	b002      	add	sp, #8
   1d71a:	bd80      	pop	{r7, pc}
   1d71c:	40000800 	.word	0x40000800

0001d720 <adc_is_syncing>:
{
   1d720:	b580      	push	{r7, lr}
   1d722:	b084      	sub	sp, #16
   1d724:	af00      	add	r7, sp, #0
   1d726:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   1d728:	687b      	ldr	r3, [r7, #4]
   1d72a:	681b      	ldr	r3, [r3, #0]
   1d72c:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   1d72e:	68fb      	ldr	r3, [r7, #12]
   1d730:	7e5b      	ldrb	r3, [r3, #25]
   1d732:	b2db      	uxtb	r3, r3
   1d734:	b25b      	sxtb	r3, r3
   1d736:	2b00      	cmp	r3, #0
   1d738:	da01      	bge.n	1d73e <adc_is_syncing+0x1e>
		return true;
   1d73a:	2301      	movs	r3, #1
   1d73c:	e000      	b.n	1d740 <adc_is_syncing+0x20>
	return false;
   1d73e:	2300      	movs	r3, #0
}
   1d740:	0018      	movs	r0, r3
   1d742:	46bd      	mov	sp, r7
   1d744:	b004      	add	sp, #16
   1d746:	bd80      	pop	{r7, pc}

0001d748 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
   1d748:	b580      	push	{r7, lr}
   1d74a:	b082      	sub	sp, #8
   1d74c:	af00      	add	r7, sp, #0
   1d74e:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
   1d750:	687b      	ldr	r3, [r7, #4]
   1d752:	2200      	movs	r2, #0
   1d754:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
   1d756:	687b      	ldr	r3, [r7, #4]
   1d758:	2200      	movs	r2, #0
   1d75a:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
   1d75c:	687b      	ldr	r3, [r7, #4]
   1d75e:	2200      	movs	r2, #0
   1d760:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
   1d762:	687b      	ldr	r3, [r7, #4]
   1d764:	2200      	movs	r2, #0
   1d766:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
   1d768:	687b      	ldr	r3, [r7, #4]
   1d76a:	2200      	movs	r2, #0
   1d76c:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
   1d76e:	687b      	ldr	r3, [r7, #4]
   1d770:	2200      	movs	r2, #0
   1d772:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
   1d774:	687b      	ldr	r3, [r7, #4]
   1d776:	2200      	movs	r2, #0
   1d778:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
   1d77a:	687b      	ldr	r3, [r7, #4]
   1d77c:	2200      	movs	r2, #0
   1d77e:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
   1d780:	687b      	ldr	r3, [r7, #4]
   1d782:	2200      	movs	r2, #0
   1d784:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
   1d786:	687b      	ldr	r3, [r7, #4]
   1d788:	22c0      	movs	r2, #192	; 0xc0
   1d78a:	0152      	lsls	r2, r2, #5
   1d78c:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
   1d78e:	687b      	ldr	r3, [r7, #4]
   1d790:	2200      	movs	r2, #0
   1d792:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
   1d794:	687b      	ldr	r3, [r7, #4]
   1d796:	2200      	movs	r2, #0
   1d798:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
   1d79a:	687b      	ldr	r3, [r7, #4]
   1d79c:	2200      	movs	r2, #0
   1d79e:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
   1d7a0:	687b      	ldr	r3, [r7, #4]
   1d7a2:	2200      	movs	r2, #0
   1d7a4:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
   1d7a6:	687b      	ldr	r3, [r7, #4]
   1d7a8:	2200      	movs	r2, #0
   1d7aa:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
   1d7ac:	687b      	ldr	r3, [r7, #4]
   1d7ae:	222a      	movs	r2, #42	; 0x2a
   1d7b0:	2100      	movs	r1, #0
   1d7b2:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
   1d7b4:	687b      	ldr	r3, [r7, #4]
   1d7b6:	2200      	movs	r2, #0
   1d7b8:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
   1d7ba:	687b      	ldr	r3, [r7, #4]
   1d7bc:	2200      	movs	r2, #0
   1d7be:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
   1d7c0:	687b      	ldr	r3, [r7, #4]
   1d7c2:	2224      	movs	r2, #36	; 0x24
   1d7c4:	2100      	movs	r1, #0
   1d7c6:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
   1d7c8:	687b      	ldr	r3, [r7, #4]
   1d7ca:	2200      	movs	r2, #0
   1d7cc:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
   1d7ce:	687b      	ldr	r3, [r7, #4]
   1d7d0:	2200      	movs	r2, #0
   1d7d2:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
   1d7d4:	687b      	ldr	r3, [r7, #4]
   1d7d6:	2200      	movs	r2, #0
   1d7d8:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
   1d7da:	687b      	ldr	r3, [r7, #4]
   1d7dc:	222b      	movs	r2, #43	; 0x2b
   1d7de:	2100      	movs	r1, #0
   1d7e0:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
   1d7e2:	687b      	ldr	r3, [r7, #4]
   1d7e4:	222c      	movs	r2, #44	; 0x2c
   1d7e6:	2100      	movs	r1, #0
   1d7e8:	5499      	strb	r1, [r3, r2]
}
   1d7ea:	46c0      	nop			; (mov r8, r8)
   1d7ec:	46bd      	mov	sp, r7
   1d7ee:	b002      	add	sp, #8
   1d7f0:	bd80      	pop	{r7, pc}
	...

0001d7f4 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
   1d7f4:	b580      	push	{r7, lr}
   1d7f6:	b098      	sub	sp, #96	; 0x60
   1d7f8:	af00      	add	r7, sp, #0
   1d7fa:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
   1d7fc:	230c      	movs	r3, #12
   1d7fe:	18fa      	adds	r2, r7, r3
   1d800:	4b15      	ldr	r3, [pc, #84]	; (1d858 <_adc_configure_ain_pin+0x64>)
   1d802:	0010      	movs	r0, r2
   1d804:	0019      	movs	r1, r3
   1d806:	2350      	movs	r3, #80	; 0x50
   1d808:	001a      	movs	r2, r3
   1d80a:	4b14      	ldr	r3, [pc, #80]	; (1d85c <_adc_configure_ain_pin+0x68>)
   1d80c:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
   1d80e:	4b14      	ldr	r3, [pc, #80]	; (1d860 <_adc_configure_ain_pin+0x6c>)
   1d810:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
   1d812:	687b      	ldr	r3, [r7, #4]
   1d814:	2b13      	cmp	r3, #19
   1d816:	d81a      	bhi.n	1d84e <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
   1d818:	230c      	movs	r3, #12
   1d81a:	18fb      	adds	r3, r7, r3
   1d81c:	687a      	ldr	r2, [r7, #4]
   1d81e:	0092      	lsls	r2, r2, #2
   1d820:	58d3      	ldr	r3, [r2, r3]
   1d822:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
   1d824:	2308      	movs	r3, #8
   1d826:	18fb      	adds	r3, r7, r3
   1d828:	0018      	movs	r0, r3
   1d82a:	4b0e      	ldr	r3, [pc, #56]	; (1d864 <_adc_configure_ain_pin+0x70>)
   1d82c:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
   1d82e:	2308      	movs	r3, #8
   1d830:	18fb      	adds	r3, r7, r3
   1d832:	2200      	movs	r2, #0
   1d834:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
   1d836:	2308      	movs	r3, #8
   1d838:	18fb      	adds	r3, r7, r3
   1d83a:	2201      	movs	r2, #1
   1d83c:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
   1d83e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1d840:	b2db      	uxtb	r3, r3
   1d842:	2208      	movs	r2, #8
   1d844:	18ba      	adds	r2, r7, r2
   1d846:	0011      	movs	r1, r2
   1d848:	0018      	movs	r0, r3
   1d84a:	4b07      	ldr	r3, [pc, #28]	; (1d868 <_adc_configure_ain_pin+0x74>)
   1d84c:	4798      	blx	r3
	}
}
   1d84e:	46c0      	nop			; (mov r8, r8)
   1d850:	46bd      	mov	sp, r7
   1d852:	b018      	add	sp, #96	; 0x60
   1d854:	bd80      	pop	{r7, pc}
   1d856:	46c0      	nop			; (mov r8, r8)
   1d858:	0002b4f4 	.word	0x0002b4f4
   1d85c:	00029881 	.word	0x00029881
   1d860:	0000ffff 	.word	0x0000ffff
   1d864:	0001d6b9 	.word	0x0001d6b9
   1d868:	00025421 	.word	0x00025421

0001d86c <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
   1d86c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d86e:	b089      	sub	sp, #36	; 0x24
   1d870:	af00      	add	r7, sp, #0
   1d872:	6078      	str	r0, [r7, #4]
   1d874:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
   1d876:	231f      	movs	r3, #31
   1d878:	18fb      	adds	r3, r7, r3
   1d87a:	2200      	movs	r2, #0
   1d87c:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
   1d87e:	2310      	movs	r3, #16
   1d880:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
   1d882:	2317      	movs	r3, #23
   1d884:	18fb      	adds	r3, r7, r3
   1d886:	2200      	movs	r2, #0
   1d888:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_REVISION_Msk) >> DSU_DID_REVISION_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
   1d88a:	687b      	ldr	r3, [r7, #4]
   1d88c:	681b      	ldr	r3, [r3, #0]
   1d88e:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1d890:	230c      	movs	r3, #12
   1d892:	18fb      	adds	r3, r7, r3
   1d894:	0018      	movs	r0, r3
   1d896:	4bce      	ldr	r3, [pc, #824]	; (1dbd0 <_adc_set_config+0x364>)
   1d898:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
   1d89a:	683b      	ldr	r3, [r7, #0]
   1d89c:	781a      	ldrb	r2, [r3, #0]
   1d89e:	230c      	movs	r3, #12
   1d8a0:	18fb      	adds	r3, r7, r3
   1d8a2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
   1d8a4:	230c      	movs	r3, #12
   1d8a6:	18fb      	adds	r3, r7, r3
   1d8a8:	0019      	movs	r1, r3
   1d8aa:	201e      	movs	r0, #30
   1d8ac:	4bc9      	ldr	r3, [pc, #804]	; (1dbd4 <_adc_set_config+0x368>)
   1d8ae:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
   1d8b0:	201e      	movs	r0, #30
   1d8b2:	4bc9      	ldr	r3, [pc, #804]	; (1dbd8 <_adc_set_config+0x36c>)
   1d8b4:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
   1d8b6:	683b      	ldr	r3, [r7, #0]
   1d8b8:	222c      	movs	r2, #44	; 0x2c
   1d8ba:	5c9b      	ldrb	r3, [r3, r2]
   1d8bc:	2b00      	cmp	r3, #0
   1d8be:	d040      	beq.n	1d942 <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
   1d8c0:	2316      	movs	r3, #22
   1d8c2:	18fb      	adds	r3, r7, r3
   1d8c4:	683a      	ldr	r2, [r7, #0]
   1d8c6:	212b      	movs	r1, #43	; 0x2b
   1d8c8:	5c52      	ldrb	r2, [r2, r1]
   1d8ca:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
   1d8cc:	683b      	ldr	r3, [r7, #0]
   1d8ce:	7b19      	ldrb	r1, [r3, #12]
		uint8_t start_pin =
   1d8d0:	2315      	movs	r3, #21
   1d8d2:	18fb      	adds	r3, r7, r3
   1d8d4:	2216      	movs	r2, #22
   1d8d6:	18ba      	adds	r2, r7, r2
   1d8d8:	7812      	ldrb	r2, [r2, #0]
   1d8da:	188a      	adds	r2, r1, r2
   1d8dc:	701a      	strb	r2, [r3, #0]
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
   1d8de:	683b      	ldr	r3, [r7, #0]
   1d8e0:	222c      	movs	r2, #44	; 0x2c
   1d8e2:	5c99      	ldrb	r1, [r3, r2]
		uint8_t end_pin =
   1d8e4:	230f      	movs	r3, #15
   1d8e6:	18fb      	adds	r3, r7, r3
   1d8e8:	2215      	movs	r2, #21
   1d8ea:	18ba      	adds	r2, r7, r2
   1d8ec:	7812      	ldrb	r2, [r2, #0]
   1d8ee:	188a      	adds	r2, r1, r2
   1d8f0:	701a      	strb	r2, [r3, #0]

		while (start_pin < end_pin) {
   1d8f2:	e018      	b.n	1d926 <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
   1d8f4:	2316      	movs	r3, #22
   1d8f6:	18fb      	adds	r3, r7, r3
   1d8f8:	781b      	ldrb	r3, [r3, #0]
   1d8fa:	220f      	movs	r2, #15
   1d8fc:	4013      	ands	r3, r2
   1d8fe:	683a      	ldr	r2, [r7, #0]
   1d900:	7b12      	ldrb	r2, [r2, #12]
   1d902:	189b      	adds	r3, r3, r2
   1d904:	0018      	movs	r0, r3
   1d906:	4bb5      	ldr	r3, [pc, #724]	; (1dbdc <_adc_set_config+0x370>)
   1d908:	4798      	blx	r3
			start_pin++;
   1d90a:	2315      	movs	r3, #21
   1d90c:	18fb      	adds	r3, r7, r3
   1d90e:	781a      	ldrb	r2, [r3, #0]
   1d910:	2315      	movs	r3, #21
   1d912:	18fb      	adds	r3, r7, r3
   1d914:	3201      	adds	r2, #1
   1d916:	701a      	strb	r2, [r3, #0]
			offset++;
   1d918:	2316      	movs	r3, #22
   1d91a:	18fb      	adds	r3, r7, r3
   1d91c:	781a      	ldrb	r2, [r3, #0]
   1d91e:	2316      	movs	r3, #22
   1d920:	18fb      	adds	r3, r7, r3
   1d922:	3201      	adds	r2, #1
   1d924:	701a      	strb	r2, [r3, #0]
		while (start_pin < end_pin) {
   1d926:	2315      	movs	r3, #21
   1d928:	18fa      	adds	r2, r7, r3
   1d92a:	230f      	movs	r3, #15
   1d92c:	18fb      	adds	r3, r7, r3
   1d92e:	7812      	ldrb	r2, [r2, #0]
   1d930:	781b      	ldrb	r3, [r3, #0]
   1d932:	429a      	cmp	r2, r3
   1d934:	d3de      	bcc.n	1d8f4 <_adc_set_config+0x88>
		}
		_adc_configure_ain_pin(config->negative_input);
   1d936:	683b      	ldr	r3, [r7, #0]
   1d938:	89db      	ldrh	r3, [r3, #14]
   1d93a:	0018      	movs	r0, r3
   1d93c:	4ba7      	ldr	r3, [pc, #668]	; (1dbdc <_adc_set_config+0x370>)
   1d93e:	4798      	blx	r3
   1d940:	e009      	b.n	1d956 <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
   1d942:	683b      	ldr	r3, [r7, #0]
   1d944:	7b1b      	ldrb	r3, [r3, #12]
   1d946:	0018      	movs	r0, r3
   1d948:	4ba4      	ldr	r3, [pc, #656]	; (1dbdc <_adc_set_config+0x370>)
   1d94a:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
   1d94c:	683b      	ldr	r3, [r7, #0]
   1d94e:	89db      	ldrh	r3, [r3, #14]
   1d950:	0018      	movs	r0, r3
   1d952:	4ba2      	ldr	r3, [pc, #648]	; (1dbdc <_adc_set_config+0x370>)
   1d954:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
   1d956:	683b      	ldr	r3, [r7, #0]
   1d958:	7d5b      	ldrb	r3, [r3, #21]
   1d95a:	009b      	lsls	r3, r3, #2
   1d95c:	b2da      	uxtb	r2, r3
   1d95e:	693b      	ldr	r3, [r7, #16]
   1d960:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
   1d962:	683b      	ldr	r3, [r7, #0]
   1d964:	7d9b      	ldrb	r3, [r3, #22]
   1d966:	01db      	lsls	r3, r3, #7
   1d968:	b25a      	sxtb	r2, r3
			(config->reference);
   1d96a:	683b      	ldr	r3, [r7, #0]
   1d96c:	785b      	ldrb	r3, [r3, #1]
   1d96e:	b25b      	sxtb	r3, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
   1d970:	4313      	orrs	r3, r2
   1d972:	b25b      	sxtb	r3, r3
   1d974:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
   1d976:	693b      	ldr	r3, [r7, #16]
   1d978:	705a      	strb	r2, [r3, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
   1d97a:	683b      	ldr	r3, [r7, #0]
   1d97c:	791b      	ldrb	r3, [r3, #4]
   1d97e:	2b34      	cmp	r3, #52	; 0x34
   1d980:	d846      	bhi.n	1da10 <_adc_set_config+0x1a4>
   1d982:	009a      	lsls	r2, r3, #2
   1d984:	4b96      	ldr	r3, [pc, #600]	; (1dbe0 <_adc_set_config+0x374>)
   1d986:	18d3      	adds	r3, r2, r3
   1d988:	681b      	ldr	r3, [r3, #0]
   1d98a:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
   1d98c:	231f      	movs	r3, #31
   1d98e:	18fb      	adds	r3, r7, r3
   1d990:	683a      	ldr	r2, [r7, #0]
   1d992:	7c52      	ldrb	r2, [r2, #17]
   1d994:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
   1d996:	2317      	movs	r3, #23
   1d998:	18fb      	adds	r3, r7, r3
   1d99a:	683a      	ldr	r2, [r7, #0]
   1d99c:	7c12      	ldrb	r2, [r2, #16]
   1d99e:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1d9a0:	2310      	movs	r3, #16
   1d9a2:	61bb      	str	r3, [r7, #24]
		break;
   1d9a4:	e036      	b.n	1da14 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
   1d9a6:	231f      	movs	r3, #31
   1d9a8:	18fb      	adds	r3, r7, r3
   1d9aa:	2201      	movs	r2, #1
   1d9ac:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
   1d9ae:	2317      	movs	r3, #23
   1d9b0:	18fb      	adds	r3, r7, r3
   1d9b2:	2202      	movs	r2, #2
   1d9b4:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1d9b6:	2310      	movs	r3, #16
   1d9b8:	61bb      	str	r3, [r7, #24]
		break;
   1d9ba:	e02b      	b.n	1da14 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
   1d9bc:	231f      	movs	r3, #31
   1d9be:	18fb      	adds	r3, r7, r3
   1d9c0:	2202      	movs	r2, #2
   1d9c2:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
   1d9c4:	2317      	movs	r3, #23
   1d9c6:	18fb      	adds	r3, r7, r3
   1d9c8:	2204      	movs	r2, #4
   1d9ca:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1d9cc:	2310      	movs	r3, #16
   1d9ce:	61bb      	str	r3, [r7, #24]
		break;
   1d9d0:	e020      	b.n	1da14 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
   1d9d2:	231f      	movs	r3, #31
   1d9d4:	18fb      	adds	r3, r7, r3
   1d9d6:	2201      	movs	r2, #1
   1d9d8:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
   1d9da:	2317      	movs	r3, #23
   1d9dc:	18fb      	adds	r3, r7, r3
   1d9de:	2206      	movs	r2, #6
   1d9e0:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1d9e2:	2310      	movs	r3, #16
   1d9e4:	61bb      	str	r3, [r7, #24]
		break;
   1d9e6:	e015      	b.n	1da14 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
   1d9e8:	231f      	movs	r3, #31
   1d9ea:	18fb      	adds	r3, r7, r3
   1d9ec:	2200      	movs	r2, #0
   1d9ee:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
   1d9f0:	2317      	movs	r3, #23
   1d9f2:	18fb      	adds	r3, r7, r3
   1d9f4:	2208      	movs	r2, #8
   1d9f6:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1d9f8:	2310      	movs	r3, #16
   1d9fa:	61bb      	str	r3, [r7, #24]
		break;
   1d9fc:	e00a      	b.n	1da14 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
   1d9fe:	2330      	movs	r3, #48	; 0x30
   1da00:	61bb      	str	r3, [r7, #24]
		break;
   1da02:	e007      	b.n	1da14 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
   1da04:	2320      	movs	r3, #32
   1da06:	61bb      	str	r3, [r7, #24]
		break;
   1da08:	e004      	b.n	1da14 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
   1da0a:	2300      	movs	r3, #0
   1da0c:	61bb      	str	r3, [r7, #24]
		break;
   1da0e:	e001      	b.n	1da14 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
   1da10:	2317      	movs	r3, #23
   1da12:	e1ae      	b.n	1dd72 <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
   1da14:	231f      	movs	r3, #31
   1da16:	18fb      	adds	r3, r7, r3
   1da18:	781b      	ldrb	r3, [r3, #0]
   1da1a:	011b      	lsls	r3, r3, #4
   1da1c:	b2db      	uxtb	r3, r3
   1da1e:	2270      	movs	r2, #112	; 0x70
   1da20:	4013      	ands	r3, r2
   1da22:	b2da      	uxtb	r2, r3
   1da24:	2317      	movs	r3, #23
   1da26:	18fb      	adds	r3, r7, r3
   1da28:	781b      	ldrb	r3, [r3, #0]
   1da2a:	4313      	orrs	r3, r2
   1da2c:	b2da      	uxtb	r2, r3
   1da2e:	693b      	ldr	r3, [r7, #16]
   1da30:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
   1da32:	683b      	ldr	r3, [r7, #0]
   1da34:	7ddb      	ldrb	r3, [r3, #23]
   1da36:	2b3f      	cmp	r3, #63	; 0x3f
   1da38:	d901      	bls.n	1da3e <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
   1da3a:	2317      	movs	r3, #23
   1da3c:	e199      	b.n	1dd72 <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
   1da3e:	683b      	ldr	r3, [r7, #0]
   1da40:	7dda      	ldrb	r2, [r3, #23]
		adc_module->SAMPCTRL.reg =
   1da42:	693b      	ldr	r3, [r7, #16]
   1da44:	70da      	strb	r2, [r3, #3]
	}

	while (adc_is_syncing(module_inst)) {
   1da46:	46c0      	nop			; (mov r8, r8)
   1da48:	687b      	ldr	r3, [r7, #4]
   1da4a:	0018      	movs	r0, r3
   1da4c:	4b65      	ldr	r3, [pc, #404]	; (1dbe4 <_adc_set_config+0x378>)
   1da4e:	4798      	blx	r3
   1da50:	1e03      	subs	r3, r0, #0
   1da52:	d1f9      	bne.n	1da48 <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
   1da54:	683b      	ldr	r3, [r7, #0]
   1da56:	885a      	ldrh	r2, [r3, #2]
   1da58:	69bb      	ldr	r3, [r7, #24]
   1da5a:	b29b      	uxth	r3, r3
   1da5c:	4313      	orrs	r3, r2
   1da5e:	b29a      	uxth	r2, r3
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
   1da60:	683b      	ldr	r3, [r7, #0]
   1da62:	2124      	movs	r1, #36	; 0x24
   1da64:	5c5b      	ldrb	r3, [r3, r1]
   1da66:	b29b      	uxth	r3, r3
   1da68:	00db      	lsls	r3, r3, #3
   1da6a:	b29b      	uxth	r3, r3
			resolution |
   1da6c:	4313      	orrs	r3, r2
   1da6e:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
   1da70:	683b      	ldr	r3, [r7, #0]
   1da72:	7d1b      	ldrb	r3, [r3, #20]
   1da74:	b29b      	uxth	r3, r3
   1da76:	009b      	lsls	r3, r3, #2
   1da78:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
   1da7a:	4313      	orrs	r3, r2
   1da7c:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
   1da7e:	683b      	ldr	r3, [r7, #0]
   1da80:	7c9b      	ldrb	r3, [r3, #18]
   1da82:	b29b      	uxth	r3, r3
   1da84:	18db      	adds	r3, r3, r3
   1da86:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
   1da88:	4313      	orrs	r3, r2
   1da8a:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
   1da8c:	683b      	ldr	r3, [r7, #0]
   1da8e:	7cdb      	ldrb	r3, [r3, #19]
   1da90:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
   1da92:	4313      	orrs	r3, r2
   1da94:	b29a      	uxth	r2, r3
	adc_module->CTRLB.reg =
   1da96:	693b      	ldr	r3, [r7, #16]
   1da98:	809a      	strh	r2, [r3, #4]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
   1da9a:	683b      	ldr	r3, [r7, #0]
   1da9c:	7e1b      	ldrb	r3, [r3, #24]
   1da9e:	2b00      	cmp	r3, #0
   1daa0:	d100      	bne.n	1daa4 <_adc_set_config+0x238>
   1daa2:	e0c4      	b.n	1dc2e <_adc_set_config+0x3c2>
		switch (resolution) {
   1daa4:	69bb      	ldr	r3, [r7, #24]
   1daa6:	2b10      	cmp	r3, #16
   1daa8:	d100      	bne.n	1daac <_adc_set_config+0x240>
   1daaa:	e076      	b.n	1db9a <_adc_set_config+0x32e>
   1daac:	d802      	bhi.n	1dab4 <_adc_set_config+0x248>
   1daae:	2b00      	cmp	r3, #0
   1dab0:	d04d      	beq.n	1db4e <_adc_set_config+0x2e2>
   1dab2:	e0bc      	b.n	1dc2e <_adc_set_config+0x3c2>
   1dab4:	2b20      	cmp	r3, #32
   1dab6:	d023      	beq.n	1db00 <_adc_set_config+0x294>
   1dab8:	2b30      	cmp	r3, #48	; 0x30
   1daba:	d000      	beq.n	1dabe <_adc_set_config+0x252>
   1dabc:	e0b7      	b.n	1dc2e <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
   1dabe:	683b      	ldr	r3, [r7, #0]
   1dac0:	7cdb      	ldrb	r3, [r3, #19]
   1dac2:	2b00      	cmp	r3, #0
   1dac4:	d011      	beq.n	1daea <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
   1dac6:	683b      	ldr	r3, [r7, #0]
   1dac8:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1daca:	2b7f      	cmp	r3, #127	; 0x7f
   1dacc:	dc0b      	bgt.n	1dae6 <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
   1dace:	683b      	ldr	r3, [r7, #0]
   1dad0:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
   1dad2:	3380      	adds	r3, #128	; 0x80
   1dad4:	db07      	blt.n	1dae6 <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
   1dad6:	683b      	ldr	r3, [r7, #0]
   1dad8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
   1dada:	2b7f      	cmp	r3, #127	; 0x7f
   1dadc:	dc03      	bgt.n	1dae6 <_adc_set_config+0x27a>
					config->window.window_upper_value < -128)) {
   1dade:	683b      	ldr	r3, [r7, #0]
   1dae0:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
   1dae2:	3380      	adds	r3, #128	; 0x80
   1dae4:	da01      	bge.n	1daea <_adc_set_config+0x27e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1dae6:	2317      	movs	r3, #23
   1dae8:	e143      	b.n	1dd72 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
   1daea:	683b      	ldr	r3, [r7, #0]
   1daec:	69db      	ldr	r3, [r3, #28]
   1daee:	2bff      	cmp	r3, #255	; 0xff
   1daf0:	dc04      	bgt.n	1dafc <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
   1daf2:	683b      	ldr	r3, [r7, #0]
   1daf4:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
   1daf6:	2bff      	cmp	r3, #255	; 0xff
   1daf8:	dc00      	bgt.n	1dafc <_adc_set_config+0x290>
   1dafa:	e091      	b.n	1dc20 <_adc_set_config+0x3b4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1dafc:	2317      	movs	r3, #23
   1dafe:	e138      	b.n	1dd72 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
   1db00:	683b      	ldr	r3, [r7, #0]
   1db02:	7cdb      	ldrb	r3, [r3, #19]
   1db04:	2b00      	cmp	r3, #0
   1db06:	d015      	beq.n	1db34 <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
   1db08:	683b      	ldr	r3, [r7, #0]
   1db0a:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1db0c:	4a36      	ldr	r2, [pc, #216]	; (1dbe8 <_adc_set_config+0x37c>)
   1db0e:	4293      	cmp	r3, r2
   1db10:	dc0e      	bgt.n	1db30 <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
   1db12:	683b      	ldr	r3, [r7, #0]
   1db14:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
   1db16:	4a35      	ldr	r2, [pc, #212]	; (1dbec <_adc_set_config+0x380>)
   1db18:	4293      	cmp	r3, r2
   1db1a:	db09      	blt.n	1db30 <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
   1db1c:	683b      	ldr	r3, [r7, #0]
   1db1e:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
   1db20:	4a31      	ldr	r2, [pc, #196]	; (1dbe8 <_adc_set_config+0x37c>)
   1db22:	4293      	cmp	r3, r2
   1db24:	dc04      	bgt.n	1db30 <_adc_set_config+0x2c4>
					config->window.window_upper_value < -512)) {
   1db26:	683b      	ldr	r3, [r7, #0]
   1db28:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
   1db2a:	4a30      	ldr	r2, [pc, #192]	; (1dbec <_adc_set_config+0x380>)
   1db2c:	4293      	cmp	r3, r2
   1db2e:	da01      	bge.n	1db34 <_adc_set_config+0x2c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1db30:	2317      	movs	r3, #23
   1db32:	e11e      	b.n	1dd72 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
   1db34:	683b      	ldr	r3, [r7, #0]
   1db36:	69db      	ldr	r3, [r3, #28]
   1db38:	4a2d      	ldr	r2, [pc, #180]	; (1dbf0 <_adc_set_config+0x384>)
   1db3a:	4293      	cmp	r3, r2
   1db3c:	dc05      	bgt.n	1db4a <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
   1db3e:	683b      	ldr	r3, [r7, #0]
   1db40:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
   1db42:	4a2b      	ldr	r2, [pc, #172]	; (1dbf0 <_adc_set_config+0x384>)
   1db44:	4293      	cmp	r3, r2
   1db46:	dc00      	bgt.n	1db4a <_adc_set_config+0x2de>
   1db48:	e06c      	b.n	1dc24 <_adc_set_config+0x3b8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1db4a:	2317      	movs	r3, #23
   1db4c:	e111      	b.n	1dd72 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
   1db4e:	683b      	ldr	r3, [r7, #0]
   1db50:	7cdb      	ldrb	r3, [r3, #19]
   1db52:	2b00      	cmp	r3, #0
   1db54:	d015      	beq.n	1db82 <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
   1db56:	683b      	ldr	r3, [r7, #0]
   1db58:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1db5a:	4a26      	ldr	r2, [pc, #152]	; (1dbf4 <_adc_set_config+0x388>)
   1db5c:	4293      	cmp	r3, r2
   1db5e:	dc0e      	bgt.n	1db7e <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
   1db60:	683b      	ldr	r3, [r7, #0]
   1db62:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
   1db64:	4a24      	ldr	r2, [pc, #144]	; (1dbf8 <_adc_set_config+0x38c>)
   1db66:	4293      	cmp	r3, r2
   1db68:	db09      	blt.n	1db7e <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
   1db6a:	683b      	ldr	r3, [r7, #0]
   1db6c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
   1db6e:	4a21      	ldr	r2, [pc, #132]	; (1dbf4 <_adc_set_config+0x388>)
   1db70:	4293      	cmp	r3, r2
   1db72:	dc04      	bgt.n	1db7e <_adc_set_config+0x312>
					config->window.window_upper_value < -2048)) {
   1db74:	683b      	ldr	r3, [r7, #0]
   1db76:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
   1db78:	4a1f      	ldr	r2, [pc, #124]	; (1dbf8 <_adc_set_config+0x38c>)
   1db7a:	4293      	cmp	r3, r2
   1db7c:	da01      	bge.n	1db82 <_adc_set_config+0x316>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1db7e:	2317      	movs	r3, #23
   1db80:	e0f7      	b.n	1dd72 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
   1db82:	683b      	ldr	r3, [r7, #0]
   1db84:	69db      	ldr	r3, [r3, #28]
   1db86:	4a1d      	ldr	r2, [pc, #116]	; (1dbfc <_adc_set_config+0x390>)
   1db88:	4293      	cmp	r3, r2
   1db8a:	dc04      	bgt.n	1db96 <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
   1db8c:	683b      	ldr	r3, [r7, #0]
   1db8e:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
   1db90:	4a1a      	ldr	r2, [pc, #104]	; (1dbfc <_adc_set_config+0x390>)
   1db92:	4293      	cmp	r3, r2
   1db94:	dd48      	ble.n	1dc28 <_adc_set_config+0x3bc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1db96:	2317      	movs	r3, #23
   1db98:	e0eb      	b.n	1dd72 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
   1db9a:	683b      	ldr	r3, [r7, #0]
   1db9c:	7cdb      	ldrb	r3, [r3, #19]
   1db9e:	2b00      	cmp	r3, #0
   1dba0:	d032      	beq.n	1dc08 <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
   1dba2:	683b      	ldr	r3, [r7, #0]
   1dba4:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1dba6:	4a16      	ldr	r2, [pc, #88]	; (1dc00 <_adc_set_config+0x394>)
   1dba8:	4293      	cmp	r3, r2
   1dbaa:	dc0e      	bgt.n	1dbca <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
   1dbac:	683b      	ldr	r3, [r7, #0]
   1dbae:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
   1dbb0:	4a14      	ldr	r2, [pc, #80]	; (1dc04 <_adc_set_config+0x398>)
   1dbb2:	4293      	cmp	r3, r2
   1dbb4:	db09      	blt.n	1dbca <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
   1dbb6:	683b      	ldr	r3, [r7, #0]
   1dbb8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
   1dbba:	4a11      	ldr	r2, [pc, #68]	; (1dc00 <_adc_set_config+0x394>)
   1dbbc:	4293      	cmp	r3, r2
   1dbbe:	dc04      	bgt.n	1dbca <_adc_set_config+0x35e>
					config->window.window_upper_value < -32768)) {
   1dbc0:	683b      	ldr	r3, [r7, #0]
   1dbc2:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
   1dbc4:	4a0f      	ldr	r2, [pc, #60]	; (1dc04 <_adc_set_config+0x398>)
   1dbc6:	4293      	cmp	r3, r2
   1dbc8:	da1e      	bge.n	1dc08 <_adc_set_config+0x39c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1dbca:	2317      	movs	r3, #23
   1dbcc:	e0d1      	b.n	1dd72 <_adc_set_config+0x506>
   1dbce:	46c0      	nop			; (mov r8, r8)
   1dbd0:	0001d645 	.word	0x0001d645
   1dbd4:	00025135 	.word	0x00025135
   1dbd8:	00025179 	.word	0x00025179
   1dbdc:	0001d7f5 	.word	0x0001d7f5
   1dbe0:	0002b544 	.word	0x0002b544
   1dbe4:	0001d721 	.word	0x0001d721
   1dbe8:	000001ff 	.word	0x000001ff
   1dbec:	fffffe00 	.word	0xfffffe00
   1dbf0:	000003ff 	.word	0x000003ff
   1dbf4:	000007ff 	.word	0x000007ff
   1dbf8:	fffff800 	.word	0xfffff800
   1dbfc:	00000fff 	.word	0x00000fff
   1dc00:	00007fff 	.word	0x00007fff
   1dc04:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
   1dc08:	683b      	ldr	r3, [r7, #0]
   1dc0a:	69db      	ldr	r3, [r3, #28]
   1dc0c:	4a5b      	ldr	r2, [pc, #364]	; (1dd7c <_adc_set_config+0x510>)
   1dc0e:	4293      	cmp	r3, r2
   1dc10:	dc04      	bgt.n	1dc1c <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
   1dc12:	683b      	ldr	r3, [r7, #0]
   1dc14:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
   1dc16:	4a59      	ldr	r2, [pc, #356]	; (1dd7c <_adc_set_config+0x510>)
   1dc18:	4293      	cmp	r3, r2
   1dc1a:	dd07      	ble.n	1dc2c <_adc_set_config+0x3c0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1dc1c:	2317      	movs	r3, #23
   1dc1e:	e0a8      	b.n	1dd72 <_adc_set_config+0x506>
			break;
   1dc20:	46c0      	nop			; (mov r8, r8)
   1dc22:	e004      	b.n	1dc2e <_adc_set_config+0x3c2>
			break;
   1dc24:	46c0      	nop			; (mov r8, r8)
   1dc26:	e002      	b.n	1dc2e <_adc_set_config+0x3c2>
			break;
   1dc28:	46c0      	nop			; (mov r8, r8)
   1dc2a:	e000      	b.n	1dc2e <_adc_set_config+0x3c2>
			}
			break;
   1dc2c:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
   1dc2e:	46c0      	nop			; (mov r8, r8)
   1dc30:	687b      	ldr	r3, [r7, #4]
   1dc32:	0018      	movs	r0, r3
   1dc34:	4b52      	ldr	r3, [pc, #328]	; (1dd80 <_adc_set_config+0x514>)
   1dc36:	4798      	blx	r3
   1dc38:	1e03      	subs	r3, r0, #0
   1dc3a:	d1f9      	bne.n	1dc30 <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
   1dc3c:	683b      	ldr	r3, [r7, #0]
   1dc3e:	7e1a      	ldrb	r2, [r3, #24]
   1dc40:	693b      	ldr	r3, [r7, #16]
   1dc42:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
   1dc44:	46c0      	nop			; (mov r8, r8)
   1dc46:	687b      	ldr	r3, [r7, #4]
   1dc48:	0018      	movs	r0, r3
   1dc4a:	4b4d      	ldr	r3, [pc, #308]	; (1dd80 <_adc_set_config+0x514>)
   1dc4c:	4798      	blx	r3
   1dc4e:	1e03      	subs	r3, r0, #0
   1dc50:	d1f9      	bne.n	1dc46 <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
   1dc52:	683b      	ldr	r3, [r7, #0]
   1dc54:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
   1dc56:	b29a      	uxth	r2, r3
   1dc58:	693b      	ldr	r3, [r7, #16]
   1dc5a:	839a      	strh	r2, [r3, #28]

	while (adc_is_syncing(module_inst)) {
   1dc5c:	46c0      	nop			; (mov r8, r8)
   1dc5e:	687b      	ldr	r3, [r7, #4]
   1dc60:	0018      	movs	r0, r3
   1dc62:	4b47      	ldr	r3, [pc, #284]	; (1dd80 <_adc_set_config+0x514>)
   1dc64:	4798      	blx	r3
   1dc66:	1e03      	subs	r3, r0, #0
   1dc68:	d1f9      	bne.n	1dc5e <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
   1dc6a:	683b      	ldr	r3, [r7, #0]
   1dc6c:	6a1b      	ldr	r3, [r3, #32]
   1dc6e:	b29a      	uxth	r2, r3
   1dc70:	693b      	ldr	r3, [r7, #16]
   1dc72:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
   1dc74:	2314      	movs	r3, #20
   1dc76:	18fb      	adds	r3, r7, r3
   1dc78:	683a      	ldr	r2, [r7, #0]
   1dc7a:	212c      	movs	r1, #44	; 0x2c
   1dc7c:	5c52      	ldrb	r2, [r2, r1]
   1dc7e:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
   1dc80:	2314      	movs	r3, #20
   1dc82:	18fb      	adds	r3, r7, r3
   1dc84:	781b      	ldrb	r3, [r3, #0]
   1dc86:	2b00      	cmp	r3, #0
   1dc88:	d006      	beq.n	1dc98 <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
   1dc8a:	2314      	movs	r3, #20
   1dc8c:	18fb      	adds	r3, r7, r3
   1dc8e:	781a      	ldrb	r2, [r3, #0]
   1dc90:	2314      	movs	r3, #20
   1dc92:	18fb      	adds	r3, r7, r3
   1dc94:	3a01      	subs	r2, #1
   1dc96:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
   1dc98:	2314      	movs	r3, #20
   1dc9a:	18fb      	adds	r3, r7, r3
   1dc9c:	781b      	ldrb	r3, [r3, #0]
   1dc9e:	2b0f      	cmp	r3, #15
   1dca0:	d804      	bhi.n	1dcac <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
   1dca2:	683b      	ldr	r3, [r7, #0]
   1dca4:	222b      	movs	r2, #43	; 0x2b
   1dca6:	5c9b      	ldrb	r3, [r3, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
   1dca8:	2b0f      	cmp	r3, #15
   1dcaa:	d901      	bls.n	1dcb0 <_adc_set_config+0x444>
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
   1dcac:	2317      	movs	r3, #23
   1dcae:	e060      	b.n	1dd72 <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
   1dcb0:	46c0      	nop			; (mov r8, r8)
   1dcb2:	687b      	ldr	r3, [r7, #4]
   1dcb4:	0018      	movs	r0, r3
   1dcb6:	4b32      	ldr	r3, [pc, #200]	; (1dd80 <_adc_set_config+0x514>)
   1dcb8:	4798      	blx	r3
   1dcba:	1e03      	subs	r3, r0, #0
   1dcbc:	d1f9      	bne.n	1dcb2 <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
   1dcbe:	683b      	ldr	r3, [r7, #0]
   1dcc0:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
   1dcc2:	683a      	ldr	r2, [r7, #0]
   1dcc4:	212b      	movs	r1, #43	; 0x2b
   1dcc6:	5c52      	ldrb	r2, [r2, r1]
   1dcc8:	0512      	lsls	r2, r2, #20
			config->gain_factor |
   1dcca:	4313      	orrs	r3, r2
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
   1dccc:	2214      	movs	r2, #20
   1dcce:	18ba      	adds	r2, r7, r2
   1dcd0:	7812      	ldrb	r2, [r2, #0]
   1dcd2:	0412      	lsls	r2, r2, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
   1dcd4:	4313      	orrs	r3, r2
			config->negative_input |
   1dcd6:	683a      	ldr	r2, [r7, #0]
   1dcd8:	89d2      	ldrh	r2, [r2, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
   1dcda:	4313      	orrs	r3, r2
			config->positive_input;
   1dcdc:	683a      	ldr	r2, [r7, #0]
   1dcde:	7b12      	ldrb	r2, [r2, #12]
			config->negative_input |
   1dce0:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
   1dce2:	693b      	ldr	r3, [r7, #16]
   1dce4:	611a      	str	r2, [r3, #16]

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
   1dce6:	683b      	ldr	r3, [r7, #0]
   1dce8:	222a      	movs	r2, #42	; 0x2a
   1dcea:	5c9a      	ldrb	r2, [r3, r2]
   1dcec:	693b      	ldr	r3, [r7, #16]
   1dcee:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
   1dcf0:	693b      	ldr	r3, [r7, #16]
   1dcf2:	220f      	movs	r2, #15
   1dcf4:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
   1dcf6:	683b      	ldr	r3, [r7, #0]
   1dcf8:	2224      	movs	r2, #36	; 0x24
   1dcfa:	5c9b      	ldrb	r3, [r3, r2]
   1dcfc:	2b00      	cmp	r3, #0
   1dcfe:	d01e      	beq.n	1dd3e <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
   1dd00:	683b      	ldr	r3, [r7, #0]
   1dd02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   1dd04:	4a1f      	ldr	r2, [pc, #124]	; (1dd84 <_adc_set_config+0x518>)
   1dd06:	4293      	cmp	r3, r2
   1dd08:	d901      	bls.n	1dd0e <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
   1dd0a:	2317      	movs	r3, #23
   1dd0c:	e031      	b.n	1dd72 <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
   1dd0e:	683b      	ldr	r3, [r7, #0]
   1dd10:	8cda      	ldrh	r2, [r3, #38]	; 0x26
   1dd12:	693b      	ldr	r3, [r7, #16]
   1dd14:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
   1dd16:	683b      	ldr	r3, [r7, #0]
   1dd18:	2228      	movs	r2, #40	; 0x28
   1dd1a:	5e9b      	ldrsh	r3, [r3, r2]
   1dd1c:	4a1a      	ldr	r2, [pc, #104]	; (1dd88 <_adc_set_config+0x51c>)
   1dd1e:	4293      	cmp	r3, r2
   1dd20:	dc05      	bgt.n	1dd2e <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
   1dd22:	683b      	ldr	r3, [r7, #0]
   1dd24:	2228      	movs	r2, #40	; 0x28
   1dd26:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
   1dd28:	4a18      	ldr	r2, [pc, #96]	; (1dd8c <_adc_set_config+0x520>)
   1dd2a:	4293      	cmp	r3, r2
   1dd2c:	da01      	bge.n	1dd32 <_adc_set_config+0x4c6>
			return STATUS_ERR_INVALID_ARG;
   1dd2e:	2317      	movs	r3, #23
   1dd30:	e01f      	b.n	1dd72 <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
   1dd32:	683b      	ldr	r3, [r7, #0]
   1dd34:	2228      	movs	r2, #40	; 0x28
   1dd36:	5e9b      	ldrsh	r3, [r3, r2]
   1dd38:	b29a      	uxth	r2, r3
   1dd3a:	693b      	ldr	r3, [r7, #16]
   1dd3c:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
   1dd3e:	4b14      	ldr	r3, [pc, #80]	; (1dd90 <_adc_set_config+0x524>)
   1dd40:	681b      	ldr	r3, [r3, #0]
   1dd42:	08db      	lsrs	r3, r3, #3
   1dd44:	b29b      	uxth	r3, r3
   1dd46:	021b      	lsls	r3, r3, #8
   1dd48:	b29a      	uxth	r2, r3
   1dd4a:	23e0      	movs	r3, #224	; 0xe0
   1dd4c:	00db      	lsls	r3, r3, #3
   1dd4e:	4013      	ands	r3, r2
   1dd50:	b29a      	uxth	r2, r3
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
   1dd52:	4b10      	ldr	r3, [pc, #64]	; (1dd94 <_adc_set_config+0x528>)
   1dd54:	685c      	ldr	r4, [r3, #4]
   1dd56:	681b      	ldr	r3, [r3, #0]
   1dd58:	0161      	lsls	r1, r4, #5
   1dd5a:	0edd      	lsrs	r5, r3, #27
   1dd5c:	430d      	orrs	r5, r1
   1dd5e:	0ee6      	lsrs	r6, r4, #27
   1dd60:	b2ab      	uxth	r3, r5
   1dd62:	21ff      	movs	r1, #255	; 0xff
   1dd64:	400b      	ands	r3, r1
   1dd66:	b29b      	uxth	r3, r3
			) |
   1dd68:	4313      	orrs	r3, r2
   1dd6a:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
   1dd6c:	693b      	ldr	r3, [r7, #16]
   1dd6e:	851a      	strh	r2, [r3, #40]	; 0x28
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
   1dd70:	2300      	movs	r3, #0
}
   1dd72:	0018      	movs	r0, r3
   1dd74:	46bd      	mov	sp, r7
   1dd76:	b009      	add	sp, #36	; 0x24
   1dd78:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dd7a:	46c0      	nop			; (mov r8, r8)
   1dd7c:	0000ffff 	.word	0x0000ffff
   1dd80:	0001d721 	.word	0x0001d721
   1dd84:	00000fff 	.word	0x00000fff
   1dd88:	000007ff 	.word	0x000007ff
   1dd8c:	fffff800 	.word	0xfffff800
   1dd90:	00806024 	.word	0x00806024
   1dd94:	00806020 	.word	0x00806020

0001dd98 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
   1dd98:	b580      	push	{r7, lr}
   1dd9a:	b086      	sub	sp, #24
   1dd9c:	af00      	add	r7, sp, #0
   1dd9e:	60f8      	str	r0, [r7, #12]
   1dda0:	60b9      	str	r1, [r7, #8]
   1dda2:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
   1dda4:	68fb      	ldr	r3, [r7, #12]
   1dda6:	68ba      	ldr	r2, [r7, #8]
   1dda8:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
   1ddaa:	2380      	movs	r3, #128	; 0x80
   1ddac:	025b      	lsls	r3, r3, #9
   1ddae:	0019      	movs	r1, r3
   1ddb0:	2002      	movs	r0, #2
   1ddb2:	4b32      	ldr	r3, [pc, #200]	; (1de7c <adc_init+0xe4>)
   1ddb4:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
   1ddb6:	68bb      	ldr	r3, [r7, #8]
   1ddb8:	781b      	ldrb	r3, [r3, #0]
   1ddba:	b2db      	uxtb	r3, r3
   1ddbc:	001a      	movs	r2, r3
   1ddbe:	2301      	movs	r3, #1
   1ddc0:	4013      	ands	r3, r2
   1ddc2:	d001      	beq.n	1ddc8 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
   1ddc4:	2305      	movs	r3, #5
   1ddc6:	e055      	b.n	1de74 <adc_init+0xdc>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
   1ddc8:	68bb      	ldr	r3, [r7, #8]
   1ddca:	781b      	ldrb	r3, [r3, #0]
   1ddcc:	b2db      	uxtb	r3, r3
   1ddce:	001a      	movs	r2, r3
   1ddd0:	2302      	movs	r3, #2
   1ddd2:	4013      	ands	r3, r2
   1ddd4:	d001      	beq.n	1ddda <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
   1ddd6:	231c      	movs	r3, #28
   1ddd8:	e04c      	b.n	1de74 <adc_init+0xdc>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
   1ddda:	687b      	ldr	r3, [r7, #4]
   1dddc:	785a      	ldrb	r2, [r3, #1]
   1ddde:	68fb      	ldr	r3, [r7, #12]
   1dde0:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
   1dde2:	68fb      	ldr	r3, [r7, #12]
   1dde4:	791b      	ldrb	r3, [r3, #4]
   1dde6:	2b00      	cmp	r3, #0
   1dde8:	d102      	bne.n	1ddf0 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
   1ddea:	2001      	movs	r0, #1
   1ddec:	4b24      	ldr	r3, [pc, #144]	; (1de80 <adc_init+0xe8>)
   1ddee:	4798      	blx	r3
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
   1ddf0:	2317      	movs	r3, #23
   1ddf2:	18fb      	adds	r3, r7, r3
   1ddf4:	2200      	movs	r2, #0
   1ddf6:	701a      	strb	r2, [r3, #0]
   1ddf8:	e00e      	b.n	1de18 <adc_init+0x80>
		module_inst->callback[i] = NULL;
   1ddfa:	2317      	movs	r3, #23
   1ddfc:	18fb      	adds	r3, r7, r3
   1ddfe:	781a      	ldrb	r2, [r3, #0]
   1de00:	68fb      	ldr	r3, [r7, #12]
   1de02:	3202      	adds	r2, #2
   1de04:	0092      	lsls	r2, r2, #2
   1de06:	2100      	movs	r1, #0
   1de08:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
   1de0a:	2317      	movs	r3, #23
   1de0c:	18fb      	adds	r3, r7, r3
   1de0e:	781a      	ldrb	r2, [r3, #0]
   1de10:	2317      	movs	r3, #23
   1de12:	18fb      	adds	r3, r7, r3
   1de14:	3201      	adds	r2, #1
   1de16:	701a      	strb	r2, [r3, #0]
   1de18:	2317      	movs	r3, #23
   1de1a:	18fb      	adds	r3, r7, r3
   1de1c:	781b      	ldrb	r3, [r3, #0]
   1de1e:	2b02      	cmp	r3, #2
   1de20:	d9eb      	bls.n	1ddfa <adc_init+0x62>
	};

	module_inst->registered_callback_mask = 0;
   1de22:	68fb      	ldr	r3, [r7, #12]
   1de24:	2200      	movs	r2, #0
   1de26:	769a      	strb	r2, [r3, #26]
	module_inst->enabled_callback_mask = 0;
   1de28:	68fb      	ldr	r3, [r7, #12]
   1de2a:	2200      	movs	r2, #0
   1de2c:	76da      	strb	r2, [r3, #27]
	module_inst->remaining_conversions = 0;
   1de2e:	68fb      	ldr	r3, [r7, #12]
   1de30:	2200      	movs	r2, #0
   1de32:	831a      	strh	r2, [r3, #24]
	module_inst->job_status = STATUS_OK;
   1de34:	68fb      	ldr	r3, [r7, #12]
   1de36:	2200      	movs	r2, #0
   1de38:	771a      	strb	r2, [r3, #28]

	_adc_instances[0] = module_inst;
   1de3a:	4b12      	ldr	r3, [pc, #72]	; (1de84 <adc_init+0xec>)
   1de3c:	68fa      	ldr	r2, [r7, #12]
   1de3e:	601a      	str	r2, [r3, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
   1de40:	687b      	ldr	r3, [r7, #4]
   1de42:	222a      	movs	r2, #42	; 0x2a
   1de44:	5c9b      	ldrb	r3, [r3, r2]
   1de46:	2b00      	cmp	r3, #0
   1de48:	d10a      	bne.n	1de60 <adc_init+0xc8>
			!config->freerunning) {
   1de4a:	687b      	ldr	r3, [r7, #4]
   1de4c:	7d1b      	ldrb	r3, [r3, #20]
   1de4e:	2201      	movs	r2, #1
   1de50:	4053      	eors	r3, r2
   1de52:	b2db      	uxtb	r3, r3
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
   1de54:	2b00      	cmp	r3, #0
   1de56:	d003      	beq.n	1de60 <adc_init+0xc8>
		module_inst->software_trigger = true;
   1de58:	68fb      	ldr	r3, [r7, #12]
   1de5a:	2201      	movs	r2, #1
   1de5c:	775a      	strb	r2, [r3, #29]
   1de5e:	e002      	b.n	1de66 <adc_init+0xce>
	} else {
		module_inst->software_trigger = false;
   1de60:	68fb      	ldr	r3, [r7, #12]
   1de62:	2200      	movs	r2, #0
   1de64:	775a      	strb	r2, [r3, #29]
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
   1de66:	687a      	ldr	r2, [r7, #4]
   1de68:	68fb      	ldr	r3, [r7, #12]
   1de6a:	0011      	movs	r1, r2
   1de6c:	0018      	movs	r0, r3
   1de6e:	4b06      	ldr	r3, [pc, #24]	; (1de88 <adc_init+0xf0>)
   1de70:	4798      	blx	r3
   1de72:	0003      	movs	r3, r0
}
   1de74:	0018      	movs	r0, r3
   1de76:	46bd      	mov	sp, r7
   1de78:	b006      	add	sp, #24
   1de7a:	bd80      	pop	{r7, pc}
   1de7c:	0001d65d 	.word	0x0001d65d
   1de80:	0001d6e1 	.word	0x0001d6e1
   1de84:	200008a8 	.word	0x200008a8
   1de88:	0001d86d 	.word	0x0001d86d

0001de8c <adc_is_syncing>:
{
   1de8c:	b580      	push	{r7, lr}
   1de8e:	b084      	sub	sp, #16
   1de90:	af00      	add	r7, sp, #0
   1de92:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   1de94:	687b      	ldr	r3, [r7, #4]
   1de96:	681b      	ldr	r3, [r3, #0]
   1de98:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   1de9a:	68fb      	ldr	r3, [r7, #12]
   1de9c:	7e5b      	ldrb	r3, [r3, #25]
   1de9e:	b2db      	uxtb	r3, r3
   1dea0:	b25b      	sxtb	r3, r3
   1dea2:	2b00      	cmp	r3, #0
   1dea4:	da01      	bge.n	1deaa <adc_is_syncing+0x1e>
		return true;
   1dea6:	2301      	movs	r3, #1
   1dea8:	e000      	b.n	1deac <adc_is_syncing+0x20>
	return false;
   1deaa:	2300      	movs	r3, #0
}
   1deac:	0018      	movs	r0, r3
   1deae:	46bd      	mov	sp, r7
   1deb0:	b004      	add	sp, #16
   1deb2:	bd80      	pop	{r7, pc}

0001deb4 <adc_start_conversion>:
{
   1deb4:	b580      	push	{r7, lr}
   1deb6:	b084      	sub	sp, #16
   1deb8:	af00      	add	r7, sp, #0
   1deba:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   1debc:	687b      	ldr	r3, [r7, #4]
   1debe:	681b      	ldr	r3, [r3, #0]
   1dec0:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
   1dec2:	46c0      	nop			; (mov r8, r8)
   1dec4:	687b      	ldr	r3, [r7, #4]
   1dec6:	0018      	movs	r0, r3
   1dec8:	4b0b      	ldr	r3, [pc, #44]	; (1def8 <adc_start_conversion+0x44>)
   1deca:	4798      	blx	r3
   1decc:	1e03      	subs	r3, r0, #0
   1dece:	d1f9      	bne.n	1dec4 <adc_start_conversion+0x10>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   1ded0:	68fb      	ldr	r3, [r7, #12]
   1ded2:	7b1b      	ldrb	r3, [r3, #12]
   1ded4:	b2db      	uxtb	r3, r3
   1ded6:	2202      	movs	r2, #2
   1ded8:	4313      	orrs	r3, r2
   1deda:	b2da      	uxtb	r2, r3
   1dedc:	68fb      	ldr	r3, [r7, #12]
   1dede:	731a      	strb	r2, [r3, #12]
	while (adc_is_syncing(module_inst)) {
   1dee0:	46c0      	nop			; (mov r8, r8)
   1dee2:	687b      	ldr	r3, [r7, #4]
   1dee4:	0018      	movs	r0, r3
   1dee6:	4b04      	ldr	r3, [pc, #16]	; (1def8 <adc_start_conversion+0x44>)
   1dee8:	4798      	blx	r3
   1deea:	1e03      	subs	r3, r0, #0
   1deec:	d1f9      	bne.n	1dee2 <adc_start_conversion+0x2e>
}
   1deee:	46c0      	nop			; (mov r8, r8)
   1def0:	46bd      	mov	sp, r7
   1def2:	b004      	add	sp, #16
   1def4:	bd80      	pop	{r7, pc}
   1def6:	46c0      	nop			; (mov r8, r8)
   1def8:	0001de8d 	.word	0x0001de8d

0001defc <adc_enable_interrupt>:
{
   1defc:	b580      	push	{r7, lr}
   1defe:	b084      	sub	sp, #16
   1df00:	af00      	add	r7, sp, #0
   1df02:	6078      	str	r0, [r7, #4]
   1df04:	000a      	movs	r2, r1
   1df06:	1cfb      	adds	r3, r7, #3
   1df08:	701a      	strb	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
   1df0a:	687b      	ldr	r3, [r7, #4]
   1df0c:	681b      	ldr	r3, [r3, #0]
   1df0e:	60fb      	str	r3, [r7, #12]
	adc_module->INTENSET.reg = interrupt;
   1df10:	68fb      	ldr	r3, [r7, #12]
   1df12:	1cfa      	adds	r2, r7, #3
   1df14:	7812      	ldrb	r2, [r2, #0]
   1df16:	75da      	strb	r2, [r3, #23]
}
   1df18:	46c0      	nop			; (mov r8, r8)
   1df1a:	46bd      	mov	sp, r7
   1df1c:	b004      	add	sp, #16
   1df1e:	bd80      	pop	{r7, pc}

0001df20 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   1df20:	b580      	push	{r7, lr}
   1df22:	b084      	sub	sp, #16
   1df24:	af00      	add	r7, sp, #0
   1df26:	6078      	str	r0, [r7, #4]
   1df28:	000a      	movs	r2, r1
   1df2a:	1cfb      	adds	r3, r7, #3
   1df2c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   1df2e:	687b      	ldr	r3, [r7, #4]
   1df30:	681b      	ldr	r3, [r3, #0]
   1df32:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   1df34:	68fb      	ldr	r3, [r7, #12]
   1df36:	1cfa      	adds	r2, r7, #3
   1df38:	7812      	ldrb	r2, [r2, #0]
   1df3a:	759a      	strb	r2, [r3, #22]
}
   1df3c:	46c0      	nop			; (mov r8, r8)
   1df3e:	46bd      	mov	sp, r7
   1df40:	b004      	add	sp, #16
   1df42:	bd80      	pop	{r7, pc}

0001df44 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   1df44:	b580      	push	{r7, lr}
   1df46:	b084      	sub	sp, #16
   1df48:	af00      	add	r7, sp, #0
   1df4a:	0002      	movs	r2, r0
   1df4c:	1dfb      	adds	r3, r7, #7
   1df4e:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   1df50:	1dfb      	adds	r3, r7, #7
   1df52:	781a      	ldrb	r2, [r3, #0]
   1df54:	4b47      	ldr	r3, [pc, #284]	; (1e074 <_adc_interrupt_handler+0x130>)
   1df56:	0092      	lsls	r2, r2, #2
   1df58:	58d3      	ldr	r3, [r2, r3]
   1df5a:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   1df5c:	68fb      	ldr	r3, [r7, #12]
   1df5e:	681b      	ldr	r3, [r3, #0]
   1df60:	7e1b      	ldrb	r3, [r3, #24]
   1df62:	b2da      	uxtb	r2, r3
   1df64:	68fb      	ldr	r3, [r7, #12]
   1df66:	681b      	ldr	r3, [r3, #0]
   1df68:	7ddb      	ldrb	r3, [r3, #23]
   1df6a:	b2db      	uxtb	r3, r3
   1df6c:	4013      	ands	r3, r2
   1df6e:	b2db      	uxtb	r3, r3
   1df70:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   1df72:	68bb      	ldr	r3, [r7, #8]
   1df74:	2201      	movs	r2, #1
   1df76:	4013      	ands	r3, r2
   1df78:	d045      	beq.n	1e006 <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   1df7a:	68fb      	ldr	r3, [r7, #12]
   1df7c:	681b      	ldr	r3, [r3, #0]
   1df7e:	2201      	movs	r2, #1
   1df80:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   1df82:	46c0      	nop			; (mov r8, r8)
   1df84:	68fb      	ldr	r3, [r7, #12]
   1df86:	0018      	movs	r0, r3
   1df88:	4b3b      	ldr	r3, [pc, #236]	; (1e078 <_adc_interrupt_handler+0x134>)
   1df8a:	4798      	blx	r3
   1df8c:	1e03      	subs	r3, r0, #0
   1df8e:	d1f9      	bne.n	1df84 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   1df90:	68fb      	ldr	r3, [r7, #12]
   1df92:	695b      	ldr	r3, [r3, #20]
   1df94:	1c99      	adds	r1, r3, #2
   1df96:	68fa      	ldr	r2, [r7, #12]
   1df98:	6151      	str	r1, [r2, #20]
   1df9a:	68fa      	ldr	r2, [r7, #12]
   1df9c:	6812      	ldr	r2, [r2, #0]
   1df9e:	8b52      	ldrh	r2, [r2, #26]
   1dfa0:	b292      	uxth	r2, r2
   1dfa2:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   1dfa4:	68fb      	ldr	r3, [r7, #12]
   1dfa6:	8b1b      	ldrh	r3, [r3, #24]
   1dfa8:	b29b      	uxth	r3, r3
   1dfaa:	3b01      	subs	r3, #1
   1dfac:	b29b      	uxth	r3, r3
   1dfae:	68fa      	ldr	r2, [r7, #12]
   1dfb0:	1c19      	adds	r1, r3, #0
   1dfb2:	8311      	strh	r1, [r2, #24]
   1dfb4:	2b00      	cmp	r3, #0
   1dfb6:	d008      	beq.n	1dfca <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   1dfb8:	68fb      	ldr	r3, [r7, #12]
   1dfba:	7f5b      	ldrb	r3, [r3, #29]
   1dfbc:	2b00      	cmp	r3, #0
   1dfbe:	d022      	beq.n	1e006 <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   1dfc0:	68fb      	ldr	r3, [r7, #12]
   1dfc2:	0018      	movs	r0, r3
   1dfc4:	4b2d      	ldr	r3, [pc, #180]	; (1e07c <_adc_interrupt_handler+0x138>)
   1dfc6:	4798      	blx	r3
   1dfc8:	e01d      	b.n	1e006 <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   1dfca:	68fb      	ldr	r3, [r7, #12]
   1dfcc:	2101      	movs	r1, #1
   1dfce:	0018      	movs	r0, r3
   1dfd0:	4b2b      	ldr	r3, [pc, #172]	; (1e080 <_adc_interrupt_handler+0x13c>)
   1dfd2:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   1dfd4:	68fb      	ldr	r3, [r7, #12]
   1dfd6:	7f1b      	ldrb	r3, [r3, #28]
   1dfd8:	b2db      	uxtb	r3, r3
   1dfda:	2b05      	cmp	r3, #5
   1dfdc:	d113      	bne.n	1e006 <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   1dfde:	68fb      	ldr	r3, [r7, #12]
   1dfe0:	2200      	movs	r2, #0
   1dfe2:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   1dfe4:	68fb      	ldr	r3, [r7, #12]
   1dfe6:	7edb      	ldrb	r3, [r3, #27]
   1dfe8:	001a      	movs	r2, r3
   1dfea:	2301      	movs	r3, #1
   1dfec:	4013      	ands	r3, r2
   1dfee:	d00a      	beq.n	1e006 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   1dff0:	68fb      	ldr	r3, [r7, #12]
   1dff2:	7e9b      	ldrb	r3, [r3, #26]
   1dff4:	001a      	movs	r2, r3
   1dff6:	2301      	movs	r3, #1
   1dff8:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   1dffa:	d004      	beq.n	1e006 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   1dffc:	68fb      	ldr	r3, [r7, #12]
   1dffe:	689b      	ldr	r3, [r3, #8]
   1e000:	68fa      	ldr	r2, [r7, #12]
   1e002:	0010      	movs	r0, r2
   1e004:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   1e006:	68bb      	ldr	r3, [r7, #8]
   1e008:	2204      	movs	r2, #4
   1e00a:	4013      	ands	r3, r2
   1e00c:	d014      	beq.n	1e038 <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   1e00e:	68fb      	ldr	r3, [r7, #12]
   1e010:	681b      	ldr	r3, [r3, #0]
   1e012:	2204      	movs	r2, #4
   1e014:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   1e016:	68fb      	ldr	r3, [r7, #12]
   1e018:	7edb      	ldrb	r3, [r3, #27]
   1e01a:	001a      	movs	r2, r3
   1e01c:	2302      	movs	r3, #2
   1e01e:	4013      	ands	r3, r2
   1e020:	d00a      	beq.n	1e038 <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   1e022:	68fb      	ldr	r3, [r7, #12]
   1e024:	7e9b      	ldrb	r3, [r3, #26]
   1e026:	001a      	movs	r2, r3
   1e028:	2302      	movs	r3, #2
   1e02a:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   1e02c:	d004      	beq.n	1e038 <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   1e02e:	68fb      	ldr	r3, [r7, #12]
   1e030:	68db      	ldr	r3, [r3, #12]
   1e032:	68fa      	ldr	r2, [r7, #12]
   1e034:	0010      	movs	r0, r2
   1e036:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   1e038:	68bb      	ldr	r3, [r7, #8]
   1e03a:	2202      	movs	r2, #2
   1e03c:	4013      	ands	r3, r2
   1e03e:	d014      	beq.n	1e06a <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   1e040:	68fb      	ldr	r3, [r7, #12]
   1e042:	681b      	ldr	r3, [r3, #0]
   1e044:	2202      	movs	r2, #2
   1e046:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   1e048:	68fb      	ldr	r3, [r7, #12]
   1e04a:	7edb      	ldrb	r3, [r3, #27]
   1e04c:	001a      	movs	r2, r3
   1e04e:	2304      	movs	r3, #4
   1e050:	4013      	ands	r3, r2
   1e052:	d00a      	beq.n	1e06a <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   1e054:	68fb      	ldr	r3, [r7, #12]
   1e056:	7e9b      	ldrb	r3, [r3, #26]
   1e058:	001a      	movs	r2, r3
   1e05a:	2304      	movs	r3, #4
   1e05c:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   1e05e:	d004      	beq.n	1e06a <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   1e060:	68fb      	ldr	r3, [r7, #12]
   1e062:	691b      	ldr	r3, [r3, #16]
   1e064:	68fa      	ldr	r2, [r7, #12]
   1e066:	0010      	movs	r0, r2
   1e068:	4798      	blx	r3
		}
	}
}
   1e06a:	46c0      	nop			; (mov r8, r8)
   1e06c:	46bd      	mov	sp, r7
   1e06e:	b004      	add	sp, #16
   1e070:	bd80      	pop	{r7, pc}
   1e072:	46c0      	nop			; (mov r8, r8)
   1e074:	200008a8 	.word	0x200008a8
   1e078:	0001de8d 	.word	0x0001de8d
   1e07c:	0001deb5 	.word	0x0001deb5
   1e080:	0001df21 	.word	0x0001df21

0001e084 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   1e084:	b580      	push	{r7, lr}
   1e086:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   1e088:	2000      	movs	r0, #0
   1e08a:	4b02      	ldr	r3, [pc, #8]	; (1e094 <ADC_Handler+0x10>)
   1e08c:	4798      	blx	r3
}
   1e08e:	46c0      	nop			; (mov r8, r8)
   1e090:	46bd      	mov	sp, r7
   1e092:	bd80      	pop	{r7, pc}
   1e094:	0001df45 	.word	0x0001df45

0001e098 <adc_register_callback>:
 */
void adc_register_callback(
		struct adc_module *const module,
		adc_callback_t callback_func,
		enum adc_callback callback_type)
{
   1e098:	b580      	push	{r7, lr}
   1e09a:	b084      	sub	sp, #16
   1e09c:	af00      	add	r7, sp, #0
   1e09e:	60f8      	str	r0, [r7, #12]
   1e0a0:	60b9      	str	r1, [r7, #8]
   1e0a2:	1dfb      	adds	r3, r7, #7
   1e0a4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   1e0a6:	1dfb      	adds	r3, r7, #7
   1e0a8:	781a      	ldrb	r2, [r3, #0]
   1e0aa:	68fb      	ldr	r3, [r7, #12]
   1e0ac:	3202      	adds	r2, #2
   1e0ae:	0092      	lsls	r2, r2, #2
   1e0b0:	68b9      	ldr	r1, [r7, #8]
   1e0b2:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback_mask |= (1 << callback_type);
   1e0b4:	68fb      	ldr	r3, [r7, #12]
   1e0b6:	7e9b      	ldrb	r3, [r3, #26]
   1e0b8:	b25a      	sxtb	r2, r3
   1e0ba:	1dfb      	adds	r3, r7, #7
   1e0bc:	781b      	ldrb	r3, [r3, #0]
   1e0be:	2101      	movs	r1, #1
   1e0c0:	4099      	lsls	r1, r3
   1e0c2:	000b      	movs	r3, r1
   1e0c4:	b25b      	sxtb	r3, r3
   1e0c6:	4313      	orrs	r3, r2
   1e0c8:	b25b      	sxtb	r3, r3
   1e0ca:	b2da      	uxtb	r2, r3
   1e0cc:	68fb      	ldr	r3, [r7, #12]
   1e0ce:	769a      	strb	r2, [r3, #26]
}
   1e0d0:	46c0      	nop			; (mov r8, r8)
   1e0d2:	46bd      	mov	sp, r7
   1e0d4:	b004      	add	sp, #16
   1e0d6:	bd80      	pop	{r7, pc}

0001e0d8 <adc_read_buffer_job>:
 */
enum status_code adc_read_buffer_job(
		struct adc_module *const module_inst,
		uint16_t *buffer,
		uint16_t samples)
{
   1e0d8:	b580      	push	{r7, lr}
   1e0da:	b084      	sub	sp, #16
   1e0dc:	af00      	add	r7, sp, #0
   1e0de:	60f8      	str	r0, [r7, #12]
   1e0e0:	60b9      	str	r1, [r7, #8]
   1e0e2:	1dbb      	adds	r3, r7, #6
   1e0e4:	801a      	strh	r2, [r3, #0]
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
   1e0e6:	68fb      	ldr	r3, [r7, #12]
   1e0e8:	8b1b      	ldrh	r3, [r3, #24]
   1e0ea:	b29b      	uxth	r3, r3
   1e0ec:	2b00      	cmp	r3, #0
   1e0ee:	d104      	bne.n	1e0fa <adc_read_buffer_job+0x22>
			module_inst->job_status == STATUS_BUSY){
   1e0f0:	68fb      	ldr	r3, [r7, #12]
   1e0f2:	7f1b      	ldrb	r3, [r3, #28]
   1e0f4:	b2db      	uxtb	r3, r3
	if(module_inst->remaining_conversions != 0 ||
   1e0f6:	2b05      	cmp	r3, #5
   1e0f8:	d101      	bne.n	1e0fe <adc_read_buffer_job+0x26>
		return STATUS_BUSY;
   1e0fa:	2305      	movs	r3, #5
   1e0fc:	e017      	b.n	1e12e <adc_read_buffer_job+0x56>
	}

	module_inst->job_status = STATUS_BUSY;
   1e0fe:	68fb      	ldr	r3, [r7, #12]
   1e100:	2205      	movs	r2, #5
   1e102:	771a      	strb	r2, [r3, #28]
	module_inst->remaining_conversions = samples;
   1e104:	68fb      	ldr	r3, [r7, #12]
   1e106:	1dba      	adds	r2, r7, #6
   1e108:	8812      	ldrh	r2, [r2, #0]
   1e10a:	831a      	strh	r2, [r3, #24]
	module_inst->job_buffer = buffer;
   1e10c:	68fb      	ldr	r3, [r7, #12]
   1e10e:	68ba      	ldr	r2, [r7, #8]
   1e110:	615a      	str	r2, [r3, #20]

	adc_enable_interrupt(module_inst, ADC_INTERRUPT_RESULT_READY);
   1e112:	68fb      	ldr	r3, [r7, #12]
   1e114:	2101      	movs	r1, #1
   1e116:	0018      	movs	r0, r3
   1e118:	4b07      	ldr	r3, [pc, #28]	; (1e138 <adc_read_buffer_job+0x60>)
   1e11a:	4798      	blx	r3

	if(module_inst->software_trigger == true) {
   1e11c:	68fb      	ldr	r3, [r7, #12]
   1e11e:	7f5b      	ldrb	r3, [r3, #29]
   1e120:	2b00      	cmp	r3, #0
   1e122:	d003      	beq.n	1e12c <adc_read_buffer_job+0x54>
		adc_start_conversion(module_inst);
   1e124:	68fb      	ldr	r3, [r7, #12]
   1e126:	0018      	movs	r0, r3
   1e128:	4b04      	ldr	r3, [pc, #16]	; (1e13c <adc_read_buffer_job+0x64>)
   1e12a:	4798      	blx	r3
	}

	return STATUS_OK;
   1e12c:	2300      	movs	r3, #0
}
   1e12e:	0018      	movs	r0, r3
   1e130:	46bd      	mov	sp, r7
   1e132:	b004      	add	sp, #16
   1e134:	bd80      	pop	{r7, pc}
   1e136:	46c0      	nop			; (mov r8, r8)
   1e138:	0001defd 	.word	0x0001defd
   1e13c:	0001deb5 	.word	0x0001deb5

0001e140 <system_interrupt_disable>:
{
   1e140:	b580      	push	{r7, lr}
   1e142:	b082      	sub	sp, #8
   1e144:	af00      	add	r7, sp, #0
   1e146:	0002      	movs	r2, r0
   1e148:	1dfb      	adds	r3, r7, #7
   1e14a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1e14c:	4a07      	ldr	r2, [pc, #28]	; (1e16c <system_interrupt_disable+0x2c>)
   1e14e:	1dfb      	adds	r3, r7, #7
   1e150:	781b      	ldrb	r3, [r3, #0]
   1e152:	0019      	movs	r1, r3
   1e154:	231f      	movs	r3, #31
   1e156:	400b      	ands	r3, r1
   1e158:	2101      	movs	r1, #1
   1e15a:	4099      	lsls	r1, r3
   1e15c:	000b      	movs	r3, r1
   1e15e:	0019      	movs	r1, r3
   1e160:	2380      	movs	r3, #128	; 0x80
   1e162:	50d1      	str	r1, [r2, r3]
}
   1e164:	46c0      	nop			; (mov r8, r8)
   1e166:	46bd      	mov	sp, r7
   1e168:	b002      	add	sp, #8
   1e16a:	bd80      	pop	{r7, pc}
   1e16c:	e000e100 	.word	0xe000e100

0001e170 <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   1e170:	b580      	push	{r7, lr}
   1e172:	b084      	sub	sp, #16
   1e174:	af00      	add	r7, sp, #0
   1e176:	0002      	movs	r2, r0
   1e178:	1dfb      	adds	r3, r7, #7
   1e17a:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   1e17c:	1dfb      	adds	r3, r7, #7
   1e17e:	781a      	ldrb	r2, [r3, #0]
   1e180:	4b37      	ldr	r3, [pc, #220]	; (1e260 <_dac_interrupt_handler+0xf0>)
   1e182:	0092      	lsls	r2, r2, #2
   1e184:	58d3      	ldr	r3, [r2, r3]
   1e186:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   1e188:	68fb      	ldr	r3, [r7, #12]
   1e18a:	681b      	ldr	r3, [r3, #0]
   1e18c:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   1e18e:	68bb      	ldr	r3, [r7, #8]
   1e190:	799b      	ldrb	r3, [r3, #6]
   1e192:	b2db      	uxtb	r3, r3
   1e194:	001a      	movs	r2, r3
   1e196:	2301      	movs	r3, #1
   1e198:	4013      	ands	r3, r2
   1e19a:	d00e      	beq.n	1e1ba <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   1e19c:	68bb      	ldr	r3, [r7, #8]
   1e19e:	2201      	movs	r2, #1
   1e1a0:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   1e1a2:	68fb      	ldr	r3, [r7, #12]
   1e1a4:	3314      	adds	r3, #20
   1e1a6:	2b00      	cmp	r3, #0
   1e1a8:	d007      	beq.n	1e1ba <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   1e1aa:	68fb      	ldr	r3, [r7, #12]
   1e1ac:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   1e1ae:	2b00      	cmp	r3, #0
   1e1b0:	d003      	beq.n	1e1ba <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   1e1b2:	68fb      	ldr	r3, [r7, #12]
   1e1b4:	699b      	ldr	r3, [r3, #24]
   1e1b6:	2000      	movs	r0, #0
   1e1b8:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   1e1ba:	68bb      	ldr	r3, [r7, #8]
   1e1bc:	799b      	ldrb	r3, [r3, #6]
   1e1be:	b2db      	uxtb	r3, r3
   1e1c0:	001a      	movs	r2, r3
   1e1c2:	2302      	movs	r3, #2
   1e1c4:	4013      	ands	r3, r2
   1e1c6:	d047      	beq.n	1e258 <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   1e1c8:	68bb      	ldr	r3, [r7, #8]
   1e1ca:	2202      	movs	r2, #2
   1e1cc:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   1e1ce:	68fb      	ldr	r3, [r7, #12]
   1e1d0:	899b      	ldrh	r3, [r3, #12]
   1e1d2:	b29b      	uxth	r3, r3
   1e1d4:	2b00      	cmp	r3, #0
   1e1d6:	d033      	beq.n	1e240 <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   1e1d8:	68fb      	ldr	r3, [r7, #12]
   1e1da:	689a      	ldr	r2, [r3, #8]
   1e1dc:	68fb      	ldr	r3, [r7, #12]
   1e1de:	89db      	ldrh	r3, [r3, #14]
   1e1e0:	b29b      	uxth	r3, r3
   1e1e2:	1c59      	adds	r1, r3, #1
   1e1e4:	b288      	uxth	r0, r1
   1e1e6:	68f9      	ldr	r1, [r7, #12]
   1e1e8:	81c8      	strh	r0, [r1, #14]
   1e1ea:	005b      	lsls	r3, r3, #1
   1e1ec:	18d3      	adds	r3, r2, r3
   1e1ee:	881b      	ldrh	r3, [r3, #0]
   1e1f0:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   1e1f2:	68bb      	ldr	r3, [r7, #8]
   1e1f4:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   1e1f6:	68fb      	ldr	r3, [r7, #12]
   1e1f8:	899b      	ldrh	r3, [r3, #12]
   1e1fa:	b29b      	uxth	r3, r3
   1e1fc:	3b01      	subs	r3, #1
   1e1fe:	b29a      	uxth	r2, r3
   1e200:	68fb      	ldr	r3, [r7, #12]
   1e202:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   1e204:	68fb      	ldr	r3, [r7, #12]
   1e206:	899b      	ldrh	r3, [r3, #12]
   1e208:	b29b      	uxth	r3, r3
   1e20a:	2b00      	cmp	r3, #0
   1e20c:	d118      	bne.n	1e240 <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   1e20e:	68fb      	ldr	r3, [r7, #12]
   1e210:	2220      	movs	r2, #32
   1e212:	2100      	movs	r1, #0
   1e214:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   1e216:	68bb      	ldr	r3, [r7, #8]
   1e218:	2202      	movs	r2, #2
   1e21a:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   1e21c:	68bb      	ldr	r3, [r7, #8]
   1e21e:	2202      	movs	r2, #2
   1e220:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   1e222:	2019      	movs	r0, #25
   1e224:	4b0f      	ldr	r3, [pc, #60]	; (1e264 <_dac_interrupt_handler+0xf4>)
   1e226:	4798      	blx	r3

				if ((module->callback) &&
   1e228:	68fb      	ldr	r3, [r7, #12]
   1e22a:	3314      	adds	r3, #20
   1e22c:	2b00      	cmp	r3, #0
   1e22e:	d007      	beq.n	1e240 <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   1e230:	68fb      	ldr	r3, [r7, #12]
   1e232:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   1e234:	2b00      	cmp	r3, #0
   1e236:	d003      	beq.n	1e240 <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   1e238:	68fb      	ldr	r3, [r7, #12]
   1e23a:	69db      	ldr	r3, [r3, #28]
   1e23c:	2000      	movs	r0, #0
   1e23e:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   1e240:	68fb      	ldr	r3, [r7, #12]
   1e242:	3314      	adds	r3, #20
   1e244:	2b00      	cmp	r3, #0
   1e246:	d007      	beq.n	1e258 <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   1e248:	68fb      	ldr	r3, [r7, #12]
   1e24a:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   1e24c:	2b00      	cmp	r3, #0
   1e24e:	d003      	beq.n	1e258 <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   1e250:	68fb      	ldr	r3, [r7, #12]
   1e252:	695b      	ldr	r3, [r3, #20]
   1e254:	2000      	movs	r0, #0
   1e256:	4798      	blx	r3
		}
	}
}
   1e258:	46c0      	nop			; (mov r8, r8)
   1e25a:	46bd      	mov	sp, r7
   1e25c:	b004      	add	sp, #16
   1e25e:	bd80      	pop	{r7, pc}
   1e260:	200008ac 	.word	0x200008ac
   1e264:	0001e141 	.word	0x0001e141

0001e268 <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   1e268:	b580      	push	{r7, lr}
   1e26a:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   1e26c:	2000      	movs	r0, #0
   1e26e:	4b02      	ldr	r3, [pc, #8]	; (1e278 <DAC_Handler+0x10>)
   1e270:	4798      	blx	r3
}
   1e272:	46c0      	nop			; (mov r8, r8)
   1e274:	46bd      	mov	sp, r7
   1e276:	bd80      	pop	{r7, pc}
   1e278:	0001e171 	.word	0x0001e171

0001e27c <system_interrupt_enter_critical_section>:
{
   1e27c:	b580      	push	{r7, lr}
   1e27e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   1e280:	4b02      	ldr	r3, [pc, #8]	; (1e28c <system_interrupt_enter_critical_section+0x10>)
   1e282:	4798      	blx	r3
}
   1e284:	46c0      	nop			; (mov r8, r8)
   1e286:	46bd      	mov	sp, r7
   1e288:	bd80      	pop	{r7, pc}
   1e28a:	46c0      	nop			; (mov r8, r8)
   1e28c:	0002437d 	.word	0x0002437d

0001e290 <system_interrupt_leave_critical_section>:
{
   1e290:	b580      	push	{r7, lr}
   1e292:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   1e294:	4b02      	ldr	r3, [pc, #8]	; (1e2a0 <system_interrupt_leave_critical_section+0x10>)
   1e296:	4798      	blx	r3
}
   1e298:	46c0      	nop			; (mov r8, r8)
   1e29a:	46bd      	mov	sp, r7
   1e29c:	bd80      	pop	{r7, pc}
   1e29e:	46c0      	nop			; (mov r8, r8)
   1e2a0:	000243d1 	.word	0x000243d1

0001e2a4 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   1e2a4:	b580      	push	{r7, lr}
   1e2a6:	b086      	sub	sp, #24
   1e2a8:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   1e2aa:	4b49      	ldr	r3, [pc, #292]	; (1e3d0 <DMAC_Handler+0x12c>)
   1e2ac:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   1e2ae:	4b49      	ldr	r3, [pc, #292]	; (1e3d4 <DMAC_Handler+0x130>)
   1e2b0:	8c1b      	ldrh	r3, [r3, #32]
   1e2b2:	b29b      	uxth	r3, r3
   1e2b4:	b2da      	uxtb	r2, r3
   1e2b6:	2317      	movs	r3, #23
   1e2b8:	18fb      	adds	r3, r7, r3
   1e2ba:	210f      	movs	r1, #15
   1e2bc:	400a      	ands	r2, r1
   1e2be:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   1e2c0:	2317      	movs	r3, #23
   1e2c2:	18fb      	adds	r3, r7, r3
   1e2c4:	781a      	ldrb	r2, [r3, #0]
   1e2c6:	4b44      	ldr	r3, [pc, #272]	; (1e3d8 <DMAC_Handler+0x134>)
   1e2c8:	0092      	lsls	r2, r2, #2
   1e2ca:	58d3      	ldr	r3, [r2, r3]
   1e2cc:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   1e2ce:	4a41      	ldr	r2, [pc, #260]	; (1e3d4 <DMAC_Handler+0x130>)
   1e2d0:	693b      	ldr	r3, [r7, #16]
   1e2d2:	781b      	ldrb	r3, [r3, #0]
   1e2d4:	210f      	movs	r1, #15
   1e2d6:	400b      	ands	r3, r1
   1e2d8:	b2d9      	uxtb	r1, r3
   1e2da:	233f      	movs	r3, #63	; 0x3f
   1e2dc:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   1e2de:	493d      	ldr	r1, [pc, #244]	; (1e3d4 <DMAC_Handler+0x130>)
   1e2e0:	230f      	movs	r3, #15
   1e2e2:	18fb      	adds	r3, r7, r3
   1e2e4:	224e      	movs	r2, #78	; 0x4e
   1e2e6:	5c8a      	ldrb	r2, [r1, r2]
   1e2e8:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   1e2ea:	693b      	ldr	r3, [r7, #16]
   1e2ec:	781b      	ldrb	r3, [r3, #0]
   1e2ee:	4a3b      	ldr	r2, [pc, #236]	; (1e3dc <DMAC_Handler+0x138>)
   1e2f0:	011b      	lsls	r3, r3, #4
   1e2f2:	18d3      	adds	r3, r2, r3
   1e2f4:	3302      	adds	r3, #2
   1e2f6:	881b      	ldrh	r3, [r3, #0]
   1e2f8:	b29b      	uxth	r3, r3
   1e2fa:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   1e2fc:	693b      	ldr	r3, [r7, #16]
   1e2fe:	781b      	ldrb	r3, [r3, #0]
   1e300:	4a37      	ldr	r2, [pc, #220]	; (1e3e0 <DMAC_Handler+0x13c>)
   1e302:	011b      	lsls	r3, r3, #4
   1e304:	18d3      	adds	r3, r2, r3
   1e306:	3302      	adds	r3, #2
   1e308:	881b      	ldrh	r3, [r3, #0]
   1e30a:	b29b      	uxth	r3, r3
   1e30c:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   1e30e:	68ba      	ldr	r2, [r7, #8]
   1e310:	687b      	ldr	r3, [r7, #4]
   1e312:	1ad2      	subs	r2, r2, r3
   1e314:	693b      	ldr	r3, [r7, #16]
   1e316:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   1e318:	230f      	movs	r3, #15
   1e31a:	18fb      	adds	r3, r7, r3
   1e31c:	781b      	ldrb	r3, [r3, #0]
   1e31e:	2201      	movs	r2, #1
   1e320:	4013      	ands	r3, r2
   1e322:	d016      	beq.n	1e352 <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   1e324:	4a2b      	ldr	r2, [pc, #172]	; (1e3d4 <DMAC_Handler+0x130>)
   1e326:	234e      	movs	r3, #78	; 0x4e
   1e328:	2101      	movs	r1, #1
   1e32a:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   1e32c:	693b      	ldr	r3, [r7, #16]
   1e32e:	2210      	movs	r2, #16
   1e330:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   1e332:	693b      	ldr	r3, [r7, #16]
   1e334:	7c1b      	ldrb	r3, [r3, #16]
   1e336:	001a      	movs	r2, r3
   1e338:	2301      	movs	r3, #1
   1e33a:	4013      	ands	r3, r2
   1e33c:	d042      	beq.n	1e3c4 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   1e33e:	693b      	ldr	r3, [r7, #16]
   1e340:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   1e342:	2b00      	cmp	r3, #0
   1e344:	d03e      	beq.n	1e3c4 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   1e346:	693b      	ldr	r3, [r7, #16]
   1e348:	685b      	ldr	r3, [r3, #4]
   1e34a:	693a      	ldr	r2, [r7, #16]
   1e34c:	0010      	movs	r0, r2
   1e34e:	4798      	blx	r3
   1e350:	e038      	b.n	1e3c4 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   1e352:	230f      	movs	r3, #15
   1e354:	18fb      	adds	r3, r7, r3
   1e356:	781b      	ldrb	r3, [r3, #0]
   1e358:	2202      	movs	r2, #2
   1e35a:	4013      	ands	r3, r2
   1e35c:	d016      	beq.n	1e38c <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   1e35e:	4a1d      	ldr	r2, [pc, #116]	; (1e3d4 <DMAC_Handler+0x130>)
   1e360:	234e      	movs	r3, #78	; 0x4e
   1e362:	2102      	movs	r1, #2
   1e364:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   1e366:	693b      	ldr	r3, [r7, #16]
   1e368:	2200      	movs	r2, #0
   1e36a:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   1e36c:	693b      	ldr	r3, [r7, #16]
   1e36e:	7c1b      	ldrb	r3, [r3, #16]
   1e370:	001a      	movs	r2, r3
   1e372:	2302      	movs	r3, #2
   1e374:	4013      	ands	r3, r2
   1e376:	d025      	beq.n	1e3c4 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   1e378:	693b      	ldr	r3, [r7, #16]
   1e37a:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   1e37c:	2b00      	cmp	r3, #0
   1e37e:	d021      	beq.n	1e3c4 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   1e380:	693b      	ldr	r3, [r7, #16]
   1e382:	689b      	ldr	r3, [r3, #8]
   1e384:	693a      	ldr	r2, [r7, #16]
   1e386:	0010      	movs	r0, r2
   1e388:	4798      	blx	r3
   1e38a:	e01b      	b.n	1e3c4 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   1e38c:	230f      	movs	r3, #15
   1e38e:	18fb      	adds	r3, r7, r3
   1e390:	781b      	ldrb	r3, [r3, #0]
   1e392:	2204      	movs	r2, #4
   1e394:	4013      	ands	r3, r2
   1e396:	d015      	beq.n	1e3c4 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   1e398:	4a0e      	ldr	r2, [pc, #56]	; (1e3d4 <DMAC_Handler+0x130>)
   1e39a:	234e      	movs	r3, #78	; 0x4e
   1e39c:	2104      	movs	r1, #4
   1e39e:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   1e3a0:	693b      	ldr	r3, [r7, #16]
   1e3a2:	2206      	movs	r2, #6
   1e3a4:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   1e3a6:	693b      	ldr	r3, [r7, #16]
   1e3a8:	7c1b      	ldrb	r3, [r3, #16]
   1e3aa:	001a      	movs	r2, r3
   1e3ac:	2304      	movs	r3, #4
   1e3ae:	4013      	ands	r3, r2
   1e3b0:	d008      	beq.n	1e3c4 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   1e3b2:	693b      	ldr	r3, [r7, #16]
   1e3b4:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   1e3b6:	2b00      	cmp	r3, #0
   1e3b8:	d004      	beq.n	1e3c4 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   1e3ba:	693b      	ldr	r3, [r7, #16]
   1e3bc:	68db      	ldr	r3, [r3, #12]
   1e3be:	693a      	ldr	r2, [r7, #16]
   1e3c0:	0010      	movs	r0, r2
   1e3c2:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   1e3c4:	4b07      	ldr	r3, [pc, #28]	; (1e3e4 <DMAC_Handler+0x140>)
   1e3c6:	4798      	blx	r3
}
   1e3c8:	46c0      	nop			; (mov r8, r8)
   1e3ca:	46bd      	mov	sp, r7
   1e3cc:	b006      	add	sp, #24
   1e3ce:	bd80      	pop	{r7, pc}
   1e3d0:	0001e27d 	.word	0x0001e27d
   1e3d4:	41004800 	.word	0x41004800
   1e3d8:	200002a0 	.word	0x200002a0
   1e3dc:	200008b0 	.word	0x200008b0
   1e3e0:	20000250 	.word	0x20000250
   1e3e4:	0001e291 	.word	0x0001e291

0001e3e8 <system_gclk_chan_get_config_defaults>:
{
   1e3e8:	b580      	push	{r7, lr}
   1e3ea:	b082      	sub	sp, #8
   1e3ec:	af00      	add	r7, sp, #0
   1e3ee:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1e3f0:	687b      	ldr	r3, [r7, #4]
   1e3f2:	2200      	movs	r2, #0
   1e3f4:	701a      	strb	r2, [r3, #0]
}
   1e3f6:	46c0      	nop			; (mov r8, r8)
   1e3f8:	46bd      	mov	sp, r7
   1e3fa:	b002      	add	sp, #8
   1e3fc:	bd80      	pop	{r7, pc}
	...

0001e400 <system_apb_clock_set_mask>:
{
   1e400:	b580      	push	{r7, lr}
   1e402:	b082      	sub	sp, #8
   1e404:	af00      	add	r7, sp, #0
   1e406:	0002      	movs	r2, r0
   1e408:	6039      	str	r1, [r7, #0]
   1e40a:	1dfb      	adds	r3, r7, #7
   1e40c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1e40e:	1dfb      	adds	r3, r7, #7
   1e410:	781b      	ldrb	r3, [r3, #0]
   1e412:	2b01      	cmp	r3, #1
   1e414:	d00a      	beq.n	1e42c <system_apb_clock_set_mask+0x2c>
   1e416:	2b02      	cmp	r3, #2
   1e418:	d00f      	beq.n	1e43a <system_apb_clock_set_mask+0x3a>
   1e41a:	2b00      	cmp	r3, #0
   1e41c:	d114      	bne.n	1e448 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1e41e:	4b0e      	ldr	r3, [pc, #56]	; (1e458 <system_apb_clock_set_mask+0x58>)
   1e420:	4a0d      	ldr	r2, [pc, #52]	; (1e458 <system_apb_clock_set_mask+0x58>)
   1e422:	6991      	ldr	r1, [r2, #24]
   1e424:	683a      	ldr	r2, [r7, #0]
   1e426:	430a      	orrs	r2, r1
   1e428:	619a      	str	r2, [r3, #24]
			break;
   1e42a:	e00f      	b.n	1e44c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1e42c:	4b0a      	ldr	r3, [pc, #40]	; (1e458 <system_apb_clock_set_mask+0x58>)
   1e42e:	4a0a      	ldr	r2, [pc, #40]	; (1e458 <system_apb_clock_set_mask+0x58>)
   1e430:	69d1      	ldr	r1, [r2, #28]
   1e432:	683a      	ldr	r2, [r7, #0]
   1e434:	430a      	orrs	r2, r1
   1e436:	61da      	str	r2, [r3, #28]
			break;
   1e438:	e008      	b.n	1e44c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1e43a:	4b07      	ldr	r3, [pc, #28]	; (1e458 <system_apb_clock_set_mask+0x58>)
   1e43c:	4a06      	ldr	r2, [pc, #24]	; (1e458 <system_apb_clock_set_mask+0x58>)
   1e43e:	6a11      	ldr	r1, [r2, #32]
   1e440:	683a      	ldr	r2, [r7, #0]
   1e442:	430a      	orrs	r2, r1
   1e444:	621a      	str	r2, [r3, #32]
			break;
   1e446:	e001      	b.n	1e44c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   1e448:	2317      	movs	r3, #23
   1e44a:	e000      	b.n	1e44e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1e44c:	2300      	movs	r3, #0
}
   1e44e:	0018      	movs	r0, r3
   1e450:	46bd      	mov	sp, r7
   1e452:	b002      	add	sp, #8
   1e454:	bd80      	pop	{r7, pc}
   1e456:	46c0      	nop			; (mov r8, r8)
   1e458:	40000400 	.word	0x40000400

0001e45c <system_pinmux_get_config_defaults>:
{
   1e45c:	b580      	push	{r7, lr}
   1e45e:	b082      	sub	sp, #8
   1e460:	af00      	add	r7, sp, #0
   1e462:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1e464:	687b      	ldr	r3, [r7, #4]
   1e466:	2280      	movs	r2, #128	; 0x80
   1e468:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1e46a:	687b      	ldr	r3, [r7, #4]
   1e46c:	2200      	movs	r2, #0
   1e46e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1e470:	687b      	ldr	r3, [r7, #4]
   1e472:	2201      	movs	r2, #1
   1e474:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1e476:	687b      	ldr	r3, [r7, #4]
   1e478:	2200      	movs	r2, #0
   1e47a:	70da      	strb	r2, [r3, #3]
}
   1e47c:	46c0      	nop			; (mov r8, r8)
   1e47e:	46bd      	mov	sp, r7
   1e480:	b002      	add	sp, #8
   1e482:	bd80      	pop	{r7, pc}

0001e484 <system_interrupt_enable>:
{
   1e484:	b580      	push	{r7, lr}
   1e486:	b082      	sub	sp, #8
   1e488:	af00      	add	r7, sp, #0
   1e48a:	0002      	movs	r2, r0
   1e48c:	1dfb      	adds	r3, r7, #7
   1e48e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1e490:	4b06      	ldr	r3, [pc, #24]	; (1e4ac <system_interrupt_enable+0x28>)
   1e492:	1dfa      	adds	r2, r7, #7
   1e494:	7812      	ldrb	r2, [r2, #0]
   1e496:	0011      	movs	r1, r2
   1e498:	221f      	movs	r2, #31
   1e49a:	400a      	ands	r2, r1
   1e49c:	2101      	movs	r1, #1
   1e49e:	4091      	lsls	r1, r2
   1e4a0:	000a      	movs	r2, r1
   1e4a2:	601a      	str	r2, [r3, #0]
}
   1e4a4:	46c0      	nop			; (mov r8, r8)
   1e4a6:	46bd      	mov	sp, r7
   1e4a8:	b002      	add	sp, #8
   1e4aa:	bd80      	pop	{r7, pc}
   1e4ac:	e000e100 	.word	0xe000e100

0001e4b0 <_extint_get_eic_from_channel>:
{
   1e4b0:	b580      	push	{r7, lr}
   1e4b2:	b084      	sub	sp, #16
   1e4b4:	af00      	add	r7, sp, #0
   1e4b6:	0002      	movs	r2, r0
   1e4b8:	1dfb      	adds	r3, r7, #7
   1e4ba:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   1e4bc:	230f      	movs	r3, #15
   1e4be:	18fb      	adds	r3, r7, r3
   1e4c0:	1dfa      	adds	r2, r7, #7
   1e4c2:	7812      	ldrb	r2, [r2, #0]
   1e4c4:	0952      	lsrs	r2, r2, #5
   1e4c6:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   1e4c8:	230f      	movs	r3, #15
   1e4ca:	18fb      	adds	r3, r7, r3
   1e4cc:	781b      	ldrb	r3, [r3, #0]
   1e4ce:	2b00      	cmp	r3, #0
   1e4d0:	d10c      	bne.n	1e4ec <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1e4d2:	4b09      	ldr	r3, [pc, #36]	; (1e4f8 <_extint_get_eic_from_channel+0x48>)
   1e4d4:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   1e4d6:	230f      	movs	r3, #15
   1e4d8:	18fb      	adds	r3, r7, r3
   1e4da:	781b      	ldrb	r3, [r3, #0]
   1e4dc:	009b      	lsls	r3, r3, #2
   1e4de:	2210      	movs	r2, #16
   1e4e0:	4694      	mov	ip, r2
   1e4e2:	44bc      	add	ip, r7
   1e4e4:	4463      	add	r3, ip
   1e4e6:	3b08      	subs	r3, #8
   1e4e8:	681b      	ldr	r3, [r3, #0]
   1e4ea:	e000      	b.n	1e4ee <_extint_get_eic_from_channel+0x3e>
		return NULL;
   1e4ec:	2300      	movs	r3, #0
}
   1e4ee:	0018      	movs	r0, r3
   1e4f0:	46bd      	mov	sp, r7
   1e4f2:	b004      	add	sp, #16
   1e4f4:	bd80      	pop	{r7, pc}
   1e4f6:	46c0      	nop			; (mov r8, r8)
   1e4f8:	40001800 	.word	0x40001800

0001e4fc <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   1e4fc:	b580      	push	{r7, lr}
   1e4fe:	b082      	sub	sp, #8
   1e500:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1e502:	4b0f      	ldr	r3, [pc, #60]	; (1e540 <extint_is_syncing+0x44>)
   1e504:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1e506:	2300      	movs	r3, #0
   1e508:	607b      	str	r3, [r7, #4]
   1e50a:	e011      	b.n	1e530 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   1e50c:	687b      	ldr	r3, [r7, #4]
   1e50e:	009b      	lsls	r3, r3, #2
   1e510:	2208      	movs	r2, #8
   1e512:	4694      	mov	ip, r2
   1e514:	44bc      	add	ip, r7
   1e516:	4463      	add	r3, ip
   1e518:	3b08      	subs	r3, #8
   1e51a:	681b      	ldr	r3, [r3, #0]
   1e51c:	785b      	ldrb	r3, [r3, #1]
   1e51e:	b2db      	uxtb	r3, r3
   1e520:	b25b      	sxtb	r3, r3
   1e522:	2b00      	cmp	r3, #0
   1e524:	da01      	bge.n	1e52a <extint_is_syncing+0x2e>
			return true;
   1e526:	2301      	movs	r3, #1
   1e528:	e006      	b.n	1e538 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1e52a:	687b      	ldr	r3, [r7, #4]
   1e52c:	3301      	adds	r3, #1
   1e52e:	607b      	str	r3, [r7, #4]
   1e530:	687b      	ldr	r3, [r7, #4]
   1e532:	2b00      	cmp	r3, #0
   1e534:	d0ea      	beq.n	1e50c <extint_is_syncing+0x10>
		}
	}
	return false;
   1e536:	2300      	movs	r3, #0
}
   1e538:	0018      	movs	r0, r3
   1e53a:	46bd      	mov	sp, r7
   1e53c:	b002      	add	sp, #8
   1e53e:	bd80      	pop	{r7, pc}
   1e540:	40001800 	.word	0x40001800

0001e544 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   1e544:	b580      	push	{r7, lr}
   1e546:	b084      	sub	sp, #16
   1e548:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1e54a:	4b2d      	ldr	r3, [pc, #180]	; (1e600 <_system_extint_init+0xbc>)
   1e54c:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   1e54e:	2140      	movs	r1, #64	; 0x40
   1e550:	2000      	movs	r0, #0
   1e552:	4b2c      	ldr	r3, [pc, #176]	; (1e604 <_system_extint_init+0xc0>)
   1e554:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1e556:	003b      	movs	r3, r7
   1e558:	0018      	movs	r0, r3
   1e55a:	4b2b      	ldr	r3, [pc, #172]	; (1e608 <_system_extint_init+0xc4>)
   1e55c:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   1e55e:	003b      	movs	r3, r7
   1e560:	2206      	movs	r2, #6
   1e562:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   1e564:	003b      	movs	r3, r7
   1e566:	0019      	movs	r1, r3
   1e568:	2005      	movs	r0, #5
   1e56a:	4b28      	ldr	r3, [pc, #160]	; (1e60c <_system_extint_init+0xc8>)
   1e56c:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   1e56e:	2005      	movs	r0, #5
   1e570:	4b27      	ldr	r3, [pc, #156]	; (1e610 <_system_extint_init+0xcc>)
   1e572:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1e574:	2300      	movs	r3, #0
   1e576:	60fb      	str	r3, [r7, #12]
   1e578:	e018      	b.n	1e5ac <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   1e57a:	68fb      	ldr	r3, [r7, #12]
   1e57c:	009b      	lsls	r3, r3, #2
   1e57e:	2210      	movs	r2, #16
   1e580:	4694      	mov	ip, r2
   1e582:	44bc      	add	ip, r7
   1e584:	4463      	add	r3, ip
   1e586:	3b0c      	subs	r3, #12
   1e588:	681a      	ldr	r2, [r3, #0]
   1e58a:	68fb      	ldr	r3, [r7, #12]
   1e58c:	009b      	lsls	r3, r3, #2
   1e58e:	2110      	movs	r1, #16
   1e590:	468c      	mov	ip, r1
   1e592:	44bc      	add	ip, r7
   1e594:	4463      	add	r3, ip
   1e596:	3b0c      	subs	r3, #12
   1e598:	681b      	ldr	r3, [r3, #0]
   1e59a:	781b      	ldrb	r3, [r3, #0]
   1e59c:	b2db      	uxtb	r3, r3
   1e59e:	2101      	movs	r1, #1
   1e5a0:	430b      	orrs	r3, r1
   1e5a2:	b2db      	uxtb	r3, r3
   1e5a4:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1e5a6:	68fb      	ldr	r3, [r7, #12]
   1e5a8:	3301      	adds	r3, #1
   1e5aa:	60fb      	str	r3, [r7, #12]
   1e5ac:	68fb      	ldr	r3, [r7, #12]
   1e5ae:	2b00      	cmp	r3, #0
   1e5b0:	d0e3      	beq.n	1e57a <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   1e5b2:	46c0      	nop			; (mov r8, r8)
   1e5b4:	4b17      	ldr	r3, [pc, #92]	; (1e614 <_system_extint_init+0xd0>)
   1e5b6:	4798      	blx	r3
   1e5b8:	1e03      	subs	r3, r0, #0
   1e5ba:	d1fb      	bne.n	1e5b4 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   1e5bc:	230b      	movs	r3, #11
   1e5be:	18fb      	adds	r3, r7, r3
   1e5c0:	2200      	movs	r2, #0
   1e5c2:	701a      	strb	r2, [r3, #0]
   1e5c4:	e00d      	b.n	1e5e2 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   1e5c6:	230b      	movs	r3, #11
   1e5c8:	18fb      	adds	r3, r7, r3
   1e5ca:	781a      	ldrb	r2, [r3, #0]
   1e5cc:	4b12      	ldr	r3, [pc, #72]	; (1e618 <_system_extint_init+0xd4>)
   1e5ce:	0092      	lsls	r2, r2, #2
   1e5d0:	2100      	movs	r1, #0
   1e5d2:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   1e5d4:	230b      	movs	r3, #11
   1e5d6:	18fb      	adds	r3, r7, r3
   1e5d8:	781a      	ldrb	r2, [r3, #0]
   1e5da:	230b      	movs	r3, #11
   1e5dc:	18fb      	adds	r3, r7, r3
   1e5de:	3201      	adds	r2, #1
   1e5e0:	701a      	strb	r2, [r3, #0]
   1e5e2:	230b      	movs	r3, #11
   1e5e4:	18fb      	adds	r3, r7, r3
   1e5e6:	781b      	ldrb	r3, [r3, #0]
   1e5e8:	2b0f      	cmp	r3, #15
   1e5ea:	d9ec      	bls.n	1e5c6 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   1e5ec:	2004      	movs	r0, #4
   1e5ee:	4b0b      	ldr	r3, [pc, #44]	; (1e61c <_system_extint_init+0xd8>)
   1e5f0:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   1e5f2:	4b0b      	ldr	r3, [pc, #44]	; (1e620 <_system_extint_init+0xdc>)
   1e5f4:	4798      	blx	r3
}
   1e5f6:	46c0      	nop			; (mov r8, r8)
   1e5f8:	46bd      	mov	sp, r7
   1e5fa:	b004      	add	sp, #16
   1e5fc:	bd80      	pop	{r7, pc}
   1e5fe:	46c0      	nop			; (mov r8, r8)
   1e600:	40001800 	.word	0x40001800
   1e604:	0001e401 	.word	0x0001e401
   1e608:	0001e3e9 	.word	0x0001e3e9
   1e60c:	00025135 	.word	0x00025135
   1e610:	00025179 	.word	0x00025179
   1e614:	0001e4fd 	.word	0x0001e4fd
   1e618:	20000900 	.word	0x20000900
   1e61c:	0001e485 	.word	0x0001e485
   1e620:	0001e625 	.word	0x0001e625

0001e624 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   1e624:	b580      	push	{r7, lr}
   1e626:	b082      	sub	sp, #8
   1e628:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1e62a:	4b15      	ldr	r3, [pc, #84]	; (1e680 <_extint_enable+0x5c>)
   1e62c:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1e62e:	2300      	movs	r3, #0
   1e630:	607b      	str	r3, [r7, #4]
   1e632:	e018      	b.n	1e666 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   1e634:	687b      	ldr	r3, [r7, #4]
   1e636:	009b      	lsls	r3, r3, #2
   1e638:	2208      	movs	r2, #8
   1e63a:	4694      	mov	ip, r2
   1e63c:	44bc      	add	ip, r7
   1e63e:	4463      	add	r3, ip
   1e640:	3b08      	subs	r3, #8
   1e642:	681a      	ldr	r2, [r3, #0]
   1e644:	687b      	ldr	r3, [r7, #4]
   1e646:	009b      	lsls	r3, r3, #2
   1e648:	2108      	movs	r1, #8
   1e64a:	468c      	mov	ip, r1
   1e64c:	44bc      	add	ip, r7
   1e64e:	4463      	add	r3, ip
   1e650:	3b08      	subs	r3, #8
   1e652:	681b      	ldr	r3, [r3, #0]
   1e654:	781b      	ldrb	r3, [r3, #0]
   1e656:	b2db      	uxtb	r3, r3
   1e658:	2102      	movs	r1, #2
   1e65a:	430b      	orrs	r3, r1
   1e65c:	b2db      	uxtb	r3, r3
   1e65e:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1e660:	687b      	ldr	r3, [r7, #4]
   1e662:	3301      	adds	r3, #1
   1e664:	607b      	str	r3, [r7, #4]
   1e666:	687b      	ldr	r3, [r7, #4]
   1e668:	2b00      	cmp	r3, #0
   1e66a:	d0e3      	beq.n	1e634 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   1e66c:	46c0      	nop			; (mov r8, r8)
   1e66e:	4b05      	ldr	r3, [pc, #20]	; (1e684 <_extint_enable+0x60>)
   1e670:	4798      	blx	r3
   1e672:	1e03      	subs	r3, r0, #0
   1e674:	d1fb      	bne.n	1e66e <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   1e676:	46c0      	nop			; (mov r8, r8)
   1e678:	46bd      	mov	sp, r7
   1e67a:	b002      	add	sp, #8
   1e67c:	bd80      	pop	{r7, pc}
   1e67e:	46c0      	nop			; (mov r8, r8)
   1e680:	40001800 	.word	0x40001800
   1e684:	0001e4fd 	.word	0x0001e4fd

0001e688 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   1e688:	b580      	push	{r7, lr}
   1e68a:	b082      	sub	sp, #8
   1e68c:	af00      	add	r7, sp, #0
   1e68e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   1e690:	687b      	ldr	r3, [r7, #4]
   1e692:	2200      	movs	r2, #0
   1e694:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   1e696:	687b      	ldr	r3, [r7, #4]
   1e698:	2200      	movs	r2, #0
   1e69a:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   1e69c:	687b      	ldr	r3, [r7, #4]
   1e69e:	2201      	movs	r2, #1
   1e6a0:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   1e6a2:	687b      	ldr	r3, [r7, #4]
   1e6a4:	2201      	movs	r2, #1
   1e6a6:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   1e6a8:	687b      	ldr	r3, [r7, #4]
   1e6aa:	2200      	movs	r2, #0
   1e6ac:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   1e6ae:	687b      	ldr	r3, [r7, #4]
   1e6b0:	2202      	movs	r2, #2
   1e6b2:	72da      	strb	r2, [r3, #11]
}
   1e6b4:	46c0      	nop			; (mov r8, r8)
   1e6b6:	46bd      	mov	sp, r7
   1e6b8:	b002      	add	sp, #8
   1e6ba:	bd80      	pop	{r7, pc}

0001e6bc <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   1e6bc:	b580      	push	{r7, lr}
   1e6be:	b086      	sub	sp, #24
   1e6c0:	af00      	add	r7, sp, #0
   1e6c2:	0002      	movs	r2, r0
   1e6c4:	6039      	str	r1, [r7, #0]
   1e6c6:	1dfb      	adds	r3, r7, #7
   1e6c8:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   1e6ca:	2308      	movs	r3, #8
   1e6cc:	18fb      	adds	r3, r7, r3
   1e6ce:	0018      	movs	r0, r3
   1e6d0:	4b36      	ldr	r3, [pc, #216]	; (1e7ac <extint_chan_set_config+0xf0>)
   1e6d2:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   1e6d4:	683b      	ldr	r3, [r7, #0]
   1e6d6:	685b      	ldr	r3, [r3, #4]
   1e6d8:	b2da      	uxtb	r2, r3
   1e6da:	2308      	movs	r3, #8
   1e6dc:	18fb      	adds	r3, r7, r3
   1e6de:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1e6e0:	2308      	movs	r3, #8
   1e6e2:	18fb      	adds	r3, r7, r3
   1e6e4:	2200      	movs	r2, #0
   1e6e6:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   1e6e8:	683b      	ldr	r3, [r7, #0]
   1e6ea:	7a1a      	ldrb	r2, [r3, #8]
   1e6ec:	2308      	movs	r3, #8
   1e6ee:	18fb      	adds	r3, r7, r3
   1e6f0:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   1e6f2:	683b      	ldr	r3, [r7, #0]
   1e6f4:	681b      	ldr	r3, [r3, #0]
   1e6f6:	b2db      	uxtb	r3, r3
   1e6f8:	2208      	movs	r2, #8
   1e6fa:	18ba      	adds	r2, r7, r2
   1e6fc:	0011      	movs	r1, r2
   1e6fe:	0018      	movs	r0, r3
   1e700:	4b2b      	ldr	r3, [pc, #172]	; (1e7b0 <extint_chan_set_config+0xf4>)
   1e702:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   1e704:	1dfb      	adds	r3, r7, #7
   1e706:	781b      	ldrb	r3, [r3, #0]
   1e708:	0018      	movs	r0, r3
   1e70a:	4b2a      	ldr	r3, [pc, #168]	; (1e7b4 <extint_chan_set_config+0xf8>)
   1e70c:	4798      	blx	r3
   1e70e:	0003      	movs	r3, r0
   1e710:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   1e712:	1dfb      	adds	r3, r7, #7
   1e714:	781b      	ldrb	r3, [r3, #0]
   1e716:	2207      	movs	r2, #7
   1e718:	4013      	ands	r3, r2
   1e71a:	009b      	lsls	r3, r3, #2
   1e71c:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   1e71e:	683b      	ldr	r3, [r7, #0]
   1e720:	7adb      	ldrb	r3, [r3, #11]
   1e722:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   1e724:	683b      	ldr	r3, [r7, #0]
   1e726:	7a9b      	ldrb	r3, [r3, #10]
   1e728:	2b00      	cmp	r3, #0
   1e72a:	d003      	beq.n	1e734 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   1e72c:	697b      	ldr	r3, [r7, #20]
   1e72e:	2208      	movs	r2, #8
   1e730:	4313      	orrs	r3, r2
   1e732:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   1e734:	1dfb      	adds	r3, r7, #7
   1e736:	781b      	ldrb	r3, [r3, #0]
   1e738:	08db      	lsrs	r3, r3, #3
   1e73a:	b2db      	uxtb	r3, r3
   1e73c:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   1e73e:	1dfb      	adds	r3, r7, #7
   1e740:	781b      	ldrb	r3, [r3, #0]
   1e742:	08db      	lsrs	r3, r3, #3
   1e744:	b2db      	uxtb	r3, r3
   1e746:	001a      	movs	r2, r3
   1e748:	693b      	ldr	r3, [r7, #16]
   1e74a:	3206      	adds	r2, #6
   1e74c:	0092      	lsls	r2, r2, #2
   1e74e:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   1e750:	210f      	movs	r1, #15
   1e752:	68fa      	ldr	r2, [r7, #12]
   1e754:	4091      	lsls	r1, r2
   1e756:	000a      	movs	r2, r1
   1e758:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   1e75a:	401a      	ands	r2, r3
			(new_config << config_pos);
   1e75c:	6979      	ldr	r1, [r7, #20]
   1e75e:	68fb      	ldr	r3, [r7, #12]
   1e760:	4099      	lsls	r1, r3
   1e762:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   1e764:	431a      	orrs	r2, r3
   1e766:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   1e768:	693b      	ldr	r3, [r7, #16]
   1e76a:	1d82      	adds	r2, r0, #6
   1e76c:	0092      	lsls	r2, r2, #2
   1e76e:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   1e770:	683b      	ldr	r3, [r7, #0]
   1e772:	7a5b      	ldrb	r3, [r3, #9]
   1e774:	2b00      	cmp	r3, #0
   1e776:	d00a      	beq.n	1e78e <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   1e778:	693b      	ldr	r3, [r7, #16]
   1e77a:	695a      	ldr	r2, [r3, #20]
   1e77c:	1dfb      	adds	r3, r7, #7
   1e77e:	781b      	ldrb	r3, [r3, #0]
   1e780:	2101      	movs	r1, #1
   1e782:	4099      	lsls	r1, r3
   1e784:	000b      	movs	r3, r1
   1e786:	431a      	orrs	r2, r3
   1e788:	693b      	ldr	r3, [r7, #16]
   1e78a:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   1e78c:	e00a      	b.n	1e7a4 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   1e78e:	693b      	ldr	r3, [r7, #16]
   1e790:	695b      	ldr	r3, [r3, #20]
   1e792:	1dfa      	adds	r2, r7, #7
   1e794:	7812      	ldrb	r2, [r2, #0]
   1e796:	2101      	movs	r1, #1
   1e798:	4091      	lsls	r1, r2
   1e79a:	000a      	movs	r2, r1
   1e79c:	43d2      	mvns	r2, r2
   1e79e:	401a      	ands	r2, r3
   1e7a0:	693b      	ldr	r3, [r7, #16]
   1e7a2:	615a      	str	r2, [r3, #20]
}
   1e7a4:	46c0      	nop			; (mov r8, r8)
   1e7a6:	46bd      	mov	sp, r7
   1e7a8:	b006      	add	sp, #24
   1e7aa:	bd80      	pop	{r7, pc}
   1e7ac:	0001e45d 	.word	0x0001e45d
   1e7b0:	00025421 	.word	0x00025421
   1e7b4:	0001e4b1 	.word	0x0001e4b1

0001e7b8 <system_gclk_chan_get_config_defaults>:
{
   1e7b8:	b580      	push	{r7, lr}
   1e7ba:	b082      	sub	sp, #8
   1e7bc:	af00      	add	r7, sp, #0
   1e7be:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1e7c0:	687b      	ldr	r3, [r7, #4]
   1e7c2:	2200      	movs	r2, #0
   1e7c4:	701a      	strb	r2, [r3, #0]
}
   1e7c6:	46c0      	nop			; (mov r8, r8)
   1e7c8:	46bd      	mov	sp, r7
   1e7ca:	b002      	add	sp, #8
   1e7cc:	bd80      	pop	{r7, pc}
	...

0001e7d0 <system_apb_clock_set_mask>:
{
   1e7d0:	b580      	push	{r7, lr}
   1e7d2:	b082      	sub	sp, #8
   1e7d4:	af00      	add	r7, sp, #0
   1e7d6:	0002      	movs	r2, r0
   1e7d8:	6039      	str	r1, [r7, #0]
   1e7da:	1dfb      	adds	r3, r7, #7
   1e7dc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1e7de:	1dfb      	adds	r3, r7, #7
   1e7e0:	781b      	ldrb	r3, [r3, #0]
   1e7e2:	2b01      	cmp	r3, #1
   1e7e4:	d00a      	beq.n	1e7fc <system_apb_clock_set_mask+0x2c>
   1e7e6:	2b02      	cmp	r3, #2
   1e7e8:	d00f      	beq.n	1e80a <system_apb_clock_set_mask+0x3a>
   1e7ea:	2b00      	cmp	r3, #0
   1e7ec:	d114      	bne.n	1e818 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1e7ee:	4b0e      	ldr	r3, [pc, #56]	; (1e828 <system_apb_clock_set_mask+0x58>)
   1e7f0:	4a0d      	ldr	r2, [pc, #52]	; (1e828 <system_apb_clock_set_mask+0x58>)
   1e7f2:	6991      	ldr	r1, [r2, #24]
   1e7f4:	683a      	ldr	r2, [r7, #0]
   1e7f6:	430a      	orrs	r2, r1
   1e7f8:	619a      	str	r2, [r3, #24]
			break;
   1e7fa:	e00f      	b.n	1e81c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1e7fc:	4b0a      	ldr	r3, [pc, #40]	; (1e828 <system_apb_clock_set_mask+0x58>)
   1e7fe:	4a0a      	ldr	r2, [pc, #40]	; (1e828 <system_apb_clock_set_mask+0x58>)
   1e800:	69d1      	ldr	r1, [r2, #28]
   1e802:	683a      	ldr	r2, [r7, #0]
   1e804:	430a      	orrs	r2, r1
   1e806:	61da      	str	r2, [r3, #28]
			break;
   1e808:	e008      	b.n	1e81c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1e80a:	4b07      	ldr	r3, [pc, #28]	; (1e828 <system_apb_clock_set_mask+0x58>)
   1e80c:	4a06      	ldr	r2, [pc, #24]	; (1e828 <system_apb_clock_set_mask+0x58>)
   1e80e:	6a11      	ldr	r1, [r2, #32]
   1e810:	683a      	ldr	r2, [r7, #0]
   1e812:	430a      	orrs	r2, r1
   1e814:	621a      	str	r2, [r3, #32]
			break;
   1e816:	e001      	b.n	1e81c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   1e818:	2317      	movs	r3, #23
   1e81a:	e000      	b.n	1e81e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1e81c:	2300      	movs	r3, #0
}
   1e81e:	0018      	movs	r0, r3
   1e820:	46bd      	mov	sp, r7
   1e822:	b002      	add	sp, #8
   1e824:	bd80      	pop	{r7, pc}
   1e826:	46c0      	nop			; (mov r8, r8)
   1e828:	40000400 	.word	0x40000400

0001e82c <system_interrupt_enable>:
{
   1e82c:	b580      	push	{r7, lr}
   1e82e:	b082      	sub	sp, #8
   1e830:	af00      	add	r7, sp, #0
   1e832:	0002      	movs	r2, r0
   1e834:	1dfb      	adds	r3, r7, #7
   1e836:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1e838:	4b06      	ldr	r3, [pc, #24]	; (1e854 <system_interrupt_enable+0x28>)
   1e83a:	1dfa      	adds	r2, r7, #7
   1e83c:	7812      	ldrb	r2, [r2, #0]
   1e83e:	0011      	movs	r1, r2
   1e840:	221f      	movs	r2, #31
   1e842:	400a      	ands	r2, r1
   1e844:	2101      	movs	r1, #1
   1e846:	4091      	lsls	r1, r2
   1e848:	000a      	movs	r2, r1
   1e84a:	601a      	str	r2, [r3, #0]
}
   1e84c:	46c0      	nop			; (mov r8, r8)
   1e84e:	46bd      	mov	sp, r7
   1e850:	b002      	add	sp, #8
   1e852:	bd80      	pop	{r7, pc}
   1e854:	e000e100 	.word	0xe000e100

0001e858 <system_interrupt_disable>:
{
   1e858:	b580      	push	{r7, lr}
   1e85a:	b082      	sub	sp, #8
   1e85c:	af00      	add	r7, sp, #0
   1e85e:	0002      	movs	r2, r0
   1e860:	1dfb      	adds	r3, r7, #7
   1e862:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1e864:	4a07      	ldr	r2, [pc, #28]	; (1e884 <system_interrupt_disable+0x2c>)
   1e866:	1dfb      	adds	r3, r7, #7
   1e868:	781b      	ldrb	r3, [r3, #0]
   1e86a:	0019      	movs	r1, r3
   1e86c:	231f      	movs	r3, #31
   1e86e:	400b      	ands	r3, r1
   1e870:	2101      	movs	r1, #1
   1e872:	4099      	lsls	r1, r3
   1e874:	000b      	movs	r3, r1
   1e876:	0019      	movs	r1, r3
   1e878:	2380      	movs	r3, #128	; 0x80
   1e87a:	50d1      	str	r1, [r2, r3]
}
   1e87c:	46c0      	nop			; (mov r8, r8)
   1e87e:	46bd      	mov	sp, r7
   1e880:	b002      	add	sp, #8
   1e882:	bd80      	pop	{r7, pc}
   1e884:	e000e100 	.word	0xe000e100

0001e888 <rtc_count_is_syncing>:
 *
 * \retval true  if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static bool rtc_count_is_syncing(struct rtc_module *const module)
{
   1e888:	b580      	push	{r7, lr}
   1e88a:	b084      	sub	sp, #16
   1e88c:	af00      	add	r7, sp, #0
   1e88e:	6078      	str	r0, [r7, #4]
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1e890:	687b      	ldr	r3, [r7, #4]
   1e892:	681b      	ldr	r3, [r3, #0]
   1e894:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   1e896:	68fb      	ldr	r3, [r7, #12]
   1e898:	7a9b      	ldrb	r3, [r3, #10]
   1e89a:	b2db      	uxtb	r3, r3
   1e89c:	b25b      	sxtb	r3, r3
   1e89e:	2b00      	cmp	r3, #0
   1e8a0:	da01      	bge.n	1e8a6 <rtc_count_is_syncing+0x1e>
                return true;
   1e8a2:	2301      	movs	r3, #1
   1e8a4:	e000      	b.n	1e8a8 <rtc_count_is_syncing+0x20>
        }

        return false;
   1e8a6:	2300      	movs	r3, #0
}
   1e8a8:	0018      	movs	r0, r3
   1e8aa:	46bd      	mov	sp, r7
   1e8ac:	b004      	add	sp, #16
   1e8ae:	bd80      	pop	{r7, pc}

0001e8b0 <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
   1e8b0:	b580      	push	{r7, lr}
   1e8b2:	b084      	sub	sp, #16
   1e8b4:	af00      	add	r7, sp, #0
   1e8b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1e8b8:	687b      	ldr	r3, [r7, #4]
   1e8ba:	681b      	ldr	r3, [r3, #0]
   1e8bc:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   1e8be:	2003      	movs	r0, #3
   1e8c0:	4b0a      	ldr	r3, [pc, #40]	; (1e8ec <rtc_count_enable+0x3c>)
   1e8c2:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
   1e8c4:	46c0      	nop			; (mov r8, r8)
   1e8c6:	687b      	ldr	r3, [r7, #4]
   1e8c8:	0018      	movs	r0, r3
   1e8ca:	4b09      	ldr	r3, [pc, #36]	; (1e8f0 <rtc_count_enable+0x40>)
   1e8cc:	4798      	blx	r3
   1e8ce:	1e03      	subs	r3, r0, #0
   1e8d0:	d1f9      	bne.n	1e8c6 <rtc_count_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
   1e8d2:	68fb      	ldr	r3, [r7, #12]
   1e8d4:	881b      	ldrh	r3, [r3, #0]
   1e8d6:	b29b      	uxth	r3, r3
   1e8d8:	2202      	movs	r2, #2
   1e8da:	4313      	orrs	r3, r2
   1e8dc:	b29a      	uxth	r2, r3
   1e8de:	68fb      	ldr	r3, [r7, #12]
   1e8e0:	801a      	strh	r2, [r3, #0]
}
   1e8e2:	46c0      	nop			; (mov r8, r8)
   1e8e4:	46bd      	mov	sp, r7
   1e8e6:	b004      	add	sp, #16
   1e8e8:	bd80      	pop	{r7, pc}
   1e8ea:	46c0      	nop			; (mov r8, r8)
   1e8ec:	0001e82d 	.word	0x0001e82d
   1e8f0:	0001e889 	.word	0x0001e889

0001e8f4 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
   1e8f4:	b580      	push	{r7, lr}
   1e8f6:	b084      	sub	sp, #16
   1e8f8:	af00      	add	r7, sp, #0
   1e8fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1e8fc:	687b      	ldr	r3, [r7, #4]
   1e8fe:	681b      	ldr	r3, [r3, #0]
   1e900:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   1e902:	2003      	movs	r0, #3
   1e904:	4b0d      	ldr	r3, [pc, #52]	; (1e93c <rtc_count_disable+0x48>)
   1e906:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
   1e908:	46c0      	nop			; (mov r8, r8)
   1e90a:	687b      	ldr	r3, [r7, #4]
   1e90c:	0018      	movs	r0, r3
   1e90e:	4b0c      	ldr	r3, [pc, #48]	; (1e940 <rtc_count_disable+0x4c>)
   1e910:	4798      	blx	r3
   1e912:	1e03      	subs	r3, r0, #0
   1e914:	d1f9      	bne.n	1e90a <rtc_count_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
   1e916:	68fb      	ldr	r3, [r7, #12]
   1e918:	22c1      	movs	r2, #193	; 0xc1
   1e91a:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
   1e91c:	68fb      	ldr	r3, [r7, #12]
   1e91e:	22c1      	movs	r2, #193	; 0xc1
   1e920:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
   1e922:	68fb      	ldr	r3, [r7, #12]
   1e924:	881b      	ldrh	r3, [r3, #0]
   1e926:	b29b      	uxth	r3, r3
   1e928:	2202      	movs	r2, #2
   1e92a:	4393      	bics	r3, r2
   1e92c:	b29a      	uxth	r2, r3
   1e92e:	68fb      	ldr	r3, [r7, #12]
   1e930:	801a      	strh	r2, [r3, #0]
}
   1e932:	46c0      	nop			; (mov r8, r8)
   1e934:	46bd      	mov	sp, r7
   1e936:	b004      	add	sp, #16
   1e938:	bd80      	pop	{r7, pc}
   1e93a:	46c0      	nop			; (mov r8, r8)
   1e93c:	0001e859 	.word	0x0001e859
   1e940:	0001e889 	.word	0x0001e889

0001e944 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
   1e944:	b580      	push	{r7, lr}
   1e946:	b084      	sub	sp, #16
   1e948:	af00      	add	r7, sp, #0
   1e94a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1e94c:	687b      	ldr	r3, [r7, #4]
   1e94e:	681b      	ldr	r3, [r3, #0]
   1e950:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_count_disable(module);
   1e952:	687b      	ldr	r3, [r7, #4]
   1e954:	0018      	movs	r0, r3
   1e956:	4b0d      	ldr	r3, [pc, #52]	; (1e98c <rtc_count_reset+0x48>)
   1e958:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
   1e95a:	687b      	ldr	r3, [r7, #4]
   1e95c:	2200      	movs	r2, #0
   1e95e:	829a      	strh	r2, [r3, #20]
	module->enabled_callback    = 0;
   1e960:	687b      	ldr	r3, [r7, #4]
   1e962:	2200      	movs	r2, #0
   1e964:	82da      	strh	r2, [r3, #22]
#endif

	while (rtc_count_is_syncing(module)) {
   1e966:	46c0      	nop			; (mov r8, r8)
   1e968:	687b      	ldr	r3, [r7, #4]
   1e96a:	0018      	movs	r0, r3
   1e96c:	4b08      	ldr	r3, [pc, #32]	; (1e990 <rtc_count_reset+0x4c>)
   1e96e:	4798      	blx	r3
   1e970:	1e03      	subs	r3, r0, #0
   1e972:	d1f9      	bne.n	1e968 <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
   1e974:	68fb      	ldr	r3, [r7, #12]
   1e976:	881b      	ldrh	r3, [r3, #0]
   1e978:	b29b      	uxth	r3, r3
   1e97a:	2201      	movs	r2, #1
   1e97c:	4313      	orrs	r3, r2
   1e97e:	b29a      	uxth	r2, r3
   1e980:	68fb      	ldr	r3, [r7, #12]
   1e982:	801a      	strh	r2, [r3, #0]
}
   1e984:	46c0      	nop			; (mov r8, r8)
   1e986:	46bd      	mov	sp, r7
   1e988:	b004      	add	sp, #16
   1e98a:	bd80      	pop	{r7, pc}
   1e98c:	0001e8f5 	.word	0x0001e8f5
   1e990:	0001e889 	.word	0x0001e889

0001e994 <_rtc_count_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were given.
 */
static enum status_code _rtc_count_set_config(
		struct rtc_module *const module,
		const struct rtc_count_config *const config)
{
   1e994:	b580      	push	{r7, lr}
   1e996:	b084      	sub	sp, #16
   1e998:	af00      	add	r7, sp, #0
   1e99a:	6078      	str	r0, [r7, #4]
   1e99c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1e99e:	687b      	ldr	r3, [r7, #4]
   1e9a0:	681b      	ldr	r3, [r3, #0]
   1e9a2:	60bb      	str	r3, [r7, #8]

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
   1e9a4:	683b      	ldr	r3, [r7, #0]
   1e9a6:	881a      	ldrh	r2, [r3, #0]
   1e9a8:	68bb      	ldr	r3, [r7, #8]
   1e9aa:	801a      	strh	r2, [r3, #0]

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
   1e9ac:	683b      	ldr	r3, [r7, #0]
   1e9ae:	789b      	ldrb	r3, [r3, #2]
   1e9b0:	2b00      	cmp	r3, #0
   1e9b2:	d03a      	beq.n	1ea2a <_rtc_count_set_config+0x96>
   1e9b4:	2b01      	cmp	r3, #1
   1e9b6:	d000      	beq.n	1e9ba <_rtc_count_set_config+0x26>
   1e9b8:	e06c      	b.n	1ea94 <_rtc_count_set_config+0x100>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
   1e9ba:	68bb      	ldr	r3, [r7, #8]
   1e9bc:	881b      	ldrh	r3, [r3, #0]
   1e9be:	b29a      	uxth	r2, r3
   1e9c0:	68bb      	ldr	r3, [r7, #8]
   1e9c2:	801a      	strh	r2, [r3, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
   1e9c4:	683b      	ldr	r3, [r7, #0]
   1e9c6:	78db      	ldrb	r3, [r3, #3]
   1e9c8:	2b00      	cmp	r3, #0
   1e9ca:	d007      	beq.n	1e9dc <_rtc_count_set_config+0x48>
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
   1e9cc:	68bb      	ldr	r3, [r7, #8]
   1e9ce:	881b      	ldrh	r3, [r3, #0]
   1e9d0:	b29b      	uxth	r3, r3
   1e9d2:	2280      	movs	r2, #128	; 0x80
   1e9d4:	4313      	orrs	r3, r2
   1e9d6:	b29a      	uxth	r2, r3
   1e9d8:	68bb      	ldr	r3, [r7, #8]
   1e9da:	801a      	strh	r2, [r3, #0]
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
   1e9dc:	230f      	movs	r3, #15
   1e9de:	18fb      	adds	r3, r7, r3
   1e9e0:	2200      	movs	r2, #0
   1e9e2:	701a      	strb	r2, [r3, #0]
   1e9e4:	e01b      	b.n	1ea1e <_rtc_count_set_config+0x8a>
				while (rtc_count_is_syncing(module)) {
   1e9e6:	46c0      	nop			; (mov r8, r8)
   1e9e8:	687b      	ldr	r3, [r7, #4]
   1e9ea:	0018      	movs	r0, r3
   1e9ec:	4b37      	ldr	r3, [pc, #220]	; (1eacc <_rtc_count_set_config+0x138>)
   1e9ee:	4798      	blx	r3
   1e9f0:	1e03      	subs	r3, r0, #0
   1e9f2:	d1f9      	bne.n	1e9e8 <_rtc_count_set_config+0x54>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
   1e9f4:	230f      	movs	r3, #15
   1e9f6:	18fb      	adds	r3, r7, r3
   1e9f8:	781a      	ldrb	r2, [r3, #0]
   1e9fa:	683b      	ldr	r3, [r7, #0]
   1e9fc:	3202      	adds	r2, #2
   1e9fe:	0092      	lsls	r2, r2, #2
   1ea00:	58d1      	ldr	r1, [r2, r3]
   1ea02:	230f      	movs	r3, #15
   1ea04:	18fb      	adds	r3, r7, r3
   1ea06:	781a      	ldrb	r2, [r3, #0]
   1ea08:	687b      	ldr	r3, [r7, #4]
   1ea0a:	0018      	movs	r0, r3
   1ea0c:	4b30      	ldr	r3, [pc, #192]	; (1ead0 <_rtc_count_set_config+0x13c>)
   1ea0e:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
   1ea10:	230f      	movs	r3, #15
   1ea12:	18fb      	adds	r3, r7, r3
   1ea14:	781a      	ldrb	r2, [r3, #0]
   1ea16:	230f      	movs	r3, #15
   1ea18:	18fb      	adds	r3, r7, r3
   1ea1a:	3201      	adds	r2, #1
   1ea1c:	701a      	strb	r2, [r3, #0]
   1ea1e:	230f      	movs	r3, #15
   1ea20:	18fb      	adds	r3, r7, r3
   1ea22:	781b      	ldrb	r3, [r3, #0]
   1ea24:	2b00      	cmp	r3, #0
   1ea26:	d0de      	beq.n	1e9e6 <_rtc_count_set_config+0x52>
						(enum rtc_count_compare)i);
			}
			break;
   1ea28:	e036      	b.n	1ea98 <_rtc_count_set_config+0x104>

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
   1ea2a:	68bb      	ldr	r3, [r7, #8]
   1ea2c:	881b      	ldrh	r3, [r3, #0]
   1ea2e:	b29b      	uxth	r3, r3
   1ea30:	2204      	movs	r2, #4
   1ea32:	4313      	orrs	r3, r2
   1ea34:	b29a      	uxth	r2, r3
   1ea36:	68bb      	ldr	r3, [r7, #8]
   1ea38:	801a      	strh	r2, [r3, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
   1ea3a:	683b      	ldr	r3, [r7, #0]
   1ea3c:	78db      	ldrb	r3, [r3, #3]
   1ea3e:	2b00      	cmp	r3, #0
   1ea40:	d001      	beq.n	1ea46 <_rtc_count_set_config+0xb2>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
   1ea42:	2317      	movs	r3, #23
   1ea44:	e03e      	b.n	1eac4 <_rtc_count_set_config+0x130>
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   1ea46:	230e      	movs	r3, #14
   1ea48:	18fb      	adds	r3, r7, r3
   1ea4a:	2200      	movs	r2, #0
   1ea4c:	701a      	strb	r2, [r3, #0]
   1ea4e:	e01b      	b.n	1ea88 <_rtc_count_set_config+0xf4>
				while (rtc_count_is_syncing(module)) {
   1ea50:	46c0      	nop			; (mov r8, r8)
   1ea52:	687b      	ldr	r3, [r7, #4]
   1ea54:	0018      	movs	r0, r3
   1ea56:	4b1d      	ldr	r3, [pc, #116]	; (1eacc <_rtc_count_set_config+0x138>)
   1ea58:	4798      	blx	r3
   1ea5a:	1e03      	subs	r3, r0, #0
   1ea5c:	d1f9      	bne.n	1ea52 <_rtc_count_set_config+0xbe>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
   1ea5e:	230e      	movs	r3, #14
   1ea60:	18fb      	adds	r3, r7, r3
   1ea62:	781a      	ldrb	r2, [r3, #0]
   1ea64:	683b      	ldr	r3, [r7, #0]
   1ea66:	3202      	adds	r2, #2
   1ea68:	0092      	lsls	r2, r2, #2
   1ea6a:	58d1      	ldr	r1, [r2, r3]
   1ea6c:	230e      	movs	r3, #14
   1ea6e:	18fb      	adds	r3, r7, r3
   1ea70:	781a      	ldrb	r2, [r3, #0]
   1ea72:	687b      	ldr	r3, [r7, #4]
   1ea74:	0018      	movs	r0, r3
   1ea76:	4b16      	ldr	r3, [pc, #88]	; (1ead0 <_rtc_count_set_config+0x13c>)
   1ea78:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   1ea7a:	230e      	movs	r3, #14
   1ea7c:	18fb      	adds	r3, r7, r3
   1ea7e:	781a      	ldrb	r2, [r3, #0]
   1ea80:	230e      	movs	r3, #14
   1ea82:	18fb      	adds	r3, r7, r3
   1ea84:	3201      	adds	r2, #1
   1ea86:	701a      	strb	r2, [r3, #0]
   1ea88:	230e      	movs	r3, #14
   1ea8a:	18fb      	adds	r3, r7, r3
   1ea8c:	781b      	ldrb	r3, [r3, #0]
   1ea8e:	2b01      	cmp	r3, #1
   1ea90:	d9de      	bls.n	1ea50 <_rtc_count_set_config+0xbc>
						(enum rtc_count_compare)i);
			}
			break;
   1ea92:	e001      	b.n	1ea98 <_rtc_count_set_config+0x104>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   1ea94:	2317      	movs	r3, #23
   1ea96:	e015      	b.n	1eac4 <_rtc_count_set_config+0x130>
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   1ea98:	683b      	ldr	r3, [r7, #0]
   1ea9a:	791b      	ldrb	r3, [r3, #4]
   1ea9c:	2b00      	cmp	r3, #0
   1ea9e:	d010      	beq.n	1eac2 <_rtc_count_set_config+0x12e>
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
   1eaa0:	68bb      	ldr	r3, [r7, #8]
   1eaa2:	885b      	ldrh	r3, [r3, #2]
   1eaa4:	b29b      	uxth	r3, r3
   1eaa6:	2280      	movs	r2, #128	; 0x80
   1eaa8:	01d2      	lsls	r2, r2, #7
   1eaaa:	4313      	orrs	r3, r2
   1eaac:	b29a      	uxth	r2, r3
   1eaae:	68bb      	ldr	r3, [r7, #8]
   1eab0:	805a      	strh	r2, [r3, #2]
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RREQ;
   1eab2:	68bb      	ldr	r3, [r7, #8]
   1eab4:	885b      	ldrh	r3, [r3, #2]
   1eab6:	b29b      	uxth	r3, r3
   1eab8:	4a06      	ldr	r2, [pc, #24]	; (1ead4 <_rtc_count_set_config+0x140>)
   1eaba:	4313      	orrs	r3, r2
   1eabc:	b29a      	uxth	r2, r3
   1eabe:	68bb      	ldr	r3, [r7, #8]
   1eac0:	805a      	strh	r2, [r3, #2]
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
   1eac2:	2300      	movs	r3, #0
}
   1eac4:	0018      	movs	r0, r3
   1eac6:	46bd      	mov	sp, r7
   1eac8:	b004      	add	sp, #16
   1eaca:	bd80      	pop	{r7, pc}
   1eacc:	0001e889 	.word	0x0001e889
   1ead0:	0001eb69 	.word	0x0001eb69
   1ead4:	ffff8000 	.word	0xffff8000

0001ead8 <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
   1ead8:	b580      	push	{r7, lr}
   1eada:	b086      	sub	sp, #24
   1eadc:	af00      	add	r7, sp, #0
   1eade:	60f8      	str	r0, [r7, #12]
   1eae0:	60b9      	str	r1, [r7, #8]
   1eae2:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   1eae4:	68fb      	ldr	r3, [r7, #12]
   1eae6:	68ba      	ldr	r2, [r7, #8]
   1eae8:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   1eaea:	2120      	movs	r1, #32
   1eaec:	2000      	movs	r0, #0
   1eaee:	4b17      	ldr	r3, [pc, #92]	; (1eb4c <rtc_count_init+0x74>)
   1eaf0:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1eaf2:	2314      	movs	r3, #20
   1eaf4:	18fb      	adds	r3, r7, r3
   1eaf6:	0018      	movs	r0, r3
   1eaf8:	4b15      	ldr	r3, [pc, #84]	; (1eb50 <rtc_count_init+0x78>)
   1eafa:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   1eafc:	2314      	movs	r3, #20
   1eafe:	18fb      	adds	r3, r7, r3
   1eb00:	2202      	movs	r2, #2
   1eb02:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   1eb04:	2314      	movs	r3, #20
   1eb06:	18fb      	adds	r3, r7, r3
   1eb08:	0019      	movs	r1, r3
   1eb0a:	2004      	movs	r0, #4
   1eb0c:	4b11      	ldr	r3, [pc, #68]	; (1eb54 <rtc_count_init+0x7c>)
   1eb0e:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   1eb10:	2004      	movs	r0, #4
   1eb12:	4b11      	ldr	r3, [pc, #68]	; (1eb58 <rtc_count_init+0x80>)
   1eb14:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
   1eb16:	68fb      	ldr	r3, [r7, #12]
   1eb18:	0018      	movs	r0, r3
   1eb1a:	4b10      	ldr	r3, [pc, #64]	; (1eb5c <rtc_count_init+0x84>)
   1eb1c:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
   1eb1e:	687b      	ldr	r3, [r7, #4]
   1eb20:	789a      	ldrb	r2, [r3, #2]
   1eb22:	68fb      	ldr	r3, [r7, #12]
   1eb24:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   1eb26:	687b      	ldr	r3, [r7, #4]
   1eb28:	791a      	ldrb	r2, [r3, #4]
   1eb2a:	68fb      	ldr	r3, [r7, #12]
   1eb2c:	715a      	strb	r2, [r3, #5]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   1eb2e:	4b0c      	ldr	r3, [pc, #48]	; (1eb60 <rtc_count_init+0x88>)
   1eb30:	68fa      	ldr	r2, [r7, #12]
   1eb32:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
   1eb34:	687a      	ldr	r2, [r7, #4]
   1eb36:	68fb      	ldr	r3, [r7, #12]
   1eb38:	0011      	movs	r1, r2
   1eb3a:	0018      	movs	r0, r3
   1eb3c:	4b09      	ldr	r3, [pc, #36]	; (1eb64 <rtc_count_init+0x8c>)
   1eb3e:	4798      	blx	r3
   1eb40:	0003      	movs	r3, r0
}
   1eb42:	0018      	movs	r0, r3
   1eb44:	46bd      	mov	sp, r7
   1eb46:	b006      	add	sp, #24
   1eb48:	bd80      	pop	{r7, pc}
   1eb4a:	46c0      	nop			; (mov r8, r8)
   1eb4c:	0001e7d1 	.word	0x0001e7d1
   1eb50:	0001e7b9 	.word	0x0001e7b9
   1eb54:	00025135 	.word	0x00025135
   1eb58:	00025179 	.word	0x00025179
   1eb5c:	0001e945 	.word	0x0001e945
   1eb60:	20000940 	.word	0x20000940
   1eb64:	0001e995 	.word	0x0001e995

0001eb68 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
   1eb68:	b580      	push	{r7, lr}
   1eb6a:	b086      	sub	sp, #24
   1eb6c:	af00      	add	r7, sp, #0
   1eb6e:	60f8      	str	r0, [r7, #12]
   1eb70:	60b9      	str	r1, [r7, #8]
   1eb72:	1dfb      	adds	r3, r7, #7
   1eb74:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1eb76:	68fb      	ldr	r3, [r7, #12]
   1eb78:	681b      	ldr	r3, [r3, #0]
   1eb7a:	617b      	str	r3, [r7, #20]

	while (rtc_count_is_syncing(module)) {
   1eb7c:	46c0      	nop			; (mov r8, r8)
   1eb7e:	68fb      	ldr	r3, [r7, #12]
   1eb80:	0018      	movs	r0, r3
   1eb82:	4b1a      	ldr	r3, [pc, #104]	; (1ebec <rtc_count_set_compare+0x84>)
   1eb84:	4798      	blx	r3
   1eb86:	1e03      	subs	r3, r0, #0
   1eb88:	d1f9      	bne.n	1eb7e <rtc_count_set_compare+0x16>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
   1eb8a:	68fb      	ldr	r3, [r7, #12]
   1eb8c:	791b      	ldrb	r3, [r3, #4]
   1eb8e:	2b00      	cmp	r3, #0
   1eb90:	d00f      	beq.n	1ebb2 <rtc_count_set_compare+0x4a>
   1eb92:	2b01      	cmp	r3, #1
   1eb94:	d122      	bne.n	1ebdc <rtc_count_set_compare+0x74>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
   1eb96:	1dfb      	adds	r3, r7, #7
   1eb98:	781b      	ldrb	r3, [r3, #0]
   1eb9a:	2b01      	cmp	r3, #1
   1eb9c:	d901      	bls.n	1eba2 <rtc_count_set_compare+0x3a>
				return STATUS_ERR_INVALID_ARG;
   1eb9e:	2317      	movs	r3, #23
   1eba0:	e01f      	b.n	1ebe2 <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
   1eba2:	1dfb      	adds	r3, r7, #7
   1eba4:	781a      	ldrb	r2, [r3, #0]
   1eba6:	697b      	ldr	r3, [r7, #20]
   1eba8:	3206      	adds	r2, #6
   1ebaa:	0092      	lsls	r2, r2, #2
   1ebac:	68b9      	ldr	r1, [r7, #8]
   1ebae:	50d1      	str	r1, [r2, r3]

			break;
   1ebb0:	e016      	b.n	1ebe0 <rtc_count_set_compare+0x78>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
   1ebb2:	1dfb      	adds	r3, r7, #7
   1ebb4:	781b      	ldrb	r3, [r3, #0]
   1ebb6:	2b02      	cmp	r3, #2
   1ebb8:	d901      	bls.n	1ebbe <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
   1ebba:	2317      	movs	r3, #23
   1ebbc:	e011      	b.n	1ebe2 <rtc_count_set_compare+0x7a>
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
   1ebbe:	68bb      	ldr	r3, [r7, #8]
   1ebc0:	4a0b      	ldr	r2, [pc, #44]	; (1ebf0 <rtc_count_set_compare+0x88>)
   1ebc2:	4293      	cmp	r3, r2
   1ebc4:	d901      	bls.n	1ebca <rtc_count_set_compare+0x62>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
   1ebc6:	2317      	movs	r3, #23
   1ebc8:	e00b      	b.n	1ebe2 <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
   1ebca:	1dfb      	adds	r3, r7, #7
   1ebcc:	781a      	ldrb	r2, [r3, #0]
   1ebce:	68bb      	ldr	r3, [r7, #8]
   1ebd0:	b299      	uxth	r1, r3
   1ebd2:	697b      	ldr	r3, [r7, #20]
   1ebd4:	320c      	adds	r2, #12
   1ebd6:	0052      	lsls	r2, r2, #1
   1ebd8:	52d1      	strh	r1, [r2, r3]

			break;
   1ebda:	e001      	b.n	1ebe0 <rtc_count_set_compare+0x78>

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
   1ebdc:	231a      	movs	r3, #26
   1ebde:	e000      	b.n	1ebe2 <rtc_count_set_compare+0x7a>
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
   1ebe0:	2300      	movs	r3, #0
}
   1ebe2:	0018      	movs	r0, r3
   1ebe4:	46bd      	mov	sp, r7
   1ebe6:	b006      	add	sp, #24
   1ebe8:	bd80      	pop	{r7, pc}
   1ebea:	46c0      	nop			; (mov r8, r8)
   1ebec:	0001e889 	.word	0x0001e889
   1ebf0:	0000ffff 	.word	0x0000ffff

0001ebf4 <rtc_count_set_period>:
 * \retval STATUS_ERR_UNSUPPORTED_DEV  If module is not operated in 16-bit mode
 */
enum status_code rtc_count_set_period(
		struct rtc_module *const module,
		const uint16_t period_value)
{
   1ebf4:	b580      	push	{r7, lr}
   1ebf6:	b084      	sub	sp, #16
   1ebf8:	af00      	add	r7, sp, #0
   1ebfa:	6078      	str	r0, [r7, #4]
   1ebfc:	000a      	movs	r2, r1
   1ebfe:	1cbb      	adds	r3, r7, #2
   1ec00:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1ec02:	687b      	ldr	r3, [r7, #4]
   1ec04:	681b      	ldr	r3, [r3, #0]
   1ec06:	60fb      	str	r3, [r7, #12]

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
   1ec08:	687b      	ldr	r3, [r7, #4]
   1ec0a:	791b      	ldrb	r3, [r3, #4]
   1ec0c:	2b00      	cmp	r3, #0
   1ec0e:	d001      	beq.n	1ec14 <rtc_count_set_period+0x20>
		return STATUS_ERR_UNSUPPORTED_DEV;
   1ec10:	2315      	movs	r3, #21
   1ec12:	e00b      	b.n	1ec2c <rtc_count_set_period+0x38>
	}

	while (rtc_count_is_syncing(module)) {
   1ec14:	46c0      	nop			; (mov r8, r8)
   1ec16:	687b      	ldr	r3, [r7, #4]
   1ec18:	0018      	movs	r0, r3
   1ec1a:	4b06      	ldr	r3, [pc, #24]	; (1ec34 <rtc_count_set_period+0x40>)
   1ec1c:	4798      	blx	r3
   1ec1e:	1e03      	subs	r3, r0, #0
   1ec20:	d1f9      	bne.n	1ec16 <rtc_count_set_period+0x22>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE1.PER.reg = period_value;
   1ec22:	68fb      	ldr	r3, [r7, #12]
   1ec24:	1cba      	adds	r2, r7, #2
   1ec26:	8812      	ldrh	r2, [r2, #0]
   1ec28:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
   1ec2a:	2300      	movs	r3, #0
}
   1ec2c:	0018      	movs	r0, r3
   1ec2e:	46bd      	mov	sp, r7
   1ec30:	b004      	add	sp, #16
   1ec32:	bd80      	pop	{r7, pc}
   1ec34:	0001e889 	.word	0x0001e889

0001ec38 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   1ec38:	b580      	push	{r7, lr}
   1ec3a:	b086      	sub	sp, #24
   1ec3c:	af00      	add	r7, sp, #0
   1ec3e:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   1ec40:	4b31      	ldr	r3, [pc, #196]	; (1ed08 <_rtc_interrupt_handler+0xd0>)
   1ec42:	687a      	ldr	r2, [r7, #4]
   1ec44:	0092      	lsls	r2, r2, #2
   1ec46:	58d3      	ldr	r3, [r2, r3]
   1ec48:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   1ec4a:	697b      	ldr	r3, [r7, #20]
   1ec4c:	681b      	ldr	r3, [r3, #0]
   1ec4e:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   1ec50:	230e      	movs	r3, #14
   1ec52:	18fb      	adds	r3, r7, r3
   1ec54:	697a      	ldr	r2, [r7, #20]
   1ec56:	8ad2      	ldrh	r2, [r2, #22]
   1ec58:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   1ec5a:	697b      	ldr	r3, [r7, #20]
   1ec5c:	8a9b      	ldrh	r3, [r3, #20]
   1ec5e:	b29a      	uxth	r2, r3
   1ec60:	230e      	movs	r3, #14
   1ec62:	18fb      	adds	r3, r7, r3
   1ec64:	210e      	movs	r1, #14
   1ec66:	1879      	adds	r1, r7, r1
   1ec68:	8809      	ldrh	r1, [r1, #0]
   1ec6a:	400a      	ands	r2, r1
   1ec6c:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
   1ec6e:	693b      	ldr	r3, [r7, #16]
   1ec70:	7a1b      	ldrb	r3, [r3, #8]
   1ec72:	b2da      	uxtb	r2, r3
   1ec74:	230c      	movs	r3, #12
   1ec76:	18fb      	adds	r3, r7, r3
   1ec78:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
   1ec7a:	693b      	ldr	r3, [r7, #16]
   1ec7c:	79db      	ldrb	r3, [r3, #7]
   1ec7e:	b2db      	uxtb	r3, r3
   1ec80:	b29a      	uxth	r2, r3
   1ec82:	230c      	movs	r3, #12
   1ec84:	18fb      	adds	r3, r7, r3
   1ec86:	210c      	movs	r1, #12
   1ec88:	1879      	adds	r1, r7, r1
   1ec8a:	8809      	ldrh	r1, [r1, #0]
   1ec8c:	400a      	ands	r2, r1
   1ec8e:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
   1ec90:	230c      	movs	r3, #12
   1ec92:	18fb      	adds	r3, r7, r3
   1ec94:	881b      	ldrh	r3, [r3, #0]
   1ec96:	2280      	movs	r2, #128	; 0x80
   1ec98:	4013      	ands	r3, r2
   1ec9a:	d00c      	beq.n	1ecb6 <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
   1ec9c:	230e      	movs	r3, #14
   1ec9e:	18fb      	adds	r3, r7, r3
   1eca0:	881b      	ldrh	r3, [r3, #0]
   1eca2:	2204      	movs	r2, #4
   1eca4:	4013      	ands	r3, r2
   1eca6:	d002      	beq.n	1ecae <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
   1eca8:	697b      	ldr	r3, [r7, #20]
   1ecaa:	691b      	ldr	r3, [r3, #16]
   1ecac:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
   1ecae:	693b      	ldr	r3, [r7, #16]
   1ecb0:	2280      	movs	r2, #128	; 0x80
   1ecb2:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
   1ecb4:	e024      	b.n	1ed00 <_rtc_interrupt_handler+0xc8>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
   1ecb6:	230c      	movs	r3, #12
   1ecb8:	18fb      	adds	r3, r7, r3
   1ecba:	881b      	ldrh	r3, [r3, #0]
   1ecbc:	2201      	movs	r2, #1
   1ecbe:	4013      	ands	r3, r2
   1ecc0:	d00c      	beq.n	1ecdc <_rtc_interrupt_handler+0xa4>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
   1ecc2:	230e      	movs	r3, #14
   1ecc4:	18fb      	adds	r3, r7, r3
   1ecc6:	881b      	ldrh	r3, [r3, #0]
   1ecc8:	2201      	movs	r2, #1
   1ecca:	4013      	ands	r3, r2
   1eccc:	d002      	beq.n	1ecd4 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
   1ecce:	697b      	ldr	r3, [r7, #20]
   1ecd0:	689b      	ldr	r3, [r3, #8]
   1ecd2:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
   1ecd4:	693b      	ldr	r3, [r7, #16]
   1ecd6:	2201      	movs	r2, #1
   1ecd8:	721a      	strb	r2, [r3, #8]
}
   1ecda:	e011      	b.n	1ed00 <_rtc_interrupt_handler+0xc8>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
   1ecdc:	230c      	movs	r3, #12
   1ecde:	18fb      	adds	r3, r7, r3
   1ece0:	881b      	ldrh	r3, [r3, #0]
   1ece2:	2202      	movs	r2, #2
   1ece4:	4013      	ands	r3, r2
   1ece6:	d00b      	beq.n	1ed00 <_rtc_interrupt_handler+0xc8>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
   1ece8:	230e      	movs	r3, #14
   1ecea:	18fb      	adds	r3, r7, r3
   1ecec:	881b      	ldrh	r3, [r3, #0]
   1ecee:	2202      	movs	r2, #2
   1ecf0:	4013      	ands	r3, r2
   1ecf2:	d002      	beq.n	1ecfa <_rtc_interrupt_handler+0xc2>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
   1ecf4:	697b      	ldr	r3, [r7, #20]
   1ecf6:	68db      	ldr	r3, [r3, #12]
   1ecf8:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
   1ecfa:	693b      	ldr	r3, [r7, #16]
   1ecfc:	2202      	movs	r2, #2
   1ecfe:	721a      	strb	r2, [r3, #8]
}
   1ed00:	46c0      	nop			; (mov r8, r8)
   1ed02:	46bd      	mov	sp, r7
   1ed04:	b006      	add	sp, #24
   1ed06:	bd80      	pop	{r7, pc}
   1ed08:	20000940 	.word	0x20000940

0001ed0c <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   1ed0c:	b580      	push	{r7, lr}
   1ed0e:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   1ed10:	2000      	movs	r0, #0
   1ed12:	4b02      	ldr	r3, [pc, #8]	; (1ed1c <RTC_Handler+0x10>)
   1ed14:	4798      	blx	r3
}
   1ed16:	46c0      	nop			; (mov r8, r8)
   1ed18:	46bd      	mov	sp, r7
   1ed1a:	bd80      	pop	{r7, pc}
   1ed1c:	0001ec39 	.word	0x0001ec39

0001ed20 <system_gclk_chan_get_config_defaults>:
{
   1ed20:	b580      	push	{r7, lr}
   1ed22:	b082      	sub	sp, #8
   1ed24:	af00      	add	r7, sp, #0
   1ed26:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1ed28:	687b      	ldr	r3, [r7, #4]
   1ed2a:	2200      	movs	r2, #0
   1ed2c:	701a      	strb	r2, [r3, #0]
}
   1ed2e:	46c0      	nop			; (mov r8, r8)
   1ed30:	46bd      	mov	sp, r7
   1ed32:	b002      	add	sp, #8
   1ed34:	bd80      	pop	{r7, pc}

0001ed36 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   1ed36:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ed38:	b08d      	sub	sp, #52	; 0x34
   1ed3a:	af00      	add	r7, sp, #0
   1ed3c:	60b8      	str	r0, [r7, #8]
   1ed3e:	60f9      	str	r1, [r7, #12]
   1ed40:	603a      	str	r2, [r7, #0]
   1ed42:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   1ed44:	2300      	movs	r3, #0
   1ed46:	2400      	movs	r4, #0
   1ed48:	623b      	str	r3, [r7, #32]
   1ed4a:	627c      	str	r4, [r7, #36]	; 0x24
   1ed4c:	2300      	movs	r3, #0
   1ed4e:	2400      	movs	r4, #0
   1ed50:	61bb      	str	r3, [r7, #24]
   1ed52:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   1ed54:	233f      	movs	r3, #63	; 0x3f
   1ed56:	62fb      	str	r3, [r7, #44]	; 0x2c
   1ed58:	e053      	b.n	1ee02 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   1ed5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ed5c:	3b20      	subs	r3, #32
   1ed5e:	2b00      	cmp	r3, #0
   1ed60:	db04      	blt.n	1ed6c <long_division+0x36>
   1ed62:	2201      	movs	r2, #1
   1ed64:	409a      	lsls	r2, r3
   1ed66:	0013      	movs	r3, r2
   1ed68:	617b      	str	r3, [r7, #20]
   1ed6a:	e00b      	b.n	1ed84 <long_division+0x4e>
   1ed6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ed6e:	2220      	movs	r2, #32
   1ed70:	1ad3      	subs	r3, r2, r3
   1ed72:	2201      	movs	r2, #1
   1ed74:	40da      	lsrs	r2, r3
   1ed76:	0013      	movs	r3, r2
   1ed78:	2100      	movs	r1, #0
   1ed7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1ed7c:	4091      	lsls	r1, r2
   1ed7e:	000a      	movs	r2, r1
   1ed80:	4313      	orrs	r3, r2
   1ed82:	617b      	str	r3, [r7, #20]
   1ed84:	2201      	movs	r2, #1
   1ed86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ed88:	409a      	lsls	r2, r3
   1ed8a:	0013      	movs	r3, r2
   1ed8c:	613b      	str	r3, [r7, #16]

		r = r << 1;
   1ed8e:	69bb      	ldr	r3, [r7, #24]
   1ed90:	69fc      	ldr	r4, [r7, #28]
   1ed92:	18db      	adds	r3, r3, r3
   1ed94:	4164      	adcs	r4, r4
   1ed96:	61bb      	str	r3, [r7, #24]
   1ed98:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   1ed9a:	68bb      	ldr	r3, [r7, #8]
   1ed9c:	693a      	ldr	r2, [r7, #16]
   1ed9e:	401a      	ands	r2, r3
   1eda0:	0015      	movs	r5, r2
   1eda2:	68fb      	ldr	r3, [r7, #12]
   1eda4:	697a      	ldr	r2, [r7, #20]
   1eda6:	401a      	ands	r2, r3
   1eda8:	0016      	movs	r6, r2
   1edaa:	002b      	movs	r3, r5
   1edac:	4333      	orrs	r3, r6
   1edae:	d007      	beq.n	1edc0 <long_division+0x8a>
			r |= 0x01;
   1edb0:	69bb      	ldr	r3, [r7, #24]
   1edb2:	2201      	movs	r2, #1
   1edb4:	4313      	orrs	r3, r2
   1edb6:	61bb      	str	r3, [r7, #24]
   1edb8:	69fb      	ldr	r3, [r7, #28]
   1edba:	2200      	movs	r2, #0
   1edbc:	4313      	orrs	r3, r2
   1edbe:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   1edc0:	687a      	ldr	r2, [r7, #4]
   1edc2:	69fb      	ldr	r3, [r7, #28]
   1edc4:	429a      	cmp	r2, r3
   1edc6:	d819      	bhi.n	1edfc <long_division+0xc6>
   1edc8:	687a      	ldr	r2, [r7, #4]
   1edca:	69fb      	ldr	r3, [r7, #28]
   1edcc:	429a      	cmp	r2, r3
   1edce:	d103      	bne.n	1edd8 <long_division+0xa2>
   1edd0:	683a      	ldr	r2, [r7, #0]
   1edd2:	69bb      	ldr	r3, [r7, #24]
   1edd4:	429a      	cmp	r2, r3
   1edd6:	d811      	bhi.n	1edfc <long_division+0xc6>
			r = r - d;
   1edd8:	69b9      	ldr	r1, [r7, #24]
   1edda:	69fa      	ldr	r2, [r7, #28]
   1eddc:	683b      	ldr	r3, [r7, #0]
   1edde:	687c      	ldr	r4, [r7, #4]
   1ede0:	1ac9      	subs	r1, r1, r3
   1ede2:	41a2      	sbcs	r2, r4
   1ede4:	000b      	movs	r3, r1
   1ede6:	0014      	movs	r4, r2
   1ede8:	61bb      	str	r3, [r7, #24]
   1edea:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   1edec:	6a3a      	ldr	r2, [r7, #32]
   1edee:	693b      	ldr	r3, [r7, #16]
   1edf0:	4313      	orrs	r3, r2
   1edf2:	623b      	str	r3, [r7, #32]
   1edf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1edf6:	697b      	ldr	r3, [r7, #20]
   1edf8:	4313      	orrs	r3, r2
   1edfa:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   1edfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1edfe:	3b01      	subs	r3, #1
   1ee00:	62fb      	str	r3, [r7, #44]	; 0x2c
   1ee02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ee04:	2b00      	cmp	r3, #0
   1ee06:	daa8      	bge.n	1ed5a <long_division+0x24>
		}
	}

	return q;
   1ee08:	6a3b      	ldr	r3, [r7, #32]
   1ee0a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   1ee0c:	0018      	movs	r0, r3
   1ee0e:	0021      	movs	r1, r4
   1ee10:	46bd      	mov	sp, r7
   1ee12:	b00d      	add	sp, #52	; 0x34
   1ee14:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001ee16 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   1ee16:	b580      	push	{r7, lr}
   1ee18:	b086      	sub	sp, #24
   1ee1a:	af00      	add	r7, sp, #0
   1ee1c:	60f8      	str	r0, [r7, #12]
   1ee1e:	60b9      	str	r1, [r7, #8]
   1ee20:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   1ee22:	2316      	movs	r3, #22
   1ee24:	18fb      	adds	r3, r7, r3
   1ee26:	2200      	movs	r2, #0
   1ee28:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   1ee2a:	68bb      	ldr	r3, [r7, #8]
   1ee2c:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   1ee2e:	68bb      	ldr	r3, [r7, #8]
   1ee30:	085a      	lsrs	r2, r3, #1
   1ee32:	68fb      	ldr	r3, [r7, #12]
   1ee34:	429a      	cmp	r2, r3
   1ee36:	d201      	bcs.n	1ee3c <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1ee38:	2340      	movs	r3, #64	; 0x40
   1ee3a:	e026      	b.n	1ee8a <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   1ee3c:	68bb      	ldr	r3, [r7, #8]
   1ee3e:	085b      	lsrs	r3, r3, #1
   1ee40:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   1ee42:	e00a      	b.n	1ee5a <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   1ee44:	693a      	ldr	r2, [r7, #16]
   1ee46:	68fb      	ldr	r3, [r7, #12]
   1ee48:	1ad3      	subs	r3, r2, r3
   1ee4a:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   1ee4c:	2316      	movs	r3, #22
   1ee4e:	18fb      	adds	r3, r7, r3
   1ee50:	881a      	ldrh	r2, [r3, #0]
   1ee52:	2316      	movs	r3, #22
   1ee54:	18fb      	adds	r3, r7, r3
   1ee56:	3201      	adds	r2, #1
   1ee58:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   1ee5a:	693a      	ldr	r2, [r7, #16]
   1ee5c:	68fb      	ldr	r3, [r7, #12]
   1ee5e:	429a      	cmp	r2, r3
   1ee60:	d2f0      	bcs.n	1ee44 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   1ee62:	2316      	movs	r3, #22
   1ee64:	18fb      	adds	r3, r7, r3
   1ee66:	2216      	movs	r2, #22
   1ee68:	18ba      	adds	r2, r7, r2
   1ee6a:	8812      	ldrh	r2, [r2, #0]
   1ee6c:	3a01      	subs	r2, #1
   1ee6e:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   1ee70:	2316      	movs	r3, #22
   1ee72:	18fb      	adds	r3, r7, r3
   1ee74:	881b      	ldrh	r3, [r3, #0]
   1ee76:	2bff      	cmp	r3, #255	; 0xff
   1ee78:	d901      	bls.n	1ee7e <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1ee7a:	2340      	movs	r3, #64	; 0x40
   1ee7c:	e005      	b.n	1ee8a <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   1ee7e:	687b      	ldr	r3, [r7, #4]
   1ee80:	2216      	movs	r2, #22
   1ee82:	18ba      	adds	r2, r7, r2
   1ee84:	8812      	ldrh	r2, [r2, #0]
   1ee86:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   1ee88:	2300      	movs	r3, #0
	}
}
   1ee8a:	0018      	movs	r0, r3
   1ee8c:	46bd      	mov	sp, r7
   1ee8e:	b006      	add	sp, #24
   1ee90:	bd80      	pop	{r7, pc}
	...

0001ee94 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   1ee94:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ee96:	b0a1      	sub	sp, #132	; 0x84
   1ee98:	af00      	add	r7, sp, #0
   1ee9a:	64f8      	str	r0, [r7, #76]	; 0x4c
   1ee9c:	64b9      	str	r1, [r7, #72]	; 0x48
   1ee9e:	647a      	str	r2, [r7, #68]	; 0x44
   1eea0:	2243      	movs	r2, #67	; 0x43
   1eea2:	18ba      	adds	r2, r7, r2
   1eea4:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   1eea6:	2300      	movs	r3, #0
   1eea8:	2400      	movs	r4, #0
   1eeaa:	673b      	str	r3, [r7, #112]	; 0x70
   1eeac:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   1eeae:	2300      	movs	r3, #0
   1eeb0:	2400      	movs	r4, #0
   1eeb2:	66bb      	str	r3, [r7, #104]	; 0x68
   1eeb4:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   1eeb6:	2300      	movs	r3, #0
   1eeb8:	2400      	movs	r4, #0
   1eeba:	67bb      	str	r3, [r7, #120]	; 0x78
   1eebc:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   1eebe:	2300      	movs	r3, #0
   1eec0:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   1eec2:	2358      	movs	r3, #88	; 0x58
   1eec4:	2240      	movs	r2, #64	; 0x40
   1eec6:	4694      	mov	ip, r2
   1eec8:	44bc      	add	ip, r7
   1eeca:	4463      	add	r3, ip
   1eecc:	781a      	ldrb	r2, [r3, #0]
   1eece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1eed0:	435a      	muls	r2, r3
   1eed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1eed4:	429a      	cmp	r2, r3
   1eed6:	d901      	bls.n	1eedc <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1eed8:	2340      	movs	r3, #64	; 0x40
   1eeda:	e0b3      	b.n	1f044 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   1eedc:	2343      	movs	r3, #67	; 0x43
   1eede:	18fb      	adds	r3, r7, r3
   1eee0:	781b      	ldrb	r3, [r3, #0]
   1eee2:	2b00      	cmp	r3, #0
   1eee4:	d13d      	bne.n	1ef62 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   1eee6:	2358      	movs	r3, #88	; 0x58
   1eee8:	2240      	movs	r2, #64	; 0x40
   1eeea:	4694      	mov	ip, r2
   1eeec:	44bc      	add	ip, r7
   1eeee:	4463      	add	r3, ip
   1eef0:	781b      	ldrb	r3, [r3, #0]
   1eef2:	b2db      	uxtb	r3, r3
   1eef4:	613b      	str	r3, [r7, #16]
   1eef6:	2300      	movs	r3, #0
   1eef8:	617b      	str	r3, [r7, #20]
   1eefa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1eefc:	60bb      	str	r3, [r7, #8]
   1eefe:	2300      	movs	r3, #0
   1ef00:	60fb      	str	r3, [r7, #12]
   1ef02:	4c52      	ldr	r4, [pc, #328]	; (1f04c <_sercom_get_async_baud_val+0x1b8>)
   1ef04:	68ba      	ldr	r2, [r7, #8]
   1ef06:	68fb      	ldr	r3, [r7, #12]
   1ef08:	6938      	ldr	r0, [r7, #16]
   1ef0a:	6979      	ldr	r1, [r7, #20]
   1ef0c:	47a0      	blx	r4
   1ef0e:	0003      	movs	r3, r0
   1ef10:	000c      	movs	r4, r1
   1ef12:	001b      	movs	r3, r3
   1ef14:	65fb      	str	r3, [r7, #92]	; 0x5c
   1ef16:	2300      	movs	r3, #0
   1ef18:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   1ef1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1ef1c:	603b      	str	r3, [r7, #0]
   1ef1e:	2300      	movs	r3, #0
   1ef20:	607b      	str	r3, [r7, #4]
   1ef22:	6db8      	ldr	r0, [r7, #88]	; 0x58
   1ef24:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   1ef26:	683a      	ldr	r2, [r7, #0]
   1ef28:	687b      	ldr	r3, [r7, #4]
   1ef2a:	4c49      	ldr	r4, [pc, #292]	; (1f050 <_sercom_get_async_baud_val+0x1bc>)
   1ef2c:	47a0      	blx	r4
   1ef2e:	0003      	movs	r3, r0
   1ef30:	000c      	movs	r4, r1
   1ef32:	673b      	str	r3, [r7, #112]	; 0x70
   1ef34:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   1ef36:	2100      	movs	r1, #0
   1ef38:	2201      	movs	r2, #1
   1ef3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1ef3c:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   1ef3e:	1ac9      	subs	r1, r1, r3
   1ef40:	41a2      	sbcs	r2, r4
   1ef42:	000b      	movs	r3, r1
   1ef44:	0014      	movs	r4, r2
   1ef46:	66bb      	str	r3, [r7, #104]	; 0x68
   1ef48:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   1ef4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1ef4c:	0c1b      	lsrs	r3, r3, #16
   1ef4e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   1ef50:	0416      	lsls	r6, r2, #16
   1ef52:	431e      	orrs	r6, r3
   1ef54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1ef56:	041d      	lsls	r5, r3, #16
   1ef58:	0033      	movs	r3, r6
   1ef5a:	67bb      	str	r3, [r7, #120]	; 0x78
   1ef5c:	2300      	movs	r3, #0
   1ef5e:	67fb      	str	r3, [r7, #124]	; 0x7c
   1ef60:	e06a      	b.n	1f038 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   1ef62:	2343      	movs	r3, #67	; 0x43
   1ef64:	18fb      	adds	r3, r7, r3
   1ef66:	781b      	ldrb	r3, [r3, #0]
   1ef68:	2b01      	cmp	r3, #1
   1ef6a:	d165      	bne.n	1f038 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   1ef6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1ef6e:	633b      	str	r3, [r7, #48]	; 0x30
   1ef70:	2300      	movs	r3, #0
   1ef72:	637b      	str	r3, [r7, #52]	; 0x34
   1ef74:	2358      	movs	r3, #88	; 0x58
   1ef76:	2240      	movs	r2, #64	; 0x40
   1ef78:	4694      	mov	ip, r2
   1ef7a:	44bc      	add	ip, r7
   1ef7c:	4463      	add	r3, ip
   1ef7e:	781b      	ldrb	r3, [r3, #0]
   1ef80:	b2db      	uxtb	r3, r3
   1ef82:	62bb      	str	r3, [r7, #40]	; 0x28
   1ef84:	2300      	movs	r3, #0
   1ef86:	62fb      	str	r3, [r7, #44]	; 0x2c
   1ef88:	4c30      	ldr	r4, [pc, #192]	; (1f04c <_sercom_get_async_baud_val+0x1b8>)
   1ef8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1ef8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ef8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1ef90:	6b79      	ldr	r1, [r7, #52]	; 0x34
   1ef92:	47a0      	blx	r4
   1ef94:	0003      	movs	r3, r0
   1ef96:	000c      	movs	r4, r1
   1ef98:	65bb      	str	r3, [r7, #88]	; 0x58
   1ef9a:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   1ef9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1ef9e:	623b      	str	r3, [r7, #32]
   1efa0:	2300      	movs	r3, #0
   1efa2:	627b      	str	r3, [r7, #36]	; 0x24
   1efa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1efa6:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1efa8:	001a      	movs	r2, r3
   1efaa:	0023      	movs	r3, r4
   1efac:	6a38      	ldr	r0, [r7, #32]
   1efae:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1efb0:	4c27      	ldr	r4, [pc, #156]	; (1f050 <_sercom_get_async_baud_val+0x1bc>)
   1efb2:	47a0      	blx	r4
   1efb4:	0003      	movs	r3, r0
   1efb6:	000c      	movs	r4, r1
   1efb8:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   1efba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1efbc:	2380      	movs	r3, #128	; 0x80
   1efbe:	019b      	lsls	r3, r3, #6
   1efc0:	429a      	cmp	r2, r3
   1efc2:	d901      	bls.n	1efc8 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1efc4:	2340      	movs	r3, #64	; 0x40
   1efc6:	e03d      	b.n	1f044 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   1efc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1efca:	61bb      	str	r3, [r7, #24]
   1efcc:	2300      	movs	r3, #0
   1efce:	61fb      	str	r3, [r7, #28]
   1efd0:	69b9      	ldr	r1, [r7, #24]
   1efd2:	69fa      	ldr	r2, [r7, #28]
   1efd4:	000b      	movs	r3, r1
   1efd6:	0f5b      	lsrs	r3, r3, #29
   1efd8:	0010      	movs	r0, r2
   1efda:	00c0      	lsls	r0, r0, #3
   1efdc:	63f8      	str	r0, [r7, #60]	; 0x3c
   1efde:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1efe0:	4318      	orrs	r0, r3
   1efe2:	63f8      	str	r0, [r7, #60]	; 0x3c
   1efe4:	000b      	movs	r3, r1
   1efe6:	00db      	lsls	r3, r3, #3
   1efe8:	63bb      	str	r3, [r7, #56]	; 0x38
   1efea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1efec:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1efee:	001a      	movs	r2, r3
   1eff0:	0023      	movs	r3, r4
   1eff2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1eff4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1eff6:	4c16      	ldr	r4, [pc, #88]	; (1f050 <_sercom_get_async_baud_val+0x1bc>)
   1eff8:	47a0      	blx	r4
   1effa:	0003      	movs	r3, r0
   1effc:	000c      	movs	r4, r1
   1effe:	65bb      	str	r3, [r7, #88]	; 0x58
   1f000:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   1f002:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1f004:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1f006:	b2d9      	uxtb	r1, r3
   1f008:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1f00a:	b2db      	uxtb	r3, r3
   1f00c:	00db      	lsls	r3, r3, #3
   1f00e:	b2da      	uxtb	r2, r3
   1f010:	2317      	movs	r3, #23
   1f012:	2040      	movs	r0, #64	; 0x40
   1f014:	4684      	mov	ip, r0
   1f016:	44bc      	add	ip, r7
   1f018:	4463      	add	r3, ip
   1f01a:	1a8a      	subs	r2, r1, r2
   1f01c:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   1f01e:	2317      	movs	r3, #23
   1f020:	2240      	movs	r2, #64	; 0x40
   1f022:	4694      	mov	ip, r2
   1f024:	44bc      	add	ip, r7
   1f026:	4463      	add	r3, ip
   1f028:	781b      	ldrb	r3, [r3, #0]
   1f02a:	035b      	lsls	r3, r3, #13
   1f02c:	001a      	movs	r2, r3
   1f02e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1f030:	4313      	orrs	r3, r2
   1f032:	67bb      	str	r3, [r7, #120]	; 0x78
   1f034:	2300      	movs	r3, #0
   1f036:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   1f038:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1f03a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   1f03c:	b29a      	uxth	r2, r3
   1f03e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1f040:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   1f042:	2300      	movs	r3, #0
}
   1f044:	0018      	movs	r0, r3
   1f046:	46bd      	mov	sp, r7
   1f048:	b021      	add	sp, #132	; 0x84
   1f04a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f04c:	00027025 	.word	0x00027025
   1f050:	0001ed37 	.word	0x0001ed37

0001f054 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   1f054:	b580      	push	{r7, lr}
   1f056:	b084      	sub	sp, #16
   1f058:	af00      	add	r7, sp, #0
   1f05a:	0002      	movs	r2, r0
   1f05c:	1dfb      	adds	r3, r7, #7
   1f05e:	701a      	strb	r2, [r3, #0]
   1f060:	1dbb      	adds	r3, r7, #6
   1f062:	1c0a      	adds	r2, r1, #0
   1f064:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   1f066:	4b1a      	ldr	r3, [pc, #104]	; (1f0d0 <sercom_set_gclk_generator+0x7c>)
   1f068:	781b      	ldrb	r3, [r3, #0]
   1f06a:	2201      	movs	r2, #1
   1f06c:	4053      	eors	r3, r2
   1f06e:	b2db      	uxtb	r3, r3
   1f070:	2b00      	cmp	r3, #0
   1f072:	d103      	bne.n	1f07c <sercom_set_gclk_generator+0x28>
   1f074:	1dbb      	adds	r3, r7, #6
   1f076:	781b      	ldrb	r3, [r3, #0]
   1f078:	2b00      	cmp	r3, #0
   1f07a:	d01b      	beq.n	1f0b4 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1f07c:	230c      	movs	r3, #12
   1f07e:	18fb      	adds	r3, r7, r3
   1f080:	0018      	movs	r0, r3
   1f082:	4b14      	ldr	r3, [pc, #80]	; (1f0d4 <sercom_set_gclk_generator+0x80>)
   1f084:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   1f086:	230c      	movs	r3, #12
   1f088:	18fb      	adds	r3, r7, r3
   1f08a:	1dfa      	adds	r2, r7, #7
   1f08c:	7812      	ldrb	r2, [r2, #0]
   1f08e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   1f090:	230c      	movs	r3, #12
   1f092:	18fb      	adds	r3, r7, r3
   1f094:	0019      	movs	r1, r3
   1f096:	2013      	movs	r0, #19
   1f098:	4b0f      	ldr	r3, [pc, #60]	; (1f0d8 <sercom_set_gclk_generator+0x84>)
   1f09a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   1f09c:	2013      	movs	r0, #19
   1f09e:	4b0f      	ldr	r3, [pc, #60]	; (1f0dc <sercom_set_gclk_generator+0x88>)
   1f0a0:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   1f0a2:	4b0b      	ldr	r3, [pc, #44]	; (1f0d0 <sercom_set_gclk_generator+0x7c>)
   1f0a4:	1dfa      	adds	r2, r7, #7
   1f0a6:	7812      	ldrb	r2, [r2, #0]
   1f0a8:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   1f0aa:	4b09      	ldr	r3, [pc, #36]	; (1f0d0 <sercom_set_gclk_generator+0x7c>)
   1f0ac:	2201      	movs	r2, #1
   1f0ae:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   1f0b0:	2300      	movs	r3, #0
   1f0b2:	e008      	b.n	1f0c6 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   1f0b4:	4b06      	ldr	r3, [pc, #24]	; (1f0d0 <sercom_set_gclk_generator+0x7c>)
   1f0b6:	785b      	ldrb	r3, [r3, #1]
   1f0b8:	1dfa      	adds	r2, r7, #7
   1f0ba:	7812      	ldrb	r2, [r2, #0]
   1f0bc:	429a      	cmp	r2, r3
   1f0be:	d101      	bne.n	1f0c4 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   1f0c0:	2300      	movs	r3, #0
   1f0c2:	e000      	b.n	1f0c6 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   1f0c4:	231d      	movs	r3, #29
}
   1f0c6:	0018      	movs	r0, r3
   1f0c8:	46bd      	mov	sp, r7
   1f0ca:	b004      	add	sp, #16
   1f0cc:	bd80      	pop	{r7, pc}
   1f0ce:	46c0      	nop			; (mov r8, r8)
   1f0d0:	200002b4 	.word	0x200002b4
   1f0d4:	0001ed21 	.word	0x0001ed21
   1f0d8:	00025135 	.word	0x00025135
   1f0dc:	00025179 	.word	0x00025179

0001f0e0 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   1f0e0:	b580      	push	{r7, lr}
   1f0e2:	b082      	sub	sp, #8
   1f0e4:	af00      	add	r7, sp, #0
   1f0e6:	6078      	str	r0, [r7, #4]
   1f0e8:	000a      	movs	r2, r1
   1f0ea:	1cfb      	adds	r3, r7, #3
   1f0ec:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   1f0ee:	687b      	ldr	r3, [r7, #4]
   1f0f0:	4a4d      	ldr	r2, [pc, #308]	; (1f228 <_sercom_get_default_pad+0x148>)
   1f0f2:	4293      	cmp	r3, r2
   1f0f4:	d03f      	beq.n	1f176 <_sercom_get_default_pad+0x96>
   1f0f6:	4a4c      	ldr	r2, [pc, #304]	; (1f228 <_sercom_get_default_pad+0x148>)
   1f0f8:	4293      	cmp	r3, r2
   1f0fa:	d806      	bhi.n	1f10a <_sercom_get_default_pad+0x2a>
   1f0fc:	4a4b      	ldr	r2, [pc, #300]	; (1f22c <_sercom_get_default_pad+0x14c>)
   1f0fe:	4293      	cmp	r3, r2
   1f100:	d00f      	beq.n	1f122 <_sercom_get_default_pad+0x42>
   1f102:	4a4b      	ldr	r2, [pc, #300]	; (1f230 <_sercom_get_default_pad+0x150>)
   1f104:	4293      	cmp	r3, r2
   1f106:	d021      	beq.n	1f14c <_sercom_get_default_pad+0x6c>
   1f108:	e089      	b.n	1f21e <_sercom_get_default_pad+0x13e>
   1f10a:	4a4a      	ldr	r2, [pc, #296]	; (1f234 <_sercom_get_default_pad+0x154>)
   1f10c:	4293      	cmp	r3, r2
   1f10e:	d100      	bne.n	1f112 <_sercom_get_default_pad+0x32>
   1f110:	e05b      	b.n	1f1ca <_sercom_get_default_pad+0xea>
   1f112:	4a49      	ldr	r2, [pc, #292]	; (1f238 <_sercom_get_default_pad+0x158>)
   1f114:	4293      	cmp	r3, r2
   1f116:	d100      	bne.n	1f11a <_sercom_get_default_pad+0x3a>
   1f118:	e06c      	b.n	1f1f4 <_sercom_get_default_pad+0x114>
   1f11a:	4a48      	ldr	r2, [pc, #288]	; (1f23c <_sercom_get_default_pad+0x15c>)
   1f11c:	4293      	cmp	r3, r2
   1f11e:	d03f      	beq.n	1f1a0 <_sercom_get_default_pad+0xc0>
   1f120:	e07d      	b.n	1f21e <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1f122:	1cfb      	adds	r3, r7, #3
   1f124:	781b      	ldrb	r3, [r3, #0]
   1f126:	2b01      	cmp	r3, #1
   1f128:	d00a      	beq.n	1f140 <_sercom_get_default_pad+0x60>
   1f12a:	dc02      	bgt.n	1f132 <_sercom_get_default_pad+0x52>
   1f12c:	2b00      	cmp	r3, #0
   1f12e:	d005      	beq.n	1f13c <_sercom_get_default_pad+0x5c>
   1f130:	e075      	b.n	1f21e <_sercom_get_default_pad+0x13e>
   1f132:	2b02      	cmp	r3, #2
   1f134:	d006      	beq.n	1f144 <_sercom_get_default_pad+0x64>
   1f136:	2b03      	cmp	r3, #3
   1f138:	d006      	beq.n	1f148 <_sercom_get_default_pad+0x68>
   1f13a:	e070      	b.n	1f21e <_sercom_get_default_pad+0x13e>
   1f13c:	4b40      	ldr	r3, [pc, #256]	; (1f240 <_sercom_get_default_pad+0x160>)
   1f13e:	e06f      	b.n	1f220 <_sercom_get_default_pad+0x140>
   1f140:	4b40      	ldr	r3, [pc, #256]	; (1f244 <_sercom_get_default_pad+0x164>)
   1f142:	e06d      	b.n	1f220 <_sercom_get_default_pad+0x140>
   1f144:	4b40      	ldr	r3, [pc, #256]	; (1f248 <_sercom_get_default_pad+0x168>)
   1f146:	e06b      	b.n	1f220 <_sercom_get_default_pad+0x140>
   1f148:	4b40      	ldr	r3, [pc, #256]	; (1f24c <_sercom_get_default_pad+0x16c>)
   1f14a:	e069      	b.n	1f220 <_sercom_get_default_pad+0x140>
   1f14c:	1cfb      	adds	r3, r7, #3
   1f14e:	781b      	ldrb	r3, [r3, #0]
   1f150:	2b01      	cmp	r3, #1
   1f152:	d00a      	beq.n	1f16a <_sercom_get_default_pad+0x8a>
   1f154:	dc02      	bgt.n	1f15c <_sercom_get_default_pad+0x7c>
   1f156:	2b00      	cmp	r3, #0
   1f158:	d005      	beq.n	1f166 <_sercom_get_default_pad+0x86>
   1f15a:	e060      	b.n	1f21e <_sercom_get_default_pad+0x13e>
   1f15c:	2b02      	cmp	r3, #2
   1f15e:	d006      	beq.n	1f16e <_sercom_get_default_pad+0x8e>
   1f160:	2b03      	cmp	r3, #3
   1f162:	d006      	beq.n	1f172 <_sercom_get_default_pad+0x92>
   1f164:	e05b      	b.n	1f21e <_sercom_get_default_pad+0x13e>
   1f166:	2303      	movs	r3, #3
   1f168:	e05a      	b.n	1f220 <_sercom_get_default_pad+0x140>
   1f16a:	4b39      	ldr	r3, [pc, #228]	; (1f250 <_sercom_get_default_pad+0x170>)
   1f16c:	e058      	b.n	1f220 <_sercom_get_default_pad+0x140>
   1f16e:	4b39      	ldr	r3, [pc, #228]	; (1f254 <_sercom_get_default_pad+0x174>)
   1f170:	e056      	b.n	1f220 <_sercom_get_default_pad+0x140>
   1f172:	4b39      	ldr	r3, [pc, #228]	; (1f258 <_sercom_get_default_pad+0x178>)
   1f174:	e054      	b.n	1f220 <_sercom_get_default_pad+0x140>
   1f176:	1cfb      	adds	r3, r7, #3
   1f178:	781b      	ldrb	r3, [r3, #0]
   1f17a:	2b01      	cmp	r3, #1
   1f17c:	d00a      	beq.n	1f194 <_sercom_get_default_pad+0xb4>
   1f17e:	dc02      	bgt.n	1f186 <_sercom_get_default_pad+0xa6>
   1f180:	2b00      	cmp	r3, #0
   1f182:	d005      	beq.n	1f190 <_sercom_get_default_pad+0xb0>
   1f184:	e04b      	b.n	1f21e <_sercom_get_default_pad+0x13e>
   1f186:	2b02      	cmp	r3, #2
   1f188:	d006      	beq.n	1f198 <_sercom_get_default_pad+0xb8>
   1f18a:	2b03      	cmp	r3, #3
   1f18c:	d006      	beq.n	1f19c <_sercom_get_default_pad+0xbc>
   1f18e:	e046      	b.n	1f21e <_sercom_get_default_pad+0x13e>
   1f190:	4b32      	ldr	r3, [pc, #200]	; (1f25c <_sercom_get_default_pad+0x17c>)
   1f192:	e045      	b.n	1f220 <_sercom_get_default_pad+0x140>
   1f194:	4b32      	ldr	r3, [pc, #200]	; (1f260 <_sercom_get_default_pad+0x180>)
   1f196:	e043      	b.n	1f220 <_sercom_get_default_pad+0x140>
   1f198:	4b32      	ldr	r3, [pc, #200]	; (1f264 <_sercom_get_default_pad+0x184>)
   1f19a:	e041      	b.n	1f220 <_sercom_get_default_pad+0x140>
   1f19c:	4b32      	ldr	r3, [pc, #200]	; (1f268 <_sercom_get_default_pad+0x188>)
   1f19e:	e03f      	b.n	1f220 <_sercom_get_default_pad+0x140>
   1f1a0:	1cfb      	adds	r3, r7, #3
   1f1a2:	781b      	ldrb	r3, [r3, #0]
   1f1a4:	2b01      	cmp	r3, #1
   1f1a6:	d00a      	beq.n	1f1be <_sercom_get_default_pad+0xde>
   1f1a8:	dc02      	bgt.n	1f1b0 <_sercom_get_default_pad+0xd0>
   1f1aa:	2b00      	cmp	r3, #0
   1f1ac:	d005      	beq.n	1f1ba <_sercom_get_default_pad+0xda>
   1f1ae:	e036      	b.n	1f21e <_sercom_get_default_pad+0x13e>
   1f1b0:	2b02      	cmp	r3, #2
   1f1b2:	d006      	beq.n	1f1c2 <_sercom_get_default_pad+0xe2>
   1f1b4:	2b03      	cmp	r3, #3
   1f1b6:	d006      	beq.n	1f1c6 <_sercom_get_default_pad+0xe6>
   1f1b8:	e031      	b.n	1f21e <_sercom_get_default_pad+0x13e>
   1f1ba:	4b2c      	ldr	r3, [pc, #176]	; (1f26c <_sercom_get_default_pad+0x18c>)
   1f1bc:	e030      	b.n	1f220 <_sercom_get_default_pad+0x140>
   1f1be:	4b2c      	ldr	r3, [pc, #176]	; (1f270 <_sercom_get_default_pad+0x190>)
   1f1c0:	e02e      	b.n	1f220 <_sercom_get_default_pad+0x140>
   1f1c2:	4b2c      	ldr	r3, [pc, #176]	; (1f274 <_sercom_get_default_pad+0x194>)
   1f1c4:	e02c      	b.n	1f220 <_sercom_get_default_pad+0x140>
   1f1c6:	4b2c      	ldr	r3, [pc, #176]	; (1f278 <_sercom_get_default_pad+0x198>)
   1f1c8:	e02a      	b.n	1f220 <_sercom_get_default_pad+0x140>
   1f1ca:	1cfb      	adds	r3, r7, #3
   1f1cc:	781b      	ldrb	r3, [r3, #0]
   1f1ce:	2b01      	cmp	r3, #1
   1f1d0:	d00a      	beq.n	1f1e8 <_sercom_get_default_pad+0x108>
   1f1d2:	dc02      	bgt.n	1f1da <_sercom_get_default_pad+0xfa>
   1f1d4:	2b00      	cmp	r3, #0
   1f1d6:	d005      	beq.n	1f1e4 <_sercom_get_default_pad+0x104>
   1f1d8:	e021      	b.n	1f21e <_sercom_get_default_pad+0x13e>
   1f1da:	2b02      	cmp	r3, #2
   1f1dc:	d006      	beq.n	1f1ec <_sercom_get_default_pad+0x10c>
   1f1de:	2b03      	cmp	r3, #3
   1f1e0:	d006      	beq.n	1f1f0 <_sercom_get_default_pad+0x110>
   1f1e2:	e01c      	b.n	1f21e <_sercom_get_default_pad+0x13e>
   1f1e4:	4b25      	ldr	r3, [pc, #148]	; (1f27c <_sercom_get_default_pad+0x19c>)
   1f1e6:	e01b      	b.n	1f220 <_sercom_get_default_pad+0x140>
   1f1e8:	4b25      	ldr	r3, [pc, #148]	; (1f280 <_sercom_get_default_pad+0x1a0>)
   1f1ea:	e019      	b.n	1f220 <_sercom_get_default_pad+0x140>
   1f1ec:	4b25      	ldr	r3, [pc, #148]	; (1f284 <_sercom_get_default_pad+0x1a4>)
   1f1ee:	e017      	b.n	1f220 <_sercom_get_default_pad+0x140>
   1f1f0:	4b25      	ldr	r3, [pc, #148]	; (1f288 <_sercom_get_default_pad+0x1a8>)
   1f1f2:	e015      	b.n	1f220 <_sercom_get_default_pad+0x140>
   1f1f4:	1cfb      	adds	r3, r7, #3
   1f1f6:	781b      	ldrb	r3, [r3, #0]
   1f1f8:	2b01      	cmp	r3, #1
   1f1fa:	d00a      	beq.n	1f212 <_sercom_get_default_pad+0x132>
   1f1fc:	dc02      	bgt.n	1f204 <_sercom_get_default_pad+0x124>
   1f1fe:	2b00      	cmp	r3, #0
   1f200:	d005      	beq.n	1f20e <_sercom_get_default_pad+0x12e>
   1f202:	e00c      	b.n	1f21e <_sercom_get_default_pad+0x13e>
   1f204:	2b02      	cmp	r3, #2
   1f206:	d006      	beq.n	1f216 <_sercom_get_default_pad+0x136>
   1f208:	2b03      	cmp	r3, #3
   1f20a:	d006      	beq.n	1f21a <_sercom_get_default_pad+0x13a>
   1f20c:	e007      	b.n	1f21e <_sercom_get_default_pad+0x13e>
   1f20e:	4b1f      	ldr	r3, [pc, #124]	; (1f28c <_sercom_get_default_pad+0x1ac>)
   1f210:	e006      	b.n	1f220 <_sercom_get_default_pad+0x140>
   1f212:	4b1f      	ldr	r3, [pc, #124]	; (1f290 <_sercom_get_default_pad+0x1b0>)
   1f214:	e004      	b.n	1f220 <_sercom_get_default_pad+0x140>
   1f216:	4b1f      	ldr	r3, [pc, #124]	; (1f294 <_sercom_get_default_pad+0x1b4>)
   1f218:	e002      	b.n	1f220 <_sercom_get_default_pad+0x140>
   1f21a:	4b1f      	ldr	r3, [pc, #124]	; (1f298 <_sercom_get_default_pad+0x1b8>)
   1f21c:	e000      	b.n	1f220 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   1f21e:	2300      	movs	r3, #0
}
   1f220:	0018      	movs	r0, r3
   1f222:	46bd      	mov	sp, r7
   1f224:	b002      	add	sp, #8
   1f226:	bd80      	pop	{r7, pc}
   1f228:	42001000 	.word	0x42001000
   1f22c:	42000800 	.word	0x42000800
   1f230:	42000c00 	.word	0x42000c00
   1f234:	42001800 	.word	0x42001800
   1f238:	42001c00 	.word	0x42001c00
   1f23c:	42001400 	.word	0x42001400
   1f240:	00040003 	.word	0x00040003
   1f244:	00050003 	.word	0x00050003
   1f248:	00060003 	.word	0x00060003
   1f24c:	00070003 	.word	0x00070003
   1f250:	00010003 	.word	0x00010003
   1f254:	001e0003 	.word	0x001e0003
   1f258:	001f0003 	.word	0x001f0003
   1f25c:	00080003 	.word	0x00080003
   1f260:	00090003 	.word	0x00090003
   1f264:	000a0003 	.word	0x000a0003
   1f268:	000b0003 	.word	0x000b0003
   1f26c:	00100003 	.word	0x00100003
   1f270:	00110003 	.word	0x00110003
   1f274:	00120003 	.word	0x00120003
   1f278:	00130003 	.word	0x00130003
   1f27c:	000c0003 	.word	0x000c0003
   1f280:	000d0003 	.word	0x000d0003
   1f284:	000e0003 	.word	0x000e0003
   1f288:	000f0003 	.word	0x000f0003
   1f28c:	00160003 	.word	0x00160003
   1f290:	00170003 	.word	0x00170003
   1f294:	00180003 	.word	0x00180003
   1f298:	00190003 	.word	0x00190003

0001f29c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   1f29c:	b590      	push	{r4, r7, lr}
   1f29e:	b08b      	sub	sp, #44	; 0x2c
   1f2a0:	af00      	add	r7, sp, #0
   1f2a2:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   1f2a4:	230c      	movs	r3, #12
   1f2a6:	18fb      	adds	r3, r7, r3
   1f2a8:	4a0f      	ldr	r2, [pc, #60]	; (1f2e8 <_sercom_get_sercom_inst_index+0x4c>)
   1f2aa:	ca13      	ldmia	r2!, {r0, r1, r4}
   1f2ac:	c313      	stmia	r3!, {r0, r1, r4}
   1f2ae:	ca13      	ldmia	r2!, {r0, r1, r4}
   1f2b0:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1f2b2:	2300      	movs	r3, #0
   1f2b4:	627b      	str	r3, [r7, #36]	; 0x24
   1f2b6:	e00e      	b.n	1f2d6 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   1f2b8:	230c      	movs	r3, #12
   1f2ba:	18fb      	adds	r3, r7, r3
   1f2bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1f2be:	0092      	lsls	r2, r2, #2
   1f2c0:	58d3      	ldr	r3, [r2, r3]
   1f2c2:	001a      	movs	r2, r3
   1f2c4:	687b      	ldr	r3, [r7, #4]
   1f2c6:	429a      	cmp	r2, r3
   1f2c8:	d102      	bne.n	1f2d0 <_sercom_get_sercom_inst_index+0x34>
			return i;
   1f2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f2cc:	b2db      	uxtb	r3, r3
   1f2ce:	e006      	b.n	1f2de <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1f2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f2d2:	3301      	adds	r3, #1
   1f2d4:	627b      	str	r3, [r7, #36]	; 0x24
   1f2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f2d8:	2b05      	cmp	r3, #5
   1f2da:	d9ed      	bls.n	1f2b8 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   1f2dc:	2300      	movs	r3, #0
}
   1f2de:	0018      	movs	r0, r3
   1f2e0:	46bd      	mov	sp, r7
   1f2e2:	b00b      	add	sp, #44	; 0x2c
   1f2e4:	bd90      	pop	{r4, r7, pc}
   1f2e6:	46c0      	nop			; (mov r8, r8)
   1f2e8:	0002b618 	.word	0x0002b618

0001f2ec <system_cpu_clock_get_hz>:
{
   1f2ec:	b580      	push	{r7, lr}
   1f2ee:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   1f2f0:	2000      	movs	r0, #0
   1f2f2:	4b05      	ldr	r3, [pc, #20]	; (1f308 <system_cpu_clock_get_hz+0x1c>)
   1f2f4:	4798      	blx	r3
   1f2f6:	0002      	movs	r2, r0
   1f2f8:	4b04      	ldr	r3, [pc, #16]	; (1f30c <system_cpu_clock_get_hz+0x20>)
   1f2fa:	7a1b      	ldrb	r3, [r3, #8]
   1f2fc:	b2db      	uxtb	r3, r3
   1f2fe:	40da      	lsrs	r2, r3
   1f300:	0013      	movs	r3, r2
}
   1f302:	0018      	movs	r0, r3
   1f304:	46bd      	mov	sp, r7
   1f306:	bd80      	pop	{r7, pc}
   1f308:	0002505d 	.word	0x0002505d
   1f30c:	40000400 	.word	0x40000400

0001f310 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   1f310:	b580      	push	{r7, lr}
   1f312:	b084      	sub	sp, #16
   1f314:	af00      	add	r7, sp, #0
   1f316:	60f8      	str	r0, [r7, #12]
   1f318:	60b9      	str	r1, [r7, #8]
   1f31a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   1f31c:	68fb      	ldr	r3, [r7, #12]
   1f31e:	3b04      	subs	r3, #4
   1f320:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1f322:	68fb      	ldr	r3, [r7, #12]
   1f324:	2280      	movs	r2, #128	; 0x80
   1f326:	0452      	lsls	r2, r2, #17
   1f328:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1f32a:	68fb      	ldr	r3, [r7, #12]
   1f32c:	3b04      	subs	r3, #4
   1f32e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   1f330:	68ba      	ldr	r2, [r7, #8]
   1f332:	68fb      	ldr	r3, [r7, #12]
   1f334:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1f336:	68fb      	ldr	r3, [r7, #12]
   1f338:	3b04      	subs	r3, #4
   1f33a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   1f33c:	4a08      	ldr	r2, [pc, #32]	; (1f360 <pxPortInitialiseStack+0x50>)
   1f33e:	68fb      	ldr	r3, [r7, #12]
   1f340:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   1f342:	68fb      	ldr	r3, [r7, #12]
   1f344:	3b14      	subs	r3, #20
   1f346:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   1f348:	687a      	ldr	r2, [r7, #4]
   1f34a:	68fb      	ldr	r3, [r7, #12]
   1f34c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   1f34e:	68fb      	ldr	r3, [r7, #12]
   1f350:	3b20      	subs	r3, #32
   1f352:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   1f354:	68fb      	ldr	r3, [r7, #12]
}
   1f356:	0018      	movs	r0, r3
   1f358:	46bd      	mov	sp, r7
   1f35a:	b004      	add	sp, #16
   1f35c:	bd80      	pop	{r7, pc}
   1f35e:	46c0      	nop			; (mov r8, r8)
   1f360:	0001f365 	.word	0x0001f365

0001f364 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   1f364:	b580      	push	{r7, lr}
   1f366:	b082      	sub	sp, #8
   1f368:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   1f36a:	2300      	movs	r3, #0
   1f36c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1f36e:	4b07      	ldr	r3, [pc, #28]	; (1f38c <prvTaskExitError+0x28>)
   1f370:	681b      	ldr	r3, [r3, #0]
   1f372:	3301      	adds	r3, #1
   1f374:	d001      	beq.n	1f37a <prvTaskExitError+0x16>
   1f376:	b672      	cpsid	i
   1f378:	e7fe      	b.n	1f378 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   1f37a:	b672      	cpsid	i
	while( ulDummy == 0 )
   1f37c:	46c0      	nop			; (mov r8, r8)
   1f37e:	687b      	ldr	r3, [r7, #4]
   1f380:	2b00      	cmp	r3, #0
   1f382:	d0fc      	beq.n	1f37e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   1f384:	46c0      	nop			; (mov r8, r8)
   1f386:	46bd      	mov	sp, r7
   1f388:	b002      	add	sp, #8
   1f38a:	bd80      	pop	{r7, pc}
   1f38c:	20000010 	.word	0x20000010

0001f390 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   1f390:	b580      	push	{r7, lr}
   1f392:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   1f394:	46c0      	nop			; (mov r8, r8)
   1f396:	46bd      	mov	sp, r7
   1f398:	bd80      	pop	{r7, pc}
   1f39a:	0000      	movs	r0, r0
   1f39c:	0000      	movs	r0, r0
	...

0001f3a0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   1f3a0:	4a0b      	ldr	r2, [pc, #44]	; (1f3d0 <pxCurrentTCBConst2>)
   1f3a2:	6813      	ldr	r3, [r2, #0]
   1f3a4:	6818      	ldr	r0, [r3, #0]
   1f3a6:	3020      	adds	r0, #32
   1f3a8:	f380 8809 	msr	PSP, r0
   1f3ac:	2002      	movs	r0, #2
   1f3ae:	f380 8814 	msr	CONTROL, r0
   1f3b2:	f3bf 8f6f 	isb	sy
   1f3b6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   1f3b8:	46ae      	mov	lr, r5
   1f3ba:	bc08      	pop	{r3}
   1f3bc:	bc04      	pop	{r2}
   1f3be:	b662      	cpsie	i
   1f3c0:	4718      	bx	r3
   1f3c2:	46c0      	nop			; (mov r8, r8)
   1f3c4:	46c0      	nop			; (mov r8, r8)
   1f3c6:	46c0      	nop			; (mov r8, r8)
   1f3c8:	46c0      	nop			; (mov r8, r8)
   1f3ca:	46c0      	nop			; (mov r8, r8)
   1f3cc:	46c0      	nop			; (mov r8, r8)
   1f3ce:	46c0      	nop			; (mov r8, r8)

0001f3d0 <pxCurrentTCBConst2>:
   1f3d0:	200002b8 	.word	0x200002b8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   1f3d4:	46c0      	nop			; (mov r8, r8)
   1f3d6:	46c0      	nop			; (mov r8, r8)

0001f3d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   1f3d8:	b580      	push	{r7, lr}
   1f3da:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   1f3dc:	4b0e      	ldr	r3, [pc, #56]	; (1f418 <xPortStartScheduler+0x40>)
   1f3de:	4a0e      	ldr	r2, [pc, #56]	; (1f418 <xPortStartScheduler+0x40>)
   1f3e0:	6812      	ldr	r2, [r2, #0]
   1f3e2:	21ff      	movs	r1, #255	; 0xff
   1f3e4:	0409      	lsls	r1, r1, #16
   1f3e6:	430a      	orrs	r2, r1
   1f3e8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   1f3ea:	4b0b      	ldr	r3, [pc, #44]	; (1f418 <xPortStartScheduler+0x40>)
   1f3ec:	4a0a      	ldr	r2, [pc, #40]	; (1f418 <xPortStartScheduler+0x40>)
   1f3ee:	6812      	ldr	r2, [r2, #0]
   1f3f0:	21ff      	movs	r1, #255	; 0xff
   1f3f2:	0609      	lsls	r1, r1, #24
   1f3f4:	430a      	orrs	r2, r1
   1f3f6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   1f3f8:	4b08      	ldr	r3, [pc, #32]	; (1f41c <xPortStartScheduler+0x44>)
   1f3fa:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   1f3fc:	4b08      	ldr	r3, [pc, #32]	; (1f420 <xPortStartScheduler+0x48>)
   1f3fe:	2200      	movs	r2, #0
   1f400:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   1f402:	4b08      	ldr	r3, [pc, #32]	; (1f424 <xPortStartScheduler+0x4c>)
   1f404:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   1f406:	4b08      	ldr	r3, [pc, #32]	; (1f428 <xPortStartScheduler+0x50>)
   1f408:	4798      	blx	r3
	prvTaskExitError();
   1f40a:	4b08      	ldr	r3, [pc, #32]	; (1f42c <xPortStartScheduler+0x54>)
   1f40c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   1f40e:	2300      	movs	r3, #0
}
   1f410:	0018      	movs	r0, r3
   1f412:	46bd      	mov	sp, r7
   1f414:	bd80      	pop	{r7, pc}
   1f416:	46c0      	nop			; (mov r8, r8)
   1f418:	e000ed20 	.word	0xe000ed20
   1f41c:	0001f549 	.word	0x0001f549
   1f420:	20000010 	.word	0x20000010
   1f424:	0001f3a1 	.word	0x0001f3a1
   1f428:	00020b7d 	.word	0x00020b7d
   1f42c:	0001f365 	.word	0x0001f365

0001f430 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   1f430:	b580      	push	{r7, lr}
   1f432:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   1f434:	4b05      	ldr	r3, [pc, #20]	; (1f44c <vPortYield+0x1c>)
   1f436:	2280      	movs	r2, #128	; 0x80
   1f438:	0552      	lsls	r2, r2, #21
   1f43a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
   1f43c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1f440:	f3bf 8f6f 	isb	sy
}
   1f444:	46c0      	nop			; (mov r8, r8)
   1f446:	46bd      	mov	sp, r7
   1f448:	bd80      	pop	{r7, pc}
   1f44a:	46c0      	nop			; (mov r8, r8)
   1f44c:	e000ed04 	.word	0xe000ed04

0001f450 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   1f450:	b580      	push	{r7, lr}
   1f452:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   1f454:	b672      	cpsid	i
    uxCriticalNesting++;
   1f456:	4b06      	ldr	r3, [pc, #24]	; (1f470 <vPortEnterCritical+0x20>)
   1f458:	681b      	ldr	r3, [r3, #0]
   1f45a:	1c5a      	adds	r2, r3, #1
   1f45c:	4b04      	ldr	r3, [pc, #16]	; (1f470 <vPortEnterCritical+0x20>)
   1f45e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   1f460:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1f464:	f3bf 8f6f 	isb	sy
}
   1f468:	46c0      	nop			; (mov r8, r8)
   1f46a:	46bd      	mov	sp, r7
   1f46c:	bd80      	pop	{r7, pc}
   1f46e:	46c0      	nop			; (mov r8, r8)
   1f470:	20000010 	.word	0x20000010

0001f474 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   1f474:	b580      	push	{r7, lr}
   1f476:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   1f478:	4b09      	ldr	r3, [pc, #36]	; (1f4a0 <vPortExitCritical+0x2c>)
   1f47a:	681b      	ldr	r3, [r3, #0]
   1f47c:	2b00      	cmp	r3, #0
   1f47e:	d101      	bne.n	1f484 <vPortExitCritical+0x10>
   1f480:	b672      	cpsid	i
   1f482:	e7fe      	b.n	1f482 <vPortExitCritical+0xe>
    uxCriticalNesting--;
   1f484:	4b06      	ldr	r3, [pc, #24]	; (1f4a0 <vPortExitCritical+0x2c>)
   1f486:	681b      	ldr	r3, [r3, #0]
   1f488:	1e5a      	subs	r2, r3, #1
   1f48a:	4b05      	ldr	r3, [pc, #20]	; (1f4a0 <vPortExitCritical+0x2c>)
   1f48c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   1f48e:	4b04      	ldr	r3, [pc, #16]	; (1f4a0 <vPortExitCritical+0x2c>)
   1f490:	681b      	ldr	r3, [r3, #0]
   1f492:	2b00      	cmp	r3, #0
   1f494:	d100      	bne.n	1f498 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   1f496:	b662      	cpsie	i
    }
}
   1f498:	46c0      	nop			; (mov r8, r8)
   1f49a:	46bd      	mov	sp, r7
   1f49c:	bd80      	pop	{r7, pc}
   1f49e:	46c0      	nop			; (mov r8, r8)
   1f4a0:	20000010 	.word	0x20000010

0001f4a4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   1f4a4:	f3ef 8010 	mrs	r0, PRIMASK
   1f4a8:	b672      	cpsid	i
   1f4aa:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   1f4ac:	46c0      	nop			; (mov r8, r8)
   1f4ae:	0018      	movs	r0, r3

0001f4b0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   1f4b0:	f380 8810 	msr	PRIMASK, r0
   1f4b4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   1f4b6:	46c0      	nop			; (mov r8, r8)
	...

0001f4c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   1f4c0:	f3ef 8009 	mrs	r0, PSP
   1f4c4:	4b0e      	ldr	r3, [pc, #56]	; (1f500 <pxCurrentTCBConst>)
   1f4c6:	681a      	ldr	r2, [r3, #0]
   1f4c8:	3820      	subs	r0, #32
   1f4ca:	6010      	str	r0, [r2, #0]
   1f4cc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1f4ce:	4644      	mov	r4, r8
   1f4d0:	464d      	mov	r5, r9
   1f4d2:	4656      	mov	r6, sl
   1f4d4:	465f      	mov	r7, fp
   1f4d6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1f4d8:	b508      	push	{r3, lr}
   1f4da:	b672      	cpsid	i
   1f4dc:	f001 fb4e 	bl	20b7c <vTaskSwitchContext>
   1f4e0:	b662      	cpsie	i
   1f4e2:	bc0c      	pop	{r2, r3}
   1f4e4:	6811      	ldr	r1, [r2, #0]
   1f4e6:	6808      	ldr	r0, [r1, #0]
   1f4e8:	3010      	adds	r0, #16
   1f4ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1f4ec:	46a0      	mov	r8, r4
   1f4ee:	46a9      	mov	r9, r5
   1f4f0:	46b2      	mov	sl, r6
   1f4f2:	46bb      	mov	fp, r7
   1f4f4:	f380 8809 	msr	PSP, r0
   1f4f8:	3820      	subs	r0, #32
   1f4fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1f4fc:	4718      	bx	r3
   1f4fe:	46c0      	nop			; (mov r8, r8)

0001f500 <pxCurrentTCBConst>:
   1f500:	200002b8 	.word	0x200002b8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   1f504:	46c0      	nop			; (mov r8, r8)
   1f506:	46c0      	nop			; (mov r8, r8)

0001f508 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   1f508:	b580      	push	{r7, lr}
   1f50a:	b082      	sub	sp, #8
   1f50c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   1f50e:	4b0a      	ldr	r3, [pc, #40]	; (1f538 <SysTick_Handler+0x30>)
   1f510:	4798      	blx	r3
   1f512:	0003      	movs	r3, r0
   1f514:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   1f516:	4b09      	ldr	r3, [pc, #36]	; (1f53c <SysTick_Handler+0x34>)
   1f518:	4798      	blx	r3
   1f51a:	1e03      	subs	r3, r0, #0
   1f51c:	d003      	beq.n	1f526 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   1f51e:	4b08      	ldr	r3, [pc, #32]	; (1f540 <SysTick_Handler+0x38>)
   1f520:	2280      	movs	r2, #128	; 0x80
   1f522:	0552      	lsls	r2, r2, #21
   1f524:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   1f526:	687b      	ldr	r3, [r7, #4]
   1f528:	0018      	movs	r0, r3
   1f52a:	4b06      	ldr	r3, [pc, #24]	; (1f544 <SysTick_Handler+0x3c>)
   1f52c:	4798      	blx	r3
}
   1f52e:	46c0      	nop			; (mov r8, r8)
   1f530:	46bd      	mov	sp, r7
   1f532:	b002      	add	sp, #8
   1f534:	bd80      	pop	{r7, pc}
   1f536:	46c0      	nop			; (mov r8, r8)
   1f538:	0001f4a5 	.word	0x0001f4a5
   1f53c:	00020a09 	.word	0x00020a09
   1f540:	e000ed04 	.word	0xe000ed04
   1f544:	0001f4b1 	.word	0x0001f4b1

0001f548 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   1f548:	b5b0      	push	{r4, r5, r7, lr}
   1f54a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   1f54c:	4b0a      	ldr	r3, [pc, #40]	; (1f578 <prvSetupTimerInterrupt+0x30>)
   1f54e:	2200      	movs	r2, #0
   1f550:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   1f552:	4b0a      	ldr	r3, [pc, #40]	; (1f57c <prvSetupTimerInterrupt+0x34>)
   1f554:	2200      	movs	r2, #0
   1f556:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   1f558:	4c09      	ldr	r4, [pc, #36]	; (1f580 <prvSetupTimerInterrupt+0x38>)
   1f55a:	4b0a      	ldr	r3, [pc, #40]	; (1f584 <prvSetupTimerInterrupt+0x3c>)
   1f55c:	4798      	blx	r3
   1f55e:	4b0a      	ldr	r3, [pc, #40]	; (1f588 <prvSetupTimerInterrupt+0x40>)
   1f560:	22fa      	movs	r2, #250	; 0xfa
   1f562:	0091      	lsls	r1, r2, #2
   1f564:	4798      	blx	r3
   1f566:	0003      	movs	r3, r0
   1f568:	3b01      	subs	r3, #1
   1f56a:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   1f56c:	4b02      	ldr	r3, [pc, #8]	; (1f578 <prvSetupTimerInterrupt+0x30>)
   1f56e:	2207      	movs	r2, #7
   1f570:	601a      	str	r2, [r3, #0]
}
   1f572:	46c0      	nop			; (mov r8, r8)
   1f574:	46bd      	mov	sp, r7
   1f576:	bdb0      	pop	{r4, r5, r7, pc}
   1f578:	e000e010 	.word	0xe000e010
   1f57c:	e000e018 	.word	0xe000e018
   1f580:	e000e014 	.word	0xe000e014
   1f584:	0001f2ed 	.word	0x0001f2ed
   1f588:	00026c7d 	.word	0x00026c7d

0001f58c <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   1f58c:	b580      	push	{r7, lr}
   1f58e:	b084      	sub	sp, #16
   1f590:	af00      	add	r7, sp, #0
   1f592:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
   1f594:	4b07      	ldr	r3, [pc, #28]	; (1f5b4 <pvPortMalloc+0x28>)
   1f596:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
   1f598:	687b      	ldr	r3, [r7, #4]
   1f59a:	0018      	movs	r0, r3
   1f59c:	4b06      	ldr	r3, [pc, #24]	; (1f5b8 <pvPortMalloc+0x2c>)
   1f59e:	4798      	blx	r3
   1f5a0:	0003      	movs	r3, r0
   1f5a2:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   1f5a4:	4b05      	ldr	r3, [pc, #20]	; (1f5bc <pvPortMalloc+0x30>)
   1f5a6:	4798      	blx	r3
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
   1f5a8:	68fb      	ldr	r3, [r7, #12]
}
   1f5aa:	0018      	movs	r0, r3
   1f5ac:	46bd      	mov	sp, r7
   1f5ae:	b004      	add	sp, #16
   1f5b0:	bd80      	pop	{r7, pc}
   1f5b2:	46c0      	nop			; (mov r8, r8)
   1f5b4:	00020881 	.word	0x00020881
   1f5b8:	00029835 	.word	0x00029835
   1f5bc:	00020899 	.word	0x00020899

0001f5c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   1f5c0:	b580      	push	{r7, lr}
   1f5c2:	b082      	sub	sp, #8
   1f5c4:	af00      	add	r7, sp, #0
   1f5c6:	6078      	str	r0, [r7, #4]
	if( pv )
   1f5c8:	687b      	ldr	r3, [r7, #4]
   1f5ca:	2b00      	cmp	r3, #0
   1f5cc:	d007      	beq.n	1f5de <vPortFree+0x1e>
	{
		vTaskSuspendAll();
   1f5ce:	4b06      	ldr	r3, [pc, #24]	; (1f5e8 <vPortFree+0x28>)
   1f5d0:	4798      	blx	r3
		{
			free( pv );
   1f5d2:	687b      	ldr	r3, [r7, #4]
   1f5d4:	0018      	movs	r0, r3
   1f5d6:	4b05      	ldr	r3, [pc, #20]	; (1f5ec <vPortFree+0x2c>)
   1f5d8:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
   1f5da:	4b05      	ldr	r3, [pc, #20]	; (1f5f0 <vPortFree+0x30>)
   1f5dc:	4798      	blx	r3
	}
}
   1f5de:	46c0      	nop			; (mov r8, r8)
   1f5e0:	46bd      	mov	sp, r7
   1f5e2:	b002      	add	sp, #8
   1f5e4:	bd80      	pop	{r7, pc}
   1f5e6:	46c0      	nop			; (mov r8, r8)
   1f5e8:	00020881 	.word	0x00020881
   1f5ec:	00029849 	.word	0x00029849
   1f5f0:	00020899 	.word	0x00020899

0001f5f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   1f5f4:	b580      	push	{r7, lr}
   1f5f6:	b082      	sub	sp, #8
   1f5f8:	af00      	add	r7, sp, #0
   1f5fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1f5fc:	687b      	ldr	r3, [r7, #4]
   1f5fe:	3308      	adds	r3, #8
   1f600:	001a      	movs	r2, r3
   1f602:	687b      	ldr	r3, [r7, #4]
   1f604:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1f606:	687b      	ldr	r3, [r7, #4]
   1f608:	2201      	movs	r2, #1
   1f60a:	4252      	negs	r2, r2
   1f60c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1f60e:	687b      	ldr	r3, [r7, #4]
   1f610:	3308      	adds	r3, #8
   1f612:	001a      	movs	r2, r3
   1f614:	687b      	ldr	r3, [r7, #4]
   1f616:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1f618:	687b      	ldr	r3, [r7, #4]
   1f61a:	3308      	adds	r3, #8
   1f61c:	001a      	movs	r2, r3
   1f61e:	687b      	ldr	r3, [r7, #4]
   1f620:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1f622:	687b      	ldr	r3, [r7, #4]
   1f624:	2200      	movs	r2, #0
   1f626:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   1f628:	46c0      	nop			; (mov r8, r8)
   1f62a:	46bd      	mov	sp, r7
   1f62c:	b002      	add	sp, #8
   1f62e:	bd80      	pop	{r7, pc}

0001f630 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   1f630:	b580      	push	{r7, lr}
   1f632:	b082      	sub	sp, #8
   1f634:	af00      	add	r7, sp, #0
   1f636:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   1f638:	687b      	ldr	r3, [r7, #4]
   1f63a:	2200      	movs	r2, #0
   1f63c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1f63e:	46c0      	nop			; (mov r8, r8)
   1f640:	46bd      	mov	sp, r7
   1f642:	b002      	add	sp, #8
   1f644:	bd80      	pop	{r7, pc}

0001f646 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1f646:	b580      	push	{r7, lr}
   1f648:	b084      	sub	sp, #16
   1f64a:	af00      	add	r7, sp, #0
   1f64c:	6078      	str	r0, [r7, #4]
   1f64e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   1f650:	687b      	ldr	r3, [r7, #4]
   1f652:	685b      	ldr	r3, [r3, #4]
   1f654:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   1f656:	683b      	ldr	r3, [r7, #0]
   1f658:	68fa      	ldr	r2, [r7, #12]
   1f65a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1f65c:	68fb      	ldr	r3, [r7, #12]
   1f65e:	689a      	ldr	r2, [r3, #8]
   1f660:	683b      	ldr	r3, [r7, #0]
   1f662:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   1f664:	68fb      	ldr	r3, [r7, #12]
   1f666:	689b      	ldr	r3, [r3, #8]
   1f668:	683a      	ldr	r2, [r7, #0]
   1f66a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   1f66c:	68fb      	ldr	r3, [r7, #12]
   1f66e:	683a      	ldr	r2, [r7, #0]
   1f670:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1f672:	683b      	ldr	r3, [r7, #0]
   1f674:	687a      	ldr	r2, [r7, #4]
   1f676:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1f678:	687b      	ldr	r3, [r7, #4]
   1f67a:	681b      	ldr	r3, [r3, #0]
   1f67c:	1c5a      	adds	r2, r3, #1
   1f67e:	687b      	ldr	r3, [r7, #4]
   1f680:	601a      	str	r2, [r3, #0]
}
   1f682:	46c0      	nop			; (mov r8, r8)
   1f684:	46bd      	mov	sp, r7
   1f686:	b004      	add	sp, #16
   1f688:	bd80      	pop	{r7, pc}

0001f68a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1f68a:	b580      	push	{r7, lr}
   1f68c:	b084      	sub	sp, #16
   1f68e:	af00      	add	r7, sp, #0
   1f690:	6078      	str	r0, [r7, #4]
   1f692:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   1f694:	683b      	ldr	r3, [r7, #0]
   1f696:	681b      	ldr	r3, [r3, #0]
   1f698:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1f69a:	68bb      	ldr	r3, [r7, #8]
   1f69c:	3301      	adds	r3, #1
   1f69e:	d103      	bne.n	1f6a8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   1f6a0:	687b      	ldr	r3, [r7, #4]
   1f6a2:	691b      	ldr	r3, [r3, #16]
   1f6a4:	60fb      	str	r3, [r7, #12]
   1f6a6:	e00c      	b.n	1f6c2 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1f6a8:	687b      	ldr	r3, [r7, #4]
   1f6aa:	3308      	adds	r3, #8
   1f6ac:	60fb      	str	r3, [r7, #12]
   1f6ae:	e002      	b.n	1f6b6 <vListInsert+0x2c>
   1f6b0:	68fb      	ldr	r3, [r7, #12]
   1f6b2:	685b      	ldr	r3, [r3, #4]
   1f6b4:	60fb      	str	r3, [r7, #12]
   1f6b6:	68fb      	ldr	r3, [r7, #12]
   1f6b8:	685b      	ldr	r3, [r3, #4]
   1f6ba:	681a      	ldr	r2, [r3, #0]
   1f6bc:	68bb      	ldr	r3, [r7, #8]
   1f6be:	429a      	cmp	r2, r3
   1f6c0:	d9f6      	bls.n	1f6b0 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   1f6c2:	68fb      	ldr	r3, [r7, #12]
   1f6c4:	685a      	ldr	r2, [r3, #4]
   1f6c6:	683b      	ldr	r3, [r7, #0]
   1f6c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1f6ca:	683b      	ldr	r3, [r7, #0]
   1f6cc:	685b      	ldr	r3, [r3, #4]
   1f6ce:	683a      	ldr	r2, [r7, #0]
   1f6d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1f6d2:	683b      	ldr	r3, [r7, #0]
   1f6d4:	68fa      	ldr	r2, [r7, #12]
   1f6d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   1f6d8:	68fb      	ldr	r3, [r7, #12]
   1f6da:	683a      	ldr	r2, [r7, #0]
   1f6dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1f6de:	683b      	ldr	r3, [r7, #0]
   1f6e0:	687a      	ldr	r2, [r7, #4]
   1f6e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1f6e4:	687b      	ldr	r3, [r7, #4]
   1f6e6:	681b      	ldr	r3, [r3, #0]
   1f6e8:	1c5a      	adds	r2, r3, #1
   1f6ea:	687b      	ldr	r3, [r7, #4]
   1f6ec:	601a      	str	r2, [r3, #0]
}
   1f6ee:	46c0      	nop			; (mov r8, r8)
   1f6f0:	46bd      	mov	sp, r7
   1f6f2:	b004      	add	sp, #16
   1f6f4:	bd80      	pop	{r7, pc}

0001f6f6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1f6f6:	b580      	push	{r7, lr}
   1f6f8:	b084      	sub	sp, #16
   1f6fa:	af00      	add	r7, sp, #0
   1f6fc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   1f6fe:	687b      	ldr	r3, [r7, #4]
   1f700:	691b      	ldr	r3, [r3, #16]
   1f702:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1f704:	687b      	ldr	r3, [r7, #4]
   1f706:	685b      	ldr	r3, [r3, #4]
   1f708:	687a      	ldr	r2, [r7, #4]
   1f70a:	6892      	ldr	r2, [r2, #8]
   1f70c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   1f70e:	687b      	ldr	r3, [r7, #4]
   1f710:	689b      	ldr	r3, [r3, #8]
   1f712:	687a      	ldr	r2, [r7, #4]
   1f714:	6852      	ldr	r2, [r2, #4]
   1f716:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1f718:	68fb      	ldr	r3, [r7, #12]
   1f71a:	685a      	ldr	r2, [r3, #4]
   1f71c:	687b      	ldr	r3, [r7, #4]
   1f71e:	429a      	cmp	r2, r3
   1f720:	d103      	bne.n	1f72a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1f722:	687b      	ldr	r3, [r7, #4]
   1f724:	689a      	ldr	r2, [r3, #8]
   1f726:	68fb      	ldr	r3, [r7, #12]
   1f728:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   1f72a:	687b      	ldr	r3, [r7, #4]
   1f72c:	2200      	movs	r2, #0
   1f72e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   1f730:	68fb      	ldr	r3, [r7, #12]
   1f732:	681b      	ldr	r3, [r3, #0]
   1f734:	1e5a      	subs	r2, r3, #1
   1f736:	68fb      	ldr	r3, [r7, #12]
   1f738:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   1f73a:	68fb      	ldr	r3, [r7, #12]
   1f73c:	681b      	ldr	r3, [r3, #0]
}
   1f73e:	0018      	movs	r0, r3
   1f740:	46bd      	mov	sp, r7
   1f742:	b004      	add	sp, #16
   1f744:	bd80      	pop	{r7, pc}
	...

0001f748 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   1f748:	b580      	push	{r7, lr}
   1f74a:	b084      	sub	sp, #16
   1f74c:	af00      	add	r7, sp, #0
   1f74e:	6078      	str	r0, [r7, #4]
   1f750:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1f752:	687b      	ldr	r3, [r7, #4]
   1f754:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   1f756:	68fb      	ldr	r3, [r7, #12]
   1f758:	2b00      	cmp	r3, #0
   1f75a:	d101      	bne.n	1f760 <xQueueGenericReset+0x18>
   1f75c:	b672      	cpsid	i
   1f75e:	e7fe      	b.n	1f75e <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   1f760:	4b23      	ldr	r3, [pc, #140]	; (1f7f0 <xQueueGenericReset+0xa8>)
   1f762:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   1f764:	68fb      	ldr	r3, [r7, #12]
   1f766:	681a      	ldr	r2, [r3, #0]
   1f768:	68fb      	ldr	r3, [r7, #12]
   1f76a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1f76c:	68fb      	ldr	r3, [r7, #12]
   1f76e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f770:	434b      	muls	r3, r1
   1f772:	18d2      	adds	r2, r2, r3
   1f774:	68fb      	ldr	r3, [r7, #12]
   1f776:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1f778:	68fb      	ldr	r3, [r7, #12]
   1f77a:	2200      	movs	r2, #0
   1f77c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1f77e:	68fb      	ldr	r3, [r7, #12]
   1f780:	681a      	ldr	r2, [r3, #0]
   1f782:	68fb      	ldr	r3, [r7, #12]
   1f784:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   1f786:	68fb      	ldr	r3, [r7, #12]
   1f788:	681a      	ldr	r2, [r3, #0]
   1f78a:	68fb      	ldr	r3, [r7, #12]
   1f78c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1f78e:	1e59      	subs	r1, r3, #1
   1f790:	68fb      	ldr	r3, [r7, #12]
   1f792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f794:	434b      	muls	r3, r1
   1f796:	18d2      	adds	r2, r2, r3
   1f798:	68fb      	ldr	r3, [r7, #12]
   1f79a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1f79c:	68fb      	ldr	r3, [r7, #12]
   1f79e:	2244      	movs	r2, #68	; 0x44
   1f7a0:	21ff      	movs	r1, #255	; 0xff
   1f7a2:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   1f7a4:	68fb      	ldr	r3, [r7, #12]
   1f7a6:	2245      	movs	r2, #69	; 0x45
   1f7a8:	21ff      	movs	r1, #255	; 0xff
   1f7aa:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   1f7ac:	683b      	ldr	r3, [r7, #0]
   1f7ae:	2b00      	cmp	r3, #0
   1f7b0:	d10d      	bne.n	1f7ce <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1f7b2:	68fb      	ldr	r3, [r7, #12]
   1f7b4:	691b      	ldr	r3, [r3, #16]
   1f7b6:	2b00      	cmp	r3, #0
   1f7b8:	d013      	beq.n	1f7e2 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1f7ba:	68fb      	ldr	r3, [r7, #12]
   1f7bc:	3310      	adds	r3, #16
   1f7be:	0018      	movs	r0, r3
   1f7c0:	4b0c      	ldr	r3, [pc, #48]	; (1f7f4 <xQueueGenericReset+0xac>)
   1f7c2:	4798      	blx	r3
   1f7c4:	1e03      	subs	r3, r0, #0
   1f7c6:	d00c      	beq.n	1f7e2 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   1f7c8:	4b0b      	ldr	r3, [pc, #44]	; (1f7f8 <xQueueGenericReset+0xb0>)
   1f7ca:	4798      	blx	r3
   1f7cc:	e009      	b.n	1f7e2 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1f7ce:	68fb      	ldr	r3, [r7, #12]
   1f7d0:	3310      	adds	r3, #16
   1f7d2:	0018      	movs	r0, r3
   1f7d4:	4b09      	ldr	r3, [pc, #36]	; (1f7fc <xQueueGenericReset+0xb4>)
   1f7d6:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1f7d8:	68fb      	ldr	r3, [r7, #12]
   1f7da:	3324      	adds	r3, #36	; 0x24
   1f7dc:	0018      	movs	r0, r3
   1f7de:	4b07      	ldr	r3, [pc, #28]	; (1f7fc <xQueueGenericReset+0xb4>)
   1f7e0:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   1f7e2:	4b07      	ldr	r3, [pc, #28]	; (1f800 <xQueueGenericReset+0xb8>)
   1f7e4:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   1f7e6:	2301      	movs	r3, #1
}
   1f7e8:	0018      	movs	r0, r3
   1f7ea:	46bd      	mov	sp, r7
   1f7ec:	b004      	add	sp, #16
   1f7ee:	bd80      	pop	{r7, pc}
   1f7f0:	0001f451 	.word	0x0001f451
   1f7f4:	00020cb9 	.word	0x00020cb9
   1f7f8:	0001f431 	.word	0x0001f431
   1f7fc:	0001f5f5 	.word	0x0001f5f5
   1f800:	0001f475 	.word	0x0001f475

0001f804 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   1f804:	b590      	push	{r4, r7, lr}
   1f806:	b08b      	sub	sp, #44	; 0x2c
   1f808:	af02      	add	r7, sp, #8
   1f80a:	60f8      	str	r0, [r7, #12]
   1f80c:	60b9      	str	r1, [r7, #8]
   1f80e:	1dfb      	adds	r3, r7, #7
   1f810:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1f812:	68fb      	ldr	r3, [r7, #12]
   1f814:	2b00      	cmp	r3, #0
   1f816:	d101      	bne.n	1f81c <xQueueGenericCreate+0x18>
   1f818:	b672      	cpsid	i
   1f81a:	e7fe      	b.n	1f81a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1f81c:	68bb      	ldr	r3, [r7, #8]
   1f81e:	2b00      	cmp	r3, #0
   1f820:	d102      	bne.n	1f828 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   1f822:	2300      	movs	r3, #0
   1f824:	61fb      	str	r3, [r7, #28]
   1f826:	e003      	b.n	1f830 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1f828:	68fb      	ldr	r3, [r7, #12]
   1f82a:	68ba      	ldr	r2, [r7, #8]
   1f82c:	4353      	muls	r3, r2
   1f82e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   1f830:	69fb      	ldr	r3, [r7, #28]
   1f832:	334c      	adds	r3, #76	; 0x4c
   1f834:	0018      	movs	r0, r3
   1f836:	4b0c      	ldr	r3, [pc, #48]	; (1f868 <xQueueGenericCreate+0x64>)
   1f838:	4798      	blx	r3
   1f83a:	0003      	movs	r3, r0
   1f83c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   1f83e:	69bb      	ldr	r3, [r7, #24]
   1f840:	2b00      	cmp	r3, #0
   1f842:	d00c      	beq.n	1f85e <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   1f844:	69bb      	ldr	r3, [r7, #24]
   1f846:	334c      	adds	r3, #76	; 0x4c
   1f848:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1f84a:	1dfb      	adds	r3, r7, #7
   1f84c:	781c      	ldrb	r4, [r3, #0]
   1f84e:	697a      	ldr	r2, [r7, #20]
   1f850:	68b9      	ldr	r1, [r7, #8]
   1f852:	68f8      	ldr	r0, [r7, #12]
   1f854:	69bb      	ldr	r3, [r7, #24]
   1f856:	9300      	str	r3, [sp, #0]
   1f858:	0023      	movs	r3, r4
   1f85a:	4c04      	ldr	r4, [pc, #16]	; (1f86c <xQueueGenericCreate+0x68>)
   1f85c:	47a0      	blx	r4
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
   1f85e:	69bb      	ldr	r3, [r7, #24]
	}
   1f860:	0018      	movs	r0, r3
   1f862:	46bd      	mov	sp, r7
   1f864:	b009      	add	sp, #36	; 0x24
   1f866:	bd90      	pop	{r4, r7, pc}
   1f868:	0001f58d 	.word	0x0001f58d
   1f86c:	0001f871 	.word	0x0001f871

0001f870 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   1f870:	b580      	push	{r7, lr}
   1f872:	b084      	sub	sp, #16
   1f874:	af00      	add	r7, sp, #0
   1f876:	60f8      	str	r0, [r7, #12]
   1f878:	60b9      	str	r1, [r7, #8]
   1f87a:	607a      	str	r2, [r7, #4]
   1f87c:	001a      	movs	r2, r3
   1f87e:	1cfb      	adds	r3, r7, #3
   1f880:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1f882:	68bb      	ldr	r3, [r7, #8]
   1f884:	2b00      	cmp	r3, #0
   1f886:	d103      	bne.n	1f890 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1f888:	69bb      	ldr	r3, [r7, #24]
   1f88a:	69ba      	ldr	r2, [r7, #24]
   1f88c:	601a      	str	r2, [r3, #0]
   1f88e:	e002      	b.n	1f896 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1f890:	69bb      	ldr	r3, [r7, #24]
   1f892:	687a      	ldr	r2, [r7, #4]
   1f894:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1f896:	69bb      	ldr	r3, [r7, #24]
   1f898:	68fa      	ldr	r2, [r7, #12]
   1f89a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   1f89c:	69bb      	ldr	r3, [r7, #24]
   1f89e:	68ba      	ldr	r2, [r7, #8]
   1f8a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1f8a2:	69bb      	ldr	r3, [r7, #24]
   1f8a4:	2101      	movs	r1, #1
   1f8a6:	0018      	movs	r0, r3
   1f8a8:	4b04      	ldr	r3, [pc, #16]	; (1f8bc <prvInitialiseNewQueue+0x4c>)
   1f8aa:	4798      	blx	r3
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   1f8ac:	69bb      	ldr	r3, [r7, #24]
   1f8ae:	2200      	movs	r2, #0
   1f8b0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
   1f8b2:	46c0      	nop			; (mov r8, r8)
   1f8b4:	46bd      	mov	sp, r7
   1f8b6:	b004      	add	sp, #16
   1f8b8:	bd80      	pop	{r7, pc}
   1f8ba:	46c0      	nop			; (mov r8, r8)
   1f8bc:	0001f749 	.word	0x0001f749

0001f8c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1f8c0:	b580      	push	{r7, lr}
   1f8c2:	b08a      	sub	sp, #40	; 0x28
   1f8c4:	af00      	add	r7, sp, #0
   1f8c6:	60f8      	str	r0, [r7, #12]
   1f8c8:	60b9      	str	r1, [r7, #8]
   1f8ca:	607a      	str	r2, [r7, #4]
   1f8cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1f8ce:	2300      	movs	r3, #0
   1f8d0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1f8d2:	68fb      	ldr	r3, [r7, #12]
   1f8d4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1f8d6:	6a3b      	ldr	r3, [r7, #32]
   1f8d8:	2b00      	cmp	r3, #0
   1f8da:	d101      	bne.n	1f8e0 <xQueueGenericSend+0x20>
   1f8dc:	b672      	cpsid	i
   1f8de:	e7fe      	b.n	1f8de <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1f8e0:	68bb      	ldr	r3, [r7, #8]
   1f8e2:	2b00      	cmp	r3, #0
   1f8e4:	d103      	bne.n	1f8ee <xQueueGenericSend+0x2e>
   1f8e6:	6a3b      	ldr	r3, [r7, #32]
   1f8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f8ea:	2b00      	cmp	r3, #0
   1f8ec:	d101      	bne.n	1f8f2 <xQueueGenericSend+0x32>
   1f8ee:	2301      	movs	r3, #1
   1f8f0:	e000      	b.n	1f8f4 <xQueueGenericSend+0x34>
   1f8f2:	2300      	movs	r3, #0
   1f8f4:	2b00      	cmp	r3, #0
   1f8f6:	d101      	bne.n	1f8fc <xQueueGenericSend+0x3c>
   1f8f8:	b672      	cpsid	i
   1f8fa:	e7fe      	b.n	1f8fa <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1f8fc:	683b      	ldr	r3, [r7, #0]
   1f8fe:	2b02      	cmp	r3, #2
   1f900:	d103      	bne.n	1f90a <xQueueGenericSend+0x4a>
   1f902:	6a3b      	ldr	r3, [r7, #32]
   1f904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1f906:	2b01      	cmp	r3, #1
   1f908:	d101      	bne.n	1f90e <xQueueGenericSend+0x4e>
   1f90a:	2301      	movs	r3, #1
   1f90c:	e000      	b.n	1f910 <xQueueGenericSend+0x50>
   1f90e:	2300      	movs	r3, #0
   1f910:	2b00      	cmp	r3, #0
   1f912:	d101      	bne.n	1f918 <xQueueGenericSend+0x58>
   1f914:	b672      	cpsid	i
   1f916:	e7fe      	b.n	1f916 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1f918:	4b53      	ldr	r3, [pc, #332]	; (1fa68 <xQueueGenericSend+0x1a8>)
   1f91a:	4798      	blx	r3
   1f91c:	1e03      	subs	r3, r0, #0
   1f91e:	d102      	bne.n	1f926 <xQueueGenericSend+0x66>
   1f920:	687b      	ldr	r3, [r7, #4]
   1f922:	2b00      	cmp	r3, #0
   1f924:	d101      	bne.n	1f92a <xQueueGenericSend+0x6a>
   1f926:	2301      	movs	r3, #1
   1f928:	e000      	b.n	1f92c <xQueueGenericSend+0x6c>
   1f92a:	2300      	movs	r3, #0
   1f92c:	2b00      	cmp	r3, #0
   1f92e:	d101      	bne.n	1f934 <xQueueGenericSend+0x74>
   1f930:	b672      	cpsid	i
   1f932:	e7fe      	b.n	1f932 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1f934:	4b4d      	ldr	r3, [pc, #308]	; (1fa6c <xQueueGenericSend+0x1ac>)
   1f936:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1f938:	6a3b      	ldr	r3, [r7, #32]
   1f93a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1f93c:	6a3b      	ldr	r3, [r7, #32]
   1f93e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1f940:	429a      	cmp	r2, r3
   1f942:	d302      	bcc.n	1f94a <xQueueGenericSend+0x8a>
   1f944:	683b      	ldr	r3, [r7, #0]
   1f946:	2b02      	cmp	r3, #2
   1f948:	d12d      	bne.n	1f9a6 <xQueueGenericSend+0xe6>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1f94a:	683a      	ldr	r2, [r7, #0]
   1f94c:	68b9      	ldr	r1, [r7, #8]
   1f94e:	6a3b      	ldr	r3, [r7, #32]
   1f950:	0018      	movs	r0, r3
   1f952:	4b47      	ldr	r3, [pc, #284]	; (1fa70 <xQueueGenericSend+0x1b0>)
   1f954:	4798      	blx	r3
   1f956:	0003      	movs	r3, r0
   1f958:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1f95a:	6a3b      	ldr	r3, [r7, #32]
   1f95c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1f95e:	2b00      	cmp	r3, #0
   1f960:	d00a      	beq.n	1f978 <xQueueGenericSend+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1f962:	683a      	ldr	r2, [r7, #0]
   1f964:	6a3b      	ldr	r3, [r7, #32]
   1f966:	0011      	movs	r1, r2
   1f968:	0018      	movs	r0, r3
   1f96a:	4b42      	ldr	r3, [pc, #264]	; (1fa74 <xQueueGenericSend+0x1b4>)
   1f96c:	4798      	blx	r3
   1f96e:	1e03      	subs	r3, r0, #0
   1f970:	d015      	beq.n	1f99e <xQueueGenericSend+0xde>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   1f972:	4b41      	ldr	r3, [pc, #260]	; (1fa78 <xQueueGenericSend+0x1b8>)
   1f974:	4798      	blx	r3
   1f976:	e012      	b.n	1f99e <xQueueGenericSend+0xde>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1f978:	6a3b      	ldr	r3, [r7, #32]
   1f97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f97c:	2b00      	cmp	r3, #0
   1f97e:	d009      	beq.n	1f994 <xQueueGenericSend+0xd4>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1f980:	6a3b      	ldr	r3, [r7, #32]
   1f982:	3324      	adds	r3, #36	; 0x24
   1f984:	0018      	movs	r0, r3
   1f986:	4b3d      	ldr	r3, [pc, #244]	; (1fa7c <xQueueGenericSend+0x1bc>)
   1f988:	4798      	blx	r3
   1f98a:	1e03      	subs	r3, r0, #0
   1f98c:	d007      	beq.n	1f99e <xQueueGenericSend+0xde>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   1f98e:	4b3a      	ldr	r3, [pc, #232]	; (1fa78 <xQueueGenericSend+0x1b8>)
   1f990:	4798      	blx	r3
   1f992:	e004      	b.n	1f99e <xQueueGenericSend+0xde>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   1f994:	69fb      	ldr	r3, [r7, #28]
   1f996:	2b00      	cmp	r3, #0
   1f998:	d001      	beq.n	1f99e <xQueueGenericSend+0xde>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1f99a:	4b37      	ldr	r3, [pc, #220]	; (1fa78 <xQueueGenericSend+0x1b8>)
   1f99c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1f99e:	4b38      	ldr	r3, [pc, #224]	; (1fa80 <xQueueGenericSend+0x1c0>)
   1f9a0:	4798      	blx	r3
				return pdPASS;
   1f9a2:	2301      	movs	r3, #1
   1f9a4:	e05c      	b.n	1fa60 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1f9a6:	687b      	ldr	r3, [r7, #4]
   1f9a8:	2b00      	cmp	r3, #0
   1f9aa:	d103      	bne.n	1f9b4 <xQueueGenericSend+0xf4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1f9ac:	4b34      	ldr	r3, [pc, #208]	; (1fa80 <xQueueGenericSend+0x1c0>)
   1f9ae:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   1f9b0:	2300      	movs	r3, #0
   1f9b2:	e055      	b.n	1fa60 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
   1f9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f9b6:	2b00      	cmp	r3, #0
   1f9b8:	d106      	bne.n	1f9c8 <xQueueGenericSend+0x108>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1f9ba:	2314      	movs	r3, #20
   1f9bc:	18fb      	adds	r3, r7, r3
   1f9be:	0018      	movs	r0, r3
   1f9c0:	4b30      	ldr	r3, [pc, #192]	; (1fa84 <xQueueGenericSend+0x1c4>)
   1f9c2:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1f9c4:	2301      	movs	r3, #1
   1f9c6:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1f9c8:	4b2d      	ldr	r3, [pc, #180]	; (1fa80 <xQueueGenericSend+0x1c0>)
   1f9ca:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1f9cc:	4b2e      	ldr	r3, [pc, #184]	; (1fa88 <xQueueGenericSend+0x1c8>)
   1f9ce:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1f9d0:	4b26      	ldr	r3, [pc, #152]	; (1fa6c <xQueueGenericSend+0x1ac>)
   1f9d2:	4798      	blx	r3
   1f9d4:	6a3b      	ldr	r3, [r7, #32]
   1f9d6:	2244      	movs	r2, #68	; 0x44
   1f9d8:	5c9b      	ldrb	r3, [r3, r2]
   1f9da:	b25b      	sxtb	r3, r3
   1f9dc:	3301      	adds	r3, #1
   1f9de:	d103      	bne.n	1f9e8 <xQueueGenericSend+0x128>
   1f9e0:	6a3b      	ldr	r3, [r7, #32]
   1f9e2:	2244      	movs	r2, #68	; 0x44
   1f9e4:	2100      	movs	r1, #0
   1f9e6:	5499      	strb	r1, [r3, r2]
   1f9e8:	6a3b      	ldr	r3, [r7, #32]
   1f9ea:	2245      	movs	r2, #69	; 0x45
   1f9ec:	5c9b      	ldrb	r3, [r3, r2]
   1f9ee:	b25b      	sxtb	r3, r3
   1f9f0:	3301      	adds	r3, #1
   1f9f2:	d103      	bne.n	1f9fc <xQueueGenericSend+0x13c>
   1f9f4:	6a3b      	ldr	r3, [r7, #32]
   1f9f6:	2245      	movs	r2, #69	; 0x45
   1f9f8:	2100      	movs	r1, #0
   1f9fa:	5499      	strb	r1, [r3, r2]
   1f9fc:	4b20      	ldr	r3, [pc, #128]	; (1fa80 <xQueueGenericSend+0x1c0>)
   1f9fe:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1fa00:	1d3a      	adds	r2, r7, #4
   1fa02:	2314      	movs	r3, #20
   1fa04:	18fb      	adds	r3, r7, r3
   1fa06:	0011      	movs	r1, r2
   1fa08:	0018      	movs	r0, r3
   1fa0a:	4b20      	ldr	r3, [pc, #128]	; (1fa8c <xQueueGenericSend+0x1cc>)
   1fa0c:	4798      	blx	r3
   1fa0e:	1e03      	subs	r3, r0, #0
   1fa10:	d11f      	bne.n	1fa52 <xQueueGenericSend+0x192>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1fa12:	6a3b      	ldr	r3, [r7, #32]
   1fa14:	0018      	movs	r0, r3
   1fa16:	4b1e      	ldr	r3, [pc, #120]	; (1fa90 <xQueueGenericSend+0x1d0>)
   1fa18:	4798      	blx	r3
   1fa1a:	1e03      	subs	r3, r0, #0
   1fa1c:	d012      	beq.n	1fa44 <xQueueGenericSend+0x184>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1fa1e:	6a3b      	ldr	r3, [r7, #32]
   1fa20:	3310      	adds	r3, #16
   1fa22:	687a      	ldr	r2, [r7, #4]
   1fa24:	0011      	movs	r1, r2
   1fa26:	0018      	movs	r0, r3
   1fa28:	4b1a      	ldr	r3, [pc, #104]	; (1fa94 <xQueueGenericSend+0x1d4>)
   1fa2a:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1fa2c:	6a3b      	ldr	r3, [r7, #32]
   1fa2e:	0018      	movs	r0, r3
   1fa30:	4b19      	ldr	r3, [pc, #100]	; (1fa98 <xQueueGenericSend+0x1d8>)
   1fa32:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1fa34:	4b19      	ldr	r3, [pc, #100]	; (1fa9c <xQueueGenericSend+0x1dc>)
   1fa36:	4798      	blx	r3
   1fa38:	1e03      	subs	r3, r0, #0
   1fa3a:	d000      	beq.n	1fa3e <xQueueGenericSend+0x17e>
   1fa3c:	e77a      	b.n	1f934 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   1fa3e:	4b0e      	ldr	r3, [pc, #56]	; (1fa78 <xQueueGenericSend+0x1b8>)
   1fa40:	4798      	blx	r3
   1fa42:	e777      	b.n	1f934 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1fa44:	6a3b      	ldr	r3, [r7, #32]
   1fa46:	0018      	movs	r0, r3
   1fa48:	4b13      	ldr	r3, [pc, #76]	; (1fa98 <xQueueGenericSend+0x1d8>)
   1fa4a:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1fa4c:	4b13      	ldr	r3, [pc, #76]	; (1fa9c <xQueueGenericSend+0x1dc>)
   1fa4e:	4798      	blx	r3
   1fa50:	e770      	b.n	1f934 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1fa52:	6a3b      	ldr	r3, [r7, #32]
   1fa54:	0018      	movs	r0, r3
   1fa56:	4b10      	ldr	r3, [pc, #64]	; (1fa98 <xQueueGenericSend+0x1d8>)
   1fa58:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1fa5a:	4b10      	ldr	r3, [pc, #64]	; (1fa9c <xQueueGenericSend+0x1dc>)
   1fa5c:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   1fa5e:	2300      	movs	r3, #0
		}
	}
}
   1fa60:	0018      	movs	r0, r3
   1fa62:	46bd      	mov	sp, r7
   1fa64:	b00a      	add	sp, #40	; 0x28
   1fa66:	bd80      	pop	{r7, pc}
   1fa68:	00020ff1 	.word	0x00020ff1
   1fa6c:	0001f451 	.word	0x0001f451
   1fa70:	0001ff81 	.word	0x0001ff81
   1fa74:	00020285 	.word	0x00020285
   1fa78:	0001f431 	.word	0x0001f431
   1fa7c:	00020cb9 	.word	0x00020cb9
   1fa80:	0001f475 	.word	0x0001f475
   1fa84:	00020d79 	.word	0x00020d79
   1fa88:	00020881 	.word	0x00020881
   1fa8c:	00020da1 	.word	0x00020da1
   1fa90:	000201d5 	.word	0x000201d5
   1fa94:	00020c21 	.word	0x00020c21
   1fa98:	000200b1 	.word	0x000200b1
   1fa9c:	00020899 	.word	0x00020899

0001faa0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1faa0:	b580      	push	{r7, lr}
   1faa2:	b088      	sub	sp, #32
   1faa4:	af00      	add	r7, sp, #0
   1faa6:	60f8      	str	r0, [r7, #12]
   1faa8:	60b9      	str	r1, [r7, #8]
   1faaa:	607a      	str	r2, [r7, #4]
   1faac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1faae:	68fb      	ldr	r3, [r7, #12]
   1fab0:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   1fab2:	69bb      	ldr	r3, [r7, #24]
   1fab4:	2b00      	cmp	r3, #0
   1fab6:	d101      	bne.n	1fabc <xQueueGenericSendFromISR+0x1c>
   1fab8:	b672      	cpsid	i
   1faba:	e7fe      	b.n	1faba <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1fabc:	68bb      	ldr	r3, [r7, #8]
   1fabe:	2b00      	cmp	r3, #0
   1fac0:	d103      	bne.n	1faca <xQueueGenericSendFromISR+0x2a>
   1fac2:	69bb      	ldr	r3, [r7, #24]
   1fac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1fac6:	2b00      	cmp	r3, #0
   1fac8:	d101      	bne.n	1face <xQueueGenericSendFromISR+0x2e>
   1faca:	2301      	movs	r3, #1
   1facc:	e000      	b.n	1fad0 <xQueueGenericSendFromISR+0x30>
   1face:	2300      	movs	r3, #0
   1fad0:	2b00      	cmp	r3, #0
   1fad2:	d101      	bne.n	1fad8 <xQueueGenericSendFromISR+0x38>
   1fad4:	b672      	cpsid	i
   1fad6:	e7fe      	b.n	1fad6 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1fad8:	683b      	ldr	r3, [r7, #0]
   1fada:	2b02      	cmp	r3, #2
   1fadc:	d103      	bne.n	1fae6 <xQueueGenericSendFromISR+0x46>
   1fade:	69bb      	ldr	r3, [r7, #24]
   1fae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1fae2:	2b01      	cmp	r3, #1
   1fae4:	d101      	bne.n	1faea <xQueueGenericSendFromISR+0x4a>
   1fae6:	2301      	movs	r3, #1
   1fae8:	e000      	b.n	1faec <xQueueGenericSendFromISR+0x4c>
   1faea:	2300      	movs	r3, #0
   1faec:	2b00      	cmp	r3, #0
   1faee:	d101      	bne.n	1faf4 <xQueueGenericSendFromISR+0x54>
   1faf0:	b672      	cpsid	i
   1faf2:	e7fe      	b.n	1faf2 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1faf4:	4b2d      	ldr	r3, [pc, #180]	; (1fbac <xQueueGenericSendFromISR+0x10c>)
   1faf6:	4798      	blx	r3
   1faf8:	0003      	movs	r3, r0
   1fafa:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1fafc:	69bb      	ldr	r3, [r7, #24]
   1fafe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1fb00:	69bb      	ldr	r3, [r7, #24]
   1fb02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1fb04:	429a      	cmp	r2, r3
   1fb06:	d302      	bcc.n	1fb0e <xQueueGenericSendFromISR+0x6e>
   1fb08:	683b      	ldr	r3, [r7, #0]
   1fb0a:	2b02      	cmp	r3, #2
   1fb0c:	d142      	bne.n	1fb94 <xQueueGenericSendFromISR+0xf4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1fb0e:	2313      	movs	r3, #19
   1fb10:	18fb      	adds	r3, r7, r3
   1fb12:	69ba      	ldr	r2, [r7, #24]
   1fb14:	2145      	movs	r1, #69	; 0x45
   1fb16:	5c52      	ldrb	r2, [r2, r1]
   1fb18:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1fb1a:	683a      	ldr	r2, [r7, #0]
   1fb1c:	68b9      	ldr	r1, [r7, #8]
   1fb1e:	69bb      	ldr	r3, [r7, #24]
   1fb20:	0018      	movs	r0, r3
   1fb22:	4b23      	ldr	r3, [pc, #140]	; (1fbb0 <xQueueGenericSendFromISR+0x110>)
   1fb24:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1fb26:	2313      	movs	r3, #19
   1fb28:	18fb      	adds	r3, r7, r3
   1fb2a:	781b      	ldrb	r3, [r3, #0]
   1fb2c:	b25b      	sxtb	r3, r3
   1fb2e:	3301      	adds	r3, #1
   1fb30:	d124      	bne.n	1fb7c <xQueueGenericSendFromISR+0xdc>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1fb32:	69bb      	ldr	r3, [r7, #24]
   1fb34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1fb36:	2b00      	cmp	r3, #0
   1fb38:	d00e      	beq.n	1fb58 <xQueueGenericSendFromISR+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1fb3a:	683a      	ldr	r2, [r7, #0]
   1fb3c:	69bb      	ldr	r3, [r7, #24]
   1fb3e:	0011      	movs	r1, r2
   1fb40:	0018      	movs	r0, r3
   1fb42:	4b1c      	ldr	r3, [pc, #112]	; (1fbb4 <xQueueGenericSendFromISR+0x114>)
   1fb44:	4798      	blx	r3
   1fb46:	1e03      	subs	r3, r0, #0
   1fb48:	d021      	beq.n	1fb8e <xQueueGenericSendFromISR+0xee>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1fb4a:	687b      	ldr	r3, [r7, #4]
   1fb4c:	2b00      	cmp	r3, #0
   1fb4e:	d01e      	beq.n	1fb8e <xQueueGenericSendFromISR+0xee>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1fb50:	687b      	ldr	r3, [r7, #4]
   1fb52:	2201      	movs	r2, #1
   1fb54:	601a      	str	r2, [r3, #0]
   1fb56:	e01a      	b.n	1fb8e <xQueueGenericSendFromISR+0xee>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1fb58:	69bb      	ldr	r3, [r7, #24]
   1fb5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1fb5c:	2b00      	cmp	r3, #0
   1fb5e:	d016      	beq.n	1fb8e <xQueueGenericSendFromISR+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1fb60:	69bb      	ldr	r3, [r7, #24]
   1fb62:	3324      	adds	r3, #36	; 0x24
   1fb64:	0018      	movs	r0, r3
   1fb66:	4b14      	ldr	r3, [pc, #80]	; (1fbb8 <xQueueGenericSendFromISR+0x118>)
   1fb68:	4798      	blx	r3
   1fb6a:	1e03      	subs	r3, r0, #0
   1fb6c:	d00f      	beq.n	1fb8e <xQueueGenericSendFromISR+0xee>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1fb6e:	687b      	ldr	r3, [r7, #4]
   1fb70:	2b00      	cmp	r3, #0
   1fb72:	d00c      	beq.n	1fb8e <xQueueGenericSendFromISR+0xee>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1fb74:	687b      	ldr	r3, [r7, #4]
   1fb76:	2201      	movs	r2, #1
   1fb78:	601a      	str	r2, [r3, #0]
   1fb7a:	e008      	b.n	1fb8e <xQueueGenericSendFromISR+0xee>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1fb7c:	2313      	movs	r3, #19
   1fb7e:	18fb      	adds	r3, r7, r3
   1fb80:	781b      	ldrb	r3, [r3, #0]
   1fb82:	3301      	adds	r3, #1
   1fb84:	b2db      	uxtb	r3, r3
   1fb86:	b259      	sxtb	r1, r3
   1fb88:	69bb      	ldr	r3, [r7, #24]
   1fb8a:	2245      	movs	r2, #69	; 0x45
   1fb8c:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1fb8e:	2301      	movs	r3, #1
   1fb90:	61fb      	str	r3, [r7, #28]
		{
   1fb92:	e001      	b.n	1fb98 <xQueueGenericSendFromISR+0xf8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   1fb94:	2300      	movs	r3, #0
   1fb96:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1fb98:	697b      	ldr	r3, [r7, #20]
   1fb9a:	0018      	movs	r0, r3
   1fb9c:	4b07      	ldr	r3, [pc, #28]	; (1fbbc <xQueueGenericSendFromISR+0x11c>)
   1fb9e:	4798      	blx	r3

	return xReturn;
   1fba0:	69fb      	ldr	r3, [r7, #28]
}
   1fba2:	0018      	movs	r0, r3
   1fba4:	46bd      	mov	sp, r7
   1fba6:	b008      	add	sp, #32
   1fba8:	bd80      	pop	{r7, pc}
   1fbaa:	46c0      	nop			; (mov r8, r8)
   1fbac:	0001f4a5 	.word	0x0001f4a5
   1fbb0:	0001ff81 	.word	0x0001ff81
   1fbb4:	00020285 	.word	0x00020285
   1fbb8:	00020cb9 	.word	0x00020cb9
   1fbbc:	0001f4b1 	.word	0x0001f4b1

0001fbc0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1fbc0:	b580      	push	{r7, lr}
   1fbc2:	b08a      	sub	sp, #40	; 0x28
   1fbc4:	af00      	add	r7, sp, #0
   1fbc6:	60f8      	str	r0, [r7, #12]
   1fbc8:	60b9      	str	r1, [r7, #8]
   1fbca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1fbcc:	2300      	movs	r3, #0
   1fbce:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1fbd0:	68fb      	ldr	r3, [r7, #12]
   1fbd2:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1fbd4:	6a3b      	ldr	r3, [r7, #32]
   1fbd6:	2b00      	cmp	r3, #0
   1fbd8:	d101      	bne.n	1fbde <xQueueReceive+0x1e>
   1fbda:	b672      	cpsid	i
   1fbdc:	e7fe      	b.n	1fbdc <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1fbde:	68bb      	ldr	r3, [r7, #8]
   1fbe0:	2b00      	cmp	r3, #0
   1fbe2:	d103      	bne.n	1fbec <xQueueReceive+0x2c>
   1fbe4:	6a3b      	ldr	r3, [r7, #32]
   1fbe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1fbe8:	2b00      	cmp	r3, #0
   1fbea:	d101      	bne.n	1fbf0 <xQueueReceive+0x30>
   1fbec:	2301      	movs	r3, #1
   1fbee:	e000      	b.n	1fbf2 <xQueueReceive+0x32>
   1fbf0:	2300      	movs	r3, #0
   1fbf2:	2b00      	cmp	r3, #0
   1fbf4:	d101      	bne.n	1fbfa <xQueueReceive+0x3a>
   1fbf6:	b672      	cpsid	i
   1fbf8:	e7fe      	b.n	1fbf8 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1fbfa:	4b4c      	ldr	r3, [pc, #304]	; (1fd2c <xQueueReceive+0x16c>)
   1fbfc:	4798      	blx	r3
   1fbfe:	1e03      	subs	r3, r0, #0
   1fc00:	d102      	bne.n	1fc08 <xQueueReceive+0x48>
   1fc02:	687b      	ldr	r3, [r7, #4]
   1fc04:	2b00      	cmp	r3, #0
   1fc06:	d101      	bne.n	1fc0c <xQueueReceive+0x4c>
   1fc08:	2301      	movs	r3, #1
   1fc0a:	e000      	b.n	1fc0e <xQueueReceive+0x4e>
   1fc0c:	2300      	movs	r3, #0
   1fc0e:	2b00      	cmp	r3, #0
   1fc10:	d101      	bne.n	1fc16 <xQueueReceive+0x56>
   1fc12:	b672      	cpsid	i
   1fc14:	e7fe      	b.n	1fc14 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1fc16:	4b46      	ldr	r3, [pc, #280]	; (1fd30 <xQueueReceive+0x170>)
   1fc18:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1fc1a:	6a3b      	ldr	r3, [r7, #32]
   1fc1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1fc1e:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1fc20:	69fb      	ldr	r3, [r7, #28]
   1fc22:	2b00      	cmp	r3, #0
   1fc24:	d01a      	beq.n	1fc5c <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1fc26:	68ba      	ldr	r2, [r7, #8]
   1fc28:	6a3b      	ldr	r3, [r7, #32]
   1fc2a:	0011      	movs	r1, r2
   1fc2c:	0018      	movs	r0, r3
   1fc2e:	4b41      	ldr	r3, [pc, #260]	; (1fd34 <xQueueReceive+0x174>)
   1fc30:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1fc32:	69fb      	ldr	r3, [r7, #28]
   1fc34:	1e5a      	subs	r2, r3, #1
   1fc36:	6a3b      	ldr	r3, [r7, #32]
   1fc38:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1fc3a:	6a3b      	ldr	r3, [r7, #32]
   1fc3c:	691b      	ldr	r3, [r3, #16]
   1fc3e:	2b00      	cmp	r3, #0
   1fc40:	d008      	beq.n	1fc54 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1fc42:	6a3b      	ldr	r3, [r7, #32]
   1fc44:	3310      	adds	r3, #16
   1fc46:	0018      	movs	r0, r3
   1fc48:	4b3b      	ldr	r3, [pc, #236]	; (1fd38 <xQueueReceive+0x178>)
   1fc4a:	4798      	blx	r3
   1fc4c:	1e03      	subs	r3, r0, #0
   1fc4e:	d001      	beq.n	1fc54 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1fc50:	4b3a      	ldr	r3, [pc, #232]	; (1fd3c <xQueueReceive+0x17c>)
   1fc52:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1fc54:	4b3a      	ldr	r3, [pc, #232]	; (1fd40 <xQueueReceive+0x180>)
   1fc56:	4798      	blx	r3
				return pdPASS;
   1fc58:	2301      	movs	r3, #1
   1fc5a:	e062      	b.n	1fd22 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1fc5c:	687b      	ldr	r3, [r7, #4]
   1fc5e:	2b00      	cmp	r3, #0
   1fc60:	d103      	bne.n	1fc6a <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1fc62:	4b37      	ldr	r3, [pc, #220]	; (1fd40 <xQueueReceive+0x180>)
   1fc64:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   1fc66:	2300      	movs	r3, #0
   1fc68:	e05b      	b.n	1fd22 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
   1fc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fc6c:	2b00      	cmp	r3, #0
   1fc6e:	d106      	bne.n	1fc7e <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1fc70:	2314      	movs	r3, #20
   1fc72:	18fb      	adds	r3, r7, r3
   1fc74:	0018      	movs	r0, r3
   1fc76:	4b33      	ldr	r3, [pc, #204]	; (1fd44 <xQueueReceive+0x184>)
   1fc78:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1fc7a:	2301      	movs	r3, #1
   1fc7c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1fc7e:	4b30      	ldr	r3, [pc, #192]	; (1fd40 <xQueueReceive+0x180>)
   1fc80:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1fc82:	4b31      	ldr	r3, [pc, #196]	; (1fd48 <xQueueReceive+0x188>)
   1fc84:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1fc86:	4b2a      	ldr	r3, [pc, #168]	; (1fd30 <xQueueReceive+0x170>)
   1fc88:	4798      	blx	r3
   1fc8a:	6a3b      	ldr	r3, [r7, #32]
   1fc8c:	2244      	movs	r2, #68	; 0x44
   1fc8e:	5c9b      	ldrb	r3, [r3, r2]
   1fc90:	b25b      	sxtb	r3, r3
   1fc92:	3301      	adds	r3, #1
   1fc94:	d103      	bne.n	1fc9e <xQueueReceive+0xde>
   1fc96:	6a3b      	ldr	r3, [r7, #32]
   1fc98:	2244      	movs	r2, #68	; 0x44
   1fc9a:	2100      	movs	r1, #0
   1fc9c:	5499      	strb	r1, [r3, r2]
   1fc9e:	6a3b      	ldr	r3, [r7, #32]
   1fca0:	2245      	movs	r2, #69	; 0x45
   1fca2:	5c9b      	ldrb	r3, [r3, r2]
   1fca4:	b25b      	sxtb	r3, r3
   1fca6:	3301      	adds	r3, #1
   1fca8:	d103      	bne.n	1fcb2 <xQueueReceive+0xf2>
   1fcaa:	6a3b      	ldr	r3, [r7, #32]
   1fcac:	2245      	movs	r2, #69	; 0x45
   1fcae:	2100      	movs	r1, #0
   1fcb0:	5499      	strb	r1, [r3, r2]
   1fcb2:	4b23      	ldr	r3, [pc, #140]	; (1fd40 <xQueueReceive+0x180>)
   1fcb4:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1fcb6:	1d3a      	adds	r2, r7, #4
   1fcb8:	2314      	movs	r3, #20
   1fcba:	18fb      	adds	r3, r7, r3
   1fcbc:	0011      	movs	r1, r2
   1fcbe:	0018      	movs	r0, r3
   1fcc0:	4b22      	ldr	r3, [pc, #136]	; (1fd4c <xQueueReceive+0x18c>)
   1fcc2:	4798      	blx	r3
   1fcc4:	1e03      	subs	r3, r0, #0
   1fcc6:	d11e      	bne.n	1fd06 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1fcc8:	6a3b      	ldr	r3, [r7, #32]
   1fcca:	0018      	movs	r0, r3
   1fccc:	4b20      	ldr	r3, [pc, #128]	; (1fd50 <xQueueReceive+0x190>)
   1fcce:	4798      	blx	r3
   1fcd0:	1e03      	subs	r3, r0, #0
   1fcd2:	d011      	beq.n	1fcf8 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1fcd4:	6a3b      	ldr	r3, [r7, #32]
   1fcd6:	3324      	adds	r3, #36	; 0x24
   1fcd8:	687a      	ldr	r2, [r7, #4]
   1fcda:	0011      	movs	r1, r2
   1fcdc:	0018      	movs	r0, r3
   1fcde:	4b1d      	ldr	r3, [pc, #116]	; (1fd54 <xQueueReceive+0x194>)
   1fce0:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1fce2:	6a3b      	ldr	r3, [r7, #32]
   1fce4:	0018      	movs	r0, r3
   1fce6:	4b1c      	ldr	r3, [pc, #112]	; (1fd58 <xQueueReceive+0x198>)
   1fce8:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1fcea:	4b1c      	ldr	r3, [pc, #112]	; (1fd5c <xQueueReceive+0x19c>)
   1fcec:	4798      	blx	r3
   1fcee:	1e03      	subs	r3, r0, #0
   1fcf0:	d191      	bne.n	1fc16 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   1fcf2:	4b12      	ldr	r3, [pc, #72]	; (1fd3c <xQueueReceive+0x17c>)
   1fcf4:	4798      	blx	r3
   1fcf6:	e78e      	b.n	1fc16 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1fcf8:	6a3b      	ldr	r3, [r7, #32]
   1fcfa:	0018      	movs	r0, r3
   1fcfc:	4b16      	ldr	r3, [pc, #88]	; (1fd58 <xQueueReceive+0x198>)
   1fcfe:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1fd00:	4b16      	ldr	r3, [pc, #88]	; (1fd5c <xQueueReceive+0x19c>)
   1fd02:	4798      	blx	r3
   1fd04:	e787      	b.n	1fc16 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1fd06:	6a3b      	ldr	r3, [r7, #32]
   1fd08:	0018      	movs	r0, r3
   1fd0a:	4b13      	ldr	r3, [pc, #76]	; (1fd58 <xQueueReceive+0x198>)
   1fd0c:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1fd0e:	4b13      	ldr	r3, [pc, #76]	; (1fd5c <xQueueReceive+0x19c>)
   1fd10:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1fd12:	6a3b      	ldr	r3, [r7, #32]
   1fd14:	0018      	movs	r0, r3
   1fd16:	4b0e      	ldr	r3, [pc, #56]	; (1fd50 <xQueueReceive+0x190>)
   1fd18:	4798      	blx	r3
   1fd1a:	1e03      	subs	r3, r0, #0
   1fd1c:	d100      	bne.n	1fd20 <xQueueReceive+0x160>
   1fd1e:	e77a      	b.n	1fc16 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
   1fd20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1fd22:	0018      	movs	r0, r3
   1fd24:	46bd      	mov	sp, r7
   1fd26:	b00a      	add	sp, #40	; 0x28
   1fd28:	bd80      	pop	{r7, pc}
   1fd2a:	46c0      	nop			; (mov r8, r8)
   1fd2c:	00020ff1 	.word	0x00020ff1
   1fd30:	0001f451 	.word	0x0001f451
   1fd34:	00020061 	.word	0x00020061
   1fd38:	00020cb9 	.word	0x00020cb9
   1fd3c:	0001f431 	.word	0x0001f431
   1fd40:	0001f475 	.word	0x0001f475
   1fd44:	00020d79 	.word	0x00020d79
   1fd48:	00020881 	.word	0x00020881
   1fd4c:	00020da1 	.word	0x00020da1
   1fd50:	000201a1 	.word	0x000201a1
   1fd54:	00020c21 	.word	0x00020c21
   1fd58:	000200b1 	.word	0x000200b1
   1fd5c:	00020899 	.word	0x00020899

0001fd60 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   1fd60:	b580      	push	{r7, lr}
   1fd62:	b08a      	sub	sp, #40	; 0x28
   1fd64:	af00      	add	r7, sp, #0
   1fd66:	6078      	str	r0, [r7, #4]
   1fd68:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   1fd6a:	2300      	movs	r3, #0
   1fd6c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1fd6e:	687b      	ldr	r3, [r7, #4]
   1fd70:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   1fd72:	2300      	movs	r3, #0
   1fd74:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1fd76:	69fb      	ldr	r3, [r7, #28]
   1fd78:	2b00      	cmp	r3, #0
   1fd7a:	d101      	bne.n	1fd80 <xQueueSemaphoreTake+0x20>
   1fd7c:	b672      	cpsid	i
   1fd7e:	e7fe      	b.n	1fd7e <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1fd80:	69fb      	ldr	r3, [r7, #28]
   1fd82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1fd84:	2b00      	cmp	r3, #0
   1fd86:	d001      	beq.n	1fd8c <xQueueSemaphoreTake+0x2c>
   1fd88:	b672      	cpsid	i
   1fd8a:	e7fe      	b.n	1fd8a <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1fd8c:	4b61      	ldr	r3, [pc, #388]	; (1ff14 <xQueueSemaphoreTake+0x1b4>)
   1fd8e:	4798      	blx	r3
   1fd90:	1e03      	subs	r3, r0, #0
   1fd92:	d102      	bne.n	1fd9a <xQueueSemaphoreTake+0x3a>
   1fd94:	683b      	ldr	r3, [r7, #0]
   1fd96:	2b00      	cmp	r3, #0
   1fd98:	d101      	bne.n	1fd9e <xQueueSemaphoreTake+0x3e>
   1fd9a:	2301      	movs	r3, #1
   1fd9c:	e000      	b.n	1fda0 <xQueueSemaphoreTake+0x40>
   1fd9e:	2300      	movs	r3, #0
   1fda0:	2b00      	cmp	r3, #0
   1fda2:	d101      	bne.n	1fda8 <xQueueSemaphoreTake+0x48>
   1fda4:	b672      	cpsid	i
   1fda6:	e7fe      	b.n	1fda6 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1fda8:	4b5b      	ldr	r3, [pc, #364]	; (1ff18 <xQueueSemaphoreTake+0x1b8>)
   1fdaa:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   1fdac:	69fb      	ldr	r3, [r7, #28]
   1fdae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1fdb0:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1fdb2:	69bb      	ldr	r3, [r7, #24]
   1fdb4:	2b00      	cmp	r3, #0
   1fdb6:	d01d      	beq.n	1fdf4 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   1fdb8:	69bb      	ldr	r3, [r7, #24]
   1fdba:	1e5a      	subs	r2, r3, #1
   1fdbc:	69fb      	ldr	r3, [r7, #28]
   1fdbe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1fdc0:	69fb      	ldr	r3, [r7, #28]
   1fdc2:	681b      	ldr	r3, [r3, #0]
   1fdc4:	2b00      	cmp	r3, #0
   1fdc6:	d104      	bne.n	1fdd2 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   1fdc8:	4b54      	ldr	r3, [pc, #336]	; (1ff1c <xQueueSemaphoreTake+0x1bc>)
   1fdca:	4798      	blx	r3
   1fdcc:	0002      	movs	r2, r0
   1fdce:	69fb      	ldr	r3, [r7, #28]
   1fdd0:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1fdd2:	69fb      	ldr	r3, [r7, #28]
   1fdd4:	691b      	ldr	r3, [r3, #16]
   1fdd6:	2b00      	cmp	r3, #0
   1fdd8:	d008      	beq.n	1fdec <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1fdda:	69fb      	ldr	r3, [r7, #28]
   1fddc:	3310      	adds	r3, #16
   1fdde:	0018      	movs	r0, r3
   1fde0:	4b4f      	ldr	r3, [pc, #316]	; (1ff20 <xQueueSemaphoreTake+0x1c0>)
   1fde2:	4798      	blx	r3
   1fde4:	1e03      	subs	r3, r0, #0
   1fde6:	d001      	beq.n	1fdec <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1fde8:	4b4e      	ldr	r3, [pc, #312]	; (1ff24 <xQueueSemaphoreTake+0x1c4>)
   1fdea:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1fdec:	4b4e      	ldr	r3, [pc, #312]	; (1ff28 <xQueueSemaphoreTake+0x1c8>)
   1fdee:	4798      	blx	r3
				return pdPASS;
   1fdf0:	2301      	movs	r3, #1
   1fdf2:	e08b      	b.n	1ff0c <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1fdf4:	683b      	ldr	r3, [r7, #0]
   1fdf6:	2b00      	cmp	r3, #0
   1fdf8:	d108      	bne.n	1fe0c <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   1fdfa:	6a3b      	ldr	r3, [r7, #32]
   1fdfc:	2b00      	cmp	r3, #0
   1fdfe:	d001      	beq.n	1fe04 <xQueueSemaphoreTake+0xa4>
   1fe00:	b672      	cpsid	i
   1fe02:	e7fe      	b.n	1fe02 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   1fe04:	4b48      	ldr	r3, [pc, #288]	; (1ff28 <xQueueSemaphoreTake+0x1c8>)
   1fe06:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   1fe08:	2300      	movs	r3, #0
   1fe0a:	e07f      	b.n	1ff0c <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
   1fe0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fe0e:	2b00      	cmp	r3, #0
   1fe10:	d106      	bne.n	1fe20 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1fe12:	230c      	movs	r3, #12
   1fe14:	18fb      	adds	r3, r7, r3
   1fe16:	0018      	movs	r0, r3
   1fe18:	4b44      	ldr	r3, [pc, #272]	; (1ff2c <xQueueSemaphoreTake+0x1cc>)
   1fe1a:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1fe1c:	2301      	movs	r3, #1
   1fe1e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1fe20:	4b41      	ldr	r3, [pc, #260]	; (1ff28 <xQueueSemaphoreTake+0x1c8>)
   1fe22:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   1fe24:	4b42      	ldr	r3, [pc, #264]	; (1ff30 <xQueueSemaphoreTake+0x1d0>)
   1fe26:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1fe28:	4b3b      	ldr	r3, [pc, #236]	; (1ff18 <xQueueSemaphoreTake+0x1b8>)
   1fe2a:	4798      	blx	r3
   1fe2c:	69fb      	ldr	r3, [r7, #28]
   1fe2e:	2244      	movs	r2, #68	; 0x44
   1fe30:	5c9b      	ldrb	r3, [r3, r2]
   1fe32:	b25b      	sxtb	r3, r3
   1fe34:	3301      	adds	r3, #1
   1fe36:	d103      	bne.n	1fe40 <xQueueSemaphoreTake+0xe0>
   1fe38:	69fb      	ldr	r3, [r7, #28]
   1fe3a:	2244      	movs	r2, #68	; 0x44
   1fe3c:	2100      	movs	r1, #0
   1fe3e:	5499      	strb	r1, [r3, r2]
   1fe40:	69fb      	ldr	r3, [r7, #28]
   1fe42:	2245      	movs	r2, #69	; 0x45
   1fe44:	5c9b      	ldrb	r3, [r3, r2]
   1fe46:	b25b      	sxtb	r3, r3
   1fe48:	3301      	adds	r3, #1
   1fe4a:	d103      	bne.n	1fe54 <xQueueSemaphoreTake+0xf4>
   1fe4c:	69fb      	ldr	r3, [r7, #28]
   1fe4e:	2245      	movs	r2, #69	; 0x45
   1fe50:	2100      	movs	r1, #0
   1fe52:	5499      	strb	r1, [r3, r2]
   1fe54:	4b34      	ldr	r3, [pc, #208]	; (1ff28 <xQueueSemaphoreTake+0x1c8>)
   1fe56:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1fe58:	003a      	movs	r2, r7
   1fe5a:	230c      	movs	r3, #12
   1fe5c:	18fb      	adds	r3, r7, r3
   1fe5e:	0011      	movs	r1, r2
   1fe60:	0018      	movs	r0, r3
   1fe62:	4b34      	ldr	r3, [pc, #208]	; (1ff34 <xQueueSemaphoreTake+0x1d4>)
   1fe64:	4798      	blx	r3
   1fe66:	1e03      	subs	r3, r0, #0
   1fe68:	d12e      	bne.n	1fec8 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1fe6a:	69fb      	ldr	r3, [r7, #28]
   1fe6c:	0018      	movs	r0, r3
   1fe6e:	4b32      	ldr	r3, [pc, #200]	; (1ff38 <xQueueSemaphoreTake+0x1d8>)
   1fe70:	4798      	blx	r3
   1fe72:	1e03      	subs	r3, r0, #0
   1fe74:	d021      	beq.n	1feba <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1fe76:	69fb      	ldr	r3, [r7, #28]
   1fe78:	681b      	ldr	r3, [r3, #0]
   1fe7a:	2b00      	cmp	r3, #0
   1fe7c:	d10a      	bne.n	1fe94 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
   1fe7e:	4b26      	ldr	r3, [pc, #152]	; (1ff18 <xQueueSemaphoreTake+0x1b8>)
   1fe80:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1fe82:	69fb      	ldr	r3, [r7, #28]
   1fe84:	685b      	ldr	r3, [r3, #4]
   1fe86:	0018      	movs	r0, r3
   1fe88:	4b2c      	ldr	r3, [pc, #176]	; (1ff3c <xQueueSemaphoreTake+0x1dc>)
   1fe8a:	4798      	blx	r3
   1fe8c:	0003      	movs	r3, r0
   1fe8e:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1fe90:	4b25      	ldr	r3, [pc, #148]	; (1ff28 <xQueueSemaphoreTake+0x1c8>)
   1fe92:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1fe94:	69fb      	ldr	r3, [r7, #28]
   1fe96:	3324      	adds	r3, #36	; 0x24
   1fe98:	683a      	ldr	r2, [r7, #0]
   1fe9a:	0011      	movs	r1, r2
   1fe9c:	0018      	movs	r0, r3
   1fe9e:	4b28      	ldr	r3, [pc, #160]	; (1ff40 <xQueueSemaphoreTake+0x1e0>)
   1fea0:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1fea2:	69fb      	ldr	r3, [r7, #28]
   1fea4:	0018      	movs	r0, r3
   1fea6:	4b27      	ldr	r3, [pc, #156]	; (1ff44 <xQueueSemaphoreTake+0x1e4>)
   1fea8:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1feaa:	4b27      	ldr	r3, [pc, #156]	; (1ff48 <xQueueSemaphoreTake+0x1e8>)
   1feac:	4798      	blx	r3
   1feae:	1e03      	subs	r3, r0, #0
   1feb0:	d000      	beq.n	1feb4 <xQueueSemaphoreTake+0x154>
   1feb2:	e779      	b.n	1fda8 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   1feb4:	4b1b      	ldr	r3, [pc, #108]	; (1ff24 <xQueueSemaphoreTake+0x1c4>)
   1feb6:	4798      	blx	r3
   1feb8:	e776      	b.n	1fda8 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   1feba:	69fb      	ldr	r3, [r7, #28]
   1febc:	0018      	movs	r0, r3
   1febe:	4b21      	ldr	r3, [pc, #132]	; (1ff44 <xQueueSemaphoreTake+0x1e4>)
   1fec0:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1fec2:	4b21      	ldr	r3, [pc, #132]	; (1ff48 <xQueueSemaphoreTake+0x1e8>)
   1fec4:	4798      	blx	r3
   1fec6:	e76f      	b.n	1fda8 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1fec8:	69fb      	ldr	r3, [r7, #28]
   1feca:	0018      	movs	r0, r3
   1fecc:	4b1d      	ldr	r3, [pc, #116]	; (1ff44 <xQueueSemaphoreTake+0x1e4>)
   1fece:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1fed0:	4b1d      	ldr	r3, [pc, #116]	; (1ff48 <xQueueSemaphoreTake+0x1e8>)
   1fed2:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1fed4:	69fb      	ldr	r3, [r7, #28]
   1fed6:	0018      	movs	r0, r3
   1fed8:	4b17      	ldr	r3, [pc, #92]	; (1ff38 <xQueueSemaphoreTake+0x1d8>)
   1feda:	4798      	blx	r3
   1fedc:	1e03      	subs	r3, r0, #0
   1fede:	d100      	bne.n	1fee2 <xQueueSemaphoreTake+0x182>
   1fee0:	e762      	b.n	1fda8 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1fee2:	6a3b      	ldr	r3, [r7, #32]
   1fee4:	2b00      	cmp	r3, #0
   1fee6:	d010      	beq.n	1ff0a <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
   1fee8:	4b0b      	ldr	r3, [pc, #44]	; (1ff18 <xQueueSemaphoreTake+0x1b8>)
   1feea:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   1feec:	69fb      	ldr	r3, [r7, #28]
   1feee:	0018      	movs	r0, r3
   1fef0:	4b16      	ldr	r3, [pc, #88]	; (1ff4c <xQueueSemaphoreTake+0x1ec>)
   1fef2:	4798      	blx	r3
   1fef4:	0003      	movs	r3, r0
   1fef6:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1fef8:	69fb      	ldr	r3, [r7, #28]
   1fefa:	685b      	ldr	r3, [r3, #4]
   1fefc:	697a      	ldr	r2, [r7, #20]
   1fefe:	0011      	movs	r1, r2
   1ff00:	0018      	movs	r0, r3
   1ff02:	4b13      	ldr	r3, [pc, #76]	; (1ff50 <xQueueSemaphoreTake+0x1f0>)
   1ff04:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1ff06:	4b08      	ldr	r3, [pc, #32]	; (1ff28 <xQueueSemaphoreTake+0x1c8>)
   1ff08:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
   1ff0a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1ff0c:	0018      	movs	r0, r3
   1ff0e:	46bd      	mov	sp, r7
   1ff10:	b00a      	add	sp, #40	; 0x28
   1ff12:	bd80      	pop	{r7, pc}
   1ff14:	00020ff1 	.word	0x00020ff1
   1ff18:	0001f451 	.word	0x0001f451
   1ff1c:	000212bd 	.word	0x000212bd
   1ff20:	00020cb9 	.word	0x00020cb9
   1ff24:	0001f431 	.word	0x0001f431
   1ff28:	0001f475 	.word	0x0001f475
   1ff2c:	00020d79 	.word	0x00020d79
   1ff30:	00020881 	.word	0x00020881
   1ff34:	00020da1 	.word	0x00020da1
   1ff38:	000201a1 	.word	0x000201a1
   1ff3c:	00021029 	.word	0x00021029
   1ff40:	00020c21 	.word	0x00020c21
   1ff44:	000200b1 	.word	0x000200b1
   1ff48:	00020899 	.word	0x00020899
   1ff4c:	0001ff55 	.word	0x0001ff55
   1ff50:	000211cd 	.word	0x000211cd

0001ff54 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1ff54:	b580      	push	{r7, lr}
   1ff56:	b084      	sub	sp, #16
   1ff58:	af00      	add	r7, sp, #0
   1ff5a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1ff5c:	687b      	ldr	r3, [r7, #4]
   1ff5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ff60:	2b00      	cmp	r3, #0
   1ff62:	d006      	beq.n	1ff72 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1ff64:	687b      	ldr	r3, [r7, #4]
   1ff66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1ff68:	681b      	ldr	r3, [r3, #0]
   1ff6a:	2205      	movs	r2, #5
   1ff6c:	1ad3      	subs	r3, r2, r3
   1ff6e:	60fb      	str	r3, [r7, #12]
   1ff70:	e001      	b.n	1ff76 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1ff72:	2300      	movs	r3, #0
   1ff74:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1ff76:	68fb      	ldr	r3, [r7, #12]
	}
   1ff78:	0018      	movs	r0, r3
   1ff7a:	46bd      	mov	sp, r7
   1ff7c:	b004      	add	sp, #16
   1ff7e:	bd80      	pop	{r7, pc}

0001ff80 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1ff80:	b580      	push	{r7, lr}
   1ff82:	b086      	sub	sp, #24
   1ff84:	af00      	add	r7, sp, #0
   1ff86:	60f8      	str	r0, [r7, #12]
   1ff88:	60b9      	str	r1, [r7, #8]
   1ff8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1ff8c:	2300      	movs	r3, #0
   1ff8e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1ff90:	68fb      	ldr	r3, [r7, #12]
   1ff92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ff94:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1ff96:	68fb      	ldr	r3, [r7, #12]
   1ff98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ff9a:	2b00      	cmp	r3, #0
   1ff9c:	d10e      	bne.n	1ffbc <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1ff9e:	68fb      	ldr	r3, [r7, #12]
   1ffa0:	681b      	ldr	r3, [r3, #0]
   1ffa2:	2b00      	cmp	r3, #0
   1ffa4:	d14e      	bne.n	20044 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1ffa6:	68fb      	ldr	r3, [r7, #12]
   1ffa8:	685b      	ldr	r3, [r3, #4]
   1ffaa:	0018      	movs	r0, r3
   1ffac:	4b2a      	ldr	r3, [pc, #168]	; (20058 <prvCopyDataToQueue+0xd8>)
   1ffae:	4798      	blx	r3
   1ffb0:	0003      	movs	r3, r0
   1ffb2:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1ffb4:	68fb      	ldr	r3, [r7, #12]
   1ffb6:	2200      	movs	r2, #0
   1ffb8:	605a      	str	r2, [r3, #4]
   1ffba:	e043      	b.n	20044 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1ffbc:	687b      	ldr	r3, [r7, #4]
   1ffbe:	2b00      	cmp	r3, #0
   1ffc0:	d119      	bne.n	1fff6 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1ffc2:	68fb      	ldr	r3, [r7, #12]
   1ffc4:	6898      	ldr	r0, [r3, #8]
   1ffc6:	68fb      	ldr	r3, [r7, #12]
   1ffc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1ffca:	68bb      	ldr	r3, [r7, #8]
   1ffcc:	0019      	movs	r1, r3
   1ffce:	4b23      	ldr	r3, [pc, #140]	; (2005c <prvCopyDataToQueue+0xdc>)
   1ffd0:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1ffd2:	68fb      	ldr	r3, [r7, #12]
   1ffd4:	689a      	ldr	r2, [r3, #8]
   1ffd6:	68fb      	ldr	r3, [r7, #12]
   1ffd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ffda:	18d2      	adds	r2, r2, r3
   1ffdc:	68fb      	ldr	r3, [r7, #12]
   1ffde:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1ffe0:	68fb      	ldr	r3, [r7, #12]
   1ffe2:	689a      	ldr	r2, [r3, #8]
   1ffe4:	68fb      	ldr	r3, [r7, #12]
   1ffe6:	685b      	ldr	r3, [r3, #4]
   1ffe8:	429a      	cmp	r2, r3
   1ffea:	d32b      	bcc.n	20044 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1ffec:	68fb      	ldr	r3, [r7, #12]
   1ffee:	681a      	ldr	r2, [r3, #0]
   1fff0:	68fb      	ldr	r3, [r7, #12]
   1fff2:	609a      	str	r2, [r3, #8]
   1fff4:	e026      	b.n	20044 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1fff6:	68fb      	ldr	r3, [r7, #12]
   1fff8:	68d8      	ldr	r0, [r3, #12]
   1fffa:	68fb      	ldr	r3, [r7, #12]
   1fffc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1fffe:	68bb      	ldr	r3, [r7, #8]
   20000:	0019      	movs	r1, r3
   20002:	4b16      	ldr	r3, [pc, #88]	; (2005c <prvCopyDataToQueue+0xdc>)
   20004:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   20006:	68fb      	ldr	r3, [r7, #12]
   20008:	68da      	ldr	r2, [r3, #12]
   2000a:	68fb      	ldr	r3, [r7, #12]
   2000c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2000e:	425b      	negs	r3, r3
   20010:	18d2      	adds	r2, r2, r3
   20012:	68fb      	ldr	r3, [r7, #12]
   20014:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   20016:	68fb      	ldr	r3, [r7, #12]
   20018:	68da      	ldr	r2, [r3, #12]
   2001a:	68fb      	ldr	r3, [r7, #12]
   2001c:	681b      	ldr	r3, [r3, #0]
   2001e:	429a      	cmp	r2, r3
   20020:	d207      	bcs.n	20032 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   20022:	68fb      	ldr	r3, [r7, #12]
   20024:	685a      	ldr	r2, [r3, #4]
   20026:	68fb      	ldr	r3, [r7, #12]
   20028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2002a:	425b      	negs	r3, r3
   2002c:	18d2      	adds	r2, r2, r3
   2002e:	68fb      	ldr	r3, [r7, #12]
   20030:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   20032:	687b      	ldr	r3, [r7, #4]
   20034:	2b02      	cmp	r3, #2
   20036:	d105      	bne.n	20044 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   20038:	693b      	ldr	r3, [r7, #16]
   2003a:	2b00      	cmp	r3, #0
   2003c:	d002      	beq.n	20044 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   2003e:	693b      	ldr	r3, [r7, #16]
   20040:	3b01      	subs	r3, #1
   20042:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   20044:	693b      	ldr	r3, [r7, #16]
   20046:	1c5a      	adds	r2, r3, #1
   20048:	68fb      	ldr	r3, [r7, #12]
   2004a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   2004c:	697b      	ldr	r3, [r7, #20]
}
   2004e:	0018      	movs	r0, r3
   20050:	46bd      	mov	sp, r7
   20052:	b006      	add	sp, #24
   20054:	bd80      	pop	{r7, pc}
   20056:	46c0      	nop			; (mov r8, r8)
   20058:	0002110d 	.word	0x0002110d
   2005c:	00029881 	.word	0x00029881

00020060 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   20060:	b580      	push	{r7, lr}
   20062:	b082      	sub	sp, #8
   20064:	af00      	add	r7, sp, #0
   20066:	6078      	str	r0, [r7, #4]
   20068:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   2006a:	687b      	ldr	r3, [r7, #4]
   2006c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2006e:	2b00      	cmp	r3, #0
   20070:	d018      	beq.n	200a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   20072:	687b      	ldr	r3, [r7, #4]
   20074:	68da      	ldr	r2, [r3, #12]
   20076:	687b      	ldr	r3, [r7, #4]
   20078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2007a:	18d2      	adds	r2, r2, r3
   2007c:	687b      	ldr	r3, [r7, #4]
   2007e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   20080:	687b      	ldr	r3, [r7, #4]
   20082:	68da      	ldr	r2, [r3, #12]
   20084:	687b      	ldr	r3, [r7, #4]
   20086:	685b      	ldr	r3, [r3, #4]
   20088:	429a      	cmp	r2, r3
   2008a:	d303      	bcc.n	20094 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   2008c:	687b      	ldr	r3, [r7, #4]
   2008e:	681a      	ldr	r2, [r3, #0]
   20090:	687b      	ldr	r3, [r7, #4]
   20092:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   20094:	687b      	ldr	r3, [r7, #4]
   20096:	68d9      	ldr	r1, [r3, #12]
   20098:	687b      	ldr	r3, [r7, #4]
   2009a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   2009c:	683b      	ldr	r3, [r7, #0]
   2009e:	0018      	movs	r0, r3
   200a0:	4b02      	ldr	r3, [pc, #8]	; (200ac <prvCopyDataFromQueue+0x4c>)
   200a2:	4798      	blx	r3
	}
}
   200a4:	46c0      	nop			; (mov r8, r8)
   200a6:	46bd      	mov	sp, r7
   200a8:	b002      	add	sp, #8
   200aa:	bd80      	pop	{r7, pc}
   200ac:	00029881 	.word	0x00029881

000200b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   200b0:	b580      	push	{r7, lr}
   200b2:	b084      	sub	sp, #16
   200b4:	af00      	add	r7, sp, #0
   200b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   200b8:	4b34      	ldr	r3, [pc, #208]	; (2018c <prvUnlockQueue+0xdc>)
   200ba:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   200bc:	230f      	movs	r3, #15
   200be:	18fb      	adds	r3, r7, r3
   200c0:	687a      	ldr	r2, [r7, #4]
   200c2:	2145      	movs	r1, #69	; 0x45
   200c4:	5c52      	ldrb	r2, [r2, r1]
   200c6:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   200c8:	e022      	b.n	20110 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   200ca:	687b      	ldr	r3, [r7, #4]
   200cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   200ce:	2b00      	cmp	r3, #0
   200d0:	d009      	beq.n	200e6 <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   200d2:	687b      	ldr	r3, [r7, #4]
   200d4:	2100      	movs	r1, #0
   200d6:	0018      	movs	r0, r3
   200d8:	4b2d      	ldr	r3, [pc, #180]	; (20190 <prvUnlockQueue+0xe0>)
   200da:	4798      	blx	r3
   200dc:	1e03      	subs	r3, r0, #0
   200de:	d00f      	beq.n	20100 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   200e0:	4b2c      	ldr	r3, [pc, #176]	; (20194 <prvUnlockQueue+0xe4>)
   200e2:	4798      	blx	r3
   200e4:	e00c      	b.n	20100 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   200e6:	687b      	ldr	r3, [r7, #4]
   200e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   200ea:	2b00      	cmp	r3, #0
   200ec:	d017      	beq.n	2011e <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   200ee:	687b      	ldr	r3, [r7, #4]
   200f0:	3324      	adds	r3, #36	; 0x24
   200f2:	0018      	movs	r0, r3
   200f4:	4b28      	ldr	r3, [pc, #160]	; (20198 <prvUnlockQueue+0xe8>)
   200f6:	4798      	blx	r3
   200f8:	1e03      	subs	r3, r0, #0
   200fa:	d001      	beq.n	20100 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   200fc:	4b25      	ldr	r3, [pc, #148]	; (20194 <prvUnlockQueue+0xe4>)
   200fe:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   20100:	230f      	movs	r3, #15
   20102:	18fb      	adds	r3, r7, r3
   20104:	781b      	ldrb	r3, [r3, #0]
   20106:	3b01      	subs	r3, #1
   20108:	b2da      	uxtb	r2, r3
   2010a:	230f      	movs	r3, #15
   2010c:	18fb      	adds	r3, r7, r3
   2010e:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   20110:	230f      	movs	r3, #15
   20112:	18fb      	adds	r3, r7, r3
   20114:	781b      	ldrb	r3, [r3, #0]
   20116:	b25b      	sxtb	r3, r3
   20118:	2b00      	cmp	r3, #0
   2011a:	dcd6      	bgt.n	200ca <prvUnlockQueue+0x1a>
   2011c:	e000      	b.n	20120 <prvUnlockQueue+0x70>
						break;
   2011e:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   20120:	687b      	ldr	r3, [r7, #4]
   20122:	2245      	movs	r2, #69	; 0x45
   20124:	21ff      	movs	r1, #255	; 0xff
   20126:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   20128:	4b1c      	ldr	r3, [pc, #112]	; (2019c <prvUnlockQueue+0xec>)
   2012a:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   2012c:	4b17      	ldr	r3, [pc, #92]	; (2018c <prvUnlockQueue+0xdc>)
   2012e:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   20130:	230e      	movs	r3, #14
   20132:	18fb      	adds	r3, r7, r3
   20134:	687a      	ldr	r2, [r7, #4]
   20136:	2144      	movs	r1, #68	; 0x44
   20138:	5c52      	ldrb	r2, [r2, r1]
   2013a:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   2013c:	e014      	b.n	20168 <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   2013e:	687b      	ldr	r3, [r7, #4]
   20140:	691b      	ldr	r3, [r3, #16]
   20142:	2b00      	cmp	r3, #0
   20144:	d017      	beq.n	20176 <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   20146:	687b      	ldr	r3, [r7, #4]
   20148:	3310      	adds	r3, #16
   2014a:	0018      	movs	r0, r3
   2014c:	4b12      	ldr	r3, [pc, #72]	; (20198 <prvUnlockQueue+0xe8>)
   2014e:	4798      	blx	r3
   20150:	1e03      	subs	r3, r0, #0
   20152:	d001      	beq.n	20158 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   20154:	4b0f      	ldr	r3, [pc, #60]	; (20194 <prvUnlockQueue+0xe4>)
   20156:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   20158:	230e      	movs	r3, #14
   2015a:	18fb      	adds	r3, r7, r3
   2015c:	781b      	ldrb	r3, [r3, #0]
   2015e:	3b01      	subs	r3, #1
   20160:	b2da      	uxtb	r2, r3
   20162:	230e      	movs	r3, #14
   20164:	18fb      	adds	r3, r7, r3
   20166:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   20168:	230e      	movs	r3, #14
   2016a:	18fb      	adds	r3, r7, r3
   2016c:	781b      	ldrb	r3, [r3, #0]
   2016e:	b25b      	sxtb	r3, r3
   20170:	2b00      	cmp	r3, #0
   20172:	dce4      	bgt.n	2013e <prvUnlockQueue+0x8e>
   20174:	e000      	b.n	20178 <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   20176:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   20178:	687b      	ldr	r3, [r7, #4]
   2017a:	2244      	movs	r2, #68	; 0x44
   2017c:	21ff      	movs	r1, #255	; 0xff
   2017e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   20180:	4b06      	ldr	r3, [pc, #24]	; (2019c <prvUnlockQueue+0xec>)
   20182:	4798      	blx	r3
}
   20184:	46c0      	nop			; (mov r8, r8)
   20186:	46bd      	mov	sp, r7
   20188:	b004      	add	sp, #16
   2018a:	bd80      	pop	{r7, pc}
   2018c:	0001f451 	.word	0x0001f451
   20190:	00020285 	.word	0x00020285
   20194:	00020e4d 	.word	0x00020e4d
   20198:	00020cb9 	.word	0x00020cb9
   2019c:	0001f475 	.word	0x0001f475

000201a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   201a0:	b580      	push	{r7, lr}
   201a2:	b084      	sub	sp, #16
   201a4:	af00      	add	r7, sp, #0
   201a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   201a8:	4b08      	ldr	r3, [pc, #32]	; (201cc <prvIsQueueEmpty+0x2c>)
   201aa:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   201ac:	687b      	ldr	r3, [r7, #4]
   201ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   201b0:	2b00      	cmp	r3, #0
   201b2:	d102      	bne.n	201ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   201b4:	2301      	movs	r3, #1
   201b6:	60fb      	str	r3, [r7, #12]
   201b8:	e001      	b.n	201be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   201ba:	2300      	movs	r3, #0
   201bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   201be:	4b04      	ldr	r3, [pc, #16]	; (201d0 <prvIsQueueEmpty+0x30>)
   201c0:	4798      	blx	r3

	return xReturn;
   201c2:	68fb      	ldr	r3, [r7, #12]
}
   201c4:	0018      	movs	r0, r3
   201c6:	46bd      	mov	sp, r7
   201c8:	b004      	add	sp, #16
   201ca:	bd80      	pop	{r7, pc}
   201cc:	0001f451 	.word	0x0001f451
   201d0:	0001f475 	.word	0x0001f475

000201d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   201d4:	b580      	push	{r7, lr}
   201d6:	b084      	sub	sp, #16
   201d8:	af00      	add	r7, sp, #0
   201da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   201dc:	4b09      	ldr	r3, [pc, #36]	; (20204 <prvIsQueueFull+0x30>)
   201de:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   201e0:	687b      	ldr	r3, [r7, #4]
   201e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   201e4:	687b      	ldr	r3, [r7, #4]
   201e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   201e8:	429a      	cmp	r2, r3
   201ea:	d102      	bne.n	201f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   201ec:	2301      	movs	r3, #1
   201ee:	60fb      	str	r3, [r7, #12]
   201f0:	e001      	b.n	201f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   201f2:	2300      	movs	r3, #0
   201f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   201f6:	4b04      	ldr	r3, [pc, #16]	; (20208 <prvIsQueueFull+0x34>)
   201f8:	4798      	blx	r3

	return xReturn;
   201fa:	68fb      	ldr	r3, [r7, #12]
}
   201fc:	0018      	movs	r0, r3
   201fe:	46bd      	mov	sp, r7
   20200:	b004      	add	sp, #16
   20202:	bd80      	pop	{r7, pc}
   20204:	0001f451 	.word	0x0001f451
   20208:	0001f475 	.word	0x0001f475

0002020c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   2020c:	b580      	push	{r7, lr}
   2020e:	b086      	sub	sp, #24
   20210:	af00      	add	r7, sp, #0
   20212:	60f8      	str	r0, [r7, #12]
   20214:	60b9      	str	r1, [r7, #8]
   20216:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   20218:	68fb      	ldr	r3, [r7, #12]
   2021a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   2021c:	4b15      	ldr	r3, [pc, #84]	; (20274 <vQueueWaitForMessageRestricted+0x68>)
   2021e:	4798      	blx	r3
   20220:	697b      	ldr	r3, [r7, #20]
   20222:	2244      	movs	r2, #68	; 0x44
   20224:	5c9b      	ldrb	r3, [r3, r2]
   20226:	b25b      	sxtb	r3, r3
   20228:	3301      	adds	r3, #1
   2022a:	d103      	bne.n	20234 <vQueueWaitForMessageRestricted+0x28>
   2022c:	697b      	ldr	r3, [r7, #20]
   2022e:	2244      	movs	r2, #68	; 0x44
   20230:	2100      	movs	r1, #0
   20232:	5499      	strb	r1, [r3, r2]
   20234:	697b      	ldr	r3, [r7, #20]
   20236:	2245      	movs	r2, #69	; 0x45
   20238:	5c9b      	ldrb	r3, [r3, r2]
   2023a:	b25b      	sxtb	r3, r3
   2023c:	3301      	adds	r3, #1
   2023e:	d103      	bne.n	20248 <vQueueWaitForMessageRestricted+0x3c>
   20240:	697b      	ldr	r3, [r7, #20]
   20242:	2245      	movs	r2, #69	; 0x45
   20244:	2100      	movs	r1, #0
   20246:	5499      	strb	r1, [r3, r2]
   20248:	4b0b      	ldr	r3, [pc, #44]	; (20278 <vQueueWaitForMessageRestricted+0x6c>)
   2024a:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   2024c:	697b      	ldr	r3, [r7, #20]
   2024e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   20250:	2b00      	cmp	r3, #0
   20252:	d106      	bne.n	20262 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   20254:	697b      	ldr	r3, [r7, #20]
   20256:	3324      	adds	r3, #36	; 0x24
   20258:	687a      	ldr	r2, [r7, #4]
   2025a:	68b9      	ldr	r1, [r7, #8]
   2025c:	0018      	movs	r0, r3
   2025e:	4b07      	ldr	r3, [pc, #28]	; (2027c <vQueueWaitForMessageRestricted+0x70>)
   20260:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   20262:	697b      	ldr	r3, [r7, #20]
   20264:	0018      	movs	r0, r3
   20266:	4b06      	ldr	r3, [pc, #24]	; (20280 <vQueueWaitForMessageRestricted+0x74>)
   20268:	4798      	blx	r3
	}
   2026a:	46c0      	nop			; (mov r8, r8)
   2026c:	46bd      	mov	sp, r7
   2026e:	b006      	add	sp, #24
   20270:	bd80      	pop	{r7, pc}
   20272:	46c0      	nop			; (mov r8, r8)
   20274:	0001f451 	.word	0x0001f451
   20278:	0001f475 	.word	0x0001f475
   2027c:	00020c65 	.word	0x00020c65
   20280:	000200b1 	.word	0x000200b1

00020284 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   20284:	b580      	push	{r7, lr}
   20286:	b086      	sub	sp, #24
   20288:	af00      	add	r7, sp, #0
   2028a:	6078      	str	r0, [r7, #4]
   2028c:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   2028e:	687b      	ldr	r3, [r7, #4]
   20290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   20292:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   20294:	2300      	movs	r3, #0
   20296:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   20298:	693b      	ldr	r3, [r7, #16]
   2029a:	2b00      	cmp	r3, #0
   2029c:	d101      	bne.n	202a2 <prvNotifyQueueSetContainer+0x1e>
   2029e:	b672      	cpsid	i
   202a0:	e7fe      	b.n	202a0 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   202a2:	693b      	ldr	r3, [r7, #16]
   202a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   202a6:	693b      	ldr	r3, [r7, #16]
   202a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   202aa:	429a      	cmp	r2, r3
   202ac:	d301      	bcc.n	202b2 <prvNotifyQueueSetContainer+0x2e>
   202ae:	b672      	cpsid	i
   202b0:	e7fe      	b.n	202b0 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   202b2:	693b      	ldr	r3, [r7, #16]
   202b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   202b6:	693b      	ldr	r3, [r7, #16]
   202b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   202ba:	429a      	cmp	r2, r3
   202bc:	d22a      	bcs.n	20314 <prvNotifyQueueSetContainer+0x90>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   202be:	230f      	movs	r3, #15
   202c0:	18fb      	adds	r3, r7, r3
   202c2:	693a      	ldr	r2, [r7, #16]
   202c4:	2145      	movs	r1, #69	; 0x45
   202c6:	5c52      	ldrb	r2, [r2, r1]
   202c8:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   202ca:	683a      	ldr	r2, [r7, #0]
   202cc:	1d39      	adds	r1, r7, #4
   202ce:	693b      	ldr	r3, [r7, #16]
   202d0:	0018      	movs	r0, r3
   202d2:	4b13      	ldr	r3, [pc, #76]	; (20320 <prvNotifyQueueSetContainer+0x9c>)
   202d4:	4798      	blx	r3
   202d6:	0003      	movs	r3, r0
   202d8:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   202da:	230f      	movs	r3, #15
   202dc:	18fb      	adds	r3, r7, r3
   202de:	781b      	ldrb	r3, [r3, #0]
   202e0:	b25b      	sxtb	r3, r3
   202e2:	3301      	adds	r3, #1
   202e4:	d10d      	bne.n	20302 <prvNotifyQueueSetContainer+0x7e>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   202e6:	693b      	ldr	r3, [r7, #16]
   202e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   202ea:	2b00      	cmp	r3, #0
   202ec:	d012      	beq.n	20314 <prvNotifyQueueSetContainer+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   202ee:	693b      	ldr	r3, [r7, #16]
   202f0:	3324      	adds	r3, #36	; 0x24
   202f2:	0018      	movs	r0, r3
   202f4:	4b0b      	ldr	r3, [pc, #44]	; (20324 <prvNotifyQueueSetContainer+0xa0>)
   202f6:	4798      	blx	r3
   202f8:	1e03      	subs	r3, r0, #0
   202fa:	d00b      	beq.n	20314 <prvNotifyQueueSetContainer+0x90>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   202fc:	2301      	movs	r3, #1
   202fe:	617b      	str	r3, [r7, #20]
   20300:	e008      	b.n	20314 <prvNotifyQueueSetContainer+0x90>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   20302:	230f      	movs	r3, #15
   20304:	18fb      	adds	r3, r7, r3
   20306:	781b      	ldrb	r3, [r3, #0]
   20308:	3301      	adds	r3, #1
   2030a:	b2db      	uxtb	r3, r3
   2030c:	b259      	sxtb	r1, r3
   2030e:	693b      	ldr	r3, [r7, #16]
   20310:	2245      	movs	r2, #69	; 0x45
   20312:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   20314:	697b      	ldr	r3, [r7, #20]
	}
   20316:	0018      	movs	r0, r3
   20318:	46bd      	mov	sp, r7
   2031a:	b006      	add	sp, #24
   2031c:	bd80      	pop	{r7, pc}
   2031e:	46c0      	nop			; (mov r8, r8)
   20320:	0001ff81 	.word	0x0001ff81
   20324:	00020cb9 	.word	0x00020cb9

00020328 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   20328:	b590      	push	{r4, r7, lr}
   2032a:	b08d      	sub	sp, #52	; 0x34
   2032c:	af04      	add	r7, sp, #16
   2032e:	60f8      	str	r0, [r7, #12]
   20330:	60b9      	str	r1, [r7, #8]
   20332:	603b      	str	r3, [r7, #0]
   20334:	1dbb      	adds	r3, r7, #6
   20336:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   20338:	1dbb      	adds	r3, r7, #6
   2033a:	881b      	ldrh	r3, [r3, #0]
   2033c:	009b      	lsls	r3, r3, #2
   2033e:	0018      	movs	r0, r3
   20340:	4b1d      	ldr	r3, [pc, #116]	; (203b8 <xTaskCreate+0x90>)
   20342:	4798      	blx	r3
   20344:	0003      	movs	r3, r0
   20346:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   20348:	697b      	ldr	r3, [r7, #20]
   2034a:	2b00      	cmp	r3, #0
   2034c:	d010      	beq.n	20370 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   2034e:	2050      	movs	r0, #80	; 0x50
   20350:	4b19      	ldr	r3, [pc, #100]	; (203b8 <xTaskCreate+0x90>)
   20352:	4798      	blx	r3
   20354:	0003      	movs	r3, r0
   20356:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   20358:	69fb      	ldr	r3, [r7, #28]
   2035a:	2b00      	cmp	r3, #0
   2035c:	d003      	beq.n	20366 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   2035e:	69fb      	ldr	r3, [r7, #28]
   20360:	697a      	ldr	r2, [r7, #20]
   20362:	631a      	str	r2, [r3, #48]	; 0x30
   20364:	e006      	b.n	20374 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   20366:	697b      	ldr	r3, [r7, #20]
   20368:	0018      	movs	r0, r3
   2036a:	4b14      	ldr	r3, [pc, #80]	; (203bc <xTaskCreate+0x94>)
   2036c:	4798      	blx	r3
   2036e:	e001      	b.n	20374 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   20370:	2300      	movs	r3, #0
   20372:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   20374:	69fb      	ldr	r3, [r7, #28]
   20376:	2b00      	cmp	r3, #0
   20378:	d016      	beq.n	203a8 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   2037a:	1dbb      	adds	r3, r7, #6
   2037c:	881a      	ldrh	r2, [r3, #0]
   2037e:	683c      	ldr	r4, [r7, #0]
   20380:	68b9      	ldr	r1, [r7, #8]
   20382:	68f8      	ldr	r0, [r7, #12]
   20384:	2300      	movs	r3, #0
   20386:	9303      	str	r3, [sp, #12]
   20388:	69fb      	ldr	r3, [r7, #28]
   2038a:	9302      	str	r3, [sp, #8]
   2038c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2038e:	9301      	str	r3, [sp, #4]
   20390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   20392:	9300      	str	r3, [sp, #0]
   20394:	0023      	movs	r3, r4
   20396:	4c0a      	ldr	r4, [pc, #40]	; (203c0 <xTaskCreate+0x98>)
   20398:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   2039a:	69fb      	ldr	r3, [r7, #28]
   2039c:	0018      	movs	r0, r3
   2039e:	4b09      	ldr	r3, [pc, #36]	; (203c4 <xTaskCreate+0x9c>)
   203a0:	4798      	blx	r3
			xReturn = pdPASS;
   203a2:	2301      	movs	r3, #1
   203a4:	61bb      	str	r3, [r7, #24]
   203a6:	e002      	b.n	203ae <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   203a8:	2301      	movs	r3, #1
   203aa:	425b      	negs	r3, r3
   203ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   203ae:	69bb      	ldr	r3, [r7, #24]
	}
   203b0:	0018      	movs	r0, r3
   203b2:	46bd      	mov	sp, r7
   203b4:	b009      	add	sp, #36	; 0x24
   203b6:	bd90      	pop	{r4, r7, pc}
   203b8:	0001f58d 	.word	0x0001f58d
   203bc:	0001f5c1 	.word	0x0001f5c1
   203c0:	000203c9 	.word	0x000203c9
   203c4:	000204c5 	.word	0x000204c5

000203c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   203c8:	b580      	push	{r7, lr}
   203ca:	b086      	sub	sp, #24
   203cc:	af00      	add	r7, sp, #0
   203ce:	60f8      	str	r0, [r7, #12]
   203d0:	60b9      	str	r1, [r7, #8]
   203d2:	607a      	str	r2, [r7, #4]
   203d4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   203d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   203d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   203da:	687b      	ldr	r3, [r7, #4]
   203dc:	4936      	ldr	r1, [pc, #216]	; (204b8 <prvInitialiseNewTask+0xf0>)
   203de:	468c      	mov	ip, r1
   203e0:	4463      	add	r3, ip
   203e2:	009b      	lsls	r3, r3, #2
   203e4:	18d3      	adds	r3, r2, r3
   203e6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   203e8:	693b      	ldr	r3, [r7, #16]
   203ea:	2207      	movs	r2, #7
   203ec:	4393      	bics	r3, r2
   203ee:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   203f0:	693b      	ldr	r3, [r7, #16]
   203f2:	2207      	movs	r2, #7
   203f4:	4013      	ands	r3, r2
   203f6:	d001      	beq.n	203fc <prvInitialiseNewTask+0x34>
   203f8:	b672      	cpsid	i
   203fa:	e7fe      	b.n	203fa <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   203fc:	2300      	movs	r3, #0
   203fe:	617b      	str	r3, [r7, #20]
   20400:	e013      	b.n	2042a <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   20402:	68ba      	ldr	r2, [r7, #8]
   20404:	697b      	ldr	r3, [r7, #20]
   20406:	18d3      	adds	r3, r2, r3
   20408:	7818      	ldrb	r0, [r3, #0]
   2040a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2040c:	2134      	movs	r1, #52	; 0x34
   2040e:	697b      	ldr	r3, [r7, #20]
   20410:	18d3      	adds	r3, r2, r3
   20412:	185b      	adds	r3, r3, r1
   20414:	1c02      	adds	r2, r0, #0
   20416:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   20418:	68ba      	ldr	r2, [r7, #8]
   2041a:	697b      	ldr	r3, [r7, #20]
   2041c:	18d3      	adds	r3, r2, r3
   2041e:	781b      	ldrb	r3, [r3, #0]
   20420:	2b00      	cmp	r3, #0
   20422:	d006      	beq.n	20432 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   20424:	697b      	ldr	r3, [r7, #20]
   20426:	3301      	adds	r3, #1
   20428:	617b      	str	r3, [r7, #20]
   2042a:	697b      	ldr	r3, [r7, #20]
   2042c:	2b09      	cmp	r3, #9
   2042e:	d9e8      	bls.n	20402 <prvInitialiseNewTask+0x3a>
   20430:	e000      	b.n	20434 <prvInitialiseNewTask+0x6c>
		{
			break;
   20432:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   20434:	6abb      	ldr	r3, [r7, #40]	; 0x28
   20436:	223d      	movs	r2, #61	; 0x3d
   20438:	2100      	movs	r1, #0
   2043a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   2043c:	6a3b      	ldr	r3, [r7, #32]
   2043e:	2b04      	cmp	r3, #4
   20440:	d901      	bls.n	20446 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   20442:	2304      	movs	r3, #4
   20444:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   20446:	6abb      	ldr	r3, [r7, #40]	; 0x28
   20448:	6a3a      	ldr	r2, [r7, #32]
   2044a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   2044c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2044e:	6a3a      	ldr	r2, [r7, #32]
   20450:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
   20452:	6abb      	ldr	r3, [r7, #40]	; 0x28
   20454:	2200      	movs	r2, #0
   20456:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   20458:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2045a:	3304      	adds	r3, #4
   2045c:	0018      	movs	r0, r3
   2045e:	4b17      	ldr	r3, [pc, #92]	; (204bc <prvInitialiseNewTask+0xf4>)
   20460:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   20462:	6abb      	ldr	r3, [r7, #40]	; 0x28
   20464:	3318      	adds	r3, #24
   20466:	0018      	movs	r0, r3
   20468:	4b14      	ldr	r3, [pc, #80]	; (204bc <prvInitialiseNewTask+0xf4>)
   2046a:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   2046c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2046e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   20470:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   20472:	6a3b      	ldr	r3, [r7, #32]
   20474:	2205      	movs	r2, #5
   20476:	1ad2      	subs	r2, r2, r3
   20478:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2047a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   2047c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2047e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   20480:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   20482:	6abb      	ldr	r3, [r7, #40]	; 0x28
   20484:	2200      	movs	r2, #0
   20486:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   20488:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2048a:	224c      	movs	r2, #76	; 0x4c
   2048c:	2100      	movs	r1, #0
   2048e:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   20490:	683a      	ldr	r2, [r7, #0]
   20492:	68f9      	ldr	r1, [r7, #12]
   20494:	693b      	ldr	r3, [r7, #16]
   20496:	0018      	movs	r0, r3
   20498:	4b09      	ldr	r3, [pc, #36]	; (204c0 <prvInitialiseNewTask+0xf8>)
   2049a:	4798      	blx	r3
   2049c:	0002      	movs	r2, r0
   2049e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   204a0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   204a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   204a4:	2b00      	cmp	r3, #0
   204a6:	d002      	beq.n	204ae <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   204a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   204aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   204ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   204ae:	46c0      	nop			; (mov r8, r8)
   204b0:	46bd      	mov	sp, r7
   204b2:	b006      	add	sp, #24
   204b4:	bd80      	pop	{r7, pc}
   204b6:	46c0      	nop			; (mov r8, r8)
   204b8:	3fffffff 	.word	0x3fffffff
   204bc:	0001f631 	.word	0x0001f631
   204c0:	0001f311 	.word	0x0001f311

000204c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   204c4:	b580      	push	{r7, lr}
   204c6:	b082      	sub	sp, #8
   204c8:	af00      	add	r7, sp, #0
   204ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   204cc:	4b29      	ldr	r3, [pc, #164]	; (20574 <prvAddNewTaskToReadyList+0xb0>)
   204ce:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   204d0:	4b29      	ldr	r3, [pc, #164]	; (20578 <prvAddNewTaskToReadyList+0xb4>)
   204d2:	681b      	ldr	r3, [r3, #0]
   204d4:	1c5a      	adds	r2, r3, #1
   204d6:	4b28      	ldr	r3, [pc, #160]	; (20578 <prvAddNewTaskToReadyList+0xb4>)
   204d8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   204da:	4b28      	ldr	r3, [pc, #160]	; (2057c <prvAddNewTaskToReadyList+0xb8>)
   204dc:	681b      	ldr	r3, [r3, #0]
   204de:	2b00      	cmp	r3, #0
   204e0:	d109      	bne.n	204f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   204e2:	4b26      	ldr	r3, [pc, #152]	; (2057c <prvAddNewTaskToReadyList+0xb8>)
   204e4:	687a      	ldr	r2, [r7, #4]
   204e6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   204e8:	4b23      	ldr	r3, [pc, #140]	; (20578 <prvAddNewTaskToReadyList+0xb4>)
   204ea:	681b      	ldr	r3, [r3, #0]
   204ec:	2b01      	cmp	r3, #1
   204ee:	d110      	bne.n	20512 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   204f0:	4b23      	ldr	r3, [pc, #140]	; (20580 <prvAddNewTaskToReadyList+0xbc>)
   204f2:	4798      	blx	r3
   204f4:	e00d      	b.n	20512 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   204f6:	4b23      	ldr	r3, [pc, #140]	; (20584 <prvAddNewTaskToReadyList+0xc0>)
   204f8:	681b      	ldr	r3, [r3, #0]
   204fa:	2b00      	cmp	r3, #0
   204fc:	d109      	bne.n	20512 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   204fe:	4b1f      	ldr	r3, [pc, #124]	; (2057c <prvAddNewTaskToReadyList+0xb8>)
   20500:	681b      	ldr	r3, [r3, #0]
   20502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20504:	687b      	ldr	r3, [r7, #4]
   20506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20508:	429a      	cmp	r2, r3
   2050a:	d802      	bhi.n	20512 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   2050c:	4b1b      	ldr	r3, [pc, #108]	; (2057c <prvAddNewTaskToReadyList+0xb8>)
   2050e:	687a      	ldr	r2, [r7, #4]
   20510:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   20512:	4b1d      	ldr	r3, [pc, #116]	; (20588 <prvAddNewTaskToReadyList+0xc4>)
   20514:	681b      	ldr	r3, [r3, #0]
   20516:	1c5a      	adds	r2, r3, #1
   20518:	4b1b      	ldr	r3, [pc, #108]	; (20588 <prvAddNewTaskToReadyList+0xc4>)
   2051a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
   2051c:	687b      	ldr	r3, [r7, #4]
   2051e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20520:	4b1a      	ldr	r3, [pc, #104]	; (2058c <prvAddNewTaskToReadyList+0xc8>)
   20522:	681b      	ldr	r3, [r3, #0]
   20524:	429a      	cmp	r2, r3
   20526:	d903      	bls.n	20530 <prvAddNewTaskToReadyList+0x6c>
   20528:	687b      	ldr	r3, [r7, #4]
   2052a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2052c:	4b17      	ldr	r3, [pc, #92]	; (2058c <prvAddNewTaskToReadyList+0xc8>)
   2052e:	601a      	str	r2, [r3, #0]
   20530:	687b      	ldr	r3, [r7, #4]
   20532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20534:	0013      	movs	r3, r2
   20536:	009b      	lsls	r3, r3, #2
   20538:	189b      	adds	r3, r3, r2
   2053a:	009b      	lsls	r3, r3, #2
   2053c:	4a14      	ldr	r2, [pc, #80]	; (20590 <prvAddNewTaskToReadyList+0xcc>)
   2053e:	189a      	adds	r2, r3, r2
   20540:	687b      	ldr	r3, [r7, #4]
   20542:	3304      	adds	r3, #4
   20544:	0019      	movs	r1, r3
   20546:	0010      	movs	r0, r2
   20548:	4b12      	ldr	r3, [pc, #72]	; (20594 <prvAddNewTaskToReadyList+0xd0>)
   2054a:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   2054c:	4b12      	ldr	r3, [pc, #72]	; (20598 <prvAddNewTaskToReadyList+0xd4>)
   2054e:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   20550:	4b0c      	ldr	r3, [pc, #48]	; (20584 <prvAddNewTaskToReadyList+0xc0>)
   20552:	681b      	ldr	r3, [r3, #0]
   20554:	2b00      	cmp	r3, #0
   20556:	d008      	beq.n	2056a <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   20558:	4b08      	ldr	r3, [pc, #32]	; (2057c <prvAddNewTaskToReadyList+0xb8>)
   2055a:	681b      	ldr	r3, [r3, #0]
   2055c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2055e:	687b      	ldr	r3, [r7, #4]
   20560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20562:	429a      	cmp	r2, r3
   20564:	d201      	bcs.n	2056a <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
   20566:	4b0d      	ldr	r3, [pc, #52]	; (2059c <prvAddNewTaskToReadyList+0xd8>)
   20568:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   2056a:	46c0      	nop			; (mov r8, r8)
   2056c:	46bd      	mov	sp, r7
   2056e:	b002      	add	sp, #8
   20570:	bd80      	pop	{r7, pc}
   20572:	46c0      	nop			; (mov r8, r8)
   20574:	0001f451 	.word	0x0001f451
   20578:	20000390 	.word	0x20000390
   2057c:	200002b8 	.word	0x200002b8
   20580:	00020e89 	.word	0x00020e89
   20584:	2000039c 	.word	0x2000039c
   20588:	200003ac 	.word	0x200003ac
   2058c:	20000398 	.word	0x20000398
   20590:	200002bc 	.word	0x200002bc
   20594:	0001f647 	.word	0x0001f647
   20598:	0001f475 	.word	0x0001f475
   2059c:	0001f431 	.word	0x0001f431

000205a0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
   205a0:	b580      	push	{r7, lr}
   205a2:	b086      	sub	sp, #24
   205a4:	af00      	add	r7, sp, #0
   205a6:	6078      	str	r0, [r7, #4]
   205a8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
   205aa:	2300      	movs	r3, #0
   205ac:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
   205ae:	687b      	ldr	r3, [r7, #4]
   205b0:	2b00      	cmp	r3, #0
   205b2:	d101      	bne.n	205b8 <vTaskDelayUntil+0x18>
   205b4:	b672      	cpsid	i
   205b6:	e7fe      	b.n	205b6 <vTaskDelayUntil+0x16>
		configASSERT( ( xTimeIncrement > 0U ) );
   205b8:	683b      	ldr	r3, [r7, #0]
   205ba:	2b00      	cmp	r3, #0
   205bc:	d101      	bne.n	205c2 <vTaskDelayUntil+0x22>
   205be:	b672      	cpsid	i
   205c0:	e7fe      	b.n	205c0 <vTaskDelayUntil+0x20>
		configASSERT( uxSchedulerSuspended == 0 );
   205c2:	4b23      	ldr	r3, [pc, #140]	; (20650 <vTaskDelayUntil+0xb0>)
   205c4:	681b      	ldr	r3, [r3, #0]
   205c6:	2b00      	cmp	r3, #0
   205c8:	d001      	beq.n	205ce <vTaskDelayUntil+0x2e>
   205ca:	b672      	cpsid	i
   205cc:	e7fe      	b.n	205cc <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
   205ce:	4b21      	ldr	r3, [pc, #132]	; (20654 <vTaskDelayUntil+0xb4>)
   205d0:	4798      	blx	r3
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   205d2:	4b21      	ldr	r3, [pc, #132]	; (20658 <vTaskDelayUntil+0xb8>)
   205d4:	681b      	ldr	r3, [r3, #0]
   205d6:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   205d8:	687b      	ldr	r3, [r7, #4]
   205da:	681a      	ldr	r2, [r3, #0]
   205dc:	683b      	ldr	r3, [r7, #0]
   205de:	18d3      	adds	r3, r2, r3
   205e0:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
   205e2:	687b      	ldr	r3, [r7, #4]
   205e4:	681a      	ldr	r2, [r3, #0]
   205e6:	693b      	ldr	r3, [r7, #16]
   205e8:	429a      	cmp	r2, r3
   205ea:	d90b      	bls.n	20604 <vTaskDelayUntil+0x64>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
   205ec:	687b      	ldr	r3, [r7, #4]
   205ee:	681a      	ldr	r2, [r3, #0]
   205f0:	68fb      	ldr	r3, [r7, #12]
   205f2:	429a      	cmp	r2, r3
   205f4:	d911      	bls.n	2061a <vTaskDelayUntil+0x7a>
   205f6:	68fa      	ldr	r2, [r7, #12]
   205f8:	693b      	ldr	r3, [r7, #16]
   205fa:	429a      	cmp	r2, r3
   205fc:	d90d      	bls.n	2061a <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
   205fe:	2301      	movs	r3, #1
   20600:	617b      	str	r3, [r7, #20]
   20602:	e00a      	b.n	2061a <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
   20604:	687b      	ldr	r3, [r7, #4]
   20606:	681a      	ldr	r2, [r3, #0]
   20608:	68fb      	ldr	r3, [r7, #12]
   2060a:	429a      	cmp	r2, r3
   2060c:	d803      	bhi.n	20616 <vTaskDelayUntil+0x76>
   2060e:	68fa      	ldr	r2, [r7, #12]
   20610:	693b      	ldr	r3, [r7, #16]
   20612:	429a      	cmp	r2, r3
   20614:	d901      	bls.n	2061a <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
   20616:	2301      	movs	r3, #1
   20618:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   2061a:	687b      	ldr	r3, [r7, #4]
   2061c:	68fa      	ldr	r2, [r7, #12]
   2061e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
   20620:	697b      	ldr	r3, [r7, #20]
   20622:	2b00      	cmp	r3, #0
   20624:	d006      	beq.n	20634 <vTaskDelayUntil+0x94>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
   20626:	68fa      	ldr	r2, [r7, #12]
   20628:	693b      	ldr	r3, [r7, #16]
   2062a:	1ad3      	subs	r3, r2, r3
   2062c:	2100      	movs	r1, #0
   2062e:	0018      	movs	r0, r3
   20630:	4b0a      	ldr	r3, [pc, #40]	; (2065c <vTaskDelayUntil+0xbc>)
   20632:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   20634:	4b0a      	ldr	r3, [pc, #40]	; (20660 <vTaskDelayUntil+0xc0>)
   20636:	4798      	blx	r3
   20638:	0003      	movs	r3, r0
   2063a:	60bb      	str	r3, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   2063c:	68bb      	ldr	r3, [r7, #8]
   2063e:	2b00      	cmp	r3, #0
   20640:	d101      	bne.n	20646 <vTaskDelayUntil+0xa6>
		{
			portYIELD_WITHIN_API();
   20642:	4b08      	ldr	r3, [pc, #32]	; (20664 <vTaskDelayUntil+0xc4>)
   20644:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   20646:	46c0      	nop			; (mov r8, r8)
   20648:	46bd      	mov	sp, r7
   2064a:	b006      	add	sp, #24
   2064c:	bd80      	pop	{r7, pc}
   2064e:	46c0      	nop			; (mov r8, r8)
   20650:	200003b8 	.word	0x200003b8
   20654:	00020881 	.word	0x00020881
   20658:	20000394 	.word	0x20000394
   2065c:	00021479 	.word	0x00021479
   20660:	00020899 	.word	0x00020899
   20664:	0001f431 	.word	0x0001f431

00020668 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   20668:	b580      	push	{r7, lr}
   2066a:	b084      	sub	sp, #16
   2066c:	af00      	add	r7, sp, #0
   2066e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   20670:	2300      	movs	r3, #0
   20672:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   20674:	687b      	ldr	r3, [r7, #4]
   20676:	2b00      	cmp	r3, #0
   20678:	d010      	beq.n	2069c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   2067a:	4b0d      	ldr	r3, [pc, #52]	; (206b0 <vTaskDelay+0x48>)
   2067c:	681b      	ldr	r3, [r3, #0]
   2067e:	2b00      	cmp	r3, #0
   20680:	d001      	beq.n	20686 <vTaskDelay+0x1e>
   20682:	b672      	cpsid	i
   20684:	e7fe      	b.n	20684 <vTaskDelay+0x1c>
			vTaskSuspendAll();
   20686:	4b0b      	ldr	r3, [pc, #44]	; (206b4 <vTaskDelay+0x4c>)
   20688:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   2068a:	687b      	ldr	r3, [r7, #4]
   2068c:	2100      	movs	r1, #0
   2068e:	0018      	movs	r0, r3
   20690:	4b09      	ldr	r3, [pc, #36]	; (206b8 <vTaskDelay+0x50>)
   20692:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   20694:	4b09      	ldr	r3, [pc, #36]	; (206bc <vTaskDelay+0x54>)
   20696:	4798      	blx	r3
   20698:	0003      	movs	r3, r0
   2069a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   2069c:	68fb      	ldr	r3, [r7, #12]
   2069e:	2b00      	cmp	r3, #0
   206a0:	d101      	bne.n	206a6 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
   206a2:	4b07      	ldr	r3, [pc, #28]	; (206c0 <vTaskDelay+0x58>)
   206a4:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   206a6:	46c0      	nop			; (mov r8, r8)
   206a8:	46bd      	mov	sp, r7
   206aa:	b004      	add	sp, #16
   206ac:	bd80      	pop	{r7, pc}
   206ae:	46c0      	nop			; (mov r8, r8)
   206b0:	200003b8 	.word	0x200003b8
   206b4:	00020881 	.word	0x00020881
   206b8:	00021479 	.word	0x00021479
   206bc:	00020899 	.word	0x00020899
   206c0:	0001f431 	.word	0x0001f431

000206c4 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
   206c4:	b580      	push	{r7, lr}
   206c6:	b086      	sub	sp, #24
   206c8:	af00      	add	r7, sp, #0
   206ca:	6078      	str	r0, [r7, #4]
   206cc:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
   206ce:	2300      	movs	r3, #0
   206d0:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
   206d2:	683b      	ldr	r3, [r7, #0]
   206d4:	2b04      	cmp	r3, #4
   206d6:	d901      	bls.n	206dc <vTaskPrioritySet+0x18>
   206d8:	b672      	cpsid	i
   206da:	e7fe      	b.n	206da <vTaskPrioritySet+0x16>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   206dc:	683b      	ldr	r3, [r7, #0]
   206de:	2b04      	cmp	r3, #4
   206e0:	d901      	bls.n	206e6 <vTaskPrioritySet+0x22>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   206e2:	2304      	movs	r3, #4
   206e4:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
   206e6:	4b3d      	ldr	r3, [pc, #244]	; (207dc <vTaskPrioritySet+0x118>)
   206e8:	4798      	blx	r3
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
   206ea:	687b      	ldr	r3, [r7, #4]
   206ec:	2b00      	cmp	r3, #0
   206ee:	d102      	bne.n	206f6 <vTaskPrioritySet+0x32>
   206f0:	4b3b      	ldr	r3, [pc, #236]	; (207e0 <vTaskPrioritySet+0x11c>)
   206f2:	681b      	ldr	r3, [r3, #0]
   206f4:	e000      	b.n	206f8 <vTaskPrioritySet+0x34>
   206f6:	687b      	ldr	r3, [r7, #4]
   206f8:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
   206fa:	693b      	ldr	r3, [r7, #16]
   206fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   206fe:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
   20700:	68fa      	ldr	r2, [r7, #12]
   20702:	683b      	ldr	r3, [r7, #0]
   20704:	429a      	cmp	r2, r3
   20706:	d062      	beq.n	207ce <vTaskPrioritySet+0x10a>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
   20708:	683a      	ldr	r2, [r7, #0]
   2070a:	68fb      	ldr	r3, [r7, #12]
   2070c:	429a      	cmp	r2, r3
   2070e:	d90d      	bls.n	2072c <vTaskPrioritySet+0x68>
				{
					if( pxTCB != pxCurrentTCB )
   20710:	4b33      	ldr	r3, [pc, #204]	; (207e0 <vTaskPrioritySet+0x11c>)
   20712:	681b      	ldr	r3, [r3, #0]
   20714:	693a      	ldr	r2, [r7, #16]
   20716:	429a      	cmp	r2, r3
   20718:	d00f      	beq.n	2073a <vTaskPrioritySet+0x76>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
   2071a:	4b31      	ldr	r3, [pc, #196]	; (207e0 <vTaskPrioritySet+0x11c>)
   2071c:	681b      	ldr	r3, [r3, #0]
   2071e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20720:	683b      	ldr	r3, [r7, #0]
   20722:	429a      	cmp	r2, r3
   20724:	d809      	bhi.n	2073a <vTaskPrioritySet+0x76>
						{
							xYieldRequired = pdTRUE;
   20726:	2301      	movs	r3, #1
   20728:	617b      	str	r3, [r7, #20]
   2072a:	e006      	b.n	2073a <vTaskPrioritySet+0x76>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
   2072c:	4b2c      	ldr	r3, [pc, #176]	; (207e0 <vTaskPrioritySet+0x11c>)
   2072e:	681b      	ldr	r3, [r3, #0]
   20730:	693a      	ldr	r2, [r7, #16]
   20732:	429a      	cmp	r2, r3
   20734:	d101      	bne.n	2073a <vTaskPrioritySet+0x76>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
   20736:	2301      	movs	r3, #1
   20738:	617b      	str	r3, [r7, #20]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
   2073a:	693b      	ldr	r3, [r7, #16]
   2073c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2073e:	60bb      	str	r3, [r7, #8]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
   20740:	693b      	ldr	r3, [r7, #16]
   20742:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   20744:	693b      	ldr	r3, [r7, #16]
   20746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20748:	429a      	cmp	r2, r3
   2074a:	d102      	bne.n	20752 <vTaskPrioritySet+0x8e>
					{
						pxTCB->uxPriority = uxNewPriority;
   2074c:	693b      	ldr	r3, [r7, #16]
   2074e:	683a      	ldr	r2, [r7, #0]
   20750:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
   20752:	693b      	ldr	r3, [r7, #16]
   20754:	683a      	ldr	r2, [r7, #0]
   20756:	641a      	str	r2, [r3, #64]	; 0x40
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   20758:	693b      	ldr	r3, [r7, #16]
   2075a:	699b      	ldr	r3, [r3, #24]
   2075c:	2b00      	cmp	r3, #0
   2075e:	db04      	blt.n	2076a <vTaskPrioritySet+0xa6>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   20760:	683b      	ldr	r3, [r7, #0]
   20762:	2205      	movs	r2, #5
   20764:	1ad2      	subs	r2, r2, r3
   20766:	693b      	ldr	r3, [r7, #16]
   20768:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   2076a:	693b      	ldr	r3, [r7, #16]
   2076c:	6959      	ldr	r1, [r3, #20]
   2076e:	68ba      	ldr	r2, [r7, #8]
   20770:	0013      	movs	r3, r2
   20772:	009b      	lsls	r3, r3, #2
   20774:	189b      	adds	r3, r3, r2
   20776:	009b      	lsls	r3, r3, #2
   20778:	4a1a      	ldr	r2, [pc, #104]	; (207e4 <vTaskPrioritySet+0x120>)
   2077a:	189b      	adds	r3, r3, r2
   2077c:	4299      	cmp	r1, r3
   2077e:	d101      	bne.n	20784 <vTaskPrioritySet+0xc0>
   20780:	2301      	movs	r3, #1
   20782:	e000      	b.n	20786 <vTaskPrioritySet+0xc2>
   20784:	2300      	movs	r3, #0
   20786:	2b00      	cmp	r3, #0
   20788:	d01c      	beq.n	207c4 <vTaskPrioritySet+0x100>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   2078a:	693b      	ldr	r3, [r7, #16]
   2078c:	3304      	adds	r3, #4
   2078e:	0018      	movs	r0, r3
   20790:	4b15      	ldr	r3, [pc, #84]	; (207e8 <vTaskPrioritySet+0x124>)
   20792:	4798      	blx	r3
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
   20794:	693b      	ldr	r3, [r7, #16]
   20796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20798:	4b14      	ldr	r3, [pc, #80]	; (207ec <vTaskPrioritySet+0x128>)
   2079a:	681b      	ldr	r3, [r3, #0]
   2079c:	429a      	cmp	r2, r3
   2079e:	d903      	bls.n	207a8 <vTaskPrioritySet+0xe4>
   207a0:	693b      	ldr	r3, [r7, #16]
   207a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   207a4:	4b11      	ldr	r3, [pc, #68]	; (207ec <vTaskPrioritySet+0x128>)
   207a6:	601a      	str	r2, [r3, #0]
   207a8:	693b      	ldr	r3, [r7, #16]
   207aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   207ac:	0013      	movs	r3, r2
   207ae:	009b      	lsls	r3, r3, #2
   207b0:	189b      	adds	r3, r3, r2
   207b2:	009b      	lsls	r3, r3, #2
   207b4:	4a0b      	ldr	r2, [pc, #44]	; (207e4 <vTaskPrioritySet+0x120>)
   207b6:	189a      	adds	r2, r3, r2
   207b8:	693b      	ldr	r3, [r7, #16]
   207ba:	3304      	adds	r3, #4
   207bc:	0019      	movs	r1, r3
   207be:	0010      	movs	r0, r2
   207c0:	4b0b      	ldr	r3, [pc, #44]	; (207f0 <vTaskPrioritySet+0x12c>)
   207c2:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
   207c4:	697b      	ldr	r3, [r7, #20]
   207c6:	2b00      	cmp	r3, #0
   207c8:	d001      	beq.n	207ce <vTaskPrioritySet+0x10a>
				{
					taskYIELD_IF_USING_PREEMPTION();
   207ca:	4b0a      	ldr	r3, [pc, #40]	; (207f4 <vTaskPrioritySet+0x130>)
   207cc:	4798      	blx	r3
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
   207ce:	4b0a      	ldr	r3, [pc, #40]	; (207f8 <vTaskPrioritySet+0x134>)
   207d0:	4798      	blx	r3
	}
   207d2:	46c0      	nop			; (mov r8, r8)
   207d4:	46bd      	mov	sp, r7
   207d6:	b006      	add	sp, #24
   207d8:	bd80      	pop	{r7, pc}
   207da:	46c0      	nop			; (mov r8, r8)
   207dc:	0001f451 	.word	0x0001f451
   207e0:	200002b8 	.word	0x200002b8
   207e4:	200002bc 	.word	0x200002bc
   207e8:	0001f6f7 	.word	0x0001f6f7
   207ec:	20000398 	.word	0x20000398
   207f0:	0001f647 	.word	0x0001f647
   207f4:	0001f431 	.word	0x0001f431
   207f8:	0001f475 	.word	0x0001f475

000207fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   207fc:	b590      	push	{r4, r7, lr}
   207fe:	b085      	sub	sp, #20
   20800:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   20802:	4916      	ldr	r1, [pc, #88]	; (2085c <vTaskStartScheduler+0x60>)
   20804:	4816      	ldr	r0, [pc, #88]	; (20860 <vTaskStartScheduler+0x64>)
   20806:	4b17      	ldr	r3, [pc, #92]	; (20864 <vTaskStartScheduler+0x68>)
   20808:	9301      	str	r3, [sp, #4]
   2080a:	2300      	movs	r3, #0
   2080c:	9300      	str	r3, [sp, #0]
   2080e:	2300      	movs	r3, #0
   20810:	2282      	movs	r2, #130	; 0x82
   20812:	4c15      	ldr	r4, [pc, #84]	; (20868 <vTaskStartScheduler+0x6c>)
   20814:	47a0      	blx	r4
   20816:	0003      	movs	r3, r0
   20818:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   2081a:	687b      	ldr	r3, [r7, #4]
   2081c:	2b01      	cmp	r3, #1
   2081e:	d103      	bne.n	20828 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   20820:	4b12      	ldr	r3, [pc, #72]	; (2086c <vTaskStartScheduler+0x70>)
   20822:	4798      	blx	r3
   20824:	0003      	movs	r3, r0
   20826:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   20828:	687b      	ldr	r3, [r7, #4]
   2082a:	2b01      	cmp	r3, #1
   2082c:	d10d      	bne.n	2084a <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   2082e:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   20830:	4b0f      	ldr	r3, [pc, #60]	; (20870 <vTaskStartScheduler+0x74>)
   20832:	2201      	movs	r2, #1
   20834:	4252      	negs	r2, r2
   20836:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   20838:	4b0e      	ldr	r3, [pc, #56]	; (20874 <vTaskStartScheduler+0x78>)
   2083a:	2201      	movs	r2, #1
   2083c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   2083e:	4b0e      	ldr	r3, [pc, #56]	; (20878 <vTaskStartScheduler+0x7c>)
   20840:	2200      	movs	r2, #0
   20842:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   20844:	4b0d      	ldr	r3, [pc, #52]	; (2087c <vTaskStartScheduler+0x80>)
   20846:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   20848:	e004      	b.n	20854 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   2084a:	687b      	ldr	r3, [r7, #4]
   2084c:	3301      	adds	r3, #1
   2084e:	d101      	bne.n	20854 <vTaskStartScheduler+0x58>
   20850:	b672      	cpsid	i
   20852:	e7fe      	b.n	20852 <vTaskStartScheduler+0x56>
}
   20854:	46c0      	nop			; (mov r8, r8)
   20856:	46bd      	mov	sp, r7
   20858:	b003      	add	sp, #12
   2085a:	bd90      	pop	{r4, r7, pc}
   2085c:	0002b630 	.word	0x0002b630
   20860:	00020e61 	.word	0x00020e61
   20864:	200003b4 	.word	0x200003b4
   20868:	00020329 	.word	0x00020329
   2086c:	0002152d 	.word	0x0002152d
   20870:	200003b0 	.word	0x200003b0
   20874:	2000039c 	.word	0x2000039c
   20878:	20000394 	.word	0x20000394
   2087c:	0001f3d9 	.word	0x0001f3d9

00020880 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   20880:	b580      	push	{r7, lr}
   20882:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   20884:	4b03      	ldr	r3, [pc, #12]	; (20894 <vTaskSuspendAll+0x14>)
   20886:	681b      	ldr	r3, [r3, #0]
   20888:	1c5a      	adds	r2, r3, #1
   2088a:	4b02      	ldr	r3, [pc, #8]	; (20894 <vTaskSuspendAll+0x14>)
   2088c:	601a      	str	r2, [r3, #0]
}
   2088e:	46c0      	nop			; (mov r8, r8)
   20890:	46bd      	mov	sp, r7
   20892:	bd80      	pop	{r7, pc}
   20894:	200003b8 	.word	0x200003b8

00020898 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   20898:	b580      	push	{r7, lr}
   2089a:	b084      	sub	sp, #16
   2089c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   2089e:	2300      	movs	r3, #0
   208a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   208a2:	2300      	movs	r3, #0
   208a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   208a6:	4b3a      	ldr	r3, [pc, #232]	; (20990 <xTaskResumeAll+0xf8>)
   208a8:	681b      	ldr	r3, [r3, #0]
   208aa:	2b00      	cmp	r3, #0
   208ac:	d101      	bne.n	208b2 <xTaskResumeAll+0x1a>
   208ae:	b672      	cpsid	i
   208b0:	e7fe      	b.n	208b0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   208b2:	4b38      	ldr	r3, [pc, #224]	; (20994 <xTaskResumeAll+0xfc>)
   208b4:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   208b6:	4b36      	ldr	r3, [pc, #216]	; (20990 <xTaskResumeAll+0xf8>)
   208b8:	681b      	ldr	r3, [r3, #0]
   208ba:	1e5a      	subs	r2, r3, #1
   208bc:	4b34      	ldr	r3, [pc, #208]	; (20990 <xTaskResumeAll+0xf8>)
   208be:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   208c0:	4b33      	ldr	r3, [pc, #204]	; (20990 <xTaskResumeAll+0xf8>)
   208c2:	681b      	ldr	r3, [r3, #0]
   208c4:	2b00      	cmp	r3, #0
   208c6:	d15b      	bne.n	20980 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   208c8:	4b33      	ldr	r3, [pc, #204]	; (20998 <xTaskResumeAll+0x100>)
   208ca:	681b      	ldr	r3, [r3, #0]
   208cc:	2b00      	cmp	r3, #0
   208ce:	d057      	beq.n	20980 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   208d0:	e02f      	b.n	20932 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   208d2:	4b32      	ldr	r3, [pc, #200]	; (2099c <xTaskResumeAll+0x104>)
   208d4:	68db      	ldr	r3, [r3, #12]
   208d6:	68db      	ldr	r3, [r3, #12]
   208d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   208da:	68fb      	ldr	r3, [r7, #12]
   208dc:	3318      	adds	r3, #24
   208de:	0018      	movs	r0, r3
   208e0:	4b2f      	ldr	r3, [pc, #188]	; (209a0 <xTaskResumeAll+0x108>)
   208e2:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   208e4:	68fb      	ldr	r3, [r7, #12]
   208e6:	3304      	adds	r3, #4
   208e8:	0018      	movs	r0, r3
   208ea:	4b2d      	ldr	r3, [pc, #180]	; (209a0 <xTaskResumeAll+0x108>)
   208ec:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   208ee:	68fb      	ldr	r3, [r7, #12]
   208f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   208f2:	4b2c      	ldr	r3, [pc, #176]	; (209a4 <xTaskResumeAll+0x10c>)
   208f4:	681b      	ldr	r3, [r3, #0]
   208f6:	429a      	cmp	r2, r3
   208f8:	d903      	bls.n	20902 <xTaskResumeAll+0x6a>
   208fa:	68fb      	ldr	r3, [r7, #12]
   208fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   208fe:	4b29      	ldr	r3, [pc, #164]	; (209a4 <xTaskResumeAll+0x10c>)
   20900:	601a      	str	r2, [r3, #0]
   20902:	68fb      	ldr	r3, [r7, #12]
   20904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20906:	0013      	movs	r3, r2
   20908:	009b      	lsls	r3, r3, #2
   2090a:	189b      	adds	r3, r3, r2
   2090c:	009b      	lsls	r3, r3, #2
   2090e:	4a26      	ldr	r2, [pc, #152]	; (209a8 <xTaskResumeAll+0x110>)
   20910:	189a      	adds	r2, r3, r2
   20912:	68fb      	ldr	r3, [r7, #12]
   20914:	3304      	adds	r3, #4
   20916:	0019      	movs	r1, r3
   20918:	0010      	movs	r0, r2
   2091a:	4b24      	ldr	r3, [pc, #144]	; (209ac <xTaskResumeAll+0x114>)
   2091c:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   2091e:	68fb      	ldr	r3, [r7, #12]
   20920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20922:	4b23      	ldr	r3, [pc, #140]	; (209b0 <xTaskResumeAll+0x118>)
   20924:	681b      	ldr	r3, [r3, #0]
   20926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20928:	429a      	cmp	r2, r3
   2092a:	d302      	bcc.n	20932 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
   2092c:	4b21      	ldr	r3, [pc, #132]	; (209b4 <xTaskResumeAll+0x11c>)
   2092e:	2201      	movs	r2, #1
   20930:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   20932:	4b1a      	ldr	r3, [pc, #104]	; (2099c <xTaskResumeAll+0x104>)
   20934:	681b      	ldr	r3, [r3, #0]
   20936:	2b00      	cmp	r3, #0
   20938:	d1cb      	bne.n	208d2 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   2093a:	68fb      	ldr	r3, [r7, #12]
   2093c:	2b00      	cmp	r3, #0
   2093e:	d001      	beq.n	20944 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   20940:	4b1d      	ldr	r3, [pc, #116]	; (209b8 <xTaskResumeAll+0x120>)
   20942:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   20944:	4b1d      	ldr	r3, [pc, #116]	; (209bc <xTaskResumeAll+0x124>)
   20946:	681b      	ldr	r3, [r3, #0]
   20948:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   2094a:	687b      	ldr	r3, [r7, #4]
   2094c:	2b00      	cmp	r3, #0
   2094e:	d00f      	beq.n	20970 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   20950:	4b1b      	ldr	r3, [pc, #108]	; (209c0 <xTaskResumeAll+0x128>)
   20952:	4798      	blx	r3
   20954:	1e03      	subs	r3, r0, #0
   20956:	d002      	beq.n	2095e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
   20958:	4b16      	ldr	r3, [pc, #88]	; (209b4 <xTaskResumeAll+0x11c>)
   2095a:	2201      	movs	r2, #1
   2095c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   2095e:	687b      	ldr	r3, [r7, #4]
   20960:	3b01      	subs	r3, #1
   20962:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   20964:	687b      	ldr	r3, [r7, #4]
   20966:	2b00      	cmp	r3, #0
   20968:	d1f2      	bne.n	20950 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
   2096a:	4b14      	ldr	r3, [pc, #80]	; (209bc <xTaskResumeAll+0x124>)
   2096c:	2200      	movs	r2, #0
   2096e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   20970:	4b10      	ldr	r3, [pc, #64]	; (209b4 <xTaskResumeAll+0x11c>)
   20972:	681b      	ldr	r3, [r3, #0]
   20974:	2b00      	cmp	r3, #0
   20976:	d003      	beq.n	20980 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   20978:	2301      	movs	r3, #1
   2097a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   2097c:	4b11      	ldr	r3, [pc, #68]	; (209c4 <xTaskResumeAll+0x12c>)
   2097e:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   20980:	4b11      	ldr	r3, [pc, #68]	; (209c8 <xTaskResumeAll+0x130>)
   20982:	4798      	blx	r3

	return xAlreadyYielded;
   20984:	68bb      	ldr	r3, [r7, #8]
}
   20986:	0018      	movs	r0, r3
   20988:	46bd      	mov	sp, r7
   2098a:	b004      	add	sp, #16
   2098c:	bd80      	pop	{r7, pc}
   2098e:	46c0      	nop			; (mov r8, r8)
   20990:	200003b8 	.word	0x200003b8
   20994:	0001f451 	.word	0x0001f451
   20998:	20000390 	.word	0x20000390
   2099c:	20000350 	.word	0x20000350
   209a0:	0001f6f7 	.word	0x0001f6f7
   209a4:	20000398 	.word	0x20000398
   209a8:	200002bc 	.word	0x200002bc
   209ac:	0001f647 	.word	0x0001f647
   209b0:	200002b8 	.word	0x200002b8
   209b4:	200003a4 	.word	0x200003a4
   209b8:	00020fa9 	.word	0x00020fa9
   209bc:	200003a0 	.word	0x200003a0
   209c0:	00020a09 	.word	0x00020a09
   209c4:	0001f431 	.word	0x0001f431
   209c8:	0001f475 	.word	0x0001f475

000209cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   209cc:	b580      	push	{r7, lr}
   209ce:	b082      	sub	sp, #8
   209d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   209d2:	4b04      	ldr	r3, [pc, #16]	; (209e4 <xTaskGetTickCount+0x18>)
   209d4:	681b      	ldr	r3, [r3, #0]
   209d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   209d8:	687b      	ldr	r3, [r7, #4]
}
   209da:	0018      	movs	r0, r3
   209dc:	46bd      	mov	sp, r7
   209de:	b002      	add	sp, #8
   209e0:	bd80      	pop	{r7, pc}
   209e2:	46c0      	nop			; (mov r8, r8)
   209e4:	20000394 	.word	0x20000394

000209e8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
   209e8:	b580      	push	{r7, lr}
   209ea:	b082      	sub	sp, #8
   209ec:	af00      	add	r7, sp, #0
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
   209ee:	2300      	movs	r3, #0
   209f0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
   209f2:	4b04      	ldr	r3, [pc, #16]	; (20a04 <xTaskGetTickCountFromISR+0x1c>)
   209f4:	681b      	ldr	r3, [r3, #0]
   209f6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   209f8:	683b      	ldr	r3, [r7, #0]
}
   209fa:	0018      	movs	r0, r3
   209fc:	46bd      	mov	sp, r7
   209fe:	b002      	add	sp, #8
   20a00:	bd80      	pop	{r7, pc}
   20a02:	46c0      	nop			; (mov r8, r8)
   20a04:	20000394 	.word	0x20000394

00020a08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   20a08:	b580      	push	{r7, lr}
   20a0a:	b086      	sub	sp, #24
   20a0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   20a0e:	2300      	movs	r3, #0
   20a10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   20a12:	4b4c      	ldr	r3, [pc, #304]	; (20b44 <xTaskIncrementTick+0x13c>)
   20a14:	681b      	ldr	r3, [r3, #0]
   20a16:	2b00      	cmp	r3, #0
   20a18:	d000      	beq.n	20a1c <xTaskIncrementTick+0x14>
   20a1a:	e083      	b.n	20b24 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   20a1c:	4b4a      	ldr	r3, [pc, #296]	; (20b48 <xTaskIncrementTick+0x140>)
   20a1e:	681b      	ldr	r3, [r3, #0]
   20a20:	3301      	adds	r3, #1
   20a22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   20a24:	4b48      	ldr	r3, [pc, #288]	; (20b48 <xTaskIncrementTick+0x140>)
   20a26:	693a      	ldr	r2, [r7, #16]
   20a28:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   20a2a:	693b      	ldr	r3, [r7, #16]
   20a2c:	2b00      	cmp	r3, #0
   20a2e:	d117      	bne.n	20a60 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
   20a30:	4b46      	ldr	r3, [pc, #280]	; (20b4c <xTaskIncrementTick+0x144>)
   20a32:	681b      	ldr	r3, [r3, #0]
   20a34:	681b      	ldr	r3, [r3, #0]
   20a36:	2b00      	cmp	r3, #0
   20a38:	d001      	beq.n	20a3e <xTaskIncrementTick+0x36>
   20a3a:	b672      	cpsid	i
   20a3c:	e7fe      	b.n	20a3c <xTaskIncrementTick+0x34>
   20a3e:	4b43      	ldr	r3, [pc, #268]	; (20b4c <xTaskIncrementTick+0x144>)
   20a40:	681b      	ldr	r3, [r3, #0]
   20a42:	60fb      	str	r3, [r7, #12]
   20a44:	4b42      	ldr	r3, [pc, #264]	; (20b50 <xTaskIncrementTick+0x148>)
   20a46:	681a      	ldr	r2, [r3, #0]
   20a48:	4b40      	ldr	r3, [pc, #256]	; (20b4c <xTaskIncrementTick+0x144>)
   20a4a:	601a      	str	r2, [r3, #0]
   20a4c:	4b40      	ldr	r3, [pc, #256]	; (20b50 <xTaskIncrementTick+0x148>)
   20a4e:	68fa      	ldr	r2, [r7, #12]
   20a50:	601a      	str	r2, [r3, #0]
   20a52:	4b40      	ldr	r3, [pc, #256]	; (20b54 <xTaskIncrementTick+0x14c>)
   20a54:	681b      	ldr	r3, [r3, #0]
   20a56:	1c5a      	adds	r2, r3, #1
   20a58:	4b3e      	ldr	r3, [pc, #248]	; (20b54 <xTaskIncrementTick+0x14c>)
   20a5a:	601a      	str	r2, [r3, #0]
   20a5c:	4b3e      	ldr	r3, [pc, #248]	; (20b58 <xTaskIncrementTick+0x150>)
   20a5e:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   20a60:	4b3e      	ldr	r3, [pc, #248]	; (20b5c <xTaskIncrementTick+0x154>)
   20a62:	681b      	ldr	r3, [r3, #0]
   20a64:	693a      	ldr	r2, [r7, #16]
   20a66:	429a      	cmp	r2, r3
   20a68:	d34e      	bcc.n	20b08 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   20a6a:	4b38      	ldr	r3, [pc, #224]	; (20b4c <xTaskIncrementTick+0x144>)
   20a6c:	681b      	ldr	r3, [r3, #0]
   20a6e:	681b      	ldr	r3, [r3, #0]
   20a70:	2b00      	cmp	r3, #0
   20a72:	d101      	bne.n	20a78 <xTaskIncrementTick+0x70>
   20a74:	2301      	movs	r3, #1
   20a76:	e000      	b.n	20a7a <xTaskIncrementTick+0x72>
   20a78:	2300      	movs	r3, #0
   20a7a:	2b00      	cmp	r3, #0
   20a7c:	d004      	beq.n	20a88 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   20a7e:	4b37      	ldr	r3, [pc, #220]	; (20b5c <xTaskIncrementTick+0x154>)
   20a80:	2201      	movs	r2, #1
   20a82:	4252      	negs	r2, r2
   20a84:	601a      	str	r2, [r3, #0]
					break;
   20a86:	e03f      	b.n	20b08 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   20a88:	4b30      	ldr	r3, [pc, #192]	; (20b4c <xTaskIncrementTick+0x144>)
   20a8a:	681b      	ldr	r3, [r3, #0]
   20a8c:	68db      	ldr	r3, [r3, #12]
   20a8e:	68db      	ldr	r3, [r3, #12]
   20a90:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   20a92:	68bb      	ldr	r3, [r7, #8]
   20a94:	685b      	ldr	r3, [r3, #4]
   20a96:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   20a98:	693a      	ldr	r2, [r7, #16]
   20a9a:	687b      	ldr	r3, [r7, #4]
   20a9c:	429a      	cmp	r2, r3
   20a9e:	d203      	bcs.n	20aa8 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   20aa0:	4b2e      	ldr	r3, [pc, #184]	; (20b5c <xTaskIncrementTick+0x154>)
   20aa2:	687a      	ldr	r2, [r7, #4]
   20aa4:	601a      	str	r2, [r3, #0]
						break;
   20aa6:	e02f      	b.n	20b08 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   20aa8:	68bb      	ldr	r3, [r7, #8]
   20aaa:	3304      	adds	r3, #4
   20aac:	0018      	movs	r0, r3
   20aae:	4b2c      	ldr	r3, [pc, #176]	; (20b60 <xTaskIncrementTick+0x158>)
   20ab0:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   20ab2:	68bb      	ldr	r3, [r7, #8]
   20ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20ab6:	2b00      	cmp	r3, #0
   20ab8:	d004      	beq.n	20ac4 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   20aba:	68bb      	ldr	r3, [r7, #8]
   20abc:	3318      	adds	r3, #24
   20abe:	0018      	movs	r0, r3
   20ac0:	4b27      	ldr	r3, [pc, #156]	; (20b60 <xTaskIncrementTick+0x158>)
   20ac2:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   20ac4:	68bb      	ldr	r3, [r7, #8]
   20ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20ac8:	4b26      	ldr	r3, [pc, #152]	; (20b64 <xTaskIncrementTick+0x15c>)
   20aca:	681b      	ldr	r3, [r3, #0]
   20acc:	429a      	cmp	r2, r3
   20ace:	d903      	bls.n	20ad8 <xTaskIncrementTick+0xd0>
   20ad0:	68bb      	ldr	r3, [r7, #8]
   20ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20ad4:	4b23      	ldr	r3, [pc, #140]	; (20b64 <xTaskIncrementTick+0x15c>)
   20ad6:	601a      	str	r2, [r3, #0]
   20ad8:	68bb      	ldr	r3, [r7, #8]
   20ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20adc:	0013      	movs	r3, r2
   20ade:	009b      	lsls	r3, r3, #2
   20ae0:	189b      	adds	r3, r3, r2
   20ae2:	009b      	lsls	r3, r3, #2
   20ae4:	4a20      	ldr	r2, [pc, #128]	; (20b68 <xTaskIncrementTick+0x160>)
   20ae6:	189a      	adds	r2, r3, r2
   20ae8:	68bb      	ldr	r3, [r7, #8]
   20aea:	3304      	adds	r3, #4
   20aec:	0019      	movs	r1, r3
   20aee:	0010      	movs	r0, r2
   20af0:	4b1e      	ldr	r3, [pc, #120]	; (20b6c <xTaskIncrementTick+0x164>)
   20af2:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   20af4:	68bb      	ldr	r3, [r7, #8]
   20af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20af8:	4b1d      	ldr	r3, [pc, #116]	; (20b70 <xTaskIncrementTick+0x168>)
   20afa:	681b      	ldr	r3, [r3, #0]
   20afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20afe:	429a      	cmp	r2, r3
   20b00:	d3b3      	bcc.n	20a6a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
   20b02:	2301      	movs	r3, #1
   20b04:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   20b06:	e7b0      	b.n	20a6a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   20b08:	4b19      	ldr	r3, [pc, #100]	; (20b70 <xTaskIncrementTick+0x168>)
   20b0a:	681b      	ldr	r3, [r3, #0]
   20b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20b0e:	4916      	ldr	r1, [pc, #88]	; (20b68 <xTaskIncrementTick+0x160>)
   20b10:	0013      	movs	r3, r2
   20b12:	009b      	lsls	r3, r3, #2
   20b14:	189b      	adds	r3, r3, r2
   20b16:	009b      	lsls	r3, r3, #2
   20b18:	585b      	ldr	r3, [r3, r1]
   20b1a:	2b01      	cmp	r3, #1
   20b1c:	d907      	bls.n	20b2e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
   20b1e:	2301      	movs	r3, #1
   20b20:	617b      	str	r3, [r7, #20]
   20b22:	e004      	b.n	20b2e <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   20b24:	4b13      	ldr	r3, [pc, #76]	; (20b74 <xTaskIncrementTick+0x16c>)
   20b26:	681b      	ldr	r3, [r3, #0]
   20b28:	1c5a      	adds	r2, r3, #1
   20b2a:	4b12      	ldr	r3, [pc, #72]	; (20b74 <xTaskIncrementTick+0x16c>)
   20b2c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   20b2e:	4b12      	ldr	r3, [pc, #72]	; (20b78 <xTaskIncrementTick+0x170>)
   20b30:	681b      	ldr	r3, [r3, #0]
   20b32:	2b00      	cmp	r3, #0
   20b34:	d001      	beq.n	20b3a <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
   20b36:	2301      	movs	r3, #1
   20b38:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   20b3a:	697b      	ldr	r3, [r7, #20]
}
   20b3c:	0018      	movs	r0, r3
   20b3e:	46bd      	mov	sp, r7
   20b40:	b006      	add	sp, #24
   20b42:	bd80      	pop	{r7, pc}
   20b44:	200003b8 	.word	0x200003b8
   20b48:	20000394 	.word	0x20000394
   20b4c:	20000348 	.word	0x20000348
   20b50:	2000034c 	.word	0x2000034c
   20b54:	200003a8 	.word	0x200003a8
   20b58:	00020fa9 	.word	0x00020fa9
   20b5c:	200003b0 	.word	0x200003b0
   20b60:	0001f6f7 	.word	0x0001f6f7
   20b64:	20000398 	.word	0x20000398
   20b68:	200002bc 	.word	0x200002bc
   20b6c:	0001f647 	.word	0x0001f647
   20b70:	200002b8 	.word	0x200002b8
   20b74:	200003a0 	.word	0x200003a0
   20b78:	200003a4 	.word	0x200003a4

00020b7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   20b7c:	b580      	push	{r7, lr}
   20b7e:	b082      	sub	sp, #8
   20b80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   20b82:	4b22      	ldr	r3, [pc, #136]	; (20c0c <vTaskSwitchContext+0x90>)
   20b84:	681b      	ldr	r3, [r3, #0]
   20b86:	2b00      	cmp	r3, #0
   20b88:	d003      	beq.n	20b92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   20b8a:	4b21      	ldr	r3, [pc, #132]	; (20c10 <vTaskSwitchContext+0x94>)
   20b8c:	2201      	movs	r2, #1
   20b8e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   20b90:	e037      	b.n	20c02 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
   20b92:	4b1f      	ldr	r3, [pc, #124]	; (20c10 <vTaskSwitchContext+0x94>)
   20b94:	2200      	movs	r2, #0
   20b96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
   20b98:	4b1e      	ldr	r3, [pc, #120]	; (20c14 <vTaskSwitchContext+0x98>)
   20b9a:	681b      	ldr	r3, [r3, #0]
   20b9c:	607b      	str	r3, [r7, #4]
   20b9e:	e007      	b.n	20bb0 <vTaskSwitchContext+0x34>
   20ba0:	687b      	ldr	r3, [r7, #4]
   20ba2:	2b00      	cmp	r3, #0
   20ba4:	d101      	bne.n	20baa <vTaskSwitchContext+0x2e>
   20ba6:	b672      	cpsid	i
   20ba8:	e7fe      	b.n	20ba8 <vTaskSwitchContext+0x2c>
   20baa:	687b      	ldr	r3, [r7, #4]
   20bac:	3b01      	subs	r3, #1
   20bae:	607b      	str	r3, [r7, #4]
   20bb0:	4919      	ldr	r1, [pc, #100]	; (20c18 <vTaskSwitchContext+0x9c>)
   20bb2:	687a      	ldr	r2, [r7, #4]
   20bb4:	0013      	movs	r3, r2
   20bb6:	009b      	lsls	r3, r3, #2
   20bb8:	189b      	adds	r3, r3, r2
   20bba:	009b      	lsls	r3, r3, #2
   20bbc:	585b      	ldr	r3, [r3, r1]
   20bbe:	2b00      	cmp	r3, #0
   20bc0:	d0ee      	beq.n	20ba0 <vTaskSwitchContext+0x24>
   20bc2:	687a      	ldr	r2, [r7, #4]
   20bc4:	0013      	movs	r3, r2
   20bc6:	009b      	lsls	r3, r3, #2
   20bc8:	189b      	adds	r3, r3, r2
   20bca:	009b      	lsls	r3, r3, #2
   20bcc:	4a12      	ldr	r2, [pc, #72]	; (20c18 <vTaskSwitchContext+0x9c>)
   20bce:	189b      	adds	r3, r3, r2
   20bd0:	603b      	str	r3, [r7, #0]
   20bd2:	683b      	ldr	r3, [r7, #0]
   20bd4:	685b      	ldr	r3, [r3, #4]
   20bd6:	685a      	ldr	r2, [r3, #4]
   20bd8:	683b      	ldr	r3, [r7, #0]
   20bda:	605a      	str	r2, [r3, #4]
   20bdc:	683b      	ldr	r3, [r7, #0]
   20bde:	685a      	ldr	r2, [r3, #4]
   20be0:	683b      	ldr	r3, [r7, #0]
   20be2:	3308      	adds	r3, #8
   20be4:	429a      	cmp	r2, r3
   20be6:	d104      	bne.n	20bf2 <vTaskSwitchContext+0x76>
   20be8:	683b      	ldr	r3, [r7, #0]
   20bea:	685b      	ldr	r3, [r3, #4]
   20bec:	685a      	ldr	r2, [r3, #4]
   20bee:	683b      	ldr	r3, [r7, #0]
   20bf0:	605a      	str	r2, [r3, #4]
   20bf2:	683b      	ldr	r3, [r7, #0]
   20bf4:	685b      	ldr	r3, [r3, #4]
   20bf6:	68da      	ldr	r2, [r3, #12]
   20bf8:	4b08      	ldr	r3, [pc, #32]	; (20c1c <vTaskSwitchContext+0xa0>)
   20bfa:	601a      	str	r2, [r3, #0]
   20bfc:	4b05      	ldr	r3, [pc, #20]	; (20c14 <vTaskSwitchContext+0x98>)
   20bfe:	687a      	ldr	r2, [r7, #4]
   20c00:	601a      	str	r2, [r3, #0]
}
   20c02:	46c0      	nop			; (mov r8, r8)
   20c04:	46bd      	mov	sp, r7
   20c06:	b002      	add	sp, #8
   20c08:	bd80      	pop	{r7, pc}
   20c0a:	46c0      	nop			; (mov r8, r8)
   20c0c:	200003b8 	.word	0x200003b8
   20c10:	200003a4 	.word	0x200003a4
   20c14:	20000398 	.word	0x20000398
   20c18:	200002bc 	.word	0x200002bc
   20c1c:	200002b8 	.word	0x200002b8

00020c20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   20c20:	b580      	push	{r7, lr}
   20c22:	b082      	sub	sp, #8
   20c24:	af00      	add	r7, sp, #0
   20c26:	6078      	str	r0, [r7, #4]
   20c28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   20c2a:	687b      	ldr	r3, [r7, #4]
   20c2c:	2b00      	cmp	r3, #0
   20c2e:	d101      	bne.n	20c34 <vTaskPlaceOnEventList+0x14>
   20c30:	b672      	cpsid	i
   20c32:	e7fe      	b.n	20c32 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   20c34:	4b08      	ldr	r3, [pc, #32]	; (20c58 <vTaskPlaceOnEventList+0x38>)
   20c36:	681b      	ldr	r3, [r3, #0]
   20c38:	3318      	adds	r3, #24
   20c3a:	001a      	movs	r2, r3
   20c3c:	687b      	ldr	r3, [r7, #4]
   20c3e:	0011      	movs	r1, r2
   20c40:	0018      	movs	r0, r3
   20c42:	4b06      	ldr	r3, [pc, #24]	; (20c5c <vTaskPlaceOnEventList+0x3c>)
   20c44:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   20c46:	683b      	ldr	r3, [r7, #0]
   20c48:	2101      	movs	r1, #1
   20c4a:	0018      	movs	r0, r3
   20c4c:	4b04      	ldr	r3, [pc, #16]	; (20c60 <vTaskPlaceOnEventList+0x40>)
   20c4e:	4798      	blx	r3
}
   20c50:	46c0      	nop			; (mov r8, r8)
   20c52:	46bd      	mov	sp, r7
   20c54:	b002      	add	sp, #8
   20c56:	bd80      	pop	{r7, pc}
   20c58:	200002b8 	.word	0x200002b8
   20c5c:	0001f68b 	.word	0x0001f68b
   20c60:	00021479 	.word	0x00021479

00020c64 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   20c64:	b580      	push	{r7, lr}
   20c66:	b084      	sub	sp, #16
   20c68:	af00      	add	r7, sp, #0
   20c6a:	60f8      	str	r0, [r7, #12]
   20c6c:	60b9      	str	r1, [r7, #8]
   20c6e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   20c70:	68fb      	ldr	r3, [r7, #12]
   20c72:	2b00      	cmp	r3, #0
   20c74:	d101      	bne.n	20c7a <vTaskPlaceOnEventListRestricted+0x16>
   20c76:	b672      	cpsid	i
   20c78:	e7fe      	b.n	20c78 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   20c7a:	4b0c      	ldr	r3, [pc, #48]	; (20cac <vTaskPlaceOnEventListRestricted+0x48>)
   20c7c:	681b      	ldr	r3, [r3, #0]
   20c7e:	3318      	adds	r3, #24
   20c80:	001a      	movs	r2, r3
   20c82:	68fb      	ldr	r3, [r7, #12]
   20c84:	0011      	movs	r1, r2
   20c86:	0018      	movs	r0, r3
   20c88:	4b09      	ldr	r3, [pc, #36]	; (20cb0 <vTaskPlaceOnEventListRestricted+0x4c>)
   20c8a:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   20c8c:	687b      	ldr	r3, [r7, #4]
   20c8e:	2b00      	cmp	r3, #0
   20c90:	d002      	beq.n	20c98 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   20c92:	2301      	movs	r3, #1
   20c94:	425b      	negs	r3, r3
   20c96:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   20c98:	687a      	ldr	r2, [r7, #4]
   20c9a:	68bb      	ldr	r3, [r7, #8]
   20c9c:	0011      	movs	r1, r2
   20c9e:	0018      	movs	r0, r3
   20ca0:	4b04      	ldr	r3, [pc, #16]	; (20cb4 <vTaskPlaceOnEventListRestricted+0x50>)
   20ca2:	4798      	blx	r3
	}
   20ca4:	46c0      	nop			; (mov r8, r8)
   20ca6:	46bd      	mov	sp, r7
   20ca8:	b004      	add	sp, #16
   20caa:	bd80      	pop	{r7, pc}
   20cac:	200002b8 	.word	0x200002b8
   20cb0:	0001f647 	.word	0x0001f647
   20cb4:	00021479 	.word	0x00021479

00020cb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   20cb8:	b580      	push	{r7, lr}
   20cba:	b084      	sub	sp, #16
   20cbc:	af00      	add	r7, sp, #0
   20cbe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   20cc0:	687b      	ldr	r3, [r7, #4]
   20cc2:	68db      	ldr	r3, [r3, #12]
   20cc4:	68db      	ldr	r3, [r3, #12]
   20cc6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   20cc8:	68bb      	ldr	r3, [r7, #8]
   20cca:	2b00      	cmp	r3, #0
   20ccc:	d101      	bne.n	20cd2 <xTaskRemoveFromEventList+0x1a>
   20cce:	b672      	cpsid	i
   20cd0:	e7fe      	b.n	20cd0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   20cd2:	68bb      	ldr	r3, [r7, #8]
   20cd4:	3318      	adds	r3, #24
   20cd6:	0018      	movs	r0, r3
   20cd8:	4b1f      	ldr	r3, [pc, #124]	; (20d58 <xTaskRemoveFromEventList+0xa0>)
   20cda:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   20cdc:	4b1f      	ldr	r3, [pc, #124]	; (20d5c <xTaskRemoveFromEventList+0xa4>)
   20cde:	681b      	ldr	r3, [r3, #0]
   20ce0:	2b00      	cmp	r3, #0
   20ce2:	d11d      	bne.n	20d20 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   20ce4:	68bb      	ldr	r3, [r7, #8]
   20ce6:	3304      	adds	r3, #4
   20ce8:	0018      	movs	r0, r3
   20cea:	4b1b      	ldr	r3, [pc, #108]	; (20d58 <xTaskRemoveFromEventList+0xa0>)
   20cec:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   20cee:	68bb      	ldr	r3, [r7, #8]
   20cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20cf2:	4b1b      	ldr	r3, [pc, #108]	; (20d60 <xTaskRemoveFromEventList+0xa8>)
   20cf4:	681b      	ldr	r3, [r3, #0]
   20cf6:	429a      	cmp	r2, r3
   20cf8:	d903      	bls.n	20d02 <xTaskRemoveFromEventList+0x4a>
   20cfa:	68bb      	ldr	r3, [r7, #8]
   20cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20cfe:	4b18      	ldr	r3, [pc, #96]	; (20d60 <xTaskRemoveFromEventList+0xa8>)
   20d00:	601a      	str	r2, [r3, #0]
   20d02:	68bb      	ldr	r3, [r7, #8]
   20d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20d06:	0013      	movs	r3, r2
   20d08:	009b      	lsls	r3, r3, #2
   20d0a:	189b      	adds	r3, r3, r2
   20d0c:	009b      	lsls	r3, r3, #2
   20d0e:	4a15      	ldr	r2, [pc, #84]	; (20d64 <xTaskRemoveFromEventList+0xac>)
   20d10:	189a      	adds	r2, r3, r2
   20d12:	68bb      	ldr	r3, [r7, #8]
   20d14:	3304      	adds	r3, #4
   20d16:	0019      	movs	r1, r3
   20d18:	0010      	movs	r0, r2
   20d1a:	4b13      	ldr	r3, [pc, #76]	; (20d68 <xTaskRemoveFromEventList+0xb0>)
   20d1c:	4798      	blx	r3
   20d1e:	e007      	b.n	20d30 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   20d20:	68bb      	ldr	r3, [r7, #8]
   20d22:	3318      	adds	r3, #24
   20d24:	001a      	movs	r2, r3
   20d26:	4b11      	ldr	r3, [pc, #68]	; (20d6c <xTaskRemoveFromEventList+0xb4>)
   20d28:	0011      	movs	r1, r2
   20d2a:	0018      	movs	r0, r3
   20d2c:	4b0e      	ldr	r3, [pc, #56]	; (20d68 <xTaskRemoveFromEventList+0xb0>)
   20d2e:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   20d30:	68bb      	ldr	r3, [r7, #8]
   20d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20d34:	4b0e      	ldr	r3, [pc, #56]	; (20d70 <xTaskRemoveFromEventList+0xb8>)
   20d36:	681b      	ldr	r3, [r3, #0]
   20d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20d3a:	429a      	cmp	r2, r3
   20d3c:	d905      	bls.n	20d4a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   20d3e:	2301      	movs	r3, #1
   20d40:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   20d42:	4b0c      	ldr	r3, [pc, #48]	; (20d74 <xTaskRemoveFromEventList+0xbc>)
   20d44:	2201      	movs	r2, #1
   20d46:	601a      	str	r2, [r3, #0]
   20d48:	e001      	b.n	20d4e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
   20d4a:	2300      	movs	r3, #0
   20d4c:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   20d4e:	68fb      	ldr	r3, [r7, #12]
}
   20d50:	0018      	movs	r0, r3
   20d52:	46bd      	mov	sp, r7
   20d54:	b004      	add	sp, #16
   20d56:	bd80      	pop	{r7, pc}
   20d58:	0001f6f7 	.word	0x0001f6f7
   20d5c:	200003b8 	.word	0x200003b8
   20d60:	20000398 	.word	0x20000398
   20d64:	200002bc 	.word	0x200002bc
   20d68:	0001f647 	.word	0x0001f647
   20d6c:	20000350 	.word	0x20000350
   20d70:	200002b8 	.word	0x200002b8
   20d74:	200003a4 	.word	0x200003a4

00020d78 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   20d78:	b580      	push	{r7, lr}
   20d7a:	b082      	sub	sp, #8
   20d7c:	af00      	add	r7, sp, #0
   20d7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   20d80:	4b05      	ldr	r3, [pc, #20]	; (20d98 <vTaskInternalSetTimeOutState+0x20>)
   20d82:	681a      	ldr	r2, [r3, #0]
   20d84:	687b      	ldr	r3, [r7, #4]
   20d86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   20d88:	4b04      	ldr	r3, [pc, #16]	; (20d9c <vTaskInternalSetTimeOutState+0x24>)
   20d8a:	681a      	ldr	r2, [r3, #0]
   20d8c:	687b      	ldr	r3, [r7, #4]
   20d8e:	605a      	str	r2, [r3, #4]
}
   20d90:	46c0      	nop			; (mov r8, r8)
   20d92:	46bd      	mov	sp, r7
   20d94:	b002      	add	sp, #8
   20d96:	bd80      	pop	{r7, pc}
   20d98:	200003a8 	.word	0x200003a8
   20d9c:	20000394 	.word	0x20000394

00020da0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   20da0:	b580      	push	{r7, lr}
   20da2:	b086      	sub	sp, #24
   20da4:	af00      	add	r7, sp, #0
   20da6:	6078      	str	r0, [r7, #4]
   20da8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   20daa:	687b      	ldr	r3, [r7, #4]
   20dac:	2b00      	cmp	r3, #0
   20dae:	d101      	bne.n	20db4 <xTaskCheckForTimeOut+0x14>
   20db0:	b672      	cpsid	i
   20db2:	e7fe      	b.n	20db2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   20db4:	683b      	ldr	r3, [r7, #0]
   20db6:	2b00      	cmp	r3, #0
   20db8:	d101      	bne.n	20dbe <xTaskCheckForTimeOut+0x1e>
   20dba:	b672      	cpsid	i
   20dbc:	e7fe      	b.n	20dbc <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   20dbe:	4b1e      	ldr	r3, [pc, #120]	; (20e38 <xTaskCheckForTimeOut+0x98>)
   20dc0:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   20dc2:	4b1e      	ldr	r3, [pc, #120]	; (20e3c <xTaskCheckForTimeOut+0x9c>)
   20dc4:	681b      	ldr	r3, [r3, #0]
   20dc6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   20dc8:	687b      	ldr	r3, [r7, #4]
   20dca:	685b      	ldr	r3, [r3, #4]
   20dcc:	693a      	ldr	r2, [r7, #16]
   20dce:	1ad3      	subs	r3, r2, r3
   20dd0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   20dd2:	683b      	ldr	r3, [r7, #0]
   20dd4:	681b      	ldr	r3, [r3, #0]
   20dd6:	3301      	adds	r3, #1
   20dd8:	d102      	bne.n	20de0 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   20dda:	2300      	movs	r3, #0
   20ddc:	617b      	str	r3, [r7, #20]
   20dde:	e024      	b.n	20e2a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   20de0:	687b      	ldr	r3, [r7, #4]
   20de2:	681a      	ldr	r2, [r3, #0]
   20de4:	4b16      	ldr	r3, [pc, #88]	; (20e40 <xTaskCheckForTimeOut+0xa0>)
   20de6:	681b      	ldr	r3, [r3, #0]
   20de8:	429a      	cmp	r2, r3
   20dea:	d007      	beq.n	20dfc <xTaskCheckForTimeOut+0x5c>
   20dec:	687b      	ldr	r3, [r7, #4]
   20dee:	685a      	ldr	r2, [r3, #4]
   20df0:	693b      	ldr	r3, [r7, #16]
   20df2:	429a      	cmp	r2, r3
   20df4:	d802      	bhi.n	20dfc <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   20df6:	2301      	movs	r3, #1
   20df8:	617b      	str	r3, [r7, #20]
   20dfa:	e016      	b.n	20e2a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   20dfc:	683b      	ldr	r3, [r7, #0]
   20dfe:	681a      	ldr	r2, [r3, #0]
   20e00:	68fb      	ldr	r3, [r7, #12]
   20e02:	429a      	cmp	r2, r3
   20e04:	d90c      	bls.n	20e20 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   20e06:	683b      	ldr	r3, [r7, #0]
   20e08:	681a      	ldr	r2, [r3, #0]
   20e0a:	68fb      	ldr	r3, [r7, #12]
   20e0c:	1ad2      	subs	r2, r2, r3
   20e0e:	683b      	ldr	r3, [r7, #0]
   20e10:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   20e12:	687b      	ldr	r3, [r7, #4]
   20e14:	0018      	movs	r0, r3
   20e16:	4b0b      	ldr	r3, [pc, #44]	; (20e44 <xTaskCheckForTimeOut+0xa4>)
   20e18:	4798      	blx	r3
			xReturn = pdFALSE;
   20e1a:	2300      	movs	r3, #0
   20e1c:	617b      	str	r3, [r7, #20]
   20e1e:	e004      	b.n	20e2a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   20e20:	683b      	ldr	r3, [r7, #0]
   20e22:	2200      	movs	r2, #0
   20e24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   20e26:	2301      	movs	r3, #1
   20e28:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   20e2a:	4b07      	ldr	r3, [pc, #28]	; (20e48 <xTaskCheckForTimeOut+0xa8>)
   20e2c:	4798      	blx	r3

	return xReturn;
   20e2e:	697b      	ldr	r3, [r7, #20]
}
   20e30:	0018      	movs	r0, r3
   20e32:	46bd      	mov	sp, r7
   20e34:	b006      	add	sp, #24
   20e36:	bd80      	pop	{r7, pc}
   20e38:	0001f451 	.word	0x0001f451
   20e3c:	20000394 	.word	0x20000394
   20e40:	200003a8 	.word	0x200003a8
   20e44:	00020d79 	.word	0x00020d79
   20e48:	0001f475 	.word	0x0001f475

00020e4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   20e4c:	b580      	push	{r7, lr}
   20e4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   20e50:	4b02      	ldr	r3, [pc, #8]	; (20e5c <vTaskMissedYield+0x10>)
   20e52:	2201      	movs	r2, #1
   20e54:	601a      	str	r2, [r3, #0]
}
   20e56:	46c0      	nop			; (mov r8, r8)
   20e58:	46bd      	mov	sp, r7
   20e5a:	bd80      	pop	{r7, pc}
   20e5c:	200003a4 	.word	0x200003a4

00020e60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   20e60:	b580      	push	{r7, lr}
   20e62:	b082      	sub	sp, #8
   20e64:	af00      	add	r7, sp, #0
   20e66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   20e68:	4b04      	ldr	r3, [pc, #16]	; (20e7c <prvIdleTask+0x1c>)
   20e6a:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   20e6c:	4b04      	ldr	r3, [pc, #16]	; (20e80 <prvIdleTask+0x20>)
   20e6e:	681b      	ldr	r3, [r3, #0]
   20e70:	2b01      	cmp	r3, #1
   20e72:	d9f9      	bls.n	20e68 <prvIdleTask+0x8>
			{
				taskYIELD();
   20e74:	4b03      	ldr	r3, [pc, #12]	; (20e84 <prvIdleTask+0x24>)
   20e76:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   20e78:	e7f6      	b.n	20e68 <prvIdleTask+0x8>
   20e7a:	46c0      	nop			; (mov r8, r8)
   20e7c:	00020f15 	.word	0x00020f15
   20e80:	200002bc 	.word	0x200002bc
   20e84:	0001f431 	.word	0x0001f431

00020e88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   20e88:	b580      	push	{r7, lr}
   20e8a:	b082      	sub	sp, #8
   20e8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   20e8e:	2300      	movs	r3, #0
   20e90:	607b      	str	r3, [r7, #4]
   20e92:	e00c      	b.n	20eae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   20e94:	687a      	ldr	r2, [r7, #4]
   20e96:	0013      	movs	r3, r2
   20e98:	009b      	lsls	r3, r3, #2
   20e9a:	189b      	adds	r3, r3, r2
   20e9c:	009b      	lsls	r3, r3, #2
   20e9e:	4a14      	ldr	r2, [pc, #80]	; (20ef0 <prvInitialiseTaskLists+0x68>)
   20ea0:	189b      	adds	r3, r3, r2
   20ea2:	0018      	movs	r0, r3
   20ea4:	4b13      	ldr	r3, [pc, #76]	; (20ef4 <prvInitialiseTaskLists+0x6c>)
   20ea6:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   20ea8:	687b      	ldr	r3, [r7, #4]
   20eaa:	3301      	adds	r3, #1
   20eac:	607b      	str	r3, [r7, #4]
   20eae:	687b      	ldr	r3, [r7, #4]
   20eb0:	2b04      	cmp	r3, #4
   20eb2:	d9ef      	bls.n	20e94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   20eb4:	4b10      	ldr	r3, [pc, #64]	; (20ef8 <prvInitialiseTaskLists+0x70>)
   20eb6:	0018      	movs	r0, r3
   20eb8:	4b0e      	ldr	r3, [pc, #56]	; (20ef4 <prvInitialiseTaskLists+0x6c>)
   20eba:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   20ebc:	4b0f      	ldr	r3, [pc, #60]	; (20efc <prvInitialiseTaskLists+0x74>)
   20ebe:	0018      	movs	r0, r3
   20ec0:	4b0c      	ldr	r3, [pc, #48]	; (20ef4 <prvInitialiseTaskLists+0x6c>)
   20ec2:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   20ec4:	4b0e      	ldr	r3, [pc, #56]	; (20f00 <prvInitialiseTaskLists+0x78>)
   20ec6:	0018      	movs	r0, r3
   20ec8:	4b0a      	ldr	r3, [pc, #40]	; (20ef4 <prvInitialiseTaskLists+0x6c>)
   20eca:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   20ecc:	4b0d      	ldr	r3, [pc, #52]	; (20f04 <prvInitialiseTaskLists+0x7c>)
   20ece:	0018      	movs	r0, r3
   20ed0:	4b08      	ldr	r3, [pc, #32]	; (20ef4 <prvInitialiseTaskLists+0x6c>)
   20ed2:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   20ed4:	4b0c      	ldr	r3, [pc, #48]	; (20f08 <prvInitialiseTaskLists+0x80>)
   20ed6:	0018      	movs	r0, r3
   20ed8:	4b06      	ldr	r3, [pc, #24]	; (20ef4 <prvInitialiseTaskLists+0x6c>)
   20eda:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   20edc:	4b0b      	ldr	r3, [pc, #44]	; (20f0c <prvInitialiseTaskLists+0x84>)
   20ede:	4a06      	ldr	r2, [pc, #24]	; (20ef8 <prvInitialiseTaskLists+0x70>)
   20ee0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   20ee2:	4b0b      	ldr	r3, [pc, #44]	; (20f10 <prvInitialiseTaskLists+0x88>)
   20ee4:	4a05      	ldr	r2, [pc, #20]	; (20efc <prvInitialiseTaskLists+0x74>)
   20ee6:	601a      	str	r2, [r3, #0]
}
   20ee8:	46c0      	nop			; (mov r8, r8)
   20eea:	46bd      	mov	sp, r7
   20eec:	b002      	add	sp, #8
   20eee:	bd80      	pop	{r7, pc}
   20ef0:	200002bc 	.word	0x200002bc
   20ef4:	0001f5f5 	.word	0x0001f5f5
   20ef8:	20000320 	.word	0x20000320
   20efc:	20000334 	.word	0x20000334
   20f00:	20000350 	.word	0x20000350
   20f04:	20000364 	.word	0x20000364
   20f08:	2000037c 	.word	0x2000037c
   20f0c:	20000348 	.word	0x20000348
   20f10:	2000034c 	.word	0x2000034c

00020f14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   20f14:	b580      	push	{r7, lr}
   20f16:	b082      	sub	sp, #8
   20f18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   20f1a:	e01a      	b.n	20f52 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   20f1c:	4b11      	ldr	r3, [pc, #68]	; (20f64 <prvCheckTasksWaitingTermination+0x50>)
   20f1e:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   20f20:	4b11      	ldr	r3, [pc, #68]	; (20f68 <prvCheckTasksWaitingTermination+0x54>)
   20f22:	68db      	ldr	r3, [r3, #12]
   20f24:	68db      	ldr	r3, [r3, #12]
   20f26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   20f28:	687b      	ldr	r3, [r7, #4]
   20f2a:	3304      	adds	r3, #4
   20f2c:	0018      	movs	r0, r3
   20f2e:	4b0f      	ldr	r3, [pc, #60]	; (20f6c <prvCheckTasksWaitingTermination+0x58>)
   20f30:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   20f32:	4b0f      	ldr	r3, [pc, #60]	; (20f70 <prvCheckTasksWaitingTermination+0x5c>)
   20f34:	681b      	ldr	r3, [r3, #0]
   20f36:	1e5a      	subs	r2, r3, #1
   20f38:	4b0d      	ldr	r3, [pc, #52]	; (20f70 <prvCheckTasksWaitingTermination+0x5c>)
   20f3a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   20f3c:	4b0d      	ldr	r3, [pc, #52]	; (20f74 <prvCheckTasksWaitingTermination+0x60>)
   20f3e:	681b      	ldr	r3, [r3, #0]
   20f40:	1e5a      	subs	r2, r3, #1
   20f42:	4b0c      	ldr	r3, [pc, #48]	; (20f74 <prvCheckTasksWaitingTermination+0x60>)
   20f44:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   20f46:	4b0c      	ldr	r3, [pc, #48]	; (20f78 <prvCheckTasksWaitingTermination+0x64>)
   20f48:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   20f4a:	687b      	ldr	r3, [r7, #4]
   20f4c:	0018      	movs	r0, r3
   20f4e:	4b0b      	ldr	r3, [pc, #44]	; (20f7c <prvCheckTasksWaitingTermination+0x68>)
   20f50:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   20f52:	4b08      	ldr	r3, [pc, #32]	; (20f74 <prvCheckTasksWaitingTermination+0x60>)
   20f54:	681b      	ldr	r3, [r3, #0]
   20f56:	2b00      	cmp	r3, #0
   20f58:	d1e0      	bne.n	20f1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   20f5a:	46c0      	nop			; (mov r8, r8)
   20f5c:	46bd      	mov	sp, r7
   20f5e:	b002      	add	sp, #8
   20f60:	bd80      	pop	{r7, pc}
   20f62:	46c0      	nop			; (mov r8, r8)
   20f64:	0001f451 	.word	0x0001f451
   20f68:	20000364 	.word	0x20000364
   20f6c:	0001f6f7 	.word	0x0001f6f7
   20f70:	20000390 	.word	0x20000390
   20f74:	20000378 	.word	0x20000378
   20f78:	0001f475 	.word	0x0001f475
   20f7c:	00020f81 	.word	0x00020f81

00020f80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   20f80:	b580      	push	{r7, lr}
   20f82:	b082      	sub	sp, #8
   20f84:	af00      	add	r7, sp, #0
   20f86:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   20f88:	687b      	ldr	r3, [r7, #4]
   20f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   20f8c:	0018      	movs	r0, r3
   20f8e:	4b05      	ldr	r3, [pc, #20]	; (20fa4 <prvDeleteTCB+0x24>)
   20f90:	4798      	blx	r3
			vPortFree( pxTCB );
   20f92:	687b      	ldr	r3, [r7, #4]
   20f94:	0018      	movs	r0, r3
   20f96:	4b03      	ldr	r3, [pc, #12]	; (20fa4 <prvDeleteTCB+0x24>)
   20f98:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   20f9a:	46c0      	nop			; (mov r8, r8)
   20f9c:	46bd      	mov	sp, r7
   20f9e:	b002      	add	sp, #8
   20fa0:	bd80      	pop	{r7, pc}
   20fa2:	46c0      	nop			; (mov r8, r8)
   20fa4:	0001f5c1 	.word	0x0001f5c1

00020fa8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   20fa8:	b580      	push	{r7, lr}
   20faa:	b082      	sub	sp, #8
   20fac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   20fae:	4b0e      	ldr	r3, [pc, #56]	; (20fe8 <prvResetNextTaskUnblockTime+0x40>)
   20fb0:	681b      	ldr	r3, [r3, #0]
   20fb2:	681b      	ldr	r3, [r3, #0]
   20fb4:	2b00      	cmp	r3, #0
   20fb6:	d101      	bne.n	20fbc <prvResetNextTaskUnblockTime+0x14>
   20fb8:	2301      	movs	r3, #1
   20fba:	e000      	b.n	20fbe <prvResetNextTaskUnblockTime+0x16>
   20fbc:	2300      	movs	r3, #0
   20fbe:	2b00      	cmp	r3, #0
   20fc0:	d004      	beq.n	20fcc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   20fc2:	4b0a      	ldr	r3, [pc, #40]	; (20fec <prvResetNextTaskUnblockTime+0x44>)
   20fc4:	2201      	movs	r2, #1
   20fc6:	4252      	negs	r2, r2
   20fc8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   20fca:	e008      	b.n	20fde <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   20fcc:	4b06      	ldr	r3, [pc, #24]	; (20fe8 <prvResetNextTaskUnblockTime+0x40>)
   20fce:	681b      	ldr	r3, [r3, #0]
   20fd0:	68db      	ldr	r3, [r3, #12]
   20fd2:	68db      	ldr	r3, [r3, #12]
   20fd4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   20fd6:	687b      	ldr	r3, [r7, #4]
   20fd8:	685a      	ldr	r2, [r3, #4]
   20fda:	4b04      	ldr	r3, [pc, #16]	; (20fec <prvResetNextTaskUnblockTime+0x44>)
   20fdc:	601a      	str	r2, [r3, #0]
}
   20fde:	46c0      	nop			; (mov r8, r8)
   20fe0:	46bd      	mov	sp, r7
   20fe2:	b002      	add	sp, #8
   20fe4:	bd80      	pop	{r7, pc}
   20fe6:	46c0      	nop			; (mov r8, r8)
   20fe8:	20000348 	.word	0x20000348
   20fec:	200003b0 	.word	0x200003b0

00020ff0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   20ff0:	b580      	push	{r7, lr}
   20ff2:	b082      	sub	sp, #8
   20ff4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   20ff6:	4b0a      	ldr	r3, [pc, #40]	; (21020 <xTaskGetSchedulerState+0x30>)
   20ff8:	681b      	ldr	r3, [r3, #0]
   20ffa:	2b00      	cmp	r3, #0
   20ffc:	d102      	bne.n	21004 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   20ffe:	2301      	movs	r3, #1
   21000:	607b      	str	r3, [r7, #4]
   21002:	e008      	b.n	21016 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   21004:	4b07      	ldr	r3, [pc, #28]	; (21024 <xTaskGetSchedulerState+0x34>)
   21006:	681b      	ldr	r3, [r3, #0]
   21008:	2b00      	cmp	r3, #0
   2100a:	d102      	bne.n	21012 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   2100c:	2302      	movs	r3, #2
   2100e:	607b      	str	r3, [r7, #4]
   21010:	e001      	b.n	21016 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   21012:	2300      	movs	r3, #0
   21014:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   21016:	687b      	ldr	r3, [r7, #4]
	}
   21018:	0018      	movs	r0, r3
   2101a:	46bd      	mov	sp, r7
   2101c:	b002      	add	sp, #8
   2101e:	bd80      	pop	{r7, pc}
   21020:	2000039c 	.word	0x2000039c
   21024:	200003b8 	.word	0x200003b8

00021028 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   21028:	b580      	push	{r7, lr}
   2102a:	b084      	sub	sp, #16
   2102c:	af00      	add	r7, sp, #0
   2102e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   21030:	687b      	ldr	r3, [r7, #4]
   21032:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   21034:	2300      	movs	r3, #0
   21036:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   21038:	687b      	ldr	r3, [r7, #4]
   2103a:	2b00      	cmp	r3, #0
   2103c:	d056      	beq.n	210ec <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   2103e:	68bb      	ldr	r3, [r7, #8]
   21040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   21042:	4b2d      	ldr	r3, [pc, #180]	; (210f8 <xTaskPriorityInherit+0xd0>)
   21044:	681b      	ldr	r3, [r3, #0]
   21046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   21048:	429a      	cmp	r2, r3
   2104a:	d246      	bcs.n	210da <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   2104c:	68bb      	ldr	r3, [r7, #8]
   2104e:	699b      	ldr	r3, [r3, #24]
   21050:	2b00      	cmp	r3, #0
   21052:	db06      	blt.n	21062 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   21054:	4b28      	ldr	r3, [pc, #160]	; (210f8 <xTaskPriorityInherit+0xd0>)
   21056:	681b      	ldr	r3, [r3, #0]
   21058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2105a:	2205      	movs	r2, #5
   2105c:	1ad2      	subs	r2, r2, r3
   2105e:	68bb      	ldr	r3, [r7, #8]
   21060:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   21062:	68bb      	ldr	r3, [r7, #8]
   21064:	6959      	ldr	r1, [r3, #20]
   21066:	68bb      	ldr	r3, [r7, #8]
   21068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2106a:	0013      	movs	r3, r2
   2106c:	009b      	lsls	r3, r3, #2
   2106e:	189b      	adds	r3, r3, r2
   21070:	009b      	lsls	r3, r3, #2
   21072:	4a22      	ldr	r2, [pc, #136]	; (210fc <xTaskPriorityInherit+0xd4>)
   21074:	189b      	adds	r3, r3, r2
   21076:	4299      	cmp	r1, r3
   21078:	d101      	bne.n	2107e <xTaskPriorityInherit+0x56>
   2107a:	2301      	movs	r3, #1
   2107c:	e000      	b.n	21080 <xTaskPriorityInherit+0x58>
   2107e:	2300      	movs	r3, #0
   21080:	2b00      	cmp	r3, #0
   21082:	d022      	beq.n	210ca <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   21084:	68bb      	ldr	r3, [r7, #8]
   21086:	3304      	adds	r3, #4
   21088:	0018      	movs	r0, r3
   2108a:	4b1d      	ldr	r3, [pc, #116]	; (21100 <xTaskPriorityInherit+0xd8>)
   2108c:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   2108e:	4b1a      	ldr	r3, [pc, #104]	; (210f8 <xTaskPriorityInherit+0xd0>)
   21090:	681b      	ldr	r3, [r3, #0]
   21092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   21094:	68bb      	ldr	r3, [r7, #8]
   21096:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   21098:	68bb      	ldr	r3, [r7, #8]
   2109a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2109c:	4b19      	ldr	r3, [pc, #100]	; (21104 <xTaskPriorityInherit+0xdc>)
   2109e:	681b      	ldr	r3, [r3, #0]
   210a0:	429a      	cmp	r2, r3
   210a2:	d903      	bls.n	210ac <xTaskPriorityInherit+0x84>
   210a4:	68bb      	ldr	r3, [r7, #8]
   210a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   210a8:	4b16      	ldr	r3, [pc, #88]	; (21104 <xTaskPriorityInherit+0xdc>)
   210aa:	601a      	str	r2, [r3, #0]
   210ac:	68bb      	ldr	r3, [r7, #8]
   210ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   210b0:	0013      	movs	r3, r2
   210b2:	009b      	lsls	r3, r3, #2
   210b4:	189b      	adds	r3, r3, r2
   210b6:	009b      	lsls	r3, r3, #2
   210b8:	4a10      	ldr	r2, [pc, #64]	; (210fc <xTaskPriorityInherit+0xd4>)
   210ba:	189a      	adds	r2, r3, r2
   210bc:	68bb      	ldr	r3, [r7, #8]
   210be:	3304      	adds	r3, #4
   210c0:	0019      	movs	r1, r3
   210c2:	0010      	movs	r0, r2
   210c4:	4b10      	ldr	r3, [pc, #64]	; (21108 <xTaskPriorityInherit+0xe0>)
   210c6:	4798      	blx	r3
   210c8:	e004      	b.n	210d4 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   210ca:	4b0b      	ldr	r3, [pc, #44]	; (210f8 <xTaskPriorityInherit+0xd0>)
   210cc:	681b      	ldr	r3, [r3, #0]
   210ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   210d0:	68bb      	ldr	r3, [r7, #8]
   210d2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   210d4:	2301      	movs	r3, #1
   210d6:	60fb      	str	r3, [r7, #12]
   210d8:	e008      	b.n	210ec <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   210da:	68bb      	ldr	r3, [r7, #8]
   210dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   210de:	4b06      	ldr	r3, [pc, #24]	; (210f8 <xTaskPriorityInherit+0xd0>)
   210e0:	681b      	ldr	r3, [r3, #0]
   210e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   210e4:	429a      	cmp	r2, r3
   210e6:	d201      	bcs.n	210ec <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   210e8:	2301      	movs	r3, #1
   210ea:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   210ec:	68fb      	ldr	r3, [r7, #12]
	}
   210ee:	0018      	movs	r0, r3
   210f0:	46bd      	mov	sp, r7
   210f2:	b004      	add	sp, #16
   210f4:	bd80      	pop	{r7, pc}
   210f6:	46c0      	nop			; (mov r8, r8)
   210f8:	200002b8 	.word	0x200002b8
   210fc:	200002bc 	.word	0x200002bc
   21100:	0001f6f7 	.word	0x0001f6f7
   21104:	20000398 	.word	0x20000398
   21108:	0001f647 	.word	0x0001f647

0002110c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   2110c:	b580      	push	{r7, lr}
   2110e:	b084      	sub	sp, #16
   21110:	af00      	add	r7, sp, #0
   21112:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   21114:	687b      	ldr	r3, [r7, #4]
   21116:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   21118:	2300      	movs	r3, #0
   2111a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   2111c:	687b      	ldr	r3, [r7, #4]
   2111e:	2b00      	cmp	r3, #0
   21120:	d044      	beq.n	211ac <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   21122:	4b25      	ldr	r3, [pc, #148]	; (211b8 <xTaskPriorityDisinherit+0xac>)
   21124:	681b      	ldr	r3, [r3, #0]
   21126:	68ba      	ldr	r2, [r7, #8]
   21128:	429a      	cmp	r2, r3
   2112a:	d001      	beq.n	21130 <xTaskPriorityDisinherit+0x24>
   2112c:	b672      	cpsid	i
   2112e:	e7fe      	b.n	2112e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
   21130:	68bb      	ldr	r3, [r7, #8]
   21132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   21134:	2b00      	cmp	r3, #0
   21136:	d101      	bne.n	2113c <xTaskPriorityDisinherit+0x30>
   21138:	b672      	cpsid	i
   2113a:	e7fe      	b.n	2113a <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
   2113c:	68bb      	ldr	r3, [r7, #8]
   2113e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   21140:	1e5a      	subs	r2, r3, #1
   21142:	68bb      	ldr	r3, [r7, #8]
   21144:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   21146:	68bb      	ldr	r3, [r7, #8]
   21148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2114a:	68bb      	ldr	r3, [r7, #8]
   2114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2114e:	429a      	cmp	r2, r3
   21150:	d02c      	beq.n	211ac <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   21152:	68bb      	ldr	r3, [r7, #8]
   21154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   21156:	2b00      	cmp	r3, #0
   21158:	d128      	bne.n	211ac <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   2115a:	68bb      	ldr	r3, [r7, #8]
   2115c:	3304      	adds	r3, #4
   2115e:	0018      	movs	r0, r3
   21160:	4b16      	ldr	r3, [pc, #88]	; (211bc <xTaskPriorityDisinherit+0xb0>)
   21162:	4798      	blx	r3
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   21164:	68bb      	ldr	r3, [r7, #8]
   21166:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   21168:	68bb      	ldr	r3, [r7, #8]
   2116a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   2116c:	68bb      	ldr	r3, [r7, #8]
   2116e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   21170:	2205      	movs	r2, #5
   21172:	1ad2      	subs	r2, r2, r3
   21174:	68bb      	ldr	r3, [r7, #8]
   21176:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   21178:	68bb      	ldr	r3, [r7, #8]
   2117a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2117c:	4b10      	ldr	r3, [pc, #64]	; (211c0 <xTaskPriorityDisinherit+0xb4>)
   2117e:	681b      	ldr	r3, [r3, #0]
   21180:	429a      	cmp	r2, r3
   21182:	d903      	bls.n	2118c <xTaskPriorityDisinherit+0x80>
   21184:	68bb      	ldr	r3, [r7, #8]
   21186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   21188:	4b0d      	ldr	r3, [pc, #52]	; (211c0 <xTaskPriorityDisinherit+0xb4>)
   2118a:	601a      	str	r2, [r3, #0]
   2118c:	68bb      	ldr	r3, [r7, #8]
   2118e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   21190:	0013      	movs	r3, r2
   21192:	009b      	lsls	r3, r3, #2
   21194:	189b      	adds	r3, r3, r2
   21196:	009b      	lsls	r3, r3, #2
   21198:	4a0a      	ldr	r2, [pc, #40]	; (211c4 <xTaskPriorityDisinherit+0xb8>)
   2119a:	189a      	adds	r2, r3, r2
   2119c:	68bb      	ldr	r3, [r7, #8]
   2119e:	3304      	adds	r3, #4
   211a0:	0019      	movs	r1, r3
   211a2:	0010      	movs	r0, r2
   211a4:	4b08      	ldr	r3, [pc, #32]	; (211c8 <xTaskPriorityDisinherit+0xbc>)
   211a6:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   211a8:	2301      	movs	r3, #1
   211aa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   211ac:	68fb      	ldr	r3, [r7, #12]
	}
   211ae:	0018      	movs	r0, r3
   211b0:	46bd      	mov	sp, r7
   211b2:	b004      	add	sp, #16
   211b4:	bd80      	pop	{r7, pc}
   211b6:	46c0      	nop			; (mov r8, r8)
   211b8:	200002b8 	.word	0x200002b8
   211bc:	0001f6f7 	.word	0x0001f6f7
   211c0:	20000398 	.word	0x20000398
   211c4:	200002bc 	.word	0x200002bc
   211c8:	0001f647 	.word	0x0001f647

000211cc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   211cc:	b580      	push	{r7, lr}
   211ce:	b086      	sub	sp, #24
   211d0:	af00      	add	r7, sp, #0
   211d2:	6078      	str	r0, [r7, #4]
   211d4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   211d6:	687b      	ldr	r3, [r7, #4]
   211d8:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   211da:	2301      	movs	r3, #1
   211dc:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   211de:	687b      	ldr	r3, [r7, #4]
   211e0:	2b00      	cmp	r3, #0
   211e2:	d05d      	beq.n	212a0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   211e4:	693b      	ldr	r3, [r7, #16]
   211e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   211e8:	2b00      	cmp	r3, #0
   211ea:	d101      	bne.n	211f0 <vTaskPriorityDisinheritAfterTimeout+0x24>
   211ec:	b672      	cpsid	i
   211ee:	e7fe      	b.n	211ee <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   211f0:	693b      	ldr	r3, [r7, #16]
   211f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   211f4:	683b      	ldr	r3, [r7, #0]
   211f6:	429a      	cmp	r2, r3
   211f8:	d202      	bcs.n	21200 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   211fa:	683b      	ldr	r3, [r7, #0]
   211fc:	617b      	str	r3, [r7, #20]
   211fe:	e002      	b.n	21206 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   21200:	693b      	ldr	r3, [r7, #16]
   21202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   21204:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   21206:	693b      	ldr	r3, [r7, #16]
   21208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2120a:	697b      	ldr	r3, [r7, #20]
   2120c:	429a      	cmp	r2, r3
   2120e:	d047      	beq.n	212a0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   21210:	693b      	ldr	r3, [r7, #16]
   21212:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   21214:	68fb      	ldr	r3, [r7, #12]
   21216:	429a      	cmp	r2, r3
   21218:	d142      	bne.n	212a0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   2121a:	4b23      	ldr	r3, [pc, #140]	; (212a8 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
   2121c:	681b      	ldr	r3, [r3, #0]
   2121e:	693a      	ldr	r2, [r7, #16]
   21220:	429a      	cmp	r2, r3
   21222:	d101      	bne.n	21228 <vTaskPriorityDisinheritAfterTimeout+0x5c>
   21224:	b672      	cpsid	i
   21226:	e7fe      	b.n	21226 <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   21228:	693b      	ldr	r3, [r7, #16]
   2122a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2122c:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   2122e:	693b      	ldr	r3, [r7, #16]
   21230:	697a      	ldr	r2, [r7, #20]
   21232:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   21234:	693b      	ldr	r3, [r7, #16]
   21236:	699b      	ldr	r3, [r3, #24]
   21238:	2b00      	cmp	r3, #0
   2123a:	db04      	blt.n	21246 <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   2123c:	697b      	ldr	r3, [r7, #20]
   2123e:	2205      	movs	r2, #5
   21240:	1ad2      	subs	r2, r2, r3
   21242:	693b      	ldr	r3, [r7, #16]
   21244:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   21246:	693b      	ldr	r3, [r7, #16]
   21248:	6959      	ldr	r1, [r3, #20]
   2124a:	68ba      	ldr	r2, [r7, #8]
   2124c:	0013      	movs	r3, r2
   2124e:	009b      	lsls	r3, r3, #2
   21250:	189b      	adds	r3, r3, r2
   21252:	009b      	lsls	r3, r3, #2
   21254:	4a15      	ldr	r2, [pc, #84]	; (212ac <vTaskPriorityDisinheritAfterTimeout+0xe0>)
   21256:	189b      	adds	r3, r3, r2
   21258:	4299      	cmp	r1, r3
   2125a:	d101      	bne.n	21260 <vTaskPriorityDisinheritAfterTimeout+0x94>
   2125c:	2301      	movs	r3, #1
   2125e:	e000      	b.n	21262 <vTaskPriorityDisinheritAfterTimeout+0x96>
   21260:	2300      	movs	r3, #0
   21262:	2b00      	cmp	r3, #0
   21264:	d01c      	beq.n	212a0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   21266:	693b      	ldr	r3, [r7, #16]
   21268:	3304      	adds	r3, #4
   2126a:	0018      	movs	r0, r3
   2126c:	4b10      	ldr	r3, [pc, #64]	; (212b0 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
   2126e:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   21270:	693b      	ldr	r3, [r7, #16]
   21272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   21274:	4b0f      	ldr	r3, [pc, #60]	; (212b4 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
   21276:	681b      	ldr	r3, [r3, #0]
   21278:	429a      	cmp	r2, r3
   2127a:	d903      	bls.n	21284 <vTaskPriorityDisinheritAfterTimeout+0xb8>
   2127c:	693b      	ldr	r3, [r7, #16]
   2127e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   21280:	4b0c      	ldr	r3, [pc, #48]	; (212b4 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
   21282:	601a      	str	r2, [r3, #0]
   21284:	693b      	ldr	r3, [r7, #16]
   21286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   21288:	0013      	movs	r3, r2
   2128a:	009b      	lsls	r3, r3, #2
   2128c:	189b      	adds	r3, r3, r2
   2128e:	009b      	lsls	r3, r3, #2
   21290:	4a06      	ldr	r2, [pc, #24]	; (212ac <vTaskPriorityDisinheritAfterTimeout+0xe0>)
   21292:	189a      	adds	r2, r3, r2
   21294:	693b      	ldr	r3, [r7, #16]
   21296:	3304      	adds	r3, #4
   21298:	0019      	movs	r1, r3
   2129a:	0010      	movs	r0, r2
   2129c:	4b06      	ldr	r3, [pc, #24]	; (212b8 <vTaskPriorityDisinheritAfterTimeout+0xec>)
   2129e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   212a0:	46c0      	nop			; (mov r8, r8)
   212a2:	46bd      	mov	sp, r7
   212a4:	b006      	add	sp, #24
   212a6:	bd80      	pop	{r7, pc}
   212a8:	200002b8 	.word	0x200002b8
   212ac:	200002bc 	.word	0x200002bc
   212b0:	0001f6f7 	.word	0x0001f6f7
   212b4:	20000398 	.word	0x20000398
   212b8:	0001f647 	.word	0x0001f647

000212bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   212bc:	b580      	push	{r7, lr}
   212be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   212c0:	4b06      	ldr	r3, [pc, #24]	; (212dc <pvTaskIncrementMutexHeldCount+0x20>)
   212c2:	681b      	ldr	r3, [r3, #0]
   212c4:	2b00      	cmp	r3, #0
   212c6:	d004      	beq.n	212d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   212c8:	4b04      	ldr	r3, [pc, #16]	; (212dc <pvTaskIncrementMutexHeldCount+0x20>)
   212ca:	681b      	ldr	r3, [r3, #0]
   212cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   212ce:	3201      	adds	r2, #1
   212d0:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
   212d2:	4b02      	ldr	r3, [pc, #8]	; (212dc <pvTaskIncrementMutexHeldCount+0x20>)
   212d4:	681b      	ldr	r3, [r3, #0]
	}
   212d6:	0018      	movs	r0, r3
   212d8:	46bd      	mov	sp, r7
   212da:	bd80      	pop	{r7, pc}
   212dc:	200002b8 	.word	0x200002b8

000212e0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
   212e0:	b580      	push	{r7, lr}
   212e2:	b084      	sub	sp, #16
   212e4:	af00      	add	r7, sp, #0
   212e6:	6078      	str	r0, [r7, #4]
   212e8:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
   212ea:	4b1d      	ldr	r3, [pc, #116]	; (21360 <ulTaskNotifyTake+0x80>)
   212ec:	4798      	blx	r3
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
   212ee:	4b1d      	ldr	r3, [pc, #116]	; (21364 <ulTaskNotifyTake+0x84>)
   212f0:	681b      	ldr	r3, [r3, #0]
   212f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   212f4:	2b00      	cmp	r3, #0
   212f6:	d10e      	bne.n	21316 <ulTaskNotifyTake+0x36>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
   212f8:	4b1a      	ldr	r3, [pc, #104]	; (21364 <ulTaskNotifyTake+0x84>)
   212fa:	681b      	ldr	r3, [r3, #0]
   212fc:	224c      	movs	r2, #76	; 0x4c
   212fe:	2101      	movs	r1, #1
   21300:	5499      	strb	r1, [r3, r2]

				if( xTicksToWait > ( TickType_t ) 0 )
   21302:	683b      	ldr	r3, [r7, #0]
   21304:	2b00      	cmp	r3, #0
   21306:	d006      	beq.n	21316 <ulTaskNotifyTake+0x36>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   21308:	683b      	ldr	r3, [r7, #0]
   2130a:	2101      	movs	r1, #1
   2130c:	0018      	movs	r0, r3
   2130e:	4b16      	ldr	r3, [pc, #88]	; (21368 <ulTaskNotifyTake+0x88>)
   21310:	4798      	blx	r3

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
   21312:	4b16      	ldr	r3, [pc, #88]	; (2136c <ulTaskNotifyTake+0x8c>)
   21314:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
   21316:	4b16      	ldr	r3, [pc, #88]	; (21370 <ulTaskNotifyTake+0x90>)
   21318:	4798      	blx	r3

		taskENTER_CRITICAL();
   2131a:	4b11      	ldr	r3, [pc, #68]	; (21360 <ulTaskNotifyTake+0x80>)
   2131c:	4798      	blx	r3
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
   2131e:	4b11      	ldr	r3, [pc, #68]	; (21364 <ulTaskNotifyTake+0x84>)
   21320:	681b      	ldr	r3, [r3, #0]
   21322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   21324:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
   21326:	68fb      	ldr	r3, [r7, #12]
   21328:	2b00      	cmp	r3, #0
   2132a:	d00c      	beq.n	21346 <ulTaskNotifyTake+0x66>
			{
				if( xClearCountOnExit != pdFALSE )
   2132c:	687b      	ldr	r3, [r7, #4]
   2132e:	2b00      	cmp	r3, #0
   21330:	d004      	beq.n	2133c <ulTaskNotifyTake+0x5c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
   21332:	4b0c      	ldr	r3, [pc, #48]	; (21364 <ulTaskNotifyTake+0x84>)
   21334:	681b      	ldr	r3, [r3, #0]
   21336:	2200      	movs	r2, #0
   21338:	649a      	str	r2, [r3, #72]	; 0x48
   2133a:	e004      	b.n	21346 <ulTaskNotifyTake+0x66>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
   2133c:	4b09      	ldr	r3, [pc, #36]	; (21364 <ulTaskNotifyTake+0x84>)
   2133e:	681b      	ldr	r3, [r3, #0]
   21340:	68fa      	ldr	r2, [r7, #12]
   21342:	3a01      	subs	r2, #1
   21344:	649a      	str	r2, [r3, #72]	; 0x48
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   21346:	4b07      	ldr	r3, [pc, #28]	; (21364 <ulTaskNotifyTake+0x84>)
   21348:	681b      	ldr	r3, [r3, #0]
   2134a:	224c      	movs	r2, #76	; 0x4c
   2134c:	2100      	movs	r1, #0
   2134e:	5499      	strb	r1, [r3, r2]
		}
		taskEXIT_CRITICAL();
   21350:	4b07      	ldr	r3, [pc, #28]	; (21370 <ulTaskNotifyTake+0x90>)
   21352:	4798      	blx	r3

		return ulReturn;
   21354:	68fb      	ldr	r3, [r7, #12]
	}
   21356:	0018      	movs	r0, r3
   21358:	46bd      	mov	sp, r7
   2135a:	b004      	add	sp, #16
   2135c:	bd80      	pop	{r7, pc}
   2135e:	46c0      	nop			; (mov r8, r8)
   21360:	0001f451 	.word	0x0001f451
   21364:	200002b8 	.word	0x200002b8
   21368:	00021479 	.word	0x00021479
   2136c:	0001f431 	.word	0x0001f431
   21370:	0001f475 	.word	0x0001f475

00021374 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
   21374:	b580      	push	{r7, lr}
   21376:	b086      	sub	sp, #24
   21378:	af00      	add	r7, sp, #0
   2137a:	6078      	str	r0, [r7, #4]
   2137c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
   2137e:	687b      	ldr	r3, [r7, #4]
   21380:	2b00      	cmp	r3, #0
   21382:	d101      	bne.n	21388 <vTaskNotifyGiveFromISR+0x14>
   21384:	b672      	cpsid	i
   21386:	e7fe      	b.n	21386 <vTaskNotifyGiveFromISR+0x12>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
   21388:	687b      	ldr	r3, [r7, #4]
   2138a:	617b      	str	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   2138c:	4b30      	ldr	r3, [pc, #192]	; (21450 <vTaskNotifyGiveFromISR+0xdc>)
   2138e:	4798      	blx	r3
   21390:	0003      	movs	r3, r0
   21392:	613b      	str	r3, [r7, #16]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
   21394:	230f      	movs	r3, #15
   21396:	18fb      	adds	r3, r7, r3
   21398:	697a      	ldr	r2, [r7, #20]
   2139a:	214c      	movs	r1, #76	; 0x4c
   2139c:	5c52      	ldrb	r2, [r2, r1]
   2139e:	701a      	strb	r2, [r3, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
   213a0:	697b      	ldr	r3, [r7, #20]
   213a2:	224c      	movs	r2, #76	; 0x4c
   213a4:	2102      	movs	r1, #2
   213a6:	5499      	strb	r1, [r3, r2]

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
   213a8:	697b      	ldr	r3, [r7, #20]
   213aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   213ac:	1c5a      	adds	r2, r3, #1
   213ae:	697b      	ldr	r3, [r7, #20]
   213b0:	649a      	str	r2, [r3, #72]	; 0x48

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
   213b2:	230f      	movs	r3, #15
   213b4:	18fb      	adds	r3, r7, r3
   213b6:	781b      	ldrb	r3, [r3, #0]
   213b8:	2b01      	cmp	r3, #1
   213ba:	d140      	bne.n	2143e <vTaskNotifyGiveFromISR+0xca>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
   213bc:	697b      	ldr	r3, [r7, #20]
   213be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   213c0:	2b00      	cmp	r3, #0
   213c2:	d001      	beq.n	213c8 <vTaskNotifyGiveFromISR+0x54>
   213c4:	b672      	cpsid	i
   213c6:	e7fe      	b.n	213c6 <vTaskNotifyGiveFromISR+0x52>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   213c8:	4b22      	ldr	r3, [pc, #136]	; (21454 <vTaskNotifyGiveFromISR+0xe0>)
   213ca:	681b      	ldr	r3, [r3, #0]
   213cc:	2b00      	cmp	r3, #0
   213ce:	d11d      	bne.n	2140c <vTaskNotifyGiveFromISR+0x98>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   213d0:	697b      	ldr	r3, [r7, #20]
   213d2:	3304      	adds	r3, #4
   213d4:	0018      	movs	r0, r3
   213d6:	4b20      	ldr	r3, [pc, #128]	; (21458 <vTaskNotifyGiveFromISR+0xe4>)
   213d8:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   213da:	697b      	ldr	r3, [r7, #20]
   213dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   213de:	4b1f      	ldr	r3, [pc, #124]	; (2145c <vTaskNotifyGiveFromISR+0xe8>)
   213e0:	681b      	ldr	r3, [r3, #0]
   213e2:	429a      	cmp	r2, r3
   213e4:	d903      	bls.n	213ee <vTaskNotifyGiveFromISR+0x7a>
   213e6:	697b      	ldr	r3, [r7, #20]
   213e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   213ea:	4b1c      	ldr	r3, [pc, #112]	; (2145c <vTaskNotifyGiveFromISR+0xe8>)
   213ec:	601a      	str	r2, [r3, #0]
   213ee:	697b      	ldr	r3, [r7, #20]
   213f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   213f2:	0013      	movs	r3, r2
   213f4:	009b      	lsls	r3, r3, #2
   213f6:	189b      	adds	r3, r3, r2
   213f8:	009b      	lsls	r3, r3, #2
   213fa:	4a19      	ldr	r2, [pc, #100]	; (21460 <vTaskNotifyGiveFromISR+0xec>)
   213fc:	189a      	adds	r2, r3, r2
   213fe:	697b      	ldr	r3, [r7, #20]
   21400:	3304      	adds	r3, #4
   21402:	0019      	movs	r1, r3
   21404:	0010      	movs	r0, r2
   21406:	4b17      	ldr	r3, [pc, #92]	; (21464 <vTaskNotifyGiveFromISR+0xf0>)
   21408:	4798      	blx	r3
   2140a:	e007      	b.n	2141c <vTaskNotifyGiveFromISR+0xa8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
   2140c:	697b      	ldr	r3, [r7, #20]
   2140e:	3318      	adds	r3, #24
   21410:	001a      	movs	r2, r3
   21412:	4b15      	ldr	r3, [pc, #84]	; (21468 <vTaskNotifyGiveFromISR+0xf4>)
   21414:	0011      	movs	r1, r2
   21416:	0018      	movs	r0, r3
   21418:	4b12      	ldr	r3, [pc, #72]	; (21464 <vTaskNotifyGiveFromISR+0xf0>)
   2141a:	4798      	blx	r3
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
   2141c:	697b      	ldr	r3, [r7, #20]
   2141e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   21420:	4b12      	ldr	r3, [pc, #72]	; (2146c <vTaskNotifyGiveFromISR+0xf8>)
   21422:	681b      	ldr	r3, [r3, #0]
   21424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   21426:	429a      	cmp	r2, r3
   21428:	d909      	bls.n	2143e <vTaskNotifyGiveFromISR+0xca>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
   2142a:	683b      	ldr	r3, [r7, #0]
   2142c:	2b00      	cmp	r3, #0
   2142e:	d003      	beq.n	21438 <vTaskNotifyGiveFromISR+0xc4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
   21430:	683b      	ldr	r3, [r7, #0]
   21432:	2201      	movs	r2, #1
   21434:	601a      	str	r2, [r3, #0]
   21436:	e002      	b.n	2143e <vTaskNotifyGiveFromISR+0xca>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
   21438:	4b0d      	ldr	r3, [pc, #52]	; (21470 <vTaskNotifyGiveFromISR+0xfc>)
   2143a:	2201      	movs	r2, #1
   2143c:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   2143e:	693b      	ldr	r3, [r7, #16]
   21440:	0018      	movs	r0, r3
   21442:	4b0c      	ldr	r3, [pc, #48]	; (21474 <vTaskNotifyGiveFromISR+0x100>)
   21444:	4798      	blx	r3
	}
   21446:	46c0      	nop			; (mov r8, r8)
   21448:	46bd      	mov	sp, r7
   2144a:	b006      	add	sp, #24
   2144c:	bd80      	pop	{r7, pc}
   2144e:	46c0      	nop			; (mov r8, r8)
   21450:	0001f4a5 	.word	0x0001f4a5
   21454:	200003b8 	.word	0x200003b8
   21458:	0001f6f7 	.word	0x0001f6f7
   2145c:	20000398 	.word	0x20000398
   21460:	200002bc 	.word	0x200002bc
   21464:	0001f647 	.word	0x0001f647
   21468:	20000350 	.word	0x20000350
   2146c:	200002b8 	.word	0x200002b8
   21470:	200003a4 	.word	0x200003a4
   21474:	0001f4b1 	.word	0x0001f4b1

00021478 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   21478:	b580      	push	{r7, lr}
   2147a:	b084      	sub	sp, #16
   2147c:	af00      	add	r7, sp, #0
   2147e:	6078      	str	r0, [r7, #4]
   21480:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   21482:	4b21      	ldr	r3, [pc, #132]	; (21508 <prvAddCurrentTaskToDelayedList+0x90>)
   21484:	681b      	ldr	r3, [r3, #0]
   21486:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   21488:	4b20      	ldr	r3, [pc, #128]	; (2150c <prvAddCurrentTaskToDelayedList+0x94>)
   2148a:	681b      	ldr	r3, [r3, #0]
   2148c:	3304      	adds	r3, #4
   2148e:	0018      	movs	r0, r3
   21490:	4b1f      	ldr	r3, [pc, #124]	; (21510 <prvAddCurrentTaskToDelayedList+0x98>)
   21492:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   21494:	687b      	ldr	r3, [r7, #4]
   21496:	3301      	adds	r3, #1
   21498:	d10b      	bne.n	214b2 <prvAddCurrentTaskToDelayedList+0x3a>
   2149a:	683b      	ldr	r3, [r7, #0]
   2149c:	2b00      	cmp	r3, #0
   2149e:	d008      	beq.n	214b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   214a0:	4b1a      	ldr	r3, [pc, #104]	; (2150c <prvAddCurrentTaskToDelayedList+0x94>)
   214a2:	681b      	ldr	r3, [r3, #0]
   214a4:	1d1a      	adds	r2, r3, #4
   214a6:	4b1b      	ldr	r3, [pc, #108]	; (21514 <prvAddCurrentTaskToDelayedList+0x9c>)
   214a8:	0011      	movs	r1, r2
   214aa:	0018      	movs	r0, r3
   214ac:	4b1a      	ldr	r3, [pc, #104]	; (21518 <prvAddCurrentTaskToDelayedList+0xa0>)
   214ae:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   214b0:	e026      	b.n	21500 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   214b2:	68fa      	ldr	r2, [r7, #12]
   214b4:	687b      	ldr	r3, [r7, #4]
   214b6:	18d3      	adds	r3, r2, r3
   214b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   214ba:	4b14      	ldr	r3, [pc, #80]	; (2150c <prvAddCurrentTaskToDelayedList+0x94>)
   214bc:	681b      	ldr	r3, [r3, #0]
   214be:	68ba      	ldr	r2, [r7, #8]
   214c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   214c2:	68ba      	ldr	r2, [r7, #8]
   214c4:	68fb      	ldr	r3, [r7, #12]
   214c6:	429a      	cmp	r2, r3
   214c8:	d209      	bcs.n	214de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   214ca:	4b14      	ldr	r3, [pc, #80]	; (2151c <prvAddCurrentTaskToDelayedList+0xa4>)
   214cc:	681a      	ldr	r2, [r3, #0]
   214ce:	4b0f      	ldr	r3, [pc, #60]	; (2150c <prvAddCurrentTaskToDelayedList+0x94>)
   214d0:	681b      	ldr	r3, [r3, #0]
   214d2:	3304      	adds	r3, #4
   214d4:	0019      	movs	r1, r3
   214d6:	0010      	movs	r0, r2
   214d8:	4b11      	ldr	r3, [pc, #68]	; (21520 <prvAddCurrentTaskToDelayedList+0xa8>)
   214da:	4798      	blx	r3
}
   214dc:	e010      	b.n	21500 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   214de:	4b11      	ldr	r3, [pc, #68]	; (21524 <prvAddCurrentTaskToDelayedList+0xac>)
   214e0:	681a      	ldr	r2, [r3, #0]
   214e2:	4b0a      	ldr	r3, [pc, #40]	; (2150c <prvAddCurrentTaskToDelayedList+0x94>)
   214e4:	681b      	ldr	r3, [r3, #0]
   214e6:	3304      	adds	r3, #4
   214e8:	0019      	movs	r1, r3
   214ea:	0010      	movs	r0, r2
   214ec:	4b0c      	ldr	r3, [pc, #48]	; (21520 <prvAddCurrentTaskToDelayedList+0xa8>)
   214ee:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   214f0:	4b0d      	ldr	r3, [pc, #52]	; (21528 <prvAddCurrentTaskToDelayedList+0xb0>)
   214f2:	681b      	ldr	r3, [r3, #0]
   214f4:	68ba      	ldr	r2, [r7, #8]
   214f6:	429a      	cmp	r2, r3
   214f8:	d202      	bcs.n	21500 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   214fa:	4b0b      	ldr	r3, [pc, #44]	; (21528 <prvAddCurrentTaskToDelayedList+0xb0>)
   214fc:	68ba      	ldr	r2, [r7, #8]
   214fe:	601a      	str	r2, [r3, #0]
}
   21500:	46c0      	nop			; (mov r8, r8)
   21502:	46bd      	mov	sp, r7
   21504:	b004      	add	sp, #16
   21506:	bd80      	pop	{r7, pc}
   21508:	20000394 	.word	0x20000394
   2150c:	200002b8 	.word	0x200002b8
   21510:	0001f6f7 	.word	0x0001f6f7
   21514:	2000037c 	.word	0x2000037c
   21518:	0001f647 	.word	0x0001f647
   2151c:	2000034c 	.word	0x2000034c
   21520:	0001f68b 	.word	0x0001f68b
   21524:	20000348 	.word	0x20000348
   21528:	200003b0 	.word	0x200003b0

0002152c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   2152c:	b590      	push	{r4, r7, lr}
   2152e:	b085      	sub	sp, #20
   21530:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   21532:	2300      	movs	r3, #0
   21534:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   21536:	4b0e      	ldr	r3, [pc, #56]	; (21570 <xTimerCreateTimerTask+0x44>)
   21538:	4798      	blx	r3

	if( xTimerQueue != NULL )
   2153a:	4b0e      	ldr	r3, [pc, #56]	; (21574 <xTimerCreateTimerTask+0x48>)
   2153c:	681b      	ldr	r3, [r3, #0]
   2153e:	2b00      	cmp	r3, #0
   21540:	d00c      	beq.n	2155c <xTimerCreateTimerTask+0x30>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   21542:	2382      	movs	r3, #130	; 0x82
   21544:	005a      	lsls	r2, r3, #1
   21546:	490c      	ldr	r1, [pc, #48]	; (21578 <xTimerCreateTimerTask+0x4c>)
   21548:	480c      	ldr	r0, [pc, #48]	; (2157c <xTimerCreateTimerTask+0x50>)
   2154a:	4b0d      	ldr	r3, [pc, #52]	; (21580 <xTimerCreateTimerTask+0x54>)
   2154c:	9301      	str	r3, [sp, #4]
   2154e:	2304      	movs	r3, #4
   21550:	9300      	str	r3, [sp, #0]
   21552:	2300      	movs	r3, #0
   21554:	4c0b      	ldr	r4, [pc, #44]	; (21584 <xTimerCreateTimerTask+0x58>)
   21556:	47a0      	blx	r4
   21558:	0003      	movs	r3, r0
   2155a:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   2155c:	687b      	ldr	r3, [r7, #4]
   2155e:	2b00      	cmp	r3, #0
   21560:	d101      	bne.n	21566 <xTimerCreateTimerTask+0x3a>
   21562:	b672      	cpsid	i
   21564:	e7fe      	b.n	21564 <xTimerCreateTimerTask+0x38>
	return xReturn;
   21566:	687b      	ldr	r3, [r7, #4]
}
   21568:	0018      	movs	r0, r3
   2156a:	46bd      	mov	sp, r7
   2156c:	b003      	add	sp, #12
   2156e:	bd90      	pop	{r4, r7, pc}
   21570:	00021b3d 	.word	0x00021b3d
   21574:	200003ec 	.word	0x200003ec
   21578:	0002b638 	.word	0x0002b638
   2157c:	00021751 	.word	0x00021751
   21580:	200003f0 	.word	0x200003f0
   21584:	00020329 	.word	0x00020329

00021588 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
   21588:	b590      	push	{r4, r7, lr}
   2158a:	b089      	sub	sp, #36	; 0x24
   2158c:	af02      	add	r7, sp, #8
   2158e:	60f8      	str	r0, [r7, #12]
   21590:	60b9      	str	r1, [r7, #8]
   21592:	607a      	str	r2, [r7, #4]
   21594:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
   21596:	2028      	movs	r0, #40	; 0x28
   21598:	4b0b      	ldr	r3, [pc, #44]	; (215c8 <xTimerCreate+0x40>)
   2159a:	4798      	blx	r3
   2159c:	0003      	movs	r3, r0
   2159e:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
   215a0:	697b      	ldr	r3, [r7, #20]
   215a2:	2b00      	cmp	r3, #0
   215a4:	d00a      	beq.n	215bc <xTimerCreate+0x34>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
   215a6:	683c      	ldr	r4, [r7, #0]
   215a8:	687a      	ldr	r2, [r7, #4]
   215aa:	68b9      	ldr	r1, [r7, #8]
   215ac:	68f8      	ldr	r0, [r7, #12]
   215ae:	697b      	ldr	r3, [r7, #20]
   215b0:	9301      	str	r3, [sp, #4]
   215b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   215b4:	9300      	str	r3, [sp, #0]
   215b6:	0023      	movs	r3, r4
   215b8:	4c04      	ldr	r4, [pc, #16]	; (215cc <xTimerCreate+0x44>)
   215ba:	47a0      	blx	r4
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
   215bc:	697b      	ldr	r3, [r7, #20]
	}
   215be:	0018      	movs	r0, r3
   215c0:	46bd      	mov	sp, r7
   215c2:	b007      	add	sp, #28
   215c4:	bd90      	pop	{r4, r7, pc}
   215c6:	46c0      	nop			; (mov r8, r8)
   215c8:	0001f58d 	.word	0x0001f58d
   215cc:	000215d1 	.word	0x000215d1

000215d0 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
   215d0:	b580      	push	{r7, lr}
   215d2:	b084      	sub	sp, #16
   215d4:	af00      	add	r7, sp, #0
   215d6:	60f8      	str	r0, [r7, #12]
   215d8:	60b9      	str	r1, [r7, #8]
   215da:	607a      	str	r2, [r7, #4]
   215dc:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
   215de:	68bb      	ldr	r3, [r7, #8]
   215e0:	2b00      	cmp	r3, #0
   215e2:	d101      	bne.n	215e8 <prvInitialiseNewTimer+0x18>
   215e4:	b672      	cpsid	i
   215e6:	e7fe      	b.n	215e6 <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
   215e8:	69fb      	ldr	r3, [r7, #28]
   215ea:	2b00      	cmp	r3, #0
   215ec:	d015      	beq.n	2161a <prvInitialiseNewTimer+0x4a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
   215ee:	4b0d      	ldr	r3, [pc, #52]	; (21624 <prvInitialiseNewTimer+0x54>)
   215f0:	4798      	blx	r3

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
   215f2:	69fb      	ldr	r3, [r7, #28]
   215f4:	68fa      	ldr	r2, [r7, #12]
   215f6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
   215f8:	69fb      	ldr	r3, [r7, #28]
   215fa:	68ba      	ldr	r2, [r7, #8]
   215fc:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
   215fe:	69fb      	ldr	r3, [r7, #28]
   21600:	687a      	ldr	r2, [r7, #4]
   21602:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
   21604:	69fb      	ldr	r3, [r7, #28]
   21606:	683a      	ldr	r2, [r7, #0]
   21608:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
   2160a:	69fb      	ldr	r3, [r7, #28]
   2160c:	69ba      	ldr	r2, [r7, #24]
   2160e:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
   21610:	69fb      	ldr	r3, [r7, #28]
   21612:	3304      	adds	r3, #4
   21614:	0018      	movs	r0, r3
   21616:	4b04      	ldr	r3, [pc, #16]	; (21628 <prvInitialiseNewTimer+0x58>)
   21618:	4798      	blx	r3
		traceTIMER_CREATE( pxNewTimer );
	}
}
   2161a:	46c0      	nop			; (mov r8, r8)
   2161c:	46bd      	mov	sp, r7
   2161e:	b004      	add	sp, #16
   21620:	bd80      	pop	{r7, pc}
   21622:	46c0      	nop			; (mov r8, r8)
   21624:	00021b3d 	.word	0x00021b3d
   21628:	0001f631 	.word	0x0001f631

0002162c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   2162c:	b590      	push	{r4, r7, lr}
   2162e:	b08b      	sub	sp, #44	; 0x2c
   21630:	af00      	add	r7, sp, #0
   21632:	60f8      	str	r0, [r7, #12]
   21634:	60b9      	str	r1, [r7, #8]
   21636:	607a      	str	r2, [r7, #4]
   21638:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   2163a:	2300      	movs	r3, #0
   2163c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   2163e:	68fb      	ldr	r3, [r7, #12]
   21640:	2b00      	cmp	r3, #0
   21642:	d101      	bne.n	21648 <xTimerGenericCommand+0x1c>
   21644:	b672      	cpsid	i
   21646:	e7fe      	b.n	21646 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   21648:	4b1e      	ldr	r3, [pc, #120]	; (216c4 <xTimerGenericCommand+0x98>)
   2164a:	681b      	ldr	r3, [r3, #0]
   2164c:	2b00      	cmp	r3, #0
   2164e:	d033      	beq.n	216b8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   21650:	2314      	movs	r3, #20
   21652:	18fb      	adds	r3, r7, r3
   21654:	68ba      	ldr	r2, [r7, #8]
   21656:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   21658:	2314      	movs	r3, #20
   2165a:	18fb      	adds	r3, r7, r3
   2165c:	687a      	ldr	r2, [r7, #4]
   2165e:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   21660:	2314      	movs	r3, #20
   21662:	18fb      	adds	r3, r7, r3
   21664:	68fa      	ldr	r2, [r7, #12]
   21666:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   21668:	68bb      	ldr	r3, [r7, #8]
   2166a:	2b05      	cmp	r3, #5
   2166c:	dc1a      	bgt.n	216a4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   2166e:	4b16      	ldr	r3, [pc, #88]	; (216c8 <xTimerGenericCommand+0x9c>)
   21670:	4798      	blx	r3
   21672:	0003      	movs	r3, r0
   21674:	2b02      	cmp	r3, #2
   21676:	d10a      	bne.n	2168e <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   21678:	4b12      	ldr	r3, [pc, #72]	; (216c4 <xTimerGenericCommand+0x98>)
   2167a:	6818      	ldr	r0, [r3, #0]
   2167c:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2167e:	2314      	movs	r3, #20
   21680:	18f9      	adds	r1, r7, r3
   21682:	2300      	movs	r3, #0
   21684:	4c11      	ldr	r4, [pc, #68]	; (216cc <xTimerGenericCommand+0xa0>)
   21686:	47a0      	blx	r4
   21688:	0003      	movs	r3, r0
   2168a:	627b      	str	r3, [r7, #36]	; 0x24
   2168c:	e014      	b.n	216b8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   2168e:	4b0d      	ldr	r3, [pc, #52]	; (216c4 <xTimerGenericCommand+0x98>)
   21690:	6818      	ldr	r0, [r3, #0]
   21692:	2314      	movs	r3, #20
   21694:	18f9      	adds	r1, r7, r3
   21696:	2300      	movs	r3, #0
   21698:	2200      	movs	r2, #0
   2169a:	4c0c      	ldr	r4, [pc, #48]	; (216cc <xTimerGenericCommand+0xa0>)
   2169c:	47a0      	blx	r4
   2169e:	0003      	movs	r3, r0
   216a0:	627b      	str	r3, [r7, #36]	; 0x24
   216a2:	e009      	b.n	216b8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   216a4:	4b07      	ldr	r3, [pc, #28]	; (216c4 <xTimerGenericCommand+0x98>)
   216a6:	6818      	ldr	r0, [r3, #0]
   216a8:	683a      	ldr	r2, [r7, #0]
   216aa:	2314      	movs	r3, #20
   216ac:	18f9      	adds	r1, r7, r3
   216ae:	2300      	movs	r3, #0
   216b0:	4c07      	ldr	r4, [pc, #28]	; (216d0 <xTimerGenericCommand+0xa4>)
   216b2:	47a0      	blx	r4
   216b4:	0003      	movs	r3, r0
   216b6:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   216b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   216ba:	0018      	movs	r0, r3
   216bc:	46bd      	mov	sp, r7
   216be:	b00b      	add	sp, #44	; 0x2c
   216c0:	bd90      	pop	{r4, r7, pc}
   216c2:	46c0      	nop			; (mov r8, r8)
   216c4:	200003ec 	.word	0x200003ec
   216c8:	00020ff1 	.word	0x00020ff1
   216cc:	0001f8c1 	.word	0x0001f8c1
   216d0:	0001faa1 	.word	0x0001faa1

000216d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   216d4:	b590      	push	{r4, r7, lr}
   216d6:	b087      	sub	sp, #28
   216d8:	af02      	add	r7, sp, #8
   216da:	6078      	str	r0, [r7, #4]
   216dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   216de:	4b18      	ldr	r3, [pc, #96]	; (21740 <prvProcessExpiredTimer+0x6c>)
   216e0:	681b      	ldr	r3, [r3, #0]
   216e2:	68db      	ldr	r3, [r3, #12]
   216e4:	68db      	ldr	r3, [r3, #12]
   216e6:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   216e8:	68fb      	ldr	r3, [r7, #12]
   216ea:	3304      	adds	r3, #4
   216ec:	0018      	movs	r0, r3
   216ee:	4b15      	ldr	r3, [pc, #84]	; (21744 <prvProcessExpiredTimer+0x70>)
   216f0:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   216f2:	68fb      	ldr	r3, [r7, #12]
   216f4:	69db      	ldr	r3, [r3, #28]
   216f6:	2b01      	cmp	r3, #1
   216f8:	d119      	bne.n	2172e <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   216fa:	68fb      	ldr	r3, [r7, #12]
   216fc:	699a      	ldr	r2, [r3, #24]
   216fe:	687b      	ldr	r3, [r7, #4]
   21700:	18d1      	adds	r1, r2, r3
   21702:	687b      	ldr	r3, [r7, #4]
   21704:	683a      	ldr	r2, [r7, #0]
   21706:	68f8      	ldr	r0, [r7, #12]
   21708:	4c0f      	ldr	r4, [pc, #60]	; (21748 <prvProcessExpiredTimer+0x74>)
   2170a:	47a0      	blx	r4
   2170c:	1e03      	subs	r3, r0, #0
   2170e:	d00e      	beq.n	2172e <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   21710:	687a      	ldr	r2, [r7, #4]
   21712:	68f8      	ldr	r0, [r7, #12]
   21714:	2300      	movs	r3, #0
   21716:	9300      	str	r3, [sp, #0]
   21718:	2300      	movs	r3, #0
   2171a:	2100      	movs	r1, #0
   2171c:	4c0b      	ldr	r4, [pc, #44]	; (2174c <prvProcessExpiredTimer+0x78>)
   2171e:	47a0      	blx	r4
   21720:	0003      	movs	r3, r0
   21722:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   21724:	68bb      	ldr	r3, [r7, #8]
   21726:	2b00      	cmp	r3, #0
   21728:	d101      	bne.n	2172e <prvProcessExpiredTimer+0x5a>
   2172a:	b672      	cpsid	i
   2172c:	e7fe      	b.n	2172c <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   2172e:	68fb      	ldr	r3, [r7, #12]
   21730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21732:	68fa      	ldr	r2, [r7, #12]
   21734:	0010      	movs	r0, r2
   21736:	4798      	blx	r3
}
   21738:	46c0      	nop			; (mov r8, r8)
   2173a:	46bd      	mov	sp, r7
   2173c:	b005      	add	sp, #20
   2173e:	bd90      	pop	{r4, r7, pc}
   21740:	200003e4 	.word	0x200003e4
   21744:	0001f6f7 	.word	0x0001f6f7
   21748:	000218b1 	.word	0x000218b1
   2174c:	0002162d 	.word	0x0002162d

00021750 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   21750:	b580      	push	{r7, lr}
   21752:	b084      	sub	sp, #16
   21754:	af00      	add	r7, sp, #0
   21756:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   21758:	2308      	movs	r3, #8
   2175a:	18fb      	adds	r3, r7, r3
   2175c:	0018      	movs	r0, r3
   2175e:	4b06      	ldr	r3, [pc, #24]	; (21778 <prvTimerTask+0x28>)
   21760:	4798      	blx	r3
   21762:	0003      	movs	r3, r0
   21764:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   21766:	68ba      	ldr	r2, [r7, #8]
   21768:	68fb      	ldr	r3, [r7, #12]
   2176a:	0011      	movs	r1, r2
   2176c:	0018      	movs	r0, r3
   2176e:	4b03      	ldr	r3, [pc, #12]	; (2177c <prvTimerTask+0x2c>)
   21770:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   21772:	4b03      	ldr	r3, [pc, #12]	; (21780 <prvTimerTask+0x30>)
   21774:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   21776:	e7ef      	b.n	21758 <prvTimerTask+0x8>
   21778:	00021829 	.word	0x00021829
   2177c:	00021785 	.word	0x00021785
   21780:	00021939 	.word	0x00021939

00021784 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   21784:	b580      	push	{r7, lr}
   21786:	b084      	sub	sp, #16
   21788:	af00      	add	r7, sp, #0
   2178a:	6078      	str	r0, [r7, #4]
   2178c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   2178e:	4b1e      	ldr	r3, [pc, #120]	; (21808 <prvProcessTimerOrBlockTask+0x84>)
   21790:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   21792:	2308      	movs	r3, #8
   21794:	18fb      	adds	r3, r7, r3
   21796:	0018      	movs	r0, r3
   21798:	4b1c      	ldr	r3, [pc, #112]	; (2180c <prvProcessTimerOrBlockTask+0x88>)
   2179a:	4798      	blx	r3
   2179c:	0003      	movs	r3, r0
   2179e:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   217a0:	68bb      	ldr	r3, [r7, #8]
   217a2:	2b00      	cmp	r3, #0
   217a4:	d129      	bne.n	217fa <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   217a6:	683b      	ldr	r3, [r7, #0]
   217a8:	2b00      	cmp	r3, #0
   217aa:	d10c      	bne.n	217c6 <prvProcessTimerOrBlockTask+0x42>
   217ac:	687a      	ldr	r2, [r7, #4]
   217ae:	68fb      	ldr	r3, [r7, #12]
   217b0:	429a      	cmp	r2, r3
   217b2:	d808      	bhi.n	217c6 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   217b4:	4b16      	ldr	r3, [pc, #88]	; (21810 <prvProcessTimerOrBlockTask+0x8c>)
   217b6:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   217b8:	68fa      	ldr	r2, [r7, #12]
   217ba:	687b      	ldr	r3, [r7, #4]
   217bc:	0011      	movs	r1, r2
   217be:	0018      	movs	r0, r3
   217c0:	4b14      	ldr	r3, [pc, #80]	; (21814 <prvProcessTimerOrBlockTask+0x90>)
   217c2:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   217c4:	e01b      	b.n	217fe <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   217c6:	683b      	ldr	r3, [r7, #0]
   217c8:	2b00      	cmp	r3, #0
   217ca:	d006      	beq.n	217da <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   217cc:	4b12      	ldr	r3, [pc, #72]	; (21818 <prvProcessTimerOrBlockTask+0x94>)
   217ce:	681b      	ldr	r3, [r3, #0]
   217d0:	681b      	ldr	r3, [r3, #0]
   217d2:	425a      	negs	r2, r3
   217d4:	4153      	adcs	r3, r2
   217d6:	b2db      	uxtb	r3, r3
   217d8:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   217da:	4b10      	ldr	r3, [pc, #64]	; (2181c <prvProcessTimerOrBlockTask+0x98>)
   217dc:	6818      	ldr	r0, [r3, #0]
   217de:	687a      	ldr	r2, [r7, #4]
   217e0:	68fb      	ldr	r3, [r7, #12]
   217e2:	1ad3      	subs	r3, r2, r3
   217e4:	683a      	ldr	r2, [r7, #0]
   217e6:	0019      	movs	r1, r3
   217e8:	4b0d      	ldr	r3, [pc, #52]	; (21820 <prvProcessTimerOrBlockTask+0x9c>)
   217ea:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   217ec:	4b08      	ldr	r3, [pc, #32]	; (21810 <prvProcessTimerOrBlockTask+0x8c>)
   217ee:	4798      	blx	r3
   217f0:	1e03      	subs	r3, r0, #0
   217f2:	d104      	bne.n	217fe <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   217f4:	4b0b      	ldr	r3, [pc, #44]	; (21824 <prvProcessTimerOrBlockTask+0xa0>)
   217f6:	4798      	blx	r3
}
   217f8:	e001      	b.n	217fe <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   217fa:	4b05      	ldr	r3, [pc, #20]	; (21810 <prvProcessTimerOrBlockTask+0x8c>)
   217fc:	4798      	blx	r3
}
   217fe:	46c0      	nop			; (mov r8, r8)
   21800:	46bd      	mov	sp, r7
   21802:	b004      	add	sp, #16
   21804:	bd80      	pop	{r7, pc}
   21806:	46c0      	nop			; (mov r8, r8)
   21808:	00020881 	.word	0x00020881
   2180c:	00021869 	.word	0x00021869
   21810:	00020899 	.word	0x00020899
   21814:	000216d5 	.word	0x000216d5
   21818:	200003e8 	.word	0x200003e8
   2181c:	200003ec 	.word	0x200003ec
   21820:	0002020d 	.word	0x0002020d
   21824:	0001f431 	.word	0x0001f431

00021828 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   21828:	b580      	push	{r7, lr}
   2182a:	b084      	sub	sp, #16
   2182c:	af00      	add	r7, sp, #0
   2182e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   21830:	4b0c      	ldr	r3, [pc, #48]	; (21864 <prvGetNextExpireTime+0x3c>)
   21832:	681b      	ldr	r3, [r3, #0]
   21834:	681b      	ldr	r3, [r3, #0]
   21836:	425a      	negs	r2, r3
   21838:	4153      	adcs	r3, r2
   2183a:	b2db      	uxtb	r3, r3
   2183c:	001a      	movs	r2, r3
   2183e:	687b      	ldr	r3, [r7, #4]
   21840:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   21842:	687b      	ldr	r3, [r7, #4]
   21844:	681b      	ldr	r3, [r3, #0]
   21846:	2b00      	cmp	r3, #0
   21848:	d105      	bne.n	21856 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   2184a:	4b06      	ldr	r3, [pc, #24]	; (21864 <prvGetNextExpireTime+0x3c>)
   2184c:	681b      	ldr	r3, [r3, #0]
   2184e:	68db      	ldr	r3, [r3, #12]
   21850:	681b      	ldr	r3, [r3, #0]
   21852:	60fb      	str	r3, [r7, #12]
   21854:	e001      	b.n	2185a <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   21856:	2300      	movs	r3, #0
   21858:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   2185a:	68fb      	ldr	r3, [r7, #12]
}
   2185c:	0018      	movs	r0, r3
   2185e:	46bd      	mov	sp, r7
   21860:	b004      	add	sp, #16
   21862:	bd80      	pop	{r7, pc}
   21864:	200003e4 	.word	0x200003e4

00021868 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   21868:	b580      	push	{r7, lr}
   2186a:	b084      	sub	sp, #16
   2186c:	af00      	add	r7, sp, #0
   2186e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   21870:	4b0c      	ldr	r3, [pc, #48]	; (218a4 <prvSampleTimeNow+0x3c>)
   21872:	4798      	blx	r3
   21874:	0003      	movs	r3, r0
   21876:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   21878:	4b0b      	ldr	r3, [pc, #44]	; (218a8 <prvSampleTimeNow+0x40>)
   2187a:	681b      	ldr	r3, [r3, #0]
   2187c:	68fa      	ldr	r2, [r7, #12]
   2187e:	429a      	cmp	r2, r3
   21880:	d205      	bcs.n	2188e <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   21882:	4b0a      	ldr	r3, [pc, #40]	; (218ac <prvSampleTimeNow+0x44>)
   21884:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   21886:	687b      	ldr	r3, [r7, #4]
   21888:	2201      	movs	r2, #1
   2188a:	601a      	str	r2, [r3, #0]
   2188c:	e002      	b.n	21894 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   2188e:	687b      	ldr	r3, [r7, #4]
   21890:	2200      	movs	r2, #0
   21892:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   21894:	4b04      	ldr	r3, [pc, #16]	; (218a8 <prvSampleTimeNow+0x40>)
   21896:	68fa      	ldr	r2, [r7, #12]
   21898:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   2189a:	68fb      	ldr	r3, [r7, #12]
}
   2189c:	0018      	movs	r0, r3
   2189e:	46bd      	mov	sp, r7
   218a0:	b004      	add	sp, #16
   218a2:	bd80      	pop	{r7, pc}
   218a4:	000209cd 	.word	0x000209cd
   218a8:	200003f4 	.word	0x200003f4
   218ac:	00021a7d 	.word	0x00021a7d

000218b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   218b0:	b580      	push	{r7, lr}
   218b2:	b086      	sub	sp, #24
   218b4:	af00      	add	r7, sp, #0
   218b6:	60f8      	str	r0, [r7, #12]
   218b8:	60b9      	str	r1, [r7, #8]
   218ba:	607a      	str	r2, [r7, #4]
   218bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   218be:	2300      	movs	r3, #0
   218c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   218c2:	68fb      	ldr	r3, [r7, #12]
   218c4:	68ba      	ldr	r2, [r7, #8]
   218c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   218c8:	68fb      	ldr	r3, [r7, #12]
   218ca:	68fa      	ldr	r2, [r7, #12]
   218cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   218ce:	68ba      	ldr	r2, [r7, #8]
   218d0:	687b      	ldr	r3, [r7, #4]
   218d2:	429a      	cmp	r2, r3
   218d4:	d812      	bhi.n	218fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   218d6:	687a      	ldr	r2, [r7, #4]
   218d8:	683b      	ldr	r3, [r7, #0]
   218da:	1ad2      	subs	r2, r2, r3
   218dc:	68fb      	ldr	r3, [r7, #12]
   218de:	699b      	ldr	r3, [r3, #24]
   218e0:	429a      	cmp	r2, r3
   218e2:	d302      	bcc.n	218ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   218e4:	2301      	movs	r3, #1
   218e6:	617b      	str	r3, [r7, #20]
   218e8:	e01b      	b.n	21922 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   218ea:	4b10      	ldr	r3, [pc, #64]	; (2192c <prvInsertTimerInActiveList+0x7c>)
   218ec:	681a      	ldr	r2, [r3, #0]
   218ee:	68fb      	ldr	r3, [r7, #12]
   218f0:	3304      	adds	r3, #4
   218f2:	0019      	movs	r1, r3
   218f4:	0010      	movs	r0, r2
   218f6:	4b0e      	ldr	r3, [pc, #56]	; (21930 <prvInsertTimerInActiveList+0x80>)
   218f8:	4798      	blx	r3
   218fa:	e012      	b.n	21922 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   218fc:	687a      	ldr	r2, [r7, #4]
   218fe:	683b      	ldr	r3, [r7, #0]
   21900:	429a      	cmp	r2, r3
   21902:	d206      	bcs.n	21912 <prvInsertTimerInActiveList+0x62>
   21904:	68ba      	ldr	r2, [r7, #8]
   21906:	683b      	ldr	r3, [r7, #0]
   21908:	429a      	cmp	r2, r3
   2190a:	d302      	bcc.n	21912 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   2190c:	2301      	movs	r3, #1
   2190e:	617b      	str	r3, [r7, #20]
   21910:	e007      	b.n	21922 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   21912:	4b08      	ldr	r3, [pc, #32]	; (21934 <prvInsertTimerInActiveList+0x84>)
   21914:	681a      	ldr	r2, [r3, #0]
   21916:	68fb      	ldr	r3, [r7, #12]
   21918:	3304      	adds	r3, #4
   2191a:	0019      	movs	r1, r3
   2191c:	0010      	movs	r0, r2
   2191e:	4b04      	ldr	r3, [pc, #16]	; (21930 <prvInsertTimerInActiveList+0x80>)
   21920:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   21922:	697b      	ldr	r3, [r7, #20]
}
   21924:	0018      	movs	r0, r3
   21926:	46bd      	mov	sp, r7
   21928:	b006      	add	sp, #24
   2192a:	bd80      	pop	{r7, pc}
   2192c:	200003e8 	.word	0x200003e8
   21930:	0001f68b 	.word	0x0001f68b
   21934:	200003e4 	.word	0x200003e4

00021938 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   21938:	b590      	push	{r4, r7, lr}
   2193a:	b08d      	sub	sp, #52	; 0x34
   2193c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   2193e:	e07e      	b.n	21a3e <prvProcessReceivedCommands+0x106>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
   21940:	2308      	movs	r3, #8
   21942:	18fb      	adds	r3, r7, r3
   21944:	681b      	ldr	r3, [r3, #0]
   21946:	2b00      	cmp	r3, #0
   21948:	da10      	bge.n	2196c <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
   2194a:	2308      	movs	r3, #8
   2194c:	18fb      	adds	r3, r7, r3
   2194e:	3304      	adds	r3, #4
   21950:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
   21952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21954:	2b00      	cmp	r3, #0
   21956:	d101      	bne.n	2195c <prvProcessReceivedCommands+0x24>
   21958:	b672      	cpsid	i
   2195a:	e7fe      	b.n	2195a <prvProcessReceivedCommands+0x22>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
   2195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2195e:	681a      	ldr	r2, [r3, #0]
   21960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21962:	6858      	ldr	r0, [r3, #4]
   21964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21966:	689b      	ldr	r3, [r3, #8]
   21968:	0019      	movs	r1, r3
   2196a:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   2196c:	2308      	movs	r3, #8
   2196e:	18fb      	adds	r3, r7, r3
   21970:	681b      	ldr	r3, [r3, #0]
   21972:	2b00      	cmp	r3, #0
   21974:	db63      	blt.n	21a3e <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   21976:	2308      	movs	r3, #8
   21978:	18fb      	adds	r3, r7, r3
   2197a:	689b      	ldr	r3, [r3, #8]
   2197c:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   2197e:	6a3b      	ldr	r3, [r7, #32]
   21980:	695b      	ldr	r3, [r3, #20]
   21982:	2b00      	cmp	r3, #0
   21984:	d004      	beq.n	21990 <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   21986:	6a3b      	ldr	r3, [r7, #32]
   21988:	3304      	adds	r3, #4
   2198a:	0018      	movs	r0, r3
   2198c:	4b33      	ldr	r3, [pc, #204]	; (21a5c <prvProcessReceivedCommands+0x124>)
   2198e:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   21990:	1d3b      	adds	r3, r7, #4
   21992:	0018      	movs	r0, r3
   21994:	4b32      	ldr	r3, [pc, #200]	; (21a60 <prvProcessReceivedCommands+0x128>)
   21996:	4798      	blx	r3
   21998:	0003      	movs	r3, r0
   2199a:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
   2199c:	2308      	movs	r3, #8
   2199e:	18fb      	adds	r3, r7, r3
   219a0:	681b      	ldr	r3, [r3, #0]
   219a2:	2b09      	cmp	r3, #9
   219a4:	d84a      	bhi.n	21a3c <prvProcessReceivedCommands+0x104>
   219a6:	009a      	lsls	r2, r3, #2
   219a8:	4b2e      	ldr	r3, [pc, #184]	; (21a64 <prvProcessReceivedCommands+0x12c>)
   219aa:	18d3      	adds	r3, r2, r3
   219ac:	681b      	ldr	r3, [r3, #0]
   219ae:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   219b0:	2308      	movs	r3, #8
   219b2:	18fb      	adds	r3, r7, r3
   219b4:	685a      	ldr	r2, [r3, #4]
   219b6:	6a3b      	ldr	r3, [r7, #32]
   219b8:	699b      	ldr	r3, [r3, #24]
   219ba:	18d1      	adds	r1, r2, r3
   219bc:	2308      	movs	r3, #8
   219be:	18fb      	adds	r3, r7, r3
   219c0:	685b      	ldr	r3, [r3, #4]
   219c2:	69fa      	ldr	r2, [r7, #28]
   219c4:	6a38      	ldr	r0, [r7, #32]
   219c6:	4c28      	ldr	r4, [pc, #160]	; (21a68 <prvProcessReceivedCommands+0x130>)
   219c8:	47a0      	blx	r4
   219ca:	1e03      	subs	r3, r0, #0
   219cc:	d037      	beq.n	21a3e <prvProcessReceivedCommands+0x106>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   219ce:	6a3b      	ldr	r3, [r7, #32]
   219d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   219d2:	6a3a      	ldr	r2, [r7, #32]
   219d4:	0010      	movs	r0, r2
   219d6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   219d8:	6a3b      	ldr	r3, [r7, #32]
   219da:	69db      	ldr	r3, [r3, #28]
   219dc:	2b01      	cmp	r3, #1
   219de:	d12e      	bne.n	21a3e <prvProcessReceivedCommands+0x106>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   219e0:	2308      	movs	r3, #8
   219e2:	18fb      	adds	r3, r7, r3
   219e4:	685a      	ldr	r2, [r3, #4]
   219e6:	6a3b      	ldr	r3, [r7, #32]
   219e8:	699b      	ldr	r3, [r3, #24]
   219ea:	18d2      	adds	r2, r2, r3
   219ec:	6a38      	ldr	r0, [r7, #32]
   219ee:	2300      	movs	r3, #0
   219f0:	9300      	str	r3, [sp, #0]
   219f2:	2300      	movs	r3, #0
   219f4:	2100      	movs	r1, #0
   219f6:	4c1d      	ldr	r4, [pc, #116]	; (21a6c <prvProcessReceivedCommands+0x134>)
   219f8:	47a0      	blx	r4
   219fa:	0003      	movs	r3, r0
   219fc:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
   219fe:	69bb      	ldr	r3, [r7, #24]
   21a00:	2b00      	cmp	r3, #0
   21a02:	d11c      	bne.n	21a3e <prvProcessReceivedCommands+0x106>
   21a04:	b672      	cpsid	i
   21a06:	e7fe      	b.n	21a06 <prvProcessReceivedCommands+0xce>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   21a08:	2308      	movs	r3, #8
   21a0a:	18fb      	adds	r3, r7, r3
   21a0c:	685a      	ldr	r2, [r3, #4]
   21a0e:	6a3b      	ldr	r3, [r7, #32]
   21a10:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   21a12:	6a3b      	ldr	r3, [r7, #32]
   21a14:	699b      	ldr	r3, [r3, #24]
   21a16:	2b00      	cmp	r3, #0
   21a18:	d101      	bne.n	21a1e <prvProcessReceivedCommands+0xe6>
   21a1a:	b672      	cpsid	i
   21a1c:	e7fe      	b.n	21a1c <prvProcessReceivedCommands+0xe4>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   21a1e:	6a3b      	ldr	r3, [r7, #32]
   21a20:	699a      	ldr	r2, [r3, #24]
   21a22:	69fb      	ldr	r3, [r7, #28]
   21a24:	18d1      	adds	r1, r2, r3
   21a26:	69fb      	ldr	r3, [r7, #28]
   21a28:	69fa      	ldr	r2, [r7, #28]
   21a2a:	6a38      	ldr	r0, [r7, #32]
   21a2c:	4c0e      	ldr	r4, [pc, #56]	; (21a68 <prvProcessReceivedCommands+0x130>)
   21a2e:	47a0      	blx	r4
					break;
   21a30:	e005      	b.n	21a3e <prvProcessReceivedCommands+0x106>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   21a32:	6a3b      	ldr	r3, [r7, #32]
   21a34:	0018      	movs	r0, r3
   21a36:	4b0e      	ldr	r3, [pc, #56]	; (21a70 <prvProcessReceivedCommands+0x138>)
   21a38:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   21a3a:	e000      	b.n	21a3e <prvProcessReceivedCommands+0x106>

				default	:
					/* Don't expect to get here. */
					break;
   21a3c:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   21a3e:	4b0d      	ldr	r3, [pc, #52]	; (21a74 <prvProcessReceivedCommands+0x13c>)
   21a40:	681b      	ldr	r3, [r3, #0]
   21a42:	2208      	movs	r2, #8
   21a44:	18b9      	adds	r1, r7, r2
   21a46:	2200      	movs	r2, #0
   21a48:	0018      	movs	r0, r3
   21a4a:	4b0b      	ldr	r3, [pc, #44]	; (21a78 <prvProcessReceivedCommands+0x140>)
   21a4c:	4798      	blx	r3
   21a4e:	1e03      	subs	r3, r0, #0
   21a50:	d000      	beq.n	21a54 <prvProcessReceivedCommands+0x11c>
   21a52:	e775      	b.n	21940 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   21a54:	46c0      	nop			; (mov r8, r8)
   21a56:	46bd      	mov	sp, r7
   21a58:	b00b      	add	sp, #44	; 0x2c
   21a5a:	bd90      	pop	{r4, r7, pc}
   21a5c:	0001f6f7 	.word	0x0001f6f7
   21a60:	00021869 	.word	0x00021869
   21a64:	0002b640 	.word	0x0002b640
   21a68:	000218b1 	.word	0x000218b1
   21a6c:	0002162d 	.word	0x0002162d
   21a70:	0001f5c1 	.word	0x0001f5c1
   21a74:	200003ec 	.word	0x200003ec
   21a78:	0001fbc1 	.word	0x0001fbc1

00021a7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   21a7c:	b590      	push	{r4, r7, lr}
   21a7e:	b089      	sub	sp, #36	; 0x24
   21a80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   21a82:	e03e      	b.n	21b02 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   21a84:	4b28      	ldr	r3, [pc, #160]	; (21b28 <prvSwitchTimerLists+0xac>)
   21a86:	681b      	ldr	r3, [r3, #0]
   21a88:	68db      	ldr	r3, [r3, #12]
   21a8a:	681b      	ldr	r3, [r3, #0]
   21a8c:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   21a8e:	4b26      	ldr	r3, [pc, #152]	; (21b28 <prvSwitchTimerLists+0xac>)
   21a90:	681b      	ldr	r3, [r3, #0]
   21a92:	68db      	ldr	r3, [r3, #12]
   21a94:	68db      	ldr	r3, [r3, #12]
   21a96:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   21a98:	693b      	ldr	r3, [r7, #16]
   21a9a:	3304      	adds	r3, #4
   21a9c:	0018      	movs	r0, r3
   21a9e:	4b23      	ldr	r3, [pc, #140]	; (21b2c <prvSwitchTimerLists+0xb0>)
   21aa0:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   21aa2:	693b      	ldr	r3, [r7, #16]
   21aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21aa6:	693a      	ldr	r2, [r7, #16]
   21aa8:	0010      	movs	r0, r2
   21aaa:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   21aac:	693b      	ldr	r3, [r7, #16]
   21aae:	69db      	ldr	r3, [r3, #28]
   21ab0:	2b01      	cmp	r3, #1
   21ab2:	d126      	bne.n	21b02 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   21ab4:	693b      	ldr	r3, [r7, #16]
   21ab6:	699a      	ldr	r2, [r3, #24]
   21ab8:	697b      	ldr	r3, [r7, #20]
   21aba:	18d3      	adds	r3, r2, r3
   21abc:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   21abe:	68fa      	ldr	r2, [r7, #12]
   21ac0:	697b      	ldr	r3, [r7, #20]
   21ac2:	429a      	cmp	r2, r3
   21ac4:	d90e      	bls.n	21ae4 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   21ac6:	693b      	ldr	r3, [r7, #16]
   21ac8:	68fa      	ldr	r2, [r7, #12]
   21aca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   21acc:	693b      	ldr	r3, [r7, #16]
   21ace:	693a      	ldr	r2, [r7, #16]
   21ad0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   21ad2:	4b15      	ldr	r3, [pc, #84]	; (21b28 <prvSwitchTimerLists+0xac>)
   21ad4:	681a      	ldr	r2, [r3, #0]
   21ad6:	693b      	ldr	r3, [r7, #16]
   21ad8:	3304      	adds	r3, #4
   21ada:	0019      	movs	r1, r3
   21adc:	0010      	movs	r0, r2
   21ade:	4b14      	ldr	r3, [pc, #80]	; (21b30 <prvSwitchTimerLists+0xb4>)
   21ae0:	4798      	blx	r3
   21ae2:	e00e      	b.n	21b02 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   21ae4:	697a      	ldr	r2, [r7, #20]
   21ae6:	6938      	ldr	r0, [r7, #16]
   21ae8:	2300      	movs	r3, #0
   21aea:	9300      	str	r3, [sp, #0]
   21aec:	2300      	movs	r3, #0
   21aee:	2100      	movs	r1, #0
   21af0:	4c10      	ldr	r4, [pc, #64]	; (21b34 <prvSwitchTimerLists+0xb8>)
   21af2:	47a0      	blx	r4
   21af4:	0003      	movs	r3, r0
   21af6:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   21af8:	68bb      	ldr	r3, [r7, #8]
   21afa:	2b00      	cmp	r3, #0
   21afc:	d101      	bne.n	21b02 <prvSwitchTimerLists+0x86>
   21afe:	b672      	cpsid	i
   21b00:	e7fe      	b.n	21b00 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   21b02:	4b09      	ldr	r3, [pc, #36]	; (21b28 <prvSwitchTimerLists+0xac>)
   21b04:	681b      	ldr	r3, [r3, #0]
   21b06:	681b      	ldr	r3, [r3, #0]
   21b08:	2b00      	cmp	r3, #0
   21b0a:	d1bb      	bne.n	21a84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   21b0c:	4b06      	ldr	r3, [pc, #24]	; (21b28 <prvSwitchTimerLists+0xac>)
   21b0e:	681b      	ldr	r3, [r3, #0]
   21b10:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   21b12:	4b09      	ldr	r3, [pc, #36]	; (21b38 <prvSwitchTimerLists+0xbc>)
   21b14:	681a      	ldr	r2, [r3, #0]
   21b16:	4b04      	ldr	r3, [pc, #16]	; (21b28 <prvSwitchTimerLists+0xac>)
   21b18:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   21b1a:	4b07      	ldr	r3, [pc, #28]	; (21b38 <prvSwitchTimerLists+0xbc>)
   21b1c:	687a      	ldr	r2, [r7, #4]
   21b1e:	601a      	str	r2, [r3, #0]
}
   21b20:	46c0      	nop			; (mov r8, r8)
   21b22:	46bd      	mov	sp, r7
   21b24:	b007      	add	sp, #28
   21b26:	bd90      	pop	{r4, r7, pc}
   21b28:	200003e4 	.word	0x200003e4
   21b2c:	0001f6f7 	.word	0x0001f6f7
   21b30:	0001f68b 	.word	0x0001f68b
   21b34:	0002162d 	.word	0x0002162d
   21b38:	200003e8 	.word	0x200003e8

00021b3c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   21b3c:	b580      	push	{r7, lr}
   21b3e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   21b40:	4b10      	ldr	r3, [pc, #64]	; (21b84 <prvCheckForValidListAndQueue+0x48>)
   21b42:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   21b44:	4b10      	ldr	r3, [pc, #64]	; (21b88 <prvCheckForValidListAndQueue+0x4c>)
   21b46:	681b      	ldr	r3, [r3, #0]
   21b48:	2b00      	cmp	r3, #0
   21b4a:	d115      	bne.n	21b78 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   21b4c:	4b0f      	ldr	r3, [pc, #60]	; (21b8c <prvCheckForValidListAndQueue+0x50>)
   21b4e:	0018      	movs	r0, r3
   21b50:	4b0f      	ldr	r3, [pc, #60]	; (21b90 <prvCheckForValidListAndQueue+0x54>)
   21b52:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   21b54:	4b0f      	ldr	r3, [pc, #60]	; (21b94 <prvCheckForValidListAndQueue+0x58>)
   21b56:	0018      	movs	r0, r3
   21b58:	4b0d      	ldr	r3, [pc, #52]	; (21b90 <prvCheckForValidListAndQueue+0x54>)
   21b5a:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   21b5c:	4b0e      	ldr	r3, [pc, #56]	; (21b98 <prvCheckForValidListAndQueue+0x5c>)
   21b5e:	4a0b      	ldr	r2, [pc, #44]	; (21b8c <prvCheckForValidListAndQueue+0x50>)
   21b60:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   21b62:	4b0e      	ldr	r3, [pc, #56]	; (21b9c <prvCheckForValidListAndQueue+0x60>)
   21b64:	4a0b      	ldr	r2, [pc, #44]	; (21b94 <prvCheckForValidListAndQueue+0x58>)
   21b66:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   21b68:	2200      	movs	r2, #0
   21b6a:	2110      	movs	r1, #16
   21b6c:	2005      	movs	r0, #5
   21b6e:	4b0c      	ldr	r3, [pc, #48]	; (21ba0 <prvCheckForValidListAndQueue+0x64>)
   21b70:	4798      	blx	r3
   21b72:	0002      	movs	r2, r0
   21b74:	4b04      	ldr	r3, [pc, #16]	; (21b88 <prvCheckForValidListAndQueue+0x4c>)
   21b76:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   21b78:	4b0a      	ldr	r3, [pc, #40]	; (21ba4 <prvCheckForValidListAndQueue+0x68>)
   21b7a:	4798      	blx	r3
}
   21b7c:	46c0      	nop			; (mov r8, r8)
   21b7e:	46bd      	mov	sp, r7
   21b80:	bd80      	pop	{r7, pc}
   21b82:	46c0      	nop			; (mov r8, r8)
   21b84:	0001f451 	.word	0x0001f451
   21b88:	200003ec 	.word	0x200003ec
   21b8c:	200003bc 	.word	0x200003bc
   21b90:	0001f5f5 	.word	0x0001f5f5
   21b94:	200003d0 	.word	0x200003d0
   21b98:	200003e4 	.word	0x200003e4
   21b9c:	200003e8 	.word	0x200003e8
   21ba0:	0001f805 	.word	0x0001f805
   21ba4:	0001f475 	.word	0x0001f475

00021ba8 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
   21ba8:	b580      	push	{r7, lr}
   21baa:	b084      	sub	sp, #16
   21bac:	af00      	add	r7, sp, #0
   21bae:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
   21bb0:	687b      	ldr	r3, [r7, #4]
   21bb2:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
   21bb4:	687b      	ldr	r3, [r7, #4]
   21bb6:	2b00      	cmp	r3, #0
   21bb8:	d101      	bne.n	21bbe <xTimerIsTimerActive+0x16>
   21bba:	b672      	cpsid	i
   21bbc:	e7fe      	b.n	21bbc <xTimerIsTimerActive+0x14>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
   21bbe:	4b07      	ldr	r3, [pc, #28]	; (21bdc <xTimerIsTimerActive+0x34>)
   21bc0:	4798      	blx	r3
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) ); /*lint !e961. Cast is only redundant when NULL is passed into the macro. */
   21bc2:	68fb      	ldr	r3, [r7, #12]
   21bc4:	695b      	ldr	r3, [r3, #20]
   21bc6:	1e5a      	subs	r2, r3, #1
   21bc8:	4193      	sbcs	r3, r2
   21bca:	b2db      	uxtb	r3, r3
   21bcc:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
   21bce:	4b04      	ldr	r3, [pc, #16]	; (21be0 <xTimerIsTimerActive+0x38>)
   21bd0:	4798      	blx	r3

	return xTimerIsInActiveList;
   21bd2:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Can't be pointer to const due to the typedef. */
   21bd4:	0018      	movs	r0, r3
   21bd6:	46bd      	mov	sp, r7
   21bd8:	b004      	add	sp, #16
   21bda:	bd80      	pop	{r7, pc}
   21bdc:	0001f451 	.word	0x0001f451
   21be0:	0001f475 	.word	0x0001f475

00021be4 <wdt_clear_early_warning>:
 *
 *  Clears the Watchdog timer early warning period elapsed flag, so that a new
 *  early warning period can be detected.
 */
static inline void wdt_clear_early_warning(void)
{
   21be4:	b580      	push	{r7, lr}
   21be6:	b082      	sub	sp, #8
   21be8:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
   21bea:	4b04      	ldr	r3, [pc, #16]	; (21bfc <wdt_clear_early_warning+0x18>)
   21bec:	607b      	str	r3, [r7, #4]

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
   21bee:	687b      	ldr	r3, [r7, #4]
   21bf0:	2201      	movs	r2, #1
   21bf2:	719a      	strb	r2, [r3, #6]
}
   21bf4:	46c0      	nop			; (mov r8, r8)
   21bf6:	46bd      	mov	sp, r7
   21bf8:	b002      	add	sp, #8
   21bfa:	bd80      	pop	{r7, pc}
   21bfc:	40001000 	.word	0x40001000

00021c00 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
   21c00:	b580      	push	{r7, lr}
   21c02:	af00      	add	r7, sp, #0
	wdt_clear_early_warning();
   21c04:	4b05      	ldr	r3, [pc, #20]	; (21c1c <WDT_Handler+0x1c>)
   21c06:	4798      	blx	r3

	if (wdt_early_warning_callback) {
   21c08:	4b05      	ldr	r3, [pc, #20]	; (21c20 <WDT_Handler+0x20>)
   21c0a:	681b      	ldr	r3, [r3, #0]
   21c0c:	2b00      	cmp	r3, #0
   21c0e:	d002      	beq.n	21c16 <WDT_Handler+0x16>
		wdt_early_warning_callback();
   21c10:	4b03      	ldr	r3, [pc, #12]	; (21c20 <WDT_Handler+0x20>)
   21c12:	681b      	ldr	r3, [r3, #0]
   21c14:	4798      	blx	r3
	}
}
   21c16:	46c0      	nop			; (mov r8, r8)
   21c18:	46bd      	mov	sp, r7
   21c1a:	bd80      	pop	{r7, pc}
   21c1c:	00021be5 	.word	0x00021be5
   21c20:	20000944 	.word	0x20000944

00021c24 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   21c24:	b580      	push	{r7, lr}
   21c26:	af00      	add	r7, sp, #0
   21c28:	2000      	movs	r0, #0
   21c2a:	4b02      	ldr	r3, [pc, #8]	; (21c34 <TCC0_Handler+0x10>)
   21c2c:	4798      	blx	r3
   21c2e:	46c0      	nop			; (mov r8, r8)
   21c30:	46bd      	mov	sp, r7
   21c32:	bd80      	pop	{r7, pc}
   21c34:	00021c61 	.word	0x00021c61

00021c38 <TCC1_Handler>:
   21c38:	b580      	push	{r7, lr}
   21c3a:	af00      	add	r7, sp, #0
   21c3c:	2001      	movs	r0, #1
   21c3e:	4b02      	ldr	r3, [pc, #8]	; (21c48 <TCC1_Handler+0x10>)
   21c40:	4798      	blx	r3
   21c42:	46c0      	nop			; (mov r8, r8)
   21c44:	46bd      	mov	sp, r7
   21c46:	bd80      	pop	{r7, pc}
   21c48:	00021c61 	.word	0x00021c61

00021c4c <TCC2_Handler>:
   21c4c:	b580      	push	{r7, lr}
   21c4e:	af00      	add	r7, sp, #0
   21c50:	2002      	movs	r0, #2
   21c52:	4b02      	ldr	r3, [pc, #8]	; (21c5c <TCC2_Handler+0x10>)
   21c54:	4798      	blx	r3
   21c56:	46c0      	nop			; (mov r8, r8)
   21c58:	46bd      	mov	sp, r7
   21c5a:	bd80      	pop	{r7, pc}
   21c5c:	00021c61 	.word	0x00021c61

00021c60 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   21c60:	b580      	push	{r7, lr}
   21c62:	b086      	sub	sp, #24
   21c64:	af00      	add	r7, sp, #0
   21c66:	0002      	movs	r2, r0
   21c68:	1dfb      	adds	r3, r7, #7
   21c6a:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   21c6c:	1dfb      	adds	r3, r7, #7
   21c6e:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   21c70:	4b18      	ldr	r3, [pc, #96]	; (21cd4 <_tcc_interrupt_handler+0x74>)
   21c72:	0092      	lsls	r2, r2, #2
   21c74:	58d3      	ldr	r3, [r2, r3]
   21c76:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   21c78:	693b      	ldr	r3, [r7, #16]
   21c7a:	681b      	ldr	r3, [r3, #0]
   21c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   21c7e:	693b      	ldr	r3, [r7, #16]
   21c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   21c82:	401a      	ands	r2, r3
			module->enable_callback_mask);
   21c84:	693b      	ldr	r3, [r7, #16]
   21c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   21c88:	4013      	ands	r3, r2
   21c8a:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   21c8c:	2300      	movs	r3, #0
   21c8e:	617b      	str	r3, [r7, #20]
   21c90:	e019      	b.n	21cc6 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   21c92:	4b11      	ldr	r3, [pc, #68]	; (21cd8 <_tcc_interrupt_handler+0x78>)
   21c94:	697a      	ldr	r2, [r7, #20]
   21c96:	0092      	lsls	r2, r2, #2
   21c98:	58d3      	ldr	r3, [r2, r3]
   21c9a:	68fa      	ldr	r2, [r7, #12]
   21c9c:	4013      	ands	r3, r2
   21c9e:	d00f      	beq.n	21cc0 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   21ca0:	693a      	ldr	r2, [r7, #16]
   21ca2:	697b      	ldr	r3, [r7, #20]
   21ca4:	009b      	lsls	r3, r3, #2
   21ca6:	18d3      	adds	r3, r2, r3
   21ca8:	3304      	adds	r3, #4
   21caa:	681b      	ldr	r3, [r3, #0]
   21cac:	693a      	ldr	r2, [r7, #16]
   21cae:	0010      	movs	r0, r2
   21cb0:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   21cb2:	693b      	ldr	r3, [r7, #16]
   21cb4:	681b      	ldr	r3, [r3, #0]
   21cb6:	4a08      	ldr	r2, [pc, #32]	; (21cd8 <_tcc_interrupt_handler+0x78>)
   21cb8:	6979      	ldr	r1, [r7, #20]
   21cba:	0089      	lsls	r1, r1, #2
   21cbc:	588a      	ldr	r2, [r1, r2]
   21cbe:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   21cc0:	697b      	ldr	r3, [r7, #20]
   21cc2:	3301      	adds	r3, #1
   21cc4:	617b      	str	r3, [r7, #20]
   21cc6:	697b      	ldr	r3, [r7, #20]
   21cc8:	2b0b      	cmp	r3, #11
   21cca:	dde2      	ble.n	21c92 <_tcc_interrupt_handler+0x32>
		}
	}
}
   21ccc:	46c0      	nop			; (mov r8, r8)
   21cce:	46bd      	mov	sp, r7
   21cd0:	b006      	add	sp, #24
   21cd2:	bd80      	pop	{r7, pc}
   21cd4:	20000948 	.word	0x20000948
   21cd8:	0002b668 	.word	0x0002b668

00021cdc <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   21cdc:	b580      	push	{r7, lr}
   21cde:	af00      	add	r7, sp, #0
   21ce0:	2000      	movs	r0, #0
   21ce2:	4b02      	ldr	r3, [pc, #8]	; (21cec <TC3_Handler+0x10>)
   21ce4:	4798      	blx	r3
   21ce6:	46c0      	nop			; (mov r8, r8)
   21ce8:	46bd      	mov	sp, r7
   21cea:	bd80      	pop	{r7, pc}
   21cec:	00021d41 	.word	0x00021d41

00021cf0 <TC4_Handler>:
   21cf0:	b580      	push	{r7, lr}
   21cf2:	af00      	add	r7, sp, #0
   21cf4:	2001      	movs	r0, #1
   21cf6:	4b02      	ldr	r3, [pc, #8]	; (21d00 <TC4_Handler+0x10>)
   21cf8:	4798      	blx	r3
   21cfa:	46c0      	nop			; (mov r8, r8)
   21cfc:	46bd      	mov	sp, r7
   21cfe:	bd80      	pop	{r7, pc}
   21d00:	00021d41 	.word	0x00021d41

00021d04 <TC5_Handler>:
   21d04:	b580      	push	{r7, lr}
   21d06:	af00      	add	r7, sp, #0
   21d08:	2002      	movs	r0, #2
   21d0a:	4b02      	ldr	r3, [pc, #8]	; (21d14 <TC5_Handler+0x10>)
   21d0c:	4798      	blx	r3
   21d0e:	46c0      	nop			; (mov r8, r8)
   21d10:	46bd      	mov	sp, r7
   21d12:	bd80      	pop	{r7, pc}
   21d14:	00021d41 	.word	0x00021d41

00021d18 <TC6_Handler>:
   21d18:	b580      	push	{r7, lr}
   21d1a:	af00      	add	r7, sp, #0
   21d1c:	2003      	movs	r0, #3
   21d1e:	4b02      	ldr	r3, [pc, #8]	; (21d28 <TC6_Handler+0x10>)
   21d20:	4798      	blx	r3
   21d22:	46c0      	nop			; (mov r8, r8)
   21d24:	46bd      	mov	sp, r7
   21d26:	bd80      	pop	{r7, pc}
   21d28:	00021d41 	.word	0x00021d41

00021d2c <TC7_Handler>:
   21d2c:	b580      	push	{r7, lr}
   21d2e:	af00      	add	r7, sp, #0
   21d30:	2004      	movs	r0, #4
   21d32:	4b02      	ldr	r3, [pc, #8]	; (21d3c <TC7_Handler+0x10>)
   21d34:	4798      	blx	r3
   21d36:	46c0      	nop			; (mov r8, r8)
   21d38:	46bd      	mov	sp, r7
   21d3a:	bd80      	pop	{r7, pc}
   21d3c:	00021d41 	.word	0x00021d41

00021d40 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   21d40:	b580      	push	{r7, lr}
   21d42:	b084      	sub	sp, #16
   21d44:	af00      	add	r7, sp, #0
   21d46:	0002      	movs	r2, r0
   21d48:	1dfb      	adds	r3, r7, #7
   21d4a:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   21d4c:	1dfb      	adds	r3, r7, #7
   21d4e:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   21d50:	4b28      	ldr	r3, [pc, #160]	; (21df4 <_tc_interrupt_handler+0xb4>)
   21d52:	0092      	lsls	r2, r2, #2
   21d54:	58d3      	ldr	r3, [r2, r3]
   21d56:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   21d58:	68fb      	ldr	r3, [r7, #12]
   21d5a:	681b      	ldr	r3, [r3, #0]
   21d5c:	7b9b      	ldrb	r3, [r3, #14]
   21d5e:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   21d60:	68fa      	ldr	r2, [r7, #12]
   21d62:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   21d64:	4013      	ands	r3, r2
   21d66:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   21d68:	68fb      	ldr	r3, [r7, #12]
   21d6a:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   21d6c:	230b      	movs	r3, #11
   21d6e:	18fb      	adds	r3, r7, r3
   21d70:	400a      	ands	r2, r1
   21d72:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   21d74:	230b      	movs	r3, #11
   21d76:	18fb      	adds	r3, r7, r3
   21d78:	781b      	ldrb	r3, [r3, #0]
   21d7a:	2201      	movs	r2, #1
   21d7c:	4013      	ands	r3, r2
   21d7e:	d008      	beq.n	21d92 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   21d80:	68fb      	ldr	r3, [r7, #12]
   21d82:	689b      	ldr	r3, [r3, #8]
   21d84:	68fa      	ldr	r2, [r7, #12]
   21d86:	0010      	movs	r0, r2
   21d88:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   21d8a:	68fb      	ldr	r3, [r7, #12]
   21d8c:	681b      	ldr	r3, [r3, #0]
   21d8e:	2201      	movs	r2, #1
   21d90:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   21d92:	230b      	movs	r3, #11
   21d94:	18fb      	adds	r3, r7, r3
   21d96:	781b      	ldrb	r3, [r3, #0]
   21d98:	2202      	movs	r2, #2
   21d9a:	4013      	ands	r3, r2
   21d9c:	d008      	beq.n	21db0 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   21d9e:	68fb      	ldr	r3, [r7, #12]
   21da0:	68db      	ldr	r3, [r3, #12]
   21da2:	68fa      	ldr	r2, [r7, #12]
   21da4:	0010      	movs	r0, r2
   21da6:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   21da8:	68fb      	ldr	r3, [r7, #12]
   21daa:	681b      	ldr	r3, [r3, #0]
   21dac:	2202      	movs	r2, #2
   21dae:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   21db0:	230b      	movs	r3, #11
   21db2:	18fb      	adds	r3, r7, r3
   21db4:	781b      	ldrb	r3, [r3, #0]
   21db6:	2210      	movs	r2, #16
   21db8:	4013      	ands	r3, r2
   21dba:	d008      	beq.n	21dce <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   21dbc:	68fb      	ldr	r3, [r7, #12]
   21dbe:	691b      	ldr	r3, [r3, #16]
   21dc0:	68fa      	ldr	r2, [r7, #12]
   21dc2:	0010      	movs	r0, r2
   21dc4:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   21dc6:	68fb      	ldr	r3, [r7, #12]
   21dc8:	681b      	ldr	r3, [r3, #0]
   21dca:	2210      	movs	r2, #16
   21dcc:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   21dce:	230b      	movs	r3, #11
   21dd0:	18fb      	adds	r3, r7, r3
   21dd2:	781b      	ldrb	r3, [r3, #0]
   21dd4:	2220      	movs	r2, #32
   21dd6:	4013      	ands	r3, r2
   21dd8:	d008      	beq.n	21dec <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   21dda:	68fb      	ldr	r3, [r7, #12]
   21ddc:	695b      	ldr	r3, [r3, #20]
   21dde:	68fa      	ldr	r2, [r7, #12]
   21de0:	0010      	movs	r0, r2
   21de2:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   21de4:	68fb      	ldr	r3, [r7, #12]
   21de6:	681b      	ldr	r3, [r3, #0]
   21de8:	2220      	movs	r2, #32
   21dea:	739a      	strb	r2, [r3, #14]
	}
}
   21dec:	46c0      	nop			; (mov r8, r8)
   21dee:	46bd      	mov	sp, r7
   21df0:	b004      	add	sp, #16
   21df2:	bd80      	pop	{r7, pc}
   21df4:	20000954 	.word	0x20000954

00021df8 <system_gclk_chan_get_config_defaults>:
{
   21df8:	b580      	push	{r7, lr}
   21dfa:	b082      	sub	sp, #8
   21dfc:	af00      	add	r7, sp, #0
   21dfe:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   21e00:	687b      	ldr	r3, [r7, #4]
   21e02:	2200      	movs	r2, #0
   21e04:	701a      	strb	r2, [r3, #0]
}
   21e06:	46c0      	nop			; (mov r8, r8)
   21e08:	46bd      	mov	sp, r7
   21e0a:	b002      	add	sp, #8
   21e0c:	bd80      	pop	{r7, pc}
	...

00021e10 <system_apb_clock_set_mask>:
{
   21e10:	b580      	push	{r7, lr}
   21e12:	b082      	sub	sp, #8
   21e14:	af00      	add	r7, sp, #0
   21e16:	0002      	movs	r2, r0
   21e18:	6039      	str	r1, [r7, #0]
   21e1a:	1dfb      	adds	r3, r7, #7
   21e1c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   21e1e:	1dfb      	adds	r3, r7, #7
   21e20:	781b      	ldrb	r3, [r3, #0]
   21e22:	2b01      	cmp	r3, #1
   21e24:	d00a      	beq.n	21e3c <system_apb_clock_set_mask+0x2c>
   21e26:	2b02      	cmp	r3, #2
   21e28:	d00f      	beq.n	21e4a <system_apb_clock_set_mask+0x3a>
   21e2a:	2b00      	cmp	r3, #0
   21e2c:	d114      	bne.n	21e58 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   21e2e:	4b0e      	ldr	r3, [pc, #56]	; (21e68 <system_apb_clock_set_mask+0x58>)
   21e30:	4a0d      	ldr	r2, [pc, #52]	; (21e68 <system_apb_clock_set_mask+0x58>)
   21e32:	6991      	ldr	r1, [r2, #24]
   21e34:	683a      	ldr	r2, [r7, #0]
   21e36:	430a      	orrs	r2, r1
   21e38:	619a      	str	r2, [r3, #24]
			break;
   21e3a:	e00f      	b.n	21e5c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   21e3c:	4b0a      	ldr	r3, [pc, #40]	; (21e68 <system_apb_clock_set_mask+0x58>)
   21e3e:	4a0a      	ldr	r2, [pc, #40]	; (21e68 <system_apb_clock_set_mask+0x58>)
   21e40:	69d1      	ldr	r1, [r2, #28]
   21e42:	683a      	ldr	r2, [r7, #0]
   21e44:	430a      	orrs	r2, r1
   21e46:	61da      	str	r2, [r3, #28]
			break;
   21e48:	e008      	b.n	21e5c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   21e4a:	4b07      	ldr	r3, [pc, #28]	; (21e68 <system_apb_clock_set_mask+0x58>)
   21e4c:	4a06      	ldr	r2, [pc, #24]	; (21e68 <system_apb_clock_set_mask+0x58>)
   21e4e:	6a11      	ldr	r1, [r2, #32]
   21e50:	683a      	ldr	r2, [r7, #0]
   21e52:	430a      	orrs	r2, r1
   21e54:	621a      	str	r2, [r3, #32]
			break;
   21e56:	e001      	b.n	21e5c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   21e58:	2317      	movs	r3, #23
   21e5a:	e000      	b.n	21e5e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   21e5c:	2300      	movs	r3, #0
}
   21e5e:	0018      	movs	r0, r3
   21e60:	46bd      	mov	sp, r7
   21e62:	b002      	add	sp, #8
   21e64:	bd80      	pop	{r7, pc}
   21e66:	46c0      	nop			; (mov r8, r8)
   21e68:	40000400 	.word	0x40000400

00021e6c <system_pinmux_get_config_defaults>:
{
   21e6c:	b580      	push	{r7, lr}
   21e6e:	b082      	sub	sp, #8
   21e70:	af00      	add	r7, sp, #0
   21e72:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   21e74:	687b      	ldr	r3, [r7, #4]
   21e76:	2280      	movs	r2, #128	; 0x80
   21e78:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   21e7a:	687b      	ldr	r3, [r7, #4]
   21e7c:	2200      	movs	r2, #0
   21e7e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   21e80:	687b      	ldr	r3, [r7, #4]
   21e82:	2201      	movs	r2, #1
   21e84:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   21e86:	687b      	ldr	r3, [r7, #4]
   21e88:	2200      	movs	r2, #0
   21e8a:	70da      	strb	r2, [r3, #3]
}
   21e8c:	46c0      	nop			; (mov r8, r8)
   21e8e:	46bd      	mov	sp, r7
   21e90:	b002      	add	sp, #8
   21e92:	bd80      	pop	{r7, pc}

00021e94 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   21e94:	b580      	push	{r7, lr}
   21e96:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   21e98:	4b05      	ldr	r3, [pc, #20]	; (21eb0 <system_is_debugger_present+0x1c>)
   21e9a:	789b      	ldrb	r3, [r3, #2]
   21e9c:	b2db      	uxtb	r3, r3
   21e9e:	001a      	movs	r2, r3
   21ea0:	2302      	movs	r3, #2
   21ea2:	4013      	ands	r3, r2
   21ea4:	1e5a      	subs	r2, r3, #1
   21ea6:	4193      	sbcs	r3, r2
   21ea8:	b2db      	uxtb	r3, r3
}
   21eaa:	0018      	movs	r0, r3
   21eac:	46bd      	mov	sp, r7
   21eae:	bd80      	pop	{r7, pc}
   21eb0:	41002000 	.word	0x41002000

00021eb4 <usart_is_syncing>:
{
   21eb4:	b580      	push	{r7, lr}
   21eb6:	b084      	sub	sp, #16
   21eb8:	af00      	add	r7, sp, #0
   21eba:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   21ebc:	687b      	ldr	r3, [r7, #4]
   21ebe:	681b      	ldr	r3, [r3, #0]
   21ec0:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   21ec2:	68fb      	ldr	r3, [r7, #12]
   21ec4:	69db      	ldr	r3, [r3, #28]
   21ec6:	1e5a      	subs	r2, r3, #1
   21ec8:	4193      	sbcs	r3, r2
   21eca:	b2db      	uxtb	r3, r3
}
   21ecc:	0018      	movs	r0, r3
   21ece:	46bd      	mov	sp, r7
   21ed0:	b004      	add	sp, #16
   21ed2:	bd80      	pop	{r7, pc}

00021ed4 <_usart_wait_for_sync>:
{
   21ed4:	b580      	push	{r7, lr}
   21ed6:	b082      	sub	sp, #8
   21ed8:	af00      	add	r7, sp, #0
   21eda:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   21edc:	46c0      	nop			; (mov r8, r8)
   21ede:	687b      	ldr	r3, [r7, #4]
   21ee0:	0018      	movs	r0, r3
   21ee2:	4b04      	ldr	r3, [pc, #16]	; (21ef4 <_usart_wait_for_sync+0x20>)
   21ee4:	4798      	blx	r3
   21ee6:	1e03      	subs	r3, r0, #0
   21ee8:	d1f9      	bne.n	21ede <_usart_wait_for_sync+0xa>
}
   21eea:	46c0      	nop			; (mov r8, r8)
   21eec:	46bd      	mov	sp, r7
   21eee:	b002      	add	sp, #8
   21ef0:	bd80      	pop	{r7, pc}
   21ef2:	46c0      	nop			; (mov r8, r8)
   21ef4:	00021eb5 	.word	0x00021eb5

00021ef8 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   21ef8:	b5b0      	push	{r4, r5, r7, lr}
   21efa:	b08c      	sub	sp, #48	; 0x30
   21efc:	af02      	add	r7, sp, #8
   21efe:	6078      	str	r0, [r7, #4]
   21f00:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   21f02:	687b      	ldr	r3, [r7, #4]
   21f04:	681b      	ldr	r3, [r3, #0]
   21f06:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   21f08:	687b      	ldr	r3, [r7, #4]
   21f0a:	681b      	ldr	r3, [r3, #0]
   21f0c:	0018      	movs	r0, r3
   21f0e:	4bab      	ldr	r3, [pc, #684]	; (221bc <_usart_set_config+0x2c4>)
   21f10:	4798      	blx	r3
   21f12:	0003      	movs	r3, r0
   21f14:	617b      	str	r3, [r7, #20]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   21f16:	697b      	ldr	r3, [r7, #20]
   21f18:	3314      	adds	r3, #20
   21f1a:	613b      	str	r3, [r7, #16]
#endif

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   21f1c:	2300      	movs	r3, #0
   21f1e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   21f20:	2300      	movs	r3, #0
   21f22:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   21f24:	230a      	movs	r3, #10
   21f26:	18fb      	adds	r3, r7, r3
   21f28:	2200      	movs	r2, #0
   21f2a:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   21f2c:	231f      	movs	r3, #31
   21f2e:	18fb      	adds	r3, r7, r3
   21f30:	2200      	movs	r2, #0
   21f32:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   21f34:	231e      	movs	r3, #30
   21f36:	18fb      	adds	r3, r7, r3
   21f38:	2210      	movs	r2, #16
   21f3a:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   21f3c:	683b      	ldr	r3, [r7, #0]
   21f3e:	8a1b      	ldrh	r3, [r3, #16]
   21f40:	2280      	movs	r2, #128	; 0x80
   21f42:	01d2      	lsls	r2, r2, #7
   21f44:	4293      	cmp	r3, r2
   21f46:	d01c      	beq.n	21f82 <_usart_set_config+0x8a>
   21f48:	2280      	movs	r2, #128	; 0x80
   21f4a:	01d2      	lsls	r2, r2, #7
   21f4c:	4293      	cmp	r3, r2
   21f4e:	dc06      	bgt.n	21f5e <_usart_set_config+0x66>
   21f50:	2b00      	cmp	r3, #0
   21f52:	d00d      	beq.n	21f70 <_usart_set_config+0x78>
   21f54:	2280      	movs	r2, #128	; 0x80
   21f56:	0192      	lsls	r2, r2, #6
   21f58:	4293      	cmp	r3, r2
   21f5a:	d024      	beq.n	21fa6 <_usart_set_config+0xae>
   21f5c:	e035      	b.n	21fca <_usart_set_config+0xd2>
   21f5e:	22c0      	movs	r2, #192	; 0xc0
   21f60:	01d2      	lsls	r2, r2, #7
   21f62:	4293      	cmp	r3, r2
   21f64:	d028      	beq.n	21fb8 <_usart_set_config+0xc0>
   21f66:	2280      	movs	r2, #128	; 0x80
   21f68:	0212      	lsls	r2, r2, #8
   21f6a:	4293      	cmp	r3, r2
   21f6c:	d012      	beq.n	21f94 <_usart_set_config+0x9c>
   21f6e:	e02c      	b.n	21fca <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   21f70:	231f      	movs	r3, #31
   21f72:	18fb      	adds	r3, r7, r3
   21f74:	2200      	movs	r2, #0
   21f76:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   21f78:	231e      	movs	r3, #30
   21f7a:	18fb      	adds	r3, r7, r3
   21f7c:	2210      	movs	r2, #16
   21f7e:	701a      	strb	r2, [r3, #0]
			break;
   21f80:	e023      	b.n	21fca <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   21f82:	231f      	movs	r3, #31
   21f84:	18fb      	adds	r3, r7, r3
   21f86:	2200      	movs	r2, #0
   21f88:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   21f8a:	231e      	movs	r3, #30
   21f8c:	18fb      	adds	r3, r7, r3
   21f8e:	2208      	movs	r2, #8
   21f90:	701a      	strb	r2, [r3, #0]
			break;
   21f92:	e01a      	b.n	21fca <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   21f94:	231f      	movs	r3, #31
   21f96:	18fb      	adds	r3, r7, r3
   21f98:	2200      	movs	r2, #0
   21f9a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   21f9c:	231e      	movs	r3, #30
   21f9e:	18fb      	adds	r3, r7, r3
   21fa0:	2203      	movs	r2, #3
   21fa2:	701a      	strb	r2, [r3, #0]
			break;
   21fa4:	e011      	b.n	21fca <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   21fa6:	231f      	movs	r3, #31
   21fa8:	18fb      	adds	r3, r7, r3
   21faa:	2201      	movs	r2, #1
   21fac:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   21fae:	231e      	movs	r3, #30
   21fb0:	18fb      	adds	r3, r7, r3
   21fb2:	2210      	movs	r2, #16
   21fb4:	701a      	strb	r2, [r3, #0]
			break;
   21fb6:	e008      	b.n	21fca <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   21fb8:	231f      	movs	r3, #31
   21fba:	18fb      	adds	r3, r7, r3
   21fbc:	2201      	movs	r2, #1
   21fbe:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   21fc0:	231e      	movs	r3, #30
   21fc2:	18fb      	adds	r3, r7, r3
   21fc4:	2208      	movs	r2, #8
   21fc6:	701a      	strb	r2, [r3, #0]
			break;
   21fc8:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   21fca:	683b      	ldr	r3, [r7, #0]
   21fcc:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   21fce:	683b      	ldr	r3, [r7, #0]
   21fd0:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   21fd2:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   21fd4:	683b      	ldr	r3, [r7, #0]
   21fd6:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   21fd8:	4313      	orrs	r3, r2
		config->sample_rate |
   21fda:	683a      	ldr	r2, [r7, #0]
   21fdc:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   21fde:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   21fe0:	683a      	ldr	r2, [r7, #0]
   21fe2:	7e12      	ldrb	r2, [r2, #24]
   21fe4:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   21fe6:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   21fe8:	683a      	ldr	r2, [r7, #0]
   21fea:	2126      	movs	r1, #38	; 0x26
   21fec:	5c52      	ldrb	r2, [r2, r1]
   21fee:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   21ff0:	4313      	orrs	r3, r2
   21ff2:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   21ff4:	231d      	movs	r3, #29
   21ff6:	18fb      	adds	r3, r7, r3
   21ff8:	2200      	movs	r2, #0
   21ffa:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   21ffc:	683b      	ldr	r3, [r7, #0]
   21ffe:	685b      	ldr	r3, [r3, #4]
   22000:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   22002:	68fb      	ldr	r3, [r7, #12]
   22004:	2b00      	cmp	r3, #0
   22006:	d01e      	beq.n	22046 <_usart_set_config+0x14e>
   22008:	2280      	movs	r2, #128	; 0x80
   2200a:	0552      	lsls	r2, r2, #21
   2200c:	4293      	cmp	r3, r2
   2200e:	d14f      	bne.n	220b0 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   22010:	683b      	ldr	r3, [r7, #0]
   22012:	2227      	movs	r2, #39	; 0x27
   22014:	5c9b      	ldrb	r3, [r3, r2]
   22016:	2201      	movs	r2, #1
   22018:	4053      	eors	r3, r2
   2201a:	b2db      	uxtb	r3, r3
   2201c:	2b00      	cmp	r3, #0
   2201e:	d046      	beq.n	220ae <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   22020:	683b      	ldr	r3, [r7, #0]
   22022:	6a1d      	ldr	r5, [r3, #32]
   22024:	693b      	ldr	r3, [r7, #16]
   22026:	b2db      	uxtb	r3, r3
   22028:	0018      	movs	r0, r3
   2202a:	4b65      	ldr	r3, [pc, #404]	; (221c0 <_usart_set_config+0x2c8>)
   2202c:	4798      	blx	r3
   2202e:	0001      	movs	r1, r0
   22030:	231d      	movs	r3, #29
   22032:	18fc      	adds	r4, r7, r3
   22034:	230a      	movs	r3, #10
   22036:	18fb      	adds	r3, r7, r3
   22038:	001a      	movs	r2, r3
   2203a:	0028      	movs	r0, r5
   2203c:	4b61      	ldr	r3, [pc, #388]	; (221c4 <_usart_set_config+0x2cc>)
   2203e:	4798      	blx	r3
   22040:	0003      	movs	r3, r0
   22042:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   22044:	e033      	b.n	220ae <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   22046:	683b      	ldr	r3, [r7, #0]
   22048:	2227      	movs	r2, #39	; 0x27
   2204a:	5c9b      	ldrb	r3, [r3, r2]
   2204c:	2b00      	cmp	r3, #0
   2204e:	d014      	beq.n	2207a <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   22050:	683b      	ldr	r3, [r7, #0]
   22052:	6a18      	ldr	r0, [r3, #32]
   22054:	683b      	ldr	r3, [r7, #0]
   22056:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   22058:	231d      	movs	r3, #29
   2205a:	18fc      	adds	r4, r7, r3
   2205c:	231f      	movs	r3, #31
   2205e:	18fb      	adds	r3, r7, r3
   22060:	781d      	ldrb	r5, [r3, #0]
   22062:	230a      	movs	r3, #10
   22064:	18fa      	adds	r2, r7, r3
   22066:	231e      	movs	r3, #30
   22068:	18fb      	adds	r3, r7, r3
   2206a:	781b      	ldrb	r3, [r3, #0]
   2206c:	9300      	str	r3, [sp, #0]
   2206e:	002b      	movs	r3, r5
   22070:	4d55      	ldr	r5, [pc, #340]	; (221c8 <_usart_set_config+0x2d0>)
   22072:	47a8      	blx	r5
   22074:	0003      	movs	r3, r0
   22076:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   22078:	e01a      	b.n	220b0 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   2207a:	683b      	ldr	r3, [r7, #0]
   2207c:	6a1d      	ldr	r5, [r3, #32]
   2207e:	693b      	ldr	r3, [r7, #16]
   22080:	b2db      	uxtb	r3, r3
   22082:	0018      	movs	r0, r3
   22084:	4b4e      	ldr	r3, [pc, #312]	; (221c0 <_usart_set_config+0x2c8>)
   22086:	4798      	blx	r3
				status_code =
   22088:	231d      	movs	r3, #29
   2208a:	18fc      	adds	r4, r7, r3
   2208c:	231f      	movs	r3, #31
   2208e:	18fb      	adds	r3, r7, r3
   22090:	7819      	ldrb	r1, [r3, #0]
   22092:	230a      	movs	r3, #10
   22094:	18fa      	adds	r2, r7, r3
   22096:	231e      	movs	r3, #30
   22098:	18fb      	adds	r3, r7, r3
   2209a:	781b      	ldrb	r3, [r3, #0]
   2209c:	9300      	str	r3, [sp, #0]
   2209e:	000b      	movs	r3, r1
   220a0:	0001      	movs	r1, r0
   220a2:	0028      	movs	r0, r5
   220a4:	4d48      	ldr	r5, [pc, #288]	; (221c8 <_usart_set_config+0x2d0>)
   220a6:	47a8      	blx	r5
   220a8:	0003      	movs	r3, r0
   220aa:	7023      	strb	r3, [r4, #0]
			break;
   220ac:	e000      	b.n	220b0 <_usart_set_config+0x1b8>
			break;
   220ae:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   220b0:	231d      	movs	r3, #29
   220b2:	18fb      	adds	r3, r7, r3
   220b4:	781b      	ldrb	r3, [r3, #0]
   220b6:	2b00      	cmp	r3, #0
   220b8:	d003      	beq.n	220c2 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   220ba:	231d      	movs	r3, #29
   220bc:	18fb      	adds	r3, r7, r3
   220be:	781b      	ldrb	r3, [r3, #0]
   220c0:	e077      	b.n	221b2 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   220c2:	683b      	ldr	r3, [r7, #0]
   220c4:	7e5b      	ldrb	r3, [r3, #25]
   220c6:	2b00      	cmp	r3, #0
   220c8:	d003      	beq.n	220d2 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   220ca:	683b      	ldr	r3, [r7, #0]
   220cc:	7e9a      	ldrb	r2, [r3, #26]
   220ce:	69bb      	ldr	r3, [r7, #24]
   220d0:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   220d2:	687b      	ldr	r3, [r7, #4]
   220d4:	0018      	movs	r0, r3
   220d6:	4b3d      	ldr	r3, [pc, #244]	; (221cc <_usart_set_config+0x2d4>)
   220d8:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   220da:	230a      	movs	r3, #10
   220dc:	18fb      	adds	r3, r7, r3
   220de:	881a      	ldrh	r2, [r3, #0]
   220e0:	69bb      	ldr	r3, [r7, #24]
   220e2:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   220e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   220e6:	68fb      	ldr	r3, [r7, #12]
   220e8:	4313      	orrs	r3, r2
   220ea:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   220ec:	683b      	ldr	r3, [r7, #0]
   220ee:	2227      	movs	r2, #39	; 0x27
   220f0:	5c9b      	ldrb	r3, [r3, r2]
   220f2:	2201      	movs	r2, #1
   220f4:	4053      	eors	r3, r2
   220f6:	b2db      	uxtb	r3, r3
   220f8:	2b00      	cmp	r3, #0
   220fa:	d003      	beq.n	22104 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   220fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   220fe:	2204      	movs	r2, #4
   22100:	4313      	orrs	r3, r2
   22102:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   22104:	683b      	ldr	r3, [r7, #0]
   22106:	7e5b      	ldrb	r3, [r3, #25]
   22108:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   2210a:	683b      	ldr	r3, [r7, #0]
   2210c:	7f1b      	ldrb	r3, [r3, #28]
   2210e:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   22110:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   22112:	683b      	ldr	r3, [r7, #0]
   22114:	7f5b      	ldrb	r3, [r3, #29]
   22116:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   22118:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   2211a:	683b      	ldr	r3, [r7, #0]
   2211c:	2124      	movs	r1, #36	; 0x24
   2211e:	5c5b      	ldrb	r3, [r3, r1]
   22120:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   22122:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   22124:	683b      	ldr	r3, [r7, #0]
   22126:	2125      	movs	r1, #37	; 0x25
   22128:	5c5b      	ldrb	r3, [r3, r1]
   2212a:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   2212c:	4313      	orrs	r3, r2
	ctrlb =  
   2212e:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   22130:	683b      	ldr	r3, [r7, #0]
   22132:	7a9b      	ldrb	r3, [r3, #10]
   22134:	001a      	movs	r2, r3
   22136:	6a3b      	ldr	r3, [r7, #32]
   22138:	4313      	orrs	r3, r2
   2213a:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   2213c:	683b      	ldr	r3, [r7, #0]
   2213e:	7adb      	ldrb	r3, [r3, #11]
   22140:	001a      	movs	r2, r3
   22142:	6a3b      	ldr	r3, [r7, #32]
   22144:	4313      	orrs	r3, r2
   22146:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   22148:	683b      	ldr	r3, [r7, #0]
   2214a:	891b      	ldrh	r3, [r3, #8]
   2214c:	2bff      	cmp	r3, #255	; 0xff
   2214e:	d00b      	beq.n	22168 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   22150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   22152:	2280      	movs	r2, #128	; 0x80
   22154:	0452      	lsls	r2, r2, #17
   22156:	4313      	orrs	r3, r2
   22158:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   2215a:	683b      	ldr	r3, [r7, #0]
   2215c:	891b      	ldrh	r3, [r3, #8]
   2215e:	001a      	movs	r2, r3
   22160:	6a3b      	ldr	r3, [r7, #32]
   22162:	4313      	orrs	r3, r2
   22164:	623b      	str	r3, [r7, #32]
   22166:	e008      	b.n	2217a <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   22168:	683b      	ldr	r3, [r7, #0]
   2216a:	7edb      	ldrb	r3, [r3, #27]
   2216c:	2b00      	cmp	r3, #0
   2216e:	d004      	beq.n	2217a <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   22170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   22172:	2280      	movs	r2, #128	; 0x80
   22174:	04d2      	lsls	r2, r2, #19
   22176:	4313      	orrs	r3, r2
   22178:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   2217a:	683b      	ldr	r3, [r7, #0]
   2217c:	222c      	movs	r2, #44	; 0x2c
   2217e:	5c9b      	ldrb	r3, [r3, r2]
   22180:	2b00      	cmp	r3, #0
   22182:	d103      	bne.n	2218c <_usart_set_config+0x294>
   22184:	4b12      	ldr	r3, [pc, #72]	; (221d0 <_usart_set_config+0x2d8>)
   22186:	4798      	blx	r3
   22188:	1e03      	subs	r3, r0, #0
   2218a:	d003      	beq.n	22194 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   2218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2218e:	2280      	movs	r2, #128	; 0x80
   22190:	4313      	orrs	r3, r2
   22192:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   22194:	687b      	ldr	r3, [r7, #4]
   22196:	0018      	movs	r0, r3
   22198:	4b0c      	ldr	r3, [pc, #48]	; (221cc <_usart_set_config+0x2d4>)
   2219a:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   2219c:	69bb      	ldr	r3, [r7, #24]
   2219e:	6a3a      	ldr	r2, [r7, #32]
   221a0:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   221a2:	687b      	ldr	r3, [r7, #4]
   221a4:	0018      	movs	r0, r3
   221a6:	4b09      	ldr	r3, [pc, #36]	; (221cc <_usart_set_config+0x2d4>)
   221a8:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   221aa:	69bb      	ldr	r3, [r7, #24]
   221ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   221ae:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   221b0:	2300      	movs	r3, #0
}
   221b2:	0018      	movs	r0, r3
   221b4:	46bd      	mov	sp, r7
   221b6:	b00a      	add	sp, #40	; 0x28
   221b8:	bdb0      	pop	{r4, r5, r7, pc}
   221ba:	46c0      	nop			; (mov r8, r8)
   221bc:	0001f29d 	.word	0x0001f29d
   221c0:	00025259 	.word	0x00025259
   221c4:	0001ee17 	.word	0x0001ee17
   221c8:	0001ee95 	.word	0x0001ee95
   221cc:	00021ed5 	.word	0x00021ed5
   221d0:	00021e95 	.word	0x00021e95

000221d4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   221d4:	b590      	push	{r4, r7, lr}
   221d6:	b093      	sub	sp, #76	; 0x4c
   221d8:	af00      	add	r7, sp, #0
   221da:	60f8      	str	r0, [r7, #12]
   221dc:	60b9      	str	r1, [r7, #8]
   221de:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   221e0:	233b      	movs	r3, #59	; 0x3b
   221e2:	18fb      	adds	r3, r7, r3
   221e4:	2200      	movs	r2, #0
   221e6:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   221e8:	68fb      	ldr	r3, [r7, #12]
   221ea:	68ba      	ldr	r2, [r7, #8]
   221ec:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   221ee:	68fb      	ldr	r3, [r7, #12]
   221f0:	681b      	ldr	r3, [r3, #0]
   221f2:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   221f4:	68fb      	ldr	r3, [r7, #12]
   221f6:	681b      	ldr	r3, [r3, #0]
   221f8:	0018      	movs	r0, r3
   221fa:	4b86      	ldr	r3, [pc, #536]	; (22414 <usart_init+0x240>)
   221fc:	4798      	blx	r3
   221fe:	0003      	movs	r3, r0
   22200:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   22202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   22204:	3302      	adds	r3, #2
   22206:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   22208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2220a:	3314      	adds	r3, #20
   2220c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   2220e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   22210:	681b      	ldr	r3, [r3, #0]
   22212:	2201      	movs	r2, #1
   22214:	4013      	ands	r3, r2
   22216:	d001      	beq.n	2221c <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   22218:	2305      	movs	r3, #5
   2221a:	e0f6      	b.n	2240a <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   2221c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2221e:	681b      	ldr	r3, [r3, #0]
   22220:	2202      	movs	r2, #2
   22222:	4013      	ands	r3, r2
   22224:	d001      	beq.n	2222a <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   22226:	231c      	movs	r3, #28
   22228:	e0ef      	b.n	2240a <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   2222a:	2201      	movs	r2, #1
   2222c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2222e:	409a      	lsls	r2, r3
   22230:	0013      	movs	r3, r2
   22232:	0019      	movs	r1, r3
   22234:	2002      	movs	r0, #2
   22236:	4b78      	ldr	r3, [pc, #480]	; (22418 <usart_init+0x244>)
   22238:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   2223a:	2324      	movs	r3, #36	; 0x24
   2223c:	18fb      	adds	r3, r7, r3
   2223e:	0018      	movs	r0, r3
   22240:	4b76      	ldr	r3, [pc, #472]	; (2241c <usart_init+0x248>)
   22242:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   22244:	687b      	ldr	r3, [r7, #4]
   22246:	222d      	movs	r2, #45	; 0x2d
   22248:	5c9a      	ldrb	r2, [r3, r2]
   2224a:	2324      	movs	r3, #36	; 0x24
   2224c:	18fb      	adds	r3, r7, r3
   2224e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   22250:	6abb      	ldr	r3, [r7, #40]	; 0x28
   22252:	b2db      	uxtb	r3, r3
   22254:	2224      	movs	r2, #36	; 0x24
   22256:	18ba      	adds	r2, r7, r2
   22258:	0011      	movs	r1, r2
   2225a:	0018      	movs	r0, r3
   2225c:	4b70      	ldr	r3, [pc, #448]	; (22420 <usart_init+0x24c>)
   2225e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   22260:	6abb      	ldr	r3, [r7, #40]	; 0x28
   22262:	b2db      	uxtb	r3, r3
   22264:	0018      	movs	r0, r3
   22266:	4b6f      	ldr	r3, [pc, #444]	; (22424 <usart_init+0x250>)
   22268:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   2226a:	687b      	ldr	r3, [r7, #4]
   2226c:	222d      	movs	r2, #45	; 0x2d
   2226e:	5c9b      	ldrb	r3, [r3, r2]
   22270:	2100      	movs	r1, #0
   22272:	0018      	movs	r0, r3
   22274:	4b6c      	ldr	r3, [pc, #432]	; (22428 <usart_init+0x254>)
   22276:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   22278:	687b      	ldr	r3, [r7, #4]
   2227a:	7ada      	ldrb	r2, [r3, #11]
   2227c:	68fb      	ldr	r3, [r7, #12]
   2227e:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   22280:	687b      	ldr	r3, [r7, #4]
   22282:	2224      	movs	r2, #36	; 0x24
   22284:	5c9a      	ldrb	r2, [r3, r2]
   22286:	68fb      	ldr	r3, [r7, #12]
   22288:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   2228a:	687b      	ldr	r3, [r7, #4]
   2228c:	2225      	movs	r2, #37	; 0x25
   2228e:	5c9a      	ldrb	r2, [r3, r2]
   22290:	68fb      	ldr	r3, [r7, #12]
   22292:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   22294:	687b      	ldr	r3, [r7, #4]
   22296:	7eda      	ldrb	r2, [r3, #27]
   22298:	68fb      	ldr	r3, [r7, #12]
   2229a:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   2229c:	687b      	ldr	r3, [r7, #4]
   2229e:	7f1a      	ldrb	r2, [r3, #28]
   222a0:	68fb      	ldr	r3, [r7, #12]
   222a2:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   222a4:	233b      	movs	r3, #59	; 0x3b
   222a6:	18fc      	adds	r4, r7, r3
   222a8:	687a      	ldr	r2, [r7, #4]
   222aa:	68fb      	ldr	r3, [r7, #12]
   222ac:	0011      	movs	r1, r2
   222ae:	0018      	movs	r0, r3
   222b0:	4b5e      	ldr	r3, [pc, #376]	; (2242c <usart_init+0x258>)
   222b2:	4798      	blx	r3
   222b4:	0003      	movs	r3, r0
   222b6:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   222b8:	233b      	movs	r3, #59	; 0x3b
   222ba:	18fb      	adds	r3, r7, r3
   222bc:	781b      	ldrb	r3, [r3, #0]
   222be:	2b00      	cmp	r3, #0
   222c0:	d003      	beq.n	222ca <usart_init+0xf6>
		return status_code;
   222c2:	233b      	movs	r3, #59	; 0x3b
   222c4:	18fb      	adds	r3, r7, r3
   222c6:	781b      	ldrb	r3, [r3, #0]
   222c8:	e09f      	b.n	2240a <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   222ca:	2320      	movs	r3, #32
   222cc:	18fb      	adds	r3, r7, r3
   222ce:	0018      	movs	r0, r3
   222d0:	4b57      	ldr	r3, [pc, #348]	; (22430 <usart_init+0x25c>)
   222d2:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   222d4:	2320      	movs	r3, #32
   222d6:	18fb      	adds	r3, r7, r3
   222d8:	2200      	movs	r2, #0
   222da:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   222dc:	2320      	movs	r3, #32
   222de:	18fb      	adds	r3, r7, r3
   222e0:	2200      	movs	r2, #0
   222e2:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   222e4:	687b      	ldr	r3, [r7, #4]
   222e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   222e8:	2310      	movs	r3, #16
   222ea:	18fb      	adds	r3, r7, r3
   222ec:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   222ee:	687b      	ldr	r3, [r7, #4]
   222f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   222f2:	2310      	movs	r3, #16
   222f4:	18fb      	adds	r3, r7, r3
   222f6:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   222f8:	687b      	ldr	r3, [r7, #4]
   222fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   222fc:	2310      	movs	r3, #16
   222fe:	18fb      	adds	r3, r7, r3
   22300:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   22302:	687b      	ldr	r3, [r7, #4]
   22304:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   22306:	2310      	movs	r3, #16
   22308:	18fb      	adds	r3, r7, r3
   2230a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   2230c:	2347      	movs	r3, #71	; 0x47
   2230e:	18fb      	adds	r3, r7, r3
   22310:	2200      	movs	r2, #0
   22312:	701a      	strb	r2, [r3, #0]
   22314:	e02c      	b.n	22370 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   22316:	2347      	movs	r3, #71	; 0x47
   22318:	18fb      	adds	r3, r7, r3
   2231a:	781a      	ldrb	r2, [r3, #0]
   2231c:	2310      	movs	r3, #16
   2231e:	18fb      	adds	r3, r7, r3
   22320:	0092      	lsls	r2, r2, #2
   22322:	58d3      	ldr	r3, [r2, r3]
   22324:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   22326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   22328:	2b00      	cmp	r3, #0
   2232a:	d109      	bne.n	22340 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   2232c:	2347      	movs	r3, #71	; 0x47
   2232e:	18fb      	adds	r3, r7, r3
   22330:	781a      	ldrb	r2, [r3, #0]
   22332:	68bb      	ldr	r3, [r7, #8]
   22334:	0011      	movs	r1, r2
   22336:	0018      	movs	r0, r3
   22338:	4b3e      	ldr	r3, [pc, #248]	; (22434 <usart_init+0x260>)
   2233a:	4798      	blx	r3
   2233c:	0003      	movs	r3, r0
   2233e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   22340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   22342:	3301      	adds	r3, #1
   22344:	d00d      	beq.n	22362 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   22346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   22348:	b2da      	uxtb	r2, r3
   2234a:	2320      	movs	r3, #32
   2234c:	18fb      	adds	r3, r7, r3
   2234e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   22350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   22352:	0c1b      	lsrs	r3, r3, #16
   22354:	b2db      	uxtb	r3, r3
   22356:	2220      	movs	r2, #32
   22358:	18ba      	adds	r2, r7, r2
   2235a:	0011      	movs	r1, r2
   2235c:	0018      	movs	r0, r3
   2235e:	4b36      	ldr	r3, [pc, #216]	; (22438 <usart_init+0x264>)
   22360:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   22362:	2347      	movs	r3, #71	; 0x47
   22364:	18fb      	adds	r3, r7, r3
   22366:	781a      	ldrb	r2, [r3, #0]
   22368:	2347      	movs	r3, #71	; 0x47
   2236a:	18fb      	adds	r3, r7, r3
   2236c:	3201      	adds	r2, #1
   2236e:	701a      	strb	r2, [r3, #0]
   22370:	2347      	movs	r3, #71	; 0x47
   22372:	18fb      	adds	r3, r7, r3
   22374:	781b      	ldrb	r3, [r3, #0]
   22376:	2b03      	cmp	r3, #3
   22378:	d9cd      	bls.n	22316 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   2237a:	2300      	movs	r3, #0
   2237c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2237e:	e00a      	b.n	22396 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   22380:	68fa      	ldr	r2, [r7, #12]
   22382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   22384:	3302      	adds	r3, #2
   22386:	009b      	lsls	r3, r3, #2
   22388:	18d3      	adds	r3, r2, r3
   2238a:	3304      	adds	r3, #4
   2238c:	2200      	movs	r2, #0
   2238e:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   22390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   22392:	3301      	adds	r3, #1
   22394:	63fb      	str	r3, [r7, #60]	; 0x3c
   22396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   22398:	2b05      	cmp	r3, #5
   2239a:	d9f1      	bls.n	22380 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   2239c:	68fb      	ldr	r3, [r7, #12]
   2239e:	2200      	movs	r2, #0
   223a0:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   223a2:	68fb      	ldr	r3, [r7, #12]
   223a4:	2200      	movs	r2, #0
   223a6:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   223a8:	68fb      	ldr	r3, [r7, #12]
   223aa:	2200      	movs	r2, #0
   223ac:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   223ae:	68fb      	ldr	r3, [r7, #12]
   223b0:	2200      	movs	r2, #0
   223b2:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   223b4:	68fb      	ldr	r3, [r7, #12]
   223b6:	2230      	movs	r2, #48	; 0x30
   223b8:	2100      	movs	r1, #0
   223ba:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   223bc:	68fb      	ldr	r3, [r7, #12]
   223be:	2231      	movs	r2, #49	; 0x31
   223c0:	2100      	movs	r1, #0
   223c2:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   223c4:	68fb      	ldr	r3, [r7, #12]
   223c6:	2232      	movs	r2, #50	; 0x32
   223c8:	2100      	movs	r1, #0
   223ca:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   223cc:	68fb      	ldr	r3, [r7, #12]
   223ce:	2233      	movs	r2, #51	; 0x33
   223d0:	2100      	movs	r1, #0
   223d2:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   223d4:	68fb      	ldr	r3, [r7, #12]
   223d6:	681b      	ldr	r3, [r3, #0]
   223d8:	2227      	movs	r2, #39	; 0x27
   223da:	18bc      	adds	r4, r7, r2
   223dc:	0018      	movs	r0, r3
   223de:	4b0d      	ldr	r3, [pc, #52]	; (22414 <usart_init+0x240>)
   223e0:	4798      	blx	r3
   223e2:	0003      	movs	r3, r0
   223e4:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   223e6:	4a15      	ldr	r2, [pc, #84]	; (2243c <usart_init+0x268>)
   223e8:	2327      	movs	r3, #39	; 0x27
   223ea:	18fb      	adds	r3, r7, r3
   223ec:	781b      	ldrb	r3, [r3, #0]
   223ee:	0011      	movs	r1, r2
   223f0:	0018      	movs	r0, r3
   223f2:	4b13      	ldr	r3, [pc, #76]	; (22440 <usart_init+0x26c>)
   223f4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   223f6:	2327      	movs	r3, #39	; 0x27
   223f8:	18fb      	adds	r3, r7, r3
   223fa:	781a      	ldrb	r2, [r3, #0]
   223fc:	4b11      	ldr	r3, [pc, #68]	; (22444 <usart_init+0x270>)
   223fe:	0092      	lsls	r2, r2, #2
   22400:	68f9      	ldr	r1, [r7, #12]
   22402:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   22404:	233b      	movs	r3, #59	; 0x3b
   22406:	18fb      	adds	r3, r7, r3
   22408:	781b      	ldrb	r3, [r3, #0]
}
   2240a:	0018      	movs	r0, r3
   2240c:	46bd      	mov	sp, r7
   2240e:	b013      	add	sp, #76	; 0x4c
   22410:	bd90      	pop	{r4, r7, pc}
   22412:	46c0      	nop			; (mov r8, r8)
   22414:	0001f29d 	.word	0x0001f29d
   22418:	00021e11 	.word	0x00021e11
   2241c:	00021df9 	.word	0x00021df9
   22420:	00025135 	.word	0x00025135
   22424:	00025179 	.word	0x00025179
   22428:	0001f055 	.word	0x0001f055
   2242c:	00021ef9 	.word	0x00021ef9
   22430:	00021e6d 	.word	0x00021e6d
   22434:	0001f0e1 	.word	0x0001f0e1
   22438:	00025421 	.word	0x00025421
   2243c:	0002261d 	.word	0x0002261d
   22440:	00022971 	.word	0x00022971
   22444:	20000968 	.word	0x20000968

00022448 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
   22448:	b580      	push	{r7, lr}
   2244a:	b084      	sub	sp, #16
   2244c:	af00      	add	r7, sp, #0
   2244e:	6078      	str	r0, [r7, #4]
   22450:	000a      	movs	r2, r1
   22452:	1cbb      	adds	r3, r7, #2
   22454:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   22456:	687b      	ldr	r3, [r7, #4]
   22458:	681b      	ldr	r3, [r3, #0]
   2245a:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   2245c:	687b      	ldr	r3, [r7, #4]
   2245e:	79db      	ldrb	r3, [r3, #7]
   22460:	2201      	movs	r2, #1
   22462:	4053      	eors	r3, r2
   22464:	b2db      	uxtb	r3, r3
   22466:	2b00      	cmp	r3, #0
   22468:	d001      	beq.n	2246e <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
   2246a:	231c      	movs	r3, #28
   2246c:	e017      	b.n	2249e <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
   2246e:	687b      	ldr	r3, [r7, #4]
   22470:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   22472:	b29b      	uxth	r3, r3
   22474:	2b00      	cmp	r3, #0
   22476:	d001      	beq.n	2247c <usart_write_wait+0x34>
		return STATUS_BUSY;
   22478:	2305      	movs	r3, #5
   2247a:	e010      	b.n	2249e <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2247c:	687b      	ldr	r3, [r7, #4]
   2247e:	0018      	movs	r0, r3
   22480:	4b09      	ldr	r3, [pc, #36]	; (224a8 <usart_write_wait+0x60>)
   22482:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
   22484:	68fb      	ldr	r3, [r7, #12]
   22486:	1cba      	adds	r2, r7, #2
   22488:	8812      	ldrh	r2, [r2, #0]
   2248a:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
   2248c:	46c0      	nop			; (mov r8, r8)
   2248e:	68fb      	ldr	r3, [r7, #12]
   22490:	7e1b      	ldrb	r3, [r3, #24]
   22492:	b2db      	uxtb	r3, r3
   22494:	001a      	movs	r2, r3
   22496:	2302      	movs	r3, #2
   22498:	4013      	ands	r3, r2
   2249a:	d0f8      	beq.n	2248e <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
   2249c:	2300      	movs	r3, #0
}
   2249e:	0018      	movs	r0, r3
   224a0:	46bd      	mov	sp, r7
   224a2:	b004      	add	sp, #16
   224a4:	bd80      	pop	{r7, pc}
   224a6:	46c0      	nop			; (mov r8, r8)
   224a8:	00021ed5 	.word	0x00021ed5

000224ac <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   224ac:	b580      	push	{r7, lr}
   224ae:	b08a      	sub	sp, #40	; 0x28
   224b0:	af00      	add	r7, sp, #0
   224b2:	60f8      	str	r0, [r7, #12]
   224b4:	60b9      	str	r1, [r7, #8]
   224b6:	1dbb      	adds	r3, r7, #6
   224b8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
   224ba:	1dbb      	adds	r3, r7, #6
   224bc:	881b      	ldrh	r3, [r3, #0]
   224be:	2b00      	cmp	r3, #0
   224c0:	d101      	bne.n	224c6 <usart_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
   224c2:	2317      	movs	r3, #23
   224c4:	e07e      	b.n	225c4 <usart_write_buffer_wait+0x118>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   224c6:	68fb      	ldr	r3, [r7, #12]
   224c8:	79db      	ldrb	r3, [r3, #7]
   224ca:	2201      	movs	r2, #1
   224cc:	4053      	eors	r3, r2
   224ce:	b2db      	uxtb	r3, r3
   224d0:	2b00      	cmp	r3, #0
   224d2:	d001      	beq.n	224d8 <usart_write_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
   224d4:	231c      	movs	r3, #28
   224d6:	e075      	b.n	225c4 <usart_write_buffer_wait+0x118>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   224d8:	68fb      	ldr	r3, [r7, #12]
   224da:	681b      	ldr	r3, [r3, #0]
   224dc:	617b      	str	r3, [r7, #20]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   224de:	68fb      	ldr	r3, [r7, #12]
   224e0:	0018      	movs	r0, r3
   224e2:	4b3a      	ldr	r3, [pc, #232]	; (225cc <usart_write_buffer_wait+0x120>)
   224e4:	4798      	blx	r3

	uint16_t tx_pos = 0;
   224e6:	2326      	movs	r3, #38	; 0x26
   224e8:	18fb      	adds	r3, r7, r3
   224ea:	2200      	movs	r2, #0
   224ec:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being transferred */
	while (length--) {
   224ee:	e048      	b.n	22582 <usart_write_buffer_wait+0xd6>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   224f0:	2300      	movs	r3, #0
   224f2:	623b      	str	r3, [r7, #32]
   224f4:	e00f      	b.n	22516 <usart_write_buffer_wait+0x6a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
   224f6:	697b      	ldr	r3, [r7, #20]
   224f8:	7e1b      	ldrb	r3, [r3, #24]
   224fa:	b2db      	uxtb	r3, r3
   224fc:	001a      	movs	r2, r3
   224fe:	2301      	movs	r3, #1
   22500:	4013      	ands	r3, r2
   22502:	d10d      	bne.n	22520 <usart_write_buffer_wait+0x74>
				break;
			} else if (i == USART_TIMEOUT) {
   22504:	6a3b      	ldr	r3, [r7, #32]
   22506:	4a32      	ldr	r2, [pc, #200]	; (225d0 <usart_write_buffer_wait+0x124>)
   22508:	4293      	cmp	r3, r2
   2250a:	d101      	bne.n	22510 <usart_write_buffer_wait+0x64>
				return STATUS_ERR_TIMEOUT;
   2250c:	2312      	movs	r3, #18
   2250e:	e059      	b.n	225c4 <usart_write_buffer_wait+0x118>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   22510:	6a3b      	ldr	r3, [r7, #32]
   22512:	3301      	adds	r3, #1
   22514:	623b      	str	r3, [r7, #32]
   22516:	6a3b      	ldr	r3, [r7, #32]
   22518:	4a2d      	ldr	r2, [pc, #180]	; (225d0 <usart_write_buffer_wait+0x124>)
   2251a:	4293      	cmp	r3, r2
   2251c:	d9eb      	bls.n	224f6 <usart_write_buffer_wait+0x4a>
   2251e:	e000      	b.n	22522 <usart_write_buffer_wait+0x76>
				break;
   22520:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   22522:	2326      	movs	r3, #38	; 0x26
   22524:	18fb      	adds	r3, r7, r3
   22526:	881b      	ldrh	r3, [r3, #0]
   22528:	2226      	movs	r2, #38	; 0x26
   2252a:	18ba      	adds	r2, r7, r2
   2252c:	1c59      	adds	r1, r3, #1
   2252e:	8011      	strh	r1, [r2, #0]
   22530:	001a      	movs	r2, r3
   22532:	68bb      	ldr	r3, [r7, #8]
   22534:	189b      	adds	r3, r3, r2
   22536:	781a      	ldrb	r2, [r3, #0]
   22538:	231e      	movs	r3, #30
   2253a:	18fb      	adds	r3, r7, r3
   2253c:	801a      	strh	r2, [r3, #0]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   2253e:	68fb      	ldr	r3, [r7, #12]
   22540:	795b      	ldrb	r3, [r3, #5]
   22542:	2b01      	cmp	r3, #1
   22544:	d115      	bne.n	22572 <usart_write_buffer_wait+0xc6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   22546:	2326      	movs	r3, #38	; 0x26
   22548:	18fb      	adds	r3, r7, r3
   2254a:	881b      	ldrh	r3, [r3, #0]
   2254c:	2226      	movs	r2, #38	; 0x26
   2254e:	18ba      	adds	r2, r7, r2
   22550:	1c59      	adds	r1, r3, #1
   22552:	8011      	strh	r1, [r2, #0]
   22554:	001a      	movs	r2, r3
   22556:	68bb      	ldr	r3, [r7, #8]
   22558:	189b      	adds	r3, r3, r2
   2255a:	781b      	ldrb	r3, [r3, #0]
   2255c:	021b      	lsls	r3, r3, #8
   2255e:	b21a      	sxth	r2, r3
   22560:	231e      	movs	r3, #30
   22562:	18fb      	adds	r3, r7, r3
   22564:	2100      	movs	r1, #0
   22566:	5e5b      	ldrsh	r3, [r3, r1]
   22568:	4313      	orrs	r3, r2
   2256a:	b21a      	sxth	r2, r3
   2256c:	231e      	movs	r3, #30
   2256e:	18fb      	adds	r3, r7, r3
   22570:	801a      	strh	r2, [r3, #0]
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
   22572:	231e      	movs	r3, #30
   22574:	18fb      	adds	r3, r7, r3
   22576:	881a      	ldrh	r2, [r3, #0]
   22578:	68fb      	ldr	r3, [r7, #12]
   2257a:	0011      	movs	r1, r2
   2257c:	0018      	movs	r0, r3
   2257e:	4b15      	ldr	r3, [pc, #84]	; (225d4 <usart_write_buffer_wait+0x128>)
   22580:	4798      	blx	r3
	while (length--) {
   22582:	1dbb      	adds	r3, r7, #6
   22584:	881b      	ldrh	r3, [r3, #0]
   22586:	1dba      	adds	r2, r7, #6
   22588:	1e59      	subs	r1, r3, #1
   2258a:	8011      	strh	r1, [r2, #0]
   2258c:	2b00      	cmp	r3, #0
   2258e:	d1af      	bne.n	224f0 <usart_write_buffer_wait+0x44>
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   22590:	2300      	movs	r3, #0
   22592:	61bb      	str	r3, [r7, #24]
   22594:	e00f      	b.n	225b6 <usart_write_buffer_wait+0x10a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
   22596:	697b      	ldr	r3, [r7, #20]
   22598:	7e1b      	ldrb	r3, [r3, #24]
   2259a:	b2db      	uxtb	r3, r3
   2259c:	001a      	movs	r2, r3
   2259e:	2302      	movs	r3, #2
   225a0:	4013      	ands	r3, r2
   225a2:	d10d      	bne.n	225c0 <usart_write_buffer_wait+0x114>
			break;
		} else if (i == USART_TIMEOUT) {
   225a4:	69bb      	ldr	r3, [r7, #24]
   225a6:	4a0a      	ldr	r2, [pc, #40]	; (225d0 <usart_write_buffer_wait+0x124>)
   225a8:	4293      	cmp	r3, r2
   225aa:	d101      	bne.n	225b0 <usart_write_buffer_wait+0x104>
			return STATUS_ERR_TIMEOUT;
   225ac:	2312      	movs	r3, #18
   225ae:	e009      	b.n	225c4 <usart_write_buffer_wait+0x118>
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   225b0:	69bb      	ldr	r3, [r7, #24]
   225b2:	3301      	adds	r3, #1
   225b4:	61bb      	str	r3, [r7, #24]
   225b6:	69bb      	ldr	r3, [r7, #24]
   225b8:	4a05      	ldr	r2, [pc, #20]	; (225d0 <usart_write_buffer_wait+0x124>)
   225ba:	4293      	cmp	r3, r2
   225bc:	d9eb      	bls.n	22596 <usart_write_buffer_wait+0xea>
   225be:	e000      	b.n	225c2 <usart_write_buffer_wait+0x116>
			break;
   225c0:	46c0      	nop			; (mov r8, r8)
		}
	}

	return STATUS_OK;
   225c2:	2300      	movs	r3, #0
}
   225c4:	0018      	movs	r0, r3
   225c6:	46bd      	mov	sp, r7
   225c8:	b00a      	add	sp, #40	; 0x28
   225ca:	bd80      	pop	{r7, pc}
   225cc:	00021ed5 	.word	0x00021ed5
   225d0:	0000ffff 	.word	0x0000ffff
   225d4:	00022449 	.word	0x00022449

000225d8 <usart_is_syncing>:
{
   225d8:	b580      	push	{r7, lr}
   225da:	b084      	sub	sp, #16
   225dc:	af00      	add	r7, sp, #0
   225de:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   225e0:	687b      	ldr	r3, [r7, #4]
   225e2:	681b      	ldr	r3, [r3, #0]
   225e4:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   225e6:	68fb      	ldr	r3, [r7, #12]
   225e8:	69db      	ldr	r3, [r3, #28]
   225ea:	1e5a      	subs	r2, r3, #1
   225ec:	4193      	sbcs	r3, r2
   225ee:	b2db      	uxtb	r3, r3
}
   225f0:	0018      	movs	r0, r3
   225f2:	46bd      	mov	sp, r7
   225f4:	b004      	add	sp, #16
   225f6:	bd80      	pop	{r7, pc}

000225f8 <_usart_wait_for_sync>:
{
   225f8:	b580      	push	{r7, lr}
   225fa:	b082      	sub	sp, #8
   225fc:	af00      	add	r7, sp, #0
   225fe:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   22600:	46c0      	nop			; (mov r8, r8)
   22602:	687b      	ldr	r3, [r7, #4]
   22604:	0018      	movs	r0, r3
   22606:	4b04      	ldr	r3, [pc, #16]	; (22618 <_usart_wait_for_sync+0x20>)
   22608:	4798      	blx	r3
   2260a:	1e03      	subs	r3, r0, #0
   2260c:	d1f9      	bne.n	22602 <_usart_wait_for_sync+0xa>
}
   2260e:	46c0      	nop			; (mov r8, r8)
   22610:	46bd      	mov	sp, r7
   22612:	b002      	add	sp, #8
   22614:	bd80      	pop	{r7, pc}
   22616:	46c0      	nop			; (mov r8, r8)
   22618:	000225d9 	.word	0x000225d9

0002261c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   2261c:	b580      	push	{r7, lr}
   2261e:	b088      	sub	sp, #32
   22620:	af00      	add	r7, sp, #0
   22622:	0002      	movs	r2, r0
   22624:	1dfb      	adds	r3, r7, #7
   22626:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   22628:	1dfb      	adds	r3, r7, #7
   2262a:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   2262c:	4ba3      	ldr	r3, [pc, #652]	; (228bc <_usart_interrupt_handler+0x2a0>)
   2262e:	0092      	lsls	r2, r2, #2
   22630:	58d3      	ldr	r3, [r2, r3]
   22632:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   22634:	69bb      	ldr	r3, [r7, #24]
   22636:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   22638:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   2263a:	69bb      	ldr	r3, [r7, #24]
   2263c:	0018      	movs	r0, r3
   2263e:	4ba0      	ldr	r3, [pc, #640]	; (228c0 <_usart_interrupt_handler+0x2a4>)
   22640:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   22642:	697b      	ldr	r3, [r7, #20]
   22644:	7e1b      	ldrb	r3, [r3, #24]
   22646:	b2da      	uxtb	r2, r3
   22648:	2312      	movs	r3, #18
   2264a:	18fb      	adds	r3, r7, r3
   2264c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   2264e:	697b      	ldr	r3, [r7, #20]
   22650:	7d9b      	ldrb	r3, [r3, #22]
   22652:	b2db      	uxtb	r3, r3
   22654:	b29a      	uxth	r2, r3
   22656:	2312      	movs	r3, #18
   22658:	18fb      	adds	r3, r7, r3
   2265a:	2112      	movs	r1, #18
   2265c:	1879      	adds	r1, r7, r1
   2265e:	8809      	ldrh	r1, [r1, #0]
   22660:	400a      	ands	r2, r1
   22662:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   22664:	69bb      	ldr	r3, [r7, #24]
   22666:	2230      	movs	r2, #48	; 0x30
   22668:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   2266a:	69ba      	ldr	r2, [r7, #24]
   2266c:	2131      	movs	r1, #49	; 0x31
   2266e:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   22670:	4013      	ands	r3, r2
   22672:	b2da      	uxtb	r2, r3
   22674:	2310      	movs	r3, #16
   22676:	18fb      	adds	r3, r7, r3
   22678:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   2267a:	2312      	movs	r3, #18
   2267c:	18fb      	adds	r3, r7, r3
   2267e:	881b      	ldrh	r3, [r3, #0]
   22680:	2201      	movs	r2, #1
   22682:	4013      	ands	r3, r2
   22684:	d044      	beq.n	22710 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   22686:	69bb      	ldr	r3, [r7, #24]
   22688:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2268a:	b29b      	uxth	r3, r3
   2268c:	2b00      	cmp	r3, #0
   2268e:	d03c      	beq.n	2270a <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   22690:	69bb      	ldr	r3, [r7, #24]
   22692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22694:	781b      	ldrb	r3, [r3, #0]
   22696:	b2da      	uxtb	r2, r3
   22698:	231c      	movs	r3, #28
   2269a:	18fb      	adds	r3, r7, r3
   2269c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   2269e:	69bb      	ldr	r3, [r7, #24]
   226a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   226a2:	1c5a      	adds	r2, r3, #1
   226a4:	69bb      	ldr	r3, [r7, #24]
   226a6:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   226a8:	69bb      	ldr	r3, [r7, #24]
   226aa:	795b      	ldrb	r3, [r3, #5]
   226ac:	2b01      	cmp	r3, #1
   226ae:	d113      	bne.n	226d8 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   226b0:	69bb      	ldr	r3, [r7, #24]
   226b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   226b4:	781b      	ldrb	r3, [r3, #0]
   226b6:	b2db      	uxtb	r3, r3
   226b8:	021b      	lsls	r3, r3, #8
   226ba:	b21a      	sxth	r2, r3
   226bc:	231c      	movs	r3, #28
   226be:	18fb      	adds	r3, r7, r3
   226c0:	2100      	movs	r1, #0
   226c2:	5e5b      	ldrsh	r3, [r3, r1]
   226c4:	4313      	orrs	r3, r2
   226c6:	b21a      	sxth	r2, r3
   226c8:	231c      	movs	r3, #28
   226ca:	18fb      	adds	r3, r7, r3
   226cc:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   226ce:	69bb      	ldr	r3, [r7, #24]
   226d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   226d2:	1c5a      	adds	r2, r3, #1
   226d4:	69bb      	ldr	r3, [r7, #24]
   226d6:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   226d8:	231c      	movs	r3, #28
   226da:	18fb      	adds	r3, r7, r3
   226dc:	881b      	ldrh	r3, [r3, #0]
   226de:	05db      	lsls	r3, r3, #23
   226e0:	0ddb      	lsrs	r3, r3, #23
   226e2:	b29a      	uxth	r2, r3
   226e4:	697b      	ldr	r3, [r7, #20]
   226e6:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   226e8:	69bb      	ldr	r3, [r7, #24]
   226ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   226ec:	b29b      	uxth	r3, r3
   226ee:	3b01      	subs	r3, #1
   226f0:	b29b      	uxth	r3, r3
   226f2:	69ba      	ldr	r2, [r7, #24]
   226f4:	1c19      	adds	r1, r3, #0
   226f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
   226f8:	2b00      	cmp	r3, #0
   226fa:	d109      	bne.n	22710 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   226fc:	697b      	ldr	r3, [r7, #20]
   226fe:	2201      	movs	r2, #1
   22700:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   22702:	697b      	ldr	r3, [r7, #20]
   22704:	2202      	movs	r2, #2
   22706:	759a      	strb	r2, [r3, #22]
   22708:	e002      	b.n	22710 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   2270a:	697b      	ldr	r3, [r7, #20]
   2270c:	2201      	movs	r2, #1
   2270e:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   22710:	2312      	movs	r3, #18
   22712:	18fb      	adds	r3, r7, r3
   22714:	881b      	ldrh	r3, [r3, #0]
   22716:	2202      	movs	r2, #2
   22718:	4013      	ands	r3, r2
   2271a:	d011      	beq.n	22740 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   2271c:	697b      	ldr	r3, [r7, #20]
   2271e:	2202      	movs	r2, #2
   22720:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   22722:	69bb      	ldr	r3, [r7, #24]
   22724:	2233      	movs	r2, #51	; 0x33
   22726:	2100      	movs	r1, #0
   22728:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   2272a:	2310      	movs	r3, #16
   2272c:	18fb      	adds	r3, r7, r3
   2272e:	881b      	ldrh	r3, [r3, #0]
   22730:	2201      	movs	r2, #1
   22732:	4013      	ands	r3, r2
   22734:	d004      	beq.n	22740 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   22736:	69bb      	ldr	r3, [r7, #24]
   22738:	68db      	ldr	r3, [r3, #12]
   2273a:	69ba      	ldr	r2, [r7, #24]
   2273c:	0010      	movs	r0, r2
   2273e:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   22740:	2312      	movs	r3, #18
   22742:	18fb      	adds	r3, r7, r3
   22744:	881b      	ldrh	r3, [r3, #0]
   22746:	2204      	movs	r2, #4
   22748:	4013      	ands	r3, r2
   2274a:	d100      	bne.n	2274e <_usart_interrupt_handler+0x132>
   2274c:	e0bd      	b.n	228ca <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   2274e:	69bb      	ldr	r3, [r7, #24]
   22750:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   22752:	b29b      	uxth	r3, r3
   22754:	2b00      	cmp	r3, #0
   22756:	d100      	bne.n	2275a <_usart_interrupt_handler+0x13e>
   22758:	e0b4      	b.n	228c4 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   2275a:	697b      	ldr	r3, [r7, #20]
   2275c:	8b5b      	ldrh	r3, [r3, #26]
   2275e:	b29b      	uxth	r3, r3
   22760:	b2da      	uxtb	r2, r3
   22762:	231f      	movs	r3, #31
   22764:	18fb      	adds	r3, r7, r3
   22766:	213f      	movs	r1, #63	; 0x3f
   22768:	400a      	ands	r2, r1
   2276a:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   2276c:	231f      	movs	r3, #31
   2276e:	18fb      	adds	r3, r7, r3
   22770:	781b      	ldrb	r3, [r3, #0]
   22772:	2208      	movs	r2, #8
   22774:	4013      	ands	r3, r2
   22776:	d007      	beq.n	22788 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   22778:	231f      	movs	r3, #31
   2277a:	18fb      	adds	r3, r7, r3
   2277c:	221f      	movs	r2, #31
   2277e:	18ba      	adds	r2, r7, r2
   22780:	7812      	ldrb	r2, [r2, #0]
   22782:	2108      	movs	r1, #8
   22784:	438a      	bics	r2, r1
   22786:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   22788:	231f      	movs	r3, #31
   2278a:	18fb      	adds	r3, r7, r3
   2278c:	781b      	ldrb	r3, [r3, #0]
   2278e:	2b00      	cmp	r3, #0
   22790:	d050      	beq.n	22834 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   22792:	231f      	movs	r3, #31
   22794:	18fb      	adds	r3, r7, r3
   22796:	781b      	ldrb	r3, [r3, #0]
   22798:	2202      	movs	r2, #2
   2279a:	4013      	ands	r3, r2
   2279c:	d007      	beq.n	227ae <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   2279e:	69bb      	ldr	r3, [r7, #24]
   227a0:	2232      	movs	r2, #50	; 0x32
   227a2:	211a      	movs	r1, #26
   227a4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   227a6:	697b      	ldr	r3, [r7, #20]
   227a8:	2202      	movs	r2, #2
   227aa:	835a      	strh	r2, [r3, #26]
   227ac:	e036      	b.n	2281c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   227ae:	231f      	movs	r3, #31
   227b0:	18fb      	adds	r3, r7, r3
   227b2:	781b      	ldrb	r3, [r3, #0]
   227b4:	2204      	movs	r2, #4
   227b6:	4013      	ands	r3, r2
   227b8:	d007      	beq.n	227ca <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   227ba:	69bb      	ldr	r3, [r7, #24]
   227bc:	2232      	movs	r2, #50	; 0x32
   227be:	211e      	movs	r1, #30
   227c0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   227c2:	697b      	ldr	r3, [r7, #20]
   227c4:	2204      	movs	r2, #4
   227c6:	835a      	strh	r2, [r3, #26]
   227c8:	e028      	b.n	2281c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   227ca:	231f      	movs	r3, #31
   227cc:	18fb      	adds	r3, r7, r3
   227ce:	781b      	ldrb	r3, [r3, #0]
   227d0:	2201      	movs	r2, #1
   227d2:	4013      	ands	r3, r2
   227d4:	d007      	beq.n	227e6 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   227d6:	69bb      	ldr	r3, [r7, #24]
   227d8:	2232      	movs	r2, #50	; 0x32
   227da:	2113      	movs	r1, #19
   227dc:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   227de:	697b      	ldr	r3, [r7, #20]
   227e0:	2201      	movs	r2, #1
   227e2:	835a      	strh	r2, [r3, #26]
   227e4:	e01a      	b.n	2281c <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   227e6:	231f      	movs	r3, #31
   227e8:	18fb      	adds	r3, r7, r3
   227ea:	781b      	ldrb	r3, [r3, #0]
   227ec:	2210      	movs	r2, #16
   227ee:	4013      	ands	r3, r2
   227f0:	d007      	beq.n	22802 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   227f2:	69bb      	ldr	r3, [r7, #24]
   227f4:	2232      	movs	r2, #50	; 0x32
   227f6:	2142      	movs	r1, #66	; 0x42
   227f8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   227fa:	697b      	ldr	r3, [r7, #20]
   227fc:	2210      	movs	r2, #16
   227fe:	835a      	strh	r2, [r3, #26]
   22800:	e00c      	b.n	2281c <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   22802:	231f      	movs	r3, #31
   22804:	18fb      	adds	r3, r7, r3
   22806:	781b      	ldrb	r3, [r3, #0]
   22808:	2220      	movs	r2, #32
   2280a:	4013      	ands	r3, r2
   2280c:	d006      	beq.n	2281c <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   2280e:	69bb      	ldr	r3, [r7, #24]
   22810:	2232      	movs	r2, #50	; 0x32
   22812:	2141      	movs	r1, #65	; 0x41
   22814:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   22816:	697b      	ldr	r3, [r7, #20]
   22818:	2220      	movs	r2, #32
   2281a:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   2281c:	2310      	movs	r3, #16
   2281e:	18fb      	adds	r3, r7, r3
   22820:	881b      	ldrh	r3, [r3, #0]
   22822:	2204      	movs	r2, #4
   22824:	4013      	ands	r3, r2
				if (callback_status
   22826:	d050      	beq.n	228ca <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   22828:	69bb      	ldr	r3, [r7, #24]
   2282a:	695b      	ldr	r3, [r3, #20]
   2282c:	69ba      	ldr	r2, [r7, #24]
   2282e:	0010      	movs	r0, r2
   22830:	4798      	blx	r3
   22832:	e04a      	b.n	228ca <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   22834:	697b      	ldr	r3, [r7, #20]
   22836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   22838:	b29a      	uxth	r2, r3
   2283a:	230e      	movs	r3, #14
   2283c:	18fb      	adds	r3, r7, r3
   2283e:	05d2      	lsls	r2, r2, #23
   22840:	0dd2      	lsrs	r2, r2, #23
   22842:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   22844:	69bb      	ldr	r3, [r7, #24]
   22846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   22848:	220e      	movs	r2, #14
   2284a:	18ba      	adds	r2, r7, r2
   2284c:	8812      	ldrh	r2, [r2, #0]
   2284e:	b2d2      	uxtb	r2, r2
   22850:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   22852:	69bb      	ldr	r3, [r7, #24]
   22854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   22856:	1c5a      	adds	r2, r3, #1
   22858:	69bb      	ldr	r3, [r7, #24]
   2285a:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   2285c:	69bb      	ldr	r3, [r7, #24]
   2285e:	795b      	ldrb	r3, [r3, #5]
   22860:	2b01      	cmp	r3, #1
   22862:	d10d      	bne.n	22880 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   22864:	69bb      	ldr	r3, [r7, #24]
   22866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   22868:	220e      	movs	r2, #14
   2286a:	18ba      	adds	r2, r7, r2
   2286c:	8812      	ldrh	r2, [r2, #0]
   2286e:	0a12      	lsrs	r2, r2, #8
   22870:	b292      	uxth	r2, r2
   22872:	b2d2      	uxtb	r2, r2
   22874:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   22876:	69bb      	ldr	r3, [r7, #24]
   22878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2287a:	1c5a      	adds	r2, r3, #1
   2287c:	69bb      	ldr	r3, [r7, #24]
   2287e:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   22880:	69bb      	ldr	r3, [r7, #24]
   22882:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   22884:	b29b      	uxth	r3, r3
   22886:	3b01      	subs	r3, #1
   22888:	b29b      	uxth	r3, r3
   2288a:	69ba      	ldr	r2, [r7, #24]
   2288c:	1c19      	adds	r1, r3, #0
   2288e:	8591      	strh	r1, [r2, #44]	; 0x2c
   22890:	2b00      	cmp	r3, #0
   22892:	d11a      	bne.n	228ca <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   22894:	697b      	ldr	r3, [r7, #20]
   22896:	2204      	movs	r2, #4
   22898:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   2289a:	69bb      	ldr	r3, [r7, #24]
   2289c:	2232      	movs	r2, #50	; 0x32
   2289e:	2100      	movs	r1, #0
   228a0:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   228a2:	2310      	movs	r3, #16
   228a4:	18fb      	adds	r3, r7, r3
   228a6:	881b      	ldrh	r3, [r3, #0]
   228a8:	2202      	movs	r2, #2
   228aa:	4013      	ands	r3, r2
					if (callback_status
   228ac:	d00d      	beq.n	228ca <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   228ae:	69bb      	ldr	r3, [r7, #24]
   228b0:	691b      	ldr	r3, [r3, #16]
   228b2:	69ba      	ldr	r2, [r7, #24]
   228b4:	0010      	movs	r0, r2
   228b6:	4798      	blx	r3
   228b8:	e007      	b.n	228ca <_usart_interrupt_handler+0x2ae>
   228ba:	46c0      	nop			; (mov r8, r8)
   228bc:	20000968 	.word	0x20000968
   228c0:	000225f9 	.word	0x000225f9
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   228c4:	697b      	ldr	r3, [r7, #20]
   228c6:	2204      	movs	r2, #4
   228c8:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   228ca:	2312      	movs	r3, #18
   228cc:	18fb      	adds	r3, r7, r3
   228ce:	881b      	ldrh	r3, [r3, #0]
   228d0:	2210      	movs	r2, #16
   228d2:	4013      	ands	r3, r2
   228d4:	d010      	beq.n	228f8 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   228d6:	697b      	ldr	r3, [r7, #20]
   228d8:	2210      	movs	r2, #16
   228da:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   228dc:	697b      	ldr	r3, [r7, #20]
   228de:	2210      	movs	r2, #16
   228e0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   228e2:	2310      	movs	r3, #16
   228e4:	18fb      	adds	r3, r7, r3
   228e6:	881b      	ldrh	r3, [r3, #0]
   228e8:	2210      	movs	r2, #16
   228ea:	4013      	ands	r3, r2
   228ec:	d004      	beq.n	228f8 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   228ee:	69bb      	ldr	r3, [r7, #24]
   228f0:	69db      	ldr	r3, [r3, #28]
   228f2:	69ba      	ldr	r2, [r7, #24]
   228f4:	0010      	movs	r0, r2
   228f6:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   228f8:	2312      	movs	r3, #18
   228fa:	18fb      	adds	r3, r7, r3
   228fc:	881b      	ldrh	r3, [r3, #0]
   228fe:	2220      	movs	r2, #32
   22900:	4013      	ands	r3, r2
   22902:	d010      	beq.n	22926 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   22904:	697b      	ldr	r3, [r7, #20]
   22906:	2220      	movs	r2, #32
   22908:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   2290a:	697b      	ldr	r3, [r7, #20]
   2290c:	2220      	movs	r2, #32
   2290e:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   22910:	2310      	movs	r3, #16
   22912:	18fb      	adds	r3, r7, r3
   22914:	881b      	ldrh	r3, [r3, #0]
   22916:	2208      	movs	r2, #8
   22918:	4013      	ands	r3, r2
   2291a:	d004      	beq.n	22926 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   2291c:	69bb      	ldr	r3, [r7, #24]
   2291e:	699b      	ldr	r3, [r3, #24]
   22920:	69ba      	ldr	r2, [r7, #24]
   22922:	0010      	movs	r0, r2
   22924:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   22926:	2312      	movs	r3, #18
   22928:	18fb      	adds	r3, r7, r3
   2292a:	881b      	ldrh	r3, [r3, #0]
   2292c:	2208      	movs	r2, #8
   2292e:	4013      	ands	r3, r2
   22930:	d010      	beq.n	22954 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   22932:	697b      	ldr	r3, [r7, #20]
   22934:	2208      	movs	r2, #8
   22936:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   22938:	697b      	ldr	r3, [r7, #20]
   2293a:	2208      	movs	r2, #8
   2293c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   2293e:	2310      	movs	r3, #16
   22940:	18fb      	adds	r3, r7, r3
   22942:	881b      	ldrh	r3, [r3, #0]
   22944:	2220      	movs	r2, #32
   22946:	4013      	ands	r3, r2
   22948:	d004      	beq.n	22954 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   2294a:	69bb      	ldr	r3, [r7, #24]
   2294c:	6a1b      	ldr	r3, [r3, #32]
   2294e:	69ba      	ldr	r2, [r7, #24]
   22950:	0010      	movs	r0, r2
   22952:	4798      	blx	r3
		}
	}
#endif
}
   22954:	46c0      	nop			; (mov r8, r8)
   22956:	46bd      	mov	sp, r7
   22958:	b008      	add	sp, #32
   2295a:	bd80      	pop	{r7, pc}

0002295c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   2295c:	b580      	push	{r7, lr}
   2295e:	b082      	sub	sp, #8
   22960:	af00      	add	r7, sp, #0
   22962:	0002      	movs	r2, r0
   22964:	1dfb      	adds	r3, r7, #7
   22966:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   22968:	46c0      	nop			; (mov r8, r8)
   2296a:	46bd      	mov	sp, r7
   2296c:	b002      	add	sp, #8
   2296e:	bd80      	pop	{r7, pc}

00022970 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   22970:	b580      	push	{r7, lr}
   22972:	b084      	sub	sp, #16
   22974:	af00      	add	r7, sp, #0
   22976:	0002      	movs	r2, r0
   22978:	6039      	str	r1, [r7, #0]
   2297a:	1dfb      	adds	r3, r7, #7
   2297c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   2297e:	4b13      	ldr	r3, [pc, #76]	; (229cc <_sercom_set_handler+0x5c>)
   22980:	781b      	ldrb	r3, [r3, #0]
   22982:	2201      	movs	r2, #1
   22984:	4053      	eors	r3, r2
   22986:	b2db      	uxtb	r3, r3
   22988:	2b00      	cmp	r3, #0
   2298a:	d015      	beq.n	229b8 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   2298c:	2300      	movs	r3, #0
   2298e:	60fb      	str	r3, [r7, #12]
   22990:	e00c      	b.n	229ac <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   22992:	4b0f      	ldr	r3, [pc, #60]	; (229d0 <_sercom_set_handler+0x60>)
   22994:	68fa      	ldr	r2, [r7, #12]
   22996:	0092      	lsls	r2, r2, #2
   22998:	490e      	ldr	r1, [pc, #56]	; (229d4 <_sercom_set_handler+0x64>)
   2299a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   2299c:	4b0e      	ldr	r3, [pc, #56]	; (229d8 <_sercom_set_handler+0x68>)
   2299e:	68fa      	ldr	r2, [r7, #12]
   229a0:	0092      	lsls	r2, r2, #2
   229a2:	2100      	movs	r1, #0
   229a4:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   229a6:	68fb      	ldr	r3, [r7, #12]
   229a8:	3301      	adds	r3, #1
   229aa:	60fb      	str	r3, [r7, #12]
   229ac:	68fb      	ldr	r3, [r7, #12]
   229ae:	2b05      	cmp	r3, #5
   229b0:	d9ef      	bls.n	22992 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   229b2:	4b06      	ldr	r3, [pc, #24]	; (229cc <_sercom_set_handler+0x5c>)
   229b4:	2201      	movs	r2, #1
   229b6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   229b8:	1dfb      	adds	r3, r7, #7
   229ba:	781a      	ldrb	r2, [r3, #0]
   229bc:	4b04      	ldr	r3, [pc, #16]	; (229d0 <_sercom_set_handler+0x60>)
   229be:	0092      	lsls	r2, r2, #2
   229c0:	6839      	ldr	r1, [r7, #0]
   229c2:	50d1      	str	r1, [r2, r3]
}
   229c4:	46c0      	nop			; (mov r8, r8)
   229c6:	46bd      	mov	sp, r7
   229c8:	b004      	add	sp, #16
   229ca:	bd80      	pop	{r7, pc}
   229cc:	200003f8 	.word	0x200003f8
   229d0:	200003fc 	.word	0x200003fc
   229d4:	0002295d 	.word	0x0002295d
   229d8:	20000968 	.word	0x20000968

000229dc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   229dc:	b590      	push	{r4, r7, lr}
   229de:	b085      	sub	sp, #20
   229e0:	af00      	add	r7, sp, #0
   229e2:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   229e4:	2308      	movs	r3, #8
   229e6:	18fb      	adds	r3, r7, r3
   229e8:	4a0b      	ldr	r2, [pc, #44]	; (22a18 <_sercom_get_interrupt_vector+0x3c>)
   229ea:	6811      	ldr	r1, [r2, #0]
   229ec:	6019      	str	r1, [r3, #0]
   229ee:	8892      	ldrh	r2, [r2, #4]
   229f0:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   229f2:	230f      	movs	r3, #15
   229f4:	18fc      	adds	r4, r7, r3
   229f6:	687b      	ldr	r3, [r7, #4]
   229f8:	0018      	movs	r0, r3
   229fa:	4b08      	ldr	r3, [pc, #32]	; (22a1c <_sercom_get_interrupt_vector+0x40>)
   229fc:	4798      	blx	r3
   229fe:	0003      	movs	r3, r0
   22a00:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   22a02:	230f      	movs	r3, #15
   22a04:	18fb      	adds	r3, r7, r3
   22a06:	781b      	ldrb	r3, [r3, #0]
   22a08:	2208      	movs	r2, #8
   22a0a:	18ba      	adds	r2, r7, r2
   22a0c:	5cd3      	ldrb	r3, [r2, r3]
   22a0e:	b25b      	sxtb	r3, r3
}
   22a10:	0018      	movs	r0, r3
   22a12:	46bd      	mov	sp, r7
   22a14:	b005      	add	sp, #20
   22a16:	bd90      	pop	{r4, r7, pc}
   22a18:	0002b698 	.word	0x0002b698
   22a1c:	0001f29d 	.word	0x0001f29d

00022a20 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   22a20:	b580      	push	{r7, lr}
   22a22:	af00      	add	r7, sp, #0
   22a24:	4b03      	ldr	r3, [pc, #12]	; (22a34 <SERCOM0_Handler+0x14>)
   22a26:	681b      	ldr	r3, [r3, #0]
   22a28:	2000      	movs	r0, #0
   22a2a:	4798      	blx	r3
   22a2c:	46c0      	nop			; (mov r8, r8)
   22a2e:	46bd      	mov	sp, r7
   22a30:	bd80      	pop	{r7, pc}
   22a32:	46c0      	nop			; (mov r8, r8)
   22a34:	200003fc 	.word	0x200003fc

00022a38 <SERCOM1_Handler>:
   22a38:	b580      	push	{r7, lr}
   22a3a:	af00      	add	r7, sp, #0
   22a3c:	4b03      	ldr	r3, [pc, #12]	; (22a4c <SERCOM1_Handler+0x14>)
   22a3e:	685b      	ldr	r3, [r3, #4]
   22a40:	2001      	movs	r0, #1
   22a42:	4798      	blx	r3
   22a44:	46c0      	nop			; (mov r8, r8)
   22a46:	46bd      	mov	sp, r7
   22a48:	bd80      	pop	{r7, pc}
   22a4a:	46c0      	nop			; (mov r8, r8)
   22a4c:	200003fc 	.word	0x200003fc

00022a50 <SERCOM2_Handler>:
   22a50:	b580      	push	{r7, lr}
   22a52:	af00      	add	r7, sp, #0
   22a54:	4b03      	ldr	r3, [pc, #12]	; (22a64 <SERCOM2_Handler+0x14>)
   22a56:	689b      	ldr	r3, [r3, #8]
   22a58:	2002      	movs	r0, #2
   22a5a:	4798      	blx	r3
   22a5c:	46c0      	nop			; (mov r8, r8)
   22a5e:	46bd      	mov	sp, r7
   22a60:	bd80      	pop	{r7, pc}
   22a62:	46c0      	nop			; (mov r8, r8)
   22a64:	200003fc 	.word	0x200003fc

00022a68 <SERCOM3_Handler>:
   22a68:	b580      	push	{r7, lr}
   22a6a:	af00      	add	r7, sp, #0
   22a6c:	4b03      	ldr	r3, [pc, #12]	; (22a7c <SERCOM3_Handler+0x14>)
   22a6e:	68db      	ldr	r3, [r3, #12]
   22a70:	2003      	movs	r0, #3
   22a72:	4798      	blx	r3
   22a74:	46c0      	nop			; (mov r8, r8)
   22a76:	46bd      	mov	sp, r7
   22a78:	bd80      	pop	{r7, pc}
   22a7a:	46c0      	nop			; (mov r8, r8)
   22a7c:	200003fc 	.word	0x200003fc

00022a80 <SERCOM4_Handler>:
   22a80:	b580      	push	{r7, lr}
   22a82:	af00      	add	r7, sp, #0
   22a84:	4b03      	ldr	r3, [pc, #12]	; (22a94 <SERCOM4_Handler+0x14>)
   22a86:	691b      	ldr	r3, [r3, #16]
   22a88:	2004      	movs	r0, #4
   22a8a:	4798      	blx	r3
   22a8c:	46c0      	nop			; (mov r8, r8)
   22a8e:	46bd      	mov	sp, r7
   22a90:	bd80      	pop	{r7, pc}
   22a92:	46c0      	nop			; (mov r8, r8)
   22a94:	200003fc 	.word	0x200003fc

00022a98 <SERCOM5_Handler>:
   22a98:	b580      	push	{r7, lr}
   22a9a:	af00      	add	r7, sp, #0
   22a9c:	4b03      	ldr	r3, [pc, #12]	; (22aac <SERCOM5_Handler+0x14>)
   22a9e:	695b      	ldr	r3, [r3, #20]
   22aa0:	2005      	movs	r0, #5
   22aa2:	4798      	blx	r3
   22aa4:	46c0      	nop			; (mov r8, r8)
   22aa6:	46bd      	mov	sp, r7
   22aa8:	bd80      	pop	{r7, pc}
   22aaa:	46c0      	nop			; (mov r8, r8)
   22aac:	200003fc 	.word	0x200003fc

00022ab0 <_extint_get_eic_from_channel>:
{
   22ab0:	b580      	push	{r7, lr}
   22ab2:	b084      	sub	sp, #16
   22ab4:	af00      	add	r7, sp, #0
   22ab6:	0002      	movs	r2, r0
   22ab8:	1dfb      	adds	r3, r7, #7
   22aba:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   22abc:	230f      	movs	r3, #15
   22abe:	18fb      	adds	r3, r7, r3
   22ac0:	1dfa      	adds	r2, r7, #7
   22ac2:	7812      	ldrb	r2, [r2, #0]
   22ac4:	0952      	lsrs	r2, r2, #5
   22ac6:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   22ac8:	230f      	movs	r3, #15
   22aca:	18fb      	adds	r3, r7, r3
   22acc:	781b      	ldrb	r3, [r3, #0]
   22ace:	2b00      	cmp	r3, #0
   22ad0:	d10c      	bne.n	22aec <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   22ad2:	4b09      	ldr	r3, [pc, #36]	; (22af8 <_extint_get_eic_from_channel+0x48>)
   22ad4:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   22ad6:	230f      	movs	r3, #15
   22ad8:	18fb      	adds	r3, r7, r3
   22ada:	781b      	ldrb	r3, [r3, #0]
   22adc:	009b      	lsls	r3, r3, #2
   22ade:	2210      	movs	r2, #16
   22ae0:	4694      	mov	ip, r2
   22ae2:	44bc      	add	ip, r7
   22ae4:	4463      	add	r3, ip
   22ae6:	3b08      	subs	r3, #8
   22ae8:	681b      	ldr	r3, [r3, #0]
   22aea:	e000      	b.n	22aee <_extint_get_eic_from_channel+0x3e>
		return NULL;
   22aec:	2300      	movs	r3, #0
}
   22aee:	0018      	movs	r0, r3
   22af0:	46bd      	mov	sp, r7
   22af2:	b004      	add	sp, #16
   22af4:	bd80      	pop	{r7, pc}
   22af6:	46c0      	nop			; (mov r8, r8)
   22af8:	40001800 	.word	0x40001800

00022afc <extint_chan_is_detected>:
{
   22afc:	b580      	push	{r7, lr}
   22afe:	b084      	sub	sp, #16
   22b00:	af00      	add	r7, sp, #0
   22b02:	0002      	movs	r2, r0
   22b04:	1dfb      	adds	r3, r7, #7
   22b06:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   22b08:	1dfb      	adds	r3, r7, #7
   22b0a:	781b      	ldrb	r3, [r3, #0]
   22b0c:	0018      	movs	r0, r3
   22b0e:	4b0b      	ldr	r3, [pc, #44]	; (22b3c <extint_chan_is_detected+0x40>)
   22b10:	4798      	blx	r3
   22b12:	0003      	movs	r3, r0
   22b14:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   22b16:	1dfb      	adds	r3, r7, #7
   22b18:	781b      	ldrb	r3, [r3, #0]
   22b1a:	221f      	movs	r2, #31
   22b1c:	4013      	ands	r3, r2
   22b1e:	2201      	movs	r2, #1
   22b20:	409a      	lsls	r2, r3
   22b22:	0013      	movs	r3, r2
   22b24:	60bb      	str	r3, [r7, #8]
	return (eic_module->INTFLAG.reg & eic_mask);
   22b26:	68fb      	ldr	r3, [r7, #12]
   22b28:	691b      	ldr	r3, [r3, #16]
   22b2a:	68ba      	ldr	r2, [r7, #8]
   22b2c:	4013      	ands	r3, r2
   22b2e:	1e5a      	subs	r2, r3, #1
   22b30:	4193      	sbcs	r3, r2
   22b32:	b2db      	uxtb	r3, r3
}
   22b34:	0018      	movs	r0, r3
   22b36:	46bd      	mov	sp, r7
   22b38:	b004      	add	sp, #16
   22b3a:	bd80      	pop	{r7, pc}
   22b3c:	00022ab1 	.word	0x00022ab1

00022b40 <extint_chan_clear_detected>:
{
   22b40:	b580      	push	{r7, lr}
   22b42:	b084      	sub	sp, #16
   22b44:	af00      	add	r7, sp, #0
   22b46:	0002      	movs	r2, r0
   22b48:	1dfb      	adds	r3, r7, #7
   22b4a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   22b4c:	1dfb      	adds	r3, r7, #7
   22b4e:	781b      	ldrb	r3, [r3, #0]
   22b50:	0018      	movs	r0, r3
   22b52:	4b09      	ldr	r3, [pc, #36]	; (22b78 <extint_chan_clear_detected+0x38>)
   22b54:	4798      	blx	r3
   22b56:	0003      	movs	r3, r0
   22b58:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   22b5a:	1dfb      	adds	r3, r7, #7
   22b5c:	781b      	ldrb	r3, [r3, #0]
   22b5e:	221f      	movs	r2, #31
   22b60:	4013      	ands	r3, r2
   22b62:	2201      	movs	r2, #1
   22b64:	409a      	lsls	r2, r3
   22b66:	0013      	movs	r3, r2
   22b68:	60bb      	str	r3, [r7, #8]
	eic_module->INTFLAG.reg = eic_mask;
   22b6a:	68fb      	ldr	r3, [r7, #12]
   22b6c:	68ba      	ldr	r2, [r7, #8]
   22b6e:	611a      	str	r2, [r3, #16]
}
   22b70:	46c0      	nop			; (mov r8, r8)
   22b72:	46bd      	mov	sp, r7
   22b74:	b004      	add	sp, #16
   22b76:	bd80      	pop	{r7, pc}
   22b78:	00022ab1 	.word	0x00022ab1

00022b7c <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   22b7c:	b580      	push	{r7, lr}
   22b7e:	b082      	sub	sp, #8
   22b80:	af00      	add	r7, sp, #0
   22b82:	6078      	str	r0, [r7, #4]
   22b84:	0008      	movs	r0, r1
   22b86:	0011      	movs	r1, r2
   22b88:	1cfb      	adds	r3, r7, #3
   22b8a:	1c02      	adds	r2, r0, #0
   22b8c:	701a      	strb	r2, [r3, #0]
   22b8e:	1cbb      	adds	r3, r7, #2
   22b90:	1c0a      	adds	r2, r1, #0
   22b92:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   22b94:	1cbb      	adds	r3, r7, #2
   22b96:	781b      	ldrb	r3, [r3, #0]
   22b98:	2b00      	cmp	r3, #0
   22b9a:	d001      	beq.n	22ba0 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   22b9c:	2317      	movs	r3, #23
   22b9e:	e019      	b.n	22bd4 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   22ba0:	1cfb      	adds	r3, r7, #3
   22ba2:	781a      	ldrb	r2, [r3, #0]
   22ba4:	4b0d      	ldr	r3, [pc, #52]	; (22bdc <extint_register_callback+0x60>)
   22ba6:	0092      	lsls	r2, r2, #2
   22ba8:	58d3      	ldr	r3, [r2, r3]
   22baa:	2b00      	cmp	r3, #0
   22bac:	d107      	bne.n	22bbe <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   22bae:	1cfb      	adds	r3, r7, #3
   22bb0:	781a      	ldrb	r2, [r3, #0]
   22bb2:	4b0a      	ldr	r3, [pc, #40]	; (22bdc <extint_register_callback+0x60>)
   22bb4:	0092      	lsls	r2, r2, #2
   22bb6:	6879      	ldr	r1, [r7, #4]
   22bb8:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   22bba:	2300      	movs	r3, #0
   22bbc:	e00a      	b.n	22bd4 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   22bbe:	1cfb      	adds	r3, r7, #3
   22bc0:	781a      	ldrb	r2, [r3, #0]
   22bc2:	4b06      	ldr	r3, [pc, #24]	; (22bdc <extint_register_callback+0x60>)
   22bc4:	0092      	lsls	r2, r2, #2
   22bc6:	58d2      	ldr	r2, [r2, r3]
   22bc8:	687b      	ldr	r3, [r7, #4]
   22bca:	429a      	cmp	r2, r3
   22bcc:	d101      	bne.n	22bd2 <extint_register_callback+0x56>
		return STATUS_OK;
   22bce:	2300      	movs	r3, #0
   22bd0:	e000      	b.n	22bd4 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   22bd2:	231d      	movs	r3, #29
}
   22bd4:	0018      	movs	r0, r3
   22bd6:	46bd      	mov	sp, r7
   22bd8:	b002      	add	sp, #8
   22bda:	bd80      	pop	{r7, pc}
   22bdc:	20000900 	.word	0x20000900

00022be0 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   22be0:	b580      	push	{r7, lr}
   22be2:	b084      	sub	sp, #16
   22be4:	af00      	add	r7, sp, #0
   22be6:	0002      	movs	r2, r0
   22be8:	1dfb      	adds	r3, r7, #7
   22bea:	701a      	strb	r2, [r3, #0]
   22bec:	1dbb      	adds	r3, r7, #6
   22bee:	1c0a      	adds	r2, r1, #0
   22bf0:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   22bf2:	1dbb      	adds	r3, r7, #6
   22bf4:	781b      	ldrb	r3, [r3, #0]
   22bf6:	2b00      	cmp	r3, #0
   22bf8:	d10e      	bne.n	22c18 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   22bfa:	1dfb      	adds	r3, r7, #7
   22bfc:	781b      	ldrb	r3, [r3, #0]
   22bfe:	0018      	movs	r0, r3
   22c00:	4b08      	ldr	r3, [pc, #32]	; (22c24 <extint_chan_enable_callback+0x44>)
   22c02:	4798      	blx	r3
   22c04:	0003      	movs	r3, r0
   22c06:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   22c08:	1dfb      	adds	r3, r7, #7
   22c0a:	781b      	ldrb	r3, [r3, #0]
   22c0c:	2201      	movs	r2, #1
   22c0e:	409a      	lsls	r2, r3
   22c10:	68fb      	ldr	r3, [r7, #12]
   22c12:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   22c14:	2300      	movs	r3, #0
   22c16:	e000      	b.n	22c1a <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   22c18:	2317      	movs	r3, #23
}
   22c1a:	0018      	movs	r0, r3
   22c1c:	46bd      	mov	sp, r7
   22c1e:	b004      	add	sp, #16
   22c20:	bd80      	pop	{r7, pc}
   22c22:	46c0      	nop			; (mov r8, r8)
   22c24:	00022ab1 	.word	0x00022ab1

00022c28 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   22c28:	b580      	push	{r7, lr}
   22c2a:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   22c2c:	4b15      	ldr	r3, [pc, #84]	; (22c84 <EIC_Handler+0x5c>)
   22c2e:	2200      	movs	r2, #0
   22c30:	701a      	strb	r2, [r3, #0]
   22c32:	e020      	b.n	22c76 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   22c34:	4b13      	ldr	r3, [pc, #76]	; (22c84 <EIC_Handler+0x5c>)
   22c36:	781b      	ldrb	r3, [r3, #0]
   22c38:	0018      	movs	r0, r3
   22c3a:	4b13      	ldr	r3, [pc, #76]	; (22c88 <EIC_Handler+0x60>)
   22c3c:	4798      	blx	r3
   22c3e:	1e03      	subs	r3, r0, #0
   22c40:	d013      	beq.n	22c6a <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   22c42:	4b10      	ldr	r3, [pc, #64]	; (22c84 <EIC_Handler+0x5c>)
   22c44:	781b      	ldrb	r3, [r3, #0]
   22c46:	0018      	movs	r0, r3
   22c48:	4b10      	ldr	r3, [pc, #64]	; (22c8c <EIC_Handler+0x64>)
   22c4a:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   22c4c:	4b0d      	ldr	r3, [pc, #52]	; (22c84 <EIC_Handler+0x5c>)
   22c4e:	781b      	ldrb	r3, [r3, #0]
   22c50:	001a      	movs	r2, r3
   22c52:	4b0f      	ldr	r3, [pc, #60]	; (22c90 <EIC_Handler+0x68>)
   22c54:	0092      	lsls	r2, r2, #2
   22c56:	58d3      	ldr	r3, [r2, r3]
   22c58:	2b00      	cmp	r3, #0
   22c5a:	d006      	beq.n	22c6a <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   22c5c:	4b09      	ldr	r3, [pc, #36]	; (22c84 <EIC_Handler+0x5c>)
   22c5e:	781b      	ldrb	r3, [r3, #0]
   22c60:	001a      	movs	r2, r3
   22c62:	4b0b      	ldr	r3, [pc, #44]	; (22c90 <EIC_Handler+0x68>)
   22c64:	0092      	lsls	r2, r2, #2
   22c66:	58d3      	ldr	r3, [r2, r3]
   22c68:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   22c6a:	4b06      	ldr	r3, [pc, #24]	; (22c84 <EIC_Handler+0x5c>)
   22c6c:	781b      	ldrb	r3, [r3, #0]
   22c6e:	3301      	adds	r3, #1
   22c70:	b2da      	uxtb	r2, r3
   22c72:	4b04      	ldr	r3, [pc, #16]	; (22c84 <EIC_Handler+0x5c>)
   22c74:	701a      	strb	r2, [r3, #0]
   22c76:	4b03      	ldr	r3, [pc, #12]	; (22c84 <EIC_Handler+0x5c>)
   22c78:	781b      	ldrb	r3, [r3, #0]
   22c7a:	2b0f      	cmp	r3, #15
   22c7c:	d9da      	bls.n	22c34 <EIC_Handler+0xc>
			}
		}
	}
}
   22c7e:	46c0      	nop			; (mov r8, r8)
   22c80:	46bd      	mov	sp, r7
   22c82:	bd80      	pop	{r7, pc}
   22c84:	20000980 	.word	0x20000980
   22c88:	00022afd 	.word	0x00022afd
   22c8c:	00022b41 	.word	0x00022b41
   22c90:	20000900 	.word	0x20000900

00022c94 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   22c94:	b580      	push	{r7, lr}
   22c96:	b082      	sub	sp, #8
   22c98:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   22c9a:	4b15      	ldr	r3, [pc, #84]	; (22cf0 <EVSYS_Handler+0x5c>)
   22c9c:	691b      	ldr	r3, [r3, #16]
   22c9e:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   22ca0:	4b14      	ldr	r3, [pc, #80]	; (22cf4 <EVSYS_Handler+0x60>)
   22ca2:	699b      	ldr	r3, [r3, #24]
   22ca4:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   22ca6:	4b12      	ldr	r3, [pc, #72]	; (22cf0 <EVSYS_Handler+0x5c>)
   22ca8:	689a      	ldr	r2, [r3, #8]
   22caa:	683b      	ldr	r3, [r7, #0]
   22cac:	431a      	orrs	r2, r3
   22cae:	4b10      	ldr	r3, [pc, #64]	; (22cf0 <EVSYS_Handler+0x5c>)
   22cb0:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   22cb2:	4b10      	ldr	r3, [pc, #64]	; (22cf4 <EVSYS_Handler+0x60>)
   22cb4:	4a10      	ldr	r2, [pc, #64]	; (22cf8 <EVSYS_Handler+0x64>)
   22cb6:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   22cb8:	e008      	b.n	22ccc <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   22cba:	687b      	ldr	r3, [r7, #4]
   22cbc:	685a      	ldr	r2, [r3, #4]
   22cbe:	687b      	ldr	r3, [r7, #4]
   22cc0:	681b      	ldr	r3, [r3, #0]
   22cc2:	0018      	movs	r0, r3
   22cc4:	4790      	blx	r2
		current_hook = current_hook->next;
   22cc6:	687b      	ldr	r3, [r7, #4]
   22cc8:	689b      	ldr	r3, [r3, #8]
   22cca:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   22ccc:	687b      	ldr	r3, [r7, #4]
   22cce:	2b00      	cmp	r3, #0
   22cd0:	d1f3      	bne.n	22cba <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   22cd2:	4b07      	ldr	r3, [pc, #28]	; (22cf0 <EVSYS_Handler+0x5c>)
   22cd4:	68db      	ldr	r3, [r3, #12]
   22cd6:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   22cd8:	4b05      	ldr	r3, [pc, #20]	; (22cf0 <EVSYS_Handler+0x5c>)
   22cda:	689b      	ldr	r3, [r3, #8]
   22cdc:	683a      	ldr	r2, [r7, #0]
   22cde:	43d2      	mvns	r2, r2
   22ce0:	401a      	ands	r2, r3
   22ce2:	4b03      	ldr	r3, [pc, #12]	; (22cf0 <EVSYS_Handler+0x5c>)
   22ce4:	609a      	str	r2, [r3, #8]
}
   22ce6:	46c0      	nop			; (mov r8, r8)
   22ce8:	46bd      	mov	sp, r7
   22cea:	b002      	add	sp, #8
   22cec:	bd80      	pop	{r7, pc}
   22cee:	46c0      	nop			; (mov r8, r8)
   22cf0:	20000014 	.word	0x20000014
   22cf4:	42000400 	.word	0x42000400
   22cf8:	0f0fffff 	.word	0x0f0fffff

00022cfc <system_gclk_chan_get_config_defaults>:
{
   22cfc:	b580      	push	{r7, lr}
   22cfe:	b082      	sub	sp, #8
   22d00:	af00      	add	r7, sp, #0
   22d02:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   22d04:	687b      	ldr	r3, [r7, #4]
   22d06:	2200      	movs	r2, #0
   22d08:	701a      	strb	r2, [r3, #0]
}
   22d0a:	46c0      	nop			; (mov r8, r8)
   22d0c:	46bd      	mov	sp, r7
   22d0e:	b002      	add	sp, #8
   22d10:	bd80      	pop	{r7, pc}
	...

00022d14 <system_apb_clock_set_mask>:
{
   22d14:	b580      	push	{r7, lr}
   22d16:	b082      	sub	sp, #8
   22d18:	af00      	add	r7, sp, #0
   22d1a:	0002      	movs	r2, r0
   22d1c:	6039      	str	r1, [r7, #0]
   22d1e:	1dfb      	adds	r3, r7, #7
   22d20:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   22d22:	1dfb      	adds	r3, r7, #7
   22d24:	781b      	ldrb	r3, [r3, #0]
   22d26:	2b01      	cmp	r3, #1
   22d28:	d00a      	beq.n	22d40 <system_apb_clock_set_mask+0x2c>
   22d2a:	2b02      	cmp	r3, #2
   22d2c:	d00f      	beq.n	22d4e <system_apb_clock_set_mask+0x3a>
   22d2e:	2b00      	cmp	r3, #0
   22d30:	d114      	bne.n	22d5c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   22d32:	4b0e      	ldr	r3, [pc, #56]	; (22d6c <system_apb_clock_set_mask+0x58>)
   22d34:	4a0d      	ldr	r2, [pc, #52]	; (22d6c <system_apb_clock_set_mask+0x58>)
   22d36:	6991      	ldr	r1, [r2, #24]
   22d38:	683a      	ldr	r2, [r7, #0]
   22d3a:	430a      	orrs	r2, r1
   22d3c:	619a      	str	r2, [r3, #24]
			break;
   22d3e:	e00f      	b.n	22d60 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   22d40:	4b0a      	ldr	r3, [pc, #40]	; (22d6c <system_apb_clock_set_mask+0x58>)
   22d42:	4a0a      	ldr	r2, [pc, #40]	; (22d6c <system_apb_clock_set_mask+0x58>)
   22d44:	69d1      	ldr	r1, [r2, #28]
   22d46:	683a      	ldr	r2, [r7, #0]
   22d48:	430a      	orrs	r2, r1
   22d4a:	61da      	str	r2, [r3, #28]
			break;
   22d4c:	e008      	b.n	22d60 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   22d4e:	4b07      	ldr	r3, [pc, #28]	; (22d6c <system_apb_clock_set_mask+0x58>)
   22d50:	4a06      	ldr	r2, [pc, #24]	; (22d6c <system_apb_clock_set_mask+0x58>)
   22d52:	6a11      	ldr	r1, [r2, #32]
   22d54:	683a      	ldr	r2, [r7, #0]
   22d56:	430a      	orrs	r2, r1
   22d58:	621a      	str	r2, [r3, #32]
			break;
   22d5a:	e001      	b.n	22d60 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   22d5c:	2317      	movs	r3, #23
   22d5e:	e000      	b.n	22d62 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   22d60:	2300      	movs	r3, #0
}
   22d62:	0018      	movs	r0, r3
   22d64:	46bd      	mov	sp, r7
   22d66:	b002      	add	sp, #8
   22d68:	bd80      	pop	{r7, pc}
   22d6a:	46c0      	nop			; (mov r8, r8)
   22d6c:	40000400 	.word	0x40000400

00022d70 <system_interrupt_enter_critical_section>:
{
   22d70:	b580      	push	{r7, lr}
   22d72:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   22d74:	4b02      	ldr	r3, [pc, #8]	; (22d80 <system_interrupt_enter_critical_section+0x10>)
   22d76:	4798      	blx	r3
}
   22d78:	46c0      	nop			; (mov r8, r8)
   22d7a:	46bd      	mov	sp, r7
   22d7c:	bd80      	pop	{r7, pc}
   22d7e:	46c0      	nop			; (mov r8, r8)
   22d80:	0002437d 	.word	0x0002437d

00022d84 <system_interrupt_leave_critical_section>:
{
   22d84:	b580      	push	{r7, lr}
   22d86:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   22d88:	4b02      	ldr	r3, [pc, #8]	; (22d94 <system_interrupt_leave_critical_section+0x10>)
   22d8a:	4798      	blx	r3
}
   22d8c:	46c0      	nop			; (mov r8, r8)
   22d8e:	46bd      	mov	sp, r7
   22d90:	bd80      	pop	{r7, pc}
   22d92:	46c0      	nop			; (mov r8, r8)
   22d94:	000243d1 	.word	0x000243d1

00022d98 <_events_find_first_free_channel_and_allocate>:

	return pos;
}

static uint8_t _events_find_first_free_channel_and_allocate(void)
{
   22d98:	b580      	push	{r7, lr}
   22d9a:	b084      	sub	sp, #16
   22d9c:	af00      	add	r7, sp, #0
	uint8_t count;
	uint32_t tmp;
	bool allocated = false;
   22d9e:	1dfb      	adds	r3, r7, #7
   22da0:	2200      	movs	r2, #0
   22da2:	701a      	strb	r2, [r3, #0]

	system_interrupt_enter_critical_section();
   22da4:	4b21      	ldr	r3, [pc, #132]	; (22e2c <_events_find_first_free_channel_and_allocate+0x94>)
   22da6:	4798      	blx	r3

	tmp = _events_inst.allocated_channels;
   22da8:	4b21      	ldr	r3, [pc, #132]	; (22e30 <_events_find_first_free_channel_and_allocate+0x98>)
   22daa:	681b      	ldr	r3, [r3, #0]
   22dac:	60bb      	str	r3, [r7, #8]

	for(count = 0; count < EVSYS_CHANNELS; ++count) {
   22dae:	230f      	movs	r3, #15
   22db0:	18fb      	adds	r3, r7, r3
   22db2:	2200      	movs	r2, #0
   22db4:	701a      	strb	r2, [r3, #0]
   22db6:	e022      	b.n	22dfe <_events_find_first_free_channel_and_allocate+0x66>

		if(!(tmp & 0x00000001)) {
   22db8:	68bb      	ldr	r3, [r7, #8]
   22dba:	2201      	movs	r2, #1
   22dbc:	4013      	ands	r3, r2
   22dbe:	d114      	bne.n	22dea <_events_find_first_free_channel_and_allocate+0x52>
			/* If free channel found, set as allocated and return number */

			_events_inst.allocated_channels |= 1 << count;
   22dc0:	4b1b      	ldr	r3, [pc, #108]	; (22e30 <_events_find_first_free_channel_and_allocate+0x98>)
   22dc2:	681b      	ldr	r3, [r3, #0]
   22dc4:	220f      	movs	r2, #15
   22dc6:	18ba      	adds	r2, r7, r2
   22dc8:	7812      	ldrb	r2, [r2, #0]
   22dca:	2101      	movs	r1, #1
   22dcc:	4091      	lsls	r1, r2
   22dce:	000a      	movs	r2, r1
   22dd0:	431a      	orrs	r2, r3
   22dd2:	4b17      	ldr	r3, [pc, #92]	; (22e30 <_events_find_first_free_channel_and_allocate+0x98>)
   22dd4:	601a      	str	r2, [r3, #0]
			_events_inst.free_channels--;
   22dd6:	4b16      	ldr	r3, [pc, #88]	; (22e30 <_events_find_first_free_channel_and_allocate+0x98>)
   22dd8:	791b      	ldrb	r3, [r3, #4]
   22dda:	3b01      	subs	r3, #1
   22ddc:	b2da      	uxtb	r2, r3
   22dde:	4b14      	ldr	r3, [pc, #80]	; (22e30 <_events_find_first_free_channel_and_allocate+0x98>)
   22de0:	711a      	strb	r2, [r3, #4]
			allocated = true;
   22de2:	1dfb      	adds	r3, r7, #7
   22de4:	2201      	movs	r2, #1
   22de6:	701a      	strb	r2, [r3, #0]

			break;
   22de8:	e00e      	b.n	22e08 <_events_find_first_free_channel_and_allocate+0x70>

		}

		tmp = tmp >> 1;
   22dea:	68bb      	ldr	r3, [r7, #8]
   22dec:	085b      	lsrs	r3, r3, #1
   22dee:	60bb      	str	r3, [r7, #8]
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
   22df0:	230f      	movs	r3, #15
   22df2:	18fb      	adds	r3, r7, r3
   22df4:	220f      	movs	r2, #15
   22df6:	18ba      	adds	r2, r7, r2
   22df8:	7812      	ldrb	r2, [r2, #0]
   22dfa:	3201      	adds	r2, #1
   22dfc:	701a      	strb	r2, [r3, #0]
   22dfe:	230f      	movs	r3, #15
   22e00:	18fb      	adds	r3, r7, r3
   22e02:	781b      	ldrb	r3, [r3, #0]
   22e04:	2b0b      	cmp	r3, #11
   22e06:	d9d7      	bls.n	22db8 <_events_find_first_free_channel_and_allocate+0x20>
	}

	system_interrupt_leave_critical_section();
   22e08:	4b0a      	ldr	r3, [pc, #40]	; (22e34 <_events_find_first_free_channel_and_allocate+0x9c>)
   22e0a:	4798      	blx	r3

	if(!allocated) {
   22e0c:	1dfb      	adds	r3, r7, #7
   22e0e:	781b      	ldrb	r3, [r3, #0]
   22e10:	2201      	movs	r2, #1
   22e12:	4053      	eors	r3, r2
   22e14:	b2db      	uxtb	r3, r3
   22e16:	2b00      	cmp	r3, #0
   22e18:	d001      	beq.n	22e1e <_events_find_first_free_channel_and_allocate+0x86>
		return EVENTS_INVALID_CHANNEL;
   22e1a:	23ff      	movs	r3, #255	; 0xff
   22e1c:	e002      	b.n	22e24 <_events_find_first_free_channel_and_allocate+0x8c>
	} else {
		return count;
   22e1e:	230f      	movs	r3, #15
   22e20:	18fb      	adds	r3, r7, r3
   22e22:	781b      	ldrb	r3, [r3, #0]
	}
}
   22e24:	0018      	movs	r0, r3
   22e26:	46bd      	mov	sp, r7
   22e28:	b004      	add	sp, #16
   22e2a:	bd80      	pop	{r7, pc}
   22e2c:	00022d71 	.word	0x00022d71
   22e30:	20000014 	.word	0x20000014
   22e34:	00022d85 	.word	0x00022d85

00022e38 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   22e38:	b580      	push	{r7, lr}
   22e3a:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   22e3c:	2102      	movs	r1, #2
   22e3e:	2002      	movs	r0, #2
   22e40:	4b07      	ldr	r3, [pc, #28]	; (22e60 <_system_events_init+0x28>)
   22e42:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   22e44:	4b07      	ldr	r3, [pc, #28]	; (22e64 <_system_events_init+0x2c>)
   22e46:	2201      	movs	r2, #1
   22e48:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   22e4a:	46c0      	nop			; (mov r8, r8)
   22e4c:	4b05      	ldr	r3, [pc, #20]	; (22e64 <_system_events_init+0x2c>)
   22e4e:	781b      	ldrb	r3, [r3, #0]
   22e50:	b2db      	uxtb	r3, r3
   22e52:	001a      	movs	r2, r3
   22e54:	2301      	movs	r3, #1
   22e56:	4013      	ands	r3, r2
   22e58:	d1f8      	bne.n	22e4c <_system_events_init+0x14>
	}
}
   22e5a:	46c0      	nop			; (mov r8, r8)
   22e5c:	46bd      	mov	sp, r7
   22e5e:	bd80      	pop	{r7, pc}
   22e60:	00022d15 	.word	0x00022d15
   22e64:	42000400 	.word	0x42000400

00022e68 <events_get_config_defaults>:
#if defined(__GNUC__)
#  pragma GCC diagnostic pop
#endif

void events_get_config_defaults(struct events_config *config)
{
   22e68:	b580      	push	{r7, lr}
   22e6a:	b082      	sub	sp, #8
   22e6c:	af00      	add	r7, sp, #0
   22e6e:	6078      	str	r0, [r7, #4]
	/* Check that config is something other than NULL */
	Assert(config);

	config->edge_detect  = EVENTS_EDGE_DETECT_RISING;
   22e70:	687b      	ldr	r3, [r7, #4]
   22e72:	2201      	movs	r2, #1
   22e74:	701a      	strb	r2, [r3, #0]
	config->path         = EVENTS_PATH_SYNCHRONOUS;
   22e76:	687b      	ldr	r3, [r7, #4]
   22e78:	2200      	movs	r2, #0
   22e7a:	705a      	strb	r2, [r3, #1]
	config->generator    = EVSYS_ID_GEN_NONE;
   22e7c:	687b      	ldr	r3, [r7, #4]
   22e7e:	2200      	movs	r2, #0
   22e80:	709a      	strb	r2, [r3, #2]
	config->clock_source = GCLK_GENERATOR_0;
   22e82:	687b      	ldr	r3, [r7, #4]
   22e84:	2200      	movs	r2, #0
   22e86:	70da      	strb	r2, [r3, #3]
}
   22e88:	46c0      	nop			; (mov r8, r8)
   22e8a:	46bd      	mov	sp, r7
   22e8c:	b002      	add	sp, #8
   22e8e:	bd80      	pop	{r7, pc}

00022e90 <events_allocate>:

enum status_code events_allocate(
		struct events_resource *resource,
		struct events_config *config)
{
   22e90:	b590      	push	{r4, r7, lr}
   22e92:	b085      	sub	sp, #20
   22e94:	af00      	add	r7, sp, #0
   22e96:	6078      	str	r0, [r7, #4]
   22e98:	6039      	str	r1, [r7, #0]
	uint8_t new_channel;

	Assert(resource);

	new_channel = _events_find_first_free_channel_and_allocate();
   22e9a:	230f      	movs	r3, #15
   22e9c:	18fc      	adds	r4, r7, r3
   22e9e:	4b2a      	ldr	r3, [pc, #168]	; (22f48 <events_allocate+0xb8>)
   22ea0:	4798      	blx	r3
   22ea2:	0003      	movs	r3, r0
   22ea4:	7023      	strb	r3, [r4, #0]

	if(new_channel == EVENTS_INVALID_CHANNEL) {
   22ea6:	230f      	movs	r3, #15
   22ea8:	18fb      	adds	r3, r7, r3
   22eaa:	781b      	ldrb	r3, [r3, #0]
   22eac:	2bff      	cmp	r3, #255	; 0xff
   22eae:	d101      	bne.n	22eb4 <events_allocate+0x24>
		return STATUS_ERR_NOT_FOUND;
   22eb0:	2314      	movs	r3, #20
   22eb2:	e045      	b.n	22f40 <events_allocate+0xb0>
	}

	resource->channel = new_channel;
   22eb4:	687b      	ldr	r3, [r7, #4]
   22eb6:	220f      	movs	r2, #15
   22eb8:	18ba      	adds	r2, r7, r2
   22eba:	7812      	ldrb	r2, [r2, #0]
   22ebc:	701a      	strb	r2, [r3, #0]

	if (config->path != EVENTS_PATH_ASYNCHRONOUS) {
   22ebe:	683b      	ldr	r3, [r7, #0]
   22ec0:	785b      	ldrb	r3, [r3, #1]
   22ec2:	2b02      	cmp	r3, #2
   22ec4:	d01c      	beq.n	22f00 <events_allocate+0x70>
		/* Set up a GLCK channel to use with the specific channel */
		struct system_gclk_chan_config gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   22ec6:	230c      	movs	r3, #12
   22ec8:	18fb      	adds	r3, r7, r3
   22eca:	0018      	movs	r0, r3
   22ecc:	4b1f      	ldr	r3, [pc, #124]	; (22f4c <events_allocate+0xbc>)
   22ece:	4798      	blx	r3
		gclk_chan_conf.source_generator =
				(enum gclk_generator)config->clock_source;
   22ed0:	683b      	ldr	r3, [r7, #0]
   22ed2:	78da      	ldrb	r2, [r3, #3]
		gclk_chan_conf.source_generator =
   22ed4:	230c      	movs	r3, #12
   22ed6:	18fb      	adds	r3, r7, r3
   22ed8:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(EVSYS_GCLK_ID_0 + new_channel, &gclk_chan_conf);
   22eda:	230f      	movs	r3, #15
   22edc:	18fb      	adds	r3, r7, r3
   22ede:	781b      	ldrb	r3, [r3, #0]
   22ee0:	3307      	adds	r3, #7
   22ee2:	b2db      	uxtb	r3, r3
   22ee4:	220c      	movs	r2, #12
   22ee6:	18ba      	adds	r2, r7, r2
   22ee8:	0011      	movs	r1, r2
   22eea:	0018      	movs	r0, r3
   22eec:	4b18      	ldr	r3, [pc, #96]	; (22f50 <events_allocate+0xc0>)
   22eee:	4798      	blx	r3
		system_gclk_chan_enable(EVSYS_GCLK_ID_0 + new_channel);
   22ef0:	230f      	movs	r3, #15
   22ef2:	18fb      	adds	r3, r7, r3
   22ef4:	781b      	ldrb	r3, [r3, #0]
   22ef6:	3307      	adds	r3, #7
   22ef8:	b2db      	uxtb	r3, r3
   22efa:	0018      	movs	r0, r3
   22efc:	4b15      	ldr	r3, [pc, #84]	; (22f54 <events_allocate+0xc4>)
   22efe:	4798      	blx	r3
	}

	/* Save channel setting and configure it after user multiplexer */
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
   22f00:	230f      	movs	r3, #15
   22f02:	18fb      	adds	r3, r7, r3
   22f04:	781b      	ldrb	r3, [r3, #0]
   22f06:	220f      	movs	r2, #15
   22f08:	401a      	ands	r2, r3
			     EVSYS_CHANNEL_EVGEN(config->generator)   |
   22f0a:	683b      	ldr	r3, [r7, #0]
   22f0c:	789b      	ldrb	r3, [r3, #2]
   22f0e:	041b      	lsls	r3, r3, #16
   22f10:	0019      	movs	r1, r3
   22f12:	23fe      	movs	r3, #254	; 0xfe
   22f14:	03db      	lsls	r3, r3, #15
   22f16:	400b      	ands	r3, r1
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
   22f18:	431a      	orrs	r2, r3
			     EVSYS_CHANNEL_PATH(config->path)         |
   22f1a:	683b      	ldr	r3, [r7, #0]
   22f1c:	785b      	ldrb	r3, [r3, #1]
   22f1e:	061b      	lsls	r3, r3, #24
   22f20:	0019      	movs	r1, r3
   22f22:	23c0      	movs	r3, #192	; 0xc0
   22f24:	049b      	lsls	r3, r3, #18
   22f26:	400b      	ands	r3, r1
			     EVSYS_CHANNEL_EVGEN(config->generator)   |
   22f28:	431a      	orrs	r2, r3
			     EVSYS_CHANNEL_EDGSEL(config->edge_detect);
   22f2a:	683b      	ldr	r3, [r7, #0]
   22f2c:	781b      	ldrb	r3, [r3, #0]
   22f2e:	069b      	lsls	r3, r3, #26
   22f30:	0019      	movs	r1, r3
   22f32:	23c0      	movs	r3, #192	; 0xc0
   22f34:	051b      	lsls	r3, r3, #20
   22f36:	400b      	ands	r3, r1
			     EVSYS_CHANNEL_PATH(config->path)         |
   22f38:	431a      	orrs	r2, r3
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
   22f3a:	687b      	ldr	r3, [r7, #4]
   22f3c:	605a      	str	r2, [r3, #4]


	return STATUS_OK;
   22f3e:	2300      	movs	r3, #0
}
   22f40:	0018      	movs	r0, r3
   22f42:	46bd      	mov	sp, r7
   22f44:	b005      	add	sp, #20
   22f46:	bd90      	pop	{r4, r7, pc}
   22f48:	00022d99 	.word	0x00022d99
   22f4c:	00022cfd 	.word	0x00022cfd
   22f50:	00025135 	.word	0x00025135
   22f54:	00025179 	.word	0x00025179

00022f58 <events_attach_user>:

	return false;
}

enum status_code events_attach_user(struct events_resource *resource, uint8_t user_id)
{
   22f58:	b580      	push	{r7, lr}
   22f5a:	b082      	sub	sp, #8
   22f5c:	af00      	add	r7, sp, #0
   22f5e:	6078      	str	r0, [r7, #4]
   22f60:	000a      	movs	r2, r1
   22f62:	1cfb      	adds	r3, r7, #3
   22f64:	701a      	strb	r2, [r3, #0]
	Assert(resource);

	/* First configure user multiplexer: channel number is n + 1 */
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(resource->channel + 1) |
   22f66:	490f      	ldr	r1, [pc, #60]	; (22fa4 <events_attach_user+0x4c>)
   22f68:	687b      	ldr	r3, [r7, #4]
   22f6a:	781b      	ldrb	r3, [r3, #0]
   22f6c:	b29b      	uxth	r3, r3
   22f6e:	3301      	adds	r3, #1
   22f70:	b29b      	uxth	r3, r3
   22f72:	021b      	lsls	r3, r3, #8
   22f74:	b29a      	uxth	r2, r3
   22f76:	23f8      	movs	r3, #248	; 0xf8
   22f78:	015b      	lsls	r3, r3, #5
   22f7a:	4013      	ands	r3, r2
   22f7c:	b29a      	uxth	r2, r3
			  EVSYS_USER_USER(user_id);
   22f7e:	1cfb      	adds	r3, r7, #3
   22f80:	781b      	ldrb	r3, [r3, #0]
   22f82:	b29b      	uxth	r3, r3
   22f84:	201f      	movs	r0, #31
   22f86:	4003      	ands	r3, r0
   22f88:	b29b      	uxth	r3, r3
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(resource->channel + 1) |
   22f8a:	4313      	orrs	r3, r2
   22f8c:	b29b      	uxth	r3, r3
   22f8e:	810b      	strh	r3, [r1, #8]

	/* Then configure the channel */
	EVSYS->CHANNEL.reg = resource->channel_reg;
   22f90:	4a04      	ldr	r2, [pc, #16]	; (22fa4 <events_attach_user+0x4c>)
   22f92:	687b      	ldr	r3, [r7, #4]
   22f94:	685b      	ldr	r3, [r3, #4]
   22f96:	6053      	str	r3, [r2, #4]

	return STATUS_OK;
   22f98:	2300      	movs	r3, #0
}
   22f9a:	0018      	movs	r0, r3
   22f9c:	46bd      	mov	sp, r7
   22f9e:	b002      	add	sp, #8
   22fa0:	bd80      	pop	{r7, pc}
   22fa2:	46c0      	nop			; (mov r8, r8)
   22fa4:	42000400 	.word	0x42000400

00022fa8 <ac_register_callback>:
 */
enum status_code ac_register_callback(
		struct ac_module *const module,
		ac_callback_t callback_func,
		const enum ac_callback callback_type)
{
   22fa8:	b580      	push	{r7, lr}
   22faa:	b084      	sub	sp, #16
   22fac:	af00      	add	r7, sp, #0
   22fae:	60f8      	str	r0, [r7, #12]
   22fb0:	60b9      	str	r1, [r7, #8]
   22fb2:	1dfb      	adds	r3, r7, #7
   22fb4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   22fb6:	1dfb      	adds	r3, r7, #7
   22fb8:	781b      	ldrb	r3, [r3, #0]
   22fba:	68fa      	ldr	r2, [r7, #12]
   22fbc:	009b      	lsls	r3, r3, #2
   22fbe:	18d3      	adds	r3, r2, r3
   22fc0:	3304      	adds	r3, #4
   22fc2:	68ba      	ldr	r2, [r7, #8]
   22fc4:	601a      	str	r2, [r3, #0]

	/* Set software flag for callback */
	module->register_callback_mask |= (1 << callback_type);
   22fc6:	68fb      	ldr	r3, [r7, #12]
   22fc8:	7e1b      	ldrb	r3, [r3, #24]
   22fca:	b25a      	sxtb	r2, r3
   22fcc:	1dfb      	adds	r3, r7, #7
   22fce:	781b      	ldrb	r3, [r3, #0]
   22fd0:	2101      	movs	r1, #1
   22fd2:	4099      	lsls	r1, r3
   22fd4:	000b      	movs	r3, r1
   22fd6:	b25b      	sxtb	r3, r3
   22fd8:	4313      	orrs	r3, r2
   22fda:	b25b      	sxtb	r3, r3
   22fdc:	b2da      	uxtb	r2, r3
   22fde:	68fb      	ldr	r3, [r7, #12]
   22fe0:	761a      	strb	r2, [r3, #24]

	return STATUS_OK;
   22fe2:	2300      	movs	r3, #0
}
   22fe4:	0018      	movs	r0, r3
   22fe6:	46bd      	mov	sp, r7
   22fe8:	b004      	add	sp, #16
   22fea:	bd80      	pop	{r7, pc}

00022fec <AC_Handler>:
/**
 * \internal ISR handler for AC
 */
#if (AC_INST_NUM == 1)
void AC_Handler(void)
{
   22fec:	b580      	push	{r7, lr}
   22fee:	af00      	add	r7, sp, #0
	_ac_interrupt_handler(0);
   22ff0:	2000      	movs	r0, #0
   22ff2:	4b02      	ldr	r3, [pc, #8]	; (22ffc <AC_Handler+0x10>)
   22ff4:	4798      	blx	r3
}
   22ff6:	46c0      	nop			; (mov r8, r8)
   22ff8:	46bd      	mov	sp, r7
   22ffa:	bd80      	pop	{r7, pc}
   22ffc:	00023001 	.word	0x00023001

00023000 <_ac_interrupt_handler>:
 * that are registered and enabled.
 *
 * \param [in] instance_index  Default value 0
 */
void _ac_interrupt_handler(const uint32_t instance_index)
{
   23000:	b580      	push	{r7, lr}
   23002:	b084      	sub	sp, #16
   23004:	af00      	add	r7, sp, #0
   23006:	6078      	str	r0, [r7, #4]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */

	struct ac_module *module = _ac_instance[instance_index];
   23008:	4b23      	ldr	r3, [pc, #140]	; (23098 <_ac_interrupt_handler+0x98>)
   2300a:	687a      	ldr	r2, [r7, #4]
   2300c:	0092      	lsls	r2, r2, #2
   2300e:	58d3      	ldr	r3, [r2, r3]
   23010:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask =
			_ac_instance[instance_index]->hw->INTFLAG.reg &
   23012:	4b21      	ldr	r3, [pc, #132]	; (23098 <_ac_interrupt_handler+0x98>)
   23014:	687a      	ldr	r2, [r7, #4]
   23016:	0092      	lsls	r2, r2, #2
   23018:	58d3      	ldr	r3, [r2, r3]
   2301a:	681b      	ldr	r3, [r3, #0]
   2301c:	799b      	ldrb	r3, [r3, #6]
   2301e:	b2da      	uxtb	r2, r3
			(module->register_callback_mask & module->enable_callback_mask);
   23020:	68fb      	ldr	r3, [r7, #12]
   23022:	7e1b      	ldrb	r3, [r3, #24]
   23024:	68f9      	ldr	r1, [r7, #12]
   23026:	7e49      	ldrb	r1, [r1, #25]
	interrupt_and_callback_status_mask =
   23028:	400b      	ands	r3, r1
   2302a:	b2d9      	uxtb	r1, r3
   2302c:	230b      	movs	r3, #11
   2302e:	18fb      	adds	r3, r7, r3
   23030:	400a      	ands	r2, r1
   23032:	701a      	strb	r2, [r3, #0]

	/* Check if comparator channel 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP0) {
   23034:	230b      	movs	r3, #11
   23036:	18fb      	adds	r3, r7, r3
   23038:	781b      	ldrb	r3, [r3, #0]
   2303a:	2201      	movs	r2, #1
   2303c:	4013      	ands	r3, r2
   2303e:	d008      	beq.n	23052 <_ac_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_COMPARATOR_0])(module);
   23040:	68fb      	ldr	r3, [r7, #12]
   23042:	685b      	ldr	r3, [r3, #4]
   23044:	68fa      	ldr	r2, [r7, #12]
   23046:	0010      	movs	r0, r2
   23048:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP0;
   2304a:	68fb      	ldr	r3, [r7, #12]
   2304c:	681b      	ldr	r3, [r3, #0]
   2304e:	2201      	movs	r2, #1
   23050:	719a      	strb	r2, [r3, #6]
	}

	/* Check if comparator channel 1 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP1) {
   23052:	230b      	movs	r3, #11
   23054:	18fb      	adds	r3, r7, r3
   23056:	781b      	ldrb	r3, [r3, #0]
   23058:	2202      	movs	r2, #2
   2305a:	4013      	ands	r3, r2
   2305c:	d008      	beq.n	23070 <_ac_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_COMPARATOR_1])(module);
   2305e:	68fb      	ldr	r3, [r7, #12]
   23060:	689b      	ldr	r3, [r3, #8]
   23062:	68fa      	ldr	r2, [r7, #12]
   23064:	0010      	movs	r0, r2
   23066:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP1;
   23068:	68fb      	ldr	r3, [r7, #12]
   2306a:	681b      	ldr	r3, [r3, #0]
   2306c:	2202      	movs	r2, #2
   2306e:	719a      	strb	r2, [r3, #6]
	}

	/* Check if window 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_WIN0) {
   23070:	230b      	movs	r3, #11
   23072:	18fb      	adds	r3, r7, r3
   23074:	781b      	ldrb	r3, [r3, #0]
   23076:	2210      	movs	r2, #16
   23078:	4013      	ands	r3, r2
   2307a:	d008      	beq.n	2308e <_ac_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_WINDOW_0])(module);
   2307c:	68fb      	ldr	r3, [r7, #12]
   2307e:	695b      	ldr	r3, [r3, #20]
   23080:	68fa      	ldr	r2, [r7, #12]
   23082:	0010      	movs	r0, r2
   23084:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN0;
   23086:	68fb      	ldr	r3, [r7, #12]
   23088:	681b      	ldr	r3, [r3, #0]
   2308a:	2210      	movs	r2, #16
   2308c:	719a      	strb	r2, [r3, #6]
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN1;
	}
#  endif
#endif /* (AC_NUM_CMP > 2) */
}
   2308e:	46c0      	nop			; (mov r8, r8)
   23090:	46bd      	mov	sp, r7
   23092:	b004      	add	sp, #16
   23094:	bd80      	pop	{r7, pc}
   23096:	46c0      	nop			; (mov r8, r8)
   23098:	20000984 	.word	0x20000984

0002309c <delay_init>:
 * \brief Initialize the delay driver.
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
   2309c:	b580      	push	{r7, lr}
   2309e:	af00      	add	r7, sp, #0
}
   230a0:	46c0      	nop			; (mov r8, r8)
   230a2:	46bd      	mov	sp, r7
   230a4:	bd80      	pop	{r7, pc}
	...

000230a8 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
   230a8:	b580      	push	{r7, lr}
   230aa:	b082      	sub	sp, #8
   230ac:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   230ae:	4b07      	ldr	r3, [pc, #28]	; (230cc <nvm_is_ready+0x24>)
   230b0:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
   230b2:	687b      	ldr	r3, [r7, #4]
   230b4:	7d1b      	ldrb	r3, [r3, #20]
   230b6:	b2db      	uxtb	r3, r3
   230b8:	001a      	movs	r2, r3
   230ba:	2301      	movs	r3, #1
   230bc:	4013      	ands	r3, r2
   230be:	1e5a      	subs	r2, r3, #1
   230c0:	4193      	sbcs	r3, r2
   230c2:	b2db      	uxtb	r3, r3
}
   230c4:	0018      	movs	r0, r3
   230c6:	46bd      	mov	sp, r7
   230c8:	b002      	add	sp, #8
   230ca:	bd80      	pop	{r7, pc}
   230cc:	41004000 	.word	0x41004000

000230d0 <system_apb_clock_set_mask>:
{
   230d0:	b580      	push	{r7, lr}
   230d2:	b082      	sub	sp, #8
   230d4:	af00      	add	r7, sp, #0
   230d6:	0002      	movs	r2, r0
   230d8:	6039      	str	r1, [r7, #0]
   230da:	1dfb      	adds	r3, r7, #7
   230dc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   230de:	1dfb      	adds	r3, r7, #7
   230e0:	781b      	ldrb	r3, [r3, #0]
   230e2:	2b01      	cmp	r3, #1
   230e4:	d00a      	beq.n	230fc <system_apb_clock_set_mask+0x2c>
   230e6:	2b02      	cmp	r3, #2
   230e8:	d00f      	beq.n	2310a <system_apb_clock_set_mask+0x3a>
   230ea:	2b00      	cmp	r3, #0
   230ec:	d114      	bne.n	23118 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   230ee:	4b0e      	ldr	r3, [pc, #56]	; (23128 <system_apb_clock_set_mask+0x58>)
   230f0:	4a0d      	ldr	r2, [pc, #52]	; (23128 <system_apb_clock_set_mask+0x58>)
   230f2:	6991      	ldr	r1, [r2, #24]
   230f4:	683a      	ldr	r2, [r7, #0]
   230f6:	430a      	orrs	r2, r1
   230f8:	619a      	str	r2, [r3, #24]
			break;
   230fa:	e00f      	b.n	2311c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   230fc:	4b0a      	ldr	r3, [pc, #40]	; (23128 <system_apb_clock_set_mask+0x58>)
   230fe:	4a0a      	ldr	r2, [pc, #40]	; (23128 <system_apb_clock_set_mask+0x58>)
   23100:	69d1      	ldr	r1, [r2, #28]
   23102:	683a      	ldr	r2, [r7, #0]
   23104:	430a      	orrs	r2, r1
   23106:	61da      	str	r2, [r3, #28]
			break;
   23108:	e008      	b.n	2311c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2310a:	4b07      	ldr	r3, [pc, #28]	; (23128 <system_apb_clock_set_mask+0x58>)
   2310c:	4a06      	ldr	r2, [pc, #24]	; (23128 <system_apb_clock_set_mask+0x58>)
   2310e:	6a11      	ldr	r1, [r2, #32]
   23110:	683a      	ldr	r2, [r7, #0]
   23112:	430a      	orrs	r2, r1
   23114:	621a      	str	r2, [r3, #32]
			break;
   23116:	e001      	b.n	2311c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   23118:	2317      	movs	r3, #23
   2311a:	e000      	b.n	2311e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2311c:	2300      	movs	r3, #0
}
   2311e:	0018      	movs	r0, r3
   23120:	46bd      	mov	sp, r7
   23122:	b002      	add	sp, #8
   23124:	bd80      	pop	{r7, pc}
   23126:	46c0      	nop			; (mov r8, r8)
   23128:	40000400 	.word	0x40000400

0002312c <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
   2312c:	b580      	push	{r7, lr}
   2312e:	b084      	sub	sp, #16
   23130:	af00      	add	r7, sp, #0
   23132:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   23134:	4b2f      	ldr	r3, [pc, #188]	; (231f4 <nvm_set_config+0xc8>)
   23136:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
   23138:	2104      	movs	r1, #4
   2313a:	2001      	movs	r0, #1
   2313c:	4b2e      	ldr	r3, [pc, #184]	; (231f8 <nvm_set_config+0xcc>)
   2313e:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   23140:	68fb      	ldr	r3, [r7, #12]
   23142:	2220      	movs	r2, #32
   23144:	32ff      	adds	r2, #255	; 0xff
   23146:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   23148:	4b2c      	ldr	r3, [pc, #176]	; (231fc <nvm_set_config+0xd0>)
   2314a:	4798      	blx	r3
   2314c:	0003      	movs	r3, r0
   2314e:	001a      	movs	r2, r3
   23150:	2301      	movs	r3, #1
   23152:	4053      	eors	r3, r2
   23154:	b2db      	uxtb	r3, r3
   23156:	2b00      	cmp	r3, #0
   23158:	d001      	beq.n	2315e <nvm_set_config+0x32>
		return STATUS_BUSY;
   2315a:	2305      	movs	r3, #5
   2315c:	e045      	b.n	231ea <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
   2315e:	687b      	ldr	r3, [r7, #4]
   23160:	781b      	ldrb	r3, [r3, #0]
   23162:	021b      	lsls	r3, r3, #8
   23164:	001a      	movs	r2, r3
   23166:	23c0      	movs	r3, #192	; 0xc0
   23168:	009b      	lsls	r3, r3, #2
   2316a:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
   2316c:	687b      	ldr	r3, [r7, #4]
   2316e:	785b      	ldrb	r3, [r3, #1]
   23170:	01db      	lsls	r3, r3, #7
   23172:	0019      	movs	r1, r3
   23174:	23ff      	movs	r3, #255	; 0xff
   23176:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
   23178:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
   2317a:	687b      	ldr	r3, [r7, #4]
   2317c:	789b      	ldrb	r3, [r3, #2]
   2317e:	005b      	lsls	r3, r3, #1
   23180:	0019      	movs	r1, r3
   23182:	231e      	movs	r3, #30
   23184:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
   23186:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
   23188:	687b      	ldr	r3, [r7, #4]
   2318a:	78db      	ldrb	r3, [r3, #3]
   2318c:	049b      	lsls	r3, r3, #18
   2318e:	0019      	movs	r1, r3
   23190:	2380      	movs	r3, #128	; 0x80
   23192:	02db      	lsls	r3, r3, #11
   23194:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
   23196:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
   23198:	687b      	ldr	r3, [r7, #4]
   2319a:	791b      	ldrb	r3, [r3, #4]
   2319c:	041b      	lsls	r3, r3, #16
   2319e:	0019      	movs	r1, r3
   231a0:	23c0      	movs	r3, #192	; 0xc0
   231a2:	029b      	lsls	r3, r3, #10
   231a4:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
   231a6:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
   231a8:	68fb      	ldr	r3, [r7, #12]
   231aa:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
   231ac:	68fb      	ldr	r3, [r7, #12]
   231ae:	689b      	ldr	r3, [r3, #8]
   231b0:	035b      	lsls	r3, r3, #13
   231b2:	0f5b      	lsrs	r3, r3, #29
   231b4:	b2db      	uxtb	r3, r3
   231b6:	001a      	movs	r2, r3
   231b8:	2308      	movs	r3, #8
   231ba:	4093      	lsls	r3, r2
   231bc:	b29a      	uxth	r2, r3
   231be:	4b10      	ldr	r3, [pc, #64]	; (23200 <nvm_set_config+0xd4>)
   231c0:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
   231c2:	68fb      	ldr	r3, [r7, #12]
   231c4:	689b      	ldr	r3, [r3, #8]
   231c6:	b29a      	uxth	r2, r3
   231c8:	4b0d      	ldr	r3, [pc, #52]	; (23200 <nvm_set_config+0xd4>)
   231ca:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
   231cc:	687b      	ldr	r3, [r7, #4]
   231ce:	785a      	ldrb	r2, [r3, #1]
   231d0:	4b0b      	ldr	r3, [pc, #44]	; (23200 <nvm_set_config+0xd4>)
   231d2:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
   231d4:	68fb      	ldr	r3, [r7, #12]
   231d6:	8b1b      	ldrh	r3, [r3, #24]
   231d8:	b29b      	uxth	r3, r3
   231da:	001a      	movs	r2, r3
   231dc:	2380      	movs	r3, #128	; 0x80
   231de:	005b      	lsls	r3, r3, #1
   231e0:	4013      	ands	r3, r2
   231e2:	d001      	beq.n	231e8 <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
   231e4:	2310      	movs	r3, #16
   231e6:	e000      	b.n	231ea <nvm_set_config+0xbe>
	}

	return STATUS_OK;
   231e8:	2300      	movs	r3, #0
}
   231ea:	0018      	movs	r0, r3
   231ec:	46bd      	mov	sp, r7
   231ee:	b004      	add	sp, #16
   231f0:	bd80      	pop	{r7, pc}
   231f2:	46c0      	nop			; (mov r8, r8)
   231f4:	41004000 	.word	0x41004000
   231f8:	000230d1 	.word	0x000230d1
   231fc:	000230a9 	.word	0x000230a9
   23200:	20000414 	.word	0x20000414

00023204 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
   23204:	b580      	push	{r7, lr}
   23206:	b086      	sub	sp, #24
   23208:	af00      	add	r7, sp, #0
   2320a:	60b9      	str	r1, [r7, #8]
   2320c:	607a      	str	r2, [r7, #4]
   2320e:	230f      	movs	r3, #15
   23210:	18fb      	adds	r3, r7, r3
   23212:	1c02      	adds	r2, r0, #0
   23214:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
   23216:	4b3a      	ldr	r3, [pc, #232]	; (23300 <nvm_execute_command+0xfc>)
   23218:	881b      	ldrh	r3, [r3, #0]
   2321a:	001a      	movs	r2, r3
   2321c:	4b38      	ldr	r3, [pc, #224]	; (23300 <nvm_execute_command+0xfc>)
   2321e:	885b      	ldrh	r3, [r3, #2]
   23220:	435a      	muls	r2, r3
   23222:	68bb      	ldr	r3, [r7, #8]
   23224:	429a      	cmp	r2, r3
   23226:	d209      	bcs.n	2323c <nvm_execute_command+0x38>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
   23228:	68bb      	ldr	r3, [r7, #8]
   2322a:	4a36      	ldr	r2, [pc, #216]	; (23304 <nvm_execute_command+0x100>)
   2322c:	4293      	cmp	r3, r2
   2322e:	d903      	bls.n	23238 <nvm_execute_command+0x34>
   23230:	68bb      	ldr	r3, [r7, #8]
   23232:	4a35      	ldr	r2, [pc, #212]	; (23308 <nvm_execute_command+0x104>)
   23234:	4293      	cmp	r3, r2
   23236:	d901      	bls.n	2323c <nvm_execute_command+0x38>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
   23238:	2318      	movs	r3, #24
   2323a:	e05c      	b.n	232f6 <nvm_execute_command+0xf2>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   2323c:	4b33      	ldr	r3, [pc, #204]	; (2330c <nvm_execute_command+0x108>)
   2323e:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
   23240:	697b      	ldr	r3, [r7, #20]
   23242:	685b      	ldr	r3, [r3, #4]
   23244:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
   23246:	693b      	ldr	r3, [r7, #16]
   23248:	2280      	movs	r2, #128	; 0x80
   2324a:	02d2      	lsls	r2, r2, #11
   2324c:	431a      	orrs	r2, r3
   2324e:	697b      	ldr	r3, [r7, #20]
   23250:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   23252:	697b      	ldr	r3, [r7, #20]
   23254:	2220      	movs	r2, #32
   23256:	32ff      	adds	r2, #255	; 0xff
   23258:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   2325a:	4b2d      	ldr	r3, [pc, #180]	; (23310 <nvm_execute_command+0x10c>)
   2325c:	4798      	blx	r3
   2325e:	0003      	movs	r3, r0
   23260:	001a      	movs	r2, r3
   23262:	2301      	movs	r3, #1
   23264:	4053      	eors	r3, r2
   23266:	b2db      	uxtb	r3, r3
   23268:	2b00      	cmp	r3, #0
   2326a:	d004      	beq.n	23276 <nvm_execute_command+0x72>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
   2326c:	697b      	ldr	r3, [r7, #20]
   2326e:	693a      	ldr	r2, [r7, #16]
   23270:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
   23272:	2305      	movs	r3, #5
   23274:	e03f      	b.n	232f6 <nvm_execute_command+0xf2>
	}

	switch (command) {
   23276:	230f      	movs	r3, #15
   23278:	18fb      	adds	r3, r7, r3
   2327a:	781b      	ldrb	r3, [r3, #0]
   2327c:	2b45      	cmp	r3, #69	; 0x45
   2327e:	d81d      	bhi.n	232bc <nvm_execute_command+0xb8>
   23280:	009a      	lsls	r2, r3, #2
   23282:	4b24      	ldr	r3, [pc, #144]	; (23314 <nvm_execute_command+0x110>)
   23284:	18d3      	adds	r3, r2, r3
   23286:	681b      	ldr	r3, [r3, #0]
   23288:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
   2328a:	697b      	ldr	r3, [r7, #20]
   2328c:	8b1b      	ldrh	r3, [r3, #24]
   2328e:	b29b      	uxth	r3, r3
   23290:	001a      	movs	r2, r3
   23292:	2380      	movs	r3, #128	; 0x80
   23294:	005b      	lsls	r3, r3, #1
   23296:	4013      	ands	r3, r2
   23298:	d004      	beq.n	232a4 <nvm_execute_command+0xa0>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
   2329a:	697b      	ldr	r3, [r7, #20]
   2329c:	693a      	ldr	r2, [r7, #16]
   2329e:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
   232a0:	2310      	movs	r3, #16
   232a2:	e028      	b.n	232f6 <nvm_execute_command+0xf2>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
   232a4:	68bb      	ldr	r3, [r7, #8]
   232a6:	089b      	lsrs	r3, r3, #2
   232a8:	005a      	lsls	r2, r3, #1
   232aa:	697b      	ldr	r3, [r7, #20]
   232ac:	61da      	str	r2, [r3, #28]
			break;
   232ae:	e00b      	b.n	232c8 <nvm_execute_command+0xc4>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
   232b0:	68bb      	ldr	r3, [r7, #8]
   232b2:	089b      	lsrs	r3, r3, #2
   232b4:	005a      	lsls	r2, r3, #1
   232b6:	697b      	ldr	r3, [r7, #20]
   232b8:	61da      	str	r2, [r3, #28]
			break;
   232ba:	e005      	b.n	232c8 <nvm_execute_command+0xc4>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
   232bc:	697b      	ldr	r3, [r7, #20]
   232be:	693a      	ldr	r2, [r7, #16]
   232c0:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
   232c2:	2317      	movs	r3, #23
   232c4:	e017      	b.n	232f6 <nvm_execute_command+0xf2>
			break;
   232c6:	46c0      	nop			; (mov r8, r8)
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
   232c8:	230f      	movs	r3, #15
   232ca:	18fb      	adds	r3, r7, r3
   232cc:	781b      	ldrb	r3, [r3, #0]
   232ce:	b29b      	uxth	r3, r3
   232d0:	4a11      	ldr	r2, [pc, #68]	; (23318 <nvm_execute_command+0x114>)
   232d2:	4313      	orrs	r3, r2
   232d4:	b29a      	uxth	r2, r3
   232d6:	697b      	ldr	r3, [r7, #20]
   232d8:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
   232da:	46c0      	nop			; (mov r8, r8)
   232dc:	4b0c      	ldr	r3, [pc, #48]	; (23310 <nvm_execute_command+0x10c>)
   232de:	4798      	blx	r3
   232e0:	0003      	movs	r3, r0
   232e2:	001a      	movs	r2, r3
   232e4:	2301      	movs	r3, #1
   232e6:	4053      	eors	r3, r2
   232e8:	b2db      	uxtb	r3, r3
   232ea:	2b00      	cmp	r3, #0
   232ec:	d1f6      	bne.n	232dc <nvm_execute_command+0xd8>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
   232ee:	697b      	ldr	r3, [r7, #20]
   232f0:	693a      	ldr	r2, [r7, #16]
   232f2:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   232f4:	2300      	movs	r3, #0
}
   232f6:	0018      	movs	r0, r3
   232f8:	46bd      	mov	sp, r7
   232fa:	b006      	add	sp, #24
   232fc:	bd80      	pop	{r7, pc}
   232fe:	46c0      	nop			; (mov r8, r8)
   23300:	20000414 	.word	0x20000414
   23304:	00803fff 	.word	0x00803fff
   23308:	00806000 	.word	0x00806000
   2330c:	41004000 	.word	0x41004000
   23310:	000230a9 	.word	0x000230a9
   23314:	0002b6a0 	.word	0x0002b6a0
   23318:	ffffa500 	.word	0xffffa500

0002331c <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
   2331c:	b580      	push	{r7, lr}
   2331e:	b088      	sub	sp, #32
   23320:	af00      	add	r7, sp, #0
   23322:	60f8      	str	r0, [r7, #12]
   23324:	60b9      	str	r1, [r7, #8]
   23326:	1dbb      	adds	r3, r7, #6
   23328:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   2332a:	4b4a      	ldr	r3, [pc, #296]	; (23454 <nvm_write_buffer+0x138>)
   2332c:	881b      	ldrh	r3, [r3, #0]
   2332e:	001a      	movs	r2, r3
   23330:	4b48      	ldr	r3, [pc, #288]	; (23454 <nvm_write_buffer+0x138>)
   23332:	885b      	ldrh	r3, [r3, #2]
   23334:	435a      	muls	r2, r3
	if (destination_address >
   23336:	68fb      	ldr	r3, [r7, #12]
   23338:	429a      	cmp	r2, r3
   2333a:	d201      	bcs.n	23340 <nvm_write_buffer+0x24>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
   2333c:	2318      	movs	r3, #24
   2333e:	e084      	b.n	2344a <nvm_write_buffer+0x12e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
   23340:	4b44      	ldr	r3, [pc, #272]	; (23454 <nvm_write_buffer+0x138>)
   23342:	881b      	ldrh	r3, [r3, #0]
   23344:	3b01      	subs	r3, #1
   23346:	001a      	movs	r2, r3
   23348:	68fb      	ldr	r3, [r7, #12]
   2334a:	4013      	ands	r3, r2
   2334c:	d001      	beq.n	23352 <nvm_write_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
   2334e:	2318      	movs	r3, #24
   23350:	e07b      	b.n	2344a <nvm_write_buffer+0x12e>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
   23352:	4b40      	ldr	r3, [pc, #256]	; (23454 <nvm_write_buffer+0x138>)
   23354:	881b      	ldrh	r3, [r3, #0]
   23356:	1dba      	adds	r2, r7, #6
   23358:	8812      	ldrh	r2, [r2, #0]
   2335a:	429a      	cmp	r2, r3
   2335c:	d901      	bls.n	23362 <nvm_write_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
   2335e:	2317      	movs	r3, #23
   23360:	e073      	b.n	2344a <nvm_write_buffer+0x12e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   23362:	4b3d      	ldr	r3, [pc, #244]	; (23458 <nvm_write_buffer+0x13c>)
   23364:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   23366:	4b3d      	ldr	r3, [pc, #244]	; (2345c <nvm_write_buffer+0x140>)
   23368:	4798      	blx	r3
   2336a:	0003      	movs	r3, r0
   2336c:	001a      	movs	r2, r3
   2336e:	2301      	movs	r3, #1
   23370:	4053      	eors	r3, r2
   23372:	b2db      	uxtb	r3, r3
   23374:	2b00      	cmp	r3, #0
   23376:	d001      	beq.n	2337c <nvm_write_buffer+0x60>
		return STATUS_BUSY;
   23378:	2305      	movs	r3, #5
   2337a:	e066      	b.n	2344a <nvm_write_buffer+0x12e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
   2337c:	697b      	ldr	r3, [r7, #20]
   2337e:	4a38      	ldr	r2, [pc, #224]	; (23460 <nvm_write_buffer+0x144>)
   23380:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
   23382:	46c0      	nop			; (mov r8, r8)
   23384:	4b35      	ldr	r3, [pc, #212]	; (2345c <nvm_write_buffer+0x140>)
   23386:	4798      	blx	r3
   23388:	0003      	movs	r3, r0
   2338a:	001a      	movs	r2, r3
   2338c:	2301      	movs	r3, #1
   2338e:	4053      	eors	r3, r2
   23390:	b2db      	uxtb	r3, r3
   23392:	2b00      	cmp	r3, #0
   23394:	d1f6      	bne.n	23384 <nvm_write_buffer+0x68>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   23396:	697b      	ldr	r3, [r7, #20]
   23398:	2220      	movs	r2, #32
   2339a:	32ff      	adds	r2, #255	; 0xff
   2339c:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
   2339e:	68fb      	ldr	r3, [r7, #12]
   233a0:	085b      	lsrs	r3, r3, #1
   233a2:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
   233a4:	231a      	movs	r3, #26
   233a6:	18fb      	adds	r3, r7, r3
   233a8:	2200      	movs	r2, #0
   233aa:	801a      	strh	r2, [r3, #0]
   233ac:	e032      	b.n	23414 <nvm_write_buffer+0xf8>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
   233ae:	231a      	movs	r3, #26
   233b0:	18fb      	adds	r3, r7, r3
   233b2:	881b      	ldrh	r3, [r3, #0]
   233b4:	68ba      	ldr	r2, [r7, #8]
   233b6:	18d3      	adds	r3, r2, r3
   233b8:	781a      	ldrb	r2, [r3, #0]
   233ba:	2318      	movs	r3, #24
   233bc:	18fb      	adds	r3, r7, r3
   233be:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
   233c0:	231a      	movs	r3, #26
   233c2:	18fb      	adds	r3, r7, r3
   233c4:	881a      	ldrh	r2, [r3, #0]
   233c6:	1dbb      	adds	r3, r7, #6
   233c8:	881b      	ldrh	r3, [r3, #0]
   233ca:	3b01      	subs	r3, #1
   233cc:	429a      	cmp	r2, r3
   233ce:	da11      	bge.n	233f4 <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
   233d0:	231a      	movs	r3, #26
   233d2:	18fb      	adds	r3, r7, r3
   233d4:	881b      	ldrh	r3, [r3, #0]
   233d6:	3301      	adds	r3, #1
   233d8:	68ba      	ldr	r2, [r7, #8]
   233da:	18d3      	adds	r3, r2, r3
   233dc:	781b      	ldrb	r3, [r3, #0]
   233de:	021b      	lsls	r3, r3, #8
   233e0:	b21a      	sxth	r2, r3
   233e2:	2318      	movs	r3, #24
   233e4:	18fb      	adds	r3, r7, r3
   233e6:	2100      	movs	r1, #0
   233e8:	5e5b      	ldrsh	r3, [r3, r1]
   233ea:	4313      	orrs	r3, r2
   233ec:	b21a      	sxth	r2, r3
   233ee:	2318      	movs	r3, #24
   233f0:	18fb      	adds	r3, r7, r3
   233f2:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
   233f4:	69fb      	ldr	r3, [r7, #28]
   233f6:	1c5a      	adds	r2, r3, #1
   233f8:	61fa      	str	r2, [r7, #28]
   233fa:	005b      	lsls	r3, r3, #1
   233fc:	001a      	movs	r2, r3
   233fe:	2318      	movs	r3, #24
   23400:	18fb      	adds	r3, r7, r3
   23402:	881b      	ldrh	r3, [r3, #0]
   23404:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
   23406:	231a      	movs	r3, #26
   23408:	18fb      	adds	r3, r7, r3
   2340a:	221a      	movs	r2, #26
   2340c:	18ba      	adds	r2, r7, r2
   2340e:	8812      	ldrh	r2, [r2, #0]
   23410:	3202      	adds	r2, #2
   23412:	801a      	strh	r2, [r3, #0]
   23414:	231a      	movs	r3, #26
   23416:	18fa      	adds	r2, r7, r3
   23418:	1dbb      	adds	r3, r7, #6
   2341a:	8812      	ldrh	r2, [r2, #0]
   2341c:	881b      	ldrh	r3, [r3, #0]
   2341e:	429a      	cmp	r2, r3
   23420:	d3c5      	bcc.n	233ae <nvm_write_buffer+0x92>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
   23422:	4b0c      	ldr	r3, [pc, #48]	; (23454 <nvm_write_buffer+0x138>)
   23424:	791b      	ldrb	r3, [r3, #4]
   23426:	2201      	movs	r2, #1
   23428:	4053      	eors	r3, r2
   2342a:	b2db      	uxtb	r3, r3
   2342c:	2b00      	cmp	r3, #0
   2342e:	d00b      	beq.n	23448 <nvm_write_buffer+0x12c>
   23430:	1dbb      	adds	r3, r7, #6
   23432:	881b      	ldrh	r3, [r3, #0]
   23434:	2b3f      	cmp	r3, #63	; 0x3f
   23436:	d807      	bhi.n	23448 <nvm_write_buffer+0x12c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
   23438:	68fb      	ldr	r3, [r7, #12]
   2343a:	2200      	movs	r2, #0
   2343c:	0019      	movs	r1, r3
   2343e:	2004      	movs	r0, #4
   23440:	4b08      	ldr	r3, [pc, #32]	; (23464 <nvm_write_buffer+0x148>)
   23442:	4798      	blx	r3
   23444:	0003      	movs	r3, r0
   23446:	e000      	b.n	2344a <nvm_write_buffer+0x12e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
   23448:	2300      	movs	r3, #0
}
   2344a:	0018      	movs	r0, r3
   2344c:	46bd      	mov	sp, r7
   2344e:	b008      	add	sp, #32
   23450:	bd80      	pop	{r7, pc}
   23452:	46c0      	nop			; (mov r8, r8)
   23454:	20000414 	.word	0x20000414
   23458:	41004000 	.word	0x41004000
   2345c:	000230a9 	.word	0x000230a9
   23460:	ffffa544 	.word	0xffffa544
   23464:	00023205 	.word	0x00023205

00023468 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
   23468:	b580      	push	{r7, lr}
   2346a:	b088      	sub	sp, #32
   2346c:	af00      	add	r7, sp, #0
   2346e:	60f8      	str	r0, [r7, #12]
   23470:	60b9      	str	r1, [r7, #8]
   23472:	1dbb      	adds	r3, r7, #6
   23474:	801a      	strh	r2, [r3, #0]
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   23476:	4b38      	ldr	r3, [pc, #224]	; (23558 <nvm_read_buffer+0xf0>)
   23478:	881b      	ldrh	r3, [r3, #0]
   2347a:	001a      	movs	r2, r3
   2347c:	4b36      	ldr	r3, [pc, #216]	; (23558 <nvm_read_buffer+0xf0>)
   2347e:	885b      	ldrh	r3, [r3, #2]
   23480:	435a      	muls	r2, r3
	if (source_address >
   23482:	68fb      	ldr	r3, [r7, #12]
   23484:	429a      	cmp	r2, r3
   23486:	d201      	bcs.n	2348c <nvm_read_buffer+0x24>
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
   23488:	2318      	movs	r3, #24
   2348a:	e060      	b.n	2354e <nvm_read_buffer+0xe6>
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
   2348c:	4b32      	ldr	r3, [pc, #200]	; (23558 <nvm_read_buffer+0xf0>)
   2348e:	881b      	ldrh	r3, [r3, #0]
   23490:	3b01      	subs	r3, #1
   23492:	001a      	movs	r2, r3
   23494:	68fb      	ldr	r3, [r7, #12]
   23496:	4013      	ands	r3, r2
   23498:	d001      	beq.n	2349e <nvm_read_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
   2349a:	2318      	movs	r3, #24
   2349c:	e057      	b.n	2354e <nvm_read_buffer+0xe6>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
   2349e:	4b2e      	ldr	r3, [pc, #184]	; (23558 <nvm_read_buffer+0xf0>)
   234a0:	881b      	ldrh	r3, [r3, #0]
   234a2:	1dba      	adds	r2, r7, #6
   234a4:	8812      	ldrh	r2, [r2, #0]
   234a6:	429a      	cmp	r2, r3
   234a8:	d901      	bls.n	234ae <nvm_read_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
   234aa:	2317      	movs	r3, #23
   234ac:	e04f      	b.n	2354e <nvm_read_buffer+0xe6>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   234ae:	4b2b      	ldr	r3, [pc, #172]	; (2355c <nvm_read_buffer+0xf4>)
   234b0:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   234b2:	4b2b      	ldr	r3, [pc, #172]	; (23560 <nvm_read_buffer+0xf8>)
   234b4:	4798      	blx	r3
   234b6:	0003      	movs	r3, r0
   234b8:	001a      	movs	r2, r3
   234ba:	2301      	movs	r3, #1
   234bc:	4053      	eors	r3, r2
   234be:	b2db      	uxtb	r3, r3
   234c0:	2b00      	cmp	r3, #0
   234c2:	d001      	beq.n	234c8 <nvm_read_buffer+0x60>
		return STATUS_BUSY;
   234c4:	2305      	movs	r3, #5
   234c6:	e042      	b.n	2354e <nvm_read_buffer+0xe6>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   234c8:	697b      	ldr	r3, [r7, #20]
   234ca:	2220      	movs	r2, #32
   234cc:	32ff      	adds	r2, #255	; 0xff
   234ce:	831a      	strh	r2, [r3, #24]

	uint32_t page_address = source_address / 2;
   234d0:	68fb      	ldr	r3, [r7, #12]
   234d2:	085b      	lsrs	r3, r3, #1
   234d4:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
   234d6:	231a      	movs	r3, #26
   234d8:	18fb      	adds	r3, r7, r3
   234da:	2200      	movs	r2, #0
   234dc:	801a      	strh	r2, [r3, #0]
   234de:	e02e      	b.n	2353e <nvm_read_buffer+0xd6>
		/* Fetch next 16-bit chunk from the NVM memory space */
		uint16_t data = NVM_MEMORY[page_address++];
   234e0:	69fb      	ldr	r3, [r7, #28]
   234e2:	1c5a      	adds	r2, r3, #1
   234e4:	61fa      	str	r2, [r7, #28]
   234e6:	005b      	lsls	r3, r3, #1
   234e8:	001a      	movs	r2, r3
   234ea:	2312      	movs	r3, #18
   234ec:	18fb      	adds	r3, r7, r3
   234ee:	8812      	ldrh	r2, [r2, #0]
   234f0:	801a      	strh	r2, [r3, #0]

		/* Copy first byte of the 16-bit chunk to the destination buffer */
		buffer[i] = (data & 0xFF);
   234f2:	231a      	movs	r3, #26
   234f4:	18fb      	adds	r3, r7, r3
   234f6:	881b      	ldrh	r3, [r3, #0]
   234f8:	68ba      	ldr	r2, [r7, #8]
   234fa:	18d3      	adds	r3, r2, r3
   234fc:	2212      	movs	r2, #18
   234fe:	18ba      	adds	r2, r7, r2
   23500:	8812      	ldrh	r2, [r2, #0]
   23502:	b2d2      	uxtb	r2, r2
   23504:	701a      	strb	r2, [r3, #0]

		/* If we are not at the end of a read request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
   23506:	231a      	movs	r3, #26
   23508:	18fb      	adds	r3, r7, r3
   2350a:	881a      	ldrh	r2, [r3, #0]
   2350c:	1dbb      	adds	r3, r7, #6
   2350e:	881b      	ldrh	r3, [r3, #0]
   23510:	3b01      	subs	r3, #1
   23512:	429a      	cmp	r2, r3
   23514:	da0c      	bge.n	23530 <nvm_read_buffer+0xc8>
			buffer[i + 1] = (data >> 8);
   23516:	231a      	movs	r3, #26
   23518:	18fb      	adds	r3, r7, r3
   2351a:	881b      	ldrh	r3, [r3, #0]
   2351c:	3301      	adds	r3, #1
   2351e:	68ba      	ldr	r2, [r7, #8]
   23520:	18d3      	adds	r3, r2, r3
   23522:	2212      	movs	r2, #18
   23524:	18ba      	adds	r2, r7, r2
   23526:	8812      	ldrh	r2, [r2, #0]
   23528:	0a12      	lsrs	r2, r2, #8
   2352a:	b292      	uxth	r2, r2
   2352c:	b2d2      	uxtb	r2, r2
   2352e:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < length; i += 2) {
   23530:	231a      	movs	r3, #26
   23532:	18fb      	adds	r3, r7, r3
   23534:	221a      	movs	r2, #26
   23536:	18ba      	adds	r2, r7, r2
   23538:	8812      	ldrh	r2, [r2, #0]
   2353a:	3202      	adds	r2, #2
   2353c:	801a      	strh	r2, [r3, #0]
   2353e:	231a      	movs	r3, #26
   23540:	18fa      	adds	r2, r7, r3
   23542:	1dbb      	adds	r3, r7, #6
   23544:	8812      	ldrh	r2, [r2, #0]
   23546:	881b      	ldrh	r3, [r3, #0]
   23548:	429a      	cmp	r2, r3
   2354a:	d3c9      	bcc.n	234e0 <nvm_read_buffer+0x78>
		}
	}

	return STATUS_OK;
   2354c:	2300      	movs	r3, #0
}
   2354e:	0018      	movs	r0, r3
   23550:	46bd      	mov	sp, r7
   23552:	b008      	add	sp, #32
   23554:	bd80      	pop	{r7, pc}
   23556:	46c0      	nop			; (mov r8, r8)
   23558:	20000414 	.word	0x20000414
   2355c:	41004000 	.word	0x41004000
   23560:	000230a9 	.word	0x000230a9

00023564 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
   23564:	b580      	push	{r7, lr}
   23566:	b084      	sub	sp, #16
   23568:	af00      	add	r7, sp, #0
   2356a:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   2356c:	4b23      	ldr	r3, [pc, #140]	; (235fc <nvm_erase_row+0x98>)
   2356e:	881b      	ldrh	r3, [r3, #0]
   23570:	001a      	movs	r2, r3
   23572:	4b22      	ldr	r3, [pc, #136]	; (235fc <nvm_erase_row+0x98>)
   23574:	885b      	ldrh	r3, [r3, #2]
   23576:	435a      	muls	r2, r3
	if (row_address >
   23578:	687b      	ldr	r3, [r7, #4]
   2357a:	429a      	cmp	r2, r3
   2357c:	d201      	bcs.n	23582 <nvm_erase_row+0x1e>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
   2357e:	2318      	movs	r3, #24
   23580:	e037      	b.n	235f2 <nvm_erase_row+0x8e>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
   23582:	4b1e      	ldr	r3, [pc, #120]	; (235fc <nvm_erase_row+0x98>)
   23584:	881b      	ldrh	r3, [r3, #0]
   23586:	009b      	lsls	r3, r3, #2
   23588:	3b01      	subs	r3, #1
   2358a:	001a      	movs	r2, r3
   2358c:	687b      	ldr	r3, [r7, #4]
   2358e:	4013      	ands	r3, r2
   23590:	d001      	beq.n	23596 <nvm_erase_row+0x32>
		return STATUS_ERR_BAD_ADDRESS;
   23592:	2318      	movs	r3, #24
   23594:	e02d      	b.n	235f2 <nvm_erase_row+0x8e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   23596:	4b1a      	ldr	r3, [pc, #104]	; (23600 <nvm_erase_row+0x9c>)
   23598:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   2359a:	4b1a      	ldr	r3, [pc, #104]	; (23604 <nvm_erase_row+0xa0>)
   2359c:	4798      	blx	r3
   2359e:	0003      	movs	r3, r0
   235a0:	001a      	movs	r2, r3
   235a2:	2301      	movs	r3, #1
   235a4:	4053      	eors	r3, r2
   235a6:	b2db      	uxtb	r3, r3
   235a8:	2b00      	cmp	r3, #0
   235aa:	d001      	beq.n	235b0 <nvm_erase_row+0x4c>
		return STATUS_BUSY;
   235ac:	2305      	movs	r3, #5
   235ae:	e020      	b.n	235f2 <nvm_erase_row+0x8e>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   235b0:	68fb      	ldr	r3, [r7, #12]
   235b2:	2220      	movs	r2, #32
   235b4:	32ff      	adds	r2, #255	; 0xff
   235b6:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
   235b8:	687b      	ldr	r3, [r7, #4]
   235ba:	089b      	lsrs	r3, r3, #2
   235bc:	005a      	lsls	r2, r3, #1
   235be:	68fb      	ldr	r3, [r7, #12]
   235c0:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
   235c2:	68fb      	ldr	r3, [r7, #12]
   235c4:	4a10      	ldr	r2, [pc, #64]	; (23608 <nvm_erase_row+0xa4>)
   235c6:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
   235c8:	46c0      	nop			; (mov r8, r8)
   235ca:	4b0e      	ldr	r3, [pc, #56]	; (23604 <nvm_erase_row+0xa0>)
   235cc:	4798      	blx	r3
   235ce:	0003      	movs	r3, r0
   235d0:	001a      	movs	r2, r3
   235d2:	2301      	movs	r3, #1
   235d4:	4053      	eors	r3, r2
   235d6:	b2db      	uxtb	r3, r3
   235d8:	2b00      	cmp	r3, #0
   235da:	d1f6      	bne.n	235ca <nvm_erase_row+0x66>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
   235dc:	68fb      	ldr	r3, [r7, #12]
   235de:	8b1b      	ldrh	r3, [r3, #24]
   235e0:	b29b      	uxth	r3, r3
   235e2:	b2db      	uxtb	r3, r3
   235e4:	001a      	movs	r2, r3
   235e6:	231c      	movs	r3, #28
   235e8:	4013      	ands	r3, r2
   235ea:	d001      	beq.n	235f0 <nvm_erase_row+0x8c>
		return STATUS_ABORTED;
   235ec:	2304      	movs	r3, #4
   235ee:	e000      	b.n	235f2 <nvm_erase_row+0x8e>
	}

	return STATUS_OK;
   235f0:	2300      	movs	r3, #0
}
   235f2:	0018      	movs	r0, r3
   235f4:	46bd      	mov	sp, r7
   235f6:	b004      	add	sp, #16
   235f8:	bd80      	pop	{r7, pc}
   235fa:	46c0      	nop			; (mov r8, r8)
   235fc:	20000414 	.word	0x20000414
   23600:	41004000 	.word	0x41004000
   23604:	000230a9 	.word	0x000230a9
   23608:	ffffa502 	.word	0xffffa502

0002360c <nvm_get_parameters>:
 * \param[out] parameters    Parameter structure, which holds page size and
 *                           number of pages in the NVM memory
 */
void nvm_get_parameters(
		struct nvm_parameters *const parameters)
{
   2360c:	b580      	push	{r7, lr}
   2360e:	b086      	sub	sp, #24
   23610:	af00      	add	r7, sp, #0
   23612:	6078      	str	r0, [r7, #4]
	/* Sanity check parameters */
	Assert(parameters);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   23614:	4b2a      	ldr	r3, [pc, #168]	; (236c0 <nvm_get_parameters+0xb4>)
   23616:	617b      	str	r3, [r7, #20]

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   23618:	697b      	ldr	r3, [r7, #20]
   2361a:	2220      	movs	r2, #32
   2361c:	32ff      	adds	r2, #255	; 0xff
   2361e:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
   23620:	697b      	ldr	r3, [r7, #20]
   23622:	689b      	ldr	r3, [r3, #8]
   23624:	613b      	str	r3, [r7, #16]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
   23626:	693b      	ldr	r3, [r7, #16]
   23628:	0c1b      	lsrs	r3, r3, #16
   2362a:	2207      	movs	r2, #7
   2362c:	4013      	ands	r3, r2
   2362e:	2208      	movs	r2, #8
   23630:	409a      	lsls	r2, r3
   23632:	0013      	movs	r3, r2
	parameters->page_size =
   23634:	b2da      	uxtb	r2, r3
   23636:	687b      	ldr	r3, [r7, #4]
   23638:	701a      	strb	r2, [r3, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
   2363a:	693b      	ldr	r3, [r7, #16]
   2363c:	b29a      	uxth	r2, r3
   2363e:	687b      	ldr	r3, [r7, #4]
   23640:	805a      	strh	r2, [r3, #2]
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
   23642:	4b20      	ldr	r3, [pc, #128]	; (236c4 <nvm_get_parameters+0xb8>)
   23644:	881b      	ldrh	r3, [r3, #0]
   23646:	b29b      	uxth	r3, r3
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;
   23648:	091b      	lsrs	r3, r3, #4
   2364a:	b29a      	uxth	r2, r3
	uint16_t eeprom_fuse_value =
   2364c:	230e      	movs	r3, #14
   2364e:	18fb      	adds	r3, r7, r3
   23650:	2107      	movs	r1, #7
   23652:	400a      	ands	r2, r1
   23654:	801a      	strh	r2, [r3, #0]

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
   23656:	230e      	movs	r3, #14
   23658:	18fb      	adds	r3, r7, r3
   2365a:	881b      	ldrh	r3, [r3, #0]
   2365c:	2b07      	cmp	r3, #7
   2365e:	d103      	bne.n	23668 <nvm_get_parameters+0x5c>
		parameters->eeprom_number_of_pages = 0;
   23660:	687b      	ldr	r3, [r7, #4]
   23662:	2200      	movs	r2, #0
   23664:	605a      	str	r2, [r3, #4]
   23666:	e00a      	b.n	2367e <nvm_get_parameters+0x72>
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
   23668:	230e      	movs	r3, #14
   2366a:	18fb      	adds	r3, r7, r3
   2366c:	881b      	ldrh	r3, [r3, #0]
   2366e:	2206      	movs	r2, #6
   23670:	1ad3      	subs	r3, r2, r3
   23672:	2204      	movs	r2, #4
   23674:	409a      	lsls	r2, r3
   23676:	0013      	movs	r3, r2
   23678:	001a      	movs	r2, r3
		parameters->eeprom_number_of_pages =
   2367a:	687b      	ldr	r3, [r7, #4]
   2367c:	605a      	str	r2, [r3, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
   2367e:	4b11      	ldr	r3, [pc, #68]	; (236c4 <nvm_get_parameters+0xb8>)
   23680:	881b      	ldrh	r3, [r3, #0]
   23682:	b29a      	uxth	r2, r3
	uint16_t boot_fuse_value =
   23684:	230c      	movs	r3, #12
   23686:	18fb      	adds	r3, r7, r3
   23688:	2107      	movs	r1, #7
   2368a:	400a      	ands	r2, r1
   2368c:	801a      	strh	r2, [r3, #0]
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
   2368e:	230c      	movs	r3, #12
   23690:	18fb      	adds	r3, r7, r3
   23692:	881b      	ldrh	r3, [r3, #0]
   23694:	2b07      	cmp	r3, #7
   23696:	d103      	bne.n	236a0 <nvm_get_parameters+0x94>
		parameters->bootloader_number_of_pages = 0;
   23698:	687b      	ldr	r3, [r7, #4]
   2369a:	2200      	movs	r2, #0
   2369c:	609a      	str	r2, [r3, #8]
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
	}
}
   2369e:	e00a      	b.n	236b6 <nvm_get_parameters+0xaa>
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
   236a0:	230c      	movs	r3, #12
   236a2:	18fb      	adds	r3, r7, r3
   236a4:	881b      	ldrh	r3, [r3, #0]
   236a6:	2207      	movs	r2, #7
   236a8:	1ad3      	subs	r3, r2, r3
   236aa:	2204      	movs	r2, #4
   236ac:	409a      	lsls	r2, r3
   236ae:	0013      	movs	r3, r2
   236b0:	001a      	movs	r2, r3
		parameters->bootloader_number_of_pages =
   236b2:	687b      	ldr	r3, [r7, #4]
   236b4:	609a      	str	r2, [r3, #8]
}
   236b6:	46c0      	nop			; (mov r8, r8)
   236b8:	46bd      	mov	sp, r7
   236ba:	b006      	add	sp, #24
   236bc:	bd80      	pop	{r7, pc}
   236be:	46c0      	nop			; (mov r8, r8)
   236c0:	41004000 	.word	0x41004000
   236c4:	00804000 	.word	0x00804000

000236c8 <system_pinmux_get_config_defaults>:
{
   236c8:	b580      	push	{r7, lr}
   236ca:	b082      	sub	sp, #8
   236cc:	af00      	add	r7, sp, #0
   236ce:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   236d0:	687b      	ldr	r3, [r7, #4]
   236d2:	2280      	movs	r2, #128	; 0x80
   236d4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   236d6:	687b      	ldr	r3, [r7, #4]
   236d8:	2200      	movs	r2, #0
   236da:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   236dc:	687b      	ldr	r3, [r7, #4]
   236de:	2201      	movs	r2, #1
   236e0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   236e2:	687b      	ldr	r3, [r7, #4]
   236e4:	2200      	movs	r2, #0
   236e6:	70da      	strb	r2, [r3, #3]
}
   236e8:	46c0      	nop			; (mov r8, r8)
   236ea:	46bd      	mov	sp, r7
   236ec:	b002      	add	sp, #8
   236ee:	bd80      	pop	{r7, pc}

000236f0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   236f0:	b580      	push	{r7, lr}
   236f2:	b084      	sub	sp, #16
   236f4:	af00      	add	r7, sp, #0
   236f6:	0002      	movs	r2, r0
   236f8:	6039      	str	r1, [r7, #0]
   236fa:	1dfb      	adds	r3, r7, #7
   236fc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   236fe:	230c      	movs	r3, #12
   23700:	18fb      	adds	r3, r7, r3
   23702:	0018      	movs	r0, r3
   23704:	4b10      	ldr	r3, [pc, #64]	; (23748 <port_pin_set_config+0x58>)
   23706:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   23708:	230c      	movs	r3, #12
   2370a:	18fb      	adds	r3, r7, r3
   2370c:	2280      	movs	r2, #128	; 0x80
   2370e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   23710:	683b      	ldr	r3, [r7, #0]
   23712:	781a      	ldrb	r2, [r3, #0]
   23714:	230c      	movs	r3, #12
   23716:	18fb      	adds	r3, r7, r3
   23718:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   2371a:	683b      	ldr	r3, [r7, #0]
   2371c:	785a      	ldrb	r2, [r3, #1]
   2371e:	230c      	movs	r3, #12
   23720:	18fb      	adds	r3, r7, r3
   23722:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   23724:	683b      	ldr	r3, [r7, #0]
   23726:	789a      	ldrb	r2, [r3, #2]
   23728:	230c      	movs	r3, #12
   2372a:	18fb      	adds	r3, r7, r3
   2372c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   2372e:	230c      	movs	r3, #12
   23730:	18fa      	adds	r2, r7, r3
   23732:	1dfb      	adds	r3, r7, #7
   23734:	781b      	ldrb	r3, [r3, #0]
   23736:	0011      	movs	r1, r2
   23738:	0018      	movs	r0, r3
   2373a:	4b04      	ldr	r3, [pc, #16]	; (2374c <port_pin_set_config+0x5c>)
   2373c:	4798      	blx	r3
}
   2373e:	46c0      	nop			; (mov r8, r8)
   23740:	46bd      	mov	sp, r7
   23742:	b004      	add	sp, #16
   23744:	bd80      	pop	{r7, pc}
   23746:	46c0      	nop			; (mov r8, r8)
   23748:	000236c9 	.word	0x000236c9
   2374c:	00025421 	.word	0x00025421

00023750 <nvm_get_config_defaults>:
{
   23750:	b580      	push	{r7, lr}
   23752:	b082      	sub	sp, #8
   23754:	af00      	add	r7, sp, #0
   23756:	6078      	str	r0, [r7, #4]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
   23758:	687b      	ldr	r3, [r7, #4]
   2375a:	2200      	movs	r2, #0
   2375c:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
   2375e:	687b      	ldr	r3, [r7, #4]
   23760:	2201      	movs	r2, #1
   23762:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
   23764:	4b08      	ldr	r3, [pc, #32]	; (23788 <nvm_get_config_defaults+0x38>)
   23766:	685b      	ldr	r3, [r3, #4]
   23768:	06db      	lsls	r3, r3, #27
   2376a:	0f1b      	lsrs	r3, r3, #28
   2376c:	b2db      	uxtb	r3, r3
   2376e:	001a      	movs	r2, r3
   23770:	687b      	ldr	r3, [r7, #4]
   23772:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
   23774:	687b      	ldr	r3, [r7, #4]
   23776:	2200      	movs	r2, #0
   23778:	70da      	strb	r2, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
   2377a:	687b      	ldr	r3, [r7, #4]
   2377c:	2200      	movs	r2, #0
   2377e:	711a      	strb	r2, [r3, #4]
}
   23780:	46c0      	nop			; (mov r8, r8)
   23782:	46bd      	mov	sp, r7
   23784:	b002      	add	sp, #8
   23786:	bd80      	pop	{r7, pc}
   23788:	41004000 	.word	0x41004000

0002378c <_eeprom_emulator_nvm_erase_row>:
 *
 *  \param[in] row  Physical row in EEPROM space to erase
 */
static void _eeprom_emulator_nvm_erase_row(
		const uint8_t row)
{
   2378c:	b590      	push	{r4, r7, lr}
   2378e:	b085      	sub	sp, #20
   23790:	af00      	add	r7, sp, #0
   23792:	0002      	movs	r2, r0
   23794:	1dfb      	adds	r3, r7, #7
   23796:	701a      	strb	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   23798:	230f      	movs	r3, #15
   2379a:	18fb      	adds	r3, r7, r3
   2379c:	2200      	movs	r2, #0
   2379e:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_erase_row(
				(uint32_t)&_eeprom_instance.flash[row * NVMCTRL_ROW_PAGES]);
   237a0:	4b0a      	ldr	r3, [pc, #40]	; (237cc <_eeprom_emulator_nvm_erase_row+0x40>)
   237a2:	685b      	ldr	r3, [r3, #4]
   237a4:	1dfa      	adds	r2, r7, #7
   237a6:	7812      	ldrb	r2, [r2, #0]
   237a8:	0212      	lsls	r2, r2, #8
   237aa:	189b      	adds	r3, r3, r2
		error_code = nvm_erase_row(
   237ac:	220f      	movs	r2, #15
   237ae:	18bc      	adds	r4, r7, r2
   237b0:	0018      	movs	r0, r3
   237b2:	4b07      	ldr	r3, [pc, #28]	; (237d0 <_eeprom_emulator_nvm_erase_row+0x44>)
   237b4:	4798      	blx	r3
   237b6:	0003      	movs	r3, r0
   237b8:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   237ba:	230f      	movs	r3, #15
   237bc:	18fb      	adds	r3, r7, r3
   237be:	781b      	ldrb	r3, [r3, #0]
   237c0:	2b05      	cmp	r3, #5
   237c2:	d0ed      	beq.n	237a0 <_eeprom_emulator_nvm_erase_row+0x14>
}
   237c4:	46c0      	nop			; (mov r8, r8)
   237c6:	46bd      	mov	sp, r7
   237c8:	b005      	add	sp, #20
   237ca:	bd90      	pop	{r4, r7, pc}
   237cc:	2000041c 	.word	0x2000041c
   237d0:	00023565 	.word	0x00023565

000237d4 <_eeprom_emulator_nvm_fill_cache>:
 *  \param[in] data           Data to write to the physical memory page
 */
static void _eeprom_emulator_nvm_fill_cache(
		const uint16_t physical_page,
		const void* const data)
{
   237d4:	b590      	push	{r4, r7, lr}
   237d6:	b085      	sub	sp, #20
   237d8:	af00      	add	r7, sp, #0
   237da:	0002      	movs	r2, r0
   237dc:	6039      	str	r1, [r7, #0]
   237de:	1dbb      	adds	r3, r7, #6
   237e0:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   237e2:	230f      	movs	r3, #15
   237e4:	18fb      	adds	r3, r7, r3
   237e6:	2200      	movs	r2, #0
   237e8:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_write_buffer(
				(uint32_t)&_eeprom_instance.flash[physical_page],
   237ea:	4b0c      	ldr	r3, [pc, #48]	; (2381c <_eeprom_emulator_nvm_fill_cache+0x48>)
   237ec:	685a      	ldr	r2, [r3, #4]
   237ee:	1dbb      	adds	r3, r7, #6
   237f0:	881b      	ldrh	r3, [r3, #0]
   237f2:	019b      	lsls	r3, r3, #6
   237f4:	18d3      	adds	r3, r2, r3
		error_code = nvm_write_buffer(
   237f6:	0018      	movs	r0, r3
   237f8:	230f      	movs	r3, #15
   237fa:	18fc      	adds	r4, r7, r3
   237fc:	683b      	ldr	r3, [r7, #0]
   237fe:	2240      	movs	r2, #64	; 0x40
   23800:	0019      	movs	r1, r3
   23802:	4b07      	ldr	r3, [pc, #28]	; (23820 <_eeprom_emulator_nvm_fill_cache+0x4c>)
   23804:	4798      	blx	r3
   23806:	0003      	movs	r3, r0
   23808:	7023      	strb	r3, [r4, #0]
				(uint8_t*)data,
				NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
   2380a:	230f      	movs	r3, #15
   2380c:	18fb      	adds	r3, r7, r3
   2380e:	781b      	ldrb	r3, [r3, #0]
   23810:	2b05      	cmp	r3, #5
   23812:	d0ea      	beq.n	237ea <_eeprom_emulator_nvm_fill_cache+0x16>
}
   23814:	46c0      	nop			; (mov r8, r8)
   23816:	46bd      	mov	sp, r7
   23818:	b005      	add	sp, #20
   2381a:	bd90      	pop	{r4, r7, pc}
   2381c:	2000041c 	.word	0x2000041c
   23820:	0002331d 	.word	0x0002331d

00023824 <_eeprom_emulator_nvm_commit_cache>:
 *
 *  \param[in] physical_page  Physical page in EEPROM space to commit
 */
static void _eeprom_emulator_nvm_commit_cache(
		const uint16_t physical_page)
{
   23824:	b590      	push	{r4, r7, lr}
   23826:	b085      	sub	sp, #20
   23828:	af00      	add	r7, sp, #0
   2382a:	0002      	movs	r2, r0
   2382c:	1dbb      	adds	r3, r7, #6
   2382e:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   23830:	230f      	movs	r3, #15
   23832:	18fb      	adds	r3, r7, r3
   23834:	2200      	movs	r2, #0
   23836:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_execute_command(
				NVM_COMMAND_WRITE_PAGE,
				(uint32_t)&_eeprom_instance.flash[physical_page], 0);
   23838:	4b0b      	ldr	r3, [pc, #44]	; (23868 <_eeprom_emulator_nvm_commit_cache+0x44>)
   2383a:	685a      	ldr	r2, [r3, #4]
   2383c:	1dbb      	adds	r3, r7, #6
   2383e:	881b      	ldrh	r3, [r3, #0]
   23840:	019b      	lsls	r3, r3, #6
   23842:	18d3      	adds	r3, r2, r3
		error_code = nvm_execute_command(
   23844:	220f      	movs	r2, #15
   23846:	18bc      	adds	r4, r7, r2
   23848:	2200      	movs	r2, #0
   2384a:	0019      	movs	r1, r3
   2384c:	2004      	movs	r0, #4
   2384e:	4b07      	ldr	r3, [pc, #28]	; (2386c <_eeprom_emulator_nvm_commit_cache+0x48>)
   23850:	4798      	blx	r3
   23852:	0003      	movs	r3, r0
   23854:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   23856:	230f      	movs	r3, #15
   23858:	18fb      	adds	r3, r7, r3
   2385a:	781b      	ldrb	r3, [r3, #0]
   2385c:	2b05      	cmp	r3, #5
   2385e:	d0eb      	beq.n	23838 <_eeprom_emulator_nvm_commit_cache+0x14>
}
   23860:	46c0      	nop			; (mov r8, r8)
   23862:	46bd      	mov	sp, r7
   23864:	b005      	add	sp, #20
   23866:	bd90      	pop	{r4, r7, pc}
   23868:	2000041c 	.word	0x2000041c
   2386c:	00023205 	.word	0x00023205

00023870 <_eeprom_emulator_nvm_read_page>:
 *  \param[out] data           Destination buffer to fill with the read data
 */
static void _eeprom_emulator_nvm_read_page(
		const uint16_t physical_page,
		void* const data)
{
   23870:	b590      	push	{r4, r7, lr}
   23872:	b085      	sub	sp, #20
   23874:	af00      	add	r7, sp, #0
   23876:	0002      	movs	r2, r0
   23878:	6039      	str	r1, [r7, #0]
   2387a:	1dbb      	adds	r3, r7, #6
   2387c:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   2387e:	230f      	movs	r3, #15
   23880:	18fb      	adds	r3, r7, r3
   23882:	2200      	movs	r2, #0
   23884:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_read_buffer(
				(uint32_t)&_eeprom_instance.flash[physical_page],
   23886:	4b0c      	ldr	r3, [pc, #48]	; (238b8 <_eeprom_emulator_nvm_read_page+0x48>)
   23888:	685a      	ldr	r2, [r3, #4]
   2388a:	1dbb      	adds	r3, r7, #6
   2388c:	881b      	ldrh	r3, [r3, #0]
   2388e:	019b      	lsls	r3, r3, #6
   23890:	18d3      	adds	r3, r2, r3
		error_code = nvm_read_buffer(
   23892:	0018      	movs	r0, r3
   23894:	230f      	movs	r3, #15
   23896:	18fc      	adds	r4, r7, r3
   23898:	683b      	ldr	r3, [r7, #0]
   2389a:	2240      	movs	r2, #64	; 0x40
   2389c:	0019      	movs	r1, r3
   2389e:	4b07      	ldr	r3, [pc, #28]	; (238bc <_eeprom_emulator_nvm_read_page+0x4c>)
   238a0:	4798      	blx	r3
   238a2:	0003      	movs	r3, r0
   238a4:	7023      	strb	r3, [r4, #0]
				(uint8_t*)data,
				NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
   238a6:	230f      	movs	r3, #15
   238a8:	18fb      	adds	r3, r7, r3
   238aa:	781b      	ldrb	r3, [r3, #0]
   238ac:	2b05      	cmp	r3, #5
   238ae:	d0ea      	beq.n	23886 <_eeprom_emulator_nvm_read_page+0x16>
}
   238b0:	46c0      	nop			; (mov r8, r8)
   238b2:	46bd      	mov	sp, r7
   238b4:	b005      	add	sp, #20
   238b6:	bd90      	pop	{r4, r7, pc}
   238b8:	2000041c 	.word	0x2000041c
   238bc:	00023469 	.word	0x00023469

000238c0 <_eeprom_emulator_format_memory>:

/**
 * \brief Initializes the emulated EEPROM memory, destroying the current contents.
 */
static void _eeprom_emulator_format_memory(void)
{
   238c0:	b580      	push	{r7, lr}
   238c2:	b092      	sub	sp, #72	; 0x48
   238c4:	af00      	add	r7, sp, #0
	uint16_t logical_page = 0;
   238c6:	2346      	movs	r3, #70	; 0x46
   238c8:	18fb      	adds	r3, r7, r3
   238ca:	2200      	movs	r2, #0
   238cc:	801a      	strh	r2, [r3, #0]

	/* Set row 0 as the spare row */
	_eeprom_instance.spare_row = 0;
   238ce:	4b32      	ldr	r3, [pc, #200]	; (23998 <_eeprom_emulator_format_memory+0xd8>)
   238d0:	2287      	movs	r2, #135	; 0x87
   238d2:	2100      	movs	r1, #0
   238d4:	5499      	strb	r1, [r3, r2]
	_eeprom_emulator_nvm_erase_row(_eeprom_instance.spare_row);
   238d6:	4b30      	ldr	r3, [pc, #192]	; (23998 <_eeprom_emulator_format_memory+0xd8>)
   238d8:	2287      	movs	r2, #135	; 0x87
   238da:	5c9b      	ldrb	r3, [r3, r2]
   238dc:	0018      	movs	r0, r3
   238de:	4b2f      	ldr	r3, [pc, #188]	; (2399c <_eeprom_emulator_format_memory+0xdc>)
   238e0:	4798      	blx	r3

	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
   238e2:	2344      	movs	r3, #68	; 0x44
   238e4:	18fb      	adds	r3, r7, r3
   238e6:	2204      	movs	r2, #4
   238e8:	801a      	strh	r2, [r3, #0]
   238ea:	e04a      	b.n	23982 <_eeprom_emulator_format_memory+0xc2>
			physical_page < _eeprom_instance.physical_pages; physical_page++) {

		if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
   238ec:	2344      	movs	r3, #68	; 0x44
   238ee:	18fb      	adds	r3, r7, r3
   238f0:	881a      	ldrh	r2, [r3, #0]
   238f2:	4b29      	ldr	r3, [pc, #164]	; (23998 <_eeprom_emulator_format_memory+0xd8>)
   238f4:	891b      	ldrh	r3, [r3, #8]
   238f6:	3b01      	subs	r3, #1
   238f8:	429a      	cmp	r2, r3
   238fa:	d03a      	beq.n	23972 <_eeprom_emulator_format_memory+0xb2>
			continue;
		}

		/* If we are at the first page in a new row, erase the entire row */
		if ((physical_page % NVMCTRL_ROW_PAGES) == 0) {
   238fc:	2344      	movs	r3, #68	; 0x44
   238fe:	18fb      	adds	r3, r7, r3
   23900:	881b      	ldrh	r3, [r3, #0]
   23902:	2203      	movs	r2, #3
   23904:	4013      	ands	r3, r2
   23906:	b29b      	uxth	r3, r3
   23908:	2b00      	cmp	r3, #0
   2390a:	d108      	bne.n	2391e <_eeprom_emulator_format_memory+0x5e>
			_eeprom_emulator_nvm_erase_row(physical_page / NVMCTRL_ROW_PAGES);
   2390c:	2344      	movs	r3, #68	; 0x44
   2390e:	18fb      	adds	r3, r7, r3
   23910:	881b      	ldrh	r3, [r3, #0]
   23912:	089b      	lsrs	r3, r3, #2
   23914:	b29b      	uxth	r3, r3
   23916:	b2db      	uxtb	r3, r3
   23918:	0018      	movs	r0, r3
   2391a:	4b20      	ldr	r3, [pc, #128]	; (2399c <_eeprom_emulator_format_memory+0xdc>)
   2391c:	4798      	blx	r3
		}

		/* Two logical pages are stored in each physical row; program in a
		 * pair of initialized but blank set of emulated EEPROM pages */
		if ((physical_page % NVMCTRL_ROW_PAGES) < 2) {
   2391e:	2344      	movs	r3, #68	; 0x44
   23920:	18fb      	adds	r3, r7, r3
   23922:	881b      	ldrh	r3, [r3, #0]
   23924:	2203      	movs	r2, #3
   23926:	4013      	ands	r3, r2
   23928:	b29b      	uxth	r3, r3
   2392a:	2b01      	cmp	r3, #1
   2392c:	d822      	bhi.n	23974 <_eeprom_emulator_format_memory+0xb4>
			/* Make a buffer to hold the initialized EEPROM page */
			struct _eeprom_page data;
			memset(&data, 0xFF, sizeof(data));
   2392e:	1d3b      	adds	r3, r7, #4
   23930:	2240      	movs	r2, #64	; 0x40
   23932:	21ff      	movs	r1, #255	; 0xff
   23934:	0018      	movs	r0, r3
   23936:	4b1a      	ldr	r3, [pc, #104]	; (239a0 <_eeprom_emulator_format_memory+0xe0>)
   23938:	4798      	blx	r3

			/* Set up the new EEPROM row's header */
			data.header.logical_page = logical_page;
   2393a:	2346      	movs	r3, #70	; 0x46
   2393c:	18fb      	adds	r3, r7, r3
   2393e:	881b      	ldrh	r3, [r3, #0]
   23940:	b2da      	uxtb	r2, r3
   23942:	1d3b      	adds	r3, r7, #4
   23944:	701a      	strb	r2, [r3, #0]

			/* Write the page out to physical memory */
			_eeprom_emulator_nvm_fill_cache(physical_page, &data);
   23946:	1d3a      	adds	r2, r7, #4
   23948:	2344      	movs	r3, #68	; 0x44
   2394a:	18fb      	adds	r3, r7, r3
   2394c:	881b      	ldrh	r3, [r3, #0]
   2394e:	0011      	movs	r1, r2
   23950:	0018      	movs	r0, r3
   23952:	4b14      	ldr	r3, [pc, #80]	; (239a4 <_eeprom_emulator_format_memory+0xe4>)
   23954:	4798      	blx	r3
			_eeprom_emulator_nvm_commit_cache(physical_page);
   23956:	2344      	movs	r3, #68	; 0x44
   23958:	18fb      	adds	r3, r7, r3
   2395a:	881b      	ldrh	r3, [r3, #0]
   2395c:	0018      	movs	r0, r3
   2395e:	4b12      	ldr	r3, [pc, #72]	; (239a8 <_eeprom_emulator_format_memory+0xe8>)
   23960:	4798      	blx	r3

			/* Increment the logical EEPROM page address now that the current
			 * address' page has been initialized */
			logical_page++;
   23962:	2346      	movs	r3, #70	; 0x46
   23964:	18fb      	adds	r3, r7, r3
   23966:	881a      	ldrh	r2, [r3, #0]
   23968:	2346      	movs	r3, #70	; 0x46
   2396a:	18fb      	adds	r3, r7, r3
   2396c:	3201      	adds	r2, #1
   2396e:	801a      	strh	r2, [r3, #0]
   23970:	e000      	b.n	23974 <_eeprom_emulator_format_memory+0xb4>
			continue;
   23972:	46c0      	nop			; (mov r8, r8)
			physical_page < _eeprom_instance.physical_pages; physical_page++) {
   23974:	2344      	movs	r3, #68	; 0x44
   23976:	18fb      	adds	r3, r7, r3
   23978:	881a      	ldrh	r2, [r3, #0]
   2397a:	2344      	movs	r3, #68	; 0x44
   2397c:	18fb      	adds	r3, r7, r3
   2397e:	3201      	adds	r2, #1
   23980:	801a      	strh	r2, [r3, #0]
   23982:	4b05      	ldr	r3, [pc, #20]	; (23998 <_eeprom_emulator_format_memory+0xd8>)
   23984:	891b      	ldrh	r3, [r3, #8]
	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
   23986:	2244      	movs	r2, #68	; 0x44
   23988:	18ba      	adds	r2, r7, r2
   2398a:	8812      	ldrh	r2, [r2, #0]
   2398c:	429a      	cmp	r2, r3
   2398e:	d3ad      	bcc.n	238ec <_eeprom_emulator_format_memory+0x2c>
		}
	}
}
   23990:	46c0      	nop			; (mov r8, r8)
   23992:	46bd      	mov	sp, r7
   23994:	b012      	add	sp, #72	; 0x48
   23996:	bd80      	pop	{r7, pc}
   23998:	2000041c 	.word	0x2000041c
   2399c:	0002378d 	.word	0x0002378d
   239a0:	000298b7 	.word	0x000298b7
   239a4:	000237d5 	.word	0x000237d5
   239a8:	00023825 	.word	0x00023825

000239ac <_eeprom_emulator_is_full_row>:
 *  it is the full row.
 *
 *  \param[in]  phy_page  Physical page that in a row
 */
static bool _eeprom_emulator_is_full_row(uint16_t phy_page)
{
   239ac:	b580      	push	{r7, lr}
   239ae:	b082      	sub	sp, #8
   239b0:	af00      	add	r7, sp, #0
   239b2:	0002      	movs	r2, r0
   239b4:	1dbb      	adds	r3, r7, #6
   239b6:	801a      	strh	r2, [r3, #0]
	if((_eeprom_instance.flash[phy_page].header.logical_page
   239b8:	4b14      	ldr	r3, [pc, #80]	; (23a0c <_eeprom_emulator_is_full_row+0x60>)
   239ba:	685a      	ldr	r2, [r3, #4]
   239bc:	1dbb      	adds	r3, r7, #6
   239be:	881b      	ldrh	r3, [r3, #0]
   239c0:	019b      	lsls	r3, r3, #6
   239c2:	18d3      	adds	r3, r2, r3
   239c4:	781a      	ldrb	r2, [r3, #0]
		== _eeprom_instance.flash[phy_page+2].header.logical_page)
   239c6:	4b11      	ldr	r3, [pc, #68]	; (23a0c <_eeprom_emulator_is_full_row+0x60>)
   239c8:	6859      	ldr	r1, [r3, #4]
   239ca:	1dbb      	adds	r3, r7, #6
   239cc:	881b      	ldrh	r3, [r3, #0]
   239ce:	3302      	adds	r3, #2
   239d0:	019b      	lsls	r3, r3, #6
   239d2:	18cb      	adds	r3, r1, r3
   239d4:	781b      	ldrb	r3, [r3, #0]
	if((_eeprom_instance.flash[phy_page].header.logical_page
   239d6:	429a      	cmp	r2, r3
   239d8:	d011      	beq.n	239fe <_eeprom_emulator_is_full_row+0x52>
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
   239da:	4b0c      	ldr	r3, [pc, #48]	; (23a0c <_eeprom_emulator_is_full_row+0x60>)
   239dc:	685a      	ldr	r2, [r3, #4]
   239de:	1dbb      	adds	r3, r7, #6
   239e0:	881b      	ldrh	r3, [r3, #0]
   239e2:	3301      	adds	r3, #1
   239e4:	019b      	lsls	r3, r3, #6
   239e6:	18d3      	adds	r3, r2, r3
   239e8:	781a      	ldrb	r2, [r3, #0]
		== _eeprom_instance.flash[phy_page+2].header.logical_page )) {
   239ea:	4b08      	ldr	r3, [pc, #32]	; (23a0c <_eeprom_emulator_is_full_row+0x60>)
   239ec:	6859      	ldr	r1, [r3, #4]
   239ee:	1dbb      	adds	r3, r7, #6
   239f0:	881b      	ldrh	r3, [r3, #0]
   239f2:	3302      	adds	r3, #2
   239f4:	019b      	lsls	r3, r3, #6
   239f6:	18cb      	adds	r3, r1, r3
   239f8:	781b      	ldrb	r3, [r3, #0]
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
   239fa:	429a      	cmp	r2, r3
   239fc:	d101      	bne.n	23a02 <_eeprom_emulator_is_full_row+0x56>
		return true;
   239fe:	2301      	movs	r3, #1
   23a00:	e000      	b.n	23a04 <_eeprom_emulator_is_full_row+0x58>
	} else {
		return false;
   23a02:	2300      	movs	r3, #0
	}
}
   23a04:	0018      	movs	r0, r3
   23a06:	46bd      	mov	sp, r7
   23a08:	b002      	add	sp, #8
   23a0a:	bd80      	pop	{r7, pc}
   23a0c:	2000041c 	.word	0x2000041c

00023a10 <_eeprom_emulator_erase_invalid_page>:
 *
 *  \param[in]  pre_phy_page  One physical invalid page
 *  \param[in]  next_phy_page Another physical invalid page
 */
static void _eeprom_emulator_erase_invalid_page(uint16_t pre_phy_page,uint16_t next_phy_page)
{
   23a10:	b580      	push	{r7, lr}
   23a12:	b082      	sub	sp, #8
   23a14:	af00      	add	r7, sp, #0
   23a16:	0002      	movs	r2, r0
   23a18:	1dbb      	adds	r3, r7, #6
   23a1a:	801a      	strh	r2, [r3, #0]
   23a1c:	1d3b      	adds	r3, r7, #4
   23a1e:	1c0a      	adds	r2, r1, #0
   23a20:	801a      	strh	r2, [r3, #0]
 	/* Erase the old/full row*/
	if(_eeprom_emulator_is_full_row(pre_phy_page)) {
   23a22:	1dbb      	adds	r3, r7, #6
   23a24:	881b      	ldrh	r3, [r3, #0]
   23a26:	0018      	movs	r0, r3
   23a28:	4b0c      	ldr	r3, [pc, #48]	; (23a5c <_eeprom_emulator_erase_invalid_page+0x4c>)
   23a2a:	4798      	blx	r3
   23a2c:	1e03      	subs	r3, r0, #0
   23a2e:	d008      	beq.n	23a42 <_eeprom_emulator_erase_invalid_page+0x32>
		 _eeprom_emulator_nvm_erase_row(pre_phy_page/4);
   23a30:	1dbb      	adds	r3, r7, #6
   23a32:	881b      	ldrh	r3, [r3, #0]
   23a34:	089b      	lsrs	r3, r3, #2
   23a36:	b29b      	uxth	r3, r3
   23a38:	b2db      	uxtb	r3, r3
   23a3a:	0018      	movs	r0, r3
   23a3c:	4b08      	ldr	r3, [pc, #32]	; (23a60 <_eeprom_emulator_erase_invalid_page+0x50>)
   23a3e:	4798      	blx	r3
	} else {
		_eeprom_emulator_nvm_erase_row(next_phy_page/4);
	}
}
   23a40:	e007      	b.n	23a52 <_eeprom_emulator_erase_invalid_page+0x42>
		_eeprom_emulator_nvm_erase_row(next_phy_page/4);
   23a42:	1d3b      	adds	r3, r7, #4
   23a44:	881b      	ldrh	r3, [r3, #0]
   23a46:	089b      	lsrs	r3, r3, #2
   23a48:	b29b      	uxth	r3, r3
   23a4a:	b2db      	uxtb	r3, r3
   23a4c:	0018      	movs	r0, r3
   23a4e:	4b04      	ldr	r3, [pc, #16]	; (23a60 <_eeprom_emulator_erase_invalid_page+0x50>)
   23a50:	4798      	blx	r3
}
   23a52:	46c0      	nop			; (mov r8, r8)
   23a54:	46bd      	mov	sp, r7
   23a56:	b002      	add	sp, #8
   23a58:	bd80      	pop	{r7, pc}
   23a5a:	46c0      	nop			; (mov r8, r8)
   23a5c:	000239ad 	.word	0x000239ad
   23a60:	0002378d 	.word	0x0002378d

00023a64 <_eeprom_emulator_check_logical_page>:
 * \brief Check if there exist rows with same logical pages due to power drop
 *  when writing or erasing page.
 *  when existed same logical page, the old(full) row will be erased.
 */
static void _eeprom_emulator_check_logical_page(void)
{
   23a64:	b580      	push	{r7, lr}
   23a66:	b082      	sub	sp, #8
   23a68:	af00      	add	r7, sp, #0
	uint16_t i = 0, j = 0;
   23a6a:	1dbb      	adds	r3, r7, #6
   23a6c:	2200      	movs	r2, #0
   23a6e:	801a      	strh	r2, [r3, #0]
   23a70:	1d3b      	adds	r3, r7, #4
   23a72:	2200      	movs	r2, #0
   23a74:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
   23a76:	1dbb      	adds	r3, r7, #6
   23a78:	2200      	movs	r2, #0
   23a7a:	801a      	strh	r2, [r3, #0]
   23a7c:	e04a      	b.n	23b14 <_eeprom_emulator_check_logical_page+0xb0>

		uint16_t pre_logical_page = _eeprom_instance.flash[i].header.logical_page;
   23a7e:	4b2a      	ldr	r3, [pc, #168]	; (23b28 <_eeprom_emulator_check_logical_page+0xc4>)
   23a80:	685a      	ldr	r2, [r3, #4]
   23a82:	1dbb      	adds	r3, r7, #6
   23a84:	881b      	ldrh	r3, [r3, #0]
   23a86:	019b      	lsls	r3, r3, #6
   23a88:	18d3      	adds	r3, r2, r3
   23a8a:	781a      	ldrb	r2, [r3, #0]
   23a8c:	1cbb      	adds	r3, r7, #2
   23a8e:	801a      	strh	r2, [r3, #0]
		if( pre_logical_page == EEPROM_INVALID_PAGE_NUMBER) {
   23a90:	1cbb      	adds	r3, r7, #2
   23a92:	881b      	ldrh	r3, [r3, #0]
   23a94:	2bff      	cmp	r3, #255	; 0xff
   23a96:	d037      	beq.n	23b08 <_eeprom_emulator_check_logical_page+0xa4>
			continue;
		}

		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
   23a98:	1d3b      	adds	r3, r7, #4
   23a9a:	1dba      	adds	r2, r7, #6
   23a9c:	8812      	ldrh	r2, [r2, #0]
   23a9e:	3204      	adds	r2, #4
   23aa0:	801a      	strh	r2, [r3, #0]
   23aa2:	e02a      	b.n	23afa <_eeprom_emulator_check_logical_page+0x96>

			if (j == EEPROM_MASTER_PAGE_NUMBER) {
   23aa4:	1d3b      	adds	r3, r7, #4
   23aa6:	881a      	ldrh	r2, [r3, #0]
   23aa8:	4b1f      	ldr	r3, [pc, #124]	; (23b28 <_eeprom_emulator_check_logical_page+0xc4>)
   23aaa:	891b      	ldrh	r3, [r3, #8]
   23aac:	3b01      	subs	r3, #1
   23aae:	429a      	cmp	r2, r3
   23ab0:	d01b      	beq.n	23aea <_eeprom_emulator_check_logical_page+0x86>
				continue;
			}
			uint16_t next_logical_page = _eeprom_instance.flash[j].header.logical_page;
   23ab2:	4b1d      	ldr	r3, [pc, #116]	; (23b28 <_eeprom_emulator_check_logical_page+0xc4>)
   23ab4:	685a      	ldr	r2, [r3, #4]
   23ab6:	1d3b      	adds	r3, r7, #4
   23ab8:	881b      	ldrh	r3, [r3, #0]
   23aba:	019b      	lsls	r3, r3, #6
   23abc:	18d3      	adds	r3, r2, r3
   23abe:	781a      	ldrb	r2, [r3, #0]
   23ac0:	003b      	movs	r3, r7
   23ac2:	801a      	strh	r2, [r3, #0]
			if( next_logical_page == EEPROM_INVALID_PAGE_NUMBER) {
   23ac4:	003b      	movs	r3, r7
   23ac6:	881b      	ldrh	r3, [r3, #0]
   23ac8:	2bff      	cmp	r3, #255	; 0xff
   23aca:	d010      	beq.n	23aee <_eeprom_emulator_check_logical_page+0x8a>
				continue;
			}

			if(pre_logical_page == next_logical_page) {
   23acc:	1cba      	adds	r2, r7, #2
   23ace:	003b      	movs	r3, r7
   23ad0:	8812      	ldrh	r2, [r2, #0]
   23ad2:	881b      	ldrh	r3, [r3, #0]
   23ad4:	429a      	cmp	r2, r3
   23ad6:	d10b      	bne.n	23af0 <_eeprom_emulator_check_logical_page+0x8c>
				/* Found invalid logical page and erase it */
				_eeprom_emulator_erase_invalid_page(i,j);
   23ad8:	1d3b      	adds	r3, r7, #4
   23ada:	881a      	ldrh	r2, [r3, #0]
   23adc:	1dbb      	adds	r3, r7, #6
   23ade:	881b      	ldrh	r3, [r3, #0]
   23ae0:	0011      	movs	r1, r2
   23ae2:	0018      	movs	r0, r3
   23ae4:	4b11      	ldr	r3, [pc, #68]	; (23b2c <_eeprom_emulator_check_logical_page+0xc8>)
   23ae6:	4798      	blx	r3
   23ae8:	e002      	b.n	23af0 <_eeprom_emulator_check_logical_page+0x8c>
				continue;
   23aea:	46c0      	nop			; (mov r8, r8)
   23aec:	e000      	b.n	23af0 <_eeprom_emulator_check_logical_page+0x8c>
				continue;
   23aee:	46c0      	nop			; (mov r8, r8)
		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
   23af0:	1d3b      	adds	r3, r7, #4
   23af2:	1d3a      	adds	r2, r7, #4
   23af4:	8812      	ldrh	r2, [r2, #0]
   23af6:	3204      	adds	r2, #4
   23af8:	801a      	strh	r2, [r3, #0]
   23afa:	4b0b      	ldr	r3, [pc, #44]	; (23b28 <_eeprom_emulator_check_logical_page+0xc4>)
   23afc:	891b      	ldrh	r3, [r3, #8]
   23afe:	1d3a      	adds	r2, r7, #4
   23b00:	8812      	ldrh	r2, [r2, #0]
   23b02:	429a      	cmp	r2, r3
   23b04:	d3ce      	bcc.n	23aa4 <_eeprom_emulator_check_logical_page+0x40>
   23b06:	e000      	b.n	23b0a <_eeprom_emulator_check_logical_page+0xa6>
			continue;
   23b08:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
   23b0a:	1dbb      	adds	r3, r7, #6
   23b0c:	1dba      	adds	r2, r7, #6
   23b0e:	8812      	ldrh	r2, [r2, #0]
   23b10:	3204      	adds	r2, #4
   23b12:	801a      	strh	r2, [r3, #0]
   23b14:	4b04      	ldr	r3, [pc, #16]	; (23b28 <_eeprom_emulator_check_logical_page+0xc4>)
   23b16:	891b      	ldrh	r3, [r3, #8]
   23b18:	1dba      	adds	r2, r7, #6
   23b1a:	8812      	ldrh	r2, [r2, #0]
   23b1c:	429a      	cmp	r2, r3
   23b1e:	d3ae      	bcc.n	23a7e <_eeprom_emulator_check_logical_page+0x1a>
			}
		}
	}
}
   23b20:	46c0      	nop			; (mov r8, r8)
   23b22:	46bd      	mov	sp, r7
   23b24:	b002      	add	sp, #8
   23b26:	bd80      	pop	{r7, pc}
   23b28:	2000041c 	.word	0x2000041c
   23b2c:	00023a11 	.word	0x00023a11

00023b30 <_eeprom_emulator_update_page_mapping>:

/**
 * \brief Creates a map in SRAM to translate logical EEPROM pages to physical FLASH pages.
 */
static void _eeprom_emulator_update_page_mapping(void)
{
   23b30:	b580      	push	{r7, lr}
   23b32:	b084      	sub	sp, #16
   23b34:	af00      	add	r7, sp, #0
	/* Check if exists invalid logical page */
	_eeprom_emulator_check_logical_page();
   23b36:	4b51      	ldr	r3, [pc, #324]	; (23c7c <_eeprom_emulator_update_page_mapping+0x14c>)
   23b38:	4798      	blx	r3

	/* Scan through all physical pages, to map physical and logical pages */
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
   23b3a:	230e      	movs	r3, #14
   23b3c:	18fb      	adds	r3, r7, r3
   23b3e:	2200      	movs	r2, #0
   23b40:	801a      	strh	r2, [r3, #0]
   23b42:	e033      	b.n	23bac <_eeprom_emulator_update_page_mapping+0x7c>
		if (c == EEPROM_MASTER_PAGE_NUMBER) {
   23b44:	230e      	movs	r3, #14
   23b46:	18fb      	adds	r3, r7, r3
   23b48:	881a      	ldrh	r2, [r3, #0]
   23b4a:	4b4d      	ldr	r3, [pc, #308]	; (23c80 <_eeprom_emulator_update_page_mapping+0x150>)
   23b4c:	891b      	ldrh	r3, [r3, #8]
   23b4e:	3b01      	subs	r3, #1
   23b50:	429a      	cmp	r2, r3
   23b52:	d023      	beq.n	23b9c <_eeprom_emulator_update_page_mapping+0x6c>
			continue;
		}

		/* Read in the logical page stored in the current physical page */
		uint16_t logical_page = _eeprom_instance.flash[c].header.logical_page;
   23b54:	4b4a      	ldr	r3, [pc, #296]	; (23c80 <_eeprom_emulator_update_page_mapping+0x150>)
   23b56:	685a      	ldr	r2, [r3, #4]
   23b58:	230e      	movs	r3, #14
   23b5a:	18fb      	adds	r3, r7, r3
   23b5c:	881b      	ldrh	r3, [r3, #0]
   23b5e:	019b      	lsls	r3, r3, #6
   23b60:	18d3      	adds	r3, r2, r3
   23b62:	781a      	ldrb	r2, [r3, #0]
   23b64:	2308      	movs	r3, #8
   23b66:	18fb      	adds	r3, r7, r3
   23b68:	801a      	strh	r2, [r3, #0]

		/* If the logical page number is valid, add it to the mapping */
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
   23b6a:	2308      	movs	r3, #8
   23b6c:	18fb      	adds	r3, r7, r3
   23b6e:	881b      	ldrh	r3, [r3, #0]
   23b70:	2bff      	cmp	r3, #255	; 0xff
   23b72:	d014      	beq.n	23b9e <_eeprom_emulator_update_page_mapping+0x6e>
				(logical_page < _eeprom_instance.logical_pages)) {
   23b74:	4b42      	ldr	r3, [pc, #264]	; (23c80 <_eeprom_emulator_update_page_mapping+0x150>)
   23b76:	7a9b      	ldrb	r3, [r3, #10]
   23b78:	b29b      	uxth	r3, r3
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
   23b7a:	2208      	movs	r2, #8
   23b7c:	18ba      	adds	r2, r7, r2
   23b7e:	8812      	ldrh	r2, [r2, #0]
   23b80:	429a      	cmp	r2, r3
   23b82:	d20c      	bcs.n	23b9e <_eeprom_emulator_update_page_mapping+0x6e>
			_eeprom_instance.page_map[logical_page] = c;
   23b84:	2308      	movs	r3, #8
   23b86:	18fb      	adds	r3, r7, r3
   23b88:	881b      	ldrh	r3, [r3, #0]
   23b8a:	220e      	movs	r2, #14
   23b8c:	18ba      	adds	r2, r7, r2
   23b8e:	8812      	ldrh	r2, [r2, #0]
   23b90:	b2d1      	uxtb	r1, r2
   23b92:	4a3b      	ldr	r2, [pc, #236]	; (23c80 <_eeprom_emulator_update_page_mapping+0x150>)
   23b94:	18d3      	adds	r3, r2, r3
   23b96:	1c0a      	adds	r2, r1, #0
   23b98:	72da      	strb	r2, [r3, #11]
   23b9a:	e000      	b.n	23b9e <_eeprom_emulator_update_page_mapping+0x6e>
			continue;
   23b9c:	46c0      	nop			; (mov r8, r8)
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
   23b9e:	230e      	movs	r3, #14
   23ba0:	18fb      	adds	r3, r7, r3
   23ba2:	881a      	ldrh	r2, [r3, #0]
   23ba4:	230e      	movs	r3, #14
   23ba6:	18fb      	adds	r3, r7, r3
   23ba8:	3201      	adds	r2, #1
   23baa:	801a      	strh	r2, [r3, #0]
   23bac:	4b34      	ldr	r3, [pc, #208]	; (23c80 <_eeprom_emulator_update_page_mapping+0x150>)
   23bae:	891b      	ldrh	r3, [r3, #8]
   23bb0:	220e      	movs	r2, #14
   23bb2:	18ba      	adds	r2, r7, r2
   23bb4:	8812      	ldrh	r2, [r2, #0]
   23bb6:	429a      	cmp	r2, r3
   23bb8:	d3c4      	bcc.n	23b44 <_eeprom_emulator_update_page_mapping+0x14>
		}
	}

	/* Use an invalid page number as the spare row until a valid one has been
	 * found */
	_eeprom_instance.spare_row = EEPROM_INVALID_ROW_NUMBER;
   23bba:	4b31      	ldr	r3, [pc, #196]	; (23c80 <_eeprom_emulator_update_page_mapping+0x150>)
   23bbc:	2287      	movs	r2, #135	; 0x87
   23bbe:	213f      	movs	r1, #63	; 0x3f
   23bc0:	5499      	strb	r1, [r3, r2]

	/* Scan through all physical rows, to find an erased row to use as the
	 * spare */
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
   23bc2:	230c      	movs	r3, #12
   23bc4:	18fb      	adds	r3, r7, r3
   23bc6:	2200      	movs	r2, #0
   23bc8:	801a      	strh	r2, [r3, #0]
   23bca:	e04a      	b.n	23c62 <_eeprom_emulator_update_page_mapping+0x132>
		bool spare_row_found = true;
   23bcc:	230b      	movs	r3, #11
   23bce:	18fb      	adds	r3, r7, r3
   23bd0:	2201      	movs	r2, #1
   23bd2:	701a      	strb	r2, [r3, #0]

		/* Look through pages within the row to see if they are all erased */
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
   23bd4:	230a      	movs	r3, #10
   23bd6:	18fb      	adds	r3, r7, r3
   23bd8:	2200      	movs	r2, #0
   23bda:	701a      	strb	r2, [r3, #0]
   23bdc:	e028      	b.n	23c30 <_eeprom_emulator_update_page_mapping+0x100>
			uint16_t physical_page = (c * NVMCTRL_ROW_PAGES) + c2;
   23bde:	230c      	movs	r3, #12
   23be0:	18fb      	adds	r3, r7, r3
   23be2:	881b      	ldrh	r3, [r3, #0]
   23be4:	009b      	lsls	r3, r3, #2
   23be6:	b299      	uxth	r1, r3
   23be8:	230a      	movs	r3, #10
   23bea:	18fb      	adds	r3, r7, r3
   23bec:	781b      	ldrb	r3, [r3, #0]
   23bee:	b29a      	uxth	r2, r3
   23bf0:	1dbb      	adds	r3, r7, #6
   23bf2:	188a      	adds	r2, r1, r2
   23bf4:	801a      	strh	r2, [r3, #0]

			if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
   23bf6:	1dbb      	adds	r3, r7, #6
   23bf8:	881a      	ldrh	r2, [r3, #0]
   23bfa:	4b21      	ldr	r3, [pc, #132]	; (23c80 <_eeprom_emulator_update_page_mapping+0x150>)
   23bfc:	891b      	ldrh	r3, [r3, #8]
   23bfe:	3b01      	subs	r3, #1
   23c00:	429a      	cmp	r2, r3
   23c02:	d00d      	beq.n	23c20 <_eeprom_emulator_update_page_mapping+0xf0>
				continue;
			}

			if (_eeprom_instance.flash[physical_page].header.logical_page !=
   23c04:	4b1e      	ldr	r3, [pc, #120]	; (23c80 <_eeprom_emulator_update_page_mapping+0x150>)
   23c06:	685a      	ldr	r2, [r3, #4]
   23c08:	1dbb      	adds	r3, r7, #6
   23c0a:	881b      	ldrh	r3, [r3, #0]
   23c0c:	019b      	lsls	r3, r3, #6
   23c0e:	18d3      	adds	r3, r2, r3
   23c10:	781b      	ldrb	r3, [r3, #0]
   23c12:	2bff      	cmp	r3, #255	; 0xff
   23c14:	d005      	beq.n	23c22 <_eeprom_emulator_update_page_mapping+0xf2>
					EEPROM_INVALID_PAGE_NUMBER) {
				spare_row_found = false;
   23c16:	230b      	movs	r3, #11
   23c18:	18fb      	adds	r3, r7, r3
   23c1a:	2200      	movs	r2, #0
   23c1c:	701a      	strb	r2, [r3, #0]
   23c1e:	e000      	b.n	23c22 <_eeprom_emulator_update_page_mapping+0xf2>
				continue;
   23c20:	46c0      	nop			; (mov r8, r8)
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
   23c22:	230a      	movs	r3, #10
   23c24:	18fb      	adds	r3, r7, r3
   23c26:	781a      	ldrb	r2, [r3, #0]
   23c28:	230a      	movs	r3, #10
   23c2a:	18fb      	adds	r3, r7, r3
   23c2c:	3201      	adds	r2, #1
   23c2e:	701a      	strb	r2, [r3, #0]
   23c30:	230a      	movs	r3, #10
   23c32:	18fb      	adds	r3, r7, r3
   23c34:	781b      	ldrb	r3, [r3, #0]
   23c36:	2b03      	cmp	r3, #3
   23c38:	d9d1      	bls.n	23bde <_eeprom_emulator_update_page_mapping+0xae>
			}
		}

		/* If we've now found the spare row, store it and abort the search */
		if (spare_row_found == true) {
   23c3a:	230b      	movs	r3, #11
   23c3c:	18fb      	adds	r3, r7, r3
   23c3e:	781b      	ldrb	r3, [r3, #0]
   23c40:	2b00      	cmp	r3, #0
   23c42:	d007      	beq.n	23c54 <_eeprom_emulator_update_page_mapping+0x124>
			_eeprom_instance.spare_row = c;
   23c44:	230c      	movs	r3, #12
   23c46:	18fb      	adds	r3, r7, r3
   23c48:	881b      	ldrh	r3, [r3, #0]
   23c4a:	b2d9      	uxtb	r1, r3
   23c4c:	4b0c      	ldr	r3, [pc, #48]	; (23c80 <_eeprom_emulator_update_page_mapping+0x150>)
   23c4e:	2287      	movs	r2, #135	; 0x87
   23c50:	5499      	strb	r1, [r3, r2]
			break;
   23c52:	e00f      	b.n	23c74 <_eeprom_emulator_update_page_mapping+0x144>
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
   23c54:	230c      	movs	r3, #12
   23c56:	18fb      	adds	r3, r7, r3
   23c58:	881a      	ldrh	r2, [r3, #0]
   23c5a:	230c      	movs	r3, #12
   23c5c:	18fb      	adds	r3, r7, r3
   23c5e:	3201      	adds	r2, #1
   23c60:	801a      	strh	r2, [r3, #0]
   23c62:	4b07      	ldr	r3, [pc, #28]	; (23c80 <_eeprom_emulator_update_page_mapping+0x150>)
   23c64:	891b      	ldrh	r3, [r3, #8]
   23c66:	089b      	lsrs	r3, r3, #2
   23c68:	b29b      	uxth	r3, r3
   23c6a:	220c      	movs	r2, #12
   23c6c:	18ba      	adds	r2, r7, r2
   23c6e:	8812      	ldrh	r2, [r2, #0]
   23c70:	429a      	cmp	r2, r3
   23c72:	d3ab      	bcc.n	23bcc <_eeprom_emulator_update_page_mapping+0x9c>
		}
	}
}
   23c74:	46c0      	nop			; (mov r8, r8)
   23c76:	46bd      	mov	sp, r7
   23c78:	b004      	add	sp, #16
   23c7a:	bd80      	pop	{r7, pc}
   23c7c:	00023a65 	.word	0x00023a65
   23c80:	2000041c 	.word	0x2000041c

00023c84 <_eeprom_emulator_is_page_free_on_row>:
 * \retval \c false  If the specified row was full and needs an erase
 */
static bool _eeprom_emulator_is_page_free_on_row(
		const uint8_t start_physical_page,
		uint8_t *const free_physical_page)
{
   23c84:	b580      	push	{r7, lr}
   23c86:	b084      	sub	sp, #16
   23c88:	af00      	add	r7, sp, #0
   23c8a:	0002      	movs	r2, r0
   23c8c:	6039      	str	r1, [r7, #0]
   23c8e:	1dfb      	adds	r3, r7, #7
   23c90:	701a      	strb	r2, [r3, #0]
	/* Convert physical page number to a FLASH row and page within the row */
	uint8_t row         = (start_physical_page / NVMCTRL_ROW_PAGES);
   23c92:	230e      	movs	r3, #14
   23c94:	18fb      	adds	r3, r7, r3
   23c96:	1dfa      	adds	r2, r7, #7
   23c98:	7812      	ldrb	r2, [r2, #0]
   23c9a:	0892      	lsrs	r2, r2, #2
   23c9c:	701a      	strb	r2, [r3, #0]
	uint8_t page_in_row = (start_physical_page % NVMCTRL_ROW_PAGES);
   23c9e:	230d      	movs	r3, #13
   23ca0:	18fb      	adds	r3, r7, r3
   23ca2:	1dfa      	adds	r2, r7, #7
   23ca4:	7812      	ldrb	r2, [r2, #0]
   23ca6:	2103      	movs	r1, #3
   23ca8:	400a      	ands	r2, r1
   23caa:	701a      	strb	r2, [r3, #0]

	/* Look in the current row for a page that isn't currently used */
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
   23cac:	230f      	movs	r3, #15
   23cae:	18fb      	adds	r3, r7, r3
   23cb0:	220d      	movs	r2, #13
   23cb2:	18ba      	adds	r2, r7, r2
   23cb4:	7812      	ldrb	r2, [r2, #0]
   23cb6:	701a      	strb	r2, [r3, #0]
   23cb8:	e023      	b.n	23d02 <_eeprom_emulator_is_page_free_on_row+0x7e>
		/* Calculate the page number for the current page being examined */
		uint8_t page = (row * NVMCTRL_ROW_PAGES) + c;
   23cba:	230e      	movs	r3, #14
   23cbc:	18fb      	adds	r3, r7, r3
   23cbe:	781b      	ldrb	r3, [r3, #0]
   23cc0:	009b      	lsls	r3, r3, #2
   23cc2:	b2d9      	uxtb	r1, r3
   23cc4:	230c      	movs	r3, #12
   23cc6:	18fb      	adds	r3, r7, r3
   23cc8:	220f      	movs	r2, #15
   23cca:	18ba      	adds	r2, r7, r2
   23ccc:	7812      	ldrb	r2, [r2, #0]
   23cce:	188a      	adds	r2, r1, r2
   23cd0:	701a      	strb	r2, [r3, #0]

		/* If the page is free, pass it to the caller and exit */
		if (_eeprom_instance.flash[page].header.logical_page ==
   23cd2:	4b11      	ldr	r3, [pc, #68]	; (23d18 <_eeprom_emulator_is_page_free_on_row+0x94>)
   23cd4:	685a      	ldr	r2, [r3, #4]
   23cd6:	230c      	movs	r3, #12
   23cd8:	18fb      	adds	r3, r7, r3
   23cda:	781b      	ldrb	r3, [r3, #0]
   23cdc:	019b      	lsls	r3, r3, #6
   23cde:	18d3      	adds	r3, r2, r3
   23ce0:	781b      	ldrb	r3, [r3, #0]
   23ce2:	2bff      	cmp	r3, #255	; 0xff
   23ce4:	d106      	bne.n	23cf4 <_eeprom_emulator_is_page_free_on_row+0x70>
				EEPROM_INVALID_PAGE_NUMBER) {
			*free_physical_page = page;
   23ce6:	683b      	ldr	r3, [r7, #0]
   23ce8:	220c      	movs	r2, #12
   23cea:	18ba      	adds	r2, r7, r2
   23cec:	7812      	ldrb	r2, [r2, #0]
   23cee:	701a      	strb	r2, [r3, #0]
			return true;
   23cf0:	2301      	movs	r3, #1
   23cf2:	e00c      	b.n	23d0e <_eeprom_emulator_is_page_free_on_row+0x8a>
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
   23cf4:	230f      	movs	r3, #15
   23cf6:	18fb      	adds	r3, r7, r3
   23cf8:	781a      	ldrb	r2, [r3, #0]
   23cfa:	230f      	movs	r3, #15
   23cfc:	18fb      	adds	r3, r7, r3
   23cfe:	3201      	adds	r2, #1
   23d00:	701a      	strb	r2, [r3, #0]
   23d02:	230f      	movs	r3, #15
   23d04:	18fb      	adds	r3, r7, r3
   23d06:	781b      	ldrb	r3, [r3, #0]
   23d08:	2b03      	cmp	r3, #3
   23d0a:	d9d6      	bls.n	23cba <_eeprom_emulator_is_page_free_on_row+0x36>
		}
	}

	/* No free page in the current row was found */
	return false;
   23d0c:	2300      	movs	r3, #0
}
   23d0e:	0018      	movs	r0, r3
   23d10:	46bd      	mov	sp, r7
   23d12:	b004      	add	sp, #16
   23d14:	bd80      	pop	{r7, pc}
   23d16:	46c0      	nop			; (mov r8, r8)
   23d18:	2000041c 	.word	0x2000041c

00023d1c <_eeprom_emulator_move_data_to_spare>:
 */
static enum status_code _eeprom_emulator_move_data_to_spare(
		const uint8_t row_number,
		const uint8_t logical_page,
		const uint8_t *const data)
{
   23d1c:	b580      	push	{r7, lr}
   23d1e:	b086      	sub	sp, #24
   23d20:	af00      	add	r7, sp, #0
   23d22:	603a      	str	r2, [r7, #0]
   23d24:	1dfb      	adds	r3, r7, #7
   23d26:	1c02      	adds	r2, r0, #0
   23d28:	701a      	strb	r2, [r3, #0]
   23d2a:	1dbb      	adds	r3, r7, #6
   23d2c:	1c0a      	adds	r2, r1, #0
   23d2e:	701a      	strb	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   23d30:	2314      	movs	r3, #20
   23d32:	18fb      	adds	r3, r7, r3
   23d34:	2200      	movs	r2, #0
   23d36:	701a      	strb	r2, [r3, #0]
		uint8_t logical_page;
		uint8_t physical_page;
	} page_trans[2];

	const struct _eeprom_page *row_data =
			(struct _eeprom_page *)&_eeprom_instance.flash[row_number * NVMCTRL_ROW_PAGES];
   23d38:	4b69      	ldr	r3, [pc, #420]	; (23ee0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   23d3a:	685b      	ldr	r3, [r3, #4]
   23d3c:	1dfa      	adds	r2, r7, #7
   23d3e:	7812      	ldrb	r2, [r2, #0]
   23d40:	0212      	lsls	r2, r2, #8
	const struct _eeprom_page *row_data =
   23d42:	189b      	adds	r3, r3, r2
   23d44:	613b      	str	r3, [r7, #16]

	/* There should be two logical pages of data in each row, possibly with
	 * multiple revisions (right-most version is the newest). Start by assuming
	 * the left-most two pages contain the newest page revisions. */
	page_trans[0].logical_page  = row_data[0].header.logical_page;
   23d46:	693b      	ldr	r3, [r7, #16]
   23d48:	781a      	ldrb	r2, [r3, #0]
   23d4a:	2308      	movs	r3, #8
   23d4c:	18fb      	adds	r3, r7, r3
   23d4e:	701a      	strb	r2, [r3, #0]
	page_trans[0].physical_page = (row_number * NVMCTRL_ROW_PAGES);
   23d50:	1dfb      	adds	r3, r7, #7
   23d52:	781b      	ldrb	r3, [r3, #0]
   23d54:	009b      	lsls	r3, r3, #2
   23d56:	b2da      	uxtb	r2, r3
   23d58:	2308      	movs	r3, #8
   23d5a:	18fb      	adds	r3, r7, r3
   23d5c:	705a      	strb	r2, [r3, #1]

	page_trans[1].logical_page  = row_data[1].header.logical_page;
   23d5e:	693b      	ldr	r3, [r7, #16]
   23d60:	3340      	adds	r3, #64	; 0x40
   23d62:	781a      	ldrb	r2, [r3, #0]
   23d64:	2308      	movs	r3, #8
   23d66:	18fb      	adds	r3, r7, r3
   23d68:	709a      	strb	r2, [r3, #2]
	page_trans[1].physical_page = (row_number * NVMCTRL_ROW_PAGES) + 1;
   23d6a:	1dfb      	adds	r3, r7, #7
   23d6c:	781b      	ldrb	r3, [r3, #0]
   23d6e:	009b      	lsls	r3, r3, #2
   23d70:	b2db      	uxtb	r3, r3
   23d72:	3301      	adds	r3, #1
   23d74:	b2da      	uxtb	r2, r3
   23d76:	2308      	movs	r3, #8
   23d78:	18fb      	adds	r3, r7, r3
   23d7a:	70da      	strb	r2, [r3, #3]

	/* Look for newer revisions of the two logical pages stored in the row */
	for (uint8_t c = 0; c < 2; c++) {
   23d7c:	2317      	movs	r3, #23
   23d7e:	18fb      	adds	r3, r7, r3
   23d80:	2200      	movs	r2, #0
   23d82:	701a      	strb	r2, [r3, #0]
   23d84:	e03a      	b.n	23dfc <_eeprom_emulator_move_data_to_spare+0xe0>
		/* Look through the remaining pages in the row for any newer revisions */
		for (uint8_t c2 = 2; c2 < NVMCTRL_ROW_PAGES; c2++) {
   23d86:	2316      	movs	r3, #22
   23d88:	18fb      	adds	r3, r7, r3
   23d8a:	2202      	movs	r2, #2
   23d8c:	701a      	strb	r2, [r3, #0]
   23d8e:	e029      	b.n	23de4 <_eeprom_emulator_move_data_to_spare+0xc8>
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
   23d90:	2317      	movs	r3, #23
   23d92:	18fb      	adds	r3, r7, r3
   23d94:	781a      	ldrb	r2, [r3, #0]
   23d96:	2308      	movs	r3, #8
   23d98:	18fb      	adds	r3, r7, r3
   23d9a:	0052      	lsls	r2, r2, #1
   23d9c:	5cd2      	ldrb	r2, [r2, r3]
   23d9e:	2316      	movs	r3, #22
   23da0:	18fb      	adds	r3, r7, r3
   23da2:	781b      	ldrb	r3, [r3, #0]
   23da4:	019b      	lsls	r3, r3, #6
   23da6:	6939      	ldr	r1, [r7, #16]
   23da8:	18cb      	adds	r3, r1, r3
   23daa:	781b      	ldrb	r3, [r3, #0]
   23dac:	429a      	cmp	r2, r3
   23dae:	d112      	bne.n	23dd6 <_eeprom_emulator_move_data_to_spare+0xba>
				page_trans[c].physical_page =
   23db0:	2317      	movs	r3, #23
   23db2:	18fb      	adds	r3, r7, r3
   23db4:	781b      	ldrb	r3, [r3, #0]
						(row_number * NVMCTRL_ROW_PAGES) + c2;
   23db6:	1dfa      	adds	r2, r7, #7
   23db8:	7812      	ldrb	r2, [r2, #0]
   23dba:	0092      	lsls	r2, r2, #2
   23dbc:	b2d1      	uxtb	r1, r2
   23dbe:	2216      	movs	r2, #22
   23dc0:	18ba      	adds	r2, r7, r2
   23dc2:	7812      	ldrb	r2, [r2, #0]
   23dc4:	188a      	adds	r2, r1, r2
   23dc6:	b2d1      	uxtb	r1, r2
				page_trans[c].physical_page =
   23dc8:	2208      	movs	r2, #8
   23dca:	18ba      	adds	r2, r7, r2
   23dcc:	005b      	lsls	r3, r3, #1
   23dce:	18d3      	adds	r3, r2, r3
   23dd0:	3301      	adds	r3, #1
   23dd2:	1c0a      	adds	r2, r1, #0
   23dd4:	701a      	strb	r2, [r3, #0]
		for (uint8_t c2 = 2; c2 < NVMCTRL_ROW_PAGES; c2++) {
   23dd6:	2316      	movs	r3, #22
   23dd8:	18fb      	adds	r3, r7, r3
   23dda:	781a      	ldrb	r2, [r3, #0]
   23ddc:	2316      	movs	r3, #22
   23dde:	18fb      	adds	r3, r7, r3
   23de0:	3201      	adds	r2, #1
   23de2:	701a      	strb	r2, [r3, #0]
   23de4:	2316      	movs	r3, #22
   23de6:	18fb      	adds	r3, r7, r3
   23de8:	781b      	ldrb	r3, [r3, #0]
   23dea:	2b03      	cmp	r3, #3
   23dec:	d9d0      	bls.n	23d90 <_eeprom_emulator_move_data_to_spare+0x74>
	for (uint8_t c = 0; c < 2; c++) {
   23dee:	2317      	movs	r3, #23
   23df0:	18fb      	adds	r3, r7, r3
   23df2:	781a      	ldrb	r2, [r3, #0]
   23df4:	2317      	movs	r3, #23
   23df6:	18fb      	adds	r3, r7, r3
   23df8:	3201      	adds	r2, #1
   23dfa:	701a      	strb	r2, [r3, #0]
   23dfc:	2317      	movs	r3, #23
   23dfe:	18fb      	adds	r3, r7, r3
   23e00:	781b      	ldrb	r3, [r3, #0]
   23e02:	2b01      	cmp	r3, #1
   23e04:	d9bf      	bls.n	23d86 <_eeprom_emulator_move_data_to_spare+0x6a>
			}
		}
	}

	/* Need to move both saved logical pages stored in the same row */
	for (uint8_t c = 0; c < 2; c++) {
   23e06:	2315      	movs	r3, #21
   23e08:	18fb      	adds	r3, r7, r3
   23e0a:	2200      	movs	r2, #0
   23e0c:	701a      	strb	r2, [r3, #0]
   23e0e:	e051      	b.n	23eb4 <_eeprom_emulator_move_data_to_spare+0x198>
		/* Find the physical page index for the new spare row pages */
		uint32_t new_page =
				((_eeprom_instance.spare_row * NVMCTRL_ROW_PAGES) + c);
   23e10:	4b33      	ldr	r3, [pc, #204]	; (23ee0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   23e12:	2287      	movs	r2, #135	; 0x87
   23e14:	5c9b      	ldrb	r3, [r3, r2]
   23e16:	009a      	lsls	r2, r3, #2
   23e18:	2315      	movs	r3, #21
   23e1a:	18fb      	adds	r3, r7, r3
   23e1c:	781b      	ldrb	r3, [r3, #0]
   23e1e:	18d3      	adds	r3, r2, r3
		uint32_t new_page =
   23e20:	60fb      	str	r3, [r7, #12]

		/* Commit any cached data to physical non-volatile memory */
		eeprom_emulator_commit_page_buffer();
   23e22:	4b30      	ldr	r3, [pc, #192]	; (23ee4 <_eeprom_emulator_move_data_to_spare+0x1c8>)
   23e24:	4798      	blx	r3

		/* Check if we we are looking at the page the calling function wishes
		 * to change during the move operation */
		if (logical_page == page_trans[c].logical_page) {
   23e26:	2315      	movs	r3, #21
   23e28:	18fb      	adds	r3, r7, r3
   23e2a:	781a      	ldrb	r2, [r3, #0]
   23e2c:	2308      	movs	r3, #8
   23e2e:	18fb      	adds	r3, r7, r3
   23e30:	0052      	lsls	r2, r2, #1
   23e32:	5cd3      	ldrb	r3, [r2, r3]
   23e34:	1dba      	adds	r2, r7, #6
   23e36:	7812      	ldrb	r2, [r2, #0]
   23e38:	429a      	cmp	r2, r3
   23e3a:	d10d      	bne.n	23e58 <_eeprom_emulator_move_data_to_spare+0x13c>
			/* Fill out new (updated) logical page's header in the cache */
			_eeprom_instance.cache.header.logical_page = logical_page;
   23e3c:	4b28      	ldr	r3, [pc, #160]	; (23ee0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   23e3e:	1dba      	adds	r2, r7, #6
   23e40:	2188      	movs	r1, #136	; 0x88
   23e42:	7812      	ldrb	r2, [r2, #0]
   23e44:	545a      	strb	r2, [r3, r1]

			/* Write data to SRAM cache */
			memcpy(_eeprom_instance.cache.data, data, EEPROM_PAGE_SIZE);
   23e46:	4b26      	ldr	r3, [pc, #152]	; (23ee0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   23e48:	228c      	movs	r2, #140	; 0x8c
   23e4a:	6839      	ldr	r1, [r7, #0]
   23e4c:	189b      	adds	r3, r3, r2
   23e4e:	223c      	movs	r2, #60	; 0x3c
   23e50:	0018      	movs	r0, r3
   23e52:	4b25      	ldr	r3, [pc, #148]	; (23ee8 <_eeprom_emulator_move_data_to_spare+0x1cc>)
   23e54:	4798      	blx	r3
   23e56:	e00e      	b.n	23e76 <_eeprom_emulator_move_data_to_spare+0x15a>
		} else {
			/* Copy existing EEPROM page to cache buffer wholesale */
			_eeprom_emulator_nvm_read_page(
					page_trans[c].physical_page, &_eeprom_instance.cache);
   23e58:	2315      	movs	r3, #21
   23e5a:	18fb      	adds	r3, r7, r3
   23e5c:	781b      	ldrb	r3, [r3, #0]
   23e5e:	2208      	movs	r2, #8
   23e60:	18ba      	adds	r2, r7, r2
   23e62:	005b      	lsls	r3, r3, #1
   23e64:	18d3      	adds	r3, r2, r3
   23e66:	3301      	adds	r3, #1
   23e68:	781b      	ldrb	r3, [r3, #0]
			_eeprom_emulator_nvm_read_page(
   23e6a:	b29b      	uxth	r3, r3
   23e6c:	4a1f      	ldr	r2, [pc, #124]	; (23eec <_eeprom_emulator_move_data_to_spare+0x1d0>)
   23e6e:	0011      	movs	r1, r2
   23e70:	0018      	movs	r0, r3
   23e72:	4b1f      	ldr	r3, [pc, #124]	; (23ef0 <_eeprom_emulator_move_data_to_spare+0x1d4>)
   23e74:	4798      	blx	r3
		}

		/* Fill the physical NVM buffer with the new data so that it can be
		 * quickly committed in the future if needed due to a low power
		 * condition */
		_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
   23e76:	68fb      	ldr	r3, [r7, #12]
   23e78:	b29b      	uxth	r3, r3
   23e7a:	4a1c      	ldr	r2, [pc, #112]	; (23eec <_eeprom_emulator_move_data_to_spare+0x1d0>)
   23e7c:	0011      	movs	r1, r2
   23e7e:	0018      	movs	r0, r3
   23e80:	4b1c      	ldr	r3, [pc, #112]	; (23ef4 <_eeprom_emulator_move_data_to_spare+0x1d8>)
   23e82:	4798      	blx	r3

		/* Update the page map with the new page location and indicate that
		 * the cache now holds new data */
		_eeprom_instance.page_map[page_trans[c].logical_page] = new_page;
   23e84:	2315      	movs	r3, #21
   23e86:	18fb      	adds	r3, r7, r3
   23e88:	781a      	ldrb	r2, [r3, #0]
   23e8a:	2308      	movs	r3, #8
   23e8c:	18fb      	adds	r3, r7, r3
   23e8e:	0052      	lsls	r2, r2, #1
   23e90:	5cd3      	ldrb	r3, [r2, r3]
   23e92:	0019      	movs	r1, r3
   23e94:	68fb      	ldr	r3, [r7, #12]
   23e96:	b2da      	uxtb	r2, r3
   23e98:	4b11      	ldr	r3, [pc, #68]	; (23ee0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   23e9a:	185b      	adds	r3, r3, r1
   23e9c:	72da      	strb	r2, [r3, #11]
		_eeprom_instance.cache_active = true;
   23e9e:	4b10      	ldr	r3, [pc, #64]	; (23ee0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   23ea0:	22c8      	movs	r2, #200	; 0xc8
   23ea2:	2101      	movs	r1, #1
   23ea4:	5499      	strb	r1, [r3, r2]
	for (uint8_t c = 0; c < 2; c++) {
   23ea6:	2315      	movs	r3, #21
   23ea8:	18fb      	adds	r3, r7, r3
   23eaa:	781a      	ldrb	r2, [r3, #0]
   23eac:	2315      	movs	r3, #21
   23eae:	18fb      	adds	r3, r7, r3
   23eb0:	3201      	adds	r2, #1
   23eb2:	701a      	strb	r2, [r3, #0]
   23eb4:	2315      	movs	r3, #21
   23eb6:	18fb      	adds	r3, r7, r3
   23eb8:	781b      	ldrb	r3, [r3, #0]
   23eba:	2b01      	cmp	r3, #1
   23ebc:	d9a8      	bls.n	23e10 <_eeprom_emulator_move_data_to_spare+0xf4>
	}

	/* Erase the row that was moved and set it as the new spare row */
	_eeprom_emulator_nvm_erase_row(row_number);
   23ebe:	1dfb      	adds	r3, r7, #7
   23ec0:	781b      	ldrb	r3, [r3, #0]
   23ec2:	0018      	movs	r0, r3
   23ec4:	4b0c      	ldr	r3, [pc, #48]	; (23ef8 <_eeprom_emulator_move_data_to_spare+0x1dc>)
   23ec6:	4798      	blx	r3

	/* Keep the index of the new spare row */
	_eeprom_instance.spare_row = row_number;
   23ec8:	4b05      	ldr	r3, [pc, #20]	; (23ee0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   23eca:	1dfa      	adds	r2, r7, #7
   23ecc:	2187      	movs	r1, #135	; 0x87
   23ece:	7812      	ldrb	r2, [r2, #0]
   23ed0:	545a      	strb	r2, [r3, r1]

	return error_code;
   23ed2:	2314      	movs	r3, #20
   23ed4:	18fb      	adds	r3, r7, r3
   23ed6:	781b      	ldrb	r3, [r3, #0]
}
   23ed8:	0018      	movs	r0, r3
   23eda:	46bd      	mov	sp, r7
   23edc:	b006      	add	sp, #24
   23ede:	bd80      	pop	{r7, pc}
   23ee0:	2000041c 	.word	0x2000041c
   23ee4:	00024319 	.word	0x00024319
   23ee8:	00029881 	.word	0x00029881
   23eec:	200004a4 	.word	0x200004a4
   23ef0:	00023871 	.word	0x00023871
   23ef4:	000237d5 	.word	0x000237d5
   23ef8:	0002378d 	.word	0x0002378d

00023efc <_eeprom_emulator_create_master_page>:
 *
 * Creates a new master page in emulated EEPROM, giving information on the
 * emulator used to store the EEPROM data.
 */
static void _eeprom_emulator_create_master_page(void)
{
   23efc:	b590      	push	{r4, r7, lr}
   23efe:	b095      	sub	sp, #84	; 0x54
   23f00:	af00      	add	r7, sp, #0
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
   23f02:	2340      	movs	r3, #64	; 0x40
   23f04:	18fb      	adds	r3, r7, r3
   23f06:	4a29      	ldr	r2, [pc, #164]	; (23fac <_eeprom_emulator_create_master_page+0xb0>)
   23f08:	ca13      	ldmia	r2!, {r0, r1, r4}
   23f0a:	c313      	stmia	r3!, {r0, r1, r4}

	struct _eeprom_master_page master_page;
	memset(&master_page, 0xFF, sizeof(master_page));
   23f0c:	003b      	movs	r3, r7
   23f0e:	2240      	movs	r2, #64	; 0x40
   23f10:	21ff      	movs	r1, #255	; 0xff
   23f12:	0018      	movs	r0, r3
   23f14:	4b26      	ldr	r3, [pc, #152]	; (23fb0 <_eeprom_emulator_create_master_page+0xb4>)
   23f16:	4798      	blx	r3

	/* Fill out the magic key header to indicate an initialized master page */
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   23f18:	234f      	movs	r3, #79	; 0x4f
   23f1a:	18fb      	adds	r3, r7, r3
   23f1c:	2200      	movs	r2, #0
   23f1e:	701a      	strb	r2, [r3, #0]
   23f20:	e013      	b.n	23f4a <_eeprom_emulator_create_master_page+0x4e>
		master_page.magic_key[c] = magic_key[c];
   23f22:	234f      	movs	r3, #79	; 0x4f
   23f24:	18fb      	adds	r3, r7, r3
   23f26:	781a      	ldrb	r2, [r3, #0]
   23f28:	234f      	movs	r3, #79	; 0x4f
   23f2a:	18fb      	adds	r3, r7, r3
   23f2c:	7819      	ldrb	r1, [r3, #0]
   23f2e:	2340      	movs	r3, #64	; 0x40
   23f30:	18fb      	adds	r3, r7, r3
   23f32:	0089      	lsls	r1, r1, #2
   23f34:	58c9      	ldr	r1, [r1, r3]
   23f36:	003b      	movs	r3, r7
   23f38:	0092      	lsls	r2, r2, #2
   23f3a:	50d1      	str	r1, [r2, r3]
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   23f3c:	234f      	movs	r3, #79	; 0x4f
   23f3e:	18fb      	adds	r3, r7, r3
   23f40:	781a      	ldrb	r2, [r3, #0]
   23f42:	234f      	movs	r3, #79	; 0x4f
   23f44:	18fb      	adds	r3, r7, r3
   23f46:	3201      	adds	r2, #1
   23f48:	701a      	strb	r2, [r3, #0]
   23f4a:	234f      	movs	r3, #79	; 0x4f
   23f4c:	18fb      	adds	r3, r7, r3
   23f4e:	781b      	ldrb	r3, [r3, #0]
   23f50:	2b02      	cmp	r3, #2
   23f52:	d9e6      	bls.n	23f22 <_eeprom_emulator_create_master_page+0x26>
	}

	/* Update master header with version information of this emulator */
	master_page.emulator_id   = EEPROM_EMULATOR_ID;
   23f54:	003b      	movs	r3, r7
   23f56:	2201      	movs	r2, #1
   23f58:	73da      	strb	r2, [r3, #15]
	master_page.major_version = EEPROM_MAJOR_VERSION;
   23f5a:	003b      	movs	r3, r7
   23f5c:	2201      	movs	r2, #1
   23f5e:	731a      	strb	r2, [r3, #12]
	master_page.minor_version = EEPROM_MINOR_VERSION;
   23f60:	003b      	movs	r3, r7
   23f62:	2200      	movs	r2, #0
   23f64:	735a      	strb	r2, [r3, #13]
	master_page.revision      = EEPROM_REVISION;
   23f66:	003b      	movs	r3, r7
   23f68:	2200      	movs	r2, #0
   23f6a:	739a      	strb	r2, [r3, #14]

	_eeprom_emulator_nvm_erase_row(
			EEPROM_MASTER_PAGE_NUMBER / NVMCTRL_ROW_PAGES);
   23f6c:	4b11      	ldr	r3, [pc, #68]	; (23fb4 <_eeprom_emulator_create_master_page+0xb8>)
   23f6e:	891b      	ldrh	r3, [r3, #8]
   23f70:	3b01      	subs	r3, #1
   23f72:	2b00      	cmp	r3, #0
   23f74:	da00      	bge.n	23f78 <_eeprom_emulator_create_master_page+0x7c>
   23f76:	3303      	adds	r3, #3
   23f78:	109b      	asrs	r3, r3, #2
	_eeprom_emulator_nvm_erase_row(
   23f7a:	b2db      	uxtb	r3, r3
   23f7c:	0018      	movs	r0, r3
   23f7e:	4b0e      	ldr	r3, [pc, #56]	; (23fb8 <_eeprom_emulator_create_master_page+0xbc>)
   23f80:	4798      	blx	r3

	/* Write the new master page data to physical memory */
	_eeprom_emulator_nvm_fill_cache(EEPROM_MASTER_PAGE_NUMBER, &master_page);
   23f82:	4b0c      	ldr	r3, [pc, #48]	; (23fb4 <_eeprom_emulator_create_master_page+0xb8>)
   23f84:	891b      	ldrh	r3, [r3, #8]
   23f86:	3b01      	subs	r3, #1
   23f88:	b29b      	uxth	r3, r3
   23f8a:	003a      	movs	r2, r7
   23f8c:	0011      	movs	r1, r2
   23f8e:	0018      	movs	r0, r3
   23f90:	4b0a      	ldr	r3, [pc, #40]	; (23fbc <_eeprom_emulator_create_master_page+0xc0>)
   23f92:	4798      	blx	r3
	_eeprom_emulator_nvm_commit_cache(EEPROM_MASTER_PAGE_NUMBER);
   23f94:	4b07      	ldr	r3, [pc, #28]	; (23fb4 <_eeprom_emulator_create_master_page+0xb8>)
   23f96:	891b      	ldrh	r3, [r3, #8]
   23f98:	3b01      	subs	r3, #1
   23f9a:	b29b      	uxth	r3, r3
   23f9c:	0018      	movs	r0, r3
   23f9e:	4b08      	ldr	r3, [pc, #32]	; (23fc0 <_eeprom_emulator_create_master_page+0xc4>)
   23fa0:	4798      	blx	r3
}
   23fa2:	46c0      	nop			; (mov r8, r8)
   23fa4:	46bd      	mov	sp, r7
   23fa6:	b015      	add	sp, #84	; 0x54
   23fa8:	bd90      	pop	{r4, r7, pc}
   23faa:	46c0      	nop			; (mov r8, r8)
   23fac:	0002b7b8 	.word	0x0002b7b8
   23fb0:	000298b7 	.word	0x000298b7
   23fb4:	2000041c 	.word	0x2000041c
   23fb8:	0002378d 	.word	0x0002378d
   23fbc:	000237d5 	.word	0x000237d5
   23fc0:	00023825 	.word	0x00023825

00023fc4 <_eeprom_emulator_verify_master_page>:
 * \retval STATUS_ERR_BAD_FORMAT  Master page contents was invalid
 * \retval STATUS_ERR_IO          Master page indicates the data is incompatible
 *                                with this version of the EEPROM emulator
 */
static enum status_code _eeprom_emulator_verify_master_page(void)
{
   23fc4:	b590      	push	{r4, r7, lr}
   23fc6:	b095      	sub	sp, #84	; 0x54
   23fc8:	af00      	add	r7, sp, #0
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
   23fca:	2340      	movs	r3, #64	; 0x40
   23fcc:	18fb      	adds	r3, r7, r3
   23fce:	4a22      	ldr	r2, [pc, #136]	; (24058 <_eeprom_emulator_verify_master_page+0x94>)
   23fd0:	ca13      	ldmia	r2!, {r0, r1, r4}
   23fd2:	c313      	stmia	r3!, {r0, r1, r4}
	struct _eeprom_master_page master_page;

	/* Copy the master page to the RAM buffer so that it can be inspected */
	_eeprom_emulator_nvm_read_page(EEPROM_MASTER_PAGE_NUMBER, &master_page);
   23fd4:	4b21      	ldr	r3, [pc, #132]	; (2405c <_eeprom_emulator_verify_master_page+0x98>)
   23fd6:	891b      	ldrh	r3, [r3, #8]
   23fd8:	3b01      	subs	r3, #1
   23fda:	b29b      	uxth	r3, r3
   23fdc:	003a      	movs	r2, r7
   23fde:	0011      	movs	r1, r2
   23fe0:	0018      	movs	r0, r3
   23fe2:	4b1f      	ldr	r3, [pc, #124]	; (24060 <_eeprom_emulator_verify_master_page+0x9c>)
   23fe4:	4798      	blx	r3

	/* Verify magic key is correct in the master page header */
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   23fe6:	234f      	movs	r3, #79	; 0x4f
   23fe8:	18fb      	adds	r3, r7, r3
   23fea:	2200      	movs	r2, #0
   23fec:	701a      	strb	r2, [r3, #0]
   23fee:	e017      	b.n	24020 <_eeprom_emulator_verify_master_page+0x5c>
		if (master_page.magic_key[c] != magic_key[c]) {
   23ff0:	234f      	movs	r3, #79	; 0x4f
   23ff2:	18fb      	adds	r3, r7, r3
   23ff4:	781a      	ldrb	r2, [r3, #0]
   23ff6:	003b      	movs	r3, r7
   23ff8:	0092      	lsls	r2, r2, #2
   23ffa:	58d2      	ldr	r2, [r2, r3]
   23ffc:	234f      	movs	r3, #79	; 0x4f
   23ffe:	18fb      	adds	r3, r7, r3
   24000:	7819      	ldrb	r1, [r3, #0]
   24002:	2340      	movs	r3, #64	; 0x40
   24004:	18fb      	adds	r3, r7, r3
   24006:	0089      	lsls	r1, r1, #2
   24008:	58cb      	ldr	r3, [r1, r3]
   2400a:	429a      	cmp	r2, r3
   2400c:	d001      	beq.n	24012 <_eeprom_emulator_verify_master_page+0x4e>
			return STATUS_ERR_BAD_FORMAT;
   2400e:	231a      	movs	r3, #26
   24010:	e01e      	b.n	24050 <_eeprom_emulator_verify_master_page+0x8c>
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   24012:	234f      	movs	r3, #79	; 0x4f
   24014:	18fb      	adds	r3, r7, r3
   24016:	781a      	ldrb	r2, [r3, #0]
   24018:	234f      	movs	r3, #79	; 0x4f
   2401a:	18fb      	adds	r3, r7, r3
   2401c:	3201      	adds	r2, #1
   2401e:	701a      	strb	r2, [r3, #0]
   24020:	234f      	movs	r3, #79	; 0x4f
   24022:	18fb      	adds	r3, r7, r3
   24024:	781b      	ldrb	r3, [r3, #0]
   24026:	2b02      	cmp	r3, #2
   24028:	d9e2      	bls.n	23ff0 <_eeprom_emulator_verify_master_page+0x2c>
		}
	}

	/* Verify emulator ID in header to ensure the same scheme is used */
	if (master_page.emulator_id   != EEPROM_EMULATOR_ID) {
   2402a:	003b      	movs	r3, r7
   2402c:	7bdb      	ldrb	r3, [r3, #15]
   2402e:	2b01      	cmp	r3, #1
   24030:	d001      	beq.n	24036 <_eeprom_emulator_verify_master_page+0x72>
		return STATUS_ERR_IO;
   24032:	2310      	movs	r3, #16
   24034:	e00c      	b.n	24050 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Verify major version in header to ensure the same version is used */
	if (master_page.major_version != EEPROM_MAJOR_VERSION) {
   24036:	003b      	movs	r3, r7
   24038:	7b1b      	ldrb	r3, [r3, #12]
   2403a:	2b01      	cmp	r3, #1
   2403c:	d001      	beq.n	24042 <_eeprom_emulator_verify_master_page+0x7e>
		return STATUS_ERR_IO;
   2403e:	2310      	movs	r3, #16
   24040:	e006      	b.n	24050 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Verify minor version in header to ensure the same version is used */
	if (master_page.minor_version != EEPROM_MINOR_VERSION) {
   24042:	003b      	movs	r3, r7
   24044:	7b5b      	ldrb	r3, [r3, #13]
   24046:	2b00      	cmp	r3, #0
   24048:	d001      	beq.n	2404e <_eeprom_emulator_verify_master_page+0x8a>
		return STATUS_ERR_IO;
   2404a:	2310      	movs	r3, #16
   2404c:	e000      	b.n	24050 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Don't verify revision number - same major/minor is considered enough
	 * to ensure the stored data is compatible. */

	return STATUS_OK;
   2404e:	2300      	movs	r3, #0
}
   24050:	0018      	movs	r0, r3
   24052:	46bd      	mov	sp, r7
   24054:	b015      	add	sp, #84	; 0x54
   24056:	bd90      	pop	{r4, r7, pc}
   24058:	0002b7b8 	.word	0x0002b7b8
   2405c:	2000041c 	.word	0x2000041c
   24060:	00023871 	.word	0x00023871

00024064 <eeprom_emulator_init>:
 *                                formatted
 * \retval STATUS_ERR_IO          EEPROM data is incompatible with this version
 *                                or scheme of the EEPROM emulator
 */
enum status_code eeprom_emulator_init(void)
{
   24064:	b590      	push	{r4, r7, lr}
   24066:	b087      	sub	sp, #28
   24068:	af00      	add	r7, sp, #0
	enum status_code error_code = STATUS_OK;
   2406a:	2317      	movs	r3, #23
   2406c:	18fb      	adds	r3, r7, r3
   2406e:	2200      	movs	r2, #0
   24070:	701a      	strb	r2, [r3, #0]
	struct nvm_parameters parameters;

	/* Retrieve the NVM controller configuration - enable manual page writing
	 * mode so that the emulator has exclusive control over page writes to
	 * allow for caching */
	nvm_get_config_defaults(&config);
   24072:	2310      	movs	r3, #16
   24074:	18fb      	adds	r3, r7, r3
   24076:	0018      	movs	r0, r3
   24078:	4b2e      	ldr	r3, [pc, #184]	; (24134 <eeprom_emulator_init+0xd0>)
   2407a:	4798      	blx	r3
	config.manual_page_write = true;
   2407c:	2310      	movs	r3, #16
   2407e:	18fb      	adds	r3, r7, r3
   24080:	2201      	movs	r2, #1
   24082:	705a      	strb	r2, [r3, #1]

	/* Apply new NVM configuration */
	do {
		error_code = nvm_set_config(&config);
   24084:	2317      	movs	r3, #23
   24086:	18fc      	adds	r4, r7, r3
   24088:	2310      	movs	r3, #16
   2408a:	18fb      	adds	r3, r7, r3
   2408c:	0018      	movs	r0, r3
   2408e:	4b2a      	ldr	r3, [pc, #168]	; (24138 <eeprom_emulator_init+0xd4>)
   24090:	4798      	blx	r3
   24092:	0003      	movs	r3, r0
   24094:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   24096:	2317      	movs	r3, #23
   24098:	18fb      	adds	r3, r7, r3
   2409a:	781b      	ldrb	r3, [r3, #0]
   2409c:	2b05      	cmp	r3, #5
   2409e:	d0f1      	beq.n	24084 <eeprom_emulator_init+0x20>

	/* Get the NVM controller configuration parameters */
	nvm_get_parameters(&parameters);
   240a0:	1d3b      	adds	r3, r7, #4
   240a2:	0018      	movs	r0, r3
   240a4:	4b25      	ldr	r3, [pc, #148]	; (2413c <eeprom_emulator_init+0xd8>)
   240a6:	4798      	blx	r3

	/* Ensure the device fuses are configured for at least one master page row,
	 * one user EEPROM data row and one spare row */
	if (parameters.eeprom_number_of_pages < (3 * NVMCTRL_ROW_PAGES)) {
   240a8:	1d3b      	adds	r3, r7, #4
   240aa:	685b      	ldr	r3, [r3, #4]
   240ac:	2b0b      	cmp	r3, #11
   240ae:	d801      	bhi.n	240b4 <eeprom_emulator_init+0x50>
		return STATUS_ERR_NO_MEMORY;
   240b0:	2316      	movs	r3, #22
   240b2:	e03b      	b.n	2412c <eeprom_emulator_init+0xc8>
	 *  - One row is reserved for the master page
	 *  - One row is reserved for the spare row
	 *  - Two logical pages can be stored in one physical row
	 */
	_eeprom_instance.physical_pages =
			parameters.eeprom_number_of_pages;
   240b4:	1d3b      	adds	r3, r7, #4
   240b6:	685b      	ldr	r3, [r3, #4]
	_eeprom_instance.physical_pages =
   240b8:	b29a      	uxth	r2, r3
   240ba:	4b21      	ldr	r3, [pc, #132]	; (24140 <eeprom_emulator_init+0xdc>)
   240bc:	811a      	strh	r2, [r3, #8]
	_eeprom_instance.logical_pages  =
			(parameters.eeprom_number_of_pages - (2 * NVMCTRL_ROW_PAGES)) / 2;
   240be:	1d3b      	adds	r3, r7, #4
   240c0:	685b      	ldr	r3, [r3, #4]
   240c2:	3b08      	subs	r3, #8
   240c4:	085b      	lsrs	r3, r3, #1
	_eeprom_instance.logical_pages  =
   240c6:	b2da      	uxtb	r2, r3
   240c8:	4b1d      	ldr	r3, [pc, #116]	; (24140 <eeprom_emulator_init+0xdc>)
   240ca:	729a      	strb	r2, [r3, #10]

	/* Configure the EEPROM instance starting physical address in FLASH and
	 * pre-compute the index of the first page in FLASH used for EEPROM */
	_eeprom_instance.flash =
			(void*)(FLASH_SIZE -
			((uint32_t)_eeprom_instance.physical_pages * NVMCTRL_PAGE_SIZE));
   240cc:	4b1c      	ldr	r3, [pc, #112]	; (24140 <eeprom_emulator_init+0xdc>)
   240ce:	891b      	ldrh	r3, [r3, #8]
   240d0:	001a      	movs	r2, r3
			(void*)(FLASH_SIZE -
   240d2:	0013      	movs	r3, r2
   240d4:	069b      	lsls	r3, r3, #26
   240d6:	1a9b      	subs	r3, r3, r2
   240d8:	019b      	lsls	r3, r3, #6
   240da:	2280      	movs	r2, #128	; 0x80
   240dc:	02d2      	lsls	r2, r2, #11
   240de:	4694      	mov	ip, r2
   240e0:	4463      	add	r3, ip
   240e2:	001a      	movs	r2, r3
	_eeprom_instance.flash =
   240e4:	4b16      	ldr	r3, [pc, #88]	; (24140 <eeprom_emulator_init+0xdc>)
   240e6:	605a      	str	r2, [r3, #4]

	/* Clear EEPROM page write cache on initialization */
	_eeprom_instance.cache_active = false;
   240e8:	4b15      	ldr	r3, [pc, #84]	; (24140 <eeprom_emulator_init+0xdc>)
   240ea:	22c8      	movs	r2, #200	; 0xc8
   240ec:	2100      	movs	r1, #0
   240ee:	5499      	strb	r1, [r3, r2]

	/* Scan physical memory and re-create logical to physical page mapping
	 * table to locate logical pages of EEPROM data in physical FLASH */
	_eeprom_emulator_update_page_mapping();
   240f0:	4b14      	ldr	r3, [pc, #80]	; (24144 <eeprom_emulator_init+0xe0>)
   240f2:	4798      	blx	r3

	/* Could not find spare row - abort as the memory appears to be corrupt */
	if (_eeprom_instance.spare_row == EEPROM_INVALID_ROW_NUMBER) {
   240f4:	4b12      	ldr	r3, [pc, #72]	; (24140 <eeprom_emulator_init+0xdc>)
   240f6:	2287      	movs	r2, #135	; 0x87
   240f8:	5c9b      	ldrb	r3, [r3, r2]
   240fa:	2b3f      	cmp	r3, #63	; 0x3f
   240fc:	d101      	bne.n	24102 <eeprom_emulator_init+0x9e>
		return STATUS_ERR_BAD_FORMAT;
   240fe:	231a      	movs	r3, #26
   24100:	e014      	b.n	2412c <eeprom_emulator_init+0xc8>
	}

	/* Verify that the master page contains valid data for this service */
	error_code = _eeprom_emulator_verify_master_page();
   24102:	2317      	movs	r3, #23
   24104:	18fc      	adds	r4, r7, r3
   24106:	4b10      	ldr	r3, [pc, #64]	; (24148 <eeprom_emulator_init+0xe4>)
   24108:	4798      	blx	r3
   2410a:	0003      	movs	r3, r0
   2410c:	7023      	strb	r3, [r4, #0]
	if (error_code != STATUS_OK) {
   2410e:	2317      	movs	r3, #23
   24110:	18fb      	adds	r3, r7, r3
   24112:	781b      	ldrb	r3, [r3, #0]
   24114:	2b00      	cmp	r3, #0
   24116:	d003      	beq.n	24120 <eeprom_emulator_init+0xbc>
		return error_code;
   24118:	2317      	movs	r3, #23
   2411a:	18fb      	adds	r3, r7, r3
   2411c:	781b      	ldrb	r3, [r3, #0]
   2411e:	e005      	b.n	2412c <eeprom_emulator_init+0xc8>
	}

	/* Mark initialization as complete */
	_eeprom_instance.initialized = true;
   24120:	4b07      	ldr	r3, [pc, #28]	; (24140 <eeprom_emulator_init+0xdc>)
   24122:	2201      	movs	r2, #1
   24124:	701a      	strb	r2, [r3, #0]

	return error_code;
   24126:	2317      	movs	r3, #23
   24128:	18fb      	adds	r3, r7, r3
   2412a:	781b      	ldrb	r3, [r3, #0]
}
   2412c:	0018      	movs	r0, r3
   2412e:	46bd      	mov	sp, r7
   24130:	b007      	add	sp, #28
   24132:	bd90      	pop	{r4, r7, pc}
   24134:	00023751 	.word	0x00023751
   24138:	0002312d 	.word	0x0002312d
   2413c:	0002360d 	.word	0x0002360d
   24140:	2000041c 	.word	0x2000041c
   24144:	00023b31 	.word	0x00023b31
   24148:	00023fc5 	.word	0x00023fc5

0002414c <eeprom_emulator_erase_memory>:
 *
 * Erases and re-initializes the emulated EEPROM memory space, destroying any
 * existing data.
 */
void eeprom_emulator_erase_memory(void)
{
   2414c:	b580      	push	{r7, lr}
   2414e:	af00      	add	r7, sp, #0
	/* Create new EEPROM memory block in EEPROM emulation section */
	_eeprom_emulator_format_memory();
   24150:	4b04      	ldr	r3, [pc, #16]	; (24164 <eeprom_emulator_erase_memory+0x18>)
   24152:	4798      	blx	r3

	/* Write EEPROM emulation master block */
	_eeprom_emulator_create_master_page();
   24154:	4b04      	ldr	r3, [pc, #16]	; (24168 <eeprom_emulator_erase_memory+0x1c>)
   24156:	4798      	blx	r3

	/* Map the newly created EEPROM memory block */
	_eeprom_emulator_update_page_mapping();
   24158:	4b04      	ldr	r3, [pc, #16]	; (2416c <eeprom_emulator_erase_memory+0x20>)
   2415a:	4798      	blx	r3
}
   2415c:	46c0      	nop			; (mov r8, r8)
   2415e:	46bd      	mov	sp, r7
   24160:	bd80      	pop	{r7, pc}
   24162:	46c0      	nop			; (mov r8, r8)
   24164:	000238c1 	.word	0x000238c1
   24168:	00023efd 	.word	0x00023efd
   2416c:	00023b31 	.word	0x00023b31

00024170 <eeprom_emulator_write_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_write_page(
		const uint8_t logical_page,
		const uint8_t *const data)
{
   24170:	b590      	push	{r4, r7, lr}
   24172:	b085      	sub	sp, #20
   24174:	af00      	add	r7, sp, #0
   24176:	0002      	movs	r2, r0
   24178:	6039      	str	r1, [r7, #0]
   2417a:	1dfb      	adds	r3, r7, #7
   2417c:	701a      	strb	r2, [r3, #0]
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
   2417e:	4b38      	ldr	r3, [pc, #224]	; (24260 <eeprom_emulator_write_page+0xf0>)
   24180:	781b      	ldrb	r3, [r3, #0]
   24182:	2201      	movs	r2, #1
   24184:	4053      	eors	r3, r2
   24186:	b2db      	uxtb	r3, r3
   24188:	2b00      	cmp	r3, #0
   2418a:	d001      	beq.n	24190 <eeprom_emulator_write_page+0x20>
		return STATUS_ERR_NOT_INITIALIZED;
   2418c:	231f      	movs	r3, #31
   2418e:	e063      	b.n	24258 <eeprom_emulator_write_page+0xe8>
	}

	/* Make sure the write address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
   24190:	4b33      	ldr	r3, [pc, #204]	; (24260 <eeprom_emulator_write_page+0xf0>)
   24192:	7a9b      	ldrb	r3, [r3, #10]
   24194:	1dfa      	adds	r2, r7, #7
   24196:	7812      	ldrb	r2, [r2, #0]
   24198:	429a      	cmp	r2, r3
   2419a:	d301      	bcc.n	241a0 <eeprom_emulator_write_page+0x30>
		return STATUS_ERR_BAD_ADDRESS;
   2419c:	2318      	movs	r3, #24
   2419e:	e05b      	b.n	24258 <eeprom_emulator_write_page+0xe8>
	}

	/* Check if the cache is active and the currently cached page is not the
	 * page that is being written (if not, we need to commit and cache the new
	 * page) */
	if ((_eeprom_instance.cache_active == true) &&
   241a0:	4b2f      	ldr	r3, [pc, #188]	; (24260 <eeprom_emulator_write_page+0xf0>)
   241a2:	22c8      	movs	r2, #200	; 0xc8
   241a4:	5c9b      	ldrb	r3, [r3, r2]
   241a6:	2b00      	cmp	r3, #0
   241a8:	d008      	beq.n	241bc <eeprom_emulator_write_page+0x4c>
			(_eeprom_instance.cache.header.logical_page != logical_page)) {
   241aa:	4b2d      	ldr	r3, [pc, #180]	; (24260 <eeprom_emulator_write_page+0xf0>)
   241ac:	2288      	movs	r2, #136	; 0x88
   241ae:	5c9b      	ldrb	r3, [r3, r2]
	if ((_eeprom_instance.cache_active == true) &&
   241b0:	1dfa      	adds	r2, r7, #7
   241b2:	7812      	ldrb	r2, [r2, #0]
   241b4:	429a      	cmp	r2, r3
   241b6:	d001      	beq.n	241bc <eeprom_emulator_write_page+0x4c>
		/* Commit the currently cached data buffer to non-volatile memory */
		eeprom_emulator_commit_page_buffer();
   241b8:	4b2a      	ldr	r3, [pc, #168]	; (24264 <eeprom_emulator_write_page+0xf4>)
   241ba:	4798      	blx	r3
	}

	/* Check if we have space in the current page location's physical row for
	 * a new version, and if so get the new page index */
	uint8_t new_page = 0;
   241bc:	230e      	movs	r3, #14
   241be:	18fb      	adds	r3, r7, r3
   241c0:	2200      	movs	r2, #0
   241c2:	701a      	strb	r2, [r3, #0]
	bool page_spare  = _eeprom_emulator_is_page_free_on_row(
   241c4:	1dfb      	adds	r3, r7, #7
   241c6:	781b      	ldrb	r3, [r3, #0]
   241c8:	4a25      	ldr	r2, [pc, #148]	; (24260 <eeprom_emulator_write_page+0xf0>)
   241ca:	18d3      	adds	r3, r2, r3
   241cc:	7adb      	ldrb	r3, [r3, #11]
   241ce:	220f      	movs	r2, #15
   241d0:	18bc      	adds	r4, r7, r2
   241d2:	220e      	movs	r2, #14
   241d4:	18ba      	adds	r2, r7, r2
   241d6:	0011      	movs	r1, r2
   241d8:	0018      	movs	r0, r3
   241da:	4b23      	ldr	r3, [pc, #140]	; (24268 <eeprom_emulator_write_page+0xf8>)
   241dc:	4798      	blx	r3
   241de:	0003      	movs	r3, r0
   241e0:	7023      	strb	r3, [r4, #0]
			_eeprom_instance.page_map[logical_page], &new_page);

	/* Check if the current row is full, and we need to swap it out with a
	 * spare row */
	if (page_spare == false) {
   241e2:	230f      	movs	r3, #15
   241e4:	18fb      	adds	r3, r7, r3
   241e6:	781b      	ldrb	r3, [r3, #0]
   241e8:	2201      	movs	r2, #1
   241ea:	4053      	eors	r3, r2
   241ec:	b2db      	uxtb	r3, r3
   241ee:	2b00      	cmp	r3, #0
   241f0:	d00e      	beq.n	24210 <eeprom_emulator_write_page+0xa0>
		/* Move the other page we aren't writing that is stored in the same
		 * page to the new row, and replace the old current page with the
		 * new page contents (cache is updated to match) */
		_eeprom_emulator_move_data_to_spare(
				_eeprom_instance.page_map[logical_page] / NVMCTRL_ROW_PAGES,
   241f2:	1dfb      	adds	r3, r7, #7
   241f4:	781b      	ldrb	r3, [r3, #0]
   241f6:	4a1a      	ldr	r2, [pc, #104]	; (24260 <eeprom_emulator_write_page+0xf0>)
   241f8:	18d3      	adds	r3, r2, r3
   241fa:	7adb      	ldrb	r3, [r3, #11]
		_eeprom_emulator_move_data_to_spare(
   241fc:	089b      	lsrs	r3, r3, #2
   241fe:	b2d8      	uxtb	r0, r3
   24200:	683a      	ldr	r2, [r7, #0]
   24202:	1dfb      	adds	r3, r7, #7
   24204:	781b      	ldrb	r3, [r3, #0]
   24206:	0019      	movs	r1, r3
   24208:	4b18      	ldr	r3, [pc, #96]	; (2426c <eeprom_emulator_write_page+0xfc>)
   2420a:	4798      	blx	r3
				logical_page,
				data);

		/* New data is now written and the cache is updated, exit */
		return STATUS_OK;
   2420c:	2300      	movs	r3, #0
   2420e:	e023      	b.n	24258 <eeprom_emulator_write_page+0xe8>
	}

	/* Update the page cache header section with the new page header */
	_eeprom_instance.cache.header.logical_page = logical_page;
   24210:	4b13      	ldr	r3, [pc, #76]	; (24260 <eeprom_emulator_write_page+0xf0>)
   24212:	1dfa      	adds	r2, r7, #7
   24214:	2188      	movs	r1, #136	; 0x88
   24216:	7812      	ldrb	r2, [r2, #0]
   24218:	545a      	strb	r2, [r3, r1]

	/* Update the page cache contents with the new data */
	memcpy(&_eeprom_instance.cache.data,
   2421a:	4b11      	ldr	r3, [pc, #68]	; (24260 <eeprom_emulator_write_page+0xf0>)
   2421c:	228c      	movs	r2, #140	; 0x8c
   2421e:	6839      	ldr	r1, [r7, #0]
   24220:	189b      	adds	r3, r3, r2
   24222:	223c      	movs	r2, #60	; 0x3c
   24224:	0018      	movs	r0, r3
   24226:	4b12      	ldr	r3, [pc, #72]	; (24270 <eeprom_emulator_write_page+0x100>)
   24228:	4798      	blx	r3
			data,
			EEPROM_PAGE_SIZE);

	/* Fill the physical NVM buffer with the new data so that it can be quickly
	 * committed in the future if needed due to a low power condition */
	_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
   2422a:	230e      	movs	r3, #14
   2422c:	18fb      	adds	r3, r7, r3
   2422e:	781b      	ldrb	r3, [r3, #0]
   24230:	b29b      	uxth	r3, r3
   24232:	4a10      	ldr	r2, [pc, #64]	; (24274 <eeprom_emulator_write_page+0x104>)
   24234:	0011      	movs	r1, r2
   24236:	0018      	movs	r0, r3
   24238:	4b0f      	ldr	r3, [pc, #60]	; (24278 <eeprom_emulator_write_page+0x108>)
   2423a:	4798      	blx	r3

	/* Update the cache parameters and mark the cache as active */
	_eeprom_instance.page_map[logical_page] = new_page;
   2423c:	1dfb      	adds	r3, r7, #7
   2423e:	781b      	ldrb	r3, [r3, #0]
   24240:	220e      	movs	r2, #14
   24242:	18ba      	adds	r2, r7, r2
   24244:	7811      	ldrb	r1, [r2, #0]
   24246:	4a06      	ldr	r2, [pc, #24]	; (24260 <eeprom_emulator_write_page+0xf0>)
   24248:	18d3      	adds	r3, r2, r3
   2424a:	1c0a      	adds	r2, r1, #0
   2424c:	72da      	strb	r2, [r3, #11]
	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active           = true;
   2424e:	4b04      	ldr	r3, [pc, #16]	; (24260 <eeprom_emulator_write_page+0xf0>)
   24250:	22c8      	movs	r2, #200	; 0xc8
   24252:	2101      	movs	r1, #1
   24254:	5499      	strb	r1, [r3, r2]

	return STATUS_OK;
   24256:	2300      	movs	r3, #0
}
   24258:	0018      	movs	r0, r3
   2425a:	46bd      	mov	sp, r7
   2425c:	b005      	add	sp, #20
   2425e:	bd90      	pop	{r4, r7, pc}
   24260:	2000041c 	.word	0x2000041c
   24264:	00024319 	.word	0x00024319
   24268:	00023c85 	.word	0x00023c85
   2426c:	00023d1d 	.word	0x00023d1d
   24270:	00029881 	.word	0x00029881
   24274:	200004a4 	.word	0x200004a4
   24278:	000237d5 	.word	0x000237d5

0002427c <eeprom_emulator_read_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_read_page(
		const uint8_t logical_page,
		uint8_t *const data)
{
   2427c:	b580      	push	{r7, lr}
   2427e:	b092      	sub	sp, #72	; 0x48
   24280:	af00      	add	r7, sp, #0
   24282:	0002      	movs	r2, r0
   24284:	6039      	str	r1, [r7, #0]
   24286:	1dfb      	adds	r3, r7, #7
   24288:	701a      	strb	r2, [r3, #0]
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
   2428a:	4b20      	ldr	r3, [pc, #128]	; (2430c <eeprom_emulator_read_page+0x90>)
   2428c:	781b      	ldrb	r3, [r3, #0]
   2428e:	2201      	movs	r2, #1
   24290:	4053      	eors	r3, r2
   24292:	b2db      	uxtb	r3, r3
   24294:	2b00      	cmp	r3, #0
   24296:	d001      	beq.n	2429c <eeprom_emulator_read_page+0x20>
		return STATUS_ERR_NOT_INITIALIZED;
   24298:	231f      	movs	r3, #31
   2429a:	e033      	b.n	24304 <eeprom_emulator_read_page+0x88>
	}

	/* Make sure the read address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
   2429c:	4b1b      	ldr	r3, [pc, #108]	; (2430c <eeprom_emulator_read_page+0x90>)
   2429e:	7a9b      	ldrb	r3, [r3, #10]
   242a0:	1dfa      	adds	r2, r7, #7
   242a2:	7812      	ldrb	r2, [r2, #0]
   242a4:	429a      	cmp	r2, r3
   242a6:	d301      	bcc.n	242ac <eeprom_emulator_read_page+0x30>
		return STATUS_ERR_BAD_ADDRESS;
   242a8:	2318      	movs	r3, #24
   242aa:	e02b      	b.n	24304 <eeprom_emulator_read_page+0x88>
	}

	/* Check if the page to read is currently cached (and potentially out of
	 * sync/newer than the physical memory) */
	if ((_eeprom_instance.cache_active == true) &&
   242ac:	4b17      	ldr	r3, [pc, #92]	; (2430c <eeprom_emulator_read_page+0x90>)
   242ae:	22c8      	movs	r2, #200	; 0xc8
   242b0:	5c9b      	ldrb	r3, [r3, r2]
   242b2:	2b00      	cmp	r3, #0
   242b4:	d010      	beq.n	242d8 <eeprom_emulator_read_page+0x5c>
		 (_eeprom_instance.cache.header.logical_page == logical_page)) {
   242b6:	4b15      	ldr	r3, [pc, #84]	; (2430c <eeprom_emulator_read_page+0x90>)
   242b8:	2288      	movs	r2, #136	; 0x88
   242ba:	5c9b      	ldrb	r3, [r3, r2]
	if ((_eeprom_instance.cache_active == true) &&
   242bc:	1dfa      	adds	r2, r7, #7
   242be:	7812      	ldrb	r2, [r2, #0]
   242c0:	429a      	cmp	r2, r3
   242c2:	d109      	bne.n	242d8 <eeprom_emulator_read_page+0x5c>
		/* Copy the potentially newer cached data into the user buffer */
		memcpy(data, _eeprom_instance.cache.data, EEPROM_PAGE_SIZE);
   242c4:	6839      	ldr	r1, [r7, #0]
   242c6:	4b11      	ldr	r3, [pc, #68]	; (2430c <eeprom_emulator_read_page+0x90>)
   242c8:	228c      	movs	r2, #140	; 0x8c
   242ca:	0008      	movs	r0, r1
   242cc:	189b      	adds	r3, r3, r2
   242ce:	223c      	movs	r2, #60	; 0x3c
   242d0:	0019      	movs	r1, r3
   242d2:	4b0f      	ldr	r3, [pc, #60]	; (24310 <eeprom_emulator_read_page+0x94>)
   242d4:	4798      	blx	r3
   242d6:	e014      	b.n	24302 <eeprom_emulator_read_page+0x86>
	} else {
		struct _eeprom_page temp;

		/* Copy the data from non-volatile memory into the temporary buffer */
		_eeprom_emulator_nvm_read_page(
				_eeprom_instance.page_map[logical_page], &temp);
   242d8:	1dfb      	adds	r3, r7, #7
   242da:	781b      	ldrb	r3, [r3, #0]
   242dc:	4a0b      	ldr	r2, [pc, #44]	; (2430c <eeprom_emulator_read_page+0x90>)
   242de:	18d3      	adds	r3, r2, r3
   242e0:	7adb      	ldrb	r3, [r3, #11]
		_eeprom_emulator_nvm_read_page(
   242e2:	b29b      	uxth	r3, r3
   242e4:	2208      	movs	r2, #8
   242e6:	18ba      	adds	r2, r7, r2
   242e8:	0011      	movs	r1, r2
   242ea:	0018      	movs	r0, r3
   242ec:	4b09      	ldr	r3, [pc, #36]	; (24314 <eeprom_emulator_read_page+0x98>)
   242ee:	4798      	blx	r3

		/* Copy the data portion of the read page to the user's buffer */
		memcpy(data, temp.data, EEPROM_PAGE_SIZE);
   242f0:	683a      	ldr	r2, [r7, #0]
   242f2:	2308      	movs	r3, #8
   242f4:	18fb      	adds	r3, r7, r3
   242f6:	0010      	movs	r0, r2
   242f8:	3304      	adds	r3, #4
   242fa:	223c      	movs	r2, #60	; 0x3c
   242fc:	0019      	movs	r1, r3
   242fe:	4b04      	ldr	r3, [pc, #16]	; (24310 <eeprom_emulator_read_page+0x94>)
   24300:	4798      	blx	r3
	}

	return STATUS_OK;
   24302:	2300      	movs	r3, #0
}
   24304:	0018      	movs	r0, r3
   24306:	46bd      	mov	sp, r7
   24308:	b012      	add	sp, #72	; 0x48
   2430a:	bd80      	pop	{r7, pc}
   2430c:	2000041c 	.word	0x2000041c
   24310:	00029881 	.word	0x00029881
   24314:	00023871 	.word	0x00023871

00024318 <eeprom_emulator_commit_page_buffer>:
 *       data loss.
 *
 * \return Status code indicating the status of the operation.
 */
enum status_code eeprom_emulator_commit_page_buffer(void)
{
   24318:	b580      	push	{r7, lr}
   2431a:	b082      	sub	sp, #8
   2431c:	af00      	add	r7, sp, #0
	enum status_code error_code = STATUS_OK;
   2431e:	1dfb      	adds	r3, r7, #7
   24320:	2200      	movs	r2, #0
   24322:	701a      	strb	r2, [r3, #0]

	/* If cache is inactive, no need to commit anything to physical memory */
	if (_eeprom_instance.cache_active == false) {
   24324:	4b10      	ldr	r3, [pc, #64]	; (24368 <eeprom_emulator_commit_page_buffer+0x50>)
   24326:	22c8      	movs	r2, #200	; 0xc8
   24328:	5c9b      	ldrb	r3, [r3, r2]
   2432a:	2201      	movs	r2, #1
   2432c:	4053      	eors	r3, r2
   2432e:	b2db      	uxtb	r3, r3
   24330:	2b00      	cmp	r3, #0
   24332:	d001      	beq.n	24338 <eeprom_emulator_commit_page_buffer+0x20>
		return STATUS_OK;
   24334:	2300      	movs	r3, #0
   24336:	e013      	b.n	24360 <eeprom_emulator_commit_page_buffer+0x48>
	}

	uint8_t cached_logical_page = _eeprom_instance.cache.header.logical_page;
   24338:	1dbb      	adds	r3, r7, #6
   2433a:	4a0b      	ldr	r2, [pc, #44]	; (24368 <eeprom_emulator_commit_page_buffer+0x50>)
   2433c:	2188      	movs	r1, #136	; 0x88
   2433e:	5c52      	ldrb	r2, [r2, r1]
   24340:	701a      	strb	r2, [r3, #0]

	/* Perform the page write to commit the NVM page buffer to FLASH */
	_eeprom_emulator_nvm_commit_cache(
			_eeprom_instance.page_map[cached_logical_page]);
   24342:	1dbb      	adds	r3, r7, #6
   24344:	781b      	ldrb	r3, [r3, #0]
   24346:	4a08      	ldr	r2, [pc, #32]	; (24368 <eeprom_emulator_commit_page_buffer+0x50>)
   24348:	18d3      	adds	r3, r2, r3
   2434a:	7adb      	ldrb	r3, [r3, #11]
	_eeprom_emulator_nvm_commit_cache(
   2434c:	b29b      	uxth	r3, r3
   2434e:	0018      	movs	r0, r3
   24350:	4b06      	ldr	r3, [pc, #24]	; (2436c <eeprom_emulator_commit_page_buffer+0x54>)
   24352:	4798      	blx	r3

	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active = false;
   24354:	4b04      	ldr	r3, [pc, #16]	; (24368 <eeprom_emulator_commit_page_buffer+0x50>)
   24356:	22c8      	movs	r2, #200	; 0xc8
   24358:	2100      	movs	r1, #0
   2435a:	5499      	strb	r1, [r3, r2]

	return error_code;
   2435c:	1dfb      	adds	r3, r7, #7
   2435e:	781b      	ldrb	r3, [r3, #0]
}
   24360:	0018      	movs	r0, r3
   24362:	46bd      	mov	sp, r7
   24364:	b002      	add	sp, #8
   24366:	bd80      	pop	{r7, pc}
   24368:	2000041c 	.word	0x2000041c
   2436c:	00023825 	.word	0x00023825

00024370 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   24370:	b580      	push	{r7, lr}
   24372:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
   24374:	46c0      	nop			; (mov r8, r8)
   24376:	46bd      	mov	sp, r7
   24378:	bd80      	pop	{r7, pc}
	...

0002437c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   2437c:	b580      	push	{r7, lr}
   2437e:	b082      	sub	sp, #8
   24380:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   24382:	4b10      	ldr	r3, [pc, #64]	; (243c4 <cpu_irq_enter_critical+0x48>)
   24384:	681b      	ldr	r3, [r3, #0]
   24386:	2b00      	cmp	r3, #0
   24388:	d112      	bne.n	243b0 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   2438a:	f3ef 8310 	mrs	r3, PRIMASK
   2438e:	607b      	str	r3, [r7, #4]
  return(result);
   24390:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   24392:	2b00      	cmp	r3, #0
   24394:	d109      	bne.n	243aa <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   24396:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   24398:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   2439c:	4b0a      	ldr	r3, [pc, #40]	; (243c8 <cpu_irq_enter_critical+0x4c>)
   2439e:	2200      	movs	r2, #0
   243a0:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   243a2:	4b0a      	ldr	r3, [pc, #40]	; (243cc <cpu_irq_enter_critical+0x50>)
   243a4:	2201      	movs	r2, #1
   243a6:	701a      	strb	r2, [r3, #0]
   243a8:	e002      	b.n	243b0 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   243aa:	4b08      	ldr	r3, [pc, #32]	; (243cc <cpu_irq_enter_critical+0x50>)
   243ac:	2200      	movs	r2, #0
   243ae:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   243b0:	4b04      	ldr	r3, [pc, #16]	; (243c4 <cpu_irq_enter_critical+0x48>)
   243b2:	681b      	ldr	r3, [r3, #0]
   243b4:	1c5a      	adds	r2, r3, #1
   243b6:	4b03      	ldr	r3, [pc, #12]	; (243c4 <cpu_irq_enter_critical+0x48>)
   243b8:	601a      	str	r2, [r3, #0]
}
   243ba:	46c0      	nop			; (mov r8, r8)
   243bc:	46bd      	mov	sp, r7
   243be:	b002      	add	sp, #8
   243c0:	bd80      	pop	{r7, pc}
   243c2:	46c0      	nop			; (mov r8, r8)
   243c4:	200004e8 	.word	0x200004e8
   243c8:	20000028 	.word	0x20000028
   243cc:	200004ec 	.word	0x200004ec

000243d0 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   243d0:	b580      	push	{r7, lr}
   243d2:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   243d4:	4b0b      	ldr	r3, [pc, #44]	; (24404 <cpu_irq_leave_critical+0x34>)
   243d6:	681b      	ldr	r3, [r3, #0]
   243d8:	1e5a      	subs	r2, r3, #1
   243da:	4b0a      	ldr	r3, [pc, #40]	; (24404 <cpu_irq_leave_critical+0x34>)
   243dc:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   243de:	4b09      	ldr	r3, [pc, #36]	; (24404 <cpu_irq_leave_critical+0x34>)
   243e0:	681b      	ldr	r3, [r3, #0]
   243e2:	2b00      	cmp	r3, #0
   243e4:	d10a      	bne.n	243fc <cpu_irq_leave_critical+0x2c>
   243e6:	4b08      	ldr	r3, [pc, #32]	; (24408 <cpu_irq_leave_critical+0x38>)
   243e8:	781b      	ldrb	r3, [r3, #0]
   243ea:	b2db      	uxtb	r3, r3
   243ec:	2b00      	cmp	r3, #0
   243ee:	d005      	beq.n	243fc <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   243f0:	4b06      	ldr	r3, [pc, #24]	; (2440c <cpu_irq_leave_critical+0x3c>)
   243f2:	2201      	movs	r2, #1
   243f4:	701a      	strb	r2, [r3, #0]
   243f6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   243fa:	b662      	cpsie	i
	}
}
   243fc:	46c0      	nop			; (mov r8, r8)
   243fe:	46bd      	mov	sp, r7
   24400:	bd80      	pop	{r7, pc}
   24402:	46c0      	nop			; (mov r8, r8)
   24404:	200004e8 	.word	0x200004e8
   24408:	200004ec 	.word	0x200004ec
   2440c:	20000028 	.word	0x20000028

00024410 <system_gclk_gen_get_config_defaults>:
{
   24410:	b580      	push	{r7, lr}
   24412:	b082      	sub	sp, #8
   24414:	af00      	add	r7, sp, #0
   24416:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   24418:	687b      	ldr	r3, [r7, #4]
   2441a:	2201      	movs	r2, #1
   2441c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   2441e:	687b      	ldr	r3, [r7, #4]
   24420:	2200      	movs	r2, #0
   24422:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   24424:	687b      	ldr	r3, [r7, #4]
   24426:	2206      	movs	r2, #6
   24428:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   2442a:	687b      	ldr	r3, [r7, #4]
   2442c:	2200      	movs	r2, #0
   2442e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   24430:	687b      	ldr	r3, [r7, #4]
   24432:	2200      	movs	r2, #0
   24434:	725a      	strb	r2, [r3, #9]
}
   24436:	46c0      	nop			; (mov r8, r8)
   24438:	46bd      	mov	sp, r7
   2443a:	b002      	add	sp, #8
   2443c:	bd80      	pop	{r7, pc}

0002443e <system_gclk_chan_get_config_defaults>:
{
   2443e:	b580      	push	{r7, lr}
   24440:	b082      	sub	sp, #8
   24442:	af00      	add	r7, sp, #0
   24444:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   24446:	687b      	ldr	r3, [r7, #4]
   24448:	2200      	movs	r2, #0
   2444a:	701a      	strb	r2, [r3, #0]
}
   2444c:	46c0      	nop			; (mov r8, r8)
   2444e:	46bd      	mov	sp, r7
   24450:	b002      	add	sp, #8
   24452:	bd80      	pop	{r7, pc}

00024454 <system_clock_source_xosc32k_get_config_defaults>:
{
   24454:	b580      	push	{r7, lr}
   24456:	b082      	sub	sp, #8
   24458:	af00      	add	r7, sp, #0
   2445a:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
   2445c:	687b      	ldr	r3, [r7, #4]
   2445e:	2200      	movs	r2, #0
   24460:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
   24462:	687b      	ldr	r3, [r7, #4]
   24464:	2204      	movs	r2, #4
   24466:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
   24468:	687b      	ldr	r3, [r7, #4]
   2446a:	2200      	movs	r2, #0
   2446c:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
   2446e:	687b      	ldr	r3, [r7, #4]
   24470:	2280      	movs	r2, #128	; 0x80
   24472:	0212      	lsls	r2, r2, #8
   24474:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
   24476:	687b      	ldr	r3, [r7, #4]
   24478:	2200      	movs	r2, #0
   2447a:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
   2447c:	687b      	ldr	r3, [r7, #4]
   2447e:	2201      	movs	r2, #1
   24480:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
   24482:	687b      	ldr	r3, [r7, #4]
   24484:	2200      	movs	r2, #0
   24486:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
   24488:	687b      	ldr	r3, [r7, #4]
   2448a:	2201      	movs	r2, #1
   2448c:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
   2448e:	687b      	ldr	r3, [r7, #4]
   24490:	2200      	movs	r2, #0
   24492:	739a      	strb	r2, [r3, #14]
}
   24494:	46c0      	nop			; (mov r8, r8)
   24496:	46bd      	mov	sp, r7
   24498:	b002      	add	sp, #8
   2449a:	bd80      	pop	{r7, pc}

0002449c <system_clock_source_osc8m_get_config_defaults>:
{
   2449c:	b580      	push	{r7, lr}
   2449e:	b082      	sub	sp, #8
   244a0:	af00      	add	r7, sp, #0
   244a2:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   244a4:	687b      	ldr	r3, [r7, #4]
   244a6:	2203      	movs	r2, #3
   244a8:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   244aa:	687b      	ldr	r3, [r7, #4]
   244ac:	2200      	movs	r2, #0
   244ae:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   244b0:	687b      	ldr	r3, [r7, #4]
   244b2:	2201      	movs	r2, #1
   244b4:	709a      	strb	r2, [r3, #2]
}
   244b6:	46c0      	nop			; (mov r8, r8)
   244b8:	46bd      	mov	sp, r7
   244ba:	b002      	add	sp, #8
   244bc:	bd80      	pop	{r7, pc}

000244be <system_clock_source_dfll_get_config_defaults>:
{
   244be:	b580      	push	{r7, lr}
   244c0:	b082      	sub	sp, #8
   244c2:	af00      	add	r7, sp, #0
   244c4:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
   244c6:	687b      	ldr	r3, [r7, #4]
   244c8:	2200      	movs	r2, #0
   244ca:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   244cc:	687b      	ldr	r3, [r7, #4]
   244ce:	2200      	movs	r2, #0
   244d0:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   244d2:	687b      	ldr	r3, [r7, #4]
   244d4:	2200      	movs	r2, #0
   244d6:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   244d8:	687b      	ldr	r3, [r7, #4]
   244da:	2200      	movs	r2, #0
   244dc:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   244de:	687b      	ldr	r3, [r7, #4]
   244e0:	2200      	movs	r2, #0
   244e2:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
   244e4:	687b      	ldr	r3, [r7, #4]
   244e6:	2201      	movs	r2, #1
   244e8:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
   244ea:	687b      	ldr	r3, [r7, #4]
   244ec:	2207      	movs	r2, #7
   244ee:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
   244f0:	687b      	ldr	r3, [r7, #4]
   244f2:	223f      	movs	r2, #63	; 0x3f
   244f4:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
   244f6:	687b      	ldr	r3, [r7, #4]
   244f8:	2201      	movs	r2, #1
   244fa:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
   244fc:	687b      	ldr	r3, [r7, #4]
   244fe:	2201      	movs	r2, #1
   24500:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
   24502:	687b      	ldr	r3, [r7, #4]
   24504:	2206      	movs	r2, #6
   24506:	821a      	strh	r2, [r3, #16]
}
   24508:	46c0      	nop			; (mov r8, r8)
   2450a:	46bd      	mov	sp, r7
   2450c:	b002      	add	sp, #8
   2450e:	bd80      	pop	{r7, pc}

00024510 <system_cpu_clock_set_divider>:
{
   24510:	b580      	push	{r7, lr}
   24512:	b082      	sub	sp, #8
   24514:	af00      	add	r7, sp, #0
   24516:	0002      	movs	r2, r0
   24518:	1dfb      	adds	r3, r7, #7
   2451a:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   2451c:	4a03      	ldr	r2, [pc, #12]	; (2452c <system_cpu_clock_set_divider+0x1c>)
   2451e:	1dfb      	adds	r3, r7, #7
   24520:	781b      	ldrb	r3, [r3, #0]
   24522:	7213      	strb	r3, [r2, #8]
}
   24524:	46c0      	nop			; (mov r8, r8)
   24526:	46bd      	mov	sp, r7
   24528:	b002      	add	sp, #8
   2452a:	bd80      	pop	{r7, pc}
   2452c:	40000400 	.word	0x40000400

00024530 <system_apb_clock_set_divider>:
{
   24530:	b580      	push	{r7, lr}
   24532:	b082      	sub	sp, #8
   24534:	af00      	add	r7, sp, #0
   24536:	0002      	movs	r2, r0
   24538:	1dfb      	adds	r3, r7, #7
   2453a:	701a      	strb	r2, [r3, #0]
   2453c:	1dbb      	adds	r3, r7, #6
   2453e:	1c0a      	adds	r2, r1, #0
   24540:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   24542:	1dfb      	adds	r3, r7, #7
   24544:	781b      	ldrb	r3, [r3, #0]
   24546:	2b01      	cmp	r3, #1
   24548:	d008      	beq.n	2455c <system_apb_clock_set_divider+0x2c>
   2454a:	2b02      	cmp	r3, #2
   2454c:	d00b      	beq.n	24566 <system_apb_clock_set_divider+0x36>
   2454e:	2b00      	cmp	r3, #0
   24550:	d10e      	bne.n	24570 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   24552:	4a0b      	ldr	r2, [pc, #44]	; (24580 <system_apb_clock_set_divider+0x50>)
   24554:	1dbb      	adds	r3, r7, #6
   24556:	781b      	ldrb	r3, [r3, #0]
   24558:	7253      	strb	r3, [r2, #9]
			break;
   2455a:	e00b      	b.n	24574 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   2455c:	4a08      	ldr	r2, [pc, #32]	; (24580 <system_apb_clock_set_divider+0x50>)
   2455e:	1dbb      	adds	r3, r7, #6
   24560:	781b      	ldrb	r3, [r3, #0]
   24562:	7293      	strb	r3, [r2, #10]
			break;
   24564:	e006      	b.n	24574 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   24566:	4a06      	ldr	r2, [pc, #24]	; (24580 <system_apb_clock_set_divider+0x50>)
   24568:	1dbb      	adds	r3, r7, #6
   2456a:	781b      	ldrb	r3, [r3, #0]
   2456c:	72d3      	strb	r3, [r2, #11]
			break;
   2456e:	e001      	b.n	24574 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   24570:	2317      	movs	r3, #23
   24572:	e000      	b.n	24576 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   24574:	2300      	movs	r3, #0
}
   24576:	0018      	movs	r0, r3
   24578:	46bd      	mov	sp, r7
   2457a:	b002      	add	sp, #8
   2457c:	bd80      	pop	{r7, pc}
   2457e:	46c0      	nop			; (mov r8, r8)
   24580:	40000400 	.word	0x40000400

00024584 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   24584:	b580      	push	{r7, lr}
   24586:	b082      	sub	sp, #8
   24588:	af00      	add	r7, sp, #0
   2458a:	0002      	movs	r2, r0
   2458c:	1dfb      	adds	r3, r7, #7
   2458e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   24590:	4a08      	ldr	r2, [pc, #32]	; (245b4 <system_flash_set_waitstates+0x30>)
   24592:	1dfb      	adds	r3, r7, #7
   24594:	781b      	ldrb	r3, [r3, #0]
   24596:	210f      	movs	r1, #15
   24598:	400b      	ands	r3, r1
   2459a:	b2d9      	uxtb	r1, r3
   2459c:	6853      	ldr	r3, [r2, #4]
   2459e:	200f      	movs	r0, #15
   245a0:	4001      	ands	r1, r0
   245a2:	0049      	lsls	r1, r1, #1
   245a4:	201e      	movs	r0, #30
   245a6:	4383      	bics	r3, r0
   245a8:	430b      	orrs	r3, r1
   245aa:	6053      	str	r3, [r2, #4]
}
   245ac:	46c0      	nop			; (mov r8, r8)
   245ae:	46bd      	mov	sp, r7
   245b0:	b002      	add	sp, #8
   245b2:	bd80      	pop	{r7, pc}
   245b4:	41004000 	.word	0x41004000

000245b8 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   245b8:	b580      	push	{r7, lr}
   245ba:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   245bc:	46c0      	nop			; (mov r8, r8)
   245be:	4b04      	ldr	r3, [pc, #16]	; (245d0 <_system_dfll_wait_for_sync+0x18>)
   245c0:	68db      	ldr	r3, [r3, #12]
   245c2:	2210      	movs	r2, #16
   245c4:	4013      	ands	r3, r2
   245c6:	d0fa      	beq.n	245be <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   245c8:	46c0      	nop			; (mov r8, r8)
   245ca:	46bd      	mov	sp, r7
   245cc:	bd80      	pop	{r7, pc}
   245ce:	46c0      	nop			; (mov r8, r8)
   245d0:	40000800 	.word	0x40000800

000245d4 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   245d4:	b580      	push	{r7, lr}
   245d6:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   245d8:	4b0c      	ldr	r3, [pc, #48]	; (2460c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   245da:	2202      	movs	r2, #2
   245dc:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   245de:	4b0c      	ldr	r3, [pc, #48]	; (24610 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   245e0:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   245e2:	4a0a      	ldr	r2, [pc, #40]	; (2460c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   245e4:	4b0b      	ldr	r3, [pc, #44]	; (24614 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   245e6:	689b      	ldr	r3, [r3, #8]
   245e8:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   245ea:	4a08      	ldr	r2, [pc, #32]	; (2460c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   245ec:	4b09      	ldr	r3, [pc, #36]	; (24614 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   245ee:	685b      	ldr	r3, [r3, #4]
   245f0:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   245f2:	4b06      	ldr	r3, [pc, #24]	; (2460c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   245f4:	2200      	movs	r2, #0
   245f6:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   245f8:	4b05      	ldr	r3, [pc, #20]	; (24610 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   245fa:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   245fc:	4a03      	ldr	r2, [pc, #12]	; (2460c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   245fe:	4b05      	ldr	r3, [pc, #20]	; (24614 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   24600:	681b      	ldr	r3, [r3, #0]
   24602:	b29b      	uxth	r3, r3
   24604:	8493      	strh	r3, [r2, #36]	; 0x24
}
   24606:	46c0      	nop			; (mov r8, r8)
   24608:	46bd      	mov	sp, r7
   2460a:	bd80      	pop	{r7, pc}
   2460c:	40000800 	.word	0x40000800
   24610:	000245b9 	.word	0x000245b9
   24614:	200004f0 	.word	0x200004f0

00024618 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   24618:	b580      	push	{r7, lr}
   2461a:	b082      	sub	sp, #8
   2461c:	af00      	add	r7, sp, #0
   2461e:	0002      	movs	r2, r0
   24620:	1dfb      	adds	r3, r7, #7
   24622:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   24624:	1dfb      	adds	r3, r7, #7
   24626:	781b      	ldrb	r3, [r3, #0]
   24628:	2b08      	cmp	r3, #8
   2462a:	d841      	bhi.n	246b0 <system_clock_source_get_hz+0x98>
   2462c:	009a      	lsls	r2, r3, #2
   2462e:	4b23      	ldr	r3, [pc, #140]	; (246bc <system_clock_source_get_hz+0xa4>)
   24630:	18d3      	adds	r3, r2, r3
   24632:	681b      	ldr	r3, [r3, #0]
   24634:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   24636:	4b22      	ldr	r3, [pc, #136]	; (246c0 <system_clock_source_get_hz+0xa8>)
   24638:	691b      	ldr	r3, [r3, #16]
   2463a:	e03a      	b.n	246b2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   2463c:	4b21      	ldr	r3, [pc, #132]	; (246c4 <system_clock_source_get_hz+0xac>)
   2463e:	6a1b      	ldr	r3, [r3, #32]
   24640:	059b      	lsls	r3, r3, #22
   24642:	0f9b      	lsrs	r3, r3, #30
   24644:	b2db      	uxtb	r3, r3
   24646:	001a      	movs	r2, r3
   24648:	4b1f      	ldr	r3, [pc, #124]	; (246c8 <system_clock_source_get_hz+0xb0>)
   2464a:	40d3      	lsrs	r3, r2
   2464c:	e031      	b.n	246b2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   2464e:	2380      	movs	r3, #128	; 0x80
   24650:	021b      	lsls	r3, r3, #8
   24652:	e02e      	b.n	246b2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   24654:	2380      	movs	r3, #128	; 0x80
   24656:	021b      	lsls	r3, r3, #8
   24658:	e02b      	b.n	246b2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   2465a:	4b19      	ldr	r3, [pc, #100]	; (246c0 <system_clock_source_get_hz+0xa8>)
   2465c:	695b      	ldr	r3, [r3, #20]
   2465e:	e028      	b.n	246b2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   24660:	4b17      	ldr	r3, [pc, #92]	; (246c0 <system_clock_source_get_hz+0xa8>)
   24662:	681b      	ldr	r3, [r3, #0]
   24664:	2202      	movs	r2, #2
   24666:	4013      	ands	r3, r2
   24668:	d101      	bne.n	2466e <system_clock_source_get_hz+0x56>
			return 0;
   2466a:	2300      	movs	r3, #0
   2466c:	e021      	b.n	246b2 <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   2466e:	4b17      	ldr	r3, [pc, #92]	; (246cc <system_clock_source_get_hz+0xb4>)
   24670:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   24672:	4b13      	ldr	r3, [pc, #76]	; (246c0 <system_clock_source_get_hz+0xa8>)
   24674:	681b      	ldr	r3, [r3, #0]
   24676:	2224      	movs	r2, #36	; 0x24
   24678:	4013      	ands	r3, r2
   2467a:	2b04      	cmp	r3, #4
   2467c:	d109      	bne.n	24692 <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2467e:	2000      	movs	r0, #0
   24680:	4b13      	ldr	r3, [pc, #76]	; (246d0 <system_clock_source_get_hz+0xb8>)
   24682:	4798      	blx	r3
   24684:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   24686:	4b0e      	ldr	r3, [pc, #56]	; (246c0 <system_clock_source_get_hz+0xa8>)
   24688:	689b      	ldr	r3, [r3, #8]
   2468a:	041b      	lsls	r3, r3, #16
   2468c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2468e:	4353      	muls	r3, r2
   24690:	e00f      	b.n	246b2 <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   24692:	4b10      	ldr	r3, [pc, #64]	; (246d4 <system_clock_source_get_hz+0xbc>)
   24694:	e00d      	b.n	246b2 <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   24696:	4a0b      	ldr	r2, [pc, #44]	; (246c4 <system_clock_source_get_hz+0xac>)
   24698:	2350      	movs	r3, #80	; 0x50
   2469a:	5cd3      	ldrb	r3, [r2, r3]
   2469c:	b2db      	uxtb	r3, r3
   2469e:	001a      	movs	r2, r3
   246a0:	2304      	movs	r3, #4
   246a2:	4013      	ands	r3, r2
   246a4:	d101      	bne.n	246aa <system_clock_source_get_hz+0x92>
			return 0;
   246a6:	2300      	movs	r3, #0
   246a8:	e003      	b.n	246b2 <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   246aa:	4b05      	ldr	r3, [pc, #20]	; (246c0 <system_clock_source_get_hz+0xa8>)
   246ac:	68db      	ldr	r3, [r3, #12]
   246ae:	e000      	b.n	246b2 <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   246b0:	2300      	movs	r3, #0
	}
}
   246b2:	0018      	movs	r0, r3
   246b4:	46bd      	mov	sp, r7
   246b6:	b002      	add	sp, #8
   246b8:	bd80      	pop	{r7, pc}
   246ba:	46c0      	nop			; (mov r8, r8)
   246bc:	0002b7c4 	.word	0x0002b7c4
   246c0:	200004f0 	.word	0x200004f0
   246c4:	40000800 	.word	0x40000800
   246c8:	007a1200 	.word	0x007a1200
   246cc:	000245b9 	.word	0x000245b9
   246d0:	00025259 	.word	0x00025259
   246d4:	02dc6c00 	.word	0x02dc6c00

000246d8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   246d8:	b580      	push	{r7, lr}
   246da:	b084      	sub	sp, #16
   246dc:	af00      	add	r7, sp, #0
   246de:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   246e0:	4b1a      	ldr	r3, [pc, #104]	; (2474c <system_clock_source_osc8m_set_config+0x74>)
   246e2:	6a1b      	ldr	r3, [r3, #32]
   246e4:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   246e6:	687b      	ldr	r3, [r7, #4]
   246e8:	781b      	ldrb	r3, [r3, #0]
   246ea:	1c1a      	adds	r2, r3, #0
   246ec:	2303      	movs	r3, #3
   246ee:	4013      	ands	r3, r2
   246f0:	b2da      	uxtb	r2, r3
   246f2:	230d      	movs	r3, #13
   246f4:	18fb      	adds	r3, r7, r3
   246f6:	2103      	movs	r1, #3
   246f8:	400a      	ands	r2, r1
   246fa:	0010      	movs	r0, r2
   246fc:	781a      	ldrb	r2, [r3, #0]
   246fe:	2103      	movs	r1, #3
   24700:	438a      	bics	r2, r1
   24702:	1c11      	adds	r1, r2, #0
   24704:	1c02      	adds	r2, r0, #0
   24706:	430a      	orrs	r2, r1
   24708:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   2470a:	687b      	ldr	r3, [r7, #4]
   2470c:	789a      	ldrb	r2, [r3, #2]
   2470e:	230c      	movs	r3, #12
   24710:	18fb      	adds	r3, r7, r3
   24712:	01d0      	lsls	r0, r2, #7
   24714:	781a      	ldrb	r2, [r3, #0]
   24716:	217f      	movs	r1, #127	; 0x7f
   24718:	400a      	ands	r2, r1
   2471a:	1c11      	adds	r1, r2, #0
   2471c:	1c02      	adds	r2, r0, #0
   2471e:	430a      	orrs	r2, r1
   24720:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   24722:	687b      	ldr	r3, [r7, #4]
   24724:	785a      	ldrb	r2, [r3, #1]
   24726:	230c      	movs	r3, #12
   24728:	18fb      	adds	r3, r7, r3
   2472a:	2101      	movs	r1, #1
   2472c:	400a      	ands	r2, r1
   2472e:	0190      	lsls	r0, r2, #6
   24730:	781a      	ldrb	r2, [r3, #0]
   24732:	2140      	movs	r1, #64	; 0x40
   24734:	438a      	bics	r2, r1
   24736:	1c11      	adds	r1, r2, #0
   24738:	1c02      	adds	r2, r0, #0
   2473a:	430a      	orrs	r2, r1
   2473c:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   2473e:	4b03      	ldr	r3, [pc, #12]	; (2474c <system_clock_source_osc8m_set_config+0x74>)
   24740:	68fa      	ldr	r2, [r7, #12]
   24742:	621a      	str	r2, [r3, #32]
}
   24744:	46c0      	nop			; (mov r8, r8)
   24746:	46bd      	mov	sp, r7
   24748:	b004      	add	sp, #16
   2474a:	bd80      	pop	{r7, pc}
   2474c:	40000800 	.word	0x40000800

00024750 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
   24750:	b580      	push	{r7, lr}
   24752:	b084      	sub	sp, #16
   24754:	af00      	add	r7, sp, #0
   24756:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
   24758:	4a43      	ldr	r2, [pc, #268]	; (24868 <system_clock_source_xosc32k_set_config+0x118>)
   2475a:	230c      	movs	r3, #12
   2475c:	18fb      	adds	r3, r7, r3
   2475e:	8a92      	ldrh	r2, [r2, #20]
   24760:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
   24762:	687b      	ldr	r3, [r7, #4]
   24764:	785b      	ldrb	r3, [r3, #1]
   24766:	1c1a      	adds	r2, r3, #0
   24768:	2307      	movs	r3, #7
   2476a:	4013      	ands	r3, r2
   2476c:	b2da      	uxtb	r2, r3
   2476e:	230c      	movs	r3, #12
   24770:	18fb      	adds	r3, r7, r3
   24772:	2107      	movs	r1, #7
   24774:	400a      	ands	r2, r1
   24776:	0010      	movs	r0, r2
   24778:	785a      	ldrb	r2, [r3, #1]
   2477a:	2107      	movs	r1, #7
   2477c:	438a      	bics	r2, r1
   2477e:	1c11      	adds	r1, r2, #0
   24780:	1c02      	adds	r2, r0, #0
   24782:	430a      	orrs	r2, r1
   24784:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
   24786:	687b      	ldr	r3, [r7, #4]
   24788:	781b      	ldrb	r3, [r3, #0]
   2478a:	2b00      	cmp	r3, #0
   2478c:	d106      	bne.n	2479c <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
   2478e:	230c      	movs	r3, #12
   24790:	18fb      	adds	r3, r7, r3
   24792:	781a      	ldrb	r2, [r3, #0]
   24794:	2104      	movs	r1, #4
   24796:	430a      	orrs	r2, r1
   24798:	701a      	strb	r2, [r3, #0]
   2479a:	e005      	b.n	247a8 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
   2479c:	230c      	movs	r3, #12
   2479e:	18fb      	adds	r3, r7, r3
   247a0:	781a      	ldrb	r2, [r3, #0]
   247a2:	2104      	movs	r1, #4
   247a4:	438a      	bics	r2, r1
   247a6:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
   247a8:	687b      	ldr	r3, [r7, #4]
   247aa:	789a      	ldrb	r2, [r3, #2]
   247ac:	230c      	movs	r3, #12
   247ae:	18fb      	adds	r3, r7, r3
   247b0:	2101      	movs	r1, #1
   247b2:	400a      	ands	r2, r1
   247b4:	0150      	lsls	r0, r2, #5
   247b6:	781a      	ldrb	r2, [r3, #0]
   247b8:	2120      	movs	r1, #32
   247ba:	438a      	bics	r2, r1
   247bc:	1c11      	adds	r1, r2, #0
   247be:	1c02      	adds	r2, r0, #0
   247c0:	430a      	orrs	r2, r1
   247c2:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
   247c4:	687b      	ldr	r3, [r7, #4]
   247c6:	78da      	ldrb	r2, [r3, #3]
   247c8:	230c      	movs	r3, #12
   247ca:	18fb      	adds	r3, r7, r3
   247cc:	2101      	movs	r1, #1
   247ce:	400a      	ands	r2, r1
   247d0:	0110      	lsls	r0, r2, #4
   247d2:	781a      	ldrb	r2, [r3, #0]
   247d4:	2110      	movs	r1, #16
   247d6:	438a      	bics	r2, r1
   247d8:	1c11      	adds	r1, r2, #0
   247da:	1c02      	adds	r2, r0, #0
   247dc:	430a      	orrs	r2, r1
   247de:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
   247e0:	687b      	ldr	r3, [r7, #4]
   247e2:	791a      	ldrb	r2, [r3, #4]
   247e4:	230c      	movs	r3, #12
   247e6:	18fb      	adds	r3, r7, r3
   247e8:	2101      	movs	r1, #1
   247ea:	400a      	ands	r2, r1
   247ec:	00d0      	lsls	r0, r2, #3
   247ee:	781a      	ldrb	r2, [r3, #0]
   247f0:	2108      	movs	r1, #8
   247f2:	438a      	bics	r2, r1
   247f4:	1c11      	adds	r1, r2, #0
   247f6:	1c02      	adds	r2, r0, #0
   247f8:	430a      	orrs	r2, r1
   247fa:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
   247fc:	687b      	ldr	r3, [r7, #4]
   247fe:	7b5a      	ldrb	r2, [r3, #13]
   24800:	230c      	movs	r3, #12
   24802:	18fb      	adds	r3, r7, r3
   24804:	01d0      	lsls	r0, r2, #7
   24806:	781a      	ldrb	r2, [r3, #0]
   24808:	217f      	movs	r1, #127	; 0x7f
   2480a:	400a      	ands	r2, r1
   2480c:	1c11      	adds	r1, r2, #0
   2480e:	1c02      	adds	r2, r0, #0
   24810:	430a      	orrs	r2, r1
   24812:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   24814:	687b      	ldr	r3, [r7, #4]
   24816:	7b1a      	ldrb	r2, [r3, #12]
   24818:	230c      	movs	r3, #12
   2481a:	18fb      	adds	r3, r7, r3
   2481c:	2101      	movs	r1, #1
   2481e:	400a      	ands	r2, r1
   24820:	0190      	lsls	r0, r2, #6
   24822:	781a      	ldrb	r2, [r3, #0]
   24824:	2140      	movs	r1, #64	; 0x40
   24826:	438a      	bics	r2, r1
   24828:	1c11      	adds	r1, r2, #0
   2482a:	1c02      	adds	r2, r0, #0
   2482c:	430a      	orrs	r2, r1
   2482e:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
   24830:	687b      	ldr	r3, [r7, #4]
   24832:	7b9a      	ldrb	r2, [r3, #14]
   24834:	230c      	movs	r3, #12
   24836:	18fb      	adds	r3, r7, r3
   24838:	2101      	movs	r1, #1
   2483a:	400a      	ands	r2, r1
   2483c:	0110      	lsls	r0, r2, #4
   2483e:	785a      	ldrb	r2, [r3, #1]
   24840:	2110      	movs	r1, #16
   24842:	438a      	bics	r2, r1
   24844:	1c11      	adds	r1, r2, #0
   24846:	1c02      	adds	r2, r0, #0
   24848:	430a      	orrs	r2, r1
   2484a:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
   2484c:	687b      	ldr	r3, [r7, #4]
   2484e:	689a      	ldr	r2, [r3, #8]
   24850:	4b06      	ldr	r3, [pc, #24]	; (2486c <system_clock_source_xosc32k_set_config+0x11c>)
   24852:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
   24854:	4a04      	ldr	r2, [pc, #16]	; (24868 <system_clock_source_xosc32k_set_config+0x118>)
   24856:	230c      	movs	r3, #12
   24858:	18fb      	adds	r3, r7, r3
   2485a:	881b      	ldrh	r3, [r3, #0]
   2485c:	8293      	strh	r3, [r2, #20]
}
   2485e:	46c0      	nop			; (mov r8, r8)
   24860:	46bd      	mov	sp, r7
   24862:	b004      	add	sp, #16
   24864:	bd80      	pop	{r7, pc}
   24866:	46c0      	nop			; (mov r8, r8)
   24868:	40000800 	.word	0x40000800
   2486c:	200004f0 	.word	0x200004f0

00024870 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
   24870:	b580      	push	{r7, lr}
   24872:	b082      	sub	sp, #8
   24874:	af00      	add	r7, sp, #0
   24876:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   24878:	687b      	ldr	r3, [r7, #4]
   2487a:	7a1b      	ldrb	r3, [r3, #8]
   2487c:	029b      	lsls	r3, r3, #10
   2487e:	041b      	lsls	r3, r3, #16
   24880:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
   24882:	687b      	ldr	r3, [r7, #4]
   24884:	895b      	ldrh	r3, [r3, #10]
   24886:	059b      	lsls	r3, r3, #22
   24888:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   2488a:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
   2488c:	4b2a      	ldr	r3, [pc, #168]	; (24938 <system_clock_source_dfll_set_config+0xc8>)
   2488e:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
   24890:	687b      	ldr	r3, [r7, #4]
   24892:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
   24894:	687b      	ldr	r3, [r7, #4]
   24896:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
   24898:	4313      	orrs	r3, r2
   2489a:	b2db      	uxtb	r3, r3
   2489c:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
   2489e:	687b      	ldr	r3, [r7, #4]
   248a0:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
   248a2:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
   248a4:	687a      	ldr	r2, [r7, #4]
   248a6:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
   248a8:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
   248aa:	687b      	ldr	r3, [r7, #4]
   248ac:	785b      	ldrb	r3, [r3, #1]
   248ae:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
   248b0:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
   248b2:	4b21      	ldr	r3, [pc, #132]	; (24938 <system_clock_source_dfll_set_config+0xc8>)
   248b4:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
   248b6:	687b      	ldr	r3, [r7, #4]
   248b8:	781b      	ldrb	r3, [r3, #0]
   248ba:	2b04      	cmp	r3, #4
   248bc:	d116      	bne.n	248ec <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   248be:	687b      	ldr	r3, [r7, #4]
   248c0:	7b1b      	ldrb	r3, [r3, #12]
   248c2:	069b      	lsls	r3, r3, #26
   248c4:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   248c6:	687b      	ldr	r3, [r7, #4]
   248c8:	89db      	ldrh	r3, [r3, #14]
   248ca:	041b      	lsls	r3, r3, #16
   248cc:	0019      	movs	r1, r3
   248ce:	4b1b      	ldr	r3, [pc, #108]	; (2493c <system_clock_source_dfll_set_config+0xcc>)
   248d0:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   248d2:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   248d4:	687a      	ldr	r2, [r7, #4]
   248d6:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   248d8:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
   248da:	4b17      	ldr	r3, [pc, #92]	; (24938 <system_clock_source_dfll_set_config+0xc8>)
   248dc:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
   248de:	4b16      	ldr	r3, [pc, #88]	; (24938 <system_clock_source_dfll_set_config+0xc8>)
   248e0:	681b      	ldr	r3, [r3, #0]
   248e2:	687a      	ldr	r2, [r7, #4]
   248e4:	7812      	ldrb	r2, [r2, #0]
   248e6:	431a      	orrs	r2, r3
   248e8:	4b13      	ldr	r3, [pc, #76]	; (24938 <system_clock_source_dfll_set_config+0xc8>)
   248ea:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
   248ec:	687b      	ldr	r3, [r7, #4]
   248ee:	781b      	ldrb	r3, [r3, #0]
   248f0:	2b20      	cmp	r3, #32
   248f2:	d11c      	bne.n	2492e <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   248f4:	687b      	ldr	r3, [r7, #4]
   248f6:	7b1b      	ldrb	r3, [r3, #12]
   248f8:	069b      	lsls	r3, r3, #26
   248fa:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   248fc:	687b      	ldr	r3, [r7, #4]
   248fe:	89db      	ldrh	r3, [r3, #14]
   24900:	041b      	lsls	r3, r3, #16
   24902:	0019      	movs	r1, r3
   24904:	4b0d      	ldr	r3, [pc, #52]	; (2493c <system_clock_source_dfll_set_config+0xcc>)
   24906:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   24908:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   2490a:	687a      	ldr	r2, [r7, #4]
   2490c:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   2490e:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
   24910:	4b09      	ldr	r3, [pc, #36]	; (24938 <system_clock_source_dfll_set_config+0xc8>)
   24912:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
   24914:	4b08      	ldr	r3, [pc, #32]	; (24938 <system_clock_source_dfll_set_config+0xc8>)
   24916:	681b      	ldr	r3, [r3, #0]
   24918:	687a      	ldr	r2, [r7, #4]
   2491a:	7812      	ldrb	r2, [r2, #0]
   2491c:	2104      	movs	r1, #4
   2491e:	430a      	orrs	r2, r1
   24920:	b2d2      	uxtb	r2, r2
   24922:	4313      	orrs	r3, r2
   24924:	2280      	movs	r2, #128	; 0x80
   24926:	00d2      	lsls	r2, r2, #3
   24928:	431a      	orrs	r2, r3
   2492a:	4b03      	ldr	r3, [pc, #12]	; (24938 <system_clock_source_dfll_set_config+0xc8>)
   2492c:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
   2492e:	46c0      	nop			; (mov r8, r8)
   24930:	46bd      	mov	sp, r7
   24932:	b002      	add	sp, #8
   24934:	bd80      	pop	{r7, pc}
   24936:	46c0      	nop			; (mov r8, r8)
   24938:	200004f0 	.word	0x200004f0
   2493c:	03ff0000 	.word	0x03ff0000

00024940 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   24940:	b580      	push	{r7, lr}
   24942:	b082      	sub	sp, #8
   24944:	af00      	add	r7, sp, #0
   24946:	0002      	movs	r2, r0
   24948:	1dfb      	adds	r3, r7, #7
   2494a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   2494c:	1dfb      	adds	r3, r7, #7
   2494e:	781b      	ldrb	r3, [r3, #0]
   24950:	2b08      	cmp	r3, #8
   24952:	d83b      	bhi.n	249cc <system_clock_source_enable+0x8c>
   24954:	009a      	lsls	r2, r3, #2
   24956:	4b21      	ldr	r3, [pc, #132]	; (249dc <system_clock_source_enable+0x9c>)
   24958:	18d3      	adds	r3, r2, r3
   2495a:	681b      	ldr	r3, [r3, #0]
   2495c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   2495e:	4b20      	ldr	r3, [pc, #128]	; (249e0 <system_clock_source_enable+0xa0>)
   24960:	4a1f      	ldr	r2, [pc, #124]	; (249e0 <system_clock_source_enable+0xa0>)
   24962:	6a12      	ldr	r2, [r2, #32]
   24964:	2102      	movs	r1, #2
   24966:	430a      	orrs	r2, r1
   24968:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   2496a:	2300      	movs	r3, #0
   2496c:	e031      	b.n	249d2 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   2496e:	4b1c      	ldr	r3, [pc, #112]	; (249e0 <system_clock_source_enable+0xa0>)
   24970:	4a1b      	ldr	r2, [pc, #108]	; (249e0 <system_clock_source_enable+0xa0>)
   24972:	6992      	ldr	r2, [r2, #24]
   24974:	2102      	movs	r1, #2
   24976:	430a      	orrs	r2, r1
   24978:	619a      	str	r2, [r3, #24]
		break;
   2497a:	e029      	b.n	249d0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   2497c:	4a18      	ldr	r2, [pc, #96]	; (249e0 <system_clock_source_enable+0xa0>)
   2497e:	4b18      	ldr	r3, [pc, #96]	; (249e0 <system_clock_source_enable+0xa0>)
   24980:	8a1b      	ldrh	r3, [r3, #16]
   24982:	b29b      	uxth	r3, r3
   24984:	2102      	movs	r1, #2
   24986:	430b      	orrs	r3, r1
   24988:	b29b      	uxth	r3, r3
   2498a:	8213      	strh	r3, [r2, #16]
		break;
   2498c:	e020      	b.n	249d0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   2498e:	4a14      	ldr	r2, [pc, #80]	; (249e0 <system_clock_source_enable+0xa0>)
   24990:	4b13      	ldr	r3, [pc, #76]	; (249e0 <system_clock_source_enable+0xa0>)
   24992:	8a9b      	ldrh	r3, [r3, #20]
   24994:	b29b      	uxth	r3, r3
   24996:	2102      	movs	r1, #2
   24998:	430b      	orrs	r3, r1
   2499a:	b29b      	uxth	r3, r3
   2499c:	8293      	strh	r3, [r2, #20]
		break;
   2499e:	e017      	b.n	249d0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   249a0:	4b10      	ldr	r3, [pc, #64]	; (249e4 <system_clock_source_enable+0xa4>)
   249a2:	681b      	ldr	r3, [r3, #0]
   249a4:	2202      	movs	r2, #2
   249a6:	431a      	orrs	r2, r3
   249a8:	4b0e      	ldr	r3, [pc, #56]	; (249e4 <system_clock_source_enable+0xa4>)
   249aa:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   249ac:	4b0e      	ldr	r3, [pc, #56]	; (249e8 <system_clock_source_enable+0xa8>)
   249ae:	4798      	blx	r3
		break;
   249b0:	e00e      	b.n	249d0 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   249b2:	4a0b      	ldr	r2, [pc, #44]	; (249e0 <system_clock_source_enable+0xa0>)
   249b4:	490a      	ldr	r1, [pc, #40]	; (249e0 <system_clock_source_enable+0xa0>)
   249b6:	2344      	movs	r3, #68	; 0x44
   249b8:	5ccb      	ldrb	r3, [r1, r3]
   249ba:	b2db      	uxtb	r3, r3
   249bc:	2102      	movs	r1, #2
   249be:	430b      	orrs	r3, r1
   249c0:	b2d9      	uxtb	r1, r3
   249c2:	2344      	movs	r3, #68	; 0x44
   249c4:	54d1      	strb	r1, [r2, r3]
		break;
   249c6:	e003      	b.n	249d0 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   249c8:	2300      	movs	r3, #0
   249ca:	e002      	b.n	249d2 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   249cc:	2317      	movs	r3, #23
   249ce:	e000      	b.n	249d2 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   249d0:	2300      	movs	r3, #0
}
   249d2:	0018      	movs	r0, r3
   249d4:	46bd      	mov	sp, r7
   249d6:	b002      	add	sp, #8
   249d8:	bd80      	pop	{r7, pc}
   249da:	46c0      	nop			; (mov r8, r8)
   249dc:	0002b7e8 	.word	0x0002b7e8
   249e0:	40000800 	.word	0x40000800
   249e4:	200004f0 	.word	0x200004f0
   249e8:	000245d5 	.word	0x000245d5

000249ec <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   249ec:	b580      	push	{r7, lr}
   249ee:	b084      	sub	sp, #16
   249f0:	af00      	add	r7, sp, #0
   249f2:	0002      	movs	r2, r0
   249f4:	1dfb      	adds	r3, r7, #7
   249f6:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   249f8:	2300      	movs	r3, #0
   249fa:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   249fc:	1dfb      	adds	r3, r7, #7
   249fe:	781b      	ldrb	r3, [r3, #0]
   24a00:	2b08      	cmp	r3, #8
   24a02:	d821      	bhi.n	24a48 <system_clock_source_is_ready+0x5c>
   24a04:	009a      	lsls	r2, r3, #2
   24a06:	4b18      	ldr	r3, [pc, #96]	; (24a68 <system_clock_source_is_ready+0x7c>)
   24a08:	18d3      	adds	r3, r2, r3
   24a0a:	681b      	ldr	r3, [r3, #0]
   24a0c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   24a0e:	2308      	movs	r3, #8
   24a10:	60fb      	str	r3, [r7, #12]
		break;
   24a12:	e01b      	b.n	24a4c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   24a14:	2304      	movs	r3, #4
   24a16:	60fb      	str	r3, [r7, #12]
		break;
   24a18:	e018      	b.n	24a4c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   24a1a:	2301      	movs	r3, #1
   24a1c:	60fb      	str	r3, [r7, #12]
		break;
   24a1e:	e015      	b.n	24a4c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   24a20:	2302      	movs	r3, #2
   24a22:	60fb      	str	r3, [r7, #12]
		break;
   24a24:	e012      	b.n	24a4c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
   24a26:	23d0      	movs	r3, #208	; 0xd0
   24a28:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
   24a2a:	e00f      	b.n	24a4c <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   24a2c:	4a0f      	ldr	r2, [pc, #60]	; (24a6c <system_clock_source_is_ready+0x80>)
   24a2e:	2350      	movs	r3, #80	; 0x50
   24a30:	5cd3      	ldrb	r3, [r2, r3]
   24a32:	b2db      	uxtb	r3, r3
   24a34:	001a      	movs	r2, r3
   24a36:	2303      	movs	r3, #3
   24a38:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   24a3a:	3b03      	subs	r3, #3
   24a3c:	425a      	negs	r2, r3
   24a3e:	4153      	adcs	r3, r2
   24a40:	b2db      	uxtb	r3, r3
   24a42:	e00c      	b.n	24a5e <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   24a44:	2301      	movs	r3, #1
   24a46:	e00a      	b.n	24a5e <system_clock_source_is_ready+0x72>

	default:
		return false;
   24a48:	2300      	movs	r3, #0
   24a4a:	e008      	b.n	24a5e <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   24a4c:	4b07      	ldr	r3, [pc, #28]	; (24a6c <system_clock_source_is_ready+0x80>)
   24a4e:	68db      	ldr	r3, [r3, #12]
   24a50:	68fa      	ldr	r2, [r7, #12]
   24a52:	401a      	ands	r2, r3
   24a54:	68fb      	ldr	r3, [r7, #12]
   24a56:	1ad3      	subs	r3, r2, r3
   24a58:	425a      	negs	r2, r3
   24a5a:	4153      	adcs	r3, r2
   24a5c:	b2db      	uxtb	r3, r3
}
   24a5e:	0018      	movs	r0, r3
   24a60:	46bd      	mov	sp, r7
   24a62:	b004      	add	sp, #16
   24a64:	bd80      	pop	{r7, pc}
   24a66:	46c0      	nop			; (mov r8, r8)
   24a68:	0002b80c 	.word	0x0002b80c
   24a6c:	40000800 	.word	0x40000800

00024a70 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   24a70:	b580      	push	{r7, lr}
   24a72:	b082      	sub	sp, #8
   24a74:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
   24a76:	003b      	movs	r3, r7
   24a78:	2202      	movs	r2, #2
   24a7a:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   24a7c:	2300      	movs	r3, #0
   24a7e:	607b      	str	r3, [r7, #4]
   24a80:	e009      	b.n	24a96 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   24a82:	687b      	ldr	r3, [r7, #4]
   24a84:	b2db      	uxtb	r3, r3
   24a86:	003a      	movs	r2, r7
   24a88:	0011      	movs	r1, r2
   24a8a:	0018      	movs	r0, r3
   24a8c:	4b05      	ldr	r3, [pc, #20]	; (24aa4 <_switch_peripheral_gclk+0x34>)
   24a8e:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   24a90:	687b      	ldr	r3, [r7, #4]
   24a92:	3301      	adds	r3, #1
   24a94:	607b      	str	r3, [r7, #4]
   24a96:	687b      	ldr	r3, [r7, #4]
   24a98:	2b24      	cmp	r3, #36	; 0x24
   24a9a:	d9f2      	bls.n	24a82 <_switch_peripheral_gclk+0x12>
	}
}
   24a9c:	46c0      	nop			; (mov r8, r8)
   24a9e:	46bd      	mov	sp, r7
   24aa0:	b002      	add	sp, #8
   24aa2:	bd80      	pop	{r7, pc}
   24aa4:	00025135 	.word	0x00025135

00024aa8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   24aa8:	b580      	push	{r7, lr}
   24aaa:	b0aa      	sub	sp, #168	; 0xa8
   24aac:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   24aae:	4bc1      	ldr	r3, [pc, #772]	; (24db4 <system_clock_init+0x30c>)
   24ab0:	22c2      	movs	r2, #194	; 0xc2
   24ab2:	00d2      	lsls	r2, r2, #3
   24ab4:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   24ab6:	2002      	movs	r0, #2
   24ab8:	4bbf      	ldr	r3, [pc, #764]	; (24db8 <system_clock_init+0x310>)
   24aba:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   24abc:	4bbf      	ldr	r3, [pc, #764]	; (24dbc <system_clock_init+0x314>)
   24abe:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
   24ac0:	2394      	movs	r3, #148	; 0x94
   24ac2:	18fb      	adds	r3, r7, r3
   24ac4:	0018      	movs	r0, r3
   24ac6:	4bbe      	ldr	r3, [pc, #760]	; (24dc0 <system_clock_init+0x318>)
   24ac8:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
   24aca:	2394      	movs	r3, #148	; 0x94
   24acc:	18fb      	adds	r3, r7, r3
   24ace:	2280      	movs	r2, #128	; 0x80
   24ad0:	0212      	lsls	r2, r2, #8
   24ad2:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
   24ad4:	2394      	movs	r3, #148	; 0x94
   24ad6:	18fb      	adds	r3, r7, r3
   24ad8:	2200      	movs	r2, #0
   24ada:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
   24adc:	2394      	movs	r3, #148	; 0x94
   24ade:	18fb      	adds	r3, r7, r3
   24ae0:	2206      	movs	r2, #6
   24ae2:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
   24ae4:	2394      	movs	r3, #148	; 0x94
   24ae6:	18fb      	adds	r3, r7, r3
   24ae8:	2200      	movs	r2, #0
   24aea:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
   24aec:	2394      	movs	r3, #148	; 0x94
   24aee:	18fb      	adds	r3, r7, r3
   24af0:	2200      	movs	r2, #0
   24af2:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
   24af4:	2394      	movs	r3, #148	; 0x94
   24af6:	18fb      	adds	r3, r7, r3
   24af8:	2201      	movs	r2, #1
   24afa:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
   24afc:	2394      	movs	r3, #148	; 0x94
   24afe:	18fb      	adds	r3, r7, r3
   24b00:	2200      	movs	r2, #0
   24b02:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
   24b04:	2394      	movs	r3, #148	; 0x94
   24b06:	18fb      	adds	r3, r7, r3
   24b08:	2201      	movs	r2, #1
   24b0a:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
   24b0c:	2394      	movs	r3, #148	; 0x94
   24b0e:	18fb      	adds	r3, r7, r3
   24b10:	0018      	movs	r0, r3
   24b12:	4bac      	ldr	r3, [pc, #688]	; (24dc4 <system_clock_init+0x31c>)
   24b14:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
   24b16:	2005      	movs	r0, #5
   24b18:	4bab      	ldr	r3, [pc, #684]	; (24dc8 <system_clock_init+0x320>)
   24b1a:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
   24b1c:	46c0      	nop			; (mov r8, r8)
   24b1e:	2005      	movs	r0, #5
   24b20:	4baa      	ldr	r3, [pc, #680]	; (24dcc <system_clock_init+0x324>)
   24b22:	4798      	blx	r3
   24b24:	0003      	movs	r3, r0
   24b26:	001a      	movs	r2, r3
   24b28:	2301      	movs	r3, #1
   24b2a:	4053      	eors	r3, r2
   24b2c:	b2db      	uxtb	r3, r3
   24b2e:	2b00      	cmp	r3, #0
   24b30:	d1f5      	bne.n	24b1e <system_clock_init+0x76>


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
   24b32:	2380      	movs	r3, #128	; 0x80
   24b34:	18fb      	adds	r3, r7, r3
   24b36:	0018      	movs	r0, r3
   24b38:	4ba5      	ldr	r3, [pc, #660]	; (24dd0 <system_clock_init+0x328>)
   24b3a:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
   24b3c:	2380      	movs	r3, #128	; 0x80
   24b3e:	18fb      	adds	r3, r7, r3
   24b40:	2204      	movs	r2, #4
   24b42:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
   24b44:	2380      	movs	r3, #128	; 0x80
   24b46:	18fb      	adds	r3, r7, r3
   24b48:	2200      	movs	r2, #0
   24b4a:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
   24b4c:	4ba1      	ldr	r3, [pc, #644]	; (24dd4 <system_clock_init+0x32c>)
   24b4e:	681b      	ldr	r3, [r3, #0]
   24b50:	0e9b      	lsrs	r3, r3, #26
   24b52:	22a4      	movs	r2, #164	; 0xa4
   24b54:	18ba      	adds	r2, r7, r2
   24b56:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
   24b58:	23a4      	movs	r3, #164	; 0xa4
   24b5a:	18fb      	adds	r3, r7, r3
   24b5c:	681b      	ldr	r3, [r3, #0]
   24b5e:	2b3f      	cmp	r3, #63	; 0x3f
   24b60:	d103      	bne.n	24b6a <system_clock_init+0xc2>
		coarse = 0x1f;
   24b62:	231f      	movs	r3, #31
   24b64:	22a4      	movs	r2, #164	; 0xa4
   24b66:	18ba      	adds	r2, r7, r2
   24b68:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
   24b6a:	23a4      	movs	r3, #164	; 0xa4
   24b6c:	18fb      	adds	r3, r7, r3
   24b6e:	681b      	ldr	r3, [r3, #0]
   24b70:	b2da      	uxtb	r2, r3
   24b72:	2380      	movs	r3, #128	; 0x80
   24b74:	18fb      	adds	r3, r7, r3
   24b76:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   24b78:	2380      	movs	r3, #128	; 0x80
   24b7a:	18fb      	adds	r3, r7, r3
   24b7c:	2200      	movs	r2, #0
   24b7e:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   24b80:	2380      	movs	r3, #128	; 0x80
   24b82:	18fb      	adds	r3, r7, r3
   24b84:	2200      	movs	r2, #0
   24b86:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   24b88:	2380      	movs	r3, #128	; 0x80
   24b8a:	18fb      	adds	r3, r7, r3
   24b8c:	2200      	movs	r2, #0
   24b8e:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   24b90:	2380      	movs	r3, #128	; 0x80
   24b92:	18fb      	adds	r3, r7, r3
   24b94:	2200      	movs	r2, #0
   24b96:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
   24b98:	2380      	movs	r3, #128	; 0x80
   24b9a:	18fb      	adds	r3, r7, r3
   24b9c:	22b7      	movs	r2, #183	; 0xb7
   24b9e:	00d2      	lsls	r2, r2, #3
   24ba0:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
   24ba2:	2380      	movs	r3, #128	; 0x80
   24ba4:	18fb      	adds	r3, r7, r3
   24ba6:	2203      	movs	r2, #3
   24ba8:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
   24baa:	2380      	movs	r3, #128	; 0x80
   24bac:	18fb      	adds	r3, r7, r3
   24bae:	221f      	movs	r2, #31
   24bb0:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
   24bb2:	2380      	movs	r3, #128	; 0x80
   24bb4:	18fb      	adds	r3, r7, r3
   24bb6:	0018      	movs	r0, r3
   24bb8:	4b87      	ldr	r3, [pc, #540]	; (24dd8 <system_clock_init+0x330>)
   24bba:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   24bbc:	237c      	movs	r3, #124	; 0x7c
   24bbe:	18fb      	adds	r3, r7, r3
   24bc0:	0018      	movs	r0, r3
   24bc2:	4b86      	ldr	r3, [pc, #536]	; (24ddc <system_clock_init+0x334>)
   24bc4:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   24bc6:	237c      	movs	r3, #124	; 0x7c
   24bc8:	18fb      	adds	r3, r7, r3
   24bca:	2200      	movs	r2, #0
   24bcc:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   24bce:	237c      	movs	r3, #124	; 0x7c
   24bd0:	18fb      	adds	r3, r7, r3
   24bd2:	2201      	movs	r2, #1
   24bd4:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   24bd6:	237c      	movs	r3, #124	; 0x7c
   24bd8:	18fb      	adds	r3, r7, r3
   24bda:	2201      	movs	r2, #1
   24bdc:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   24bde:	237c      	movs	r3, #124	; 0x7c
   24be0:	18fb      	adds	r3, r7, r3
   24be2:	0018      	movs	r0, r3
   24be4:	4b7e      	ldr	r3, [pc, #504]	; (24de0 <system_clock_init+0x338>)
   24be6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   24be8:	2006      	movs	r0, #6
   24bea:	4b77      	ldr	r3, [pc, #476]	; (24dc8 <system_clock_init+0x320>)
   24bec:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   24bee:	4b7d      	ldr	r3, [pc, #500]	; (24de4 <system_clock_init+0x33c>)
   24bf0:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   24bf2:	2364      	movs	r3, #100	; 0x64
   24bf4:	18fb      	adds	r3, r7, r3
   24bf6:	0018      	movs	r0, r3
   24bf8:	4b7b      	ldr	r3, [pc, #492]	; (24de8 <system_clock_init+0x340>)
   24bfa:	4798      	blx	r3
   24bfc:	2364      	movs	r3, #100	; 0x64
   24bfe:	18fb      	adds	r3, r7, r3
   24c00:	2205      	movs	r2, #5
   24c02:	701a      	strb	r2, [r3, #0]
   24c04:	2364      	movs	r3, #100	; 0x64
   24c06:	18fb      	adds	r3, r7, r3
   24c08:	2201      	movs	r2, #1
   24c0a:	605a      	str	r2, [r3, #4]
   24c0c:	2364      	movs	r3, #100	; 0x64
   24c0e:	18fb      	adds	r3, r7, r3
   24c10:	2200      	movs	r2, #0
   24c12:	721a      	strb	r2, [r3, #8]
   24c14:	2364      	movs	r3, #100	; 0x64
   24c16:	18fb      	adds	r3, r7, r3
   24c18:	2200      	movs	r2, #0
   24c1a:	725a      	strb	r2, [r3, #9]
   24c1c:	2364      	movs	r3, #100	; 0x64
   24c1e:	18fb      	adds	r3, r7, r3
   24c20:	0019      	movs	r1, r3
   24c22:	2001      	movs	r0, #1
   24c24:	4b71      	ldr	r3, [pc, #452]	; (24dec <system_clock_init+0x344>)
   24c26:	4798      	blx	r3
   24c28:	2001      	movs	r0, #1
   24c2a:	4b71      	ldr	r3, [pc, #452]	; (24df0 <system_clock_init+0x348>)
   24c2c:	4798      	blx	r3
   24c2e:	234c      	movs	r3, #76	; 0x4c
   24c30:	18fb      	adds	r3, r7, r3
   24c32:	0018      	movs	r0, r3
   24c34:	4b6c      	ldr	r3, [pc, #432]	; (24de8 <system_clock_init+0x340>)
   24c36:	4798      	blx	r3
   24c38:	234c      	movs	r3, #76	; 0x4c
   24c3a:	18fb      	adds	r3, r7, r3
   24c3c:	2206      	movs	r2, #6
   24c3e:	701a      	strb	r2, [r3, #0]
   24c40:	234c      	movs	r3, #76	; 0x4c
   24c42:	18fb      	adds	r3, r7, r3
   24c44:	2201      	movs	r2, #1
   24c46:	605a      	str	r2, [r3, #4]
   24c48:	234c      	movs	r3, #76	; 0x4c
   24c4a:	18fb      	adds	r3, r7, r3
   24c4c:	2201      	movs	r2, #1
   24c4e:	721a      	strb	r2, [r3, #8]
   24c50:	234c      	movs	r3, #76	; 0x4c
   24c52:	18fb      	adds	r3, r7, r3
   24c54:	2200      	movs	r2, #0
   24c56:	725a      	strb	r2, [r3, #9]
   24c58:	234c      	movs	r3, #76	; 0x4c
   24c5a:	18fb      	adds	r3, r7, r3
   24c5c:	0019      	movs	r1, r3
   24c5e:	2003      	movs	r0, #3
   24c60:	4b62      	ldr	r3, [pc, #392]	; (24dec <system_clock_init+0x344>)
   24c62:	4798      	blx	r3
   24c64:	2003      	movs	r0, #3
   24c66:	4b62      	ldr	r3, [pc, #392]	; (24df0 <system_clock_init+0x348>)
   24c68:	4798      	blx	r3
   24c6a:	2340      	movs	r3, #64	; 0x40
   24c6c:	18fb      	adds	r3, r7, r3
   24c6e:	0018      	movs	r0, r3
   24c70:	4b5d      	ldr	r3, [pc, #372]	; (24de8 <system_clock_init+0x340>)
   24c72:	4798      	blx	r3
   24c74:	2340      	movs	r3, #64	; 0x40
   24c76:	18fb      	adds	r3, r7, r3
   24c78:	2203      	movs	r2, #3
   24c7a:	701a      	strb	r2, [r3, #0]
   24c7c:	2340      	movs	r3, #64	; 0x40
   24c7e:	18fb      	adds	r3, r7, r3
   24c80:	2220      	movs	r2, #32
   24c82:	605a      	str	r2, [r3, #4]
   24c84:	2340      	movs	r3, #64	; 0x40
   24c86:	18fb      	adds	r3, r7, r3
   24c88:	2200      	movs	r2, #0
   24c8a:	721a      	strb	r2, [r3, #8]
   24c8c:	2340      	movs	r3, #64	; 0x40
   24c8e:	18fb      	adds	r3, r7, r3
   24c90:	2200      	movs	r2, #0
   24c92:	725a      	strb	r2, [r3, #9]
   24c94:	2340      	movs	r3, #64	; 0x40
   24c96:	18fb      	adds	r3, r7, r3
   24c98:	0019      	movs	r1, r3
   24c9a:	2004      	movs	r0, #4
   24c9c:	4b53      	ldr	r3, [pc, #332]	; (24dec <system_clock_init+0x344>)
   24c9e:	4798      	blx	r3
   24ca0:	2004      	movs	r0, #4
   24ca2:	4b53      	ldr	r3, [pc, #332]	; (24df0 <system_clock_init+0x348>)
   24ca4:	4798      	blx	r3
   24ca6:	2334      	movs	r3, #52	; 0x34
   24ca8:	18fb      	adds	r3, r7, r3
   24caa:	0018      	movs	r0, r3
   24cac:	4b4e      	ldr	r3, [pc, #312]	; (24de8 <system_clock_init+0x340>)
   24cae:	4798      	blx	r3
   24cb0:	2334      	movs	r3, #52	; 0x34
   24cb2:	18fb      	adds	r3, r7, r3
   24cb4:	2207      	movs	r2, #7
   24cb6:	701a      	strb	r2, [r3, #0]
   24cb8:	2334      	movs	r3, #52	; 0x34
   24cba:	18fb      	adds	r3, r7, r3
   24cbc:	2201      	movs	r2, #1
   24cbe:	605a      	str	r2, [r3, #4]
   24cc0:	2334      	movs	r3, #52	; 0x34
   24cc2:	18fb      	adds	r3, r7, r3
   24cc4:	2200      	movs	r2, #0
   24cc6:	721a      	strb	r2, [r3, #8]
   24cc8:	2334      	movs	r3, #52	; 0x34
   24cca:	18fb      	adds	r3, r7, r3
   24ccc:	2200      	movs	r2, #0
   24cce:	725a      	strb	r2, [r3, #9]
   24cd0:	2334      	movs	r3, #52	; 0x34
   24cd2:	18fb      	adds	r3, r7, r3
   24cd4:	0019      	movs	r1, r3
   24cd6:	2005      	movs	r0, #5
   24cd8:	4b44      	ldr	r3, [pc, #272]	; (24dec <system_clock_init+0x344>)
   24cda:	4798      	blx	r3
   24cdc:	2005      	movs	r0, #5
   24cde:	4b44      	ldr	r3, [pc, #272]	; (24df0 <system_clock_init+0x348>)
   24ce0:	4798      	blx	r3
   24ce2:	2328      	movs	r3, #40	; 0x28
   24ce4:	18fb      	adds	r3, r7, r3
   24ce6:	0018      	movs	r0, r3
   24ce8:	4b3f      	ldr	r3, [pc, #252]	; (24de8 <system_clock_init+0x340>)
   24cea:	4798      	blx	r3
   24cec:	2328      	movs	r3, #40	; 0x28
   24cee:	18fb      	adds	r3, r7, r3
   24cf0:	2206      	movs	r2, #6
   24cf2:	701a      	strb	r2, [r3, #0]
   24cf4:	2328      	movs	r3, #40	; 0x28
   24cf6:	18fb      	adds	r3, r7, r3
   24cf8:	2201      	movs	r2, #1
   24cfa:	605a      	str	r2, [r3, #4]
   24cfc:	2328      	movs	r3, #40	; 0x28
   24cfe:	18fb      	adds	r3, r7, r3
   24d00:	2201      	movs	r2, #1
   24d02:	721a      	strb	r2, [r3, #8]
   24d04:	2328      	movs	r3, #40	; 0x28
   24d06:	18fb      	adds	r3, r7, r3
   24d08:	2200      	movs	r2, #0
   24d0a:	725a      	strb	r2, [r3, #9]
   24d0c:	2328      	movs	r3, #40	; 0x28
   24d0e:	18fb      	adds	r3, r7, r3
   24d10:	0019      	movs	r1, r3
   24d12:	2006      	movs	r0, #6
   24d14:	4b35      	ldr	r3, [pc, #212]	; (24dec <system_clock_init+0x344>)
   24d16:	4798      	blx	r3
   24d18:	2006      	movs	r0, #6
   24d1a:	4b35      	ldr	r3, [pc, #212]	; (24df0 <system_clock_init+0x348>)
   24d1c:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
   24d1e:	230c      	movs	r3, #12
   24d20:	18fb      	adds	r3, r7, r3
   24d22:	0018      	movs	r0, r3
   24d24:	4b33      	ldr	r3, [pc, #204]	; (24df4 <system_clock_init+0x34c>)
   24d26:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
   24d28:	230c      	movs	r3, #12
   24d2a:	18fb      	adds	r3, r7, r3
   24d2c:	2201      	movs	r2, #1
   24d2e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
   24d30:	230c      	movs	r3, #12
   24d32:	18fb      	adds	r3, r7, r3
   24d34:	0019      	movs	r1, r3
   24d36:	2000      	movs	r0, #0
   24d38:	4b2f      	ldr	r3, [pc, #188]	; (24df8 <system_clock_init+0x350>)
   24d3a:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
   24d3c:	2000      	movs	r0, #0
   24d3e:	4b2f      	ldr	r3, [pc, #188]	; (24dfc <system_clock_init+0x354>)
   24d40:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
   24d42:	2007      	movs	r0, #7
   24d44:	4b20      	ldr	r3, [pc, #128]	; (24dc8 <system_clock_init+0x320>)
   24d46:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
   24d48:	46c0      	nop			; (mov r8, r8)
   24d4a:	2007      	movs	r0, #7
   24d4c:	4b1f      	ldr	r3, [pc, #124]	; (24dcc <system_clock_init+0x324>)
   24d4e:	4798      	blx	r3
   24d50:	0003      	movs	r3, r0
   24d52:	001a      	movs	r2, r3
   24d54:	2301      	movs	r3, #1
   24d56:	4053      	eors	r3, r2
   24d58:	b2db      	uxtb	r3, r3
   24d5a:	2b00      	cmp	r3, #0
   24d5c:	d1f5      	bne.n	24d4a <system_clock_init+0x2a2>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   24d5e:	2000      	movs	r0, #0
   24d60:	4b27      	ldr	r3, [pc, #156]	; (24e00 <system_clock_init+0x358>)
   24d62:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   24d64:	2100      	movs	r1, #0
   24d66:	2000      	movs	r0, #0
   24d68:	4b26      	ldr	r3, [pc, #152]	; (24e04 <system_clock_init+0x35c>)
   24d6a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   24d6c:	2100      	movs	r1, #0
   24d6e:	2001      	movs	r0, #1
   24d70:	4b24      	ldr	r3, [pc, #144]	; (24e04 <system_clock_init+0x35c>)
   24d72:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   24d74:	2100      	movs	r1, #0
   24d76:	2002      	movs	r0, #2
   24d78:	4b22      	ldr	r3, [pc, #136]	; (24e04 <system_clock_init+0x35c>)
   24d7a:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   24d7c:	003b      	movs	r3, r7
   24d7e:	0018      	movs	r0, r3
   24d80:	4b19      	ldr	r3, [pc, #100]	; (24de8 <system_clock_init+0x340>)
   24d82:	4798      	blx	r3
   24d84:	003b      	movs	r3, r7
   24d86:	2207      	movs	r2, #7
   24d88:	701a      	strb	r2, [r3, #0]
   24d8a:	003b      	movs	r3, r7
   24d8c:	2201      	movs	r2, #1
   24d8e:	605a      	str	r2, [r3, #4]
   24d90:	003b      	movs	r3, r7
   24d92:	2200      	movs	r2, #0
   24d94:	721a      	strb	r2, [r3, #8]
   24d96:	003b      	movs	r3, r7
   24d98:	2200      	movs	r2, #0
   24d9a:	725a      	strb	r2, [r3, #9]
   24d9c:	003b      	movs	r3, r7
   24d9e:	0019      	movs	r1, r3
   24da0:	2000      	movs	r0, #0
   24da2:	4b12      	ldr	r3, [pc, #72]	; (24dec <system_clock_init+0x344>)
   24da4:	4798      	blx	r3
   24da6:	2000      	movs	r0, #0
   24da8:	4b11      	ldr	r3, [pc, #68]	; (24df0 <system_clock_init+0x348>)
   24daa:	4798      	blx	r3
#endif
}
   24dac:	46c0      	nop			; (mov r8, r8)
   24dae:	46bd      	mov	sp, r7
   24db0:	b02a      	add	sp, #168	; 0xa8
   24db2:	bd80      	pop	{r7, pc}
   24db4:	40000800 	.word	0x40000800
   24db8:	00024585 	.word	0x00024585
   24dbc:	00024a71 	.word	0x00024a71
   24dc0:	00024455 	.word	0x00024455
   24dc4:	00024751 	.word	0x00024751
   24dc8:	00024941 	.word	0x00024941
   24dcc:	000249ed 	.word	0x000249ed
   24dd0:	000244bf 	.word	0x000244bf
   24dd4:	00806024 	.word	0x00806024
   24dd8:	00024871 	.word	0x00024871
   24ddc:	0002449d 	.word	0x0002449d
   24de0:	000246d9 	.word	0x000246d9
   24de4:	00024ead 	.word	0x00024ead
   24de8:	00024411 	.word	0x00024411
   24dec:	00024edd 	.word	0x00024edd
   24df0:	00025001 	.word	0x00025001
   24df4:	0002443f 	.word	0x0002443f
   24df8:	00025135 	.word	0x00025135
   24dfc:	00025179 	.word	0x00025179
   24e00:	00024511 	.word	0x00024511
   24e04:	00024531 	.word	0x00024531

00024e08 <system_apb_clock_set_mask>:
{
   24e08:	b580      	push	{r7, lr}
   24e0a:	b082      	sub	sp, #8
   24e0c:	af00      	add	r7, sp, #0
   24e0e:	0002      	movs	r2, r0
   24e10:	6039      	str	r1, [r7, #0]
   24e12:	1dfb      	adds	r3, r7, #7
   24e14:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   24e16:	1dfb      	adds	r3, r7, #7
   24e18:	781b      	ldrb	r3, [r3, #0]
   24e1a:	2b01      	cmp	r3, #1
   24e1c:	d00a      	beq.n	24e34 <system_apb_clock_set_mask+0x2c>
   24e1e:	2b02      	cmp	r3, #2
   24e20:	d00f      	beq.n	24e42 <system_apb_clock_set_mask+0x3a>
   24e22:	2b00      	cmp	r3, #0
   24e24:	d114      	bne.n	24e50 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   24e26:	4b0e      	ldr	r3, [pc, #56]	; (24e60 <system_apb_clock_set_mask+0x58>)
   24e28:	4a0d      	ldr	r2, [pc, #52]	; (24e60 <system_apb_clock_set_mask+0x58>)
   24e2a:	6991      	ldr	r1, [r2, #24]
   24e2c:	683a      	ldr	r2, [r7, #0]
   24e2e:	430a      	orrs	r2, r1
   24e30:	619a      	str	r2, [r3, #24]
			break;
   24e32:	e00f      	b.n	24e54 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   24e34:	4b0a      	ldr	r3, [pc, #40]	; (24e60 <system_apb_clock_set_mask+0x58>)
   24e36:	4a0a      	ldr	r2, [pc, #40]	; (24e60 <system_apb_clock_set_mask+0x58>)
   24e38:	69d1      	ldr	r1, [r2, #28]
   24e3a:	683a      	ldr	r2, [r7, #0]
   24e3c:	430a      	orrs	r2, r1
   24e3e:	61da      	str	r2, [r3, #28]
			break;
   24e40:	e008      	b.n	24e54 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   24e42:	4b07      	ldr	r3, [pc, #28]	; (24e60 <system_apb_clock_set_mask+0x58>)
   24e44:	4a06      	ldr	r2, [pc, #24]	; (24e60 <system_apb_clock_set_mask+0x58>)
   24e46:	6a11      	ldr	r1, [r2, #32]
   24e48:	683a      	ldr	r2, [r7, #0]
   24e4a:	430a      	orrs	r2, r1
   24e4c:	621a      	str	r2, [r3, #32]
			break;
   24e4e:	e001      	b.n	24e54 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   24e50:	2317      	movs	r3, #23
   24e52:	e000      	b.n	24e56 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   24e54:	2300      	movs	r3, #0
}
   24e56:	0018      	movs	r0, r3
   24e58:	46bd      	mov	sp, r7
   24e5a:	b002      	add	sp, #8
   24e5c:	bd80      	pop	{r7, pc}
   24e5e:	46c0      	nop			; (mov r8, r8)
   24e60:	40000400 	.word	0x40000400

00024e64 <system_interrupt_enter_critical_section>:
{
   24e64:	b580      	push	{r7, lr}
   24e66:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   24e68:	4b02      	ldr	r3, [pc, #8]	; (24e74 <system_interrupt_enter_critical_section+0x10>)
   24e6a:	4798      	blx	r3
}
   24e6c:	46c0      	nop			; (mov r8, r8)
   24e6e:	46bd      	mov	sp, r7
   24e70:	bd80      	pop	{r7, pc}
   24e72:	46c0      	nop			; (mov r8, r8)
   24e74:	0002437d 	.word	0x0002437d

00024e78 <system_interrupt_leave_critical_section>:
{
   24e78:	b580      	push	{r7, lr}
   24e7a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   24e7c:	4b02      	ldr	r3, [pc, #8]	; (24e88 <system_interrupt_leave_critical_section+0x10>)
   24e7e:	4798      	blx	r3
}
   24e80:	46c0      	nop			; (mov r8, r8)
   24e82:	46bd      	mov	sp, r7
   24e84:	bd80      	pop	{r7, pc}
   24e86:	46c0      	nop			; (mov r8, r8)
   24e88:	000243d1 	.word	0x000243d1

00024e8c <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   24e8c:	b580      	push	{r7, lr}
   24e8e:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   24e90:	4b05      	ldr	r3, [pc, #20]	; (24ea8 <system_gclk_is_syncing+0x1c>)
   24e92:	785b      	ldrb	r3, [r3, #1]
   24e94:	b2db      	uxtb	r3, r3
   24e96:	b25b      	sxtb	r3, r3
   24e98:	2b00      	cmp	r3, #0
   24e9a:	da01      	bge.n	24ea0 <system_gclk_is_syncing+0x14>
		return true;
   24e9c:	2301      	movs	r3, #1
   24e9e:	e000      	b.n	24ea2 <system_gclk_is_syncing+0x16>
	}

	return false;
   24ea0:	2300      	movs	r3, #0
}
   24ea2:	0018      	movs	r0, r3
   24ea4:	46bd      	mov	sp, r7
   24ea6:	bd80      	pop	{r7, pc}
   24ea8:	40000c00 	.word	0x40000c00

00024eac <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   24eac:	b580      	push	{r7, lr}
   24eae:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   24eb0:	2108      	movs	r1, #8
   24eb2:	2000      	movs	r0, #0
   24eb4:	4b07      	ldr	r3, [pc, #28]	; (24ed4 <system_gclk_init+0x28>)
   24eb6:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   24eb8:	4b07      	ldr	r3, [pc, #28]	; (24ed8 <system_gclk_init+0x2c>)
   24eba:	2201      	movs	r2, #1
   24ebc:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   24ebe:	46c0      	nop			; (mov r8, r8)
   24ec0:	4b05      	ldr	r3, [pc, #20]	; (24ed8 <system_gclk_init+0x2c>)
   24ec2:	781b      	ldrb	r3, [r3, #0]
   24ec4:	b2db      	uxtb	r3, r3
   24ec6:	001a      	movs	r2, r3
   24ec8:	2301      	movs	r3, #1
   24eca:	4013      	ands	r3, r2
   24ecc:	d1f8      	bne.n	24ec0 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   24ece:	46c0      	nop			; (mov r8, r8)
   24ed0:	46bd      	mov	sp, r7
   24ed2:	bd80      	pop	{r7, pc}
   24ed4:	00024e09 	.word	0x00024e09
   24ed8:	40000c00 	.word	0x40000c00

00024edc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   24edc:	b580      	push	{r7, lr}
   24ede:	b086      	sub	sp, #24
   24ee0:	af00      	add	r7, sp, #0
   24ee2:	0002      	movs	r2, r0
   24ee4:	6039      	str	r1, [r7, #0]
   24ee6:	1dfb      	adds	r3, r7, #7
   24ee8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   24eea:	1dfb      	adds	r3, r7, #7
   24eec:	781b      	ldrb	r3, [r3, #0]
   24eee:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   24ef0:	1dfb      	adds	r3, r7, #7
   24ef2:	781b      	ldrb	r3, [r3, #0]
   24ef4:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   24ef6:	683b      	ldr	r3, [r7, #0]
   24ef8:	781b      	ldrb	r3, [r3, #0]
   24efa:	021b      	lsls	r3, r3, #8
   24efc:	001a      	movs	r2, r3
   24efe:	697b      	ldr	r3, [r7, #20]
   24f00:	4313      	orrs	r3, r2
   24f02:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   24f04:	683b      	ldr	r3, [r7, #0]
   24f06:	785b      	ldrb	r3, [r3, #1]
   24f08:	2b00      	cmp	r3, #0
   24f0a:	d004      	beq.n	24f16 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   24f0c:	697b      	ldr	r3, [r7, #20]
   24f0e:	2280      	movs	r2, #128	; 0x80
   24f10:	02d2      	lsls	r2, r2, #11
   24f12:	4313      	orrs	r3, r2
   24f14:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   24f16:	683b      	ldr	r3, [r7, #0]
   24f18:	7a5b      	ldrb	r3, [r3, #9]
   24f1a:	2b00      	cmp	r3, #0
   24f1c:	d004      	beq.n	24f28 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   24f1e:	697b      	ldr	r3, [r7, #20]
   24f20:	2280      	movs	r2, #128	; 0x80
   24f22:	0312      	lsls	r2, r2, #12
   24f24:	4313      	orrs	r3, r2
   24f26:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   24f28:	683b      	ldr	r3, [r7, #0]
   24f2a:	685b      	ldr	r3, [r3, #4]
   24f2c:	2b01      	cmp	r3, #1
   24f2e:	d92c      	bls.n	24f8a <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   24f30:	683b      	ldr	r3, [r7, #0]
   24f32:	685a      	ldr	r2, [r3, #4]
   24f34:	683b      	ldr	r3, [r7, #0]
   24f36:	685b      	ldr	r3, [r3, #4]
   24f38:	3b01      	subs	r3, #1
   24f3a:	4013      	ands	r3, r2
   24f3c:	d11a      	bne.n	24f74 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   24f3e:	2300      	movs	r3, #0
   24f40:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   24f42:	2302      	movs	r3, #2
   24f44:	60bb      	str	r3, [r7, #8]
   24f46:	e005      	b.n	24f54 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   24f48:	68fb      	ldr	r3, [r7, #12]
   24f4a:	3301      	adds	r3, #1
   24f4c:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   24f4e:	68bb      	ldr	r3, [r7, #8]
   24f50:	005b      	lsls	r3, r3, #1
   24f52:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   24f54:	683b      	ldr	r3, [r7, #0]
   24f56:	685a      	ldr	r2, [r3, #4]
   24f58:	68bb      	ldr	r3, [r7, #8]
   24f5a:	429a      	cmp	r2, r3
   24f5c:	d8f4      	bhi.n	24f48 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   24f5e:	68fb      	ldr	r3, [r7, #12]
   24f60:	021b      	lsls	r3, r3, #8
   24f62:	693a      	ldr	r2, [r7, #16]
   24f64:	4313      	orrs	r3, r2
   24f66:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   24f68:	697b      	ldr	r3, [r7, #20]
   24f6a:	2280      	movs	r2, #128	; 0x80
   24f6c:	0352      	lsls	r2, r2, #13
   24f6e:	4313      	orrs	r3, r2
   24f70:	617b      	str	r3, [r7, #20]
   24f72:	e00a      	b.n	24f8a <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   24f74:	683b      	ldr	r3, [r7, #0]
   24f76:	685b      	ldr	r3, [r3, #4]
   24f78:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   24f7a:	693a      	ldr	r2, [r7, #16]
   24f7c:	4313      	orrs	r3, r2
   24f7e:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   24f80:	697b      	ldr	r3, [r7, #20]
   24f82:	2280      	movs	r2, #128	; 0x80
   24f84:	0292      	lsls	r2, r2, #10
   24f86:	4313      	orrs	r3, r2
   24f88:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   24f8a:	683b      	ldr	r3, [r7, #0]
   24f8c:	7a1b      	ldrb	r3, [r3, #8]
   24f8e:	2b00      	cmp	r3, #0
   24f90:	d004      	beq.n	24f9c <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   24f92:	697b      	ldr	r3, [r7, #20]
   24f94:	2280      	movs	r2, #128	; 0x80
   24f96:	0392      	lsls	r2, r2, #14
   24f98:	4313      	orrs	r3, r2
   24f9a:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   24f9c:	46c0      	nop			; (mov r8, r8)
   24f9e:	4b13      	ldr	r3, [pc, #76]	; (24fec <system_gclk_gen_set_config+0x110>)
   24fa0:	4798      	blx	r3
   24fa2:	1e03      	subs	r3, r0, #0
   24fa4:	d1fb      	bne.n	24f9e <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   24fa6:	4b12      	ldr	r3, [pc, #72]	; (24ff0 <system_gclk_gen_set_config+0x114>)
   24fa8:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   24faa:	4a12      	ldr	r2, [pc, #72]	; (24ff4 <system_gclk_gen_set_config+0x118>)
   24fac:	1dfb      	adds	r3, r7, #7
   24fae:	781b      	ldrb	r3, [r3, #0]
   24fb0:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   24fb2:	46c0      	nop			; (mov r8, r8)
   24fb4:	4b0d      	ldr	r3, [pc, #52]	; (24fec <system_gclk_gen_set_config+0x110>)
   24fb6:	4798      	blx	r3
   24fb8:	1e03      	subs	r3, r0, #0
   24fba:	d1fb      	bne.n	24fb4 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   24fbc:	4b0e      	ldr	r3, [pc, #56]	; (24ff8 <system_gclk_gen_set_config+0x11c>)
   24fbe:	693a      	ldr	r2, [r7, #16]
   24fc0:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   24fc2:	46c0      	nop			; (mov r8, r8)
   24fc4:	4b09      	ldr	r3, [pc, #36]	; (24fec <system_gclk_gen_set_config+0x110>)
   24fc6:	4798      	blx	r3
   24fc8:	1e03      	subs	r3, r0, #0
   24fca:	d1fb      	bne.n	24fc4 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   24fcc:	4b0a      	ldr	r3, [pc, #40]	; (24ff8 <system_gclk_gen_set_config+0x11c>)
   24fce:	4a0a      	ldr	r2, [pc, #40]	; (24ff8 <system_gclk_gen_set_config+0x11c>)
   24fd0:	6851      	ldr	r1, [r2, #4]
   24fd2:	2280      	movs	r2, #128	; 0x80
   24fd4:	0252      	lsls	r2, r2, #9
   24fd6:	4011      	ands	r1, r2
   24fd8:	697a      	ldr	r2, [r7, #20]
   24fda:	430a      	orrs	r2, r1
   24fdc:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   24fde:	4b07      	ldr	r3, [pc, #28]	; (24ffc <system_gclk_gen_set_config+0x120>)
   24fe0:	4798      	blx	r3
}
   24fe2:	46c0      	nop			; (mov r8, r8)
   24fe4:	46bd      	mov	sp, r7
   24fe6:	b006      	add	sp, #24
   24fe8:	bd80      	pop	{r7, pc}
   24fea:	46c0      	nop			; (mov r8, r8)
   24fec:	00024e8d 	.word	0x00024e8d
   24ff0:	00024e65 	.word	0x00024e65
   24ff4:	40000c08 	.word	0x40000c08
   24ff8:	40000c00 	.word	0x40000c00
   24ffc:	00024e79 	.word	0x00024e79

00025000 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   25000:	b580      	push	{r7, lr}
   25002:	b082      	sub	sp, #8
   25004:	af00      	add	r7, sp, #0
   25006:	0002      	movs	r2, r0
   25008:	1dfb      	adds	r3, r7, #7
   2500a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2500c:	46c0      	nop			; (mov r8, r8)
   2500e:	4b0e      	ldr	r3, [pc, #56]	; (25048 <system_gclk_gen_enable+0x48>)
   25010:	4798      	blx	r3
   25012:	1e03      	subs	r3, r0, #0
   25014:	d1fb      	bne.n	2500e <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   25016:	4b0d      	ldr	r3, [pc, #52]	; (2504c <system_gclk_gen_enable+0x4c>)
   25018:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2501a:	4a0d      	ldr	r2, [pc, #52]	; (25050 <system_gclk_gen_enable+0x50>)
   2501c:	1dfb      	adds	r3, r7, #7
   2501e:	781b      	ldrb	r3, [r3, #0]
   25020:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   25022:	46c0      	nop			; (mov r8, r8)
   25024:	4b08      	ldr	r3, [pc, #32]	; (25048 <system_gclk_gen_enable+0x48>)
   25026:	4798      	blx	r3
   25028:	1e03      	subs	r3, r0, #0
   2502a:	d1fb      	bne.n	25024 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   2502c:	4b09      	ldr	r3, [pc, #36]	; (25054 <system_gclk_gen_enable+0x54>)
   2502e:	4a09      	ldr	r2, [pc, #36]	; (25054 <system_gclk_gen_enable+0x54>)
   25030:	6852      	ldr	r2, [r2, #4]
   25032:	2180      	movs	r1, #128	; 0x80
   25034:	0249      	lsls	r1, r1, #9
   25036:	430a      	orrs	r2, r1
   25038:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2503a:	4b07      	ldr	r3, [pc, #28]	; (25058 <system_gclk_gen_enable+0x58>)
   2503c:	4798      	blx	r3
}
   2503e:	46c0      	nop			; (mov r8, r8)
   25040:	46bd      	mov	sp, r7
   25042:	b002      	add	sp, #8
   25044:	bd80      	pop	{r7, pc}
   25046:	46c0      	nop			; (mov r8, r8)
   25048:	00024e8d 	.word	0x00024e8d
   2504c:	00024e65 	.word	0x00024e65
   25050:	40000c04 	.word	0x40000c04
   25054:	40000c00 	.word	0x40000c00
   25058:	00024e79 	.word	0x00024e79

0002505c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   2505c:	b580      	push	{r7, lr}
   2505e:	b086      	sub	sp, #24
   25060:	af00      	add	r7, sp, #0
   25062:	0002      	movs	r2, r0
   25064:	1dfb      	adds	r3, r7, #7
   25066:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   25068:	46c0      	nop			; (mov r8, r8)
   2506a:	4b2a      	ldr	r3, [pc, #168]	; (25114 <system_gclk_gen_get_hz+0xb8>)
   2506c:	4798      	blx	r3
   2506e:	1e03      	subs	r3, r0, #0
   25070:	d1fb      	bne.n	2506a <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   25072:	4b29      	ldr	r3, [pc, #164]	; (25118 <system_gclk_gen_get_hz+0xbc>)
   25074:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   25076:	4a29      	ldr	r2, [pc, #164]	; (2511c <system_gclk_gen_get_hz+0xc0>)
   25078:	1dfb      	adds	r3, r7, #7
   2507a:	781b      	ldrb	r3, [r3, #0]
   2507c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2507e:	46c0      	nop			; (mov r8, r8)
   25080:	4b24      	ldr	r3, [pc, #144]	; (25114 <system_gclk_gen_get_hz+0xb8>)
   25082:	4798      	blx	r3
   25084:	1e03      	subs	r3, r0, #0
   25086:	d1fb      	bne.n	25080 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   25088:	4b25      	ldr	r3, [pc, #148]	; (25120 <system_gclk_gen_get_hz+0xc4>)
   2508a:	685b      	ldr	r3, [r3, #4]
   2508c:	04db      	lsls	r3, r3, #19
   2508e:	0edb      	lsrs	r3, r3, #27
   25090:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   25092:	0018      	movs	r0, r3
   25094:	4b23      	ldr	r3, [pc, #140]	; (25124 <system_gclk_gen_get_hz+0xc8>)
   25096:	4798      	blx	r3
   25098:	0003      	movs	r3, r0
   2509a:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2509c:	4a1f      	ldr	r2, [pc, #124]	; (2511c <system_gclk_gen_get_hz+0xc0>)
   2509e:	1dfb      	adds	r3, r7, #7
   250a0:	781b      	ldrb	r3, [r3, #0]
   250a2:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   250a4:	4b1e      	ldr	r3, [pc, #120]	; (25120 <system_gclk_gen_get_hz+0xc4>)
   250a6:	685b      	ldr	r3, [r3, #4]
   250a8:	02db      	lsls	r3, r3, #11
   250aa:	0fdb      	lsrs	r3, r3, #31
   250ac:	b2da      	uxtb	r2, r3
   250ae:	2313      	movs	r3, #19
   250b0:	18fb      	adds	r3, r7, r3
   250b2:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   250b4:	4a1c      	ldr	r2, [pc, #112]	; (25128 <system_gclk_gen_get_hz+0xcc>)
   250b6:	1dfb      	adds	r3, r7, #7
   250b8:	781b      	ldrb	r3, [r3, #0]
   250ba:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   250bc:	46c0      	nop			; (mov r8, r8)
   250be:	4b15      	ldr	r3, [pc, #84]	; (25114 <system_gclk_gen_get_hz+0xb8>)
   250c0:	4798      	blx	r3
   250c2:	1e03      	subs	r3, r0, #0
   250c4:	d1fb      	bne.n	250be <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   250c6:	4b16      	ldr	r3, [pc, #88]	; (25120 <system_gclk_gen_get_hz+0xc4>)
   250c8:	689b      	ldr	r3, [r3, #8]
   250ca:	021b      	lsls	r3, r3, #8
   250cc:	0c1b      	lsrs	r3, r3, #16
   250ce:	b29b      	uxth	r3, r3
   250d0:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   250d2:	4b16      	ldr	r3, [pc, #88]	; (2512c <system_gclk_gen_get_hz+0xd0>)
   250d4:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   250d6:	2313      	movs	r3, #19
   250d8:	18fb      	adds	r3, r7, r3
   250da:	781b      	ldrb	r3, [r3, #0]
   250dc:	2b00      	cmp	r3, #0
   250de:	d109      	bne.n	250f4 <system_gclk_gen_get_hz+0x98>
   250e0:	68fb      	ldr	r3, [r7, #12]
   250e2:	2b01      	cmp	r3, #1
   250e4:	d906      	bls.n	250f4 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   250e6:	4b12      	ldr	r3, [pc, #72]	; (25130 <system_gclk_gen_get_hz+0xd4>)
   250e8:	68f9      	ldr	r1, [r7, #12]
   250ea:	6978      	ldr	r0, [r7, #20]
   250ec:	4798      	blx	r3
   250ee:	0003      	movs	r3, r0
   250f0:	617b      	str	r3, [r7, #20]
   250f2:	e00a      	b.n	2510a <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   250f4:	2313      	movs	r3, #19
   250f6:	18fb      	adds	r3, r7, r3
   250f8:	781b      	ldrb	r3, [r3, #0]
   250fa:	2b00      	cmp	r3, #0
   250fc:	d005      	beq.n	2510a <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   250fe:	68fb      	ldr	r3, [r7, #12]
   25100:	3301      	adds	r3, #1
   25102:	697a      	ldr	r2, [r7, #20]
   25104:	40da      	lsrs	r2, r3
   25106:	0013      	movs	r3, r2
   25108:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   2510a:	697b      	ldr	r3, [r7, #20]
}
   2510c:	0018      	movs	r0, r3
   2510e:	46bd      	mov	sp, r7
   25110:	b006      	add	sp, #24
   25112:	bd80      	pop	{r7, pc}
   25114:	00024e8d 	.word	0x00024e8d
   25118:	00024e65 	.word	0x00024e65
   2511c:	40000c04 	.word	0x40000c04
   25120:	40000c00 	.word	0x40000c00
   25124:	00024619 	.word	0x00024619
   25128:	40000c08 	.word	0x40000c08
   2512c:	00024e79 	.word	0x00024e79
   25130:	00026c7d 	.word	0x00026c7d

00025134 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   25134:	b580      	push	{r7, lr}
   25136:	b084      	sub	sp, #16
   25138:	af00      	add	r7, sp, #0
   2513a:	0002      	movs	r2, r0
   2513c:	6039      	str	r1, [r7, #0]
   2513e:	1dfb      	adds	r3, r7, #7
   25140:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   25142:	1dfb      	adds	r3, r7, #7
   25144:	781b      	ldrb	r3, [r3, #0]
   25146:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   25148:	683b      	ldr	r3, [r7, #0]
   2514a:	781b      	ldrb	r3, [r3, #0]
   2514c:	021b      	lsls	r3, r3, #8
   2514e:	001a      	movs	r2, r3
   25150:	68fb      	ldr	r3, [r7, #12]
   25152:	4313      	orrs	r3, r2
   25154:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   25156:	1dfb      	adds	r3, r7, #7
   25158:	781b      	ldrb	r3, [r3, #0]
   2515a:	0018      	movs	r0, r3
   2515c:	4b04      	ldr	r3, [pc, #16]	; (25170 <system_gclk_chan_set_config+0x3c>)
   2515e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   25160:	4b04      	ldr	r3, [pc, #16]	; (25174 <system_gclk_chan_set_config+0x40>)
   25162:	68fa      	ldr	r2, [r7, #12]
   25164:	b292      	uxth	r2, r2
   25166:	805a      	strh	r2, [r3, #2]
}
   25168:	46c0      	nop			; (mov r8, r8)
   2516a:	46bd      	mov	sp, r7
   2516c:	b004      	add	sp, #16
   2516e:	bd80      	pop	{r7, pc}
   25170:	000251c1 	.word	0x000251c1
   25174:	40000c00 	.word	0x40000c00

00025178 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   25178:	b580      	push	{r7, lr}
   2517a:	b082      	sub	sp, #8
   2517c:	af00      	add	r7, sp, #0
   2517e:	0002      	movs	r2, r0
   25180:	1dfb      	adds	r3, r7, #7
   25182:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   25184:	4b0a      	ldr	r3, [pc, #40]	; (251b0 <system_gclk_chan_enable+0x38>)
   25186:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   25188:	4a0a      	ldr	r2, [pc, #40]	; (251b4 <system_gclk_chan_enable+0x3c>)
   2518a:	1dfb      	adds	r3, r7, #7
   2518c:	781b      	ldrb	r3, [r3, #0]
   2518e:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   25190:	4909      	ldr	r1, [pc, #36]	; (251b8 <system_gclk_chan_enable+0x40>)
   25192:	4b09      	ldr	r3, [pc, #36]	; (251b8 <system_gclk_chan_enable+0x40>)
   25194:	885b      	ldrh	r3, [r3, #2]
   25196:	b29b      	uxth	r3, r3
   25198:	2280      	movs	r2, #128	; 0x80
   2519a:	01d2      	lsls	r2, r2, #7
   2519c:	4313      	orrs	r3, r2
   2519e:	b29b      	uxth	r3, r3
   251a0:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   251a2:	4b06      	ldr	r3, [pc, #24]	; (251bc <system_gclk_chan_enable+0x44>)
   251a4:	4798      	blx	r3
}
   251a6:	46c0      	nop			; (mov r8, r8)
   251a8:	46bd      	mov	sp, r7
   251aa:	b002      	add	sp, #8
   251ac:	bd80      	pop	{r7, pc}
   251ae:	46c0      	nop			; (mov r8, r8)
   251b0:	00024e65 	.word	0x00024e65
   251b4:	40000c02 	.word	0x40000c02
   251b8:	40000c00 	.word	0x40000c00
   251bc:	00024e79 	.word	0x00024e79

000251c0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   251c0:	b580      	push	{r7, lr}
   251c2:	b084      	sub	sp, #16
   251c4:	af00      	add	r7, sp, #0
   251c6:	0002      	movs	r2, r0
   251c8:	1dfb      	adds	r3, r7, #7
   251ca:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   251cc:	4b1c      	ldr	r3, [pc, #112]	; (25240 <system_gclk_chan_disable+0x80>)
   251ce:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   251d0:	4a1c      	ldr	r2, [pc, #112]	; (25244 <system_gclk_chan_disable+0x84>)
   251d2:	1dfb      	adds	r3, r7, #7
   251d4:	781b      	ldrb	r3, [r3, #0]
   251d6:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   251d8:	4b1b      	ldr	r3, [pc, #108]	; (25248 <system_gclk_chan_disable+0x88>)
   251da:	885b      	ldrh	r3, [r3, #2]
   251dc:	051b      	lsls	r3, r3, #20
   251de:	0f1b      	lsrs	r3, r3, #28
   251e0:	b2db      	uxtb	r3, r3
   251e2:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   251e4:	4a18      	ldr	r2, [pc, #96]	; (25248 <system_gclk_chan_disable+0x88>)
   251e6:	8853      	ldrh	r3, [r2, #2]
   251e8:	4918      	ldr	r1, [pc, #96]	; (2524c <system_gclk_chan_disable+0x8c>)
   251ea:	400b      	ands	r3, r1
   251ec:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   251ee:	4a16      	ldr	r2, [pc, #88]	; (25248 <system_gclk_chan_disable+0x88>)
   251f0:	4b15      	ldr	r3, [pc, #84]	; (25248 <system_gclk_chan_disable+0x88>)
   251f2:	885b      	ldrh	r3, [r3, #2]
   251f4:	b29b      	uxth	r3, r3
   251f6:	4916      	ldr	r1, [pc, #88]	; (25250 <system_gclk_chan_disable+0x90>)
   251f8:	400b      	ands	r3, r1
   251fa:	b29b      	uxth	r3, r3
   251fc:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   251fe:	46c0      	nop			; (mov r8, r8)
   25200:	4b11      	ldr	r3, [pc, #68]	; (25248 <system_gclk_chan_disable+0x88>)
   25202:	885b      	ldrh	r3, [r3, #2]
   25204:	b29b      	uxth	r3, r3
   25206:	001a      	movs	r2, r3
   25208:	2380      	movs	r3, #128	; 0x80
   2520a:	01db      	lsls	r3, r3, #7
   2520c:	4013      	ands	r3, r2
   2520e:	d1f7      	bne.n	25200 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   25210:	4a0d      	ldr	r2, [pc, #52]	; (25248 <system_gclk_chan_disable+0x88>)
   25212:	68fb      	ldr	r3, [r7, #12]
   25214:	b2db      	uxtb	r3, r3
   25216:	1c19      	adds	r1, r3, #0
   25218:	230f      	movs	r3, #15
   2521a:	400b      	ands	r3, r1
   2521c:	b2d9      	uxtb	r1, r3
   2521e:	8853      	ldrh	r3, [r2, #2]
   25220:	1c08      	adds	r0, r1, #0
   25222:	210f      	movs	r1, #15
   25224:	4001      	ands	r1, r0
   25226:	0208      	lsls	r0, r1, #8
   25228:	4908      	ldr	r1, [pc, #32]	; (2524c <system_gclk_chan_disable+0x8c>)
   2522a:	400b      	ands	r3, r1
   2522c:	1c19      	adds	r1, r3, #0
   2522e:	1c03      	adds	r3, r0, #0
   25230:	430b      	orrs	r3, r1
   25232:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   25234:	4b07      	ldr	r3, [pc, #28]	; (25254 <system_gclk_chan_disable+0x94>)
   25236:	4798      	blx	r3
}
   25238:	46c0      	nop			; (mov r8, r8)
   2523a:	46bd      	mov	sp, r7
   2523c:	b004      	add	sp, #16
   2523e:	bd80      	pop	{r7, pc}
   25240:	00024e65 	.word	0x00024e65
   25244:	40000c02 	.word	0x40000c02
   25248:	40000c00 	.word	0x40000c00
   2524c:	fffff0ff 	.word	0xfffff0ff
   25250:	ffffbfff 	.word	0xffffbfff
   25254:	00024e79 	.word	0x00024e79

00025258 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   25258:	b580      	push	{r7, lr}
   2525a:	b084      	sub	sp, #16
   2525c:	af00      	add	r7, sp, #0
   2525e:	0002      	movs	r2, r0
   25260:	1dfb      	adds	r3, r7, #7
   25262:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   25264:	4b0d      	ldr	r3, [pc, #52]	; (2529c <system_gclk_chan_get_hz+0x44>)
   25266:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   25268:	4a0d      	ldr	r2, [pc, #52]	; (252a0 <system_gclk_chan_get_hz+0x48>)
   2526a:	1dfb      	adds	r3, r7, #7
   2526c:	781b      	ldrb	r3, [r3, #0]
   2526e:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   25270:	4b0c      	ldr	r3, [pc, #48]	; (252a4 <system_gclk_chan_get_hz+0x4c>)
   25272:	885b      	ldrh	r3, [r3, #2]
   25274:	051b      	lsls	r3, r3, #20
   25276:	0f1b      	lsrs	r3, r3, #28
   25278:	b2da      	uxtb	r2, r3
   2527a:	230f      	movs	r3, #15
   2527c:	18fb      	adds	r3, r7, r3
   2527e:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   25280:	4b09      	ldr	r3, [pc, #36]	; (252a8 <system_gclk_chan_get_hz+0x50>)
   25282:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   25284:	230f      	movs	r3, #15
   25286:	18fb      	adds	r3, r7, r3
   25288:	781b      	ldrb	r3, [r3, #0]
   2528a:	0018      	movs	r0, r3
   2528c:	4b07      	ldr	r3, [pc, #28]	; (252ac <system_gclk_chan_get_hz+0x54>)
   2528e:	4798      	blx	r3
   25290:	0003      	movs	r3, r0
}
   25292:	0018      	movs	r0, r3
   25294:	46bd      	mov	sp, r7
   25296:	b004      	add	sp, #16
   25298:	bd80      	pop	{r7, pc}
   2529a:	46c0      	nop			; (mov r8, r8)
   2529c:	00024e65 	.word	0x00024e65
   252a0:	40000c02 	.word	0x40000c02
   252a4:	40000c00 	.word	0x40000c00
   252a8:	00024e79 	.word	0x00024e79
   252ac:	0002505d 	.word	0x0002505d

000252b0 <system_pinmux_get_group_from_gpio_pin>:
{
   252b0:	b580      	push	{r7, lr}
   252b2:	b084      	sub	sp, #16
   252b4:	af00      	add	r7, sp, #0
   252b6:	0002      	movs	r2, r0
   252b8:	1dfb      	adds	r3, r7, #7
   252ba:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   252bc:	230f      	movs	r3, #15
   252be:	18fb      	adds	r3, r7, r3
   252c0:	1dfa      	adds	r2, r7, #7
   252c2:	7812      	ldrb	r2, [r2, #0]
   252c4:	09d2      	lsrs	r2, r2, #7
   252c6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   252c8:	230e      	movs	r3, #14
   252ca:	18fb      	adds	r3, r7, r3
   252cc:	1dfa      	adds	r2, r7, #7
   252ce:	7812      	ldrb	r2, [r2, #0]
   252d0:	0952      	lsrs	r2, r2, #5
   252d2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   252d4:	4b0d      	ldr	r3, [pc, #52]	; (2530c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   252d6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   252d8:	230f      	movs	r3, #15
   252da:	18fb      	adds	r3, r7, r3
   252dc:	781b      	ldrb	r3, [r3, #0]
   252de:	2b00      	cmp	r3, #0
   252e0:	d10f      	bne.n	25302 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   252e2:	230f      	movs	r3, #15
   252e4:	18fb      	adds	r3, r7, r3
   252e6:	781b      	ldrb	r3, [r3, #0]
   252e8:	009b      	lsls	r3, r3, #2
   252ea:	2210      	movs	r2, #16
   252ec:	4694      	mov	ip, r2
   252ee:	44bc      	add	ip, r7
   252f0:	4463      	add	r3, ip
   252f2:	3b08      	subs	r3, #8
   252f4:	681a      	ldr	r2, [r3, #0]
   252f6:	230e      	movs	r3, #14
   252f8:	18fb      	adds	r3, r7, r3
   252fa:	781b      	ldrb	r3, [r3, #0]
   252fc:	01db      	lsls	r3, r3, #7
   252fe:	18d3      	adds	r3, r2, r3
   25300:	e000      	b.n	25304 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   25302:	2300      	movs	r3, #0
}
   25304:	0018      	movs	r0, r3
   25306:	46bd      	mov	sp, r7
   25308:	b004      	add	sp, #16
   2530a:	bd80      	pop	{r7, pc}
   2530c:	41004400 	.word	0x41004400

00025310 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   25310:	b580      	push	{r7, lr}
   25312:	b088      	sub	sp, #32
   25314:	af00      	add	r7, sp, #0
   25316:	60f8      	str	r0, [r7, #12]
   25318:	60b9      	str	r1, [r7, #8]
   2531a:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   2531c:	2300      	movs	r3, #0
   2531e:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   25320:	687b      	ldr	r3, [r7, #4]
   25322:	78db      	ldrb	r3, [r3, #3]
   25324:	2201      	movs	r2, #1
   25326:	4053      	eors	r3, r2
   25328:	b2db      	uxtb	r3, r3
   2532a:	2b00      	cmp	r3, #0
   2532c:	d035      	beq.n	2539a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   2532e:	687b      	ldr	r3, [r7, #4]
   25330:	781b      	ldrb	r3, [r3, #0]
   25332:	2b80      	cmp	r3, #128	; 0x80
   25334:	d00b      	beq.n	2534e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   25336:	69fb      	ldr	r3, [r7, #28]
   25338:	2280      	movs	r2, #128	; 0x80
   2533a:	0252      	lsls	r2, r2, #9
   2533c:	4313      	orrs	r3, r2
   2533e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   25340:	687b      	ldr	r3, [r7, #4]
   25342:	781b      	ldrb	r3, [r3, #0]
   25344:	061b      	lsls	r3, r3, #24
   25346:	001a      	movs	r2, r3
   25348:	69fb      	ldr	r3, [r7, #28]
   2534a:	4313      	orrs	r3, r2
   2534c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2534e:	687b      	ldr	r3, [r7, #4]
   25350:	785b      	ldrb	r3, [r3, #1]
   25352:	2b00      	cmp	r3, #0
   25354:	d003      	beq.n	2535e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   25356:	687b      	ldr	r3, [r7, #4]
   25358:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2535a:	2b02      	cmp	r3, #2
   2535c:	d110      	bne.n	25380 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   2535e:	69fb      	ldr	r3, [r7, #28]
   25360:	2280      	movs	r2, #128	; 0x80
   25362:	0292      	lsls	r2, r2, #10
   25364:	4313      	orrs	r3, r2
   25366:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   25368:	687b      	ldr	r3, [r7, #4]
   2536a:	789b      	ldrb	r3, [r3, #2]
   2536c:	2b00      	cmp	r3, #0
   2536e:	d004      	beq.n	2537a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   25370:	69fb      	ldr	r3, [r7, #28]
   25372:	2280      	movs	r2, #128	; 0x80
   25374:	02d2      	lsls	r2, r2, #11
   25376:	4313      	orrs	r3, r2
   25378:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   2537a:	68fb      	ldr	r3, [r7, #12]
   2537c:	68ba      	ldr	r2, [r7, #8]
   2537e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   25380:	687b      	ldr	r3, [r7, #4]
   25382:	785b      	ldrb	r3, [r3, #1]
   25384:	2b01      	cmp	r3, #1
   25386:	d003      	beq.n	25390 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   25388:	687b      	ldr	r3, [r7, #4]
   2538a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2538c:	2b02      	cmp	r3, #2
   2538e:	d107      	bne.n	253a0 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   25390:	69fb      	ldr	r3, [r7, #28]
   25392:	4a22      	ldr	r2, [pc, #136]	; (2541c <_system_pinmux_config+0x10c>)
   25394:	4013      	ands	r3, r2
   25396:	61fb      	str	r3, [r7, #28]
   25398:	e002      	b.n	253a0 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   2539a:	68fb      	ldr	r3, [r7, #12]
   2539c:	68ba      	ldr	r2, [r7, #8]
   2539e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   253a0:	68bb      	ldr	r3, [r7, #8]
   253a2:	041b      	lsls	r3, r3, #16
   253a4:	0c1b      	lsrs	r3, r3, #16
   253a6:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   253a8:	68bb      	ldr	r3, [r7, #8]
   253aa:	0c1b      	lsrs	r3, r3, #16
   253ac:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   253ae:	69ba      	ldr	r2, [r7, #24]
   253b0:	69fb      	ldr	r3, [r7, #28]
   253b2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   253b4:	22a0      	movs	r2, #160	; 0xa0
   253b6:	05d2      	lsls	r2, r2, #23
   253b8:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   253ba:	68fb      	ldr	r3, [r7, #12]
   253bc:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   253be:	697a      	ldr	r2, [r7, #20]
   253c0:	69fb      	ldr	r3, [r7, #28]
   253c2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   253c4:	22d0      	movs	r2, #208	; 0xd0
   253c6:	0612      	lsls	r2, r2, #24
   253c8:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   253ca:	68fb      	ldr	r3, [r7, #12]
   253cc:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   253ce:	687b      	ldr	r3, [r7, #4]
   253d0:	78db      	ldrb	r3, [r3, #3]
   253d2:	2201      	movs	r2, #1
   253d4:	4053      	eors	r3, r2
   253d6:	b2db      	uxtb	r3, r3
   253d8:	2b00      	cmp	r3, #0
   253da:	d01a      	beq.n	25412 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   253dc:	69fa      	ldr	r2, [r7, #28]
   253de:	2380      	movs	r3, #128	; 0x80
   253e0:	02db      	lsls	r3, r3, #11
   253e2:	4013      	ands	r3, r2
   253e4:	d00a      	beq.n	253fc <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   253e6:	687b      	ldr	r3, [r7, #4]
   253e8:	789b      	ldrb	r3, [r3, #2]
   253ea:	2b01      	cmp	r3, #1
   253ec:	d103      	bne.n	253f6 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   253ee:	68fb      	ldr	r3, [r7, #12]
   253f0:	68ba      	ldr	r2, [r7, #8]
   253f2:	619a      	str	r2, [r3, #24]
   253f4:	e002      	b.n	253fc <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   253f6:	68fb      	ldr	r3, [r7, #12]
   253f8:	68ba      	ldr	r2, [r7, #8]
   253fa:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   253fc:	687b      	ldr	r3, [r7, #4]
   253fe:	785b      	ldrb	r3, [r3, #1]
   25400:	2b01      	cmp	r3, #1
   25402:	d003      	beq.n	2540c <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   25404:	687b      	ldr	r3, [r7, #4]
   25406:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   25408:	2b02      	cmp	r3, #2
   2540a:	d102      	bne.n	25412 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   2540c:	68fb      	ldr	r3, [r7, #12]
   2540e:	68ba      	ldr	r2, [r7, #8]
   25410:	609a      	str	r2, [r3, #8]
		}
	}
}
   25412:	46c0      	nop			; (mov r8, r8)
   25414:	46bd      	mov	sp, r7
   25416:	b008      	add	sp, #32
   25418:	bd80      	pop	{r7, pc}
   2541a:	46c0      	nop			; (mov r8, r8)
   2541c:	fffbffff 	.word	0xfffbffff

00025420 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   25420:	b580      	push	{r7, lr}
   25422:	b084      	sub	sp, #16
   25424:	af00      	add	r7, sp, #0
   25426:	0002      	movs	r2, r0
   25428:	6039      	str	r1, [r7, #0]
   2542a:	1dfb      	adds	r3, r7, #7
   2542c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2542e:	1dfb      	adds	r3, r7, #7
   25430:	781b      	ldrb	r3, [r3, #0]
   25432:	0018      	movs	r0, r3
   25434:	4b0a      	ldr	r3, [pc, #40]	; (25460 <system_pinmux_pin_set_config+0x40>)
   25436:	4798      	blx	r3
   25438:	0003      	movs	r3, r0
   2543a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   2543c:	1dfb      	adds	r3, r7, #7
   2543e:	781b      	ldrb	r3, [r3, #0]
   25440:	221f      	movs	r2, #31
   25442:	4013      	ands	r3, r2
   25444:	2201      	movs	r2, #1
   25446:	409a      	lsls	r2, r3
   25448:	0013      	movs	r3, r2
   2544a:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   2544c:	683a      	ldr	r2, [r7, #0]
   2544e:	68b9      	ldr	r1, [r7, #8]
   25450:	68fb      	ldr	r3, [r7, #12]
   25452:	0018      	movs	r0, r3
   25454:	4b03      	ldr	r3, [pc, #12]	; (25464 <system_pinmux_pin_set_config+0x44>)
   25456:	4798      	blx	r3
}
   25458:	46c0      	nop			; (mov r8, r8)
   2545a:	46bd      	mov	sp, r7
   2545c:	b004      	add	sp, #16
   2545e:	bd80      	pop	{r7, pc}
   25460:	000252b1 	.word	0x000252b1
   25464:	00025311 	.word	0x00025311

00025468 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   25468:	b580      	push	{r7, lr}
   2546a:	af00      	add	r7, sp, #0
	return;
   2546c:	46c0      	nop			; (mov r8, r8)
}
   2546e:	46bd      	mov	sp, r7
   25470:	bd80      	pop	{r7, pc}
	...

00025474 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   25474:	b580      	push	{r7, lr}
   25476:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   25478:	4b06      	ldr	r3, [pc, #24]	; (25494 <system_init+0x20>)
   2547a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   2547c:	4b06      	ldr	r3, [pc, #24]	; (25498 <system_init+0x24>)
   2547e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   25480:	4b06      	ldr	r3, [pc, #24]	; (2549c <system_init+0x28>)
   25482:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   25484:	4b06      	ldr	r3, [pc, #24]	; (254a0 <system_init+0x2c>)
   25486:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   25488:	4b06      	ldr	r3, [pc, #24]	; (254a4 <system_init+0x30>)
   2548a:	4798      	blx	r3
}
   2548c:	46c0      	nop			; (mov r8, r8)
   2548e:	46bd      	mov	sp, r7
   25490:	bd80      	pop	{r7, pc}
   25492:	46c0      	nop			; (mov r8, r8)
   25494:	00024aa9 	.word	0x00024aa9
   25498:	00024371 	.word	0x00024371
   2549c:	00022e39 	.word	0x00022e39
   254a0:	0001e545 	.word	0x0001e545
   254a4:	00025469 	.word	0x00025469

000254a8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   254a8:	b580      	push	{r7, lr}
   254aa:	b082      	sub	sp, #8
   254ac:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   254ae:	4b2f      	ldr	r3, [pc, #188]	; (2556c <Reset_Handler+0xc4>)
   254b0:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   254b2:	4b2f      	ldr	r3, [pc, #188]	; (25570 <Reset_Handler+0xc8>)
   254b4:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   254b6:	687a      	ldr	r2, [r7, #4]
   254b8:	683b      	ldr	r3, [r7, #0]
   254ba:	429a      	cmp	r2, r3
   254bc:	d00c      	beq.n	254d8 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   254be:	e007      	b.n	254d0 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   254c0:	683b      	ldr	r3, [r7, #0]
   254c2:	1d1a      	adds	r2, r3, #4
   254c4:	603a      	str	r2, [r7, #0]
   254c6:	687a      	ldr	r2, [r7, #4]
   254c8:	1d11      	adds	r1, r2, #4
   254ca:	6079      	str	r1, [r7, #4]
   254cc:	6812      	ldr	r2, [r2, #0]
   254ce:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   254d0:	683a      	ldr	r2, [r7, #0]
   254d2:	4b28      	ldr	r3, [pc, #160]	; (25574 <Reset_Handler+0xcc>)
   254d4:	429a      	cmp	r2, r3
   254d6:	d3f3      	bcc.n	254c0 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   254d8:	4b27      	ldr	r3, [pc, #156]	; (25578 <Reset_Handler+0xd0>)
   254da:	603b      	str	r3, [r7, #0]
   254dc:	e004      	b.n	254e8 <Reset_Handler+0x40>
                *pDest++ = 0;
   254de:	683b      	ldr	r3, [r7, #0]
   254e0:	1d1a      	adds	r2, r3, #4
   254e2:	603a      	str	r2, [r7, #0]
   254e4:	2200      	movs	r2, #0
   254e6:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   254e8:	683a      	ldr	r2, [r7, #0]
   254ea:	4b24      	ldr	r3, [pc, #144]	; (2557c <Reset_Handler+0xd4>)
   254ec:	429a      	cmp	r2, r3
   254ee:	d3f6      	bcc.n	254de <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   254f0:	4b23      	ldr	r3, [pc, #140]	; (25580 <Reset_Handler+0xd8>)
   254f2:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   254f4:	4b23      	ldr	r3, [pc, #140]	; (25584 <Reset_Handler+0xdc>)
   254f6:	687a      	ldr	r2, [r7, #4]
   254f8:	21ff      	movs	r1, #255	; 0xff
   254fa:	438a      	bics	r2, r1
   254fc:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   254fe:	4a22      	ldr	r2, [pc, #136]	; (25588 <Reset_Handler+0xe0>)
   25500:	2390      	movs	r3, #144	; 0x90
   25502:	005b      	lsls	r3, r3, #1
   25504:	2102      	movs	r1, #2
   25506:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   25508:	4a20      	ldr	r2, [pc, #128]	; (2558c <Reset_Handler+0xe4>)
   2550a:	78d3      	ldrb	r3, [r2, #3]
   2550c:	2103      	movs	r1, #3
   2550e:	438b      	bics	r3, r1
   25510:	1c19      	adds	r1, r3, #0
   25512:	2302      	movs	r3, #2
   25514:	430b      	orrs	r3, r1
   25516:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   25518:	4a1c      	ldr	r2, [pc, #112]	; (2558c <Reset_Handler+0xe4>)
   2551a:	78d3      	ldrb	r3, [r2, #3]
   2551c:	210c      	movs	r1, #12
   2551e:	438b      	bics	r3, r1
   25520:	1c19      	adds	r1, r3, #0
   25522:	2308      	movs	r3, #8
   25524:	430b      	orrs	r3, r1
   25526:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   25528:	4a19      	ldr	r2, [pc, #100]	; (25590 <Reset_Handler+0xe8>)
   2552a:	7b93      	ldrb	r3, [r2, #14]
   2552c:	2130      	movs	r1, #48	; 0x30
   2552e:	438b      	bics	r3, r1
   25530:	1c19      	adds	r1, r3, #0
   25532:	2320      	movs	r3, #32
   25534:	430b      	orrs	r3, r1
   25536:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   25538:	4a15      	ldr	r2, [pc, #84]	; (25590 <Reset_Handler+0xe8>)
   2553a:	7b93      	ldrb	r3, [r2, #14]
   2553c:	210c      	movs	r1, #12
   2553e:	438b      	bics	r3, r1
   25540:	1c19      	adds	r1, r3, #0
   25542:	2308      	movs	r3, #8
   25544:	430b      	orrs	r3, r1
   25546:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   25548:	4a11      	ldr	r2, [pc, #68]	; (25590 <Reset_Handler+0xe8>)
   2554a:	7b93      	ldrb	r3, [r2, #14]
   2554c:	2103      	movs	r1, #3
   2554e:	438b      	bics	r3, r1
   25550:	1c19      	adds	r1, r3, #0
   25552:	2302      	movs	r3, #2
   25554:	430b      	orrs	r3, r1
   25556:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   25558:	4a0e      	ldr	r2, [pc, #56]	; (25594 <Reset_Handler+0xec>)
   2555a:	6853      	ldr	r3, [r2, #4]
   2555c:	2180      	movs	r1, #128	; 0x80
   2555e:	430b      	orrs	r3, r1
   25560:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   25562:	4b0d      	ldr	r3, [pc, #52]	; (25598 <Reset_Handler+0xf0>)
   25564:	4798      	blx	r3

        /* Branch to main function */
        main();
   25566:	4b0d      	ldr	r3, [pc, #52]	; (2559c <Reset_Handler+0xf4>)
   25568:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   2556a:	e7fe      	b.n	2556a <Reset_Handler+0xc2>
   2556c:	0002bb1c 	.word	0x0002bb1c
   25570:	20000000 	.word	0x20000000
   25574:	200001fc 	.word	0x200001fc
   25578:	20000200 	.word	0x20000200
   2557c:	2000098c 	.word	0x2000098c
   25580:	00010000 	.word	0x00010000
   25584:	e000ed00 	.word	0xe000ed00
   25588:	41007000 	.word	0x41007000
   2558c:	41005000 	.word	0x41005000
   25590:	41004800 	.word	0x41004800
   25594:	41004000 	.word	0x41004000
   25598:	000297c9 	.word	0x000297c9
   2559c:	000257d1 	.word	0x000257d1

000255a0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   255a0:	b580      	push	{r7, lr}
   255a2:	af00      	add	r7, sp, #0
        while (1) {
   255a4:	e7fe      	b.n	255a4 <Dummy_Handler+0x4>
	...

000255a8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   255a8:	b580      	push	{r7, lr}
   255aa:	b084      	sub	sp, #16
   255ac:	af00      	add	r7, sp, #0
   255ae:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   255b0:	4b0a      	ldr	r3, [pc, #40]	; (255dc <_sbrk+0x34>)
   255b2:	681b      	ldr	r3, [r3, #0]
   255b4:	2b00      	cmp	r3, #0
   255b6:	d102      	bne.n	255be <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   255b8:	4b08      	ldr	r3, [pc, #32]	; (255dc <_sbrk+0x34>)
   255ba:	4a09      	ldr	r2, [pc, #36]	; (255e0 <_sbrk+0x38>)
   255bc:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   255be:	4b07      	ldr	r3, [pc, #28]	; (255dc <_sbrk+0x34>)
   255c0:	681b      	ldr	r3, [r3, #0]
   255c2:	60fb      	str	r3, [r7, #12]

	heap += incr;
   255c4:	4b05      	ldr	r3, [pc, #20]	; (255dc <_sbrk+0x34>)
   255c6:	681a      	ldr	r2, [r3, #0]
   255c8:	687b      	ldr	r3, [r7, #4]
   255ca:	18d2      	adds	r2, r2, r3
   255cc:	4b03      	ldr	r3, [pc, #12]	; (255dc <_sbrk+0x34>)
   255ce:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   255d0:	68fb      	ldr	r3, [r7, #12]
}
   255d2:	0018      	movs	r0, r3
   255d4:	46bd      	mov	sp, r7
   255d6:	b004      	add	sp, #16
   255d8:	bd80      	pop	{r7, pc}
   255da:	46c0      	nop			; (mov r8, r8)
   255dc:	20000508 	.word	0x20000508
   255e0:	20002990 	.word	0x20002990

000255e4 <system_apb_clock_clear_mask>:
{
   255e4:	b580      	push	{r7, lr}
   255e6:	b082      	sub	sp, #8
   255e8:	af00      	add	r7, sp, #0
   255ea:	0002      	movs	r2, r0
   255ec:	6039      	str	r1, [r7, #0]
   255ee:	1dfb      	adds	r3, r7, #7
   255f0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   255f2:	1dfb      	adds	r3, r7, #7
   255f4:	781b      	ldrb	r3, [r3, #0]
   255f6:	2b01      	cmp	r3, #1
   255f8:	d00b      	beq.n	25612 <system_apb_clock_clear_mask+0x2e>
   255fa:	2b02      	cmp	r3, #2
   255fc:	d011      	beq.n	25622 <system_apb_clock_clear_mask+0x3e>
   255fe:	2b00      	cmp	r3, #0
   25600:	d117      	bne.n	25632 <system_apb_clock_clear_mask+0x4e>
			PM->APBAMASK.reg &= ~mask;
   25602:	4b0f      	ldr	r3, [pc, #60]	; (25640 <system_apb_clock_clear_mask+0x5c>)
   25604:	4a0e      	ldr	r2, [pc, #56]	; (25640 <system_apb_clock_clear_mask+0x5c>)
   25606:	6992      	ldr	r2, [r2, #24]
   25608:	6839      	ldr	r1, [r7, #0]
   2560a:	43c9      	mvns	r1, r1
   2560c:	400a      	ands	r2, r1
   2560e:	619a      	str	r2, [r3, #24]
			break;
   25610:	e011      	b.n	25636 <system_apb_clock_clear_mask+0x52>
			PM->APBBMASK.reg &= ~mask;
   25612:	4b0b      	ldr	r3, [pc, #44]	; (25640 <system_apb_clock_clear_mask+0x5c>)
   25614:	4a0a      	ldr	r2, [pc, #40]	; (25640 <system_apb_clock_clear_mask+0x5c>)
   25616:	69d2      	ldr	r2, [r2, #28]
   25618:	6839      	ldr	r1, [r7, #0]
   2561a:	43c9      	mvns	r1, r1
   2561c:	400a      	ands	r2, r1
   2561e:	61da      	str	r2, [r3, #28]
			break;
   25620:	e009      	b.n	25636 <system_apb_clock_clear_mask+0x52>
			PM->APBCMASK.reg &= ~mask;
   25622:	4b07      	ldr	r3, [pc, #28]	; (25640 <system_apb_clock_clear_mask+0x5c>)
   25624:	4a06      	ldr	r2, [pc, #24]	; (25640 <system_apb_clock_clear_mask+0x5c>)
   25626:	6a12      	ldr	r2, [r2, #32]
   25628:	6839      	ldr	r1, [r7, #0]
   2562a:	43c9      	mvns	r1, r1
   2562c:	400a      	ands	r2, r1
   2562e:	621a      	str	r2, [r3, #32]
			break;
   25630:	e001      	b.n	25636 <system_apb_clock_clear_mask+0x52>
			return STATUS_ERR_INVALID_ARG;
   25632:	2317      	movs	r3, #23
   25634:	e000      	b.n	25638 <system_apb_clock_clear_mask+0x54>
	return STATUS_OK;
   25636:	2300      	movs	r3, #0
}
   25638:	0018      	movs	r0, r3
   2563a:	46bd      	mov	sp, r7
   2563c:	b002      	add	sp, #8
   2563e:	bd80      	pop	{r7, pc}
   25640:	40000400 	.word	0x40000400

00025644 <system_interrupt_enable_global>:
{
   25644:	b580      	push	{r7, lr}
   25646:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   25648:	4b04      	ldr	r3, [pc, #16]	; (2565c <system_interrupt_enable_global+0x18>)
   2564a:	2201      	movs	r2, #1
   2564c:	701a      	strb	r2, [r3, #0]
   2564e:	f3bf 8f5f 	dmb	sy
   25652:	b662      	cpsie	i
}
   25654:	46c0      	nop			; (mov r8, r8)
   25656:	46bd      	mov	sp, r7
   25658:	bd80      	pop	{r7, pc}
   2565a:	46c0      	nop			; (mov r8, r8)
   2565c:	20000028 	.word	0x20000028

00025660 <system_pinmux_get_group_from_gpio_pin>:
{
   25660:	b580      	push	{r7, lr}
   25662:	b084      	sub	sp, #16
   25664:	af00      	add	r7, sp, #0
   25666:	0002      	movs	r2, r0
   25668:	1dfb      	adds	r3, r7, #7
   2566a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   2566c:	230f      	movs	r3, #15
   2566e:	18fb      	adds	r3, r7, r3
   25670:	1dfa      	adds	r2, r7, #7
   25672:	7812      	ldrb	r2, [r2, #0]
   25674:	09d2      	lsrs	r2, r2, #7
   25676:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   25678:	230e      	movs	r3, #14
   2567a:	18fb      	adds	r3, r7, r3
   2567c:	1dfa      	adds	r2, r7, #7
   2567e:	7812      	ldrb	r2, [r2, #0]
   25680:	0952      	lsrs	r2, r2, #5
   25682:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   25684:	4b0d      	ldr	r3, [pc, #52]	; (256bc <system_pinmux_get_group_from_gpio_pin+0x5c>)
   25686:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   25688:	230f      	movs	r3, #15
   2568a:	18fb      	adds	r3, r7, r3
   2568c:	781b      	ldrb	r3, [r3, #0]
   2568e:	2b00      	cmp	r3, #0
   25690:	d10f      	bne.n	256b2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   25692:	230f      	movs	r3, #15
   25694:	18fb      	adds	r3, r7, r3
   25696:	781b      	ldrb	r3, [r3, #0]
   25698:	009b      	lsls	r3, r3, #2
   2569a:	2210      	movs	r2, #16
   2569c:	4694      	mov	ip, r2
   2569e:	44bc      	add	ip, r7
   256a0:	4463      	add	r3, ip
   256a2:	3b08      	subs	r3, #8
   256a4:	681a      	ldr	r2, [r3, #0]
   256a6:	230e      	movs	r3, #14
   256a8:	18fb      	adds	r3, r7, r3
   256aa:	781b      	ldrb	r3, [r3, #0]
   256ac:	01db      	lsls	r3, r3, #7
   256ae:	18d3      	adds	r3, r2, r3
   256b0:	e000      	b.n	256b4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   256b2:	2300      	movs	r3, #0
}
   256b4:	0018      	movs	r0, r3
   256b6:	46bd      	mov	sp, r7
   256b8:	b004      	add	sp, #16
   256ba:	bd80      	pop	{r7, pc}
   256bc:	41004400 	.word	0x41004400

000256c0 <system_set_sleepmode>:
 * \retval STATUS_ERR_INVALID_ARG  The requested sleep mode was invalid or not
 *                                 available
 */
static inline enum status_code system_set_sleepmode(
	const enum system_sleepmode sleep_mode)
{
   256c0:	b580      	push	{r7, lr}
   256c2:	b084      	sub	sp, #16
   256c4:	af00      	add	r7, sp, #0
   256c6:	0002      	movs	r2, r0
   256c8:	1dfb      	adds	r3, r7, #7
   256ca:	701a      	strb	r2, [r3, #0]

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
   256cc:	4b1a      	ldr	r3, [pc, #104]	; (25738 <system_set_sleepmode+0x78>)
   256ce:	699b      	ldr	r3, [r3, #24]
   256d0:	60fb      	str	r3, [r7, #12]

	rev &= DSU_DID_REVISION_Msk;
   256d2:	68fa      	ldr	r2, [r7, #12]
   256d4:	23f0      	movs	r3, #240	; 0xf0
   256d6:	011b      	lsls	r3, r3, #4
   256d8:	4013      	ands	r3, r2
   256da:	60fb      	str	r3, [r7, #12]
	rev = rev >> DSU_DID_REVISION_Pos;
   256dc:	68fb      	ldr	r3, [r7, #12]
   256de:	0a1b      	lsrs	r3, r3, #8
   256e0:	60fb      	str	r3, [r7, #12]
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
	}
#endif

#if (SAMD21 || SAMR21)
	if (rev < _SYSTEM_MCU_REVISION_D) {
   256e2:	68fb      	ldr	r3, [r7, #12]
   256e4:	2b02      	cmp	r3, #2
   256e6:	d805      	bhi.n	256f4 <system_set_sleepmode+0x34>
		/* Errata 13140: Make sure that the Flash does not power all the way down
		 * when in sleep mode. */
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
   256e8:	4a14      	ldr	r2, [pc, #80]	; (2573c <system_set_sleepmode+0x7c>)
   256ea:	6853      	ldr	r3, [r2, #4]
   256ec:	21c0      	movs	r1, #192	; 0xc0
   256ee:	0089      	lsls	r1, r1, #2
   256f0:	430b      	orrs	r3, r1
   256f2:	6053      	str	r3, [r2, #4]
	}
#endif

#endif

	switch (sleep_mode) {
   256f4:	1dfb      	adds	r3, r7, #7
   256f6:	781b      	ldrb	r3, [r3, #0]
   256f8:	2b00      	cmp	r3, #0
   256fa:	db16      	blt.n	2572a <system_set_sleepmode+0x6a>
   256fc:	2b02      	cmp	r3, #2
   256fe:	dd02      	ble.n	25706 <system_set_sleepmode+0x46>
   25700:	2b03      	cmp	r3, #3
   25702:	d00b      	beq.n	2571c <system_set_sleepmode+0x5c>
   25704:	e011      	b.n	2572a <system_set_sleepmode+0x6a>
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
   25706:	4b0e      	ldr	r3, [pc, #56]	; (25740 <system_set_sleepmode+0x80>)
   25708:	4a0d      	ldr	r2, [pc, #52]	; (25740 <system_set_sleepmode+0x80>)
   2570a:	6912      	ldr	r2, [r2, #16]
   2570c:	2104      	movs	r1, #4
   2570e:	438a      	bics	r2, r1
   25710:	611a      	str	r2, [r3, #16]
			PM->SLEEP.reg = sleep_mode;
   25712:	4a0c      	ldr	r2, [pc, #48]	; (25744 <system_set_sleepmode+0x84>)
   25714:	1dfb      	adds	r3, r7, #7
   25716:	781b      	ldrb	r3, [r3, #0]
   25718:	7053      	strb	r3, [r2, #1]
			break;
   2571a:	e008      	b.n	2572e <system_set_sleepmode+0x6e>

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
   2571c:	4b08      	ldr	r3, [pc, #32]	; (25740 <system_set_sleepmode+0x80>)
   2571e:	4a08      	ldr	r2, [pc, #32]	; (25740 <system_set_sleepmode+0x80>)
   25720:	6912      	ldr	r2, [r2, #16]
   25722:	2104      	movs	r1, #4
   25724:	430a      	orrs	r2, r1
   25726:	611a      	str	r2, [r3, #16]
			break;
   25728:	e001      	b.n	2572e <system_set_sleepmode+0x6e>

		default:
			return STATUS_ERR_INVALID_ARG;
   2572a:	2317      	movs	r3, #23
   2572c:	e000      	b.n	25730 <system_set_sleepmode+0x70>
	}

	return STATUS_OK;
   2572e:	2300      	movs	r3, #0
}
   25730:	0018      	movs	r0, r3
   25732:	46bd      	mov	sp, r7
   25734:	b004      	add	sp, #16
   25736:	bd80      	pop	{r7, pc}
   25738:	41002000 	.word	0x41002000
   2573c:	41004000 	.word	0x41004000
   25740:	e000ed00 	.word	0xe000ed00
   25744:	40000400 	.word	0x40000400

00025748 <system_sleep>:
 * all ongoing memory accesses have completed, then a WFI (Wait For Interrupt)
 * instruction to place the device into the sleep mode specified by
 * \ref system_set_sleepmode until woken by an interrupt.
 */
static inline void system_sleep(void)
{
   25748:	b580      	push	{r7, lr}
   2574a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
   2574c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
   25750:	bf30      	wfi
	__DSB();
	__WFI();
}
   25752:	46c0      	nop			; (mov r8, r8)
   25754:	46bd      	mov	sp, r7
   25756:	bd80      	pop	{r7, pc}

00025758 <port_get_group_from_gpio_pin>:
{
   25758:	b580      	push	{r7, lr}
   2575a:	b082      	sub	sp, #8
   2575c:	af00      	add	r7, sp, #0
   2575e:	0002      	movs	r2, r0
   25760:	1dfb      	adds	r3, r7, #7
   25762:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   25764:	1dfb      	adds	r3, r7, #7
   25766:	781b      	ldrb	r3, [r3, #0]
   25768:	0018      	movs	r0, r3
   2576a:	4b03      	ldr	r3, [pc, #12]	; (25778 <port_get_group_from_gpio_pin+0x20>)
   2576c:	4798      	blx	r3
   2576e:	0003      	movs	r3, r0
}
   25770:	0018      	movs	r0, r3
   25772:	46bd      	mov	sp, r7
   25774:	b002      	add	sp, #8
   25776:	bd80      	pop	{r7, pc}
   25778:	00025661 	.word	0x00025661

0002577c <port_pin_set_output_level>:
{
   2577c:	b580      	push	{r7, lr}
   2577e:	b084      	sub	sp, #16
   25780:	af00      	add	r7, sp, #0
   25782:	0002      	movs	r2, r0
   25784:	1dfb      	adds	r3, r7, #7
   25786:	701a      	strb	r2, [r3, #0]
   25788:	1dbb      	adds	r3, r7, #6
   2578a:	1c0a      	adds	r2, r1, #0
   2578c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2578e:	1dfb      	adds	r3, r7, #7
   25790:	781b      	ldrb	r3, [r3, #0]
   25792:	0018      	movs	r0, r3
   25794:	4b0d      	ldr	r3, [pc, #52]	; (257cc <port_pin_set_output_level+0x50>)
   25796:	4798      	blx	r3
   25798:	0003      	movs	r3, r0
   2579a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   2579c:	1dfb      	adds	r3, r7, #7
   2579e:	781b      	ldrb	r3, [r3, #0]
   257a0:	221f      	movs	r2, #31
   257a2:	4013      	ands	r3, r2
   257a4:	2201      	movs	r2, #1
   257a6:	409a      	lsls	r2, r3
   257a8:	0013      	movs	r3, r2
   257aa:	60bb      	str	r3, [r7, #8]
	if (level) {
   257ac:	1dbb      	adds	r3, r7, #6
   257ae:	781b      	ldrb	r3, [r3, #0]
   257b0:	2b00      	cmp	r3, #0
   257b2:	d003      	beq.n	257bc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   257b4:	68fb      	ldr	r3, [r7, #12]
   257b6:	68ba      	ldr	r2, [r7, #8]
   257b8:	619a      	str	r2, [r3, #24]
}
   257ba:	e002      	b.n	257c2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   257bc:	68fb      	ldr	r3, [r7, #12]
   257be:	68ba      	ldr	r2, [r7, #8]
   257c0:	615a      	str	r2, [r3, #20]
}
   257c2:	46c0      	nop			; (mov r8, r8)
   257c4:	46bd      	mov	sp, r7
   257c6:	b004      	add	sp, #16
   257c8:	bd80      	pop	{r7, pc}
   257ca:	46c0      	nop			; (mov r8, r8)
   257cc:	00025759 	.word	0x00025759

000257d0 <main>:

bool initSleepSeqeunce=false;
uint32_t tempSleepWait=0;

int main (void)
{
   257d0:	b590      	push	{r4, r7, lr}
   257d2:	b083      	sub	sp, #12
   257d4:	af02      	add	r7, sp, #8
	system_init();
   257d6:	4b18      	ldr	r3, [pc, #96]	; (25838 <main+0x68>)
   257d8:	4798      	blx	r3
	
	/* Disable digital interfaces to unused peripherals */
	system_apb_clock_clear_mask(SYSTEM_CLOCK_APB_APBA,
   257da:	2111      	movs	r1, #17
   257dc:	2000      	movs	r0, #0
   257de:	4b17      	ldr	r3, [pc, #92]	; (2583c <main+0x6c>)
   257e0:	4798      	blx	r3
	PM_APBAMASK_PAC0 | PM_APBAMASK_WDT);
	system_apb_clock_clear_mask(SYSTEM_CLOCK_APB_APBB,
   257e2:	2103      	movs	r1, #3
   257e4:	2001      	movs	r0, #1
   257e6:	4b15      	ldr	r3, [pc, #84]	; (2583c <main+0x6c>)
   257e8:	4798      	blx	r3
	PM_APBBMASK_PAC1 | PM_APBBMASK_DSU);
	system_apb_clock_clear_mask(SYSTEM_CLOCK_APB_APBC,
   257ea:	4b15      	ldr	r3, [pc, #84]	; (25840 <main+0x70>)
   257ec:	0019      	movs	r1, r3
   257ee:	2002      	movs	r0, #2
   257f0:	4b12      	ldr	r3, [pc, #72]	; (2583c <main+0x6c>)
   257f2:	4798      	blx	r3
	PM_APBCMASK_PAC2 | PM_APBCMASK_AC | PM_APBCMASK_DAC);
	
	/* Disable NVM low power mode during sleep due to lockups (device errata) */
	NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
   257f4:	4a13      	ldr	r2, [pc, #76]	; (25844 <main+0x74>)
   257f6:	6853      	ldr	r3, [r2, #4]
   257f8:	21c0      	movs	r1, #192	; 0xc0
   257fa:	0089      	lsls	r1, r1, #2
   257fc:	430b      	orrs	r3, r1
   257fe:	6053      	str	r3, [r2, #4]
	
	system_set_sleepmode(SYSTEM_SLEEPMODE_STANDBY);
   25800:	2003      	movs	r0, #3
   25802:	4b11      	ldr	r3, [pc, #68]	; (25848 <main+0x78>)
   25804:	4798      	blx	r3
	
	system_interrupt_enable_global();
   25806:	4b11      	ldr	r3, [pc, #68]	; (2584c <main+0x7c>)
   25808:	4798      	blx	r3
	
	//irq_initialize_vectors();
	//cpu_irq_enable();
	delay_init();
   2580a:	4b11      	ldr	r3, [pc, #68]	; (25850 <main+0x80>)
   2580c:	4798      	blx	r3
	init_eeprom();
   2580e:	4b11      	ldr	r3, [pc, #68]	; (25854 <main+0x84>)
   25810:	4798      	blx	r3
	
	
	
	start_lcd_service();
   25812:	4b11      	ldr	r3, [pc, #68]	; (25858 <main+0x88>)
   25814:	4798      	blx	r3
	start_gsm_service();
   25816:	4b11      	ldr	r3, [pc, #68]	; (2585c <main+0x8c>)
   25818:	4798      	blx	r3
	start_motor_service();
   2581a:	4b11      	ldr	r3, [pc, #68]	; (25860 <main+0x90>)
   2581c:	4798      	blx	r3
	
	xTaskCreate(vTask_sleep_manager,NULL,(uint16_t)100,NULL,1,NULL);
   2581e:	4811      	ldr	r0, [pc, #68]	; (25864 <main+0x94>)
   25820:	2300      	movs	r3, #0
   25822:	9301      	str	r3, [sp, #4]
   25824:	2301      	movs	r3, #1
   25826:	9300      	str	r3, [sp, #0]
   25828:	2300      	movs	r3, #0
   2582a:	2264      	movs	r2, #100	; 0x64
   2582c:	2100      	movs	r1, #0
   2582e:	4c0e      	ldr	r4, [pc, #56]	; (25868 <main+0x98>)
   25830:	47a0      	blx	r4
	
	vTaskStartScheduler();
   25832:	4b0e      	ldr	r3, [pc, #56]	; (2586c <main+0x9c>)
   25834:	4798      	blx	r3
	
	for (;;)
   25836:	e7fe      	b.n	25836 <main+0x66>
   25838:	00025475 	.word	0x00025475
   2583c:	000255e5 	.word	0x000255e5
   25840:	00060001 	.word	0x00060001
   25844:	41004000 	.word	0x41004000
   25848:	000256c1 	.word	0x000256c1
   2584c:	00025645 	.word	0x00025645
   25850:	0002309d 	.word	0x0002309d
   25854:	00010151 	.word	0x00010151
   25858:	00018e11 	.word	0x00018e11
   2585c:	00018449 	.word	0x00018449
   25860:	0001c9e1 	.word	0x0001c9e1
   25864:	000258b9 	.word	0x000258b9
   25868:	00020329 	.word	0x00020329
   2586c:	000207fd 	.word	0x000207fd

00025870 <checkSleepElligible>:
	}
}


bool checkSleepElligible(void)
{
   25870:	b580      	push	{r7, lr}
   25872:	af00      	add	r7, sp, #0
	return (/*!turnOffTimerOn && */!getACPowerState() && motor_checkSleepElligible() && gsm_checkSleepElligible());
   25874:	4b0d      	ldr	r3, [pc, #52]	; (258ac <checkSleepElligible+0x3c>)
   25876:	4798      	blx	r3
   25878:	0003      	movs	r3, r0
   2587a:	001a      	movs	r2, r3
   2587c:	2301      	movs	r3, #1
   2587e:	4053      	eors	r3, r2
   25880:	b2db      	uxtb	r3, r3
   25882:	2b00      	cmp	r3, #0
   25884:	d009      	beq.n	2589a <checkSleepElligible+0x2a>
   25886:	4b0a      	ldr	r3, [pc, #40]	; (258b0 <checkSleepElligible+0x40>)
   25888:	4798      	blx	r3
   2588a:	1e03      	subs	r3, r0, #0
   2588c:	d005      	beq.n	2589a <checkSleepElligible+0x2a>
   2588e:	4b09      	ldr	r3, [pc, #36]	; (258b4 <checkSleepElligible+0x44>)
   25890:	4798      	blx	r3
   25892:	1e03      	subs	r3, r0, #0
   25894:	d001      	beq.n	2589a <checkSleepElligible+0x2a>
   25896:	2301      	movs	r3, #1
   25898:	e000      	b.n	2589c <checkSleepElligible+0x2c>
   2589a:	2300      	movs	r3, #0
   2589c:	1c1a      	adds	r2, r3, #0
   2589e:	2301      	movs	r3, #1
   258a0:	4013      	ands	r3, r2
   258a2:	b2db      	uxtb	r3, r3
}
   258a4:	0018      	movs	r0, r3
   258a6:	46bd      	mov	sp, r7
   258a8:	bd80      	pop	{r7, pc}
   258aa:	46c0      	nop			; (mov r8, r8)
   258ac:	0001b275 	.word	0x0001b275
   258b0:	0001cd05 	.word	0x0001cd05
   258b4:	00018511 	.word	0x00018511

000258b8 <vTask_sleep_manager>:

static void vTask_sleep_manager(void *params)
{
   258b8:	b580      	push	{r7, lr}
   258ba:	b084      	sub	sp, #16
   258bc:	af00      	add	r7, sp, #0
   258be:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	for (;;)
	{
		if (checkSleepElligible())
   258c0:	4b34      	ldr	r3, [pc, #208]	; (25994 <vTask_sleep_manager+0xdc>)
   258c2:	4798      	blx	r3
   258c4:	1e03      	subs	r3, r0, #0
   258c6:	d060      	beq.n	2598a <vTask_sleep_manager+0xd2>
		{
			if(!initSleepSeqeunce)
   258c8:	4b33      	ldr	r3, [pc, #204]	; (25998 <vTask_sleep_manager+0xe0>)
   258ca:	781b      	ldrb	r3, [r3, #0]
   258cc:	2201      	movs	r2, #1
   258ce:	4053      	eors	r3, r2
   258d0:	b2db      	uxtb	r3, r3
   258d2:	2b00      	cmp	r3, #0
   258d4:	d008      	beq.n	258e8 <vTask_sleep_manager+0x30>
			{
				tempSleepWait=xTaskGetTickCount();
   258d6:	4b31      	ldr	r3, [pc, #196]	; (2599c <vTask_sleep_manager+0xe4>)
   258d8:	4798      	blx	r3
   258da:	0002      	movs	r2, r0
   258dc:	4b30      	ldr	r3, [pc, #192]	; (259a0 <vTask_sleep_manager+0xe8>)
   258de:	601a      	str	r2, [r3, #0]
				initSleepSeqeunce=true;
   258e0:	4b2d      	ldr	r3, [pc, #180]	; (25998 <vTask_sleep_manager+0xe0>)
   258e2:	2201      	movs	r2, #1
   258e4:	701a      	strb	r2, [r3, #0]
   258e6:	e7eb      	b.n	258c0 <vTask_sleep_manager+0x8>
			}
			else if(initSleepSeqeunce && xTaskGetTickCount()-tempSleepWait>sleepWaitTime)
   258e8:	4b2b      	ldr	r3, [pc, #172]	; (25998 <vTask_sleep_manager+0xe0>)
   258ea:	781b      	ldrb	r3, [r3, #0]
   258ec:	2b00      	cmp	r3, #0
   258ee:	d0e7      	beq.n	258c0 <vTask_sleep_manager+0x8>
   258f0:	4b2a      	ldr	r3, [pc, #168]	; (2599c <vTask_sleep_manager+0xe4>)
   258f2:	4798      	blx	r3
   258f4:	0002      	movs	r2, r0
   258f6:	4b2a      	ldr	r3, [pc, #168]	; (259a0 <vTask_sleep_manager+0xe8>)
   258f8:	681b      	ldr	r3, [r3, #0]
   258fa:	1ad3      	subs	r3, r2, r3
   258fc:	4a29      	ldr	r2, [pc, #164]	; (259a4 <vTask_sleep_manager+0xec>)
   258fe:	4293      	cmp	r3, r2
   25900:	d9de      	bls.n	258c0 <vTask_sleep_manager+0x8>
			{
				uint8_t cnt=10;
   25902:	230f      	movs	r3, #15
   25904:	18fb      	adds	r3, r7, r3
   25906:	220a      	movs	r2, #10
   25908:	701a      	strb	r2, [r3, #0]
				bool led=false;
   2590a:	230e      	movs	r3, #14
   2590c:	18fb      	adds	r3, r7, r3
   2590e:	2200      	movs	r2, #0
   25910:	701a      	strb	r2, [r3, #0]
				do
				{
					led=!led;
   25912:	230e      	movs	r3, #14
   25914:	18fb      	adds	r3, r7, r3
   25916:	781b      	ldrb	r3, [r3, #0]
   25918:	1e5a      	subs	r2, r3, #1
   2591a:	4193      	sbcs	r3, r2
   2591c:	b2db      	uxtb	r3, r3
   2591e:	2201      	movs	r2, #1
   25920:	4053      	eors	r3, r2
   25922:	b2db      	uxtb	r3, r3
   25924:	001a      	movs	r2, r3
   25926:	230e      	movs	r3, #14
   25928:	18fb      	adds	r3, r7, r3
   2592a:	701a      	strb	r2, [r3, #0]
   2592c:	781a      	ldrb	r2, [r3, #0]
   2592e:	2101      	movs	r1, #1
   25930:	400a      	ands	r2, r1
   25932:	701a      	strb	r2, [r3, #0]
					if(led)
   25934:	230e      	movs	r3, #14
   25936:	18fb      	adds	r3, r7, r3
   25938:	781b      	ldrb	r3, [r3, #0]
   2593a:	2b00      	cmp	r3, #0
   2593c:	d004      	beq.n	25948 <vTask_sleep_manager+0x90>
					THREEPHASE_OK_LED_ON;
   2593e:	2100      	movs	r1, #0
   25940:	2027      	movs	r0, #39	; 0x27
   25942:	4b19      	ldr	r3, [pc, #100]	; (259a8 <vTask_sleep_manager+0xf0>)
   25944:	4798      	blx	r3
   25946:	e003      	b.n	25950 <vTask_sleep_manager+0x98>
					else
					THREEPHASE_OK_LED_OFF;
   25948:	2101      	movs	r1, #1
   2594a:	2027      	movs	r0, #39	; 0x27
   2594c:	4b16      	ldr	r3, [pc, #88]	; (259a8 <vTask_sleep_manager+0xf0>)
   2594e:	4798      	blx	r3

					tempSleepWait=xTaskGetTickCount();
   25950:	4b12      	ldr	r3, [pc, #72]	; (2599c <vTask_sleep_manager+0xe4>)
   25952:	4798      	blx	r3
   25954:	0002      	movs	r2, r0
   25956:	4b12      	ldr	r3, [pc, #72]	; (259a0 <vTask_sleep_manager+0xe8>)
   25958:	601a      	str	r2, [r3, #0]
					while(xTaskGetTickCount()-tempSleepWait<200)
   2595a:	46c0      	nop			; (mov r8, r8)
   2595c:	4b0f      	ldr	r3, [pc, #60]	; (2599c <vTask_sleep_manager+0xe4>)
   2595e:	4798      	blx	r3
   25960:	0002      	movs	r2, r0
   25962:	4b0f      	ldr	r3, [pc, #60]	; (259a0 <vTask_sleep_manager+0xe8>)
   25964:	681b      	ldr	r3, [r3, #0]
   25966:	1ad3      	subs	r3, r2, r3
   25968:	2bc7      	cmp	r3, #199	; 0xc7
   2596a:	d9f7      	bls.n	2595c <vTask_sleep_manager+0xa4>
					{}
				}while(--cnt);
   2596c:	230f      	movs	r3, #15
   2596e:	18fb      	adds	r3, r7, r3
   25970:	220f      	movs	r2, #15
   25972:	18ba      	adds	r2, r7, r2
   25974:	7812      	ldrb	r2, [r2, #0]
   25976:	3a01      	subs	r2, #1
   25978:	701a      	strb	r2, [r3, #0]
   2597a:	230f      	movs	r3, #15
   2597c:	18fb      	adds	r3, r7, r3
   2597e:	781b      	ldrb	r3, [r3, #0]
   25980:	2b00      	cmp	r3, #0
   25982:	d1c6      	bne.n	25912 <vTask_sleep_manager+0x5a>
				
				gotoSleep();
   25984:	4b09      	ldr	r3, [pc, #36]	; (259ac <vTask_sleep_manager+0xf4>)
   25986:	4798      	blx	r3
   25988:	e79a      	b.n	258c0 <vTask_sleep_manager+0x8>
			}
		}
		else
		{
			initSleepSeqeunce=false;
   2598a:	4b03      	ldr	r3, [pc, #12]	; (25998 <vTask_sleep_manager+0xe0>)
   2598c:	2200      	movs	r2, #0
   2598e:	701a      	strb	r2, [r3, #0]
		if (checkSleepElligible())
   25990:	e796      	b.n	258c0 <vTask_sleep_manager+0x8>
   25992:	46c0      	nop			; (mov r8, r8)
   25994:	00025871 	.word	0x00025871
   25998:	2000050c 	.word	0x2000050c
   2599c:	000209cd 	.word	0x000209cd
   259a0:	20000510 	.word	0x20000510
   259a4:	00004650 	.word	0x00004650
   259a8:	0002577d 	.word	0x0002577d
   259ac:	000259b1 	.word	0x000259b1

000259b0 <gotoSleep>:
		}
	}
}

void gotoSleep(void)
{
   259b0:	b580      	push	{r7, lr}
   259b2:	af00      	add	r7, sp, #0
	LCD_PWR_DIS();
   259b4:	4b07      	ldr	r3, [pc, #28]	; (259d4 <gotoSleep+0x24>)
   259b6:	4798      	blx	r3
	
	lcd_in_sleep = true;
   259b8:	4b07      	ldr	r3, [pc, #28]	; (259d8 <gotoSleep+0x28>)
   259ba:	2201      	movs	r2, #1
   259bc:	701a      	strb	r2, [r3, #0]
	setNetworkCharacter=true;
   259be:	4b07      	ldr	r3, [pc, #28]	; (259dc <gotoSleep+0x2c>)
   259c0:	2201      	movs	r2, #1
   259c2:	701a      	strb	r2, [r3, #0]
	system_sleep();
   259c4:	4b06      	ldr	r3, [pc, #24]	; (259e0 <gotoSleep+0x30>)
   259c6:	4798      	blx	r3
	mcuWakeUpFromSleep=true;
   259c8:	4b06      	ldr	r3, [pc, #24]	; (259e4 <gotoSleep+0x34>)
   259ca:	2201      	movs	r2, #1
   259cc:	701a      	strb	r2, [r3, #0]
   259ce:	46c0      	nop			; (mov r8, r8)
   259d0:	46bd      	mov	sp, r7
   259d2:	bd80      	pop	{r7, pc}
   259d4:	00013ce1 	.word	0x00013ce1
   259d8:	20000864 	.word	0x20000864
   259dc:	20000865 	.word	0x20000865
   259e0:	00025749 	.word	0x00025749
   259e4:	20000840 	.word	0x20000840

000259e8 <pow>:
   259e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   259ea:	4657      	mov	r7, sl
   259ec:	464e      	mov	r6, r9
   259ee:	46de      	mov	lr, fp
   259f0:	4645      	mov	r5, r8
   259f2:	b5e0      	push	{r5, r6, r7, lr}
   259f4:	b08f      	sub	sp, #60	; 0x3c
   259f6:	001d      	movs	r5, r3
   259f8:	0006      	movs	r6, r0
   259fa:	000f      	movs	r7, r1
   259fc:	0014      	movs	r4, r2
   259fe:	f000 f9ff 	bl	25e00 <__ieee754_pow>
   25a02:	4bc7      	ldr	r3, [pc, #796]	; (25d20 <pow+0x338>)
   25a04:	9000      	str	r0, [sp, #0]
   25a06:	9101      	str	r1, [sp, #4]
   25a08:	469a      	mov	sl, r3
   25a0a:	781b      	ldrb	r3, [r3, #0]
   25a0c:	b25b      	sxtb	r3, r3
   25a0e:	4699      	mov	r9, r3
   25a10:	3301      	adds	r3, #1
   25a12:	d03e      	beq.n	25a92 <pow+0xaa>
   25a14:	0022      	movs	r2, r4
   25a16:	002b      	movs	r3, r5
   25a18:	0020      	movs	r0, r4
   25a1a:	0029      	movs	r1, r5
   25a1c:	f003 fd74 	bl	29508 <__aeabi_dcmpun>
   25a20:	4683      	mov	fp, r0
   25a22:	2800      	cmp	r0, #0
   25a24:	d135      	bne.n	25a92 <pow+0xaa>
   25a26:	0032      	movs	r2, r6
   25a28:	003b      	movs	r3, r7
   25a2a:	0030      	movs	r0, r6
   25a2c:	0039      	movs	r1, r7
   25a2e:	f003 fd6b 	bl	29508 <__aeabi_dcmpun>
   25a32:	2200      	movs	r2, #0
   25a34:	9003      	str	r0, [sp, #12]
   25a36:	2800      	cmp	r0, #0
   25a38:	d000      	beq.n	25a3c <pow+0x54>
   25a3a:	e0b6      	b.n	25baa <pow+0x1c2>
   25a3c:	2300      	movs	r3, #0
   25a3e:	0030      	movs	r0, r6
   25a40:	0039      	movs	r1, r7
   25a42:	f001 faa1 	bl	26f88 <__aeabi_dcmpeq>
   25a46:	2800      	cmp	r0, #0
   25a48:	d02c      	beq.n	25aa4 <pow+0xbc>
   25a4a:	2200      	movs	r2, #0
   25a4c:	2300      	movs	r3, #0
   25a4e:	0020      	movs	r0, r4
   25a50:	0029      	movs	r1, r5
   25a52:	f001 fa99 	bl	26f88 <__aeabi_dcmpeq>
   25a56:	4683      	mov	fp, r0
   25a58:	2800      	cmp	r0, #0
   25a5a:	d100      	bne.n	25a5e <pow+0x76>
   25a5c:	e077      	b.n	25b4e <pow+0x166>
   25a5e:	ab04      	add	r3, sp, #16
   25a60:	4698      	mov	r8, r3
   25a62:	2301      	movs	r3, #1
   25a64:	4642      	mov	r2, r8
   25a66:	9304      	str	r3, [sp, #16]
   25a68:	4bae      	ldr	r3, [pc, #696]	; (25d24 <pow+0x33c>)
   25a6a:	6053      	str	r3, [r2, #4]
   25a6c:	4643      	mov	r3, r8
   25a6e:	9a03      	ldr	r2, [sp, #12]
   25a70:	611c      	str	r4, [r3, #16]
   25a72:	615d      	str	r5, [r3, #20]
   25a74:	621a      	str	r2, [r3, #32]
   25a76:	609e      	str	r6, [r3, #8]
   25a78:	60df      	str	r7, [r3, #12]
   25a7a:	4642      	mov	r2, r8
   25a7c:	2300      	movs	r3, #0
   25a7e:	2400      	movs	r4, #0
   25a80:	6193      	str	r3, [r2, #24]
   25a82:	61d4      	str	r4, [r2, #28]
   25a84:	464b      	mov	r3, r9
   25a86:	2b00      	cmp	r3, #0
   25a88:	d04d      	beq.n	25b26 <pow+0x13e>
   25a8a:	2300      	movs	r3, #0
   25a8c:	4ca6      	ldr	r4, [pc, #664]	; (25d28 <pow+0x340>)
   25a8e:	9300      	str	r3, [sp, #0]
   25a90:	9401      	str	r4, [sp, #4]
   25a92:	9800      	ldr	r0, [sp, #0]
   25a94:	9901      	ldr	r1, [sp, #4]
   25a96:	b00f      	add	sp, #60	; 0x3c
   25a98:	bc3c      	pop	{r2, r3, r4, r5}
   25a9a:	4690      	mov	r8, r2
   25a9c:	4699      	mov	r9, r3
   25a9e:	46a2      	mov	sl, r4
   25aa0:	46ab      	mov	fp, r5
   25aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25aa4:	9800      	ldr	r0, [sp, #0]
   25aa6:	9901      	ldr	r1, [sp, #4]
   25aa8:	f000 ffc4 	bl	26a34 <finite>
   25aac:	4681      	mov	r9, r0
   25aae:	2800      	cmp	r0, #0
   25ab0:	d100      	bne.n	25ab4 <pow+0xcc>
   25ab2:	e09b      	b.n	25bec <pow+0x204>
   25ab4:	9800      	ldr	r0, [sp, #0]
   25ab6:	9901      	ldr	r1, [sp, #4]
   25ab8:	2200      	movs	r2, #0
   25aba:	2300      	movs	r3, #0
   25abc:	f001 fa64 	bl	26f88 <__aeabi_dcmpeq>
   25ac0:	2800      	cmp	r0, #0
   25ac2:	d0e6      	beq.n	25a92 <pow+0xaa>
   25ac4:	0030      	movs	r0, r6
   25ac6:	0039      	movs	r1, r7
   25ac8:	f000 ffb4 	bl	26a34 <finite>
   25acc:	2800      	cmp	r0, #0
   25ace:	d0e0      	beq.n	25a92 <pow+0xaa>
   25ad0:	0020      	movs	r0, r4
   25ad2:	0029      	movs	r1, r5
   25ad4:	f000 ffae 	bl	26a34 <finite>
   25ad8:	2800      	cmp	r0, #0
   25ada:	d0da      	beq.n	25a92 <pow+0xaa>
   25adc:	ab04      	add	r3, sp, #16
   25ade:	4698      	mov	r8, r3
   25ae0:	2304      	movs	r3, #4
   25ae2:	4642      	mov	r2, r8
   25ae4:	9304      	str	r3, [sp, #16]
   25ae6:	4b8f      	ldr	r3, [pc, #572]	; (25d24 <pow+0x33c>)
   25ae8:	6114      	str	r4, [r2, #16]
   25aea:	6155      	str	r5, [r2, #20]
   25aec:	6053      	str	r3, [r2, #4]
   25aee:	2300      	movs	r3, #0
   25af0:	2400      	movs	r4, #0
   25af2:	6213      	str	r3, [r2, #32]
   25af4:	2300      	movs	r3, #0
   25af6:	6193      	str	r3, [r2, #24]
   25af8:	61d4      	str	r4, [r2, #28]
   25afa:	4653      	mov	r3, sl
   25afc:	781b      	ldrb	r3, [r3, #0]
   25afe:	6096      	str	r6, [r2, #8]
   25b00:	60d7      	str	r7, [r2, #12]
   25b02:	b25b      	sxtb	r3, r3
   25b04:	2b02      	cmp	r3, #2
   25b06:	d004      	beq.n	25b12 <pow+0x12a>
   25b08:	4640      	mov	r0, r8
   25b0a:	f000 ff9d 	bl	26a48 <matherr>
   25b0e:	2800      	cmp	r0, #0
   25b10:	d10e      	bne.n	25b30 <pow+0x148>
   25b12:	f003 fe53 	bl	297bc <__errno>
   25b16:	2322      	movs	r3, #34	; 0x22
   25b18:	6003      	str	r3, [r0, #0]
   25b1a:	e009      	b.n	25b30 <pow+0x148>
   25b1c:	4642      	mov	r2, r8
   25b1e:	2300      	movs	r3, #0
   25b20:	2400      	movs	r4, #0
   25b22:	6193      	str	r3, [r2, #24]
   25b24:	61d4      	str	r4, [r2, #28]
   25b26:	4640      	mov	r0, r8
   25b28:	f000 ff8e 	bl	26a48 <matherr>
   25b2c:	2800      	cmp	r0, #0
   25b2e:	d037      	beq.n	25ba0 <pow+0x1b8>
   25b30:	4643      	mov	r3, r8
   25b32:	6a1b      	ldr	r3, [r3, #32]
   25b34:	2b00      	cmp	r3, #0
   25b36:	d004      	beq.n	25b42 <pow+0x15a>
   25b38:	f003 fe40 	bl	297bc <__errno>
   25b3c:	4643      	mov	r3, r8
   25b3e:	6a1b      	ldr	r3, [r3, #32]
   25b40:	6003      	str	r3, [r0, #0]
   25b42:	4643      	mov	r3, r8
   25b44:	69dc      	ldr	r4, [r3, #28]
   25b46:	699b      	ldr	r3, [r3, #24]
   25b48:	9300      	str	r3, [sp, #0]
   25b4a:	9401      	str	r4, [sp, #4]
   25b4c:	e7a1      	b.n	25a92 <pow+0xaa>
   25b4e:	0020      	movs	r0, r4
   25b50:	0029      	movs	r1, r5
   25b52:	f000 ff6f 	bl	26a34 <finite>
   25b56:	2800      	cmp	r0, #0
   25b58:	d09b      	beq.n	25a92 <pow+0xaa>
   25b5a:	2200      	movs	r2, #0
   25b5c:	2300      	movs	r3, #0
   25b5e:	0020      	movs	r0, r4
   25b60:	0029      	movs	r1, r5
   25b62:	f001 fa17 	bl	26f94 <__aeabi_dcmplt>
   25b66:	2800      	cmp	r0, #0
   25b68:	d100      	bne.n	25b6c <pow+0x184>
   25b6a:	e792      	b.n	25a92 <pow+0xaa>
   25b6c:	ab04      	add	r3, sp, #16
   25b6e:	4698      	mov	r8, r3
   25b70:	2301      	movs	r3, #1
   25b72:	4642      	mov	r2, r8
   25b74:	9304      	str	r3, [sp, #16]
   25b76:	4b6b      	ldr	r3, [pc, #428]	; (25d24 <pow+0x33c>)
   25b78:	6053      	str	r3, [r2, #4]
   25b7a:	4643      	mov	r3, r8
   25b7c:	465a      	mov	r2, fp
   25b7e:	609e      	str	r6, [r3, #8]
   25b80:	60df      	str	r7, [r3, #12]
   25b82:	621a      	str	r2, [r3, #32]
   25b84:	611c      	str	r4, [r3, #16]
   25b86:	615d      	str	r5, [r3, #20]
   25b88:	4653      	mov	r3, sl
   25b8a:	781b      	ldrb	r3, [r3, #0]
   25b8c:	b25b      	sxtb	r3, r3
   25b8e:	2b00      	cmp	r3, #0
   25b90:	d0c4      	beq.n	25b1c <pow+0x134>
   25b92:	2000      	movs	r0, #0
   25b94:	4642      	mov	r2, r8
   25b96:	4965      	ldr	r1, [pc, #404]	; (25d2c <pow+0x344>)
   25b98:	6190      	str	r0, [r2, #24]
   25b9a:	61d1      	str	r1, [r2, #28]
   25b9c:	2b02      	cmp	r3, #2
   25b9e:	d1c2      	bne.n	25b26 <pow+0x13e>
   25ba0:	f003 fe0c 	bl	297bc <__errno>
   25ba4:	2321      	movs	r3, #33	; 0x21
   25ba6:	6003      	str	r3, [r0, #0]
   25ba8:	e7c2      	b.n	25b30 <pow+0x148>
   25baa:	2300      	movs	r3, #0
   25bac:	0020      	movs	r0, r4
   25bae:	0029      	movs	r1, r5
   25bb0:	f001 f9ea 	bl	26f88 <__aeabi_dcmpeq>
   25bb4:	2800      	cmp	r0, #0
   25bb6:	d100      	bne.n	25bba <pow+0x1d2>
   25bb8:	e76b      	b.n	25a92 <pow+0xaa>
   25bba:	ab04      	add	r3, sp, #16
   25bbc:	4698      	mov	r8, r3
   25bbe:	2301      	movs	r3, #1
   25bc0:	4642      	mov	r2, r8
   25bc2:	9304      	str	r3, [sp, #16]
   25bc4:	4b57      	ldr	r3, [pc, #348]	; (25d24 <pow+0x33c>)
   25bc6:	4641      	mov	r1, r8
   25bc8:	6053      	str	r3, [r2, #4]
   25bca:	4643      	mov	r3, r8
   25bcc:	465a      	mov	r2, fp
   25bce:	621a      	str	r2, [r3, #32]
   25bd0:	2200      	movs	r2, #0
   25bd2:	609e      	str	r6, [r3, #8]
   25bd4:	60df      	str	r7, [r3, #12]
   25bd6:	611c      	str	r4, [r3, #16]
   25bd8:	615d      	str	r5, [r3, #20]
   25bda:	4b53      	ldr	r3, [pc, #332]	; (25d28 <pow+0x340>)
   25bdc:	618a      	str	r2, [r1, #24]
   25bde:	61cb      	str	r3, [r1, #28]
   25be0:	9200      	str	r2, [sp, #0]
   25be2:	9301      	str	r3, [sp, #4]
   25be4:	464b      	mov	r3, r9
   25be6:	2b02      	cmp	r3, #2
   25be8:	d19d      	bne.n	25b26 <pow+0x13e>
   25bea:	e752      	b.n	25a92 <pow+0xaa>
   25bec:	0030      	movs	r0, r6
   25bee:	0039      	movs	r1, r7
   25bf0:	f000 ff20 	bl	26a34 <finite>
   25bf4:	2800      	cmp	r0, #0
   25bf6:	d100      	bne.n	25bfa <pow+0x212>
   25bf8:	e75c      	b.n	25ab4 <pow+0xcc>
   25bfa:	0020      	movs	r0, r4
   25bfc:	0029      	movs	r1, r5
   25bfe:	f000 ff19 	bl	26a34 <finite>
   25c02:	2800      	cmp	r0, #0
   25c04:	d100      	bne.n	25c08 <pow+0x220>
   25c06:	e755      	b.n	25ab4 <pow+0xcc>
   25c08:	9800      	ldr	r0, [sp, #0]
   25c0a:	9901      	ldr	r1, [sp, #4]
   25c0c:	000b      	movs	r3, r1
   25c0e:	0002      	movs	r2, r0
   25c10:	f003 fc7a 	bl	29508 <__aeabi_dcmpun>
   25c14:	ab04      	add	r3, sp, #16
   25c16:	4698      	mov	r8, r3
   25c18:	2800      	cmp	r0, #0
   25c1a:	d161      	bne.n	25ce0 <pow+0x2f8>
   25c1c:	2303      	movs	r3, #3
   25c1e:	4642      	mov	r2, r8
   25c20:	9304      	str	r3, [sp, #16]
   25c22:	4b40      	ldr	r3, [pc, #256]	; (25d24 <pow+0x33c>)
   25c24:	6210      	str	r0, [r2, #32]
   25c26:	6053      	str	r3, [r2, #4]
   25c28:	4653      	mov	r3, sl
   25c2a:	781b      	ldrb	r3, [r3, #0]
   25c2c:	6096      	str	r6, [r2, #8]
   25c2e:	60d7      	str	r7, [r2, #12]
   25c30:	b25b      	sxtb	r3, r3
   25c32:	6114      	str	r4, [r2, #16]
   25c34:	6155      	str	r5, [r2, #20]
   25c36:	4699      	mov	r9, r3
   25c38:	2b00      	cmp	r3, #0
   25c3a:	d12f      	bne.n	25c9c <pow+0x2b4>
   25c3c:	22e0      	movs	r2, #224	; 0xe0
   25c3e:	4641      	mov	r1, r8
   25c40:	4b3b      	ldr	r3, [pc, #236]	; (25d30 <pow+0x348>)
   25c42:	0612      	lsls	r2, r2, #24
   25c44:	618a      	str	r2, [r1, #24]
   25c46:	61cb      	str	r3, [r1, #28]
   25c48:	0030      	movs	r0, r6
   25c4a:	2200      	movs	r2, #0
   25c4c:	2300      	movs	r3, #0
   25c4e:	0039      	movs	r1, r7
   25c50:	f001 f9a0 	bl	26f94 <__aeabi_dcmplt>
   25c54:	2800      	cmp	r0, #0
   25c56:	d100      	bne.n	25c5a <pow+0x272>
   25c58:	e756      	b.n	25b08 <pow+0x120>
   25c5a:	2200      	movs	r2, #0
   25c5c:	4b35      	ldr	r3, [pc, #212]	; (25d34 <pow+0x34c>)
   25c5e:	0020      	movs	r0, r4
   25c60:	0029      	movs	r1, r5
   25c62:	f002 febb 	bl	289dc <__aeabi_dmul>
   25c66:	0004      	movs	r4, r0
   25c68:	000d      	movs	r5, r1
   25c6a:	f000 fef5 	bl	26a58 <rint>
   25c6e:	0002      	movs	r2, r0
   25c70:	000b      	movs	r3, r1
   25c72:	0020      	movs	r0, r4
   25c74:	0029      	movs	r1, r5
   25c76:	f001 f987 	bl	26f88 <__aeabi_dcmpeq>
   25c7a:	2800      	cmp	r0, #0
   25c7c:	d105      	bne.n	25c8a <pow+0x2a2>
   25c7e:	22e0      	movs	r2, #224	; 0xe0
   25c80:	4b2d      	ldr	r3, [pc, #180]	; (25d38 <pow+0x350>)
   25c82:	0612      	lsls	r2, r2, #24
   25c84:	4641      	mov	r1, r8
   25c86:	618a      	str	r2, [r1, #24]
   25c88:	61cb      	str	r3, [r1, #28]
   25c8a:	4653      	mov	r3, sl
   25c8c:	781b      	ldrb	r3, [r3, #0]
   25c8e:	b25b      	sxtb	r3, r3
   25c90:	4699      	mov	r9, r3
   25c92:	464b      	mov	r3, r9
   25c94:	2b02      	cmp	r3, #2
   25c96:	d000      	beq.n	25c9a <pow+0x2b2>
   25c98:	e736      	b.n	25b08 <pow+0x120>
   25c9a:	e73a      	b.n	25b12 <pow+0x12a>
   25c9c:	2200      	movs	r2, #0
   25c9e:	4641      	mov	r1, r8
   25ca0:	4b26      	ldr	r3, [pc, #152]	; (25d3c <pow+0x354>)
   25ca2:	0030      	movs	r0, r6
   25ca4:	618a      	str	r2, [r1, #24]
   25ca6:	61cb      	str	r3, [r1, #28]
   25ca8:	2200      	movs	r2, #0
   25caa:	2300      	movs	r3, #0
   25cac:	0039      	movs	r1, r7
   25cae:	f001 f971 	bl	26f94 <__aeabi_dcmplt>
   25cb2:	2800      	cmp	r0, #0
   25cb4:	d0ed      	beq.n	25c92 <pow+0x2aa>
   25cb6:	2200      	movs	r2, #0
   25cb8:	4b1e      	ldr	r3, [pc, #120]	; (25d34 <pow+0x34c>)
   25cba:	0020      	movs	r0, r4
   25cbc:	0029      	movs	r1, r5
   25cbe:	f002 fe8d 	bl	289dc <__aeabi_dmul>
   25cc2:	0004      	movs	r4, r0
   25cc4:	000d      	movs	r5, r1
   25cc6:	f000 fec7 	bl	26a58 <rint>
   25cca:	0002      	movs	r2, r0
   25ccc:	000b      	movs	r3, r1
   25cce:	0020      	movs	r0, r4
   25cd0:	0029      	movs	r1, r5
   25cd2:	f001 f959 	bl	26f88 <__aeabi_dcmpeq>
   25cd6:	2800      	cmp	r0, #0
   25cd8:	d1d7      	bne.n	25c8a <pow+0x2a2>
   25cda:	2200      	movs	r2, #0
   25cdc:	4b13      	ldr	r3, [pc, #76]	; (25d2c <pow+0x344>)
   25cde:	e7d1      	b.n	25c84 <pow+0x29c>
   25ce0:	2301      	movs	r3, #1
   25ce2:	4642      	mov	r2, r8
   25ce4:	9304      	str	r3, [sp, #16]
   25ce6:	4b0f      	ldr	r3, [pc, #60]	; (25d24 <pow+0x33c>)
   25ce8:	6053      	str	r3, [r2, #4]
   25cea:	4643      	mov	r3, r8
   25cec:	464a      	mov	r2, r9
   25cee:	611c      	str	r4, [r3, #16]
   25cf0:	615d      	str	r5, [r3, #20]
   25cf2:	621a      	str	r2, [r3, #32]
   25cf4:	609e      	str	r6, [r3, #8]
   25cf6:	60df      	str	r7, [r3, #12]
   25cf8:	2400      	movs	r4, #0
   25cfa:	4653      	mov	r3, sl
   25cfc:	571c      	ldrsb	r4, [r3, r4]
   25cfe:	2c00      	cmp	r4, #0
   25d00:	d100      	bne.n	25d04 <pow+0x31c>
   25d02:	e70b      	b.n	25b1c <pow+0x134>
   25d04:	2300      	movs	r3, #0
   25d06:	2200      	movs	r2, #0
   25d08:	0019      	movs	r1, r3
   25d0a:	0010      	movs	r0, r2
   25d0c:	f002 fa32 	bl	28174 <__aeabi_ddiv>
   25d10:	4643      	mov	r3, r8
   25d12:	6198      	str	r0, [r3, #24]
   25d14:	61d9      	str	r1, [r3, #28]
   25d16:	2c02      	cmp	r4, #2
   25d18:	d100      	bne.n	25d1c <pow+0x334>
   25d1a:	e741      	b.n	25ba0 <pow+0x1b8>
   25d1c:	e703      	b.n	25b26 <pow+0x13e>
   25d1e:	46c0      	nop			; (mov r8, r8)
   25d20:	20000029 	.word	0x20000029
   25d24:	0002b830 	.word	0x0002b830
   25d28:	3ff00000 	.word	0x3ff00000
   25d2c:	fff00000 	.word	0xfff00000
   25d30:	47efffff 	.word	0x47efffff
   25d34:	3fe00000 	.word	0x3fe00000
   25d38:	c7efffff 	.word	0xc7efffff
   25d3c:	7ff00000 	.word	0x7ff00000

00025d40 <sqrt>:
   25d40:	b5f0      	push	{r4, r5, r6, r7, lr}
   25d42:	4647      	mov	r7, r8
   25d44:	46ce      	mov	lr, r9
   25d46:	b580      	push	{r7, lr}
   25d48:	b08d      	sub	sp, #52	; 0x34
   25d4a:	0004      	movs	r4, r0
   25d4c:	000d      	movs	r5, r1
   25d4e:	f000 fd8d 	bl	2686c <__ieee754_sqrt>
   25d52:	4b29      	ldr	r3, [pc, #164]	; (25df8 <sqrt+0xb8>)
   25d54:	0006      	movs	r6, r0
   25d56:	781b      	ldrb	r3, [r3, #0]
   25d58:	000f      	movs	r7, r1
   25d5a:	b25b      	sxtb	r3, r3
   25d5c:	4698      	mov	r8, r3
   25d5e:	3301      	adds	r3, #1
   25d60:	d010      	beq.n	25d84 <sqrt+0x44>
   25d62:	0022      	movs	r2, r4
   25d64:	002b      	movs	r3, r5
   25d66:	0020      	movs	r0, r4
   25d68:	0029      	movs	r1, r5
   25d6a:	f003 fbcd 	bl	29508 <__aeabi_dcmpun>
   25d6e:	4681      	mov	r9, r0
   25d70:	2800      	cmp	r0, #0
   25d72:	d107      	bne.n	25d84 <sqrt+0x44>
   25d74:	2200      	movs	r2, #0
   25d76:	2300      	movs	r3, #0
   25d78:	0020      	movs	r0, r4
   25d7a:	0029      	movs	r1, r5
   25d7c:	f001 f90a 	bl	26f94 <__aeabi_dcmplt>
   25d80:	2800      	cmp	r0, #0
   25d82:	d106      	bne.n	25d92 <sqrt+0x52>
   25d84:	0030      	movs	r0, r6
   25d86:	0039      	movs	r1, r7
   25d88:	b00d      	add	sp, #52	; 0x34
   25d8a:	bc0c      	pop	{r2, r3}
   25d8c:	4690      	mov	r8, r2
   25d8e:	4699      	mov	r9, r3
   25d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25d92:	2301      	movs	r3, #1
   25d94:	9302      	str	r3, [sp, #8]
   25d96:	4b19      	ldr	r3, [pc, #100]	; (25dfc <sqrt+0xbc>)
   25d98:	9406      	str	r4, [sp, #24]
   25d9a:	9507      	str	r5, [sp, #28]
   25d9c:	9303      	str	r3, [sp, #12]
   25d9e:	464b      	mov	r3, r9
   25da0:	930a      	str	r3, [sp, #40]	; 0x28
   25da2:	4643      	mov	r3, r8
   25da4:	9404      	str	r4, [sp, #16]
   25da6:	9505      	str	r5, [sp, #20]
   25da8:	2b00      	cmp	r3, #0
   25daa:	d015      	beq.n	25dd8 <sqrt+0x98>
   25dac:	2300      	movs	r3, #0
   25dae:	2200      	movs	r2, #0
   25db0:	0019      	movs	r1, r3
   25db2:	0010      	movs	r0, r2
   25db4:	f002 f9de 	bl	28174 <__aeabi_ddiv>
   25db8:	4643      	mov	r3, r8
   25dba:	9008      	str	r0, [sp, #32]
   25dbc:	9109      	str	r1, [sp, #36]	; 0x24
   25dbe:	2b02      	cmp	r3, #2
   25dc0:	d10e      	bne.n	25de0 <sqrt+0xa0>
   25dc2:	f003 fcfb 	bl	297bc <__errno>
   25dc6:	2321      	movs	r3, #33	; 0x21
   25dc8:	6003      	str	r3, [r0, #0]
   25dca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25dcc:	9301      	str	r3, [sp, #4]
   25dce:	2b00      	cmp	r3, #0
   25dd0:	d10c      	bne.n	25dec <sqrt+0xac>
   25dd2:	9e08      	ldr	r6, [sp, #32]
   25dd4:	9f09      	ldr	r7, [sp, #36]	; 0x24
   25dd6:	e7d5      	b.n	25d84 <sqrt+0x44>
   25dd8:	2300      	movs	r3, #0
   25dda:	2400      	movs	r4, #0
   25ddc:	9308      	str	r3, [sp, #32]
   25dde:	9409      	str	r4, [sp, #36]	; 0x24
   25de0:	a802      	add	r0, sp, #8
   25de2:	f000 fe31 	bl	26a48 <matherr>
   25de6:	2800      	cmp	r0, #0
   25de8:	d1ef      	bne.n	25dca <sqrt+0x8a>
   25dea:	e7ea      	b.n	25dc2 <sqrt+0x82>
   25dec:	f003 fce6 	bl	297bc <__errno>
   25df0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25df2:	9301      	str	r3, [sp, #4]
   25df4:	6003      	str	r3, [r0, #0]
   25df6:	e7ec      	b.n	25dd2 <sqrt+0x92>
   25df8:	20000029 	.word	0x20000029
   25dfc:	0002b834 	.word	0x0002b834

00025e00 <__ieee754_pow>:
   25e00:	b5f0      	push	{r4, r5, r6, r7, lr}
   25e02:	4657      	mov	r7, sl
   25e04:	464e      	mov	r6, r9
   25e06:	4645      	mov	r5, r8
   25e08:	46de      	mov	lr, fp
   25e0a:	001c      	movs	r4, r3
   25e0c:	0013      	movs	r3, r2
   25e0e:	b5e0      	push	{r5, r6, r7, lr}
   25e10:	0065      	lsls	r5, r4, #1
   25e12:	b091      	sub	sp, #68	; 0x44
   25e14:	086d      	lsrs	r5, r5, #1
   25e16:	9300      	str	r3, [sp, #0]
   25e18:	9401      	str	r4, [sp, #4]
   25e1a:	0007      	movs	r7, r0
   25e1c:	000e      	movs	r6, r1
   25e1e:	4680      	mov	r8, r0
   25e20:	4689      	mov	r9, r1
   25e22:	46a2      	mov	sl, r4
   25e24:	432b      	orrs	r3, r5
   25e26:	d031      	beq.n	25e8c <__ieee754_pow+0x8c>
   25e28:	4b67      	ldr	r3, [pc, #412]	; (25fc8 <__ieee754_pow+0x1c8>)
   25e2a:	0074      	lsls	r4, r6, #1
   25e2c:	0864      	lsrs	r4, r4, #1
   25e2e:	429c      	cmp	r4, r3
   25e30:	dc27      	bgt.n	25e82 <__ieee754_pow+0x82>
   25e32:	d024      	beq.n	25e7e <__ieee754_pow+0x7e>
   25e34:	429d      	cmp	r5, r3
   25e36:	dc24      	bgt.n	25e82 <__ieee754_pow+0x82>
   25e38:	4b63      	ldr	r3, [pc, #396]	; (25fc8 <__ieee754_pow+0x1c8>)
   25e3a:	429d      	cmp	r5, r3
   25e3c:	d100      	bne.n	25e40 <__ieee754_pow+0x40>
   25e3e:	e081      	b.n	25f44 <__ieee754_pow+0x144>
   25e40:	2300      	movs	r3, #0
   25e42:	469b      	mov	fp, r3
   25e44:	464b      	mov	r3, r9
   25e46:	2b00      	cmp	r3, #0
   25e48:	da00      	bge.n	25e4c <__ieee754_pow+0x4c>
   25e4a:	e07f      	b.n	25f4c <__ieee754_pow+0x14c>
   25e4c:	2a00      	cmp	r2, #0
   25e4e:	d12c      	bne.n	25eaa <__ieee754_pow+0xaa>
   25e50:	4b5d      	ldr	r3, [pc, #372]	; (25fc8 <__ieee754_pow+0x1c8>)
   25e52:	429d      	cmp	r5, r3
   25e54:	d100      	bne.n	25e58 <__ieee754_pow+0x58>
   25e56:	e097      	b.n	25f88 <__ieee754_pow+0x188>
   25e58:	4b5c      	ldr	r3, [pc, #368]	; (25fcc <__ieee754_pow+0x1cc>)
   25e5a:	429d      	cmp	r5, r3
   25e5c:	d066      	beq.n	25f2c <__ieee754_pow+0x12c>
   25e5e:	2380      	movs	r3, #128	; 0x80
   25e60:	05db      	lsls	r3, r3, #23
   25e62:	459a      	cmp	sl, r3
   25e64:	d100      	bne.n	25e68 <__ieee754_pow+0x68>
   25e66:	e3b9      	b.n	265dc <__ieee754_pow+0x7dc>
   25e68:	4b59      	ldr	r3, [pc, #356]	; (25fd0 <__ieee754_pow+0x1d0>)
   25e6a:	459a      	cmp	sl, r3
   25e6c:	d11d      	bne.n	25eaa <__ieee754_pow+0xaa>
   25e6e:	464b      	mov	r3, r9
   25e70:	2b00      	cmp	r3, #0
   25e72:	db1a      	blt.n	25eaa <__ieee754_pow+0xaa>
   25e74:	0038      	movs	r0, r7
   25e76:	0031      	movs	r1, r6
   25e78:	f000 fcf8 	bl	2686c <__ieee754_sqrt>
   25e7c:	e008      	b.n	25e90 <__ieee754_pow+0x90>
   25e7e:	2800      	cmp	r0, #0
   25e80:	d00d      	beq.n	25e9e <__ieee754_pow+0x9e>
   25e82:	4b54      	ldr	r3, [pc, #336]	; (25fd4 <__ieee754_pow+0x1d4>)
   25e84:	469c      	mov	ip, r3
   25e86:	4464      	add	r4, ip
   25e88:	4327      	orrs	r7, r4
   25e8a:	d10a      	bne.n	25ea2 <__ieee754_pow+0xa2>
   25e8c:	2000      	movs	r0, #0
   25e8e:	494f      	ldr	r1, [pc, #316]	; (25fcc <__ieee754_pow+0x1cc>)
   25e90:	b011      	add	sp, #68	; 0x44
   25e92:	bc3c      	pop	{r2, r3, r4, r5}
   25e94:	4690      	mov	r8, r2
   25e96:	4699      	mov	r9, r3
   25e98:	46a2      	mov	sl, r4
   25e9a:	46ab      	mov	fp, r5
   25e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25e9e:	42a5      	cmp	r5, r4
   25ea0:	ddca      	ble.n	25e38 <__ieee754_pow+0x38>
   25ea2:	484d      	ldr	r0, [pc, #308]	; (25fd8 <__ieee754_pow+0x1d8>)
   25ea4:	f000 fdd2 	bl	26a4c <nan>
   25ea8:	e7f2      	b.n	25e90 <__ieee754_pow+0x90>
   25eaa:	0038      	movs	r0, r7
   25eac:	0031      	movs	r1, r6
   25eae:	f000 fdbd 	bl	26a2c <fabs>
   25eb2:	4643      	mov	r3, r8
   25eb4:	2b00      	cmp	r3, #0
   25eb6:	d11d      	bne.n	25ef4 <__ieee754_pow+0xf4>
   25eb8:	2c00      	cmp	r4, #0
   25eba:	d004      	beq.n	25ec6 <__ieee754_pow+0xc6>
   25ebc:	4a43      	ldr	r2, [pc, #268]	; (25fcc <__ieee754_pow+0x1cc>)
   25ebe:	00b3      	lsls	r3, r6, #2
   25ec0:	089b      	lsrs	r3, r3, #2
   25ec2:	4293      	cmp	r3, r2
   25ec4:	d116      	bne.n	25ef4 <__ieee754_pow+0xf4>
   25ec6:	4653      	mov	r3, sl
   25ec8:	2b00      	cmp	r3, #0
   25eca:	da00      	bge.n	25ece <__ieee754_pow+0xce>
   25ecc:	e3c5      	b.n	2665a <__ieee754_pow+0x85a>
   25ece:	464b      	mov	r3, r9
   25ed0:	2b00      	cmp	r3, #0
   25ed2:	dadd      	bge.n	25e90 <__ieee754_pow+0x90>
   25ed4:	4b3f      	ldr	r3, [pc, #252]	; (25fd4 <__ieee754_pow+0x1d4>)
   25ed6:	469c      	mov	ip, r3
   25ed8:	465b      	mov	r3, fp
   25eda:	4464      	add	r4, ip
   25edc:	431c      	orrs	r4, r3
   25ede:	d101      	bne.n	25ee4 <__ieee754_pow+0xe4>
   25ee0:	f000 fc53 	bl	2678a <__ieee754_pow+0x98a>
   25ee4:	465b      	mov	r3, fp
   25ee6:	2b01      	cmp	r3, #1
   25ee8:	d1d2      	bne.n	25e90 <__ieee754_pow+0x90>
   25eea:	2480      	movs	r4, #128	; 0x80
   25eec:	0624      	lsls	r4, r4, #24
   25eee:	190b      	adds	r3, r1, r4
   25ef0:	0019      	movs	r1, r3
   25ef2:	e7cd      	b.n	25e90 <__ieee754_pow+0x90>
   25ef4:	0ff3      	lsrs	r3, r6, #31
   25ef6:	3b01      	subs	r3, #1
   25ef8:	4698      	mov	r8, r3
   25efa:	465b      	mov	r3, fp
   25efc:	4642      	mov	r2, r8
   25efe:	4313      	orrs	r3, r2
   25f00:	d057      	beq.n	25fb2 <__ieee754_pow+0x1b2>
   25f02:	4b36      	ldr	r3, [pc, #216]	; (25fdc <__ieee754_pow+0x1dc>)
   25f04:	429d      	cmp	r5, r3
   25f06:	dd77      	ble.n	25ff8 <__ieee754_pow+0x1f8>
   25f08:	4b35      	ldr	r3, [pc, #212]	; (25fe0 <__ieee754_pow+0x1e0>)
   25f0a:	429d      	cmp	r5, r3
   25f0c:	dc00      	bgt.n	25f10 <__ieee754_pow+0x110>
   25f0e:	e3b1      	b.n	26674 <__ieee754_pow+0x874>
   25f10:	4b34      	ldr	r3, [pc, #208]	; (25fe4 <__ieee754_pow+0x1e4>)
   25f12:	429c      	cmp	r4, r3
   25f14:	dc00      	bgt.n	25f18 <__ieee754_pow+0x118>
   25f16:	e3a8      	b.n	2666a <__ieee754_pow+0x86a>
   25f18:	4653      	mov	r3, sl
   25f1a:	2b00      	cmp	r3, #0
   25f1c:	dd43      	ble.n	25fa6 <__ieee754_pow+0x1a6>
   25f1e:	4a32      	ldr	r2, [pc, #200]	; (25fe8 <__ieee754_pow+0x1e8>)
   25f20:	4b32      	ldr	r3, [pc, #200]	; (25fec <__ieee754_pow+0x1ec>)
   25f22:	0010      	movs	r0, r2
   25f24:	0019      	movs	r1, r3
   25f26:	f002 fd59 	bl	289dc <__aeabi_dmul>
   25f2a:	e7b1      	b.n	25e90 <__ieee754_pow+0x90>
   25f2c:	4653      	mov	r3, sl
   25f2e:	0038      	movs	r0, r7
   25f30:	0031      	movs	r1, r6
   25f32:	2b00      	cmp	r3, #0
   25f34:	daac      	bge.n	25e90 <__ieee754_pow+0x90>
   25f36:	003a      	movs	r2, r7
   25f38:	0033      	movs	r3, r6
   25f3a:	2000      	movs	r0, #0
   25f3c:	4923      	ldr	r1, [pc, #140]	; (25fcc <__ieee754_pow+0x1cc>)
   25f3e:	f002 f919 	bl	28174 <__aeabi_ddiv>
   25f42:	e7a5      	b.n	25e90 <__ieee754_pow+0x90>
   25f44:	2a00      	cmp	r2, #0
   25f46:	d100      	bne.n	25f4a <__ieee754_pow+0x14a>
   25f48:	e77a      	b.n	25e40 <__ieee754_pow+0x40>
   25f4a:	e79a      	b.n	25e82 <__ieee754_pow+0x82>
   25f4c:	4b28      	ldr	r3, [pc, #160]	; (25ff0 <__ieee754_pow+0x1f0>)
   25f4e:	429d      	cmp	r5, r3
   25f50:	dc2c      	bgt.n	25fac <__ieee754_pow+0x1ac>
   25f52:	4b24      	ldr	r3, [pc, #144]	; (25fe4 <__ieee754_pow+0x1e4>)
   25f54:	429d      	cmp	r5, r3
   25f56:	dc00      	bgt.n	25f5a <__ieee754_pow+0x15a>
   25f58:	e778      	b.n	25e4c <__ieee754_pow+0x4c>
   25f5a:	4926      	ldr	r1, [pc, #152]	; (25ff4 <__ieee754_pow+0x1f4>)
   25f5c:	152b      	asrs	r3, r5, #20
   25f5e:	468c      	mov	ip, r1
   25f60:	4463      	add	r3, ip
   25f62:	2b14      	cmp	r3, #20
   25f64:	dc01      	bgt.n	25f6a <__ieee754_pow+0x16a>
   25f66:	f000 fbf3 	bl	26750 <__ieee754_pow+0x950>
   25f6a:	2134      	movs	r1, #52	; 0x34
   25f6c:	1acb      	subs	r3, r1, r3
   25f6e:	9900      	ldr	r1, [sp, #0]
   25f70:	40d9      	lsrs	r1, r3
   25f72:	0008      	movs	r0, r1
   25f74:	4098      	lsls	r0, r3
   25f76:	4282      	cmp	r2, r0
   25f78:	d000      	beq.n	25f7c <__ieee754_pow+0x17c>
   25f7a:	e767      	b.n	25e4c <__ieee754_pow+0x4c>
   25f7c:	2301      	movs	r3, #1
   25f7e:	4019      	ands	r1, r3
   25f80:	3301      	adds	r3, #1
   25f82:	1a5b      	subs	r3, r3, r1
   25f84:	469b      	mov	fp, r3
   25f86:	e761      	b.n	25e4c <__ieee754_pow+0x4c>
   25f88:	4b12      	ldr	r3, [pc, #72]	; (25fd4 <__ieee754_pow+0x1d4>)
   25f8a:	18e3      	adds	r3, r4, r3
   25f8c:	431f      	orrs	r7, r3
   25f8e:	d100      	bne.n	25f92 <__ieee754_pow+0x192>
   25f90:	e77c      	b.n	25e8c <__ieee754_pow+0x8c>
   25f92:	4b14      	ldr	r3, [pc, #80]	; (25fe4 <__ieee754_pow+0x1e4>)
   25f94:	429c      	cmp	r4, r3
   25f96:	dc00      	bgt.n	25f9a <__ieee754_pow+0x19a>
   25f98:	e327      	b.n	265ea <__ieee754_pow+0x7ea>
   25f9a:	9800      	ldr	r0, [sp, #0]
   25f9c:	9901      	ldr	r1, [sp, #4]
   25f9e:	4653      	mov	r3, sl
   25fa0:	2b00      	cmp	r3, #0
   25fa2:	db00      	blt.n	25fa6 <__ieee754_pow+0x1a6>
   25fa4:	e774      	b.n	25e90 <__ieee754_pow+0x90>
   25fa6:	2000      	movs	r0, #0
   25fa8:	2100      	movs	r1, #0
   25faa:	e771      	b.n	25e90 <__ieee754_pow+0x90>
   25fac:	2302      	movs	r3, #2
   25fae:	469b      	mov	fp, r3
   25fb0:	e74c      	b.n	25e4c <__ieee754_pow+0x4c>
   25fb2:	003a      	movs	r2, r7
   25fb4:	0033      	movs	r3, r6
   25fb6:	0038      	movs	r0, r7
   25fb8:	0031      	movs	r1, r6
   25fba:	f002 ff8f 	bl	28edc <__aeabi_dsub>
   25fbe:	0002      	movs	r2, r0
   25fc0:	000b      	movs	r3, r1
   25fc2:	f002 f8d7 	bl	28174 <__aeabi_ddiv>
   25fc6:	e763      	b.n	25e90 <__ieee754_pow+0x90>
   25fc8:	7ff00000 	.word	0x7ff00000
   25fcc:	3ff00000 	.word	0x3ff00000
   25fd0:	3fe00000 	.word	0x3fe00000
   25fd4:	c0100000 	.word	0xc0100000
   25fd8:	0002b838 	.word	0x0002b838
   25fdc:	41e00000 	.word	0x41e00000
   25fe0:	43f00000 	.word	0x43f00000
   25fe4:	3fefffff 	.word	0x3fefffff
   25fe8:	8800759c 	.word	0x8800759c
   25fec:	7e37e43c 	.word	0x7e37e43c
   25ff0:	433fffff 	.word	0x433fffff
   25ff4:	fffffc01 	.word	0xfffffc01
   25ff8:	4be9      	ldr	r3, [pc, #932]	; (263a0 <__ieee754_pow+0x5a0>)
   25ffa:	2200      	movs	r2, #0
   25ffc:	429c      	cmp	r4, r3
   25ffe:	dc06      	bgt.n	2600e <__ieee754_pow+0x20e>
   26000:	2200      	movs	r2, #0
   26002:	4be8      	ldr	r3, [pc, #928]	; (263a4 <__ieee754_pow+0x5a4>)
   26004:	f002 fcea 	bl	289dc <__aeabi_dmul>
   26008:	2235      	movs	r2, #53	; 0x35
   2600a:	000c      	movs	r4, r1
   2600c:	4252      	negs	r2, r2
   2600e:	4de6      	ldr	r5, [pc, #920]	; (263a8 <__ieee754_pow+0x5a8>)
   26010:	1523      	asrs	r3, r4, #20
   26012:	46ac      	mov	ip, r5
   26014:	4463      	add	r3, ip
   26016:	4699      	mov	r9, r3
   26018:	0324      	lsls	r4, r4, #12
   2601a:	4de4      	ldr	r5, [pc, #912]	; (263ac <__ieee754_pow+0x5ac>)
   2601c:	4be4      	ldr	r3, [pc, #912]	; (263b0 <__ieee754_pow+0x5b0>)
   2601e:	0b24      	lsrs	r4, r4, #12
   26020:	4491      	add	r9, r2
   26022:	4325      	orrs	r5, r4
   26024:	429c      	cmp	r4, r3
   26026:	dd09      	ble.n	2603c <__ieee754_pow+0x23c>
   26028:	4be2      	ldr	r3, [pc, #904]	; (263b4 <__ieee754_pow+0x5b4>)
   2602a:	429c      	cmp	r4, r3
   2602c:	dc00      	bgt.n	26030 <__ieee754_pow+0x230>
   2602e:	e3b6      	b.n	2679e <__ieee754_pow+0x99e>
   26030:	2301      	movs	r3, #1
   26032:	469c      	mov	ip, r3
   26034:	4be0      	ldr	r3, [pc, #896]	; (263b8 <__ieee754_pow+0x5b8>)
   26036:	44e1      	add	r9, ip
   26038:	469c      	mov	ip, r3
   2603a:	4465      	add	r5, ip
   2603c:	2300      	movs	r3, #0
   2603e:	2400      	movs	r4, #0
   26040:	2200      	movs	r2, #0
   26042:	9308      	str	r3, [sp, #32]
   26044:	9409      	str	r4, [sp, #36]	; 0x24
   26046:	930c      	str	r3, [sp, #48]	; 0x30
   26048:	940d      	str	r4, [sp, #52]	; 0x34
   2604a:	2400      	movs	r4, #0
   2604c:	4bd7      	ldr	r3, [pc, #860]	; (263ac <__ieee754_pow+0x5ac>)
   2604e:	9206      	str	r2, [sp, #24]
   26050:	9307      	str	r3, [sp, #28]
   26052:	9a06      	ldr	r2, [sp, #24]
   26054:	9b07      	ldr	r3, [sp, #28]
   26056:	0029      	movs	r1, r5
   26058:	900a      	str	r0, [sp, #40]	; 0x28
   2605a:	910b      	str	r1, [sp, #44]	; 0x2c
   2605c:	f002 ff3e 	bl	28edc <__aeabi_dsub>
   26060:	9a06      	ldr	r2, [sp, #24]
   26062:	9b07      	ldr	r3, [sp, #28]
   26064:	0006      	movs	r6, r0
   26066:	000f      	movs	r7, r1
   26068:	980a      	ldr	r0, [sp, #40]	; 0x28
   2606a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2606c:	f001 fd72 	bl	27b54 <__aeabi_dadd>
   26070:	0002      	movs	r2, r0
   26072:	000b      	movs	r3, r1
   26074:	2000      	movs	r0, #0
   26076:	49cd      	ldr	r1, [pc, #820]	; (263ac <__ieee754_pow+0x5ac>)
   26078:	f002 f87c 	bl	28174 <__aeabi_ddiv>
   2607c:	000a      	movs	r2, r1
   2607e:	0001      	movs	r1, r0
   26080:	0013      	movs	r3, r2
   26082:	910e      	str	r1, [sp, #56]	; 0x38
   26084:	920f      	str	r2, [sp, #60]	; 0x3c
   26086:	0002      	movs	r2, r0
   26088:	0039      	movs	r1, r7
   2608a:	0030      	movs	r0, r6
   2608c:	f002 fca6 	bl	289dc <__aeabi_dmul>
   26090:	000a      	movs	r2, r1
   26092:	0001      	movs	r1, r0
   26094:	2080      	movs	r0, #128	; 0x80
   26096:	9104      	str	r1, [sp, #16]
   26098:	9205      	str	r2, [sp, #20]
   2609a:	0013      	movs	r3, r2
   2609c:	2200      	movs	r2, #0
   2609e:	1069      	asrs	r1, r5, #1
   260a0:	2580      	movs	r5, #128	; 0x80
   260a2:	0300      	lsls	r0, r0, #12
   260a4:	4684      	mov	ip, r0
   260a6:	9202      	str	r2, [sp, #8]
   260a8:	9303      	str	r3, [sp, #12]
   260aa:	2200      	movs	r2, #0
   260ac:	05ad      	lsls	r5, r5, #22
   260ae:	430d      	orrs	r5, r1
   260b0:	4465      	add	r5, ip
   260b2:	192b      	adds	r3, r5, r4
   260b4:	9802      	ldr	r0, [sp, #8]
   260b6:	9903      	ldr	r1, [sp, #12]
   260b8:	0014      	movs	r4, r2
   260ba:	001d      	movs	r5, r3
   260bc:	f002 fc8e 	bl	289dc <__aeabi_dmul>
   260c0:	0002      	movs	r2, r0
   260c2:	000b      	movs	r3, r1
   260c4:	0030      	movs	r0, r6
   260c6:	0039      	movs	r1, r7
   260c8:	f002 ff08 	bl	28edc <__aeabi_dsub>
   260cc:	9a06      	ldr	r2, [sp, #24]
   260ce:	9b07      	ldr	r3, [sp, #28]
   260d0:	0006      	movs	r6, r0
   260d2:	000f      	movs	r7, r1
   260d4:	0020      	movs	r0, r4
   260d6:	0029      	movs	r1, r5
   260d8:	f002 ff00 	bl	28edc <__aeabi_dsub>
   260dc:	0002      	movs	r2, r0
   260de:	000b      	movs	r3, r1
   260e0:	980a      	ldr	r0, [sp, #40]	; 0x28
   260e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   260e4:	f002 fefa 	bl	28edc <__aeabi_dsub>
   260e8:	9a02      	ldr	r2, [sp, #8]
   260ea:	9b03      	ldr	r3, [sp, #12]
   260ec:	f002 fc76 	bl	289dc <__aeabi_dmul>
   260f0:	0002      	movs	r2, r0
   260f2:	000b      	movs	r3, r1
   260f4:	0030      	movs	r0, r6
   260f6:	0039      	movs	r1, r7
   260f8:	f002 fef0 	bl	28edc <__aeabi_dsub>
   260fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   260fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   26100:	f002 fc6c 	bl	289dc <__aeabi_dmul>
   26104:	9d04      	ldr	r5, [sp, #16]
   26106:	9e05      	ldr	r6, [sp, #20]
   26108:	9006      	str	r0, [sp, #24]
   2610a:	9107      	str	r1, [sp, #28]
   2610c:	002a      	movs	r2, r5
   2610e:	0033      	movs	r3, r6
   26110:	0028      	movs	r0, r5
   26112:	0031      	movs	r1, r6
   26114:	f002 fc62 	bl	289dc <__aeabi_dmul>
   26118:	0006      	movs	r6, r0
   2611a:	000f      	movs	r7, r1
   2611c:	4aa7      	ldr	r2, [pc, #668]	; (263bc <__ieee754_pow+0x5bc>)
   2611e:	4ba8      	ldr	r3, [pc, #672]	; (263c0 <__ieee754_pow+0x5c0>)
   26120:	f002 fc5c 	bl	289dc <__aeabi_dmul>
   26124:	4aa7      	ldr	r2, [pc, #668]	; (263c4 <__ieee754_pow+0x5c4>)
   26126:	4ba8      	ldr	r3, [pc, #672]	; (263c8 <__ieee754_pow+0x5c8>)
   26128:	f001 fd14 	bl	27b54 <__aeabi_dadd>
   2612c:	0032      	movs	r2, r6
   2612e:	003b      	movs	r3, r7
   26130:	f002 fc54 	bl	289dc <__aeabi_dmul>
   26134:	4aa5      	ldr	r2, [pc, #660]	; (263cc <__ieee754_pow+0x5cc>)
   26136:	4ba6      	ldr	r3, [pc, #664]	; (263d0 <__ieee754_pow+0x5d0>)
   26138:	f001 fd0c 	bl	27b54 <__aeabi_dadd>
   2613c:	0032      	movs	r2, r6
   2613e:	003b      	movs	r3, r7
   26140:	f002 fc4c 	bl	289dc <__aeabi_dmul>
   26144:	4aa3      	ldr	r2, [pc, #652]	; (263d4 <__ieee754_pow+0x5d4>)
   26146:	4ba4      	ldr	r3, [pc, #656]	; (263d8 <__ieee754_pow+0x5d8>)
   26148:	f001 fd04 	bl	27b54 <__aeabi_dadd>
   2614c:	0032      	movs	r2, r6
   2614e:	003b      	movs	r3, r7
   26150:	f002 fc44 	bl	289dc <__aeabi_dmul>
   26154:	4aa1      	ldr	r2, [pc, #644]	; (263dc <__ieee754_pow+0x5dc>)
   26156:	4ba2      	ldr	r3, [pc, #648]	; (263e0 <__ieee754_pow+0x5e0>)
   26158:	f001 fcfc 	bl	27b54 <__aeabi_dadd>
   2615c:	0032      	movs	r2, r6
   2615e:	003b      	movs	r3, r7
   26160:	f002 fc3c 	bl	289dc <__aeabi_dmul>
   26164:	4a9f      	ldr	r2, [pc, #636]	; (263e4 <__ieee754_pow+0x5e4>)
   26166:	4ba0      	ldr	r3, [pc, #640]	; (263e8 <__ieee754_pow+0x5e8>)
   26168:	f001 fcf4 	bl	27b54 <__aeabi_dadd>
   2616c:	0032      	movs	r2, r6
   2616e:	0004      	movs	r4, r0
   26170:	000d      	movs	r5, r1
   26172:	003b      	movs	r3, r7
   26174:	0030      	movs	r0, r6
   26176:	0039      	movs	r1, r7
   26178:	f002 fc30 	bl	289dc <__aeabi_dmul>
   2617c:	0002      	movs	r2, r0
   2617e:	000b      	movs	r3, r1
   26180:	0020      	movs	r0, r4
   26182:	0029      	movs	r1, r5
   26184:	f002 fc2a 	bl	289dc <__aeabi_dmul>
   26188:	9e02      	ldr	r6, [sp, #8]
   2618a:	9f03      	ldr	r7, [sp, #12]
   2618c:	0004      	movs	r4, r0
   2618e:	000d      	movs	r5, r1
   26190:	9804      	ldr	r0, [sp, #16]
   26192:	9905      	ldr	r1, [sp, #20]
   26194:	0032      	movs	r2, r6
   26196:	003b      	movs	r3, r7
   26198:	f001 fcdc 	bl	27b54 <__aeabi_dadd>
   2619c:	9a06      	ldr	r2, [sp, #24]
   2619e:	9b07      	ldr	r3, [sp, #28]
   261a0:	f002 fc1c 	bl	289dc <__aeabi_dmul>
   261a4:	0022      	movs	r2, r4
   261a6:	002b      	movs	r3, r5
   261a8:	f001 fcd4 	bl	27b54 <__aeabi_dadd>
   261ac:	0032      	movs	r2, r6
   261ae:	900a      	str	r0, [sp, #40]	; 0x28
   261b0:	910b      	str	r1, [sp, #44]	; 0x2c
   261b2:	003b      	movs	r3, r7
   261b4:	0030      	movs	r0, r6
   261b6:	0039      	movs	r1, r7
   261b8:	9602      	str	r6, [sp, #8]
   261ba:	9703      	str	r7, [sp, #12]
   261bc:	f002 fc0e 	bl	289dc <__aeabi_dmul>
   261c0:	2200      	movs	r2, #0
   261c2:	4b8a      	ldr	r3, [pc, #552]	; (263ec <__ieee754_pow+0x5ec>)
   261c4:	0004      	movs	r4, r0
   261c6:	000d      	movs	r5, r1
   261c8:	f001 fcc4 	bl	27b54 <__aeabi_dadd>
   261cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   261ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   261d0:	f001 fcc0 	bl	27b54 <__aeabi_dadd>
   261d4:	2600      	movs	r6, #0
   261d6:	000f      	movs	r7, r1
   261d8:	0032      	movs	r2, r6
   261da:	000b      	movs	r3, r1
   261dc:	9802      	ldr	r0, [sp, #8]
   261de:	9903      	ldr	r1, [sp, #12]
   261e0:	f002 fbfc 	bl	289dc <__aeabi_dmul>
   261e4:	2200      	movs	r2, #0
   261e6:	9002      	str	r0, [sp, #8]
   261e8:	9103      	str	r1, [sp, #12]
   261ea:	4b80      	ldr	r3, [pc, #512]	; (263ec <__ieee754_pow+0x5ec>)
   261ec:	0030      	movs	r0, r6
   261ee:	0039      	movs	r1, r7
   261f0:	f002 fe74 	bl	28edc <__aeabi_dsub>
   261f4:	0022      	movs	r2, r4
   261f6:	002b      	movs	r3, r5
   261f8:	f002 fe70 	bl	28edc <__aeabi_dsub>
   261fc:	0002      	movs	r2, r0
   261fe:	000b      	movs	r3, r1
   26200:	980a      	ldr	r0, [sp, #40]	; 0x28
   26202:	990b      	ldr	r1, [sp, #44]	; 0x2c
   26204:	f002 fe6a 	bl	28edc <__aeabi_dsub>
   26208:	9a04      	ldr	r2, [sp, #16]
   2620a:	9b05      	ldr	r3, [sp, #20]
   2620c:	f002 fbe6 	bl	289dc <__aeabi_dmul>
   26210:	0032      	movs	r2, r6
   26212:	0004      	movs	r4, r0
   26214:	000d      	movs	r5, r1
   26216:	9806      	ldr	r0, [sp, #24]
   26218:	9907      	ldr	r1, [sp, #28]
   2621a:	003b      	movs	r3, r7
   2621c:	f002 fbde 	bl	289dc <__aeabi_dmul>
   26220:	0002      	movs	r2, r0
   26222:	000b      	movs	r3, r1
   26224:	0020      	movs	r0, r4
   26226:	0029      	movs	r1, r5
   26228:	f001 fc94 	bl	27b54 <__aeabi_dadd>
   2622c:	0004      	movs	r4, r0
   2622e:	000d      	movs	r5, r1
   26230:	0002      	movs	r2, r0
   26232:	000b      	movs	r3, r1
   26234:	9802      	ldr	r0, [sp, #8]
   26236:	9903      	ldr	r1, [sp, #12]
   26238:	f001 fc8c 	bl	27b54 <__aeabi_dadd>
   2623c:	2600      	movs	r6, #0
   2623e:	22e0      	movs	r2, #224	; 0xe0
   26240:	4b6b      	ldr	r3, [pc, #428]	; (263f0 <__ieee754_pow+0x5f0>)
   26242:	0612      	lsls	r2, r2, #24
   26244:	0030      	movs	r0, r6
   26246:	000f      	movs	r7, r1
   26248:	f002 fbc8 	bl	289dc <__aeabi_dmul>
   2624c:	9a02      	ldr	r2, [sp, #8]
   2624e:	9b03      	ldr	r3, [sp, #12]
   26250:	9004      	str	r0, [sp, #16]
   26252:	9105      	str	r1, [sp, #20]
   26254:	0030      	movs	r0, r6
   26256:	0039      	movs	r1, r7
   26258:	f002 fe40 	bl	28edc <__aeabi_dsub>
   2625c:	0002      	movs	r2, r0
   2625e:	000b      	movs	r3, r1
   26260:	0020      	movs	r0, r4
   26262:	0029      	movs	r1, r5
   26264:	f002 fe3a 	bl	28edc <__aeabi_dsub>
   26268:	4a62      	ldr	r2, [pc, #392]	; (263f4 <__ieee754_pow+0x5f4>)
   2626a:	4b61      	ldr	r3, [pc, #388]	; (263f0 <__ieee754_pow+0x5f0>)
   2626c:	f002 fbb6 	bl	289dc <__aeabi_dmul>
   26270:	4a61      	ldr	r2, [pc, #388]	; (263f8 <__ieee754_pow+0x5f8>)
   26272:	0004      	movs	r4, r0
   26274:	000d      	movs	r5, r1
   26276:	4b61      	ldr	r3, [pc, #388]	; (263fc <__ieee754_pow+0x5fc>)
   26278:	0030      	movs	r0, r6
   2627a:	0039      	movs	r1, r7
   2627c:	f002 fbae 	bl	289dc <__aeabi_dmul>
   26280:	0002      	movs	r2, r0
   26282:	000b      	movs	r3, r1
   26284:	0020      	movs	r0, r4
   26286:	0029      	movs	r1, r5
   26288:	f001 fc64 	bl	27b54 <__aeabi_dadd>
   2628c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2628e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   26290:	f001 fc60 	bl	27b54 <__aeabi_dadd>
   26294:	0006      	movs	r6, r0
   26296:	4648      	mov	r0, r9
   26298:	000f      	movs	r7, r1
   2629a:	f003 f989 	bl	295b0 <__aeabi_i2d>
   2629e:	0004      	movs	r4, r0
   262a0:	000d      	movs	r5, r1
   262a2:	9804      	ldr	r0, [sp, #16]
   262a4:	9905      	ldr	r1, [sp, #20]
   262a6:	0032      	movs	r2, r6
   262a8:	003b      	movs	r3, r7
   262aa:	f001 fc53 	bl	27b54 <__aeabi_dadd>
   262ae:	9a08      	ldr	r2, [sp, #32]
   262b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   262b2:	f001 fc4f 	bl	27b54 <__aeabi_dadd>
   262b6:	0022      	movs	r2, r4
   262b8:	002b      	movs	r3, r5
   262ba:	f001 fc4b 	bl	27b54 <__aeabi_dadd>
   262be:	2000      	movs	r0, #0
   262c0:	0022      	movs	r2, r4
   262c2:	002b      	movs	r3, r5
   262c4:	9002      	str	r0, [sp, #8]
   262c6:	9103      	str	r1, [sp, #12]
   262c8:	f002 fe08 	bl	28edc <__aeabi_dsub>
   262cc:	9a08      	ldr	r2, [sp, #32]
   262ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
   262d0:	f002 fe04 	bl	28edc <__aeabi_dsub>
   262d4:	9a04      	ldr	r2, [sp, #16]
   262d6:	9b05      	ldr	r3, [sp, #20]
   262d8:	f002 fe00 	bl	28edc <__aeabi_dsub>
   262dc:	0002      	movs	r2, r0
   262de:	000b      	movs	r3, r1
   262e0:	0030      	movs	r0, r6
   262e2:	0039      	movs	r1, r7
   262e4:	f002 fdfa 	bl	28edc <__aeabi_dsub>
   262e8:	9004      	str	r0, [sp, #16]
   262ea:	9105      	str	r1, [sp, #20]
   262ec:	465b      	mov	r3, fp
   262ee:	4642      	mov	r2, r8
   262f0:	3b01      	subs	r3, #1
   262f2:	4313      	orrs	r3, r2
   262f4:	d100      	bne.n	262f8 <__ieee754_pow+0x4f8>
   262f6:	e1ab      	b.n	26650 <__ieee754_pow+0x850>
   262f8:	2300      	movs	r3, #0
   262fa:	4c2c      	ldr	r4, [pc, #176]	; (263ac <__ieee754_pow+0x5ac>)
   262fc:	9306      	str	r3, [sp, #24]
   262fe:	9407      	str	r4, [sp, #28]
   26300:	9800      	ldr	r0, [sp, #0]
   26302:	9901      	ldr	r1, [sp, #4]
   26304:	2600      	movs	r6, #0
   26306:	000b      	movs	r3, r1
   26308:	0032      	movs	r2, r6
   2630a:	000f      	movs	r7, r1
   2630c:	f002 fde6 	bl	28edc <__aeabi_dsub>
   26310:	9a02      	ldr	r2, [sp, #8]
   26312:	9b03      	ldr	r3, [sp, #12]
   26314:	f002 fb62 	bl	289dc <__aeabi_dmul>
   26318:	9a00      	ldr	r2, [sp, #0]
   2631a:	9b01      	ldr	r3, [sp, #4]
   2631c:	0004      	movs	r4, r0
   2631e:	000d      	movs	r5, r1
   26320:	9804      	ldr	r0, [sp, #16]
   26322:	9905      	ldr	r1, [sp, #20]
   26324:	f002 fb5a 	bl	289dc <__aeabi_dmul>
   26328:	0002      	movs	r2, r0
   2632a:	000b      	movs	r3, r1
   2632c:	0020      	movs	r0, r4
   2632e:	0029      	movs	r1, r5
   26330:	f001 fc10 	bl	27b54 <__aeabi_dadd>
   26334:	0004      	movs	r4, r0
   26336:	000d      	movs	r5, r1
   26338:	9802      	ldr	r0, [sp, #8]
   2633a:	9903      	ldr	r1, [sp, #12]
   2633c:	0032      	movs	r2, r6
   2633e:	003b      	movs	r3, r7
   26340:	9400      	str	r4, [sp, #0]
   26342:	9501      	str	r5, [sp, #4]
   26344:	f002 fb4a 	bl	289dc <__aeabi_dmul>
   26348:	0002      	movs	r2, r0
   2634a:	000b      	movs	r3, r1
   2634c:	0006      	movs	r6, r0
   2634e:	000f      	movs	r7, r1
   26350:	0020      	movs	r0, r4
   26352:	0029      	movs	r1, r5
   26354:	f001 fbfe 	bl	27b54 <__aeabi_dadd>
   26358:	4b29      	ldr	r3, [pc, #164]	; (26400 <__ieee754_pow+0x600>)
   2635a:	0004      	movs	r4, r0
   2635c:	000d      	movs	r5, r1
   2635e:	0002      	movs	r2, r0
   26360:	468b      	mov	fp, r1
   26362:	4299      	cmp	r1, r3
   26364:	dc00      	bgt.n	26368 <__ieee754_pow+0x568>
   26366:	e14f      	b.n	26608 <__ieee754_pow+0x808>
   26368:	4b26      	ldr	r3, [pc, #152]	; (26404 <__ieee754_pow+0x604>)
   2636a:	18cb      	adds	r3, r1, r3
   2636c:	4303      	orrs	r3, r0
   2636e:	d000      	beq.n	26372 <__ieee754_pow+0x572>
   26370:	e1e2      	b.n	26738 <__ieee754_pow+0x938>
   26372:	9800      	ldr	r0, [sp, #0]
   26374:	9901      	ldr	r1, [sp, #4]
   26376:	4a24      	ldr	r2, [pc, #144]	; (26408 <__ieee754_pow+0x608>)
   26378:	4b24      	ldr	r3, [pc, #144]	; (2640c <__ieee754_pow+0x60c>)
   2637a:	f001 fbeb 	bl	27b54 <__aeabi_dadd>
   2637e:	0032      	movs	r2, r6
   26380:	9002      	str	r0, [sp, #8]
   26382:	9103      	str	r1, [sp, #12]
   26384:	003b      	movs	r3, r7
   26386:	0020      	movs	r0, r4
   26388:	0029      	movs	r1, r5
   2638a:	f002 fda7 	bl	28edc <__aeabi_dsub>
   2638e:	0002      	movs	r2, r0
   26390:	000b      	movs	r3, r1
   26392:	9802      	ldr	r0, [sp, #8]
   26394:	9903      	ldr	r1, [sp, #12]
   26396:	f000 fe11 	bl	26fbc <__aeabi_dcmpgt>
   2639a:	46aa      	mov	sl, r5
   2639c:	e038      	b.n	26410 <__ieee754_pow+0x610>
   2639e:	46c0      	nop			; (mov r8, r8)
   263a0:	000fffff 	.word	0x000fffff
   263a4:	43400000 	.word	0x43400000
   263a8:	fffffc01 	.word	0xfffffc01
   263ac:	3ff00000 	.word	0x3ff00000
   263b0:	0003988e 	.word	0x0003988e
   263b4:	000bb679 	.word	0x000bb679
   263b8:	fff00000 	.word	0xfff00000
   263bc:	4a454eef 	.word	0x4a454eef
   263c0:	3fca7e28 	.word	0x3fca7e28
   263c4:	93c9db65 	.word	0x93c9db65
   263c8:	3fcd864a 	.word	0x3fcd864a
   263cc:	a91d4101 	.word	0xa91d4101
   263d0:	3fd17460 	.word	0x3fd17460
   263d4:	518f264d 	.word	0x518f264d
   263d8:	3fd55555 	.word	0x3fd55555
   263dc:	db6fabff 	.word	0xdb6fabff
   263e0:	3fdb6db6 	.word	0x3fdb6db6
   263e4:	33333303 	.word	0x33333303
   263e8:	3fe33333 	.word	0x3fe33333
   263ec:	40080000 	.word	0x40080000
   263f0:	3feec709 	.word	0x3feec709
   263f4:	dc3a03fd 	.word	0xdc3a03fd
   263f8:	145b01f5 	.word	0x145b01f5
   263fc:	be3e2fe0 	.word	0xbe3e2fe0
   26400:	408fffff 	.word	0x408fffff
   26404:	bf700000 	.word	0xbf700000
   26408:	652b82fe 	.word	0x652b82fe
   2640c:	3c971547 	.word	0x3c971547
   26410:	2800      	cmp	r0, #0
   26412:	d000      	beq.n	26416 <__ieee754_pow+0x616>
   26414:	e190      	b.n	26738 <__ieee754_pow+0x938>
   26416:	4aec      	ldr	r2, [pc, #944]	; (267c8 <__ieee754_pow+0x9c8>)
   26418:	4653      	mov	r3, sl
   2641a:	4694      	mov	ip, r2
   2641c:	2280      	movs	r2, #128	; 0x80
   2641e:	0352      	lsls	r2, r2, #13
   26420:	0011      	movs	r1, r2
   26422:	151b      	asrs	r3, r3, #20
   26424:	4463      	add	r3, ip
   26426:	4119      	asrs	r1, r3
   26428:	000b      	movs	r3, r1
   2642a:	4690      	mov	r8, r2
   2642c:	4ae7      	ldr	r2, [pc, #924]	; (267cc <__ieee754_pow+0x9cc>)
   2642e:	445b      	add	r3, fp
   26430:	4694      	mov	ip, r2
   26432:	005c      	lsls	r4, r3, #1
   26434:	0d64      	lsrs	r4, r4, #21
   26436:	4de6      	ldr	r5, [pc, #920]	; (267d0 <__ieee754_pow+0x9d0>)
   26438:	4464      	add	r4, ip
   2643a:	4125      	asrs	r5, r4
   2643c:	001a      	movs	r2, r3
   2643e:	43aa      	bics	r2, r5
   26440:	0011      	movs	r1, r2
   26442:	4642      	mov	r2, r8
   26444:	031b      	lsls	r3, r3, #12
   26446:	0b1b      	lsrs	r3, r3, #12
   26448:	4313      	orrs	r3, r2
   2644a:	2214      	movs	r2, #20
   2644c:	1b14      	subs	r4, r2, r4
   2644e:	4123      	asrs	r3, r4
   26450:	4699      	mov	r9, r3
   26452:	465b      	mov	r3, fp
   26454:	2000      	movs	r0, #0
   26456:	2b00      	cmp	r3, #0
   26458:	da00      	bge.n	2645c <__ieee754_pow+0x65c>
   2645a:	e1b0      	b.n	267be <__ieee754_pow+0x9be>
   2645c:	0002      	movs	r2, r0
   2645e:	000b      	movs	r3, r1
   26460:	0030      	movs	r0, r6
   26462:	0039      	movs	r1, r7
   26464:	f002 fd3a 	bl	28edc <__aeabi_dsub>
   26468:	000b      	movs	r3, r1
   2646a:	0002      	movs	r2, r0
   2646c:	0006      	movs	r6, r0
   2646e:	000f      	movs	r7, r1
   26470:	9800      	ldr	r0, [sp, #0]
   26472:	9901      	ldr	r1, [sp, #4]
   26474:	f001 fb6e 	bl	27b54 <__aeabi_dadd>
   26478:	464b      	mov	r3, r9
   2647a:	051b      	lsls	r3, r3, #20
   2647c:	000d      	movs	r5, r1
   2647e:	4698      	mov	r8, r3
   26480:	2400      	movs	r4, #0
   26482:	2200      	movs	r2, #0
   26484:	4bd3      	ldr	r3, [pc, #844]	; (267d4 <__ieee754_pow+0x9d4>)
   26486:	0020      	movs	r0, r4
   26488:	0029      	movs	r1, r5
   2648a:	f002 faa7 	bl	289dc <__aeabi_dmul>
   2648e:	0032      	movs	r2, r6
   26490:	9002      	str	r0, [sp, #8]
   26492:	9103      	str	r1, [sp, #12]
   26494:	003b      	movs	r3, r7
   26496:	0020      	movs	r0, r4
   26498:	0029      	movs	r1, r5
   2649a:	f002 fd1f 	bl	28edc <__aeabi_dsub>
   2649e:	0002      	movs	r2, r0
   264a0:	000b      	movs	r3, r1
   264a2:	9800      	ldr	r0, [sp, #0]
   264a4:	9901      	ldr	r1, [sp, #4]
   264a6:	f002 fd19 	bl	28edc <__aeabi_dsub>
   264aa:	4acb      	ldr	r2, [pc, #812]	; (267d8 <__ieee754_pow+0x9d8>)
   264ac:	4bcb      	ldr	r3, [pc, #812]	; (267dc <__ieee754_pow+0x9dc>)
   264ae:	f002 fa95 	bl	289dc <__aeabi_dmul>
   264b2:	4acb      	ldr	r2, [pc, #812]	; (267e0 <__ieee754_pow+0x9e0>)
   264b4:	0006      	movs	r6, r0
   264b6:	000f      	movs	r7, r1
   264b8:	4bca      	ldr	r3, [pc, #808]	; (267e4 <__ieee754_pow+0x9e4>)
   264ba:	0020      	movs	r0, r4
   264bc:	0029      	movs	r1, r5
   264be:	f002 fa8d 	bl	289dc <__aeabi_dmul>
   264c2:	0002      	movs	r2, r0
   264c4:	000b      	movs	r3, r1
   264c6:	0030      	movs	r0, r6
   264c8:	0039      	movs	r1, r7
   264ca:	f001 fb43 	bl	27b54 <__aeabi_dadd>
   264ce:	0004      	movs	r4, r0
   264d0:	000d      	movs	r5, r1
   264d2:	0002      	movs	r2, r0
   264d4:	000b      	movs	r3, r1
   264d6:	9802      	ldr	r0, [sp, #8]
   264d8:	9903      	ldr	r1, [sp, #12]
   264da:	f001 fb3b 	bl	27b54 <__aeabi_dadd>
   264de:	9a02      	ldr	r2, [sp, #8]
   264e0:	9b03      	ldr	r3, [sp, #12]
   264e2:	0006      	movs	r6, r0
   264e4:	000f      	movs	r7, r1
   264e6:	f002 fcf9 	bl	28edc <__aeabi_dsub>
   264ea:	0002      	movs	r2, r0
   264ec:	000b      	movs	r3, r1
   264ee:	0020      	movs	r0, r4
   264f0:	0029      	movs	r1, r5
   264f2:	f002 fcf3 	bl	28edc <__aeabi_dsub>
   264f6:	0032      	movs	r2, r6
   264f8:	9000      	str	r0, [sp, #0]
   264fa:	9101      	str	r1, [sp, #4]
   264fc:	003b      	movs	r3, r7
   264fe:	0030      	movs	r0, r6
   26500:	0039      	movs	r1, r7
   26502:	f002 fa6b 	bl	289dc <__aeabi_dmul>
   26506:	0004      	movs	r4, r0
   26508:	000d      	movs	r5, r1
   2650a:	4ab7      	ldr	r2, [pc, #732]	; (267e8 <__ieee754_pow+0x9e8>)
   2650c:	4bb7      	ldr	r3, [pc, #732]	; (267ec <__ieee754_pow+0x9ec>)
   2650e:	f002 fa65 	bl	289dc <__aeabi_dmul>
   26512:	4ab7      	ldr	r2, [pc, #732]	; (267f0 <__ieee754_pow+0x9f0>)
   26514:	4bb7      	ldr	r3, [pc, #732]	; (267f4 <__ieee754_pow+0x9f4>)
   26516:	f002 fce1 	bl	28edc <__aeabi_dsub>
   2651a:	0022      	movs	r2, r4
   2651c:	002b      	movs	r3, r5
   2651e:	f002 fa5d 	bl	289dc <__aeabi_dmul>
   26522:	4ab5      	ldr	r2, [pc, #724]	; (267f8 <__ieee754_pow+0x9f8>)
   26524:	4bb5      	ldr	r3, [pc, #724]	; (267fc <__ieee754_pow+0x9fc>)
   26526:	f001 fb15 	bl	27b54 <__aeabi_dadd>
   2652a:	0022      	movs	r2, r4
   2652c:	002b      	movs	r3, r5
   2652e:	f002 fa55 	bl	289dc <__aeabi_dmul>
   26532:	4ab3      	ldr	r2, [pc, #716]	; (26800 <__ieee754_pow+0xa00>)
   26534:	4bb3      	ldr	r3, [pc, #716]	; (26804 <__ieee754_pow+0xa04>)
   26536:	f002 fcd1 	bl	28edc <__aeabi_dsub>
   2653a:	0022      	movs	r2, r4
   2653c:	002b      	movs	r3, r5
   2653e:	f002 fa4d 	bl	289dc <__aeabi_dmul>
   26542:	4ab1      	ldr	r2, [pc, #708]	; (26808 <__ieee754_pow+0xa08>)
   26544:	4bb1      	ldr	r3, [pc, #708]	; (2680c <__ieee754_pow+0xa0c>)
   26546:	f001 fb05 	bl	27b54 <__aeabi_dadd>
   2654a:	0022      	movs	r2, r4
   2654c:	002b      	movs	r3, r5
   2654e:	f002 fa45 	bl	289dc <__aeabi_dmul>
   26552:	0002      	movs	r2, r0
   26554:	000b      	movs	r3, r1
   26556:	0030      	movs	r0, r6
   26558:	0039      	movs	r1, r7
   2655a:	f002 fcbf 	bl	28edc <__aeabi_dsub>
   2655e:	0004      	movs	r4, r0
   26560:	000d      	movs	r5, r1
   26562:	0002      	movs	r2, r0
   26564:	000b      	movs	r3, r1
   26566:	0030      	movs	r0, r6
   26568:	0039      	movs	r1, r7
   2656a:	f002 fa37 	bl	289dc <__aeabi_dmul>
   2656e:	2380      	movs	r3, #128	; 0x80
   26570:	9002      	str	r0, [sp, #8]
   26572:	9103      	str	r1, [sp, #12]
   26574:	2200      	movs	r2, #0
   26576:	05db      	lsls	r3, r3, #23
   26578:	0020      	movs	r0, r4
   2657a:	0029      	movs	r1, r5
   2657c:	f002 fcae 	bl	28edc <__aeabi_dsub>
   26580:	0002      	movs	r2, r0
   26582:	000b      	movs	r3, r1
   26584:	9802      	ldr	r0, [sp, #8]
   26586:	9903      	ldr	r1, [sp, #12]
   26588:	f001 fdf4 	bl	28174 <__aeabi_ddiv>
   2658c:	9a00      	ldr	r2, [sp, #0]
   2658e:	9b01      	ldr	r3, [sp, #4]
   26590:	0004      	movs	r4, r0
   26592:	000d      	movs	r5, r1
   26594:	0030      	movs	r0, r6
   26596:	0039      	movs	r1, r7
   26598:	f002 fa20 	bl	289dc <__aeabi_dmul>
   2659c:	9a00      	ldr	r2, [sp, #0]
   2659e:	9b01      	ldr	r3, [sp, #4]
   265a0:	f001 fad8 	bl	27b54 <__aeabi_dadd>
   265a4:	0002      	movs	r2, r0
   265a6:	000b      	movs	r3, r1
   265a8:	0020      	movs	r0, r4
   265aa:	0029      	movs	r1, r5
   265ac:	f002 fc96 	bl	28edc <__aeabi_dsub>
   265b0:	0032      	movs	r2, r6
   265b2:	003b      	movs	r3, r7
   265b4:	f002 fc92 	bl	28edc <__aeabi_dsub>
   265b8:	0002      	movs	r2, r0
   265ba:	000b      	movs	r3, r1
   265bc:	2000      	movs	r0, #0
   265be:	4994      	ldr	r1, [pc, #592]	; (26810 <__ieee754_pow+0xa10>)
   265c0:	f002 fc8c 	bl	28edc <__aeabi_dsub>
   265c4:	4643      	mov	r3, r8
   265c6:	185b      	adds	r3, r3, r1
   265c8:	151a      	asrs	r2, r3, #20
   265ca:	2a00      	cmp	r2, #0
   265cc:	dc00      	bgt.n	265d0 <__ieee754_pow+0x7d0>
   265ce:	e149      	b.n	26864 <__ieee754_pow+0xa64>
   265d0:	0019      	movs	r1, r3
   265d2:	9a06      	ldr	r2, [sp, #24]
   265d4:	9b07      	ldr	r3, [sp, #28]
   265d6:	f002 fa01 	bl	289dc <__aeabi_dmul>
   265da:	e459      	b.n	25e90 <__ieee754_pow+0x90>
   265dc:	003a      	movs	r2, r7
   265de:	0033      	movs	r3, r6
   265e0:	0038      	movs	r0, r7
   265e2:	0031      	movs	r1, r6
   265e4:	f002 f9fa 	bl	289dc <__aeabi_dmul>
   265e8:	e452      	b.n	25e90 <__ieee754_pow+0x90>
   265ea:	4653      	mov	r3, sl
   265ec:	2b00      	cmp	r3, #0
   265ee:	db00      	blt.n	265f2 <__ieee754_pow+0x7f2>
   265f0:	e4d9      	b.n	25fa6 <__ieee754_pow+0x1a6>
   265f2:	9c00      	ldr	r4, [sp, #0]
   265f4:	9d01      	ldr	r5, [sp, #4]
   265f6:	2280      	movs	r2, #128	; 0x80
   265f8:	0612      	lsls	r2, r2, #24
   265fa:	002b      	movs	r3, r5
   265fc:	4694      	mov	ip, r2
   265fe:	4463      	add	r3, ip
   26600:	0020      	movs	r0, r4
   26602:	0019      	movs	r1, r3
   26604:	f7ff fc44 	bl	25e90 <__ieee754_pow+0x90>
   26608:	004b      	lsls	r3, r1, #1
   2660a:	085b      	lsrs	r3, r3, #1
   2660c:	469a      	mov	sl, r3
   2660e:	4b81      	ldr	r3, [pc, #516]	; (26814 <__ieee754_pow+0xa14>)
   26610:	459a      	cmp	sl, r3
   26612:	dc00      	bgt.n	26616 <__ieee754_pow+0x816>
   26614:	e0b1      	b.n	2677a <__ieee754_pow+0x97a>
   26616:	4b80      	ldr	r3, [pc, #512]	; (26818 <__ieee754_pow+0xa18>)
   26618:	445b      	add	r3, fp
   2661a:	431a      	orrs	r2, r3
   2661c:	d10c      	bne.n	26638 <__ieee754_pow+0x838>
   2661e:	0032      	movs	r2, r6
   26620:	003b      	movs	r3, r7
   26622:	f002 fc5b 	bl	28edc <__aeabi_dsub>
   26626:	0002      	movs	r2, r0
   26628:	000b      	movs	r3, r1
   2662a:	9800      	ldr	r0, [sp, #0]
   2662c:	9901      	ldr	r1, [sp, #4]
   2662e:	f000 fcbb 	bl	26fa8 <__aeabi_dcmple>
   26632:	2800      	cmp	r0, #0
   26634:	d100      	bne.n	26638 <__ieee754_pow+0x838>
   26636:	e6ee      	b.n	26416 <__ieee754_pow+0x616>
   26638:	9806      	ldr	r0, [sp, #24]
   2663a:	9907      	ldr	r1, [sp, #28]
   2663c:	4a77      	ldr	r2, [pc, #476]	; (2681c <__ieee754_pow+0xa1c>)
   2663e:	4b78      	ldr	r3, [pc, #480]	; (26820 <__ieee754_pow+0xa20>)
   26640:	f002 f9cc 	bl	289dc <__aeabi_dmul>
   26644:	4a75      	ldr	r2, [pc, #468]	; (2681c <__ieee754_pow+0xa1c>)
   26646:	4b76      	ldr	r3, [pc, #472]	; (26820 <__ieee754_pow+0xa20>)
   26648:	f002 f9c8 	bl	289dc <__aeabi_dmul>
   2664c:	f7ff fc20 	bl	25e90 <__ieee754_pow+0x90>
   26650:	2300      	movs	r3, #0
   26652:	4c74      	ldr	r4, [pc, #464]	; (26824 <__ieee754_pow+0xa24>)
   26654:	9306      	str	r3, [sp, #24]
   26656:	9407      	str	r4, [sp, #28]
   26658:	e652      	b.n	26300 <__ieee754_pow+0x500>
   2665a:	0002      	movs	r2, r0
   2665c:	000b      	movs	r3, r1
   2665e:	2000      	movs	r0, #0
   26660:	496b      	ldr	r1, [pc, #428]	; (26810 <__ieee754_pow+0xa10>)
   26662:	f001 fd87 	bl	28174 <__aeabi_ddiv>
   26666:	f7ff fc32 	bl	25ece <__ieee754_pow+0xce>
   2666a:	4653      	mov	r3, sl
   2666c:	2b00      	cmp	r3, #0
   2666e:	db00      	blt.n	26672 <__ieee754_pow+0x872>
   26670:	e499      	b.n	25fa6 <__ieee754_pow+0x1a6>
   26672:	e454      	b.n	25f1e <__ieee754_pow+0x11e>
   26674:	4b6c      	ldr	r3, [pc, #432]	; (26828 <__ieee754_pow+0xa28>)
   26676:	429c      	cmp	r4, r3
   26678:	ddf7      	ble.n	2666a <__ieee754_pow+0x86a>
   2667a:	4b65      	ldr	r3, [pc, #404]	; (26810 <__ieee754_pow+0xa10>)
   2667c:	429c      	cmp	r4, r3
   2667e:	dd00      	ble.n	26682 <__ieee754_pow+0x882>
   26680:	e44a      	b.n	25f18 <__ieee754_pow+0x118>
   26682:	2200      	movs	r2, #0
   26684:	4b62      	ldr	r3, [pc, #392]	; (26810 <__ieee754_pow+0xa10>)
   26686:	f002 fc29 	bl	28edc <__aeabi_dsub>
   2668a:	22c0      	movs	r2, #192	; 0xc0
   2668c:	4b67      	ldr	r3, [pc, #412]	; (2682c <__ieee754_pow+0xa2c>)
   2668e:	05d2      	lsls	r2, r2, #23
   26690:	0004      	movs	r4, r0
   26692:	000d      	movs	r5, r1
   26694:	f002 f9a2 	bl	289dc <__aeabi_dmul>
   26698:	4a65      	ldr	r2, [pc, #404]	; (26830 <__ieee754_pow+0xa30>)
   2669a:	0006      	movs	r6, r0
   2669c:	000f      	movs	r7, r1
   2669e:	4b65      	ldr	r3, [pc, #404]	; (26834 <__ieee754_pow+0xa34>)
   266a0:	0020      	movs	r0, r4
   266a2:	0029      	movs	r1, r5
   266a4:	f002 f99a 	bl	289dc <__aeabi_dmul>
   266a8:	2200      	movs	r2, #0
   266aa:	9002      	str	r0, [sp, #8]
   266ac:	9103      	str	r1, [sp, #12]
   266ae:	4b62      	ldr	r3, [pc, #392]	; (26838 <__ieee754_pow+0xa38>)
   266b0:	0020      	movs	r0, r4
   266b2:	0029      	movs	r1, r5
   266b4:	f002 f992 	bl	289dc <__aeabi_dmul>
   266b8:	0002      	movs	r2, r0
   266ba:	000b      	movs	r3, r1
   266bc:	485f      	ldr	r0, [pc, #380]	; (2683c <__ieee754_pow+0xa3c>)
   266be:	4960      	ldr	r1, [pc, #384]	; (26840 <__ieee754_pow+0xa40>)
   266c0:	f002 fc0c 	bl	28edc <__aeabi_dsub>
   266c4:	0022      	movs	r2, r4
   266c6:	002b      	movs	r3, r5
   266c8:	f002 f988 	bl	289dc <__aeabi_dmul>
   266cc:	0002      	movs	r2, r0
   266ce:	000b      	movs	r3, r1
   266d0:	2000      	movs	r0, #0
   266d2:	495c      	ldr	r1, [pc, #368]	; (26844 <__ieee754_pow+0xa44>)
   266d4:	f002 fc02 	bl	28edc <__aeabi_dsub>
   266d8:	0022      	movs	r2, r4
   266da:	9004      	str	r0, [sp, #16]
   266dc:	9105      	str	r1, [sp, #20]
   266de:	002b      	movs	r3, r5
   266e0:	0020      	movs	r0, r4
   266e2:	0029      	movs	r1, r5
   266e4:	f002 f97a 	bl	289dc <__aeabi_dmul>
   266e8:	0002      	movs	r2, r0
   266ea:	000b      	movs	r3, r1
   266ec:	9804      	ldr	r0, [sp, #16]
   266ee:	9905      	ldr	r1, [sp, #20]
   266f0:	f002 f974 	bl	289dc <__aeabi_dmul>
   266f4:	4a54      	ldr	r2, [pc, #336]	; (26848 <__ieee754_pow+0xa48>)
   266f6:	4b4d      	ldr	r3, [pc, #308]	; (2682c <__ieee754_pow+0xa2c>)
   266f8:	f002 f970 	bl	289dc <__aeabi_dmul>
   266fc:	0002      	movs	r2, r0
   266fe:	000b      	movs	r3, r1
   26700:	9802      	ldr	r0, [sp, #8]
   26702:	9903      	ldr	r1, [sp, #12]
   26704:	f002 fbea 	bl	28edc <__aeabi_dsub>
   26708:	0002      	movs	r2, r0
   2670a:	000b      	movs	r3, r1
   2670c:	0004      	movs	r4, r0
   2670e:	000d      	movs	r5, r1
   26710:	0030      	movs	r0, r6
   26712:	0039      	movs	r1, r7
   26714:	f001 fa1e 	bl	27b54 <__aeabi_dadd>
   26718:	2000      	movs	r0, #0
   2671a:	0032      	movs	r2, r6
   2671c:	003b      	movs	r3, r7
   2671e:	9002      	str	r0, [sp, #8]
   26720:	9103      	str	r1, [sp, #12]
   26722:	f002 fbdb 	bl	28edc <__aeabi_dsub>
   26726:	0002      	movs	r2, r0
   26728:	000b      	movs	r3, r1
   2672a:	0020      	movs	r0, r4
   2672c:	0029      	movs	r1, r5
   2672e:	f002 fbd5 	bl	28edc <__aeabi_dsub>
   26732:	9004      	str	r0, [sp, #16]
   26734:	9105      	str	r1, [sp, #20]
   26736:	e5d9      	b.n	262ec <__ieee754_pow+0x4ec>
   26738:	4a44      	ldr	r2, [pc, #272]	; (2684c <__ieee754_pow+0xa4c>)
   2673a:	4b45      	ldr	r3, [pc, #276]	; (26850 <__ieee754_pow+0xa50>)
   2673c:	9806      	ldr	r0, [sp, #24]
   2673e:	9907      	ldr	r1, [sp, #28]
   26740:	f002 f94c 	bl	289dc <__aeabi_dmul>
   26744:	4a41      	ldr	r2, [pc, #260]	; (2684c <__ieee754_pow+0xa4c>)
   26746:	4b42      	ldr	r3, [pc, #264]	; (26850 <__ieee754_pow+0xa50>)
   26748:	f002 f948 	bl	289dc <__aeabi_dmul>
   2674c:	f7ff fba0 	bl	25e90 <__ieee754_pow+0x90>
   26750:	2a00      	cmp	r2, #0
   26752:	d001      	beq.n	26758 <__ieee754_pow+0x958>
   26754:	f7ff fba9 	bl	25eaa <__ieee754_pow+0xaa>
   26758:	3214      	adds	r2, #20
   2675a:	1ad3      	subs	r3, r2, r3
   2675c:	002a      	movs	r2, r5
   2675e:	411a      	asrs	r2, r3
   26760:	0011      	movs	r1, r2
   26762:	4099      	lsls	r1, r3
   26764:	428d      	cmp	r5, r1
   26766:	d001      	beq.n	2676c <__ieee754_pow+0x96c>
   26768:	f7ff fb76 	bl	25e58 <__ieee754_pow+0x58>
   2676c:	2301      	movs	r3, #1
   2676e:	401a      	ands	r2, r3
   26770:	18db      	adds	r3, r3, r3
   26772:	1a9b      	subs	r3, r3, r2
   26774:	469b      	mov	fp, r3
   26776:	f7ff fb6f 	bl	25e58 <__ieee754_pow+0x58>
   2677a:	2200      	movs	r2, #0
   2677c:	4b31      	ldr	r3, [pc, #196]	; (26844 <__ieee754_pow+0xa44>)
   2677e:	4690      	mov	r8, r2
   26780:	4691      	mov	r9, r2
   26782:	459a      	cmp	sl, r3
   26784:	dc00      	bgt.n	26788 <__ieee754_pow+0x988>
   26786:	e67b      	b.n	26480 <__ieee754_pow+0x680>
   26788:	e645      	b.n	26416 <__ieee754_pow+0x616>
   2678a:	0002      	movs	r2, r0
   2678c:	000b      	movs	r3, r1
   2678e:	f002 fba5 	bl	28edc <__aeabi_dsub>
   26792:	0002      	movs	r2, r0
   26794:	000b      	movs	r3, r1
   26796:	f001 fced 	bl	28174 <__aeabi_ddiv>
   2679a:	f7ff fb79 	bl	25e90 <__ieee754_pow+0x90>
   2679e:	2380      	movs	r3, #128	; 0x80
   267a0:	4c2c      	ldr	r4, [pc, #176]	; (26854 <__ieee754_pow+0xa54>)
   267a2:	05db      	lsls	r3, r3, #23
   267a4:	9308      	str	r3, [sp, #32]
   267a6:	9409      	str	r4, [sp, #36]	; 0x24
   267a8:	4b2b      	ldr	r3, [pc, #172]	; (26858 <__ieee754_pow+0xa58>)
   267aa:	4c2c      	ldr	r4, [pc, #176]	; (2685c <__ieee754_pow+0xa5c>)
   267ac:	2200      	movs	r2, #0
   267ae:	930c      	str	r3, [sp, #48]	; 0x30
   267b0:	940d      	str	r4, [sp, #52]	; 0x34
   267b2:	2480      	movs	r4, #128	; 0x80
   267b4:	4b2a      	ldr	r3, [pc, #168]	; (26860 <__ieee754_pow+0xa60>)
   267b6:	02e4      	lsls	r4, r4, #11
   267b8:	9206      	str	r2, [sp, #24]
   267ba:	9307      	str	r3, [sp, #28]
   267bc:	e449      	b.n	26052 <__ieee754_pow+0x252>
   267be:	464b      	mov	r3, r9
   267c0:	425b      	negs	r3, r3
   267c2:	4699      	mov	r9, r3
   267c4:	e64a      	b.n	2645c <__ieee754_pow+0x65c>
   267c6:	46c0      	nop			; (mov r8, r8)
   267c8:	fffffc02 	.word	0xfffffc02
   267cc:	fffffc01 	.word	0xfffffc01
   267d0:	000fffff 	.word	0x000fffff
   267d4:	3fe62e43 	.word	0x3fe62e43
   267d8:	fefa39ef 	.word	0xfefa39ef
   267dc:	3fe62e42 	.word	0x3fe62e42
   267e0:	0ca86c39 	.word	0x0ca86c39
   267e4:	be205c61 	.word	0xbe205c61
   267e8:	72bea4d0 	.word	0x72bea4d0
   267ec:	3e663769 	.word	0x3e663769
   267f0:	c5d26bf1 	.word	0xc5d26bf1
   267f4:	3ebbbd41 	.word	0x3ebbbd41
   267f8:	af25de2c 	.word	0xaf25de2c
   267fc:	3f11566a 	.word	0x3f11566a
   26800:	16bebd93 	.word	0x16bebd93
   26804:	3f66c16c 	.word	0x3f66c16c
   26808:	5555553e 	.word	0x5555553e
   2680c:	3fc55555 	.word	0x3fc55555
   26810:	3ff00000 	.word	0x3ff00000
   26814:	4090cbff 	.word	0x4090cbff
   26818:	3f6f3400 	.word	0x3f6f3400
   2681c:	c2f8f359 	.word	0xc2f8f359
   26820:	01a56e1f 	.word	0x01a56e1f
   26824:	bff00000 	.word	0xbff00000
   26828:	3feffffe 	.word	0x3feffffe
   2682c:	3ff71547 	.word	0x3ff71547
   26830:	f85ddf44 	.word	0xf85ddf44
   26834:	3e54ae0b 	.word	0x3e54ae0b
   26838:	3fd00000 	.word	0x3fd00000
   2683c:	55555555 	.word	0x55555555
   26840:	3fd55555 	.word	0x3fd55555
   26844:	3fe00000 	.word	0x3fe00000
   26848:	652b82fe 	.word	0x652b82fe
   2684c:	8800759c 	.word	0x8800759c
   26850:	7e37e43c 	.word	0x7e37e43c
   26854:	3fe2b803 	.word	0x3fe2b803
   26858:	43cfd006 	.word	0x43cfd006
   2685c:	3e4cfdeb 	.word	0x3e4cfdeb
   26860:	3ff80000 	.word	0x3ff80000
   26864:	464a      	mov	r2, r9
   26866:	f000 f999 	bl	26b9c <scalbn>
   2686a:	e6b2      	b.n	265d2 <__ieee754_pow+0x7d2>

0002686c <__ieee754_sqrt>:
   2686c:	4b6c      	ldr	r3, [pc, #432]	; (26a20 <__ieee754_sqrt+0x1b4>)
   2686e:	b5f0      	push	{r4, r5, r6, r7, lr}
   26870:	000a      	movs	r2, r1
   26872:	4646      	mov	r6, r8
   26874:	000d      	movs	r5, r1
   26876:	46d6      	mov	lr, sl
   26878:	464f      	mov	r7, r9
   2687a:	0019      	movs	r1, r3
   2687c:	b5c0      	push	{r6, r7, lr}
   2687e:	0004      	movs	r4, r0
   26880:	0006      	movs	r6, r0
   26882:	4029      	ands	r1, r5
   26884:	4299      	cmp	r1, r3
   26886:	d100      	bne.n	2688a <__ieee754_sqrt+0x1e>
   26888:	e0a7      	b.n	269da <__ieee754_sqrt+0x16e>
   2688a:	2d00      	cmp	r5, #0
   2688c:	dc00      	bgt.n	26890 <__ieee754_sqrt+0x24>
   2688e:	e081      	b.n	26994 <__ieee754_sqrt+0x128>
   26890:	152f      	asrs	r7, r5, #20
   26892:	d100      	bne.n	26896 <__ieee754_sqrt+0x2a>
   26894:	e08e      	b.n	269b4 <__ieee754_sqrt+0x148>
   26896:	4b63      	ldr	r3, [pc, #396]	; (26a24 <__ieee754_sqrt+0x1b8>)
   26898:	0312      	lsls	r2, r2, #12
   2689a:	469c      	mov	ip, r3
   2689c:	2380      	movs	r3, #128	; 0x80
   2689e:	0b12      	lsrs	r2, r2, #12
   268a0:	035b      	lsls	r3, r3, #13
   268a2:	4467      	add	r7, ip
   268a4:	431a      	orrs	r2, r3
   268a6:	07fb      	lsls	r3, r7, #31
   268a8:	d468      	bmi.n	2697c <__ieee754_sqrt+0x110>
   268aa:	107b      	asrs	r3, r7, #1
   268ac:	469c      	mov	ip, r3
   268ae:	0fe3      	lsrs	r3, r4, #31
   268b0:	189b      	adds	r3, r3, r2
   268b2:	189b      	adds	r3, r3, r2
   268b4:	2280      	movs	r2, #128	; 0x80
   268b6:	2116      	movs	r1, #22
   268b8:	2600      	movs	r6, #0
   268ba:	2500      	movs	r5, #0
   268bc:	0064      	lsls	r4, r4, #1
   268be:	0392      	lsls	r2, r2, #14
   268c0:	18a8      	adds	r0, r5, r2
   268c2:	4298      	cmp	r0, r3
   268c4:	dc02      	bgt.n	268cc <__ieee754_sqrt+0x60>
   268c6:	1885      	adds	r5, r0, r2
   268c8:	1a1b      	subs	r3, r3, r0
   268ca:	18b6      	adds	r6, r6, r2
   268cc:	0fe0      	lsrs	r0, r4, #31
   268ce:	005b      	lsls	r3, r3, #1
   268d0:	3901      	subs	r1, #1
   268d2:	181b      	adds	r3, r3, r0
   268d4:	0064      	lsls	r4, r4, #1
   268d6:	0852      	lsrs	r2, r2, #1
   268d8:	2900      	cmp	r1, #0
   268da:	d1f1      	bne.n	268c0 <__ieee754_sqrt+0x54>
   268dc:	2200      	movs	r2, #0
   268de:	4692      	mov	sl, r2
   268e0:	4690      	mov	r8, r2
   268e2:	2280      	movs	r2, #128	; 0x80
   268e4:	2020      	movs	r0, #32
   268e6:	0612      	lsls	r2, r2, #24
   268e8:	e009      	b.n	268fe <__ieee754_sqrt+0x92>
   268ea:	42ab      	cmp	r3, r5
   268ec:	d038      	beq.n	26960 <__ieee754_sqrt+0xf4>
   268ee:	0fe1      	lsrs	r1, r4, #31
   268f0:	18c9      	adds	r1, r1, r3
   268f2:	3801      	subs	r0, #1
   268f4:	18cb      	adds	r3, r1, r3
   268f6:	0064      	lsls	r4, r4, #1
   268f8:	0852      	lsrs	r2, r2, #1
   268fa:	2800      	cmp	r0, #0
   268fc:	d018      	beq.n	26930 <__ieee754_sqrt+0xc4>
   268fe:	4641      	mov	r1, r8
   26900:	1851      	adds	r1, r2, r1
   26902:	42ab      	cmp	r3, r5
   26904:	ddf1      	ble.n	268ea <__ieee754_sqrt+0x7e>
   26906:	188f      	adds	r7, r1, r2
   26908:	46b8      	mov	r8, r7
   2690a:	46a9      	mov	r9, r5
   2690c:	2900      	cmp	r1, #0
   2690e:	db30      	blt.n	26972 <__ieee754_sqrt+0x106>
   26910:	1b5b      	subs	r3, r3, r5
   26912:	428c      	cmp	r4, r1
   26914:	41ad      	sbcs	r5, r5
   26916:	426d      	negs	r5, r5
   26918:	1b5b      	subs	r3, r3, r5
   2691a:	1a64      	subs	r4, r4, r1
   2691c:	0fe1      	lsrs	r1, r4, #31
   2691e:	18c9      	adds	r1, r1, r3
   26920:	3801      	subs	r0, #1
   26922:	4492      	add	sl, r2
   26924:	464d      	mov	r5, r9
   26926:	18cb      	adds	r3, r1, r3
   26928:	0064      	lsls	r4, r4, #1
   2692a:	0852      	lsrs	r2, r2, #1
   2692c:	2800      	cmp	r0, #0
   2692e:	d1e6      	bne.n	268fe <__ieee754_sqrt+0x92>
   26930:	4323      	orrs	r3, r4
   26932:	d128      	bne.n	26986 <__ieee754_sqrt+0x11a>
   26934:	4653      	mov	r3, sl
   26936:	085b      	lsrs	r3, r3, #1
   26938:	493b      	ldr	r1, [pc, #236]	; (26a28 <__ieee754_sqrt+0x1bc>)
   2693a:	1072      	asrs	r2, r6, #1
   2693c:	4688      	mov	r8, r1
   2693e:	4442      	add	r2, r8
   26940:	07f1      	lsls	r1, r6, #31
   26942:	d502      	bpl.n	2694a <__ieee754_sqrt+0xde>
   26944:	2180      	movs	r1, #128	; 0x80
   26946:	0609      	lsls	r1, r1, #24
   26948:	430b      	orrs	r3, r1
   2694a:	4661      	mov	r1, ip
   2694c:	001e      	movs	r6, r3
   2694e:	050f      	lsls	r7, r1, #20
   26950:	18bd      	adds	r5, r7, r2
   26952:	0030      	movs	r0, r6
   26954:	0029      	movs	r1, r5
   26956:	bc1c      	pop	{r2, r3, r4}
   26958:	4690      	mov	r8, r2
   2695a:	4699      	mov	r9, r3
   2695c:	46a2      	mov	sl, r4
   2695e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26960:	42a1      	cmp	r1, r4
   26962:	d8c4      	bhi.n	268ee <__ieee754_sqrt+0x82>
   26964:	188f      	adds	r7, r1, r2
   26966:	46b8      	mov	r8, r7
   26968:	2900      	cmp	r1, #0
   2696a:	db42      	blt.n	269f2 <__ieee754_sqrt+0x186>
   2696c:	4699      	mov	r9, r3
   2696e:	2300      	movs	r3, #0
   26970:	e7d3      	b.n	2691a <__ieee754_sqrt+0xae>
   26972:	2f00      	cmp	r7, #0
   26974:	db2f      	blt.n	269d6 <__ieee754_sqrt+0x16a>
   26976:	1c6f      	adds	r7, r5, #1
   26978:	46b9      	mov	r9, r7
   2697a:	e7c9      	b.n	26910 <__ieee754_sqrt+0xa4>
   2697c:	0fe1      	lsrs	r1, r4, #31
   2697e:	0052      	lsls	r2, r2, #1
   26980:	188a      	adds	r2, r1, r2
   26982:	0064      	lsls	r4, r4, #1
   26984:	e791      	b.n	268aa <__ieee754_sqrt+0x3e>
   26986:	4653      	mov	r3, sl
   26988:	3301      	adds	r3, #1
   2698a:	d035      	beq.n	269f8 <__ieee754_sqrt+0x18c>
   2698c:	4653      	mov	r3, sl
   2698e:	3301      	adds	r3, #1
   26990:	085b      	lsrs	r3, r3, #1
   26992:	e7d1      	b.n	26938 <__ieee754_sqrt+0xcc>
   26994:	006b      	lsls	r3, r5, #1
   26996:	085b      	lsrs	r3, r3, #1
   26998:	4303      	orrs	r3, r0
   2699a:	d0da      	beq.n	26952 <__ieee754_sqrt+0xe6>
   2699c:	2700      	movs	r7, #0
   2699e:	2d00      	cmp	r5, #0
   269a0:	d132      	bne.n	26a08 <__ieee754_sqrt+0x19c>
   269a2:	0ae2      	lsrs	r2, r4, #11
   269a4:	3f15      	subs	r7, #21
   269a6:	0564      	lsls	r4, r4, #21
   269a8:	2a00      	cmp	r2, #0
   269aa:	d0fa      	beq.n	269a2 <__ieee754_sqrt+0x136>
   269ac:	2380      	movs	r3, #128	; 0x80
   269ae:	035b      	lsls	r3, r3, #13
   269b0:	421a      	tst	r2, r3
   269b2:	d124      	bne.n	269fe <__ieee754_sqrt+0x192>
   269b4:	2080      	movs	r0, #128	; 0x80
   269b6:	2300      	movs	r3, #0
   269b8:	0340      	lsls	r0, r0, #13
   269ba:	e000      	b.n	269be <__ieee754_sqrt+0x152>
   269bc:	000b      	movs	r3, r1
   269be:	0052      	lsls	r2, r2, #1
   269c0:	1c59      	adds	r1, r3, #1
   269c2:	4202      	tst	r2, r0
   269c4:	d0fa      	beq.n	269bc <__ieee754_sqrt+0x150>
   269c6:	2020      	movs	r0, #32
   269c8:	1a40      	subs	r0, r0, r1
   269ca:	1aff      	subs	r7, r7, r3
   269cc:	0023      	movs	r3, r4
   269ce:	40c3      	lsrs	r3, r0
   269d0:	408c      	lsls	r4, r1
   269d2:	431a      	orrs	r2, r3
   269d4:	e75f      	b.n	26896 <__ieee754_sqrt+0x2a>
   269d6:	46a9      	mov	r9, r5
   269d8:	e79a      	b.n	26910 <__ieee754_sqrt+0xa4>
   269da:	002b      	movs	r3, r5
   269dc:	0002      	movs	r2, r0
   269de:	0029      	movs	r1, r5
   269e0:	f001 fffc 	bl	289dc <__aeabi_dmul>
   269e4:	0032      	movs	r2, r6
   269e6:	002b      	movs	r3, r5
   269e8:	f001 f8b4 	bl	27b54 <__aeabi_dadd>
   269ec:	0006      	movs	r6, r0
   269ee:	000d      	movs	r5, r1
   269f0:	e7af      	b.n	26952 <__ieee754_sqrt+0xe6>
   269f2:	2f00      	cmp	r7, #0
   269f4:	dabf      	bge.n	26976 <__ieee754_sqrt+0x10a>
   269f6:	e7b9      	b.n	2696c <__ieee754_sqrt+0x100>
   269f8:	3601      	adds	r6, #1
   269fa:	2300      	movs	r3, #0
   269fc:	e79c      	b.n	26938 <__ieee754_sqrt+0xcc>
   269fe:	2301      	movs	r3, #1
   26a00:	2100      	movs	r1, #0
   26a02:	2020      	movs	r0, #32
   26a04:	425b      	negs	r3, r3
   26a06:	e7e0      	b.n	269ca <__ieee754_sqrt+0x15e>
   26a08:	002b      	movs	r3, r5
   26a0a:	0002      	movs	r2, r0
   26a0c:	0029      	movs	r1, r5
   26a0e:	f002 fa65 	bl	28edc <__aeabi_dsub>
   26a12:	0002      	movs	r2, r0
   26a14:	000b      	movs	r3, r1
   26a16:	f001 fbad 	bl	28174 <__aeabi_ddiv>
   26a1a:	0006      	movs	r6, r0
   26a1c:	000d      	movs	r5, r1
   26a1e:	e798      	b.n	26952 <__ieee754_sqrt+0xe6>
   26a20:	7ff00000 	.word	0x7ff00000
   26a24:	fffffc01 	.word	0xfffffc01
   26a28:	3fe00000 	.word	0x3fe00000

00026a2c <fabs>:
   26a2c:	0049      	lsls	r1, r1, #1
   26a2e:	084b      	lsrs	r3, r1, #1
   26a30:	0019      	movs	r1, r3
   26a32:	4770      	bx	lr

00026a34 <finite>:
   26a34:	4b03      	ldr	r3, [pc, #12]	; (26a44 <finite+0x10>)
   26a36:	0048      	lsls	r0, r1, #1
   26a38:	469c      	mov	ip, r3
   26a3a:	0840      	lsrs	r0, r0, #1
   26a3c:	4460      	add	r0, ip
   26a3e:	0fc0      	lsrs	r0, r0, #31
   26a40:	4770      	bx	lr
   26a42:	46c0      	nop			; (mov r8, r8)
   26a44:	80100000 	.word	0x80100000

00026a48 <matherr>:
   26a48:	2000      	movs	r0, #0
   26a4a:	4770      	bx	lr

00026a4c <nan>:
   26a4c:	2000      	movs	r0, #0
   26a4e:	4901      	ldr	r1, [pc, #4]	; (26a54 <nan+0x8>)
   26a50:	4770      	bx	lr
   26a52:	46c0      	nop			; (mov r8, r8)
   26a54:	7ff80000 	.word	0x7ff80000

00026a58 <rint>:
   26a58:	b5f0      	push	{r4, r5, r6, r7, lr}
   26a5a:	46c6      	mov	lr, r8
   26a5c:	b500      	push	{lr}
   26a5e:	0fcb      	lsrs	r3, r1, #31
   26a60:	4698      	mov	r8, r3
   26a62:	4c4a      	ldr	r4, [pc, #296]	; (26b8c <rint+0x134>)
   26a64:	004b      	lsls	r3, r1, #1
   26a66:	0d5b      	lsrs	r3, r3, #21
   26a68:	191e      	adds	r6, r3, r4
   26a6a:	b082      	sub	sp, #8
   26a6c:	0007      	movs	r7, r0
   26a6e:	000a      	movs	r2, r1
   26a70:	2e13      	cmp	r6, #19
   26a72:	dc35      	bgt.n	26ae0 <rint+0x88>
   26a74:	2e00      	cmp	r6, #0
   26a76:	db57      	blt.n	26b28 <rint+0xd0>
   26a78:	4b45      	ldr	r3, [pc, #276]	; (26b90 <rint+0x138>)
   26a7a:	0004      	movs	r4, r0
   26a7c:	4133      	asrs	r3, r6
   26a7e:	001f      	movs	r7, r3
   26a80:	400f      	ands	r7, r1
   26a82:	4307      	orrs	r7, r0
   26a84:	000d      	movs	r5, r1
   26a86:	2f00      	cmp	r7, #0
   26a88:	d024      	beq.n	26ad4 <rint+0x7c>
   26a8a:	085b      	lsrs	r3, r3, #1
   26a8c:	001c      	movs	r4, r3
   26a8e:	400c      	ands	r4, r1
   26a90:	4320      	orrs	r0, r4
   26a92:	2700      	movs	r7, #0
   26a94:	2800      	cmp	r0, #0
   26a96:	d007      	beq.n	26aa8 <rint+0x50>
   26a98:	2e13      	cmp	r6, #19
   26a9a:	d100      	bne.n	26a9e <rint+0x46>
   26a9c:	e073      	b.n	26b86 <rint+0x12e>
   26a9e:	2280      	movs	r2, #128	; 0x80
   26aa0:	02d2      	lsls	r2, r2, #11
   26aa2:	4132      	asrs	r2, r6
   26aa4:	4399      	bics	r1, r3
   26aa6:	430a      	orrs	r2, r1
   26aa8:	4643      	mov	r3, r8
   26aaa:	00de      	lsls	r6, r3, #3
   26aac:	4b39      	ldr	r3, [pc, #228]	; (26b94 <rint+0x13c>)
   26aae:	0011      	movs	r1, r2
   26ab0:	199e      	adds	r6, r3, r6
   26ab2:	6834      	ldr	r4, [r6, #0]
   26ab4:	6875      	ldr	r5, [r6, #4]
   26ab6:	0038      	movs	r0, r7
   26ab8:	0022      	movs	r2, r4
   26aba:	002b      	movs	r3, r5
   26abc:	f001 f84a 	bl	27b54 <__aeabi_dadd>
   26ac0:	9000      	str	r0, [sp, #0]
   26ac2:	9101      	str	r1, [sp, #4]
   26ac4:	9800      	ldr	r0, [sp, #0]
   26ac6:	9901      	ldr	r1, [sp, #4]
   26ac8:	0022      	movs	r2, r4
   26aca:	002b      	movs	r3, r5
   26acc:	f002 fa06 	bl	28edc <__aeabi_dsub>
   26ad0:	0004      	movs	r4, r0
   26ad2:	000d      	movs	r5, r1
   26ad4:	0020      	movs	r0, r4
   26ad6:	0029      	movs	r1, r5
   26ad8:	b002      	add	sp, #8
   26ada:	bc04      	pop	{r2}
   26adc:	4690      	mov	r8, r2
   26ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26ae0:	2e33      	cmp	r6, #51	; 0x33
   26ae2:	dd0c      	ble.n	26afe <rint+0xa6>
   26ae4:	2380      	movs	r3, #128	; 0x80
   26ae6:	0004      	movs	r4, r0
   26ae8:	00db      	lsls	r3, r3, #3
   26aea:	000d      	movs	r5, r1
   26aec:	429e      	cmp	r6, r3
   26aee:	d1f1      	bne.n	26ad4 <rint+0x7c>
   26af0:	0002      	movs	r2, r0
   26af2:	000b      	movs	r3, r1
   26af4:	f001 f82e 	bl	27b54 <__aeabi_dadd>
   26af8:	0004      	movs	r4, r0
   26afa:	000d      	movs	r5, r1
   26afc:	e7ea      	b.n	26ad4 <rint+0x7c>
   26afe:	4c26      	ldr	r4, [pc, #152]	; (26b98 <rint+0x140>)
   26b00:	000d      	movs	r5, r1
   26b02:	46a4      	mov	ip, r4
   26b04:	2401      	movs	r4, #1
   26b06:	4463      	add	r3, ip
   26b08:	4264      	negs	r4, r4
   26b0a:	40dc      	lsrs	r4, r3
   26b0c:	46a4      	mov	ip, r4
   26b0e:	4661      	mov	r1, ip
   26b10:	0004      	movs	r4, r0
   26b12:	4201      	tst	r1, r0
   26b14:	d0de      	beq.n	26ad4 <rint+0x7c>
   26b16:	0849      	lsrs	r1, r1, #1
   26b18:	4201      	tst	r1, r0
   26b1a:	d0c5      	beq.n	26aa8 <rint+0x50>
   26b1c:	2780      	movs	r7, #128	; 0x80
   26b1e:	05ff      	lsls	r7, r7, #23
   26b20:	411f      	asrs	r7, r3
   26b22:	4388      	bics	r0, r1
   26b24:	4307      	orrs	r7, r0
   26b26:	e7bf      	b.n	26aa8 <rint+0x50>
   26b28:	004b      	lsls	r3, r1, #1
   26b2a:	085b      	lsrs	r3, r3, #1
   26b2c:	4303      	orrs	r3, r0
   26b2e:	0004      	movs	r4, r0
   26b30:	000d      	movs	r5, r1
   26b32:	2b00      	cmp	r3, #0
   26b34:	d0ce      	beq.n	26ad4 <rint+0x7c>
   26b36:	030b      	lsls	r3, r1, #12
   26b38:	0b1b      	lsrs	r3, r3, #12
   26b3a:	4303      	orrs	r3, r0
   26b3c:	001a      	movs	r2, r3
   26b3e:	425b      	negs	r3, r3
   26b40:	4313      	orrs	r3, r2
   26b42:	2280      	movs	r2, #128	; 0x80
   26b44:	0b1b      	lsrs	r3, r3, #12
   26b46:	0312      	lsls	r2, r2, #12
   26b48:	4013      	ands	r3, r2
   26b4a:	0c4a      	lsrs	r2, r1, #17
   26b4c:	0452      	lsls	r2, r2, #17
   26b4e:	4313      	orrs	r3, r2
   26b50:	0019      	movs	r1, r3
   26b52:	4643      	mov	r3, r8
   26b54:	00da      	lsls	r2, r3, #3
   26b56:	4b0f      	ldr	r3, [pc, #60]	; (26b94 <rint+0x13c>)
   26b58:	189b      	adds	r3, r3, r2
   26b5a:	681c      	ldr	r4, [r3, #0]
   26b5c:	685d      	ldr	r5, [r3, #4]
   26b5e:	0022      	movs	r2, r4
   26b60:	002b      	movs	r3, r5
   26b62:	f000 fff7 	bl	27b54 <__aeabi_dadd>
   26b66:	9000      	str	r0, [sp, #0]
   26b68:	9101      	str	r1, [sp, #4]
   26b6a:	9800      	ldr	r0, [sp, #0]
   26b6c:	9901      	ldr	r1, [sp, #4]
   26b6e:	0022      	movs	r2, r4
   26b70:	002b      	movs	r3, r5
   26b72:	f002 f9b3 	bl	28edc <__aeabi_dsub>
   26b76:	4642      	mov	r2, r8
   26b78:	004b      	lsls	r3, r1, #1
   26b7a:	085b      	lsrs	r3, r3, #1
   26b7c:	07d6      	lsls	r6, r2, #31
   26b7e:	4333      	orrs	r3, r6
   26b80:	0004      	movs	r4, r0
   26b82:	001d      	movs	r5, r3
   26b84:	e7a6      	b.n	26ad4 <rint+0x7c>
   26b86:	2780      	movs	r7, #128	; 0x80
   26b88:	063f      	lsls	r7, r7, #24
   26b8a:	e788      	b.n	26a9e <rint+0x46>
   26b8c:	fffffc01 	.word	0xfffffc01
   26b90:	000fffff 	.word	0x000fffff
   26b94:	0002b840 	.word	0x0002b840
   26b98:	fffffbed 	.word	0xfffffbed

00026b9c <scalbn>:
   26b9c:	004b      	lsls	r3, r1, #1
   26b9e:	b570      	push	{r4, r5, r6, lr}
   26ba0:	0d5b      	lsrs	r3, r3, #21
   26ba2:	0014      	movs	r4, r2
   26ba4:	000a      	movs	r2, r1
   26ba6:	2b00      	cmp	r3, #0
   26ba8:	d11a      	bne.n	26be0 <scalbn+0x44>
   26baa:	004b      	lsls	r3, r1, #1
   26bac:	085b      	lsrs	r3, r3, #1
   26bae:	4303      	orrs	r3, r0
   26bb0:	d015      	beq.n	26bde <scalbn+0x42>
   26bb2:	2200      	movs	r2, #0
   26bb4:	4b22      	ldr	r3, [pc, #136]	; (26c40 <scalbn+0xa4>)
   26bb6:	f001 ff11 	bl	289dc <__aeabi_dmul>
   26bba:	4b22      	ldr	r3, [pc, #136]	; (26c44 <scalbn+0xa8>)
   26bbc:	000a      	movs	r2, r1
   26bbe:	429c      	cmp	r4, r3
   26bc0:	db22      	blt.n	26c08 <scalbn+0x6c>
   26bc2:	004b      	lsls	r3, r1, #1
   26bc4:	0d5b      	lsrs	r3, r3, #21
   26bc6:	3b36      	subs	r3, #54	; 0x36
   26bc8:	4d1f      	ldr	r5, [pc, #124]	; (26c48 <scalbn+0xac>)
   26bca:	18e3      	adds	r3, r4, r3
   26bcc:	42ab      	cmp	r3, r5
   26bce:	dc20      	bgt.n	26c12 <scalbn+0x76>
   26bd0:	2b00      	cmp	r3, #0
   26bd2:	dd0d      	ble.n	26bf0 <scalbn+0x54>
   26bd4:	4c1d      	ldr	r4, [pc, #116]	; (26c4c <scalbn+0xb0>)
   26bd6:	051b      	lsls	r3, r3, #20
   26bd8:	4022      	ands	r2, r4
   26bda:	431a      	orrs	r2, r3
   26bdc:	0011      	movs	r1, r2
   26bde:	bd70      	pop	{r4, r5, r6, pc}
   26be0:	4d1b      	ldr	r5, [pc, #108]	; (26c50 <scalbn+0xb4>)
   26be2:	42ab      	cmp	r3, r5
   26be4:	d1f0      	bne.n	26bc8 <scalbn+0x2c>
   26be6:	0002      	movs	r2, r0
   26be8:	000b      	movs	r3, r1
   26bea:	f000 ffb3 	bl	27b54 <__aeabi_dadd>
   26bee:	e7f6      	b.n	26bde <scalbn+0x42>
   26bf0:	001d      	movs	r5, r3
   26bf2:	3535      	adds	r5, #53	; 0x35
   26bf4:	da18      	bge.n	26c28 <scalbn+0x8c>
   26bf6:	4b17      	ldr	r3, [pc, #92]	; (26c54 <scalbn+0xb8>)
   26bf8:	0002      	movs	r2, r0
   26bfa:	429c      	cmp	r4, r3
   26bfc:	dc0a      	bgt.n	26c14 <scalbn+0x78>
   26bfe:	000b      	movs	r3, r1
   26c00:	4815      	ldr	r0, [pc, #84]	; (26c58 <scalbn+0xbc>)
   26c02:	4916      	ldr	r1, [pc, #88]	; (26c5c <scalbn+0xc0>)
   26c04:	f000 f832 	bl	26c6c <copysign>
   26c08:	4a13      	ldr	r2, [pc, #76]	; (26c58 <scalbn+0xbc>)
   26c0a:	4b14      	ldr	r3, [pc, #80]	; (26c5c <scalbn+0xc0>)
   26c0c:	f001 fee6 	bl	289dc <__aeabi_dmul>
   26c10:	e7e5      	b.n	26bde <scalbn+0x42>
   26c12:	0002      	movs	r2, r0
   26c14:	000b      	movs	r3, r1
   26c16:	4812      	ldr	r0, [pc, #72]	; (26c60 <scalbn+0xc4>)
   26c18:	4912      	ldr	r1, [pc, #72]	; (26c64 <scalbn+0xc8>)
   26c1a:	f000 f827 	bl	26c6c <copysign>
   26c1e:	4a10      	ldr	r2, [pc, #64]	; (26c60 <scalbn+0xc4>)
   26c20:	4b10      	ldr	r3, [pc, #64]	; (26c64 <scalbn+0xc8>)
   26c22:	f001 fedb 	bl	289dc <__aeabi_dmul>
   26c26:	e7da      	b.n	26bde <scalbn+0x42>
   26c28:	4c08      	ldr	r4, [pc, #32]	; (26c4c <scalbn+0xb0>)
   26c2a:	3336      	adds	r3, #54	; 0x36
   26c2c:	4022      	ands	r2, r4
   26c2e:	051b      	lsls	r3, r3, #20
   26c30:	4313      	orrs	r3, r2
   26c32:	0019      	movs	r1, r3
   26c34:	2200      	movs	r2, #0
   26c36:	4b0c      	ldr	r3, [pc, #48]	; (26c68 <scalbn+0xcc>)
   26c38:	f001 fed0 	bl	289dc <__aeabi_dmul>
   26c3c:	e7cf      	b.n	26bde <scalbn+0x42>
   26c3e:	46c0      	nop			; (mov r8, r8)
   26c40:	43500000 	.word	0x43500000
   26c44:	ffff3cb0 	.word	0xffff3cb0
   26c48:	000007fe 	.word	0x000007fe
   26c4c:	800fffff 	.word	0x800fffff
   26c50:	000007ff 	.word	0x000007ff
   26c54:	0000c350 	.word	0x0000c350
   26c58:	c2f8f359 	.word	0xc2f8f359
   26c5c:	01a56e1f 	.word	0x01a56e1f
   26c60:	8800759c 	.word	0x8800759c
   26c64:	7e37e43c 	.word	0x7e37e43c
   26c68:	3c900000 	.word	0x3c900000

00026c6c <copysign>:
   26c6c:	b530      	push	{r4, r5, lr}
   26c6e:	004a      	lsls	r2, r1, #1
   26c70:	0fdb      	lsrs	r3, r3, #31
   26c72:	07db      	lsls	r3, r3, #31
   26c74:	0852      	lsrs	r2, r2, #1
   26c76:	431a      	orrs	r2, r3
   26c78:	0011      	movs	r1, r2
   26c7a:	bd30      	pop	{r4, r5, pc}

00026c7c <__udivsi3>:
   26c7c:	2200      	movs	r2, #0
   26c7e:	0843      	lsrs	r3, r0, #1
   26c80:	428b      	cmp	r3, r1
   26c82:	d374      	bcc.n	26d6e <__udivsi3+0xf2>
   26c84:	0903      	lsrs	r3, r0, #4
   26c86:	428b      	cmp	r3, r1
   26c88:	d35f      	bcc.n	26d4a <__udivsi3+0xce>
   26c8a:	0a03      	lsrs	r3, r0, #8
   26c8c:	428b      	cmp	r3, r1
   26c8e:	d344      	bcc.n	26d1a <__udivsi3+0x9e>
   26c90:	0b03      	lsrs	r3, r0, #12
   26c92:	428b      	cmp	r3, r1
   26c94:	d328      	bcc.n	26ce8 <__udivsi3+0x6c>
   26c96:	0c03      	lsrs	r3, r0, #16
   26c98:	428b      	cmp	r3, r1
   26c9a:	d30d      	bcc.n	26cb8 <__udivsi3+0x3c>
   26c9c:	22ff      	movs	r2, #255	; 0xff
   26c9e:	0209      	lsls	r1, r1, #8
   26ca0:	ba12      	rev	r2, r2
   26ca2:	0c03      	lsrs	r3, r0, #16
   26ca4:	428b      	cmp	r3, r1
   26ca6:	d302      	bcc.n	26cae <__udivsi3+0x32>
   26ca8:	1212      	asrs	r2, r2, #8
   26caa:	0209      	lsls	r1, r1, #8
   26cac:	d065      	beq.n	26d7a <__udivsi3+0xfe>
   26cae:	0b03      	lsrs	r3, r0, #12
   26cb0:	428b      	cmp	r3, r1
   26cb2:	d319      	bcc.n	26ce8 <__udivsi3+0x6c>
   26cb4:	e000      	b.n	26cb8 <__udivsi3+0x3c>
   26cb6:	0a09      	lsrs	r1, r1, #8
   26cb8:	0bc3      	lsrs	r3, r0, #15
   26cba:	428b      	cmp	r3, r1
   26cbc:	d301      	bcc.n	26cc2 <__udivsi3+0x46>
   26cbe:	03cb      	lsls	r3, r1, #15
   26cc0:	1ac0      	subs	r0, r0, r3
   26cc2:	4152      	adcs	r2, r2
   26cc4:	0b83      	lsrs	r3, r0, #14
   26cc6:	428b      	cmp	r3, r1
   26cc8:	d301      	bcc.n	26cce <__udivsi3+0x52>
   26cca:	038b      	lsls	r3, r1, #14
   26ccc:	1ac0      	subs	r0, r0, r3
   26cce:	4152      	adcs	r2, r2
   26cd0:	0b43      	lsrs	r3, r0, #13
   26cd2:	428b      	cmp	r3, r1
   26cd4:	d301      	bcc.n	26cda <__udivsi3+0x5e>
   26cd6:	034b      	lsls	r3, r1, #13
   26cd8:	1ac0      	subs	r0, r0, r3
   26cda:	4152      	adcs	r2, r2
   26cdc:	0b03      	lsrs	r3, r0, #12
   26cde:	428b      	cmp	r3, r1
   26ce0:	d301      	bcc.n	26ce6 <__udivsi3+0x6a>
   26ce2:	030b      	lsls	r3, r1, #12
   26ce4:	1ac0      	subs	r0, r0, r3
   26ce6:	4152      	adcs	r2, r2
   26ce8:	0ac3      	lsrs	r3, r0, #11
   26cea:	428b      	cmp	r3, r1
   26cec:	d301      	bcc.n	26cf2 <__udivsi3+0x76>
   26cee:	02cb      	lsls	r3, r1, #11
   26cf0:	1ac0      	subs	r0, r0, r3
   26cf2:	4152      	adcs	r2, r2
   26cf4:	0a83      	lsrs	r3, r0, #10
   26cf6:	428b      	cmp	r3, r1
   26cf8:	d301      	bcc.n	26cfe <__udivsi3+0x82>
   26cfa:	028b      	lsls	r3, r1, #10
   26cfc:	1ac0      	subs	r0, r0, r3
   26cfe:	4152      	adcs	r2, r2
   26d00:	0a43      	lsrs	r3, r0, #9
   26d02:	428b      	cmp	r3, r1
   26d04:	d301      	bcc.n	26d0a <__udivsi3+0x8e>
   26d06:	024b      	lsls	r3, r1, #9
   26d08:	1ac0      	subs	r0, r0, r3
   26d0a:	4152      	adcs	r2, r2
   26d0c:	0a03      	lsrs	r3, r0, #8
   26d0e:	428b      	cmp	r3, r1
   26d10:	d301      	bcc.n	26d16 <__udivsi3+0x9a>
   26d12:	020b      	lsls	r3, r1, #8
   26d14:	1ac0      	subs	r0, r0, r3
   26d16:	4152      	adcs	r2, r2
   26d18:	d2cd      	bcs.n	26cb6 <__udivsi3+0x3a>
   26d1a:	09c3      	lsrs	r3, r0, #7
   26d1c:	428b      	cmp	r3, r1
   26d1e:	d301      	bcc.n	26d24 <__udivsi3+0xa8>
   26d20:	01cb      	lsls	r3, r1, #7
   26d22:	1ac0      	subs	r0, r0, r3
   26d24:	4152      	adcs	r2, r2
   26d26:	0983      	lsrs	r3, r0, #6
   26d28:	428b      	cmp	r3, r1
   26d2a:	d301      	bcc.n	26d30 <__udivsi3+0xb4>
   26d2c:	018b      	lsls	r3, r1, #6
   26d2e:	1ac0      	subs	r0, r0, r3
   26d30:	4152      	adcs	r2, r2
   26d32:	0943      	lsrs	r3, r0, #5
   26d34:	428b      	cmp	r3, r1
   26d36:	d301      	bcc.n	26d3c <__udivsi3+0xc0>
   26d38:	014b      	lsls	r3, r1, #5
   26d3a:	1ac0      	subs	r0, r0, r3
   26d3c:	4152      	adcs	r2, r2
   26d3e:	0903      	lsrs	r3, r0, #4
   26d40:	428b      	cmp	r3, r1
   26d42:	d301      	bcc.n	26d48 <__udivsi3+0xcc>
   26d44:	010b      	lsls	r3, r1, #4
   26d46:	1ac0      	subs	r0, r0, r3
   26d48:	4152      	adcs	r2, r2
   26d4a:	08c3      	lsrs	r3, r0, #3
   26d4c:	428b      	cmp	r3, r1
   26d4e:	d301      	bcc.n	26d54 <__udivsi3+0xd8>
   26d50:	00cb      	lsls	r3, r1, #3
   26d52:	1ac0      	subs	r0, r0, r3
   26d54:	4152      	adcs	r2, r2
   26d56:	0883      	lsrs	r3, r0, #2
   26d58:	428b      	cmp	r3, r1
   26d5a:	d301      	bcc.n	26d60 <__udivsi3+0xe4>
   26d5c:	008b      	lsls	r3, r1, #2
   26d5e:	1ac0      	subs	r0, r0, r3
   26d60:	4152      	adcs	r2, r2
   26d62:	0843      	lsrs	r3, r0, #1
   26d64:	428b      	cmp	r3, r1
   26d66:	d301      	bcc.n	26d6c <__udivsi3+0xf0>
   26d68:	004b      	lsls	r3, r1, #1
   26d6a:	1ac0      	subs	r0, r0, r3
   26d6c:	4152      	adcs	r2, r2
   26d6e:	1a41      	subs	r1, r0, r1
   26d70:	d200      	bcs.n	26d74 <__udivsi3+0xf8>
   26d72:	4601      	mov	r1, r0
   26d74:	4152      	adcs	r2, r2
   26d76:	4610      	mov	r0, r2
   26d78:	4770      	bx	lr
   26d7a:	e7ff      	b.n	26d7c <__udivsi3+0x100>
   26d7c:	b501      	push	{r0, lr}
   26d7e:	2000      	movs	r0, #0
   26d80:	f000 f8f0 	bl	26f64 <__aeabi_idiv0>
   26d84:	bd02      	pop	{r1, pc}
   26d86:	46c0      	nop			; (mov r8, r8)

00026d88 <__aeabi_uidivmod>:
   26d88:	2900      	cmp	r1, #0
   26d8a:	d0f7      	beq.n	26d7c <__udivsi3+0x100>
   26d8c:	e776      	b.n	26c7c <__udivsi3>
   26d8e:	4770      	bx	lr

00026d90 <__divsi3>:
   26d90:	4603      	mov	r3, r0
   26d92:	430b      	orrs	r3, r1
   26d94:	d47f      	bmi.n	26e96 <__divsi3+0x106>
   26d96:	2200      	movs	r2, #0
   26d98:	0843      	lsrs	r3, r0, #1
   26d9a:	428b      	cmp	r3, r1
   26d9c:	d374      	bcc.n	26e88 <__divsi3+0xf8>
   26d9e:	0903      	lsrs	r3, r0, #4
   26da0:	428b      	cmp	r3, r1
   26da2:	d35f      	bcc.n	26e64 <__divsi3+0xd4>
   26da4:	0a03      	lsrs	r3, r0, #8
   26da6:	428b      	cmp	r3, r1
   26da8:	d344      	bcc.n	26e34 <__divsi3+0xa4>
   26daa:	0b03      	lsrs	r3, r0, #12
   26dac:	428b      	cmp	r3, r1
   26dae:	d328      	bcc.n	26e02 <__divsi3+0x72>
   26db0:	0c03      	lsrs	r3, r0, #16
   26db2:	428b      	cmp	r3, r1
   26db4:	d30d      	bcc.n	26dd2 <__divsi3+0x42>
   26db6:	22ff      	movs	r2, #255	; 0xff
   26db8:	0209      	lsls	r1, r1, #8
   26dba:	ba12      	rev	r2, r2
   26dbc:	0c03      	lsrs	r3, r0, #16
   26dbe:	428b      	cmp	r3, r1
   26dc0:	d302      	bcc.n	26dc8 <__divsi3+0x38>
   26dc2:	1212      	asrs	r2, r2, #8
   26dc4:	0209      	lsls	r1, r1, #8
   26dc6:	d065      	beq.n	26e94 <__divsi3+0x104>
   26dc8:	0b03      	lsrs	r3, r0, #12
   26dca:	428b      	cmp	r3, r1
   26dcc:	d319      	bcc.n	26e02 <__divsi3+0x72>
   26dce:	e000      	b.n	26dd2 <__divsi3+0x42>
   26dd0:	0a09      	lsrs	r1, r1, #8
   26dd2:	0bc3      	lsrs	r3, r0, #15
   26dd4:	428b      	cmp	r3, r1
   26dd6:	d301      	bcc.n	26ddc <__divsi3+0x4c>
   26dd8:	03cb      	lsls	r3, r1, #15
   26dda:	1ac0      	subs	r0, r0, r3
   26ddc:	4152      	adcs	r2, r2
   26dde:	0b83      	lsrs	r3, r0, #14
   26de0:	428b      	cmp	r3, r1
   26de2:	d301      	bcc.n	26de8 <__divsi3+0x58>
   26de4:	038b      	lsls	r3, r1, #14
   26de6:	1ac0      	subs	r0, r0, r3
   26de8:	4152      	adcs	r2, r2
   26dea:	0b43      	lsrs	r3, r0, #13
   26dec:	428b      	cmp	r3, r1
   26dee:	d301      	bcc.n	26df4 <__divsi3+0x64>
   26df0:	034b      	lsls	r3, r1, #13
   26df2:	1ac0      	subs	r0, r0, r3
   26df4:	4152      	adcs	r2, r2
   26df6:	0b03      	lsrs	r3, r0, #12
   26df8:	428b      	cmp	r3, r1
   26dfa:	d301      	bcc.n	26e00 <__divsi3+0x70>
   26dfc:	030b      	lsls	r3, r1, #12
   26dfe:	1ac0      	subs	r0, r0, r3
   26e00:	4152      	adcs	r2, r2
   26e02:	0ac3      	lsrs	r3, r0, #11
   26e04:	428b      	cmp	r3, r1
   26e06:	d301      	bcc.n	26e0c <__divsi3+0x7c>
   26e08:	02cb      	lsls	r3, r1, #11
   26e0a:	1ac0      	subs	r0, r0, r3
   26e0c:	4152      	adcs	r2, r2
   26e0e:	0a83      	lsrs	r3, r0, #10
   26e10:	428b      	cmp	r3, r1
   26e12:	d301      	bcc.n	26e18 <__divsi3+0x88>
   26e14:	028b      	lsls	r3, r1, #10
   26e16:	1ac0      	subs	r0, r0, r3
   26e18:	4152      	adcs	r2, r2
   26e1a:	0a43      	lsrs	r3, r0, #9
   26e1c:	428b      	cmp	r3, r1
   26e1e:	d301      	bcc.n	26e24 <__divsi3+0x94>
   26e20:	024b      	lsls	r3, r1, #9
   26e22:	1ac0      	subs	r0, r0, r3
   26e24:	4152      	adcs	r2, r2
   26e26:	0a03      	lsrs	r3, r0, #8
   26e28:	428b      	cmp	r3, r1
   26e2a:	d301      	bcc.n	26e30 <__divsi3+0xa0>
   26e2c:	020b      	lsls	r3, r1, #8
   26e2e:	1ac0      	subs	r0, r0, r3
   26e30:	4152      	adcs	r2, r2
   26e32:	d2cd      	bcs.n	26dd0 <__divsi3+0x40>
   26e34:	09c3      	lsrs	r3, r0, #7
   26e36:	428b      	cmp	r3, r1
   26e38:	d301      	bcc.n	26e3e <__divsi3+0xae>
   26e3a:	01cb      	lsls	r3, r1, #7
   26e3c:	1ac0      	subs	r0, r0, r3
   26e3e:	4152      	adcs	r2, r2
   26e40:	0983      	lsrs	r3, r0, #6
   26e42:	428b      	cmp	r3, r1
   26e44:	d301      	bcc.n	26e4a <__divsi3+0xba>
   26e46:	018b      	lsls	r3, r1, #6
   26e48:	1ac0      	subs	r0, r0, r3
   26e4a:	4152      	adcs	r2, r2
   26e4c:	0943      	lsrs	r3, r0, #5
   26e4e:	428b      	cmp	r3, r1
   26e50:	d301      	bcc.n	26e56 <__divsi3+0xc6>
   26e52:	014b      	lsls	r3, r1, #5
   26e54:	1ac0      	subs	r0, r0, r3
   26e56:	4152      	adcs	r2, r2
   26e58:	0903      	lsrs	r3, r0, #4
   26e5a:	428b      	cmp	r3, r1
   26e5c:	d301      	bcc.n	26e62 <__divsi3+0xd2>
   26e5e:	010b      	lsls	r3, r1, #4
   26e60:	1ac0      	subs	r0, r0, r3
   26e62:	4152      	adcs	r2, r2
   26e64:	08c3      	lsrs	r3, r0, #3
   26e66:	428b      	cmp	r3, r1
   26e68:	d301      	bcc.n	26e6e <__divsi3+0xde>
   26e6a:	00cb      	lsls	r3, r1, #3
   26e6c:	1ac0      	subs	r0, r0, r3
   26e6e:	4152      	adcs	r2, r2
   26e70:	0883      	lsrs	r3, r0, #2
   26e72:	428b      	cmp	r3, r1
   26e74:	d301      	bcc.n	26e7a <__divsi3+0xea>
   26e76:	008b      	lsls	r3, r1, #2
   26e78:	1ac0      	subs	r0, r0, r3
   26e7a:	4152      	adcs	r2, r2
   26e7c:	0843      	lsrs	r3, r0, #1
   26e7e:	428b      	cmp	r3, r1
   26e80:	d301      	bcc.n	26e86 <__divsi3+0xf6>
   26e82:	004b      	lsls	r3, r1, #1
   26e84:	1ac0      	subs	r0, r0, r3
   26e86:	4152      	adcs	r2, r2
   26e88:	1a41      	subs	r1, r0, r1
   26e8a:	d200      	bcs.n	26e8e <__divsi3+0xfe>
   26e8c:	4601      	mov	r1, r0
   26e8e:	4152      	adcs	r2, r2
   26e90:	4610      	mov	r0, r2
   26e92:	4770      	bx	lr
   26e94:	e05d      	b.n	26f52 <__divsi3+0x1c2>
   26e96:	0fca      	lsrs	r2, r1, #31
   26e98:	d000      	beq.n	26e9c <__divsi3+0x10c>
   26e9a:	4249      	negs	r1, r1
   26e9c:	1003      	asrs	r3, r0, #32
   26e9e:	d300      	bcc.n	26ea2 <__divsi3+0x112>
   26ea0:	4240      	negs	r0, r0
   26ea2:	4053      	eors	r3, r2
   26ea4:	2200      	movs	r2, #0
   26ea6:	469c      	mov	ip, r3
   26ea8:	0903      	lsrs	r3, r0, #4
   26eaa:	428b      	cmp	r3, r1
   26eac:	d32d      	bcc.n	26f0a <__divsi3+0x17a>
   26eae:	0a03      	lsrs	r3, r0, #8
   26eb0:	428b      	cmp	r3, r1
   26eb2:	d312      	bcc.n	26eda <__divsi3+0x14a>
   26eb4:	22fc      	movs	r2, #252	; 0xfc
   26eb6:	0189      	lsls	r1, r1, #6
   26eb8:	ba12      	rev	r2, r2
   26eba:	0a03      	lsrs	r3, r0, #8
   26ebc:	428b      	cmp	r3, r1
   26ebe:	d30c      	bcc.n	26eda <__divsi3+0x14a>
   26ec0:	0189      	lsls	r1, r1, #6
   26ec2:	1192      	asrs	r2, r2, #6
   26ec4:	428b      	cmp	r3, r1
   26ec6:	d308      	bcc.n	26eda <__divsi3+0x14a>
   26ec8:	0189      	lsls	r1, r1, #6
   26eca:	1192      	asrs	r2, r2, #6
   26ecc:	428b      	cmp	r3, r1
   26ece:	d304      	bcc.n	26eda <__divsi3+0x14a>
   26ed0:	0189      	lsls	r1, r1, #6
   26ed2:	d03a      	beq.n	26f4a <__divsi3+0x1ba>
   26ed4:	1192      	asrs	r2, r2, #6
   26ed6:	e000      	b.n	26eda <__divsi3+0x14a>
   26ed8:	0989      	lsrs	r1, r1, #6
   26eda:	09c3      	lsrs	r3, r0, #7
   26edc:	428b      	cmp	r3, r1
   26ede:	d301      	bcc.n	26ee4 <__divsi3+0x154>
   26ee0:	01cb      	lsls	r3, r1, #7
   26ee2:	1ac0      	subs	r0, r0, r3
   26ee4:	4152      	adcs	r2, r2
   26ee6:	0983      	lsrs	r3, r0, #6
   26ee8:	428b      	cmp	r3, r1
   26eea:	d301      	bcc.n	26ef0 <__divsi3+0x160>
   26eec:	018b      	lsls	r3, r1, #6
   26eee:	1ac0      	subs	r0, r0, r3
   26ef0:	4152      	adcs	r2, r2
   26ef2:	0943      	lsrs	r3, r0, #5
   26ef4:	428b      	cmp	r3, r1
   26ef6:	d301      	bcc.n	26efc <__divsi3+0x16c>
   26ef8:	014b      	lsls	r3, r1, #5
   26efa:	1ac0      	subs	r0, r0, r3
   26efc:	4152      	adcs	r2, r2
   26efe:	0903      	lsrs	r3, r0, #4
   26f00:	428b      	cmp	r3, r1
   26f02:	d301      	bcc.n	26f08 <__divsi3+0x178>
   26f04:	010b      	lsls	r3, r1, #4
   26f06:	1ac0      	subs	r0, r0, r3
   26f08:	4152      	adcs	r2, r2
   26f0a:	08c3      	lsrs	r3, r0, #3
   26f0c:	428b      	cmp	r3, r1
   26f0e:	d301      	bcc.n	26f14 <__divsi3+0x184>
   26f10:	00cb      	lsls	r3, r1, #3
   26f12:	1ac0      	subs	r0, r0, r3
   26f14:	4152      	adcs	r2, r2
   26f16:	0883      	lsrs	r3, r0, #2
   26f18:	428b      	cmp	r3, r1
   26f1a:	d301      	bcc.n	26f20 <__divsi3+0x190>
   26f1c:	008b      	lsls	r3, r1, #2
   26f1e:	1ac0      	subs	r0, r0, r3
   26f20:	4152      	adcs	r2, r2
   26f22:	d2d9      	bcs.n	26ed8 <__divsi3+0x148>
   26f24:	0843      	lsrs	r3, r0, #1
   26f26:	428b      	cmp	r3, r1
   26f28:	d301      	bcc.n	26f2e <__divsi3+0x19e>
   26f2a:	004b      	lsls	r3, r1, #1
   26f2c:	1ac0      	subs	r0, r0, r3
   26f2e:	4152      	adcs	r2, r2
   26f30:	1a41      	subs	r1, r0, r1
   26f32:	d200      	bcs.n	26f36 <__divsi3+0x1a6>
   26f34:	4601      	mov	r1, r0
   26f36:	4663      	mov	r3, ip
   26f38:	4152      	adcs	r2, r2
   26f3a:	105b      	asrs	r3, r3, #1
   26f3c:	4610      	mov	r0, r2
   26f3e:	d301      	bcc.n	26f44 <__divsi3+0x1b4>
   26f40:	4240      	negs	r0, r0
   26f42:	2b00      	cmp	r3, #0
   26f44:	d500      	bpl.n	26f48 <__divsi3+0x1b8>
   26f46:	4249      	negs	r1, r1
   26f48:	4770      	bx	lr
   26f4a:	4663      	mov	r3, ip
   26f4c:	105b      	asrs	r3, r3, #1
   26f4e:	d300      	bcc.n	26f52 <__divsi3+0x1c2>
   26f50:	4240      	negs	r0, r0
   26f52:	b501      	push	{r0, lr}
   26f54:	2000      	movs	r0, #0
   26f56:	f000 f805 	bl	26f64 <__aeabi_idiv0>
   26f5a:	bd02      	pop	{r1, pc}

00026f5c <__aeabi_idivmod>:
   26f5c:	2900      	cmp	r1, #0
   26f5e:	d0f8      	beq.n	26f52 <__divsi3+0x1c2>
   26f60:	e716      	b.n	26d90 <__divsi3>
   26f62:	4770      	bx	lr

00026f64 <__aeabi_idiv0>:
   26f64:	4770      	bx	lr
   26f66:	46c0      	nop			; (mov r8, r8)

00026f68 <__aeabi_cdrcmple>:
   26f68:	4684      	mov	ip, r0
   26f6a:	1c10      	adds	r0, r2, #0
   26f6c:	4662      	mov	r2, ip
   26f6e:	468c      	mov	ip, r1
   26f70:	1c19      	adds	r1, r3, #0
   26f72:	4663      	mov	r3, ip
   26f74:	e000      	b.n	26f78 <__aeabi_cdcmpeq>
   26f76:	46c0      	nop			; (mov r8, r8)

00026f78 <__aeabi_cdcmpeq>:
   26f78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   26f7a:	f001 fccd 	bl	28918 <__ledf2>
   26f7e:	2800      	cmp	r0, #0
   26f80:	d401      	bmi.n	26f86 <__aeabi_cdcmpeq+0xe>
   26f82:	2100      	movs	r1, #0
   26f84:	42c8      	cmn	r0, r1
   26f86:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00026f88 <__aeabi_dcmpeq>:
   26f88:	b510      	push	{r4, lr}
   26f8a:	f001 fc27 	bl	287dc <__eqdf2>
   26f8e:	4240      	negs	r0, r0
   26f90:	3001      	adds	r0, #1
   26f92:	bd10      	pop	{r4, pc}

00026f94 <__aeabi_dcmplt>:
   26f94:	b510      	push	{r4, lr}
   26f96:	f001 fcbf 	bl	28918 <__ledf2>
   26f9a:	2800      	cmp	r0, #0
   26f9c:	db01      	blt.n	26fa2 <__aeabi_dcmplt+0xe>
   26f9e:	2000      	movs	r0, #0
   26fa0:	bd10      	pop	{r4, pc}
   26fa2:	2001      	movs	r0, #1
   26fa4:	bd10      	pop	{r4, pc}
   26fa6:	46c0      	nop			; (mov r8, r8)

00026fa8 <__aeabi_dcmple>:
   26fa8:	b510      	push	{r4, lr}
   26faa:	f001 fcb5 	bl	28918 <__ledf2>
   26fae:	2800      	cmp	r0, #0
   26fb0:	dd01      	ble.n	26fb6 <__aeabi_dcmple+0xe>
   26fb2:	2000      	movs	r0, #0
   26fb4:	bd10      	pop	{r4, pc}
   26fb6:	2001      	movs	r0, #1
   26fb8:	bd10      	pop	{r4, pc}
   26fba:	46c0      	nop			; (mov r8, r8)

00026fbc <__aeabi_dcmpgt>:
   26fbc:	b510      	push	{r4, lr}
   26fbe:	f001 fc47 	bl	28850 <__gedf2>
   26fc2:	2800      	cmp	r0, #0
   26fc4:	dc01      	bgt.n	26fca <__aeabi_dcmpgt+0xe>
   26fc6:	2000      	movs	r0, #0
   26fc8:	bd10      	pop	{r4, pc}
   26fca:	2001      	movs	r0, #1
   26fcc:	bd10      	pop	{r4, pc}
   26fce:	46c0      	nop			; (mov r8, r8)

00026fd0 <__aeabi_dcmpge>:
   26fd0:	b510      	push	{r4, lr}
   26fd2:	f001 fc3d 	bl	28850 <__gedf2>
   26fd6:	2800      	cmp	r0, #0
   26fd8:	da01      	bge.n	26fde <__aeabi_dcmpge+0xe>
   26fda:	2000      	movs	r0, #0
   26fdc:	bd10      	pop	{r4, pc}
   26fde:	2001      	movs	r0, #1
   26fe0:	bd10      	pop	{r4, pc}
   26fe2:	46c0      	nop			; (mov r8, r8)

00026fe4 <__aeabi_uldivmod>:
   26fe4:	2b00      	cmp	r3, #0
   26fe6:	d111      	bne.n	2700c <__aeabi_uldivmod+0x28>
   26fe8:	2a00      	cmp	r2, #0
   26fea:	d10f      	bne.n	2700c <__aeabi_uldivmod+0x28>
   26fec:	2900      	cmp	r1, #0
   26fee:	d100      	bne.n	26ff2 <__aeabi_uldivmod+0xe>
   26ff0:	2800      	cmp	r0, #0
   26ff2:	d002      	beq.n	26ffa <__aeabi_uldivmod+0x16>
   26ff4:	2100      	movs	r1, #0
   26ff6:	43c9      	mvns	r1, r1
   26ff8:	1c08      	adds	r0, r1, #0
   26ffa:	b407      	push	{r0, r1, r2}
   26ffc:	4802      	ldr	r0, [pc, #8]	; (27008 <__aeabi_uldivmod+0x24>)
   26ffe:	a102      	add	r1, pc, #8	; (adr r1, 27008 <__aeabi_uldivmod+0x24>)
   27000:	1840      	adds	r0, r0, r1
   27002:	9002      	str	r0, [sp, #8]
   27004:	bd03      	pop	{r0, r1, pc}
   27006:	46c0      	nop			; (mov r8, r8)
   27008:	ffffff5d 	.word	0xffffff5d
   2700c:	b403      	push	{r0, r1}
   2700e:	4668      	mov	r0, sp
   27010:	b501      	push	{r0, lr}
   27012:	9802      	ldr	r0, [sp, #8]
   27014:	f000 f84e 	bl	270b4 <__udivmoddi4>
   27018:	9b01      	ldr	r3, [sp, #4]
   2701a:	469e      	mov	lr, r3
   2701c:	b002      	add	sp, #8
   2701e:	bc0c      	pop	{r2, r3}
   27020:	4770      	bx	lr
   27022:	46c0      	nop			; (mov r8, r8)

00027024 <__aeabi_lmul>:
   27024:	b5f0      	push	{r4, r5, r6, r7, lr}
   27026:	46ce      	mov	lr, r9
   27028:	4647      	mov	r7, r8
   2702a:	0415      	lsls	r5, r2, #16
   2702c:	0c2d      	lsrs	r5, r5, #16
   2702e:	002e      	movs	r6, r5
   27030:	b580      	push	{r7, lr}
   27032:	0407      	lsls	r7, r0, #16
   27034:	0c14      	lsrs	r4, r2, #16
   27036:	0c3f      	lsrs	r7, r7, #16
   27038:	4699      	mov	r9, r3
   2703a:	0c03      	lsrs	r3, r0, #16
   2703c:	437e      	muls	r6, r7
   2703e:	435d      	muls	r5, r3
   27040:	4367      	muls	r7, r4
   27042:	4363      	muls	r3, r4
   27044:	197f      	adds	r7, r7, r5
   27046:	0c34      	lsrs	r4, r6, #16
   27048:	19e4      	adds	r4, r4, r7
   2704a:	469c      	mov	ip, r3
   2704c:	42a5      	cmp	r5, r4
   2704e:	d903      	bls.n	27058 <__aeabi_lmul+0x34>
   27050:	2380      	movs	r3, #128	; 0x80
   27052:	025b      	lsls	r3, r3, #9
   27054:	4698      	mov	r8, r3
   27056:	44c4      	add	ip, r8
   27058:	464b      	mov	r3, r9
   2705a:	4351      	muls	r1, r2
   2705c:	4343      	muls	r3, r0
   2705e:	0436      	lsls	r6, r6, #16
   27060:	0c36      	lsrs	r6, r6, #16
   27062:	0c25      	lsrs	r5, r4, #16
   27064:	0424      	lsls	r4, r4, #16
   27066:	4465      	add	r5, ip
   27068:	19a4      	adds	r4, r4, r6
   2706a:	1859      	adds	r1, r3, r1
   2706c:	1949      	adds	r1, r1, r5
   2706e:	0020      	movs	r0, r4
   27070:	bc0c      	pop	{r2, r3}
   27072:	4690      	mov	r8, r2
   27074:	4699      	mov	r9, r3
   27076:	bdf0      	pop	{r4, r5, r6, r7, pc}

00027078 <__aeabi_d2uiz>:
   27078:	b570      	push	{r4, r5, r6, lr}
   2707a:	2200      	movs	r2, #0
   2707c:	4b0c      	ldr	r3, [pc, #48]	; (270b0 <__aeabi_d2uiz+0x38>)
   2707e:	0004      	movs	r4, r0
   27080:	000d      	movs	r5, r1
   27082:	f7ff ffa5 	bl	26fd0 <__aeabi_dcmpge>
   27086:	2800      	cmp	r0, #0
   27088:	d104      	bne.n	27094 <__aeabi_d2uiz+0x1c>
   2708a:	0020      	movs	r0, r4
   2708c:	0029      	movs	r1, r5
   2708e:	f002 fa5b 	bl	29548 <__aeabi_d2iz>
   27092:	bd70      	pop	{r4, r5, r6, pc}
   27094:	4b06      	ldr	r3, [pc, #24]	; (270b0 <__aeabi_d2uiz+0x38>)
   27096:	2200      	movs	r2, #0
   27098:	0020      	movs	r0, r4
   2709a:	0029      	movs	r1, r5
   2709c:	f001 ff1e 	bl	28edc <__aeabi_dsub>
   270a0:	f002 fa52 	bl	29548 <__aeabi_d2iz>
   270a4:	2380      	movs	r3, #128	; 0x80
   270a6:	061b      	lsls	r3, r3, #24
   270a8:	469c      	mov	ip, r3
   270aa:	4460      	add	r0, ip
   270ac:	e7f1      	b.n	27092 <__aeabi_d2uiz+0x1a>
   270ae:	46c0      	nop			; (mov r8, r8)
   270b0:	41e00000 	.word	0x41e00000

000270b4 <__udivmoddi4>:
   270b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   270b6:	4657      	mov	r7, sl
   270b8:	464e      	mov	r6, r9
   270ba:	4645      	mov	r5, r8
   270bc:	46de      	mov	lr, fp
   270be:	b5e0      	push	{r5, r6, r7, lr}
   270c0:	0004      	movs	r4, r0
   270c2:	b083      	sub	sp, #12
   270c4:	000d      	movs	r5, r1
   270c6:	4692      	mov	sl, r2
   270c8:	4699      	mov	r9, r3
   270ca:	428b      	cmp	r3, r1
   270cc:	d82f      	bhi.n	2712e <__udivmoddi4+0x7a>
   270ce:	d02c      	beq.n	2712a <__udivmoddi4+0x76>
   270d0:	4649      	mov	r1, r9
   270d2:	4650      	mov	r0, sl
   270d4:	f002 fb56 	bl	29784 <__clzdi2>
   270d8:	0029      	movs	r1, r5
   270da:	0006      	movs	r6, r0
   270dc:	0020      	movs	r0, r4
   270de:	f002 fb51 	bl	29784 <__clzdi2>
   270e2:	1a33      	subs	r3, r6, r0
   270e4:	4698      	mov	r8, r3
   270e6:	3b20      	subs	r3, #32
   270e8:	469b      	mov	fp, r3
   270ea:	d500      	bpl.n	270ee <__udivmoddi4+0x3a>
   270ec:	e074      	b.n	271d8 <__udivmoddi4+0x124>
   270ee:	4653      	mov	r3, sl
   270f0:	465a      	mov	r2, fp
   270f2:	4093      	lsls	r3, r2
   270f4:	001f      	movs	r7, r3
   270f6:	4653      	mov	r3, sl
   270f8:	4642      	mov	r2, r8
   270fa:	4093      	lsls	r3, r2
   270fc:	001e      	movs	r6, r3
   270fe:	42af      	cmp	r7, r5
   27100:	d829      	bhi.n	27156 <__udivmoddi4+0xa2>
   27102:	d026      	beq.n	27152 <__udivmoddi4+0x9e>
   27104:	465b      	mov	r3, fp
   27106:	1ba4      	subs	r4, r4, r6
   27108:	41bd      	sbcs	r5, r7
   2710a:	2b00      	cmp	r3, #0
   2710c:	da00      	bge.n	27110 <__udivmoddi4+0x5c>
   2710e:	e079      	b.n	27204 <__udivmoddi4+0x150>
   27110:	2200      	movs	r2, #0
   27112:	2300      	movs	r3, #0
   27114:	9200      	str	r2, [sp, #0]
   27116:	9301      	str	r3, [sp, #4]
   27118:	2301      	movs	r3, #1
   2711a:	465a      	mov	r2, fp
   2711c:	4093      	lsls	r3, r2
   2711e:	9301      	str	r3, [sp, #4]
   27120:	2301      	movs	r3, #1
   27122:	4642      	mov	r2, r8
   27124:	4093      	lsls	r3, r2
   27126:	9300      	str	r3, [sp, #0]
   27128:	e019      	b.n	2715e <__udivmoddi4+0xaa>
   2712a:	4282      	cmp	r2, r0
   2712c:	d9d0      	bls.n	270d0 <__udivmoddi4+0x1c>
   2712e:	2200      	movs	r2, #0
   27130:	2300      	movs	r3, #0
   27132:	9200      	str	r2, [sp, #0]
   27134:	9301      	str	r3, [sp, #4]
   27136:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   27138:	2b00      	cmp	r3, #0
   2713a:	d001      	beq.n	27140 <__udivmoddi4+0x8c>
   2713c:	601c      	str	r4, [r3, #0]
   2713e:	605d      	str	r5, [r3, #4]
   27140:	9800      	ldr	r0, [sp, #0]
   27142:	9901      	ldr	r1, [sp, #4]
   27144:	b003      	add	sp, #12
   27146:	bc3c      	pop	{r2, r3, r4, r5}
   27148:	4690      	mov	r8, r2
   2714a:	4699      	mov	r9, r3
   2714c:	46a2      	mov	sl, r4
   2714e:	46ab      	mov	fp, r5
   27150:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27152:	42a3      	cmp	r3, r4
   27154:	d9d6      	bls.n	27104 <__udivmoddi4+0x50>
   27156:	2200      	movs	r2, #0
   27158:	2300      	movs	r3, #0
   2715a:	9200      	str	r2, [sp, #0]
   2715c:	9301      	str	r3, [sp, #4]
   2715e:	4643      	mov	r3, r8
   27160:	2b00      	cmp	r3, #0
   27162:	d0e8      	beq.n	27136 <__udivmoddi4+0x82>
   27164:	07fb      	lsls	r3, r7, #31
   27166:	0872      	lsrs	r2, r6, #1
   27168:	431a      	orrs	r2, r3
   2716a:	4646      	mov	r6, r8
   2716c:	087b      	lsrs	r3, r7, #1
   2716e:	e00e      	b.n	2718e <__udivmoddi4+0xda>
   27170:	42ab      	cmp	r3, r5
   27172:	d101      	bne.n	27178 <__udivmoddi4+0xc4>
   27174:	42a2      	cmp	r2, r4
   27176:	d80c      	bhi.n	27192 <__udivmoddi4+0xde>
   27178:	1aa4      	subs	r4, r4, r2
   2717a:	419d      	sbcs	r5, r3
   2717c:	2001      	movs	r0, #1
   2717e:	1924      	adds	r4, r4, r4
   27180:	416d      	adcs	r5, r5
   27182:	2100      	movs	r1, #0
   27184:	3e01      	subs	r6, #1
   27186:	1824      	adds	r4, r4, r0
   27188:	414d      	adcs	r5, r1
   2718a:	2e00      	cmp	r6, #0
   2718c:	d006      	beq.n	2719c <__udivmoddi4+0xe8>
   2718e:	42ab      	cmp	r3, r5
   27190:	d9ee      	bls.n	27170 <__udivmoddi4+0xbc>
   27192:	3e01      	subs	r6, #1
   27194:	1924      	adds	r4, r4, r4
   27196:	416d      	adcs	r5, r5
   27198:	2e00      	cmp	r6, #0
   2719a:	d1f8      	bne.n	2718e <__udivmoddi4+0xda>
   2719c:	465b      	mov	r3, fp
   2719e:	9800      	ldr	r0, [sp, #0]
   271a0:	9901      	ldr	r1, [sp, #4]
   271a2:	1900      	adds	r0, r0, r4
   271a4:	4169      	adcs	r1, r5
   271a6:	2b00      	cmp	r3, #0
   271a8:	db22      	blt.n	271f0 <__udivmoddi4+0x13c>
   271aa:	002b      	movs	r3, r5
   271ac:	465a      	mov	r2, fp
   271ae:	40d3      	lsrs	r3, r2
   271b0:	002a      	movs	r2, r5
   271b2:	4644      	mov	r4, r8
   271b4:	40e2      	lsrs	r2, r4
   271b6:	001c      	movs	r4, r3
   271b8:	465b      	mov	r3, fp
   271ba:	0015      	movs	r5, r2
   271bc:	2b00      	cmp	r3, #0
   271be:	db2c      	blt.n	2721a <__udivmoddi4+0x166>
   271c0:	0026      	movs	r6, r4
   271c2:	409e      	lsls	r6, r3
   271c4:	0033      	movs	r3, r6
   271c6:	0026      	movs	r6, r4
   271c8:	4647      	mov	r7, r8
   271ca:	40be      	lsls	r6, r7
   271cc:	0032      	movs	r2, r6
   271ce:	1a80      	subs	r0, r0, r2
   271d0:	4199      	sbcs	r1, r3
   271d2:	9000      	str	r0, [sp, #0]
   271d4:	9101      	str	r1, [sp, #4]
   271d6:	e7ae      	b.n	27136 <__udivmoddi4+0x82>
   271d8:	4642      	mov	r2, r8
   271da:	2320      	movs	r3, #32
   271dc:	1a9b      	subs	r3, r3, r2
   271de:	4652      	mov	r2, sl
   271e0:	40da      	lsrs	r2, r3
   271e2:	4641      	mov	r1, r8
   271e4:	0013      	movs	r3, r2
   271e6:	464a      	mov	r2, r9
   271e8:	408a      	lsls	r2, r1
   271ea:	0017      	movs	r7, r2
   271ec:	431f      	orrs	r7, r3
   271ee:	e782      	b.n	270f6 <__udivmoddi4+0x42>
   271f0:	4642      	mov	r2, r8
   271f2:	2320      	movs	r3, #32
   271f4:	1a9b      	subs	r3, r3, r2
   271f6:	002a      	movs	r2, r5
   271f8:	4646      	mov	r6, r8
   271fa:	409a      	lsls	r2, r3
   271fc:	0023      	movs	r3, r4
   271fe:	40f3      	lsrs	r3, r6
   27200:	4313      	orrs	r3, r2
   27202:	e7d5      	b.n	271b0 <__udivmoddi4+0xfc>
   27204:	4642      	mov	r2, r8
   27206:	2320      	movs	r3, #32
   27208:	2100      	movs	r1, #0
   2720a:	1a9b      	subs	r3, r3, r2
   2720c:	2200      	movs	r2, #0
   2720e:	9100      	str	r1, [sp, #0]
   27210:	9201      	str	r2, [sp, #4]
   27212:	2201      	movs	r2, #1
   27214:	40da      	lsrs	r2, r3
   27216:	9201      	str	r2, [sp, #4]
   27218:	e782      	b.n	27120 <__udivmoddi4+0x6c>
   2721a:	4642      	mov	r2, r8
   2721c:	2320      	movs	r3, #32
   2721e:	0026      	movs	r6, r4
   27220:	1a9b      	subs	r3, r3, r2
   27222:	40de      	lsrs	r6, r3
   27224:	002f      	movs	r7, r5
   27226:	46b4      	mov	ip, r6
   27228:	4097      	lsls	r7, r2
   2722a:	4666      	mov	r6, ip
   2722c:	003b      	movs	r3, r7
   2722e:	4333      	orrs	r3, r6
   27230:	e7c9      	b.n	271c6 <__udivmoddi4+0x112>
   27232:	46c0      	nop			; (mov r8, r8)

00027234 <__aeabi_fadd>:
   27234:	b5f0      	push	{r4, r5, r6, r7, lr}
   27236:	46c6      	mov	lr, r8
   27238:	024e      	lsls	r6, r1, #9
   2723a:	0247      	lsls	r7, r0, #9
   2723c:	0a76      	lsrs	r6, r6, #9
   2723e:	0a7b      	lsrs	r3, r7, #9
   27240:	0044      	lsls	r4, r0, #1
   27242:	0fc5      	lsrs	r5, r0, #31
   27244:	00f7      	lsls	r7, r6, #3
   27246:	0048      	lsls	r0, r1, #1
   27248:	4698      	mov	r8, r3
   2724a:	b500      	push	{lr}
   2724c:	0e24      	lsrs	r4, r4, #24
   2724e:	002a      	movs	r2, r5
   27250:	00db      	lsls	r3, r3, #3
   27252:	0e00      	lsrs	r0, r0, #24
   27254:	0fc9      	lsrs	r1, r1, #31
   27256:	46bc      	mov	ip, r7
   27258:	428d      	cmp	r5, r1
   2725a:	d067      	beq.n	2732c <__aeabi_fadd+0xf8>
   2725c:	1a22      	subs	r2, r4, r0
   2725e:	2a00      	cmp	r2, #0
   27260:	dc00      	bgt.n	27264 <__aeabi_fadd+0x30>
   27262:	e0a5      	b.n	273b0 <__aeabi_fadd+0x17c>
   27264:	2800      	cmp	r0, #0
   27266:	d13a      	bne.n	272de <__aeabi_fadd+0xaa>
   27268:	2f00      	cmp	r7, #0
   2726a:	d100      	bne.n	2726e <__aeabi_fadd+0x3a>
   2726c:	e093      	b.n	27396 <__aeabi_fadd+0x162>
   2726e:	1e51      	subs	r1, r2, #1
   27270:	2900      	cmp	r1, #0
   27272:	d000      	beq.n	27276 <__aeabi_fadd+0x42>
   27274:	e0bc      	b.n	273f0 <__aeabi_fadd+0x1bc>
   27276:	2401      	movs	r4, #1
   27278:	1bdb      	subs	r3, r3, r7
   2727a:	015a      	lsls	r2, r3, #5
   2727c:	d546      	bpl.n	2730c <__aeabi_fadd+0xd8>
   2727e:	019b      	lsls	r3, r3, #6
   27280:	099e      	lsrs	r6, r3, #6
   27282:	0030      	movs	r0, r6
   27284:	f002 fa60 	bl	29748 <__clzsi2>
   27288:	3805      	subs	r0, #5
   2728a:	4086      	lsls	r6, r0
   2728c:	4284      	cmp	r4, r0
   2728e:	dd00      	ble.n	27292 <__aeabi_fadd+0x5e>
   27290:	e09d      	b.n	273ce <__aeabi_fadd+0x19a>
   27292:	1b04      	subs	r4, r0, r4
   27294:	0032      	movs	r2, r6
   27296:	2020      	movs	r0, #32
   27298:	3401      	adds	r4, #1
   2729a:	40e2      	lsrs	r2, r4
   2729c:	1b04      	subs	r4, r0, r4
   2729e:	40a6      	lsls	r6, r4
   272a0:	0033      	movs	r3, r6
   272a2:	1e5e      	subs	r6, r3, #1
   272a4:	41b3      	sbcs	r3, r6
   272a6:	2400      	movs	r4, #0
   272a8:	4313      	orrs	r3, r2
   272aa:	075a      	lsls	r2, r3, #29
   272ac:	d004      	beq.n	272b8 <__aeabi_fadd+0x84>
   272ae:	220f      	movs	r2, #15
   272b0:	401a      	ands	r2, r3
   272b2:	2a04      	cmp	r2, #4
   272b4:	d000      	beq.n	272b8 <__aeabi_fadd+0x84>
   272b6:	3304      	adds	r3, #4
   272b8:	015a      	lsls	r2, r3, #5
   272ba:	d529      	bpl.n	27310 <__aeabi_fadd+0xdc>
   272bc:	3401      	adds	r4, #1
   272be:	2cff      	cmp	r4, #255	; 0xff
   272c0:	d100      	bne.n	272c4 <__aeabi_fadd+0x90>
   272c2:	e081      	b.n	273c8 <__aeabi_fadd+0x194>
   272c4:	002a      	movs	r2, r5
   272c6:	019b      	lsls	r3, r3, #6
   272c8:	0a5b      	lsrs	r3, r3, #9
   272ca:	b2e4      	uxtb	r4, r4
   272cc:	025b      	lsls	r3, r3, #9
   272ce:	05e4      	lsls	r4, r4, #23
   272d0:	0a58      	lsrs	r0, r3, #9
   272d2:	07d2      	lsls	r2, r2, #31
   272d4:	4320      	orrs	r0, r4
   272d6:	4310      	orrs	r0, r2
   272d8:	bc04      	pop	{r2}
   272da:	4690      	mov	r8, r2
   272dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   272de:	2cff      	cmp	r4, #255	; 0xff
   272e0:	d0e3      	beq.n	272aa <__aeabi_fadd+0x76>
   272e2:	2180      	movs	r1, #128	; 0x80
   272e4:	0038      	movs	r0, r7
   272e6:	04c9      	lsls	r1, r1, #19
   272e8:	4308      	orrs	r0, r1
   272ea:	4684      	mov	ip, r0
   272ec:	2a1b      	cmp	r2, #27
   272ee:	dd00      	ble.n	272f2 <__aeabi_fadd+0xbe>
   272f0:	e082      	b.n	273f8 <__aeabi_fadd+0x1c4>
   272f2:	2020      	movs	r0, #32
   272f4:	4661      	mov	r1, ip
   272f6:	40d1      	lsrs	r1, r2
   272f8:	1a82      	subs	r2, r0, r2
   272fa:	4660      	mov	r0, ip
   272fc:	4090      	lsls	r0, r2
   272fe:	0002      	movs	r2, r0
   27300:	1e50      	subs	r0, r2, #1
   27302:	4182      	sbcs	r2, r0
   27304:	430a      	orrs	r2, r1
   27306:	1a9b      	subs	r3, r3, r2
   27308:	015a      	lsls	r2, r3, #5
   2730a:	d4b8      	bmi.n	2727e <__aeabi_fadd+0x4a>
   2730c:	075a      	lsls	r2, r3, #29
   2730e:	d1ce      	bne.n	272ae <__aeabi_fadd+0x7a>
   27310:	08de      	lsrs	r6, r3, #3
   27312:	002a      	movs	r2, r5
   27314:	2cff      	cmp	r4, #255	; 0xff
   27316:	d13a      	bne.n	2738e <__aeabi_fadd+0x15a>
   27318:	2e00      	cmp	r6, #0
   2731a:	d100      	bne.n	2731e <__aeabi_fadd+0xea>
   2731c:	e0ae      	b.n	2747c <__aeabi_fadd+0x248>
   2731e:	2380      	movs	r3, #128	; 0x80
   27320:	03db      	lsls	r3, r3, #15
   27322:	4333      	orrs	r3, r6
   27324:	025b      	lsls	r3, r3, #9
   27326:	0a5b      	lsrs	r3, r3, #9
   27328:	24ff      	movs	r4, #255	; 0xff
   2732a:	e7cf      	b.n	272cc <__aeabi_fadd+0x98>
   2732c:	1a21      	subs	r1, r4, r0
   2732e:	2900      	cmp	r1, #0
   27330:	dd52      	ble.n	273d8 <__aeabi_fadd+0x1a4>
   27332:	2800      	cmp	r0, #0
   27334:	d031      	beq.n	2739a <__aeabi_fadd+0x166>
   27336:	2cff      	cmp	r4, #255	; 0xff
   27338:	d0b7      	beq.n	272aa <__aeabi_fadd+0x76>
   2733a:	2080      	movs	r0, #128	; 0x80
   2733c:	003e      	movs	r6, r7
   2733e:	04c0      	lsls	r0, r0, #19
   27340:	4306      	orrs	r6, r0
   27342:	46b4      	mov	ip, r6
   27344:	291b      	cmp	r1, #27
   27346:	dd00      	ble.n	2734a <__aeabi_fadd+0x116>
   27348:	e0aa      	b.n	274a0 <__aeabi_fadd+0x26c>
   2734a:	2620      	movs	r6, #32
   2734c:	4660      	mov	r0, ip
   2734e:	40c8      	lsrs	r0, r1
   27350:	1a71      	subs	r1, r6, r1
   27352:	4666      	mov	r6, ip
   27354:	408e      	lsls	r6, r1
   27356:	0031      	movs	r1, r6
   27358:	1e4e      	subs	r6, r1, #1
   2735a:	41b1      	sbcs	r1, r6
   2735c:	4301      	orrs	r1, r0
   2735e:	185b      	adds	r3, r3, r1
   27360:	0159      	lsls	r1, r3, #5
   27362:	d5d3      	bpl.n	2730c <__aeabi_fadd+0xd8>
   27364:	3401      	adds	r4, #1
   27366:	2cff      	cmp	r4, #255	; 0xff
   27368:	d100      	bne.n	2736c <__aeabi_fadd+0x138>
   2736a:	e087      	b.n	2747c <__aeabi_fadd+0x248>
   2736c:	2201      	movs	r2, #1
   2736e:	4978      	ldr	r1, [pc, #480]	; (27550 <__aeabi_fadd+0x31c>)
   27370:	401a      	ands	r2, r3
   27372:	085b      	lsrs	r3, r3, #1
   27374:	400b      	ands	r3, r1
   27376:	4313      	orrs	r3, r2
   27378:	e797      	b.n	272aa <__aeabi_fadd+0x76>
   2737a:	2c00      	cmp	r4, #0
   2737c:	d000      	beq.n	27380 <__aeabi_fadd+0x14c>
   2737e:	e0a7      	b.n	274d0 <__aeabi_fadd+0x29c>
   27380:	2b00      	cmp	r3, #0
   27382:	d000      	beq.n	27386 <__aeabi_fadd+0x152>
   27384:	e0b6      	b.n	274f4 <__aeabi_fadd+0x2c0>
   27386:	1e3b      	subs	r3, r7, #0
   27388:	d162      	bne.n	27450 <__aeabi_fadd+0x21c>
   2738a:	2600      	movs	r6, #0
   2738c:	2200      	movs	r2, #0
   2738e:	0273      	lsls	r3, r6, #9
   27390:	0a5b      	lsrs	r3, r3, #9
   27392:	b2e4      	uxtb	r4, r4
   27394:	e79a      	b.n	272cc <__aeabi_fadd+0x98>
   27396:	0014      	movs	r4, r2
   27398:	e787      	b.n	272aa <__aeabi_fadd+0x76>
   2739a:	2f00      	cmp	r7, #0
   2739c:	d04d      	beq.n	2743a <__aeabi_fadd+0x206>
   2739e:	1e48      	subs	r0, r1, #1
   273a0:	2800      	cmp	r0, #0
   273a2:	d157      	bne.n	27454 <__aeabi_fadd+0x220>
   273a4:	4463      	add	r3, ip
   273a6:	2401      	movs	r4, #1
   273a8:	015a      	lsls	r2, r3, #5
   273aa:	d5af      	bpl.n	2730c <__aeabi_fadd+0xd8>
   273ac:	2402      	movs	r4, #2
   273ae:	e7dd      	b.n	2736c <__aeabi_fadd+0x138>
   273b0:	2a00      	cmp	r2, #0
   273b2:	d124      	bne.n	273fe <__aeabi_fadd+0x1ca>
   273b4:	1c62      	adds	r2, r4, #1
   273b6:	b2d2      	uxtb	r2, r2
   273b8:	2a01      	cmp	r2, #1
   273ba:	ddde      	ble.n	2737a <__aeabi_fadd+0x146>
   273bc:	1bde      	subs	r6, r3, r7
   273be:	0172      	lsls	r2, r6, #5
   273c0:	d535      	bpl.n	2742e <__aeabi_fadd+0x1fa>
   273c2:	1afe      	subs	r6, r7, r3
   273c4:	000d      	movs	r5, r1
   273c6:	e75c      	b.n	27282 <__aeabi_fadd+0x4e>
   273c8:	002a      	movs	r2, r5
   273ca:	2300      	movs	r3, #0
   273cc:	e77e      	b.n	272cc <__aeabi_fadd+0x98>
   273ce:	0033      	movs	r3, r6
   273d0:	4a60      	ldr	r2, [pc, #384]	; (27554 <__aeabi_fadd+0x320>)
   273d2:	1a24      	subs	r4, r4, r0
   273d4:	4013      	ands	r3, r2
   273d6:	e768      	b.n	272aa <__aeabi_fadd+0x76>
   273d8:	2900      	cmp	r1, #0
   273da:	d163      	bne.n	274a4 <__aeabi_fadd+0x270>
   273dc:	1c61      	adds	r1, r4, #1
   273de:	b2c8      	uxtb	r0, r1
   273e0:	2801      	cmp	r0, #1
   273e2:	dd4e      	ble.n	27482 <__aeabi_fadd+0x24e>
   273e4:	29ff      	cmp	r1, #255	; 0xff
   273e6:	d049      	beq.n	2747c <__aeabi_fadd+0x248>
   273e8:	4463      	add	r3, ip
   273ea:	085b      	lsrs	r3, r3, #1
   273ec:	000c      	movs	r4, r1
   273ee:	e75c      	b.n	272aa <__aeabi_fadd+0x76>
   273f0:	2aff      	cmp	r2, #255	; 0xff
   273f2:	d041      	beq.n	27478 <__aeabi_fadd+0x244>
   273f4:	000a      	movs	r2, r1
   273f6:	e779      	b.n	272ec <__aeabi_fadd+0xb8>
   273f8:	2201      	movs	r2, #1
   273fa:	1a9b      	subs	r3, r3, r2
   273fc:	e784      	b.n	27308 <__aeabi_fadd+0xd4>
   273fe:	2c00      	cmp	r4, #0
   27400:	d01d      	beq.n	2743e <__aeabi_fadd+0x20a>
   27402:	28ff      	cmp	r0, #255	; 0xff
   27404:	d022      	beq.n	2744c <__aeabi_fadd+0x218>
   27406:	2480      	movs	r4, #128	; 0x80
   27408:	04e4      	lsls	r4, r4, #19
   2740a:	4252      	negs	r2, r2
   2740c:	4323      	orrs	r3, r4
   2740e:	2a1b      	cmp	r2, #27
   27410:	dd00      	ble.n	27414 <__aeabi_fadd+0x1e0>
   27412:	e08a      	b.n	2752a <__aeabi_fadd+0x2f6>
   27414:	001c      	movs	r4, r3
   27416:	2520      	movs	r5, #32
   27418:	40d4      	lsrs	r4, r2
   2741a:	1aaa      	subs	r2, r5, r2
   2741c:	4093      	lsls	r3, r2
   2741e:	1e5a      	subs	r2, r3, #1
   27420:	4193      	sbcs	r3, r2
   27422:	4323      	orrs	r3, r4
   27424:	4662      	mov	r2, ip
   27426:	0004      	movs	r4, r0
   27428:	1ad3      	subs	r3, r2, r3
   2742a:	000d      	movs	r5, r1
   2742c:	e725      	b.n	2727a <__aeabi_fadd+0x46>
   2742e:	2e00      	cmp	r6, #0
   27430:	d000      	beq.n	27434 <__aeabi_fadd+0x200>
   27432:	e726      	b.n	27282 <__aeabi_fadd+0x4e>
   27434:	2200      	movs	r2, #0
   27436:	2400      	movs	r4, #0
   27438:	e7a9      	b.n	2738e <__aeabi_fadd+0x15a>
   2743a:	000c      	movs	r4, r1
   2743c:	e735      	b.n	272aa <__aeabi_fadd+0x76>
   2743e:	2b00      	cmp	r3, #0
   27440:	d04d      	beq.n	274de <__aeabi_fadd+0x2aa>
   27442:	43d2      	mvns	r2, r2
   27444:	2a00      	cmp	r2, #0
   27446:	d0ed      	beq.n	27424 <__aeabi_fadd+0x1f0>
   27448:	28ff      	cmp	r0, #255	; 0xff
   2744a:	d1e0      	bne.n	2740e <__aeabi_fadd+0x1da>
   2744c:	4663      	mov	r3, ip
   2744e:	24ff      	movs	r4, #255	; 0xff
   27450:	000d      	movs	r5, r1
   27452:	e72a      	b.n	272aa <__aeabi_fadd+0x76>
   27454:	29ff      	cmp	r1, #255	; 0xff
   27456:	d00f      	beq.n	27478 <__aeabi_fadd+0x244>
   27458:	0001      	movs	r1, r0
   2745a:	e773      	b.n	27344 <__aeabi_fadd+0x110>
   2745c:	2b00      	cmp	r3, #0
   2745e:	d061      	beq.n	27524 <__aeabi_fadd+0x2f0>
   27460:	24ff      	movs	r4, #255	; 0xff
   27462:	2f00      	cmp	r7, #0
   27464:	d100      	bne.n	27468 <__aeabi_fadd+0x234>
   27466:	e720      	b.n	272aa <__aeabi_fadd+0x76>
   27468:	2280      	movs	r2, #128	; 0x80
   2746a:	4641      	mov	r1, r8
   2746c:	03d2      	lsls	r2, r2, #15
   2746e:	4211      	tst	r1, r2
   27470:	d002      	beq.n	27478 <__aeabi_fadd+0x244>
   27472:	4216      	tst	r6, r2
   27474:	d100      	bne.n	27478 <__aeabi_fadd+0x244>
   27476:	003b      	movs	r3, r7
   27478:	24ff      	movs	r4, #255	; 0xff
   2747a:	e716      	b.n	272aa <__aeabi_fadd+0x76>
   2747c:	24ff      	movs	r4, #255	; 0xff
   2747e:	2300      	movs	r3, #0
   27480:	e724      	b.n	272cc <__aeabi_fadd+0x98>
   27482:	2c00      	cmp	r4, #0
   27484:	d1ea      	bne.n	2745c <__aeabi_fadd+0x228>
   27486:	2b00      	cmp	r3, #0
   27488:	d058      	beq.n	2753c <__aeabi_fadd+0x308>
   2748a:	2f00      	cmp	r7, #0
   2748c:	d100      	bne.n	27490 <__aeabi_fadd+0x25c>
   2748e:	e70c      	b.n	272aa <__aeabi_fadd+0x76>
   27490:	4463      	add	r3, ip
   27492:	015a      	lsls	r2, r3, #5
   27494:	d400      	bmi.n	27498 <__aeabi_fadd+0x264>
   27496:	e739      	b.n	2730c <__aeabi_fadd+0xd8>
   27498:	4a2e      	ldr	r2, [pc, #184]	; (27554 <__aeabi_fadd+0x320>)
   2749a:	000c      	movs	r4, r1
   2749c:	4013      	ands	r3, r2
   2749e:	e704      	b.n	272aa <__aeabi_fadd+0x76>
   274a0:	2101      	movs	r1, #1
   274a2:	e75c      	b.n	2735e <__aeabi_fadd+0x12a>
   274a4:	2c00      	cmp	r4, #0
   274a6:	d11e      	bne.n	274e6 <__aeabi_fadd+0x2b2>
   274a8:	2b00      	cmp	r3, #0
   274aa:	d040      	beq.n	2752e <__aeabi_fadd+0x2fa>
   274ac:	43c9      	mvns	r1, r1
   274ae:	2900      	cmp	r1, #0
   274b0:	d00b      	beq.n	274ca <__aeabi_fadd+0x296>
   274b2:	28ff      	cmp	r0, #255	; 0xff
   274b4:	d036      	beq.n	27524 <__aeabi_fadd+0x2f0>
   274b6:	291b      	cmp	r1, #27
   274b8:	dc47      	bgt.n	2754a <__aeabi_fadd+0x316>
   274ba:	001c      	movs	r4, r3
   274bc:	2620      	movs	r6, #32
   274be:	40cc      	lsrs	r4, r1
   274c0:	1a71      	subs	r1, r6, r1
   274c2:	408b      	lsls	r3, r1
   274c4:	1e59      	subs	r1, r3, #1
   274c6:	418b      	sbcs	r3, r1
   274c8:	4323      	orrs	r3, r4
   274ca:	4463      	add	r3, ip
   274cc:	0004      	movs	r4, r0
   274ce:	e747      	b.n	27360 <__aeabi_fadd+0x12c>
   274d0:	2b00      	cmp	r3, #0
   274d2:	d118      	bne.n	27506 <__aeabi_fadd+0x2d2>
   274d4:	1e3b      	subs	r3, r7, #0
   274d6:	d02d      	beq.n	27534 <__aeabi_fadd+0x300>
   274d8:	000d      	movs	r5, r1
   274da:	24ff      	movs	r4, #255	; 0xff
   274dc:	e6e5      	b.n	272aa <__aeabi_fadd+0x76>
   274de:	003b      	movs	r3, r7
   274e0:	0004      	movs	r4, r0
   274e2:	000d      	movs	r5, r1
   274e4:	e6e1      	b.n	272aa <__aeabi_fadd+0x76>
   274e6:	28ff      	cmp	r0, #255	; 0xff
   274e8:	d01c      	beq.n	27524 <__aeabi_fadd+0x2f0>
   274ea:	2480      	movs	r4, #128	; 0x80
   274ec:	04e4      	lsls	r4, r4, #19
   274ee:	4249      	negs	r1, r1
   274f0:	4323      	orrs	r3, r4
   274f2:	e7e0      	b.n	274b6 <__aeabi_fadd+0x282>
   274f4:	2f00      	cmp	r7, #0
   274f6:	d100      	bne.n	274fa <__aeabi_fadd+0x2c6>
   274f8:	e6d7      	b.n	272aa <__aeabi_fadd+0x76>
   274fa:	1bde      	subs	r6, r3, r7
   274fc:	0172      	lsls	r2, r6, #5
   274fe:	d51f      	bpl.n	27540 <__aeabi_fadd+0x30c>
   27500:	1afb      	subs	r3, r7, r3
   27502:	000d      	movs	r5, r1
   27504:	e6d1      	b.n	272aa <__aeabi_fadd+0x76>
   27506:	24ff      	movs	r4, #255	; 0xff
   27508:	2f00      	cmp	r7, #0
   2750a:	d100      	bne.n	2750e <__aeabi_fadd+0x2da>
   2750c:	e6cd      	b.n	272aa <__aeabi_fadd+0x76>
   2750e:	2280      	movs	r2, #128	; 0x80
   27510:	4640      	mov	r0, r8
   27512:	03d2      	lsls	r2, r2, #15
   27514:	4210      	tst	r0, r2
   27516:	d0af      	beq.n	27478 <__aeabi_fadd+0x244>
   27518:	4216      	tst	r6, r2
   2751a:	d1ad      	bne.n	27478 <__aeabi_fadd+0x244>
   2751c:	003b      	movs	r3, r7
   2751e:	000d      	movs	r5, r1
   27520:	24ff      	movs	r4, #255	; 0xff
   27522:	e6c2      	b.n	272aa <__aeabi_fadd+0x76>
   27524:	4663      	mov	r3, ip
   27526:	24ff      	movs	r4, #255	; 0xff
   27528:	e6bf      	b.n	272aa <__aeabi_fadd+0x76>
   2752a:	2301      	movs	r3, #1
   2752c:	e77a      	b.n	27424 <__aeabi_fadd+0x1f0>
   2752e:	003b      	movs	r3, r7
   27530:	0004      	movs	r4, r0
   27532:	e6ba      	b.n	272aa <__aeabi_fadd+0x76>
   27534:	2680      	movs	r6, #128	; 0x80
   27536:	2200      	movs	r2, #0
   27538:	03f6      	lsls	r6, r6, #15
   2753a:	e6f0      	b.n	2731e <__aeabi_fadd+0xea>
   2753c:	003b      	movs	r3, r7
   2753e:	e6b4      	b.n	272aa <__aeabi_fadd+0x76>
   27540:	1e33      	subs	r3, r6, #0
   27542:	d000      	beq.n	27546 <__aeabi_fadd+0x312>
   27544:	e6e2      	b.n	2730c <__aeabi_fadd+0xd8>
   27546:	2200      	movs	r2, #0
   27548:	e721      	b.n	2738e <__aeabi_fadd+0x15a>
   2754a:	2301      	movs	r3, #1
   2754c:	e7bd      	b.n	274ca <__aeabi_fadd+0x296>
   2754e:	46c0      	nop			; (mov r8, r8)
   27550:	7dffffff 	.word	0x7dffffff
   27554:	fbffffff 	.word	0xfbffffff

00027558 <__aeabi_fdiv>:
   27558:	b5f0      	push	{r4, r5, r6, r7, lr}
   2755a:	4657      	mov	r7, sl
   2755c:	464e      	mov	r6, r9
   2755e:	46de      	mov	lr, fp
   27560:	4645      	mov	r5, r8
   27562:	b5e0      	push	{r5, r6, r7, lr}
   27564:	0244      	lsls	r4, r0, #9
   27566:	0043      	lsls	r3, r0, #1
   27568:	0fc6      	lsrs	r6, r0, #31
   2756a:	b083      	sub	sp, #12
   2756c:	1c0f      	adds	r7, r1, #0
   2756e:	0a64      	lsrs	r4, r4, #9
   27570:	0e1b      	lsrs	r3, r3, #24
   27572:	46b2      	mov	sl, r6
   27574:	d053      	beq.n	2761e <__aeabi_fdiv+0xc6>
   27576:	2bff      	cmp	r3, #255	; 0xff
   27578:	d027      	beq.n	275ca <__aeabi_fdiv+0x72>
   2757a:	2280      	movs	r2, #128	; 0x80
   2757c:	00e4      	lsls	r4, r4, #3
   2757e:	04d2      	lsls	r2, r2, #19
   27580:	4314      	orrs	r4, r2
   27582:	227f      	movs	r2, #127	; 0x7f
   27584:	4252      	negs	r2, r2
   27586:	4690      	mov	r8, r2
   27588:	4498      	add	r8, r3
   2758a:	2300      	movs	r3, #0
   2758c:	4699      	mov	r9, r3
   2758e:	469b      	mov	fp, r3
   27590:	027d      	lsls	r5, r7, #9
   27592:	0078      	lsls	r0, r7, #1
   27594:	0ffb      	lsrs	r3, r7, #31
   27596:	0a6d      	lsrs	r5, r5, #9
   27598:	0e00      	lsrs	r0, r0, #24
   2759a:	9300      	str	r3, [sp, #0]
   2759c:	d024      	beq.n	275e8 <__aeabi_fdiv+0x90>
   2759e:	28ff      	cmp	r0, #255	; 0xff
   275a0:	d046      	beq.n	27630 <__aeabi_fdiv+0xd8>
   275a2:	2380      	movs	r3, #128	; 0x80
   275a4:	2100      	movs	r1, #0
   275a6:	00ed      	lsls	r5, r5, #3
   275a8:	04db      	lsls	r3, r3, #19
   275aa:	431d      	orrs	r5, r3
   275ac:	387f      	subs	r0, #127	; 0x7f
   275ae:	4647      	mov	r7, r8
   275b0:	1a38      	subs	r0, r7, r0
   275b2:	464f      	mov	r7, r9
   275b4:	430f      	orrs	r7, r1
   275b6:	00bf      	lsls	r7, r7, #2
   275b8:	46b9      	mov	r9, r7
   275ba:	0033      	movs	r3, r6
   275bc:	9a00      	ldr	r2, [sp, #0]
   275be:	4f87      	ldr	r7, [pc, #540]	; (277dc <__aeabi_fdiv+0x284>)
   275c0:	4053      	eors	r3, r2
   275c2:	464a      	mov	r2, r9
   275c4:	58ba      	ldr	r2, [r7, r2]
   275c6:	9301      	str	r3, [sp, #4]
   275c8:	4697      	mov	pc, r2
   275ca:	2c00      	cmp	r4, #0
   275cc:	d14e      	bne.n	2766c <__aeabi_fdiv+0x114>
   275ce:	2308      	movs	r3, #8
   275d0:	4699      	mov	r9, r3
   275d2:	33f7      	adds	r3, #247	; 0xf7
   275d4:	4698      	mov	r8, r3
   275d6:	3bfd      	subs	r3, #253	; 0xfd
   275d8:	469b      	mov	fp, r3
   275da:	027d      	lsls	r5, r7, #9
   275dc:	0078      	lsls	r0, r7, #1
   275de:	0ffb      	lsrs	r3, r7, #31
   275e0:	0a6d      	lsrs	r5, r5, #9
   275e2:	0e00      	lsrs	r0, r0, #24
   275e4:	9300      	str	r3, [sp, #0]
   275e6:	d1da      	bne.n	2759e <__aeabi_fdiv+0x46>
   275e8:	2d00      	cmp	r5, #0
   275ea:	d126      	bne.n	2763a <__aeabi_fdiv+0xe2>
   275ec:	2000      	movs	r0, #0
   275ee:	2101      	movs	r1, #1
   275f0:	0033      	movs	r3, r6
   275f2:	9a00      	ldr	r2, [sp, #0]
   275f4:	4f7a      	ldr	r7, [pc, #488]	; (277e0 <__aeabi_fdiv+0x288>)
   275f6:	4053      	eors	r3, r2
   275f8:	4642      	mov	r2, r8
   275fa:	1a10      	subs	r0, r2, r0
   275fc:	464a      	mov	r2, r9
   275fe:	430a      	orrs	r2, r1
   27600:	0092      	lsls	r2, r2, #2
   27602:	58ba      	ldr	r2, [r7, r2]
   27604:	001d      	movs	r5, r3
   27606:	4697      	mov	pc, r2
   27608:	9b00      	ldr	r3, [sp, #0]
   2760a:	002c      	movs	r4, r5
   2760c:	469a      	mov	sl, r3
   2760e:	468b      	mov	fp, r1
   27610:	465b      	mov	r3, fp
   27612:	2b02      	cmp	r3, #2
   27614:	d131      	bne.n	2767a <__aeabi_fdiv+0x122>
   27616:	4653      	mov	r3, sl
   27618:	21ff      	movs	r1, #255	; 0xff
   2761a:	2400      	movs	r4, #0
   2761c:	e038      	b.n	27690 <__aeabi_fdiv+0x138>
   2761e:	2c00      	cmp	r4, #0
   27620:	d117      	bne.n	27652 <__aeabi_fdiv+0xfa>
   27622:	2304      	movs	r3, #4
   27624:	4699      	mov	r9, r3
   27626:	2300      	movs	r3, #0
   27628:	4698      	mov	r8, r3
   2762a:	3301      	adds	r3, #1
   2762c:	469b      	mov	fp, r3
   2762e:	e7af      	b.n	27590 <__aeabi_fdiv+0x38>
   27630:	20ff      	movs	r0, #255	; 0xff
   27632:	2d00      	cmp	r5, #0
   27634:	d10b      	bne.n	2764e <__aeabi_fdiv+0xf6>
   27636:	2102      	movs	r1, #2
   27638:	e7da      	b.n	275f0 <__aeabi_fdiv+0x98>
   2763a:	0028      	movs	r0, r5
   2763c:	f002 f884 	bl	29748 <__clzsi2>
   27640:	1f43      	subs	r3, r0, #5
   27642:	409d      	lsls	r5, r3
   27644:	2376      	movs	r3, #118	; 0x76
   27646:	425b      	negs	r3, r3
   27648:	1a18      	subs	r0, r3, r0
   2764a:	2100      	movs	r1, #0
   2764c:	e7af      	b.n	275ae <__aeabi_fdiv+0x56>
   2764e:	2103      	movs	r1, #3
   27650:	e7ad      	b.n	275ae <__aeabi_fdiv+0x56>
   27652:	0020      	movs	r0, r4
   27654:	f002 f878 	bl	29748 <__clzsi2>
   27658:	1f43      	subs	r3, r0, #5
   2765a:	409c      	lsls	r4, r3
   2765c:	2376      	movs	r3, #118	; 0x76
   2765e:	425b      	negs	r3, r3
   27660:	1a1b      	subs	r3, r3, r0
   27662:	4698      	mov	r8, r3
   27664:	2300      	movs	r3, #0
   27666:	4699      	mov	r9, r3
   27668:	469b      	mov	fp, r3
   2766a:	e791      	b.n	27590 <__aeabi_fdiv+0x38>
   2766c:	230c      	movs	r3, #12
   2766e:	4699      	mov	r9, r3
   27670:	33f3      	adds	r3, #243	; 0xf3
   27672:	4698      	mov	r8, r3
   27674:	3bfc      	subs	r3, #252	; 0xfc
   27676:	469b      	mov	fp, r3
   27678:	e78a      	b.n	27590 <__aeabi_fdiv+0x38>
   2767a:	2b03      	cmp	r3, #3
   2767c:	d100      	bne.n	27680 <__aeabi_fdiv+0x128>
   2767e:	e0a5      	b.n	277cc <__aeabi_fdiv+0x274>
   27680:	4655      	mov	r5, sl
   27682:	2b01      	cmp	r3, #1
   27684:	d000      	beq.n	27688 <__aeabi_fdiv+0x130>
   27686:	e081      	b.n	2778c <__aeabi_fdiv+0x234>
   27688:	2301      	movs	r3, #1
   2768a:	2100      	movs	r1, #0
   2768c:	2400      	movs	r4, #0
   2768e:	402b      	ands	r3, r5
   27690:	0264      	lsls	r4, r4, #9
   27692:	05c9      	lsls	r1, r1, #23
   27694:	0a60      	lsrs	r0, r4, #9
   27696:	07db      	lsls	r3, r3, #31
   27698:	4308      	orrs	r0, r1
   2769a:	4318      	orrs	r0, r3
   2769c:	b003      	add	sp, #12
   2769e:	bc3c      	pop	{r2, r3, r4, r5}
   276a0:	4690      	mov	r8, r2
   276a2:	4699      	mov	r9, r3
   276a4:	46a2      	mov	sl, r4
   276a6:	46ab      	mov	fp, r5
   276a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   276aa:	2480      	movs	r4, #128	; 0x80
   276ac:	2300      	movs	r3, #0
   276ae:	03e4      	lsls	r4, r4, #15
   276b0:	21ff      	movs	r1, #255	; 0xff
   276b2:	e7ed      	b.n	27690 <__aeabi_fdiv+0x138>
   276b4:	21ff      	movs	r1, #255	; 0xff
   276b6:	2400      	movs	r4, #0
   276b8:	e7ea      	b.n	27690 <__aeabi_fdiv+0x138>
   276ba:	2301      	movs	r3, #1
   276bc:	1a59      	subs	r1, r3, r1
   276be:	291b      	cmp	r1, #27
   276c0:	dd66      	ble.n	27790 <__aeabi_fdiv+0x238>
   276c2:	9a01      	ldr	r2, [sp, #4]
   276c4:	4013      	ands	r3, r2
   276c6:	2100      	movs	r1, #0
   276c8:	2400      	movs	r4, #0
   276ca:	e7e1      	b.n	27690 <__aeabi_fdiv+0x138>
   276cc:	2380      	movs	r3, #128	; 0x80
   276ce:	03db      	lsls	r3, r3, #15
   276d0:	421c      	tst	r4, r3
   276d2:	d038      	beq.n	27746 <__aeabi_fdiv+0x1ee>
   276d4:	421d      	tst	r5, r3
   276d6:	d051      	beq.n	2777c <__aeabi_fdiv+0x224>
   276d8:	431c      	orrs	r4, r3
   276da:	0264      	lsls	r4, r4, #9
   276dc:	0a64      	lsrs	r4, r4, #9
   276de:	0033      	movs	r3, r6
   276e0:	21ff      	movs	r1, #255	; 0xff
   276e2:	e7d5      	b.n	27690 <__aeabi_fdiv+0x138>
   276e4:	0163      	lsls	r3, r4, #5
   276e6:	016c      	lsls	r4, r5, #5
   276e8:	42a3      	cmp	r3, r4
   276ea:	d23b      	bcs.n	27764 <__aeabi_fdiv+0x20c>
   276ec:	261b      	movs	r6, #27
   276ee:	2100      	movs	r1, #0
   276f0:	3801      	subs	r0, #1
   276f2:	2501      	movs	r5, #1
   276f4:	001f      	movs	r7, r3
   276f6:	0049      	lsls	r1, r1, #1
   276f8:	005b      	lsls	r3, r3, #1
   276fa:	2f00      	cmp	r7, #0
   276fc:	db01      	blt.n	27702 <__aeabi_fdiv+0x1aa>
   276fe:	429c      	cmp	r4, r3
   27700:	d801      	bhi.n	27706 <__aeabi_fdiv+0x1ae>
   27702:	1b1b      	subs	r3, r3, r4
   27704:	4329      	orrs	r1, r5
   27706:	3e01      	subs	r6, #1
   27708:	2e00      	cmp	r6, #0
   2770a:	d1f3      	bne.n	276f4 <__aeabi_fdiv+0x19c>
   2770c:	001c      	movs	r4, r3
   2770e:	1e63      	subs	r3, r4, #1
   27710:	419c      	sbcs	r4, r3
   27712:	430c      	orrs	r4, r1
   27714:	0001      	movs	r1, r0
   27716:	317f      	adds	r1, #127	; 0x7f
   27718:	2900      	cmp	r1, #0
   2771a:	ddce      	ble.n	276ba <__aeabi_fdiv+0x162>
   2771c:	0763      	lsls	r3, r4, #29
   2771e:	d004      	beq.n	2772a <__aeabi_fdiv+0x1d2>
   27720:	230f      	movs	r3, #15
   27722:	4023      	ands	r3, r4
   27724:	2b04      	cmp	r3, #4
   27726:	d000      	beq.n	2772a <__aeabi_fdiv+0x1d2>
   27728:	3404      	adds	r4, #4
   2772a:	0123      	lsls	r3, r4, #4
   2772c:	d503      	bpl.n	27736 <__aeabi_fdiv+0x1de>
   2772e:	0001      	movs	r1, r0
   27730:	4b2c      	ldr	r3, [pc, #176]	; (277e4 <__aeabi_fdiv+0x28c>)
   27732:	3180      	adds	r1, #128	; 0x80
   27734:	401c      	ands	r4, r3
   27736:	29fe      	cmp	r1, #254	; 0xfe
   27738:	dd0d      	ble.n	27756 <__aeabi_fdiv+0x1fe>
   2773a:	2301      	movs	r3, #1
   2773c:	9a01      	ldr	r2, [sp, #4]
   2773e:	21ff      	movs	r1, #255	; 0xff
   27740:	4013      	ands	r3, r2
   27742:	2400      	movs	r4, #0
   27744:	e7a4      	b.n	27690 <__aeabi_fdiv+0x138>
   27746:	2380      	movs	r3, #128	; 0x80
   27748:	03db      	lsls	r3, r3, #15
   2774a:	431c      	orrs	r4, r3
   2774c:	0264      	lsls	r4, r4, #9
   2774e:	0a64      	lsrs	r4, r4, #9
   27750:	0033      	movs	r3, r6
   27752:	21ff      	movs	r1, #255	; 0xff
   27754:	e79c      	b.n	27690 <__aeabi_fdiv+0x138>
   27756:	2301      	movs	r3, #1
   27758:	9a01      	ldr	r2, [sp, #4]
   2775a:	01a4      	lsls	r4, r4, #6
   2775c:	0a64      	lsrs	r4, r4, #9
   2775e:	b2c9      	uxtb	r1, r1
   27760:	4013      	ands	r3, r2
   27762:	e795      	b.n	27690 <__aeabi_fdiv+0x138>
   27764:	1b1b      	subs	r3, r3, r4
   27766:	261a      	movs	r6, #26
   27768:	2101      	movs	r1, #1
   2776a:	e7c2      	b.n	276f2 <__aeabi_fdiv+0x19a>
   2776c:	9b00      	ldr	r3, [sp, #0]
   2776e:	468b      	mov	fp, r1
   27770:	469a      	mov	sl, r3
   27772:	2400      	movs	r4, #0
   27774:	e74c      	b.n	27610 <__aeabi_fdiv+0xb8>
   27776:	0263      	lsls	r3, r4, #9
   27778:	d5e5      	bpl.n	27746 <__aeabi_fdiv+0x1ee>
   2777a:	2500      	movs	r5, #0
   2777c:	2480      	movs	r4, #128	; 0x80
   2777e:	03e4      	lsls	r4, r4, #15
   27780:	432c      	orrs	r4, r5
   27782:	0264      	lsls	r4, r4, #9
   27784:	0a64      	lsrs	r4, r4, #9
   27786:	9b00      	ldr	r3, [sp, #0]
   27788:	21ff      	movs	r1, #255	; 0xff
   2778a:	e781      	b.n	27690 <__aeabi_fdiv+0x138>
   2778c:	9501      	str	r5, [sp, #4]
   2778e:	e7c1      	b.n	27714 <__aeabi_fdiv+0x1bc>
   27790:	0023      	movs	r3, r4
   27792:	2020      	movs	r0, #32
   27794:	40cb      	lsrs	r3, r1
   27796:	1a41      	subs	r1, r0, r1
   27798:	408c      	lsls	r4, r1
   2779a:	1e61      	subs	r1, r4, #1
   2779c:	418c      	sbcs	r4, r1
   2779e:	431c      	orrs	r4, r3
   277a0:	0763      	lsls	r3, r4, #29
   277a2:	d004      	beq.n	277ae <__aeabi_fdiv+0x256>
   277a4:	230f      	movs	r3, #15
   277a6:	4023      	ands	r3, r4
   277a8:	2b04      	cmp	r3, #4
   277aa:	d000      	beq.n	277ae <__aeabi_fdiv+0x256>
   277ac:	3404      	adds	r4, #4
   277ae:	0163      	lsls	r3, r4, #5
   277b0:	d505      	bpl.n	277be <__aeabi_fdiv+0x266>
   277b2:	2301      	movs	r3, #1
   277b4:	9a01      	ldr	r2, [sp, #4]
   277b6:	2101      	movs	r1, #1
   277b8:	4013      	ands	r3, r2
   277ba:	2400      	movs	r4, #0
   277bc:	e768      	b.n	27690 <__aeabi_fdiv+0x138>
   277be:	2301      	movs	r3, #1
   277c0:	9a01      	ldr	r2, [sp, #4]
   277c2:	01a4      	lsls	r4, r4, #6
   277c4:	0a64      	lsrs	r4, r4, #9
   277c6:	4013      	ands	r3, r2
   277c8:	2100      	movs	r1, #0
   277ca:	e761      	b.n	27690 <__aeabi_fdiv+0x138>
   277cc:	2380      	movs	r3, #128	; 0x80
   277ce:	03db      	lsls	r3, r3, #15
   277d0:	431c      	orrs	r4, r3
   277d2:	0264      	lsls	r4, r4, #9
   277d4:	0a64      	lsrs	r4, r4, #9
   277d6:	4653      	mov	r3, sl
   277d8:	21ff      	movs	r1, #255	; 0xff
   277da:	e759      	b.n	27690 <__aeabi_fdiv+0x138>
   277dc:	0002b850 	.word	0x0002b850
   277e0:	0002b890 	.word	0x0002b890
   277e4:	f7ffffff 	.word	0xf7ffffff

000277e8 <__aeabi_fmul>:
   277e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   277ea:	4657      	mov	r7, sl
   277ec:	464e      	mov	r6, r9
   277ee:	4645      	mov	r5, r8
   277f0:	46de      	mov	lr, fp
   277f2:	b5e0      	push	{r5, r6, r7, lr}
   277f4:	0247      	lsls	r7, r0, #9
   277f6:	0046      	lsls	r6, r0, #1
   277f8:	4688      	mov	r8, r1
   277fa:	0a7f      	lsrs	r7, r7, #9
   277fc:	0e36      	lsrs	r6, r6, #24
   277fe:	0fc4      	lsrs	r4, r0, #31
   27800:	2e00      	cmp	r6, #0
   27802:	d047      	beq.n	27894 <__aeabi_fmul+0xac>
   27804:	2eff      	cmp	r6, #255	; 0xff
   27806:	d024      	beq.n	27852 <__aeabi_fmul+0x6a>
   27808:	00fb      	lsls	r3, r7, #3
   2780a:	2780      	movs	r7, #128	; 0x80
   2780c:	04ff      	lsls	r7, r7, #19
   2780e:	431f      	orrs	r7, r3
   27810:	2300      	movs	r3, #0
   27812:	4699      	mov	r9, r3
   27814:	469a      	mov	sl, r3
   27816:	3e7f      	subs	r6, #127	; 0x7f
   27818:	4643      	mov	r3, r8
   2781a:	025d      	lsls	r5, r3, #9
   2781c:	0058      	lsls	r0, r3, #1
   2781e:	0fdb      	lsrs	r3, r3, #31
   27820:	0a6d      	lsrs	r5, r5, #9
   27822:	0e00      	lsrs	r0, r0, #24
   27824:	4698      	mov	r8, r3
   27826:	d043      	beq.n	278b0 <__aeabi_fmul+0xc8>
   27828:	28ff      	cmp	r0, #255	; 0xff
   2782a:	d03b      	beq.n	278a4 <__aeabi_fmul+0xbc>
   2782c:	00eb      	lsls	r3, r5, #3
   2782e:	2580      	movs	r5, #128	; 0x80
   27830:	2200      	movs	r2, #0
   27832:	04ed      	lsls	r5, r5, #19
   27834:	431d      	orrs	r5, r3
   27836:	387f      	subs	r0, #127	; 0x7f
   27838:	1836      	adds	r6, r6, r0
   2783a:	1c73      	adds	r3, r6, #1
   2783c:	4641      	mov	r1, r8
   2783e:	469b      	mov	fp, r3
   27840:	464b      	mov	r3, r9
   27842:	4061      	eors	r1, r4
   27844:	4313      	orrs	r3, r2
   27846:	2b0f      	cmp	r3, #15
   27848:	d864      	bhi.n	27914 <__aeabi_fmul+0x12c>
   2784a:	4875      	ldr	r0, [pc, #468]	; (27a20 <__aeabi_fmul+0x238>)
   2784c:	009b      	lsls	r3, r3, #2
   2784e:	58c3      	ldr	r3, [r0, r3]
   27850:	469f      	mov	pc, r3
   27852:	2f00      	cmp	r7, #0
   27854:	d142      	bne.n	278dc <__aeabi_fmul+0xf4>
   27856:	2308      	movs	r3, #8
   27858:	4699      	mov	r9, r3
   2785a:	3b06      	subs	r3, #6
   2785c:	26ff      	movs	r6, #255	; 0xff
   2785e:	469a      	mov	sl, r3
   27860:	e7da      	b.n	27818 <__aeabi_fmul+0x30>
   27862:	4641      	mov	r1, r8
   27864:	2a02      	cmp	r2, #2
   27866:	d028      	beq.n	278ba <__aeabi_fmul+0xd2>
   27868:	2a03      	cmp	r2, #3
   2786a:	d100      	bne.n	2786e <__aeabi_fmul+0x86>
   2786c:	e0ce      	b.n	27a0c <__aeabi_fmul+0x224>
   2786e:	2a01      	cmp	r2, #1
   27870:	d000      	beq.n	27874 <__aeabi_fmul+0x8c>
   27872:	e0ac      	b.n	279ce <__aeabi_fmul+0x1e6>
   27874:	4011      	ands	r1, r2
   27876:	2000      	movs	r0, #0
   27878:	2200      	movs	r2, #0
   2787a:	b2cc      	uxtb	r4, r1
   2787c:	0240      	lsls	r0, r0, #9
   2787e:	05d2      	lsls	r2, r2, #23
   27880:	0a40      	lsrs	r0, r0, #9
   27882:	07e4      	lsls	r4, r4, #31
   27884:	4310      	orrs	r0, r2
   27886:	4320      	orrs	r0, r4
   27888:	bc3c      	pop	{r2, r3, r4, r5}
   2788a:	4690      	mov	r8, r2
   2788c:	4699      	mov	r9, r3
   2788e:	46a2      	mov	sl, r4
   27890:	46ab      	mov	fp, r5
   27892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27894:	2f00      	cmp	r7, #0
   27896:	d115      	bne.n	278c4 <__aeabi_fmul+0xdc>
   27898:	2304      	movs	r3, #4
   2789a:	4699      	mov	r9, r3
   2789c:	3b03      	subs	r3, #3
   2789e:	2600      	movs	r6, #0
   278a0:	469a      	mov	sl, r3
   278a2:	e7b9      	b.n	27818 <__aeabi_fmul+0x30>
   278a4:	20ff      	movs	r0, #255	; 0xff
   278a6:	2202      	movs	r2, #2
   278a8:	2d00      	cmp	r5, #0
   278aa:	d0c5      	beq.n	27838 <__aeabi_fmul+0x50>
   278ac:	2203      	movs	r2, #3
   278ae:	e7c3      	b.n	27838 <__aeabi_fmul+0x50>
   278b0:	2d00      	cmp	r5, #0
   278b2:	d119      	bne.n	278e8 <__aeabi_fmul+0x100>
   278b4:	2000      	movs	r0, #0
   278b6:	2201      	movs	r2, #1
   278b8:	e7be      	b.n	27838 <__aeabi_fmul+0x50>
   278ba:	2401      	movs	r4, #1
   278bc:	22ff      	movs	r2, #255	; 0xff
   278be:	400c      	ands	r4, r1
   278c0:	2000      	movs	r0, #0
   278c2:	e7db      	b.n	2787c <__aeabi_fmul+0x94>
   278c4:	0038      	movs	r0, r7
   278c6:	f001 ff3f 	bl	29748 <__clzsi2>
   278ca:	2676      	movs	r6, #118	; 0x76
   278cc:	1f43      	subs	r3, r0, #5
   278ce:	409f      	lsls	r7, r3
   278d0:	2300      	movs	r3, #0
   278d2:	4276      	negs	r6, r6
   278d4:	1a36      	subs	r6, r6, r0
   278d6:	4699      	mov	r9, r3
   278d8:	469a      	mov	sl, r3
   278da:	e79d      	b.n	27818 <__aeabi_fmul+0x30>
   278dc:	230c      	movs	r3, #12
   278de:	4699      	mov	r9, r3
   278e0:	3b09      	subs	r3, #9
   278e2:	26ff      	movs	r6, #255	; 0xff
   278e4:	469a      	mov	sl, r3
   278e6:	e797      	b.n	27818 <__aeabi_fmul+0x30>
   278e8:	0028      	movs	r0, r5
   278ea:	f001 ff2d 	bl	29748 <__clzsi2>
   278ee:	1f43      	subs	r3, r0, #5
   278f0:	409d      	lsls	r5, r3
   278f2:	2376      	movs	r3, #118	; 0x76
   278f4:	425b      	negs	r3, r3
   278f6:	1a18      	subs	r0, r3, r0
   278f8:	2200      	movs	r2, #0
   278fa:	e79d      	b.n	27838 <__aeabi_fmul+0x50>
   278fc:	2080      	movs	r0, #128	; 0x80
   278fe:	2400      	movs	r4, #0
   27900:	03c0      	lsls	r0, r0, #15
   27902:	22ff      	movs	r2, #255	; 0xff
   27904:	e7ba      	b.n	2787c <__aeabi_fmul+0x94>
   27906:	003d      	movs	r5, r7
   27908:	4652      	mov	r2, sl
   2790a:	e7ab      	b.n	27864 <__aeabi_fmul+0x7c>
   2790c:	003d      	movs	r5, r7
   2790e:	0021      	movs	r1, r4
   27910:	4652      	mov	r2, sl
   27912:	e7a7      	b.n	27864 <__aeabi_fmul+0x7c>
   27914:	0c3b      	lsrs	r3, r7, #16
   27916:	469c      	mov	ip, r3
   27918:	042a      	lsls	r2, r5, #16
   2791a:	0c12      	lsrs	r2, r2, #16
   2791c:	0c2b      	lsrs	r3, r5, #16
   2791e:	0014      	movs	r4, r2
   27920:	4660      	mov	r0, ip
   27922:	4665      	mov	r5, ip
   27924:	043f      	lsls	r7, r7, #16
   27926:	0c3f      	lsrs	r7, r7, #16
   27928:	437c      	muls	r4, r7
   2792a:	4342      	muls	r2, r0
   2792c:	435d      	muls	r5, r3
   2792e:	437b      	muls	r3, r7
   27930:	0c27      	lsrs	r7, r4, #16
   27932:	189b      	adds	r3, r3, r2
   27934:	18ff      	adds	r7, r7, r3
   27936:	42ba      	cmp	r2, r7
   27938:	d903      	bls.n	27942 <__aeabi_fmul+0x15a>
   2793a:	2380      	movs	r3, #128	; 0x80
   2793c:	025b      	lsls	r3, r3, #9
   2793e:	469c      	mov	ip, r3
   27940:	4465      	add	r5, ip
   27942:	0424      	lsls	r4, r4, #16
   27944:	043a      	lsls	r2, r7, #16
   27946:	0c24      	lsrs	r4, r4, #16
   27948:	1912      	adds	r2, r2, r4
   2794a:	0193      	lsls	r3, r2, #6
   2794c:	1e5c      	subs	r4, r3, #1
   2794e:	41a3      	sbcs	r3, r4
   27950:	0c3f      	lsrs	r7, r7, #16
   27952:	0e92      	lsrs	r2, r2, #26
   27954:	197d      	adds	r5, r7, r5
   27956:	431a      	orrs	r2, r3
   27958:	01ad      	lsls	r5, r5, #6
   2795a:	4315      	orrs	r5, r2
   2795c:	012b      	lsls	r3, r5, #4
   2795e:	d504      	bpl.n	2796a <__aeabi_fmul+0x182>
   27960:	2301      	movs	r3, #1
   27962:	465e      	mov	r6, fp
   27964:	086a      	lsrs	r2, r5, #1
   27966:	401d      	ands	r5, r3
   27968:	4315      	orrs	r5, r2
   2796a:	0032      	movs	r2, r6
   2796c:	327f      	adds	r2, #127	; 0x7f
   2796e:	2a00      	cmp	r2, #0
   27970:	dd25      	ble.n	279be <__aeabi_fmul+0x1d6>
   27972:	076b      	lsls	r3, r5, #29
   27974:	d004      	beq.n	27980 <__aeabi_fmul+0x198>
   27976:	230f      	movs	r3, #15
   27978:	402b      	ands	r3, r5
   2797a:	2b04      	cmp	r3, #4
   2797c:	d000      	beq.n	27980 <__aeabi_fmul+0x198>
   2797e:	3504      	adds	r5, #4
   27980:	012b      	lsls	r3, r5, #4
   27982:	d503      	bpl.n	2798c <__aeabi_fmul+0x1a4>
   27984:	0032      	movs	r2, r6
   27986:	4b27      	ldr	r3, [pc, #156]	; (27a24 <__aeabi_fmul+0x23c>)
   27988:	3280      	adds	r2, #128	; 0x80
   2798a:	401d      	ands	r5, r3
   2798c:	2afe      	cmp	r2, #254	; 0xfe
   2798e:	dc94      	bgt.n	278ba <__aeabi_fmul+0xd2>
   27990:	2401      	movs	r4, #1
   27992:	01a8      	lsls	r0, r5, #6
   27994:	0a40      	lsrs	r0, r0, #9
   27996:	b2d2      	uxtb	r2, r2
   27998:	400c      	ands	r4, r1
   2799a:	e76f      	b.n	2787c <__aeabi_fmul+0x94>
   2799c:	2080      	movs	r0, #128	; 0x80
   2799e:	03c0      	lsls	r0, r0, #15
   279a0:	4207      	tst	r7, r0
   279a2:	d007      	beq.n	279b4 <__aeabi_fmul+0x1cc>
   279a4:	4205      	tst	r5, r0
   279a6:	d105      	bne.n	279b4 <__aeabi_fmul+0x1cc>
   279a8:	4328      	orrs	r0, r5
   279aa:	0240      	lsls	r0, r0, #9
   279ac:	0a40      	lsrs	r0, r0, #9
   279ae:	4644      	mov	r4, r8
   279b0:	22ff      	movs	r2, #255	; 0xff
   279b2:	e763      	b.n	2787c <__aeabi_fmul+0x94>
   279b4:	4338      	orrs	r0, r7
   279b6:	0240      	lsls	r0, r0, #9
   279b8:	0a40      	lsrs	r0, r0, #9
   279ba:	22ff      	movs	r2, #255	; 0xff
   279bc:	e75e      	b.n	2787c <__aeabi_fmul+0x94>
   279be:	2401      	movs	r4, #1
   279c0:	1aa3      	subs	r3, r4, r2
   279c2:	2b1b      	cmp	r3, #27
   279c4:	dd05      	ble.n	279d2 <__aeabi_fmul+0x1ea>
   279c6:	400c      	ands	r4, r1
   279c8:	2200      	movs	r2, #0
   279ca:	2000      	movs	r0, #0
   279cc:	e756      	b.n	2787c <__aeabi_fmul+0x94>
   279ce:	465e      	mov	r6, fp
   279d0:	e7cb      	b.n	2796a <__aeabi_fmul+0x182>
   279d2:	002a      	movs	r2, r5
   279d4:	2020      	movs	r0, #32
   279d6:	40da      	lsrs	r2, r3
   279d8:	1ac3      	subs	r3, r0, r3
   279da:	409d      	lsls	r5, r3
   279dc:	002b      	movs	r3, r5
   279de:	1e5d      	subs	r5, r3, #1
   279e0:	41ab      	sbcs	r3, r5
   279e2:	4313      	orrs	r3, r2
   279e4:	075a      	lsls	r2, r3, #29
   279e6:	d004      	beq.n	279f2 <__aeabi_fmul+0x20a>
   279e8:	220f      	movs	r2, #15
   279ea:	401a      	ands	r2, r3
   279ec:	2a04      	cmp	r2, #4
   279ee:	d000      	beq.n	279f2 <__aeabi_fmul+0x20a>
   279f0:	3304      	adds	r3, #4
   279f2:	015a      	lsls	r2, r3, #5
   279f4:	d504      	bpl.n	27a00 <__aeabi_fmul+0x218>
   279f6:	2401      	movs	r4, #1
   279f8:	2201      	movs	r2, #1
   279fa:	400c      	ands	r4, r1
   279fc:	2000      	movs	r0, #0
   279fe:	e73d      	b.n	2787c <__aeabi_fmul+0x94>
   27a00:	2401      	movs	r4, #1
   27a02:	019b      	lsls	r3, r3, #6
   27a04:	0a58      	lsrs	r0, r3, #9
   27a06:	400c      	ands	r4, r1
   27a08:	2200      	movs	r2, #0
   27a0a:	e737      	b.n	2787c <__aeabi_fmul+0x94>
   27a0c:	2080      	movs	r0, #128	; 0x80
   27a0e:	2401      	movs	r4, #1
   27a10:	03c0      	lsls	r0, r0, #15
   27a12:	4328      	orrs	r0, r5
   27a14:	0240      	lsls	r0, r0, #9
   27a16:	0a40      	lsrs	r0, r0, #9
   27a18:	400c      	ands	r4, r1
   27a1a:	22ff      	movs	r2, #255	; 0xff
   27a1c:	e72e      	b.n	2787c <__aeabi_fmul+0x94>
   27a1e:	46c0      	nop			; (mov r8, r8)
   27a20:	0002b8d0 	.word	0x0002b8d0
   27a24:	f7ffffff 	.word	0xf7ffffff

00027a28 <__aeabi_i2f>:
   27a28:	b570      	push	{r4, r5, r6, lr}
   27a2a:	2800      	cmp	r0, #0
   27a2c:	d030      	beq.n	27a90 <__aeabi_i2f+0x68>
   27a2e:	17c3      	asrs	r3, r0, #31
   27a30:	18c4      	adds	r4, r0, r3
   27a32:	405c      	eors	r4, r3
   27a34:	0fc5      	lsrs	r5, r0, #31
   27a36:	0020      	movs	r0, r4
   27a38:	f001 fe86 	bl	29748 <__clzsi2>
   27a3c:	239e      	movs	r3, #158	; 0x9e
   27a3e:	1a1b      	subs	r3, r3, r0
   27a40:	2b96      	cmp	r3, #150	; 0x96
   27a42:	dc0d      	bgt.n	27a60 <__aeabi_i2f+0x38>
   27a44:	2296      	movs	r2, #150	; 0x96
   27a46:	1ad2      	subs	r2, r2, r3
   27a48:	4094      	lsls	r4, r2
   27a4a:	002a      	movs	r2, r5
   27a4c:	0264      	lsls	r4, r4, #9
   27a4e:	0a64      	lsrs	r4, r4, #9
   27a50:	b2db      	uxtb	r3, r3
   27a52:	0264      	lsls	r4, r4, #9
   27a54:	05db      	lsls	r3, r3, #23
   27a56:	0a60      	lsrs	r0, r4, #9
   27a58:	07d2      	lsls	r2, r2, #31
   27a5a:	4318      	orrs	r0, r3
   27a5c:	4310      	orrs	r0, r2
   27a5e:	bd70      	pop	{r4, r5, r6, pc}
   27a60:	2b99      	cmp	r3, #153	; 0x99
   27a62:	dc19      	bgt.n	27a98 <__aeabi_i2f+0x70>
   27a64:	2299      	movs	r2, #153	; 0x99
   27a66:	1ad2      	subs	r2, r2, r3
   27a68:	2a00      	cmp	r2, #0
   27a6a:	dd29      	ble.n	27ac0 <__aeabi_i2f+0x98>
   27a6c:	4094      	lsls	r4, r2
   27a6e:	0022      	movs	r2, r4
   27a70:	4c14      	ldr	r4, [pc, #80]	; (27ac4 <__aeabi_i2f+0x9c>)
   27a72:	4014      	ands	r4, r2
   27a74:	0751      	lsls	r1, r2, #29
   27a76:	d004      	beq.n	27a82 <__aeabi_i2f+0x5a>
   27a78:	210f      	movs	r1, #15
   27a7a:	400a      	ands	r2, r1
   27a7c:	2a04      	cmp	r2, #4
   27a7e:	d000      	beq.n	27a82 <__aeabi_i2f+0x5a>
   27a80:	3404      	adds	r4, #4
   27a82:	0162      	lsls	r2, r4, #5
   27a84:	d413      	bmi.n	27aae <__aeabi_i2f+0x86>
   27a86:	01a4      	lsls	r4, r4, #6
   27a88:	0a64      	lsrs	r4, r4, #9
   27a8a:	b2db      	uxtb	r3, r3
   27a8c:	002a      	movs	r2, r5
   27a8e:	e7e0      	b.n	27a52 <__aeabi_i2f+0x2a>
   27a90:	2200      	movs	r2, #0
   27a92:	2300      	movs	r3, #0
   27a94:	2400      	movs	r4, #0
   27a96:	e7dc      	b.n	27a52 <__aeabi_i2f+0x2a>
   27a98:	2205      	movs	r2, #5
   27a9a:	0021      	movs	r1, r4
   27a9c:	1a12      	subs	r2, r2, r0
   27a9e:	40d1      	lsrs	r1, r2
   27aa0:	22b9      	movs	r2, #185	; 0xb9
   27aa2:	1ad2      	subs	r2, r2, r3
   27aa4:	4094      	lsls	r4, r2
   27aa6:	1e62      	subs	r2, r4, #1
   27aa8:	4194      	sbcs	r4, r2
   27aaa:	430c      	orrs	r4, r1
   27aac:	e7da      	b.n	27a64 <__aeabi_i2f+0x3c>
   27aae:	4b05      	ldr	r3, [pc, #20]	; (27ac4 <__aeabi_i2f+0x9c>)
   27ab0:	002a      	movs	r2, r5
   27ab2:	401c      	ands	r4, r3
   27ab4:	239f      	movs	r3, #159	; 0x9f
   27ab6:	01a4      	lsls	r4, r4, #6
   27ab8:	1a1b      	subs	r3, r3, r0
   27aba:	0a64      	lsrs	r4, r4, #9
   27abc:	b2db      	uxtb	r3, r3
   27abe:	e7c8      	b.n	27a52 <__aeabi_i2f+0x2a>
   27ac0:	0022      	movs	r2, r4
   27ac2:	e7d5      	b.n	27a70 <__aeabi_i2f+0x48>
   27ac4:	fbffffff 	.word	0xfbffffff

00027ac8 <__aeabi_ui2f>:
   27ac8:	b510      	push	{r4, lr}
   27aca:	1e04      	subs	r4, r0, #0
   27acc:	d027      	beq.n	27b1e <__aeabi_ui2f+0x56>
   27ace:	f001 fe3b 	bl	29748 <__clzsi2>
   27ad2:	239e      	movs	r3, #158	; 0x9e
   27ad4:	1a1b      	subs	r3, r3, r0
   27ad6:	2b96      	cmp	r3, #150	; 0x96
   27ad8:	dc0a      	bgt.n	27af0 <__aeabi_ui2f+0x28>
   27ada:	2296      	movs	r2, #150	; 0x96
   27adc:	1ad2      	subs	r2, r2, r3
   27ade:	4094      	lsls	r4, r2
   27ae0:	0264      	lsls	r4, r4, #9
   27ae2:	0a64      	lsrs	r4, r4, #9
   27ae4:	b2db      	uxtb	r3, r3
   27ae6:	0264      	lsls	r4, r4, #9
   27ae8:	05db      	lsls	r3, r3, #23
   27aea:	0a60      	lsrs	r0, r4, #9
   27aec:	4318      	orrs	r0, r3
   27aee:	bd10      	pop	{r4, pc}
   27af0:	2b99      	cmp	r3, #153	; 0x99
   27af2:	dc17      	bgt.n	27b24 <__aeabi_ui2f+0x5c>
   27af4:	2299      	movs	r2, #153	; 0x99
   27af6:	1ad2      	subs	r2, r2, r3
   27af8:	2a00      	cmp	r2, #0
   27afa:	dd27      	ble.n	27b4c <__aeabi_ui2f+0x84>
   27afc:	4094      	lsls	r4, r2
   27afe:	0022      	movs	r2, r4
   27b00:	4c13      	ldr	r4, [pc, #76]	; (27b50 <__aeabi_ui2f+0x88>)
   27b02:	4014      	ands	r4, r2
   27b04:	0751      	lsls	r1, r2, #29
   27b06:	d004      	beq.n	27b12 <__aeabi_ui2f+0x4a>
   27b08:	210f      	movs	r1, #15
   27b0a:	400a      	ands	r2, r1
   27b0c:	2a04      	cmp	r2, #4
   27b0e:	d000      	beq.n	27b12 <__aeabi_ui2f+0x4a>
   27b10:	3404      	adds	r4, #4
   27b12:	0162      	lsls	r2, r4, #5
   27b14:	d412      	bmi.n	27b3c <__aeabi_ui2f+0x74>
   27b16:	01a4      	lsls	r4, r4, #6
   27b18:	0a64      	lsrs	r4, r4, #9
   27b1a:	b2db      	uxtb	r3, r3
   27b1c:	e7e3      	b.n	27ae6 <__aeabi_ui2f+0x1e>
   27b1e:	2300      	movs	r3, #0
   27b20:	2400      	movs	r4, #0
   27b22:	e7e0      	b.n	27ae6 <__aeabi_ui2f+0x1e>
   27b24:	22b9      	movs	r2, #185	; 0xb9
   27b26:	0021      	movs	r1, r4
   27b28:	1ad2      	subs	r2, r2, r3
   27b2a:	4091      	lsls	r1, r2
   27b2c:	000a      	movs	r2, r1
   27b2e:	1e51      	subs	r1, r2, #1
   27b30:	418a      	sbcs	r2, r1
   27b32:	2105      	movs	r1, #5
   27b34:	1a09      	subs	r1, r1, r0
   27b36:	40cc      	lsrs	r4, r1
   27b38:	4314      	orrs	r4, r2
   27b3a:	e7db      	b.n	27af4 <__aeabi_ui2f+0x2c>
   27b3c:	4b04      	ldr	r3, [pc, #16]	; (27b50 <__aeabi_ui2f+0x88>)
   27b3e:	401c      	ands	r4, r3
   27b40:	239f      	movs	r3, #159	; 0x9f
   27b42:	01a4      	lsls	r4, r4, #6
   27b44:	1a1b      	subs	r3, r3, r0
   27b46:	0a64      	lsrs	r4, r4, #9
   27b48:	b2db      	uxtb	r3, r3
   27b4a:	e7cc      	b.n	27ae6 <__aeabi_ui2f+0x1e>
   27b4c:	0022      	movs	r2, r4
   27b4e:	e7d7      	b.n	27b00 <__aeabi_ui2f+0x38>
   27b50:	fbffffff 	.word	0xfbffffff

00027b54 <__aeabi_dadd>:
   27b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27b56:	4645      	mov	r5, r8
   27b58:	46de      	mov	lr, fp
   27b5a:	4657      	mov	r7, sl
   27b5c:	464e      	mov	r6, r9
   27b5e:	030c      	lsls	r4, r1, #12
   27b60:	b5e0      	push	{r5, r6, r7, lr}
   27b62:	004e      	lsls	r6, r1, #1
   27b64:	0fc9      	lsrs	r1, r1, #31
   27b66:	4688      	mov	r8, r1
   27b68:	000d      	movs	r5, r1
   27b6a:	0a61      	lsrs	r1, r4, #9
   27b6c:	0f44      	lsrs	r4, r0, #29
   27b6e:	430c      	orrs	r4, r1
   27b70:	00c7      	lsls	r7, r0, #3
   27b72:	0319      	lsls	r1, r3, #12
   27b74:	0058      	lsls	r0, r3, #1
   27b76:	0fdb      	lsrs	r3, r3, #31
   27b78:	469b      	mov	fp, r3
   27b7a:	0a4b      	lsrs	r3, r1, #9
   27b7c:	0f51      	lsrs	r1, r2, #29
   27b7e:	430b      	orrs	r3, r1
   27b80:	0d76      	lsrs	r6, r6, #21
   27b82:	0d40      	lsrs	r0, r0, #21
   27b84:	0019      	movs	r1, r3
   27b86:	00d2      	lsls	r2, r2, #3
   27b88:	45d8      	cmp	r8, fp
   27b8a:	d100      	bne.n	27b8e <__aeabi_dadd+0x3a>
   27b8c:	e0ae      	b.n	27cec <__aeabi_dadd+0x198>
   27b8e:	1a35      	subs	r5, r6, r0
   27b90:	2d00      	cmp	r5, #0
   27b92:	dc00      	bgt.n	27b96 <__aeabi_dadd+0x42>
   27b94:	e0f6      	b.n	27d84 <__aeabi_dadd+0x230>
   27b96:	2800      	cmp	r0, #0
   27b98:	d10f      	bne.n	27bba <__aeabi_dadd+0x66>
   27b9a:	4313      	orrs	r3, r2
   27b9c:	d100      	bne.n	27ba0 <__aeabi_dadd+0x4c>
   27b9e:	e0db      	b.n	27d58 <__aeabi_dadd+0x204>
   27ba0:	1e6b      	subs	r3, r5, #1
   27ba2:	2b00      	cmp	r3, #0
   27ba4:	d000      	beq.n	27ba8 <__aeabi_dadd+0x54>
   27ba6:	e137      	b.n	27e18 <__aeabi_dadd+0x2c4>
   27ba8:	1aba      	subs	r2, r7, r2
   27baa:	4297      	cmp	r7, r2
   27bac:	41bf      	sbcs	r7, r7
   27bae:	1a64      	subs	r4, r4, r1
   27bb0:	427f      	negs	r7, r7
   27bb2:	1be4      	subs	r4, r4, r7
   27bb4:	2601      	movs	r6, #1
   27bb6:	0017      	movs	r7, r2
   27bb8:	e024      	b.n	27c04 <__aeabi_dadd+0xb0>
   27bba:	4bc6      	ldr	r3, [pc, #792]	; (27ed4 <__aeabi_dadd+0x380>)
   27bbc:	429e      	cmp	r6, r3
   27bbe:	d04d      	beq.n	27c5c <__aeabi_dadd+0x108>
   27bc0:	2380      	movs	r3, #128	; 0x80
   27bc2:	041b      	lsls	r3, r3, #16
   27bc4:	4319      	orrs	r1, r3
   27bc6:	2d38      	cmp	r5, #56	; 0x38
   27bc8:	dd00      	ble.n	27bcc <__aeabi_dadd+0x78>
   27bca:	e107      	b.n	27ddc <__aeabi_dadd+0x288>
   27bcc:	2d1f      	cmp	r5, #31
   27bce:	dd00      	ble.n	27bd2 <__aeabi_dadd+0x7e>
   27bd0:	e138      	b.n	27e44 <__aeabi_dadd+0x2f0>
   27bd2:	2020      	movs	r0, #32
   27bd4:	1b43      	subs	r3, r0, r5
   27bd6:	469a      	mov	sl, r3
   27bd8:	000b      	movs	r3, r1
   27bda:	4650      	mov	r0, sl
   27bdc:	4083      	lsls	r3, r0
   27bde:	4699      	mov	r9, r3
   27be0:	0013      	movs	r3, r2
   27be2:	4648      	mov	r0, r9
   27be4:	40eb      	lsrs	r3, r5
   27be6:	4318      	orrs	r0, r3
   27be8:	0003      	movs	r3, r0
   27bea:	4650      	mov	r0, sl
   27bec:	4082      	lsls	r2, r0
   27bee:	1e50      	subs	r0, r2, #1
   27bf0:	4182      	sbcs	r2, r0
   27bf2:	40e9      	lsrs	r1, r5
   27bf4:	431a      	orrs	r2, r3
   27bf6:	1aba      	subs	r2, r7, r2
   27bf8:	1a61      	subs	r1, r4, r1
   27bfa:	4297      	cmp	r7, r2
   27bfc:	41a4      	sbcs	r4, r4
   27bfe:	0017      	movs	r7, r2
   27c00:	4264      	negs	r4, r4
   27c02:	1b0c      	subs	r4, r1, r4
   27c04:	0223      	lsls	r3, r4, #8
   27c06:	d562      	bpl.n	27cce <__aeabi_dadd+0x17a>
   27c08:	0264      	lsls	r4, r4, #9
   27c0a:	0a65      	lsrs	r5, r4, #9
   27c0c:	2d00      	cmp	r5, #0
   27c0e:	d100      	bne.n	27c12 <__aeabi_dadd+0xbe>
   27c10:	e0df      	b.n	27dd2 <__aeabi_dadd+0x27e>
   27c12:	0028      	movs	r0, r5
   27c14:	f001 fd98 	bl	29748 <__clzsi2>
   27c18:	0003      	movs	r3, r0
   27c1a:	3b08      	subs	r3, #8
   27c1c:	2b1f      	cmp	r3, #31
   27c1e:	dd00      	ble.n	27c22 <__aeabi_dadd+0xce>
   27c20:	e0d2      	b.n	27dc8 <__aeabi_dadd+0x274>
   27c22:	2220      	movs	r2, #32
   27c24:	003c      	movs	r4, r7
   27c26:	1ad2      	subs	r2, r2, r3
   27c28:	409d      	lsls	r5, r3
   27c2a:	40d4      	lsrs	r4, r2
   27c2c:	409f      	lsls	r7, r3
   27c2e:	4325      	orrs	r5, r4
   27c30:	429e      	cmp	r6, r3
   27c32:	dd00      	ble.n	27c36 <__aeabi_dadd+0xe2>
   27c34:	e0c4      	b.n	27dc0 <__aeabi_dadd+0x26c>
   27c36:	1b9e      	subs	r6, r3, r6
   27c38:	1c73      	adds	r3, r6, #1
   27c3a:	2b1f      	cmp	r3, #31
   27c3c:	dd00      	ble.n	27c40 <__aeabi_dadd+0xec>
   27c3e:	e0f1      	b.n	27e24 <__aeabi_dadd+0x2d0>
   27c40:	2220      	movs	r2, #32
   27c42:	0038      	movs	r0, r7
   27c44:	0029      	movs	r1, r5
   27c46:	1ad2      	subs	r2, r2, r3
   27c48:	40d8      	lsrs	r0, r3
   27c4a:	4091      	lsls	r1, r2
   27c4c:	4097      	lsls	r7, r2
   27c4e:	002c      	movs	r4, r5
   27c50:	4301      	orrs	r1, r0
   27c52:	1e78      	subs	r0, r7, #1
   27c54:	4187      	sbcs	r7, r0
   27c56:	40dc      	lsrs	r4, r3
   27c58:	2600      	movs	r6, #0
   27c5a:	430f      	orrs	r7, r1
   27c5c:	077b      	lsls	r3, r7, #29
   27c5e:	d009      	beq.n	27c74 <__aeabi_dadd+0x120>
   27c60:	230f      	movs	r3, #15
   27c62:	403b      	ands	r3, r7
   27c64:	2b04      	cmp	r3, #4
   27c66:	d005      	beq.n	27c74 <__aeabi_dadd+0x120>
   27c68:	1d3b      	adds	r3, r7, #4
   27c6a:	42bb      	cmp	r3, r7
   27c6c:	41bf      	sbcs	r7, r7
   27c6e:	427f      	negs	r7, r7
   27c70:	19e4      	adds	r4, r4, r7
   27c72:	001f      	movs	r7, r3
   27c74:	0223      	lsls	r3, r4, #8
   27c76:	d52c      	bpl.n	27cd2 <__aeabi_dadd+0x17e>
   27c78:	4b96      	ldr	r3, [pc, #600]	; (27ed4 <__aeabi_dadd+0x380>)
   27c7a:	3601      	adds	r6, #1
   27c7c:	429e      	cmp	r6, r3
   27c7e:	d100      	bne.n	27c82 <__aeabi_dadd+0x12e>
   27c80:	e09a      	b.n	27db8 <__aeabi_dadd+0x264>
   27c82:	4645      	mov	r5, r8
   27c84:	4b94      	ldr	r3, [pc, #592]	; (27ed8 <__aeabi_dadd+0x384>)
   27c86:	08ff      	lsrs	r7, r7, #3
   27c88:	401c      	ands	r4, r3
   27c8a:	0760      	lsls	r0, r4, #29
   27c8c:	0576      	lsls	r6, r6, #21
   27c8e:	0264      	lsls	r4, r4, #9
   27c90:	4307      	orrs	r7, r0
   27c92:	0b24      	lsrs	r4, r4, #12
   27c94:	0d76      	lsrs	r6, r6, #21
   27c96:	2100      	movs	r1, #0
   27c98:	0324      	lsls	r4, r4, #12
   27c9a:	0b23      	lsrs	r3, r4, #12
   27c9c:	0d0c      	lsrs	r4, r1, #20
   27c9e:	4a8f      	ldr	r2, [pc, #572]	; (27edc <__aeabi_dadd+0x388>)
   27ca0:	0524      	lsls	r4, r4, #20
   27ca2:	431c      	orrs	r4, r3
   27ca4:	4014      	ands	r4, r2
   27ca6:	0533      	lsls	r3, r6, #20
   27ca8:	4323      	orrs	r3, r4
   27caa:	005b      	lsls	r3, r3, #1
   27cac:	07ed      	lsls	r5, r5, #31
   27cae:	085b      	lsrs	r3, r3, #1
   27cb0:	432b      	orrs	r3, r5
   27cb2:	0038      	movs	r0, r7
   27cb4:	0019      	movs	r1, r3
   27cb6:	bc3c      	pop	{r2, r3, r4, r5}
   27cb8:	4690      	mov	r8, r2
   27cba:	4699      	mov	r9, r3
   27cbc:	46a2      	mov	sl, r4
   27cbe:	46ab      	mov	fp, r5
   27cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27cc2:	4664      	mov	r4, ip
   27cc4:	4304      	orrs	r4, r0
   27cc6:	d100      	bne.n	27cca <__aeabi_dadd+0x176>
   27cc8:	e211      	b.n	280ee <__aeabi_dadd+0x59a>
   27cca:	0004      	movs	r4, r0
   27ccc:	4667      	mov	r7, ip
   27cce:	077b      	lsls	r3, r7, #29
   27cd0:	d1c6      	bne.n	27c60 <__aeabi_dadd+0x10c>
   27cd2:	4645      	mov	r5, r8
   27cd4:	0760      	lsls	r0, r4, #29
   27cd6:	08ff      	lsrs	r7, r7, #3
   27cd8:	4307      	orrs	r7, r0
   27cda:	08e4      	lsrs	r4, r4, #3
   27cdc:	4b7d      	ldr	r3, [pc, #500]	; (27ed4 <__aeabi_dadd+0x380>)
   27cde:	429e      	cmp	r6, r3
   27ce0:	d030      	beq.n	27d44 <__aeabi_dadd+0x1f0>
   27ce2:	0324      	lsls	r4, r4, #12
   27ce4:	0576      	lsls	r6, r6, #21
   27ce6:	0b24      	lsrs	r4, r4, #12
   27ce8:	0d76      	lsrs	r6, r6, #21
   27cea:	e7d4      	b.n	27c96 <__aeabi_dadd+0x142>
   27cec:	1a33      	subs	r3, r6, r0
   27cee:	469a      	mov	sl, r3
   27cf0:	2b00      	cmp	r3, #0
   27cf2:	dd78      	ble.n	27de6 <__aeabi_dadd+0x292>
   27cf4:	2800      	cmp	r0, #0
   27cf6:	d031      	beq.n	27d5c <__aeabi_dadd+0x208>
   27cf8:	4876      	ldr	r0, [pc, #472]	; (27ed4 <__aeabi_dadd+0x380>)
   27cfa:	4286      	cmp	r6, r0
   27cfc:	d0ae      	beq.n	27c5c <__aeabi_dadd+0x108>
   27cfe:	2080      	movs	r0, #128	; 0x80
   27d00:	0400      	lsls	r0, r0, #16
   27d02:	4301      	orrs	r1, r0
   27d04:	4653      	mov	r3, sl
   27d06:	2b38      	cmp	r3, #56	; 0x38
   27d08:	dc00      	bgt.n	27d0c <__aeabi_dadd+0x1b8>
   27d0a:	e0e9      	b.n	27ee0 <__aeabi_dadd+0x38c>
   27d0c:	430a      	orrs	r2, r1
   27d0e:	1e51      	subs	r1, r2, #1
   27d10:	418a      	sbcs	r2, r1
   27d12:	2100      	movs	r1, #0
   27d14:	19d2      	adds	r2, r2, r7
   27d16:	42ba      	cmp	r2, r7
   27d18:	41bf      	sbcs	r7, r7
   27d1a:	1909      	adds	r1, r1, r4
   27d1c:	427c      	negs	r4, r7
   27d1e:	0017      	movs	r7, r2
   27d20:	190c      	adds	r4, r1, r4
   27d22:	0223      	lsls	r3, r4, #8
   27d24:	d5d3      	bpl.n	27cce <__aeabi_dadd+0x17a>
   27d26:	4b6b      	ldr	r3, [pc, #428]	; (27ed4 <__aeabi_dadd+0x380>)
   27d28:	3601      	adds	r6, #1
   27d2a:	429e      	cmp	r6, r3
   27d2c:	d100      	bne.n	27d30 <__aeabi_dadd+0x1dc>
   27d2e:	e13a      	b.n	27fa6 <__aeabi_dadd+0x452>
   27d30:	2001      	movs	r0, #1
   27d32:	4b69      	ldr	r3, [pc, #420]	; (27ed8 <__aeabi_dadd+0x384>)
   27d34:	401c      	ands	r4, r3
   27d36:	087b      	lsrs	r3, r7, #1
   27d38:	4007      	ands	r7, r0
   27d3a:	431f      	orrs	r7, r3
   27d3c:	07e0      	lsls	r0, r4, #31
   27d3e:	4307      	orrs	r7, r0
   27d40:	0864      	lsrs	r4, r4, #1
   27d42:	e78b      	b.n	27c5c <__aeabi_dadd+0x108>
   27d44:	0023      	movs	r3, r4
   27d46:	433b      	orrs	r3, r7
   27d48:	d100      	bne.n	27d4c <__aeabi_dadd+0x1f8>
   27d4a:	e1cb      	b.n	280e4 <__aeabi_dadd+0x590>
   27d4c:	2280      	movs	r2, #128	; 0x80
   27d4e:	0312      	lsls	r2, r2, #12
   27d50:	4314      	orrs	r4, r2
   27d52:	0324      	lsls	r4, r4, #12
   27d54:	0b24      	lsrs	r4, r4, #12
   27d56:	e79e      	b.n	27c96 <__aeabi_dadd+0x142>
   27d58:	002e      	movs	r6, r5
   27d5a:	e77f      	b.n	27c5c <__aeabi_dadd+0x108>
   27d5c:	0008      	movs	r0, r1
   27d5e:	4310      	orrs	r0, r2
   27d60:	d100      	bne.n	27d64 <__aeabi_dadd+0x210>
   27d62:	e0b4      	b.n	27ece <__aeabi_dadd+0x37a>
   27d64:	1e58      	subs	r0, r3, #1
   27d66:	2800      	cmp	r0, #0
   27d68:	d000      	beq.n	27d6c <__aeabi_dadd+0x218>
   27d6a:	e0de      	b.n	27f2a <__aeabi_dadd+0x3d6>
   27d6c:	18ba      	adds	r2, r7, r2
   27d6e:	42ba      	cmp	r2, r7
   27d70:	419b      	sbcs	r3, r3
   27d72:	1864      	adds	r4, r4, r1
   27d74:	425b      	negs	r3, r3
   27d76:	18e4      	adds	r4, r4, r3
   27d78:	0017      	movs	r7, r2
   27d7a:	2601      	movs	r6, #1
   27d7c:	0223      	lsls	r3, r4, #8
   27d7e:	d5a6      	bpl.n	27cce <__aeabi_dadd+0x17a>
   27d80:	2602      	movs	r6, #2
   27d82:	e7d5      	b.n	27d30 <__aeabi_dadd+0x1dc>
   27d84:	2d00      	cmp	r5, #0
   27d86:	d16e      	bne.n	27e66 <__aeabi_dadd+0x312>
   27d88:	1c70      	adds	r0, r6, #1
   27d8a:	0540      	lsls	r0, r0, #21
   27d8c:	0d40      	lsrs	r0, r0, #21
   27d8e:	2801      	cmp	r0, #1
   27d90:	dc00      	bgt.n	27d94 <__aeabi_dadd+0x240>
   27d92:	e0f9      	b.n	27f88 <__aeabi_dadd+0x434>
   27d94:	1ab8      	subs	r0, r7, r2
   27d96:	4684      	mov	ip, r0
   27d98:	4287      	cmp	r7, r0
   27d9a:	4180      	sbcs	r0, r0
   27d9c:	1ae5      	subs	r5, r4, r3
   27d9e:	4240      	negs	r0, r0
   27da0:	1a2d      	subs	r5, r5, r0
   27da2:	0228      	lsls	r0, r5, #8
   27da4:	d400      	bmi.n	27da8 <__aeabi_dadd+0x254>
   27da6:	e089      	b.n	27ebc <__aeabi_dadd+0x368>
   27da8:	1bd7      	subs	r7, r2, r7
   27daa:	42ba      	cmp	r2, r7
   27dac:	4192      	sbcs	r2, r2
   27dae:	1b1c      	subs	r4, r3, r4
   27db0:	4252      	negs	r2, r2
   27db2:	1aa5      	subs	r5, r4, r2
   27db4:	46d8      	mov	r8, fp
   27db6:	e729      	b.n	27c0c <__aeabi_dadd+0xb8>
   27db8:	4645      	mov	r5, r8
   27dba:	2400      	movs	r4, #0
   27dbc:	2700      	movs	r7, #0
   27dbe:	e76a      	b.n	27c96 <__aeabi_dadd+0x142>
   27dc0:	4c45      	ldr	r4, [pc, #276]	; (27ed8 <__aeabi_dadd+0x384>)
   27dc2:	1af6      	subs	r6, r6, r3
   27dc4:	402c      	ands	r4, r5
   27dc6:	e749      	b.n	27c5c <__aeabi_dadd+0x108>
   27dc8:	003d      	movs	r5, r7
   27dca:	3828      	subs	r0, #40	; 0x28
   27dcc:	4085      	lsls	r5, r0
   27dce:	2700      	movs	r7, #0
   27dd0:	e72e      	b.n	27c30 <__aeabi_dadd+0xdc>
   27dd2:	0038      	movs	r0, r7
   27dd4:	f001 fcb8 	bl	29748 <__clzsi2>
   27dd8:	3020      	adds	r0, #32
   27dda:	e71d      	b.n	27c18 <__aeabi_dadd+0xc4>
   27ddc:	430a      	orrs	r2, r1
   27dde:	1e51      	subs	r1, r2, #1
   27de0:	418a      	sbcs	r2, r1
   27de2:	2100      	movs	r1, #0
   27de4:	e707      	b.n	27bf6 <__aeabi_dadd+0xa2>
   27de6:	2b00      	cmp	r3, #0
   27de8:	d000      	beq.n	27dec <__aeabi_dadd+0x298>
   27dea:	e0f3      	b.n	27fd4 <__aeabi_dadd+0x480>
   27dec:	1c70      	adds	r0, r6, #1
   27dee:	0543      	lsls	r3, r0, #21
   27df0:	0d5b      	lsrs	r3, r3, #21
   27df2:	2b01      	cmp	r3, #1
   27df4:	dc00      	bgt.n	27df8 <__aeabi_dadd+0x2a4>
   27df6:	e0ad      	b.n	27f54 <__aeabi_dadd+0x400>
   27df8:	4b36      	ldr	r3, [pc, #216]	; (27ed4 <__aeabi_dadd+0x380>)
   27dfa:	4298      	cmp	r0, r3
   27dfc:	d100      	bne.n	27e00 <__aeabi_dadd+0x2ac>
   27dfe:	e0d1      	b.n	27fa4 <__aeabi_dadd+0x450>
   27e00:	18ba      	adds	r2, r7, r2
   27e02:	42ba      	cmp	r2, r7
   27e04:	41bf      	sbcs	r7, r7
   27e06:	1864      	adds	r4, r4, r1
   27e08:	427f      	negs	r7, r7
   27e0a:	19e4      	adds	r4, r4, r7
   27e0c:	07e7      	lsls	r7, r4, #31
   27e0e:	0852      	lsrs	r2, r2, #1
   27e10:	4317      	orrs	r7, r2
   27e12:	0864      	lsrs	r4, r4, #1
   27e14:	0006      	movs	r6, r0
   27e16:	e721      	b.n	27c5c <__aeabi_dadd+0x108>
   27e18:	482e      	ldr	r0, [pc, #184]	; (27ed4 <__aeabi_dadd+0x380>)
   27e1a:	4285      	cmp	r5, r0
   27e1c:	d100      	bne.n	27e20 <__aeabi_dadd+0x2cc>
   27e1e:	e093      	b.n	27f48 <__aeabi_dadd+0x3f4>
   27e20:	001d      	movs	r5, r3
   27e22:	e6d0      	b.n	27bc6 <__aeabi_dadd+0x72>
   27e24:	0029      	movs	r1, r5
   27e26:	3e1f      	subs	r6, #31
   27e28:	40f1      	lsrs	r1, r6
   27e2a:	2b20      	cmp	r3, #32
   27e2c:	d100      	bne.n	27e30 <__aeabi_dadd+0x2dc>
   27e2e:	e08d      	b.n	27f4c <__aeabi_dadd+0x3f8>
   27e30:	2240      	movs	r2, #64	; 0x40
   27e32:	1ad3      	subs	r3, r2, r3
   27e34:	409d      	lsls	r5, r3
   27e36:	432f      	orrs	r7, r5
   27e38:	1e7d      	subs	r5, r7, #1
   27e3a:	41af      	sbcs	r7, r5
   27e3c:	2400      	movs	r4, #0
   27e3e:	430f      	orrs	r7, r1
   27e40:	2600      	movs	r6, #0
   27e42:	e744      	b.n	27cce <__aeabi_dadd+0x17a>
   27e44:	002b      	movs	r3, r5
   27e46:	0008      	movs	r0, r1
   27e48:	3b20      	subs	r3, #32
   27e4a:	40d8      	lsrs	r0, r3
   27e4c:	0003      	movs	r3, r0
   27e4e:	2d20      	cmp	r5, #32
   27e50:	d100      	bne.n	27e54 <__aeabi_dadd+0x300>
   27e52:	e07d      	b.n	27f50 <__aeabi_dadd+0x3fc>
   27e54:	2040      	movs	r0, #64	; 0x40
   27e56:	1b45      	subs	r5, r0, r5
   27e58:	40a9      	lsls	r1, r5
   27e5a:	430a      	orrs	r2, r1
   27e5c:	1e51      	subs	r1, r2, #1
   27e5e:	418a      	sbcs	r2, r1
   27e60:	2100      	movs	r1, #0
   27e62:	431a      	orrs	r2, r3
   27e64:	e6c7      	b.n	27bf6 <__aeabi_dadd+0xa2>
   27e66:	2e00      	cmp	r6, #0
   27e68:	d050      	beq.n	27f0c <__aeabi_dadd+0x3b8>
   27e6a:	4e1a      	ldr	r6, [pc, #104]	; (27ed4 <__aeabi_dadd+0x380>)
   27e6c:	42b0      	cmp	r0, r6
   27e6e:	d057      	beq.n	27f20 <__aeabi_dadd+0x3cc>
   27e70:	2680      	movs	r6, #128	; 0x80
   27e72:	426b      	negs	r3, r5
   27e74:	4699      	mov	r9, r3
   27e76:	0436      	lsls	r6, r6, #16
   27e78:	4334      	orrs	r4, r6
   27e7a:	464b      	mov	r3, r9
   27e7c:	2b38      	cmp	r3, #56	; 0x38
   27e7e:	dd00      	ble.n	27e82 <__aeabi_dadd+0x32e>
   27e80:	e0d6      	b.n	28030 <__aeabi_dadd+0x4dc>
   27e82:	2b1f      	cmp	r3, #31
   27e84:	dd00      	ble.n	27e88 <__aeabi_dadd+0x334>
   27e86:	e135      	b.n	280f4 <__aeabi_dadd+0x5a0>
   27e88:	2620      	movs	r6, #32
   27e8a:	1af5      	subs	r5, r6, r3
   27e8c:	0026      	movs	r6, r4
   27e8e:	40ae      	lsls	r6, r5
   27e90:	46b2      	mov	sl, r6
   27e92:	003e      	movs	r6, r7
   27e94:	40de      	lsrs	r6, r3
   27e96:	46ac      	mov	ip, r5
   27e98:	0035      	movs	r5, r6
   27e9a:	4656      	mov	r6, sl
   27e9c:	432e      	orrs	r6, r5
   27e9e:	4665      	mov	r5, ip
   27ea0:	40af      	lsls	r7, r5
   27ea2:	1e7d      	subs	r5, r7, #1
   27ea4:	41af      	sbcs	r7, r5
   27ea6:	40dc      	lsrs	r4, r3
   27ea8:	4337      	orrs	r7, r6
   27eaa:	1bd7      	subs	r7, r2, r7
   27eac:	42ba      	cmp	r2, r7
   27eae:	4192      	sbcs	r2, r2
   27eb0:	1b0c      	subs	r4, r1, r4
   27eb2:	4252      	negs	r2, r2
   27eb4:	1aa4      	subs	r4, r4, r2
   27eb6:	0006      	movs	r6, r0
   27eb8:	46d8      	mov	r8, fp
   27eba:	e6a3      	b.n	27c04 <__aeabi_dadd+0xb0>
   27ebc:	4664      	mov	r4, ip
   27ebe:	4667      	mov	r7, ip
   27ec0:	432c      	orrs	r4, r5
   27ec2:	d000      	beq.n	27ec6 <__aeabi_dadd+0x372>
   27ec4:	e6a2      	b.n	27c0c <__aeabi_dadd+0xb8>
   27ec6:	2500      	movs	r5, #0
   27ec8:	2600      	movs	r6, #0
   27eca:	2700      	movs	r7, #0
   27ecc:	e706      	b.n	27cdc <__aeabi_dadd+0x188>
   27ece:	001e      	movs	r6, r3
   27ed0:	e6c4      	b.n	27c5c <__aeabi_dadd+0x108>
   27ed2:	46c0      	nop			; (mov r8, r8)
   27ed4:	000007ff 	.word	0x000007ff
   27ed8:	ff7fffff 	.word	0xff7fffff
   27edc:	800fffff 	.word	0x800fffff
   27ee0:	2b1f      	cmp	r3, #31
   27ee2:	dc63      	bgt.n	27fac <__aeabi_dadd+0x458>
   27ee4:	2020      	movs	r0, #32
   27ee6:	1ac3      	subs	r3, r0, r3
   27ee8:	0008      	movs	r0, r1
   27eea:	4098      	lsls	r0, r3
   27eec:	469c      	mov	ip, r3
   27eee:	4683      	mov	fp, r0
   27ef0:	4653      	mov	r3, sl
   27ef2:	0010      	movs	r0, r2
   27ef4:	40d8      	lsrs	r0, r3
   27ef6:	0003      	movs	r3, r0
   27ef8:	4658      	mov	r0, fp
   27efa:	4318      	orrs	r0, r3
   27efc:	4663      	mov	r3, ip
   27efe:	409a      	lsls	r2, r3
   27f00:	1e53      	subs	r3, r2, #1
   27f02:	419a      	sbcs	r2, r3
   27f04:	4653      	mov	r3, sl
   27f06:	4302      	orrs	r2, r0
   27f08:	40d9      	lsrs	r1, r3
   27f0a:	e703      	b.n	27d14 <__aeabi_dadd+0x1c0>
   27f0c:	0026      	movs	r6, r4
   27f0e:	433e      	orrs	r6, r7
   27f10:	d006      	beq.n	27f20 <__aeabi_dadd+0x3cc>
   27f12:	43eb      	mvns	r3, r5
   27f14:	4699      	mov	r9, r3
   27f16:	2b00      	cmp	r3, #0
   27f18:	d0c7      	beq.n	27eaa <__aeabi_dadd+0x356>
   27f1a:	4e94      	ldr	r6, [pc, #592]	; (2816c <__aeabi_dadd+0x618>)
   27f1c:	42b0      	cmp	r0, r6
   27f1e:	d1ac      	bne.n	27e7a <__aeabi_dadd+0x326>
   27f20:	000c      	movs	r4, r1
   27f22:	0017      	movs	r7, r2
   27f24:	0006      	movs	r6, r0
   27f26:	46d8      	mov	r8, fp
   27f28:	e698      	b.n	27c5c <__aeabi_dadd+0x108>
   27f2a:	4b90      	ldr	r3, [pc, #576]	; (2816c <__aeabi_dadd+0x618>)
   27f2c:	459a      	cmp	sl, r3
   27f2e:	d00b      	beq.n	27f48 <__aeabi_dadd+0x3f4>
   27f30:	4682      	mov	sl, r0
   27f32:	e6e7      	b.n	27d04 <__aeabi_dadd+0x1b0>
   27f34:	2800      	cmp	r0, #0
   27f36:	d000      	beq.n	27f3a <__aeabi_dadd+0x3e6>
   27f38:	e09e      	b.n	28078 <__aeabi_dadd+0x524>
   27f3a:	0018      	movs	r0, r3
   27f3c:	4310      	orrs	r0, r2
   27f3e:	d100      	bne.n	27f42 <__aeabi_dadd+0x3ee>
   27f40:	e0e9      	b.n	28116 <__aeabi_dadd+0x5c2>
   27f42:	001c      	movs	r4, r3
   27f44:	0017      	movs	r7, r2
   27f46:	46d8      	mov	r8, fp
   27f48:	4e88      	ldr	r6, [pc, #544]	; (2816c <__aeabi_dadd+0x618>)
   27f4a:	e687      	b.n	27c5c <__aeabi_dadd+0x108>
   27f4c:	2500      	movs	r5, #0
   27f4e:	e772      	b.n	27e36 <__aeabi_dadd+0x2e2>
   27f50:	2100      	movs	r1, #0
   27f52:	e782      	b.n	27e5a <__aeabi_dadd+0x306>
   27f54:	0023      	movs	r3, r4
   27f56:	433b      	orrs	r3, r7
   27f58:	2e00      	cmp	r6, #0
   27f5a:	d000      	beq.n	27f5e <__aeabi_dadd+0x40a>
   27f5c:	e0ab      	b.n	280b6 <__aeabi_dadd+0x562>
   27f5e:	2b00      	cmp	r3, #0
   27f60:	d100      	bne.n	27f64 <__aeabi_dadd+0x410>
   27f62:	e0e7      	b.n	28134 <__aeabi_dadd+0x5e0>
   27f64:	000b      	movs	r3, r1
   27f66:	4313      	orrs	r3, r2
   27f68:	d100      	bne.n	27f6c <__aeabi_dadd+0x418>
   27f6a:	e677      	b.n	27c5c <__aeabi_dadd+0x108>
   27f6c:	18ba      	adds	r2, r7, r2
   27f6e:	42ba      	cmp	r2, r7
   27f70:	41bf      	sbcs	r7, r7
   27f72:	1864      	adds	r4, r4, r1
   27f74:	427f      	negs	r7, r7
   27f76:	19e4      	adds	r4, r4, r7
   27f78:	0223      	lsls	r3, r4, #8
   27f7a:	d400      	bmi.n	27f7e <__aeabi_dadd+0x42a>
   27f7c:	e0f2      	b.n	28164 <__aeabi_dadd+0x610>
   27f7e:	4b7c      	ldr	r3, [pc, #496]	; (28170 <__aeabi_dadd+0x61c>)
   27f80:	0017      	movs	r7, r2
   27f82:	401c      	ands	r4, r3
   27f84:	0006      	movs	r6, r0
   27f86:	e669      	b.n	27c5c <__aeabi_dadd+0x108>
   27f88:	0020      	movs	r0, r4
   27f8a:	4338      	orrs	r0, r7
   27f8c:	2e00      	cmp	r6, #0
   27f8e:	d1d1      	bne.n	27f34 <__aeabi_dadd+0x3e0>
   27f90:	2800      	cmp	r0, #0
   27f92:	d15b      	bne.n	2804c <__aeabi_dadd+0x4f8>
   27f94:	001c      	movs	r4, r3
   27f96:	4314      	orrs	r4, r2
   27f98:	d100      	bne.n	27f9c <__aeabi_dadd+0x448>
   27f9a:	e0a8      	b.n	280ee <__aeabi_dadd+0x59a>
   27f9c:	001c      	movs	r4, r3
   27f9e:	0017      	movs	r7, r2
   27fa0:	46d8      	mov	r8, fp
   27fa2:	e65b      	b.n	27c5c <__aeabi_dadd+0x108>
   27fa4:	0006      	movs	r6, r0
   27fa6:	2400      	movs	r4, #0
   27fa8:	2700      	movs	r7, #0
   27faa:	e697      	b.n	27cdc <__aeabi_dadd+0x188>
   27fac:	4650      	mov	r0, sl
   27fae:	000b      	movs	r3, r1
   27fb0:	3820      	subs	r0, #32
   27fb2:	40c3      	lsrs	r3, r0
   27fb4:	4699      	mov	r9, r3
   27fb6:	4653      	mov	r3, sl
   27fb8:	2b20      	cmp	r3, #32
   27fba:	d100      	bne.n	27fbe <__aeabi_dadd+0x46a>
   27fbc:	e095      	b.n	280ea <__aeabi_dadd+0x596>
   27fbe:	2340      	movs	r3, #64	; 0x40
   27fc0:	4650      	mov	r0, sl
   27fc2:	1a1b      	subs	r3, r3, r0
   27fc4:	4099      	lsls	r1, r3
   27fc6:	430a      	orrs	r2, r1
   27fc8:	1e51      	subs	r1, r2, #1
   27fca:	418a      	sbcs	r2, r1
   27fcc:	464b      	mov	r3, r9
   27fce:	2100      	movs	r1, #0
   27fd0:	431a      	orrs	r2, r3
   27fd2:	e69f      	b.n	27d14 <__aeabi_dadd+0x1c0>
   27fd4:	2e00      	cmp	r6, #0
   27fd6:	d130      	bne.n	2803a <__aeabi_dadd+0x4e6>
   27fd8:	0026      	movs	r6, r4
   27fda:	433e      	orrs	r6, r7
   27fdc:	d067      	beq.n	280ae <__aeabi_dadd+0x55a>
   27fde:	43db      	mvns	r3, r3
   27fe0:	469a      	mov	sl, r3
   27fe2:	2b00      	cmp	r3, #0
   27fe4:	d01c      	beq.n	28020 <__aeabi_dadd+0x4cc>
   27fe6:	4e61      	ldr	r6, [pc, #388]	; (2816c <__aeabi_dadd+0x618>)
   27fe8:	42b0      	cmp	r0, r6
   27fea:	d060      	beq.n	280ae <__aeabi_dadd+0x55a>
   27fec:	4653      	mov	r3, sl
   27fee:	2b38      	cmp	r3, #56	; 0x38
   27ff0:	dd00      	ble.n	27ff4 <__aeabi_dadd+0x4a0>
   27ff2:	e096      	b.n	28122 <__aeabi_dadd+0x5ce>
   27ff4:	2b1f      	cmp	r3, #31
   27ff6:	dd00      	ble.n	27ffa <__aeabi_dadd+0x4a6>
   27ff8:	e09f      	b.n	2813a <__aeabi_dadd+0x5e6>
   27ffa:	2620      	movs	r6, #32
   27ffc:	1af3      	subs	r3, r6, r3
   27ffe:	0026      	movs	r6, r4
   28000:	409e      	lsls	r6, r3
   28002:	469c      	mov	ip, r3
   28004:	46b3      	mov	fp, r6
   28006:	4653      	mov	r3, sl
   28008:	003e      	movs	r6, r7
   2800a:	40de      	lsrs	r6, r3
   2800c:	0033      	movs	r3, r6
   2800e:	465e      	mov	r6, fp
   28010:	431e      	orrs	r6, r3
   28012:	4663      	mov	r3, ip
   28014:	409f      	lsls	r7, r3
   28016:	1e7b      	subs	r3, r7, #1
   28018:	419f      	sbcs	r7, r3
   2801a:	4653      	mov	r3, sl
   2801c:	40dc      	lsrs	r4, r3
   2801e:	4337      	orrs	r7, r6
   28020:	18bf      	adds	r7, r7, r2
   28022:	4297      	cmp	r7, r2
   28024:	4192      	sbcs	r2, r2
   28026:	1864      	adds	r4, r4, r1
   28028:	4252      	negs	r2, r2
   2802a:	18a4      	adds	r4, r4, r2
   2802c:	0006      	movs	r6, r0
   2802e:	e678      	b.n	27d22 <__aeabi_dadd+0x1ce>
   28030:	4327      	orrs	r7, r4
   28032:	1e7c      	subs	r4, r7, #1
   28034:	41a7      	sbcs	r7, r4
   28036:	2400      	movs	r4, #0
   28038:	e737      	b.n	27eaa <__aeabi_dadd+0x356>
   2803a:	4e4c      	ldr	r6, [pc, #304]	; (2816c <__aeabi_dadd+0x618>)
   2803c:	42b0      	cmp	r0, r6
   2803e:	d036      	beq.n	280ae <__aeabi_dadd+0x55a>
   28040:	2680      	movs	r6, #128	; 0x80
   28042:	425b      	negs	r3, r3
   28044:	0436      	lsls	r6, r6, #16
   28046:	469a      	mov	sl, r3
   28048:	4334      	orrs	r4, r6
   2804a:	e7cf      	b.n	27fec <__aeabi_dadd+0x498>
   2804c:	0018      	movs	r0, r3
   2804e:	4310      	orrs	r0, r2
   28050:	d100      	bne.n	28054 <__aeabi_dadd+0x500>
   28052:	e603      	b.n	27c5c <__aeabi_dadd+0x108>
   28054:	1ab8      	subs	r0, r7, r2
   28056:	4684      	mov	ip, r0
   28058:	4567      	cmp	r7, ip
   2805a:	41ad      	sbcs	r5, r5
   2805c:	1ae0      	subs	r0, r4, r3
   2805e:	426d      	negs	r5, r5
   28060:	1b40      	subs	r0, r0, r5
   28062:	0205      	lsls	r5, r0, #8
   28064:	d400      	bmi.n	28068 <__aeabi_dadd+0x514>
   28066:	e62c      	b.n	27cc2 <__aeabi_dadd+0x16e>
   28068:	1bd7      	subs	r7, r2, r7
   2806a:	42ba      	cmp	r2, r7
   2806c:	4192      	sbcs	r2, r2
   2806e:	1b1c      	subs	r4, r3, r4
   28070:	4252      	negs	r2, r2
   28072:	1aa4      	subs	r4, r4, r2
   28074:	46d8      	mov	r8, fp
   28076:	e5f1      	b.n	27c5c <__aeabi_dadd+0x108>
   28078:	0018      	movs	r0, r3
   2807a:	4310      	orrs	r0, r2
   2807c:	d100      	bne.n	28080 <__aeabi_dadd+0x52c>
   2807e:	e763      	b.n	27f48 <__aeabi_dadd+0x3f4>
   28080:	08f8      	lsrs	r0, r7, #3
   28082:	0767      	lsls	r7, r4, #29
   28084:	4307      	orrs	r7, r0
   28086:	2080      	movs	r0, #128	; 0x80
   28088:	08e4      	lsrs	r4, r4, #3
   2808a:	0300      	lsls	r0, r0, #12
   2808c:	4204      	tst	r4, r0
   2808e:	d008      	beq.n	280a2 <__aeabi_dadd+0x54e>
   28090:	08dd      	lsrs	r5, r3, #3
   28092:	4205      	tst	r5, r0
   28094:	d105      	bne.n	280a2 <__aeabi_dadd+0x54e>
   28096:	08d2      	lsrs	r2, r2, #3
   28098:	0759      	lsls	r1, r3, #29
   2809a:	4311      	orrs	r1, r2
   2809c:	000f      	movs	r7, r1
   2809e:	002c      	movs	r4, r5
   280a0:	46d8      	mov	r8, fp
   280a2:	0f7b      	lsrs	r3, r7, #29
   280a4:	00e4      	lsls	r4, r4, #3
   280a6:	431c      	orrs	r4, r3
   280a8:	00ff      	lsls	r7, r7, #3
   280aa:	4e30      	ldr	r6, [pc, #192]	; (2816c <__aeabi_dadd+0x618>)
   280ac:	e5d6      	b.n	27c5c <__aeabi_dadd+0x108>
   280ae:	000c      	movs	r4, r1
   280b0:	0017      	movs	r7, r2
   280b2:	0006      	movs	r6, r0
   280b4:	e5d2      	b.n	27c5c <__aeabi_dadd+0x108>
   280b6:	2b00      	cmp	r3, #0
   280b8:	d038      	beq.n	2812c <__aeabi_dadd+0x5d8>
   280ba:	000b      	movs	r3, r1
   280bc:	4313      	orrs	r3, r2
   280be:	d100      	bne.n	280c2 <__aeabi_dadd+0x56e>
   280c0:	e742      	b.n	27f48 <__aeabi_dadd+0x3f4>
   280c2:	08f8      	lsrs	r0, r7, #3
   280c4:	0767      	lsls	r7, r4, #29
   280c6:	4307      	orrs	r7, r0
   280c8:	2080      	movs	r0, #128	; 0x80
   280ca:	08e4      	lsrs	r4, r4, #3
   280cc:	0300      	lsls	r0, r0, #12
   280ce:	4204      	tst	r4, r0
   280d0:	d0e7      	beq.n	280a2 <__aeabi_dadd+0x54e>
   280d2:	08cb      	lsrs	r3, r1, #3
   280d4:	4203      	tst	r3, r0
   280d6:	d1e4      	bne.n	280a2 <__aeabi_dadd+0x54e>
   280d8:	08d2      	lsrs	r2, r2, #3
   280da:	0749      	lsls	r1, r1, #29
   280dc:	4311      	orrs	r1, r2
   280de:	000f      	movs	r7, r1
   280e0:	001c      	movs	r4, r3
   280e2:	e7de      	b.n	280a2 <__aeabi_dadd+0x54e>
   280e4:	2700      	movs	r7, #0
   280e6:	2400      	movs	r4, #0
   280e8:	e5d5      	b.n	27c96 <__aeabi_dadd+0x142>
   280ea:	2100      	movs	r1, #0
   280ec:	e76b      	b.n	27fc6 <__aeabi_dadd+0x472>
   280ee:	2500      	movs	r5, #0
   280f0:	2700      	movs	r7, #0
   280f2:	e5f3      	b.n	27cdc <__aeabi_dadd+0x188>
   280f4:	464e      	mov	r6, r9
   280f6:	0025      	movs	r5, r4
   280f8:	3e20      	subs	r6, #32
   280fa:	40f5      	lsrs	r5, r6
   280fc:	464b      	mov	r3, r9
   280fe:	002e      	movs	r6, r5
   28100:	2b20      	cmp	r3, #32
   28102:	d02d      	beq.n	28160 <__aeabi_dadd+0x60c>
   28104:	2540      	movs	r5, #64	; 0x40
   28106:	1aed      	subs	r5, r5, r3
   28108:	40ac      	lsls	r4, r5
   2810a:	4327      	orrs	r7, r4
   2810c:	1e7c      	subs	r4, r7, #1
   2810e:	41a7      	sbcs	r7, r4
   28110:	2400      	movs	r4, #0
   28112:	4337      	orrs	r7, r6
   28114:	e6c9      	b.n	27eaa <__aeabi_dadd+0x356>
   28116:	2480      	movs	r4, #128	; 0x80
   28118:	2500      	movs	r5, #0
   2811a:	0324      	lsls	r4, r4, #12
   2811c:	4e13      	ldr	r6, [pc, #76]	; (2816c <__aeabi_dadd+0x618>)
   2811e:	2700      	movs	r7, #0
   28120:	e5dc      	b.n	27cdc <__aeabi_dadd+0x188>
   28122:	4327      	orrs	r7, r4
   28124:	1e7c      	subs	r4, r7, #1
   28126:	41a7      	sbcs	r7, r4
   28128:	2400      	movs	r4, #0
   2812a:	e779      	b.n	28020 <__aeabi_dadd+0x4cc>
   2812c:	000c      	movs	r4, r1
   2812e:	0017      	movs	r7, r2
   28130:	4e0e      	ldr	r6, [pc, #56]	; (2816c <__aeabi_dadd+0x618>)
   28132:	e593      	b.n	27c5c <__aeabi_dadd+0x108>
   28134:	000c      	movs	r4, r1
   28136:	0017      	movs	r7, r2
   28138:	e590      	b.n	27c5c <__aeabi_dadd+0x108>
   2813a:	4656      	mov	r6, sl
   2813c:	0023      	movs	r3, r4
   2813e:	3e20      	subs	r6, #32
   28140:	40f3      	lsrs	r3, r6
   28142:	4699      	mov	r9, r3
   28144:	4653      	mov	r3, sl
   28146:	2b20      	cmp	r3, #32
   28148:	d00e      	beq.n	28168 <__aeabi_dadd+0x614>
   2814a:	2340      	movs	r3, #64	; 0x40
   2814c:	4656      	mov	r6, sl
   2814e:	1b9b      	subs	r3, r3, r6
   28150:	409c      	lsls	r4, r3
   28152:	4327      	orrs	r7, r4
   28154:	1e7c      	subs	r4, r7, #1
   28156:	41a7      	sbcs	r7, r4
   28158:	464b      	mov	r3, r9
   2815a:	2400      	movs	r4, #0
   2815c:	431f      	orrs	r7, r3
   2815e:	e75f      	b.n	28020 <__aeabi_dadd+0x4cc>
   28160:	2400      	movs	r4, #0
   28162:	e7d2      	b.n	2810a <__aeabi_dadd+0x5b6>
   28164:	0017      	movs	r7, r2
   28166:	e5b2      	b.n	27cce <__aeabi_dadd+0x17a>
   28168:	2400      	movs	r4, #0
   2816a:	e7f2      	b.n	28152 <__aeabi_dadd+0x5fe>
   2816c:	000007ff 	.word	0x000007ff
   28170:	ff7fffff 	.word	0xff7fffff

00028174 <__aeabi_ddiv>:
   28174:	b5f0      	push	{r4, r5, r6, r7, lr}
   28176:	4657      	mov	r7, sl
   28178:	4645      	mov	r5, r8
   2817a:	46de      	mov	lr, fp
   2817c:	464e      	mov	r6, r9
   2817e:	b5e0      	push	{r5, r6, r7, lr}
   28180:	004c      	lsls	r4, r1, #1
   28182:	030e      	lsls	r6, r1, #12
   28184:	b087      	sub	sp, #28
   28186:	4683      	mov	fp, r0
   28188:	4692      	mov	sl, r2
   2818a:	001d      	movs	r5, r3
   2818c:	4680      	mov	r8, r0
   2818e:	0b36      	lsrs	r6, r6, #12
   28190:	0d64      	lsrs	r4, r4, #21
   28192:	0fcf      	lsrs	r7, r1, #31
   28194:	2c00      	cmp	r4, #0
   28196:	d04f      	beq.n	28238 <__aeabi_ddiv+0xc4>
   28198:	4b6f      	ldr	r3, [pc, #444]	; (28358 <__aeabi_ddiv+0x1e4>)
   2819a:	429c      	cmp	r4, r3
   2819c:	d035      	beq.n	2820a <__aeabi_ddiv+0x96>
   2819e:	2380      	movs	r3, #128	; 0x80
   281a0:	0f42      	lsrs	r2, r0, #29
   281a2:	041b      	lsls	r3, r3, #16
   281a4:	00f6      	lsls	r6, r6, #3
   281a6:	4313      	orrs	r3, r2
   281a8:	4333      	orrs	r3, r6
   281aa:	4699      	mov	r9, r3
   281ac:	00c3      	lsls	r3, r0, #3
   281ae:	4698      	mov	r8, r3
   281b0:	4b6a      	ldr	r3, [pc, #424]	; (2835c <__aeabi_ddiv+0x1e8>)
   281b2:	2600      	movs	r6, #0
   281b4:	469c      	mov	ip, r3
   281b6:	2300      	movs	r3, #0
   281b8:	4464      	add	r4, ip
   281ba:	9303      	str	r3, [sp, #12]
   281bc:	032b      	lsls	r3, r5, #12
   281be:	0b1b      	lsrs	r3, r3, #12
   281c0:	469b      	mov	fp, r3
   281c2:	006b      	lsls	r3, r5, #1
   281c4:	0fed      	lsrs	r5, r5, #31
   281c6:	4650      	mov	r0, sl
   281c8:	0d5b      	lsrs	r3, r3, #21
   281ca:	9501      	str	r5, [sp, #4]
   281cc:	d05e      	beq.n	2828c <__aeabi_ddiv+0x118>
   281ce:	4a62      	ldr	r2, [pc, #392]	; (28358 <__aeabi_ddiv+0x1e4>)
   281d0:	4293      	cmp	r3, r2
   281d2:	d053      	beq.n	2827c <__aeabi_ddiv+0x108>
   281d4:	465a      	mov	r2, fp
   281d6:	00d1      	lsls	r1, r2, #3
   281d8:	2280      	movs	r2, #128	; 0x80
   281da:	0f40      	lsrs	r0, r0, #29
   281dc:	0412      	lsls	r2, r2, #16
   281de:	4302      	orrs	r2, r0
   281e0:	430a      	orrs	r2, r1
   281e2:	4693      	mov	fp, r2
   281e4:	4652      	mov	r2, sl
   281e6:	00d1      	lsls	r1, r2, #3
   281e8:	4a5c      	ldr	r2, [pc, #368]	; (2835c <__aeabi_ddiv+0x1e8>)
   281ea:	4694      	mov	ip, r2
   281ec:	2200      	movs	r2, #0
   281ee:	4463      	add	r3, ip
   281f0:	0038      	movs	r0, r7
   281f2:	4068      	eors	r0, r5
   281f4:	4684      	mov	ip, r0
   281f6:	9002      	str	r0, [sp, #8]
   281f8:	1ae4      	subs	r4, r4, r3
   281fa:	4316      	orrs	r6, r2
   281fc:	2e0f      	cmp	r6, #15
   281fe:	d900      	bls.n	28202 <__aeabi_ddiv+0x8e>
   28200:	e0b4      	b.n	2836c <__aeabi_ddiv+0x1f8>
   28202:	4b57      	ldr	r3, [pc, #348]	; (28360 <__aeabi_ddiv+0x1ec>)
   28204:	00b6      	lsls	r6, r6, #2
   28206:	599b      	ldr	r3, [r3, r6]
   28208:	469f      	mov	pc, r3
   2820a:	0003      	movs	r3, r0
   2820c:	4333      	orrs	r3, r6
   2820e:	4699      	mov	r9, r3
   28210:	d16c      	bne.n	282ec <__aeabi_ddiv+0x178>
   28212:	2300      	movs	r3, #0
   28214:	4698      	mov	r8, r3
   28216:	3302      	adds	r3, #2
   28218:	2608      	movs	r6, #8
   2821a:	9303      	str	r3, [sp, #12]
   2821c:	e7ce      	b.n	281bc <__aeabi_ddiv+0x48>
   2821e:	46cb      	mov	fp, r9
   28220:	4641      	mov	r1, r8
   28222:	9a03      	ldr	r2, [sp, #12]
   28224:	9701      	str	r7, [sp, #4]
   28226:	2a02      	cmp	r2, #2
   28228:	d165      	bne.n	282f6 <__aeabi_ddiv+0x182>
   2822a:	9b01      	ldr	r3, [sp, #4]
   2822c:	4c4a      	ldr	r4, [pc, #296]	; (28358 <__aeabi_ddiv+0x1e4>)
   2822e:	469c      	mov	ip, r3
   28230:	2300      	movs	r3, #0
   28232:	2200      	movs	r2, #0
   28234:	4698      	mov	r8, r3
   28236:	e06b      	b.n	28310 <__aeabi_ddiv+0x19c>
   28238:	0003      	movs	r3, r0
   2823a:	4333      	orrs	r3, r6
   2823c:	4699      	mov	r9, r3
   2823e:	d04e      	beq.n	282de <__aeabi_ddiv+0x16a>
   28240:	2e00      	cmp	r6, #0
   28242:	d100      	bne.n	28246 <__aeabi_ddiv+0xd2>
   28244:	e1bc      	b.n	285c0 <__aeabi_ddiv+0x44c>
   28246:	0030      	movs	r0, r6
   28248:	f001 fa7e 	bl	29748 <__clzsi2>
   2824c:	0003      	movs	r3, r0
   2824e:	3b0b      	subs	r3, #11
   28250:	2b1c      	cmp	r3, #28
   28252:	dd00      	ble.n	28256 <__aeabi_ddiv+0xe2>
   28254:	e1ac      	b.n	285b0 <__aeabi_ddiv+0x43c>
   28256:	221d      	movs	r2, #29
   28258:	1ad3      	subs	r3, r2, r3
   2825a:	465a      	mov	r2, fp
   2825c:	0001      	movs	r1, r0
   2825e:	40da      	lsrs	r2, r3
   28260:	3908      	subs	r1, #8
   28262:	408e      	lsls	r6, r1
   28264:	0013      	movs	r3, r2
   28266:	4333      	orrs	r3, r6
   28268:	4699      	mov	r9, r3
   2826a:	465b      	mov	r3, fp
   2826c:	408b      	lsls	r3, r1
   2826e:	4698      	mov	r8, r3
   28270:	2300      	movs	r3, #0
   28272:	4c3c      	ldr	r4, [pc, #240]	; (28364 <__aeabi_ddiv+0x1f0>)
   28274:	2600      	movs	r6, #0
   28276:	1a24      	subs	r4, r4, r0
   28278:	9303      	str	r3, [sp, #12]
   2827a:	e79f      	b.n	281bc <__aeabi_ddiv+0x48>
   2827c:	4651      	mov	r1, sl
   2827e:	465a      	mov	r2, fp
   28280:	4311      	orrs	r1, r2
   28282:	d129      	bne.n	282d8 <__aeabi_ddiv+0x164>
   28284:	2200      	movs	r2, #0
   28286:	4693      	mov	fp, r2
   28288:	3202      	adds	r2, #2
   2828a:	e7b1      	b.n	281f0 <__aeabi_ddiv+0x7c>
   2828c:	4659      	mov	r1, fp
   2828e:	4301      	orrs	r1, r0
   28290:	d01e      	beq.n	282d0 <__aeabi_ddiv+0x15c>
   28292:	465b      	mov	r3, fp
   28294:	2b00      	cmp	r3, #0
   28296:	d100      	bne.n	2829a <__aeabi_ddiv+0x126>
   28298:	e19e      	b.n	285d8 <__aeabi_ddiv+0x464>
   2829a:	4658      	mov	r0, fp
   2829c:	f001 fa54 	bl	29748 <__clzsi2>
   282a0:	0003      	movs	r3, r0
   282a2:	3b0b      	subs	r3, #11
   282a4:	2b1c      	cmp	r3, #28
   282a6:	dd00      	ble.n	282aa <__aeabi_ddiv+0x136>
   282a8:	e18f      	b.n	285ca <__aeabi_ddiv+0x456>
   282aa:	0002      	movs	r2, r0
   282ac:	4659      	mov	r1, fp
   282ae:	3a08      	subs	r2, #8
   282b0:	4091      	lsls	r1, r2
   282b2:	468b      	mov	fp, r1
   282b4:	211d      	movs	r1, #29
   282b6:	1acb      	subs	r3, r1, r3
   282b8:	4651      	mov	r1, sl
   282ba:	40d9      	lsrs	r1, r3
   282bc:	000b      	movs	r3, r1
   282be:	4659      	mov	r1, fp
   282c0:	430b      	orrs	r3, r1
   282c2:	4651      	mov	r1, sl
   282c4:	469b      	mov	fp, r3
   282c6:	4091      	lsls	r1, r2
   282c8:	4b26      	ldr	r3, [pc, #152]	; (28364 <__aeabi_ddiv+0x1f0>)
   282ca:	2200      	movs	r2, #0
   282cc:	1a1b      	subs	r3, r3, r0
   282ce:	e78f      	b.n	281f0 <__aeabi_ddiv+0x7c>
   282d0:	2300      	movs	r3, #0
   282d2:	2201      	movs	r2, #1
   282d4:	469b      	mov	fp, r3
   282d6:	e78b      	b.n	281f0 <__aeabi_ddiv+0x7c>
   282d8:	4651      	mov	r1, sl
   282da:	2203      	movs	r2, #3
   282dc:	e788      	b.n	281f0 <__aeabi_ddiv+0x7c>
   282de:	2300      	movs	r3, #0
   282e0:	4698      	mov	r8, r3
   282e2:	3301      	adds	r3, #1
   282e4:	2604      	movs	r6, #4
   282e6:	2400      	movs	r4, #0
   282e8:	9303      	str	r3, [sp, #12]
   282ea:	e767      	b.n	281bc <__aeabi_ddiv+0x48>
   282ec:	2303      	movs	r3, #3
   282ee:	46b1      	mov	r9, r6
   282f0:	9303      	str	r3, [sp, #12]
   282f2:	260c      	movs	r6, #12
   282f4:	e762      	b.n	281bc <__aeabi_ddiv+0x48>
   282f6:	2a03      	cmp	r2, #3
   282f8:	d100      	bne.n	282fc <__aeabi_ddiv+0x188>
   282fa:	e25c      	b.n	287b6 <__aeabi_ddiv+0x642>
   282fc:	9b01      	ldr	r3, [sp, #4]
   282fe:	2a01      	cmp	r2, #1
   28300:	d000      	beq.n	28304 <__aeabi_ddiv+0x190>
   28302:	e1e4      	b.n	286ce <__aeabi_ddiv+0x55a>
   28304:	4013      	ands	r3, r2
   28306:	469c      	mov	ip, r3
   28308:	2300      	movs	r3, #0
   2830a:	2400      	movs	r4, #0
   2830c:	2200      	movs	r2, #0
   2830e:	4698      	mov	r8, r3
   28310:	2100      	movs	r1, #0
   28312:	0312      	lsls	r2, r2, #12
   28314:	0b13      	lsrs	r3, r2, #12
   28316:	0d0a      	lsrs	r2, r1, #20
   28318:	0512      	lsls	r2, r2, #20
   2831a:	431a      	orrs	r2, r3
   2831c:	0523      	lsls	r3, r4, #20
   2831e:	4c12      	ldr	r4, [pc, #72]	; (28368 <__aeabi_ddiv+0x1f4>)
   28320:	4640      	mov	r0, r8
   28322:	4022      	ands	r2, r4
   28324:	4313      	orrs	r3, r2
   28326:	4662      	mov	r2, ip
   28328:	005b      	lsls	r3, r3, #1
   2832a:	07d2      	lsls	r2, r2, #31
   2832c:	085b      	lsrs	r3, r3, #1
   2832e:	4313      	orrs	r3, r2
   28330:	0019      	movs	r1, r3
   28332:	b007      	add	sp, #28
   28334:	bc3c      	pop	{r2, r3, r4, r5}
   28336:	4690      	mov	r8, r2
   28338:	4699      	mov	r9, r3
   2833a:	46a2      	mov	sl, r4
   2833c:	46ab      	mov	fp, r5
   2833e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28340:	2300      	movs	r3, #0
   28342:	2280      	movs	r2, #128	; 0x80
   28344:	469c      	mov	ip, r3
   28346:	0312      	lsls	r2, r2, #12
   28348:	4698      	mov	r8, r3
   2834a:	4c03      	ldr	r4, [pc, #12]	; (28358 <__aeabi_ddiv+0x1e4>)
   2834c:	e7e0      	b.n	28310 <__aeabi_ddiv+0x19c>
   2834e:	2300      	movs	r3, #0
   28350:	4c01      	ldr	r4, [pc, #4]	; (28358 <__aeabi_ddiv+0x1e4>)
   28352:	2200      	movs	r2, #0
   28354:	4698      	mov	r8, r3
   28356:	e7db      	b.n	28310 <__aeabi_ddiv+0x19c>
   28358:	000007ff 	.word	0x000007ff
   2835c:	fffffc01 	.word	0xfffffc01
   28360:	0002b910 	.word	0x0002b910
   28364:	fffffc0d 	.word	0xfffffc0d
   28368:	800fffff 	.word	0x800fffff
   2836c:	45d9      	cmp	r9, fp
   2836e:	d900      	bls.n	28372 <__aeabi_ddiv+0x1fe>
   28370:	e139      	b.n	285e6 <__aeabi_ddiv+0x472>
   28372:	d100      	bne.n	28376 <__aeabi_ddiv+0x202>
   28374:	e134      	b.n	285e0 <__aeabi_ddiv+0x46c>
   28376:	2300      	movs	r3, #0
   28378:	4646      	mov	r6, r8
   2837a:	464d      	mov	r5, r9
   2837c:	469a      	mov	sl, r3
   2837e:	3c01      	subs	r4, #1
   28380:	465b      	mov	r3, fp
   28382:	0e0a      	lsrs	r2, r1, #24
   28384:	021b      	lsls	r3, r3, #8
   28386:	431a      	orrs	r2, r3
   28388:	020b      	lsls	r3, r1, #8
   2838a:	0c17      	lsrs	r7, r2, #16
   2838c:	9303      	str	r3, [sp, #12]
   2838e:	0413      	lsls	r3, r2, #16
   28390:	0c1b      	lsrs	r3, r3, #16
   28392:	0039      	movs	r1, r7
   28394:	0028      	movs	r0, r5
   28396:	4690      	mov	r8, r2
   28398:	9301      	str	r3, [sp, #4]
   2839a:	f7fe fc6f 	bl	26c7c <__udivsi3>
   2839e:	0002      	movs	r2, r0
   283a0:	9b01      	ldr	r3, [sp, #4]
   283a2:	4683      	mov	fp, r0
   283a4:	435a      	muls	r2, r3
   283a6:	0028      	movs	r0, r5
   283a8:	0039      	movs	r1, r7
   283aa:	4691      	mov	r9, r2
   283ac:	f7fe fcec 	bl	26d88 <__aeabi_uidivmod>
   283b0:	0c35      	lsrs	r5, r6, #16
   283b2:	0409      	lsls	r1, r1, #16
   283b4:	430d      	orrs	r5, r1
   283b6:	45a9      	cmp	r9, r5
   283b8:	d90d      	bls.n	283d6 <__aeabi_ddiv+0x262>
   283ba:	465b      	mov	r3, fp
   283bc:	4445      	add	r5, r8
   283be:	3b01      	subs	r3, #1
   283c0:	45a8      	cmp	r8, r5
   283c2:	d900      	bls.n	283c6 <__aeabi_ddiv+0x252>
   283c4:	e13a      	b.n	2863c <__aeabi_ddiv+0x4c8>
   283c6:	45a9      	cmp	r9, r5
   283c8:	d800      	bhi.n	283cc <__aeabi_ddiv+0x258>
   283ca:	e137      	b.n	2863c <__aeabi_ddiv+0x4c8>
   283cc:	2302      	movs	r3, #2
   283ce:	425b      	negs	r3, r3
   283d0:	469c      	mov	ip, r3
   283d2:	4445      	add	r5, r8
   283d4:	44e3      	add	fp, ip
   283d6:	464b      	mov	r3, r9
   283d8:	1aeb      	subs	r3, r5, r3
   283da:	0039      	movs	r1, r7
   283dc:	0018      	movs	r0, r3
   283de:	9304      	str	r3, [sp, #16]
   283e0:	f7fe fc4c 	bl	26c7c <__udivsi3>
   283e4:	9b01      	ldr	r3, [sp, #4]
   283e6:	0005      	movs	r5, r0
   283e8:	4343      	muls	r3, r0
   283ea:	0039      	movs	r1, r7
   283ec:	9804      	ldr	r0, [sp, #16]
   283ee:	4699      	mov	r9, r3
   283f0:	f7fe fcca 	bl	26d88 <__aeabi_uidivmod>
   283f4:	0433      	lsls	r3, r6, #16
   283f6:	0409      	lsls	r1, r1, #16
   283f8:	0c1b      	lsrs	r3, r3, #16
   283fa:	430b      	orrs	r3, r1
   283fc:	4599      	cmp	r9, r3
   283fe:	d909      	bls.n	28414 <__aeabi_ddiv+0x2a0>
   28400:	4443      	add	r3, r8
   28402:	1e6a      	subs	r2, r5, #1
   28404:	4598      	cmp	r8, r3
   28406:	d900      	bls.n	2840a <__aeabi_ddiv+0x296>
   28408:	e11a      	b.n	28640 <__aeabi_ddiv+0x4cc>
   2840a:	4599      	cmp	r9, r3
   2840c:	d800      	bhi.n	28410 <__aeabi_ddiv+0x29c>
   2840e:	e117      	b.n	28640 <__aeabi_ddiv+0x4cc>
   28410:	3d02      	subs	r5, #2
   28412:	4443      	add	r3, r8
   28414:	464a      	mov	r2, r9
   28416:	1a9b      	subs	r3, r3, r2
   28418:	465a      	mov	r2, fp
   2841a:	0412      	lsls	r2, r2, #16
   2841c:	432a      	orrs	r2, r5
   2841e:	9903      	ldr	r1, [sp, #12]
   28420:	4693      	mov	fp, r2
   28422:	0c10      	lsrs	r0, r2, #16
   28424:	0c0a      	lsrs	r2, r1, #16
   28426:	4691      	mov	r9, r2
   28428:	0409      	lsls	r1, r1, #16
   2842a:	465a      	mov	r2, fp
   2842c:	0c09      	lsrs	r1, r1, #16
   2842e:	464e      	mov	r6, r9
   28430:	000d      	movs	r5, r1
   28432:	0412      	lsls	r2, r2, #16
   28434:	0c12      	lsrs	r2, r2, #16
   28436:	4345      	muls	r5, r0
   28438:	9105      	str	r1, [sp, #20]
   2843a:	4351      	muls	r1, r2
   2843c:	4372      	muls	r2, r6
   2843e:	4370      	muls	r0, r6
   28440:	1952      	adds	r2, r2, r5
   28442:	0c0e      	lsrs	r6, r1, #16
   28444:	18b2      	adds	r2, r6, r2
   28446:	4295      	cmp	r5, r2
   28448:	d903      	bls.n	28452 <__aeabi_ddiv+0x2de>
   2844a:	2580      	movs	r5, #128	; 0x80
   2844c:	026d      	lsls	r5, r5, #9
   2844e:	46ac      	mov	ip, r5
   28450:	4460      	add	r0, ip
   28452:	0c15      	lsrs	r5, r2, #16
   28454:	0409      	lsls	r1, r1, #16
   28456:	0412      	lsls	r2, r2, #16
   28458:	0c09      	lsrs	r1, r1, #16
   2845a:	1828      	adds	r0, r5, r0
   2845c:	1852      	adds	r2, r2, r1
   2845e:	4283      	cmp	r3, r0
   28460:	d200      	bcs.n	28464 <__aeabi_ddiv+0x2f0>
   28462:	e0ce      	b.n	28602 <__aeabi_ddiv+0x48e>
   28464:	d100      	bne.n	28468 <__aeabi_ddiv+0x2f4>
   28466:	e0c8      	b.n	285fa <__aeabi_ddiv+0x486>
   28468:	1a1d      	subs	r5, r3, r0
   2846a:	4653      	mov	r3, sl
   2846c:	1a9e      	subs	r6, r3, r2
   2846e:	45b2      	cmp	sl, r6
   28470:	4192      	sbcs	r2, r2
   28472:	4252      	negs	r2, r2
   28474:	1aab      	subs	r3, r5, r2
   28476:	469a      	mov	sl, r3
   28478:	4598      	cmp	r8, r3
   2847a:	d100      	bne.n	2847e <__aeabi_ddiv+0x30a>
   2847c:	e117      	b.n	286ae <__aeabi_ddiv+0x53a>
   2847e:	0039      	movs	r1, r7
   28480:	0018      	movs	r0, r3
   28482:	f7fe fbfb 	bl	26c7c <__udivsi3>
   28486:	9b01      	ldr	r3, [sp, #4]
   28488:	0005      	movs	r5, r0
   2848a:	4343      	muls	r3, r0
   2848c:	0039      	movs	r1, r7
   2848e:	4650      	mov	r0, sl
   28490:	9304      	str	r3, [sp, #16]
   28492:	f7fe fc79 	bl	26d88 <__aeabi_uidivmod>
   28496:	9804      	ldr	r0, [sp, #16]
   28498:	040b      	lsls	r3, r1, #16
   2849a:	0c31      	lsrs	r1, r6, #16
   2849c:	4319      	orrs	r1, r3
   2849e:	4288      	cmp	r0, r1
   284a0:	d909      	bls.n	284b6 <__aeabi_ddiv+0x342>
   284a2:	4441      	add	r1, r8
   284a4:	1e6b      	subs	r3, r5, #1
   284a6:	4588      	cmp	r8, r1
   284a8:	d900      	bls.n	284ac <__aeabi_ddiv+0x338>
   284aa:	e107      	b.n	286bc <__aeabi_ddiv+0x548>
   284ac:	4288      	cmp	r0, r1
   284ae:	d800      	bhi.n	284b2 <__aeabi_ddiv+0x33e>
   284b0:	e104      	b.n	286bc <__aeabi_ddiv+0x548>
   284b2:	3d02      	subs	r5, #2
   284b4:	4441      	add	r1, r8
   284b6:	9b04      	ldr	r3, [sp, #16]
   284b8:	1acb      	subs	r3, r1, r3
   284ba:	0018      	movs	r0, r3
   284bc:	0039      	movs	r1, r7
   284be:	9304      	str	r3, [sp, #16]
   284c0:	f7fe fbdc 	bl	26c7c <__udivsi3>
   284c4:	9b01      	ldr	r3, [sp, #4]
   284c6:	4682      	mov	sl, r0
   284c8:	4343      	muls	r3, r0
   284ca:	0039      	movs	r1, r7
   284cc:	9804      	ldr	r0, [sp, #16]
   284ce:	9301      	str	r3, [sp, #4]
   284d0:	f7fe fc5a 	bl	26d88 <__aeabi_uidivmod>
   284d4:	9801      	ldr	r0, [sp, #4]
   284d6:	040b      	lsls	r3, r1, #16
   284d8:	0431      	lsls	r1, r6, #16
   284da:	0c09      	lsrs	r1, r1, #16
   284dc:	4319      	orrs	r1, r3
   284de:	4288      	cmp	r0, r1
   284e0:	d90d      	bls.n	284fe <__aeabi_ddiv+0x38a>
   284e2:	4653      	mov	r3, sl
   284e4:	4441      	add	r1, r8
   284e6:	3b01      	subs	r3, #1
   284e8:	4588      	cmp	r8, r1
   284ea:	d900      	bls.n	284ee <__aeabi_ddiv+0x37a>
   284ec:	e0e8      	b.n	286c0 <__aeabi_ddiv+0x54c>
   284ee:	4288      	cmp	r0, r1
   284f0:	d800      	bhi.n	284f4 <__aeabi_ddiv+0x380>
   284f2:	e0e5      	b.n	286c0 <__aeabi_ddiv+0x54c>
   284f4:	2302      	movs	r3, #2
   284f6:	425b      	negs	r3, r3
   284f8:	469c      	mov	ip, r3
   284fa:	4441      	add	r1, r8
   284fc:	44e2      	add	sl, ip
   284fe:	9b01      	ldr	r3, [sp, #4]
   28500:	042d      	lsls	r5, r5, #16
   28502:	1ace      	subs	r6, r1, r3
   28504:	4651      	mov	r1, sl
   28506:	4329      	orrs	r1, r5
   28508:	9d05      	ldr	r5, [sp, #20]
   2850a:	464f      	mov	r7, r9
   2850c:	002a      	movs	r2, r5
   2850e:	040b      	lsls	r3, r1, #16
   28510:	0c08      	lsrs	r0, r1, #16
   28512:	0c1b      	lsrs	r3, r3, #16
   28514:	435a      	muls	r2, r3
   28516:	4345      	muls	r5, r0
   28518:	437b      	muls	r3, r7
   2851a:	4378      	muls	r0, r7
   2851c:	195b      	adds	r3, r3, r5
   2851e:	0c17      	lsrs	r7, r2, #16
   28520:	18fb      	adds	r3, r7, r3
   28522:	429d      	cmp	r5, r3
   28524:	d903      	bls.n	2852e <__aeabi_ddiv+0x3ba>
   28526:	2580      	movs	r5, #128	; 0x80
   28528:	026d      	lsls	r5, r5, #9
   2852a:	46ac      	mov	ip, r5
   2852c:	4460      	add	r0, ip
   2852e:	0c1d      	lsrs	r5, r3, #16
   28530:	0412      	lsls	r2, r2, #16
   28532:	041b      	lsls	r3, r3, #16
   28534:	0c12      	lsrs	r2, r2, #16
   28536:	1828      	adds	r0, r5, r0
   28538:	189b      	adds	r3, r3, r2
   2853a:	4286      	cmp	r6, r0
   2853c:	d200      	bcs.n	28540 <__aeabi_ddiv+0x3cc>
   2853e:	e093      	b.n	28668 <__aeabi_ddiv+0x4f4>
   28540:	d100      	bne.n	28544 <__aeabi_ddiv+0x3d0>
   28542:	e08e      	b.n	28662 <__aeabi_ddiv+0x4ee>
   28544:	2301      	movs	r3, #1
   28546:	4319      	orrs	r1, r3
   28548:	4ba0      	ldr	r3, [pc, #640]	; (287cc <__aeabi_ddiv+0x658>)
   2854a:	18e3      	adds	r3, r4, r3
   2854c:	2b00      	cmp	r3, #0
   2854e:	dc00      	bgt.n	28552 <__aeabi_ddiv+0x3de>
   28550:	e099      	b.n	28686 <__aeabi_ddiv+0x512>
   28552:	074a      	lsls	r2, r1, #29
   28554:	d000      	beq.n	28558 <__aeabi_ddiv+0x3e4>
   28556:	e09e      	b.n	28696 <__aeabi_ddiv+0x522>
   28558:	465a      	mov	r2, fp
   2855a:	01d2      	lsls	r2, r2, #7
   2855c:	d506      	bpl.n	2856c <__aeabi_ddiv+0x3f8>
   2855e:	465a      	mov	r2, fp
   28560:	4b9b      	ldr	r3, [pc, #620]	; (287d0 <__aeabi_ddiv+0x65c>)
   28562:	401a      	ands	r2, r3
   28564:	2380      	movs	r3, #128	; 0x80
   28566:	4693      	mov	fp, r2
   28568:	00db      	lsls	r3, r3, #3
   2856a:	18e3      	adds	r3, r4, r3
   2856c:	4a99      	ldr	r2, [pc, #612]	; (287d4 <__aeabi_ddiv+0x660>)
   2856e:	4293      	cmp	r3, r2
   28570:	dd68      	ble.n	28644 <__aeabi_ddiv+0x4d0>
   28572:	2301      	movs	r3, #1
   28574:	9a02      	ldr	r2, [sp, #8]
   28576:	4c98      	ldr	r4, [pc, #608]	; (287d8 <__aeabi_ddiv+0x664>)
   28578:	401a      	ands	r2, r3
   2857a:	2300      	movs	r3, #0
   2857c:	4694      	mov	ip, r2
   2857e:	4698      	mov	r8, r3
   28580:	2200      	movs	r2, #0
   28582:	e6c5      	b.n	28310 <__aeabi_ddiv+0x19c>
   28584:	2280      	movs	r2, #128	; 0x80
   28586:	464b      	mov	r3, r9
   28588:	0312      	lsls	r2, r2, #12
   2858a:	4213      	tst	r3, r2
   2858c:	d00a      	beq.n	285a4 <__aeabi_ddiv+0x430>
   2858e:	465b      	mov	r3, fp
   28590:	4213      	tst	r3, r2
   28592:	d106      	bne.n	285a2 <__aeabi_ddiv+0x42e>
   28594:	431a      	orrs	r2, r3
   28596:	0312      	lsls	r2, r2, #12
   28598:	0b12      	lsrs	r2, r2, #12
   2859a:	46ac      	mov	ip, r5
   2859c:	4688      	mov	r8, r1
   2859e:	4c8e      	ldr	r4, [pc, #568]	; (287d8 <__aeabi_ddiv+0x664>)
   285a0:	e6b6      	b.n	28310 <__aeabi_ddiv+0x19c>
   285a2:	464b      	mov	r3, r9
   285a4:	431a      	orrs	r2, r3
   285a6:	0312      	lsls	r2, r2, #12
   285a8:	0b12      	lsrs	r2, r2, #12
   285aa:	46bc      	mov	ip, r7
   285ac:	4c8a      	ldr	r4, [pc, #552]	; (287d8 <__aeabi_ddiv+0x664>)
   285ae:	e6af      	b.n	28310 <__aeabi_ddiv+0x19c>
   285b0:	0003      	movs	r3, r0
   285b2:	465a      	mov	r2, fp
   285b4:	3b28      	subs	r3, #40	; 0x28
   285b6:	409a      	lsls	r2, r3
   285b8:	2300      	movs	r3, #0
   285ba:	4691      	mov	r9, r2
   285bc:	4698      	mov	r8, r3
   285be:	e657      	b.n	28270 <__aeabi_ddiv+0xfc>
   285c0:	4658      	mov	r0, fp
   285c2:	f001 f8c1 	bl	29748 <__clzsi2>
   285c6:	3020      	adds	r0, #32
   285c8:	e640      	b.n	2824c <__aeabi_ddiv+0xd8>
   285ca:	0003      	movs	r3, r0
   285cc:	4652      	mov	r2, sl
   285ce:	3b28      	subs	r3, #40	; 0x28
   285d0:	409a      	lsls	r2, r3
   285d2:	2100      	movs	r1, #0
   285d4:	4693      	mov	fp, r2
   285d6:	e677      	b.n	282c8 <__aeabi_ddiv+0x154>
   285d8:	f001 f8b6 	bl	29748 <__clzsi2>
   285dc:	3020      	adds	r0, #32
   285de:	e65f      	b.n	282a0 <__aeabi_ddiv+0x12c>
   285e0:	4588      	cmp	r8, r1
   285e2:	d200      	bcs.n	285e6 <__aeabi_ddiv+0x472>
   285e4:	e6c7      	b.n	28376 <__aeabi_ddiv+0x202>
   285e6:	464b      	mov	r3, r9
   285e8:	07de      	lsls	r6, r3, #31
   285ea:	085d      	lsrs	r5, r3, #1
   285ec:	4643      	mov	r3, r8
   285ee:	085b      	lsrs	r3, r3, #1
   285f0:	431e      	orrs	r6, r3
   285f2:	4643      	mov	r3, r8
   285f4:	07db      	lsls	r3, r3, #31
   285f6:	469a      	mov	sl, r3
   285f8:	e6c2      	b.n	28380 <__aeabi_ddiv+0x20c>
   285fa:	2500      	movs	r5, #0
   285fc:	4592      	cmp	sl, r2
   285fe:	d300      	bcc.n	28602 <__aeabi_ddiv+0x48e>
   28600:	e733      	b.n	2846a <__aeabi_ddiv+0x2f6>
   28602:	9e03      	ldr	r6, [sp, #12]
   28604:	4659      	mov	r1, fp
   28606:	46b4      	mov	ip, r6
   28608:	44e2      	add	sl, ip
   2860a:	45b2      	cmp	sl, r6
   2860c:	41ad      	sbcs	r5, r5
   2860e:	426d      	negs	r5, r5
   28610:	4445      	add	r5, r8
   28612:	18eb      	adds	r3, r5, r3
   28614:	3901      	subs	r1, #1
   28616:	4598      	cmp	r8, r3
   28618:	d207      	bcs.n	2862a <__aeabi_ddiv+0x4b6>
   2861a:	4298      	cmp	r0, r3
   2861c:	d900      	bls.n	28620 <__aeabi_ddiv+0x4ac>
   2861e:	e07f      	b.n	28720 <__aeabi_ddiv+0x5ac>
   28620:	d100      	bne.n	28624 <__aeabi_ddiv+0x4b0>
   28622:	e0bc      	b.n	2879e <__aeabi_ddiv+0x62a>
   28624:	1a1d      	subs	r5, r3, r0
   28626:	468b      	mov	fp, r1
   28628:	e71f      	b.n	2846a <__aeabi_ddiv+0x2f6>
   2862a:	4598      	cmp	r8, r3
   2862c:	d1fa      	bne.n	28624 <__aeabi_ddiv+0x4b0>
   2862e:	9d03      	ldr	r5, [sp, #12]
   28630:	4555      	cmp	r5, sl
   28632:	d9f2      	bls.n	2861a <__aeabi_ddiv+0x4a6>
   28634:	4643      	mov	r3, r8
   28636:	468b      	mov	fp, r1
   28638:	1a1d      	subs	r5, r3, r0
   2863a:	e716      	b.n	2846a <__aeabi_ddiv+0x2f6>
   2863c:	469b      	mov	fp, r3
   2863e:	e6ca      	b.n	283d6 <__aeabi_ddiv+0x262>
   28640:	0015      	movs	r5, r2
   28642:	e6e7      	b.n	28414 <__aeabi_ddiv+0x2a0>
   28644:	465a      	mov	r2, fp
   28646:	08c9      	lsrs	r1, r1, #3
   28648:	0752      	lsls	r2, r2, #29
   2864a:	430a      	orrs	r2, r1
   2864c:	055b      	lsls	r3, r3, #21
   2864e:	4690      	mov	r8, r2
   28650:	0d5c      	lsrs	r4, r3, #21
   28652:	465a      	mov	r2, fp
   28654:	2301      	movs	r3, #1
   28656:	9902      	ldr	r1, [sp, #8]
   28658:	0252      	lsls	r2, r2, #9
   2865a:	4019      	ands	r1, r3
   2865c:	0b12      	lsrs	r2, r2, #12
   2865e:	468c      	mov	ip, r1
   28660:	e656      	b.n	28310 <__aeabi_ddiv+0x19c>
   28662:	2b00      	cmp	r3, #0
   28664:	d100      	bne.n	28668 <__aeabi_ddiv+0x4f4>
   28666:	e76f      	b.n	28548 <__aeabi_ddiv+0x3d4>
   28668:	4446      	add	r6, r8
   2866a:	1e4a      	subs	r2, r1, #1
   2866c:	45b0      	cmp	r8, r6
   2866e:	d929      	bls.n	286c4 <__aeabi_ddiv+0x550>
   28670:	0011      	movs	r1, r2
   28672:	4286      	cmp	r6, r0
   28674:	d000      	beq.n	28678 <__aeabi_ddiv+0x504>
   28676:	e765      	b.n	28544 <__aeabi_ddiv+0x3d0>
   28678:	9a03      	ldr	r2, [sp, #12]
   2867a:	4293      	cmp	r3, r2
   2867c:	d000      	beq.n	28680 <__aeabi_ddiv+0x50c>
   2867e:	e761      	b.n	28544 <__aeabi_ddiv+0x3d0>
   28680:	e762      	b.n	28548 <__aeabi_ddiv+0x3d4>
   28682:	2101      	movs	r1, #1
   28684:	4249      	negs	r1, r1
   28686:	2001      	movs	r0, #1
   28688:	1ac2      	subs	r2, r0, r3
   2868a:	2a38      	cmp	r2, #56	; 0x38
   2868c:	dd21      	ble.n	286d2 <__aeabi_ddiv+0x55e>
   2868e:	9b02      	ldr	r3, [sp, #8]
   28690:	4003      	ands	r3, r0
   28692:	469c      	mov	ip, r3
   28694:	e638      	b.n	28308 <__aeabi_ddiv+0x194>
   28696:	220f      	movs	r2, #15
   28698:	400a      	ands	r2, r1
   2869a:	2a04      	cmp	r2, #4
   2869c:	d100      	bne.n	286a0 <__aeabi_ddiv+0x52c>
   2869e:	e75b      	b.n	28558 <__aeabi_ddiv+0x3e4>
   286a0:	000a      	movs	r2, r1
   286a2:	1d11      	adds	r1, r2, #4
   286a4:	4291      	cmp	r1, r2
   286a6:	4192      	sbcs	r2, r2
   286a8:	4252      	negs	r2, r2
   286aa:	4493      	add	fp, r2
   286ac:	e754      	b.n	28558 <__aeabi_ddiv+0x3e4>
   286ae:	4b47      	ldr	r3, [pc, #284]	; (287cc <__aeabi_ddiv+0x658>)
   286b0:	18e3      	adds	r3, r4, r3
   286b2:	2b00      	cmp	r3, #0
   286b4:	dde5      	ble.n	28682 <__aeabi_ddiv+0x50e>
   286b6:	2201      	movs	r2, #1
   286b8:	4252      	negs	r2, r2
   286ba:	e7f2      	b.n	286a2 <__aeabi_ddiv+0x52e>
   286bc:	001d      	movs	r5, r3
   286be:	e6fa      	b.n	284b6 <__aeabi_ddiv+0x342>
   286c0:	469a      	mov	sl, r3
   286c2:	e71c      	b.n	284fe <__aeabi_ddiv+0x38a>
   286c4:	42b0      	cmp	r0, r6
   286c6:	d839      	bhi.n	2873c <__aeabi_ddiv+0x5c8>
   286c8:	d06e      	beq.n	287a8 <__aeabi_ddiv+0x634>
   286ca:	0011      	movs	r1, r2
   286cc:	e73a      	b.n	28544 <__aeabi_ddiv+0x3d0>
   286ce:	9302      	str	r3, [sp, #8]
   286d0:	e73a      	b.n	28548 <__aeabi_ddiv+0x3d4>
   286d2:	2a1f      	cmp	r2, #31
   286d4:	dc3c      	bgt.n	28750 <__aeabi_ddiv+0x5dc>
   286d6:	2320      	movs	r3, #32
   286d8:	1a9b      	subs	r3, r3, r2
   286da:	000c      	movs	r4, r1
   286dc:	4658      	mov	r0, fp
   286de:	4099      	lsls	r1, r3
   286e0:	4098      	lsls	r0, r3
   286e2:	1e4b      	subs	r3, r1, #1
   286e4:	4199      	sbcs	r1, r3
   286e6:	465b      	mov	r3, fp
   286e8:	40d4      	lsrs	r4, r2
   286ea:	40d3      	lsrs	r3, r2
   286ec:	4320      	orrs	r0, r4
   286ee:	4308      	orrs	r0, r1
   286f0:	001a      	movs	r2, r3
   286f2:	0743      	lsls	r3, r0, #29
   286f4:	d009      	beq.n	2870a <__aeabi_ddiv+0x596>
   286f6:	230f      	movs	r3, #15
   286f8:	4003      	ands	r3, r0
   286fa:	2b04      	cmp	r3, #4
   286fc:	d005      	beq.n	2870a <__aeabi_ddiv+0x596>
   286fe:	0001      	movs	r1, r0
   28700:	1d08      	adds	r0, r1, #4
   28702:	4288      	cmp	r0, r1
   28704:	419b      	sbcs	r3, r3
   28706:	425b      	negs	r3, r3
   28708:	18d2      	adds	r2, r2, r3
   2870a:	0213      	lsls	r3, r2, #8
   2870c:	d53a      	bpl.n	28784 <__aeabi_ddiv+0x610>
   2870e:	2301      	movs	r3, #1
   28710:	9a02      	ldr	r2, [sp, #8]
   28712:	2401      	movs	r4, #1
   28714:	401a      	ands	r2, r3
   28716:	2300      	movs	r3, #0
   28718:	4694      	mov	ip, r2
   2871a:	4698      	mov	r8, r3
   2871c:	2200      	movs	r2, #0
   2871e:	e5f7      	b.n	28310 <__aeabi_ddiv+0x19c>
   28720:	2102      	movs	r1, #2
   28722:	4249      	negs	r1, r1
   28724:	468c      	mov	ip, r1
   28726:	9d03      	ldr	r5, [sp, #12]
   28728:	44e3      	add	fp, ip
   2872a:	46ac      	mov	ip, r5
   2872c:	44e2      	add	sl, ip
   2872e:	45aa      	cmp	sl, r5
   28730:	41ad      	sbcs	r5, r5
   28732:	426d      	negs	r5, r5
   28734:	4445      	add	r5, r8
   28736:	18ed      	adds	r5, r5, r3
   28738:	1a2d      	subs	r5, r5, r0
   2873a:	e696      	b.n	2846a <__aeabi_ddiv+0x2f6>
   2873c:	1e8a      	subs	r2, r1, #2
   2873e:	9903      	ldr	r1, [sp, #12]
   28740:	004d      	lsls	r5, r1, #1
   28742:	428d      	cmp	r5, r1
   28744:	4189      	sbcs	r1, r1
   28746:	4249      	negs	r1, r1
   28748:	4441      	add	r1, r8
   2874a:	1876      	adds	r6, r6, r1
   2874c:	9503      	str	r5, [sp, #12]
   2874e:	e78f      	b.n	28670 <__aeabi_ddiv+0x4fc>
   28750:	201f      	movs	r0, #31
   28752:	4240      	negs	r0, r0
   28754:	1ac3      	subs	r3, r0, r3
   28756:	4658      	mov	r0, fp
   28758:	40d8      	lsrs	r0, r3
   2875a:	0003      	movs	r3, r0
   2875c:	2a20      	cmp	r2, #32
   2875e:	d028      	beq.n	287b2 <__aeabi_ddiv+0x63e>
   28760:	2040      	movs	r0, #64	; 0x40
   28762:	465d      	mov	r5, fp
   28764:	1a82      	subs	r2, r0, r2
   28766:	4095      	lsls	r5, r2
   28768:	4329      	orrs	r1, r5
   2876a:	1e4a      	subs	r2, r1, #1
   2876c:	4191      	sbcs	r1, r2
   2876e:	4319      	orrs	r1, r3
   28770:	2307      	movs	r3, #7
   28772:	2200      	movs	r2, #0
   28774:	400b      	ands	r3, r1
   28776:	d009      	beq.n	2878c <__aeabi_ddiv+0x618>
   28778:	230f      	movs	r3, #15
   2877a:	2200      	movs	r2, #0
   2877c:	400b      	ands	r3, r1
   2877e:	0008      	movs	r0, r1
   28780:	2b04      	cmp	r3, #4
   28782:	d1bd      	bne.n	28700 <__aeabi_ddiv+0x58c>
   28784:	0001      	movs	r1, r0
   28786:	0753      	lsls	r3, r2, #29
   28788:	0252      	lsls	r2, r2, #9
   2878a:	0b12      	lsrs	r2, r2, #12
   2878c:	08c9      	lsrs	r1, r1, #3
   2878e:	4319      	orrs	r1, r3
   28790:	2301      	movs	r3, #1
   28792:	4688      	mov	r8, r1
   28794:	9902      	ldr	r1, [sp, #8]
   28796:	2400      	movs	r4, #0
   28798:	4019      	ands	r1, r3
   2879a:	468c      	mov	ip, r1
   2879c:	e5b8      	b.n	28310 <__aeabi_ddiv+0x19c>
   2879e:	4552      	cmp	r2, sl
   287a0:	d8be      	bhi.n	28720 <__aeabi_ddiv+0x5ac>
   287a2:	468b      	mov	fp, r1
   287a4:	2500      	movs	r5, #0
   287a6:	e660      	b.n	2846a <__aeabi_ddiv+0x2f6>
   287a8:	9d03      	ldr	r5, [sp, #12]
   287aa:	429d      	cmp	r5, r3
   287ac:	d3c6      	bcc.n	2873c <__aeabi_ddiv+0x5c8>
   287ae:	0011      	movs	r1, r2
   287b0:	e762      	b.n	28678 <__aeabi_ddiv+0x504>
   287b2:	2500      	movs	r5, #0
   287b4:	e7d8      	b.n	28768 <__aeabi_ddiv+0x5f4>
   287b6:	2280      	movs	r2, #128	; 0x80
   287b8:	465b      	mov	r3, fp
   287ba:	0312      	lsls	r2, r2, #12
   287bc:	431a      	orrs	r2, r3
   287be:	9b01      	ldr	r3, [sp, #4]
   287c0:	0312      	lsls	r2, r2, #12
   287c2:	0b12      	lsrs	r2, r2, #12
   287c4:	469c      	mov	ip, r3
   287c6:	4688      	mov	r8, r1
   287c8:	4c03      	ldr	r4, [pc, #12]	; (287d8 <__aeabi_ddiv+0x664>)
   287ca:	e5a1      	b.n	28310 <__aeabi_ddiv+0x19c>
   287cc:	000003ff 	.word	0x000003ff
   287d0:	feffffff 	.word	0xfeffffff
   287d4:	000007fe 	.word	0x000007fe
   287d8:	000007ff 	.word	0x000007ff

000287dc <__eqdf2>:
   287dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   287de:	464f      	mov	r7, r9
   287e0:	4646      	mov	r6, r8
   287e2:	46d6      	mov	lr, sl
   287e4:	005c      	lsls	r4, r3, #1
   287e6:	b5c0      	push	{r6, r7, lr}
   287e8:	031f      	lsls	r7, r3, #12
   287ea:	0fdb      	lsrs	r3, r3, #31
   287ec:	469a      	mov	sl, r3
   287ee:	4b17      	ldr	r3, [pc, #92]	; (2884c <__eqdf2+0x70>)
   287f0:	030e      	lsls	r6, r1, #12
   287f2:	004d      	lsls	r5, r1, #1
   287f4:	4684      	mov	ip, r0
   287f6:	4680      	mov	r8, r0
   287f8:	0b36      	lsrs	r6, r6, #12
   287fa:	0d6d      	lsrs	r5, r5, #21
   287fc:	0fc9      	lsrs	r1, r1, #31
   287fe:	4691      	mov	r9, r2
   28800:	0b3f      	lsrs	r7, r7, #12
   28802:	0d64      	lsrs	r4, r4, #21
   28804:	2001      	movs	r0, #1
   28806:	429d      	cmp	r5, r3
   28808:	d008      	beq.n	2881c <__eqdf2+0x40>
   2880a:	429c      	cmp	r4, r3
   2880c:	d001      	beq.n	28812 <__eqdf2+0x36>
   2880e:	42a5      	cmp	r5, r4
   28810:	d00b      	beq.n	2882a <__eqdf2+0x4e>
   28812:	bc1c      	pop	{r2, r3, r4}
   28814:	4690      	mov	r8, r2
   28816:	4699      	mov	r9, r3
   28818:	46a2      	mov	sl, r4
   2881a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2881c:	4663      	mov	r3, ip
   2881e:	4333      	orrs	r3, r6
   28820:	d1f7      	bne.n	28812 <__eqdf2+0x36>
   28822:	42ac      	cmp	r4, r5
   28824:	d1f5      	bne.n	28812 <__eqdf2+0x36>
   28826:	433a      	orrs	r2, r7
   28828:	d1f3      	bne.n	28812 <__eqdf2+0x36>
   2882a:	2001      	movs	r0, #1
   2882c:	42be      	cmp	r6, r7
   2882e:	d1f0      	bne.n	28812 <__eqdf2+0x36>
   28830:	45c8      	cmp	r8, r9
   28832:	d1ee      	bne.n	28812 <__eqdf2+0x36>
   28834:	4551      	cmp	r1, sl
   28836:	d007      	beq.n	28848 <__eqdf2+0x6c>
   28838:	2d00      	cmp	r5, #0
   2883a:	d1ea      	bne.n	28812 <__eqdf2+0x36>
   2883c:	4663      	mov	r3, ip
   2883e:	431e      	orrs	r6, r3
   28840:	0030      	movs	r0, r6
   28842:	1e46      	subs	r6, r0, #1
   28844:	41b0      	sbcs	r0, r6
   28846:	e7e4      	b.n	28812 <__eqdf2+0x36>
   28848:	2000      	movs	r0, #0
   2884a:	e7e2      	b.n	28812 <__eqdf2+0x36>
   2884c:	000007ff 	.word	0x000007ff

00028850 <__gedf2>:
   28850:	b5f0      	push	{r4, r5, r6, r7, lr}
   28852:	4645      	mov	r5, r8
   28854:	46de      	mov	lr, fp
   28856:	4657      	mov	r7, sl
   28858:	464e      	mov	r6, r9
   2885a:	b5e0      	push	{r5, r6, r7, lr}
   2885c:	031f      	lsls	r7, r3, #12
   2885e:	0b3d      	lsrs	r5, r7, #12
   28860:	4f2c      	ldr	r7, [pc, #176]	; (28914 <__gedf2+0xc4>)
   28862:	030e      	lsls	r6, r1, #12
   28864:	004c      	lsls	r4, r1, #1
   28866:	46ab      	mov	fp, r5
   28868:	005d      	lsls	r5, r3, #1
   2886a:	4684      	mov	ip, r0
   2886c:	0b36      	lsrs	r6, r6, #12
   2886e:	0d64      	lsrs	r4, r4, #21
   28870:	0fc9      	lsrs	r1, r1, #31
   28872:	4690      	mov	r8, r2
   28874:	0d6d      	lsrs	r5, r5, #21
   28876:	0fdb      	lsrs	r3, r3, #31
   28878:	42bc      	cmp	r4, r7
   2887a:	d02a      	beq.n	288d2 <__gedf2+0x82>
   2887c:	4f25      	ldr	r7, [pc, #148]	; (28914 <__gedf2+0xc4>)
   2887e:	42bd      	cmp	r5, r7
   28880:	d02d      	beq.n	288de <__gedf2+0x8e>
   28882:	2c00      	cmp	r4, #0
   28884:	d10f      	bne.n	288a6 <__gedf2+0x56>
   28886:	4330      	orrs	r0, r6
   28888:	0007      	movs	r7, r0
   2888a:	4681      	mov	r9, r0
   2888c:	4278      	negs	r0, r7
   2888e:	4178      	adcs	r0, r7
   28890:	b2c0      	uxtb	r0, r0
   28892:	2d00      	cmp	r5, #0
   28894:	d117      	bne.n	288c6 <__gedf2+0x76>
   28896:	465f      	mov	r7, fp
   28898:	433a      	orrs	r2, r7
   2889a:	d114      	bne.n	288c6 <__gedf2+0x76>
   2889c:	464b      	mov	r3, r9
   2889e:	2000      	movs	r0, #0
   288a0:	2b00      	cmp	r3, #0
   288a2:	d00a      	beq.n	288ba <__gedf2+0x6a>
   288a4:	e006      	b.n	288b4 <__gedf2+0x64>
   288a6:	2d00      	cmp	r5, #0
   288a8:	d102      	bne.n	288b0 <__gedf2+0x60>
   288aa:	4658      	mov	r0, fp
   288ac:	4302      	orrs	r2, r0
   288ae:	d001      	beq.n	288b4 <__gedf2+0x64>
   288b0:	4299      	cmp	r1, r3
   288b2:	d018      	beq.n	288e6 <__gedf2+0x96>
   288b4:	4248      	negs	r0, r1
   288b6:	2101      	movs	r1, #1
   288b8:	4308      	orrs	r0, r1
   288ba:	bc3c      	pop	{r2, r3, r4, r5}
   288bc:	4690      	mov	r8, r2
   288be:	4699      	mov	r9, r3
   288c0:	46a2      	mov	sl, r4
   288c2:	46ab      	mov	fp, r5
   288c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   288c6:	2800      	cmp	r0, #0
   288c8:	d0f2      	beq.n	288b0 <__gedf2+0x60>
   288ca:	2001      	movs	r0, #1
   288cc:	3b01      	subs	r3, #1
   288ce:	4318      	orrs	r0, r3
   288d0:	e7f3      	b.n	288ba <__gedf2+0x6a>
   288d2:	0037      	movs	r7, r6
   288d4:	4307      	orrs	r7, r0
   288d6:	d0d1      	beq.n	2887c <__gedf2+0x2c>
   288d8:	2002      	movs	r0, #2
   288da:	4240      	negs	r0, r0
   288dc:	e7ed      	b.n	288ba <__gedf2+0x6a>
   288de:	465f      	mov	r7, fp
   288e0:	4317      	orrs	r7, r2
   288e2:	d0ce      	beq.n	28882 <__gedf2+0x32>
   288e4:	e7f8      	b.n	288d8 <__gedf2+0x88>
   288e6:	42ac      	cmp	r4, r5
   288e8:	dce4      	bgt.n	288b4 <__gedf2+0x64>
   288ea:	da03      	bge.n	288f4 <__gedf2+0xa4>
   288ec:	1e48      	subs	r0, r1, #1
   288ee:	2101      	movs	r1, #1
   288f0:	4308      	orrs	r0, r1
   288f2:	e7e2      	b.n	288ba <__gedf2+0x6a>
   288f4:	455e      	cmp	r6, fp
   288f6:	d8dd      	bhi.n	288b4 <__gedf2+0x64>
   288f8:	d006      	beq.n	28908 <__gedf2+0xb8>
   288fa:	2000      	movs	r0, #0
   288fc:	455e      	cmp	r6, fp
   288fe:	d2dc      	bcs.n	288ba <__gedf2+0x6a>
   28900:	2301      	movs	r3, #1
   28902:	1e48      	subs	r0, r1, #1
   28904:	4318      	orrs	r0, r3
   28906:	e7d8      	b.n	288ba <__gedf2+0x6a>
   28908:	45c4      	cmp	ip, r8
   2890a:	d8d3      	bhi.n	288b4 <__gedf2+0x64>
   2890c:	2000      	movs	r0, #0
   2890e:	45c4      	cmp	ip, r8
   28910:	d3f6      	bcc.n	28900 <__gedf2+0xb0>
   28912:	e7d2      	b.n	288ba <__gedf2+0x6a>
   28914:	000007ff 	.word	0x000007ff

00028918 <__ledf2>:
   28918:	b5f0      	push	{r4, r5, r6, r7, lr}
   2891a:	464e      	mov	r6, r9
   2891c:	4645      	mov	r5, r8
   2891e:	46de      	mov	lr, fp
   28920:	4657      	mov	r7, sl
   28922:	005c      	lsls	r4, r3, #1
   28924:	b5e0      	push	{r5, r6, r7, lr}
   28926:	031f      	lsls	r7, r3, #12
   28928:	0fdb      	lsrs	r3, r3, #31
   2892a:	4699      	mov	r9, r3
   2892c:	4b2a      	ldr	r3, [pc, #168]	; (289d8 <__ledf2+0xc0>)
   2892e:	030e      	lsls	r6, r1, #12
   28930:	004d      	lsls	r5, r1, #1
   28932:	0fc9      	lsrs	r1, r1, #31
   28934:	4684      	mov	ip, r0
   28936:	0b36      	lsrs	r6, r6, #12
   28938:	0d6d      	lsrs	r5, r5, #21
   2893a:	468b      	mov	fp, r1
   2893c:	4690      	mov	r8, r2
   2893e:	0b3f      	lsrs	r7, r7, #12
   28940:	0d64      	lsrs	r4, r4, #21
   28942:	429d      	cmp	r5, r3
   28944:	d020      	beq.n	28988 <__ledf2+0x70>
   28946:	4b24      	ldr	r3, [pc, #144]	; (289d8 <__ledf2+0xc0>)
   28948:	429c      	cmp	r4, r3
   2894a:	d022      	beq.n	28992 <__ledf2+0x7a>
   2894c:	2d00      	cmp	r5, #0
   2894e:	d112      	bne.n	28976 <__ledf2+0x5e>
   28950:	4330      	orrs	r0, r6
   28952:	4243      	negs	r3, r0
   28954:	4143      	adcs	r3, r0
   28956:	b2db      	uxtb	r3, r3
   28958:	2c00      	cmp	r4, #0
   2895a:	d01f      	beq.n	2899c <__ledf2+0x84>
   2895c:	2b00      	cmp	r3, #0
   2895e:	d00c      	beq.n	2897a <__ledf2+0x62>
   28960:	464b      	mov	r3, r9
   28962:	2001      	movs	r0, #1
   28964:	3b01      	subs	r3, #1
   28966:	4303      	orrs	r3, r0
   28968:	0018      	movs	r0, r3
   2896a:	bc3c      	pop	{r2, r3, r4, r5}
   2896c:	4690      	mov	r8, r2
   2896e:	4699      	mov	r9, r3
   28970:	46a2      	mov	sl, r4
   28972:	46ab      	mov	fp, r5
   28974:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28976:	2c00      	cmp	r4, #0
   28978:	d016      	beq.n	289a8 <__ledf2+0x90>
   2897a:	45cb      	cmp	fp, r9
   2897c:	d017      	beq.n	289ae <__ledf2+0x96>
   2897e:	465b      	mov	r3, fp
   28980:	4259      	negs	r1, r3
   28982:	2301      	movs	r3, #1
   28984:	430b      	orrs	r3, r1
   28986:	e7ef      	b.n	28968 <__ledf2+0x50>
   28988:	0031      	movs	r1, r6
   2898a:	2302      	movs	r3, #2
   2898c:	4301      	orrs	r1, r0
   2898e:	d1eb      	bne.n	28968 <__ledf2+0x50>
   28990:	e7d9      	b.n	28946 <__ledf2+0x2e>
   28992:	0039      	movs	r1, r7
   28994:	2302      	movs	r3, #2
   28996:	4311      	orrs	r1, r2
   28998:	d1e6      	bne.n	28968 <__ledf2+0x50>
   2899a:	e7d7      	b.n	2894c <__ledf2+0x34>
   2899c:	433a      	orrs	r2, r7
   2899e:	d1dd      	bne.n	2895c <__ledf2+0x44>
   289a0:	2300      	movs	r3, #0
   289a2:	2800      	cmp	r0, #0
   289a4:	d0e0      	beq.n	28968 <__ledf2+0x50>
   289a6:	e7ea      	b.n	2897e <__ledf2+0x66>
   289a8:	433a      	orrs	r2, r7
   289aa:	d1e6      	bne.n	2897a <__ledf2+0x62>
   289ac:	e7e7      	b.n	2897e <__ledf2+0x66>
   289ae:	42a5      	cmp	r5, r4
   289b0:	dce5      	bgt.n	2897e <__ledf2+0x66>
   289b2:	db05      	blt.n	289c0 <__ledf2+0xa8>
   289b4:	42be      	cmp	r6, r7
   289b6:	d8e2      	bhi.n	2897e <__ledf2+0x66>
   289b8:	d007      	beq.n	289ca <__ledf2+0xb2>
   289ba:	2300      	movs	r3, #0
   289bc:	42be      	cmp	r6, r7
   289be:	d2d3      	bcs.n	28968 <__ledf2+0x50>
   289c0:	4659      	mov	r1, fp
   289c2:	2301      	movs	r3, #1
   289c4:	3901      	subs	r1, #1
   289c6:	430b      	orrs	r3, r1
   289c8:	e7ce      	b.n	28968 <__ledf2+0x50>
   289ca:	45c4      	cmp	ip, r8
   289cc:	d8d7      	bhi.n	2897e <__ledf2+0x66>
   289ce:	2300      	movs	r3, #0
   289d0:	45c4      	cmp	ip, r8
   289d2:	d3f5      	bcc.n	289c0 <__ledf2+0xa8>
   289d4:	e7c8      	b.n	28968 <__ledf2+0x50>
   289d6:	46c0      	nop			; (mov r8, r8)
   289d8:	000007ff 	.word	0x000007ff

000289dc <__aeabi_dmul>:
   289dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   289de:	4657      	mov	r7, sl
   289e0:	4645      	mov	r5, r8
   289e2:	46de      	mov	lr, fp
   289e4:	464e      	mov	r6, r9
   289e6:	b5e0      	push	{r5, r6, r7, lr}
   289e8:	030c      	lsls	r4, r1, #12
   289ea:	4698      	mov	r8, r3
   289ec:	004e      	lsls	r6, r1, #1
   289ee:	0b23      	lsrs	r3, r4, #12
   289f0:	b087      	sub	sp, #28
   289f2:	0007      	movs	r7, r0
   289f4:	4692      	mov	sl, r2
   289f6:	469b      	mov	fp, r3
   289f8:	0d76      	lsrs	r6, r6, #21
   289fa:	0fcd      	lsrs	r5, r1, #31
   289fc:	2e00      	cmp	r6, #0
   289fe:	d06b      	beq.n	28ad8 <__aeabi_dmul+0xfc>
   28a00:	4b6d      	ldr	r3, [pc, #436]	; (28bb8 <__aeabi_dmul+0x1dc>)
   28a02:	429e      	cmp	r6, r3
   28a04:	d035      	beq.n	28a72 <__aeabi_dmul+0x96>
   28a06:	2480      	movs	r4, #128	; 0x80
   28a08:	465b      	mov	r3, fp
   28a0a:	0f42      	lsrs	r2, r0, #29
   28a0c:	0424      	lsls	r4, r4, #16
   28a0e:	00db      	lsls	r3, r3, #3
   28a10:	4314      	orrs	r4, r2
   28a12:	431c      	orrs	r4, r3
   28a14:	00c3      	lsls	r3, r0, #3
   28a16:	4699      	mov	r9, r3
   28a18:	4b68      	ldr	r3, [pc, #416]	; (28bbc <__aeabi_dmul+0x1e0>)
   28a1a:	46a3      	mov	fp, r4
   28a1c:	469c      	mov	ip, r3
   28a1e:	2300      	movs	r3, #0
   28a20:	2700      	movs	r7, #0
   28a22:	4466      	add	r6, ip
   28a24:	9302      	str	r3, [sp, #8]
   28a26:	4643      	mov	r3, r8
   28a28:	031c      	lsls	r4, r3, #12
   28a2a:	005a      	lsls	r2, r3, #1
   28a2c:	0fdb      	lsrs	r3, r3, #31
   28a2e:	4650      	mov	r0, sl
   28a30:	0b24      	lsrs	r4, r4, #12
   28a32:	0d52      	lsrs	r2, r2, #21
   28a34:	4698      	mov	r8, r3
   28a36:	d100      	bne.n	28a3a <__aeabi_dmul+0x5e>
   28a38:	e076      	b.n	28b28 <__aeabi_dmul+0x14c>
   28a3a:	4b5f      	ldr	r3, [pc, #380]	; (28bb8 <__aeabi_dmul+0x1dc>)
   28a3c:	429a      	cmp	r2, r3
   28a3e:	d06d      	beq.n	28b1c <__aeabi_dmul+0x140>
   28a40:	2380      	movs	r3, #128	; 0x80
   28a42:	0f41      	lsrs	r1, r0, #29
   28a44:	041b      	lsls	r3, r3, #16
   28a46:	430b      	orrs	r3, r1
   28a48:	495c      	ldr	r1, [pc, #368]	; (28bbc <__aeabi_dmul+0x1e0>)
   28a4a:	00e4      	lsls	r4, r4, #3
   28a4c:	468c      	mov	ip, r1
   28a4e:	431c      	orrs	r4, r3
   28a50:	00c3      	lsls	r3, r0, #3
   28a52:	2000      	movs	r0, #0
   28a54:	4462      	add	r2, ip
   28a56:	4641      	mov	r1, r8
   28a58:	18b6      	adds	r6, r6, r2
   28a5a:	4069      	eors	r1, r5
   28a5c:	1c72      	adds	r2, r6, #1
   28a5e:	9101      	str	r1, [sp, #4]
   28a60:	4694      	mov	ip, r2
   28a62:	4307      	orrs	r7, r0
   28a64:	2f0f      	cmp	r7, #15
   28a66:	d900      	bls.n	28a6a <__aeabi_dmul+0x8e>
   28a68:	e0b0      	b.n	28bcc <__aeabi_dmul+0x1f0>
   28a6a:	4a55      	ldr	r2, [pc, #340]	; (28bc0 <__aeabi_dmul+0x1e4>)
   28a6c:	00bf      	lsls	r7, r7, #2
   28a6e:	59d2      	ldr	r2, [r2, r7]
   28a70:	4697      	mov	pc, r2
   28a72:	465b      	mov	r3, fp
   28a74:	4303      	orrs	r3, r0
   28a76:	4699      	mov	r9, r3
   28a78:	d000      	beq.n	28a7c <__aeabi_dmul+0xa0>
   28a7a:	e087      	b.n	28b8c <__aeabi_dmul+0x1b0>
   28a7c:	2300      	movs	r3, #0
   28a7e:	469b      	mov	fp, r3
   28a80:	3302      	adds	r3, #2
   28a82:	2708      	movs	r7, #8
   28a84:	9302      	str	r3, [sp, #8]
   28a86:	e7ce      	b.n	28a26 <__aeabi_dmul+0x4a>
   28a88:	4642      	mov	r2, r8
   28a8a:	9201      	str	r2, [sp, #4]
   28a8c:	2802      	cmp	r0, #2
   28a8e:	d067      	beq.n	28b60 <__aeabi_dmul+0x184>
   28a90:	2803      	cmp	r0, #3
   28a92:	d100      	bne.n	28a96 <__aeabi_dmul+0xba>
   28a94:	e20e      	b.n	28eb4 <__aeabi_dmul+0x4d8>
   28a96:	2801      	cmp	r0, #1
   28a98:	d000      	beq.n	28a9c <__aeabi_dmul+0xc0>
   28a9a:	e162      	b.n	28d62 <__aeabi_dmul+0x386>
   28a9c:	2300      	movs	r3, #0
   28a9e:	2400      	movs	r4, #0
   28aa0:	2200      	movs	r2, #0
   28aa2:	4699      	mov	r9, r3
   28aa4:	9901      	ldr	r1, [sp, #4]
   28aa6:	4001      	ands	r1, r0
   28aa8:	b2cd      	uxtb	r5, r1
   28aaa:	2100      	movs	r1, #0
   28aac:	0312      	lsls	r2, r2, #12
   28aae:	0d0b      	lsrs	r3, r1, #20
   28ab0:	0b12      	lsrs	r2, r2, #12
   28ab2:	051b      	lsls	r3, r3, #20
   28ab4:	4313      	orrs	r3, r2
   28ab6:	4a43      	ldr	r2, [pc, #268]	; (28bc4 <__aeabi_dmul+0x1e8>)
   28ab8:	0524      	lsls	r4, r4, #20
   28aba:	4013      	ands	r3, r2
   28abc:	431c      	orrs	r4, r3
   28abe:	0064      	lsls	r4, r4, #1
   28ac0:	07ed      	lsls	r5, r5, #31
   28ac2:	0864      	lsrs	r4, r4, #1
   28ac4:	432c      	orrs	r4, r5
   28ac6:	4648      	mov	r0, r9
   28ac8:	0021      	movs	r1, r4
   28aca:	b007      	add	sp, #28
   28acc:	bc3c      	pop	{r2, r3, r4, r5}
   28ace:	4690      	mov	r8, r2
   28ad0:	4699      	mov	r9, r3
   28ad2:	46a2      	mov	sl, r4
   28ad4:	46ab      	mov	fp, r5
   28ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28ad8:	4303      	orrs	r3, r0
   28ada:	4699      	mov	r9, r3
   28adc:	d04f      	beq.n	28b7e <__aeabi_dmul+0x1a2>
   28ade:	465b      	mov	r3, fp
   28ae0:	2b00      	cmp	r3, #0
   28ae2:	d100      	bne.n	28ae6 <__aeabi_dmul+0x10a>
   28ae4:	e189      	b.n	28dfa <__aeabi_dmul+0x41e>
   28ae6:	4658      	mov	r0, fp
   28ae8:	f000 fe2e 	bl	29748 <__clzsi2>
   28aec:	0003      	movs	r3, r0
   28aee:	3b0b      	subs	r3, #11
   28af0:	2b1c      	cmp	r3, #28
   28af2:	dd00      	ble.n	28af6 <__aeabi_dmul+0x11a>
   28af4:	e17a      	b.n	28dec <__aeabi_dmul+0x410>
   28af6:	221d      	movs	r2, #29
   28af8:	1ad3      	subs	r3, r2, r3
   28afa:	003a      	movs	r2, r7
   28afc:	0001      	movs	r1, r0
   28afe:	465c      	mov	r4, fp
   28b00:	40da      	lsrs	r2, r3
   28b02:	3908      	subs	r1, #8
   28b04:	408c      	lsls	r4, r1
   28b06:	0013      	movs	r3, r2
   28b08:	408f      	lsls	r7, r1
   28b0a:	4323      	orrs	r3, r4
   28b0c:	469b      	mov	fp, r3
   28b0e:	46b9      	mov	r9, r7
   28b10:	2300      	movs	r3, #0
   28b12:	4e2d      	ldr	r6, [pc, #180]	; (28bc8 <__aeabi_dmul+0x1ec>)
   28b14:	2700      	movs	r7, #0
   28b16:	1a36      	subs	r6, r6, r0
   28b18:	9302      	str	r3, [sp, #8]
   28b1a:	e784      	b.n	28a26 <__aeabi_dmul+0x4a>
   28b1c:	4653      	mov	r3, sl
   28b1e:	4323      	orrs	r3, r4
   28b20:	d12a      	bne.n	28b78 <__aeabi_dmul+0x19c>
   28b22:	2400      	movs	r4, #0
   28b24:	2002      	movs	r0, #2
   28b26:	e796      	b.n	28a56 <__aeabi_dmul+0x7a>
   28b28:	4653      	mov	r3, sl
   28b2a:	4323      	orrs	r3, r4
   28b2c:	d020      	beq.n	28b70 <__aeabi_dmul+0x194>
   28b2e:	2c00      	cmp	r4, #0
   28b30:	d100      	bne.n	28b34 <__aeabi_dmul+0x158>
   28b32:	e157      	b.n	28de4 <__aeabi_dmul+0x408>
   28b34:	0020      	movs	r0, r4
   28b36:	f000 fe07 	bl	29748 <__clzsi2>
   28b3a:	0003      	movs	r3, r0
   28b3c:	3b0b      	subs	r3, #11
   28b3e:	2b1c      	cmp	r3, #28
   28b40:	dd00      	ble.n	28b44 <__aeabi_dmul+0x168>
   28b42:	e149      	b.n	28dd8 <__aeabi_dmul+0x3fc>
   28b44:	211d      	movs	r1, #29
   28b46:	1acb      	subs	r3, r1, r3
   28b48:	4651      	mov	r1, sl
   28b4a:	0002      	movs	r2, r0
   28b4c:	40d9      	lsrs	r1, r3
   28b4e:	4653      	mov	r3, sl
   28b50:	3a08      	subs	r2, #8
   28b52:	4094      	lsls	r4, r2
   28b54:	4093      	lsls	r3, r2
   28b56:	430c      	orrs	r4, r1
   28b58:	4a1b      	ldr	r2, [pc, #108]	; (28bc8 <__aeabi_dmul+0x1ec>)
   28b5a:	1a12      	subs	r2, r2, r0
   28b5c:	2000      	movs	r0, #0
   28b5e:	e77a      	b.n	28a56 <__aeabi_dmul+0x7a>
   28b60:	2501      	movs	r5, #1
   28b62:	9b01      	ldr	r3, [sp, #4]
   28b64:	4c14      	ldr	r4, [pc, #80]	; (28bb8 <__aeabi_dmul+0x1dc>)
   28b66:	401d      	ands	r5, r3
   28b68:	2300      	movs	r3, #0
   28b6a:	2200      	movs	r2, #0
   28b6c:	4699      	mov	r9, r3
   28b6e:	e79c      	b.n	28aaa <__aeabi_dmul+0xce>
   28b70:	2400      	movs	r4, #0
   28b72:	2200      	movs	r2, #0
   28b74:	2001      	movs	r0, #1
   28b76:	e76e      	b.n	28a56 <__aeabi_dmul+0x7a>
   28b78:	4653      	mov	r3, sl
   28b7a:	2003      	movs	r0, #3
   28b7c:	e76b      	b.n	28a56 <__aeabi_dmul+0x7a>
   28b7e:	2300      	movs	r3, #0
   28b80:	469b      	mov	fp, r3
   28b82:	3301      	adds	r3, #1
   28b84:	2704      	movs	r7, #4
   28b86:	2600      	movs	r6, #0
   28b88:	9302      	str	r3, [sp, #8]
   28b8a:	e74c      	b.n	28a26 <__aeabi_dmul+0x4a>
   28b8c:	2303      	movs	r3, #3
   28b8e:	4681      	mov	r9, r0
   28b90:	270c      	movs	r7, #12
   28b92:	9302      	str	r3, [sp, #8]
   28b94:	e747      	b.n	28a26 <__aeabi_dmul+0x4a>
   28b96:	2280      	movs	r2, #128	; 0x80
   28b98:	2300      	movs	r3, #0
   28b9a:	2500      	movs	r5, #0
   28b9c:	0312      	lsls	r2, r2, #12
   28b9e:	4699      	mov	r9, r3
   28ba0:	4c05      	ldr	r4, [pc, #20]	; (28bb8 <__aeabi_dmul+0x1dc>)
   28ba2:	e782      	b.n	28aaa <__aeabi_dmul+0xce>
   28ba4:	465c      	mov	r4, fp
   28ba6:	464b      	mov	r3, r9
   28ba8:	9802      	ldr	r0, [sp, #8]
   28baa:	e76f      	b.n	28a8c <__aeabi_dmul+0xb0>
   28bac:	465c      	mov	r4, fp
   28bae:	464b      	mov	r3, r9
   28bb0:	9501      	str	r5, [sp, #4]
   28bb2:	9802      	ldr	r0, [sp, #8]
   28bb4:	e76a      	b.n	28a8c <__aeabi_dmul+0xb0>
   28bb6:	46c0      	nop			; (mov r8, r8)
   28bb8:	000007ff 	.word	0x000007ff
   28bbc:	fffffc01 	.word	0xfffffc01
   28bc0:	0002b950 	.word	0x0002b950
   28bc4:	800fffff 	.word	0x800fffff
   28bc8:	fffffc0d 	.word	0xfffffc0d
   28bcc:	464a      	mov	r2, r9
   28bce:	4649      	mov	r1, r9
   28bd0:	0c17      	lsrs	r7, r2, #16
   28bd2:	0c1a      	lsrs	r2, r3, #16
   28bd4:	041b      	lsls	r3, r3, #16
   28bd6:	0c1b      	lsrs	r3, r3, #16
   28bd8:	0408      	lsls	r0, r1, #16
   28bda:	0019      	movs	r1, r3
   28bdc:	0c00      	lsrs	r0, r0, #16
   28bde:	4341      	muls	r1, r0
   28be0:	0015      	movs	r5, r2
   28be2:	4688      	mov	r8, r1
   28be4:	0019      	movs	r1, r3
   28be6:	437d      	muls	r5, r7
   28be8:	4379      	muls	r1, r7
   28bea:	9503      	str	r5, [sp, #12]
   28bec:	4689      	mov	r9, r1
   28bee:	0029      	movs	r1, r5
   28bf0:	0015      	movs	r5, r2
   28bf2:	4345      	muls	r5, r0
   28bf4:	444d      	add	r5, r9
   28bf6:	9502      	str	r5, [sp, #8]
   28bf8:	4645      	mov	r5, r8
   28bfa:	0c2d      	lsrs	r5, r5, #16
   28bfc:	46aa      	mov	sl, r5
   28bfe:	9d02      	ldr	r5, [sp, #8]
   28c00:	4455      	add	r5, sl
   28c02:	45a9      	cmp	r9, r5
   28c04:	d906      	bls.n	28c14 <__aeabi_dmul+0x238>
   28c06:	468a      	mov	sl, r1
   28c08:	2180      	movs	r1, #128	; 0x80
   28c0a:	0249      	lsls	r1, r1, #9
   28c0c:	4689      	mov	r9, r1
   28c0e:	44ca      	add	sl, r9
   28c10:	4651      	mov	r1, sl
   28c12:	9103      	str	r1, [sp, #12]
   28c14:	0c29      	lsrs	r1, r5, #16
   28c16:	9104      	str	r1, [sp, #16]
   28c18:	4641      	mov	r1, r8
   28c1a:	0409      	lsls	r1, r1, #16
   28c1c:	042d      	lsls	r5, r5, #16
   28c1e:	0c09      	lsrs	r1, r1, #16
   28c20:	4688      	mov	r8, r1
   28c22:	0029      	movs	r1, r5
   28c24:	0c25      	lsrs	r5, r4, #16
   28c26:	0424      	lsls	r4, r4, #16
   28c28:	4441      	add	r1, r8
   28c2a:	0c24      	lsrs	r4, r4, #16
   28c2c:	9105      	str	r1, [sp, #20]
   28c2e:	0021      	movs	r1, r4
   28c30:	4341      	muls	r1, r0
   28c32:	4688      	mov	r8, r1
   28c34:	0021      	movs	r1, r4
   28c36:	4379      	muls	r1, r7
   28c38:	468a      	mov	sl, r1
   28c3a:	4368      	muls	r0, r5
   28c3c:	4641      	mov	r1, r8
   28c3e:	4450      	add	r0, sl
   28c40:	4681      	mov	r9, r0
   28c42:	0c08      	lsrs	r0, r1, #16
   28c44:	4448      	add	r0, r9
   28c46:	436f      	muls	r7, r5
   28c48:	4582      	cmp	sl, r0
   28c4a:	d903      	bls.n	28c54 <__aeabi_dmul+0x278>
   28c4c:	2180      	movs	r1, #128	; 0x80
   28c4e:	0249      	lsls	r1, r1, #9
   28c50:	4689      	mov	r9, r1
   28c52:	444f      	add	r7, r9
   28c54:	0c01      	lsrs	r1, r0, #16
   28c56:	4689      	mov	r9, r1
   28c58:	0039      	movs	r1, r7
   28c5a:	4449      	add	r1, r9
   28c5c:	9102      	str	r1, [sp, #8]
   28c5e:	4641      	mov	r1, r8
   28c60:	040f      	lsls	r7, r1, #16
   28c62:	9904      	ldr	r1, [sp, #16]
   28c64:	0c3f      	lsrs	r7, r7, #16
   28c66:	4688      	mov	r8, r1
   28c68:	0400      	lsls	r0, r0, #16
   28c6a:	19c0      	adds	r0, r0, r7
   28c6c:	4480      	add	r8, r0
   28c6e:	4641      	mov	r1, r8
   28c70:	9104      	str	r1, [sp, #16]
   28c72:	4659      	mov	r1, fp
   28c74:	0c0f      	lsrs	r7, r1, #16
   28c76:	0409      	lsls	r1, r1, #16
   28c78:	0c09      	lsrs	r1, r1, #16
   28c7a:	4688      	mov	r8, r1
   28c7c:	4359      	muls	r1, r3
   28c7e:	468a      	mov	sl, r1
   28c80:	0039      	movs	r1, r7
   28c82:	4351      	muls	r1, r2
   28c84:	4689      	mov	r9, r1
   28c86:	4641      	mov	r1, r8
   28c88:	434a      	muls	r2, r1
   28c8a:	4651      	mov	r1, sl
   28c8c:	0c09      	lsrs	r1, r1, #16
   28c8e:	468b      	mov	fp, r1
   28c90:	437b      	muls	r3, r7
   28c92:	18d2      	adds	r2, r2, r3
   28c94:	445a      	add	r2, fp
   28c96:	4293      	cmp	r3, r2
   28c98:	d903      	bls.n	28ca2 <__aeabi_dmul+0x2c6>
   28c9a:	2380      	movs	r3, #128	; 0x80
   28c9c:	025b      	lsls	r3, r3, #9
   28c9e:	469b      	mov	fp, r3
   28ca0:	44d9      	add	r9, fp
   28ca2:	4651      	mov	r1, sl
   28ca4:	0409      	lsls	r1, r1, #16
   28ca6:	0c09      	lsrs	r1, r1, #16
   28ca8:	468a      	mov	sl, r1
   28caa:	4641      	mov	r1, r8
   28cac:	4361      	muls	r1, r4
   28cae:	437c      	muls	r4, r7
   28cb0:	0c13      	lsrs	r3, r2, #16
   28cb2:	0412      	lsls	r2, r2, #16
   28cb4:	444b      	add	r3, r9
   28cb6:	4452      	add	r2, sl
   28cb8:	46a1      	mov	r9, r4
   28cba:	468a      	mov	sl, r1
   28cbc:	003c      	movs	r4, r7
   28cbe:	4641      	mov	r1, r8
   28cc0:	436c      	muls	r4, r5
   28cc2:	434d      	muls	r5, r1
   28cc4:	4651      	mov	r1, sl
   28cc6:	444d      	add	r5, r9
   28cc8:	0c0f      	lsrs	r7, r1, #16
   28cca:	197d      	adds	r5, r7, r5
   28ccc:	45a9      	cmp	r9, r5
   28cce:	d903      	bls.n	28cd8 <__aeabi_dmul+0x2fc>
   28cd0:	2180      	movs	r1, #128	; 0x80
   28cd2:	0249      	lsls	r1, r1, #9
   28cd4:	4688      	mov	r8, r1
   28cd6:	4444      	add	r4, r8
   28cd8:	9f04      	ldr	r7, [sp, #16]
   28cda:	9903      	ldr	r1, [sp, #12]
   28cdc:	46b8      	mov	r8, r7
   28cde:	4441      	add	r1, r8
   28ce0:	468b      	mov	fp, r1
   28ce2:	4583      	cmp	fp, r0
   28ce4:	4180      	sbcs	r0, r0
   28ce6:	4241      	negs	r1, r0
   28ce8:	4688      	mov	r8, r1
   28cea:	4651      	mov	r1, sl
   28cec:	0408      	lsls	r0, r1, #16
   28cee:	042f      	lsls	r7, r5, #16
   28cf0:	0c00      	lsrs	r0, r0, #16
   28cf2:	183f      	adds	r7, r7, r0
   28cf4:	4658      	mov	r0, fp
   28cf6:	9902      	ldr	r1, [sp, #8]
   28cf8:	1810      	adds	r0, r2, r0
   28cfa:	4689      	mov	r9, r1
   28cfc:	4290      	cmp	r0, r2
   28cfe:	4192      	sbcs	r2, r2
   28d00:	444f      	add	r7, r9
   28d02:	46ba      	mov	sl, r7
   28d04:	4252      	negs	r2, r2
   28d06:	4699      	mov	r9, r3
   28d08:	4693      	mov	fp, r2
   28d0a:	44c2      	add	sl, r8
   28d0c:	44d1      	add	r9, sl
   28d0e:	44cb      	add	fp, r9
   28d10:	428f      	cmp	r7, r1
   28d12:	41bf      	sbcs	r7, r7
   28d14:	45c2      	cmp	sl, r8
   28d16:	4189      	sbcs	r1, r1
   28d18:	4599      	cmp	r9, r3
   28d1a:	419b      	sbcs	r3, r3
   28d1c:	4593      	cmp	fp, r2
   28d1e:	4192      	sbcs	r2, r2
   28d20:	427f      	negs	r7, r7
   28d22:	4249      	negs	r1, r1
   28d24:	0c2d      	lsrs	r5, r5, #16
   28d26:	4252      	negs	r2, r2
   28d28:	430f      	orrs	r7, r1
   28d2a:	425b      	negs	r3, r3
   28d2c:	4313      	orrs	r3, r2
   28d2e:	197f      	adds	r7, r7, r5
   28d30:	18ff      	adds	r7, r7, r3
   28d32:	465b      	mov	r3, fp
   28d34:	193c      	adds	r4, r7, r4
   28d36:	0ddb      	lsrs	r3, r3, #23
   28d38:	9a05      	ldr	r2, [sp, #20]
   28d3a:	0264      	lsls	r4, r4, #9
   28d3c:	431c      	orrs	r4, r3
   28d3e:	0243      	lsls	r3, r0, #9
   28d40:	4313      	orrs	r3, r2
   28d42:	1e5d      	subs	r5, r3, #1
   28d44:	41ab      	sbcs	r3, r5
   28d46:	465a      	mov	r2, fp
   28d48:	0dc0      	lsrs	r0, r0, #23
   28d4a:	4303      	orrs	r3, r0
   28d4c:	0252      	lsls	r2, r2, #9
   28d4e:	4313      	orrs	r3, r2
   28d50:	01e2      	lsls	r2, r4, #7
   28d52:	d556      	bpl.n	28e02 <__aeabi_dmul+0x426>
   28d54:	2001      	movs	r0, #1
   28d56:	085a      	lsrs	r2, r3, #1
   28d58:	4003      	ands	r3, r0
   28d5a:	4313      	orrs	r3, r2
   28d5c:	07e2      	lsls	r2, r4, #31
   28d5e:	4313      	orrs	r3, r2
   28d60:	0864      	lsrs	r4, r4, #1
   28d62:	485a      	ldr	r0, [pc, #360]	; (28ecc <__aeabi_dmul+0x4f0>)
   28d64:	4460      	add	r0, ip
   28d66:	2800      	cmp	r0, #0
   28d68:	dd4d      	ble.n	28e06 <__aeabi_dmul+0x42a>
   28d6a:	075a      	lsls	r2, r3, #29
   28d6c:	d009      	beq.n	28d82 <__aeabi_dmul+0x3a6>
   28d6e:	220f      	movs	r2, #15
   28d70:	401a      	ands	r2, r3
   28d72:	2a04      	cmp	r2, #4
   28d74:	d005      	beq.n	28d82 <__aeabi_dmul+0x3a6>
   28d76:	1d1a      	adds	r2, r3, #4
   28d78:	429a      	cmp	r2, r3
   28d7a:	419b      	sbcs	r3, r3
   28d7c:	425b      	negs	r3, r3
   28d7e:	18e4      	adds	r4, r4, r3
   28d80:	0013      	movs	r3, r2
   28d82:	01e2      	lsls	r2, r4, #7
   28d84:	d504      	bpl.n	28d90 <__aeabi_dmul+0x3b4>
   28d86:	2080      	movs	r0, #128	; 0x80
   28d88:	4a51      	ldr	r2, [pc, #324]	; (28ed0 <__aeabi_dmul+0x4f4>)
   28d8a:	00c0      	lsls	r0, r0, #3
   28d8c:	4014      	ands	r4, r2
   28d8e:	4460      	add	r0, ip
   28d90:	4a50      	ldr	r2, [pc, #320]	; (28ed4 <__aeabi_dmul+0x4f8>)
   28d92:	4290      	cmp	r0, r2
   28d94:	dd00      	ble.n	28d98 <__aeabi_dmul+0x3bc>
   28d96:	e6e3      	b.n	28b60 <__aeabi_dmul+0x184>
   28d98:	2501      	movs	r5, #1
   28d9a:	08db      	lsrs	r3, r3, #3
   28d9c:	0762      	lsls	r2, r4, #29
   28d9e:	431a      	orrs	r2, r3
   28da0:	0264      	lsls	r4, r4, #9
   28da2:	9b01      	ldr	r3, [sp, #4]
   28da4:	4691      	mov	r9, r2
   28da6:	0b22      	lsrs	r2, r4, #12
   28da8:	0544      	lsls	r4, r0, #21
   28daa:	0d64      	lsrs	r4, r4, #21
   28dac:	401d      	ands	r5, r3
   28dae:	e67c      	b.n	28aaa <__aeabi_dmul+0xce>
   28db0:	2280      	movs	r2, #128	; 0x80
   28db2:	4659      	mov	r1, fp
   28db4:	0312      	lsls	r2, r2, #12
   28db6:	4211      	tst	r1, r2
   28db8:	d008      	beq.n	28dcc <__aeabi_dmul+0x3f0>
   28dba:	4214      	tst	r4, r2
   28dbc:	d106      	bne.n	28dcc <__aeabi_dmul+0x3f0>
   28dbe:	4322      	orrs	r2, r4
   28dc0:	0312      	lsls	r2, r2, #12
   28dc2:	0b12      	lsrs	r2, r2, #12
   28dc4:	4645      	mov	r5, r8
   28dc6:	4699      	mov	r9, r3
   28dc8:	4c43      	ldr	r4, [pc, #268]	; (28ed8 <__aeabi_dmul+0x4fc>)
   28dca:	e66e      	b.n	28aaa <__aeabi_dmul+0xce>
   28dcc:	465b      	mov	r3, fp
   28dce:	431a      	orrs	r2, r3
   28dd0:	0312      	lsls	r2, r2, #12
   28dd2:	0b12      	lsrs	r2, r2, #12
   28dd4:	4c40      	ldr	r4, [pc, #256]	; (28ed8 <__aeabi_dmul+0x4fc>)
   28dd6:	e668      	b.n	28aaa <__aeabi_dmul+0xce>
   28dd8:	0003      	movs	r3, r0
   28dda:	4654      	mov	r4, sl
   28ddc:	3b28      	subs	r3, #40	; 0x28
   28dde:	409c      	lsls	r4, r3
   28de0:	2300      	movs	r3, #0
   28de2:	e6b9      	b.n	28b58 <__aeabi_dmul+0x17c>
   28de4:	f000 fcb0 	bl	29748 <__clzsi2>
   28de8:	3020      	adds	r0, #32
   28dea:	e6a6      	b.n	28b3a <__aeabi_dmul+0x15e>
   28dec:	0003      	movs	r3, r0
   28dee:	3b28      	subs	r3, #40	; 0x28
   28df0:	409f      	lsls	r7, r3
   28df2:	2300      	movs	r3, #0
   28df4:	46bb      	mov	fp, r7
   28df6:	4699      	mov	r9, r3
   28df8:	e68a      	b.n	28b10 <__aeabi_dmul+0x134>
   28dfa:	f000 fca5 	bl	29748 <__clzsi2>
   28dfe:	3020      	adds	r0, #32
   28e00:	e674      	b.n	28aec <__aeabi_dmul+0x110>
   28e02:	46b4      	mov	ip, r6
   28e04:	e7ad      	b.n	28d62 <__aeabi_dmul+0x386>
   28e06:	2501      	movs	r5, #1
   28e08:	1a2a      	subs	r2, r5, r0
   28e0a:	2a38      	cmp	r2, #56	; 0x38
   28e0c:	dd06      	ble.n	28e1c <__aeabi_dmul+0x440>
   28e0e:	9b01      	ldr	r3, [sp, #4]
   28e10:	2400      	movs	r4, #0
   28e12:	401d      	ands	r5, r3
   28e14:	2300      	movs	r3, #0
   28e16:	2200      	movs	r2, #0
   28e18:	4699      	mov	r9, r3
   28e1a:	e646      	b.n	28aaa <__aeabi_dmul+0xce>
   28e1c:	2a1f      	cmp	r2, #31
   28e1e:	dc21      	bgt.n	28e64 <__aeabi_dmul+0x488>
   28e20:	2520      	movs	r5, #32
   28e22:	0020      	movs	r0, r4
   28e24:	1aad      	subs	r5, r5, r2
   28e26:	001e      	movs	r6, r3
   28e28:	40ab      	lsls	r3, r5
   28e2a:	40a8      	lsls	r0, r5
   28e2c:	40d6      	lsrs	r6, r2
   28e2e:	1e5d      	subs	r5, r3, #1
   28e30:	41ab      	sbcs	r3, r5
   28e32:	4330      	orrs	r0, r6
   28e34:	4318      	orrs	r0, r3
   28e36:	40d4      	lsrs	r4, r2
   28e38:	0743      	lsls	r3, r0, #29
   28e3a:	d009      	beq.n	28e50 <__aeabi_dmul+0x474>
   28e3c:	230f      	movs	r3, #15
   28e3e:	4003      	ands	r3, r0
   28e40:	2b04      	cmp	r3, #4
   28e42:	d005      	beq.n	28e50 <__aeabi_dmul+0x474>
   28e44:	0003      	movs	r3, r0
   28e46:	1d18      	adds	r0, r3, #4
   28e48:	4298      	cmp	r0, r3
   28e4a:	419b      	sbcs	r3, r3
   28e4c:	425b      	negs	r3, r3
   28e4e:	18e4      	adds	r4, r4, r3
   28e50:	0223      	lsls	r3, r4, #8
   28e52:	d521      	bpl.n	28e98 <__aeabi_dmul+0x4bc>
   28e54:	2501      	movs	r5, #1
   28e56:	9b01      	ldr	r3, [sp, #4]
   28e58:	2401      	movs	r4, #1
   28e5a:	401d      	ands	r5, r3
   28e5c:	2300      	movs	r3, #0
   28e5e:	2200      	movs	r2, #0
   28e60:	4699      	mov	r9, r3
   28e62:	e622      	b.n	28aaa <__aeabi_dmul+0xce>
   28e64:	251f      	movs	r5, #31
   28e66:	0021      	movs	r1, r4
   28e68:	426d      	negs	r5, r5
   28e6a:	1a28      	subs	r0, r5, r0
   28e6c:	40c1      	lsrs	r1, r0
   28e6e:	0008      	movs	r0, r1
   28e70:	2a20      	cmp	r2, #32
   28e72:	d01d      	beq.n	28eb0 <__aeabi_dmul+0x4d4>
   28e74:	355f      	adds	r5, #95	; 0x5f
   28e76:	1aaa      	subs	r2, r5, r2
   28e78:	4094      	lsls	r4, r2
   28e7a:	4323      	orrs	r3, r4
   28e7c:	1e5c      	subs	r4, r3, #1
   28e7e:	41a3      	sbcs	r3, r4
   28e80:	2507      	movs	r5, #7
   28e82:	4303      	orrs	r3, r0
   28e84:	401d      	ands	r5, r3
   28e86:	2200      	movs	r2, #0
   28e88:	2d00      	cmp	r5, #0
   28e8a:	d009      	beq.n	28ea0 <__aeabi_dmul+0x4c4>
   28e8c:	220f      	movs	r2, #15
   28e8e:	2400      	movs	r4, #0
   28e90:	401a      	ands	r2, r3
   28e92:	0018      	movs	r0, r3
   28e94:	2a04      	cmp	r2, #4
   28e96:	d1d6      	bne.n	28e46 <__aeabi_dmul+0x46a>
   28e98:	0003      	movs	r3, r0
   28e9a:	0765      	lsls	r5, r4, #29
   28e9c:	0264      	lsls	r4, r4, #9
   28e9e:	0b22      	lsrs	r2, r4, #12
   28ea0:	08db      	lsrs	r3, r3, #3
   28ea2:	432b      	orrs	r3, r5
   28ea4:	2501      	movs	r5, #1
   28ea6:	4699      	mov	r9, r3
   28ea8:	9b01      	ldr	r3, [sp, #4]
   28eaa:	2400      	movs	r4, #0
   28eac:	401d      	ands	r5, r3
   28eae:	e5fc      	b.n	28aaa <__aeabi_dmul+0xce>
   28eb0:	2400      	movs	r4, #0
   28eb2:	e7e2      	b.n	28e7a <__aeabi_dmul+0x49e>
   28eb4:	2280      	movs	r2, #128	; 0x80
   28eb6:	2501      	movs	r5, #1
   28eb8:	0312      	lsls	r2, r2, #12
   28eba:	4322      	orrs	r2, r4
   28ebc:	9901      	ldr	r1, [sp, #4]
   28ebe:	0312      	lsls	r2, r2, #12
   28ec0:	0b12      	lsrs	r2, r2, #12
   28ec2:	400d      	ands	r5, r1
   28ec4:	4699      	mov	r9, r3
   28ec6:	4c04      	ldr	r4, [pc, #16]	; (28ed8 <__aeabi_dmul+0x4fc>)
   28ec8:	e5ef      	b.n	28aaa <__aeabi_dmul+0xce>
   28eca:	46c0      	nop			; (mov r8, r8)
   28ecc:	000003ff 	.word	0x000003ff
   28ed0:	feffffff 	.word	0xfeffffff
   28ed4:	000007fe 	.word	0x000007fe
   28ed8:	000007ff 	.word	0x000007ff

00028edc <__aeabi_dsub>:
   28edc:	b5f0      	push	{r4, r5, r6, r7, lr}
   28ede:	4646      	mov	r6, r8
   28ee0:	46d6      	mov	lr, sl
   28ee2:	464f      	mov	r7, r9
   28ee4:	030c      	lsls	r4, r1, #12
   28ee6:	b5c0      	push	{r6, r7, lr}
   28ee8:	0fcd      	lsrs	r5, r1, #31
   28eea:	004e      	lsls	r6, r1, #1
   28eec:	0a61      	lsrs	r1, r4, #9
   28eee:	0f44      	lsrs	r4, r0, #29
   28ef0:	430c      	orrs	r4, r1
   28ef2:	00c1      	lsls	r1, r0, #3
   28ef4:	0058      	lsls	r0, r3, #1
   28ef6:	0d40      	lsrs	r0, r0, #21
   28ef8:	4684      	mov	ip, r0
   28efa:	468a      	mov	sl, r1
   28efc:	000f      	movs	r7, r1
   28efe:	0319      	lsls	r1, r3, #12
   28f00:	0f50      	lsrs	r0, r2, #29
   28f02:	0a49      	lsrs	r1, r1, #9
   28f04:	4301      	orrs	r1, r0
   28f06:	48c6      	ldr	r0, [pc, #792]	; (29220 <__aeabi_dsub+0x344>)
   28f08:	0d76      	lsrs	r6, r6, #21
   28f0a:	46a8      	mov	r8, r5
   28f0c:	0fdb      	lsrs	r3, r3, #31
   28f0e:	00d2      	lsls	r2, r2, #3
   28f10:	4584      	cmp	ip, r0
   28f12:	d100      	bne.n	28f16 <__aeabi_dsub+0x3a>
   28f14:	e0d8      	b.n	290c8 <__aeabi_dsub+0x1ec>
   28f16:	2001      	movs	r0, #1
   28f18:	4043      	eors	r3, r0
   28f1a:	42ab      	cmp	r3, r5
   28f1c:	d100      	bne.n	28f20 <__aeabi_dsub+0x44>
   28f1e:	e0a6      	b.n	2906e <__aeabi_dsub+0x192>
   28f20:	4660      	mov	r0, ip
   28f22:	1a35      	subs	r5, r6, r0
   28f24:	2d00      	cmp	r5, #0
   28f26:	dc00      	bgt.n	28f2a <__aeabi_dsub+0x4e>
   28f28:	e105      	b.n	29136 <__aeabi_dsub+0x25a>
   28f2a:	2800      	cmp	r0, #0
   28f2c:	d110      	bne.n	28f50 <__aeabi_dsub+0x74>
   28f2e:	000b      	movs	r3, r1
   28f30:	4313      	orrs	r3, r2
   28f32:	d100      	bne.n	28f36 <__aeabi_dsub+0x5a>
   28f34:	e0d7      	b.n	290e6 <__aeabi_dsub+0x20a>
   28f36:	1e6b      	subs	r3, r5, #1
   28f38:	2b00      	cmp	r3, #0
   28f3a:	d000      	beq.n	28f3e <__aeabi_dsub+0x62>
   28f3c:	e14b      	b.n	291d6 <__aeabi_dsub+0x2fa>
   28f3e:	4653      	mov	r3, sl
   28f40:	1a9f      	subs	r7, r3, r2
   28f42:	45ba      	cmp	sl, r7
   28f44:	4180      	sbcs	r0, r0
   28f46:	1a64      	subs	r4, r4, r1
   28f48:	4240      	negs	r0, r0
   28f4a:	1a24      	subs	r4, r4, r0
   28f4c:	2601      	movs	r6, #1
   28f4e:	e01e      	b.n	28f8e <__aeabi_dsub+0xb2>
   28f50:	4bb3      	ldr	r3, [pc, #716]	; (29220 <__aeabi_dsub+0x344>)
   28f52:	429e      	cmp	r6, r3
   28f54:	d048      	beq.n	28fe8 <__aeabi_dsub+0x10c>
   28f56:	2380      	movs	r3, #128	; 0x80
   28f58:	041b      	lsls	r3, r3, #16
   28f5a:	4319      	orrs	r1, r3
   28f5c:	2d38      	cmp	r5, #56	; 0x38
   28f5e:	dd00      	ble.n	28f62 <__aeabi_dsub+0x86>
   28f60:	e119      	b.n	29196 <__aeabi_dsub+0x2ba>
   28f62:	2d1f      	cmp	r5, #31
   28f64:	dd00      	ble.n	28f68 <__aeabi_dsub+0x8c>
   28f66:	e14c      	b.n	29202 <__aeabi_dsub+0x326>
   28f68:	2320      	movs	r3, #32
   28f6a:	000f      	movs	r7, r1
   28f6c:	1b5b      	subs	r3, r3, r5
   28f6e:	0010      	movs	r0, r2
   28f70:	409a      	lsls	r2, r3
   28f72:	409f      	lsls	r7, r3
   28f74:	40e8      	lsrs	r0, r5
   28f76:	1e53      	subs	r3, r2, #1
   28f78:	419a      	sbcs	r2, r3
   28f7a:	40e9      	lsrs	r1, r5
   28f7c:	4307      	orrs	r7, r0
   28f7e:	4317      	orrs	r7, r2
   28f80:	4653      	mov	r3, sl
   28f82:	1bdf      	subs	r7, r3, r7
   28f84:	1a61      	subs	r1, r4, r1
   28f86:	45ba      	cmp	sl, r7
   28f88:	41a4      	sbcs	r4, r4
   28f8a:	4264      	negs	r4, r4
   28f8c:	1b0c      	subs	r4, r1, r4
   28f8e:	0223      	lsls	r3, r4, #8
   28f90:	d400      	bmi.n	28f94 <__aeabi_dsub+0xb8>
   28f92:	e0c5      	b.n	29120 <__aeabi_dsub+0x244>
   28f94:	0264      	lsls	r4, r4, #9
   28f96:	0a65      	lsrs	r5, r4, #9
   28f98:	2d00      	cmp	r5, #0
   28f9a:	d100      	bne.n	28f9e <__aeabi_dsub+0xc2>
   28f9c:	e0f6      	b.n	2918c <__aeabi_dsub+0x2b0>
   28f9e:	0028      	movs	r0, r5
   28fa0:	f000 fbd2 	bl	29748 <__clzsi2>
   28fa4:	0003      	movs	r3, r0
   28fa6:	3b08      	subs	r3, #8
   28fa8:	2b1f      	cmp	r3, #31
   28faa:	dd00      	ble.n	28fae <__aeabi_dsub+0xd2>
   28fac:	e0e9      	b.n	29182 <__aeabi_dsub+0x2a6>
   28fae:	2220      	movs	r2, #32
   28fb0:	003c      	movs	r4, r7
   28fb2:	1ad2      	subs	r2, r2, r3
   28fb4:	409d      	lsls	r5, r3
   28fb6:	40d4      	lsrs	r4, r2
   28fb8:	409f      	lsls	r7, r3
   28fba:	4325      	orrs	r5, r4
   28fbc:	429e      	cmp	r6, r3
   28fbe:	dd00      	ble.n	28fc2 <__aeabi_dsub+0xe6>
   28fc0:	e0db      	b.n	2917a <__aeabi_dsub+0x29e>
   28fc2:	1b9e      	subs	r6, r3, r6
   28fc4:	1c73      	adds	r3, r6, #1
   28fc6:	2b1f      	cmp	r3, #31
   28fc8:	dd00      	ble.n	28fcc <__aeabi_dsub+0xf0>
   28fca:	e10a      	b.n	291e2 <__aeabi_dsub+0x306>
   28fcc:	2220      	movs	r2, #32
   28fce:	0038      	movs	r0, r7
   28fd0:	1ad2      	subs	r2, r2, r3
   28fd2:	0029      	movs	r1, r5
   28fd4:	4097      	lsls	r7, r2
   28fd6:	002c      	movs	r4, r5
   28fd8:	4091      	lsls	r1, r2
   28fda:	40d8      	lsrs	r0, r3
   28fdc:	1e7a      	subs	r2, r7, #1
   28fde:	4197      	sbcs	r7, r2
   28fe0:	40dc      	lsrs	r4, r3
   28fe2:	2600      	movs	r6, #0
   28fe4:	4301      	orrs	r1, r0
   28fe6:	430f      	orrs	r7, r1
   28fe8:	077b      	lsls	r3, r7, #29
   28fea:	d009      	beq.n	29000 <__aeabi_dsub+0x124>
   28fec:	230f      	movs	r3, #15
   28fee:	403b      	ands	r3, r7
   28ff0:	2b04      	cmp	r3, #4
   28ff2:	d005      	beq.n	29000 <__aeabi_dsub+0x124>
   28ff4:	1d3b      	adds	r3, r7, #4
   28ff6:	42bb      	cmp	r3, r7
   28ff8:	41bf      	sbcs	r7, r7
   28ffa:	427f      	negs	r7, r7
   28ffc:	19e4      	adds	r4, r4, r7
   28ffe:	001f      	movs	r7, r3
   29000:	0223      	lsls	r3, r4, #8
   29002:	d525      	bpl.n	29050 <__aeabi_dsub+0x174>
   29004:	4b86      	ldr	r3, [pc, #536]	; (29220 <__aeabi_dsub+0x344>)
   29006:	3601      	adds	r6, #1
   29008:	429e      	cmp	r6, r3
   2900a:	d100      	bne.n	2900e <__aeabi_dsub+0x132>
   2900c:	e0af      	b.n	2916e <__aeabi_dsub+0x292>
   2900e:	4b85      	ldr	r3, [pc, #532]	; (29224 <__aeabi_dsub+0x348>)
   29010:	2501      	movs	r5, #1
   29012:	401c      	ands	r4, r3
   29014:	4643      	mov	r3, r8
   29016:	0762      	lsls	r2, r4, #29
   29018:	08ff      	lsrs	r7, r7, #3
   2901a:	0264      	lsls	r4, r4, #9
   2901c:	0576      	lsls	r6, r6, #21
   2901e:	4317      	orrs	r7, r2
   29020:	0b24      	lsrs	r4, r4, #12
   29022:	0d76      	lsrs	r6, r6, #21
   29024:	401d      	ands	r5, r3
   29026:	2100      	movs	r1, #0
   29028:	0324      	lsls	r4, r4, #12
   2902a:	0b23      	lsrs	r3, r4, #12
   2902c:	0d0c      	lsrs	r4, r1, #20
   2902e:	4a7e      	ldr	r2, [pc, #504]	; (29228 <__aeabi_dsub+0x34c>)
   29030:	0524      	lsls	r4, r4, #20
   29032:	431c      	orrs	r4, r3
   29034:	4014      	ands	r4, r2
   29036:	0533      	lsls	r3, r6, #20
   29038:	4323      	orrs	r3, r4
   2903a:	005b      	lsls	r3, r3, #1
   2903c:	07ed      	lsls	r5, r5, #31
   2903e:	085b      	lsrs	r3, r3, #1
   29040:	432b      	orrs	r3, r5
   29042:	0038      	movs	r0, r7
   29044:	0019      	movs	r1, r3
   29046:	bc1c      	pop	{r2, r3, r4}
   29048:	4690      	mov	r8, r2
   2904a:	4699      	mov	r9, r3
   2904c:	46a2      	mov	sl, r4
   2904e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29050:	2501      	movs	r5, #1
   29052:	4643      	mov	r3, r8
   29054:	0762      	lsls	r2, r4, #29
   29056:	08ff      	lsrs	r7, r7, #3
   29058:	4317      	orrs	r7, r2
   2905a:	08e4      	lsrs	r4, r4, #3
   2905c:	401d      	ands	r5, r3
   2905e:	4b70      	ldr	r3, [pc, #448]	; (29220 <__aeabi_dsub+0x344>)
   29060:	429e      	cmp	r6, r3
   29062:	d036      	beq.n	290d2 <__aeabi_dsub+0x1f6>
   29064:	0324      	lsls	r4, r4, #12
   29066:	0576      	lsls	r6, r6, #21
   29068:	0b24      	lsrs	r4, r4, #12
   2906a:	0d76      	lsrs	r6, r6, #21
   2906c:	e7db      	b.n	29026 <__aeabi_dsub+0x14a>
   2906e:	4663      	mov	r3, ip
   29070:	1af3      	subs	r3, r6, r3
   29072:	2b00      	cmp	r3, #0
   29074:	dc00      	bgt.n	29078 <__aeabi_dsub+0x19c>
   29076:	e094      	b.n	291a2 <__aeabi_dsub+0x2c6>
   29078:	4660      	mov	r0, ip
   2907a:	2800      	cmp	r0, #0
   2907c:	d035      	beq.n	290ea <__aeabi_dsub+0x20e>
   2907e:	4868      	ldr	r0, [pc, #416]	; (29220 <__aeabi_dsub+0x344>)
   29080:	4286      	cmp	r6, r0
   29082:	d0b1      	beq.n	28fe8 <__aeabi_dsub+0x10c>
   29084:	2780      	movs	r7, #128	; 0x80
   29086:	043f      	lsls	r7, r7, #16
   29088:	4339      	orrs	r1, r7
   2908a:	2b38      	cmp	r3, #56	; 0x38
   2908c:	dc00      	bgt.n	29090 <__aeabi_dsub+0x1b4>
   2908e:	e0fd      	b.n	2928c <__aeabi_dsub+0x3b0>
   29090:	430a      	orrs	r2, r1
   29092:	0017      	movs	r7, r2
   29094:	2100      	movs	r1, #0
   29096:	1e7a      	subs	r2, r7, #1
   29098:	4197      	sbcs	r7, r2
   2909a:	4457      	add	r7, sl
   2909c:	4557      	cmp	r7, sl
   2909e:	4180      	sbcs	r0, r0
   290a0:	1909      	adds	r1, r1, r4
   290a2:	4244      	negs	r4, r0
   290a4:	190c      	adds	r4, r1, r4
   290a6:	0223      	lsls	r3, r4, #8
   290a8:	d53a      	bpl.n	29120 <__aeabi_dsub+0x244>
   290aa:	4b5d      	ldr	r3, [pc, #372]	; (29220 <__aeabi_dsub+0x344>)
   290ac:	3601      	adds	r6, #1
   290ae:	429e      	cmp	r6, r3
   290b0:	d100      	bne.n	290b4 <__aeabi_dsub+0x1d8>
   290b2:	e14b      	b.n	2934c <__aeabi_dsub+0x470>
   290b4:	2201      	movs	r2, #1
   290b6:	4b5b      	ldr	r3, [pc, #364]	; (29224 <__aeabi_dsub+0x348>)
   290b8:	401c      	ands	r4, r3
   290ba:	087b      	lsrs	r3, r7, #1
   290bc:	4017      	ands	r7, r2
   290be:	431f      	orrs	r7, r3
   290c0:	07e2      	lsls	r2, r4, #31
   290c2:	4317      	orrs	r7, r2
   290c4:	0864      	lsrs	r4, r4, #1
   290c6:	e78f      	b.n	28fe8 <__aeabi_dsub+0x10c>
   290c8:	0008      	movs	r0, r1
   290ca:	4310      	orrs	r0, r2
   290cc:	d000      	beq.n	290d0 <__aeabi_dsub+0x1f4>
   290ce:	e724      	b.n	28f1a <__aeabi_dsub+0x3e>
   290d0:	e721      	b.n	28f16 <__aeabi_dsub+0x3a>
   290d2:	0023      	movs	r3, r4
   290d4:	433b      	orrs	r3, r7
   290d6:	d100      	bne.n	290da <__aeabi_dsub+0x1fe>
   290d8:	e1b9      	b.n	2944e <__aeabi_dsub+0x572>
   290da:	2280      	movs	r2, #128	; 0x80
   290dc:	0312      	lsls	r2, r2, #12
   290de:	4314      	orrs	r4, r2
   290e0:	0324      	lsls	r4, r4, #12
   290e2:	0b24      	lsrs	r4, r4, #12
   290e4:	e79f      	b.n	29026 <__aeabi_dsub+0x14a>
   290e6:	002e      	movs	r6, r5
   290e8:	e77e      	b.n	28fe8 <__aeabi_dsub+0x10c>
   290ea:	0008      	movs	r0, r1
   290ec:	4310      	orrs	r0, r2
   290ee:	d100      	bne.n	290f2 <__aeabi_dsub+0x216>
   290f0:	e0ca      	b.n	29288 <__aeabi_dsub+0x3ac>
   290f2:	1e58      	subs	r0, r3, #1
   290f4:	4684      	mov	ip, r0
   290f6:	2800      	cmp	r0, #0
   290f8:	d000      	beq.n	290fc <__aeabi_dsub+0x220>
   290fa:	e0e7      	b.n	292cc <__aeabi_dsub+0x3f0>
   290fc:	4452      	add	r2, sl
   290fe:	4552      	cmp	r2, sl
   29100:	4180      	sbcs	r0, r0
   29102:	1864      	adds	r4, r4, r1
   29104:	4240      	negs	r0, r0
   29106:	1824      	adds	r4, r4, r0
   29108:	0017      	movs	r7, r2
   2910a:	2601      	movs	r6, #1
   2910c:	0223      	lsls	r3, r4, #8
   2910e:	d507      	bpl.n	29120 <__aeabi_dsub+0x244>
   29110:	2602      	movs	r6, #2
   29112:	e7cf      	b.n	290b4 <__aeabi_dsub+0x1d8>
   29114:	4664      	mov	r4, ip
   29116:	432c      	orrs	r4, r5
   29118:	d100      	bne.n	2911c <__aeabi_dsub+0x240>
   2911a:	e1b3      	b.n	29484 <__aeabi_dsub+0x5a8>
   2911c:	002c      	movs	r4, r5
   2911e:	4667      	mov	r7, ip
   29120:	077b      	lsls	r3, r7, #29
   29122:	d000      	beq.n	29126 <__aeabi_dsub+0x24a>
   29124:	e762      	b.n	28fec <__aeabi_dsub+0x110>
   29126:	0763      	lsls	r3, r4, #29
   29128:	08ff      	lsrs	r7, r7, #3
   2912a:	431f      	orrs	r7, r3
   2912c:	2501      	movs	r5, #1
   2912e:	4643      	mov	r3, r8
   29130:	08e4      	lsrs	r4, r4, #3
   29132:	401d      	ands	r5, r3
   29134:	e793      	b.n	2905e <__aeabi_dsub+0x182>
   29136:	2d00      	cmp	r5, #0
   29138:	d178      	bne.n	2922c <__aeabi_dsub+0x350>
   2913a:	1c75      	adds	r5, r6, #1
   2913c:	056d      	lsls	r5, r5, #21
   2913e:	0d6d      	lsrs	r5, r5, #21
   29140:	2d01      	cmp	r5, #1
   29142:	dc00      	bgt.n	29146 <__aeabi_dsub+0x26a>
   29144:	e0f2      	b.n	2932c <__aeabi_dsub+0x450>
   29146:	4650      	mov	r0, sl
   29148:	1a80      	subs	r0, r0, r2
   2914a:	4582      	cmp	sl, r0
   2914c:	41bf      	sbcs	r7, r7
   2914e:	1a65      	subs	r5, r4, r1
   29150:	427f      	negs	r7, r7
   29152:	1bed      	subs	r5, r5, r7
   29154:	4684      	mov	ip, r0
   29156:	0228      	lsls	r0, r5, #8
   29158:	d400      	bmi.n	2915c <__aeabi_dsub+0x280>
   2915a:	e08c      	b.n	29276 <__aeabi_dsub+0x39a>
   2915c:	4650      	mov	r0, sl
   2915e:	1a17      	subs	r7, r2, r0
   29160:	42ba      	cmp	r2, r7
   29162:	4192      	sbcs	r2, r2
   29164:	1b0c      	subs	r4, r1, r4
   29166:	4255      	negs	r5, r2
   29168:	1b65      	subs	r5, r4, r5
   2916a:	4698      	mov	r8, r3
   2916c:	e714      	b.n	28f98 <__aeabi_dsub+0xbc>
   2916e:	2501      	movs	r5, #1
   29170:	4643      	mov	r3, r8
   29172:	2400      	movs	r4, #0
   29174:	401d      	ands	r5, r3
   29176:	2700      	movs	r7, #0
   29178:	e755      	b.n	29026 <__aeabi_dsub+0x14a>
   2917a:	4c2a      	ldr	r4, [pc, #168]	; (29224 <__aeabi_dsub+0x348>)
   2917c:	1af6      	subs	r6, r6, r3
   2917e:	402c      	ands	r4, r5
   29180:	e732      	b.n	28fe8 <__aeabi_dsub+0x10c>
   29182:	003d      	movs	r5, r7
   29184:	3828      	subs	r0, #40	; 0x28
   29186:	4085      	lsls	r5, r0
   29188:	2700      	movs	r7, #0
   2918a:	e717      	b.n	28fbc <__aeabi_dsub+0xe0>
   2918c:	0038      	movs	r0, r7
   2918e:	f000 fadb 	bl	29748 <__clzsi2>
   29192:	3020      	adds	r0, #32
   29194:	e706      	b.n	28fa4 <__aeabi_dsub+0xc8>
   29196:	430a      	orrs	r2, r1
   29198:	0017      	movs	r7, r2
   2919a:	2100      	movs	r1, #0
   2919c:	1e7a      	subs	r2, r7, #1
   2919e:	4197      	sbcs	r7, r2
   291a0:	e6ee      	b.n	28f80 <__aeabi_dsub+0xa4>
   291a2:	2b00      	cmp	r3, #0
   291a4:	d000      	beq.n	291a8 <__aeabi_dsub+0x2cc>
   291a6:	e0e5      	b.n	29374 <__aeabi_dsub+0x498>
   291a8:	1c73      	adds	r3, r6, #1
   291aa:	469c      	mov	ip, r3
   291ac:	055b      	lsls	r3, r3, #21
   291ae:	0d5b      	lsrs	r3, r3, #21
   291b0:	2b01      	cmp	r3, #1
   291b2:	dc00      	bgt.n	291b6 <__aeabi_dsub+0x2da>
   291b4:	e09f      	b.n	292f6 <__aeabi_dsub+0x41a>
   291b6:	4b1a      	ldr	r3, [pc, #104]	; (29220 <__aeabi_dsub+0x344>)
   291b8:	459c      	cmp	ip, r3
   291ba:	d100      	bne.n	291be <__aeabi_dsub+0x2e2>
   291bc:	e0c5      	b.n	2934a <__aeabi_dsub+0x46e>
   291be:	4452      	add	r2, sl
   291c0:	4552      	cmp	r2, sl
   291c2:	4180      	sbcs	r0, r0
   291c4:	1864      	adds	r4, r4, r1
   291c6:	4240      	negs	r0, r0
   291c8:	1824      	adds	r4, r4, r0
   291ca:	07e7      	lsls	r7, r4, #31
   291cc:	0852      	lsrs	r2, r2, #1
   291ce:	4317      	orrs	r7, r2
   291d0:	0864      	lsrs	r4, r4, #1
   291d2:	4666      	mov	r6, ip
   291d4:	e708      	b.n	28fe8 <__aeabi_dsub+0x10c>
   291d6:	4812      	ldr	r0, [pc, #72]	; (29220 <__aeabi_dsub+0x344>)
   291d8:	4285      	cmp	r5, r0
   291da:	d100      	bne.n	291de <__aeabi_dsub+0x302>
   291dc:	e085      	b.n	292ea <__aeabi_dsub+0x40e>
   291de:	001d      	movs	r5, r3
   291e0:	e6bc      	b.n	28f5c <__aeabi_dsub+0x80>
   291e2:	0029      	movs	r1, r5
   291e4:	3e1f      	subs	r6, #31
   291e6:	40f1      	lsrs	r1, r6
   291e8:	2b20      	cmp	r3, #32
   291ea:	d100      	bne.n	291ee <__aeabi_dsub+0x312>
   291ec:	e07f      	b.n	292ee <__aeabi_dsub+0x412>
   291ee:	2240      	movs	r2, #64	; 0x40
   291f0:	1ad3      	subs	r3, r2, r3
   291f2:	409d      	lsls	r5, r3
   291f4:	432f      	orrs	r7, r5
   291f6:	1e7d      	subs	r5, r7, #1
   291f8:	41af      	sbcs	r7, r5
   291fa:	2400      	movs	r4, #0
   291fc:	430f      	orrs	r7, r1
   291fe:	2600      	movs	r6, #0
   29200:	e78e      	b.n	29120 <__aeabi_dsub+0x244>
   29202:	002b      	movs	r3, r5
   29204:	000f      	movs	r7, r1
   29206:	3b20      	subs	r3, #32
   29208:	40df      	lsrs	r7, r3
   2920a:	2d20      	cmp	r5, #32
   2920c:	d071      	beq.n	292f2 <__aeabi_dsub+0x416>
   2920e:	2340      	movs	r3, #64	; 0x40
   29210:	1b5d      	subs	r5, r3, r5
   29212:	40a9      	lsls	r1, r5
   29214:	430a      	orrs	r2, r1
   29216:	1e51      	subs	r1, r2, #1
   29218:	418a      	sbcs	r2, r1
   2921a:	2100      	movs	r1, #0
   2921c:	4317      	orrs	r7, r2
   2921e:	e6af      	b.n	28f80 <__aeabi_dsub+0xa4>
   29220:	000007ff 	.word	0x000007ff
   29224:	ff7fffff 	.word	0xff7fffff
   29228:	800fffff 	.word	0x800fffff
   2922c:	2e00      	cmp	r6, #0
   2922e:	d03e      	beq.n	292ae <__aeabi_dsub+0x3d2>
   29230:	4eb3      	ldr	r6, [pc, #716]	; (29500 <__aeabi_dsub+0x624>)
   29232:	45b4      	cmp	ip, r6
   29234:	d045      	beq.n	292c2 <__aeabi_dsub+0x3e6>
   29236:	2680      	movs	r6, #128	; 0x80
   29238:	0436      	lsls	r6, r6, #16
   2923a:	426d      	negs	r5, r5
   2923c:	4334      	orrs	r4, r6
   2923e:	2d38      	cmp	r5, #56	; 0x38
   29240:	dd00      	ble.n	29244 <__aeabi_dsub+0x368>
   29242:	e0a8      	b.n	29396 <__aeabi_dsub+0x4ba>
   29244:	2d1f      	cmp	r5, #31
   29246:	dd00      	ble.n	2924a <__aeabi_dsub+0x36e>
   29248:	e11f      	b.n	2948a <__aeabi_dsub+0x5ae>
   2924a:	2620      	movs	r6, #32
   2924c:	0027      	movs	r7, r4
   2924e:	4650      	mov	r0, sl
   29250:	1b76      	subs	r6, r6, r5
   29252:	40b7      	lsls	r7, r6
   29254:	40e8      	lsrs	r0, r5
   29256:	4307      	orrs	r7, r0
   29258:	4650      	mov	r0, sl
   2925a:	40b0      	lsls	r0, r6
   2925c:	1e46      	subs	r6, r0, #1
   2925e:	41b0      	sbcs	r0, r6
   29260:	40ec      	lsrs	r4, r5
   29262:	4338      	orrs	r0, r7
   29264:	1a17      	subs	r7, r2, r0
   29266:	42ba      	cmp	r2, r7
   29268:	4192      	sbcs	r2, r2
   2926a:	1b0c      	subs	r4, r1, r4
   2926c:	4252      	negs	r2, r2
   2926e:	1aa4      	subs	r4, r4, r2
   29270:	4666      	mov	r6, ip
   29272:	4698      	mov	r8, r3
   29274:	e68b      	b.n	28f8e <__aeabi_dsub+0xb2>
   29276:	4664      	mov	r4, ip
   29278:	4667      	mov	r7, ip
   2927a:	432c      	orrs	r4, r5
   2927c:	d000      	beq.n	29280 <__aeabi_dsub+0x3a4>
   2927e:	e68b      	b.n	28f98 <__aeabi_dsub+0xbc>
   29280:	2500      	movs	r5, #0
   29282:	2600      	movs	r6, #0
   29284:	2700      	movs	r7, #0
   29286:	e6ea      	b.n	2905e <__aeabi_dsub+0x182>
   29288:	001e      	movs	r6, r3
   2928a:	e6ad      	b.n	28fe8 <__aeabi_dsub+0x10c>
   2928c:	2b1f      	cmp	r3, #31
   2928e:	dc60      	bgt.n	29352 <__aeabi_dsub+0x476>
   29290:	2720      	movs	r7, #32
   29292:	1af8      	subs	r0, r7, r3
   29294:	000f      	movs	r7, r1
   29296:	4684      	mov	ip, r0
   29298:	4087      	lsls	r7, r0
   2929a:	0010      	movs	r0, r2
   2929c:	40d8      	lsrs	r0, r3
   2929e:	4307      	orrs	r7, r0
   292a0:	4660      	mov	r0, ip
   292a2:	4082      	lsls	r2, r0
   292a4:	1e50      	subs	r0, r2, #1
   292a6:	4182      	sbcs	r2, r0
   292a8:	40d9      	lsrs	r1, r3
   292aa:	4317      	orrs	r7, r2
   292ac:	e6f5      	b.n	2909a <__aeabi_dsub+0x1be>
   292ae:	0026      	movs	r6, r4
   292b0:	4650      	mov	r0, sl
   292b2:	4306      	orrs	r6, r0
   292b4:	d005      	beq.n	292c2 <__aeabi_dsub+0x3e6>
   292b6:	43ed      	mvns	r5, r5
   292b8:	2d00      	cmp	r5, #0
   292ba:	d0d3      	beq.n	29264 <__aeabi_dsub+0x388>
   292bc:	4e90      	ldr	r6, [pc, #576]	; (29500 <__aeabi_dsub+0x624>)
   292be:	45b4      	cmp	ip, r6
   292c0:	d1bd      	bne.n	2923e <__aeabi_dsub+0x362>
   292c2:	000c      	movs	r4, r1
   292c4:	0017      	movs	r7, r2
   292c6:	4666      	mov	r6, ip
   292c8:	4698      	mov	r8, r3
   292ca:	e68d      	b.n	28fe8 <__aeabi_dsub+0x10c>
   292cc:	488c      	ldr	r0, [pc, #560]	; (29500 <__aeabi_dsub+0x624>)
   292ce:	4283      	cmp	r3, r0
   292d0:	d00b      	beq.n	292ea <__aeabi_dsub+0x40e>
   292d2:	4663      	mov	r3, ip
   292d4:	e6d9      	b.n	2908a <__aeabi_dsub+0x1ae>
   292d6:	2d00      	cmp	r5, #0
   292d8:	d000      	beq.n	292dc <__aeabi_dsub+0x400>
   292da:	e096      	b.n	2940a <__aeabi_dsub+0x52e>
   292dc:	0008      	movs	r0, r1
   292de:	4310      	orrs	r0, r2
   292e0:	d100      	bne.n	292e4 <__aeabi_dsub+0x408>
   292e2:	e0e2      	b.n	294aa <__aeabi_dsub+0x5ce>
   292e4:	000c      	movs	r4, r1
   292e6:	0017      	movs	r7, r2
   292e8:	4698      	mov	r8, r3
   292ea:	4e85      	ldr	r6, [pc, #532]	; (29500 <__aeabi_dsub+0x624>)
   292ec:	e67c      	b.n	28fe8 <__aeabi_dsub+0x10c>
   292ee:	2500      	movs	r5, #0
   292f0:	e780      	b.n	291f4 <__aeabi_dsub+0x318>
   292f2:	2100      	movs	r1, #0
   292f4:	e78e      	b.n	29214 <__aeabi_dsub+0x338>
   292f6:	0023      	movs	r3, r4
   292f8:	4650      	mov	r0, sl
   292fa:	4303      	orrs	r3, r0
   292fc:	2e00      	cmp	r6, #0
   292fe:	d000      	beq.n	29302 <__aeabi_dsub+0x426>
   29300:	e0a8      	b.n	29454 <__aeabi_dsub+0x578>
   29302:	2b00      	cmp	r3, #0
   29304:	d100      	bne.n	29308 <__aeabi_dsub+0x42c>
   29306:	e0de      	b.n	294c6 <__aeabi_dsub+0x5ea>
   29308:	000b      	movs	r3, r1
   2930a:	4313      	orrs	r3, r2
   2930c:	d100      	bne.n	29310 <__aeabi_dsub+0x434>
   2930e:	e66b      	b.n	28fe8 <__aeabi_dsub+0x10c>
   29310:	4452      	add	r2, sl
   29312:	4552      	cmp	r2, sl
   29314:	4180      	sbcs	r0, r0
   29316:	1864      	adds	r4, r4, r1
   29318:	4240      	negs	r0, r0
   2931a:	1824      	adds	r4, r4, r0
   2931c:	0017      	movs	r7, r2
   2931e:	0223      	lsls	r3, r4, #8
   29320:	d400      	bmi.n	29324 <__aeabi_dsub+0x448>
   29322:	e6fd      	b.n	29120 <__aeabi_dsub+0x244>
   29324:	4b77      	ldr	r3, [pc, #476]	; (29504 <__aeabi_dsub+0x628>)
   29326:	4666      	mov	r6, ip
   29328:	401c      	ands	r4, r3
   2932a:	e65d      	b.n	28fe8 <__aeabi_dsub+0x10c>
   2932c:	0025      	movs	r5, r4
   2932e:	4650      	mov	r0, sl
   29330:	4305      	orrs	r5, r0
   29332:	2e00      	cmp	r6, #0
   29334:	d1cf      	bne.n	292d6 <__aeabi_dsub+0x3fa>
   29336:	2d00      	cmp	r5, #0
   29338:	d14f      	bne.n	293da <__aeabi_dsub+0x4fe>
   2933a:	000c      	movs	r4, r1
   2933c:	4314      	orrs	r4, r2
   2933e:	d100      	bne.n	29342 <__aeabi_dsub+0x466>
   29340:	e0a0      	b.n	29484 <__aeabi_dsub+0x5a8>
   29342:	000c      	movs	r4, r1
   29344:	0017      	movs	r7, r2
   29346:	4698      	mov	r8, r3
   29348:	e64e      	b.n	28fe8 <__aeabi_dsub+0x10c>
   2934a:	4666      	mov	r6, ip
   2934c:	2400      	movs	r4, #0
   2934e:	2700      	movs	r7, #0
   29350:	e685      	b.n	2905e <__aeabi_dsub+0x182>
   29352:	001f      	movs	r7, r3
   29354:	0008      	movs	r0, r1
   29356:	3f20      	subs	r7, #32
   29358:	40f8      	lsrs	r0, r7
   2935a:	0007      	movs	r7, r0
   2935c:	2b20      	cmp	r3, #32
   2935e:	d100      	bne.n	29362 <__aeabi_dsub+0x486>
   29360:	e08e      	b.n	29480 <__aeabi_dsub+0x5a4>
   29362:	2040      	movs	r0, #64	; 0x40
   29364:	1ac3      	subs	r3, r0, r3
   29366:	4099      	lsls	r1, r3
   29368:	430a      	orrs	r2, r1
   2936a:	1e51      	subs	r1, r2, #1
   2936c:	418a      	sbcs	r2, r1
   2936e:	2100      	movs	r1, #0
   29370:	4317      	orrs	r7, r2
   29372:	e692      	b.n	2909a <__aeabi_dsub+0x1be>
   29374:	2e00      	cmp	r6, #0
   29376:	d114      	bne.n	293a2 <__aeabi_dsub+0x4c6>
   29378:	0026      	movs	r6, r4
   2937a:	4650      	mov	r0, sl
   2937c:	4306      	orrs	r6, r0
   2937e:	d062      	beq.n	29446 <__aeabi_dsub+0x56a>
   29380:	43db      	mvns	r3, r3
   29382:	2b00      	cmp	r3, #0
   29384:	d15c      	bne.n	29440 <__aeabi_dsub+0x564>
   29386:	1887      	adds	r7, r0, r2
   29388:	4297      	cmp	r7, r2
   2938a:	4192      	sbcs	r2, r2
   2938c:	1864      	adds	r4, r4, r1
   2938e:	4252      	negs	r2, r2
   29390:	18a4      	adds	r4, r4, r2
   29392:	4666      	mov	r6, ip
   29394:	e687      	b.n	290a6 <__aeabi_dsub+0x1ca>
   29396:	4650      	mov	r0, sl
   29398:	4320      	orrs	r0, r4
   2939a:	1e44      	subs	r4, r0, #1
   2939c:	41a0      	sbcs	r0, r4
   2939e:	2400      	movs	r4, #0
   293a0:	e760      	b.n	29264 <__aeabi_dsub+0x388>
   293a2:	4e57      	ldr	r6, [pc, #348]	; (29500 <__aeabi_dsub+0x624>)
   293a4:	45b4      	cmp	ip, r6
   293a6:	d04e      	beq.n	29446 <__aeabi_dsub+0x56a>
   293a8:	2680      	movs	r6, #128	; 0x80
   293aa:	0436      	lsls	r6, r6, #16
   293ac:	425b      	negs	r3, r3
   293ae:	4334      	orrs	r4, r6
   293b0:	2b38      	cmp	r3, #56	; 0x38
   293b2:	dd00      	ble.n	293b6 <__aeabi_dsub+0x4da>
   293b4:	e07f      	b.n	294b6 <__aeabi_dsub+0x5da>
   293b6:	2b1f      	cmp	r3, #31
   293b8:	dd00      	ble.n	293bc <__aeabi_dsub+0x4e0>
   293ba:	e08b      	b.n	294d4 <__aeabi_dsub+0x5f8>
   293bc:	2620      	movs	r6, #32
   293be:	0027      	movs	r7, r4
   293c0:	4650      	mov	r0, sl
   293c2:	1af6      	subs	r6, r6, r3
   293c4:	40b7      	lsls	r7, r6
   293c6:	40d8      	lsrs	r0, r3
   293c8:	4307      	orrs	r7, r0
   293ca:	4650      	mov	r0, sl
   293cc:	40b0      	lsls	r0, r6
   293ce:	1e46      	subs	r6, r0, #1
   293d0:	41b0      	sbcs	r0, r6
   293d2:	4307      	orrs	r7, r0
   293d4:	40dc      	lsrs	r4, r3
   293d6:	18bf      	adds	r7, r7, r2
   293d8:	e7d6      	b.n	29388 <__aeabi_dsub+0x4ac>
   293da:	000d      	movs	r5, r1
   293dc:	4315      	orrs	r5, r2
   293de:	d100      	bne.n	293e2 <__aeabi_dsub+0x506>
   293e0:	e602      	b.n	28fe8 <__aeabi_dsub+0x10c>
   293e2:	4650      	mov	r0, sl
   293e4:	1a80      	subs	r0, r0, r2
   293e6:	4582      	cmp	sl, r0
   293e8:	41bf      	sbcs	r7, r7
   293ea:	1a65      	subs	r5, r4, r1
   293ec:	427f      	negs	r7, r7
   293ee:	1bed      	subs	r5, r5, r7
   293f0:	4684      	mov	ip, r0
   293f2:	0228      	lsls	r0, r5, #8
   293f4:	d400      	bmi.n	293f8 <__aeabi_dsub+0x51c>
   293f6:	e68d      	b.n	29114 <__aeabi_dsub+0x238>
   293f8:	4650      	mov	r0, sl
   293fa:	1a17      	subs	r7, r2, r0
   293fc:	42ba      	cmp	r2, r7
   293fe:	4192      	sbcs	r2, r2
   29400:	1b0c      	subs	r4, r1, r4
   29402:	4252      	negs	r2, r2
   29404:	1aa4      	subs	r4, r4, r2
   29406:	4698      	mov	r8, r3
   29408:	e5ee      	b.n	28fe8 <__aeabi_dsub+0x10c>
   2940a:	000d      	movs	r5, r1
   2940c:	4315      	orrs	r5, r2
   2940e:	d100      	bne.n	29412 <__aeabi_dsub+0x536>
   29410:	e76b      	b.n	292ea <__aeabi_dsub+0x40e>
   29412:	4650      	mov	r0, sl
   29414:	0767      	lsls	r7, r4, #29
   29416:	08c0      	lsrs	r0, r0, #3
   29418:	4307      	orrs	r7, r0
   2941a:	2080      	movs	r0, #128	; 0x80
   2941c:	08e4      	lsrs	r4, r4, #3
   2941e:	0300      	lsls	r0, r0, #12
   29420:	4204      	tst	r4, r0
   29422:	d007      	beq.n	29434 <__aeabi_dsub+0x558>
   29424:	08cd      	lsrs	r5, r1, #3
   29426:	4205      	tst	r5, r0
   29428:	d104      	bne.n	29434 <__aeabi_dsub+0x558>
   2942a:	002c      	movs	r4, r5
   2942c:	4698      	mov	r8, r3
   2942e:	08d7      	lsrs	r7, r2, #3
   29430:	0749      	lsls	r1, r1, #29
   29432:	430f      	orrs	r7, r1
   29434:	0f7b      	lsrs	r3, r7, #29
   29436:	00e4      	lsls	r4, r4, #3
   29438:	431c      	orrs	r4, r3
   2943a:	00ff      	lsls	r7, r7, #3
   2943c:	4e30      	ldr	r6, [pc, #192]	; (29500 <__aeabi_dsub+0x624>)
   2943e:	e5d3      	b.n	28fe8 <__aeabi_dsub+0x10c>
   29440:	4e2f      	ldr	r6, [pc, #188]	; (29500 <__aeabi_dsub+0x624>)
   29442:	45b4      	cmp	ip, r6
   29444:	d1b4      	bne.n	293b0 <__aeabi_dsub+0x4d4>
   29446:	000c      	movs	r4, r1
   29448:	0017      	movs	r7, r2
   2944a:	4666      	mov	r6, ip
   2944c:	e5cc      	b.n	28fe8 <__aeabi_dsub+0x10c>
   2944e:	2700      	movs	r7, #0
   29450:	2400      	movs	r4, #0
   29452:	e5e8      	b.n	29026 <__aeabi_dsub+0x14a>
   29454:	2b00      	cmp	r3, #0
   29456:	d039      	beq.n	294cc <__aeabi_dsub+0x5f0>
   29458:	000b      	movs	r3, r1
   2945a:	4313      	orrs	r3, r2
   2945c:	d100      	bne.n	29460 <__aeabi_dsub+0x584>
   2945e:	e744      	b.n	292ea <__aeabi_dsub+0x40e>
   29460:	08c0      	lsrs	r0, r0, #3
   29462:	0767      	lsls	r7, r4, #29
   29464:	4307      	orrs	r7, r0
   29466:	2080      	movs	r0, #128	; 0x80
   29468:	08e4      	lsrs	r4, r4, #3
   2946a:	0300      	lsls	r0, r0, #12
   2946c:	4204      	tst	r4, r0
   2946e:	d0e1      	beq.n	29434 <__aeabi_dsub+0x558>
   29470:	08cb      	lsrs	r3, r1, #3
   29472:	4203      	tst	r3, r0
   29474:	d1de      	bne.n	29434 <__aeabi_dsub+0x558>
   29476:	08d7      	lsrs	r7, r2, #3
   29478:	0749      	lsls	r1, r1, #29
   2947a:	430f      	orrs	r7, r1
   2947c:	001c      	movs	r4, r3
   2947e:	e7d9      	b.n	29434 <__aeabi_dsub+0x558>
   29480:	2100      	movs	r1, #0
   29482:	e771      	b.n	29368 <__aeabi_dsub+0x48c>
   29484:	2500      	movs	r5, #0
   29486:	2700      	movs	r7, #0
   29488:	e5e9      	b.n	2905e <__aeabi_dsub+0x182>
   2948a:	002e      	movs	r6, r5
   2948c:	0027      	movs	r7, r4
   2948e:	3e20      	subs	r6, #32
   29490:	40f7      	lsrs	r7, r6
   29492:	2d20      	cmp	r5, #32
   29494:	d02f      	beq.n	294f6 <__aeabi_dsub+0x61a>
   29496:	2640      	movs	r6, #64	; 0x40
   29498:	1b75      	subs	r5, r6, r5
   2949a:	40ac      	lsls	r4, r5
   2949c:	4650      	mov	r0, sl
   2949e:	4320      	orrs	r0, r4
   294a0:	1e44      	subs	r4, r0, #1
   294a2:	41a0      	sbcs	r0, r4
   294a4:	2400      	movs	r4, #0
   294a6:	4338      	orrs	r0, r7
   294a8:	e6dc      	b.n	29264 <__aeabi_dsub+0x388>
   294aa:	2480      	movs	r4, #128	; 0x80
   294ac:	2500      	movs	r5, #0
   294ae:	0324      	lsls	r4, r4, #12
   294b0:	4e13      	ldr	r6, [pc, #76]	; (29500 <__aeabi_dsub+0x624>)
   294b2:	2700      	movs	r7, #0
   294b4:	e5d3      	b.n	2905e <__aeabi_dsub+0x182>
   294b6:	4650      	mov	r0, sl
   294b8:	4320      	orrs	r0, r4
   294ba:	0007      	movs	r7, r0
   294bc:	1e78      	subs	r0, r7, #1
   294be:	4187      	sbcs	r7, r0
   294c0:	2400      	movs	r4, #0
   294c2:	18bf      	adds	r7, r7, r2
   294c4:	e760      	b.n	29388 <__aeabi_dsub+0x4ac>
   294c6:	000c      	movs	r4, r1
   294c8:	0017      	movs	r7, r2
   294ca:	e58d      	b.n	28fe8 <__aeabi_dsub+0x10c>
   294cc:	000c      	movs	r4, r1
   294ce:	0017      	movs	r7, r2
   294d0:	4e0b      	ldr	r6, [pc, #44]	; (29500 <__aeabi_dsub+0x624>)
   294d2:	e589      	b.n	28fe8 <__aeabi_dsub+0x10c>
   294d4:	001e      	movs	r6, r3
   294d6:	0027      	movs	r7, r4
   294d8:	3e20      	subs	r6, #32
   294da:	40f7      	lsrs	r7, r6
   294dc:	2b20      	cmp	r3, #32
   294de:	d00c      	beq.n	294fa <__aeabi_dsub+0x61e>
   294e0:	2640      	movs	r6, #64	; 0x40
   294e2:	1af3      	subs	r3, r6, r3
   294e4:	409c      	lsls	r4, r3
   294e6:	4650      	mov	r0, sl
   294e8:	4320      	orrs	r0, r4
   294ea:	1e44      	subs	r4, r0, #1
   294ec:	41a0      	sbcs	r0, r4
   294ee:	4307      	orrs	r7, r0
   294f0:	2400      	movs	r4, #0
   294f2:	18bf      	adds	r7, r7, r2
   294f4:	e748      	b.n	29388 <__aeabi_dsub+0x4ac>
   294f6:	2400      	movs	r4, #0
   294f8:	e7d0      	b.n	2949c <__aeabi_dsub+0x5c0>
   294fa:	2400      	movs	r4, #0
   294fc:	e7f3      	b.n	294e6 <__aeabi_dsub+0x60a>
   294fe:	46c0      	nop			; (mov r8, r8)
   29500:	000007ff 	.word	0x000007ff
   29504:	ff7fffff 	.word	0xff7fffff

00029508 <__aeabi_dcmpun>:
   29508:	b570      	push	{r4, r5, r6, lr}
   2950a:	4e0e      	ldr	r6, [pc, #56]	; (29544 <__aeabi_dcmpun+0x3c>)
   2950c:	030d      	lsls	r5, r1, #12
   2950e:	031c      	lsls	r4, r3, #12
   29510:	0049      	lsls	r1, r1, #1
   29512:	005b      	lsls	r3, r3, #1
   29514:	0b2d      	lsrs	r5, r5, #12
   29516:	0d49      	lsrs	r1, r1, #21
   29518:	0b24      	lsrs	r4, r4, #12
   2951a:	0d5b      	lsrs	r3, r3, #21
   2951c:	42b1      	cmp	r1, r6
   2951e:	d004      	beq.n	2952a <__aeabi_dcmpun+0x22>
   29520:	4908      	ldr	r1, [pc, #32]	; (29544 <__aeabi_dcmpun+0x3c>)
   29522:	2000      	movs	r0, #0
   29524:	428b      	cmp	r3, r1
   29526:	d008      	beq.n	2953a <__aeabi_dcmpun+0x32>
   29528:	bd70      	pop	{r4, r5, r6, pc}
   2952a:	4305      	orrs	r5, r0
   2952c:	2001      	movs	r0, #1
   2952e:	2d00      	cmp	r5, #0
   29530:	d1fa      	bne.n	29528 <__aeabi_dcmpun+0x20>
   29532:	4904      	ldr	r1, [pc, #16]	; (29544 <__aeabi_dcmpun+0x3c>)
   29534:	2000      	movs	r0, #0
   29536:	428b      	cmp	r3, r1
   29538:	d1f6      	bne.n	29528 <__aeabi_dcmpun+0x20>
   2953a:	4314      	orrs	r4, r2
   2953c:	0020      	movs	r0, r4
   2953e:	1e44      	subs	r4, r0, #1
   29540:	41a0      	sbcs	r0, r4
   29542:	e7f1      	b.n	29528 <__aeabi_dcmpun+0x20>
   29544:	000007ff 	.word	0x000007ff

00029548 <__aeabi_d2iz>:
   29548:	b530      	push	{r4, r5, lr}
   2954a:	4d13      	ldr	r5, [pc, #76]	; (29598 <__aeabi_d2iz+0x50>)
   2954c:	030a      	lsls	r2, r1, #12
   2954e:	004b      	lsls	r3, r1, #1
   29550:	0b12      	lsrs	r2, r2, #12
   29552:	0d5b      	lsrs	r3, r3, #21
   29554:	0fc9      	lsrs	r1, r1, #31
   29556:	2400      	movs	r4, #0
   29558:	42ab      	cmp	r3, r5
   2955a:	dd10      	ble.n	2957e <__aeabi_d2iz+0x36>
   2955c:	4c0f      	ldr	r4, [pc, #60]	; (2959c <__aeabi_d2iz+0x54>)
   2955e:	42a3      	cmp	r3, r4
   29560:	dc0f      	bgt.n	29582 <__aeabi_d2iz+0x3a>
   29562:	2480      	movs	r4, #128	; 0x80
   29564:	4d0e      	ldr	r5, [pc, #56]	; (295a0 <__aeabi_d2iz+0x58>)
   29566:	0364      	lsls	r4, r4, #13
   29568:	4322      	orrs	r2, r4
   2956a:	1aed      	subs	r5, r5, r3
   2956c:	2d1f      	cmp	r5, #31
   2956e:	dd0b      	ble.n	29588 <__aeabi_d2iz+0x40>
   29570:	480c      	ldr	r0, [pc, #48]	; (295a4 <__aeabi_d2iz+0x5c>)
   29572:	1ac3      	subs	r3, r0, r3
   29574:	40da      	lsrs	r2, r3
   29576:	4254      	negs	r4, r2
   29578:	2900      	cmp	r1, #0
   2957a:	d100      	bne.n	2957e <__aeabi_d2iz+0x36>
   2957c:	0014      	movs	r4, r2
   2957e:	0020      	movs	r0, r4
   29580:	bd30      	pop	{r4, r5, pc}
   29582:	4b09      	ldr	r3, [pc, #36]	; (295a8 <__aeabi_d2iz+0x60>)
   29584:	18cc      	adds	r4, r1, r3
   29586:	e7fa      	b.n	2957e <__aeabi_d2iz+0x36>
   29588:	4c08      	ldr	r4, [pc, #32]	; (295ac <__aeabi_d2iz+0x64>)
   2958a:	40e8      	lsrs	r0, r5
   2958c:	46a4      	mov	ip, r4
   2958e:	4463      	add	r3, ip
   29590:	409a      	lsls	r2, r3
   29592:	4302      	orrs	r2, r0
   29594:	e7ef      	b.n	29576 <__aeabi_d2iz+0x2e>
   29596:	46c0      	nop			; (mov r8, r8)
   29598:	000003fe 	.word	0x000003fe
   2959c:	0000041d 	.word	0x0000041d
   295a0:	00000433 	.word	0x00000433
   295a4:	00000413 	.word	0x00000413
   295a8:	7fffffff 	.word	0x7fffffff
   295ac:	fffffbed 	.word	0xfffffbed

000295b0 <__aeabi_i2d>:
   295b0:	b570      	push	{r4, r5, r6, lr}
   295b2:	2800      	cmp	r0, #0
   295b4:	d030      	beq.n	29618 <__aeabi_i2d+0x68>
   295b6:	17c3      	asrs	r3, r0, #31
   295b8:	18c4      	adds	r4, r0, r3
   295ba:	405c      	eors	r4, r3
   295bc:	0fc5      	lsrs	r5, r0, #31
   295be:	0020      	movs	r0, r4
   295c0:	f000 f8c2 	bl	29748 <__clzsi2>
   295c4:	4b17      	ldr	r3, [pc, #92]	; (29624 <__aeabi_i2d+0x74>)
   295c6:	4a18      	ldr	r2, [pc, #96]	; (29628 <__aeabi_i2d+0x78>)
   295c8:	1a1b      	subs	r3, r3, r0
   295ca:	1ad2      	subs	r2, r2, r3
   295cc:	2a1f      	cmp	r2, #31
   295ce:	dd18      	ble.n	29602 <__aeabi_i2d+0x52>
   295d0:	4a16      	ldr	r2, [pc, #88]	; (2962c <__aeabi_i2d+0x7c>)
   295d2:	1ad2      	subs	r2, r2, r3
   295d4:	4094      	lsls	r4, r2
   295d6:	2200      	movs	r2, #0
   295d8:	0324      	lsls	r4, r4, #12
   295da:	055b      	lsls	r3, r3, #21
   295dc:	0b24      	lsrs	r4, r4, #12
   295de:	0d5b      	lsrs	r3, r3, #21
   295e0:	2100      	movs	r1, #0
   295e2:	0010      	movs	r0, r2
   295e4:	0324      	lsls	r4, r4, #12
   295e6:	0d0a      	lsrs	r2, r1, #20
   295e8:	0b24      	lsrs	r4, r4, #12
   295ea:	0512      	lsls	r2, r2, #20
   295ec:	4322      	orrs	r2, r4
   295ee:	4c10      	ldr	r4, [pc, #64]	; (29630 <__aeabi_i2d+0x80>)
   295f0:	051b      	lsls	r3, r3, #20
   295f2:	4022      	ands	r2, r4
   295f4:	4313      	orrs	r3, r2
   295f6:	005b      	lsls	r3, r3, #1
   295f8:	07ed      	lsls	r5, r5, #31
   295fa:	085b      	lsrs	r3, r3, #1
   295fc:	432b      	orrs	r3, r5
   295fe:	0019      	movs	r1, r3
   29600:	bd70      	pop	{r4, r5, r6, pc}
   29602:	0021      	movs	r1, r4
   29604:	4091      	lsls	r1, r2
   29606:	000a      	movs	r2, r1
   29608:	210b      	movs	r1, #11
   2960a:	1a08      	subs	r0, r1, r0
   2960c:	40c4      	lsrs	r4, r0
   2960e:	055b      	lsls	r3, r3, #21
   29610:	0324      	lsls	r4, r4, #12
   29612:	0b24      	lsrs	r4, r4, #12
   29614:	0d5b      	lsrs	r3, r3, #21
   29616:	e7e3      	b.n	295e0 <__aeabi_i2d+0x30>
   29618:	2500      	movs	r5, #0
   2961a:	2300      	movs	r3, #0
   2961c:	2400      	movs	r4, #0
   2961e:	2200      	movs	r2, #0
   29620:	e7de      	b.n	295e0 <__aeabi_i2d+0x30>
   29622:	46c0      	nop			; (mov r8, r8)
   29624:	0000041e 	.word	0x0000041e
   29628:	00000433 	.word	0x00000433
   2962c:	00000413 	.word	0x00000413
   29630:	800fffff 	.word	0x800fffff

00029634 <__aeabi_ui2d>:
   29634:	b510      	push	{r4, lr}
   29636:	1e04      	subs	r4, r0, #0
   29638:	d028      	beq.n	2968c <__aeabi_ui2d+0x58>
   2963a:	f000 f885 	bl	29748 <__clzsi2>
   2963e:	4b15      	ldr	r3, [pc, #84]	; (29694 <__aeabi_ui2d+0x60>)
   29640:	4a15      	ldr	r2, [pc, #84]	; (29698 <__aeabi_ui2d+0x64>)
   29642:	1a1b      	subs	r3, r3, r0
   29644:	1ad2      	subs	r2, r2, r3
   29646:	2a1f      	cmp	r2, #31
   29648:	dd15      	ble.n	29676 <__aeabi_ui2d+0x42>
   2964a:	4a14      	ldr	r2, [pc, #80]	; (2969c <__aeabi_ui2d+0x68>)
   2964c:	1ad2      	subs	r2, r2, r3
   2964e:	4094      	lsls	r4, r2
   29650:	2200      	movs	r2, #0
   29652:	0324      	lsls	r4, r4, #12
   29654:	055b      	lsls	r3, r3, #21
   29656:	0b24      	lsrs	r4, r4, #12
   29658:	0d5b      	lsrs	r3, r3, #21
   2965a:	2100      	movs	r1, #0
   2965c:	0010      	movs	r0, r2
   2965e:	0324      	lsls	r4, r4, #12
   29660:	0d0a      	lsrs	r2, r1, #20
   29662:	0b24      	lsrs	r4, r4, #12
   29664:	0512      	lsls	r2, r2, #20
   29666:	4322      	orrs	r2, r4
   29668:	4c0d      	ldr	r4, [pc, #52]	; (296a0 <__aeabi_ui2d+0x6c>)
   2966a:	051b      	lsls	r3, r3, #20
   2966c:	4022      	ands	r2, r4
   2966e:	4313      	orrs	r3, r2
   29670:	005b      	lsls	r3, r3, #1
   29672:	0859      	lsrs	r1, r3, #1
   29674:	bd10      	pop	{r4, pc}
   29676:	0021      	movs	r1, r4
   29678:	4091      	lsls	r1, r2
   2967a:	000a      	movs	r2, r1
   2967c:	210b      	movs	r1, #11
   2967e:	1a08      	subs	r0, r1, r0
   29680:	40c4      	lsrs	r4, r0
   29682:	055b      	lsls	r3, r3, #21
   29684:	0324      	lsls	r4, r4, #12
   29686:	0b24      	lsrs	r4, r4, #12
   29688:	0d5b      	lsrs	r3, r3, #21
   2968a:	e7e6      	b.n	2965a <__aeabi_ui2d+0x26>
   2968c:	2300      	movs	r3, #0
   2968e:	2400      	movs	r4, #0
   29690:	2200      	movs	r2, #0
   29692:	e7e2      	b.n	2965a <__aeabi_ui2d+0x26>
   29694:	0000041e 	.word	0x0000041e
   29698:	00000433 	.word	0x00000433
   2969c:	00000413 	.word	0x00000413
   296a0:	800fffff 	.word	0x800fffff

000296a4 <__aeabi_f2d>:
   296a4:	0041      	lsls	r1, r0, #1
   296a6:	0e09      	lsrs	r1, r1, #24
   296a8:	1c4b      	adds	r3, r1, #1
   296aa:	b570      	push	{r4, r5, r6, lr}
   296ac:	b2db      	uxtb	r3, r3
   296ae:	0246      	lsls	r6, r0, #9
   296b0:	0a75      	lsrs	r5, r6, #9
   296b2:	0fc4      	lsrs	r4, r0, #31
   296b4:	2b01      	cmp	r3, #1
   296b6:	dd14      	ble.n	296e2 <__aeabi_f2d+0x3e>
   296b8:	23e0      	movs	r3, #224	; 0xe0
   296ba:	009b      	lsls	r3, r3, #2
   296bc:	076d      	lsls	r5, r5, #29
   296be:	0b36      	lsrs	r6, r6, #12
   296c0:	18cb      	adds	r3, r1, r3
   296c2:	2100      	movs	r1, #0
   296c4:	0d0a      	lsrs	r2, r1, #20
   296c6:	0028      	movs	r0, r5
   296c8:	0512      	lsls	r2, r2, #20
   296ca:	4d1c      	ldr	r5, [pc, #112]	; (2973c <__aeabi_f2d+0x98>)
   296cc:	4332      	orrs	r2, r6
   296ce:	055b      	lsls	r3, r3, #21
   296d0:	402a      	ands	r2, r5
   296d2:	085b      	lsrs	r3, r3, #1
   296d4:	4313      	orrs	r3, r2
   296d6:	005b      	lsls	r3, r3, #1
   296d8:	07e4      	lsls	r4, r4, #31
   296da:	085b      	lsrs	r3, r3, #1
   296dc:	4323      	orrs	r3, r4
   296de:	0019      	movs	r1, r3
   296e0:	bd70      	pop	{r4, r5, r6, pc}
   296e2:	2900      	cmp	r1, #0
   296e4:	d114      	bne.n	29710 <__aeabi_f2d+0x6c>
   296e6:	2d00      	cmp	r5, #0
   296e8:	d01e      	beq.n	29728 <__aeabi_f2d+0x84>
   296ea:	0028      	movs	r0, r5
   296ec:	f000 f82c 	bl	29748 <__clzsi2>
   296f0:	280a      	cmp	r0, #10
   296f2:	dc1c      	bgt.n	2972e <__aeabi_f2d+0x8a>
   296f4:	230b      	movs	r3, #11
   296f6:	002a      	movs	r2, r5
   296f8:	1a1b      	subs	r3, r3, r0
   296fa:	40da      	lsrs	r2, r3
   296fc:	0003      	movs	r3, r0
   296fe:	3315      	adds	r3, #21
   29700:	409d      	lsls	r5, r3
   29702:	4b0f      	ldr	r3, [pc, #60]	; (29740 <__aeabi_f2d+0x9c>)
   29704:	0312      	lsls	r2, r2, #12
   29706:	1a1b      	subs	r3, r3, r0
   29708:	055b      	lsls	r3, r3, #21
   2970a:	0b16      	lsrs	r6, r2, #12
   2970c:	0d5b      	lsrs	r3, r3, #21
   2970e:	e7d8      	b.n	296c2 <__aeabi_f2d+0x1e>
   29710:	2d00      	cmp	r5, #0
   29712:	d006      	beq.n	29722 <__aeabi_f2d+0x7e>
   29714:	0b32      	lsrs	r2, r6, #12
   29716:	2680      	movs	r6, #128	; 0x80
   29718:	0336      	lsls	r6, r6, #12
   2971a:	076d      	lsls	r5, r5, #29
   2971c:	4316      	orrs	r6, r2
   2971e:	4b09      	ldr	r3, [pc, #36]	; (29744 <__aeabi_f2d+0xa0>)
   29720:	e7cf      	b.n	296c2 <__aeabi_f2d+0x1e>
   29722:	4b08      	ldr	r3, [pc, #32]	; (29744 <__aeabi_f2d+0xa0>)
   29724:	2600      	movs	r6, #0
   29726:	e7cc      	b.n	296c2 <__aeabi_f2d+0x1e>
   29728:	2300      	movs	r3, #0
   2972a:	2600      	movs	r6, #0
   2972c:	e7c9      	b.n	296c2 <__aeabi_f2d+0x1e>
   2972e:	0003      	movs	r3, r0
   29730:	002a      	movs	r2, r5
   29732:	3b0b      	subs	r3, #11
   29734:	409a      	lsls	r2, r3
   29736:	2500      	movs	r5, #0
   29738:	e7e3      	b.n	29702 <__aeabi_f2d+0x5e>
   2973a:	46c0      	nop			; (mov r8, r8)
   2973c:	800fffff 	.word	0x800fffff
   29740:	00000389 	.word	0x00000389
   29744:	000007ff 	.word	0x000007ff

00029748 <__clzsi2>:
   29748:	211c      	movs	r1, #28
   2974a:	2301      	movs	r3, #1
   2974c:	041b      	lsls	r3, r3, #16
   2974e:	4298      	cmp	r0, r3
   29750:	d301      	bcc.n	29756 <__clzsi2+0xe>
   29752:	0c00      	lsrs	r0, r0, #16
   29754:	3910      	subs	r1, #16
   29756:	0a1b      	lsrs	r3, r3, #8
   29758:	4298      	cmp	r0, r3
   2975a:	d301      	bcc.n	29760 <__clzsi2+0x18>
   2975c:	0a00      	lsrs	r0, r0, #8
   2975e:	3908      	subs	r1, #8
   29760:	091b      	lsrs	r3, r3, #4
   29762:	4298      	cmp	r0, r3
   29764:	d301      	bcc.n	2976a <__clzsi2+0x22>
   29766:	0900      	lsrs	r0, r0, #4
   29768:	3904      	subs	r1, #4
   2976a:	a202      	add	r2, pc, #8	; (adr r2, 29774 <__clzsi2+0x2c>)
   2976c:	5c10      	ldrb	r0, [r2, r0]
   2976e:	1840      	adds	r0, r0, r1
   29770:	4770      	bx	lr
   29772:	46c0      	nop			; (mov r8, r8)
   29774:	02020304 	.word	0x02020304
   29778:	01010101 	.word	0x01010101
	...

00029784 <__clzdi2>:
   29784:	b510      	push	{r4, lr}
   29786:	2900      	cmp	r1, #0
   29788:	d103      	bne.n	29792 <__clzdi2+0xe>
   2978a:	f7ff ffdd 	bl	29748 <__clzsi2>
   2978e:	3020      	adds	r0, #32
   29790:	e002      	b.n	29798 <__clzdi2+0x14>
   29792:	1c08      	adds	r0, r1, #0
   29794:	f7ff ffd8 	bl	29748 <__clzsi2>
   29798:	bd10      	pop	{r4, pc}
   2979a:	46c0      	nop			; (mov r8, r8)

0002979c <atoi>:
   2979c:	b510      	push	{r4, lr}
   2979e:	220a      	movs	r2, #10
   297a0:	2100      	movs	r1, #0
   297a2:	f000 fadd 	bl	29d60 <strtol>
   297a6:	bd10      	pop	{r4, pc}

000297a8 <calloc>:
   297a8:	b510      	push	{r4, lr}
   297aa:	4b03      	ldr	r3, [pc, #12]	; (297b8 <calloc+0x10>)
   297ac:	000a      	movs	r2, r1
   297ae:	0001      	movs	r1, r0
   297b0:	6818      	ldr	r0, [r3, #0]
   297b2:	f000 f888 	bl	298c6 <_calloc_r>
   297b6:	bd10      	pop	{r4, pc}
   297b8:	2000002c 	.word	0x2000002c

000297bc <__errno>:
   297bc:	4b01      	ldr	r3, [pc, #4]	; (297c4 <__errno+0x8>)
   297be:	6818      	ldr	r0, [r3, #0]
   297c0:	4770      	bx	lr
   297c2:	46c0      	nop			; (mov r8, r8)
   297c4:	2000002c 	.word	0x2000002c

000297c8 <__libc_init_array>:
   297c8:	b570      	push	{r4, r5, r6, lr}
   297ca:	2600      	movs	r6, #0
   297cc:	4d0c      	ldr	r5, [pc, #48]	; (29800 <__libc_init_array+0x38>)
   297ce:	4c0d      	ldr	r4, [pc, #52]	; (29804 <__libc_init_array+0x3c>)
   297d0:	1b64      	subs	r4, r4, r5
   297d2:	10a4      	asrs	r4, r4, #2
   297d4:	42a6      	cmp	r6, r4
   297d6:	d109      	bne.n	297ec <__libc_init_array+0x24>
   297d8:	2600      	movs	r6, #0
   297da:	f002 f98b 	bl	2baf4 <_init>
   297de:	4d0a      	ldr	r5, [pc, #40]	; (29808 <__libc_init_array+0x40>)
   297e0:	4c0a      	ldr	r4, [pc, #40]	; (2980c <__libc_init_array+0x44>)
   297e2:	1b64      	subs	r4, r4, r5
   297e4:	10a4      	asrs	r4, r4, #2
   297e6:	42a6      	cmp	r6, r4
   297e8:	d105      	bne.n	297f6 <__libc_init_array+0x2e>
   297ea:	bd70      	pop	{r4, r5, r6, pc}
   297ec:	00b3      	lsls	r3, r6, #2
   297ee:	58eb      	ldr	r3, [r5, r3]
   297f0:	4798      	blx	r3
   297f2:	3601      	adds	r6, #1
   297f4:	e7ee      	b.n	297d4 <__libc_init_array+0xc>
   297f6:	00b3      	lsls	r3, r6, #2
   297f8:	58eb      	ldr	r3, [r5, r3]
   297fa:	4798      	blx	r3
   297fc:	3601      	adds	r6, #1
   297fe:	e7f2      	b.n	297e6 <__libc_init_array+0x1e>
   29800:	0002bb00 	.word	0x0002bb00
   29804:	0002bb00 	.word	0x0002bb00
   29808:	0002bb00 	.word	0x0002bb00
   2980c:	0002bb04 	.word	0x0002bb04

00029810 <__locale_ctype_ptr_l>:
   29810:	30ec      	adds	r0, #236	; 0xec
   29812:	6800      	ldr	r0, [r0, #0]
   29814:	4770      	bx	lr
	...

00029818 <__locale_ctype_ptr>:
   29818:	4b04      	ldr	r3, [pc, #16]	; (2982c <__locale_ctype_ptr+0x14>)
   2981a:	681b      	ldr	r3, [r3, #0]
   2981c:	6a1b      	ldr	r3, [r3, #32]
   2981e:	2b00      	cmp	r3, #0
   29820:	d100      	bne.n	29824 <__locale_ctype_ptr+0xc>
   29822:	4b03      	ldr	r3, [pc, #12]	; (29830 <__locale_ctype_ptr+0x18>)
   29824:	33ec      	adds	r3, #236	; 0xec
   29826:	6818      	ldr	r0, [r3, #0]
   29828:	4770      	bx	lr
   2982a:	46c0      	nop			; (mov r8, r8)
   2982c:	2000002c 	.word	0x2000002c
   29830:	20000090 	.word	0x20000090

00029834 <malloc>:
   29834:	b510      	push	{r4, lr}
   29836:	4b03      	ldr	r3, [pc, #12]	; (29844 <malloc+0x10>)
   29838:	0001      	movs	r1, r0
   2983a:	6818      	ldr	r0, [r3, #0]
   2983c:	f000 f89c 	bl	29978 <_malloc_r>
   29840:	bd10      	pop	{r4, pc}
   29842:	46c0      	nop			; (mov r8, r8)
   29844:	2000002c 	.word	0x2000002c

00029848 <free>:
   29848:	b510      	push	{r4, lr}
   2984a:	4b03      	ldr	r3, [pc, #12]	; (29858 <free+0x10>)
   2984c:	0001      	movs	r1, r0
   2984e:	6818      	ldr	r0, [r3, #0]
   29850:	f000 f848 	bl	298e4 <_free_r>
   29854:	bd10      	pop	{r4, pc}
   29856:	46c0      	nop			; (mov r8, r8)
   29858:	2000002c 	.word	0x2000002c

0002985c <__ascii_mbtowc>:
   2985c:	b082      	sub	sp, #8
   2985e:	2900      	cmp	r1, #0
   29860:	d100      	bne.n	29864 <__ascii_mbtowc+0x8>
   29862:	a901      	add	r1, sp, #4
   29864:	1e10      	subs	r0, r2, #0
   29866:	d006      	beq.n	29876 <__ascii_mbtowc+0x1a>
   29868:	2b00      	cmp	r3, #0
   2986a:	d006      	beq.n	2987a <__ascii_mbtowc+0x1e>
   2986c:	7813      	ldrb	r3, [r2, #0]
   2986e:	600b      	str	r3, [r1, #0]
   29870:	7810      	ldrb	r0, [r2, #0]
   29872:	1e43      	subs	r3, r0, #1
   29874:	4198      	sbcs	r0, r3
   29876:	b002      	add	sp, #8
   29878:	4770      	bx	lr
   2987a:	2002      	movs	r0, #2
   2987c:	4240      	negs	r0, r0
   2987e:	e7fa      	b.n	29876 <__ascii_mbtowc+0x1a>

00029880 <memcpy>:
   29880:	2300      	movs	r3, #0
   29882:	b510      	push	{r4, lr}
   29884:	429a      	cmp	r2, r3
   29886:	d100      	bne.n	2988a <memcpy+0xa>
   29888:	bd10      	pop	{r4, pc}
   2988a:	5ccc      	ldrb	r4, [r1, r3]
   2988c:	54c4      	strb	r4, [r0, r3]
   2988e:	3301      	adds	r3, #1
   29890:	e7f8      	b.n	29884 <memcpy+0x4>

00029892 <memmove>:
   29892:	b510      	push	{r4, lr}
   29894:	4288      	cmp	r0, r1
   29896:	d902      	bls.n	2989e <memmove+0xc>
   29898:	188b      	adds	r3, r1, r2
   2989a:	4298      	cmp	r0, r3
   2989c:	d308      	bcc.n	298b0 <memmove+0x1e>
   2989e:	2300      	movs	r3, #0
   298a0:	429a      	cmp	r2, r3
   298a2:	d007      	beq.n	298b4 <memmove+0x22>
   298a4:	5ccc      	ldrb	r4, [r1, r3]
   298a6:	54c4      	strb	r4, [r0, r3]
   298a8:	3301      	adds	r3, #1
   298aa:	e7f9      	b.n	298a0 <memmove+0xe>
   298ac:	5c8b      	ldrb	r3, [r1, r2]
   298ae:	5483      	strb	r3, [r0, r2]
   298b0:	3a01      	subs	r2, #1
   298b2:	d2fb      	bcs.n	298ac <memmove+0x1a>
   298b4:	bd10      	pop	{r4, pc}

000298b6 <memset>:
   298b6:	0003      	movs	r3, r0
   298b8:	1882      	adds	r2, r0, r2
   298ba:	4293      	cmp	r3, r2
   298bc:	d100      	bne.n	298c0 <memset+0xa>
   298be:	4770      	bx	lr
   298c0:	7019      	strb	r1, [r3, #0]
   298c2:	3301      	adds	r3, #1
   298c4:	e7f9      	b.n	298ba <memset+0x4>

000298c6 <_calloc_r>:
   298c6:	434a      	muls	r2, r1
   298c8:	b570      	push	{r4, r5, r6, lr}
   298ca:	0011      	movs	r1, r2
   298cc:	0014      	movs	r4, r2
   298ce:	f000 f853 	bl	29978 <_malloc_r>
   298d2:	1e05      	subs	r5, r0, #0
   298d4:	d003      	beq.n	298de <_calloc_r+0x18>
   298d6:	0022      	movs	r2, r4
   298d8:	2100      	movs	r1, #0
   298da:	f7ff ffec 	bl	298b6 <memset>
   298de:	0028      	movs	r0, r5
   298e0:	bd70      	pop	{r4, r5, r6, pc}
	...

000298e4 <_free_r>:
   298e4:	b570      	push	{r4, r5, r6, lr}
   298e6:	0005      	movs	r5, r0
   298e8:	2900      	cmp	r1, #0
   298ea:	d010      	beq.n	2990e <_free_r+0x2a>
   298ec:	1f0c      	subs	r4, r1, #4
   298ee:	6823      	ldr	r3, [r4, #0]
   298f0:	2b00      	cmp	r3, #0
   298f2:	da00      	bge.n	298f6 <_free_r+0x12>
   298f4:	18e4      	adds	r4, r4, r3
   298f6:	0028      	movs	r0, r5
   298f8:	f000 fab4 	bl	29e64 <__malloc_lock>
   298fc:	4a1d      	ldr	r2, [pc, #116]	; (29974 <_free_r+0x90>)
   298fe:	6813      	ldr	r3, [r2, #0]
   29900:	2b00      	cmp	r3, #0
   29902:	d105      	bne.n	29910 <_free_r+0x2c>
   29904:	6063      	str	r3, [r4, #4]
   29906:	6014      	str	r4, [r2, #0]
   29908:	0028      	movs	r0, r5
   2990a:	f000 faac 	bl	29e66 <__malloc_unlock>
   2990e:	bd70      	pop	{r4, r5, r6, pc}
   29910:	42a3      	cmp	r3, r4
   29912:	d909      	bls.n	29928 <_free_r+0x44>
   29914:	6821      	ldr	r1, [r4, #0]
   29916:	1860      	adds	r0, r4, r1
   29918:	4283      	cmp	r3, r0
   2991a:	d1f3      	bne.n	29904 <_free_r+0x20>
   2991c:	6818      	ldr	r0, [r3, #0]
   2991e:	685b      	ldr	r3, [r3, #4]
   29920:	1841      	adds	r1, r0, r1
   29922:	6021      	str	r1, [r4, #0]
   29924:	e7ee      	b.n	29904 <_free_r+0x20>
   29926:	0013      	movs	r3, r2
   29928:	685a      	ldr	r2, [r3, #4]
   2992a:	2a00      	cmp	r2, #0
   2992c:	d001      	beq.n	29932 <_free_r+0x4e>
   2992e:	42a2      	cmp	r2, r4
   29930:	d9f9      	bls.n	29926 <_free_r+0x42>
   29932:	6819      	ldr	r1, [r3, #0]
   29934:	1858      	adds	r0, r3, r1
   29936:	42a0      	cmp	r0, r4
   29938:	d10b      	bne.n	29952 <_free_r+0x6e>
   2993a:	6820      	ldr	r0, [r4, #0]
   2993c:	1809      	adds	r1, r1, r0
   2993e:	1858      	adds	r0, r3, r1
   29940:	6019      	str	r1, [r3, #0]
   29942:	4282      	cmp	r2, r0
   29944:	d1e0      	bne.n	29908 <_free_r+0x24>
   29946:	6810      	ldr	r0, [r2, #0]
   29948:	6852      	ldr	r2, [r2, #4]
   2994a:	1841      	adds	r1, r0, r1
   2994c:	6019      	str	r1, [r3, #0]
   2994e:	605a      	str	r2, [r3, #4]
   29950:	e7da      	b.n	29908 <_free_r+0x24>
   29952:	42a0      	cmp	r0, r4
   29954:	d902      	bls.n	2995c <_free_r+0x78>
   29956:	230c      	movs	r3, #12
   29958:	602b      	str	r3, [r5, #0]
   2995a:	e7d5      	b.n	29908 <_free_r+0x24>
   2995c:	6821      	ldr	r1, [r4, #0]
   2995e:	1860      	adds	r0, r4, r1
   29960:	4282      	cmp	r2, r0
   29962:	d103      	bne.n	2996c <_free_r+0x88>
   29964:	6810      	ldr	r0, [r2, #0]
   29966:	6852      	ldr	r2, [r2, #4]
   29968:	1841      	adds	r1, r0, r1
   2996a:	6021      	str	r1, [r4, #0]
   2996c:	6062      	str	r2, [r4, #4]
   2996e:	605c      	str	r4, [r3, #4]
   29970:	e7ca      	b.n	29908 <_free_r+0x24>
   29972:	46c0      	nop			; (mov r8, r8)
   29974:	20000514 	.word	0x20000514

00029978 <_malloc_r>:
   29978:	2303      	movs	r3, #3
   2997a:	b570      	push	{r4, r5, r6, lr}
   2997c:	1ccd      	adds	r5, r1, #3
   2997e:	439d      	bics	r5, r3
   29980:	3508      	adds	r5, #8
   29982:	0006      	movs	r6, r0
   29984:	2d0c      	cmp	r5, #12
   29986:	d21e      	bcs.n	299c6 <_malloc_r+0x4e>
   29988:	250c      	movs	r5, #12
   2998a:	42a9      	cmp	r1, r5
   2998c:	d81d      	bhi.n	299ca <_malloc_r+0x52>
   2998e:	0030      	movs	r0, r6
   29990:	f000 fa68 	bl	29e64 <__malloc_lock>
   29994:	4a25      	ldr	r2, [pc, #148]	; (29a2c <_malloc_r+0xb4>)
   29996:	6814      	ldr	r4, [r2, #0]
   29998:	0021      	movs	r1, r4
   2999a:	2900      	cmp	r1, #0
   2999c:	d119      	bne.n	299d2 <_malloc_r+0x5a>
   2999e:	4c24      	ldr	r4, [pc, #144]	; (29a30 <_malloc_r+0xb8>)
   299a0:	6823      	ldr	r3, [r4, #0]
   299a2:	2b00      	cmp	r3, #0
   299a4:	d103      	bne.n	299ae <_malloc_r+0x36>
   299a6:	0030      	movs	r0, r6
   299a8:	f000 f844 	bl	29a34 <_sbrk_r>
   299ac:	6020      	str	r0, [r4, #0]
   299ae:	0029      	movs	r1, r5
   299b0:	0030      	movs	r0, r6
   299b2:	f000 f83f 	bl	29a34 <_sbrk_r>
   299b6:	1c43      	adds	r3, r0, #1
   299b8:	d12c      	bne.n	29a14 <_malloc_r+0x9c>
   299ba:	230c      	movs	r3, #12
   299bc:	0030      	movs	r0, r6
   299be:	6033      	str	r3, [r6, #0]
   299c0:	f000 fa51 	bl	29e66 <__malloc_unlock>
   299c4:	e003      	b.n	299ce <_malloc_r+0x56>
   299c6:	2d00      	cmp	r5, #0
   299c8:	dadf      	bge.n	2998a <_malloc_r+0x12>
   299ca:	230c      	movs	r3, #12
   299cc:	6033      	str	r3, [r6, #0]
   299ce:	2000      	movs	r0, #0
   299d0:	bd70      	pop	{r4, r5, r6, pc}
   299d2:	680b      	ldr	r3, [r1, #0]
   299d4:	1b5b      	subs	r3, r3, r5
   299d6:	d41a      	bmi.n	29a0e <_malloc_r+0x96>
   299d8:	2b0b      	cmp	r3, #11
   299da:	d903      	bls.n	299e4 <_malloc_r+0x6c>
   299dc:	600b      	str	r3, [r1, #0]
   299de:	18cc      	adds	r4, r1, r3
   299e0:	6025      	str	r5, [r4, #0]
   299e2:	e003      	b.n	299ec <_malloc_r+0x74>
   299e4:	428c      	cmp	r4, r1
   299e6:	d10e      	bne.n	29a06 <_malloc_r+0x8e>
   299e8:	6863      	ldr	r3, [r4, #4]
   299ea:	6013      	str	r3, [r2, #0]
   299ec:	0030      	movs	r0, r6
   299ee:	f000 fa3a 	bl	29e66 <__malloc_unlock>
   299f2:	0020      	movs	r0, r4
   299f4:	2207      	movs	r2, #7
   299f6:	300b      	adds	r0, #11
   299f8:	1d23      	adds	r3, r4, #4
   299fa:	4390      	bics	r0, r2
   299fc:	1ac3      	subs	r3, r0, r3
   299fe:	d0e7      	beq.n	299d0 <_malloc_r+0x58>
   29a00:	425a      	negs	r2, r3
   29a02:	50e2      	str	r2, [r4, r3]
   29a04:	e7e4      	b.n	299d0 <_malloc_r+0x58>
   29a06:	684b      	ldr	r3, [r1, #4]
   29a08:	6063      	str	r3, [r4, #4]
   29a0a:	000c      	movs	r4, r1
   29a0c:	e7ee      	b.n	299ec <_malloc_r+0x74>
   29a0e:	000c      	movs	r4, r1
   29a10:	6849      	ldr	r1, [r1, #4]
   29a12:	e7c2      	b.n	2999a <_malloc_r+0x22>
   29a14:	2303      	movs	r3, #3
   29a16:	1cc4      	adds	r4, r0, #3
   29a18:	439c      	bics	r4, r3
   29a1a:	42a0      	cmp	r0, r4
   29a1c:	d0e0      	beq.n	299e0 <_malloc_r+0x68>
   29a1e:	1a21      	subs	r1, r4, r0
   29a20:	0030      	movs	r0, r6
   29a22:	f000 f807 	bl	29a34 <_sbrk_r>
   29a26:	1c43      	adds	r3, r0, #1
   29a28:	d1da      	bne.n	299e0 <_malloc_r+0x68>
   29a2a:	e7c6      	b.n	299ba <_malloc_r+0x42>
   29a2c:	20000514 	.word	0x20000514
   29a30:	20000518 	.word	0x20000518

00029a34 <_sbrk_r>:
   29a34:	2300      	movs	r3, #0
   29a36:	b570      	push	{r4, r5, r6, lr}
   29a38:	4c06      	ldr	r4, [pc, #24]	; (29a54 <_sbrk_r+0x20>)
   29a3a:	0005      	movs	r5, r0
   29a3c:	0008      	movs	r0, r1
   29a3e:	6023      	str	r3, [r4, #0]
   29a40:	f7fb fdb2 	bl	255a8 <_sbrk>
   29a44:	1c43      	adds	r3, r0, #1
   29a46:	d103      	bne.n	29a50 <_sbrk_r+0x1c>
   29a48:	6823      	ldr	r3, [r4, #0]
   29a4a:	2b00      	cmp	r3, #0
   29a4c:	d000      	beq.n	29a50 <_sbrk_r+0x1c>
   29a4e:	602b      	str	r3, [r5, #0]
   29a50:	bd70      	pop	{r4, r5, r6, pc}
   29a52:	46c0      	nop			; (mov r8, r8)
   29a54:	20000988 	.word	0x20000988

00029a58 <sniprintf>:
   29a58:	b40c      	push	{r2, r3}
   29a5a:	b530      	push	{r4, r5, lr}
   29a5c:	4b16      	ldr	r3, [pc, #88]	; (29ab8 <sniprintf+0x60>)
   29a5e:	b09d      	sub	sp, #116	; 0x74
   29a60:	1e0c      	subs	r4, r1, #0
   29a62:	681d      	ldr	r5, [r3, #0]
   29a64:	da08      	bge.n	29a78 <sniprintf+0x20>
   29a66:	238b      	movs	r3, #139	; 0x8b
   29a68:	2001      	movs	r0, #1
   29a6a:	602b      	str	r3, [r5, #0]
   29a6c:	4240      	negs	r0, r0
   29a6e:	b01d      	add	sp, #116	; 0x74
   29a70:	bc30      	pop	{r4, r5}
   29a72:	bc08      	pop	{r3}
   29a74:	b002      	add	sp, #8
   29a76:	4718      	bx	r3
   29a78:	2382      	movs	r3, #130	; 0x82
   29a7a:	a902      	add	r1, sp, #8
   29a7c:	009b      	lsls	r3, r3, #2
   29a7e:	818b      	strh	r3, [r1, #12]
   29a80:	2300      	movs	r3, #0
   29a82:	9002      	str	r0, [sp, #8]
   29a84:	6108      	str	r0, [r1, #16]
   29a86:	429c      	cmp	r4, r3
   29a88:	d000      	beq.n	29a8c <sniprintf+0x34>
   29a8a:	1e63      	subs	r3, r4, #1
   29a8c:	608b      	str	r3, [r1, #8]
   29a8e:	614b      	str	r3, [r1, #20]
   29a90:	2301      	movs	r3, #1
   29a92:	425b      	negs	r3, r3
   29a94:	81cb      	strh	r3, [r1, #14]
   29a96:	9a20      	ldr	r2, [sp, #128]	; 0x80
   29a98:	ab21      	add	r3, sp, #132	; 0x84
   29a9a:	0028      	movs	r0, r5
   29a9c:	9301      	str	r3, [sp, #4]
   29a9e:	f000 fa45 	bl	29f2c <_svfiprintf_r>
   29aa2:	1c43      	adds	r3, r0, #1
   29aa4:	da01      	bge.n	29aaa <sniprintf+0x52>
   29aa6:	238b      	movs	r3, #139	; 0x8b
   29aa8:	602b      	str	r3, [r5, #0]
   29aaa:	2c00      	cmp	r4, #0
   29aac:	d0df      	beq.n	29a6e <sniprintf+0x16>
   29aae:	2300      	movs	r3, #0
   29ab0:	9a02      	ldr	r2, [sp, #8]
   29ab2:	7013      	strb	r3, [r2, #0]
   29ab4:	e7db      	b.n	29a6e <sniprintf+0x16>
   29ab6:	46c0      	nop			; (mov r8, r8)
   29ab8:	2000002c 	.word	0x2000002c

00029abc <siprintf>:
   29abc:	b40e      	push	{r1, r2, r3}
   29abe:	b510      	push	{r4, lr}
   29ac0:	b09d      	sub	sp, #116	; 0x74
   29ac2:	a902      	add	r1, sp, #8
   29ac4:	9002      	str	r0, [sp, #8]
   29ac6:	6108      	str	r0, [r1, #16]
   29ac8:	480b      	ldr	r0, [pc, #44]	; (29af8 <siprintf+0x3c>)
   29aca:	2482      	movs	r4, #130	; 0x82
   29acc:	6088      	str	r0, [r1, #8]
   29ace:	6148      	str	r0, [r1, #20]
   29ad0:	2001      	movs	r0, #1
   29ad2:	4240      	negs	r0, r0
   29ad4:	ab1f      	add	r3, sp, #124	; 0x7c
   29ad6:	81c8      	strh	r0, [r1, #14]
   29ad8:	4808      	ldr	r0, [pc, #32]	; (29afc <siprintf+0x40>)
   29ada:	cb04      	ldmia	r3!, {r2}
   29adc:	00a4      	lsls	r4, r4, #2
   29ade:	6800      	ldr	r0, [r0, #0]
   29ae0:	9301      	str	r3, [sp, #4]
   29ae2:	818c      	strh	r4, [r1, #12]
   29ae4:	f000 fa22 	bl	29f2c <_svfiprintf_r>
   29ae8:	2300      	movs	r3, #0
   29aea:	9a02      	ldr	r2, [sp, #8]
   29aec:	7013      	strb	r3, [r2, #0]
   29aee:	b01d      	add	sp, #116	; 0x74
   29af0:	bc10      	pop	{r4}
   29af2:	bc08      	pop	{r3}
   29af4:	b003      	add	sp, #12
   29af6:	4718      	bx	r3
   29af8:	7fffffff 	.word	0x7fffffff
   29afc:	2000002c 	.word	0x2000002c

00029b00 <strcat>:
   29b00:	0002      	movs	r2, r0
   29b02:	b510      	push	{r4, lr}
   29b04:	7813      	ldrb	r3, [r2, #0]
   29b06:	2b00      	cmp	r3, #0
   29b08:	d105      	bne.n	29b16 <strcat+0x16>
   29b0a:	5ccc      	ldrb	r4, [r1, r3]
   29b0c:	54d4      	strb	r4, [r2, r3]
   29b0e:	3301      	adds	r3, #1
   29b10:	2c00      	cmp	r4, #0
   29b12:	d1fa      	bne.n	29b0a <strcat+0xa>
   29b14:	bd10      	pop	{r4, pc}
   29b16:	3201      	adds	r2, #1
   29b18:	e7f4      	b.n	29b04 <strcat+0x4>

00029b1a <strchr>:
   29b1a:	b2c9      	uxtb	r1, r1
   29b1c:	7803      	ldrb	r3, [r0, #0]
   29b1e:	2b00      	cmp	r3, #0
   29b20:	d004      	beq.n	29b2c <strchr+0x12>
   29b22:	4299      	cmp	r1, r3
   29b24:	d100      	bne.n	29b28 <strchr+0xe>
   29b26:	4770      	bx	lr
   29b28:	3001      	adds	r0, #1
   29b2a:	e7f7      	b.n	29b1c <strchr+0x2>
   29b2c:	424b      	negs	r3, r1
   29b2e:	4159      	adcs	r1, r3
   29b30:	4249      	negs	r1, r1
   29b32:	4008      	ands	r0, r1
   29b34:	e7f7      	b.n	29b26 <strchr+0xc>

00029b36 <strcpy>:
   29b36:	1c03      	adds	r3, r0, #0
   29b38:	780a      	ldrb	r2, [r1, #0]
   29b3a:	3101      	adds	r1, #1
   29b3c:	701a      	strb	r2, [r3, #0]
   29b3e:	3301      	adds	r3, #1
   29b40:	2a00      	cmp	r2, #0
   29b42:	d1f9      	bne.n	29b38 <strcpy+0x2>
   29b44:	4770      	bx	lr

00029b46 <strlen>:
   29b46:	2300      	movs	r3, #0
   29b48:	5cc2      	ldrb	r2, [r0, r3]
   29b4a:	3301      	adds	r3, #1
   29b4c:	2a00      	cmp	r2, #0
   29b4e:	d1fb      	bne.n	29b48 <strlen+0x2>
   29b50:	1e58      	subs	r0, r3, #1
   29b52:	4770      	bx	lr

00029b54 <strncmp>:
   29b54:	2300      	movs	r3, #0
   29b56:	b530      	push	{r4, r5, lr}
   29b58:	429a      	cmp	r2, r3
   29b5a:	d00a      	beq.n	29b72 <strncmp+0x1e>
   29b5c:	3a01      	subs	r2, #1
   29b5e:	5cc4      	ldrb	r4, [r0, r3]
   29b60:	5ccd      	ldrb	r5, [r1, r3]
   29b62:	42ac      	cmp	r4, r5
   29b64:	d104      	bne.n	29b70 <strncmp+0x1c>
   29b66:	429a      	cmp	r2, r3
   29b68:	d002      	beq.n	29b70 <strncmp+0x1c>
   29b6a:	3301      	adds	r3, #1
   29b6c:	2c00      	cmp	r4, #0
   29b6e:	d1f6      	bne.n	29b5e <strncmp+0xa>
   29b70:	1b63      	subs	r3, r4, r5
   29b72:	0018      	movs	r0, r3
   29b74:	bd30      	pop	{r4, r5, pc}

00029b76 <strstr>:
   29b76:	b510      	push	{r4, lr}
   29b78:	0002      	movs	r2, r0
   29b7a:	7800      	ldrb	r0, [r0, #0]
   29b7c:	2800      	cmp	r0, #0
   29b7e:	d104      	bne.n	29b8a <strstr+0x14>
   29b80:	7809      	ldrb	r1, [r1, #0]
   29b82:	2900      	cmp	r1, #0
   29b84:	d00d      	beq.n	29ba2 <strstr+0x2c>
   29b86:	bd10      	pop	{r4, pc}
   29b88:	3201      	adds	r2, #1
   29b8a:	7810      	ldrb	r0, [r2, #0]
   29b8c:	2800      	cmp	r0, #0
   29b8e:	d0fa      	beq.n	29b86 <strstr+0x10>
   29b90:	2300      	movs	r3, #0
   29b92:	5cc8      	ldrb	r0, [r1, r3]
   29b94:	2800      	cmp	r0, #0
   29b96:	d004      	beq.n	29ba2 <strstr+0x2c>
   29b98:	5cd4      	ldrb	r4, [r2, r3]
   29b9a:	4284      	cmp	r4, r0
   29b9c:	d1f4      	bne.n	29b88 <strstr+0x12>
   29b9e:	3301      	adds	r3, #1
   29ba0:	e7f7      	b.n	29b92 <strstr+0x1c>
   29ba2:	0010      	movs	r0, r2
   29ba4:	e7ef      	b.n	29b86 <strstr+0x10>
	...

00029ba8 <strtok>:
   29ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29baa:	4b12      	ldr	r3, [pc, #72]	; (29bf4 <strtok+0x4c>)
   29bac:	0006      	movs	r6, r0
   29bae:	681d      	ldr	r5, [r3, #0]
   29bb0:	000f      	movs	r7, r1
   29bb2:	6dac      	ldr	r4, [r5, #88]	; 0x58
   29bb4:	2c00      	cmp	r4, #0
   29bb6:	d116      	bne.n	29be6 <strtok+0x3e>
   29bb8:	2050      	movs	r0, #80	; 0x50
   29bba:	f7ff fe3b 	bl	29834 <malloc>
   29bbe:	65a8      	str	r0, [r5, #88]	; 0x58
   29bc0:	6004      	str	r4, [r0, #0]
   29bc2:	6044      	str	r4, [r0, #4]
   29bc4:	6084      	str	r4, [r0, #8]
   29bc6:	60c4      	str	r4, [r0, #12]
   29bc8:	6104      	str	r4, [r0, #16]
   29bca:	6144      	str	r4, [r0, #20]
   29bcc:	6184      	str	r4, [r0, #24]
   29bce:	6284      	str	r4, [r0, #40]	; 0x28
   29bd0:	62c4      	str	r4, [r0, #44]	; 0x2c
   29bd2:	6304      	str	r4, [r0, #48]	; 0x30
   29bd4:	6344      	str	r4, [r0, #52]	; 0x34
   29bd6:	6384      	str	r4, [r0, #56]	; 0x38
   29bd8:	63c4      	str	r4, [r0, #60]	; 0x3c
   29bda:	6404      	str	r4, [r0, #64]	; 0x40
   29bdc:	6444      	str	r4, [r0, #68]	; 0x44
   29bde:	6484      	str	r4, [r0, #72]	; 0x48
   29be0:	64c4      	str	r4, [r0, #76]	; 0x4c
   29be2:	7704      	strb	r4, [r0, #28]
   29be4:	6244      	str	r4, [r0, #36]	; 0x24
   29be6:	6daa      	ldr	r2, [r5, #88]	; 0x58
   29be8:	0039      	movs	r1, r7
   29bea:	0030      	movs	r0, r6
   29bec:	2301      	movs	r3, #1
   29bee:	f000 f803 	bl	29bf8 <__strtok_r>
   29bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29bf4:	2000002c 	.word	0x2000002c

00029bf8 <__strtok_r>:
   29bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
   29bfa:	2800      	cmp	r0, #0
   29bfc:	d104      	bne.n	29c08 <__strtok_r+0x10>
   29bfe:	6810      	ldr	r0, [r2, #0]
   29c00:	2800      	cmp	r0, #0
   29c02:	d101      	bne.n	29c08 <__strtok_r+0x10>
   29c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29c06:	0020      	movs	r0, r4
   29c08:	000e      	movs	r6, r1
   29c0a:	7805      	ldrb	r5, [r0, #0]
   29c0c:	1c44      	adds	r4, r0, #1
   29c0e:	7837      	ldrb	r7, [r6, #0]
   29c10:	2f00      	cmp	r7, #0
   29c12:	d104      	bne.n	29c1e <__strtok_r+0x26>
   29c14:	2d00      	cmp	r5, #0
   29c16:	d110      	bne.n	29c3a <__strtok_r+0x42>
   29c18:	6015      	str	r5, [r2, #0]
   29c1a:	0028      	movs	r0, r5
   29c1c:	e7f2      	b.n	29c04 <__strtok_r+0xc>
   29c1e:	3601      	adds	r6, #1
   29c20:	42bd      	cmp	r5, r7
   29c22:	d1f4      	bne.n	29c0e <__strtok_r+0x16>
   29c24:	2b00      	cmp	r3, #0
   29c26:	d1ee      	bne.n	29c06 <__strtok_r+0xe>
   29c28:	6014      	str	r4, [r2, #0]
   29c2a:	7003      	strb	r3, [r0, #0]
   29c2c:	e7ea      	b.n	29c04 <__strtok_r+0xc>
   29c2e:	0033      	movs	r3, r6
   29c30:	e00e      	b.n	29c50 <__strtok_r+0x58>
   29c32:	3501      	adds	r5, #1
   29c34:	001c      	movs	r4, r3
   29c36:	2f00      	cmp	r7, #0
   29c38:	d102      	bne.n	29c40 <__strtok_r+0x48>
   29c3a:	000d      	movs	r5, r1
   29c3c:	7826      	ldrb	r6, [r4, #0]
   29c3e:	1c63      	adds	r3, r4, #1
   29c40:	782f      	ldrb	r7, [r5, #0]
   29c42:	42be      	cmp	r6, r7
   29c44:	d1f5      	bne.n	29c32 <__strtok_r+0x3a>
   29c46:	2e00      	cmp	r6, #0
   29c48:	d0f1      	beq.n	29c2e <__strtok_r+0x36>
   29c4a:	2400      	movs	r4, #0
   29c4c:	1e59      	subs	r1, r3, #1
   29c4e:	700c      	strb	r4, [r1, #0]
   29c50:	6013      	str	r3, [r2, #0]
   29c52:	e7d7      	b.n	29c04 <__strtok_r+0xc>

00029c54 <_strtol_l.isra.0>:
   29c54:	b5f0      	push	{r4, r5, r6, r7, lr}
   29c56:	001f      	movs	r7, r3
   29c58:	000e      	movs	r6, r1
   29c5a:	b087      	sub	sp, #28
   29c5c:	9005      	str	r0, [sp, #20]
   29c5e:	9103      	str	r1, [sp, #12]
   29c60:	9202      	str	r2, [sp, #8]
   29c62:	980c      	ldr	r0, [sp, #48]	; 0x30
   29c64:	7834      	ldrb	r4, [r6, #0]
   29c66:	f7ff fdd3 	bl	29810 <__locale_ctype_ptr_l>
   29c6a:	2208      	movs	r2, #8
   29c6c:	1900      	adds	r0, r0, r4
   29c6e:	7843      	ldrb	r3, [r0, #1]
   29c70:	1c75      	adds	r5, r6, #1
   29c72:	4013      	ands	r3, r2
   29c74:	d10c      	bne.n	29c90 <_strtol_l.isra.0+0x3c>
   29c76:	2c2d      	cmp	r4, #45	; 0x2d
   29c78:	d10c      	bne.n	29c94 <_strtol_l.isra.0+0x40>
   29c7a:	3301      	adds	r3, #1
   29c7c:	782c      	ldrb	r4, [r5, #0]
   29c7e:	9301      	str	r3, [sp, #4]
   29c80:	1cb5      	adds	r5, r6, #2
   29c82:	2f00      	cmp	r7, #0
   29c84:	d00c      	beq.n	29ca0 <_strtol_l.isra.0+0x4c>
   29c86:	2f10      	cmp	r7, #16
   29c88:	d114      	bne.n	29cb4 <_strtol_l.isra.0+0x60>
   29c8a:	2c30      	cmp	r4, #48	; 0x30
   29c8c:	d00a      	beq.n	29ca4 <_strtol_l.isra.0+0x50>
   29c8e:	e011      	b.n	29cb4 <_strtol_l.isra.0+0x60>
   29c90:	002e      	movs	r6, r5
   29c92:	e7e6      	b.n	29c62 <_strtol_l.isra.0+0xe>
   29c94:	9301      	str	r3, [sp, #4]
   29c96:	2c2b      	cmp	r4, #43	; 0x2b
   29c98:	d1f3      	bne.n	29c82 <_strtol_l.isra.0+0x2e>
   29c9a:	782c      	ldrb	r4, [r5, #0]
   29c9c:	1cb5      	adds	r5, r6, #2
   29c9e:	e7f0      	b.n	29c82 <_strtol_l.isra.0+0x2e>
   29ca0:	2c30      	cmp	r4, #48	; 0x30
   29ca2:	d12f      	bne.n	29d04 <_strtol_l.isra.0+0xb0>
   29ca4:	2220      	movs	r2, #32
   29ca6:	782b      	ldrb	r3, [r5, #0]
   29ca8:	4393      	bics	r3, r2
   29caa:	2b58      	cmp	r3, #88	; 0x58
   29cac:	d151      	bne.n	29d52 <_strtol_l.isra.0+0xfe>
   29cae:	2710      	movs	r7, #16
   29cb0:	786c      	ldrb	r4, [r5, #1]
   29cb2:	3502      	adds	r5, #2
   29cb4:	9b01      	ldr	r3, [sp, #4]
   29cb6:	4a29      	ldr	r2, [pc, #164]	; (29d5c <_strtol_l.isra.0+0x108>)
   29cb8:	0039      	movs	r1, r7
   29cba:	189e      	adds	r6, r3, r2
   29cbc:	0030      	movs	r0, r6
   29cbe:	f7fd f863 	bl	26d88 <__aeabi_uidivmod>
   29cc2:	0030      	movs	r0, r6
   29cc4:	9104      	str	r1, [sp, #16]
   29cc6:	0039      	movs	r1, r7
   29cc8:	f7fc ffd8 	bl	26c7c <__udivsi3>
   29ccc:	2101      	movs	r1, #1
   29cce:	2300      	movs	r3, #0
   29cd0:	4249      	negs	r1, r1
   29cd2:	0002      	movs	r2, r0
   29cd4:	468c      	mov	ip, r1
   29cd6:	0018      	movs	r0, r3
   29cd8:	0021      	movs	r1, r4
   29cda:	3930      	subs	r1, #48	; 0x30
   29cdc:	2909      	cmp	r1, #9
   29cde:	d813      	bhi.n	29d08 <_strtol_l.isra.0+0xb4>
   29ce0:	000c      	movs	r4, r1
   29ce2:	42a7      	cmp	r7, r4
   29ce4:	dd1c      	ble.n	29d20 <_strtol_l.isra.0+0xcc>
   29ce6:	1c59      	adds	r1, r3, #1
   29ce8:	d009      	beq.n	29cfe <_strtol_l.isra.0+0xaa>
   29cea:	4663      	mov	r3, ip
   29cec:	4282      	cmp	r2, r0
   29cee:	d306      	bcc.n	29cfe <_strtol_l.isra.0+0xaa>
   29cf0:	d102      	bne.n	29cf8 <_strtol_l.isra.0+0xa4>
   29cf2:	9904      	ldr	r1, [sp, #16]
   29cf4:	42a1      	cmp	r1, r4
   29cf6:	db02      	blt.n	29cfe <_strtol_l.isra.0+0xaa>
   29cf8:	2301      	movs	r3, #1
   29cfa:	4378      	muls	r0, r7
   29cfc:	1820      	adds	r0, r4, r0
   29cfe:	782c      	ldrb	r4, [r5, #0]
   29d00:	3501      	adds	r5, #1
   29d02:	e7e9      	b.n	29cd8 <_strtol_l.isra.0+0x84>
   29d04:	270a      	movs	r7, #10
   29d06:	e7d5      	b.n	29cb4 <_strtol_l.isra.0+0x60>
   29d08:	0021      	movs	r1, r4
   29d0a:	3941      	subs	r1, #65	; 0x41
   29d0c:	2919      	cmp	r1, #25
   29d0e:	d801      	bhi.n	29d14 <_strtol_l.isra.0+0xc0>
   29d10:	3c37      	subs	r4, #55	; 0x37
   29d12:	e7e6      	b.n	29ce2 <_strtol_l.isra.0+0x8e>
   29d14:	0021      	movs	r1, r4
   29d16:	3961      	subs	r1, #97	; 0x61
   29d18:	2919      	cmp	r1, #25
   29d1a:	d801      	bhi.n	29d20 <_strtol_l.isra.0+0xcc>
   29d1c:	3c57      	subs	r4, #87	; 0x57
   29d1e:	e7e0      	b.n	29ce2 <_strtol_l.isra.0+0x8e>
   29d20:	1c5a      	adds	r2, r3, #1
   29d22:	d108      	bne.n	29d36 <_strtol_l.isra.0+0xe2>
   29d24:	9a05      	ldr	r2, [sp, #20]
   29d26:	3323      	adds	r3, #35	; 0x23
   29d28:	6013      	str	r3, [r2, #0]
   29d2a:	9b02      	ldr	r3, [sp, #8]
   29d2c:	0030      	movs	r0, r6
   29d2e:	2b00      	cmp	r3, #0
   29d30:	d10b      	bne.n	29d4a <_strtol_l.isra.0+0xf6>
   29d32:	b007      	add	sp, #28
   29d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29d36:	9a01      	ldr	r2, [sp, #4]
   29d38:	2a00      	cmp	r2, #0
   29d3a:	d000      	beq.n	29d3e <_strtol_l.isra.0+0xea>
   29d3c:	4240      	negs	r0, r0
   29d3e:	9a02      	ldr	r2, [sp, #8]
   29d40:	2a00      	cmp	r2, #0
   29d42:	d0f6      	beq.n	29d32 <_strtol_l.isra.0+0xde>
   29d44:	9a03      	ldr	r2, [sp, #12]
   29d46:	2b00      	cmp	r3, #0
   29d48:	d000      	beq.n	29d4c <_strtol_l.isra.0+0xf8>
   29d4a:	1e6a      	subs	r2, r5, #1
   29d4c:	9b02      	ldr	r3, [sp, #8]
   29d4e:	601a      	str	r2, [r3, #0]
   29d50:	e7ef      	b.n	29d32 <_strtol_l.isra.0+0xde>
   29d52:	2430      	movs	r4, #48	; 0x30
   29d54:	2f00      	cmp	r7, #0
   29d56:	d1ad      	bne.n	29cb4 <_strtol_l.isra.0+0x60>
   29d58:	3708      	adds	r7, #8
   29d5a:	e7ab      	b.n	29cb4 <_strtol_l.isra.0+0x60>
   29d5c:	7fffffff 	.word	0x7fffffff

00029d60 <strtol>:
   29d60:	b537      	push	{r0, r1, r2, r4, r5, lr}
   29d62:	0013      	movs	r3, r2
   29d64:	4a06      	ldr	r2, [pc, #24]	; (29d80 <strtol+0x20>)
   29d66:	0005      	movs	r5, r0
   29d68:	6810      	ldr	r0, [r2, #0]
   29d6a:	6a04      	ldr	r4, [r0, #32]
   29d6c:	2c00      	cmp	r4, #0
   29d6e:	d100      	bne.n	29d72 <strtol+0x12>
   29d70:	4c04      	ldr	r4, [pc, #16]	; (29d84 <strtol+0x24>)
   29d72:	000a      	movs	r2, r1
   29d74:	9400      	str	r4, [sp, #0]
   29d76:	0029      	movs	r1, r5
   29d78:	f7ff ff6c 	bl	29c54 <_strtol_l.isra.0>
   29d7c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   29d7e:	46c0      	nop			; (mov r8, r8)
   29d80:	2000002c 	.word	0x2000002c
   29d84:	20000090 	.word	0x20000090

00029d88 <__utoa>:
   29d88:	b5f0      	push	{r4, r5, r6, r7, lr}
   29d8a:	0017      	movs	r7, r2
   29d8c:	b08f      	sub	sp, #60	; 0x3c
   29d8e:	2225      	movs	r2, #37	; 0x25
   29d90:	0006      	movs	r6, r0
   29d92:	000d      	movs	r5, r1
   29d94:	a804      	add	r0, sp, #16
   29d96:	4918      	ldr	r1, [pc, #96]	; (29df8 <__utoa+0x70>)
   29d98:	f7ff fd72 	bl	29880 <memcpy>
   29d9c:	aa04      	add	r2, sp, #16
   29d9e:	1ebb      	subs	r3, r7, #2
   29da0:	2400      	movs	r4, #0
   29da2:	9203      	str	r2, [sp, #12]
   29da4:	2b22      	cmp	r3, #34	; 0x22
   29da6:	d905      	bls.n	29db4 <__utoa+0x2c>
   29da8:	702c      	strb	r4, [r5, #0]
   29daa:	0025      	movs	r5, r4
   29dac:	0028      	movs	r0, r5
   29dae:	b00f      	add	sp, #60	; 0x3c
   29db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29db2:	9c01      	ldr	r4, [sp, #4]
   29db4:	1c63      	adds	r3, r4, #1
   29db6:	9301      	str	r3, [sp, #4]
   29db8:	18eb      	adds	r3, r5, r3
   29dba:	9300      	str	r3, [sp, #0]
   29dbc:	0030      	movs	r0, r6
   29dbe:	3b01      	subs	r3, #1
   29dc0:	0039      	movs	r1, r7
   29dc2:	9302      	str	r3, [sp, #8]
   29dc4:	f7fc ffe0 	bl	26d88 <__aeabi_uidivmod>
   29dc8:	9b03      	ldr	r3, [sp, #12]
   29dca:	9a02      	ldr	r2, [sp, #8]
   29dcc:	5c5b      	ldrb	r3, [r3, r1]
   29dce:	0030      	movs	r0, r6
   29dd0:	7013      	strb	r3, [r2, #0]
   29dd2:	0039      	movs	r1, r7
   29dd4:	f7fc ff52 	bl	26c7c <__udivsi3>
   29dd8:	1e06      	subs	r6, r0, #0
   29dda:	d1ea      	bne.n	29db2 <__utoa+0x2a>
   29ddc:	9b00      	ldr	r3, [sp, #0]
   29dde:	7018      	strb	r0, [r3, #0]
   29de0:	002b      	movs	r3, r5
   29de2:	1b5a      	subs	r2, r3, r5
   29de4:	4294      	cmp	r4, r2
   29de6:	dde1      	ble.n	29dac <__utoa+0x24>
   29de8:	781a      	ldrb	r2, [r3, #0]
   29dea:	5d29      	ldrb	r1, [r5, r4]
   29dec:	7019      	strb	r1, [r3, #0]
   29dee:	552a      	strb	r2, [r5, r4]
   29df0:	3301      	adds	r3, #1
   29df2:	3c01      	subs	r4, #1
   29df4:	e7f5      	b.n	29de2 <__utoa+0x5a>
   29df6:	46c0      	nop			; (mov r8, r8)
   29df8:	0002b99a 	.word	0x0002b99a

00029dfc <utoa>:
   29dfc:	b510      	push	{r4, lr}
   29dfe:	f7ff ffc3 	bl	29d88 <__utoa>
   29e02:	bd10      	pop	{r4, pc}

00029e04 <_vsiprintf_r>:
   29e04:	b530      	push	{r4, r5, lr}
   29e06:	b09b      	sub	sp, #108	; 0x6c
   29e08:	9100      	str	r1, [sp, #0]
   29e0a:	9104      	str	r1, [sp, #16]
   29e0c:	4908      	ldr	r1, [pc, #32]	; (29e30 <_vsiprintf_r+0x2c>)
   29e0e:	466d      	mov	r5, sp
   29e10:	9102      	str	r1, [sp, #8]
   29e12:	9105      	str	r1, [sp, #20]
   29e14:	2101      	movs	r1, #1
   29e16:	2482      	movs	r4, #130	; 0x82
   29e18:	4249      	negs	r1, r1
   29e1a:	81e9      	strh	r1, [r5, #14]
   29e1c:	00a4      	lsls	r4, r4, #2
   29e1e:	4669      	mov	r1, sp
   29e20:	81ac      	strh	r4, [r5, #12]
   29e22:	f000 f883 	bl	29f2c <_svfiprintf_r>
   29e26:	2300      	movs	r3, #0
   29e28:	9a00      	ldr	r2, [sp, #0]
   29e2a:	7013      	strb	r3, [r2, #0]
   29e2c:	b01b      	add	sp, #108	; 0x6c
   29e2e:	bd30      	pop	{r4, r5, pc}
   29e30:	7fffffff 	.word	0x7fffffff

00029e34 <vsiprintf>:
   29e34:	b510      	push	{r4, lr}
   29e36:	0013      	movs	r3, r2
   29e38:	000a      	movs	r2, r1
   29e3a:	0001      	movs	r1, r0
   29e3c:	4802      	ldr	r0, [pc, #8]	; (29e48 <vsiprintf+0x14>)
   29e3e:	6800      	ldr	r0, [r0, #0]
   29e40:	f7ff ffe0 	bl	29e04 <_vsiprintf_r>
   29e44:	bd10      	pop	{r4, pc}
   29e46:	46c0      	nop			; (mov r8, r8)
   29e48:	2000002c 	.word	0x2000002c

00029e4c <__ascii_wctomb>:
   29e4c:	1e0b      	subs	r3, r1, #0
   29e4e:	d004      	beq.n	29e5a <__ascii_wctomb+0xe>
   29e50:	2aff      	cmp	r2, #255	; 0xff
   29e52:	d904      	bls.n	29e5e <__ascii_wctomb+0x12>
   29e54:	238a      	movs	r3, #138	; 0x8a
   29e56:	6003      	str	r3, [r0, #0]
   29e58:	3b8b      	subs	r3, #139	; 0x8b
   29e5a:	0018      	movs	r0, r3
   29e5c:	4770      	bx	lr
   29e5e:	700a      	strb	r2, [r1, #0]
   29e60:	2301      	movs	r3, #1
   29e62:	e7fa      	b.n	29e5a <__ascii_wctomb+0xe>

00029e64 <__malloc_lock>:
   29e64:	4770      	bx	lr

00029e66 <__malloc_unlock>:
   29e66:	4770      	bx	lr

00029e68 <__ssputs_r>:
   29e68:	b5f0      	push	{r4, r5, r6, r7, lr}
   29e6a:	688e      	ldr	r6, [r1, #8]
   29e6c:	b085      	sub	sp, #20
   29e6e:	0007      	movs	r7, r0
   29e70:	000c      	movs	r4, r1
   29e72:	9203      	str	r2, [sp, #12]
   29e74:	9301      	str	r3, [sp, #4]
   29e76:	429e      	cmp	r6, r3
   29e78:	d839      	bhi.n	29eee <__ssputs_r+0x86>
   29e7a:	2390      	movs	r3, #144	; 0x90
   29e7c:	898a      	ldrh	r2, [r1, #12]
   29e7e:	00db      	lsls	r3, r3, #3
   29e80:	421a      	tst	r2, r3
   29e82:	d034      	beq.n	29eee <__ssputs_r+0x86>
   29e84:	2503      	movs	r5, #3
   29e86:	6909      	ldr	r1, [r1, #16]
   29e88:	6823      	ldr	r3, [r4, #0]
   29e8a:	1a5b      	subs	r3, r3, r1
   29e8c:	9302      	str	r3, [sp, #8]
   29e8e:	6963      	ldr	r3, [r4, #20]
   29e90:	9802      	ldr	r0, [sp, #8]
   29e92:	435d      	muls	r5, r3
   29e94:	0feb      	lsrs	r3, r5, #31
   29e96:	195d      	adds	r5, r3, r5
   29e98:	9b01      	ldr	r3, [sp, #4]
   29e9a:	106d      	asrs	r5, r5, #1
   29e9c:	3301      	adds	r3, #1
   29e9e:	181b      	adds	r3, r3, r0
   29ea0:	42ab      	cmp	r3, r5
   29ea2:	d900      	bls.n	29ea6 <__ssputs_r+0x3e>
   29ea4:	001d      	movs	r5, r3
   29ea6:	0553      	lsls	r3, r2, #21
   29ea8:	d532      	bpl.n	29f10 <__ssputs_r+0xa8>
   29eaa:	0029      	movs	r1, r5
   29eac:	0038      	movs	r0, r7
   29eae:	f7ff fd63 	bl	29978 <_malloc_r>
   29eb2:	1e06      	subs	r6, r0, #0
   29eb4:	d109      	bne.n	29eca <__ssputs_r+0x62>
   29eb6:	230c      	movs	r3, #12
   29eb8:	603b      	str	r3, [r7, #0]
   29eba:	2340      	movs	r3, #64	; 0x40
   29ebc:	2001      	movs	r0, #1
   29ebe:	89a2      	ldrh	r2, [r4, #12]
   29ec0:	4240      	negs	r0, r0
   29ec2:	4313      	orrs	r3, r2
   29ec4:	81a3      	strh	r3, [r4, #12]
   29ec6:	b005      	add	sp, #20
   29ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29eca:	9a02      	ldr	r2, [sp, #8]
   29ecc:	6921      	ldr	r1, [r4, #16]
   29ece:	f7ff fcd7 	bl	29880 <memcpy>
   29ed2:	89a3      	ldrh	r3, [r4, #12]
   29ed4:	4a14      	ldr	r2, [pc, #80]	; (29f28 <__ssputs_r+0xc0>)
   29ed6:	401a      	ands	r2, r3
   29ed8:	2380      	movs	r3, #128	; 0x80
   29eda:	4313      	orrs	r3, r2
   29edc:	81a3      	strh	r3, [r4, #12]
   29ede:	9b02      	ldr	r3, [sp, #8]
   29ee0:	6126      	str	r6, [r4, #16]
   29ee2:	18f6      	adds	r6, r6, r3
   29ee4:	6026      	str	r6, [r4, #0]
   29ee6:	6165      	str	r5, [r4, #20]
   29ee8:	9e01      	ldr	r6, [sp, #4]
   29eea:	1aed      	subs	r5, r5, r3
   29eec:	60a5      	str	r5, [r4, #8]
   29eee:	9b01      	ldr	r3, [sp, #4]
   29ef0:	42b3      	cmp	r3, r6
   29ef2:	d200      	bcs.n	29ef6 <__ssputs_r+0x8e>
   29ef4:	001e      	movs	r6, r3
   29ef6:	0032      	movs	r2, r6
   29ef8:	9903      	ldr	r1, [sp, #12]
   29efa:	6820      	ldr	r0, [r4, #0]
   29efc:	f7ff fcc9 	bl	29892 <memmove>
   29f00:	68a3      	ldr	r3, [r4, #8]
   29f02:	2000      	movs	r0, #0
   29f04:	1b9b      	subs	r3, r3, r6
   29f06:	60a3      	str	r3, [r4, #8]
   29f08:	6823      	ldr	r3, [r4, #0]
   29f0a:	199e      	adds	r6, r3, r6
   29f0c:	6026      	str	r6, [r4, #0]
   29f0e:	e7da      	b.n	29ec6 <__ssputs_r+0x5e>
   29f10:	002a      	movs	r2, r5
   29f12:	0038      	movs	r0, r7
   29f14:	f000 faa1 	bl	2a45a <_realloc_r>
   29f18:	1e06      	subs	r6, r0, #0
   29f1a:	d1e0      	bne.n	29ede <__ssputs_r+0x76>
   29f1c:	6921      	ldr	r1, [r4, #16]
   29f1e:	0038      	movs	r0, r7
   29f20:	f7ff fce0 	bl	298e4 <_free_r>
   29f24:	e7c7      	b.n	29eb6 <__ssputs_r+0x4e>
   29f26:	46c0      	nop			; (mov r8, r8)
   29f28:	fffffb7f 	.word	0xfffffb7f

00029f2c <_svfiprintf_r>:
   29f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   29f2e:	b09f      	sub	sp, #124	; 0x7c
   29f30:	9002      	str	r0, [sp, #8]
   29f32:	9305      	str	r3, [sp, #20]
   29f34:	898b      	ldrh	r3, [r1, #12]
   29f36:	000f      	movs	r7, r1
   29f38:	0016      	movs	r6, r2
   29f3a:	061b      	lsls	r3, r3, #24
   29f3c:	d511      	bpl.n	29f62 <_svfiprintf_r+0x36>
   29f3e:	690b      	ldr	r3, [r1, #16]
   29f40:	2b00      	cmp	r3, #0
   29f42:	d10e      	bne.n	29f62 <_svfiprintf_r+0x36>
   29f44:	2140      	movs	r1, #64	; 0x40
   29f46:	f7ff fd17 	bl	29978 <_malloc_r>
   29f4a:	6038      	str	r0, [r7, #0]
   29f4c:	6138      	str	r0, [r7, #16]
   29f4e:	2800      	cmp	r0, #0
   29f50:	d105      	bne.n	29f5e <_svfiprintf_r+0x32>
   29f52:	230c      	movs	r3, #12
   29f54:	9a02      	ldr	r2, [sp, #8]
   29f56:	3801      	subs	r0, #1
   29f58:	6013      	str	r3, [r2, #0]
   29f5a:	b01f      	add	sp, #124	; 0x7c
   29f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29f5e:	2340      	movs	r3, #64	; 0x40
   29f60:	617b      	str	r3, [r7, #20]
   29f62:	2300      	movs	r3, #0
   29f64:	ad06      	add	r5, sp, #24
   29f66:	616b      	str	r3, [r5, #20]
   29f68:	3320      	adds	r3, #32
   29f6a:	766b      	strb	r3, [r5, #25]
   29f6c:	3310      	adds	r3, #16
   29f6e:	76ab      	strb	r3, [r5, #26]
   29f70:	0034      	movs	r4, r6
   29f72:	7823      	ldrb	r3, [r4, #0]
   29f74:	2b00      	cmp	r3, #0
   29f76:	d147      	bne.n	2a008 <_svfiprintf_r+0xdc>
   29f78:	1ba3      	subs	r3, r4, r6
   29f7a:	9304      	str	r3, [sp, #16]
   29f7c:	d00d      	beq.n	29f9a <_svfiprintf_r+0x6e>
   29f7e:	1ba3      	subs	r3, r4, r6
   29f80:	0032      	movs	r2, r6
   29f82:	0039      	movs	r1, r7
   29f84:	9802      	ldr	r0, [sp, #8]
   29f86:	f7ff ff6f 	bl	29e68 <__ssputs_r>
   29f8a:	1c43      	adds	r3, r0, #1
   29f8c:	d100      	bne.n	29f90 <_svfiprintf_r+0x64>
   29f8e:	e0b5      	b.n	2a0fc <_svfiprintf_r+0x1d0>
   29f90:	696a      	ldr	r2, [r5, #20]
   29f92:	9b04      	ldr	r3, [sp, #16]
   29f94:	4694      	mov	ip, r2
   29f96:	4463      	add	r3, ip
   29f98:	616b      	str	r3, [r5, #20]
   29f9a:	7823      	ldrb	r3, [r4, #0]
   29f9c:	2b00      	cmp	r3, #0
   29f9e:	d100      	bne.n	29fa2 <_svfiprintf_r+0x76>
   29fa0:	e0ac      	b.n	2a0fc <_svfiprintf_r+0x1d0>
   29fa2:	2201      	movs	r2, #1
   29fa4:	2300      	movs	r3, #0
   29fa6:	4252      	negs	r2, r2
   29fa8:	606a      	str	r2, [r5, #4]
   29faa:	a902      	add	r1, sp, #8
   29fac:	3254      	adds	r2, #84	; 0x54
   29fae:	1852      	adds	r2, r2, r1
   29fb0:	3401      	adds	r4, #1
   29fb2:	602b      	str	r3, [r5, #0]
   29fb4:	60eb      	str	r3, [r5, #12]
   29fb6:	60ab      	str	r3, [r5, #8]
   29fb8:	7013      	strb	r3, [r2, #0]
   29fba:	65ab      	str	r3, [r5, #88]	; 0x58
   29fbc:	4e58      	ldr	r6, [pc, #352]	; (2a120 <_svfiprintf_r+0x1f4>)
   29fbe:	2205      	movs	r2, #5
   29fc0:	7821      	ldrb	r1, [r4, #0]
   29fc2:	0030      	movs	r0, r6
   29fc4:	f000 fa3e 	bl	2a444 <memchr>
   29fc8:	1c62      	adds	r2, r4, #1
   29fca:	2800      	cmp	r0, #0
   29fcc:	d120      	bne.n	2a010 <_svfiprintf_r+0xe4>
   29fce:	6829      	ldr	r1, [r5, #0]
   29fd0:	06cb      	lsls	r3, r1, #27
   29fd2:	d504      	bpl.n	29fde <_svfiprintf_r+0xb2>
   29fd4:	2353      	movs	r3, #83	; 0x53
   29fd6:	ae02      	add	r6, sp, #8
   29fd8:	3020      	adds	r0, #32
   29fda:	199b      	adds	r3, r3, r6
   29fdc:	7018      	strb	r0, [r3, #0]
   29fde:	070b      	lsls	r3, r1, #28
   29fe0:	d504      	bpl.n	29fec <_svfiprintf_r+0xc0>
   29fe2:	2353      	movs	r3, #83	; 0x53
   29fe4:	202b      	movs	r0, #43	; 0x2b
   29fe6:	ae02      	add	r6, sp, #8
   29fe8:	199b      	adds	r3, r3, r6
   29fea:	7018      	strb	r0, [r3, #0]
   29fec:	7823      	ldrb	r3, [r4, #0]
   29fee:	2b2a      	cmp	r3, #42	; 0x2a
   29ff0:	d016      	beq.n	2a020 <_svfiprintf_r+0xf4>
   29ff2:	2000      	movs	r0, #0
   29ff4:	210a      	movs	r1, #10
   29ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   29ff8:	7822      	ldrb	r2, [r4, #0]
   29ffa:	3a30      	subs	r2, #48	; 0x30
   29ffc:	2a09      	cmp	r2, #9
   29ffe:	d955      	bls.n	2a0ac <_svfiprintf_r+0x180>
   2a000:	2800      	cmp	r0, #0
   2a002:	d015      	beq.n	2a030 <_svfiprintf_r+0x104>
   2a004:	9309      	str	r3, [sp, #36]	; 0x24
   2a006:	e013      	b.n	2a030 <_svfiprintf_r+0x104>
   2a008:	2b25      	cmp	r3, #37	; 0x25
   2a00a:	d0b5      	beq.n	29f78 <_svfiprintf_r+0x4c>
   2a00c:	3401      	adds	r4, #1
   2a00e:	e7b0      	b.n	29f72 <_svfiprintf_r+0x46>
   2a010:	2301      	movs	r3, #1
   2a012:	1b80      	subs	r0, r0, r6
   2a014:	4083      	lsls	r3, r0
   2a016:	6829      	ldr	r1, [r5, #0]
   2a018:	0014      	movs	r4, r2
   2a01a:	430b      	orrs	r3, r1
   2a01c:	602b      	str	r3, [r5, #0]
   2a01e:	e7cd      	b.n	29fbc <_svfiprintf_r+0x90>
   2a020:	9b05      	ldr	r3, [sp, #20]
   2a022:	1d18      	adds	r0, r3, #4
   2a024:	681b      	ldr	r3, [r3, #0]
   2a026:	9005      	str	r0, [sp, #20]
   2a028:	2b00      	cmp	r3, #0
   2a02a:	db39      	blt.n	2a0a0 <_svfiprintf_r+0x174>
   2a02c:	9309      	str	r3, [sp, #36]	; 0x24
   2a02e:	0014      	movs	r4, r2
   2a030:	7823      	ldrb	r3, [r4, #0]
   2a032:	2b2e      	cmp	r3, #46	; 0x2e
   2a034:	d10b      	bne.n	2a04e <_svfiprintf_r+0x122>
   2a036:	7863      	ldrb	r3, [r4, #1]
   2a038:	1c62      	adds	r2, r4, #1
   2a03a:	2b2a      	cmp	r3, #42	; 0x2a
   2a03c:	d13e      	bne.n	2a0bc <_svfiprintf_r+0x190>
   2a03e:	9b05      	ldr	r3, [sp, #20]
   2a040:	3402      	adds	r4, #2
   2a042:	1d1a      	adds	r2, r3, #4
   2a044:	681b      	ldr	r3, [r3, #0]
   2a046:	9205      	str	r2, [sp, #20]
   2a048:	2b00      	cmp	r3, #0
   2a04a:	db34      	blt.n	2a0b6 <_svfiprintf_r+0x18a>
   2a04c:	9307      	str	r3, [sp, #28]
   2a04e:	4e35      	ldr	r6, [pc, #212]	; (2a124 <_svfiprintf_r+0x1f8>)
   2a050:	7821      	ldrb	r1, [r4, #0]
   2a052:	2203      	movs	r2, #3
   2a054:	0030      	movs	r0, r6
   2a056:	f000 f9f5 	bl	2a444 <memchr>
   2a05a:	2800      	cmp	r0, #0
   2a05c:	d006      	beq.n	2a06c <_svfiprintf_r+0x140>
   2a05e:	2340      	movs	r3, #64	; 0x40
   2a060:	1b80      	subs	r0, r0, r6
   2a062:	4083      	lsls	r3, r0
   2a064:	682a      	ldr	r2, [r5, #0]
   2a066:	3401      	adds	r4, #1
   2a068:	4313      	orrs	r3, r2
   2a06a:	602b      	str	r3, [r5, #0]
   2a06c:	7821      	ldrb	r1, [r4, #0]
   2a06e:	2206      	movs	r2, #6
   2a070:	482d      	ldr	r0, [pc, #180]	; (2a128 <_svfiprintf_r+0x1fc>)
   2a072:	1c66      	adds	r6, r4, #1
   2a074:	7629      	strb	r1, [r5, #24]
   2a076:	f000 f9e5 	bl	2a444 <memchr>
   2a07a:	2800      	cmp	r0, #0
   2a07c:	d046      	beq.n	2a10c <_svfiprintf_r+0x1e0>
   2a07e:	4b2b      	ldr	r3, [pc, #172]	; (2a12c <_svfiprintf_r+0x200>)
   2a080:	2b00      	cmp	r3, #0
   2a082:	d12f      	bne.n	2a0e4 <_svfiprintf_r+0x1b8>
   2a084:	6829      	ldr	r1, [r5, #0]
   2a086:	9b05      	ldr	r3, [sp, #20]
   2a088:	2207      	movs	r2, #7
   2a08a:	05c9      	lsls	r1, r1, #23
   2a08c:	d528      	bpl.n	2a0e0 <_svfiprintf_r+0x1b4>
   2a08e:	189b      	adds	r3, r3, r2
   2a090:	4393      	bics	r3, r2
   2a092:	3308      	adds	r3, #8
   2a094:	9305      	str	r3, [sp, #20]
   2a096:	696b      	ldr	r3, [r5, #20]
   2a098:	9a03      	ldr	r2, [sp, #12]
   2a09a:	189b      	adds	r3, r3, r2
   2a09c:	616b      	str	r3, [r5, #20]
   2a09e:	e767      	b.n	29f70 <_svfiprintf_r+0x44>
   2a0a0:	425b      	negs	r3, r3
   2a0a2:	60eb      	str	r3, [r5, #12]
   2a0a4:	2302      	movs	r3, #2
   2a0a6:	430b      	orrs	r3, r1
   2a0a8:	602b      	str	r3, [r5, #0]
   2a0aa:	e7c0      	b.n	2a02e <_svfiprintf_r+0x102>
   2a0ac:	434b      	muls	r3, r1
   2a0ae:	3401      	adds	r4, #1
   2a0b0:	189b      	adds	r3, r3, r2
   2a0b2:	2001      	movs	r0, #1
   2a0b4:	e7a0      	b.n	29ff8 <_svfiprintf_r+0xcc>
   2a0b6:	2301      	movs	r3, #1
   2a0b8:	425b      	negs	r3, r3
   2a0ba:	e7c7      	b.n	2a04c <_svfiprintf_r+0x120>
   2a0bc:	2300      	movs	r3, #0
   2a0be:	0014      	movs	r4, r2
   2a0c0:	200a      	movs	r0, #10
   2a0c2:	001a      	movs	r2, r3
   2a0c4:	606b      	str	r3, [r5, #4]
   2a0c6:	7821      	ldrb	r1, [r4, #0]
   2a0c8:	3930      	subs	r1, #48	; 0x30
   2a0ca:	2909      	cmp	r1, #9
   2a0cc:	d903      	bls.n	2a0d6 <_svfiprintf_r+0x1aa>
   2a0ce:	2b00      	cmp	r3, #0
   2a0d0:	d0bd      	beq.n	2a04e <_svfiprintf_r+0x122>
   2a0d2:	9207      	str	r2, [sp, #28]
   2a0d4:	e7bb      	b.n	2a04e <_svfiprintf_r+0x122>
   2a0d6:	4342      	muls	r2, r0
   2a0d8:	3401      	adds	r4, #1
   2a0da:	1852      	adds	r2, r2, r1
   2a0dc:	2301      	movs	r3, #1
   2a0de:	e7f2      	b.n	2a0c6 <_svfiprintf_r+0x19a>
   2a0e0:	3307      	adds	r3, #7
   2a0e2:	e7d5      	b.n	2a090 <_svfiprintf_r+0x164>
   2a0e4:	ab05      	add	r3, sp, #20
   2a0e6:	9300      	str	r3, [sp, #0]
   2a0e8:	003a      	movs	r2, r7
   2a0ea:	4b11      	ldr	r3, [pc, #68]	; (2a130 <_svfiprintf_r+0x204>)
   2a0ec:	0029      	movs	r1, r5
   2a0ee:	9802      	ldr	r0, [sp, #8]
   2a0f0:	e000      	b.n	2a0f4 <_svfiprintf_r+0x1c8>
   2a0f2:	bf00      	nop
   2a0f4:	9003      	str	r0, [sp, #12]
   2a0f6:	9b03      	ldr	r3, [sp, #12]
   2a0f8:	3301      	adds	r3, #1
   2a0fa:	d1cc      	bne.n	2a096 <_svfiprintf_r+0x16a>
   2a0fc:	89bb      	ldrh	r3, [r7, #12]
   2a0fe:	980b      	ldr	r0, [sp, #44]	; 0x2c
   2a100:	065b      	lsls	r3, r3, #25
   2a102:	d400      	bmi.n	2a106 <_svfiprintf_r+0x1da>
   2a104:	e729      	b.n	29f5a <_svfiprintf_r+0x2e>
   2a106:	2001      	movs	r0, #1
   2a108:	4240      	negs	r0, r0
   2a10a:	e726      	b.n	29f5a <_svfiprintf_r+0x2e>
   2a10c:	ab05      	add	r3, sp, #20
   2a10e:	9300      	str	r3, [sp, #0]
   2a110:	003a      	movs	r2, r7
   2a112:	4b07      	ldr	r3, [pc, #28]	; (2a130 <_svfiprintf_r+0x204>)
   2a114:	0029      	movs	r1, r5
   2a116:	9802      	ldr	r0, [sp, #8]
   2a118:	f000 f87a 	bl	2a210 <_printf_i>
   2a11c:	e7ea      	b.n	2a0f4 <_svfiprintf_r+0x1c8>
   2a11e:	46c0      	nop			; (mov r8, r8)
   2a120:	0002bac0 	.word	0x0002bac0
   2a124:	0002bac6 	.word	0x0002bac6
   2a128:	0002baca 	.word	0x0002baca
   2a12c:	00000000 	.word	0x00000000
   2a130:	00029e69 	.word	0x00029e69

0002a134 <_printf_common>:
   2a134:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2a136:	0015      	movs	r5, r2
   2a138:	9301      	str	r3, [sp, #4]
   2a13a:	688a      	ldr	r2, [r1, #8]
   2a13c:	690b      	ldr	r3, [r1, #16]
   2a13e:	9000      	str	r0, [sp, #0]
   2a140:	000c      	movs	r4, r1
   2a142:	4293      	cmp	r3, r2
   2a144:	da00      	bge.n	2a148 <_printf_common+0x14>
   2a146:	0013      	movs	r3, r2
   2a148:	0022      	movs	r2, r4
   2a14a:	602b      	str	r3, [r5, #0]
   2a14c:	3243      	adds	r2, #67	; 0x43
   2a14e:	7812      	ldrb	r2, [r2, #0]
   2a150:	2a00      	cmp	r2, #0
   2a152:	d001      	beq.n	2a158 <_printf_common+0x24>
   2a154:	3301      	adds	r3, #1
   2a156:	602b      	str	r3, [r5, #0]
   2a158:	6823      	ldr	r3, [r4, #0]
   2a15a:	069b      	lsls	r3, r3, #26
   2a15c:	d502      	bpl.n	2a164 <_printf_common+0x30>
   2a15e:	682b      	ldr	r3, [r5, #0]
   2a160:	3302      	adds	r3, #2
   2a162:	602b      	str	r3, [r5, #0]
   2a164:	2706      	movs	r7, #6
   2a166:	6823      	ldr	r3, [r4, #0]
   2a168:	401f      	ands	r7, r3
   2a16a:	d027      	beq.n	2a1bc <_printf_common+0x88>
   2a16c:	0023      	movs	r3, r4
   2a16e:	3343      	adds	r3, #67	; 0x43
   2a170:	781b      	ldrb	r3, [r3, #0]
   2a172:	1e5a      	subs	r2, r3, #1
   2a174:	4193      	sbcs	r3, r2
   2a176:	6822      	ldr	r2, [r4, #0]
   2a178:	0692      	lsls	r2, r2, #26
   2a17a:	d430      	bmi.n	2a1de <_printf_common+0xaa>
   2a17c:	0022      	movs	r2, r4
   2a17e:	9901      	ldr	r1, [sp, #4]
   2a180:	3243      	adds	r2, #67	; 0x43
   2a182:	9800      	ldr	r0, [sp, #0]
   2a184:	9e08      	ldr	r6, [sp, #32]
   2a186:	47b0      	blx	r6
   2a188:	1c43      	adds	r3, r0, #1
   2a18a:	d025      	beq.n	2a1d8 <_printf_common+0xa4>
   2a18c:	2306      	movs	r3, #6
   2a18e:	6820      	ldr	r0, [r4, #0]
   2a190:	682a      	ldr	r2, [r5, #0]
   2a192:	68e1      	ldr	r1, [r4, #12]
   2a194:	4003      	ands	r3, r0
   2a196:	2500      	movs	r5, #0
   2a198:	2b04      	cmp	r3, #4
   2a19a:	d103      	bne.n	2a1a4 <_printf_common+0x70>
   2a19c:	1a8d      	subs	r5, r1, r2
   2a19e:	43eb      	mvns	r3, r5
   2a1a0:	17db      	asrs	r3, r3, #31
   2a1a2:	401d      	ands	r5, r3
   2a1a4:	68a3      	ldr	r3, [r4, #8]
   2a1a6:	6922      	ldr	r2, [r4, #16]
   2a1a8:	4293      	cmp	r3, r2
   2a1aa:	dd01      	ble.n	2a1b0 <_printf_common+0x7c>
   2a1ac:	1a9b      	subs	r3, r3, r2
   2a1ae:	18ed      	adds	r5, r5, r3
   2a1b0:	2700      	movs	r7, #0
   2a1b2:	42bd      	cmp	r5, r7
   2a1b4:	d120      	bne.n	2a1f8 <_printf_common+0xc4>
   2a1b6:	2000      	movs	r0, #0
   2a1b8:	e010      	b.n	2a1dc <_printf_common+0xa8>
   2a1ba:	3701      	adds	r7, #1
   2a1bc:	68e3      	ldr	r3, [r4, #12]
   2a1be:	682a      	ldr	r2, [r5, #0]
   2a1c0:	1a9b      	subs	r3, r3, r2
   2a1c2:	429f      	cmp	r7, r3
   2a1c4:	dad2      	bge.n	2a16c <_printf_common+0x38>
   2a1c6:	0022      	movs	r2, r4
   2a1c8:	2301      	movs	r3, #1
   2a1ca:	3219      	adds	r2, #25
   2a1cc:	9901      	ldr	r1, [sp, #4]
   2a1ce:	9800      	ldr	r0, [sp, #0]
   2a1d0:	9e08      	ldr	r6, [sp, #32]
   2a1d2:	47b0      	blx	r6
   2a1d4:	1c43      	adds	r3, r0, #1
   2a1d6:	d1f0      	bne.n	2a1ba <_printf_common+0x86>
   2a1d8:	2001      	movs	r0, #1
   2a1da:	4240      	negs	r0, r0
   2a1dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   2a1de:	2030      	movs	r0, #48	; 0x30
   2a1e0:	18e1      	adds	r1, r4, r3
   2a1e2:	3143      	adds	r1, #67	; 0x43
   2a1e4:	7008      	strb	r0, [r1, #0]
   2a1e6:	0021      	movs	r1, r4
   2a1e8:	1c5a      	adds	r2, r3, #1
   2a1ea:	3145      	adds	r1, #69	; 0x45
   2a1ec:	7809      	ldrb	r1, [r1, #0]
   2a1ee:	18a2      	adds	r2, r4, r2
   2a1f0:	3243      	adds	r2, #67	; 0x43
   2a1f2:	3302      	adds	r3, #2
   2a1f4:	7011      	strb	r1, [r2, #0]
   2a1f6:	e7c1      	b.n	2a17c <_printf_common+0x48>
   2a1f8:	0022      	movs	r2, r4
   2a1fa:	2301      	movs	r3, #1
   2a1fc:	321a      	adds	r2, #26
   2a1fe:	9901      	ldr	r1, [sp, #4]
   2a200:	9800      	ldr	r0, [sp, #0]
   2a202:	9e08      	ldr	r6, [sp, #32]
   2a204:	47b0      	blx	r6
   2a206:	1c43      	adds	r3, r0, #1
   2a208:	d0e6      	beq.n	2a1d8 <_printf_common+0xa4>
   2a20a:	3701      	adds	r7, #1
   2a20c:	e7d1      	b.n	2a1b2 <_printf_common+0x7e>
	...

0002a210 <_printf_i>:
   2a210:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a212:	b08b      	sub	sp, #44	; 0x2c
   2a214:	9206      	str	r2, [sp, #24]
   2a216:	000a      	movs	r2, r1
   2a218:	3243      	adds	r2, #67	; 0x43
   2a21a:	9307      	str	r3, [sp, #28]
   2a21c:	9005      	str	r0, [sp, #20]
   2a21e:	9204      	str	r2, [sp, #16]
   2a220:	7e0a      	ldrb	r2, [r1, #24]
   2a222:	000c      	movs	r4, r1
   2a224:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2a226:	2a6e      	cmp	r2, #110	; 0x6e
   2a228:	d100      	bne.n	2a22c <_printf_i+0x1c>
   2a22a:	e08f      	b.n	2a34c <_printf_i+0x13c>
   2a22c:	d817      	bhi.n	2a25e <_printf_i+0x4e>
   2a22e:	2a63      	cmp	r2, #99	; 0x63
   2a230:	d02c      	beq.n	2a28c <_printf_i+0x7c>
   2a232:	d808      	bhi.n	2a246 <_printf_i+0x36>
   2a234:	2a00      	cmp	r2, #0
   2a236:	d100      	bne.n	2a23a <_printf_i+0x2a>
   2a238:	e099      	b.n	2a36e <_printf_i+0x15e>
   2a23a:	2a58      	cmp	r2, #88	; 0x58
   2a23c:	d054      	beq.n	2a2e8 <_printf_i+0xd8>
   2a23e:	0026      	movs	r6, r4
   2a240:	3642      	adds	r6, #66	; 0x42
   2a242:	7032      	strb	r2, [r6, #0]
   2a244:	e029      	b.n	2a29a <_printf_i+0x8a>
   2a246:	2a64      	cmp	r2, #100	; 0x64
   2a248:	d001      	beq.n	2a24e <_printf_i+0x3e>
   2a24a:	2a69      	cmp	r2, #105	; 0x69
   2a24c:	d1f7      	bne.n	2a23e <_printf_i+0x2e>
   2a24e:	6821      	ldr	r1, [r4, #0]
   2a250:	681a      	ldr	r2, [r3, #0]
   2a252:	0608      	lsls	r0, r1, #24
   2a254:	d523      	bpl.n	2a29e <_printf_i+0x8e>
   2a256:	1d11      	adds	r1, r2, #4
   2a258:	6019      	str	r1, [r3, #0]
   2a25a:	6815      	ldr	r5, [r2, #0]
   2a25c:	e025      	b.n	2a2aa <_printf_i+0x9a>
   2a25e:	2a73      	cmp	r2, #115	; 0x73
   2a260:	d100      	bne.n	2a264 <_printf_i+0x54>
   2a262:	e088      	b.n	2a376 <_printf_i+0x166>
   2a264:	d808      	bhi.n	2a278 <_printf_i+0x68>
   2a266:	2a6f      	cmp	r2, #111	; 0x6f
   2a268:	d029      	beq.n	2a2be <_printf_i+0xae>
   2a26a:	2a70      	cmp	r2, #112	; 0x70
   2a26c:	d1e7      	bne.n	2a23e <_printf_i+0x2e>
   2a26e:	2220      	movs	r2, #32
   2a270:	6809      	ldr	r1, [r1, #0]
   2a272:	430a      	orrs	r2, r1
   2a274:	6022      	str	r2, [r4, #0]
   2a276:	e003      	b.n	2a280 <_printf_i+0x70>
   2a278:	2a75      	cmp	r2, #117	; 0x75
   2a27a:	d020      	beq.n	2a2be <_printf_i+0xae>
   2a27c:	2a78      	cmp	r2, #120	; 0x78
   2a27e:	d1de      	bne.n	2a23e <_printf_i+0x2e>
   2a280:	0022      	movs	r2, r4
   2a282:	2178      	movs	r1, #120	; 0x78
   2a284:	3245      	adds	r2, #69	; 0x45
   2a286:	7011      	strb	r1, [r2, #0]
   2a288:	4a6c      	ldr	r2, [pc, #432]	; (2a43c <_printf_i+0x22c>)
   2a28a:	e030      	b.n	2a2ee <_printf_i+0xde>
   2a28c:	000e      	movs	r6, r1
   2a28e:	681a      	ldr	r2, [r3, #0]
   2a290:	3642      	adds	r6, #66	; 0x42
   2a292:	1d11      	adds	r1, r2, #4
   2a294:	6019      	str	r1, [r3, #0]
   2a296:	6813      	ldr	r3, [r2, #0]
   2a298:	7033      	strb	r3, [r6, #0]
   2a29a:	2301      	movs	r3, #1
   2a29c:	e079      	b.n	2a392 <_printf_i+0x182>
   2a29e:	0649      	lsls	r1, r1, #25
   2a2a0:	d5d9      	bpl.n	2a256 <_printf_i+0x46>
   2a2a2:	1d11      	adds	r1, r2, #4
   2a2a4:	6019      	str	r1, [r3, #0]
   2a2a6:	2300      	movs	r3, #0
   2a2a8:	5ed5      	ldrsh	r5, [r2, r3]
   2a2aa:	2d00      	cmp	r5, #0
   2a2ac:	da03      	bge.n	2a2b6 <_printf_i+0xa6>
   2a2ae:	232d      	movs	r3, #45	; 0x2d
   2a2b0:	9a04      	ldr	r2, [sp, #16]
   2a2b2:	426d      	negs	r5, r5
   2a2b4:	7013      	strb	r3, [r2, #0]
   2a2b6:	4b62      	ldr	r3, [pc, #392]	; (2a440 <_printf_i+0x230>)
   2a2b8:	270a      	movs	r7, #10
   2a2ba:	9303      	str	r3, [sp, #12]
   2a2bc:	e02f      	b.n	2a31e <_printf_i+0x10e>
   2a2be:	6820      	ldr	r0, [r4, #0]
   2a2c0:	6819      	ldr	r1, [r3, #0]
   2a2c2:	0605      	lsls	r5, r0, #24
   2a2c4:	d503      	bpl.n	2a2ce <_printf_i+0xbe>
   2a2c6:	1d08      	adds	r0, r1, #4
   2a2c8:	6018      	str	r0, [r3, #0]
   2a2ca:	680d      	ldr	r5, [r1, #0]
   2a2cc:	e005      	b.n	2a2da <_printf_i+0xca>
   2a2ce:	0640      	lsls	r0, r0, #25
   2a2d0:	d5f9      	bpl.n	2a2c6 <_printf_i+0xb6>
   2a2d2:	680d      	ldr	r5, [r1, #0]
   2a2d4:	1d08      	adds	r0, r1, #4
   2a2d6:	6018      	str	r0, [r3, #0]
   2a2d8:	b2ad      	uxth	r5, r5
   2a2da:	4b59      	ldr	r3, [pc, #356]	; (2a440 <_printf_i+0x230>)
   2a2dc:	2708      	movs	r7, #8
   2a2de:	9303      	str	r3, [sp, #12]
   2a2e0:	2a6f      	cmp	r2, #111	; 0x6f
   2a2e2:	d018      	beq.n	2a316 <_printf_i+0x106>
   2a2e4:	270a      	movs	r7, #10
   2a2e6:	e016      	b.n	2a316 <_printf_i+0x106>
   2a2e8:	3145      	adds	r1, #69	; 0x45
   2a2ea:	700a      	strb	r2, [r1, #0]
   2a2ec:	4a54      	ldr	r2, [pc, #336]	; (2a440 <_printf_i+0x230>)
   2a2ee:	9203      	str	r2, [sp, #12]
   2a2f0:	681a      	ldr	r2, [r3, #0]
   2a2f2:	6821      	ldr	r1, [r4, #0]
   2a2f4:	1d10      	adds	r0, r2, #4
   2a2f6:	6018      	str	r0, [r3, #0]
   2a2f8:	6815      	ldr	r5, [r2, #0]
   2a2fa:	0608      	lsls	r0, r1, #24
   2a2fc:	d522      	bpl.n	2a344 <_printf_i+0x134>
   2a2fe:	07cb      	lsls	r3, r1, #31
   2a300:	d502      	bpl.n	2a308 <_printf_i+0xf8>
   2a302:	2320      	movs	r3, #32
   2a304:	4319      	orrs	r1, r3
   2a306:	6021      	str	r1, [r4, #0]
   2a308:	2710      	movs	r7, #16
   2a30a:	2d00      	cmp	r5, #0
   2a30c:	d103      	bne.n	2a316 <_printf_i+0x106>
   2a30e:	2320      	movs	r3, #32
   2a310:	6822      	ldr	r2, [r4, #0]
   2a312:	439a      	bics	r2, r3
   2a314:	6022      	str	r2, [r4, #0]
   2a316:	0023      	movs	r3, r4
   2a318:	2200      	movs	r2, #0
   2a31a:	3343      	adds	r3, #67	; 0x43
   2a31c:	701a      	strb	r2, [r3, #0]
   2a31e:	6863      	ldr	r3, [r4, #4]
   2a320:	60a3      	str	r3, [r4, #8]
   2a322:	2b00      	cmp	r3, #0
   2a324:	db5c      	blt.n	2a3e0 <_printf_i+0x1d0>
   2a326:	2204      	movs	r2, #4
   2a328:	6821      	ldr	r1, [r4, #0]
   2a32a:	4391      	bics	r1, r2
   2a32c:	6021      	str	r1, [r4, #0]
   2a32e:	2d00      	cmp	r5, #0
   2a330:	d158      	bne.n	2a3e4 <_printf_i+0x1d4>
   2a332:	9e04      	ldr	r6, [sp, #16]
   2a334:	2b00      	cmp	r3, #0
   2a336:	d064      	beq.n	2a402 <_printf_i+0x1f2>
   2a338:	0026      	movs	r6, r4
   2a33a:	9b03      	ldr	r3, [sp, #12]
   2a33c:	3642      	adds	r6, #66	; 0x42
   2a33e:	781b      	ldrb	r3, [r3, #0]
   2a340:	7033      	strb	r3, [r6, #0]
   2a342:	e05e      	b.n	2a402 <_printf_i+0x1f2>
   2a344:	0648      	lsls	r0, r1, #25
   2a346:	d5da      	bpl.n	2a2fe <_printf_i+0xee>
   2a348:	b2ad      	uxth	r5, r5
   2a34a:	e7d8      	b.n	2a2fe <_printf_i+0xee>
   2a34c:	6809      	ldr	r1, [r1, #0]
   2a34e:	681a      	ldr	r2, [r3, #0]
   2a350:	0608      	lsls	r0, r1, #24
   2a352:	d505      	bpl.n	2a360 <_printf_i+0x150>
   2a354:	1d11      	adds	r1, r2, #4
   2a356:	6019      	str	r1, [r3, #0]
   2a358:	6813      	ldr	r3, [r2, #0]
   2a35a:	6962      	ldr	r2, [r4, #20]
   2a35c:	601a      	str	r2, [r3, #0]
   2a35e:	e006      	b.n	2a36e <_printf_i+0x15e>
   2a360:	0649      	lsls	r1, r1, #25
   2a362:	d5f7      	bpl.n	2a354 <_printf_i+0x144>
   2a364:	1d11      	adds	r1, r2, #4
   2a366:	6019      	str	r1, [r3, #0]
   2a368:	6813      	ldr	r3, [r2, #0]
   2a36a:	8aa2      	ldrh	r2, [r4, #20]
   2a36c:	801a      	strh	r2, [r3, #0]
   2a36e:	2300      	movs	r3, #0
   2a370:	9e04      	ldr	r6, [sp, #16]
   2a372:	6123      	str	r3, [r4, #16]
   2a374:	e054      	b.n	2a420 <_printf_i+0x210>
   2a376:	681a      	ldr	r2, [r3, #0]
   2a378:	1d11      	adds	r1, r2, #4
   2a37a:	6019      	str	r1, [r3, #0]
   2a37c:	6816      	ldr	r6, [r2, #0]
   2a37e:	2100      	movs	r1, #0
   2a380:	6862      	ldr	r2, [r4, #4]
   2a382:	0030      	movs	r0, r6
   2a384:	f000 f85e 	bl	2a444 <memchr>
   2a388:	2800      	cmp	r0, #0
   2a38a:	d001      	beq.n	2a390 <_printf_i+0x180>
   2a38c:	1b80      	subs	r0, r0, r6
   2a38e:	6060      	str	r0, [r4, #4]
   2a390:	6863      	ldr	r3, [r4, #4]
   2a392:	6123      	str	r3, [r4, #16]
   2a394:	2300      	movs	r3, #0
   2a396:	9a04      	ldr	r2, [sp, #16]
   2a398:	7013      	strb	r3, [r2, #0]
   2a39a:	e041      	b.n	2a420 <_printf_i+0x210>
   2a39c:	6923      	ldr	r3, [r4, #16]
   2a39e:	0032      	movs	r2, r6
   2a3a0:	9906      	ldr	r1, [sp, #24]
   2a3a2:	9805      	ldr	r0, [sp, #20]
   2a3a4:	9d07      	ldr	r5, [sp, #28]
   2a3a6:	47a8      	blx	r5
   2a3a8:	1c43      	adds	r3, r0, #1
   2a3aa:	d043      	beq.n	2a434 <_printf_i+0x224>
   2a3ac:	6823      	ldr	r3, [r4, #0]
   2a3ae:	2500      	movs	r5, #0
   2a3b0:	079b      	lsls	r3, r3, #30
   2a3b2:	d40f      	bmi.n	2a3d4 <_printf_i+0x1c4>
   2a3b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2a3b6:	68e0      	ldr	r0, [r4, #12]
   2a3b8:	4298      	cmp	r0, r3
   2a3ba:	da3d      	bge.n	2a438 <_printf_i+0x228>
   2a3bc:	0018      	movs	r0, r3
   2a3be:	e03b      	b.n	2a438 <_printf_i+0x228>
   2a3c0:	0022      	movs	r2, r4
   2a3c2:	2301      	movs	r3, #1
   2a3c4:	3219      	adds	r2, #25
   2a3c6:	9906      	ldr	r1, [sp, #24]
   2a3c8:	9805      	ldr	r0, [sp, #20]
   2a3ca:	9e07      	ldr	r6, [sp, #28]
   2a3cc:	47b0      	blx	r6
   2a3ce:	1c43      	adds	r3, r0, #1
   2a3d0:	d030      	beq.n	2a434 <_printf_i+0x224>
   2a3d2:	3501      	adds	r5, #1
   2a3d4:	68e3      	ldr	r3, [r4, #12]
   2a3d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2a3d8:	1a9b      	subs	r3, r3, r2
   2a3da:	429d      	cmp	r5, r3
   2a3dc:	dbf0      	blt.n	2a3c0 <_printf_i+0x1b0>
   2a3de:	e7e9      	b.n	2a3b4 <_printf_i+0x1a4>
   2a3e0:	2d00      	cmp	r5, #0
   2a3e2:	d0a9      	beq.n	2a338 <_printf_i+0x128>
   2a3e4:	9e04      	ldr	r6, [sp, #16]
   2a3e6:	0028      	movs	r0, r5
   2a3e8:	0039      	movs	r1, r7
   2a3ea:	f7fc fccd 	bl	26d88 <__aeabi_uidivmod>
   2a3ee:	9b03      	ldr	r3, [sp, #12]
   2a3f0:	3e01      	subs	r6, #1
   2a3f2:	5c5b      	ldrb	r3, [r3, r1]
   2a3f4:	0028      	movs	r0, r5
   2a3f6:	7033      	strb	r3, [r6, #0]
   2a3f8:	0039      	movs	r1, r7
   2a3fa:	f7fc fc3f 	bl	26c7c <__udivsi3>
   2a3fe:	1e05      	subs	r5, r0, #0
   2a400:	d1f1      	bne.n	2a3e6 <_printf_i+0x1d6>
   2a402:	2f08      	cmp	r7, #8
   2a404:	d109      	bne.n	2a41a <_printf_i+0x20a>
   2a406:	6823      	ldr	r3, [r4, #0]
   2a408:	07db      	lsls	r3, r3, #31
   2a40a:	d506      	bpl.n	2a41a <_printf_i+0x20a>
   2a40c:	6863      	ldr	r3, [r4, #4]
   2a40e:	6922      	ldr	r2, [r4, #16]
   2a410:	4293      	cmp	r3, r2
   2a412:	dc02      	bgt.n	2a41a <_printf_i+0x20a>
   2a414:	2330      	movs	r3, #48	; 0x30
   2a416:	3e01      	subs	r6, #1
   2a418:	7033      	strb	r3, [r6, #0]
   2a41a:	9b04      	ldr	r3, [sp, #16]
   2a41c:	1b9b      	subs	r3, r3, r6
   2a41e:	6123      	str	r3, [r4, #16]
   2a420:	9b07      	ldr	r3, [sp, #28]
   2a422:	aa09      	add	r2, sp, #36	; 0x24
   2a424:	9300      	str	r3, [sp, #0]
   2a426:	0021      	movs	r1, r4
   2a428:	9b06      	ldr	r3, [sp, #24]
   2a42a:	9805      	ldr	r0, [sp, #20]
   2a42c:	f7ff fe82 	bl	2a134 <_printf_common>
   2a430:	1c43      	adds	r3, r0, #1
   2a432:	d1b3      	bne.n	2a39c <_printf_i+0x18c>
   2a434:	2001      	movs	r0, #1
   2a436:	4240      	negs	r0, r0
   2a438:	b00b      	add	sp, #44	; 0x2c
   2a43a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a43c:	0002bae2 	.word	0x0002bae2
   2a440:	0002bad1 	.word	0x0002bad1

0002a444 <memchr>:
   2a444:	b2c9      	uxtb	r1, r1
   2a446:	1882      	adds	r2, r0, r2
   2a448:	4290      	cmp	r0, r2
   2a44a:	d101      	bne.n	2a450 <memchr+0xc>
   2a44c:	2000      	movs	r0, #0
   2a44e:	4770      	bx	lr
   2a450:	7803      	ldrb	r3, [r0, #0]
   2a452:	428b      	cmp	r3, r1
   2a454:	d0fb      	beq.n	2a44e <memchr+0xa>
   2a456:	3001      	adds	r0, #1
   2a458:	e7f6      	b.n	2a448 <memchr+0x4>

0002a45a <_realloc_r>:
   2a45a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a45c:	0007      	movs	r7, r0
   2a45e:	000d      	movs	r5, r1
   2a460:	0016      	movs	r6, r2
   2a462:	2900      	cmp	r1, #0
   2a464:	d105      	bne.n	2a472 <_realloc_r+0x18>
   2a466:	0011      	movs	r1, r2
   2a468:	f7ff fa86 	bl	29978 <_malloc_r>
   2a46c:	0004      	movs	r4, r0
   2a46e:	0020      	movs	r0, r4
   2a470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a472:	2a00      	cmp	r2, #0
   2a474:	d103      	bne.n	2a47e <_realloc_r+0x24>
   2a476:	f7ff fa35 	bl	298e4 <_free_r>
   2a47a:	0034      	movs	r4, r6
   2a47c:	e7f7      	b.n	2a46e <_realloc_r+0x14>
   2a47e:	f000 f812 	bl	2a4a6 <_malloc_usable_size_r>
   2a482:	002c      	movs	r4, r5
   2a484:	4286      	cmp	r6, r0
   2a486:	d9f2      	bls.n	2a46e <_realloc_r+0x14>
   2a488:	0031      	movs	r1, r6
   2a48a:	0038      	movs	r0, r7
   2a48c:	f7ff fa74 	bl	29978 <_malloc_r>
   2a490:	1e04      	subs	r4, r0, #0
   2a492:	d0ec      	beq.n	2a46e <_realloc_r+0x14>
   2a494:	0029      	movs	r1, r5
   2a496:	0032      	movs	r2, r6
   2a498:	f7ff f9f2 	bl	29880 <memcpy>
   2a49c:	0029      	movs	r1, r5
   2a49e:	0038      	movs	r0, r7
   2a4a0:	f7ff fa20 	bl	298e4 <_free_r>
   2a4a4:	e7e3      	b.n	2a46e <_realloc_r+0x14>

0002a4a6 <_malloc_usable_size_r>:
   2a4a6:	1f0b      	subs	r3, r1, #4
   2a4a8:	681b      	ldr	r3, [r3, #0]
   2a4aa:	1f18      	subs	r0, r3, #4
   2a4ac:	2b00      	cmp	r3, #0
   2a4ae:	da01      	bge.n	2a4b4 <_malloc_usable_size_r+0xe>
   2a4b0:	580b      	ldr	r3, [r1, r0]
   2a4b2:	18c0      	adds	r0, r0, r3
   2a4b4:	4770      	bx	lr
   2a4b6:	0000      	movs	r0, r0
   2a4b8:	30303030 	.word	0x30303030
   2a4bc:	30303030 	.word	0x30303030
   2a4c0:	00003030 	.word	0x00003030
   2a4c4:	2e707466 	.word	0x2e707466
   2a4c8:	76697264 	.word	0x76697264
   2a4cc:	2e716865 	.word	0x2e716865
   2a4d0:	006d6f63 	.word	0x006d6f63
   2a4d4:	7269662f 	.word	0x7269662f
   2a4d8:	7261776d 	.word	0x7261776d
   2a4dc:	00002f65 	.word	0x00002f65
   2a4e0:	75686172 	.word	0x75686172
   2a4e4:	61726e6c 	.word	0x61726e6c
   2a4e8:	646f6874 	.word	0x646f6874
   2a4ec:	006c636b 	.word	0x006c636b
   2a4f0:	34333231 	.word	0x34333231
   2a4f4:	38373635 	.word	0x38373635
   2a4f8:	00000039 	.word	0x00000039
   2a4fc:	6d726966 	.word	0x6d726966
   2a500:	65726177 	.word	0x65726177
   2a504:	6e69622e 	.word	0x6e69622e
   2a508:	00000000 	.word	0x00000000
   2a50c:	31343037 	.word	0x31343037
   2a510:	39363931 	.word	0x39363931
   2a514:	00003935 	.word	0x00003935
   2a518:	38393637 	.word	0x38393637
   2a51c:	32393334 	.word	0x32393334
   2a520:	00003130 	.word	0x00003130
   2a524:	33383337 	.word	0x33383337
   2a528:	32343136 	.word	0x32343136
   2a52c:	00003431 	.word	0x00003431
   2a530:	33383337 	.word	0x33383337
   2a534:	36323236 	.word	0x36323236
   2a538:	00003837 	.word	0x00003837
   2a53c:	36383539 	.word	0x36383539
   2a540:	39353331 	.word	0x39353331
   2a544:	00003837 	.word	0x00003837
   2a548:	00003a50 	.word	0x00003a50
   2a54c:	00003a53 	.word	0x00003a53
   2a550:	0000000a 	.word	0x0000000a
   2a554:	00006425 	.word	0x00006425
   2a558:	204d5347 	.word	0x204d5347
   2a55c:	656d6954 	.word	0x656d6954
   2a560:	0074756f 	.word	0x0074756f
   2a564:	4f525245 	.word	0x4f525245
   2a568:	00000052 	.word	0x00000052
   2a56c:	00004b4f 	.word	0x00004b4f
   2a570:	000d5441 	.word	0x000d5441
   2a574:	492b5441 	.word	0x492b5441
   2a578:	303d4346 	.word	0x303d4346
   2a57c:	000d302c 	.word	0x000d302c
   2a580:	4552432b 	.word	0x4552432b
   2a584:	30203a47 	.word	0x30203a47
   2a588:	0000312c 	.word	0x0000312c
   2a58c:	432b5441 	.word	0x432b5441
   2a590:	3f474552 	.word	0x3f474552
   2a594:	0000000d 	.word	0x0000000d
   2a598:	4552432b 	.word	0x4552432b
   2a59c:	30203a47 	.word	0x30203a47
   2a5a0:	0000352c 	.word	0x0000352c
   2a5a4:	492b5441 	.word	0x492b5441
   2a5a8:	253d5250 	.word	0x253d5250
   2a5ac:	00000d64 	.word	0x00000d64
   2a5b0:	492b5441 	.word	0x492b5441
   2a5b4:	303d5250 	.word	0x303d5250
   2a5b8:	0000000d 	.word	0x0000000d
   2a5bc:	432b5441 	.word	0x432b5441
   2a5c0:	3d474552 	.word	0x3d474552
   2a5c4:	00000d31 	.word	0x00000d31
   2a5c8:	432b5441 	.word	0x432b5441
   2a5cc:	3d4e5546 	.word	0x3d4e5546
   2a5d0:	00000d31 	.word	0x00000d31
   2a5d4:	5546432b 	.word	0x5546432b
   2a5d8:	31203a4e 	.word	0x31203a4e
   2a5dc:	00000000 	.word	0x00000000
   2a5e0:	432b5441 	.word	0x432b5441
   2a5e4:	3f4e5546 	.word	0x3f4e5546
   2a5e8:	0000000d 	.word	0x0000000d
   2a5ec:	432b5441 	.word	0x432b5441
   2a5f0:	3d4e5546 	.word	0x3d4e5546
   2a5f4:	00000d30 	.word	0x00000d30
   2a5f8:	5546432b 	.word	0x5546432b
   2a5fc:	30203a4e 	.word	0x30203a4e
   2a600:	00000000 	.word	0x00000000
   2a604:	432b5441 	.word	0x432b5441
   2a608:	3d4e5546 	.word	0x3d4e5546
   2a60c:	0d312c31 	.word	0x0d312c31
   2a610:	00000000 	.word	0x00000000
   2a614:	4950432b 	.word	0x4950432b
   2a618:	52203a4e 	.word	0x52203a4e
   2a61c:	59444145 	.word	0x59444145
   2a620:	00000000 	.word	0x00000000
   2a624:	432b5441 	.word	0x432b5441
   2a628:	3f4e4950 	.word	0x3f4e4950
   2a62c:	0000000d 	.word	0x0000000d
   2a630:	432b5441 	.word	0x432b5441
   2a634:	4144474d 	.word	0x4144474d
   2a638:	4544223d 	.word	0x4544223d
   2a63c:	4c41204c 	.word	0x4c41204c
   2a640:	000d224c 	.word	0x000d224c
   2a644:	57265441 	.word	0x57265441
   2a648:	0000000d 	.word	0x0000000d
   2a64c:	432b5441 	.word	0x432b5441
   2a650:	3d50494c 	.word	0x3d50494c
   2a654:	00000d31 	.word	0x00000d31
   2a658:	432b5441 	.word	0x432b5441
   2a65c:	3d504c4f 	.word	0x3d504c4f
   2a660:	00000d31 	.word	0x00000d31
   2a664:	432b5441 	.word	0x432b5441
   2a668:	4b4c4353 	.word	0x4b4c4353
   2a66c:	000d313d 	.word	0x000d313d
   2a670:	432b5441 	.word	0x432b5441
   2a674:	3f504c4f 	.word	0x3f504c4f
   2a678:	0000000d 	.word	0x0000000d
   2a67c:	4c4f432b 	.word	0x4c4f432b
   2a680:	00000050 	.word	0x00000050
   2a684:	0000003a 	.word	0x0000003a
   2a688:	0000002c 	.word	0x0000002c
   2a68c:	432b5441 	.word	0x432b5441
   2a690:	3d43434c 	.word	0x3d43434c
   2a694:	00000d31 	.word	0x00000d31
   2a698:	46265441 	.word	0x46265441
   2a69c:	0000000d 	.word	0x0000000d
   2a6a0:	30455441 	.word	0x30455441
   2a6a4:	0000000d 	.word	0x0000000d
   2a6a8:	432b5441 	.word	0x432b5441
   2a6ac:	3d46474d 	.word	0x3d46474d
   2a6b0:	00000d31 	.word	0x00000d31
   2a6b4:	432b5441 	.word	0x432b5441
   2a6b8:	3d504d53 	.word	0x3d504d53
   2a6bc:	312c3731 	.word	0x312c3731
   2a6c0:	302c3736 	.word	0x302c3736
   2a6c4:	000d302c 	.word	0x000d302c
   2a6c8:	432b5441 	.word	0x432b5441
   2a6cc:	3d534153 	.word	0x3d534153
   2a6d0:	00000d30 	.word	0x00000d30
   2a6d4:	432b5441 	.word	0x432b5441
   2a6d8:	3d534153 	.word	0x3d534153
   2a6dc:	00000d31 	.word	0x00000d31
   2a6e0:	432b5441 	.word	0x432b5441
   2a6e4:	000d5153 	.word	0x000d5153
   2a6e8:	00003939 	.word	0x00003939
   2a6ec:	432b5441 	.word	0x432b5441
   2a6f0:	3d494d4e 	.word	0x3d494d4e
   2a6f4:	2c312c32 	.word	0x2c312c32
   2a6f8:	2c302c30 	.word	0x2c302c30
   2a6fc:	00000d30 	.word	0x00000d30
   2a700:	432b5441 	.word	0x432b5441
   2a704:	3d494d4e 	.word	0x3d494d4e
   2a708:	2c302c31 	.word	0x2c302c31
   2a70c:	2c302c30 	.word	0x2c302c30
   2a710:	00000d30 	.word	0x00000d30
   2a714:	452b5441 	.word	0x452b5441
   2a718:	534e5558 	.word	0x534e5558
   2a71c:	223d4c4f 	.word	0x223d4c4f
   2a720:	2c225153 	.word	0x2c225153
   2a724:	00000d31 	.word	0x00000d31
   2a728:	452b5441 	.word	0x452b5441
   2a72c:	534e5558 	.word	0x534e5558
   2a730:	223d4c4f 	.word	0x223d4c4f
   2a734:	2c225153 	.word	0x2c225153
   2a738:	00000d30 	.word	0x00000d30
   2a73c:	432b5441 	.word	0x432b5441
   2a740:	3d53474d 	.word	0x3d53474d
   2a744:	22732522 	.word	0x22732522
   2a748:	0000000d 	.word	0x0000000d
   2a74c:	0000003e 	.word	0x0000003e
   2a750:	0d1a7325 	.word	0x0d1a7325
   2a754:	00000000 	.word	0x00000000
   2a758:	432b5441 	.word	0x432b5441
   2a75c:	3d4c474d 	.word	0x3d4c474d
   2a760:	43455222 	.word	0x43455222
   2a764:	524e5520 	.word	0x524e5520
   2a768:	22444145 	.word	0x22444145
   2a76c:	0000000d 	.word	0x0000000d
   2a770:	432b5441 	.word	0x432b5441
   2a774:	3d4c474d 	.word	0x3d4c474d
   2a778:	43455222 	.word	0x43455222
   2a77c:	41455220 	.word	0x41455220
   2a780:	000d2244 	.word	0x000d2244
   2a784:	432b5441 	.word	0x432b5441
   2a788:	3d4c474d 	.word	0x3d4c474d
   2a78c:	4c4c4122 	.word	0x4c4c4122
   2a790:	00000d22 	.word	0x00000d22
   2a794:	4c474d43 	.word	0x4c474d43
   2a798:	00000000 	.word	0x00000000
   2a79c:	432b5441 	.word	0x432b5441
   2a7a0:	3d52474d 	.word	0x3d52474d
   2a7a4:	000d6425 	.word	0x000d6425
   2a7a8:	474d432b 	.word	0x474d432b
   2a7ac:	00000052 	.word	0x00000052
   2a7b0:	25445441 	.word	0x25445441
   2a7b4:	000d3b73 	.word	0x000d3b73
   2a7b8:	0d415441 	.word	0x0d415441
   2a7bc:	00000000 	.word	0x00000000
   2a7c0:	432b5441 	.word	0x432b5441
   2a7c4:	3d53544c 	.word	0x3d53544c
   2a7c8:	00000d31 	.word	0x00000d31
   2a7cc:	432b5441 	.word	0x432b5441
   2a7d0:	3d53544c 	.word	0x3d53544c
   2a7d4:	00000d30 	.word	0x00000d30
   2a7d8:	442b5441 	.word	0x442b5441
   2a7dc:	3d544544 	.word	0x3d544544
   2a7e0:	00000d31 	.word	0x00000d31
   2a7e4:	562b5441 	.word	0x562b5441
   2a7e8:	223d5354 	.word	0x223d5354
   2a7ec:	0d227325 	.word	0x0d227325
   2a7f0:	00000000 	.word	0x00000000
   2a7f4:	432b5441 	.word	0x432b5441
   2a7f8:	0d505548 	.word	0x0d505548
   2a7fc:	00000000 	.word	0x00000000
   2a800:	432b5441 	.word	0x432b5441
   2a804:	3d415743 	.word	0x3d415743
   2a808:	0d302c30 	.word	0x0d302c30
   2a80c:	00000000 	.word	0x00000000
   2a810:	472b5441 	.word	0x472b5441
   2a814:	55424d53 	.word	0x55424d53
   2a818:	313d5953 	.word	0x313d5953
   2a81c:	0000000d 	.word	0x0000000d
   2a820:	472b5441 	.word	0x472b5441
   2a824:	55424d53 	.word	0x55424d53
   2a828:	303d5953 	.word	0x303d5953
   2a82c:	0000000d 	.word	0x0000000d
   2a830:	432b5441 	.word	0x432b5441
   2a834:	3d434552 	.word	0x3d434552
   2a838:	00000d35 	.word	0x00000d35
   2a83c:	432b5441 	.word	0x432b5441
   2a840:	3d434552 	.word	0x3d434552
   2a844:	43222c34 	.word	0x43222c34
   2a848:	73555c3a 	.word	0x73555c3a
   2a84c:	255c7265 	.word	0x255c7265
   2a850:	6d612e63 	.word	0x6d612e63
   2a854:	302c2272 	.word	0x302c2272
   2a858:	2c30392c 	.word	0x2c30392c
   2a85c:	000d7525 	.word	0x000d7525
   2a860:	432b5441 	.word	0x432b5441
   2a864:	3f4b4c43 	.word	0x3f4b4c43
   2a868:	0000000d 	.word	0x0000000d
   2a86c:	00000022 	.word	0x00000022
   2a870:	0000002f 	.word	0x0000002f
   2a874:	0000002b 	.word	0x0000002b
   2a878:	544d432b 	.word	0x544d432b
   2a87c:	00003a49 	.word	0x00003a49
   2a880:	474e4952 	.word	0x474e4952
   2a884:	00000000 	.word	0x00000000
   2a888:	5153432b 	.word	0x5153432b
   2a88c:	0000004e 	.word	0x0000004e
   2a890:	494c432b 	.word	0x494c432b
   2a894:	00000050 	.word	0x00000050
   2a898:	43204f4e 	.word	0x43204f4e
   2a89c:	49525241 	.word	0x49525241
   2a8a0:	00005245 	.word	0x00005245
   2a8a4:	59535542 	.word	0x59535542
   2a8a8:	00000000 	.word	0x00000000
   2a8ac:	41204f4e 	.word	0x41204f4e
   2a8b0:	4557534e 	.word	0x4557534e
   2a8b4:	00000052 	.word	0x00000052
   2a8b8:	4d54442b 	.word	0x4d54442b
   2a8bc:	00003a46 	.word	0x00003a46
   2a8c0:	4552432b 	.word	0x4552432b
   2a8c4:	30203a43 	.word	0x30203a43
   2a8c8:	00000000 	.word	0x00000000
   2a8cc:	532b5441 	.word	0x532b5441
   2a8d0:	52425041 	.word	0x52425041
   2a8d4:	312c333d 	.word	0x312c333d
   2a8d8:	4f43222c 	.word	0x4f43222c
   2a8dc:	5059544e 	.word	0x5059544e
   2a8e0:	222c2245 	.word	0x222c2245
   2a8e4:	53525047 	.word	0x53525047
   2a8e8:	00000d22 	.word	0x00000d22
   2a8ec:	432b5441 	.word	0x432b5441
   2a8f0:	3f53504f 	.word	0x3f53504f
   2a8f4:	0000000d 	.word	0x0000000d
   2a8f8:	504f432b 	.word	0x504f432b
   2a8fc:	00003a53 	.word	0x00003a53
   2a900:	41454449 	.word	0x41454449
   2a904:	00000000 	.word	0x00000000
   2a908:	532b5441 	.word	0x532b5441
   2a90c:	52425041 	.word	0x52425041
   2a910:	312c333d 	.word	0x312c333d
   2a914:	5041222c 	.word	0x5041222c
   2a918:	222c224e 	.word	0x222c224e
   2a91c:	65746e69 	.word	0x65746e69
   2a920:	74656e72 	.word	0x74656e72
   2a924:	00000d22 	.word	0x00000d22
   2a928:	41444f56 	.word	0x41444f56
   2a92c:	00000000 	.word	0x00000000
   2a930:	532b5441 	.word	0x532b5441
   2a934:	52425041 	.word	0x52425041
   2a938:	312c333d 	.word	0x312c333d
   2a93c:	5041222c 	.word	0x5041222c
   2a940:	222c224e 	.word	0x222c224e
   2a944:	22777777 	.word	0x22777777
   2a948:	0000000d 	.word	0x0000000d
   2a94c:	4c4e5342 	.word	0x4c4e5342
   2a950:	00000000 	.word	0x00000000
   2a954:	532b5441 	.word	0x532b5441
   2a958:	52425041 	.word	0x52425041
   2a95c:	312c333d 	.word	0x312c333d
   2a960:	5041222c 	.word	0x5041222c
   2a964:	222c224e 	.word	0x222c224e
   2a968:	6c6e7362 	.word	0x6c6e7362
   2a96c:	2274656e 	.word	0x2274656e
   2a970:	0000000d 	.word	0x0000000d
   2a974:	54524941 	.word	0x54524941
   2a978:	00004c45 	.word	0x00004c45
   2a97c:	532b5441 	.word	0x532b5441
   2a980:	52425041 	.word	0x52425041
   2a984:	312c333d 	.word	0x312c333d
   2a988:	5041222c 	.word	0x5041222c
   2a98c:	222c224e 	.word	0x222c224e
   2a990:	74726961 	.word	0x74726961
   2a994:	70676c65 	.word	0x70676c65
   2a998:	632e7372 	.word	0x632e7372
   2a99c:	0d226d6f 	.word	0x0d226d6f
   2a9a0:	00000000 	.word	0x00000000
   2a9a4:	532b5441 	.word	0x532b5441
   2a9a8:	52425041 	.word	0x52425041
   2a9ac:	312c333d 	.word	0x312c333d
   2a9b0:	5041222c 	.word	0x5041222c
   2a9b4:	222c224e 	.word	0x222c224e
   2a9b8:	00000d22 	.word	0x00000d22
   2a9bc:	532b5441 	.word	0x532b5441
   2a9c0:	52425041 	.word	0x52425041
   2a9c4:	312c323d 	.word	0x312c323d
   2a9c8:	0000000d 	.word	0x0000000d
   2a9cc:	5041532b 	.word	0x5041532b
   2a9d0:	203a5242 	.word	0x203a5242
   2a9d4:	00302c31 	.word	0x00302c31
   2a9d8:	5041532b 	.word	0x5041532b
   2a9dc:	203a5242 	.word	0x203a5242
   2a9e0:	00312c31 	.word	0x00312c31
   2a9e4:	5041532b 	.word	0x5041532b
   2a9e8:	203a5242 	.word	0x203a5242
   2a9ec:	00322c31 	.word	0x00322c31
   2a9f0:	5041532b 	.word	0x5041532b
   2a9f4:	203a5242 	.word	0x203a5242
   2a9f8:	00332c31 	.word	0x00332c31
   2a9fc:	532b5441 	.word	0x532b5441
   2aa00:	52425041 	.word	0x52425041
   2aa04:	312c313d 	.word	0x312c313d
   2aa08:	0000000d 	.word	0x0000000d
   2aa0c:	532b5441 	.word	0x532b5441
   2aa10:	52425041 	.word	0x52425041
   2aa14:	312c303d 	.word	0x312c303d
   2aa18:	0000000d 	.word	0x0000000d
   2aa1c:	462b5441 	.word	0x462b5441
   2aa20:	49435054 	.word	0x49435054
   2aa24:	0d313d44 	.word	0x0d313d44
   2aa28:	00000000 	.word	0x00000000
   2aa2c:	462b5441 	.word	0x462b5441
   2aa30:	45535054 	.word	0x45535054
   2aa34:	223d5652 	.word	0x223d5652
   2aa38:	0d227325 	.word	0x0d227325
   2aa3c:	00000000 	.word	0x00000000
   2aa40:	462b5441 	.word	0x462b5441
   2aa44:	4e555054 	.word	0x4e555054
   2aa48:	7325223d 	.word	0x7325223d
   2aa4c:	00000d22 	.word	0x00000d22
   2aa50:	462b5441 	.word	0x462b5441
   2aa54:	57505054 	.word	0x57505054
   2aa58:	7325223d 	.word	0x7325223d
   2aa5c:	00000d22 	.word	0x00000d22
   2aa60:	462b5441 	.word	0x462b5441
   2aa64:	45475054 	.word	0x45475054
   2aa68:	4d414e54 	.word	0x4d414e54
   2aa6c:	25223d45 	.word	0x25223d45
   2aa70:	000d2273 	.word	0x000d2273
   2aa74:	462b5441 	.word	0x462b5441
   2aa78:	45475054 	.word	0x45475054
   2aa7c:	54415054 	.word	0x54415054
   2aa80:	25223d48 	.word	0x25223d48
   2aa84:	000d2273 	.word	0x000d2273
   2aa88:	5054462b 	.word	0x5054462b
   2aa8c:	455a4953 	.word	0x455a4953
   2aa90:	2c31203a 	.word	0x2c31203a
   2aa94:	00000000 	.word	0x00000000
   2aa98:	462b5441 	.word	0x462b5441
   2aa9c:	49535054 	.word	0x49535054
   2aaa0:	000d455a 	.word	0x000d455a
   2aaa4:	5054462b 	.word	0x5054462b
   2aaa8:	3a544547 	.word	0x3a544547
   2aaac:	312c3120 	.word	0x312c3120
   2aab0:	00000000 	.word	0x00000000
   2aab4:	462b5441 	.word	0x462b5441
   2aab8:	45475054 	.word	0x45475054
   2aabc:	0d313d54 	.word	0x0d313d54
   2aac0:	00000000 	.word	0x00000000
   2aac4:	462b5441 	.word	0x462b5441
   2aac8:	45475054 	.word	0x45475054
   2aacc:	2c323d54 	.word	0x2c323d54
   2aad0:	000d6425 	.word	0x000d6425
   2aad4:	5054462b 	.word	0x5054462b
   2aad8:	3a544547 	.word	0x3a544547
   2aadc:	00000020 	.word	0x00000020
   2aae0:	434c432b 	.word	0x434c432b
   2aae4:	31203a43 	.word	0x31203a43
   2aae8:	322c302c 	.word	0x322c302c
   2aaec:	00000000 	.word	0x00000000
   2aaf0:	434c432b 	.word	0x434c432b
   2aaf4:	31203a43 	.word	0x31203a43
   2aaf8:	332c302c 	.word	0x332c302c
   2aafc:	00000000 	.word	0x00000000
   2ab00:	434c432b 	.word	0x434c432b
   2ab04:	31203a43 	.word	0x31203a43
   2ab08:	302c302c 	.word	0x302c302c
   2ab0c:	00000000 	.word	0x00000000
   2ab10:	434c432b 	.word	0x434c432b
   2ab14:	31203a43 	.word	0x31203a43
   2ab18:	362c302c 	.word	0x362c302c
	...
   2ab24:	4e4f4d41 	.word	0x4e4f4d41
   2ab28:	00000000 	.word	0x00000000
   2ab2c:	55475250 	.word	0x55475250
   2ab30:	00004450 	.word	0x00004450
   2ab34:	54494157 	.word	0x54494157
   2ab38:	00000000 	.word	0x00000000
   2ab3c:	204d5347 	.word	0x204d5347
   2ab40:	4c4c4143 	.word	0x4c4c4143
   2ab44:	49415720 	.word	0x49415720
   2ab48:	4e495454 	.word	0x4e495454
   2ab4c:	49442047 	.word	0x49442047
   2ab50:	4c424153 	.word	0x4c424153
   2ab54:	203a2045 	.word	0x203a2045
   2ab58:	43435553 	.word	0x43435553
   2ab5c:	00535345 	.word	0x00535345
   2ab60:	204d5347 	.word	0x204d5347
   2ab64:	4c4c4143 	.word	0x4c4c4143
   2ab68:	49415720 	.word	0x49415720
   2ab6c:	4e495454 	.word	0x4e495454
   2ab70:	49442047 	.word	0x49442047
   2ab74:	4c424153 	.word	0x4c424153
   2ab78:	203a2045 	.word	0x203a2045
   2ab7c:	4c494146 	.word	0x4c494146
   2ab80:	00004445 	.word	0x00004445
   2ab84:	41454c43 	.word	0x41454c43
   2ab88:	4c4c4152 	.word	0x4c4c4152
   2ab8c:	00000000 	.word	0x00000000
   2ab90:	204c4c41 	.word	0x204c4c41
   2ab94:	52455355 	.word	0x52455355
   2ab98:	4d554e20 	.word	0x4d554e20
   2ab9c:	53524542 	.word	0x53524542
   2aba0:	454c4320 	.word	0x454c4320
   2aba4:	44455241 	.word	0x44455241
   2aba8:	00000000 	.word	0x00000000
   2abac:	41464544 	.word	0x41464544
   2abb0:	00544c55 	.word	0x00544c55
   2abb4:	204c4c41 	.word	0x204c4c41
   2abb8:	54544553 	.word	0x54544553
   2abbc:	53474e49 	.word	0x53474e49
   2abc0:	45524120 	.word	0x45524120
   2abc4:	574f4e20 	.word	0x574f4e20
   2abc8:	43414620 	.word	0x43414620
   2abcc:	59524f54 	.word	0x59524f54
   2abd0:	46454420 	.word	0x46454420
   2abd4:	544c5541 	.word	0x544c5541
   2abd8:	00000000 	.word	0x00000000
   2abdc:	004d554e 	.word	0x004d554e
   2abe0:	4e206f4e 	.word	0x4e206f4e
   2abe4:	65626d75 	.word	0x65626d75
   2abe8:	45207372 	.word	0x45207372
   2abec:	74736978 	.word	0x74736978
   2abf0:	00000073 	.word	0x00000073
   2abf4:	45534552 	.word	0x45534552
   2abf8:	00000054 	.word	0x00000054
   2abfc:	00444944 	.word	0x00444944
   2ac00:	32422020 	.word	0x32422020
   2ac04:	34312d38 	.word	0x34312d38
   2ac08:	2d39302d 	.word	0x2d39302d
   2ac0c:	20203931 	.word	0x20203931
   2ac10:	00000000 	.word	0x00000000
   2ac14:	20756c25 	.word	0x20756c25
   2ac18:	00007325 	.word	0x00007325
   2ac1c:	4f545541 	.word	0x4f545541
   2ac20:	00004e4f 	.word	0x00004e4f
   2ac24:	4f544f4d 	.word	0x4f544f4d
   2ac28:	55412052 	.word	0x55412052
   2ac2c:	4e4f4f54 	.word	0x4e4f4f54
   2ac30:	004e4f20 	.word	0x004e4f20
   2ac34:	4f545541 	.word	0x4f545541
   2ac38:	0046464f 	.word	0x0046464f
   2ac3c:	4f544f4d 	.word	0x4f544f4d
   2ac40:	55412052 	.word	0x55412052
   2ac44:	4e4f4f54 	.word	0x4e4f4f54
   2ac48:	46464f20 	.word	0x46464f20
   2ac4c:	00000000 	.word	0x00000000
   2ac50:	50594257 	.word	0x50594257
   2ac54:	00004e4f 	.word	0x00004e4f
   2ac58:	45544157 	.word	0x45544157
   2ac5c:	59422052 	.word	0x59422052
   2ac60:	53534150 	.word	0x53534150
   2ac64:	004e4f20 	.word	0x004e4f20
   2ac68:	50594257 	.word	0x50594257
   2ac6c:	0046464f 	.word	0x0046464f
   2ac70:	45544157 	.word	0x45544157
   2ac74:	59422052 	.word	0x59422052
   2ac78:	53534150 	.word	0x53534150
   2ac7c:	46464f20 	.word	0x46464f20
   2ac80:	00000000 	.word	0x00000000
   2ac84:	4f505053 	.word	0x4f505053
   2ac88:	0000004e 	.word	0x0000004e
   2ac8c:	20505053 	.word	0x20505053
   2ac90:	00004e4f 	.word	0x00004e4f
   2ac94:	4f505053 	.word	0x4f505053
   2ac98:	00004646 	.word	0x00004646
   2ac9c:	20505053 	.word	0x20505053
   2aca0:	0046464f 	.word	0x0046464f
   2aca4:	56505053 	.word	0x56505053
   2aca8:	00000000 	.word	0x00000000
   2acac:	20505053 	.word	0x20505053
   2acb0:	544c4f56 	.word	0x544c4f56
   2acb4:	54455320 	.word	0x54455320
   2acb8:	00000000 	.word	0x00000000
   2acbc:	4f514553 	.word	0x4f514553
   2acc0:	0000004e 	.word	0x0000004e
   2acc4:	50514553 	.word	0x50514553
   2acc8:	004e4f20 	.word	0x004e4f20
   2accc:	4f514553 	.word	0x4f514553
   2acd0:	00004646 	.word	0x00004646
   2acd4:	50514553 	.word	0x50514553
   2acd8:	46464f20 	.word	0x46464f20
   2acdc:	00000000 	.word	0x00000000
   2ace0:	00444e44 	.word	0x00444e44
   2ace4:	20444e44 	.word	0x20444e44
   2ace8:	0000203a 	.word	0x0000203a
   2acec:	004b4f20 	.word	0x004b4f20
   2acf0:	4b424446 	.word	0x4b424446
   2acf4:	00000000 	.word	0x00000000
   2acf8:	4b424446 	.word	0x4b424446
   2acfc:	25203a20 	.word	0x25203a20
   2ad00:	00000064 	.word	0x00000064
   2ad04:	454d4f55 	.word	0x454d4f55
   2ad08:	444f4854 	.word	0x444f4854
   2ad0c:	00000000 	.word	0x00000000
   2ad10:	454d4f55 	.word	0x454d4f55
   2ad14:	444f4854 	.word	0x444f4854
   2ad18:	00203a20 	.word	0x00203a20
   2ad1c:	5942564d 	.word	0x5942564d
   2ad20:	004e4f50 	.word	0x004e4f50
   2ad24:	4f544f4d 	.word	0x4f544f4d
   2ad28:	4f562052 	.word	0x4f562052
   2ad2c:	4741544c 	.word	0x4741544c
   2ad30:	59422045 	.word	0x59422045
   2ad34:	53534150 	.word	0x53534150
   2ad38:	004e4f20 	.word	0x004e4f20
   2ad3c:	5942564d 	.word	0x5942564d
   2ad40:	46464f50 	.word	0x46464f50
   2ad44:	00000000 	.word	0x00000000
   2ad48:	4f544f4d 	.word	0x4f544f4d
   2ad4c:	4f562052 	.word	0x4f562052
   2ad50:	4741544c 	.word	0x4741544c
   2ad54:	59422045 	.word	0x59422045
   2ad58:	53534150 	.word	0x53534150
   2ad5c:	46464f20 	.word	0x46464f20
   2ad60:	00000000 	.word	0x00000000
   2ad64:	5942564d 	.word	0x5942564d
   2ad68:	00005450 	.word	0x00005450
   2ad6c:	6f746f4d 	.word	0x6f746f4d
   2ad70:	6f562072 	.word	0x6f562072
   2ad74:	6761746c 	.word	0x6761746c
   2ad78:	79422065 	.word	0x79422065
   2ad7c:	73736170 	.word	0x73736170
   2ad80:	6d695420 	.word	0x6d695420
   2ad84:	65532065 	.word	0x65532065
   2ad88:	6f742074 	.word	0x6f742074
   2ad8c:	00642520 	.word	0x00642520
   2ad90:	50534552 	.word	0x50534552
   2ad94:	00000000 	.word	0x00000000
   2ad98:	50534552 	.word	0x50534552
   2ad9c:	00203a20 	.word	0x00203a20
   2ada0:	0052564f 	.word	0x0052564f
   2ada4:	2052564f 	.word	0x2052564f
   2ada8:	20544553 	.word	0x20544553
   2adac:	00004b4f 	.word	0x00004b4f
   2adb0:	52444e55 	.word	0x52444e55
   2adb4:	00000000 	.word	0x00000000
   2adb8:	52444e55 	.word	0x52444e55
   2adbc:	54455320 	.word	0x54455320
   2adc0:	004b4f20 	.word	0x004b4f20
   2adc4:	41545341 	.word	0x41545341
   2adc8:	00000054 	.word	0x00000054
   2adcc:	75253a43 	.word	0x75253a43
   2add0:	0a75252e 	.word	0x0a75252e
   2add4:	75253a4e 	.word	0x75253a4e
   2add8:	253a4f0a 	.word	0x253a4f0a
   2addc:	3a550a75 	.word	0x3a550a75
   2ade0:	4f0a7525 	.word	0x4f0a7525
   2ade4:	75253a50 	.word	0x75253a50
   2ade8:	3a50550a 	.word	0x3a50550a
   2adec:	00007525 	.word	0x00007525
   2adf0:	4f46564f 	.word	0x4f46564f
   2adf4:	0000004e 	.word	0x0000004e
   2adf8:	56455250 	.word	0x56455250
   2adfc:	20544e45 	.word	0x20544e45
   2ae00:	5245564f 	.word	0x5245564f
   2ae04:	574f4c46 	.word	0x574f4c46
   2ae08:	54455320 	.word	0x54455320
   2ae0c:	474e4954 	.word	0x474e4954
   2ae10:	004e4f20 	.word	0x004e4f20
   2ae14:	4f46564f 	.word	0x4f46564f
   2ae18:	00004646 	.word	0x00004646
   2ae1c:	56455250 	.word	0x56455250
   2ae20:	20544e45 	.word	0x20544e45
   2ae24:	5245564f 	.word	0x5245564f
   2ae28:	574f4c46 	.word	0x574f4c46
   2ae2c:	54455320 	.word	0x54455320
   2ae30:	474e4954 	.word	0x474e4954
   2ae34:	46464f20 	.word	0x46464f20
   2ae38:	00000000 	.word	0x00000000
   2ae3c:	4f4d324d 	.word	0x4f4d324d
   2ae40:	0000004e 	.word	0x0000004e
   2ae44:	204d324d 	.word	0x204d324d
   2ae48:	6e727554 	.word	0x6e727554
   2ae4c:	4f206465 	.word	0x4f206465
   2ae50:	52202c6e 	.word	0x52202c6e
   2ae54:	746f6d65 	.word	0x746f6d65
   2ae58:	754e2065 	.word	0x754e2065
   2ae5c:	7265626d 	.word	0x7265626d
   2ae60:	726c4120 	.word	0x726c4120
   2ae64:	79646165 	.word	0x79646165
   2ae68:	72655620 	.word	0x72655620
   2ae6c:	65696669 	.word	0x65696669
   2ae70:	00000064 	.word	0x00000064
   2ae74:	6f727245 	.word	0x6f727245
   2ae78:	4d203a72 	.word	0x4d203a72
   2ae7c:	52204d32 	.word	0x52204d32
   2ae80:	746f6d65 	.word	0x746f6d65
   2ae84:	754e2065 	.word	0x754e2065
   2ae88:	7265626d 	.word	0x7265626d
   2ae8c:	746f4e20 	.word	0x746f4e20
   2ae90:	65725020 	.word	0x65725020
   2ae94:	746e6573 	.word	0x746e6573
   2ae98:	00000000 	.word	0x00000000
   2ae9c:	4f4d324d 	.word	0x4f4d324d
   2aea0:	00004646 	.word	0x00004646
   2aea4:	204d324d 	.word	0x204d324d
   2aea8:	54544553 	.word	0x54544553
   2aeac:	20474e49 	.word	0x20474e49
   2aeb0:	0046464f 	.word	0x0046464f
   2aeb4:	54415453 	.word	0x54415453
   2aeb8:	00005355 	.word	0x00005355
   2aebc:	45544c41 	.word	0x45544c41
   2aec0:	54414e52 	.word	0x54414e52
   2aec4:	554e2045 	.word	0x554e2045
   2aec8:	5245424d 	.word	0x5245424d
   2aecc:	004e4f20 	.word	0x004e4f20
   2aed0:	45544c41 	.word	0x45544c41
   2aed4:	54414e52 	.word	0x54414e52
   2aed8:	554e2045 	.word	0x554e2045
   2aedc:	5245424d 	.word	0x5245424d
   2aee0:	544f4e20 	.word	0x544f4e20
   2aee4:	45525020 	.word	0x45525020
   2aee8:	544e4553 	.word	0x544e4553
   2aeec:	00000000 	.word	0x00000000
   2aef0:	464f4d41 	.word	0x464f4d41
   2aef4:	00000046 	.word	0x00000046
   2aef8:	45544c41 	.word	0x45544c41
   2aefc:	54414e52 	.word	0x54414e52
   2af00:	4f4d2045 	.word	0x4f4d2045
   2af04:	454c4942 	.word	0x454c4942
   2af08:	4d554e20 	.word	0x4d554e20
   2af0c:	20524542 	.word	0x20524542
   2af10:	0046464f 	.word	0x0046464f
   2af14:	464f434e 	.word	0x464f434e
   2af18:	00000046 	.word	0x00000046
   2af1c:	43204f4e 	.word	0x43204f4e
   2af20:	204c4c41 	.word	0x204c4c41
   2af24:	54544553 	.word	0x54544553
   2af28:	20474e49 	.word	0x20474e49
   2af2c:	0046464f 	.word	0x0046464f
   2af30:	54544547 	.word	0x54544547
   2af34:	00454d49 	.word	0x00454d49
   2af38:	454d4954 	.word	0x454d4954
   2af3c:	25203a20 	.word	0x25203a20
   2af40:	75253a75 	.word	0x75253a75
   2af44:	00000000 	.word	0x00000000
   2af48:	54544553 	.word	0x54544553
   2af4c:	00454d49 	.word	0x00454d49
   2af50:	4954434e 	.word	0x4954434e
   2af54:	0000454d 	.word	0x0000454d
   2af58:	0000002d 	.word	0x0000002d
   2af5c:	0000003a 	.word	0x0000003a
   2af60:	43204f4e 	.word	0x43204f4e
   2af64:	204c4c41 	.word	0x204c4c41
   2af68:	494d4954 	.word	0x494d4954
   2af6c:	2053474e 	.word	0x2053474e
   2af70:	00544553 	.word	0x00544553
   2af74:	47415453 	.word	0x47415453
   2af78:	00000045 	.word	0x00000045
   2af7c:	4c4c4143 	.word	0x4c4c4143
   2af80:	41545320 	.word	0x41545320
   2af84:	53204547 	.word	0x53204547
   2af88:	54205445 	.word	0x54205445
   2af8c:	203a204f 	.word	0x203a204f
   2af90:	00006425 	.word	0x00006425
   2af94:	52415453 	.word	0x52415453
   2af98:	454d4954 	.word	0x454d4954
   2af9c:	00000000 	.word	0x00000000
   2afa0:	41545320 	.word	0x41545320
   2afa4:	4d495452 	.word	0x4d495452
   2afa8:	45532045 	.word	0x45532045
   2afac:	4f542054 	.word	0x4f542054
   2afb0:	25203a20 	.word	0x25203a20
   2afb4:	00000064 	.word	0x00000064
   2afb8:	4f545541 	.word	0x4f545541
   2afbc:	454d4954 	.word	0x454d4954
   2afc0:	00000000 	.word	0x00000000
   2afc4:	54554120 	.word	0x54554120
   2afc8:	4d49544f 	.word	0x4d49544f
   2afcc:	45532045 	.word	0x45532045
   2afd0:	4f542054 	.word	0x4f542054
   2afd4:	25203a20 	.word	0x25203a20
   2afd8:	00000064 	.word	0x00000064
   2afdc:	004c4142 	.word	0x004c4142
   2afe0:	002b504d 	.word	0x002b504d
   2afe4:	4f4e2050 	.word	0x4f4e2050
   2afe8:	44444120 	.word	0x44444120
   2afec:	00444544 	.word	0x00444544
   2aff0:	002b534d 	.word	0x002b534d
   2aff4:	4f4e2053 	.word	0x4f4e2053
   2aff8:	44444120 	.word	0x44444120
   2affc:	00444544 	.word	0x00444544
   2b000:	00002b4d 	.word	0x00002b4d
   2b004:	49424f4d 	.word	0x49424f4d
   2b008:	4e20454c 	.word	0x4e20454c
   2b00c:	00003a4f 	.word	0x00003a4f
   2b010:	0000000a 	.word	0x0000000a
   2b014:	45444441 	.word	0x45444441
   2b018:	55532044 	.word	0x55532044
   2b01c:	53454343 	.word	0x53454343
   2b020:	4c554653 	.word	0x4c554653
   2b024:	0000594c 	.word	0x0000594c
   2b028:	00002d4d 	.word	0x00002d4d
   2b02c:	4f4d4552 	.word	0x4f4d4552
   2b030:	20444556 	.word	0x20444556
   2b034:	43435553 	.word	0x43435553
   2b038:	46535345 	.word	0x46535345
   2b03c:	594c4c55 	.word	0x594c4c55
   2b040:	00000000 	.word	0x00000000
   2b044:	002b4d41 	.word	0x002b4d41
   2b048:	45544c41 	.word	0x45544c41
   2b04c:	54414e52 	.word	0x54414e52
   2b050:	4f4d2045 	.word	0x4f4d2045
   2b054:	454c4942 	.word	0x454c4942
   2b058:	204f4e20 	.word	0x204f4e20
   2b05c:	20444441 	.word	0x20444441
   2b060:	43435553 	.word	0x43435553
   2b064:	00535345 	.word	0x00535345
   2b068:	002b4d4d 	.word	0x002b4d4d
   2b06c:	204d324d 	.word	0x204d324d
   2b070:	202e4f4e 	.word	0x202e4f4e
   2b074:	45444441 	.word	0x45444441
   2b078:	00000044 	.word	0x00000044
   2b07c:	002b524d 	.word	0x002b524d
   2b080:	204d324d 	.word	0x204d324d
   2b084:	4f4d4552 	.word	0x4f4d4552
   2b088:	4e204554 	.word	0x4e204554
   2b08c:	41202e4f 	.word	0x41202e4f
   2b090:	44454444 	.word	0x44454444
   2b094:	00000000 	.word	0x00000000
   2b098:	4f525245 	.word	0x4f525245
   2b09c:	203a2052 	.word	0x203a2052
   2b0a0:	00007325 	.word	0x00007325
   2b0a4:	00004e4f 	.word	0x00004e4f
   2b0a8:	48502032 	.word	0x48502032
   2b0ac:	00455341 	.word	0x00455341
   2b0b0:	00004b4f 	.word	0x00004b4f
   2b0b4:	4f525245 	.word	0x4f525245
   2b0b8:	00000052 	.word	0x00000052
   2b0bc:	203a5952 	.word	0x203a5952
   2b0c0:	59206425 	.word	0x59206425
   2b0c4:	25203a42 	.word	0x25203a42
   2b0c8:	52422064 	.word	0x52422064
   2b0cc:	6425203a 	.word	0x6425203a
   2b0d0:	3a43410a 	.word	0x3a43410a
   2b0d4:	0a732520 	.word	0x0a732520
   2b0d8:	75716553 	.word	0x75716553
   2b0dc:	65636e65 	.word	0x65636e65
   2b0e0:	7325203a 	.word	0x7325203a
   2b0e4:	746f4d0a 	.word	0x746f4d0a
   2b0e8:	203a726f 	.word	0x203a726f
   2b0ec:	430a7325 	.word	0x430a7325
   2b0f0:	65727275 	.word	0x65727275
   2b0f4:	203a746e 	.word	0x203a746e
   2b0f8:	0a416425 	.word	0x0a416425
   2b0fc:	7774654e 	.word	0x7774654e
   2b100:	3a6b726f 	.word	0x3a6b726f
   2b104:	00642520 	.word	0x00642520
   2b108:	304d4d56 	.word	0x304d4d56
   2b10c:	00000031 	.word	0x00000031
   2b110:	4f544f4d 	.word	0x4f544f4d
   2b114:	00002052 	.word	0x00002052
   2b118:	0046464f 	.word	0x0046464f
   2b11c:	7e75257e 	.word	0x7e75257e
   2b120:	00000000 	.word	0x00000000
   2b124:	20572f46 	.word	0x20572f46
   2b128:	61647055 	.word	0x61647055
   2b12c:	43206574 	.word	0x43206574
   2b130:	6c706d6f 	.word	0x6c706d6f
   2b134:	64657465 	.word	0x64657465
   2b138:	00000000 	.word	0x00000000
   2b13c:	20572f46 	.word	0x20572f46
   2b140:	61647055 	.word	0x61647055
   2b144:	45206574 	.word	0x45206574
   2b148:	726f7272 	.word	0x726f7272
   2b14c:	00000000 	.word	0x00000000
   2b150:	30303030 	.word	0x30303030
   2b154:	30303030 	.word	0x30303030
   2b158:	00003030 	.word	0x00003030
   2b15c:	494d4441 	.word	0x494d4441
   2b160:	0000004e 	.word	0x0000004e
   2b164:	00000023 	.word	0x00000023
   2b168:	30524d56 	.word	0x30524d56
   2b16c:	00000032 	.word	0x00000032
   2b170:	204d324d 	.word	0x204d324d
   2b174:	4e525554 	.word	0x4e525554
   2b178:	4f204445 	.word	0x4f204445
   2b17c:	0000004e 	.word	0x0000004e
   2b180:	0000203a 	.word	0x0000203a
   2b184:	000174bc 	.word	0x000174bc
   2b188:	000175a2 	.word	0x000175a2
   2b18c:	000175a2 	.word	0x000175a2
   2b190:	000174bc 	.word	0x000174bc
   2b194:	000175a2 	.word	0x000175a2
   2b198:	000175a2 	.word	0x000175a2
   2b19c:	000175a2 	.word	0x000175a2
   2b1a0:	000175a2 	.word	0x000175a2
   2b1a4:	000175a2 	.word	0x000175a2
   2b1a8:	000175a2 	.word	0x000175a2
   2b1ac:	000175a2 	.word	0x000175a2
   2b1b0:	000175a2 	.word	0x000175a2
   2b1b4:	000174bc 	.word	0x000174bc
   2b1b8:	000175a2 	.word	0x000175a2
   2b1bc:	000175a2 	.word	0x000175a2
   2b1c0:	000175a2 	.word	0x000175a2
   2b1c4:	0001747e 	.word	0x0001747e
   2b1c8:	000175a2 	.word	0x000175a2
   2b1cc:	000174bc 	.word	0x000174bc
   2b1d0:	49524b20 	.word	0x49524b20
   2b1d4:	414e4853 	.word	0x414e4853
   2b1d8:	4d532020 	.word	0x4d532020
   2b1dc:	20545241 	.word	0x20545241
   2b1e0:	00000000 	.word	0x00000000
   2b1e4:	54202020 	.word	0x54202020
   2b1e8:	4e484345 	.word	0x4e484345
   2b1ec:	474f4c4f 	.word	0x474f4c4f
   2b1f0:	20202059 	.word	0x20202059
   2b1f4:	00000000 	.word	0x00000000
   2b1f8:	4f532020 	.word	0x4f532020
   2b1fc:	41575446 	.word	0x41575446
   2b200:	56204552 	.word	0x56204552
   2b204:	20205245 	.word	0x20205245
   2b208:	00000000 	.word	0x00000000
   2b20c:	32422020 	.word	0x32422020
   2b210:	34312d38 	.word	0x34312d38
   2b214:	2d39302d 	.word	0x2d39302d
   2b218:	20203931 	.word	0x20203931
   2b21c:	00000000 	.word	0x00000000
   2b220:	00007325 	.word	0x00007325
   2b224:	74696e49 	.word	0x74696e49
   2b228:	696c6169 	.word	0x696c6169
   2b22c:	676e697a 	.word	0x676e697a
   2b230:	202e2e2e 	.word	0x202e2e2e
   2b234:	00000000 	.word	0x00000000
   2b238:	4d4d4f43 	.word	0x4d4d4f43
   2b23c:	45444e41 	.word	0x45444e41
   2b240:	32762052 	.word	0x32762052
   2b244:	20202020 	.word	0x20202020
   2b248:	00000000 	.word	0x00000000
   2b24c:	4e4f4850 	.word	0x4e4f4850
   2b250:	54532045 	.word	0x54532045
   2b254:	53555441 	.word	0x53555441
   2b258:	20202020 	.word	0x20202020
   2b25c:	00000000 	.word	0x00000000
   2b260:	20204e4f 	.word	0x20204e4f
   2b264:	20202020 	.word	0x20202020
   2b268:	20202020 	.word	0x20202020
   2b26c:	20202020 	.word	0x20202020
   2b270:	00000000 	.word	0x00000000
   2b274:	2046464f 	.word	0x2046464f
   2b278:	20202020 	.word	0x20202020
   2b27c:	20202020 	.word	0x20202020
   2b280:	20202020 	.word	0x20202020
   2b284:	00000000 	.word	0x00000000
   2b288:	20595256 	.word	0x20595256
   2b28c:	59562020 	.word	0x59562020
   2b290:	20202042 	.word	0x20202042
   2b294:	20524256 	.word	0x20524256
   2b298:	00000000 	.word	0x00000000
   2b29c:	6c333025 	.word	0x6c333025
   2b2a0:	20202075 	.word	0x20202075
   2b2a4:	00000000 	.word	0x00000000
   2b2a8:	6c333025 	.word	0x6c333025
   2b2ac:	00002075 	.word	0x00002075
   2b2b0:	4f544f4d 	.word	0x4f544f4d
   2b2b4:	203a2052 	.word	0x203a2052
   2b2b8:	46464f20 	.word	0x46464f20
   2b2bc:	20202020 	.word	0x20202020
   2b2c0:	00000000 	.word	0x00000000
   2b2c4:	4f544f4d 	.word	0x4f544f4d
   2b2c8:	203a2052 	.word	0x203a2052
   2b2cc:	204e4f20 	.word	0x204e4f20
   2b2d0:	20202020 	.word	0x20202020
   2b2d4:	00000000 	.word	0x00000000
   2b2d8:	4f545541 	.word	0x4f545541
   2b2dc:	203a2020 	.word	0x203a2020
   2b2e0:	204e4f20 	.word	0x204e4f20
   2b2e4:	20202020 	.word	0x20202020
   2b2e8:	00000000 	.word	0x00000000
   2b2ec:	4f545541 	.word	0x4f545541
   2b2f0:	203a2020 	.word	0x203a2020
   2b2f4:	46464f20 	.word	0x46464f20
   2b2f8:	20202020 	.word	0x20202020
   2b2fc:	00000000 	.word	0x00000000
   2b300:	4f544f4d 	.word	0x4f544f4d
   2b304:	55432052 	.word	0x55432052
   2b308:	4e455252 	.word	0x4e455252
   2b30c:	20203a54 	.word	0x20203a54
   2b310:	00000000 	.word	0x00000000
   2b314:	6c333025 	.word	0x6c333025
   2b318:	30252e75 	.word	0x30252e75
   2b31c:	20756c32 	.word	0x20756c32
   2b320:	20202020 	.word	0x20202020
   2b324:	20202020 	.word	0x20202020
   2b328:	00202020 	.word	0x00202020
   2b32c:	48502033 	.word	0x48502033
   2b330:	20455341 	.word	0x20455341
   2b334:	3a514553 	.word	0x3a514553
   2b338:	00000000 	.word	0x00000000
   2b33c:	204b4f20 	.word	0x204b4f20
   2b340:	00000000 	.word	0x00000000
   2b344:	52524520 	.word	0x52524520
   2b348:	00000000 	.word	0x00000000
   2b34c:	53414850 	.word	0x53414850
   2b350:	54532045 	.word	0x54532045
   2b354:	3a455441 	.word	0x3a455441
   2b358:	00000000 	.word	0x00000000
   2b35c:	48503320 	.word	0x48503320
   2b360:	00000020 	.word	0x00000020
   2b364:	48503220 	.word	0x48503220
   2b368:	00000020 	.word	0x00000020
   2b36c:	46464f20 	.word	0x46464f20
   2b370:	00000000 	.word	0x00000000
   2b374:	454c2d4f 	.word	0x454c2d4f
   2b378:	204c4556 	.word	0x204c4556
   2b37c:	0000203a 	.word	0x0000203a
   2b380:	48474948 	.word	0x48474948
   2b384:	00002020 	.word	0x00002020
   2b388:	2044494d 	.word	0x2044494d
   2b38c:	00002020 	.word	0x00002020
   2b390:	20574f4c 	.word	0x20574f4c
   2b394:	00002020 	.word	0x00002020
   2b398:	454c2d55 	.word	0x454c2d55
   2b39c:	204c4556 	.word	0x204c4556
   2b3a0:	0000203a 	.word	0x0000203a
   2b3a4:	43545243 	.word	0x43545243
   2b3a8:	0000204c 	.word	0x0000204c
   2b3ac:	74746142 	.word	0x74746142
   2b3b0:	50797265 	.word	0x50797265
   2b3b4:	203a7265 	.word	0x203a7265
   2b3b8:	25257525 	.word	0x25257525
   2b3bc:	00000020 	.word	0x00000020
   2b3c0:	4e474953 	.word	0x4e474953
   2b3c4:	3a204c41 	.word	0x3a204c41
   2b3c8:	00000020 	.word	0x00000020
   2b3cc:	20202020 	.word	0x20202020
   2b3d0:	00202020 	.word	0x00202020
   2b3d4:	4f434e49 	.word	0x4f434e49
   2b3d8:	474e494d 	.word	0x474e494d
   2b3dc:	4c414320 	.word	0x4c414320
   2b3e0:	202e2e4c 	.word	0x202e2e4c
   2b3e4:	00000000 	.word	0x00000000
   2b3e8:	36312d25 	.word	0x36312d25
   2b3ec:	00000073 	.word	0x00000073
   2b3f0:	43204e49 	.word	0x43204e49
   2b3f4:	2e4c4c41 	.word	0x2e4c4c41
   2b3f8:	20202e2e 	.word	0x20202e2e
   2b3fc:	20202020 	.word	0x20202020
   2b400:	00000000 	.word	0x00000000
   2b404:	4c414944 	.word	0x4c414944
   2b408:	2e474e49 	.word	0x2e474e49
   2b40c:	20202e2e 	.word	0x20202e2e
   2b410:	20202020 	.word	0x20202020
   2b414:	00000000 	.word	0x00000000
   2b418:	4f434e49 	.word	0x4f434e49
   2b41c:	474e494d 	.word	0x474e494d
   2b420:	534d5320 	.word	0x534d5320
   2b424:	202e2e2e 	.word	0x202e2e2e
   2b428:	00000000 	.word	0x00000000
   2b42c:	4754554f 	.word	0x4754554f
   2b430:	474e494f 	.word	0x474e494f
   2b434:	534d5320 	.word	0x534d5320
   2b438:	202e2e2e 	.word	0x202e2e2e
   2b43c:	00000000 	.word	0x00000000
   2b440:	20574f4c 	.word	0x20574f4c
   2b444:	54544142 	.word	0x54544142
   2b448:	20595245 	.word	0x20595245
   2b44c:	20202020 	.word	0x20202020
   2b450:	00000000 	.word	0x00000000
   2b454:	20202020 	.word	0x20202020
   2b458:	20202020 	.word	0x20202020
   2b45c:	20202020 	.word	0x20202020
   2b460:	20202020 	.word	0x20202020
   2b464:	00000000 	.word	0x00000000
   2b468:	52525543 	.word	0x52525543
   2b46c:	20544e45 	.word	0x20544e45
   2b470:	54544553 	.word	0x54544553
   2b474:	20474e49 	.word	0x20474e49
	...
   2b480:	1f1f0000 	.word	0x1f1f0000
   2b484:	00000000 	.word	0x00000000
   2b488:	1f1f1f00 	.word	0x1f1f1f00
   2b48c:	00000000 	.word	0x00000000
   2b490:	1f1f1f1f 	.word	0x1f1f1f1f
   2b494:	1f1f0000 	.word	0x1f1f0000
   2b498:	1f1f1f1f 	.word	0x1f1f1f1f
   2b49c:	1f1f1f1f 	.word	0x1f1f1f1f
   2b4a0:	1f1f1f1f 	.word	0x1f1f1f1f
   2b4a4:	00018c6e 	.word	0x00018c6e
   2b4a8:	000187e6 	.word	0x000187e6
   2b4ac:	0001882a 	.word	0x0001882a
   2b4b0:	0001887a 	.word	0x0001887a
   2b4b4:	000188ac 	.word	0x000188ac
   2b4b8:	0001891a 	.word	0x0001891a
   2b4bc:	00018ab0 	.word	0x00018ab0
   2b4c0:	00018b32 	.word	0x00018b32
   2b4c4:	00018bfa 	.word	0x00018bfa
   2b4c8:	00018c34 	.word	0x00018c34
   2b4cc:	00018c6c 	.word	0x00018c6c
   2b4d0:	00018b4e 	.word	0x00018b4e
   2b4d4:	00018b6c 	.word	0x00018b6c
   2b4d8:	00018b8a 	.word	0x00018b8a
   2b4dc:	00018ba8 	.word	0x00018ba8
   2b4e0:	00018bd0 	.word	0x00018bd0
   2b4e4:	756c255d 	.word	0x756c255d
   2b4e8:	756c257b 	.word	0x756c257b
   2b4ec:	756c257d 	.word	0x756c257d
   2b4f0:	00000000 	.word	0x00000000
   2b4f4:	00000002 	.word	0x00000002
   2b4f8:	00000003 	.word	0x00000003
   2b4fc:	00000028 	.word	0x00000028
   2b500:	00000029 	.word	0x00000029
   2b504:	00000004 	.word	0x00000004
   2b508:	00000005 	.word	0x00000005
   2b50c:	00000006 	.word	0x00000006
   2b510:	00000007 	.word	0x00000007
   2b514:	00000020 	.word	0x00000020
   2b518:	00000021 	.word	0x00000021
   2b51c:	00000022 	.word	0x00000022
   2b520:	00000023 	.word	0x00000023
   2b524:	00000024 	.word	0x00000024
   2b528:	00000025 	.word	0x00000025
   2b52c:	00000026 	.word	0x00000026
   2b530:	00000027 	.word	0x00000027
   2b534:	00000008 	.word	0x00000008
   2b538:	00000009 	.word	0x00000009
   2b53c:	0000000a 	.word	0x0000000a
   2b540:	0000000b 	.word	0x0000000b
   2b544:	0001da0a 	.word	0x0001da0a
   2b548:	0001da10 	.word	0x0001da10
   2b54c:	0001da10 	.word	0x0001da10
   2b550:	0001da10 	.word	0x0001da10
   2b554:	0001da10 	.word	0x0001da10
   2b558:	0001da10 	.word	0x0001da10
   2b55c:	0001da10 	.word	0x0001da10
   2b560:	0001da10 	.word	0x0001da10
   2b564:	0001da10 	.word	0x0001da10
   2b568:	0001da10 	.word	0x0001da10
   2b56c:	0001da10 	.word	0x0001da10
   2b570:	0001da10 	.word	0x0001da10
   2b574:	0001da10 	.word	0x0001da10
   2b578:	0001da10 	.word	0x0001da10
   2b57c:	0001da10 	.word	0x0001da10
   2b580:	0001da10 	.word	0x0001da10
   2b584:	0001d9e8 	.word	0x0001d9e8
   2b588:	0001da10 	.word	0x0001da10
   2b58c:	0001da10 	.word	0x0001da10
   2b590:	0001da10 	.word	0x0001da10
   2b594:	0001da10 	.word	0x0001da10
   2b598:	0001da10 	.word	0x0001da10
   2b59c:	0001da10 	.word	0x0001da10
   2b5a0:	0001da10 	.word	0x0001da10
   2b5a4:	0001da10 	.word	0x0001da10
   2b5a8:	0001da10 	.word	0x0001da10
   2b5ac:	0001da10 	.word	0x0001da10
   2b5b0:	0001da10 	.word	0x0001da10
   2b5b4:	0001da10 	.word	0x0001da10
   2b5b8:	0001da10 	.word	0x0001da10
   2b5bc:	0001da10 	.word	0x0001da10
   2b5c0:	0001da10 	.word	0x0001da10
   2b5c4:	0001da04 	.word	0x0001da04
   2b5c8:	0001da10 	.word	0x0001da10
   2b5cc:	0001da10 	.word	0x0001da10
   2b5d0:	0001da10 	.word	0x0001da10
   2b5d4:	0001da10 	.word	0x0001da10
   2b5d8:	0001da10 	.word	0x0001da10
   2b5dc:	0001da10 	.word	0x0001da10
   2b5e0:	0001da10 	.word	0x0001da10
   2b5e4:	0001da10 	.word	0x0001da10
   2b5e8:	0001da10 	.word	0x0001da10
   2b5ec:	0001da10 	.word	0x0001da10
   2b5f0:	0001da10 	.word	0x0001da10
   2b5f4:	0001da10 	.word	0x0001da10
   2b5f8:	0001da10 	.word	0x0001da10
   2b5fc:	0001da10 	.word	0x0001da10
   2b600:	0001da10 	.word	0x0001da10
   2b604:	0001d9fe 	.word	0x0001d9fe
   2b608:	0001d9a6 	.word	0x0001d9a6
   2b60c:	0001d9bc 	.word	0x0001d9bc
   2b610:	0001d9d2 	.word	0x0001d9d2
   2b614:	0001d98c 	.word	0x0001d98c
   2b618:	42000800 	.word	0x42000800
   2b61c:	42000c00 	.word	0x42000c00
   2b620:	42001000 	.word	0x42001000
   2b624:	42001400 	.word	0x42001400
   2b628:	42001800 	.word	0x42001800
   2b62c:	42001c00 	.word	0x42001c00
   2b630:	454c4449 	.word	0x454c4449
   2b634:	00000000 	.word	0x00000000
   2b638:	20726d54 	.word	0x20726d54
   2b63c:	00637653 	.word	0x00637653
   2b640:	000219b0 	.word	0x000219b0
   2b644:	000219b0 	.word	0x000219b0
   2b648:	000219b0 	.word	0x000219b0
   2b64c:	00021a3e 	.word	0x00021a3e
   2b650:	00021a08 	.word	0x00021a08
   2b654:	00021a32 	.word	0x00021a32
   2b658:	000219b0 	.word	0x000219b0
   2b65c:	000219b0 	.word	0x000219b0
   2b660:	00021a3e 	.word	0x00021a3e
   2b664:	00021a08 	.word	0x00021a08

0002b668 <_tcc_intflag>:
   2b668:	00000001 00000002 00000004 00000008     ................
   2b678:	00001000 00002000 00004000 00008000     ..... ...@......
   2b688:	00010000 00020000 00040000 00080000     ................
   2b698:	0c0b0a09 00000e0d 000232bc 000232bc     .........2...2..
   2b6a8:	000232b0 000232bc 000232b0 0002328a     .2...2...2...2..
   2b6b8:	0002328a 000232bc 000232bc 000232bc     .2...2...2...2..
   2b6c8:	000232bc 000232bc 000232bc 000232bc     .2...2...2...2..
   2b6d8:	000232bc 000232bc 000232bc 000232bc     .2...2...2...2..
   2b6e8:	000232bc 000232bc 000232bc 000232bc     .2...2...2...2..
   2b6f8:	000232bc 000232bc 000232bc 000232bc     .2...2...2...2..
   2b708:	000232bc 000232bc 000232bc 000232bc     .2...2...2...2..
   2b718:	000232bc 000232bc 000232bc 000232bc     .2...2...2...2..
   2b728:	000232bc 000232bc 000232bc 000232bc     .2...2...2...2..
   2b738:	000232bc 000232bc 000232bc 000232bc     .2...2...2...2..
   2b748:	000232bc 000232bc 000232bc 000232bc     .2...2...2...2..
   2b758:	000232bc 000232bc 000232bc 000232bc     .2...2...2...2..
   2b768:	000232bc 000232bc 000232bc 000232bc     .2...2...2...2..
   2b778:	000232bc 000232bc 000232bc 000232bc     .2...2...2...2..
   2b788:	000232bc 000232bc 000232bc 000232bc     .2...2...2...2..
   2b798:	000232bc 000232bc 000232b0 000232b0     .2...2...2...2..
   2b7a8:	000232c6 000232c6 000232c6 000232c6     .2...2...2...2..
   2b7b8:	41744545 50524f4d 456d752e 00024636     EEtAMORP.umE6F..
   2b7c8:	000246b0 000246b0 00024654 0002464e     .F...F..TF..NF..
   2b7d8:	0002465a 0002463c 00024660 00024696     ZF..<F..`F...F..
   2b7e8:	0002497c 000249cc 000249cc 000249c8     |I...I...I...I..
   2b7f8:	0002496e 0002498e 0002495e 000249a0     nI...I..^I...I..
   2b808:	000249b2 00024a1a 00024a48 00024a48     .I...J..HJ..HJ..
   2b818:	00024a44 00024a14 00024a20 00024a0e     DJ...J.. J...J..
   2b828:	00024a26 00024a2c 00776f70 74727173     &J..,J..pow.sqrt
	...

0002b840 <TWO52>:
   2b840:	00000000 43300000 00000000 c3300000     ......0C......0.
   2b850:	000276e4 000276b4 000276c6 00027608     .v...v...v...v..
   2b860:	000276c6 000276aa 000276c6 00027608     .v...v...v...v..
   2b870:	000276b4 000276b4 000276aa 00027608     .v...v...v...v..
   2b880:	00027610 00027610 00027610 000276cc     .v...v...v...v..
   2b890:	000276b4 000276b4 00027688 0002776c     .v...v...v..lw..
   2b8a0:	00027688 000276aa 00027688 0002776c     .v...v...v..lw..
   2b8b0:	000276b4 000276b4 000276aa 0002776c     .v...v...v..lw..
   2b8c0:	00027610 00027610 00027610 00027776     .v...v...v..vw..
   2b8d0:	00027914 00027864 00027864 00027862     .y..dx..dx..bx..
   2b8e0:	00027906 00027906 000278fc 00027862     .y...y...x..bx..
   2b8f0:	00027906 000278fc 00027906 00027862     .y...x...y..bx..
   2b900:	0002790c 0002790c 0002790c 0002799c     .y...y...y...y..
   2b910:	0002836c 0002834e 00028308 00028226     l...N.......&...
   2b920:	00028308 00028340 00028308 00028226     ....@.......&...
   2b930:	0002834e 0002834e 00028340 00028226     N...N...@...&...
   2b940:	0002821e 0002821e 0002821e 00028584     ................
   2b950:	00028bcc 00028a8c 00028a8c 00028a88     ................
   2b960:	00028ba4 00028ba4 00028b96 00028a88     ................
   2b970:	00028ba4 00028b96 00028ba4 00028a88     ................
   2b980:	00028bac 00028bac 00028bac 00028db0     ................
   2b990:	4f500043 00584953 3130002e 35343332     C.POSIX...012345
   2b9a0:	39383736 64636261 68676665 6c6b6a69     6789abcdefghijkl
   2b9b0:	706f6e6d 74737271 78777675 00007a79              mnopqrstuvwxyz.

0002b9bf <_ctype_>:
   2b9bf:	20202000 20202020 28282020 20282828     .         ((((( 
   2b9cf:	20202020 20202020 20202020 20202020                     
   2b9df:	10108820 10101010 10101010 10101010      ...............
   2b9ef:	04040410 04040404 10040404 10101010     ................
   2b9ff:	41411010 41414141 01010101 01010101     ..AAAAAA........
   2ba0f:	01010101 01010101 01010101 10101010     ................
   2ba1f:	42421010 42424242 02020202 02020202     ..BBBBBB........
   2ba2f:	02020202 02020202 02020202 10101010     ................
   2ba3f:	00000020 00000000 00000000 00000000      ...............
	...
   2babf:	302d2300 6800202b 65004c6c 46456766     .#-0+ .hlL.efgEF
   2bacf:	31300047 35343332 39383736 44434241     G.0123456789ABCD
   2badf:	30004645 34333231 38373635 63626139     EF.0123456789abc
   2baef:	00666564 c0b5f800                                def..

0002baf4 <_init>:
   2baf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2baf6:	46c0      	nop			; (mov r8, r8)
   2baf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2bafa:	bc08      	pop	{r3}
   2bafc:	469e      	mov	lr, r3
   2bafe:	4770      	bx	lr

0002bb00 <__init_array_start>:
   2bb00:	000100dd 	.word	0x000100dd

0002bb04 <_fini>:
   2bb04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bb06:	46c0      	nop			; (mov r8, r8)
   2bb08:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2bb0a:	bc08      	pop	{r3}
   2bb0c:	469e      	mov	lr, r3
   2bb0e:	4770      	bx	lr

0002bb10 <__fini_array_start>:
   2bb10:	000100b5 	.word	0x000100b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <ucharPhase_Seq_Check_Flag>:
2000000c:	0101                                             .

2000000d <ucharVoltage_Detect_Timer_Counter>:
2000000d:	0001 aa00                                        ...

20000010 <uxCriticalNesting>:
20000010:	aaaa aaaa                                   ....

20000014 <_events_inst>:
20000014:	0000 0000 000c 0000 0000 0000 0000 0000     ................
20000024:	0000 0000                                   ....

20000028 <g_interrupt_enabled>:
20000028:	0101                                             .

20000029 <__fdlib_version>:
20000029:	0001 3000                                        ...

2000002c <_impure_ptr>:
2000002c:	0030 2000                                   0.. 

20000030 <impure_data>:
	...

20000090 <__global_locale>:
20000090:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000b0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000d0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000f0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000110:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000130:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000150:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000170:	9e4d 0002 985d 0002 0000 0000 b9bf 0002     M...]...........
20000180:	b998 0002 bac5 0002 bac5 0002 bac5 0002     ................
20000190:	bac5 0002 bac5 0002 bac5 0002 bac5 0002     ................
200001a0:	bac5 0002 bac5 0002 ffff ffff ffff ffff     ................
200001b0:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
200001d8:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
