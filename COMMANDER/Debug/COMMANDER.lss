
COMMANDER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001b0bc  00010000  00010000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0002b0bc  0002b0bc  0002b0bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000001fc  20000000  0002b0c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000078c  20000200  0002b2d0  00030200  2**4
                  ALLOC
  4 .stack        00002004  2000098c  0002ba5c  00030200  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY
  7 .debug_info   0007f905  00000000  00000000  0003027d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00008abb  00000000  00000000  000afb82  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000aa99  00000000  00000000  000b863d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001d88  00000000  00000000  000c30d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001b90  00000000  00000000  000c4e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000287d2  00000000  00000000  000c69ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00027a51  00000000  00000000  000ef1c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a27e8  00000000  00000000  00116c11  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00007414  00000000  00000000  001b93fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00010000 <exception_table>:
   10000:	90 29 00 20 29 4e 02 00 21 4f 02 00 21 4f 02 00     .). )N..!O..!O..
	...
   1002c:	0d ed 01 00 00 00 00 00 00 00 00 00 41 ee 01 00     ............A...
   1003c:	89 ee 01 00 21 4f 02 00 21 4f 02 00 81 15 02 00     ....!O..!O......
   1004c:	89 e6 01 00 a9 25 02 00 21 4f 02 00 21 dc 01 00     .....%..!O..!...
   1005c:	21 4f 02 00 15 26 02 00 a1 23 02 00 b9 23 02 00     !O...&...#...#..
   1006c:	d1 23 02 00 e9 23 02 00 01 24 02 00 19 24 02 00     .#...#...$...$..
   1007c:	a5 15 02 00 b9 15 02 00 cd 15 02 00 5d 16 02 00     ............]...
   1008c:	71 16 02 00 85 16 02 00 99 16 02 00 ad 16 02 00     q...............
   1009c:	01 da 01 00 6d 29 02 00 e5 db 01 00 21 4f 02 00     ....m)......!O..
   100ac:	21 4f 02 00 00 00 00 00                             !O......

000100b4 <__do_global_dtors_aux>:
   100b4:	b510      	push	{r4, lr}
   100b6:	4c06      	ldr	r4, [pc, #24]	; (100d0 <__do_global_dtors_aux+0x1c>)
   100b8:	7823      	ldrb	r3, [r4, #0]
   100ba:	2b00      	cmp	r3, #0
   100bc:	d107      	bne.n	100ce <__do_global_dtors_aux+0x1a>
   100be:	4b05      	ldr	r3, [pc, #20]	; (100d4 <__do_global_dtors_aux+0x20>)
   100c0:	2b00      	cmp	r3, #0
   100c2:	d002      	beq.n	100ca <__do_global_dtors_aux+0x16>
   100c4:	4804      	ldr	r0, [pc, #16]	; (100d8 <__do_global_dtors_aux+0x24>)
   100c6:	e000      	b.n	100ca <__do_global_dtors_aux+0x16>
   100c8:	bf00      	nop
   100ca:	2301      	movs	r3, #1
   100cc:	7023      	strb	r3, [r4, #0]
   100ce:	bd10      	pop	{r4, pc}
   100d0:	20000200 	.word	0x20000200
   100d4:	00000000 	.word	0x00000000
   100d8:	0002b0c4 	.word	0x0002b0c4

000100dc <frame_dummy>:
   100dc:	4b08      	ldr	r3, [pc, #32]	; (10100 <frame_dummy+0x24>)
   100de:	b510      	push	{r4, lr}
   100e0:	2b00      	cmp	r3, #0
   100e2:	d003      	beq.n	100ec <frame_dummy+0x10>
   100e4:	4907      	ldr	r1, [pc, #28]	; (10104 <frame_dummy+0x28>)
   100e6:	4808      	ldr	r0, [pc, #32]	; (10108 <frame_dummy+0x2c>)
   100e8:	e000      	b.n	100ec <frame_dummy+0x10>
   100ea:	bf00      	nop
   100ec:	4807      	ldr	r0, [pc, #28]	; (1010c <frame_dummy+0x30>)
   100ee:	6803      	ldr	r3, [r0, #0]
   100f0:	2b00      	cmp	r3, #0
   100f2:	d100      	bne.n	100f6 <frame_dummy+0x1a>
   100f4:	bd10      	pop	{r4, pc}
   100f6:	4b06      	ldr	r3, [pc, #24]	; (10110 <frame_dummy+0x34>)
   100f8:	2b00      	cmp	r3, #0
   100fa:	d0fb      	beq.n	100f4 <frame_dummy+0x18>
   100fc:	4798      	blx	r3
   100fe:	e7f9      	b.n	100f4 <frame_dummy+0x18>
   10100:	00000000 	.word	0x00000000
   10104:	20000204 	.word	0x20000204
   10108:	0002b0c4 	.word	0x0002b0c4
   1010c:	0002b0c4 	.word	0x0002b0c4
   10110:	00000000 	.word	0x00000000

00010114 <configure_eeprom>:
#include "eeprom_driver.h"

void configure_eeprom(void)
{
   10114:	b590      	push	{r4, r7, lr}
   10116:	b083      	sub	sp, #12
   10118:	af00      	add	r7, sp, #0
	enum status_code error_code = eeprom_emulator_init();
   1011a:	1dfc      	adds	r4, r7, #7
   1011c:	4b0a      	ldr	r3, [pc, #40]	; (10148 <configure_eeprom+0x34>)
   1011e:	4798      	blx	r3
   10120:	0003      	movs	r3, r0
   10122:	7023      	strb	r3, [r4, #0]
	if (error_code == STATUS_ERR_NO_MEMORY)
   10124:	1dfb      	adds	r3, r7, #7
   10126:	781b      	ldrb	r3, [r3, #0]
   10128:	2b16      	cmp	r3, #22
   1012a:	d100      	bne.n	1012e <configure_eeprom+0x1a>
	{
		while (true);
   1012c:	e7fe      	b.n	1012c <configure_eeprom+0x18>
	}
	else if (error_code != STATUS_OK)
   1012e:	1dfb      	adds	r3, r7, #7
   10130:	781b      	ldrb	r3, [r3, #0]
   10132:	2b00      	cmp	r3, #0
   10134:	d003      	beq.n	1013e <configure_eeprom+0x2a>
	{
		eeprom_emulator_erase_memory();
   10136:	4b05      	ldr	r3, [pc, #20]	; (1014c <configure_eeprom+0x38>)
   10138:	4798      	blx	r3
		eeprom_emulator_init();
   1013a:	4b03      	ldr	r3, [pc, #12]	; (10148 <configure_eeprom+0x34>)
   1013c:	4798      	blx	r3
	}
}
   1013e:	46c0      	nop			; (mov r8, r8)
   10140:	46bd      	mov	sp, r7
   10142:	b003      	add	sp, #12
   10144:	bd90      	pop	{r4, r7, pc}
   10146:	46c0      	nop			; (mov r8, r8)
   10148:	000239e5 	.word	0x000239e5
   1014c:	00023acd 	.word	0x00023acd

00010150 <init_eeprom>:

void init_eeprom(void)
{
   10150:	b580      	push	{r7, lr}
   10152:	af00      	add	r7, sp, #0
	configure_eeprom();
   10154:	4bf6      	ldr	r3, [pc, #984]	; (10530 <init_eeprom+0x3e0>)
   10156:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(BOOTLOADER_PARAMETER_PAGE, page_data);
   10158:	4bf6      	ldr	r3, [pc, #984]	; (10534 <init_eeprom+0x3e4>)
   1015a:	0019      	movs	r1, r3
   1015c:	2000      	movs	r0, #0
   1015e:	4bf6      	ldr	r3, [pc, #984]	; (10538 <init_eeprom+0x3e8>)
   10160:	4798      	blx	r3
	memcpy(&bootloader_parameter,page_data,sizeof(bootloader_parameter));
   10162:	49f4      	ldr	r1, [pc, #976]	; (10534 <init_eeprom+0x3e4>)
   10164:	4bf5      	ldr	r3, [pc, #980]	; (1053c <init_eeprom+0x3ec>)
   10166:	221c      	movs	r2, #28
   10168:	0018      	movs	r0, r3
   1016a:	4bf5      	ldr	r3, [pc, #980]	; (10540 <init_eeprom+0x3f0>)
   1016c:	4798      	blx	r3
	if (bootloader_parameter.ucharFirst_Time_Write != 85)
   1016e:	4bf3      	ldr	r3, [pc, #972]	; (1053c <init_eeprom+0x3ec>)
   10170:	791b      	ldrb	r3, [r3, #4]
   10172:	2b55      	cmp	r3, #85	; 0x55
   10174:	d02c      	beq.n	101d0 <init_eeprom+0x80>
	{
		bootloader_parameter.ulongintDiscard		   = 0;
   10176:	4bf1      	ldr	r3, [pc, #964]	; (1053c <init_eeprom+0x3ec>)
   10178:	2200      	movs	r2, #0
   1017a:	601a      	str	r2, [r3, #0]
		bootloader_parameter.ucharFirst_Time_Write	   = 85;
   1017c:	4bef      	ldr	r3, [pc, #956]	; (1053c <init_eeprom+0x3ec>)
   1017e:	2255      	movs	r2, #85	; 0x55
   10180:	711a      	strb	r2, [r3, #4]
		bootloader_parameter.firmware_download_pending = false;
   10182:	4bee      	ldr	r3, [pc, #952]	; (1053c <init_eeprom+0x3ec>)
   10184:	2200      	movs	r2, #0
   10186:	715a      	strb	r2, [r3, #5]
		bootloader_parameter.firmware_update_process_completed = false;
   10188:	4bec      	ldr	r3, [pc, #944]	; (1053c <init_eeprom+0x3ec>)
   1018a:	2200      	movs	r2, #0
   1018c:	719a      	strb	r2, [r3, #6]
		bootloader_parameter.firmware_update_error_code = 0;
   1018e:	4beb      	ldr	r3, [pc, #940]	; (1053c <init_eeprom+0x3ec>)
   10190:	2200      	movs	r2, #0
   10192:	71da      	strb	r2, [r3, #7]
		bootloader_parameter.retries= 0;
   10194:	4be9      	ldr	r3, [pc, #932]	; (1053c <init_eeprom+0x3ec>)
   10196:	2200      	movs	r2, #0
   10198:	721a      	strb	r2, [r3, #8]
		
		
		memset(bootloader_parameter.firmware_updater_mobile_no, '\0', sizeof(bootloader_parameter.firmware_updater_mobile_no));
   1019a:	4bea      	ldr	r3, [pc, #936]	; (10544 <init_eeprom+0x3f4>)
   1019c:	2210      	movs	r2, #16
   1019e:	2100      	movs	r1, #0
   101a0:	0018      	movs	r0, r3
   101a2:	4be9      	ldr	r3, [pc, #932]	; (10548 <init_eeprom+0x3f8>)
   101a4:	4798      	blx	r3
		strcpy(bootloader_parameter.firmware_updater_mobile_no,"0000000000");
   101a6:	4be7      	ldr	r3, [pc, #924]	; (10544 <init_eeprom+0x3f4>)
   101a8:	4ae8      	ldr	r2, [pc, #928]	; (1054c <init_eeprom+0x3fc>)
   101aa:	ca03      	ldmia	r2!, {r0, r1}
   101ac:	c303      	stmia	r3!, {r0, r1}
   101ae:	8811      	ldrh	r1, [r2, #0]
   101b0:	8019      	strh	r1, [r3, #0]
   101b2:	7892      	ldrb	r2, [r2, #2]
   101b4:	709a      	strb	r2, [r3, #2]
		
		memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
   101b6:	49e1      	ldr	r1, [pc, #900]	; (1053c <init_eeprom+0x3ec>)
   101b8:	4bde      	ldr	r3, [pc, #888]	; (10534 <init_eeprom+0x3e4>)
   101ba:	221c      	movs	r2, #28
   101bc:	0018      	movs	r0, r3
   101be:	4be0      	ldr	r3, [pc, #896]	; (10540 <init_eeprom+0x3f0>)
   101c0:	4798      	blx	r3
		eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
   101c2:	4bdc      	ldr	r3, [pc, #880]	; (10534 <init_eeprom+0x3e4>)
   101c4:	0019      	movs	r1, r3
   101c6:	2000      	movs	r0, #0
   101c8:	4be1      	ldr	r3, [pc, #900]	; (10550 <init_eeprom+0x400>)
   101ca:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   101cc:	4be1      	ldr	r3, [pc, #900]	; (10554 <init_eeprom+0x404>)
   101ce:	4798      	blx	r3
	}
	
	eeprom_emulator_read_page(FTP_PATH_PARAMETER_PAGE, page_data);
   101d0:	4bd8      	ldr	r3, [pc, #864]	; (10534 <init_eeprom+0x3e4>)
   101d2:	0019      	movs	r1, r3
   101d4:	2001      	movs	r0, #1
   101d6:	4bd8      	ldr	r3, [pc, #864]	; (10538 <init_eeprom+0x3e8>)
   101d8:	4798      	blx	r3
	memcpy(&ftp_path_parameter,page_data,sizeof(ftp_path_parameter));
   101da:	49d6      	ldr	r1, [pc, #856]	; (10534 <init_eeprom+0x3e4>)
   101dc:	4bde      	ldr	r3, [pc, #888]	; (10558 <init_eeprom+0x408>)
   101de:	2238      	movs	r2, #56	; 0x38
   101e0:	0018      	movs	r0, r3
   101e2:	4bd7      	ldr	r3, [pc, #860]	; (10540 <init_eeprom+0x3f0>)
   101e4:	4798      	blx	r3
	if (ftp_path_parameter.ucharFirst_Time_Write !=85)
   101e6:	4bdc      	ldr	r3, [pc, #880]	; (10558 <init_eeprom+0x408>)
   101e8:	791b      	ldrb	r3, [r3, #4]
   101ea:	2b55      	cmp	r3, #85	; 0x55
   101ec:	d02e      	beq.n	1024c <init_eeprom+0xfc>
	{
		ftp_path_parameter.ulongintDiscard			   = 0;
   101ee:	4bda      	ldr	r3, [pc, #872]	; (10558 <init_eeprom+0x408>)
   101f0:	2200      	movs	r2, #0
   101f2:	601a      	str	r2, [r3, #0]
		ftp_path_parameter.ucharFirst_Time_Write	   = 85;
   101f4:	4bd8      	ldr	r3, [pc, #864]	; (10558 <init_eeprom+0x408>)
   101f6:	2255      	movs	r2, #85	; 0x55
   101f8:	711a      	strb	r2, [r3, #4]
		
		memset(ftp_path_parameter.ftp_address, '\0', sizeof(ftp_path_parameter.ftp_address));
   101fa:	4bd8      	ldr	r3, [pc, #864]	; (1055c <init_eeprom+0x40c>)
   101fc:	221e      	movs	r2, #30
   101fe:	2100      	movs	r1, #0
   10200:	0018      	movs	r0, r3
   10202:	4bd1      	ldr	r3, [pc, #836]	; (10548 <init_eeprom+0x3f8>)
   10204:	4798      	blx	r3
		strcpy(ftp_path_parameter.ftp_address,"ftp.drivehq.com");
   10206:	4ad5      	ldr	r2, [pc, #852]	; (1055c <init_eeprom+0x40c>)
   10208:	4bd5      	ldr	r3, [pc, #852]	; (10560 <init_eeprom+0x410>)
   1020a:	0010      	movs	r0, r2
   1020c:	0019      	movs	r1, r3
   1020e:	2310      	movs	r3, #16
   10210:	001a      	movs	r2, r3
   10212:	4bcb      	ldr	r3, [pc, #812]	; (10540 <init_eeprom+0x3f0>)
   10214:	4798      	blx	r3
		
		memset(ftp_path_parameter.ftp_path, '\0', sizeof(ftp_path_parameter.ftp_path));
   10216:	4bd3      	ldr	r3, [pc, #844]	; (10564 <init_eeprom+0x414>)
   10218:	2214      	movs	r2, #20
   1021a:	2100      	movs	r1, #0
   1021c:	0018      	movs	r0, r3
   1021e:	4bca      	ldr	r3, [pc, #808]	; (10548 <init_eeprom+0x3f8>)
   10220:	4798      	blx	r3
		strcpy(ftp_path_parameter.ftp_path,"/firmware/");
   10222:	4ad0      	ldr	r2, [pc, #832]	; (10564 <init_eeprom+0x414>)
   10224:	4bd0      	ldr	r3, [pc, #832]	; (10568 <init_eeprom+0x418>)
   10226:	0010      	movs	r0, r2
   10228:	0019      	movs	r1, r3
   1022a:	230b      	movs	r3, #11
   1022c:	001a      	movs	r2, r3
   1022e:	4bc4      	ldr	r3, [pc, #784]	; (10540 <init_eeprom+0x3f0>)
   10230:	4798      	blx	r3
		
		memcpy(page_data,&ftp_path_parameter,sizeof(ftp_path_parameter));
   10232:	49c9      	ldr	r1, [pc, #804]	; (10558 <init_eeprom+0x408>)
   10234:	4bbf      	ldr	r3, [pc, #764]	; (10534 <init_eeprom+0x3e4>)
   10236:	2238      	movs	r2, #56	; 0x38
   10238:	0018      	movs	r0, r3
   1023a:	4bc1      	ldr	r3, [pc, #772]	; (10540 <init_eeprom+0x3f0>)
   1023c:	4798      	blx	r3
		eeprom_emulator_write_page(FTP_PATH_PARAMETER_PAGE, page_data);
   1023e:	4bbd      	ldr	r3, [pc, #756]	; (10534 <init_eeprom+0x3e4>)
   10240:	0019      	movs	r1, r3
   10242:	2001      	movs	r0, #1
   10244:	4bc2      	ldr	r3, [pc, #776]	; (10550 <init_eeprom+0x400>)
   10246:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   10248:	4bc2      	ldr	r3, [pc, #776]	; (10554 <init_eeprom+0x404>)
   1024a:	4798      	blx	r3
	}
	
	eeprom_emulator_read_page(FTP_USER_PARAMETER_PAGE, page_data);
   1024c:	4bb9      	ldr	r3, [pc, #740]	; (10534 <init_eeprom+0x3e4>)
   1024e:	0019      	movs	r1, r3
   10250:	2002      	movs	r0, #2
   10252:	4bb9      	ldr	r3, [pc, #740]	; (10538 <init_eeprom+0x3e8>)
   10254:	4798      	blx	r3
	memcpy(&ftp_user_parameter,page_data,sizeof(ftp_user_parameter));
   10256:	49b7      	ldr	r1, [pc, #732]	; (10534 <init_eeprom+0x3e4>)
   10258:	4bc4      	ldr	r3, [pc, #784]	; (1056c <init_eeprom+0x41c>)
   1025a:	2238      	movs	r2, #56	; 0x38
   1025c:	0018      	movs	r0, r3
   1025e:	4bb8      	ldr	r3, [pc, #736]	; (10540 <init_eeprom+0x3f0>)
   10260:	4798      	blx	r3
	if (ftp_user_parameter.ucharFirst_Time_Write !=85)
   10262:	4bc2      	ldr	r3, [pc, #776]	; (1056c <init_eeprom+0x41c>)
   10264:	791b      	ldrb	r3, [r3, #4]
   10266:	2b55      	cmp	r3, #85	; 0x55
   10268:	d03c      	beq.n	102e4 <init_eeprom+0x194>
	{
		ftp_user_parameter.ulongintDiscard			   = 0;
   1026a:	4bc0      	ldr	r3, [pc, #768]	; (1056c <init_eeprom+0x41c>)
   1026c:	2200      	movs	r2, #0
   1026e:	601a      	str	r2, [r3, #0]
		ftp_user_parameter.ucharFirst_Time_Write	   = 85;
   10270:	4bbe      	ldr	r3, [pc, #760]	; (1056c <init_eeprom+0x41c>)
   10272:	2255      	movs	r2, #85	; 0x55
   10274:	711a      	strb	r2, [r3, #4]
		
		memset(ftp_user_parameter.ftp_username, '\0', sizeof(ftp_user_parameter.ftp_username));
   10276:	4bbe      	ldr	r3, [pc, #760]	; (10570 <init_eeprom+0x420>)
   10278:	2210      	movs	r2, #16
   1027a:	2100      	movs	r1, #0
   1027c:	0018      	movs	r0, r3
   1027e:	4bb2      	ldr	r3, [pc, #712]	; (10548 <init_eeprom+0x3f8>)
   10280:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_username,"rahulnrathodkcl");
   10282:	4bba      	ldr	r3, [pc, #744]	; (1056c <init_eeprom+0x41c>)
   10284:	2205      	movs	r2, #5
   10286:	49bb      	ldr	r1, [pc, #748]	; (10574 <init_eeprom+0x424>)
   10288:	189b      	adds	r3, r3, r2
   1028a:	2210      	movs	r2, #16
   1028c:	0018      	movs	r0, r3
   1028e:	4bac      	ldr	r3, [pc, #688]	; (10540 <init_eeprom+0x3f0>)
   10290:	4798      	blx	r3
		
		memset(ftp_user_parameter.ftp_filename, '\0', sizeof(ftp_user_parameter.ftp_password));
   10292:	4bb9      	ldr	r3, [pc, #740]	; (10578 <init_eeprom+0x428>)
   10294:	2210      	movs	r2, #16
   10296:	2100      	movs	r1, #0
   10298:	0018      	movs	r0, r3
   1029a:	4bab      	ldr	r3, [pc, #684]	; (10548 <init_eeprom+0x3f8>)
   1029c:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_password,"123456789");
   1029e:	4ab7      	ldr	r2, [pc, #732]	; (1057c <init_eeprom+0x42c>)
   102a0:	4bb7      	ldr	r3, [pc, #732]	; (10580 <init_eeprom+0x430>)
   102a2:	0010      	movs	r0, r2
   102a4:	0019      	movs	r1, r3
   102a6:	230a      	movs	r3, #10
   102a8:	001a      	movs	r2, r3
   102aa:	4ba5      	ldr	r3, [pc, #660]	; (10540 <init_eeprom+0x3f0>)
   102ac:	4798      	blx	r3
		
		memset(ftp_user_parameter.ftp_filename, '\0', sizeof(ftp_user_parameter.ftp_filename));
   102ae:	4bb2      	ldr	r3, [pc, #712]	; (10578 <init_eeprom+0x428>)
   102b0:	2210      	movs	r2, #16
   102b2:	2100      	movs	r1, #0
   102b4:	0018      	movs	r0, r3
   102b6:	4ba4      	ldr	r3, [pc, #656]	; (10548 <init_eeprom+0x3f8>)
   102b8:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_filename,"firmware.bin");
   102ba:	4aaf      	ldr	r2, [pc, #700]	; (10578 <init_eeprom+0x428>)
   102bc:	4bb1      	ldr	r3, [pc, #708]	; (10584 <init_eeprom+0x434>)
   102be:	0010      	movs	r0, r2
   102c0:	0019      	movs	r1, r3
   102c2:	230d      	movs	r3, #13
   102c4:	001a      	movs	r2, r3
   102c6:	4b9e      	ldr	r3, [pc, #632]	; (10540 <init_eeprom+0x3f0>)
   102c8:	4798      	blx	r3
		
		memcpy(page_data,&ftp_user_parameter,sizeof(ftp_user_parameter));
   102ca:	49a8      	ldr	r1, [pc, #672]	; (1056c <init_eeprom+0x41c>)
   102cc:	4b99      	ldr	r3, [pc, #612]	; (10534 <init_eeprom+0x3e4>)
   102ce:	2238      	movs	r2, #56	; 0x38
   102d0:	0018      	movs	r0, r3
   102d2:	4b9b      	ldr	r3, [pc, #620]	; (10540 <init_eeprom+0x3f0>)
   102d4:	4798      	blx	r3
		eeprom_emulator_write_page(FTP_USER_PARAMETER_PAGE, page_data);
   102d6:	4b97      	ldr	r3, [pc, #604]	; (10534 <init_eeprom+0x3e4>)
   102d8:	0019      	movs	r1, r3
   102da:	2002      	movs	r0, #2
   102dc:	4b9c      	ldr	r3, [pc, #624]	; (10550 <init_eeprom+0x400>)
   102de:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   102e0:	4b9c      	ldr	r3, [pc, #624]	; (10554 <init_eeprom+0x404>)
   102e2:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(USER_COUNTER_PAGE, page_data);
   102e4:	4b93      	ldr	r3, [pc, #588]	; (10534 <init_eeprom+0x3e4>)
   102e6:	0019      	movs	r1, r3
   102e8:	2008      	movs	r0, #8
   102ea:	4b93      	ldr	r3, [pc, #588]	; (10538 <init_eeprom+0x3e8>)
   102ec:	4798      	blx	r3
	memcpy(&user_count_struct,page_data,sizeof(user_count_struct));
   102ee:	4aa6      	ldr	r2, [pc, #664]	; (10588 <init_eeprom+0x438>)
   102f0:	4b90      	ldr	r3, [pc, #576]	; (10534 <init_eeprom+0x3e4>)
   102f2:	0010      	movs	r0, r2
   102f4:	0019      	movs	r1, r3
   102f6:	2308      	movs	r3, #8
   102f8:	001a      	movs	r2, r3
   102fa:	4b91      	ldr	r3, [pc, #580]	; (10540 <init_eeprom+0x3f0>)
   102fc:	4798      	blx	r3
	if (user_count_struct.u8tfirst_time_write_ee != 85)
   102fe:	4ba2      	ldr	r3, [pc, #648]	; (10588 <init_eeprom+0x438>)
   10300:	781b      	ldrb	r3, [r3, #0]
   10302:	2b55      	cmp	r3, #85	; 0x55
   10304:	d01d      	beq.n	10342 <init_eeprom+0x1f2>
	{
		user_count_struct.u8tfirst_time_write_ee = 85;
   10306:	4ba0      	ldr	r3, [pc, #640]	; (10588 <init_eeprom+0x438>)
   10308:	2255      	movs	r2, #85	; 0x55
   1030a:	701a      	strb	r2, [r3, #0]
		user_count_struct.total_user_no_count    = 15;
   1030c:	4b9e      	ldr	r3, [pc, #632]	; (10588 <init_eeprom+0x438>)
   1030e:	220f      	movs	r2, #15
   10310:	705a      	strb	r2, [r3, #1]
		user_count_struct.current_user_no_count  = 0;
   10312:	4b9d      	ldr	r3, [pc, #628]	; (10588 <init_eeprom+0x438>)
   10314:	2200      	movs	r2, #0
   10316:	709a      	strb	r2, [r3, #2]
		user_count_struct.primaryNumberIndex = 0;
   10318:	4b9b      	ldr	r3, [pc, #620]	; (10588 <init_eeprom+0x438>)
   1031a:	2200      	movs	r2, #0
   1031c:	70da      	strb	r2, [r3, #3]
		user_count_struct.secondaryNumberIndex = 1;
   1031e:	4b9a      	ldr	r3, [pc, #616]	; (10588 <init_eeprom+0x438>)
   10320:	2201      	movs	r2, #1
   10322:	711a      	strb	r2, [r3, #4]
		
		
		memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   10324:	4a83      	ldr	r2, [pc, #524]	; (10534 <init_eeprom+0x3e4>)
   10326:	4b98      	ldr	r3, [pc, #608]	; (10588 <init_eeprom+0x438>)
   10328:	0010      	movs	r0, r2
   1032a:	0019      	movs	r1, r3
   1032c:	2308      	movs	r3, #8
   1032e:	001a      	movs	r2, r3
   10330:	4b83      	ldr	r3, [pc, #524]	; (10540 <init_eeprom+0x3f0>)
   10332:	4798      	blx	r3
		eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   10334:	4b7f      	ldr	r3, [pc, #508]	; (10534 <init_eeprom+0x3e4>)
   10336:	0019      	movs	r1, r3
   10338:	2008      	movs	r0, #8
   1033a:	4b85      	ldr	r3, [pc, #532]	; (10550 <init_eeprom+0x400>)
   1033c:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   1033e:	4b85      	ldr	r3, [pc, #532]	; (10554 <init_eeprom+0x404>)
   10340:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	config_mobile_no_ee(ADMIN_1_MOBILE_NUMBER_PAGE,"7041196959");
   10342:	4b92      	ldr	r3, [pc, #584]	; (1058c <init_eeprom+0x43c>)
   10344:	0019      	movs	r1, r3
   10346:	2003      	movs	r0, #3
   10348:	4b91      	ldr	r3, [pc, #580]	; (10590 <init_eeprom+0x440>)
   1034a:	4798      	blx	r3
	config_mobile_no_ee(ADMIN_2_MOBILE_NUMBER_PAGE,"7698439201");
   1034c:	4b91      	ldr	r3, [pc, #580]	; (10594 <init_eeprom+0x444>)
   1034e:	0019      	movs	r1, r3
   10350:	2004      	movs	r0, #4
   10352:	4b8f      	ldr	r3, [pc, #572]	; (10590 <init_eeprom+0x440>)
   10354:	4798      	blx	r3
	config_mobile_no_ee(ADMIN_3_MOBILE_NUMBER_PAGE,"7383614214");
   10356:	4b90      	ldr	r3, [pc, #576]	; (10598 <init_eeprom+0x448>)
   10358:	0019      	movs	r1, r3
   1035a:	2005      	movs	r0, #5
   1035c:	4b8c      	ldr	r3, [pc, #560]	; (10590 <init_eeprom+0x440>)
   1035e:	4798      	blx	r3
	config_mobile_no_ee(ADMIN_4_MOBILE_NUMBER_PAGE,"7383622678");
   10360:	4b8e      	ldr	r3, [pc, #568]	; (1059c <init_eeprom+0x44c>)
   10362:	0019      	movs	r1, r3
   10364:	2006      	movs	r0, #6
   10366:	4b8a      	ldr	r3, [pc, #552]	; (10590 <init_eeprom+0x440>)
   10368:	4798      	blx	r3
	//config_mobile_no_ee(ADMIN_5_MOBILE_NUMBER_PAGE,"9586135978");
	config_mobile_no_ee(ADMIN_5_MOBILE_NUMBER_PAGE,"9586135978");
   1036a:	4b8d      	ldr	r3, [pc, #564]	; (105a0 <init_eeprom+0x450>)
   1036c:	0019      	movs	r1, r3
   1036e:	2007      	movs	r0, #7
   10370:	4b87      	ldr	r3, [pc, #540]	; (10590 <init_eeprom+0x440>)
   10372:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_mobile_no_ee(USER_1_MOBILE_NUMBER_PAGE ,"0000000000");
   10374:	4b75      	ldr	r3, [pc, #468]	; (1054c <init_eeprom+0x3fc>)
   10376:	0019      	movs	r1, r3
   10378:	2009      	movs	r0, #9
   1037a:	4b85      	ldr	r3, [pc, #532]	; (10590 <init_eeprom+0x440>)
   1037c:	4798      	blx	r3
	config_mobile_no_ee(USER_2_MOBILE_NUMBER_PAGE ,"0000000000");
   1037e:	4b73      	ldr	r3, [pc, #460]	; (1054c <init_eeprom+0x3fc>)
   10380:	0019      	movs	r1, r3
   10382:	200a      	movs	r0, #10
   10384:	4b82      	ldr	r3, [pc, #520]	; (10590 <init_eeprom+0x440>)
   10386:	4798      	blx	r3
	config_mobile_no_ee(USER_3_MOBILE_NUMBER_PAGE ,"0000000000");
   10388:	4b70      	ldr	r3, [pc, #448]	; (1054c <init_eeprom+0x3fc>)
   1038a:	0019      	movs	r1, r3
   1038c:	200b      	movs	r0, #11
   1038e:	4b80      	ldr	r3, [pc, #512]	; (10590 <init_eeprom+0x440>)
   10390:	4798      	blx	r3
	config_mobile_no_ee(USER_4_MOBILE_NUMBER_PAGE ,"0000000000");
   10392:	4b6e      	ldr	r3, [pc, #440]	; (1054c <init_eeprom+0x3fc>)
   10394:	0019      	movs	r1, r3
   10396:	200c      	movs	r0, #12
   10398:	4b7d      	ldr	r3, [pc, #500]	; (10590 <init_eeprom+0x440>)
   1039a:	4798      	blx	r3
	config_mobile_no_ee(USER_5_MOBILE_NUMBER_PAGE ,"0000000000");
   1039c:	4b6b      	ldr	r3, [pc, #428]	; (1054c <init_eeprom+0x3fc>)
   1039e:	0019      	movs	r1, r3
   103a0:	200d      	movs	r0, #13
   103a2:	4b7b      	ldr	r3, [pc, #492]	; (10590 <init_eeprom+0x440>)
   103a4:	4798      	blx	r3
	config_mobile_no_ee(USER_6_MOBILE_NUMBER_PAGE ,"0000000000");
   103a6:	4b69      	ldr	r3, [pc, #420]	; (1054c <init_eeprom+0x3fc>)
   103a8:	0019      	movs	r1, r3
   103aa:	200e      	movs	r0, #14
   103ac:	4b78      	ldr	r3, [pc, #480]	; (10590 <init_eeprom+0x440>)
   103ae:	4798      	blx	r3
	config_mobile_no_ee(USER_7_MOBILE_NUMBER_PAGE ,"0000000000");
   103b0:	4b66      	ldr	r3, [pc, #408]	; (1054c <init_eeprom+0x3fc>)
   103b2:	0019      	movs	r1, r3
   103b4:	200f      	movs	r0, #15
   103b6:	4b76      	ldr	r3, [pc, #472]	; (10590 <init_eeprom+0x440>)
   103b8:	4798      	blx	r3
	config_mobile_no_ee(USER_8_MOBILE_NUMBER_PAGE ,"0000000000");
   103ba:	4b64      	ldr	r3, [pc, #400]	; (1054c <init_eeprom+0x3fc>)
   103bc:	0019      	movs	r1, r3
   103be:	2010      	movs	r0, #16
   103c0:	4b73      	ldr	r3, [pc, #460]	; (10590 <init_eeprom+0x440>)
   103c2:	4798      	blx	r3
	config_mobile_no_ee(USER_9_MOBILE_NUMBER_PAGE ,"0000000000");
   103c4:	4b61      	ldr	r3, [pc, #388]	; (1054c <init_eeprom+0x3fc>)
   103c6:	0019      	movs	r1, r3
   103c8:	2011      	movs	r0, #17
   103ca:	4b71      	ldr	r3, [pc, #452]	; (10590 <init_eeprom+0x440>)
   103cc:	4798      	blx	r3
	config_mobile_no_ee(USER_10_MOBILE_NUMBER_PAGE,"0000000000");
   103ce:	4b5f      	ldr	r3, [pc, #380]	; (1054c <init_eeprom+0x3fc>)
   103d0:	0019      	movs	r1, r3
   103d2:	2012      	movs	r0, #18
   103d4:	4b6e      	ldr	r3, [pc, #440]	; (10590 <init_eeprom+0x440>)
   103d6:	4798      	blx	r3
	config_mobile_no_ee(USER_11_MOBILE_NUMBER_PAGE,"0000000000");
   103d8:	4b5c      	ldr	r3, [pc, #368]	; (1054c <init_eeprom+0x3fc>)
   103da:	0019      	movs	r1, r3
   103dc:	2013      	movs	r0, #19
   103de:	4b6c      	ldr	r3, [pc, #432]	; (10590 <init_eeprom+0x440>)
   103e0:	4798      	blx	r3
	config_mobile_no_ee(USER_12_MOBILE_NUMBER_PAGE,"0000000000");
   103e2:	4b5a      	ldr	r3, [pc, #360]	; (1054c <init_eeprom+0x3fc>)
   103e4:	0019      	movs	r1, r3
   103e6:	2014      	movs	r0, #20
   103e8:	4b69      	ldr	r3, [pc, #420]	; (10590 <init_eeprom+0x440>)
   103ea:	4798      	blx	r3
	config_mobile_no_ee(USER_13_MOBILE_NUMBER_PAGE,"0000000000");
   103ec:	4b57      	ldr	r3, [pc, #348]	; (1054c <init_eeprom+0x3fc>)
   103ee:	0019      	movs	r1, r3
   103f0:	2015      	movs	r0, #21
   103f2:	4b67      	ldr	r3, [pc, #412]	; (10590 <init_eeprom+0x440>)
   103f4:	4798      	blx	r3
	config_mobile_no_ee(USER_14_MOBILE_NUMBER_PAGE,"0000000000");
   103f6:	4b55      	ldr	r3, [pc, #340]	; (1054c <init_eeprom+0x3fc>)
   103f8:	0019      	movs	r1, r3
   103fa:	2016      	movs	r0, #22
   103fc:	4b64      	ldr	r3, [pc, #400]	; (10590 <init_eeprom+0x440>)
   103fe:	4798      	blx	r3
	config_mobile_no_ee(USER_15_MOBILE_NUMBER_PAGE,"0000000000");
   10400:	4b52      	ldr	r3, [pc, #328]	; (1054c <init_eeprom+0x3fc>)
   10402:	0019      	movs	r1, r3
   10404:	2017      	movs	r0, #23
   10406:	4b62      	ldr	r3, [pc, #392]	; (10590 <init_eeprom+0x440>)
   10408:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(ALTARNATE_NUMBERS_PAGE, page_data);
   1040a:	4b4a      	ldr	r3, [pc, #296]	; (10534 <init_eeprom+0x3e4>)
   1040c:	0019      	movs	r1, r3
   1040e:	2018      	movs	r0, #24
   10410:	4b49      	ldr	r3, [pc, #292]	; (10538 <init_eeprom+0x3e8>)
   10412:	4798      	blx	r3
	memcpy(&alternateNumber_struct,page_data,sizeof(alternateNumber_struct));
   10414:	4a63      	ldr	r2, [pc, #396]	; (105a4 <init_eeprom+0x454>)
   10416:	4b47      	ldr	r3, [pc, #284]	; (10534 <init_eeprom+0x3e4>)
   10418:	0010      	movs	r0, r2
   1041a:	0019      	movs	r1, r3
   1041c:	2318      	movs	r3, #24
   1041e:	001a      	movs	r2, r3
   10420:	4b47      	ldr	r3, [pc, #284]	; (10540 <init_eeprom+0x3f0>)
   10422:	4798      	blx	r3
	if (alternateNumber_struct.u8tfirst_time_write_ee != 85)
   10424:	4b5f      	ldr	r3, [pc, #380]	; (105a4 <init_eeprom+0x454>)
   10426:	781b      	ldrb	r3, [r3, #0]
   10428:	2b55      	cmp	r3, #85	; 0x55
   1042a:	d025      	beq.n	10478 <init_eeprom+0x328>
	{
		alternateNumber_struct.u8tfirst_time_write_ee = 85;
   1042c:	4b5d      	ldr	r3, [pc, #372]	; (105a4 <init_eeprom+0x454>)
   1042e:	2255      	movs	r2, #85	; 0x55
   10430:	701a      	strb	r2, [r3, #0]
		
		alternateNumber_struct.alterNumberPresent = false;
   10432:	4b5c      	ldr	r3, [pc, #368]	; (105a4 <init_eeprom+0x454>)
   10434:	2200      	movs	r2, #0
   10436:	709a      	strb	r2, [r3, #2]
		alternateNumber_struct.alterNumberSetting = false;
   10438:	4b5a      	ldr	r3, [pc, #360]	; (105a4 <init_eeprom+0x454>)
   1043a:	2200      	movs	r2, #0
   1043c:	705a      	strb	r2, [r3, #1]
		
		memset(alternateNumber_struct.alternateNumber_ee, '\0', sizeof(alternateNumber_struct.alternateNumber_ee));
   1043e:	4b5a      	ldr	r3, [pc, #360]	; (105a8 <init_eeprom+0x458>)
   10440:	2214      	movs	r2, #20
   10442:	2100      	movs	r1, #0
   10444:	0018      	movs	r0, r3
   10446:	4b40      	ldr	r3, [pc, #256]	; (10548 <init_eeprom+0x3f8>)
   10448:	4798      	blx	r3
		strcpy(alternateNumber_struct.alternateNumber_ee,"0000000000");
   1044a:	4a57      	ldr	r2, [pc, #348]	; (105a8 <init_eeprom+0x458>)
   1044c:	4b3f      	ldr	r3, [pc, #252]	; (1054c <init_eeprom+0x3fc>)
   1044e:	0010      	movs	r0, r2
   10450:	0019      	movs	r1, r3
   10452:	230b      	movs	r3, #11
   10454:	001a      	movs	r2, r3
   10456:	4b3a      	ldr	r3, [pc, #232]	; (10540 <init_eeprom+0x3f0>)
   10458:	4798      	blx	r3
		
		memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
   1045a:	4a36      	ldr	r2, [pc, #216]	; (10534 <init_eeprom+0x3e4>)
   1045c:	4b51      	ldr	r3, [pc, #324]	; (105a4 <init_eeprom+0x454>)
   1045e:	0010      	movs	r0, r2
   10460:	0019      	movs	r1, r3
   10462:	2318      	movs	r3, #24
   10464:	001a      	movs	r2, r3
   10466:	4b36      	ldr	r3, [pc, #216]	; (10540 <init_eeprom+0x3f0>)
   10468:	4798      	blx	r3
		eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
   1046a:	4b32      	ldr	r3, [pc, #200]	; (10534 <init_eeprom+0x3e4>)
   1046c:	0019      	movs	r1, r3
   1046e:	2018      	movs	r0, #24
   10470:	4b37      	ldr	r3, [pc, #220]	; (10550 <init_eeprom+0x400>)
   10472:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   10474:	4b37      	ldr	r3, [pc, #220]	; (10554 <init_eeprom+0x404>)
   10476:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(M2M_NUMBERS_PAGE, page_data);
   10478:	4b2e      	ldr	r3, [pc, #184]	; (10534 <init_eeprom+0x3e4>)
   1047a:	0019      	movs	r1, r3
   1047c:	2019      	movs	r0, #25
   1047e:	4b2e      	ldr	r3, [pc, #184]	; (10538 <init_eeprom+0x3e8>)
   10480:	4798      	blx	r3
	memcpy(&m2m_Numbers_struct,page_data,sizeof(m2m_Numbers_struct));
   10482:	4a4a      	ldr	r2, [pc, #296]	; (105ac <init_eeprom+0x45c>)
   10484:	4b2b      	ldr	r3, [pc, #172]	; (10534 <init_eeprom+0x3e4>)
   10486:	0010      	movs	r0, r2
   10488:	0019      	movs	r1, r3
   1048a:	2330      	movs	r3, #48	; 0x30
   1048c:	001a      	movs	r2, r3
   1048e:	4b2c      	ldr	r3, [pc, #176]	; (10540 <init_eeprom+0x3f0>)
   10490:	4798      	blx	r3
	if (m2m_Numbers_struct.u8tfirst_time_write_ee != 85)
   10492:	4b46      	ldr	r3, [pc, #280]	; (105ac <init_eeprom+0x45c>)
   10494:	781b      	ldrb	r3, [r3, #0]
   10496:	2b55      	cmp	r3, #85	; 0x55
   10498:	d03c      	beq.n	10514 <init_eeprom+0x3c4>
	{
		m2m_Numbers_struct.u8tfirst_time_write_ee = 85;
   1049a:	4b44      	ldr	r3, [pc, #272]	; (105ac <init_eeprom+0x45c>)
   1049c:	2255      	movs	r2, #85	; 0x55
   1049e:	701a      	strb	r2, [r3, #0]
		
		memset(m2m_Numbers_struct.m2mNumber_ee, '\0', sizeof(m2m_Numbers_struct.m2mNumber_ee));
   104a0:	4b43      	ldr	r3, [pc, #268]	; (105b0 <init_eeprom+0x460>)
   104a2:	2214      	movs	r2, #20
   104a4:	2100      	movs	r1, #0
   104a6:	0018      	movs	r0, r3
   104a8:	4b27      	ldr	r3, [pc, #156]	; (10548 <init_eeprom+0x3f8>)
   104aa:	4798      	blx	r3
		strcpy(m2m_Numbers_struct.m2mNumber_ee,"0000000000");
   104ac:	4a40      	ldr	r2, [pc, #256]	; (105b0 <init_eeprom+0x460>)
   104ae:	4b27      	ldr	r3, [pc, #156]	; (1054c <init_eeprom+0x3fc>)
   104b0:	0010      	movs	r0, r2
   104b2:	0019      	movs	r1, r3
   104b4:	230b      	movs	r3, #11
   104b6:	001a      	movs	r2, r3
   104b8:	4b21      	ldr	r3, [pc, #132]	; (10540 <init_eeprom+0x3f0>)
   104ba:	4798      	blx	r3
		
		memset(m2m_Numbers_struct.m2mremoteNumber_ee, '\0', sizeof(m2m_Numbers_struct.m2mremoteNumber_ee));
   104bc:	4b3d      	ldr	r3, [pc, #244]	; (105b4 <init_eeprom+0x464>)
   104be:	2214      	movs	r2, #20
   104c0:	2100      	movs	r1, #0
   104c2:	0018      	movs	r0, r3
   104c4:	4b20      	ldr	r3, [pc, #128]	; (10548 <init_eeprom+0x3f8>)
   104c6:	4798      	blx	r3
		strcpy(m2m_Numbers_struct.m2mremoteNumber_ee,"0000000000");
   104c8:	4a3a      	ldr	r2, [pc, #232]	; (105b4 <init_eeprom+0x464>)
   104ca:	4b20      	ldr	r3, [pc, #128]	; (1054c <init_eeprom+0x3fc>)
   104cc:	0010      	movs	r0, r2
   104ce:	0019      	movs	r1, r3
   104d0:	230b      	movs	r3, #11
   104d2:	001a      	movs	r2, r3
   104d4:	4b1a      	ldr	r3, [pc, #104]	; (10540 <init_eeprom+0x3f0>)
   104d6:	4798      	blx	r3
		
		m2m_Numbers_struct.m2mPresent			= false;
   104d8:	4b34      	ldr	r3, [pc, #208]	; (105ac <init_eeprom+0x45c>)
   104da:	2200      	movs	r2, #0
   104dc:	705a      	strb	r2, [r3, #1]
		m2m_Numbers_struct.m2mVerified			= false;
   104de:	4b33      	ldr	r3, [pc, #204]	; (105ac <init_eeprom+0x45c>)
   104e0:	2200      	movs	r2, #0
   104e2:	709a      	strb	r2, [r3, #2]
		
		m2m_Numbers_struct.m2mRemotePresent		= false;
   104e4:	4b31      	ldr	r3, [pc, #196]	; (105ac <init_eeprom+0x45c>)
   104e6:	2200      	movs	r2, #0
   104e8:	70da      	strb	r2, [r3, #3]
		m2m_Numbers_struct.m2mRemoteVerified	= false;
   104ea:	4b30      	ldr	r3, [pc, #192]	; (105ac <init_eeprom+0x45c>)
   104ec:	2200      	movs	r2, #0
   104ee:	711a      	strb	r2, [r3, #4]
		
		m2m_Numbers_struct.m2mSetting			= false;
   104f0:	4b2e      	ldr	r3, [pc, #184]	; (105ac <init_eeprom+0x45c>)
   104f2:	2200      	movs	r2, #0
   104f4:	715a      	strb	r2, [r3, #5]
		
		memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   104f6:	4a0f      	ldr	r2, [pc, #60]	; (10534 <init_eeprom+0x3e4>)
   104f8:	4b2c      	ldr	r3, [pc, #176]	; (105ac <init_eeprom+0x45c>)
   104fa:	0010      	movs	r0, r2
   104fc:	0019      	movs	r1, r3
   104fe:	2330      	movs	r3, #48	; 0x30
   10500:	001a      	movs	r2, r3
   10502:	4b0f      	ldr	r3, [pc, #60]	; (10540 <init_eeprom+0x3f0>)
   10504:	4798      	blx	r3
		eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10506:	4b0b      	ldr	r3, [pc, #44]	; (10534 <init_eeprom+0x3e4>)
   10508:	0019      	movs	r1, r3
   1050a:	2019      	movs	r0, #25
   1050c:	4b10      	ldr	r3, [pc, #64]	; (10550 <init_eeprom+0x400>)
   1050e:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   10510:	4b10      	ldr	r3, [pc, #64]	; (10554 <init_eeprom+0x404>)
   10512:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   10514:	4b07      	ldr	r3, [pc, #28]	; (10534 <init_eeprom+0x3e4>)
   10516:	0019      	movs	r1, r3
   10518:	201a      	movs	r0, #26
   1051a:	4b07      	ldr	r3, [pc, #28]	; (10538 <init_eeprom+0x3e8>)
   1051c:	4798      	blx	r3
	memcpy(&user_settings_parameter_struct,page_data,sizeof(user_settings_parameter_struct));
   1051e:	4905      	ldr	r1, [pc, #20]	; (10534 <init_eeprom+0x3e4>)
   10520:	4b25      	ldr	r3, [pc, #148]	; (105b8 <init_eeprom+0x468>)
   10522:	2230      	movs	r2, #48	; 0x30
   10524:	0018      	movs	r0, r3
   10526:	4b06      	ldr	r3, [pc, #24]	; (10540 <init_eeprom+0x3f0>)
   10528:	4798      	blx	r3
	if (user_settings_parameter_struct.u8tfirst_time_write_ee != 85)
   1052a:	4b23      	ldr	r3, [pc, #140]	; (105b8 <init_eeprom+0x468>)
   1052c:	781b      	ldrb	r3, [r3, #0]
   1052e:	e045      	b.n	105bc <init_eeprom+0x46c>
   10530:	00010115 	.word	0x00010115
   10534:	20000584 	.word	0x20000584
   10538:	00023bfd 	.word	0x00023bfd
   1053c:	200005f8 	.word	0x200005f8
   10540:	00028edd 	.word	0x00028edd
   10544:	20000604 	.word	0x20000604
   10548:	00028f13 	.word	0x00028f13
   1054c:	00029b14 	.word	0x00029b14
   10550:	00023af1 	.word	0x00023af1
   10554:	00023c99 	.word	0x00023c99
   10558:	2000051c 	.word	0x2000051c
   1055c:	20000521 	.word	0x20000521
   10560:	00029b20 	.word	0x00029b20
   10564:	2000053f 	.word	0x2000053f
   10568:	00029b30 	.word	0x00029b30
   1056c:	200005c0 	.word	0x200005c0
   10570:	200005c5 	.word	0x200005c5
   10574:	00029b3c 	.word	0x00029b3c
   10578:	200005e5 	.word	0x200005e5
   1057c:	200005d5 	.word	0x200005d5
   10580:	00029b4c 	.word	0x00029b4c
   10584:	00029b58 	.word	0x00029b58
   10588:	20000614 	.word	0x20000614
   1058c:	00029b68 	.word	0x00029b68
   10590:	00010729 	.word	0x00010729
   10594:	00029b74 	.word	0x00029b74
   10598:	00029b80 	.word	0x00029b80
   1059c:	00029b8c 	.word	0x00029b8c
   105a0:	00029b98 	.word	0x00029b98
   105a4:	2000063c 	.word	0x2000063c
   105a8:	20000640 	.word	0x20000640
   105ac:	20000554 	.word	0x20000554
   105b0:	2000055c 	.word	0x2000055c
   105b4:	20000570 	.word	0x20000570
   105b8:	20000654 	.word	0x20000654
   105bc:	2b55      	cmp	r3, #85	; 0x55
   105be:	d065      	beq.n	1068c <init_eeprom+0x53c>
	{
		user_settings_parameter_struct.u8tfirst_time_write_ee		= 85;
   105c0:	4b51      	ldr	r3, [pc, #324]	; (10708 <init_eeprom+0x5b8>)
   105c2:	2255      	movs	r2, #85	; 0x55
   105c4:	701a      	strb	r2, [r3, #0]
		
		user_settings_parameter_struct.autoStartAddress				= false;
   105c6:	4b50      	ldr	r3, [pc, #320]	; (10708 <init_eeprom+0x5b8>)
   105c8:	2200      	movs	r2, #0
   105ca:	705a      	strb	r2, [r3, #1]
		user_settings_parameter_struct.autoStartTimeAddress			= 50;
   105cc:	4b4e      	ldr	r3, [pc, #312]	; (10708 <init_eeprom+0x5b8>)
   105ce:	2232      	movs	r2, #50	; 0x32
   105d0:	805a      	strh	r2, [r3, #2]
		user_settings_parameter_struct.dndAddress					= DND_OFF;
   105d2:	4b4d      	ldr	r3, [pc, #308]	; (10708 <init_eeprom+0x5b8>)
   105d4:	224f      	movs	r2, #79	; 0x4f
   105d6:	711a      	strb	r2, [r3, #4]
		user_settings_parameter_struct.responseAddress				= 'T';
   105d8:	4b4b      	ldr	r3, [pc, #300]	; (10708 <init_eeprom+0x5b8>)
   105da:	2254      	movs	r2, #84	; 0x54
   105dc:	715a      	strb	r2, [r3, #5]
		user_settings_parameter_struct.starDeltaTimerAddress		= 2;
   105de:	4b4a      	ldr	r3, [pc, #296]	; (10708 <init_eeprom+0x5b8>)
   105e0:	2202      	movs	r2, #2
   105e2:	80da      	strh	r2, [r3, #6]
		//user_settings_parameter_struct.bypassAddress				= false;
		user_settings_parameter_struct.eventStageAddress			= 0;
   105e4:	4b48      	ldr	r3, [pc, #288]	; (10708 <init_eeprom+0x5b8>)
   105e6:	2200      	movs	r2, #0
   105e8:	721a      	strb	r2, [r3, #8]
		user_settings_parameter_struct.noCallAddress				= false;
   105ea:	4b47      	ldr	r3, [pc, #284]	; (10708 <init_eeprom+0x5b8>)
   105ec:	2200      	movs	r2, #0
   105ee:	725a      	strb	r2, [r3, #9]
		user_settings_parameter_struct.noCallStartTimeHourAddress	= 0;
   105f0:	4b45      	ldr	r3, [pc, #276]	; (10708 <init_eeprom+0x5b8>)
   105f2:	2200      	movs	r2, #0
   105f4:	729a      	strb	r2, [r3, #10]
		user_settings_parameter_struct.noCallStartTimeMinuteAddress = 0;
   105f6:	4b44      	ldr	r3, [pc, #272]	; (10708 <init_eeprom+0x5b8>)
   105f8:	2200      	movs	r2, #0
   105fa:	72da      	strb	r2, [r3, #11]
		user_settings_parameter_struct.noCallStopTimeHourAddress	= 0;
   105fc:	4b42      	ldr	r3, [pc, #264]	; (10708 <init_eeprom+0x5b8>)
   105fe:	2200      	movs	r2, #0
   10600:	731a      	strb	r2, [r3, #12]
		user_settings_parameter_struct.noCallStopTimeMinuteAddress	= 0;
   10602:	4b41      	ldr	r3, [pc, #260]	; (10708 <init_eeprom+0x5b8>)
   10604:	2200      	movs	r2, #0
   10606:	735a      	strb	r2, [r3, #13]
		user_settings_parameter_struct.lowVoltAddress				= 0;
   10608:	4b3f      	ldr	r3, [pc, #252]	; (10708 <init_eeprom+0x5b8>)
   1060a:	2200      	movs	r2, #0
   1060c:	739a      	strb	r2, [r3, #14]
		user_settings_parameter_struct.currentDetectionAddress		= false;
   1060e:	4b3e      	ldr	r3, [pc, #248]	; (10708 <init_eeprom+0x5b8>)
   10610:	2200      	movs	r2, #0
   10612:	73da      	strb	r2, [r3, #15]
		user_settings_parameter_struct.normalLoadAddress			= 0;
   10614:	4b3c      	ldr	r3, [pc, #240]	; (10708 <init_eeprom+0x5b8>)
   10616:	2200      	movs	r2, #0
   10618:	611a      	str	r2, [r3, #16]
		user_settings_parameter_struct.overloadAddress				= 0;
   1061a:	4b3b      	ldr	r3, [pc, #236]	; (10708 <init_eeprom+0x5b8>)
   1061c:	2200      	movs	r2, #0
   1061e:	615a      	str	r2, [r3, #20]
		user_settings_parameter_struct.underloadAddress				= 0;
   10620:	4b39      	ldr	r3, [pc, #228]	; (10708 <init_eeprom+0x5b8>)
   10622:	2200      	movs	r2, #0
   10624:	619a      	str	r2, [r3, #24]
		user_settings_parameter_struct.underloadPerAddress			= 85;
   10626:	4b38      	ldr	r3, [pc, #224]	; (10708 <init_eeprom+0x5b8>)
   10628:	2255      	movs	r2, #85	; 0x55
   1062a:	771a      	strb	r2, [r3, #28]
		user_settings_parameter_struct.overloadPerAddress			= 120;
   1062c:	4b36      	ldr	r3, [pc, #216]	; (10708 <init_eeprom+0x5b8>)
   1062e:	2278      	movs	r2, #120	; 0x78
   10630:	775a      	strb	r2, [r3, #29]
		//user_settings_parameter_struct.jumperSettingAddress			= 1;
		user_settings_parameter_struct.preventOverFlowAddress		= false;
   10632:	4b35      	ldr	r3, [pc, #212]	; (10708 <init_eeprom+0x5b8>)
   10634:	2200      	movs	r2, #0
   10636:	779a      	strb	r2, [r3, #30]
		user_settings_parameter_struct.waterBypassAddress			= false;
   10638:	4b33      	ldr	r3, [pc, #204]	; (10708 <init_eeprom+0x5b8>)
   1063a:	2200      	movs	r2, #0
   1063c:	77da      	strb	r2, [r3, #31]
		
		user_settings_parameter_struct.detectSinglePhasing			= true;
   1063e:	4b32      	ldr	r3, [pc, #200]	; (10708 <init_eeprom+0x5b8>)
   10640:	2220      	movs	r2, #32
   10642:	2101      	movs	r1, #1
   10644:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.singlePhasingVoltage			= 100;
   10646:	4b30      	ldr	r3, [pc, #192]	; (10708 <init_eeprom+0x5b8>)
   10648:	2264      	movs	r2, #100	; 0x64
   1064a:	845a      	strh	r2, [r3, #34]	; 0x22
		user_settings_parameter_struct.detectPhaseSequence			= true;
   1064c:	4b2e      	ldr	r3, [pc, #184]	; (10708 <init_eeprom+0x5b8>)
   1064e:	2224      	movs	r2, #36	; 0x24
   10650:	2101      	movs	r1, #1
   10652:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.detectMotorFeedback			= MOTORFEEDBACK_DETECTION_ON;
   10654:	4b2c      	ldr	r3, [pc, #176]	; (10708 <init_eeprom+0x5b8>)
   10656:	2225      	movs	r2, #37	; 0x25
   10658:	2102      	movs	r1, #2
   1065a:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.over_under_DetectionMethod	= MOTOR_UNDEROVER_DETECTION_CURRENT;
   1065c:	4b2a      	ldr	r3, [pc, #168]	; (10708 <init_eeprom+0x5b8>)
   1065e:	2226      	movs	r2, #38	; 0x26
   10660:	2102      	movs	r1, #2
   10662:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.motorVoltageBypass			= MOTOR_VOLTAGE_BYPASS_OFF;
   10664:	4b28      	ldr	r3, [pc, #160]	; (10708 <init_eeprom+0x5b8>)
   10666:	2227      	movs	r2, #39	; 0x27
   10668:	2100      	movs	r1, #0
   1066a:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.motorVoltageBypassTime		= 10000L;
   1066c:	4b26      	ldr	r3, [pc, #152]	; (10708 <init_eeprom+0x5b8>)
   1066e:	4a27      	ldr	r2, [pc, #156]	; (1070c <init_eeprom+0x5bc>)
   10670:	629a      	str	r2, [r3, #40]	; 0x28

		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   10672:	4925      	ldr	r1, [pc, #148]	; (10708 <init_eeprom+0x5b8>)
   10674:	4b26      	ldr	r3, [pc, #152]	; (10710 <init_eeprom+0x5c0>)
   10676:	2230      	movs	r2, #48	; 0x30
   10678:	0018      	movs	r0, r3
   1067a:	4b26      	ldr	r3, [pc, #152]	; (10714 <init_eeprom+0x5c4>)
   1067c:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1067e:	4b24      	ldr	r3, [pc, #144]	; (10710 <init_eeprom+0x5c0>)
   10680:	0019      	movs	r1, r3
   10682:	201a      	movs	r0, #26
   10684:	4b24      	ldr	r3, [pc, #144]	; (10718 <init_eeprom+0x5c8>)
   10686:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   10688:	4b24      	ldr	r3, [pc, #144]	; (1071c <init_eeprom+0x5cc>)
   1068a:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(FACTORY_SETTING_PARAMETERS_PAGE, page_data);
   1068c:	4b20      	ldr	r3, [pc, #128]	; (10710 <init_eeprom+0x5c0>)
   1068e:	0019      	movs	r1, r3
   10690:	201b      	movs	r0, #27
   10692:	4b23      	ldr	r3, [pc, #140]	; (10720 <init_eeprom+0x5d0>)
   10694:	4798      	blx	r3
	memcpy(&factory_settings_parameter_struct,page_data,sizeof(factory_settings_parameter_struct));
   10696:	491e      	ldr	r1, [pc, #120]	; (10710 <init_eeprom+0x5c0>)
   10698:	4b22      	ldr	r3, [pc, #136]	; (10724 <init_eeprom+0x5d4>)
   1069a:	2210      	movs	r2, #16
   1069c:	0018      	movs	r0, r3
   1069e:	4b1d      	ldr	r3, [pc, #116]	; (10714 <init_eeprom+0x5c4>)
   106a0:	4798      	blx	r3
	if (factory_settings_parameter_struct.u8tfirst_time_write_ee != 85)
   106a2:	4b20      	ldr	r3, [pc, #128]	; (10724 <init_eeprom+0x5d4>)
   106a4:	781b      	ldrb	r3, [r3, #0]
   106a6:	2b55      	cmp	r3, #85	; 0x55
   106a8:	d02a      	beq.n	10700 <init_eeprom+0x5b0>
	{
		factory_settings_parameter_struct.u8tfirst_time_write_ee	= 85;
   106aa:	4b1e      	ldr	r3, [pc, #120]	; (10724 <init_eeprom+0x5d4>)
   106ac:	2255      	movs	r2, #85	; 0x55
   106ae:	701a      	strb	r2, [r3, #0]
		factory_settings_parameter_struct.AMPERE_SPEAK				= true;
   106b0:	4b1c      	ldr	r3, [pc, #112]	; (10724 <init_eeprom+0x5d4>)
   106b2:	2201      	movs	r2, #1
   106b4:	709a      	strb	r2, [r3, #2]
		factory_settings_parameter_struct.ENABLE_CURRENT			= true;
   106b6:	4b1b      	ldr	r3, [pc, #108]	; (10724 <init_eeprom+0x5d4>)
   106b8:	2201      	movs	r2, #1
   106ba:	705a      	strb	r2, [r3, #1]
		factory_settings_parameter_struct.DUAL_LEVEL			    = false;	//= true;
   106bc:	4b19      	ldr	r3, [pc, #100]	; (10724 <init_eeprom+0x5d4>)
   106be:	2200      	movs	r2, #0
   106c0:	719a      	strb	r2, [r3, #6]
		factory_settings_parameter_struct.ENABLE_WATER				= false;	//= true;
   106c2:	4b18      	ldr	r3, [pc, #96]	; (10724 <init_eeprom+0x5d4>)
   106c4:	2200      	movs	r2, #0
   106c6:	715a      	strb	r2, [r3, #5]
		factory_settings_parameter_struct.ENABLE_GP					= false;	// = true;
   106c8:	4b16      	ldr	r3, [pc, #88]	; (10724 <init_eeprom+0x5d4>)
   106ca:	2200      	movs	r2, #0
   106cc:	711a      	strb	r2, [r3, #4]
		factory_settings_parameter_struct.ENABLE_M2M				= false;
   106ce:	4b15      	ldr	r3, [pc, #84]	; (10724 <init_eeprom+0x5d4>)
   106d0:	2200      	movs	r2, #0
   106d2:	70da      	strb	r2, [r3, #3]
		factory_settings_parameter_struct.NOLEVELCHANGECALL			= false;
   106d4:	4b13      	ldr	r3, [pc, #76]	; (10724 <init_eeprom+0x5d4>)
   106d6:	2200      	movs	r2, #0
   106d8:	71da      	strb	r2, [r3, #7]
		
		factory_settings_parameter_struct.DeviceId_ee				= 0;
   106da:	4b12      	ldr	r3, [pc, #72]	; (10724 <init_eeprom+0x5d4>)
   106dc:	2200      	movs	r2, #0
   106de:	609a      	str	r2, [r3, #8]
		factory_settings_parameter_struct.dateCode					= 0;
   106e0:	4b10      	ldr	r3, [pc, #64]	; (10724 <init_eeprom+0x5d4>)
   106e2:	2200      	movs	r2, #0
   106e4:	60da      	str	r2, [r3, #12]

		//memset(factory_settings_parameter_struct.DeviceID_ee, '\0', sizeof(factory_settings_parameter_struct.DeviceID_ee));
		//strcpy(factory_settings_parameter_struct.DeviceID_ee,"0000000000");
		
		memcpy(page_data,&factory_settings_parameter_struct,sizeof(factory_settings_parameter_struct));
   106e6:	490f      	ldr	r1, [pc, #60]	; (10724 <init_eeprom+0x5d4>)
   106e8:	4b09      	ldr	r3, [pc, #36]	; (10710 <init_eeprom+0x5c0>)
   106ea:	2210      	movs	r2, #16
   106ec:	0018      	movs	r0, r3
   106ee:	4b09      	ldr	r3, [pc, #36]	; (10714 <init_eeprom+0x5c4>)
   106f0:	4798      	blx	r3
		eeprom_emulator_write_page(FACTORY_SETTING_PARAMETERS_PAGE, page_data);
   106f2:	4b07      	ldr	r3, [pc, #28]	; (10710 <init_eeprom+0x5c0>)
   106f4:	0019      	movs	r1, r3
   106f6:	201b      	movs	r0, #27
   106f8:	4b07      	ldr	r3, [pc, #28]	; (10718 <init_eeprom+0x5c8>)
   106fa:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   106fc:	4b07      	ldr	r3, [pc, #28]	; (1071c <init_eeprom+0x5cc>)
   106fe:	4798      	blx	r3
	}
}
   10700:	46c0      	nop			; (mov r8, r8)
   10702:	46bd      	mov	sp, r7
   10704:	bd80      	pop	{r7, pc}
   10706:	46c0      	nop			; (mov r8, r8)
   10708:	20000654 	.word	0x20000654
   1070c:	00002710 	.word	0x00002710
   10710:	20000584 	.word	0x20000584
   10714:	00028edd 	.word	0x00028edd
   10718:	00023af1 	.word	0x00023af1
   1071c:	00023c99 	.word	0x00023c99
   10720:	00023bfd 	.word	0x00023bfd
   10724:	2000062c 	.word	0x2000062c

00010728 <config_mobile_no_ee>:

void config_mobile_no_ee(const uint8_t page_loc,const char *mobile_number)
{
   10728:	b580      	push	{r7, lr}
   1072a:	b088      	sub	sp, #32
   1072c:	af00      	add	r7, sp, #0
   1072e:	0002      	movs	r2, r0
   10730:	6039      	str	r1, [r7, #0]
   10732:	1dfb      	adds	r3, r7, #7
   10734:	701a      	strb	r2, [r3, #0]
	struct mobile_no_struct mobile_no;
	memset(page_data, '\0', sizeof(page_data));
   10736:	4b28      	ldr	r3, [pc, #160]	; (107d8 <config_mobile_no_ee+0xb0>)
   10738:	223c      	movs	r2, #60	; 0x3c
   1073a:	2100      	movs	r1, #0
   1073c:	0018      	movs	r0, r3
   1073e:	4b27      	ldr	r3, [pc, #156]	; (107dc <config_mobile_no_ee+0xb4>)
   10740:	4798      	blx	r3
	eeprom_emulator_read_page(page_loc, page_data);
   10742:	4a25      	ldr	r2, [pc, #148]	; (107d8 <config_mobile_no_ee+0xb0>)
   10744:	1dfb      	adds	r3, r7, #7
   10746:	781b      	ldrb	r3, [r3, #0]
   10748:	0011      	movs	r1, r2
   1074a:	0018      	movs	r0, r3
   1074c:	4b24      	ldr	r3, [pc, #144]	; (107e0 <config_mobile_no_ee+0xb8>)
   1074e:	4798      	blx	r3
	memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10750:	2308      	movs	r3, #8
   10752:	18fa      	adds	r2, r7, r3
   10754:	4b20      	ldr	r3, [pc, #128]	; (107d8 <config_mobile_no_ee+0xb0>)
   10756:	0010      	movs	r0, r2
   10758:	0019      	movs	r1, r3
   1075a:	2318      	movs	r3, #24
   1075c:	001a      	movs	r2, r3
   1075e:	4b21      	ldr	r3, [pc, #132]	; (107e4 <config_mobile_no_ee+0xbc>)
   10760:	4798      	blx	r3
	if (mobile_no.u8tfirst_time_write_ee != 85)
   10762:	2308      	movs	r3, #8
   10764:	18fb      	adds	r3, r7, r3
   10766:	781b      	ldrb	r3, [r3, #0]
   10768:	2b55      	cmp	r3, #85	; 0x55
   1076a:	d031      	beq.n	107d0 <config_mobile_no_ee+0xa8>
	{
		mobile_no.u8tfirst_time_write_ee = 85;
   1076c:	2308      	movs	r3, #8
   1076e:	18fb      	adds	r3, r7, r3
   10770:	2255      	movs	r2, #85	; 0x55
   10772:	701a      	strb	r2, [r3, #0]
		mobile_no.dummy1 = 0;
   10774:	2308      	movs	r3, #8
   10776:	18fb      	adds	r3, r7, r3
   10778:	2200      	movs	r2, #0
   1077a:	705a      	strb	r2, [r3, #1]
		mobile_no.dummy2 = 0;
   1077c:	2308      	movs	r3, #8
   1077e:	18fb      	adds	r3, r7, r3
   10780:	2200      	movs	r2, #0
   10782:	709a      	strb	r2, [r3, #2]
		mobile_no.dummy3 = 0;
   10784:	2308      	movs	r3, #8
   10786:	18fb      	adds	r3, r7, r3
   10788:	2200      	movs	r2, #0
   1078a:	70da      	strb	r2, [r3, #3]
		memset(mobile_no.mobile_no_ee, '\0', sizeof(mobile_no.mobile_no_ee));
   1078c:	2308      	movs	r3, #8
   1078e:	18fb      	adds	r3, r7, r3
   10790:	3304      	adds	r3, #4
   10792:	2214      	movs	r2, #20
   10794:	2100      	movs	r1, #0
   10796:	0018      	movs	r0, r3
   10798:	4b10      	ldr	r3, [pc, #64]	; (107dc <config_mobile_no_ee+0xb4>)
   1079a:	4798      	blx	r3
		strcpy(mobile_no.mobile_no_ee,mobile_number);
   1079c:	683a      	ldr	r2, [r7, #0]
   1079e:	2308      	movs	r3, #8
   107a0:	18fb      	adds	r3, r7, r3
   107a2:	3304      	adds	r3, #4
   107a4:	0011      	movs	r1, r2
   107a6:	0018      	movs	r0, r3
   107a8:	4b0f      	ldr	r3, [pc, #60]	; (107e8 <config_mobile_no_ee+0xc0>)
   107aa:	4798      	blx	r3
		
		memcpy(page_data,&mobile_no,sizeof(mobile_no));
   107ac:	4a0a      	ldr	r2, [pc, #40]	; (107d8 <config_mobile_no_ee+0xb0>)
   107ae:	2308      	movs	r3, #8
   107b0:	18fb      	adds	r3, r7, r3
   107b2:	0010      	movs	r0, r2
   107b4:	0019      	movs	r1, r3
   107b6:	2318      	movs	r3, #24
   107b8:	001a      	movs	r2, r3
   107ba:	4b0a      	ldr	r3, [pc, #40]	; (107e4 <config_mobile_no_ee+0xbc>)
   107bc:	4798      	blx	r3
		eeprom_emulator_write_page(page_loc, page_data);
   107be:	4a06      	ldr	r2, [pc, #24]	; (107d8 <config_mobile_no_ee+0xb0>)
   107c0:	1dfb      	adds	r3, r7, #7
   107c2:	781b      	ldrb	r3, [r3, #0]
   107c4:	0011      	movs	r1, r2
   107c6:	0018      	movs	r0, r3
   107c8:	4b08      	ldr	r3, [pc, #32]	; (107ec <config_mobile_no_ee+0xc4>)
   107ca:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   107cc:	4b08      	ldr	r3, [pc, #32]	; (107f0 <config_mobile_no_ee+0xc8>)
   107ce:	4798      	blx	r3
	}
}
   107d0:	46c0      	nop			; (mov r8, r8)
   107d2:	46bd      	mov	sp, r7
   107d4:	b008      	add	sp, #32
   107d6:	bd80      	pop	{r7, pc}
   107d8:	20000584 	.word	0x20000584
   107dc:	00028f13 	.word	0x00028f13
   107e0:	00023bfd 	.word	0x00023bfd
   107e4:	00028edd 	.word	0x00028edd
   107e8:	00029193 	.word	0x00029193
   107ec:	00023af1 	.word	0x00023af1
   107f0:	00023c99 	.word	0x00023c99

000107f4 <getNumbers>:


void getNumbers(char *string)
{
   107f4:	b580      	push	{r7, lr}
   107f6:	b08a      	sub	sp, #40	; 0x28
   107f8:	af00      	add	r7, sp, #0
   107fa:	6078      	str	r0, [r7, #4]
	strcpy(string,"");
   107fc:	687b      	ldr	r3, [r7, #4]
   107fe:	2200      	movs	r2, #0
   10800:	701a      	strb	r2, [r3, #0]
	
	for(uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
   10802:	2327      	movs	r3, #39	; 0x27
   10804:	18fb      	adds	r3, r7, r3
   10806:	2200      	movs	r2, #0
   10808:	701a      	strb	r2, [r3, #0]
   1080a:	e063      	b.n	108d4 <getNumbers+0xe0>
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
   1080c:	4b37      	ldr	r3, [pc, #220]	; (108ec <getNumbers+0xf8>)
   1080e:	223c      	movs	r2, #60	; 0x3c
   10810:	2100      	movs	r1, #0
   10812:	0018      	movs	r0, r3
   10814:	4b36      	ldr	r3, [pc, #216]	; (108f0 <getNumbers+0xfc>)
   10816:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
   10818:	2327      	movs	r3, #39	; 0x27
   1081a:	18fb      	adds	r3, r7, r3
   1081c:	781b      	ldrb	r3, [r3, #0]
   1081e:	3309      	adds	r3, #9
   10820:	b2db      	uxtb	r3, r3
   10822:	4a32      	ldr	r2, [pc, #200]	; (108ec <getNumbers+0xf8>)
   10824:	0011      	movs	r1, r2
   10826:	0018      	movs	r0, r3
   10828:	4b32      	ldr	r3, [pc, #200]	; (108f4 <getNumbers+0x100>)
   1082a:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
   1082c:	230c      	movs	r3, #12
   1082e:	18fa      	adds	r2, r7, r3
   10830:	4b2e      	ldr	r3, [pc, #184]	; (108ec <getNumbers+0xf8>)
   10832:	0010      	movs	r0, r2
   10834:	0019      	movs	r1, r3
   10836:	2318      	movs	r3, #24
   10838:	001a      	movs	r2, r3
   1083a:	4b2f      	ldr	r3, [pc, #188]	; (108f8 <getNumbers+0x104>)
   1083c:	4798      	blx	r3
		if(i==user_count_struct.primaryNumberIndex)
   1083e:	4b2f      	ldr	r3, [pc, #188]	; (108fc <getNumbers+0x108>)
   10840:	78db      	ldrb	r3, [r3, #3]
   10842:	2227      	movs	r2, #39	; 0x27
   10844:	18ba      	adds	r2, r7, r2
   10846:	7812      	ldrb	r2, [r2, #0]
   10848:	429a      	cmp	r2, r3
   1084a:	d10f      	bne.n	1086c <getNumbers+0x78>
		{
			strcat(string,"P:");
   1084c:	687b      	ldr	r3, [r7, #4]
   1084e:	0018      	movs	r0, r3
   10850:	4b2b      	ldr	r3, [pc, #172]	; (10900 <getNumbers+0x10c>)
   10852:	4798      	blx	r3
   10854:	0003      	movs	r3, r0
   10856:	001a      	movs	r2, r3
   10858:	687b      	ldr	r3, [r7, #4]
   1085a:	189a      	adds	r2, r3, r2
   1085c:	4b29      	ldr	r3, [pc, #164]	; (10904 <getNumbers+0x110>)
   1085e:	0010      	movs	r0, r2
   10860:	0019      	movs	r1, r3
   10862:	2303      	movs	r3, #3
   10864:	001a      	movs	r2, r3
   10866:	4b24      	ldr	r3, [pc, #144]	; (108f8 <getNumbers+0x104>)
   10868:	4798      	blx	r3
   1086a:	e015      	b.n	10898 <getNumbers+0xa4>
		}
		else if(i==user_count_struct.secondaryNumberIndex)
   1086c:	4b23      	ldr	r3, [pc, #140]	; (108fc <getNumbers+0x108>)
   1086e:	791b      	ldrb	r3, [r3, #4]
   10870:	2227      	movs	r2, #39	; 0x27
   10872:	18ba      	adds	r2, r7, r2
   10874:	7812      	ldrb	r2, [r2, #0]
   10876:	429a      	cmp	r2, r3
   10878:	d10e      	bne.n	10898 <getNumbers+0xa4>
		{
			strcat(string,"S:");
   1087a:	687b      	ldr	r3, [r7, #4]
   1087c:	0018      	movs	r0, r3
   1087e:	4b20      	ldr	r3, [pc, #128]	; (10900 <getNumbers+0x10c>)
   10880:	4798      	blx	r3
   10882:	0003      	movs	r3, r0
   10884:	001a      	movs	r2, r3
   10886:	687b      	ldr	r3, [r7, #4]
   10888:	189a      	adds	r2, r3, r2
   1088a:	4b1f      	ldr	r3, [pc, #124]	; (10908 <getNumbers+0x114>)
   1088c:	0010      	movs	r0, r2
   1088e:	0019      	movs	r1, r3
   10890:	2303      	movs	r3, #3
   10892:	001a      	movs	r2, r3
   10894:	4b18      	ldr	r3, [pc, #96]	; (108f8 <getNumbers+0x104>)
   10896:	4798      	blx	r3
		}
		strcat(string,mobile_no.mobile_no_ee);
   10898:	230c      	movs	r3, #12
   1089a:	18fb      	adds	r3, r7, r3
   1089c:	1d1a      	adds	r2, r3, #4
   1089e:	687b      	ldr	r3, [r7, #4]
   108a0:	0011      	movs	r1, r2
   108a2:	0018      	movs	r0, r3
   108a4:	4b19      	ldr	r3, [pc, #100]	; (1090c <getNumbers+0x118>)
   108a6:	4798      	blx	r3
		strcat(string,"\n");
   108a8:	687b      	ldr	r3, [r7, #4]
   108aa:	0018      	movs	r0, r3
   108ac:	4b14      	ldr	r3, [pc, #80]	; (10900 <getNumbers+0x10c>)
   108ae:	4798      	blx	r3
   108b0:	0003      	movs	r3, r0
   108b2:	001a      	movs	r2, r3
   108b4:	687b      	ldr	r3, [r7, #4]
   108b6:	189a      	adds	r2, r3, r2
   108b8:	4b15      	ldr	r3, [pc, #84]	; (10910 <getNumbers+0x11c>)
   108ba:	0010      	movs	r0, r2
   108bc:	0019      	movs	r1, r3
   108be:	2302      	movs	r3, #2
   108c0:	001a      	movs	r2, r3
   108c2:	4b0d      	ldr	r3, [pc, #52]	; (108f8 <getNumbers+0x104>)
   108c4:	4798      	blx	r3
	for(uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
   108c6:	2327      	movs	r3, #39	; 0x27
   108c8:	18fb      	adds	r3, r7, r3
   108ca:	781a      	ldrb	r2, [r3, #0]
   108cc:	2327      	movs	r3, #39	; 0x27
   108ce:	18fb      	adds	r3, r7, r3
   108d0:	3201      	adds	r2, #1
   108d2:	701a      	strb	r2, [r3, #0]
   108d4:	4b09      	ldr	r3, [pc, #36]	; (108fc <getNumbers+0x108>)
   108d6:	789b      	ldrb	r3, [r3, #2]
   108d8:	2227      	movs	r2, #39	; 0x27
   108da:	18ba      	adds	r2, r7, r2
   108dc:	7812      	ldrb	r2, [r2, #0]
   108de:	429a      	cmp	r2, r3
   108e0:	d394      	bcc.n	1080c <getNumbers+0x18>
	}
}
   108e2:	46c0      	nop			; (mov r8, r8)
   108e4:	46bd      	mov	sp, r7
   108e6:	b00a      	add	sp, #40	; 0x28
   108e8:	bd80      	pop	{r7, pc}
   108ea:	46c0      	nop			; (mov r8, r8)
   108ec:	20000584 	.word	0x20000584
   108f0:	00028f13 	.word	0x00028f13
   108f4:	00023bfd 	.word	0x00023bfd
   108f8:	00028edd 	.word	0x00028edd
   108fc:	20000614 	.word	0x20000614
   10900:	000291a3 	.word	0x000291a3
   10904:	00029ba4 	.word	0x00029ba4
   10908:	00029ba8 	.word	0x00029ba8
   1090c:	0002915d 	.word	0x0002915d
   10910:	00029bac 	.word	0x00029bac

00010914 <getIndexedNumber>:

char *getIndexedNumber(char *IndexNo, uint8_t index)
{
   10914:	b580      	push	{r7, lr}
   10916:	b088      	sub	sp, #32
   10918:	af00      	add	r7, sp, #0
   1091a:	6078      	str	r0, [r7, #4]
   1091c:	000a      	movs	r2, r1
   1091e:	1cfb      	adds	r3, r7, #3
   10920:	701a      	strb	r2, [r3, #0]
	strcpy(IndexNo,"");
   10922:	687b      	ldr	r3, [r7, #4]
   10924:	2200      	movs	r2, #0
   10926:	701a      	strb	r2, [r3, #0]
	if(user_count_struct.current_user_no_count>index)
   10928:	4b15      	ldr	r3, [pc, #84]	; (10980 <getIndexedNumber+0x6c>)
   1092a:	789b      	ldrb	r3, [r3, #2]
   1092c:	1cfa      	adds	r2, r7, #3
   1092e:	7812      	ldrb	r2, [r2, #0]
   10930:	429a      	cmp	r2, r3
   10932:	d21f      	bcs.n	10974 <getIndexedNumber+0x60>
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
   10934:	4b13      	ldr	r3, [pc, #76]	; (10984 <getIndexedNumber+0x70>)
   10936:	223c      	movs	r2, #60	; 0x3c
   10938:	2100      	movs	r1, #0
   1093a:	0018      	movs	r0, r3
   1093c:	4b12      	ldr	r3, [pc, #72]	; (10988 <getIndexedNumber+0x74>)
   1093e:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+index, page_data);
   10940:	1cfb      	adds	r3, r7, #3
   10942:	781b      	ldrb	r3, [r3, #0]
   10944:	3309      	adds	r3, #9
   10946:	b2db      	uxtb	r3, r3
   10948:	4a0e      	ldr	r2, [pc, #56]	; (10984 <getIndexedNumber+0x70>)
   1094a:	0011      	movs	r1, r2
   1094c:	0018      	movs	r0, r3
   1094e:	4b0f      	ldr	r3, [pc, #60]	; (1098c <getIndexedNumber+0x78>)
   10950:	4798      	blx	r3
		//eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+index-1, page_data);
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10952:	2308      	movs	r3, #8
   10954:	18fa      	adds	r2, r7, r3
   10956:	4b0b      	ldr	r3, [pc, #44]	; (10984 <getIndexedNumber+0x70>)
   10958:	0010      	movs	r0, r2
   1095a:	0019      	movs	r1, r3
   1095c:	2318      	movs	r3, #24
   1095e:	001a      	movs	r2, r3
   10960:	4b0b      	ldr	r3, [pc, #44]	; (10990 <getIndexedNumber+0x7c>)
   10962:	4798      	blx	r3
		strcat(IndexNo,mobile_no.mobile_no_ee);
   10964:	2308      	movs	r3, #8
   10966:	18fb      	adds	r3, r7, r3
   10968:	1d1a      	adds	r2, r3, #4
   1096a:	687b      	ldr	r3, [r7, #4]
   1096c:	0011      	movs	r1, r2
   1096e:	0018      	movs	r0, r3
   10970:	4b08      	ldr	r3, [pc, #32]	; (10994 <getIndexedNumber+0x80>)
   10972:	4798      	blx	r3
	}
	return IndexNo;
   10974:	687b      	ldr	r3, [r7, #4]
}
   10976:	0018      	movs	r0, r3
   10978:	46bd      	mov	sp, r7
   1097a:	b008      	add	sp, #32
   1097c:	bd80      	pop	{r7, pc}
   1097e:	46c0      	nop			; (mov r8, r8)
   10980:	20000614 	.word	0x20000614
   10984:	20000584 	.word	0x20000584
   10988:	00028f13 	.word	0x00028f13
   1098c:	00023bfd 	.word	0x00023bfd
   10990:	00028edd 	.word	0x00028edd
   10994:	0002915d 	.word	0x0002915d

00010998 <isPrimaryNumber>:

bool isPrimaryNumber(char *number)
{
   10998:	b580      	push	{r7, lr}
   1099a:	b088      	sub	sp, #32
   1099c:	af00      	add	r7, sp, #0
   1099e:	6078      	str	r0, [r7, #4]
	if(user_count_struct.current_user_no_count > 0)
   109a0:	4b14      	ldr	r3, [pc, #80]	; (109f4 <isPrimaryNumber+0x5c>)
   109a2:	789b      	ldrb	r3, [r3, #2]
   109a4:	2b00      	cmp	r3, #0
   109a6:	d020      	beq.n	109ea <isPrimaryNumber+0x52>
	{
		char primaryNumber[20] = {0};
   109a8:	230c      	movs	r3, #12
   109aa:	18fb      	adds	r3, r7, r3
   109ac:	0018      	movs	r0, r3
   109ae:	2314      	movs	r3, #20
   109b0:	001a      	movs	r2, r3
   109b2:	2100      	movs	r1, #0
   109b4:	4b10      	ldr	r3, [pc, #64]	; (109f8 <isPrimaryNumber+0x60>)
   109b6:	4798      	blx	r3
		getIndexedNumber(&primaryNumber,user_count_struct.primaryNumberIndex);
   109b8:	4b0e      	ldr	r3, [pc, #56]	; (109f4 <isPrimaryNumber+0x5c>)
   109ba:	78da      	ldrb	r2, [r3, #3]
   109bc:	230c      	movs	r3, #12
   109be:	18fb      	adds	r3, r7, r3
   109c0:	0011      	movs	r1, r2
   109c2:	0018      	movs	r0, r3
   109c4:	4b0d      	ldr	r3, [pc, #52]	; (109fc <isPrimaryNumber+0x64>)
   109c6:	4798      	blx	r3
		if(strstr(number,primaryNumber))
   109c8:	230c      	movs	r3, #12
   109ca:	18fa      	adds	r2, r7, r3
   109cc:	687b      	ldr	r3, [r7, #4]
   109ce:	0011      	movs	r1, r2
   109d0:	0018      	movs	r0, r3
   109d2:	4b0b      	ldr	r3, [pc, #44]	; (10a00 <isPrimaryNumber+0x68>)
   109d4:	4798      	blx	r3
   109d6:	1e03      	subs	r3, r0, #0
   109d8:	d001      	beq.n	109de <isPrimaryNumber+0x46>
		{
			return true;
   109da:	2301      	movs	r3, #1
   109dc:	e006      	b.n	109ec <isPrimaryNumber+0x54>
		}
		else
		{
			return isAlterNumber(number);
   109de:	687b      	ldr	r3, [r7, #4]
   109e0:	0018      	movs	r0, r3
   109e2:	4b08      	ldr	r3, [pc, #32]	; (10a04 <isPrimaryNumber+0x6c>)
   109e4:	4798      	blx	r3
   109e6:	0003      	movs	r3, r0
   109e8:	e000      	b.n	109ec <isPrimaryNumber+0x54>
		//else
		//{
		//return isAlterNumber(number);
		//}
	}
	return false;
   109ea:	2300      	movs	r3, #0
}
   109ec:	0018      	movs	r0, r3
   109ee:	46bd      	mov	sp, r7
   109f0:	b008      	add	sp, #32
   109f2:	bd80      	pop	{r7, pc}
   109f4:	20000614 	.word	0x20000614
   109f8:	00028f13 	.word	0x00028f13
   109fc:	00010915 	.word	0x00010915
   10a00:	000291d3 	.word	0x000291d3
   10a04:	00010a09 	.word	0x00010a09

00010a08 <isAlterNumber>:

bool isAlterNumber(char *number)
{
   10a08:	b580      	push	{r7, lr}
   10a0a:	b082      	sub	sp, #8
   10a0c:	af00      	add	r7, sp, #0
   10a0e:	6078      	str	r0, [r7, #4]
	if(user_count_struct.current_user_no_count > 0)
   10a10:	4b0b      	ldr	r3, [pc, #44]	; (10a40 <isAlterNumber+0x38>)
   10a12:	789b      	ldrb	r3, [r3, #2]
   10a14:	2b00      	cmp	r3, #0
   10a16:	d00d      	beq.n	10a34 <isAlterNumber+0x2c>
	{
		if ((alternateNumber_struct.alterNumberPresent) && (strstr(number, alternateNumber_struct.alternateNumber_ee)))
   10a18:	4b0a      	ldr	r3, [pc, #40]	; (10a44 <isAlterNumber+0x3c>)
   10a1a:	789b      	ldrb	r3, [r3, #2]
   10a1c:	2b00      	cmp	r3, #0
   10a1e:	d009      	beq.n	10a34 <isAlterNumber+0x2c>
   10a20:	4a09      	ldr	r2, [pc, #36]	; (10a48 <isAlterNumber+0x40>)
   10a22:	687b      	ldr	r3, [r7, #4]
   10a24:	0011      	movs	r1, r2
   10a26:	0018      	movs	r0, r3
   10a28:	4b08      	ldr	r3, [pc, #32]	; (10a4c <isAlterNumber+0x44>)
   10a2a:	4798      	blx	r3
   10a2c:	1e03      	subs	r3, r0, #0
   10a2e:	d001      	beq.n	10a34 <isAlterNumber+0x2c>
		{
			return true;
   10a30:	2301      	movs	r3, #1
   10a32:	e000      	b.n	10a36 <isAlterNumber+0x2e>
		}
	}
	return false;
   10a34:	2300      	movs	r3, #0
}
   10a36:	0018      	movs	r0, r3
   10a38:	46bd      	mov	sp, r7
   10a3a:	b002      	add	sp, #8
   10a3c:	bd80      	pop	{r7, pc}
   10a3e:	46c0      	nop			; (mov r8, r8)
   10a40:	20000614 	.word	0x20000614
   10a44:	2000063c 	.word	0x2000063c
   10a48:	20000640 	.word	0x20000640
   10a4c:	000291d3 	.word	0x000291d3

00010a50 <isM2MNumber>:

bool isM2MNumber(char *number)
{
   10a50:	b580      	push	{r7, lr}
   10a52:	b082      	sub	sp, #8
   10a54:	af00      	add	r7, sp, #0
   10a56:	6078      	str	r0, [r7, #4]
	if ((m2m_Numbers_struct.m2mPresent) && strstr(number,m2m_Numbers_struct.m2mNumber_ee))
   10a58:	4b09      	ldr	r3, [pc, #36]	; (10a80 <isM2MNumber+0x30>)
   10a5a:	785b      	ldrb	r3, [r3, #1]
   10a5c:	2b00      	cmp	r3, #0
   10a5e:	d009      	beq.n	10a74 <isM2MNumber+0x24>
   10a60:	4a08      	ldr	r2, [pc, #32]	; (10a84 <isM2MNumber+0x34>)
   10a62:	687b      	ldr	r3, [r7, #4]
   10a64:	0011      	movs	r1, r2
   10a66:	0018      	movs	r0, r3
   10a68:	4b07      	ldr	r3, [pc, #28]	; (10a88 <isM2MNumber+0x38>)
   10a6a:	4798      	blx	r3
   10a6c:	1e03      	subs	r3, r0, #0
   10a6e:	d001      	beq.n	10a74 <isM2MNumber+0x24>
	{
		return true;
   10a70:	2301      	movs	r3, #1
   10a72:	e000      	b.n	10a76 <isM2MNumber+0x26>
	}
	return false;
   10a74:	2300      	movs	r3, #0
}
   10a76:	0018      	movs	r0, r3
   10a78:	46bd      	mov	sp, r7
   10a7a:	b002      	add	sp, #8
   10a7c:	bd80      	pop	{r7, pc}
   10a7e:	46c0      	nop			; (mov r8, r8)
   10a80:	20000554 	.word	0x20000554
   10a84:	2000055c 	.word	0x2000055c
   10a88:	000291d3 	.word	0x000291d3

00010a8c <isM2MRemoteNumber>:

bool isM2MRemoteNumber(char *number)
{
   10a8c:	b580      	push	{r7, lr}
   10a8e:	b082      	sub	sp, #8
   10a90:	af00      	add	r7, sp, #0
   10a92:	6078      	str	r0, [r7, #4]
	if ((m2m_Numbers_struct.m2mRemotePresent) && strstr(number,m2m_Numbers_struct.m2mremoteNumber_ee))
   10a94:	4b09      	ldr	r3, [pc, #36]	; (10abc <isM2MRemoteNumber+0x30>)
   10a96:	78db      	ldrb	r3, [r3, #3]
   10a98:	2b00      	cmp	r3, #0
   10a9a:	d009      	beq.n	10ab0 <isM2MRemoteNumber+0x24>
   10a9c:	4a08      	ldr	r2, [pc, #32]	; (10ac0 <isM2MRemoteNumber+0x34>)
   10a9e:	687b      	ldr	r3, [r7, #4]
   10aa0:	0011      	movs	r1, r2
   10aa2:	0018      	movs	r0, r3
   10aa4:	4b07      	ldr	r3, [pc, #28]	; (10ac4 <isM2MRemoteNumber+0x38>)
   10aa6:	4798      	blx	r3
   10aa8:	1e03      	subs	r3, r0, #0
   10aaa:	d001      	beq.n	10ab0 <isM2MRemoteNumber+0x24>
	{
		return true;
   10aac:	2301      	movs	r3, #1
   10aae:	e000      	b.n	10ab2 <isM2MRemoteNumber+0x26>
	}
	return false;
   10ab0:	2300      	movs	r3, #0
}
   10ab2:	0018      	movs	r0, r3
   10ab4:	46bd      	mov	sp, r7
   10ab6:	b002      	add	sp, #8
   10ab8:	bd80      	pop	{r7, pc}
   10aba:	46c0      	nop			; (mov r8, r8)
   10abc:	20000554 	.word	0x20000554
   10ac0:	20000570 	.word	0x20000570
   10ac4:	000291d3 	.word	0x000291d3

00010ac8 <getM2MNumber>:

char *getM2MNumber(char *m2mNo)
{
   10ac8:	b580      	push	{r7, lr}
   10aca:	b082      	sub	sp, #8
   10acc:	af00      	add	r7, sp, #0
   10ace:	6078      	str	r0, [r7, #4]
	if (m2m_Numbers_struct.m2mPresent)
   10ad0:	4b09      	ldr	r3, [pc, #36]	; (10af8 <getM2MNumber+0x30>)
   10ad2:	785b      	ldrb	r3, [r3, #1]
   10ad4:	2b00      	cmp	r3, #0
   10ad6:	d006      	beq.n	10ae6 <getM2MNumber+0x1e>
	{
		//strstr(m2mNo,m2m_Numbers_struct.m2mNumber_ee);
		strcpy(m2mNo,m2m_Numbers_struct.m2mNumber_ee);
   10ad8:	4a08      	ldr	r2, [pc, #32]	; (10afc <getM2MNumber+0x34>)
   10ada:	687b      	ldr	r3, [r7, #4]
   10adc:	0011      	movs	r1, r2
   10ade:	0018      	movs	r0, r3
   10ae0:	4b07      	ldr	r3, [pc, #28]	; (10b00 <getM2MNumber+0x38>)
   10ae2:	4798      	blx	r3
   10ae4:	e002      	b.n	10aec <getM2MNumber+0x24>
	}
	else
	{
		strcpy(m2mNo,"");
   10ae6:	687b      	ldr	r3, [r7, #4]
   10ae8:	2200      	movs	r2, #0
   10aea:	701a      	strb	r2, [r3, #0]
	}
	return m2mNo;
   10aec:	687b      	ldr	r3, [r7, #4]
}
   10aee:	0018      	movs	r0, r3
   10af0:	46bd      	mov	sp, r7
   10af2:	b002      	add	sp, #8
   10af4:	bd80      	pop	{r7, pc}
   10af6:	46c0      	nop			; (mov r8, r8)
   10af8:	20000554 	.word	0x20000554
   10afc:	2000055c 	.word	0x2000055c
   10b00:	00029193 	.word	0x00029193

00010b04 <getM2MRemoteNumber>:

char *getM2MRemoteNumber(char *m2mNoRemotNo)
{
   10b04:	b580      	push	{r7, lr}
   10b06:	b082      	sub	sp, #8
   10b08:	af00      	add	r7, sp, #0
   10b0a:	6078      	str	r0, [r7, #4]
	if (m2m_Numbers_struct.m2mRemotePresent)
   10b0c:	4b09      	ldr	r3, [pc, #36]	; (10b34 <getM2MRemoteNumber+0x30>)
   10b0e:	78db      	ldrb	r3, [r3, #3]
   10b10:	2b00      	cmp	r3, #0
   10b12:	d006      	beq.n	10b22 <getM2MRemoteNumber+0x1e>
	{
		strcpy(m2mNoRemotNo,m2m_Numbers_struct.m2mremoteNumber_ee);
   10b14:	4a08      	ldr	r2, [pc, #32]	; (10b38 <getM2MRemoteNumber+0x34>)
   10b16:	687b      	ldr	r3, [r7, #4]
   10b18:	0011      	movs	r1, r2
   10b1a:	0018      	movs	r0, r3
   10b1c:	4b07      	ldr	r3, [pc, #28]	; (10b3c <getM2MRemoteNumber+0x38>)
   10b1e:	4798      	blx	r3
   10b20:	e002      	b.n	10b28 <getM2MRemoteNumber+0x24>
	}
	else
	{
		strcpy(m2mNoRemotNo,"");
   10b22:	687b      	ldr	r3, [r7, #4]
   10b24:	2200      	movs	r2, #0
   10b26:	701a      	strb	r2, [r3, #0]
	}
	return m2mNoRemotNo;
   10b28:	687b      	ldr	r3, [r7, #4]
}
   10b2a:	0018      	movs	r0, r3
   10b2c:	46bd      	mov	sp, r7
   10b2e:	b002      	add	sp, #8
   10b30:	bd80      	pop	{r7, pc}
   10b32:	46c0      	nop			; (mov r8, r8)
   10b34:	20000554 	.word	0x20000554
   10b38:	20000570 	.word	0x20000570
   10b3c:	00029193 	.word	0x00029193

00010b40 <setM2MVerify>:

void setM2MVerify(bool flag)
{
   10b40:	b580      	push	{r7, lr}
   10b42:	b082      	sub	sp, #8
   10b44:	af00      	add	r7, sp, #0
   10b46:	0002      	movs	r2, r0
   10b48:	1dfb      	adds	r3, r7, #7
   10b4a:	701a      	strb	r2, [r3, #0]
	m2m_Numbers_struct.m2mVerified = (uint8_t)flag;
   10b4c:	1dfb      	adds	r3, r7, #7
   10b4e:	781a      	ldrb	r2, [r3, #0]
   10b50:	4b0a      	ldr	r3, [pc, #40]	; (10b7c <setM2MVerify+0x3c>)
   10b52:	709a      	strb	r2, [r3, #2]
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10b54:	4a0a      	ldr	r2, [pc, #40]	; (10b80 <setM2MVerify+0x40>)
   10b56:	4b09      	ldr	r3, [pc, #36]	; (10b7c <setM2MVerify+0x3c>)
   10b58:	0010      	movs	r0, r2
   10b5a:	0019      	movs	r1, r3
   10b5c:	2330      	movs	r3, #48	; 0x30
   10b5e:	001a      	movs	r2, r3
   10b60:	4b08      	ldr	r3, [pc, #32]	; (10b84 <setM2MVerify+0x44>)
   10b62:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10b64:	4b06      	ldr	r3, [pc, #24]	; (10b80 <setM2MVerify+0x40>)
   10b66:	0019      	movs	r1, r3
   10b68:	2019      	movs	r0, #25
   10b6a:	4b07      	ldr	r3, [pc, #28]	; (10b88 <setM2MVerify+0x48>)
   10b6c:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10b6e:	4b07      	ldr	r3, [pc, #28]	; (10b8c <setM2MVerify+0x4c>)
   10b70:	4798      	blx	r3
}
   10b72:	46c0      	nop			; (mov r8, r8)
   10b74:	46bd      	mov	sp, r7
   10b76:	b002      	add	sp, #8
   10b78:	bd80      	pop	{r7, pc}
   10b7a:	46c0      	nop			; (mov r8, r8)
   10b7c:	20000554 	.word	0x20000554
   10b80:	20000584 	.word	0x20000584
   10b84:	00028edd 	.word	0x00028edd
   10b88:	00023af1 	.word	0x00023af1
   10b8c:	00023c99 	.word	0x00023c99

00010b90 <setM2MRemoteVerified>:

void setM2MRemoteVerified(bool flag)
{
   10b90:	b580      	push	{r7, lr}
   10b92:	b082      	sub	sp, #8
   10b94:	af00      	add	r7, sp, #0
   10b96:	0002      	movs	r2, r0
   10b98:	1dfb      	adds	r3, r7, #7
   10b9a:	701a      	strb	r2, [r3, #0]
	m2m_Numbers_struct.m2mRemoteVerified = (uint8_t)flag;
   10b9c:	1dfb      	adds	r3, r7, #7
   10b9e:	781a      	ldrb	r2, [r3, #0]
   10ba0:	4b0a      	ldr	r3, [pc, #40]	; (10bcc <setM2MRemoteVerified+0x3c>)
   10ba2:	711a      	strb	r2, [r3, #4]
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10ba4:	4a0a      	ldr	r2, [pc, #40]	; (10bd0 <setM2MRemoteVerified+0x40>)
   10ba6:	4b09      	ldr	r3, [pc, #36]	; (10bcc <setM2MRemoteVerified+0x3c>)
   10ba8:	0010      	movs	r0, r2
   10baa:	0019      	movs	r1, r3
   10bac:	2330      	movs	r3, #48	; 0x30
   10bae:	001a      	movs	r2, r3
   10bb0:	4b08      	ldr	r3, [pc, #32]	; (10bd4 <setM2MRemoteVerified+0x44>)
   10bb2:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10bb4:	4b06      	ldr	r3, [pc, #24]	; (10bd0 <setM2MRemoteVerified+0x40>)
   10bb6:	0019      	movs	r1, r3
   10bb8:	2019      	movs	r0, #25
   10bba:	4b07      	ldr	r3, [pc, #28]	; (10bd8 <setM2MRemoteVerified+0x48>)
   10bbc:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10bbe:	4b07      	ldr	r3, [pc, #28]	; (10bdc <setM2MRemoteVerified+0x4c>)
   10bc0:	4798      	blx	r3
}
   10bc2:	46c0      	nop			; (mov r8, r8)
   10bc4:	46bd      	mov	sp, r7
   10bc6:	b002      	add	sp, #8
   10bc8:	bd80      	pop	{r7, pc}
   10bca:	46c0      	nop			; (mov r8, r8)
   10bcc:	20000554 	.word	0x20000554
   10bd0:	20000584 	.word	0x20000584
   10bd4:	00028edd 	.word	0x00028edd
   10bd8:	00023af1 	.word	0x00023af1
   10bdc:	00023c99 	.word	0x00023c99

00010be0 <saveM2MSettings>:

void saveM2MSettings(bool flag)
{
   10be0:	b580      	push	{r7, lr}
   10be2:	b082      	sub	sp, #8
   10be4:	af00      	add	r7, sp, #0
   10be6:	0002      	movs	r2, r0
   10be8:	1dfb      	adds	r3, r7, #7
   10bea:	701a      	strb	r2, [r3, #0]
	m2m_Numbers_struct.m2mSetting = (uint8_t)flag;
   10bec:	1dfb      	adds	r3, r7, #7
   10bee:	781a      	ldrb	r2, [r3, #0]
   10bf0:	4b0f      	ldr	r3, [pc, #60]	; (10c30 <saveM2MSettings+0x50>)
   10bf2:	715a      	strb	r2, [r3, #5]
	if(!flag)					// m2m turned off
   10bf4:	1dfb      	adds	r3, r7, #7
   10bf6:	781b      	ldrb	r3, [r3, #0]
   10bf8:	2201      	movs	r2, #1
   10bfa:	4053      	eors	r3, r2
   10bfc:	b2db      	uxtb	r3, r3
   10bfe:	2b00      	cmp	r3, #0
   10c00:	d002      	beq.n	10c08 <saveM2MSettings+0x28>
	{
		m2m_Numbers_struct.m2mRemoteVerified=false;
   10c02:	4b0b      	ldr	r3, [pc, #44]	; (10c30 <saveM2MSettings+0x50>)
   10c04:	2200      	movs	r2, #0
   10c06:	711a      	strb	r2, [r3, #4]
	}
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10c08:	4a0a      	ldr	r2, [pc, #40]	; (10c34 <saveM2MSettings+0x54>)
   10c0a:	4b09      	ldr	r3, [pc, #36]	; (10c30 <saveM2MSettings+0x50>)
   10c0c:	0010      	movs	r0, r2
   10c0e:	0019      	movs	r1, r3
   10c10:	2330      	movs	r3, #48	; 0x30
   10c12:	001a      	movs	r2, r3
   10c14:	4b08      	ldr	r3, [pc, #32]	; (10c38 <saveM2MSettings+0x58>)
   10c16:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10c18:	4b06      	ldr	r3, [pc, #24]	; (10c34 <saveM2MSettings+0x54>)
   10c1a:	0019      	movs	r1, r3
   10c1c:	2019      	movs	r0, #25
   10c1e:	4b07      	ldr	r3, [pc, #28]	; (10c3c <saveM2MSettings+0x5c>)
   10c20:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10c22:	4b07      	ldr	r3, [pc, #28]	; (10c40 <saveM2MSettings+0x60>)
   10c24:	4798      	blx	r3
}
   10c26:	46c0      	nop			; (mov r8, r8)
   10c28:	46bd      	mov	sp, r7
   10c2a:	b002      	add	sp, #8
   10c2c:	bd80      	pop	{r7, pc}
   10c2e:	46c0      	nop			; (mov r8, r8)
   10c30:	20000554 	.word	0x20000554
   10c34:	20000584 	.word	0x20000584
   10c38:	00028edd 	.word	0x00028edd
   10c3c:	00023af1 	.word	0x00023af1
   10c40:	00023c99 	.word	0x00023c99

00010c44 <addM2MNumber>:

void addM2MNumber(char *no)
{
   10c44:	b580      	push	{r7, lr}
   10c46:	b082      	sub	sp, #8
   10c48:	af00      	add	r7, sp, #0
   10c4a:	6078      	str	r0, [r7, #4]
	m2m_Numbers_struct.m2mPresent = true;
   10c4c:	4b0f      	ldr	r3, [pc, #60]	; (10c8c <addM2MNumber+0x48>)
   10c4e:	2201      	movs	r2, #1
   10c50:	705a      	strb	r2, [r3, #1]
	strcpy(m2m_Numbers_struct.m2mNumber_ee,no);
   10c52:	687a      	ldr	r2, [r7, #4]
   10c54:	4b0e      	ldr	r3, [pc, #56]	; (10c90 <addM2MNumber+0x4c>)
   10c56:	0011      	movs	r1, r2
   10c58:	0018      	movs	r0, r3
   10c5a:	4b0e      	ldr	r3, [pc, #56]	; (10c94 <addM2MNumber+0x50>)
   10c5c:	4798      	blx	r3
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10c5e:	4a0e      	ldr	r2, [pc, #56]	; (10c98 <addM2MNumber+0x54>)
   10c60:	4b0a      	ldr	r3, [pc, #40]	; (10c8c <addM2MNumber+0x48>)
   10c62:	0010      	movs	r0, r2
   10c64:	0019      	movs	r1, r3
   10c66:	2330      	movs	r3, #48	; 0x30
   10c68:	001a      	movs	r2, r3
   10c6a:	4b0c      	ldr	r3, [pc, #48]	; (10c9c <addM2MNumber+0x58>)
   10c6c:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10c6e:	4b0a      	ldr	r3, [pc, #40]	; (10c98 <addM2MNumber+0x54>)
   10c70:	0019      	movs	r1, r3
   10c72:	2019      	movs	r0, #25
   10c74:	4b0a      	ldr	r3, [pc, #40]	; (10ca0 <addM2MNumber+0x5c>)
   10c76:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10c78:	4b0a      	ldr	r3, [pc, #40]	; (10ca4 <addM2MNumber+0x60>)
   10c7a:	4798      	blx	r3
	setM2MVerify(false);
   10c7c:	2000      	movs	r0, #0
   10c7e:	4b0a      	ldr	r3, [pc, #40]	; (10ca8 <addM2MNumber+0x64>)
   10c80:	4798      	blx	r3
}
   10c82:	46c0      	nop			; (mov r8, r8)
   10c84:	46bd      	mov	sp, r7
   10c86:	b002      	add	sp, #8
   10c88:	bd80      	pop	{r7, pc}
   10c8a:	46c0      	nop			; (mov r8, r8)
   10c8c:	20000554 	.word	0x20000554
   10c90:	2000055c 	.word	0x2000055c
   10c94:	00029193 	.word	0x00029193
   10c98:	20000584 	.word	0x20000584
   10c9c:	00028edd 	.word	0x00028edd
   10ca0:	00023af1 	.word	0x00023af1
   10ca4:	00023c99 	.word	0x00023c99
   10ca8:	00010b41 	.word	0x00010b41

00010cac <addM2MRemoteNumber>:

void addM2MRemoteNumber(char *no)
{
   10cac:	b580      	push	{r7, lr}
   10cae:	b082      	sub	sp, #8
   10cb0:	af00      	add	r7, sp, #0
   10cb2:	6078      	str	r0, [r7, #4]
	m2m_Numbers_struct.m2mRemotePresent = true;
   10cb4:	4b10      	ldr	r3, [pc, #64]	; (10cf8 <addM2MRemoteNumber+0x4c>)
   10cb6:	2201      	movs	r2, #1
   10cb8:	70da      	strb	r2, [r3, #3]
	strcpy(m2m_Numbers_struct.m2mremoteNumber_ee,no);
   10cba:	687a      	ldr	r2, [r7, #4]
   10cbc:	4b0f      	ldr	r3, [pc, #60]	; (10cfc <addM2MRemoteNumber+0x50>)
   10cbe:	0011      	movs	r1, r2
   10cc0:	0018      	movs	r0, r3
   10cc2:	4b0f      	ldr	r3, [pc, #60]	; (10d00 <addM2MRemoteNumber+0x54>)
   10cc4:	4798      	blx	r3
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10cc6:	4a0f      	ldr	r2, [pc, #60]	; (10d04 <addM2MRemoteNumber+0x58>)
   10cc8:	4b0b      	ldr	r3, [pc, #44]	; (10cf8 <addM2MRemoteNumber+0x4c>)
   10cca:	0010      	movs	r0, r2
   10ccc:	0019      	movs	r1, r3
   10cce:	2330      	movs	r3, #48	; 0x30
   10cd0:	001a      	movs	r2, r3
   10cd2:	4b0d      	ldr	r3, [pc, #52]	; (10d08 <addM2MRemoteNumber+0x5c>)
   10cd4:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10cd6:	4b0b      	ldr	r3, [pc, #44]	; (10d04 <addM2MRemoteNumber+0x58>)
   10cd8:	0019      	movs	r1, r3
   10cda:	2019      	movs	r0, #25
   10cdc:	4b0b      	ldr	r3, [pc, #44]	; (10d0c <addM2MRemoteNumber+0x60>)
   10cde:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10ce0:	4b0b      	ldr	r3, [pc, #44]	; (10d10 <addM2MRemoteNumber+0x64>)
   10ce2:	4798      	blx	r3
	setM2MRemoteVerified(false);
   10ce4:	2000      	movs	r0, #0
   10ce6:	4b0b      	ldr	r3, [pc, #44]	; (10d14 <addM2MRemoteNumber+0x68>)
   10ce8:	4798      	blx	r3
	saveM2MSettings(false);
   10cea:	2000      	movs	r0, #0
   10cec:	4b0a      	ldr	r3, [pc, #40]	; (10d18 <addM2MRemoteNumber+0x6c>)
   10cee:	4798      	blx	r3
}
   10cf0:	46c0      	nop			; (mov r8, r8)
   10cf2:	46bd      	mov	sp, r7
   10cf4:	b002      	add	sp, #8
   10cf6:	bd80      	pop	{r7, pc}
   10cf8:	20000554 	.word	0x20000554
   10cfc:	20000570 	.word	0x20000570
   10d00:	00029193 	.word	0x00029193
   10d04:	20000584 	.word	0x20000584
   10d08:	00028edd 	.word	0x00028edd
   10d0c:	00023af1 	.word	0x00023af1
   10d10:	00023c99 	.word	0x00023c99
   10d14:	00010b91 	.word	0x00010b91
   10d18:	00010be1 	.word	0x00010be1

00010d1c <getActiveNumber>:

char *getActiveNumber(char *ActiveNo)
{
   10d1c:	b580      	push	{r7, lr}
   10d1e:	b08e      	sub	sp, #56	; 0x38
   10d20:	af00      	add	r7, sp, #0
   10d22:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count > 0)
   10d24:	4b28      	ldr	r3, [pc, #160]	; (10dc8 <getActiveNumber+0xac>)
   10d26:	789b      	ldrb	r3, [r3, #2]
   10d28:	2b00      	cmp	r3, #0
   10d2a:	d02b      	beq.n	10d84 <getActiveNumber+0x68>
	{
		if ((alternateNumber_struct.alterNumberSetting))
   10d2c:	4b27      	ldr	r3, [pc, #156]	; (10dcc <getActiveNumber+0xb0>)
   10d2e:	785b      	ldrb	r3, [r3, #1]
   10d30:	2b00      	cmp	r3, #0
   10d32:	d006      	beq.n	10d42 <getActiveNumber+0x26>
		{
			strcpy(ActiveNo,alternateNumber_struct.alternateNumber_ee);
   10d34:	4a26      	ldr	r2, [pc, #152]	; (10dd0 <getActiveNumber+0xb4>)
   10d36:	687b      	ldr	r3, [r7, #4]
   10d38:	0011      	movs	r1, r2
   10d3a:	0018      	movs	r0, r3
   10d3c:	4b25      	ldr	r3, [pc, #148]	; (10dd4 <getActiveNumber+0xb8>)
   10d3e:	4798      	blx	r3
   10d40:	e03c      	b.n	10dbc <getActiveNumber+0xa0>
		}
		else
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
   10d42:	4b25      	ldr	r3, [pc, #148]	; (10dd8 <getActiveNumber+0xbc>)
   10d44:	223c      	movs	r2, #60	; 0x3c
   10d46:	2100      	movs	r1, #0
   10d48:	0018      	movs	r0, r3
   10d4a:	4b24      	ldr	r3, [pc, #144]	; (10ddc <getActiveNumber+0xc0>)
   10d4c:	4798      	blx	r3
			eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+user_count_struct.primaryNumberIndex, page_data);
   10d4e:	4b1e      	ldr	r3, [pc, #120]	; (10dc8 <getActiveNumber+0xac>)
   10d50:	78db      	ldrb	r3, [r3, #3]
   10d52:	3309      	adds	r3, #9
   10d54:	b2db      	uxtb	r3, r3
   10d56:	4a20      	ldr	r2, [pc, #128]	; (10dd8 <getActiveNumber+0xbc>)
   10d58:	0011      	movs	r1, r2
   10d5a:	0018      	movs	r0, r3
   10d5c:	4b20      	ldr	r3, [pc, #128]	; (10de0 <getActiveNumber+0xc4>)
   10d5e:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10d60:	2320      	movs	r3, #32
   10d62:	18fa      	adds	r2, r7, r3
   10d64:	4b1c      	ldr	r3, [pc, #112]	; (10dd8 <getActiveNumber+0xbc>)
   10d66:	0010      	movs	r0, r2
   10d68:	0019      	movs	r1, r3
   10d6a:	2318      	movs	r3, #24
   10d6c:	001a      	movs	r2, r3
   10d6e:	4b1d      	ldr	r3, [pc, #116]	; (10de4 <getActiveNumber+0xc8>)
   10d70:	4798      	blx	r3
			strcpy(ActiveNo,mobile_no.mobile_no_ee);
   10d72:	2320      	movs	r3, #32
   10d74:	18fb      	adds	r3, r7, r3
   10d76:	1d1a      	adds	r2, r3, #4
   10d78:	687b      	ldr	r3, [r7, #4]
   10d7a:	0011      	movs	r1, r2
   10d7c:	0018      	movs	r0, r3
   10d7e:	4b15      	ldr	r3, [pc, #84]	; (10dd4 <getActiveNumber+0xb8>)
   10d80:	4798      	blx	r3
   10d82:	e01b      	b.n	10dbc <getActiveNumber+0xa0>
		}
	}
	else																					// no effect of this portion as registerEvent checks for numbercount is > 0
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
   10d84:	4b14      	ldr	r3, [pc, #80]	; (10dd8 <getActiveNumber+0xbc>)
   10d86:	223c      	movs	r2, #60	; 0x3c
   10d88:	2100      	movs	r1, #0
   10d8a:	0018      	movs	r0, r3
   10d8c:	4b13      	ldr	r3, [pc, #76]	; (10ddc <getActiveNumber+0xc0>)
   10d8e:	4798      	blx	r3
		eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE, page_data);
   10d90:	4b11      	ldr	r3, [pc, #68]	; (10dd8 <getActiveNumber+0xbc>)
   10d92:	0019      	movs	r1, r3
   10d94:	2003      	movs	r0, #3
   10d96:	4b12      	ldr	r3, [pc, #72]	; (10de0 <getActiveNumber+0xc4>)
   10d98:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10d9a:	2308      	movs	r3, #8
   10d9c:	18fa      	adds	r2, r7, r3
   10d9e:	4b0e      	ldr	r3, [pc, #56]	; (10dd8 <getActiveNumber+0xbc>)
   10da0:	0010      	movs	r0, r2
   10da2:	0019      	movs	r1, r3
   10da4:	2318      	movs	r3, #24
   10da6:	001a      	movs	r2, r3
   10da8:	4b0e      	ldr	r3, [pc, #56]	; (10de4 <getActiveNumber+0xc8>)
   10daa:	4798      	blx	r3
		strcpy(ActiveNo,mobile_no.mobile_no_ee);
   10dac:	2308      	movs	r3, #8
   10dae:	18fb      	adds	r3, r7, r3
   10db0:	1d1a      	adds	r2, r3, #4
   10db2:	687b      	ldr	r3, [r7, #4]
   10db4:	0011      	movs	r1, r2
   10db6:	0018      	movs	r0, r3
   10db8:	4b06      	ldr	r3, [pc, #24]	; (10dd4 <getActiveNumber+0xb8>)
   10dba:	4798      	blx	r3
	}
	
	return ActiveNo;
   10dbc:	687b      	ldr	r3, [r7, #4]
}
   10dbe:	0018      	movs	r0, r3
   10dc0:	46bd      	mov	sp, r7
   10dc2:	b00e      	add	sp, #56	; 0x38
   10dc4:	bd80      	pop	{r7, pc}
   10dc6:	46c0      	nop			; (mov r8, r8)
   10dc8:	20000614 	.word	0x20000614
   10dcc:	2000063c 	.word	0x2000063c
   10dd0:	20000640 	.word	0x20000640
   10dd4:	00029193 	.word	0x00029193
   10dd8:	20000584 	.word	0x20000584
   10ddc:	00028f13 	.word	0x00028f13
   10de0:	00023bfd 	.word	0x00023bfd
   10de4:	00028edd 	.word	0x00028edd

00010de8 <checkExists>:
uint8_t checkExists(char *number)
{
   10de8:	b580      	push	{r7, lr}
   10dea:	b08a      	sub	sp, #40	; 0x28
   10dec:	af00      	add	r7, sp, #0
   10dee:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count > 0)
   10df0:	4b33      	ldr	r3, [pc, #204]	; (10ec0 <checkExists+0xd8>)
   10df2:	789b      	ldrb	r3, [r3, #2]
   10df4:	2b00      	cmp	r3, #0
   10df6:	d039      	beq.n	10e6c <checkExists+0x84>
		//if(isPrimaryNumber(number))
		//{
		//return 0;
		//}
		
		for (uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
   10df8:	2327      	movs	r3, #39	; 0x27
   10dfa:	18fb      	adds	r3, r7, r3
   10dfc:	2200      	movs	r2, #0
   10dfe:	701a      	strb	r2, [r3, #0]
   10e00:	e02d      	b.n	10e5e <checkExists+0x76>
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
   10e02:	4b30      	ldr	r3, [pc, #192]	; (10ec4 <checkExists+0xdc>)
   10e04:	223c      	movs	r2, #60	; 0x3c
   10e06:	2100      	movs	r1, #0
   10e08:	0018      	movs	r0, r3
   10e0a:	4b2f      	ldr	r3, [pc, #188]	; (10ec8 <checkExists+0xe0>)
   10e0c:	4798      	blx	r3
			eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
   10e0e:	2327      	movs	r3, #39	; 0x27
   10e10:	18fb      	adds	r3, r7, r3
   10e12:	781b      	ldrb	r3, [r3, #0]
   10e14:	3309      	adds	r3, #9
   10e16:	b2db      	uxtb	r3, r3
   10e18:	4a2a      	ldr	r2, [pc, #168]	; (10ec4 <checkExists+0xdc>)
   10e1a:	0011      	movs	r1, r2
   10e1c:	0018      	movs	r0, r3
   10e1e:	4b2b      	ldr	r3, [pc, #172]	; (10ecc <checkExists+0xe4>)
   10e20:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10e22:	230c      	movs	r3, #12
   10e24:	18fa      	adds	r2, r7, r3
   10e26:	4b27      	ldr	r3, [pc, #156]	; (10ec4 <checkExists+0xdc>)
   10e28:	0010      	movs	r0, r2
   10e2a:	0019      	movs	r1, r3
   10e2c:	2318      	movs	r3, #24
   10e2e:	001a      	movs	r2, r3
   10e30:	4b27      	ldr	r3, [pc, #156]	; (10ed0 <checkExists+0xe8>)
   10e32:	4798      	blx	r3
			if (strstr(number,mobile_no.mobile_no_ee))
   10e34:	230c      	movs	r3, #12
   10e36:	18fb      	adds	r3, r7, r3
   10e38:	1d1a      	adds	r2, r3, #4
   10e3a:	687b      	ldr	r3, [r7, #4]
   10e3c:	0011      	movs	r1, r2
   10e3e:	0018      	movs	r0, r3
   10e40:	4b24      	ldr	r3, [pc, #144]	; (10ed4 <checkExists+0xec>)
   10e42:	4798      	blx	r3
   10e44:	1e03      	subs	r3, r0, #0
   10e46:	d003      	beq.n	10e50 <checkExists+0x68>
			{
				return i;
   10e48:	2327      	movs	r3, #39	; 0x27
   10e4a:	18fb      	adds	r3, r7, r3
   10e4c:	781b      	ldrb	r3, [r3, #0]
   10e4e:	e032      	b.n	10eb6 <checkExists+0xce>
		for (uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
   10e50:	2327      	movs	r3, #39	; 0x27
   10e52:	18fb      	adds	r3, r7, r3
   10e54:	781a      	ldrb	r2, [r3, #0]
   10e56:	2327      	movs	r3, #39	; 0x27
   10e58:	18fb      	adds	r3, r7, r3
   10e5a:	3201      	adds	r2, #1
   10e5c:	701a      	strb	r2, [r3, #0]
   10e5e:	4b18      	ldr	r3, [pc, #96]	; (10ec0 <checkExists+0xd8>)
   10e60:	789b      	ldrb	r3, [r3, #2]
   10e62:	2227      	movs	r2, #39	; 0x27
   10e64:	18ba      	adds	r2, r7, r2
   10e66:	7812      	ldrb	r2, [r2, #0]
   10e68:	429a      	cmp	r2, r3
   10e6a:	d3ca      	bcc.n	10e02 <checkExists+0x1a>
			}
		}
	}

	if(isAlterNumber(number))
   10e6c:	687b      	ldr	r3, [r7, #4]
   10e6e:	0018      	movs	r0, r3
   10e70:	4b19      	ldr	r3, [pc, #100]	; (10ed8 <checkExists+0xf0>)
   10e72:	4798      	blx	r3
   10e74:	1e03      	subs	r3, r0, #0
   10e76:	d001      	beq.n	10e7c <checkExists+0x94>
	{
		return 0xFD;
   10e78:	23fd      	movs	r3, #253	; 0xfd
   10e7a:	e01c      	b.n	10eb6 <checkExists+0xce>
	}

	if((m2m_Numbers_struct.m2mVerified) && isM2MNumber(number))
   10e7c:	4b17      	ldr	r3, [pc, #92]	; (10edc <checkExists+0xf4>)
   10e7e:	789b      	ldrb	r3, [r3, #2]
   10e80:	2b00      	cmp	r3, #0
   10e82:	d007      	beq.n	10e94 <checkExists+0xac>
   10e84:	687b      	ldr	r3, [r7, #4]
   10e86:	0018      	movs	r0, r3
   10e88:	4b15      	ldr	r3, [pc, #84]	; (10ee0 <checkExists+0xf8>)
   10e8a:	4798      	blx	r3
   10e8c:	1e03      	subs	r3, r0, #0
   10e8e:	d001      	beq.n	10e94 <checkExists+0xac>
	{
		return 0xFE;
   10e90:	23fe      	movs	r3, #254	; 0xfe
   10e92:	e010      	b.n	10eb6 <checkExists+0xce>
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
   10e94:	4b13      	ldr	r3, [pc, #76]	; (10ee4 <checkExists+0xfc>)
   10e96:	78db      	ldrb	r3, [r3, #3]
   10e98:	2b00      	cmp	r3, #0
   10e9a:	d00b      	beq.n	10eb4 <checkExists+0xcc>
	{
		if ((m2m_Numbers_struct.m2mRemoteVerified) && isM2MRemoteNumber(number))
   10e9c:	4b0f      	ldr	r3, [pc, #60]	; (10edc <checkExists+0xf4>)
   10e9e:	791b      	ldrb	r3, [r3, #4]
   10ea0:	2b00      	cmp	r3, #0
   10ea2:	d007      	beq.n	10eb4 <checkExists+0xcc>
   10ea4:	687b      	ldr	r3, [r7, #4]
   10ea6:	0018      	movs	r0, r3
   10ea8:	4b0f      	ldr	r3, [pc, #60]	; (10ee8 <checkExists+0x100>)
   10eaa:	4798      	blx	r3
   10eac:	1e03      	subs	r3, r0, #0
   10eae:	d001      	beq.n	10eb4 <checkExists+0xcc>
		{
			return 0xFE;
   10eb0:	23fe      	movs	r3, #254	; 0xfe
   10eb2:	e000      	b.n	10eb6 <checkExists+0xce>
		}
	}
	return 0xFF;
   10eb4:	23ff      	movs	r3, #255	; 0xff
}
   10eb6:	0018      	movs	r0, r3
   10eb8:	46bd      	mov	sp, r7
   10eba:	b00a      	add	sp, #40	; 0x28
   10ebc:	bd80      	pop	{r7, pc}
   10ebe:	46c0      	nop			; (mov r8, r8)
   10ec0:	20000614 	.word	0x20000614
   10ec4:	20000584 	.word	0x20000584
   10ec8:	00028f13 	.word	0x00028f13
   10ecc:	00023bfd 	.word	0x00023bfd
   10ed0:	00028edd 	.word	0x00028edd
   10ed4:	000291d3 	.word	0x000291d3
   10ed8:	00010a09 	.word	0x00010a09
   10edc:	20000554 	.word	0x20000554
   10ee0:	00010a51 	.word	0x00010a51
   10ee4:	2000062c 	.word	0x2000062c
   10ee8:	00010a8d 	.word	0x00010a8d

00010eec <addNumber>:

bool addNumber(char *number)
{
   10eec:	b580      	push	{r7, lr}
   10eee:	b088      	sub	sp, #32
   10ef0:	af00      	add	r7, sp, #0
   10ef2:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count == user_count_struct.total_user_no_count)
   10ef4:	4b33      	ldr	r3, [pc, #204]	; (10fc4 <addNumber+0xd8>)
   10ef6:	789a      	ldrb	r2, [r3, #2]
   10ef8:	4b32      	ldr	r3, [pc, #200]	; (10fc4 <addNumber+0xd8>)
   10efa:	785b      	ldrb	r3, [r3, #1]
   10efc:	429a      	cmp	r2, r3
   10efe:	d101      	bne.n	10f04 <addNumber+0x18>
	{
		return false;
   10f00:	2300      	movs	r3, #0
   10f02:	e05a      	b.n	10fba <addNumber+0xce>
	}
	else
	{
		if (checkExists(number) > 0xF0)
   10f04:	687b      	ldr	r3, [r7, #4]
   10f06:	0018      	movs	r0, r3
   10f08:	4b2f      	ldr	r3, [pc, #188]	; (10fc8 <addNumber+0xdc>)
   10f0a:	4798      	blx	r3
   10f0c:	0003      	movs	r3, r0
   10f0e:	2bf0      	cmp	r3, #240	; 0xf0
   10f10:	d952      	bls.n	10fb8 <addNumber+0xcc>
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
   10f12:	4b2e      	ldr	r3, [pc, #184]	; (10fcc <addNumber+0xe0>)
   10f14:	223c      	movs	r2, #60	; 0x3c
   10f16:	2100      	movs	r1, #0
   10f18:	0018      	movs	r0, r3
   10f1a:	4b2d      	ldr	r3, [pc, #180]	; (10fd0 <addNumber+0xe4>)
   10f1c:	4798      	blx	r3
			eeprom_emulator_read_page((USER_1_MOBILE_NUMBER_PAGE+user_count_struct.current_user_no_count), page_data);
   10f1e:	4b29      	ldr	r3, [pc, #164]	; (10fc4 <addNumber+0xd8>)
   10f20:	789b      	ldrb	r3, [r3, #2]
   10f22:	3309      	adds	r3, #9
   10f24:	b2db      	uxtb	r3, r3
   10f26:	4a29      	ldr	r2, [pc, #164]	; (10fcc <addNumber+0xe0>)
   10f28:	0011      	movs	r1, r2
   10f2a:	0018      	movs	r0, r3
   10f2c:	4b29      	ldr	r3, [pc, #164]	; (10fd4 <addNumber+0xe8>)
   10f2e:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10f30:	2308      	movs	r3, #8
   10f32:	18fa      	adds	r2, r7, r3
   10f34:	4b25      	ldr	r3, [pc, #148]	; (10fcc <addNumber+0xe0>)
   10f36:	0010      	movs	r0, r2
   10f38:	0019      	movs	r1, r3
   10f3a:	2318      	movs	r3, #24
   10f3c:	001a      	movs	r2, r3
   10f3e:	4b26      	ldr	r3, [pc, #152]	; (10fd8 <addNumber+0xec>)
   10f40:	4798      	blx	r3
			
			memset(mobile_no.mobile_no_ee, '\0', sizeof(mobile_no.mobile_no_ee));
   10f42:	2308      	movs	r3, #8
   10f44:	18fb      	adds	r3, r7, r3
   10f46:	3304      	adds	r3, #4
   10f48:	2214      	movs	r2, #20
   10f4a:	2100      	movs	r1, #0
   10f4c:	0018      	movs	r0, r3
   10f4e:	4b20      	ldr	r3, [pc, #128]	; (10fd0 <addNumber+0xe4>)
   10f50:	4798      	blx	r3
			strcpy(mobile_no.mobile_no_ee,number);
   10f52:	687a      	ldr	r2, [r7, #4]
   10f54:	2308      	movs	r3, #8
   10f56:	18fb      	adds	r3, r7, r3
   10f58:	3304      	adds	r3, #4
   10f5a:	0011      	movs	r1, r2
   10f5c:	0018      	movs	r0, r3
   10f5e:	4b1f      	ldr	r3, [pc, #124]	; (10fdc <addNumber+0xf0>)
   10f60:	4798      	blx	r3
			
			memcpy(page_data,&mobile_no,sizeof(mobile_no));
   10f62:	4a1a      	ldr	r2, [pc, #104]	; (10fcc <addNumber+0xe0>)
   10f64:	2308      	movs	r3, #8
   10f66:	18fb      	adds	r3, r7, r3
   10f68:	0010      	movs	r0, r2
   10f6a:	0019      	movs	r1, r3
   10f6c:	2318      	movs	r3, #24
   10f6e:	001a      	movs	r2, r3
   10f70:	4b19      	ldr	r3, [pc, #100]	; (10fd8 <addNumber+0xec>)
   10f72:	4798      	blx	r3
			eeprom_emulator_write_page((USER_1_MOBILE_NUMBER_PAGE+user_count_struct.current_user_no_count), page_data);
   10f74:	4b13      	ldr	r3, [pc, #76]	; (10fc4 <addNumber+0xd8>)
   10f76:	789b      	ldrb	r3, [r3, #2]
   10f78:	3309      	adds	r3, #9
   10f7a:	b2db      	uxtb	r3, r3
   10f7c:	4a13      	ldr	r2, [pc, #76]	; (10fcc <addNumber+0xe0>)
   10f7e:	0011      	movs	r1, r2
   10f80:	0018      	movs	r0, r3
   10f82:	4b17      	ldr	r3, [pc, #92]	; (10fe0 <addNumber+0xf4>)
   10f84:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
   10f86:	4b17      	ldr	r3, [pc, #92]	; (10fe4 <addNumber+0xf8>)
   10f88:	4798      	blx	r3
			
			user_count_struct.current_user_no_count++;
   10f8a:	4b0e      	ldr	r3, [pc, #56]	; (10fc4 <addNumber+0xd8>)
   10f8c:	789b      	ldrb	r3, [r3, #2]
   10f8e:	3301      	adds	r3, #1
   10f90:	b2da      	uxtb	r2, r3
   10f92:	4b0c      	ldr	r3, [pc, #48]	; (10fc4 <addNumber+0xd8>)
   10f94:	709a      	strb	r2, [r3, #2]
			
			memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   10f96:	4a0d      	ldr	r2, [pc, #52]	; (10fcc <addNumber+0xe0>)
   10f98:	4b0a      	ldr	r3, [pc, #40]	; (10fc4 <addNumber+0xd8>)
   10f9a:	0010      	movs	r0, r2
   10f9c:	0019      	movs	r1, r3
   10f9e:	2308      	movs	r3, #8
   10fa0:	001a      	movs	r2, r3
   10fa2:	4b0d      	ldr	r3, [pc, #52]	; (10fd8 <addNumber+0xec>)
   10fa4:	4798      	blx	r3
			eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   10fa6:	4b09      	ldr	r3, [pc, #36]	; (10fcc <addNumber+0xe0>)
   10fa8:	0019      	movs	r1, r3
   10faa:	2008      	movs	r0, #8
   10fac:	4b0c      	ldr	r3, [pc, #48]	; (10fe0 <addNumber+0xf4>)
   10fae:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
   10fb0:	4b0c      	ldr	r3, [pc, #48]	; (10fe4 <addNumber+0xf8>)
   10fb2:	4798      	blx	r3
			
			return true;
   10fb4:	2301      	movs	r3, #1
   10fb6:	e000      	b.n	10fba <addNumber+0xce>
		}
	}
	return false;
   10fb8:	2300      	movs	r3, #0
}
   10fba:	0018      	movs	r0, r3
   10fbc:	46bd      	mov	sp, r7
   10fbe:	b008      	add	sp, #32
   10fc0:	bd80      	pop	{r7, pc}
   10fc2:	46c0      	nop			; (mov r8, r8)
   10fc4:	20000614 	.word	0x20000614
   10fc8:	00010de9 	.word	0x00010de9
   10fcc:	20000584 	.word	0x20000584
   10fd0:	00028f13 	.word	0x00028f13
   10fd4:	00023bfd 	.word	0x00023bfd
   10fd8:	00028edd 	.word	0x00028edd
   10fdc:	00029193 	.word	0x00029193
   10fe0:	00023af1 	.word	0x00023af1
   10fe4:	00023c99 	.word	0x00023c99

00010fe8 <removeNumber>:

bool removeNumber(char *numer)
{
   10fe8:	b590      	push	{r4, r7, lr}
   10fea:	b085      	sub	sp, #20
   10fec:	af00      	add	r7, sp, #0
   10fee:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count < 2)
   10ff0:	4b3d      	ldr	r3, [pc, #244]	; (110e8 <removeNumber+0x100>)
   10ff2:	789b      	ldrb	r3, [r3, #2]
   10ff4:	2b01      	cmp	r3, #1
   10ff6:	d801      	bhi.n	10ffc <removeNumber+0x14>
	{
		return false;
   10ff8:	2300      	movs	r3, #0
   10ffa:	e071      	b.n	110e0 <removeNumber+0xf8>
	}
	else
	{
		uint8_t loc =  checkExists(numer);
   10ffc:	230e      	movs	r3, #14
   10ffe:	18fc      	adds	r4, r7, r3
   11000:	687b      	ldr	r3, [r7, #4]
   11002:	0018      	movs	r0, r3
   11004:	4b39      	ldr	r3, [pc, #228]	; (110ec <removeNumber+0x104>)
   11006:	4798      	blx	r3
   11008:	0003      	movs	r3, r0
   1100a:	7023      	strb	r3, [r4, #0]
		if ((loc < user_count_struct.total_user_no_count) && (loc != user_count_struct.primaryNumberIndex))	//number is not special number(i.e. alter,m2m,m2mRemote) and not primary number
   1100c:	4b36      	ldr	r3, [pc, #216]	; (110e8 <removeNumber+0x100>)
   1100e:	785b      	ldrb	r3, [r3, #1]
   11010:	220e      	movs	r2, #14
   11012:	18ba      	adds	r2, r7, r2
   11014:	7812      	ldrb	r2, [r2, #0]
   11016:	429a      	cmp	r2, r3
   11018:	d261      	bcs.n	110de <removeNumber+0xf6>
   1101a:	4b33      	ldr	r3, [pc, #204]	; (110e8 <removeNumber+0x100>)
   1101c:	78db      	ldrb	r3, [r3, #3]
   1101e:	220e      	movs	r2, #14
   11020:	18ba      	adds	r2, r7, r2
   11022:	7812      	ldrb	r2, [r2, #0]
   11024:	429a      	cmp	r2, r3
   11026:	d05a      	beq.n	110de <removeNumber+0xf6>
		{
			for (uint8_t i=loc;i<(user_count_struct.current_user_no_count-1);i++)
   11028:	230f      	movs	r3, #15
   1102a:	18fb      	adds	r3, r7, r3
   1102c:	220e      	movs	r2, #14
   1102e:	18ba      	adds	r2, r7, r2
   11030:	7812      	ldrb	r2, [r2, #0]
   11032:	701a      	strb	r2, [r3, #0]
   11034:	e022      	b.n	1107c <removeNumber+0x94>
			{
				memset(page_data, '\0', sizeof(page_data));
   11036:	4b2e      	ldr	r3, [pc, #184]	; (110f0 <removeNumber+0x108>)
   11038:	223c      	movs	r2, #60	; 0x3c
   1103a:	2100      	movs	r1, #0
   1103c:	0018      	movs	r0, r3
   1103e:	4b2d      	ldr	r3, [pc, #180]	; (110f4 <removeNumber+0x10c>)
   11040:	4798      	blx	r3
				eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i+1, page_data);
   11042:	230f      	movs	r3, #15
   11044:	18fb      	adds	r3, r7, r3
   11046:	781b      	ldrb	r3, [r3, #0]
   11048:	330a      	adds	r3, #10
   1104a:	b2db      	uxtb	r3, r3
   1104c:	4a28      	ldr	r2, [pc, #160]	; (110f0 <removeNumber+0x108>)
   1104e:	0011      	movs	r1, r2
   11050:	0018      	movs	r0, r3
   11052:	4b29      	ldr	r3, [pc, #164]	; (110f8 <removeNumber+0x110>)
   11054:	4798      	blx	r3
				eeprom_emulator_write_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
   11056:	230f      	movs	r3, #15
   11058:	18fb      	adds	r3, r7, r3
   1105a:	781b      	ldrb	r3, [r3, #0]
   1105c:	3309      	adds	r3, #9
   1105e:	b2db      	uxtb	r3, r3
   11060:	4a23      	ldr	r2, [pc, #140]	; (110f0 <removeNumber+0x108>)
   11062:	0011      	movs	r1, r2
   11064:	0018      	movs	r0, r3
   11066:	4b25      	ldr	r3, [pc, #148]	; (110fc <removeNumber+0x114>)
   11068:	4798      	blx	r3
				eeprom_emulator_commit_page_buffer();
   1106a:	4b25      	ldr	r3, [pc, #148]	; (11100 <removeNumber+0x118>)
   1106c:	4798      	blx	r3
			for (uint8_t i=loc;i<(user_count_struct.current_user_no_count-1);i++)
   1106e:	230f      	movs	r3, #15
   11070:	18fb      	adds	r3, r7, r3
   11072:	781a      	ldrb	r2, [r3, #0]
   11074:	230f      	movs	r3, #15
   11076:	18fb      	adds	r3, r7, r3
   11078:	3201      	adds	r2, #1
   1107a:	701a      	strb	r2, [r3, #0]
   1107c:	230f      	movs	r3, #15
   1107e:	18fb      	adds	r3, r7, r3
   11080:	781a      	ldrb	r2, [r3, #0]
   11082:	4b19      	ldr	r3, [pc, #100]	; (110e8 <removeNumber+0x100>)
   11084:	789b      	ldrb	r3, [r3, #2]
   11086:	3b01      	subs	r3, #1
   11088:	429a      	cmp	r2, r3
   1108a:	dbd4      	blt.n	11036 <removeNumber+0x4e>
			}
			user_count_struct.current_user_no_count--;
   1108c:	4b16      	ldr	r3, [pc, #88]	; (110e8 <removeNumber+0x100>)
   1108e:	789b      	ldrb	r3, [r3, #2]
   11090:	3b01      	subs	r3, #1
   11092:	b2da      	uxtb	r2, r3
   11094:	4b14      	ldr	r3, [pc, #80]	; (110e8 <removeNumber+0x100>)
   11096:	709a      	strb	r2, [r3, #2]
			
			if(loc==user_count_struct.secondaryNumberIndex || loc>user_count_struct.current_user_no_count-1)
   11098:	4b13      	ldr	r3, [pc, #76]	; (110e8 <removeNumber+0x100>)
   1109a:	791b      	ldrb	r3, [r3, #4]
   1109c:	220e      	movs	r2, #14
   1109e:	18ba      	adds	r2, r7, r2
   110a0:	7812      	ldrb	r2, [r2, #0]
   110a2:	429a      	cmp	r2, r3
   110a4:	d007      	beq.n	110b6 <removeNumber+0xce>
   110a6:	230e      	movs	r3, #14
   110a8:	18fb      	adds	r3, r7, r3
   110aa:	781a      	ldrb	r2, [r3, #0]
   110ac:	4b0e      	ldr	r3, [pc, #56]	; (110e8 <removeNumber+0x100>)
   110ae:	789b      	ldrb	r3, [r3, #2]
   110b0:	3b01      	subs	r3, #1
   110b2:	429a      	cmp	r2, r3
   110b4:	dd02      	ble.n	110bc <removeNumber+0xd4>
			{
				user_count_struct.secondaryNumberIndex= 1;
   110b6:	4b0c      	ldr	r3, [pc, #48]	; (110e8 <removeNumber+0x100>)
   110b8:	2201      	movs	r2, #1
   110ba:	711a      	strb	r2, [r3, #4]
			}
			memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   110bc:	4a0c      	ldr	r2, [pc, #48]	; (110f0 <removeNumber+0x108>)
   110be:	4b0a      	ldr	r3, [pc, #40]	; (110e8 <removeNumber+0x100>)
   110c0:	0010      	movs	r0, r2
   110c2:	0019      	movs	r1, r3
   110c4:	2308      	movs	r3, #8
   110c6:	001a      	movs	r2, r3
   110c8:	4b0e      	ldr	r3, [pc, #56]	; (11104 <removeNumber+0x11c>)
   110ca:	4798      	blx	r3
			eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   110cc:	4b08      	ldr	r3, [pc, #32]	; (110f0 <removeNumber+0x108>)
   110ce:	0019      	movs	r1, r3
   110d0:	2008      	movs	r0, #8
   110d2:	4b0a      	ldr	r3, [pc, #40]	; (110fc <removeNumber+0x114>)
   110d4:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
   110d6:	4b0a      	ldr	r3, [pc, #40]	; (11100 <removeNumber+0x118>)
   110d8:	4798      	blx	r3
			return true;
   110da:	2301      	movs	r3, #1
   110dc:	e000      	b.n	110e0 <removeNumber+0xf8>
		}
	}
	return false;
   110de:	2300      	movs	r3, #0
}
   110e0:	0018      	movs	r0, r3
   110e2:	46bd      	mov	sp, r7
   110e4:	b005      	add	sp, #20
   110e6:	bd90      	pop	{r4, r7, pc}
   110e8:	20000614 	.word	0x20000614
   110ec:	00010de9 	.word	0x00010de9
   110f0:	20000584 	.word	0x20000584
   110f4:	00028f13 	.word	0x00028f13
   110f8:	00023bfd 	.word	0x00023bfd
   110fc:	00023af1 	.word	0x00023af1
   11100:	00023c99 	.word	0x00023c99
   11104:	00028edd 	.word	0x00028edd

00011108 <clearNumbers>:

void clearNumbers(bool admin)
{
   11108:	b580      	push	{r7, lr}
   1110a:	b082      	sub	sp, #8
   1110c:	af00      	add	r7, sp, #0
   1110e:	0002      	movs	r2, r0
   11110:	1dfb      	adds	r3, r7, #7
   11112:	701a      	strb	r2, [r3, #0]
	if (admin)
   11114:	1dfb      	adds	r3, r7, #7
   11116:	781b      	ldrb	r3, [r3, #0]
   11118:	2b00      	cmp	r3, #0
   1111a:	d003      	beq.n	11124 <clearNumbers+0x1c>
	{
		user_count_struct.current_user_no_count = 0;
   1111c:	4b28      	ldr	r3, [pc, #160]	; (111c0 <clearNumbers+0xb8>)
   1111e:	2200      	movs	r2, #0
   11120:	709a      	strb	r2, [r3, #2]
   11122:	e018      	b.n	11156 <clearNumbers+0x4e>
	}
	else
	{
		memset(page_data, '\0', sizeof(page_data));
   11124:	4b27      	ldr	r3, [pc, #156]	; (111c4 <clearNumbers+0xbc>)
   11126:	223c      	movs	r2, #60	; 0x3c
   11128:	2100      	movs	r1, #0
   1112a:	0018      	movs	r0, r3
   1112c:	4b26      	ldr	r3, [pc, #152]	; (111c8 <clearNumbers+0xc0>)
   1112e:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+user_count_struct.primaryNumberIndex, page_data);
   11130:	4b23      	ldr	r3, [pc, #140]	; (111c0 <clearNumbers+0xb8>)
   11132:	78db      	ldrb	r3, [r3, #3]
   11134:	3309      	adds	r3, #9
   11136:	b2db      	uxtb	r3, r3
   11138:	4a22      	ldr	r2, [pc, #136]	; (111c4 <clearNumbers+0xbc>)
   1113a:	0011      	movs	r1, r2
   1113c:	0018      	movs	r0, r3
   1113e:	4b23      	ldr	r3, [pc, #140]	; (111cc <clearNumbers+0xc4>)
   11140:	4798      	blx	r3
		eeprom_emulator_write_page(USER_1_MOBILE_NUMBER_PAGE, page_data);
   11142:	4b20      	ldr	r3, [pc, #128]	; (111c4 <clearNumbers+0xbc>)
   11144:	0019      	movs	r1, r3
   11146:	2009      	movs	r0, #9
   11148:	4b21      	ldr	r3, [pc, #132]	; (111d0 <clearNumbers+0xc8>)
   1114a:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   1114c:	4b21      	ldr	r3, [pc, #132]	; (111d4 <clearNumbers+0xcc>)
   1114e:	4798      	blx	r3

		user_count_struct.current_user_no_count = 1;
   11150:	4b1b      	ldr	r3, [pc, #108]	; (111c0 <clearNumbers+0xb8>)
   11152:	2201      	movs	r2, #1
   11154:	709a      	strb	r2, [r3, #2]
		
	}
	user_count_struct.primaryNumberIndex=0;
   11156:	4b1a      	ldr	r3, [pc, #104]	; (111c0 <clearNumbers+0xb8>)
   11158:	2200      	movs	r2, #0
   1115a:	70da      	strb	r2, [r3, #3]
	user_count_struct.secondaryNumberIndex=1;
   1115c:	4b18      	ldr	r3, [pc, #96]	; (111c0 <clearNumbers+0xb8>)
   1115e:	2201      	movs	r2, #1
   11160:	711a      	strb	r2, [r3, #4]

	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   11162:	4a18      	ldr	r2, [pc, #96]	; (111c4 <clearNumbers+0xbc>)
   11164:	4b16      	ldr	r3, [pc, #88]	; (111c0 <clearNumbers+0xb8>)
   11166:	0010      	movs	r0, r2
   11168:	0019      	movs	r1, r3
   1116a:	2308      	movs	r3, #8
   1116c:	001a      	movs	r2, r3
   1116e:	4b1a      	ldr	r3, [pc, #104]	; (111d8 <clearNumbers+0xd0>)
   11170:	4798      	blx	r3
	user_count_struct.primaryNumberIndex=0;
   11172:	4b13      	ldr	r3, [pc, #76]	; (111c0 <clearNumbers+0xb8>)
   11174:	2200      	movs	r2, #0
   11176:	70da      	strb	r2, [r3, #3]
	user_count_struct.secondaryNumberIndex=1;
   11178:	4b11      	ldr	r3, [pc, #68]	; (111c0 <clearNumbers+0xb8>)
   1117a:	2201      	movs	r2, #1
   1117c:	711a      	strb	r2, [r3, #4]
	eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   1117e:	4b11      	ldr	r3, [pc, #68]	; (111c4 <clearNumbers+0xbc>)
   11180:	0019      	movs	r1, r3
   11182:	2008      	movs	r0, #8
   11184:	4b12      	ldr	r3, [pc, #72]	; (111d0 <clearNumbers+0xc8>)
   11186:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11188:	4b12      	ldr	r3, [pc, #72]	; (111d4 <clearNumbers+0xcc>)
   1118a:	4798      	blx	r3
	
	saveAlterNumberSetting(false);
   1118c:	2000      	movs	r0, #0
   1118e:	4b13      	ldr	r3, [pc, #76]	; (111dc <clearNumbers+0xd4>)
   11190:	4798      	blx	r3
	
	alternateNumber_struct.alterNumberPresent = false;
   11192:	4b13      	ldr	r3, [pc, #76]	; (111e0 <clearNumbers+0xd8>)
   11194:	2200      	movs	r2, #0
   11196:	709a      	strb	r2, [r3, #2]
	memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
   11198:	4a0a      	ldr	r2, [pc, #40]	; (111c4 <clearNumbers+0xbc>)
   1119a:	4b11      	ldr	r3, [pc, #68]	; (111e0 <clearNumbers+0xd8>)
   1119c:	0010      	movs	r0, r2
   1119e:	0019      	movs	r1, r3
   111a0:	2318      	movs	r3, #24
   111a2:	001a      	movs	r2, r3
   111a4:	4b0c      	ldr	r3, [pc, #48]	; (111d8 <clearNumbers+0xd0>)
   111a6:	4798      	blx	r3
	eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
   111a8:	4b06      	ldr	r3, [pc, #24]	; (111c4 <clearNumbers+0xbc>)
   111aa:	0019      	movs	r1, r3
   111ac:	2018      	movs	r0, #24
   111ae:	4b08      	ldr	r3, [pc, #32]	; (111d0 <clearNumbers+0xc8>)
   111b0:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   111b2:	4b08      	ldr	r3, [pc, #32]	; (111d4 <clearNumbers+0xcc>)
   111b4:	4798      	blx	r3
}
   111b6:	46c0      	nop			; (mov r8, r8)
   111b8:	46bd      	mov	sp, r7
   111ba:	b002      	add	sp, #8
   111bc:	bd80      	pop	{r7, pc}
   111be:	46c0      	nop			; (mov r8, r8)
   111c0:	20000614 	.word	0x20000614
   111c4:	20000584 	.word	0x20000584
   111c8:	00028f13 	.word	0x00028f13
   111cc:	00023bfd 	.word	0x00023bfd
   111d0:	00023af1 	.word	0x00023af1
   111d4:	00023c99 	.word	0x00023c99
   111d8:	00028edd 	.word	0x00028edd
   111dc:	000111e5 	.word	0x000111e5
   111e0:	2000063c 	.word	0x2000063c

000111e4 <saveAlterNumberSetting>:

void saveAlterNumberSetting(bool flag)
{
   111e4:	b580      	push	{r7, lr}
   111e6:	b082      	sub	sp, #8
   111e8:	af00      	add	r7, sp, #0
   111ea:	0002      	movs	r2, r0
   111ec:	1dfb      	adds	r3, r7, #7
   111ee:	701a      	strb	r2, [r3, #0]
	alternateNumber_struct.alterNumberSetting = flag;
   111f0:	1dfb      	adds	r3, r7, #7
   111f2:	781a      	ldrb	r2, [r3, #0]
   111f4:	4b0a      	ldr	r3, [pc, #40]	; (11220 <saveAlterNumberSetting+0x3c>)
   111f6:	705a      	strb	r2, [r3, #1]
	memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
   111f8:	4a0a      	ldr	r2, [pc, #40]	; (11224 <saveAlterNumberSetting+0x40>)
   111fa:	4b09      	ldr	r3, [pc, #36]	; (11220 <saveAlterNumberSetting+0x3c>)
   111fc:	0010      	movs	r0, r2
   111fe:	0019      	movs	r1, r3
   11200:	2318      	movs	r3, #24
   11202:	001a      	movs	r2, r3
   11204:	4b08      	ldr	r3, [pc, #32]	; (11228 <saveAlterNumberSetting+0x44>)
   11206:	4798      	blx	r3
	eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
   11208:	4b06      	ldr	r3, [pc, #24]	; (11224 <saveAlterNumberSetting+0x40>)
   1120a:	0019      	movs	r1, r3
   1120c:	2018      	movs	r0, #24
   1120e:	4b07      	ldr	r3, [pc, #28]	; (1122c <saveAlterNumberSetting+0x48>)
   11210:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11212:	4b07      	ldr	r3, [pc, #28]	; (11230 <saveAlterNumberSetting+0x4c>)
   11214:	4798      	blx	r3
}
   11216:	46c0      	nop			; (mov r8, r8)
   11218:	46bd      	mov	sp, r7
   1121a:	b002      	add	sp, #8
   1121c:	bd80      	pop	{r7, pc}
   1121e:	46c0      	nop			; (mov r8, r8)
   11220:	2000063c 	.word	0x2000063c
   11224:	20000584 	.word	0x20000584
   11228:	00028edd 	.word	0x00028edd
   1122c:	00023af1 	.word	0x00023af1
   11230:	00023c99 	.word	0x00023c99

00011234 <addAlternateNumber>:

bool addAlternateNumber(char *numer)
{
   11234:	b580      	push	{r7, lr}
   11236:	b082      	sub	sp, #8
   11238:	af00      	add	r7, sp, #0
   1123a:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count > 0)
   1123c:	4b11      	ldr	r3, [pc, #68]	; (11284 <addAlternateNumber+0x50>)
   1123e:	789b      	ldrb	r3, [r3, #2]
   11240:	2b00      	cmp	r3, #0
   11242:	d019      	beq.n	11278 <addAlternateNumber+0x44>
	{
		alternateNumber_struct.alterNumberPresent = true;
   11244:	4b10      	ldr	r3, [pc, #64]	; (11288 <addAlternateNumber+0x54>)
   11246:	2201      	movs	r2, #1
   11248:	709a      	strb	r2, [r3, #2]
		strcpy(alternateNumber_struct.alternateNumber_ee,numer);
   1124a:	687a      	ldr	r2, [r7, #4]
   1124c:	4b0f      	ldr	r3, [pc, #60]	; (1128c <addAlternateNumber+0x58>)
   1124e:	0011      	movs	r1, r2
   11250:	0018      	movs	r0, r3
   11252:	4b0f      	ldr	r3, [pc, #60]	; (11290 <addAlternateNumber+0x5c>)
   11254:	4798      	blx	r3
		memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
   11256:	4a0f      	ldr	r2, [pc, #60]	; (11294 <addAlternateNumber+0x60>)
   11258:	4b0b      	ldr	r3, [pc, #44]	; (11288 <addAlternateNumber+0x54>)
   1125a:	0010      	movs	r0, r2
   1125c:	0019      	movs	r1, r3
   1125e:	2318      	movs	r3, #24
   11260:	001a      	movs	r2, r3
   11262:	4b0d      	ldr	r3, [pc, #52]	; (11298 <addAlternateNumber+0x64>)
   11264:	4798      	blx	r3
		eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
   11266:	4b0b      	ldr	r3, [pc, #44]	; (11294 <addAlternateNumber+0x60>)
   11268:	0019      	movs	r1, r3
   1126a:	2018      	movs	r0, #24
   1126c:	4b0b      	ldr	r3, [pc, #44]	; (1129c <addAlternateNumber+0x68>)
   1126e:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   11270:	4b0b      	ldr	r3, [pc, #44]	; (112a0 <addAlternateNumber+0x6c>)
   11272:	4798      	blx	r3
		
		return true;
   11274:	2301      	movs	r3, #1
   11276:	e000      	b.n	1127a <addAlternateNumber+0x46>
	}
	return false;
   11278:	2300      	movs	r3, #0
}
   1127a:	0018      	movs	r0, r3
   1127c:	46bd      	mov	sp, r7
   1127e:	b002      	add	sp, #8
   11280:	bd80      	pop	{r7, pc}
   11282:	46c0      	nop			; (mov r8, r8)
   11284:	20000614 	.word	0x20000614
   11288:	2000063c 	.word	0x2000063c
   1128c:	20000640 	.word	0x20000640
   11290:	00029193 	.word	0x00029193
   11294:	20000584 	.word	0x20000584
   11298:	00028edd 	.word	0x00028edd
   1129c:	00023af1 	.word	0x00023af1
   112a0:	00023c99 	.word	0x00023c99

000112a4 <saveAutoStartSettings>:

void saveAutoStartSettings(bool flag)
{
   112a4:	b580      	push	{r7, lr}
   112a6:	b082      	sub	sp, #8
   112a8:	af00      	add	r7, sp, #0
   112aa:	0002      	movs	r2, r0
   112ac:	1dfb      	adds	r3, r7, #7
   112ae:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.autoStartAddress = (uint8_t)flag;
   112b0:	1dfb      	adds	r3, r7, #7
   112b2:	781a      	ldrb	r2, [r3, #0]
   112b4:	4b09      	ldr	r3, [pc, #36]	; (112dc <saveAutoStartSettings+0x38>)
   112b6:	705a      	strb	r2, [r3, #1]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   112b8:	4908      	ldr	r1, [pc, #32]	; (112dc <saveAutoStartSettings+0x38>)
   112ba:	4b09      	ldr	r3, [pc, #36]	; (112e0 <saveAutoStartSettings+0x3c>)
   112bc:	2230      	movs	r2, #48	; 0x30
   112be:	0018      	movs	r0, r3
   112c0:	4b08      	ldr	r3, [pc, #32]	; (112e4 <saveAutoStartSettings+0x40>)
   112c2:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   112c4:	4b06      	ldr	r3, [pc, #24]	; (112e0 <saveAutoStartSettings+0x3c>)
   112c6:	0019      	movs	r1, r3
   112c8:	201a      	movs	r0, #26
   112ca:	4b07      	ldr	r3, [pc, #28]	; (112e8 <saveAutoStartSettings+0x44>)
   112cc:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   112ce:	4b07      	ldr	r3, [pc, #28]	; (112ec <saveAutoStartSettings+0x48>)
   112d0:	4798      	blx	r3
}
   112d2:	46c0      	nop			; (mov r8, r8)
   112d4:	46bd      	mov	sp, r7
   112d6:	b002      	add	sp, #8
   112d8:	bd80      	pop	{r7, pc}
   112da:	46c0      	nop			; (mov r8, r8)
   112dc:	20000654 	.word	0x20000654
   112e0:	20000584 	.word	0x20000584
   112e4:	00028edd 	.word	0x00028edd
   112e8:	00023af1 	.word	0x00023af1
   112ec:	00023c99 	.word	0x00023c99

000112f0 <saveAutoStartTimeSettings>:

void saveAutoStartTimeSettings(uint16_t value)
{
   112f0:	b580      	push	{r7, lr}
   112f2:	b082      	sub	sp, #8
   112f4:	af00      	add	r7, sp, #0
   112f6:	0002      	movs	r2, r0
   112f8:	1dbb      	adds	r3, r7, #6
   112fa:	801a      	strh	r2, [r3, #0]
	user_settings_parameter_struct.autoStartTimeAddress = value;
   112fc:	4b0a      	ldr	r3, [pc, #40]	; (11328 <saveAutoStartTimeSettings+0x38>)
   112fe:	1dba      	adds	r2, r7, #6
   11300:	8812      	ldrh	r2, [r2, #0]
   11302:	805a      	strh	r2, [r3, #2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11304:	4908      	ldr	r1, [pc, #32]	; (11328 <saveAutoStartTimeSettings+0x38>)
   11306:	4b09      	ldr	r3, [pc, #36]	; (1132c <saveAutoStartTimeSettings+0x3c>)
   11308:	2230      	movs	r2, #48	; 0x30
   1130a:	0018      	movs	r0, r3
   1130c:	4b08      	ldr	r3, [pc, #32]	; (11330 <saveAutoStartTimeSettings+0x40>)
   1130e:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11310:	4b06      	ldr	r3, [pc, #24]	; (1132c <saveAutoStartTimeSettings+0x3c>)
   11312:	0019      	movs	r1, r3
   11314:	201a      	movs	r0, #26
   11316:	4b07      	ldr	r3, [pc, #28]	; (11334 <saveAutoStartTimeSettings+0x44>)
   11318:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   1131a:	4b07      	ldr	r3, [pc, #28]	; (11338 <saveAutoStartTimeSettings+0x48>)
   1131c:	4798      	blx	r3
}
   1131e:	46c0      	nop			; (mov r8, r8)
   11320:	46bd      	mov	sp, r7
   11322:	b002      	add	sp, #8
   11324:	bd80      	pop	{r7, pc}
   11326:	46c0      	nop			; (mov r8, r8)
   11328:	20000654 	.word	0x20000654
   1132c:	20000584 	.word	0x20000584
   11330:	00028edd 	.word	0x00028edd
   11334:	00023af1 	.word	0x00023af1
   11338:	00023c99 	.word	0x00023c99

0001133c <saveDNDSettings>:

void saveDNDSettings(char flag)
{
   1133c:	b580      	push	{r7, lr}
   1133e:	b082      	sub	sp, #8
   11340:	af00      	add	r7, sp, #0
   11342:	0002      	movs	r2, r0
   11344:	1dfb      	adds	r3, r7, #7
   11346:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.dndAddress = flag;
   11348:	4b0a      	ldr	r3, [pc, #40]	; (11374 <saveDNDSettings+0x38>)
   1134a:	1dfa      	adds	r2, r7, #7
   1134c:	7812      	ldrb	r2, [r2, #0]
   1134e:	711a      	strb	r2, [r3, #4]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11350:	4908      	ldr	r1, [pc, #32]	; (11374 <saveDNDSettings+0x38>)
   11352:	4b09      	ldr	r3, [pc, #36]	; (11378 <saveDNDSettings+0x3c>)
   11354:	2230      	movs	r2, #48	; 0x30
   11356:	0018      	movs	r0, r3
   11358:	4b08      	ldr	r3, [pc, #32]	; (1137c <saveDNDSettings+0x40>)
   1135a:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1135c:	4b06      	ldr	r3, [pc, #24]	; (11378 <saveDNDSettings+0x3c>)
   1135e:	0019      	movs	r1, r3
   11360:	201a      	movs	r0, #26
   11362:	4b07      	ldr	r3, [pc, #28]	; (11380 <saveDNDSettings+0x44>)
   11364:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11366:	4b07      	ldr	r3, [pc, #28]	; (11384 <saveDNDSettings+0x48>)
   11368:	4798      	blx	r3
}
   1136a:	46c0      	nop			; (mov r8, r8)
   1136c:	46bd      	mov	sp, r7
   1136e:	b002      	add	sp, #8
   11370:	bd80      	pop	{r7, pc}
   11372:	46c0      	nop			; (mov r8, r8)
   11374:	20000654 	.word	0x20000654
   11378:	20000584 	.word	0x20000584
   1137c:	00028edd 	.word	0x00028edd
   11380:	00023af1 	.word	0x00023af1
   11384:	00023c99 	.word	0x00023c99

00011388 <saveResponseSettings>:
//eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
//eeprom_emulator_commit_page_buffer();
//}

void saveResponseSettings(char response)
{
   11388:	b580      	push	{r7, lr}
   1138a:	b082      	sub	sp, #8
   1138c:	af00      	add	r7, sp, #0
   1138e:	0002      	movs	r2, r0
   11390:	1dfb      	adds	r3, r7, #7
   11392:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.responseAddress = response;
   11394:	4b0a      	ldr	r3, [pc, #40]	; (113c0 <saveResponseSettings+0x38>)
   11396:	1dfa      	adds	r2, r7, #7
   11398:	7812      	ldrb	r2, [r2, #0]
   1139a:	715a      	strb	r2, [r3, #5]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1139c:	4908      	ldr	r1, [pc, #32]	; (113c0 <saveResponseSettings+0x38>)
   1139e:	4b09      	ldr	r3, [pc, #36]	; (113c4 <saveResponseSettings+0x3c>)
   113a0:	2230      	movs	r2, #48	; 0x30
   113a2:	0018      	movs	r0, r3
   113a4:	4b08      	ldr	r3, [pc, #32]	; (113c8 <saveResponseSettings+0x40>)
   113a6:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   113a8:	4b06      	ldr	r3, [pc, #24]	; (113c4 <saveResponseSettings+0x3c>)
   113aa:	0019      	movs	r1, r3
   113ac:	201a      	movs	r0, #26
   113ae:	4b07      	ldr	r3, [pc, #28]	; (113cc <saveResponseSettings+0x44>)
   113b0:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   113b2:	4b07      	ldr	r3, [pc, #28]	; (113d0 <saveResponseSettings+0x48>)
   113b4:	4798      	blx	r3
}
   113b6:	46c0      	nop			; (mov r8, r8)
   113b8:	46bd      	mov	sp, r7
   113ba:	b002      	add	sp, #8
   113bc:	bd80      	pop	{r7, pc}
   113be:	46c0      	nop			; (mov r8, r8)
   113c0:	20000654 	.word	0x20000654
   113c4:	20000584 	.word	0x20000584
   113c8:	00028edd 	.word	0x00028edd
   113cc:	00023af1 	.word	0x00023af1
   113d0:	00023c99 	.word	0x00023c99

000113d4 <saveNoCallSettings>:

void saveNoCallSettings(bool flag,uint8_t startHour,uint8_t startMinute,uint8_t stopHour,uint8_t stopMinute)
{
   113d4:	b5b0      	push	{r4, r5, r7, lr}
   113d6:	b082      	sub	sp, #8
   113d8:	af00      	add	r7, sp, #0
   113da:	0005      	movs	r5, r0
   113dc:	000c      	movs	r4, r1
   113de:	0010      	movs	r0, r2
   113e0:	0019      	movs	r1, r3
   113e2:	1dfb      	adds	r3, r7, #7
   113e4:	1c2a      	adds	r2, r5, #0
   113e6:	701a      	strb	r2, [r3, #0]
   113e8:	1dbb      	adds	r3, r7, #6
   113ea:	1c22      	adds	r2, r4, #0
   113ec:	701a      	strb	r2, [r3, #0]
   113ee:	1d7b      	adds	r3, r7, #5
   113f0:	1c02      	adds	r2, r0, #0
   113f2:	701a      	strb	r2, [r3, #0]
   113f4:	1d3b      	adds	r3, r7, #4
   113f6:	1c0a      	adds	r2, r1, #0
   113f8:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.noCallAddress = (uint8_t)flag;
   113fa:	1dfb      	adds	r3, r7, #7
   113fc:	781a      	ldrb	r2, [r3, #0]
   113fe:	4b14      	ldr	r3, [pc, #80]	; (11450 <saveNoCallSettings+0x7c>)
   11400:	725a      	strb	r2, [r3, #9]
	if (user_settings_parameter_struct.noCallAddress)
   11402:	4b13      	ldr	r3, [pc, #76]	; (11450 <saveNoCallSettings+0x7c>)
   11404:	7a5b      	ldrb	r3, [r3, #9]
   11406:	2b00      	cmp	r3, #0
   11408:	d010      	beq.n	1142c <saveNoCallSettings+0x58>
	{
		user_settings_parameter_struct.noCallStartTimeHourAddress = startHour;
   1140a:	4b11      	ldr	r3, [pc, #68]	; (11450 <saveNoCallSettings+0x7c>)
   1140c:	1dba      	adds	r2, r7, #6
   1140e:	7812      	ldrb	r2, [r2, #0]
   11410:	729a      	strb	r2, [r3, #10]
		user_settings_parameter_struct.noCallStartTimeMinuteAddress = startMinute;
   11412:	4b0f      	ldr	r3, [pc, #60]	; (11450 <saveNoCallSettings+0x7c>)
   11414:	1d7a      	adds	r2, r7, #5
   11416:	7812      	ldrb	r2, [r2, #0]
   11418:	72da      	strb	r2, [r3, #11]
		
		user_settings_parameter_struct.noCallStopTimeHourAddress = stopHour;
   1141a:	4b0d      	ldr	r3, [pc, #52]	; (11450 <saveNoCallSettings+0x7c>)
   1141c:	1d3a      	adds	r2, r7, #4
   1141e:	7812      	ldrb	r2, [r2, #0]
   11420:	731a      	strb	r2, [r3, #12]
		user_settings_parameter_struct.noCallStopTimeMinuteAddress = stopMinute;
   11422:	4b0b      	ldr	r3, [pc, #44]	; (11450 <saveNoCallSettings+0x7c>)
   11424:	2218      	movs	r2, #24
   11426:	18ba      	adds	r2, r7, r2
   11428:	7812      	ldrb	r2, [r2, #0]
   1142a:	735a      	strb	r2, [r3, #13]
	}
	
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1142c:	4908      	ldr	r1, [pc, #32]	; (11450 <saveNoCallSettings+0x7c>)
   1142e:	4b09      	ldr	r3, [pc, #36]	; (11454 <saveNoCallSettings+0x80>)
   11430:	2230      	movs	r2, #48	; 0x30
   11432:	0018      	movs	r0, r3
   11434:	4b08      	ldr	r3, [pc, #32]	; (11458 <saveNoCallSettings+0x84>)
   11436:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11438:	4b06      	ldr	r3, [pc, #24]	; (11454 <saveNoCallSettings+0x80>)
   1143a:	0019      	movs	r1, r3
   1143c:	201a      	movs	r0, #26
   1143e:	4b07      	ldr	r3, [pc, #28]	; (1145c <saveNoCallSettings+0x88>)
   11440:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11442:	4b07      	ldr	r3, [pc, #28]	; (11460 <saveNoCallSettings+0x8c>)
   11444:	4798      	blx	r3
}
   11446:	46c0      	nop			; (mov r8, r8)
   11448:	46bd      	mov	sp, r7
   1144a:	b002      	add	sp, #8
   1144c:	bdb0      	pop	{r4, r5, r7, pc}
   1144e:	46c0      	nop			; (mov r8, r8)
   11450:	20000654 	.word	0x20000654
   11454:	20000584 	.word	0x20000584
   11458:	00028edd 	.word	0x00028edd
   1145c:	00023af1 	.word	0x00023af1
   11460:	00023c99 	.word	0x00023c99

00011464 <saveWaterBypassSettings>:

void saveWaterBypassSettings(bool flag)
{
   11464:	b580      	push	{r7, lr}
   11466:	b082      	sub	sp, #8
   11468:	af00      	add	r7, sp, #0
   1146a:	0002      	movs	r2, r0
   1146c:	1dfb      	adds	r3, r7, #7
   1146e:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.waterBypassAddress = (uint8_t)flag;
   11470:	1dfb      	adds	r3, r7, #7
   11472:	781a      	ldrb	r2, [r3, #0]
   11474:	4b09      	ldr	r3, [pc, #36]	; (1149c <saveWaterBypassSettings+0x38>)
   11476:	77da      	strb	r2, [r3, #31]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11478:	4908      	ldr	r1, [pc, #32]	; (1149c <saveWaterBypassSettings+0x38>)
   1147a:	4b09      	ldr	r3, [pc, #36]	; (114a0 <saveWaterBypassSettings+0x3c>)
   1147c:	2230      	movs	r2, #48	; 0x30
   1147e:	0018      	movs	r0, r3
   11480:	4b08      	ldr	r3, [pc, #32]	; (114a4 <saveWaterBypassSettings+0x40>)
   11482:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11484:	4b06      	ldr	r3, [pc, #24]	; (114a0 <saveWaterBypassSettings+0x3c>)
   11486:	0019      	movs	r1, r3
   11488:	201a      	movs	r0, #26
   1148a:	4b07      	ldr	r3, [pc, #28]	; (114a8 <saveWaterBypassSettings+0x44>)
   1148c:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   1148e:	4b07      	ldr	r3, [pc, #28]	; (114ac <saveWaterBypassSettings+0x48>)
   11490:	4798      	blx	r3
}
   11492:	46c0      	nop			; (mov r8, r8)
   11494:	46bd      	mov	sp, r7
   11496:	b002      	add	sp, #8
   11498:	bd80      	pop	{r7, pc}
   1149a:	46c0      	nop			; (mov r8, r8)
   1149c:	20000654 	.word	0x20000654
   114a0:	20000584 	.word	0x20000584
   114a4:	00028edd 	.word	0x00028edd
   114a8:	00023af1 	.word	0x00023af1
   114ac:	00023c99 	.word	0x00023c99

000114b0 <savePreventOverFlowSettings>:

void savePreventOverFlowSettings(bool flag)
{
   114b0:	b580      	push	{r7, lr}
   114b2:	b082      	sub	sp, #8
   114b4:	af00      	add	r7, sp, #0
   114b6:	0002      	movs	r2, r0
   114b8:	1dfb      	adds	r3, r7, #7
   114ba:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.preventOverFlowAddress = (uint8_t)flag;
   114bc:	1dfb      	adds	r3, r7, #7
   114be:	781a      	ldrb	r2, [r3, #0]
   114c0:	4b09      	ldr	r3, [pc, #36]	; (114e8 <savePreventOverFlowSettings+0x38>)
   114c2:	779a      	strb	r2, [r3, #30]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   114c4:	4908      	ldr	r1, [pc, #32]	; (114e8 <savePreventOverFlowSettings+0x38>)
   114c6:	4b09      	ldr	r3, [pc, #36]	; (114ec <savePreventOverFlowSettings+0x3c>)
   114c8:	2230      	movs	r2, #48	; 0x30
   114ca:	0018      	movs	r0, r3
   114cc:	4b08      	ldr	r3, [pc, #32]	; (114f0 <savePreventOverFlowSettings+0x40>)
   114ce:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   114d0:	4b06      	ldr	r3, [pc, #24]	; (114ec <savePreventOverFlowSettings+0x3c>)
   114d2:	0019      	movs	r1, r3
   114d4:	201a      	movs	r0, #26
   114d6:	4b07      	ldr	r3, [pc, #28]	; (114f4 <savePreventOverFlowSettings+0x44>)
   114d8:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   114da:	4b07      	ldr	r3, [pc, #28]	; (114f8 <savePreventOverFlowSettings+0x48>)
   114dc:	4798      	blx	r3
}
   114de:	46c0      	nop			; (mov r8, r8)
   114e0:	46bd      	mov	sp, r7
   114e2:	b002      	add	sp, #8
   114e4:	bd80      	pop	{r7, pc}
   114e6:	46c0      	nop			; (mov r8, r8)
   114e8:	20000654 	.word	0x20000654
   114ec:	20000584 	.word	0x20000584
   114f0:	00028edd 	.word	0x00028edd
   114f4:	00023af1 	.word	0x00023af1
   114f8:	00023c99 	.word	0x00023c99

000114fc <setOverloadPer>:
//eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
//eeprom_emulator_commit_page_buffer();
//}

bool setOverloadPer(uint8_t overloadPerValue)
{
   114fc:	b580      	push	{r7, lr}
   114fe:	b082      	sub	sp, #8
   11500:	af00      	add	r7, sp, #0
   11502:	0002      	movs	r2, r0
   11504:	1dfb      	adds	r3, r7, #7
   11506:	701a      	strb	r2, [r3, #0]
	if(overloadPerValue>100)
   11508:	1dfb      	adds	r3, r7, #7
   1150a:	781b      	ldrb	r3, [r3, #0]
   1150c:	2b64      	cmp	r3, #100	; 0x64
   1150e:	d918      	bls.n	11542 <setOverloadPer+0x46>
	{
		user_settings_parameter_struct.overloadPerAddress = overloadPerValue;
   11510:	4b0e      	ldr	r3, [pc, #56]	; (1154c <setOverloadPer+0x50>)
   11512:	1dfa      	adds	r2, r7, #7
   11514:	7812      	ldrb	r2, [r2, #0]
   11516:	775a      	strb	r2, [r3, #29]
		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11518:	490c      	ldr	r1, [pc, #48]	; (1154c <setOverloadPer+0x50>)
   1151a:	4b0d      	ldr	r3, [pc, #52]	; (11550 <setOverloadPer+0x54>)
   1151c:	2230      	movs	r2, #48	; 0x30
   1151e:	0018      	movs	r0, r3
   11520:	4b0c      	ldr	r3, [pc, #48]	; (11554 <setOverloadPer+0x58>)
   11522:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11524:	4b0a      	ldr	r3, [pc, #40]	; (11550 <setOverloadPer+0x54>)
   11526:	0019      	movs	r1, r3
   11528:	201a      	movs	r0, #26
   1152a:	4b0b      	ldr	r3, [pc, #44]	; (11558 <setOverloadPer+0x5c>)
   1152c:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   1152e:	4b0b      	ldr	r3, [pc, #44]	; (1155c <setOverloadPer+0x60>)
   11530:	4798      	blx	r3
		
		if (user_settings_parameter_struct.currentDetectionAddress)
   11532:	4b06      	ldr	r3, [pc, #24]	; (1154c <setOverloadPer+0x50>)
   11534:	7bdb      	ldrb	r3, [r3, #15]
   11536:	2b00      	cmp	r3, #0
   11538:	d001      	beq.n	1153e <setOverloadPer+0x42>
		{
			calcCurrentValues();
   1153a:	4b09      	ldr	r3, [pc, #36]	; (11560 <setOverloadPer+0x64>)
   1153c:	4798      	blx	r3
		}
		return true;
   1153e:	2301      	movs	r3, #1
   11540:	e000      	b.n	11544 <setOverloadPer+0x48>
	}
	return false;
   11542:	2300      	movs	r3, #0
}
   11544:	0018      	movs	r0, r3
   11546:	46bd      	mov	sp, r7
   11548:	b002      	add	sp, #8
   1154a:	bd80      	pop	{r7, pc}
   1154c:	20000654 	.word	0x20000654
   11550:	20000584 	.word	0x20000584
   11554:	00028edd 	.word	0x00028edd
   11558:	00023af1 	.word	0x00023af1
   1155c:	00023c99 	.word	0x00023c99
   11560:	000117e1 	.word	0x000117e1

00011564 <setUnderloadPer>:

bool setUnderloadPer(uint8_t underloadPerValue)
{
   11564:	b580      	push	{r7, lr}
   11566:	b082      	sub	sp, #8
   11568:	af00      	add	r7, sp, #0
   1156a:	0002      	movs	r2, r0
   1156c:	1dfb      	adds	r3, r7, #7
   1156e:	701a      	strb	r2, [r3, #0]
	if(underloadPerValue>0 && underloadPerValue <100)
   11570:	1dfb      	adds	r3, r7, #7
   11572:	781b      	ldrb	r3, [r3, #0]
   11574:	2b00      	cmp	r3, #0
   11576:	d01c      	beq.n	115b2 <setUnderloadPer+0x4e>
   11578:	1dfb      	adds	r3, r7, #7
   1157a:	781b      	ldrb	r3, [r3, #0]
   1157c:	2b63      	cmp	r3, #99	; 0x63
   1157e:	d818      	bhi.n	115b2 <setUnderloadPer+0x4e>
	{
		user_settings_parameter_struct.underloadPerAddress = underloadPerValue;
   11580:	4b0e      	ldr	r3, [pc, #56]	; (115bc <setUnderloadPer+0x58>)
   11582:	1dfa      	adds	r2, r7, #7
   11584:	7812      	ldrb	r2, [r2, #0]
   11586:	771a      	strb	r2, [r3, #28]
		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11588:	490c      	ldr	r1, [pc, #48]	; (115bc <setUnderloadPer+0x58>)
   1158a:	4b0d      	ldr	r3, [pc, #52]	; (115c0 <setUnderloadPer+0x5c>)
   1158c:	2230      	movs	r2, #48	; 0x30
   1158e:	0018      	movs	r0, r3
   11590:	4b0c      	ldr	r3, [pc, #48]	; (115c4 <setUnderloadPer+0x60>)
   11592:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11594:	4b0a      	ldr	r3, [pc, #40]	; (115c0 <setUnderloadPer+0x5c>)
   11596:	0019      	movs	r1, r3
   11598:	201a      	movs	r0, #26
   1159a:	4b0b      	ldr	r3, [pc, #44]	; (115c8 <setUnderloadPer+0x64>)
   1159c:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   1159e:	4b0b      	ldr	r3, [pc, #44]	; (115cc <setUnderloadPer+0x68>)
   115a0:	4798      	blx	r3
		if (user_settings_parameter_struct.currentDetectionAddress)
   115a2:	4b06      	ldr	r3, [pc, #24]	; (115bc <setUnderloadPer+0x58>)
   115a4:	7bdb      	ldrb	r3, [r3, #15]
   115a6:	2b00      	cmp	r3, #0
   115a8:	d001      	beq.n	115ae <setUnderloadPer+0x4a>
		{
			calcCurrentValues();
   115aa:	4b09      	ldr	r3, [pc, #36]	; (115d0 <setUnderloadPer+0x6c>)
   115ac:	4798      	blx	r3
		}
		return true;
   115ae:	2301      	movs	r3, #1
   115b0:	e000      	b.n	115b4 <setUnderloadPer+0x50>
	}
	return false;
   115b2:	2300      	movs	r3, #0
}
   115b4:	0018      	movs	r0, r3
   115b6:	46bd      	mov	sp, r7
   115b8:	b002      	add	sp, #8
   115ba:	bd80      	pop	{r7, pc}
   115bc:	20000654 	.word	0x20000654
   115c0:	20000584 	.word	0x20000584
   115c4:	00028edd 	.word	0x00028edd
   115c8:	00023af1 	.word	0x00023af1
   115cc:	00023c99 	.word	0x00023c99
   115d0:	000117e1 	.word	0x000117e1

000115d4 <saveSinglePhasingSettings>:

void saveSinglePhasingSettings(bool singlePhasing)
{
   115d4:	b580      	push	{r7, lr}
   115d6:	b082      	sub	sp, #8
   115d8:	af00      	add	r7, sp, #0
   115da:	0002      	movs	r2, r0
   115dc:	1dfb      	adds	r3, r7, #7
   115de:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.detectSinglePhasing=singlePhasing;
   115e0:	1dfb      	adds	r3, r7, #7
   115e2:	7819      	ldrb	r1, [r3, #0]
   115e4:	4b09      	ldr	r3, [pc, #36]	; (1160c <saveSinglePhasingSettings+0x38>)
   115e6:	2220      	movs	r2, #32
   115e8:	5499      	strb	r1, [r3, r2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   115ea:	4908      	ldr	r1, [pc, #32]	; (1160c <saveSinglePhasingSettings+0x38>)
   115ec:	4b08      	ldr	r3, [pc, #32]	; (11610 <saveSinglePhasingSettings+0x3c>)
   115ee:	2230      	movs	r2, #48	; 0x30
   115f0:	0018      	movs	r0, r3
   115f2:	4b08      	ldr	r3, [pc, #32]	; (11614 <saveSinglePhasingSettings+0x40>)
   115f4:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   115f6:	4b06      	ldr	r3, [pc, #24]	; (11610 <saveSinglePhasingSettings+0x3c>)
   115f8:	0019      	movs	r1, r3
   115fa:	201a      	movs	r0, #26
   115fc:	4b06      	ldr	r3, [pc, #24]	; (11618 <saveSinglePhasingSettings+0x44>)
   115fe:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11600:	4b06      	ldr	r3, [pc, #24]	; (1161c <saveSinglePhasingSettings+0x48>)
   11602:	4798      	blx	r3
}
   11604:	46c0      	nop			; (mov r8, r8)
   11606:	46bd      	mov	sp, r7
   11608:	b002      	add	sp, #8
   1160a:	bd80      	pop	{r7, pc}
   1160c:	20000654 	.word	0x20000654
   11610:	20000584 	.word	0x20000584
   11614:	00028edd 	.word	0x00028edd
   11618:	00023af1 	.word	0x00023af1
   1161c:	00023c99 	.word	0x00023c99

00011620 <saveSinglePhasingVoltage>:

void saveSinglePhasingVoltage(uint16_t voltage)
{
   11620:	b580      	push	{r7, lr}
   11622:	b082      	sub	sp, #8
   11624:	af00      	add	r7, sp, #0
   11626:	0002      	movs	r2, r0
   11628:	1dbb      	adds	r3, r7, #6
   1162a:	801a      	strh	r2, [r3, #0]
	user_settings_parameter_struct.singlePhasingVoltage= voltage;
   1162c:	4b0a      	ldr	r3, [pc, #40]	; (11658 <saveSinglePhasingVoltage+0x38>)
   1162e:	1dba      	adds	r2, r7, #6
   11630:	8812      	ldrh	r2, [r2, #0]
   11632:	845a      	strh	r2, [r3, #34]	; 0x22
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11634:	4908      	ldr	r1, [pc, #32]	; (11658 <saveSinglePhasingVoltage+0x38>)
   11636:	4b09      	ldr	r3, [pc, #36]	; (1165c <saveSinglePhasingVoltage+0x3c>)
   11638:	2230      	movs	r2, #48	; 0x30
   1163a:	0018      	movs	r0, r3
   1163c:	4b08      	ldr	r3, [pc, #32]	; (11660 <saveSinglePhasingVoltage+0x40>)
   1163e:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11640:	4b06      	ldr	r3, [pc, #24]	; (1165c <saveSinglePhasingVoltage+0x3c>)
   11642:	0019      	movs	r1, r3
   11644:	201a      	movs	r0, #26
   11646:	4b07      	ldr	r3, [pc, #28]	; (11664 <saveSinglePhasingVoltage+0x44>)
   11648:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   1164a:	4b07      	ldr	r3, [pc, #28]	; (11668 <saveSinglePhasingVoltage+0x48>)
   1164c:	4798      	blx	r3
}
   1164e:	46c0      	nop			; (mov r8, r8)
   11650:	46bd      	mov	sp, r7
   11652:	b002      	add	sp, #8
   11654:	bd80      	pop	{r7, pc}
   11656:	46c0      	nop			; (mov r8, r8)
   11658:	20000654 	.word	0x20000654
   1165c:	20000584 	.word	0x20000584
   11660:	00028edd 	.word	0x00028edd
   11664:	00023af1 	.word	0x00023af1
   11668:	00023c99 	.word	0x00023c99

0001166c <savePhaseSequenceProtectionSettings>:

void savePhaseSequenceProtectionSettings(bool phaseSequenceSetting)
{
   1166c:	b580      	push	{r7, lr}
   1166e:	b082      	sub	sp, #8
   11670:	af00      	add	r7, sp, #0
   11672:	0002      	movs	r2, r0
   11674:	1dfb      	adds	r3, r7, #7
   11676:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.detectPhaseSequence= phaseSequenceSetting;
   11678:	1dfb      	adds	r3, r7, #7
   1167a:	7819      	ldrb	r1, [r3, #0]
   1167c:	4b09      	ldr	r3, [pc, #36]	; (116a4 <savePhaseSequenceProtectionSettings+0x38>)
   1167e:	2224      	movs	r2, #36	; 0x24
   11680:	5499      	strb	r1, [r3, r2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11682:	4908      	ldr	r1, [pc, #32]	; (116a4 <savePhaseSequenceProtectionSettings+0x38>)
   11684:	4b08      	ldr	r3, [pc, #32]	; (116a8 <savePhaseSequenceProtectionSettings+0x3c>)
   11686:	2230      	movs	r2, #48	; 0x30
   11688:	0018      	movs	r0, r3
   1168a:	4b08      	ldr	r3, [pc, #32]	; (116ac <savePhaseSequenceProtectionSettings+0x40>)
   1168c:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1168e:	4b06      	ldr	r3, [pc, #24]	; (116a8 <savePhaseSequenceProtectionSettings+0x3c>)
   11690:	0019      	movs	r1, r3
   11692:	201a      	movs	r0, #26
   11694:	4b06      	ldr	r3, [pc, #24]	; (116b0 <savePhaseSequenceProtectionSettings+0x44>)
   11696:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11698:	4b06      	ldr	r3, [pc, #24]	; (116b4 <savePhaseSequenceProtectionSettings+0x48>)
   1169a:	4798      	blx	r3
}
   1169c:	46c0      	nop			; (mov r8, r8)
   1169e:	46bd      	mov	sp, r7
   116a0:	b002      	add	sp, #8
   116a2:	bd80      	pop	{r7, pc}
   116a4:	20000654 	.word	0x20000654
   116a8:	20000584 	.word	0x20000584
   116ac:	00028edd 	.word	0x00028edd
   116b0:	00023af1 	.word	0x00023af1
   116b4:	00023c99 	.word	0x00023c99

000116b8 <saveUnderOverDetectionMethodSettings>:


void saveUnderOverDetectionMethodSettings(uint8_t oumethodDetection)
{
   116b8:	b580      	push	{r7, lr}
   116ba:	b082      	sub	sp, #8
   116bc:	af00      	add	r7, sp, #0
   116be:	0002      	movs	r2, r0
   116c0:	1dfb      	adds	r3, r7, #7
   116c2:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.over_under_DetectionMethod = oumethodDetection;
   116c4:	4b0a      	ldr	r3, [pc, #40]	; (116f0 <saveUnderOverDetectionMethodSettings+0x38>)
   116c6:	1dfa      	adds	r2, r7, #7
   116c8:	2126      	movs	r1, #38	; 0x26
   116ca:	7812      	ldrb	r2, [r2, #0]
   116cc:	545a      	strb	r2, [r3, r1]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   116ce:	4908      	ldr	r1, [pc, #32]	; (116f0 <saveUnderOverDetectionMethodSettings+0x38>)
   116d0:	4b08      	ldr	r3, [pc, #32]	; (116f4 <saveUnderOverDetectionMethodSettings+0x3c>)
   116d2:	2230      	movs	r2, #48	; 0x30
   116d4:	0018      	movs	r0, r3
   116d6:	4b08      	ldr	r3, [pc, #32]	; (116f8 <saveUnderOverDetectionMethodSettings+0x40>)
   116d8:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   116da:	4b06      	ldr	r3, [pc, #24]	; (116f4 <saveUnderOverDetectionMethodSettings+0x3c>)
   116dc:	0019      	movs	r1, r3
   116de:	201a      	movs	r0, #26
   116e0:	4b06      	ldr	r3, [pc, #24]	; (116fc <saveUnderOverDetectionMethodSettings+0x44>)
   116e2:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   116e4:	4b06      	ldr	r3, [pc, #24]	; (11700 <saveUnderOverDetectionMethodSettings+0x48>)
   116e6:	4798      	blx	r3
}
   116e8:	46c0      	nop			; (mov r8, r8)
   116ea:	46bd      	mov	sp, r7
   116ec:	b002      	add	sp, #8
   116ee:	bd80      	pop	{r7, pc}
   116f0:	20000654 	.word	0x20000654
   116f4:	20000584 	.word	0x20000584
   116f8:	00028edd 	.word	0x00028edd
   116fc:	00023af1 	.word	0x00023af1
   11700:	00023c99 	.word	0x00023c99

00011704 <saveMotorVoltageBypassSettings>:

void saveMotorVoltageBypassSettings(bool flag)
{
   11704:	b580      	push	{r7, lr}
   11706:	b082      	sub	sp, #8
   11708:	af00      	add	r7, sp, #0
   1170a:	0002      	movs	r2, r0
   1170c:	1dfb      	adds	r3, r7, #7
   1170e:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.motorVoltageBypass=flag;
   11710:	1dfb      	adds	r3, r7, #7
   11712:	7819      	ldrb	r1, [r3, #0]
   11714:	4b09      	ldr	r3, [pc, #36]	; (1173c <saveMotorVoltageBypassSettings+0x38>)
   11716:	2227      	movs	r2, #39	; 0x27
   11718:	5499      	strb	r1, [r3, r2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1171a:	4908      	ldr	r1, [pc, #32]	; (1173c <saveMotorVoltageBypassSettings+0x38>)
   1171c:	4b08      	ldr	r3, [pc, #32]	; (11740 <saveMotorVoltageBypassSettings+0x3c>)
   1171e:	2230      	movs	r2, #48	; 0x30
   11720:	0018      	movs	r0, r3
   11722:	4b08      	ldr	r3, [pc, #32]	; (11744 <saveMotorVoltageBypassSettings+0x40>)
   11724:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11726:	4b06      	ldr	r3, [pc, #24]	; (11740 <saveMotorVoltageBypassSettings+0x3c>)
   11728:	0019      	movs	r1, r3
   1172a:	201a      	movs	r0, #26
   1172c:	4b06      	ldr	r3, [pc, #24]	; (11748 <saveMotorVoltageBypassSettings+0x44>)
   1172e:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11730:	4b06      	ldr	r3, [pc, #24]	; (1174c <saveMotorVoltageBypassSettings+0x48>)
   11732:	4798      	blx	r3
}
   11734:	46c0      	nop			; (mov r8, r8)
   11736:	46bd      	mov	sp, r7
   11738:	b002      	add	sp, #8
   1173a:	bd80      	pop	{r7, pc}
   1173c:	20000654 	.word	0x20000654
   11740:	20000584 	.word	0x20000584
   11744:	00028edd 	.word	0x00028edd
   11748:	00023af1 	.word	0x00023af1
   1174c:	00023c99 	.word	0x00023c99

00011750 <saveMotorVoltageBypasssTimeSettings>:

void saveMotorVoltageBypasssTimeSettings(uint32_t value)
{
   11750:	b580      	push	{r7, lr}
   11752:	b082      	sub	sp, #8
   11754:	af00      	add	r7, sp, #0
   11756:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.motorVoltageBypassTime=value;
   11758:	4b09      	ldr	r3, [pc, #36]	; (11780 <saveMotorVoltageBypasssTimeSettings+0x30>)
   1175a:	687a      	ldr	r2, [r7, #4]
   1175c:	629a      	str	r2, [r3, #40]	; 0x28
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1175e:	4908      	ldr	r1, [pc, #32]	; (11780 <saveMotorVoltageBypasssTimeSettings+0x30>)
   11760:	4b08      	ldr	r3, [pc, #32]	; (11784 <saveMotorVoltageBypasssTimeSettings+0x34>)
   11762:	2230      	movs	r2, #48	; 0x30
   11764:	0018      	movs	r0, r3
   11766:	4b08      	ldr	r3, [pc, #32]	; (11788 <saveMotorVoltageBypasssTimeSettings+0x38>)
   11768:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1176a:	4b06      	ldr	r3, [pc, #24]	; (11784 <saveMotorVoltageBypasssTimeSettings+0x34>)
   1176c:	0019      	movs	r1, r3
   1176e:	201a      	movs	r0, #26
   11770:	4b06      	ldr	r3, [pc, #24]	; (1178c <saveMotorVoltageBypasssTimeSettings+0x3c>)
   11772:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11774:	4b06      	ldr	r3, [pc, #24]	; (11790 <saveMotorVoltageBypasssTimeSettings+0x40>)
   11776:	4798      	blx	r3
}
   11778:	46c0      	nop			; (mov r8, r8)
   1177a:	46bd      	mov	sp, r7
   1177c:	b002      	add	sp, #8
   1177e:	bd80      	pop	{r7, pc}
   11780:	20000654 	.word	0x20000654
   11784:	20000584 	.word	0x20000584
   11788:	00028edd 	.word	0x00028edd
   1178c:	00023af1 	.word	0x00023af1
   11790:	00023c99 	.word	0x00023c99

00011794 <saveMotorFeedbackDetectionSettings>:

void saveMotorFeedbackDetectionSettings(uint8_t motorFeedbackDetection)
{
   11794:	b580      	push	{r7, lr}
   11796:	b082      	sub	sp, #8
   11798:	af00      	add	r7, sp, #0
   1179a:	0002      	movs	r2, r0
   1179c:	1dfb      	adds	r3, r7, #7
   1179e:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.detectMotorFeedback = motorFeedbackDetection;
   117a0:	4b0a      	ldr	r3, [pc, #40]	; (117cc <saveMotorFeedbackDetectionSettings+0x38>)
   117a2:	1dfa      	adds	r2, r7, #7
   117a4:	2125      	movs	r1, #37	; 0x25
   117a6:	7812      	ldrb	r2, [r2, #0]
   117a8:	545a      	strb	r2, [r3, r1]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   117aa:	4908      	ldr	r1, [pc, #32]	; (117cc <saveMotorFeedbackDetectionSettings+0x38>)
   117ac:	4b08      	ldr	r3, [pc, #32]	; (117d0 <saveMotorFeedbackDetectionSettings+0x3c>)
   117ae:	2230      	movs	r2, #48	; 0x30
   117b0:	0018      	movs	r0, r3
   117b2:	4b08      	ldr	r3, [pc, #32]	; (117d4 <saveMotorFeedbackDetectionSettings+0x40>)
   117b4:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   117b6:	4b06      	ldr	r3, [pc, #24]	; (117d0 <saveMotorFeedbackDetectionSettings+0x3c>)
   117b8:	0019      	movs	r1, r3
   117ba:	201a      	movs	r0, #26
   117bc:	4b06      	ldr	r3, [pc, #24]	; (117d8 <saveMotorFeedbackDetectionSettings+0x44>)
   117be:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   117c0:	4b06      	ldr	r3, [pc, #24]	; (117dc <saveMotorFeedbackDetectionSettings+0x48>)
   117c2:	4798      	blx	r3
}
   117c4:	46c0      	nop			; (mov r8, r8)
   117c6:	46bd      	mov	sp, r7
   117c8:	b002      	add	sp, #8
   117ca:	bd80      	pop	{r7, pc}
   117cc:	20000654 	.word	0x20000654
   117d0:	20000584 	.word	0x20000584
   117d4:	00028edd 	.word	0x00028edd
   117d8:	00023af1 	.word	0x00023af1
   117dc:	00023c99 	.word	0x00023c99

000117e0 <calcCurrentValues>:


void calcCurrentValues(void)
{
   117e0:	b590      	push	{r4, r7, lr}
   117e2:	b083      	sub	sp, #12
   117e4:	af00      	add	r7, sp, #0
	uint16_t temp = (user_settings_parameter_struct.normalLoadAddress * (float)user_settings_parameter_struct.underloadPerAddress) / 100.0;
   117e6:	4b2b      	ldr	r3, [pc, #172]	; (11894 <calcCurrentValues+0xb4>)
   117e8:	691a      	ldr	r2, [r3, #16]
   117ea:	4b2b      	ldr	r3, [pc, #172]	; (11898 <calcCurrentValues+0xb8>)
   117ec:	0010      	movs	r0, r2
   117ee:	4798      	blx	r3
   117f0:	1c04      	adds	r4, r0, #0
   117f2:	4b28      	ldr	r3, [pc, #160]	; (11894 <calcCurrentValues+0xb4>)
   117f4:	7f1a      	ldrb	r2, [r3, #28]
   117f6:	4b28      	ldr	r3, [pc, #160]	; (11898 <calcCurrentValues+0xb8>)
   117f8:	0010      	movs	r0, r2
   117fa:	4798      	blx	r3
   117fc:	1c02      	adds	r2, r0, #0
   117fe:	4b27      	ldr	r3, [pc, #156]	; (1189c <calcCurrentValues+0xbc>)
   11800:	1c11      	adds	r1, r2, #0
   11802:	1c20      	adds	r0, r4, #0
   11804:	4798      	blx	r3
   11806:	1c03      	adds	r3, r0, #0
   11808:	1c1a      	adds	r2, r3, #0
   1180a:	4b25      	ldr	r3, [pc, #148]	; (118a0 <calcCurrentValues+0xc0>)
   1180c:	1c10      	adds	r0, r2, #0
   1180e:	4798      	blx	r3
   11810:	4c24      	ldr	r4, [pc, #144]	; (118a4 <calcCurrentValues+0xc4>)
   11812:	2200      	movs	r2, #0
   11814:	4b24      	ldr	r3, [pc, #144]	; (118a8 <calcCurrentValues+0xc8>)
   11816:	47a0      	blx	r4
   11818:	0003      	movs	r3, r0
   1181a:	000c      	movs	r4, r1
   1181c:	0019      	movs	r1, r3
   1181e:	0022      	movs	r2, r4
   11820:	1dbc      	adds	r4, r7, #6
   11822:	4b22      	ldr	r3, [pc, #136]	; (118ac <calcCurrentValues+0xcc>)
   11824:	0008      	movs	r0, r1
   11826:	0011      	movs	r1, r2
   11828:	4798      	blx	r3
   1182a:	0003      	movs	r3, r0
   1182c:	8023      	strh	r3, [r4, #0]
	setUnderloadValue(temp);
   1182e:	1dbb      	adds	r3, r7, #6
   11830:	881b      	ldrh	r3, [r3, #0]
   11832:	0018      	movs	r0, r3
   11834:	4b1e      	ldr	r3, [pc, #120]	; (118b0 <calcCurrentValues+0xd0>)
   11836:	4798      	blx	r3

	temp = (user_settings_parameter_struct.normalLoadAddress * (float)user_settings_parameter_struct.overloadPerAddress) / 100.0;
   11838:	4b16      	ldr	r3, [pc, #88]	; (11894 <calcCurrentValues+0xb4>)
   1183a:	691a      	ldr	r2, [r3, #16]
   1183c:	4b16      	ldr	r3, [pc, #88]	; (11898 <calcCurrentValues+0xb8>)
   1183e:	0010      	movs	r0, r2
   11840:	4798      	blx	r3
   11842:	1c04      	adds	r4, r0, #0
   11844:	4b13      	ldr	r3, [pc, #76]	; (11894 <calcCurrentValues+0xb4>)
   11846:	7f5a      	ldrb	r2, [r3, #29]
   11848:	4b13      	ldr	r3, [pc, #76]	; (11898 <calcCurrentValues+0xb8>)
   1184a:	0010      	movs	r0, r2
   1184c:	4798      	blx	r3
   1184e:	1c02      	adds	r2, r0, #0
   11850:	4b12      	ldr	r3, [pc, #72]	; (1189c <calcCurrentValues+0xbc>)
   11852:	1c11      	adds	r1, r2, #0
   11854:	1c20      	adds	r0, r4, #0
   11856:	4798      	blx	r3
   11858:	1c03      	adds	r3, r0, #0
   1185a:	1c1a      	adds	r2, r3, #0
   1185c:	4b10      	ldr	r3, [pc, #64]	; (118a0 <calcCurrentValues+0xc0>)
   1185e:	1c10      	adds	r0, r2, #0
   11860:	4798      	blx	r3
   11862:	4c10      	ldr	r4, [pc, #64]	; (118a4 <calcCurrentValues+0xc4>)
   11864:	2200      	movs	r2, #0
   11866:	4b10      	ldr	r3, [pc, #64]	; (118a8 <calcCurrentValues+0xc8>)
   11868:	47a0      	blx	r4
   1186a:	0003      	movs	r3, r0
   1186c:	000c      	movs	r4, r1
   1186e:	0019      	movs	r1, r3
   11870:	0022      	movs	r2, r4
   11872:	1dbc      	adds	r4, r7, #6
   11874:	4b0d      	ldr	r3, [pc, #52]	; (118ac <calcCurrentValues+0xcc>)
   11876:	0008      	movs	r0, r1
   11878:	0011      	movs	r1, r2
   1187a:	4798      	blx	r3
   1187c:	0003      	movs	r3, r0
   1187e:	8023      	strh	r3, [r4, #0]
	setOverloadValue(temp);
   11880:	1dbb      	adds	r3, r7, #6
   11882:	881b      	ldrh	r3, [r3, #0]
   11884:	0018      	movs	r0, r3
   11886:	4b0b      	ldr	r3, [pc, #44]	; (118b4 <calcCurrentValues+0xd4>)
   11888:	4798      	blx	r3
}
   1188a:	46c0      	nop			; (mov r8, r8)
   1188c:	46bd      	mov	sp, r7
   1188e:	b003      	add	sp, #12
   11890:	bd90      	pop	{r4, r7, pc}
   11892:	46c0      	nop			; (mov r8, r8)
   11894:	20000654 	.word	0x20000654
   11898:	00027125 	.word	0x00027125
   1189c:	00026e45 	.word	0x00026e45
   118a0:	00028d01 	.word	0x00028d01
   118a4:	000277d1 	.word	0x000277d1
   118a8:	40590000 	.word	0x40590000
   118ac:	000269f9 	.word	0x000269f9
   118b0:	000118b9 	.word	0x000118b9
   118b4:	000118fd 	.word	0x000118fd

000118b8 <setUnderloadValue>:

void setUnderloadValue(uint32_t underValue)
{
   118b8:	b580      	push	{r7, lr}
   118ba:	b082      	sub	sp, #8
   118bc:	af00      	add	r7, sp, #0
   118be:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.underloadAddress = underValue;
   118c0:	4b09      	ldr	r3, [pc, #36]	; (118e8 <setUnderloadValue+0x30>)
   118c2:	687a      	ldr	r2, [r7, #4]
   118c4:	619a      	str	r2, [r3, #24]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   118c6:	4908      	ldr	r1, [pc, #32]	; (118e8 <setUnderloadValue+0x30>)
   118c8:	4b08      	ldr	r3, [pc, #32]	; (118ec <setUnderloadValue+0x34>)
   118ca:	2230      	movs	r2, #48	; 0x30
   118cc:	0018      	movs	r0, r3
   118ce:	4b08      	ldr	r3, [pc, #32]	; (118f0 <setUnderloadValue+0x38>)
   118d0:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   118d2:	4b06      	ldr	r3, [pc, #24]	; (118ec <setUnderloadValue+0x34>)
   118d4:	0019      	movs	r1, r3
   118d6:	201a      	movs	r0, #26
   118d8:	4b06      	ldr	r3, [pc, #24]	; (118f4 <setUnderloadValue+0x3c>)
   118da:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   118dc:	4b06      	ldr	r3, [pc, #24]	; (118f8 <setUnderloadValue+0x40>)
   118de:	4798      	blx	r3
}
   118e0:	46c0      	nop			; (mov r8, r8)
   118e2:	46bd      	mov	sp, r7
   118e4:	b002      	add	sp, #8
   118e6:	bd80      	pop	{r7, pc}
   118e8:	20000654 	.word	0x20000654
   118ec:	20000584 	.word	0x20000584
   118f0:	00028edd 	.word	0x00028edd
   118f4:	00023af1 	.word	0x00023af1
   118f8:	00023c99 	.word	0x00023c99

000118fc <setOverloadValue>:

void setOverloadValue(uint32_t overValue)
{
   118fc:	b580      	push	{r7, lr}
   118fe:	b082      	sub	sp, #8
   11900:	af00      	add	r7, sp, #0
   11902:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.overloadAddress = overValue;
   11904:	4b09      	ldr	r3, [pc, #36]	; (1192c <setOverloadValue+0x30>)
   11906:	687a      	ldr	r2, [r7, #4]
   11908:	615a      	str	r2, [r3, #20]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1190a:	4908      	ldr	r1, [pc, #32]	; (1192c <setOverloadValue+0x30>)
   1190c:	4b08      	ldr	r3, [pc, #32]	; (11930 <setOverloadValue+0x34>)
   1190e:	2230      	movs	r2, #48	; 0x30
   11910:	0018      	movs	r0, r3
   11912:	4b08      	ldr	r3, [pc, #32]	; (11934 <setOverloadValue+0x38>)
   11914:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11916:	4b06      	ldr	r3, [pc, #24]	; (11930 <setOverloadValue+0x34>)
   11918:	0019      	movs	r1, r3
   1191a:	201a      	movs	r0, #26
   1191c:	4b06      	ldr	r3, [pc, #24]	; (11938 <setOverloadValue+0x3c>)
   1191e:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11920:	4b06      	ldr	r3, [pc, #24]	; (1193c <setOverloadValue+0x40>)
   11922:	4798      	blx	r3
}
   11924:	46c0      	nop			; (mov r8, r8)
   11926:	46bd      	mov	sp, r7
   11928:	b002      	add	sp, #8
   1192a:	bd80      	pop	{r7, pc}
   1192c:	20000654 	.word	0x20000654
   11930:	20000584 	.word	0x20000584
   11934:	00028edd 	.word	0x00028edd
   11938:	00023af1 	.word	0x00023af1
   1193c:	00023c99 	.word	0x00023c99

00011940 <setNormalLoadValue>:

void setNormalLoadValue(uint32_t normalVal)
{
   11940:	b580      	push	{r7, lr}
   11942:	b082      	sub	sp, #8
   11944:	af00      	add	r7, sp, #0
   11946:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.normalLoadAddress = normalVal;
   11948:	4b09      	ldr	r3, [pc, #36]	; (11970 <setNormalLoadValue+0x30>)
   1194a:	687a      	ldr	r2, [r7, #4]
   1194c:	611a      	str	r2, [r3, #16]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1194e:	4908      	ldr	r1, [pc, #32]	; (11970 <setNormalLoadValue+0x30>)
   11950:	4b08      	ldr	r3, [pc, #32]	; (11974 <setNormalLoadValue+0x34>)
   11952:	2230      	movs	r2, #48	; 0x30
   11954:	0018      	movs	r0, r3
   11956:	4b08      	ldr	r3, [pc, #32]	; (11978 <setNormalLoadValue+0x38>)
   11958:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1195a:	4b06      	ldr	r3, [pc, #24]	; (11974 <setNormalLoadValue+0x34>)
   1195c:	0019      	movs	r1, r3
   1195e:	201a      	movs	r0, #26
   11960:	4b06      	ldr	r3, [pc, #24]	; (1197c <setNormalLoadValue+0x3c>)
   11962:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11964:	4b06      	ldr	r3, [pc, #24]	; (11980 <setNormalLoadValue+0x40>)
   11966:	4798      	blx	r3
}
   11968:	46c0      	nop			; (mov r8, r8)
   1196a:	46bd      	mov	sp, r7
   1196c:	b002      	add	sp, #8
   1196e:	bd80      	pop	{r7, pc}
   11970:	20000654 	.word	0x20000654
   11974:	20000584 	.word	0x20000584
   11978:	00028edd 	.word	0x00028edd
   1197c:	00023af1 	.word	0x00023af1
   11980:	00023c99 	.word	0x00023c99

00011984 <setCurrentDetection>:

void setCurrentDetection(bool cValue)
{
   11984:	b580      	push	{r7, lr}
   11986:	b082      	sub	sp, #8
   11988:	af00      	add	r7, sp, #0
   1198a:	0002      	movs	r2, r0
   1198c:	1dfb      	adds	r3, r7, #7
   1198e:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.currentDetectionAddress = cValue;
   11990:	1dfb      	adds	r3, r7, #7
   11992:	781a      	ldrb	r2, [r3, #0]
   11994:	4b09      	ldr	r3, [pc, #36]	; (119bc <setCurrentDetection+0x38>)
   11996:	73da      	strb	r2, [r3, #15]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11998:	4908      	ldr	r1, [pc, #32]	; (119bc <setCurrentDetection+0x38>)
   1199a:	4b09      	ldr	r3, [pc, #36]	; (119c0 <setCurrentDetection+0x3c>)
   1199c:	2230      	movs	r2, #48	; 0x30
   1199e:	0018      	movs	r0, r3
   119a0:	4b08      	ldr	r3, [pc, #32]	; (119c4 <setCurrentDetection+0x40>)
   119a2:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   119a4:	4b06      	ldr	r3, [pc, #24]	; (119c0 <setCurrentDetection+0x3c>)
   119a6:	0019      	movs	r1, r3
   119a8:	201a      	movs	r0, #26
   119aa:	4b07      	ldr	r3, [pc, #28]	; (119c8 <setCurrentDetection+0x44>)
   119ac:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   119ae:	4b07      	ldr	r3, [pc, #28]	; (119cc <setCurrentDetection+0x48>)
   119b0:	4798      	blx	r3
}
   119b2:	46c0      	nop			; (mov r8, r8)
   119b4:	46bd      	mov	sp, r7
   119b6:	b002      	add	sp, #8
   119b8:	bd80      	pop	{r7, pc}
   119ba:	46c0      	nop			; (mov r8, r8)
   119bc:	20000654 	.word	0x20000654
   119c0:	20000584 	.word	0x20000584
   119c4:	00028edd 	.word	0x00028edd
   119c8:	00023af1 	.word	0x00023af1
   119cc:	00023c99 	.word	0x00023c99

000119d0 <saveStarDeltaTimer>:
	//strcpy(deviceID,factory_settings_parameter_struct.DeviceID_ee);
	return deviceID;
}

void saveStarDeltaTimer(uint16_t StartDeltaTime)
{
   119d0:	b580      	push	{r7, lr}
   119d2:	b082      	sub	sp, #8
   119d4:	af00      	add	r7, sp, #0
   119d6:	0002      	movs	r2, r0
   119d8:	1dbb      	adds	r3, r7, #6
   119da:	801a      	strh	r2, [r3, #0]
	user_settings_parameter_struct.starDeltaTimerAddress = StartDeltaTime;
   119dc:	4b0a      	ldr	r3, [pc, #40]	; (11a08 <saveStarDeltaTimer+0x38>)
   119de:	1dba      	adds	r2, r7, #6
   119e0:	8812      	ldrh	r2, [r2, #0]
   119e2:	80da      	strh	r2, [r3, #6]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   119e4:	4908      	ldr	r1, [pc, #32]	; (11a08 <saveStarDeltaTimer+0x38>)
   119e6:	4b09      	ldr	r3, [pc, #36]	; (11a0c <saveStarDeltaTimer+0x3c>)
   119e8:	2230      	movs	r2, #48	; 0x30
   119ea:	0018      	movs	r0, r3
   119ec:	4b08      	ldr	r3, [pc, #32]	; (11a10 <saveStarDeltaTimer+0x40>)
   119ee:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   119f0:	4b06      	ldr	r3, [pc, #24]	; (11a0c <saveStarDeltaTimer+0x3c>)
   119f2:	0019      	movs	r1, r3
   119f4:	201a      	movs	r0, #26
   119f6:	4b07      	ldr	r3, [pc, #28]	; (11a14 <saveStarDeltaTimer+0x44>)
   119f8:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   119fa:	4b07      	ldr	r3, [pc, #28]	; (11a18 <saveStarDeltaTimer+0x48>)
   119fc:	4798      	blx	r3
}
   119fe:	46c0      	nop			; (mov r8, r8)
   11a00:	46bd      	mov	sp, r7
   11a02:	b002      	add	sp, #8
   11a04:	bd80      	pop	{r7, pc}
   11a06:	46c0      	nop			; (mov r8, r8)
   11a08:	20000654 	.word	0x20000654
   11a0c:	20000584 	.word	0x20000584
   11a10:	00028edd 	.word	0x00028edd
   11a14:	00023af1 	.word	0x00023af1
   11a18:	00023c99 	.word	0x00023c99

00011a1c <saveEventStageSettings>:

void saveEventStageSettings(uint8_t data)
{
   11a1c:	b580      	push	{r7, lr}
   11a1e:	b082      	sub	sp, #8
   11a20:	af00      	add	r7, sp, #0
   11a22:	0002      	movs	r2, r0
   11a24:	1dfb      	adds	r3, r7, #7
   11a26:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.eventStageAddress = data;
   11a28:	4b0a      	ldr	r3, [pc, #40]	; (11a54 <saveEventStageSettings+0x38>)
   11a2a:	1dfa      	adds	r2, r7, #7
   11a2c:	7812      	ldrb	r2, [r2, #0]
   11a2e:	721a      	strb	r2, [r3, #8]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11a30:	4908      	ldr	r1, [pc, #32]	; (11a54 <saveEventStageSettings+0x38>)
   11a32:	4b09      	ldr	r3, [pc, #36]	; (11a58 <saveEventStageSettings+0x3c>)
   11a34:	2230      	movs	r2, #48	; 0x30
   11a36:	0018      	movs	r0, r3
   11a38:	4b08      	ldr	r3, [pc, #32]	; (11a5c <saveEventStageSettings+0x40>)
   11a3a:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11a3c:	4b06      	ldr	r3, [pc, #24]	; (11a58 <saveEventStageSettings+0x3c>)
   11a3e:	0019      	movs	r1, r3
   11a40:	201a      	movs	r0, #26
   11a42:	4b07      	ldr	r3, [pc, #28]	; (11a60 <saveEventStageSettings+0x44>)
   11a44:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11a46:	4b07      	ldr	r3, [pc, #28]	; (11a64 <saveEventStageSettings+0x48>)
   11a48:	4798      	blx	r3
}
   11a4a:	46c0      	nop			; (mov r8, r8)
   11a4c:	46bd      	mov	sp, r7
   11a4e:	b002      	add	sp, #8
   11a50:	bd80      	pop	{r7, pc}
   11a52:	46c0      	nop			; (mov r8, r8)
   11a54:	20000654 	.word	0x20000654
   11a58:	20000584 	.word	0x20000584
   11a5c:	00028edd 	.word	0x00028edd
   11a60:	00023af1 	.word	0x00023af1
   11a64:	00023c99 	.word	0x00023c99

00011a68 <isAdmin>:

bool isAdmin(char *number)
{
   11a68:	b580      	push	{r7, lr}
   11a6a:	b08a      	sub	sp, #40	; 0x28
   11a6c:	af00      	add	r7, sp, #0
   11a6e:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<5;i++)
   11a70:	2327      	movs	r3, #39	; 0x27
   11a72:	18fb      	adds	r3, r7, r3
   11a74:	2200      	movs	r2, #0
   11a76:	701a      	strb	r2, [r3, #0]
   11a78:	e02b      	b.n	11ad2 <isAdmin+0x6a>
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
   11a7a:	4b1b      	ldr	r3, [pc, #108]	; (11ae8 <isAdmin+0x80>)
   11a7c:	223c      	movs	r2, #60	; 0x3c
   11a7e:	2100      	movs	r1, #0
   11a80:	0018      	movs	r0, r3
   11a82:	4b1a      	ldr	r3, [pc, #104]	; (11aec <isAdmin+0x84>)
   11a84:	4798      	blx	r3
		eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE+i, page_data);
   11a86:	2327      	movs	r3, #39	; 0x27
   11a88:	18fb      	adds	r3, r7, r3
   11a8a:	781b      	ldrb	r3, [r3, #0]
   11a8c:	3303      	adds	r3, #3
   11a8e:	b2db      	uxtb	r3, r3
   11a90:	4a15      	ldr	r2, [pc, #84]	; (11ae8 <isAdmin+0x80>)
   11a92:	0011      	movs	r1, r2
   11a94:	0018      	movs	r0, r3
   11a96:	4b16      	ldr	r3, [pc, #88]	; (11af0 <isAdmin+0x88>)
   11a98:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
   11a9a:	230c      	movs	r3, #12
   11a9c:	18fa      	adds	r2, r7, r3
   11a9e:	4b12      	ldr	r3, [pc, #72]	; (11ae8 <isAdmin+0x80>)
   11aa0:	0010      	movs	r0, r2
   11aa2:	0019      	movs	r1, r3
   11aa4:	2318      	movs	r3, #24
   11aa6:	001a      	movs	r2, r3
   11aa8:	4b12      	ldr	r3, [pc, #72]	; (11af4 <isAdmin+0x8c>)
   11aaa:	4798      	blx	r3
		
		if (strstr(number,mobile_no.mobile_no_ee))
   11aac:	230c      	movs	r3, #12
   11aae:	18fb      	adds	r3, r7, r3
   11ab0:	1d1a      	adds	r2, r3, #4
   11ab2:	687b      	ldr	r3, [r7, #4]
   11ab4:	0011      	movs	r1, r2
   11ab6:	0018      	movs	r0, r3
   11ab8:	4b0f      	ldr	r3, [pc, #60]	; (11af8 <isAdmin+0x90>)
   11aba:	4798      	blx	r3
   11abc:	1e03      	subs	r3, r0, #0
   11abe:	d001      	beq.n	11ac4 <isAdmin+0x5c>
		{
			return true;
   11ac0:	2301      	movs	r3, #1
   11ac2:	e00c      	b.n	11ade <isAdmin+0x76>
	for (uint8_t i=0;i<5;i++)
   11ac4:	2327      	movs	r3, #39	; 0x27
   11ac6:	18fb      	adds	r3, r7, r3
   11ac8:	781a      	ldrb	r2, [r3, #0]
   11aca:	2327      	movs	r3, #39	; 0x27
   11acc:	18fb      	adds	r3, r7, r3
   11ace:	3201      	adds	r2, #1
   11ad0:	701a      	strb	r2, [r3, #0]
   11ad2:	2327      	movs	r3, #39	; 0x27
   11ad4:	18fb      	adds	r3, r7, r3
   11ad6:	781b      	ldrb	r3, [r3, #0]
   11ad8:	2b04      	cmp	r3, #4
   11ada:	d9ce      	bls.n	11a7a <isAdmin+0x12>
		}
	}
	return false;
   11adc:	2300      	movs	r3, #0
}
   11ade:	0018      	movs	r0, r3
   11ae0:	46bd      	mov	sp, r7
   11ae2:	b00a      	add	sp, #40	; 0x28
   11ae4:	bd80      	pop	{r7, pc}
   11ae6:	46c0      	nop			; (mov r8, r8)
   11ae8:	20000584 	.word	0x20000584
   11aec:	00028f13 	.word	0x00028f13
   11af0:	00023bfd 	.word	0x00023bfd
   11af4:	00028edd 	.word	0x00028edd
   11af8:	000291d3 	.word	0x000291d3

00011afc <setPrimaryNumberIndex>:


void setPrimaryNumberIndex(uint8_t index)
{
   11afc:	b580      	push	{r7, lr}
   11afe:	b082      	sub	sp, #8
   11b00:	af00      	add	r7, sp, #0
   11b02:	0002      	movs	r2, r0
   11b04:	1dfb      	adds	r3, r7, #7
   11b06:	701a      	strb	r2, [r3, #0]
	user_count_struct.primaryNumberIndex = index;
   11b08:	4b0b      	ldr	r3, [pc, #44]	; (11b38 <setPrimaryNumberIndex+0x3c>)
   11b0a:	1dfa      	adds	r2, r7, #7
   11b0c:	7812      	ldrb	r2, [r2, #0]
   11b0e:	70da      	strb	r2, [r3, #3]
	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   11b10:	4a0a      	ldr	r2, [pc, #40]	; (11b3c <setPrimaryNumberIndex+0x40>)
   11b12:	4b09      	ldr	r3, [pc, #36]	; (11b38 <setPrimaryNumberIndex+0x3c>)
   11b14:	0010      	movs	r0, r2
   11b16:	0019      	movs	r1, r3
   11b18:	2308      	movs	r3, #8
   11b1a:	001a      	movs	r2, r3
   11b1c:	4b08      	ldr	r3, [pc, #32]	; (11b40 <setPrimaryNumberIndex+0x44>)
   11b1e:	4798      	blx	r3
	eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   11b20:	4b06      	ldr	r3, [pc, #24]	; (11b3c <setPrimaryNumberIndex+0x40>)
   11b22:	0019      	movs	r1, r3
   11b24:	2008      	movs	r0, #8
   11b26:	4b07      	ldr	r3, [pc, #28]	; (11b44 <setPrimaryNumberIndex+0x48>)
   11b28:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11b2a:	4b07      	ldr	r3, [pc, #28]	; (11b48 <setPrimaryNumberIndex+0x4c>)
   11b2c:	4798      	blx	r3

}
   11b2e:	46c0      	nop			; (mov r8, r8)
   11b30:	46bd      	mov	sp, r7
   11b32:	b002      	add	sp, #8
   11b34:	bd80      	pop	{r7, pc}
   11b36:	46c0      	nop			; (mov r8, r8)
   11b38:	20000614 	.word	0x20000614
   11b3c:	20000584 	.word	0x20000584
   11b40:	00028edd 	.word	0x00028edd
   11b44:	00023af1 	.word	0x00023af1
   11b48:	00023c99 	.word	0x00023c99

00011b4c <setSecondaryNumberIndex>:

void setSecondaryNumberIndex(uint8_t index)
{
   11b4c:	b580      	push	{r7, lr}
   11b4e:	b082      	sub	sp, #8
   11b50:	af00      	add	r7, sp, #0
   11b52:	0002      	movs	r2, r0
   11b54:	1dfb      	adds	r3, r7, #7
   11b56:	701a      	strb	r2, [r3, #0]
	user_count_struct.secondaryNumberIndex = index;
   11b58:	4b0b      	ldr	r3, [pc, #44]	; (11b88 <setSecondaryNumberIndex+0x3c>)
   11b5a:	1dfa      	adds	r2, r7, #7
   11b5c:	7812      	ldrb	r2, [r2, #0]
   11b5e:	711a      	strb	r2, [r3, #4]
	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   11b60:	4a0a      	ldr	r2, [pc, #40]	; (11b8c <setSecondaryNumberIndex+0x40>)
   11b62:	4b09      	ldr	r3, [pc, #36]	; (11b88 <setSecondaryNumberIndex+0x3c>)
   11b64:	0010      	movs	r0, r2
   11b66:	0019      	movs	r1, r3
   11b68:	2308      	movs	r3, #8
   11b6a:	001a      	movs	r2, r3
   11b6c:	4b08      	ldr	r3, [pc, #32]	; (11b90 <setSecondaryNumberIndex+0x44>)
   11b6e:	4798      	blx	r3
	eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   11b70:	4b06      	ldr	r3, [pc, #24]	; (11b8c <setSecondaryNumberIndex+0x40>)
   11b72:	0019      	movs	r1, r3
   11b74:	2008      	movs	r0, #8
   11b76:	4b07      	ldr	r3, [pc, #28]	; (11b94 <setSecondaryNumberIndex+0x48>)
   11b78:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11b7a:	4b07      	ldr	r3, [pc, #28]	; (11b98 <setSecondaryNumberIndex+0x4c>)
   11b7c:	4798      	blx	r3
}
   11b7e:	46c0      	nop			; (mov r8, r8)
   11b80:	46bd      	mov	sp, r7
   11b82:	b002      	add	sp, #8
   11b84:	bd80      	pop	{r7, pc}
   11b86:	46c0      	nop			; (mov r8, r8)
   11b88:	20000614 	.word	0x20000614
   11b8c:	20000584 	.word	0x20000584
   11b90:	00028edd 	.word	0x00028edd
   11b94:	00023af1 	.word	0x00023af1
   11b98:	00023c99 	.word	0x00023c99

00011b9c <addPrimaryIndexedNumber>:

bool addPrimaryIndexedNumber(char *number)
{
   11b9c:	b590      	push	{r4, r7, lr}
   11b9e:	b085      	sub	sp, #20
   11ba0:	af00      	add	r7, sp, #0
   11ba2:	6078      	str	r0, [r7, #4]
	//checkUserExists would return a 1 based index,starting at 1 and not at 0
	uint8_t index = checkExists(number);
   11ba4:	230e      	movs	r3, #14
   11ba6:	18fc      	adds	r4, r7, r3
   11ba8:	687b      	ldr	r3, [r7, #4]
   11baa:	0018      	movs	r0, r3
   11bac:	4b21      	ldr	r3, [pc, #132]	; (11c34 <addPrimaryIndexedNumber+0x98>)
   11bae:	4798      	blx	r3
   11bb0:	0003      	movs	r3, r0
   11bb2:	7023      	strb	r3, [r4, #0]

	uint8_t newPrimaryIndex=0xFF;
   11bb4:	230f      	movs	r3, #15
   11bb6:	18fb      	adds	r3, r7, r3
   11bb8:	22ff      	movs	r2, #255	; 0xff
   11bba:	701a      	strb	r2, [r3, #0]
	if(index >= user_count_struct.total_user_no_count)								//the numebr does not exists, need to add it
   11bbc:	4b1e      	ldr	r3, [pc, #120]	; (11c38 <addPrimaryIndexedNumber+0x9c>)
   11bbe:	785b      	ldrb	r3, [r3, #1]
   11bc0:	220e      	movs	r2, #14
   11bc2:	18ba      	adds	r2, r7, r2
   11bc4:	7812      	ldrb	r2, [r2, #0]
   11bc6:	429a      	cmp	r2, r3
   11bc8:	d309      	bcc.n	11bde <addPrimaryIndexedNumber+0x42>
	{
		newPrimaryIndex = user_count_struct.current_user_no_count;
   11bca:	230f      	movs	r3, #15
   11bcc:	18fb      	adds	r3, r7, r3
   11bce:	4a1a      	ldr	r2, [pc, #104]	; (11c38 <addPrimaryIndexedNumber+0x9c>)
   11bd0:	7892      	ldrb	r2, [r2, #2]
   11bd2:	701a      	strb	r2, [r3, #0]
		addNumber(number);
   11bd4:	687b      	ldr	r3, [r7, #4]
   11bd6:	0018      	movs	r0, r3
   11bd8:	4b18      	ldr	r3, [pc, #96]	; (11c3c <addPrimaryIndexedNumber+0xa0>)
   11bda:	4798      	blx	r3
   11bdc:	e00c      	b.n	11bf8 <addPrimaryIndexedNumber+0x5c>
	}
	else if(index<user_count_struct.total_user_no_count)
   11bde:	4b16      	ldr	r3, [pc, #88]	; (11c38 <addPrimaryIndexedNumber+0x9c>)
   11be0:	785b      	ldrb	r3, [r3, #1]
   11be2:	220e      	movs	r2, #14
   11be4:	18ba      	adds	r2, r7, r2
   11be6:	7812      	ldrb	r2, [r2, #0]
   11be8:	429a      	cmp	r2, r3
   11bea:	d205      	bcs.n	11bf8 <addPrimaryIndexedNumber+0x5c>
	{
		newPrimaryIndex = index;
   11bec:	230f      	movs	r3, #15
   11bee:	18fb      	adds	r3, r7, r3
   11bf0:	220e      	movs	r2, #14
   11bf2:	18ba      	adds	r2, r7, r2
   11bf4:	7812      	ldrb	r2, [r2, #0]
   11bf6:	701a      	strb	r2, [r3, #0]
	}

	if(newPrimaryIndex < user_count_struct.total_user_no_count)
   11bf8:	4b0f      	ldr	r3, [pc, #60]	; (11c38 <addPrimaryIndexedNumber+0x9c>)
   11bfa:	785b      	ldrb	r3, [r3, #1]
   11bfc:	220f      	movs	r2, #15
   11bfe:	18ba      	adds	r2, r7, r2
   11c00:	7812      	ldrb	r2, [r2, #0]
   11c02:	429a      	cmp	r2, r3
   11c04:	d210      	bcs.n	11c28 <addPrimaryIndexedNumber+0x8c>
	{
		// if current numbers present are more than 1, than set the previous primary number as secondary number
		if (user_count_struct.current_user_no_count>1)
   11c06:	4b0c      	ldr	r3, [pc, #48]	; (11c38 <addPrimaryIndexedNumber+0x9c>)
   11c08:	789b      	ldrb	r3, [r3, #2]
   11c0a:	2b01      	cmp	r3, #1
   11c0c:	d904      	bls.n	11c18 <addPrimaryIndexedNumber+0x7c>
		{
			setSecondaryNumberIndex(user_count_struct.primaryNumberIndex);
   11c0e:	4b0a      	ldr	r3, [pc, #40]	; (11c38 <addPrimaryIndexedNumber+0x9c>)
   11c10:	78db      	ldrb	r3, [r3, #3]
   11c12:	0018      	movs	r0, r3
   11c14:	4b0a      	ldr	r3, [pc, #40]	; (11c40 <addPrimaryIndexedNumber+0xa4>)
   11c16:	4798      	blx	r3
		}
		
		setPrimaryNumberIndex(newPrimaryIndex);
   11c18:	230f      	movs	r3, #15
   11c1a:	18fb      	adds	r3, r7, r3
   11c1c:	781b      	ldrb	r3, [r3, #0]
   11c1e:	0018      	movs	r0, r3
   11c20:	4b08      	ldr	r3, [pc, #32]	; (11c44 <addPrimaryIndexedNumber+0xa8>)
   11c22:	4798      	blx	r3
		return true;
   11c24:	2301      	movs	r3, #1
   11c26:	e000      	b.n	11c2a <addPrimaryIndexedNumber+0x8e>
	}

	return false;
   11c28:	2300      	movs	r3, #0
}
   11c2a:	0018      	movs	r0, r3
   11c2c:	46bd      	mov	sp, r7
   11c2e:	b005      	add	sp, #20
   11c30:	bd90      	pop	{r4, r7, pc}
   11c32:	46c0      	nop			; (mov r8, r8)
   11c34:	00010de9 	.word	0x00010de9
   11c38:	20000614 	.word	0x20000614
   11c3c:	00010eed 	.word	0x00010eed
   11c40:	00011b4d 	.word	0x00011b4d
   11c44:	00011afd 	.word	0x00011afd

00011c48 <addSecondaryIndexedNumber>:

bool addSecondaryIndexedNumber(char *number)
{
   11c48:	b590      	push	{r4, r7, lr}
   11c4a:	b085      	sub	sp, #20
   11c4c:	af00      	add	r7, sp, #0
   11c4e:	6078      	str	r0, [r7, #4]
	//check if any 2 numbers are present in system one of which would be primary, than only allow to add secondary number
	if(user_count_struct.current_user_no_count<2)
   11c50:	4b21      	ldr	r3, [pc, #132]	; (11cd8 <addSecondaryIndexedNumber+0x90>)
   11c52:	789b      	ldrb	r3, [r3, #2]
   11c54:	2b01      	cmp	r3, #1
   11c56:	d801      	bhi.n	11c5c <addSecondaryIndexedNumber+0x14>
	return false;
   11c58:	2300      	movs	r3, #0
   11c5a:	e039      	b.n	11cd0 <addSecondaryIndexedNumber+0x88>

	//checkUserExists would return a 1 based index,starting at 1 and not at 0
	uint8_t index = checkExists(number);
   11c5c:	230e      	movs	r3, #14
   11c5e:	18fc      	adds	r4, r7, r3
   11c60:	687b      	ldr	r3, [r7, #4]
   11c62:	0018      	movs	r0, r3
   11c64:	4b1d      	ldr	r3, [pc, #116]	; (11cdc <addSecondaryIndexedNumber+0x94>)
   11c66:	4798      	blx	r3
   11c68:	0003      	movs	r3, r0
   11c6a:	7023      	strb	r3, [r4, #0]

	uint8_t newSecondaryIndex=0xFF;
   11c6c:	230f      	movs	r3, #15
   11c6e:	18fb      	adds	r3, r7, r3
   11c70:	22ff      	movs	r2, #255	; 0xff
   11c72:	701a      	strb	r2, [r3, #0]
	if(index >= user_count_struct.total_user_no_count)								//number not present, need to add the number
   11c74:	4b18      	ldr	r3, [pc, #96]	; (11cd8 <addSecondaryIndexedNumber+0x90>)
   11c76:	785b      	ldrb	r3, [r3, #1]
   11c78:	220e      	movs	r2, #14
   11c7a:	18ba      	adds	r2, r7, r2
   11c7c:	7812      	ldrb	r2, [r2, #0]
   11c7e:	429a      	cmp	r2, r3
   11c80:	d309      	bcc.n	11c96 <addSecondaryIndexedNumber+0x4e>
	{
		newSecondaryIndex = user_count_struct.current_user_no_count;
   11c82:	230f      	movs	r3, #15
   11c84:	18fb      	adds	r3, r7, r3
   11c86:	4a14      	ldr	r2, [pc, #80]	; (11cd8 <addSecondaryIndexedNumber+0x90>)
   11c88:	7892      	ldrb	r2, [r2, #2]
   11c8a:	701a      	strb	r2, [r3, #0]
		addNumber(number);
   11c8c:	687b      	ldr	r3, [r7, #4]
   11c8e:	0018      	movs	r0, r3
   11c90:	4b13      	ldr	r3, [pc, #76]	; (11ce0 <addSecondaryIndexedNumber+0x98>)
   11c92:	4798      	blx	r3
   11c94:	e00c      	b.n	11cb0 <addSecondaryIndexedNumber+0x68>
	}
	else if(index < user_count_struct.total_user_no_count)
   11c96:	4b10      	ldr	r3, [pc, #64]	; (11cd8 <addSecondaryIndexedNumber+0x90>)
   11c98:	785b      	ldrb	r3, [r3, #1]
   11c9a:	220e      	movs	r2, #14
   11c9c:	18ba      	adds	r2, r7, r2
   11c9e:	7812      	ldrb	r2, [r2, #0]
   11ca0:	429a      	cmp	r2, r3
   11ca2:	d205      	bcs.n	11cb0 <addSecondaryIndexedNumber+0x68>
	{
		newSecondaryIndex = index;
   11ca4:	230f      	movs	r3, #15
   11ca6:	18fb      	adds	r3, r7, r3
   11ca8:	220e      	movs	r2, #14
   11caa:	18ba      	adds	r2, r7, r2
   11cac:	7812      	ldrb	r2, [r2, #0]
   11cae:	701a      	strb	r2, [r3, #0]
	}

	if(newSecondaryIndex < user_count_struct.total_user_no_count)
   11cb0:	4b09      	ldr	r3, [pc, #36]	; (11cd8 <addSecondaryIndexedNumber+0x90>)
   11cb2:	785b      	ldrb	r3, [r3, #1]
   11cb4:	220f      	movs	r2, #15
   11cb6:	18ba      	adds	r2, r7, r2
   11cb8:	7812      	ldrb	r2, [r2, #0]
   11cba:	429a      	cmp	r2, r3
   11cbc:	d207      	bcs.n	11cce <addSecondaryIndexedNumber+0x86>
	{
		setSecondaryNumberIndex(newSecondaryIndex);
   11cbe:	230f      	movs	r3, #15
   11cc0:	18fb      	adds	r3, r7, r3
   11cc2:	781b      	ldrb	r3, [r3, #0]
   11cc4:	0018      	movs	r0, r3
   11cc6:	4b07      	ldr	r3, [pc, #28]	; (11ce4 <addSecondaryIndexedNumber+0x9c>)
   11cc8:	4798      	blx	r3
		return true;
   11cca:	2301      	movs	r3, #1
   11ccc:	e000      	b.n	11cd0 <addSecondaryIndexedNumber+0x88>
	}
	return false;
   11cce:	2300      	movs	r3, #0
}
   11cd0:	0018      	movs	r0, r3
   11cd2:	46bd      	mov	sp, r7
   11cd4:	b005      	add	sp, #20
   11cd6:	bd90      	pop	{r4, r7, pc}
   11cd8:	20000614 	.word	0x20000614
   11cdc:	00010de9 	.word	0x00010de9
   11ce0:	00010eed 	.word	0x00010eed
   11ce4:	00011b4d 	.word	0x00011b4d

00011ce8 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
   11ce8:	b580      	push	{r7, lr}
   11cea:	b082      	sub	sp, #8
   11cec:	af00      	add	r7, sp, #0
   11cee:	0002      	movs	r2, r0
   11cf0:	1dfb      	adds	r3, r7, #7
   11cf2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   11cf4:	4b06      	ldr	r3, [pc, #24]	; (11d10 <system_interrupt_enable+0x28>)
   11cf6:	1dfa      	adds	r2, r7, #7
   11cf8:	7812      	ldrb	r2, [r2, #0]
   11cfa:	0011      	movs	r1, r2
   11cfc:	221f      	movs	r2, #31
   11cfe:	400a      	ands	r2, r1
   11d00:	2101      	movs	r1, #1
   11d02:	4091      	lsls	r1, r2
   11d04:	000a      	movs	r2, r1
   11d06:	601a      	str	r2, [r3, #0]
}
   11d08:	46c0      	nop			; (mov r8, r8)
   11d0a:	46bd      	mov	sp, r7
   11d0c:	b002      	add	sp, #8
   11d0e:	bd80      	pop	{r7, pc}
   11d10:	e000e100 	.word	0xe000e100

00011d14 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   11d14:	b580      	push	{r7, lr}
   11d16:	b082      	sub	sp, #8
   11d18:	af00      	add	r7, sp, #0
   11d1a:	0002      	movs	r2, r0
   11d1c:	1dfb      	adds	r3, r7, #7
   11d1e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   11d20:	4a07      	ldr	r2, [pc, #28]	; (11d40 <system_interrupt_disable+0x2c>)
   11d22:	1dfb      	adds	r3, r7, #7
   11d24:	781b      	ldrb	r3, [r3, #0]
   11d26:	0019      	movs	r1, r3
   11d28:	231f      	movs	r3, #31
   11d2a:	400b      	ands	r3, r1
   11d2c:	2101      	movs	r1, #1
   11d2e:	4099      	lsls	r1, r3
   11d30:	000b      	movs	r3, r1
   11d32:	0019      	movs	r1, r3
   11d34:	2380      	movs	r3, #128	; 0x80
   11d36:	50d1      	str	r1, [r2, r3]
}
   11d38:	46c0      	nop			; (mov r8, r8)
   11d3a:	46bd      	mov	sp, r7
   11d3c:	b002      	add	sp, #8
   11d3e:	bd80      	pop	{r7, pc}
   11d40:	e000e100 	.word	0xe000e100

00011d44 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   11d44:	b580      	push	{r7, lr}
   11d46:	b084      	sub	sp, #16
   11d48:	af00      	add	r7, sp, #0
   11d4a:	0002      	movs	r2, r0
   11d4c:	1dfb      	adds	r3, r7, #7
   11d4e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   11d50:	230f      	movs	r3, #15
   11d52:	18fb      	adds	r3, r7, r3
   11d54:	1dfa      	adds	r2, r7, #7
   11d56:	7812      	ldrb	r2, [r2, #0]
   11d58:	09d2      	lsrs	r2, r2, #7
   11d5a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   11d5c:	230e      	movs	r3, #14
   11d5e:	18fb      	adds	r3, r7, r3
   11d60:	1dfa      	adds	r2, r7, #7
   11d62:	7812      	ldrb	r2, [r2, #0]
   11d64:	0952      	lsrs	r2, r2, #5
   11d66:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   11d68:	4b0d      	ldr	r3, [pc, #52]	; (11da0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   11d6a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   11d6c:	230f      	movs	r3, #15
   11d6e:	18fb      	adds	r3, r7, r3
   11d70:	781b      	ldrb	r3, [r3, #0]
   11d72:	2b00      	cmp	r3, #0
   11d74:	d10f      	bne.n	11d96 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   11d76:	230f      	movs	r3, #15
   11d78:	18fb      	adds	r3, r7, r3
   11d7a:	781b      	ldrb	r3, [r3, #0]
   11d7c:	009b      	lsls	r3, r3, #2
   11d7e:	2210      	movs	r2, #16
   11d80:	4694      	mov	ip, r2
   11d82:	44bc      	add	ip, r7
   11d84:	4463      	add	r3, ip
   11d86:	3b08      	subs	r3, #8
   11d88:	681a      	ldr	r2, [r3, #0]
   11d8a:	230e      	movs	r3, #14
   11d8c:	18fb      	adds	r3, r7, r3
   11d8e:	781b      	ldrb	r3, [r3, #0]
   11d90:	01db      	lsls	r3, r3, #7
   11d92:	18d3      	adds	r3, r2, r3
   11d94:	e000      	b.n	11d98 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   11d96:	2300      	movs	r3, #0
	}
}
   11d98:	0018      	movs	r0, r3
   11d9a:	46bd      	mov	sp, r7
   11d9c:	b004      	add	sp, #16
   11d9e:	bd80      	pop	{r7, pc}
   11da0:	41004400 	.word	0x41004400

00011da4 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   11da4:	b580      	push	{r7, lr}
   11da6:	b082      	sub	sp, #8
   11da8:	af00      	add	r7, sp, #0
   11daa:	0002      	movs	r2, r0
   11dac:	1dfb      	adds	r3, r7, #7
   11dae:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   11db0:	1dfb      	adds	r3, r7, #7
   11db2:	781b      	ldrb	r3, [r3, #0]
   11db4:	0018      	movs	r0, r3
   11db6:	4b03      	ldr	r3, [pc, #12]	; (11dc4 <port_get_group_from_gpio_pin+0x20>)
   11db8:	4798      	blx	r3
   11dba:	0003      	movs	r3, r0
}
   11dbc:	0018      	movs	r0, r3
   11dbe:	46bd      	mov	sp, r7
   11dc0:	b002      	add	sp, #8
   11dc2:	bd80      	pop	{r7, pc}
   11dc4:	00011d45 	.word	0x00011d45

00011dc8 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
   11dc8:	b580      	push	{r7, lr}
   11dca:	b082      	sub	sp, #8
   11dcc:	af00      	add	r7, sp, #0
   11dce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
   11dd0:	687b      	ldr	r3, [r7, #4]
   11dd2:	2200      	movs	r2, #0
   11dd4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   11dd6:	687b      	ldr	r3, [r7, #4]
   11dd8:	2201      	movs	r2, #1
   11dda:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   11ddc:	687b      	ldr	r3, [r7, #4]
   11dde:	2200      	movs	r2, #0
   11de0:	709a      	strb	r2, [r3, #2]
}
   11de2:	46c0      	nop			; (mov r8, r8)
   11de4:	46bd      	mov	sp, r7
   11de6:	b002      	add	sp, #8
   11de8:	bd80      	pop	{r7, pc}
	...

00011dec <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
   11dec:	b580      	push	{r7, lr}
   11dee:	b084      	sub	sp, #16
   11df0:	af00      	add	r7, sp, #0
   11df2:	0002      	movs	r2, r0
   11df4:	1dfb      	adds	r3, r7, #7
   11df6:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   11df8:	1dfb      	adds	r3, r7, #7
   11dfa:	781b      	ldrb	r3, [r3, #0]
   11dfc:	0018      	movs	r0, r3
   11dfe:	4b0b      	ldr	r3, [pc, #44]	; (11e2c <port_pin_get_input_level+0x40>)
   11e00:	4798      	blx	r3
   11e02:	0003      	movs	r3, r0
   11e04:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   11e06:	1dfb      	adds	r3, r7, #7
   11e08:	781b      	ldrb	r3, [r3, #0]
   11e0a:	221f      	movs	r2, #31
   11e0c:	4013      	ands	r3, r2
   11e0e:	2201      	movs	r2, #1
   11e10:	409a      	lsls	r2, r3
   11e12:	0013      	movs	r3, r2
   11e14:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
   11e16:	68fb      	ldr	r3, [r7, #12]
   11e18:	6a1b      	ldr	r3, [r3, #32]
   11e1a:	68ba      	ldr	r2, [r7, #8]
   11e1c:	4013      	ands	r3, r2
   11e1e:	1e5a      	subs	r2, r3, #1
   11e20:	4193      	sbcs	r3, r2
   11e22:	b2db      	uxtb	r3, r3
}
   11e24:	0018      	movs	r0, r3
   11e26:	46bd      	mov	sp, r7
   11e28:	b004      	add	sp, #16
   11e2a:	bd80      	pop	{r7, pc}
   11e2c:	00011da5 	.word	0x00011da5

00011e30 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   11e30:	b580      	push	{r7, lr}
   11e32:	b084      	sub	sp, #16
   11e34:	af00      	add	r7, sp, #0
   11e36:	0002      	movs	r2, r0
   11e38:	1dfb      	adds	r3, r7, #7
   11e3a:	701a      	strb	r2, [r3, #0]
   11e3c:	1dbb      	adds	r3, r7, #6
   11e3e:	1c0a      	adds	r2, r1, #0
   11e40:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   11e42:	1dfb      	adds	r3, r7, #7
   11e44:	781b      	ldrb	r3, [r3, #0]
   11e46:	0018      	movs	r0, r3
   11e48:	4b0d      	ldr	r3, [pc, #52]	; (11e80 <port_pin_set_output_level+0x50>)
   11e4a:	4798      	blx	r3
   11e4c:	0003      	movs	r3, r0
   11e4e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   11e50:	1dfb      	adds	r3, r7, #7
   11e52:	781b      	ldrb	r3, [r3, #0]
   11e54:	221f      	movs	r2, #31
   11e56:	4013      	ands	r3, r2
   11e58:	2201      	movs	r2, #1
   11e5a:	409a      	lsls	r2, r3
   11e5c:	0013      	movs	r3, r2
   11e5e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   11e60:	1dbb      	adds	r3, r7, #6
   11e62:	781b      	ldrb	r3, [r3, #0]
   11e64:	2b00      	cmp	r3, #0
   11e66:	d003      	beq.n	11e70 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   11e68:	68fb      	ldr	r3, [r7, #12]
   11e6a:	68ba      	ldr	r2, [r7, #8]
   11e6c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   11e6e:	e002      	b.n	11e76 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   11e70:	68fb      	ldr	r3, [r7, #12]
   11e72:	68ba      	ldr	r2, [r7, #8]
   11e74:	615a      	str	r2, [r3, #20]
}
   11e76:	46c0      	nop			; (mov r8, r8)
   11e78:	46bd      	mov	sp, r7
   11e7a:	b004      	add	sp, #16
   11e7c:	bd80      	pop	{r7, pc}
   11e7e:	46c0      	nop			; (mov r8, r8)
   11e80:	00011da5 	.word	0x00011da5

00011e84 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   11e84:	b580      	push	{r7, lr}
   11e86:	b084      	sub	sp, #16
   11e88:	af00      	add	r7, sp, #0
   11e8a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   11e8c:	687b      	ldr	r3, [r7, #4]
   11e8e:	681b      	ldr	r3, [r3, #0]
   11e90:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   11e92:	68fb      	ldr	r3, [r7, #12]
   11e94:	69db      	ldr	r3, [r3, #28]
   11e96:	1e5a      	subs	r2, r3, #1
   11e98:	4193      	sbcs	r3, r2
   11e9a:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   11e9c:	0018      	movs	r0, r3
   11e9e:	46bd      	mov	sp, r7
   11ea0:	b004      	add	sp, #16
   11ea2:	bd80      	pop	{r7, pc}

00011ea4 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   11ea4:	b580      	push	{r7, lr}
   11ea6:	b082      	sub	sp, #8
   11ea8:	af00      	add	r7, sp, #0
   11eaa:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   11eac:	46c0      	nop			; (mov r8, r8)
   11eae:	687b      	ldr	r3, [r7, #4]
   11eb0:	0018      	movs	r0, r3
   11eb2:	4b04      	ldr	r3, [pc, #16]	; (11ec4 <_usart_wait_for_sync+0x20>)
   11eb4:	4798      	blx	r3
   11eb6:	1e03      	subs	r3, r0, #0
   11eb8:	d1f9      	bne.n	11eae <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   11eba:	46c0      	nop			; (mov r8, r8)
   11ebc:	46bd      	mov	sp, r7
   11ebe:	b002      	add	sp, #8
   11ec0:	bd80      	pop	{r7, pc}
   11ec2:	46c0      	nop			; (mov r8, r8)
   11ec4:	00011e85 	.word	0x00011e85

00011ec8 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   11ec8:	b580      	push	{r7, lr}
   11eca:	b082      	sub	sp, #8
   11ecc:	af00      	add	r7, sp, #0
   11ece:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   11ed0:	687b      	ldr	r3, [r7, #4]
   11ed2:	2280      	movs	r2, #128	; 0x80
   11ed4:	05d2      	lsls	r2, r2, #23
   11ed6:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   11ed8:	687b      	ldr	r3, [r7, #4]
   11eda:	2200      	movs	r2, #0
   11edc:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   11ede:	687b      	ldr	r3, [r7, #4]
   11ee0:	22ff      	movs	r2, #255	; 0xff
   11ee2:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   11ee4:	687b      	ldr	r3, [r7, #4]
   11ee6:	2200      	movs	r2, #0
   11ee8:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   11eea:	687b      	ldr	r3, [r7, #4]
   11eec:	2200      	movs	r2, #0
   11eee:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   11ef0:	687b      	ldr	r3, [r7, #4]
   11ef2:	2296      	movs	r2, #150	; 0x96
   11ef4:	0192      	lsls	r2, r2, #6
   11ef6:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   11ef8:	687b      	ldr	r3, [r7, #4]
   11efa:	2224      	movs	r2, #36	; 0x24
   11efc:	2101      	movs	r1, #1
   11efe:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   11f00:	687b      	ldr	r3, [r7, #4]
   11f02:	2225      	movs	r2, #37	; 0x25
   11f04:	2101      	movs	r1, #1
   11f06:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   11f08:	687b      	ldr	r3, [r7, #4]
   11f0a:	2226      	movs	r2, #38	; 0x26
   11f0c:	2100      	movs	r1, #0
   11f0e:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   11f10:	687b      	ldr	r3, [r7, #4]
   11f12:	2227      	movs	r2, #39	; 0x27
   11f14:	2100      	movs	r1, #0
   11f16:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   11f18:	687b      	ldr	r3, [r7, #4]
   11f1a:	2200      	movs	r2, #0
   11f1c:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   11f1e:	687b      	ldr	r3, [r7, #4]
   11f20:	2288      	movs	r2, #136	; 0x88
   11f22:	0352      	lsls	r2, r2, #13
   11f24:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   11f26:	687b      	ldr	r3, [r7, #4]
   11f28:	222c      	movs	r2, #44	; 0x2c
   11f2a:	2100      	movs	r1, #0
   11f2c:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   11f2e:	687b      	ldr	r3, [r7, #4]
   11f30:	222d      	movs	r2, #45	; 0x2d
   11f32:	2100      	movs	r1, #0
   11f34:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   11f36:	687b      	ldr	r3, [r7, #4]
   11f38:	2200      	movs	r2, #0
   11f3a:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   11f3c:	687b      	ldr	r3, [r7, #4]
   11f3e:	2200      	movs	r2, #0
   11f40:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   11f42:	687b      	ldr	r3, [r7, #4]
   11f44:	2200      	movs	r2, #0
   11f46:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   11f48:	687b      	ldr	r3, [r7, #4]
   11f4a:	2200      	movs	r2, #0
   11f4c:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   11f4e:	687b      	ldr	r3, [r7, #4]
   11f50:	2200      	movs	r2, #0
   11f52:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   11f54:	687b      	ldr	r3, [r7, #4]
   11f56:	2200      	movs	r2, #0
   11f58:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   11f5a:	687b      	ldr	r3, [r7, #4]
   11f5c:	2200      	movs	r2, #0
   11f5e:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   11f60:	687b      	ldr	r3, [r7, #4]
   11f62:	2200      	movs	r2, #0
   11f64:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   11f66:	687b      	ldr	r3, [r7, #4]
   11f68:	2200      	movs	r2, #0
   11f6a:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   11f6c:	687b      	ldr	r3, [r7, #4]
   11f6e:	2200      	movs	r2, #0
   11f70:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   11f72:	687b      	ldr	r3, [r7, #4]
   11f74:	2213      	movs	r2, #19
   11f76:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   11f78:	687b      	ldr	r3, [r7, #4]
   11f7a:	2200      	movs	r2, #0
   11f7c:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   11f7e:	46c0      	nop			; (mov r8, r8)
   11f80:	46bd      	mov	sp, r7
   11f82:	b002      	add	sp, #8
   11f84:	bd80      	pop	{r7, pc}
	...

00011f88 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   11f88:	b580      	push	{r7, lr}
   11f8a:	b084      	sub	sp, #16
   11f8c:	af00      	add	r7, sp, #0
   11f8e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   11f90:	687b      	ldr	r3, [r7, #4]
   11f92:	681b      	ldr	r3, [r3, #0]
   11f94:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   11f96:	687b      	ldr	r3, [r7, #4]
   11f98:	681b      	ldr	r3, [r3, #0]
   11f9a:	0018      	movs	r0, r3
   11f9c:	4b09      	ldr	r3, [pc, #36]	; (11fc4 <usart_enable+0x3c>)
   11f9e:	4798      	blx	r3
   11fa0:	0003      	movs	r3, r0
   11fa2:	0018      	movs	r0, r3
   11fa4:	4b08      	ldr	r3, [pc, #32]	; (11fc8 <usart_enable+0x40>)
   11fa6:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   11fa8:	687b      	ldr	r3, [r7, #4]
   11faa:	0018      	movs	r0, r3
   11fac:	4b07      	ldr	r3, [pc, #28]	; (11fcc <usart_enable+0x44>)
   11fae:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   11fb0:	68fb      	ldr	r3, [r7, #12]
   11fb2:	681b      	ldr	r3, [r3, #0]
   11fb4:	2202      	movs	r2, #2
   11fb6:	431a      	orrs	r2, r3
   11fb8:	68fb      	ldr	r3, [r7, #12]
   11fba:	601a      	str	r2, [r3, #0]
}
   11fbc:	46c0      	nop			; (mov r8, r8)
   11fbe:	46bd      	mov	sp, r7
   11fc0:	b004      	add	sp, #16
   11fc2:	bd80      	pop	{r7, pc}
   11fc4:	0002235d 	.word	0x0002235d
   11fc8:	00011ce9 	.word	0x00011ce9
   11fcc:	00011ea5 	.word	0x00011ea5

00011fd0 <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
   11fd0:	b580      	push	{r7, lr}
   11fd2:	b084      	sub	sp, #16
   11fd4:	af00      	add	r7, sp, #0
   11fd6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   11fd8:	687b      	ldr	r3, [r7, #4]
   11fda:	681b      	ldr	r3, [r3, #0]
   11fdc:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   11fde:	687b      	ldr	r3, [r7, #4]
   11fe0:	681b      	ldr	r3, [r3, #0]
   11fe2:	0018      	movs	r0, r3
   11fe4:	4b0a      	ldr	r3, [pc, #40]	; (12010 <usart_disable+0x40>)
   11fe6:	4798      	blx	r3
   11fe8:	0003      	movs	r3, r0
   11fea:	0018      	movs	r0, r3
   11fec:	4b09      	ldr	r3, [pc, #36]	; (12014 <usart_disable+0x44>)
   11fee:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   11ff0:	687b      	ldr	r3, [r7, #4]
   11ff2:	0018      	movs	r0, r3
   11ff4:	4b08      	ldr	r3, [pc, #32]	; (12018 <usart_disable+0x48>)
   11ff6:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
   11ff8:	68fb      	ldr	r3, [r7, #12]
   11ffa:	681b      	ldr	r3, [r3, #0]
   11ffc:	2202      	movs	r2, #2
   11ffe:	4393      	bics	r3, r2
   12000:	001a      	movs	r2, r3
   12002:	68fb      	ldr	r3, [r7, #12]
   12004:	601a      	str	r2, [r3, #0]
}
   12006:	46c0      	nop			; (mov r8, r8)
   12008:	46bd      	mov	sp, r7
   1200a:	b004      	add	sp, #16
   1200c:	bd80      	pop	{r7, pc}
   1200e:	46c0      	nop			; (mov r8, r8)
   12010:	0002235d 	.word	0x0002235d
   12014:	00011d15 	.word	0x00011d15
   12018:	00011ea5 	.word	0x00011ea5

0001201c <usart_reset>:
 *
 * \param[in]  module  Pointer to the USART software instance struct
 */
static inline void usart_reset(
		const struct usart_module *const module)
{
   1201c:	b580      	push	{r7, lr}
   1201e:	b084      	sub	sp, #16
   12020:	af00      	add	r7, sp, #0
   12022:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   12024:	687b      	ldr	r3, [r7, #4]
   12026:	681b      	ldr	r3, [r3, #0]
   12028:	60fb      	str	r3, [r7, #12]

	usart_disable(module);
   1202a:	687b      	ldr	r3, [r7, #4]
   1202c:	0018      	movs	r0, r3
   1202e:	4b06      	ldr	r3, [pc, #24]	; (12048 <usart_reset+0x2c>)
   12030:	4798      	blx	r3

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   12032:	687b      	ldr	r3, [r7, #4]
   12034:	0018      	movs	r0, r3
   12036:	4b05      	ldr	r3, [pc, #20]	; (1204c <usart_reset+0x30>)
   12038:	4798      	blx	r3

	/* Reset module */
	usart_hw->CTRLA.reg = SERCOM_USART_CTRLA_SWRST;
   1203a:	68fb      	ldr	r3, [r7, #12]
   1203c:	2201      	movs	r2, #1
   1203e:	601a      	str	r2, [r3, #0]
}
   12040:	46c0      	nop			; (mov r8, r8)
   12042:	46bd      	mov	sp, r7
   12044:	b004      	add	sp, #16
   12046:	bd80      	pop	{r7, pc}
   12048:	00011fd1 	.word	0x00011fd1
   1204c:	00011ea5 	.word	0x00011ea5

00012050 <gsm_timer_callback>:
/** FreeRTOS timer callback function, fired when the a timer period has elapsed.
*
*  \param[in]  timer  ID of the timer that has expired.
*/
static void gsm_timer_callback(TimerHandle_t timer)
{
   12050:	b580      	push	{r7, lr}
   12052:	b082      	sub	sp, #8
   12054:	af00      	add	r7, sp, #0
   12056:	6078      	str	r0, [r7, #4]
}
   12058:	46c0      	nop			; (mov r8, r8)
   1205a:	46bd      	mov	sp, r7
   1205c:	b002      	add	sp, #8
   1205e:	bd80      	pop	{r7, pc}

00012060 <Flush_RX_Buffer>:

void Flush_RX_Buffer(void)
{
   12060:	b580      	push	{r7, lr}
   12062:	b082      	sub	sp, #8
   12064:	af00      	add	r7, sp, #0
	uint8_t ucharTemp_Value;
	portBASE_TYPE xStatus;
	while(1)
	{
		xStatus=xQueueReceive(gsm_rx_queue,&ucharTemp_Value,0);
   12066:	4b09      	ldr	r3, [pc, #36]	; (1208c <Flush_RX_Buffer+0x2c>)
   12068:	681b      	ldr	r3, [r3, #0]
   1206a:	1cf9      	adds	r1, r7, #3
   1206c:	2200      	movs	r2, #0
   1206e:	0018      	movs	r0, r3
   12070:	4b07      	ldr	r3, [pc, #28]	; (12090 <Flush_RX_Buffer+0x30>)
   12072:	4798      	blx	r3
   12074:	0003      	movs	r3, r0
   12076:	607b      	str	r3, [r7, #4]
		if (xStatus==errQUEUE_EMPTY)
   12078:	687b      	ldr	r3, [r7, #4]
   1207a:	2b00      	cmp	r3, #0
   1207c:	d000      	beq.n	12080 <Flush_RX_Buffer+0x20>
		xStatus=xQueueReceive(gsm_rx_queue,&ucharTemp_Value,0);
   1207e:	e7f2      	b.n	12066 <Flush_RX_Buffer+0x6>
		{
			break;
   12080:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   12082:	46c0      	nop			; (mov r8, r8)
   12084:	46bd      	mov	sp, r7
   12086:	b002      	add	sp, #8
   12088:	bd80      	pop	{r7, pc}
   1208a:	46c0      	nop			; (mov r8, r8)
   1208c:	20000220 	.word	0x20000220
   12090:	0001f541 	.word	0x0001f541

00012094 <gsm_rx_handler>:

static void gsm_rx_handler(uint8_t instance)
{
   12094:	b590      	push	{r4, r7, lr}
   12096:	b085      	sub	sp, #20
   12098:	af00      	add	r7, sp, #0
   1209a:	0002      	movs	r2, r0
   1209c:	1dfb      	adds	r3, r7, #7
   1209e:	701a      	strb	r2, [r3, #0]
	SercomUsart *const usart_hw = &GSM_SERCOM->USART;
   120a0:	4b19      	ldr	r3, [pc, #100]	; (12108 <gsm_rx_handler+0x74>)
   120a2:	60fb      	str	r3, [r7, #12]
	UNUSED(instance);
	if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)
   120a4:	68fb      	ldr	r3, [r7, #12]
   120a6:	7e1b      	ldrb	r3, [r3, #24]
   120a8:	b2db      	uxtb	r3, r3
   120aa:	001a      	movs	r2, r3
   120ac:	2304      	movs	r3, #4
   120ae:	4013      	ands	r3, r2
   120b0:	d026      	beq.n	12100 <gsm_rx_handler+0x6c>
	{
		/* Check if a data reception error occurred */
		uint8_t rx_error = usart_hw->STATUS.reg &
   120b2:	68fb      	ldr	r3, [r7, #12]
   120b4:	8b5b      	ldrh	r3, [r3, #26]
   120b6:	b29b      	uxth	r3, r3
   120b8:	b2da      	uxtb	r2, r3
   120ba:	230b      	movs	r3, #11
   120bc:	18fb      	adds	r3, r7, r3
   120be:	2106      	movs	r1, #6
   120c0:	400a      	ands	r2, r1
   120c2:	701a      	strb	r2, [r3, #0]
		(SERCOM_USART_STATUS_FERR | SERCOM_USART_STATUS_BUFOVF);
		/* If error occurred clear the error flags, otherwise queue new data */
		if (rx_error)
   120c4:	230b      	movs	r3, #11
   120c6:	18fb      	adds	r3, r7, r3
   120c8:	781b      	ldrb	r3, [r3, #0]
   120ca:	2b00      	cmp	r3, #0
   120cc:	d006      	beq.n	120dc <gsm_rx_handler+0x48>
		{
			usart_hw->STATUS.reg = rx_error;
   120ce:	230b      	movs	r3, #11
   120d0:	18fb      	adds	r3, r7, r3
   120d2:	781b      	ldrb	r3, [r3, #0]
   120d4:	b29a      	uxth	r2, r3
   120d6:	68fb      	ldr	r3, [r7, #12]
   120d8:	835a      	strh	r2, [r3, #26]
			uint8_t data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
			xQueueSendFromISR(gsm_rx_queue, &data, NULL);
			gsm_module_exit_sleep(true);
		}
	}
}
   120da:	e011      	b.n	12100 <gsm_rx_handler+0x6c>
			uint8_t data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   120dc:	68fb      	ldr	r3, [r7, #12]
   120de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   120e0:	b29b      	uxth	r3, r3
   120e2:	b2da      	uxtb	r2, r3
   120e4:	230a      	movs	r3, #10
   120e6:	18fb      	adds	r3, r7, r3
   120e8:	701a      	strb	r2, [r3, #0]
			xQueueSendFromISR(gsm_rx_queue, &data, NULL);
   120ea:	4b08      	ldr	r3, [pc, #32]	; (1210c <gsm_rx_handler+0x78>)
   120ec:	6818      	ldr	r0, [r3, #0]
   120ee:	230a      	movs	r3, #10
   120f0:	18f9      	adds	r1, r7, r3
   120f2:	2300      	movs	r3, #0
   120f4:	2200      	movs	r2, #0
   120f6:	4c06      	ldr	r4, [pc, #24]	; (12110 <gsm_rx_handler+0x7c>)
   120f8:	47a0      	blx	r4
			gsm_module_exit_sleep(true);
   120fa:	2001      	movs	r0, #1
   120fc:	4b05      	ldr	r3, [pc, #20]	; (12114 <gsm_rx_handler+0x80>)
   120fe:	4798      	blx	r3
}
   12100:	46c0      	nop			; (mov r8, r8)
   12102:	46bd      	mov	sp, r7
   12104:	b005      	add	sp, #20
   12106:	bd90      	pop	{r4, r7, pc}
   12108:	42001400 	.word	0x42001400
   1210c:	20000220 	.word	0x20000220
   12110:	0001f421 	.word	0x0001f421
   12114:	00012301 	.word	0x00012301

00012118 <gsm_ring_detect_pin_callback>:

static void gsm_ring_detect_pin_callback(void)
{
   12118:	b580      	push	{r7, lr}
   1211a:	af00      	add	r7, sp, #0
	isRinging = !port_pin_get_input_level(GSM_RING_PIN);
   1211c:	2031      	movs	r0, #49	; 0x31
   1211e:	4b09      	ldr	r3, [pc, #36]	; (12144 <gsm_ring_detect_pin_callback+0x2c>)
   12120:	4798      	blx	r3
   12122:	0003      	movs	r3, r0
   12124:	1e5a      	subs	r2, r3, #1
   12126:	4193      	sbcs	r3, r2
   12128:	b2db      	uxtb	r3, r3
   1212a:	2201      	movs	r2, #1
   1212c:	4053      	eors	r3, r2
   1212e:	b2db      	uxtb	r3, r3
   12130:	1c1a      	adds	r2, r3, #0
   12132:	2301      	movs	r3, #1
   12134:	4013      	ands	r3, r2
   12136:	b2da      	uxtb	r2, r3
   12138:	4b03      	ldr	r3, [pc, #12]	; (12148 <gsm_ring_detect_pin_callback+0x30>)
   1213a:	701a      	strb	r2, [r3, #0]
}
   1213c:	46c0      	nop			; (mov r8, r8)
   1213e:	46bd      	mov	sp, r7
   12140:	bd80      	pop	{r7, pc}
   12142:	46c0      	nop			; (mov r8, r8)
   12144:	00011ded 	.word	0x00011ded
   12148:	2000068e 	.word	0x2000068e

0001214c <gsm_init>:

void gsm_init(void)
{
   1214c:	b590      	push	{r4, r7, lr}
   1214e:	b097      	sub	sp, #92	; 0x5c
   12150:	af02      	add	r7, sp, #8
	struct port_config gsm_pin_config;
	port_get_config_defaults(&gsm_pin_config);
   12152:	234c      	movs	r3, #76	; 0x4c
   12154:	18fb      	adds	r3, r7, r3
   12156:	0018      	movs	r0, r3
   12158:	4b4d      	ldr	r3, [pc, #308]	; (12290 <gsm_init+0x144>)
   1215a:	4798      	blx	r3
	
	/* Configure pin to control the GSM module sleep state */
	gsm_pin_config.direction = PORT_PIN_DIR_OUTPUT;
   1215c:	234c      	movs	r3, #76	; 0x4c
   1215e:	18fb      	adds	r3, r7, r3
   12160:	2201      	movs	r2, #1
   12162:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(GSM_DTR_PIN, &gsm_pin_config);
   12164:	234c      	movs	r3, #76	; 0x4c
   12166:	18fb      	adds	r3, r7, r3
   12168:	0019      	movs	r1, r3
   1216a:	2014      	movs	r0, #20
   1216c:	4b49      	ldr	r3, [pc, #292]	; (12294 <gsm_init+0x148>)
   1216e:	4798      	blx	r3
	port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
   12170:	2100      	movs	r1, #0
   12172:	2014      	movs	r0, #20
   12174:	4b48      	ldr	r3, [pc, #288]	; (12298 <gsm_init+0x14c>)
   12176:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
   12178:	2340      	movs	r3, #64	; 0x40
   1217a:	18fb      	adds	r3, r7, r3
   1217c:	0018      	movs	r0, r3
   1217e:	4b47      	ldr	r3, [pc, #284]	; (1229c <gsm_init+0x150>)
   12180:	4798      	blx	r3
	config_extint_chan.gpio_pin = GSM_RING_EIC_PIN;
   12182:	2340      	movs	r3, #64	; 0x40
   12184:	18fb      	adds	r3, r7, r3
   12186:	2231      	movs	r2, #49	; 0x31
   12188:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = GSM_RING_EIC_MUX;
   1218a:	2340      	movs	r3, #64	; 0x40
   1218c:	18fb      	adds	r3, r7, r3
   1218e:	2200      	movs	r2, #0
   12190:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   12192:	2340      	movs	r3, #64	; 0x40
   12194:	18fb      	adds	r3, r7, r3
   12196:	2201      	movs	r2, #1
   12198:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
   1219a:	2340      	movs	r3, #64	; 0x40
   1219c:	18fb      	adds	r3, r7, r3
   1219e:	2203      	movs	r2, #3
   121a0:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(GSM_RING_EIC_LINE, &config_extint_chan);
   121a2:	2340      	movs	r3, #64	; 0x40
   121a4:	18fb      	adds	r3, r7, r3
   121a6:	0019      	movs	r1, r3
   121a8:	2001      	movs	r0, #1
   121aa:	4b3d      	ldr	r3, [pc, #244]	; (122a0 <gsm_init+0x154>)
   121ac:	4798      	blx	r3
	
	extint_chan_enable_callback(GSM_RING_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   121ae:	2100      	movs	r1, #0
   121b0:	2001      	movs	r0, #1
   121b2:	4b3c      	ldr	r3, [pc, #240]	; (122a4 <gsm_init+0x158>)
   121b4:	4798      	blx	r3
	extint_register_callback(gsm_ring_detect_pin_callback,GSM_RING_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   121b6:	4b3c      	ldr	r3, [pc, #240]	; (122a8 <gsm_init+0x15c>)
   121b8:	2200      	movs	r2, #0
   121ba:	2101      	movs	r1, #1
   121bc:	0018      	movs	r0, r3
   121be:	4b3b      	ldr	r3, [pc, #236]	; (122ac <gsm_init+0x160>)
   121c0:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	
	gsm_rx_queue = xQueueCreate(240, sizeof(uint8_t));
   121c2:	2200      	movs	r2, #0
   121c4:	2101      	movs	r1, #1
   121c6:	20f0      	movs	r0, #240	; 0xf0
   121c8:	4b39      	ldr	r3, [pc, #228]	; (122b0 <gsm_init+0x164>)
   121ca:	4798      	blx	r3
   121cc:	0002      	movs	r2, r0
   121ce:	4b39      	ldr	r3, [pc, #228]	; (122b4 <gsm_init+0x168>)
   121d0:	601a      	str	r2, [r3, #0]
	gsm_cmd_timeout_timer = xTimerCreate((const char *)"GSM Timeout",GSM_TIMEOUT_PERIOD_TICKS, pdFALSE, NULL, gsm_timer_callback);
   121d2:	4939      	ldr	r1, [pc, #228]	; (122b8 <gsm_init+0x16c>)
   121d4:	4839      	ldr	r0, [pc, #228]	; (122bc <gsm_init+0x170>)
   121d6:	4b3a      	ldr	r3, [pc, #232]	; (122c0 <gsm_init+0x174>)
   121d8:	9300      	str	r3, [sp, #0]
   121da:	2300      	movs	r3, #0
   121dc:	2200      	movs	r2, #0
   121de:	4c39      	ldr	r4, [pc, #228]	; (122c4 <gsm_init+0x178>)
   121e0:	47a0      	blx	r4
   121e2:	0002      	movs	r2, r0
   121e4:	4b38      	ldr	r3, [pc, #224]	; (122c8 <gsm_init+0x17c>)
   121e6:	601a      	str	r2, [r3, #0]
	vSemaphoreCreateBinary(gsm_busy_semaphore);
   121e8:	2203      	movs	r2, #3
   121ea:	2100      	movs	r1, #0
   121ec:	2001      	movs	r0, #1
   121ee:	4b30      	ldr	r3, [pc, #192]	; (122b0 <gsm_init+0x164>)
   121f0:	4798      	blx	r3
   121f2:	0002      	movs	r2, r0
   121f4:	4b35      	ldr	r3, [pc, #212]	; (122cc <gsm_init+0x180>)
   121f6:	601a      	str	r2, [r3, #0]
   121f8:	4b34      	ldr	r3, [pc, #208]	; (122cc <gsm_init+0x180>)
   121fa:	681b      	ldr	r3, [r3, #0]
   121fc:	2b00      	cmp	r3, #0
   121fe:	d006      	beq.n	1220e <gsm_init+0xc2>
   12200:	4b32      	ldr	r3, [pc, #200]	; (122cc <gsm_init+0x180>)
   12202:	6818      	ldr	r0, [r3, #0]
   12204:	2300      	movs	r3, #0
   12206:	2200      	movs	r2, #0
   12208:	2100      	movs	r1, #0
   1220a:	4c31      	ldr	r4, [pc, #196]	; (122d0 <gsm_init+0x184>)
   1220c:	47a0      	blx	r4
	
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
   1220e:	003b      	movs	r3, r7
   12210:	0018      	movs	r0, r3
   12212:	4b30      	ldr	r3, [pc, #192]	; (122d4 <gsm_init+0x188>)
   12214:	4798      	blx	r3
	config_usart.baudrate		= GSM_BAUDRATE;
   12216:	003b      	movs	r3, r7
   12218:	2296      	movs	r2, #150	; 0x96
   1221a:	01d2      	lsls	r2, r2, #7
   1221c:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting	= GSM_SERCOM_MUX;
   1221e:	003b      	movs	r3, r7
   12220:	2280      	movs	r2, #128	; 0x80
   12222:	0352      	lsls	r2, r2, #13
   12224:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0	= GSM_SERCOM_PAD0_MUX;
   12226:	003b      	movs	r3, r7
   12228:	4a2b      	ldr	r2, [pc, #172]	; (122d8 <gsm_init+0x18c>)
   1222a:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1	= GSM_SERCOM_PAD1_MUX;
   1222c:	003b      	movs	r3, r7
   1222e:	4a2b      	ldr	r2, [pc, #172]	; (122dc <gsm_init+0x190>)
   12230:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2	= GSM_SERCOM_PAD2_MUX;
   12232:	003b      	movs	r3, r7
   12234:	2201      	movs	r2, #1
   12236:	4252      	negs	r2, r2
   12238:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3	= GSM_SERCOM_PAD3_MUX;
   1223a:	003b      	movs	r3, r7
   1223c:	2201      	movs	r2, #1
   1223e:	4252      	negs	r2, r2
   12240:	63da      	str	r2, [r3, #60]	; 0x3c
	config_usart.run_in_standby = true;
   12242:	003b      	movs	r3, r7
   12244:	222c      	movs	r2, #44	; 0x2c
   12246:	2101      	movs	r1, #1
   12248:	5499      	strb	r1, [r3, r2]
	while (usart_init(&gsm_usart,GSM_SERCOM, &config_usart) != STATUS_OK)
   1224a:	e003      	b.n	12254 <gsm_init+0x108>
	{
		usart_reset(&gsm_usart);
   1224c:	4b24      	ldr	r3, [pc, #144]	; (122e0 <gsm_init+0x194>)
   1224e:	0018      	movs	r0, r3
   12250:	4b24      	ldr	r3, [pc, #144]	; (122e4 <gsm_init+0x198>)
   12252:	4798      	blx	r3
	while (usart_init(&gsm_usart,GSM_SERCOM, &config_usart) != STATUS_OK)
   12254:	003a      	movs	r2, r7
   12256:	4924      	ldr	r1, [pc, #144]	; (122e8 <gsm_init+0x19c>)
   12258:	4b21      	ldr	r3, [pc, #132]	; (122e0 <gsm_init+0x194>)
   1225a:	0018      	movs	r0, r3
   1225c:	4b23      	ldr	r3, [pc, #140]	; (122ec <gsm_init+0x1a0>)
   1225e:	4798      	blx	r3
   12260:	1e03      	subs	r3, r0, #0
   12262:	d1f3      	bne.n	1224c <gsm_init+0x100>
	}
	usart_enable(&gsm_usart);
   12264:	4b1e      	ldr	r3, [pc, #120]	; (122e0 <gsm_init+0x194>)
   12266:	0018      	movs	r0, r3
   12268:	4b21      	ldr	r3, [pc, #132]	; (122f0 <gsm_init+0x1a4>)
   1226a:	4798      	blx	r3
	_sercom_set_handler(_sercom_get_sercom_inst_index(GSM_SERCOM),gsm_rx_handler);
   1226c:	4b1e      	ldr	r3, [pc, #120]	; (122e8 <gsm_init+0x19c>)
   1226e:	0018      	movs	r0, r3
   12270:	4b20      	ldr	r3, [pc, #128]	; (122f4 <gsm_init+0x1a8>)
   12272:	4798      	blx	r3
   12274:	0003      	movs	r3, r0
   12276:	001a      	movs	r2, r3
   12278:	4b1f      	ldr	r3, [pc, #124]	; (122f8 <gsm_init+0x1ac>)
   1227a:	0019      	movs	r1, r3
   1227c:	0010      	movs	r0, r2
   1227e:	4b1f      	ldr	r3, [pc, #124]	; (122fc <gsm_init+0x1b0>)
   12280:	4798      	blx	r3
	GSM_SERCOM->USART.INTENSET.reg=SERCOM_USART_INTFLAG_RXC;
   12282:	4b19      	ldr	r3, [pc, #100]	; (122e8 <gsm_init+0x19c>)
   12284:	2204      	movs	r2, #4
   12286:	759a      	strb	r2, [r3, #22]
}
   12288:	46c0      	nop			; (mov r8, r8)
   1228a:	46bd      	mov	sp, r7
   1228c:	b015      	add	sp, #84	; 0x54
   1228e:	bd90      	pop	{r4, r7, pc}
   12290:	00011dc9 	.word	0x00011dc9
   12294:	00023071 	.word	0x00023071
   12298:	00011e31 	.word	0x00011e31
   1229c:	0001e005 	.word	0x0001e005
   122a0:	0001e039 	.word	0x0001e039
   122a4:	00022561 	.word	0x00022561
   122a8:	00012119 	.word	0x00012119
   122ac:	000224fd 	.word	0x000224fd
   122b0:	0001f185 	.word	0x0001f185
   122b4:	20000220 	.word	0x20000220
   122b8:	00001388 	.word	0x00001388
   122bc:	00029bb4 	.word	0x00029bb4
   122c0:	00012051 	.word	0x00012051
   122c4:	00020f09 	.word	0x00020f09
   122c8:	20000224 	.word	0x20000224
   122cc:	20000228 	.word	0x20000228
   122d0:	0001f241 	.word	0x0001f241
   122d4:	00011ec9 	.word	0x00011ec9
   122d8:	00160002 	.word	0x00160002
   122dc:	00170002 	.word	0x00170002
   122e0:	20000690 	.word	0x20000690
   122e4:	0001201d 	.word	0x0001201d
   122e8:	42001400 	.word	0x42001400
   122ec:	00021b55 	.word	0x00021b55
   122f0:	00011f89 	.word	0x00011f89
   122f4:	0001ec19 	.word	0x0001ec19
   122f8:	00012095 	.word	0x00012095
   122fc:	000222f1 	.word	0x000222f1

00012300 <gsm_module_exit_sleep>:

void gsm_module_exit_sleep(bool calledFromRead)
{
   12300:	b580      	push	{r7, lr}
   12302:	b082      	sub	sp, #8
   12304:	af00      	add	r7, sp, #0
   12306:	0002      	movs	r2, r0
   12308:	1dfb      	adds	r3, r7, #7
   1230a:	701a      	strb	r2, [r3, #0]
	if (!isGSMModuleAwake)
   1230c:	4b10      	ldr	r3, [pc, #64]	; (12350 <gsm_module_exit_sleep+0x50>)
   1230e:	781b      	ldrb	r3, [r3, #0]
   12310:	b2db      	uxtb	r3, r3
   12312:	2201      	movs	r2, #1
   12314:	4053      	eors	r3, r2
   12316:	b2db      	uxtb	r3, r3
   12318:	2b00      	cmp	r3, #0
   1231a:	d010      	beq.n	1233e <gsm_module_exit_sleep+0x3e>
	{
		port_pin_set_output_level(GSM_DTR_PIN, GSM_DTR_PIN_ACTIVE);
   1231c:	2101      	movs	r1, #1
   1231e:	2014      	movs	r0, #20
   12320:	4b0c      	ldr	r3, [pc, #48]	; (12354 <gsm_module_exit_sleep+0x54>)
   12322:	4798      	blx	r3
		isGSMModuleAwake = true;
   12324:	4b0a      	ldr	r3, [pc, #40]	; (12350 <gsm_module_exit_sleep+0x50>)
   12326:	2201      	movs	r2, #1
   12328:	701a      	strb	r2, [r3, #0]
		if (!calledFromRead)
   1232a:	1dfb      	adds	r3, r7, #7
   1232c:	781b      	ldrb	r3, [r3, #0]
   1232e:	2201      	movs	r2, #1
   12330:	4053      	eors	r3, r2
   12332:	b2db      	uxtb	r3, r3
   12334:	2b00      	cmp	r3, #0
   12336:	d002      	beq.n	1233e <gsm_module_exit_sleep+0x3e>
		{
			vTaskDelay(100 / portTICK_PERIOD_MS);
   12338:	2064      	movs	r0, #100	; 0x64
   1233a:	4b07      	ldr	r3, [pc, #28]	; (12358 <gsm_module_exit_sleep+0x58>)
   1233c:	4798      	blx	r3
		}
	}
	
	lastGSMCommunicationTime=xTaskGetTickCount();
   1233e:	4b07      	ldr	r3, [pc, #28]	; (1235c <gsm_module_exit_sleep+0x5c>)
   12340:	4798      	blx	r3
   12342:	0002      	movs	r2, r0
   12344:	4b06      	ldr	r3, [pc, #24]	; (12360 <gsm_module_exit_sleep+0x60>)
   12346:	601a      	str	r2, [r3, #0]
}
   12348:	46c0      	nop			; (mov r8, r8)
   1234a:	46bd      	mov	sp, r7
   1234c:	b002      	add	sp, #8
   1234e:	bd80      	pop	{r7, pc}
   12350:	20000684 	.word	0x20000684
   12354:	00011e31 	.word	0x00011e31
   12358:	0001ffe9 	.word	0x0001ffe9
   1235c:	0002034d 	.word	0x0002034d
   12360:	2000021c 	.word	0x2000021c

00012364 <gsm_module_enter_sleep>:

void gsm_module_enter_sleep(void)
{
   12364:	b580      	push	{r7, lr}
   12366:	af00      	add	r7, sp, #0
	//port_pin_set_output_level(GSM_DTR_PIN, GSM_DTR_PIN_DEACTIVE);
	isGSMModuleAwake = false;
   12368:	4b02      	ldr	r3, [pc, #8]	; (12374 <gsm_module_enter_sleep+0x10>)
   1236a:	2200      	movs	r2, #0
   1236c:	701a      	strb	r2, [r3, #0]
}
   1236e:	46c0      	nop			; (mov r8, r8)
   12370:	46bd      	mov	sp, r7
   12372:	bd80      	pop	{r7, pc}
   12374:	20000684 	.word	0x20000684

00012378 <gsm_module_sleep_elligible>:

bool gsm_module_sleep_elligible(void)
{
   12378:	b580      	push	{r7, lr}
   1237a:	b082      	sub	sp, #8
   1237c:	af00      	add	r7, sp, #0
	if(isGSMModuleAwake)
   1237e:	4b0e      	ldr	r3, [pc, #56]	; (123b8 <gsm_module_sleep_elligible+0x40>)
   12380:	781b      	ldrb	r3, [r3, #0]
   12382:	b2db      	uxtb	r3, r3
   12384:	2b00      	cmp	r3, #0
   12386:	d011      	beq.n	123ac <gsm_module_sleep_elligible+0x34>
	{
		bool ret=false;
   12388:	1dfb      	adds	r3, r7, #7
   1238a:	2200      	movs	r2, #0
   1238c:	701a      	strb	r2, [r3, #0]
		ret= ((xTaskGetTickCount() - lastGSMCommunicationTime)>=50000L);
   1238e:	4b0b      	ldr	r3, [pc, #44]	; (123bc <gsm_module_sleep_elligible+0x44>)
   12390:	4798      	blx	r3
   12392:	0002      	movs	r2, r0
   12394:	4b0a      	ldr	r3, [pc, #40]	; (123c0 <gsm_module_sleep_elligible+0x48>)
   12396:	681b      	ldr	r3, [r3, #0]
   12398:	1ad2      	subs	r2, r2, r3
   1239a:	1dfb      	adds	r3, r7, #7
   1239c:	4909      	ldr	r1, [pc, #36]	; (123c4 <gsm_module_sleep_elligible+0x4c>)
   1239e:	4291      	cmp	r1, r2
   123a0:	4192      	sbcs	r2, r2
   123a2:	4252      	negs	r2, r2
   123a4:	701a      	strb	r2, [r3, #0]
		return ret;
   123a6:	1dfb      	adds	r3, r7, #7
   123a8:	781b      	ldrb	r3, [r3, #0]
   123aa:	e000      	b.n	123ae <gsm_module_sleep_elligible+0x36>
	}
	return true;
   123ac:	2301      	movs	r3, #1
}
   123ae:	0018      	movs	r0, r3
   123b0:	46bd      	mov	sp, r7
   123b2:	b002      	add	sp, #8
   123b4:	bd80      	pop	{r7, pc}
   123b6:	46c0      	nop			; (mov r8, r8)
   123b8:	20000684 	.word	0x20000684
   123bc:	0002034d 	.word	0x0002034d
   123c0:	2000021c 	.word	0x2000021c
   123c4:	0000c34f 	.word	0x0000c34f

000123c8 <gsm_send_at_command>:

enum gsm_error gsm_send_at_command(const char *const atcommand,const char* aResponExit,const uint32_t aTimeoutMax,const uint8_t aLenOut, char *aResponOut)
{
   123c8:	b590      	push	{r4, r7, lr}
   123ca:	b08b      	sub	sp, #44	; 0x2c
   123cc:	af02      	add	r7, sp, #8
   123ce:	60f8      	str	r0, [r7, #12]
   123d0:	60b9      	str	r1, [r7, #8]
   123d2:	607a      	str	r2, [r7, #4]
   123d4:	001a      	movs	r2, r3
   123d6:	1cfb      	adds	r3, r7, #3
   123d8:	701a      	strb	r2, [r3, #0]
	
	/* Try to acquire the command lock; if already busy with a command, abort */
	if (xSemaphoreTake(gsm_busy_semaphore, 1) == pdFALSE)
   123da:	4b66      	ldr	r3, [pc, #408]	; (12574 <gsm_send_at_command+0x1ac>)
   123dc:	681b      	ldr	r3, [r3, #0]
   123de:	2101      	movs	r1, #1
   123e0:	0018      	movs	r0, r3
   123e2:	4b65      	ldr	r3, [pc, #404]	; (12578 <gsm_send_at_command+0x1b0>)
   123e4:	4798      	blx	r3
   123e6:	1e03      	subs	r3, r0, #0
   123e8:	d101      	bne.n	123ee <gsm_send_at_command+0x26>
	{
		return GSM_ERROR_OPERATION_IN_PROGRESS;
   123ea:	2302      	movs	r3, #2
   123ec:	e0bd      	b.n	1256a <gsm_send_at_command+0x1a2>
	}
	
	
	/* Enable DTR and wait for the module to be ready to accept a command */
	gsm_module_exit_sleep(false);
   123ee:	2000      	movs	r0, #0
   123f0:	4b62      	ldr	r3, [pc, #392]	; (1257c <gsm_send_at_command+0x1b4>)
   123f2:	4798      	blx	r3
	/*                                                                      */
	
	//lastGSMCommandTime=xTaskGetTickCount();
	
	//////////////////////////////////////////////////////////////////////////
	Flush_RX_Buffer();
   123f4:	4b62      	ldr	r3, [pc, #392]	; (12580 <gsm_send_at_command+0x1b8>)
   123f6:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	enum gsm_error err_no=GSM_ERROR_NONE;
   123f8:	231f      	movs	r3, #31
   123fa:	18fb      	adds	r3, r7, r3
   123fc:	2200      	movs	r2, #0
   123fe:	701a      	strb	r2, [r3, #0]
	
	uint8_t u8tRx_Index=0;
   12400:	231e      	movs	r3, #30
   12402:	18fb      	adds	r3, r7, r3
   12404:	2200      	movs	r2, #0
   12406:	701a      	strb	r2, [r3, #0]
	char u8tTemp_Char=0;
   12408:	2313      	movs	r3, #19
   1240a:	18fb      	adds	r3, r7, r3
   1240c:	2200      	movs	r2, #0
   1240e:	701a      	strb	r2, [r3, #0]
	portBASE_TYPE xStatus;

	char *aDataBuffer = (char*) calloc(MAX_BUFFER_TMP,sizeof(char));
   12410:	2101      	movs	r1, #1
   12412:	20f0      	movs	r0, #240	; 0xf0
   12414:	4b5b      	ldr	r3, [pc, #364]	; (12584 <gsm_send_at_command+0x1bc>)
   12416:	4798      	blx	r3
   12418:	0003      	movs	r3, r0
   1241a:	61bb      	str	r3, [r7, #24]
	
	//buffer created???
	if (aDataBuffer == NULL)
   1241c:	69bb      	ldr	r3, [r7, #24]
   1241e:	2b00      	cmp	r3, #0
   12420:	d101      	bne.n	12426 <gsm_send_at_command+0x5e>
	{
		//port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
		return 0;
   12422:	2300      	movs	r3, #0
   12424:	e0a1      	b.n	1256a <gsm_send_at_command+0x1a2>
	}

	//reset to all 0
	memset(aDataBuffer, '\0', MAX_BUFFER_TMP);
   12426:	69bb      	ldr	r3, [r7, #24]
   12428:	22f0      	movs	r2, #240	; 0xf0
   1242a:	2100      	movs	r1, #0
   1242c:	0018      	movs	r0, r3
   1242e:	4b56      	ldr	r3, [pc, #344]	; (12588 <gsm_send_at_command+0x1c0>)
   12430:	4798      	blx	r3
	
	/* Send the command to the GSM module when it is ready */
	usart_write_buffer_wait(&gsm_usart, (uint8_t *)atcommand, strlen(atcommand));
   12432:	68fb      	ldr	r3, [r7, #12]
   12434:	0018      	movs	r0, r3
   12436:	4b55      	ldr	r3, [pc, #340]	; (1258c <gsm_send_at_command+0x1c4>)
   12438:	4798      	blx	r3
   1243a:	0003      	movs	r3, r0
   1243c:	b29a      	uxth	r2, r3
   1243e:	68f9      	ldr	r1, [r7, #12]
   12440:	4b53      	ldr	r3, [pc, #332]	; (12590 <gsm_send_at_command+0x1c8>)
   12442:	0018      	movs	r0, r3
   12444:	4b53      	ldr	r3, [pc, #332]	; (12594 <gsm_send_at_command+0x1cc>)
   12446:	4798      	blx	r3
	
	/* Start the timeout timer to ensure a timely response from the module */
	xTimerChangePeriod(gsm_cmd_timeout_timer,(aTimeoutMax / portTICK_PERIOD_MS),portMAX_DELAY);
   12448:	4b53      	ldr	r3, [pc, #332]	; (12598 <gsm_send_at_command+0x1d0>)
   1244a:	6818      	ldr	r0, [r3, #0]
   1244c:	687a      	ldr	r2, [r7, #4]
   1244e:	2301      	movs	r3, #1
   12450:	425b      	negs	r3, r3
   12452:	9300      	str	r3, [sp, #0]
   12454:	2300      	movs	r3, #0
   12456:	2104      	movs	r1, #4
   12458:	4c50      	ldr	r4, [pc, #320]	; (1259c <gsm_send_at_command+0x1d4>)
   1245a:	47a0      	blx	r4
	
	while (true)
	{
		if(xTimerIsTimerActive(gsm_cmd_timeout_timer))
   1245c:	4b4e      	ldr	r3, [pc, #312]	; (12598 <gsm_send_at_command+0x1d0>)
   1245e:	681b      	ldr	r3, [r3, #0]
   12460:	0018      	movs	r0, r3
   12462:	4b4f      	ldr	r3, [pc, #316]	; (125a0 <gsm_send_at_command+0x1d8>)
   12464:	4798      	blx	r3
   12466:	1e03      	subs	r3, r0, #0
   12468:	d03e      	beq.n	124e8 <gsm_send_at_command+0x120>
		{
			if (u8tRx_Index<240)
   1246a:	231e      	movs	r3, #30
   1246c:	18fb      	adds	r3, r7, r3
   1246e:	781b      	ldrb	r3, [r3, #0]
   12470:	2bef      	cmp	r3, #239	; 0xef
   12472:	d81c      	bhi.n	124ae <gsm_send_at_command+0xe6>
			{
				xStatus=xQueueReceive(gsm_rx_queue,&u8tTemp_Char, 0);
   12474:	4b4b      	ldr	r3, [pc, #300]	; (125a4 <gsm_send_at_command+0x1dc>)
   12476:	681b      	ldr	r3, [r3, #0]
   12478:	2213      	movs	r2, #19
   1247a:	18b9      	adds	r1, r7, r2
   1247c:	2200      	movs	r2, #0
   1247e:	0018      	movs	r0, r3
   12480:	4b49      	ldr	r3, [pc, #292]	; (125a8 <gsm_send_at_command+0x1e0>)
   12482:	4798      	blx	r3
   12484:	0003      	movs	r3, r0
   12486:	617b      	str	r3, [r7, #20]
				if(xStatus!=errQUEUE_EMPTY)
   12488:	697b      	ldr	r3, [r7, #20]
   1248a:	2b00      	cmp	r3, #0
   1248c:	d00f      	beq.n	124ae <gsm_send_at_command+0xe6>
				{
					aDataBuffer[u8tRx_Index] = u8tTemp_Char;
   1248e:	231e      	movs	r3, #30
   12490:	18fb      	adds	r3, r7, r3
   12492:	781b      	ldrb	r3, [r3, #0]
   12494:	69ba      	ldr	r2, [r7, #24]
   12496:	18d3      	adds	r3, r2, r3
   12498:	2213      	movs	r2, #19
   1249a:	18ba      	adds	r2, r7, r2
   1249c:	7812      	ldrb	r2, [r2, #0]
   1249e:	701a      	strb	r2, [r3, #0]
					u8tRx_Index++;
   124a0:	231e      	movs	r3, #30
   124a2:	18fb      	adds	r3, r7, r3
   124a4:	781a      	ldrb	r2, [r3, #0]
   124a6:	231e      	movs	r3, #30
   124a8:	18fb      	adds	r3, r7, r3
   124aa:	3201      	adds	r2, #1
   124ac:	701a      	strb	r2, [r3, #0]
				}
			}
			if (aResponExit != NULL)
   124ae:	68bb      	ldr	r3, [r7, #8]
   124b0:	2b00      	cmp	r3, #0
   124b2:	d00c      	beq.n	124ce <gsm_send_at_command+0x106>
			{
				if (strstr((const char*)aDataBuffer, (const char*)aResponExit) != NULL)
   124b4:	68ba      	ldr	r2, [r7, #8]
   124b6:	69bb      	ldr	r3, [r7, #24]
   124b8:	0011      	movs	r1, r2
   124ba:	0018      	movs	r0, r3
   124bc:	4b3b      	ldr	r3, [pc, #236]	; (125ac <gsm_send_at_command+0x1e4>)
   124be:	4798      	blx	r3
   124c0:	1e03      	subs	r3, r0, #0
   124c2:	d004      	beq.n	124ce <gsm_send_at_command+0x106>
				{
					err_no = GSM_ERROR_NONE;
   124c4:	231f      	movs	r3, #31
   124c6:	18fb      	adds	r3, r7, r3
   124c8:	2200      	movs	r2, #0
   124ca:	701a      	strb	r2, [r3, #0]
					break;
   124cc:	e024      	b.n	12518 <gsm_send_at_command+0x150>
				}
			}
			if (strstr((const char*)aDataBuffer, (const char*)RESPONS_ERROR) != NULL)
   124ce:	4a38      	ldr	r2, [pc, #224]	; (125b0 <gsm_send_at_command+0x1e8>)
   124d0:	69bb      	ldr	r3, [r7, #24]
   124d2:	0011      	movs	r1, r2
   124d4:	0018      	movs	r0, r3
   124d6:	4b35      	ldr	r3, [pc, #212]	; (125ac <gsm_send_at_command+0x1e4>)
   124d8:	4798      	blx	r3
   124da:	1e03      	subs	r3, r0, #0
   124dc:	d0be      	beq.n	1245c <gsm_send_at_command+0x94>
			{
				err_no = GSM_ERROR_COMMAND_ERROR;
   124de:	231f      	movs	r3, #31
   124e0:	18fb      	adds	r3, r7, r3
   124e2:	220b      	movs	r2, #11
   124e4:	701a      	strb	r2, [r3, #0]
				break;
   124e6:	e017      	b.n	12518 <gsm_send_at_command+0x150>
			}
		}
		else
		{
			xTimerStop(gsm_cmd_timeout_timer, portMAX_DELAY);
   124e8:	4b2b      	ldr	r3, [pc, #172]	; (12598 <gsm_send_at_command+0x1d0>)
   124ea:	6818      	ldr	r0, [r3, #0]
   124ec:	2301      	movs	r3, #1
   124ee:	425b      	negs	r3, r3
   124f0:	9300      	str	r3, [sp, #0]
   124f2:	2300      	movs	r3, #0
   124f4:	2200      	movs	r2, #0
   124f6:	2103      	movs	r1, #3
   124f8:	4c28      	ldr	r4, [pc, #160]	; (1259c <gsm_send_at_command+0x1d4>)
   124fa:	47a0      	blx	r4
			if (u8tRx_Index==0)
   124fc:	231e      	movs	r3, #30
   124fe:	18fb      	adds	r3, r7, r3
   12500:	781b      	ldrb	r3, [r3, #0]
   12502:	2b00      	cmp	r3, #0
   12504:	d104      	bne.n	12510 <gsm_send_at_command+0x148>
			{
				err_no = GSM_ERROR_TIMEOUT;
   12506:	231f      	movs	r3, #31
   12508:	18fb      	adds	r3, r7, r3
   1250a:	2207      	movs	r2, #7
   1250c:	701a      	strb	r2, [r3, #0]
				break;
   1250e:	e003      	b.n	12518 <gsm_send_at_command+0x150>
			}
			else
			{
				err_no = GSM_ERROR_UNKWON;
   12510:	231f      	movs	r3, #31
   12512:	18fb      	adds	r3, r7, r3
   12514:	2208      	movs	r2, #8
   12516:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	
	//copy it to the out
	if ((aLenOut != 0) && (aResponOut != NULL) && (aLenOut > u8tRx_Index) && (err_no==GSM_ERROR_NONE))
   12518:	1cfb      	adds	r3, r7, #3
   1251a:	781b      	ldrb	r3, [r3, #0]
   1251c:	2b00      	cmp	r3, #0
   1251e:	d016      	beq.n	1254e <gsm_send_at_command+0x186>
   12520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12522:	2b00      	cmp	r3, #0
   12524:	d013      	beq.n	1254e <gsm_send_at_command+0x186>
   12526:	1cfa      	adds	r2, r7, #3
   12528:	231e      	movs	r3, #30
   1252a:	18fb      	adds	r3, r7, r3
   1252c:	7812      	ldrb	r2, [r2, #0]
   1252e:	781b      	ldrb	r3, [r3, #0]
   12530:	429a      	cmp	r2, r3
   12532:	d90c      	bls.n	1254e <gsm_send_at_command+0x186>
   12534:	231f      	movs	r3, #31
   12536:	18fb      	adds	r3, r7, r3
   12538:	781b      	ldrb	r3, [r3, #0]
   1253a:	2b00      	cmp	r3, #0
   1253c:	d107      	bne.n	1254e <gsm_send_at_command+0x186>
	{
		memcpy(aResponOut, aDataBuffer, u8tRx_Index *sizeof(uint8_t));
   1253e:	231e      	movs	r3, #30
   12540:	18fb      	adds	r3, r7, r3
   12542:	781a      	ldrb	r2, [r3, #0]
   12544:	69b9      	ldr	r1, [r7, #24]
   12546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12548:	0018      	movs	r0, r3
   1254a:	4b1a      	ldr	r3, [pc, #104]	; (125b4 <gsm_send_at_command+0x1ec>)
   1254c:	4798      	blx	r3
	}
	
	//port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
	
	xSemaphoreGive(gsm_busy_semaphore);
   1254e:	4b09      	ldr	r3, [pc, #36]	; (12574 <gsm_send_at_command+0x1ac>)
   12550:	6818      	ldr	r0, [r3, #0]
   12552:	2300      	movs	r3, #0
   12554:	2200      	movs	r2, #0
   12556:	2100      	movs	r1, #0
   12558:	4c17      	ldr	r4, [pc, #92]	; (125b8 <gsm_send_at_command+0x1f0>)
   1255a:	47a0      	blx	r4
	free(aDataBuffer);
   1255c:	69bb      	ldr	r3, [r7, #24]
   1255e:	0018      	movs	r0, r3
   12560:	4b16      	ldr	r3, [pc, #88]	; (125bc <gsm_send_at_command+0x1f4>)
   12562:	4798      	blx	r3
	return err_no;
   12564:	231f      	movs	r3, #31
   12566:	18fb      	adds	r3, r7, r3
   12568:	781b      	ldrb	r3, [r3, #0]
}
   1256a:	0018      	movs	r0, r3
   1256c:	46bd      	mov	sp, r7
   1256e:	b009      	add	sp, #36	; 0x24
   12570:	bd90      	pop	{r4, r7, pc}
   12572:	46c0      	nop			; (mov r8, r8)
   12574:	20000228 	.word	0x20000228
   12578:	0001f6e1 	.word	0x0001f6e1
   1257c:	00012301 	.word	0x00012301
   12580:	00012061 	.word	0x00012061
   12584:	00028e05 	.word	0x00028e05
   12588:	00028f13 	.word	0x00028f13
   1258c:	000291a3 	.word	0x000291a3
   12590:	20000690 	.word	0x20000690
   12594:	00021e2d 	.word	0x00021e2d
   12598:	20000224 	.word	0x20000224
   1259c:	00020fad 	.word	0x00020fad
   125a0:	00021529 	.word	0x00021529
   125a4:	20000220 	.word	0x20000220
   125a8:	0001f541 	.word	0x0001f541
   125ac:	000291d3 	.word	0x000291d3
   125b0:	00029bc0 	.word	0x00029bc0
   125b4:	00028edd 	.word	0x00028edd
   125b8:	0001f241 	.word	0x0001f241
   125bc:	00028ea5 	.word	0x00028ea5

000125c0 <gsm_check_module>:


enum gsm_error gsm_check_module(void)
{
   125c0:	b590      	push	{r4, r7, lr}
   125c2:	b083      	sub	sp, #12
   125c4:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT\r"),(const char*)RESPONS_OK,5000,0, NULL);
   125c6:	4a06      	ldr	r2, [pc, #24]	; (125e0 <gsm_check_module+0x20>)
   125c8:	4906      	ldr	r1, [pc, #24]	; (125e4 <gsm_check_module+0x24>)
   125ca:	4807      	ldr	r0, [pc, #28]	; (125e8 <gsm_check_module+0x28>)
   125cc:	2300      	movs	r3, #0
   125ce:	9300      	str	r3, [sp, #0]
   125d0:	2300      	movs	r3, #0
   125d2:	4c06      	ldr	r4, [pc, #24]	; (125ec <gsm_check_module+0x2c>)
   125d4:	47a0      	blx	r4
   125d6:	0003      	movs	r3, r0
}
   125d8:	0018      	movs	r0, r3
   125da:	46bd      	mov	sp, r7
   125dc:	b001      	add	sp, #4
   125de:	bd90      	pop	{r4, r7, pc}
   125e0:	00001388 	.word	0x00001388
   125e4:	00029bc8 	.word	0x00029bc8
   125e8:	00029bcc 	.word	0x00029bcc
   125ec:	000123c9 	.word	0x000123c9

000125f0 <gsm_is_network_registered>:
{
	return gsm_send_at_command((const char*)("AT+IFC=0,0\r"), (const char*)RESPONS_OK,5000,0, NULL);
}

enum gsm_error gsm_is_network_registered(void)
{
   125f0:	b5b0      	push	{r4, r5, r7, lr}
   125f2:	b084      	sub	sp, #16
   125f4:	af02      	add	r7, sp, #8
	enum gsm_error errHomeNw;
	enum gsm_error errRomNw;
	errHomeNw = gsm_send_at_command((const char*)("AT+CREG?\r"), (const char*)"+CREG: 0,1",5000,0, NULL);
   125f6:	1dfc      	adds	r4, r7, #7
   125f8:	4a12      	ldr	r2, [pc, #72]	; (12644 <gsm_is_network_registered+0x54>)
   125fa:	4913      	ldr	r1, [pc, #76]	; (12648 <gsm_is_network_registered+0x58>)
   125fc:	4813      	ldr	r0, [pc, #76]	; (1264c <gsm_is_network_registered+0x5c>)
   125fe:	2300      	movs	r3, #0
   12600:	9300      	str	r3, [sp, #0]
   12602:	2300      	movs	r3, #0
   12604:	4d12      	ldr	r5, [pc, #72]	; (12650 <gsm_is_network_registered+0x60>)
   12606:	47a8      	blx	r5
   12608:	0003      	movs	r3, r0
   1260a:	7023      	strb	r3, [r4, #0]
	if (errHomeNw==GSM_ERROR_NONE)
   1260c:	1dfb      	adds	r3, r7, #7
   1260e:	781b      	ldrb	r3, [r3, #0]
   12610:	2b00      	cmp	r3, #0
   12612:	d101      	bne.n	12618 <gsm_is_network_registered+0x28>
	{
		return GSM_NETWORK_REGISTERED;
   12614:	2309      	movs	r3, #9
   12616:	e011      	b.n	1263c <gsm_is_network_registered+0x4c>
	}
	else
	{
		errRomNw = gsm_send_at_command((const char*)("AT+CREG?\r"), (const char*)"+CREG: 0,5",5000,0, NULL);
   12618:	1dbc      	adds	r4, r7, #6
   1261a:	4a0a      	ldr	r2, [pc, #40]	; (12644 <gsm_is_network_registered+0x54>)
   1261c:	490d      	ldr	r1, [pc, #52]	; (12654 <gsm_is_network_registered+0x64>)
   1261e:	480b      	ldr	r0, [pc, #44]	; (1264c <gsm_is_network_registered+0x5c>)
   12620:	2300      	movs	r3, #0
   12622:	9300      	str	r3, [sp, #0]
   12624:	2300      	movs	r3, #0
   12626:	4d0a      	ldr	r5, [pc, #40]	; (12650 <gsm_is_network_registered+0x60>)
   12628:	47a8      	blx	r5
   1262a:	0003      	movs	r3, r0
   1262c:	7023      	strb	r3, [r4, #0]
		{
			if (errRomNw==GSM_ERROR_NONE)
   1262e:	1dbb      	adds	r3, r7, #6
   12630:	781b      	ldrb	r3, [r3, #0]
   12632:	2b00      	cmp	r3, #0
   12634:	d101      	bne.n	1263a <gsm_is_network_registered+0x4a>
			{
				return GSM_NETWORK_REGISTERED;
   12636:	2309      	movs	r3, #9
   12638:	e000      	b.n	1263c <gsm_is_network_registered+0x4c>
			}
			else
			{
				return GSM_NETWORK_NOT_REGISTERED;
   1263a:	230a      	movs	r3, #10
			}
		}
	}
}
   1263c:	0018      	movs	r0, r3
   1263e:	46bd      	mov	sp, r7
   12640:	b002      	add	sp, #8
   12642:	bdb0      	pop	{r4, r5, r7, pc}
   12644:	00001388 	.word	0x00001388
   12648:	00029bdc 	.word	0x00029bdc
   1264c:	00029be8 	.word	0x00029be8
   12650:	000123c9 	.word	0x000123c9
   12654:	00029bf4 	.word	0x00029bf4

00012658 <gsm_set_baudrate>:

enum gsm_error gsm_set_baudrate(void)
{
   12658:	b590      	push	{r4, r7, lr}
   1265a:	b089      	sub	sp, #36	; 0x24
   1265c:	af02      	add	r7, sp, #8
	char baurate_at_command[20]={0};
   1265e:	1d3b      	adds	r3, r7, #4
   12660:	0018      	movs	r0, r3
   12662:	2314      	movs	r3, #20
   12664:	001a      	movs	r2, r3
   12666:	2100      	movs	r1, #0
   12668:	4b0a      	ldr	r3, [pc, #40]	; (12694 <gsm_set_baudrate+0x3c>)
   1266a:	4798      	blx	r3
	
	sprintf(baurate_at_command, "AT+IPR=%d\r",GSM_BAUDRATE);
   1266c:	2396      	movs	r3, #150	; 0x96
   1266e:	01da      	lsls	r2, r3, #7
   12670:	4909      	ldr	r1, [pc, #36]	; (12698 <gsm_set_baudrate+0x40>)
   12672:	1d3b      	adds	r3, r7, #4
   12674:	0018      	movs	r0, r3
   12676:	4b09      	ldr	r3, [pc, #36]	; (1269c <gsm_set_baudrate+0x44>)
   12678:	4798      	blx	r3
	
	return gsm_send_at_command((const char*)(baurate_at_command), (const char*)RESPONS_OK,5000,0, NULL);
   1267a:	4a09      	ldr	r2, [pc, #36]	; (126a0 <gsm_set_baudrate+0x48>)
   1267c:	4909      	ldr	r1, [pc, #36]	; (126a4 <gsm_set_baudrate+0x4c>)
   1267e:	1d38      	adds	r0, r7, #4
   12680:	2300      	movs	r3, #0
   12682:	9300      	str	r3, [sp, #0]
   12684:	2300      	movs	r3, #0
   12686:	4c08      	ldr	r4, [pc, #32]	; (126a8 <gsm_set_baudrate+0x50>)
   12688:	47a0      	blx	r4
   1268a:	0003      	movs	r3, r0
}
   1268c:	0018      	movs	r0, r3
   1268e:	46bd      	mov	sp, r7
   12690:	b007      	add	sp, #28
   12692:	bd90      	pop	{r4, r7, pc}
   12694:	00028f13 	.word	0x00028f13
   12698:	00029c00 	.word	0x00029c00
   1269c:	00029119 	.word	0x00029119
   126a0:	00001388 	.word	0x00001388
   126a4:	00029bc8 	.word	0x00029bc8
   126a8:	000123c9 	.word	0x000123c9

000126ac <gsm_detect_simcard>:
{
	return gsm_send_at_command((const char*)("AT+CFUN=1,1\r"), (const char*)RESPONS_OK,10000,0, NULL);
}

enum gsm_error gsm_detect_simcard(void)
{
   126ac:	b590      	push	{r4, r7, lr}
   126ae:	b083      	sub	sp, #12
   126b0:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CPIN?\r"), (const char*)"+CPIN: READY",5000,0, NULL);
   126b2:	4a06      	ldr	r2, [pc, #24]	; (126cc <gsm_detect_simcard+0x20>)
   126b4:	4906      	ldr	r1, [pc, #24]	; (126d0 <gsm_detect_simcard+0x24>)
   126b6:	4807      	ldr	r0, [pc, #28]	; (126d4 <gsm_detect_simcard+0x28>)
   126b8:	2300      	movs	r3, #0
   126ba:	9300      	str	r3, [sp, #0]
   126bc:	2300      	movs	r3, #0
   126be:	4c06      	ldr	r4, [pc, #24]	; (126d8 <gsm_detect_simcard+0x2c>)
   126c0:	47a0      	blx	r4
   126c2:	0003      	movs	r3, r0
}
   126c4:	0018      	movs	r0, r3
   126c6:	46bd      	mov	sp, r7
   126c8:	b001      	add	sp, #4
   126ca:	bd90      	pop	{r4, r7, pc}
   126cc:	00001388 	.word	0x00001388
   126d0:	00029c70 	.word	0x00029c70
   126d4:	00029c80 	.word	0x00029c80
   126d8:	000123c9 	.word	0x000123c9

000126dc <gsm_delete_all_sms>:

enum gsm_error gsm_delete_all_sms(void)
{
   126dc:	b590      	push	{r4, r7, lr}
   126de:	b083      	sub	sp, #12
   126e0:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CMGDA=\"DEL ALL\"\r"), (const char*)RESPONS_OK,25000,0, NULL);
   126e2:	4a06      	ldr	r2, [pc, #24]	; (126fc <gsm_delete_all_sms+0x20>)
   126e4:	4906      	ldr	r1, [pc, #24]	; (12700 <gsm_delete_all_sms+0x24>)
   126e6:	4807      	ldr	r0, [pc, #28]	; (12704 <gsm_delete_all_sms+0x28>)
   126e8:	2300      	movs	r3, #0
   126ea:	9300      	str	r3, [sp, #0]
   126ec:	2300      	movs	r3, #0
   126ee:	4c06      	ldr	r4, [pc, #24]	; (12708 <gsm_delete_all_sms+0x2c>)
   126f0:	47a0      	blx	r4
   126f2:	0003      	movs	r3, r0
}
   126f4:	0018      	movs	r0, r3
   126f6:	46bd      	mov	sp, r7
   126f8:	b001      	add	sp, #4
   126fa:	bd90      	pop	{r4, r7, pc}
   126fc:	000061a8 	.word	0x000061a8
   12700:	00029bc8 	.word	0x00029bc8
   12704:	00029c8c 	.word	0x00029c8c
   12708:	000123c9 	.word	0x000123c9

0001270c <gsm_store_active_profile>:

enum gsm_error gsm_store_active_profile(void)
{
   1270c:	b590      	push	{r4, r7, lr}
   1270e:	b083      	sub	sp, #12
   12710:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT&W\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12712:	4a06      	ldr	r2, [pc, #24]	; (1272c <gsm_store_active_profile+0x20>)
   12714:	4906      	ldr	r1, [pc, #24]	; (12730 <gsm_store_active_profile+0x24>)
   12716:	4807      	ldr	r0, [pc, #28]	; (12734 <gsm_store_active_profile+0x28>)
   12718:	2300      	movs	r3, #0
   1271a:	9300      	str	r3, [sp, #0]
   1271c:	2300      	movs	r3, #0
   1271e:	4c06      	ldr	r4, [pc, #24]	; (12738 <gsm_store_active_profile+0x2c>)
   12720:	47a0      	blx	r4
   12722:	0003      	movs	r3, r0
}
   12724:	0018      	movs	r0, r3
   12726:	46bd      	mov	sp, r7
   12728:	b001      	add	sp, #4
   1272a:	bd90      	pop	{r4, r7, pc}
   1272c:	00001388 	.word	0x00001388
   12730:	00029bc8 	.word	0x00029bc8
   12734:	00029ca0 	.word	0x00029ca0
   12738:	000123c9 	.word	0x000123c9

0001273c <gsm_enable_calling_line_identification>:


enum gsm_error gsm_enable_calling_line_identification(void)
{
   1273c:	b590      	push	{r4, r7, lr}
   1273e:	b083      	sub	sp, #12
   12740:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CLIP=1\r"), (const char*)RESPONS_OK,15000,0, NULL);
   12742:	4a06      	ldr	r2, [pc, #24]	; (1275c <gsm_enable_calling_line_identification+0x20>)
   12744:	4906      	ldr	r1, [pc, #24]	; (12760 <gsm_enable_calling_line_identification+0x24>)
   12746:	4807      	ldr	r0, [pc, #28]	; (12764 <gsm_enable_calling_line_identification+0x28>)
   12748:	2300      	movs	r3, #0
   1274a:	9300      	str	r3, [sp, #0]
   1274c:	2300      	movs	r3, #0
   1274e:	4c06      	ldr	r4, [pc, #24]	; (12768 <gsm_enable_calling_line_identification+0x2c>)
   12750:	47a0      	blx	r4
   12752:	0003      	movs	r3, r0
}
   12754:	0018      	movs	r0, r3
   12756:	46bd      	mov	sp, r7
   12758:	b001      	add	sp, #4
   1275a:	bd90      	pop	{r4, r7, pc}
   1275c:	00003a98 	.word	0x00003a98
   12760:	00029bc8 	.word	0x00029bc8
   12764:	00029ca8 	.word	0x00029ca8
   12768:	000123c9 	.word	0x000123c9

0001276c <gsm_enable_connected_line_identification_presentation>:

enum gsm_error gsm_enable_connected_line_identification_presentation(void)
{
   1276c:	b590      	push	{r4, r7, lr}
   1276e:	b083      	sub	sp, #12
   12770:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+COLP=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12772:	4a06      	ldr	r2, [pc, #24]	; (1278c <gsm_enable_connected_line_identification_presentation+0x20>)
   12774:	4906      	ldr	r1, [pc, #24]	; (12790 <gsm_enable_connected_line_identification_presentation+0x24>)
   12776:	4807      	ldr	r0, [pc, #28]	; (12794 <gsm_enable_connected_line_identification_presentation+0x28>)
   12778:	2300      	movs	r3, #0
   1277a:	9300      	str	r3, [sp, #0]
   1277c:	2300      	movs	r3, #0
   1277e:	4c06      	ldr	r4, [pc, #24]	; (12798 <gsm_enable_connected_line_identification_presentation+0x2c>)
   12780:	47a0      	blx	r4
   12782:	0003      	movs	r3, r0
}
   12784:	0018      	movs	r0, r3
   12786:	46bd      	mov	sp, r7
   12788:	b001      	add	sp, #4
   1278a:	bd90      	pop	{r4, r7, pc}
   1278c:	00001388 	.word	0x00001388
   12790:	00029bc8 	.word	0x00029bc8
   12794:	00029cb4 	.word	0x00029cb4
   12798:	000123c9 	.word	0x000123c9

0001279c <gsm_enable_sleep_mode>:


//The +CSCLK value can not be reset by AT&F or ATZ command.
enum gsm_error gsm_enable_sleep_mode(void)
{
   1279c:	b590      	push	{r4, r7, lr}
   1279e:	b083      	sub	sp, #12
   127a0:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CSCLK=1\r"), (const char*)RESPONS_OK,10000,0, NULL);
   127a2:	4a06      	ldr	r2, [pc, #24]	; (127bc <gsm_enable_sleep_mode+0x20>)
   127a4:	4906      	ldr	r1, [pc, #24]	; (127c0 <gsm_enable_sleep_mode+0x24>)
   127a6:	4807      	ldr	r0, [pc, #28]	; (127c4 <gsm_enable_sleep_mode+0x28>)
   127a8:	2300      	movs	r3, #0
   127aa:	9300      	str	r3, [sp, #0]
   127ac:	2300      	movs	r3, #0
   127ae:	4c06      	ldr	r4, [pc, #24]	; (127c8 <gsm_enable_sleep_mode+0x2c>)
   127b0:	47a0      	blx	r4
   127b2:	0003      	movs	r3, r0
}
   127b4:	0018      	movs	r0, r3
   127b6:	46bd      	mov	sp, r7
   127b8:	b001      	add	sp, #4
   127ba:	bd90      	pop	{r4, r7, pc}
   127bc:	00002710 	.word	0x00002710
   127c0:	00029bc8 	.word	0x00029bc8
   127c4:	00029cc0 	.word	0x00029cc0
   127c8:	000123c9 	.word	0x000123c9

000127cc <gsm_enable_list_current_calls_of_ME>:
	}
}


enum gsm_error gsm_enable_list_current_calls_of_ME(void)
{
   127cc:	b590      	push	{r4, r7, lr}
   127ce:	b083      	sub	sp, #12
   127d0:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CLCC=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
   127d2:	4a06      	ldr	r2, [pc, #24]	; (127ec <gsm_enable_list_current_calls_of_ME+0x20>)
   127d4:	4906      	ldr	r1, [pc, #24]	; (127f0 <gsm_enable_list_current_calls_of_ME+0x24>)
   127d6:	4807      	ldr	r0, [pc, #28]	; (127f4 <gsm_enable_list_current_calls_of_ME+0x28>)
   127d8:	2300      	movs	r3, #0
   127da:	9300      	str	r3, [sp, #0]
   127dc:	2300      	movs	r3, #0
   127de:	4c06      	ldr	r4, [pc, #24]	; (127f8 <gsm_enable_list_current_calls_of_ME+0x2c>)
   127e0:	47a0      	blx	r4
   127e2:	0003      	movs	r3, r0
}
   127e4:	0018      	movs	r0, r3
   127e6:	46bd      	mov	sp, r7
   127e8:	b001      	add	sp, #4
   127ea:	bd90      	pop	{r4, r7, pc}
   127ec:	00001388 	.word	0x00001388
   127f0:	00029bc8 	.word	0x00029bc8
   127f4:	00029ce8 	.word	0x00029ce8
   127f8:	000123c9 	.word	0x000123c9

000127fc <gsm_factory_reset>:

enum gsm_error gsm_factory_reset(void)
{
   127fc:	b590      	push	{r4, r7, lr}
   127fe:	b083      	sub	sp, #12
   12800:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT&F\r"), (const char*)RESPONS_OK,15000,0, NULL);
   12802:	4a06      	ldr	r2, [pc, #24]	; (1281c <gsm_factory_reset+0x20>)
   12804:	4906      	ldr	r1, [pc, #24]	; (12820 <gsm_factory_reset+0x24>)
   12806:	4807      	ldr	r0, [pc, #28]	; (12824 <gsm_factory_reset+0x28>)
   12808:	2300      	movs	r3, #0
   1280a:	9300      	str	r3, [sp, #0]
   1280c:	2300      	movs	r3, #0
   1280e:	4c06      	ldr	r4, [pc, #24]	; (12828 <gsm_factory_reset+0x2c>)
   12810:	47a0      	blx	r4
   12812:	0003      	movs	r3, r0
}
   12814:	0018      	movs	r0, r3
   12816:	46bd      	mov	sp, r7
   12818:	b001      	add	sp, #4
   1281a:	bd90      	pop	{r4, r7, pc}
   1281c:	00003a98 	.word	0x00003a98
   12820:	00029bc8 	.word	0x00029bc8
   12824:	00029cf4 	.word	0x00029cf4
   12828:	000123c9 	.word	0x000123c9

0001282c <gsm_echo_off>:

enum gsm_error gsm_echo_off(void)
{
   1282c:	b590      	push	{r4, r7, lr}
   1282e:	b083      	sub	sp, #12
   12830:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("ATE0\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12832:	4a06      	ldr	r2, [pc, #24]	; (1284c <gsm_echo_off+0x20>)
   12834:	4906      	ldr	r1, [pc, #24]	; (12850 <gsm_echo_off+0x24>)
   12836:	4807      	ldr	r0, [pc, #28]	; (12854 <gsm_echo_off+0x28>)
   12838:	2300      	movs	r3, #0
   1283a:	9300      	str	r3, [sp, #0]
   1283c:	2300      	movs	r3, #0
   1283e:	4c06      	ldr	r4, [pc, #24]	; (12858 <gsm_echo_off+0x2c>)
   12840:	47a0      	blx	r4
   12842:	0003      	movs	r3, r0
}
   12844:	0018      	movs	r0, r3
   12846:	46bd      	mov	sp, r7
   12848:	b001      	add	sp, #4
   1284a:	bd90      	pop	{r4, r7, pc}
   1284c:	00001388 	.word	0x00001388
   12850:	00029bc8 	.word	0x00029bc8
   12854:	00029cfc 	.word	0x00029cfc
   12858:	000123c9 	.word	0x000123c9

0001285c <gsm_select_sms_message_formate_text_mode>:

enum gsm_error gsm_select_sms_message_formate_text_mode(void) //PDU:0,TEXT:1
{
   1285c:	b590      	push	{r4, r7, lr}
   1285e:	b083      	sub	sp, #12
   12860:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CMGF=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12862:	4a06      	ldr	r2, [pc, #24]	; (1287c <gsm_select_sms_message_formate_text_mode+0x20>)
   12864:	4906      	ldr	r1, [pc, #24]	; (12880 <gsm_select_sms_message_formate_text_mode+0x24>)
   12866:	4807      	ldr	r0, [pc, #28]	; (12884 <gsm_select_sms_message_formate_text_mode+0x28>)
   12868:	2300      	movs	r3, #0
   1286a:	9300      	str	r3, [sp, #0]
   1286c:	2300      	movs	r3, #0
   1286e:	4c06      	ldr	r4, [pc, #24]	; (12888 <gsm_select_sms_message_formate_text_mode+0x2c>)
   12870:	47a0      	blx	r4
   12872:	0003      	movs	r3, r0
}
   12874:	0018      	movs	r0, r3
   12876:	46bd      	mov	sp, r7
   12878:	b001      	add	sp, #4
   1287a:	bd90      	pop	{r4, r7, pc}
   1287c:	00001388 	.word	0x00001388
   12880:	00029bc8 	.word	0x00029bc8
   12884:	00029d04 	.word	0x00029d04
   12888:	000123c9 	.word	0x000123c9

0001288c <gsm_set_sms_text_mode_parameter>:

enum gsm_error gsm_set_sms_text_mode_parameter(void)
{
   1288c:	b590      	push	{r4, r7, lr}
   1288e:	b083      	sub	sp, #12
   12890:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CSMP=17,167,0,0\r"), (const char*)RESPONS_OK,7000,0, NULL);
   12892:	4a06      	ldr	r2, [pc, #24]	; (128ac <gsm_set_sms_text_mode_parameter+0x20>)
   12894:	4906      	ldr	r1, [pc, #24]	; (128b0 <gsm_set_sms_text_mode_parameter+0x24>)
   12896:	4807      	ldr	r0, [pc, #28]	; (128b4 <gsm_set_sms_text_mode_parameter+0x28>)
   12898:	2300      	movs	r3, #0
   1289a:	9300      	str	r3, [sp, #0]
   1289c:	2300      	movs	r3, #0
   1289e:	4c06      	ldr	r4, [pc, #24]	; (128b8 <gsm_set_sms_text_mode_parameter+0x2c>)
   128a0:	47a0      	blx	r4
   128a2:	0003      	movs	r3, r0
}
   128a4:	0018      	movs	r0, r3
   128a6:	46bd      	mov	sp, r7
   128a8:	b001      	add	sp, #4
   128aa:	bd90      	pop	{r4, r7, pc}
   128ac:	00001b58 	.word	0x00001b58
   128b0:	00029bc8 	.word	0x00029bc8
   128b4:	00029d10 	.word	0x00029d10
   128b8:	000123c9 	.word	0x000123c9

000128bc <gsm_getsignalstrength>:
20--25   4
26--31   5

*/
uint8_t gsm_getsignalstrength(void)
{
   128bc:	b5b0      	push	{r4, r5, r7, lr}
   128be:	b088      	sub	sp, #32
   128c0:	af02      	add	r7, sp, #8
	
	uint8_t sig_strength;
	
	const uint8_t MAX_BUFFER = 100;
   128c2:	2316      	movs	r3, #22
   128c4:	18fb      	adds	r3, r7, r3
   128c6:	2264      	movs	r2, #100	; 0x64
   128c8:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   128ca:	2316      	movs	r3, #22
   128cc:	18fb      	adds	r3, r7, r3
   128ce:	781b      	ldrb	r3, [r3, #0]
   128d0:	2101      	movs	r1, #1
   128d2:	0018      	movs	r0, r3
   128d4:	4b60      	ldr	r3, [pc, #384]	; (12a58 <gsm_getsignalstrength+0x19c>)
   128d6:	4798      	blx	r3
   128d8:	0003      	movs	r3, r0
   128da:	613b      	str	r3, [r7, #16]
	if (cmdx == NULL)
   128dc:	693b      	ldr	r3, [r7, #16]
   128de:	2b00      	cmp	r3, #0
   128e0:	d105      	bne.n	128ee <gsm_getsignalstrength+0x32>
	{
		free(cmdx);
   128e2:	693b      	ldr	r3, [r7, #16]
   128e4:	0018      	movs	r0, r3
   128e6:	4b5d      	ldr	r3, [pc, #372]	; (12a5c <gsm_getsignalstrength+0x1a0>)
   128e8:	4798      	blx	r3
		return 0;
   128ea:	2300      	movs	r3, #0
   128ec:	e0af      	b.n	12a4e <gsm_getsignalstrength+0x192>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   128ee:	2316      	movs	r3, #22
   128f0:	18fb      	adds	r3, r7, r3
   128f2:	781a      	ldrb	r2, [r3, #0]
   128f4:	693b      	ldr	r3, [r7, #16]
   128f6:	2100      	movs	r1, #0
   128f8:	0018      	movs	r0, r3
   128fa:	4b59      	ldr	r3, [pc, #356]	; (12a60 <gsm_getsignalstrength+0x1a4>)
   128fc:	4798      	blx	r3
	enum gsm_error gsm_err =  gsm_send_at_command((const char*)("AT+CSQ\r"), (const char*)RESPONS_OK,5000,MAX_BUFFER,cmdx);
   128fe:	230f      	movs	r3, #15
   12900:	18fc      	adds	r4, r7, r3
   12902:	2316      	movs	r3, #22
   12904:	18fb      	adds	r3, r7, r3
   12906:	781a      	ldrb	r2, [r3, #0]
   12908:	4d56      	ldr	r5, [pc, #344]	; (12a64 <gsm_getsignalstrength+0x1a8>)
   1290a:	4957      	ldr	r1, [pc, #348]	; (12a68 <gsm_getsignalstrength+0x1ac>)
   1290c:	4857      	ldr	r0, [pc, #348]	; (12a6c <gsm_getsignalstrength+0x1b0>)
   1290e:	693b      	ldr	r3, [r7, #16]
   12910:	9300      	str	r3, [sp, #0]
   12912:	0013      	movs	r3, r2
   12914:	002a      	movs	r2, r5
   12916:	4d56      	ldr	r5, [pc, #344]	; (12a70 <gsm_getsignalstrength+0x1b4>)
   12918:	47a8      	blx	r5
   1291a:	0003      	movs	r3, r0
   1291c:	7023      	strb	r3, [r4, #0]
	
	if(gsm_err == GSM_ERROR_NONE)
   1291e:	230f      	movs	r3, #15
   12920:	18fb      	adds	r3, r7, r3
   12922:	781b      	ldrb	r3, [r3, #0]
   12924:	2b00      	cmp	r3, #0
   12926:	d000      	beq.n	1292a <gsm_getsignalstrength+0x6e>
   12928:	e086      	b.n	12a38 <gsm_getsignalstrength+0x17c>
	{
		if (strstr(cmdx,"99")==NULL)
   1292a:	4a52      	ldr	r2, [pc, #328]	; (12a74 <gsm_getsignalstrength+0x1b8>)
   1292c:	693b      	ldr	r3, [r7, #16]
   1292e:	0011      	movs	r1, r2
   12930:	0018      	movs	r0, r3
   12932:	4b51      	ldr	r3, [pc, #324]	; (12a78 <gsm_getsignalstrength+0x1bc>)
   12934:	4798      	blx	r3
   12936:	1e03      	subs	r3, r0, #0
   12938:	d000      	beq.n	1293c <gsm_getsignalstrength+0x80>
   1293a:	e078      	b.n	12a2e <gsm_getsignalstrength+0x172>
		{
			char *ptr_tocken;
			ptr_tocken = strtok(cmdx,":");
   1293c:	4a4f      	ldr	r2, [pc, #316]	; (12a7c <gsm_getsignalstrength+0x1c0>)
   1293e:	693b      	ldr	r3, [r7, #16]
   12940:	0011      	movs	r1, r2
   12942:	0018      	movs	r0, r3
   12944:	4b4e      	ldr	r3, [pc, #312]	; (12a80 <gsm_getsignalstrength+0x1c4>)
   12946:	4798      	blx	r3
   12948:	0003      	movs	r3, r0
   1294a:	60bb      	str	r3, [r7, #8]
			ptr_tocken = strtok(NULL,":");
   1294c:	4b4b      	ldr	r3, [pc, #300]	; (12a7c <gsm_getsignalstrength+0x1c0>)
   1294e:	0019      	movs	r1, r3
   12950:	2000      	movs	r0, #0
   12952:	4b4b      	ldr	r3, [pc, #300]	; (12a80 <gsm_getsignalstrength+0x1c4>)
   12954:	4798      	blx	r3
   12956:	0003      	movs	r3, r0
   12958:	60bb      	str	r3, [r7, #8]
			ptr_tocken = strtok(ptr_tocken,",");
   1295a:	4a4a      	ldr	r2, [pc, #296]	; (12a84 <gsm_getsignalstrength+0x1c8>)
   1295c:	68bb      	ldr	r3, [r7, #8]
   1295e:	0011      	movs	r1, r2
   12960:	0018      	movs	r0, r3
   12962:	4b47      	ldr	r3, [pc, #284]	; (12a80 <gsm_getsignalstrength+0x1c4>)
   12964:	4798      	blx	r3
   12966:	0003      	movs	r3, r0
   12968:	60bb      	str	r3, [r7, #8]
			RemoveSpaces(ptr_tocken);
   1296a:	68bb      	ldr	r3, [r7, #8]
   1296c:	0018      	movs	r0, r3
   1296e:	4b46      	ldr	r3, [pc, #280]	; (12a88 <gsm_getsignalstrength+0x1cc>)
   12970:	4798      	blx	r3
			uint8_t nw = atoi(ptr_tocken);
   12972:	68bb      	ldr	r3, [r7, #8]
   12974:	0018      	movs	r0, r3
   12976:	4b45      	ldr	r3, [pc, #276]	; (12a8c <gsm_getsignalstrength+0x1d0>)
   12978:	4798      	blx	r3
   1297a:	0002      	movs	r2, r0
   1297c:	1dfb      	adds	r3, r7, #7
   1297e:	701a      	strb	r2, [r3, #0]
			if (nw==0 || nw==1 || nw== 99)
   12980:	1dfb      	adds	r3, r7, #7
   12982:	781b      	ldrb	r3, [r3, #0]
   12984:	2b00      	cmp	r3, #0
   12986:	d007      	beq.n	12998 <gsm_getsignalstrength+0xdc>
   12988:	1dfb      	adds	r3, r7, #7
   1298a:	781b      	ldrb	r3, [r3, #0]
   1298c:	2b01      	cmp	r3, #1
   1298e:	d003      	beq.n	12998 <gsm_getsignalstrength+0xdc>
   12990:	1dfb      	adds	r3, r7, #7
   12992:	781b      	ldrb	r3, [r3, #0]
   12994:	2b63      	cmp	r3, #99	; 0x63
   12996:	d104      	bne.n	129a2 <gsm_getsignalstrength+0xe6>
			{
				sig_strength = 0;
   12998:	2317      	movs	r3, #23
   1299a:	18fb      	adds	r3, r7, r3
   1299c:	2200      	movs	r2, #0
   1299e:	701a      	strb	r2, [r3, #0]
   129a0:	e04e      	b.n	12a40 <gsm_getsignalstrength+0x184>
			}
			else
			{
				if (nw>=2 && nw<=7)
   129a2:	1dfb      	adds	r3, r7, #7
   129a4:	781b      	ldrb	r3, [r3, #0]
   129a6:	2b01      	cmp	r3, #1
   129a8:	d908      	bls.n	129bc <gsm_getsignalstrength+0x100>
   129aa:	1dfb      	adds	r3, r7, #7
   129ac:	781b      	ldrb	r3, [r3, #0]
   129ae:	2b07      	cmp	r3, #7
   129b0:	d804      	bhi.n	129bc <gsm_getsignalstrength+0x100>
				{
					sig_strength = 1;
   129b2:	2317      	movs	r3, #23
   129b4:	18fb      	adds	r3, r7, r3
   129b6:	2201      	movs	r2, #1
   129b8:	701a      	strb	r2, [r3, #0]
   129ba:	e041      	b.n	12a40 <gsm_getsignalstrength+0x184>
				}
				else if (nw>=8 && nw<=13)
   129bc:	1dfb      	adds	r3, r7, #7
   129be:	781b      	ldrb	r3, [r3, #0]
   129c0:	2b07      	cmp	r3, #7
   129c2:	d908      	bls.n	129d6 <gsm_getsignalstrength+0x11a>
   129c4:	1dfb      	adds	r3, r7, #7
   129c6:	781b      	ldrb	r3, [r3, #0]
   129c8:	2b0d      	cmp	r3, #13
   129ca:	d804      	bhi.n	129d6 <gsm_getsignalstrength+0x11a>
				{
					sig_strength = 2;
   129cc:	2317      	movs	r3, #23
   129ce:	18fb      	adds	r3, r7, r3
   129d0:	2202      	movs	r2, #2
   129d2:	701a      	strb	r2, [r3, #0]
   129d4:	e034      	b.n	12a40 <gsm_getsignalstrength+0x184>
				}
				else if (nw>=14 && nw<=19)
   129d6:	1dfb      	adds	r3, r7, #7
   129d8:	781b      	ldrb	r3, [r3, #0]
   129da:	2b0d      	cmp	r3, #13
   129dc:	d908      	bls.n	129f0 <gsm_getsignalstrength+0x134>
   129de:	1dfb      	adds	r3, r7, #7
   129e0:	781b      	ldrb	r3, [r3, #0]
   129e2:	2b13      	cmp	r3, #19
   129e4:	d804      	bhi.n	129f0 <gsm_getsignalstrength+0x134>
				{
					sig_strength = 3;
   129e6:	2317      	movs	r3, #23
   129e8:	18fb      	adds	r3, r7, r3
   129ea:	2203      	movs	r2, #3
   129ec:	701a      	strb	r2, [r3, #0]
   129ee:	e027      	b.n	12a40 <gsm_getsignalstrength+0x184>
				}
				else if (nw>=20 && nw<=25)
   129f0:	1dfb      	adds	r3, r7, #7
   129f2:	781b      	ldrb	r3, [r3, #0]
   129f4:	2b13      	cmp	r3, #19
   129f6:	d908      	bls.n	12a0a <gsm_getsignalstrength+0x14e>
   129f8:	1dfb      	adds	r3, r7, #7
   129fa:	781b      	ldrb	r3, [r3, #0]
   129fc:	2b19      	cmp	r3, #25
   129fe:	d804      	bhi.n	12a0a <gsm_getsignalstrength+0x14e>
				{
					sig_strength = 4;
   12a00:	2317      	movs	r3, #23
   12a02:	18fb      	adds	r3, r7, r3
   12a04:	2204      	movs	r2, #4
   12a06:	701a      	strb	r2, [r3, #0]
   12a08:	e01a      	b.n	12a40 <gsm_getsignalstrength+0x184>
				}
				else if (nw>=26 && nw<=31)
   12a0a:	1dfb      	adds	r3, r7, #7
   12a0c:	781b      	ldrb	r3, [r3, #0]
   12a0e:	2b19      	cmp	r3, #25
   12a10:	d908      	bls.n	12a24 <gsm_getsignalstrength+0x168>
   12a12:	1dfb      	adds	r3, r7, #7
   12a14:	781b      	ldrb	r3, [r3, #0]
   12a16:	2b1f      	cmp	r3, #31
   12a18:	d804      	bhi.n	12a24 <gsm_getsignalstrength+0x168>
				{
					sig_strength = 5;
   12a1a:	2317      	movs	r3, #23
   12a1c:	18fb      	adds	r3, r7, r3
   12a1e:	2205      	movs	r2, #5
   12a20:	701a      	strb	r2, [r3, #0]
   12a22:	e00d      	b.n	12a40 <gsm_getsignalstrength+0x184>
				}
				else
				{
					sig_strength = 0;
   12a24:	2317      	movs	r3, #23
   12a26:	18fb      	adds	r3, r7, r3
   12a28:	2200      	movs	r2, #0
   12a2a:	701a      	strb	r2, [r3, #0]
   12a2c:	e008      	b.n	12a40 <gsm_getsignalstrength+0x184>
				}
			}
		}
		else
		{
			sig_strength = 0;
   12a2e:	2317      	movs	r3, #23
   12a30:	18fb      	adds	r3, r7, r3
   12a32:	2200      	movs	r2, #0
   12a34:	701a      	strb	r2, [r3, #0]
   12a36:	e003      	b.n	12a40 <gsm_getsignalstrength+0x184>
		}
	}
	else
	{
		sig_strength = 0;
   12a38:	2317      	movs	r3, #23
   12a3a:	18fb      	adds	r3, r7, r3
   12a3c:	2200      	movs	r2, #0
   12a3e:	701a      	strb	r2, [r3, #0]
	}
	
	free(cmdx);
   12a40:	693b      	ldr	r3, [r7, #16]
   12a42:	0018      	movs	r0, r3
   12a44:	4b05      	ldr	r3, [pc, #20]	; (12a5c <gsm_getsignalstrength+0x1a0>)
   12a46:	4798      	blx	r3
	
	return sig_strength;
   12a48:	2317      	movs	r3, #23
   12a4a:	18fb      	adds	r3, r7, r3
   12a4c:	781b      	ldrb	r3, [r3, #0]
}
   12a4e:	0018      	movs	r0, r3
   12a50:	46bd      	mov	sp, r7
   12a52:	b006      	add	sp, #24
   12a54:	bdb0      	pop	{r4, r5, r7, pc}
   12a56:	46c0      	nop			; (mov r8, r8)
   12a58:	00028e05 	.word	0x00028e05
   12a5c:	00028ea5 	.word	0x00028ea5
   12a60:	00028f13 	.word	0x00028f13
   12a64:	00001388 	.word	0x00001388
   12a68:	00029bc8 	.word	0x00029bc8
   12a6c:	00029d3c 	.word	0x00029d3c
   12a70:	000123c9 	.word	0x000123c9
   12a74:	00029d44 	.word	0x00029d44
   12a78:	000291d3 	.word	0x000291d3
   12a7c:	00029ce0 	.word	0x00029ce0
   12a80:	00029205 	.word	0x00029205
   12a84:	00029ce4 	.word	0x00029ce4
   12a88:	00012a91 	.word	0x00012a91
   12a8c:	00028df9 	.word	0x00028df9

00012a90 <RemoveSpaces>:

void RemoveSpaces(char* source)
{
   12a90:	b580      	push	{r7, lr}
   12a92:	b084      	sub	sp, #16
   12a94:	af00      	add	r7, sp, #0
   12a96:	6078      	str	r0, [r7, #4]
	char* i = source;
   12a98:	687b      	ldr	r3, [r7, #4]
   12a9a:	60fb      	str	r3, [r7, #12]
	char* j = source;
   12a9c:	687b      	ldr	r3, [r7, #4]
   12a9e:	60bb      	str	r3, [r7, #8]
	while(*j != 0)
   12aa0:	e00c      	b.n	12abc <RemoveSpaces+0x2c>
	{
		*i = *j++;
   12aa2:	68bb      	ldr	r3, [r7, #8]
   12aa4:	1c5a      	adds	r2, r3, #1
   12aa6:	60ba      	str	r2, [r7, #8]
   12aa8:	781a      	ldrb	r2, [r3, #0]
   12aaa:	68fb      	ldr	r3, [r7, #12]
   12aac:	701a      	strb	r2, [r3, #0]
		if(*i != ' ')
   12aae:	68fb      	ldr	r3, [r7, #12]
   12ab0:	781b      	ldrb	r3, [r3, #0]
   12ab2:	2b20      	cmp	r3, #32
   12ab4:	d002      	beq.n	12abc <RemoveSpaces+0x2c>
		i++;
   12ab6:	68fb      	ldr	r3, [r7, #12]
   12ab8:	3301      	adds	r3, #1
   12aba:	60fb      	str	r3, [r7, #12]
	while(*j != 0)
   12abc:	68bb      	ldr	r3, [r7, #8]
   12abe:	781b      	ldrb	r3, [r3, #0]
   12ac0:	2b00      	cmp	r3, #0
   12ac2:	d1ee      	bne.n	12aa2 <RemoveSpaces+0x12>
	}
	*i = 0;
   12ac4:	68fb      	ldr	r3, [r7, #12]
   12ac6:	2200      	movs	r2, #0
   12ac8:	701a      	strb	r2, [r3, #0]
}
   12aca:	46c0      	nop			; (mov r8, r8)
   12acc:	46bd      	mov	sp, r7
   12ace:	b004      	add	sp, #16
   12ad0:	bd80      	pop	{r7, pc}
	...

00012ad4 <gsm_enable_new_sms_message_indications>:
{
	return gsm_send_at_command((const char*)("AT&F\r"), (const char*)RESPONS_OK,10000,0,NULL);
}

enum gsm_error gsm_enable_new_sms_message_indications(void)
{
   12ad4:	b590      	push	{r4, r7, lr}
   12ad6:	b083      	sub	sp, #12
   12ad8:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CNMI=2,1,0,0,0\r"), (const char*)RESPONS_OK,5000,0,NULL);
   12ada:	4a06      	ldr	r2, [pc, #24]	; (12af4 <gsm_enable_new_sms_message_indications+0x20>)
   12adc:	4906      	ldr	r1, [pc, #24]	; (12af8 <gsm_enable_new_sms_message_indications+0x24>)
   12ade:	4807      	ldr	r0, [pc, #28]	; (12afc <gsm_enable_new_sms_message_indications+0x28>)
   12ae0:	2300      	movs	r3, #0
   12ae2:	9300      	str	r3, [sp, #0]
   12ae4:	2300      	movs	r3, #0
   12ae6:	4c06      	ldr	r4, [pc, #24]	; (12b00 <gsm_enable_new_sms_message_indications+0x2c>)
   12ae8:	47a0      	blx	r4
   12aea:	0003      	movs	r3, r0
}
   12aec:	0018      	movs	r0, r3
   12aee:	46bd      	mov	sp, r7
   12af0:	b001      	add	sp, #4
   12af2:	bd90      	pop	{r4, r7, pc}
   12af4:	00001388 	.word	0x00001388
   12af8:	00029bc8 	.word	0x00029bc8
   12afc:	00029d48 	.word	0x00029d48
   12b00:	000123c9 	.word	0x000123c9

00012b04 <gsm_send_sms>:
{
	return gsm_send_at_command((const char*)("AT+CNMI=1,0,0,0,0\r"), (const char*)RESPONS_OK,5000,0,NULL);
}

enum gsm_error gsm_send_sms(const char *phone_number, const char *message)
{
   12b04:	b5b0      	push	{r4, r5, r7, lr}
   12b06:	b088      	sub	sp, #32
   12b08:	af02      	add	r7, sp, #8
   12b0a:	6078      	str	r0, [r7, #4]
   12b0c:	6039      	str	r1, [r7, #0]
	/* Double-check the message length is acceptable (160 byte max payload) */
	if (strlen(message) > 250)
   12b0e:	683b      	ldr	r3, [r7, #0]
   12b10:	0018      	movs	r0, r3
   12b12:	4b3b      	ldr	r3, [pc, #236]	; (12c00 <gsm_send_sms+0xfc>)
   12b14:	4798      	blx	r3
   12b16:	0003      	movs	r3, r0
   12b18:	2bfa      	cmp	r3, #250	; 0xfa
   12b1a:	d901      	bls.n	12b20 <gsm_send_sms+0x1c>
	{
		return GSM_ERROR_MESSAGE_LENGTH;
   12b1c:	2303      	movs	r3, #3
   12b1e:	e06b      	b.n	12bf8 <gsm_send_sms+0xf4>
	}
	/* Double-check the recipient phone number length */
	if (strlen(phone_number) < 6)
   12b20:	687b      	ldr	r3, [r7, #4]
   12b22:	0018      	movs	r0, r3
   12b24:	4b36      	ldr	r3, [pc, #216]	; (12c00 <gsm_send_sms+0xfc>)
   12b26:	4798      	blx	r3
   12b28:	0003      	movs	r3, r0
   12b2a:	2b05      	cmp	r3, #5
   12b2c:	d801      	bhi.n	12b32 <gsm_send_sms+0x2e>
	{
		return GSM_ERROR_PHONE_NUMBER_LENGTH;
   12b2e:	2304      	movs	r3, #4
   12b30:	e062      	b.n	12bf8 <gsm_send_sms+0xf4>
	}
	
	enum gsm_error err;
	const uint8_t MAX_BUFFER = 250;
   12b32:	2317      	movs	r3, #23
   12b34:	18fb      	adds	r3, r7, r3
   12b36:	22fa      	movs	r2, #250	; 0xfa
   12b38:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   12b3a:	2317      	movs	r3, #23
   12b3c:	18fb      	adds	r3, r7, r3
   12b3e:	781b      	ldrb	r3, [r3, #0]
   12b40:	2101      	movs	r1, #1
   12b42:	0018      	movs	r0, r3
   12b44:	4b2f      	ldr	r3, [pc, #188]	; (12c04 <gsm_send_sms+0x100>)
   12b46:	4798      	blx	r3
   12b48:	0003      	movs	r3, r0
   12b4a:	613b      	str	r3, [r7, #16]
	//buffer created???
	if (cmdx == NULL)
   12b4c:	693b      	ldr	r3, [r7, #16]
   12b4e:	2b00      	cmp	r3, #0
   12b50:	d101      	bne.n	12b56 <gsm_send_sms+0x52>
	{
		return 0;
   12b52:	2300      	movs	r3, #0
   12b54:	e050      	b.n	12bf8 <gsm_send_sms+0xf4>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   12b56:	2317      	movs	r3, #23
   12b58:	18fb      	adds	r3, r7, r3
   12b5a:	781a      	ldrb	r2, [r3, #0]
   12b5c:	693b      	ldr	r3, [r7, #16]
   12b5e:	2100      	movs	r1, #0
   12b60:	0018      	movs	r0, r3
   12b62:	4b29      	ldr	r3, [pc, #164]	; (12c08 <gsm_send_sms+0x104>)
   12b64:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER, "AT+CMGS=\"%s\"\r", phone_number);
   12b66:	2317      	movs	r3, #23
   12b68:	18fb      	adds	r3, r7, r3
   12b6a:	7819      	ldrb	r1, [r3, #0]
   12b6c:	687b      	ldr	r3, [r7, #4]
   12b6e:	4a27      	ldr	r2, [pc, #156]	; (12c0c <gsm_send_sms+0x108>)
   12b70:	6938      	ldr	r0, [r7, #16]
   12b72:	4c27      	ldr	r4, [pc, #156]	; (12c10 <gsm_send_sms+0x10c>)
   12b74:	47a0      	blx	r4
	if (gsm_send_at_command((const char*)cmdx, (const char*)">",60000, 0, NULL)==GSM_ERROR_NONE)
   12b76:	4a27      	ldr	r2, [pc, #156]	; (12c14 <gsm_send_sms+0x110>)
   12b78:	4927      	ldr	r1, [pc, #156]	; (12c18 <gsm_send_sms+0x114>)
   12b7a:	6938      	ldr	r0, [r7, #16]
   12b7c:	2300      	movs	r3, #0
   12b7e:	9300      	str	r3, [sp, #0]
   12b80:	2300      	movs	r3, #0
   12b82:	4c26      	ldr	r4, [pc, #152]	; (12c1c <gsm_send_sms+0x118>)
   12b84:	47a0      	blx	r4
   12b86:	1e03      	subs	r3, r0, #0
   12b88:	d131      	bne.n	12bee <gsm_send_sms+0xea>
	{
		vTaskDelay(500/portTICK_PERIOD_MS);		//todo: check if sms is reaching time is reduced than 30 seconds, if yes, than keep this statement, else remove it.
   12b8a:	23fa      	movs	r3, #250	; 0xfa
   12b8c:	005b      	lsls	r3, r3, #1
   12b8e:	0018      	movs	r0, r3
   12b90:	4b23      	ldr	r3, [pc, #140]	; (12c20 <gsm_send_sms+0x11c>)
   12b92:	4798      	blx	r3
		memset(cmdx, '\0', MAX_BUFFER);
   12b94:	2317      	movs	r3, #23
   12b96:	18fb      	adds	r3, r7, r3
   12b98:	781a      	ldrb	r2, [r3, #0]
   12b9a:	693b      	ldr	r3, [r7, #16]
   12b9c:	2100      	movs	r1, #0
   12b9e:	0018      	movs	r0, r3
   12ba0:	4b19      	ldr	r3, [pc, #100]	; (12c08 <gsm_send_sms+0x104>)
   12ba2:	4798      	blx	r3
		
		snprintf((char*)cmdx, MAX_BUFFER, "%s\x1A\x0D",message);
   12ba4:	2317      	movs	r3, #23
   12ba6:	18fb      	adds	r3, r7, r3
   12ba8:	7819      	ldrb	r1, [r3, #0]
   12baa:	683b      	ldr	r3, [r7, #0]
   12bac:	4a1d      	ldr	r2, [pc, #116]	; (12c24 <gsm_send_sms+0x120>)
   12bae:	6938      	ldr	r0, [r7, #16]
   12bb0:	4c17      	ldr	r4, [pc, #92]	; (12c10 <gsm_send_sms+0x10c>)
   12bb2:	47a0      	blx	r4
		
		err = gsm_send_at_command((const char*)cmdx, (const char*)RESPONS_OK,60000, 0, NULL);
   12bb4:	230f      	movs	r3, #15
   12bb6:	18fc      	adds	r4, r7, r3
   12bb8:	4a16      	ldr	r2, [pc, #88]	; (12c14 <gsm_send_sms+0x110>)
   12bba:	491b      	ldr	r1, [pc, #108]	; (12c28 <gsm_send_sms+0x124>)
   12bbc:	6938      	ldr	r0, [r7, #16]
   12bbe:	2300      	movs	r3, #0
   12bc0:	9300      	str	r3, [sp, #0]
   12bc2:	2300      	movs	r3, #0
   12bc4:	4d15      	ldr	r5, [pc, #84]	; (12c1c <gsm_send_sms+0x118>)
   12bc6:	47a8      	blx	r5
   12bc8:	0003      	movs	r3, r0
   12bca:	7023      	strb	r3, [r4, #0]
		if (err == GSM_ERROR_NONE)
   12bcc:	230f      	movs	r3, #15
   12bce:	18fb      	adds	r3, r7, r3
   12bd0:	781b      	ldrb	r3, [r3, #0]
   12bd2:	2b00      	cmp	r3, #0
   12bd4:	d105      	bne.n	12be2 <gsm_send_sms+0xde>
		{
			free(cmdx);
   12bd6:	693b      	ldr	r3, [r7, #16]
   12bd8:	0018      	movs	r0, r3
   12bda:	4b14      	ldr	r3, [pc, #80]	; (12c2c <gsm_send_sms+0x128>)
   12bdc:	4798      	blx	r3
			return GSM_ERROR_NONE;
   12bde:	2300      	movs	r3, #0
   12be0:	e00a      	b.n	12bf8 <gsm_send_sms+0xf4>
		}
		else
		{
			free(cmdx);
   12be2:	693b      	ldr	r3, [r7, #16]
   12be4:	0018      	movs	r0, r3
   12be6:	4b11      	ldr	r3, [pc, #68]	; (12c2c <gsm_send_sms+0x128>)
   12be8:	4798      	blx	r3
			return GSM_ERROR_SMS_SEND_FAILED;
   12bea:	2306      	movs	r3, #6
   12bec:	e004      	b.n	12bf8 <gsm_send_sms+0xf4>
		}
	}
	else
	{
		free(cmdx);
   12bee:	693b      	ldr	r3, [r7, #16]
   12bf0:	0018      	movs	r0, r3
   12bf2:	4b0e      	ldr	r3, [pc, #56]	; (12c2c <gsm_send_sms+0x128>)
   12bf4:	4798      	blx	r3
		return GSM_ERROR_SMS_SEND_FAILED;
   12bf6:	2306      	movs	r3, #6
	}
}
   12bf8:	0018      	movs	r0, r3
   12bfa:	46bd      	mov	sp, r7
   12bfc:	b006      	add	sp, #24
   12bfe:	bdb0      	pop	{r4, r5, r7, pc}
   12c00:	000291a3 	.word	0x000291a3
   12c04:	00028e05 	.word	0x00028e05
   12c08:	00028f13 	.word	0x00028f13
   12c0c:	00029d70 	.word	0x00029d70
   12c10:	000290b5 	.word	0x000290b5
   12c14:	0000ea60 	.word	0x0000ea60
   12c18:	00029d80 	.word	0x00029d80
   12c1c:	000123c9 	.word	0x000123c9
   12c20:	0001ffe9 	.word	0x0001ffe9
   12c24:	00029d84 	.word	0x00029d84
   12c28:	00029bc8 	.word	0x00029bc8
   12c2c:	00028ea5 	.word	0x00028ea5

00012c30 <gsm_read_sms>:
	free(cmdx);
	return sms_index;
}

enum gsm_error gsm_read_sms(uint8_t position, char *phone_number, uint8_t max_phone_len, char *SMS_text, uint8_t max_SMS_len)
{
   12c30:	b590      	push	{r4, r7, lr}
   12c32:	b08f      	sub	sp, #60	; 0x3c
   12c34:	af02      	add	r7, sp, #8
   12c36:	60b9      	str	r1, [r7, #8]
   12c38:	0011      	movs	r1, r2
   12c3a:	607b      	str	r3, [r7, #4]
   12c3c:	230f      	movs	r3, #15
   12c3e:	18fb      	adds	r3, r7, r3
   12c40:	1c02      	adds	r2, r0, #0
   12c42:	701a      	strb	r2, [r3, #0]
   12c44:	230e      	movs	r3, #14
   12c46:	18fb      	adds	r3, r7, r3
   12c48:	1c0a      	adds	r2, r1, #0
   12c4a:	701a      	strb	r2, [r3, #0]
	const uint8_t MAX_BUFFER = 230;
   12c4c:	232f      	movs	r3, #47	; 0x2f
   12c4e:	18fb      	adds	r3, r7, r3
   12c50:	22e6      	movs	r2, #230	; 0xe6
   12c52:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   12c54:	232f      	movs	r3, #47	; 0x2f
   12c56:	18fb      	adds	r3, r7, r3
   12c58:	781b      	ldrb	r3, [r3, #0]
   12c5a:	2101      	movs	r1, #1
   12c5c:	0018      	movs	r0, r3
   12c5e:	4b6e      	ldr	r3, [pc, #440]	; (12e18 <gsm_read_sms+0x1e8>)
   12c60:	4798      	blx	r3
   12c62:	0003      	movs	r3, r0
   12c64:	62bb      	str	r3, [r7, #40]	; 0x28
	if (cmdx == NULL)
   12c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12c68:	2b00      	cmp	r3, #0
   12c6a:	d105      	bne.n	12c78 <gsm_read_sms+0x48>
	{
		free(cmdx);
   12c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12c6e:	0018      	movs	r0, r3
   12c70:	4b6a      	ldr	r3, [pc, #424]	; (12e1c <gsm_read_sms+0x1ec>)
   12c72:	4798      	blx	r3
		return 0;
   12c74:	2300      	movs	r3, #0
   12c76:	e0ca      	b.n	12e0e <gsm_read_sms+0x1de>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   12c78:	232f      	movs	r3, #47	; 0x2f
   12c7a:	18fb      	adds	r3, r7, r3
   12c7c:	781a      	ldrb	r2, [r3, #0]
   12c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12c80:	2100      	movs	r1, #0
   12c82:	0018      	movs	r0, r3
   12c84:	4b66      	ldr	r3, [pc, #408]	; (12e20 <gsm_read_sms+0x1f0>)
   12c86:	4798      	blx	r3
	
	uint8_t cmgr_at_command[10] = {0};
   12c88:	2310      	movs	r3, #16
   12c8a:	18fb      	adds	r3, r7, r3
   12c8c:	0018      	movs	r0, r3
   12c8e:	230a      	movs	r3, #10
   12c90:	001a      	movs	r2, r3
   12c92:	2100      	movs	r1, #0
   12c94:	4b62      	ldr	r3, [pc, #392]	; (12e20 <gsm_read_sms+0x1f0>)
   12c96:	4798      	blx	r3
	
	snprintf((char*)cmgr_at_command, MAX_BUFFER, "AT+CMGR=%d\r",position);
   12c98:	232f      	movs	r3, #47	; 0x2f
   12c9a:	18fb      	adds	r3, r7, r3
   12c9c:	7819      	ldrb	r1, [r3, #0]
   12c9e:	230f      	movs	r3, #15
   12ca0:	18fb      	adds	r3, r7, r3
   12ca2:	781b      	ldrb	r3, [r3, #0]
   12ca4:	4a5f      	ldr	r2, [pc, #380]	; (12e24 <gsm_read_sms+0x1f4>)
   12ca6:	2010      	movs	r0, #16
   12ca8:	1838      	adds	r0, r7, r0
   12caa:	4c5f      	ldr	r4, [pc, #380]	; (12e28 <gsm_read_sms+0x1f8>)
   12cac:	47a0      	blx	r4
	
	if (gsm_send_at_command((const char*)cmgr_at_command, (const char*)RESPONS_OK,5000, MAX_BUFFER, cmdx)==GSM_ERROR_NONE)
   12cae:	232f      	movs	r3, #47	; 0x2f
   12cb0:	18fb      	adds	r3, r7, r3
   12cb2:	781a      	ldrb	r2, [r3, #0]
   12cb4:	4c5d      	ldr	r4, [pc, #372]	; (12e2c <gsm_read_sms+0x1fc>)
   12cb6:	495e      	ldr	r1, [pc, #376]	; (12e30 <gsm_read_sms+0x200>)
   12cb8:	2310      	movs	r3, #16
   12cba:	18f8      	adds	r0, r7, r3
   12cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12cbe:	9300      	str	r3, [sp, #0]
   12cc0:	0013      	movs	r3, r2
   12cc2:	0022      	movs	r2, r4
   12cc4:	4c5b      	ldr	r4, [pc, #364]	; (12e34 <gsm_read_sms+0x204>)
   12cc6:	47a0      	blx	r4
   12cc8:	1e03      	subs	r3, r0, #0
   12cca:	d000      	beq.n	12cce <gsm_read_sms+0x9e>
   12ccc:	e094      	b.n	12df8 <gsm_read_sms+0x1c8>
	{
		char *strig_cmp;
		char *p_char;
		char *p_char1;
		strig_cmp = strstr(cmdx,"+CMGR");
   12cce:	4a5a      	ldr	r2, [pc, #360]	; (12e38 <gsm_read_sms+0x208>)
   12cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12cd2:	0011      	movs	r1, r2
   12cd4:	0018      	movs	r0, r3
   12cd6:	4b59      	ldr	r3, [pc, #356]	; (12e3c <gsm_read_sms+0x20c>)
   12cd8:	4798      	blx	r3
   12cda:	0003      	movs	r3, r0
   12cdc:	627b      	str	r3, [r7, #36]	; 0x24
		if (strig_cmp != 0)
   12cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12ce0:	2b00      	cmp	r3, #0
   12ce2:	d100      	bne.n	12ce6 <gsm_read_sms+0xb6>
   12ce4:	e082      	b.n	12dec <gsm_read_sms+0x1bc>
		{
			p_char = strchr((char *)(cmdx),',');
   12ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12ce8:	212c      	movs	r1, #44	; 0x2c
   12cea:	0018      	movs	r0, r3
   12cec:	4b54      	ldr	r3, [pc, #336]	; (12e40 <gsm_read_sms+0x210>)
   12cee:	4798      	blx	r3
   12cf0:	0003      	movs	r3, r0
   12cf2:	623b      	str	r3, [r7, #32]
			p_char1 = p_char+2;
   12cf4:	6a3b      	ldr	r3, [r7, #32]
   12cf6:	3302      	adds	r3, #2
   12cf8:	61fb      	str	r3, [r7, #28]
			p_char = strchr((char *)(p_char1),'"');
   12cfa:	69fb      	ldr	r3, [r7, #28]
   12cfc:	2122      	movs	r1, #34	; 0x22
   12cfe:	0018      	movs	r0, r3
   12d00:	4b4f      	ldr	r3, [pc, #316]	; (12e40 <gsm_read_sms+0x210>)
   12d02:	4798      	blx	r3
   12d04:	0003      	movs	r3, r0
   12d06:	623b      	str	r3, [r7, #32]
			uint8_t len;
			if (p_char != NULL)
   12d08:	6a3b      	ldr	r3, [r7, #32]
   12d0a:	2b00      	cmp	r3, #0
   12d0c:	d02a      	beq.n	12d64 <gsm_read_sms+0x134>
			{
				*p_char = 0;
   12d0e:	6a3b      	ldr	r3, [r7, #32]
   12d10:	2200      	movs	r2, #0
   12d12:	701a      	strb	r2, [r3, #0]
				len = strlen(p_char1);
   12d14:	69fb      	ldr	r3, [r7, #28]
   12d16:	0018      	movs	r0, r3
   12d18:	4b4a      	ldr	r3, [pc, #296]	; (12e44 <gsm_read_sms+0x214>)
   12d1a:	4798      	blx	r3
   12d1c:	0002      	movs	r2, r0
   12d1e:	231b      	movs	r3, #27
   12d20:	18fb      	adds	r3, r7, r3
   12d22:	701a      	strb	r2, [r3, #0]
				if(len < max_phone_len)
   12d24:	231b      	movs	r3, #27
   12d26:	18fa      	adds	r2, r7, r3
   12d28:	230e      	movs	r3, #14
   12d2a:	18fb      	adds	r3, r7, r3
   12d2c:	7812      	ldrb	r2, [r2, #0]
   12d2e:	781b      	ldrb	r3, [r3, #0]
   12d30:	429a      	cmp	r2, r3
   12d32:	d206      	bcs.n	12d42 <gsm_read_sms+0x112>
				{
					strcpy(phone_number, (char *)(p_char1));
   12d34:	69fa      	ldr	r2, [r7, #28]
   12d36:	68bb      	ldr	r3, [r7, #8]
   12d38:	0011      	movs	r1, r2
   12d3a:	0018      	movs	r0, r3
   12d3c:	4b42      	ldr	r3, [pc, #264]	; (12e48 <gsm_read_sms+0x218>)
   12d3e:	4798      	blx	r3
   12d40:	e010      	b.n	12d64 <gsm_read_sms+0x134>
				}
				else
				{
					memcpy(phone_number,(char *)p_char1,(max_phone_len-1));
   12d42:	230e      	movs	r3, #14
   12d44:	18fb      	adds	r3, r7, r3
   12d46:	781b      	ldrb	r3, [r3, #0]
   12d48:	3b01      	subs	r3, #1
   12d4a:	001a      	movs	r2, r3
   12d4c:	69f9      	ldr	r1, [r7, #28]
   12d4e:	68bb      	ldr	r3, [r7, #8]
   12d50:	0018      	movs	r0, r3
   12d52:	4b3e      	ldr	r3, [pc, #248]	; (12e4c <gsm_read_sms+0x21c>)
   12d54:	4798      	blx	r3
					phone_number[max_phone_len]=0;
   12d56:	230e      	movs	r3, #14
   12d58:	18fb      	adds	r3, r7, r3
   12d5a:	781b      	ldrb	r3, [r3, #0]
   12d5c:	68ba      	ldr	r2, [r7, #8]
   12d5e:	18d3      	adds	r3, r2, r3
   12d60:	2200      	movs	r2, #0
   12d62:	701a      	strb	r2, [r3, #0]
				}
			}
			p_char = strchr(p_char+1, 0x0a);
   12d64:	6a3b      	ldr	r3, [r7, #32]
   12d66:	3301      	adds	r3, #1
   12d68:	210a      	movs	r1, #10
   12d6a:	0018      	movs	r0, r3
   12d6c:	4b34      	ldr	r3, [pc, #208]	; (12e40 <gsm_read_sms+0x210>)
   12d6e:	4798      	blx	r3
   12d70:	0003      	movs	r3, r0
   12d72:	623b      	str	r3, [r7, #32]
			if (p_char != NULL)
   12d74:	6a3b      	ldr	r3, [r7, #32]
   12d76:	2b00      	cmp	r3, #0
   12d78:	d044      	beq.n	12e04 <gsm_read_sms+0x1d4>
			{
				p_char++;
   12d7a:	6a3b      	ldr	r3, [r7, #32]
   12d7c:	3301      	adds	r3, #1
   12d7e:	623b      	str	r3, [r7, #32]
				p_char1 = strchr((char *)(p_char), 0x0d);
   12d80:	6a3b      	ldr	r3, [r7, #32]
   12d82:	210d      	movs	r1, #13
   12d84:	0018      	movs	r0, r3
   12d86:	4b2e      	ldr	r3, [pc, #184]	; (12e40 <gsm_read_sms+0x210>)
   12d88:	4798      	blx	r3
   12d8a:	0003      	movs	r3, r0
   12d8c:	61fb      	str	r3, [r7, #28]
				if (p_char1 != NULL)
   12d8e:	69fb      	ldr	r3, [r7, #28]
   12d90:	2b00      	cmp	r3, #0
   12d92:	d002      	beq.n	12d9a <gsm_read_sms+0x16a>
				{
					*p_char1 = 0;
   12d94:	69fb      	ldr	r3, [r7, #28]
   12d96:	2200      	movs	r2, #0
   12d98:	701a      	strb	r2, [r3, #0]
				}
				len = strlen(p_char);
   12d9a:	6a3b      	ldr	r3, [r7, #32]
   12d9c:	0018      	movs	r0, r3
   12d9e:	4b29      	ldr	r3, [pc, #164]	; (12e44 <gsm_read_sms+0x214>)
   12da0:	4798      	blx	r3
   12da2:	0002      	movs	r2, r0
   12da4:	231b      	movs	r3, #27
   12da6:	18fb      	adds	r3, r7, r3
   12da8:	701a      	strb	r2, [r3, #0]
				if (len < max_SMS_len)
   12daa:	231b      	movs	r3, #27
   12dac:	18fb      	adds	r3, r7, r3
   12dae:	2240      	movs	r2, #64	; 0x40
   12db0:	18b9      	adds	r1, r7, r2
   12db2:	781a      	ldrb	r2, [r3, #0]
   12db4:	780b      	ldrb	r3, [r1, #0]
   12db6:	429a      	cmp	r2, r3
   12db8:	d206      	bcs.n	12dc8 <gsm_read_sms+0x198>
				{
					strcpy(SMS_text, (char *)(p_char));
   12dba:	6a3a      	ldr	r2, [r7, #32]
   12dbc:	687b      	ldr	r3, [r7, #4]
   12dbe:	0011      	movs	r1, r2
   12dc0:	0018      	movs	r0, r3
   12dc2:	4b21      	ldr	r3, [pc, #132]	; (12e48 <gsm_read_sms+0x218>)
   12dc4:	4798      	blx	r3
   12dc6:	e01d      	b.n	12e04 <gsm_read_sms+0x1d4>
				}
				else
				{
					memcpy(SMS_text, (char *)(p_char), (max_SMS_len-1));
   12dc8:	2340      	movs	r3, #64	; 0x40
   12dca:	18fb      	adds	r3, r7, r3
   12dcc:	781b      	ldrb	r3, [r3, #0]
   12dce:	3b01      	subs	r3, #1
   12dd0:	001a      	movs	r2, r3
   12dd2:	6a39      	ldr	r1, [r7, #32]
   12dd4:	687b      	ldr	r3, [r7, #4]
   12dd6:	0018      	movs	r0, r3
   12dd8:	4b1c      	ldr	r3, [pc, #112]	; (12e4c <gsm_read_sms+0x21c>)
   12dda:	4798      	blx	r3
					SMS_text[max_SMS_len] = 0;
   12ddc:	2340      	movs	r3, #64	; 0x40
   12dde:	18fb      	adds	r3, r7, r3
   12de0:	781b      	ldrb	r3, [r3, #0]
   12de2:	687a      	ldr	r2, [r7, #4]
   12de4:	18d3      	adds	r3, r2, r3
   12de6:	2200      	movs	r2, #0
   12de8:	701a      	strb	r2, [r3, #0]
   12dea:	e00b      	b.n	12e04 <gsm_read_sms+0x1d4>
				}
			}
		}
		else
		{
			free(cmdx);
   12dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12dee:	0018      	movs	r0, r3
   12df0:	4b0a      	ldr	r3, [pc, #40]	; (12e1c <gsm_read_sms+0x1ec>)
   12df2:	4798      	blx	r3
			return GSM_ERROR_SMS_NOT_AVAILABLE;
   12df4:	230c      	movs	r3, #12
   12df6:	e00a      	b.n	12e0e <gsm_read_sms+0x1de>
		}
	}
	else
	{
		free(cmdx);
   12df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12dfa:	0018      	movs	r0, r3
   12dfc:	4b07      	ldr	r3, [pc, #28]	; (12e1c <gsm_read_sms+0x1ec>)
   12dfe:	4798      	blx	r3
		return GSM_ERROR_SMS_NOT_AVAILABLE;
   12e00:	230c      	movs	r3, #12
   12e02:	e004      	b.n	12e0e <gsm_read_sms+0x1de>
	}
	free(cmdx);
   12e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12e06:	0018      	movs	r0, r3
   12e08:	4b04      	ldr	r3, [pc, #16]	; (12e1c <gsm_read_sms+0x1ec>)
   12e0a:	4798      	blx	r3
	return GSM_ERROR_NONE;
   12e0c:	2300      	movs	r3, #0
}
   12e0e:	0018      	movs	r0, r3
   12e10:	46bd      	mov	sp, r7
   12e12:	b00d      	add	sp, #52	; 0x34
   12e14:	bd90      	pop	{r4, r7, pc}
   12e16:	46c0      	nop			; (mov r8, r8)
   12e18:	00028e05 	.word	0x00028e05
   12e1c:	00028ea5 	.word	0x00028ea5
   12e20:	00028f13 	.word	0x00028f13
   12e24:	00029dd0 	.word	0x00029dd0
   12e28:	000290b5 	.word	0x000290b5
   12e2c:	00001388 	.word	0x00001388
   12e30:	00029bc8 	.word	0x00029bc8
   12e34:	000123c9 	.word	0x000123c9
   12e38:	00029ddc 	.word	0x00029ddc
   12e3c:	000291d3 	.word	0x000291d3
   12e40:	00029177 	.word	0x00029177
   12e44:	000291a3 	.word	0x000291a3
   12e48:	00029193 	.word	0x00029193
   12e4c:	00028edd 	.word	0x00028edd

00012e50 <gsm_call_to_dial_a_number>:


enum gsm_error gsm_call_to_dial_a_number(const char *to)
{
   12e50:	b5b0      	push	{r4, r5, r7, lr}
   12e52:	b088      	sub	sp, #32
   12e54:	af02      	add	r7, sp, #8
   12e56:	6078      	str	r0, [r7, #4]
	const uint8_t MAX_BUFFER = 30;
   12e58:	2317      	movs	r3, #23
   12e5a:	18fb      	adds	r3, r7, r3
   12e5c:	221e      	movs	r2, #30
   12e5e:	701a      	strb	r2, [r3, #0]
	enum gsm_error err;
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   12e60:	2317      	movs	r3, #23
   12e62:	18fb      	adds	r3, r7, r3
   12e64:	781b      	ldrb	r3, [r3, #0]
   12e66:	2101      	movs	r1, #1
   12e68:	0018      	movs	r0, r3
   12e6a:	4b18      	ldr	r3, [pc, #96]	; (12ecc <gsm_call_to_dial_a_number+0x7c>)
   12e6c:	4798      	blx	r3
   12e6e:	0003      	movs	r3, r0
   12e70:	613b      	str	r3, [r7, #16]
	
	//buffer created?
	if (cmdx == NULL)
   12e72:	693b      	ldr	r3, [r7, #16]
   12e74:	2b00      	cmp	r3, #0
   12e76:	d101      	bne.n	12e7c <gsm_call_to_dial_a_number+0x2c>
	{
		return 0;
   12e78:	2300      	movs	r3, #0
   12e7a:	e023      	b.n	12ec4 <gsm_call_to_dial_a_number+0x74>
	}
	
	//init string
	memset(cmdx, '\0', MAX_BUFFER);
   12e7c:	2317      	movs	r3, #23
   12e7e:	18fb      	adds	r3, r7, r3
   12e80:	781a      	ldrb	r2, [r3, #0]
   12e82:	693b      	ldr	r3, [r7, #16]
   12e84:	2100      	movs	r1, #0
   12e86:	0018      	movs	r0, r3
   12e88:	4b11      	ldr	r3, [pc, #68]	; (12ed0 <gsm_call_to_dial_a_number+0x80>)
   12e8a:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER, "ATD%s;\r", to);
   12e8c:	2317      	movs	r3, #23
   12e8e:	18fb      	adds	r3, r7, r3
   12e90:	7819      	ldrb	r1, [r3, #0]
   12e92:	687b      	ldr	r3, [r7, #4]
   12e94:	4a0f      	ldr	r2, [pc, #60]	; (12ed4 <gsm_call_to_dial_a_number+0x84>)
   12e96:	6938      	ldr	r0, [r7, #16]
   12e98:	4c0f      	ldr	r4, [pc, #60]	; (12ed8 <gsm_call_to_dial_a_number+0x88>)
   12e9a:	47a0      	blx	r4
	
	err = gsm_send_at_command((const char*)cmdx, (const char*)RESPONS_OK,2000,0, NULL);
   12e9c:	230f      	movs	r3, #15
   12e9e:	18fc      	adds	r4, r7, r3
   12ea0:	23fa      	movs	r3, #250	; 0xfa
   12ea2:	00da      	lsls	r2, r3, #3
   12ea4:	490d      	ldr	r1, [pc, #52]	; (12edc <gsm_call_to_dial_a_number+0x8c>)
   12ea6:	6938      	ldr	r0, [r7, #16]
   12ea8:	2300      	movs	r3, #0
   12eaa:	9300      	str	r3, [sp, #0]
   12eac:	2300      	movs	r3, #0
   12eae:	4d0c      	ldr	r5, [pc, #48]	; (12ee0 <gsm_call_to_dial_a_number+0x90>)
   12eb0:	47a8      	blx	r5
   12eb2:	0003      	movs	r3, r0
   12eb4:	7023      	strb	r3, [r4, #0]
	free(cmdx);
   12eb6:	693b      	ldr	r3, [r7, #16]
   12eb8:	0018      	movs	r0, r3
   12eba:	4b0a      	ldr	r3, [pc, #40]	; (12ee4 <gsm_call_to_dial_a_number+0x94>)
   12ebc:	4798      	blx	r3
	return err;
   12ebe:	230f      	movs	r3, #15
   12ec0:	18fb      	adds	r3, r7, r3
   12ec2:	781b      	ldrb	r3, [r3, #0]
	
}
   12ec4:	0018      	movs	r0, r3
   12ec6:	46bd      	mov	sp, r7
   12ec8:	b006      	add	sp, #24
   12eca:	bdb0      	pop	{r4, r5, r7, pc}
   12ecc:	00028e05 	.word	0x00028e05
   12ed0:	00028f13 	.word	0x00028f13
   12ed4:	00029de4 	.word	0x00029de4
   12ed8:	000290b5 	.word	0x000290b5
   12edc:	00029bc8 	.word	0x00029bc8
   12ee0:	000123c9 	.word	0x000123c9
   12ee4:	00028ea5 	.word	0x00028ea5

00012ee8 <gsm_answer_an_incomming_call>:

enum gsm_error gsm_answer_an_incomming_call(void)
{
   12ee8:	b590      	push	{r4, r7, lr}
   12eea:	b083      	sub	sp, #12
   12eec:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("ATA\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12eee:	4a06      	ldr	r2, [pc, #24]	; (12f08 <gsm_answer_an_incomming_call+0x20>)
   12ef0:	4906      	ldr	r1, [pc, #24]	; (12f0c <gsm_answer_an_incomming_call+0x24>)
   12ef2:	4807      	ldr	r0, [pc, #28]	; (12f10 <gsm_answer_an_incomming_call+0x28>)
   12ef4:	2300      	movs	r3, #0
   12ef6:	9300      	str	r3, [sp, #0]
   12ef8:	2300      	movs	r3, #0
   12efa:	4c06      	ldr	r4, [pc, #24]	; (12f14 <gsm_answer_an_incomming_call+0x2c>)
   12efc:	47a0      	blx	r4
   12efe:	0003      	movs	r3, r0
}
   12f00:	0018      	movs	r0, r3
   12f02:	46bd      	mov	sp, r7
   12f04:	b001      	add	sp, #4
   12f06:	bd90      	pop	{r4, r7, pc}
   12f08:	00001388 	.word	0x00001388
   12f0c:	00029bc8 	.word	0x00029bc8
   12f10:	00029dec 	.word	0x00029dec
   12f14:	000123c9 	.word	0x000123c9

00012f18 <gsm_enable_network_time_update>:


enum gsm_error gsm_enable_network_time_update(void)
{
   12f18:	b590      	push	{r4, r7, lr}
   12f1a:	b083      	sub	sp, #12
   12f1c:	af02      	add	r7, sp, #8
	return 	gsm_send_at_command((const char*)("AT+CLTS=1\r"), (const char*)RESPONS_OK,10000,0, NULL);
   12f1e:	4a06      	ldr	r2, [pc, #24]	; (12f38 <gsm_enable_network_time_update+0x20>)
   12f20:	4906      	ldr	r1, [pc, #24]	; (12f3c <gsm_enable_network_time_update+0x24>)
   12f22:	4807      	ldr	r0, [pc, #28]	; (12f40 <gsm_enable_network_time_update+0x28>)
   12f24:	2300      	movs	r3, #0
   12f26:	9300      	str	r3, [sp, #0]
   12f28:	2300      	movs	r3, #0
   12f2a:	4c06      	ldr	r4, [pc, #24]	; (12f44 <gsm_enable_network_time_update+0x2c>)
   12f2c:	47a0      	blx	r4
   12f2e:	0003      	movs	r3, r0
}
   12f30:	0018      	movs	r0, r3
   12f32:	46bd      	mov	sp, r7
   12f34:	b001      	add	sp, #4
   12f36:	bd90      	pop	{r4, r7, pc}
   12f38:	00002710 	.word	0x00002710
   12f3c:	00029bc8 	.word	0x00029bc8
   12f40:	00029df4 	.word	0x00029df4
   12f44:	000123c9 	.word	0x000123c9

00012f48 <gsm_enable_DTMF_detection>:
{
	return 	gsm_send_at_command((const char*)("AT+CLTS=0\r"), (const char*)RESPONS_OK,10000,0, NULL);
}

enum gsm_error gsm_enable_DTMF_detection(void)
{
   12f48:	b590      	push	{r4, r7, lr}
   12f4a:	b083      	sub	sp, #12
   12f4c:	af02      	add	r7, sp, #8
	return 	gsm_send_at_command((const char*)("AT+DDET=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12f4e:	4a06      	ldr	r2, [pc, #24]	; (12f68 <gsm_enable_DTMF_detection+0x20>)
   12f50:	4906      	ldr	r1, [pc, #24]	; (12f6c <gsm_enable_DTMF_detection+0x24>)
   12f52:	4807      	ldr	r0, [pc, #28]	; (12f70 <gsm_enable_DTMF_detection+0x28>)
   12f54:	2300      	movs	r3, #0
   12f56:	9300      	str	r3, [sp, #0]
   12f58:	2300      	movs	r3, #0
   12f5a:	4c06      	ldr	r4, [pc, #24]	; (12f74 <gsm_enable_DTMF_detection+0x2c>)
   12f5c:	47a0      	blx	r4
   12f5e:	0003      	movs	r3, r0
}
   12f60:	0018      	movs	r0, r3
   12f62:	46bd      	mov	sp, r7
   12f64:	b001      	add	sp, #4
   12f66:	bd90      	pop	{r4, r7, pc}
   12f68:	00001388 	.word	0x00001388
   12f6c:	00029bc8 	.word	0x00029bc8
   12f70:	00029e0c 	.word	0x00029e0c
   12f74:	000123c9 	.word	0x000123c9

00012f78 <gsm_send_DTMF_Tone>:

enum gsm_error gsm_send_DTMF_Tone(char *tone)
{
   12f78:	b5b0      	push	{r4, r5, r7, lr}
   12f7a:	b088      	sub	sp, #32
   12f7c:	af02      	add	r7, sp, #8
   12f7e:	6078      	str	r0, [r7, #4]
	const uint8_t MAX_BUFFER = 30;
   12f80:	2317      	movs	r3, #23
   12f82:	18fb      	adds	r3, r7, r3
   12f84:	221e      	movs	r2, #30
   12f86:	701a      	strb	r2, [r3, #0]
	enum gsm_error err;
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   12f88:	2317      	movs	r3, #23
   12f8a:	18fb      	adds	r3, r7, r3
   12f8c:	781b      	ldrb	r3, [r3, #0]
   12f8e:	2101      	movs	r1, #1
   12f90:	0018      	movs	r0, r3
   12f92:	4b18      	ldr	r3, [pc, #96]	; (12ff4 <gsm_send_DTMF_Tone+0x7c>)
   12f94:	4798      	blx	r3
   12f96:	0003      	movs	r3, r0
   12f98:	613b      	str	r3, [r7, #16]
	
	//buffer created?
	if (cmdx == NULL)
   12f9a:	693b      	ldr	r3, [r7, #16]
   12f9c:	2b00      	cmp	r3, #0
   12f9e:	d101      	bne.n	12fa4 <gsm_send_DTMF_Tone+0x2c>
	{
		return 0;
   12fa0:	2300      	movs	r3, #0
   12fa2:	e022      	b.n	12fea <gsm_send_DTMF_Tone+0x72>
	}
	
	//init string
	memset(cmdx, '\0', MAX_BUFFER);
   12fa4:	2317      	movs	r3, #23
   12fa6:	18fb      	adds	r3, r7, r3
   12fa8:	781a      	ldrb	r2, [r3, #0]
   12faa:	693b      	ldr	r3, [r7, #16]
   12fac:	2100      	movs	r1, #0
   12fae:	0018      	movs	r0, r3
   12fb0:	4b11      	ldr	r3, [pc, #68]	; (12ff8 <gsm_send_DTMF_Tone+0x80>)
   12fb2:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER,"AT+VTS=\"%s\"\r",tone);
   12fb4:	2317      	movs	r3, #23
   12fb6:	18fb      	adds	r3, r7, r3
   12fb8:	7819      	ldrb	r1, [r3, #0]
   12fba:	687b      	ldr	r3, [r7, #4]
   12fbc:	4a0f      	ldr	r2, [pc, #60]	; (12ffc <gsm_send_DTMF_Tone+0x84>)
   12fbe:	6938      	ldr	r0, [r7, #16]
   12fc0:	4c0f      	ldr	r4, [pc, #60]	; (13000 <gsm_send_DTMF_Tone+0x88>)
   12fc2:	47a0      	blx	r4
	
	err = gsm_send_at_command((const char*)(cmdx), (const char*)RESPONS_OK,5000,0, NULL);
   12fc4:	230f      	movs	r3, #15
   12fc6:	18fc      	adds	r4, r7, r3
   12fc8:	4a0e      	ldr	r2, [pc, #56]	; (13004 <gsm_send_DTMF_Tone+0x8c>)
   12fca:	490f      	ldr	r1, [pc, #60]	; (13008 <gsm_send_DTMF_Tone+0x90>)
   12fcc:	6938      	ldr	r0, [r7, #16]
   12fce:	2300      	movs	r3, #0
   12fd0:	9300      	str	r3, [sp, #0]
   12fd2:	2300      	movs	r3, #0
   12fd4:	4d0d      	ldr	r5, [pc, #52]	; (1300c <gsm_send_DTMF_Tone+0x94>)
   12fd6:	47a8      	blx	r5
   12fd8:	0003      	movs	r3, r0
   12fda:	7023      	strb	r3, [r4, #0]
	free(cmdx);
   12fdc:	693b      	ldr	r3, [r7, #16]
   12fde:	0018      	movs	r0, r3
   12fe0:	4b0b      	ldr	r3, [pc, #44]	; (13010 <gsm_send_DTMF_Tone+0x98>)
   12fe2:	4798      	blx	r3
	return err;
   12fe4:	230f      	movs	r3, #15
   12fe6:	18fb      	adds	r3, r7, r3
   12fe8:	781b      	ldrb	r3, [r3, #0]
}
   12fea:	0018      	movs	r0, r3
   12fec:	46bd      	mov	sp, r7
   12fee:	b006      	add	sp, #24
   12ff0:	bdb0      	pop	{r4, r5, r7, pc}
   12ff2:	46c0      	nop			; (mov r8, r8)
   12ff4:	00028e05 	.word	0x00028e05
   12ff8:	00028f13 	.word	0x00028f13
   12ffc:	00029e18 	.word	0x00029e18
   13000:	000290b5 	.word	0x000290b5
   13004:	00001388 	.word	0x00001388
   13008:	00029bc8 	.word	0x00029bc8
   1300c:	000123c9 	.word	0x000123c9
   13010:	00028ea5 	.word	0x00028ea5

00013014 <gsm_hangup_call>:

enum gsm_error gsm_hangup_call(void)
{
   13014:	b590      	push	{r4, r7, lr}
   13016:	b083      	sub	sp, #12
   13018:	af02      	add	r7, sp, #8
	return 	gsm_send_at_command((const char*)("AT+CHUP\r"), (const char*)RESPONS_OK,5000,0, NULL);
   1301a:	4a06      	ldr	r2, [pc, #24]	; (13034 <gsm_hangup_call+0x20>)
   1301c:	4906      	ldr	r1, [pc, #24]	; (13038 <gsm_hangup_call+0x24>)
   1301e:	4807      	ldr	r0, [pc, #28]	; (1303c <gsm_hangup_call+0x28>)
   13020:	2300      	movs	r3, #0
   13022:	9300      	str	r3, [sp, #0]
   13024:	2300      	movs	r3, #0
   13026:	4c06      	ldr	r4, [pc, #24]	; (13040 <gsm_hangup_call+0x2c>)
   13028:	47a0      	blx	r4
   1302a:	0003      	movs	r3, r0
}
   1302c:	0018      	movs	r0, r3
   1302e:	46bd      	mov	sp, r7
   13030:	b001      	add	sp, #4
   13032:	bd90      	pop	{r4, r7, pc}
   13034:	00001388 	.word	0x00001388
   13038:	00029bc8 	.word	0x00029bc8
   1303c:	00029e28 	.word	0x00029e28
   13040:	000123c9 	.word	0x000123c9

00013044 <gsm_disable_call_waiting>:

enum gsm_error gsm_disable_call_waiting(void)
{
   13044:	b590      	push	{r4, r7, lr}
   13046:	b083      	sub	sp, #12
   13048:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CCWA=0,0\r"), (const char*)RESPONS_OK,18000,0, NULL);
   1304a:	4a06      	ldr	r2, [pc, #24]	; (13064 <gsm_disable_call_waiting+0x20>)
   1304c:	4906      	ldr	r1, [pc, #24]	; (13068 <gsm_disable_call_waiting+0x24>)
   1304e:	4807      	ldr	r0, [pc, #28]	; (1306c <gsm_disable_call_waiting+0x28>)
   13050:	2300      	movs	r3, #0
   13052:	9300      	str	r3, [sp, #0]
   13054:	2300      	movs	r3, #0
   13056:	4c06      	ldr	r4, [pc, #24]	; (13070 <gsm_disable_call_waiting+0x2c>)
   13058:	47a0      	blx	r4
   1305a:	0003      	movs	r3, r0
}
   1305c:	0018      	movs	r0, r3
   1305e:	46bd      	mov	sp, r7
   13060:	b001      	add	sp, #4
   13062:	bd90      	pop	{r4, r7, pc}
   13064:	00004650 	.word	0x00004650
   13068:	00029bc8 	.word	0x00029bc8
   1306c:	00029e34 	.word	0x00029e34
   13070:	000123c9 	.word	0x000123c9

00013074 <gsm_stop_play_record_file>:
	return gsm_send_at_command((const char*)("AT+GSMBUSY=0\r"), (const char*)RESPONS_OK,5000,0, NULL);
}


enum gsm_error gsm_stop_play_record_file(void)
{
   13074:	b590      	push	{r4, r7, lr}
   13076:	b083      	sub	sp, #12
   13078:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CREC=5\r"), (const char*)RESPONS_OK,2000,0, NULL);
   1307a:	23fa      	movs	r3, #250	; 0xfa
   1307c:	00da      	lsls	r2, r3, #3
   1307e:	4906      	ldr	r1, [pc, #24]	; (13098 <gsm_stop_play_record_file+0x24>)
   13080:	4806      	ldr	r0, [pc, #24]	; (1309c <gsm_stop_play_record_file+0x28>)
   13082:	2300      	movs	r3, #0
   13084:	9300      	str	r3, [sp, #0]
   13086:	2300      	movs	r3, #0
   13088:	4c05      	ldr	r4, [pc, #20]	; (130a0 <gsm_stop_play_record_file+0x2c>)
   1308a:	47a0      	blx	r4
   1308c:	0003      	movs	r3, r0
}
   1308e:	0018      	movs	r0, r3
   13090:	46bd      	mov	sp, r7
   13092:	b001      	add	sp, #4
   13094:	bd90      	pop	{r4, r7, pc}
   13096:	46c0      	nop			; (mov r8, r8)
   13098:	00029bc8 	.word	0x00029bc8
   1309c:	00029e64 	.word	0x00029e64
   130a0:	000123c9 	.word	0x000123c9

000130a4 <gsm_play_record_file>:

enum gsm_error gsm_play_record_file(const char *filename,bool playInfinitely)
{
   130a4:	b590      	push	{r4, r7, lr}
   130a6:	b087      	sub	sp, #28
   130a8:	af02      	add	r7, sp, #8
   130aa:	6078      	str	r0, [r7, #4]
   130ac:	000a      	movs	r2, r1
   130ae:	1cfb      	adds	r3, r7, #3
   130b0:	701a      	strb	r2, [r3, #0]
	//AT+CREC=4,"C:\User\555.amr",0,100$0D
	
	uint8_t repeat = 0;
   130b2:	230f      	movs	r3, #15
   130b4:	18fb      	adds	r3, r7, r3
   130b6:	2200      	movs	r2, #0
   130b8:	701a      	strb	r2, [r3, #0]
	if (playInfinitely)
   130ba:	1cfb      	adds	r3, r7, #3
   130bc:	781b      	ldrb	r3, [r3, #0]
   130be:	2b00      	cmp	r3, #0
   130c0:	d003      	beq.n	130ca <gsm_play_record_file+0x26>
	{
		repeat = 1;
   130c2:	230f      	movs	r3, #15
   130c4:	18fb      	adds	r3, r7, r3
   130c6:	2201      	movs	r2, #1
   130c8:	701a      	strb	r2, [r3, #0]
	}
	
	const uint8_t MAX_BUFFER = 50;
   130ca:	230e      	movs	r3, #14
   130cc:	18fb      	adds	r3, r7, r3
   130ce:	2232      	movs	r2, #50	; 0x32
   130d0:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   130d2:	230e      	movs	r3, #14
   130d4:	18fb      	adds	r3, r7, r3
   130d6:	781b      	ldrb	r3, [r3, #0]
   130d8:	2101      	movs	r1, #1
   130da:	0018      	movs	r0, r3
   130dc:	4b17      	ldr	r3, [pc, #92]	; (1313c <gsm_play_record_file+0x98>)
   130de:	4798      	blx	r3
   130e0:	0003      	movs	r3, r0
   130e2:	60bb      	str	r3, [r7, #8]
	//buffer created???
	if (cmdx == NULL)
   130e4:	68bb      	ldr	r3, [r7, #8]
   130e6:	2b00      	cmp	r3, #0
   130e8:	d101      	bne.n	130ee <gsm_play_record_file+0x4a>
	{
		return 0;
   130ea:	2300      	movs	r3, #0
   130ec:	e022      	b.n	13134 <gsm_play_record_file+0x90>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   130ee:	230e      	movs	r3, #14
   130f0:	18fb      	adds	r3, r7, r3
   130f2:	781a      	ldrb	r2, [r3, #0]
   130f4:	68bb      	ldr	r3, [r7, #8]
   130f6:	2100      	movs	r1, #0
   130f8:	0018      	movs	r0, r3
   130fa:	4b11      	ldr	r3, [pc, #68]	; (13140 <gsm_play_record_file+0x9c>)
   130fc:	4798      	blx	r3
	
	snprintf((char*)cmdx, MAX_BUFFER, "AT+CREC=4,\"C:\\User\\%c.amr\",0,90,%u\r",filename,repeat);
   130fe:	230e      	movs	r3, #14
   13100:	18fb      	adds	r3, r7, r3
   13102:	7819      	ldrb	r1, [r3, #0]
   13104:	230f      	movs	r3, #15
   13106:	18fb      	adds	r3, r7, r3
   13108:	781b      	ldrb	r3, [r3, #0]
   1310a:	687c      	ldr	r4, [r7, #4]
   1310c:	4a0d      	ldr	r2, [pc, #52]	; (13144 <gsm_play_record_file+0xa0>)
   1310e:	68b8      	ldr	r0, [r7, #8]
   13110:	9300      	str	r3, [sp, #0]
   13112:	0023      	movs	r3, r4
   13114:	4c0c      	ldr	r4, [pc, #48]	; (13148 <gsm_play_record_file+0xa4>)
   13116:	47a0      	blx	r4
	
	gsm_send_at_command((const char*)(cmdx), (const char*)RESPONS_OK,2000,0, NULL);
   13118:	23fa      	movs	r3, #250	; 0xfa
   1311a:	00da      	lsls	r2, r3, #3
   1311c:	490b      	ldr	r1, [pc, #44]	; (1314c <gsm_play_record_file+0xa8>)
   1311e:	68b8      	ldr	r0, [r7, #8]
   13120:	2300      	movs	r3, #0
   13122:	9300      	str	r3, [sp, #0]
   13124:	2300      	movs	r3, #0
   13126:	4c0a      	ldr	r4, [pc, #40]	; (13150 <gsm_play_record_file+0xac>)
   13128:	47a0      	blx	r4
	free(cmdx);
   1312a:	68bb      	ldr	r3, [r7, #8]
   1312c:	0018      	movs	r0, r3
   1312e:	4b09      	ldr	r3, [pc, #36]	; (13154 <gsm_play_record_file+0xb0>)
   13130:	4798      	blx	r3
	return GSM_ERROR_NONE;
   13132:	2300      	movs	r3, #0
	
}
   13134:	0018      	movs	r0, r3
   13136:	46bd      	mov	sp, r7
   13138:	b005      	add	sp, #20
   1313a:	bd90      	pop	{r4, r7, pc}
   1313c:	00028e05 	.word	0x00028e05
   13140:	00028f13 	.word	0x00028f13
   13144:	00029e70 	.word	0x00029e70
   13148:	000290b5 	.word	0x000290b5
   1314c:	00029bc8 	.word	0x00029bc8
   13150:	000123c9 	.word	0x000123c9
   13154:	00028ea5 	.word	0x00028ea5

00013158 <gsm_get_internal_rtc_time>:

enum gsm_error gsm_get_internal_rtc_time(void)
{
   13158:	b5b0      	push	{r4, r5, r7, lr}
   1315a:	b086      	sub	sp, #24
   1315c:	af02      	add	r7, sp, #8
	const uint8_t MAX_BUFFER = 70;
   1315e:	230f      	movs	r3, #15
   13160:	18fb      	adds	r3, r7, r3
   13162:	2246      	movs	r2, #70	; 0x46
   13164:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   13166:	230f      	movs	r3, #15
   13168:	18fb      	adds	r3, r7, r3
   1316a:	781b      	ldrb	r3, [r3, #0]
   1316c:	2101      	movs	r1, #1
   1316e:	0018      	movs	r0, r3
   13170:	4b57      	ldr	r3, [pc, #348]	; (132d0 <gsm_get_internal_rtc_time+0x178>)
   13172:	4798      	blx	r3
   13174:	0003      	movs	r3, r0
   13176:	60bb      	str	r3, [r7, #8]
	if (cmdx == NULL)
   13178:	68bb      	ldr	r3, [r7, #8]
   1317a:	2b00      	cmp	r3, #0
   1317c:	d105      	bne.n	1318a <gsm_get_internal_rtc_time+0x32>
	{
		free(cmdx);
   1317e:	68bb      	ldr	r3, [r7, #8]
   13180:	0018      	movs	r0, r3
   13182:	4b54      	ldr	r3, [pc, #336]	; (132d4 <gsm_get_internal_rtc_time+0x17c>)
   13184:	4798      	blx	r3
		return 0;
   13186:	2300      	movs	r3, #0
   13188:	e09d      	b.n	132c6 <gsm_get_internal_rtc_time+0x16e>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   1318a:	230f      	movs	r3, #15
   1318c:	18fb      	adds	r3, r7, r3
   1318e:	781a      	ldrb	r2, [r3, #0]
   13190:	68bb      	ldr	r3, [r7, #8]
   13192:	2100      	movs	r1, #0
   13194:	0018      	movs	r0, r3
   13196:	4b50      	ldr	r3, [pc, #320]	; (132d8 <gsm_get_internal_rtc_time+0x180>)
   13198:	4798      	blx	r3
	
	enum gsm_error err;
	err = gsm_send_at_command((const char*)"AT+CCLK?\r", (const char*)RESPONS_OK,5000,MAX_BUFFER, cmdx);
   1319a:	1dfc      	adds	r4, r7, #7
   1319c:	230f      	movs	r3, #15
   1319e:	18fb      	adds	r3, r7, r3
   131a0:	781a      	ldrb	r2, [r3, #0]
   131a2:	4d4e      	ldr	r5, [pc, #312]	; (132dc <gsm_get_internal_rtc_time+0x184>)
   131a4:	494e      	ldr	r1, [pc, #312]	; (132e0 <gsm_get_internal_rtc_time+0x188>)
   131a6:	484f      	ldr	r0, [pc, #316]	; (132e4 <gsm_get_internal_rtc_time+0x18c>)
   131a8:	68bb      	ldr	r3, [r7, #8]
   131aa:	9300      	str	r3, [sp, #0]
   131ac:	0013      	movs	r3, r2
   131ae:	002a      	movs	r2, r5
   131b0:	4d4d      	ldr	r5, [pc, #308]	; (132e8 <gsm_get_internal_rtc_time+0x190>)
   131b2:	47a8      	blx	r5
   131b4:	0003      	movs	r3, r0
   131b6:	7023      	strb	r3, [r4, #0]
	if(err==GSM_ERROR_NONE)
   131b8:	1dfb      	adds	r3, r7, #7
   131ba:	781b      	ldrb	r3, [r3, #0]
   131bc:	2b00      	cmp	r3, #0
   131be:	d16a      	bne.n	13296 <gsm_get_internal_rtc_time+0x13e>
	{
		char *cclktocken;
		cclktocken = strtok(cmdx,"\"");
   131c0:	4a4a      	ldr	r2, [pc, #296]	; (132ec <gsm_get_internal_rtc_time+0x194>)
   131c2:	68bb      	ldr	r3, [r7, #8]
   131c4:	0011      	movs	r1, r2
   131c6:	0018      	movs	r0, r3
   131c8:	4b49      	ldr	r3, [pc, #292]	; (132f0 <gsm_get_internal_rtc_time+0x198>)
   131ca:	4798      	blx	r3
   131cc:	0003      	movs	r3, r0
   131ce:	603b      	str	r3, [r7, #0]
		cclktocken = strtok(NULL,"\"");
   131d0:	4b46      	ldr	r3, [pc, #280]	; (132ec <gsm_get_internal_rtc_time+0x194>)
   131d2:	0019      	movs	r1, r3
   131d4:	2000      	movs	r0, #0
   131d6:	4b46      	ldr	r3, [pc, #280]	; (132f0 <gsm_get_internal_rtc_time+0x198>)
   131d8:	4798      	blx	r3
   131da:	0003      	movs	r3, r0
   131dc:	603b      	str	r3, [r7, #0]
		
		cclktocken = strtok(cclktocken,"/");
   131de:	4a45      	ldr	r2, [pc, #276]	; (132f4 <gsm_get_internal_rtc_time+0x19c>)
   131e0:	683b      	ldr	r3, [r7, #0]
   131e2:	0011      	movs	r1, r2
   131e4:	0018      	movs	r0, r3
   131e6:	4b42      	ldr	r3, [pc, #264]	; (132f0 <gsm_get_internal_rtc_time+0x198>)
   131e8:	4798      	blx	r3
   131ea:	0003      	movs	r3, r0
   131ec:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_year = atoi(cclktocken);
   131ee:	683b      	ldr	r3, [r7, #0]
   131f0:	0018      	movs	r0, r3
   131f2:	4b41      	ldr	r3, [pc, #260]	; (132f8 <gsm_get_internal_rtc_time+0x1a0>)
   131f4:	4798      	blx	r3
   131f6:	0003      	movs	r3, r0
   131f8:	b2da      	uxtb	r2, r3
   131fa:	4b40      	ldr	r3, [pc, #256]	; (132fc <gsm_get_internal_rtc_time+0x1a4>)
   131fc:	701a      	strb	r2, [r3, #0]
		
		cclktocken = strtok(NULL,"/");
   131fe:	4b3d      	ldr	r3, [pc, #244]	; (132f4 <gsm_get_internal_rtc_time+0x19c>)
   13200:	0019      	movs	r1, r3
   13202:	2000      	movs	r0, #0
   13204:	4b3a      	ldr	r3, [pc, #232]	; (132f0 <gsm_get_internal_rtc_time+0x198>)
   13206:	4798      	blx	r3
   13208:	0003      	movs	r3, r0
   1320a:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_month = atoi(cclktocken);
   1320c:	683b      	ldr	r3, [r7, #0]
   1320e:	0018      	movs	r0, r3
   13210:	4b39      	ldr	r3, [pc, #228]	; (132f8 <gsm_get_internal_rtc_time+0x1a0>)
   13212:	4798      	blx	r3
   13214:	0003      	movs	r3, r0
   13216:	b2da      	uxtb	r2, r3
   13218:	4b38      	ldr	r3, [pc, #224]	; (132fc <gsm_get_internal_rtc_time+0x1a4>)
   1321a:	705a      	strb	r2, [r3, #1]
		
		cclktocken = strtok(NULL,",");
   1321c:	4b38      	ldr	r3, [pc, #224]	; (13300 <gsm_get_internal_rtc_time+0x1a8>)
   1321e:	0019      	movs	r1, r3
   13220:	2000      	movs	r0, #0
   13222:	4b33      	ldr	r3, [pc, #204]	; (132f0 <gsm_get_internal_rtc_time+0x198>)
   13224:	4798      	blx	r3
   13226:	0003      	movs	r3, r0
   13228:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_date = atoi(cclktocken);
   1322a:	683b      	ldr	r3, [r7, #0]
   1322c:	0018      	movs	r0, r3
   1322e:	4b32      	ldr	r3, [pc, #200]	; (132f8 <gsm_get_internal_rtc_time+0x1a0>)
   13230:	4798      	blx	r3
   13232:	0003      	movs	r3, r0
   13234:	b2da      	uxtb	r2, r3
   13236:	4b31      	ldr	r3, [pc, #196]	; (132fc <gsm_get_internal_rtc_time+0x1a4>)
   13238:	709a      	strb	r2, [r3, #2]
		
		cclktocken = strtok(NULL,":");
   1323a:	4b32      	ldr	r3, [pc, #200]	; (13304 <gsm_get_internal_rtc_time+0x1ac>)
   1323c:	0019      	movs	r1, r3
   1323e:	2000      	movs	r0, #0
   13240:	4b2b      	ldr	r3, [pc, #172]	; (132f0 <gsm_get_internal_rtc_time+0x198>)
   13242:	4798      	blx	r3
   13244:	0003      	movs	r3, r0
   13246:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_hour = atoi(cclktocken);
   13248:	683b      	ldr	r3, [r7, #0]
   1324a:	0018      	movs	r0, r3
   1324c:	4b2a      	ldr	r3, [pc, #168]	; (132f8 <gsm_get_internal_rtc_time+0x1a0>)
   1324e:	4798      	blx	r3
   13250:	0003      	movs	r3, r0
   13252:	b2da      	uxtb	r2, r3
   13254:	4b29      	ldr	r3, [pc, #164]	; (132fc <gsm_get_internal_rtc_time+0x1a4>)
   13256:	70da      	strb	r2, [r3, #3]
		
		cclktocken = strtok(NULL,":");
   13258:	4b2a      	ldr	r3, [pc, #168]	; (13304 <gsm_get_internal_rtc_time+0x1ac>)
   1325a:	0019      	movs	r1, r3
   1325c:	2000      	movs	r0, #0
   1325e:	4b24      	ldr	r3, [pc, #144]	; (132f0 <gsm_get_internal_rtc_time+0x198>)
   13260:	4798      	blx	r3
   13262:	0003      	movs	r3, r0
   13264:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_minute = atoi(cclktocken);
   13266:	683b      	ldr	r3, [r7, #0]
   13268:	0018      	movs	r0, r3
   1326a:	4b23      	ldr	r3, [pc, #140]	; (132f8 <gsm_get_internal_rtc_time+0x1a0>)
   1326c:	4798      	blx	r3
   1326e:	0003      	movs	r3, r0
   13270:	b2da      	uxtb	r2, r3
   13272:	4b22      	ldr	r3, [pc, #136]	; (132fc <gsm_get_internal_rtc_time+0x1a4>)
   13274:	711a      	strb	r2, [r3, #4]
		
		cclktocken = strtok(NULL,"+");
   13276:	4b24      	ldr	r3, [pc, #144]	; (13308 <gsm_get_internal_rtc_time+0x1b0>)
   13278:	0019      	movs	r1, r3
   1327a:	2000      	movs	r0, #0
   1327c:	4b1c      	ldr	r3, [pc, #112]	; (132f0 <gsm_get_internal_rtc_time+0x198>)
   1327e:	4798      	blx	r3
   13280:	0003      	movs	r3, r0
   13282:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_second = atoi(cclktocken);
   13284:	683b      	ldr	r3, [r7, #0]
   13286:	0018      	movs	r0, r3
   13288:	4b1b      	ldr	r3, [pc, #108]	; (132f8 <gsm_get_internal_rtc_time+0x1a0>)
   1328a:	4798      	blx	r3
   1328c:	0003      	movs	r3, r0
   1328e:	b2da      	uxtb	r2, r3
   13290:	4b1a      	ldr	r3, [pc, #104]	; (132fc <gsm_get_internal_rtc_time+0x1a4>)
   13292:	715a      	strb	r2, [r3, #5]
   13294:	e011      	b.n	132ba <gsm_get_internal_rtc_time+0x162>
	}
	else
	{
		struct_internal_rtc.Network_year = 0;
   13296:	4b19      	ldr	r3, [pc, #100]	; (132fc <gsm_get_internal_rtc_time+0x1a4>)
   13298:	2200      	movs	r2, #0
   1329a:	701a      	strb	r2, [r3, #0]
		struct_internal_rtc.Network_month = 0;
   1329c:	4b17      	ldr	r3, [pc, #92]	; (132fc <gsm_get_internal_rtc_time+0x1a4>)
   1329e:	2200      	movs	r2, #0
   132a0:	705a      	strb	r2, [r3, #1]
		struct_internal_rtc.Network_date = 0;
   132a2:	4b16      	ldr	r3, [pc, #88]	; (132fc <gsm_get_internal_rtc_time+0x1a4>)
   132a4:	2200      	movs	r2, #0
   132a6:	709a      	strb	r2, [r3, #2]
		struct_internal_rtc.Network_hour = 0;
   132a8:	4b14      	ldr	r3, [pc, #80]	; (132fc <gsm_get_internal_rtc_time+0x1a4>)
   132aa:	2200      	movs	r2, #0
   132ac:	70da      	strb	r2, [r3, #3]
		struct_internal_rtc.Network_minute = 0;
   132ae:	4b13      	ldr	r3, [pc, #76]	; (132fc <gsm_get_internal_rtc_time+0x1a4>)
   132b0:	2200      	movs	r2, #0
   132b2:	711a      	strb	r2, [r3, #4]
		struct_internal_rtc.Network_second = 0;
   132b4:	4b11      	ldr	r3, [pc, #68]	; (132fc <gsm_get_internal_rtc_time+0x1a4>)
   132b6:	2200      	movs	r2, #0
   132b8:	715a      	strb	r2, [r3, #5]
	}
	
	free(cmdx);
   132ba:	68bb      	ldr	r3, [r7, #8]
   132bc:	0018      	movs	r0, r3
   132be:	4b05      	ldr	r3, [pc, #20]	; (132d4 <gsm_get_internal_rtc_time+0x17c>)
   132c0:	4798      	blx	r3
	return err;
   132c2:	1dfb      	adds	r3, r7, #7
   132c4:	781b      	ldrb	r3, [r3, #0]
}
   132c6:	0018      	movs	r0, r3
   132c8:	46bd      	mov	sp, r7
   132ca:	b004      	add	sp, #16
   132cc:	bdb0      	pop	{r4, r5, r7, pc}
   132ce:	46c0      	nop			; (mov r8, r8)
   132d0:	00028e05 	.word	0x00028e05
   132d4:	00028ea5 	.word	0x00028ea5
   132d8:	00028f13 	.word	0x00028f13
   132dc:	00001388 	.word	0x00001388
   132e0:	00029bc8 	.word	0x00029bc8
   132e4:	00029e94 	.word	0x00029e94
   132e8:	000123c9 	.word	0x000123c9
   132ec:	00029ea0 	.word	0x00029ea0
   132f0:	00029205 	.word	0x00029205
   132f4:	00029ea4 	.word	0x00029ea4
   132f8:	00028df9 	.word	0x00028df9
   132fc:	20000688 	.word	0x20000688
   13300:	00029ce4 	.word	0x00029ce4
   13304:	00029ce0 	.word	0x00029ce0
   13308:	00029ea8 	.word	0x00029ea8

0001330c <gsm_config_module>:


enum gsm_error gsm_config_module(void)
{
   1330c:	b580      	push	{r7, lr}
   1330e:	af00      	add	r7, sp, #0
	if (gsm_check_module() == GSM_ERROR_NONE)
   13310:	4b34      	ldr	r3, [pc, #208]	; (133e4 <gsm_config_module+0xd8>)
   13312:	4798      	blx	r3
   13314:	1e03      	subs	r3, r0, #0
   13316:	d000      	beq.n	1331a <gsm_config_module+0xe>
   13318:	e05e      	b.n	133d8 <gsm_config_module+0xcc>
	{
		if (gsm_factory_reset() == GSM_ERROR_NONE)
   1331a:	4b33      	ldr	r3, [pc, #204]	; (133e8 <gsm_config_module+0xdc>)
   1331c:	4798      	blx	r3
   1331e:	1e03      	subs	r3, r0, #0
   13320:	d000      	beq.n	13324 <gsm_config_module+0x18>
   13322:	e057      	b.n	133d4 <gsm_config_module+0xc8>
		{
			vTaskDelay(2000/portTICK_PERIOD_MS);
   13324:	23fa      	movs	r3, #250	; 0xfa
   13326:	00db      	lsls	r3, r3, #3
   13328:	0018      	movs	r0, r3
   1332a:	4b30      	ldr	r3, [pc, #192]	; (133ec <gsm_config_module+0xe0>)
   1332c:	4798      	blx	r3
			
			if (gsm_detect_simcard() == GSM_ERROR_NONE)
   1332e:	4b30      	ldr	r3, [pc, #192]	; (133f0 <gsm_config_module+0xe4>)
   13330:	4798      	blx	r3
   13332:	1e03      	subs	r3, r0, #0
   13334:	d14c      	bne.n	133d0 <gsm_config_module+0xc4>
			{
				if (gsm_echo_off() == GSM_ERROR_NONE)
   13336:	4b2f      	ldr	r3, [pc, #188]	; (133f4 <gsm_config_module+0xe8>)
   13338:	4798      	blx	r3
   1333a:	1e03      	subs	r3, r0, #0
   1333c:	d14e      	bne.n	133dc <gsm_config_module+0xd0>
				{
					if (gsm_set_baudrate() == GSM_ERROR_NONE)
   1333e:	4b2e      	ldr	r3, [pc, #184]	; (133f8 <gsm_config_module+0xec>)
   13340:	4798      	blx	r3
   13342:	1e03      	subs	r3, r0, #0
   13344:	d142      	bne.n	133cc <gsm_config_module+0xc0>
					{
						vTaskDelay(2000/portTICK_PERIOD_MS);
   13346:	23fa      	movs	r3, #250	; 0xfa
   13348:	00db      	lsls	r3, r3, #3
   1334a:	0018      	movs	r0, r3
   1334c:	4b27      	ldr	r3, [pc, #156]	; (133ec <gsm_config_module+0xe0>)
   1334e:	4798      	blx	r3
						
						if (gsm_enable_calling_line_identification()==GSM_ERROR_NONE)
   13350:	4b2a      	ldr	r3, [pc, #168]	; (133fc <gsm_config_module+0xf0>)
   13352:	4798      	blx	r3
   13354:	1e03      	subs	r3, r0, #0
   13356:	d137      	bne.n	133c8 <gsm_config_module+0xbc>
						{
							if (gsm_enable_connected_line_identification_presentation() == GSM_ERROR_NONE)
   13358:	4b29      	ldr	r3, [pc, #164]	; (13400 <gsm_config_module+0xf4>)
   1335a:	4798      	blx	r3
   1335c:	1e03      	subs	r3, r0, #0
   1335e:	d131      	bne.n	133c4 <gsm_config_module+0xb8>
							{
								if (gsm_enable_list_current_calls_of_ME() == GSM_ERROR_NONE)
   13360:	4b28      	ldr	r3, [pc, #160]	; (13404 <gsm_config_module+0xf8>)
   13362:	4798      	blx	r3
   13364:	1e03      	subs	r3, r0, #0
   13366:	d12b      	bne.n	133c0 <gsm_config_module+0xb4>
								{
									if (gsm_select_sms_message_formate_text_mode() == GSM_ERROR_NONE)
   13368:	4b27      	ldr	r3, [pc, #156]	; (13408 <gsm_config_module+0xfc>)
   1336a:	4798      	blx	r3
   1336c:	1e03      	subs	r3, r0, #0
   1336e:	d125      	bne.n	133bc <gsm_config_module+0xb0>
									{
										if (gsm_set_sms_text_mode_parameter() == GSM_ERROR_NONE)
   13370:	4b26      	ldr	r3, [pc, #152]	; (1340c <gsm_config_module+0x100>)
   13372:	4798      	blx	r3
   13374:	1e03      	subs	r3, r0, #0
   13376:	d11f      	bne.n	133b8 <gsm_config_module+0xac>
										{
											if (gsm_enable_new_sms_message_indications() == GSM_ERROR_NONE)
   13378:	4b25      	ldr	r3, [pc, #148]	; (13410 <gsm_config_module+0x104>)
   1337a:	4798      	blx	r3
   1337c:	1e03      	subs	r3, r0, #0
   1337e:	d119      	bne.n	133b4 <gsm_config_module+0xa8>
											{
												if (gsm_enable_network_time_update() == GSM_ERROR_NONE)
   13380:	4b24      	ldr	r3, [pc, #144]	; (13414 <gsm_config_module+0x108>)
   13382:	4798      	blx	r3
   13384:	1e03      	subs	r3, r0, #0
   13386:	d113      	bne.n	133b0 <gsm_config_module+0xa4>
												{
													if (gsm_enable_DTMF_detection() == GSM_ERROR_NONE)
   13388:	4b23      	ldr	r3, [pc, #140]	; (13418 <gsm_config_module+0x10c>)
   1338a:	4798      	blx	r3
   1338c:	1e03      	subs	r3, r0, #0
   1338e:	d10d      	bne.n	133ac <gsm_config_module+0xa0>
													{
														if (gsm_enable_sleep_mode()==GSM_ERROR_NONE)
   13390:	4b22      	ldr	r3, [pc, #136]	; (1341c <gsm_config_module+0x110>)
   13392:	4798      	blx	r3
   13394:	1e03      	subs	r3, r0, #0
   13396:	d107      	bne.n	133a8 <gsm_config_module+0x9c>
														{
															if (gsm_store_active_profile() == GSM_ERROR_NONE)
   13398:	4b21      	ldr	r3, [pc, #132]	; (13420 <gsm_config_module+0x114>)
   1339a:	4798      	blx	r3
   1339c:	1e03      	subs	r3, r0, #0
   1339e:	d101      	bne.n	133a4 <gsm_config_module+0x98>
															{
																return GSM_ERROR_NONE;
   133a0:	2300      	movs	r3, #0
   133a2:	e01c      	b.n	133de <gsm_config_module+0xd2>
															}
															else
															{
																return GSM_ERROR_CONFIG_FAILED;
   133a4:	2310      	movs	r3, #16
   133a6:	e01a      	b.n	133de <gsm_config_module+0xd2>
															}
														}
														else
														{
																return GSM_ERROR_CONFIG_FAILED;
   133a8:	2310      	movs	r3, #16
   133aa:	e018      	b.n	133de <gsm_config_module+0xd2>
														}
													}
													else
													{
														return GSM_ERROR_CONFIG_FAILED;
   133ac:	2310      	movs	r3, #16
   133ae:	e016      	b.n	133de <gsm_config_module+0xd2>
													}
												}
												else
												{
													return GSM_ERROR_CONFIG_FAILED;
   133b0:	2310      	movs	r3, #16
   133b2:	e014      	b.n	133de <gsm_config_module+0xd2>
												}
											}
											else
											{
												return GSM_ERROR_CONFIG_FAILED;
   133b4:	2310      	movs	r3, #16
   133b6:	e012      	b.n	133de <gsm_config_module+0xd2>
											}
										}
										else
										{
											return GSM_ERROR_CONFIG_FAILED;
   133b8:	2310      	movs	r3, #16
   133ba:	e010      	b.n	133de <gsm_config_module+0xd2>
										}
									}
									else
									{
										return GSM_ERROR_CONFIG_FAILED;
   133bc:	2310      	movs	r3, #16
   133be:	e00e      	b.n	133de <gsm_config_module+0xd2>
									}
								}
								else
								{
									return GSM_ERROR_CONFIG_FAILED;
   133c0:	2310      	movs	r3, #16
   133c2:	e00c      	b.n	133de <gsm_config_module+0xd2>
								}
							}
							else
							{
								return GSM_ERROR_CONFIG_FAILED;
   133c4:	2310      	movs	r3, #16
   133c6:	e00a      	b.n	133de <gsm_config_module+0xd2>
							}
						}
						else
						{
							return GSM_ERROR_CONFIG_FAILED;
   133c8:	2310      	movs	r3, #16
   133ca:	e008      	b.n	133de <gsm_config_module+0xd2>
						}
					}
					else
					{
						return GSM_ERROR_CONFIG_FAILED;
   133cc:	2310      	movs	r3, #16
   133ce:	e006      	b.n	133de <gsm_config_module+0xd2>
					}
				}
			}
			else
			{
				return GSM_ERROR_CONFIG_FAILED;
   133d0:	2310      	movs	r3, #16
   133d2:	e004      	b.n	133de <gsm_config_module+0xd2>
			}
		}
		else
		{
			return GSM_ERROR_CONFIG_FAILED;
   133d4:	2310      	movs	r3, #16
   133d6:	e002      	b.n	133de <gsm_config_module+0xd2>
		}
	}
	else
	{
		return GSM_ERROR_CONFIG_FAILED;
   133d8:	2310      	movs	r3, #16
   133da:	e000      	b.n	133de <gsm_config_module+0xd2>
	}
	
	return GSM_ERROR_CONFIG_FAILED;
   133dc:	2310      	movs	r3, #16
}
   133de:	0018      	movs	r0, r3
   133e0:	46bd      	mov	sp, r7
   133e2:	bd80      	pop	{r7, pc}
   133e4:	000125c1 	.word	0x000125c1
   133e8:	000127fd 	.word	0x000127fd
   133ec:	0001ffe9 	.word	0x0001ffe9
   133f0:	000126ad 	.word	0x000126ad
   133f4:	0001282d 	.word	0x0001282d
   133f8:	00012659 	.word	0x00012659
   133fc:	0001273d 	.word	0x0001273d
   13400:	0001276d 	.word	0x0001276d
   13404:	000127cd 	.word	0x000127cd
   13408:	0001285d 	.word	0x0001285d
   1340c:	0001288d 	.word	0x0001288d
   13410:	00012ad5 	.word	0x00012ad5
   13414:	00012f19 	.word	0x00012f19
   13418:	00012f49 	.word	0x00012f49
   1341c:	0001279d 	.word	0x0001279d
   13420:	0001270d 	.word	0x0001270d

00013424 <gsm_read_response_line>:

bool gsm_read_response_line(char *buffer,uint8_t length)
{
   13424:	b580      	push	{r7, lr}
   13426:	b084      	sub	sp, #16
   13428:	af00      	add	r7, sp, #0
   1342a:	6078      	str	r0, [r7, #4]
   1342c:	000a      	movs	r2, r1
   1342e:	1cfb      	adds	r3, r7, #3
   13430:	701a      	strb	r2, [r3, #0]
	bool line_non_empty = false;
   13432:	230f      	movs	r3, #15
   13434:	18fb      	adds	r3, r7, r3
   13436:	2200      	movs	r2, #0
   13438:	701a      	strb	r2, [r3, #0]
	while (length > 1)
   1343a:	e026      	b.n	1348a <gsm_read_response_line+0x66>
	{
		
		uint8_t curr_rx;
		/* Fetch next buffered character received from the module */
		if (xQueueReceive(gsm_rx_queue, &curr_rx, 500 / portTICK_PERIOD_MS) == pdFALSE)
   1343c:	4b1b      	ldr	r3, [pc, #108]	; (134ac <gsm_read_response_line+0x88>)
   1343e:	6818      	ldr	r0, [r3, #0]
   13440:	23fa      	movs	r3, #250	; 0xfa
   13442:	005a      	lsls	r2, r3, #1
   13444:	230e      	movs	r3, #14
   13446:	18fb      	adds	r3, r7, r3
   13448:	0019      	movs	r1, r3
   1344a:	4b19      	ldr	r3, [pc, #100]	; (134b0 <gsm_read_response_line+0x8c>)
   1344c:	4798      	blx	r3
   1344e:	1e03      	subs	r3, r0, #0
   13450:	d101      	bne.n	13456 <gsm_read_response_line+0x32>
		{
			return false;
   13452:	2300      	movs	r3, #0
   13454:	e025      	b.n	134a2 <gsm_read_response_line+0x7e>
		}

		if (curr_rx == '\n')
   13456:	230e      	movs	r3, #14
   13458:	18fb      	adds	r3, r7, r3
   1345a:	781b      	ldrb	r3, [r3, #0]
   1345c:	2b0a      	cmp	r3, #10
   1345e:	d014      	beq.n	1348a <gsm_read_response_line+0x66>
		{
			/* Ignore newline characters */
		}
		else if (curr_rx != '\r')
   13460:	230e      	movs	r3, #14
   13462:	18fb      	adds	r3, r7, r3
   13464:	781b      	ldrb	r3, [r3, #0]
   13466:	2b0d      	cmp	r3, #13
   13468:	d014      	beq.n	13494 <gsm_read_response_line+0x70>
		{
			/* Non end-of-command CR character */
			*(buffer++) = curr_rx;
   1346a:	687b      	ldr	r3, [r7, #4]
   1346c:	1c5a      	adds	r2, r3, #1
   1346e:	607a      	str	r2, [r7, #4]
   13470:	220e      	movs	r2, #14
   13472:	18ba      	adds	r2, r7, r2
   13474:	7812      	ldrb	r2, [r2, #0]
   13476:	701a      	strb	r2, [r3, #0]
			length--;
   13478:	1cfb      	adds	r3, r7, #3
   1347a:	781a      	ldrb	r2, [r3, #0]
   1347c:	1cfb      	adds	r3, r7, #3
   1347e:	3a01      	subs	r2, #1
   13480:	701a      	strb	r2, [r3, #0]
			line_non_empty = true;
   13482:	230f      	movs	r3, #15
   13484:	18fb      	adds	r3, r7, r3
   13486:	2201      	movs	r2, #1
   13488:	701a      	strb	r2, [r3, #0]
	while (length > 1)
   1348a:	1cfb      	adds	r3, r7, #3
   1348c:	781b      	ldrb	r3, [r3, #0]
   1348e:	2b01      	cmp	r3, #1
   13490:	d8d4      	bhi.n	1343c <gsm_read_response_line+0x18>
   13492:	e000      	b.n	13496 <gsm_read_response_line+0x72>
		}
		else
		{
			/* End of command, finished reading line */
			break;
   13494:	46c0      	nop			; (mov r8, r8)
		}
	}

	*(buffer) = '\0';
   13496:	687b      	ldr	r3, [r7, #4]
   13498:	2200      	movs	r2, #0
   1349a:	701a      	strb	r2, [r3, #0]
	return line_non_empty;
   1349c:	230f      	movs	r3, #15
   1349e:	18fb      	adds	r3, r7, r3
   134a0:	781b      	ldrb	r3, [r3, #0]
}
   134a2:	0018      	movs	r0, r3
   134a4:	46bd      	mov	sp, r7
   134a6:	b004      	add	sp, #16
   134a8:	bd80      	pop	{r7, pc}
   134aa:	46c0      	nop			; (mov r8, r8)
   134ac:	20000220 	.word	0x20000220
   134b0:	0001f541 	.word	0x0001f541

000134b4 <gsm_responseLine_isNew_SMS_Received>:

char gsm_responseLine_isNew_SMS_Received(char *response)
{
   134b4:	b580      	push	{r7, lr}
   134b6:	b084      	sub	sp, #16
   134b8:	af00      	add	r7, sp, #0
   134ba:	6078      	str	r0, [r7, #4]
	
	char sms_index = 0;
   134bc:	230f      	movs	r3, #15
   134be:	18fb      	adds	r3, r7, r3
   134c0:	2200      	movs	r2, #0
   134c2:	701a      	strb	r2, [r3, #0]
	
	if (strstr(response,"+CMTI:"))
   134c4:	4a17      	ldr	r2, [pc, #92]	; (13524 <gsm_responseLine_isNew_SMS_Received+0x70>)
   134c6:	687b      	ldr	r3, [r7, #4]
   134c8:	0011      	movs	r1, r2
   134ca:	0018      	movs	r0, r3
   134cc:	4b16      	ldr	r3, [pc, #88]	; (13528 <gsm_responseLine_isNew_SMS_Received+0x74>)
   134ce:	4798      	blx	r3
   134d0:	1e03      	subs	r3, r0, #0
   134d2:	d01b      	beq.n	1350c <gsm_responseLine_isNew_SMS_Received+0x58>
	{
		char *ptr_tocken;
		ptr_tocken = strtok(response,",");
   134d4:	4a15      	ldr	r2, [pc, #84]	; (1352c <gsm_responseLine_isNew_SMS_Received+0x78>)
   134d6:	687b      	ldr	r3, [r7, #4]
   134d8:	0011      	movs	r1, r2
   134da:	0018      	movs	r0, r3
   134dc:	4b14      	ldr	r3, [pc, #80]	; (13530 <gsm_responseLine_isNew_SMS_Received+0x7c>)
   134de:	4798      	blx	r3
   134e0:	0003      	movs	r3, r0
   134e2:	60bb      	str	r3, [r7, #8]
		ptr_tocken = strtok(NULL,",");
   134e4:	4b11      	ldr	r3, [pc, #68]	; (1352c <gsm_responseLine_isNew_SMS_Received+0x78>)
   134e6:	0019      	movs	r1, r3
   134e8:	2000      	movs	r0, #0
   134ea:	4b11      	ldr	r3, [pc, #68]	; (13530 <gsm_responseLine_isNew_SMS_Received+0x7c>)
   134ec:	4798      	blx	r3
   134ee:	0003      	movs	r3, r0
   134f0:	60bb      	str	r3, [r7, #8]
		
		RemoveSpaces(ptr_tocken);
   134f2:	68bb      	ldr	r3, [r7, #8]
   134f4:	0018      	movs	r0, r3
   134f6:	4b0f      	ldr	r3, [pc, #60]	; (13534 <gsm_responseLine_isNew_SMS_Received+0x80>)
   134f8:	4798      	blx	r3
		
		sms_index = atoi(ptr_tocken);
   134fa:	68bb      	ldr	r3, [r7, #8]
   134fc:	0018      	movs	r0, r3
   134fe:	4b0e      	ldr	r3, [pc, #56]	; (13538 <gsm_responseLine_isNew_SMS_Received+0x84>)
   13500:	4798      	blx	r3
   13502:	0002      	movs	r2, r0
   13504:	230f      	movs	r3, #15
   13506:	18fb      	adds	r3, r7, r3
   13508:	701a      	strb	r2, [r3, #0]
   1350a:	e003      	b.n	13514 <gsm_responseLine_isNew_SMS_Received+0x60>
		
	}
	else
	{
		sms_index =  0;
   1350c:	230f      	movs	r3, #15
   1350e:	18fb      	adds	r3, r7, r3
   13510:	2200      	movs	r2, #0
   13512:	701a      	strb	r2, [r3, #0]
	}
	
	return sms_index;
   13514:	230f      	movs	r3, #15
   13516:	18fb      	adds	r3, r7, r3
   13518:	781b      	ldrb	r3, [r3, #0]
}
   1351a:	0018      	movs	r0, r3
   1351c:	46bd      	mov	sp, r7
   1351e:	b004      	add	sp, #16
   13520:	bd80      	pop	{r7, pc}
   13522:	46c0      	nop			; (mov r8, r8)
   13524:	00029eac 	.word	0x00029eac
   13528:	000291d3 	.word	0x000291d3
   1352c:	00029ce4 	.word	0x00029ce4
   13530:	00029205 	.word	0x00029205
   13534:	00012a91 	.word	0x00012a91
   13538:	00028df9 	.word	0x00028df9

0001353c <gsm_responseLine_isRinging>:

bool gsm_responseLine_isRinging(char *response)
{
   1353c:	b580      	push	{r7, lr}
   1353e:	b082      	sub	sp, #8
   13540:	af00      	add	r7, sp, #0
   13542:	6078      	str	r0, [r7, #4]
	if (strstr(response,"RING"))
   13544:	4a07      	ldr	r2, [pc, #28]	; (13564 <gsm_responseLine_isRinging+0x28>)
   13546:	687b      	ldr	r3, [r7, #4]
   13548:	0011      	movs	r1, r2
   1354a:	0018      	movs	r0, r3
   1354c:	4b06      	ldr	r3, [pc, #24]	; (13568 <gsm_responseLine_isRinging+0x2c>)
   1354e:	4798      	blx	r3
   13550:	1e03      	subs	r3, r0, #0
   13552:	d001      	beq.n	13558 <gsm_responseLine_isRinging+0x1c>
	{
		return true;
   13554:	2301      	movs	r3, #1
   13556:	e000      	b.n	1355a <gsm_responseLine_isRinging+0x1e>
	}
	else
	{
		return false;
   13558:	2300      	movs	r3, #0
	}
}
   1355a:	0018      	movs	r0, r3
   1355c:	46bd      	mov	sp, r7
   1355e:	b002      	add	sp, #8
   13560:	bd80      	pop	{r7, pc}
   13562:	46c0      	nop			; (mov r8, r8)
   13564:	00029eb4 	.word	0x00029eb4
   13568:	000291d3 	.word	0x000291d3

0001356c <gsm_responseLine_get_IncommingCallNo>:

bool gsm_responseLine_get_IncommingCallNo(char *response,char *phone_number)
{
   1356c:	b580      	push	{r7, lr}
   1356e:	b084      	sub	sp, #16
   13570:	af00      	add	r7, sp, #0
   13572:	6078      	str	r0, [r7, #4]
   13574:	6039      	str	r1, [r7, #0]
	if(strstr(response,"+CLIP"))
   13576:	4a1e      	ldr	r2, [pc, #120]	; (135f0 <gsm_responseLine_get_IncommingCallNo+0x84>)
   13578:	687b      	ldr	r3, [r7, #4]
   1357a:	0011      	movs	r1, r2
   1357c:	0018      	movs	r0, r3
   1357e:	4b1d      	ldr	r3, [pc, #116]	; (135f4 <gsm_responseLine_get_IncommingCallNo+0x88>)
   13580:	4798      	blx	r3
   13582:	1e03      	subs	r3, r0, #0
   13584:	d02e      	beq.n	135e4 <gsm_responseLine_get_IncommingCallNo+0x78>
	{
		char *ptr_tocken;
		ptr_tocken = strtok(response,":");
   13586:	4a1c      	ldr	r2, [pc, #112]	; (135f8 <gsm_responseLine_get_IncommingCallNo+0x8c>)
   13588:	687b      	ldr	r3, [r7, #4]
   1358a:	0011      	movs	r1, r2
   1358c:	0018      	movs	r0, r3
   1358e:	4b1b      	ldr	r3, [pc, #108]	; (135fc <gsm_responseLine_get_IncommingCallNo+0x90>)
   13590:	4798      	blx	r3
   13592:	0003      	movs	r3, r0
   13594:	60fb      	str	r3, [r7, #12]
		ptr_tocken = strtok(NULL,",");
   13596:	4b1a      	ldr	r3, [pc, #104]	; (13600 <gsm_responseLine_get_IncommingCallNo+0x94>)
   13598:	0019      	movs	r1, r3
   1359a:	2000      	movs	r0, #0
   1359c:	4b17      	ldr	r3, [pc, #92]	; (135fc <gsm_responseLine_get_IncommingCallNo+0x90>)
   1359e:	4798      	blx	r3
   135a0:	0003      	movs	r3, r0
   135a2:	60fb      	str	r3, [r7, #12]
		ptr_tocken = strtok(ptr_tocken,"\"");
   135a4:	4a17      	ldr	r2, [pc, #92]	; (13604 <gsm_responseLine_get_IncommingCallNo+0x98>)
   135a6:	68fb      	ldr	r3, [r7, #12]
   135a8:	0011      	movs	r1, r2
   135aa:	0018      	movs	r0, r3
   135ac:	4b13      	ldr	r3, [pc, #76]	; (135fc <gsm_responseLine_get_IncommingCallNo+0x90>)
   135ae:	4798      	blx	r3
   135b0:	0003      	movs	r3, r0
   135b2:	60fb      	str	r3, [r7, #12]
		ptr_tocken = strtok(NULL,"\"");
   135b4:	4b13      	ldr	r3, [pc, #76]	; (13604 <gsm_responseLine_get_IncommingCallNo+0x98>)
   135b6:	0019      	movs	r1, r3
   135b8:	2000      	movs	r0, #0
   135ba:	4b10      	ldr	r3, [pc, #64]	; (135fc <gsm_responseLine_get_IncommingCallNo+0x90>)
   135bc:	4798      	blx	r3
   135be:	0003      	movs	r3, r0
   135c0:	60fb      	str	r3, [r7, #12]
		
		if (!strstr(ptr_tocken,"+"))
   135c2:	68fb      	ldr	r3, [r7, #12]
   135c4:	212b      	movs	r1, #43	; 0x2b
   135c6:	0018      	movs	r0, r3
   135c8:	4b0f      	ldr	r3, [pc, #60]	; (13608 <gsm_responseLine_get_IncommingCallNo+0x9c>)
   135ca:	4798      	blx	r3
   135cc:	1e03      	subs	r3, r0, #0
   135ce:	d101      	bne.n	135d4 <gsm_responseLine_get_IncommingCallNo+0x68>
		{
			return false;
   135d0:	2300      	movs	r3, #0
   135d2:	e008      	b.n	135e6 <gsm_responseLine_get_IncommingCallNo+0x7a>
		}
		strcpy(phone_number, (char *)(ptr_tocken));
   135d4:	68fa      	ldr	r2, [r7, #12]
   135d6:	683b      	ldr	r3, [r7, #0]
   135d8:	0011      	movs	r1, r2
   135da:	0018      	movs	r0, r3
   135dc:	4b0b      	ldr	r3, [pc, #44]	; (1360c <gsm_responseLine_get_IncommingCallNo+0xa0>)
   135de:	4798      	blx	r3
		return true;
   135e0:	2301      	movs	r3, #1
   135e2:	e000      	b.n	135e6 <gsm_responseLine_get_IncommingCallNo+0x7a>
	}
	else
	{
		return false;
   135e4:	2300      	movs	r3, #0
	}
}
   135e6:	0018      	movs	r0, r3
   135e8:	46bd      	mov	sp, r7
   135ea:	b004      	add	sp, #16
   135ec:	bd80      	pop	{r7, pc}
   135ee:	46c0      	nop			; (mov r8, r8)
   135f0:	00029ebc 	.word	0x00029ebc
   135f4:	000291d3 	.word	0x000291d3
   135f8:	00029ce0 	.word	0x00029ce0
   135fc:	00029205 	.word	0x00029205
   13600:	00029ce4 	.word	0x00029ce4
   13604:	00029ea0 	.word	0x00029ea0
   13608:	00029177 	.word	0x00029177
   1360c:	00029193 	.word	0x00029193

00013610 <gsm_responseLine_isCallCut>:

bool gsm_responseLine_isCallCut(char *response)
{
   13610:	b580      	push	{r7, lr}
   13612:	b082      	sub	sp, #8
   13614:	af00      	add	r7, sp, #0
   13616:	6078      	str	r0, [r7, #4]
	if (strstr(response,"NO CARRIER"))
   13618:	4a16      	ldr	r2, [pc, #88]	; (13674 <gsm_responseLine_isCallCut+0x64>)
   1361a:	687b      	ldr	r3, [r7, #4]
   1361c:	0011      	movs	r1, r2
   1361e:	0018      	movs	r0, r3
   13620:	4b15      	ldr	r3, [pc, #84]	; (13678 <gsm_responseLine_isCallCut+0x68>)
   13622:	4798      	blx	r3
   13624:	1e03      	subs	r3, r0, #0
   13626:	d001      	beq.n	1362c <gsm_responseLine_isCallCut+0x1c>
	{
		return true;
   13628:	2301      	movs	r3, #1
   1362a:	e01e      	b.n	1366a <gsm_responseLine_isCallCut+0x5a>
	}
	else if (strstr(response,"BUSY"))
   1362c:	4a13      	ldr	r2, [pc, #76]	; (1367c <gsm_responseLine_isCallCut+0x6c>)
   1362e:	687b      	ldr	r3, [r7, #4]
   13630:	0011      	movs	r1, r2
   13632:	0018      	movs	r0, r3
   13634:	4b10      	ldr	r3, [pc, #64]	; (13678 <gsm_responseLine_isCallCut+0x68>)
   13636:	4798      	blx	r3
   13638:	1e03      	subs	r3, r0, #0
   1363a:	d001      	beq.n	13640 <gsm_responseLine_isCallCut+0x30>
	{
		return true;
   1363c:	2301      	movs	r3, #1
   1363e:	e014      	b.n	1366a <gsm_responseLine_isCallCut+0x5a>
	}
	else if (strstr(response,"NO ANSWER"))
   13640:	4a0f      	ldr	r2, [pc, #60]	; (13680 <gsm_responseLine_isCallCut+0x70>)
   13642:	687b      	ldr	r3, [r7, #4]
   13644:	0011      	movs	r1, r2
   13646:	0018      	movs	r0, r3
   13648:	4b0b      	ldr	r3, [pc, #44]	; (13678 <gsm_responseLine_isCallCut+0x68>)
   1364a:	4798      	blx	r3
   1364c:	1e03      	subs	r3, r0, #0
   1364e:	d001      	beq.n	13654 <gsm_responseLine_isCallCut+0x44>
	{
		return true;
   13650:	2301      	movs	r3, #1
   13652:	e00a      	b.n	1366a <gsm_responseLine_isCallCut+0x5a>
	}
	else if (strstr(response,"ERROR"))
   13654:	4a0b      	ldr	r2, [pc, #44]	; (13684 <gsm_responseLine_isCallCut+0x74>)
   13656:	687b      	ldr	r3, [r7, #4]
   13658:	0011      	movs	r1, r2
   1365a:	0018      	movs	r0, r3
   1365c:	4b06      	ldr	r3, [pc, #24]	; (13678 <gsm_responseLine_isCallCut+0x68>)
   1365e:	4798      	blx	r3
   13660:	1e03      	subs	r3, r0, #0
   13662:	d001      	beq.n	13668 <gsm_responseLine_isCallCut+0x58>
	{
		return true;
   13664:	2301      	movs	r3, #1
   13666:	e000      	b.n	1366a <gsm_responseLine_isCallCut+0x5a>
	}

	return false;
   13668:	2300      	movs	r3, #0
}
   1366a:	0018      	movs	r0, r3
   1366c:	46bd      	mov	sp, r7
   1366e:	b002      	add	sp, #8
   13670:	bd80      	pop	{r7, pc}
   13672:	46c0      	nop			; (mov r8, r8)
   13674:	00029ec4 	.word	0x00029ec4
   13678:	000291d3 	.word	0x000291d3
   1367c:	00029ed0 	.word	0x00029ed0
   13680:	00029ed8 	.word	0x00029ed8
   13684:	00029bc0 	.word	0x00029bc0

00013688 <gsm_responseLine_isNew_DTMF_Command_Received>:

bool gsm_responseLine_isNew_DTMF_Command_Received(char *response)
{
   13688:	b580      	push	{r7, lr}
   1368a:	b082      	sub	sp, #8
   1368c:	af00      	add	r7, sp, #0
   1368e:	6078      	str	r0, [r7, #4]
	if (strstr(response,"+DTMF:"))
   13690:	4a07      	ldr	r2, [pc, #28]	; (136b0 <gsm_responseLine_isNew_DTMF_Command_Received+0x28>)
   13692:	687b      	ldr	r3, [r7, #4]
   13694:	0011      	movs	r1, r2
   13696:	0018      	movs	r0, r3
   13698:	4b06      	ldr	r3, [pc, #24]	; (136b4 <gsm_responseLine_isNew_DTMF_Command_Received+0x2c>)
   1369a:	4798      	blx	r3
   1369c:	1e03      	subs	r3, r0, #0
   1369e:	d001      	beq.n	136a4 <gsm_responseLine_isNew_DTMF_Command_Received+0x1c>
	{
		return true;
   136a0:	2301      	movs	r3, #1
   136a2:	e000      	b.n	136a6 <gsm_responseLine_isNew_DTMF_Command_Received+0x1e>
	}
	else
	{
		return false;
   136a4:	2300      	movs	r3, #0
	}
}
   136a6:	0018      	movs	r0, r3
   136a8:	46bd      	mov	sp, r7
   136aa:	b002      	add	sp, #8
   136ac:	bd80      	pop	{r7, pc}
   136ae:	46c0      	nop			; (mov r8, r8)
   136b0:	00029ee4 	.word	0x00029ee4
   136b4:	000291d3 	.word	0x000291d3

000136b8 <gsm_responseLine_is_StopSound_Received>:

bool gsm_responseLine_is_StopSound_Received(char *response)
{
   136b8:	b580      	push	{r7, lr}
   136ba:	b082      	sub	sp, #8
   136bc:	af00      	add	r7, sp, #0
   136be:	6078      	str	r0, [r7, #4]
	if (strstr(response,"+CREC: 0"))
   136c0:	4a07      	ldr	r2, [pc, #28]	; (136e0 <gsm_responseLine_is_StopSound_Received+0x28>)
   136c2:	687b      	ldr	r3, [r7, #4]
   136c4:	0011      	movs	r1, r2
   136c6:	0018      	movs	r0, r3
   136c8:	4b06      	ldr	r3, [pc, #24]	; (136e4 <gsm_responseLine_is_StopSound_Received+0x2c>)
   136ca:	4798      	blx	r3
   136cc:	1e03      	subs	r3, r0, #0
   136ce:	d001      	beq.n	136d4 <gsm_responseLine_is_StopSound_Received+0x1c>
	{
		return true;
   136d0:	2301      	movs	r3, #1
   136d2:	e000      	b.n	136d6 <gsm_responseLine_is_StopSound_Received+0x1e>
	}
	else
	{
		return false;
   136d4:	2300      	movs	r3, #0
	}
}
   136d6:	0018      	movs	r0, r3
   136d8:	46bd      	mov	sp, r7
   136da:	b002      	add	sp, #8
   136dc:	bd80      	pop	{r7, pc}
   136de:	46c0      	nop			; (mov r8, r8)
   136e0:	00029eec 	.word	0x00029eec
   136e4:	000291d3 	.word	0x000291d3

000136e8 <system_pinmux_get_group_from_gpio_pin>:
{
   136e8:	b580      	push	{r7, lr}
   136ea:	b084      	sub	sp, #16
   136ec:	af00      	add	r7, sp, #0
   136ee:	0002      	movs	r2, r0
   136f0:	1dfb      	adds	r3, r7, #7
   136f2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   136f4:	230f      	movs	r3, #15
   136f6:	18fb      	adds	r3, r7, r3
   136f8:	1dfa      	adds	r2, r7, #7
   136fa:	7812      	ldrb	r2, [r2, #0]
   136fc:	09d2      	lsrs	r2, r2, #7
   136fe:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   13700:	230e      	movs	r3, #14
   13702:	18fb      	adds	r3, r7, r3
   13704:	1dfa      	adds	r2, r7, #7
   13706:	7812      	ldrb	r2, [r2, #0]
   13708:	0952      	lsrs	r2, r2, #5
   1370a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1370c:	4b0d      	ldr	r3, [pc, #52]	; (13744 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1370e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   13710:	230f      	movs	r3, #15
   13712:	18fb      	adds	r3, r7, r3
   13714:	781b      	ldrb	r3, [r3, #0]
   13716:	2b00      	cmp	r3, #0
   13718:	d10f      	bne.n	1373a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1371a:	230f      	movs	r3, #15
   1371c:	18fb      	adds	r3, r7, r3
   1371e:	781b      	ldrb	r3, [r3, #0]
   13720:	009b      	lsls	r3, r3, #2
   13722:	2210      	movs	r2, #16
   13724:	4694      	mov	ip, r2
   13726:	44bc      	add	ip, r7
   13728:	4463      	add	r3, ip
   1372a:	3b08      	subs	r3, #8
   1372c:	681a      	ldr	r2, [r3, #0]
   1372e:	230e      	movs	r3, #14
   13730:	18fb      	adds	r3, r7, r3
   13732:	781b      	ldrb	r3, [r3, #0]
   13734:	01db      	lsls	r3, r3, #7
   13736:	18d3      	adds	r3, r2, r3
   13738:	e000      	b.n	1373c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1373a:	2300      	movs	r3, #0
}
   1373c:	0018      	movs	r0, r3
   1373e:	46bd      	mov	sp, r7
   13740:	b004      	add	sp, #16
   13742:	bd80      	pop	{r7, pc}
   13744:	41004400 	.word	0x41004400

00013748 <port_get_group_from_gpio_pin>:
{
   13748:	b580      	push	{r7, lr}
   1374a:	b082      	sub	sp, #8
   1374c:	af00      	add	r7, sp, #0
   1374e:	0002      	movs	r2, r0
   13750:	1dfb      	adds	r3, r7, #7
   13752:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   13754:	1dfb      	adds	r3, r7, #7
   13756:	781b      	ldrb	r3, [r3, #0]
   13758:	0018      	movs	r0, r3
   1375a:	4b03      	ldr	r3, [pc, #12]	; (13768 <port_get_group_from_gpio_pin+0x20>)
   1375c:	4798      	blx	r3
   1375e:	0003      	movs	r3, r0
}
   13760:	0018      	movs	r0, r3
   13762:	46bd      	mov	sp, r7
   13764:	b002      	add	sp, #8
   13766:	bd80      	pop	{r7, pc}
   13768:	000136e9 	.word	0x000136e9

0001376c <port_get_config_defaults>:
{
   1376c:	b580      	push	{r7, lr}
   1376e:	b082      	sub	sp, #8
   13770:	af00      	add	r7, sp, #0
   13772:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   13774:	687b      	ldr	r3, [r7, #4]
   13776:	2200      	movs	r2, #0
   13778:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1377a:	687b      	ldr	r3, [r7, #4]
   1377c:	2201      	movs	r2, #1
   1377e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   13780:	687b      	ldr	r3, [r7, #4]
   13782:	2200      	movs	r2, #0
   13784:	709a      	strb	r2, [r3, #2]
}
   13786:	46c0      	nop			; (mov r8, r8)
   13788:	46bd      	mov	sp, r7
   1378a:	b002      	add	sp, #8
   1378c:	bd80      	pop	{r7, pc}
	...

00013790 <port_pin_set_output_level>:
{
   13790:	b580      	push	{r7, lr}
   13792:	b084      	sub	sp, #16
   13794:	af00      	add	r7, sp, #0
   13796:	0002      	movs	r2, r0
   13798:	1dfb      	adds	r3, r7, #7
   1379a:	701a      	strb	r2, [r3, #0]
   1379c:	1dbb      	adds	r3, r7, #6
   1379e:	1c0a      	adds	r2, r1, #0
   137a0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   137a2:	1dfb      	adds	r3, r7, #7
   137a4:	781b      	ldrb	r3, [r3, #0]
   137a6:	0018      	movs	r0, r3
   137a8:	4b0d      	ldr	r3, [pc, #52]	; (137e0 <port_pin_set_output_level+0x50>)
   137aa:	4798      	blx	r3
   137ac:	0003      	movs	r3, r0
   137ae:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   137b0:	1dfb      	adds	r3, r7, #7
   137b2:	781b      	ldrb	r3, [r3, #0]
   137b4:	221f      	movs	r2, #31
   137b6:	4013      	ands	r3, r2
   137b8:	2201      	movs	r2, #1
   137ba:	409a      	lsls	r2, r3
   137bc:	0013      	movs	r3, r2
   137be:	60bb      	str	r3, [r7, #8]
	if (level) {
   137c0:	1dbb      	adds	r3, r7, #6
   137c2:	781b      	ldrb	r3, [r3, #0]
   137c4:	2b00      	cmp	r3, #0
   137c6:	d003      	beq.n	137d0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   137c8:	68fb      	ldr	r3, [r7, #12]
   137ca:	68ba      	ldr	r2, [r7, #8]
   137cc:	619a      	str	r2, [r3, #24]
}
   137ce:	e002      	b.n	137d6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   137d0:	68fb      	ldr	r3, [r7, #12]
   137d2:	68ba      	ldr	r2, [r7, #8]
   137d4:	615a      	str	r2, [r3, #20]
}
   137d6:	46c0      	nop			; (mov r8, r8)
   137d8:	46bd      	mov	sp, r7
   137da:	b004      	add	sp, #16
   137dc:	bd80      	pop	{r7, pc}
   137de:	46c0      	nop			; (mov r8, r8)
   137e0:	00013749 	.word	0x00013749

000137e4 <LCD_init>:
#include <asf.h>
#include "lcd_driver.h"


void LCD_init()
{
   137e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   137e6:	b08b      	sub	sp, #44	; 0x2c
   137e8:	af00      	add	r7, sp, #0
	uint8_t cols = LCD_COLS;
   137ea:	230b      	movs	r3, #11
   137ec:	2218      	movs	r2, #24
   137ee:	4694      	mov	ip, r2
   137f0:	44bc      	add	ip, r7
   137f2:	4463      	add	r3, ip
   137f4:	2210      	movs	r2, #16
   137f6:	701a      	strb	r2, [r3, #0]
	uint8_t lines = LCD_ROWS;
   137f8:	230a      	movs	r3, #10
   137fa:	2218      	movs	r2, #24
   137fc:	4694      	mov	ip, r2
   137fe:	44bc      	add	ip, r7
   13800:	4463      	add	r3, ip
   13802:	2202      	movs	r2, #2
   13804:	701a      	strb	r2, [r3, #0]
	delay_init();
   13806:	4b90      	ldr	r3, [pc, #576]	; (13a48 <LCD_init+0x264>)
   13808:	4798      	blx	r3
	_rs_pin     = LCD_RS_PIN;
   1380a:	4b90      	ldr	r3, [pc, #576]	; (13a4c <LCD_init+0x268>)
   1380c:	223f      	movs	r2, #63	; 0x3f
   1380e:	701a      	strb	r2, [r3, #0]
	_enable_pin = LCD_EN_PIN;
   13810:	4b8f      	ldr	r3, [pc, #572]	; (13a50 <LCD_init+0x26c>)
   13812:	223e      	movs	r2, #62	; 0x3e
   13814:	701a      	strb	r2, [r3, #0]
	
	_data_pins[0] = LCD_DATA_LINE_D4_PIN;
   13816:	4b8f      	ldr	r3, [pc, #572]	; (13a54 <LCD_init+0x270>)
   13818:	2221      	movs	r2, #33	; 0x21
   1381a:	701a      	strb	r2, [r3, #0]
	_data_pins[1] = LCD_DATA_LINE_D5_PIN;
   1381c:	4b8d      	ldr	r3, [pc, #564]	; (13a54 <LCD_init+0x270>)
   1381e:	2220      	movs	r2, #32
   13820:	705a      	strb	r2, [r3, #1]
	_data_pins[2] = LCD_DATA_LINE_D6_PIN;
   13822:	4b8c      	ldr	r3, [pc, #560]	; (13a54 <LCD_init+0x270>)
   13824:	2223      	movs	r2, #35	; 0x23
   13826:	709a      	strb	r2, [r3, #2]
	_data_pins[3] = LCD_DATA_LINE_D7_PIN;
   13828:	4b8a      	ldr	r3, [pc, #552]	; (13a54 <LCD_init+0x270>)
   1382a:	2222      	movs	r2, #34	; 0x22
   1382c:	70da      	strb	r2, [r3, #3]

	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
   1382e:	4b8a      	ldr	r3, [pc, #552]	; (13a58 <LCD_init+0x274>)
   13830:	2200      	movs	r2, #0
   13832:	701a      	strb	r2, [r3, #0]
	
	if (lines > 1)
   13834:	230a      	movs	r3, #10
   13836:	2218      	movs	r2, #24
   13838:	4694      	mov	ip, r2
   1383a:	44bc      	add	ip, r7
   1383c:	4463      	add	r3, ip
   1383e:	781b      	ldrb	r3, [r3, #0]
   13840:	2b01      	cmp	r3, #1
   13842:	d906      	bls.n	13852 <LCD_init+0x6e>
	{
		_displayfunction |= LCD_2LINE;
   13844:	4b84      	ldr	r3, [pc, #528]	; (13a58 <LCD_init+0x274>)
   13846:	781b      	ldrb	r3, [r3, #0]
   13848:	2208      	movs	r2, #8
   1384a:	4313      	orrs	r3, r2
   1384c:	b2da      	uxtb	r2, r3
   1384e:	4b82      	ldr	r3, [pc, #520]	; (13a58 <LCD_init+0x274>)
   13850:	701a      	strb	r2, [r3, #0]
	}
	_numlines = lines;
   13852:	4b82      	ldr	r3, [pc, #520]	; (13a5c <LCD_init+0x278>)
   13854:	220a      	movs	r2, #10
   13856:	2118      	movs	r1, #24
   13858:	468c      	mov	ip, r1
   1385a:	44bc      	add	ip, r7
   1385c:	4462      	add	r2, ip
   1385e:	7812      	ldrb	r2, [r2, #0]
   13860:	701a      	strb	r2, [r3, #0]
	LCD_setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
   13862:	230b      	movs	r3, #11
   13864:	2218      	movs	r2, #24
   13866:	4694      	mov	ip, r2
   13868:	44bc      	add	ip, r7
   1386a:	4463      	add	r3, ip
   1386c:	781a      	ldrb	r2, [r3, #0]
   1386e:	230b      	movs	r3, #11
   13870:	2118      	movs	r1, #24
   13872:	468c      	mov	ip, r1
   13874:	44bc      	add	ip, r7
   13876:	4463      	add	r3, ip
   13878:	781b      	ldrb	r3, [r3, #0]
   1387a:	3340      	adds	r3, #64	; 0x40
   1387c:	2140      	movs	r1, #64	; 0x40
   1387e:	2000      	movs	r0, #0
   13880:	4c77      	ldr	r4, [pc, #476]	; (13a60 <LCD_init+0x27c>)
   13882:	47a0      	blx	r4
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
   13884:	231c      	movs	r3, #28
   13886:	18fb      	adds	r3, r7, r3
   13888:	0018      	movs	r0, r3
   1388a:	4b76      	ldr	r3, [pc, #472]	; (13a64 <LCD_init+0x280>)
   1388c:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   1388e:	231c      	movs	r3, #28
   13890:	18fb      	adds	r3, r7, r3
   13892:	2201      	movs	r2, #1
   13894:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(_rs_pin,&config_port_pin);
   13896:	4b6d      	ldr	r3, [pc, #436]	; (13a4c <LCD_init+0x268>)
   13898:	781b      	ldrb	r3, [r3, #0]
   1389a:	221c      	movs	r2, #28
   1389c:	18ba      	adds	r2, r7, r2
   1389e:	0011      	movs	r1, r2
   138a0:	0018      	movs	r0, r3
   138a2:	4b71      	ldr	r3, [pc, #452]	; (13a68 <LCD_init+0x284>)
   138a4:	4798      	blx	r3
	port_pin_set_config(_enable_pin,&config_port_pin);
   138a6:	4b6a      	ldr	r3, [pc, #424]	; (13a50 <LCD_init+0x26c>)
   138a8:	781b      	ldrb	r3, [r3, #0]
   138aa:	221c      	movs	r2, #28
   138ac:	18ba      	adds	r2, r7, r2
   138ae:	0011      	movs	r1, r2
   138b0:	0018      	movs	r0, r3
   138b2:	4b6d      	ldr	r3, [pc, #436]	; (13a68 <LCD_init+0x284>)
   138b4:	4798      	blx	r3
	//port_pin_set_config(LCD_BACKLIGHT,&config_port_pin);
	
	for (int i=0; i<4; ++i)
   138b6:	2300      	movs	r3, #0
   138b8:	627b      	str	r3, [r7, #36]	; 0x24
   138ba:	e00c      	b.n	138d6 <LCD_init+0xf2>
	{
		port_pin_set_config(_data_pins[i],&config_port_pin);
   138bc:	4a65      	ldr	r2, [pc, #404]	; (13a54 <LCD_init+0x270>)
   138be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   138c0:	18d3      	adds	r3, r2, r3
   138c2:	781b      	ldrb	r3, [r3, #0]
   138c4:	221c      	movs	r2, #28
   138c6:	18ba      	adds	r2, r7, r2
   138c8:	0011      	movs	r1, r2
   138ca:	0018      	movs	r0, r3
   138cc:	4b66      	ldr	r3, [pc, #408]	; (13a68 <LCD_init+0x284>)
   138ce:	4798      	blx	r3
	for (int i=0; i<4; ++i)
   138d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   138d2:	3301      	adds	r3, #1
   138d4:	627b      	str	r3, [r7, #36]	; 0x24
   138d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   138d8:	2b03      	cmp	r3, #3
   138da:	ddef      	ble.n	138bc <LCD_init+0xd8>
	}
	delay_us(50000);
   138dc:	2000      	movs	r0, #0
   138de:	4b63      	ldr	r3, [pc, #396]	; (13a6c <LCD_init+0x288>)
   138e0:	4798      	blx	r3
   138e2:	0003      	movs	r3, r0
   138e4:	613b      	str	r3, [r7, #16]
   138e6:	2300      	movs	r3, #0
   138e8:	617b      	str	r3, [r7, #20]
   138ea:	4c61      	ldr	r4, [pc, #388]	; (13a70 <LCD_init+0x28c>)
   138ec:	4a61      	ldr	r2, [pc, #388]	; (13a74 <LCD_init+0x290>)
   138ee:	2300      	movs	r3, #0
   138f0:	6938      	ldr	r0, [r7, #16]
   138f2:	6979      	ldr	r1, [r7, #20]
   138f4:	47a0      	blx	r4
   138f6:	0003      	movs	r3, r0
   138f8:	000c      	movs	r4, r1
   138fa:	0019      	movs	r1, r3
   138fc:	0022      	movs	r2, r4
   138fe:	4b5e      	ldr	r3, [pc, #376]	; (13a78 <LCD_init+0x294>)
   13900:	2400      	movs	r4, #0
   13902:	18c9      	adds	r1, r1, r3
   13904:	4162      	adcs	r2, r4
   13906:	0008      	movs	r0, r1
   13908:	0011      	movs	r1, r2
   1390a:	4c5c      	ldr	r4, [pc, #368]	; (13a7c <LCD_init+0x298>)
   1390c:	4a5c      	ldr	r2, [pc, #368]	; (13a80 <LCD_init+0x29c>)
   1390e:	2300      	movs	r3, #0
   13910:	47a0      	blx	r4
   13912:	0003      	movs	r3, r0
   13914:	000c      	movs	r4, r1
   13916:	0018      	movs	r0, r3
   13918:	4b5a      	ldr	r3, [pc, #360]	; (13a84 <LCD_init+0x2a0>)
   1391a:	4798      	blx	r3
	port_pin_set_output_level(_rs_pin,LOW);
   1391c:	4b4b      	ldr	r3, [pc, #300]	; (13a4c <LCD_init+0x268>)
   1391e:	781b      	ldrb	r3, [r3, #0]
   13920:	2100      	movs	r1, #0
   13922:	0018      	movs	r0, r3
   13924:	4b58      	ldr	r3, [pc, #352]	; (13a88 <LCD_init+0x2a4>)
   13926:	4798      	blx	r3
	port_pin_set_output_level(_enable_pin,LOW);
   13928:	4b49      	ldr	r3, [pc, #292]	; (13a50 <LCD_init+0x26c>)
   1392a:	781b      	ldrb	r3, [r3, #0]
   1392c:	2100      	movs	r1, #0
   1392e:	0018      	movs	r0, r3
   13930:	4b55      	ldr	r3, [pc, #340]	; (13a88 <LCD_init+0x2a4>)
   13932:	4798      	blx	r3
	//port_pin_set_output_level(LCD_BACKLIGHT,LOW);
	
	 write4bits(0x03);
   13934:	2003      	movs	r0, #3
   13936:	4b55      	ldr	r3, [pc, #340]	; (13a8c <LCD_init+0x2a8>)
   13938:	4798      	blx	r3
	 delay_us(4500); 
   1393a:	2000      	movs	r0, #0
   1393c:	4b4b      	ldr	r3, [pc, #300]	; (13a6c <LCD_init+0x288>)
   1393e:	4798      	blx	r3
   13940:	0003      	movs	r3, r0
   13942:	60bb      	str	r3, [r7, #8]
   13944:	2300      	movs	r3, #0
   13946:	60fb      	str	r3, [r7, #12]
   13948:	4c49      	ldr	r4, [pc, #292]	; (13a70 <LCD_init+0x28c>)
   1394a:	4a51      	ldr	r2, [pc, #324]	; (13a90 <LCD_init+0x2ac>)
   1394c:	2300      	movs	r3, #0
   1394e:	68b8      	ldr	r0, [r7, #8]
   13950:	68f9      	ldr	r1, [r7, #12]
   13952:	47a0      	blx	r4
   13954:	0003      	movs	r3, r0
   13956:	000c      	movs	r4, r1
   13958:	0019      	movs	r1, r3
   1395a:	0022      	movs	r2, r4
   1395c:	4b46      	ldr	r3, [pc, #280]	; (13a78 <LCD_init+0x294>)
   1395e:	2400      	movs	r4, #0
   13960:	18c9      	adds	r1, r1, r3
   13962:	4162      	adcs	r2, r4
   13964:	0008      	movs	r0, r1
   13966:	0011      	movs	r1, r2
   13968:	4c44      	ldr	r4, [pc, #272]	; (13a7c <LCD_init+0x298>)
   1396a:	4a45      	ldr	r2, [pc, #276]	; (13a80 <LCD_init+0x29c>)
   1396c:	2300      	movs	r3, #0
   1396e:	47a0      	blx	r4
   13970:	0003      	movs	r3, r0
   13972:	000c      	movs	r4, r1
   13974:	0018      	movs	r0, r3
   13976:	4b43      	ldr	r3, [pc, #268]	; (13a84 <LCD_init+0x2a0>)
   13978:	4798      	blx	r3
	 
	 write4bits(0x03);
   1397a:	2003      	movs	r0, #3
   1397c:	4b43      	ldr	r3, [pc, #268]	; (13a8c <LCD_init+0x2a8>)
   1397e:	4798      	blx	r3
	 delay_us(4500); 
   13980:	2000      	movs	r0, #0
   13982:	4b3a      	ldr	r3, [pc, #232]	; (13a6c <LCD_init+0x288>)
   13984:	4798      	blx	r3
   13986:	0003      	movs	r3, r0
   13988:	603b      	str	r3, [r7, #0]
   1398a:	2300      	movs	r3, #0
   1398c:	607b      	str	r3, [r7, #4]
   1398e:	4c38      	ldr	r4, [pc, #224]	; (13a70 <LCD_init+0x28c>)
   13990:	4a3f      	ldr	r2, [pc, #252]	; (13a90 <LCD_init+0x2ac>)
   13992:	2300      	movs	r3, #0
   13994:	6838      	ldr	r0, [r7, #0]
   13996:	6879      	ldr	r1, [r7, #4]
   13998:	47a0      	blx	r4
   1399a:	0003      	movs	r3, r0
   1399c:	000c      	movs	r4, r1
   1399e:	0019      	movs	r1, r3
   139a0:	0022      	movs	r2, r4
   139a2:	4b35      	ldr	r3, [pc, #212]	; (13a78 <LCD_init+0x294>)
   139a4:	2400      	movs	r4, #0
   139a6:	18c9      	adds	r1, r1, r3
   139a8:	4162      	adcs	r2, r4
   139aa:	0008      	movs	r0, r1
   139ac:	0011      	movs	r1, r2
   139ae:	4c33      	ldr	r4, [pc, #204]	; (13a7c <LCD_init+0x298>)
   139b0:	4a33      	ldr	r2, [pc, #204]	; (13a80 <LCD_init+0x29c>)
   139b2:	2300      	movs	r3, #0
   139b4:	47a0      	blx	r4
   139b6:	0003      	movs	r3, r0
   139b8:	000c      	movs	r4, r1
   139ba:	0018      	movs	r0, r3
   139bc:	4b31      	ldr	r3, [pc, #196]	; (13a84 <LCD_init+0x2a0>)
   139be:	4798      	blx	r3
	
	 write4bits(0x03);
   139c0:	2003      	movs	r0, #3
   139c2:	4b32      	ldr	r3, [pc, #200]	; (13a8c <LCD_init+0x2a8>)
   139c4:	4798      	blx	r3
	 delay_us(150);
   139c6:	2000      	movs	r0, #0
   139c8:	4b28      	ldr	r3, [pc, #160]	; (13a6c <LCD_init+0x288>)
   139ca:	4798      	blx	r3
   139cc:	0003      	movs	r3, r0
   139ce:	001d      	movs	r5, r3
   139d0:	2300      	movs	r3, #0
   139d2:	001e      	movs	r6, r3
   139d4:	4c26      	ldr	r4, [pc, #152]	; (13a70 <LCD_init+0x28c>)
   139d6:	2296      	movs	r2, #150	; 0x96
   139d8:	2300      	movs	r3, #0
   139da:	0028      	movs	r0, r5
   139dc:	0031      	movs	r1, r6
   139de:	47a0      	blx	r4
   139e0:	0003      	movs	r3, r0
   139e2:	000c      	movs	r4, r1
   139e4:	0019      	movs	r1, r3
   139e6:	0022      	movs	r2, r4
   139e8:	4b23      	ldr	r3, [pc, #140]	; (13a78 <LCD_init+0x294>)
   139ea:	2400      	movs	r4, #0
   139ec:	18c9      	adds	r1, r1, r3
   139ee:	4162      	adcs	r2, r4
   139f0:	0008      	movs	r0, r1
   139f2:	0011      	movs	r1, r2
   139f4:	4c21      	ldr	r4, [pc, #132]	; (13a7c <LCD_init+0x298>)
   139f6:	4a22      	ldr	r2, [pc, #136]	; (13a80 <LCD_init+0x29c>)
   139f8:	2300      	movs	r3, #0
   139fa:	47a0      	blx	r4
   139fc:	0003      	movs	r3, r0
   139fe:	000c      	movs	r4, r1
   13a00:	0018      	movs	r0, r3
   13a02:	4b20      	ldr	r3, [pc, #128]	; (13a84 <LCD_init+0x2a0>)
   13a04:	4798      	blx	r3

	 write4bits(0x02);
   13a06:	2002      	movs	r0, #2
   13a08:	4b20      	ldr	r3, [pc, #128]	; (13a8c <LCD_init+0x2a8>)
   13a0a:	4798      	blx	r3

	 command(LCD_FUNCTIONSET | _displayfunction);
   13a0c:	4b12      	ldr	r3, [pc, #72]	; (13a58 <LCD_init+0x274>)
   13a0e:	781b      	ldrb	r3, [r3, #0]
   13a10:	2220      	movs	r2, #32
   13a12:	4313      	orrs	r3, r2
   13a14:	b2db      	uxtb	r3, r3
   13a16:	0018      	movs	r0, r3
   13a18:	4b1e      	ldr	r3, [pc, #120]	; (13a94 <LCD_init+0x2b0>)
   13a1a:	4798      	blx	r3
	 
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
   13a1c:	4b1e      	ldr	r3, [pc, #120]	; (13a98 <LCD_init+0x2b4>)
   13a1e:	2204      	movs	r2, #4
   13a20:	701a      	strb	r2, [r3, #0]
	LCD_display();
   13a22:	4b1e      	ldr	r3, [pc, #120]	; (13a9c <LCD_init+0x2b8>)
   13a24:	4798      	blx	r3
	LCD_clear();
   13a26:	4b1e      	ldr	r3, [pc, #120]	; (13aa0 <LCD_init+0x2bc>)
   13a28:	4798      	blx	r3
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
   13a2a:	4b1e      	ldr	r3, [pc, #120]	; (13aa4 <LCD_init+0x2c0>)
   13a2c:	2202      	movs	r2, #2
   13a2e:	701a      	strb	r2, [r3, #0]
	command(LCD_ENTRYMODESET | _displaymode);
   13a30:	4b1c      	ldr	r3, [pc, #112]	; (13aa4 <LCD_init+0x2c0>)
   13a32:	781b      	ldrb	r3, [r3, #0]
   13a34:	2204      	movs	r2, #4
   13a36:	4313      	orrs	r3, r2
   13a38:	b2db      	uxtb	r3, r3
   13a3a:	0018      	movs	r0, r3
   13a3c:	4b15      	ldr	r3, [pc, #84]	; (13a94 <LCD_init+0x2b0>)
   13a3e:	4798      	blx	r3
}
   13a40:	46c0      	nop			; (mov r8, r8)
   13a42:	46bd      	mov	sp, r7
   13a44:	b00b      	add	sp, #44	; 0x2c
   13a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13a48:	00022a1d 	.word	0x00022a1d
   13a4c:	200006d3 	.word	0x200006d3
   13a50:	200006d2 	.word	0x200006d2
   13a54:	200006cc 	.word	0x200006cc
   13a58:	200006d1 	.word	0x200006d1
   13a5c:	200006ca 	.word	0x200006ca
   13a60:	00013b55 	.word	0x00013b55
   13a64:	0001376d 	.word	0x0001376d
   13a68:	00023071 	.word	0x00023071
   13a6c:	000249dd 	.word	0x000249dd
   13a70:	000269a5 	.word	0x000269a5
   13a74:	0000c350 	.word	0x0000c350
   13a78:	006acfbf 	.word	0x006acfbf
   13a7c:	00026965 	.word	0x00026965
   13a80:	006acfc0 	.word	0x006acfc0
   13a84:	20000001 	.word	0x20000001
   13a88:	00013791 	.word	0x00013791
   13a8c:	00013b91 	.word	0x00013b91
   13a90:	00001194 	.word	0x00001194
   13a94:	00013cd5 	.word	0x00013cd5
   13a98:	200006c9 	.word	0x200006c9
   13a9c:	00013ebd 	.word	0x00013ebd
   13aa0:	00013d75 	.word	0x00013d75
   13aa4:	200006d0 	.word	0x200006d0

00013aa8 <LCD_PWR_CONFIG>:

void LCD_PWR_CONFIG()
{
   13aa8:	b580      	push	{r7, lr}
   13aaa:	b082      	sub	sp, #8
   13aac:	af00      	add	r7, sp, #0
	struct port_config pin_conf_gsm_status;
	port_get_config_defaults(&pin_conf_gsm_status);
   13aae:	1d3b      	adds	r3, r7, #4
   13ab0:	0018      	movs	r0, r3
   13ab2:	4b08      	ldr	r3, [pc, #32]	; (13ad4 <LCD_PWR_CONFIG+0x2c>)
   13ab4:	4798      	blx	r3
	pin_conf_gsm_status.direction  = PORT_PIN_DIR_OUTPUT;
   13ab6:	1d3b      	adds	r3, r7, #4
   13ab8:	2201      	movs	r2, #1
   13aba:	701a      	strb	r2, [r3, #0]
	pin_conf_gsm_status.input_pull = PORT_PIN_PULL_NONE;
   13abc:	1d3b      	adds	r3, r7, #4
   13abe:	2200      	movs	r2, #0
   13ac0:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(LCD_PWR_CNTRL, &pin_conf_gsm_status);
   13ac2:	1d3b      	adds	r3, r7, #4
   13ac4:	0019      	movs	r1, r3
   13ac6:	2024      	movs	r0, #36	; 0x24
   13ac8:	4b03      	ldr	r3, [pc, #12]	; (13ad8 <LCD_PWR_CONFIG+0x30>)
   13aca:	4798      	blx	r3
}
   13acc:	46c0      	nop			; (mov r8, r8)
   13ace:	46bd      	mov	sp, r7
   13ad0:	b002      	add	sp, #8
   13ad2:	bd80      	pop	{r7, pc}
   13ad4:	0001376d 	.word	0x0001376d
   13ad8:	00023071 	.word	0x00023071

00013adc <LCD_PWR_EN>:

void LCD_PWR_EN()
{
   13adc:	b580      	push	{r7, lr}
   13ade:	af00      	add	r7, sp, #0
	port_pin_set_output_level(LCD_PWR_CNTRL,HIGH);
   13ae0:	2101      	movs	r1, #1
   13ae2:	2024      	movs	r0, #36	; 0x24
   13ae4:	4b02      	ldr	r3, [pc, #8]	; (13af0 <LCD_PWR_EN+0x14>)
   13ae6:	4798      	blx	r3
}
   13ae8:	46c0      	nop			; (mov r8, r8)
   13aea:	46bd      	mov	sp, r7
   13aec:	bd80      	pop	{r7, pc}
   13aee:	46c0      	nop			; (mov r8, r8)
   13af0:	00013791 	.word	0x00013791

00013af4 <LCD_PWR_DIS>:
void LCD_PWR_DIS()
{
   13af4:	b580      	push	{r7, lr}
   13af6:	b082      	sub	sp, #8
   13af8:	af00      	add	r7, sp, #0
	port_pin_set_output_level(LCD_PWR_CNTRL,LOW);
   13afa:	2100      	movs	r1, #0
   13afc:	2024      	movs	r0, #36	; 0x24
   13afe:	4b11      	ldr	r3, [pc, #68]	; (13b44 <LCD_PWR_DIS+0x50>)
   13b00:	4798      	blx	r3
	
	for (int i = 0; i < 4; i++)
   13b02:	2300      	movs	r3, #0
   13b04:	607b      	str	r3, [r7, #4]
   13b06:	e00a      	b.n	13b1e <LCD_PWR_DIS+0x2a>
	{
		port_pin_set_output_level(_data_pins[i],LOW);
   13b08:	4a0f      	ldr	r2, [pc, #60]	; (13b48 <LCD_PWR_DIS+0x54>)
   13b0a:	687b      	ldr	r3, [r7, #4]
   13b0c:	18d3      	adds	r3, r2, r3
   13b0e:	781b      	ldrb	r3, [r3, #0]
   13b10:	2100      	movs	r1, #0
   13b12:	0018      	movs	r0, r3
   13b14:	4b0b      	ldr	r3, [pc, #44]	; (13b44 <LCD_PWR_DIS+0x50>)
   13b16:	4798      	blx	r3
	for (int i = 0; i < 4; i++)
   13b18:	687b      	ldr	r3, [r7, #4]
   13b1a:	3301      	adds	r3, #1
   13b1c:	607b      	str	r3, [r7, #4]
   13b1e:	687b      	ldr	r3, [r7, #4]
   13b20:	2b03      	cmp	r3, #3
   13b22:	ddf1      	ble.n	13b08 <LCD_PWR_DIS+0x14>
	}
	
	port_pin_set_output_level(_enable_pin, LOW);
   13b24:	4b09      	ldr	r3, [pc, #36]	; (13b4c <LCD_PWR_DIS+0x58>)
   13b26:	781b      	ldrb	r3, [r3, #0]
   13b28:	2100      	movs	r1, #0
   13b2a:	0018      	movs	r0, r3
   13b2c:	4b05      	ldr	r3, [pc, #20]	; (13b44 <LCD_PWR_DIS+0x50>)
   13b2e:	4798      	blx	r3
	
	port_pin_set_output_level(_rs_pin, LOW);
   13b30:	4b07      	ldr	r3, [pc, #28]	; (13b50 <LCD_PWR_DIS+0x5c>)
   13b32:	781b      	ldrb	r3, [r3, #0]
   13b34:	2100      	movs	r1, #0
   13b36:	0018      	movs	r0, r3
   13b38:	4b02      	ldr	r3, [pc, #8]	; (13b44 <LCD_PWR_DIS+0x50>)
   13b3a:	4798      	blx	r3
	
}
   13b3c:	46c0      	nop			; (mov r8, r8)
   13b3e:	46bd      	mov	sp, r7
   13b40:	b002      	add	sp, #8
   13b42:	bd80      	pop	{r7, pc}
   13b44:	00013791 	.word	0x00013791
   13b48:	200006cc 	.word	0x200006cc
   13b4c:	200006d2 	.word	0x200006d2
   13b50:	200006d3 	.word	0x200006d3

00013b54 <LCD_setRowOffsets>:

void LCD_setRowOffsets(int row0, int row1, int row2, int row3)
{
   13b54:	b580      	push	{r7, lr}
   13b56:	b084      	sub	sp, #16
   13b58:	af00      	add	r7, sp, #0
   13b5a:	60f8      	str	r0, [r7, #12]
   13b5c:	60b9      	str	r1, [r7, #8]
   13b5e:	607a      	str	r2, [r7, #4]
   13b60:	603b      	str	r3, [r7, #0]
	_row_offsets[0] = row0;
   13b62:	68fb      	ldr	r3, [r7, #12]
   13b64:	b2da      	uxtb	r2, r3
   13b66:	4b09      	ldr	r3, [pc, #36]	; (13b8c <LCD_setRowOffsets+0x38>)
   13b68:	701a      	strb	r2, [r3, #0]
	_row_offsets[1] = row1;
   13b6a:	68bb      	ldr	r3, [r7, #8]
   13b6c:	b2da      	uxtb	r2, r3
   13b6e:	4b07      	ldr	r3, [pc, #28]	; (13b8c <LCD_setRowOffsets+0x38>)
   13b70:	705a      	strb	r2, [r3, #1]
	_row_offsets[2] = row2;
   13b72:	687b      	ldr	r3, [r7, #4]
   13b74:	b2da      	uxtb	r2, r3
   13b76:	4b05      	ldr	r3, [pc, #20]	; (13b8c <LCD_setRowOffsets+0x38>)
   13b78:	709a      	strb	r2, [r3, #2]
	_row_offsets[3] = row3;
   13b7a:	683b      	ldr	r3, [r7, #0]
   13b7c:	b2da      	uxtb	r2, r3
   13b7e:	4b03      	ldr	r3, [pc, #12]	; (13b8c <LCD_setRowOffsets+0x38>)
   13b80:	70da      	strb	r2, [r3, #3]
}
   13b82:	46c0      	nop			; (mov r8, r8)
   13b84:	46bd      	mov	sp, r7
   13b86:	b004      	add	sp, #16
   13b88:	bd80      	pop	{r7, pc}
   13b8a:	46c0      	nop			; (mov r8, r8)
   13b8c:	200006c4 	.word	0x200006c4

00013b90 <write4bits>:

void write4bits(uint8_t value)
{
   13b90:	b580      	push	{r7, lr}
   13b92:	b084      	sub	sp, #16
   13b94:	af00      	add	r7, sp, #0
   13b96:	0002      	movs	r2, r0
   13b98:	1dfb      	adds	r3, r7, #7
   13b9a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++) 
   13b9c:	2300      	movs	r3, #0
   13b9e:	60fb      	str	r3, [r7, #12]
   13ba0:	e013      	b.n	13bca <write4bits+0x3a>
	{
		port_pin_set_output_level(_data_pins[i], (value >> i) & 0x01);
   13ba2:	4a0e      	ldr	r2, [pc, #56]	; (13bdc <write4bits+0x4c>)
   13ba4:	68fb      	ldr	r3, [r7, #12]
   13ba6:	18d3      	adds	r3, r2, r3
   13ba8:	7818      	ldrb	r0, [r3, #0]
   13baa:	1dfb      	adds	r3, r7, #7
   13bac:	781a      	ldrb	r2, [r3, #0]
   13bae:	68fb      	ldr	r3, [r7, #12]
   13bb0:	411a      	asrs	r2, r3
   13bb2:	0013      	movs	r3, r2
   13bb4:	2201      	movs	r2, #1
   13bb6:	4013      	ands	r3, r2
   13bb8:	1e5a      	subs	r2, r3, #1
   13bba:	4193      	sbcs	r3, r2
   13bbc:	b2db      	uxtb	r3, r3
   13bbe:	0019      	movs	r1, r3
   13bc0:	4b07      	ldr	r3, [pc, #28]	; (13be0 <write4bits+0x50>)
   13bc2:	4798      	blx	r3
	for (int i = 0; i < 4; i++) 
   13bc4:	68fb      	ldr	r3, [r7, #12]
   13bc6:	3301      	adds	r3, #1
   13bc8:	60fb      	str	r3, [r7, #12]
   13bca:	68fb      	ldr	r3, [r7, #12]
   13bcc:	2b03      	cmp	r3, #3
   13bce:	dde8      	ble.n	13ba2 <write4bits+0x12>
	}
	pulseEnable();
   13bd0:	4b04      	ldr	r3, [pc, #16]	; (13be4 <write4bits+0x54>)
   13bd2:	4798      	blx	r3
}
   13bd4:	46c0      	nop			; (mov r8, r8)
   13bd6:	46bd      	mov	sp, r7
   13bd8:	b004      	add	sp, #16
   13bda:	bd80      	pop	{r7, pc}
   13bdc:	200006cc 	.word	0x200006cc
   13be0:	00013791 	.word	0x00013791
   13be4:	00013be9 	.word	0x00013be9

00013be8 <pulseEnable>:



void pulseEnable(void)
{
   13be8:	b5f0      	push	{r4, r5, r6, r7, lr}
   13bea:	b085      	sub	sp, #20
   13bec:	af00      	add	r7, sp, #0
 	port_pin_set_output_level(_enable_pin, LOW);
   13bee:	4b31      	ldr	r3, [pc, #196]	; (13cb4 <pulseEnable+0xcc>)
   13bf0:	781b      	ldrb	r3, [r3, #0]
   13bf2:	2100      	movs	r1, #0
   13bf4:	0018      	movs	r0, r3
   13bf6:	4b30      	ldr	r3, [pc, #192]	; (13cb8 <pulseEnable+0xd0>)
   13bf8:	4798      	blx	r3
 	delay_us(1);
   13bfa:	2000      	movs	r0, #0
   13bfc:	4b2f      	ldr	r3, [pc, #188]	; (13cbc <pulseEnable+0xd4>)
   13bfe:	4798      	blx	r3
   13c00:	0003      	movs	r3, r0
   13c02:	60bb      	str	r3, [r7, #8]
   13c04:	2300      	movs	r3, #0
   13c06:	60fb      	str	r3, [r7, #12]
   13c08:	4b2d      	ldr	r3, [pc, #180]	; (13cc0 <pulseEnable+0xd8>)
   13c0a:	2400      	movs	r4, #0
   13c0c:	68b8      	ldr	r0, [r7, #8]
   13c0e:	68f9      	ldr	r1, [r7, #12]
   13c10:	18c0      	adds	r0, r0, r3
   13c12:	4161      	adcs	r1, r4
   13c14:	4c2b      	ldr	r4, [pc, #172]	; (13cc4 <pulseEnable+0xdc>)
   13c16:	4a2c      	ldr	r2, [pc, #176]	; (13cc8 <pulseEnable+0xe0>)
   13c18:	2300      	movs	r3, #0
   13c1a:	47a0      	blx	r4
   13c1c:	0003      	movs	r3, r0
   13c1e:	000c      	movs	r4, r1
   13c20:	0018      	movs	r0, r3
   13c22:	4b2a      	ldr	r3, [pc, #168]	; (13ccc <pulseEnable+0xe4>)
   13c24:	4798      	blx	r3
 	port_pin_set_output_level(_enable_pin, HIGH);
   13c26:	4b23      	ldr	r3, [pc, #140]	; (13cb4 <pulseEnable+0xcc>)
   13c28:	781b      	ldrb	r3, [r3, #0]
   13c2a:	2101      	movs	r1, #1
   13c2c:	0018      	movs	r0, r3
   13c2e:	4b22      	ldr	r3, [pc, #136]	; (13cb8 <pulseEnable+0xd0>)
   13c30:	4798      	blx	r3
 	delay_us(1);
   13c32:	2000      	movs	r0, #0
   13c34:	4b21      	ldr	r3, [pc, #132]	; (13cbc <pulseEnable+0xd4>)
   13c36:	4798      	blx	r3
   13c38:	0003      	movs	r3, r0
   13c3a:	001d      	movs	r5, r3
   13c3c:	2300      	movs	r3, #0
   13c3e:	001e      	movs	r6, r3
   13c40:	4b1f      	ldr	r3, [pc, #124]	; (13cc0 <pulseEnable+0xd8>)
   13c42:	2400      	movs	r4, #0
   13c44:	0028      	movs	r0, r5
   13c46:	0031      	movs	r1, r6
   13c48:	18c0      	adds	r0, r0, r3
   13c4a:	4161      	adcs	r1, r4
   13c4c:	4c1d      	ldr	r4, [pc, #116]	; (13cc4 <pulseEnable+0xdc>)
   13c4e:	4a1e      	ldr	r2, [pc, #120]	; (13cc8 <pulseEnable+0xe0>)
   13c50:	2300      	movs	r3, #0
   13c52:	47a0      	blx	r4
   13c54:	0003      	movs	r3, r0
   13c56:	000c      	movs	r4, r1
   13c58:	0018      	movs	r0, r3
   13c5a:	4b1c      	ldr	r3, [pc, #112]	; (13ccc <pulseEnable+0xe4>)
   13c5c:	4798      	blx	r3
 	port_pin_set_output_level(_enable_pin, LOW);
   13c5e:	4b15      	ldr	r3, [pc, #84]	; (13cb4 <pulseEnable+0xcc>)
   13c60:	781b      	ldrb	r3, [r3, #0]
   13c62:	2100      	movs	r1, #0
   13c64:	0018      	movs	r0, r3
   13c66:	4b14      	ldr	r3, [pc, #80]	; (13cb8 <pulseEnable+0xd0>)
   13c68:	4798      	blx	r3
 	delay_us(100);
   13c6a:	2000      	movs	r0, #0
   13c6c:	4b13      	ldr	r3, [pc, #76]	; (13cbc <pulseEnable+0xd4>)
   13c6e:	4798      	blx	r3
   13c70:	0003      	movs	r3, r0
   13c72:	603b      	str	r3, [r7, #0]
   13c74:	2300      	movs	r3, #0
   13c76:	607b      	str	r3, [r7, #4]
   13c78:	4c15      	ldr	r4, [pc, #84]	; (13cd0 <pulseEnable+0xe8>)
   13c7a:	2264      	movs	r2, #100	; 0x64
   13c7c:	2300      	movs	r3, #0
   13c7e:	6838      	ldr	r0, [r7, #0]
   13c80:	6879      	ldr	r1, [r7, #4]
   13c82:	47a0      	blx	r4
   13c84:	0003      	movs	r3, r0
   13c86:	000c      	movs	r4, r1
   13c88:	0019      	movs	r1, r3
   13c8a:	0022      	movs	r2, r4
   13c8c:	4b0c      	ldr	r3, [pc, #48]	; (13cc0 <pulseEnable+0xd8>)
   13c8e:	2400      	movs	r4, #0
   13c90:	18c9      	adds	r1, r1, r3
   13c92:	4162      	adcs	r2, r4
   13c94:	0008      	movs	r0, r1
   13c96:	0011      	movs	r1, r2
   13c98:	4c0a      	ldr	r4, [pc, #40]	; (13cc4 <pulseEnable+0xdc>)
   13c9a:	4a0b      	ldr	r2, [pc, #44]	; (13cc8 <pulseEnable+0xe0>)
   13c9c:	2300      	movs	r3, #0
   13c9e:	47a0      	blx	r4
   13ca0:	0003      	movs	r3, r0
   13ca2:	000c      	movs	r4, r1
   13ca4:	0018      	movs	r0, r3
   13ca6:	4b09      	ldr	r3, [pc, #36]	; (13ccc <pulseEnable+0xe4>)
   13ca8:	4798      	blx	r3

	//port_pin_set_output_level(_enable_pin, HIGH);
	//delay_us(1);
	//port_pin_set_output_level(_enable_pin, LOW);
	//delay_us(500);
}
   13caa:	46c0      	nop			; (mov r8, r8)
   13cac:	46bd      	mov	sp, r7
   13cae:	b005      	add	sp, #20
   13cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13cb2:	46c0      	nop			; (mov r8, r8)
   13cb4:	200006d2 	.word	0x200006d2
   13cb8:	00013791 	.word	0x00013791
   13cbc:	000249dd 	.word	0x000249dd
   13cc0:	006acfbf 	.word	0x006acfbf
   13cc4:	00026965 	.word	0x00026965
   13cc8:	006acfc0 	.word	0x006acfc0
   13ccc:	20000001 	.word	0x20000001
   13cd0:	000269a5 	.word	0x000269a5

00013cd4 <command>:

inline void command(uint8_t value) 
{
   13cd4:	b580      	push	{r7, lr}
   13cd6:	b082      	sub	sp, #8
   13cd8:	af00      	add	r7, sp, #0
   13cda:	0002      	movs	r2, r0
   13cdc:	1dfb      	adds	r3, r7, #7
   13cde:	701a      	strb	r2, [r3, #0]
	send(value, LOW);
   13ce0:	1dfb      	adds	r3, r7, #7
   13ce2:	781b      	ldrb	r3, [r3, #0]
   13ce4:	2100      	movs	r1, #0
   13ce6:	0018      	movs	r0, r3
   13ce8:	4b02      	ldr	r3, [pc, #8]	; (13cf4 <command+0x20>)
   13cea:	4798      	blx	r3
}
   13cec:	46c0      	nop			; (mov r8, r8)
   13cee:	46bd      	mov	sp, r7
   13cf0:	b002      	add	sp, #8
   13cf2:	bd80      	pop	{r7, pc}
   13cf4:	00013d21 	.word	0x00013d21

00013cf8 <LCD_write>:

inline size_t LCD_write(uint8_t value)
{
   13cf8:	b580      	push	{r7, lr}
   13cfa:	b082      	sub	sp, #8
   13cfc:	af00      	add	r7, sp, #0
   13cfe:	0002      	movs	r2, r0
   13d00:	1dfb      	adds	r3, r7, #7
   13d02:	701a      	strb	r2, [r3, #0]
	send(value, HIGH);
   13d04:	1dfb      	adds	r3, r7, #7
   13d06:	781b      	ldrb	r3, [r3, #0]
   13d08:	2101      	movs	r1, #1
   13d0a:	0018      	movs	r0, r3
   13d0c:	4b03      	ldr	r3, [pc, #12]	; (13d1c <LCD_write+0x24>)
   13d0e:	4798      	blx	r3
	return 1;
   13d10:	2301      	movs	r3, #1
}
   13d12:	0018      	movs	r0, r3
   13d14:	46bd      	mov	sp, r7
   13d16:	b002      	add	sp, #8
   13d18:	bd80      	pop	{r7, pc}
   13d1a:	46c0      	nop			; (mov r8, r8)
   13d1c:	00013d21 	.word	0x00013d21

00013d20 <send>:

void send(uint8_t value, uint8_t mode) 
{
   13d20:	b580      	push	{r7, lr}
   13d22:	b082      	sub	sp, #8
   13d24:	af00      	add	r7, sp, #0
   13d26:	0002      	movs	r2, r0
   13d28:	1dfb      	adds	r3, r7, #7
   13d2a:	701a      	strb	r2, [r3, #0]
   13d2c:	1dbb      	adds	r3, r7, #6
   13d2e:	1c0a      	adds	r2, r1, #0
   13d30:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(_rs_pin, mode);
   13d32:	4b0d      	ldr	r3, [pc, #52]	; (13d68 <send+0x48>)
   13d34:	781a      	ldrb	r2, [r3, #0]
   13d36:	1dbb      	adds	r3, r7, #6
   13d38:	781b      	ldrb	r3, [r3, #0]
   13d3a:	1e59      	subs	r1, r3, #1
   13d3c:	418b      	sbcs	r3, r1
   13d3e:	b2db      	uxtb	r3, r3
   13d40:	0019      	movs	r1, r3
   13d42:	0010      	movs	r0, r2
   13d44:	4b09      	ldr	r3, [pc, #36]	; (13d6c <send+0x4c>)
   13d46:	4798      	blx	r3
	
	{
		write4bits(value>>4);
   13d48:	1dfb      	adds	r3, r7, #7
   13d4a:	781b      	ldrb	r3, [r3, #0]
   13d4c:	091b      	lsrs	r3, r3, #4
   13d4e:	b2db      	uxtb	r3, r3
   13d50:	0018      	movs	r0, r3
   13d52:	4b07      	ldr	r3, [pc, #28]	; (13d70 <send+0x50>)
   13d54:	4798      	blx	r3
		write4bits(value);
   13d56:	1dfb      	adds	r3, r7, #7
   13d58:	781b      	ldrb	r3, [r3, #0]
   13d5a:	0018      	movs	r0, r3
   13d5c:	4b04      	ldr	r3, [pc, #16]	; (13d70 <send+0x50>)
   13d5e:	4798      	blx	r3
	}
}
   13d60:	46c0      	nop			; (mov r8, r8)
   13d62:	46bd      	mov	sp, r7
   13d64:	b002      	add	sp, #8
   13d66:	bd80      	pop	{r7, pc}
   13d68:	200006d3 	.word	0x200006d3
   13d6c:	00013791 	.word	0x00013791
   13d70:	00013b91 	.word	0x00013b91

00013d74 <LCD_clear>:

void LCD_clear(void)
{
   13d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13d76:	af00      	add	r7, sp, #0
	command(LCD_CLEARDISPLAY);
   13d78:	2001      	movs	r0, #1
   13d7a:	4b13      	ldr	r3, [pc, #76]	; (13dc8 <LCD_clear+0x54>)
   13d7c:	4798      	blx	r3
	delay_us(2000);
   13d7e:	2000      	movs	r0, #0
   13d80:	4b12      	ldr	r3, [pc, #72]	; (13dcc <LCD_clear+0x58>)
   13d82:	4798      	blx	r3
   13d84:	0003      	movs	r3, r0
   13d86:	001d      	movs	r5, r3
   13d88:	2300      	movs	r3, #0
   13d8a:	001e      	movs	r6, r3
   13d8c:	4c10      	ldr	r4, [pc, #64]	; (13dd0 <LCD_clear+0x5c>)
   13d8e:	22fa      	movs	r2, #250	; 0xfa
   13d90:	00d2      	lsls	r2, r2, #3
   13d92:	2300      	movs	r3, #0
   13d94:	0028      	movs	r0, r5
   13d96:	0031      	movs	r1, r6
   13d98:	47a0      	blx	r4
   13d9a:	0003      	movs	r3, r0
   13d9c:	000c      	movs	r4, r1
   13d9e:	0019      	movs	r1, r3
   13da0:	0022      	movs	r2, r4
   13da2:	4b0c      	ldr	r3, [pc, #48]	; (13dd4 <LCD_clear+0x60>)
   13da4:	2400      	movs	r4, #0
   13da6:	18c9      	adds	r1, r1, r3
   13da8:	4162      	adcs	r2, r4
   13daa:	0008      	movs	r0, r1
   13dac:	0011      	movs	r1, r2
   13dae:	4c0a      	ldr	r4, [pc, #40]	; (13dd8 <LCD_clear+0x64>)
   13db0:	4a0a      	ldr	r2, [pc, #40]	; (13ddc <LCD_clear+0x68>)
   13db2:	2300      	movs	r3, #0
   13db4:	47a0      	blx	r4
   13db6:	0003      	movs	r3, r0
   13db8:	000c      	movs	r4, r1
   13dba:	0018      	movs	r0, r3
   13dbc:	4b08      	ldr	r3, [pc, #32]	; (13de0 <LCD_clear+0x6c>)
   13dbe:	4798      	blx	r3
}
   13dc0:	46c0      	nop			; (mov r8, r8)
   13dc2:	46bd      	mov	sp, r7
   13dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13dc6:	46c0      	nop			; (mov r8, r8)
   13dc8:	00013cd5 	.word	0x00013cd5
   13dcc:	000249dd 	.word	0x000249dd
   13dd0:	000269a5 	.word	0x000269a5
   13dd4:	006acfbf 	.word	0x006acfbf
   13dd8:	00026965 	.word	0x00026965
   13ddc:	006acfc0 	.word	0x006acfc0
   13de0:	20000001 	.word	0x20000001

00013de4 <LCD_Create_Custom_createChar>:


void LCD_Create_Custom_createChar(uint8_t location, uint8_t charmap[]) 
{
   13de4:	b580      	push	{r7, lr}
   13de6:	b084      	sub	sp, #16
   13de8:	af00      	add	r7, sp, #0
   13dea:	0002      	movs	r2, r0
   13dec:	6039      	str	r1, [r7, #0]
   13dee:	1dfb      	adds	r3, r7, #7
   13df0:	701a      	strb	r2, [r3, #0]
	location &= 0x7;
   13df2:	1dfb      	adds	r3, r7, #7
   13df4:	1dfa      	adds	r2, r7, #7
   13df6:	7812      	ldrb	r2, [r2, #0]
   13df8:	2107      	movs	r1, #7
   13dfa:	400a      	ands	r2, r1
   13dfc:	701a      	strb	r2, [r3, #0]
	command(LCD_SETCGRAMADDR | (location << 3));
   13dfe:	1dfb      	adds	r3, r7, #7
   13e00:	781b      	ldrb	r3, [r3, #0]
   13e02:	00db      	lsls	r3, r3, #3
   13e04:	b25b      	sxtb	r3, r3
   13e06:	2240      	movs	r2, #64	; 0x40
   13e08:	4313      	orrs	r3, r2
   13e0a:	b25b      	sxtb	r3, r3
   13e0c:	b2db      	uxtb	r3, r3
   13e0e:	0018      	movs	r0, r3
   13e10:	4b0a      	ldr	r3, [pc, #40]	; (13e3c <LCD_Create_Custom_createChar+0x58>)
   13e12:	4798      	blx	r3
	for (int i=0; i<8; i++)
   13e14:	2300      	movs	r3, #0
   13e16:	60fb      	str	r3, [r7, #12]
   13e18:	e009      	b.n	13e2e <LCD_Create_Custom_createChar+0x4a>
	{
		LCD_write(charmap[i]);
   13e1a:	68fb      	ldr	r3, [r7, #12]
   13e1c:	683a      	ldr	r2, [r7, #0]
   13e1e:	18d3      	adds	r3, r2, r3
   13e20:	781b      	ldrb	r3, [r3, #0]
   13e22:	0018      	movs	r0, r3
   13e24:	4b06      	ldr	r3, [pc, #24]	; (13e40 <LCD_Create_Custom_createChar+0x5c>)
   13e26:	4798      	blx	r3
	for (int i=0; i<8; i++)
   13e28:	68fb      	ldr	r3, [r7, #12]
   13e2a:	3301      	adds	r3, #1
   13e2c:	60fb      	str	r3, [r7, #12]
   13e2e:	68fb      	ldr	r3, [r7, #12]
   13e30:	2b07      	cmp	r3, #7
   13e32:	ddf2      	ble.n	13e1a <LCD_Create_Custom_createChar+0x36>
	}
}
   13e34:	46c0      	nop			; (mov r8, r8)
   13e36:	46bd      	mov	sp, r7
   13e38:	b004      	add	sp, #16
   13e3a:	bd80      	pop	{r7, pc}
   13e3c:	00013cd5 	.word	0x00013cd5
   13e40:	00013cf9 	.word	0x00013cf9

00013e44 <LCD_setCursor>:
	command(LCD_RETURNHOME);
	delay_us(2000);
}

void LCD_setCursor(uint8_t col, uint8_t row)
{
   13e44:	b580      	push	{r7, lr}
   13e46:	b084      	sub	sp, #16
   13e48:	af00      	add	r7, sp, #0
   13e4a:	0002      	movs	r2, r0
   13e4c:	1dfb      	adds	r3, r7, #7
   13e4e:	701a      	strb	r2, [r3, #0]
   13e50:	1dbb      	adds	r3, r7, #6
   13e52:	1c0a      	adds	r2, r1, #0
   13e54:	701a      	strb	r2, [r3, #0]
	const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
   13e56:	2304      	movs	r3, #4
   13e58:	60fb      	str	r3, [r7, #12]
	if ( row >= max_lines ) 
   13e5a:	1dbb      	adds	r3, r7, #6
   13e5c:	781a      	ldrb	r2, [r3, #0]
   13e5e:	68fb      	ldr	r3, [r7, #12]
   13e60:	429a      	cmp	r2, r3
   13e62:	d304      	bcc.n	13e6e <LCD_setCursor+0x2a>
	{
		row = max_lines - 1; 
   13e64:	68fb      	ldr	r3, [r7, #12]
   13e66:	b2da      	uxtb	r2, r3
   13e68:	1dbb      	adds	r3, r7, #6
   13e6a:	3a01      	subs	r2, #1
   13e6c:	701a      	strb	r2, [r3, #0]
	}
	if ( row >= _numlines )
   13e6e:	4b10      	ldr	r3, [pc, #64]	; (13eb0 <LCD_setCursor+0x6c>)
   13e70:	781b      	ldrb	r3, [r3, #0]
   13e72:	1dba      	adds	r2, r7, #6
   13e74:	7812      	ldrb	r2, [r2, #0]
   13e76:	429a      	cmp	r2, r3
   13e78:	d304      	bcc.n	13e84 <LCD_setCursor+0x40>
	{
		row = _numlines - 1;
   13e7a:	4b0d      	ldr	r3, [pc, #52]	; (13eb0 <LCD_setCursor+0x6c>)
   13e7c:	781a      	ldrb	r2, [r3, #0]
   13e7e:	1dbb      	adds	r3, r7, #6
   13e80:	3a01      	subs	r2, #1
   13e82:	701a      	strb	r2, [r3, #0]
	}
	command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
   13e84:	1dbb      	adds	r3, r7, #6
   13e86:	781b      	ldrb	r3, [r3, #0]
   13e88:	4a0a      	ldr	r2, [pc, #40]	; (13eb4 <LCD_setCursor+0x70>)
   13e8a:	5cd2      	ldrb	r2, [r2, r3]
   13e8c:	1dfb      	adds	r3, r7, #7
   13e8e:	781b      	ldrb	r3, [r3, #0]
   13e90:	18d3      	adds	r3, r2, r3
   13e92:	b2db      	uxtb	r3, r3
   13e94:	b25b      	sxtb	r3, r3
   13e96:	2280      	movs	r2, #128	; 0x80
   13e98:	4252      	negs	r2, r2
   13e9a:	4313      	orrs	r3, r2
   13e9c:	b25b      	sxtb	r3, r3
   13e9e:	b2db      	uxtb	r3, r3
   13ea0:	0018      	movs	r0, r3
   13ea2:	4b05      	ldr	r3, [pc, #20]	; (13eb8 <LCD_setCursor+0x74>)
   13ea4:	4798      	blx	r3
}
   13ea6:	46c0      	nop			; (mov r8, r8)
   13ea8:	46bd      	mov	sp, r7
   13eaa:	b004      	add	sp, #16
   13eac:	bd80      	pop	{r7, pc}
   13eae:	46c0      	nop			; (mov r8, r8)
   13eb0:	200006ca 	.word	0x200006ca
   13eb4:	200006c4 	.word	0x200006c4
   13eb8:	00013cd5 	.word	0x00013cd5

00013ebc <LCD_display>:
{
	_displaycontrol &= ~LCD_DISPLAYON;
	command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LCD_display(void) 
{
   13ebc:	b580      	push	{r7, lr}
   13ebe:	af00      	add	r7, sp, #0
	_displaycontrol |= LCD_DISPLAYON;
   13ec0:	4b08      	ldr	r3, [pc, #32]	; (13ee4 <LCD_display+0x28>)
   13ec2:	781b      	ldrb	r3, [r3, #0]
   13ec4:	2204      	movs	r2, #4
   13ec6:	4313      	orrs	r3, r2
   13ec8:	b2da      	uxtb	r2, r3
   13eca:	4b06      	ldr	r3, [pc, #24]	; (13ee4 <LCD_display+0x28>)
   13ecc:	701a      	strb	r2, [r3, #0]
	command(LCD_DISPLAYCONTROL | _displaycontrol);
   13ece:	4b05      	ldr	r3, [pc, #20]	; (13ee4 <LCD_display+0x28>)
   13ed0:	781b      	ldrb	r3, [r3, #0]
   13ed2:	2208      	movs	r2, #8
   13ed4:	4313      	orrs	r3, r2
   13ed6:	b2db      	uxtb	r3, r3
   13ed8:	0018      	movs	r0, r3
   13eda:	4b03      	ldr	r3, [pc, #12]	; (13ee8 <LCD_display+0x2c>)
   13edc:	4798      	blx	r3
}
   13ede:	46c0      	nop			; (mov r8, r8)
   13ee0:	46bd      	mov	sp, r7
   13ee2:	bd80      	pop	{r7, pc}
   13ee4:	200006c9 	.word	0x200006c9
   13ee8:	00013cd5 	.word	0x00013cd5

00013eec <Buffer_writer>:

//////////////////////////////////////////////////////////////////////////


size_t Buffer_writer(const char *buffer)
{
   13eec:	b580      	push	{r7, lr}
   13eee:	b084      	sub	sp, #16
   13ef0:	af00      	add	r7, sp, #0
   13ef2:	6078      	str	r0, [r7, #4]
	size_t size = strlen(buffer);
   13ef4:	687b      	ldr	r3, [r7, #4]
   13ef6:	0018      	movs	r0, r3
   13ef8:	4b0f      	ldr	r3, [pc, #60]	; (13f38 <Buffer_writer+0x4c>)
   13efa:	4798      	blx	r3
   13efc:	0003      	movs	r3, r0
   13efe:	60fb      	str	r3, [r7, #12]
	size_t n = 0;
   13f00:	2300      	movs	r3, #0
   13f02:	60bb      	str	r3, [r7, #8]
	while (size--) {
   13f04:	e00b      	b.n	13f1e <Buffer_writer+0x32>
		if (LCD_write(*buffer++)) n++;
   13f06:	687b      	ldr	r3, [r7, #4]
   13f08:	1c5a      	adds	r2, r3, #1
   13f0a:	607a      	str	r2, [r7, #4]
   13f0c:	781b      	ldrb	r3, [r3, #0]
   13f0e:	0018      	movs	r0, r3
   13f10:	4b0a      	ldr	r3, [pc, #40]	; (13f3c <Buffer_writer+0x50>)
   13f12:	4798      	blx	r3
   13f14:	1e03      	subs	r3, r0, #0
   13f16:	d008      	beq.n	13f2a <Buffer_writer+0x3e>
   13f18:	68bb      	ldr	r3, [r7, #8]
   13f1a:	3301      	adds	r3, #1
   13f1c:	60bb      	str	r3, [r7, #8]
	while (size--) {
   13f1e:	68fb      	ldr	r3, [r7, #12]
   13f20:	1e5a      	subs	r2, r3, #1
   13f22:	60fa      	str	r2, [r7, #12]
   13f24:	2b00      	cmp	r3, #0
   13f26:	d1ee      	bne.n	13f06 <Buffer_writer+0x1a>
   13f28:	e000      	b.n	13f2c <Buffer_writer+0x40>
		else break;
   13f2a:	46c0      	nop			; (mov r8, r8)
	}
	return n;
   13f2c:	68bb      	ldr	r3, [r7, #8]
}
   13f2e:	0018      	movs	r0, r3
   13f30:	46bd      	mov	sp, r7
   13f32:	b004      	add	sp, #16
   13f34:	bd80      	pop	{r7, pc}
   13f36:	46c0      	nop			; (mov r8, r8)
   13f38:	000291a3 	.word	0x000291a3
   13f3c:	00013cf9 	.word	0x00013cf9

00013f40 <lcd_printf>:
	return n;
}


void lcd_printf(const  char *fmt, ...)
{
   13f40:	b40f      	push	{r0, r1, r2, r3}
   13f42:	b580      	push	{r7, lr}
   13f44:	b084      	sub	sp, #16
   13f46:	af00      	add	r7, sp, #0
	int num_chars;
	char *lcd_buff;
	num_chars = strlen(fmt) + 3;
   13f48:	69bb      	ldr	r3, [r7, #24]
   13f4a:	0018      	movs	r0, r3
   13f4c:	4b11      	ldr	r3, [pc, #68]	; (13f94 <lcd_printf+0x54>)
   13f4e:	4798      	blx	r3
   13f50:	0003      	movs	r3, r0
   13f52:	3303      	adds	r3, #3
   13f54:	60fb      	str	r3, [r7, #12]
	lcd_buff = (char *)malloc(sizeof(char) * num_chars);
   13f56:	68fb      	ldr	r3, [r7, #12]
   13f58:	0018      	movs	r0, r3
   13f5a:	4b0f      	ldr	r3, [pc, #60]	; (13f98 <lcd_printf+0x58>)
   13f5c:	4798      	blx	r3
   13f5e:	0003      	movs	r3, r0
   13f60:	60bb      	str	r3, [r7, #8]
	va_list args;
	va_start(args, fmt);
   13f62:	231c      	movs	r3, #28
   13f64:	18fb      	adds	r3, r7, r3
   13f66:	607b      	str	r3, [r7, #4]
	vsprintf(lcd_buff,fmt,args);
   13f68:	687a      	ldr	r2, [r7, #4]
   13f6a:	69b9      	ldr	r1, [r7, #24]
   13f6c:	68bb      	ldr	r3, [r7, #8]
   13f6e:	0018      	movs	r0, r3
   13f70:	4b0a      	ldr	r3, [pc, #40]	; (13f9c <lcd_printf+0x5c>)
   13f72:	4798      	blx	r3
	Buffer_writer(lcd_buff);
   13f74:	68bb      	ldr	r3, [r7, #8]
   13f76:	0018      	movs	r0, r3
   13f78:	4b09      	ldr	r3, [pc, #36]	; (13fa0 <lcd_printf+0x60>)
   13f7a:	4798      	blx	r3
	va_end(args);
	free(lcd_buff);
   13f7c:	68bb      	ldr	r3, [r7, #8]
   13f7e:	0018      	movs	r0, r3
   13f80:	4b08      	ldr	r3, [pc, #32]	; (13fa4 <lcd_printf+0x64>)
   13f82:	4798      	blx	r3
}
   13f84:	46c0      	nop			; (mov r8, r8)
   13f86:	46bd      	mov	sp, r7
   13f88:	b004      	add	sp, #16
   13f8a:	bc80      	pop	{r7}
   13f8c:	bc08      	pop	{r3}
   13f8e:	b004      	add	sp, #16
   13f90:	4718      	bx	r3
   13f92:	46c0      	nop			; (mov r8, r8)
   13f94:	000291a3 	.word	0x000291a3
   13f98:	00028e91 	.word	0x00028e91
   13f9c:	00029491 	.word	0x00029491
   13fa0:	00013eed 	.word	0x00013eed
   13fa4:	00028ea5 	.word	0x00028ea5

00013fa8 <StringtoUpperCase>:
#include "yalgo.h"
#include "itoa.h"


void StringtoUpperCase(char *str)
{
   13fa8:	b580      	push	{r7, lr}
   13faa:	b084      	sub	sp, #16
   13fac:	af00      	add	r7, sp, #0
   13fae:	6078      	str	r0, [r7, #4]
	if (!str) return;
   13fb0:	687b      	ldr	r3, [r7, #4]
   13fb2:	2b00      	cmp	r3, #0
   13fb4:	d028      	beq.n	14008 <StringtoUpperCase+0x60>
	for (char *p = str; *p; p++) {
   13fb6:	687b      	ldr	r3, [r7, #4]
   13fb8:	60fb      	str	r3, [r7, #12]
   13fba:	e020      	b.n	13ffe <StringtoUpperCase+0x56>
		*p = toupper(*p);
   13fbc:	230b      	movs	r3, #11
   13fbe:	18fb      	adds	r3, r7, r3
   13fc0:	68fa      	ldr	r2, [r7, #12]
   13fc2:	7812      	ldrb	r2, [r2, #0]
   13fc4:	701a      	strb	r2, [r3, #0]
   13fc6:	4b12      	ldr	r3, [pc, #72]	; (14010 <StringtoUpperCase+0x68>)
   13fc8:	4798      	blx	r3
   13fca:	0002      	movs	r2, r0
   13fcc:	230b      	movs	r3, #11
   13fce:	18fb      	adds	r3, r7, r3
   13fd0:	781b      	ldrb	r3, [r3, #0]
   13fd2:	3301      	adds	r3, #1
   13fd4:	18d3      	adds	r3, r2, r3
   13fd6:	781b      	ldrb	r3, [r3, #0]
   13fd8:	001a      	movs	r2, r3
   13fda:	2303      	movs	r3, #3
   13fdc:	4013      	ands	r3, r2
   13fde:	2b02      	cmp	r3, #2
   13fe0:	d104      	bne.n	13fec <StringtoUpperCase+0x44>
   13fe2:	230b      	movs	r3, #11
   13fe4:	18fb      	adds	r3, r7, r3
   13fe6:	781b      	ldrb	r3, [r3, #0]
   13fe8:	3b20      	subs	r3, #32
   13fea:	e002      	b.n	13ff2 <StringtoUpperCase+0x4a>
   13fec:	230b      	movs	r3, #11
   13fee:	18fb      	adds	r3, r7, r3
   13ff0:	781b      	ldrb	r3, [r3, #0]
   13ff2:	b2da      	uxtb	r2, r3
   13ff4:	68fb      	ldr	r3, [r7, #12]
   13ff6:	701a      	strb	r2, [r3, #0]
	for (char *p = str; *p; p++) {
   13ff8:	68fb      	ldr	r3, [r7, #12]
   13ffa:	3301      	adds	r3, #1
   13ffc:	60fb      	str	r3, [r7, #12]
   13ffe:	68fb      	ldr	r3, [r7, #12]
   14000:	781b      	ldrb	r3, [r3, #0]
   14002:	2b00      	cmp	r3, #0
   14004:	d1da      	bne.n	13fbc <StringtoUpperCase+0x14>
   14006:	e000      	b.n	1400a <StringtoUpperCase+0x62>
	if (!str) return;
   14008:	46c0      	nop			; (mov r8, r8)
	}
}
   1400a:	46bd      	mov	sp, r7
   1400c:	b004      	add	sp, #16
   1400e:	bd80      	pop	{r7, pc}
   14010:	00028e75 	.word	0x00028e75

00014014 <StringstartsWith>:

bool StringstartsWith(const char *str,const char *pre)
{
   14014:	b580      	push	{r7, lr}
   14016:	b084      	sub	sp, #16
   14018:	af00      	add	r7, sp, #0
   1401a:	6078      	str	r0, [r7, #4]
   1401c:	6039      	str	r1, [r7, #0]
	size_t lenpre = strlen(pre),
   1401e:	683b      	ldr	r3, [r7, #0]
   14020:	0018      	movs	r0, r3
   14022:	4b10      	ldr	r3, [pc, #64]	; (14064 <StringstartsWith+0x50>)
   14024:	4798      	blx	r3
   14026:	0003      	movs	r3, r0
   14028:	60fb      	str	r3, [r7, #12]
	lenstr = strlen(str);
   1402a:	687b      	ldr	r3, [r7, #4]
   1402c:	0018      	movs	r0, r3
   1402e:	4b0d      	ldr	r3, [pc, #52]	; (14064 <StringstartsWith+0x50>)
   14030:	4798      	blx	r3
   14032:	0003      	movs	r3, r0
   14034:	60bb      	str	r3, [r7, #8]
	return lenstr < lenpre ? false : strncmp(pre, str, lenpre) == 0;
   14036:	68ba      	ldr	r2, [r7, #8]
   14038:	68fb      	ldr	r3, [r7, #12]
   1403a:	429a      	cmp	r2, r3
   1403c:	d309      	bcc.n	14052 <StringstartsWith+0x3e>
   1403e:	68fa      	ldr	r2, [r7, #12]
   14040:	6879      	ldr	r1, [r7, #4]
   14042:	683b      	ldr	r3, [r7, #0]
   14044:	0018      	movs	r0, r3
   14046:	4b08      	ldr	r3, [pc, #32]	; (14068 <StringstartsWith+0x54>)
   14048:	4798      	blx	r3
   1404a:	1e03      	subs	r3, r0, #0
   1404c:	d101      	bne.n	14052 <StringstartsWith+0x3e>
   1404e:	2301      	movs	r3, #1
   14050:	e000      	b.n	14054 <StringstartsWith+0x40>
   14052:	2300      	movs	r3, #0
   14054:	1c1a      	adds	r2, r3, #0
   14056:	2301      	movs	r3, #1
   14058:	4013      	ands	r3, r2
   1405a:	b2db      	uxtb	r3, r3
}
   1405c:	0018      	movs	r0, r3
   1405e:	46bd      	mov	sp, r7
   14060:	b004      	add	sp, #16
   14062:	bd80      	pop	{r7, pc}
   14064:	000291a3 	.word	0x000291a3
   14068:	000291b1 	.word	0x000291b1

0001406c <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   1406c:	b580      	push	{r7, lr}
   1406e:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   14070:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   14074:	4b02      	ldr	r3, [pc, #8]	; (14080 <NVIC_SystemReset+0x14>)
   14076:	4a03      	ldr	r2, [pc, #12]	; (14084 <NVIC_SystemReset+0x18>)
   14078:	60da      	str	r2, [r3, #12]
   1407a:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   1407e:	e7fe      	b.n	1407e <NVIC_SystemReset+0x12>
   14080:	e000ed00 	.word	0xe000ed00
   14084:	05fa0004 	.word	0x05fa0004

00014088 <system_pinmux_get_group_from_gpio_pin>:
{
   14088:	b580      	push	{r7, lr}
   1408a:	b084      	sub	sp, #16
   1408c:	af00      	add	r7, sp, #0
   1408e:	0002      	movs	r2, r0
   14090:	1dfb      	adds	r3, r7, #7
   14092:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   14094:	230f      	movs	r3, #15
   14096:	18fb      	adds	r3, r7, r3
   14098:	1dfa      	adds	r2, r7, #7
   1409a:	7812      	ldrb	r2, [r2, #0]
   1409c:	09d2      	lsrs	r2, r2, #7
   1409e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   140a0:	230e      	movs	r3, #14
   140a2:	18fb      	adds	r3, r7, r3
   140a4:	1dfa      	adds	r2, r7, #7
   140a6:	7812      	ldrb	r2, [r2, #0]
   140a8:	0952      	lsrs	r2, r2, #5
   140aa:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   140ac:	4b0d      	ldr	r3, [pc, #52]	; (140e4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   140ae:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   140b0:	230f      	movs	r3, #15
   140b2:	18fb      	adds	r3, r7, r3
   140b4:	781b      	ldrb	r3, [r3, #0]
   140b6:	2b00      	cmp	r3, #0
   140b8:	d10f      	bne.n	140da <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   140ba:	230f      	movs	r3, #15
   140bc:	18fb      	adds	r3, r7, r3
   140be:	781b      	ldrb	r3, [r3, #0]
   140c0:	009b      	lsls	r3, r3, #2
   140c2:	2210      	movs	r2, #16
   140c4:	4694      	mov	ip, r2
   140c6:	44bc      	add	ip, r7
   140c8:	4463      	add	r3, ip
   140ca:	3b08      	subs	r3, #8
   140cc:	681a      	ldr	r2, [r3, #0]
   140ce:	230e      	movs	r3, #14
   140d0:	18fb      	adds	r3, r7, r3
   140d2:	781b      	ldrb	r3, [r3, #0]
   140d4:	01db      	lsls	r3, r3, #7
   140d6:	18d3      	adds	r3, r2, r3
   140d8:	e000      	b.n	140dc <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   140da:	2300      	movs	r3, #0
}
   140dc:	0018      	movs	r0, r3
   140de:	46bd      	mov	sp, r7
   140e0:	b004      	add	sp, #16
   140e2:	bd80      	pop	{r7, pc}
   140e4:	41004400 	.word	0x41004400

000140e8 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   140e8:	b580      	push	{r7, lr}
   140ea:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   140ec:	4b02      	ldr	r3, [pc, #8]	; (140f8 <system_reset+0x10>)
   140ee:	4798      	blx	r3
}
   140f0:	46c0      	nop			; (mov r8, r8)
   140f2:	46bd      	mov	sp, r7
   140f4:	bd80      	pop	{r7, pc}
   140f6:	46c0      	nop			; (mov r8, r8)
   140f8:	0001406d 	.word	0x0001406d

000140fc <port_get_group_from_gpio_pin>:
{
   140fc:	b580      	push	{r7, lr}
   140fe:	b082      	sub	sp, #8
   14100:	af00      	add	r7, sp, #0
   14102:	0002      	movs	r2, r0
   14104:	1dfb      	adds	r3, r7, #7
   14106:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   14108:	1dfb      	adds	r3, r7, #7
   1410a:	781b      	ldrb	r3, [r3, #0]
   1410c:	0018      	movs	r0, r3
   1410e:	4b03      	ldr	r3, [pc, #12]	; (1411c <port_get_group_from_gpio_pin+0x20>)
   14110:	4798      	blx	r3
   14112:	0003      	movs	r3, r0
}
   14114:	0018      	movs	r0, r3
   14116:	46bd      	mov	sp, r7
   14118:	b002      	add	sp, #8
   1411a:	bd80      	pop	{r7, pc}
   1411c:	00014089 	.word	0x00014089

00014120 <port_get_config_defaults>:
{
   14120:	b580      	push	{r7, lr}
   14122:	b082      	sub	sp, #8
   14124:	af00      	add	r7, sp, #0
   14126:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   14128:	687b      	ldr	r3, [r7, #4]
   1412a:	2200      	movs	r2, #0
   1412c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1412e:	687b      	ldr	r3, [r7, #4]
   14130:	2201      	movs	r2, #1
   14132:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   14134:	687b      	ldr	r3, [r7, #4]
   14136:	2200      	movs	r2, #0
   14138:	709a      	strb	r2, [r3, #2]
}
   1413a:	46c0      	nop			; (mov r8, r8)
   1413c:	46bd      	mov	sp, r7
   1413e:	b002      	add	sp, #8
   14140:	bd80      	pop	{r7, pc}
	...

00014144 <port_pin_get_input_level>:
{
   14144:	b580      	push	{r7, lr}
   14146:	b084      	sub	sp, #16
   14148:	af00      	add	r7, sp, #0
   1414a:	0002      	movs	r2, r0
   1414c:	1dfb      	adds	r3, r7, #7
   1414e:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   14150:	1dfb      	adds	r3, r7, #7
   14152:	781b      	ldrb	r3, [r3, #0]
   14154:	0018      	movs	r0, r3
   14156:	4b0b      	ldr	r3, [pc, #44]	; (14184 <port_pin_get_input_level+0x40>)
   14158:	4798      	blx	r3
   1415a:	0003      	movs	r3, r0
   1415c:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1415e:	1dfb      	adds	r3, r7, #7
   14160:	781b      	ldrb	r3, [r3, #0]
   14162:	221f      	movs	r2, #31
   14164:	4013      	ands	r3, r2
   14166:	2201      	movs	r2, #1
   14168:	409a      	lsls	r2, r3
   1416a:	0013      	movs	r3, r2
   1416c:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
   1416e:	68fb      	ldr	r3, [r7, #12]
   14170:	6a1b      	ldr	r3, [r3, #32]
   14172:	68ba      	ldr	r2, [r7, #8]
   14174:	4013      	ands	r3, r2
   14176:	1e5a      	subs	r2, r3, #1
   14178:	4193      	sbcs	r3, r2
   1417a:	b2db      	uxtb	r3, r3
}
   1417c:	0018      	movs	r0, r3
   1417e:	46bd      	mov	sp, r7
   14180:	b004      	add	sp, #16
   14182:	bd80      	pop	{r7, pc}
   14184:	000140fd 	.word	0x000140fd

00014188 <port_pin_set_output_level>:
{
   14188:	b580      	push	{r7, lr}
   1418a:	b084      	sub	sp, #16
   1418c:	af00      	add	r7, sp, #0
   1418e:	0002      	movs	r2, r0
   14190:	1dfb      	adds	r3, r7, #7
   14192:	701a      	strb	r2, [r3, #0]
   14194:	1dbb      	adds	r3, r7, #6
   14196:	1c0a      	adds	r2, r1, #0
   14198:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1419a:	1dfb      	adds	r3, r7, #7
   1419c:	781b      	ldrb	r3, [r3, #0]
   1419e:	0018      	movs	r0, r3
   141a0:	4b0d      	ldr	r3, [pc, #52]	; (141d8 <port_pin_set_output_level+0x50>)
   141a2:	4798      	blx	r3
   141a4:	0003      	movs	r3, r0
   141a6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   141a8:	1dfb      	adds	r3, r7, #7
   141aa:	781b      	ldrb	r3, [r3, #0]
   141ac:	221f      	movs	r2, #31
   141ae:	4013      	ands	r3, r2
   141b0:	2201      	movs	r2, #1
   141b2:	409a      	lsls	r2, r3
   141b4:	0013      	movs	r3, r2
   141b6:	60bb      	str	r3, [r7, #8]
	if (level) {
   141b8:	1dbb      	adds	r3, r7, #6
   141ba:	781b      	ldrb	r3, [r3, #0]
   141bc:	2b00      	cmp	r3, #0
   141be:	d003      	beq.n	141c8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   141c0:	68fb      	ldr	r3, [r7, #12]
   141c2:	68ba      	ldr	r2, [r7, #8]
   141c4:	619a      	str	r2, [r3, #24]
}
   141c6:	e002      	b.n	141ce <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   141c8:	68fb      	ldr	r3, [r7, #12]
   141ca:	68ba      	ldr	r2, [r7, #8]
   141cc:	615a      	str	r2, [r3, #20]
}
   141ce:	46c0      	nop			; (mov r8, r8)
   141d0:	46bd      	mov	sp, r7
   141d2:	b004      	add	sp, #16
   141d4:	bd80      	pop	{r7, pc}
   141d6:	46c0      	nop			; (mov r8, r8)
   141d8:	000140fd 	.word	0x000140fd

000141dc <setObtainEvent>:

static void vTask_GSM_service(void *params);


void setObtainEvent(void)
{
   141dc:	b580      	push	{r7, lr}
   141de:	af00      	add	r7, sp, #0
	if (!obtainNewEvent  && xTaskGetTickCount() - obtainEventTimer > 1000)
   141e0:	4b0b      	ldr	r3, [pc, #44]	; (14210 <setObtainEvent+0x34>)
   141e2:	781b      	ldrb	r3, [r3, #0]
   141e4:	2201      	movs	r2, #1
   141e6:	4053      	eors	r3, r2
   141e8:	b2db      	uxtb	r3, r3
   141ea:	2b00      	cmp	r3, #0
   141ec:	d00c      	beq.n	14208 <setObtainEvent+0x2c>
   141ee:	4b09      	ldr	r3, [pc, #36]	; (14214 <setObtainEvent+0x38>)
   141f0:	4798      	blx	r3
   141f2:	0002      	movs	r2, r0
   141f4:	4b08      	ldr	r3, [pc, #32]	; (14218 <setObtainEvent+0x3c>)
   141f6:	681b      	ldr	r3, [r3, #0]
   141f8:	1ad2      	subs	r2, r2, r3
   141fa:	23fa      	movs	r3, #250	; 0xfa
   141fc:	009b      	lsls	r3, r3, #2
   141fe:	429a      	cmp	r2, r3
   14200:	d902      	bls.n	14208 <setObtainEvent+0x2c>
	{
		obtainNewEvent = true;
   14202:	4b03      	ldr	r3, [pc, #12]	; (14210 <setObtainEvent+0x34>)
   14204:	2201      	movs	r2, #1
   14206:	701a      	strb	r2, [r3, #0]
	}
}
   14208:	46c0      	nop			; (mov r8, r8)
   1420a:	46bd      	mov	sp, r7
   1420c:	bd80      	pop	{r7, pc}
   1420e:	46c0      	nop			; (mov r8, r8)
   14210:	2000076a 	.word	0x2000076a
   14214:	0002034d 	.word	0x0002034d
   14218:	20000810 	.word	0x20000810

0001421c <operateOnStagedEvent>:

void operateOnStagedEvent(void)
{
   1421c:	b580      	push	{r7, lr}
   1421e:	b082      	sub	sp, #8
   14220:	af00      	add	r7, sp, #0
	uint8_t temp1= 1;
   14222:	1dfb      	adds	r3, r7, #7
   14224:	2201      	movs	r2, #1
   14226:	701a      	strb	r2, [r3, #0]
	if(eventStaged)
   14228:	4b23      	ldr	r3, [pc, #140]	; (142b8 <operateOnStagedEvent+0x9c>)
   1422a:	781b      	ldrb	r3, [r3, #0]
   1422c:	2b00      	cmp	r3, #0
   1422e:	d003      	beq.n	14238 <operateOnStagedEvent+0x1c>
	{
		temp1 = user_settings_parameter_struct.eventStageAddress;
   14230:	1dfb      	adds	r3, r7, #7
   14232:	4a22      	ldr	r2, [pc, #136]	; (142bc <operateOnStagedEvent+0xa0>)
   14234:	7a12      	ldrb	r2, [r2, #8]
   14236:	701a      	strb	r2, [r3, #0]
	}
	
	if(obtainNewEvent && (retries==1 || (xTaskGetTickCount()-tempEventStageTime>((unsigned long)temp1*60000L))))
   14238:	4b21      	ldr	r3, [pc, #132]	; (142c0 <operateOnStagedEvent+0xa4>)
   1423a:	781b      	ldrb	r3, [r3, #0]
   1423c:	2b00      	cmp	r3, #0
   1423e:	d037      	beq.n	142b0 <operateOnStagedEvent+0x94>
   14240:	4b20      	ldr	r3, [pc, #128]	; (142c4 <operateOnStagedEvent+0xa8>)
   14242:	781b      	ldrb	r3, [r3, #0]
   14244:	2b01      	cmp	r3, #1
   14246:	d00b      	beq.n	14260 <operateOnStagedEvent+0x44>
   14248:	4b1f      	ldr	r3, [pc, #124]	; (142c8 <operateOnStagedEvent+0xac>)
   1424a:	4798      	blx	r3
   1424c:	0002      	movs	r2, r0
   1424e:	4b1f      	ldr	r3, [pc, #124]	; (142cc <operateOnStagedEvent+0xb0>)
   14250:	681b      	ldr	r3, [r3, #0]
   14252:	1ad2      	subs	r2, r2, r3
   14254:	1dfb      	adds	r3, r7, #7
   14256:	781b      	ldrb	r3, [r3, #0]
   14258:	491d      	ldr	r1, [pc, #116]	; (142d0 <operateOnStagedEvent+0xb4>)
   1425a:	434b      	muls	r3, r1
   1425c:	429a      	cmp	r2, r3
   1425e:	d927      	bls.n	142b0 <operateOnStagedEvent+0x94>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   14260:	4b1c      	ldr	r3, [pc, #112]	; (142d4 <operateOnStagedEvent+0xb8>)
   14262:	78db      	ldrb	r3, [r3, #3]
   14264:	2b00      	cmp	r3, #0
   14266:	d01a      	beq.n	1429e <operateOnStagedEvent+0x82>
		{
			if (eventStaged)
   14268:	4b13      	ldr	r3, [pc, #76]	; (142b8 <operateOnStagedEvent+0x9c>)
   1426a:	781b      	ldrb	r3, [r3, #0]
   1426c:	2b00      	cmp	r3, #0
   1426e:	d007      	beq.n	14280 <operateOnStagedEvent+0x64>
			{
				actionType=stagedEventType;
   14270:	4b19      	ldr	r3, [pc, #100]	; (142d8 <operateOnStagedEvent+0xbc>)
   14272:	781a      	ldrb	r2, [r3, #0]
   14274:	4b19      	ldr	r3, [pc, #100]	; (142dc <operateOnStagedEvent+0xc0>)
   14276:	701a      	strb	r2, [r3, #0]
				eventStaged=false;
   14278:	4b0f      	ldr	r3, [pc, #60]	; (142b8 <operateOnStagedEvent+0x9c>)
   1427a:	2200      	movs	r2, #0
   1427c:	701a      	strb	r2, [r3, #0]
   1427e:	e015      	b.n	142ac <operateOnStagedEvent+0x90>
			}
			else if (m2mEventStaged)
   14280:	4b17      	ldr	r3, [pc, #92]	; (142e0 <operateOnStagedEvent+0xc4>)
   14282:	781b      	ldrb	r3, [r3, #0]
   14284:	2b00      	cmp	r3, #0
   14286:	d011      	beq.n	142ac <operateOnStagedEvent+0x90>
			{
				m2mEventNo=stagedEventType;
   14288:	4b13      	ldr	r3, [pc, #76]	; (142d8 <operateOnStagedEvent+0xbc>)
   1428a:	781a      	ldrb	r2, [r3, #0]
   1428c:	4b15      	ldr	r3, [pc, #84]	; (142e4 <operateOnStagedEvent+0xc8>)
   1428e:	701a      	strb	r2, [r3, #0]
				m2mEvent=true;
   14290:	4b15      	ldr	r3, [pc, #84]	; (142e8 <operateOnStagedEvent+0xcc>)
   14292:	2201      	movs	r2, #1
   14294:	701a      	strb	r2, [r3, #0]
				m2mEventStaged=false;
   14296:	4b12      	ldr	r3, [pc, #72]	; (142e0 <operateOnStagedEvent+0xc4>)
   14298:	2200      	movs	r2, #0
   1429a:	701a      	strb	r2, [r3, #0]
   1429c:	e006      	b.n	142ac <operateOnStagedEvent+0x90>
			}
		}
		else
		{
			actionType=stagedEventType;
   1429e:	4b0e      	ldr	r3, [pc, #56]	; (142d8 <operateOnStagedEvent+0xbc>)
   142a0:	781a      	ldrb	r2, [r3, #0]
   142a2:	4b0e      	ldr	r3, [pc, #56]	; (142dc <operateOnStagedEvent+0xc0>)
   142a4:	701a      	strb	r2, [r3, #0]
			eventStaged=false;
   142a6:	4b04      	ldr	r3, [pc, #16]	; (142b8 <operateOnStagedEvent+0x9c>)
   142a8:	2200      	movs	r2, #0
   142aa:	701a      	strb	r2, [r3, #0]
		}
		makeResponseAction();
   142ac:	4b0f      	ldr	r3, [pc, #60]	; (142ec <operateOnStagedEvent+0xd0>)
   142ae:	4798      	blx	r3
	}
}
   142b0:	46c0      	nop			; (mov r8, r8)
   142b2:	46bd      	mov	sp, r7
   142b4:	b002      	add	sp, #8
   142b6:	bd80      	pop	{r7, pc}
   142b8:	200007ce 	.word	0x200007ce
   142bc:	20000654 	.word	0x20000654
   142c0:	2000076a 	.word	0x2000076a
   142c4:	200006d9 	.word	0x200006d9
   142c8:	0002034d 	.word	0x0002034d
   142cc:	200007f0 	.word	0x200007f0
   142d0:	0000ea60 	.word	0x0000ea60
   142d4:	2000062c 	.word	0x2000062c
   142d8:	2000076d 	.word	0x2000076d
   142dc:	2000075b 	.word	0x2000075b
   142e0:	20000786 	.word	0x20000786
   142e4:	20000721 	.word	0x20000721
   142e8:	2000073b 	.word	0x2000073b
   142ec:	000142f1 	.word	0x000142f1

000142f0 <makeResponseAction>:

void makeResponseAction(void)
{
   142f0:	b580      	push	{r7, lr}
   142f2:	af00      	add	r7, sp, #0
	if(user_settings_parameter_struct.responseAddress != 'N' || m2mEvent)
   142f4:	4b07      	ldr	r3, [pc, #28]	; (14314 <makeResponseAction+0x24>)
   142f6:	795b      	ldrb	r3, [r3, #5]
   142f8:	2b4e      	cmp	r3, #78	; 0x4e
   142fa:	d103      	bne.n	14304 <makeResponseAction+0x14>
   142fc:	4b06      	ldr	r3, [pc, #24]	; (14318 <makeResponseAction+0x28>)
   142fe:	781b      	ldrb	r3, [r3, #0]
   14300:	2b00      	cmp	r3, #0
   14302:	d004      	beq.n	1430e <makeResponseAction+0x1e>
	{
		freezeIncomingCalls = true;
   14304:	4b05      	ldr	r3, [pc, #20]	; (1431c <makeResponseAction+0x2c>)
   14306:	2201      	movs	r2, #1
   14308:	701a      	strb	r2, [r3, #0]
		//acceptCommands();
		makeCall();
   1430a:	4b05      	ldr	r3, [pc, #20]	; (14320 <makeResponseAction+0x30>)
   1430c:	4798      	blx	r3
	}
}
   1430e:	46c0      	nop			; (mov r8, r8)
   14310:	46bd      	mov	sp, r7
   14312:	bd80      	pop	{r7, pc}
   14314:	20000654 	.word	0x20000654
   14318:	2000073b 	.word	0x2000073b
   1431c:	2000073c 	.word	0x2000073c
   14320:	00014559 	.word	0x00014559

00014324 <endCall>:

void endCall(void)
{
   14324:	b580      	push	{r7, lr}
   14326:	af00      	add	r7, sp, #0
	nr  = 0;
   14328:	4b6d      	ldr	r3, [pc, #436]	; (144e0 <endCall+0x1bc>)
   1432a:	2200      	movs	r2, #0
   1432c:	701a      	strb	r2, [r3, #0]
	inCall=false;
   1432e:	4b6d      	ldr	r3, [pc, #436]	; (144e4 <endCall+0x1c0>)
   14330:	2200      	movs	r2, #0
   14332:	701a      	strb	r2, [r3, #0]
	
	gsm_hangup_call();
   14334:	4b6c      	ldr	r3, [pc, #432]	; (144e8 <endCall+0x1c4>)
   14336:	4798      	blx	r3
	setCallStateOnLCD(LCDCALLSTATE_IDLE,NULL,false);
   14338:	2200      	movs	r2, #0
   1433a:	2100      	movs	r1, #0
   1433c:	2000      	movs	r0, #0
   1433e:	4b6b      	ldr	r3, [pc, #428]	; (144ec <endCall+0x1c8>)
   14340:	4798      	blx	r3
	//unsigned long temp = xTaskGetTickCount();
	vTaskDelay(1000);
   14342:	23fa      	movs	r3, #250	; 0xfa
   14344:	009b      	lsls	r3, r3, #2
   14346:	0018      	movs	r0, r3
   14348:	4b69      	ldr	r3, [pc, #420]	; (144f0 <endCall+0x1cc>)
   1434a:	4798      	blx	r3
	freezeIncomingCalls = false;
   1434c:	4b69      	ldr	r3, [pc, #420]	; (144f4 <endCall+0x1d0>)
   1434e:	2200      	movs	r2, #0
   14350:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
   14352:	4b69      	ldr	r3, [pc, #420]	; (144f8 <endCall+0x1d4>)
   14354:	785b      	ldrb	r3, [r3, #1]
   14356:	2b00      	cmp	r3, #0
   14358:	d002      	beq.n	14360 <endCall+0x3c>
	{
		zeroPressed=false;
   1435a:	4b68      	ldr	r3, [pc, #416]	; (144fc <endCall+0x1d8>)
   1435c:	2200      	movs	r2, #0
   1435e:	701a      	strb	r2, [r3, #0]
	}
	
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
   14360:	4b65      	ldr	r3, [pc, #404]	; (144f8 <endCall+0x1d4>)
   14362:	78db      	ldrb	r3, [r3, #3]
   14364:	2b01      	cmp	r3, #1
   14366:	d11d      	bne.n	143a4 <endCall+0x80>
	((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O' && !m2mEvent):
   14368:	4b65      	ldr	r3, [pc, #404]	; (14500 <endCall+0x1dc>)
   1436a:	781b      	ldrb	r3, [r3, #0]
   1436c:	b2db      	uxtb	r3, r3
   1436e:	2b4e      	cmp	r3, #78	; 0x4e
   14370:	d004      	beq.n	1437c <endCall+0x58>
   14372:	4b63      	ldr	r3, [pc, #396]	; (14500 <endCall+0x1dc>)
   14374:	781b      	ldrb	r3, [r3, #0]
   14376:	b2db      	uxtb	r3, r3
   14378:	2b52      	cmp	r3, #82	; 0x52
   1437a:	d10d      	bne.n	14398 <endCall+0x74>
   1437c:	4b61      	ldr	r3, [pc, #388]	; (14504 <endCall+0x1e0>)
   1437e:	781b      	ldrb	r3, [r3, #0]
   14380:	b2db      	uxtb	r3, r3
   14382:	2b4f      	cmp	r3, #79	; 0x4f
   14384:	d108      	bne.n	14398 <endCall+0x74>
   14386:	4b60      	ldr	r3, [pc, #384]	; (14508 <endCall+0x1e4>)
   14388:	781b      	ldrb	r3, [r3, #0]
   1438a:	2201      	movs	r2, #1
   1438c:	4053      	eors	r3, r2
   1438e:	b2db      	uxtb	r3, r3
   14390:	2b00      	cmp	r3, #0
   14392:	d001      	beq.n	14398 <endCall+0x74>
   14394:	2301      	movs	r3, #1
   14396:	e000      	b.n	1439a <endCall+0x76>
   14398:	2300      	movs	r3, #0
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
   1439a:	1c1a      	adds	r2, r3, #0
   1439c:	2301      	movs	r3, #1
   1439e:	4013      	ands	r3, r2
   143a0:	b2db      	uxtb	r3, r3
   143a2:	e015      	b.n	143d0 <endCall+0xac>
	((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O'))
   143a4:	4b56      	ldr	r3, [pc, #344]	; (14500 <endCall+0x1dc>)
   143a6:	781b      	ldrb	r3, [r3, #0]
   143a8:	b2db      	uxtb	r3, r3
   143aa:	2b4e      	cmp	r3, #78	; 0x4e
   143ac:	d004      	beq.n	143b8 <endCall+0x94>
   143ae:	4b54      	ldr	r3, [pc, #336]	; (14500 <endCall+0x1dc>)
   143b0:	781b      	ldrb	r3, [r3, #0]
   143b2:	b2db      	uxtb	r3, r3
   143b4:	2b52      	cmp	r3, #82	; 0x52
   143b6:	d106      	bne.n	143c6 <endCall+0xa2>
   143b8:	4b52      	ldr	r3, [pc, #328]	; (14504 <endCall+0x1e0>)
   143ba:	781b      	ldrb	r3, [r3, #0]
   143bc:	b2db      	uxtb	r3, r3
   143be:	2b4f      	cmp	r3, #79	; 0x4f
   143c0:	d101      	bne.n	143c6 <endCall+0xa2>
   143c2:	2301      	movs	r3, #1
   143c4:	e000      	b.n	143c8 <endCall+0xa4>
   143c6:	2300      	movs	r3, #0
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
   143c8:	1c1a      	adds	r2, r3, #0
   143ca:	2301      	movs	r3, #1
   143cc:	4013      	ands	r3, r2
   143ce:	b2db      	uxtb	r3, r3
   143d0:	2b00      	cmp	r3, #0
   143d2:	d021      	beq.n	14418 <endCall+0xf4>
	{
		if((retries==0) && !callAccepted && (user_settings_parameter_struct.responseAddress=='T') && (user_count_struct.current_user_no_count>1))
   143d4:	4b4d      	ldr	r3, [pc, #308]	; (1450c <endCall+0x1e8>)
   143d6:	781b      	ldrb	r3, [r3, #0]
   143d8:	2b00      	cmp	r3, #0
   143da:	d11d      	bne.n	14418 <endCall+0xf4>
   143dc:	4b4c      	ldr	r3, [pc, #304]	; (14510 <endCall+0x1ec>)
   143de:	781b      	ldrb	r3, [r3, #0]
   143e0:	2201      	movs	r2, #1
   143e2:	4053      	eors	r3, r2
   143e4:	b2db      	uxtb	r3, r3
   143e6:	2b00      	cmp	r3, #0
   143e8:	d016      	beq.n	14418 <endCall+0xf4>
   143ea:	4b4a      	ldr	r3, [pc, #296]	; (14514 <endCall+0x1f0>)
   143ec:	795b      	ldrb	r3, [r3, #5]
   143ee:	2b54      	cmp	r3, #84	; 0x54
   143f0:	d112      	bne.n	14418 <endCall+0xf4>
   143f2:	4b49      	ldr	r3, [pc, #292]	; (14518 <endCall+0x1f4>)
   143f4:	789b      	ldrb	r3, [r3, #2]
   143f6:	2b01      	cmp	r3, #1
   143f8:	d90e      	bls.n	14418 <endCall+0xf4>
		{
			retries=1;
   143fa:	4b44      	ldr	r3, [pc, #272]	; (1450c <endCall+0x1e8>)
   143fc:	2201      	movs	r2, #1
   143fe:	701a      	strb	r2, [r3, #0]
			eventStaged=true;
   14400:	4b46      	ldr	r3, [pc, #280]	; (1451c <endCall+0x1f8>)
   14402:	2201      	movs	r2, #1
   14404:	701a      	strb	r2, [r3, #0]
			tempEventStageTime=xTaskGetTickCount();
   14406:	4b46      	ldr	r3, [pc, #280]	; (14520 <endCall+0x1fc>)
   14408:	4798      	blx	r3
   1440a:	0002      	movs	r2, r0
   1440c:	4b45      	ldr	r3, [pc, #276]	; (14524 <endCall+0x200>)
   1440e:	601a      	str	r2, [r3, #0]
			stagedEventType=actionType;
   14410:	4b45      	ldr	r3, [pc, #276]	; (14528 <endCall+0x204>)
   14412:	781a      	ldrb	r2, [r3, #0]
   14414:	4b45      	ldr	r3, [pc, #276]	; (1452c <endCall+0x208>)
   14416:	701a      	strb	r2, [r3, #0]
		}
	}
	
	if (factory_settings_parameter_struct.ENABLE_M2M)
   14418:	4b37      	ldr	r3, [pc, #220]	; (144f8 <endCall+0x1d4>)
   1441a:	78db      	ldrb	r3, [r3, #3]
   1441c:	2b00      	cmp	r3, #0
   1441e:	d047      	beq.n	144b0 <endCall+0x18c>
	{
		if((currentStatus == 'I' || currentStatus=='R') && currentCallStatus == 'O' && m2mEvent && m2m_Numbers_struct.m2mSetting)
   14420:	4b37      	ldr	r3, [pc, #220]	; (14500 <endCall+0x1dc>)
   14422:	781b      	ldrb	r3, [r3, #0]
   14424:	b2db      	uxtb	r3, r3
   14426:	2b49      	cmp	r3, #73	; 0x49
   14428:	d004      	beq.n	14434 <endCall+0x110>
   1442a:	4b35      	ldr	r3, [pc, #212]	; (14500 <endCall+0x1dc>)
   1442c:	781b      	ldrb	r3, [r3, #0]
   1442e:	b2db      	uxtb	r3, r3
   14430:	2b52      	cmp	r3, #82	; 0x52
   14432:	d137      	bne.n	144a4 <endCall+0x180>
   14434:	4b33      	ldr	r3, [pc, #204]	; (14504 <endCall+0x1e0>)
   14436:	781b      	ldrb	r3, [r3, #0]
   14438:	b2db      	uxtb	r3, r3
   1443a:	2b4f      	cmp	r3, #79	; 0x4f
   1443c:	d132      	bne.n	144a4 <endCall+0x180>
   1443e:	4b32      	ldr	r3, [pc, #200]	; (14508 <endCall+0x1e4>)
   14440:	781b      	ldrb	r3, [r3, #0]
   14442:	2b00      	cmp	r3, #0
   14444:	d02e      	beq.n	144a4 <endCall+0x180>
   14446:	4b3a      	ldr	r3, [pc, #232]	; (14530 <endCall+0x20c>)
   14448:	795b      	ldrb	r3, [r3, #5]
   1444a:	2b00      	cmp	r3, #0
   1444c:	d02a      	beq.n	144a4 <endCall+0x180>
		{
			m2mEventCalls++;
   1444e:	4b39      	ldr	r3, [pc, #228]	; (14534 <endCall+0x210>)
   14450:	781b      	ldrb	r3, [r3, #0]
   14452:	3301      	adds	r3, #1
   14454:	b2da      	uxtb	r2, r3
   14456:	4b37      	ldr	r3, [pc, #220]	; (14534 <endCall+0x210>)
   14458:	701a      	strb	r2, [r3, #0]
			if(m2mAck)
   1445a:	4b37      	ldr	r3, [pc, #220]	; (14538 <endCall+0x214>)
   1445c:	781b      	ldrb	r3, [r3, #0]
   1445e:	2b00      	cmp	r3, #0
   14460:	d006      	beq.n	14470 <endCall+0x14c>
			{
				setM2MEventState(m2mEventNo,ME_CLEARED);
   14462:	4b36      	ldr	r3, [pc, #216]	; (1453c <endCall+0x218>)
   14464:	781b      	ldrb	r3, [r3, #0]
   14466:	2100      	movs	r1, #0
   14468:	0018      	movs	r0, r3
   1446a:	4b35      	ldr	r3, [pc, #212]	; (14540 <endCall+0x21c>)
   1446c:	4798      	blx	r3
   1446e:	e016      	b.n	1449e <endCall+0x17a>
			}
			else
			{
				if(m2mEventCalls<2)
   14470:	4b30      	ldr	r3, [pc, #192]	; (14534 <endCall+0x210>)
   14472:	781b      	ldrb	r3, [r3, #0]
   14474:	2b01      	cmp	r3, #1
   14476:	d80c      	bhi.n	14492 <endCall+0x16e>
				{
					tempEventStageTime=xTaskGetTickCount();
   14478:	4b29      	ldr	r3, [pc, #164]	; (14520 <endCall+0x1fc>)
   1447a:	4798      	blx	r3
   1447c:	0002      	movs	r2, r0
   1447e:	4b29      	ldr	r3, [pc, #164]	; (14524 <endCall+0x200>)
   14480:	601a      	str	r2, [r3, #0]
					stagedEventType=m2mEventNo;
   14482:	4b2e      	ldr	r3, [pc, #184]	; (1453c <endCall+0x218>)
   14484:	781a      	ldrb	r2, [r3, #0]
   14486:	4b29      	ldr	r3, [pc, #164]	; (1452c <endCall+0x208>)
   14488:	701a      	strb	r2, [r3, #0]
					m2mEventStaged=true;
   1448a:	4b2e      	ldr	r3, [pc, #184]	; (14544 <endCall+0x220>)
   1448c:	2201      	movs	r2, #1
   1448e:	701a      	strb	r2, [r3, #0]
   14490:	e005      	b.n	1449e <endCall+0x17a>
				}
				else
				{
					setM2MEventState(m2mEventNo,ME_NOTAVAILABLE);
   14492:	4b2a      	ldr	r3, [pc, #168]	; (1453c <endCall+0x218>)
   14494:	781b      	ldrb	r3, [r3, #0]
   14496:	2103      	movs	r1, #3
   14498:	0018      	movs	r0, r3
   1449a:	4b29      	ldr	r3, [pc, #164]	; (14540 <endCall+0x21c>)
   1449c:	4798      	blx	r3
				}
			}
			m2mEvent = false;
   1449e:	4b1a      	ldr	r3, [pc, #104]	; (14508 <endCall+0x1e4>)
   144a0:	2200      	movs	r2, #0
   144a2:	701a      	strb	r2, [r3, #0]
		}
		keyPressed=false;
   144a4:	4b28      	ldr	r3, [pc, #160]	; (14548 <endCall+0x224>)
   144a6:	2200      	movs	r2, #0
   144a8:	701a      	strb	r2, [r3, #0]
		m2mAck=false;
   144aa:	4b23      	ldr	r3, [pc, #140]	; (14538 <endCall+0x214>)
   144ac:	2200      	movs	r2, #0
   144ae:	701a      	strb	r2, [r3, #0]
	}
	callAccepted = false;
   144b0:	4b17      	ldr	r3, [pc, #92]	; (14510 <endCall+0x1ec>)
   144b2:	2200      	movs	r2, #0
   144b4:	701a      	strb	r2, [r3, #0]
	currentStatus = 'N';
   144b6:	4b12      	ldr	r3, [pc, #72]	; (14500 <endCall+0x1dc>)
   144b8:	224e      	movs	r2, #78	; 0x4e
   144ba:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'N';
   144bc:	4b11      	ldr	r3, [pc, #68]	; (14504 <endCall+0x1e0>)
   144be:	224e      	movs	r2, #78	; 0x4e
   144c0:	701a      	strb	r2, [r3, #0]

	isRegisteredNumber=false;
   144c2:	4b22      	ldr	r3, [pc, #136]	; (1454c <endCall+0x228>)
   144c4:	2200      	movs	r2, #0
   144c6:	701a      	strb	r2, [r3, #0]
	obtainEventTimer = xTaskGetTickCount();
   144c8:	4b15      	ldr	r3, [pc, #84]	; (14520 <endCall+0x1fc>)
   144ca:	4798      	blx	r3
   144cc:	0002      	movs	r2, r0
   144ce:	4b20      	ldr	r3, [pc, #128]	; (14550 <endCall+0x22c>)
   144d0:	601a      	str	r2, [r3, #0]
	obtainNewEvent = false;
   144d2:	4b20      	ldr	r3, [pc, #128]	; (14554 <endCall+0x230>)
   144d4:	2200      	movs	r2, #0
   144d6:	701a      	strb	r2, [r3, #0]
}
   144d8:	46c0      	nop			; (mov r8, r8)
   144da:	46bd      	mov	sp, r7
   144dc:	bd80      	pop	{r7, pc}
   144de:	46c0      	nop			; (mov r8, r8)
   144e0:	200006d8 	.word	0x200006d8
   144e4:	20000794 	.word	0x20000794
   144e8:	00013015 	.word	0x00013015
   144ec:	0001cc35 	.word	0x0001cc35
   144f0:	0001ffe9 	.word	0x0001ffe9
   144f4:	2000073c 	.word	0x2000073c
   144f8:	2000062c 	.word	0x2000062c
   144fc:	2000080b 	.word	0x2000080b
   14500:	200007d8 	.word	0x200007d8
   14504:	20000787 	.word	0x20000787
   14508:	2000073b 	.word	0x2000073b
   1450c:	200006d9 	.word	0x200006d9
   14510:	20000796 	.word	0x20000796
   14514:	20000654 	.word	0x20000654
   14518:	20000614 	.word	0x20000614
   1451c:	200007ce 	.word	0x200007ce
   14520:	0002034d 	.word	0x0002034d
   14524:	200007f0 	.word	0x200007f0
   14528:	2000075b 	.word	0x2000075b
   1452c:	2000076d 	.word	0x2000076d
   14530:	20000554 	.word	0x20000554
   14534:	200007cf 	.word	0x200007cf
   14538:	20000720 	.word	0x20000720
   1453c:	20000721 	.word	0x20000721
   14540:	0001bb01 	.word	0x0001bb01
   14544:	20000786 	.word	0x20000786
   14548:	200007cc 	.word	0x200007cc
   1454c:	20000790 	.word	0x20000790
   14550:	20000810 	.word	0x20000810
   14554:	2000076a 	.word	0x2000076a

00014558 <makeCall>:


void makeCall(void)
{
   14558:	b580      	push	{r7, lr}
   1455a:	b086      	sub	sp, #24
   1455c:	af00      	add	r7, sp, #0
	inCall=true;
   1455e:	4b20      	ldr	r3, [pc, #128]	; (145e0 <makeCall+0x88>)
   14560:	2201      	movs	r2, #1
   14562:	701a      	strb	r2, [r3, #0]
	
	char command[20] = {0};
   14564:	1d3b      	adds	r3, r7, #4
   14566:	0018      	movs	r0, r3
   14568:	2314      	movs	r3, #20
   1456a:	001a      	movs	r2, r3
   1456c:	2100      	movs	r1, #0
   1456e:	4b1d      	ldr	r3, [pc, #116]	; (145e4 <makeCall+0x8c>)
   14570:	4798      	blx	r3
	
	if(m2m_Numbers_struct.m2mSetting && m2mEvent)
   14572:	4b1d      	ldr	r3, [pc, #116]	; (145e8 <makeCall+0x90>)
   14574:	795b      	ldrb	r3, [r3, #5]
   14576:	2b00      	cmp	r3, #0
   14578:	d008      	beq.n	1458c <makeCall+0x34>
   1457a:	4b1c      	ldr	r3, [pc, #112]	; (145ec <makeCall+0x94>)
   1457c:	781b      	ldrb	r3, [r3, #0]
   1457e:	2b00      	cmp	r3, #0
   14580:	d004      	beq.n	1458c <makeCall+0x34>
	{
		getM2MRemoteNumber(command);
   14582:	1d3b      	adds	r3, r7, #4
   14584:	0018      	movs	r0, r3
   14586:	4b1a      	ldr	r3, [pc, #104]	; (145f0 <makeCall+0x98>)
   14588:	4798      	blx	r3
   1458a:	e00f      	b.n	145ac <makeCall+0x54>
	}
	else
	{
		if(retries)
   1458c:	4b19      	ldr	r3, [pc, #100]	; (145f4 <makeCall+0x9c>)
   1458e:	781b      	ldrb	r3, [r3, #0]
   14590:	2b00      	cmp	r3, #0
   14592:	d007      	beq.n	145a4 <makeCall+0x4c>
		{
			getIndexedNumber(command,user_count_struct.secondaryNumberIndex);
   14594:	4b18      	ldr	r3, [pc, #96]	; (145f8 <makeCall+0xa0>)
   14596:	791a      	ldrb	r2, [r3, #4]
   14598:	1d3b      	adds	r3, r7, #4
   1459a:	0011      	movs	r1, r2
   1459c:	0018      	movs	r0, r3
   1459e:	4b17      	ldr	r3, [pc, #92]	; (145fc <makeCall+0xa4>)
   145a0:	4798      	blx	r3
   145a2:	e003      	b.n	145ac <makeCall+0x54>
		}
		else
		{
			getActiveNumber(command);
   145a4:	1d3b      	adds	r3, r7, #4
   145a6:	0018      	movs	r0, r3
   145a8:	4b15      	ldr	r3, [pc, #84]	; (14600 <makeCall+0xa8>)
   145aa:	4798      	blx	r3
		}
	}
	gsm_call_to_dial_a_number(command);
   145ac:	1d3b      	adds	r3, r7, #4
   145ae:	0018      	movs	r0, r3
   145b0:	4b14      	ldr	r3, [pc, #80]	; (14604 <makeCall+0xac>)
   145b2:	4798      	blx	r3
	setCallStateOnLCD(LCDCALLSTATE_OUTGOING,command,false);
   145b4:	1d3b      	adds	r3, r7, #4
   145b6:	2200      	movs	r2, #0
   145b8:	0019      	movs	r1, r3
   145ba:	2003      	movs	r0, #3
   145bc:	4b12      	ldr	r3, [pc, #72]	; (14608 <makeCall+0xb0>)
   145be:	4798      	blx	r3
	callCutWait = xTaskGetTickCount();
   145c0:	4b12      	ldr	r3, [pc, #72]	; (1460c <makeCall+0xb4>)
   145c2:	4798      	blx	r3
   145c4:	0002      	movs	r2, r0
   145c6:	4b12      	ldr	r3, [pc, #72]	; (14610 <makeCall+0xb8>)
   145c8:	601a      	str	r2, [r3, #0]
	currentStatus = 'R';
   145ca:	4b12      	ldr	r3, [pc, #72]	; (14614 <makeCall+0xbc>)
   145cc:	2252      	movs	r2, #82	; 0x52
   145ce:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'O';
   145d0:	4b11      	ldr	r3, [pc, #68]	; (14618 <makeCall+0xc0>)
   145d2:	224f      	movs	r2, #79	; 0x4f
   145d4:	701a      	strb	r2, [r3, #0]
}
   145d6:	46c0      	nop			; (mov r8, r8)
   145d8:	46bd      	mov	sp, r7
   145da:	b006      	add	sp, #24
   145dc:	bd80      	pop	{r7, pc}
   145de:	46c0      	nop			; (mov r8, r8)
   145e0:	20000794 	.word	0x20000794
   145e4:	00028f13 	.word	0x00028f13
   145e8:	20000554 	.word	0x20000554
   145ec:	2000073b 	.word	0x2000073b
   145f0:	00010b05 	.word	0x00010b05
   145f4:	200006d9 	.word	0x200006d9
   145f8:	20000614 	.word	0x20000614
   145fc:	00010915 	.word	0x00010915
   14600:	00010d1d 	.word	0x00010d1d
   14604:	00012e51 	.word	0x00012e51
   14608:	0001cc35 	.word	0x0001cc35
   1460c:	0002034d 	.word	0x0002034d
   14610:	20000814 	.word	0x20000814
   14614:	200007d8 	.word	0x200007d8
   14618:	20000787 	.word	0x20000787

0001461c <acceptCall>:

void acceptCall(void)
{
   1461c:	b580      	push	{r7, lr}
   1461e:	af00      	add	r7, sp, #0
	isRegisteredNumber=false;   //clear flag for next call, in case any error occures and endCall() is not called for ending the call
   14620:	4b0a      	ldr	r3, [pc, #40]	; (1464c <acceptCall+0x30>)
   14622:	2200      	movs	r2, #0
   14624:	701a      	strb	r2, [r3, #0]
	callAccepted = true;
   14626:	4b0a      	ldr	r3, [pc, #40]	; (14650 <acceptCall+0x34>)
   14628:	2201      	movs	r2, #1
   1462a:	701a      	strb	r2, [r3, #0]
	gsm_answer_an_incomming_call();
   1462c:	4b09      	ldr	r3, [pc, #36]	; (14654 <acceptCall+0x38>)
   1462e:	4798      	blx	r3
	currentStatus = 'I';
   14630:	4b09      	ldr	r3, [pc, #36]	; (14658 <acceptCall+0x3c>)
   14632:	2249      	movs	r2, #73	; 0x49
   14634:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'I';
   14636:	4b09      	ldr	r3, [pc, #36]	; (1465c <acceptCall+0x40>)
   14638:	2249      	movs	r2, #73	; 0x49
   1463a:	701a      	strb	r2, [r3, #0]
	playSound('M',true);
   1463c:	2101      	movs	r1, #1
   1463e:	204d      	movs	r0, #77	; 0x4d
   14640:	4b07      	ldr	r3, [pc, #28]	; (14660 <acceptCall+0x44>)
   14642:	4798      	blx	r3
	//displayInIncomingCall
}
   14644:	46c0      	nop			; (mov r8, r8)
   14646:	46bd      	mov	sp, r7
   14648:	bd80      	pop	{r7, pc}
   1464a:	46c0      	nop			; (mov r8, r8)
   1464c:	20000790 	.word	0x20000790
   14650:	20000796 	.word	0x20000796
   14654:	00012ee9 	.word	0x00012ee9
   14658:	200007d8 	.word	0x200007d8
   1465c:	20000787 	.word	0x20000787
   14660:	00014665 	.word	0x00014665

00014664 <playSound>:

//void playSound(char actionType, bool newAction=true)
void playSound(char actionTypeT, bool newAction)
{
   14664:	b580      	push	{r7, lr}
   14666:	b082      	sub	sp, #8
   14668:	af00      	add	r7, sp, #0
   1466a:	0002      	movs	r2, r0
   1466c:	1dfb      	adds	r3, r7, #7
   1466e:	701a      	strb	r2, [r3, #0]
   14670:	1dbb      	adds	r3, r7, #6
   14672:	1c0a      	adds	r2, r1, #0
   14674:	701a      	strb	r2, [r3, #0]
	gsm_stop_play_record_file();
   14676:	4b14      	ldr	r3, [pc, #80]	; (146c8 <playSound+0x64>)
   14678:	4798      	blx	r3
	bplaySound = true;
   1467a:	4b14      	ldr	r3, [pc, #80]	; (146cc <playSound+0x68>)
   1467c:	2201      	movs	r2, #1
   1467e:	701a      	strb	r2, [r3, #0]
	if (newAction)
   14680:	1dbb      	adds	r3, r7, #6
   14682:	781b      	ldrb	r3, [r3, #0]
   14684:	2b00      	cmp	r3, #0
   14686:	d016      	beq.n	146b6 <playSound+0x52>
	{
		maxPlayingFiles=1;
   14688:	4b11      	ldr	r3, [pc, #68]	; (146d0 <playSound+0x6c>)
   1468a:	2201      	movs	r2, #1
   1468c:	701a      	strb	r2, [r3, #0]
		currentPlayingFileIndex=0;
   1468e:	4b11      	ldr	r3, [pc, #68]	; (146d4 <playSound+0x70>)
   14690:	2200      	movs	r2, #0
   14692:	701a      	strb	r2, [r3, #0]
		playFilesList[currentPlayingFileIndex]=actionTypeT;
   14694:	4b0f      	ldr	r3, [pc, #60]	; (146d4 <playSound+0x70>)
   14696:	781b      	ldrb	r3, [r3, #0]
   14698:	0019      	movs	r1, r3
   1469a:	4b0f      	ldr	r3, [pc, #60]	; (146d8 <playSound+0x74>)
   1469c:	1dfa      	adds	r2, r7, #7
   1469e:	7812      	ldrb	r2, [r2, #0]
   146a0:	545a      	strb	r2, [r3, r1]
		playFilesList[currentPlayingFileIndex+1]='\0';
   146a2:	4b0c      	ldr	r3, [pc, #48]	; (146d4 <playSound+0x70>)
   146a4:	781b      	ldrb	r3, [r3, #0]
   146a6:	3301      	adds	r3, #1
   146a8:	4a0b      	ldr	r2, [pc, #44]	; (146d8 <playSound+0x74>)
   146aa:	2100      	movs	r1, #0
   146ac:	54d1      	strb	r1, [r2, r3]
		actionType = actionTypeT;
   146ae:	4b0b      	ldr	r3, [pc, #44]	; (146dc <playSound+0x78>)
   146b0:	1dfa      	adds	r2, r7, #7
   146b2:	7812      	ldrb	r2, [r2, #0]
   146b4:	701a      	strb	r2, [r3, #0]
	}
	playFile = actionTypeT;
   146b6:	4b0a      	ldr	r3, [pc, #40]	; (146e0 <playSound+0x7c>)
   146b8:	1dfa      	adds	r2, r7, #7
   146ba:	7812      	ldrb	r2, [r2, #0]
   146bc:	701a      	strb	r2, [r3, #0]
}
   146be:	46c0      	nop			; (mov r8, r8)
   146c0:	46bd      	mov	sp, r7
   146c2:	b002      	add	sp, #8
   146c4:	bd80      	pop	{r7, pc}
   146c6:	46c0      	nop			; (mov r8, r8)
   146c8:	00013075 	.word	0x00013075
   146cc:	20000861 	.word	0x20000861
   146d0:	200007d0 	.word	0x200007d0
   146d4:	200007c0 	.word	0x200007c0
   146d8:	20000744 	.word	0x20000744
   146dc:	2000075b 	.word	0x2000075b
   146e0:	200007bf 	.word	0x200007bf

000146e4 <playSoundElligible>:

bool playSoundElligible(void)
{
   146e4:	b580      	push	{r7, lr}
   146e6:	af00      	add	r7, sp, #0
	return (bplaySound && ((xTaskGetTickCount() - soundWait) > (soundWaitTime * 100)));
   146e8:	4b0d      	ldr	r3, [pc, #52]	; (14720 <playSoundElligible+0x3c>)
   146ea:	781b      	ldrb	r3, [r3, #0]
   146ec:	2b00      	cmp	r3, #0
   146ee:	d00e      	beq.n	1470e <playSoundElligible+0x2a>
   146f0:	4b0c      	ldr	r3, [pc, #48]	; (14724 <playSoundElligible+0x40>)
   146f2:	4798      	blx	r3
   146f4:	0002      	movs	r2, r0
   146f6:	4b0c      	ldr	r3, [pc, #48]	; (14728 <playSoundElligible+0x44>)
   146f8:	681b      	ldr	r3, [r3, #0]
   146fa:	1ad3      	subs	r3, r2, r3
   146fc:	4a0b      	ldr	r2, [pc, #44]	; (1472c <playSoundElligible+0x48>)
   146fe:	7812      	ldrb	r2, [r2, #0]
   14700:	0011      	movs	r1, r2
   14702:	2264      	movs	r2, #100	; 0x64
   14704:	434a      	muls	r2, r1
   14706:	4293      	cmp	r3, r2
   14708:	d901      	bls.n	1470e <playSoundElligible+0x2a>
   1470a:	2301      	movs	r3, #1
   1470c:	e000      	b.n	14710 <playSoundElligible+0x2c>
   1470e:	2300      	movs	r3, #0
   14710:	1c1a      	adds	r2, r3, #0
   14712:	2301      	movs	r3, #1
   14714:	4013      	ands	r3, r2
   14716:	b2db      	uxtb	r3, r3
}
   14718:	0018      	movs	r0, r3
   1471a:	46bd      	mov	sp, r7
   1471c:	bd80      	pop	{r7, pc}
   1471e:	46c0      	nop			; (mov r8, r8)
   14720:	20000861 	.word	0x20000861
   14724:	0002034d 	.word	0x0002034d
   14728:	2000083c 	.word	0x2000083c
   1472c:	200007d1 	.word	0x200007d1

00014730 <triggerPlaySound>:

void triggerPlaySound(void)
{
   14730:	b580      	push	{r7, lr}
   14732:	af00      	add	r7, sp, #0
	if(maxPlayingFiles>1)
   14734:	4b0b      	ldr	r3, [pc, #44]	; (14764 <triggerPlaySound+0x34>)
   14736:	781b      	ldrb	r3, [r3, #0]
   14738:	2b01      	cmp	r3, #1
   1473a:	d906      	bls.n	1474a <triggerPlaySound+0x1a>
	{
		gsm_play_record_file((char*)playFile,false);
   1473c:	4b0a      	ldr	r3, [pc, #40]	; (14768 <triggerPlaySound+0x38>)
   1473e:	781b      	ldrb	r3, [r3, #0]
   14740:	2100      	movs	r1, #0
   14742:	0018      	movs	r0, r3
   14744:	4b09      	ldr	r3, [pc, #36]	; (1476c <triggerPlaySound+0x3c>)
   14746:	4798      	blx	r3
   14748:	e005      	b.n	14756 <triggerPlaySound+0x26>
	}
	else
	{
		gsm_play_record_file((char*)playFile,true);
   1474a:	4b07      	ldr	r3, [pc, #28]	; (14768 <triggerPlaySound+0x38>)
   1474c:	781b      	ldrb	r3, [r3, #0]
   1474e:	2101      	movs	r1, #1
   14750:	0018      	movs	r0, r3
   14752:	4b06      	ldr	r3, [pc, #24]	; (1476c <triggerPlaySound+0x3c>)
   14754:	4798      	blx	r3
	}
	bplaySound = false;
   14756:	4b06      	ldr	r3, [pc, #24]	; (14770 <triggerPlaySound+0x40>)
   14758:	2200      	movs	r2, #0
   1475a:	701a      	strb	r2, [r3, #0]
}
   1475c:	46c0      	nop			; (mov r8, r8)
   1475e:	46bd      	mov	sp, r7
   14760:	bd80      	pop	{r7, pc}
   14762:	46c0      	nop			; (mov r8, r8)
   14764:	200007d0 	.word	0x200007d0
   14768:	200007bf 	.word	0x200007bf
   1476c:	000130a5 	.word	0x000130a5
   14770:	20000861 	.word	0x20000861

00014774 <playSoundAgain>:

void playSoundAgain(char *string)
{
   14774:	b580      	push	{r7, lr}
   14776:	b082      	sub	sp, #8
   14778:	af00      	add	r7, sp, #0
   1477a:	6078      	str	r0, [r7, #4]
	if (!bplaySound && gsm_responseLine_is_StopSound_Received(string))
   1477c:	4b18      	ldr	r3, [pc, #96]	; (147e0 <playSoundAgain+0x6c>)
   1477e:	781b      	ldrb	r3, [r3, #0]
   14780:	2201      	movs	r2, #1
   14782:	4053      	eors	r3, r2
   14784:	b2db      	uxtb	r3, r3
   14786:	2b00      	cmp	r3, #0
   14788:	d025      	beq.n	147d6 <playSoundAgain+0x62>
   1478a:	687b      	ldr	r3, [r7, #4]
   1478c:	0018      	movs	r0, r3
   1478e:	4b15      	ldr	r3, [pc, #84]	; (147e4 <playSoundAgain+0x70>)
   14790:	4798      	blx	r3
   14792:	1e03      	subs	r3, r0, #0
   14794:	d01f      	beq.n	147d6 <playSoundAgain+0x62>
	{
		if(maxPlayingFiles>1)
   14796:	4b14      	ldr	r3, [pc, #80]	; (147e8 <playSoundAgain+0x74>)
   14798:	781b      	ldrb	r3, [r3, #0]
   1479a:	2b01      	cmp	r3, #1
   1479c:	d91b      	bls.n	147d6 <playSoundAgain+0x62>
		{
			if(currentPlayingFileIndex<maxPlayingFiles-1)
   1479e:	4b13      	ldr	r3, [pc, #76]	; (147ec <playSoundAgain+0x78>)
   147a0:	781b      	ldrb	r3, [r3, #0]
   147a2:	001a      	movs	r2, r3
   147a4:	4b10      	ldr	r3, [pc, #64]	; (147e8 <playSoundAgain+0x74>)
   147a6:	781b      	ldrb	r3, [r3, #0]
   147a8:	3b01      	subs	r3, #1
   147aa:	429a      	cmp	r2, r3
   147ac:	da0f      	bge.n	147ce <playSoundAgain+0x5a>
			{
				playSound(playFilesList[++currentPlayingFileIndex],false);
   147ae:	4b0f      	ldr	r3, [pc, #60]	; (147ec <playSoundAgain+0x78>)
   147b0:	781b      	ldrb	r3, [r3, #0]
   147b2:	3301      	adds	r3, #1
   147b4:	b2da      	uxtb	r2, r3
   147b6:	4b0d      	ldr	r3, [pc, #52]	; (147ec <playSoundAgain+0x78>)
   147b8:	701a      	strb	r2, [r3, #0]
   147ba:	4b0c      	ldr	r3, [pc, #48]	; (147ec <playSoundAgain+0x78>)
   147bc:	781b      	ldrb	r3, [r3, #0]
   147be:	001a      	movs	r2, r3
   147c0:	4b0b      	ldr	r3, [pc, #44]	; (147f0 <playSoundAgain+0x7c>)
   147c2:	5c9b      	ldrb	r3, [r3, r2]
   147c4:	2100      	movs	r1, #0
   147c6:	0018      	movs	r0, r3
   147c8:	4b0a      	ldr	r3, [pc, #40]	; (147f4 <playSoundAgain+0x80>)
   147ca:	4798      	blx	r3
			{
				playSound('M',true);
			}
		}
	}
}
   147cc:	e003      	b.n	147d6 <playSoundAgain+0x62>
				playSound('M',true);
   147ce:	2101      	movs	r1, #1
   147d0:	204d      	movs	r0, #77	; 0x4d
   147d2:	4b08      	ldr	r3, [pc, #32]	; (147f4 <playSoundAgain+0x80>)
   147d4:	4798      	blx	r3
}
   147d6:	46c0      	nop			; (mov r8, r8)
   147d8:	46bd      	mov	sp, r7
   147da:	b002      	add	sp, #8
   147dc:	bd80      	pop	{r7, pc}
   147de:	46c0      	nop			; (mov r8, r8)
   147e0:	20000861 	.word	0x20000861
   147e4:	000136b9 	.word	0x000136b9
   147e8:	200007d0 	.word	0x200007d0
   147ec:	200007c0 	.word	0x200007c0
   147f0:	20000744 	.word	0x20000744
   147f4:	00014665 	.word	0x00014665

000147f8 <playRepeatedFiles>:

void playRepeatedFiles(char *fileList)
{
   147f8:	b580      	push	{r7, lr}
   147fa:	b082      	sub	sp, #8
   147fc:	af00      	add	r7, sp, #0
   147fe:	6078      	str	r0, [r7, #4]
	if(strlen(fileList)<15)
   14800:	687b      	ldr	r3, [r7, #4]
   14802:	0018      	movs	r0, r3
   14804:	4b14      	ldr	r3, [pc, #80]	; (14858 <playRepeatedFiles+0x60>)
   14806:	4798      	blx	r3
   14808:	0003      	movs	r3, r0
   1480a:	2b0e      	cmp	r3, #14
   1480c:	d81f      	bhi.n	1484e <playRepeatedFiles+0x56>
	{
		currentPlayingFileIndex=0;
   1480e:	4b13      	ldr	r3, [pc, #76]	; (1485c <playRepeatedFiles+0x64>)
   14810:	2200      	movs	r2, #0
   14812:	701a      	strb	r2, [r3, #0]
		maxPlayingFiles=strlen(fileList);
   14814:	687b      	ldr	r3, [r7, #4]
   14816:	0018      	movs	r0, r3
   14818:	4b0f      	ldr	r3, [pc, #60]	; (14858 <playRepeatedFiles+0x60>)
   1481a:	4798      	blx	r3
   1481c:	0003      	movs	r3, r0
   1481e:	b2da      	uxtb	r2, r3
   14820:	4b0f      	ldr	r3, [pc, #60]	; (14860 <playRepeatedFiles+0x68>)
   14822:	701a      	strb	r2, [r3, #0]
		strcpy(playFilesList,fileList);
   14824:	687a      	ldr	r2, [r7, #4]
   14826:	4b0f      	ldr	r3, [pc, #60]	; (14864 <playRepeatedFiles+0x6c>)
   14828:	0011      	movs	r1, r2
   1482a:	0018      	movs	r0, r3
   1482c:	4b0e      	ldr	r3, [pc, #56]	; (14868 <playRepeatedFiles+0x70>)
   1482e:	4798      	blx	r3
		soundWait = xTaskGetTickCount();
   14830:	4b0e      	ldr	r3, [pc, #56]	; (1486c <playRepeatedFiles+0x74>)
   14832:	4798      	blx	r3
   14834:	0002      	movs	r2, r0
   14836:	4b0e      	ldr	r3, [pc, #56]	; (14870 <playRepeatedFiles+0x78>)
   14838:	601a      	str	r2, [r3, #0]
		playFile = playFilesList[currentPlayingFileIndex];
   1483a:	4b08      	ldr	r3, [pc, #32]	; (1485c <playRepeatedFiles+0x64>)
   1483c:	781b      	ldrb	r3, [r3, #0]
   1483e:	001a      	movs	r2, r3
   14840:	4b08      	ldr	r3, [pc, #32]	; (14864 <playRepeatedFiles+0x6c>)
   14842:	5c9a      	ldrb	r2, [r3, r2]
   14844:	4b0b      	ldr	r3, [pc, #44]	; (14874 <playRepeatedFiles+0x7c>)
   14846:	701a      	strb	r2, [r3, #0]
		bplaySound = true;
   14848:	4b0b      	ldr	r3, [pc, #44]	; (14878 <playRepeatedFiles+0x80>)
   1484a:	2201      	movs	r2, #1
   1484c:	701a      	strb	r2, [r3, #0]
	}
}
   1484e:	46c0      	nop			; (mov r8, r8)
   14850:	46bd      	mov	sp, r7
   14852:	b002      	add	sp, #8
   14854:	bd80      	pop	{r7, pc}
   14856:	46c0      	nop			; (mov r8, r8)
   14858:	000291a3 	.word	0x000291a3
   1485c:	200007c0 	.word	0x200007c0
   14860:	200007d0 	.word	0x200007d0
   14864:	20000744 	.word	0x20000744
   14868:	00029193 	.word	0x00029193
   1486c:	0002034d 	.word	0x0002034d
   14870:	2000083c 	.word	0x2000083c
   14874:	200007bf 	.word	0x200007bf
   14878:	20000861 	.word	0x20000861

0001487c <callTimerExpire>:

bool callTimerExpire(void)
{
   1487c:	b580      	push	{r7, lr}
   1487e:	af00      	add	r7, sp, #0
	return ((xTaskGetTickCount() - callCutWait) >= (callCutWaitTime * 100));
   14880:	4b09      	ldr	r3, [pc, #36]	; (148a8 <callTimerExpire+0x2c>)
   14882:	4798      	blx	r3
   14884:	0002      	movs	r2, r0
   14886:	4b09      	ldr	r3, [pc, #36]	; (148ac <callTimerExpire+0x30>)
   14888:	681b      	ldr	r3, [r3, #0]
   1488a:	1ad2      	subs	r2, r2, r3
   1488c:	4b08      	ldr	r3, [pc, #32]	; (148b0 <callTimerExpire+0x34>)
   1488e:	881b      	ldrh	r3, [r3, #0]
   14890:	0019      	movs	r1, r3
   14892:	2364      	movs	r3, #100	; 0x64
   14894:	434b      	muls	r3, r1
   14896:	0019      	movs	r1, r3
   14898:	2300      	movs	r3, #0
   1489a:	428a      	cmp	r2, r1
   1489c:	415b      	adcs	r3, r3
   1489e:	b2db      	uxtb	r3, r3
}
   148a0:	0018      	movs	r0, r3
   148a2:	46bd      	mov	sp, r7
   148a4:	bd80      	pop	{r7, pc}
   148a6:	46c0      	nop			; (mov r8, r8)
   148a8:	0002034d 	.word	0x0002034d
   148ac:	20000814 	.word	0x20000814
   148b0:	2000075c 	.word	0x2000075c

000148b4 <OutGoingcallState>:

char OutGoingcallState(char *response)
{
   148b4:	b580      	push	{r7, lr}
   148b6:	b082      	sub	sp, #8
   148b8:	af00      	add	r7, sp, #0
   148ba:	6078      	str	r0, [r7, #4]
	if(strstr(response,"+CLCC: 1,0,2"))
   148bc:	4a16      	ldr	r2, [pc, #88]	; (14918 <OutGoingcallState+0x64>)
   148be:	687b      	ldr	r3, [r7, #4]
   148c0:	0011      	movs	r1, r2
   148c2:	0018      	movs	r0, r3
   148c4:	4b15      	ldr	r3, [pc, #84]	; (1491c <OutGoingcallState+0x68>)
   148c6:	4798      	blx	r3
   148c8:	1e03      	subs	r3, r0, #0
   148ca:	d001      	beq.n	148d0 <OutGoingcallState+0x1c>
	{
		return 'D';								//dialling
   148cc:	2344      	movs	r3, #68	; 0x44
   148ce:	e01e      	b.n	1490e <OutGoingcallState+0x5a>
	}
	else if (strstr(response,"+CLCC: 1,0,3"))
   148d0:	4a13      	ldr	r2, [pc, #76]	; (14920 <OutGoingcallState+0x6c>)
   148d2:	687b      	ldr	r3, [r7, #4]
   148d4:	0011      	movs	r1, r2
   148d6:	0018      	movs	r0, r3
   148d8:	4b10      	ldr	r3, [pc, #64]	; (1491c <OutGoingcallState+0x68>)
   148da:	4798      	blx	r3
   148dc:	1e03      	subs	r3, r0, #0
   148de:	d001      	beq.n	148e4 <OutGoingcallState+0x30>
	{
		return 'R';								//alerting
   148e0:	2352      	movs	r3, #82	; 0x52
   148e2:	e014      	b.n	1490e <OutGoingcallState+0x5a>
	}
	else if (strstr(response,"+CLCC: 1,0,0"))
   148e4:	4a0f      	ldr	r2, [pc, #60]	; (14924 <OutGoingcallState+0x70>)
   148e6:	687b      	ldr	r3, [r7, #4]
   148e8:	0011      	movs	r1, r2
   148ea:	0018      	movs	r0, r3
   148ec:	4b0b      	ldr	r3, [pc, #44]	; (1491c <OutGoingcallState+0x68>)
   148ee:	4798      	blx	r3
   148f0:	1e03      	subs	r3, r0, #0
   148f2:	d001      	beq.n	148f8 <OutGoingcallState+0x44>
	{
		return 'I';								//active call
   148f4:	2349      	movs	r3, #73	; 0x49
   148f6:	e00a      	b.n	1490e <OutGoingcallState+0x5a>
	}
	else if (strstr(response,"+CLCC: 1,0,6"))
   148f8:	4a0b      	ldr	r2, [pc, #44]	; (14928 <OutGoingcallState+0x74>)
   148fa:	687b      	ldr	r3, [r7, #4]
   148fc:	0011      	movs	r1, r2
   148fe:	0018      	movs	r0, r3
   14900:	4b06      	ldr	r3, [pc, #24]	; (1491c <OutGoingcallState+0x68>)
   14902:	4798      	blx	r3
   14904:	1e03      	subs	r3, r0, #0
   14906:	d001      	beq.n	1490c <OutGoingcallState+0x58>
	{
		return 'E';								//call ended
   14908:	2345      	movs	r3, #69	; 0x45
   1490a:	e000      	b.n	1490e <OutGoingcallState+0x5a>
	}
	else
	{
		return 'N';
   1490c:	234e      	movs	r3, #78	; 0x4e
	}
}
   1490e:	0018      	movs	r0, r3
   14910:	46bd      	mov	sp, r7
   14912:	b002      	add	sp, #8
   14914:	bd80      	pop	{r7, pc}
   14916:	46c0      	nop			; (mov r8, r8)
   14918:	0002a10c 	.word	0x0002a10c
   1491c:	000291d3 	.word	0x000291d3
   14920:	0002a11c 	.word	0x0002a11c
   14924:	0002a12c 	.word	0x0002a12c
   14928:	0002a13c 	.word	0x0002a13c

0001492c <registerEvent>:

bool registerEvent(char eventType)
{
   1492c:	b580      	push	{r7, lr}
   1492e:	b082      	sub	sp, #8
   14930:	af00      	add	r7, sp, #0
   14932:	0002      	movs	r2, r0
   14934:	1dfb      	adds	r3, r7, #7
   14936:	701a      	strb	r2, [r3, #0]
	//if(isSIMReset())
	//{
	//return false;
	//}
	if(user_count_struct.current_user_no_count==0 || user_settings_parameter_struct.responseAddress=='N')
   14938:	4b34      	ldr	r3, [pc, #208]	; (14a0c <registerEvent+0xe0>)
   1493a:	789b      	ldrb	r3, [r3, #2]
   1493c:	2b00      	cmp	r3, #0
   1493e:	d003      	beq.n	14948 <registerEvent+0x1c>
   14940:	4b33      	ldr	r3, [pc, #204]	; (14a10 <registerEvent+0xe4>)
   14942:	795b      	ldrb	r3, [r3, #5]
   14944:	2b4e      	cmp	r3, #78	; 0x4e
   14946:	d101      	bne.n	1494c <registerEvent+0x20>
	{
		return true;
   14948:	2301      	movs	r3, #1
   1494a:	e05b      	b.n	14a04 <registerEvent+0xd8>
	}
	if (!initialized)
   1494c:	4b31      	ldr	r3, [pc, #196]	; (14a14 <registerEvent+0xe8>)
   1494e:	781b      	ldrb	r3, [r3, #0]
   14950:	b2db      	uxtb	r3, r3
   14952:	2201      	movs	r2, #1
   14954:	4053      	eors	r3, r2
   14956:	b2db      	uxtb	r3, r3
   14958:	2b00      	cmp	r3, #0
   1495a:	d001      	beq.n	14960 <registerEvent+0x34>
	{
		return true;
   1495c:	2301      	movs	r3, #1
   1495e:	e051      	b.n	14a04 <registerEvent+0xd8>
	}
	if(!eventStaged && actionType==eventType)
   14960:	4b2d      	ldr	r3, [pc, #180]	; (14a18 <registerEvent+0xec>)
   14962:	781b      	ldrb	r3, [r3, #0]
   14964:	2201      	movs	r2, #1
   14966:	4053      	eors	r3, r2
   14968:	b2db      	uxtb	r3, r3
   1496a:	2b00      	cmp	r3, #0
   1496c:	d007      	beq.n	1497e <registerEvent+0x52>
   1496e:	4b2b      	ldr	r3, [pc, #172]	; (14a1c <registerEvent+0xf0>)
   14970:	781b      	ldrb	r3, [r3, #0]
   14972:	1dfa      	adds	r2, r7, #7
   14974:	7812      	ldrb	r2, [r2, #0]
   14976:	429a      	cmp	r2, r3
   14978:	d101      	bne.n	1497e <registerEvent+0x52>
	{
		return true;
   1497a:	2301      	movs	r3, #1
   1497c:	e042      	b.n	14a04 <registerEvent+0xd8>
	}
	//if ((factory_settings_parameter_struct.ENABLE_M2M==true)?
	//(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged):
	//(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged))
	if(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged)
   1497e:	4b28      	ldr	r3, [pc, #160]	; (14a20 <registerEvent+0xf4>)
   14980:	781b      	ldrb	r3, [r3, #0]
   14982:	b2db      	uxtb	r3, r3
   14984:	2b4e      	cmp	r3, #78	; 0x4e
   14986:	d13c      	bne.n	14a02 <registerEvent+0xd6>
   14988:	4b26      	ldr	r3, [pc, #152]	; (14a24 <registerEvent+0xf8>)
   1498a:	781b      	ldrb	r3, [r3, #0]
   1498c:	b2db      	uxtb	r3, r3
   1498e:	2b4e      	cmp	r3, #78	; 0x4e
   14990:	d137      	bne.n	14a02 <registerEvent+0xd6>
   14992:	4b25      	ldr	r3, [pc, #148]	; (14a28 <registerEvent+0xfc>)
   14994:	781b      	ldrb	r3, [r3, #0]
   14996:	2b00      	cmp	r3, #0
   14998:	d033      	beq.n	14a02 <registerEvent+0xd6>
   1499a:	4b1f      	ldr	r3, [pc, #124]	; (14a18 <registerEvent+0xec>)
   1499c:	781b      	ldrb	r3, [r3, #0]
   1499e:	2201      	movs	r2, #1
   149a0:	4053      	eors	r3, r2
   149a2:	b2db      	uxtb	r3, r3
   149a4:	2b00      	cmp	r3, #0
   149a6:	d02c      	beq.n	14a02 <registerEvent+0xd6>
   149a8:	4b20      	ldr	r3, [pc, #128]	; (14a2c <registerEvent+0x100>)
   149aa:	781b      	ldrb	r3, [r3, #0]
   149ac:	2201      	movs	r2, #1
   149ae:	4053      	eors	r3, r2
   149b0:	b2db      	uxtb	r3, r3
   149b2:	2b00      	cmp	r3, #0
   149b4:	d025      	beq.n	14a02 <registerEvent+0xd6>
	{
		if(user_settings_parameter_struct.noCallAddress && checkNoCallTime())
   149b6:	4b16      	ldr	r3, [pc, #88]	; (14a10 <registerEvent+0xe4>)
   149b8:	7a5b      	ldrb	r3, [r3, #9]
   149ba:	2b00      	cmp	r3, #0
   149bc:	d005      	beq.n	149ca <registerEvent+0x9e>
   149be:	4b1c      	ldr	r3, [pc, #112]	; (14a30 <registerEvent+0x104>)
   149c0:	4798      	blx	r3
   149c2:	1e03      	subs	r3, r0, #0
   149c4:	d001      	beq.n	149ca <registerEvent+0x9e>
		{
			return true;
   149c6:	2301      	movs	r3, #1
   149c8:	e01c      	b.n	14a04 <registerEvent+0xd8>
		}
		retries=0;
   149ca:	4b1a      	ldr	r3, [pc, #104]	; (14a34 <registerEvent+0x108>)
   149cc:	2200      	movs	r2, #0
   149ce:	701a      	strb	r2, [r3, #0]
		if(user_settings_parameter_struct.eventStageAddress>0x00)
   149d0:	4b0f      	ldr	r3, [pc, #60]	; (14a10 <registerEvent+0xe4>)
   149d2:	7a1b      	ldrb	r3, [r3, #8]
   149d4:	2b00      	cmp	r3, #0
   149d6:	d00c      	beq.n	149f2 <registerEvent+0xc6>
		{
			tempEventStageTime=xTaskGetTickCount();
   149d8:	4b17      	ldr	r3, [pc, #92]	; (14a38 <registerEvent+0x10c>)
   149da:	4798      	blx	r3
   149dc:	0002      	movs	r2, r0
   149de:	4b17      	ldr	r3, [pc, #92]	; (14a3c <registerEvent+0x110>)
   149e0:	601a      	str	r2, [r3, #0]
			stagedEventType=eventType;
   149e2:	4b17      	ldr	r3, [pc, #92]	; (14a40 <registerEvent+0x114>)
   149e4:	1dfa      	adds	r2, r7, #7
   149e6:	7812      	ldrb	r2, [r2, #0]
   149e8:	701a      	strb	r2, [r3, #0]
			eventStaged=true;
   149ea:	4b0b      	ldr	r3, [pc, #44]	; (14a18 <registerEvent+0xec>)
   149ec:	2201      	movs	r2, #1
   149ee:	701a      	strb	r2, [r3, #0]
   149f0:	e005      	b.n	149fe <registerEvent+0xd2>
		}
		else
		{
			actionType = eventType;
   149f2:	4b0a      	ldr	r3, [pc, #40]	; (14a1c <registerEvent+0xf0>)
   149f4:	1dfa      	adds	r2, r7, #7
   149f6:	7812      	ldrb	r2, [r2, #0]
   149f8:	701a      	strb	r2, [r3, #0]
			makeResponseAction();
   149fa:	4b12      	ldr	r3, [pc, #72]	; (14a44 <registerEvent+0x118>)
   149fc:	4798      	blx	r3
		}
		return true;
   149fe:	2301      	movs	r3, #1
   14a00:	e000      	b.n	14a04 <registerEvent+0xd8>
	}
	else
	{
		return false;
   14a02:	2300      	movs	r3, #0
	}
}
   14a04:	0018      	movs	r0, r3
   14a06:	46bd      	mov	sp, r7
   14a08:	b002      	add	sp, #8
   14a0a:	bd80      	pop	{r7, pc}
   14a0c:	20000614 	.word	0x20000614
   14a10:	20000654 	.word	0x20000654
   14a14:	20000795 	.word	0x20000795
   14a18:	200007ce 	.word	0x200007ce
   14a1c:	2000075b 	.word	0x2000075b
   14a20:	200007d8 	.word	0x200007d8
   14a24:	20000787 	.word	0x20000787
   14a28:	2000076a 	.word	0x2000076a
   14a2c:	20000786 	.word	0x20000786
   14a30:	0001712d 	.word	0x0001712d
   14a34:	200006d9 	.word	0x200006d9
   14a38:	0002034d 	.word	0x0002034d
   14a3c:	200007f0 	.word	0x200007f0
   14a40:	2000076d 	.word	0x2000076d
   14a44:	000142f1 	.word	0x000142f1

00014a48 <registerM2MEvent>:

void registerM2MEvent(uint8_t eventNo)
{
   14a48:	b580      	push	{r7, lr}
   14a4a:	b082      	sub	sp, #8
   14a4c:	af00      	add	r7, sp, #0
   14a4e:	0002      	movs	r2, r0
   14a50:	1dfb      	adds	r3, r7, #7
   14a52:	701a      	strb	r2, [r3, #0]
	if (!initialized)
   14a54:	4b20      	ldr	r3, [pc, #128]	; (14ad8 <registerM2MEvent+0x90>)
   14a56:	781b      	ldrb	r3, [r3, #0]
   14a58:	b2db      	uxtb	r3, r3
   14a5a:	2201      	movs	r2, #1
   14a5c:	4053      	eors	r3, r2
   14a5e:	b2db      	uxtb	r3, r3
   14a60:	2b00      	cmp	r3, #0
   14a62:	d006      	beq.n	14a72 <registerM2MEvent+0x2a>
	{
		setM2MEventState(eventNo,ME_CLEARED);
   14a64:	1dfb      	adds	r3, r7, #7
   14a66:	781b      	ldrb	r3, [r3, #0]
   14a68:	2100      	movs	r1, #0
   14a6a:	0018      	movs	r0, r3
   14a6c:	4b1b      	ldr	r3, [pc, #108]	; (14adc <registerM2MEvent+0x94>)
   14a6e:	4798      	blx	r3
		return;
   14a70:	e02e      	b.n	14ad0 <registerM2MEvent+0x88>
	}

	if (currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged)
   14a72:	4b1b      	ldr	r3, [pc, #108]	; (14ae0 <registerM2MEvent+0x98>)
   14a74:	781b      	ldrb	r3, [r3, #0]
   14a76:	b2db      	uxtb	r3, r3
   14a78:	2b4e      	cmp	r3, #78	; 0x4e
   14a7a:	d129      	bne.n	14ad0 <registerM2MEvent+0x88>
   14a7c:	4b19      	ldr	r3, [pc, #100]	; (14ae4 <registerM2MEvent+0x9c>)
   14a7e:	781b      	ldrb	r3, [r3, #0]
   14a80:	b2db      	uxtb	r3, r3
   14a82:	2b4e      	cmp	r3, #78	; 0x4e
   14a84:	d124      	bne.n	14ad0 <registerM2MEvent+0x88>
   14a86:	4b18      	ldr	r3, [pc, #96]	; (14ae8 <registerM2MEvent+0xa0>)
   14a88:	781b      	ldrb	r3, [r3, #0]
   14a8a:	2b00      	cmp	r3, #0
   14a8c:	d020      	beq.n	14ad0 <registerM2MEvent+0x88>
   14a8e:	4b17      	ldr	r3, [pc, #92]	; (14aec <registerM2MEvent+0xa4>)
   14a90:	781b      	ldrb	r3, [r3, #0]
   14a92:	2201      	movs	r2, #1
   14a94:	4053      	eors	r3, r2
   14a96:	b2db      	uxtb	r3, r3
   14a98:	2b00      	cmp	r3, #0
   14a9a:	d019      	beq.n	14ad0 <registerM2MEvent+0x88>
   14a9c:	4b14      	ldr	r3, [pc, #80]	; (14af0 <registerM2MEvent+0xa8>)
   14a9e:	781b      	ldrb	r3, [r3, #0]
   14aa0:	2201      	movs	r2, #1
   14aa2:	4053      	eors	r3, r2
   14aa4:	b2db      	uxtb	r3, r3
   14aa6:	2b00      	cmp	r3, #0
   14aa8:	d012      	beq.n	14ad0 <registerM2MEvent+0x88>
	{
		setM2MEventState(eventNo,ME_SERVICING);
   14aaa:	1dfb      	adds	r3, r7, #7
   14aac:	781b      	ldrb	r3, [r3, #0]
   14aae:	2102      	movs	r1, #2
   14ab0:	0018      	movs	r0, r3
   14ab2:	4b0a      	ldr	r3, [pc, #40]	; (14adc <registerM2MEvent+0x94>)
   14ab4:	4798      	blx	r3
		m2mEvent=true;
   14ab6:	4b0f      	ldr	r3, [pc, #60]	; (14af4 <registerM2MEvent+0xac>)
   14ab8:	2201      	movs	r2, #1
   14aba:	701a      	strb	r2, [r3, #0]
		m2mEventNo = eventNo;
   14abc:	4b0e      	ldr	r3, [pc, #56]	; (14af8 <registerM2MEvent+0xb0>)
   14abe:	1dfa      	adds	r2, r7, #7
   14ac0:	7812      	ldrb	r2, [r2, #0]
   14ac2:	701a      	strb	r2, [r3, #0]
		m2mEventCalls=0;
   14ac4:	4b0d      	ldr	r3, [pc, #52]	; (14afc <registerM2MEvent+0xb4>)
   14ac6:	2200      	movs	r2, #0
   14ac8:	701a      	strb	r2, [r3, #0]
		makeResponseAction();
   14aca:	4b0d      	ldr	r3, [pc, #52]	; (14b00 <registerM2MEvent+0xb8>)
   14acc:	4798      	blx	r3
		return;
   14ace:	46c0      	nop			; (mov r8, r8)
	}
}
   14ad0:	46bd      	mov	sp, r7
   14ad2:	b002      	add	sp, #8
   14ad4:	bd80      	pop	{r7, pc}
   14ad6:	46c0      	nop			; (mov r8, r8)
   14ad8:	20000795 	.word	0x20000795
   14adc:	0001bb01 	.word	0x0001bb01
   14ae0:	200007d8 	.word	0x200007d8
   14ae4:	20000787 	.word	0x20000787
   14ae8:	2000076a 	.word	0x2000076a
   14aec:	200007ce 	.word	0x200007ce
   14af0:	20000786 	.word	0x20000786
   14af4:	2000073b 	.word	0x2000073b
   14af8:	20000721 	.word	0x20000721
   14afc:	200007cf 	.word	0x200007cf
   14b00:	000142f1 	.word	0x000142f1

00014b04 <setMotorMGRResponse>:

void setMotorMGRResponse(char response)
{
   14b04:	b580      	push	{r7, lr}
   14b06:	b082      	sub	sp, #8
   14b08:	af00      	add	r7, sp, #0
   14b0a:	0002      	movs	r2, r0
   14b0c:	1dfb      	adds	r3, r7, #7
   14b0e:	701a      	strb	r2, [r3, #0]
	if(currentStatus!='I')    // not in Call than return.
   14b10:	4b07      	ldr	r3, [pc, #28]	; (14b30 <setMotorMGRResponse+0x2c>)
   14b12:	781b      	ldrb	r3, [r3, #0]
   14b14:	b2db      	uxtb	r3, r3
   14b16:	2b49      	cmp	r3, #73	; 0x49
   14b18:	d106      	bne.n	14b28 <setMotorMGRResponse+0x24>
	{
		return;
	}
	playSound(response,true);
   14b1a:	1dfb      	adds	r3, r7, #7
   14b1c:	781b      	ldrb	r3, [r3, #0]
   14b1e:	2101      	movs	r1, #1
   14b20:	0018      	movs	r0, r3
   14b22:	4b04      	ldr	r3, [pc, #16]	; (14b34 <setMotorMGRResponse+0x30>)
   14b24:	4798      	blx	r3
   14b26:	e000      	b.n	14b2a <setMotorMGRResponse+0x26>
		return;
   14b28:	46c0      	nop			; (mov r8, r8)
}
   14b2a:	46bd      	mov	sp, r7
   14b2c:	b002      	add	sp, #8
   14b2e:	bd80      	pop	{r7, pc}
   14b30:	200007d8 	.word	0x200007d8
   14b34:	00014665 	.word	0x00014665

00014b38 <checkRespSMS>:

void checkRespSMS(char t1)
{
   14b38:	b580      	push	{r7, lr}
   14b3a:	b082      	sub	sp, #8
   14b3c:	af00      	add	r7, sp, #0
   14b3e:	0002      	movs	r2, r0
   14b40:	1dfb      	adds	r3, r7, #7
   14b42:	701a      	strb	r2, [r3, #0]
	if (!callAccepted && user_settings_parameter_struct.responseAddress=='A')
   14b44:	4b0c      	ldr	r3, [pc, #48]	; (14b78 <checkRespSMS+0x40>)
   14b46:	781b      	ldrb	r3, [r3, #0]
   14b48:	2201      	movs	r2, #1
   14b4a:	4053      	eors	r3, r2
   14b4c:	b2db      	uxtb	r3, r3
   14b4e:	2b00      	cmp	r3, #0
   14b50:	d00d      	beq.n	14b6e <checkRespSMS+0x36>
   14b52:	4b0a      	ldr	r3, [pc, #40]	; (14b7c <checkRespSMS+0x44>)
   14b54:	795b      	ldrb	r3, [r3, #5]
   14b56:	2b41      	cmp	r3, #65	; 0x41
   14b58:	d109      	bne.n	14b6e <checkRespSMS+0x36>
	{
		actionType = t1;
   14b5a:	4b09      	ldr	r3, [pc, #36]	; (14b80 <checkRespSMS+0x48>)
   14b5c:	1dfa      	adds	r2, r7, #7
   14b5e:	7812      	ldrb	r2, [r2, #0]
   14b60:	701a      	strb	r2, [r3, #0]
		sendSMS("",false,false);
   14b62:	4b08      	ldr	r3, [pc, #32]	; (14b84 <checkRespSMS+0x4c>)
   14b64:	2200      	movs	r2, #0
   14b66:	2100      	movs	r1, #0
   14b68:	0018      	movs	r0, r3
   14b6a:	4b07      	ldr	r3, [pc, #28]	; (14b88 <checkRespSMS+0x50>)
   14b6c:	4798      	blx	r3
	}
}
   14b6e:	46c0      	nop			; (mov r8, r8)
   14b70:	46bd      	mov	sp, r7
   14b72:	b002      	add	sp, #8
   14b74:	bd80      	pop	{r7, pc}
   14b76:	46c0      	nop			; (mov r8, r8)
   14b78:	20000796 	.word	0x20000796
   14b7c:	20000654 	.word	0x20000654
   14b80:	2000075b 	.word	0x2000075b
   14b84:	0002a14c 	.word	0x0002a14c
   14b88:	00017211 	.word	0x00017211

00014b8c <subDTMF>:

void subDTMF(void)
{
   14b8c:	b580      	push	{r7, lr}
   14b8e:	af00      	add	r7, sp, #0
	gsm_stop_play_record_file();
   14b90:	4b04      	ldr	r3, [pc, #16]	; (14ba4 <subDTMF+0x18>)
   14b92:	4798      	blx	r3
	callCutWait = xTaskGetTickCount();
   14b94:	4b04      	ldr	r3, [pc, #16]	; (14ba8 <subDTMF+0x1c>)
   14b96:	4798      	blx	r3
   14b98:	0002      	movs	r2, r0
   14b9a:	4b04      	ldr	r3, [pc, #16]	; (14bac <subDTMF+0x20>)
   14b9c:	601a      	str	r2, [r3, #0]
}
   14b9e:	46c0      	nop			; (mov r8, r8)
   14ba0:	46bd      	mov	sp, r7
   14ba2:	bd80      	pop	{r7, pc}
   14ba4:	00013075 	.word	0x00013075
   14ba8:	0002034d 	.word	0x0002034d
   14bac:	20000814 	.word	0x20000814

00014bb0 <processOnDTMF>:

void processOnDTMF(char *dtmf_cmd)
{
   14bb0:	b580      	push	{r7, lr}
   14bb2:	b084      	sub	sp, #16
   14bb4:	af00      	add	r7, sp, #0
   14bb6:	6078      	str	r0, [r7, #4]
	char dtmf = dtmf_cmd[0];
   14bb8:	230f      	movs	r3, #15
   14bba:	18fb      	adds	r3, r7, r3
   14bbc:	687a      	ldr	r2, [r7, #4]
   14bbe:	7812      	ldrb	r2, [r2, #0]
   14bc0:	701a      	strb	r2, [r3, #0]
	
	//LCD_clear();
	//lcd_printf("%c",dtmf);
	if (factory_settings_parameter_struct.ENABLE_M2M)
   14bc2:	4b6a      	ldr	r3, [pc, #424]	; (14d6c <processOnDTMF+0x1bc>)
   14bc4:	78db      	ldrb	r3, [r3, #3]
   14bc6:	2b00      	cmp	r3, #0
   14bc8:	d010      	beq.n	14bec <processOnDTMF+0x3c>
	{
		if (m2mEvent)
   14bca:	4b69      	ldr	r3, [pc, #420]	; (14d70 <processOnDTMF+0x1c0>)
   14bcc:	781b      	ldrb	r3, [r3, #0]
   14bce:	2b00      	cmp	r3, #0
   14bd0:	d100      	bne.n	14bd4 <processOnDTMF+0x24>
   14bd2:	e0c7      	b.n	14d64 <processOnDTMF+0x1b4>
		{
			if(dtmf == 'A')
   14bd4:	230f      	movs	r3, #15
   14bd6:	18fb      	adds	r3, r7, r3
   14bd8:	781b      	ldrb	r3, [r3, #0]
   14bda:	2b41      	cmp	r3, #65	; 0x41
   14bdc:	d000      	beq.n	14be0 <processOnDTMF+0x30>
   14bde:	e0c1      	b.n	14d64 <processOnDTMF+0x1b4>
			{
				m2mAck=true;
   14be0:	4b64      	ldr	r3, [pc, #400]	; (14d74 <processOnDTMF+0x1c4>)
   14be2:	2201      	movs	r2, #1
   14be4:	701a      	strb	r2, [r3, #0]
				gsm_hangup_call();
   14be6:	4b64      	ldr	r3, [pc, #400]	; (14d78 <processOnDTMF+0x1c8>)
   14be8:	4798      	blx	r3
		{
			subDTMF();
			voltageOnCall();
		}
	}
}
   14bea:	e0bb      	b.n	14d64 <processOnDTMF+0x1b4>
		if (dtmf == '1') //Motor On
   14bec:	230f      	movs	r3, #15
   14bee:	18fb      	adds	r3, r7, r3
   14bf0:	781b      	ldrb	r3, [r3, #0]
   14bf2:	2b31      	cmp	r3, #49	; 0x31
   14bf4:	d106      	bne.n	14c04 <processOnDTMF+0x54>
			subDTMF();
   14bf6:	4b61      	ldr	r3, [pc, #388]	; (14d7c <processOnDTMF+0x1cc>)
   14bf8:	4798      	blx	r3
			startMotor(true,false);
   14bfa:	2100      	movs	r1, #0
   14bfc:	2001      	movs	r0, #1
   14bfe:	4b60      	ldr	r3, [pc, #384]	; (14d80 <processOnDTMF+0x1d0>)
   14c00:	4798      	blx	r3
}
   14c02:	e0af      	b.n	14d64 <processOnDTMF+0x1b4>
		else if (dtmf == '2') //Motor Off
   14c04:	230f      	movs	r3, #15
   14c06:	18fb      	adds	r3, r7, r3
   14c08:	781b      	ldrb	r3, [r3, #0]
   14c0a:	2b32      	cmp	r3, #50	; 0x32
   14c0c:	d107      	bne.n	14c1e <processOnDTMF+0x6e>
			subDTMF();
   14c0e:	4b5b      	ldr	r3, [pc, #364]	; (14d7c <processOnDTMF+0x1cc>)
   14c10:	4798      	blx	r3
			stopMotor(true,false,false);
   14c12:	2200      	movs	r2, #0
   14c14:	2100      	movs	r1, #0
   14c16:	2001      	movs	r0, #1
   14c18:	4b5a      	ldr	r3, [pc, #360]	; (14d84 <processOnDTMF+0x1d4>)
   14c1a:	4798      	blx	r3
}
   14c1c:	e0a2      	b.n	14d64 <processOnDTMF+0x1b4>
		else if (dtmf == '3') //Status
   14c1e:	230f      	movs	r3, #15
   14c20:	18fb      	adds	r3, r7, r3
   14c22:	781b      	ldrb	r3, [r3, #0]
   14c24:	2b33      	cmp	r3, #51	; 0x33
   14c26:	d104      	bne.n	14c32 <processOnDTMF+0x82>
			subDTMF();
   14c28:	4b54      	ldr	r3, [pc, #336]	; (14d7c <processOnDTMF+0x1cc>)
   14c2a:	4798      	blx	r3
			statusOnCall();
   14c2c:	4b56      	ldr	r3, [pc, #344]	; (14d88 <processOnDTMF+0x1d8>)
   14c2e:	4798      	blx	r3
}
   14c30:	e098      	b.n	14d64 <processOnDTMF+0x1b4>
		else if (dtmf == '4') //underground status
   14c32:	230f      	movs	r3, #15
   14c34:	18fb      	adds	r3, r7, r3
   14c36:	781b      	ldrb	r3, [r3, #0]
   14c38:	2b34      	cmp	r3, #52	; 0x34
   14c3a:	d10a      	bne.n	14c52 <processOnDTMF+0xa2>
			if (factory_settings_parameter_struct.ENABLE_WATER)
   14c3c:	4b4b      	ldr	r3, [pc, #300]	; (14d6c <processOnDTMF+0x1bc>)
   14c3e:	795b      	ldrb	r3, [r3, #5]
   14c40:	2b00      	cmp	r3, #0
   14c42:	d100      	bne.n	14c46 <processOnDTMF+0x96>
   14c44:	e08e      	b.n	14d64 <processOnDTMF+0x1b4>
				subDTMF();
   14c46:	4b4d      	ldr	r3, [pc, #308]	; (14d7c <processOnDTMF+0x1cc>)
   14c48:	4798      	blx	r3
				waterStatusOnCall(false);
   14c4a:	2000      	movs	r0, #0
   14c4c:	4b4f      	ldr	r3, [pc, #316]	; (14d8c <processOnDTMF+0x1dc>)
   14c4e:	4798      	blx	r3
}
   14c50:	e088      	b.n	14d64 <processOnDTMF+0x1b4>
		else if (dtmf == '5') //overHead Status
   14c52:	230f      	movs	r3, #15
   14c54:	18fb      	adds	r3, r7, r3
   14c56:	781b      	ldrb	r3, [r3, #0]
   14c58:	2b35      	cmp	r3, #53	; 0x35
   14c5a:	d10a      	bne.n	14c72 <processOnDTMF+0xc2>
			if (factory_settings_parameter_struct.ENABLE_GP)
   14c5c:	4b43      	ldr	r3, [pc, #268]	; (14d6c <processOnDTMF+0x1bc>)
   14c5e:	791b      	ldrb	r3, [r3, #4]
   14c60:	2b00      	cmp	r3, #0
   14c62:	d100      	bne.n	14c66 <processOnDTMF+0xb6>
   14c64:	e07e      	b.n	14d64 <processOnDTMF+0x1b4>
				subDTMF();
   14c66:	4b45      	ldr	r3, [pc, #276]	; (14d7c <processOnDTMF+0x1cc>)
   14c68:	4798      	blx	r3
				overHeadWaterStatusOnCall(false);
   14c6a:	2000      	movs	r0, #0
   14c6c:	4b48      	ldr	r3, [pc, #288]	; (14d90 <processOnDTMF+0x1e0>)
   14c6e:	4798      	blx	r3
}
   14c70:	e078      	b.n	14d64 <processOnDTMF+0x1b4>
		else if(dtmf == '0')
   14c72:	230f      	movs	r3, #15
   14c74:	18fb      	adds	r3, r7, r3
   14c76:	781b      	ldrb	r3, [r3, #0]
   14c78:	2b30      	cmp	r3, #48	; 0x30
   14c7a:	d114      	bne.n	14ca6 <processOnDTMF+0xf6>
			if (factory_settings_parameter_struct.ENABLE_CURRENT)
   14c7c:	4b3b      	ldr	r3, [pc, #236]	; (14d6c <processOnDTMF+0x1bc>)
   14c7e:	785b      	ldrb	r3, [r3, #1]
   14c80:	2b00      	cmp	r3, #0
   14c82:	d100      	bne.n	14c86 <processOnDTMF+0xd6>
   14c84:	e06e      	b.n	14d64 <processOnDTMF+0x1b4>
				if(zeroPressed)
   14c86:	4b43      	ldr	r3, [pc, #268]	; (14d94 <processOnDTMF+0x1e4>)
   14c88:	781b      	ldrb	r3, [r3, #0]
   14c8a:	2b00      	cmp	r3, #0
   14c8c:	d007      	beq.n	14c9e <processOnDTMF+0xee>
					autoSetCurrent();   //to enable or disable current detection
   14c8e:	4b42      	ldr	r3, [pc, #264]	; (14d98 <processOnDTMF+0x1e8>)
   14c90:	4798      	blx	r3
					subDTMF();
   14c92:	4b3a      	ldr	r3, [pc, #232]	; (14d7c <processOnDTMF+0x1cc>)
   14c94:	4798      	blx	r3
					zeroPressed=false;
   14c96:	4b3f      	ldr	r3, [pc, #252]	; (14d94 <processOnDTMF+0x1e4>)
   14c98:	2200      	movs	r2, #0
   14c9a:	701a      	strb	r2, [r3, #0]
}
   14c9c:	e062      	b.n	14d64 <processOnDTMF+0x1b4>
					zeroPressed=true;
   14c9e:	4b3d      	ldr	r3, [pc, #244]	; (14d94 <processOnDTMF+0x1e4>)
   14ca0:	2201      	movs	r2, #1
   14ca2:	701a      	strb	r2, [r3, #0]
}
   14ca4:	e05e      	b.n	14d64 <processOnDTMF+0x1b4>
		else if (dtmf == '7') //Speak Current Ampere On Call
   14ca6:	230f      	movs	r3, #15
   14ca8:	18fb      	adds	r3, r7, r3
   14caa:	781b      	ldrb	r3, [r3, #0]
   14cac:	2b37      	cmp	r3, #55	; 0x37
   14cae:	d108      	bne.n	14cc2 <processOnDTMF+0x112>
			if (factory_settings_parameter_struct.AMPERE_SPEAK)
   14cb0:	4b2e      	ldr	r3, [pc, #184]	; (14d6c <processOnDTMF+0x1bc>)
   14cb2:	789b      	ldrb	r3, [r3, #2]
   14cb4:	2b00      	cmp	r3, #0
   14cb6:	d055      	beq.n	14d64 <processOnDTMF+0x1b4>
				subDTMF();
   14cb8:	4b30      	ldr	r3, [pc, #192]	; (14d7c <processOnDTMF+0x1cc>)
   14cba:	4798      	blx	r3
				speakAmpere();
   14cbc:	4b37      	ldr	r3, [pc, #220]	; (14d9c <processOnDTMF+0x1ec>)
   14cbe:	4798      	blx	r3
}
   14cc0:	e050      	b.n	14d64 <processOnDTMF+0x1b4>
		else if(dtmf=='D')
   14cc2:	230f      	movs	r3, #15
   14cc4:	18fb      	adds	r3, r7, r3
   14cc6:	781b      	ldrb	r3, [r3, #0]
   14cc8:	2b44      	cmp	r3, #68	; 0x44
   14cca:	d10d      	bne.n	14ce8 <processOnDTMF+0x138>
			saveAutoStartSettings(true);  //set AutoStart to True in EEPROM
   14ccc:	2001      	movs	r0, #1
   14cce:	4b34      	ldr	r3, [pc, #208]	; (14da0 <processOnDTMF+0x1f0>)
   14cd0:	4798      	blx	r3
			resetAutoStart(true);
   14cd2:	2001      	movs	r0, #1
   14cd4:	4b33      	ldr	r3, [pc, #204]	; (14da4 <processOnDTMF+0x1f4>)
   14cd6:	4798      	blx	r3
			startMotor(false,false);
   14cd8:	2100      	movs	r1, #0
   14cda:	2000      	movs	r0, #0
   14cdc:	4b28      	ldr	r3, [pc, #160]	; (14d80 <processOnDTMF+0x1d0>)
   14cde:	4798      	blx	r3
			sendDTMFTone(0xFF);
   14ce0:	20ff      	movs	r0, #255	; 0xff
   14ce2:	4b31      	ldr	r3, [pc, #196]	; (14da8 <processOnDTMF+0x1f8>)
   14ce4:	4798      	blx	r3
}
   14ce6:	e03d      	b.n	14d64 <processOnDTMF+0x1b4>
		else if(dtmf=='C')
   14ce8:	230f      	movs	r3, #15
   14cea:	18fb      	adds	r3, r7, r3
   14cec:	781b      	ldrb	r3, [r3, #0]
   14cee:	2b43      	cmp	r3, #67	; 0x43
   14cf0:	d10b      	bne.n	14d0a <processOnDTMF+0x15a>
			saveAutoStartSettings(false);  //set AutoStart to false in EEPROM
   14cf2:	2000      	movs	r0, #0
   14cf4:	4b2a      	ldr	r3, [pc, #168]	; (14da0 <processOnDTMF+0x1f0>)
   14cf6:	4798      	blx	r3
			stopMotor(false,false,true);
   14cf8:	2201      	movs	r2, #1
   14cfa:	2100      	movs	r1, #0
   14cfc:	2000      	movs	r0, #0
   14cfe:	4b21      	ldr	r3, [pc, #132]	; (14d84 <processOnDTMF+0x1d4>)
   14d00:	4798      	blx	r3
			sendDTMFTone(0xFF);
   14d02:	20ff      	movs	r0, #255	; 0xff
   14d04:	4b28      	ldr	r3, [pc, #160]	; (14da8 <processOnDTMF+0x1f8>)
   14d06:	4798      	blx	r3
}
   14d08:	e02c      	b.n	14d64 <processOnDTMF+0x1b4>
		else if (dtmf == '8') //Set AUTOTIMER ON
   14d0a:	230f      	movs	r3, #15
   14d0c:	18fb      	adds	r3, r7, r3
   14d0e:	781b      	ldrb	r3, [r3, #0]
   14d10:	2b38      	cmp	r3, #56	; 0x38
   14d12:	d10c      	bne.n	14d2e <processOnDTMF+0x17e>
			subDTMF();
   14d14:	4b19      	ldr	r3, [pc, #100]	; (14d7c <processOnDTMF+0x1cc>)
   14d16:	4798      	blx	r3
			saveAutoStartSettings(true);  //set AutoStart to True in EEPROM
   14d18:	2001      	movs	r0, #1
   14d1a:	4b21      	ldr	r3, [pc, #132]	; (14da0 <processOnDTMF+0x1f0>)
   14d1c:	4798      	blx	r3
			resetAutoStart(true);
   14d1e:	2001      	movs	r0, #1
   14d20:	4b20      	ldr	r3, [pc, #128]	; (14da4 <processOnDTMF+0x1f4>)
   14d22:	4798      	blx	r3
			playSound(')',true);     // playFile AutoStart is On
   14d24:	2101      	movs	r1, #1
   14d26:	2029      	movs	r0, #41	; 0x29
   14d28:	4b20      	ldr	r3, [pc, #128]	; (14dac <processOnDTMF+0x1fc>)
   14d2a:	4798      	blx	r3
}
   14d2c:	e01a      	b.n	14d64 <processOnDTMF+0x1b4>
		else if (dtmf == '9') //Set AUTOTIMER OFF
   14d2e:	230f      	movs	r3, #15
   14d30:	18fb      	adds	r3, r7, r3
   14d32:	781b      	ldrb	r3, [r3, #0]
   14d34:	2b39      	cmp	r3, #57	; 0x39
   14d36:	d10c      	bne.n	14d52 <processOnDTMF+0x1a2>
			subDTMF();
   14d38:	4b10      	ldr	r3, [pc, #64]	; (14d7c <processOnDTMF+0x1cc>)
   14d3a:	4798      	blx	r3
			saveAutoStartSettings(false);  //set AUtoStart to False in EEPROM
   14d3c:	2000      	movs	r0, #0
   14d3e:	4b18      	ldr	r3, [pc, #96]	; (14da0 <processOnDTMF+0x1f0>)
   14d40:	4798      	blx	r3
			resetAutoStart(true);
   14d42:	2001      	movs	r0, #1
   14d44:	4b17      	ldr	r3, [pc, #92]	; (14da4 <processOnDTMF+0x1f4>)
   14d46:	4798      	blx	r3
			playSound('[',true); //playFile autoStart is turned oFF
   14d48:	2101      	movs	r1, #1
   14d4a:	205b      	movs	r0, #91	; 0x5b
   14d4c:	4b17      	ldr	r3, [pc, #92]	; (14dac <processOnDTMF+0x1fc>)
   14d4e:	4798      	blx	r3
}
   14d50:	e008      	b.n	14d64 <processOnDTMF+0x1b4>
		else if(dtmf == '*')
   14d52:	230f      	movs	r3, #15
   14d54:	18fb      	adds	r3, r7, r3
   14d56:	781b      	ldrb	r3, [r3, #0]
   14d58:	2b2a      	cmp	r3, #42	; 0x2a
   14d5a:	d103      	bne.n	14d64 <processOnDTMF+0x1b4>
			subDTMF();
   14d5c:	4b07      	ldr	r3, [pc, #28]	; (14d7c <processOnDTMF+0x1cc>)
   14d5e:	4798      	blx	r3
			voltageOnCall();
   14d60:	4b13      	ldr	r3, [pc, #76]	; (14db0 <processOnDTMF+0x200>)
   14d62:	4798      	blx	r3
}
   14d64:	46c0      	nop			; (mov r8, r8)
   14d66:	46bd      	mov	sp, r7
   14d68:	b004      	add	sp, #16
   14d6a:	bd80      	pop	{r7, pc}
   14d6c:	2000062c 	.word	0x2000062c
   14d70:	2000073b 	.word	0x2000073b
   14d74:	20000720 	.word	0x20000720
   14d78:	00013015 	.word	0x00013015
   14d7c:	00014b8d 	.word	0x00014b8d
   14d80:	0001b391 	.word	0x0001b391
   14d84:	0001b56d 	.word	0x0001b56d
   14d88:	0001b9b1 	.word	0x0001b9b1
   14d8c:	00019539 	.word	0x00019539
   14d90:	000193f1 	.word	0x000193f1
   14d94:	2000080b 	.word	0x2000080b
   14d98:	0001a001 	.word	0x0001a001
   14d9c:	0001a0f5 	.word	0x0001a0f5
   14da0:	000112a5 	.word	0x000112a5
   14da4:	0001af99 	.word	0x0001af99
   14da8:	000173cd 	.word	0x000173cd
   14dac:	00014665 	.word	0x00014665
   14db0:	0001bac1 	.word	0x0001bac1

00014db4 <processOnSMS>:

void processOnSMS(char *received_command, bool admin,bool response_sms_processed_cmd,bool alterNumber, char *phone_number)
{
   14db4:	b5f0      	push	{r4, r5, r6, r7, lr}
   14db6:	46c6      	mov	lr, r8
   14db8:	b500      	push	{lr}
   14dba:	b0d2      	sub	sp, #328	; 0x148
   14dbc:	af06      	add	r7, sp, #24
   14dbe:	60f8      	str	r0, [r7, #12]
   14dc0:	000c      	movs	r4, r1
   14dc2:	0010      	movs	r0, r2
   14dc4:	0019      	movs	r1, r3
   14dc6:	4be1      	ldr	r3, [pc, #900]	; (1514c <processOnSMS+0x398>)
   14dc8:	2294      	movs	r2, #148	; 0x94
   14dca:	0052      	lsls	r2, r2, #1
   14dcc:	4694      	mov	ip, r2
   14dce:	2208      	movs	r2, #8
   14dd0:	4690      	mov	r8, r2
   14dd2:	44b8      	add	r8, r7
   14dd4:	44c4      	add	ip, r8
   14dd6:	4463      	add	r3, ip
   14dd8:	1c22      	adds	r2, r4, #0
   14dda:	701a      	strb	r2, [r3, #0]
   14ddc:	4bdc      	ldr	r3, [pc, #880]	; (15150 <processOnSMS+0x39c>)
   14dde:	2294      	movs	r2, #148	; 0x94
   14de0:	0052      	lsls	r2, r2, #1
   14de2:	4694      	mov	ip, r2
   14de4:	2208      	movs	r2, #8
   14de6:	4690      	mov	r8, r2
   14de8:	44b8      	add	r8, r7
   14dea:	44c4      	add	ip, r8
   14dec:	4463      	add	r3, ip
   14dee:	1c02      	adds	r2, r0, #0
   14df0:	701a      	strb	r2, [r3, #0]
   14df2:	4bd8      	ldr	r3, [pc, #864]	; (15154 <processOnSMS+0x3a0>)
   14df4:	2294      	movs	r2, #148	; 0x94
   14df6:	0052      	lsls	r2, r2, #1
   14df8:	4694      	mov	ip, r2
   14dfa:	2208      	movs	r2, #8
   14dfc:	4690      	mov	r8, r2
   14dfe:	44b8      	add	r8, r7
   14e00:	44c4      	add	ip, r8
   14e02:	4463      	add	r3, ip
   14e04:	1c0a      	adds	r2, r1, #0
   14e06:	701a      	strb	r2, [r3, #0]
	char *copy_received_command;
	char resep_msg[250];
	bool incomingSMSProcessed=false;
   14e08:	2328      	movs	r3, #40	; 0x28
   14e0a:	33ff      	adds	r3, #255	; 0xff
   14e0c:	2208      	movs	r2, #8
   14e0e:	4694      	mov	ip, r2
   14e10:	44bc      	add	ip, r7
   14e12:	4463      	add	r3, ip
   14e14:	2200      	movs	r2, #0
   14e16:	701a      	strb	r2, [r3, #0]

	copy_received_command = received_command;
   14e18:	68fb      	ldr	r3, [r7, #12]
   14e1a:	228c      	movs	r2, #140	; 0x8c
   14e1c:	0052      	lsls	r2, r2, #1
   14e1e:	2108      	movs	r1, #8
   14e20:	468c      	mov	ip, r1
   14e22:	44bc      	add	ip, r7
   14e24:	4462      	add	r2, ip
   14e26:	6013      	str	r3, [r2, #0]
	
	if(alterNumber)
   14e28:	4bca      	ldr	r3, [pc, #808]	; (15154 <processOnSMS+0x3a0>)
   14e2a:	2294      	movs	r2, #148	; 0x94
   14e2c:	0052      	lsls	r2, r2, #1
   14e2e:	4694      	mov	ip, r2
   14e30:	2208      	movs	r2, #8
   14e32:	4690      	mov	r8, r2
   14e34:	44b8      	add	r8, r7
   14e36:	44c4      	add	ip, r8
   14e38:	4463      	add	r3, ip
   14e3a:	781b      	ldrb	r3, [r3, #0]
   14e3c:	2b00      	cmp	r3, #0
   14e3e:	d00e      	beq.n	14e5e <processOnSMS+0xaa>
	{
		if(!StringstartsWith(received_command,"AMON"))
   14e40:	4ac5      	ldr	r2, [pc, #788]	; (15158 <processOnSMS+0x3a4>)
   14e42:	68fb      	ldr	r3, [r7, #12]
   14e44:	0011      	movs	r1, r2
   14e46:	0018      	movs	r0, r3
   14e48:	4bc4      	ldr	r3, [pc, #784]	; (1515c <processOnSMS+0x3a8>)
   14e4a:	4798      	blx	r3
   14e4c:	0003      	movs	r3, r0
   14e4e:	001a      	movs	r2, r3
   14e50:	2301      	movs	r3, #1
   14e52:	4053      	eors	r3, r2
   14e54:	b2db      	uxtb	r3, r3
   14e56:	2b00      	cmp	r3, #0
   14e58:	d001      	beq.n	14e5e <processOnSMS+0xaa>
   14e5a:	f002 f8a5 	bl	16fa8 <processOnSMS+0x21f4>
		return;
	}
	
	if (StringstartsWith(received_command,"PRGUPD"))
   14e5e:	4ac0      	ldr	r2, [pc, #768]	; (15160 <processOnSMS+0x3ac>)
   14e60:	68fb      	ldr	r3, [r7, #12]
   14e62:	0011      	movs	r1, r2
   14e64:	0018      	movs	r0, r3
   14e66:	4bbd      	ldr	r3, [pc, #756]	; (1515c <processOnSMS+0x3a8>)
   14e68:	4798      	blx	r3
   14e6a:	1e03      	subs	r3, r0, #0
   14e6c:	d029      	beq.n	14ec2 <processOnSMS+0x10e>
	{
		//if (admin)
		{
			bootloader_parameter.firmware_download_pending = true;
   14e6e:	4bbd      	ldr	r3, [pc, #756]	; (15164 <processOnSMS+0x3b0>)
   14e70:	2201      	movs	r2, #1
   14e72:	715a      	strb	r2, [r3, #5]
			memset(bootloader_parameter.firmware_updater_mobile_no, '\0', sizeof(bootloader_parameter.firmware_updater_mobile_no));
   14e74:	4bbc      	ldr	r3, [pc, #752]	; (15168 <processOnSMS+0x3b4>)
   14e76:	2210      	movs	r2, #16
   14e78:	2100      	movs	r1, #0
   14e7a:	0018      	movs	r0, r3
   14e7c:	4bbb      	ldr	r3, [pc, #748]	; (1516c <processOnSMS+0x3b8>)
   14e7e:	4798      	blx	r3
			strcpy(bootloader_parameter.firmware_updater_mobile_no,phone_number);
   14e80:	23a0      	movs	r3, #160	; 0xa0
   14e82:	005b      	lsls	r3, r3, #1
   14e84:	2208      	movs	r2, #8
   14e86:	4694      	mov	ip, r2
   14e88:	44bc      	add	ip, r7
   14e8a:	4463      	add	r3, ip
   14e8c:	681a      	ldr	r2, [r3, #0]
   14e8e:	4bb6      	ldr	r3, [pc, #728]	; (15168 <processOnSMS+0x3b4>)
   14e90:	0011      	movs	r1, r2
   14e92:	0018      	movs	r0, r3
   14e94:	4bb6      	ldr	r3, [pc, #728]	; (15170 <processOnSMS+0x3bc>)
   14e96:	4798      	blx	r3
			gsm_module_exit_sleep(false);
   14e98:	2000      	movs	r0, #0
   14e9a:	4bb6      	ldr	r3, [pc, #728]	; (15174 <processOnSMS+0x3c0>)
   14e9c:	4798      	blx	r3

			memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
   14e9e:	49b1      	ldr	r1, [pc, #708]	; (15164 <processOnSMS+0x3b0>)
   14ea0:	4bb5      	ldr	r3, [pc, #724]	; (15178 <processOnSMS+0x3c4>)
   14ea2:	221c      	movs	r2, #28
   14ea4:	0018      	movs	r0, r3
   14ea6:	4bb5      	ldr	r3, [pc, #724]	; (1517c <processOnSMS+0x3c8>)
   14ea8:	4798      	blx	r3
			eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
   14eaa:	4bb3      	ldr	r3, [pc, #716]	; (15178 <processOnSMS+0x3c4>)
   14eac:	0019      	movs	r1, r3
   14eae:	2000      	movs	r0, #0
   14eb0:	4bb3      	ldr	r3, [pc, #716]	; (15180 <processOnSMS+0x3cc>)
   14eb2:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
   14eb4:	4bb3      	ldr	r3, [pc, #716]	; (15184 <processOnSMS+0x3d0>)
   14eb6:	4798      	blx	r3
			vTaskDelay(100);
   14eb8:	2064      	movs	r0, #100	; 0x64
   14eba:	4bb3      	ldr	r3, [pc, #716]	; (15188 <processOnSMS+0x3d4>)
   14ebc:	4798      	blx	r3
			system_reset();
   14ebe:	4bb3      	ldr	r3, [pc, #716]	; (1518c <processOnSMS+0x3d8>)
   14ec0:	4798      	blx	r3
		}
	}
	
	if (StringstartsWith(received_command,"WAIT"))
   14ec2:	4ab3      	ldr	r2, [pc, #716]	; (15190 <processOnSMS+0x3dc>)
   14ec4:	68fb      	ldr	r3, [r7, #12]
   14ec6:	0011      	movs	r1, r2
   14ec8:	0018      	movs	r0, r3
   14eca:	4ba4      	ldr	r3, [pc, #656]	; (1515c <processOnSMS+0x3a8>)
   14ecc:	4798      	blx	r3
   14ece:	1e03      	subs	r3, r0, #0
   14ed0:	d047      	beq.n	14f62 <processOnSMS+0x1ae>
	{
		enum gsm_error err = gsm_disable_call_waiting();
   14ed2:	2318      	movs	r3, #24
   14ed4:	33ff      	adds	r3, #255	; 0xff
   14ed6:	2208      	movs	r2, #8
   14ed8:	18ba      	adds	r2, r7, r2
   14eda:	18d4      	adds	r4, r2, r3
   14edc:	4bad      	ldr	r3, [pc, #692]	; (15194 <processOnSMS+0x3e0>)
   14ede:	4798      	blx	r3
   14ee0:	0003      	movs	r3, r0
   14ee2:	7023      	strb	r3, [r4, #0]
		incomingSMSProcessed=true;
   14ee4:	2328      	movs	r3, #40	; 0x28
   14ee6:	33ff      	adds	r3, #255	; 0xff
   14ee8:	2208      	movs	r2, #8
   14eea:	4694      	mov	ip, r2
   14eec:	44bc      	add	ip, r7
   14eee:	4463      	add	r3, ip
   14ef0:	2201      	movs	r2, #1
   14ef2:	701a      	strb	r2, [r3, #0]
		if (response_sms_processed_cmd == true)
   14ef4:	4b96      	ldr	r3, [pc, #600]	; (15150 <processOnSMS+0x39c>)
   14ef6:	2294      	movs	r2, #148	; 0x94
   14ef8:	0052      	lsls	r2, r2, #1
   14efa:	4694      	mov	ip, r2
   14efc:	2208      	movs	r2, #8
   14efe:	4690      	mov	r8, r2
   14f00:	44b8      	add	r8, r7
   14f02:	44c4      	add	ip, r8
   14f04:	4463      	add	r3, ip
   14f06:	781b      	ldrb	r3, [r3, #0]
   14f08:	2b00      	cmp	r3, #0
   14f0a:	d101      	bne.n	14f10 <processOnSMS+0x15c>
   14f0c:	f002 f806 	bl	16f1c <processOnSMS+0x2168>
		{
			if (err == GSM_ERROR_NONE)
   14f10:	2318      	movs	r3, #24
   14f12:	33ff      	adds	r3, #255	; 0xff
   14f14:	2208      	movs	r2, #8
   14f16:	4694      	mov	ip, r2
   14f18:	44bc      	add	ip, r7
   14f1a:	4463      	add	r3, ip
   14f1c:	781b      	ldrb	r3, [r3, #0]
   14f1e:	2b00      	cmp	r3, #0
   14f20:	d10d      	bne.n	14f3e <processOnSMS+0x18a>
			{
				strcpy(resep_msg,"GSM CALL WAITTING DISABLE : SUCCESS");
   14f22:	230c      	movs	r3, #12
   14f24:	2208      	movs	r2, #8
   14f26:	4694      	mov	ip, r2
   14f28:	44bc      	add	ip, r7
   14f2a:	4463      	add	r3, ip
   14f2c:	4a9a      	ldr	r2, [pc, #616]	; (15198 <processOnSMS+0x3e4>)
   14f2e:	ca13      	ldmia	r2!, {r0, r1, r4}
   14f30:	c313      	stmia	r3!, {r0, r1, r4}
   14f32:	ca13      	ldmia	r2!, {r0, r1, r4}
   14f34:	c313      	stmia	r3!, {r0, r1, r4}
   14f36:	ca13      	ldmia	r2!, {r0, r1, r4}
   14f38:	c313      	stmia	r3!, {r0, r1, r4}
   14f3a:	f001 ffef 	bl	16f1c <processOnSMS+0x2168>
			}
			else
			{
				strcpy(resep_msg,"GSM CALL WAITTING DISABLE : FAILED");
   14f3e:	230c      	movs	r3, #12
   14f40:	2208      	movs	r2, #8
   14f42:	4694      	mov	ip, r2
   14f44:	44bc      	add	ip, r7
   14f46:	4463      	add	r3, ip
   14f48:	4a94      	ldr	r2, [pc, #592]	; (1519c <processOnSMS+0x3e8>)
   14f4a:	ca13      	ldmia	r2!, {r0, r1, r4}
   14f4c:	c313      	stmia	r3!, {r0, r1, r4}
   14f4e:	ca13      	ldmia	r2!, {r0, r1, r4}
   14f50:	c313      	stmia	r3!, {r0, r1, r4}
   14f52:	ca03      	ldmia	r2!, {r0, r1}
   14f54:	c303      	stmia	r3!, {r0, r1}
   14f56:	8811      	ldrh	r1, [r2, #0]
   14f58:	8019      	strh	r1, [r3, #0]
   14f5a:	7892      	ldrb	r2, [r2, #2]
   14f5c:	709a      	strb	r2, [r3, #2]
   14f5e:	f001 ffdd 	bl	16f1c <processOnSMS+0x2168>
			}
		}
	}
	else if (StringstartsWith(received_command,"CLEARALL"))
   14f62:	4a8f      	ldr	r2, [pc, #572]	; (151a0 <processOnSMS+0x3ec>)
   14f64:	68fb      	ldr	r3, [r7, #12]
   14f66:	0011      	movs	r1, r2
   14f68:	0018      	movs	r0, r3
   14f6a:	4b7c      	ldr	r3, [pc, #496]	; (1515c <processOnSMS+0x3a8>)
   14f6c:	4798      	blx	r3
   14f6e:	1e03      	subs	r3, r0, #0
   14f70:	d030      	beq.n	14fd4 <processOnSMS+0x220>
	{
		clearNumbers(admin);
   14f72:	4b76      	ldr	r3, [pc, #472]	; (1514c <processOnSMS+0x398>)
   14f74:	2294      	movs	r2, #148	; 0x94
   14f76:	0052      	lsls	r2, r2, #1
   14f78:	4694      	mov	ip, r2
   14f7a:	2208      	movs	r2, #8
   14f7c:	4690      	mov	r8, r2
   14f7e:	44b8      	add	r8, r7
   14f80:	44c4      	add	ip, r8
   14f82:	4463      	add	r3, ip
   14f84:	781b      	ldrb	r3, [r3, #0]
   14f86:	0018      	movs	r0, r3
   14f88:	4b86      	ldr	r3, [pc, #536]	; (151a4 <processOnSMS+0x3f0>)
   14f8a:	4798      	blx	r3
		incomingSMSProcessed=true;
   14f8c:	2328      	movs	r3, #40	; 0x28
   14f8e:	33ff      	adds	r3, #255	; 0xff
   14f90:	2208      	movs	r2, #8
   14f92:	4694      	mov	ip, r2
   14f94:	44bc      	add	ip, r7
   14f96:	4463      	add	r3, ip
   14f98:	2201      	movs	r2, #1
   14f9a:	701a      	strb	r2, [r3, #0]
		if (response_sms_processed_cmd == true)
   14f9c:	4b6c      	ldr	r3, [pc, #432]	; (15150 <processOnSMS+0x39c>)
   14f9e:	2294      	movs	r2, #148	; 0x94
   14fa0:	0052      	lsls	r2, r2, #1
   14fa2:	4694      	mov	ip, r2
   14fa4:	2208      	movs	r2, #8
   14fa6:	4690      	mov	r8, r2
   14fa8:	44b8      	add	r8, r7
   14faa:	44c4      	add	ip, r8
   14fac:	4463      	add	r3, ip
   14fae:	781b      	ldrb	r3, [r3, #0]
   14fb0:	2b00      	cmp	r3, #0
   14fb2:	d101      	bne.n	14fb8 <processOnSMS+0x204>
   14fb4:	f001 ffb2 	bl	16f1c <processOnSMS+0x2168>
		{
			strcpy(resep_msg,"ALL USER NUMBERS CLEARED");
   14fb8:	230c      	movs	r3, #12
   14fba:	2208      	movs	r2, #8
   14fbc:	4694      	mov	ip, r2
   14fbe:	44bc      	add	ip, r7
   14fc0:	4463      	add	r3, ip
   14fc2:	4a79      	ldr	r2, [pc, #484]	; (151a8 <processOnSMS+0x3f4>)
   14fc4:	ca13      	ldmia	r2!, {r0, r1, r4}
   14fc6:	c313      	stmia	r3!, {r0, r1, r4}
   14fc8:	ca13      	ldmia	r2!, {r0, r1, r4}
   14fca:	c313      	stmia	r3!, {r0, r1, r4}
   14fcc:	7812      	ldrb	r2, [r2, #0]
   14fce:	701a      	strb	r2, [r3, #0]
   14fd0:	f001 ffa4 	bl	16f1c <processOnSMS+0x2168>
		}
	}
	else if (StringstartsWith(received_command,"DEFAULT"))
   14fd4:	4a75      	ldr	r2, [pc, #468]	; (151ac <processOnSMS+0x3f8>)
   14fd6:	68fb      	ldr	r3, [r7, #12]
   14fd8:	0011      	movs	r1, r2
   14fda:	0018      	movs	r0, r3
   14fdc:	4b5f      	ldr	r3, [pc, #380]	; (1515c <processOnSMS+0x3a8>)
   14fde:	4798      	blx	r3
   14fe0:	1e03      	subs	r3, r0, #0
   14fe2:	d065      	beq.n	150b0 <processOnSMS+0x2fc>
	{
		saveAutoStartSettings(false);
   14fe4:	2000      	movs	r0, #0
   14fe6:	4b72      	ldr	r3, [pc, #456]	; (151b0 <processOnSMS+0x3fc>)
   14fe8:	4798      	blx	r3
		if (factory_settings_parameter_struct.ENABLE_WATER)
   14fea:	4b72      	ldr	r3, [pc, #456]	; (151b4 <processOnSMS+0x400>)
   14fec:	795b      	ldrb	r3, [r3, #5]
   14fee:	2b00      	cmp	r3, #0
   14ff0:	d00d      	beq.n	1500e <processOnSMS+0x25a>
		{
			saveWaterBypassSettings(false);
   14ff2:	2000      	movs	r0, #0
   14ff4:	4b70      	ldr	r3, [pc, #448]	; (151b8 <processOnSMS+0x404>)
   14ff6:	4798      	blx	r3
			if (factory_settings_parameter_struct.ENABLE_M2M)
   14ff8:	4b6e      	ldr	r3, [pc, #440]	; (151b4 <processOnSMS+0x400>)
   14ffa:	78db      	ldrb	r3, [r3, #3]
   14ffc:	2b00      	cmp	r3, #0
   14ffe:	d003      	beq.n	15008 <processOnSMS+0x254>
			{
				saveM2MSettings(false);
   15000:	2000      	movs	r0, #0
   15002:	4b6e      	ldr	r3, [pc, #440]	; (151bc <processOnSMS+0x408>)
   15004:	4798      	blx	r3
   15006:	e002      	b.n	1500e <processOnSMS+0x25a>
			}
			else
			{
				savePreventOverFlowSettings(false);
   15008:	2000      	movs	r0, #0
   1500a:	4b6d      	ldr	r3, [pc, #436]	; (151c0 <processOnSMS+0x40c>)
   1500c:	4798      	blx	r3
			}
		}
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1500e:	4b69      	ldr	r3, [pc, #420]	; (151b4 <processOnSMS+0x400>)
   15010:	785b      	ldrb	r3, [r3, #1]
   15012:	2b00      	cmp	r3, #0
   15014:	d008      	beq.n	15028 <processOnSMS+0x274>
		{
			setOverloadPer(120);
   15016:	2078      	movs	r0, #120	; 0x78
   15018:	4b6a      	ldr	r3, [pc, #424]	; (151c4 <processOnSMS+0x410>)
   1501a:	4798      	blx	r3
			setUnderloadPer(85);
   1501c:	2055      	movs	r0, #85	; 0x55
   1501e:	4b6a      	ldr	r3, [pc, #424]	; (151c8 <processOnSMS+0x414>)
   15020:	4798      	blx	r3
			setCurrentDetection(false);
   15022:	2000      	movs	r0, #0
   15024:	4b69      	ldr	r3, [pc, #420]	; (151cc <processOnSMS+0x418>)
   15026:	4798      	blx	r3
		}
		saveEventStageSettings(0);
   15028:	2000      	movs	r0, #0
   1502a:	4b69      	ldr	r3, [pc, #420]	; (151d0 <processOnSMS+0x41c>)
   1502c:	4798      	blx	r3
		//saveBypassSettings(false);
		saveDNDSettings(false);
   1502e:	2000      	movs	r0, #0
   15030:	4b68      	ldr	r3, [pc, #416]	; (151d4 <processOnSMS+0x420>)
   15032:	4798      	blx	r3
		saveResponseSettings('C');
   15034:	2043      	movs	r0, #67	; 0x43
   15036:	4b68      	ldr	r3, [pc, #416]	; (151d8 <processOnSMS+0x424>)
   15038:	4798      	blx	r3
		saveAutoStartTimeSettings(50);
   1503a:	2032      	movs	r0, #50	; 0x32
   1503c:	4b67      	ldr	r3, [pc, #412]	; (151dc <processOnSMS+0x428>)
   1503e:	4798      	blx	r3
		saveStarDeltaTimer(2);
   15040:	2002      	movs	r0, #2
   15042:	4b67      	ldr	r3, [pc, #412]	; (151e0 <processOnSMS+0x42c>)
   15044:	4798      	blx	r3
		
		saveSinglePhasingSettings(true);
   15046:	2001      	movs	r0, #1
   15048:	4b66      	ldr	r3, [pc, #408]	; (151e4 <processOnSMS+0x430>)
   1504a:	4798      	blx	r3
		saveSinglePhasingVoltage(80);
   1504c:	2050      	movs	r0, #80	; 0x50
   1504e:	4b66      	ldr	r3, [pc, #408]	; (151e8 <processOnSMS+0x434>)
   15050:	4798      	blx	r3
		savePhaseSequenceProtectionSettings(true);
   15052:	2001      	movs	r0, #1
   15054:	4b65      	ldr	r3, [pc, #404]	; (151ec <processOnSMS+0x438>)
   15056:	4798      	blx	r3
		setPrimaryNumberIndex(0);
   15058:	2000      	movs	r0, #0
   1505a:	4b65      	ldr	r3, [pc, #404]	; (151f0 <processOnSMS+0x43c>)
   1505c:	4798      	blx	r3
		setSecondaryNumberIndex(1);
   1505e:	2001      	movs	r0, #1
   15060:	4b64      	ldr	r3, [pc, #400]	; (151f4 <processOnSMS+0x440>)
   15062:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   15064:	2328      	movs	r3, #40	; 0x28
   15066:	33ff      	adds	r3, #255	; 0xff
   15068:	2208      	movs	r2, #8
   1506a:	4694      	mov	ip, r2
   1506c:	44bc      	add	ip, r7
   1506e:	4463      	add	r3, ip
   15070:	2201      	movs	r2, #1
   15072:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   15074:	4b36      	ldr	r3, [pc, #216]	; (15150 <processOnSMS+0x39c>)
   15076:	2294      	movs	r2, #148	; 0x94
   15078:	0052      	lsls	r2, r2, #1
   1507a:	4694      	mov	ip, r2
   1507c:	2208      	movs	r2, #8
   1507e:	4690      	mov	r8, r2
   15080:	44b8      	add	r8, r7
   15082:	44c4      	add	ip, r8
   15084:	4463      	add	r3, ip
   15086:	781b      	ldrb	r3, [r3, #0]
   15088:	2b00      	cmp	r3, #0
   1508a:	d101      	bne.n	15090 <processOnSMS+0x2dc>
   1508c:	f001 ff46 	bl	16f1c <processOnSMS+0x2168>
		{
			strcpy(resep_msg,"ALL SETTINGS ARE NOW FACTORY DEFAULT");
   15090:	230c      	movs	r3, #12
   15092:	2208      	movs	r2, #8
   15094:	4694      	mov	ip, r2
   15096:	44bc      	add	ip, r7
   15098:	4463      	add	r3, ip
   1509a:	4a57      	ldr	r2, [pc, #348]	; (151f8 <processOnSMS+0x444>)
   1509c:	ca13      	ldmia	r2!, {r0, r1, r4}
   1509e:	c313      	stmia	r3!, {r0, r1, r4}
   150a0:	ca13      	ldmia	r2!, {r0, r1, r4}
   150a2:	c313      	stmia	r3!, {r0, r1, r4}
   150a4:	ca13      	ldmia	r2!, {r0, r1, r4}
   150a6:	c313      	stmia	r3!, {r0, r1, r4}
   150a8:	7812      	ldrb	r2, [r2, #0]
   150aa:	701a      	strb	r2, [r3, #0]
   150ac:	f001 ff36 	bl	16f1c <processOnSMS+0x2168>
		}
	}
	else if (StringstartsWith(received_command,"NUM"))
   150b0:	4a52      	ldr	r2, [pc, #328]	; (151fc <processOnSMS+0x448>)
   150b2:	68fb      	ldr	r3, [r7, #12]
   150b4:	0011      	movs	r1, r2
   150b6:	0018      	movs	r0, r3
   150b8:	4b28      	ldr	r3, [pc, #160]	; (1515c <processOnSMS+0x3a8>)
   150ba:	4798      	blx	r3
   150bc:	1e03      	subs	r3, r0, #0
   150be:	d038      	beq.n	15132 <processOnSMS+0x37e>
	{
		response_sms_processed_cmd = true;
   150c0:	4b23      	ldr	r3, [pc, #140]	; (15150 <processOnSMS+0x39c>)
   150c2:	2294      	movs	r2, #148	; 0x94
   150c4:	0052      	lsls	r2, r2, #1
   150c6:	4694      	mov	ip, r2
   150c8:	2208      	movs	r2, #8
   150ca:	4690      	mov	r8, r2
   150cc:	44b8      	add	r8, r7
   150ce:	44c4      	add	ip, r8
   150d0:	4463      	add	r3, ip
   150d2:	2201      	movs	r2, #1
   150d4:	701a      	strb	r2, [r3, #0]
		incomingSMSProcessed=true;
   150d6:	2328      	movs	r3, #40	; 0x28
   150d8:	33ff      	adds	r3, #255	; 0xff
   150da:	2208      	movs	r2, #8
   150dc:	4694      	mov	ip, r2
   150de:	44bc      	add	ip, r7
   150e0:	4463      	add	r3, ip
   150e2:	2201      	movs	r2, #1
   150e4:	701a      	strb	r2, [r3, #0]
		
		memset(resep_msg, '\0', sizeof(resep_msg));
   150e6:	230c      	movs	r3, #12
   150e8:	2208      	movs	r2, #8
   150ea:	4694      	mov	ip, r2
   150ec:	44bc      	add	ip, r7
   150ee:	4463      	add	r3, ip
   150f0:	22fa      	movs	r2, #250	; 0xfa
   150f2:	2100      	movs	r1, #0
   150f4:	0018      	movs	r0, r3
   150f6:	4b1d      	ldr	r3, [pc, #116]	; (1516c <processOnSMS+0x3b8>)
   150f8:	4798      	blx	r3
		if (user_count_struct.current_user_no_count==0)
   150fa:	4b41      	ldr	r3, [pc, #260]	; (15200 <processOnSMS+0x44c>)
   150fc:	789b      	ldrb	r3, [r3, #2]
   150fe:	2b00      	cmp	r3, #0
   15100:	d10d      	bne.n	1511e <processOnSMS+0x36a>
		{
			strcpy(resep_msg,"No Numbers Exists");
   15102:	230c      	movs	r3, #12
   15104:	2208      	movs	r2, #8
   15106:	4694      	mov	ip, r2
   15108:	44bc      	add	ip, r7
   1510a:	4463      	add	r3, ip
   1510c:	4a3d      	ldr	r2, [pc, #244]	; (15204 <processOnSMS+0x450>)
   1510e:	ca13      	ldmia	r2!, {r0, r1, r4}
   15110:	c313      	stmia	r3!, {r0, r1, r4}
   15112:	6811      	ldr	r1, [r2, #0]
   15114:	6019      	str	r1, [r3, #0]
   15116:	8892      	ldrh	r2, [r2, #4]
   15118:	809a      	strh	r2, [r3, #4]
   1511a:	f001 feff 	bl	16f1c <processOnSMS+0x2168>
		}
		else
		{
			getNumbers(resep_msg);
   1511e:	230c      	movs	r3, #12
   15120:	2208      	movs	r2, #8
   15122:	4694      	mov	ip, r2
   15124:	44bc      	add	ip, r7
   15126:	4463      	add	r3, ip
   15128:	0018      	movs	r0, r3
   1512a:	4b37      	ldr	r3, [pc, #220]	; (15208 <processOnSMS+0x454>)
   1512c:	4798      	blx	r3
   1512e:	f001 fef5 	bl	16f1c <processOnSMS+0x2168>
		}
	}
	else if (StringstartsWith(received_command,"RESET"))
   15132:	4a36      	ldr	r2, [pc, #216]	; (1520c <processOnSMS+0x458>)
   15134:	68fb      	ldr	r3, [r7, #12]
   15136:	0011      	movs	r1, r2
   15138:	0018      	movs	r0, r3
   1513a:	4b08      	ldr	r3, [pc, #32]	; (1515c <processOnSMS+0x3a8>)
   1513c:	4798      	blx	r3
   1513e:	1e03      	subs	r3, r0, #0
   15140:	d066      	beq.n	15210 <processOnSMS+0x45c>
	{
		system_reset();
   15142:	4b12      	ldr	r3, [pc, #72]	; (1518c <processOnSMS+0x3d8>)
   15144:	4798      	blx	r3
   15146:	f001 fee9 	bl	16f1c <processOnSMS+0x2168>
   1514a:	46c0      	nop			; (mov r8, r8)
   1514c:	fffffedb 	.word	0xfffffedb
   15150:	fffffeda 	.word	0xfffffeda
   15154:	fffffed9 	.word	0xfffffed9
   15158:	0002a150 	.word	0x0002a150
   1515c:	00014015 	.word	0x00014015
   15160:	0002a158 	.word	0x0002a158
   15164:	200005f8 	.word	0x200005f8
   15168:	20000604 	.word	0x20000604
   1516c:	00028f13 	.word	0x00028f13
   15170:	00029193 	.word	0x00029193
   15174:	00012301 	.word	0x00012301
   15178:	20000584 	.word	0x20000584
   1517c:	00028edd 	.word	0x00028edd
   15180:	00023af1 	.word	0x00023af1
   15184:	00023c99 	.word	0x00023c99
   15188:	0001ffe9 	.word	0x0001ffe9
   1518c:	000140e9 	.word	0x000140e9
   15190:	0002a160 	.word	0x0002a160
   15194:	00013045 	.word	0x00013045
   15198:	0002a168 	.word	0x0002a168
   1519c:	0002a18c 	.word	0x0002a18c
   151a0:	0002a1b0 	.word	0x0002a1b0
   151a4:	00011109 	.word	0x00011109
   151a8:	0002a1bc 	.word	0x0002a1bc
   151ac:	0002a1d8 	.word	0x0002a1d8
   151b0:	000112a5 	.word	0x000112a5
   151b4:	2000062c 	.word	0x2000062c
   151b8:	00011465 	.word	0x00011465
   151bc:	00010be1 	.word	0x00010be1
   151c0:	000114b1 	.word	0x000114b1
   151c4:	000114fd 	.word	0x000114fd
   151c8:	00011565 	.word	0x00011565
   151cc:	00011985 	.word	0x00011985
   151d0:	00011a1d 	.word	0x00011a1d
   151d4:	0001133d 	.word	0x0001133d
   151d8:	00011389 	.word	0x00011389
   151dc:	000112f1 	.word	0x000112f1
   151e0:	000119d1 	.word	0x000119d1
   151e4:	000115d5 	.word	0x000115d5
   151e8:	00011621 	.word	0x00011621
   151ec:	0001166d 	.word	0x0001166d
   151f0:	00011afd 	.word	0x00011afd
   151f4:	00011b4d 	.word	0x00011b4d
   151f8:	0002a1e0 	.word	0x0002a1e0
   151fc:	0002a208 	.word	0x0002a208
   15200:	20000614 	.word	0x20000614
   15204:	0002a20c 	.word	0x0002a20c
   15208:	000107f5 	.word	0x000107f5
   1520c:	0002a220 	.word	0x0002a220
	}
	else if (StringstartsWith(received_command,"DID"))
   15210:	4aea      	ldr	r2, [pc, #936]	; (155bc <processOnSMS+0x808>)
   15212:	68fb      	ldr	r3, [r7, #12]
   15214:	0011      	movs	r1, r2
   15216:	0018      	movs	r0, r3
   15218:	4be9      	ldr	r3, [pc, #932]	; (155c0 <processOnSMS+0x80c>)
   1521a:	4798      	blx	r3
   1521c:	1e03      	subs	r3, r0, #0
   1521e:	d01f      	beq.n	15260 <processOnSMS+0x4ac>
	{
		response_sms_processed_cmd=true;
   15220:	4be8      	ldr	r3, [pc, #928]	; (155c4 <processOnSMS+0x810>)
   15222:	2294      	movs	r2, #148	; 0x94
   15224:	0052      	lsls	r2, r2, #1
   15226:	4694      	mov	ip, r2
   15228:	2208      	movs	r2, #8
   1522a:	4690      	mov	r8, r2
   1522c:	44b8      	add	r8, r7
   1522e:	44c4      	add	ip, r8
   15230:	4463      	add	r3, ip
   15232:	2201      	movs	r2, #1
   15234:	701a      	strb	r2, [r3, #0]
		incomingSMSProcessed=true;
   15236:	2328      	movs	r3, #40	; 0x28
   15238:	33ff      	adds	r3, #255	; 0xff
   1523a:	2208      	movs	r2, #8
   1523c:	4694      	mov	ip, r2
   1523e:	44bc      	add	ip, r7
   15240:	4463      	add	r3, ip
   15242:	2201      	movs	r2, #1
   15244:	701a      	strb	r2, [r3, #0]
		sprintf(resep_msg,"%lu %s",factory_settings_parameter_struct.DeviceId_ee,VERSION_NO);
   15246:	4be0      	ldr	r3, [pc, #896]	; (155c8 <processOnSMS+0x814>)
   15248:	689a      	ldr	r2, [r3, #8]
   1524a:	4be0      	ldr	r3, [pc, #896]	; (155cc <processOnSMS+0x818>)
   1524c:	49e0      	ldr	r1, [pc, #896]	; (155d0 <processOnSMS+0x81c>)
   1524e:	200c      	movs	r0, #12
   15250:	2408      	movs	r4, #8
   15252:	46a4      	mov	ip, r4
   15254:	44bc      	add	ip, r7
   15256:	4460      	add	r0, ip
   15258:	4cde      	ldr	r4, [pc, #888]	; (155d4 <processOnSMS+0x820>)
   1525a:	47a0      	blx	r4
   1525c:	f001 fe5e 	bl	16f1c <processOnSMS+0x2168>
		//sprintf(resep_msg,"Software:%s\nModel:%d\nDeviceId:%lu\nHW:%d",
		//SOFTWARE_VER,factory_parameter_struct.u16tmodelNo,factory_parameter_struct.u32deviceId,
		//factory_parameter_struct.u16thardwareVer);

	}
	else if (StringstartsWith(received_command,"AUTOON"))
   15260:	4add      	ldr	r2, [pc, #884]	; (155d8 <processOnSMS+0x824>)
   15262:	68fb      	ldr	r3, [r7, #12]
   15264:	0011      	movs	r1, r2
   15266:	0018      	movs	r0, r3
   15268:	4bd5      	ldr	r3, [pc, #852]	; (155c0 <processOnSMS+0x80c>)
   1526a:	4798      	blx	r3
   1526c:	1e03      	subs	r3, r0, #0
   1526e:	d027      	beq.n	152c0 <processOnSMS+0x50c>
	{
		saveAutoStartSettings(true);
   15270:	2001      	movs	r0, #1
   15272:	4bda      	ldr	r3, [pc, #872]	; (155dc <processOnSMS+0x828>)
   15274:	4798      	blx	r3
		resetAutoStart(true);
   15276:	2001      	movs	r0, #1
   15278:	4bd9      	ldr	r3, [pc, #868]	; (155e0 <processOnSMS+0x82c>)
   1527a:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   1527c:	2328      	movs	r3, #40	; 0x28
   1527e:	33ff      	adds	r3, #255	; 0xff
   15280:	2208      	movs	r2, #8
   15282:	4694      	mov	ip, r2
   15284:	44bc      	add	ip, r7
   15286:	4463      	add	r3, ip
   15288:	2201      	movs	r2, #1
   1528a:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   1528c:	4bcd      	ldr	r3, [pc, #820]	; (155c4 <processOnSMS+0x810>)
   1528e:	2294      	movs	r2, #148	; 0x94
   15290:	0052      	lsls	r2, r2, #1
   15292:	4694      	mov	ip, r2
   15294:	2208      	movs	r2, #8
   15296:	4690      	mov	r8, r2
   15298:	44b8      	add	r8, r7
   1529a:	44c4      	add	ip, r8
   1529c:	4463      	add	r3, ip
   1529e:	781b      	ldrb	r3, [r3, #0]
   152a0:	2b00      	cmp	r3, #0
   152a2:	d101      	bne.n	152a8 <processOnSMS+0x4f4>
   152a4:	f001 fe3a 	bl	16f1c <processOnSMS+0x2168>
		{
			strcpy(resep_msg,"MOTOR AUTOON ON");
   152a8:	230c      	movs	r3, #12
   152aa:	2208      	movs	r2, #8
   152ac:	4694      	mov	ip, r2
   152ae:	44bc      	add	ip, r7
   152b0:	4463      	add	r3, ip
   152b2:	4acc      	ldr	r2, [pc, #816]	; (155e4 <processOnSMS+0x830>)
   152b4:	ca13      	ldmia	r2!, {r0, r1, r4}
   152b6:	c313      	stmia	r3!, {r0, r1, r4}
   152b8:	6812      	ldr	r2, [r2, #0]
   152ba:	601a      	str	r2, [r3, #0]
   152bc:	f001 fe2e 	bl	16f1c <processOnSMS+0x2168>
		}
	}
	else if (StringstartsWith(received_command,"AUTOOFF"))
   152c0:	4ac9      	ldr	r2, [pc, #804]	; (155e8 <processOnSMS+0x834>)
   152c2:	68fb      	ldr	r3, [r7, #12]
   152c4:	0011      	movs	r1, r2
   152c6:	0018      	movs	r0, r3
   152c8:	4bbd      	ldr	r3, [pc, #756]	; (155c0 <processOnSMS+0x80c>)
   152ca:	4798      	blx	r3
   152cc:	1e03      	subs	r3, r0, #0
   152ce:	d029      	beq.n	15324 <processOnSMS+0x570>
	{
		saveAutoStartSettings(false);
   152d0:	2000      	movs	r0, #0
   152d2:	4bc2      	ldr	r3, [pc, #776]	; (155dc <processOnSMS+0x828>)
   152d4:	4798      	blx	r3
		resetAutoStart(true);
   152d6:	2001      	movs	r0, #1
   152d8:	4bc1      	ldr	r3, [pc, #772]	; (155e0 <processOnSMS+0x82c>)
   152da:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   152dc:	2328      	movs	r3, #40	; 0x28
   152de:	33ff      	adds	r3, #255	; 0xff
   152e0:	2208      	movs	r2, #8
   152e2:	4694      	mov	ip, r2
   152e4:	44bc      	add	ip, r7
   152e6:	4463      	add	r3, ip
   152e8:	2201      	movs	r2, #1
   152ea:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   152ec:	4bb5      	ldr	r3, [pc, #724]	; (155c4 <processOnSMS+0x810>)
   152ee:	2294      	movs	r2, #148	; 0x94
   152f0:	0052      	lsls	r2, r2, #1
   152f2:	4694      	mov	ip, r2
   152f4:	2208      	movs	r2, #8
   152f6:	4690      	mov	r8, r2
   152f8:	44b8      	add	r8, r7
   152fa:	44c4      	add	ip, r8
   152fc:	4463      	add	r3, ip
   152fe:	781b      	ldrb	r3, [r3, #0]
   15300:	2b00      	cmp	r3, #0
   15302:	d101      	bne.n	15308 <processOnSMS+0x554>
   15304:	f001 fe0a 	bl	16f1c <processOnSMS+0x2168>
		{
			strcpy(resep_msg,"MOTOR AUTOON OFF");
   15308:	230c      	movs	r3, #12
   1530a:	2208      	movs	r2, #8
   1530c:	4694      	mov	ip, r2
   1530e:	44bc      	add	ip, r7
   15310:	4463      	add	r3, ip
   15312:	4ab6      	ldr	r2, [pc, #728]	; (155ec <processOnSMS+0x838>)
   15314:	ca13      	ldmia	r2!, {r0, r1, r4}
   15316:	c313      	stmia	r3!, {r0, r1, r4}
   15318:	6811      	ldr	r1, [r2, #0]
   1531a:	6019      	str	r1, [r3, #0]
   1531c:	7912      	ldrb	r2, [r2, #4]
   1531e:	711a      	strb	r2, [r3, #4]
   15320:	f001 fdfc 	bl	16f1c <processOnSMS+0x2168>
		}
	}
	else if (StringstartsWith(received_command,"WBYPON"))
   15324:	4ab2      	ldr	r2, [pc, #712]	; (155f0 <processOnSMS+0x83c>)
   15326:	68fb      	ldr	r3, [r7, #12]
   15328:	0011      	movs	r1, r2
   1532a:	0018      	movs	r0, r3
   1532c:	4ba4      	ldr	r3, [pc, #656]	; (155c0 <processOnSMS+0x80c>)
   1532e:	4798      	blx	r3
   15330:	1e03      	subs	r3, r0, #0
   15332:	d02a      	beq.n	1538a <processOnSMS+0x5d6>
	{
		
		if (factory_settings_parameter_struct.ENABLE_WATER)
   15334:	4ba4      	ldr	r3, [pc, #656]	; (155c8 <processOnSMS+0x814>)
   15336:	795b      	ldrb	r3, [r3, #5]
   15338:	2b00      	cmp	r3, #0
   1533a:	d101      	bne.n	15340 <processOnSMS+0x58c>
   1533c:	f001 fdee 	bl	16f1c <processOnSMS+0x2168>
		{
			incomingSMSProcessed=true;
   15340:	2328      	movs	r3, #40	; 0x28
   15342:	33ff      	adds	r3, #255	; 0xff
   15344:	2208      	movs	r2, #8
   15346:	4694      	mov	ip, r2
   15348:	44bc      	add	ip, r7
   1534a:	4463      	add	r3, ip
   1534c:	2201      	movs	r2, #1
   1534e:	701a      	strb	r2, [r3, #0]
			saveWaterBypassSettings(true);
   15350:	2001      	movs	r0, #1
   15352:	4ba8      	ldr	r3, [pc, #672]	; (155f4 <processOnSMS+0x840>)
   15354:	4798      	blx	r3
			if (response_sms_processed_cmd == true)
   15356:	4b9b      	ldr	r3, [pc, #620]	; (155c4 <processOnSMS+0x810>)
   15358:	2294      	movs	r2, #148	; 0x94
   1535a:	0052      	lsls	r2, r2, #1
   1535c:	4694      	mov	ip, r2
   1535e:	2208      	movs	r2, #8
   15360:	4690      	mov	r8, r2
   15362:	44b8      	add	r8, r7
   15364:	44c4      	add	ip, r8
   15366:	4463      	add	r3, ip
   15368:	781b      	ldrb	r3, [r3, #0]
   1536a:	2b00      	cmp	r3, #0
   1536c:	d101      	bne.n	15372 <processOnSMS+0x5be>
   1536e:	f001 fdd5 	bl	16f1c <processOnSMS+0x2168>
			{
				strcpy(resep_msg,"WATER BYPASS ON");
   15372:	230c      	movs	r3, #12
   15374:	2208      	movs	r2, #8
   15376:	4694      	mov	ip, r2
   15378:	44bc      	add	ip, r7
   1537a:	4463      	add	r3, ip
   1537c:	4a9e      	ldr	r2, [pc, #632]	; (155f8 <processOnSMS+0x844>)
   1537e:	ca13      	ldmia	r2!, {r0, r1, r4}
   15380:	c313      	stmia	r3!, {r0, r1, r4}
   15382:	6812      	ldr	r2, [r2, #0]
   15384:	601a      	str	r2, [r3, #0]
   15386:	f001 fdc9 	bl	16f1c <processOnSMS+0x2168>
			}
		}
	}
	else if (StringstartsWith(received_command,"WBYPOFF"))
   1538a:	4a9c      	ldr	r2, [pc, #624]	; (155fc <processOnSMS+0x848>)
   1538c:	68fb      	ldr	r3, [r7, #12]
   1538e:	0011      	movs	r1, r2
   15390:	0018      	movs	r0, r3
   15392:	4b8b      	ldr	r3, [pc, #556]	; (155c0 <processOnSMS+0x80c>)
   15394:	4798      	blx	r3
   15396:	1e03      	subs	r3, r0, #0
   15398:	d02c      	beq.n	153f4 <processOnSMS+0x640>
	{
		if (factory_settings_parameter_struct.ENABLE_WATER)
   1539a:	4b8b      	ldr	r3, [pc, #556]	; (155c8 <processOnSMS+0x814>)
   1539c:	795b      	ldrb	r3, [r3, #5]
   1539e:	2b00      	cmp	r3, #0
   153a0:	d101      	bne.n	153a6 <processOnSMS+0x5f2>
   153a2:	f001 fdbb 	bl	16f1c <processOnSMS+0x2168>
		{
			incomingSMSProcessed=true;
   153a6:	2328      	movs	r3, #40	; 0x28
   153a8:	33ff      	adds	r3, #255	; 0xff
   153aa:	2208      	movs	r2, #8
   153ac:	4694      	mov	ip, r2
   153ae:	44bc      	add	ip, r7
   153b0:	4463      	add	r3, ip
   153b2:	2201      	movs	r2, #1
   153b4:	701a      	strb	r2, [r3, #0]
			saveWaterBypassSettings(false);
   153b6:	2000      	movs	r0, #0
   153b8:	4b8e      	ldr	r3, [pc, #568]	; (155f4 <processOnSMS+0x840>)
   153ba:	4798      	blx	r3
			if (response_sms_processed_cmd == true)
   153bc:	4b81      	ldr	r3, [pc, #516]	; (155c4 <processOnSMS+0x810>)
   153be:	2294      	movs	r2, #148	; 0x94
   153c0:	0052      	lsls	r2, r2, #1
   153c2:	4694      	mov	ip, r2
   153c4:	2208      	movs	r2, #8
   153c6:	4690      	mov	r8, r2
   153c8:	44b8      	add	r8, r7
   153ca:	44c4      	add	ip, r8
   153cc:	4463      	add	r3, ip
   153ce:	781b      	ldrb	r3, [r3, #0]
   153d0:	2b00      	cmp	r3, #0
   153d2:	d101      	bne.n	153d8 <processOnSMS+0x624>
   153d4:	f001 fda2 	bl	16f1c <processOnSMS+0x2168>
			{
				strcpy(resep_msg,"WATER BYPASS OFF");
   153d8:	230c      	movs	r3, #12
   153da:	2208      	movs	r2, #8
   153dc:	4694      	mov	ip, r2
   153de:	44bc      	add	ip, r7
   153e0:	4463      	add	r3, ip
   153e2:	4a87      	ldr	r2, [pc, #540]	; (15600 <processOnSMS+0x84c>)
   153e4:	ca13      	ldmia	r2!, {r0, r1, r4}
   153e6:	c313      	stmia	r3!, {r0, r1, r4}
   153e8:	6811      	ldr	r1, [r2, #0]
   153ea:	6019      	str	r1, [r3, #0]
   153ec:	7912      	ldrb	r2, [r2, #4]
   153ee:	711a      	strb	r2, [r3, #4]
   153f0:	f001 fd94 	bl	16f1c <processOnSMS+0x2168>
			}
		}
	}
	else if (StringstartsWith(received_command,"SPPON"))
   153f4:	4a83      	ldr	r2, [pc, #524]	; (15604 <processOnSMS+0x850>)
   153f6:	68fb      	ldr	r3, [r7, #12]
   153f8:	0011      	movs	r1, r2
   153fa:	0018      	movs	r0, r3
   153fc:	4b70      	ldr	r3, [pc, #448]	; (155c0 <processOnSMS+0x80c>)
   153fe:	4798      	blx	r3
   15400:	1e03      	subs	r3, r0, #0
   15402:	d026      	beq.n	15452 <processOnSMS+0x69e>
	{
		saveSinglePhasingSettings(true);
   15404:	2001      	movs	r0, #1
   15406:	4b80      	ldr	r3, [pc, #512]	; (15608 <processOnSMS+0x854>)
   15408:	4798      	blx	r3
		incomingSMSProcessed=true;
   1540a:	2328      	movs	r3, #40	; 0x28
   1540c:	33ff      	adds	r3, #255	; 0xff
   1540e:	2208      	movs	r2, #8
   15410:	4694      	mov	ip, r2
   15412:	44bc      	add	ip, r7
   15414:	4463      	add	r3, ip
   15416:	2201      	movs	r2, #1
   15418:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
   1541a:	4b6a      	ldr	r3, [pc, #424]	; (155c4 <processOnSMS+0x810>)
   1541c:	2294      	movs	r2, #148	; 0x94
   1541e:	0052      	lsls	r2, r2, #1
   15420:	4694      	mov	ip, r2
   15422:	2208      	movs	r2, #8
   15424:	4690      	mov	r8, r2
   15426:	44b8      	add	r8, r7
   15428:	44c4      	add	ip, r8
   1542a:	4463      	add	r3, ip
   1542c:	781b      	ldrb	r3, [r3, #0]
   1542e:	2b00      	cmp	r3, #0
   15430:	d101      	bne.n	15436 <processOnSMS+0x682>
   15432:	f001 fd73 	bl	16f1c <processOnSMS+0x2168>
		{
			strcpy(resep_msg,"SPP ON");
   15436:	230c      	movs	r3, #12
   15438:	2208      	movs	r2, #8
   1543a:	4694      	mov	ip, r2
   1543c:	44bc      	add	ip, r7
   1543e:	4463      	add	r3, ip
   15440:	4a72      	ldr	r2, [pc, #456]	; (1560c <processOnSMS+0x858>)
   15442:	6811      	ldr	r1, [r2, #0]
   15444:	6019      	str	r1, [r3, #0]
   15446:	8891      	ldrh	r1, [r2, #4]
   15448:	8099      	strh	r1, [r3, #4]
   1544a:	7992      	ldrb	r2, [r2, #6]
   1544c:	719a      	strb	r2, [r3, #6]
   1544e:	f001 fd65 	bl	16f1c <processOnSMS+0x2168>
		}
	}
	else if (StringstartsWith(received_command,"SPPOFF"))
   15452:	4a6f      	ldr	r2, [pc, #444]	; (15610 <processOnSMS+0x85c>)
   15454:	68fb      	ldr	r3, [r7, #12]
   15456:	0011      	movs	r1, r2
   15458:	0018      	movs	r0, r3
   1545a:	4b59      	ldr	r3, [pc, #356]	; (155c0 <processOnSMS+0x80c>)
   1545c:	4798      	blx	r3
   1545e:	1e03      	subs	r3, r0, #0
   15460:	d022      	beq.n	154a8 <processOnSMS+0x6f4>
	{
		saveSinglePhasingSettings(false);
   15462:	2000      	movs	r0, #0
   15464:	4b68      	ldr	r3, [pc, #416]	; (15608 <processOnSMS+0x854>)
   15466:	4798      	blx	r3
		incomingSMSProcessed=true;
   15468:	2328      	movs	r3, #40	; 0x28
   1546a:	33ff      	adds	r3, #255	; 0xff
   1546c:	2208      	movs	r2, #8
   1546e:	4694      	mov	ip, r2
   15470:	44bc      	add	ip, r7
   15472:	4463      	add	r3, ip
   15474:	2201      	movs	r2, #1
   15476:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
   15478:	4b52      	ldr	r3, [pc, #328]	; (155c4 <processOnSMS+0x810>)
   1547a:	2294      	movs	r2, #148	; 0x94
   1547c:	0052      	lsls	r2, r2, #1
   1547e:	4694      	mov	ip, r2
   15480:	2208      	movs	r2, #8
   15482:	4690      	mov	r8, r2
   15484:	44b8      	add	r8, r7
   15486:	44c4      	add	ip, r8
   15488:	4463      	add	r3, ip
   1548a:	781b      	ldrb	r3, [r3, #0]
   1548c:	2b00      	cmp	r3, #0
   1548e:	d101      	bne.n	15494 <processOnSMS+0x6e0>
   15490:	f001 fd44 	bl	16f1c <processOnSMS+0x2168>
		{
			strcpy(resep_msg,"SPP OFF");
   15494:	230c      	movs	r3, #12
   15496:	2208      	movs	r2, #8
   15498:	4694      	mov	ip, r2
   1549a:	44bc      	add	ip, r7
   1549c:	4463      	add	r3, ip
   1549e:	4a5d      	ldr	r2, [pc, #372]	; (15614 <processOnSMS+0x860>)
   154a0:	ca03      	ldmia	r2!, {r0, r1}
   154a2:	c303      	stmia	r3!, {r0, r1}
   154a4:	f001 fd3a 	bl	16f1c <processOnSMS+0x2168>
		}
	}
	else if(StringstartsWith(received_command,"SPPV"))
   154a8:	4a5b      	ldr	r2, [pc, #364]	; (15618 <processOnSMS+0x864>)
   154aa:	68fb      	ldr	r3, [r7, #12]
   154ac:	0011      	movs	r1, r2
   154ae:	0018      	movs	r0, r3
   154b0:	4b43      	ldr	r3, [pc, #268]	; (155c0 <processOnSMS+0x80c>)
   154b2:	4798      	blx	r3
   154b4:	1e03      	subs	r3, r0, #0
   154b6:	d055      	beq.n	15564 <processOnSMS+0x7b0>
	{
		memmove(received_command,received_command+4,strlen(received_command));
   154b8:	68fb      	ldr	r3, [r7, #12]
   154ba:	1d1c      	adds	r4, r3, #4
   154bc:	68fb      	ldr	r3, [r7, #12]
   154be:	0018      	movs	r0, r3
   154c0:	4b56      	ldr	r3, [pc, #344]	; (1561c <processOnSMS+0x868>)
   154c2:	4798      	blx	r3
   154c4:	0002      	movs	r2, r0
   154c6:	68fb      	ldr	r3, [r7, #12]
   154c8:	0021      	movs	r1, r4
   154ca:	0018      	movs	r0, r3
   154cc:	4b54      	ldr	r3, [pc, #336]	; (15620 <processOnSMS+0x86c>)
   154ce:	4798      	blx	r3
		uint8_t sppVoltage = atoi(received_command);
   154d0:	68fb      	ldr	r3, [r7, #12]
   154d2:	0018      	movs	r0, r3
   154d4:	4b53      	ldr	r3, [pc, #332]	; (15624 <processOnSMS+0x870>)
   154d6:	4798      	blx	r3
   154d8:	0002      	movs	r2, r0
   154da:	2393      	movs	r3, #147	; 0x93
   154dc:	005b      	lsls	r3, r3, #1
   154de:	2108      	movs	r1, #8
   154e0:	468c      	mov	ip, r1
   154e2:	44bc      	add	ip, r7
   154e4:	4463      	add	r3, ip
   154e6:	701a      	strb	r2, [r3, #0]
		if(sppVoltage<20) sppVoltage=20;
   154e8:	2393      	movs	r3, #147	; 0x93
   154ea:	005b      	lsls	r3, r3, #1
   154ec:	2208      	movs	r2, #8
   154ee:	4694      	mov	ip, r2
   154f0:	44bc      	add	ip, r7
   154f2:	4463      	add	r3, ip
   154f4:	781b      	ldrb	r3, [r3, #0]
   154f6:	2b13      	cmp	r3, #19
   154f8:	d807      	bhi.n	1550a <processOnSMS+0x756>
   154fa:	2393      	movs	r3, #147	; 0x93
   154fc:	005b      	lsls	r3, r3, #1
   154fe:	2208      	movs	r2, #8
   15500:	4694      	mov	ip, r2
   15502:	44bc      	add	ip, r7
   15504:	4463      	add	r3, ip
   15506:	2214      	movs	r2, #20
   15508:	701a      	strb	r2, [r3, #0]
		if(sppVoltage>440) sppVoltage=440;
		saveSinglePhasingVoltage(sppVoltage);
   1550a:	2393      	movs	r3, #147	; 0x93
   1550c:	005b      	lsls	r3, r3, #1
   1550e:	2208      	movs	r2, #8
   15510:	4694      	mov	ip, r2
   15512:	44bc      	add	ip, r7
   15514:	4463      	add	r3, ip
   15516:	781b      	ldrb	r3, [r3, #0]
   15518:	b29b      	uxth	r3, r3
   1551a:	0018      	movs	r0, r3
   1551c:	4b42      	ldr	r3, [pc, #264]	; (15628 <processOnSMS+0x874>)
   1551e:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   15520:	2328      	movs	r3, #40	; 0x28
   15522:	33ff      	adds	r3, #255	; 0xff
   15524:	2208      	movs	r2, #8
   15526:	4694      	mov	ip, r2
   15528:	44bc      	add	ip, r7
   1552a:	4463      	add	r3, ip
   1552c:	2201      	movs	r2, #1
   1552e:	701a      	strb	r2, [r3, #0]
		
		
		if (response_sms_processed_cmd == true)
   15530:	4b24      	ldr	r3, [pc, #144]	; (155c4 <processOnSMS+0x810>)
   15532:	2294      	movs	r2, #148	; 0x94
   15534:	0052      	lsls	r2, r2, #1
   15536:	4694      	mov	ip, r2
   15538:	2208      	movs	r2, #8
   1553a:	4690      	mov	r8, r2
   1553c:	44b8      	add	r8, r7
   1553e:	44c4      	add	ip, r8
   15540:	4463      	add	r3, ip
   15542:	781b      	ldrb	r3, [r3, #0]
   15544:	2b00      	cmp	r3, #0
   15546:	d101      	bne.n	1554c <processOnSMS+0x798>
   15548:	f001 fce8 	bl	16f1c <processOnSMS+0x2168>
		{
			strcpy(resep_msg,"SPP VOLT SET");
   1554c:	230c      	movs	r3, #12
   1554e:	2208      	movs	r2, #8
   15550:	4694      	mov	ip, r2
   15552:	44bc      	add	ip, r7
   15554:	4463      	add	r3, ip
   15556:	4a35      	ldr	r2, [pc, #212]	; (1562c <processOnSMS+0x878>)
   15558:	ca13      	ldmia	r2!, {r0, r1, r4}
   1555a:	c313      	stmia	r3!, {r0, r1, r4}
   1555c:	7812      	ldrb	r2, [r2, #0]
   1555e:	701a      	strb	r2, [r3, #0]
   15560:	f001 fcdc 	bl	16f1c <processOnSMS+0x2168>
		}
	}
	else if(StringstartsWith(received_command,"SEQON"))
   15564:	4a32      	ldr	r2, [pc, #200]	; (15630 <processOnSMS+0x87c>)
   15566:	68fb      	ldr	r3, [r7, #12]
   15568:	0011      	movs	r1, r2
   1556a:	0018      	movs	r0, r3
   1556c:	4b14      	ldr	r3, [pc, #80]	; (155c0 <processOnSMS+0x80c>)
   1556e:	4798      	blx	r3
   15570:	1e03      	subs	r3, r0, #0
   15572:	d063      	beq.n	1563c <processOnSMS+0x888>
	{
		savePhaseSequenceProtectionSettings(true);
   15574:	2001      	movs	r0, #1
   15576:	4b2f      	ldr	r3, [pc, #188]	; (15634 <processOnSMS+0x880>)
   15578:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   1557a:	2328      	movs	r3, #40	; 0x28
   1557c:	33ff      	adds	r3, #255	; 0xff
   1557e:	2208      	movs	r2, #8
   15580:	4694      	mov	ip, r2
   15582:	44bc      	add	ip, r7
   15584:	4463      	add	r3, ip
   15586:	2201      	movs	r2, #1
   15588:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   1558a:	4b0e      	ldr	r3, [pc, #56]	; (155c4 <processOnSMS+0x810>)
   1558c:	2294      	movs	r2, #148	; 0x94
   1558e:	0052      	lsls	r2, r2, #1
   15590:	4694      	mov	ip, r2
   15592:	2208      	movs	r2, #8
   15594:	4690      	mov	r8, r2
   15596:	44b8      	add	r8, r7
   15598:	44c4      	add	ip, r8
   1559a:	4463      	add	r3, ip
   1559c:	781b      	ldrb	r3, [r3, #0]
   1559e:	2b00      	cmp	r3, #0
   155a0:	d101      	bne.n	155a6 <processOnSMS+0x7f2>
   155a2:	f001 fcbb 	bl	16f1c <processOnSMS+0x2168>
		{
			strcpy(resep_msg,"SEQP ON");
   155a6:	230c      	movs	r3, #12
   155a8:	2208      	movs	r2, #8
   155aa:	4694      	mov	ip, r2
   155ac:	44bc      	add	ip, r7
   155ae:	4463      	add	r3, ip
   155b0:	4a21      	ldr	r2, [pc, #132]	; (15638 <processOnSMS+0x884>)
   155b2:	ca03      	ldmia	r2!, {r0, r1}
   155b4:	c303      	stmia	r3!, {r0, r1}
   155b6:	f001 fcb1 	bl	16f1c <processOnSMS+0x2168>
   155ba:	46c0      	nop			; (mov r8, r8)
   155bc:	0002a228 	.word	0x0002a228
   155c0:	00014015 	.word	0x00014015
   155c4:	fffffeda 	.word	0xfffffeda
   155c8:	2000062c 	.word	0x2000062c
   155cc:	0002a22c 	.word	0x0002a22c
   155d0:	0002a240 	.word	0x0002a240
   155d4:	00029119 	.word	0x00029119
   155d8:	0002a248 	.word	0x0002a248
   155dc:	000112a5 	.word	0x000112a5
   155e0:	0001af99 	.word	0x0001af99
   155e4:	0002a250 	.word	0x0002a250
   155e8:	0002a260 	.word	0x0002a260
   155ec:	0002a268 	.word	0x0002a268
   155f0:	0002a27c 	.word	0x0002a27c
   155f4:	00011465 	.word	0x00011465
   155f8:	0002a284 	.word	0x0002a284
   155fc:	0002a294 	.word	0x0002a294
   15600:	0002a29c 	.word	0x0002a29c
   15604:	0002a2b0 	.word	0x0002a2b0
   15608:	000115d5 	.word	0x000115d5
   1560c:	0002a2b8 	.word	0x0002a2b8
   15610:	0002a2c0 	.word	0x0002a2c0
   15614:	0002a2c8 	.word	0x0002a2c8
   15618:	0002a2d0 	.word	0x0002a2d0
   1561c:	000291a3 	.word	0x000291a3
   15620:	00028eef 	.word	0x00028eef
   15624:	00028df9 	.word	0x00028df9
   15628:	00011621 	.word	0x00011621
   1562c:	0002a2d8 	.word	0x0002a2d8
   15630:	0002a2e8 	.word	0x0002a2e8
   15634:	0001166d 	.word	0x0001166d
   15638:	0002a2f0 	.word	0x0002a2f0
		}
	}
	else if(StringstartsWith(received_command,"SEQOFF"))
   1563c:	4adc      	ldr	r2, [pc, #880]	; (159b0 <processOnSMS+0xbfc>)
   1563e:	68fb      	ldr	r3, [r7, #12]
   15640:	0011      	movs	r1, r2
   15642:	0018      	movs	r0, r3
   15644:	4bdb      	ldr	r3, [pc, #876]	; (159b4 <processOnSMS+0xc00>)
   15646:	4798      	blx	r3
   15648:	1e03      	subs	r3, r0, #0
   1564a:	d024      	beq.n	15696 <processOnSMS+0x8e2>
	{
		savePhaseSequenceProtectionSettings(false);
   1564c:	2000      	movs	r0, #0
   1564e:	4bda      	ldr	r3, [pc, #872]	; (159b8 <processOnSMS+0xc04>)
   15650:	4798      	blx	r3

		incomingSMSProcessed=true;
   15652:	2328      	movs	r3, #40	; 0x28
   15654:	33ff      	adds	r3, #255	; 0xff
   15656:	2208      	movs	r2, #8
   15658:	4694      	mov	ip, r2
   1565a:	44bc      	add	ip, r7
   1565c:	4463      	add	r3, ip
   1565e:	2201      	movs	r2, #1
   15660:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
   15662:	4bd6      	ldr	r3, [pc, #856]	; (159bc <processOnSMS+0xc08>)
   15664:	2294      	movs	r2, #148	; 0x94
   15666:	0052      	lsls	r2, r2, #1
   15668:	4694      	mov	ip, r2
   1566a:	2208      	movs	r2, #8
   1566c:	4690      	mov	r8, r2
   1566e:	44b8      	add	r8, r7
   15670:	44c4      	add	ip, r8
   15672:	4463      	add	r3, ip
   15674:	781b      	ldrb	r3, [r3, #0]
   15676:	2b00      	cmp	r3, #0
   15678:	d101      	bne.n	1567e <processOnSMS+0x8ca>
   1567a:	f001 fc4f 	bl	16f1c <processOnSMS+0x2168>
		{
			strcpy(resep_msg,"SEQP OFF");
   1567e:	230c      	movs	r3, #12
   15680:	2208      	movs	r2, #8
   15682:	4694      	mov	ip, r2
   15684:	44bc      	add	ip, r7
   15686:	4463      	add	r3, ip
   15688:	4acd      	ldr	r2, [pc, #820]	; (159c0 <processOnSMS+0xc0c>)
   1568a:	ca03      	ldmia	r2!, {r0, r1}
   1568c:	c303      	stmia	r3!, {r0, r1}
   1568e:	7812      	ldrb	r2, [r2, #0]
   15690:	701a      	strb	r2, [r3, #0]
   15692:	f001 fc43 	bl	16f1c <processOnSMS+0x2168>
		}
	}
	else if (StringstartsWith(received_command,"DND"))
   15696:	4acb      	ldr	r2, [pc, #812]	; (159c4 <processOnSMS+0xc10>)
   15698:	68fb      	ldr	r3, [r7, #12]
   1569a:	0011      	movs	r1, r2
   1569c:	0018      	movs	r0, r3
   1569e:	4bc5      	ldr	r3, [pc, #788]	; (159b4 <processOnSMS+0xc00>)
   156a0:	4798      	blx	r3
   156a2:	1e03      	subs	r3, r0, #0
   156a4:	d06c      	beq.n	15780 <processOnSMS+0x9cc>
	{
		if (strlen(received_command)>3)
   156a6:	68fb      	ldr	r3, [r7, #12]
   156a8:	0018      	movs	r0, r3
   156aa:	4bc7      	ldr	r3, [pc, #796]	; (159c8 <processOnSMS+0xc14>)
   156ac:	4798      	blx	r3
   156ae:	0003      	movs	r3, r0
   156b0:	2b03      	cmp	r3, #3
   156b2:	d801      	bhi.n	156b8 <processOnSMS+0x904>
   156b4:	f001 fc32 	bl	16f1c <processOnSMS+0x2168>
		{
			memmove(received_command,received_command+3,strlen(received_command));
   156b8:	68fb      	ldr	r3, [r7, #12]
   156ba:	1cdc      	adds	r4, r3, #3
   156bc:	68fb      	ldr	r3, [r7, #12]
   156be:	0018      	movs	r0, r3
   156c0:	4bc1      	ldr	r3, [pc, #772]	; (159c8 <processOnSMS+0xc14>)
   156c2:	4798      	blx	r3
   156c4:	0002      	movs	r2, r0
   156c6:	68fb      	ldr	r3, [r7, #12]
   156c8:	0021      	movs	r1, r4
   156ca:	0018      	movs	r0, r3
   156cc:	4bbf      	ldr	r3, [pc, #764]	; (159cc <processOnSMS+0xc18>)
   156ce:	4798      	blx	r3
			if(received_command[0]=='L' || received_command[0]=='S' || received_command[0]=='O')
   156d0:	68fb      	ldr	r3, [r7, #12]
   156d2:	781b      	ldrb	r3, [r3, #0]
   156d4:	2b4c      	cmp	r3, #76	; 0x4c
   156d6:	d009      	beq.n	156ec <processOnSMS+0x938>
   156d8:	68fb      	ldr	r3, [r7, #12]
   156da:	781b      	ldrb	r3, [r3, #0]
   156dc:	2b53      	cmp	r3, #83	; 0x53
   156de:	d005      	beq.n	156ec <processOnSMS+0x938>
   156e0:	68fb      	ldr	r3, [r7, #12]
   156e2:	781b      	ldrb	r3, [r3, #0]
   156e4:	2b4f      	cmp	r3, #79	; 0x4f
   156e6:	d001      	beq.n	156ec <processOnSMS+0x938>
   156e8:	f001 fc18 	bl	16f1c <processOnSMS+0x2168>
			{
				saveDNDSettings((char)received_command);  //save specific RESPONSE settings
   156ec:	68fb      	ldr	r3, [r7, #12]
   156ee:	b2db      	uxtb	r3, r3
   156f0:	0018      	movs	r0, r3
   156f2:	4bb7      	ldr	r3, [pc, #732]	; (159d0 <processOnSMS+0xc1c>)
   156f4:	4798      	blx	r3
				
				incomingSMSProcessed=true;
   156f6:	2328      	movs	r3, #40	; 0x28
   156f8:	33ff      	adds	r3, #255	; 0xff
   156fa:	2208      	movs	r2, #8
   156fc:	4694      	mov	ip, r2
   156fe:	44bc      	add	ip, r7
   15700:	4463      	add	r3, ip
   15702:	2201      	movs	r2, #1
   15704:	701a      	strb	r2, [r3, #0]
				
				if (response_sms_processed_cmd == true)
   15706:	4bad      	ldr	r3, [pc, #692]	; (159bc <processOnSMS+0xc08>)
   15708:	2294      	movs	r2, #148	; 0x94
   1570a:	0052      	lsls	r2, r2, #1
   1570c:	4694      	mov	ip, r2
   1570e:	2208      	movs	r2, #8
   15710:	4690      	mov	r8, r2
   15712:	44b8      	add	r8, r7
   15714:	44c4      	add	ip, r8
   15716:	4463      	add	r3, ip
   15718:	781b      	ldrb	r3, [r3, #0]
   1571a:	2b00      	cmp	r3, #0
   1571c:	d101      	bne.n	15722 <processOnSMS+0x96e>
   1571e:	f001 fbfd 	bl	16f1c <processOnSMS+0x2168>
				{
					strcpy(resep_msg,"DND : ");
   15722:	230c      	movs	r3, #12
   15724:	2208      	movs	r2, #8
   15726:	4694      	mov	ip, r2
   15728:	44bc      	add	ip, r7
   1572a:	4463      	add	r3, ip
   1572c:	4aa9      	ldr	r2, [pc, #676]	; (159d4 <processOnSMS+0xc20>)
   1572e:	6811      	ldr	r1, [r2, #0]
   15730:	6019      	str	r1, [r3, #0]
   15732:	8891      	ldrh	r1, [r2, #4]
   15734:	8099      	strh	r1, [r3, #4]
   15736:	7992      	ldrb	r2, [r2, #6]
   15738:	719a      	strb	r2, [r3, #6]
					strcat(resep_msg,received_command);
   1573a:	68fa      	ldr	r2, [r7, #12]
   1573c:	230c      	movs	r3, #12
   1573e:	2108      	movs	r1, #8
   15740:	468c      	mov	ip, r1
   15742:	44bc      	add	ip, r7
   15744:	4463      	add	r3, ip
   15746:	0011      	movs	r1, r2
   15748:	0018      	movs	r0, r3
   1574a:	4ba3      	ldr	r3, [pc, #652]	; (159d8 <processOnSMS+0xc24>)
   1574c:	4798      	blx	r3
					strcat(resep_msg," OK");
   1574e:	230c      	movs	r3, #12
   15750:	2208      	movs	r2, #8
   15752:	4694      	mov	ip, r2
   15754:	44bc      	add	ip, r7
   15756:	4463      	add	r3, ip
   15758:	0018      	movs	r0, r3
   1575a:	4b9b      	ldr	r3, [pc, #620]	; (159c8 <processOnSMS+0xc14>)
   1575c:	4798      	blx	r3
   1575e:	0003      	movs	r3, r0
   15760:	001a      	movs	r2, r3
   15762:	230c      	movs	r3, #12
   15764:	2108      	movs	r1, #8
   15766:	468c      	mov	ip, r1
   15768:	44bc      	add	ip, r7
   1576a:	4463      	add	r3, ip
   1576c:	189a      	adds	r2, r3, r2
   1576e:	4b9b      	ldr	r3, [pc, #620]	; (159dc <processOnSMS+0xc28>)
   15770:	0010      	movs	r0, r2
   15772:	0019      	movs	r1, r3
   15774:	2304      	movs	r3, #4
   15776:	001a      	movs	r2, r3
   15778:	4b99      	ldr	r3, [pc, #612]	; (159e0 <processOnSMS+0xc2c>)
   1577a:	4798      	blx	r3
   1577c:	f001 fbce 	bl	16f1c <processOnSMS+0x2168>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"FDBK"))
   15780:	4a98      	ldr	r2, [pc, #608]	; (159e4 <processOnSMS+0xc30>)
   15782:	68fb      	ldr	r3, [r7, #12]
   15784:	0011      	movs	r1, r2
   15786:	0018      	movs	r0, r3
   15788:	4b8a      	ldr	r3, [pc, #552]	; (159b4 <processOnSMS+0xc00>)
   1578a:	4798      	blx	r3
   1578c:	1e03      	subs	r3, r0, #0
   1578e:	d072      	beq.n	15876 <processOnSMS+0xac2>
	{
		if (strlen(received_command)>4)
   15790:	68fb      	ldr	r3, [r7, #12]
   15792:	0018      	movs	r0, r3
   15794:	4b8c      	ldr	r3, [pc, #560]	; (159c8 <processOnSMS+0xc14>)
   15796:	4798      	blx	r3
   15798:	0003      	movs	r3, r0
   1579a:	2b04      	cmp	r3, #4
   1579c:	d801      	bhi.n	157a2 <processOnSMS+0x9ee>
   1579e:	f001 fbbd 	bl	16f1c <processOnSMS+0x2168>
		{
			memmove(received_command,received_command+4,strlen(received_command));
   157a2:	68fb      	ldr	r3, [r7, #12]
   157a4:	1d1c      	adds	r4, r3, #4
   157a6:	68fb      	ldr	r3, [r7, #12]
   157a8:	0018      	movs	r0, r3
   157aa:	4b87      	ldr	r3, [pc, #540]	; (159c8 <processOnSMS+0xc14>)
   157ac:	4798      	blx	r3
   157ae:	0002      	movs	r2, r0
   157b0:	68fb      	ldr	r3, [r7, #12]
   157b2:	0021      	movs	r1, r4
   157b4:	0018      	movs	r0, r3
   157b6:	4b85      	ldr	r3, [pc, #532]	; (159cc <processOnSMS+0xc18>)
   157b8:	4798      	blx	r3
			uint8_t fdbkValue = atoi(received_command);
   157ba:	68fb      	ldr	r3, [r7, #12]
   157bc:	0018      	movs	r0, r3
   157be:	4b8a      	ldr	r3, [pc, #552]	; (159e8 <processOnSMS+0xc34>)
   157c0:	4798      	blx	r3
   157c2:	0002      	movs	r2, r0
   157c4:	2326      	movs	r3, #38	; 0x26
   157c6:	33ff      	adds	r3, #255	; 0xff
   157c8:	2108      	movs	r1, #8
   157ca:	468c      	mov	ip, r1
   157cc:	44bc      	add	ip, r7
   157ce:	4463      	add	r3, ip
   157d0:	701a      	strb	r2, [r3, #0]
			if (fdbkValue <= MOTORFEEDBACK_DETECTION_ON)
   157d2:	2326      	movs	r3, #38	; 0x26
   157d4:	33ff      	adds	r3, #255	; 0xff
   157d6:	2208      	movs	r2, #8
   157d8:	4694      	mov	ip, r2
   157da:	44bc      	add	ip, r7
   157dc:	4463      	add	r3, ip
   157de:	781b      	ldrb	r3, [r3, #0]
   157e0:	2b02      	cmp	r3, #2
   157e2:	d901      	bls.n	157e8 <processOnSMS+0xa34>
   157e4:	f001 fb9a 	bl	16f1c <processOnSMS+0x2168>
			{
				if (fdbkValue == MOTORFEEDBACK_DETECTION_CURRENT)
   157e8:	2326      	movs	r3, #38	; 0x26
   157ea:	33ff      	adds	r3, #255	; 0xff
   157ec:	2208      	movs	r2, #8
   157ee:	4694      	mov	ip, r2
   157f0:	44bc      	add	ip, r7
   157f2:	4463      	add	r3, ip
   157f4:	781b      	ldrb	r3, [r3, #0]
   157f6:	2b01      	cmp	r3, #1
   157f8:	d10b      	bne.n	15812 <processOnSMS+0xa5e>
				{
					if (!factory_settings_parameter_struct.ENABLE_CURRENT)
   157fa:	4b7c      	ldr	r3, [pc, #496]	; (159ec <processOnSMS+0xc38>)
   157fc:	785b      	ldrb	r3, [r3, #1]
   157fe:	2b00      	cmp	r3, #0
   15800:	d107      	bne.n	15812 <processOnSMS+0xa5e>
					{
						fdbkValue=MOTORFEEDBACK_DETECTION_OFF;
   15802:	2326      	movs	r3, #38	; 0x26
   15804:	33ff      	adds	r3, #255	; 0xff
   15806:	2208      	movs	r2, #8
   15808:	4694      	mov	ip, r2
   1580a:	44bc      	add	ip, r7
   1580c:	4463      	add	r3, ip
   1580e:	2200      	movs	r2, #0
   15810:	701a      	strb	r2, [r3, #0]
					}
				}
				saveMotorFeedbackDetectionSettings(fdbkValue);
   15812:	2326      	movs	r3, #38	; 0x26
   15814:	33ff      	adds	r3, #255	; 0xff
   15816:	2208      	movs	r2, #8
   15818:	4694      	mov	ip, r2
   1581a:	44bc      	add	ip, r7
   1581c:	4463      	add	r3, ip
   1581e:	781b      	ldrb	r3, [r3, #0]
   15820:	0018      	movs	r0, r3
   15822:	4b73      	ldr	r3, [pc, #460]	; (159f0 <processOnSMS+0xc3c>)
   15824:	4798      	blx	r3
				incomingSMSProcessed=true;
   15826:	2328      	movs	r3, #40	; 0x28
   15828:	33ff      	adds	r3, #255	; 0xff
   1582a:	2208      	movs	r2, #8
   1582c:	4694      	mov	ip, r2
   1582e:	44bc      	add	ip, r7
   15830:	4463      	add	r3, ip
   15832:	2201      	movs	r2, #1
   15834:	701a      	strb	r2, [r3, #0]
				
				if (response_sms_processed_cmd == true)
   15836:	4b61      	ldr	r3, [pc, #388]	; (159bc <processOnSMS+0xc08>)
   15838:	2294      	movs	r2, #148	; 0x94
   1583a:	0052      	lsls	r2, r2, #1
   1583c:	4694      	mov	ip, r2
   1583e:	2208      	movs	r2, #8
   15840:	4690      	mov	r8, r2
   15842:	44b8      	add	r8, r7
   15844:	44c4      	add	ip, r8
   15846:	4463      	add	r3, ip
   15848:	781b      	ldrb	r3, [r3, #0]
   1584a:	2b00      	cmp	r3, #0
   1584c:	d101      	bne.n	15852 <processOnSMS+0xa9e>
   1584e:	f001 fb65 	bl	16f1c <processOnSMS+0x2168>
				{
					sprintf(resep_msg,"FDBK : %d", fdbkValue);
   15852:	2326      	movs	r3, #38	; 0x26
   15854:	33ff      	adds	r3, #255	; 0xff
   15856:	2208      	movs	r2, #8
   15858:	4694      	mov	ip, r2
   1585a:	44bc      	add	ip, r7
   1585c:	4463      	add	r3, ip
   1585e:	781a      	ldrb	r2, [r3, #0]
   15860:	4964      	ldr	r1, [pc, #400]	; (159f4 <processOnSMS+0xc40>)
   15862:	230c      	movs	r3, #12
   15864:	2008      	movs	r0, #8
   15866:	4684      	mov	ip, r0
   15868:	44bc      	add	ip, r7
   1586a:	4463      	add	r3, ip
   1586c:	0018      	movs	r0, r3
   1586e:	4b62      	ldr	r3, [pc, #392]	; (159f8 <processOnSMS+0xc44>)
   15870:	4798      	blx	r3
   15872:	f001 fb53 	bl	16f1c <processOnSMS+0x2168>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"UOMETHOD"))
   15876:	4a61      	ldr	r2, [pc, #388]	; (159fc <processOnSMS+0xc48>)
   15878:	68fb      	ldr	r3, [r7, #12]
   1587a:	0011      	movs	r1, r2
   1587c:	0018      	movs	r0, r3
   1587e:	4b4d      	ldr	r3, [pc, #308]	; (159b4 <processOnSMS+0xc00>)
   15880:	4798      	blx	r3
   15882:	1e03      	subs	r3, r0, #0
   15884:	d100      	bne.n	15888 <processOnSMS+0xad4>
   15886:	e0bf      	b.n	15a08 <processOnSMS+0xc54>
	{
		if (strlen(received_command)>8)
   15888:	68fb      	ldr	r3, [r7, #12]
   1588a:	0018      	movs	r0, r3
   1588c:	4b4e      	ldr	r3, [pc, #312]	; (159c8 <processOnSMS+0xc14>)
   1588e:	4798      	blx	r3
   15890:	0003      	movs	r3, r0
   15892:	2b08      	cmp	r3, #8
   15894:	d801      	bhi.n	1589a <processOnSMS+0xae6>
   15896:	f001 fb41 	bl	16f1c <processOnSMS+0x2168>
		{
			memmove(received_command,received_command+8,strlen(received_command));
   1589a:	68fb      	ldr	r3, [r7, #12]
   1589c:	3308      	adds	r3, #8
   1589e:	001c      	movs	r4, r3
   158a0:	68fb      	ldr	r3, [r7, #12]
   158a2:	0018      	movs	r0, r3
   158a4:	4b48      	ldr	r3, [pc, #288]	; (159c8 <processOnSMS+0xc14>)
   158a6:	4798      	blx	r3
   158a8:	0002      	movs	r2, r0
   158aa:	68fb      	ldr	r3, [r7, #12]
   158ac:	0021      	movs	r1, r4
   158ae:	0018      	movs	r0, r3
   158b0:	4b46      	ldr	r3, [pc, #280]	; (159cc <processOnSMS+0xc18>)
   158b2:	4798      	blx	r3
			
			if(factory_settings_parameter_struct.ENABLE_CURRENT)
   158b4:	4b4d      	ldr	r3, [pc, #308]	; (159ec <processOnSMS+0xc38>)
   158b6:	785b      	ldrb	r3, [r3, #1]
   158b8:	2b00      	cmp	r3, #0
   158ba:	d101      	bne.n	158c0 <processOnSMS+0xb0c>
   158bc:	f001 fb2e 	bl	16f1c <processOnSMS+0x2168>
			{
				uint8_t detectionMethod=0;
   158c0:	2392      	movs	r3, #146	; 0x92
   158c2:	005b      	lsls	r3, r3, #1
   158c4:	2208      	movs	r2, #8
   158c6:	4694      	mov	ip, r2
   158c8:	44bc      	add	ip, r7
   158ca:	4463      	add	r3, ip
   158cc:	2200      	movs	r2, #0
   158ce:	701a      	strb	r2, [r3, #0]
				if(received_command[0]=='C')
   158d0:	68fb      	ldr	r3, [r7, #12]
   158d2:	781b      	ldrb	r3, [r3, #0]
   158d4:	2b43      	cmp	r3, #67	; 0x43
   158d6:	d108      	bne.n	158ea <processOnSMS+0xb36>
				{
					detectionMethod=MOTOR_UNDEROVER_DETECTION_CURRENT;
   158d8:	2392      	movs	r3, #146	; 0x92
   158da:	005b      	lsls	r3, r3, #1
   158dc:	2208      	movs	r2, #8
   158de:	4694      	mov	ip, r2
   158e0:	44bc      	add	ip, r7
   158e2:	4463      	add	r3, ip
   158e4:	2202      	movs	r2, #2
   158e6:	701a      	strb	r2, [r3, #0]
   158e8:	e00b      	b.n	15902 <processOnSMS+0xb4e>
				}
				else if(received_command[0]=='P')
   158ea:	68fb      	ldr	r3, [r7, #12]
   158ec:	781b      	ldrb	r3, [r3, #0]
   158ee:	2b50      	cmp	r3, #80	; 0x50
   158f0:	d107      	bne.n	15902 <processOnSMS+0xb4e>
				{
					detectionMethod=MOTOR_UNDEROVER_DETECTION_POWER;
   158f2:	2392      	movs	r3, #146	; 0x92
   158f4:	005b      	lsls	r3, r3, #1
   158f6:	2208      	movs	r2, #8
   158f8:	4694      	mov	ip, r2
   158fa:	44bc      	add	ip, r7
   158fc:	4463      	add	r3, ip
   158fe:	2201      	movs	r2, #1
   15900:	701a      	strb	r2, [r3, #0]
				}
				
				if(detectionMethod!=0)
   15902:	2392      	movs	r3, #146	; 0x92
   15904:	005b      	lsls	r3, r3, #1
   15906:	2208      	movs	r2, #8
   15908:	4694      	mov	ip, r2
   1590a:	44bc      	add	ip, r7
   1590c:	4463      	add	r3, ip
   1590e:	781b      	ldrb	r3, [r3, #0]
   15910:	2b00      	cmp	r3, #0
   15912:	d101      	bne.n	15918 <processOnSMS+0xb64>
   15914:	f001 fb02 	bl	16f1c <processOnSMS+0x2168>
				{
					saveUnderOverDetectionMethodSettings(detectionMethod);
   15918:	2392      	movs	r3, #146	; 0x92
   1591a:	005b      	lsls	r3, r3, #1
   1591c:	2208      	movs	r2, #8
   1591e:	4694      	mov	ip, r2
   15920:	44bc      	add	ip, r7
   15922:	4463      	add	r3, ip
   15924:	781b      	ldrb	r3, [r3, #0]
   15926:	0018      	movs	r0, r3
   15928:	4b35      	ldr	r3, [pc, #212]	; (15a00 <processOnSMS+0xc4c>)
   1592a:	4798      	blx	r3
					incomingSMSProcessed=true;
   1592c:	2328      	movs	r3, #40	; 0x28
   1592e:	33ff      	adds	r3, #255	; 0xff
   15930:	2208      	movs	r2, #8
   15932:	4694      	mov	ip, r2
   15934:	44bc      	add	ip, r7
   15936:	4463      	add	r3, ip
   15938:	2201      	movs	r2, #1
   1593a:	701a      	strb	r2, [r3, #0]
					if (response_sms_processed_cmd == true)
   1593c:	4b1f      	ldr	r3, [pc, #124]	; (159bc <processOnSMS+0xc08>)
   1593e:	2294      	movs	r2, #148	; 0x94
   15940:	0052      	lsls	r2, r2, #1
   15942:	4694      	mov	ip, r2
   15944:	2208      	movs	r2, #8
   15946:	4690      	mov	r8, r2
   15948:	44b8      	add	r8, r7
   1594a:	44c4      	add	ip, r8
   1594c:	4463      	add	r3, ip
   1594e:	781b      	ldrb	r3, [r3, #0]
   15950:	2b00      	cmp	r3, #0
   15952:	d101      	bne.n	15958 <processOnSMS+0xba4>
   15954:	f001 fae2 	bl	16f1c <processOnSMS+0x2168>
					{
						strcpy(resep_msg,"UOMETHOD : ");
   15958:	230c      	movs	r3, #12
   1595a:	2208      	movs	r2, #8
   1595c:	4694      	mov	ip, r2
   1595e:	44bc      	add	ip, r7
   15960:	4463      	add	r3, ip
   15962:	4a28      	ldr	r2, [pc, #160]	; (15a04 <processOnSMS+0xc50>)
   15964:	ca13      	ldmia	r2!, {r0, r1, r4}
   15966:	c313      	stmia	r3!, {r0, r1, r4}
						strcat(resep_msg,received_command);
   15968:	68fa      	ldr	r2, [r7, #12]
   1596a:	230c      	movs	r3, #12
   1596c:	2108      	movs	r1, #8
   1596e:	468c      	mov	ip, r1
   15970:	44bc      	add	ip, r7
   15972:	4463      	add	r3, ip
   15974:	0011      	movs	r1, r2
   15976:	0018      	movs	r0, r3
   15978:	4b17      	ldr	r3, [pc, #92]	; (159d8 <processOnSMS+0xc24>)
   1597a:	4798      	blx	r3
						strcat(resep_msg," OK");
   1597c:	230c      	movs	r3, #12
   1597e:	2208      	movs	r2, #8
   15980:	4694      	mov	ip, r2
   15982:	44bc      	add	ip, r7
   15984:	4463      	add	r3, ip
   15986:	0018      	movs	r0, r3
   15988:	4b0f      	ldr	r3, [pc, #60]	; (159c8 <processOnSMS+0xc14>)
   1598a:	4798      	blx	r3
   1598c:	0003      	movs	r3, r0
   1598e:	001a      	movs	r2, r3
   15990:	230c      	movs	r3, #12
   15992:	2108      	movs	r1, #8
   15994:	468c      	mov	ip, r1
   15996:	44bc      	add	ip, r7
   15998:	4463      	add	r3, ip
   1599a:	189a      	adds	r2, r3, r2
   1599c:	4b0f      	ldr	r3, [pc, #60]	; (159dc <processOnSMS+0xc28>)
   1599e:	0010      	movs	r0, r2
   159a0:	0019      	movs	r1, r3
   159a2:	2304      	movs	r3, #4
   159a4:	001a      	movs	r2, r3
   159a6:	4b0e      	ldr	r3, [pc, #56]	; (159e0 <processOnSMS+0xc2c>)
   159a8:	4798      	blx	r3
   159aa:	f001 fab7 	bl	16f1c <processOnSMS+0x2168>
   159ae:	46c0      	nop			; (mov r8, r8)
   159b0:	0002a2f8 	.word	0x0002a2f8
   159b4:	00014015 	.word	0x00014015
   159b8:	0001166d 	.word	0x0001166d
   159bc:	fffffeda 	.word	0xfffffeda
   159c0:	0002a300 	.word	0x0002a300
   159c4:	0002a30c 	.word	0x0002a30c
   159c8:	000291a3 	.word	0x000291a3
   159cc:	00028eef 	.word	0x00028eef
   159d0:	0001133d 	.word	0x0001133d
   159d4:	0002a310 	.word	0x0002a310
   159d8:	0002915d 	.word	0x0002915d
   159dc:	0002a318 	.word	0x0002a318
   159e0:	00028edd 	.word	0x00028edd
   159e4:	0002a31c 	.word	0x0002a31c
   159e8:	00028df9 	.word	0x00028df9
   159ec:	2000062c 	.word	0x2000062c
   159f0:	00011795 	.word	0x00011795
   159f4:	0002a324 	.word	0x0002a324
   159f8:	00029119 	.word	0x00029119
   159fc:	0002a330 	.word	0x0002a330
   15a00:	000116b9 	.word	0x000116b9
   15a04:	0002a33c 	.word	0x0002a33c
					}
				}
			}
		}
	}
	else if(StringstartsWith(received_command,"MVBYPON"))
   15a08:	4acf      	ldr	r2, [pc, #828]	; (15d48 <processOnSMS+0xf94>)
   15a0a:	68fb      	ldr	r3, [r7, #12]
   15a0c:	0011      	movs	r1, r2
   15a0e:	0018      	movs	r0, r3
   15a10:	4bce      	ldr	r3, [pc, #824]	; (15d4c <processOnSMS+0xf98>)
   15a12:	4798      	blx	r3
   15a14:	1e03      	subs	r3, r0, #0
   15a16:	d024      	beq.n	15a62 <processOnSMS+0xcae>
	{
		saveMotorVoltageBypassSettings(true);
   15a18:	2001      	movs	r0, #1
   15a1a:	4bcd      	ldr	r3, [pc, #820]	; (15d50 <processOnSMS+0xf9c>)
   15a1c:	4798      	blx	r3
		incomingSMSProcessed=true;
   15a1e:	2328      	movs	r3, #40	; 0x28
   15a20:	33ff      	adds	r3, #255	; 0xff
   15a22:	2208      	movs	r2, #8
   15a24:	4694      	mov	ip, r2
   15a26:	44bc      	add	ip, r7
   15a28:	4463      	add	r3, ip
   15a2a:	2201      	movs	r2, #1
   15a2c:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   15a2e:	4bc9      	ldr	r3, [pc, #804]	; (15d54 <processOnSMS+0xfa0>)
   15a30:	2294      	movs	r2, #148	; 0x94
   15a32:	0052      	lsls	r2, r2, #1
   15a34:	4694      	mov	ip, r2
   15a36:	2208      	movs	r2, #8
   15a38:	4690      	mov	r8, r2
   15a3a:	44b8      	add	r8, r7
   15a3c:	44c4      	add	ip, r8
   15a3e:	4463      	add	r3, ip
   15a40:	781b      	ldrb	r3, [r3, #0]
   15a42:	2b00      	cmp	r3, #0
   15a44:	d101      	bne.n	15a4a <processOnSMS+0xc96>
   15a46:	f001 fa69 	bl	16f1c <processOnSMS+0x2168>
		{
			strcpy(resep_msg,"MOTOR VOLTAGE BYPASS ON");
   15a4a:	230c      	movs	r3, #12
   15a4c:	2208      	movs	r2, #8
   15a4e:	4694      	mov	ip, r2
   15a50:	44bc      	add	ip, r7
   15a52:	4463      	add	r3, ip
   15a54:	4ac0      	ldr	r2, [pc, #768]	; (15d58 <processOnSMS+0xfa4>)
   15a56:	ca13      	ldmia	r2!, {r0, r1, r4}
   15a58:	c313      	stmia	r3!, {r0, r1, r4}
   15a5a:	ca13      	ldmia	r2!, {r0, r1, r4}
   15a5c:	c313      	stmia	r3!, {r0, r1, r4}
   15a5e:	f001 fa5d 	bl	16f1c <processOnSMS+0x2168>
		}
	}
	else if(StringstartsWith(received_command,"MVBYPOFF"))
   15a62:	4abe      	ldr	r2, [pc, #760]	; (15d5c <processOnSMS+0xfa8>)
   15a64:	68fb      	ldr	r3, [r7, #12]
   15a66:	0011      	movs	r1, r2
   15a68:	0018      	movs	r0, r3
   15a6a:	4bb8      	ldr	r3, [pc, #736]	; (15d4c <processOnSMS+0xf98>)
   15a6c:	4798      	blx	r3
   15a6e:	1e03      	subs	r3, r0, #0
   15a70:	d026      	beq.n	15ac0 <processOnSMS+0xd0c>
	{
		saveMotorVoltageBypassSettings(false);
   15a72:	2000      	movs	r0, #0
   15a74:	4bb6      	ldr	r3, [pc, #728]	; (15d50 <processOnSMS+0xf9c>)
   15a76:	4798      	blx	r3
		incomingSMSProcessed=true;
   15a78:	2328      	movs	r3, #40	; 0x28
   15a7a:	33ff      	adds	r3, #255	; 0xff
   15a7c:	2208      	movs	r2, #8
   15a7e:	4694      	mov	ip, r2
   15a80:	44bc      	add	ip, r7
   15a82:	4463      	add	r3, ip
   15a84:	2201      	movs	r2, #1
   15a86:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   15a88:	4bb2      	ldr	r3, [pc, #712]	; (15d54 <processOnSMS+0xfa0>)
   15a8a:	2294      	movs	r2, #148	; 0x94
   15a8c:	0052      	lsls	r2, r2, #1
   15a8e:	4694      	mov	ip, r2
   15a90:	2208      	movs	r2, #8
   15a92:	4690      	mov	r8, r2
   15a94:	44b8      	add	r8, r7
   15a96:	44c4      	add	ip, r8
   15a98:	4463      	add	r3, ip
   15a9a:	781b      	ldrb	r3, [r3, #0]
   15a9c:	2b00      	cmp	r3, #0
   15a9e:	d101      	bne.n	15aa4 <processOnSMS+0xcf0>
   15aa0:	f001 fa3c 	bl	16f1c <processOnSMS+0x2168>
		{
			strcpy(resep_msg,"MOTOR VOLTAGE BYPASS OFF");
   15aa4:	230c      	movs	r3, #12
   15aa6:	2208      	movs	r2, #8
   15aa8:	4694      	mov	ip, r2
   15aaa:	44bc      	add	ip, r7
   15aac:	4463      	add	r3, ip
   15aae:	4aac      	ldr	r2, [pc, #688]	; (15d60 <processOnSMS+0xfac>)
   15ab0:	ca13      	ldmia	r2!, {r0, r1, r4}
   15ab2:	c313      	stmia	r3!, {r0, r1, r4}
   15ab4:	ca13      	ldmia	r2!, {r0, r1, r4}
   15ab6:	c313      	stmia	r3!, {r0, r1, r4}
   15ab8:	7812      	ldrb	r2, [r2, #0]
   15aba:	701a      	strb	r2, [r3, #0]
   15abc:	f001 fa2e 	bl	16f1c <processOnSMS+0x2168>
		}
	}
	else if(StringstartsWith(received_command,"MVBYPT"))
   15ac0:	4aa8      	ldr	r2, [pc, #672]	; (15d64 <processOnSMS+0xfb0>)
   15ac2:	68fb      	ldr	r3, [r7, #12]
   15ac4:	0011      	movs	r1, r2
   15ac6:	0018      	movs	r0, r3
   15ac8:	4ba0      	ldr	r3, [pc, #640]	; (15d4c <processOnSMS+0xf98>)
   15aca:	4798      	blx	r3
   15acc:	1e03      	subs	r3, r0, #0
   15ace:	d06b      	beq.n	15ba8 <processOnSMS+0xdf4>
	{
		memmove(received_command,received_command+6,strlen(received_command));
   15ad0:	68fb      	ldr	r3, [r7, #12]
   15ad2:	1d9c      	adds	r4, r3, #6
   15ad4:	68fb      	ldr	r3, [r7, #12]
   15ad6:	0018      	movs	r0, r3
   15ad8:	4ba3      	ldr	r3, [pc, #652]	; (15d68 <processOnSMS+0xfb4>)
   15ada:	4798      	blx	r3
   15adc:	0002      	movs	r2, r0
   15ade:	68fb      	ldr	r3, [r7, #12]
   15ae0:	0021      	movs	r1, r4
   15ae2:	0018      	movs	r0, r3
   15ae4:	4ba1      	ldr	r3, [pc, #644]	; (15d6c <processOnSMS+0xfb8>)
   15ae6:	4798      	blx	r3
		uint8_t voltageBypTime = atoi(received_command);
   15ae8:	68fb      	ldr	r3, [r7, #12]
   15aea:	0018      	movs	r0, r3
   15aec:	4ba0      	ldr	r3, [pc, #640]	; (15d70 <processOnSMS+0xfbc>)
   15aee:	4798      	blx	r3
   15af0:	0002      	movs	r2, r0
   15af2:	2324      	movs	r3, #36	; 0x24
   15af4:	33ff      	adds	r3, #255	; 0xff
   15af6:	2108      	movs	r1, #8
   15af8:	468c      	mov	ip, r1
   15afa:	44bc      	add	ip, r7
   15afc:	4463      	add	r3, ip
   15afe:	701a      	strb	r2, [r3, #0]
		if (voltageBypTime<10) voltageBypTime = 10;
   15b00:	2324      	movs	r3, #36	; 0x24
   15b02:	33ff      	adds	r3, #255	; 0xff
   15b04:	2208      	movs	r2, #8
   15b06:	4694      	mov	ip, r2
   15b08:	44bc      	add	ip, r7
   15b0a:	4463      	add	r3, ip
   15b0c:	781b      	ldrb	r3, [r3, #0]
   15b0e:	2b09      	cmp	r3, #9
   15b10:	d807      	bhi.n	15b22 <processOnSMS+0xd6e>
   15b12:	2324      	movs	r3, #36	; 0x24
   15b14:	33ff      	adds	r3, #255	; 0xff
   15b16:	2208      	movs	r2, #8
   15b18:	4694      	mov	ip, r2
   15b1a:	44bc      	add	ip, r7
   15b1c:	4463      	add	r3, ip
   15b1e:	220a      	movs	r2, #10
   15b20:	701a      	strb	r2, [r3, #0]
		if (voltageBypTime>3600L) voltageBypTime=3600L;
		
		voltageBypTime=voltageBypTime*1000L;
   15b22:	2324      	movs	r3, #36	; 0x24
   15b24:	33ff      	adds	r3, #255	; 0xff
   15b26:	2208      	movs	r2, #8
   15b28:	4694      	mov	ip, r2
   15b2a:	44bc      	add	ip, r7
   15b2c:	4463      	add	r3, ip
   15b2e:	2224      	movs	r2, #36	; 0x24
   15b30:	32ff      	adds	r2, #255	; 0xff
   15b32:	2108      	movs	r1, #8
   15b34:	468c      	mov	ip, r1
   15b36:	44bc      	add	ip, r7
   15b38:	4462      	add	r2, ip
   15b3a:	7812      	ldrb	r2, [r2, #0]
   15b3c:	2118      	movs	r1, #24
   15b3e:	4249      	negs	r1, r1
   15b40:	434a      	muls	r2, r1
   15b42:	701a      	strb	r2, [r3, #0]
		
		saveMotorVoltageBypasssTimeSettings(voltageBypTime);
   15b44:	2324      	movs	r3, #36	; 0x24
   15b46:	33ff      	adds	r3, #255	; 0xff
   15b48:	2208      	movs	r2, #8
   15b4a:	4694      	mov	ip, r2
   15b4c:	44bc      	add	ip, r7
   15b4e:	4463      	add	r3, ip
   15b50:	781b      	ldrb	r3, [r3, #0]
   15b52:	0018      	movs	r0, r3
   15b54:	4b87      	ldr	r3, [pc, #540]	; (15d74 <processOnSMS+0xfc0>)
   15b56:	4798      	blx	r3
		incomingSMSProcessed=true;
   15b58:	2328      	movs	r3, #40	; 0x28
   15b5a:	33ff      	adds	r3, #255	; 0xff
   15b5c:	2208      	movs	r2, #8
   15b5e:	4694      	mov	ip, r2
   15b60:	44bc      	add	ip, r7
   15b62:	4463      	add	r3, ip
   15b64:	2201      	movs	r2, #1
   15b66:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   15b68:	4b7a      	ldr	r3, [pc, #488]	; (15d54 <processOnSMS+0xfa0>)
   15b6a:	2294      	movs	r2, #148	; 0x94
   15b6c:	0052      	lsls	r2, r2, #1
   15b6e:	4694      	mov	ip, r2
   15b70:	2208      	movs	r2, #8
   15b72:	4690      	mov	r8, r2
   15b74:	44b8      	add	r8, r7
   15b76:	44c4      	add	ip, r8
   15b78:	4463      	add	r3, ip
   15b7a:	781b      	ldrb	r3, [r3, #0]
   15b7c:	2b00      	cmp	r3, #0
   15b7e:	d101      	bne.n	15b84 <processOnSMS+0xdd0>
   15b80:	f001 f9cc 	bl	16f1c <processOnSMS+0x2168>
		{
			sprintf(resep_msg,"Motor Voltage Bypass Time Set to %d",voltageBypTime);
   15b84:	2324      	movs	r3, #36	; 0x24
   15b86:	33ff      	adds	r3, #255	; 0xff
   15b88:	2208      	movs	r2, #8
   15b8a:	4694      	mov	ip, r2
   15b8c:	44bc      	add	ip, r7
   15b8e:	4463      	add	r3, ip
   15b90:	781a      	ldrb	r2, [r3, #0]
   15b92:	4979      	ldr	r1, [pc, #484]	; (15d78 <processOnSMS+0xfc4>)
   15b94:	230c      	movs	r3, #12
   15b96:	2008      	movs	r0, #8
   15b98:	4684      	mov	ip, r0
   15b9a:	44bc      	add	ip, r7
   15b9c:	4463      	add	r3, ip
   15b9e:	0018      	movs	r0, r3
   15ba0:	4b76      	ldr	r3, [pc, #472]	; (15d7c <processOnSMS+0xfc8>)
   15ba2:	4798      	blx	r3
   15ba4:	f001 f9ba 	bl	16f1c <processOnSMS+0x2168>
		}
	}
	else if (StringstartsWith(received_command,"RESP"))
   15ba8:	4a75      	ldr	r2, [pc, #468]	; (15d80 <processOnSMS+0xfcc>)
   15baa:	68fb      	ldr	r3, [r7, #12]
   15bac:	0011      	movs	r1, r2
   15bae:	0018      	movs	r0, r3
   15bb0:	4b66      	ldr	r3, [pc, #408]	; (15d4c <processOnSMS+0xf98>)
   15bb2:	4798      	blx	r3
   15bb4:	1e03      	subs	r3, r0, #0
   15bb6:	d06c      	beq.n	15c92 <processOnSMS+0xede>
	{
		if (strlen(received_command)>4)
   15bb8:	68fb      	ldr	r3, [r7, #12]
   15bba:	0018      	movs	r0, r3
   15bbc:	4b6a      	ldr	r3, [pc, #424]	; (15d68 <processOnSMS+0xfb4>)
   15bbe:	4798      	blx	r3
   15bc0:	0003      	movs	r3, r0
   15bc2:	2b04      	cmp	r3, #4
   15bc4:	d801      	bhi.n	15bca <processOnSMS+0xe16>
   15bc6:	f001 f9a9 	bl	16f1c <processOnSMS+0x2168>
		{
			memmove(received_command,received_command+4,strlen(received_command));
   15bca:	68fb      	ldr	r3, [r7, #12]
   15bcc:	1d1c      	adds	r4, r3, #4
   15bce:	68fb      	ldr	r3, [r7, #12]
   15bd0:	0018      	movs	r0, r3
   15bd2:	4b65      	ldr	r3, [pc, #404]	; (15d68 <processOnSMS+0xfb4>)
   15bd4:	4798      	blx	r3
   15bd6:	0002      	movs	r2, r0
   15bd8:	68fb      	ldr	r3, [r7, #12]
   15bda:	0021      	movs	r1, r4
   15bdc:	0018      	movs	r0, r3
   15bde:	4b63      	ldr	r3, [pc, #396]	; (15d6c <processOnSMS+0xfb8>)
   15be0:	4798      	blx	r3
			if(received_command[0]=='C' || received_command[0]=='A' || received_command[0]=='T' || received_command[0]=='N')
   15be2:	68fb      	ldr	r3, [r7, #12]
   15be4:	781b      	ldrb	r3, [r3, #0]
   15be6:	2b43      	cmp	r3, #67	; 0x43
   15be8:	d00d      	beq.n	15c06 <processOnSMS+0xe52>
   15bea:	68fb      	ldr	r3, [r7, #12]
   15bec:	781b      	ldrb	r3, [r3, #0]
   15bee:	2b41      	cmp	r3, #65	; 0x41
   15bf0:	d009      	beq.n	15c06 <processOnSMS+0xe52>
   15bf2:	68fb      	ldr	r3, [r7, #12]
   15bf4:	781b      	ldrb	r3, [r3, #0]
   15bf6:	2b54      	cmp	r3, #84	; 0x54
   15bf8:	d005      	beq.n	15c06 <processOnSMS+0xe52>
   15bfa:	68fb      	ldr	r3, [r7, #12]
   15bfc:	781b      	ldrb	r3, [r3, #0]
   15bfe:	2b4e      	cmp	r3, #78	; 0x4e
   15c00:	d001      	beq.n	15c06 <processOnSMS+0xe52>
   15c02:	f001 f98b 	bl	16f1c <processOnSMS+0x2168>
			{
				saveResponseSettings((char)received_command);  //save specific RESPONSE settings
   15c06:	68fb      	ldr	r3, [r7, #12]
   15c08:	b2db      	uxtb	r3, r3
   15c0a:	0018      	movs	r0, r3
   15c0c:	4b5d      	ldr	r3, [pc, #372]	; (15d84 <processOnSMS+0xfd0>)
   15c0e:	4798      	blx	r3
				
				incomingSMSProcessed=true;
   15c10:	2328      	movs	r3, #40	; 0x28
   15c12:	33ff      	adds	r3, #255	; 0xff
   15c14:	2208      	movs	r2, #8
   15c16:	4694      	mov	ip, r2
   15c18:	44bc      	add	ip, r7
   15c1a:	4463      	add	r3, ip
   15c1c:	2201      	movs	r2, #1
   15c1e:	701a      	strb	r2, [r3, #0]
				
				if (response_sms_processed_cmd == true)
   15c20:	4b4c      	ldr	r3, [pc, #304]	; (15d54 <processOnSMS+0xfa0>)
   15c22:	2294      	movs	r2, #148	; 0x94
   15c24:	0052      	lsls	r2, r2, #1
   15c26:	4694      	mov	ip, r2
   15c28:	2208      	movs	r2, #8
   15c2a:	4690      	mov	r8, r2
   15c2c:	44b8      	add	r8, r7
   15c2e:	44c4      	add	ip, r8
   15c30:	4463      	add	r3, ip
   15c32:	781b      	ldrb	r3, [r3, #0]
   15c34:	2b00      	cmp	r3, #0
   15c36:	d101      	bne.n	15c3c <processOnSMS+0xe88>
   15c38:	f001 f970 	bl	16f1c <processOnSMS+0x2168>
				{
					strcpy(resep_msg,"RESP : ");
   15c3c:	230c      	movs	r3, #12
   15c3e:	2208      	movs	r2, #8
   15c40:	4694      	mov	ip, r2
   15c42:	44bc      	add	ip, r7
   15c44:	4463      	add	r3, ip
   15c46:	4a50      	ldr	r2, [pc, #320]	; (15d88 <processOnSMS+0xfd4>)
   15c48:	ca03      	ldmia	r2!, {r0, r1}
   15c4a:	c303      	stmia	r3!, {r0, r1}
					strcat(resep_msg,received_command);
   15c4c:	68fa      	ldr	r2, [r7, #12]
   15c4e:	230c      	movs	r3, #12
   15c50:	2108      	movs	r1, #8
   15c52:	468c      	mov	ip, r1
   15c54:	44bc      	add	ip, r7
   15c56:	4463      	add	r3, ip
   15c58:	0011      	movs	r1, r2
   15c5a:	0018      	movs	r0, r3
   15c5c:	4b4b      	ldr	r3, [pc, #300]	; (15d8c <processOnSMS+0xfd8>)
   15c5e:	4798      	blx	r3
					strcat(resep_msg," OK");
   15c60:	230c      	movs	r3, #12
   15c62:	2208      	movs	r2, #8
   15c64:	4694      	mov	ip, r2
   15c66:	44bc      	add	ip, r7
   15c68:	4463      	add	r3, ip
   15c6a:	0018      	movs	r0, r3
   15c6c:	4b3e      	ldr	r3, [pc, #248]	; (15d68 <processOnSMS+0xfb4>)
   15c6e:	4798      	blx	r3
   15c70:	0003      	movs	r3, r0
   15c72:	001a      	movs	r2, r3
   15c74:	230c      	movs	r3, #12
   15c76:	2108      	movs	r1, #8
   15c78:	468c      	mov	ip, r1
   15c7a:	44bc      	add	ip, r7
   15c7c:	4463      	add	r3, ip
   15c7e:	189a      	adds	r2, r3, r2
   15c80:	4b43      	ldr	r3, [pc, #268]	; (15d90 <processOnSMS+0xfdc>)
   15c82:	0010      	movs	r0, r2
   15c84:	0019      	movs	r1, r3
   15c86:	2304      	movs	r3, #4
   15c88:	001a      	movs	r2, r3
   15c8a:	4b42      	ldr	r3, [pc, #264]	; (15d94 <processOnSMS+0xfe0>)
   15c8c:	4798      	blx	r3
   15c8e:	f001 f945 	bl	16f1c <processOnSMS+0x2168>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"OVR"))
   15c92:	4a41      	ldr	r2, [pc, #260]	; (15d98 <processOnSMS+0xfe4>)
   15c94:	68fb      	ldr	r3, [r7, #12]
   15c96:	0011      	movs	r1, r2
   15c98:	0018      	movs	r0, r3
   15c9a:	4b2c      	ldr	r3, [pc, #176]	; (15d4c <processOnSMS+0xf98>)
   15c9c:	4798      	blx	r3
   15c9e:	1e03      	subs	r3, r0, #0
   15ca0:	d100      	bne.n	15ca4 <processOnSMS+0xef0>
   15ca2:	e07f      	b.n	15da4 <processOnSMS+0xff0>
	{
		memmove(received_command,received_command+3,strlen(received_command));
   15ca4:	68fb      	ldr	r3, [r7, #12]
   15ca6:	1cdc      	adds	r4, r3, #3
   15ca8:	68fb      	ldr	r3, [r7, #12]
   15caa:	0018      	movs	r0, r3
   15cac:	4b2e      	ldr	r3, [pc, #184]	; (15d68 <processOnSMS+0xfb4>)
   15cae:	4798      	blx	r3
   15cb0:	0002      	movs	r2, r0
   15cb2:	68fb      	ldr	r3, [r7, #12]
   15cb4:	0021      	movs	r1, r4
   15cb6:	0018      	movs	r0, r3
   15cb8:	4b2c      	ldr	r3, [pc, #176]	; (15d6c <processOnSMS+0xfb8>)
   15cba:	4798      	blx	r3
		uint8_t ovr_per = atoi(received_command);
   15cbc:	68fb      	ldr	r3, [r7, #12]
   15cbe:	0018      	movs	r0, r3
   15cc0:	4b2b      	ldr	r3, [pc, #172]	; (15d70 <processOnSMS+0xfbc>)
   15cc2:	4798      	blx	r3
   15cc4:	0002      	movs	r2, r0
   15cc6:	238b      	movs	r3, #139	; 0x8b
   15cc8:	005b      	lsls	r3, r3, #1
   15cca:	2108      	movs	r1, #8
   15ccc:	468c      	mov	ip, r1
   15cce:	44bc      	add	ip, r7
   15cd0:	4463      	add	r3, ip
   15cd2:	701a      	strb	r2, [r3, #0]
		if(ovr_per>104)
   15cd4:	238b      	movs	r3, #139	; 0x8b
   15cd6:	005b      	lsls	r3, r3, #1
   15cd8:	2208      	movs	r2, #8
   15cda:	4694      	mov	ip, r2
   15cdc:	44bc      	add	ip, r7
   15cde:	4463      	add	r3, ip
   15ce0:	781b      	ldrb	r3, [r3, #0]
   15ce2:	2b68      	cmp	r3, #104	; 0x68
   15ce4:	d801      	bhi.n	15cea <processOnSMS+0xf36>
   15ce6:	f001 f919 	bl	16f1c <processOnSMS+0x2168>
		{
			setOverloadPer(ovr_per);
   15cea:	238b      	movs	r3, #139	; 0x8b
   15cec:	005b      	lsls	r3, r3, #1
   15cee:	2208      	movs	r2, #8
   15cf0:	4694      	mov	ip, r2
   15cf2:	44bc      	add	ip, r7
   15cf4:	4463      	add	r3, ip
   15cf6:	781b      	ldrb	r3, [r3, #0]
   15cf8:	0018      	movs	r0, r3
   15cfa:	4b28      	ldr	r3, [pc, #160]	; (15d9c <processOnSMS+0xfe8>)
   15cfc:	4798      	blx	r3
			incomingSMSProcessed=true;
   15cfe:	2328      	movs	r3, #40	; 0x28
   15d00:	33ff      	adds	r3, #255	; 0xff
   15d02:	2208      	movs	r2, #8
   15d04:	4694      	mov	ip, r2
   15d06:	44bc      	add	ip, r7
   15d08:	4463      	add	r3, ip
   15d0a:	2201      	movs	r2, #1
   15d0c:	701a      	strb	r2, [r3, #0]
			
			if (response_sms_processed_cmd == true)
   15d0e:	4b11      	ldr	r3, [pc, #68]	; (15d54 <processOnSMS+0xfa0>)
   15d10:	2294      	movs	r2, #148	; 0x94
   15d12:	0052      	lsls	r2, r2, #1
   15d14:	4694      	mov	ip, r2
   15d16:	2208      	movs	r2, #8
   15d18:	4690      	mov	r8, r2
   15d1a:	44b8      	add	r8, r7
   15d1c:	44c4      	add	ip, r8
   15d1e:	4463      	add	r3, ip
   15d20:	781b      	ldrb	r3, [r3, #0]
   15d22:	2b00      	cmp	r3, #0
   15d24:	d101      	bne.n	15d2a <processOnSMS+0xf76>
   15d26:	f001 f8f9 	bl	16f1c <processOnSMS+0x2168>
			{
				strcpy(resep_msg,"OVR SET OK");
   15d2a:	230c      	movs	r3, #12
   15d2c:	2208      	movs	r2, #8
   15d2e:	4694      	mov	ip, r2
   15d30:	44bc      	add	ip, r7
   15d32:	4463      	add	r3, ip
   15d34:	4a1a      	ldr	r2, [pc, #104]	; (15da0 <processOnSMS+0xfec>)
   15d36:	ca03      	ldmia	r2!, {r0, r1}
   15d38:	c303      	stmia	r3!, {r0, r1}
   15d3a:	8811      	ldrh	r1, [r2, #0]
   15d3c:	8019      	strh	r1, [r3, #0]
   15d3e:	7892      	ldrb	r2, [r2, #2]
   15d40:	709a      	strb	r2, [r3, #2]
   15d42:	f001 f8eb 	bl	16f1c <processOnSMS+0x2168>
   15d46:	46c0      	nop			; (mov r8, r8)
   15d48:	0002a348 	.word	0x0002a348
   15d4c:	00014015 	.word	0x00014015
   15d50:	00011705 	.word	0x00011705
   15d54:	fffffeda 	.word	0xfffffeda
   15d58:	0002a350 	.word	0x0002a350
   15d5c:	0002a368 	.word	0x0002a368
   15d60:	0002a374 	.word	0x0002a374
   15d64:	0002a390 	.word	0x0002a390
   15d68:	000291a3 	.word	0x000291a3
   15d6c:	00028eef 	.word	0x00028eef
   15d70:	00028df9 	.word	0x00028df9
   15d74:	00011751 	.word	0x00011751
   15d78:	0002a398 	.word	0x0002a398
   15d7c:	00029119 	.word	0x00029119
   15d80:	0002a3bc 	.word	0x0002a3bc
   15d84:	00011389 	.word	0x00011389
   15d88:	0002a3c4 	.word	0x0002a3c4
   15d8c:	0002915d 	.word	0x0002915d
   15d90:	0002a318 	.word	0x0002a318
   15d94:	00028edd 	.word	0x00028edd
   15d98:	0002a3cc 	.word	0x0002a3cc
   15d9c:	000114fd 	.word	0x000114fd
   15da0:	0002a3d0 	.word	0x0002a3d0
			}
		}
	}
	else if (StringstartsWith(received_command,"UNDR"))
   15da4:	4aee      	ldr	r2, [pc, #952]	; (16160 <processOnSMS+0x13ac>)
   15da6:	68fb      	ldr	r3, [r7, #12]
   15da8:	0011      	movs	r1, r2
   15daa:	0018      	movs	r0, r3
   15dac:	4bed      	ldr	r3, [pc, #948]	; (16164 <processOnSMS+0x13b0>)
   15dae:	4798      	blx	r3
   15db0:	1e03      	subs	r3, r0, #0
   15db2:	d057      	beq.n	15e64 <processOnSMS+0x10b0>
	{
		memmove(received_command,received_command+4,strlen(received_command));
   15db4:	68fb      	ldr	r3, [r7, #12]
   15db6:	1d1c      	adds	r4, r3, #4
   15db8:	68fb      	ldr	r3, [r7, #12]
   15dba:	0018      	movs	r0, r3
   15dbc:	4bea      	ldr	r3, [pc, #936]	; (16168 <processOnSMS+0x13b4>)
   15dbe:	4798      	blx	r3
   15dc0:	0002      	movs	r2, r0
   15dc2:	68fb      	ldr	r3, [r7, #12]
   15dc4:	0021      	movs	r1, r4
   15dc6:	0018      	movs	r0, r3
   15dc8:	4be8      	ldr	r3, [pc, #928]	; (1616c <processOnSMS+0x13b8>)
   15dca:	4798      	blx	r3
		uint8_t undr_per = atoi(received_command);
   15dcc:	68fb      	ldr	r3, [r7, #12]
   15dce:	0018      	movs	r0, r3
   15dd0:	4be7      	ldr	r3, [pc, #924]	; (16170 <processOnSMS+0x13bc>)
   15dd2:	4798      	blx	r3
   15dd4:	0002      	movs	r2, r0
   15dd6:	2316      	movs	r3, #22
   15dd8:	33ff      	adds	r3, #255	; 0xff
   15dda:	2108      	movs	r1, #8
   15ddc:	468c      	mov	ip, r1
   15dde:	44bc      	add	ip, r7
   15de0:	4463      	add	r3, ip
   15de2:	701a      	strb	r2, [r3, #0]
		if(undr_per<98 && undr_per>0)
   15de4:	2316      	movs	r3, #22
   15de6:	33ff      	adds	r3, #255	; 0xff
   15de8:	2208      	movs	r2, #8
   15dea:	4694      	mov	ip, r2
   15dec:	44bc      	add	ip, r7
   15dee:	4463      	add	r3, ip
   15df0:	781b      	ldrb	r3, [r3, #0]
   15df2:	2b61      	cmp	r3, #97	; 0x61
   15df4:	d901      	bls.n	15dfa <processOnSMS+0x1046>
   15df6:	f001 f891 	bl	16f1c <processOnSMS+0x2168>
   15dfa:	2316      	movs	r3, #22
   15dfc:	33ff      	adds	r3, #255	; 0xff
   15dfe:	2208      	movs	r2, #8
   15e00:	4694      	mov	ip, r2
   15e02:	44bc      	add	ip, r7
   15e04:	4463      	add	r3, ip
   15e06:	781b      	ldrb	r3, [r3, #0]
   15e08:	2b00      	cmp	r3, #0
   15e0a:	d101      	bne.n	15e10 <processOnSMS+0x105c>
   15e0c:	f001 f886 	bl	16f1c <processOnSMS+0x2168>
		{

			setUnderloadPer(undr_per);
   15e10:	2316      	movs	r3, #22
   15e12:	33ff      	adds	r3, #255	; 0xff
   15e14:	2208      	movs	r2, #8
   15e16:	4694      	mov	ip, r2
   15e18:	44bc      	add	ip, r7
   15e1a:	4463      	add	r3, ip
   15e1c:	781b      	ldrb	r3, [r3, #0]
   15e1e:	0018      	movs	r0, r3
   15e20:	4bd4      	ldr	r3, [pc, #848]	; (16174 <processOnSMS+0x13c0>)
   15e22:	4798      	blx	r3

			incomingSMSProcessed=true;
   15e24:	2328      	movs	r3, #40	; 0x28
   15e26:	33ff      	adds	r3, #255	; 0xff
   15e28:	2208      	movs	r2, #8
   15e2a:	4694      	mov	ip, r2
   15e2c:	44bc      	add	ip, r7
   15e2e:	4463      	add	r3, ip
   15e30:	2201      	movs	r2, #1
   15e32:	701a      	strb	r2, [r3, #0]

			if (response_sms_processed_cmd == true)
   15e34:	4bd0      	ldr	r3, [pc, #832]	; (16178 <processOnSMS+0x13c4>)
   15e36:	2294      	movs	r2, #148	; 0x94
   15e38:	0052      	lsls	r2, r2, #1
   15e3a:	4694      	mov	ip, r2
   15e3c:	2208      	movs	r2, #8
   15e3e:	4690      	mov	r8, r2
   15e40:	44b8      	add	r8, r7
   15e42:	44c4      	add	ip, r8
   15e44:	4463      	add	r3, ip
   15e46:	781b      	ldrb	r3, [r3, #0]
   15e48:	2b00      	cmp	r3, #0
   15e4a:	d101      	bne.n	15e50 <processOnSMS+0x109c>
   15e4c:	f001 f866 	bl	16f1c <processOnSMS+0x2168>
			{
				strcpy(resep_msg,"UNDR SET OK");
   15e50:	230c      	movs	r3, #12
   15e52:	2208      	movs	r2, #8
   15e54:	4694      	mov	ip, r2
   15e56:	44bc      	add	ip, r7
   15e58:	4463      	add	r3, ip
   15e5a:	4ac8      	ldr	r2, [pc, #800]	; (1617c <processOnSMS+0x13c8>)
   15e5c:	ca13      	ldmia	r2!, {r0, r1, r4}
   15e5e:	c313      	stmia	r3!, {r0, r1, r4}
   15e60:	f001 f85c 	bl	16f1c <processOnSMS+0x2168>
			}
		}
	}
	else if (StringstartsWith(received_command,"ASTAT"))
   15e64:	4ac6      	ldr	r2, [pc, #792]	; (16180 <processOnSMS+0x13cc>)
   15e66:	68fb      	ldr	r3, [r7, #12]
   15e68:	0011      	movs	r1, r2
   15e6a:	0018      	movs	r0, r3
   15e6c:	4bbd      	ldr	r3, [pc, #756]	; (16164 <processOnSMS+0x13b0>)
   15e6e:	4798      	blx	r3
   15e70:	1e03      	subs	r3, r0, #0
   15e72:	d040      	beq.n	15ef6 <processOnSMS+0x1142>
	{
		if(factory_settings_parameter_struct.ENABLE_CURRENT)
   15e74:	4bc3      	ldr	r3, [pc, #780]	; (16184 <processOnSMS+0x13d0>)
   15e76:	785b      	ldrb	r3, [r3, #1]
   15e78:	2b00      	cmp	r3, #0
   15e7a:	d101      	bne.n	15e80 <processOnSMS+0x10cc>
   15e7c:	f001 f84e 	bl	16f1c <processOnSMS+0x2168>
		{
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
			Analog_Parameter_Struct.Motor_Current_IntPart,
   15e80:	4bc1      	ldr	r3, [pc, #772]	; (16188 <processOnSMS+0x13d4>)
   15e82:	8a9b      	ldrh	r3, [r3, #20]
   15e84:	b29b      	uxth	r3, r3
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
   15e86:	607b      	str	r3, [r7, #4]
			Analog_Parameter_Struct.Motor_Current_DecPart,
   15e88:	4bbf      	ldr	r3, [pc, #764]	; (16188 <processOnSMS+0x13d4>)
   15e8a:	8adb      	ldrh	r3, [r3, #22]
   15e8c:	b29b      	uxth	r3, r3
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
   15e8e:	603b      	str	r3, [r7, #0]
   15e90:	4bbe      	ldr	r3, [pc, #760]	; (1618c <processOnSMS+0x13d8>)
   15e92:	691a      	ldr	r2, [r3, #16]
   15e94:	4bbd      	ldr	r3, [pc, #756]	; (1618c <processOnSMS+0x13d8>)
   15e96:	6959      	ldr	r1, [r3, #20]
   15e98:	4bbc      	ldr	r3, [pc, #752]	; (1618c <processOnSMS+0x13d8>)
   15e9a:	699b      	ldr	r3, [r3, #24]
   15e9c:	4698      	mov	r8, r3
			user_settings_parameter_struct.normalLoadAddress,
			user_settings_parameter_struct.overloadAddress,
			user_settings_parameter_struct.underloadAddress,
			user_settings_parameter_struct.overloadPerAddress,
   15e9e:	48bb      	ldr	r0, [pc, #748]	; (1618c <processOnSMS+0x13d8>)
   15ea0:	7f40      	ldrb	r0, [r0, #29]
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
   15ea2:	0005      	movs	r5, r0
			user_settings_parameter_struct.underloadPerAddress);
   15ea4:	48b9      	ldr	r0, [pc, #740]	; (1618c <processOnSMS+0x13d8>)
   15ea6:	7f00      	ldrb	r0, [r0, #28]
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
   15ea8:	0006      	movs	r6, r0
   15eaa:	4cb9      	ldr	r4, [pc, #740]	; (16190 <processOnSMS+0x13dc>)
   15eac:	200c      	movs	r0, #12
   15eae:	2308      	movs	r3, #8
   15eb0:	469c      	mov	ip, r3
   15eb2:	44bc      	add	ip, r7
   15eb4:	4460      	add	r0, ip
   15eb6:	9604      	str	r6, [sp, #16]
   15eb8:	9503      	str	r5, [sp, #12]
   15eba:	4643      	mov	r3, r8
   15ebc:	9302      	str	r3, [sp, #8]
   15ebe:	9101      	str	r1, [sp, #4]
   15ec0:	9200      	str	r2, [sp, #0]
   15ec2:	683b      	ldr	r3, [r7, #0]
   15ec4:	687a      	ldr	r2, [r7, #4]
   15ec6:	0021      	movs	r1, r4
   15ec8:	4cb2      	ldr	r4, [pc, #712]	; (16194 <processOnSMS+0x13e0>)
   15eca:	47a0      	blx	r4
			response_sms_processed_cmd = true;
   15ecc:	4baa      	ldr	r3, [pc, #680]	; (16178 <processOnSMS+0x13c4>)
   15ece:	2294      	movs	r2, #148	; 0x94
   15ed0:	0052      	lsls	r2, r2, #1
   15ed2:	4694      	mov	ip, r2
   15ed4:	2208      	movs	r2, #8
   15ed6:	4690      	mov	r8, r2
   15ed8:	44b8      	add	r8, r7
   15eda:	44c4      	add	ip, r8
   15edc:	4463      	add	r3, ip
   15ede:	2201      	movs	r2, #1
   15ee0:	701a      	strb	r2, [r3, #0]
			incomingSMSProcessed=true;
   15ee2:	2328      	movs	r3, #40	; 0x28
   15ee4:	33ff      	adds	r3, #255	; 0xff
   15ee6:	2208      	movs	r2, #8
   15ee8:	4694      	mov	ip, r2
   15eea:	44bc      	add	ip, r7
   15eec:	4463      	add	r3, ip
   15eee:	2201      	movs	r2, #1
   15ef0:	701a      	strb	r2, [r3, #0]
   15ef2:	f001 f813 	bl	16f1c <processOnSMS+0x2168>
		}

	}
	else if (StringstartsWith(received_command,"OVFON"))
   15ef6:	4aa8      	ldr	r2, [pc, #672]	; (16198 <processOnSMS+0x13e4>)
   15ef8:	68fb      	ldr	r3, [r7, #12]
   15efa:	0011      	movs	r1, r2
   15efc:	0018      	movs	r0, r3
   15efe:	4b99      	ldr	r3, [pc, #612]	; (16164 <processOnSMS+0x13b0>)
   15f00:	4798      	blx	r3
   15f02:	1e03      	subs	r3, r0, #0
   15f04:	d032      	beq.n	15f6c <processOnSMS+0x11b8>
	{
		if (factory_settings_parameter_struct.ENABLE_WATER && !(factory_settings_parameter_struct.ENABLE_M2M))
   15f06:	4b9f      	ldr	r3, [pc, #636]	; (16184 <processOnSMS+0x13d0>)
   15f08:	795b      	ldrb	r3, [r3, #5]
   15f0a:	2b00      	cmp	r3, #0
   15f0c:	d101      	bne.n	15f12 <processOnSMS+0x115e>
   15f0e:	f001 f805 	bl	16f1c <processOnSMS+0x2168>
   15f12:	4b9c      	ldr	r3, [pc, #624]	; (16184 <processOnSMS+0x13d0>)
   15f14:	78db      	ldrb	r3, [r3, #3]
   15f16:	2b00      	cmp	r3, #0
   15f18:	d001      	beq.n	15f1e <processOnSMS+0x116a>
   15f1a:	f000 ffff 	bl	16f1c <processOnSMS+0x2168>
		{
			savePreventOverFlowSettings(true);  //set DND to False in EEPROM
   15f1e:	2001      	movs	r0, #1
   15f20:	4b9e      	ldr	r3, [pc, #632]	; (1619c <processOnSMS+0x13e8>)
   15f22:	4798      	blx	r3
			
			incomingSMSProcessed=true;
   15f24:	2328      	movs	r3, #40	; 0x28
   15f26:	33ff      	adds	r3, #255	; 0xff
   15f28:	2208      	movs	r2, #8
   15f2a:	4694      	mov	ip, r2
   15f2c:	44bc      	add	ip, r7
   15f2e:	4463      	add	r3, ip
   15f30:	2201      	movs	r2, #1
   15f32:	701a      	strb	r2, [r3, #0]
			
			if(response_sms_processed_cmd == true)
   15f34:	4b90      	ldr	r3, [pc, #576]	; (16178 <processOnSMS+0x13c4>)
   15f36:	2294      	movs	r2, #148	; 0x94
   15f38:	0052      	lsls	r2, r2, #1
   15f3a:	4694      	mov	ip, r2
   15f3c:	2208      	movs	r2, #8
   15f3e:	4690      	mov	r8, r2
   15f40:	44b8      	add	r8, r7
   15f42:	44c4      	add	ip, r8
   15f44:	4463      	add	r3, ip
   15f46:	781b      	ldrb	r3, [r3, #0]
   15f48:	2b00      	cmp	r3, #0
   15f4a:	d101      	bne.n	15f50 <processOnSMS+0x119c>
   15f4c:	f000 ffe6 	bl	16f1c <processOnSMS+0x2168>
			{
				strcpy(resep_msg,"PREVENT OVERFLOW SETTING ON");
   15f50:	230c      	movs	r3, #12
   15f52:	2208      	movs	r2, #8
   15f54:	4694      	mov	ip, r2
   15f56:	44bc      	add	ip, r7
   15f58:	4463      	add	r3, ip
   15f5a:	4a91      	ldr	r2, [pc, #580]	; (161a0 <processOnSMS+0x13ec>)
   15f5c:	ca13      	ldmia	r2!, {r0, r1, r4}
   15f5e:	c313      	stmia	r3!, {r0, r1, r4}
   15f60:	ca13      	ldmia	r2!, {r0, r1, r4}
   15f62:	c313      	stmia	r3!, {r0, r1, r4}
   15f64:	6812      	ldr	r2, [r2, #0]
   15f66:	601a      	str	r2, [r3, #0]
   15f68:	f000 ffd8 	bl	16f1c <processOnSMS+0x2168>
			}
		}
	}
	else if (StringstartsWith(received_command,"OVFOFF"))
   15f6c:	4a8d      	ldr	r2, [pc, #564]	; (161a4 <processOnSMS+0x13f0>)
   15f6e:	68fb      	ldr	r3, [r7, #12]
   15f70:	0011      	movs	r1, r2
   15f72:	0018      	movs	r0, r3
   15f74:	4b7b      	ldr	r3, [pc, #492]	; (16164 <processOnSMS+0x13b0>)
   15f76:	4798      	blx	r3
   15f78:	1e03      	subs	r3, r0, #0
   15f7a:	d034      	beq.n	15fe6 <processOnSMS+0x1232>
	{
		if (factory_settings_parameter_struct.ENABLE_WATER && !(factory_settings_parameter_struct.ENABLE_M2M))
   15f7c:	4b81      	ldr	r3, [pc, #516]	; (16184 <processOnSMS+0x13d0>)
   15f7e:	795b      	ldrb	r3, [r3, #5]
   15f80:	2b00      	cmp	r3, #0
   15f82:	d101      	bne.n	15f88 <processOnSMS+0x11d4>
   15f84:	f000 ffca 	bl	16f1c <processOnSMS+0x2168>
   15f88:	4b7e      	ldr	r3, [pc, #504]	; (16184 <processOnSMS+0x13d0>)
   15f8a:	78db      	ldrb	r3, [r3, #3]
   15f8c:	2b00      	cmp	r3, #0
   15f8e:	d001      	beq.n	15f94 <processOnSMS+0x11e0>
   15f90:	f000 ffc4 	bl	16f1c <processOnSMS+0x2168>
		{
			savePreventOverFlowSettings(false);  //set DND to False in EEPROM
   15f94:	2000      	movs	r0, #0
   15f96:	4b81      	ldr	r3, [pc, #516]	; (1619c <processOnSMS+0x13e8>)
   15f98:	4798      	blx	r3

			incomingSMSProcessed=true;
   15f9a:	2328      	movs	r3, #40	; 0x28
   15f9c:	33ff      	adds	r3, #255	; 0xff
   15f9e:	2208      	movs	r2, #8
   15fa0:	4694      	mov	ip, r2
   15fa2:	44bc      	add	ip, r7
   15fa4:	4463      	add	r3, ip
   15fa6:	2201      	movs	r2, #1
   15fa8:	701a      	strb	r2, [r3, #0]

			if(response_sms_processed_cmd == true)
   15faa:	4b73      	ldr	r3, [pc, #460]	; (16178 <processOnSMS+0x13c4>)
   15fac:	2294      	movs	r2, #148	; 0x94
   15fae:	0052      	lsls	r2, r2, #1
   15fb0:	4694      	mov	ip, r2
   15fb2:	2208      	movs	r2, #8
   15fb4:	4690      	mov	r8, r2
   15fb6:	44b8      	add	r8, r7
   15fb8:	44c4      	add	ip, r8
   15fba:	4463      	add	r3, ip
   15fbc:	781b      	ldrb	r3, [r3, #0]
   15fbe:	2b00      	cmp	r3, #0
   15fc0:	d101      	bne.n	15fc6 <processOnSMS+0x1212>
   15fc2:	f000 ffab 	bl	16f1c <processOnSMS+0x2168>
			{
				strcpy(resep_msg,"PREVENT OVERFLOW SETTING OFF");
   15fc6:	230c      	movs	r3, #12
   15fc8:	2208      	movs	r2, #8
   15fca:	4694      	mov	ip, r2
   15fcc:	44bc      	add	ip, r7
   15fce:	4463      	add	r3, ip
   15fd0:	4a75      	ldr	r2, [pc, #468]	; (161a8 <processOnSMS+0x13f4>)
   15fd2:	ca13      	ldmia	r2!, {r0, r1, r4}
   15fd4:	c313      	stmia	r3!, {r0, r1, r4}
   15fd6:	ca13      	ldmia	r2!, {r0, r1, r4}
   15fd8:	c313      	stmia	r3!, {r0, r1, r4}
   15fda:	6811      	ldr	r1, [r2, #0]
   15fdc:	6019      	str	r1, [r3, #0]
   15fde:	7912      	ldrb	r2, [r2, #4]
   15fe0:	711a      	strb	r2, [r3, #4]
   15fe2:	f000 ff9b 	bl	16f1c <processOnSMS+0x2168>
			}
		}
	}
	else if (StringstartsWith(received_command,"M2MON"))
   15fe6:	4a71      	ldr	r2, [pc, #452]	; (161ac <processOnSMS+0x13f8>)
   15fe8:	68fb      	ldr	r3, [r7, #12]
   15fea:	0011      	movs	r1, r2
   15fec:	0018      	movs	r0, r3
   15fee:	4b5d      	ldr	r3, [pc, #372]	; (16164 <processOnSMS+0x13b0>)
   15ff0:	4798      	blx	r3
   15ff2:	1e03      	subs	r3, r0, #0
   15ff4:	d05c      	beq.n	160b0 <processOnSMS+0x12fc>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   15ff6:	4b63      	ldr	r3, [pc, #396]	; (16184 <processOnSMS+0x13d0>)
   15ff8:	78db      	ldrb	r3, [r3, #3]
   15ffa:	2b00      	cmp	r3, #0
   15ffc:	d101      	bne.n	16002 <processOnSMS+0x124e>
   15ffe:	f000 ff8d 	bl	16f1c <processOnSMS+0x2168>
		{
			incomingSMSProcessed=true;
   16002:	2328      	movs	r3, #40	; 0x28
   16004:	33ff      	adds	r3, #255	; 0xff
   16006:	2208      	movs	r2, #8
   16008:	4694      	mov	ip, r2
   1600a:	44bc      	add	ip, r7
   1600c:	4463      	add	r3, ip
   1600e:	2201      	movs	r2, #1
   16010:	701a      	strb	r2, [r3, #0]
			
			if(m2m_Numbers_struct.m2mRemotePresent)
   16012:	4b67      	ldr	r3, [pc, #412]	; (161b0 <processOnSMS+0x13fc>)
   16014:	78db      	ldrb	r3, [r3, #3]
   16016:	2b00      	cmp	r3, #0
   16018:	d02f      	beq.n	1607a <processOnSMS+0x12c6>
			{
				if(!m2m_Numbers_struct.m2mRemoteVerified)
   1601a:	4b65      	ldr	r3, [pc, #404]	; (161b0 <processOnSMS+0x13fc>)
   1601c:	791b      	ldrb	r3, [r3, #4]
   1601e:	2b00      	cmp	r3, #0
   16020:	d10e      	bne.n	16040 <processOnSMS+0x128c>
				{
					response_sms_processed_cmd = false;
   16022:	4b55      	ldr	r3, [pc, #340]	; (16178 <processOnSMS+0x13c4>)
   16024:	2294      	movs	r2, #148	; 0x94
   16026:	0052      	lsls	r2, r2, #1
   16028:	4694      	mov	ip, r2
   1602a:	2208      	movs	r2, #8
   1602c:	4690      	mov	r8, r2
   1602e:	44b8      	add	r8, r7
   16030:	44c4      	add	ip, r8
   16032:	4463      	add	r3, ip
   16034:	2200      	movs	r2, #0
   16036:	701a      	strb	r2, [r3, #0]
					verifyRemoteNumber();
   16038:	4b5e      	ldr	r3, [pc, #376]	; (161b4 <processOnSMS+0x1400>)
   1603a:	4798      	blx	r3
   1603c:	f000 ff6e 	bl	16f1c <processOnSMS+0x2168>
				}
				else
				{
					response_sms_processed_cmd = true;
   16040:	4b4d      	ldr	r3, [pc, #308]	; (16178 <processOnSMS+0x13c4>)
   16042:	2294      	movs	r2, #148	; 0x94
   16044:	0052      	lsls	r2, r2, #1
   16046:	4694      	mov	ip, r2
   16048:	2208      	movs	r2, #8
   1604a:	4690      	mov	r8, r2
   1604c:	44b8      	add	r8, r7
   1604e:	44c4      	add	ip, r8
   16050:	4463      	add	r3, ip
   16052:	2201      	movs	r2, #1
   16054:	701a      	strb	r2, [r3, #0]
					strcpy(resep_msg,"M2M Turned On, Remote Number Already Verified");
   16056:	230c      	movs	r3, #12
   16058:	2208      	movs	r2, #8
   1605a:	4694      	mov	ip, r2
   1605c:	44bc      	add	ip, r7
   1605e:	4463      	add	r3, ip
   16060:	4a55      	ldr	r2, [pc, #340]	; (161b8 <processOnSMS+0x1404>)
   16062:	ca13      	ldmia	r2!, {r0, r1, r4}
   16064:	c313      	stmia	r3!, {r0, r1, r4}
   16066:	ca13      	ldmia	r2!, {r0, r1, r4}
   16068:	c313      	stmia	r3!, {r0, r1, r4}
   1606a:	ca13      	ldmia	r2!, {r0, r1, r4}
   1606c:	c313      	stmia	r3!, {r0, r1, r4}
   1606e:	ca03      	ldmia	r2!, {r0, r1}
   16070:	c303      	stmia	r3!, {r0, r1}
   16072:	8812      	ldrh	r2, [r2, #0]
   16074:	801a      	strh	r2, [r3, #0]
   16076:	f000 ff51 	bl	16f1c <processOnSMS+0x2168>
				}
			}
			else
			{
				response_sms_processed_cmd=true;
   1607a:	4b3f      	ldr	r3, [pc, #252]	; (16178 <processOnSMS+0x13c4>)
   1607c:	2294      	movs	r2, #148	; 0x94
   1607e:	0052      	lsls	r2, r2, #1
   16080:	4694      	mov	ip, r2
   16082:	2208      	movs	r2, #8
   16084:	4690      	mov	r8, r2
   16086:	44b8      	add	r8, r7
   16088:	44c4      	add	ip, r8
   1608a:	4463      	add	r3, ip
   1608c:	2201      	movs	r2, #1
   1608e:	701a      	strb	r2, [r3, #0]
				strcpy(resep_msg,"Error: M2M Remote Number Not Present");
   16090:	230c      	movs	r3, #12
   16092:	2208      	movs	r2, #8
   16094:	4694      	mov	ip, r2
   16096:	44bc      	add	ip, r7
   16098:	4463      	add	r3, ip
   1609a:	4a48      	ldr	r2, [pc, #288]	; (161bc <processOnSMS+0x1408>)
   1609c:	ca13      	ldmia	r2!, {r0, r1, r4}
   1609e:	c313      	stmia	r3!, {r0, r1, r4}
   160a0:	ca13      	ldmia	r2!, {r0, r1, r4}
   160a2:	c313      	stmia	r3!, {r0, r1, r4}
   160a4:	ca13      	ldmia	r2!, {r0, r1, r4}
   160a6:	c313      	stmia	r3!, {r0, r1, r4}
   160a8:	7812      	ldrb	r2, [r2, #0]
   160aa:	701a      	strb	r2, [r3, #0]
   160ac:	f000 ff36 	bl	16f1c <processOnSMS+0x2168>
			}
		}
	}
	else if (StringstartsWith(received_command,"M2MOFF"))
   160b0:	4a43      	ldr	r2, [pc, #268]	; (161c0 <processOnSMS+0x140c>)
   160b2:	68fb      	ldr	r3, [r7, #12]
   160b4:	0011      	movs	r1, r2
   160b6:	0018      	movs	r0, r3
   160b8:	4b2a      	ldr	r3, [pc, #168]	; (16164 <processOnSMS+0x13b0>)
   160ba:	4798      	blx	r3
   160bc:	1e03      	subs	r3, r0, #0
   160be:	d02a      	beq.n	16116 <processOnSMS+0x1362>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   160c0:	4b30      	ldr	r3, [pc, #192]	; (16184 <processOnSMS+0x13d0>)
   160c2:	78db      	ldrb	r3, [r3, #3]
   160c4:	2b00      	cmp	r3, #0
   160c6:	d101      	bne.n	160cc <processOnSMS+0x1318>
   160c8:	f000 ff28 	bl	16f1c <processOnSMS+0x2168>
		{
			incomingSMSProcessed=true;
   160cc:	2328      	movs	r3, #40	; 0x28
   160ce:	33ff      	adds	r3, #255	; 0xff
   160d0:	2208      	movs	r2, #8
   160d2:	4694      	mov	ip, r2
   160d4:	44bc      	add	ip, r7
   160d6:	4463      	add	r3, ip
   160d8:	2201      	movs	r2, #1
   160da:	701a      	strb	r2, [r3, #0]
			
			saveM2MSettings(false);
   160dc:	2000      	movs	r0, #0
   160de:	4b39      	ldr	r3, [pc, #228]	; (161c4 <processOnSMS+0x1410>)
   160e0:	4798      	blx	r3
			if(response_sms_processed_cmd == true)
   160e2:	4b25      	ldr	r3, [pc, #148]	; (16178 <processOnSMS+0x13c4>)
   160e4:	2294      	movs	r2, #148	; 0x94
   160e6:	0052      	lsls	r2, r2, #1
   160e8:	4694      	mov	ip, r2
   160ea:	2208      	movs	r2, #8
   160ec:	4690      	mov	r8, r2
   160ee:	44b8      	add	r8, r7
   160f0:	44c4      	add	ip, r8
   160f2:	4463      	add	r3, ip
   160f4:	781b      	ldrb	r3, [r3, #0]
   160f6:	2b00      	cmp	r3, #0
   160f8:	d101      	bne.n	160fe <processOnSMS+0x134a>
   160fa:	f000 ff0f 	bl	16f1c <processOnSMS+0x2168>
			{
				strcpy(resep_msg,"M2M SETTING OFF");
   160fe:	230c      	movs	r3, #12
   16100:	2208      	movs	r2, #8
   16102:	4694      	mov	ip, r2
   16104:	44bc      	add	ip, r7
   16106:	4463      	add	r3, ip
   16108:	4a2f      	ldr	r2, [pc, #188]	; (161c8 <processOnSMS+0x1414>)
   1610a:	ca13      	ldmia	r2!, {r0, r1, r4}
   1610c:	c313      	stmia	r3!, {r0, r1, r4}
   1610e:	6812      	ldr	r2, [r2, #0]
   16110:	601a      	str	r2, [r3, #0]
   16112:	f000 ff03 	bl	16f1c <processOnSMS+0x2168>
			}
		}
	}
	else if (StringstartsWith(received_command,"STATUS"))
   16116:	4a2d      	ldr	r2, [pc, #180]	; (161cc <processOnSMS+0x1418>)
   16118:	68fb      	ldr	r3, [r7, #12]
   1611a:	0011      	movs	r1, r2
   1611c:	0018      	movs	r0, r3
   1611e:	4b11      	ldr	r3, [pc, #68]	; (16164 <processOnSMS+0x13b0>)
   16120:	4798      	blx	r3
   16122:	1e03      	subs	r3, r0, #0
   16124:	d056      	beq.n	161d4 <processOnSMS+0x1420>
	{
		incomingSMSProcessed=true;
   16126:	2328      	movs	r3, #40	; 0x28
   16128:	33ff      	adds	r3, #255	; 0xff
   1612a:	2208      	movs	r2, #8
   1612c:	4694      	mov	ip, r2
   1612e:	44bc      	add	ip, r7
   16130:	4463      	add	r3, ip
   16132:	2201      	movs	r2, #1
   16134:	701a      	strb	r2, [r3, #0]
		response_sms_processed_cmd=true;
   16136:	4b10      	ldr	r3, [pc, #64]	; (16178 <processOnSMS+0x13c4>)
   16138:	2294      	movs	r2, #148	; 0x94
   1613a:	0052      	lsls	r2, r2, #1
   1613c:	4694      	mov	ip, r2
   1613e:	2208      	movs	r2, #8
   16140:	4690      	mov	r8, r2
   16142:	44b8      	add	r8, r7
   16144:	44c4      	add	ip, r8
   16146:	4463      	add	r3, ip
   16148:	2201      	movs	r2, #1
   1614a:	701a      	strb	r2, [r3, #0]
		
		buildStatusMessage(&resep_msg);
   1614c:	230c      	movs	r3, #12
   1614e:	2208      	movs	r2, #8
   16150:	4694      	mov	ip, r2
   16152:	44bc      	add	ip, r7
   16154:	4463      	add	r3, ip
   16156:	0018      	movs	r0, r3
   16158:	4b1d      	ldr	r3, [pc, #116]	; (161d0 <processOnSMS+0x141c>)
   1615a:	4798      	blx	r3
   1615c:	f000 fede 	bl	16f1c <processOnSMS+0x2168>
   16160:	0002a3dc 	.word	0x0002a3dc
   16164:	00014015 	.word	0x00014015
   16168:	000291a3 	.word	0x000291a3
   1616c:	00028eef 	.word	0x00028eef
   16170:	00028df9 	.word	0x00028df9
   16174:	00011565 	.word	0x00011565
   16178:	fffffeda 	.word	0xfffffeda
   1617c:	0002a3e4 	.word	0x0002a3e4
   16180:	0002a3f0 	.word	0x0002a3f0
   16184:	2000062c 	.word	0x2000062c
   16188:	200006dc 	.word	0x200006dc
   1618c:	20000654 	.word	0x20000654
   16190:	0002a3f8 	.word	0x0002a3f8
   16194:	00029119 	.word	0x00029119
   16198:	0002a41c 	.word	0x0002a41c
   1619c:	000114b1 	.word	0x000114b1
   161a0:	0002a424 	.word	0x0002a424
   161a4:	0002a440 	.word	0x0002a440
   161a8:	0002a448 	.word	0x0002a448
   161ac:	0002a468 	.word	0x0002a468
   161b0:	20000554 	.word	0x20000554
   161b4:	000171f1 	.word	0x000171f1
   161b8:	0002a470 	.word	0x0002a470
   161bc:	0002a4a0 	.word	0x0002a4a0
   161c0:	0002a4c8 	.word	0x0002a4c8
   161c4:	00010be1 	.word	0x00010be1
   161c8:	0002a4d0 	.word	0x0002a4d0
   161cc:	0002a4e0 	.word	0x0002a4e0
   161d0:	00016fe5 	.word	0x00016fe5
	}
	else if (StringstartsWith(received_command,"AMON") && (admin || alterNumber))
   161d4:	4a87      	ldr	r2, [pc, #540]	; (163f4 <processOnSMS+0x1640>)
   161d6:	68fb      	ldr	r3, [r7, #12]
   161d8:	0011      	movs	r1, r2
   161da:	0018      	movs	r0, r3
   161dc:	4b86      	ldr	r3, [pc, #536]	; (163f8 <processOnSMS+0x1644>)
   161de:	4798      	blx	r3
   161e0:	1e03      	subs	r3, r0, #0
   161e2:	d05e      	beq.n	162a2 <processOnSMS+0x14ee>
   161e4:	4b85      	ldr	r3, [pc, #532]	; (163fc <processOnSMS+0x1648>)
   161e6:	2294      	movs	r2, #148	; 0x94
   161e8:	0052      	lsls	r2, r2, #1
   161ea:	4694      	mov	ip, r2
   161ec:	2208      	movs	r2, #8
   161ee:	4690      	mov	r8, r2
   161f0:	44b8      	add	r8, r7
   161f2:	44c4      	add	ip, r8
   161f4:	4463      	add	r3, ip
   161f6:	781b      	ldrb	r3, [r3, #0]
   161f8:	2b00      	cmp	r3, #0
   161fa:	d10b      	bne.n	16214 <processOnSMS+0x1460>
   161fc:	4b80      	ldr	r3, [pc, #512]	; (16400 <processOnSMS+0x164c>)
   161fe:	2294      	movs	r2, #148	; 0x94
   16200:	0052      	lsls	r2, r2, #1
   16202:	4694      	mov	ip, r2
   16204:	2208      	movs	r2, #8
   16206:	4690      	mov	r8, r2
   16208:	44b8      	add	r8, r7
   1620a:	44c4      	add	ip, r8
   1620c:	4463      	add	r3, ip
   1620e:	781b      	ldrb	r3, [r3, #0]
   16210:	2b00      	cmp	r3, #0
   16212:	d046      	beq.n	162a2 <processOnSMS+0x14ee>
	{
		incomingSMSProcessed=true;
   16214:	2328      	movs	r3, #40	; 0x28
   16216:	33ff      	adds	r3, #255	; 0xff
   16218:	2208      	movs	r2, #8
   1621a:	4694      	mov	ip, r2
   1621c:	44bc      	add	ip, r7
   1621e:	4463      	add	r3, ip
   16220:	2201      	movs	r2, #1
   16222:	701a      	strb	r2, [r3, #0]
		
		if (alternateNumber_struct.alterNumberPresent)
   16224:	4b77      	ldr	r3, [pc, #476]	; (16404 <processOnSMS+0x1650>)
   16226:	789b      	ldrb	r3, [r3, #2]
   16228:	2b00      	cmp	r3, #0
   1622a:	d01c      	beq.n	16266 <processOnSMS+0x14b2>
		{
			saveAlterNumberSetting(true);
   1622c:	2001      	movs	r0, #1
   1622e:	4b76      	ldr	r3, [pc, #472]	; (16408 <processOnSMS+0x1654>)
   16230:	4798      	blx	r3
			if(response_sms_processed_cmd == true)
   16232:	4b76      	ldr	r3, [pc, #472]	; (1640c <processOnSMS+0x1658>)
   16234:	2294      	movs	r2, #148	; 0x94
   16236:	0052      	lsls	r2, r2, #1
   16238:	4694      	mov	ip, r2
   1623a:	2208      	movs	r2, #8
   1623c:	4690      	mov	r8, r2
   1623e:	44b8      	add	r8, r7
   16240:	44c4      	add	ip, r8
   16242:	4463      	add	r3, ip
   16244:	781b      	ldrb	r3, [r3, #0]
   16246:	2b00      	cmp	r3, #0
   16248:	d101      	bne.n	1624e <processOnSMS+0x149a>
   1624a:	f000 fe66 	bl	16f1a <processOnSMS+0x2166>
			{
				strcpy(resep_msg,"ALTERNATE NUMBER ON");
   1624e:	230c      	movs	r3, #12
   16250:	2208      	movs	r2, #8
   16252:	4694      	mov	ip, r2
   16254:	44bc      	add	ip, r7
   16256:	4463      	add	r3, ip
   16258:	4a6d      	ldr	r2, [pc, #436]	; (16410 <processOnSMS+0x165c>)
   1625a:	ca13      	ldmia	r2!, {r0, r1, r4}
   1625c:	c313      	stmia	r3!, {r0, r1, r4}
   1625e:	ca03      	ldmia	r2!, {r0, r1}
   16260:	c303      	stmia	r3!, {r0, r1}
		if (alternateNumber_struct.alterNumberPresent)
   16262:	f000 fe5a 	bl	16f1a <processOnSMS+0x2166>
			}
		}
		else
		{
			if(response_sms_processed_cmd == true)
   16266:	4b69      	ldr	r3, [pc, #420]	; (1640c <processOnSMS+0x1658>)
   16268:	2294      	movs	r2, #148	; 0x94
   1626a:	0052      	lsls	r2, r2, #1
   1626c:	4694      	mov	ip, r2
   1626e:	2208      	movs	r2, #8
   16270:	4690      	mov	r8, r2
   16272:	44b8      	add	r8, r7
   16274:	44c4      	add	ip, r8
   16276:	4463      	add	r3, ip
   16278:	781b      	ldrb	r3, [r3, #0]
   1627a:	2b00      	cmp	r3, #0
   1627c:	d101      	bne.n	16282 <processOnSMS+0x14ce>
   1627e:	f000 fe4c 	bl	16f1a <processOnSMS+0x2166>
			{
				strcpy(resep_msg,"ALTERNATE NUMBER NOT PRESENT");
   16282:	230c      	movs	r3, #12
   16284:	2208      	movs	r2, #8
   16286:	4694      	mov	ip, r2
   16288:	44bc      	add	ip, r7
   1628a:	4463      	add	r3, ip
   1628c:	4a61      	ldr	r2, [pc, #388]	; (16414 <processOnSMS+0x1660>)
   1628e:	ca13      	ldmia	r2!, {r0, r1, r4}
   16290:	c313      	stmia	r3!, {r0, r1, r4}
   16292:	ca13      	ldmia	r2!, {r0, r1, r4}
   16294:	c313      	stmia	r3!, {r0, r1, r4}
   16296:	6811      	ldr	r1, [r2, #0]
   16298:	6019      	str	r1, [r3, #0]
   1629a:	7912      	ldrb	r2, [r2, #4]
   1629c:	711a      	strb	r2, [r3, #4]
		if (alternateNumber_struct.alterNumberPresent)
   1629e:	f000 fe3c 	bl	16f1a <processOnSMS+0x2166>
			}
		}
	}
	else if (StringstartsWith(received_command,"AMOFF"))
   162a2:	4a5d      	ldr	r2, [pc, #372]	; (16418 <processOnSMS+0x1664>)
   162a4:	68fb      	ldr	r3, [r7, #12]
   162a6:	0011      	movs	r1, r2
   162a8:	0018      	movs	r0, r3
   162aa:	4b53      	ldr	r3, [pc, #332]	; (163f8 <processOnSMS+0x1644>)
   162ac:	4798      	blx	r3
   162ae:	1e03      	subs	r3, r0, #0
   162b0:	d026      	beq.n	16300 <processOnSMS+0x154c>
	{
		saveAlterNumberSetting(false);
   162b2:	2000      	movs	r0, #0
   162b4:	4b54      	ldr	r3, [pc, #336]	; (16408 <processOnSMS+0x1654>)
   162b6:	4798      	blx	r3
		incomingSMSProcessed=true;
   162b8:	2328      	movs	r3, #40	; 0x28
   162ba:	33ff      	adds	r3, #255	; 0xff
   162bc:	2208      	movs	r2, #8
   162be:	4694      	mov	ip, r2
   162c0:	44bc      	add	ip, r7
   162c2:	4463      	add	r3, ip
   162c4:	2201      	movs	r2, #1
   162c6:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   162c8:	4b50      	ldr	r3, [pc, #320]	; (1640c <processOnSMS+0x1658>)
   162ca:	2294      	movs	r2, #148	; 0x94
   162cc:	0052      	lsls	r2, r2, #1
   162ce:	4694      	mov	ip, r2
   162d0:	2208      	movs	r2, #8
   162d2:	4690      	mov	r8, r2
   162d4:	44b8      	add	r8, r7
   162d6:	44c4      	add	ip, r8
   162d8:	4463      	add	r3, ip
   162da:	781b      	ldrb	r3, [r3, #0]
   162dc:	2b00      	cmp	r3, #0
   162de:	d101      	bne.n	162e4 <processOnSMS+0x1530>
   162e0:	f000 fe1c 	bl	16f1c <processOnSMS+0x2168>
		{
			strcpy(resep_msg,"ALTERNATE MOBILE NUMBER OFF");
   162e4:	230c      	movs	r3, #12
   162e6:	2208      	movs	r2, #8
   162e8:	4694      	mov	ip, r2
   162ea:	44bc      	add	ip, r7
   162ec:	4463      	add	r3, ip
   162ee:	4a4b      	ldr	r2, [pc, #300]	; (1641c <processOnSMS+0x1668>)
   162f0:	ca13      	ldmia	r2!, {r0, r1, r4}
   162f2:	c313      	stmia	r3!, {r0, r1, r4}
   162f4:	ca13      	ldmia	r2!, {r0, r1, r4}
   162f6:	c313      	stmia	r3!, {r0, r1, r4}
   162f8:	6812      	ldr	r2, [r2, #0]
   162fa:	601a      	str	r2, [r3, #0]
   162fc:	f000 fe0e 	bl	16f1c <processOnSMS+0x2168>
		}
	}
	else if (StringstartsWith(received_command,"NCOFF"))
   16300:	4a47      	ldr	r2, [pc, #284]	; (16420 <processOnSMS+0x166c>)
   16302:	68fb      	ldr	r3, [r7, #12]
   16304:	0011      	movs	r1, r2
   16306:	0018      	movs	r0, r3
   16308:	4b3b      	ldr	r3, [pc, #236]	; (163f8 <processOnSMS+0x1644>)
   1630a:	4798      	blx	r3
   1630c:	1e03      	subs	r3, r0, #0
   1630e:	d029      	beq.n	16364 <processOnSMS+0x15b0>
	{
		saveNoCallSettings(false,0,0,0,0);
   16310:	2300      	movs	r3, #0
   16312:	9300      	str	r3, [sp, #0]
   16314:	2300      	movs	r3, #0
   16316:	2200      	movs	r2, #0
   16318:	2100      	movs	r1, #0
   1631a:	2000      	movs	r0, #0
   1631c:	4c41      	ldr	r4, [pc, #260]	; (16424 <processOnSMS+0x1670>)
   1631e:	47a0      	blx	r4
		incomingSMSProcessed=true;
   16320:	2328      	movs	r3, #40	; 0x28
   16322:	33ff      	adds	r3, #255	; 0xff
   16324:	2208      	movs	r2, #8
   16326:	4694      	mov	ip, r2
   16328:	44bc      	add	ip, r7
   1632a:	4463      	add	r3, ip
   1632c:	2201      	movs	r2, #1
   1632e:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
   16330:	4b36      	ldr	r3, [pc, #216]	; (1640c <processOnSMS+0x1658>)
   16332:	2294      	movs	r2, #148	; 0x94
   16334:	0052      	lsls	r2, r2, #1
   16336:	4694      	mov	ip, r2
   16338:	2208      	movs	r2, #8
   1633a:	4690      	mov	r8, r2
   1633c:	44b8      	add	r8, r7
   1633e:	44c4      	add	ip, r8
   16340:	4463      	add	r3, ip
   16342:	781b      	ldrb	r3, [r3, #0]
   16344:	2b00      	cmp	r3, #0
   16346:	d101      	bne.n	1634c <processOnSMS+0x1598>
   16348:	f000 fde8 	bl	16f1c <processOnSMS+0x2168>
		{
			strcpy(resep_msg,"NO CALL SETTING OFF");
   1634c:	230c      	movs	r3, #12
   1634e:	2208      	movs	r2, #8
   16350:	4694      	mov	ip, r2
   16352:	44bc      	add	ip, r7
   16354:	4463      	add	r3, ip
   16356:	4a34      	ldr	r2, [pc, #208]	; (16428 <processOnSMS+0x1674>)
   16358:	ca13      	ldmia	r2!, {r0, r1, r4}
   1635a:	c313      	stmia	r3!, {r0, r1, r4}
   1635c:	ca03      	ldmia	r2!, {r0, r1}
   1635e:	c303      	stmia	r3!, {r0, r1}
   16360:	f000 fddc 	bl	16f1c <processOnSMS+0x2168>
		}
	}
	else if (StringstartsWith(received_command,"GETTIME"))
   16364:	4a31      	ldr	r2, [pc, #196]	; (1642c <processOnSMS+0x1678>)
   16366:	68fb      	ldr	r3, [r7, #12]
   16368:	0011      	movs	r1, r2
   1636a:	0018      	movs	r0, r3
   1636c:	4b22      	ldr	r3, [pc, #136]	; (163f8 <processOnSMS+0x1644>)
   1636e:	4798      	blx	r3
   16370:	1e03      	subs	r3, r0, #0
   16372:	d067      	beq.n	16444 <processOnSMS+0x1690>
	{
		uint8_t globalHours,globalMinutes;
		getSystemTime(&globalHours,&globalMinutes);
   16374:	230a      	movs	r3, #10
   16376:	2208      	movs	r2, #8
   16378:	18ba      	adds	r2, r7, r2
   1637a:	18d2      	adds	r2, r2, r3
   1637c:	230b      	movs	r3, #11
   1637e:	2108      	movs	r1, #8
   16380:	468c      	mov	ip, r1
   16382:	44bc      	add	ip, r7
   16384:	4463      	add	r3, ip
   16386:	0011      	movs	r1, r2
   16388:	0018      	movs	r0, r3
   1638a:	4b29      	ldr	r3, [pc, #164]	; (16430 <processOnSMS+0x167c>)
   1638c:	4798      	blx	r3
		
		sprintf(resep_msg,"TIME : %u:%u",
   1638e:	4b29      	ldr	r3, [pc, #164]	; (16434 <processOnSMS+0x1680>)
   16390:	2294      	movs	r2, #148	; 0x94
   16392:	0052      	lsls	r2, r2, #1
   16394:	4694      	mov	ip, r2
   16396:	2208      	movs	r2, #8
   16398:	4690      	mov	r8, r2
   1639a:	44b8      	add	r8, r7
   1639c:	44c4      	add	ip, r8
   1639e:	4463      	add	r3, ip
   163a0:	781b      	ldrb	r3, [r3, #0]
   163a2:	001a      	movs	r2, r3
   163a4:	4b24      	ldr	r3, [pc, #144]	; (16438 <processOnSMS+0x1684>)
   163a6:	2194      	movs	r1, #148	; 0x94
   163a8:	0049      	lsls	r1, r1, #1
   163aa:	468c      	mov	ip, r1
   163ac:	2108      	movs	r1, #8
   163ae:	4688      	mov	r8, r1
   163b0:	44b8      	add	r8, r7
   163b2:	44c4      	add	ip, r8
   163b4:	4463      	add	r3, ip
   163b6:	781b      	ldrb	r3, [r3, #0]
   163b8:	4920      	ldr	r1, [pc, #128]	; (1643c <processOnSMS+0x1688>)
   163ba:	200c      	movs	r0, #12
   163bc:	2408      	movs	r4, #8
   163be:	46a4      	mov	ip, r4
   163c0:	44bc      	add	ip, r7
   163c2:	4460      	add	r0, ip
   163c4:	4c1e      	ldr	r4, [pc, #120]	; (16440 <processOnSMS+0x168c>)
   163c6:	47a0      	blx	r4
		globalHours,globalMinutes);

		incomingSMSProcessed=true;
   163c8:	2328      	movs	r3, #40	; 0x28
   163ca:	33ff      	adds	r3, #255	; 0xff
   163cc:	2208      	movs	r2, #8
   163ce:	4694      	mov	ip, r2
   163d0:	44bc      	add	ip, r7
   163d2:	4463      	add	r3, ip
   163d4:	2201      	movs	r2, #1
   163d6:	701a      	strb	r2, [r3, #0]

		response_sms_processed_cmd = true;
   163d8:	4b0c      	ldr	r3, [pc, #48]	; (1640c <processOnSMS+0x1658>)
   163da:	2294      	movs	r2, #148	; 0x94
   163dc:	0052      	lsls	r2, r2, #1
   163de:	4694      	mov	ip, r2
   163e0:	2208      	movs	r2, #8
   163e2:	4690      	mov	r8, r2
   163e4:	44b8      	add	r8, r7
   163e6:	44c4      	add	ip, r8
   163e8:	4463      	add	r3, ip
   163ea:	2201      	movs	r2, #1
   163ec:	701a      	strb	r2, [r3, #0]
   163ee:	f000 fd95 	bl	16f1c <processOnSMS+0x2168>
   163f2:	46c0      	nop			; (mov r8, r8)
   163f4:	0002a150 	.word	0x0002a150
   163f8:	00014015 	.word	0x00014015
   163fc:	fffffedb 	.word	0xfffffedb
   16400:	fffffed9 	.word	0xfffffed9
   16404:	2000063c 	.word	0x2000063c
   16408:	000111e5 	.word	0x000111e5
   1640c:	fffffeda 	.word	0xfffffeda
   16410:	0002a4e8 	.word	0x0002a4e8
   16414:	0002a4fc 	.word	0x0002a4fc
   16418:	0002a51c 	.word	0x0002a51c
   1641c:	0002a524 	.word	0x0002a524
   16420:	0002a540 	.word	0x0002a540
   16424:	000113d5 	.word	0x000113d5
   16428:	0002a548 	.word	0x0002a548
   1642c:	0002a55c 	.word	0x0002a55c
   16430:	00017429 	.word	0x00017429
   16434:	fffffee3 	.word	0xfffffee3
   16438:	fffffee2 	.word	0xfffffee2
   1643c:	0002a564 	.word	0x0002a564
   16440:	00029119 	.word	0x00029119
	}
	else if (StringstartsWith(received_command,"SETTIME"))
   16444:	4ada      	ldr	r2, [pc, #872]	; (167b0 <processOnSMS+0x19fc>)
   16446:	68fb      	ldr	r3, [r7, #12]
   16448:	0011      	movs	r1, r2
   1644a:	0018      	movs	r0, r3
   1644c:	4bd9      	ldr	r3, [pc, #868]	; (167b4 <processOnSMS+0x1a00>)
   1644e:	4798      	blx	r3
   16450:	1e03      	subs	r3, r0, #0
   16452:	d001      	beq.n	16458 <processOnSMS+0x16a4>
   16454:	f000 fd62 	bl	16f1c <processOnSMS+0x2168>
		//todo: implement
		//set internal RTC of Either MCU or SIM800 to check no call time
		

	}
	else if (StringstartsWith(received_command,"NCTIME"))
   16458:	4ad7      	ldr	r2, [pc, #860]	; (167b8 <processOnSMS+0x1a04>)
   1645a:	68fb      	ldr	r3, [r7, #12]
   1645c:	0011      	movs	r1, r2
   1645e:	0018      	movs	r0, r3
   16460:	4bd4      	ldr	r3, [pc, #848]	; (167b4 <processOnSMS+0x1a00>)
   16462:	4798      	blx	r3
   16464:	1e03      	subs	r3, r0, #0
   16466:	d100      	bne.n	1646a <processOnSMS+0x16b6>
   16468:	e13c      	b.n	166e4 <processOnSMS+0x1930>
	{
		char *ptrclcc;
		uint8_t startHH, startMM, stopHH, stopMM;

		ptrclcc = strtok(received_command,"-");
   1646a:	4ad4      	ldr	r2, [pc, #848]	; (167bc <processOnSMS+0x1a08>)
   1646c:	68fb      	ldr	r3, [r7, #12]
   1646e:	0011      	movs	r1, r2
   16470:	0018      	movs	r0, r3
   16472:	4bd3      	ldr	r3, [pc, #844]	; (167c0 <processOnSMS+0x1a0c>)
   16474:	4798      	blx	r3
   16476:	0003      	movs	r3, r0
   16478:	2288      	movs	r2, #136	; 0x88
   1647a:	0052      	lsls	r2, r2, #1
   1647c:	2108      	movs	r1, #8
   1647e:	468c      	mov	ip, r1
   16480:	44bc      	add	ip, r7
   16482:	4462      	add	r2, ip
   16484:	6013      	str	r3, [r2, #0]
		ptrclcc = strtok(NULL,":");
   16486:	4bcf      	ldr	r3, [pc, #828]	; (167c4 <processOnSMS+0x1a10>)
   16488:	0019      	movs	r1, r3
   1648a:	2000      	movs	r0, #0
   1648c:	4bcc      	ldr	r3, [pc, #816]	; (167c0 <processOnSMS+0x1a0c>)
   1648e:	4798      	blx	r3
   16490:	0003      	movs	r3, r0
   16492:	2288      	movs	r2, #136	; 0x88
   16494:	0052      	lsls	r2, r2, #1
   16496:	2108      	movs	r1, #8
   16498:	468c      	mov	ip, r1
   1649a:	44bc      	add	ip, r7
   1649c:	4462      	add	r2, ip
   1649e:	6013      	str	r3, [r2, #0]
		startHH=atoi(*ptrclcc);
   164a0:	2388      	movs	r3, #136	; 0x88
   164a2:	005b      	lsls	r3, r3, #1
   164a4:	2208      	movs	r2, #8
   164a6:	4694      	mov	ip, r2
   164a8:	44bc      	add	ip, r7
   164aa:	4463      	add	r3, ip
   164ac:	681b      	ldr	r3, [r3, #0]
   164ae:	781b      	ldrb	r3, [r3, #0]
   164b0:	0018      	movs	r0, r3
   164b2:	4bc5      	ldr	r3, [pc, #788]	; (167c8 <processOnSMS+0x1a14>)
   164b4:	4798      	blx	r3
   164b6:	0002      	movs	r2, r0
   164b8:	2310      	movs	r3, #16
   164ba:	33ff      	adds	r3, #255	; 0xff
   164bc:	2108      	movs	r1, #8
   164be:	468c      	mov	ip, r1
   164c0:	44bc      	add	ip, r7
   164c2:	4463      	add	r3, ip
   164c4:	701a      	strb	r2, [r3, #0]
		ptrclcc = strtok(NULL,"-");
   164c6:	4bbd      	ldr	r3, [pc, #756]	; (167bc <processOnSMS+0x1a08>)
   164c8:	0019      	movs	r1, r3
   164ca:	2000      	movs	r0, #0
   164cc:	4bbc      	ldr	r3, [pc, #752]	; (167c0 <processOnSMS+0x1a0c>)
   164ce:	4798      	blx	r3
   164d0:	0003      	movs	r3, r0
   164d2:	2288      	movs	r2, #136	; 0x88
   164d4:	0052      	lsls	r2, r2, #1
   164d6:	2108      	movs	r1, #8
   164d8:	468c      	mov	ip, r1
   164da:	44bc      	add	ip, r7
   164dc:	4462      	add	r2, ip
   164de:	6013      	str	r3, [r2, #0]
		startMM=atoi(*ptrclcc);
   164e0:	2388      	movs	r3, #136	; 0x88
   164e2:	005b      	lsls	r3, r3, #1
   164e4:	2208      	movs	r2, #8
   164e6:	4694      	mov	ip, r2
   164e8:	44bc      	add	ip, r7
   164ea:	4463      	add	r3, ip
   164ec:	681b      	ldr	r3, [r3, #0]
   164ee:	781b      	ldrb	r3, [r3, #0]
   164f0:	0018      	movs	r0, r3
   164f2:	4bb5      	ldr	r3, [pc, #724]	; (167c8 <processOnSMS+0x1a14>)
   164f4:	4798      	blx	r3
   164f6:	0002      	movs	r2, r0
   164f8:	2387      	movs	r3, #135	; 0x87
   164fa:	005b      	lsls	r3, r3, #1
   164fc:	2108      	movs	r1, #8
   164fe:	468c      	mov	ip, r1
   16500:	44bc      	add	ip, r7
   16502:	4463      	add	r3, ip
   16504:	701a      	strb	r2, [r3, #0]
		ptrclcc = strtok(NULL,":");
   16506:	4baf      	ldr	r3, [pc, #700]	; (167c4 <processOnSMS+0x1a10>)
   16508:	0019      	movs	r1, r3
   1650a:	2000      	movs	r0, #0
   1650c:	4bac      	ldr	r3, [pc, #688]	; (167c0 <processOnSMS+0x1a0c>)
   1650e:	4798      	blx	r3
   16510:	0003      	movs	r3, r0
   16512:	2288      	movs	r2, #136	; 0x88
   16514:	0052      	lsls	r2, r2, #1
   16516:	2108      	movs	r1, #8
   16518:	468c      	mov	ip, r1
   1651a:	44bc      	add	ip, r7
   1651c:	4462      	add	r2, ip
   1651e:	6013      	str	r3, [r2, #0]
		stopHH=atoi(*ptrclcc);
   16520:	2388      	movs	r3, #136	; 0x88
   16522:	005b      	lsls	r3, r3, #1
   16524:	2208      	movs	r2, #8
   16526:	4694      	mov	ip, r2
   16528:	44bc      	add	ip, r7
   1652a:	4463      	add	r3, ip
   1652c:	681b      	ldr	r3, [r3, #0]
   1652e:	781b      	ldrb	r3, [r3, #0]
   16530:	0018      	movs	r0, r3
   16532:	4ba5      	ldr	r3, [pc, #660]	; (167c8 <processOnSMS+0x1a14>)
   16534:	4798      	blx	r3
   16536:	0002      	movs	r2, r0
   16538:	230e      	movs	r3, #14
   1653a:	33ff      	adds	r3, #255	; 0xff
   1653c:	2108      	movs	r1, #8
   1653e:	468c      	mov	ip, r1
   16540:	44bc      	add	ip, r7
   16542:	4463      	add	r3, ip
   16544:	701a      	strb	r2, [r3, #0]
		ptrclcc = strtok(NULL,":");
   16546:	4b9f      	ldr	r3, [pc, #636]	; (167c4 <processOnSMS+0x1a10>)
   16548:	0019      	movs	r1, r3
   1654a:	2000      	movs	r0, #0
   1654c:	4b9c      	ldr	r3, [pc, #624]	; (167c0 <processOnSMS+0x1a0c>)
   1654e:	4798      	blx	r3
   16550:	0003      	movs	r3, r0
   16552:	2288      	movs	r2, #136	; 0x88
   16554:	0052      	lsls	r2, r2, #1
   16556:	2108      	movs	r1, #8
   16558:	468c      	mov	ip, r1
   1655a:	44bc      	add	ip, r7
   1655c:	4462      	add	r2, ip
   1655e:	6013      	str	r3, [r2, #0]
		stopMM=atoi(*ptrclcc);
   16560:	2388      	movs	r3, #136	; 0x88
   16562:	005b      	lsls	r3, r3, #1
   16564:	2208      	movs	r2, #8
   16566:	4694      	mov	ip, r2
   16568:	44bc      	add	ip, r7
   1656a:	4463      	add	r3, ip
   1656c:	681b      	ldr	r3, [r3, #0]
   1656e:	781b      	ldrb	r3, [r3, #0]
   16570:	0018      	movs	r0, r3
   16572:	4b95      	ldr	r3, [pc, #596]	; (167c8 <processOnSMS+0x1a14>)
   16574:	4798      	blx	r3
   16576:	0002      	movs	r2, r0
   16578:	2386      	movs	r3, #134	; 0x86
   1657a:	005b      	lsls	r3, r3, #1
   1657c:	2108      	movs	r1, #8
   1657e:	468c      	mov	ip, r1
   16580:	44bc      	add	ip, r7
   16582:	4463      	add	r3, ip
   16584:	701a      	strb	r2, [r3, #0]

		if(startHH>=0 && startHH<24 && startMM>=0 && startMM<60)
   16586:	2310      	movs	r3, #16
   16588:	33ff      	adds	r3, #255	; 0xff
   1658a:	2208      	movs	r2, #8
   1658c:	4694      	mov	ip, r2
   1658e:	44bc      	add	ip, r7
   16590:	4463      	add	r3, ip
   16592:	781b      	ldrb	r3, [r3, #0]
   16594:	2b17      	cmp	r3, #23
   16596:	d901      	bls.n	1659c <processOnSMS+0x17e8>
   16598:	f000 fcc0 	bl	16f1c <processOnSMS+0x2168>
   1659c:	2387      	movs	r3, #135	; 0x87
   1659e:	005b      	lsls	r3, r3, #1
   165a0:	2208      	movs	r2, #8
   165a2:	4694      	mov	ip, r2
   165a4:	44bc      	add	ip, r7
   165a6:	4463      	add	r3, ip
   165a8:	781b      	ldrb	r3, [r3, #0]
   165aa:	2b3b      	cmp	r3, #59	; 0x3b
   165ac:	d901      	bls.n	165b2 <processOnSMS+0x17fe>
   165ae:	f000 fcb5 	bl	16f1c <processOnSMS+0x2168>
		{
			if(stopHH>=0 && stopHH<24 && stopMM>=0 && stopMM<60)
   165b2:	230e      	movs	r3, #14
   165b4:	33ff      	adds	r3, #255	; 0xff
   165b6:	2208      	movs	r2, #8
   165b8:	4694      	mov	ip, r2
   165ba:	44bc      	add	ip, r7
   165bc:	4463      	add	r3, ip
   165be:	781b      	ldrb	r3, [r3, #0]
   165c0:	2b17      	cmp	r3, #23
   165c2:	d901      	bls.n	165c8 <processOnSMS+0x1814>
   165c4:	f000 fcaa 	bl	16f1c <processOnSMS+0x2168>
   165c8:	2386      	movs	r3, #134	; 0x86
   165ca:	005b      	lsls	r3, r3, #1
   165cc:	2208      	movs	r2, #8
   165ce:	4694      	mov	ip, r2
   165d0:	44bc      	add	ip, r7
   165d2:	4463      	add	r3, ip
   165d4:	781b      	ldrb	r3, [r3, #0]
   165d6:	2b3b      	cmp	r3, #59	; 0x3b
   165d8:	d901      	bls.n	165de <processOnSMS+0x182a>
   165da:	f000 fc9f 	bl	16f1c <processOnSMS+0x2168>
			{
				incomingSMSProcessed=true;
   165de:	2328      	movs	r3, #40	; 0x28
   165e0:	33ff      	adds	r3, #255	; 0xff
   165e2:	2208      	movs	r2, #8
   165e4:	4694      	mov	ip, r2
   165e6:	44bc      	add	ip, r7
   165e8:	4463      	add	r3, ip
   165ea:	2201      	movs	r2, #1
   165ec:	701a      	strb	r2, [r3, #0]
				
				if(startHH==stopHH && startMM==stopMM)
   165ee:	2310      	movs	r3, #16
   165f0:	33ff      	adds	r3, #255	; 0xff
   165f2:	2208      	movs	r2, #8
   165f4:	18ba      	adds	r2, r7, r2
   165f6:	18d2      	adds	r2, r2, r3
   165f8:	230e      	movs	r3, #14
   165fa:	33ff      	adds	r3, #255	; 0xff
   165fc:	2108      	movs	r1, #8
   165fe:	468c      	mov	ip, r1
   16600:	44bc      	add	ip, r7
   16602:	4463      	add	r3, ip
   16604:	7812      	ldrb	r2, [r2, #0]
   16606:	781b      	ldrb	r3, [r3, #0]
   16608:	429a      	cmp	r2, r3
   1660a:	d130      	bne.n	1666e <processOnSMS+0x18ba>
   1660c:	2387      	movs	r3, #135	; 0x87
   1660e:	005b      	lsls	r3, r3, #1
   16610:	2208      	movs	r2, #8
   16612:	18ba      	adds	r2, r7, r2
   16614:	18d2      	adds	r2, r2, r3
   16616:	2386      	movs	r3, #134	; 0x86
   16618:	005b      	lsls	r3, r3, #1
   1661a:	2108      	movs	r1, #8
   1661c:	468c      	mov	ip, r1
   1661e:	44bc      	add	ip, r7
   16620:	4463      	add	r3, ip
   16622:	7812      	ldrb	r2, [r2, #0]
   16624:	781b      	ldrb	r3, [r3, #0]
   16626:	429a      	cmp	r2, r3
   16628:	d121      	bne.n	1666e <processOnSMS+0x18ba>
				{
					saveNoCallSettings(false,0,0,0,0);
   1662a:	2300      	movs	r3, #0
   1662c:	9300      	str	r3, [sp, #0]
   1662e:	2300      	movs	r3, #0
   16630:	2200      	movs	r2, #0
   16632:	2100      	movs	r1, #0
   16634:	2000      	movs	r0, #0
   16636:	4c65      	ldr	r4, [pc, #404]	; (167cc <processOnSMS+0x1a18>)
   16638:	47a0      	blx	r4
					if(response_sms_processed_cmd)
   1663a:	4b65      	ldr	r3, [pc, #404]	; (167d0 <processOnSMS+0x1a1c>)
   1663c:	2294      	movs	r2, #148	; 0x94
   1663e:	0052      	lsls	r2, r2, #1
   16640:	4694      	mov	ip, r2
   16642:	2208      	movs	r2, #8
   16644:	4690      	mov	r8, r2
   16646:	44b8      	add	r8, r7
   16648:	44c4      	add	ip, r8
   1664a:	4463      	add	r3, ip
   1664c:	781b      	ldrb	r3, [r3, #0]
   1664e:	2b00      	cmp	r3, #0
   16650:	d101      	bne.n	16656 <processOnSMS+0x18a2>
   16652:	f000 fc63 	bl	16f1c <processOnSMS+0x2168>
					{
						strcpy(resep_msg,"NO CALL SETTING OFF");
   16656:	230c      	movs	r3, #12
   16658:	2208      	movs	r2, #8
   1665a:	4694      	mov	ip, r2
   1665c:	44bc      	add	ip, r7
   1665e:	4463      	add	r3, ip
   16660:	4a5c      	ldr	r2, [pc, #368]	; (167d4 <processOnSMS+0x1a20>)
   16662:	ca13      	ldmia	r2!, {r0, r1, r4}
   16664:	c313      	stmia	r3!, {r0, r1, r4}
   16666:	ca03      	ldmia	r2!, {r0, r1}
   16668:	c303      	stmia	r3!, {r0, r1}
					if(response_sms_processed_cmd)
   1666a:	f000 fc57 	bl	16f1c <processOnSMS+0x2168>
					}
				}
				else
				{
					saveNoCallSettings(true,startHH,startMM,stopHH,stopMM);
   1666e:	230e      	movs	r3, #14
   16670:	33ff      	adds	r3, #255	; 0xff
   16672:	2208      	movs	r2, #8
   16674:	4694      	mov	ip, r2
   16676:	44bc      	add	ip, r7
   16678:	4463      	add	r3, ip
   1667a:	7818      	ldrb	r0, [r3, #0]
   1667c:	2387      	movs	r3, #135	; 0x87
   1667e:	005b      	lsls	r3, r3, #1
   16680:	2208      	movs	r2, #8
   16682:	4694      	mov	ip, r2
   16684:	44bc      	add	ip, r7
   16686:	4463      	add	r3, ip
   16688:	781a      	ldrb	r2, [r3, #0]
   1668a:	2310      	movs	r3, #16
   1668c:	33ff      	adds	r3, #255	; 0xff
   1668e:	2108      	movs	r1, #8
   16690:	468c      	mov	ip, r1
   16692:	44bc      	add	ip, r7
   16694:	4463      	add	r3, ip
   16696:	7819      	ldrb	r1, [r3, #0]
   16698:	2386      	movs	r3, #134	; 0x86
   1669a:	005b      	lsls	r3, r3, #1
   1669c:	2408      	movs	r4, #8
   1669e:	46a4      	mov	ip, r4
   166a0:	44bc      	add	ip, r7
   166a2:	4463      	add	r3, ip
   166a4:	781b      	ldrb	r3, [r3, #0]
   166a6:	9300      	str	r3, [sp, #0]
   166a8:	0003      	movs	r3, r0
   166aa:	2001      	movs	r0, #1
   166ac:	4c47      	ldr	r4, [pc, #284]	; (167cc <processOnSMS+0x1a18>)
   166ae:	47a0      	blx	r4
					if(response_sms_processed_cmd)
   166b0:	4b47      	ldr	r3, [pc, #284]	; (167d0 <processOnSMS+0x1a1c>)
   166b2:	2294      	movs	r2, #148	; 0x94
   166b4:	0052      	lsls	r2, r2, #1
   166b6:	4694      	mov	ip, r2
   166b8:	2208      	movs	r2, #8
   166ba:	4690      	mov	r8, r2
   166bc:	44b8      	add	r8, r7
   166be:	44c4      	add	ip, r8
   166c0:	4463      	add	r3, ip
   166c2:	781b      	ldrb	r3, [r3, #0]
   166c4:	2b00      	cmp	r3, #0
   166c6:	d101      	bne.n	166cc <processOnSMS+0x1918>
   166c8:	f000 fc28 	bl	16f1c <processOnSMS+0x2168>
					{
						strcpy(resep_msg,"NO CALL TIMINGS SET");
   166cc:	230c      	movs	r3, #12
   166ce:	2208      	movs	r2, #8
   166d0:	4694      	mov	ip, r2
   166d2:	44bc      	add	ip, r7
   166d4:	4463      	add	r3, ip
   166d6:	4a40      	ldr	r2, [pc, #256]	; (167d8 <processOnSMS+0x1a24>)
   166d8:	ca13      	ldmia	r2!, {r0, r1, r4}
   166da:	c313      	stmia	r3!, {r0, r1, r4}
   166dc:	ca03      	ldmia	r2!, {r0, r1}
   166de:	c303      	stmia	r3!, {r0, r1}
   166e0:	f000 fc1c 	bl	16f1c <processOnSMS+0x2168>
					}
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"STAGE"))
   166e4:	4a3d      	ldr	r2, [pc, #244]	; (167dc <processOnSMS+0x1a28>)
   166e6:	68fb      	ldr	r3, [r7, #12]
   166e8:	0011      	movs	r1, r2
   166ea:	0018      	movs	r0, r3
   166ec:	4b31      	ldr	r3, [pc, #196]	; (167b4 <processOnSMS+0x1a00>)
   166ee:	4798      	blx	r3
   166f0:	1e03      	subs	r3, r0, #0
   166f2:	d100      	bne.n	166f6 <processOnSMS+0x1942>
   166f4:	e07e      	b.n	167f4 <processOnSMS+0x1a40>
	{
		memmove(received_command,received_command+5,strlen(received_command));
   166f6:	68fb      	ldr	r3, [r7, #12]
   166f8:	1d5c      	adds	r4, r3, #5
   166fa:	68fb      	ldr	r3, [r7, #12]
   166fc:	0018      	movs	r0, r3
   166fe:	4b38      	ldr	r3, [pc, #224]	; (167e0 <processOnSMS+0x1a2c>)
   16700:	4798      	blx	r3
   16702:	0002      	movs	r2, r0
   16704:	68fb      	ldr	r3, [r7, #12]
   16706:	0021      	movs	r1, r4
   16708:	0018      	movs	r0, r3
   1670a:	4b36      	ldr	r3, [pc, #216]	; (167e4 <processOnSMS+0x1a30>)
   1670c:	4798      	blx	r3
		uint16_t stageLevel = atoi(received_command);
   1670e:	68fb      	ldr	r3, [r7, #12]
   16710:	0018      	movs	r0, r3
   16712:	4b2d      	ldr	r3, [pc, #180]	; (167c8 <processOnSMS+0x1a14>)
   16714:	4798      	blx	r3
   16716:	0002      	movs	r2, r0
   16718:	2390      	movs	r3, #144	; 0x90
   1671a:	005b      	lsls	r3, r3, #1
   1671c:	2108      	movs	r1, #8
   1671e:	468c      	mov	ip, r1
   16720:	44bc      	add	ip, r7
   16722:	4463      	add	r3, ip
   16724:	801a      	strh	r2, [r3, #0]
		if (stageLevel < 0) stageLevel = 0;
		if (stageLevel > 5) stageLevel = 5;
   16726:	2390      	movs	r3, #144	; 0x90
   16728:	005b      	lsls	r3, r3, #1
   1672a:	2208      	movs	r2, #8
   1672c:	4694      	mov	ip, r2
   1672e:	44bc      	add	ip, r7
   16730:	4463      	add	r3, ip
   16732:	881b      	ldrh	r3, [r3, #0]
   16734:	2b05      	cmp	r3, #5
   16736:	d907      	bls.n	16748 <processOnSMS+0x1994>
   16738:	2390      	movs	r3, #144	; 0x90
   1673a:	005b      	lsls	r3, r3, #1
   1673c:	2208      	movs	r2, #8
   1673e:	4694      	mov	ip, r2
   16740:	44bc      	add	ip, r7
   16742:	4463      	add	r3, ip
   16744:	2205      	movs	r2, #5
   16746:	801a      	strh	r2, [r3, #0]
		saveEventStageSettings(stageLevel);  //Store in EEPROM the EVENT STAGE
   16748:	2390      	movs	r3, #144	; 0x90
   1674a:	005b      	lsls	r3, r3, #1
   1674c:	2208      	movs	r2, #8
   1674e:	4694      	mov	ip, r2
   16750:	44bc      	add	ip, r7
   16752:	4463      	add	r3, ip
   16754:	881b      	ldrh	r3, [r3, #0]
   16756:	b2db      	uxtb	r3, r3
   16758:	0018      	movs	r0, r3
   1675a:	4b23      	ldr	r3, [pc, #140]	; (167e8 <processOnSMS+0x1a34>)
   1675c:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   1675e:	2328      	movs	r3, #40	; 0x28
   16760:	33ff      	adds	r3, #255	; 0xff
   16762:	2208      	movs	r2, #8
   16764:	4694      	mov	ip, r2
   16766:	44bc      	add	ip, r7
   16768:	4463      	add	r3, ip
   1676a:	2201      	movs	r2, #1
   1676c:	701a      	strb	r2, [r3, #0]
		
		if(response_sms_processed_cmd)
   1676e:	4b18      	ldr	r3, [pc, #96]	; (167d0 <processOnSMS+0x1a1c>)
   16770:	2294      	movs	r2, #148	; 0x94
   16772:	0052      	lsls	r2, r2, #1
   16774:	4694      	mov	ip, r2
   16776:	2208      	movs	r2, #8
   16778:	4690      	mov	r8, r2
   1677a:	44b8      	add	r8, r7
   1677c:	44c4      	add	ip, r8
   1677e:	4463      	add	r3, ip
   16780:	781b      	ldrb	r3, [r3, #0]
   16782:	2b00      	cmp	r3, #0
   16784:	d101      	bne.n	1678a <processOnSMS+0x19d6>
   16786:	f000 fbc9 	bl	16f1c <processOnSMS+0x2168>
		{
			sprintf(resep_msg,"CALL STAGE SET TO : %d", stageLevel);
   1678a:	2390      	movs	r3, #144	; 0x90
   1678c:	005b      	lsls	r3, r3, #1
   1678e:	2208      	movs	r2, #8
   16790:	4694      	mov	ip, r2
   16792:	44bc      	add	ip, r7
   16794:	4463      	add	r3, ip
   16796:	881a      	ldrh	r2, [r3, #0]
   16798:	4914      	ldr	r1, [pc, #80]	; (167ec <processOnSMS+0x1a38>)
   1679a:	230c      	movs	r3, #12
   1679c:	2008      	movs	r0, #8
   1679e:	4684      	mov	ip, r0
   167a0:	44bc      	add	ip, r7
   167a2:	4463      	add	r3, ip
   167a4:	0018      	movs	r0, r3
   167a6:	4b12      	ldr	r3, [pc, #72]	; (167f0 <processOnSMS+0x1a3c>)
   167a8:	4798      	blx	r3
   167aa:	f000 fbb7 	bl	16f1c <processOnSMS+0x2168>
   167ae:	46c0      	nop			; (mov r8, r8)
   167b0:	0002a574 	.word	0x0002a574
   167b4:	00014015 	.word	0x00014015
   167b8:	0002a57c 	.word	0x0002a57c
   167bc:	0002a584 	.word	0x0002a584
   167c0:	00029205 	.word	0x00029205
   167c4:	0002a588 	.word	0x0002a588
   167c8:	00028df9 	.word	0x00028df9
   167cc:	000113d5 	.word	0x000113d5
   167d0:	fffffeda 	.word	0xfffffeda
   167d4:	0002a548 	.word	0x0002a548
   167d8:	0002a58c 	.word	0x0002a58c
   167dc:	0002a5a0 	.word	0x0002a5a0
   167e0:	000291a3 	.word	0x000291a3
   167e4:	00028eef 	.word	0x00028eef
   167e8:	00011a1d 	.word	0x00011a1d
   167ec:	0002a5a8 	.word	0x0002a5a8
   167f0:	00029119 	.word	0x00029119
		}
	}
	else if (StringstartsWith(received_command,"STARTIME"))
   167f4:	4aa5      	ldr	r2, [pc, #660]	; (16a8c <processOnSMS+0x1cd8>)
   167f6:	68fb      	ldr	r3, [r7, #12]
   167f8:	0011      	movs	r1, r2
   167fa:	0018      	movs	r0, r3
   167fc:	4ba4      	ldr	r3, [pc, #656]	; (16a90 <processOnSMS+0x1cdc>)
   167fe:	4798      	blx	r3
   16800:	1e03      	subs	r3, r0, #0
   16802:	d06b      	beq.n	168dc <processOnSMS+0x1b28>
	{
		memmove(received_command,received_command+8,strlen(received_command));
   16804:	68fb      	ldr	r3, [r7, #12]
   16806:	3308      	adds	r3, #8
   16808:	001c      	movs	r4, r3
   1680a:	68fb      	ldr	r3, [r7, #12]
   1680c:	0018      	movs	r0, r3
   1680e:	4ba1      	ldr	r3, [pc, #644]	; (16a94 <processOnSMS+0x1ce0>)
   16810:	4798      	blx	r3
   16812:	0002      	movs	r2, r0
   16814:	68fb      	ldr	r3, [r7, #12]
   16816:	0021      	movs	r1, r4
   16818:	0018      	movs	r0, r3
   1681a:	4b9f      	ldr	r3, [pc, #636]	; (16a98 <processOnSMS+0x1ce4>)
   1681c:	4798      	blx	r3
		uint16_t STARTIME = atoi(received_command);
   1681e:	68fb      	ldr	r3, [r7, #12]
   16820:	0018      	movs	r0, r3
   16822:	4b9e      	ldr	r3, [pc, #632]	; (16a9c <processOnSMS+0x1ce8>)
   16824:	4798      	blx	r3
   16826:	0002      	movs	r2, r0
   16828:	238f      	movs	r3, #143	; 0x8f
   1682a:	005b      	lsls	r3, r3, #1
   1682c:	2108      	movs	r1, #8
   1682e:	468c      	mov	ip, r1
   16830:	44bc      	add	ip, r7
   16832:	4463      	add	r3, ip
   16834:	801a      	strh	r2, [r3, #0]
		if (STARTIME < 2)
   16836:	238f      	movs	r3, #143	; 0x8f
   16838:	005b      	lsls	r3, r3, #1
   1683a:	2208      	movs	r2, #8
   1683c:	4694      	mov	ip, r2
   1683e:	44bc      	add	ip, r7
   16840:	4463      	add	r3, ip
   16842:	881b      	ldrh	r3, [r3, #0]
   16844:	2b01      	cmp	r3, #1
   16846:	d807      	bhi.n	16858 <processOnSMS+0x1aa4>
		{
			STARTIME = 2;
   16848:	238f      	movs	r3, #143	; 0x8f
   1684a:	005b      	lsls	r3, r3, #1
   1684c:	2208      	movs	r2, #8
   1684e:	4694      	mov	ip, r2
   16850:	44bc      	add	ip, r7
   16852:	4463      	add	r3, ip
   16854:	2202      	movs	r2, #2
   16856:	801a      	strh	r2, [r3, #0]
		}
		if (STARTIME > 65000)
   16858:	238f      	movs	r3, #143	; 0x8f
   1685a:	005b      	lsls	r3, r3, #1
   1685c:	2208      	movs	r2, #8
   1685e:	4694      	mov	ip, r2
   16860:	44bc      	add	ip, r7
   16862:	4463      	add	r3, ip
   16864:	881b      	ldrh	r3, [r3, #0]
   16866:	4a8e      	ldr	r2, [pc, #568]	; (16aa0 <processOnSMS+0x1cec>)
   16868:	4293      	cmp	r3, r2
   1686a:	d907      	bls.n	1687c <processOnSMS+0x1ac8>
		{
			STARTIME = 65000;
   1686c:	238f      	movs	r3, #143	; 0x8f
   1686e:	005b      	lsls	r3, r3, #1
   16870:	2208      	movs	r2, #8
   16872:	4694      	mov	ip, r2
   16874:	44bc      	add	ip, r7
   16876:	4463      	add	r3, ip
   16878:	4a8a      	ldr	r2, [pc, #552]	; (16aa4 <processOnSMS+0x1cf0>)
   1687a:	801a      	strh	r2, [r3, #0]
		}
		saveStarDeltaTimer(STARTIME);
   1687c:	238f      	movs	r3, #143	; 0x8f
   1687e:	005b      	lsls	r3, r3, #1
   16880:	2208      	movs	r2, #8
   16882:	4694      	mov	ip, r2
   16884:	44bc      	add	ip, r7
   16886:	4463      	add	r3, ip
   16888:	881b      	ldrh	r3, [r3, #0]
   1688a:	0018      	movs	r0, r3
   1688c:	4b86      	ldr	r3, [pc, #536]	; (16aa8 <processOnSMS+0x1cf4>)
   1688e:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   16890:	2328      	movs	r3, #40	; 0x28
   16892:	33ff      	adds	r3, #255	; 0xff
   16894:	2208      	movs	r2, #8
   16896:	4694      	mov	ip, r2
   16898:	44bc      	add	ip, r7
   1689a:	4463      	add	r3, ip
   1689c:	2201      	movs	r2, #1
   1689e:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   168a0:	4b82      	ldr	r3, [pc, #520]	; (16aac <processOnSMS+0x1cf8>)
   168a2:	2294      	movs	r2, #148	; 0x94
   168a4:	0052      	lsls	r2, r2, #1
   168a6:	4694      	mov	ip, r2
   168a8:	2208      	movs	r2, #8
   168aa:	4690      	mov	r8, r2
   168ac:	44b8      	add	r8, r7
   168ae:	44c4      	add	ip, r8
   168b0:	4463      	add	r3, ip
   168b2:	781b      	ldrb	r3, [r3, #0]
   168b4:	2b00      	cmp	r3, #0
   168b6:	d100      	bne.n	168ba <processOnSMS+0x1b06>
   168b8:	e330      	b.n	16f1c <processOnSMS+0x2168>
		{
			sprintf(resep_msg," STARTIME SET TO : %d",STARTIME);
   168ba:	238f      	movs	r3, #143	; 0x8f
   168bc:	005b      	lsls	r3, r3, #1
   168be:	2208      	movs	r2, #8
   168c0:	4694      	mov	ip, r2
   168c2:	44bc      	add	ip, r7
   168c4:	4463      	add	r3, ip
   168c6:	881a      	ldrh	r2, [r3, #0]
   168c8:	4979      	ldr	r1, [pc, #484]	; (16ab0 <processOnSMS+0x1cfc>)
   168ca:	230c      	movs	r3, #12
   168cc:	2008      	movs	r0, #8
   168ce:	4684      	mov	ip, r0
   168d0:	44bc      	add	ip, r7
   168d2:	4463      	add	r3, ip
   168d4:	0018      	movs	r0, r3
   168d6:	4b77      	ldr	r3, [pc, #476]	; (16ab4 <processOnSMS+0x1d00>)
   168d8:	4798      	blx	r3
   168da:	e31f      	b.n	16f1c <processOnSMS+0x2168>
		}
	}
	else if (StringstartsWith(received_command,"AUTOTIME"))
   168dc:	4a76      	ldr	r2, [pc, #472]	; (16ab8 <processOnSMS+0x1d04>)
   168de:	68fb      	ldr	r3, [r7, #12]
   168e0:	0011      	movs	r1, r2
   168e2:	0018      	movs	r0, r3
   168e4:	4b6a      	ldr	r3, [pc, #424]	; (16a90 <processOnSMS+0x1cdc>)
   168e6:	4798      	blx	r3
   168e8:	1e03      	subs	r3, r0, #0
   168ea:	d06d      	beq.n	169c8 <processOnSMS+0x1c14>
	{
		memmove(received_command,received_command+8,strlen(received_command));
   168ec:	68fb      	ldr	r3, [r7, #12]
   168ee:	3308      	adds	r3, #8
   168f0:	001c      	movs	r4, r3
   168f2:	68fb      	ldr	r3, [r7, #12]
   168f4:	0018      	movs	r0, r3
   168f6:	4b67      	ldr	r3, [pc, #412]	; (16a94 <processOnSMS+0x1ce0>)
   168f8:	4798      	blx	r3
   168fa:	0002      	movs	r2, r0
   168fc:	68fb      	ldr	r3, [r7, #12]
   168fe:	0021      	movs	r1, r4
   16900:	0018      	movs	r0, r3
   16902:	4b65      	ldr	r3, [pc, #404]	; (16a98 <processOnSMS+0x1ce4>)
   16904:	4798      	blx	r3
		uint16_t AUTOTIME = atoi(received_command);
   16906:	68fb      	ldr	r3, [r7, #12]
   16908:	0018      	movs	r0, r3
   1690a:	4b64      	ldr	r3, [pc, #400]	; (16a9c <processOnSMS+0x1ce8>)
   1690c:	4798      	blx	r3
   1690e:	0002      	movs	r2, r0
   16910:	238e      	movs	r3, #142	; 0x8e
   16912:	005b      	lsls	r3, r3, #1
   16914:	2108      	movs	r1, #8
   16916:	468c      	mov	ip, r1
   16918:	44bc      	add	ip, r7
   1691a:	4463      	add	r3, ip
   1691c:	801a      	strh	r2, [r3, #0]
		if (AUTOTIME < 50)
   1691e:	238e      	movs	r3, #142	; 0x8e
   16920:	005b      	lsls	r3, r3, #1
   16922:	2208      	movs	r2, #8
   16924:	4694      	mov	ip, r2
   16926:	44bc      	add	ip, r7
   16928:	4463      	add	r3, ip
   1692a:	881b      	ldrh	r3, [r3, #0]
   1692c:	2b31      	cmp	r3, #49	; 0x31
   1692e:	d807      	bhi.n	16940 <processOnSMS+0x1b8c>
		{
			AUTOTIME = 50;
   16930:	238e      	movs	r3, #142	; 0x8e
   16932:	005b      	lsls	r3, r3, #1
   16934:	2208      	movs	r2, #8
   16936:	4694      	mov	ip, r2
   16938:	44bc      	add	ip, r7
   1693a:	4463      	add	r3, ip
   1693c:	2232      	movs	r2, #50	; 0x32
   1693e:	801a      	strh	r2, [r3, #0]
		}
		if (AUTOTIME > 28800)
   16940:	238e      	movs	r3, #142	; 0x8e
   16942:	005b      	lsls	r3, r3, #1
   16944:	2208      	movs	r2, #8
   16946:	4694      	mov	ip, r2
   16948:	44bc      	add	ip, r7
   1694a:	4463      	add	r3, ip
   1694c:	881a      	ldrh	r2, [r3, #0]
   1694e:	23e1      	movs	r3, #225	; 0xe1
   16950:	01db      	lsls	r3, r3, #7
   16952:	429a      	cmp	r2, r3
   16954:	d908      	bls.n	16968 <processOnSMS+0x1bb4>
		{
			AUTOTIME = 28800;
   16956:	238e      	movs	r3, #142	; 0x8e
   16958:	005b      	lsls	r3, r3, #1
   1695a:	2208      	movs	r2, #8
   1695c:	4694      	mov	ip, r2
   1695e:	44bc      	add	ip, r7
   16960:	4463      	add	r3, ip
   16962:	22e1      	movs	r2, #225	; 0xe1
   16964:	01d2      	lsls	r2, r2, #7
   16966:	801a      	strh	r2, [r3, #0]
		}
		saveAutoStartTimeSettings(AUTOTIME);
   16968:	238e      	movs	r3, #142	; 0x8e
   1696a:	005b      	lsls	r3, r3, #1
   1696c:	2208      	movs	r2, #8
   1696e:	4694      	mov	ip, r2
   16970:	44bc      	add	ip, r7
   16972:	4463      	add	r3, ip
   16974:	881b      	ldrh	r3, [r3, #0]
   16976:	0018      	movs	r0, r3
   16978:	4b50      	ldr	r3, [pc, #320]	; (16abc <processOnSMS+0x1d08>)
   1697a:	4798      	blx	r3
		incomingSMSProcessed=true;
   1697c:	2328      	movs	r3, #40	; 0x28
   1697e:	33ff      	adds	r3, #255	; 0xff
   16980:	2208      	movs	r2, #8
   16982:	4694      	mov	ip, r2
   16984:	44bc      	add	ip, r7
   16986:	4463      	add	r3, ip
   16988:	2201      	movs	r2, #1
   1698a:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   1698c:	4b47      	ldr	r3, [pc, #284]	; (16aac <processOnSMS+0x1cf8>)
   1698e:	2294      	movs	r2, #148	; 0x94
   16990:	0052      	lsls	r2, r2, #1
   16992:	4694      	mov	ip, r2
   16994:	2208      	movs	r2, #8
   16996:	4690      	mov	r8, r2
   16998:	44b8      	add	r8, r7
   1699a:	44c4      	add	ip, r8
   1699c:	4463      	add	r3, ip
   1699e:	781b      	ldrb	r3, [r3, #0]
   169a0:	2b00      	cmp	r3, #0
   169a2:	d100      	bne.n	169a6 <processOnSMS+0x1bf2>
   169a4:	e2ba      	b.n	16f1c <processOnSMS+0x2168>
		{
			sprintf(resep_msg," AUTOTIME SET TO : %d",AUTOTIME);
   169a6:	238e      	movs	r3, #142	; 0x8e
   169a8:	005b      	lsls	r3, r3, #1
   169aa:	2208      	movs	r2, #8
   169ac:	4694      	mov	ip, r2
   169ae:	44bc      	add	ip, r7
   169b0:	4463      	add	r3, ip
   169b2:	881a      	ldrh	r2, [r3, #0]
   169b4:	4942      	ldr	r1, [pc, #264]	; (16ac0 <processOnSMS+0x1d0c>)
   169b6:	230c      	movs	r3, #12
   169b8:	2008      	movs	r0, #8
   169ba:	4684      	mov	ip, r0
   169bc:	44bc      	add	ip, r7
   169be:	4463      	add	r3, ip
   169c0:	0018      	movs	r0, r3
   169c2:	4b3c      	ldr	r3, [pc, #240]	; (16ab4 <processOnSMS+0x1d00>)
   169c4:	4798      	blx	r3
   169c6:	e2a9      	b.n	16f1c <processOnSMS+0x2168>
		}
	}
	else if (StringstartsWith(received_command,"BAL"))
   169c8:	4a3e      	ldr	r2, [pc, #248]	; (16ac4 <processOnSMS+0x1d10>)
   169ca:	68fb      	ldr	r3, [r7, #12]
   169cc:	0011      	movs	r1, r2
   169ce:	0018      	movs	r0, r3
   169d0:	4b2f      	ldr	r3, [pc, #188]	; (16a90 <processOnSMS+0x1cdc>)
   169d2:	4798      	blx	r3
   169d4:	1e03      	subs	r3, r0, #0
   169d6:	d000      	beq.n	169da <processOnSMS+0x1c26>
   169d8:	e2a0      	b.n	16f1c <processOnSMS+0x2168>
		// The received sms will be like BAL*141# for vodafone
		// We need to extract the URC number and check the balance, and send it to user
		//todo: implement mechanism to check current balance of sim card
		
	}
	else if(StringstartsWith(received_command,"MP+"))
   169da:	4a3b      	ldr	r2, [pc, #236]	; (16ac8 <processOnSMS+0x1d14>)
   169dc:	68fb      	ldr	r3, [r7, #12]
   169de:	0011      	movs	r1, r2
   169e0:	0018      	movs	r0, r3
   169e2:	4b2b      	ldr	r3, [pc, #172]	; (16a90 <processOnSMS+0x1cdc>)
   169e4:	4798      	blx	r3
   169e6:	1e03      	subs	r3, r0, #0
   169e8:	d023      	beq.n	16a32 <processOnSMS+0x1c7e>
	{
		memmove(received_command,received_command+3,strlen(received_command));
   169ea:	68fb      	ldr	r3, [r7, #12]
   169ec:	1cdc      	adds	r4, r3, #3
   169ee:	68fb      	ldr	r3, [r7, #12]
   169f0:	0018      	movs	r0, r3
   169f2:	4b28      	ldr	r3, [pc, #160]	; (16a94 <processOnSMS+0x1ce0>)
   169f4:	4798      	blx	r3
   169f6:	0002      	movs	r2, r0
   169f8:	68fb      	ldr	r3, [r7, #12]
   169fa:	0021      	movs	r1, r4
   169fc:	0018      	movs	r0, r3
   169fe:	4b26      	ldr	r3, [pc, #152]	; (16a98 <processOnSMS+0x1ce4>)
   16a00:	4798      	blx	r3
		if(addPrimaryIndexedNumber(received_command))
   16a02:	68fb      	ldr	r3, [r7, #12]
   16a04:	0018      	movs	r0, r3
   16a06:	4b31      	ldr	r3, [pc, #196]	; (16acc <processOnSMS+0x1d18>)
   16a08:	4798      	blx	r3
   16a0a:	1e03      	subs	r3, r0, #0
   16a0c:	d100      	bne.n	16a10 <processOnSMS+0x1c5c>
   16a0e:	e285      	b.n	16f1c <processOnSMS+0x2168>
		{
			incomingSMSProcessed=true;
   16a10:	2328      	movs	r3, #40	; 0x28
   16a12:	33ff      	adds	r3, #255	; 0xff
   16a14:	2208      	movs	r2, #8
   16a16:	4694      	mov	ip, r2
   16a18:	44bc      	add	ip, r7
   16a1a:	4463      	add	r3, ip
   16a1c:	2201      	movs	r2, #1
   16a1e:	701a      	strb	r2, [r3, #0]
			strcpy(resep_msg,"P NO ADDDED");
   16a20:	230c      	movs	r3, #12
   16a22:	2208      	movs	r2, #8
   16a24:	4694      	mov	ip, r2
   16a26:	44bc      	add	ip, r7
   16a28:	4463      	add	r3, ip
   16a2a:	4a29      	ldr	r2, [pc, #164]	; (16ad0 <processOnSMS+0x1d1c>)
   16a2c:	ca13      	ldmia	r2!, {r0, r1, r4}
   16a2e:	c313      	stmia	r3!, {r0, r1, r4}
   16a30:	e274      	b.n	16f1c <processOnSMS+0x2168>
		}
	}
	else if(StringstartsWith(received_command,"MS+"))
   16a32:	4a28      	ldr	r2, [pc, #160]	; (16ad4 <processOnSMS+0x1d20>)
   16a34:	68fb      	ldr	r3, [r7, #12]
   16a36:	0011      	movs	r1, r2
   16a38:	0018      	movs	r0, r3
   16a3a:	4b15      	ldr	r3, [pc, #84]	; (16a90 <processOnSMS+0x1cdc>)
   16a3c:	4798      	blx	r3
   16a3e:	1e03      	subs	r3, r0, #0
   16a40:	d04e      	beq.n	16ae0 <processOnSMS+0x1d2c>
	{
		memmove(received_command,received_command+3,strlen(received_command));
   16a42:	68fb      	ldr	r3, [r7, #12]
   16a44:	1cdc      	adds	r4, r3, #3
   16a46:	68fb      	ldr	r3, [r7, #12]
   16a48:	0018      	movs	r0, r3
   16a4a:	4b12      	ldr	r3, [pc, #72]	; (16a94 <processOnSMS+0x1ce0>)
   16a4c:	4798      	blx	r3
   16a4e:	0002      	movs	r2, r0
   16a50:	68fb      	ldr	r3, [r7, #12]
   16a52:	0021      	movs	r1, r4
   16a54:	0018      	movs	r0, r3
   16a56:	4b10      	ldr	r3, [pc, #64]	; (16a98 <processOnSMS+0x1ce4>)
   16a58:	4798      	blx	r3
		if(addSecondaryIndexedNumber(received_command))
   16a5a:	68fb      	ldr	r3, [r7, #12]
   16a5c:	0018      	movs	r0, r3
   16a5e:	4b1e      	ldr	r3, [pc, #120]	; (16ad8 <processOnSMS+0x1d24>)
   16a60:	4798      	blx	r3
   16a62:	1e03      	subs	r3, r0, #0
   16a64:	d100      	bne.n	16a68 <processOnSMS+0x1cb4>
   16a66:	e259      	b.n	16f1c <processOnSMS+0x2168>
		{
			incomingSMSProcessed=true;
   16a68:	2328      	movs	r3, #40	; 0x28
   16a6a:	33ff      	adds	r3, #255	; 0xff
   16a6c:	2208      	movs	r2, #8
   16a6e:	4694      	mov	ip, r2
   16a70:	44bc      	add	ip, r7
   16a72:	4463      	add	r3, ip
   16a74:	2201      	movs	r2, #1
   16a76:	701a      	strb	r2, [r3, #0]
			strcpy(resep_msg,"S NO ADDDED");
   16a78:	230c      	movs	r3, #12
   16a7a:	2208      	movs	r2, #8
   16a7c:	4694      	mov	ip, r2
   16a7e:	44bc      	add	ip, r7
   16a80:	4463      	add	r3, ip
   16a82:	4a16      	ldr	r2, [pc, #88]	; (16adc <processOnSMS+0x1d28>)
   16a84:	ca13      	ldmia	r2!, {r0, r1, r4}
   16a86:	c313      	stmia	r3!, {r0, r1, r4}
   16a88:	e248      	b.n	16f1c <processOnSMS+0x2168>
   16a8a:	46c0      	nop			; (mov r8, r8)
   16a8c:	0002a5c0 	.word	0x0002a5c0
   16a90:	00014015 	.word	0x00014015
   16a94:	000291a3 	.word	0x000291a3
   16a98:	00028eef 	.word	0x00028eef
   16a9c:	00028df9 	.word	0x00028df9
   16aa0:	0000fde8 	.word	0x0000fde8
   16aa4:	fffffde8 	.word	0xfffffde8
   16aa8:	000119d1 	.word	0x000119d1
   16aac:	fffffeda 	.word	0xfffffeda
   16ab0:	0002a5cc 	.word	0x0002a5cc
   16ab4:	00029119 	.word	0x00029119
   16ab8:	0002a5e4 	.word	0x0002a5e4
   16abc:	000112f1 	.word	0x000112f1
   16ac0:	0002a5f0 	.word	0x0002a5f0
   16ac4:	0002a608 	.word	0x0002a608
   16ac8:	0002a60c 	.word	0x0002a60c
   16acc:	00011b9d 	.word	0x00011b9d
   16ad0:	0002a610 	.word	0x0002a610
   16ad4:	0002a61c 	.word	0x0002a61c
   16ad8:	00011c49 	.word	0x00011c49
   16adc:	0002a620 	.word	0x0002a620
		}
	}
	else if (StringstartsWith(received_command,"M+"))
   16ae0:	4adb      	ldr	r2, [pc, #876]	; (16e50 <processOnSMS+0x209c>)
   16ae2:	68fb      	ldr	r3, [r7, #12]
   16ae4:	0011      	movs	r1, r2
   16ae6:	0018      	movs	r0, r3
   16ae8:	4bda      	ldr	r3, [pc, #872]	; (16e54 <processOnSMS+0x20a0>)
   16aea:	4798      	blx	r3
   16aec:	1e03      	subs	r3, r0, #0
   16aee:	d100      	bne.n	16af2 <processOnSMS+0x1d3e>
   16af0:	e091      	b.n	16c16 <processOnSMS+0x1e62>
	{
		memmove(received_command,received_command+2,strlen(received_command));
   16af2:	68fb      	ldr	r3, [r7, #12]
   16af4:	1c9c      	adds	r4, r3, #2
   16af6:	68fb      	ldr	r3, [r7, #12]
   16af8:	0018      	movs	r0, r3
   16afa:	4bd7      	ldr	r3, [pc, #860]	; (16e58 <processOnSMS+0x20a4>)
   16afc:	4798      	blx	r3
   16afe:	0002      	movs	r2, r0
   16b00:	68fb      	ldr	r3, [r7, #12]
   16b02:	0021      	movs	r1, r4
   16b04:	0018      	movs	r0, r3
   16b06:	4bd5      	ldr	r3, [pc, #852]	; (16e5c <processOnSMS+0x20a8>)
   16b08:	4798      	blx	r3
		bool result = addNumber(received_command);
   16b0a:	230c      	movs	r3, #12
   16b0c:	33ff      	adds	r3, #255	; 0xff
   16b0e:	2208      	movs	r2, #8
   16b10:	18ba      	adds	r2, r7, r2
   16b12:	18d4      	adds	r4, r2, r3
   16b14:	68fb      	ldr	r3, [r7, #12]
   16b16:	0018      	movs	r0, r3
   16b18:	4bd1      	ldr	r3, [pc, #836]	; (16e60 <processOnSMS+0x20ac>)
   16b1a:	4798      	blx	r3
   16b1c:	0003      	movs	r3, r0
   16b1e:	7023      	strb	r3, [r4, #0]
		if(result)
   16b20:	230c      	movs	r3, #12
   16b22:	33ff      	adds	r3, #255	; 0xff
   16b24:	2208      	movs	r2, #8
   16b26:	4694      	mov	ip, r2
   16b28:	44bc      	add	ip, r7
   16b2a:	4463      	add	r3, ip
   16b2c:	781b      	ldrb	r3, [r3, #0]
   16b2e:	2b00      	cmp	r3, #0
   16b30:	d100      	bne.n	16b34 <processOnSMS+0x1d80>
   16b32:	e1f3      	b.n	16f1c <processOnSMS+0x2168>
		{
			incomingSMSProcessed=true;
   16b34:	2328      	movs	r3, #40	; 0x28
   16b36:	33ff      	adds	r3, #255	; 0xff
   16b38:	2208      	movs	r2, #8
   16b3a:	4694      	mov	ip, r2
   16b3c:	44bc      	add	ip, r7
   16b3e:	4463      	add	r3, ip
   16b40:	2201      	movs	r2, #1
   16b42:	701a      	strb	r2, [r3, #0]
			if (response_sms_processed_cmd == true)
   16b44:	4bc7      	ldr	r3, [pc, #796]	; (16e64 <processOnSMS+0x20b0>)
   16b46:	2294      	movs	r2, #148	; 0x94
   16b48:	0052      	lsls	r2, r2, #1
   16b4a:	4694      	mov	ip, r2
   16b4c:	2208      	movs	r2, #8
   16b4e:	4690      	mov	r8, r2
   16b50:	44b8      	add	r8, r7
   16b52:	44c4      	add	ip, r8
   16b54:	4463      	add	r3, ip
   16b56:	781b      	ldrb	r3, [r3, #0]
   16b58:	2b00      	cmp	r3, #0
   16b5a:	d100      	bne.n	16b5e <processOnSMS+0x1daa>
   16b5c:	e1de      	b.n	16f1c <processOnSMS+0x2168>
			{
				strcpy(resep_msg,"MOBILE NO:");
   16b5e:	230c      	movs	r3, #12
   16b60:	2208      	movs	r2, #8
   16b62:	4694      	mov	ip, r2
   16b64:	44bc      	add	ip, r7
   16b66:	4463      	add	r3, ip
   16b68:	4abf      	ldr	r2, [pc, #764]	; (16e68 <processOnSMS+0x20b4>)
   16b6a:	ca03      	ldmia	r2!, {r0, r1}
   16b6c:	c303      	stmia	r3!, {r0, r1}
   16b6e:	8811      	ldrh	r1, [r2, #0]
   16b70:	8019      	strh	r1, [r3, #0]
   16b72:	7892      	ldrb	r2, [r2, #2]
   16b74:	709a      	strb	r2, [r3, #2]
				strcat(resep_msg,"\n");
   16b76:	230c      	movs	r3, #12
   16b78:	2208      	movs	r2, #8
   16b7a:	4694      	mov	ip, r2
   16b7c:	44bc      	add	ip, r7
   16b7e:	4463      	add	r3, ip
   16b80:	0018      	movs	r0, r3
   16b82:	4bb5      	ldr	r3, [pc, #724]	; (16e58 <processOnSMS+0x20a4>)
   16b84:	4798      	blx	r3
   16b86:	0003      	movs	r3, r0
   16b88:	001a      	movs	r2, r3
   16b8a:	230c      	movs	r3, #12
   16b8c:	2108      	movs	r1, #8
   16b8e:	468c      	mov	ip, r1
   16b90:	44bc      	add	ip, r7
   16b92:	4463      	add	r3, ip
   16b94:	189a      	adds	r2, r3, r2
   16b96:	4bb5      	ldr	r3, [pc, #724]	; (16e6c <processOnSMS+0x20b8>)
   16b98:	0010      	movs	r0, r2
   16b9a:	0019      	movs	r1, r3
   16b9c:	2302      	movs	r3, #2
   16b9e:	001a      	movs	r2, r3
   16ba0:	4bb3      	ldr	r3, [pc, #716]	; (16e70 <processOnSMS+0x20bc>)
   16ba2:	4798      	blx	r3
				strcat(resep_msg,received_command);
   16ba4:	68fa      	ldr	r2, [r7, #12]
   16ba6:	230c      	movs	r3, #12
   16ba8:	2108      	movs	r1, #8
   16baa:	468c      	mov	ip, r1
   16bac:	44bc      	add	ip, r7
   16bae:	4463      	add	r3, ip
   16bb0:	0011      	movs	r1, r2
   16bb2:	0018      	movs	r0, r3
   16bb4:	4baf      	ldr	r3, [pc, #700]	; (16e74 <processOnSMS+0x20c0>)
   16bb6:	4798      	blx	r3
				strcat(resep_msg,"\n");
   16bb8:	230c      	movs	r3, #12
   16bba:	2208      	movs	r2, #8
   16bbc:	4694      	mov	ip, r2
   16bbe:	44bc      	add	ip, r7
   16bc0:	4463      	add	r3, ip
   16bc2:	0018      	movs	r0, r3
   16bc4:	4ba4      	ldr	r3, [pc, #656]	; (16e58 <processOnSMS+0x20a4>)
   16bc6:	4798      	blx	r3
   16bc8:	0003      	movs	r3, r0
   16bca:	001a      	movs	r2, r3
   16bcc:	230c      	movs	r3, #12
   16bce:	2108      	movs	r1, #8
   16bd0:	468c      	mov	ip, r1
   16bd2:	44bc      	add	ip, r7
   16bd4:	4463      	add	r3, ip
   16bd6:	189a      	adds	r2, r3, r2
   16bd8:	4ba4      	ldr	r3, [pc, #656]	; (16e6c <processOnSMS+0x20b8>)
   16bda:	0010      	movs	r0, r2
   16bdc:	0019      	movs	r1, r3
   16bde:	2302      	movs	r3, #2
   16be0:	001a      	movs	r2, r3
   16be2:	4ba3      	ldr	r3, [pc, #652]	; (16e70 <processOnSMS+0x20bc>)
   16be4:	4798      	blx	r3
				strcat(resep_msg,"ADDED SUCCESSFULLY");
   16be6:	230c      	movs	r3, #12
   16be8:	2208      	movs	r2, #8
   16bea:	4694      	mov	ip, r2
   16bec:	44bc      	add	ip, r7
   16bee:	4463      	add	r3, ip
   16bf0:	0018      	movs	r0, r3
   16bf2:	4b99      	ldr	r3, [pc, #612]	; (16e58 <processOnSMS+0x20a4>)
   16bf4:	4798      	blx	r3
   16bf6:	0003      	movs	r3, r0
   16bf8:	001a      	movs	r2, r3
   16bfa:	230c      	movs	r3, #12
   16bfc:	2108      	movs	r1, #8
   16bfe:	468c      	mov	ip, r1
   16c00:	44bc      	add	ip, r7
   16c02:	4463      	add	r3, ip
   16c04:	189a      	adds	r2, r3, r2
   16c06:	4b9c      	ldr	r3, [pc, #624]	; (16e78 <processOnSMS+0x20c4>)
   16c08:	0010      	movs	r0, r2
   16c0a:	0019      	movs	r1, r3
   16c0c:	2313      	movs	r3, #19
   16c0e:	001a      	movs	r2, r3
   16c10:	4b97      	ldr	r3, [pc, #604]	; (16e70 <processOnSMS+0x20bc>)
   16c12:	4798      	blx	r3
   16c14:	e182      	b.n	16f1c <processOnSMS+0x2168>
			}
		}
	}
	else if (StringstartsWith(received_command,"M-"))
   16c16:	4a99      	ldr	r2, [pc, #612]	; (16e7c <processOnSMS+0x20c8>)
   16c18:	68fb      	ldr	r3, [r7, #12]
   16c1a:	0011      	movs	r1, r2
   16c1c:	0018      	movs	r0, r3
   16c1e:	4b8d      	ldr	r3, [pc, #564]	; (16e54 <processOnSMS+0x20a0>)
   16c20:	4798      	blx	r3
   16c22:	1e03      	subs	r3, r0, #0
   16c24:	d100      	bne.n	16c28 <processOnSMS+0x1e74>
   16c26:	e091      	b.n	16d4c <processOnSMS+0x1f98>
	{
		memmove(received_command,received_command+2,strlen(received_command));
   16c28:	68fb      	ldr	r3, [r7, #12]
   16c2a:	1c9c      	adds	r4, r3, #2
   16c2c:	68fb      	ldr	r3, [r7, #12]
   16c2e:	0018      	movs	r0, r3
   16c30:	4b89      	ldr	r3, [pc, #548]	; (16e58 <processOnSMS+0x20a4>)
   16c32:	4798      	blx	r3
   16c34:	0002      	movs	r2, r0
   16c36:	68fb      	ldr	r3, [r7, #12]
   16c38:	0021      	movs	r1, r4
   16c3a:	0018      	movs	r0, r3
   16c3c:	4b87      	ldr	r3, [pc, #540]	; (16e5c <processOnSMS+0x20a8>)
   16c3e:	4798      	blx	r3
		bool result = removeNumber(received_command);
   16c40:	2385      	movs	r3, #133	; 0x85
   16c42:	005b      	lsls	r3, r3, #1
   16c44:	2208      	movs	r2, #8
   16c46:	18ba      	adds	r2, r7, r2
   16c48:	18d4      	adds	r4, r2, r3
   16c4a:	68fb      	ldr	r3, [r7, #12]
   16c4c:	0018      	movs	r0, r3
   16c4e:	4b8c      	ldr	r3, [pc, #560]	; (16e80 <processOnSMS+0x20cc>)
   16c50:	4798      	blx	r3
   16c52:	0003      	movs	r3, r0
   16c54:	7023      	strb	r3, [r4, #0]
		if(result)
   16c56:	2385      	movs	r3, #133	; 0x85
   16c58:	005b      	lsls	r3, r3, #1
   16c5a:	2208      	movs	r2, #8
   16c5c:	4694      	mov	ip, r2
   16c5e:	44bc      	add	ip, r7
   16c60:	4463      	add	r3, ip
   16c62:	781b      	ldrb	r3, [r3, #0]
   16c64:	2b00      	cmp	r3, #0
   16c66:	d100      	bne.n	16c6a <processOnSMS+0x1eb6>
   16c68:	e158      	b.n	16f1c <processOnSMS+0x2168>
		{
			incomingSMSProcessed=true;
   16c6a:	2328      	movs	r3, #40	; 0x28
   16c6c:	33ff      	adds	r3, #255	; 0xff
   16c6e:	2208      	movs	r2, #8
   16c70:	4694      	mov	ip, r2
   16c72:	44bc      	add	ip, r7
   16c74:	4463      	add	r3, ip
   16c76:	2201      	movs	r2, #1
   16c78:	701a      	strb	r2, [r3, #0]
			
			if (response_sms_processed_cmd == true)
   16c7a:	4b7a      	ldr	r3, [pc, #488]	; (16e64 <processOnSMS+0x20b0>)
   16c7c:	2294      	movs	r2, #148	; 0x94
   16c7e:	0052      	lsls	r2, r2, #1
   16c80:	4694      	mov	ip, r2
   16c82:	2208      	movs	r2, #8
   16c84:	4690      	mov	r8, r2
   16c86:	44b8      	add	r8, r7
   16c88:	44c4      	add	ip, r8
   16c8a:	4463      	add	r3, ip
   16c8c:	781b      	ldrb	r3, [r3, #0]
   16c8e:	2b00      	cmp	r3, #0
   16c90:	d100      	bne.n	16c94 <processOnSMS+0x1ee0>
   16c92:	e143      	b.n	16f1c <processOnSMS+0x2168>
			{
				strcpy(resep_msg,"MOBILE NO:");
   16c94:	230c      	movs	r3, #12
   16c96:	2208      	movs	r2, #8
   16c98:	4694      	mov	ip, r2
   16c9a:	44bc      	add	ip, r7
   16c9c:	4463      	add	r3, ip
   16c9e:	4a72      	ldr	r2, [pc, #456]	; (16e68 <processOnSMS+0x20b4>)
   16ca0:	ca03      	ldmia	r2!, {r0, r1}
   16ca2:	c303      	stmia	r3!, {r0, r1}
   16ca4:	8811      	ldrh	r1, [r2, #0]
   16ca6:	8019      	strh	r1, [r3, #0]
   16ca8:	7892      	ldrb	r2, [r2, #2]
   16caa:	709a      	strb	r2, [r3, #2]
				strcat(resep_msg,"\n");
   16cac:	230c      	movs	r3, #12
   16cae:	2208      	movs	r2, #8
   16cb0:	4694      	mov	ip, r2
   16cb2:	44bc      	add	ip, r7
   16cb4:	4463      	add	r3, ip
   16cb6:	0018      	movs	r0, r3
   16cb8:	4b67      	ldr	r3, [pc, #412]	; (16e58 <processOnSMS+0x20a4>)
   16cba:	4798      	blx	r3
   16cbc:	0003      	movs	r3, r0
   16cbe:	001a      	movs	r2, r3
   16cc0:	230c      	movs	r3, #12
   16cc2:	2108      	movs	r1, #8
   16cc4:	468c      	mov	ip, r1
   16cc6:	44bc      	add	ip, r7
   16cc8:	4463      	add	r3, ip
   16cca:	189a      	adds	r2, r3, r2
   16ccc:	4b67      	ldr	r3, [pc, #412]	; (16e6c <processOnSMS+0x20b8>)
   16cce:	0010      	movs	r0, r2
   16cd0:	0019      	movs	r1, r3
   16cd2:	2302      	movs	r3, #2
   16cd4:	001a      	movs	r2, r3
   16cd6:	4b66      	ldr	r3, [pc, #408]	; (16e70 <processOnSMS+0x20bc>)
   16cd8:	4798      	blx	r3
				strcat(resep_msg,received_command);
   16cda:	68fa      	ldr	r2, [r7, #12]
   16cdc:	230c      	movs	r3, #12
   16cde:	2108      	movs	r1, #8
   16ce0:	468c      	mov	ip, r1
   16ce2:	44bc      	add	ip, r7
   16ce4:	4463      	add	r3, ip
   16ce6:	0011      	movs	r1, r2
   16ce8:	0018      	movs	r0, r3
   16cea:	4b62      	ldr	r3, [pc, #392]	; (16e74 <processOnSMS+0x20c0>)
   16cec:	4798      	blx	r3
				strcat(resep_msg,"\n");
   16cee:	230c      	movs	r3, #12
   16cf0:	2208      	movs	r2, #8
   16cf2:	4694      	mov	ip, r2
   16cf4:	44bc      	add	ip, r7
   16cf6:	4463      	add	r3, ip
   16cf8:	0018      	movs	r0, r3
   16cfa:	4b57      	ldr	r3, [pc, #348]	; (16e58 <processOnSMS+0x20a4>)
   16cfc:	4798      	blx	r3
   16cfe:	0003      	movs	r3, r0
   16d00:	001a      	movs	r2, r3
   16d02:	230c      	movs	r3, #12
   16d04:	2108      	movs	r1, #8
   16d06:	468c      	mov	ip, r1
   16d08:	44bc      	add	ip, r7
   16d0a:	4463      	add	r3, ip
   16d0c:	189a      	adds	r2, r3, r2
   16d0e:	4b57      	ldr	r3, [pc, #348]	; (16e6c <processOnSMS+0x20b8>)
   16d10:	0010      	movs	r0, r2
   16d12:	0019      	movs	r1, r3
   16d14:	2302      	movs	r3, #2
   16d16:	001a      	movs	r2, r3
   16d18:	4b55      	ldr	r3, [pc, #340]	; (16e70 <processOnSMS+0x20bc>)
   16d1a:	4798      	blx	r3
				strcat(resep_msg,"REMOVED SUCCESSFULLY");
   16d1c:	230c      	movs	r3, #12
   16d1e:	2208      	movs	r2, #8
   16d20:	4694      	mov	ip, r2
   16d22:	44bc      	add	ip, r7
   16d24:	4463      	add	r3, ip
   16d26:	0018      	movs	r0, r3
   16d28:	4b4b      	ldr	r3, [pc, #300]	; (16e58 <processOnSMS+0x20a4>)
   16d2a:	4798      	blx	r3
   16d2c:	0003      	movs	r3, r0
   16d2e:	001a      	movs	r2, r3
   16d30:	230c      	movs	r3, #12
   16d32:	2108      	movs	r1, #8
   16d34:	468c      	mov	ip, r1
   16d36:	44bc      	add	ip, r7
   16d38:	4463      	add	r3, ip
   16d3a:	189a      	adds	r2, r3, r2
   16d3c:	4b51      	ldr	r3, [pc, #324]	; (16e84 <processOnSMS+0x20d0>)
   16d3e:	0010      	movs	r0, r2
   16d40:	0019      	movs	r1, r3
   16d42:	2315      	movs	r3, #21
   16d44:	001a      	movs	r2, r3
   16d46:	4b4a      	ldr	r3, [pc, #296]	; (16e70 <processOnSMS+0x20bc>)
   16d48:	4798      	blx	r3
   16d4a:	e0e7      	b.n	16f1c <processOnSMS+0x2168>
			}
		}
	}
	else if (StringstartsWith(received_command,"AM+"))
   16d4c:	4a4e      	ldr	r2, [pc, #312]	; (16e88 <processOnSMS+0x20d4>)
   16d4e:	68fb      	ldr	r3, [r7, #12]
   16d50:	0011      	movs	r1, r2
   16d52:	0018      	movs	r0, r3
   16d54:	4b3f      	ldr	r3, [pc, #252]	; (16e54 <processOnSMS+0x20a0>)
   16d56:	4798      	blx	r3
   16d58:	1e03      	subs	r3, r0, #0
   16d5a:	d042      	beq.n	16de2 <processOnSMS+0x202e>
	{
		//if (isNumeric(str))
		{
			memmove(received_command,received_command+3,strlen(received_command));
   16d5c:	68fb      	ldr	r3, [r7, #12]
   16d5e:	1cdc      	adds	r4, r3, #3
   16d60:	68fb      	ldr	r3, [r7, #12]
   16d62:	0018      	movs	r0, r3
   16d64:	4b3c      	ldr	r3, [pc, #240]	; (16e58 <processOnSMS+0x20a4>)
   16d66:	4798      	blx	r3
   16d68:	0002      	movs	r2, r0
   16d6a:	68fb      	ldr	r3, [r7, #12]
   16d6c:	0021      	movs	r1, r4
   16d6e:	0018      	movs	r0, r3
   16d70:	4b3a      	ldr	r3, [pc, #232]	; (16e5c <processOnSMS+0x20a8>)
   16d72:	4798      	blx	r3
			bool result  = addAlternateNumber(received_command);
   16d74:	230a      	movs	r3, #10
   16d76:	33ff      	adds	r3, #255	; 0xff
   16d78:	2208      	movs	r2, #8
   16d7a:	18ba      	adds	r2, r7, r2
   16d7c:	18d4      	adds	r4, r2, r3
   16d7e:	68fb      	ldr	r3, [r7, #12]
   16d80:	0018      	movs	r0, r3
   16d82:	4b42      	ldr	r3, [pc, #264]	; (16e8c <processOnSMS+0x20d8>)
   16d84:	4798      	blx	r3
   16d86:	0003      	movs	r3, r0
   16d88:	7023      	strb	r3, [r4, #0]
			incomingSMSProcessed=true;
   16d8a:	2328      	movs	r3, #40	; 0x28
   16d8c:	33ff      	adds	r3, #255	; 0xff
   16d8e:	2208      	movs	r2, #8
   16d90:	4694      	mov	ip, r2
   16d92:	44bc      	add	ip, r7
   16d94:	4463      	add	r3, ip
   16d96:	2201      	movs	r2, #1
   16d98:	701a      	strb	r2, [r3, #0]
			if(result)
   16d9a:	230a      	movs	r3, #10
   16d9c:	33ff      	adds	r3, #255	; 0xff
   16d9e:	2208      	movs	r2, #8
   16da0:	4694      	mov	ip, r2
   16da2:	44bc      	add	ip, r7
   16da4:	4463      	add	r3, ip
   16da6:	781b      	ldrb	r3, [r3, #0]
   16da8:	2b00      	cmp	r3, #0
   16daa:	d100      	bne.n	16dae <processOnSMS+0x1ffa>
   16dac:	e0b6      	b.n	16f1c <processOnSMS+0x2168>
			{
				if (response_sms_processed_cmd == true)
   16dae:	4b2d      	ldr	r3, [pc, #180]	; (16e64 <processOnSMS+0x20b0>)
   16db0:	2294      	movs	r2, #148	; 0x94
   16db2:	0052      	lsls	r2, r2, #1
   16db4:	4694      	mov	ip, r2
   16db6:	2208      	movs	r2, #8
   16db8:	4690      	mov	r8, r2
   16dba:	44b8      	add	r8, r7
   16dbc:	44c4      	add	ip, r8
   16dbe:	4463      	add	r3, ip
   16dc0:	781b      	ldrb	r3, [r3, #0]
   16dc2:	2b00      	cmp	r3, #0
   16dc4:	d100      	bne.n	16dc8 <processOnSMS+0x2014>
   16dc6:	e0a9      	b.n	16f1c <processOnSMS+0x2168>
				{
					strcpy(resep_msg,"ALTERNATE MOBILE NO ADD SUCCESS");
   16dc8:	230c      	movs	r3, #12
   16dca:	2208      	movs	r2, #8
   16dcc:	4694      	mov	ip, r2
   16dce:	44bc      	add	ip, r7
   16dd0:	4463      	add	r3, ip
   16dd2:	4a2f      	ldr	r2, [pc, #188]	; (16e90 <processOnSMS+0x20dc>)
   16dd4:	ca13      	ldmia	r2!, {r0, r1, r4}
   16dd6:	c313      	stmia	r3!, {r0, r1, r4}
   16dd8:	ca13      	ldmia	r2!, {r0, r1, r4}
   16dda:	c313      	stmia	r3!, {r0, r1, r4}
   16ddc:	ca03      	ldmia	r2!, {r0, r1}
   16dde:	c303      	stmia	r3!, {r0, r1}
   16de0:	e09c      	b.n	16f1c <processOnSMS+0x2168>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"MM+"))
   16de2:	4a2c      	ldr	r2, [pc, #176]	; (16e94 <processOnSMS+0x20e0>)
   16de4:	68fb      	ldr	r3, [r7, #12]
   16de6:	0011      	movs	r1, r2
   16de8:	0018      	movs	r0, r3
   16dea:	4b1a      	ldr	r3, [pc, #104]	; (16e54 <processOnSMS+0x20a0>)
   16dec:	4798      	blx	r3
   16dee:	1e03      	subs	r3, r0, #0
   16df0:	d056      	beq.n	16ea0 <processOnSMS+0x20ec>
	{
		//if (isNumeric(str))
		{
			memmove(received_command,received_command+3,strlen(received_command));
   16df2:	68fb      	ldr	r3, [r7, #12]
   16df4:	1cdc      	adds	r4, r3, #3
   16df6:	68fb      	ldr	r3, [r7, #12]
   16df8:	0018      	movs	r0, r3
   16dfa:	4b17      	ldr	r3, [pc, #92]	; (16e58 <processOnSMS+0x20a4>)
   16dfc:	4798      	blx	r3
   16dfe:	0002      	movs	r2, r0
   16e00:	68fb      	ldr	r3, [r7, #12]
   16e02:	0021      	movs	r1, r4
   16e04:	0018      	movs	r0, r3
   16e06:	4b15      	ldr	r3, [pc, #84]	; (16e5c <processOnSMS+0x20a8>)
   16e08:	4798      	blx	r3
			addM2MNumber(received_command);
   16e0a:	68fb      	ldr	r3, [r7, #12]
   16e0c:	0018      	movs	r0, r3
   16e0e:	4b22      	ldr	r3, [pc, #136]	; (16e98 <processOnSMS+0x20e4>)
   16e10:	4798      	blx	r3
			incomingSMSProcessed=true;
   16e12:	2328      	movs	r3, #40	; 0x28
   16e14:	33ff      	adds	r3, #255	; 0xff
   16e16:	2208      	movs	r2, #8
   16e18:	4694      	mov	ip, r2
   16e1a:	44bc      	add	ip, r7
   16e1c:	4463      	add	r3, ip
   16e1e:	2201      	movs	r2, #1
   16e20:	701a      	strb	r2, [r3, #0]

			if (response_sms_processed_cmd == true)
   16e22:	4b10      	ldr	r3, [pc, #64]	; (16e64 <processOnSMS+0x20b0>)
   16e24:	2294      	movs	r2, #148	; 0x94
   16e26:	0052      	lsls	r2, r2, #1
   16e28:	4694      	mov	ip, r2
   16e2a:	2208      	movs	r2, #8
   16e2c:	4690      	mov	r8, r2
   16e2e:	44b8      	add	r8, r7
   16e30:	44c4      	add	ip, r8
   16e32:	4463      	add	r3, ip
   16e34:	781b      	ldrb	r3, [r3, #0]
   16e36:	2b00      	cmp	r3, #0
   16e38:	d070      	beq.n	16f1c <processOnSMS+0x2168>
			{
				strcpy(resep_msg,"M2M NO. ADDED");
   16e3a:	230c      	movs	r3, #12
   16e3c:	2208      	movs	r2, #8
   16e3e:	4694      	mov	ip, r2
   16e40:	44bc      	add	ip, r7
   16e42:	4463      	add	r3, ip
   16e44:	4a15      	ldr	r2, [pc, #84]	; (16e9c <processOnSMS+0x20e8>)
   16e46:	ca13      	ldmia	r2!, {r0, r1, r4}
   16e48:	c313      	stmia	r3!, {r0, r1, r4}
   16e4a:	8812      	ldrh	r2, [r2, #0]
   16e4c:	801a      	strh	r2, [r3, #0]
   16e4e:	e065      	b.n	16f1c <processOnSMS+0x2168>
   16e50:	0002a62c 	.word	0x0002a62c
   16e54:	00014015 	.word	0x00014015
   16e58:	000291a3 	.word	0x000291a3
   16e5c:	00028eef 	.word	0x00028eef
   16e60:	00010eed 	.word	0x00010eed
   16e64:	fffffeda 	.word	0xfffffeda
   16e68:	0002a630 	.word	0x0002a630
   16e6c:	0002a63c 	.word	0x0002a63c
   16e70:	00028edd 	.word	0x00028edd
   16e74:	0002915d 	.word	0x0002915d
   16e78:	0002a640 	.word	0x0002a640
   16e7c:	0002a654 	.word	0x0002a654
   16e80:	00010fe9 	.word	0x00010fe9
   16e84:	0002a658 	.word	0x0002a658
   16e88:	0002a670 	.word	0x0002a670
   16e8c:	00011235 	.word	0x00011235
   16e90:	0002a674 	.word	0x0002a674
   16e94:	0002a694 	.word	0x0002a694
   16e98:	00010c45 	.word	0x00010c45
   16e9c:	0002a698 	.word	0x0002a698
			}
		}
	}
	
	else if (StringstartsWith(received_command,"MR+"))
   16ea0:	4a44      	ldr	r2, [pc, #272]	; (16fb4 <processOnSMS+0x2200>)
   16ea2:	68fb      	ldr	r3, [r7, #12]
   16ea4:	0011      	movs	r1, r2
   16ea6:	0018      	movs	r0, r3
   16ea8:	4b43      	ldr	r3, [pc, #268]	; (16fb8 <processOnSMS+0x2204>)
   16eaa:	4798      	blx	r3
   16eac:	1e03      	subs	r3, r0, #0
   16eae:	d035      	beq.n	16f1c <processOnSMS+0x2168>
	{
		//if (isNumeric(str))
		if(factory_settings_parameter_struct.ENABLE_M2M)
   16eb0:	4b42      	ldr	r3, [pc, #264]	; (16fbc <processOnSMS+0x2208>)
   16eb2:	78db      	ldrb	r3, [r3, #3]
   16eb4:	2b00      	cmp	r3, #0
   16eb6:	d031      	beq.n	16f1c <processOnSMS+0x2168>
		{
			memmove(received_command,received_command+3,strlen(received_command));
   16eb8:	68fb      	ldr	r3, [r7, #12]
   16eba:	1cdc      	adds	r4, r3, #3
   16ebc:	68fb      	ldr	r3, [r7, #12]
   16ebe:	0018      	movs	r0, r3
   16ec0:	4b3f      	ldr	r3, [pc, #252]	; (16fc0 <processOnSMS+0x220c>)
   16ec2:	4798      	blx	r3
   16ec4:	0002      	movs	r2, r0
   16ec6:	68fb      	ldr	r3, [r7, #12]
   16ec8:	0021      	movs	r1, r4
   16eca:	0018      	movs	r0, r3
   16ecc:	4b3d      	ldr	r3, [pc, #244]	; (16fc4 <processOnSMS+0x2210>)
   16ece:	4798      	blx	r3
			incomingSMSProcessed=true;
   16ed0:	2328      	movs	r3, #40	; 0x28
   16ed2:	33ff      	adds	r3, #255	; 0xff
   16ed4:	2208      	movs	r2, #8
   16ed6:	4694      	mov	ip, r2
   16ed8:	44bc      	add	ip, r7
   16eda:	4463      	add	r3, ip
   16edc:	2201      	movs	r2, #1
   16ede:	701a      	strb	r2, [r3, #0]
			
			addM2MRemoteNumber(received_command);
   16ee0:	68fb      	ldr	r3, [r7, #12]
   16ee2:	0018      	movs	r0, r3
   16ee4:	4b38      	ldr	r3, [pc, #224]	; (16fc8 <processOnSMS+0x2214>)
   16ee6:	4798      	blx	r3
			if (response_sms_processed_cmd == true)
   16ee8:	4b38      	ldr	r3, [pc, #224]	; (16fcc <processOnSMS+0x2218>)
   16eea:	2294      	movs	r2, #148	; 0x94
   16eec:	0052      	lsls	r2, r2, #1
   16eee:	4694      	mov	ip, r2
   16ef0:	2208      	movs	r2, #8
   16ef2:	4690      	mov	r8, r2
   16ef4:	44b8      	add	r8, r7
   16ef6:	44c4      	add	ip, r8
   16ef8:	4463      	add	r3, ip
   16efa:	781b      	ldrb	r3, [r3, #0]
   16efc:	2b00      	cmp	r3, #0
   16efe:	d00d      	beq.n	16f1c <processOnSMS+0x2168>
			{
				strcpy(resep_msg,"M2M REMOTE NO. ADDED");
   16f00:	230c      	movs	r3, #12
   16f02:	2208      	movs	r2, #8
   16f04:	4694      	mov	ip, r2
   16f06:	44bc      	add	ip, r7
   16f08:	4463      	add	r3, ip
   16f0a:	4a31      	ldr	r2, [pc, #196]	; (16fd0 <processOnSMS+0x221c>)
   16f0c:	ca13      	ldmia	r2!, {r0, r1, r4}
   16f0e:	c313      	stmia	r3!, {r0, r1, r4}
   16f10:	ca03      	ldmia	r2!, {r0, r1}
   16f12:	c303      	stmia	r3!, {r0, r1}
   16f14:	7812      	ldrb	r2, [r2, #0]
   16f16:	701a      	strb	r2, [r3, #0]
   16f18:	e000      	b.n	16f1c <processOnSMS+0x2168>
		if (alternateNumber_struct.alterNumberPresent)
   16f1a:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	
	if (response_sms_processed_cmd == true)
   16f1c:	4b2b      	ldr	r3, [pc, #172]	; (16fcc <processOnSMS+0x2218>)
   16f1e:	2294      	movs	r2, #148	; 0x94
   16f20:	0052      	lsls	r2, r2, #1
   16f22:	4694      	mov	ip, r2
   16f24:	2208      	movs	r2, #8
   16f26:	4690      	mov	r8, r2
   16f28:	44b8      	add	r8, r7
   16f2a:	44c4      	add	ip, r8
   16f2c:	4463      	add	r3, ip
   16f2e:	781b      	ldrb	r3, [r3, #0]
   16f30:	2b00      	cmp	r3, #0
   16f32:	d03a      	beq.n	16faa <processOnSMS+0x21f6>
	{
		if(!incomingSMSProcessed)
   16f34:	2328      	movs	r3, #40	; 0x28
   16f36:	33ff      	adds	r3, #255	; 0xff
   16f38:	2208      	movs	r2, #8
   16f3a:	4694      	mov	ip, r2
   16f3c:	44bc      	add	ip, r7
   16f3e:	4463      	add	r3, ip
   16f40:	781b      	ldrb	r3, [r3, #0]
   16f42:	2201      	movs	r2, #1
   16f44:	4053      	eors	r3, r2
   16f46:	b2db      	uxtb	r3, r3
   16f48:	2b00      	cmp	r3, #0
   16f4a:	d011      	beq.n	16f70 <processOnSMS+0x21bc>
		{
			sprintf(resep_msg,"ERROR : %s",*copy_received_command);
   16f4c:	238c      	movs	r3, #140	; 0x8c
   16f4e:	005b      	lsls	r3, r3, #1
   16f50:	2208      	movs	r2, #8
   16f52:	4694      	mov	ip, r2
   16f54:	44bc      	add	ip, r7
   16f56:	4463      	add	r3, ip
   16f58:	681b      	ldr	r3, [r3, #0]
   16f5a:	781b      	ldrb	r3, [r3, #0]
   16f5c:	001a      	movs	r2, r3
   16f5e:	491d      	ldr	r1, [pc, #116]	; (16fd4 <processOnSMS+0x2220>)
   16f60:	230c      	movs	r3, #12
   16f62:	2008      	movs	r0, #8
   16f64:	4684      	mov	ip, r0
   16f66:	44bc      	add	ip, r7
   16f68:	4463      	add	r3, ip
   16f6a:	0018      	movs	r0, r3
   16f6c:	4b1a      	ldr	r3, [pc, #104]	; (16fd8 <processOnSMS+0x2224>)
   16f6e:	4798      	blx	r3
		}
		setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
   16f70:	23a0      	movs	r3, #160	; 0xa0
   16f72:	005b      	lsls	r3, r3, #1
   16f74:	2208      	movs	r2, #8
   16f76:	4694      	mov	ip, r2
   16f78:	44bc      	add	ip, r7
   16f7a:	4463      	add	r3, ip
   16f7c:	681b      	ldr	r3, [r3, #0]
   16f7e:	2200      	movs	r2, #0
   16f80:	0019      	movs	r1, r3
   16f82:	2005      	movs	r0, #5
   16f84:	4b15      	ldr	r3, [pc, #84]	; (16fdc <processOnSMS+0x2228>)
   16f86:	4798      	blx	r3
		gsm_send_sms(phone_number,resep_msg);
   16f88:	230c      	movs	r3, #12
   16f8a:	2208      	movs	r2, #8
   16f8c:	18ba      	adds	r2, r7, r2
   16f8e:	18d2      	adds	r2, r2, r3
   16f90:	23a0      	movs	r3, #160	; 0xa0
   16f92:	005b      	lsls	r3, r3, #1
   16f94:	2108      	movs	r1, #8
   16f96:	468c      	mov	ip, r1
   16f98:	44bc      	add	ip, r7
   16f9a:	4463      	add	r3, ip
   16f9c:	681b      	ldr	r3, [r3, #0]
   16f9e:	0011      	movs	r1, r2
   16fa0:	0018      	movs	r0, r3
   16fa2:	4b0f      	ldr	r3, [pc, #60]	; (16fe0 <processOnSMS+0x222c>)
   16fa4:	4798      	blx	r3
   16fa6:	e000      	b.n	16faa <processOnSMS+0x21f6>
		return;
   16fa8:	46c0      	nop			; (mov r8, r8)
	}
}
   16faa:	46bd      	mov	sp, r7
   16fac:	b04c      	add	sp, #304	; 0x130
   16fae:	bc04      	pop	{r2}
   16fb0:	4690      	mov	r8, r2
   16fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16fb4:	0002a6a8 	.word	0x0002a6a8
   16fb8:	00014015 	.word	0x00014015
   16fbc:	2000062c 	.word	0x2000062c
   16fc0:	000291a3 	.word	0x000291a3
   16fc4:	00028eef 	.word	0x00028eef
   16fc8:	00010cad 	.word	0x00010cad
   16fcc:	fffffeda 	.word	0xfffffeda
   16fd0:	0002a6ac 	.word	0x0002a6ac
   16fd4:	0002a6c4 	.word	0x0002a6c4
   16fd8:	00029119 	.word	0x00029119
   16fdc:	0001cc35 	.word	0x0001cc35
   16fe0:	00012b05 	.word	0x00012b05

00016fe4 <buildStatusMessage>:

void buildStatusMessage(char *resep_msg)
{
   16fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
   16fe6:	b091      	sub	sp, #68	; 0x44
   16fe8:	af06      	add	r7, sp, #24
   16fea:	6078      	str	r0, [r7, #4]
	uint8_t network= gsm_getsignalstrength();
   16fec:	2327      	movs	r3, #39	; 0x27
   16fee:	18fc      	adds	r4, r7, r3
   16ff0:	4b32      	ldr	r3, [pc, #200]	; (170bc <buildStatusMessage+0xd8>)
   16ff2:	4798      	blx	r3
   16ff4:	0003      	movs	r3, r0
   16ff6:	7023      	strb	r3, [r4, #0]
	char strACState[10],strSeq[7],strMotor[5];
	switch(structThreePhase_state.u8t_phase_ac_state)
   16ff8:	4b31      	ldr	r3, [pc, #196]	; (170c0 <buildStatusMessage+0xdc>)
   16ffa:	785b      	ldrb	r3, [r3, #1]
   16ffc:	b2db      	uxtb	r3, r3
   16ffe:	2b02      	cmp	r3, #2
   17000:	d009      	beq.n	17016 <buildStatusMessage+0x32>
   17002:	2b03      	cmp	r3, #3
   17004:	d10d      	bne.n	17022 <buildStatusMessage+0x3e>
	{
		case AC_3PH:
		sprintf(strACState,(const uint8_t*)("ON"));
   17006:	231c      	movs	r3, #28
   17008:	18fb      	adds	r3, r7, r3
   1700a:	4a2e      	ldr	r2, [pc, #184]	; (170c4 <buildStatusMessage+0xe0>)
   1700c:	8811      	ldrh	r1, [r2, #0]
   1700e:	8019      	strh	r1, [r3, #0]
   17010:	7892      	ldrb	r2, [r2, #2]
   17012:	709a      	strb	r2, [r3, #2]
		break;
   17014:	e00a      	b.n	1702c <buildStatusMessage+0x48>
		case AC_2PH:
		sprintf(strACState,(const uint8_t*)("2 PHASE"));
   17016:	231c      	movs	r3, #28
   17018:	18fb      	adds	r3, r7, r3
   1701a:	4a2b      	ldr	r2, [pc, #172]	; (170c8 <buildStatusMessage+0xe4>)
   1701c:	ca03      	ldmia	r2!, {r0, r1}
   1701e:	c303      	stmia	r3!, {r0, r1}
		break;
   17020:	e004      	b.n	1702c <buildStatusMessage+0x48>
		default:
		sprintf(strACState,(const uint8_t*)("OFF"));
   17022:	231c      	movs	r3, #28
   17024:	18fb      	adds	r3, r7, r3
   17026:	4a29      	ldr	r2, [pc, #164]	; (170cc <buildStatusMessage+0xe8>)
   17028:	601a      	str	r2, [r3, #0]
		break;
   1702a:	46c0      	nop			; (mov r8, r8)
	}
	
	if(structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
   1702c:	4b24      	ldr	r3, [pc, #144]	; (170c0 <buildStatusMessage+0xdc>)
   1702e:	781b      	ldrb	r3, [r3, #0]
   17030:	b2db      	uxtb	r3, r3
   17032:	2b02      	cmp	r3, #2
   17034:	d107      	bne.n	17046 <buildStatusMessage+0x62>
	{
		sprintf(strSeq,(const uint8_t*)("OK"));
   17036:	2314      	movs	r3, #20
   17038:	18fb      	adds	r3, r7, r3
   1703a:	4a25      	ldr	r2, [pc, #148]	; (170d0 <buildStatusMessage+0xec>)
   1703c:	8811      	ldrh	r1, [r2, #0]
   1703e:	8019      	strh	r1, [r3, #0]
   17040:	7892      	ldrb	r2, [r2, #2]
   17042:	709a      	strb	r2, [r3, #2]
   17044:	e006      	b.n	17054 <buildStatusMessage+0x70>
	}
	else
	{
		sprintf(strSeq,(const uint8_t*)("ERROR"));
   17046:	2314      	movs	r3, #20
   17048:	18fb      	adds	r3, r7, r3
   1704a:	4a22      	ldr	r2, [pc, #136]	; (170d4 <buildStatusMessage+0xf0>)
   1704c:	6811      	ldr	r1, [r2, #0]
   1704e:	6019      	str	r1, [r3, #0]
   17050:	8892      	ldrh	r2, [r2, #4]
   17052:	809a      	strh	r2, [r3, #4]
	}
	
	if(getMotorState())
   17054:	4b20      	ldr	r3, [pc, #128]	; (170d8 <buildStatusMessage+0xf4>)
   17056:	4798      	blx	r3
   17058:	1e03      	subs	r3, r0, #0
   1705a:	d007      	beq.n	1706c <buildStatusMessage+0x88>
	{
		sprintf(strMotor,(const uint8_t*)("ON"));
   1705c:	230c      	movs	r3, #12
   1705e:	18fb      	adds	r3, r7, r3
   17060:	4a18      	ldr	r2, [pc, #96]	; (170c4 <buildStatusMessage+0xe0>)
   17062:	8811      	ldrh	r1, [r2, #0]
   17064:	8019      	strh	r1, [r3, #0]
   17066:	7892      	ldrb	r2, [r2, #2]
   17068:	709a      	strb	r2, [r3, #2]
   1706a:	e003      	b.n	17074 <buildStatusMessage+0x90>
	}
	else
	{
		sprintf(strMotor,(const uint8_t*)("OFF"));
   1706c:	230c      	movs	r3, #12
   1706e:	18fb      	adds	r3, r7, r3
   17070:	4a16      	ldr	r2, [pc, #88]	; (170cc <buildStatusMessage+0xe8>)
   17072:	601a      	str	r2, [r3, #0]
	}
	
	sprintf(resep_msg,"RY: %d YB: %d BR: %d\nAC: %s\nSequence: %s\nMotor: %s\nCurrent: %dA\nNetwork: %d",
   17074:	4b19      	ldr	r3, [pc, #100]	; (170dc <buildStatusMessage+0xf8>)
   17076:	681c      	ldr	r4, [r3, #0]
   17078:	4b18      	ldr	r3, [pc, #96]	; (170dc <buildStatusMessage+0xf8>)
   1707a:	685d      	ldr	r5, [r3, #4]
   1707c:	4b17      	ldr	r3, [pc, #92]	; (170dc <buildStatusMessage+0xf8>)
   1707e:	689b      	ldr	r3, [r3, #8]
	Analog_Parameter_Struct.PhaseRY_Voltage,Analog_Parameter_Struct.PhaseYB_Voltage,Analog_Parameter_Struct.PhaseBR_Voltage,
	strACState,strSeq,strMotor,Analog_Parameter_Struct.Motor_Current_IntPart,network);
   17080:	4a16      	ldr	r2, [pc, #88]	; (170dc <buildStatusMessage+0xf8>)
   17082:	8a92      	ldrh	r2, [r2, #20]
   17084:	b292      	uxth	r2, r2
	sprintf(resep_msg,"RY: %d YB: %d BR: %d\nAC: %s\nSequence: %s\nMotor: %s\nCurrent: %dA\nNetwork: %d",
   17086:	0016      	movs	r6, r2
   17088:	2227      	movs	r2, #39	; 0x27
   1708a:	18ba      	adds	r2, r7, r2
   1708c:	7812      	ldrb	r2, [r2, #0]
   1708e:	4914      	ldr	r1, [pc, #80]	; (170e0 <buildStatusMessage+0xfc>)
   17090:	6878      	ldr	r0, [r7, #4]
   17092:	9205      	str	r2, [sp, #20]
   17094:	9604      	str	r6, [sp, #16]
   17096:	220c      	movs	r2, #12
   17098:	18ba      	adds	r2, r7, r2
   1709a:	9203      	str	r2, [sp, #12]
   1709c:	2214      	movs	r2, #20
   1709e:	18ba      	adds	r2, r7, r2
   170a0:	9202      	str	r2, [sp, #8]
   170a2:	221c      	movs	r2, #28
   170a4:	18ba      	adds	r2, r7, r2
   170a6:	9201      	str	r2, [sp, #4]
   170a8:	9300      	str	r3, [sp, #0]
   170aa:	002b      	movs	r3, r5
   170ac:	0022      	movs	r2, r4
   170ae:	4c0d      	ldr	r4, [pc, #52]	; (170e4 <buildStatusMessage+0x100>)
   170b0:	47a0      	blx	r4
}
   170b2:	46c0      	nop			; (mov r8, r8)
   170b4:	46bd      	mov	sp, r7
   170b6:	b00b      	add	sp, #44	; 0x2c
   170b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   170ba:	46c0      	nop			; (mov r8, r8)
   170bc:	000128bd 	.word	0x000128bd
   170c0:	20000740 	.word	0x20000740
   170c4:	0002a6d0 	.word	0x0002a6d0
   170c8:	0002a6d4 	.word	0x0002a6d4
   170cc:	0046464f 	.word	0x0046464f
   170d0:	0002a6dc 	.word	0x0002a6dc
   170d4:	0002a6e0 	.word	0x0002a6e0
   170d8:	0001ac9d 	.word	0x0001ac9d
   170dc:	200006dc 	.word	0x200006dc
   170e0:	0002a6e8 	.word	0x0002a6e8
   170e4:	00029119 	.word	0x00029119

000170e8 <checkNumber>:


bool checkNumber(char *number)
{
   170e8:	b580      	push	{r7, lr}
   170ea:	b082      	sub	sp, #8
   170ec:	af00      	add	r7, sp, #0
   170ee:	6078      	str	r0, [r7, #4]
	if ((isAdmin(number)) || (checkExists(number)<user_count_struct.total_user_no_count))
   170f0:	687b      	ldr	r3, [r7, #4]
   170f2:	0018      	movs	r0, r3
   170f4:	4b0a      	ldr	r3, [pc, #40]	; (17120 <checkNumber+0x38>)
   170f6:	4798      	blx	r3
   170f8:	1e03      	subs	r3, r0, #0
   170fa:	d109      	bne.n	17110 <checkNumber+0x28>
   170fc:	687b      	ldr	r3, [r7, #4]
   170fe:	0018      	movs	r0, r3
   17100:	4b08      	ldr	r3, [pc, #32]	; (17124 <checkNumber+0x3c>)
   17102:	4798      	blx	r3
   17104:	0003      	movs	r3, r0
   17106:	001a      	movs	r2, r3
   17108:	4b07      	ldr	r3, [pc, #28]	; (17128 <checkNumber+0x40>)
   1710a:	785b      	ldrb	r3, [r3, #1]
   1710c:	429a      	cmp	r2, r3
   1710e:	d201      	bcs.n	17114 <checkNumber+0x2c>
	{
		return true;
   17110:	2301      	movs	r3, #1
   17112:	e000      	b.n	17116 <checkNumber+0x2e>
	}
	else
	{
		return false;
   17114:	2300      	movs	r3, #0
	}
}
   17116:	0018      	movs	r0, r3
   17118:	46bd      	mov	sp, r7
   1711a:	b002      	add	sp, #8
   1711c:	bd80      	pop	{r7, pc}
   1711e:	46c0      	nop			; (mov r8, r8)
   17120:	00011a69 	.word	0x00011a69
   17124:	00010de9 	.word	0x00010de9
   17128:	20000614 	.word	0x20000614

0001712c <checkNoCallTime>:

bool checkNoCallTime(void)
{
   1712c:	b580      	push	{r7, lr}
   1712e:	b082      	sub	sp, #8
   17130:	af00      	add	r7, sp, #0
	uint8_t globalHours, globalMinutes;
	getSystemTime(&globalHours,&globalMinutes);
   17132:	1dba      	adds	r2, r7, #6
   17134:	1dfb      	adds	r3, r7, #7
   17136:	0011      	movs	r1, r2
   17138:	0018      	movs	r0, r3
   1713a:	4b2b      	ldr	r3, [pc, #172]	; (171e8 <checkNoCallTime+0xbc>)
   1713c:	4798      	blx	r3
	if(globalHours >= (user_settings_parameter_struct.noCallStartTimeHourAddress) && globalHours <=(user_settings_parameter_struct.noCallStopTimeHourAddress))
   1713e:	4b2b      	ldr	r3, [pc, #172]	; (171ec <checkNoCallTime+0xc0>)
   17140:	7a9a      	ldrb	r2, [r3, #10]
   17142:	1dfb      	adds	r3, r7, #7
   17144:	781b      	ldrb	r3, [r3, #0]
   17146:	429a      	cmp	r2, r3
   17148:	d849      	bhi.n	171de <checkNoCallTime+0xb2>
   1714a:	4b28      	ldr	r3, [pc, #160]	; (171ec <checkNoCallTime+0xc0>)
   1714c:	7b1a      	ldrb	r2, [r3, #12]
   1714e:	1dfb      	adds	r3, r7, #7
   17150:	781b      	ldrb	r3, [r3, #0]
   17152:	429a      	cmp	r2, r3
   17154:	d343      	bcc.n	171de <checkNoCallTime+0xb2>
	{
		if(user_settings_parameter_struct.noCallStartTimeHourAddress==user_settings_parameter_struct.noCallStopTimeHourAddress)
   17156:	4b25      	ldr	r3, [pc, #148]	; (171ec <checkNoCallTime+0xc0>)
   17158:	7a9a      	ldrb	r2, [r3, #10]
   1715a:	4b24      	ldr	r3, [pc, #144]	; (171ec <checkNoCallTime+0xc0>)
   1715c:	7b1b      	ldrb	r3, [r3, #12]
   1715e:	429a      	cmp	r2, r3
   17160:	d10f      	bne.n	17182 <checkNoCallTime+0x56>
		{
			if(globalMinutes>=(user_settings_parameter_struct.noCallStartTimeMinuteAddress) && globalMinutes<=(user_settings_parameter_struct.noCallStopTimeMinuteAddress))
   17162:	4b22      	ldr	r3, [pc, #136]	; (171ec <checkNoCallTime+0xc0>)
   17164:	7ada      	ldrb	r2, [r3, #11]
   17166:	1dbb      	adds	r3, r7, #6
   17168:	781b      	ldrb	r3, [r3, #0]
   1716a:	429a      	cmp	r2, r3
   1716c:	d807      	bhi.n	1717e <checkNoCallTime+0x52>
   1716e:	4b1f      	ldr	r3, [pc, #124]	; (171ec <checkNoCallTime+0xc0>)
   17170:	7b5a      	ldrb	r2, [r3, #13]
   17172:	1dbb      	adds	r3, r7, #6
   17174:	781b      	ldrb	r3, [r3, #0]
   17176:	429a      	cmp	r2, r3
   17178:	d301      	bcc.n	1717e <checkNoCallTime+0x52>
			return true;
   1717a:	2301      	movs	r3, #1
   1717c:	e030      	b.n	171e0 <checkNoCallTime+0xb4>
			else
			return false;
   1717e:	2300      	movs	r3, #0
   17180:	e02e      	b.n	171e0 <checkNoCallTime+0xb4>
		}
		if(globalHours==user_settings_parameter_struct.noCallStartTimeHourAddress)
   17182:	4b1a      	ldr	r3, [pc, #104]	; (171ec <checkNoCallTime+0xc0>)
   17184:	7a9a      	ldrb	r2, [r3, #10]
   17186:	1dfb      	adds	r3, r7, #7
   17188:	781b      	ldrb	r3, [r3, #0]
   1718a:	429a      	cmp	r2, r3
   1718c:	d109      	bne.n	171a2 <checkNoCallTime+0x76>
		{
			if(globalMinutes>=user_settings_parameter_struct.noCallStartTimeMinuteAddress)
   1718e:	4b17      	ldr	r3, [pc, #92]	; (171ec <checkNoCallTime+0xc0>)
   17190:	7ada      	ldrb	r2, [r3, #11]
   17192:	1dbb      	adds	r3, r7, #6
   17194:	781b      	ldrb	r3, [r3, #0]
   17196:	429a      	cmp	r2, r3
   17198:	d801      	bhi.n	1719e <checkNoCallTime+0x72>
			return true;
   1719a:	2301      	movs	r3, #1
   1719c:	e020      	b.n	171e0 <checkNoCallTime+0xb4>
			else
			return false;
   1719e:	2300      	movs	r3, #0
   171a0:	e01e      	b.n	171e0 <checkNoCallTime+0xb4>
		}
		if(globalHours==user_settings_parameter_struct.noCallStopTimeHourAddress)
   171a2:	4b12      	ldr	r3, [pc, #72]	; (171ec <checkNoCallTime+0xc0>)
   171a4:	7b1a      	ldrb	r2, [r3, #12]
   171a6:	1dfb      	adds	r3, r7, #7
   171a8:	781b      	ldrb	r3, [r3, #0]
   171aa:	429a      	cmp	r2, r3
   171ac:	d109      	bne.n	171c2 <checkNoCallTime+0x96>
		{
			if(globalMinutes<=(user_settings_parameter_struct.noCallStopTimeMinuteAddress))
   171ae:	4b0f      	ldr	r3, [pc, #60]	; (171ec <checkNoCallTime+0xc0>)
   171b0:	7b5a      	ldrb	r2, [r3, #13]
   171b2:	1dbb      	adds	r3, r7, #6
   171b4:	781b      	ldrb	r3, [r3, #0]
   171b6:	429a      	cmp	r2, r3
   171b8:	d301      	bcc.n	171be <checkNoCallTime+0x92>
			return true;
   171ba:	2301      	movs	r3, #1
   171bc:	e010      	b.n	171e0 <checkNoCallTime+0xb4>
			else
			return false;
   171be:	2300      	movs	r3, #0
   171c0:	e00e      	b.n	171e0 <checkNoCallTime+0xb4>
		}
		if(globalHours > (user_settings_parameter_struct.noCallStartTimeHourAddress) && globalHours < (user_settings_parameter_struct.noCallStopTimeHourAddress))
   171c2:	4b0a      	ldr	r3, [pc, #40]	; (171ec <checkNoCallTime+0xc0>)
   171c4:	7a9a      	ldrb	r2, [r3, #10]
   171c6:	1dfb      	adds	r3, r7, #7
   171c8:	781b      	ldrb	r3, [r3, #0]
   171ca:	429a      	cmp	r2, r3
   171cc:	d207      	bcs.n	171de <checkNoCallTime+0xb2>
   171ce:	4b07      	ldr	r3, [pc, #28]	; (171ec <checkNoCallTime+0xc0>)
   171d0:	7b1a      	ldrb	r2, [r3, #12]
   171d2:	1dfb      	adds	r3, r7, #7
   171d4:	781b      	ldrb	r3, [r3, #0]
   171d6:	429a      	cmp	r2, r3
   171d8:	d901      	bls.n	171de <checkNoCallTime+0xb2>
		return true;
   171da:	2301      	movs	r3, #1
   171dc:	e000      	b.n	171e0 <checkNoCallTime+0xb4>
	}
	return false;
   171de:	2300      	movs	r3, #0
}
   171e0:	0018      	movs	r0, r3
   171e2:	46bd      	mov	sp, r7
   171e4:	b002      	add	sp, #8
   171e6:	bd80      	pop	{r7, pc}
   171e8:	00017429 	.word	0x00017429
   171ec:	20000654 	.word	0x20000654

000171f0 <verifyRemoteNumber>:

void verifyRemoteNumber(void)
{
   171f0:	b580      	push	{r7, lr}
   171f2:	af00      	add	r7, sp, #0
	sendSMS(("VMM01"),true,SEND_TO_M2M_REMOTE);
   171f4:	4b04      	ldr	r3, [pc, #16]	; (17208 <verifyRemoteNumber+0x18>)
   171f6:	2201      	movs	r2, #1
   171f8:	2101      	movs	r1, #1
   171fa:	0018      	movs	r0, r3
   171fc:	4b03      	ldr	r3, [pc, #12]	; (1720c <verifyRemoteNumber+0x1c>)
   171fe:	4798      	blx	r3
}
   17200:	46c0      	nop			; (mov r8, r8)
   17202:	46bd      	mov	sp, r7
   17204:	bd80      	pop	{r7, pc}
   17206:	46c0      	nop			; (mov r8, r8)
   17208:	0002a734 	.word	0x0002a734
   1720c:	00017211 	.word	0x00017211

00017210 <sendSMS>:

void sendSMS(char *msg, bool predefMsg, uint8_t isM2M)  ////void sendSMS(char *msg, bool predefMsg = false, uint8_t isM2M);
{
   17210:	b580      	push	{r7, lr}
   17212:	b08e      	sub	sp, #56	; 0x38
   17214:	af00      	add	r7, sp, #0
   17216:	6078      	str	r0, [r7, #4]
   17218:	0008      	movs	r0, r1
   1721a:	0011      	movs	r1, r2
   1721c:	1cfb      	adds	r3, r7, #3
   1721e:	1c02      	adds	r2, r0, #0
   17220:	701a      	strb	r2, [r3, #0]
   17222:	1cbb      	adds	r3, r7, #2
   17224:	1c0a      	adds	r2, r1, #0
   17226:	701a      	strb	r2, [r3, #0]
	inCall=true;
   17228:	4b55      	ldr	r3, [pc, #340]	; (17380 <sendSMS+0x170>)
   1722a:	2201      	movs	r2, #1
   1722c:	701a      	strb	r2, [r3, #0]
	if (!predefMsg)
   1722e:	1cfb      	adds	r3, r7, #3
   17230:	781b      	ldrb	r3, [r3, #0]
   17232:	2201      	movs	r2, #1
   17234:	4053      	eors	r3, r2
   17236:	b2db      	uxtb	r3, r3
   17238:	2b00      	cmp	r3, #0
   1723a:	d048      	beq.n	172ce <sendSMS+0xbe>
	{
		switch(actionType)
   1723c:	4b51      	ldr	r3, [pc, #324]	; (17384 <sendSMS+0x174>)
   1723e:	781b      	ldrb	r3, [r3, #0]
   17240:	3b43      	subs	r3, #67	; 0x43
   17242:	2b12      	cmp	r3, #18
   17244:	d900      	bls.n	17248 <sendSMS+0x38>
   17246:	e096      	b.n	17376 <sendSMS+0x166>
   17248:	009a      	lsls	r2, r3, #2
   1724a:	4b4f      	ldr	r3, [pc, #316]	; (17388 <sendSMS+0x178>)
   1724c:	18d3      	adds	r3, r2, r3
   1724e:	681b      	ldr	r3, [r3, #0]
   17250:	469f      	mov	pc, r3
		{
			case 'S':
			strcat(msg,STR_MOTOR);
   17252:	687b      	ldr	r3, [r7, #4]
   17254:	0018      	movs	r0, r3
   17256:	4b4d      	ldr	r3, [pc, #308]	; (1738c <sendSMS+0x17c>)
   17258:	4798      	blx	r3
   1725a:	0003      	movs	r3, r0
   1725c:	001a      	movs	r2, r3
   1725e:	687b      	ldr	r3, [r7, #4]
   17260:	189a      	adds	r2, r3, r2
   17262:	4b4b      	ldr	r3, [pc, #300]	; (17390 <sendSMS+0x180>)
   17264:	0010      	movs	r0, r2
   17266:	0019      	movs	r1, r3
   17268:	2307      	movs	r3, #7
   1726a:	001a      	movs	r2, r3
   1726c:	4b49      	ldr	r3, [pc, #292]	; (17394 <sendSMS+0x184>)
   1726e:	4798      	blx	r3
			strcat(msg,STR_ON);
   17270:	687b      	ldr	r3, [r7, #4]
   17272:	0018      	movs	r0, r3
   17274:	4b45      	ldr	r3, [pc, #276]	; (1738c <sendSMS+0x17c>)
   17276:	4798      	blx	r3
   17278:	0003      	movs	r3, r0
   1727a:	001a      	movs	r2, r3
   1727c:	687b      	ldr	r3, [r7, #4]
   1727e:	189a      	adds	r2, r3, r2
   17280:	4b45      	ldr	r3, [pc, #276]	; (17398 <sendSMS+0x188>)
   17282:	0010      	movs	r0, r2
   17284:	0019      	movs	r1, r3
   17286:	2303      	movs	r3, #3
   17288:	001a      	movs	r2, r3
   1728a:	4b42      	ldr	r3, [pc, #264]	; (17394 <sendSMS+0x184>)
   1728c:	4798      	blx	r3
			break;
   1728e:	e01e      	b.n	172ce <sendSMS+0xbe>
			case 'O':
			case 'U':
			case 'C':
			case 'F':
			strcat(msg,STR_MOTOR);
   17290:	687b      	ldr	r3, [r7, #4]
   17292:	0018      	movs	r0, r3
   17294:	4b3d      	ldr	r3, [pc, #244]	; (1738c <sendSMS+0x17c>)
   17296:	4798      	blx	r3
   17298:	0003      	movs	r3, r0
   1729a:	001a      	movs	r2, r3
   1729c:	687b      	ldr	r3, [r7, #4]
   1729e:	189a      	adds	r2, r3, r2
   172a0:	4b3b      	ldr	r3, [pc, #236]	; (17390 <sendSMS+0x180>)
   172a2:	0010      	movs	r0, r2
   172a4:	0019      	movs	r1, r3
   172a6:	2307      	movs	r3, #7
   172a8:	001a      	movs	r2, r3
   172aa:	4b3a      	ldr	r3, [pc, #232]	; (17394 <sendSMS+0x184>)
   172ac:	4798      	blx	r3
			strcat(msg,STR_OFF);
   172ae:	687b      	ldr	r3, [r7, #4]
   172b0:	0018      	movs	r0, r3
   172b2:	4b36      	ldr	r3, [pc, #216]	; (1738c <sendSMS+0x17c>)
   172b4:	4798      	blx	r3
   172b6:	0003      	movs	r3, r0
   172b8:	001a      	movs	r2, r3
   172ba:	687b      	ldr	r3, [r7, #4]
   172bc:	189a      	adds	r2, r3, r2
   172be:	4b37      	ldr	r3, [pc, #220]	; (1739c <sendSMS+0x18c>)
   172c0:	0010      	movs	r0, r2
   172c2:	0019      	movs	r1, r3
   172c4:	2304      	movs	r3, #4
   172c6:	001a      	movs	r2, r3
   172c8:	4b32      	ldr	r3, [pc, #200]	; (17394 <sendSMS+0x184>)
   172ca:	4798      	blx	r3
			break;
   172cc:	46c0      	nop			; (mov r8, r8)
		}
	}
	
	char phone_number[20];
	
	if(isM2M==SEND_TO_M2M_MASTER)
   172ce:	1cbb      	adds	r3, r7, #2
   172d0:	781b      	ldrb	r3, [r3, #0]
   172d2:	2b02      	cmp	r3, #2
   172d4:	d105      	bne.n	172e2 <sendSMS+0xd2>
	{
		getM2MNumber(phone_number);
   172d6:	2324      	movs	r3, #36	; 0x24
   172d8:	18fb      	adds	r3, r7, r3
   172da:	0018      	movs	r0, r3
   172dc:	4b30      	ldr	r3, [pc, #192]	; (173a0 <sendSMS+0x190>)
   172de:	4798      	blx	r3
   172e0:	e034      	b.n	1734c <sendSMS+0x13c>
	}
	else if (isM2M==SEND_TO_M2M_REMOTE)
   172e2:	1cbb      	adds	r3, r7, #2
   172e4:	781b      	ldrb	r3, [r3, #0]
   172e6:	2b01      	cmp	r3, #1
   172e8:	d109      	bne.n	172fe <sendSMS+0xee>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   172ea:	4b2e      	ldr	r3, [pc, #184]	; (173a4 <sendSMS+0x194>)
   172ec:	78db      	ldrb	r3, [r3, #3]
   172ee:	2b00      	cmp	r3, #0
   172f0:	d02c      	beq.n	1734c <sendSMS+0x13c>
		{
			getM2MRemoteNumber(phone_number);
   172f2:	2324      	movs	r3, #36	; 0x24
   172f4:	18fb      	adds	r3, r7, r3
   172f6:	0018      	movs	r0, r3
   172f8:	4b2b      	ldr	r3, [pc, #172]	; (173a8 <sendSMS+0x198>)
   172fa:	4798      	blx	r3
   172fc:	e026      	b.n	1734c <sendSMS+0x13c>
		}
	}
	else
	{
		if (isMsgFromAdmin)
   172fe:	4b2b      	ldr	r3, [pc, #172]	; (173ac <sendSMS+0x19c>)
   17300:	781b      	ldrb	r3, [r3, #0]
   17302:	2b00      	cmp	r3, #0
   17304:	d01d      	beq.n	17342 <sendSMS+0x132>
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
   17306:	4b2a      	ldr	r3, [pc, #168]	; (173b0 <sendSMS+0x1a0>)
   17308:	223c      	movs	r2, #60	; 0x3c
   1730a:	2100      	movs	r1, #0
   1730c:	0018      	movs	r0, r3
   1730e:	4b29      	ldr	r3, [pc, #164]	; (173b4 <sendSMS+0x1a4>)
   17310:	4798      	blx	r3
			eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE, page_data);
   17312:	4b27      	ldr	r3, [pc, #156]	; (173b0 <sendSMS+0x1a0>)
   17314:	0019      	movs	r1, r3
   17316:	2003      	movs	r0, #3
   17318:	4b27      	ldr	r3, [pc, #156]	; (173b8 <sendSMS+0x1a8>)
   1731a:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
   1731c:	230c      	movs	r3, #12
   1731e:	18fa      	adds	r2, r7, r3
   17320:	4b23      	ldr	r3, [pc, #140]	; (173b0 <sendSMS+0x1a0>)
   17322:	0010      	movs	r0, r2
   17324:	0019      	movs	r1, r3
   17326:	2318      	movs	r3, #24
   17328:	001a      	movs	r2, r3
   1732a:	4b1a      	ldr	r3, [pc, #104]	; (17394 <sendSMS+0x184>)
   1732c:	4798      	blx	r3
			strcpy(phone_number,mobile_no.mobile_no_ee);
   1732e:	230c      	movs	r3, #12
   17330:	18fb      	adds	r3, r7, r3
   17332:	1d1a      	adds	r2, r3, #4
   17334:	2324      	movs	r3, #36	; 0x24
   17336:	18fb      	adds	r3, r7, r3
   17338:	0011      	movs	r1, r2
   1733a:	0018      	movs	r0, r3
   1733c:	4b1f      	ldr	r3, [pc, #124]	; (173bc <sendSMS+0x1ac>)
   1733e:	4798      	blx	r3
   17340:	e004      	b.n	1734c <sendSMS+0x13c>
		}
		else
		{
			getActiveNumber(phone_number);
   17342:	2324      	movs	r3, #36	; 0x24
   17344:	18fb      	adds	r3, r7, r3
   17346:	0018      	movs	r0, r3
   17348:	4b1d      	ldr	r3, [pc, #116]	; (173c0 <sendSMS+0x1b0>)
   1734a:	4798      	blx	r3
		}
	}
	setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
   1734c:	2324      	movs	r3, #36	; 0x24
   1734e:	18fb      	adds	r3, r7, r3
   17350:	2200      	movs	r2, #0
   17352:	0019      	movs	r1, r3
   17354:	2005      	movs	r0, #5
   17356:	4b1b      	ldr	r3, [pc, #108]	; (173c4 <sendSMS+0x1b4>)
   17358:	4798      	blx	r3
	gsm_send_sms(phone_number,msg);
   1735a:	687a      	ldr	r2, [r7, #4]
   1735c:	2324      	movs	r3, #36	; 0x24
   1735e:	18fb      	adds	r3, r7, r3
   17360:	0011      	movs	r1, r2
   17362:	0018      	movs	r0, r3
   17364:	4b18      	ldr	r3, [pc, #96]	; (173c8 <sendSMS+0x1b8>)
   17366:	4798      	blx	r3
	isMsgFromAdmin = false;
   17368:	4b10      	ldr	r3, [pc, #64]	; (173ac <sendSMS+0x19c>)
   1736a:	2200      	movs	r2, #0
   1736c:	701a      	strb	r2, [r3, #0]
	inCall=false;
   1736e:	4b04      	ldr	r3, [pc, #16]	; (17380 <sendSMS+0x170>)
   17370:	2200      	movs	r2, #0
   17372:	701a      	strb	r2, [r3, #0]
   17374:	e000      	b.n	17378 <sendSMS+0x168>
			return;
   17376:	46c0      	nop			; (mov r8, r8)
}
   17378:	46bd      	mov	sp, r7
   1737a:	b00e      	add	sp, #56	; 0x38
   1737c:	bd80      	pop	{r7, pc}
   1737e:	46c0      	nop			; (mov r8, r8)
   17380:	20000794 	.word	0x20000794
   17384:	2000075b 	.word	0x2000075b
   17388:	0002a7a8 	.word	0x0002a7a8
   1738c:	000291a3 	.word	0x000291a3
   17390:	0002a73c 	.word	0x0002a73c
   17394:	00028edd 	.word	0x00028edd
   17398:	0002a6d0 	.word	0x0002a6d0
   1739c:	0002a744 	.word	0x0002a744
   173a0:	00010ac9 	.word	0x00010ac9
   173a4:	2000062c 	.word	0x2000062c
   173a8:	00010b05 	.word	0x00010b05
   173ac:	2000076f 	.word	0x2000076f
   173b0:	20000584 	.word	0x20000584
   173b4:	00028f13 	.word	0x00028f13
   173b8:	00023bfd 	.word	0x00023bfd
   173bc:	00029193 	.word	0x00029193
   173c0:	00010d1d 	.word	0x00010d1d
   173c4:	0001cc35 	.word	0x0001cc35
   173c8:	00012b05 	.word	0x00012b05

000173cc <sendDTMFTone>:

void sendDTMFTone(uint8_t eventNo)
{
   173cc:	b580      	push	{r7, lr}
   173ce:	b082      	sub	sp, #8
   173d0:	af00      	add	r7, sp, #0
   173d2:	0002      	movs	r2, r0
   173d4:	1dfb      	adds	r3, r7, #7
   173d6:	701a      	strb	r2, [r3, #0]
	if(eventNo==0xFF)
   173d8:	1dfb      	adds	r3, r7, #7
   173da:	781b      	ldrb	r3, [r3, #0]
   173dc:	2bff      	cmp	r3, #255	; 0xff
   173de:	d103      	bne.n	173e8 <sendDTMFTone+0x1c>
	{
		gsm_send_DTMF_Tone('A');
   173e0:	2041      	movs	r0, #65	; 0x41
   173e2:	4b0f      	ldr	r3, [pc, #60]	; (17420 <sendDTMFTone+0x54>)
   173e4:	4798      	blx	r3
	}
	else if (eventNo==1 && factory_settings_parameter_struct.ENABLE_M2M)
	{
		gsm_send_DTMF_Tone('C');
	}
}
   173e6:	e016      	b.n	17416 <sendDTMFTone+0x4a>
	else if (eventNo==0 && factory_settings_parameter_struct.ENABLE_M2M)
   173e8:	1dfb      	adds	r3, r7, #7
   173ea:	781b      	ldrb	r3, [r3, #0]
   173ec:	2b00      	cmp	r3, #0
   173ee:	d107      	bne.n	17400 <sendDTMFTone+0x34>
   173f0:	4b0c      	ldr	r3, [pc, #48]	; (17424 <sendDTMFTone+0x58>)
   173f2:	78db      	ldrb	r3, [r3, #3]
   173f4:	2b00      	cmp	r3, #0
   173f6:	d003      	beq.n	17400 <sendDTMFTone+0x34>
		gsm_send_DTMF_Tone('D');
   173f8:	2044      	movs	r0, #68	; 0x44
   173fa:	4b09      	ldr	r3, [pc, #36]	; (17420 <sendDTMFTone+0x54>)
   173fc:	4798      	blx	r3
}
   173fe:	e00a      	b.n	17416 <sendDTMFTone+0x4a>
	else if (eventNo==1 && factory_settings_parameter_struct.ENABLE_M2M)
   17400:	1dfb      	adds	r3, r7, #7
   17402:	781b      	ldrb	r3, [r3, #0]
   17404:	2b01      	cmp	r3, #1
   17406:	d106      	bne.n	17416 <sendDTMFTone+0x4a>
   17408:	4b06      	ldr	r3, [pc, #24]	; (17424 <sendDTMFTone+0x58>)
   1740a:	78db      	ldrb	r3, [r3, #3]
   1740c:	2b00      	cmp	r3, #0
   1740e:	d002      	beq.n	17416 <sendDTMFTone+0x4a>
		gsm_send_DTMF_Tone('C');
   17410:	2043      	movs	r0, #67	; 0x43
   17412:	4b03      	ldr	r3, [pc, #12]	; (17420 <sendDTMFTone+0x54>)
   17414:	4798      	blx	r3
}
   17416:	46c0      	nop			; (mov r8, r8)
   17418:	46bd      	mov	sp, r7
   1741a:	b002      	add	sp, #8
   1741c:	bd80      	pop	{r7, pc}
   1741e:	46c0      	nop			; (mov r8, r8)
   17420:	00012f79 	.word	0x00012f79
   17424:	2000062c 	.word	0x2000062c

00017428 <getSystemTime>:

void getSystemTime(uint8_t *Hours, uint8_t *Minutes)
{
   17428:	b580      	push	{r7, lr}
   1742a:	b082      	sub	sp, #8
   1742c:	af00      	add	r7, sp, #0
   1742e:	6078      	str	r0, [r7, #4]
   17430:	6039      	str	r1, [r7, #0]
	if (gsm_get_internal_rtc_time() == GSM_ERROR_NONE)
   17432:	4b09      	ldr	r3, [pc, #36]	; (17458 <getSystemTime+0x30>)
   17434:	4798      	blx	r3
   17436:	1e03      	subs	r3, r0, #0
   17438:	d109      	bne.n	1744e <getSystemTime+0x26>
	{
		*Hours = struct_internal_rtc.Network_hour;
   1743a:	4b08      	ldr	r3, [pc, #32]	; (1745c <getSystemTime+0x34>)
   1743c:	78db      	ldrb	r3, [r3, #3]
   1743e:	b2da      	uxtb	r2, r3
   17440:	687b      	ldr	r3, [r7, #4]
   17442:	701a      	strb	r2, [r3, #0]
		*Minutes = struct_internal_rtc.Network_minute;
   17444:	4b05      	ldr	r3, [pc, #20]	; (1745c <getSystemTime+0x34>)
   17446:	791b      	ldrb	r3, [r3, #4]
   17448:	b2da      	uxtb	r2, r3
   1744a:	683b      	ldr	r3, [r7, #0]
   1744c:	701a      	strb	r2, [r3, #0]
	}
}
   1744e:	46c0      	nop			; (mov r8, r8)
   17450:	46bd      	mov	sp, r7
   17452:	b002      	add	sp, #8
   17454:	bd80      	pop	{r7, pc}
   17456:	46c0      	nop			; (mov r8, r8)
   17458:	00013159 	.word	0x00013159
   1745c:	20000688 	.word	0x20000688

00017460 <vTask_GSM_service>:
#define GSM_PWR_AS_OP	GSM_PWR_DDR|=GSM_PWR_POS
#define GSM_PWR_ON		GSM_PWR_PORT|=GSM_PWR_POS
#define GSM_PWR_OFF		GSM_PWR_PORT&=~(GSM_PWR_POS)
//////////////////////////////////////////////////////////////////////////
static void vTask_GSM_service(void *params)
{
   17460:	b590      	push	{r4, r7, lr}
   17462:	b0d7      	sub	sp, #348	; 0x15c
   17464:	af02      	add	r7, sp, #8
   17466:	6078      	str	r0, [r7, #4]
	
	uint32_t network_update_time = 0;
   17468:	2300      	movs	r3, #0
   1746a:	22a6      	movs	r2, #166	; 0xa6
   1746c:	0052      	lsls	r2, r2, #1
   1746e:	18ba      	adds	r2, r7, r2
   17470:	6013      	str	r3, [r2, #0]
	
	GSM_PWR_AS_OP;
   17472:	4bc8      	ldr	r3, [pc, #800]	; (17794 <vTask_GSM_service+0x334>)
   17474:	4ac7      	ldr	r2, [pc, #796]	; (17794 <vTask_GSM_service+0x334>)
   17476:	6812      	ldr	r2, [r2, #0]
   17478:	2180      	movs	r1, #128	; 0x80
   1747a:	0249      	lsls	r1, r1, #9
   1747c:	430a      	orrs	r2, r1
   1747e:	601a      	str	r2, [r3, #0]
	
	struct port_config pin_conf_gsm_status;
	port_get_config_defaults(&pin_conf_gsm_status);
   17480:	2398      	movs	r3, #152	; 0x98
   17482:	005b      	lsls	r3, r3, #1
   17484:	18fb      	adds	r3, r7, r3
   17486:	0018      	movs	r0, r3
   17488:	4bc3      	ldr	r3, [pc, #780]	; (17798 <vTask_GSM_service+0x338>)
   1748a:	4798      	blx	r3
	pin_conf_gsm_status.direction  = PORT_PIN_DIR_INPUT;
   1748c:	2398      	movs	r3, #152	; 0x98
   1748e:	005b      	lsls	r3, r3, #1
   17490:	18fb      	adds	r3, r7, r3
   17492:	2200      	movs	r2, #0
   17494:	701a      	strb	r2, [r3, #0]
	pin_conf_gsm_status.input_pull = PORT_PIN_PULL_NONE;
   17496:	2398      	movs	r3, #152	; 0x98
   17498:	005b      	lsls	r3, r3, #1
   1749a:	18fb      	adds	r3, r7, r3
   1749c:	2200      	movs	r2, #0
   1749e:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(GSM_STATUS_POSITION, &pin_conf_gsm_status);
   174a0:	2398      	movs	r3, #152	; 0x98
   174a2:	005b      	lsls	r3, r3, #1
   174a4:	18fb      	adds	r3, r7, r3
   174a6:	0019      	movs	r1, r3
   174a8:	201b      	movs	r0, #27
   174aa:	4bbc      	ldr	r3, [pc, #752]	; (1779c <vTask_GSM_service+0x33c>)
   174ac:	4798      	blx	r3
	
	gsm_init();
   174ae:	4bbc      	ldr	r3, [pc, #752]	; (177a0 <vTask_GSM_service+0x340>)
   174b0:	4798      	blx	r3
	
	initialized = false;
   174b2:	4bbc      	ldr	r3, [pc, #752]	; (177a4 <vTask_GSM_service+0x344>)
   174b4:	2200      	movs	r2, #0
   174b6:	701a      	strb	r2, [r3, #0]
	
	
	inCall=false;
   174b8:	4bbb      	ldr	r3, [pc, #748]	; (177a8 <vTask_GSM_service+0x348>)
   174ba:	2200      	movs	r2, #0
   174bc:	701a      	strb	r2, [r3, #0]
	simReInit=false;
   174be:	4bbb      	ldr	r3, [pc, #748]	; (177ac <vTask_GSM_service+0x34c>)
   174c0:	2200      	movs	r2, #0
   174c2:	701a      	strb	r2, [r3, #0]
	
	bool boolGsm_config_flag			=false;
   174c4:	234c      	movs	r3, #76	; 0x4c
   174c6:	33ff      	adds	r3, #255	; 0xff
   174c8:	18fb      	adds	r3, r7, r3
   174ca:	2200      	movs	r2, #0
   174cc:	701a      	strb	r2, [r3, #0]
	bool boolOne_Time_Msg_Delete_Flag   =false;
   174ce:	23a5      	movs	r3, #165	; 0xa5
   174d0:	005b      	lsls	r3, r3, #1
   174d2:	18fb      	adds	r3, r7, r3
   174d4:	2200      	movs	r2, #0
   174d6:	701a      	strb	r2, [r3, #0]
	
	Signal_Strength = 0;
   174d8:	4bb5      	ldr	r3, [pc, #724]	; (177b0 <vTask_GSM_service+0x350>)
   174da:	2200      	movs	r2, #0
   174dc:	701a      	strb	r2, [r3, #0]
	
	soundWaitTime = 5;
   174de:	4bb5      	ldr	r3, [pc, #724]	; (177b4 <vTask_GSM_service+0x354>)
   174e0:	2205      	movs	r2, #5
   174e2:	701a      	strb	r2, [r3, #0]
	bplaySound = false;
   174e4:	4bb4      	ldr	r3, [pc, #720]	; (177b8 <vTask_GSM_service+0x358>)
   174e6:	2200      	movs	r2, #0
   174e8:	701a      	strb	r2, [r3, #0]
	
	//actionType = 'N';
	callCutWaitTime = 580;
   174ea:	4bb4      	ldr	r3, [pc, #720]	; (177bc <vTask_GSM_service+0x35c>)
   174ec:	2291      	movs	r2, #145	; 0x91
   174ee:	0092      	lsls	r2, r2, #2
   174f0:	801a      	strh	r2, [r3, #0]
	nr = 0;
   174f2:	4bb3      	ldr	r3, [pc, #716]	; (177c0 <vTask_GSM_service+0x360>)
   174f4:	2200      	movs	r2, #0
   174f6:	701a      	strb	r2, [r3, #0]
	currentStatus = 'N';
   174f8:	4bb2      	ldr	r3, [pc, #712]	; (177c4 <vTask_GSM_service+0x364>)
   174fa:	224e      	movs	r2, #78	; 0x4e
   174fc:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'N';
   174fe:	4bb2      	ldr	r3, [pc, #712]	; (177c8 <vTask_GSM_service+0x368>)
   17500:	224e      	movs	r2, #78	; 0x4e
   17502:	701a      	strb	r2, [r3, #0]
	callAccepted = false;
   17504:	4bb1      	ldr	r3, [pc, #708]	; (177cc <vTask_GSM_service+0x36c>)
   17506:	2200      	movs	r2, #0
   17508:	701a      	strb	r2, [r3, #0]
	freezeIncomingCalls = false;
   1750a:	4bb1      	ldr	r3, [pc, #708]	; (177d0 <vTask_GSM_service+0x370>)
   1750c:	2200      	movs	r2, #0
   1750e:	701a      	strb	r2, [r3, #0]
	obtainNewEvent = true;
   17510:	4bb0      	ldr	r3, [pc, #704]	; (177d4 <vTask_GSM_service+0x374>)
   17512:	2201      	movs	r2, #1
   17514:	701a      	strb	r2, [r3, #0]
	isMsgFromAdmin = false;
   17516:	4bb0      	ldr	r3, [pc, #704]	; (177d8 <vTask_GSM_service+0x378>)
   17518:	2200      	movs	r2, #0
   1751a:	701a      	strb	r2, [r3, #0]
	eventStaged=false;
   1751c:	4baf      	ldr	r3, [pc, #700]	; (177dc <vTask_GSM_service+0x37c>)
   1751e:	2200      	movs	r2, #0
   17520:	701a      	strb	r2, [r3, #0]
	stagedEventType = 'N';
   17522:	4baf      	ldr	r3, [pc, #700]	; (177e0 <vTask_GSM_service+0x380>)
   17524:	224e      	movs	r2, #78	; 0x4e
   17526:	701a      	strb	r2, [r3, #0]
	isRegisteredNumber=false;
   17528:	4bae      	ldr	r3, [pc, #696]	; (177e4 <vTask_GSM_service+0x384>)
   1752a:	2200      	movs	r2, #0
   1752c:	701a      	strb	r2, [r3, #0]
	retries=0;
   1752e:	4bae      	ldr	r3, [pc, #696]	; (177e8 <vTask_GSM_service+0x388>)
   17530:	2200      	movs	r2, #0
   17532:	701a      	strb	r2, [r3, #0]
	
	mcuWakeUpFromSleep=false;
   17534:	4bad      	ldr	r3, [pc, #692]	; (177ec <vTask_GSM_service+0x38c>)
   17536:	2200      	movs	r2, #0
   17538:	701a      	strb	r2, [r3, #0]
	
	
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1753a:	4bad      	ldr	r3, [pc, #692]	; (177f0 <vTask_GSM_service+0x390>)
   1753c:	785b      	ldrb	r3, [r3, #1]
   1753e:	2b00      	cmp	r3, #0
   17540:	d002      	beq.n	17548 <vTask_GSM_service+0xe8>
	{
		zeroPressed=false;
   17542:	4bac      	ldr	r3, [pc, #688]	; (177f4 <vTask_GSM_service+0x394>)
   17544:	2200      	movs	r2, #0
   17546:	701a      	strb	r2, [r3, #0]
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
   17548:	4ba9      	ldr	r3, [pc, #676]	; (177f0 <vTask_GSM_service+0x390>)
   1754a:	78db      	ldrb	r3, [r3, #3]
   1754c:	2b00      	cmp	r3, #0
   1754e:	d012      	beq.n	17576 <vTask_GSM_service+0x116>
	{
		m2mAck=false;
   17550:	4ba9      	ldr	r3, [pc, #676]	; (177f8 <vTask_GSM_service+0x398>)
   17552:	2200      	movs	r2, #0
   17554:	701a      	strb	r2, [r3, #0]
		m2mEventCalls=m2mEventNo=0;
   17556:	4ba9      	ldr	r3, [pc, #676]	; (177fc <vTask_GSM_service+0x39c>)
   17558:	2200      	movs	r2, #0
   1755a:	701a      	strb	r2, [r3, #0]
   1755c:	4ba7      	ldr	r3, [pc, #668]	; (177fc <vTask_GSM_service+0x39c>)
   1755e:	781a      	ldrb	r2, [r3, #0]
   17560:	4ba7      	ldr	r3, [pc, #668]	; (17800 <vTask_GSM_service+0x3a0>)
   17562:	701a      	strb	r2, [r3, #0]
		m2mEventStaged=false;
   17564:	4ba7      	ldr	r3, [pc, #668]	; (17804 <vTask_GSM_service+0x3a4>)
   17566:	2200      	movs	r2, #0
   17568:	701a      	strb	r2, [r3, #0]
		m2mEvent=false;
   1756a:	4ba7      	ldr	r3, [pc, #668]	; (17808 <vTask_GSM_service+0x3a8>)
   1756c:	2200      	movs	r2, #0
   1756e:	701a      	strb	r2, [r3, #0]
		keyPressed=false;
   17570:	4ba6      	ldr	r3, [pc, #664]	; (1780c <vTask_GSM_service+0x3ac>)
   17572:	2200      	movs	r2, #0
   17574:	701a      	strb	r2, [r3, #0]
	}
	
	if(GSM_STATUS_OK)
   17576:	201b      	movs	r0, #27
   17578:	4ba5      	ldr	r3, [pc, #660]	; (17810 <vTask_GSM_service+0x3b0>)
   1757a:	4798      	blx	r3
   1757c:	1e03      	subs	r3, r0, #0
   1757e:	d01e      	beq.n	175be <vTask_GSM_service+0x15e>
	{
		boolGsm_config_flag			=false;
   17580:	234c      	movs	r3, #76	; 0x4c
   17582:	33ff      	adds	r3, #255	; 0xff
   17584:	18fb      	adds	r3, r7, r3
   17586:	2200      	movs	r2, #0
   17588:	701a      	strb	r2, [r3, #0]
		boolOne_Time_Msg_Delete_Flag   =false;
   1758a:	23a5      	movs	r3, #165	; 0xa5
   1758c:	005b      	lsls	r3, r3, #1
   1758e:	18fb      	adds	r3, r7, r3
   17590:	2200      	movs	r2, #0
   17592:	701a      	strb	r2, [r3, #0]
		
		GSM_PWR_ON;
   17594:	4b9f      	ldr	r3, [pc, #636]	; (17814 <vTask_GSM_service+0x3b4>)
   17596:	4a9f      	ldr	r2, [pc, #636]	; (17814 <vTask_GSM_service+0x3b4>)
   17598:	6812      	ldr	r2, [r2, #0]
   1759a:	2180      	movs	r1, #128	; 0x80
   1759c:	0249      	lsls	r1, r1, #9
   1759e:	430a      	orrs	r2, r1
   175a0:	601a      	str	r2, [r3, #0]
		vTaskDelay(3000);
   175a2:	4b9d      	ldr	r3, [pc, #628]	; (17818 <vTask_GSM_service+0x3b8>)
   175a4:	0018      	movs	r0, r3
   175a6:	4b9d      	ldr	r3, [pc, #628]	; (1781c <vTask_GSM_service+0x3bc>)
   175a8:	4798      	blx	r3
		GSM_PWR_OFF;
   175aa:	4b9a      	ldr	r3, [pc, #616]	; (17814 <vTask_GSM_service+0x3b4>)
   175ac:	4a99      	ldr	r2, [pc, #612]	; (17814 <vTask_GSM_service+0x3b4>)
   175ae:	6812      	ldr	r2, [r2, #0]
   175b0:	499b      	ldr	r1, [pc, #620]	; (17820 <vTask_GSM_service+0x3c0>)
   175b2:	400a      	ands	r2, r1
   175b4:	601a      	str	r2, [r3, #0]
		vTaskDelay(5000);
   175b6:	4b9b      	ldr	r3, [pc, #620]	; (17824 <vTask_GSM_service+0x3c4>)
   175b8:	0018      	movs	r0, r3
   175ba:	4b98      	ldr	r3, [pc, #608]	; (1781c <vTask_GSM_service+0x3bc>)
   175bc:	4798      	blx	r3
	}
	
	isGSMModuleAwake=false;
   175be:	4b9a      	ldr	r3, [pc, #616]	; (17828 <vTask_GSM_service+0x3c8>)
   175c0:	2200      	movs	r2, #0
   175c2:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(GSM_DTR_PIN, GSM_DTR_PIN_ACTIVE);
   175c4:	2101      	movs	r1, #1
   175c6:	2014      	movs	r0, #20
   175c8:	4b98      	ldr	r3, [pc, #608]	; (1782c <vTask_GSM_service+0x3cc>)
   175ca:	4798      	blx	r3
	lastGSMCommunicationTime=0;
   175cc:	4b98      	ldr	r3, [pc, #608]	; (17830 <vTask_GSM_service+0x3d0>)
   175ce:	2200      	movs	r2, #0
   175d0:	601a      	str	r2, [r3, #0]
	gsm_module_exit_sleep(false);				//to switch DTR pin so that sim remains active
   175d2:	2000      	movs	r0, #0
   175d4:	4b97      	ldr	r3, [pc, #604]	; (17834 <vTask_GSM_service+0x3d4>)
   175d6:	4798      	blx	r3

	for (;;)
	{
		if (GSM_STATUS_OK)
   175d8:	201b      	movs	r0, #27
   175da:	4b8d      	ldr	r3, [pc, #564]	; (17810 <vTask_GSM_service+0x3b0>)
   175dc:	4798      	blx	r3
   175de:	1e03      	subs	r3, r0, #0
   175e0:	d101      	bne.n	175e6 <vTask_GSM_service+0x186>
   175e2:	f000 fd37 	bl	18054 <vTask_GSM_service+0xbf4>
		{
			if (boolGsm_config_flag == false)
   175e6:	234c      	movs	r3, #76	; 0x4c
   175e8:	33ff      	adds	r3, #255	; 0xff
   175ea:	18fb      	adds	r3, r7, r3
   175ec:	781b      	ldrb	r3, [r3, #0]
   175ee:	2201      	movs	r2, #1
   175f0:	4053      	eors	r3, r2
   175f2:	b2db      	uxtb	r3, r3
   175f4:	2b00      	cmp	r3, #0
   175f6:	d038      	beq.n	1766a <vTask_GSM_service+0x20a>
			{
				
				if (gsm_is_network_registered() == GSM_NETWORK_REGISTERED)
   175f8:	4b8f      	ldr	r3, [pc, #572]	; (17838 <vTask_GSM_service+0x3d8>)
   175fa:	4798      	blx	r3
   175fc:	0003      	movs	r3, r0
   175fe:	2b09      	cmp	r3, #9
   17600:	d12d      	bne.n	1765e <vTask_GSM_service+0x1fe>
				{
					if(gsm_config_module()==GSM_ERROR_NONE)
   17602:	4b8e      	ldr	r3, [pc, #568]	; (1783c <vTask_GSM_service+0x3dc>)
   17604:	4798      	blx	r3
   17606:	1e03      	subs	r3, r0, #0
   17608:	d123      	bne.n	17652 <vTask_GSM_service+0x1f2>
					{
						for (uint8_t i=0;i<20;i++)
   1760a:	234a      	movs	r3, #74	; 0x4a
   1760c:	33ff      	adds	r3, #255	; 0xff
   1760e:	18fb      	adds	r3, r7, r3
   17610:	2200      	movs	r2, #0
   17612:	701a      	strb	r2, [r3, #0]
   17614:	e011      	b.n	1763a <vTask_GSM_service+0x1da>
						{
							Signal_Strength = gsm_getsignalstrength();
   17616:	4b8a      	ldr	r3, [pc, #552]	; (17840 <vTask_GSM_service+0x3e0>)
   17618:	4798      	blx	r3
   1761a:	0003      	movs	r3, r0
   1761c:	001a      	movs	r2, r3
   1761e:	4b64      	ldr	r3, [pc, #400]	; (177b0 <vTask_GSM_service+0x350>)
   17620:	701a      	strb	r2, [r3, #0]
							vTaskDelay(50);
   17622:	2032      	movs	r0, #50	; 0x32
   17624:	4b7d      	ldr	r3, [pc, #500]	; (1781c <vTask_GSM_service+0x3bc>)
   17626:	4798      	blx	r3
						for (uint8_t i=0;i<20;i++)
   17628:	234a      	movs	r3, #74	; 0x4a
   1762a:	33ff      	adds	r3, #255	; 0xff
   1762c:	18fb      	adds	r3, r7, r3
   1762e:	781a      	ldrb	r2, [r3, #0]
   17630:	234a      	movs	r3, #74	; 0x4a
   17632:	33ff      	adds	r3, #255	; 0xff
   17634:	18fb      	adds	r3, r7, r3
   17636:	3201      	adds	r2, #1
   17638:	701a      	strb	r2, [r3, #0]
   1763a:	234a      	movs	r3, #74	; 0x4a
   1763c:	33ff      	adds	r3, #255	; 0xff
   1763e:	18fb      	adds	r3, r7, r3
   17640:	781b      	ldrb	r3, [r3, #0]
   17642:	2b13      	cmp	r3, #19
   17644:	d9e7      	bls.n	17616 <vTask_GSM_service+0x1b6>
						}
						boolGsm_config_flag = true;
   17646:	234c      	movs	r3, #76	; 0x4c
   17648:	33ff      	adds	r3, #255	; 0xff
   1764a:	18fb      	adds	r3, r7, r3
   1764c:	2201      	movs	r2, #1
   1764e:	701a      	strb	r2, [r3, #0]
   17650:	e7c2      	b.n	175d8 <vTask_GSM_service+0x178>
					}
					else
					{
						boolGsm_config_flag = false;
   17652:	234c      	movs	r3, #76	; 0x4c
   17654:	33ff      	adds	r3, #255	; 0xff
   17656:	18fb      	adds	r3, r7, r3
   17658:	2200      	movs	r2, #0
   1765a:	701a      	strb	r2, [r3, #0]
   1765c:	e7bc      	b.n	175d8 <vTask_GSM_service+0x178>
					}
				}
				else
				{
					vTaskDelay(2000/portTICK_PERIOD_MS);
   1765e:	23fa      	movs	r3, #250	; 0xfa
   17660:	00db      	lsls	r3, r3, #3
   17662:	0018      	movs	r0, r3
   17664:	4b6d      	ldr	r3, [pc, #436]	; (1781c <vTask_GSM_service+0x3bc>)
   17666:	4798      	blx	r3
   17668:	e7b6      	b.n	175d8 <vTask_GSM_service+0x178>
				}
			}
			else
			{
				if(mcuWakeUpFromSleep)
   1766a:	4b60      	ldr	r3, [pc, #384]	; (177ec <vTask_GSM_service+0x38c>)
   1766c:	781b      	ldrb	r3, [r3, #0]
   1766e:	b2db      	uxtb	r3, r3
   17670:	2b00      	cmp	r3, #0
   17672:	d005      	beq.n	17680 <vTask_GSM_service+0x220>
				{
					mcuWakeUpFromSleep=false;
   17674:	4b5d      	ldr	r3, [pc, #372]	; (177ec <vTask_GSM_service+0x38c>)
   17676:	2200      	movs	r2, #0
   17678:	701a      	strb	r2, [r3, #0]
					gsm_module_exit_sleep(false);
   1767a:	2000      	movs	r0, #0
   1767c:	4b6d      	ldr	r3, [pc, #436]	; (17834 <vTask_GSM_service+0x3d4>)
   1767e:	4798      	blx	r3
				
				
				/************************************************************************/
				/* Firmware Update Status SMS                                           */
				/************************************************************************/
				if(bootloader_parameter.firmware_update_process_completed)
   17680:	4b70      	ldr	r3, [pc, #448]	; (17844 <vTask_GSM_service+0x3e4>)
   17682:	799b      	ldrb	r3, [r3, #6]
   17684:	2b00      	cmp	r3, #0
   17686:	d05e      	beq.n	17746 <vTask_GSM_service+0x2e6>
				{
					char uResp_SMS[30];
					memset(uResp_SMS, '\0', sizeof(uResp_SMS));
   17688:	2388      	movs	r3, #136	; 0x88
   1768a:	005b      	lsls	r3, r3, #1
   1768c:	18fb      	adds	r3, r7, r3
   1768e:	221e      	movs	r2, #30
   17690:	2100      	movs	r1, #0
   17692:	0018      	movs	r0, r3
   17694:	4b6c      	ldr	r3, [pc, #432]	; (17848 <vTask_GSM_service+0x3e8>)
   17696:	4798      	blx	r3
					/*Firmware update Completed Successfully*/
					if(bootloader_parameter.firmware_update_error_code==0)
   17698:	4b6a      	ldr	r3, [pc, #424]	; (17844 <vTask_GSM_service+0x3e4>)
   1769a:	79db      	ldrb	r3, [r3, #7]
   1769c:	2b00      	cmp	r3, #0
   1769e:	d10a      	bne.n	176b6 <vTask_GSM_service+0x256>
					{
						strcpy(uResp_SMS,"F/W Update Completed");
   176a0:	2388      	movs	r3, #136	; 0x88
   176a2:	005b      	lsls	r3, r3, #1
   176a4:	18fb      	adds	r3, r7, r3
   176a6:	4a69      	ldr	r2, [pc, #420]	; (1784c <vTask_GSM_service+0x3ec>)
   176a8:	ca13      	ldmia	r2!, {r0, r1, r4}
   176aa:	c313      	stmia	r3!, {r0, r1, r4}
   176ac:	ca03      	ldmia	r2!, {r0, r1}
   176ae:	c303      	stmia	r3!, {r0, r1}
   176b0:	7812      	ldrb	r2, [r2, #0]
   176b2:	701a      	strb	r2, [r3, #0]
   176b4:	e009      	b.n	176ca <vTask_GSM_service+0x26a>
					}
					/*Error in Firmware update*/
					else
					{
						strcpy(uResp_SMS,"F/W Update Error");
   176b6:	2388      	movs	r3, #136	; 0x88
   176b8:	005b      	lsls	r3, r3, #1
   176ba:	18fb      	adds	r3, r7, r3
   176bc:	4a64      	ldr	r2, [pc, #400]	; (17850 <vTask_GSM_service+0x3f0>)
   176be:	ca13      	ldmia	r2!, {r0, r1, r4}
   176c0:	c313      	stmia	r3!, {r0, r1, r4}
   176c2:	6811      	ldr	r1, [r2, #0]
   176c4:	6019      	str	r1, [r3, #0]
   176c6:	7912      	ldrb	r2, [r2, #4]
   176c8:	711a      	strb	r2, [r3, #4]
					}
				
					if(bootloader_parameter.firmware_updater_mobile_no[0]!='0')
   176ca:	4b5e      	ldr	r3, [pc, #376]	; (17844 <vTask_GSM_service+0x3e4>)
   176cc:	7b1b      	ldrb	r3, [r3, #12]
   176ce:	2b30      	cmp	r3, #48	; 0x30
   176d0:	d008      	beq.n	176e4 <vTask_GSM_service+0x284>
					{
						gsm_send_sms(bootloader_parameter.firmware_updater_mobile_no,uResp_SMS);
   176d2:	2388      	movs	r3, #136	; 0x88
   176d4:	005b      	lsls	r3, r3, #1
   176d6:	18fa      	adds	r2, r7, r3
   176d8:	4b5e      	ldr	r3, [pc, #376]	; (17854 <vTask_GSM_service+0x3f4>)
   176da:	0011      	movs	r1, r2
   176dc:	0018      	movs	r0, r3
   176de:	4b5e      	ldr	r3, [pc, #376]	; (17858 <vTask_GSM_service+0x3f8>)
   176e0:	4798      	blx	r3
   176e2:	e006      	b.n	176f2 <vTask_GSM_service+0x292>
					}
					else
					{
						gsm_send_sms(ADMIN_1_MOBILE_NUMBER_PAGE,uResp_SMS);
   176e4:	2388      	movs	r3, #136	; 0x88
   176e6:	005b      	lsls	r3, r3, #1
   176e8:	18fb      	adds	r3, r7, r3
   176ea:	0019      	movs	r1, r3
   176ec:	2003      	movs	r0, #3
   176ee:	4b5a      	ldr	r3, [pc, #360]	; (17858 <vTask_GSM_service+0x3f8>)
   176f0:	4798      	blx	r3
					}
					
					bootloader_parameter.ulongintDiscard = 0;
   176f2:	4b54      	ldr	r3, [pc, #336]	; (17844 <vTask_GSM_service+0x3e4>)
   176f4:	2200      	movs	r2, #0
   176f6:	601a      	str	r2, [r3, #0]
					bootloader_parameter.firmware_download_pending = false;
   176f8:	4b52      	ldr	r3, [pc, #328]	; (17844 <vTask_GSM_service+0x3e4>)
   176fa:	2200      	movs	r2, #0
   176fc:	715a      	strb	r2, [r3, #5]
					bootloader_parameter.firmware_update_process_completed = false;
   176fe:	4b51      	ldr	r3, [pc, #324]	; (17844 <vTask_GSM_service+0x3e4>)
   17700:	2200      	movs	r2, #0
   17702:	719a      	strb	r2, [r3, #6]
					bootloader_parameter.firmware_update_error_code = 0;
   17704:	4b4f      	ldr	r3, [pc, #316]	; (17844 <vTask_GSM_service+0x3e4>)
   17706:	2200      	movs	r2, #0
   17708:	71da      	strb	r2, [r3, #7]
					bootloader_parameter.retries = 0;
   1770a:	4b4e      	ldr	r3, [pc, #312]	; (17844 <vTask_GSM_service+0x3e4>)
   1770c:	2200      	movs	r2, #0
   1770e:	721a      	strb	r2, [r3, #8]
					
					memset(bootloader_parameter.firmware_updater_mobile_no, '\0', sizeof(bootloader_parameter.firmware_updater_mobile_no));
   17710:	4b50      	ldr	r3, [pc, #320]	; (17854 <vTask_GSM_service+0x3f4>)
   17712:	2210      	movs	r2, #16
   17714:	2100      	movs	r1, #0
   17716:	0018      	movs	r0, r3
   17718:	4b4b      	ldr	r3, [pc, #300]	; (17848 <vTask_GSM_service+0x3e8>)
   1771a:	4798      	blx	r3
					strcpy(bootloader_parameter.firmware_updater_mobile_no,"0000000000");
   1771c:	4b4d      	ldr	r3, [pc, #308]	; (17854 <vTask_GSM_service+0x3f4>)
   1771e:	4a4f      	ldr	r2, [pc, #316]	; (1785c <vTask_GSM_service+0x3fc>)
   17720:	ca03      	ldmia	r2!, {r0, r1}
   17722:	c303      	stmia	r3!, {r0, r1}
   17724:	8811      	ldrh	r1, [r2, #0]
   17726:	8019      	strh	r1, [r3, #0]
   17728:	7892      	ldrb	r2, [r2, #2]
   1772a:	709a      	strb	r2, [r3, #2]
					
					memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
   1772c:	4945      	ldr	r1, [pc, #276]	; (17844 <vTask_GSM_service+0x3e4>)
   1772e:	4b4c      	ldr	r3, [pc, #304]	; (17860 <vTask_GSM_service+0x400>)
   17730:	221c      	movs	r2, #28
   17732:	0018      	movs	r0, r3
   17734:	4b4b      	ldr	r3, [pc, #300]	; (17864 <vTask_GSM_service+0x404>)
   17736:	4798      	blx	r3
                    eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
   17738:	4b49      	ldr	r3, [pc, #292]	; (17860 <vTask_GSM_service+0x400>)
   1773a:	0019      	movs	r1, r3
   1773c:	2000      	movs	r0, #0
   1773e:	4b4a      	ldr	r3, [pc, #296]	; (17868 <vTask_GSM_service+0x408>)
   17740:	4798      	blx	r3
					eeprom_emulator_commit_page_buffer();
   17742:	4b4a      	ldr	r3, [pc, #296]	; (1786c <vTask_GSM_service+0x40c>)
   17744:	4798      	blx	r3
				}
				
				if ((boolOne_Time_Msg_Delete_Flag == false) && (boolGsm_config_flag == true))
   17746:	23a5      	movs	r3, #165	; 0xa5
   17748:	005b      	lsls	r3, r3, #1
   1774a:	18fb      	adds	r3, r7, r3
   1774c:	781b      	ldrb	r3, [r3, #0]
   1774e:	2201      	movs	r2, #1
   17750:	4053      	eors	r3, r2
   17752:	b2db      	uxtb	r3, r3
   17754:	2b00      	cmp	r3, #0
   17756:	d100      	bne.n	1775a <vTask_GSM_service+0x2fa>
   17758:	e08c      	b.n	17874 <vTask_GSM_service+0x414>
   1775a:	234c      	movs	r3, #76	; 0x4c
   1775c:	33ff      	adds	r3, #255	; 0xff
   1775e:	18fb      	adds	r3, r7, r3
   17760:	781b      	ldrb	r3, [r3, #0]
   17762:	2b00      	cmp	r3, #0
   17764:	d100      	bne.n	17768 <vTask_GSM_service+0x308>
   17766:	e085      	b.n	17874 <vTask_GSM_service+0x414>
				{
					if (gsm_delete_all_sms() == GSM_ERROR_NONE)
   17768:	4b41      	ldr	r3, [pc, #260]	; (17870 <vTask_GSM_service+0x410>)
   1776a:	4798      	blx	r3
   1776c:	1e03      	subs	r3, r0, #0
   1776e:	d109      	bne.n	17784 <vTask_GSM_service+0x324>
					{
						boolOne_Time_Msg_Delete_Flag = true;
   17770:	23a5      	movs	r3, #165	; 0xa5
   17772:	005b      	lsls	r3, r3, #1
   17774:	18fb      	adds	r3, r7, r3
   17776:	2201      	movs	r2, #1
   17778:	701a      	strb	r2, [r3, #0]
						initialized = true;
   1777a:	4b0a      	ldr	r3, [pc, #40]	; (177a4 <vTask_GSM_service+0x344>)
   1777c:	2201      	movs	r2, #1
   1777e:	701a      	strb	r2, [r3, #0]
					if (gsm_delete_all_sms() == GSM_ERROR_NONE)
   17780:	f000 fc8d 	bl	1809e <vTask_GSM_service+0xc3e>
					}
					else
					{
						boolOne_Time_Msg_Delete_Flag = false;
   17784:	23a5      	movs	r3, #165	; 0xa5
   17786:	005b      	lsls	r3, r3, #1
   17788:	18fb      	adds	r3, r7, r3
   1778a:	2200      	movs	r2, #0
   1778c:	701a      	strb	r2, [r3, #0]
					if (gsm_delete_all_sms() == GSM_ERROR_NONE)
   1778e:	f000 fc86 	bl	1809e <vTask_GSM_service+0xc3e>
   17792:	46c0      	nop			; (mov r8, r8)
   17794:	41004480 	.word	0x41004480
   17798:	00014121 	.word	0x00014121
   1779c:	00023071 	.word	0x00023071
   177a0:	0001214d 	.word	0x0001214d
   177a4:	20000795 	.word	0x20000795
   177a8:	20000794 	.word	0x20000794
   177ac:	20000777 	.word	0x20000777
   177b0:	20000781 	.word	0x20000781
   177b4:	200007d1 	.word	0x200007d1
   177b8:	20000861 	.word	0x20000861
   177bc:	2000075c 	.word	0x2000075c
   177c0:	200006d8 	.word	0x200006d8
   177c4:	200007d8 	.word	0x200007d8
   177c8:	20000787 	.word	0x20000787
   177cc:	20000796 	.word	0x20000796
   177d0:	2000073c 	.word	0x2000073c
   177d4:	2000076a 	.word	0x2000076a
   177d8:	2000076f 	.word	0x2000076f
   177dc:	200007ce 	.word	0x200007ce
   177e0:	2000076d 	.word	0x2000076d
   177e4:	20000790 	.word	0x20000790
   177e8:	200006d9 	.word	0x200006d9
   177ec:	20000840 	.word	0x20000840
   177f0:	2000062c 	.word	0x2000062c
   177f4:	2000080b 	.word	0x2000080b
   177f8:	20000720 	.word	0x20000720
   177fc:	20000721 	.word	0x20000721
   17800:	200007cf 	.word	0x200007cf
   17804:	20000786 	.word	0x20000786
   17808:	2000073b 	.word	0x2000073b
   1780c:	200007cc 	.word	0x200007cc
   17810:	00014145 	.word	0x00014145
   17814:	41004490 	.word	0x41004490
   17818:	00000bb8 	.word	0x00000bb8
   1781c:	0001ffe9 	.word	0x0001ffe9
   17820:	fffeffff 	.word	0xfffeffff
   17824:	00001388 	.word	0x00001388
   17828:	20000684 	.word	0x20000684
   1782c:	00014189 	.word	0x00014189
   17830:	2000022c 	.word	0x2000022c
   17834:	00012301 	.word	0x00012301
   17838:	000125f1 	.word	0x000125f1
   1783c:	0001330d 	.word	0x0001330d
   17840:	000128bd 	.word	0x000128bd
   17844:	200005f8 	.word	0x200005f8
   17848:	00028f13 	.word	0x00028f13
   1784c:	0002a748 	.word	0x0002a748
   17850:	0002a760 	.word	0x0002a760
   17854:	20000604 	.word	0x20000604
   17858:	00012b05 	.word	0x00012b05
   1785c:	0002a774 	.word	0x0002a774
   17860:	20000584 	.word	0x20000584
   17864:	00028edd 	.word	0x00028edd
   17868:	00023af1 	.word	0x00023af1
   1786c:	00023c99 	.word	0x00023c99
   17870:	000126dd 	.word	0x000126dd
					}
				}
				else
				{
					
					if (currentStatus == 'N' && currentCallStatus == 'N')
   17874:	4bb0      	ldr	r3, [pc, #704]	; (17b38 <vTask_GSM_service+0x6d8>)
   17876:	781b      	ldrb	r3, [r3, #0]
   17878:	b2db      	uxtb	r3, r3
   1787a:	2b4e      	cmp	r3, #78	; 0x4e
   1787c:	d142      	bne.n	17904 <vTask_GSM_service+0x4a4>
   1787e:	4baf      	ldr	r3, [pc, #700]	; (17b3c <vTask_GSM_service+0x6dc>)
   17880:	781b      	ldrb	r3, [r3, #0]
   17882:	b2db      	uxtb	r3, r3
   17884:	2b4e      	cmp	r3, #78	; 0x4e
   17886:	d13d      	bne.n	17904 <vTask_GSM_service+0x4a4>
					{
						if(!getACPowerState() &&  isGSMModuleAwake && gsm_module_sleep_elligible())
   17888:	4bad      	ldr	r3, [pc, #692]	; (17b40 <vTask_GSM_service+0x6e0>)
   1788a:	4798      	blx	r3
   1788c:	0003      	movs	r3, r0
   1788e:	001a      	movs	r2, r3
   17890:	2301      	movs	r3, #1
   17892:	4053      	eors	r3, r2
   17894:	b2db      	uxtb	r3, r3
   17896:	2b00      	cmp	r3, #0
   17898:	d00a      	beq.n	178b0 <vTask_GSM_service+0x450>
   1789a:	4baa      	ldr	r3, [pc, #680]	; (17b44 <vTask_GSM_service+0x6e4>)
   1789c:	781b      	ldrb	r3, [r3, #0]
   1789e:	b2db      	uxtb	r3, r3
   178a0:	2b00      	cmp	r3, #0
   178a2:	d005      	beq.n	178b0 <vTask_GSM_service+0x450>
   178a4:	4ba8      	ldr	r3, [pc, #672]	; (17b48 <vTask_GSM_service+0x6e8>)
   178a6:	4798      	blx	r3
   178a8:	1e03      	subs	r3, r0, #0
   178aa:	d001      	beq.n	178b0 <vTask_GSM_service+0x450>
						{
							gsm_module_enter_sleep();
   178ac:	4ba7      	ldr	r3, [pc, #668]	; (17b4c <vTask_GSM_service+0x6ec>)
   178ae:	4798      	blx	r3
						}

						if(isGSMModuleAwake)
   178b0:	4ba4      	ldr	r3, [pc, #656]	; (17b44 <vTask_GSM_service+0x6e4>)
   178b2:	781b      	ldrb	r3, [r3, #0]
   178b4:	b2db      	uxtb	r3, r3
   178b6:	2b00      	cmp	r3, #0
   178b8:	d017      	beq.n	178ea <vTask_GSM_service+0x48a>
						{
							////Update network
							if (xTaskGetTickCount() - network_update_time>= (1*60*1000))
   178ba:	4ba5      	ldr	r3, [pc, #660]	; (17b50 <vTask_GSM_service+0x6f0>)
   178bc:	4798      	blx	r3
   178be:	0002      	movs	r2, r0
   178c0:	23a6      	movs	r3, #166	; 0xa6
   178c2:	005b      	lsls	r3, r3, #1
   178c4:	18fb      	adds	r3, r7, r3
   178c6:	681b      	ldr	r3, [r3, #0]
   178c8:	1ad3      	subs	r3, r2, r3
   178ca:	4aa2      	ldr	r2, [pc, #648]	; (17b54 <vTask_GSM_service+0x6f4>)
   178cc:	4293      	cmp	r3, r2
   178ce:	d90c      	bls.n	178ea <vTask_GSM_service+0x48a>
							{
								network_update_time = xTaskGetTickCount();
   178d0:	4b9f      	ldr	r3, [pc, #636]	; (17b50 <vTask_GSM_service+0x6f0>)
   178d2:	4798      	blx	r3
   178d4:	0003      	movs	r3, r0
   178d6:	22a6      	movs	r2, #166	; 0xa6
   178d8:	0052      	lsls	r2, r2, #1
   178da:	18ba      	adds	r2, r7, r2
   178dc:	6013      	str	r3, [r2, #0]
								Signal_Strength = gsm_getsignalstrength();
   178de:	4b9e      	ldr	r3, [pc, #632]	; (17b58 <vTask_GSM_service+0x6f8>)
   178e0:	4798      	blx	r3
   178e2:	0003      	movs	r3, r0
   178e4:	001a      	movs	r2, r3
   178e6:	4b9d      	ldr	r3, [pc, #628]	; (17b5c <vTask_GSM_service+0x6fc>)
   178e8:	701a      	strb	r2, [r3, #0]
							}
						}
						
						setObtainEvent();
   178ea:	4b9d      	ldr	r3, [pc, #628]	; (17b60 <vTask_GSM_service+0x700>)
   178ec:	4798      	blx	r3
						if (eventStaged || m2mEventStaged)
   178ee:	4b9d      	ldr	r3, [pc, #628]	; (17b64 <vTask_GSM_service+0x704>)
   178f0:	781b      	ldrb	r3, [r3, #0]
   178f2:	2b00      	cmp	r3, #0
   178f4:	d103      	bne.n	178fe <vTask_GSM_service+0x49e>
   178f6:	4b9c      	ldr	r3, [pc, #624]	; (17b68 <vTask_GSM_service+0x708>)
   178f8:	781b      	ldrb	r3, [r3, #0]
   178fa:	2b00      	cmp	r3, #0
   178fc:	d04b      	beq.n	17996 <vTask_GSM_service+0x536>
						{
							operateOnStagedEvent();
   178fe:	4b9b      	ldr	r3, [pc, #620]	; (17b6c <vTask_GSM_service+0x70c>)
   17900:	4798      	blx	r3
						if (eventStaged || m2mEventStaged)
   17902:	e048      	b.n	17996 <vTask_GSM_service+0x536>
						}
					}
					else if (currentStatus == 'I' || currentStatus == 'R')
   17904:	4b8c      	ldr	r3, [pc, #560]	; (17b38 <vTask_GSM_service+0x6d8>)
   17906:	781b      	ldrb	r3, [r3, #0]
   17908:	b2db      	uxtb	r3, r3
   1790a:	2b49      	cmp	r3, #73	; 0x49
   1790c:	d004      	beq.n	17918 <vTask_GSM_service+0x4b8>
   1790e:	4b8a      	ldr	r3, [pc, #552]	; (17b38 <vTask_GSM_service+0x6d8>)
   17910:	781b      	ldrb	r3, [r3, #0]
   17912:	b2db      	uxtb	r3, r3
   17914:	2b52      	cmp	r3, #82	; 0x52
   17916:	d13f      	bne.n	17998 <vTask_GSM_service+0x538>
					{
						if (callTimerExpire())
   17918:	4b95      	ldr	r3, [pc, #596]	; (17b70 <vTask_GSM_service+0x710>)
   1791a:	4798      	blx	r3
   1791c:	1e03      	subs	r3, r0, #0
   1791e:	d00e      	beq.n	1793e <vTask_GSM_service+0x4de>
						{
							char t1 = actionType;
   17920:	2346      	movs	r3, #70	; 0x46
   17922:	33ff      	adds	r3, #255	; 0xff
   17924:	18fb      	adds	r3, r7, r3
   17926:	4a93      	ldr	r2, [pc, #588]	; (17b74 <vTask_GSM_service+0x714>)
   17928:	7812      	ldrb	r2, [r2, #0]
   1792a:	701a      	strb	r2, [r3, #0]
							endCall();
   1792c:	4b92      	ldr	r3, [pc, #584]	; (17b78 <vTask_GSM_service+0x718>)
   1792e:	4798      	blx	r3
							checkRespSMS(t1);
   17930:	2346      	movs	r3, #70	; 0x46
   17932:	33ff      	adds	r3, #255	; 0xff
   17934:	18fb      	adds	r3, r7, r3
   17936:	781b      	ldrb	r3, [r3, #0]
   17938:	0018      	movs	r0, r3
   1793a:	4b90      	ldr	r3, [pc, #576]	; (17b7c <vTask_GSM_service+0x71c>)
   1793c:	4798      	blx	r3
						}
						if (factory_settings_parameter_struct.ENABLE_M2M)
   1793e:	4b90      	ldr	r3, [pc, #576]	; (17b80 <vTask_GSM_service+0x720>)
   17940:	78db      	ldrb	r3, [r3, #3]
   17942:	2b00      	cmp	r3, #0
   17944:	d020      	beq.n	17988 <vTask_GSM_service+0x528>
						{
							if(m2mEvent && callAccepted)
   17946:	4b8f      	ldr	r3, [pc, #572]	; (17b84 <vTask_GSM_service+0x724>)
   17948:	781b      	ldrb	r3, [r3, #0]
   1794a:	2b00      	cmp	r3, #0
   1794c:	d01c      	beq.n	17988 <vTask_GSM_service+0x528>
   1794e:	4b8e      	ldr	r3, [pc, #568]	; (17b88 <vTask_GSM_service+0x728>)
   17950:	781b      	ldrb	r3, [r3, #0]
   17952:	2b00      	cmp	r3, #0
   17954:	d018      	beq.n	17988 <vTask_GSM_service+0x528>
							{
								if(!keyPressed &&  xTaskGetTickCount() - callCutWait > 2000)
   17956:	4b8d      	ldr	r3, [pc, #564]	; (17b8c <vTask_GSM_service+0x72c>)
   17958:	781b      	ldrb	r3, [r3, #0]
   1795a:	2201      	movs	r2, #1
   1795c:	4053      	eors	r3, r2
   1795e:	b2db      	uxtb	r3, r3
   17960:	2b00      	cmp	r3, #0
   17962:	d011      	beq.n	17988 <vTask_GSM_service+0x528>
   17964:	4b7a      	ldr	r3, [pc, #488]	; (17b50 <vTask_GSM_service+0x6f0>)
   17966:	4798      	blx	r3
   17968:	0002      	movs	r2, r0
   1796a:	4b89      	ldr	r3, [pc, #548]	; (17b90 <vTask_GSM_service+0x730>)
   1796c:	681b      	ldr	r3, [r3, #0]
   1796e:	1ad2      	subs	r2, r2, r3
   17970:	23fa      	movs	r3, #250	; 0xfa
   17972:	00db      	lsls	r3, r3, #3
   17974:	429a      	cmp	r2, r3
   17976:	d907      	bls.n	17988 <vTask_GSM_service+0x528>
								{
									keyPressed=true;
   17978:	4b84      	ldr	r3, [pc, #528]	; (17b8c <vTask_GSM_service+0x72c>)
   1797a:	2201      	movs	r2, #1
   1797c:	701a      	strb	r2, [r3, #0]
									sendDTMFTone(m2mEventNo);
   1797e:	4b85      	ldr	r3, [pc, #532]	; (17b94 <vTask_GSM_service+0x734>)
   17980:	781b      	ldrb	r3, [r3, #0]
   17982:	0018      	movs	r0, r3
   17984:	4b84      	ldr	r3, [pc, #528]	; (17b98 <vTask_GSM_service+0x738>)
   17986:	4798      	blx	r3
								}
							}
						}
						if (playSoundElligible())
   17988:	4b84      	ldr	r3, [pc, #528]	; (17b9c <vTask_GSM_service+0x73c>)
   1798a:	4798      	blx	r3
   1798c:	1e03      	subs	r3, r0, #0
   1798e:	d003      	beq.n	17998 <vTask_GSM_service+0x538>
						{
							triggerPlaySound();
   17990:	4b83      	ldr	r3, [pc, #524]	; (17ba0 <vTask_GSM_service+0x740>)
   17992:	4798      	blx	r3
   17994:	e000      	b.n	17998 <vTask_GSM_service+0x538>
						if (eventStaged || m2mEventStaged)
   17996:	46c0      	nop			; (mov r8, r8)
						}
					}
					//////////////////////////////////////////////////////////////////////////
					char response[64] = {0};
   17998:	4b82      	ldr	r3, [pc, #520]	; (17ba4 <vTask_GSM_service+0x744>)
   1799a:	22a8      	movs	r2, #168	; 0xa8
   1799c:	0052      	lsls	r2, r2, #1
   1799e:	4694      	mov	ip, r2
   179a0:	44bc      	add	ip, r7
   179a2:	4463      	add	r3, ip
   179a4:	0018      	movs	r0, r3
   179a6:	2340      	movs	r3, #64	; 0x40
   179a8:	001a      	movs	r2, r3
   179aa:	2100      	movs	r1, #0
   179ac:	4b7e      	ldr	r3, [pc, #504]	; (17ba8 <vTask_GSM_service+0x748>)
   179ae:	4798      	blx	r3
					if (gsm_read_response_line(response,sizeof(response)))
   179b0:	230c      	movs	r3, #12
   179b2:	18fb      	adds	r3, r7, r3
   179b4:	2140      	movs	r1, #64	; 0x40
   179b6:	0018      	movs	r0, r3
   179b8:	4b7c      	ldr	r3, [pc, #496]	; (17bac <vTask_GSM_service+0x74c>)
   179ba:	4798      	blx	r3
   179bc:	1e03      	subs	r3, r0, #0
   179be:	d100      	bne.n	179c2 <vTask_GSM_service+0x562>
   179c0:	e60a      	b.n	175d8 <vTask_GSM_service+0x178>
					{
						uint8_t sms_index;
						sms_index = gsm_responseLine_isNew_SMS_Received(response);
   179c2:	23a2      	movs	r3, #162	; 0xa2
   179c4:	005b      	lsls	r3, r3, #1
   179c6:	18fc      	adds	r4, r7, r3
   179c8:	230c      	movs	r3, #12
   179ca:	18fb      	adds	r3, r7, r3
   179cc:	0018      	movs	r0, r3
   179ce:	4b78      	ldr	r3, [pc, #480]	; (17bb0 <vTask_GSM_service+0x750>)
   179d0:	4798      	blx	r3
   179d2:	0003      	movs	r3, r0
   179d4:	7023      	strb	r3, [r4, #0]
						if (sms_index>0)
   179d6:	23a2      	movs	r3, #162	; 0xa2
   179d8:	005b      	lsls	r3, r3, #1
   179da:	18fb      	adds	r3, r7, r3
   179dc:	781b      	ldrb	r3, [r3, #0]
   179de:	2b00      	cmp	r3, #0
   179e0:	d100      	bne.n	179e4 <vTask_GSM_service+0x584>
   179e2:	e13a      	b.n	17c5a <vTask_GSM_service+0x7fa>
						{
							char phone_number[15];
							char Received_SMS[160];
							gsm_read_sms(sms_index,phone_number,15,Received_SMS,160);
   179e4:	234c      	movs	r3, #76	; 0x4c
   179e6:	18fa      	adds	r2, r7, r3
   179e8:	1c79      	adds	r1, r7, #1
   179ea:	31ff      	adds	r1, #255	; 0xff
   179ec:	23a2      	movs	r3, #162	; 0xa2
   179ee:	005b      	lsls	r3, r3, #1
   179f0:	18fb      	adds	r3, r7, r3
   179f2:	7818      	ldrb	r0, [r3, #0]
   179f4:	23a0      	movs	r3, #160	; 0xa0
   179f6:	9300      	str	r3, [sp, #0]
   179f8:	0013      	movs	r3, r2
   179fa:	220f      	movs	r2, #15
   179fc:	4c6d      	ldr	r4, [pc, #436]	; (17bb4 <vTask_GSM_service+0x754>)
   179fe:	47a0      	blx	r4
							bool admin = isAdmin(phone_number);
   17a00:	2344      	movs	r3, #68	; 0x44
   17a02:	33ff      	adds	r3, #255	; 0xff
   17a04:	18fc      	adds	r4, r7, r3
   17a06:	1c7b      	adds	r3, r7, #1
   17a08:	33ff      	adds	r3, #255	; 0xff
   17a0a:	0018      	movs	r0, r3
   17a0c:	4b6a      	ldr	r3, [pc, #424]	; (17bb8 <vTask_GSM_service+0x758>)
   17a0e:	4798      	blx	r3
   17a10:	0003      	movs	r3, r0
   17a12:	7023      	strb	r3, [r4, #0]
							bool primaryUser = isPrimaryNumber(phone_number);
   17a14:	23a1      	movs	r3, #161	; 0xa1
   17a16:	005b      	lsls	r3, r3, #1
   17a18:	18fc      	adds	r4, r7, r3
   17a1a:	1c7b      	adds	r3, r7, #1
   17a1c:	33ff      	adds	r3, #255	; 0xff
   17a1e:	0018      	movs	r0, r3
   17a20:	4b66      	ldr	r3, [pc, #408]	; (17bbc <vTask_GSM_service+0x75c>)
   17a22:	4798      	blx	r3
   17a24:	0003      	movs	r3, r0
   17a26:	7023      	strb	r3, [r4, #0]
							bool alterUsr = isAlterNumber(phone_number);
   17a28:	2342      	movs	r3, #66	; 0x42
   17a2a:	33ff      	adds	r3, #255	; 0xff
   17a2c:	18fc      	adds	r4, r7, r3
   17a2e:	1c7b      	adds	r3, r7, #1
   17a30:	33ff      	adds	r3, #255	; 0xff
   17a32:	0018      	movs	r0, r3
   17a34:	4b62      	ldr	r3, [pc, #392]	; (17bc0 <vTask_GSM_service+0x760>)
   17a36:	4798      	blx	r3
   17a38:	0003      	movs	r3, r0
   17a3a:	7023      	strb	r3, [r4, #0]
							bool response_sms_processed_cmd = true;
   17a3c:	23a4      	movs	r3, #164	; 0xa4
   17a3e:	005b      	lsls	r3, r3, #1
   17a40:	18fb      	adds	r3, r7, r3
   17a42:	2201      	movs	r2, #1
   17a44:	701a      	strb	r2, [r3, #0]
							
							if(isAdmin)
							{
								setCallStateOnLCD(LCDCALLSTATE_INCOMINGSMS,"ADMIN",false);
   17a46:	4b5f      	ldr	r3, [pc, #380]	; (17bc4 <vTask_GSM_service+0x764>)
   17a48:	2200      	movs	r2, #0
   17a4a:	0019      	movs	r1, r3
   17a4c:	2004      	movs	r0, #4
   17a4e:	4b5e      	ldr	r3, [pc, #376]	; (17bc8 <vTask_GSM_service+0x768>)
   17a50:	4798      	blx	r3
							else
							{
								setCallStateOnLCD(LCDCALLSTATE_INCOMINGSMS,phone_number,false);
							}
							
							StringtoUpperCase(Received_SMS);
   17a52:	234c      	movs	r3, #76	; 0x4c
   17a54:	18fb      	adds	r3, r7, r3
   17a56:	0018      	movs	r0, r3
   17a58:	4b5c      	ldr	r3, [pc, #368]	; (17bcc <vTask_GSM_service+0x76c>)
   17a5a:	4798      	blx	r3
							//{
							//memmove(Received_SMS,Received_SMS+7,strlen(Received_SMS));		//discard passPhrase
							//admin = true;													//set admin as true as passCode matches
							//}

							if (admin || primaryUser || alterUsr)
   17a5c:	2344      	movs	r3, #68	; 0x44
   17a5e:	33ff      	adds	r3, #255	; 0xff
   17a60:	18fb      	adds	r3, r7, r3
   17a62:	781b      	ldrb	r3, [r3, #0]
   17a64:	2b00      	cmp	r3, #0
   17a66:	d10b      	bne.n	17a80 <vTask_GSM_service+0x620>
   17a68:	23a1      	movs	r3, #161	; 0xa1
   17a6a:	005b      	lsls	r3, r3, #1
   17a6c:	18fb      	adds	r3, r7, r3
   17a6e:	781b      	ldrb	r3, [r3, #0]
   17a70:	2b00      	cmp	r3, #0
   17a72:	d105      	bne.n	17a80 <vTask_GSM_service+0x620>
   17a74:	2342      	movs	r3, #66	; 0x42
   17a76:	33ff      	adds	r3, #255	; 0xff
   17a78:	18fb      	adds	r3, r7, r3
   17a7a:	781b      	ldrb	r3, [r3, #0]
   17a7c:	2b00      	cmp	r3, #0
   17a7e:	d031      	beq.n	17ae4 <vTask_GSM_service+0x684>
							{
								if(StringstartsWith(Received_SMS,"#"))
   17a80:	4a53      	ldr	r2, [pc, #332]	; (17bd0 <vTask_GSM_service+0x770>)
   17a82:	234c      	movs	r3, #76	; 0x4c
   17a84:	18fb      	adds	r3, r7, r3
   17a86:	0011      	movs	r1, r2
   17a88:	0018      	movs	r0, r3
   17a8a:	4b52      	ldr	r3, [pc, #328]	; (17bd4 <vTask_GSM_service+0x774>)
   17a8c:	4798      	blx	r3
   17a8e:	1e03      	subs	r3, r0, #0
   17a90:	d013      	beq.n	17aba <vTask_GSM_service+0x65a>
								{
									memmove(Received_SMS, Received_SMS+1, strlen(Received_SMS));  //this will remove '#'
   17a92:	234c      	movs	r3, #76	; 0x4c
   17a94:	18fc      	adds	r4, r7, r3
   17a96:	3401      	adds	r4, #1
   17a98:	234c      	movs	r3, #76	; 0x4c
   17a9a:	18fb      	adds	r3, r7, r3
   17a9c:	0018      	movs	r0, r3
   17a9e:	4b4e      	ldr	r3, [pc, #312]	; (17bd8 <vTask_GSM_service+0x778>)
   17aa0:	4798      	blx	r3
   17aa2:	0002      	movs	r2, r0
   17aa4:	234c      	movs	r3, #76	; 0x4c
   17aa6:	18fb      	adds	r3, r7, r3
   17aa8:	0021      	movs	r1, r4
   17aaa:	0018      	movs	r0, r3
   17aac:	4b4b      	ldr	r3, [pc, #300]	; (17bdc <vTask_GSM_service+0x77c>)
   17aae:	4798      	blx	r3
									response_sms_processed_cmd=false;
   17ab0:	23a4      	movs	r3, #164	; 0xa4
   17ab2:	005b      	lsls	r3, r3, #1
   17ab4:	18fb      	adds	r3, r7, r3
   17ab6:	2200      	movs	r2, #0
   17ab8:	701a      	strb	r2, [r3, #0]
								}
								processOnSMS(Received_SMS,admin,response_sms_processed_cmd,alterUsr,phone_number);
   17aba:	2342      	movs	r3, #66	; 0x42
   17abc:	33ff      	adds	r3, #255	; 0xff
   17abe:	18fb      	adds	r3, r7, r3
   17ac0:	781c      	ldrb	r4, [r3, #0]
   17ac2:	23a4      	movs	r3, #164	; 0xa4
   17ac4:	005b      	lsls	r3, r3, #1
   17ac6:	18fb      	adds	r3, r7, r3
   17ac8:	781a      	ldrb	r2, [r3, #0]
   17aca:	2344      	movs	r3, #68	; 0x44
   17acc:	33ff      	adds	r3, #255	; 0xff
   17ace:	18fb      	adds	r3, r7, r3
   17ad0:	7819      	ldrb	r1, [r3, #0]
   17ad2:	234c      	movs	r3, #76	; 0x4c
   17ad4:	18f8      	adds	r0, r7, r3
   17ad6:	1c7b      	adds	r3, r7, #1
   17ad8:	33ff      	adds	r3, #255	; 0xff
   17ada:	9300      	str	r3, [sp, #0]
   17adc:	0023      	movs	r3, r4
   17ade:	4c40      	ldr	r4, [pc, #256]	; (17be0 <vTask_GSM_service+0x780>)
   17ae0:	47a0      	blx	r4
   17ae2:	e0b8      	b.n	17c56 <vTask_GSM_service+0x7f6>
							}
							else if(isM2MNumber(phone_number))
   17ae4:	1c7b      	adds	r3, r7, #1
   17ae6:	33ff      	adds	r3, #255	; 0xff
   17ae8:	0018      	movs	r0, r3
   17aea:	4b3e      	ldr	r3, [pc, #248]	; (17be4 <vTask_GSM_service+0x784>)
   17aec:	4798      	blx	r3
   17aee:	1e03      	subs	r3, r0, #0
   17af0:	d100      	bne.n	17af4 <vTask_GSM_service+0x694>
   17af2:	e083      	b.n	17bfc <vTask_GSM_service+0x79c>
							{
								if(StringstartsWith(Received_SMS,"VMM01"))
   17af4:	4a3c      	ldr	r2, [pc, #240]	; (17be8 <vTask_GSM_service+0x788>)
   17af6:	234c      	movs	r3, #76	; 0x4c
   17af8:	18fb      	adds	r3, r7, r3
   17afa:	0011      	movs	r1, r2
   17afc:	0018      	movs	r0, r3
   17afe:	4b35      	ldr	r3, [pc, #212]	; (17bd4 <vTask_GSM_service+0x774>)
   17b00:	4798      	blx	r3
   17b02:	1e03      	subs	r3, r0, #0
   17b04:	d100      	bne.n	17b08 <vTask_GSM_service+0x6a8>
   17b06:	e0a6      	b.n	17c56 <vTask_GSM_service+0x7f6>
								{
									setM2MVerify(true);
   17b08:	2001      	movs	r0, #1
   17b0a:	4b38      	ldr	r3, [pc, #224]	; (17bec <vTask_GSM_service+0x78c>)
   17b0c:	4798      	blx	r3
									getM2MNumber(phone_number);
   17b0e:	1c7b      	adds	r3, r7, #1
   17b10:	33ff      	adds	r3, #255	; 0xff
   17b12:	0018      	movs	r0, r3
   17b14:	4b36      	ldr	r3, [pc, #216]	; (17bf0 <vTask_GSM_service+0x790>)
   17b16:	4798      	blx	r3
									setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
   17b18:	1c7b      	adds	r3, r7, #1
   17b1a:	33ff      	adds	r3, #255	; 0xff
   17b1c:	2200      	movs	r2, #0
   17b1e:	0019      	movs	r1, r3
   17b20:	2005      	movs	r0, #5
   17b22:	4b29      	ldr	r3, [pc, #164]	; (17bc8 <vTask_GSM_service+0x768>)
   17b24:	4798      	blx	r3
									gsm_send_sms(phone_number,"VMR02");
   17b26:	4a33      	ldr	r2, [pc, #204]	; (17bf4 <vTask_GSM_service+0x794>)
   17b28:	1c7b      	adds	r3, r7, #1
   17b2a:	33ff      	adds	r3, #255	; 0xff
   17b2c:	0011      	movs	r1, r2
   17b2e:	0018      	movs	r0, r3
   17b30:	4b31      	ldr	r3, [pc, #196]	; (17bf8 <vTask_GSM_service+0x798>)
   17b32:	4798      	blx	r3
   17b34:	e08f      	b.n	17c56 <vTask_GSM_service+0x7f6>
   17b36:	46c0      	nop			; (mov r8, r8)
   17b38:	200007d8 	.word	0x200007d8
   17b3c:	20000787 	.word	0x20000787
   17b40:	0001ac01 	.word	0x0001ac01
   17b44:	20000684 	.word	0x20000684
   17b48:	00012379 	.word	0x00012379
   17b4c:	00012365 	.word	0x00012365
   17b50:	0002034d 	.word	0x0002034d
   17b54:	0000ea5f 	.word	0x0000ea5f
   17b58:	000128bd 	.word	0x000128bd
   17b5c:	20000781 	.word	0x20000781
   17b60:	000141dd 	.word	0x000141dd
   17b64:	200007ce 	.word	0x200007ce
   17b68:	20000786 	.word	0x20000786
   17b6c:	0001421d 	.word	0x0001421d
   17b70:	0001487d 	.word	0x0001487d
   17b74:	2000075b 	.word	0x2000075b
   17b78:	00014325 	.word	0x00014325
   17b7c:	00014b39 	.word	0x00014b39
   17b80:	2000062c 	.word	0x2000062c
   17b84:	2000073b 	.word	0x2000073b
   17b88:	20000796 	.word	0x20000796
   17b8c:	200007cc 	.word	0x200007cc
   17b90:	20000814 	.word	0x20000814
   17b94:	20000721 	.word	0x20000721
   17b98:	000173cd 	.word	0x000173cd
   17b9c:	000146e5 	.word	0x000146e5
   17ba0:	00014731 	.word	0x00014731
   17ba4:	fffffebc 	.word	0xfffffebc
   17ba8:	00028f13 	.word	0x00028f13
   17bac:	00013425 	.word	0x00013425
   17bb0:	000134b5 	.word	0x000134b5
   17bb4:	00012c31 	.word	0x00012c31
   17bb8:	00011a69 	.word	0x00011a69
   17bbc:	00010999 	.word	0x00010999
   17bc0:	00010a09 	.word	0x00010a09
   17bc4:	0002a780 	.word	0x0002a780
   17bc8:	0001cc35 	.word	0x0001cc35
   17bcc:	00013fa9 	.word	0x00013fa9
   17bd0:	0002a788 	.word	0x0002a788
   17bd4:	00014015 	.word	0x00014015
   17bd8:	000291a3 	.word	0x000291a3
   17bdc:	00028eef 	.word	0x00028eef
   17be0:	00014db5 	.word	0x00014db5
   17be4:	00010a51 	.word	0x00010a51
   17be8:	0002a734 	.word	0x0002a734
   17bec:	00010b41 	.word	0x00010b41
   17bf0:	00010ac9 	.word	0x00010ac9
   17bf4:	0002a78c 	.word	0x0002a78c
   17bf8:	00012b05 	.word	0x00012b05
								}
							}
							else if(factory_settings_parameter_struct.ENABLE_M2M && isM2MRemoteNumber(phone_number))
   17bfc:	4bd5      	ldr	r3, [pc, #852]	; (17f54 <vTask_GSM_service+0xaf4>)
   17bfe:	78db      	ldrb	r3, [r3, #3]
   17c00:	2b00      	cmp	r3, #0
   17c02:	d028      	beq.n	17c56 <vTask_GSM_service+0x7f6>
   17c04:	1c7b      	adds	r3, r7, #1
   17c06:	33ff      	adds	r3, #255	; 0xff
   17c08:	0018      	movs	r0, r3
   17c0a:	4bd3      	ldr	r3, [pc, #844]	; (17f58 <vTask_GSM_service+0xaf8>)
   17c0c:	4798      	blx	r3
   17c0e:	1e03      	subs	r3, r0, #0
   17c10:	d021      	beq.n	17c56 <vTask_GSM_service+0x7f6>
							{
								if(StringstartsWith(Received_SMS,"VMR02"))
   17c12:	4ad2      	ldr	r2, [pc, #840]	; (17f5c <vTask_GSM_service+0xafc>)
   17c14:	234c      	movs	r3, #76	; 0x4c
   17c16:	18fb      	adds	r3, r7, r3
   17c18:	0011      	movs	r1, r2
   17c1a:	0018      	movs	r0, r3
   17c1c:	4bd0      	ldr	r3, [pc, #832]	; (17f60 <vTask_GSM_service+0xb00>)
   17c1e:	4798      	blx	r3
   17c20:	1e03      	subs	r3, r0, #0
   17c22:	d018      	beq.n	17c56 <vTask_GSM_service+0x7f6>
								{
									setM2MRemoteVerified(true);
   17c24:	2001      	movs	r0, #1
   17c26:	4bcf      	ldr	r3, [pc, #828]	; (17f64 <vTask_GSM_service+0xb04>)
   17c28:	4798      	blx	r3
									saveM2MSettings(true);
   17c2a:	2001      	movs	r0, #1
   17c2c:	4bce      	ldr	r3, [pc, #824]	; (17f68 <vTask_GSM_service+0xb08>)
   17c2e:	4798      	blx	r3
									getActiveNumber(phone_number);
   17c30:	1c7b      	adds	r3, r7, #1
   17c32:	33ff      	adds	r3, #255	; 0xff
   17c34:	0018      	movs	r0, r3
   17c36:	4bcd      	ldr	r3, [pc, #820]	; (17f6c <vTask_GSM_service+0xb0c>)
   17c38:	4798      	blx	r3
									setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
   17c3a:	1c7b      	adds	r3, r7, #1
   17c3c:	33ff      	adds	r3, #255	; 0xff
   17c3e:	2200      	movs	r2, #0
   17c40:	0019      	movs	r1, r3
   17c42:	2005      	movs	r0, #5
   17c44:	4bca      	ldr	r3, [pc, #808]	; (17f70 <vTask_GSM_service+0xb10>)
   17c46:	4798      	blx	r3
									gsm_send_sms(phone_number,"M2M TURNED ON");
   17c48:	4aca      	ldr	r2, [pc, #808]	; (17f74 <vTask_GSM_service+0xb14>)
   17c4a:	1c7b      	adds	r3, r7, #1
   17c4c:	33ff      	adds	r3, #255	; 0xff
   17c4e:	0011      	movs	r1, r2
   17c50:	0018      	movs	r0, r3
   17c52:	4bc9      	ldr	r3, [pc, #804]	; (17f78 <vTask_GSM_service+0xb18>)
   17c54:	4798      	blx	r3
								}
							}
							gsm_delete_all_sms();
   17c56:	4bc9      	ldr	r3, [pc, #804]	; (17f7c <vTask_GSM_service+0xb1c>)
   17c58:	4798      	blx	r3
						}


						if (!freezeIncomingCalls &&  (currentStatus == 'N' || currentStatus == 'R') && (currentCallStatus == 'N' || currentCallStatus == 'I')) //Ringing Incoming Call
   17c5a:	4bc9      	ldr	r3, [pc, #804]	; (17f80 <vTask_GSM_service+0xb20>)
   17c5c:	781b      	ldrb	r3, [r3, #0]
   17c5e:	2201      	movs	r2, #1
   17c60:	4053      	eors	r3, r2
   17c62:	b2db      	uxtb	r3, r3
   17c64:	2b00      	cmp	r3, #0
   17c66:	d100      	bne.n	17c6a <vTask_GSM_service+0x80a>
   17c68:	e099      	b.n	17d9e <vTask_GSM_service+0x93e>
   17c6a:	4bc6      	ldr	r3, [pc, #792]	; (17f84 <vTask_GSM_service+0xb24>)
   17c6c:	781b      	ldrb	r3, [r3, #0]
   17c6e:	b2db      	uxtb	r3, r3
   17c70:	2b4e      	cmp	r3, #78	; 0x4e
   17c72:	d005      	beq.n	17c80 <vTask_GSM_service+0x820>
   17c74:	4bc3      	ldr	r3, [pc, #780]	; (17f84 <vTask_GSM_service+0xb24>)
   17c76:	781b      	ldrb	r3, [r3, #0]
   17c78:	b2db      	uxtb	r3, r3
   17c7a:	2b52      	cmp	r3, #82	; 0x52
   17c7c:	d000      	beq.n	17c80 <vTask_GSM_service+0x820>
   17c7e:	e08e      	b.n	17d9e <vTask_GSM_service+0x93e>
   17c80:	4bc1      	ldr	r3, [pc, #772]	; (17f88 <vTask_GSM_service+0xb28>)
   17c82:	781b      	ldrb	r3, [r3, #0]
   17c84:	b2db      	uxtb	r3, r3
   17c86:	2b4e      	cmp	r3, #78	; 0x4e
   17c88:	d005      	beq.n	17c96 <vTask_GSM_service+0x836>
   17c8a:	4bbf      	ldr	r3, [pc, #764]	; (17f88 <vTask_GSM_service+0xb28>)
   17c8c:	781b      	ldrb	r3, [r3, #0]
   17c8e:	b2db      	uxtb	r3, r3
   17c90:	2b49      	cmp	r3, #73	; 0x49
   17c92:	d000      	beq.n	17c96 <vTask_GSM_service+0x836>
   17c94:	e083      	b.n	17d9e <vTask_GSM_service+0x93e>
						{
							if (gsm_responseLine_isRinging(response))
   17c96:	230c      	movs	r3, #12
   17c98:	18fb      	adds	r3, r7, r3
   17c9a:	0018      	movs	r0, r3
   17c9c:	4bbb      	ldr	r3, [pc, #748]	; (17f8c <vTask_GSM_service+0xb2c>)
   17c9e:	4798      	blx	r3
   17ca0:	1e03      	subs	r3, r0, #0
   17ca2:	d071      	beq.n	17d88 <vTask_GSM_service+0x928>
							{
								currentStatus = 'R';
   17ca4:	4bb7      	ldr	r3, [pc, #732]	; (17f84 <vTask_GSM_service+0xb24>)
   17ca6:	2252      	movs	r2, #82	; 0x52
   17ca8:	701a      	strb	r2, [r3, #0]
								currentCallStatus = 'I';
   17caa:	4bb7      	ldr	r3, [pc, #732]	; (17f88 <vTask_GSM_service+0xb28>)
   17cac:	2249      	movs	r2, #73	; 0x49
   17cae:	701a      	strb	r2, [r3, #0]
								char incoming_caller[20]={0};
   17cb0:	23ec      	movs	r3, #236	; 0xec
   17cb2:	18fb      	adds	r3, r7, r3
   17cb4:	0018      	movs	r0, r3
   17cb6:	2314      	movs	r3, #20
   17cb8:	001a      	movs	r2, r3
   17cba:	2100      	movs	r1, #0
   17cbc:	4bb4      	ldr	r3, [pc, #720]	; (17f90 <vTask_GSM_service+0xb30>)
   17cbe:	4798      	blx	r3
								inCall = true;
   17cc0:	4bb4      	ldr	r3, [pc, #720]	; (17f94 <vTask_GSM_service+0xb34>)
   17cc2:	2201      	movs	r2, #1
   17cc4:	701a      	strb	r2, [r3, #0]
								
								bool new_call = false;
   17cc6:	2348      	movs	r3, #72	; 0x48
   17cc8:	33ff      	adds	r3, #255	; 0xff
   17cca:	18fb      	adds	r3, r7, r3
   17ccc:	2200      	movs	r2, #0
   17cce:	701a      	strb	r2, [r3, #0]
								for (uint8_t i=0;i<4;i++)
   17cd0:	23a3      	movs	r3, #163	; 0xa3
   17cd2:	005b      	lsls	r3, r3, #1
   17cd4:	18fb      	adds	r3, r7, r3
   17cd6:	2200      	movs	r2, #0
   17cd8:	701a      	strb	r2, [r3, #0]
   17cda:	e02f      	b.n	17d3c <vTask_GSM_service+0x8dc>
								{
									vTaskDelay(500/portTICK_PERIOD_MS);
   17cdc:	23fa      	movs	r3, #250	; 0xfa
   17cde:	005b      	lsls	r3, r3, #1
   17ce0:	0018      	movs	r0, r3
   17ce2:	4bad      	ldr	r3, [pc, #692]	; (17f98 <vTask_GSM_service+0xb38>)
   17ce4:	4798      	blx	r3
									gsm_read_response_line(response,sizeof(response));
   17ce6:	230c      	movs	r3, #12
   17ce8:	18fb      	adds	r3, r7, r3
   17cea:	2140      	movs	r1, #64	; 0x40
   17cec:	0018      	movs	r0, r3
   17cee:	4bab      	ldr	r3, [pc, #684]	; (17f9c <vTask_GSM_service+0xb3c>)
   17cf0:	4798      	blx	r3
									if (gsm_responseLine_get_IncommingCallNo(response,incoming_caller))
   17cf2:	23ec      	movs	r3, #236	; 0xec
   17cf4:	18fa      	adds	r2, r7, r3
   17cf6:	230c      	movs	r3, #12
   17cf8:	18fb      	adds	r3, r7, r3
   17cfa:	0011      	movs	r1, r2
   17cfc:	0018      	movs	r0, r3
   17cfe:	4ba8      	ldr	r3, [pc, #672]	; (17fa0 <vTask_GSM_service+0xb40>)
   17d00:	4798      	blx	r3
   17d02:	1e03      	subs	r3, r0, #0
   17d04:	d011      	beq.n	17d2a <vTask_GSM_service+0x8ca>
									{
										setCallStateOnLCD(LCDCALLSTATE_RINGING,incoming_caller,false);
   17d06:	23ec      	movs	r3, #236	; 0xec
   17d08:	18fb      	adds	r3, r7, r3
   17d0a:	2200      	movs	r2, #0
   17d0c:	0019      	movs	r1, r3
   17d0e:	2001      	movs	r0, #1
   17d10:	4b97      	ldr	r3, [pc, #604]	; (17f70 <vTask_GSM_service+0xb10>)
   17d12:	4798      	blx	r3
										new_call = true;
   17d14:	2348      	movs	r3, #72	; 0x48
   17d16:	33ff      	adds	r3, #255	; 0xff
   17d18:	18fb      	adds	r3, r7, r3
   17d1a:	2201      	movs	r2, #1
   17d1c:	701a      	strb	r2, [r3, #0]
										callCutWait = xTaskGetTickCount();
   17d1e:	4ba1      	ldr	r3, [pc, #644]	; (17fa4 <vTask_GSM_service+0xb44>)
   17d20:	4798      	blx	r3
   17d22:	0002      	movs	r2, r0
   17d24:	4ba0      	ldr	r3, [pc, #640]	; (17fa8 <vTask_GSM_service+0xb48>)
   17d26:	601a      	str	r2, [r3, #0]
										break;
   17d28:	e00e      	b.n	17d48 <vTask_GSM_service+0x8e8>
								for (uint8_t i=0;i<4;i++)
   17d2a:	23a3      	movs	r3, #163	; 0xa3
   17d2c:	005b      	lsls	r3, r3, #1
   17d2e:	18fb      	adds	r3, r7, r3
   17d30:	781a      	ldrb	r2, [r3, #0]
   17d32:	23a3      	movs	r3, #163	; 0xa3
   17d34:	005b      	lsls	r3, r3, #1
   17d36:	18fb      	adds	r3, r7, r3
   17d38:	3201      	adds	r2, #1
   17d3a:	701a      	strb	r2, [r3, #0]
   17d3c:	23a3      	movs	r3, #163	; 0xa3
   17d3e:	005b      	lsls	r3, r3, #1
   17d40:	18fb      	adds	r3, r7, r3
   17d42:	781b      	ldrb	r3, [r3, #0]
   17d44:	2b03      	cmp	r3, #3
   17d46:	d9c9      	bls.n	17cdc <vTask_GSM_service+0x87c>
									}
								}
								if (new_call)
   17d48:	2348      	movs	r3, #72	; 0x48
   17d4a:	33ff      	adds	r3, #255	; 0xff
   17d4c:	18fb      	adds	r3, r7, r3
   17d4e:	781b      	ldrb	r3, [r3, #0]
   17d50:	2b00      	cmp	r3, #0
   17d52:	d100      	bne.n	17d56 <vTask_GSM_service+0x8f6>
   17d54:	e19f      	b.n	18096 <vTask_GSM_service+0xc36>
								{
									new_call = false;
   17d56:	2348      	movs	r3, #72	; 0x48
   17d58:	33ff      	adds	r3, #255	; 0xff
   17d5a:	18fb      	adds	r3, r7, r3
   17d5c:	2200      	movs	r2, #0
   17d5e:	701a      	strb	r2, [r3, #0]
									if (checkNumber(incoming_caller))
   17d60:	23ec      	movs	r3, #236	; 0xec
   17d62:	18fb      	adds	r3, r7, r3
   17d64:	0018      	movs	r0, r3
   17d66:	4b91      	ldr	r3, [pc, #580]	; (17fac <vTask_GSM_service+0xb4c>)
   17d68:	4798      	blx	r3
   17d6a:	1e03      	subs	r3, r0, #0
   17d6c:	d009      	beq.n	17d82 <vTask_GSM_service+0x922>
									{
										acceptCall();
   17d6e:	4b90      	ldr	r3, [pc, #576]	; (17fb0 <vTask_GSM_service+0xb50>)
   17d70:	4798      	blx	r3
										setCallStateOnLCD(LCDCALLSTATE_INCALL,incoming_caller,false);
   17d72:	23ec      	movs	r3, #236	; 0xec
   17d74:	18fb      	adds	r3, r7, r3
   17d76:	2200      	movs	r2, #0
   17d78:	0019      	movs	r1, r3
   17d7a:	2002      	movs	r0, #2
   17d7c:	4b7c      	ldr	r3, [pc, #496]	; (17f70 <vTask_GSM_service+0xb10>)
   17d7e:	4798      	blx	r3
							if (gsm_responseLine_isRinging(response))
   17d80:	e189      	b.n	18096 <vTask_GSM_service+0xc36>
									}
									else
									{
										endCall();
   17d82:	4b8c      	ldr	r3, [pc, #560]	; (17fb4 <vTask_GSM_service+0xb54>)
   17d84:	4798      	blx	r3
							if (gsm_responseLine_isRinging(response))
   17d86:	e186      	b.n	18096 <vTask_GSM_service+0xc36>
									}
								}
							}
							else if (gsm_responseLine_isCallCut(response))
   17d88:	230c      	movs	r3, #12
   17d8a:	18fb      	adds	r3, r7, r3
   17d8c:	0018      	movs	r0, r3
   17d8e:	4b8a      	ldr	r3, [pc, #552]	; (17fb8 <vTask_GSM_service+0xb58>)
   17d90:	4798      	blx	r3
   17d92:	1e03      	subs	r3, r0, #0
   17d94:	d100      	bne.n	17d98 <vTask_GSM_service+0x938>
   17d96:	e17e      	b.n	18096 <vTask_GSM_service+0xc36>
							{
								endCall();
   17d98:	4b86      	ldr	r3, [pc, #536]	; (17fb4 <vTask_GSM_service+0xb54>)
   17d9a:	4798      	blx	r3
							if (gsm_responseLine_isRinging(response))
   17d9c:	e17b      	b.n	18096 <vTask_GSM_service+0xc36>
							}
						}
						else if (!freezeIncomingCalls && currentStatus == 'I' && currentCallStatus == 'I') //IN CALL INCOMING CALL
   17d9e:	4b78      	ldr	r3, [pc, #480]	; (17f80 <vTask_GSM_service+0xb20>)
   17da0:	781b      	ldrb	r3, [r3, #0]
   17da2:	2201      	movs	r2, #1
   17da4:	4053      	eors	r3, r2
   17da6:	b2db      	uxtb	r3, r3
   17da8:	2b00      	cmp	r3, #0
   17daa:	d045      	beq.n	17e38 <vTask_GSM_service+0x9d8>
   17dac:	4b75      	ldr	r3, [pc, #468]	; (17f84 <vTask_GSM_service+0xb24>)
   17dae:	781b      	ldrb	r3, [r3, #0]
   17db0:	b2db      	uxtb	r3, r3
   17db2:	2b49      	cmp	r3, #73	; 0x49
   17db4:	d140      	bne.n	17e38 <vTask_GSM_service+0x9d8>
   17db6:	4b74      	ldr	r3, [pc, #464]	; (17f88 <vTask_GSM_service+0xb28>)
   17db8:	781b      	ldrb	r3, [r3, #0]
   17dba:	b2db      	uxtb	r3, r3
   17dbc:	2b49      	cmp	r3, #73	; 0x49
   17dbe:	d13b      	bne.n	17e38 <vTask_GSM_service+0x9d8>
						{
							if (gsm_responseLine_isCallCut(response))
   17dc0:	230c      	movs	r3, #12
   17dc2:	18fb      	adds	r3, r7, r3
   17dc4:	0018      	movs	r0, r3
   17dc6:	4b7c      	ldr	r3, [pc, #496]	; (17fb8 <vTask_GSM_service+0xb58>)
   17dc8:	4798      	blx	r3
   17dca:	1e03      	subs	r3, r0, #0
   17dcc:	d002      	beq.n	17dd4 <vTask_GSM_service+0x974>
							{
								endCall();
   17dce:	4b79      	ldr	r3, [pc, #484]	; (17fb4 <vTask_GSM_service+0xb54>)
   17dd0:	4798      	blx	r3
							if (gsm_responseLine_isCallCut(response))
   17dd2:	e164      	b.n	1809e <vTask_GSM_service+0xc3e>
							}
							else if(gsm_responseLine_isNew_DTMF_Command_Received(response))
   17dd4:	230c      	movs	r3, #12
   17dd6:	18fb      	adds	r3, r7, r3
   17dd8:	0018      	movs	r0, r3
   17dda:	4b78      	ldr	r3, [pc, #480]	; (17fbc <vTask_GSM_service+0xb5c>)
   17ddc:	4798      	blx	r3
   17dde:	1e03      	subs	r3, r0, #0
   17de0:	d024      	beq.n	17e2c <vTask_GSM_service+0x9cc>
							{
								char *dtmf_tocken;
								dtmf_tocken = strtok(response,": ");
   17de2:	4a77      	ldr	r2, [pc, #476]	; (17fc0 <vTask_GSM_service+0xb60>)
   17de4:	230c      	movs	r3, #12
   17de6:	18fb      	adds	r3, r7, r3
   17de8:	0011      	movs	r1, r2
   17dea:	0018      	movs	r0, r3
   17dec:	4b75      	ldr	r3, [pc, #468]	; (17fc4 <vTask_GSM_service+0xb64>)
   17dee:	4798      	blx	r3
   17df0:	0003      	movs	r3, r0
   17df2:	229e      	movs	r2, #158	; 0x9e
   17df4:	0052      	lsls	r2, r2, #1
   17df6:	18ba      	adds	r2, r7, r2
   17df8:	6013      	str	r3, [r2, #0]
								dtmf_tocken = strtok(NULL,": ");
   17dfa:	4b71      	ldr	r3, [pc, #452]	; (17fc0 <vTask_GSM_service+0xb60>)
   17dfc:	0019      	movs	r1, r3
   17dfe:	2000      	movs	r0, #0
   17e00:	4b70      	ldr	r3, [pc, #448]	; (17fc4 <vTask_GSM_service+0xb64>)
   17e02:	4798      	blx	r3
   17e04:	0003      	movs	r3, r0
   17e06:	229e      	movs	r2, #158	; 0x9e
   17e08:	0052      	lsls	r2, r2, #1
   17e0a:	18ba      	adds	r2, r7, r2
   17e0c:	6013      	str	r3, [r2, #0]
								RemoveSpaces(dtmf_tocken);
   17e0e:	239e      	movs	r3, #158	; 0x9e
   17e10:	005b      	lsls	r3, r3, #1
   17e12:	18fb      	adds	r3, r7, r3
   17e14:	681b      	ldr	r3, [r3, #0]
   17e16:	0018      	movs	r0, r3
   17e18:	4b6b      	ldr	r3, [pc, #428]	; (17fc8 <vTask_GSM_service+0xb68>)
   17e1a:	4798      	blx	r3
								processOnDTMF(dtmf_tocken);
   17e1c:	239e      	movs	r3, #158	; 0x9e
   17e1e:	005b      	lsls	r3, r3, #1
   17e20:	18fb      	adds	r3, r7, r3
   17e22:	681b      	ldr	r3, [r3, #0]
   17e24:	0018      	movs	r0, r3
   17e26:	4b69      	ldr	r3, [pc, #420]	; (17fcc <vTask_GSM_service+0xb6c>)
   17e28:	4798      	blx	r3
							if (gsm_responseLine_isCallCut(response))
   17e2a:	e138      	b.n	1809e <vTask_GSM_service+0xc3e>
							}
							else
							{
								playSoundAgain(response);
   17e2c:	230c      	movs	r3, #12
   17e2e:	18fb      	adds	r3, r7, r3
   17e30:	0018      	movs	r0, r3
   17e32:	4b67      	ldr	r3, [pc, #412]	; (17fd0 <vTask_GSM_service+0xb70>)
   17e34:	4798      	blx	r3
							if (gsm_responseLine_isCallCut(response))
   17e36:	e132      	b.n	1809e <vTask_GSM_service+0xc3e>
							}
						}
						else if ((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O') // OUTGOING CALL
   17e38:	4b52      	ldr	r3, [pc, #328]	; (17f84 <vTask_GSM_service+0xb24>)
   17e3a:	781b      	ldrb	r3, [r3, #0]
   17e3c:	b2db      	uxtb	r3, r3
   17e3e:	2b4e      	cmp	r3, #78	; 0x4e
   17e40:	d004      	beq.n	17e4c <vTask_GSM_service+0x9ec>
   17e42:	4b50      	ldr	r3, [pc, #320]	; (17f84 <vTask_GSM_service+0xb24>)
   17e44:	781b      	ldrb	r3, [r3, #0]
   17e46:	b2db      	uxtb	r3, r3
   17e48:	2b52      	cmp	r3, #82	; 0x52
   17e4a:	d163      	bne.n	17f14 <vTask_GSM_service+0xab4>
   17e4c:	4b4e      	ldr	r3, [pc, #312]	; (17f88 <vTask_GSM_service+0xb28>)
   17e4e:	781b      	ldrb	r3, [r3, #0]
   17e50:	b2db      	uxtb	r3, r3
   17e52:	2b4f      	cmp	r3, #79	; 0x4f
   17e54:	d15e      	bne.n	17f14 <vTask_GSM_service+0xab4>
						{
							if (OutGoingcallState(response) == 'R')
   17e56:	230c      	movs	r3, #12
   17e58:	18fb      	adds	r3, r7, r3
   17e5a:	0018      	movs	r0, r3
   17e5c:	4b5d      	ldr	r3, [pc, #372]	; (17fd4 <vTask_GSM_service+0xb74>)
   17e5e:	4798      	blx	r3
   17e60:	0003      	movs	r3, r0
   17e62:	2b52      	cmp	r3, #82	; 0x52
   17e64:	d10b      	bne.n	17e7e <vTask_GSM_service+0xa1e>
							{
								callCutWait = xTaskGetTickCount();
   17e66:	4b4f      	ldr	r3, [pc, #316]	; (17fa4 <vTask_GSM_service+0xb44>)
   17e68:	4798      	blx	r3
   17e6a:	0002      	movs	r2, r0
   17e6c:	4b4e      	ldr	r3, [pc, #312]	; (17fa8 <vTask_GSM_service+0xb48>)
   17e6e:	601a      	str	r2, [r3, #0]
								currentStatus = 'R';
   17e70:	4b44      	ldr	r3, [pc, #272]	; (17f84 <vTask_GSM_service+0xb24>)
   17e72:	2252      	movs	r2, #82	; 0x52
   17e74:	701a      	strb	r2, [r3, #0]
								currentCallStatus = 'O';
   17e76:	4b44      	ldr	r3, [pc, #272]	; (17f88 <vTask_GSM_service+0xb28>)
   17e78:	224f      	movs	r2, #79	; 0x4f
   17e7a:	701a      	strb	r2, [r3, #0]
							if (OutGoingcallState(response) == 'R')
   17e7c:	e10e      	b.n	1809c <vTask_GSM_service+0xc3c>
							}
							else if (gsm_responseLine_isCallCut(response) || OutGoingcallState(response) == 'E') //
   17e7e:	230c      	movs	r3, #12
   17e80:	18fb      	adds	r3, r7, r3
   17e82:	0018      	movs	r0, r3
   17e84:	4b4c      	ldr	r3, [pc, #304]	; (17fb8 <vTask_GSM_service+0xb58>)
   17e86:	4798      	blx	r3
   17e88:	1e03      	subs	r3, r0, #0
   17e8a:	d107      	bne.n	17e9c <vTask_GSM_service+0xa3c>
   17e8c:	230c      	movs	r3, #12
   17e8e:	18fb      	adds	r3, r7, r3
   17e90:	0018      	movs	r0, r3
   17e92:	4b50      	ldr	r3, [pc, #320]	; (17fd4 <vTask_GSM_service+0xb74>)
   17e94:	4798      	blx	r3
   17e96:	0003      	movs	r3, r0
   17e98:	2b45      	cmp	r3, #69	; 0x45
   17e9a:	d110      	bne.n	17ebe <vTask_GSM_service+0xa5e>
							{
								char t1 = actionType;
   17e9c:	233c      	movs	r3, #60	; 0x3c
   17e9e:	33ff      	adds	r3, #255	; 0xff
   17ea0:	18fb      	adds	r3, r7, r3
   17ea2:	4a4d      	ldr	r2, [pc, #308]	; (17fd8 <vTask_GSM_service+0xb78>)
   17ea4:	7812      	ldrb	r2, [r2, #0]
   17ea6:	701a      	strb	r2, [r3, #0]
								endCall();
   17ea8:	4b42      	ldr	r3, [pc, #264]	; (17fb4 <vTask_GSM_service+0xb54>)
   17eaa:	4798      	blx	r3
								checkRespSMS(t1);
   17eac:	233c      	movs	r3, #60	; 0x3c
   17eae:	33ff      	adds	r3, #255	; 0xff
   17eb0:	18fb      	adds	r3, r7, r3
   17eb2:	781b      	ldrb	r3, [r3, #0]
   17eb4:	0018      	movs	r0, r3
   17eb6:	4b49      	ldr	r3, [pc, #292]	; (17fdc <vTask_GSM_service+0xb7c>)
   17eb8:	4798      	blx	r3
							{
   17eba:	46c0      	nop			; (mov r8, r8)
							if (OutGoingcallState(response) == 'R')
   17ebc:	e0ee      	b.n	1809c <vTask_GSM_service+0xc3c>
							}
							else if (OutGoingcallState(response) == 'I')
   17ebe:	230c      	movs	r3, #12
   17ec0:	18fb      	adds	r3, r7, r3
   17ec2:	0018      	movs	r0, r3
   17ec4:	4b43      	ldr	r3, [pc, #268]	; (17fd4 <vTask_GSM_service+0xb74>)
   17ec6:	4798      	blx	r3
   17ec8:	0003      	movs	r3, r0
   17eca:	2b49      	cmp	r3, #73	; 0x49
   17ecc:	d000      	beq.n	17ed0 <vTask_GSM_service+0xa70>
   17ece:	e0e5      	b.n	1809c <vTask_GSM_service+0xc3c>
							{
								callCutWait = xTaskGetTickCount();
   17ed0:	4b34      	ldr	r3, [pc, #208]	; (17fa4 <vTask_GSM_service+0xb44>)
   17ed2:	4798      	blx	r3
   17ed4:	0002      	movs	r2, r0
   17ed6:	4b34      	ldr	r3, [pc, #208]	; (17fa8 <vTask_GSM_service+0xb48>)
   17ed8:	601a      	str	r2, [r3, #0]
								currentStatus = 'I';
   17eda:	4b2a      	ldr	r3, [pc, #168]	; (17f84 <vTask_GSM_service+0xb24>)
   17edc:	2249      	movs	r2, #73	; 0x49
   17ede:	701a      	strb	r2, [r3, #0]
								currentCallStatus = 'O';
   17ee0:	4b29      	ldr	r3, [pc, #164]	; (17f88 <vTask_GSM_service+0xb28>)
   17ee2:	224f      	movs	r2, #79	; 0x4f
   17ee4:	701a      	strb	r2, [r3, #0]
								callAccepted = true;
   17ee6:	4b3e      	ldr	r3, [pc, #248]	; (17fe0 <vTask_GSM_service+0xb80>)
   17ee8:	2201      	movs	r2, #1
   17eea:	701a      	strb	r2, [r3, #0]
								setCallStateOnLCD(LCDCALLSTATE_INCALL,NULL,true);
   17eec:	2201      	movs	r2, #1
   17eee:	2100      	movs	r1, #0
   17ef0:	2002      	movs	r0, #2
   17ef2:	4b1f      	ldr	r3, [pc, #124]	; (17f70 <vTask_GSM_service+0xb10>)
   17ef4:	4798      	blx	r3
								if (!m2mEvent)
   17ef6:	4b3b      	ldr	r3, [pc, #236]	; (17fe4 <vTask_GSM_service+0xb84>)
   17ef8:	781b      	ldrb	r3, [r3, #0]
   17efa:	2201      	movs	r2, #1
   17efc:	4053      	eors	r3, r2
   17efe:	b2db      	uxtb	r3, r3
   17f00:	2b00      	cmp	r3, #0
   17f02:	d100      	bne.n	17f06 <vTask_GSM_service+0xaa6>
   17f04:	e0ca      	b.n	1809c <vTask_GSM_service+0xc3c>
								{
									playSound(actionType,true);
   17f06:	4b34      	ldr	r3, [pc, #208]	; (17fd8 <vTask_GSM_service+0xb78>)
   17f08:	781b      	ldrb	r3, [r3, #0]
   17f0a:	2101      	movs	r1, #1
   17f0c:	0018      	movs	r0, r3
   17f0e:	4b36      	ldr	r3, [pc, #216]	; (17fe8 <vTask_GSM_service+0xb88>)
   17f10:	4798      	blx	r3
							if (OutGoingcallState(response) == 'R')
   17f12:	e0c3      	b.n	1809c <vTask_GSM_service+0xc3c>
								}
							}
						}
						else if (currentStatus == 'I' && currentCallStatus == 'O') //IN CALL OUTGOING CALL
   17f14:	4b1b      	ldr	r3, [pc, #108]	; (17f84 <vTask_GSM_service+0xb24>)
   17f16:	781b      	ldrb	r3, [r3, #0]
   17f18:	b2db      	uxtb	r3, r3
   17f1a:	2b49      	cmp	r3, #73	; 0x49
   17f1c:	d001      	beq.n	17f22 <vTask_GSM_service+0xac2>
   17f1e:	f7ff fb5b 	bl	175d8 <vTask_GSM_service+0x178>
   17f22:	4b19      	ldr	r3, [pc, #100]	; (17f88 <vTask_GSM_service+0xb28>)
   17f24:	781b      	ldrb	r3, [r3, #0]
   17f26:	b2db      	uxtb	r3, r3
   17f28:	2b4f      	cmp	r3, #79	; 0x4f
   17f2a:	d001      	beq.n	17f30 <vTask_GSM_service+0xad0>
   17f2c:	f7ff fb54 	bl	175d8 <vTask_GSM_service+0x178>
						{
							if (gsm_responseLine_isCallCut(response) || OutGoingcallState(response) == 'E')
   17f30:	230c      	movs	r3, #12
   17f32:	18fb      	adds	r3, r7, r3
   17f34:	0018      	movs	r0, r3
   17f36:	4b20      	ldr	r3, [pc, #128]	; (17fb8 <vTask_GSM_service+0xb58>)
   17f38:	4798      	blx	r3
   17f3a:	1e03      	subs	r3, r0, #0
   17f3c:	d107      	bne.n	17f4e <vTask_GSM_service+0xaee>
   17f3e:	230c      	movs	r3, #12
   17f40:	18fb      	adds	r3, r7, r3
   17f42:	0018      	movs	r0, r3
   17f44:	4b23      	ldr	r3, [pc, #140]	; (17fd4 <vTask_GSM_service+0xb74>)
   17f46:	4798      	blx	r3
   17f48:	0003      	movs	r3, r0
   17f4a:	2b45      	cmp	r3, #69	; 0x45
   17f4c:	d14e      	bne.n	17fec <vTask_GSM_service+0xb8c>
							{
								endCall();
   17f4e:	4b19      	ldr	r3, [pc, #100]	; (17fb4 <vTask_GSM_service+0xb54>)
   17f50:	4798      	blx	r3
   17f52:	e0a4      	b.n	1809e <vTask_GSM_service+0xc3e>
   17f54:	2000062c 	.word	0x2000062c
   17f58:	00010a8d 	.word	0x00010a8d
   17f5c:	0002a78c 	.word	0x0002a78c
   17f60:	00014015 	.word	0x00014015
   17f64:	00010b91 	.word	0x00010b91
   17f68:	00010be1 	.word	0x00010be1
   17f6c:	00010d1d 	.word	0x00010d1d
   17f70:	0001cc35 	.word	0x0001cc35
   17f74:	0002a794 	.word	0x0002a794
   17f78:	00012b05 	.word	0x00012b05
   17f7c:	000126dd 	.word	0x000126dd
   17f80:	2000073c 	.word	0x2000073c
   17f84:	200007d8 	.word	0x200007d8
   17f88:	20000787 	.word	0x20000787
   17f8c:	0001353d 	.word	0x0001353d
   17f90:	00028f13 	.word	0x00028f13
   17f94:	20000794 	.word	0x20000794
   17f98:	0001ffe9 	.word	0x0001ffe9
   17f9c:	00013425 	.word	0x00013425
   17fa0:	0001356d 	.word	0x0001356d
   17fa4:	0002034d 	.word	0x0002034d
   17fa8:	20000814 	.word	0x20000814
   17fac:	000170e9 	.word	0x000170e9
   17fb0:	0001461d 	.word	0x0001461d
   17fb4:	00014325 	.word	0x00014325
   17fb8:	00013611 	.word	0x00013611
   17fbc:	00013689 	.word	0x00013689
   17fc0:	0002a7a4 	.word	0x0002a7a4
   17fc4:	00029205 	.word	0x00029205
   17fc8:	00012a91 	.word	0x00012a91
   17fcc:	00014bb1 	.word	0x00014bb1
   17fd0:	00014775 	.word	0x00014775
   17fd4:	000148b5 	.word	0x000148b5
   17fd8:	2000075b 	.word	0x2000075b
   17fdc:	00014b39 	.word	0x00014b39
   17fe0:	20000796 	.word	0x20000796
   17fe4:	2000073b 	.word	0x2000073b
   17fe8:	00014665 	.word	0x00014665
							}
							else if (gsm_responseLine_isNew_DTMF_Command_Received(response))
   17fec:	230c      	movs	r3, #12
   17fee:	18fb      	adds	r3, r7, r3
   17ff0:	0018      	movs	r0, r3
   17ff2:	4b2c      	ldr	r3, [pc, #176]	; (180a4 <vTask_GSM_service+0xc44>)
   17ff4:	4798      	blx	r3
   17ff6:	1e03      	subs	r3, r0, #0
   17ff8:	d025      	beq.n	18046 <vTask_GSM_service+0xbe6>
							{
								char *dtmf_tocken;
								dtmf_tocken = strtok(response,": ");
   17ffa:	4a2b      	ldr	r2, [pc, #172]	; (180a8 <vTask_GSM_service+0xc48>)
   17ffc:	230c      	movs	r3, #12
   17ffe:	18fb      	adds	r3, r7, r3
   18000:	0011      	movs	r1, r2
   18002:	0018      	movs	r0, r3
   18004:	4b29      	ldr	r3, [pc, #164]	; (180ac <vTask_GSM_service+0xc4c>)
   18006:	4798      	blx	r3
   18008:	0003      	movs	r3, r0
   1800a:	229a      	movs	r2, #154	; 0x9a
   1800c:	0052      	lsls	r2, r2, #1
   1800e:	18ba      	adds	r2, r7, r2
   18010:	6013      	str	r3, [r2, #0]
								dtmf_tocken = strtok(NULL,": ");
   18012:	4b25      	ldr	r3, [pc, #148]	; (180a8 <vTask_GSM_service+0xc48>)
   18014:	0019      	movs	r1, r3
   18016:	2000      	movs	r0, #0
   18018:	4b24      	ldr	r3, [pc, #144]	; (180ac <vTask_GSM_service+0xc4c>)
   1801a:	4798      	blx	r3
   1801c:	0003      	movs	r3, r0
   1801e:	229a      	movs	r2, #154	; 0x9a
   18020:	0052      	lsls	r2, r2, #1
   18022:	18ba      	adds	r2, r7, r2
   18024:	6013      	str	r3, [r2, #0]
								RemoveSpaces(dtmf_tocken);
   18026:	239a      	movs	r3, #154	; 0x9a
   18028:	005b      	lsls	r3, r3, #1
   1802a:	18fb      	adds	r3, r7, r3
   1802c:	681b      	ldr	r3, [r3, #0]
   1802e:	0018      	movs	r0, r3
   18030:	4b1f      	ldr	r3, [pc, #124]	; (180b0 <vTask_GSM_service+0xc50>)
   18032:	4798      	blx	r3
								processOnDTMF(dtmf_tocken);
   18034:	239a      	movs	r3, #154	; 0x9a
   18036:	005b      	lsls	r3, r3, #1
   18038:	18fb      	adds	r3, r7, r3
   1803a:	681b      	ldr	r3, [r3, #0]
   1803c:	0018      	movs	r0, r3
   1803e:	4b1d      	ldr	r3, [pc, #116]	; (180b4 <vTask_GSM_service+0xc54>)
   18040:	4798      	blx	r3
   18042:	f7ff fac9 	bl	175d8 <vTask_GSM_service+0x178>
							}
							else
							{
								playSoundAgain(response);
   18046:	230c      	movs	r3, #12
   18048:	18fb      	adds	r3, r7, r3
   1804a:	0018      	movs	r0, r3
   1804c:	4b1a      	ldr	r3, [pc, #104]	; (180b8 <vTask_GSM_service+0xc58>)
   1804e:	4798      	blx	r3
   18050:	f7ff fac2 	bl	175d8 <vTask_GSM_service+0x178>
				}
			}
		}
		else
		{
			boolGsm_config_flag			=false;
   18054:	234c      	movs	r3, #76	; 0x4c
   18056:	33ff      	adds	r3, #255	; 0xff
   18058:	18fb      	adds	r3, r7, r3
   1805a:	2200      	movs	r2, #0
   1805c:	701a      	strb	r2, [r3, #0]
			boolOne_Time_Msg_Delete_Flag   =false;
   1805e:	23a5      	movs	r3, #165	; 0xa5
   18060:	005b      	lsls	r3, r3, #1
   18062:	18fb      	adds	r3, r7, r3
   18064:	2200      	movs	r2, #0
   18066:	701a      	strb	r2, [r3, #0]
			
			GSM_PWR_ON;
   18068:	4b14      	ldr	r3, [pc, #80]	; (180bc <vTask_GSM_service+0xc5c>)
   1806a:	4a14      	ldr	r2, [pc, #80]	; (180bc <vTask_GSM_service+0xc5c>)
   1806c:	6812      	ldr	r2, [r2, #0]
   1806e:	2180      	movs	r1, #128	; 0x80
   18070:	0249      	lsls	r1, r1, #9
   18072:	430a      	orrs	r2, r1
   18074:	601a      	str	r2, [r3, #0]
			vTaskDelay(3000);
   18076:	4b12      	ldr	r3, [pc, #72]	; (180c0 <vTask_GSM_service+0xc60>)
   18078:	0018      	movs	r0, r3
   1807a:	4b12      	ldr	r3, [pc, #72]	; (180c4 <vTask_GSM_service+0xc64>)
   1807c:	4798      	blx	r3
			GSM_PWR_OFF;
   1807e:	4b0f      	ldr	r3, [pc, #60]	; (180bc <vTask_GSM_service+0xc5c>)
   18080:	4a0e      	ldr	r2, [pc, #56]	; (180bc <vTask_GSM_service+0xc5c>)
   18082:	6812      	ldr	r2, [r2, #0]
   18084:	4910      	ldr	r1, [pc, #64]	; (180c8 <vTask_GSM_service+0xc68>)
   18086:	400a      	ands	r2, r1
   18088:	601a      	str	r2, [r3, #0]
			vTaskDelay(5000);
   1808a:	4b10      	ldr	r3, [pc, #64]	; (180cc <vTask_GSM_service+0xc6c>)
   1808c:	0018      	movs	r0, r3
   1808e:	4b0d      	ldr	r3, [pc, #52]	; (180c4 <vTask_GSM_service+0xc64>)
   18090:	4798      	blx	r3
   18092:	f7ff faa1 	bl	175d8 <vTask_GSM_service+0x178>
							if (gsm_responseLine_isRinging(response))
   18096:	46c0      	nop			; (mov r8, r8)
   18098:	f7ff fa9e 	bl	175d8 <vTask_GSM_service+0x178>
							if (OutGoingcallState(response) == 'R')
   1809c:	46c0      	nop			; (mov r8, r8)
		if (GSM_STATUS_OK)
   1809e:	f7ff fa9b 	bl	175d8 <vTask_GSM_service+0x178>
   180a2:	46c0      	nop			; (mov r8, r8)
   180a4:	00013689 	.word	0x00013689
   180a8:	0002a7a4 	.word	0x0002a7a4
   180ac:	00029205 	.word	0x00029205
   180b0:	00012a91 	.word	0x00012a91
   180b4:	00014bb1 	.word	0x00014bb1
   180b8:	00014775 	.word	0x00014775
   180bc:	41004490 	.word	0x41004490
   180c0:	00000bb8 	.word	0x00000bb8
   180c4:	0001ffe9 	.word	0x0001ffe9
   180c8:	fffeffff 	.word	0xfffeffff
   180cc:	00001388 	.word	0x00001388

000180d0 <start_gsm_service>:
		}
	}
}
void start_gsm_service(void)
{
   180d0:	b590      	push	{r4, r7, lr}
   180d2:	b083      	sub	sp, #12
   180d4:	af02      	add	r7, sp, #8
	xTaskCreate(vTask_GSM_service,NULL,(uint16_t)940,NULL,1,NULL);
   180d6:	23eb      	movs	r3, #235	; 0xeb
   180d8:	009a      	lsls	r2, r3, #2
   180da:	4806      	ldr	r0, [pc, #24]	; (180f4 <start_gsm_service+0x24>)
   180dc:	2300      	movs	r3, #0
   180de:	9301      	str	r3, [sp, #4]
   180e0:	2301      	movs	r3, #1
   180e2:	9300      	str	r3, [sp, #0]
   180e4:	2300      	movs	r3, #0
   180e6:	2100      	movs	r1, #0
   180e8:	4c03      	ldr	r4, [pc, #12]	; (180f8 <start_gsm_service+0x28>)
   180ea:	47a0      	blx	r4
}
   180ec:	46c0      	nop			; (mov r8, r8)
   180ee:	46bd      	mov	sp, r7
   180f0:	b001      	add	sp, #4
   180f2:	bd90      	pop	{r4, r7, pc}
   180f4:	00017461 	.word	0x00017461
   180f8:	0001fca9 	.word	0x0001fca9

000180fc <busy>:

bool busy(void)
{
   180fc:	b580      	push	{r7, lr}
   180fe:	af00      	add	r7, sp, #0
	return (inCall || isRinging  /*|| inInterrupt*/);
   18100:	4b09      	ldr	r3, [pc, #36]	; (18128 <busy+0x2c>)
   18102:	781b      	ldrb	r3, [r3, #0]
   18104:	2b00      	cmp	r3, #0
   18106:	d104      	bne.n	18112 <busy+0x16>
   18108:	4b08      	ldr	r3, [pc, #32]	; (1812c <busy+0x30>)
   1810a:	781b      	ldrb	r3, [r3, #0]
   1810c:	b2db      	uxtb	r3, r3
   1810e:	2b00      	cmp	r3, #0
   18110:	d001      	beq.n	18116 <busy+0x1a>
   18112:	2301      	movs	r3, #1
   18114:	e000      	b.n	18118 <busy+0x1c>
   18116:	2300      	movs	r3, #0
   18118:	1c1a      	adds	r2, r3, #0
   1811a:	2301      	movs	r3, #1
   1811c:	4013      	ands	r3, r2
   1811e:	b2db      	uxtb	r3, r3
}
   18120:	0018      	movs	r0, r3
   18122:	46bd      	mov	sp, r7
   18124:	bd80      	pop	{r7, pc}
   18126:	46c0      	nop			; (mov r8, r8)
   18128:	20000794 	.word	0x20000794
   1812c:	2000068e 	.word	0x2000068e

00018130 <checkNotInCall>:

bool checkNotInCall(void)
{
   18130:	b580      	push	{r7, lr}
   18132:	af00      	add	r7, sp, #0
	return ( /*!sendCUSDResponse     &&*/  currentStatus=='N'
   18134:	4b13      	ldr	r3, [pc, #76]	; (18184 <checkNotInCall+0x54>)
   18136:	781b      	ldrb	r3, [r3, #0]
   18138:	b2db      	uxtb	r3, r3
	&&  currentCallStatus=='N'  &&  obtainNewEvent
	&&  !freezeIncomingCalls && !busy());
   1813a:	2b4e      	cmp	r3, #78	; 0x4e
   1813c:	d11a      	bne.n	18174 <checkNotInCall+0x44>
	&&  currentCallStatus=='N'  &&  obtainNewEvent
   1813e:	4b12      	ldr	r3, [pc, #72]	; (18188 <checkNotInCall+0x58>)
   18140:	781b      	ldrb	r3, [r3, #0]
   18142:	b2db      	uxtb	r3, r3
   18144:	2b4e      	cmp	r3, #78	; 0x4e
   18146:	d115      	bne.n	18174 <checkNotInCall+0x44>
   18148:	4b10      	ldr	r3, [pc, #64]	; (1818c <checkNotInCall+0x5c>)
   1814a:	781b      	ldrb	r3, [r3, #0]
   1814c:	2b00      	cmp	r3, #0
   1814e:	d011      	beq.n	18174 <checkNotInCall+0x44>
	&&  !freezeIncomingCalls && !busy());
   18150:	4b0f      	ldr	r3, [pc, #60]	; (18190 <checkNotInCall+0x60>)
   18152:	781b      	ldrb	r3, [r3, #0]
   18154:	2201      	movs	r2, #1
   18156:	4053      	eors	r3, r2
   18158:	b2db      	uxtb	r3, r3
   1815a:	2b00      	cmp	r3, #0
   1815c:	d00a      	beq.n	18174 <checkNotInCall+0x44>
   1815e:	4b0d      	ldr	r3, [pc, #52]	; (18194 <checkNotInCall+0x64>)
   18160:	4798      	blx	r3
   18162:	0003      	movs	r3, r0
   18164:	001a      	movs	r2, r3
   18166:	2301      	movs	r3, #1
   18168:	4053      	eors	r3, r2
   1816a:	b2db      	uxtb	r3, r3
   1816c:	2b00      	cmp	r3, #0
   1816e:	d001      	beq.n	18174 <checkNotInCall+0x44>
   18170:	2301      	movs	r3, #1
   18172:	e000      	b.n	18176 <checkNotInCall+0x46>
   18174:	2300      	movs	r3, #0
   18176:	1c1a      	adds	r2, r3, #0
   18178:	2301      	movs	r3, #1
   1817a:	4013      	ands	r3, r2
   1817c:	b2db      	uxtb	r3, r3
}
   1817e:	0018      	movs	r0, r3
   18180:	46bd      	mov	sp, r7
   18182:	bd80      	pop	{r7, pc}
   18184:	200007d8 	.word	0x200007d8
   18188:	20000787 	.word	0x20000787
   1818c:	2000076a 	.word	0x2000076a
   18190:	2000073c 	.word	0x2000073c
   18194:	000180fd 	.word	0x000180fd

00018198 <gsm_checkSleepElligible>:

bool gsm_checkSleepElligible(void)
{
   18198:	b580      	push	{r7, lr}
   1819a:	af00      	add	r7, sp, #0
	if (factory_settings_parameter_struct.ENABLE_M2M)
   1819c:	4b21      	ldr	r3, [pc, #132]	; (18224 <gsm_checkSleepElligible+0x8c>)
   1819e:	78db      	ldrb	r3, [r3, #3]
   181a0:	2b00      	cmp	r3, #0
   181a2:	d021      	beq.n	181e8 <gsm_checkSleepElligible+0x50>
	{
		return(!isGSMModuleAwake  && checkNotInCall() && !m2mEventStaged && !eventStaged);
   181a4:	4b20      	ldr	r3, [pc, #128]	; (18228 <gsm_checkSleepElligible+0x90>)
   181a6:	781b      	ldrb	r3, [r3, #0]
   181a8:	b2db      	uxtb	r3, r3
   181aa:	2201      	movs	r2, #1
   181ac:	4053      	eors	r3, r2
   181ae:	b2db      	uxtb	r3, r3
   181b0:	2b00      	cmp	r3, #0
   181b2:	d013      	beq.n	181dc <gsm_checkSleepElligible+0x44>
   181b4:	4b1d      	ldr	r3, [pc, #116]	; (1822c <gsm_checkSleepElligible+0x94>)
   181b6:	4798      	blx	r3
   181b8:	1e03      	subs	r3, r0, #0
   181ba:	d00f      	beq.n	181dc <gsm_checkSleepElligible+0x44>
   181bc:	4b1c      	ldr	r3, [pc, #112]	; (18230 <gsm_checkSleepElligible+0x98>)
   181be:	781b      	ldrb	r3, [r3, #0]
   181c0:	2201      	movs	r2, #1
   181c2:	4053      	eors	r3, r2
   181c4:	b2db      	uxtb	r3, r3
   181c6:	2b00      	cmp	r3, #0
   181c8:	d008      	beq.n	181dc <gsm_checkSleepElligible+0x44>
   181ca:	4b1a      	ldr	r3, [pc, #104]	; (18234 <gsm_checkSleepElligible+0x9c>)
   181cc:	781b      	ldrb	r3, [r3, #0]
   181ce:	2201      	movs	r2, #1
   181d0:	4053      	eors	r3, r2
   181d2:	b2db      	uxtb	r3, r3
   181d4:	2b00      	cmp	r3, #0
   181d6:	d001      	beq.n	181dc <gsm_checkSleepElligible+0x44>
   181d8:	2301      	movs	r3, #1
   181da:	e000      	b.n	181de <gsm_checkSleepElligible+0x46>
   181dc:	2300      	movs	r3, #0
   181de:	1c1a      	adds	r2, r3, #0
   181e0:	2301      	movs	r3, #1
   181e2:	4013      	ands	r3, r2
   181e4:	b2db      	uxtb	r3, r3
   181e6:	e019      	b.n	1821c <gsm_checkSleepElligible+0x84>
	}
	else
	{
		return(!isGSMModuleAwake  && checkNotInCall() && !eventStaged);
   181e8:	4b0f      	ldr	r3, [pc, #60]	; (18228 <gsm_checkSleepElligible+0x90>)
   181ea:	781b      	ldrb	r3, [r3, #0]
   181ec:	b2db      	uxtb	r3, r3
   181ee:	2201      	movs	r2, #1
   181f0:	4053      	eors	r3, r2
   181f2:	b2db      	uxtb	r3, r3
   181f4:	2b00      	cmp	r3, #0
   181f6:	d00c      	beq.n	18212 <gsm_checkSleepElligible+0x7a>
   181f8:	4b0c      	ldr	r3, [pc, #48]	; (1822c <gsm_checkSleepElligible+0x94>)
   181fa:	4798      	blx	r3
   181fc:	1e03      	subs	r3, r0, #0
   181fe:	d008      	beq.n	18212 <gsm_checkSleepElligible+0x7a>
   18200:	4b0c      	ldr	r3, [pc, #48]	; (18234 <gsm_checkSleepElligible+0x9c>)
   18202:	781b      	ldrb	r3, [r3, #0]
   18204:	2201      	movs	r2, #1
   18206:	4053      	eors	r3, r2
   18208:	b2db      	uxtb	r3, r3
   1820a:	2b00      	cmp	r3, #0
   1820c:	d001      	beq.n	18212 <gsm_checkSleepElligible+0x7a>
   1820e:	2301      	movs	r3, #1
   18210:	e000      	b.n	18214 <gsm_checkSleepElligible+0x7c>
   18212:	2300      	movs	r3, #0
   18214:	1c1a      	adds	r2, r3, #0
   18216:	2301      	movs	r3, #1
   18218:	4013      	ands	r3, r2
   1821a:	b2db      	uxtb	r3, r3
	}
   1821c:	0018      	movs	r0, r3
   1821e:	46bd      	mov	sp, r7
   18220:	bd80      	pop	{r7, pc}
   18222:	46c0      	nop			; (mov r8, r8)
   18224:	2000062c 	.word	0x2000062c
   18228:	20000684 	.word	0x20000684
   1822c:	00018131 	.word	0x00018131
   18230:	20000786 	.word	0x20000786
   18234:	200007ce 	.word	0x200007ce

00018238 <lcd_displaying_task>:
static QueueHandle_t xfour_Second_Queue;
static TimerHandle_t four_Second_timeout_timer=NULL;
static void four_second_timer_callback(TimerHandle_t timer);

static void lcd_displaying_task(void *params)
{
   18238:	b590      	push	{r4, r7, lr}
   1823a:	b093      	sub	sp, #76	; 0x4c
   1823c:	af02      	add	r7, sp, #8
   1823e:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	
	lcd_in_sleep = false;
   18240:	4bde      	ldr	r3, [pc, #888]	; (185bc <lcd_displaying_task+0x384>)
   18242:	2200      	movs	r2, #0
   18244:	701a      	strb	r2, [r3, #0]
	setNetworkCharacter=true;
   18246:	4bde      	ldr	r3, [pc, #888]	; (185c0 <lcd_displaying_task+0x388>)
   18248:	2201      	movs	r2, #1
   1824a:	701a      	strb	r2, [r3, #0]
	LCD_PWR_CONFIG();
   1824c:	4bdd      	ldr	r3, [pc, #884]	; (185c4 <lcd_displaying_task+0x38c>)
   1824e:	4798      	blx	r3
	LCD_PWR_EN();
   18250:	4bdd      	ldr	r3, [pc, #884]	; (185c8 <lcd_displaying_task+0x390>)
   18252:	4798      	blx	r3
	vTaskDelay(500);
   18254:	23fa      	movs	r3, #250	; 0xfa
   18256:	005b      	lsls	r3, r3, #1
   18258:	0018      	movs	r0, r3
   1825a:	4bdc      	ldr	r3, [pc, #880]	; (185cc <lcd_displaying_task+0x394>)
   1825c:	4798      	blx	r3
	
	LCD_init();
   1825e:	4bdc      	ldr	r3, [pc, #880]	; (185d0 <lcd_displaying_task+0x398>)
   18260:	4798      	blx	r3
	
	uint8_t screen=1;
   18262:	233f      	movs	r3, #63	; 0x3f
   18264:	18fb      	adds	r3, r7, r3
   18266:	2201      	movs	r2, #1
   18268:	701a      	strb	r2, [r3, #0]
	bool four_sec_timer_is_active = true;
   1826a:	233d      	movs	r3, #61	; 0x3d
   1826c:	18fb      	adds	r3, r7, r3
   1826e:	2201      	movs	r2, #1
   18270:	701a      	strb	r2, [r3, #0]
	bool two_sec_timer_is_active = false;
   18272:	233c      	movs	r3, #60	; 0x3c
   18274:	18fb      	adds	r3, r7, r3
   18276:	2200      	movs	r2, #0
   18278:	701a      	strb	r2, [r3, #0]
	
	uint8_t time=0;
   1827a:	233a      	movs	r3, #58	; 0x3a
   1827c:	18fb      	adds	r3, r7, r3
   1827e:	2200      	movs	r2, #0
   18280:	701a      	strb	r2, [r3, #0]
	
	
	
	
	LCD_clear();
   18282:	4bd4      	ldr	r3, [pc, #848]	; (185d4 <lcd_displaying_task+0x39c>)
   18284:	4798      	blx	r3
	LCD_setCursor(0,0);
   18286:	2100      	movs	r1, #0
   18288:	2000      	movs	r0, #0
   1828a:	4bd3      	ldr	r3, [pc, #844]	; (185d8 <lcd_displaying_task+0x3a0>)
   1828c:	4798      	blx	r3
	lcd_printf(" KRISHNA  SMART ");
   1828e:	4bd3      	ldr	r3, [pc, #844]	; (185dc <lcd_displaying_task+0x3a4>)
   18290:	0018      	movs	r0, r3
   18292:	4bd3      	ldr	r3, [pc, #844]	; (185e0 <lcd_displaying_task+0x3a8>)
   18294:	4798      	blx	r3
	LCD_setCursor(0,1);
   18296:	2101      	movs	r1, #1
   18298:	2000      	movs	r0, #0
   1829a:	4bcf      	ldr	r3, [pc, #828]	; (185d8 <lcd_displaying_task+0x3a0>)
   1829c:	4798      	blx	r3
	lcd_printf("   TECHNOLOGY   ");
   1829e:	4bd1      	ldr	r3, [pc, #836]	; (185e4 <lcd_displaying_task+0x3ac>)
   182a0:	0018      	movs	r0, r3
   182a2:	4bcf      	ldr	r3, [pc, #828]	; (185e0 <lcd_displaying_task+0x3a8>)
   182a4:	4798      	blx	r3
	vTaskDelay(3000);
   182a6:	4bd0      	ldr	r3, [pc, #832]	; (185e8 <lcd_displaying_task+0x3b0>)
   182a8:	0018      	movs	r0, r3
   182aa:	4bc8      	ldr	r3, [pc, #800]	; (185cc <lcd_displaying_task+0x394>)
   182ac:	4798      	blx	r3
	
	LCD_clear();
   182ae:	4bc9      	ldr	r3, [pc, #804]	; (185d4 <lcd_displaying_task+0x39c>)
   182b0:	4798      	blx	r3
	LCD_setCursor(0,0);
   182b2:	2100      	movs	r1, #0
   182b4:	2000      	movs	r0, #0
   182b6:	4bc8      	ldr	r3, [pc, #800]	; (185d8 <lcd_displaying_task+0x3a0>)
   182b8:	4798      	blx	r3
	lcd_printf("  SOFTWARE VER  ");
   182ba:	4bcc      	ldr	r3, [pc, #816]	; (185ec <lcd_displaying_task+0x3b4>)
   182bc:	0018      	movs	r0, r3
   182be:	4bc8      	ldr	r3, [pc, #800]	; (185e0 <lcd_displaying_task+0x3a8>)
   182c0:	4798      	blx	r3
	LCD_setCursor(0,1);
   182c2:	2101      	movs	r1, #1
   182c4:	2000      	movs	r0, #0
   182c6:	4bc4      	ldr	r3, [pc, #784]	; (185d8 <lcd_displaying_task+0x3a0>)
   182c8:	4798      	blx	r3
	lcd_printf("%s",VERSION_NO);
   182ca:	4ac9      	ldr	r2, [pc, #804]	; (185f0 <lcd_displaying_task+0x3b8>)
   182cc:	4bc9      	ldr	r3, [pc, #804]	; (185f4 <lcd_displaying_task+0x3bc>)
   182ce:	0011      	movs	r1, r2
   182d0:	0018      	movs	r0, r3
   182d2:	4bc3      	ldr	r3, [pc, #780]	; (185e0 <lcd_displaying_task+0x3a8>)
   182d4:	4798      	blx	r3
	vTaskDelay(2000);
   182d6:	23fa      	movs	r3, #250	; 0xfa
   182d8:	00db      	lsls	r3, r3, #3
   182da:	0018      	movs	r0, r3
   182dc:	4bbb      	ldr	r3, [pc, #748]	; (185cc <lcd_displaying_task+0x394>)
   182de:	4798      	blx	r3
	
	four_Second_timeout_timer = xTimerCreate(NULL,(1 * 4000 / portTICK_PERIOD_MS), pdTRUE, NULL, four_second_timer_callback);
   182e0:	23fa      	movs	r3, #250	; 0xfa
   182e2:	0119      	lsls	r1, r3, #4
   182e4:	4bc4      	ldr	r3, [pc, #784]	; (185f8 <lcd_displaying_task+0x3c0>)
   182e6:	9300      	str	r3, [sp, #0]
   182e8:	2300      	movs	r3, #0
   182ea:	2201      	movs	r2, #1
   182ec:	2000      	movs	r0, #0
   182ee:	4cc3      	ldr	r4, [pc, #780]	; (185fc <lcd_displaying_task+0x3c4>)
   182f0:	47a0      	blx	r4
   182f2:	0002      	movs	r2, r0
   182f4:	4bc2      	ldr	r3, [pc, #776]	; (18600 <lcd_displaying_task+0x3c8>)
   182f6:	601a      	str	r2, [r3, #0]
	xTimerStart( four_Second_timeout_timer, 0 );
   182f8:	4bc1      	ldr	r3, [pc, #772]	; (18600 <lcd_displaying_task+0x3c8>)
   182fa:	681c      	ldr	r4, [r3, #0]
   182fc:	4bc1      	ldr	r3, [pc, #772]	; (18604 <lcd_displaying_task+0x3cc>)
   182fe:	4798      	blx	r3
   18300:	0002      	movs	r2, r0
   18302:	2300      	movs	r3, #0
   18304:	9300      	str	r3, [sp, #0]
   18306:	2300      	movs	r3, #0
   18308:	2101      	movs	r1, #1
   1830a:	0020      	movs	r0, r4
   1830c:	4cbe      	ldr	r4, [pc, #760]	; (18608 <lcd_displaying_task+0x3d0>)
   1830e:	47a0      	blx	r4
	
	
	for (;;)
	{
		if (lcd_in_sleep)
   18310:	4baa      	ldr	r3, [pc, #680]	; (185bc <lcd_displaying_task+0x384>)
   18312:	781b      	ldrb	r3, [r3, #0]
   18314:	b2db      	uxtb	r3, r3
   18316:	2b00      	cmp	r3, #0
   18318:	d009      	beq.n	1832e <lcd_displaying_task+0xf6>
		{
			lcd_in_sleep = false;
   1831a:	4ba8      	ldr	r3, [pc, #672]	; (185bc <lcd_displaying_task+0x384>)
   1831c:	2200      	movs	r2, #0
   1831e:	701a      	strb	r2, [r3, #0]
			LCD_PWR_EN();
   18320:	4ba9      	ldr	r3, [pc, #676]	; (185c8 <lcd_displaying_task+0x390>)
   18322:	4798      	blx	r3
			vTaskDelay(100);
   18324:	2064      	movs	r0, #100	; 0x64
   18326:	4ba9      	ldr	r3, [pc, #676]	; (185cc <lcd_displaying_task+0x394>)
   18328:	4798      	blx	r3
			LCD_init();
   1832a:	4ba9      	ldr	r3, [pc, #676]	; (185d0 <lcd_displaying_task+0x398>)
   1832c:	4798      	blx	r3
		}
		
		if(setNetworkCharacter)
   1832e:	4ba4      	ldr	r3, [pc, #656]	; (185c0 <lcd_displaying_task+0x388>)
   18330:	781b      	ldrb	r3, [r3, #0]
   18332:	b2db      	uxtb	r3, r3
   18334:	2b00      	cmp	r3, #0
   18336:	d047      	beq.n	183c8 <lcd_displaying_task+0x190>
		{
			setNetworkCharacter=false;
   18338:	4ba1      	ldr	r3, [pc, #644]	; (185c0 <lcd_displaying_task+0x388>)
   1833a:	2200      	movs	r2, #0
   1833c:	701a      	strb	r2, [r3, #0]
			byte Network_0[8]={
   1833e:	2330      	movs	r3, #48	; 0x30
   18340:	18fb      	adds	r3, r7, r3
   18342:	0018      	movs	r0, r3
   18344:	2308      	movs	r3, #8
   18346:	001a      	movs	r2, r3
   18348:	2100      	movs	r1, #0
   1834a:	4bb0      	ldr	r3, [pc, #704]	; (1860c <lcd_displaying_task+0x3d4>)
   1834c:	4798      	blx	r3
				0B00000,
				0B00000,
				0B00000
			};
			
			byte Network_1[8]={
   1834e:	2328      	movs	r3, #40	; 0x28
   18350:	18fb      	adds	r3, r7, r3
   18352:	4aaf      	ldr	r2, [pc, #700]	; (18610 <lcd_displaying_task+0x3d8>)
   18354:	ca03      	ldmia	r2!, {r0, r1}
   18356:	c303      	stmia	r3!, {r0, r1}
				0B00000,
				0B00000,
				0B11111,
				0B11111
			};
			byte Network_2[8]={
   18358:	2320      	movs	r3, #32
   1835a:	18fb      	adds	r3, r7, r3
   1835c:	4aad      	ldr	r2, [pc, #692]	; (18614 <lcd_displaying_task+0x3dc>)
   1835e:	ca03      	ldmia	r2!, {r0, r1}
   18360:	c303      	stmia	r3!, {r0, r1}
				0B00000,
				0B11111,
				0B11111,
				0B11111
			};
			byte Network_3[8]={
   18362:	2318      	movs	r3, #24
   18364:	18fb      	adds	r3, r7, r3
   18366:	4aac      	ldr	r2, [pc, #688]	; (18618 <lcd_displaying_task+0x3e0>)
   18368:	ca03      	ldmia	r2!, {r0, r1}
   1836a:	c303      	stmia	r3!, {r0, r1}
				0B11111,
				0B11111,
				0B11111,
				0B11111
			};
			byte Network_4[8]={
   1836c:	2310      	movs	r3, #16
   1836e:	18fb      	adds	r3, r7, r3
   18370:	4aaa      	ldr	r2, [pc, #680]	; (1861c <lcd_displaying_task+0x3e4>)
   18372:	ca03      	ldmia	r2!, {r0, r1}
   18374:	c303      	stmia	r3!, {r0, r1}
				0B11111,
				0B11111,
				0B11111
			};

			byte Network_5[8]={
   18376:	2308      	movs	r3, #8
   18378:	18fb      	adds	r3, r7, r3
   1837a:	4aa9      	ldr	r2, [pc, #676]	; (18620 <lcd_displaying_task+0x3e8>)
   1837c:	ca03      	ldmia	r2!, {r0, r1}
   1837e:	c303      	stmia	r3!, {r0, r1}
				0B11111,
				0B11111,
				0B11111
			};
			
			LCD_Create_Custom_createChar(0,Network_0);
   18380:	2330      	movs	r3, #48	; 0x30
   18382:	18fb      	adds	r3, r7, r3
   18384:	0019      	movs	r1, r3
   18386:	2000      	movs	r0, #0
   18388:	4ba6      	ldr	r3, [pc, #664]	; (18624 <lcd_displaying_task+0x3ec>)
   1838a:	4798      	blx	r3
			LCD_Create_Custom_createChar(1,Network_1);
   1838c:	2328      	movs	r3, #40	; 0x28
   1838e:	18fb      	adds	r3, r7, r3
   18390:	0019      	movs	r1, r3
   18392:	2001      	movs	r0, #1
   18394:	4ba3      	ldr	r3, [pc, #652]	; (18624 <lcd_displaying_task+0x3ec>)
   18396:	4798      	blx	r3
			LCD_Create_Custom_createChar(2,Network_2);
   18398:	2320      	movs	r3, #32
   1839a:	18fb      	adds	r3, r7, r3
   1839c:	0019      	movs	r1, r3
   1839e:	2002      	movs	r0, #2
   183a0:	4ba0      	ldr	r3, [pc, #640]	; (18624 <lcd_displaying_task+0x3ec>)
   183a2:	4798      	blx	r3
			LCD_Create_Custom_createChar(3,Network_3);
   183a4:	2318      	movs	r3, #24
   183a6:	18fb      	adds	r3, r7, r3
   183a8:	0019      	movs	r1, r3
   183aa:	2003      	movs	r0, #3
   183ac:	4b9d      	ldr	r3, [pc, #628]	; (18624 <lcd_displaying_task+0x3ec>)
   183ae:	4798      	blx	r3
			LCD_Create_Custom_createChar(4,Network_4);
   183b0:	2310      	movs	r3, #16
   183b2:	18fb      	adds	r3, r7, r3
   183b4:	0019      	movs	r1, r3
   183b6:	2004      	movs	r0, #4
   183b8:	4b9a      	ldr	r3, [pc, #616]	; (18624 <lcd_displaying_task+0x3ec>)
   183ba:	4798      	blx	r3
			LCD_Create_Custom_createChar(5,Network_5);
   183bc:	2308      	movs	r3, #8
   183be:	18fb      	adds	r3, r7, r3
   183c0:	0019      	movs	r1, r3
   183c2:	2005      	movs	r0, #5
   183c4:	4b97      	ldr	r3, [pc, #604]	; (18624 <lcd_displaying_task+0x3ec>)
   183c6:	4798      	blx	r3

			
		}
		
		
		if(firstEvent)
   183c8:	4b97      	ldr	r3, [pc, #604]	; (18628 <lcd_displaying_task+0x3f0>)
   183ca:	781b      	ldrb	r3, [r3, #0]
   183cc:	b2db      	uxtb	r3, r3
   183ce:	2b00      	cmp	r3, #0
   183d0:	d010      	beq.n	183f4 <lcd_displaying_task+0x1bc>
		{
			LCD_setCursor(0,0);
   183d2:	2100      	movs	r1, #0
   183d4:	2000      	movs	r0, #0
   183d6:	4b80      	ldr	r3, [pc, #512]	; (185d8 <lcd_displaying_task+0x3a0>)
   183d8:	4798      	blx	r3
			lcd_printf("Initializing... ");
   183da:	4b94      	ldr	r3, [pc, #592]	; (1862c <lcd_displaying_task+0x3f4>)
   183dc:	0018      	movs	r0, r3
   183de:	4b80      	ldr	r3, [pc, #512]	; (185e0 <lcd_displaying_task+0x3a8>)
   183e0:	4798      	blx	r3
			LCD_setCursor(0,1);
   183e2:	2101      	movs	r1, #1
   183e4:	2000      	movs	r0, #0
   183e6:	4b7c      	ldr	r3, [pc, #496]	; (185d8 <lcd_displaying_task+0x3a0>)
   183e8:	4798      	blx	r3
			lcd_printf("COMMANDER v2    ");
   183ea:	4b91      	ldr	r3, [pc, #580]	; (18630 <lcd_displaying_task+0x3f8>)
   183ec:	0018      	movs	r0, r3
   183ee:	4b7c      	ldr	r3, [pc, #496]	; (185e0 <lcd_displaying_task+0x3a8>)
   183f0:	4798      	blx	r3
   183f2:	e22c      	b.n	1884e <lcd_displaying_task+0x616>
		}
		else
		{
			switch(screen)
   183f4:	233f      	movs	r3, #63	; 0x3f
   183f6:	18fb      	adds	r3, r7, r3
   183f8:	781b      	ldrb	r3, [r3, #0]
   183fa:	2b07      	cmp	r3, #7
   183fc:	d900      	bls.n	18400 <lcd_displaying_task+0x1c8>
   183fe:	e226      	b.n	1884e <lcd_displaying_task+0x616>
   18400:	009a      	lsls	r2, r3, #2
   18402:	4b8c      	ldr	r3, [pc, #560]	; (18634 <lcd_displaying_task+0x3fc>)
   18404:	18d3      	adds	r3, r2, r3
   18406:	681b      	ldr	r3, [r3, #0]
   18408:	469f      	mov	pc, r3
			{
				case  1:
				{
					LCD_setCursor(0,0);
   1840a:	2100      	movs	r1, #0
   1840c:	2000      	movs	r0, #0
   1840e:	4b72      	ldr	r3, [pc, #456]	; (185d8 <lcd_displaying_task+0x3a0>)
   18410:	4798      	blx	r3
					lcd_printf("VRY   VYB   VBR ");
   18412:	4b89      	ldr	r3, [pc, #548]	; (18638 <lcd_displaying_task+0x400>)
   18414:	0018      	movs	r0, r3
   18416:	4b72      	ldr	r3, [pc, #456]	; (185e0 <lcd_displaying_task+0x3a8>)
   18418:	4798      	blx	r3
					LCD_setCursor(0,1);
   1841a:	2101      	movs	r1, #1
   1841c:	2000      	movs	r0, #0
   1841e:	4b6e      	ldr	r3, [pc, #440]	; (185d8 <lcd_displaying_task+0x3a0>)
   18420:	4798      	blx	r3
					lcd_printf("%03lu   ",(Analog_Parameter_Struct.PhaseRY_Voltage));
   18422:	4b86      	ldr	r3, [pc, #536]	; (1863c <lcd_displaying_task+0x404>)
   18424:	681a      	ldr	r2, [r3, #0]
   18426:	4b86      	ldr	r3, [pc, #536]	; (18640 <lcd_displaying_task+0x408>)
   18428:	0011      	movs	r1, r2
   1842a:	0018      	movs	r0, r3
   1842c:	4b6c      	ldr	r3, [pc, #432]	; (185e0 <lcd_displaying_task+0x3a8>)
   1842e:	4798      	blx	r3
					lcd_printf("%03lu   ",(Analog_Parameter_Struct.PhaseYB_Voltage));
   18430:	4b82      	ldr	r3, [pc, #520]	; (1863c <lcd_displaying_task+0x404>)
   18432:	685a      	ldr	r2, [r3, #4]
   18434:	4b82      	ldr	r3, [pc, #520]	; (18640 <lcd_displaying_task+0x408>)
   18436:	0011      	movs	r1, r2
   18438:	0018      	movs	r0, r3
   1843a:	4b69      	ldr	r3, [pc, #420]	; (185e0 <lcd_displaying_task+0x3a8>)
   1843c:	4798      	blx	r3
					lcd_printf("%03lu ",(Analog_Parameter_Struct.PhaseBR_Voltage));
   1843e:	4b7f      	ldr	r3, [pc, #508]	; (1863c <lcd_displaying_task+0x404>)
   18440:	689a      	ldr	r2, [r3, #8]
   18442:	4b80      	ldr	r3, [pc, #512]	; (18644 <lcd_displaying_task+0x40c>)
   18444:	0011      	movs	r1, r2
   18446:	0018      	movs	r0, r3
   18448:	4b65      	ldr	r3, [pc, #404]	; (185e0 <lcd_displaying_task+0x3a8>)
   1844a:	4798      	blx	r3
					break;
   1844c:	e1ff      	b.n	1884e <lcd_displaying_task+0x616>
				}
				case  2:
				{
					if(!getMotorState())
   1844e:	4b7e      	ldr	r3, [pc, #504]	; (18648 <lcd_displaying_task+0x410>)
   18450:	4798      	blx	r3
   18452:	0003      	movs	r3, r0
   18454:	001a      	movs	r2, r3
   18456:	2301      	movs	r3, #1
   18458:	4053      	eors	r3, r2
   1845a:	b2db      	uxtb	r3, r3
   1845c:	2b00      	cmp	r3, #0
   1845e:	d010      	beq.n	18482 <lcd_displaying_task+0x24a>
					{
						LCD_setCursor(0,0);
   18460:	2100      	movs	r1, #0
   18462:	2000      	movs	r0, #0
   18464:	4b5c      	ldr	r3, [pc, #368]	; (185d8 <lcd_displaying_task+0x3a0>)
   18466:	4798      	blx	r3
						lcd_printf("MOTOR:  OFF     ");
   18468:	4b78      	ldr	r3, [pc, #480]	; (1864c <lcd_displaying_task+0x414>)
   1846a:	0018      	movs	r0, r3
   1846c:	4b5c      	ldr	r3, [pc, #368]	; (185e0 <lcd_displaying_task+0x3a8>)
   1846e:	4798      	blx	r3
						LCD_setCursor(0,1);
   18470:	2101      	movs	r1, #1
   18472:	2000      	movs	r0, #0
   18474:	4b58      	ldr	r3, [pc, #352]	; (185d8 <lcd_displaying_task+0x3a0>)
   18476:	4798      	blx	r3
						lcd_printf("                ");
   18478:	4b75      	ldr	r3, [pc, #468]	; (18650 <lcd_displaying_task+0x418>)
   1847a:	0018      	movs	r0, r3
   1847c:	4b58      	ldr	r3, [pc, #352]	; (185e0 <lcd_displaying_task+0x3a8>)
   1847e:	4798      	blx	r3
						LCD_setCursor(0,0);
						lcd_printf("MOTOR CURRENT:  ");
						LCD_setCursor(0,1);
						lcd_printf("%03lu.%02lu            ",(Analog_Parameter_Struct.Motor_Current_IntPart),(Analog_Parameter_Struct.Motor_Current_DecPart));
					}
					break;
   18480:	e1e5      	b.n	1884e <lcd_displaying_task+0x616>
						LCD_setCursor(0,0);
   18482:	2100      	movs	r1, #0
   18484:	2000      	movs	r0, #0
   18486:	4b54      	ldr	r3, [pc, #336]	; (185d8 <lcd_displaying_task+0x3a0>)
   18488:	4798      	blx	r3
						lcd_printf("MOTOR CURRENT:  ");
   1848a:	4b72      	ldr	r3, [pc, #456]	; (18654 <lcd_displaying_task+0x41c>)
   1848c:	0018      	movs	r0, r3
   1848e:	4b54      	ldr	r3, [pc, #336]	; (185e0 <lcd_displaying_task+0x3a8>)
   18490:	4798      	blx	r3
						LCD_setCursor(0,1);
   18492:	2101      	movs	r1, #1
   18494:	2000      	movs	r0, #0
   18496:	4b50      	ldr	r3, [pc, #320]	; (185d8 <lcd_displaying_task+0x3a0>)
   18498:	4798      	blx	r3
						lcd_printf("%03lu.%02lu            ",(Analog_Parameter_Struct.Motor_Current_IntPart),(Analog_Parameter_Struct.Motor_Current_DecPart));
   1849a:	4b68      	ldr	r3, [pc, #416]	; (1863c <lcd_displaying_task+0x404>)
   1849c:	8a9b      	ldrh	r3, [r3, #20]
   1849e:	b29b      	uxth	r3, r3
   184a0:	0019      	movs	r1, r3
   184a2:	4b66      	ldr	r3, [pc, #408]	; (1863c <lcd_displaying_task+0x404>)
   184a4:	8adb      	ldrh	r3, [r3, #22]
   184a6:	b29b      	uxth	r3, r3
   184a8:	001a      	movs	r2, r3
   184aa:	4b6b      	ldr	r3, [pc, #428]	; (18658 <lcd_displaying_task+0x420>)
   184ac:	0018      	movs	r0, r3
   184ae:	4b4c      	ldr	r3, [pc, #304]	; (185e0 <lcd_displaying_task+0x3a8>)
   184b0:	4798      	blx	r3
					break;
   184b2:	e1cc      	b.n	1884e <lcd_displaying_task+0x616>
				}
				case  3:
				{
					if(!getMotorState())
   184b4:	4b64      	ldr	r3, [pc, #400]	; (18648 <lcd_displaying_task+0x410>)
   184b6:	4798      	blx	r3
   184b8:	0003      	movs	r3, r0
   184ba:	001a      	movs	r2, r3
   184bc:	2301      	movs	r3, #1
   184be:	4053      	eors	r3, r2
   184c0:	b2db      	uxtb	r3, r3
   184c2:	2b00      	cmp	r3, #0
   184c4:	d010      	beq.n	184e8 <lcd_displaying_task+0x2b0>
					{
						LCD_setCursor(0,0);
   184c6:	2100      	movs	r1, #0
   184c8:	2000      	movs	r0, #0
   184ca:	4b43      	ldr	r3, [pc, #268]	; (185d8 <lcd_displaying_task+0x3a0>)
   184cc:	4798      	blx	r3
						lcd_printf("MOTOR:  OFF     ");
   184ce:	4b5f      	ldr	r3, [pc, #380]	; (1864c <lcd_displaying_task+0x414>)
   184d0:	0018      	movs	r0, r3
   184d2:	4b43      	ldr	r3, [pc, #268]	; (185e0 <lcd_displaying_task+0x3a8>)
   184d4:	4798      	blx	r3
						LCD_setCursor(0,1);
   184d6:	2101      	movs	r1, #1
   184d8:	2000      	movs	r0, #0
   184da:	4b3f      	ldr	r3, [pc, #252]	; (185d8 <lcd_displaying_task+0x3a0>)
   184dc:	4798      	blx	r3
						lcd_printf("                ");
   184de:	4b5c      	ldr	r3, [pc, #368]	; (18650 <lcd_displaying_task+0x418>)
   184e0:	0018      	movs	r0, r3
   184e2:	4b3f      	ldr	r3, [pc, #252]	; (185e0 <lcd_displaying_task+0x3a8>)
   184e4:	4798      	blx	r3
						LCD_setCursor(0,0);
						lcd_printf("MOTOR WATTAGE:  ");
						LCD_setCursor(0,1);
						lcd_printf("%03lu.%02lu kW         ",(Analog_Parameter_Struct.Motor_Power_IntPart),(Analog_Parameter_Struct.Motor_Power_DecPart));
					}
					break;
   184e6:	e1b2      	b.n	1884e <lcd_displaying_task+0x616>
						LCD_setCursor(0,0);
   184e8:	2100      	movs	r1, #0
   184ea:	2000      	movs	r0, #0
   184ec:	4b3a      	ldr	r3, [pc, #232]	; (185d8 <lcd_displaying_task+0x3a0>)
   184ee:	4798      	blx	r3
						lcd_printf("MOTOR WATTAGE:  ");
   184f0:	4b5a      	ldr	r3, [pc, #360]	; (1865c <lcd_displaying_task+0x424>)
   184f2:	0018      	movs	r0, r3
   184f4:	4b3a      	ldr	r3, [pc, #232]	; (185e0 <lcd_displaying_task+0x3a8>)
   184f6:	4798      	blx	r3
						LCD_setCursor(0,1);
   184f8:	2101      	movs	r1, #1
   184fa:	2000      	movs	r0, #0
   184fc:	4b36      	ldr	r3, [pc, #216]	; (185d8 <lcd_displaying_task+0x3a0>)
   184fe:	4798      	blx	r3
						lcd_printf("%03lu.%02lu kW         ",(Analog_Parameter_Struct.Motor_Power_IntPart),(Analog_Parameter_Struct.Motor_Power_DecPart));
   18500:	4b4e      	ldr	r3, [pc, #312]	; (1863c <lcd_displaying_task+0x404>)
   18502:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   18504:	b29b      	uxth	r3, r3
   18506:	0019      	movs	r1, r3
   18508:	4b4c      	ldr	r3, [pc, #304]	; (1863c <lcd_displaying_task+0x404>)
   1850a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1850c:	4b54      	ldr	r3, [pc, #336]	; (18660 <lcd_displaying_task+0x428>)
   1850e:	0018      	movs	r0, r3
   18510:	4b33      	ldr	r3, [pc, #204]	; (185e0 <lcd_displaying_task+0x3a8>)
   18512:	4798      	blx	r3
					break;
   18514:	e19b      	b.n	1884e <lcd_displaying_task+0x616>
				}
				case 4:
				{
					LCD_setCursor(0,0);
   18516:	2100      	movs	r1, #0
   18518:	2000      	movs	r0, #0
   1851a:	4b2f      	ldr	r3, [pc, #188]	; (185d8 <lcd_displaying_task+0x3a0>)
   1851c:	4798      	blx	r3
					lcd_printf("3 PHASE SEQ:");
   1851e:	4b51      	ldr	r3, [pc, #324]	; (18664 <lcd_displaying_task+0x42c>)
   18520:	0018      	movs	r0, r3
   18522:	4b2f      	ldr	r3, [pc, #188]	; (185e0 <lcd_displaying_task+0x3a8>)
   18524:	4798      	blx	r3
					if (structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
   18526:	4b50      	ldr	r3, [pc, #320]	; (18668 <lcd_displaying_task+0x430>)
   18528:	781b      	ldrb	r3, [r3, #0]
   1852a:	b2db      	uxtb	r3, r3
   1852c:	2b02      	cmp	r3, #2
   1852e:	d104      	bne.n	1853a <lcd_displaying_task+0x302>
					{
						lcd_printf(" OK ");
   18530:	4b4e      	ldr	r3, [pc, #312]	; (1866c <lcd_displaying_task+0x434>)
   18532:	0018      	movs	r0, r3
   18534:	4b2a      	ldr	r3, [pc, #168]	; (185e0 <lcd_displaying_task+0x3a8>)
   18536:	4798      	blx	r3
   18538:	e003      	b.n	18542 <lcd_displaying_task+0x30a>
					}
					else
					{
						lcd_printf(" ERR");
   1853a:	4b4d      	ldr	r3, [pc, #308]	; (18670 <lcd_displaying_task+0x438>)
   1853c:	0018      	movs	r0, r3
   1853e:	4b28      	ldr	r3, [pc, #160]	; (185e0 <lcd_displaying_task+0x3a8>)
   18540:	4798      	blx	r3
					}
					LCD_setCursor(0,1);
   18542:	2101      	movs	r1, #1
   18544:	2000      	movs	r0, #0
   18546:	4b24      	ldr	r3, [pc, #144]	; (185d8 <lcd_displaying_task+0x3a0>)
   18548:	4798      	blx	r3
					lcd_printf("PHASE STATE:");
   1854a:	4b4a      	ldr	r3, [pc, #296]	; (18674 <lcd_displaying_task+0x43c>)
   1854c:	0018      	movs	r0, r3
   1854e:	4b24      	ldr	r3, [pc, #144]	; (185e0 <lcd_displaying_task+0x3a8>)
   18550:	4798      	blx	r3
					if (structThreePhase_state.u8t_phase_ac_state == AC_3PH)
   18552:	4b45      	ldr	r3, [pc, #276]	; (18668 <lcd_displaying_task+0x430>)
   18554:	785b      	ldrb	r3, [r3, #1]
   18556:	b2db      	uxtb	r3, r3
   18558:	2b03      	cmp	r3, #3
   1855a:	d104      	bne.n	18566 <lcd_displaying_task+0x32e>
					{
						lcd_printf(" 3PH ");
   1855c:	4b46      	ldr	r3, [pc, #280]	; (18678 <lcd_displaying_task+0x440>)
   1855e:	0018      	movs	r0, r3
   18560:	4b1f      	ldr	r3, [pc, #124]	; (185e0 <lcd_displaying_task+0x3a8>)
   18562:	4798      	blx	r3
					}
					else
					{
						lcd_printf(" OFF");
					}
					break;
   18564:	e173      	b.n	1884e <lcd_displaying_task+0x616>
					else if(structThreePhase_state.u8t_phase_ac_state == AC_2PH)
   18566:	4b40      	ldr	r3, [pc, #256]	; (18668 <lcd_displaying_task+0x430>)
   18568:	785b      	ldrb	r3, [r3, #1]
   1856a:	b2db      	uxtb	r3, r3
   1856c:	2b02      	cmp	r3, #2
   1856e:	d104      	bne.n	1857a <lcd_displaying_task+0x342>
						lcd_printf(" 2PH ");
   18570:	4b42      	ldr	r3, [pc, #264]	; (1867c <lcd_displaying_task+0x444>)
   18572:	0018      	movs	r0, r3
   18574:	4b1a      	ldr	r3, [pc, #104]	; (185e0 <lcd_displaying_task+0x3a8>)
   18576:	4798      	blx	r3
					break;
   18578:	e169      	b.n	1884e <lcd_displaying_task+0x616>
						lcd_printf(" OFF");
   1857a:	4b41      	ldr	r3, [pc, #260]	; (18680 <lcd_displaying_task+0x448>)
   1857c:	0018      	movs	r0, r3
   1857e:	4b18      	ldr	r3, [pc, #96]	; (185e0 <lcd_displaying_task+0x3a8>)
   18580:	4798      	blx	r3
					break;
   18582:	e164      	b.n	1884e <lcd_displaying_task+0x616>
				}
				case 5:
				{
					LCD_setCursor(0,0);
   18584:	2100      	movs	r1, #0
   18586:	2000      	movs	r0, #0
   18588:	4b13      	ldr	r3, [pc, #76]	; (185d8 <lcd_displaying_task+0x3a0>)
   1858a:	4798      	blx	r3
					lcd_printf("O-LEVEL : ");
   1858c:	4b3d      	ldr	r3, [pc, #244]	; (18684 <lcd_displaying_task+0x44c>)
   1858e:	0018      	movs	r0, r3
   18590:	4b13      	ldr	r3, [pc, #76]	; (185e0 <lcd_displaying_task+0x3a8>)
   18592:	4798      	blx	r3
					if (overheadLevel == OVERHEADHIGHLEVEL)
   18594:	4b3c      	ldr	r3, [pc, #240]	; (18688 <lcd_displaying_task+0x450>)
   18596:	781b      	ldrb	r3, [r3, #0]
   18598:	b2db      	uxtb	r3, r3
   1859a:	2b02      	cmp	r3, #2
   1859c:	d104      	bne.n	185a8 <lcd_displaying_task+0x370>
					{
						lcd_printf("HIGH  ");
   1859e:	4b3b      	ldr	r3, [pc, #236]	; (1868c <lcd_displaying_task+0x454>)
   185a0:	0018      	movs	r0, r3
   185a2:	4b0f      	ldr	r3, [pc, #60]	; (185e0 <lcd_displaying_task+0x3a8>)
   185a4:	4798      	blx	r3
   185a6:	e07e      	b.n	186a6 <lcd_displaying_task+0x46e>
					}
					else if (overheadLevel == OVERHEADMIDLEVEL)
   185a8:	4b37      	ldr	r3, [pc, #220]	; (18688 <lcd_displaying_task+0x450>)
   185aa:	781b      	ldrb	r3, [r3, #0]
   185ac:	b2db      	uxtb	r3, r3
   185ae:	2b01      	cmp	r3, #1
   185b0:	d170      	bne.n	18694 <lcd_displaying_task+0x45c>
					{
						lcd_printf("MID   ");
   185b2:	4b37      	ldr	r3, [pc, #220]	; (18690 <lcd_displaying_task+0x458>)
   185b4:	0018      	movs	r0, r3
   185b6:	4b0a      	ldr	r3, [pc, #40]	; (185e0 <lcd_displaying_task+0x3a8>)
   185b8:	4798      	blx	r3
   185ba:	e074      	b.n	186a6 <lcd_displaying_task+0x46e>
   185bc:	20000863 	.word	0x20000863
   185c0:	20000864 	.word	0x20000864
   185c4:	00013aa9 	.word	0x00013aa9
   185c8:	00013add 	.word	0x00013add
   185cc:	0001ffe9 	.word	0x0001ffe9
   185d0:	000137e5 	.word	0x000137e5
   185d4:	00013d75 	.word	0x00013d75
   185d8:	00013e45 	.word	0x00013e45
   185dc:	0002a7f4 	.word	0x0002a7f4
   185e0:	00013f41 	.word	0x00013f41
   185e4:	0002a808 	.word	0x0002a808
   185e8:	00000bb8 	.word	0x00000bb8
   185ec:	0002a81c 	.word	0x0002a81c
   185f0:	0002a830 	.word	0x0002a830
   185f4:	0002a844 	.word	0x0002a844
   185f8:	000189f9 	.word	0x000189f9
   185fc:	00020f09 	.word	0x00020f09
   18600:	20000234 	.word	0x20000234
   18604:	0002034d 	.word	0x0002034d
   18608:	00020fad 	.word	0x00020fad
   1860c:	00028f13 	.word	0x00028f13
   18610:	0002aa2c 	.word	0x0002aa2c
   18614:	0002aa34 	.word	0x0002aa34
   18618:	0002aa3c 	.word	0x0002aa3c
   1861c:	0002aa44 	.word	0x0002aa44
   18620:	0002aa4c 	.word	0x0002aa4c
   18624:	00013de5 	.word	0x00013de5
   18628:	2000076e 	.word	0x2000076e
   1862c:	0002a848 	.word	0x0002a848
   18630:	0002a85c 	.word	0x0002a85c
   18634:	0002aa54 	.word	0x0002aa54
   18638:	0002a870 	.word	0x0002a870
   1863c:	200006dc 	.word	0x200006dc
   18640:	0002a884 	.word	0x0002a884
   18644:	0002a890 	.word	0x0002a890
   18648:	0001ac9d 	.word	0x0001ac9d
   1864c:	0002a898 	.word	0x0002a898
   18650:	0002a8ac 	.word	0x0002a8ac
   18654:	0002a8c0 	.word	0x0002a8c0
   18658:	0002a8d4 	.word	0x0002a8d4
   1865c:	0002a8ec 	.word	0x0002a8ec
   18660:	0002a900 	.word	0x0002a900
   18664:	0002a918 	.word	0x0002a918
   18668:	20000740 	.word	0x20000740
   1866c:	0002a928 	.word	0x0002a928
   18670:	0002a930 	.word	0x0002a930
   18674:	0002a938 	.word	0x0002a938
   18678:	0002a948 	.word	0x0002a948
   1867c:	0002a950 	.word	0x0002a950
   18680:	0002a958 	.word	0x0002a958
   18684:	0002a960 	.word	0x0002a960
   18688:	20000788 	.word	0x20000788
   1868c:	0002a96c 	.word	0x0002a96c
   18690:	0002a974 	.word	0x0002a974
					}
					else if (overheadLevel == OVERHEADCRITICALLEVEL)
   18694:	4ba6      	ldr	r3, [pc, #664]	; (18930 <lcd_displaying_task+0x6f8>)
   18696:	781b      	ldrb	r3, [r3, #0]
   18698:	b2db      	uxtb	r3, r3
   1869a:	2b00      	cmp	r3, #0
   1869c:	d103      	bne.n	186a6 <lcd_displaying_task+0x46e>
					{
						lcd_printf("LOW   ");
   1869e:	4ba5      	ldr	r3, [pc, #660]	; (18934 <lcd_displaying_task+0x6fc>)
   186a0:	0018      	movs	r0, r3
   186a2:	4ba5      	ldr	r3, [pc, #660]	; (18938 <lcd_displaying_task+0x700>)
   186a4:	4798      	blx	r3
					}
					LCD_setCursor(0,1);
   186a6:	2101      	movs	r1, #1
   186a8:	2000      	movs	r0, #0
   186aa:	4ba4      	ldr	r3, [pc, #656]	; (1893c <lcd_displaying_task+0x704>)
   186ac:	4798      	blx	r3
					lcd_printf("U-LEVEL : ");
   186ae:	4ba4      	ldr	r3, [pc, #656]	; (18940 <lcd_displaying_task+0x708>)
   186b0:	0018      	movs	r0, r3
   186b2:	4ba1      	ldr	r3, [pc, #644]	; (18938 <lcd_displaying_task+0x700>)
   186b4:	4798      	blx	r3
					if (undergroundLevel == CRITICALLEVEL)
   186b6:	4ba3      	ldr	r3, [pc, #652]	; (18944 <lcd_displaying_task+0x70c>)
   186b8:	781b      	ldrb	r3, [r3, #0]
   186ba:	2b00      	cmp	r3, #0
   186bc:	d104      	bne.n	186c8 <lcd_displaying_task+0x490>
					{
						lcd_printf("CRTCL ");
   186be:	4ba2      	ldr	r3, [pc, #648]	; (18948 <lcd_displaying_task+0x710>)
   186c0:	0018      	movs	r0, r3
   186c2:	4b9d      	ldr	r3, [pc, #628]	; (18938 <lcd_displaying_task+0x700>)
   186c4:	4798      	blx	r3
					}
					else if (undergroundLevel == HIGHLEVEL)
					{
						lcd_printf("HIGH  ");
					}
					break;
   186c6:	e0bf      	b.n	18848 <lcd_displaying_task+0x610>
					else if (undergroundLevel == LOWLEVEL)
   186c8:	4b9e      	ldr	r3, [pc, #632]	; (18944 <lcd_displaying_task+0x70c>)
   186ca:	781b      	ldrb	r3, [r3, #0]
   186cc:	2b01      	cmp	r3, #1
   186ce:	d104      	bne.n	186da <lcd_displaying_task+0x4a2>
						lcd_printf("LOW   ");
   186d0:	4b98      	ldr	r3, [pc, #608]	; (18934 <lcd_displaying_task+0x6fc>)
   186d2:	0018      	movs	r0, r3
   186d4:	4b98      	ldr	r3, [pc, #608]	; (18938 <lcd_displaying_task+0x700>)
   186d6:	4798      	blx	r3
					break;
   186d8:	e0b6      	b.n	18848 <lcd_displaying_task+0x610>
					else if (undergroundLevel == MIDLEVEL)
   186da:	4b9a      	ldr	r3, [pc, #616]	; (18944 <lcd_displaying_task+0x70c>)
   186dc:	781b      	ldrb	r3, [r3, #0]
   186de:	2b02      	cmp	r3, #2
   186e0:	d104      	bne.n	186ec <lcd_displaying_task+0x4b4>
						lcd_printf("MID   ");
   186e2:	4b9a      	ldr	r3, [pc, #616]	; (1894c <lcd_displaying_task+0x714>)
   186e4:	0018      	movs	r0, r3
   186e6:	4b94      	ldr	r3, [pc, #592]	; (18938 <lcd_displaying_task+0x700>)
   186e8:	4798      	blx	r3
					break;
   186ea:	e0ad      	b.n	18848 <lcd_displaying_task+0x610>
					else if (undergroundLevel == HIGHLEVEL)
   186ec:	4b95      	ldr	r3, [pc, #596]	; (18944 <lcd_displaying_task+0x70c>)
   186ee:	781b      	ldrb	r3, [r3, #0]
   186f0:	2b03      	cmp	r3, #3
   186f2:	d000      	beq.n	186f6 <lcd_displaying_task+0x4be>
   186f4:	e0a8      	b.n	18848 <lcd_displaying_task+0x610>
						lcd_printf("HIGH  ");
   186f6:	4b96      	ldr	r3, [pc, #600]	; (18950 <lcd_displaying_task+0x718>)
   186f8:	0018      	movs	r0, r3
   186fa:	4b8f      	ldr	r3, [pc, #572]	; (18938 <lcd_displaying_task+0x700>)
   186fc:	4798      	blx	r3
					break;
   186fe:	e0a3      	b.n	18848 <lcd_displaying_task+0x610>
				}
				case 6:
				{
					LCD_setCursor(0,0);
   18700:	2100      	movs	r1, #0
   18702:	2000      	movs	r0, #0
   18704:	4b8d      	ldr	r3, [pc, #564]	; (1893c <lcd_displaying_task+0x704>)
   18706:	4798      	blx	r3
					lcd_printf("BatteryPer: %u%% ",Analog_Parameter_Struct.Battery_percentage);
   18708:	4b92      	ldr	r3, [pc, #584]	; (18954 <lcd_displaying_task+0x71c>)
   1870a:	7f1b      	ldrb	r3, [r3, #28]
   1870c:	b2db      	uxtb	r3, r3
   1870e:	001a      	movs	r2, r3
   18710:	4b91      	ldr	r3, [pc, #580]	; (18958 <lcd_displaying_task+0x720>)
   18712:	0011      	movs	r1, r2
   18714:	0018      	movs	r0, r3
   18716:	4b88      	ldr	r3, [pc, #544]	; (18938 <lcd_displaying_task+0x700>)
   18718:	4798      	blx	r3
					LCD_setCursor(0,1);
   1871a:	2101      	movs	r1, #1
   1871c:	2000      	movs	r0, #0
   1871e:	4b87      	ldr	r3, [pc, #540]	; (1893c <lcd_displaying_task+0x704>)
   18720:	4798      	blx	r3
					lcd_printf("SIGNAL : ");
   18722:	4b8e      	ldr	r3, [pc, #568]	; (1895c <lcd_displaying_task+0x724>)
   18724:	0018      	movs	r0, r3
   18726:	4b84      	ldr	r3, [pc, #528]	; (18938 <lcd_displaying_task+0x700>)
   18728:	4798      	blx	r3
					LCD_setCursor(9,1);
   1872a:	2101      	movs	r1, #1
   1872c:	2009      	movs	r0, #9
   1872e:	4b83      	ldr	r3, [pc, #524]	; (1893c <lcd_displaying_task+0x704>)
   18730:	4798      	blx	r3
					lcd_printf("       ");
   18732:	4b8b      	ldr	r3, [pc, #556]	; (18960 <lcd_displaying_task+0x728>)
   18734:	0018      	movs	r0, r3
   18736:	4b80      	ldr	r3, [pc, #512]	; (18938 <lcd_displaying_task+0x700>)
   18738:	4798      	blx	r3
					LCD_setCursor(9,1);
   1873a:	2101      	movs	r1, #1
   1873c:	2009      	movs	r0, #9
   1873e:	4b7f      	ldr	r3, [pc, #508]	; (1893c <lcd_displaying_task+0x704>)
   18740:	4798      	blx	r3
					
					uint8_t tempSignal = Signal_Strength;
   18742:	233b      	movs	r3, #59	; 0x3b
   18744:	18fb      	adds	r3, r7, r3
   18746:	4a87      	ldr	r2, [pc, #540]	; (18964 <lcd_displaying_task+0x72c>)
   18748:	7812      	ldrb	r2, [r2, #0]
   1874a:	701a      	strb	r2, [r3, #0]
					for (uint8_t i=0;i<=tempSignal;i++)
   1874c:	233e      	movs	r3, #62	; 0x3e
   1874e:	18fb      	adds	r3, r7, r3
   18750:	2200      	movs	r2, #0
   18752:	701a      	strb	r2, [r3, #0]
   18754:	e00c      	b.n	18770 <lcd_displaying_task+0x538>
					{
						LCD_write(i);
   18756:	233e      	movs	r3, #62	; 0x3e
   18758:	18fb      	adds	r3, r7, r3
   1875a:	781b      	ldrb	r3, [r3, #0]
   1875c:	0018      	movs	r0, r3
   1875e:	4b82      	ldr	r3, [pc, #520]	; (18968 <lcd_displaying_task+0x730>)
   18760:	4798      	blx	r3
					for (uint8_t i=0;i<=tempSignal;i++)
   18762:	233e      	movs	r3, #62	; 0x3e
   18764:	18fb      	adds	r3, r7, r3
   18766:	781a      	ldrb	r2, [r3, #0]
   18768:	233e      	movs	r3, #62	; 0x3e
   1876a:	18fb      	adds	r3, r7, r3
   1876c:	3201      	adds	r2, #1
   1876e:	701a      	strb	r2, [r3, #0]
   18770:	233e      	movs	r3, #62	; 0x3e
   18772:	18fa      	adds	r2, r7, r3
   18774:	233b      	movs	r3, #59	; 0x3b
   18776:	18fb      	adds	r3, r7, r3
   18778:	7812      	ldrb	r2, [r2, #0]
   1877a:	781b      	ldrb	r3, [r3, #0]
   1877c:	429a      	cmp	r2, r3
   1877e:	d9ea      	bls.n	18756 <lcd_displaying_task+0x51e>
					}

					break;
   18780:	e065      	b.n	1884e <lcd_displaying_task+0x616>
				}
				case 7:
				{
					LCD_setCursor(0,0);
   18782:	2100      	movs	r1, #0
   18784:	2000      	movs	r0, #0
   18786:	4b6d      	ldr	r3, [pc, #436]	; (1893c <lcd_displaying_task+0x704>)
   18788:	4798      	blx	r3
					switch(callStateOnLCD)
   1878a:	4b78      	ldr	r3, [pc, #480]	; (1896c <lcd_displaying_task+0x734>)
   1878c:	781b      	ldrb	r3, [r3, #0]
   1878e:	2b05      	cmp	r3, #5
   18790:	d85c      	bhi.n	1884c <lcd_displaying_task+0x614>
   18792:	009a      	lsls	r2, r3, #2
   18794:	4b76      	ldr	r3, [pc, #472]	; (18970 <lcd_displaying_task+0x738>)
   18796:	18d3      	adds	r3, r2, r3
   18798:	681b      	ldr	r3, [r3, #0]
   1879a:	469f      	mov	pc, r3
					{
						case LCDCALLSTATE_RINGING:
						{
							lcd_printf("INCOMING CALL.. ");
   1879c:	4b75      	ldr	r3, [pc, #468]	; (18974 <lcd_displaying_task+0x73c>)
   1879e:	0018      	movs	r0, r3
   187a0:	4b65      	ldr	r3, [pc, #404]	; (18938 <lcd_displaying_task+0x700>)
   187a2:	4798      	blx	r3
							LCD_setCursor(0,1);
   187a4:	2101      	movs	r1, #1
   187a6:	2000      	movs	r0, #0
   187a8:	4b64      	ldr	r3, [pc, #400]	; (1893c <lcd_displaying_task+0x704>)
   187aa:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   187ac:	4a72      	ldr	r2, [pc, #456]	; (18978 <lcd_displaying_task+0x740>)
   187ae:	4b73      	ldr	r3, [pc, #460]	; (1897c <lcd_displaying_task+0x744>)
   187b0:	0011      	movs	r1, r2
   187b2:	0018      	movs	r0, r3
   187b4:	4b60      	ldr	r3, [pc, #384]	; (18938 <lcd_displaying_task+0x700>)
   187b6:	4798      	blx	r3
							break;
   187b8:	e045      	b.n	18846 <lcd_displaying_task+0x60e>
						}
						case LCDCALLSTATE_INCALL:
						{
							lcd_printf("IN CALL...      ");
   187ba:	4b71      	ldr	r3, [pc, #452]	; (18980 <lcd_displaying_task+0x748>)
   187bc:	0018      	movs	r0, r3
   187be:	4b5e      	ldr	r3, [pc, #376]	; (18938 <lcd_displaying_task+0x700>)
   187c0:	4798      	blx	r3
							LCD_setCursor(0,1);
   187c2:	2101      	movs	r1, #1
   187c4:	2000      	movs	r0, #0
   187c6:	4b5d      	ldr	r3, [pc, #372]	; (1893c <lcd_displaying_task+0x704>)
   187c8:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   187ca:	4a6b      	ldr	r2, [pc, #428]	; (18978 <lcd_displaying_task+0x740>)
   187cc:	4b6b      	ldr	r3, [pc, #428]	; (1897c <lcd_displaying_task+0x744>)
   187ce:	0011      	movs	r1, r2
   187d0:	0018      	movs	r0, r3
   187d2:	4b59      	ldr	r3, [pc, #356]	; (18938 <lcd_displaying_task+0x700>)
   187d4:	4798      	blx	r3
							break;
   187d6:	e036      	b.n	18846 <lcd_displaying_task+0x60e>
						}
						case LCDCALLSTATE_OUTGOING:
						{
							lcd_printf("DIALING...      ");
   187d8:	4b6a      	ldr	r3, [pc, #424]	; (18984 <lcd_displaying_task+0x74c>)
   187da:	0018      	movs	r0, r3
   187dc:	4b56      	ldr	r3, [pc, #344]	; (18938 <lcd_displaying_task+0x700>)
   187de:	4798      	blx	r3
							LCD_setCursor(0,1);
   187e0:	2101      	movs	r1, #1
   187e2:	2000      	movs	r0, #0
   187e4:	4b55      	ldr	r3, [pc, #340]	; (1893c <lcd_displaying_task+0x704>)
   187e6:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   187e8:	4a63      	ldr	r2, [pc, #396]	; (18978 <lcd_displaying_task+0x740>)
   187ea:	4b64      	ldr	r3, [pc, #400]	; (1897c <lcd_displaying_task+0x744>)
   187ec:	0011      	movs	r1, r2
   187ee:	0018      	movs	r0, r3
   187f0:	4b51      	ldr	r3, [pc, #324]	; (18938 <lcd_displaying_task+0x700>)
   187f2:	4798      	blx	r3
							break;
   187f4:	e027      	b.n	18846 <lcd_displaying_task+0x60e>
						}
						case LCDCALLSTATE_INCOMINGSMS:
						{
							lcd_printf("INCOMING SMS... ");
   187f6:	4b64      	ldr	r3, [pc, #400]	; (18988 <lcd_displaying_task+0x750>)
   187f8:	0018      	movs	r0, r3
   187fa:	4b4f      	ldr	r3, [pc, #316]	; (18938 <lcd_displaying_task+0x700>)
   187fc:	4798      	blx	r3
							LCD_setCursor(0,1);
   187fe:	2101      	movs	r1, #1
   18800:	2000      	movs	r0, #0
   18802:	4b4e      	ldr	r3, [pc, #312]	; (1893c <lcd_displaying_task+0x704>)
   18804:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   18806:	4a5c      	ldr	r2, [pc, #368]	; (18978 <lcd_displaying_task+0x740>)
   18808:	4b5c      	ldr	r3, [pc, #368]	; (1897c <lcd_displaying_task+0x744>)
   1880a:	0011      	movs	r1, r2
   1880c:	0018      	movs	r0, r3
   1880e:	4b4a      	ldr	r3, [pc, #296]	; (18938 <lcd_displaying_task+0x700>)
   18810:	4798      	blx	r3
							setCallStateOnLCD(LCDCALLSTATE_IDLE,NULL,false);
   18812:	2200      	movs	r2, #0
   18814:	2100      	movs	r1, #0
   18816:	2000      	movs	r0, #0
   18818:	4b5c      	ldr	r3, [pc, #368]	; (1898c <lcd_displaying_task+0x754>)
   1881a:	4798      	blx	r3
							break;
   1881c:	e013      	b.n	18846 <lcd_displaying_task+0x60e>
						}
						case LCDCALLSTATE_OUTGOINGSMS:
						{
							lcd_printf("OUTGOING SMS... ");
   1881e:	4b5c      	ldr	r3, [pc, #368]	; (18990 <lcd_displaying_task+0x758>)
   18820:	0018      	movs	r0, r3
   18822:	4b45      	ldr	r3, [pc, #276]	; (18938 <lcd_displaying_task+0x700>)
   18824:	4798      	blx	r3
							LCD_setCursor(0,1);
   18826:	2101      	movs	r1, #1
   18828:	2000      	movs	r0, #0
   1882a:	4b44      	ldr	r3, [pc, #272]	; (1893c <lcd_displaying_task+0x704>)
   1882c:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   1882e:	4a52      	ldr	r2, [pc, #328]	; (18978 <lcd_displaying_task+0x740>)
   18830:	4b52      	ldr	r3, [pc, #328]	; (1897c <lcd_displaying_task+0x744>)
   18832:	0011      	movs	r1, r2
   18834:	0018      	movs	r0, r3
   18836:	4b40      	ldr	r3, [pc, #256]	; (18938 <lcd_displaying_task+0x700>)
   18838:	4798      	blx	r3
							setCallStateOnLCD(LCDCALLSTATE_IDLE,NULL,false);
   1883a:	2200      	movs	r2, #0
   1883c:	2100      	movs	r1, #0
   1883e:	2000      	movs	r0, #0
   18840:	4b52      	ldr	r3, [pc, #328]	; (1898c <lcd_displaying_task+0x754>)
   18842:	4798      	blx	r3
							break;
   18844:	46c0      	nop			; (mov r8, r8)
						}
					}
					break;
   18846:	e001      	b.n	1884c <lcd_displaying_task+0x614>
					break;
   18848:	46c0      	nop			; (mov r8, r8)
   1884a:	e000      	b.n	1884e <lcd_displaying_task+0x616>
					break;
   1884c:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
		
		if (xQueueReceive(xfour_Second_Queue,&time,0))
   1884e:	4b51      	ldr	r3, [pc, #324]	; (18994 <lcd_displaying_task+0x75c>)
   18850:	681b      	ldr	r3, [r3, #0]
   18852:	223a      	movs	r2, #58	; 0x3a
   18854:	18b9      	adds	r1, r7, r2
   18856:	2200      	movs	r2, #0
   18858:	0018      	movs	r0, r3
   1885a:	4b4f      	ldr	r3, [pc, #316]	; (18998 <lcd_displaying_task+0x760>)
   1885c:	4798      	blx	r3
   1885e:	1e03      	subs	r3, r0, #0
   18860:	d057      	beq.n	18912 <lcd_displaying_task+0x6da>
		{
			xTimerChangePeriod( four_Second_timeout_timer, 4000/portTICK_PERIOD_MS, portMAX_DELAY);
   18862:	4b4e      	ldr	r3, [pc, #312]	; (1899c <lcd_displaying_task+0x764>)
   18864:	6818      	ldr	r0, [r3, #0]
   18866:	23fa      	movs	r3, #250	; 0xfa
   18868:	011a      	lsls	r2, r3, #4
   1886a:	2301      	movs	r3, #1
   1886c:	425b      	negs	r3, r3
   1886e:	9300      	str	r3, [sp, #0]
   18870:	2300      	movs	r3, #0
   18872:	2104      	movs	r1, #4
   18874:	4c4a      	ldr	r4, [pc, #296]	; (189a0 <lcd_displaying_task+0x768>)
   18876:	47a0      	blx	r4
			if(varPauseDisplay==false)
   18878:	4b4a      	ldr	r3, [pc, #296]	; (189a4 <lcd_displaying_task+0x76c>)
   1887a:	781b      	ldrb	r3, [r3, #0]
   1887c:	b2db      	uxtb	r3, r3
   1887e:	2201      	movs	r2, #1
   18880:	4053      	eors	r3, r2
   18882:	b2db      	uxtb	r3, r3
   18884:	2b00      	cmp	r3, #0
   18886:	d044      	beq.n	18912 <lcd_displaying_task+0x6da>
			{
				screen++;
   18888:	233f      	movs	r3, #63	; 0x3f
   1888a:	18fb      	adds	r3, r7, r3
   1888c:	781a      	ldrb	r2, [r3, #0]
   1888e:	233f      	movs	r3, #63	; 0x3f
   18890:	18fb      	adds	r3, r7, r3
   18892:	3201      	adds	r2, #1
   18894:	701a      	strb	r2, [r3, #0]
				if(!getMotorState() && screen==3)
   18896:	4b44      	ldr	r3, [pc, #272]	; (189a8 <lcd_displaying_task+0x770>)
   18898:	4798      	blx	r3
   1889a:	0003      	movs	r3, r0
   1889c:	001a      	movs	r2, r3
   1889e:	2301      	movs	r3, #1
   188a0:	4053      	eors	r3, r2
   188a2:	b2db      	uxtb	r3, r3
   188a4:	2b00      	cmp	r3, #0
   188a6:	d00b      	beq.n	188c0 <lcd_displaying_task+0x688>
   188a8:	233f      	movs	r3, #63	; 0x3f
   188aa:	18fb      	adds	r3, r7, r3
   188ac:	781b      	ldrb	r3, [r3, #0]
   188ae:	2b03      	cmp	r3, #3
   188b0:	d106      	bne.n	188c0 <lcd_displaying_task+0x688>
				{
					screen++;
   188b2:	233f      	movs	r3, #63	; 0x3f
   188b4:	18fb      	adds	r3, r7, r3
   188b6:	781a      	ldrb	r2, [r3, #0]
   188b8:	233f      	movs	r3, #63	; 0x3f
   188ba:	18fb      	adds	r3, r7, r3
   188bc:	3201      	adds	r2, #1
   188be:	701a      	strb	r2, [r3, #0]
				}
				
				if(!factory_settings_parameter_struct.ENABLE_WATER && screen==5)
   188c0:	4b3a      	ldr	r3, [pc, #232]	; (189ac <lcd_displaying_task+0x774>)
   188c2:	795b      	ldrb	r3, [r3, #5]
   188c4:	2b00      	cmp	r3, #0
   188c6:	d10b      	bne.n	188e0 <lcd_displaying_task+0x6a8>
   188c8:	233f      	movs	r3, #63	; 0x3f
   188ca:	18fb      	adds	r3, r7, r3
   188cc:	781b      	ldrb	r3, [r3, #0]
   188ce:	2b05      	cmp	r3, #5
   188d0:	d106      	bne.n	188e0 <lcd_displaying_task+0x6a8>
				{
					screen++;
   188d2:	233f      	movs	r3, #63	; 0x3f
   188d4:	18fb      	adds	r3, r7, r3
   188d6:	781a      	ldrb	r2, [r3, #0]
   188d8:	233f      	movs	r3, #63	; 0x3f
   188da:	18fb      	adds	r3, r7, r3
   188dc:	3201      	adds	r2, #1
   188de:	701a      	strb	r2, [r3, #0]
				}
				
				{
					if(callStateOnLCD==LCDCALLSTATE_IDLE && screen==7)
   188e0:	4b22      	ldr	r3, [pc, #136]	; (1896c <lcd_displaying_task+0x734>)
   188e2:	781b      	ldrb	r3, [r3, #0]
   188e4:	2b00      	cmp	r3, #0
   188e6:	d10c      	bne.n	18902 <lcd_displaying_task+0x6ca>
   188e8:	233f      	movs	r3, #63	; 0x3f
   188ea:	18fb      	adds	r3, r7, r3
   188ec:	781b      	ldrb	r3, [r3, #0]
   188ee:	2b07      	cmp	r3, #7
   188f0:	d107      	bne.n	18902 <lcd_displaying_task+0x6ca>
					{
						screen++;
   188f2:	233f      	movs	r3, #63	; 0x3f
   188f4:	18fb      	adds	r3, r7, r3
   188f6:	781a      	ldrb	r2, [r3, #0]
   188f8:	233f      	movs	r3, #63	; 0x3f
   188fa:	18fb      	adds	r3, r7, r3
   188fc:	3201      	adds	r2, #1
   188fe:	701a      	strb	r2, [r3, #0]
   18900:	e007      	b.n	18912 <lcd_displaying_task+0x6da>
					}
					else if(callStateOnLCD!=LCDCALLSTATE_IDLE)
   18902:	4b1a      	ldr	r3, [pc, #104]	; (1896c <lcd_displaying_task+0x734>)
   18904:	781b      	ldrb	r3, [r3, #0]
   18906:	2b00      	cmp	r3, #0
   18908:	d003      	beq.n	18912 <lcd_displaying_task+0x6da>
					{
						screen=7;
   1890a:	233f      	movs	r3, #63	; 0x3f
   1890c:	18fb      	adds	r3, r7, r3
   1890e:	2207      	movs	r2, #7
   18910:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
		
		if (screen>7)
   18912:	233f      	movs	r3, #63	; 0x3f
   18914:	18fb      	adds	r3, r7, r3
   18916:	781b      	ldrb	r3, [r3, #0]
   18918:	2b07      	cmp	r3, #7
   1891a:	d903      	bls.n	18924 <lcd_displaying_task+0x6ec>
		{
			screen=1;
   1891c:	233f      	movs	r3, #63	; 0x3f
   1891e:	18fb      	adds	r3, r7, r3
   18920:	2201      	movs	r2, #1
   18922:	701a      	strb	r2, [r3, #0]
		}
		
		vTaskDelay(500);
   18924:	23fa      	movs	r3, #250	; 0xfa
   18926:	005b      	lsls	r3, r3, #1
   18928:	0018      	movs	r0, r3
   1892a:	4b21      	ldr	r3, [pc, #132]	; (189b0 <lcd_displaying_task+0x778>)
   1892c:	4798      	blx	r3
		if (lcd_in_sleep)
   1892e:	e4ef      	b.n	18310 <lcd_displaying_task+0xd8>
   18930:	20000788 	.word	0x20000788
   18934:	0002a97c 	.word	0x0002a97c
   18938:	00013f41 	.word	0x00013f41
   1893c:	00013e45 	.word	0x00013e45
   18940:	0002a984 	.word	0x0002a984
   18944:	20000858 	.word	0x20000858
   18948:	0002a990 	.word	0x0002a990
   1894c:	0002a974 	.word	0x0002a974
   18950:	0002a96c 	.word	0x0002a96c
   18954:	200006dc 	.word	0x200006dc
   18958:	0002a998 	.word	0x0002a998
   1895c:	0002a9ac 	.word	0x0002a9ac
   18960:	0002a9b8 	.word	0x0002a9b8
   18964:	20000781 	.word	0x20000781
   18968:	00013cf9 	.word	0x00013cf9
   1896c:	200007cd 	.word	0x200007cd
   18970:	0002aa74 	.word	0x0002aa74
   18974:	0002a9c0 	.word	0x0002a9c0
   18978:	20000844 	.word	0x20000844
   1897c:	0002a9d4 	.word	0x0002a9d4
   18980:	0002a9dc 	.word	0x0002a9dc
   18984:	0002a9f0 	.word	0x0002a9f0
   18988:	0002aa04 	.word	0x0002aa04
   1898c:	0001cc35 	.word	0x0001cc35
   18990:	0002aa18 	.word	0x0002aa18
   18994:	20000230 	.word	0x20000230
   18998:	0001f541 	.word	0x0001f541
   1899c:	20000234 	.word	0x20000234
   189a0:	00020fad 	.word	0x00020fad
   189a4:	200007a4 	.word	0x200007a4
   189a8:	0001ac9d 	.word	0x0001ac9d
   189ac:	2000062c 	.word	0x2000062c
   189b0:	0001ffe9 	.word	0x0001ffe9

000189b4 <start_lcd_service>:
	}
}


void start_lcd_service(void)
{
   189b4:	b590      	push	{r4, r7, lr}
   189b6:	b083      	sub	sp, #12
   189b8:	af02      	add	r7, sp, #8
	xfour_Second_Queue=xQueueCreate(1,sizeof(uint8_t));
   189ba:	2200      	movs	r2, #0
   189bc:	2101      	movs	r1, #1
   189be:	2001      	movs	r0, #1
   189c0:	4b09      	ldr	r3, [pc, #36]	; (189e8 <start_lcd_service+0x34>)
   189c2:	4798      	blx	r3
   189c4:	0002      	movs	r2, r0
   189c6:	4b09      	ldr	r3, [pc, #36]	; (189ec <start_lcd_service+0x38>)
   189c8:	601a      	str	r2, [r3, #0]
	xTaskCreate(lcd_displaying_task,NULL,(uint16_t)400,NULL,1,NULL);
   189ca:	23c8      	movs	r3, #200	; 0xc8
   189cc:	005a      	lsls	r2, r3, #1
   189ce:	4808      	ldr	r0, [pc, #32]	; (189f0 <start_lcd_service+0x3c>)
   189d0:	2300      	movs	r3, #0
   189d2:	9301      	str	r3, [sp, #4]
   189d4:	2301      	movs	r3, #1
   189d6:	9300      	str	r3, [sp, #0]
   189d8:	2300      	movs	r3, #0
   189da:	2100      	movs	r1, #0
   189dc:	4c05      	ldr	r4, [pc, #20]	; (189f4 <start_lcd_service+0x40>)
   189de:	47a0      	blx	r4
	
}
   189e0:	46c0      	nop			; (mov r8, r8)
   189e2:	46bd      	mov	sp, r7
   189e4:	b001      	add	sp, #4
   189e6:	bd90      	pop	{r4, r7, pc}
   189e8:	0001f185 	.word	0x0001f185
   189ec:	20000230 	.word	0x20000230
   189f0:	00018239 	.word	0x00018239
   189f4:	0001fca9 	.word	0x0001fca9

000189f8 <four_second_timer_callback>:

static void four_second_timer_callback(TimerHandle_t timer)
{
   189f8:	b590      	push	{r4, r7, lr}
   189fa:	b085      	sub	sp, #20
   189fc:	af00      	add	r7, sp, #0
   189fe:	6078      	str	r0, [r7, #4]
	uint8_t ucharfour_Second=1;
   18a00:	230f      	movs	r3, #15
   18a02:	18fb      	adds	r3, r7, r3
   18a04:	2201      	movs	r2, #1
   18a06:	701a      	strb	r2, [r3, #0]
	xQueueSendFromISR(xfour_Second_Queue,&ucharfour_Second,0);
   18a08:	4b05      	ldr	r3, [pc, #20]	; (18a20 <four_second_timer_callback+0x28>)
   18a0a:	6818      	ldr	r0, [r3, #0]
   18a0c:	230f      	movs	r3, #15
   18a0e:	18f9      	adds	r1, r7, r3
   18a10:	2300      	movs	r3, #0
   18a12:	2200      	movs	r2, #0
   18a14:	4c03      	ldr	r4, [pc, #12]	; (18a24 <four_second_timer_callback+0x2c>)
   18a16:	47a0      	blx	r4
}
   18a18:	46c0      	nop			; (mov r8, r8)
   18a1a:	46bd      	mov	sp, r7
   18a1c:	b005      	add	sp, #20
   18a1e:	bd90      	pop	{r4, r7, pc}
   18a20:	20000230 	.word	0x20000230
   18a24:	0001f421 	.word	0x0001f421

00018a28 <ac_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval ture If the module synchronization is ongoing
 */
static inline bool ac_is_syncing(
        struct ac_module *const module_inst)
{
   18a28:	b580      	push	{r7, lr}
   18a2a:	b084      	sub	sp, #16
   18a2c:	af00      	add	r7, sp, #0
   18a2e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Ac *const ac_module = module_inst->hw;
   18a30:	687b      	ldr	r3, [r7, #4]
   18a32:	681b      	ldr	r3, [r3, #0]
   18a34:	60fb      	str	r3, [r7, #12]
		return true;
	}

	return false;
#else
	if (ac_module->STATUSB.reg & AC_STATUSB_SYNCBUSY) {
   18a36:	68fb      	ldr	r3, [r7, #12]
   18a38:	7a5b      	ldrb	r3, [r3, #9]
   18a3a:	b2db      	uxtb	r3, r3
   18a3c:	b25b      	sxtb	r3, r3
   18a3e:	2b00      	cmp	r3, #0
   18a40:	da01      	bge.n	18a46 <ac_is_syncing+0x1e>
		return true;
   18a42:	2301      	movs	r3, #1
   18a44:	e000      	b.n	18a48 <ac_is_syncing+0x20>
	}

	return false;
   18a46:	2300      	movs	r3, #0
#endif
}
   18a48:	0018      	movs	r0, r3
   18a4a:	46bd      	mov	sp, r7
   18a4c:	b004      	add	sp, #16
   18a4e:	bd80      	pop	{r7, pc}

00018a50 <ac_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void ac_get_config_defaults(
		struct ac_config *const config)
{
   18a50:	b580      	push	{r7, lr}
   18a52:	b084      	sub	sp, #16
   18a54:	af00      	add	r7, sp, #0
   18a56:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);
#ifdef FEATURE_AC_RUN_IN_STANDY_PAIR_COMPARATOR
	/* Default configuration values */
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
   18a58:	2300      	movs	r3, #0
   18a5a:	60fb      	str	r3, [r7, #12]
   18a5c:	e007      	b.n	18a6e <ac_get_config_defaults+0x1e>
		config->run_in_standby[i] = false;
   18a5e:	687a      	ldr	r2, [r7, #4]
   18a60:	68fb      	ldr	r3, [r7, #12]
   18a62:	18d3      	adds	r3, r2, r3
   18a64:	2200      	movs	r2, #0
   18a66:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
   18a68:	68fb      	ldr	r3, [r7, #12]
   18a6a:	3301      	adds	r3, #1
   18a6c:	60fb      	str	r3, [r7, #12]
   18a6e:	68fb      	ldr	r3, [r7, #12]
   18a70:	2b00      	cmp	r3, #0
   18a72:	d0f4      	beq.n	18a5e <ac_get_config_defaults+0xe>
	}
#endif
#if (SAMD) || (SAMHA1) || (SAMHA0) || (SAMR21)
	config->dig_source_generator = GCLK_GENERATOR_0;
   18a74:	687b      	ldr	r3, [r7, #4]
   18a76:	2200      	movs	r2, #0
   18a78:	705a      	strb	r2, [r3, #1]
	config->ana_source_generator = GCLK_GENERATOR_3;
   18a7a:	687b      	ldr	r3, [r7, #4]
   18a7c:	2203      	movs	r2, #3
   18a7e:	709a      	strb	r2, [r3, #2]
#else
	config->source_generator = GCLK_GENERATOR_0;
#endif
}
   18a80:	46c0      	nop			; (mov r8, r8)
   18a82:	46bd      	mov	sp, r7
   18a84:	b004      	add	sp, #16
   18a86:	bd80      	pop	{r7, pc}

00018a88 <ac_enable>:
 *
 * \param[in] module_inst  Software instance for the Analog Comparator peripheral
 */
static inline void ac_enable(
		struct ac_module *const module_inst)
{
   18a88:	b580      	push	{r7, lr}
   18a8a:	b084      	sub	sp, #16
   18a8c:	af00      	add	r7, sp, #0
   18a8e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
   18a90:	687b      	ldr	r3, [r7, #4]
   18a92:	681b      	ldr	r3, [r3, #0]
   18a94:	60fb      	str	r3, [r7, #12]

	while (ac_is_syncing(module_inst)) {
   18a96:	46c0      	nop			; (mov r8, r8)
   18a98:	687b      	ldr	r3, [r7, #4]
   18a9a:	0018      	movs	r0, r3
   18a9c:	4b07      	ldr	r3, [pc, #28]	; (18abc <ac_enable+0x34>)
   18a9e:	4798      	blx	r3
   18aa0:	1e03      	subs	r3, r0, #0
   18aa2:	d1f9      	bne.n	18a98 <ac_enable+0x10>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->CTRLA.reg |= AC_CTRLA_ENABLE;
   18aa4:	68fb      	ldr	r3, [r7, #12]
   18aa6:	781b      	ldrb	r3, [r3, #0]
   18aa8:	b2db      	uxtb	r3, r3
   18aaa:	2202      	movs	r2, #2
   18aac:	4313      	orrs	r3, r2
   18aae:	b2da      	uxtb	r2, r3
   18ab0:	68fb      	ldr	r3, [r7, #12]
   18ab2:	701a      	strb	r2, [r3, #0]
}
   18ab4:	46c0      	nop			; (mov r8, r8)
   18ab6:	46bd      	mov	sp, r7
   18ab8:	b004      	add	sp, #16
   18aba:	bd80      	pop	{r7, pc}
   18abc:	00018a29 	.word	0x00018a29

00018ac0 <ac_enable_events>:
 *  \param[in] events       Struct containing flags of events to enable
 */
static inline void ac_enable_events(
		struct ac_module *const module_inst,
		struct ac_events *const events)
{
   18ac0:	b580      	push	{r7, lr}
   18ac2:	b086      	sub	sp, #24
   18ac4:	af00      	add	r7, sp, #0
   18ac6:	6078      	str	r0, [r7, #4]
   18ac8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(events);

	Ac *const ac_module = module_inst->hw;
   18aca:	687b      	ldr	r3, [r7, #4]
   18acc:	681b      	ldr	r3, [r3, #0]
   18ace:	60fb      	str	r3, [r7, #12]

	uint32_t event_mask = 0;
   18ad0:	2300      	movs	r3, #0
   18ad2:	617b      	str	r3, [r7, #20]

	/* Configure window output events for each comparator pair */
	for (uint8_t i = 0; i < AC_PAIRS; i++) {
   18ad4:	2313      	movs	r3, #19
   18ad6:	18fb      	adds	r3, r7, r3
   18ad8:	2200      	movs	r2, #0
   18ada:	701a      	strb	r2, [r3, #0]
   18adc:	e017      	b.n	18b0e <ac_enable_events+0x4e>
		if (events->generate_event_on_window[i] == true) {
   18ade:	2313      	movs	r3, #19
   18ae0:	18fb      	adds	r3, r7, r3
   18ae2:	781b      	ldrb	r3, [r3, #0]
   18ae4:	683a      	ldr	r2, [r7, #0]
   18ae6:	5cd3      	ldrb	r3, [r2, r3]
   18ae8:	2b00      	cmp	r3, #0
   18aea:	d009      	beq.n	18b00 <ac_enable_events+0x40>
			event_mask |= (AC_EVCTRL_WINEO0 << i);
   18aec:	2313      	movs	r3, #19
   18aee:	18fb      	adds	r3, r7, r3
   18af0:	781b      	ldrb	r3, [r3, #0]
   18af2:	2210      	movs	r2, #16
   18af4:	409a      	lsls	r2, r3
   18af6:	0013      	movs	r3, r2
   18af8:	001a      	movs	r2, r3
   18afa:	697b      	ldr	r3, [r7, #20]
   18afc:	4313      	orrs	r3, r2
   18afe:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < AC_PAIRS; i++) {
   18b00:	2313      	movs	r3, #19
   18b02:	18fb      	adds	r3, r7, r3
   18b04:	781a      	ldrb	r2, [r3, #0]
   18b06:	2313      	movs	r3, #19
   18b08:	18fb      	adds	r3, r7, r3
   18b0a:	3201      	adds	r2, #1
   18b0c:	701a      	strb	r2, [r3, #0]
   18b0e:	2313      	movs	r3, #19
   18b10:	18fb      	adds	r3, r7, r3
   18b12:	781b      	ldrb	r3, [r3, #0]
   18b14:	2b00      	cmp	r3, #0
   18b16:	d0e2      	beq.n	18ade <ac_enable_events+0x1e>
		}
	}

	/* Configure sample input/output events for each comparator */
	for (uint8_t i = 0; i < AC_NUM_CMP; i++) {
   18b18:	2312      	movs	r3, #18
   18b1a:	18fb      	adds	r3, r7, r3
   18b1c:	2200      	movs	r2, #0
   18b1e:	701a      	strb	r2, [r3, #0]
   18b20:	e02b      	b.n	18b7a <ac_enable_events+0xba>
		if (events->on_event_sample[i] == true) {
   18b22:	2312      	movs	r3, #18
   18b24:	18fb      	adds	r3, r7, r3
   18b26:	781b      	ldrb	r3, [r3, #0]
   18b28:	683a      	ldr	r2, [r7, #0]
   18b2a:	18d3      	adds	r3, r2, r3
   18b2c:	78db      	ldrb	r3, [r3, #3]
   18b2e:	2b00      	cmp	r3, #0
   18b30:	d00a      	beq.n	18b48 <ac_enable_events+0x88>
			event_mask |= (AC_EVCTRL_COMPEI0 << i);
   18b32:	2312      	movs	r3, #18
   18b34:	18fb      	adds	r3, r7, r3
   18b36:	781b      	ldrb	r3, [r3, #0]
   18b38:	2280      	movs	r2, #128	; 0x80
   18b3a:	0052      	lsls	r2, r2, #1
   18b3c:	409a      	lsls	r2, r3
   18b3e:	0013      	movs	r3, r2
   18b40:	001a      	movs	r2, r3
   18b42:	697b      	ldr	r3, [r7, #20]
   18b44:	4313      	orrs	r3, r2
   18b46:	617b      	str	r3, [r7, #20]
		}

		if (events->generate_event_on_state[i] == true) {
   18b48:	2312      	movs	r3, #18
   18b4a:	18fb      	adds	r3, r7, r3
   18b4c:	781b      	ldrb	r3, [r3, #0]
   18b4e:	683a      	ldr	r2, [r7, #0]
   18b50:	18d3      	adds	r3, r2, r3
   18b52:	785b      	ldrb	r3, [r3, #1]
   18b54:	2b00      	cmp	r3, #0
   18b56:	d009      	beq.n	18b6c <ac_enable_events+0xac>
			event_mask |= (AC_EVCTRL_COMPEO0 << i);
   18b58:	2312      	movs	r3, #18
   18b5a:	18fb      	adds	r3, r7, r3
   18b5c:	781b      	ldrb	r3, [r3, #0]
   18b5e:	2201      	movs	r2, #1
   18b60:	409a      	lsls	r2, r3
   18b62:	0013      	movs	r3, r2
   18b64:	001a      	movs	r2, r3
   18b66:	697b      	ldr	r3, [r7, #20]
   18b68:	4313      	orrs	r3, r2
   18b6a:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < AC_NUM_CMP; i++) {
   18b6c:	2312      	movs	r3, #18
   18b6e:	18fb      	adds	r3, r7, r3
   18b70:	781a      	ldrb	r2, [r3, #0]
   18b72:	2312      	movs	r3, #18
   18b74:	18fb      	adds	r3, r7, r3
   18b76:	3201      	adds	r2, #1
   18b78:	701a      	strb	r2, [r3, #0]
   18b7a:	2312      	movs	r3, #18
   18b7c:	18fb      	adds	r3, r7, r3
   18b7e:	781b      	ldrb	r3, [r3, #0]
   18b80:	2b01      	cmp	r3, #1
   18b82:	d9ce      	bls.n	18b22 <ac_enable_events+0x62>
		}
	}

	ac_module->EVCTRL.reg |= event_mask;
   18b84:	68fb      	ldr	r3, [r7, #12]
   18b86:	885b      	ldrh	r3, [r3, #2]
   18b88:	b29a      	uxth	r2, r3
   18b8a:	697b      	ldr	r3, [r7, #20]
   18b8c:	b29b      	uxth	r3, r3
   18b8e:	4313      	orrs	r3, r2
   18b90:	b29a      	uxth	r2, r3
   18b92:	68fb      	ldr	r3, [r7, #12]
   18b94:	805a      	strh	r2, [r3, #2]
}
   18b96:	46c0      	nop			; (mov r8, r8)
   18b98:	46bd      	mov	sp, r7
   18b9a:	b006      	add	sp, #24
   18b9c:	bd80      	pop	{r7, pc}
	...

00018ba0 <ac_chan_enable>:
 *  \param[in] channel      Comparator channel to enable
 */
static inline void ac_chan_enable(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel)
{
   18ba0:	b580      	push	{r7, lr}
   18ba2:	b084      	sub	sp, #16
   18ba4:	af00      	add	r7, sp, #0
   18ba6:	6078      	str	r0, [r7, #4]
   18ba8:	000a      	movs	r2, r1
   18baa:	1cfb      	adds	r3, r7, #3
   18bac:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
   18bae:	687b      	ldr	r3, [r7, #4]
   18bb0:	681b      	ldr	r3, [r3, #0]
   18bb2:	60fb      	str	r3, [r7, #12]

	while (ac_is_syncing(module_inst)) {
   18bb4:	46c0      	nop			; (mov r8, r8)
   18bb6:	687b      	ldr	r3, [r7, #4]
   18bb8:	0018      	movs	r0, r3
   18bba:	4b0b      	ldr	r3, [pc, #44]	; (18be8 <ac_chan_enable+0x48>)
   18bbc:	4798      	blx	r3
   18bbe:	1e03      	subs	r3, r0, #0
   18bc0:	d1f9      	bne.n	18bb6 <ac_chan_enable+0x16>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->COMPCTRL[(uint8_t)channel].reg |= AC_COMPCTRL_ENABLE;
   18bc2:	1cfb      	adds	r3, r7, #3
   18bc4:	781a      	ldrb	r2, [r3, #0]
   18bc6:	1cfb      	adds	r3, r7, #3
   18bc8:	7819      	ldrb	r1, [r3, #0]
   18bca:	68fb      	ldr	r3, [r7, #12]
   18bcc:	3104      	adds	r1, #4
   18bce:	0089      	lsls	r1, r1, #2
   18bd0:	58cb      	ldr	r3, [r1, r3]
   18bd2:	2101      	movs	r1, #1
   18bd4:	4319      	orrs	r1, r3
   18bd6:	68fb      	ldr	r3, [r7, #12]
   18bd8:	3204      	adds	r2, #4
   18bda:	0092      	lsls	r2, r2, #2
   18bdc:	50d1      	str	r1, [r2, r3]
}
   18bde:	46c0      	nop			; (mov r8, r8)
   18be0:	46bd      	mov	sp, r7
   18be2:	b004      	add	sp, #16
   18be4:	bd80      	pop	{r7, pc}
   18be6:	46c0      	nop			; (mov r8, r8)
   18be8:	00018a29 	.word	0x00018a29

00018bec <ac_chan_is_ready>:
 *  \return Comparator channel readiness state.
 */
static inline bool ac_chan_is_ready(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel)
{
   18bec:	b580      	push	{r7, lr}
   18bee:	b084      	sub	sp, #16
   18bf0:	af00      	add	r7, sp, #0
   18bf2:	6078      	str	r0, [r7, #4]
   18bf4:	000a      	movs	r2, r1
   18bf6:	1cfb      	adds	r3, r7, #3
   18bf8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
   18bfa:	687b      	ldr	r3, [r7, #4]
   18bfc:	681b      	ldr	r3, [r3, #0]
   18bfe:	60fb      	str	r3, [r7, #12]

	return (ac_module->STATUSB.reg & (AC_STATUSB_READY0 << (uint8_t)channel));
   18c00:	68fb      	ldr	r3, [r7, #12]
   18c02:	7a5b      	ldrb	r3, [r3, #9]
   18c04:	b2db      	uxtb	r3, r3
   18c06:	0019      	movs	r1, r3
   18c08:	1cfb      	adds	r3, r7, #3
   18c0a:	781b      	ldrb	r3, [r3, #0]
   18c0c:	2201      	movs	r2, #1
   18c0e:	409a      	lsls	r2, r3
   18c10:	0013      	movs	r3, r2
   18c12:	400b      	ands	r3, r1
   18c14:	1e5a      	subs	r2, r3, #1
   18c16:	4193      	sbcs	r3, r2
   18c18:	b2db      	uxtb	r3, r3
}
   18c1a:	0018      	movs	r0, r3
   18c1c:	46bd      	mov	sp, r7
   18c1e:	b004      	add	sp, #16
   18c20:	bd80      	pop	{r7, pc}
	...

00018c24 <ac_chan_get_status>:
 *  \return Bit mask of comparator channel status flags.
 */
static inline uint8_t ac_chan_get_status(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel)
{
   18c24:	b580      	push	{r7, lr}
   18c26:	b084      	sub	sp, #16
   18c28:	af00      	add	r7, sp, #0
   18c2a:	6078      	str	r0, [r7, #4]
   18c2c:	000a      	movs	r2, r1
   18c2e:	1cfb      	adds	r3, r7, #3
   18c30:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
   18c32:	687b      	ldr	r3, [r7, #4]
   18c34:	681b      	ldr	r3, [r3, #0]
   18c36:	60bb      	str	r3, [r7, #8]

	uint8_t status_mask = 0;
   18c38:	230f      	movs	r3, #15
   18c3a:	18fb      	adds	r3, r7, r3
   18c3c:	2200      	movs	r2, #0
   18c3e:	701a      	strb	r2, [r3, #0]

	if (ac_module->INTFLAG.reg & (1 << channel)) {
   18c40:	68bb      	ldr	r3, [r7, #8]
   18c42:	799b      	ldrb	r3, [r3, #6]
   18c44:	b2db      	uxtb	r3, r3
   18c46:	001a      	movs	r2, r3
   18c48:	1cfb      	adds	r3, r7, #3
   18c4a:	781b      	ldrb	r3, [r3, #0]
   18c4c:	411a      	asrs	r2, r3
   18c4e:	0013      	movs	r3, r2
   18c50:	2201      	movs	r2, #1
   18c52:	4013      	ands	r3, r2
   18c54:	d003      	beq.n	18c5e <ac_chan_get_status+0x3a>
		status_mask = AC_CHAN_STATUS_INTERRUPT_SET;
   18c56:	230f      	movs	r3, #15
   18c58:	18fb      	adds	r3, r7, r3
   18c5a:	2208      	movs	r2, #8
   18c5c:	701a      	strb	r2, [r3, #0]
	}

	if (ac_chan_is_ready(module_inst, channel) == false) {
   18c5e:	1cfb      	adds	r3, r7, #3
   18c60:	781a      	ldrb	r2, [r3, #0]
   18c62:	687b      	ldr	r3, [r7, #4]
   18c64:	0011      	movs	r1, r2
   18c66:	0018      	movs	r0, r3
   18c68:	4b1b      	ldr	r3, [pc, #108]	; (18cd8 <ac_chan_get_status+0xb4>)
   18c6a:	4798      	blx	r3
   18c6c:	0003      	movs	r3, r0
   18c6e:	001a      	movs	r2, r3
   18c70:	2301      	movs	r3, #1
   18c72:	4053      	eors	r3, r2
   18c74:	b2db      	uxtb	r3, r3
   18c76:	2b00      	cmp	r3, #0
   18c78:	d00b      	beq.n	18c92 <ac_chan_get_status+0x6e>
		status_mask |= AC_CHAN_STATUS_UNKNOWN;
   18c7a:	230f      	movs	r3, #15
   18c7c:	18fb      	adds	r3, r7, r3
   18c7e:	220f      	movs	r2, #15
   18c80:	18ba      	adds	r2, r7, r2
   18c82:	7812      	ldrb	r2, [r2, #0]
   18c84:	2101      	movs	r1, #1
   18c86:	430a      	orrs	r2, r1
   18c88:	701a      	strb	r2, [r3, #0]
		return status_mask;
   18c8a:	230f      	movs	r3, #15
   18c8c:	18fb      	adds	r3, r7, r3
   18c8e:	781b      	ldrb	r3, [r3, #0]
   18c90:	e01e      	b.n	18cd0 <ac_chan_get_status+0xac>
	}

	if (ac_module->STATUSA.reg & (AC_STATUSA_STATE0 << (uint8_t)channel)) {
   18c92:	68bb      	ldr	r3, [r7, #8]
   18c94:	7a1b      	ldrb	r3, [r3, #8]
   18c96:	b2db      	uxtb	r3, r3
   18c98:	001a      	movs	r2, r3
   18c9a:	1cfb      	adds	r3, r7, #3
   18c9c:	781b      	ldrb	r3, [r3, #0]
   18c9e:	411a      	asrs	r2, r3
   18ca0:	0013      	movs	r3, r2
   18ca2:	2201      	movs	r2, #1
   18ca4:	4013      	ands	r3, r2
   18ca6:	d008      	beq.n	18cba <ac_chan_get_status+0x96>
		status_mask |= AC_CHAN_STATUS_POS_ABOVE_NEG;
   18ca8:	230f      	movs	r3, #15
   18caa:	18fb      	adds	r3, r7, r3
   18cac:	220f      	movs	r2, #15
   18cae:	18ba      	adds	r2, r7, r2
   18cb0:	7812      	ldrb	r2, [r2, #0]
   18cb2:	2104      	movs	r1, #4
   18cb4:	430a      	orrs	r2, r1
   18cb6:	701a      	strb	r2, [r3, #0]
   18cb8:	e007      	b.n	18cca <ac_chan_get_status+0xa6>
	} else {
		status_mask |= AC_CHAN_STATUS_NEG_ABOVE_POS;
   18cba:	230f      	movs	r3, #15
   18cbc:	18fb      	adds	r3, r7, r3
   18cbe:	220f      	movs	r2, #15
   18cc0:	18ba      	adds	r2, r7, r2
   18cc2:	7812      	ldrb	r2, [r2, #0]
   18cc4:	2102      	movs	r1, #2
   18cc6:	430a      	orrs	r2, r1
   18cc8:	701a      	strb	r2, [r3, #0]
	}
	return status_mask;
   18cca:	230f      	movs	r3, #15
   18ccc:	18fb      	adds	r3, r7, r3
   18cce:	781b      	ldrb	r3, [r3, #0]
}
   18cd0:	0018      	movs	r0, r3
   18cd2:	46bd      	mov	sp, r7
   18cd4:	b004      	add	sp, #16
   18cd6:	bd80      	pop	{r7, pc}
   18cd8:	00018bed 	.word	0x00018bed

00018cdc <system_interrupt_enable>:
{
   18cdc:	b580      	push	{r7, lr}
   18cde:	b082      	sub	sp, #8
   18ce0:	af00      	add	r7, sp, #0
   18ce2:	0002      	movs	r2, r0
   18ce4:	1dfb      	adds	r3, r7, #7
   18ce6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   18ce8:	4b06      	ldr	r3, [pc, #24]	; (18d04 <system_interrupt_enable+0x28>)
   18cea:	1dfa      	adds	r2, r7, #7
   18cec:	7812      	ldrb	r2, [r2, #0]
   18cee:	0011      	movs	r1, r2
   18cf0:	221f      	movs	r2, #31
   18cf2:	400a      	ands	r2, r1
   18cf4:	2101      	movs	r1, #1
   18cf6:	4091      	lsls	r1, r2
   18cf8:	000a      	movs	r2, r1
   18cfa:	601a      	str	r2, [r3, #0]
}
   18cfc:	46c0      	nop			; (mov r8, r8)
   18cfe:	46bd      	mov	sp, r7
   18d00:	b002      	add	sp, #8
   18d02:	bd80      	pop	{r7, pc}
   18d04:	e000e100 	.word	0xe000e100

00018d08 <ac_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void ac_enable_callback(
		struct ac_module *const module,
		const enum ac_callback callback_type)
{
   18d08:	b580      	push	{r7, lr}
   18d0a:	b084      	sub	sp, #16
   18d0c:	af00      	add	r7, sp, #0
   18d0e:	6078      	str	r0, [r7, #4]
   18d10:	000a      	movs	r2, r1
   18d12:	1cfb      	adds	r3, r7, #3
   18d14:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Set software flag for the callback */
	module->enable_callback_mask |= (1 << callback_type);
   18d16:	687b      	ldr	r3, [r7, #4]
   18d18:	7e5b      	ldrb	r3, [r3, #25]
   18d1a:	b25a      	sxtb	r2, r3
   18d1c:	1cfb      	adds	r3, r7, #3
   18d1e:	781b      	ldrb	r3, [r3, #0]
   18d20:	2101      	movs	r1, #1
   18d22:	4099      	lsls	r1, r3
   18d24:	000b      	movs	r3, r1
   18d26:	b25b      	sxtb	r3, r3
   18d28:	4313      	orrs	r3, r2
   18d2a:	b25b      	sxtb	r3, r3
   18d2c:	b2da      	uxtb	r2, r3
   18d2e:	687b      	ldr	r3, [r7, #4]
   18d30:	765a      	strb	r2, [r3, #25]

	uint32_t inenset_temp = 0;
   18d32:	2300      	movs	r3, #0
   18d34:	60fb      	str	r3, [r7, #12]

	switch (callback_type)
   18d36:	1cfb      	adds	r3, r7, #3
   18d38:	781b      	ldrb	r3, [r3, #0]
   18d3a:	2b01      	cmp	r3, #1
   18d3c:	d009      	beq.n	18d52 <ac_enable_callback+0x4a>
   18d3e:	2b04      	cmp	r3, #4
   18d40:	d00c      	beq.n	18d5c <ac_enable_callback+0x54>
   18d42:	2b00      	cmp	r3, #0
   18d44:	d000      	beq.n	18d48 <ac_enable_callback+0x40>
			inenset_temp |= AC_INTFLAG_WIN1;
			break;
#  endif
#endif
		default:
			break;
   18d46:	e00e      	b.n	18d66 <ac_enable_callback+0x5e>
			inenset_temp |= AC_INTFLAG_COMP0;
   18d48:	68fb      	ldr	r3, [r7, #12]
   18d4a:	2201      	movs	r2, #1
   18d4c:	4313      	orrs	r3, r2
   18d4e:	60fb      	str	r3, [r7, #12]
			break;
   18d50:	e009      	b.n	18d66 <ac_enable_callback+0x5e>
			inenset_temp |= AC_INTFLAG_COMP1;
   18d52:	68fb      	ldr	r3, [r7, #12]
   18d54:	2202      	movs	r2, #2
   18d56:	4313      	orrs	r3, r2
   18d58:	60fb      	str	r3, [r7, #12]
			break;
   18d5a:	e004      	b.n	18d66 <ac_enable_callback+0x5e>
			inenset_temp |= AC_INTFLAG_WIN0;
   18d5c:	68fb      	ldr	r3, [r7, #12]
   18d5e:	2210      	movs	r2, #16
   18d60:	4313      	orrs	r3, r2
   18d62:	60fb      	str	r3, [r7, #12]
			break;
   18d64:	46c0      	nop			; (mov r8, r8)
	}

	/* Enable the interrupt for the callback */
	module->hw->INTENSET.reg = inenset_temp;
   18d66:	687b      	ldr	r3, [r7, #4]
   18d68:	681b      	ldr	r3, [r3, #0]
   18d6a:	68fa      	ldr	r2, [r7, #12]
   18d6c:	b2d2      	uxtb	r2, r2
   18d6e:	715a      	strb	r2, [r3, #5]

#if (AC_INST_NUM == 1)
	/* Enable interrupts for AC module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_AC);
   18d70:	2018      	movs	r0, #24
   18d72:	4b03      	ldr	r3, [pc, #12]	; (18d80 <ac_enable_callback+0x78>)
   18d74:	4798      	blx	r3
#elif (AC_INST_NUM > 1)
	system_interrupt_enable(_ac_interrupt_get_interrupt_vector(_ac_get_inst_index(module->hw)));
#endif /* (AC_INST_NUM > 1) */
}
   18d76:	46c0      	nop			; (mov r8, r8)
   18d78:	46bd      	mov	sp, r7
   18d7a:	b004      	add	sp, #16
   18d7c:	bd80      	pop	{r7, pc}
   18d7e:	46c0      	nop			; (mov r8, r8)
   18d80:	00018cdd 	.word	0x00018cdd

00018d84 <system_pinmux_get_group_from_gpio_pin>:
{
   18d84:	b580      	push	{r7, lr}
   18d86:	b084      	sub	sp, #16
   18d88:	af00      	add	r7, sp, #0
   18d8a:	0002      	movs	r2, r0
   18d8c:	1dfb      	adds	r3, r7, #7
   18d8e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   18d90:	230f      	movs	r3, #15
   18d92:	18fb      	adds	r3, r7, r3
   18d94:	1dfa      	adds	r2, r7, #7
   18d96:	7812      	ldrb	r2, [r2, #0]
   18d98:	09d2      	lsrs	r2, r2, #7
   18d9a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   18d9c:	230e      	movs	r3, #14
   18d9e:	18fb      	adds	r3, r7, r3
   18da0:	1dfa      	adds	r2, r7, #7
   18da2:	7812      	ldrb	r2, [r2, #0]
   18da4:	0952      	lsrs	r2, r2, #5
   18da6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   18da8:	4b0d      	ldr	r3, [pc, #52]	; (18de0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   18daa:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   18dac:	230f      	movs	r3, #15
   18dae:	18fb      	adds	r3, r7, r3
   18db0:	781b      	ldrb	r3, [r3, #0]
   18db2:	2b00      	cmp	r3, #0
   18db4:	d10f      	bne.n	18dd6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   18db6:	230f      	movs	r3, #15
   18db8:	18fb      	adds	r3, r7, r3
   18dba:	781b      	ldrb	r3, [r3, #0]
   18dbc:	009b      	lsls	r3, r3, #2
   18dbe:	2210      	movs	r2, #16
   18dc0:	4694      	mov	ip, r2
   18dc2:	44bc      	add	ip, r7
   18dc4:	4463      	add	r3, ip
   18dc6:	3b08      	subs	r3, #8
   18dc8:	681a      	ldr	r2, [r3, #0]
   18dca:	230e      	movs	r3, #14
   18dcc:	18fb      	adds	r3, r7, r3
   18dce:	781b      	ldrb	r3, [r3, #0]
   18dd0:	01db      	lsls	r3, r3, #7
   18dd2:	18d3      	adds	r3, r2, r3
   18dd4:	e000      	b.n	18dd8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   18dd6:	2300      	movs	r3, #0
}
   18dd8:	0018      	movs	r0, r3
   18dda:	46bd      	mov	sp, r7
   18ddc:	b004      	add	sp, #16
   18dde:	bd80      	pop	{r7, pc}
   18de0:	41004400 	.word	0x41004400

00018de4 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   18de4:	b580      	push	{r7, lr}
   18de6:	b084      	sub	sp, #16
   18de8:	af00      	add	r7, sp, #0
   18dea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   18dec:	687b      	ldr	r3, [r7, #4]
   18dee:	681b      	ldr	r3, [r3, #0]
   18df0:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   18df2:	68fb      	ldr	r3, [r7, #12]
   18df4:	7e5b      	ldrb	r3, [r3, #25]
   18df6:	b2db      	uxtb	r3, r3
   18df8:	b25b      	sxtb	r3, r3
   18dfa:	2b00      	cmp	r3, #0
   18dfc:	da01      	bge.n	18e02 <adc_is_syncing+0x1e>
		return true;
   18dfe:	2301      	movs	r3, #1
   18e00:	e000      	b.n	18e04 <adc_is_syncing+0x20>
	}

	return false;
   18e02:	2300      	movs	r3, #0
}
   18e04:	0018      	movs	r0, r3
   18e06:	46bd      	mov	sp, r7
   18e08:	b004      	add	sp, #16
   18e0a:	bd80      	pop	{r7, pc}

00018e0c <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
   18e0c:	b580      	push	{r7, lr}
   18e0e:	b086      	sub	sp, #24
   18e10:	af00      	add	r7, sp, #0
   18e12:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   18e14:	687b      	ldr	r3, [r7, #4]
   18e16:	681b      	ldr	r3, [r3, #0]
   18e18:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
   18e1a:	693b      	ldr	r3, [r7, #16]
   18e1c:	7e1b      	ldrb	r3, [r3, #24]
   18e1e:	b2db      	uxtb	r3, r3
   18e20:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
   18e22:	2300      	movs	r3, #0
   18e24:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
   18e26:	68fb      	ldr	r3, [r7, #12]
   18e28:	2201      	movs	r2, #1
   18e2a:	4013      	ands	r3, r2
   18e2c:	d003      	beq.n	18e36 <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
   18e2e:	697b      	ldr	r3, [r7, #20]
   18e30:	2201      	movs	r2, #1
   18e32:	4313      	orrs	r3, r2
   18e34:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
   18e36:	68fb      	ldr	r3, [r7, #12]
   18e38:	2204      	movs	r2, #4
   18e3a:	4013      	ands	r3, r2
   18e3c:	d003      	beq.n	18e46 <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
   18e3e:	697b      	ldr	r3, [r7, #20]
   18e40:	2202      	movs	r2, #2
   18e42:	4313      	orrs	r3, r2
   18e44:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
   18e46:	68fb      	ldr	r3, [r7, #12]
   18e48:	2202      	movs	r2, #2
   18e4a:	4013      	ands	r3, r2
   18e4c:	d003      	beq.n	18e56 <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
   18e4e:	697b      	ldr	r3, [r7, #20]
   18e50:	2204      	movs	r2, #4
   18e52:	4313      	orrs	r3, r2
   18e54:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
   18e56:	697b      	ldr	r3, [r7, #20]
}
   18e58:	0018      	movs	r0, r3
   18e5a:	46bd      	mov	sp, r7
   18e5c:	b006      	add	sp, #24
   18e5e:	bd80      	pop	{r7, pc}

00018e60 <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
   18e60:	b580      	push	{r7, lr}
   18e62:	b084      	sub	sp, #16
   18e64:	af00      	add	r7, sp, #0
   18e66:	6078      	str	r0, [r7, #4]
   18e68:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   18e6a:	687b      	ldr	r3, [r7, #4]
   18e6c:	681b      	ldr	r3, [r3, #0]
   18e6e:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
   18e70:	2300      	movs	r3, #0
   18e72:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
   18e74:	683b      	ldr	r3, [r7, #0]
   18e76:	2201      	movs	r2, #1
   18e78:	4013      	ands	r3, r2
   18e7a:	d003      	beq.n	18e84 <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
   18e7c:	68fb      	ldr	r3, [r7, #12]
   18e7e:	2201      	movs	r2, #1
   18e80:	4313      	orrs	r3, r2
   18e82:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
   18e84:	683b      	ldr	r3, [r7, #0]
   18e86:	2202      	movs	r2, #2
   18e88:	4013      	ands	r3, r2
   18e8a:	d003      	beq.n	18e94 <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
   18e8c:	68fb      	ldr	r3, [r7, #12]
   18e8e:	2204      	movs	r2, #4
   18e90:	4313      	orrs	r3, r2
   18e92:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
   18e94:	683b      	ldr	r3, [r7, #0]
   18e96:	2204      	movs	r2, #4
   18e98:	4013      	ands	r3, r2
   18e9a:	d003      	beq.n	18ea4 <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
   18e9c:	68fb      	ldr	r3, [r7, #12]
   18e9e:	2202      	movs	r2, #2
   18ea0:	4313      	orrs	r3, r2
   18ea2:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
   18ea4:	68fb      	ldr	r3, [r7, #12]
   18ea6:	b2da      	uxtb	r2, r3
   18ea8:	68bb      	ldr	r3, [r7, #8]
   18eaa:	761a      	strb	r2, [r3, #24]
}
   18eac:	46c0      	nop			; (mov r8, r8)
   18eae:	46bd      	mov	sp, r7
   18eb0:	b004      	add	sp, #16
   18eb2:	bd80      	pop	{r7, pc}

00018eb4 <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
   18eb4:	b580      	push	{r7, lr}
   18eb6:	b084      	sub	sp, #16
   18eb8:	af00      	add	r7, sp, #0
   18eba:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   18ebc:	687b      	ldr	r3, [r7, #4]
   18ebe:	681b      	ldr	r3, [r3, #0]
   18ec0:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   18ec2:	46c0      	nop			; (mov r8, r8)
   18ec4:	687b      	ldr	r3, [r7, #4]
   18ec6:	0018      	movs	r0, r3
   18ec8:	4b10      	ldr	r3, [pc, #64]	; (18f0c <adc_enable+0x58>)
   18eca:	4798      	blx	r3
   18ecc:	1e03      	subs	r3, r0, #0
   18ece:	d1f9      	bne.n	18ec4 <adc_enable+0x10>
	system_interrupt_enable(_adc_interrupt_get_interrupt_vector(
			_adc_get_inst_index(adc_module)));
#   elif (SAMC20)
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC0);
#	else
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
   18ed0:	2017      	movs	r0, #23
   18ed2:	4b0f      	ldr	r3, [pc, #60]	; (18f10 <adc_enable+0x5c>)
   18ed4:	4798      	blx	r3
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
   18ed6:	68fb      	ldr	r3, [r7, #12]
   18ed8:	220f      	movs	r2, #15
   18eda:	759a      	strb	r2, [r3, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
   18edc:	68fb      	ldr	r3, [r7, #12]
   18ede:	220f      	movs	r2, #15
   18ee0:	761a      	strb	r2, [r3, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
   18ee2:	68fb      	ldr	r3, [r7, #12]
   18ee4:	781b      	ldrb	r3, [r3, #0]
   18ee6:	b2db      	uxtb	r3, r3
   18ee8:	2202      	movs	r2, #2
   18eea:	4313      	orrs	r3, r2
   18eec:	b2da      	uxtb	r2, r3
   18eee:	68fb      	ldr	r3, [r7, #12]
   18ef0:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
   18ef2:	46c0      	nop			; (mov r8, r8)
   18ef4:	687b      	ldr	r3, [r7, #4]
   18ef6:	0018      	movs	r0, r3
   18ef8:	4b04      	ldr	r3, [pc, #16]	; (18f0c <adc_enable+0x58>)
   18efa:	4798      	blx	r3
   18efc:	1e03      	subs	r3, r0, #0
   18efe:	d1f9      	bne.n	18ef4 <adc_enable+0x40>
		/* Wait for synchronization */
	}
	return STATUS_OK;
   18f00:	2300      	movs	r3, #0
}
   18f02:	0018      	movs	r0, r3
   18f04:	46bd      	mov	sp, r7
   18f06:	b004      	add	sp, #16
   18f08:	bd80      	pop	{r7, pc}
   18f0a:	46c0      	nop			; (mov r8, r8)
   18f0c:	00018de5 	.word	0x00018de5
   18f10:	00018cdd 	.word	0x00018cdd

00018f14 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   18f14:	b580      	push	{r7, lr}
   18f16:	b084      	sub	sp, #16
   18f18:	af00      	add	r7, sp, #0
   18f1a:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   18f1c:	687b      	ldr	r3, [r7, #4]
   18f1e:	681b      	ldr	r3, [r3, #0]
   18f20:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   18f22:	46c0      	nop			; (mov r8, r8)
   18f24:	687b      	ldr	r3, [r7, #4]
   18f26:	0018      	movs	r0, r3
   18f28:	4b0b      	ldr	r3, [pc, #44]	; (18f58 <adc_start_conversion+0x44>)
   18f2a:	4798      	blx	r3
   18f2c:	1e03      	subs	r3, r0, #0
   18f2e:	d1f9      	bne.n	18f24 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   18f30:	68fb      	ldr	r3, [r7, #12]
   18f32:	7b1b      	ldrb	r3, [r3, #12]
   18f34:	b2db      	uxtb	r3, r3
   18f36:	2202      	movs	r2, #2
   18f38:	4313      	orrs	r3, r2
   18f3a:	b2da      	uxtb	r2, r3
   18f3c:	68fb      	ldr	r3, [r7, #12]
   18f3e:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   18f40:	46c0      	nop			; (mov r8, r8)
   18f42:	687b      	ldr	r3, [r7, #4]
   18f44:	0018      	movs	r0, r3
   18f46:	4b04      	ldr	r3, [pc, #16]	; (18f58 <adc_start_conversion+0x44>)
   18f48:	4798      	blx	r3
   18f4a:	1e03      	subs	r3, r0, #0
   18f4c:	d1f9      	bne.n	18f42 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   18f4e:	46c0      	nop			; (mov r8, r8)
   18f50:	46bd      	mov	sp, r7
   18f52:	b004      	add	sp, #16
   18f54:	bd80      	pop	{r7, pc}
   18f56:	46c0      	nop			; (mov r8, r8)
   18f58:	00018de5 	.word	0x00018de5

00018f5c <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
   18f5c:	b580      	push	{r7, lr}
   18f5e:	b084      	sub	sp, #16
   18f60:	af00      	add	r7, sp, #0
   18f62:	6078      	str	r0, [r7, #4]
   18f64:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
   18f66:	687b      	ldr	r3, [r7, #4]
   18f68:	0018      	movs	r0, r3
   18f6a:	4b18      	ldr	r3, [pc, #96]	; (18fcc <adc_read+0x70>)
   18f6c:	4798      	blx	r3
   18f6e:	0002      	movs	r2, r0
   18f70:	2301      	movs	r3, #1
   18f72:	4013      	ands	r3, r2
   18f74:	d101      	bne.n	18f7a <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
   18f76:	2305      	movs	r3, #5
   18f78:	e023      	b.n	18fc2 <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
   18f7a:	687b      	ldr	r3, [r7, #4]
   18f7c:	681b      	ldr	r3, [r3, #0]
   18f7e:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMHA1) || (SAMHA0) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
   18f80:	46c0      	nop			; (mov r8, r8)
   18f82:	687b      	ldr	r3, [r7, #4]
   18f84:	0018      	movs	r0, r3
   18f86:	4b12      	ldr	r3, [pc, #72]	; (18fd0 <adc_read+0x74>)
   18f88:	4798      	blx	r3
   18f8a:	1e03      	subs	r3, r0, #0
   18f8c:	d1f9      	bne.n	18f82 <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
   18f8e:	68fb      	ldr	r3, [r7, #12]
   18f90:	8b5b      	ldrh	r3, [r3, #26]
   18f92:	b29a      	uxth	r2, r3
   18f94:	683b      	ldr	r3, [r7, #0]
   18f96:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
   18f98:	687b      	ldr	r3, [r7, #4]
   18f9a:	2101      	movs	r1, #1
   18f9c:	0018      	movs	r0, r3
   18f9e:	4b0d      	ldr	r3, [pc, #52]	; (18fd4 <adc_read+0x78>)
   18fa0:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
   18fa2:	687b      	ldr	r3, [r7, #4]
   18fa4:	0018      	movs	r0, r3
   18fa6:	4b09      	ldr	r3, [pc, #36]	; (18fcc <adc_read+0x70>)
   18fa8:	4798      	blx	r3
   18faa:	0002      	movs	r2, r0
   18fac:	2304      	movs	r3, #4
   18fae:	4013      	ands	r3, r2
   18fb0:	d006      	beq.n	18fc0 <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
   18fb2:	687b      	ldr	r3, [r7, #4]
   18fb4:	2104      	movs	r1, #4
   18fb6:	0018      	movs	r0, r3
   18fb8:	4b06      	ldr	r3, [pc, #24]	; (18fd4 <adc_read+0x78>)
   18fba:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
   18fbc:	231e      	movs	r3, #30
   18fbe:	e000      	b.n	18fc2 <adc_read+0x66>
	}

	return STATUS_OK;
   18fc0:	2300      	movs	r3, #0
}
   18fc2:	0018      	movs	r0, r3
   18fc4:	46bd      	mov	sp, r7
   18fc6:	b004      	add	sp, #16
   18fc8:	bd80      	pop	{r7, pc}
   18fca:	46c0      	nop			; (mov r8, r8)
   18fcc:	00018e0d 	.word	0x00018e0d
   18fd0:	00018de5 	.word	0x00018de5
   18fd4:	00018e61 	.word	0x00018e61

00018fd8 <adc_set_positive_input>:
 * \param[in] positive_input  Positive input pin
 */
static inline void adc_set_positive_input(
		struct adc_module *const module_inst,
		const enum adc_positive_input positive_input)
{
   18fd8:	b580      	push	{r7, lr}
   18fda:	b084      	sub	sp, #16
   18fdc:	af00      	add	r7, sp, #0
   18fde:	6078      	str	r0, [r7, #4]
   18fe0:	000a      	movs	r2, r1
   18fe2:	1cfb      	adds	r3, r7, #3
   18fe4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   18fe6:	687b      	ldr	r3, [r7, #4]
   18fe8:	681b      	ldr	r3, [r3, #0]
   18fea:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   18fec:	46c0      	nop			; (mov r8, r8)
   18fee:	687b      	ldr	r3, [r7, #4]
   18ff0:	0018      	movs	r0, r3
   18ff2:	4b0c      	ldr	r3, [pc, #48]	; (19024 <adc_set_positive_input+0x4c>)
   18ff4:	4798      	blx	r3
   18ff6:	1e03      	subs	r3, r0, #0
   18ff8:	d1f9      	bne.n	18fee <adc_set_positive_input+0x16>
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
   18ffa:	68fb      	ldr	r3, [r7, #12]
   18ffc:	691b      	ldr	r3, [r3, #16]
   18ffe:	221f      	movs	r2, #31
   19000:	4393      	bics	r3, r2
   19002:	001a      	movs	r2, r3
   19004:	1cfb      	adds	r3, r7, #3
   19006:	781b      	ldrb	r3, [r3, #0]
   19008:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
   1900a:	68fb      	ldr	r3, [r7, #12]
   1900c:	611a      	str	r2, [r3, #16]
			(positive_input);

	while (adc_is_syncing(module_inst)) {
   1900e:	46c0      	nop			; (mov r8, r8)
   19010:	687b      	ldr	r3, [r7, #4]
   19012:	0018      	movs	r0, r3
   19014:	4b03      	ldr	r3, [pc, #12]	; (19024 <adc_set_positive_input+0x4c>)
   19016:	4798      	blx	r3
   19018:	1e03      	subs	r3, r0, #0
   1901a:	d1f9      	bne.n	19010 <adc_set_positive_input+0x38>
		/* Wait for synchronization */
	}
}
   1901c:	46c0      	nop			; (mov r8, r8)
   1901e:	46bd      	mov	sp, r7
   19020:	b004      	add	sp, #16
   19022:	bd80      	pop	{r7, pc}
   19024:	00018de5 	.word	0x00018de5

00019028 <adc_enable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to enable
 */
static inline void adc_enable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   19028:	b580      	push	{r7, lr}
   1902a:	b084      	sub	sp, #16
   1902c:	af00      	add	r7, sp, #0
   1902e:	6078      	str	r0, [r7, #4]
   19030:	000a      	movs	r2, r1
   19032:	1cfb      	adds	r3, r7, #3
   19034:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   19036:	687b      	ldr	r3, [r7, #4]
   19038:	681b      	ldr	r3, [r3, #0]
   1903a:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENSET.reg = interrupt;
   1903c:	68fb      	ldr	r3, [r7, #12]
   1903e:	1cfa      	adds	r2, r7, #3
   19040:	7812      	ldrb	r2, [r2, #0]
   19042:	75da      	strb	r2, [r3, #23]
}
   19044:	46c0      	nop			; (mov r8, r8)
   19046:	46bd      	mov	sp, r7
   19048:	b004      	add	sp, #16
   1904a:	bd80      	pop	{r7, pc}

0001904c <adc_enable_callback>:
 *
 */
static inline void adc_enable_callback(
		struct adc_module *const module,
		enum adc_callback callback_type)
{
   1904c:	b580      	push	{r7, lr}
   1904e:	b082      	sub	sp, #8
   19050:	af00      	add	r7, sp, #0
   19052:	6078      	str	r0, [r7, #4]
   19054:	000a      	movs	r2, r1
   19056:	1cfb      	adds	r3, r7, #3
   19058:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback_mask |= (1 << callback_type);
   1905a:	687b      	ldr	r3, [r7, #4]
   1905c:	7edb      	ldrb	r3, [r3, #27]
   1905e:	b25a      	sxtb	r2, r3
   19060:	1cfb      	adds	r3, r7, #3
   19062:	781b      	ldrb	r3, [r3, #0]
   19064:	2101      	movs	r1, #1
   19066:	4099      	lsls	r1, r3
   19068:	000b      	movs	r3, r1
   1906a:	b25b      	sxtb	r3, r3
   1906c:	4313      	orrs	r3, r2
   1906e:	b25b      	sxtb	r3, r3
   19070:	b2da      	uxtb	r2, r3
   19072:	687b      	ldr	r3, [r7, #4]
   19074:	76da      	strb	r2, [r3, #27]

	/* Enable window interrupt if this is a window callback */
	if (callback_type == ADC_CALLBACK_WINDOW) {
   19076:	1cfb      	adds	r3, r7, #3
   19078:	781b      	ldrb	r3, [r3, #0]
   1907a:	2b01      	cmp	r3, #1
   1907c:	d104      	bne.n	19088 <adc_enable_callback+0x3c>
		adc_enable_interrupt(module, ADC_INTERRUPT_WINDOW);
   1907e:	687b      	ldr	r3, [r7, #4]
   19080:	2104      	movs	r1, #4
   19082:	0018      	movs	r0, r3
   19084:	4b07      	ldr	r3, [pc, #28]	; (190a4 <adc_enable_callback+0x58>)
   19086:	4798      	blx	r3
	}
	/* Enable overrun interrupt if error callback is registered */
	if (callback_type == ADC_CALLBACK_ERROR) {
   19088:	1cfb      	adds	r3, r7, #3
   1908a:	781b      	ldrb	r3, [r3, #0]
   1908c:	2b02      	cmp	r3, #2
   1908e:	d104      	bne.n	1909a <adc_enable_callback+0x4e>
		adc_enable_interrupt(module, ADC_INTERRUPT_OVERRUN);
   19090:	687b      	ldr	r3, [r7, #4]
   19092:	2102      	movs	r1, #2
   19094:	0018      	movs	r0, r3
   19096:	4b03      	ldr	r3, [pc, #12]	; (190a4 <adc_enable_callback+0x58>)
   19098:	4798      	blx	r3
	}
}
   1909a:	46c0      	nop			; (mov r8, r8)
   1909c:	46bd      	mov	sp, r7
   1909e:	b002      	add	sp, #8
   190a0:	bd80      	pop	{r7, pc}
   190a2:	46c0      	nop			; (mov r8, r8)
   190a4:	00019029 	.word	0x00019029

000190a8 <port_get_group_from_gpio_pin>:
{
   190a8:	b580      	push	{r7, lr}
   190aa:	b082      	sub	sp, #8
   190ac:	af00      	add	r7, sp, #0
   190ae:	0002      	movs	r2, r0
   190b0:	1dfb      	adds	r3, r7, #7
   190b2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   190b4:	1dfb      	adds	r3, r7, #7
   190b6:	781b      	ldrb	r3, [r3, #0]
   190b8:	0018      	movs	r0, r3
   190ba:	4b03      	ldr	r3, [pc, #12]	; (190c8 <port_get_group_from_gpio_pin+0x20>)
   190bc:	4798      	blx	r3
   190be:	0003      	movs	r3, r0
}
   190c0:	0018      	movs	r0, r3
   190c2:	46bd      	mov	sp, r7
   190c4:	b002      	add	sp, #8
   190c6:	bd80      	pop	{r7, pc}
   190c8:	00018d85 	.word	0x00018d85

000190cc <port_get_config_defaults>:
{
   190cc:	b580      	push	{r7, lr}
   190ce:	b082      	sub	sp, #8
   190d0:	af00      	add	r7, sp, #0
   190d2:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   190d4:	687b      	ldr	r3, [r7, #4]
   190d6:	2200      	movs	r2, #0
   190d8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   190da:	687b      	ldr	r3, [r7, #4]
   190dc:	2201      	movs	r2, #1
   190de:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   190e0:	687b      	ldr	r3, [r7, #4]
   190e2:	2200      	movs	r2, #0
   190e4:	709a      	strb	r2, [r3, #2]
}
   190e6:	46c0      	nop			; (mov r8, r8)
   190e8:	46bd      	mov	sp, r7
   190ea:	b002      	add	sp, #8
   190ec:	bd80      	pop	{r7, pc}
	...

000190f0 <port_pin_get_input_level>:
{
   190f0:	b580      	push	{r7, lr}
   190f2:	b084      	sub	sp, #16
   190f4:	af00      	add	r7, sp, #0
   190f6:	0002      	movs	r2, r0
   190f8:	1dfb      	adds	r3, r7, #7
   190fa:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   190fc:	1dfb      	adds	r3, r7, #7
   190fe:	781b      	ldrb	r3, [r3, #0]
   19100:	0018      	movs	r0, r3
   19102:	4b0b      	ldr	r3, [pc, #44]	; (19130 <port_pin_get_input_level+0x40>)
   19104:	4798      	blx	r3
   19106:	0003      	movs	r3, r0
   19108:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1910a:	1dfb      	adds	r3, r7, #7
   1910c:	781b      	ldrb	r3, [r3, #0]
   1910e:	221f      	movs	r2, #31
   19110:	4013      	ands	r3, r2
   19112:	2201      	movs	r2, #1
   19114:	409a      	lsls	r2, r3
   19116:	0013      	movs	r3, r2
   19118:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
   1911a:	68fb      	ldr	r3, [r7, #12]
   1911c:	6a1b      	ldr	r3, [r3, #32]
   1911e:	68ba      	ldr	r2, [r7, #8]
   19120:	4013      	ands	r3, r2
   19122:	1e5a      	subs	r2, r3, #1
   19124:	4193      	sbcs	r3, r2
   19126:	b2db      	uxtb	r3, r3
}
   19128:	0018      	movs	r0, r3
   1912a:	46bd      	mov	sp, r7
   1912c:	b004      	add	sp, #16
   1912e:	bd80      	pop	{r7, pc}
   19130:	000190a9 	.word	0x000190a9

00019134 <port_pin_set_output_level>:
{
   19134:	b580      	push	{r7, lr}
   19136:	b084      	sub	sp, #16
   19138:	af00      	add	r7, sp, #0
   1913a:	0002      	movs	r2, r0
   1913c:	1dfb      	adds	r3, r7, #7
   1913e:	701a      	strb	r2, [r3, #0]
   19140:	1dbb      	adds	r3, r7, #6
   19142:	1c0a      	adds	r2, r1, #0
   19144:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   19146:	1dfb      	adds	r3, r7, #7
   19148:	781b      	ldrb	r3, [r3, #0]
   1914a:	0018      	movs	r0, r3
   1914c:	4b0d      	ldr	r3, [pc, #52]	; (19184 <port_pin_set_output_level+0x50>)
   1914e:	4798      	blx	r3
   19150:	0003      	movs	r3, r0
   19152:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   19154:	1dfb      	adds	r3, r7, #7
   19156:	781b      	ldrb	r3, [r3, #0]
   19158:	221f      	movs	r2, #31
   1915a:	4013      	ands	r3, r2
   1915c:	2201      	movs	r2, #1
   1915e:	409a      	lsls	r2, r3
   19160:	0013      	movs	r3, r2
   19162:	60bb      	str	r3, [r7, #8]
	if (level) {
   19164:	1dbb      	adds	r3, r7, #6
   19166:	781b      	ldrb	r3, [r3, #0]
   19168:	2b00      	cmp	r3, #0
   1916a:	d003      	beq.n	19174 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1916c:	68fb      	ldr	r3, [r7, #12]
   1916e:	68ba      	ldr	r2, [r7, #8]
   19170:	619a      	str	r2, [r3, #24]
}
   19172:	e002      	b.n	1917a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   19174:	68fb      	ldr	r3, [r7, #12]
   19176:	68ba      	ldr	r2, [r7, #8]
   19178:	615a      	str	r2, [r3, #20]
}
   1917a:	46c0      	nop			; (mov r8, r8)
   1917c:	46bd      	mov	sp, r7
   1917e:	b004      	add	sp, #16
   19180:	bd80      	pop	{r7, pc}
   19182:	46c0      	nop			; (mov r8, r8)
   19184:	000190a9 	.word	0x000190a9

00019188 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   19188:	b580      	push	{r7, lr}
   1918a:	b084      	sub	sp, #16
   1918c:	af00      	add	r7, sp, #0
   1918e:	0002      	movs	r2, r0
   19190:	1dfb      	adds	r3, r7, #7
   19192:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   19194:	230f      	movs	r3, #15
   19196:	18fb      	adds	r3, r7, r3
   19198:	1dfa      	adds	r2, r7, #7
   1919a:	7812      	ldrb	r2, [r2, #0]
   1919c:	0952      	lsrs	r2, r2, #5
   1919e:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   191a0:	230f      	movs	r3, #15
   191a2:	18fb      	adds	r3, r7, r3
   191a4:	781b      	ldrb	r3, [r3, #0]
   191a6:	2b00      	cmp	r3, #0
   191a8:	d10c      	bne.n	191c4 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   191aa:	4b09      	ldr	r3, [pc, #36]	; (191d0 <_extint_get_eic_from_channel+0x48>)
   191ac:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   191ae:	230f      	movs	r3, #15
   191b0:	18fb      	adds	r3, r7, r3
   191b2:	781b      	ldrb	r3, [r3, #0]
   191b4:	009b      	lsls	r3, r3, #2
   191b6:	2210      	movs	r2, #16
   191b8:	4694      	mov	ip, r2
   191ba:	44bc      	add	ip, r7
   191bc:	4463      	add	r3, ip
   191be:	3b08      	subs	r3, #8
   191c0:	681b      	ldr	r3, [r3, #0]
   191c2:	e000      	b.n	191c6 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   191c4:	2300      	movs	r3, #0
	}
}
   191c6:	0018      	movs	r0, r3
   191c8:	46bd      	mov	sp, r7
   191ca:	b004      	add	sp, #16
   191cc:	bd80      	pop	{r7, pc}
   191ce:	46c0      	nop			; (mov r8, r8)
   191d0:	40001800 	.word	0x40001800

000191d4 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   191d4:	b580      	push	{r7, lr}
   191d6:	b084      	sub	sp, #16
   191d8:	af00      	add	r7, sp, #0
   191da:	0002      	movs	r2, r0
   191dc:	1dfb      	adds	r3, r7, #7
   191de:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   191e0:	1dfb      	adds	r3, r7, #7
   191e2:	781b      	ldrb	r3, [r3, #0]
   191e4:	0018      	movs	r0, r3
   191e6:	4b09      	ldr	r3, [pc, #36]	; (1920c <extint_chan_clear_detected+0x38>)
   191e8:	4798      	blx	r3
   191ea:	0003      	movs	r3, r0
   191ec:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   191ee:	1dfb      	adds	r3, r7, #7
   191f0:	781b      	ldrb	r3, [r3, #0]
   191f2:	221f      	movs	r2, #31
   191f4:	4013      	ands	r3, r2
   191f6:	2201      	movs	r2, #1
   191f8:	409a      	lsls	r2, r3
   191fa:	0013      	movs	r3, r2
   191fc:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   191fe:	68fb      	ldr	r3, [r7, #12]
   19200:	68ba      	ldr	r2, [r7, #8]
   19202:	611a      	str	r2, [r3, #16]
}
   19204:	46c0      	nop			; (mov r8, r8)
   19206:	46bd      	mov	sp, r7
   19208:	b004      	add	sp, #16
   1920a:	bd80      	pop	{r7, pc}
   1920c:	00019189 	.word	0x00019189

00019210 <rtc_count_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_count_get_config_defaults(
		struct rtc_count_config *const config)
{
   19210:	b580      	push	{r7, lr}
   19212:	b084      	sub	sp, #16
   19214:	af00      	add	r7, sp, #0
   19216:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
   19218:	687b      	ldr	r3, [r7, #4]
   1921a:	22a0      	movs	r2, #160	; 0xa0
   1921c:	0112      	lsls	r2, r2, #4
   1921e:	801a      	strh	r2, [r3, #0]
	config->mode                = RTC_COUNT_MODE_32BIT;
   19220:	687b      	ldr	r3, [r7, #4]
   19222:	2201      	movs	r2, #1
   19224:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
   19226:	687b      	ldr	r3, [r7, #4]
   19228:	2200      	movs	r2, #0
   1922a:	70da      	strb	r2, [r3, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   1922c:	687b      	ldr	r3, [r7, #4]
   1922e:	2200      	movs	r2, #0
   19230:	711a      	strb	r2, [r3, #4]
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   19232:	230f      	movs	r3, #15
   19234:	18fb      	adds	r3, r7, r3
   19236:	2200      	movs	r2, #0
   19238:	701a      	strb	r2, [r3, #0]
   1923a:	e00e      	b.n	1925a <rtc_count_get_config_defaults+0x4a>
		config->compare_values[i] = 0;
   1923c:	230f      	movs	r3, #15
   1923e:	18fb      	adds	r3, r7, r3
   19240:	781a      	ldrb	r2, [r3, #0]
   19242:	687b      	ldr	r3, [r7, #4]
   19244:	3202      	adds	r2, #2
   19246:	0092      	lsls	r2, r2, #2
   19248:	2100      	movs	r1, #0
   1924a:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   1924c:	230f      	movs	r3, #15
   1924e:	18fb      	adds	r3, r7, r3
   19250:	781a      	ldrb	r2, [r3, #0]
   19252:	230f      	movs	r3, #15
   19254:	18fb      	adds	r3, r7, r3
   19256:	3201      	adds	r2, #1
   19258:	701a      	strb	r2, [r3, #0]
   1925a:	230f      	movs	r3, #15
   1925c:	18fb      	adds	r3, r7, r3
   1925e:	781b      	ldrb	r3, [r3, #0]
   19260:	2b01      	cmp	r3, #1
   19262:	d9eb      	bls.n	1923c <rtc_count_get_config_defaults+0x2c>
	}
}
   19264:	46c0      	nop			; (mov r8, r8)
   19266:	46bd      	mov	sp, r7
   19268:	b004      	add	sp, #16
   1926a:	bd80      	pop	{r7, pc}

0001926c <rtc_count_enable_events>:
 *  \param[in] events    Struct containing flags of events to enable
 */
static inline void rtc_count_enable_events(
		struct rtc_module *const module,
		struct rtc_count_events *const events)
{
   1926c:	b580      	push	{r7, lr}
   1926e:	b086      	sub	sp, #24
   19270:	af00      	add	r7, sp, #0
   19272:	6078      	str	r0, [r7, #4]
   19274:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   19276:	687b      	ldr	r3, [r7, #4]
   19278:	681b      	ldr	r3, [r3, #0]
   1927a:	60fb      	str	r3, [r7, #12]

	uint32_t event_mask = 0;
   1927c:	2300      	movs	r3, #0
   1927e:	617b      	str	r3, [r7, #20]

	/* Check if the user has requested an overflow event */
	if (events->generate_event_on_overflow) {
   19280:	683b      	ldr	r3, [r7, #0]
   19282:	781b      	ldrb	r3, [r3, #0]
   19284:	2b00      	cmp	r3, #0
   19286:	d004      	beq.n	19292 <rtc_count_enable_events+0x26>
		event_mask |= RTC_MODE0_EVCTRL_OVFEO;
   19288:	697b      	ldr	r3, [r7, #20]
   1928a:	2280      	movs	r2, #128	; 0x80
   1928c:	0212      	lsls	r2, r2, #8
   1928e:	4313      	orrs	r3, r2
   19290:	617b      	str	r3, [r7, #20]
	}

	/* Check if the user has requested any compare events */
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   19292:	2313      	movs	r3, #19
   19294:	18fb      	adds	r3, r7, r3
   19296:	2200      	movs	r2, #0
   19298:	701a      	strb	r2, [r3, #0]
   1929a:	e01c      	b.n	192d6 <rtc_count_enable_events+0x6a>
		if (events->generate_event_on_compare[i]) {
   1929c:	2313      	movs	r3, #19
   1929e:	18fb      	adds	r3, r7, r3
   192a0:	781b      	ldrb	r3, [r3, #0]
   192a2:	683a      	ldr	r2, [r7, #0]
   192a4:	18d3      	adds	r3, r2, r3
   192a6:	785b      	ldrb	r3, [r3, #1]
   192a8:	2b00      	cmp	r3, #0
   192aa:	d00d      	beq.n	192c8 <rtc_count_enable_events+0x5c>
			event_mask |= RTC_MODE0_EVCTRL_CMPEO(1 << i);
   192ac:	2313      	movs	r3, #19
   192ae:	18fb      	adds	r3, r7, r3
   192b0:	781b      	ldrb	r3, [r3, #0]
   192b2:	2201      	movs	r2, #1
   192b4:	409a      	lsls	r2, r3
   192b6:	0013      	movs	r3, r2
   192b8:	021b      	lsls	r3, r3, #8
   192ba:	001a      	movs	r2, r3
   192bc:	2380      	movs	r3, #128	; 0x80
   192be:	005b      	lsls	r3, r3, #1
   192c0:	4013      	ands	r3, r2
   192c2:	697a      	ldr	r2, [r7, #20]
   192c4:	4313      	orrs	r3, r2
   192c6:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   192c8:	2313      	movs	r3, #19
   192ca:	18fb      	adds	r3, r7, r3
   192cc:	781a      	ldrb	r2, [r3, #0]
   192ce:	2313      	movs	r3, #19
   192d0:	18fb      	adds	r3, r7, r3
   192d2:	3201      	adds	r2, #1
   192d4:	701a      	strb	r2, [r3, #0]
   192d6:	2313      	movs	r3, #19
   192d8:	18fb      	adds	r3, r7, r3
   192da:	781b      	ldrb	r3, [r3, #0]
   192dc:	2b01      	cmp	r3, #1
   192de:	d9dd      	bls.n	1929c <rtc_count_enable_events+0x30>
		}
	}

	/* Check if the user has requested any periodic events */
	for (uint8_t i = 0; i < 8; i++) {
   192e0:	2312      	movs	r3, #18
   192e2:	18fb      	adds	r3, r7, r3
   192e4:	2200      	movs	r2, #0
   192e6:	701a      	strb	r2, [r3, #0]
   192e8:	e01a      	b.n	19320 <rtc_count_enable_events+0xb4>
		if (events->generate_event_on_periodic[i]) {
   192ea:	2312      	movs	r3, #18
   192ec:	18fb      	adds	r3, r7, r3
   192ee:	781b      	ldrb	r3, [r3, #0]
   192f0:	683a      	ldr	r2, [r7, #0]
   192f2:	18d3      	adds	r3, r2, r3
   192f4:	78db      	ldrb	r3, [r3, #3]
   192f6:	2b00      	cmp	r3, #0
   192f8:	d00b      	beq.n	19312 <rtc_count_enable_events+0xa6>
			event_mask |= RTC_MODE0_EVCTRL_PEREO(1 << i);
   192fa:	2312      	movs	r3, #18
   192fc:	18fb      	adds	r3, r7, r3
   192fe:	781b      	ldrb	r3, [r3, #0]
   19300:	2201      	movs	r2, #1
   19302:	409a      	lsls	r2, r3
   19304:	0013      	movs	r3, r2
   19306:	001a      	movs	r2, r3
   19308:	23ff      	movs	r3, #255	; 0xff
   1930a:	4013      	ands	r3, r2
   1930c:	697a      	ldr	r2, [r7, #20]
   1930e:	4313      	orrs	r3, r2
   19310:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < 8; i++) {
   19312:	2312      	movs	r3, #18
   19314:	18fb      	adds	r3, r7, r3
   19316:	781a      	ldrb	r2, [r3, #0]
   19318:	2312      	movs	r3, #18
   1931a:	18fb      	adds	r3, r7, r3
   1931c:	3201      	adds	r2, #1
   1931e:	701a      	strb	r2, [r3, #0]
   19320:	2312      	movs	r3, #18
   19322:	18fb      	adds	r3, r7, r3
   19324:	781b      	ldrb	r3, [r3, #0]
   19326:	2b07      	cmp	r3, #7
   19328:	d9df      	bls.n	192ea <rtc_count_enable_events+0x7e>
		event_mask |= RTC_MODE0_EVCTRL_TAMPEVEI;
	}
#endif

	/* Enable given event(s). */
	rtc_module->MODE0.EVCTRL.reg |= event_mask;
   1932a:	68fb      	ldr	r3, [r7, #12]
   1932c:	889b      	ldrh	r3, [r3, #4]
   1932e:	b29a      	uxth	r2, r3
   19330:	697b      	ldr	r3, [r7, #20]
   19332:	b29b      	uxth	r3, r3
   19334:	4313      	orrs	r3, r2
   19336:	b29a      	uxth	r2, r3
   19338:	68fb      	ldr	r3, [r7, #12]
   1933a:	809a      	strh	r2, [r3, #4]
}
   1933c:	46c0      	nop			; (mov r8, r8)
   1933e:	46bd      	mov	sp, r7
   19340:	b006      	add	sp, #24
   19342:	bd80      	pop	{r7, pc}

00019344 <readOverHeadWaterSensorState>:
simEventTemp[9]		: lost AC power in 1 phase						A
*/


void readOverHeadWaterSensorState(bool *olow,bool *ohigh)
{
   19344:	b580      	push	{r7, lr}
   19346:	b082      	sub	sp, #8
   19348:	af00      	add	r7, sp, #0
   1934a:	6078      	str	r0, [r7, #4]
   1934c:	6039      	str	r1, [r7, #0]
	*olow = port_pin_get_input_level(OVERHEAD_TANK_LL_PIN);
   1934e:	200d      	movs	r0, #13
   19350:	4b08      	ldr	r3, [pc, #32]	; (19374 <readOverHeadWaterSensorState+0x30>)
   19352:	4798      	blx	r3
   19354:	0003      	movs	r3, r0
   19356:	001a      	movs	r2, r3
   19358:	687b      	ldr	r3, [r7, #4]
   1935a:	701a      	strb	r2, [r3, #0]
	//*omid = port_pin_get_input_level(OVERHEAD_TANK_ML_PIN);
	*ohigh = port_pin_get_input_level(OVERHEAD_TANK_HL_PIN);
   1935c:	202f      	movs	r0, #47	; 0x2f
   1935e:	4b05      	ldr	r3, [pc, #20]	; (19374 <readOverHeadWaterSensorState+0x30>)
   19360:	4798      	blx	r3
   19362:	0003      	movs	r3, r0
   19364:	001a      	movs	r2, r3
   19366:	683b      	ldr	r3, [r7, #0]
   19368:	701a      	strb	r2, [r3, #0]
}
   1936a:	46c0      	nop			; (mov r8, r8)
   1936c:	46bd      	mov	sp, r7
   1936e:	b002      	add	sp, #8
   19370:	bd80      	pop	{r7, pc}
   19372:	46c0      	nop			; (mov r8, r8)
   19374:	000190f1 	.word	0x000190f1

00019378 <updateOverheadLevel>:

void updateOverheadLevel(uint8_t level)
{
   19378:	b580      	push	{r7, lr}
   1937a:	b082      	sub	sp, #8
   1937c:	af00      	add	r7, sp, #0
   1937e:	0002      	movs	r2, r0
   19380:	1dfb      	adds	r3, r7, #7
   19382:	701a      	strb	r2, [r3, #0]
	overheadLevel=level;
   19384:	4b03      	ldr	r3, [pc, #12]	; (19394 <updateOverheadLevel+0x1c>)
   19386:	1dfa      	adds	r2, r7, #7
   19388:	7812      	ldrb	r2, [r2, #0]
   1938a:	701a      	strb	r2, [r3, #0]
}
   1938c:	46c0      	nop			; (mov r8, r8)
   1938e:	46bd      	mov	sp, r7
   19390:	b002      	add	sp, #8
   19392:	bd80      	pop	{r7, pc}
   19394:	20000788 	.word	0x20000788

00019398 <getOverHeadWaterSensorState>:

uint8_t getOverHeadWaterSensorState(void)
{
   19398:	b580      	push	{r7, lr}
   1939a:	b082      	sub	sp, #8
   1939c:	af00      	add	r7, sp, #0
	bool olow,omid,ohigh;
	readOverHeadWaterSensorState(&olow,&ohigh);
   1939e:	1d7a      	adds	r2, r7, #5
   193a0:	1dbb      	adds	r3, r7, #6
   193a2:	0011      	movs	r1, r2
   193a4:	0018      	movs	r0, r3
   193a6:	4b11      	ldr	r3, [pc, #68]	; (193ec <getOverHeadWaterSensorState+0x54>)
   193a8:	4798      	blx	r3
	uint8_t ans=0;
   193aa:	1dfb      	adds	r3, r7, #7
   193ac:	2200      	movs	r2, #0
   193ae:	701a      	strb	r2, [r3, #0]
	if(!olow)
   193b0:	1dbb      	adds	r3, r7, #6
   193b2:	781b      	ldrb	r3, [r3, #0]
   193b4:	2201      	movs	r2, #1
   193b6:	4053      	eors	r3, r2
   193b8:	b2db      	uxtb	r3, r3
   193ba:	2b00      	cmp	r3, #0
   193bc:	d010      	beq.n	193e0 <getOverHeadWaterSensorState+0x48>
	{
		ans++;
   193be:	1dfb      	adds	r3, r7, #7
   193c0:	781a      	ldrb	r2, [r3, #0]
   193c2:	1dfb      	adds	r3, r7, #7
   193c4:	3201      	adds	r2, #1
   193c6:	701a      	strb	r2, [r3, #0]
		//if(!omid)
		{
			//ans++;
			if (!ohigh)
   193c8:	1d7b      	adds	r3, r7, #5
   193ca:	781b      	ldrb	r3, [r3, #0]
   193cc:	2201      	movs	r2, #1
   193ce:	4053      	eors	r3, r2
   193d0:	b2db      	uxtb	r3, r3
   193d2:	2b00      	cmp	r3, #0
   193d4:	d004      	beq.n	193e0 <getOverHeadWaterSensorState+0x48>
			{
				ans++;
   193d6:	1dfb      	adds	r3, r7, #7
   193d8:	781a      	ldrb	r2, [r3, #0]
   193da:	1dfb      	adds	r3, r7, #7
   193dc:	3201      	adds	r2, #1
   193de:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return ans;
   193e0:	1dfb      	adds	r3, r7, #7
   193e2:	781b      	ldrb	r3, [r3, #0]
}
   193e4:	0018      	movs	r0, r3
   193e6:	46bd      	mov	sp, r7
   193e8:	b002      	add	sp, #8
   193ea:	bd80      	pop	{r7, pc}
   193ec:	00019345 	.word	0x00019345

000193f0 <overHeadWaterStatusOnCall>:

void overHeadWaterStatusOnCall(bool current)
{
   193f0:	b590      	push	{r4, r7, lr}
   193f2:	b085      	sub	sp, #20
   193f4:	af00      	add	r7, sp, #0
   193f6:	0002      	movs	r2, r0
   193f8:	1dfb      	adds	r3, r7, #7
   193fa:	701a      	strb	r2, [r3, #0]
	uint8_t temp = getOverHeadWaterSensorState();
   193fc:	230f      	movs	r3, #15
   193fe:	18fc      	adds	r4, r7, r3
   19400:	4b15      	ldr	r3, [pc, #84]	; (19458 <overHeadWaterStatusOnCall+0x68>)
   19402:	4798      	blx	r3
   19404:	0003      	movs	r3, r0
   19406:	7023      	strb	r3, [r4, #0]
	if(current)
   19408:	1dfb      	adds	r3, r7, #7
   1940a:	781b      	ldrb	r3, [r3, #0]
   1940c:	2b00      	cmp	r3, #0
   1940e:	d004      	beq.n	1941a <overHeadWaterStatusOnCall+0x2a>
	temp = overheadLevel;
   19410:	230f      	movs	r3, #15
   19412:	18fb      	adds	r3, r7, r3
   19414:	4a11      	ldr	r2, [pc, #68]	; (1945c <overHeadWaterStatusOnCall+0x6c>)
   19416:	7812      	ldrb	r2, [r2, #0]
   19418:	701a      	strb	r2, [r3, #0]
	if(temp == OVERHEADHIGHLEVEL)
   1941a:	230f      	movs	r3, #15
   1941c:	18fb      	adds	r3, r7, r3
   1941e:	781b      	ldrb	r3, [r3, #0]
   19420:	2b02      	cmp	r3, #2
   19422:	d103      	bne.n	1942c <overHeadWaterStatusOnCall+0x3c>
	{
		setMotorMGRResponse('V');
   19424:	2056      	movs	r0, #86	; 0x56
   19426:	4b0e      	ldr	r3, [pc, #56]	; (19460 <overHeadWaterStatusOnCall+0x70>)
   19428:	4798      	blx	r3
	}
	else if (temp == OVERHEADCRITICALLEVEL)
	{
		setMotorMGRResponse('W');
	}
}
   1942a:	e010      	b.n	1944e <overHeadWaterStatusOnCall+0x5e>
	else if(temp == OVERHEADMIDLEVEL)
   1942c:	230f      	movs	r3, #15
   1942e:	18fb      	adds	r3, r7, r3
   19430:	781b      	ldrb	r3, [r3, #0]
   19432:	2b01      	cmp	r3, #1
   19434:	d103      	bne.n	1943e <overHeadWaterStatusOnCall+0x4e>
		setMotorMGRResponse('X');
   19436:	2058      	movs	r0, #88	; 0x58
   19438:	4b09      	ldr	r3, [pc, #36]	; (19460 <overHeadWaterStatusOnCall+0x70>)
   1943a:	4798      	blx	r3
}
   1943c:	e007      	b.n	1944e <overHeadWaterStatusOnCall+0x5e>
	else if (temp == OVERHEADCRITICALLEVEL)
   1943e:	230f      	movs	r3, #15
   19440:	18fb      	adds	r3, r7, r3
   19442:	781b      	ldrb	r3, [r3, #0]
   19444:	2b00      	cmp	r3, #0
   19446:	d102      	bne.n	1944e <overHeadWaterStatusOnCall+0x5e>
		setMotorMGRResponse('W');
   19448:	2057      	movs	r0, #87	; 0x57
   1944a:	4b05      	ldr	r3, [pc, #20]	; (19460 <overHeadWaterStatusOnCall+0x70>)
   1944c:	4798      	blx	r3
}
   1944e:	46c0      	nop			; (mov r8, r8)
   19450:	46bd      	mov	sp, r7
   19452:	b005      	add	sp, #20
   19454:	bd90      	pop	{r4, r7, pc}
   19456:	46c0      	nop			; (mov r8, r8)
   19458:	00019399 	.word	0x00019399
   1945c:	20000788 	.word	0x20000788
   19460:	00014b05 	.word	0x00014b05

00019464 <readWaterSensorState>:

void readWaterSensorState(bool *low,bool *mid,bool *high)
{
   19464:	b580      	push	{r7, lr}
   19466:	b084      	sub	sp, #16
   19468:	af00      	add	r7, sp, #0
   1946a:	60f8      	str	r0, [r7, #12]
   1946c:	60b9      	str	r1, [r7, #8]
   1946e:	607a      	str	r2, [r7, #4]
	*low = port_pin_get_input_level(UNDERGRUND_TANK_LL_PIN);
   19470:	2037      	movs	r0, #55	; 0x37
   19472:	4b0c      	ldr	r3, [pc, #48]	; (194a4 <readWaterSensorState+0x40>)
   19474:	4798      	blx	r3
   19476:	0003      	movs	r3, r0
   19478:	001a      	movs	r2, r3
   1947a:	68fb      	ldr	r3, [r7, #12]
   1947c:	701a      	strb	r2, [r3, #0]
	*mid = port_pin_get_input_level(UNDERGRUND_TANK_ML_PIN);
   1947e:	200f      	movs	r0, #15
   19480:	4b08      	ldr	r3, [pc, #32]	; (194a4 <readWaterSensorState+0x40>)
   19482:	4798      	blx	r3
   19484:	0003      	movs	r3, r0
   19486:	001a      	movs	r2, r3
   19488:	68bb      	ldr	r3, [r7, #8]
   1948a:	701a      	strb	r2, [r3, #0]
	*high = port_pin_get_input_level(UNDERGRUND_TANK_HL_PIN);
   1948c:	200e      	movs	r0, #14
   1948e:	4b05      	ldr	r3, [pc, #20]	; (194a4 <readWaterSensorState+0x40>)
   19490:	4798      	blx	r3
   19492:	0003      	movs	r3, r0
   19494:	001a      	movs	r2, r3
   19496:	687b      	ldr	r3, [r7, #4]
   19498:	701a      	strb	r2, [r3, #0]
}
   1949a:	46c0      	nop			; (mov r8, r8)
   1949c:	46bd      	mov	sp, r7
   1949e:	b004      	add	sp, #16
   194a0:	bd80      	pop	{r7, pc}
   194a2:	46c0      	nop			; (mov r8, r8)
   194a4:	000190f1 	.word	0x000190f1

000194a8 <updateUndergroundLevel>:

void updateUndergroundLevel(uint8_t level)
{
   194a8:	b580      	push	{r7, lr}
   194aa:	b082      	sub	sp, #8
   194ac:	af00      	add	r7, sp, #0
   194ae:	0002      	movs	r2, r0
   194b0:	1dfb      	adds	r3, r7, #7
   194b2:	701a      	strb	r2, [r3, #0]
	undergroundLevel=level;
   194b4:	4b03      	ldr	r3, [pc, #12]	; (194c4 <updateUndergroundLevel+0x1c>)
   194b6:	1dfa      	adds	r2, r7, #7
   194b8:	7812      	ldrb	r2, [r2, #0]
   194ba:	701a      	strb	r2, [r3, #0]
}
   194bc:	46c0      	nop			; (mov r8, r8)
   194be:	46bd      	mov	sp, r7
   194c0:	b002      	add	sp, #8
   194c2:	bd80      	pop	{r7, pc}
   194c4:	20000858 	.word	0x20000858

000194c8 <getWaterSensorState>:

uint8_t getWaterSensorState(void)
{
   194c8:	b580      	push	{r7, lr}
   194ca:	b082      	sub	sp, #8
   194cc:	af00      	add	r7, sp, #0
	bool l,m,h;
	readWaterSensorState(&l,&m,&h);
   194ce:	1d3a      	adds	r2, r7, #4
   194d0:	1d79      	adds	r1, r7, #5
   194d2:	1dbb      	adds	r3, r7, #6
   194d4:	0018      	movs	r0, r3
   194d6:	4b17      	ldr	r3, [pc, #92]	; (19534 <getWaterSensorState+0x6c>)
   194d8:	4798      	blx	r3
	uint8_t ans=0;
   194da:	1dfb      	adds	r3, r7, #7
   194dc:	2200      	movs	r2, #0
   194de:	701a      	strb	r2, [r3, #0]

	if(!l)
   194e0:	1dbb      	adds	r3, r7, #6
   194e2:	781b      	ldrb	r3, [r3, #0]
   194e4:	2201      	movs	r2, #1
   194e6:	4053      	eors	r3, r2
   194e8:	b2db      	uxtb	r3, r3
   194ea:	2b00      	cmp	r3, #0
   194ec:	d01c      	beq.n	19528 <getWaterSensorState+0x60>
	{
		ans++;
   194ee:	1dfb      	adds	r3, r7, #7
   194f0:	781a      	ldrb	r2, [r3, #0]
   194f2:	1dfb      	adds	r3, r7, #7
   194f4:	3201      	adds	r2, #1
   194f6:	701a      	strb	r2, [r3, #0]
		if(!m)
   194f8:	1d7b      	adds	r3, r7, #5
   194fa:	781b      	ldrb	r3, [r3, #0]
   194fc:	2201      	movs	r2, #1
   194fe:	4053      	eors	r3, r2
   19500:	b2db      	uxtb	r3, r3
   19502:	2b00      	cmp	r3, #0
   19504:	d010      	beq.n	19528 <getWaterSensorState+0x60>
		{
			ans++;
   19506:	1dfb      	adds	r3, r7, #7
   19508:	781a      	ldrb	r2, [r3, #0]
   1950a:	1dfb      	adds	r3, r7, #7
   1950c:	3201      	adds	r2, #1
   1950e:	701a      	strb	r2, [r3, #0]
			if(!h)
   19510:	1d3b      	adds	r3, r7, #4
   19512:	781b      	ldrb	r3, [r3, #0]
   19514:	2201      	movs	r2, #1
   19516:	4053      	eors	r3, r2
   19518:	b2db      	uxtb	r3, r3
   1951a:	2b00      	cmp	r3, #0
   1951c:	d004      	beq.n	19528 <getWaterSensorState+0x60>
			{
				ans++;
   1951e:	1dfb      	adds	r3, r7, #7
   19520:	781a      	ldrb	r2, [r3, #0]
   19522:	1dfb      	adds	r3, r7, #7
   19524:	3201      	adds	r2, #1
   19526:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return ans;
   19528:	1dfb      	adds	r3, r7, #7
   1952a:	781b      	ldrb	r3, [r3, #0]
}
   1952c:	0018      	movs	r0, r3
   1952e:	46bd      	mov	sp, r7
   19530:	b002      	add	sp, #8
   19532:	bd80      	pop	{r7, pc}
   19534:	00019465 	.word	0x00019465

00019538 <waterStatusOnCall>:

void waterStatusOnCall(bool current)
{
   19538:	b590      	push	{r4, r7, lr}
   1953a:	b085      	sub	sp, #20
   1953c:	af00      	add	r7, sp, #0
   1953e:	0002      	movs	r2, r0
   19540:	1dfb      	adds	r3, r7, #7
   19542:	701a      	strb	r2, [r3, #0]
	uint8_t temp = getWaterSensorState();
   19544:	230f      	movs	r3, #15
   19546:	18fc      	adds	r4, r7, r3
   19548:	4b19      	ldr	r3, [pc, #100]	; (195b0 <waterStatusOnCall+0x78>)
   1954a:	4798      	blx	r3
   1954c:	0003      	movs	r3, r0
   1954e:	7023      	strb	r3, [r4, #0]
	if(current)
   19550:	1dfb      	adds	r3, r7, #7
   19552:	781b      	ldrb	r3, [r3, #0]
   19554:	2b00      	cmp	r3, #0
   19556:	d004      	beq.n	19562 <waterStatusOnCall+0x2a>
	temp = undergroundLevel;
   19558:	230f      	movs	r3, #15
   1955a:	18fb      	adds	r3, r7, r3
   1955c:	4a15      	ldr	r2, [pc, #84]	; (195b4 <waterStatusOnCall+0x7c>)
   1955e:	7812      	ldrb	r2, [r2, #0]
   19560:	701a      	strb	r2, [r3, #0]

	if(temp==CRITICALLEVEL)
   19562:	230f      	movs	r3, #15
   19564:	18fb      	adds	r3, r7, r3
   19566:	781b      	ldrb	r3, [r3, #0]
   19568:	2b00      	cmp	r3, #0
   1956a:	d103      	bne.n	19574 <waterStatusOnCall+0x3c>
	{
		setMotorMGRResponse('T');	//water level insufficient
   1956c:	2054      	movs	r0, #84	; 0x54
   1956e:	4b12      	ldr	r3, [pc, #72]	; (195b8 <waterStatusOnCall+0x80>)
   19570:	4798      	blx	r3
	}
	else if(temp==HIGHLEVEL)
	{
		setMotorMGRResponse('E');	//well is full
	}
}
   19572:	e019      	b.n	195a8 <waterStatusOnCall+0x70>
	else if(temp==LOWLEVEL)
   19574:	230f      	movs	r3, #15
   19576:	18fb      	adds	r3, r7, r3
   19578:	781b      	ldrb	r3, [r3, #0]
   1957a:	2b01      	cmp	r3, #1
   1957c:	d103      	bne.n	19586 <waterStatusOnCall+0x4e>
		setMotorMGRResponse('Q');	//water below 2nd sensor
   1957e:	2051      	movs	r0, #81	; 0x51
   19580:	4b0d      	ldr	r3, [pc, #52]	; (195b8 <waterStatusOnCall+0x80>)
   19582:	4798      	blx	r3
}
   19584:	e010      	b.n	195a8 <waterStatusOnCall+0x70>
	else if(temp==MIDLEVEL)
   19586:	230f      	movs	r3, #15
   19588:	18fb      	adds	r3, r7, r3
   1958a:	781b      	ldrb	r3, [r3, #0]
   1958c:	2b02      	cmp	r3, #2
   1958e:	d103      	bne.n	19598 <waterStatusOnCall+0x60>
		setMotorMGRResponse('R');	//water below 1st sensor
   19590:	2052      	movs	r0, #82	; 0x52
   19592:	4b09      	ldr	r3, [pc, #36]	; (195b8 <waterStatusOnCall+0x80>)
   19594:	4798      	blx	r3
}
   19596:	e007      	b.n	195a8 <waterStatusOnCall+0x70>
	else if(temp==HIGHLEVEL)
   19598:	230f      	movs	r3, #15
   1959a:	18fb      	adds	r3, r7, r3
   1959c:	781b      	ldrb	r3, [r3, #0]
   1959e:	2b03      	cmp	r3, #3
   195a0:	d102      	bne.n	195a8 <waterStatusOnCall+0x70>
		setMotorMGRResponse('E');	//well is full
   195a2:	2045      	movs	r0, #69	; 0x45
   195a4:	4b04      	ldr	r3, [pc, #16]	; (195b8 <waterStatusOnCall+0x80>)
   195a6:	4798      	blx	r3
}
   195a8:	46c0      	nop			; (mov r8, r8)
   195aa:	46bd      	mov	sp, r7
   195ac:	b005      	add	sp, #20
   195ae:	bd90      	pop	{r4, r7, pc}
   195b0:	000194c9 	.word	0x000194c9
   195b4:	20000858 	.word	0x20000858
   195b8:	00014b05 	.word	0x00014b05

000195bc <Water_Level_Task>:

static void Water_Level_Task(void *params)
{
   195bc:	b590      	push	{r4, r7, lr}
   195be:	b085      	sub	sp, #20
   195c0:	af00      	add	r7, sp, #0
   195c2:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	
	struct port_config water_level_sensor_pin_config;
	port_get_config_defaults(&water_level_sensor_pin_config);
   195c4:	2308      	movs	r3, #8
   195c6:	18fb      	adds	r3, r7, r3
   195c8:	0018      	movs	r0, r3
   195ca:	4b8b      	ldr	r3, [pc, #556]	; (197f8 <Water_Level_Task+0x23c>)
   195cc:	4798      	blx	r3
	
	water_level_sensor_pin_config.direction = PORT_PIN_DIR_INPUT;
   195ce:	2308      	movs	r3, #8
   195d0:	18fb      	adds	r3, r7, r3
   195d2:	2200      	movs	r2, #0
   195d4:	701a      	strb	r2, [r3, #0]
	water_level_sensor_pin_config.input_pull = PORT_PIN_PULL_UP;
   195d6:	2308      	movs	r3, #8
   195d8:	18fb      	adds	r3, r7, r3
   195da:	2201      	movs	r2, #1
   195dc:	705a      	strb	r2, [r3, #1]
	
	port_pin_set_config(OVERHEAD_TANK_HL_PIN,	&water_level_sensor_pin_config);
   195de:	2308      	movs	r3, #8
   195e0:	18fb      	adds	r3, r7, r3
   195e2:	0019      	movs	r1, r3
   195e4:	202f      	movs	r0, #47	; 0x2f
   195e6:	4b85      	ldr	r3, [pc, #532]	; (197fc <Water_Level_Task+0x240>)
   195e8:	4798      	blx	r3
	port_pin_set_config(OVERHEAD_TANK_ML_PIN,	&water_level_sensor_pin_config);
   195ea:	2308      	movs	r3, #8
   195ec:	18fb      	adds	r3, r7, r3
   195ee:	0019      	movs	r1, r3
   195f0:	200c      	movs	r0, #12
   195f2:	4b82      	ldr	r3, [pc, #520]	; (197fc <Water_Level_Task+0x240>)
   195f4:	4798      	blx	r3
	port_pin_set_config(OVERHEAD_TANK_LL_PIN,	&water_level_sensor_pin_config);
   195f6:	2308      	movs	r3, #8
   195f8:	18fb      	adds	r3, r7, r3
   195fa:	0019      	movs	r1, r3
   195fc:	200d      	movs	r0, #13
   195fe:	4b7f      	ldr	r3, [pc, #508]	; (197fc <Water_Level_Task+0x240>)
   19600:	4798      	blx	r3
	port_pin_set_config(UNDERGRUND_TANK_HL_PIN, &water_level_sensor_pin_config);
   19602:	2308      	movs	r3, #8
   19604:	18fb      	adds	r3, r7, r3
   19606:	0019      	movs	r1, r3
   19608:	200e      	movs	r0, #14
   1960a:	4b7c      	ldr	r3, [pc, #496]	; (197fc <Water_Level_Task+0x240>)
   1960c:	4798      	blx	r3
	port_pin_set_config(UNDERGRUND_TANK_ML_PIN, &water_level_sensor_pin_config);
   1960e:	2308      	movs	r3, #8
   19610:	18fb      	adds	r3, r7, r3
   19612:	0019      	movs	r1, r3
   19614:	200f      	movs	r0, #15
   19616:	4b79      	ldr	r3, [pc, #484]	; (197fc <Water_Level_Task+0x240>)
   19618:	4798      	blx	r3
	port_pin_set_config(UNDERGRUND_TANK_LL_PIN, &water_level_sensor_pin_config);
   1961a:	2308      	movs	r3, #8
   1961c:	18fb      	adds	r3, r7, r3
   1961e:	0019      	movs	r1, r3
   19620:	2037      	movs	r0, #55	; 0x37
   19622:	4b76      	ldr	r3, [pc, #472]	; (197fc <Water_Level_Task+0x240>)
   19624:	4798      	blx	r3
	
	undergroundLevel = MIDLEVEL;
   19626:	4b76      	ldr	r3, [pc, #472]	; (19800 <Water_Level_Task+0x244>)
   19628:	2202      	movs	r2, #2
   1962a:	701a      	strb	r2, [r3, #0]
	tempUndergroundLevel = MIDLEVEL;
   1962c:	4b75      	ldr	r3, [pc, #468]	; (19804 <Water_Level_Task+0x248>)
   1962e:	2202      	movs	r2, #2
   19630:	701a      	strb	r2, [r3, #0]
	
	overheadLevel = OVERHEADMIDLEVEL;
   19632:	4b75      	ldr	r3, [pc, #468]	; (19808 <Water_Level_Task+0x24c>)
   19634:	2201      	movs	r2, #1
   19636:	701a      	strb	r2, [r3, #0]
	tempOverheadLevel = OVERHEADMIDLEVEL;
   19638:	4b74      	ldr	r3, [pc, #464]	; (1980c <Water_Level_Task+0x250>)
   1963a:	2201      	movs	r2, #1
   1963c:	701a      	strb	r2, [r3, #0]
	tempWaterEventCount = 0;
   1963e:	4b74      	ldr	r3, [pc, #464]	; (19810 <Water_Level_Task+0x254>)
   19640:	2200      	movs	r2, #0
   19642:	701a      	strb	r2, [r3, #0]
	
	uint8_t j = 0;
   19644:	230f      	movs	r3, #15
   19646:	18fb      	adds	r3, r7, r3
   19648:	2200      	movs	r2, #0
   1964a:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_GP)
   1964c:	4b71      	ldr	r3, [pc, #452]	; (19814 <Water_Level_Task+0x258>)
   1964e:	791b      	ldrb	r3, [r3, #4]
   19650:	2b00      	cmp	r3, #0
   19652:	d004      	beq.n	1965e <Water_Level_Task+0xa2>
	{
		j = 19;
   19654:	230f      	movs	r3, #15
   19656:	18fb      	adds	r3, r7, r3
   19658:	2213      	movs	r2, #19
   1965a:	701a      	strb	r2, [r3, #0]
   1965c:	e003      	b.n	19666 <Water_Level_Task+0xaa>
	}
	else
	{
		j= 17;
   1965e:	230f      	movs	r3, #15
   19660:	18fb      	adds	r3, r7, r3
   19662:	2211      	movs	r2, #17
   19664:	701a      	strb	r2, [r3, #0]
	}
	for (uint8_t i=12;i<j;i++)
   19666:	230e      	movs	r3, #14
   19668:	18fb      	adds	r3, r7, r3
   1966a:	220c      	movs	r2, #12
   1966c:	701a      	strb	r2, [r3, #0]
   1966e:	e00c      	b.n	1968a <Water_Level_Task+0xce>
	{
		simEventTemp[i] = true;
   19670:	230e      	movs	r3, #14
   19672:	18fb      	adds	r3, r7, r3
   19674:	781b      	ldrb	r3, [r3, #0]
   19676:	4a68      	ldr	r2, [pc, #416]	; (19818 <Water_Level_Task+0x25c>)
   19678:	2101      	movs	r1, #1
   1967a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=12;i<j;i++)
   1967c:	230e      	movs	r3, #14
   1967e:	18fb      	adds	r3, r7, r3
   19680:	781a      	ldrb	r2, [r3, #0]
   19682:	230e      	movs	r3, #14
   19684:	18fb      	adds	r3, r7, r3
   19686:	3201      	adds	r2, #1
   19688:	701a      	strb	r2, [r3, #0]
   1968a:	230e      	movs	r3, #14
   1968c:	18fa      	adds	r2, r7, r3
   1968e:	230f      	movs	r3, #15
   19690:	18fb      	adds	r3, r7, r3
   19692:	7812      	ldrb	r2, [r2, #0]
   19694:	781b      	ldrb	r3, [r3, #0]
   19696:	429a      	cmp	r2, r3
   19698:	d3ea      	bcc.n	19670 <Water_Level_Task+0xb4>
	}
	simEvent[12] = 'I';
   1969a:	4b60      	ldr	r3, [pc, #384]	; (1981c <Water_Level_Task+0x260>)
   1969c:	2249      	movs	r2, #73	; 0x49
   1969e:	731a      	strb	r2, [r3, #12]
	simEvent[13] = 'D';
   196a0:	4b5e      	ldr	r3, [pc, #376]	; (1981c <Water_Level_Task+0x260>)
   196a2:	2244      	movs	r2, #68	; 0x44
   196a4:	735a      	strb	r2, [r3, #13]
	simEvent[14] = 'H';
   196a6:	4b5d      	ldr	r3, [pc, #372]	; (1981c <Water_Level_Task+0x260>)
   196a8:	2248      	movs	r2, #72	; 0x48
   196aa:	739a      	strb	r2, [r3, #14]
	simEvent[15] = 'E';
   196ac:	4b5b      	ldr	r3, [pc, #364]	; (1981c <Water_Level_Task+0x260>)
   196ae:	2245      	movs	r2, #69	; 0x45
   196b0:	73da      	strb	r2, [r3, #15]
	simEvent[16] = 'Z';
   196b2:	4b5a      	ldr	r3, [pc, #360]	; (1981c <Water_Level_Task+0x260>)
   196b4:	225a      	movs	r2, #90	; 0x5a
   196b6:	741a      	strb	r2, [r3, #16]
	if (factory_settings_parameter_struct.ENABLE_GP)
   196b8:	4b56      	ldr	r3, [pc, #344]	; (19814 <Water_Level_Task+0x258>)
   196ba:	791b      	ldrb	r3, [r3, #4]
   196bc:	2b00      	cmp	r3, #0
   196be:	d005      	beq.n	196cc <Water_Level_Task+0x110>
	{
		simEvent[17] = 'V';
   196c0:	4b56      	ldr	r3, [pc, #344]	; (1981c <Water_Level_Task+0x260>)
   196c2:	2256      	movs	r2, #86	; 0x56
   196c4:	745a      	strb	r2, [r3, #17]
		simEvent[18] = 'W';
   196c6:	4b55      	ldr	r3, [pc, #340]	; (1981c <Water_Level_Task+0x260>)
   196c8:	2257      	movs	r2, #87	; 0x57
   196ca:	749a      	strb	r2, [r3, #18]
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
   196cc:	4b51      	ldr	r3, [pc, #324]	; (19814 <Water_Level_Task+0x258>)
   196ce:	78db      	ldrb	r3, [r3, #3]
   196d0:	2b00      	cmp	r3, #0
   196d2:	d00b      	beq.n	196ec <Water_Level_Task+0x130>
	{
		m2mEvent_arr[0] = ME_CLEARED;
   196d4:	4b52      	ldr	r3, [pc, #328]	; (19820 <Water_Level_Task+0x264>)
   196d6:	2200      	movs	r2, #0
   196d8:	701a      	strb	r2, [r3, #0]
		m2mEvent_arr[1] = ME_CLEARED;
   196da:	4b51      	ldr	r3, [pc, #324]	; (19820 <Water_Level_Task+0x264>)
   196dc:	2200      	movs	r2, #0
   196de:	705a      	strb	r2, [r3, #1]
		
		mapTable[0] = 13;
   196e0:	4b50      	ldr	r3, [pc, #320]	; (19824 <Water_Level_Task+0x268>)
   196e2:	220d      	movs	r2, #13
   196e4:	701a      	strb	r2, [r3, #0]
		mapTable[1] = 15;
   196e6:	4b4f      	ldr	r3, [pc, #316]	; (19824 <Water_Level_Task+0x268>)
   196e8:	220f      	movs	r2, #15
   196ea:	705a      	strb	r2, [r3, #1]
	}
	
	
	for (;;)
	{
		bool result=false;
   196ec:	230c      	movs	r3, #12
   196ee:	18fb      	adds	r3, r7, r3
   196f0:	2200      	movs	r2, #0
   196f2:	701a      	strb	r2, [r3, #0]
		
		if (!(user_settings_parameter_struct.waterBypassAddress))
   196f4:	4b4c      	ldr	r3, [pc, #304]	; (19828 <Water_Level_Task+0x26c>)
   196f6:	7fdb      	ldrb	r3, [r3, #31]
   196f8:	2b00      	cmp	r3, #0
   196fa:	d000      	beq.n	196fe <Water_Level_Task+0x142>
   196fc:	e073      	b.n	197e6 <Water_Level_Task+0x22a>
		{
			uint8_t uLevel;
			uint8_t oLevel;
			uLevel = getWaterSensorState();
   196fe:	230b      	movs	r3, #11
   19700:	18fc      	adds	r4, r7, r3
   19702:	4b4a      	ldr	r3, [pc, #296]	; (1982c <Water_Level_Task+0x270>)
   19704:	4798      	blx	r3
   19706:	0003      	movs	r3, r0
   19708:	7023      	strb	r3, [r4, #0]
			
			if (factory_settings_parameter_struct.ENABLE_GP)
   1970a:	4b42      	ldr	r3, [pc, #264]	; (19814 <Water_Level_Task+0x258>)
   1970c:	791b      	ldrb	r3, [r3, #4]
   1970e:	2b00      	cmp	r3, #0
   19710:	d005      	beq.n	1971e <Water_Level_Task+0x162>
			{
				oLevel =getOverHeadWaterSensorState();
   19712:	230d      	movs	r3, #13
   19714:	18fc      	adds	r4, r7, r3
   19716:	4b46      	ldr	r3, [pc, #280]	; (19830 <Water_Level_Task+0x274>)
   19718:	4798      	blx	r3
   1971a:	0003      	movs	r3, r0
   1971c:	7023      	strb	r3, [r4, #0]
			}
			
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
   1971e:	4b3d      	ldr	r3, [pc, #244]	; (19814 <Water_Level_Task+0x258>)
   19720:	791b      	ldrb	r3, [r3, #4]
   19722:	2b01      	cmp	r3, #1
   19724:	d125      	bne.n	19772 <Water_Level_Task+0x1b6>
			((uLevel!=undergroundLevel && uLevel==tempUndergroundLevel) ||(oLevel!=overheadLevel && oLevel==tempOverheadLevel)):
   19726:	4b36      	ldr	r3, [pc, #216]	; (19800 <Water_Level_Task+0x244>)
   19728:	781b      	ldrb	r3, [r3, #0]
   1972a:	220b      	movs	r2, #11
   1972c:	18ba      	adds	r2, r7, r2
   1972e:	7812      	ldrb	r2, [r2, #0]
   19730:	429a      	cmp	r2, r3
   19732:	d006      	beq.n	19742 <Water_Level_Task+0x186>
   19734:	4b33      	ldr	r3, [pc, #204]	; (19804 <Water_Level_Task+0x248>)
   19736:	781b      	ldrb	r3, [r3, #0]
   19738:	220b      	movs	r2, #11
   1973a:	18ba      	adds	r2, r7, r2
   1973c:	7812      	ldrb	r2, [r2, #0]
   1973e:	429a      	cmp	r2, r3
   19740:	d00f      	beq.n	19762 <Water_Level_Task+0x1a6>
   19742:	4b31      	ldr	r3, [pc, #196]	; (19808 <Water_Level_Task+0x24c>)
   19744:	781b      	ldrb	r3, [r3, #0]
   19746:	b2db      	uxtb	r3, r3
   19748:	220d      	movs	r2, #13
   1974a:	18ba      	adds	r2, r7, r2
   1974c:	7812      	ldrb	r2, [r2, #0]
   1974e:	429a      	cmp	r2, r3
   19750:	d009      	beq.n	19766 <Water_Level_Task+0x1aa>
   19752:	4b2e      	ldr	r3, [pc, #184]	; (1980c <Water_Level_Task+0x250>)
   19754:	781b      	ldrb	r3, [r3, #0]
   19756:	b2db      	uxtb	r3, r3
   19758:	220d      	movs	r2, #13
   1975a:	18ba      	adds	r2, r7, r2
   1975c:	7812      	ldrb	r2, [r2, #0]
   1975e:	429a      	cmp	r2, r3
   19760:	d101      	bne.n	19766 <Water_Level_Task+0x1aa>
   19762:	2301      	movs	r3, #1
   19764:	e000      	b.n	19768 <Water_Level_Task+0x1ac>
   19766:	2300      	movs	r3, #0
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
   19768:	1c1a      	adds	r2, r3, #0
   1976a:	2301      	movs	r3, #1
   1976c:	4013      	ands	r3, r2
   1976e:	b2db      	uxtb	r3, r3
   19770:	e014      	b.n	1979c <Water_Level_Task+0x1e0>
			((uLevel!=undergroundLevel && uLevel==tempUndergroundLevel))
   19772:	4b23      	ldr	r3, [pc, #140]	; (19800 <Water_Level_Task+0x244>)
   19774:	781b      	ldrb	r3, [r3, #0]
   19776:	220b      	movs	r2, #11
   19778:	18ba      	adds	r2, r7, r2
   1977a:	7812      	ldrb	r2, [r2, #0]
   1977c:	429a      	cmp	r2, r3
   1977e:	d008      	beq.n	19792 <Water_Level_Task+0x1d6>
   19780:	4b20      	ldr	r3, [pc, #128]	; (19804 <Water_Level_Task+0x248>)
   19782:	781b      	ldrb	r3, [r3, #0]
   19784:	220b      	movs	r2, #11
   19786:	18ba      	adds	r2, r7, r2
   19788:	7812      	ldrb	r2, [r2, #0]
   1978a:	429a      	cmp	r2, r3
   1978c:	d101      	bne.n	19792 <Water_Level_Task+0x1d6>
   1978e:	2301      	movs	r3, #1
   19790:	e000      	b.n	19794 <Water_Level_Task+0x1d8>
   19792:	2300      	movs	r3, #0
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
   19794:	1c1a      	adds	r2, r3, #0
   19796:	2301      	movs	r3, #1
   19798:	4013      	ands	r3, r2
   1979a:	b2db      	uxtb	r3, r3
   1979c:	2b00      	cmp	r3, #0
   1979e:	d010      	beq.n	197c2 <Water_Level_Task+0x206>
			)
			{
				tempWaterEventCount++;
   197a0:	4b1b      	ldr	r3, [pc, #108]	; (19810 <Water_Level_Task+0x254>)
   197a2:	781b      	ldrb	r3, [r3, #0]
   197a4:	3301      	adds	r3, #1
   197a6:	b2da      	uxtb	r2, r3
   197a8:	4b19      	ldr	r3, [pc, #100]	; (19810 <Water_Level_Task+0x254>)
   197aa:	701a      	strb	r2, [r3, #0]
				if(tempWaterEventCount>9)
   197ac:	4b18      	ldr	r3, [pc, #96]	; (19810 <Water_Level_Task+0x254>)
   197ae:	781b      	ldrb	r3, [r3, #0]
   197b0:	2b09      	cmp	r3, #9
   197b2:	d909      	bls.n	197c8 <Water_Level_Task+0x20c>
				{
					operateOnWaterEvent();
   197b4:	4b1f      	ldr	r3, [pc, #124]	; (19834 <Water_Level_Task+0x278>)
   197b6:	4798      	blx	r3
					result=true;
   197b8:	230c      	movs	r3, #12
   197ba:	18fb      	adds	r3, r7, r3
   197bc:	2201      	movs	r2, #1
   197be:	701a      	strb	r2, [r3, #0]
   197c0:	e002      	b.n	197c8 <Water_Level_Task+0x20c>
				}
			}
			else
			{
				tempWaterEventCount=0;
   197c2:	4b13      	ldr	r3, [pc, #76]	; (19810 <Water_Level_Task+0x254>)
   197c4:	2200      	movs	r2, #0
   197c6:	701a      	strb	r2, [r3, #0]
			}
			tempUndergroundLevel=uLevel;
   197c8:	4b0e      	ldr	r3, [pc, #56]	; (19804 <Water_Level_Task+0x248>)
   197ca:	220b      	movs	r2, #11
   197cc:	18ba      	adds	r2, r7, r2
   197ce:	7812      	ldrb	r2, [r2, #0]
   197d0:	701a      	strb	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_GP)
   197d2:	4b10      	ldr	r3, [pc, #64]	; (19814 <Water_Level_Task+0x258>)
   197d4:	791b      	ldrb	r3, [r3, #4]
   197d6:	2b00      	cmp	r3, #0
   197d8:	d009      	beq.n	197ee <Water_Level_Task+0x232>
			{
				tempOverheadLevel=oLevel;
   197da:	4b0c      	ldr	r3, [pc, #48]	; (1980c <Water_Level_Task+0x250>)
   197dc:	220d      	movs	r2, #13
   197de:	18ba      	adds	r2, r7, r2
   197e0:	7812      	ldrb	r2, [r2, #0]
   197e2:	701a      	strb	r2, [r3, #0]
   197e4:	e003      	b.n	197ee <Water_Level_Task+0x232>
			}
		}
		else
		{
			vTaskDelay(5000/portTICK_PERIOD_MS);
   197e6:	4b14      	ldr	r3, [pc, #80]	; (19838 <Water_Level_Task+0x27c>)
   197e8:	0018      	movs	r0, r3
   197ea:	4b14      	ldr	r3, [pc, #80]	; (1983c <Water_Level_Task+0x280>)
   197ec:	4798      	blx	r3
		}
		vTaskDelay(100/portTICK_PERIOD_MS);
   197ee:	2064      	movs	r0, #100	; 0x64
   197f0:	4b12      	ldr	r3, [pc, #72]	; (1983c <Water_Level_Task+0x280>)
   197f2:	4798      	blx	r3
	{
   197f4:	e77a      	b.n	196ec <Water_Level_Task+0x130>
   197f6:	46c0      	nop			; (mov r8, r8)
   197f8:	000190cd 	.word	0x000190cd
   197fc:	00023071 	.word	0x00023071
   19800:	20000858 	.word	0x20000858
   19804:	20000769 	.word	0x20000769
   19808:	20000788 	.word	0x20000788
   1980c:	2000075a 	.word	0x2000075a
   19810:	20000784 	.word	0x20000784
   19814:	2000062c 	.word	0x2000062c
   19818:	2000070c 	.word	0x2000070c
   1981c:	200007f8 	.word	0x200007f8
   19820:	200007bc 	.word	0x200007bc
   19824:	20000738 	.word	0x20000738
   19828:	20000654 	.word	0x20000654
   1982c:	000194c9 	.word	0x000194c9
   19830:	00019399 	.word	0x00019399
   19834:	00019841 	.word	0x00019841
   19838:	00001388 	.word	0x00001388
   1983c:	0001ffe9 	.word	0x0001ffe9

00019840 <operateOnWaterEvent>:
	}
}

void operateOnWaterEvent(void)
{
   19840:	b580      	push	{r7, lr}
   19842:	b082      	sub	sp, #8
   19844:	af00      	add	r7, sp, #0
	uint8_t uLevel = tempUndergroundLevel;
   19846:	1dfb      	adds	r3, r7, #7
   19848:	4abb      	ldr	r2, [pc, #748]	; (19b38 <operateOnWaterEvent+0x2f8>)
   1984a:	7812      	ldrb	r2, [r2, #0]
   1984c:	701a      	strb	r2, [r3, #0]
	uint8_t oLevel = tempOverheadLevel;
   1984e:	1dbb      	adds	r3, r7, #6
   19850:	4aba      	ldr	r2, [pc, #744]	; (19b3c <operateOnWaterEvent+0x2fc>)
   19852:	7812      	ldrb	r2, [r2, #0]
   19854:	701a      	strb	r2, [r3, #0]
	if(uLevel == undergroundLevel)
   19856:	4bba      	ldr	r3, [pc, #744]	; (19b40 <operateOnWaterEvent+0x300>)
   19858:	781b      	ldrb	r3, [r3, #0]
   1985a:	1dfa      	adds	r2, r7, #7
   1985c:	7812      	ldrb	r2, [r2, #0]
   1985e:	429a      	cmp	r2, r3
   19860:	d10c      	bne.n	1987c <operateOnWaterEvent+0x3c>
	{
		if (factory_settings_parameter_struct.ENABLE_GP)
   19862:	4bb8      	ldr	r3, [pc, #736]	; (19b44 <operateOnWaterEvent+0x304>)
   19864:	791b      	ldrb	r3, [r3, #4]
   19866:	2b00      	cmp	r3, #0
   19868:	d000      	beq.n	1986c <operateOnWaterEvent+0x2c>
   1986a:	e15e      	b.n	19b2a <operateOnWaterEvent+0x2ea>
		{
			return;
		}
		else
		{
			if(oLevel==overheadLevel)
   1986c:	4bb6      	ldr	r3, [pc, #728]	; (19b48 <operateOnWaterEvent+0x308>)
   1986e:	781b      	ldrb	r3, [r3, #0]
   19870:	b2db      	uxtb	r3, r3
   19872:	1dba      	adds	r2, r7, #6
   19874:	7812      	ldrb	r2, [r2, #0]
   19876:	429a      	cmp	r2, r3
   19878:	d100      	bne.n	1987c <operateOnWaterEvent+0x3c>
   1987a:	e158      	b.n	19b2e <operateOnWaterEvent+0x2ee>
			{
				return;
			}
		}
	}
	if (getMotorState())
   1987c:	4bb3      	ldr	r3, [pc, #716]	; (19b4c <operateOnWaterEvent+0x30c>)
   1987e:	4798      	blx	r3
   19880:	1e03      	subs	r3, r0, #0
   19882:	d100      	bne.n	19886 <operateOnWaterEvent+0x46>
   19884:	e0c3      	b.n	19a0e <operateOnWaterEvent+0x1ce>
	{
		if ((uLevel == CRITICALLEVEL) && (undergroundLevel>CRITICALLEVEL))	//no water in well
   19886:	1dfb      	adds	r3, r7, #7
   19888:	781b      	ldrb	r3, [r3, #0]
   1988a:	2b00      	cmp	r3, #0
   1988c:	d122      	bne.n	198d4 <operateOnWaterEvent+0x94>
   1988e:	4bac      	ldr	r3, [pc, #688]	; (19b40 <operateOnWaterEvent+0x300>)
   19890:	781b      	ldrb	r3, [r3, #0]
   19892:	2b00      	cmp	r3, #0
   19894:	d01e      	beq.n	198d4 <operateOnWaterEvent+0x94>
		{
			stopMotor(false,true,false);
   19896:	2200      	movs	r2, #0
   19898:	2101      	movs	r1, #1
   1989a:	2000      	movs	r0, #0
   1989c:	4bac      	ldr	r3, [pc, #688]	; (19b50 <operateOnWaterEvent+0x310>)
   1989e:	4798      	blx	r3
			simEventTemp[12] = registerEvent('I');	//report To SIM Motor Off due to insufficient water level
   198a0:	2049      	movs	r0, #73	; 0x49
   198a2:	4bac      	ldr	r3, [pc, #688]	; (19b54 <operateOnWaterEvent+0x314>)
   198a4:	4798      	blx	r3
   198a6:	0003      	movs	r3, r0
   198a8:	001a      	movs	r2, r3
   198aa:	4bab      	ldr	r3, [pc, #684]	; (19b58 <operateOnWaterEvent+0x318>)
   198ac:	731a      	strb	r2, [r3, #12]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   198ae:	4ba5      	ldr	r3, [pc, #660]	; (19b44 <operateOnWaterEvent+0x304>)
   198b0:	78db      	ldrb	r3, [r3, #3]
   198b2:	2b00      	cmp	r3, #0
   198b4:	d100      	bne.n	198b8 <operateOnWaterEvent+0x78>
   198b6:	e071      	b.n	1999c <operateOnWaterEvent+0x15c>
			{
				if ((m2m_Numbers_struct.m2mSetting) && (undergroundLevel>LOWLEVEL))
   198b8:	4ba8      	ldr	r3, [pc, #672]	; (19b5c <operateOnWaterEvent+0x31c>)
   198ba:	795b      	ldrb	r3, [r3, #5]
   198bc:	2b00      	cmp	r3, #0
   198be:	d100      	bne.n	198c2 <operateOnWaterEvent+0x82>
   198c0:	e06c      	b.n	1999c <operateOnWaterEvent+0x15c>
   198c2:	4b9f      	ldr	r3, [pc, #636]	; (19b40 <operateOnWaterEvent+0x300>)
   198c4:	781b      	ldrb	r3, [r3, #0]
   198c6:	2b01      	cmp	r3, #1
   198c8:	d800      	bhi.n	198cc <operateOnWaterEvent+0x8c>
   198ca:	e067      	b.n	1999c <operateOnWaterEvent+0x15c>
				{
					m2mEvent_arr[0] = ME_WAITREGISTER;
   198cc:	4ba4      	ldr	r3, [pc, #656]	; (19b60 <operateOnWaterEvent+0x320>)
   198ce:	2201      	movs	r2, #1
   198d0:	701a      	strb	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   198d2:	e063      	b.n	1999c <operateOnWaterEvent+0x15c>
				}
			}
		}
		else if (uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)
   198d4:	1dfb      	adds	r3, r7, #7
   198d6:	781b      	ldrb	r3, [r3, #0]
   198d8:	2b03      	cmp	r3, #3
   198da:	d12f      	bne.n	1993c <operateOnWaterEvent+0xfc>
   198dc:	4b98      	ldr	r3, [pc, #608]	; (19b40 <operateOnWaterEvent+0x300>)
   198de:	781b      	ldrb	r3, [r3, #0]
   198e0:	2b02      	cmp	r3, #2
   198e2:	d82b      	bhi.n	1993c <operateOnWaterEvent+0xfc>
		{
			if (factory_settings_parameter_struct.ENABLE_M2M)
   198e4:	4b97      	ldr	r3, [pc, #604]	; (19b44 <operateOnWaterEvent+0x304>)
   198e6:	78db      	ldrb	r3, [r3, #3]
   198e8:	2b00      	cmp	r3, #0
   198ea:	d05a      	beq.n	199a2 <operateOnWaterEvent+0x162>
			{
				if (m2m_Numbers_struct.m2mSetting)
   198ec:	4b9b      	ldr	r3, [pc, #620]	; (19b5c <operateOnWaterEvent+0x31c>)
   198ee:	795b      	ldrb	r3, [r3, #5]
   198f0:	2b00      	cmp	r3, #0
   198f2:	d003      	beq.n	198fc <operateOnWaterEvent+0xbc>
				{
					m2mEvent_arr[1] = ME_WAITREGISTER;
   198f4:	4b9a      	ldr	r3, [pc, #616]	; (19b60 <operateOnWaterEvent+0x320>)
   198f6:	2201      	movs	r2, #1
   198f8:	705a      	strb	r2, [r3, #1]
   198fa:	e006      	b.n	1990a <operateOnWaterEvent+0xca>
				}
				else
				{
					simEventTemp[15] = registerEvent('E');	//report To SIM well is full.
   198fc:	2045      	movs	r0, #69	; 0x45
   198fe:	4b95      	ldr	r3, [pc, #596]	; (19b54 <operateOnWaterEvent+0x314>)
   19900:	4798      	blx	r3
   19902:	0003      	movs	r3, r0
   19904:	001a      	movs	r2, r3
   19906:	4b94      	ldr	r3, [pc, #592]	; (19b58 <operateOnWaterEvent+0x318>)
   19908:	73da      	strb	r2, [r3, #15]
				}
				if (user_settings_parameter_struct.preventOverFlowAddress)
   1990a:	4b96      	ldr	r3, [pc, #600]	; (19b64 <operateOnWaterEvent+0x324>)
   1990c:	7f9b      	ldrb	r3, [r3, #30]
   1990e:	2b00      	cmp	r3, #0
   19910:	d00c      	beq.n	1992c <operateOnWaterEvent+0xec>
				{
					stopMotor(false,true,false);
   19912:	2200      	movs	r2, #0
   19914:	2101      	movs	r1, #1
   19916:	2000      	movs	r0, #0
   19918:	4b8d      	ldr	r3, [pc, #564]	; (19b50 <operateOnWaterEvent+0x310>)
   1991a:	4798      	blx	r3
					simEventTemp[14] = registerEvent('H'); //report To SIM well is full, so stopped motor
   1991c:	2048      	movs	r0, #72	; 0x48
   1991e:	4b8d      	ldr	r3, [pc, #564]	; (19b54 <operateOnWaterEvent+0x314>)
   19920:	4798      	blx	r3
   19922:	0003      	movs	r3, r0
   19924:	001a      	movs	r2, r3
   19926:	4b8c      	ldr	r3, [pc, #560]	; (19b58 <operateOnWaterEvent+0x318>)
   19928:	739a      	strb	r2, [r3, #14]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   1992a:	e03a      	b.n	199a2 <operateOnWaterEvent+0x162>
				}
				else
				{
					simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
   1992c:	2045      	movs	r0, #69	; 0x45
   1992e:	4b89      	ldr	r3, [pc, #548]	; (19b54 <operateOnWaterEvent+0x314>)
   19930:	4798      	blx	r3
   19932:	0003      	movs	r3, r0
   19934:	001a      	movs	r2, r3
   19936:	4b88      	ldr	r3, [pc, #544]	; (19b58 <operateOnWaterEvent+0x318>)
   19938:	73da      	strb	r2, [r3, #15]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   1993a:	e032      	b.n	199a2 <operateOnWaterEvent+0x162>
				}
			}
		}
		else if ((uLevel==LOWLEVEL) && (undergroundLevel>LOWLEVEL))		// decrease in water level
   1993c:	1dfb      	adds	r3, r7, #7
   1993e:	781b      	ldrb	r3, [r3, #0]
   19940:	2b01      	cmp	r3, #1
   19942:	d11b      	bne.n	1997c <operateOnWaterEvent+0x13c>
   19944:	4b7e      	ldr	r3, [pc, #504]	; (19b40 <operateOnWaterEvent+0x300>)
   19946:	781b      	ldrb	r3, [r3, #0]
   19948:	2b01      	cmp	r3, #1
   1994a:	d917      	bls.n	1997c <operateOnWaterEvent+0x13c>
		{
			if (factory_settings_parameter_struct.ENABLE_M2M)
   1994c:	4b7d      	ldr	r3, [pc, #500]	; (19b44 <operateOnWaterEvent+0x304>)
   1994e:	78db      	ldrb	r3, [r3, #3]
   19950:	2b00      	cmp	r3, #0
   19952:	d007      	beq.n	19964 <operateOnWaterEvent+0x124>
			{
				if (m2m_Numbers_struct.m2mSetting)
   19954:	4b81      	ldr	r3, [pc, #516]	; (19b5c <operateOnWaterEvent+0x31c>)
   19956:	795b      	ldrb	r3, [r3, #5]
   19958:	2b00      	cmp	r3, #0
   1995a:	d021      	beq.n	199a0 <operateOnWaterEvent+0x160>
				{
					m2mEvent_arr[0] = ME_WAITREGISTER;
   1995c:	4b80      	ldr	r3, [pc, #512]	; (19b60 <operateOnWaterEvent+0x320>)
   1995e:	2201      	movs	r2, #1
   19960:	701a      	strb	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19962:	e01d      	b.n	199a0 <operateOnWaterEvent+0x160>
				}
			}
			else
			{
				if (factory_settings_parameter_struct.NOLEVELCHANGECALL)
   19964:	4b77      	ldr	r3, [pc, #476]	; (19b44 <operateOnWaterEvent+0x304>)
   19966:	79db      	ldrb	r3, [r3, #7]
   19968:	2b00      	cmp	r3, #0
   1996a:	d019      	beq.n	199a0 <operateOnWaterEvent+0x160>
				{
					simEventTemp[13] = registerEvent('D'); //report To SIM water level is decrease..
   1996c:	2044      	movs	r0, #68	; 0x44
   1996e:	4b79      	ldr	r3, [pc, #484]	; (19b54 <operateOnWaterEvent+0x314>)
   19970:	4798      	blx	r3
   19972:	0003      	movs	r3, r0
   19974:	001a      	movs	r2, r3
   19976:	4b78      	ldr	r3, [pc, #480]	; (19b58 <operateOnWaterEvent+0x318>)
   19978:	735a      	strb	r2, [r3, #13]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   1997a:	e011      	b.n	199a0 <operateOnWaterEvent+0x160>
				}
			}
		}
		else if (uLevel==MIDLEVEL && undergroundLevel<MIDLEVEL)		// increase in water level
   1997c:	1dfb      	adds	r3, r7, #7
   1997e:	781b      	ldrb	r3, [r3, #0]
   19980:	2b02      	cmp	r3, #2
   19982:	d10e      	bne.n	199a2 <operateOnWaterEvent+0x162>
   19984:	4b6e      	ldr	r3, [pc, #440]	; (19b40 <operateOnWaterEvent+0x300>)
   19986:	781b      	ldrb	r3, [r3, #0]
   19988:	2b01      	cmp	r3, #1
   1998a:	d80a      	bhi.n	199a2 <operateOnWaterEvent+0x162>
		{
			simEventTemp[16] = registerEvent('Z'); //report To SIM water level is increasing..
   1998c:	205a      	movs	r0, #90	; 0x5a
   1998e:	4b71      	ldr	r3, [pc, #452]	; (19b54 <operateOnWaterEvent+0x314>)
   19990:	4798      	blx	r3
   19992:	0003      	movs	r3, r0
   19994:	001a      	movs	r2, r3
   19996:	4b70      	ldr	r3, [pc, #448]	; (19b58 <operateOnWaterEvent+0x318>)
   19998:	741a      	strb	r2, [r3, #16]
   1999a:	e002      	b.n	199a2 <operateOnWaterEvent+0x162>
			if (factory_settings_parameter_struct.ENABLE_M2M)
   1999c:	46c0      	nop			; (mov r8, r8)
   1999e:	e000      	b.n	199a2 <operateOnWaterEvent+0x162>
			if (factory_settings_parameter_struct.ENABLE_M2M)
   199a0:	46c0      	nop			; (mov r8, r8)
		}
		if (factory_settings_parameter_struct.ENABLE_GP)
   199a2:	4b68      	ldr	r3, [pc, #416]	; (19b44 <operateOnWaterEvent+0x304>)
   199a4:	791b      	ldrb	r3, [r3, #4]
   199a6:	2b00      	cmp	r3, #0
   199a8:	d100      	bne.n	199ac <operateOnWaterEvent+0x16c>
   199aa:	e0af      	b.n	19b0c <operateOnWaterEvent+0x2cc>
		{
			if(oLevel!=overheadLevel)
   199ac:	4b66      	ldr	r3, [pc, #408]	; (19b48 <operateOnWaterEvent+0x308>)
   199ae:	781b      	ldrb	r3, [r3, #0]
   199b0:	b2db      	uxtb	r3, r3
   199b2:	1dba      	adds	r2, r7, #6
   199b4:	7812      	ldrb	r2, [r2, #0]
   199b6:	429a      	cmp	r2, r3
   199b8:	d100      	bne.n	199bc <operateOnWaterEvent+0x17c>
   199ba:	e0a7      	b.n	19b0c <operateOnWaterEvent+0x2cc>
			{
				if(oLevel==OVERHEADHIGHLEVEL && overheadLevel<OVERHEADHIGHLEVEL)		////overhead tank is full
   199bc:	1dbb      	adds	r3, r7, #6
   199be:	781b      	ldrb	r3, [r3, #0]
   199c0:	2b02      	cmp	r3, #2
   199c2:	d111      	bne.n	199e8 <operateOnWaterEvent+0x1a8>
   199c4:	4b60      	ldr	r3, [pc, #384]	; (19b48 <operateOnWaterEvent+0x308>)
   199c6:	781b      	ldrb	r3, [r3, #0]
   199c8:	b2db      	uxtb	r3, r3
   199ca:	2b01      	cmp	r3, #1
   199cc:	d80c      	bhi.n	199e8 <operateOnWaterEvent+0x1a8>
				{
					stopMotor(false,true,false);
   199ce:	2200      	movs	r2, #0
   199d0:	2101      	movs	r1, #1
   199d2:	2000      	movs	r0, #0
   199d4:	4b5e      	ldr	r3, [pc, #376]	; (19b50 <operateOnWaterEvent+0x310>)
   199d6:	4798      	blx	r3
					simEventTemp[17] = registerEvent('V'); //report To SIM Motor Off due to overhead tank full
   199d8:	2056      	movs	r0, #86	; 0x56
   199da:	4b5e      	ldr	r3, [pc, #376]	; (19b54 <operateOnWaterEvent+0x314>)
   199dc:	4798      	blx	r3
   199de:	0003      	movs	r3, r0
   199e0:	001a      	movs	r2, r3
   199e2:	4b5d      	ldr	r3, [pc, #372]	; (19b58 <operateOnWaterEvent+0x318>)
   199e4:	745a      	strb	r2, [r3, #17]
   199e6:	e091      	b.n	19b0c <operateOnWaterEvent+0x2cc>
				}
				else if (oLevel==OVERHEADCRITICALLEVEL && overheadLevel>OVERHEADCRITICALLEVEL)	// overhead tank empty.
   199e8:	1dbb      	adds	r3, r7, #6
   199ea:	781b      	ldrb	r3, [r3, #0]
   199ec:	2b00      	cmp	r3, #0
   199ee:	d000      	beq.n	199f2 <operateOnWaterEvent+0x1b2>
   199f0:	e08c      	b.n	19b0c <operateOnWaterEvent+0x2cc>
   199f2:	4b55      	ldr	r3, [pc, #340]	; (19b48 <operateOnWaterEvent+0x308>)
   199f4:	781b      	ldrb	r3, [r3, #0]
   199f6:	b2db      	uxtb	r3, r3
   199f8:	2b00      	cmp	r3, #0
   199fa:	d100      	bne.n	199fe <operateOnWaterEvent+0x1be>
   199fc:	e086      	b.n	19b0c <operateOnWaterEvent+0x2cc>
				{
					simEventTemp[18] = registerEvent('W'); //report To SIM , overhead tank empty.
   199fe:	2057      	movs	r0, #87	; 0x57
   19a00:	4b54      	ldr	r3, [pc, #336]	; (19b54 <operateOnWaterEvent+0x314>)
   19a02:	4798      	blx	r3
   19a04:	0003      	movs	r3, r0
   19a06:	001a      	movs	r2, r3
   19a08:	4b53      	ldr	r3, [pc, #332]	; (19b58 <operateOnWaterEvent+0x318>)
   19a0a:	749a      	strb	r2, [r3, #18]
   19a0c:	e07e      	b.n	19b0c <operateOnWaterEvent+0x2cc>
			}
		}
	}
	else
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   19a0e:	4b4d      	ldr	r3, [pc, #308]	; (19b44 <operateOnWaterEvent+0x304>)
   19a10:	78db      	ldrb	r3, [r3, #3]
   19a12:	2b00      	cmp	r3, #0
   19a14:	d027      	beq.n	19a66 <operateOnWaterEvent+0x226>
		{
			if(m2m_Numbers_struct.m2mSetting && uLevel<MIDLEVEL && undergroundLevel>=MIDLEVEL)	//level is decreased
   19a16:	4b51      	ldr	r3, [pc, #324]	; (19b5c <operateOnWaterEvent+0x31c>)
   19a18:	795b      	ldrb	r3, [r3, #5]
   19a1a:	2b00      	cmp	r3, #0
   19a1c:	d00b      	beq.n	19a36 <operateOnWaterEvent+0x1f6>
   19a1e:	1dfb      	adds	r3, r7, #7
   19a20:	781b      	ldrb	r3, [r3, #0]
   19a22:	2b01      	cmp	r3, #1
   19a24:	d807      	bhi.n	19a36 <operateOnWaterEvent+0x1f6>
   19a26:	4b46      	ldr	r3, [pc, #280]	; (19b40 <operateOnWaterEvent+0x300>)
   19a28:	781b      	ldrb	r3, [r3, #0]
   19a2a:	2b01      	cmp	r3, #1
   19a2c:	d903      	bls.n	19a36 <operateOnWaterEvent+0x1f6>
			{
				m2mEvent_arr[0] = ME_WAITREGISTER;
   19a2e:	4b4c      	ldr	r3, [pc, #304]	; (19b60 <operateOnWaterEvent+0x320>)
   19a30:	2201      	movs	r2, #1
   19a32:	701a      	strb	r2, [r3, #0]
   19a34:	e04b      	b.n	19ace <operateOnWaterEvent+0x28e>
			}
			else if (uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)			//well is full
   19a36:	1dfb      	adds	r3, r7, #7
   19a38:	781b      	ldrb	r3, [r3, #0]
   19a3a:	2b03      	cmp	r3, #3
   19a3c:	d147      	bne.n	19ace <operateOnWaterEvent+0x28e>
   19a3e:	4b40      	ldr	r3, [pc, #256]	; (19b40 <operateOnWaterEvent+0x300>)
   19a40:	781b      	ldrb	r3, [r3, #0]
   19a42:	2b02      	cmp	r3, #2
   19a44:	d843      	bhi.n	19ace <operateOnWaterEvent+0x28e>
			{
				if(m2m_Numbers_struct.m2mSetting)
   19a46:	4b45      	ldr	r3, [pc, #276]	; (19b5c <operateOnWaterEvent+0x31c>)
   19a48:	795b      	ldrb	r3, [r3, #5]
   19a4a:	2b00      	cmp	r3, #0
   19a4c:	d003      	beq.n	19a56 <operateOnWaterEvent+0x216>
				{
					m2mEvent_arr[1] = ME_WAITREGISTER;
   19a4e:	4b44      	ldr	r3, [pc, #272]	; (19b60 <operateOnWaterEvent+0x320>)
   19a50:	2201      	movs	r2, #1
   19a52:	705a      	strb	r2, [r3, #1]
   19a54:	e03b      	b.n	19ace <operateOnWaterEvent+0x28e>
				}
				else
				{
					simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
   19a56:	2045      	movs	r0, #69	; 0x45
   19a58:	4b3e      	ldr	r3, [pc, #248]	; (19b54 <operateOnWaterEvent+0x314>)
   19a5a:	4798      	blx	r3
   19a5c:	0003      	movs	r3, r0
   19a5e:	001a      	movs	r2, r3
   19a60:	4b3d      	ldr	r3, [pc, #244]	; (19b58 <operateOnWaterEvent+0x318>)
   19a62:	73da      	strb	r2, [r3, #15]
   19a64:	e033      	b.n	19ace <operateOnWaterEvent+0x28e>
				}
			}
		}
		else if(uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)		//well is full
   19a66:	1dfb      	adds	r3, r7, #7
   19a68:	781b      	ldrb	r3, [r3, #0]
   19a6a:	2b03      	cmp	r3, #3
   19a6c:	d10b      	bne.n	19a86 <operateOnWaterEvent+0x246>
   19a6e:	4b34      	ldr	r3, [pc, #208]	; (19b40 <operateOnWaterEvent+0x300>)
   19a70:	781b      	ldrb	r3, [r3, #0]
   19a72:	2b02      	cmp	r3, #2
   19a74:	d807      	bhi.n	19a86 <operateOnWaterEvent+0x246>
		{
			simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
   19a76:	2045      	movs	r0, #69	; 0x45
   19a78:	4b36      	ldr	r3, [pc, #216]	; (19b54 <operateOnWaterEvent+0x314>)
   19a7a:	4798      	blx	r3
   19a7c:	0003      	movs	r3, r0
   19a7e:	001a      	movs	r2, r3
   19a80:	4b35      	ldr	r3, [pc, #212]	; (19b58 <operateOnWaterEvent+0x318>)
   19a82:	73da      	strb	r2, [r3, #15]
   19a84:	e023      	b.n	19ace <operateOnWaterEvent+0x28e>
		}
		else if (uLevel==MIDLEVEL && undergroundLevel<MIDLEVEL)		// underground level is increasing
   19a86:	1dfb      	adds	r3, r7, #7
   19a88:	781b      	ldrb	r3, [r3, #0]
   19a8a:	2b02      	cmp	r3, #2
   19a8c:	d11f      	bne.n	19ace <operateOnWaterEvent+0x28e>
   19a8e:	4b2c      	ldr	r3, [pc, #176]	; (19b40 <operateOnWaterEvent+0x300>)
   19a90:	781b      	ldrb	r3, [r3, #0]
   19a92:	2b01      	cmp	r3, #1
   19a94:	d81b      	bhi.n	19ace <operateOnWaterEvent+0x28e>
		{
			if (factory_settings_parameter_struct.ENABLE_GP)
   19a96:	4b2b      	ldr	r3, [pc, #172]	; (19b44 <operateOnWaterEvent+0x304>)
   19a98:	791b      	ldrb	r3, [r3, #4]
   19a9a:	2b00      	cmp	r3, #0
   19a9c:	d00d      	beq.n	19aba <operateOnWaterEvent+0x27a>
			{
				if (factory_settings_parameter_struct.DUAL_LEVEL)
   19a9e:	4b29      	ldr	r3, [pc, #164]	; (19b44 <operateOnWaterEvent+0x304>)
   19aa0:	799b      	ldrb	r3, [r3, #6]
   19aa2:	2b00      	cmp	r3, #0
   19aa4:	d009      	beq.n	19aba <operateOnWaterEvent+0x27a>
				{
					if(oLevel<OVERHEADHIGHLEVEL)
   19aa6:	1dbb      	adds	r3, r7, #6
   19aa8:	781b      	ldrb	r3, [r3, #0]
   19aaa:	2b01      	cmp	r3, #1
   19aac:	d805      	bhi.n	19aba <operateOnWaterEvent+0x27a>
					{
						if(user_settings_parameter_struct.autoStartAddress)			//autoStart is ON
   19aae:	4b2d      	ldr	r3, [pc, #180]	; (19b64 <operateOnWaterEvent+0x324>)
   19ab0:	785b      	ldrb	r3, [r3, #1]
   19ab2:	2b00      	cmp	r3, #0
   19ab4:	d001      	beq.n	19aba <operateOnWaterEvent+0x27a>
						{
							triggerAutoStart();
   19ab6:	4b2c      	ldr	r3, [pc, #176]	; (19b68 <operateOnWaterEvent+0x328>)
   19ab8:	4798      	blx	r3
						}
					}
				}
			}
			if (factory_settings_parameter_struct.DUAL_LEVEL)
   19aba:	4b22      	ldr	r3, [pc, #136]	; (19b44 <operateOnWaterEvent+0x304>)
   19abc:	799b      	ldrb	r3, [r3, #6]
   19abe:	2b00      	cmp	r3, #0
   19ac0:	d005      	beq.n	19ace <operateOnWaterEvent+0x28e>
			{
				if(user_settings_parameter_struct.autoStartAddress)			//autoStart is ON
   19ac2:	4b28      	ldr	r3, [pc, #160]	; (19b64 <operateOnWaterEvent+0x324>)
   19ac4:	785b      	ldrb	r3, [r3, #1]
   19ac6:	2b00      	cmp	r3, #0
   19ac8:	d001      	beq.n	19ace <operateOnWaterEvent+0x28e>
				{
					triggerAutoStart();
   19aca:	4b27      	ldr	r3, [pc, #156]	; (19b68 <operateOnWaterEvent+0x328>)
   19acc:	4798      	blx	r3
				}
			}
		}
		if (factory_settings_parameter_struct.ENABLE_GP)
   19ace:	4b1d      	ldr	r3, [pc, #116]	; (19b44 <operateOnWaterEvent+0x304>)
   19ad0:	791b      	ldrb	r3, [r3, #4]
   19ad2:	2b00      	cmp	r3, #0
   19ad4:	d01a      	beq.n	19b0c <operateOnWaterEvent+0x2cc>
		{
			if (oLevel==OVERHEADCRITICALLEVEL && overheadLevel>OVERHEADCRITICALLEVEL && uLevel>CRITICALLEVEL) // overhead tank is empty, and underground not low
   19ad6:	1dbb      	adds	r3, r7, #6
   19ad8:	781b      	ldrb	r3, [r3, #0]
   19ada:	2b00      	cmp	r3, #0
   19adc:	d116      	bne.n	19b0c <operateOnWaterEvent+0x2cc>
   19ade:	4b1a      	ldr	r3, [pc, #104]	; (19b48 <operateOnWaterEvent+0x308>)
   19ae0:	781b      	ldrb	r3, [r3, #0]
   19ae2:	b2db      	uxtb	r3, r3
   19ae4:	2b00      	cmp	r3, #0
   19ae6:	d011      	beq.n	19b0c <operateOnWaterEvent+0x2cc>
   19ae8:	1dfb      	adds	r3, r7, #7
   19aea:	781b      	ldrb	r3, [r3, #0]
   19aec:	2b00      	cmp	r3, #0
   19aee:	d00d      	beq.n	19b0c <operateOnWaterEvent+0x2cc>
			{
				if(user_settings_parameter_struct.autoStartAddress)		//autoStart is ON
   19af0:	4b1c      	ldr	r3, [pc, #112]	; (19b64 <operateOnWaterEvent+0x324>)
   19af2:	785b      	ldrb	r3, [r3, #1]
   19af4:	2b00      	cmp	r3, #0
   19af6:	d002      	beq.n	19afe <operateOnWaterEvent+0x2be>
				{
					triggerAutoStart();
   19af8:	4b1b      	ldr	r3, [pc, #108]	; (19b68 <operateOnWaterEvent+0x328>)
   19afa:	4798      	blx	r3
   19afc:	e006      	b.n	19b0c <operateOnWaterEvent+0x2cc>
				}
				else
				{
					simEventTemp[18] = registerEvent('W'); //report To SIM overhead tank is empty.
   19afe:	2057      	movs	r0, #87	; 0x57
   19b00:	4b14      	ldr	r3, [pc, #80]	; (19b54 <operateOnWaterEvent+0x314>)
   19b02:	4798      	blx	r3
   19b04:	0003      	movs	r3, r0
   19b06:	001a      	movs	r2, r3
   19b08:	4b13      	ldr	r3, [pc, #76]	; (19b58 <operateOnWaterEvent+0x318>)
   19b0a:	749a      	strb	r2, [r3, #18]
				}
			}
		}
	}
	if (factory_settings_parameter_struct.ENABLE_GP)
   19b0c:	4b0d      	ldr	r3, [pc, #52]	; (19b44 <operateOnWaterEvent+0x304>)
   19b0e:	791b      	ldrb	r3, [r3, #4]
   19b10:	2b00      	cmp	r3, #0
   19b12:	d004      	beq.n	19b1e <operateOnWaterEvent+0x2de>
	{
		updateOverheadLevel(oLevel);
   19b14:	1dbb      	adds	r3, r7, #6
   19b16:	781b      	ldrb	r3, [r3, #0]
   19b18:	0018      	movs	r0, r3
   19b1a:	4b14      	ldr	r3, [pc, #80]	; (19b6c <operateOnWaterEvent+0x32c>)
   19b1c:	4798      	blx	r3
	}
	updateUndergroundLevel(uLevel);
   19b1e:	1dfb      	adds	r3, r7, #7
   19b20:	781b      	ldrb	r3, [r3, #0]
   19b22:	0018      	movs	r0, r3
   19b24:	4b12      	ldr	r3, [pc, #72]	; (19b70 <operateOnWaterEvent+0x330>)
   19b26:	4798      	blx	r3
   19b28:	e002      	b.n	19b30 <operateOnWaterEvent+0x2f0>
			return;
   19b2a:	46c0      	nop			; (mov r8, r8)
   19b2c:	e000      	b.n	19b30 <operateOnWaterEvent+0x2f0>
				return;
   19b2e:	46c0      	nop			; (mov r8, r8)
}
   19b30:	46bd      	mov	sp, r7
   19b32:	b002      	add	sp, #8
   19b34:	bd80      	pop	{r7, pc}
   19b36:	46c0      	nop			; (mov r8, r8)
   19b38:	20000769 	.word	0x20000769
   19b3c:	2000075a 	.word	0x2000075a
   19b40:	20000858 	.word	0x20000858
   19b44:	2000062c 	.word	0x2000062c
   19b48:	20000788 	.word	0x20000788
   19b4c:	0001ac9d 	.word	0x0001ac9d
   19b50:	0001b56d 	.word	0x0001b56d
   19b54:	0001492d 	.word	0x0001492d
   19b58:	2000070c 	.word	0x2000070c
   19b5c:	20000554 	.word	0x20000554
   19b60:	200007bc 	.word	0x200007bc
   19b64:	20000654 	.word	0x20000654
   19b68:	0001aff1 	.word	0x0001aff1
   19b6c:	00019379 	.word	0x00019379
   19b70:	000194a9 	.word	0x000194a9

00019b74 <Configure_ADC0>:

void Configure_ADC0(void)
{
   19b74:	b580      	push	{r7, lr}
   19b76:	b08c      	sub	sp, #48	; 0x30
   19b78:	af00      	add	r7, sp, #0
	struct adc_config config;
	adc_get_config_defaults(&config);
   19b7a:	003b      	movs	r3, r7
   19b7c:	0018      	movs	r0, r3
   19b7e:	4b1a      	ldr	r3, [pc, #104]	; (19be8 <Configure_ADC0+0x74>)
   19b80:	4798      	blx	r3
	config.positive_input = ADC_POSITIVE_INPUT_PIN19;
   19b82:	003b      	movs	r3, r7
   19b84:	2213      	movs	r2, #19
   19b86:	731a      	strb	r2, [r3, #12]
	config.negative_input = ADC_NEGATIVE_INPUT_GND;
   19b88:	003b      	movs	r3, r7
   19b8a:	22c0      	movs	r2, #192	; 0xc0
   19b8c:	0152      	lsls	r2, r2, #5
   19b8e:	81da      	strh	r2, [r3, #14]
	config.reference      = ADC_REFERENCE_AREFA;//ADC_REFERENCE_INT1V;
   19b90:	003b      	movs	r3, r7
   19b92:	2203      	movs	r2, #3
   19b94:	705a      	strb	r2, [r3, #1]
	config.clock_source   = GCLK_GENERATOR_3;
   19b96:	003b      	movs	r3, r7
   19b98:	2203      	movs	r2, #3
   19b9a:	701a      	strb	r2, [r3, #0]
	config.gain_factor    = ADC_GAIN_FACTOR_1X;
   19b9c:	003b      	movs	r3, r7
   19b9e:	2200      	movs	r2, #0
   19ba0:	609a      	str	r2, [r3, #8]
	config.resolution	= ADC_RESOLUTION_12BIT;
   19ba2:	003b      	movs	r3, r7
   19ba4:	2200      	movs	r2, #0
   19ba6:	711a      	strb	r2, [r3, #4]
	
	config.clock_prescaler = ADC_CLOCK_PRESCALER_DIV64; //125kHz adc clock (8MHz/64)
   19ba8:	003b      	movs	r3, r7
   19baa:	2280      	movs	r2, #128	; 0x80
   19bac:	00d2      	lsls	r2, r2, #3
   19bae:	805a      	strh	r2, [r3, #2]
	
	config.run_in_standby = true;
   19bb0:	003b      	movs	r3, r7
   19bb2:	2201      	movs	r2, #1
   19bb4:	755a      	strb	r2, [r3, #21]
	
	adc_init(&adc_inst, ADC, &config);// Initialize the ADC
   19bb6:	003a      	movs	r2, r7
   19bb8:	490c      	ldr	r1, [pc, #48]	; (19bec <Configure_ADC0+0x78>)
   19bba:	4b0d      	ldr	r3, [pc, #52]	; (19bf0 <Configure_ADC0+0x7c>)
   19bbc:	0018      	movs	r0, r3
   19bbe:	4b0d      	ldr	r3, [pc, #52]	; (19bf4 <Configure_ADC0+0x80>)
   19bc0:	4798      	blx	r3
	
	/************************************************************************/
	/*ADC Callback Setup                                                    */
	adc_register_callback(&adc_inst, adc_buffer_complete_callback, ADC_CALLBACK_READ_BUFFER);
   19bc2:	490d      	ldr	r1, [pc, #52]	; (19bf8 <Configure_ADC0+0x84>)
   19bc4:	4b0a      	ldr	r3, [pc, #40]	; (19bf0 <Configure_ADC0+0x7c>)
   19bc6:	2200      	movs	r2, #0
   19bc8:	0018      	movs	r0, r3
   19bca:	4b0c      	ldr	r3, [pc, #48]	; (19bfc <Configure_ADC0+0x88>)
   19bcc:	4798      	blx	r3
	adc_enable_callback(&adc_inst, ADC_CALLBACK_READ_BUFFER);
   19bce:	4b08      	ldr	r3, [pc, #32]	; (19bf0 <Configure_ADC0+0x7c>)
   19bd0:	2100      	movs	r1, #0
   19bd2:	0018      	movs	r0, r3
   19bd4:	4b0a      	ldr	r3, [pc, #40]	; (19c00 <Configure_ADC0+0x8c>)
   19bd6:	4798      	blx	r3
	/************************************************************************/
	
	adc_enable(&adc_inst);
   19bd8:	4b05      	ldr	r3, [pc, #20]	; (19bf0 <Configure_ADC0+0x7c>)
   19bda:	0018      	movs	r0, r3
   19bdc:	4b09      	ldr	r3, [pc, #36]	; (19c04 <Configure_ADC0+0x90>)
   19bde:	4798      	blx	r3
}
   19be0:	46c0      	nop			; (mov r8, r8)
   19be2:	46bd      	mov	sp, r7
   19be4:	b00c      	add	sp, #48	; 0x30
   19be6:	bd80      	pop	{r7, pc}
   19be8:	0001d0c5 	.word	0x0001d0c5
   19bec:	42004000 	.word	0x42004000
   19bf0:	2000081c 	.word	0x2000081c
   19bf4:	0001d715 	.word	0x0001d715
   19bf8:	00019c09 	.word	0x00019c09
   19bfc:	0001da15 	.word	0x0001da15
   19c00:	0001904d 	.word	0x0001904d
   19c04:	00018eb5 	.word	0x00018eb5

00019c08 <adc_buffer_complete_callback>:

void adc_buffer_complete_callback(const struct adc_module *const module)
{
   19c08:	b580      	push	{r7, lr}
   19c0a:	b082      	sub	sp, #8
   19c0c:	af00      	add	r7, sp, #0
   19c0e:	6078      	str	r0, [r7, #4]
	adc_read_buffer_done = true;
   19c10:	4b06      	ldr	r3, [pc, #24]	; (19c2c <adc_buffer_complete_callback+0x24>)
   19c12:	2201      	movs	r2, #1
   19c14:	701a      	strb	r2, [r3, #0]
	vTaskNotifyGiveFromISR(motorTask,NULL);
   19c16:	4b06      	ldr	r3, [pc, #24]	; (19c30 <adc_buffer_complete_callback+0x28>)
   19c18:	681b      	ldr	r3, [r3, #0]
   19c1a:	2100      	movs	r1, #0
   19c1c:	0018      	movs	r0, r3
   19c1e:	4b05      	ldr	r3, [pc, #20]	; (19c34 <adc_buffer_complete_callback+0x2c>)
   19c20:	4798      	blx	r3
}
   19c22:	46c0      	nop			; (mov r8, r8)
   19c24:	46bd      	mov	sp, r7
   19c26:	b002      	add	sp, #8
   19c28:	bd80      	pop	{r7, pc}
   19c2a:	46c0      	nop			; (mov r8, r8)
   19c2c:	2000073d 	.word	0x2000073d
   19c30:	20000240 	.word	0x20000240
   19c34:	00020cf5 	.word	0x00020cf5

00019c38 <Read_ADC0>:

uint32_t Read_ADC0(uint32_t adc_pin,uint16_t samples)
{
   19c38:	b580      	push	{r7, lr}
   19c3a:	b084      	sub	sp, #16
   19c3c:	af00      	add	r7, sp, #0
   19c3e:	6078      	str	r0, [r7, #4]
   19c40:	000a      	movs	r2, r1
   19c42:	1cbb      	adds	r3, r7, #2
   19c44:	801a      	strh	r2, [r3, #0]
	adc_set_positive_input(&adc_inst, adc_pin);
   19c46:	687b      	ldr	r3, [r7, #4]
   19c48:	b2da      	uxtb	r2, r3
   19c4a:	4b24      	ldr	r3, [pc, #144]	; (19cdc <Read_ADC0+0xa4>)
   19c4c:	0011      	movs	r1, r2
   19c4e:	0018      	movs	r0, r3
   19c50:	4b23      	ldr	r3, [pc, #140]	; (19ce0 <Read_ADC0+0xa8>)
   19c52:	4798      	blx	r3
	uint16_t current_value = 0;
   19c54:	2308      	movs	r3, #8
   19c56:	18fb      	adds	r3, r7, r3
   19c58:	2200      	movs	r2, #0
   19c5a:	801a      	strh	r2, [r3, #0]
	uint32_t total_value = 0;
   19c5c:	2300      	movs	r3, #0
   19c5e:	60fb      	str	r3, [r7, #12]
	for (uint16_t uintLoop=0;uintLoop<samples;uintLoop++)
   19c60:	230a      	movs	r3, #10
   19c62:	18fb      	adds	r3, r7, r3
   19c64:	2200      	movs	r2, #0
   19c66:	801a      	strh	r2, [r3, #0]
   19c68:	e026      	b.n	19cb8 <Read_ADC0+0x80>
	{
		current_value = 0;
   19c6a:	2308      	movs	r3, #8
   19c6c:	18fb      	adds	r3, r7, r3
   19c6e:	2200      	movs	r2, #0
   19c70:	801a      	strh	r2, [r3, #0]
		adc_start_conversion(&adc_inst);
   19c72:	4b1a      	ldr	r3, [pc, #104]	; (19cdc <Read_ADC0+0xa4>)
   19c74:	0018      	movs	r0, r3
   19c76:	4b1b      	ldr	r3, [pc, #108]	; (19ce4 <Read_ADC0+0xac>)
   19c78:	4798      	blx	r3
		while((adc_get_status(&adc_inst) & ADC_STATUS_RESULT_READY) != 1);
   19c7a:	46c0      	nop			; (mov r8, r8)
   19c7c:	4b17      	ldr	r3, [pc, #92]	; (19cdc <Read_ADC0+0xa4>)
   19c7e:	0018      	movs	r0, r3
   19c80:	4b19      	ldr	r3, [pc, #100]	; (19ce8 <Read_ADC0+0xb0>)
   19c82:	4798      	blx	r3
   19c84:	0002      	movs	r2, r0
   19c86:	2301      	movs	r3, #1
   19c88:	4013      	ands	r3, r2
   19c8a:	2b01      	cmp	r3, #1
   19c8c:	d1f6      	bne.n	19c7c <Read_ADC0+0x44>
		adc_read(&adc_inst, &current_value);
   19c8e:	2308      	movs	r3, #8
   19c90:	18fa      	adds	r2, r7, r3
   19c92:	4b12      	ldr	r3, [pc, #72]	; (19cdc <Read_ADC0+0xa4>)
   19c94:	0011      	movs	r1, r2
   19c96:	0018      	movs	r0, r3
   19c98:	4b14      	ldr	r3, [pc, #80]	; (19cec <Read_ADC0+0xb4>)
   19c9a:	4798      	blx	r3
		total_value+=current_value;
   19c9c:	2308      	movs	r3, #8
   19c9e:	18fb      	adds	r3, r7, r3
   19ca0:	881b      	ldrh	r3, [r3, #0]
   19ca2:	001a      	movs	r2, r3
   19ca4:	68fb      	ldr	r3, [r7, #12]
   19ca6:	189b      	adds	r3, r3, r2
   19ca8:	60fb      	str	r3, [r7, #12]
	for (uint16_t uintLoop=0;uintLoop<samples;uintLoop++)
   19caa:	230a      	movs	r3, #10
   19cac:	18fb      	adds	r3, r7, r3
   19cae:	881a      	ldrh	r2, [r3, #0]
   19cb0:	230a      	movs	r3, #10
   19cb2:	18fb      	adds	r3, r7, r3
   19cb4:	3201      	adds	r2, #1
   19cb6:	801a      	strh	r2, [r3, #0]
   19cb8:	230a      	movs	r3, #10
   19cba:	18fa      	adds	r2, r7, r3
   19cbc:	1cbb      	adds	r3, r7, #2
   19cbe:	8812      	ldrh	r2, [r2, #0]
   19cc0:	881b      	ldrh	r3, [r3, #0]
   19cc2:	429a      	cmp	r2, r3
   19cc4:	d3d1      	bcc.n	19c6a <Read_ADC0+0x32>
	}
	
	return (total_value/samples);
   19cc6:	1cbb      	adds	r3, r7, #2
   19cc8:	881a      	ldrh	r2, [r3, #0]
   19cca:	4b09      	ldr	r3, [pc, #36]	; (19cf0 <Read_ADC0+0xb8>)
   19ccc:	0011      	movs	r1, r2
   19cce:	68f8      	ldr	r0, [r7, #12]
   19cd0:	4798      	blx	r3
   19cd2:	0003      	movs	r3, r0
}
   19cd4:	0018      	movs	r0, r3
   19cd6:	46bd      	mov	sp, r7
   19cd8:	b004      	add	sp, #16
   19cda:	bd80      	pop	{r7, pc}
   19cdc:	2000081c 	.word	0x2000081c
   19ce0:	00018fd9 	.word	0x00018fd9
   19ce4:	00018f15 	.word	0x00018f15
   19ce8:	00018e0d 	.word	0x00018e0d
   19cec:	00018f5d 	.word	0x00018f5d
   19cf0:	000265fd 	.word	0x000265fd

00019cf4 <Read_Voltage_ADC0>:


uint32_t Read_Voltage_ADC0(uint32_t adc_pin)
{
   19cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
   19cf6:	b099      	sub	sp, #100	; 0x64
   19cf8:	af00      	add	r7, sp, #0
   19cfa:	6378      	str	r0, [r7, #52]	; 0x34
   19cfc:	466b      	mov	r3, sp
   19cfe:	633b      	str	r3, [r7, #48]	; 0x30
	delay_ms(5);
   19d00:	2000      	movs	r0, #0
   19d02:	4ba3      	ldr	r3, [pc, #652]	; (19f90 <Read_Voltage_ADC0+0x29c>)
   19d04:	4798      	blx	r3
   19d06:	0003      	movs	r3, r0
   19d08:	61bb      	str	r3, [r7, #24]
   19d0a:	2300      	movs	r3, #0
   19d0c:	61fb      	str	r3, [r7, #28]
   19d0e:	69b8      	ldr	r0, [r7, #24]
   19d10:	69f9      	ldr	r1, [r7, #28]
   19d12:	0003      	movs	r3, r0
   19d14:	000c      	movs	r4, r1
   19d16:	0f9a      	lsrs	r2, r3, #30
   19d18:	00a6      	lsls	r6, r4, #2
   19d1a:	4316      	orrs	r6, r2
   19d1c:	009d      	lsls	r5, r3, #2
   19d1e:	000a      	movs	r2, r1
   19d20:	0001      	movs	r1, r0
   19d22:	1949      	adds	r1, r1, r5
   19d24:	4172      	adcs	r2, r6
   19d26:	4b9b      	ldr	r3, [pc, #620]	; (19f94 <Read_Voltage_ADC0+0x2a0>)
   19d28:	2400      	movs	r4, #0
   19d2a:	18c9      	adds	r1, r1, r3
   19d2c:	4162      	adcs	r2, r4
   19d2e:	0008      	movs	r0, r1
   19d30:	0011      	movs	r1, r2
   19d32:	4c99      	ldr	r4, [pc, #612]	; (19f98 <Read_Voltage_ADC0+0x2a4>)
   19d34:	4a99      	ldr	r2, [pc, #612]	; (19f9c <Read_Voltage_ADC0+0x2a8>)
   19d36:	2300      	movs	r3, #0
   19d38:	47a0      	blx	r4
   19d3a:	0003      	movs	r3, r0
   19d3c:	000c      	movs	r4, r1
   19d3e:	0018      	movs	r0, r3
   19d40:	4b97      	ldr	r3, [pc, #604]	; (19fa0 <Read_Voltage_ADC0+0x2ac>)
   19d42:	4798      	blx	r3
	
	adc_set_positive_input(&adc_inst, adc_pin);
   19d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   19d46:	b2db      	uxtb	r3, r3
   19d48:	4a96      	ldr	r2, [pc, #600]	; (19fa4 <Read_Voltage_ADC0+0x2b0>)
   19d4a:	0019      	movs	r1, r3
   19d4c:	0010      	movs	r0, r2
   19d4e:	4b96      	ldr	r3, [pc, #600]	; (19fa8 <Read_Voltage_ADC0+0x2b4>)
   19d50:	4798      	blx	r3
	//read 500 samples
	
	uint16_t no_of_samples = 544;  //272 samples contain one full cycle
   19d52:	2328      	movs	r3, #40	; 0x28
   19d54:	2230      	movs	r2, #48	; 0x30
   19d56:	18ba      	adds	r2, r7, r2
   19d58:	18d2      	adds	r2, r2, r3
   19d5a:	2388      	movs	r3, #136	; 0x88
   19d5c:	009b      	lsls	r3, r3, #2
   19d5e:	8013      	strh	r3, [r2, #0]
	uint16_t samples_buffer[no_of_samples];
   19d60:	2328      	movs	r3, #40	; 0x28
   19d62:	2230      	movs	r2, #48	; 0x30
   19d64:	4694      	mov	ip, r2
   19d66:	44bc      	add	ip, r7
   19d68:	4463      	add	r3, ip
   19d6a:	881a      	ldrh	r2, [r3, #0]
   19d6c:	0013      	movs	r3, r2
   19d6e:	3b01      	subs	r3, #1
   19d70:	657b      	str	r3, [r7, #84]	; 0x54
   19d72:	613a      	str	r2, [r7, #16]
   19d74:	2300      	movs	r3, #0
   19d76:	617b      	str	r3, [r7, #20]
   19d78:	6938      	ldr	r0, [r7, #16]
   19d7a:	6979      	ldr	r1, [r7, #20]
   19d7c:	0003      	movs	r3, r0
   19d7e:	0f1b      	lsrs	r3, r3, #28
   19d80:	000c      	movs	r4, r1
   19d82:	0124      	lsls	r4, r4, #4
   19d84:	62fc      	str	r4, [r7, #44]	; 0x2c
   19d86:	6afc      	ldr	r4, [r7, #44]	; 0x2c
   19d88:	431c      	orrs	r4, r3
   19d8a:	62fc      	str	r4, [r7, #44]	; 0x2c
   19d8c:	0003      	movs	r3, r0
   19d8e:	011b      	lsls	r3, r3, #4
   19d90:	62bb      	str	r3, [r7, #40]	; 0x28
   19d92:	60ba      	str	r2, [r7, #8]
   19d94:	2300      	movs	r3, #0
   19d96:	60fb      	str	r3, [r7, #12]
   19d98:	68b8      	ldr	r0, [r7, #8]
   19d9a:	68f9      	ldr	r1, [r7, #12]
   19d9c:	0003      	movs	r3, r0
   19d9e:	0f1b      	lsrs	r3, r3, #28
   19da0:	000c      	movs	r4, r1
   19da2:	0124      	lsls	r4, r4, #4
   19da4:	627c      	str	r4, [r7, #36]	; 0x24
   19da6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   19da8:	431c      	orrs	r4, r3
   19daa:	627c      	str	r4, [r7, #36]	; 0x24
   19dac:	0003      	movs	r3, r0
   19dae:	011b      	lsls	r3, r3, #4
   19db0:	623b      	str	r3, [r7, #32]
   19db2:	0013      	movs	r3, r2
   19db4:	005b      	lsls	r3, r3, #1
   19db6:	3301      	adds	r3, #1
   19db8:	3307      	adds	r3, #7
   19dba:	08db      	lsrs	r3, r3, #3
   19dbc:	00db      	lsls	r3, r3, #3
   19dbe:	466a      	mov	r2, sp
   19dc0:	1ad3      	subs	r3, r2, r3
   19dc2:	469d      	mov	sp, r3
   19dc4:	466b      	mov	r3, sp
   19dc6:	3301      	adds	r3, #1
   19dc8:	085b      	lsrs	r3, r3, #1
   19dca:	005b      	lsls	r3, r3, #1
   19dcc:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t temp = xTaskGetTickCount();
   19dce:	4b77      	ldr	r3, [pc, #476]	; (19fac <Read_Voltage_ADC0+0x2b8>)
   19dd0:	4798      	blx	r3
   19dd2:	0003      	movs	r3, r0
   19dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
	
	/************************************************************************/
	/*Using Buffered ADC to take Readings                                   */
	/************************************************************************/
	adc_read_buffer_done = false;
   19dd6:	4b76      	ldr	r3, [pc, #472]	; (19fb0 <Read_Voltage_ADC0+0x2bc>)
   19dd8:	2200      	movs	r2, #0
   19dda:	701a      	strb	r2, [r3, #0]
	
	while(adc_read_buffer_job(&adc_inst, samples_buffer, no_of_samples)!=STATUS_OK)
   19ddc:	46c0      	nop			; (mov r8, r8)
   19dde:	6d39      	ldr	r1, [r7, #80]	; 0x50
   19de0:	2328      	movs	r3, #40	; 0x28
   19de2:	2230      	movs	r2, #48	; 0x30
   19de4:	4694      	mov	ip, r2
   19de6:	44bc      	add	ip, r7
   19de8:	4463      	add	r3, ip
   19dea:	881a      	ldrh	r2, [r3, #0]
   19dec:	4b6d      	ldr	r3, [pc, #436]	; (19fa4 <Read_Voltage_ADC0+0x2b0>)
   19dee:	0018      	movs	r0, r3
   19df0:	4b70      	ldr	r3, [pc, #448]	; (19fb4 <Read_Voltage_ADC0+0x2c0>)
   19df2:	4798      	blx	r3
   19df4:	1e03      	subs	r3, r0, #0
   19df6:	d1f2      	bne.n	19dde <Read_Voltage_ADC0+0xea>
	{}
	ulTaskNotifyTake(pdTRUE,100/portTICK_PERIOD_MS);
   19df8:	2164      	movs	r1, #100	; 0x64
   19dfa:	2001      	movs	r0, #1
   19dfc:	4b6e      	ldr	r3, [pc, #440]	; (19fb8 <Read_Voltage_ADC0+0x2c4>)
   19dfe:	4798      	blx	r3
	//while (adc_read(&adc_inst, &samples_buffer[i]) != STATUS_OK) {
	//}
	//}

	
	if(adc_read_buffer_done)
   19e00:	4b6b      	ldr	r3, [pc, #428]	; (19fb0 <Read_Voltage_ADC0+0x2bc>)
   19e02:	781b      	ldrb	r3, [r3, #0]
   19e04:	2b00      	cmp	r3, #0
   19e06:	d100      	bne.n	19e0a <Read_Voltage_ADC0+0x116>
   19e08:	e0bb      	b.n	19f82 <Read_Voltage_ADC0+0x28e>
	{
		uint32_t square = 0;
   19e0a:	2300      	movs	r3, #0
   19e0c:	65fb      	str	r3, [r7, #92]	; 0x5c
		double  mean = 0.0;
   19e0e:	2300      	movs	r3, #0
   19e10:	2400      	movs	r4, #0
   19e12:	643b      	str	r3, [r7, #64]	; 0x40
   19e14:	647c      	str	r4, [r7, #68]	; 0x44
		double  root = 0.0;
   19e16:	2300      	movs	r3, #0
   19e18:	2400      	movs	r4, #0
   19e1a:	63bb      	str	r3, [r7, #56]	; 0x38
   19e1c:	63fc      	str	r4, [r7, #60]	; 0x3c
		
		for (uint16_t i = 0; i < no_of_samples; i++)
   19e1e:	232a      	movs	r3, #42	; 0x2a
   19e20:	2230      	movs	r2, #48	; 0x30
   19e22:	4694      	mov	ip, r2
   19e24:	44bc      	add	ip, r7
   19e26:	4463      	add	r3, ip
   19e28:	2200      	movs	r2, #0
   19e2a:	801a      	strh	r2, [r3, #0]
   19e2c:	e032      	b.n	19e94 <Read_Voltage_ADC0+0x1a0>
		{
			square += pow(samples_buffer[i], 2);
   19e2e:	232a      	movs	r3, #42	; 0x2a
   19e30:	2230      	movs	r2, #48	; 0x30
   19e32:	4694      	mov	ip, r2
   19e34:	44bc      	add	ip, r7
   19e36:	4463      	add	r3, ip
   19e38:	881a      	ldrh	r2, [r3, #0]
   19e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   19e3c:	0052      	lsls	r2, r2, #1
   19e3e:	5ad2      	ldrh	r2, [r2, r3]
   19e40:	4b5e      	ldr	r3, [pc, #376]	; (19fbc <Read_Voltage_ADC0+0x2c8>)
   19e42:	0010      	movs	r0, r2
   19e44:	4798      	blx	r3
   19e46:	2300      	movs	r3, #0
   19e48:	2480      	movs	r4, #128	; 0x80
   19e4a:	05e4      	lsls	r4, r4, #23
   19e4c:	001a      	movs	r2, r3
   19e4e:	0023      	movs	r3, r4
   19e50:	4c5b      	ldr	r4, [pc, #364]	; (19fc0 <Read_Voltage_ADC0+0x2cc>)
   19e52:	47a0      	blx	r4
   19e54:	0005      	movs	r5, r0
   19e56:	000e      	movs	r6, r1
   19e58:	4b58      	ldr	r3, [pc, #352]	; (19fbc <Read_Voltage_ADC0+0x2c8>)
   19e5a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
   19e5c:	4798      	blx	r3
   19e5e:	4c59      	ldr	r4, [pc, #356]	; (19fc4 <Read_Voltage_ADC0+0x2d0>)
   19e60:	002a      	movs	r2, r5
   19e62:	0033      	movs	r3, r6
   19e64:	47a0      	blx	r4
   19e66:	0003      	movs	r3, r0
   19e68:	000c      	movs	r4, r1
   19e6a:	0019      	movs	r1, r3
   19e6c:	0022      	movs	r2, r4
   19e6e:	4b56      	ldr	r3, [pc, #344]	; (19fc8 <Read_Voltage_ADC0+0x2d4>)
   19e70:	0008      	movs	r0, r1
   19e72:	0011      	movs	r1, r2
   19e74:	4798      	blx	r3
   19e76:	0003      	movs	r3, r0
   19e78:	65fb      	str	r3, [r7, #92]	; 0x5c
		for (uint16_t i = 0; i < no_of_samples; i++)
   19e7a:	232a      	movs	r3, #42	; 0x2a
   19e7c:	2230      	movs	r2, #48	; 0x30
   19e7e:	4694      	mov	ip, r2
   19e80:	44bc      	add	ip, r7
   19e82:	4463      	add	r3, ip
   19e84:	881a      	ldrh	r2, [r3, #0]
   19e86:	232a      	movs	r3, #42	; 0x2a
   19e88:	2130      	movs	r1, #48	; 0x30
   19e8a:	468c      	mov	ip, r1
   19e8c:	44bc      	add	ip, r7
   19e8e:	4463      	add	r3, ip
   19e90:	3201      	adds	r2, #1
   19e92:	801a      	strh	r2, [r3, #0]
   19e94:	232a      	movs	r3, #42	; 0x2a
   19e96:	2230      	movs	r2, #48	; 0x30
   19e98:	18ba      	adds	r2, r7, r2
   19e9a:	18d2      	adds	r2, r2, r3
   19e9c:	2328      	movs	r3, #40	; 0x28
   19e9e:	2130      	movs	r1, #48	; 0x30
   19ea0:	468c      	mov	ip, r1
   19ea2:	44bc      	add	ip, r7
   19ea4:	4463      	add	r3, ip
   19ea6:	8812      	ldrh	r2, [r2, #0]
   19ea8:	881b      	ldrh	r3, [r3, #0]
   19eaa:	429a      	cmp	r2, r3
   19eac:	d3bf      	bcc.n	19e2e <Read_Voltage_ADC0+0x13a>
		}
		
		mean = (square / (float)(no_of_samples));
   19eae:	4b47      	ldr	r3, [pc, #284]	; (19fcc <Read_Voltage_ADC0+0x2d8>)
   19eb0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
   19eb2:	4798      	blx	r3
   19eb4:	1c04      	adds	r4, r0, #0
   19eb6:	2328      	movs	r3, #40	; 0x28
   19eb8:	2230      	movs	r2, #48	; 0x30
   19eba:	4694      	mov	ip, r2
   19ebc:	44bc      	add	ip, r7
   19ebe:	4463      	add	r3, ip
   19ec0:	881a      	ldrh	r2, [r3, #0]
   19ec2:	4b42      	ldr	r3, [pc, #264]	; (19fcc <Read_Voltage_ADC0+0x2d8>)
   19ec4:	0010      	movs	r0, r2
   19ec6:	4798      	blx	r3
   19ec8:	1c02      	adds	r2, r0, #0
   19eca:	4b41      	ldr	r3, [pc, #260]	; (19fd0 <Read_Voltage_ADC0+0x2dc>)
   19ecc:	1c11      	adds	r1, r2, #0
   19ece:	1c20      	adds	r0, r4, #0
   19ed0:	4798      	blx	r3
   19ed2:	1c03      	adds	r3, r0, #0
   19ed4:	1c1a      	adds	r2, r3, #0
   19ed6:	4b3f      	ldr	r3, [pc, #252]	; (19fd4 <Read_Voltage_ADC0+0x2e0>)
   19ed8:	1c10      	adds	r0, r2, #0
   19eda:	4798      	blx	r3
   19edc:	0003      	movs	r3, r0
   19ede:	000c      	movs	r4, r1
   19ee0:	643b      	str	r3, [r7, #64]	; 0x40
   19ee2:	647c      	str	r4, [r7, #68]	; 0x44
		// Calculate Root.
		root = sqrt(mean);
   19ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   19ee6:	6c7c      	ldr	r4, [r7, #68]	; 0x44
   19ee8:	0018      	movs	r0, r3
   19eea:	0021      	movs	r1, r4
   19eec:	4b3a      	ldr	r3, [pc, #232]	; (19fd8 <Read_Voltage_ADC0+0x2e4>)
   19eee:	4798      	blx	r3
   19ef0:	0003      	movs	r3, r0
   19ef2:	000c      	movs	r4, r1
   19ef4:	63bb      	str	r3, [r7, #56]	; 0x38
   19ef6:	63fc      	str	r4, [r7, #60]	; 0x3c

		//
		temp = (root-20)*655/1000;
   19ef8:	4c38      	ldr	r4, [pc, #224]	; (19fdc <Read_Voltage_ADC0+0x2e8>)
   19efa:	2200      	movs	r2, #0
   19efc:	4b38      	ldr	r3, [pc, #224]	; (19fe0 <Read_Voltage_ADC0+0x2ec>)
   19efe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   19f00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   19f02:	47a0      	blx	r4
   19f04:	0003      	movs	r3, r0
   19f06:	000c      	movs	r4, r1
   19f08:	0018      	movs	r0, r3
   19f0a:	0021      	movs	r1, r4
   19f0c:	4c35      	ldr	r4, [pc, #212]	; (19fe4 <Read_Voltage_ADC0+0x2f0>)
   19f0e:	2200      	movs	r2, #0
   19f10:	4b35      	ldr	r3, [pc, #212]	; (19fe8 <Read_Voltage_ADC0+0x2f4>)
   19f12:	47a0      	blx	r4
   19f14:	0003      	movs	r3, r0
   19f16:	000c      	movs	r4, r1
   19f18:	0018      	movs	r0, r3
   19f1a:	0021      	movs	r1, r4
   19f1c:	4c33      	ldr	r4, [pc, #204]	; (19fec <Read_Voltage_ADC0+0x2f8>)
   19f1e:	2200      	movs	r2, #0
   19f20:	4b33      	ldr	r3, [pc, #204]	; (19ff0 <Read_Voltage_ADC0+0x2fc>)
   19f22:	47a0      	blx	r4
   19f24:	0003      	movs	r3, r0
   19f26:	000c      	movs	r4, r1
   19f28:	0019      	movs	r1, r3
   19f2a:	0022      	movs	r2, r4
   19f2c:	4b26      	ldr	r3, [pc, #152]	; (19fc8 <Read_Voltage_ADC0+0x2d4>)
   19f2e:	0008      	movs	r0, r1
   19f30:	0011      	movs	r1, r2
   19f32:	4798      	blx	r3
   19f34:	0003      	movs	r3, r0
   19f36:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (abs(Analog_Parameter_Struct.PhaseRY_Voltage - temp)> 80)
   19f38:	4b2e      	ldr	r3, [pc, #184]	; (19ff4 <Read_Voltage_ADC0+0x300>)
   19f3a:	681a      	ldr	r2, [r3, #0]
   19f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   19f3e:	1ad3      	subs	r3, r2, r3
   19f40:	17da      	asrs	r2, r3, #31
   19f42:	189b      	adds	r3, r3, r2
   19f44:	4053      	eors	r3, r2
   19f46:	2b50      	cmp	r3, #80	; 0x50
   19f48:	dd15      	ble.n	19f76 <Read_Voltage_ADC0+0x282>
		{
			delay_us(1);
   19f4a:	2000      	movs	r0, #0
   19f4c:	4b10      	ldr	r3, [pc, #64]	; (19f90 <Read_Voltage_ADC0+0x29c>)
   19f4e:	4798      	blx	r3
   19f50:	0003      	movs	r3, r0
   19f52:	603b      	str	r3, [r7, #0]
   19f54:	2300      	movs	r3, #0
   19f56:	607b      	str	r3, [r7, #4]
   19f58:	4b27      	ldr	r3, [pc, #156]	; (19ff8 <Read_Voltage_ADC0+0x304>)
   19f5a:	2400      	movs	r4, #0
   19f5c:	6838      	ldr	r0, [r7, #0]
   19f5e:	6879      	ldr	r1, [r7, #4]
   19f60:	18c0      	adds	r0, r0, r3
   19f62:	4161      	adcs	r1, r4
   19f64:	4c0c      	ldr	r4, [pc, #48]	; (19f98 <Read_Voltage_ADC0+0x2a4>)
   19f66:	4a25      	ldr	r2, [pc, #148]	; (19ffc <Read_Voltage_ADC0+0x308>)
   19f68:	2300      	movs	r3, #0
   19f6a:	47a0      	blx	r4
   19f6c:	0003      	movs	r3, r0
   19f6e:	000c      	movs	r4, r1
   19f70:	0018      	movs	r0, r3
   19f72:	4b0b      	ldr	r3, [pc, #44]	; (19fa0 <Read_Voltage_ADC0+0x2ac>)
   19f74:	4798      	blx	r3
		}
		//
		
		return (uint32_t)root;
   19f76:	4b14      	ldr	r3, [pc, #80]	; (19fc8 <Read_Voltage_ADC0+0x2d4>)
   19f78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   19f7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   19f7c:	4798      	blx	r3
   19f7e:	0003      	movs	r3, r0
   19f80:	e000      	b.n	19f84 <Read_Voltage_ADC0+0x290>
	}
	else
	{
		return 0;
   19f82:	2300      	movs	r3, #0
   19f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   19f86:	4695      	mov	sp, r2
	//}
	//}
	//}
	//
	//return samples_buffer[5]; //0,1,2,3,4 are considered as voltage spikes
}
   19f88:	0018      	movs	r0, r3
   19f8a:	46bd      	mov	sp, r7
   19f8c:	b019      	add	sp, #100	; 0x64
   19f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19f90:	000249dd 	.word	0x000249dd
   19f94:	00001b57 	.word	0x00001b57
   19f98:	00026965 	.word	0x00026965
   19f9c:	00001b58 	.word	0x00001b58
   19fa0:	20000001 	.word	0x20000001
   19fa4:	2000081c 	.word	0x2000081c
   19fa8:	00018fd9 	.word	0x00018fd9
   19fac:	0002034d 	.word	0x0002034d
   19fb0:	2000073d 	.word	0x2000073d
   19fb4:	0001da55 	.word	0x0001da55
   19fb8:	00020c61 	.word	0x00020c61
   19fbc:	00028c91 	.word	0x00028c91
   19fc0:	00025369 	.word	0x00025369
   19fc4:	000271b1 	.word	0x000271b1
   19fc8:	000269f9 	.word	0x000269f9
   19fcc:	00027125 	.word	0x00027125
   19fd0:	00026bb5 	.word	0x00026bb5
   19fd4:	00028d01 	.word	0x00028d01
   19fd8:	000256c1 	.word	0x000256c1
   19fdc:	00028539 	.word	0x00028539
   19fe0:	40340000 	.word	0x40340000
   19fe4:	00028039 	.word	0x00028039
   19fe8:	40847800 	.word	0x40847800
   19fec:	000277d1 	.word	0x000277d1
   19ff0:	408f4000 	.word	0x408f4000
   19ff4:	200006dc 	.word	0x200006dc
   19ff8:	006acfbf 	.word	0x006acfbf
   19ffc:	006acfc0 	.word	0x006acfc0

0001a000 <autoSetCurrent>:

void autoSetCurrent(void)
{
   1a000:	b580      	push	{r7, lr}
   1a002:	b084      	sub	sp, #16
   1a004:	af00      	add	r7, sp, #0
	if(getMotorState() && !startSequenceOn && !starDeltaTimerOn && !stopSequenceOn && getAllPhaseState())
   1a006:	4b2e      	ldr	r3, [pc, #184]	; (1a0c0 <autoSetCurrent+0xc0>)
   1a008:	4798      	blx	r3
   1a00a:	1e03      	subs	r3, r0, #0
   1a00c:	d04e      	beq.n	1a0ac <autoSetCurrent+0xac>
   1a00e:	4b2d      	ldr	r3, [pc, #180]	; (1a0c4 <autoSetCurrent+0xc4>)
   1a010:	781b      	ldrb	r3, [r3, #0]
   1a012:	2201      	movs	r2, #1
   1a014:	4053      	eors	r3, r2
   1a016:	b2db      	uxtb	r3, r3
   1a018:	2b00      	cmp	r3, #0
   1a01a:	d047      	beq.n	1a0ac <autoSetCurrent+0xac>
   1a01c:	4b2a      	ldr	r3, [pc, #168]	; (1a0c8 <autoSetCurrent+0xc8>)
   1a01e:	781b      	ldrb	r3, [r3, #0]
   1a020:	2201      	movs	r2, #1
   1a022:	4053      	eors	r3, r2
   1a024:	b2db      	uxtb	r3, r3
   1a026:	2b00      	cmp	r3, #0
   1a028:	d040      	beq.n	1a0ac <autoSetCurrent+0xac>
   1a02a:	4b28      	ldr	r3, [pc, #160]	; (1a0cc <autoSetCurrent+0xcc>)
   1a02c:	781b      	ldrb	r3, [r3, #0]
   1a02e:	2201      	movs	r2, #1
   1a030:	4053      	eors	r3, r2
   1a032:	b2db      	uxtb	r3, r3
   1a034:	2b00      	cmp	r3, #0
   1a036:	d039      	beq.n	1a0ac <autoSetCurrent+0xac>
   1a038:	4b25      	ldr	r3, [pc, #148]	; (1a0d0 <autoSetCurrent+0xd0>)
   1a03a:	4798      	blx	r3
   1a03c:	1e03      	subs	r3, r0, #0
   1a03e:	d035      	beq.n	1a0ac <autoSetCurrent+0xac>
	{
		uint32_t ADCcurrent = Analog_Parameter_Struct.Motor_Current;
   1a040:	4b24      	ldr	r3, [pc, #144]	; (1a0d4 <autoSetCurrent+0xd4>)
   1a042:	691b      	ldr	r3, [r3, #16]
   1a044:	60fb      	str	r3, [r7, #12]
		//ADCcurrent = Read_ADC0(ADC_POSITIVE_INPUT_PIN16,200);
		//xSemaphoreGive(xADC_Semaphore);
		//}
		
		
		if(ADCcurrent<250)     //ADC VALUE FOR 2.5A
   1a046:	68fb      	ldr	r3, [r7, #12]
   1a048:	2bf9      	cmp	r3, #249	; 0xf9
   1a04a:	d806      	bhi.n	1a05a <autoSetCurrent+0x5a>
		{
			setCurrentDetection(false);
   1a04c:	2000      	movs	r0, #0
   1a04e:	4b22      	ldr	r3, [pc, #136]	; (1a0d8 <autoSetCurrent+0xd8>)
   1a050:	4798      	blx	r3
			setMotorMGRResponse('Y');		//ampere cleared
   1a052:	2059      	movs	r0, #89	; 0x59
   1a054:	4b21      	ldr	r3, [pc, #132]	; (1a0dc <autoSetCurrent+0xdc>)
   1a056:	4798      	blx	r3
			return;
   1a058:	e02e      	b.n	1a0b8 <autoSetCurrent+0xb8>
		}
		
		uint32_t tempUnder = ADCcurrent  * user_settings_parameter_struct.underloadPerAddress / 100;
   1a05a:	4b21      	ldr	r3, [pc, #132]	; (1a0e0 <autoSetCurrent+0xe0>)
   1a05c:	7f1b      	ldrb	r3, [r3, #28]
   1a05e:	001a      	movs	r2, r3
   1a060:	68fb      	ldr	r3, [r7, #12]
   1a062:	435a      	muls	r2, r3
   1a064:	4b1f      	ldr	r3, [pc, #124]	; (1a0e4 <autoSetCurrent+0xe4>)
   1a066:	2164      	movs	r1, #100	; 0x64
   1a068:	0010      	movs	r0, r2
   1a06a:	4798      	blx	r3
   1a06c:	0003      	movs	r3, r0
   1a06e:	60bb      	str	r3, [r7, #8]
		uint32_t tempOver = ADCcurrent  * user_settings_parameter_struct.overloadPerAddress / 100;
   1a070:	4b1b      	ldr	r3, [pc, #108]	; (1a0e0 <autoSetCurrent+0xe0>)
   1a072:	7f5b      	ldrb	r3, [r3, #29]
   1a074:	001a      	movs	r2, r3
   1a076:	68fb      	ldr	r3, [r7, #12]
   1a078:	435a      	muls	r2, r3
   1a07a:	4b1a      	ldr	r3, [pc, #104]	; (1a0e4 <autoSetCurrent+0xe4>)
   1a07c:	2164      	movs	r1, #100	; 0x64
   1a07e:	0010      	movs	r0, r2
   1a080:	4798      	blx	r3
   1a082:	0003      	movs	r3, r0
   1a084:	607b      	str	r3, [r7, #4]

		setNormalLoadValue(ADCcurrent);
   1a086:	68fb      	ldr	r3, [r7, #12]
   1a088:	0018      	movs	r0, r3
   1a08a:	4b17      	ldr	r3, [pc, #92]	; (1a0e8 <autoSetCurrent+0xe8>)
   1a08c:	4798      	blx	r3
		setUnderloadValue(tempUnder);
   1a08e:	68bb      	ldr	r3, [r7, #8]
   1a090:	0018      	movs	r0, r3
   1a092:	4b16      	ldr	r3, [pc, #88]	; (1a0ec <autoSetCurrent+0xec>)
   1a094:	4798      	blx	r3
		setOverloadValue(tempOver);
   1a096:	687b      	ldr	r3, [r7, #4]
   1a098:	0018      	movs	r0, r3
   1a09a:	4b15      	ldr	r3, [pc, #84]	; (1a0f0 <autoSetCurrent+0xf0>)
   1a09c:	4798      	blx	r3
		setCurrentDetection(true);
   1a09e:	2001      	movs	r0, #1
   1a0a0:	4b0d      	ldr	r3, [pc, #52]	; (1a0d8 <autoSetCurrent+0xd8>)
   1a0a2:	4798      	blx	r3
		setMotorMGRResponse('K');		//ampere settings complete
   1a0a4:	204b      	movs	r0, #75	; 0x4b
   1a0a6:	4b0d      	ldr	r3, [pc, #52]	; (1a0dc <autoSetCurrent+0xdc>)
   1a0a8:	4798      	blx	r3
	{
   1a0aa:	e005      	b.n	1a0b8 <autoSetCurrent+0xb8>
	}
	else
	{
		setCurrentDetection(false);
   1a0ac:	2000      	movs	r0, #0
   1a0ae:	4b0a      	ldr	r3, [pc, #40]	; (1a0d8 <autoSetCurrent+0xd8>)
   1a0b0:	4798      	blx	r3
		setMotorMGRResponse('Y');		//ampere cleared
   1a0b2:	2059      	movs	r0, #89	; 0x59
   1a0b4:	4b09      	ldr	r3, [pc, #36]	; (1a0dc <autoSetCurrent+0xdc>)
   1a0b6:	4798      	blx	r3
	}
}
   1a0b8:	46bd      	mov	sp, r7
   1a0ba:	b004      	add	sp, #16
   1a0bc:	bd80      	pop	{r7, pc}
   1a0be:	46c0      	nop			; (mov r8, r8)
   1a0c0:	0001ac9d 	.word	0x0001ac9d
   1a0c4:	20000791 	.word	0x20000791
   1a0c8:	20000793 	.word	0x20000793
   1a0cc:	20000780 	.word	0x20000780
   1a0d0:	0001ac35 	.word	0x0001ac35
   1a0d4:	200006dc 	.word	0x200006dc
   1a0d8:	00011985 	.word	0x00011985
   1a0dc:	00014b05 	.word	0x00014b05
   1a0e0:	20000654 	.word	0x20000654
   1a0e4:	000265fd 	.word	0x000265fd
   1a0e8:	00011941 	.word	0x00011941
   1a0ec:	000118b9 	.word	0x000118b9
   1a0f0:	000118fd 	.word	0x000118fd

0001a0f4 <speakAmpere>:

void speakAmpere(void)
{
   1a0f4:	b580      	push	{r7, lr}
   1a0f6:	b084      	sub	sp, #16
   1a0f8:	af00      	add	r7, sp, #0
	if(getMotorState())
   1a0fa:	4b0d      	ldr	r3, [pc, #52]	; (1a130 <speakAmpere+0x3c>)
   1a0fc:	4798      	blx	r3
   1a0fe:	1e03      	subs	r3, r0, #0
   1a100:	d00f      	beq.n	1a122 <speakAmpere+0x2e>
	{
		char cTemp[8];
		
		uint32_t ADCcurrent = Analog_Parameter_Struct.Motor_Current_IntPart;
   1a102:	4b0c      	ldr	r3, [pc, #48]	; (1a134 <speakAmpere+0x40>)
   1a104:	8a9b      	ldrh	r3, [r3, #20]
   1a106:	b29b      	uxth	r3, r3
   1a108:	60fb      	str	r3, [r7, #12]
		//xSemaphoreGive(xADC_Semaphore);
		//ADCcurrent = (ADCcurrent*7225)/100000;
		//xSemaphoreGive(xADC_Semaphore);
		//}
		
		utoa(ADCcurrent, cTemp, 10);
   1a10a:	1d39      	adds	r1, r7, #4
   1a10c:	68fb      	ldr	r3, [r7, #12]
   1a10e:	220a      	movs	r2, #10
   1a110:	0018      	movs	r0, r3
   1a112:	4b09      	ldr	r3, [pc, #36]	; (1a138 <speakAmpere+0x44>)
   1a114:	4798      	blx	r3
		playRepeatedFiles(cTemp);
   1a116:	1d3b      	adds	r3, r7, #4
   1a118:	0018      	movs	r0, r3
   1a11a:	4b08      	ldr	r3, [pc, #32]	; (1a13c <speakAmpere+0x48>)
   1a11c:	4798      	blx	r3
		return;
   1a11e:	46c0      	nop			; (mov r8, r8)
   1a120:	e002      	b.n	1a128 <speakAmpere+0x34>
	}
	setMotorMGRResponse('-');
   1a122:	202d      	movs	r0, #45	; 0x2d
   1a124:	4b06      	ldr	r3, [pc, #24]	; (1a140 <speakAmpere+0x4c>)
   1a126:	4798      	blx	r3
}
   1a128:	46bd      	mov	sp, r7
   1a12a:	b004      	add	sp, #16
   1a12c:	bd80      	pop	{r7, pc}
   1a12e:	46c0      	nop			; (mov r8, r8)
   1a130:	0001ac9d 	.word	0x0001ac9d
   1a134:	200006dc 	.word	0x200006dc
   1a138:	00029459 	.word	0x00029459
   1a13c:	000147f9 	.word	0x000147f9
   1a140:	00014b05 	.word	0x00014b05

0001a144 <PR2_ISR>:

void PR2_ISR(void)
{
   1a144:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a146:	b08b      	sub	sp, #44	; 0x2c
   1a148:	af00      	add	r7, sp, #0
	if (ucharPhase_Seq_Check_Flag==1)
   1a14a:	4b77      	ldr	r3, [pc, #476]	; (1a328 <PR2_ISR+0x1e4>)
   1a14c:	781b      	ldrb	r3, [r3, #0]
   1a14e:	b2db      	uxtb	r3, r3
   1a150:	2b01      	cmp	r3, #1
   1a152:	d000      	beq.n	1a156 <PR2_ISR+0x12>
   1a154:	e0e3      	b.n	1a31e <PR2_ISR+0x1da>
	{
		ucharPhase_1_Timer_Counter=0;
   1a156:	4b75      	ldr	r3, [pc, #468]	; (1a32c <PR2_ISR+0x1e8>)
   1a158:	2200      	movs	r2, #0
   1a15a:	701a      	strb	r2, [r3, #0]
		delay_ms(5);
   1a15c:	2000      	movs	r0, #0
   1a15e:	4b74      	ldr	r3, [pc, #464]	; (1a330 <PR2_ISR+0x1ec>)
   1a160:	4798      	blx	r3
   1a162:	0003      	movs	r3, r0
   1a164:	60bb      	str	r3, [r7, #8]
   1a166:	2300      	movs	r3, #0
   1a168:	60fb      	str	r3, [r7, #12]
   1a16a:	68bb      	ldr	r3, [r7, #8]
   1a16c:	68fc      	ldr	r4, [r7, #12]
   1a16e:	0f9a      	lsrs	r2, r3, #30
   1a170:	00a0      	lsls	r0, r4, #2
   1a172:	61f8      	str	r0, [r7, #28]
   1a174:	69f8      	ldr	r0, [r7, #28]
   1a176:	4310      	orrs	r0, r2
   1a178:	61f8      	str	r0, [r7, #28]
   1a17a:	009b      	lsls	r3, r3, #2
   1a17c:	61bb      	str	r3, [r7, #24]
   1a17e:	69bb      	ldr	r3, [r7, #24]
   1a180:	69fc      	ldr	r4, [r7, #28]
   1a182:	68b9      	ldr	r1, [r7, #8]
   1a184:	68fa      	ldr	r2, [r7, #12]
   1a186:	185b      	adds	r3, r3, r1
   1a188:	4154      	adcs	r4, r2
   1a18a:	496a      	ldr	r1, [pc, #424]	; (1a334 <PR2_ISR+0x1f0>)
   1a18c:	2200      	movs	r2, #0
   1a18e:	185b      	adds	r3, r3, r1
   1a190:	4154      	adcs	r4, r2
   1a192:	0018      	movs	r0, r3
   1a194:	0021      	movs	r1, r4
   1a196:	4c68      	ldr	r4, [pc, #416]	; (1a338 <PR2_ISR+0x1f4>)
   1a198:	4a68      	ldr	r2, [pc, #416]	; (1a33c <PR2_ISR+0x1f8>)
   1a19a:	2300      	movs	r3, #0
   1a19c:	47a0      	blx	r4
   1a19e:	0003      	movs	r3, r0
   1a1a0:	000c      	movs	r4, r1
   1a1a2:	0018      	movs	r0, r3
   1a1a4:	4b66      	ldr	r3, [pc, #408]	; (1a340 <PR2_ISR+0x1fc>)
   1a1a6:	4798      	blx	r3
		volatile unsigned char ucharHigh_Flag=0,ucharLow_Flag=0,ucharHigh_To_Low_Flag=0,ucharLow_To_High_Flag=0;
   1a1a8:	2323      	movs	r3, #35	; 0x23
   1a1aa:	18fb      	adds	r3, r7, r3
   1a1ac:	2200      	movs	r2, #0
   1a1ae:	701a      	strb	r2, [r3, #0]
   1a1b0:	2322      	movs	r3, #34	; 0x22
   1a1b2:	18fb      	adds	r3, r7, r3
   1a1b4:	2200      	movs	r2, #0
   1a1b6:	701a      	strb	r2, [r3, #0]
   1a1b8:	2321      	movs	r3, #33	; 0x21
   1a1ba:	18fb      	adds	r3, r7, r3
   1a1bc:	2200      	movs	r2, #0
   1a1be:	701a      	strb	r2, [r3, #0]
   1a1c0:	2320      	movs	r3, #32
   1a1c2:	18fb      	adds	r3, r7, r3
   1a1c4:	2200      	movs	r2, #0
   1a1c6:	701a      	strb	r2, [r3, #0]
		if (port_pin_get_input_level(PR2_PIN)==HIGH)
   1a1c8:	202b      	movs	r0, #43	; 0x2b
   1a1ca:	4b5e      	ldr	r3, [pc, #376]	; (1a344 <PR2_ISR+0x200>)
   1a1cc:	4798      	blx	r3
   1a1ce:	1e03      	subs	r3, r0, #0
   1a1d0:	d100      	bne.n	1a1d4 <PR2_ISR+0x90>
   1a1d2:	e08e      	b.n	1a2f2 <PR2_ISR+0x1ae>
		{
			for (unsigned int uintLoop=0;uintLoop<120;uintLoop++)
   1a1d4:	2300      	movs	r3, #0
   1a1d6:	627b      	str	r3, [r7, #36]	; 0x24
   1a1d8:	e085      	b.n	1a2e6 <PR2_ISR+0x1a2>
			{
				delay_us(25);
   1a1da:	2000      	movs	r0, #0
   1a1dc:	4b54      	ldr	r3, [pc, #336]	; (1a330 <PR2_ISR+0x1ec>)
   1a1de:	4798      	blx	r3
   1a1e0:	0003      	movs	r3, r0
   1a1e2:	603b      	str	r3, [r7, #0]
   1a1e4:	2300      	movs	r3, #0
   1a1e6:	607b      	str	r3, [r7, #4]
   1a1e8:	6838      	ldr	r0, [r7, #0]
   1a1ea:	6879      	ldr	r1, [r7, #4]
   1a1ec:	0003      	movs	r3, r0
   1a1ee:	000c      	movs	r4, r1
   1a1f0:	0f9a      	lsrs	r2, r3, #30
   1a1f2:	00a6      	lsls	r6, r4, #2
   1a1f4:	4316      	orrs	r6, r2
   1a1f6:	009d      	lsls	r5, r3, #2
   1a1f8:	0003      	movs	r3, r0
   1a1fa:	000c      	movs	r4, r1
   1a1fc:	195b      	adds	r3, r3, r5
   1a1fe:	4174      	adcs	r4, r6
   1a200:	0f9a      	lsrs	r2, r3, #30
   1a202:	00a1      	lsls	r1, r4, #2
   1a204:	6179      	str	r1, [r7, #20]
   1a206:	6979      	ldr	r1, [r7, #20]
   1a208:	4311      	orrs	r1, r2
   1a20a:	6179      	str	r1, [r7, #20]
   1a20c:	009a      	lsls	r2, r3, #2
   1a20e:	613a      	str	r2, [r7, #16]
   1a210:	6939      	ldr	r1, [r7, #16]
   1a212:	697a      	ldr	r2, [r7, #20]
   1a214:	185b      	adds	r3, r3, r1
   1a216:	4154      	adcs	r4, r2
   1a218:	494b      	ldr	r1, [pc, #300]	; (1a348 <PR2_ISR+0x204>)
   1a21a:	2200      	movs	r2, #0
   1a21c:	185b      	adds	r3, r3, r1
   1a21e:	4154      	adcs	r4, r2
   1a220:	0018      	movs	r0, r3
   1a222:	0021      	movs	r1, r4
   1a224:	4c44      	ldr	r4, [pc, #272]	; (1a338 <PR2_ISR+0x1f4>)
   1a226:	4a49      	ldr	r2, [pc, #292]	; (1a34c <PR2_ISR+0x208>)
   1a228:	2300      	movs	r3, #0
   1a22a:	47a0      	blx	r4
   1a22c:	0003      	movs	r3, r0
   1a22e:	000c      	movs	r4, r1
   1a230:	0018      	movs	r0, r3
   1a232:	4b43      	ldr	r3, [pc, #268]	; (1a340 <PR2_ISR+0x1fc>)
   1a234:	4798      	blx	r3
				if ((port_pin_get_input_level(PR1_PIN)==HIGH)&&(ucharHigh_Flag==0))
   1a236:	202a      	movs	r0, #42	; 0x2a
   1a238:	4b42      	ldr	r3, [pc, #264]	; (1a344 <PR2_ISR+0x200>)
   1a23a:	4798      	blx	r3
   1a23c:	1e03      	subs	r3, r0, #0
   1a23e:	d014      	beq.n	1a26a <PR2_ISR+0x126>
   1a240:	2323      	movs	r3, #35	; 0x23
   1a242:	18fb      	adds	r3, r7, r3
   1a244:	781b      	ldrb	r3, [r3, #0]
   1a246:	b2db      	uxtb	r3, r3
   1a248:	2b00      	cmp	r3, #0
   1a24a:	d10e      	bne.n	1a26a <PR2_ISR+0x126>
				{
					ucharHigh_Flag=1;
   1a24c:	2323      	movs	r3, #35	; 0x23
   1a24e:	18fb      	adds	r3, r7, r3
   1a250:	2201      	movs	r2, #1
   1a252:	701a      	strb	r2, [r3, #0]
					if (ucharLow_Flag==1)
   1a254:	2322      	movs	r3, #34	; 0x22
   1a256:	18fb      	adds	r3, r7, r3
   1a258:	781b      	ldrb	r3, [r3, #0]
   1a25a:	b2db      	uxtb	r3, r3
   1a25c:	2b01      	cmp	r3, #1
   1a25e:	d104      	bne.n	1a26a <PR2_ISR+0x126>
					{
						ucharLow_To_High_Flag=1;
   1a260:	2320      	movs	r3, #32
   1a262:	18fb      	adds	r3, r7, r3
   1a264:	2201      	movs	r2, #1
   1a266:	701a      	strb	r2, [r3, #0]
						break;
   1a268:	e043      	b.n	1a2f2 <PR2_ISR+0x1ae>
					}
				}
				if ((port_pin_get_input_level(PR1_PIN)==LOW)&&(ucharLow_Flag==0))
   1a26a:	202a      	movs	r0, #42	; 0x2a
   1a26c:	4b35      	ldr	r3, [pc, #212]	; (1a344 <PR2_ISR+0x200>)
   1a26e:	4798      	blx	r3
   1a270:	0003      	movs	r3, r0
   1a272:	001a      	movs	r2, r3
   1a274:	2301      	movs	r3, #1
   1a276:	4053      	eors	r3, r2
   1a278:	b2db      	uxtb	r3, r3
   1a27a:	2b00      	cmp	r3, #0
   1a27c:	d013      	beq.n	1a2a6 <PR2_ISR+0x162>
   1a27e:	2322      	movs	r3, #34	; 0x22
   1a280:	18fb      	adds	r3, r7, r3
   1a282:	781b      	ldrb	r3, [r3, #0]
   1a284:	b2db      	uxtb	r3, r3
   1a286:	2b00      	cmp	r3, #0
   1a288:	d10d      	bne.n	1a2a6 <PR2_ISR+0x162>
				{
					ucharLow_Flag=1;
   1a28a:	2322      	movs	r3, #34	; 0x22
   1a28c:	18fb      	adds	r3, r7, r3
   1a28e:	2201      	movs	r2, #1
   1a290:	701a      	strb	r2, [r3, #0]
					if (ucharHigh_Flag==1)
   1a292:	2323      	movs	r3, #35	; 0x23
   1a294:	18fb      	adds	r3, r7, r3
   1a296:	781b      	ldrb	r3, [r3, #0]
   1a298:	b2db      	uxtb	r3, r3
   1a29a:	2b01      	cmp	r3, #1
   1a29c:	d103      	bne.n	1a2a6 <PR2_ISR+0x162>
					{
						ucharHigh_To_Low_Flag=1;
   1a29e:	2321      	movs	r3, #33	; 0x21
   1a2a0:	18fb      	adds	r3, r7, r3
   1a2a2:	2201      	movs	r2, #1
   1a2a4:	701a      	strb	r2, [r3, #0]
					}
				}
				if (ucharHigh_To_Low_Flag==1)
   1a2a6:	2321      	movs	r3, #33	; 0x21
   1a2a8:	18fb      	adds	r3, r7, r3
   1a2aa:	781b      	ldrb	r3, [r3, #0]
   1a2ac:	b2db      	uxtb	r3, r3
   1a2ae:	2b01      	cmp	r3, #1
   1a2b0:	d10c      	bne.n	1a2cc <PR2_ISR+0x188>
				{
					// LCD takes data from structThreePhase_state, which should have latest sequence data.
					structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_OK;
   1a2b2:	4b27      	ldr	r3, [pc, #156]	; (1a350 <PR2_ISR+0x20c>)
   1a2b4:	2202      	movs	r2, #2
   1a2b6:	701a      	strb	r2, [r3, #0]
					ucharPhase_Seq_Err_Flag=2;//0=undefined, 1=error, 2=ok
   1a2b8:	4b26      	ldr	r3, [pc, #152]	; (1a354 <PR2_ISR+0x210>)
   1a2ba:	2202      	movs	r2, #2
   1a2bc:	701a      	strb	r2, [r3, #0]
					ucharPhase_Seq_Err_Counter=0;
   1a2be:	4b26      	ldr	r3, [pc, #152]	; (1a358 <PR2_ISR+0x214>)
   1a2c0:	2200      	movs	r2, #0
   1a2c2:	701a      	strb	r2, [r3, #0]
					ucharPhase_Seq_Check_Flag=0;
   1a2c4:	4b18      	ldr	r3, [pc, #96]	; (1a328 <PR2_ISR+0x1e4>)
   1a2c6:	2200      	movs	r2, #0
   1a2c8:	701a      	strb	r2, [r3, #0]
					break;
   1a2ca:	e012      	b.n	1a2f2 <PR2_ISR+0x1ae>
				}
				if ((port_pin_get_input_level(PR2_PIN)==LOW))
   1a2cc:	202b      	movs	r0, #43	; 0x2b
   1a2ce:	4b1d      	ldr	r3, [pc, #116]	; (1a344 <PR2_ISR+0x200>)
   1a2d0:	4798      	blx	r3
   1a2d2:	0003      	movs	r3, r0
   1a2d4:	001a      	movs	r2, r3
   1a2d6:	2301      	movs	r3, #1
   1a2d8:	4053      	eors	r3, r2
   1a2da:	b2db      	uxtb	r3, r3
   1a2dc:	2b00      	cmp	r3, #0
   1a2de:	d107      	bne.n	1a2f0 <PR2_ISR+0x1ac>
			for (unsigned int uintLoop=0;uintLoop<120;uintLoop++)
   1a2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a2e2:	3301      	adds	r3, #1
   1a2e4:	627b      	str	r3, [r7, #36]	; 0x24
   1a2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a2e8:	2b77      	cmp	r3, #119	; 0x77
   1a2ea:	d800      	bhi.n	1a2ee <PR2_ISR+0x1aa>
   1a2ec:	e775      	b.n	1a1da <PR2_ISR+0x96>
   1a2ee:	e000      	b.n	1a2f2 <PR2_ISR+0x1ae>
				{
					break;
   1a2f0:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
		if (++ucharPhase_Seq_Err_Counter>2)
   1a2f2:	4b19      	ldr	r3, [pc, #100]	; (1a358 <PR2_ISR+0x214>)
   1a2f4:	781b      	ldrb	r3, [r3, #0]
   1a2f6:	b2db      	uxtb	r3, r3
   1a2f8:	3301      	adds	r3, #1
   1a2fa:	b2db      	uxtb	r3, r3
   1a2fc:	4a16      	ldr	r2, [pc, #88]	; (1a358 <PR2_ISR+0x214>)
   1a2fe:	1c19      	adds	r1, r3, #0
   1a300:	7011      	strb	r1, [r2, #0]
   1a302:	2b02      	cmp	r3, #2
   1a304:	d90b      	bls.n	1a31e <PR2_ISR+0x1da>
		{
			ucharPhase_Seq_Err_Counter=0;
   1a306:	4b14      	ldr	r3, [pc, #80]	; (1a358 <PR2_ISR+0x214>)
   1a308:	2200      	movs	r2, #0
   1a30a:	701a      	strb	r2, [r3, #0]
			structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_ERROR;
   1a30c:	4b10      	ldr	r3, [pc, #64]	; (1a350 <PR2_ISR+0x20c>)
   1a30e:	2201      	movs	r2, #1
   1a310:	701a      	strb	r2, [r3, #0]
			ucharPhase_Seq_Err_Flag=1;//0=undefined, 1=error, 2=ok
   1a312:	4b10      	ldr	r3, [pc, #64]	; (1a354 <PR2_ISR+0x210>)
   1a314:	2201      	movs	r2, #1
   1a316:	701a      	strb	r2, [r3, #0]
			ucharPhase_Seq_Check_Flag=0;
   1a318:	4b03      	ldr	r3, [pc, #12]	; (1a328 <PR2_ISR+0x1e4>)
   1a31a:	2200      	movs	r2, #0
   1a31c:	701a      	strb	r2, [r3, #0]
		}
	}
}
   1a31e:	46c0      	nop			; (mov r8, r8)
   1a320:	46bd      	mov	sp, r7
   1a322:	b00b      	add	sp, #44	; 0x2c
   1a324:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a326:	46c0      	nop			; (mov r8, r8)
   1a328:	2000000c 	.word	0x2000000c
   1a32c:	2000024c 	.word	0x2000024c
   1a330:	000249dd 	.word	0x000249dd
   1a334:	00001b57 	.word	0x00001b57
   1a338:	00026965 	.word	0x00026965
   1a33c:	00001b58 	.word	0x00001b58
   1a340:	20000001 	.word	0x20000001
   1a344:	000190f1 	.word	0x000190f1
   1a348:	006acfbf 	.word	0x006acfbf
   1a34c:	006acfc0 	.word	0x006acfc0
   1a350:	20000740 	.word	0x20000740
   1a354:	20000248 	.word	0x20000248
   1a358:	20000249 	.word	0x20000249

0001a35c <vTask_10ms_Timer>:

static void vTask_10ms_Timer(void *params)
{
   1a35c:	b580      	push	{r7, lr}
   1a35e:	b084      	sub	sp, #16
   1a360:	af00      	add	r7, sp, #0
   1a362:	6078      	str	r0, [r7, #4]
	TickType_t xLastExecutionGsm_Send_Time;
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
   1a364:	4b12      	ldr	r3, [pc, #72]	; (1a3b0 <vTask_10ms_Timer+0x54>)
   1a366:	4798      	blx	r3
   1a368:	0003      	movs	r3, r0
   1a36a:	60fb      	str	r3, [r7, #12]
	//--------------------------------
	for( ;; )
	{
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (10/portTICK_PERIOD_MS));
   1a36c:	230c      	movs	r3, #12
   1a36e:	18fb      	adds	r3, r7, r3
   1a370:	210a      	movs	r1, #10
   1a372:	0018      	movs	r0, r3
   1a374:	4b0f      	ldr	r3, [pc, #60]	; (1a3b4 <vTask_10ms_Timer+0x58>)
   1a376:	4798      	blx	r3
		if(ucharPhase_Seq_Check_Flag==1)
   1a378:	4b0f      	ldr	r3, [pc, #60]	; (1a3b8 <vTask_10ms_Timer+0x5c>)
   1a37a:	781b      	ldrb	r3, [r3, #0]
   1a37c:	b2db      	uxtb	r3, r3
   1a37e:	2b01      	cmp	r3, #1
   1a380:	d1f4      	bne.n	1a36c <vTask_10ms_Timer+0x10>
		{
			if(++ucharPhase_1_Timer_Counter>=20)
   1a382:	4b0e      	ldr	r3, [pc, #56]	; (1a3bc <vTask_10ms_Timer+0x60>)
   1a384:	781b      	ldrb	r3, [r3, #0]
   1a386:	3301      	adds	r3, #1
   1a388:	b2da      	uxtb	r2, r3
   1a38a:	4b0c      	ldr	r3, [pc, #48]	; (1a3bc <vTask_10ms_Timer+0x60>)
   1a38c:	701a      	strb	r2, [r3, #0]
   1a38e:	4b0b      	ldr	r3, [pc, #44]	; (1a3bc <vTask_10ms_Timer+0x60>)
   1a390:	781b      	ldrb	r3, [r3, #0]
   1a392:	2b13      	cmp	r3, #19
   1a394:	d9ea      	bls.n	1a36c <vTask_10ms_Timer+0x10>
			{
				ucharPhase_1_Timer_Counter=0;
   1a396:	4b09      	ldr	r3, [pc, #36]	; (1a3bc <vTask_10ms_Timer+0x60>)
   1a398:	2200      	movs	r2, #0
   1a39a:	701a      	strb	r2, [r3, #0]
				structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_ERROR;
   1a39c:	4b08      	ldr	r3, [pc, #32]	; (1a3c0 <vTask_10ms_Timer+0x64>)
   1a39e:	2201      	movs	r2, #1
   1a3a0:	701a      	strb	r2, [r3, #0]
				ucharPhase_Seq_Err_Flag=1;//0=undefined, 1=error, 2=ok
   1a3a2:	4b08      	ldr	r3, [pc, #32]	; (1a3c4 <vTask_10ms_Timer+0x68>)
   1a3a4:	2201      	movs	r2, #1
   1a3a6:	701a      	strb	r2, [r3, #0]
				ucharPhase_Seq_Check_Flag=0;
   1a3a8:	4b03      	ldr	r3, [pc, #12]	; (1a3b8 <vTask_10ms_Timer+0x5c>)
   1a3aa:	2200      	movs	r2, #0
   1a3ac:	701a      	strb	r2, [r3, #0]
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (10/portTICK_PERIOD_MS));
   1a3ae:	e7dd      	b.n	1a36c <vTask_10ms_Timer+0x10>
   1a3b0:	0002034d 	.word	0x0002034d
   1a3b4:	0001ff21 	.word	0x0001ff21
   1a3b8:	2000000c 	.word	0x2000000c
   1a3bc:	2000024c 	.word	0x2000024c
   1a3c0:	20000740 	.word	0x20000740
   1a3c4:	20000248 	.word	0x20000248

0001a3c8 <vTask_100ms_Timer>:
		}
	}
}

static void vTask_100ms_Timer(void *params)
{
   1a3c8:	b580      	push	{r7, lr}
   1a3ca:	b084      	sub	sp, #16
   1a3cc:	af00      	add	r7, sp, #0
   1a3ce:	6078      	str	r0, [r7, #4]
	TickType_t xLastExecutionGsm_Send_Time;
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
   1a3d0:	4b17      	ldr	r3, [pc, #92]	; (1a430 <vTask_100ms_Timer+0x68>)
   1a3d2:	4798      	blx	r3
   1a3d4:	0003      	movs	r3, r0
   1a3d6:	60fb      	str	r3, [r7, #12]
	//--------------------------------
	for( ;; )
	{
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (100/portTICK_PERIOD_MS));
   1a3d8:	230c      	movs	r3, #12
   1a3da:	18fb      	adds	r3, r7, r3
   1a3dc:	2164      	movs	r1, #100	; 0x64
   1a3de:	0018      	movs	r0, r3
   1a3e0:	4b14      	ldr	r3, [pc, #80]	; (1a434 <vTask_100ms_Timer+0x6c>)
   1a3e2:	4798      	blx	r3
		
		////////
		//Voltaqe Detect Timer Counter, Reset every 500ms to 0, which triggers the New Voltage Reading Acquisition from ADC.
		if(ucharVoltage_Detect_Timer_Counter++>4)
   1a3e4:	4b14      	ldr	r3, [pc, #80]	; (1a438 <vTask_100ms_Timer+0x70>)
   1a3e6:	781b      	ldrb	r3, [r3, #0]
   1a3e8:	b2db      	uxtb	r3, r3
   1a3ea:	1c5a      	adds	r2, r3, #1
   1a3ec:	b2d1      	uxtb	r1, r2
   1a3ee:	4a12      	ldr	r2, [pc, #72]	; (1a438 <vTask_100ms_Timer+0x70>)
   1a3f0:	7011      	strb	r1, [r2, #0]
   1a3f2:	2b04      	cmp	r3, #4
   1a3f4:	d905      	bls.n	1a402 <vTask_100ms_Timer+0x3a>
		{
			ucharVoltage_Detect_Timer_Counter=0;
   1a3f6:	4b10      	ldr	r3, [pc, #64]	; (1a438 <vTask_100ms_Timer+0x70>)
   1a3f8:	2200      	movs	r2, #0
   1a3fa:	701a      	strb	r2, [r3, #0]
			//Add Flag to enable detection of current, as the Voltage Detect Timer Counter won't be 0, as voltage reading takes 100ms Time.
			ucharCurrent_Detect_Flag=1;
   1a3fc:	4b0f      	ldr	r3, [pc, #60]	; (1a43c <vTask_100ms_Timer+0x74>)
   1a3fe:	2201      	movs	r2, #1
   1a400:	701a      	strb	r2, [r3, #0]
			
		}
		/////////
		if (ucharPhase_Seq_Timer_Counter++>4)
   1a402:	4b0f      	ldr	r3, [pc, #60]	; (1a440 <vTask_100ms_Timer+0x78>)
   1a404:	781b      	ldrb	r3, [r3, #0]
   1a406:	b2db      	uxtb	r3, r3
   1a408:	1c5a      	adds	r2, r3, #1
   1a40a:	b2d1      	uxtb	r1, r2
   1a40c:	4a0c      	ldr	r2, [pc, #48]	; (1a440 <vTask_100ms_Timer+0x78>)
   1a40e:	7011      	strb	r1, [r2, #0]
   1a410:	2b04      	cmp	r3, #4
   1a412:	d9e1      	bls.n	1a3d8 <vTask_100ms_Timer+0x10>
		{
			ucharPhase_Seq_Timer_Counter=0;
   1a414:	4b0a      	ldr	r3, [pc, #40]	; (1a440 <vTask_100ms_Timer+0x78>)
   1a416:	2200      	movs	r2, #0
   1a418:	701a      	strb	r2, [r3, #0]
			ucharPhase_Seq_Check_Flag=1;//0=not check, 1=Check
   1a41a:	4b0a      	ldr	r3, [pc, #40]	; (1a444 <vTask_100ms_Timer+0x7c>)
   1a41c:	2201      	movs	r2, #1
   1a41e:	701a      	strb	r2, [r3, #0]
			ucharPhase_1_Timer_Counter=0;
   1a420:	4b09      	ldr	r3, [pc, #36]	; (1a448 <vTask_100ms_Timer+0x80>)
   1a422:	2200      	movs	r2, #0
   1a424:	701a      	strb	r2, [r3, #0]
			extint_chan_clear_detected(11);
   1a426:	200b      	movs	r0, #11
   1a428:	4b08      	ldr	r3, [pc, #32]	; (1a44c <vTask_100ms_Timer+0x84>)
   1a42a:	4798      	blx	r3
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (100/portTICK_PERIOD_MS));
   1a42c:	e7d4      	b.n	1a3d8 <vTask_100ms_Timer+0x10>
   1a42e:	46c0      	nop			; (mov r8, r8)
   1a430:	0002034d 	.word	0x0002034d
   1a434:	0001ff21 	.word	0x0001ff21
   1a438:	2000000d 	.word	0x2000000d
   1a43c:	2000024b 	.word	0x2000024b
   1a440:	2000024a 	.word	0x2000024a
   1a444:	2000000c 	.word	0x2000000c
   1a448:	2000024c 	.word	0x2000024c
   1a44c:	000191d5 	.word	0x000191d5

0001a450 <should_Detect_New_Voltage>:
		}
	}
}

//Function to check if new Voltage reading should be acquired from the ADC, by checking the timer Variable for reading Voltage with 0.
bool should_Detect_New_Voltage(void) {
   1a450:	b580      	push	{r7, lr}
   1a452:	af00      	add	r7, sp, #0
	return (ucharVoltage_Detect_Timer_Counter == 0);
   1a454:	4b04      	ldr	r3, [pc, #16]	; (1a468 <should_Detect_New_Voltage+0x18>)
   1a456:	781b      	ldrb	r3, [r3, #0]
   1a458:	b2db      	uxtb	r3, r3
   1a45a:	425a      	negs	r2, r3
   1a45c:	4153      	adcs	r3, r2
   1a45e:	b2db      	uxtb	r3, r3
}
   1a460:	0018      	movs	r0, r3
   1a462:	46bd      	mov	sp, r7
   1a464:	bd80      	pop	{r7, pc}
   1a466:	46c0      	nop			; (mov r8, r8)
   1a468:	2000000d 	.word	0x2000000d

0001a46c <detect_battery_voltage_and_percentage>:

void detect_battery_voltage_and_percentage(void)
{
   1a46c:	b590      	push	{r4, r7, lr}
   1a46e:	b083      	sub	sp, #12
   1a470:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
   1a472:	4b25      	ldr	r3, [pc, #148]	; (1a508 <detect_battery_voltage_and_percentage+0x9c>)
   1a474:	681a      	ldr	r2, [r3, #0]
   1a476:	2301      	movs	r3, #1
   1a478:	425b      	negs	r3, r3
   1a47a:	0019      	movs	r1, r3
   1a47c:	0010      	movs	r0, r2
   1a47e:	4b23      	ldr	r3, [pc, #140]	; (1a50c <detect_battery_voltage_and_percentage+0xa0>)
   1a480:	4798      	blx	r3
   1a482:	0003      	movs	r3, r0
   1a484:	2b01      	cmp	r3, #1
   1a486:	d13b      	bne.n	1a500 <detect_battery_voltage_and_percentage+0x94>
	{
		uint32_t bat_v = Read_ADC0(ADC_POSITIVE_INPUT_PIN7,200);
   1a488:	21c8      	movs	r1, #200	; 0xc8
   1a48a:	2007      	movs	r0, #7
   1a48c:	4b20      	ldr	r3, [pc, #128]	; (1a510 <detect_battery_voltage_and_percentage+0xa4>)
   1a48e:	4798      	blx	r3
   1a490:	0003      	movs	r3, r0
   1a492:	603b      	str	r3, [r7, #0]
		Analog_Parameter_Struct.Battery_Voltage = (bat_v * 1457)/1000;
   1a494:	683b      	ldr	r3, [r7, #0]
   1a496:	4a1f      	ldr	r2, [pc, #124]	; (1a514 <detect_battery_voltage_and_percentage+0xa8>)
   1a498:	435a      	muls	r2, r3
   1a49a:	0010      	movs	r0, r2
   1a49c:	4b1e      	ldr	r3, [pc, #120]	; (1a518 <detect_battery_voltage_and_percentage+0xac>)
   1a49e:	22fa      	movs	r2, #250	; 0xfa
   1a4a0:	0091      	lsls	r1, r2, #2
   1a4a2:	4798      	blx	r3
   1a4a4:	0003      	movs	r3, r0
   1a4a6:	001a      	movs	r2, r3
   1a4a8:	4b1c      	ldr	r3, [pc, #112]	; (1a51c <detect_battery_voltage_and_percentage+0xb0>)
   1a4aa:	619a      	str	r2, [r3, #24]
		uint8_t bat_per = 0;
   1a4ac:	1dfb      	adds	r3, r7, #7
   1a4ae:	2200      	movs	r2, #0
   1a4b0:	701a      	strb	r2, [r3, #0]
		
		if (Analog_Parameter_Struct.Battery_Voltage <= 3300)
   1a4b2:	4b1a      	ldr	r3, [pc, #104]	; (1a51c <detect_battery_voltage_and_percentage+0xb0>)
   1a4b4:	699b      	ldr	r3, [r3, #24]
   1a4b6:	4a1a      	ldr	r2, [pc, #104]	; (1a520 <detect_battery_voltage_and_percentage+0xb4>)
   1a4b8:	4293      	cmp	r3, r2
   1a4ba:	d803      	bhi.n	1a4c4 <detect_battery_voltage_and_percentage+0x58>
		{
			bat_per = 0;
   1a4bc:	1dfb      	adds	r3, r7, #7
   1a4be:	2200      	movs	r2, #0
   1a4c0:	701a      	strb	r2, [r3, #0]
   1a4c2:	e012      	b.n	1a4ea <detect_battery_voltage_and_percentage+0x7e>
		}
		else
		{
			//bat_per = ((((float)Analog_Parameter_Struct.Battery_Voltage/1000)-3.3)*100)/0.9;
			bat_per = (Analog_Parameter_Struct.Battery_Voltage-3300)/9;
   1a4c4:	4b15      	ldr	r3, [pc, #84]	; (1a51c <detect_battery_voltage_and_percentage+0xb0>)
   1a4c6:	699b      	ldr	r3, [r3, #24]
   1a4c8:	4a16      	ldr	r2, [pc, #88]	; (1a524 <detect_battery_voltage_and_percentage+0xb8>)
   1a4ca:	189a      	adds	r2, r3, r2
   1a4cc:	4b12      	ldr	r3, [pc, #72]	; (1a518 <detect_battery_voltage_and_percentage+0xac>)
   1a4ce:	2109      	movs	r1, #9
   1a4d0:	0010      	movs	r0, r2
   1a4d2:	4798      	blx	r3
   1a4d4:	0003      	movs	r3, r0
   1a4d6:	001a      	movs	r2, r3
   1a4d8:	1dfb      	adds	r3, r7, #7
   1a4da:	701a      	strb	r2, [r3, #0]
			if (bat_per>100) bat_per=100;
   1a4dc:	1dfb      	adds	r3, r7, #7
   1a4de:	781b      	ldrb	r3, [r3, #0]
   1a4e0:	2b64      	cmp	r3, #100	; 0x64
   1a4e2:	d902      	bls.n	1a4ea <detect_battery_voltage_and_percentage+0x7e>
   1a4e4:	1dfb      	adds	r3, r7, #7
   1a4e6:	2264      	movs	r2, #100	; 0x64
   1a4e8:	701a      	strb	r2, [r3, #0]
		}
		
		Analog_Parameter_Struct.Battery_percentage = bat_per;
   1a4ea:	4b0c      	ldr	r3, [pc, #48]	; (1a51c <detect_battery_voltage_and_percentage+0xb0>)
   1a4ec:	1dfa      	adds	r2, r7, #7
   1a4ee:	7812      	ldrb	r2, [r2, #0]
   1a4f0:	771a      	strb	r2, [r3, #28]
		
		xSemaphoreGive(xADC_Semaphore);
   1a4f2:	4b05      	ldr	r3, [pc, #20]	; (1a508 <detect_battery_voltage_and_percentage+0x9c>)
   1a4f4:	6818      	ldr	r0, [r3, #0]
   1a4f6:	2300      	movs	r3, #0
   1a4f8:	2200      	movs	r2, #0
   1a4fa:	2100      	movs	r1, #0
   1a4fc:	4c0a      	ldr	r4, [pc, #40]	; (1a528 <detect_battery_voltage_and_percentage+0xbc>)
   1a4fe:	47a0      	blx	r4
	}
}
   1a500:	46c0      	nop			; (mov r8, r8)
   1a502:	46bd      	mov	sp, r7
   1a504:	b003      	add	sp, #12
   1a506:	bd90      	pop	{r4, r7, pc}
   1a508:	20000238 	.word	0x20000238
   1a50c:	0001f6e1 	.word	0x0001f6e1
   1a510:	00019c39 	.word	0x00019c39
   1a514:	000005b1 	.word	0x000005b1
   1a518:	000265fd 	.word	0x000265fd
   1a51c:	200006dc 	.word	0x200006dc
   1a520:	00000ce4 	.word	0x00000ce4
   1a524:	fffff31c 	.word	0xfffff31c
   1a528:	0001f241 	.word	0x0001f241

0001a52c <initPhaseRMStruct>:

void initPhaseRMStruct(struct rmsVoltage *phaseRMSStruct)
{
   1a52c:	b580      	push	{r7, lr}
   1a52e:	b084      	sub	sp, #16
   1a530:	af00      	add	r7, sp, #0
   1a532:	6078      	str	r0, [r7, #4]
	phaseRMSStruct->hasZeroReading = true;
   1a534:	687b      	ldr	r3, [r7, #4]
   1a536:	2201      	movs	r2, #1
   1a538:	74da      	strb	r2, [r3, #19]
	phaseRMSStruct->index=0;
   1a53a:	687b      	ldr	r3, [r7, #4]
   1a53c:	2200      	movs	r2, #0
   1a53e:	749a      	strb	r2, [r3, #18]
	phaseRMSStruct->rmsVoltage=0;
   1a540:	687b      	ldr	r3, [r7, #4]
   1a542:	2200      	movs	r2, #0
   1a544:	821a      	strh	r2, [r3, #16]
	for (uint8_t cnt =0;cnt< NO_RMS_VOLTAGE_READINGS;cnt++)
   1a546:	230f      	movs	r3, #15
   1a548:	18fb      	adds	r3, r7, r3
   1a54a:	2200      	movs	r2, #0
   1a54c:	701a      	strb	r2, [r3, #0]
   1a54e:	e00d      	b.n	1a56c <initPhaseRMStruct+0x40>
	{
		phaseRMSStruct->voltRange[cnt]=0;
   1a550:	230f      	movs	r3, #15
   1a552:	18fb      	adds	r3, r7, r3
   1a554:	781a      	ldrb	r2, [r3, #0]
   1a556:	687b      	ldr	r3, [r7, #4]
   1a558:	0052      	lsls	r2, r2, #1
   1a55a:	2100      	movs	r1, #0
   1a55c:	52d1      	strh	r1, [r2, r3]
	for (uint8_t cnt =0;cnt< NO_RMS_VOLTAGE_READINGS;cnt++)
   1a55e:	230f      	movs	r3, #15
   1a560:	18fb      	adds	r3, r7, r3
   1a562:	781a      	ldrb	r2, [r3, #0]
   1a564:	230f      	movs	r3, #15
   1a566:	18fb      	adds	r3, r7, r3
   1a568:	3201      	adds	r2, #1
   1a56a:	701a      	strb	r2, [r3, #0]
   1a56c:	230f      	movs	r3, #15
   1a56e:	18fb      	adds	r3, r7, r3
   1a570:	781b      	ldrb	r3, [r3, #0]
   1a572:	2b07      	cmp	r3, #7
   1a574:	d9ec      	bls.n	1a550 <initPhaseRMStruct+0x24>
	}
}
   1a576:	46c0      	nop			; (mov r8, r8)
   1a578:	46bd      	mov	sp, r7
   1a57a:	b004      	add	sp, #16
   1a57c:	bd80      	pop	{r7, pc}
	...

0001a580 <updateRMSValues>:

void updateRMSValues(struct rmsVoltage *phaseRMSStruct)
{
   1a580:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a582:	b089      	sub	sp, #36	; 0x24
   1a584:	af00      	add	r7, sp, #0
   1a586:	6078      	str	r0, [r7, #4]
	uint8_t cnt;
	uint32_t result=0;
   1a588:	2300      	movs	r3, #0
   1a58a:	61bb      	str	r3, [r7, #24]
	double mean = 0.0;
   1a58c:	2300      	movs	r3, #0
   1a58e:	2400      	movs	r4, #0
   1a590:	613b      	str	r3, [r7, #16]
   1a592:	617c      	str	r4, [r7, #20]
	double root = 0.0;
   1a594:	2300      	movs	r3, #0
   1a596:	2400      	movs	r4, #0
   1a598:	60bb      	str	r3, [r7, #8]
   1a59a:	60fc      	str	r4, [r7, #12]
	phaseRMSStruct->hasZeroReading=false;
   1a59c:	687b      	ldr	r3, [r7, #4]
   1a59e:	2200      	movs	r2, #0
   1a5a0:	74da      	strb	r2, [r3, #19]
	for(cnt=0;cnt<NO_RMS_VOLTAGE_READINGS;cnt++)
   1a5a2:	231f      	movs	r3, #31
   1a5a4:	18fb      	adds	r3, r7, r3
   1a5a6:	2200      	movs	r2, #0
   1a5a8:	701a      	strb	r2, [r3, #0]
   1a5aa:	e036      	b.n	1a61a <updateRMSValues+0x9a>
	{
		if(phaseRMSStruct->voltRange[cnt]==0)
   1a5ac:	231f      	movs	r3, #31
   1a5ae:	18fb      	adds	r3, r7, r3
   1a5b0:	781a      	ldrb	r2, [r3, #0]
   1a5b2:	687b      	ldr	r3, [r7, #4]
   1a5b4:	0052      	lsls	r2, r2, #1
   1a5b6:	5ad3      	ldrh	r3, [r2, r3]
   1a5b8:	2b00      	cmp	r3, #0
   1a5ba:	d102      	bne.n	1a5c2 <updateRMSValues+0x42>
		{
			phaseRMSStruct->hasZeroReading=true;
   1a5bc:	687b      	ldr	r3, [r7, #4]
   1a5be:	2201      	movs	r2, #1
   1a5c0:	74da      	strb	r2, [r3, #19]
		}
		result= result + pow(phaseRMSStruct->voltRange[cnt],2);
   1a5c2:	4b31      	ldr	r3, [pc, #196]	; (1a688 <updateRMSValues+0x108>)
   1a5c4:	69b8      	ldr	r0, [r7, #24]
   1a5c6:	4798      	blx	r3
   1a5c8:	0005      	movs	r5, r0
   1a5ca:	000e      	movs	r6, r1
   1a5cc:	231f      	movs	r3, #31
   1a5ce:	18fb      	adds	r3, r7, r3
   1a5d0:	781a      	ldrb	r2, [r3, #0]
   1a5d2:	687b      	ldr	r3, [r7, #4]
   1a5d4:	0052      	lsls	r2, r2, #1
   1a5d6:	5ad2      	ldrh	r2, [r2, r3]
   1a5d8:	4b2b      	ldr	r3, [pc, #172]	; (1a688 <updateRMSValues+0x108>)
   1a5da:	0010      	movs	r0, r2
   1a5dc:	4798      	blx	r3
   1a5de:	2300      	movs	r3, #0
   1a5e0:	2480      	movs	r4, #128	; 0x80
   1a5e2:	05e4      	lsls	r4, r4, #23
   1a5e4:	001a      	movs	r2, r3
   1a5e6:	0023      	movs	r3, r4
   1a5e8:	4c28      	ldr	r4, [pc, #160]	; (1a68c <updateRMSValues+0x10c>)
   1a5ea:	47a0      	blx	r4
   1a5ec:	0002      	movs	r2, r0
   1a5ee:	000b      	movs	r3, r1
   1a5f0:	4c27      	ldr	r4, [pc, #156]	; (1a690 <updateRMSValues+0x110>)
   1a5f2:	0028      	movs	r0, r5
   1a5f4:	0031      	movs	r1, r6
   1a5f6:	47a0      	blx	r4
   1a5f8:	0003      	movs	r3, r0
   1a5fa:	000c      	movs	r4, r1
   1a5fc:	0019      	movs	r1, r3
   1a5fe:	0022      	movs	r2, r4
   1a600:	4b24      	ldr	r3, [pc, #144]	; (1a694 <updateRMSValues+0x114>)
   1a602:	0008      	movs	r0, r1
   1a604:	0011      	movs	r1, r2
   1a606:	4798      	blx	r3
   1a608:	0003      	movs	r3, r0
   1a60a:	61bb      	str	r3, [r7, #24]
	for(cnt=0;cnt<NO_RMS_VOLTAGE_READINGS;cnt++)
   1a60c:	231f      	movs	r3, #31
   1a60e:	18fb      	adds	r3, r7, r3
   1a610:	781a      	ldrb	r2, [r3, #0]
   1a612:	231f      	movs	r3, #31
   1a614:	18fb      	adds	r3, r7, r3
   1a616:	3201      	adds	r2, #1
   1a618:	701a      	strb	r2, [r3, #0]
   1a61a:	231f      	movs	r3, #31
   1a61c:	18fb      	adds	r3, r7, r3
   1a61e:	781b      	ldrb	r3, [r3, #0]
   1a620:	2b07      	cmp	r3, #7
   1a622:	d9c3      	bls.n	1a5ac <updateRMSValues+0x2c>
	}
	mean= result / (float)NO_RMS_VOLTAGE_READINGS;
   1a624:	4b1c      	ldr	r3, [pc, #112]	; (1a698 <updateRMSValues+0x118>)
   1a626:	69b8      	ldr	r0, [r7, #24]
   1a628:	4798      	blx	r3
   1a62a:	1c02      	adds	r2, r0, #0
   1a62c:	4b1b      	ldr	r3, [pc, #108]	; (1a69c <updateRMSValues+0x11c>)
   1a62e:	2182      	movs	r1, #130	; 0x82
   1a630:	05c9      	lsls	r1, r1, #23
   1a632:	1c10      	adds	r0, r2, #0
   1a634:	4798      	blx	r3
   1a636:	1c03      	adds	r3, r0, #0
   1a638:	1c1a      	adds	r2, r3, #0
   1a63a:	4b19      	ldr	r3, [pc, #100]	; (1a6a0 <updateRMSValues+0x120>)
   1a63c:	1c10      	adds	r0, r2, #0
   1a63e:	4798      	blx	r3
   1a640:	0003      	movs	r3, r0
   1a642:	000c      	movs	r4, r1
   1a644:	613b      	str	r3, [r7, #16]
   1a646:	617c      	str	r4, [r7, #20]
	root = (uint32_t) (sqrt(mean));
   1a648:	693b      	ldr	r3, [r7, #16]
   1a64a:	697c      	ldr	r4, [r7, #20]
   1a64c:	0018      	movs	r0, r3
   1a64e:	0021      	movs	r1, r4
   1a650:	4b14      	ldr	r3, [pc, #80]	; (1a6a4 <updateRMSValues+0x124>)
   1a652:	4798      	blx	r3
   1a654:	000a      	movs	r2, r1
   1a656:	0001      	movs	r1, r0
   1a658:	4b0e      	ldr	r3, [pc, #56]	; (1a694 <updateRMSValues+0x114>)
   1a65a:	0008      	movs	r0, r1
   1a65c:	0011      	movs	r1, r2
   1a65e:	4798      	blx	r3
   1a660:	0002      	movs	r2, r0
   1a662:	4b09      	ldr	r3, [pc, #36]	; (1a688 <updateRMSValues+0x108>)
   1a664:	0010      	movs	r0, r2
   1a666:	4798      	blx	r3
   1a668:	0003      	movs	r3, r0
   1a66a:	000c      	movs	r4, r1
   1a66c:	60bb      	str	r3, [r7, #8]
   1a66e:	60fc      	str	r4, [r7, #12]
	
	phaseRMSStruct->rmsVoltage = (uint16_t) root;
   1a670:	4b08      	ldr	r3, [pc, #32]	; (1a694 <updateRMSValues+0x114>)
   1a672:	68b8      	ldr	r0, [r7, #8]
   1a674:	68f9      	ldr	r1, [r7, #12]
   1a676:	4798      	blx	r3
   1a678:	0003      	movs	r3, r0
   1a67a:	b29a      	uxth	r2, r3
   1a67c:	687b      	ldr	r3, [r7, #4]
   1a67e:	821a      	strh	r2, [r3, #16]
}
   1a680:	46c0      	nop			; (mov r8, r8)
   1a682:	46bd      	mov	sp, r7
   1a684:	b009      	add	sp, #36	; 0x24
   1a686:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a688:	00028c91 	.word	0x00028c91
   1a68c:	00025369 	.word	0x00025369
   1a690:	000271b1 	.word	0x000271b1
   1a694:	000269f9 	.word	0x000269f9
   1a698:	00027125 	.word	0x00027125
   1a69c:	00026bb5 	.word	0x00026bb5
   1a6a0:	00028d01 	.word	0x00028d01
   1a6a4:	000256c1 	.word	0x000256c1

0001a6a8 <filterVoltage>:

uint16_t filterVoltage(enum phaseReading phase,uint16_t voltReading)
{
   1a6a8:	b590      	push	{r4, r7, lr}
   1a6aa:	b085      	sub	sp, #20
   1a6ac:	af00      	add	r7, sp, #0
   1a6ae:	0002      	movs	r2, r0
   1a6b0:	1dfb      	adds	r3, r7, #7
   1a6b2:	701a      	strb	r2, [r3, #0]
   1a6b4:	1d3b      	adds	r3, r7, #4
   1a6b6:	1c0a      	adds	r2, r1, #0
   1a6b8:	801a      	strh	r2, [r3, #0]
	struct rmsVoltage *p1;
	if(phase==PHASE_RY)
   1a6ba:	1dfb      	adds	r3, r7, #7
   1a6bc:	781b      	ldrb	r3, [r3, #0]
   1a6be:	2b00      	cmp	r3, #0
   1a6c0:	d102      	bne.n	1a6c8 <filterVoltage+0x20>
	{
		p1 = &struct_rmsRY;
   1a6c2:	4b28      	ldr	r3, [pc, #160]	; (1a764 <filterVoltage+0xbc>)
   1a6c4:	60fb      	str	r3, [r7, #12]
   1a6c6:	e00c      	b.n	1a6e2 <filterVoltage+0x3a>
	}
	else if(phase==PHASE_YB)
   1a6c8:	1dfb      	adds	r3, r7, #7
   1a6ca:	781b      	ldrb	r3, [r3, #0]
   1a6cc:	2b01      	cmp	r3, #1
   1a6ce:	d102      	bne.n	1a6d6 <filterVoltage+0x2e>
	{
		p1 = &struct_rmsYB;
   1a6d0:	4b25      	ldr	r3, [pc, #148]	; (1a768 <filterVoltage+0xc0>)
   1a6d2:	60fb      	str	r3, [r7, #12]
   1a6d4:	e005      	b.n	1a6e2 <filterVoltage+0x3a>
	}
	else if(phase==PHASE_BR)
   1a6d6:	1dfb      	adds	r3, r7, #7
   1a6d8:	781b      	ldrb	r3, [r3, #0]
   1a6da:	2b02      	cmp	r3, #2
   1a6dc:	d101      	bne.n	1a6e2 <filterVoltage+0x3a>
	{
		p1 = &struct_rmsBR;
   1a6de:	4b23      	ldr	r3, [pc, #140]	; (1a76c <filterVoltage+0xc4>)
   1a6e0:	60fb      	str	r3, [r7, #12]
	}
	
	p1->voltRange[p1->index%NO_RMS_VOLTAGE_READINGS]=voltReading;
   1a6e2:	68fb      	ldr	r3, [r7, #12]
   1a6e4:	7c9b      	ldrb	r3, [r3, #18]
   1a6e6:	001a      	movs	r2, r3
   1a6e8:	2307      	movs	r3, #7
   1a6ea:	401a      	ands	r2, r3
   1a6ec:	68fb      	ldr	r3, [r7, #12]
   1a6ee:	0052      	lsls	r2, r2, #1
   1a6f0:	1d39      	adds	r1, r7, #4
   1a6f2:	8809      	ldrh	r1, [r1, #0]
   1a6f4:	52d1      	strh	r1, [r2, r3]
	p1->index = ((p1->index) + 1 )%NO_RMS_VOLTAGE_READINGS;
   1a6f6:	68fb      	ldr	r3, [r7, #12]
   1a6f8:	7c9b      	ldrb	r3, [r3, #18]
   1a6fa:	3301      	adds	r3, #1
   1a6fc:	4a1c      	ldr	r2, [pc, #112]	; (1a770 <filterVoltage+0xc8>)
   1a6fe:	4013      	ands	r3, r2
   1a700:	d504      	bpl.n	1a70c <filterVoltage+0x64>
   1a702:	3b01      	subs	r3, #1
   1a704:	2208      	movs	r2, #8
   1a706:	4252      	negs	r2, r2
   1a708:	4313      	orrs	r3, r2
   1a70a:	3301      	adds	r3, #1
   1a70c:	b2da      	uxtb	r2, r3
   1a70e:	68fb      	ldr	r3, [r7, #12]
   1a710:	749a      	strb	r2, [r3, #18]
	
	updateRMSValues(p1);
   1a712:	68fb      	ldr	r3, [r7, #12]
   1a714:	0018      	movs	r0, r3
   1a716:	4b17      	ldr	r3, [pc, #92]	; (1a774 <filterVoltage+0xcc>)
   1a718:	4798      	blx	r3
	
	//if(voltReading > p1->rmsVoltage)
	{
		if(p1->hasZeroReading)
   1a71a:	68fb      	ldr	r3, [r7, #12]
   1a71c:	7cdb      	ldrb	r3, [r3, #19]
   1a71e:	2b00      	cmp	r3, #0
   1a720:	d002      	beq.n	1a728 <filterVoltage+0x80>
		{
			return voltReading;
   1a722:	1d3b      	adds	r3, r7, #4
   1a724:	881b      	ldrh	r3, [r3, #0]
   1a726:	e019      	b.n	1a75c <filterVoltage+0xb4>
		
		//if ((voltReading - p1->rmsVoltage)>(p1->rmsVoltage * 6/100))
		//{
		//return p1->rmsVoltage;
		//}
		if((p1->rmsVoltage - voltReading)<(p1->rmsVoltage * 10/100))
   1a728:	68fb      	ldr	r3, [r7, #12]
   1a72a:	8a1b      	ldrh	r3, [r3, #16]
   1a72c:	001a      	movs	r2, r3
   1a72e:	1d3b      	adds	r3, r7, #4
   1a730:	881b      	ldrh	r3, [r3, #0]
   1a732:	1ad4      	subs	r4, r2, r3
   1a734:	68fb      	ldr	r3, [r7, #12]
   1a736:	8a1b      	ldrh	r3, [r3, #16]
   1a738:	001a      	movs	r2, r3
   1a73a:	0013      	movs	r3, r2
   1a73c:	009b      	lsls	r3, r3, #2
   1a73e:	189b      	adds	r3, r3, r2
   1a740:	005b      	lsls	r3, r3, #1
   1a742:	001a      	movs	r2, r3
   1a744:	4b0c      	ldr	r3, [pc, #48]	; (1a778 <filterVoltage+0xd0>)
   1a746:	2164      	movs	r1, #100	; 0x64
   1a748:	0010      	movs	r0, r2
   1a74a:	4798      	blx	r3
   1a74c:	0003      	movs	r3, r0
   1a74e:	429c      	cmp	r4, r3
   1a750:	da02      	bge.n	1a758 <filterVoltage+0xb0>
		{
			return p1->rmsVoltage;
   1a752:	68fb      	ldr	r3, [r7, #12]
   1a754:	8a1b      	ldrh	r3, [r3, #16]
   1a756:	e001      	b.n	1a75c <filterVoltage+0xb4>
		}
		else
		{
			return voltReading;
   1a758:	1d3b      	adds	r3, r7, #4
   1a75a:	881b      	ldrh	r3, [r3, #0]
		}
	}
	
	return voltReading;
}
   1a75c:	0018      	movs	r0, r3
   1a75e:	46bd      	mov	sp, r7
   1a760:	b005      	add	sp, #20
   1a762:	bd90      	pop	{r4, r7, pc}
   1a764:	200007a8 	.word	0x200007a8
   1a768:	20000724 	.word	0x20000724
   1a76c:	200007dc 	.word	0x200007dc
   1a770:	80000007 	.word	0x80000007
   1a774:	0001a581 	.word	0x0001a581
   1a778:	00026711 	.word	0x00026711

0001a77c <detect_Three_Phase_Voltage>:

//Function to save the 3 phase voltage from ADC in to the structure, ADC values are filtered, and multiplied by factor here.
void detect_Three_Phase_Voltage(void) {
   1a77c:	b590      	push	{r4, r7, lr}
   1a77e:	b085      	sub	sp, #20
   1a780:	af00      	add	r7, sp, #0
	
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
   1a782:	4b48      	ldr	r3, [pc, #288]	; (1a8a4 <detect_Three_Phase_Voltage+0x128>)
   1a784:	681a      	ldr	r2, [r3, #0]
   1a786:	2301      	movs	r3, #1
   1a788:	425b      	negs	r3, r3
   1a78a:	0019      	movs	r1, r3
   1a78c:	0010      	movs	r0, r2
   1a78e:	4b46      	ldr	r3, [pc, #280]	; (1a8a8 <detect_Three_Phase_Voltage+0x12c>)
   1a790:	4798      	blx	r3
   1a792:	0003      	movs	r3, r0
   1a794:	2b01      	cmp	r3, #1
   1a796:	d000      	beq.n	1a79a <detect_Three_Phase_Voltage+0x1e>
   1a798:	e080      	b.n	1a89c <detect_Three_Phase_Voltage+0x120>
	{
		//int32_t adcRY = Read_ADC0(ADC_POSITIVE_INPUT_PIN19,2000);
		int32_t adcRY = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN19);
   1a79a:	2013      	movs	r0, #19
   1a79c:	4b43      	ldr	r3, [pc, #268]	; (1a8ac <detect_Three_Phase_Voltage+0x130>)
   1a79e:	4798      	blx	r3
   1a7a0:	0003      	movs	r3, r0
   1a7a2:	60fb      	str	r3, [r7, #12]
		adcRY = (adcRY-10);
   1a7a4:	68fb      	ldr	r3, [r7, #12]
   1a7a6:	3b0a      	subs	r3, #10
   1a7a8:	60fb      	str	r3, [r7, #12]
		if (adcRY<0)
   1a7aa:	68fb      	ldr	r3, [r7, #12]
   1a7ac:	2b00      	cmp	r3, #0
   1a7ae:	da02      	bge.n	1a7b6 <detect_Three_Phase_Voltage+0x3a>
		{
			adcRY = 0;
   1a7b0:	2300      	movs	r3, #0
   1a7b2:	60fb      	str	r3, [r7, #12]
   1a7b4:	e00f      	b.n	1a7d6 <detect_Three_Phase_Voltage+0x5a>
		}
		else
		{
			adcRY = (((adcRY-10)*655)/1000);
   1a7b6:	68fb      	ldr	r3, [r7, #12]
   1a7b8:	3b0a      	subs	r3, #10
   1a7ba:	4a3d      	ldr	r2, [pc, #244]	; (1a8b0 <detect_Three_Phase_Voltage+0x134>)
   1a7bc:	435a      	muls	r2, r3
   1a7be:	0010      	movs	r0, r2
   1a7c0:	4b3c      	ldr	r3, [pc, #240]	; (1a8b4 <detect_Three_Phase_Voltage+0x138>)
   1a7c2:	22fa      	movs	r2, #250	; 0xfa
   1a7c4:	0091      	lsls	r1, r2, #2
   1a7c6:	4798      	blx	r3
   1a7c8:	0003      	movs	r3, r0
   1a7ca:	60fb      	str	r3, [r7, #12]
			if (adcRY<0)
   1a7cc:	68fb      	ldr	r3, [r7, #12]
   1a7ce:	2b00      	cmp	r3, #0
   1a7d0:	da01      	bge.n	1a7d6 <detect_Three_Phase_Voltage+0x5a>
			{
				adcRY = 0;
   1a7d2:	2300      	movs	r3, #0
   1a7d4:	60fb      	str	r3, [r7, #12]
			}
		}
		//int32_t adcYB = Read_ADC0(ADC_POSITIVE_INPUT_PIN18,2000);
		int32_t adcYB = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN18);
   1a7d6:	2012      	movs	r0, #18
   1a7d8:	4b34      	ldr	r3, [pc, #208]	; (1a8ac <detect_Three_Phase_Voltage+0x130>)
   1a7da:	4798      	blx	r3
   1a7dc:	0003      	movs	r3, r0
   1a7de:	60bb      	str	r3, [r7, #8]
		adcYB = (adcYB-10);
   1a7e0:	68bb      	ldr	r3, [r7, #8]
   1a7e2:	3b0a      	subs	r3, #10
   1a7e4:	60bb      	str	r3, [r7, #8]
		if (adcYB<0)
   1a7e6:	68bb      	ldr	r3, [r7, #8]
   1a7e8:	2b00      	cmp	r3, #0
   1a7ea:	da02      	bge.n	1a7f2 <detect_Three_Phase_Voltage+0x76>
		{
			adcYB = 0;
   1a7ec:	2300      	movs	r3, #0
   1a7ee:	60bb      	str	r3, [r7, #8]
   1a7f0:	e00f      	b.n	1a812 <detect_Three_Phase_Voltage+0x96>
		}
		else
		{
			adcYB = (((adcYB-10)*655)/1000);
   1a7f2:	68bb      	ldr	r3, [r7, #8]
   1a7f4:	3b0a      	subs	r3, #10
   1a7f6:	4a2e      	ldr	r2, [pc, #184]	; (1a8b0 <detect_Three_Phase_Voltage+0x134>)
   1a7f8:	435a      	muls	r2, r3
   1a7fa:	0010      	movs	r0, r2
   1a7fc:	4b2d      	ldr	r3, [pc, #180]	; (1a8b4 <detect_Three_Phase_Voltage+0x138>)
   1a7fe:	22fa      	movs	r2, #250	; 0xfa
   1a800:	0091      	lsls	r1, r2, #2
   1a802:	4798      	blx	r3
   1a804:	0003      	movs	r3, r0
   1a806:	60bb      	str	r3, [r7, #8]
			if (adcYB<0)
   1a808:	68bb      	ldr	r3, [r7, #8]
   1a80a:	2b00      	cmp	r3, #0
   1a80c:	da01      	bge.n	1a812 <detect_Three_Phase_Voltage+0x96>
			{
				adcYB = 0;
   1a80e:	2300      	movs	r3, #0
   1a810:	60bb      	str	r3, [r7, #8]
			}
		}

		//int32_t adcBR =  Read_ADC0(ADC_POSITIVE_INPUT_PIN17,2000);
		int32_t adcBR = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN17);
   1a812:	2011      	movs	r0, #17
   1a814:	4b25      	ldr	r3, [pc, #148]	; (1a8ac <detect_Three_Phase_Voltage+0x130>)
   1a816:	4798      	blx	r3
   1a818:	0003      	movs	r3, r0
   1a81a:	607b      	str	r3, [r7, #4]
		adcBR = (adcBR-12);
   1a81c:	687b      	ldr	r3, [r7, #4]
   1a81e:	3b0c      	subs	r3, #12
   1a820:	607b      	str	r3, [r7, #4]
		if (adcBR<0)
   1a822:	687b      	ldr	r3, [r7, #4]
   1a824:	2b00      	cmp	r3, #0
   1a826:	da02      	bge.n	1a82e <detect_Three_Phase_Voltage+0xb2>
		{
			adcBR = 0;
   1a828:	2300      	movs	r3, #0
   1a82a:	607b      	str	r3, [r7, #4]
   1a82c:	e00f      	b.n	1a84e <detect_Three_Phase_Voltage+0xd2>
		}
		else
		{
			adcBR = (((adcBR-12)*670)/1000);
   1a82e:	687b      	ldr	r3, [r7, #4]
   1a830:	3b0c      	subs	r3, #12
   1a832:	4a21      	ldr	r2, [pc, #132]	; (1a8b8 <detect_Three_Phase_Voltage+0x13c>)
   1a834:	435a      	muls	r2, r3
   1a836:	0010      	movs	r0, r2
   1a838:	4b1e      	ldr	r3, [pc, #120]	; (1a8b4 <detect_Three_Phase_Voltage+0x138>)
   1a83a:	22fa      	movs	r2, #250	; 0xfa
   1a83c:	0091      	lsls	r1, r2, #2
   1a83e:	4798      	blx	r3
   1a840:	0003      	movs	r3, r0
   1a842:	607b      	str	r3, [r7, #4]
			if (adcBR<0)
   1a844:	687b      	ldr	r3, [r7, #4]
   1a846:	2b00      	cmp	r3, #0
   1a848:	da01      	bge.n	1a84e <detect_Three_Phase_Voltage+0xd2>
			{
				adcBR = 0;
   1a84a:	2300      	movs	r3, #0
   1a84c:	607b      	str	r3, [r7, #4]
			}
		}
		
		Analog_Parameter_Struct.PhaseRY_Voltage = filterVoltage(PHASE_RY,adcRY);
   1a84e:	68fb      	ldr	r3, [r7, #12]
   1a850:	b29b      	uxth	r3, r3
   1a852:	0019      	movs	r1, r3
   1a854:	2000      	movs	r0, #0
   1a856:	4b19      	ldr	r3, [pc, #100]	; (1a8bc <detect_Three_Phase_Voltage+0x140>)
   1a858:	4798      	blx	r3
   1a85a:	0003      	movs	r3, r0
   1a85c:	001a      	movs	r2, r3
   1a85e:	4b18      	ldr	r3, [pc, #96]	; (1a8c0 <detect_Three_Phase_Voltage+0x144>)
   1a860:	601a      	str	r2, [r3, #0]
		Analog_Parameter_Struct.PhaseYB_Voltage = filterVoltage(PHASE_YB,adcYB);
   1a862:	68bb      	ldr	r3, [r7, #8]
   1a864:	b29b      	uxth	r3, r3
   1a866:	0019      	movs	r1, r3
   1a868:	2001      	movs	r0, #1
   1a86a:	4b14      	ldr	r3, [pc, #80]	; (1a8bc <detect_Three_Phase_Voltage+0x140>)
   1a86c:	4798      	blx	r3
   1a86e:	0003      	movs	r3, r0
   1a870:	001a      	movs	r2, r3
   1a872:	4b13      	ldr	r3, [pc, #76]	; (1a8c0 <detect_Three_Phase_Voltage+0x144>)
   1a874:	605a      	str	r2, [r3, #4]
		Analog_Parameter_Struct.PhaseBR_Voltage = filterVoltage(PHASE_BR,adcBR);
   1a876:	687b      	ldr	r3, [r7, #4]
   1a878:	b29b      	uxth	r3, r3
   1a87a:	0019      	movs	r1, r3
   1a87c:	2002      	movs	r0, #2
   1a87e:	4b0f      	ldr	r3, [pc, #60]	; (1a8bc <detect_Three_Phase_Voltage+0x140>)
   1a880:	4798      	blx	r3
   1a882:	0003      	movs	r3, r0
   1a884:	001a      	movs	r2, r3
   1a886:	4b0e      	ldr	r3, [pc, #56]	; (1a8c0 <detect_Three_Phase_Voltage+0x144>)
   1a888:	609a      	str	r2, [r3, #8]
		
		//Analog_Parameter_Struct.PhaseRY_Voltage = adcRY;
		//Analog_Parameter_Struct.PhaseYB_Voltage = adcYB;
		//Analog_Parameter_Struct.PhaseBR_Voltage = adcBR;
		
		set_Three_Phase_State_From_Voltage();
   1a88a:	4b0e      	ldr	r3, [pc, #56]	; (1a8c4 <detect_Three_Phase_Voltage+0x148>)
   1a88c:	4798      	blx	r3
		xSemaphoreGive(xADC_Semaphore);
   1a88e:	4b05      	ldr	r3, [pc, #20]	; (1a8a4 <detect_Three_Phase_Voltage+0x128>)
   1a890:	6818      	ldr	r0, [r3, #0]
   1a892:	2300      	movs	r3, #0
   1a894:	2200      	movs	r2, #0
   1a896:	2100      	movs	r1, #0
   1a898:	4c0b      	ldr	r4, [pc, #44]	; (1a8c8 <detect_Three_Phase_Voltage+0x14c>)
   1a89a:	47a0      	blx	r4
	}
}
   1a89c:	46c0      	nop			; (mov r8, r8)
   1a89e:	46bd      	mov	sp, r7
   1a8a0:	b005      	add	sp, #20
   1a8a2:	bd90      	pop	{r4, r7, pc}
   1a8a4:	20000238 	.word	0x20000238
   1a8a8:	0001f6e1 	.word	0x0001f6e1
   1a8ac:	00019cf5 	.word	0x00019cf5
   1a8b0:	0000028f 	.word	0x0000028f
   1a8b4:	00026711 	.word	0x00026711
   1a8b8:	0000029e 	.word	0x0000029e
   1a8bc:	0001a6a9 	.word	0x0001a6a9
   1a8c0:	200006dc 	.word	0x200006dc
   1a8c4:	0001a8cd 	.word	0x0001a8cd
   1a8c8:	0001f241 	.word	0x0001f241

0001a8cc <set_Three_Phase_State_From_Voltage>:

//Function to set the Three Phase State from acquired voltage
void set_Three_Phase_State_From_Voltage(void) {
   1a8cc:	b580      	push	{r7, lr}
   1a8ce:	b082      	sub	sp, #8
   1a8d0:	af00      	add	r7, sp, #0
	
	uint8_t temp_phase_state = structThreePhase_state.u8t_phase_ac_state;		//save last AC Phase State, in case AC Phase State is going to change
   1a8d2:	1dfb      	adds	r3, r7, #7
   1a8d4:	4a2e      	ldr	r2, [pc, #184]	; (1a990 <set_Three_Phase_State_From_Voltage+0xc4>)
   1a8d6:	7852      	ldrb	r2, [r2, #1]
   1a8d8:	701a      	strb	r2, [r3, #0]
	
	
	if ((Analog_Parameter_Struct.PhaseRY_Voltage < 40) &&
   1a8da:	4b2e      	ldr	r3, [pc, #184]	; (1a994 <set_Three_Phase_State_From_Voltage+0xc8>)
   1a8dc:	681b      	ldr	r3, [r3, #0]
   1a8de:	2b27      	cmp	r3, #39	; 0x27
   1a8e0:	d80b      	bhi.n	1a8fa <set_Three_Phase_State_From_Voltage+0x2e>
	(Analog_Parameter_Struct.PhaseYB_Voltage < 40) &&
   1a8e2:	4b2c      	ldr	r3, [pc, #176]	; (1a994 <set_Three_Phase_State_From_Voltage+0xc8>)
   1a8e4:	685b      	ldr	r3, [r3, #4]
	if ((Analog_Parameter_Struct.PhaseRY_Voltage < 40) &&
   1a8e6:	2b27      	cmp	r3, #39	; 0x27
   1a8e8:	d807      	bhi.n	1a8fa <set_Three_Phase_State_From_Voltage+0x2e>
	(Analog_Parameter_Struct.PhaseBR_Voltage < 40))				// if All phase volt, less than 40
   1a8ea:	4b2a      	ldr	r3, [pc, #168]	; (1a994 <set_Three_Phase_State_From_Voltage+0xc8>)
   1a8ec:	689b      	ldr	r3, [r3, #8]
	(Analog_Parameter_Struct.PhaseYB_Voltage < 40) &&
   1a8ee:	2b27      	cmp	r3, #39	; 0x27
   1a8f0:	d803      	bhi.n	1a8fa <set_Three_Phase_State_From_Voltage+0x2e>
	{
		structThreePhase_state.u8t_phase_ac_state = AC_OFF; //no phase is present, light is cut off
   1a8f2:	4b27      	ldr	r3, [pc, #156]	; (1a990 <set_Three_Phase_State_From_Voltage+0xc4>)
   1a8f4:	2200      	movs	r2, #0
   1a8f6:	705a      	strb	r2, [r3, #1]
   1a8f8:	e02a      	b.n	1a950 <set_Three_Phase_State_From_Voltage+0x84>
	}
	else if((abs(Analog_Parameter_Struct.PhaseRY_Voltage-Analog_Parameter_Struct.PhaseYB_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
   1a8fa:	4b26      	ldr	r3, [pc, #152]	; (1a994 <set_Three_Phase_State_From_Voltage+0xc8>)
   1a8fc:	681a      	ldr	r2, [r3, #0]
   1a8fe:	4b25      	ldr	r3, [pc, #148]	; (1a994 <set_Three_Phase_State_From_Voltage+0xc8>)
   1a900:	685b      	ldr	r3, [r3, #4]
   1a902:	1ad3      	subs	r3, r2, r3
   1a904:	17da      	asrs	r2, r3, #31
   1a906:	189b      	adds	r3, r3, r2
   1a908:	4053      	eors	r3, r2
   1a90a:	4a23      	ldr	r2, [pc, #140]	; (1a998 <set_Three_Phase_State_From_Voltage+0xcc>)
   1a90c:	8c52      	ldrh	r2, [r2, #34]	; 0x22
   1a90e:	4293      	cmp	r3, r2
   1a910:	dc17      	bgt.n	1a942 <set_Three_Phase_State_From_Voltage+0x76>
	(abs(Analog_Parameter_Struct.PhaseYB_Voltage-Analog_Parameter_Struct.PhaseBR_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
   1a912:	4b20      	ldr	r3, [pc, #128]	; (1a994 <set_Three_Phase_State_From_Voltage+0xc8>)
   1a914:	685a      	ldr	r2, [r3, #4]
   1a916:	4b1f      	ldr	r3, [pc, #124]	; (1a994 <set_Three_Phase_State_From_Voltage+0xc8>)
   1a918:	689b      	ldr	r3, [r3, #8]
   1a91a:	1ad3      	subs	r3, r2, r3
   1a91c:	17da      	asrs	r2, r3, #31
   1a91e:	189b      	adds	r3, r3, r2
   1a920:	4053      	eors	r3, r2
   1a922:	4a1d      	ldr	r2, [pc, #116]	; (1a998 <set_Three_Phase_State_From_Voltage+0xcc>)
   1a924:	8c52      	ldrh	r2, [r2, #34]	; 0x22
	else if((abs(Analog_Parameter_Struct.PhaseRY_Voltage-Analog_Parameter_Struct.PhaseYB_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
   1a926:	4293      	cmp	r3, r2
   1a928:	dc0b      	bgt.n	1a942 <set_Three_Phase_State_From_Voltage+0x76>
	(abs(Analog_Parameter_Struct.PhaseBR_Voltage-Analog_Parameter_Struct.PhaseRY_Voltage)>user_settings_parameter_struct.singlePhasingVoltage))  // if diff betweeen any 2 phases > 80
   1a92a:	4b1a      	ldr	r3, [pc, #104]	; (1a994 <set_Three_Phase_State_From_Voltage+0xc8>)
   1a92c:	689a      	ldr	r2, [r3, #8]
   1a92e:	4b19      	ldr	r3, [pc, #100]	; (1a994 <set_Three_Phase_State_From_Voltage+0xc8>)
   1a930:	681b      	ldr	r3, [r3, #0]
   1a932:	1ad3      	subs	r3, r2, r3
   1a934:	17da      	asrs	r2, r3, #31
   1a936:	189b      	adds	r3, r3, r2
   1a938:	4053      	eors	r3, r2
   1a93a:	4a17      	ldr	r2, [pc, #92]	; (1a998 <set_Three_Phase_State_From_Voltage+0xcc>)
   1a93c:	8c52      	ldrh	r2, [r2, #34]	; 0x22
	(abs(Analog_Parameter_Struct.PhaseYB_Voltage-Analog_Parameter_Struct.PhaseBR_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
   1a93e:	4293      	cmp	r3, r2
   1a940:	dd03      	ble.n	1a94a <set_Three_Phase_State_From_Voltage+0x7e>
	{
		structThreePhase_state.u8t_phase_ac_state = AC_2PH;//Single phasing Occured
   1a942:	4b13      	ldr	r3, [pc, #76]	; (1a990 <set_Three_Phase_State_From_Voltage+0xc4>)
   1a944:	2202      	movs	r2, #2
   1a946:	705a      	strb	r2, [r3, #1]
   1a948:	e002      	b.n	1a950 <set_Three_Phase_State_From_Voltage+0x84>
	}
	else  //all Phase are present
	{
		structThreePhase_state.u8t_phase_ac_state = AC_3PH;
   1a94a:	4b11      	ldr	r3, [pc, #68]	; (1a990 <set_Three_Phase_State_From_Voltage+0xc4>)
   1a94c:	2203      	movs	r2, #3
   1a94e:	705a      	strb	r2, [r3, #1]
	}
	
	if (current_three_phase_state != structThreePhase_state.u8t_phase_ac_state)
   1a950:	4b0f      	ldr	r3, [pc, #60]	; (1a990 <set_Three_Phase_State_From_Voltage+0xc4>)
   1a952:	785b      	ldrb	r3, [r3, #1]
   1a954:	b2da      	uxtb	r2, r3
   1a956:	4b11      	ldr	r3, [pc, #68]	; (1a99c <set_Three_Phase_State_From_Voltage+0xd0>)
   1a958:	781b      	ldrb	r3, [r3, #0]
   1a95a:	b2db      	uxtb	r3, r3
   1a95c:	429a      	cmp	r2, r3
   1a95e:	d012      	beq.n	1a986 <set_Three_Phase_State_From_Voltage+0xba>
	{
		if(!motorRelatedVoltageBypassOn)
   1a960:	4b0f      	ldr	r3, [pc, #60]	; (1a9a0 <set_Three_Phase_State_From_Voltage+0xd4>)
   1a962:	781b      	ldrb	r3, [r3, #0]
   1a964:	2201      	movs	r2, #1
   1a966:	4053      	eors	r3, r2
   1a968:	b2db      	uxtb	r3, r3
   1a96a:	2b00      	cmp	r3, #0
   1a96c:	d00b      	beq.n	1a986 <set_Three_Phase_State_From_Voltage+0xba>
		{
			last_three_phase_state  = 	temp_phase_state;								//assign saved temp AC Phase State to last_three_phase_state
   1a96e:	4b0d      	ldr	r3, [pc, #52]	; (1a9a4 <set_Three_Phase_State_From_Voltage+0xd8>)
   1a970:	1dfa      	adds	r2, r7, #7
   1a972:	7812      	ldrb	r2, [r2, #0]
   1a974:	701a      	strb	r2, [r3, #0]
			current_three_phase_state = structThreePhase_state.u8t_phase_ac_state;
   1a976:	4b06      	ldr	r3, [pc, #24]	; (1a990 <set_Three_Phase_State_From_Voltage+0xc4>)
   1a978:	785b      	ldrb	r3, [r3, #1]
   1a97a:	b2da      	uxtb	r2, r3
   1a97c:	4b07      	ldr	r3, [pc, #28]	; (1a99c <set_Three_Phase_State_From_Voltage+0xd0>)
   1a97e:	701a      	strb	r2, [r3, #0]
			eventOccured = true;
   1a980:	4b09      	ldr	r3, [pc, #36]	; (1a9a8 <set_Three_Phase_State_From_Voltage+0xdc>)
   1a982:	2201      	movs	r2, #1
   1a984:	701a      	strb	r2, [r3, #0]
		}
	}
}
   1a986:	46c0      	nop			; (mov r8, r8)
   1a988:	46bd      	mov	sp, r7
   1a98a:	b002      	add	sp, #8
   1a98c:	bd80      	pop	{r7, pc}
   1a98e:	46c0      	nop			; (mov r8, r8)
   1a990:	20000740 	.word	0x20000740
   1a994:	200006dc 	.word	0x200006dc
   1a998:	20000654 	.word	0x20000654
   1a99c:	20000841 	.word	0x20000841
   1a9a0:	2000076b 	.word	0x2000076b
   1a9a4:	2000071f 	.word	0x2000071f
   1a9a8:	20000722 	.word	0x20000722

0001a9ac <detect_Motor_Current>:

//Function to detect the Motor Current, From ADC, Average it (using ADC_0) , and store it in the Analog_Parameter_Struct
void detect_Motor_Current(void){
   1a9ac:	b590      	push	{r4, r7, lr}
   1a9ae:	b083      	sub	sp, #12
   1a9b0:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
   1a9b2:	4b33      	ldr	r3, [pc, #204]	; (1aa80 <detect_Motor_Current+0xd4>)
   1a9b4:	681a      	ldr	r2, [r3, #0]
   1a9b6:	2301      	movs	r3, #1
   1a9b8:	425b      	negs	r3, r3
   1a9ba:	0019      	movs	r1, r3
   1a9bc:	0010      	movs	r0, r2
   1a9be:	4b31      	ldr	r3, [pc, #196]	; (1aa84 <detect_Motor_Current+0xd8>)
   1a9c0:	4798      	blx	r3
   1a9c2:	0003      	movs	r3, r0
   1a9c4:	2b01      	cmp	r3, #1
   1a9c6:	d157      	bne.n	1aa78 <detect_Motor_Current+0xcc>
	{
		uint32_t ADCcurrent = Read_ADC0(ADC_POSITIVE_INPUT_PIN16,200);
   1a9c8:	21c8      	movs	r1, #200	; 0xc8
   1a9ca:	2010      	movs	r0, #16
   1a9cc:	4b2e      	ldr	r3, [pc, #184]	; (1aa88 <detect_Motor_Current+0xdc>)
   1a9ce:	4798      	blx	r3
   1a9d0:	0003      	movs	r3, r0
   1a9d2:	607b      	str	r3, [r7, #4]
		
		
		if(ADCcurrent>15)
   1a9d4:	687b      	ldr	r3, [r7, #4]
   1a9d6:	2b0f      	cmp	r3, #15
   1a9d8:	d906      	bls.n	1a9e8 <detect_Motor_Current+0x3c>
		{
			ADCcurrent = abs(ADCcurrent - 15);
   1a9da:	687b      	ldr	r3, [r7, #4]
   1a9dc:	3b0f      	subs	r3, #15
   1a9de:	17da      	asrs	r2, r3, #31
   1a9e0:	189b      	adds	r3, r3, r2
   1a9e2:	4053      	eors	r3, r2
   1a9e4:	607b      	str	r3, [r7, #4]
   1a9e6:	e004      	b.n	1a9f2 <detect_Motor_Current+0x46>
		}
		else if(ADCcurrent <= 15)
   1a9e8:	687b      	ldr	r3, [r7, #4]
   1a9ea:	2b0f      	cmp	r3, #15
   1a9ec:	d801      	bhi.n	1a9f2 <detect_Motor_Current+0x46>
		{
			ADCcurrent = 0;
   1a9ee:	2300      	movs	r3, #0
   1a9f0:	607b      	str	r3, [r7, #4]
		}
		
		xSemaphoreGive(xADC_Semaphore);
   1a9f2:	4b23      	ldr	r3, [pc, #140]	; (1aa80 <detect_Motor_Current+0xd4>)
   1a9f4:	6818      	ldr	r0, [r3, #0]
   1a9f6:	2300      	movs	r3, #0
   1a9f8:	2200      	movs	r2, #0
   1a9fa:	2100      	movs	r1, #0
   1a9fc:	4c23      	ldr	r4, [pc, #140]	; (1aa8c <detect_Motor_Current+0xe0>)
   1a9fe:	47a0      	blx	r4
		Analog_Parameter_Struct.Motor_Current_ADC_Value = ADCcurrent;				// does ADCcurrent here have ADC Value of Current ?
   1aa00:	4b23      	ldr	r3, [pc, #140]	; (1aa90 <detect_Motor_Current+0xe4>)
   1aa02:	687a      	ldr	r2, [r7, #4]
   1aa04:	60da      	str	r2, [r3, #12]
		//ADCcurrent = (ADCcurrent*7225)/1000;
		ADCcurrent = (ADCcurrent*3425)/1000;
   1aa06:	687b      	ldr	r3, [r7, #4]
   1aa08:	4a22      	ldr	r2, [pc, #136]	; (1aa94 <detect_Motor_Current+0xe8>)
   1aa0a:	435a      	muls	r2, r3
   1aa0c:	0010      	movs	r0, r2
   1aa0e:	4b22      	ldr	r3, [pc, #136]	; (1aa98 <detect_Motor_Current+0xec>)
   1aa10:	22fa      	movs	r2, #250	; 0xfa
   1aa12:	0091      	lsls	r1, r2, #2
   1aa14:	4798      	blx	r3
   1aa16:	0003      	movs	r3, r0
   1aa18:	607b      	str	r3, [r7, #4]
		if(ADCcurrent<1200 && ADCcurrent!=0)
   1aa1a:	687b      	ldr	r3, [r7, #4]
   1aa1c:	4a1f      	ldr	r2, [pc, #124]	; (1aa9c <detect_Motor_Current+0xf0>)
   1aa1e:	4293      	cmp	r3, r2
   1aa20:	d810      	bhi.n	1aa44 <detect_Motor_Current+0x98>
   1aa22:	687b      	ldr	r3, [r7, #4]
   1aa24:	2b00      	cmp	r3, #0
   1aa26:	d00d      	beq.n	1aa44 <detect_Motor_Current+0x98>
		{
			ADCcurrent = ADCcurrent + (((1200-ADCcurrent)*272)/1000);
   1aa28:	687b      	ldr	r3, [r7, #4]
   1aa2a:	4a1d      	ldr	r2, [pc, #116]	; (1aaa0 <detect_Motor_Current+0xf4>)
   1aa2c:	4353      	muls	r3, r2
   1aa2e:	4a1d      	ldr	r2, [pc, #116]	; (1aaa4 <detect_Motor_Current+0xf8>)
   1aa30:	1898      	adds	r0, r3, r2
   1aa32:	4b19      	ldr	r3, [pc, #100]	; (1aa98 <detect_Motor_Current+0xec>)
   1aa34:	22fa      	movs	r2, #250	; 0xfa
   1aa36:	0091      	lsls	r1, r2, #2
   1aa38:	4798      	blx	r3
   1aa3a:	0003      	movs	r3, r0
   1aa3c:	001a      	movs	r2, r3
   1aa3e:	687b      	ldr	r3, [r7, #4]
   1aa40:	189b      	adds	r3, r3, r2
   1aa42:	607b      	str	r3, [r7, #4]
		}
		Analog_Parameter_Struct.Motor_Current = ADCcurrent;
   1aa44:	4b12      	ldr	r3, [pc, #72]	; (1aa90 <detect_Motor_Current+0xe4>)
   1aa46:	687a      	ldr	r2, [r7, #4]
   1aa48:	611a      	str	r2, [r3, #16]
		Analog_Parameter_Struct.Motor_Current_IntPart = ADCcurrent/100;
   1aa4a:	687a      	ldr	r2, [r7, #4]
   1aa4c:	4b12      	ldr	r3, [pc, #72]	; (1aa98 <detect_Motor_Current+0xec>)
   1aa4e:	2164      	movs	r1, #100	; 0x64
   1aa50:	0010      	movs	r0, r2
   1aa52:	4798      	blx	r3
   1aa54:	0003      	movs	r3, r0
   1aa56:	b29a      	uxth	r2, r3
   1aa58:	4b0d      	ldr	r3, [pc, #52]	; (1aa90 <detect_Motor_Current+0xe4>)
   1aa5a:	829a      	strh	r2, [r3, #20]
		Analog_Parameter_Struct.Motor_Current_DecPart = ADCcurrent%100;
   1aa5c:	687a      	ldr	r2, [r7, #4]
   1aa5e:	4b12      	ldr	r3, [pc, #72]	; (1aaa8 <detect_Motor_Current+0xfc>)
   1aa60:	2164      	movs	r1, #100	; 0x64
   1aa62:	0010      	movs	r0, r2
   1aa64:	4798      	blx	r3
   1aa66:	000b      	movs	r3, r1
   1aa68:	b29a      	uxth	r2, r3
   1aa6a:	4b09      	ldr	r3, [pc, #36]	; (1aa90 <detect_Motor_Current+0xe4>)
   1aa6c:	82da      	strh	r2, [r3, #22]
		ucharCurrent_Detect_Flag = 0;												//reset the flag, to disable current reading for next 500ms
   1aa6e:	4b0f      	ldr	r3, [pc, #60]	; (1aaac <detect_Motor_Current+0x100>)
   1aa70:	2200      	movs	r2, #0
   1aa72:	701a      	strb	r2, [r3, #0]
		calcPowerConsumption();
   1aa74:	4b0e      	ldr	r3, [pc, #56]	; (1aab0 <detect_Motor_Current+0x104>)
   1aa76:	4798      	blx	r3
	}
}
   1aa78:	46c0      	nop			; (mov r8, r8)
   1aa7a:	46bd      	mov	sp, r7
   1aa7c:	b003      	add	sp, #12
   1aa7e:	bd90      	pop	{r4, r7, pc}
   1aa80:	20000238 	.word	0x20000238
   1aa84:	0001f6e1 	.word	0x0001f6e1
   1aa88:	00019c39 	.word	0x00019c39
   1aa8c:	0001f241 	.word	0x0001f241
   1aa90:	200006dc 	.word	0x200006dc
   1aa94:	00000d61 	.word	0x00000d61
   1aa98:	000265fd 	.word	0x000265fd
   1aa9c:	000004af 	.word	0x000004af
   1aaa0:	fffffef0 	.word	0xfffffef0
   1aaa4:	0004fb00 	.word	0x0004fb00
   1aaa8:	00026709 	.word	0x00026709
   1aaac:	2000024b 	.word	0x2000024b
   1aab0:	0001aab5 	.word	0x0001aab5

0001aab4 <calcPowerConsumption>:

/************************************************************************/
/* To Calculate Power Consumption of Motor                              */
/************************************************************************/
void calcPowerConsumption(void)
{
   1aab4:	b590      	push	{r4, r7, lr}
   1aab6:	b085      	sub	sp, #20
   1aab8:	af00      	add	r7, sp, #0
	uint16_t avgVotlage = Analog_Parameter_Struct.PhaseRY_Voltage + Analog_Parameter_Struct.PhaseYB_Voltage + Analog_Parameter_Struct.PhaseBR_Voltage;
   1aaba:	4b39      	ldr	r3, [pc, #228]	; (1aba0 <calcPowerConsumption+0xec>)
   1aabc:	681b      	ldr	r3, [r3, #0]
   1aabe:	b29a      	uxth	r2, r3
   1aac0:	4b37      	ldr	r3, [pc, #220]	; (1aba0 <calcPowerConsumption+0xec>)
   1aac2:	685b      	ldr	r3, [r3, #4]
   1aac4:	b29b      	uxth	r3, r3
   1aac6:	18d3      	adds	r3, r2, r3
   1aac8:	b299      	uxth	r1, r3
   1aaca:	4b35      	ldr	r3, [pc, #212]	; (1aba0 <calcPowerConsumption+0xec>)
   1aacc:	689b      	ldr	r3, [r3, #8]
   1aace:	b29a      	uxth	r2, r3
   1aad0:	230e      	movs	r3, #14
   1aad2:	18fb      	adds	r3, r7, r3
   1aad4:	188a      	adds	r2, r1, r2
   1aad6:	801a      	strh	r2, [r3, #0]
	
	double result = (avgVotlage/(float)3) * (Analog_Parameter_Struct.Motor_Current/(float)100);
   1aad8:	230e      	movs	r3, #14
   1aada:	18fb      	adds	r3, r7, r3
   1aadc:	881a      	ldrh	r2, [r3, #0]
   1aade:	4b31      	ldr	r3, [pc, #196]	; (1aba4 <calcPowerConsumption+0xf0>)
   1aae0:	0010      	movs	r0, r2
   1aae2:	4798      	blx	r3
   1aae4:	1c02      	adds	r2, r0, #0
   1aae6:	4b30      	ldr	r3, [pc, #192]	; (1aba8 <calcPowerConsumption+0xf4>)
   1aae8:	4930      	ldr	r1, [pc, #192]	; (1abac <calcPowerConsumption+0xf8>)
   1aaea:	1c10      	adds	r0, r2, #0
   1aaec:	4798      	blx	r3
   1aaee:	1c03      	adds	r3, r0, #0
   1aaf0:	1c1c      	adds	r4, r3, #0
   1aaf2:	4b2b      	ldr	r3, [pc, #172]	; (1aba0 <calcPowerConsumption+0xec>)
   1aaf4:	691a      	ldr	r2, [r3, #16]
   1aaf6:	4b2e      	ldr	r3, [pc, #184]	; (1abb0 <calcPowerConsumption+0xfc>)
   1aaf8:	0010      	movs	r0, r2
   1aafa:	4798      	blx	r3
   1aafc:	1c02      	adds	r2, r0, #0
   1aafe:	4b2a      	ldr	r3, [pc, #168]	; (1aba8 <calcPowerConsumption+0xf4>)
   1ab00:	492c      	ldr	r1, [pc, #176]	; (1abb4 <calcPowerConsumption+0x100>)
   1ab02:	1c10      	adds	r0, r2, #0
   1ab04:	4798      	blx	r3
   1ab06:	1c03      	adds	r3, r0, #0
   1ab08:	1c1a      	adds	r2, r3, #0
   1ab0a:	4b2b      	ldr	r3, [pc, #172]	; (1abb8 <calcPowerConsumption+0x104>)
   1ab0c:	1c11      	adds	r1, r2, #0
   1ab0e:	1c20      	adds	r0, r4, #0
   1ab10:	4798      	blx	r3
   1ab12:	1c03      	adds	r3, r0, #0
   1ab14:	1c1a      	adds	r2, r3, #0
   1ab16:	4b29      	ldr	r3, [pc, #164]	; (1abbc <calcPowerConsumption+0x108>)
   1ab18:	1c10      	adds	r0, r2, #0
   1ab1a:	4798      	blx	r3
   1ab1c:	0003      	movs	r3, r0
   1ab1e:	000c      	movs	r4, r1
   1ab20:	603b      	str	r3, [r7, #0]
   1ab22:	607c      	str	r4, [r7, #4]
	result = sqrt(3) * result * 85 / (float)100;
   1ab24:	4c26      	ldr	r4, [pc, #152]	; (1abc0 <calcPowerConsumption+0x10c>)
   1ab26:	4a27      	ldr	r2, [pc, #156]	; (1abc4 <calcPowerConsumption+0x110>)
   1ab28:	4b27      	ldr	r3, [pc, #156]	; (1abc8 <calcPowerConsumption+0x114>)
   1ab2a:	6838      	ldr	r0, [r7, #0]
   1ab2c:	6879      	ldr	r1, [r7, #4]
   1ab2e:	47a0      	blx	r4
   1ab30:	0003      	movs	r3, r0
   1ab32:	000c      	movs	r4, r1
   1ab34:	0018      	movs	r0, r3
   1ab36:	0021      	movs	r1, r4
   1ab38:	4c21      	ldr	r4, [pc, #132]	; (1abc0 <calcPowerConsumption+0x10c>)
   1ab3a:	2200      	movs	r2, #0
   1ab3c:	4b23      	ldr	r3, [pc, #140]	; (1abcc <calcPowerConsumption+0x118>)
   1ab3e:	47a0      	blx	r4
   1ab40:	0003      	movs	r3, r0
   1ab42:	000c      	movs	r4, r1
   1ab44:	0018      	movs	r0, r3
   1ab46:	0021      	movs	r1, r4
   1ab48:	4c21      	ldr	r4, [pc, #132]	; (1abd0 <calcPowerConsumption+0x11c>)
   1ab4a:	2200      	movs	r2, #0
   1ab4c:	4b21      	ldr	r3, [pc, #132]	; (1abd4 <calcPowerConsumption+0x120>)
   1ab4e:	47a0      	blx	r4
   1ab50:	0003      	movs	r3, r0
   1ab52:	000c      	movs	r4, r1
   1ab54:	603b      	str	r3, [r7, #0]
   1ab56:	607c      	str	r4, [r7, #4]

	Analog_Parameter_Struct.Motor_Power = (uint32_t) result;
   1ab58:	4b1f      	ldr	r3, [pc, #124]	; (1abd8 <calcPowerConsumption+0x124>)
   1ab5a:	6838      	ldr	r0, [r7, #0]
   1ab5c:	6879      	ldr	r1, [r7, #4]
   1ab5e:	4798      	blx	r3
   1ab60:	0002      	movs	r2, r0
   1ab62:	4b0f      	ldr	r3, [pc, #60]	; (1aba0 <calcPowerConsumption+0xec>)
   1ab64:	621a      	str	r2, [r3, #32]
	Analog_Parameter_Struct.Motor_Power_IntPart = (uint32_t) result / 1000;
   1ab66:	4b1c      	ldr	r3, [pc, #112]	; (1abd8 <calcPowerConsumption+0x124>)
   1ab68:	6838      	ldr	r0, [r7, #0]
   1ab6a:	6879      	ldr	r1, [r7, #4]
   1ab6c:	4798      	blx	r3
   1ab6e:	4b1b      	ldr	r3, [pc, #108]	; (1abdc <calcPowerConsumption+0x128>)
   1ab70:	22fa      	movs	r2, #250	; 0xfa
   1ab72:	0091      	lsls	r1, r2, #2
   1ab74:	4798      	blx	r3
   1ab76:	0003      	movs	r3, r0
   1ab78:	b29a      	uxth	r2, r3
   1ab7a:	4b09      	ldr	r3, [pc, #36]	; (1aba0 <calcPowerConsumption+0xec>)
   1ab7c:	849a      	strh	r2, [r3, #36]	; 0x24
	Analog_Parameter_Struct.Motor_Power_DecPart =  (uint32_t) result % 1000;
   1ab7e:	4b16      	ldr	r3, [pc, #88]	; (1abd8 <calcPowerConsumption+0x124>)
   1ab80:	6838      	ldr	r0, [r7, #0]
   1ab82:	6879      	ldr	r1, [r7, #4]
   1ab84:	4798      	blx	r3
   1ab86:	4b16      	ldr	r3, [pc, #88]	; (1abe0 <calcPowerConsumption+0x12c>)
   1ab88:	22fa      	movs	r2, #250	; 0xfa
   1ab8a:	0091      	lsls	r1, r2, #2
   1ab8c:	4798      	blx	r3
   1ab8e:	000b      	movs	r3, r1
   1ab90:	001a      	movs	r2, r3
   1ab92:	4b03      	ldr	r3, [pc, #12]	; (1aba0 <calcPowerConsumption+0xec>)
   1ab94:	629a      	str	r2, [r3, #40]	; 0x28
}
   1ab96:	46c0      	nop			; (mov r8, r8)
   1ab98:	46bd      	mov	sp, r7
   1ab9a:	b005      	add	sp, #20
   1ab9c:	bd90      	pop	{r4, r7, pc}
   1ab9e:	46c0      	nop			; (mov r8, r8)
   1aba0:	200006dc 	.word	0x200006dc
   1aba4:	00027085 	.word	0x00027085
   1aba8:	00026bb5 	.word	0x00026bb5
   1abac:	40400000 	.word	0x40400000
   1abb0:	00027125 	.word	0x00027125
   1abb4:	42c80000 	.word	0x42c80000
   1abb8:	00026e45 	.word	0x00026e45
   1abbc:	00028d01 	.word	0x00028d01
   1abc0:	00028039 	.word	0x00028039
   1abc4:	e8584caa 	.word	0xe8584caa
   1abc8:	3ffbb67a 	.word	0x3ffbb67a
   1abcc:	40554000 	.word	0x40554000
   1abd0:	000277d1 	.word	0x000277d1
   1abd4:	40590000 	.word	0x40590000
   1abd8:	000269f9 	.word	0x000269f9
   1abdc:	000265fd 	.word	0x000265fd
   1abe0:	00026709 	.word	0x00026709

0001abe4 <should_Detect_New_Current>:

//Function to check if the New Current Reading should be read
bool should_Detect_New_Current(void){
   1abe4:	b580      	push	{r7, lr}
   1abe6:	af00      	add	r7, sp, #0
	
	//todo : add all the conditions checks i.e. motor ON, current consumption ON etc. , and should get new reading every 500ms
	
	return (ucharCurrent_Detect_Flag == 1);
   1abe8:	4b04      	ldr	r3, [pc, #16]	; (1abfc <should_Detect_New_Current+0x18>)
   1abea:	781b      	ldrb	r3, [r3, #0]
   1abec:	b2db      	uxtb	r3, r3
   1abee:	3b01      	subs	r3, #1
   1abf0:	425a      	negs	r2, r3
   1abf2:	4153      	adcs	r3, r2
   1abf4:	b2db      	uxtb	r3, r3
	
	//return (should_Detect_New_Voltage());
}
   1abf6:	0018      	movs	r0, r3
   1abf8:	46bd      	mov	sp, r7
   1abfa:	bd80      	pop	{r7, pc}
   1abfc:	2000024b 	.word	0x2000024b

0001ac00 <getACPowerState>:

bool getACPowerState(void)
{
   1ac00:	b580      	push	{r7, lr}
   1ac02:	af00      	add	r7, sp, #0
	//return false;
	return phaseAC;
   1ac04:	4b02      	ldr	r3, [pc, #8]	; (1ac10 <getACPowerState+0x10>)
   1ac06:	781b      	ldrb	r3, [r3, #0]
   1ac08:	b2db      	uxtb	r3, r3
}
   1ac0a:	0018      	movs	r0, r3
   1ac0c:	46bd      	mov	sp, r7
   1ac0e:	bd80      	pop	{r7, pc}
   1ac10:	200007be 	.word	0x200007be

0001ac14 <setACPowerState>:

void setACPowerState(bool state)
{
   1ac14:	b580      	push	{r7, lr}
   1ac16:	b082      	sub	sp, #8
   1ac18:	af00      	add	r7, sp, #0
   1ac1a:	0002      	movs	r2, r0
   1ac1c:	1dfb      	adds	r3, r7, #7
   1ac1e:	701a      	strb	r2, [r3, #0]
	phaseAC = state;
   1ac20:	4b03      	ldr	r3, [pc, #12]	; (1ac30 <setACPowerState+0x1c>)
   1ac22:	1dfa      	adds	r2, r7, #7
   1ac24:	7812      	ldrb	r2, [r2, #0]
   1ac26:	701a      	strb	r2, [r3, #0]
}
   1ac28:	46c0      	nop			; (mov r8, r8)
   1ac2a:	46bd      	mov	sp, r7
   1ac2c:	b002      	add	sp, #8
   1ac2e:	bd80      	pop	{r7, pc}
   1ac30:	200007be 	.word	0x200007be

0001ac34 <getAllPhaseState>:

uint8_t getAllPhaseState(void)
{
   1ac34:	b580      	push	{r7, lr}
   1ac36:	af00      	add	r7, sp, #0
	return allPhase;
   1ac38:	4b02      	ldr	r3, [pc, #8]	; (1ac44 <getAllPhaseState+0x10>)
   1ac3a:	781b      	ldrb	r3, [r3, #0]
   1ac3c:	b2db      	uxtb	r3, r3
	//}
	//else
	//{
	//return allPhase;
	//}
}
   1ac3e:	0018      	movs	r0, r3
   1ac40:	46bd      	mov	sp, r7
   1ac42:	bd80      	pop	{r7, pc}
   1ac44:	20000759 	.word	0x20000759

0001ac48 <setAllPhaseState>:

void setAllPhaseState(uint8_t state)
{
   1ac48:	b580      	push	{r7, lr}
   1ac4a:	b082      	sub	sp, #8
   1ac4c:	af00      	add	r7, sp, #0
   1ac4e:	0002      	movs	r2, r0
   1ac50:	1dfb      	adds	r3, r7, #7
   1ac52:	701a      	strb	r2, [r3, #0]
	allPhase = state;
   1ac54:	4b03      	ldr	r3, [pc, #12]	; (1ac64 <setAllPhaseState+0x1c>)
   1ac56:	1dfa      	adds	r2, r7, #7
   1ac58:	7812      	ldrb	r2, [r2, #0]
   1ac5a:	701a      	strb	r2, [r3, #0]
}
   1ac5c:	46c0      	nop			; (mov r8, r8)
   1ac5e:	46bd      	mov	sp, r7
   1ac60:	b002      	add	sp, #8
   1ac62:	bd80      	pop	{r7, pc}
   1ac64:	20000759 	.word	0x20000759

0001ac68 <getPhaseSequence>:

bool getPhaseSequence()
{
   1ac68:	b580      	push	{r7, lr}
   1ac6a:	af00      	add	r7, sp, #0
	return vBoolPhaseSeq;
   1ac6c:	4b02      	ldr	r3, [pc, #8]	; (1ac78 <getPhaseSequence+0x10>)
   1ac6e:	781b      	ldrb	r3, [r3, #0]
   1ac70:	b2db      	uxtb	r3, r3
}
   1ac72:	0018      	movs	r0, r3
   1ac74:	46bd      	mov	sp, r7
   1ac76:	bd80      	pop	{r7, pc}
   1ac78:	2000076c 	.word	0x2000076c

0001ac7c <setPhaseSequence>:

void setPhaseSequence(bool phaseSequence)
{
   1ac7c:	b580      	push	{r7, lr}
   1ac7e:	b082      	sub	sp, #8
   1ac80:	af00      	add	r7, sp, #0
   1ac82:	0002      	movs	r2, r0
   1ac84:	1dfb      	adds	r3, r7, #7
   1ac86:	701a      	strb	r2, [r3, #0]
	vBoolPhaseSeq=phaseSequence;
   1ac88:	4b03      	ldr	r3, [pc, #12]	; (1ac98 <setPhaseSequence+0x1c>)
   1ac8a:	1dfa      	adds	r2, r7, #7
   1ac8c:	7812      	ldrb	r2, [r2, #0]
   1ac8e:	701a      	strb	r2, [r3, #0]
}
   1ac90:	46c0      	nop			; (mov r8, r8)
   1ac92:	46bd      	mov	sp, r7
   1ac94:	b002      	add	sp, #8
   1ac96:	bd80      	pop	{r7, pc}
   1ac98:	2000076c 	.word	0x2000076c

0001ac9c <getMotorState>:


bool getMotorState(void)
{
   1ac9c:	b580      	push	{r7, lr}
   1ac9e:	af00      	add	r7, sp, #0
	return mFeedback;
   1aca0:	4b02      	ldr	r3, [pc, #8]	; (1acac <getMotorState+0x10>)
   1aca2:	781b      	ldrb	r3, [r3, #0]
   1aca4:	b2db      	uxtb	r3, r3
}
   1aca6:	0018      	movs	r0, r3
   1aca8:	46bd      	mov	sp, r7
   1acaa:	bd80      	pop	{r7, pc}
   1acac:	2000073a 	.word	0x2000073a

0001acb0 <setMotorState>:

void setMotorState(bool state)
{
   1acb0:	b580      	push	{r7, lr}
   1acb2:	b082      	sub	sp, #8
   1acb4:	af00      	add	r7, sp, #0
   1acb6:	0002      	movs	r2, r0
   1acb8:	1dfb      	adds	r3, r7, #7
   1acba:	701a      	strb	r2, [r3, #0]
	mFeedback = state;
   1acbc:	4b0a      	ldr	r3, [pc, #40]	; (1ace8 <setMotorState+0x38>)
   1acbe:	1dfa      	adds	r2, r7, #7
   1acc0:	7812      	ldrb	r2, [r2, #0]
   1acc2:	701a      	strb	r2, [r3, #0]
	if (state)
   1acc4:	1dfb      	adds	r3, r7, #7
   1acc6:	781b      	ldrb	r3, [r3, #0]
   1acc8:	2b00      	cmp	r3, #0
   1acca:	d004      	beq.n	1acd6 <setMotorState+0x26>
	{
		MOTOR_ON_LED_ON;
   1accc:	2100      	movs	r1, #0
   1acce:	2005      	movs	r0, #5
   1acd0:	4b06      	ldr	r3, [pc, #24]	; (1acec <setMotorState+0x3c>)
   1acd2:	4798      	blx	r3
	}
	else
	{
		MOTOR_ON_LED_OFF;
	}
}
   1acd4:	e003      	b.n	1acde <setMotorState+0x2e>
		MOTOR_ON_LED_OFF;
   1acd6:	2101      	movs	r1, #1
   1acd8:	2005      	movs	r0, #5
   1acda:	4b04      	ldr	r3, [pc, #16]	; (1acec <setMotorState+0x3c>)
   1acdc:	4798      	blx	r3
}
   1acde:	46c0      	nop			; (mov r8, r8)
   1ace0:	46bd      	mov	sp, r7
   1ace2:	b002      	add	sp, #8
   1ace4:	bd80      	pop	{r7, pc}
   1ace6:	46c0      	nop			; (mov r8, r8)
   1ace8:	2000073a 	.word	0x2000073a
   1acec:	00019135 	.word	0x00019135

0001acf0 <getMotorState_from_pin>:

bool getMotorState_from_pin(void)
{
   1acf0:	b590      	push	{r4, r7, lr}
   1acf2:	b083      	sub	sp, #12
   1acf4:	af00      	add	r7, sp, #0
	uint8_t p1;
	bool p2, p3, p4;
	readSensorState(&p1, &p2, &p3, &p4);
   1acf6:	1d3b      	adds	r3, r7, #4
   1acf8:	1d7a      	adds	r2, r7, #5
   1acfa:	1db9      	adds	r1, r7, #6
   1acfc:	1df8      	adds	r0, r7, #7
   1acfe:	4c06      	ldr	r4, [pc, #24]	; (1ad18 <getMotorState_from_pin+0x28>)
   1ad00:	47a0      	blx	r4
	setMotorState(p3);
   1ad02:	1d7b      	adds	r3, r7, #5
   1ad04:	781b      	ldrb	r3, [r3, #0]
   1ad06:	0018      	movs	r0, r3
   1ad08:	4b04      	ldr	r3, [pc, #16]	; (1ad1c <getMotorState_from_pin+0x2c>)
   1ad0a:	4798      	blx	r3
	return p3;
   1ad0c:	1d7b      	adds	r3, r7, #5
   1ad0e:	781b      	ldrb	r3, [r3, #0]
}
   1ad10:	0018      	movs	r0, r3
   1ad12:	46bd      	mov	sp, r7
   1ad14:	b003      	add	sp, #12
   1ad16:	bd90      	pop	{r4, r7, pc}
   1ad18:	0001ad21 	.word	0x0001ad21
   1ad1c:	0001acb1 	.word	0x0001acb1

0001ad20 <readSensorState>:



void readSensorState(uint8_t *allPhase, bool *phaseSeq,bool *motor, bool *acPhase)
{
   1ad20:	b590      	push	{r4, r7, lr}
   1ad22:	b087      	sub	sp, #28
   1ad24:	af00      	add	r7, sp, #0
   1ad26:	60f8      	str	r0, [r7, #12]
   1ad28:	60b9      	str	r1, [r7, #8]
   1ad2a:	607a      	str	r2, [r7, #4]
   1ad2c:	603b      	str	r3, [r7, #0]
	*allPhase = structThreePhase_state.u8t_phase_ac_state;
   1ad2e:	4b37      	ldr	r3, [pc, #220]	; (1ae0c <readSensorState+0xec>)
   1ad30:	785b      	ldrb	r3, [r3, #1]
   1ad32:	b2da      	uxtb	r2, r3
   1ad34:	68fb      	ldr	r3, [r7, #12]
   1ad36:	701a      	strb	r2, [r3, #0]
	//*phaseSeq = structThreePhase_state.u8t_phase_sequence_flag;
	if(structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
   1ad38:	4b34      	ldr	r3, [pc, #208]	; (1ae0c <readSensorState+0xec>)
   1ad3a:	781b      	ldrb	r3, [r3, #0]
   1ad3c:	b2db      	uxtb	r3, r3
   1ad3e:	2b02      	cmp	r3, #2
   1ad40:	d103      	bne.n	1ad4a <readSensorState+0x2a>
	{
		*phaseSeq=true;
   1ad42:	68bb      	ldr	r3, [r7, #8]
   1ad44:	2201      	movs	r2, #1
   1ad46:	701a      	strb	r2, [r3, #0]
   1ad48:	e002      	b.n	1ad50 <readSensorState+0x30>
	}
	else
	{
		*phaseSeq = false;
   1ad4a:	68bb      	ldr	r3, [r7, #8]
   1ad4c:	2200      	movs	r2, #0
   1ad4e:	701a      	strb	r2, [r3, #0]
	//{
	//*p1 = false;
	//}

	// If MotorFeedback Detection is disabled
	if (user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_OFF)
   1ad50:	4b2f      	ldr	r3, [pc, #188]	; (1ae10 <readSensorState+0xf0>)
   1ad52:	2225      	movs	r2, #37	; 0x25
   1ad54:	5c9b      	ldrb	r3, [r3, r2]
   1ad56:	2b00      	cmp	r3, #0
   1ad58:	d106      	bne.n	1ad68 <readSensorState+0x48>
	{
		*motor  = getMotorState();
   1ad5a:	4b2e      	ldr	r3, [pc, #184]	; (1ae14 <readSensorState+0xf4>)
   1ad5c:	4798      	blx	r3
   1ad5e:	0003      	movs	r3, r0
   1ad60:	001a      	movs	r2, r3
   1ad62:	687b      	ldr	r3, [r7, #4]
   1ad64:	701a      	strb	r2, [r3, #0]
   1ad66:	e020      	b.n	1adaa <readSensorState+0x8a>
	}
	// If Motor Feedback is to be detected using Current
	else if(user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_CURRENT)
   1ad68:	4b29      	ldr	r3, [pc, #164]	; (1ae10 <readSensorState+0xf0>)
   1ad6a:	2225      	movs	r2, #37	; 0x25
   1ad6c:	5c9b      	ldrb	r3, [r3, r2]
   1ad6e:	2b01      	cmp	r3, #1
   1ad70:	d106      	bne.n	1ad80 <readSensorState+0x60>
	{
		*motor = checkMotorStatusUsingCurrent();
   1ad72:	4b29      	ldr	r3, [pc, #164]	; (1ae18 <readSensorState+0xf8>)
   1ad74:	4798      	blx	r3
   1ad76:	0003      	movs	r3, r0
   1ad78:	001a      	movs	r2, r3
   1ad7a:	687b      	ldr	r3, [r7, #4]
   1ad7c:	701a      	strb	r2, [r3, #0]
   1ad7e:	e014      	b.n	1adaa <readSensorState+0x8a>
		
	}
	// if Motor Feedback is to be detected using HW Feedback Circuit
	else if(user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_ON)
   1ad80:	4b23      	ldr	r3, [pc, #140]	; (1ae10 <readSensorState+0xf0>)
   1ad82:	2225      	movs	r2, #37	; 0x25
   1ad84:	5c9b      	ldrb	r3, [r3, r2]
   1ad86:	2b02      	cmp	r3, #2
   1ad88:	d10f      	bne.n	1adaa <readSensorState+0x8a>
	{
		*motor  = !(port_pin_get_input_level(PIN_MOTOR_FEEDBACK));
   1ad8a:	202e      	movs	r0, #46	; 0x2e
   1ad8c:	4b23      	ldr	r3, [pc, #140]	; (1ae1c <readSensorState+0xfc>)
   1ad8e:	4798      	blx	r3
   1ad90:	0003      	movs	r3, r0
   1ad92:	1e5a      	subs	r2, r3, #1
   1ad94:	4193      	sbcs	r3, r2
   1ad96:	b2db      	uxtb	r3, r3
   1ad98:	2201      	movs	r2, #1
   1ad9a:	4053      	eors	r3, r2
   1ad9c:	b2db      	uxtb	r3, r3
   1ad9e:	1c1a      	adds	r2, r3, #0
   1ada0:	2301      	movs	r3, #1
   1ada2:	4013      	ands	r3, r2
   1ada4:	b2da      	uxtb	r2, r3
   1ada6:	687b      	ldr	r3, [r7, #4]
   1ada8:	701a      	strb	r2, [r3, #0]
	}


	
	uint8_t last_comparison = AC_CHAN_STATUS_UNKNOWN;
   1adaa:	2317      	movs	r3, #23
   1adac:	18fb      	adds	r3, r7, r3
   1adae:	2201      	movs	r2, #1
   1adb0:	701a      	strb	r2, [r3, #0]
	
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0);
   1adb2:	2317      	movs	r3, #23
   1adb4:	18fc      	adds	r4, r7, r3
   1adb6:	4b1a      	ldr	r3, [pc, #104]	; (1ae20 <readSensorState+0x100>)
   1adb8:	2100      	movs	r1, #0
   1adba:	0018      	movs	r0, r3
   1adbc:	4b19      	ldr	r3, [pc, #100]	; (1ae24 <readSensorState+0x104>)
   1adbe:	4798      	blx	r3
   1adc0:	0003      	movs	r3, r0
   1adc2:	7023      	strb	r3, [r4, #0]
	vTaskDelay(500/portTICK_PERIOD_MS);
   1adc4:	23fa      	movs	r3, #250	; 0xfa
   1adc6:	005b      	lsls	r3, r3, #1
   1adc8:	0018      	movs	r0, r3
   1adca:	4b17      	ldr	r3, [pc, #92]	; (1ae28 <readSensorState+0x108>)
   1adcc:	4798      	blx	r3
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0); //read again
   1adce:	2317      	movs	r3, #23
   1add0:	18fc      	adds	r4, r7, r3
   1add2:	4b13      	ldr	r3, [pc, #76]	; (1ae20 <readSensorState+0x100>)
   1add4:	2100      	movs	r1, #0
   1add6:	0018      	movs	r0, r3
   1add8:	4b12      	ldr	r3, [pc, #72]	; (1ae24 <readSensorState+0x104>)
   1adda:	4798      	blx	r3
   1addc:	0003      	movs	r3, r0
   1adde:	7023      	strb	r3, [r4, #0]
	
	if (last_comparison & AC_CHAN_STATUS_POS_ABOVE_NEG)
   1ade0:	2317      	movs	r3, #23
   1ade2:	18fb      	adds	r3, r7, r3
   1ade4:	781b      	ldrb	r3, [r3, #0]
   1ade6:	2204      	movs	r2, #4
   1ade8:	4013      	ands	r3, r2
   1adea:	d003      	beq.n	1adf4 <readSensorState+0xd4>
	{
		isACpowerAvailable = true;
   1adec:	4b0f      	ldr	r3, [pc, #60]	; (1ae2c <readSensorState+0x10c>)
   1adee:	2201      	movs	r2, #1
   1adf0:	701a      	strb	r2, [r3, #0]
   1adf2:	e002      	b.n	1adfa <readSensorState+0xda>
	}
	else
	{
		isACpowerAvailable = false;
   1adf4:	4b0d      	ldr	r3, [pc, #52]	; (1ae2c <readSensorState+0x10c>)
   1adf6:	2200      	movs	r2, #0
   1adf8:	701a      	strb	r2, [r3, #0]
	}
	
	*acPhase =  isACpowerAvailable;
   1adfa:	4b0c      	ldr	r3, [pc, #48]	; (1ae2c <readSensorState+0x10c>)
   1adfc:	781b      	ldrb	r3, [r3, #0]
   1adfe:	b2da      	uxtb	r2, r3
   1ae00:	683b      	ldr	r3, [r7, #0]
   1ae02:	701a      	strb	r2, [r3, #0]
}
   1ae04:	46c0      	nop			; (mov r8, r8)
   1ae06:	46bd      	mov	sp, r7
   1ae08:	b007      	add	sp, #28
   1ae0a:	bd90      	pop	{r4, r7, pc}
   1ae0c:	20000740 	.word	0x20000740
   1ae10:	20000654 	.word	0x20000654
   1ae14:	0001ac9d 	.word	0x0001ac9d
   1ae18:	0001ae31 	.word	0x0001ae31
   1ae1c:	000190f1 	.word	0x000190f1
   1ae20:	2000088c 	.word	0x2000088c
   1ae24:	00018c25 	.word	0x00018c25
   1ae28:	0001ffe9 	.word	0x0001ffe9
   1ae2c:	20000785 	.word	0x20000785

0001ae30 <checkMotorStatusUsingCurrent>:

bool checkMotorStatusUsingCurrent(void)
{
   1ae30:	b580      	push	{r7, lr}
   1ae32:	af00      	add	r7, sp, #0
	if(stopMotorCommandGiven)
   1ae34:	4b0e      	ldr	r3, [pc, #56]	; (1ae70 <checkMotorStatusUsingCurrent+0x40>)
   1ae36:	781b      	ldrb	r3, [r3, #0]
   1ae38:	2b00      	cmp	r3, #0
   1ae3a:	d00d      	beq.n	1ae58 <checkMotorStatusUsingCurrent+0x28>
	{
		if(Analog_Parameter_Struct.Motor_Current_IntPart <= (fdbkRefCurrent/2))
   1ae3c:	4b0d      	ldr	r3, [pc, #52]	; (1ae74 <checkMotorStatusUsingCurrent+0x44>)
   1ae3e:	8a9b      	ldrh	r3, [r3, #20]
   1ae40:	b29a      	uxth	r2, r3
   1ae42:	4b0d      	ldr	r3, [pc, #52]	; (1ae78 <checkMotorStatusUsingCurrent+0x48>)
   1ae44:	781b      	ldrb	r3, [r3, #0]
   1ae46:	085b      	lsrs	r3, r3, #1
   1ae48:	b2db      	uxtb	r3, r3
   1ae4a:	b29b      	uxth	r3, r3
   1ae4c:	429a      	cmp	r2, r3
   1ae4e:	d801      	bhi.n	1ae54 <checkMotorStatusUsingCurrent+0x24>
		{
			return false;
   1ae50:	2300      	movs	r3, #0
   1ae52:	e009      	b.n	1ae68 <checkMotorStatusUsingCurrent+0x38>
		}
		else
		{
			return true;
   1ae54:	2301      	movs	r3, #1
   1ae56:	e007      	b.n	1ae68 <checkMotorStatusUsingCurrent+0x38>
		}
	}
	else
	{
		if (Analog_Parameter_Struct.Motor_Current_IntPart > 4)
   1ae58:	4b06      	ldr	r3, [pc, #24]	; (1ae74 <checkMotorStatusUsingCurrent+0x44>)
   1ae5a:	8a9b      	ldrh	r3, [r3, #20]
   1ae5c:	b29b      	uxth	r3, r3
   1ae5e:	2b04      	cmp	r3, #4
   1ae60:	d901      	bls.n	1ae66 <checkMotorStatusUsingCurrent+0x36>
		{
			return true;
   1ae62:	2301      	movs	r3, #1
   1ae64:	e000      	b.n	1ae68 <checkMotorStatusUsingCurrent+0x38>
		}
		else
		{
			return false;
   1ae66:	2300      	movs	r3, #0
		}
	}
}
   1ae68:	0018      	movs	r0, r3
   1ae6a:	46bd      	mov	sp, r7
   1ae6c:	bd80      	pop	{r7, pc}
   1ae6e:	46c0      	nop			; (mov r8, r8)
   1ae70:	20000860 	.word	0x20000860
   1ae74:	200006dc 	.word	0x200006dc
   1ae78:	200007f4 	.word	0x200007f4

0001ae7c <detectMotorStateChangeUsingCurrent>:

bool detectMotorStateChangeUsingCurrent(void)
{
   1ae7c:	b5b0      	push	{r4, r5, r7, lr}
   1ae7e:	af00      	add	r7, sp, #0
	if (getMotorState() != checkMotorStatusUsingCurrent())
   1ae80:	4b07      	ldr	r3, [pc, #28]	; (1aea0 <detectMotorStateChangeUsingCurrent+0x24>)
   1ae82:	4798      	blx	r3
   1ae84:	0003      	movs	r3, r0
   1ae86:	001c      	movs	r4, r3
   1ae88:	4b06      	ldr	r3, [pc, #24]	; (1aea4 <detectMotorStateChangeUsingCurrent+0x28>)
   1ae8a:	4798      	blx	r3
   1ae8c:	0003      	movs	r3, r0
   1ae8e:	429c      	cmp	r4, r3
   1ae90:	d001      	beq.n	1ae96 <detectMotorStateChangeUsingCurrent+0x1a>
	{
		return true;
   1ae92:	2301      	movs	r3, #1
   1ae94:	e000      	b.n	1ae98 <detectMotorStateChangeUsingCurrent+0x1c>
	}
	else
	{
		return false;
   1ae96:	2300      	movs	r3, #0
	}
}
   1ae98:	0018      	movs	r0, r3
   1ae9a:	46bd      	mov	sp, r7
   1ae9c:	bdb0      	pop	{r4, r5, r7, pc}
   1ae9e:	46c0      	nop			; (mov r8, r8)
   1aea0:	0001ac9d 	.word	0x0001ac9d
   1aea4:	0001ae31 	.word	0x0001ae31

0001aea8 <updateSensorState>:


void updateSensorState(uint8_t var3PhaseState, bool var3PhaseSeq, bool motorState, bool acPhaseState)
{
   1aea8:	b5b0      	push	{r4, r5, r7, lr}
   1aeaa:	b084      	sub	sp, #16
   1aeac:	af00      	add	r7, sp, #0
   1aeae:	0005      	movs	r5, r0
   1aeb0:	000c      	movs	r4, r1
   1aeb2:	0010      	movs	r0, r2
   1aeb4:	0019      	movs	r1, r3
   1aeb6:	1dfb      	adds	r3, r7, #7
   1aeb8:	1c2a      	adds	r2, r5, #0
   1aeba:	701a      	strb	r2, [r3, #0]
   1aebc:	1dbb      	adds	r3, r7, #6
   1aebe:	1c22      	adds	r2, r4, #0
   1aec0:	701a      	strb	r2, [r3, #0]
   1aec2:	1d7b      	adds	r3, r7, #5
   1aec4:	1c02      	adds	r2, r0, #0
   1aec6:	701a      	strb	r2, [r3, #0]
   1aec8:	1d3b      	adds	r3, r7, #4
   1aeca:	1c0a      	adds	r2, r1, #0
   1aecc:	701a      	strb	r2, [r3, #0]
	setAllPhaseState(var3PhaseState); // allPhase = p1;
   1aece:	1dfb      	adds	r3, r7, #7
   1aed0:	781b      	ldrb	r3, [r3, #0]
   1aed2:	0018      	movs	r0, r3
   1aed4:	4b27      	ldr	r3, [pc, #156]	; (1af74 <updateSensorState+0xcc>)
   1aed6:	4798      	blx	r3
	setPhaseSequence(var3PhaseSeq);
   1aed8:	1dbb      	adds	r3, r7, #6
   1aeda:	781b      	ldrb	r3, [r3, #0]
   1aedc:	0018      	movs	r0, r3
   1aede:	4b26      	ldr	r3, [pc, #152]	; (1af78 <updateSensorState+0xd0>)
   1aee0:	4798      	blx	r3
	setMotorState(motorState); // mFeedback = p2;
   1aee2:	1d7b      	adds	r3, r7, #5
   1aee4:	781b      	ldrb	r3, [r3, #0]
   1aee6:	0018      	movs	r0, r3
   1aee8:	4b24      	ldr	r3, [pc, #144]	; (1af7c <updateSensorState+0xd4>)
   1aeea:	4798      	blx	r3
	setACPowerState(acPhaseState); // phaseAC = p4;
   1aeec:	1d3b      	adds	r3, r7, #4
   1aeee:	781b      	ldrb	r3, [r3, #0]
   1aef0:	0018      	movs	r0, r3
   1aef2:	4b23      	ldr	r3, [pc, #140]	; (1af80 <updateSensorState+0xd8>)
   1aef4:	4798      	blx	r3
	
	//if(getAllPhaseState()==AC_3PH && getACPowerState())
	if(getAllPhaseState()==AC_3PH)
   1aef6:	4b23      	ldr	r3, [pc, #140]	; (1af84 <updateSensorState+0xdc>)
   1aef8:	4798      	blx	r3
   1aefa:	0003      	movs	r3, r0
   1aefc:	2b03      	cmp	r3, #3
   1aefe:	d12a      	bne.n	1af56 <updateSensorState+0xae>
	{
		bool tempPhaseSequence = true;									// init temp variable with default value as correct sequence
   1af00:	230f      	movs	r3, #15
   1af02:	18fb      	adds	r3, r7, r3
   1af04:	2201      	movs	r2, #1
   1af06:	701a      	strb	r2, [r3, #0]

		if(user_settings_parameter_struct.detectPhaseSequence)			// if detection of Phase Sequence is enabled
   1af08:	4b1f      	ldr	r3, [pc, #124]	; (1af88 <updateSensorState+0xe0>)
   1af0a:	2224      	movs	r2, #36	; 0x24
   1af0c:	5c9b      	ldrb	r3, [r3, r2]
   1af0e:	2b00      	cmp	r3, #0
   1af10:	d005      	beq.n	1af1e <updateSensorState+0x76>
		{
			tempPhaseSequence = getPhaseSequence();						// save the current phase sequence  in temp varialbe for further use
   1af12:	230f      	movs	r3, #15
   1af14:	18fc      	adds	r4, r7, r3
   1af16:	4b1d      	ldr	r3, [pc, #116]	; (1af8c <updateSensorState+0xe4>)
   1af18:	4798      	blx	r3
   1af1a:	0003      	movs	r3, r0
   1af1c:	7023      	strb	r3, [r4, #0]
		}

		if(tempPhaseSequence)											// check if sequence is correct
   1af1e:	230f      	movs	r3, #15
   1af20:	18fb      	adds	r3, r7, r3
   1af22:	781b      	ldrb	r3, [r3, #0]
   1af24:	2b00      	cmp	r3, #0
   1af26:	d004      	beq.n	1af32 <updateSensorState+0x8a>
		{
			THREEPHASE_OK_LED_ON;
   1af28:	2100      	movs	r1, #0
   1af2a:	2027      	movs	r0, #39	; 0x27
   1af2c:	4b18      	ldr	r3, [pc, #96]	; (1af90 <updateSensorState+0xe8>)
   1af2e:	4798      	blx	r3
   1af30:	e003      	b.n	1af3a <updateSensorState+0x92>
		}
		else
		{
			THREEPHASE_OK_LED_OFF;
   1af32:	2101      	movs	r1, #1
   1af34:	2027      	movs	r0, #39	; 0x27
   1af36:	4b16      	ldr	r3, [pc, #88]	; (1af90 <updateSensorState+0xe8>)
   1af38:	4798      	blx	r3
		}
		
		if((bool)user_settings_parameter_struct.autoStartAddress)
   1af3a:	4b13      	ldr	r3, [pc, #76]	; (1af88 <updateSensorState+0xe0>)
   1af3c:	785b      	ldrb	r3, [r3, #1]
   1af3e:	2b00      	cmp	r3, #0
   1af40:	d004      	beq.n	1af4c <updateSensorState+0xa4>
		{
			AUTO_ON_LED_ON;
   1af42:	2100      	movs	r1, #0
   1af44:	2028      	movs	r0, #40	; 0x28
   1af46:	4b12      	ldr	r3, [pc, #72]	; (1af90 <updateSensorState+0xe8>)
   1af48:	4798      	blx	r3
	//
	//if (!getACPowerState() || !getAllPhaseState())
	//{
	//startTimerOn = false;
	//}
}
   1af4a:	e00f      	b.n	1af6c <updateSensorState+0xc4>
			AUTO_ON_LED_OFF;
   1af4c:	2101      	movs	r1, #1
   1af4e:	2028      	movs	r0, #40	; 0x28
   1af50:	4b0f      	ldr	r3, [pc, #60]	; (1af90 <updateSensorState+0xe8>)
   1af52:	4798      	blx	r3
}
   1af54:	e00a      	b.n	1af6c <updateSensorState+0xc4>
		THREEPHASE_OK_LED_OFF;
   1af56:	2101      	movs	r1, #1
   1af58:	2027      	movs	r0, #39	; 0x27
   1af5a:	4b0d      	ldr	r3, [pc, #52]	; (1af90 <updateSensorState+0xe8>)
   1af5c:	4798      	blx	r3
		AUTO_ON_LED_OFF;
   1af5e:	2101      	movs	r1, #1
   1af60:	2028      	movs	r0, #40	; 0x28
   1af62:	4b0b      	ldr	r3, [pc, #44]	; (1af90 <updateSensorState+0xe8>)
   1af64:	4798      	blx	r3
		startTimerOn=false;
   1af66:	4b0b      	ldr	r3, [pc, #44]	; (1af94 <updateSensorState+0xec>)
   1af68:	2200      	movs	r2, #0
   1af6a:	701a      	strb	r2, [r3, #0]
}
   1af6c:	46c0      	nop			; (mov r8, r8)
   1af6e:	46bd      	mov	sp, r7
   1af70:	b004      	add	sp, #16
   1af72:	bdb0      	pop	{r4, r5, r7, pc}
   1af74:	0001ac49 	.word	0x0001ac49
   1af78:	0001ac7d 	.word	0x0001ac7d
   1af7c:	0001acb1 	.word	0x0001acb1
   1af80:	0001ac15 	.word	0x0001ac15
   1af84:	0001ac35 	.word	0x0001ac35
   1af88:	20000654 	.word	0x20000654
   1af8c:	0001ac69 	.word	0x0001ac69
   1af90:	00019135 	.word	0x00019135
   1af94:	20000792 	.word	0x20000792

0001af98 <resetAutoStart>:

void resetAutoStart(bool setChange)
{
   1af98:	b580      	push	{r7, lr}
   1af9a:	b082      	sub	sp, #8
   1af9c:	af00      	add	r7, sp, #0
   1af9e:	0002      	movs	r2, r0
   1afa0:	1dfb      	adds	r3, r7, #7
   1afa2:	701a      	strb	r2, [r3, #0]
	if (!(bool)user_settings_parameter_struct.autoStartAddress)
   1afa4:	4b0e      	ldr	r3, [pc, #56]	; (1afe0 <resetAutoStart+0x48>)
   1afa6:	785b      	ldrb	r3, [r3, #1]
   1afa8:	2b00      	cmp	r3, #0
   1afaa:	d107      	bne.n	1afbc <resetAutoStart+0x24>
	{
		startTimerOn=false;
   1afac:	4b0d      	ldr	r3, [pc, #52]	; (1afe4 <resetAutoStart+0x4c>)
   1afae:	2200      	movs	r2, #0
   1afb0:	701a      	strb	r2, [r3, #0]
		AUTO_ON_LED_OFF;
   1afb2:	2101      	movs	r1, #1
   1afb4:	2028      	movs	r0, #40	; 0x28
   1afb6:	4b0c      	ldr	r3, [pc, #48]	; (1afe8 <resetAutoStart+0x50>)
   1afb8:	4798      	blx	r3
		if (setChange)
		{
			triggerAutoStart();
		}
	}
}
   1afba:	e00d      	b.n	1afd8 <resetAutoStart+0x40>
	else if ((bool)user_settings_parameter_struct.autoStartAddress)
   1afbc:	4b08      	ldr	r3, [pc, #32]	; (1afe0 <resetAutoStart+0x48>)
   1afbe:	785b      	ldrb	r3, [r3, #1]
   1afc0:	2b00      	cmp	r3, #0
   1afc2:	d009      	beq.n	1afd8 <resetAutoStart+0x40>
		AUTO_ON_LED_ON;
   1afc4:	2100      	movs	r1, #0
   1afc6:	2028      	movs	r0, #40	; 0x28
   1afc8:	4b07      	ldr	r3, [pc, #28]	; (1afe8 <resetAutoStart+0x50>)
   1afca:	4798      	blx	r3
		if (setChange)
   1afcc:	1dfb      	adds	r3, r7, #7
   1afce:	781b      	ldrb	r3, [r3, #0]
   1afd0:	2b00      	cmp	r3, #0
   1afd2:	d001      	beq.n	1afd8 <resetAutoStart+0x40>
			triggerAutoStart();
   1afd4:	4b05      	ldr	r3, [pc, #20]	; (1afec <resetAutoStart+0x54>)
   1afd6:	4798      	blx	r3
}
   1afd8:	46c0      	nop			; (mov r8, r8)
   1afda:	46bd      	mov	sp, r7
   1afdc:	b002      	add	sp, #8
   1afde:	bd80      	pop	{r7, pc}
   1afe0:	20000654 	.word	0x20000654
   1afe4:	20000792 	.word	0x20000792
   1afe8:	00019135 	.word	0x00019135
   1afec:	0001aff1 	.word	0x0001aff1

0001aff0 <triggerAutoStart>:

void triggerAutoStart(void)
{
   1aff0:	b580      	push	{r7, lr}
   1aff2:	af00      	add	r7, sp, #0
	if (!getMotorState())
   1aff4:	4b0b      	ldr	r3, [pc, #44]	; (1b024 <triggerAutoStart+0x34>)
   1aff6:	4798      	blx	r3
   1aff8:	0003      	movs	r3, r0
   1affa:	001a      	movs	r2, r3
   1affc:	2301      	movs	r3, #1
   1affe:	4053      	eors	r3, r2
   1b000:	b2db      	uxtb	r3, r3
   1b002:	2b00      	cmp	r3, #0
   1b004:	d00b      	beq.n	1b01e <triggerAutoStart+0x2e>
	{
		//if (getAllPhaseState() && getACPowerState())
		if (getAllPhaseState())
   1b006:	4b08      	ldr	r3, [pc, #32]	; (1b028 <triggerAutoStart+0x38>)
   1b008:	4798      	blx	r3
   1b00a:	1e03      	subs	r3, r0, #0
   1b00c:	d007      	beq.n	1b01e <triggerAutoStart+0x2e>
		{
			startTimerOn = true;
   1b00e:	4b07      	ldr	r3, [pc, #28]	; (1b02c <triggerAutoStart+0x3c>)
   1b010:	2201      	movs	r2, #1
   1b012:	701a      	strb	r2, [r3, #0]
			tempStartTimer = xTaskGetTickCount();
   1b014:	4b06      	ldr	r3, [pc, #24]	; (1b030 <triggerAutoStart+0x40>)
   1b016:	4798      	blx	r3
   1b018:	0002      	movs	r2, r0
   1b01a:	4b06      	ldr	r3, [pc, #24]	; (1b034 <triggerAutoStart+0x44>)
   1b01c:	601a      	str	r2, [r3, #0]
		}
	}
}
   1b01e:	46c0      	nop			; (mov r8, r8)
   1b020:	46bd      	mov	sp, r7
   1b022:	bd80      	pop	{r7, pc}
   1b024:	0001ac9d 	.word	0x0001ac9d
   1b028:	0001ac35 	.word	0x0001ac35
   1b02c:	20000792 	.word	0x20000792
   1b030:	0002034d 	.word	0x0002034d
   1b034:	20000798 	.word	0x20000798

0001b038 <operateOnEvent>:

void operateOnEvent(void)
{
   1b038:	b590      	push	{r4, r7, lr}
   1b03a:	b083      	sub	sp, #12
   1b03c:	af00      	add	r7, sp, #0
	uint8_t t3Phase;
	//bool t3Phase, tMotor, tacPhase;
	bool tPhaseSeq, tMotor, tacPhase;
	readSensorState(&t3Phase, &tPhaseSeq, &tMotor, &tacPhase);
   1b03e:	1d3b      	adds	r3, r7, #4
   1b040:	1d7a      	adds	r2, r7, #5
   1b042:	1db9      	adds	r1, r7, #6
   1b044:	1df8      	adds	r0, r7, #7
   1b046:	4c5c      	ldr	r4, [pc, #368]	; (1b1b8 <operateOnEvent+0x180>)
   1b048:	47a0      	blx	r4
	eventOccured = false;
   1b04a:	4b5c      	ldr	r3, [pc, #368]	; (1b1bc <operateOnEvent+0x184>)
   1b04c:	2200      	movs	r2, #0
   1b04e:	701a      	strb	r2, [r3, #0]
	
	//todo: add current phase Sequence and previous phase sequence is equals check here
	//if ((t3Phase == getAllPhaseState()) && (tMotor == getMotorState()) && (tacPhase == getACPowerState()))
	if ((t3Phase == getAllPhaseState()) && (tMotor == getMotorState()))
   1b050:	4b5b      	ldr	r3, [pc, #364]	; (1b1c0 <operateOnEvent+0x188>)
   1b052:	4798      	blx	r3
   1b054:	0003      	movs	r3, r0
   1b056:	001a      	movs	r2, r3
   1b058:	1dfb      	adds	r3, r7, #7
   1b05a:	781b      	ldrb	r3, [r3, #0]
   1b05c:	429a      	cmp	r2, r3
   1b05e:	d108      	bne.n	1b072 <operateOnEvent+0x3a>
   1b060:	4b58      	ldr	r3, [pc, #352]	; (1b1c4 <operateOnEvent+0x18c>)
   1b062:	4798      	blx	r3
   1b064:	0003      	movs	r3, r0
   1b066:	001a      	movs	r2, r3
   1b068:	1d7b      	adds	r3, r7, #5
   1b06a:	781b      	ldrb	r3, [r3, #0]
   1b06c:	429a      	cmp	r2, r3
   1b06e:	d100      	bne.n	1b072 <operateOnEvent+0x3a>
   1b070:	e09e      	b.n	1b1b0 <operateOnEvent+0x178>
	{
		return;
	}
	if (getMotorState())	//motorOn
   1b072:	4b54      	ldr	r3, [pc, #336]	; (1b1c4 <operateOnEvent+0x18c>)
   1b074:	4798      	blx	r3
   1b076:	1e03      	subs	r3, r0, #0
   1b078:	d05a      	beq.n	1b130 <operateOnEvent+0xf8>
	{
		if (t3Phase==AC_OFF && !tMotor && !tacPhase)	//acPower Cut Off
   1b07a:	1dfb      	adds	r3, r7, #7
   1b07c:	781b      	ldrb	r3, [r3, #0]
   1b07e:	2b00      	cmp	r3, #0
   1b080:	d11e      	bne.n	1b0c0 <operateOnEvent+0x88>
   1b082:	1d7b      	adds	r3, r7, #5
   1b084:	781b      	ldrb	r3, [r3, #0]
   1b086:	2201      	movs	r2, #1
   1b088:	4053      	eors	r3, r2
   1b08a:	b2db      	uxtb	r3, r3
   1b08c:	2b00      	cmp	r3, #0
   1b08e:	d017      	beq.n	1b0c0 <operateOnEvent+0x88>
   1b090:	1d3b      	adds	r3, r7, #4
   1b092:	781b      	ldrb	r3, [r3, #0]
   1b094:	2201      	movs	r2, #1
   1b096:	4053      	eors	r3, r2
   1b098:	b2db      	uxtb	r3, r3
   1b09a:	2b00      	cmp	r3, #0
   1b09c:	d010      	beq.n	1b0c0 <operateOnEvent+0x88>
		{
			stopMotor(false,true,false);
   1b09e:	2200      	movs	r2, #0
   1b0a0:	2101      	movs	r1, #1
   1b0a2:	2000      	movs	r0, #0
   1b0a4:	4b48      	ldr	r3, [pc, #288]	; (1b1c8 <operateOnEvent+0x190>)
   1b0a6:	4798      	blx	r3
			THREEPHASE_OK_LED_OFF;
   1b0a8:	2101      	movs	r1, #1
   1b0aa:	2027      	movs	r0, #39	; 0x27
   1b0ac:	4b47      	ldr	r3, [pc, #284]	; (1b1cc <operateOnEvent+0x194>)
   1b0ae:	4798      	blx	r3
			simEventTemp[6] = registerEvent('C'); //report To SIM Motor Off due to POWER CUT OFF
   1b0b0:	2043      	movs	r0, #67	; 0x43
   1b0b2:	4b47      	ldr	r3, [pc, #284]	; (1b1d0 <operateOnEvent+0x198>)
   1b0b4:	4798      	blx	r3
   1b0b6:	0003      	movs	r3, r0
   1b0b8:	001a      	movs	r2, r3
   1b0ba:	4b46      	ldr	r3, [pc, #280]	; (1b1d4 <operateOnEvent+0x19c>)
   1b0bc:	719a      	strb	r2, [r3, #6]
   1b0be:	e06c      	b.n	1b19a <operateOnEvent+0x162>
		}
		////////////////////////////////////////Unknown Motor Off Check ////////////////////////////////////////
		
		//else if ((tacPhase && getACPowerState()) &&																										//AC PHASE PRESENT
		else if (((user_settings_parameter_struct.detectSinglePhasing && t3Phase==AC_3PH && getAllPhaseState()==AC_3PH) ||								//IF SPP ON, 3 phase old and current is present
   1b0c0:	4b45      	ldr	r3, [pc, #276]	; (1b1d8 <operateOnEvent+0x1a0>)
   1b0c2:	2220      	movs	r2, #32
   1b0c4:	5c9b      	ldrb	r3, [r3, r2]
   1b0c6:	2b00      	cmp	r3, #0
   1b0c8:	d008      	beq.n	1b0dc <operateOnEvent+0xa4>
   1b0ca:	1dfb      	adds	r3, r7, #7
   1b0cc:	781b      	ldrb	r3, [r3, #0]
   1b0ce:	2b03      	cmp	r3, #3
   1b0d0:	d104      	bne.n	1b0dc <operateOnEvent+0xa4>
   1b0d2:	4b3b      	ldr	r3, [pc, #236]	; (1b1c0 <operateOnEvent+0x188>)
   1b0d4:	4798      	blx	r3
   1b0d6:	0003      	movs	r3, r0
   1b0d8:	2b03      	cmp	r3, #3
   1b0da:	d00d      	beq.n	1b0f8 <operateOnEvent+0xc0>
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
   1b0dc:	4b3e      	ldr	r3, [pc, #248]	; (1b1d8 <operateOnEvent+0x1a0>)
   1b0de:	2220      	movs	r2, #32
   1b0e0:	5c9b      	ldrb	r3, [r3, r2]
		else if (((user_settings_parameter_struct.detectSinglePhasing && t3Phase==AC_3PH && getAllPhaseState()==AC_3PH) ||								//IF SPP ON, 3 phase old and current is present
   1b0e2:	2b00      	cmp	r3, #0
   1b0e4:	d112      	bne.n	1b10c <operateOnEvent+0xd4>
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
   1b0e6:	1dfb      	adds	r3, r7, #7
   1b0e8:	781b      	ldrb	r3, [r3, #0]
   1b0ea:	2b01      	cmp	r3, #1
   1b0ec:	d90e      	bls.n	1b10c <operateOnEvent+0xd4>
   1b0ee:	4b34      	ldr	r3, [pc, #208]	; (1b1c0 <operateOnEvent+0x188>)
   1b0f0:	4798      	blx	r3
   1b0f2:	0003      	movs	r3, r0
   1b0f4:	2b01      	cmp	r3, #1
   1b0f6:	d909      	bls.n	1b10c <operateOnEvent+0xd4>
		(!tMotor))																																// AND MOTOR HAS TURNED OFF
   1b0f8:	1d7b      	adds	r3, r7, #5
   1b0fa:	781b      	ldrb	r3, [r3, #0]
   1b0fc:	2201      	movs	r2, #1
   1b0fe:	4053      	eors	r3, r2
   1b100:	b2db      	uxtb	r3, r3
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
   1b102:	2b00      	cmp	r3, #0
   1b104:	d002      	beq.n	1b10c <operateOnEvent+0xd4>
		{
			unknownMotorOff();
   1b106:	4b35      	ldr	r3, [pc, #212]	; (1b1dc <operateOnEvent+0x1a4>)
   1b108:	4798      	blx	r3
   1b10a:	e046      	b.n	1b19a <operateOnEvent+0x162>
		}
		///////////////////////// SINGLE PHASING CHECK /////////////////////////
		else if (user_settings_parameter_struct.detectSinglePhasing &&																						//SPP IS ON
   1b10c:	4b32      	ldr	r3, [pc, #200]	; (1b1d8 <operateOnEvent+0x1a0>)
   1b10e:	2220      	movs	r2, #32
   1b110:	5c9b      	ldrb	r3, [r3, r2]
   1b112:	2b00      	cmp	r3, #0
   1b114:	d041      	beq.n	1b19a <operateOnEvent+0x162>
		t3Phase==AC_2PH) /*&&																														// Only 2 Phase Present
   1b116:	1dfb      	adds	r3, r7, #7
   1b118:	781b      	ldrb	r3, [r3, #0]
		else if (user_settings_parameter_struct.detectSinglePhasing &&																						//SPP IS ON
   1b11a:	2b02      	cmp	r3, #2
   1b11c:	d13d      	bne.n	1b19a <operateOnEvent+0x162>
		tacPhase)*/ ////single phasing occured																									// AC Phase is Present
		{
			tempSinglePhasingTimer = xTaskGetTickCount();
   1b11e:	4b30      	ldr	r3, [pc, #192]	; (1b1e0 <operateOnEvent+0x1a8>)
   1b120:	4798      	blx	r3
   1b122:	0002      	movs	r2, r0
   1b124:	4b2f      	ldr	r3, [pc, #188]	; (1b1e4 <operateOnEvent+0x1ac>)
   1b126:	601a      	str	r2, [r3, #0]
			singlePhasingTimerOn = true;
   1b128:	4b2f      	ldr	r3, [pc, #188]	; (1b1e8 <operateOnEvent+0x1b0>)
   1b12a:	2201      	movs	r2, #1
   1b12c:	701a      	strb	r2, [r3, #0]
   1b12e:	e034      	b.n	1b19a <operateOnEvent+0x162>
		}
	}
	else
	{
		if (tMotor)		// motor turn on manually
   1b130:	1d7b      	adds	r3, r7, #5
   1b132:	781b      	ldrb	r3, [r3, #0]
   1b134:	2b00      	cmp	r3, #0
   1b136:	d028      	beq.n	1b18a <operateOnEvent+0x152>
		{
			if (t3Phase==AC_3PH && tPhaseSeq && tacPhase)
   1b138:	1dfb      	adds	r3, r7, #7
   1b13a:	781b      	ldrb	r3, [r3, #0]
   1b13c:	2b03      	cmp	r3, #3
   1b13e:	d11e      	bne.n	1b17e <operateOnEvent+0x146>
   1b140:	1dbb      	adds	r3, r7, #6
   1b142:	781b      	ldrb	r3, [r3, #0]
   1b144:	2b00      	cmp	r3, #0
   1b146:	d01a      	beq.n	1b17e <operateOnEvent+0x146>
   1b148:	1d3b      	adds	r3, r7, #4
   1b14a:	781b      	ldrb	r3, [r3, #0]
   1b14c:	2b00      	cmp	r3, #0
   1b14e:	d016      	beq.n	1b17e <operateOnEvent+0x146>
			{
				if (startTimerOn)
   1b150:	4b26      	ldr	r3, [pc, #152]	; (1b1ec <operateOnEvent+0x1b4>)
   1b152:	781b      	ldrb	r3, [r3, #0]
   1b154:	2b00      	cmp	r3, #0
   1b156:	d002      	beq.n	1b15e <operateOnEvent+0x126>
				{
					startTimerOn = false;
   1b158:	4b24      	ldr	r3, [pc, #144]	; (1b1ec <operateOnEvent+0x1b4>)
   1b15a:	2200      	movs	r2, #0
   1b15c:	701a      	strb	r2, [r3, #0]
				}
				THREEPHASE_OK_LED_ON;
   1b15e:	2100      	movs	r1, #0
   1b160:	2027      	movs	r0, #39	; 0x27
   1b162:	4b1a      	ldr	r3, [pc, #104]	; (1b1cc <operateOnEvent+0x194>)
   1b164:	4798      	blx	r3
				simEventTemp[7] = registerEvent('S');	//register To SIM Motor has started
   1b166:	2053      	movs	r0, #83	; 0x53
   1b168:	4b19      	ldr	r3, [pc, #100]	; (1b1d0 <operateOnEvent+0x198>)
   1b16a:	4798      	blx	r3
   1b16c:	0003      	movs	r3, r0
   1b16e:	001a      	movs	r2, r3
   1b170:	4b18      	ldr	r3, [pc, #96]	; (1b1d4 <operateOnEvent+0x19c>)
   1b172:	71da      	strb	r2, [r3, #7]
				startMotor(true,true);
   1b174:	2101      	movs	r1, #1
   1b176:	2001      	movs	r0, #1
   1b178:	4b1d      	ldr	r3, [pc, #116]	; (1b1f0 <operateOnEvent+0x1b8>)
   1b17a:	4798      	blx	r3
   1b17c:	e00d      	b.n	1b19a <operateOnEvent+0x162>
			}
			else
			{
				stopMotor(false,true,false);
   1b17e:	2200      	movs	r2, #0
   1b180:	2101      	movs	r1, #1
   1b182:	2000      	movs	r0, #0
   1b184:	4b10      	ldr	r3, [pc, #64]	; (1b1c8 <operateOnEvent+0x190>)
   1b186:	4798      	blx	r3
   1b188:	e007      	b.n	1b19a <operateOnEvent+0x162>
			}
		}
		else
		{
			waitStableLineOn = true;
   1b18a:	4b1a      	ldr	r3, [pc, #104]	; (1b1f4 <operateOnEvent+0x1bc>)
   1b18c:	2201      	movs	r2, #1
   1b18e:	701a      	strb	r2, [r3, #0]
			waitStableLineTimer = xTaskGetTickCount();
   1b190:	4b13      	ldr	r3, [pc, #76]	; (1b1e0 <operateOnEvent+0x1a8>)
   1b192:	4798      	blx	r3
   1b194:	0002      	movs	r2, r0
   1b196:	4b18      	ldr	r3, [pc, #96]	; (1b1f8 <operateOnEvent+0x1c0>)
   1b198:	601a      	str	r2, [r3, #0]
		}
	}
	updateSensorState(t3Phase,tPhaseSeq, tMotor,tacPhase);
   1b19a:	1dfb      	adds	r3, r7, #7
   1b19c:	7818      	ldrb	r0, [r3, #0]
   1b19e:	1dbb      	adds	r3, r7, #6
   1b1a0:	7819      	ldrb	r1, [r3, #0]
   1b1a2:	1d7b      	adds	r3, r7, #5
   1b1a4:	781a      	ldrb	r2, [r3, #0]
   1b1a6:	1d3b      	adds	r3, r7, #4
   1b1a8:	781b      	ldrb	r3, [r3, #0]
   1b1aa:	4c14      	ldr	r4, [pc, #80]	; (1b1fc <operateOnEvent+0x1c4>)
   1b1ac:	47a0      	blx	r4
   1b1ae:	e000      	b.n	1b1b2 <operateOnEvent+0x17a>
		return;
   1b1b0:	46c0      	nop			; (mov r8, r8)
}
   1b1b2:	46bd      	mov	sp, r7
   1b1b4:	b003      	add	sp, #12
   1b1b6:	bd90      	pop	{r4, r7, pc}
   1b1b8:	0001ad21 	.word	0x0001ad21
   1b1bc:	20000722 	.word	0x20000722
   1b1c0:	0001ac35 	.word	0x0001ac35
   1b1c4:	0001ac9d 	.word	0x0001ac9d
   1b1c8:	0001b56d 	.word	0x0001b56d
   1b1cc:	00019135 	.word	0x00019135
   1b1d0:	0001492d 	.word	0x0001492d
   1b1d4:	2000070c 	.word	0x2000070c
   1b1d8:	20000654 	.word	0x20000654
   1b1dc:	0001b695 	.word	0x0001b695
   1b1e0:	0002034d 	.word	0x0002034d
   1b1e4:	20000770 	.word	0x20000770
   1b1e8:	20000789 	.word	0x20000789
   1b1ec:	20000792 	.word	0x20000792
   1b1f0:	0001b391 	.word	0x0001b391
   1b1f4:	2000080d 	.word	0x2000080d
   1b1f8:	200007c8 	.word	0x200007c8
   1b1fc:	0001aea9 	.word	0x0001aea9

0001b200 <checkLineSensors>:

uint8_t checkLineSensors(void)
{
   1b200:	b580      	push	{r7, lr}
   1b202:	af00      	add	r7, sp, #0
	return structThreePhase_state.u8t_phase_ac_state;
   1b204:	4b02      	ldr	r3, [pc, #8]	; (1b210 <checkLineSensors+0x10>)
   1b206:	785b      	ldrb	r3, [r3, #1]
   1b208:	b2db      	uxtb	r3, r3
}
   1b20a:	0018      	movs	r0, r3
   1b20c:	46bd      	mov	sp, r7
   1b20e:	bd80      	pop	{r7, pc}
   1b210:	20000740 	.word	0x20000740

0001b214 <operateOnStableLine>:

void operateOnStableLine(void)
{
   1b214:	b590      	push	{r4, r7, lr}
   1b216:	b083      	sub	sp, #12
   1b218:	af00      	add	r7, sp, #0
	waitStableLineOn = false;
   1b21a:	4b41      	ldr	r3, [pc, #260]	; (1b320 <operateOnStableLine+0x10c>)
   1b21c:	2200      	movs	r2, #0
   1b21e:	701a      	strb	r2, [r3, #0]
	uint8_t temp = checkLineSensors();
   1b220:	1dbc      	adds	r4, r7, #6
   1b222:	4b40      	ldr	r3, [pc, #256]	; (1b324 <operateOnStableLine+0x110>)
   1b224:	4798      	blx	r3
   1b226:	0003      	movs	r3, r0
   1b228:	7023      	strb	r3, [r4, #0]
	if (temp == AC_3PH)
   1b22a:	1dbb      	adds	r3, r7, #6
   1b22c:	781b      	ldrb	r3, [r3, #0]
   1b22e:	2b03      	cmp	r3, #3
   1b230:	d133      	bne.n	1b29a <operateOnStableLine+0x86>
	{
		bool tempPhaseSeq = true;													//Set Temp Phase Seq to True
   1b232:	1dfb      	adds	r3, r7, #7
   1b234:	2201      	movs	r2, #1
   1b236:	701a      	strb	r2, [r3, #0]
		if(user_settings_parameter_struct.detectPhaseSequence)						// if Sequence Detection is needed
   1b238:	4b3b      	ldr	r3, [pc, #236]	; (1b328 <operateOnStableLine+0x114>)
   1b23a:	2224      	movs	r2, #36	; 0x24
   1b23c:	5c9b      	ldrb	r3, [r3, r2]
   1b23e:	2b00      	cmp	r3, #0
   1b240:	d004      	beq.n	1b24c <operateOnStableLine+0x38>
		{
			tempPhaseSeq = getPhaseSequence();										// set current phase seq to the temp variable
   1b242:	1dfc      	adds	r4, r7, #7
   1b244:	4b39      	ldr	r3, [pc, #228]	; (1b32c <operateOnStableLine+0x118>)
   1b246:	4798      	blx	r3
   1b248:	0003      	movs	r3, r0
   1b24a:	7023      	strb	r3, [r4, #0]
		}
		
		if(tempPhaseSeq)															// if correct phase seq than
   1b24c:	1dfb      	adds	r3, r7, #7
   1b24e:	781b      	ldrb	r3, [r3, #0]
   1b250:	2b00      	cmp	r3, #0
   1b252:	d016      	beq.n	1b282 <operateOnStableLine+0x6e>
		{
			THREEPHASE_OK_LED_ON;
   1b254:	2100      	movs	r1, #0
   1b256:	2027      	movs	r0, #39	; 0x27
   1b258:	4b35      	ldr	r3, [pc, #212]	; (1b330 <operateOnStableLine+0x11c>)
   1b25a:	4798      	blx	r3
			if (user_settings_parameter_struct.autoStartAddress)
   1b25c:	4b32      	ldr	r3, [pc, #200]	; (1b328 <operateOnStableLine+0x114>)
   1b25e:	785b      	ldrb	r3, [r3, #1]
   1b260:	2b00      	cmp	r3, #0
   1b262:	d002      	beq.n	1b26a <operateOnStableLine+0x56>
			{
				triggerAutoStart();
   1b264:	4b33      	ldr	r3, [pc, #204]	; (1b334 <operateOnStableLine+0x120>)
   1b266:	4798      	blx	r3
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
		{
			simEventTemp[5] = registerEvent('L'); //register To SIM AC Power OFF
		}
	}
}
   1b268:	e055      	b.n	1b316 <operateOnStableLine+0x102>
				if (user_settings_parameter_struct.dndAddress!=DND_LIGHT)			//DND IS OFF FOR ALL 3 PHASE LIGHT EVENTS, DND IS ON FOR SINGLE PHASING EVENTS
   1b26a:	4b2f      	ldr	r3, [pc, #188]	; (1b328 <operateOnStableLine+0x114>)
   1b26c:	791b      	ldrb	r3, [r3, #4]
   1b26e:	2b4c      	cmp	r3, #76	; 0x4c
   1b270:	d051      	beq.n	1b316 <operateOnStableLine+0x102>
					simEventTemp[4] = registerEvent('G');							//register TO SIM AC power ON
   1b272:	2047      	movs	r0, #71	; 0x47
   1b274:	4b30      	ldr	r3, [pc, #192]	; (1b338 <operateOnStableLine+0x124>)
   1b276:	4798      	blx	r3
   1b278:	0003      	movs	r3, r0
   1b27a:	001a      	movs	r2, r3
   1b27c:	4b2f      	ldr	r3, [pc, #188]	; (1b33c <operateOnStableLine+0x128>)
   1b27e:	711a      	strb	r2, [r3, #4]
}
   1b280:	e049      	b.n	1b316 <operateOnStableLine+0x102>
			THREEPHASE_OK_LED_OFF;
   1b282:	2101      	movs	r1, #1
   1b284:	2027      	movs	r0, #39	; 0x27
   1b286:	4b2a      	ldr	r3, [pc, #168]	; (1b330 <operateOnStableLine+0x11c>)
   1b288:	4798      	blx	r3
			simEventTemp[9] = registerEvent('A');								//incorrect sequence
   1b28a:	2041      	movs	r0, #65	; 0x41
   1b28c:	4b2a      	ldr	r3, [pc, #168]	; (1b338 <operateOnStableLine+0x124>)
   1b28e:	4798      	blx	r3
   1b290:	0003      	movs	r3, r0
   1b292:	001a      	movs	r2, r3
   1b294:	4b29      	ldr	r3, [pc, #164]	; (1b33c <operateOnStableLine+0x128>)
   1b296:	725a      	strb	r2, [r3, #9]
}
   1b298:	e03d      	b.n	1b316 <operateOnStableLine+0x102>
	else if (temp == AC_2PH) //Got Power in 2 phase
   1b29a:	1dbb      	adds	r3, r7, #6
   1b29c:	781b      	ldrb	r3, [r3, #0]
   1b29e:	2b02      	cmp	r3, #2
   1b2a0:	d114      	bne.n	1b2cc <operateOnStableLine+0xb8>
		THREEPHASE_OK_LED_OFF;
   1b2a2:	2101      	movs	r1, #1
   1b2a4:	2027      	movs	r0, #39	; 0x27
   1b2a6:	4b22      	ldr	r3, [pc, #136]	; (1b330 <operateOnStableLine+0x11c>)
   1b2a8:	4798      	blx	r3
		if (user_settings_parameter_struct.dndAddress == DND_OFF &&					//DND IS OFF FOR ALL KIND OF EVENTS
   1b2aa:	4b1f      	ldr	r3, [pc, #124]	; (1b328 <operateOnStableLine+0x114>)
   1b2ac:	791b      	ldrb	r3, [r3, #4]
   1b2ae:	2b4f      	cmp	r3, #79	; 0x4f
   1b2b0:	d131      	bne.n	1b316 <operateOnStableLine+0x102>
		!user_settings_parameter_struct.detectSinglePhasing)					//SINGLE PHASING PROTECTION IS ON
   1b2b2:	4b1d      	ldr	r3, [pc, #116]	; (1b328 <operateOnStableLine+0x114>)
   1b2b4:	2220      	movs	r2, #32
   1b2b6:	5c9b      	ldrb	r3, [r3, r2]
		if (user_settings_parameter_struct.dndAddress == DND_OFF &&					//DND IS OFF FOR ALL KIND OF EVENTS
   1b2b8:	2b00      	cmp	r3, #0
   1b2ba:	d12c      	bne.n	1b316 <operateOnStableLine+0x102>
			simEventTemp[9] = registerEvent('A'); //register TO SIM 2 phase power ON
   1b2bc:	2041      	movs	r0, #65	; 0x41
   1b2be:	4b1e      	ldr	r3, [pc, #120]	; (1b338 <operateOnStableLine+0x124>)
   1b2c0:	4798      	blx	r3
   1b2c2:	0003      	movs	r3, r0
   1b2c4:	001a      	movs	r2, r3
   1b2c6:	4b1d      	ldr	r3, [pc, #116]	; (1b33c <operateOnStableLine+0x128>)
   1b2c8:	725a      	strb	r2, [r3, #9]
}
   1b2ca:	e024      	b.n	1b316 <operateOnStableLine+0x102>
	else if (temp == AC_OFF)	//Lost Power in All Phase
   1b2cc:	1dbb      	adds	r3, r7, #6
   1b2ce:	781b      	ldrb	r3, [r3, #0]
   1b2d0:	2b00      	cmp	r3, #0
   1b2d2:	d120      	bne.n	1b316 <operateOnStableLine+0x102>
		THREEPHASE_OK_LED_OFF;
   1b2d4:	2101      	movs	r1, #1
   1b2d6:	2027      	movs	r0, #39	; 0x27
   1b2d8:	4b15      	ldr	r3, [pc, #84]	; (1b330 <operateOnStableLine+0x11c>)
   1b2da:	4798      	blx	r3
		if ((user_settings_parameter_struct.dndAddress == DND_OFF) ||												//DND IS OFF FOR ALL EVENTS
   1b2dc:	4b12      	ldr	r3, [pc, #72]	; (1b328 <operateOnStableLine+0x114>)
   1b2de:	791b      	ldrb	r3, [r3, #4]
   1b2e0:	2b4f      	cmp	r3, #79	; 0x4f
   1b2e2:	d011      	beq.n	1b308 <operateOnStableLine+0xf4>
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
   1b2e4:	4b16      	ldr	r3, [pc, #88]	; (1b340 <operateOnStableLine+0x12c>)
   1b2e6:	781b      	ldrb	r3, [r3, #0]
   1b2e8:	b2db      	uxtb	r3, r3
		if ((user_settings_parameter_struct.dndAddress == DND_OFF) ||												//DND IS OFF FOR ALL EVENTS
   1b2ea:	2b02      	cmp	r3, #2
   1b2ec:	d103      	bne.n	1b2f6 <operateOnStableLine+0xe2>
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
   1b2ee:	4b0e      	ldr	r3, [pc, #56]	; (1b328 <operateOnStableLine+0x114>)
   1b2f0:	791b      	ldrb	r3, [r3, #4]
   1b2f2:	2b4f      	cmp	r3, #79	; 0x4f
   1b2f4:	d008      	beq.n	1b308 <operateOnStableLine+0xf4>
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
   1b2f6:	4b12      	ldr	r3, [pc, #72]	; (1b340 <operateOnStableLine+0x12c>)
   1b2f8:	781b      	ldrb	r3, [r3, #0]
   1b2fa:	b2db      	uxtb	r3, r3
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
   1b2fc:	2b03      	cmp	r3, #3
   1b2fe:	d10a      	bne.n	1b316 <operateOnStableLine+0x102>
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
   1b300:	4b09      	ldr	r3, [pc, #36]	; (1b328 <operateOnStableLine+0x114>)
   1b302:	791b      	ldrb	r3, [r3, #4]
   1b304:	2b4c      	cmp	r3, #76	; 0x4c
   1b306:	d006      	beq.n	1b316 <operateOnStableLine+0x102>
			simEventTemp[5] = registerEvent('L'); //register To SIM AC Power OFF
   1b308:	204c      	movs	r0, #76	; 0x4c
   1b30a:	4b0b      	ldr	r3, [pc, #44]	; (1b338 <operateOnStableLine+0x124>)
   1b30c:	4798      	blx	r3
   1b30e:	0003      	movs	r3, r0
   1b310:	001a      	movs	r2, r3
   1b312:	4b0a      	ldr	r3, [pc, #40]	; (1b33c <operateOnStableLine+0x128>)
   1b314:	715a      	strb	r2, [r3, #5]
}
   1b316:	46c0      	nop			; (mov r8, r8)
   1b318:	46bd      	mov	sp, r7
   1b31a:	b003      	add	sp, #12
   1b31c:	bd90      	pop	{r4, r7, pc}
   1b31e:	46c0      	nop			; (mov r8, r8)
   1b320:	2000080d 	.word	0x2000080d
   1b324:	0001b201 	.word	0x0001b201
   1b328:	20000654 	.word	0x20000654
   1b32c:	0001ac69 	.word	0x0001ac69
   1b330:	00019135 	.word	0x00019135
   1b334:	0001aff1 	.word	0x0001aff1
   1b338:	0001492d 	.word	0x0001492d
   1b33c:	2000070c 	.word	0x2000070c
   1b340:	2000071f 	.word	0x2000071f

0001b344 <waitStableLineOver>:

bool waitStableLineOver(void)
{
   1b344:	b580      	push	{r7, lr}
   1b346:	af00      	add	r7, sp, #0
	return (waitStableLineOn && xTaskGetTickCount() - waitStableLineTimer >= (waitStableLineTime * 100));
   1b348:	4b0d      	ldr	r3, [pc, #52]	; (1b380 <waitStableLineOver+0x3c>)
   1b34a:	781b      	ldrb	r3, [r3, #0]
   1b34c:	2b00      	cmp	r3, #0
   1b34e:	d00e      	beq.n	1b36e <waitStableLineOver+0x2a>
   1b350:	4b0c      	ldr	r3, [pc, #48]	; (1b384 <waitStableLineOver+0x40>)
   1b352:	4798      	blx	r3
   1b354:	0002      	movs	r2, r0
   1b356:	4b0c      	ldr	r3, [pc, #48]	; (1b388 <waitStableLineOver+0x44>)
   1b358:	681b      	ldr	r3, [r3, #0]
   1b35a:	1ad3      	subs	r3, r2, r3
   1b35c:	4a0b      	ldr	r2, [pc, #44]	; (1b38c <waitStableLineOver+0x48>)
   1b35e:	7812      	ldrb	r2, [r2, #0]
   1b360:	0011      	movs	r1, r2
   1b362:	2264      	movs	r2, #100	; 0x64
   1b364:	434a      	muls	r2, r1
   1b366:	4293      	cmp	r3, r2
   1b368:	d301      	bcc.n	1b36e <waitStableLineOver+0x2a>
   1b36a:	2301      	movs	r3, #1
   1b36c:	e000      	b.n	1b370 <waitStableLineOver+0x2c>
   1b36e:	2300      	movs	r3, #0
   1b370:	1c1a      	adds	r2, r3, #0
   1b372:	2301      	movs	r3, #1
   1b374:	4013      	ands	r3, r2
   1b376:	b2db      	uxtb	r3, r3
}
   1b378:	0018      	movs	r0, r3
   1b37a:	46bd      	mov	sp, r7
   1b37c:	bd80      	pop	{r7, pc}
   1b37e:	46c0      	nop			; (mov r8, r8)
   1b380:	2000080d 	.word	0x2000080d
   1b384:	0002034d 	.word	0x0002034d
   1b388:	200007c8 	.word	0x200007c8
   1b38c:	200007d9 	.word	0x200007d9

0001b390 <startMotor>:


void startMotor(bool commanded, bool forcedStart)
{
   1b390:	b580      	push	{r7, lr}
   1b392:	b082      	sub	sp, #8
   1b394:	af00      	add	r7, sp, #0
   1b396:	0002      	movs	r2, r0
   1b398:	1dfb      	adds	r3, r7, #7
   1b39a:	701a      	strb	r2, [r3, #0]
   1b39c:	1dbb      	adds	r3, r7, #6
   1b39e:	1c0a      	adds	r2, r1, #0
   1b3a0:	701a      	strb	r2, [r3, #0]
	startTimerOn = false;
   1b3a2:	4b5c      	ldr	r3, [pc, #368]	; (1b514 <startMotor+0x184>)
   1b3a4:	2200      	movs	r2, #0
   1b3a6:	701a      	strb	r2, [r3, #0]

	//if (forcedStart || (getACPowerState() &&																														//AC Phase is Presnet
	//((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
	//((user_settings_parameter_struct.detectPhaseSequence && getPhaseSequence()) || (!user_settings_parameter_struct.detectPhaseSequence))))	//Phase Sequnce Protection is ON and correct phase seq, or Phase Seq Protection is off
	
	if (forcedStart || 																														//AC Phase is Presnet
   1b3a8:	1dbb      	adds	r3, r7, #6
   1b3aa:	781b      	ldrb	r3, [r3, #0]
   1b3ac:	2b00      	cmp	r3, #0
   1b3ae:	d11f      	bne.n	1b3f0 <startMotor+0x60>
	(((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
   1b3b0:	4b59      	ldr	r3, [pc, #356]	; (1b518 <startMotor+0x188>)
   1b3b2:	4798      	blx	r3
   1b3b4:	0003      	movs	r3, r0
	if (forcedStart || 																														//AC Phase is Presnet
   1b3b6:	2b03      	cmp	r3, #3
   1b3b8:	d00b      	beq.n	1b3d2 <startMotor+0x42>
	(((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
   1b3ba:	4b57      	ldr	r3, [pc, #348]	; (1b518 <startMotor+0x188>)
   1b3bc:	4798      	blx	r3
   1b3be:	0003      	movs	r3, r0
   1b3c0:	2b02      	cmp	r3, #2
   1b3c2:	d000      	beq.n	1b3c6 <startMotor+0x36>
   1b3c4:	e091      	b.n	1b4ea <startMotor+0x15a>
   1b3c6:	4b55      	ldr	r3, [pc, #340]	; (1b51c <startMotor+0x18c>)
   1b3c8:	2220      	movs	r2, #32
   1b3ca:	5c9b      	ldrb	r3, [r3, r2]
   1b3cc:	2b00      	cmp	r3, #0
   1b3ce:	d000      	beq.n	1b3d2 <startMotor+0x42>
   1b3d0:	e08b      	b.n	1b4ea <startMotor+0x15a>
	((user_settings_parameter_struct.detectPhaseSequence && getPhaseSequence()) || (!user_settings_parameter_struct.detectPhaseSequence))))	//Phase Sequnce Protection is ON and correct phase seq, or Phase Seq Protection is off
   1b3d2:	4b52      	ldr	r3, [pc, #328]	; (1b51c <startMotor+0x18c>)
   1b3d4:	2224      	movs	r2, #36	; 0x24
   1b3d6:	5c9b      	ldrb	r3, [r3, r2]
	(((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
   1b3d8:	2b00      	cmp	r3, #0
   1b3da:	d003      	beq.n	1b3e4 <startMotor+0x54>
	((user_settings_parameter_struct.detectPhaseSequence && getPhaseSequence()) || (!user_settings_parameter_struct.detectPhaseSequence))))	//Phase Sequnce Protection is ON and correct phase seq, or Phase Seq Protection is off
   1b3dc:	4b50      	ldr	r3, [pc, #320]	; (1b520 <startMotor+0x190>)
   1b3de:	4798      	blx	r3
   1b3e0:	1e03      	subs	r3, r0, #0
   1b3e2:	d105      	bne.n	1b3f0 <startMotor+0x60>
   1b3e4:	4b4d      	ldr	r3, [pc, #308]	; (1b51c <startMotor+0x18c>)
   1b3e6:	2224      	movs	r2, #36	; 0x24
   1b3e8:	5c9b      	ldrb	r3, [r3, r2]
   1b3ea:	2b00      	cmp	r3, #0
   1b3ec:	d000      	beq.n	1b3f0 <startMotor+0x60>
   1b3ee:	e07c      	b.n	1b4ea <startMotor+0x15a>
	{
		if (!getMotorState())
   1b3f0:	4b4c      	ldr	r3, [pc, #304]	; (1b524 <startMotor+0x194>)
   1b3f2:	4798      	blx	r3
   1b3f4:	0003      	movs	r3, r0
   1b3f6:	001a      	movs	r2, r3
   1b3f8:	2301      	movs	r3, #1
   1b3fa:	4053      	eors	r3, r2
   1b3fc:	b2db      	uxtb	r3, r3
   1b3fe:	2b00      	cmp	r3, #0
   1b400:	d100      	bne.n	1b404 <startMotor+0x74>
   1b402:	e06a      	b.n	1b4da <startMotor+0x14a>
		{
			if (factory_settings_parameter_struct.ENABLE_WATER)
   1b404:	4b48      	ldr	r3, [pc, #288]	; (1b528 <startMotor+0x198>)
   1b406:	795b      	ldrb	r3, [r3, #5]
   1b408:	2b00      	cmp	r3, #0
   1b40a:	d034      	beq.n	1b476 <startMotor+0xe6>
			{
				if(!(user_settings_parameter_struct.waterBypassAddress) && getWaterSensorState()==CRITICALLEVEL)
   1b40c:	4b43      	ldr	r3, [pc, #268]	; (1b51c <startMotor+0x18c>)
   1b40e:	7fdb      	ldrb	r3, [r3, #31]
   1b410:	2b00      	cmp	r3, #0
   1b412:	d113      	bne.n	1b43c <startMotor+0xac>
   1b414:	4b45      	ldr	r3, [pc, #276]	; (1b52c <startMotor+0x19c>)
   1b416:	4798      	blx	r3
   1b418:	1e03      	subs	r3, r0, #0
   1b41a:	d10f      	bne.n	1b43c <startMotor+0xac>
				{
					if (commanded)
   1b41c:	1dfb      	adds	r3, r7, #7
   1b41e:	781b      	ldrb	r3, [r3, #0]
   1b420:	2b00      	cmp	r3, #0
   1b422:	d003      	beq.n	1b42c <startMotor+0x9c>
					{
						setMotorMGRResponse('T');	//cannot start motor due to some problem
   1b424:	2054      	movs	r0, #84	; 0x54
   1b426:	4b42      	ldr	r3, [pc, #264]	; (1b530 <startMotor+0x1a0>)
   1b428:	4798      	blx	r3
					}
					else
					{
						simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
					}
					return;
   1b42a:	e06f      	b.n	1b50c <startMotor+0x17c>
						simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
   1b42c:	204e      	movs	r0, #78	; 0x4e
   1b42e:	4b41      	ldr	r3, [pc, #260]	; (1b534 <startMotor+0x1a4>)
   1b430:	4798      	blx	r3
   1b432:	0003      	movs	r3, r0
   1b434:	001a      	movs	r2, r3
   1b436:	4b40      	ldr	r3, [pc, #256]	; (1b538 <startMotor+0x1a8>)
   1b438:	701a      	strb	r2, [r3, #0]
					return;
   1b43a:	e067      	b.n	1b50c <startMotor+0x17c>
				}
				
				if (factory_settings_parameter_struct.ENABLE_GP)
   1b43c:	4b3a      	ldr	r3, [pc, #232]	; (1b528 <startMotor+0x198>)
   1b43e:	791b      	ldrb	r3, [r3, #4]
   1b440:	2b00      	cmp	r3, #0
   1b442:	d018      	beq.n	1b476 <startMotor+0xe6>
				{
					if(!(user_settings_parameter_struct.waterBypassAddress) && getOverHeadWaterSensorState()==OVERHEADHIGHLEVEL)
   1b444:	4b35      	ldr	r3, [pc, #212]	; (1b51c <startMotor+0x18c>)
   1b446:	7fdb      	ldrb	r3, [r3, #31]
   1b448:	2b00      	cmp	r3, #0
   1b44a:	d114      	bne.n	1b476 <startMotor+0xe6>
   1b44c:	4b3b      	ldr	r3, [pc, #236]	; (1b53c <startMotor+0x1ac>)
   1b44e:	4798      	blx	r3
   1b450:	0003      	movs	r3, r0
   1b452:	2b02      	cmp	r3, #2
   1b454:	d10f      	bne.n	1b476 <startMotor+0xe6>
					{
						if(commanded)
   1b456:	1dfb      	adds	r3, r7, #7
   1b458:	781b      	ldrb	r3, [r3, #0]
   1b45a:	2b00      	cmp	r3, #0
   1b45c:	d003      	beq.n	1b466 <startMotor+0xd6>
						{
							setMotorMGRResponse('V');	//cannot start motor as OverHead Tank Full.
   1b45e:	2056      	movs	r0, #86	; 0x56
   1b460:	4b33      	ldr	r3, [pc, #204]	; (1b530 <startMotor+0x1a0>)
   1b462:	4798      	blx	r3
						}
						else
						{
							simEventTemp[17] = registerEvent('V');//register To SIM motor not started due to ANY REASON
						}
						return;
   1b464:	e052      	b.n	1b50c <startMotor+0x17c>
							simEventTemp[17] = registerEvent('V');//register To SIM motor not started due to ANY REASON
   1b466:	2056      	movs	r0, #86	; 0x56
   1b468:	4b32      	ldr	r3, [pc, #200]	; (1b534 <startMotor+0x1a4>)
   1b46a:	4798      	blx	r3
   1b46c:	0003      	movs	r3, r0
   1b46e:	001a      	movs	r2, r3
   1b470:	4b31      	ldr	r3, [pc, #196]	; (1b538 <startMotor+0x1a8>)
   1b472:	745a      	strb	r2, [r3, #17]
						return;
   1b474:	e04a      	b.n	1b50c <startMotor+0x17c>
					}
				}
			}

			STOP_RELAY_ON;
   1b476:	2101      	movs	r1, #1
   1b478:	202c      	movs	r0, #44	; 0x2c
   1b47a:	4b31      	ldr	r3, [pc, #196]	; (1b540 <startMotor+0x1b0>)
   1b47c:	4798      	blx	r3
			START_RELAY_ON;
   1b47e:	2101      	movs	r1, #1
   1b480:	202d      	movs	r0, #45	; 0x2d
   1b482:	4b2f      	ldr	r3, [pc, #188]	; (1b540 <startMotor+0x1b0>)
   1b484:	4798      	blx	r3
			stopMotorCommandGiven=false;
   1b486:	4b2f      	ldr	r3, [pc, #188]	; (1b544 <startMotor+0x1b4>)
   1b488:	2200      	movs	r2, #0
   1b48a:	701a      	strb	r2, [r3, #0]
			//MOTOR_ON_LED_ON;
			tempStartSequenceTimer = xTaskGetTickCount();
   1b48c:	4b2e      	ldr	r3, [pc, #184]	; (1b548 <startMotor+0x1b8>)
   1b48e:	4798      	blx	r3
   1b490:	0002      	movs	r2, r0
   1b492:	4b2e      	ldr	r3, [pc, #184]	; (1b54c <startMotor+0x1bc>)
   1b494:	601a      	str	r2, [r3, #0]
			startSequenceOn = true;
   1b496:	4b2e      	ldr	r3, [pc, #184]	; (1b550 <startMotor+0x1c0>)
   1b498:	2201      	movs	r2, #1
   1b49a:	701a      	strb	r2, [r3, #0]

			if(user_settings_parameter_struct.motorVoltageBypass==MOTOR_VOLTAGE_BYPASS_ON)
   1b49c:	4b1f      	ldr	r3, [pc, #124]	; (1b51c <startMotor+0x18c>)
   1b49e:	2227      	movs	r2, #39	; 0x27
   1b4a0:	5c9b      	ldrb	r3, [r3, r2]
   1b4a2:	2b01      	cmp	r3, #1
   1b4a4:	d107      	bne.n	1b4b6 <startMotor+0x126>
			{
				motorRelatedVoltageBypassOn=true;
   1b4a6:	4b2b      	ldr	r3, [pc, #172]	; (1b554 <startMotor+0x1c4>)
   1b4a8:	2201      	movs	r2, #1
   1b4aa:	701a      	strb	r2, [r3, #0]
				motorVoltageBypassTimerTime=xTaskGetTickCount();
   1b4ac:	4b26      	ldr	r3, [pc, #152]	; (1b548 <startMotor+0x1b8>)
   1b4ae:	4798      	blx	r3
   1b4b0:	0002      	movs	r2, r0
   1b4b2:	4b29      	ldr	r3, [pc, #164]	; (1b558 <startMotor+0x1c8>)
   1b4b4:	601a      	str	r2, [r3, #0]
			}

			setMotorState(true);
   1b4b6:	2001      	movs	r0, #1
   1b4b8:	4b28      	ldr	r3, [pc, #160]	; (1b55c <startMotor+0x1cc>)
   1b4ba:	4798      	blx	r3

			if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1b4bc:	4b1a      	ldr	r3, [pc, #104]	; (1b528 <startMotor+0x198>)
   1b4be:	785b      	ldrb	r3, [r3, #1]
   1b4c0:	2b00      	cmp	r3, #0
   1b4c2:	d005      	beq.n	1b4d0 <startMotor+0x140>
			{
				enableCurrentBuffer=false;
   1b4c4:	4b26      	ldr	r3, [pc, #152]	; (1b560 <startMotor+0x1d0>)
   1b4c6:	2200      	movs	r2, #0
   1b4c8:	701a      	strb	r2, [r3, #0]
				lastCurrentReading=CR_NORMAL;
   1b4ca:	4b26      	ldr	r3, [pc, #152]	; (1b564 <startMotor+0x1d4>)
   1b4cc:	2200      	movs	r2, #0
   1b4ce:	701a      	strb	r2, [r3, #0]
			}
			gotOnCommand = commanded;
   1b4d0:	4b25      	ldr	r3, [pc, #148]	; (1b568 <startMotor+0x1d8>)
   1b4d2:	1dfa      	adds	r2, r7, #7
   1b4d4:	7812      	ldrb	r2, [r2, #0]
   1b4d6:	701a      	strb	r2, [r3, #0]
		if (!getMotorState())
   1b4d8:	e017      	b.n	1b50a <startMotor+0x17a>
		}
		else
		{
			if (commanded)
   1b4da:	1dfb      	adds	r3, r7, #7
   1b4dc:	781b      	ldrb	r3, [r3, #0]
   1b4de:	2b00      	cmp	r3, #0
   1b4e0:	d013      	beq.n	1b50a <startMotor+0x17a>
			{
				setMotorMGRResponse('+');		//motor is already on
   1b4e2:	202b      	movs	r0, #43	; 0x2b
   1b4e4:	4b12      	ldr	r3, [pc, #72]	; (1b530 <startMotor+0x1a0>)
   1b4e6:	4798      	blx	r3
		if (!getMotorState())
   1b4e8:	e00f      	b.n	1b50a <startMotor+0x17a>
			}
		}
	}
	else
	{
		if (commanded)
   1b4ea:	1dfb      	adds	r3, r7, #7
   1b4ec:	781b      	ldrb	r3, [r3, #0]
   1b4ee:	2b00      	cmp	r3, #0
   1b4f0:	d003      	beq.n	1b4fa <startMotor+0x16a>
		{
			setMotorMGRResponse('N');	//cannot start motor due to some problem
   1b4f2:	204e      	movs	r0, #78	; 0x4e
   1b4f4:	4b0e      	ldr	r3, [pc, #56]	; (1b530 <startMotor+0x1a0>)
   1b4f6:	4798      	blx	r3
   1b4f8:	e008      	b.n	1b50c <startMotor+0x17c>
		}
		else
		{
			simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
   1b4fa:	204e      	movs	r0, #78	; 0x4e
   1b4fc:	4b0d      	ldr	r3, [pc, #52]	; (1b534 <startMotor+0x1a4>)
   1b4fe:	4798      	blx	r3
   1b500:	0003      	movs	r3, r0
   1b502:	001a      	movs	r2, r3
   1b504:	4b0c      	ldr	r3, [pc, #48]	; (1b538 <startMotor+0x1a8>)
   1b506:	701a      	strb	r2, [r3, #0]
   1b508:	e000      	b.n	1b50c <startMotor+0x17c>
		if (!getMotorState())
   1b50a:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   1b50c:	46bd      	mov	sp, r7
   1b50e:	b002      	add	sp, #8
   1b510:	bd80      	pop	{r7, pc}
   1b512:	46c0      	nop			; (mov r8, r8)
   1b514:	20000792 	.word	0x20000792
   1b518:	0001ac35 	.word	0x0001ac35
   1b51c:	20000654 	.word	0x20000654
   1b520:	0001ac69 	.word	0x0001ac69
   1b524:	0001ac9d 	.word	0x0001ac9d
   1b528:	2000062c 	.word	0x2000062c
   1b52c:	000194c9 	.word	0x000194c9
   1b530:	00014b05 	.word	0x00014b05
   1b534:	0001492d 	.word	0x0001492d
   1b538:	2000070c 	.word	0x2000070c
   1b53c:	00019399 	.word	0x00019399
   1b540:	00019135 	.word	0x00019135
   1b544:	20000860 	.word	0x20000860
   1b548:	0002034d 	.word	0x0002034d
   1b54c:	2000078c 	.word	0x2000078c
   1b550:	20000791 	.word	0x20000791
   1b554:	2000076b 	.word	0x2000076b
   1b558:	2000077c 	.word	0x2000077c
   1b55c:	0001acb1 	.word	0x0001acb1
   1b560:	20000758 	.word	0x20000758
   1b564:	20000776 	.word	0x20000776
   1b568:	20000708 	.word	0x20000708

0001b56c <stopMotor>:

void stopMotor(bool commanded, bool forceStop,bool offButton)
{
   1b56c:	b590      	push	{r4, r7, lr}
   1b56e:	b083      	sub	sp, #12
   1b570:	af00      	add	r7, sp, #0
   1b572:	0004      	movs	r4, r0
   1b574:	0008      	movs	r0, r1
   1b576:	0011      	movs	r1, r2
   1b578:	1dfb      	adds	r3, r7, #7
   1b57a:	1c22      	adds	r2, r4, #0
   1b57c:	701a      	strb	r2, [r3, #0]
   1b57e:	1dbb      	adds	r3, r7, #6
   1b580:	1c02      	adds	r2, r0, #0
   1b582:	701a      	strb	r2, [r3, #0]
   1b584:	1d7b      	adds	r3, r7, #5
   1b586:	1c0a      	adds	r2, r1, #0
   1b588:	701a      	strb	r2, [r3, #0]
	if (forceStop || getMotorState())
   1b58a:	1dbb      	adds	r3, r7, #6
   1b58c:	781b      	ldrb	r3, [r3, #0]
   1b58e:	2b00      	cmp	r3, #0
   1b590:	d103      	bne.n	1b59a <stopMotor+0x2e>
   1b592:	4b21      	ldr	r3, [pc, #132]	; (1b618 <stopMotor+0xac>)
   1b594:	4798      	blx	r3
   1b596:	1e03      	subs	r3, r0, #0
   1b598:	d032      	beq.n	1b600 <stopMotor+0x94>
	{
		singlePhasingTimerOn = false;
   1b59a:	4b20      	ldr	r3, [pc, #128]	; (1b61c <stopMotor+0xb0>)
   1b59c:	2200      	movs	r2, #0
   1b59e:	701a      	strb	r2, [r3, #0]
		if (user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_CURRENT)
   1b5a0:	4b1f      	ldr	r3, [pc, #124]	; (1b620 <stopMotor+0xb4>)
   1b5a2:	2225      	movs	r2, #37	; 0x25
   1b5a4:	5c9b      	ldrb	r3, [r3, r2]
   1b5a6:	2b01      	cmp	r3, #1
   1b5a8:	d105      	bne.n	1b5b6 <stopMotor+0x4a>
		{
			fdbkRefCurrent = Analog_Parameter_Struct.Motor_Current_IntPart;
   1b5aa:	4b1e      	ldr	r3, [pc, #120]	; (1b624 <stopMotor+0xb8>)
   1b5ac:	8a9b      	ldrh	r3, [r3, #20]
   1b5ae:	b29b      	uxth	r3, r3
   1b5b0:	b2da      	uxtb	r2, r3
   1b5b2:	4b1d      	ldr	r3, [pc, #116]	; (1b628 <stopMotor+0xbc>)
   1b5b4:	701a      	strb	r2, [r3, #0]
		}
		motorRelatedVoltageBypassOn=false;
   1b5b6:	4b1d      	ldr	r3, [pc, #116]	; (1b62c <stopMotor+0xc0>)
   1b5b8:	2200      	movs	r2, #0
   1b5ba:	701a      	strb	r2, [r3, #0]
		STOP_RELAY_OFF;
   1b5bc:	2100      	movs	r1, #0
   1b5be:	202c      	movs	r0, #44	; 0x2c
   1b5c0:	4b1b      	ldr	r3, [pc, #108]	; (1b630 <stopMotor+0xc4>)
   1b5c2:	4798      	blx	r3
		stopMotorCommandGiven=true;
   1b5c4:	4b1b      	ldr	r3, [pc, #108]	; (1b634 <stopMotor+0xc8>)
   1b5c6:	2201      	movs	r2, #1
   1b5c8:	701a      	strb	r2, [r3, #0]
		tempStopSequenceTimer = xTaskGetTickCount();
   1b5ca:	4b1b      	ldr	r3, [pc, #108]	; (1b638 <stopMotor+0xcc>)
   1b5cc:	4798      	blx	r3
   1b5ce:	0002      	movs	r2, r0
   1b5d0:	4b1a      	ldr	r3, [pc, #104]	; (1b63c <stopMotor+0xd0>)
   1b5d2:	601a      	str	r2, [r3, #0]
		stopSequenceOn = true;
   1b5d4:	4b1a      	ldr	r3, [pc, #104]	; (1b640 <stopMotor+0xd4>)
   1b5d6:	2201      	movs	r2, #1
   1b5d8:	701a      	strb	r2, [r3, #0]
		setMotorState(false);
   1b5da:	2000      	movs	r0, #0
   1b5dc:	4b19      	ldr	r3, [pc, #100]	; (1b644 <stopMotor+0xd8>)
   1b5de:	4798      	blx	r3
		gotOffCommand = commanded;
   1b5e0:	4b19      	ldr	r3, [pc, #100]	; (1b648 <stopMotor+0xdc>)
   1b5e2:	1dfa      	adds	r2, r7, #7
   1b5e4:	7812      	ldrb	r2, [r2, #0]
   1b5e6:	701a      	strb	r2, [r3, #0]
		offButtonPressed=offButton;
   1b5e8:	4b18      	ldr	r3, [pc, #96]	; (1b64c <stopMotor+0xe0>)
   1b5ea:	1d7a      	adds	r2, r7, #5
   1b5ec:	7812      	ldrb	r2, [r2, #0]
   1b5ee:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1b5f0:	4b17      	ldr	r3, [pc, #92]	; (1b650 <stopMotor+0xe4>)
   1b5f2:	785b      	ldrb	r3, [r3, #1]
   1b5f4:	2b00      	cmp	r3, #0
   1b5f6:	d00b      	beq.n	1b610 <stopMotor+0xa4>
		{
			lastCurrentReading=CR_NORMAL;			//to make the current readings normal
   1b5f8:	4b16      	ldr	r3, [pc, #88]	; (1b654 <stopMotor+0xe8>)
   1b5fa:	2200      	movs	r2, #0
   1b5fc:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1b5fe:	e007      	b.n	1b610 <stopMotor+0xa4>
		}
	}
	else
	{
		if (commanded)
   1b600:	1dfb      	adds	r3, r7, #7
   1b602:	781b      	ldrb	r3, [r3, #0]
   1b604:	2b00      	cmp	r3, #0
   1b606:	d003      	beq.n	1b610 <stopMotor+0xa4>
		{
			setMotorMGRResponse('-');	//motor is already off
   1b608:	202d      	movs	r0, #45	; 0x2d
   1b60a:	4b13      	ldr	r3, [pc, #76]	; (1b658 <stopMotor+0xec>)
   1b60c:	4798      	blx	r3
		}
	}
}
   1b60e:	e7ff      	b.n	1b610 <stopMotor+0xa4>
   1b610:	46c0      	nop			; (mov r8, r8)
   1b612:	46bd      	mov	sp, r7
   1b614:	b003      	add	sp, #12
   1b616:	bd90      	pop	{r4, r7, pc}
   1b618:	0001ac9d 	.word	0x0001ac9d
   1b61c:	20000789 	.word	0x20000789
   1b620:	20000654 	.word	0x20000654
   1b624:	200006dc 	.word	0x200006dc
   1b628:	200007f4 	.word	0x200007f4
   1b62c:	2000076b 	.word	0x2000076b
   1b630:	00019135 	.word	0x00019135
   1b634:	20000860 	.word	0x20000860
   1b638:	0002034d 	.word	0x0002034d
   1b63c:	200007a0 	.word	0x200007a0
   1b640:	20000780 	.word	0x20000780
   1b644:	0001acb1 	.word	0x0001acb1
   1b648:	2000080c 	.word	0x2000080c
   1b64c:	2000079c 	.word	0x2000079c
   1b650:	2000062c 	.word	0x2000062c
   1b654:	20000776 	.word	0x20000776
   1b658:	00014b05 	.word	0x00014b05

0001b65c <startMotorTimerOver>:

bool startMotorTimerOver(void)
{
   1b65c:	b580      	push	{r7, lr}
   1b65e:	af00      	add	r7, sp, #0
	return (xTaskGetTickCount() - tempStartTimer >= (((unsigned long int)user_settings_parameter_struct.autoStartTimeAddress * 1000)));
   1b660:	4b09      	ldr	r3, [pc, #36]	; (1b688 <startMotorTimerOver+0x2c>)
   1b662:	4798      	blx	r3
   1b664:	0002      	movs	r2, r0
   1b666:	4b09      	ldr	r3, [pc, #36]	; (1b68c <startMotorTimerOver+0x30>)
   1b668:	681b      	ldr	r3, [r3, #0]
   1b66a:	1ad1      	subs	r1, r2, r3
   1b66c:	4b08      	ldr	r3, [pc, #32]	; (1b690 <startMotorTimerOver+0x34>)
   1b66e:	885b      	ldrh	r3, [r3, #2]
   1b670:	001a      	movs	r2, r3
   1b672:	23fa      	movs	r3, #250	; 0xfa
   1b674:	009b      	lsls	r3, r3, #2
   1b676:	435a      	muls	r2, r3
   1b678:	2300      	movs	r3, #0
   1b67a:	4291      	cmp	r1, r2
   1b67c:	415b      	adcs	r3, r3
   1b67e:	b2db      	uxtb	r3, r3
}
   1b680:	0018      	movs	r0, r3
   1b682:	46bd      	mov	sp, r7
   1b684:	bd80      	pop	{r7, pc}
   1b686:	46c0      	nop			; (mov r8, r8)
   1b688:	0002034d 	.word	0x0002034d
   1b68c:	20000798 	.word	0x20000798
   1b690:	20000654 	.word	0x20000654

0001b694 <unknownMotorOff>:

void unknownMotorOff(void)
{
   1b694:	b580      	push	{r7, lr}
   1b696:	af00      	add	r7, sp, #0
	// waitCheckACTimerOn = false;
	//report to SIM Motor Off due to Unknown Reason
	stopMotor(false,true,false);
   1b698:	2200      	movs	r2, #0
   1b69a:	2101      	movs	r1, #1
   1b69c:	2000      	movs	r0, #0
   1b69e:	4b06      	ldr	r3, [pc, #24]	; (1b6b8 <unknownMotorOff+0x24>)
   1b6a0:	4798      	blx	r3
	simEventTemp[2] = registerEvent('_');
   1b6a2:	205f      	movs	r0, #95	; 0x5f
   1b6a4:	4b05      	ldr	r3, [pc, #20]	; (1b6bc <unknownMotorOff+0x28>)
   1b6a6:	4798      	blx	r3
   1b6a8:	0003      	movs	r3, r0
   1b6aa:	001a      	movs	r2, r3
   1b6ac:	4b04      	ldr	r3, [pc, #16]	; (1b6c0 <unknownMotorOff+0x2c>)
   1b6ae:	709a      	strb	r2, [r3, #2]
}
   1b6b0:	46c0      	nop			; (mov r8, r8)
   1b6b2:	46bd      	mov	sp, r7
   1b6b4:	bd80      	pop	{r7, pc}
   1b6b6:	46c0      	nop			; (mov r8, r8)
   1b6b8:	0001b56d 	.word	0x0001b56d
   1b6bc:	0001492d 	.word	0x0001492d
   1b6c0:	2000070c 	.word	0x2000070c

0001b6c4 <singlePhasingTimerOver>:

bool singlePhasingTimerOver(void)
{
   1b6c4:	b580      	push	{r7, lr}
   1b6c6:	af00      	add	r7, sp, #0
	return (singlePhasingTimerOn && xTaskGetTickCount() - tempSinglePhasingTimer > ((unsigned int)singlePhasingTime * 100));
   1b6c8:	4b0d      	ldr	r3, [pc, #52]	; (1b700 <singlePhasingTimerOver+0x3c>)
   1b6ca:	781b      	ldrb	r3, [r3, #0]
   1b6cc:	2b00      	cmp	r3, #0
   1b6ce:	d00e      	beq.n	1b6ee <singlePhasingTimerOver+0x2a>
   1b6d0:	4b0c      	ldr	r3, [pc, #48]	; (1b704 <singlePhasingTimerOver+0x40>)
   1b6d2:	4798      	blx	r3
   1b6d4:	0002      	movs	r2, r0
   1b6d6:	4b0c      	ldr	r3, [pc, #48]	; (1b708 <singlePhasingTimerOver+0x44>)
   1b6d8:	681b      	ldr	r3, [r3, #0]
   1b6da:	1ad2      	subs	r2, r2, r3
   1b6dc:	4b0b      	ldr	r3, [pc, #44]	; (1b70c <singlePhasingTimerOver+0x48>)
   1b6de:	781b      	ldrb	r3, [r3, #0]
   1b6e0:	0019      	movs	r1, r3
   1b6e2:	2364      	movs	r3, #100	; 0x64
   1b6e4:	434b      	muls	r3, r1
   1b6e6:	429a      	cmp	r2, r3
   1b6e8:	d901      	bls.n	1b6ee <singlePhasingTimerOver+0x2a>
   1b6ea:	2301      	movs	r3, #1
   1b6ec:	e000      	b.n	1b6f0 <singlePhasingTimerOver+0x2c>
   1b6ee:	2300      	movs	r3, #0
   1b6f0:	1c1a      	adds	r2, r3, #0
   1b6f2:	2301      	movs	r3, #1
   1b6f4:	4013      	ands	r3, r2
   1b6f6:	b2db      	uxtb	r3, r3
}
   1b6f8:	0018      	movs	r0, r3
   1b6fa:	46bd      	mov	sp, r7
   1b6fc:	bd80      	pop	{r7, pc}
   1b6fe:	46c0      	nop			; (mov r8, r8)
   1b700:	20000789 	.word	0x20000789
   1b704:	0002034d 	.word	0x0002034d
   1b708:	20000770 	.word	0x20000770
   1b70c:	20000768 	.word	0x20000768

0001b710 <operateOnSinglePhasing>:

void operateOnSinglePhasing(void)
{
   1b710:	b580      	push	{r7, lr}
   1b712:	af00      	add	r7, sp, #0
	THREEPHASE_OK_LED_OFF;
   1b714:	2101      	movs	r1, #1
   1b716:	2027      	movs	r0, #39	; 0x27
   1b718:	4b08      	ldr	r3, [pc, #32]	; (1b73c <operateOnSinglePhasing+0x2c>)
   1b71a:	4798      	blx	r3
	stopMotor(false,true,false);
   1b71c:	2200      	movs	r2, #0
   1b71e:	2101      	movs	r1, #1
   1b720:	2000      	movs	r0, #0
   1b722:	4b07      	ldr	r3, [pc, #28]	; (1b740 <operateOnSinglePhasing+0x30>)
   1b724:	4798      	blx	r3
	simEventTemp[3] = registerEvent('F');
   1b726:	2046      	movs	r0, #70	; 0x46
   1b728:	4b06      	ldr	r3, [pc, #24]	; (1b744 <operateOnSinglePhasing+0x34>)
   1b72a:	4798      	blx	r3
   1b72c:	0003      	movs	r3, r0
   1b72e:	001a      	movs	r2, r3
   1b730:	4b05      	ldr	r3, [pc, #20]	; (1b748 <operateOnSinglePhasing+0x38>)
   1b732:	70da      	strb	r2, [r3, #3]
}
   1b734:	46c0      	nop			; (mov r8, r8)
   1b736:	46bd      	mov	sp, r7
   1b738:	bd80      	pop	{r7, pc}
   1b73a:	46c0      	nop			; (mov r8, r8)
   1b73c:	00019135 	.word	0x00019135
   1b740:	0001b56d 	.word	0x0001b56d
   1b744:	0001492d 	.word	0x0001492d
   1b748:	2000070c 	.word	0x2000070c

0001b74c <terminateStopRelay>:

void terminateStopRelay(void)
{
   1b74c:	b580      	push	{r7, lr}
   1b74e:	af00      	add	r7, sp, #0
	if (stopSequenceOn && xTaskGetTickCount() - tempStopSequenceTimer > (stopSequenceTimerTime * 100))
   1b750:	4b28      	ldr	r3, [pc, #160]	; (1b7f4 <terminateStopRelay+0xa8>)
   1b752:	781b      	ldrb	r3, [r3, #0]
   1b754:	2b00      	cmp	r3, #0
   1b756:	d04a      	beq.n	1b7ee <terminateStopRelay+0xa2>
   1b758:	4b27      	ldr	r3, [pc, #156]	; (1b7f8 <terminateStopRelay+0xac>)
   1b75a:	4798      	blx	r3
   1b75c:	0002      	movs	r2, r0
   1b75e:	4b27      	ldr	r3, [pc, #156]	; (1b7fc <terminateStopRelay+0xb0>)
   1b760:	681b      	ldr	r3, [r3, #0]
   1b762:	1ad3      	subs	r3, r2, r3
   1b764:	4a26      	ldr	r2, [pc, #152]	; (1b800 <terminateStopRelay+0xb4>)
   1b766:	7812      	ldrb	r2, [r2, #0]
   1b768:	0011      	movs	r1, r2
   1b76a:	2264      	movs	r2, #100	; 0x64
   1b76c:	434a      	muls	r2, r1
   1b76e:	4293      	cmp	r3, r2
   1b770:	d93d      	bls.n	1b7ee <terminateStopRelay+0xa2>
	{
		//if ((bool)(user_settings_parameter_struct.autoStartAddress) && getACPowerState())
		//{
		//STOP_RELAY_ON;
		//}
		stopSequenceOn = false;
   1b772:	4b20      	ldr	r3, [pc, #128]	; (1b7f4 <terminateStopRelay+0xa8>)
   1b774:	2200      	movs	r2, #0
   1b776:	701a      	strb	r2, [r3, #0]
		stopMotorCommandGiven=true;
   1b778:	4b22      	ldr	r3, [pc, #136]	; (1b804 <terminateStopRelay+0xb8>)
   1b77a:	2201      	movs	r2, #1
   1b77c:	701a      	strb	r2, [r3, #0]
		if(!getMotorState_from_pin())															//motor has turned off OR NOT
   1b77e:	4b22      	ldr	r3, [pc, #136]	; (1b808 <terminateStopRelay+0xbc>)
   1b780:	4798      	blx	r3
   1b782:	0003      	movs	r3, r0
   1b784:	001a      	movs	r2, r3
   1b786:	2301      	movs	r3, #1
   1b788:	4053      	eors	r3, r2
   1b78a:	b2db      	uxtb	r3, r3
   1b78c:	2b00      	cmp	r3, #0
   1b78e:	d019      	beq.n	1b7c4 <terminateStopRelay+0x78>
		{
			if (gotOffCommand)
   1b790:	4b1e      	ldr	r3, [pc, #120]	; (1b80c <terminateStopRelay+0xc0>)
   1b792:	781b      	ldrb	r3, [r3, #0]
   1b794:	2b00      	cmp	r3, #0
   1b796:	d006      	beq.n	1b7a6 <terminateStopRelay+0x5a>
			{
				gotOffCommand = false;
   1b798:	4b1c      	ldr	r3, [pc, #112]	; (1b80c <terminateStopRelay+0xc0>)
   1b79a:	2200      	movs	r2, #0
   1b79c:	701a      	strb	r2, [r3, #0]
				setMotorMGRResponse('O');		//motor has stopped
   1b79e:	204f      	movs	r0, #79	; 0x4f
   1b7a0:	4b1b      	ldr	r3, [pc, #108]	; (1b810 <terminateStopRelay+0xc4>)
   1b7a2:	4798      	blx	r3
   1b7a4:	e020      	b.n	1b7e8 <terminateStopRelay+0x9c>
			}
			else if(offButtonPressed)
   1b7a6:	4b1b      	ldr	r3, [pc, #108]	; (1b814 <terminateStopRelay+0xc8>)
   1b7a8:	781b      	ldrb	r3, [r3, #0]
   1b7aa:	2b00      	cmp	r3, #0
   1b7ac:	d01c      	beq.n	1b7e8 <terminateStopRelay+0x9c>
			{
				offButtonPressed=false;
   1b7ae:	4b19      	ldr	r3, [pc, #100]	; (1b814 <terminateStopRelay+0xc8>)
   1b7b0:	2200      	movs	r2, #0
   1b7b2:	701a      	strb	r2, [r3, #0]
				simEventTemp[8] = registerEvent('O'); //register TO SIM motor has turned off
   1b7b4:	204f      	movs	r0, #79	; 0x4f
   1b7b6:	4b18      	ldr	r3, [pc, #96]	; (1b818 <terminateStopRelay+0xcc>)
   1b7b8:	4798      	blx	r3
   1b7ba:	0003      	movs	r3, r0
   1b7bc:	001a      	movs	r2, r3
   1b7be:	4b17      	ldr	r3, [pc, #92]	; (1b81c <terminateStopRelay+0xd0>)
   1b7c0:	721a      	strb	r2, [r3, #8]
   1b7c2:	e011      	b.n	1b7e8 <terminateStopRelay+0x9c>
			}
		}
		else
		{
			if (gotOffCommand)
   1b7c4:	4b11      	ldr	r3, [pc, #68]	; (1b80c <terminateStopRelay+0xc0>)
   1b7c6:	781b      	ldrb	r3, [r3, #0]
   1b7c8:	2b00      	cmp	r3, #0
   1b7ca:	d006      	beq.n	1b7da <terminateStopRelay+0x8e>
			{
				gotOffCommand = false;
   1b7cc:	4b0f      	ldr	r3, [pc, #60]	; (1b80c <terminateStopRelay+0xc0>)
   1b7ce:	2200      	movs	r2, #0
   1b7d0:	701a      	strb	r2, [r3, #0]
				setMotorMGRResponse('P');		//cannot turn off motor
   1b7d2:	2050      	movs	r0, #80	; 0x50
   1b7d4:	4b0e      	ldr	r3, [pc, #56]	; (1b810 <terminateStopRelay+0xc4>)
   1b7d6:	4798      	blx	r3
   1b7d8:	e006      	b.n	1b7e8 <terminateStopRelay+0x9c>
			}
			else
			{
				simEventTemp[1] = registerEvent('P');
   1b7da:	2050      	movs	r0, #80	; 0x50
   1b7dc:	4b0e      	ldr	r3, [pc, #56]	; (1b818 <terminateStopRelay+0xcc>)
   1b7de:	4798      	blx	r3
   1b7e0:	0003      	movs	r3, r0
   1b7e2:	001a      	movs	r2, r3
   1b7e4:	4b0d      	ldr	r3, [pc, #52]	; (1b81c <terminateStopRelay+0xd0>)
   1b7e6:	705a      	strb	r2, [r3, #1]
			}
		}
		offButtonPressed=false;
   1b7e8:	4b0a      	ldr	r3, [pc, #40]	; (1b814 <terminateStopRelay+0xc8>)
   1b7ea:	2200      	movs	r2, #0
   1b7ec:	701a      	strb	r2, [r3, #0]
	}
}
   1b7ee:	46c0      	nop			; (mov r8, r8)
   1b7f0:	46bd      	mov	sp, r7
   1b7f2:	bd80      	pop	{r7, pc}
   1b7f4:	20000780 	.word	0x20000780
   1b7f8:	0002034d 	.word	0x0002034d
   1b7fc:	200007a0 	.word	0x200007a0
   1b800:	20000862 	.word	0x20000862
   1b804:	20000860 	.word	0x20000860
   1b808:	0001acf1 	.word	0x0001acf1
   1b80c:	2000080c 	.word	0x2000080c
   1b810:	00014b05 	.word	0x00014b05
   1b814:	2000079c 	.word	0x2000079c
   1b818:	0001492d 	.word	0x0001492d
   1b81c:	2000070c 	.word	0x2000070c

0001b820 <terminateStarDeltaTimer>:

void terminateStarDeltaTimer(void)
{
   1b820:	b580      	push	{r7, lr}
   1b822:	af00      	add	r7, sp, #0
	if(starDeltaTimerOn && xTaskGetTickCount() - tempStartSequenceTimer > ((unsigned long int)(user_settings_parameter_struct.starDeltaTimerAddress) *1000L))
   1b824:	4b13      	ldr	r3, [pc, #76]	; (1b874 <terminateStarDeltaTimer+0x54>)
   1b826:	781b      	ldrb	r3, [r3, #0]
   1b828:	2b00      	cmp	r3, #0
   1b82a:	d020      	beq.n	1b86e <terminateStarDeltaTimer+0x4e>
   1b82c:	4b12      	ldr	r3, [pc, #72]	; (1b878 <terminateStarDeltaTimer+0x58>)
   1b82e:	4798      	blx	r3
   1b830:	0002      	movs	r2, r0
   1b832:	4b12      	ldr	r3, [pc, #72]	; (1b87c <terminateStarDeltaTimer+0x5c>)
   1b834:	681b      	ldr	r3, [r3, #0]
   1b836:	1ad2      	subs	r2, r2, r3
   1b838:	4b11      	ldr	r3, [pc, #68]	; (1b880 <terminateStarDeltaTimer+0x60>)
   1b83a:	88db      	ldrh	r3, [r3, #6]
   1b83c:	0019      	movs	r1, r3
   1b83e:	23fa      	movs	r3, #250	; 0xfa
   1b840:	009b      	lsls	r3, r3, #2
   1b842:	434b      	muls	r3, r1
   1b844:	429a      	cmp	r2, r3
   1b846:	d912      	bls.n	1b86e <terminateStarDeltaTimer+0x4e>
	{
		START_RELAY_OFF;
   1b848:	2100      	movs	r1, #0
   1b84a:	202d      	movs	r0, #45	; 0x2d
   1b84c:	4b0d      	ldr	r3, [pc, #52]	; (1b884 <terminateStarDeltaTimer+0x64>)
   1b84e:	4798      	blx	r3
		starDeltaTimerOn=false;
   1b850:	4b08      	ldr	r3, [pc, #32]	; (1b874 <terminateStarDeltaTimer+0x54>)
   1b852:	2200      	movs	r2, #0
   1b854:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1b856:	4b0c      	ldr	r3, [pc, #48]	; (1b888 <terminateStarDeltaTimer+0x68>)
   1b858:	785b      	ldrb	r3, [r3, #1]
   1b85a:	2b00      	cmp	r3, #0
   1b85c:	d007      	beq.n	1b86e <terminateStarDeltaTimer+0x4e>
		{
			enableCurrentBuffer=true;
   1b85e:	4b0b      	ldr	r3, [pc, #44]	; (1b88c <terminateStarDeltaTimer+0x6c>)
   1b860:	2201      	movs	r2, #1
   1b862:	701a      	strb	r2, [r3, #0]
			tempStartSequenceTimer=xTaskGetTickCount();
   1b864:	4b04      	ldr	r3, [pc, #16]	; (1b878 <terminateStarDeltaTimer+0x58>)
   1b866:	4798      	blx	r3
   1b868:	0002      	movs	r2, r0
   1b86a:	4b04      	ldr	r3, [pc, #16]	; (1b87c <terminateStarDeltaTimer+0x5c>)
   1b86c:	601a      	str	r2, [r3, #0]
		}
	}
}
   1b86e:	46c0      	nop			; (mov r8, r8)
   1b870:	46bd      	mov	sp, r7
   1b872:	bd80      	pop	{r7, pc}
   1b874:	20000793 	.word	0x20000793
   1b878:	0002034d 	.word	0x0002034d
   1b87c:	2000078c 	.word	0x2000078c
   1b880:	20000654 	.word	0x20000654
   1b884:	00019135 	.word	0x00019135
   1b888:	2000062c 	.word	0x2000062c
   1b88c:	20000758 	.word	0x20000758

0001b890 <terminateStartRelay>:

void terminateStartRelay(void)
{
   1b890:	b590      	push	{r4, r7, lr}
   1b892:	b083      	sub	sp, #12
   1b894:	af00      	add	r7, sp, #0
	if (startSequenceOn &&  xTaskGetTickCount() - tempStartSequenceTimer > (startSequenceTimerTime * 100))
   1b896:	4b37      	ldr	r3, [pc, #220]	; (1b974 <terminateStartRelay+0xe4>)
   1b898:	781b      	ldrb	r3, [r3, #0]
   1b89a:	2b00      	cmp	r3, #0
   1b89c:	d065      	beq.n	1b96a <terminateStartRelay+0xda>
   1b89e:	4b36      	ldr	r3, [pc, #216]	; (1b978 <terminateStartRelay+0xe8>)
   1b8a0:	4798      	blx	r3
   1b8a2:	0002      	movs	r2, r0
   1b8a4:	4b35      	ldr	r3, [pc, #212]	; (1b97c <terminateStartRelay+0xec>)
   1b8a6:	681b      	ldr	r3, [r3, #0]
   1b8a8:	1ad3      	subs	r3, r2, r3
   1b8aa:	4a35      	ldr	r2, [pc, #212]	; (1b980 <terminateStartRelay+0xf0>)
   1b8ac:	7812      	ldrb	r2, [r2, #0]
   1b8ae:	0011      	movs	r1, r2
   1b8b0:	2264      	movs	r2, #100	; 0x64
   1b8b2:	434a      	muls	r2, r1
   1b8b4:	4293      	cmp	r3, r2
   1b8b6:	d958      	bls.n	1b96a <terminateStartRelay+0xda>
	{
		if((((unsigned int)user_settings_parameter_struct.starDeltaTimerAddress) * 1000) <= (((uint16_t)startSequenceTimerTime)*100))
   1b8b8:	4b32      	ldr	r3, [pc, #200]	; (1b984 <terminateStartRelay+0xf4>)
   1b8ba:	88db      	ldrh	r3, [r3, #6]
   1b8bc:	001a      	movs	r2, r3
   1b8be:	23fa      	movs	r3, #250	; 0xfa
   1b8c0:	009b      	lsls	r3, r3, #2
   1b8c2:	4353      	muls	r3, r2
   1b8c4:	4a2e      	ldr	r2, [pc, #184]	; (1b980 <terminateStartRelay+0xf0>)
   1b8c6:	7812      	ldrb	r2, [r2, #0]
   1b8c8:	0011      	movs	r1, r2
   1b8ca:	2264      	movs	r2, #100	; 0x64
   1b8cc:	434a      	muls	r2, r1
   1b8ce:	4293      	cmp	r3, r2
   1b8d0:	d810      	bhi.n	1b8f4 <terminateStartRelay+0x64>
		{
			START_RELAY_OFF;
   1b8d2:	2100      	movs	r1, #0
   1b8d4:	202d      	movs	r0, #45	; 0x2d
   1b8d6:	4b2c      	ldr	r3, [pc, #176]	; (1b988 <terminateStartRelay+0xf8>)
   1b8d8:	4798      	blx	r3
			tempStartSequenceTimer=xTaskGetTickCount();
   1b8da:	4b27      	ldr	r3, [pc, #156]	; (1b978 <terminateStartRelay+0xe8>)
   1b8dc:	4798      	blx	r3
   1b8de:	0002      	movs	r2, r0
   1b8e0:	4b26      	ldr	r3, [pc, #152]	; (1b97c <terminateStartRelay+0xec>)
   1b8e2:	601a      	str	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1b8e4:	4b29      	ldr	r3, [pc, #164]	; (1b98c <terminateStartRelay+0xfc>)
   1b8e6:	785b      	ldrb	r3, [r3, #1]
   1b8e8:	2b00      	cmp	r3, #0
   1b8ea:	d006      	beq.n	1b8fa <terminateStartRelay+0x6a>
			{
				enableCurrentBuffer=true;
   1b8ec:	4b28      	ldr	r3, [pc, #160]	; (1b990 <terminateStartRelay+0x100>)
   1b8ee:	2201      	movs	r2, #1
   1b8f0:	701a      	strb	r2, [r3, #0]
   1b8f2:	e002      	b.n	1b8fa <terminateStartRelay+0x6a>
			}
		}
		else
		{
			starDeltaTimerOn=true;
   1b8f4:	4b27      	ldr	r3, [pc, #156]	; (1b994 <terminateStartRelay+0x104>)
   1b8f6:	2201      	movs	r2, #1
   1b8f8:	701a      	strb	r2, [r3, #0]
		}
		startSequenceOn = false;
   1b8fa:	4b1e      	ldr	r3, [pc, #120]	; (1b974 <terminateStartRelay+0xe4>)
   1b8fc:	2200      	movs	r2, #0
   1b8fe:	701a      	strb	r2, [r3, #0]
		bool motor = getMotorState_from_pin();
   1b900:	1dfc      	adds	r4, r7, #7
   1b902:	4b25      	ldr	r3, [pc, #148]	; (1b998 <terminateStartRelay+0x108>)
   1b904:	4798      	blx	r3
   1b906:	0003      	movs	r3, r0
   1b908:	7023      	strb	r3, [r4, #0]
		if (gotOnCommand)
   1b90a:	4b24      	ldr	r3, [pc, #144]	; (1b99c <terminateStartRelay+0x10c>)
   1b90c:	781b      	ldrb	r3, [r3, #0]
   1b90e:	2b00      	cmp	r3, #0
   1b910:	d013      	beq.n	1b93a <terminateStartRelay+0xaa>
		{
			gotOnCommand = false;
   1b912:	4b22      	ldr	r3, [pc, #136]	; (1b99c <terminateStartRelay+0x10c>)
   1b914:	2200      	movs	r2, #0
   1b916:	701a      	strb	r2, [r3, #0]
			if (motor)
   1b918:	1dfb      	adds	r3, r7, #7
   1b91a:	781b      	ldrb	r3, [r3, #0]
   1b91c:	2b00      	cmp	r3, #0
   1b91e:	d003      	beq.n	1b928 <terminateStartRelay+0x98>
			{
				setMotorMGRResponse('S'); // motor has started
   1b920:	2053      	movs	r0, #83	; 0x53
   1b922:	4b1f      	ldr	r3, [pc, #124]	; (1b9a0 <terminateStartRelay+0x110>)
   1b924:	4798      	blx	r3
				stopMotor(false,true,false);
				simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
			}
		}
	}
}
   1b926:	e020      	b.n	1b96a <terminateStartRelay+0xda>
				stopMotor(false,true,false);
   1b928:	2200      	movs	r2, #0
   1b92a:	2101      	movs	r1, #1
   1b92c:	2000      	movs	r0, #0
   1b92e:	4b1d      	ldr	r3, [pc, #116]	; (1b9a4 <terminateStartRelay+0x114>)
   1b930:	4798      	blx	r3
				setMotorMGRResponse('N');	//cannot start motor due to some problem
   1b932:	204e      	movs	r0, #78	; 0x4e
   1b934:	4b1a      	ldr	r3, [pc, #104]	; (1b9a0 <terminateStartRelay+0x110>)
   1b936:	4798      	blx	r3
}
   1b938:	e017      	b.n	1b96a <terminateStartRelay+0xda>
			if (motor)
   1b93a:	1dfb      	adds	r3, r7, #7
   1b93c:	781b      	ldrb	r3, [r3, #0]
   1b93e:	2b00      	cmp	r3, #0
   1b940:	d007      	beq.n	1b952 <terminateStartRelay+0xc2>
				simEventTemp[7] = registerEvent('S');// ;//register To SIM Motor has started
   1b942:	2053      	movs	r0, #83	; 0x53
   1b944:	4b18      	ldr	r3, [pc, #96]	; (1b9a8 <terminateStartRelay+0x118>)
   1b946:	4798      	blx	r3
   1b948:	0003      	movs	r3, r0
   1b94a:	001a      	movs	r2, r3
   1b94c:	4b17      	ldr	r3, [pc, #92]	; (1b9ac <terminateStartRelay+0x11c>)
   1b94e:	71da      	strb	r2, [r3, #7]
}
   1b950:	e00b      	b.n	1b96a <terminateStartRelay+0xda>
				stopMotor(false,true,false);
   1b952:	2200      	movs	r2, #0
   1b954:	2101      	movs	r1, #1
   1b956:	2000      	movs	r0, #0
   1b958:	4b12      	ldr	r3, [pc, #72]	; (1b9a4 <terminateStartRelay+0x114>)
   1b95a:	4798      	blx	r3
				simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
   1b95c:	204e      	movs	r0, #78	; 0x4e
   1b95e:	4b12      	ldr	r3, [pc, #72]	; (1b9a8 <terminateStartRelay+0x118>)
   1b960:	4798      	blx	r3
   1b962:	0003      	movs	r3, r0
   1b964:	001a      	movs	r2, r3
   1b966:	4b11      	ldr	r3, [pc, #68]	; (1b9ac <terminateStartRelay+0x11c>)
   1b968:	701a      	strb	r2, [r3, #0]
}
   1b96a:	46c0      	nop			; (mov r8, r8)
   1b96c:	46bd      	mov	sp, r7
   1b96e:	b003      	add	sp, #12
   1b970:	bd90      	pop	{r4, r7, pc}
   1b972:	46c0      	nop			; (mov r8, r8)
   1b974:	20000791 	.word	0x20000791
   1b978:	0002034d 	.word	0x0002034d
   1b97c:	2000078c 	.word	0x2000078c
   1b980:	20000818 	.word	0x20000818
   1b984:	20000654 	.word	0x20000654
   1b988:	00019135 	.word	0x00019135
   1b98c:	2000062c 	.word	0x2000062c
   1b990:	20000758 	.word	0x20000758
   1b994:	20000793 	.word	0x20000793
   1b998:	0001acf1 	.word	0x0001acf1
   1b99c:	20000708 	.word	0x20000708
   1b9a0:	00014b05 	.word	0x00014b05
   1b9a4:	0001b56d 	.word	0x0001b56d
   1b9a8:	0001492d 	.word	0x0001492d
   1b9ac:	2000070c 	.word	0x2000070c

0001b9b0 <statusOnCall>:

void statusOnCall(void)
{
   1b9b0:	b590      	push	{r4, r7, lr}
   1b9b2:	b083      	sub	sp, #12
   1b9b4:	af00      	add	r7, sp, #0
	char status[5];
	uint8_t index=0;
   1b9b6:	1dfb      	adds	r3, r7, #7
   1b9b8:	2200      	movs	r2, #0
   1b9ba:	701a      	strb	r2, [r3, #0]
	uint8_t b = checkLineSensors();
   1b9bc:	1dbc      	adds	r4, r7, #6
   1b9be:	4b3b      	ldr	r3, [pc, #236]	; (1baac <statusOnCall+0xfc>)
   1b9c0:	4798      	blx	r3
   1b9c2:	0003      	movs	r3, r0
   1b9c4:	7023      	strb	r3, [r4, #0]
	if (b == AC_OFF)
   1b9c6:	1dbb      	adds	r3, r7, #6
   1b9c8:	781b      	ldrb	r3, [r3, #0]
   1b9ca:	2b00      	cmp	r3, #0
   1b9cc:	d109      	bne.n	1b9e2 <statusOnCall+0x32>
	{
		status[index++]='L';
   1b9ce:	1dfb      	adds	r3, r7, #7
   1b9d0:	781b      	ldrb	r3, [r3, #0]
   1b9d2:	1dfa      	adds	r2, r7, #7
   1b9d4:	1c59      	adds	r1, r3, #1
   1b9d6:	7011      	strb	r1, [r2, #0]
   1b9d8:	001a      	movs	r2, r3
   1b9da:	003b      	movs	r3, r7
   1b9dc:	214c      	movs	r1, #76	; 0x4c
   1b9de:	5499      	strb	r1, [r3, r2]
   1b9e0:	e03b      	b.n	1ba5a <statusOnCall+0xaa>
		// sim1->setMotorMGRResponse('L');	//motor off, no light
	}
	else if (b == AC_2PH)	//power only in 2 phase
   1b9e2:	1dbb      	adds	r3, r7, #6
   1b9e4:	781b      	ldrb	r3, [r3, #0]
   1b9e6:	2b02      	cmp	r3, #2
   1b9e8:	d109      	bne.n	1b9fe <statusOnCall+0x4e>
	{
		status[index++]='A';
   1b9ea:	1dfb      	adds	r3, r7, #7
   1b9ec:	781b      	ldrb	r3, [r3, #0]
   1b9ee:	1dfa      	adds	r2, r7, #7
   1b9f0:	1c59      	adds	r1, r3, #1
   1b9f2:	7011      	strb	r1, [r2, #0]
   1b9f4:	001a      	movs	r2, r3
   1b9f6:	003b      	movs	r3, r7
   1b9f8:	2141      	movs	r1, #65	; 0x41
   1b9fa:	5499      	strb	r1, [r3, r2]
   1b9fc:	e02d      	b.n	1ba5a <statusOnCall+0xaa>
		// sim1->setMotorMGRResponse('A');
	}
	else if (b == AC_3PH)
   1b9fe:	1dbb      	adds	r3, r7, #6
   1ba00:	781b      	ldrb	r3, [r3, #0]
   1ba02:	2b03      	cmp	r3, #3
   1ba04:	d129      	bne.n	1ba5a <statusOnCall+0xaa>
	{
		bool temp = getMotorState_from_pin();
   1ba06:	1d7c      	adds	r4, r7, #5
   1ba08:	4b29      	ldr	r3, [pc, #164]	; (1bab0 <statusOnCall+0x100>)
   1ba0a:	4798      	blx	r3
   1ba0c:	0003      	movs	r3, r0
   1ba0e:	7023      	strb	r3, [r4, #0]
		if (temp)
   1ba10:	1d7b      	adds	r3, r7, #5
   1ba12:	781b      	ldrb	r3, [r3, #0]
   1ba14:	2b00      	cmp	r3, #0
   1ba16:	d009      	beq.n	1ba2c <statusOnCall+0x7c>
		{
			status[index++]='+';
   1ba18:	1dfb      	adds	r3, r7, #7
   1ba1a:	781b      	ldrb	r3, [r3, #0]
   1ba1c:	1dfa      	adds	r2, r7, #7
   1ba1e:	1c59      	adds	r1, r3, #1
   1ba20:	7011      	strb	r1, [r2, #0]
   1ba22:	001a      	movs	r2, r3
   1ba24:	003b      	movs	r3, r7
   1ba26:	212b      	movs	r1, #43	; 0x2b
   1ba28:	5499      	strb	r1, [r3, r2]
   1ba2a:	e016      	b.n	1ba5a <statusOnCall+0xaa>
			// sim1->setMotorMGRResponse('+');	//motor is on
		}
		else
		{
			status[index++]='_';
   1ba2c:	1dfb      	adds	r3, r7, #7
   1ba2e:	781b      	ldrb	r3, [r3, #0]
   1ba30:	1dfa      	adds	r2, r7, #7
   1ba32:	1c59      	adds	r1, r3, #1
   1ba34:	7011      	strb	r1, [r2, #0]
   1ba36:	001a      	movs	r2, r3
   1ba38:	003b      	movs	r3, r7
   1ba3a:	215f      	movs	r1, #95	; 0x5f
   1ba3c:	5499      	strb	r1, [r3, r2]
			
			//Play File for Wrong Phase Sequence if phase seq is wrong
			if(structThreePhase_state.u8t_phase_sequence_flag !=THREEPHASE_OK)					//3 phase sequence is incorrect
   1ba3e:	4b1d      	ldr	r3, [pc, #116]	; (1bab4 <statusOnCall+0x104>)
   1ba40:	781b      	ldrb	r3, [r3, #0]
   1ba42:	b2db      	uxtb	r3, r3
   1ba44:	2b02      	cmp	r3, #2
   1ba46:	d008      	beq.n	1ba5a <statusOnCall+0xaa>
			{
				//todo: replace A(single Phasing) in below statement with Character for Wrong Phase Sequence Event
				status[index++]='A';
   1ba48:	1dfb      	adds	r3, r7, #7
   1ba4a:	781b      	ldrb	r3, [r3, #0]
   1ba4c:	1dfa      	adds	r2, r7, #7
   1ba4e:	1c59      	adds	r1, r3, #1
   1ba50:	7011      	strb	r1, [r2, #0]
   1ba52:	001a      	movs	r2, r3
   1ba54:	003b      	movs	r3, r7
   1ba56:	2141      	movs	r1, #65	; 0x41
   1ba58:	5499      	strb	r1, [r3, r2]

			// sim1->setMotorMGRResponse('_');	//motor off, light on
		}
	}

	if(user_settings_parameter_struct.autoStartAddress)
   1ba5a:	4b17      	ldr	r3, [pc, #92]	; (1bab8 <statusOnCall+0x108>)
   1ba5c:	785b      	ldrb	r3, [r3, #1]
   1ba5e:	2b00      	cmp	r3, #0
   1ba60:	d009      	beq.n	1ba76 <statusOnCall+0xc6>
	{
		status[index++]=')';
   1ba62:	1dfb      	adds	r3, r7, #7
   1ba64:	781b      	ldrb	r3, [r3, #0]
   1ba66:	1dfa      	adds	r2, r7, #7
   1ba68:	1c59      	adds	r1, r3, #1
   1ba6a:	7011      	strb	r1, [r2, #0]
   1ba6c:	001a      	movs	r2, r3
   1ba6e:	003b      	movs	r3, r7
   1ba70:	2129      	movs	r1, #41	; 0x29
   1ba72:	5499      	strb	r1, [r3, r2]
   1ba74:	e008      	b.n	1ba88 <statusOnCall+0xd8>
	}
	else
	{
		status[index++]='[';
   1ba76:	1dfb      	adds	r3, r7, #7
   1ba78:	781b      	ldrb	r3, [r3, #0]
   1ba7a:	1dfa      	adds	r2, r7, #7
   1ba7c:	1c59      	adds	r1, r3, #1
   1ba7e:	7011      	strb	r1, [r2, #0]
   1ba80:	001a      	movs	r2, r3
   1ba82:	003b      	movs	r3, r7
   1ba84:	215b      	movs	r1, #91	; 0x5b
   1ba86:	5499      	strb	r1, [r3, r2]
	}
	
	status[index++]='\0';
   1ba88:	1dfb      	adds	r3, r7, #7
   1ba8a:	781b      	ldrb	r3, [r3, #0]
   1ba8c:	1dfa      	adds	r2, r7, #7
   1ba8e:	1c59      	adds	r1, r3, #1
   1ba90:	7011      	strb	r1, [r2, #0]
   1ba92:	001a      	movs	r2, r3
   1ba94:	003b      	movs	r3, r7
   1ba96:	2100      	movs	r1, #0
   1ba98:	5499      	strb	r1, [r3, r2]

	playRepeatedFiles(status);
   1ba9a:	003b      	movs	r3, r7
   1ba9c:	0018      	movs	r0, r3
   1ba9e:	4b07      	ldr	r3, [pc, #28]	; (1babc <statusOnCall+0x10c>)
   1baa0:	4798      	blx	r3
}
   1baa2:	46c0      	nop			; (mov r8, r8)
   1baa4:	46bd      	mov	sp, r7
   1baa6:	b003      	add	sp, #12
   1baa8:	bd90      	pop	{r4, r7, pc}
   1baaa:	46c0      	nop			; (mov r8, r8)
   1baac:	0001b201 	.word	0x0001b201
   1bab0:	0001acf1 	.word	0x0001acf1
   1bab4:	20000740 	.word	0x20000740
   1bab8:	20000654 	.word	0x20000654
   1babc:	000147f9 	.word	0x000147f9

0001bac0 <voltageOnCall>:

void voltageOnCall(void)
{
   1bac0:	b590      	push	{r4, r7, lr}
   1bac2:	b087      	sub	sp, #28
   1bac4:	af02      	add	r7, sp, #8
	char voltFiles[13];
	//change the below string seq to speak R Y B instead of 0
	sprintf(voltFiles,"]%lu{%lu}%lu",Analog_Parameter_Struct.PhaseRY_Voltage,Analog_Parameter_Struct.PhaseYB_Voltage,Analog_Parameter_Struct.PhaseBR_Voltage);
   1bac6:	4b0a      	ldr	r3, [pc, #40]	; (1baf0 <voltageOnCall+0x30>)
   1bac8:	681a      	ldr	r2, [r3, #0]
   1baca:	4b09      	ldr	r3, [pc, #36]	; (1baf0 <voltageOnCall+0x30>)
   1bacc:	685c      	ldr	r4, [r3, #4]
   1bace:	4b08      	ldr	r3, [pc, #32]	; (1baf0 <voltageOnCall+0x30>)
   1bad0:	689b      	ldr	r3, [r3, #8]
   1bad2:	4908      	ldr	r1, [pc, #32]	; (1baf4 <voltageOnCall+0x34>)
   1bad4:	0038      	movs	r0, r7
   1bad6:	9300      	str	r3, [sp, #0]
   1bad8:	0023      	movs	r3, r4
   1bada:	4c07      	ldr	r4, [pc, #28]	; (1baf8 <voltageOnCall+0x38>)
   1badc:	47a0      	blx	r4
	playRepeatedFiles(voltFiles);
   1bade:	003b      	movs	r3, r7
   1bae0:	0018      	movs	r0, r3
   1bae2:	4b06      	ldr	r3, [pc, #24]	; (1bafc <voltageOnCall+0x3c>)
   1bae4:	4798      	blx	r3
}
   1bae6:	46c0      	nop			; (mov r8, r8)
   1bae8:	46bd      	mov	sp, r7
   1baea:	b005      	add	sp, #20
   1baec:	bd90      	pop	{r4, r7, pc}
   1baee:	46c0      	nop			; (mov r8, r8)
   1baf0:	200006dc 	.word	0x200006dc
   1baf4:	0002aa8c 	.word	0x0002aa8c
   1baf8:	00029119 	.word	0x00029119
   1bafc:	000147f9 	.word	0x000147f9

0001bb00 <setM2MEventState>:

void setM2MEventState(uint8_t eventNo, uint8_t state)
{
   1bb00:	b580      	push	{r7, lr}
   1bb02:	b082      	sub	sp, #8
   1bb04:	af00      	add	r7, sp, #0
   1bb06:	0002      	movs	r2, r0
   1bb08:	1dfb      	adds	r3, r7, #7
   1bb0a:	701a      	strb	r2, [r3, #0]
   1bb0c:	1dbb      	adds	r3, r7, #6
   1bb0e:	1c0a      	adds	r2, r1, #0
   1bb10:	701a      	strb	r2, [r3, #0]
	if(m2mEvent_arr[eventNo]==ME_SERVICING)
   1bb12:	1dfb      	adds	r3, r7, #7
   1bb14:	781b      	ldrb	r3, [r3, #0]
   1bb16:	4a0e      	ldr	r2, [pc, #56]	; (1bb50 <setM2MEventState+0x50>)
   1bb18:	5cd3      	ldrb	r3, [r2, r3]
   1bb1a:	2b02      	cmp	r3, #2
   1bb1c:	d10e      	bne.n	1bb3c <setM2MEventState+0x3c>
	{
		if(state==ME_NOTAVAILABLE)
   1bb1e:	1dbb      	adds	r3, r7, #6
   1bb20:	781b      	ldrb	r3, [r3, #0]
   1bb22:	2b03      	cmp	r3, #3
   1bb24:	d10a      	bne.n	1bb3c <setM2MEventState+0x3c>
		{
			state=ME_CLEARED;
   1bb26:	1dbb      	adds	r3, r7, #6
   1bb28:	2200      	movs	r2, #0
   1bb2a:	701a      	strb	r2, [r3, #0]
			simEventTemp[mapTable[eventNo]]=false;	//regsiter relevant Normal Event
   1bb2c:	1dfb      	adds	r3, r7, #7
   1bb2e:	781b      	ldrb	r3, [r3, #0]
   1bb30:	4a08      	ldr	r2, [pc, #32]	; (1bb54 <setM2MEventState+0x54>)
   1bb32:	5cd3      	ldrb	r3, [r2, r3]
   1bb34:	001a      	movs	r2, r3
   1bb36:	4b08      	ldr	r3, [pc, #32]	; (1bb58 <setM2MEventState+0x58>)
   1bb38:	2100      	movs	r1, #0
   1bb3a:	5499      	strb	r1, [r3, r2]
		}
	}
	m2mEvent_arr[eventNo]=state;
   1bb3c:	1dfb      	adds	r3, r7, #7
   1bb3e:	781b      	ldrb	r3, [r3, #0]
   1bb40:	4a03      	ldr	r2, [pc, #12]	; (1bb50 <setM2MEventState+0x50>)
   1bb42:	1db9      	adds	r1, r7, #6
   1bb44:	7809      	ldrb	r1, [r1, #0]
   1bb46:	54d1      	strb	r1, [r2, r3]
}
   1bb48:	46c0      	nop			; (mov r8, r8)
   1bb4a:	46bd      	mov	sp, r7
   1bb4c:	b002      	add	sp, #8
   1bb4e:	bd80      	pop	{r7, pc}
   1bb50:	200007bc 	.word	0x200007bc
   1bb54:	20000738 	.word	0x20000738
   1bb58:	2000070c 	.word	0x2000070c

0001bb5c <M2MEventManager>:

void M2MEventManager(void)
{
   1bb5c:	b580      	push	{r7, lr}
   1bb5e:	b082      	sub	sp, #8
   1bb60:	af00      	add	r7, sp, #0
	uint8_t j=2;
   1bb62:	1dfb      	adds	r3, r7, #7
   1bb64:	2202      	movs	r2, #2
   1bb66:	701a      	strb	r2, [r3, #0]
	while(j--)
   1bb68:	e00a      	b.n	1bb80 <M2MEventManager+0x24>
	{
		if(m2mEvent_arr[j]==ME_WAITREGISTER)
   1bb6a:	1dfb      	adds	r3, r7, #7
   1bb6c:	781b      	ldrb	r3, [r3, #0]
   1bb6e:	4a0a      	ldr	r2, [pc, #40]	; (1bb98 <M2MEventManager+0x3c>)
   1bb70:	5cd3      	ldrb	r3, [r2, r3]
   1bb72:	2b01      	cmp	r3, #1
   1bb74:	d104      	bne.n	1bb80 <M2MEventManager+0x24>
		{
			registerM2MEvent(j);
   1bb76:	1dfb      	adds	r3, r7, #7
   1bb78:	781b      	ldrb	r3, [r3, #0]
   1bb7a:	0018      	movs	r0, r3
   1bb7c:	4b07      	ldr	r3, [pc, #28]	; (1bb9c <M2MEventManager+0x40>)
   1bb7e:	4798      	blx	r3
	while(j--)
   1bb80:	1dfb      	adds	r3, r7, #7
   1bb82:	781b      	ldrb	r3, [r3, #0]
   1bb84:	1dfa      	adds	r2, r7, #7
   1bb86:	1e59      	subs	r1, r3, #1
   1bb88:	7011      	strb	r1, [r2, #0]
   1bb8a:	2b00      	cmp	r3, #0
   1bb8c:	d1ed      	bne.n	1bb6a <M2MEventManager+0xe>
		}
	}
}
   1bb8e:	46c0      	nop			; (mov r8, r8)
   1bb90:	46bd      	mov	sp, r7
   1bb92:	b002      	add	sp, #8
   1bb94:	bd80      	pop	{r7, pc}
   1bb96:	46c0      	nop			; (mov r8, r8)
   1bb98:	200007bc 	.word	0x200007bc
   1bb9c:	00014a49 	.word	0x00014a49

0001bba0 <SIMEventManager>:

void SIMEventManager(void)
{
   1bba0:	b590      	push	{r4, r7, lr}
   1bba2:	b083      	sub	sp, #12
   1bba4:	af00      	add	r7, sp, #0
	uint8_t i = 0;
   1bba6:	1dfb      	adds	r3, r7, #7
   1bba8:	2200      	movs	r2, #0
   1bbaa:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_WATER)
   1bbac:	4b1e      	ldr	r3, [pc, #120]	; (1bc28 <SIMEventManager+0x88>)
   1bbae:	795b      	ldrb	r3, [r3, #5]
   1bbb0:	2b00      	cmp	r3, #0
   1bbb2:	d00b      	beq.n	1bbcc <SIMEventManager+0x2c>
	{
		if (factory_settings_parameter_struct.ENABLE_GP)
   1bbb4:	4b1c      	ldr	r3, [pc, #112]	; (1bc28 <SIMEventManager+0x88>)
   1bbb6:	791b      	ldrb	r3, [r3, #4]
   1bbb8:	2b00      	cmp	r3, #0
   1bbba:	d003      	beq.n	1bbc4 <SIMEventManager+0x24>
		{
			i = 19;
   1bbbc:	1dfb      	adds	r3, r7, #7
   1bbbe:	2213      	movs	r2, #19
   1bbc0:	701a      	strb	r2, [r3, #0]
   1bbc2:	e025      	b.n	1bc10 <SIMEventManager+0x70>
		}
		else
		{
			i = 17;
   1bbc4:	1dfb      	adds	r3, r7, #7
   1bbc6:	2211      	movs	r2, #17
   1bbc8:	701a      	strb	r2, [r3, #0]
   1bbca:	e021      	b.n	1bc10 <SIMEventManager+0x70>
		}
	}
	else
	{
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1bbcc:	4b16      	ldr	r3, [pc, #88]	; (1bc28 <SIMEventManager+0x88>)
   1bbce:	785b      	ldrb	r3, [r3, #1]
   1bbd0:	2b00      	cmp	r3, #0
   1bbd2:	d003      	beq.n	1bbdc <SIMEventManager+0x3c>
		{
			i = 14;
   1bbd4:	1dfb      	adds	r3, r7, #7
   1bbd6:	220e      	movs	r2, #14
   1bbd8:	701a      	strb	r2, [r3, #0]
   1bbda:	e019      	b.n	1bc10 <SIMEventManager+0x70>
		}
		else
		{
			i = 12;
   1bbdc:	1dfb      	adds	r3, r7, #7
   1bbde:	220c      	movs	r2, #12
   1bbe0:	701a      	strb	r2, [r3, #0]
		}
	}
	
	while(i--)
   1bbe2:	e015      	b.n	1bc10 <SIMEventManager+0x70>
	{
		if (!simEventTemp[i])
   1bbe4:	1dfb      	adds	r3, r7, #7
   1bbe6:	781b      	ldrb	r3, [r3, #0]
   1bbe8:	4a10      	ldr	r2, [pc, #64]	; (1bc2c <SIMEventManager+0x8c>)
   1bbea:	5cd3      	ldrb	r3, [r2, r3]
   1bbec:	2201      	movs	r2, #1
   1bbee:	4053      	eors	r3, r2
   1bbf0:	b2db      	uxtb	r3, r3
   1bbf2:	2b00      	cmp	r3, #0
   1bbf4:	d00c      	beq.n	1bc10 <SIMEventManager+0x70>
		simEventTemp[i] = registerEvent(simEvent[i]);
   1bbf6:	1dfb      	adds	r3, r7, #7
   1bbf8:	781c      	ldrb	r4, [r3, #0]
   1bbfa:	1dfb      	adds	r3, r7, #7
   1bbfc:	781b      	ldrb	r3, [r3, #0]
   1bbfe:	4a0c      	ldr	r2, [pc, #48]	; (1bc30 <SIMEventManager+0x90>)
   1bc00:	5cd3      	ldrb	r3, [r2, r3]
   1bc02:	0018      	movs	r0, r3
   1bc04:	4b0b      	ldr	r3, [pc, #44]	; (1bc34 <SIMEventManager+0x94>)
   1bc06:	4798      	blx	r3
   1bc08:	0003      	movs	r3, r0
   1bc0a:	001a      	movs	r2, r3
   1bc0c:	4b07      	ldr	r3, [pc, #28]	; (1bc2c <SIMEventManager+0x8c>)
   1bc0e:	551a      	strb	r2, [r3, r4]
	while(i--)
   1bc10:	1dfb      	adds	r3, r7, #7
   1bc12:	781b      	ldrb	r3, [r3, #0]
   1bc14:	1dfa      	adds	r2, r7, #7
   1bc16:	1e59      	subs	r1, r3, #1
   1bc18:	7011      	strb	r1, [r2, #0]
   1bc1a:	2b00      	cmp	r3, #0
   1bc1c:	d1e2      	bne.n	1bbe4 <SIMEventManager+0x44>
	}
}
   1bc1e:	46c0      	nop			; (mov r8, r8)
   1bc20:	46bd      	mov	sp, r7
   1bc22:	b003      	add	sp, #12
   1bc24:	bd90      	pop	{r4, r7, pc}
   1bc26:	46c0      	nop			; (mov r8, r8)
   1bc28:	2000062c 	.word	0x2000062c
   1bc2c:	2000070c 	.word	0x2000070c
   1bc30:	200007f8 	.word	0x200007f8
   1bc34:	0001492d 	.word	0x0001492d

0001bc38 <MotorVoltageBypassTimerOver>:

bool MotorVoltageBypassTimerOver(void)
{
   1bc38:	b580      	push	{r7, lr}
   1bc3a:	af00      	add	r7, sp, #0
	return ((xTaskGetTickCount()-motorVoltageBypassTimerTime) > user_settings_parameter_struct.motorVoltageBypassTime);
   1bc3c:	4b07      	ldr	r3, [pc, #28]	; (1bc5c <MotorVoltageBypassTimerOver+0x24>)
   1bc3e:	4798      	blx	r3
   1bc40:	0002      	movs	r2, r0
   1bc42:	4b07      	ldr	r3, [pc, #28]	; (1bc60 <MotorVoltageBypassTimerOver+0x28>)
   1bc44:	681b      	ldr	r3, [r3, #0]
   1bc46:	1ad2      	subs	r2, r2, r3
   1bc48:	4b06      	ldr	r3, [pc, #24]	; (1bc64 <MotorVoltageBypassTimerOver+0x2c>)
   1bc4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1bc4c:	4293      	cmp	r3, r2
   1bc4e:	419b      	sbcs	r3, r3
   1bc50:	425b      	negs	r3, r3
   1bc52:	b2db      	uxtb	r3, r3
}
   1bc54:	0018      	movs	r0, r3
   1bc56:	46bd      	mov	sp, r7
   1bc58:	bd80      	pop	{r7, pc}
   1bc5a:	46c0      	nop			; (mov r8, r8)
   1bc5c:	0002034d 	.word	0x0002034d
   1bc60:	2000077c 	.word	0x2000077c
   1bc64:	20000654 	.word	0x20000654

0001bc68 <checkCurrentConsumption>:


void checkCurrentConsumption(void)
{
   1bc68:	b580      	push	{r7, lr}
   1bc6a:	b084      	sub	sp, #16
   1bc6c:	af00      	add	r7, sp, #0
	if(startSequenceOn || stopSequenceOn || !getMotorState() || !(user_settings_parameter_struct.currentDetectionAddress) || starDeltaTimerOn)
   1bc6e:	4b6f      	ldr	r3, [pc, #444]	; (1be2c <checkCurrentConsumption+0x1c4>)
   1bc70:	781b      	ldrb	r3, [r3, #0]
   1bc72:	2b00      	cmp	r3, #0
   1bc74:	d000      	beq.n	1bc78 <checkCurrentConsumption+0x10>
   1bc76:	e0d4      	b.n	1be22 <checkCurrentConsumption+0x1ba>
   1bc78:	4b6d      	ldr	r3, [pc, #436]	; (1be30 <checkCurrentConsumption+0x1c8>)
   1bc7a:	781b      	ldrb	r3, [r3, #0]
   1bc7c:	2b00      	cmp	r3, #0
   1bc7e:	d000      	beq.n	1bc82 <checkCurrentConsumption+0x1a>
   1bc80:	e0cf      	b.n	1be22 <checkCurrentConsumption+0x1ba>
   1bc82:	4b6c      	ldr	r3, [pc, #432]	; (1be34 <checkCurrentConsumption+0x1cc>)
   1bc84:	4798      	blx	r3
   1bc86:	0003      	movs	r3, r0
   1bc88:	001a      	movs	r2, r3
   1bc8a:	2301      	movs	r3, #1
   1bc8c:	4053      	eors	r3, r2
   1bc8e:	b2db      	uxtb	r3, r3
   1bc90:	2b00      	cmp	r3, #0
   1bc92:	d000      	beq.n	1bc96 <checkCurrentConsumption+0x2e>
   1bc94:	e0c5      	b.n	1be22 <checkCurrentConsumption+0x1ba>
   1bc96:	4b68      	ldr	r3, [pc, #416]	; (1be38 <checkCurrentConsumption+0x1d0>)
   1bc98:	7bdb      	ldrb	r3, [r3, #15]
   1bc9a:	2b00      	cmp	r3, #0
   1bc9c:	d100      	bne.n	1bca0 <checkCurrentConsumption+0x38>
   1bc9e:	e0c0      	b.n	1be22 <checkCurrentConsumption+0x1ba>
   1bca0:	4b66      	ldr	r3, [pc, #408]	; (1be3c <checkCurrentConsumption+0x1d4>)
   1bca2:	781b      	ldrb	r3, [r3, #0]
   1bca4:	2b00      	cmp	r3, #0
   1bca6:	d000      	beq.n	1bcaa <checkCurrentConsumption+0x42>
   1bca8:	e0bb      	b.n	1be22 <checkCurrentConsumption+0x1ba>
	{
		return;
	}
	//|| ((xTaskGetTickCount()-lastCurrentReadingTime)<500))
	
	if(enableCurrentBuffer && xTaskGetTickCount()-tempStartSequenceTimer>30000)
   1bcaa:	4b65      	ldr	r3, [pc, #404]	; (1be40 <checkCurrentConsumption+0x1d8>)
   1bcac:	781b      	ldrb	r3, [r3, #0]
   1bcae:	2b00      	cmp	r3, #0
   1bcb0:	d00b      	beq.n	1bcca <checkCurrentConsumption+0x62>
   1bcb2:	4b64      	ldr	r3, [pc, #400]	; (1be44 <checkCurrentConsumption+0x1dc>)
   1bcb4:	4798      	blx	r3
   1bcb6:	0002      	movs	r2, r0
   1bcb8:	4b63      	ldr	r3, [pc, #396]	; (1be48 <checkCurrentConsumption+0x1e0>)
   1bcba:	681b      	ldr	r3, [r3, #0]
   1bcbc:	1ad3      	subs	r3, r2, r3
   1bcbe:	4a63      	ldr	r2, [pc, #396]	; (1be4c <checkCurrentConsumption+0x1e4>)
   1bcc0:	4293      	cmp	r3, r2
   1bcc2:	d902      	bls.n	1bcca <checkCurrentConsumption+0x62>
	{
		enableCurrentBuffer=false;
   1bcc4:	4b5e      	ldr	r3, [pc, #376]	; (1be40 <checkCurrentConsumption+0x1d8>)
   1bcc6:	2200      	movs	r2, #0
   1bcc8:	701a      	strb	r2, [r3, #0]
	//{
	//ADCcurrent = Read_ADC0(ADC_POSITIVE_INPUT_PIN16,200);
	//xSemaphoreGive(xADC_Semaphore);
	//}
	
	uint32_t temp=0;
   1bcca:	2300      	movs	r3, #0
   1bccc:	60fb      	str	r3, [r7, #12]
	if(user_settings_parameter_struct.over_under_DetectionMethod== MOTOR_UNDEROVER_DETECTION_POWER)
   1bcce:	4b5a      	ldr	r3, [pc, #360]	; (1be38 <checkCurrentConsumption+0x1d0>)
   1bcd0:	2226      	movs	r2, #38	; 0x26
   1bcd2:	5c9b      	ldrb	r3, [r3, r2]
   1bcd4:	2b01      	cmp	r3, #1
   1bcd6:	d103      	bne.n	1bce0 <checkCurrentConsumption+0x78>
	{
		temp = Analog_Parameter_Struct.Motor_Power;
   1bcd8:	4b5d      	ldr	r3, [pc, #372]	; (1be50 <checkCurrentConsumption+0x1e8>)
   1bcda:	6a1b      	ldr	r3, [r3, #32]
   1bcdc:	60fb      	str	r3, [r7, #12]
   1bcde:	e002      	b.n	1bce6 <checkCurrentConsumption+0x7e>
	}
	else
	{
		temp = Analog_Parameter_Struct.Motor_Current;
   1bce0:	4b5b      	ldr	r3, [pc, #364]	; (1be50 <checkCurrentConsumption+0x1e8>)
   1bce2:	691b      	ldr	r3, [r3, #16]
   1bce4:	60fb      	str	r3, [r7, #12]
	}
	
	uint32_t overLoadDetectValue=12000;
   1bce6:	4b5b      	ldr	r3, [pc, #364]	; (1be54 <checkCurrentConsumption+0x1ec>)
   1bce8:	60bb      	str	r3, [r7, #8]
	
	uint8_t temp2;
	
	if(enableCurrentBuffer && temp>(user_settings_parameter_struct.normalLoadAddress<<1))    //more than double  <<1 gives mulile of 2 value (double the orignal value)
   1bcea:	4b55      	ldr	r3, [pc, #340]	; (1be40 <checkCurrentConsumption+0x1d8>)
   1bcec:	781b      	ldrb	r3, [r3, #0]
   1bcee:	2b00      	cmp	r3, #0
   1bcf0:	d00b      	beq.n	1bd0a <checkCurrentConsumption+0xa2>
   1bcf2:	4b51      	ldr	r3, [pc, #324]	; (1be38 <checkCurrentConsumption+0x1d0>)
   1bcf4:	691b      	ldr	r3, [r3, #16]
   1bcf6:	005a      	lsls	r2, r3, #1
   1bcf8:	68fb      	ldr	r3, [r7, #12]
   1bcfa:	429a      	cmp	r2, r3
   1bcfc:	d205      	bcs.n	1bd0a <checkCurrentConsumption+0xa2>
	{
		temp2 = CR_OVER2;
   1bcfe:	1dfb      	adds	r3, r7, #7
   1bd00:	2202      	movs	r2, #2
   1bd02:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=18000;
   1bd04:	4b54      	ldr	r3, [pc, #336]	; (1be58 <checkCurrentConsumption+0x1f0>)
   1bd06:	60bb      	str	r3, [r7, #8]
   1bd08:	e050      	b.n	1bdac <checkCurrentConsumption+0x144>
	}
	else if(!enableCurrentBuffer && temp>(user_settings_parameter_struct.normalLoadAddress<<1))			//more than double
   1bd0a:	4b4d      	ldr	r3, [pc, #308]	; (1be40 <checkCurrentConsumption+0x1d8>)
   1bd0c:	781b      	ldrb	r3, [r3, #0]
   1bd0e:	2201      	movs	r2, #1
   1bd10:	4053      	eors	r3, r2
   1bd12:	b2db      	uxtb	r3, r3
   1bd14:	2b00      	cmp	r3, #0
   1bd16:	d00c      	beq.n	1bd32 <checkCurrentConsumption+0xca>
   1bd18:	4b47      	ldr	r3, [pc, #284]	; (1be38 <checkCurrentConsumption+0x1d0>)
   1bd1a:	691b      	ldr	r3, [r3, #16]
   1bd1c:	005a      	lsls	r2, r3, #1
   1bd1e:	68fb      	ldr	r3, [r7, #12]
   1bd20:	429a      	cmp	r2, r3
   1bd22:	d206      	bcs.n	1bd32 <checkCurrentConsumption+0xca>
	{
		temp2 = CR_OVER;
   1bd24:	1dfb      	adds	r3, r7, #7
   1bd26:	2201      	movs	r2, #1
   1bd28:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>2;
   1bd2a:	68bb      	ldr	r3, [r7, #8]
   1bd2c:	089b      	lsrs	r3, r3, #2
   1bd2e:	60bb      	str	r3, [r7, #8]
   1bd30:	e03c      	b.n	1bdac <checkCurrentConsumption+0x144>
	}
	else if(!enableCurrentBuffer && temp> (user_settings_parameter_struct.normalLoadAddress+(user_settings_parameter_struct.normalLoadAddress>>1))) // more than 1.5
   1bd32:	4b43      	ldr	r3, [pc, #268]	; (1be40 <checkCurrentConsumption+0x1d8>)
   1bd34:	781b      	ldrb	r3, [r3, #0]
   1bd36:	2201      	movs	r2, #1
   1bd38:	4053      	eors	r3, r2
   1bd3a:	b2db      	uxtb	r3, r3
   1bd3c:	2b00      	cmp	r3, #0
   1bd3e:	d00f      	beq.n	1bd60 <checkCurrentConsumption+0xf8>
   1bd40:	4b3d      	ldr	r3, [pc, #244]	; (1be38 <checkCurrentConsumption+0x1d0>)
   1bd42:	691a      	ldr	r2, [r3, #16]
   1bd44:	4b3c      	ldr	r3, [pc, #240]	; (1be38 <checkCurrentConsumption+0x1d0>)
   1bd46:	691b      	ldr	r3, [r3, #16]
   1bd48:	085b      	lsrs	r3, r3, #1
   1bd4a:	18d2      	adds	r2, r2, r3
   1bd4c:	68fb      	ldr	r3, [r7, #12]
   1bd4e:	429a      	cmp	r2, r3
   1bd50:	d206      	bcs.n	1bd60 <checkCurrentConsumption+0xf8>
	{
		temp2 = CR_OVER;
   1bd52:	1dfb      	adds	r3, r7, #7
   1bd54:	2201      	movs	r2, #1
   1bd56:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>1;
   1bd58:	68bb      	ldr	r3, [r7, #8]
   1bd5a:	085b      	lsrs	r3, r3, #1
   1bd5c:	60bb      	str	r3, [r7, #8]
   1bd5e:	e025      	b.n	1bdac <checkCurrentConsumption+0x144>
	}
	else if (!enableCurrentBuffer && temp>user_settings_parameter_struct.overloadAddress)		// more than 1.25 to 1.5
   1bd60:	4b37      	ldr	r3, [pc, #220]	; (1be40 <checkCurrentConsumption+0x1d8>)
   1bd62:	781b      	ldrb	r3, [r3, #0]
   1bd64:	2201      	movs	r2, #1
   1bd66:	4053      	eors	r3, r2
   1bd68:	b2db      	uxtb	r3, r3
   1bd6a:	2b00      	cmp	r3, #0
   1bd6c:	d008      	beq.n	1bd80 <checkCurrentConsumption+0x118>
   1bd6e:	4b32      	ldr	r3, [pc, #200]	; (1be38 <checkCurrentConsumption+0x1d0>)
   1bd70:	695a      	ldr	r2, [r3, #20]
   1bd72:	68fb      	ldr	r3, [r7, #12]
   1bd74:	429a      	cmp	r2, r3
   1bd76:	d203      	bcs.n	1bd80 <checkCurrentConsumption+0x118>
	{
		temp2 = CR_OVER;
   1bd78:	1dfb      	adds	r3, r7, #7
   1bd7a:	2201      	movs	r2, #1
   1bd7c:	701a      	strb	r2, [r3, #0]
   1bd7e:	e015      	b.n	1bdac <checkCurrentConsumption+0x144>
	}
	else if(!enableCurrentBuffer && temp < user_settings_parameter_struct.underloadAddress)		// only consider noLoad after 30 secs
   1bd80:	4b2f      	ldr	r3, [pc, #188]	; (1be40 <checkCurrentConsumption+0x1d8>)
   1bd82:	781b      	ldrb	r3, [r3, #0]
   1bd84:	2201      	movs	r2, #1
   1bd86:	4053      	eors	r3, r2
   1bd88:	b2db      	uxtb	r3, r3
   1bd8a:	2b00      	cmp	r3, #0
   1bd8c:	d00b      	beq.n	1bda6 <checkCurrentConsumption+0x13e>
   1bd8e:	4b2a      	ldr	r3, [pc, #168]	; (1be38 <checkCurrentConsumption+0x1d0>)
   1bd90:	699a      	ldr	r2, [r3, #24]
   1bd92:	68fb      	ldr	r3, [r7, #12]
   1bd94:	429a      	cmp	r2, r3
   1bd96:	d906      	bls.n	1bda6 <checkCurrentConsumption+0x13e>
	{
		temp2 = CR_UNDER;
   1bd98:	1dfb      	adds	r3, r7, #7
   1bd9a:	2202      	movs	r2, #2
   1bd9c:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>2;
   1bd9e:	68bb      	ldr	r3, [r7, #8]
   1bda0:	089b      	lsrs	r3, r3, #2
   1bda2:	60bb      	str	r3, [r7, #8]
   1bda4:	e002      	b.n	1bdac <checkCurrentConsumption+0x144>
		//temp2 = CR_UNDER;
		//overLoadDetectValue=overLoadDetectValue>>2;
	//}
	else
	{
		temp2= CR_NORMAL;
   1bda6:	1dfb      	adds	r3, r7, #7
   1bda8:	2200      	movs	r2, #0
   1bdaa:	701a      	strb	r2, [r3, #0]
	}
	if(lastCurrentReading == temp2)
   1bdac:	4b2b      	ldr	r3, [pc, #172]	; (1be5c <checkCurrentConsumption+0x1f4>)
   1bdae:	781b      	ldrb	r3, [r3, #0]
   1bdb0:	1dfa      	adds	r2, r7, #7
   1bdb2:	7812      	ldrb	r2, [r2, #0]
   1bdb4:	429a      	cmp	r2, r3
   1bdb6:	d12a      	bne.n	1be0e <checkCurrentConsumption+0x1a6>
	{
		if(xTaskGetTickCount()-currentEventFilterTempTime>overLoadDetectValue)
   1bdb8:	4b22      	ldr	r3, [pc, #136]	; (1be44 <checkCurrentConsumption+0x1dc>)
   1bdba:	4798      	blx	r3
   1bdbc:	0002      	movs	r2, r0
   1bdbe:	4b28      	ldr	r3, [pc, #160]	; (1be60 <checkCurrentConsumption+0x1f8>)
   1bdc0:	681b      	ldr	r3, [r3, #0]
   1bdc2:	1ad2      	subs	r2, r2, r3
   1bdc4:	68bb      	ldr	r3, [r7, #8]
   1bdc6:	429a      	cmp	r2, r3
   1bdc8:	d92c      	bls.n	1be24 <checkCurrentConsumption+0x1bc>
		{
			if(temp2==CR_OVER)
   1bdca:	1dfb      	adds	r3, r7, #7
   1bdcc:	781b      	ldrb	r3, [r3, #0]
   1bdce:	2b01      	cmp	r3, #1
   1bdd0:	d10c      	bne.n	1bdec <checkCurrentConsumption+0x184>
			{
				stopMotor(false,true,false);
   1bdd2:	2200      	movs	r2, #0
   1bdd4:	2101      	movs	r1, #1
   1bdd6:	2000      	movs	r0, #0
   1bdd8:	4b22      	ldr	r3, [pc, #136]	; (1be64 <checkCurrentConsumption+0x1fc>)
   1bdda:	4798      	blx	r3
				simEventTemp[12] = registerEvent('B');			//register overload Event
   1bddc:	2042      	movs	r0, #66	; 0x42
   1bdde:	4b22      	ldr	r3, [pc, #136]	; (1be68 <checkCurrentConsumption+0x200>)
   1bde0:	4798      	blx	r3
   1bde2:	0003      	movs	r3, r0
   1bde4:	001a      	movs	r2, r3
   1bde6:	4b21      	ldr	r3, [pc, #132]	; (1be6c <checkCurrentConsumption+0x204>)
   1bde8:	731a      	strb	r2, [r3, #12]
   1bdea:	e01b      	b.n	1be24 <checkCurrentConsumption+0x1bc>
			}
			else if(temp2==CR_UNDER)
   1bdec:	1dfb      	adds	r3, r7, #7
   1bdee:	781b      	ldrb	r3, [r3, #0]
   1bdf0:	2b02      	cmp	r3, #2
   1bdf2:	d117      	bne.n	1be24 <checkCurrentConsumption+0x1bc>
			{
				stopMotor(false,true,false);
   1bdf4:	2200      	movs	r2, #0
   1bdf6:	2101      	movs	r1, #1
   1bdf8:	2000      	movs	r0, #0
   1bdfa:	4b1a      	ldr	r3, [pc, #104]	; (1be64 <checkCurrentConsumption+0x1fc>)
   1bdfc:	4798      	blx	r3
				simEventTemp[13] = registerEvent('J');			// register Underload Event
   1bdfe:	204a      	movs	r0, #74	; 0x4a
   1be00:	4b19      	ldr	r3, [pc, #100]	; (1be68 <checkCurrentConsumption+0x200>)
   1be02:	4798      	blx	r3
   1be04:	0003      	movs	r3, r0
   1be06:	001a      	movs	r2, r3
   1be08:	4b18      	ldr	r3, [pc, #96]	; (1be6c <checkCurrentConsumption+0x204>)
   1be0a:	735a      	strb	r2, [r3, #13]
   1be0c:	e00a      	b.n	1be24 <checkCurrentConsumption+0x1bc>
			}
		}
	}
	else
	{
		currentEventFilterTempTime = xTaskGetTickCount();
   1be0e:	4b0d      	ldr	r3, [pc, #52]	; (1be44 <checkCurrentConsumption+0x1dc>)
   1be10:	4798      	blx	r3
   1be12:	0002      	movs	r2, r0
   1be14:	4b12      	ldr	r3, [pc, #72]	; (1be60 <checkCurrentConsumption+0x1f8>)
   1be16:	601a      	str	r2, [r3, #0]
		lastCurrentReading=temp2;
   1be18:	4b10      	ldr	r3, [pc, #64]	; (1be5c <checkCurrentConsumption+0x1f4>)
   1be1a:	1dfa      	adds	r2, r7, #7
   1be1c:	7812      	ldrb	r2, [r2, #0]
   1be1e:	701a      	strb	r2, [r3, #0]
   1be20:	e000      	b.n	1be24 <checkCurrentConsumption+0x1bc>
		return;
   1be22:	46c0      	nop			; (mov r8, r8)
	}
}
   1be24:	46bd      	mov	sp, r7
   1be26:	b004      	add	sp, #16
   1be28:	bd80      	pop	{r7, pc}
   1be2a:	46c0      	nop			; (mov r8, r8)
   1be2c:	20000791 	.word	0x20000791
   1be30:	20000780 	.word	0x20000780
   1be34:	0001ac9d 	.word	0x0001ac9d
   1be38:	20000654 	.word	0x20000654
   1be3c:	20000793 	.word	0x20000793
   1be40:	20000758 	.word	0x20000758
   1be44:	0002034d 	.word	0x0002034d
   1be48:	2000078c 	.word	0x2000078c
   1be4c:	00007530 	.word	0x00007530
   1be50:	200006dc 	.word	0x200006dc
   1be54:	00002ee0 	.word	0x00002ee0
   1be58:	00004650 	.word	0x00004650
   1be5c:	20000776 	.word	0x20000776
   1be60:	20000764 	.word	0x20000764
   1be64:	0001b56d 	.word	0x0001b56d
   1be68:	0001492d 	.word	0x0001492d
   1be6c:	2000070c 	.word	0x2000070c

0001be70 <button_detect_pin_callback>:

static void button_detect_pin_callback(void)
{
   1be70:	b580      	push	{r7, lr}
   1be72:	af00      	add	r7, sp, #0
	buttonEventOccured = true;
   1be74:	4b02      	ldr	r3, [pc, #8]	; (1be80 <button_detect_pin_callback+0x10>)
   1be76:	2201      	movs	r2, #1
   1be78:	701a      	strb	r2, [r3, #0]
	//	xTaskNotifyGive(fiftymsTask);
}
   1be7a:	46c0      	nop			; (mov r8, r8)
   1be7c:	46bd      	mov	sp, r7
   1be7e:	bd80      	pop	{r7, pc}
   1be80:	20000797 	.word	0x20000797

0001be84 <vTask_MOTORCONTROL>:

static void vTask_MOTORCONTROL(void *params)
{
   1be84:	b590      	push	{r4, r7, lr}
   1be86:	b087      	sub	sp, #28
   1be88:	af00      	add	r7, sp, #0
   1be8a:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	
	Configure_ADC0();
   1be8c:	4bce      	ldr	r3, [pc, #824]	; (1c1c8 <vTask_MOTORCONTROL+0x344>)
   1be8e:	4798      	blx	r3
	
	configure_ac();
   1be90:	4bce      	ldr	r3, [pc, #824]	; (1c1cc <vTask_MOTORCONTROL+0x348>)
   1be92:	4798      	blx	r3
	configure_rtc();
   1be94:	4bce      	ldr	r3, [pc, #824]	; (1c1d0 <vTask_MOTORCONTROL+0x34c>)
   1be96:	4798      	blx	r3
	configure_event();
   1be98:	4bce      	ldr	r3, [pc, #824]	; (1c1d4 <vTask_MOTORCONTROL+0x350>)
   1be9a:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	gotOffCommand = false;
   1be9c:	4bce      	ldr	r3, [pc, #824]	; (1c1d8 <vTask_MOTORCONTROL+0x354>)
   1be9e:	2200      	movs	r2, #0
   1bea0:	701a      	strb	r2, [r3, #0]
	gotOnCommand = false;
   1bea2:	4bce      	ldr	r3, [pc, #824]	; (1c1dc <vTask_MOTORCONTROL+0x358>)
   1bea4:	2200      	movs	r2, #0
   1bea6:	701a      	strb	r2, [r3, #0]

	//////////////////////////////////////////////////////////////////////////
	eventOccured = false;
   1bea8:	4bcd      	ldr	r3, [pc, #820]	; (1c1e0 <vTask_MOTORCONTROL+0x35c>)
   1beaa:	2200      	movs	r2, #0
   1beac:	701a      	strb	r2, [r3, #0]
	
	uint8_t last_comparison = AC_CHAN_STATUS_UNKNOWN;
   1beae:	2315      	movs	r3, #21
   1beb0:	18fb      	adds	r3, r7, r3
   1beb2:	2201      	movs	r2, #1
   1beb4:	701a      	strb	r2, [r3, #0]
	
	//sets the variable to store current ticks, so that we can delay first event operation
	uint32_t delayForFirstEvent = xTaskGetTickCount();
   1beb6:	4bcb      	ldr	r3, [pc, #812]	; (1c1e4 <vTask_MOTORCONTROL+0x360>)
   1beb8:	4798      	blx	r3
   1beba:	0003      	movs	r3, r0
   1bebc:	613b      	str	r3, [r7, #16]
	firstEvent = true;
   1bebe:	4bca      	ldr	r3, [pc, #808]	; (1c1e8 <vTask_MOTORCONTROL+0x364>)
   1bec0:	2201      	movs	r2, #1
   1bec2:	701a      	strb	r2, [r3, #0]
	
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0);
   1bec4:	2315      	movs	r3, #21
   1bec6:	18fc      	adds	r4, r7, r3
   1bec8:	4bc8      	ldr	r3, [pc, #800]	; (1c1ec <vTask_MOTORCONTROL+0x368>)
   1beca:	2100      	movs	r1, #0
   1becc:	0018      	movs	r0, r3
   1bece:	4bc8      	ldr	r3, [pc, #800]	; (1c1f0 <vTask_MOTORCONTROL+0x36c>)
   1bed0:	4798      	blx	r3
   1bed2:	0003      	movs	r3, r0
   1bed4:	7023      	strb	r3, [r4, #0]
	vTaskDelay(500/portTICK_PERIOD_MS);
   1bed6:	23fa      	movs	r3, #250	; 0xfa
   1bed8:	005b      	lsls	r3, r3, #1
   1beda:	0018      	movs	r0, r3
   1bedc:	4bc5      	ldr	r3, [pc, #788]	; (1c1f4 <vTask_MOTORCONTROL+0x370>)
   1bede:	4798      	blx	r3
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0); //read again
   1bee0:	2315      	movs	r3, #21
   1bee2:	18fc      	adds	r4, r7, r3
   1bee4:	4bc1      	ldr	r3, [pc, #772]	; (1c1ec <vTask_MOTORCONTROL+0x368>)
   1bee6:	2100      	movs	r1, #0
   1bee8:	0018      	movs	r0, r3
   1beea:	4bc1      	ldr	r3, [pc, #772]	; (1c1f0 <vTask_MOTORCONTROL+0x36c>)
   1beec:	4798      	blx	r3
   1beee:	0003      	movs	r3, r0
   1bef0:	7023      	strb	r3, [r4, #0]
	
	if (last_comparison & AC_CHAN_STATUS_POS_ABOVE_NEG)
   1bef2:	2315      	movs	r3, #21
   1bef4:	18fb      	adds	r3, r7, r3
   1bef6:	781b      	ldrb	r3, [r3, #0]
   1bef8:	2204      	movs	r2, #4
   1befa:	4013      	ands	r3, r2
   1befc:	d003      	beq.n	1bf06 <vTask_MOTORCONTROL+0x82>
	{
		isACpowerAvailable = true;
   1befe:	4bbe      	ldr	r3, [pc, #760]	; (1c1f8 <vTask_MOTORCONTROL+0x374>)
   1bf00:	2201      	movs	r2, #1
   1bf02:	701a      	strb	r2, [r3, #0]
   1bf04:	e002      	b.n	1bf0c <vTask_MOTORCONTROL+0x88>
	}
	else
	{
		isACpowerAvailable = false;
   1bf06:	4bbc      	ldr	r3, [pc, #752]	; (1c1f8 <vTask_MOTORCONTROL+0x374>)
   1bf08:	2200      	movs	r2, #0
   1bf0a:	701a      	strb	r2, [r3, #0]
	}
	
	current_three_phase_state = AC_OFF;
   1bf0c:	4bbb      	ldr	r3, [pc, #748]	; (1c1fc <vTask_MOTORCONTROL+0x378>)
   1bf0e:	2200      	movs	r2, #0
   1bf10:	701a      	strb	r2, [r3, #0]
	//////////////////////////////////////////////////////////////////////////
	
	startTimerOn = false;
   1bf12:	4bbb      	ldr	r3, [pc, #748]	; (1c200 <vTask_MOTORCONTROL+0x37c>)
   1bf14:	2200      	movs	r2, #0
   1bf16:	701a      	strb	r2, [r3, #0]

	singlePhasingTime = 10;
   1bf18:	4bba      	ldr	r3, [pc, #744]	; (1c204 <vTask_MOTORCONTROL+0x380>)
   1bf1a:	220a      	movs	r2, #10
   1bf1c:	701a      	strb	r2, [r3, #0]
	singlePhasingTimerOn = false;
   1bf1e:	4bba      	ldr	r3, [pc, #744]	; (1c208 <vTask_MOTORCONTROL+0x384>)
   1bf20:	2200      	movs	r2, #0
   1bf22:	701a      	strb	r2, [r3, #0]

	startSequenceTimerTime = 20;
   1bf24:	4bb9      	ldr	r3, [pc, #740]	; (1c20c <vTask_MOTORCONTROL+0x388>)
   1bf26:	2214      	movs	r2, #20
   1bf28:	701a      	strb	r2, [r3, #0]
	starDeltaTimerOn=false;
   1bf2a:	4bb9      	ldr	r3, [pc, #740]	; (1c210 <vTask_MOTORCONTROL+0x38c>)
   1bf2c:	2200      	movs	r2, #0
   1bf2e:	701a      	strb	r2, [r3, #0]
	startSequenceOn = false;
   1bf30:	4bb8      	ldr	r3, [pc, #736]	; (1c214 <vTask_MOTORCONTROL+0x390>)
   1bf32:	2200      	movs	r2, #0
   1bf34:	701a      	strb	r2, [r3, #0]

	stopSequenceTimerTime = 20;
   1bf36:	4bb8      	ldr	r3, [pc, #736]	; (1c218 <vTask_MOTORCONTROL+0x394>)
   1bf38:	2214      	movs	r2, #20
   1bf3a:	701a      	strb	r2, [r3, #0]
	stopSequenceOn = false;
   1bf3c:	4bb7      	ldr	r3, [pc, #732]	; (1c21c <vTask_MOTORCONTROL+0x398>)
   1bf3e:	2200      	movs	r2, #0
   1bf40:	701a      	strb	r2, [r3, #0]
	
	setAllPhaseState(false); // allPhase = false;
   1bf42:	2000      	movs	r0, #0
   1bf44:	4bb6      	ldr	r3, [pc, #728]	; (1c220 <vTask_MOTORCONTROL+0x39c>)
   1bf46:	4798      	blx	r3
	setMotorState(false);// mFeedback = false;
   1bf48:	2000      	movs	r0, #0
   1bf4a:	4bb6      	ldr	r3, [pc, #728]	; (1c224 <vTask_MOTORCONTROL+0x3a0>)
   1bf4c:	4798      	blx	r3
	setACPowerState(false);//  phaseAC = false;
   1bf4e:	2000      	movs	r0, #0
   1bf50:	4bb5      	ldr	r3, [pc, #724]	; (1c228 <vTask_MOTORCONTROL+0x3a4>)
   1bf52:	4798      	blx	r3

	initPhaseRMStruct(&struct_rmsRY);
   1bf54:	4bb5      	ldr	r3, [pc, #724]	; (1c22c <vTask_MOTORCONTROL+0x3a8>)
   1bf56:	0018      	movs	r0, r3
   1bf58:	4bb5      	ldr	r3, [pc, #724]	; (1c230 <vTask_MOTORCONTROL+0x3ac>)
   1bf5a:	4798      	blx	r3
	initPhaseRMStruct(&struct_rmsYB);
   1bf5c:	4bb5      	ldr	r3, [pc, #724]	; (1c234 <vTask_MOTORCONTROL+0x3b0>)
   1bf5e:	0018      	movs	r0, r3
   1bf60:	4bb3      	ldr	r3, [pc, #716]	; (1c230 <vTask_MOTORCONTROL+0x3ac>)
   1bf62:	4798      	blx	r3
	initPhaseRMStruct(&struct_rmsBR);
   1bf64:	4bb4      	ldr	r3, [pc, #720]	; (1c238 <vTask_MOTORCONTROL+0x3b4>)
   1bf66:	0018      	movs	r0, r3
   1bf68:	4bb1      	ldr	r3, [pc, #708]	; (1c230 <vTask_MOTORCONTROL+0x3ac>)
   1bf6a:	4798      	blx	r3
	
	lastPressTime=0;
   1bf6c:	4bb3      	ldr	r3, [pc, #716]	; (1c23c <vTask_MOTORCONTROL+0x3b8>)
   1bf6e:	2200      	movs	r2, #0
   1bf70:	601a      	str	r2, [r3, #0]
	lastButtonEvent=0;
   1bf72:	4bb3      	ldr	r3, [pc, #716]	; (1c240 <vTask_MOTORCONTROL+0x3bc>)
   1bf74:	2200      	movs	r2, #0
   1bf76:	701a      	strb	r2, [r3, #0]

	motorRelatedVoltageBypassOn=false;
   1bf78:	4bb2      	ldr	r3, [pc, #712]	; (1c244 <vTask_MOTORCONTROL+0x3c0>)
   1bf7a:	2200      	movs	r2, #0
   1bf7c:	701a      	strb	r2, [r3, #0]
	motorVoltageBypassTimerTime= 0;
   1bf7e:	4bb2      	ldr	r3, [pc, #712]	; (1c248 <vTask_MOTORCONTROL+0x3c4>)
   1bf80:	2200      	movs	r2, #0
   1bf82:	601a      	str	r2, [r3, #0]
	
	uint8_t i= 0;
   1bf84:	2317      	movs	r3, #23
   1bf86:	18fb      	adds	r3, r7, r3
   1bf88:	2200      	movs	r2, #0
   1bf8a:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1bf8c:	4baf      	ldr	r3, [pc, #700]	; (1c24c <vTask_MOTORCONTROL+0x3c8>)
   1bf8e:	785b      	ldrb	r3, [r3, #1]
   1bf90:	2b00      	cmp	r3, #0
   1bf92:	d004      	beq.n	1bf9e <vTask_MOTORCONTROL+0x11a>
	{
		i=14;
   1bf94:	2317      	movs	r3, #23
   1bf96:	18fb      	adds	r3, r7, r3
   1bf98:	220e      	movs	r2, #14
   1bf9a:	701a      	strb	r2, [r3, #0]
   1bf9c:	e00a      	b.n	1bfb4 <vTask_MOTORCONTROL+0x130>
	}
	else
	{
		i = 12;
   1bf9e:	2317      	movs	r3, #23
   1bfa0:	18fb      	adds	r3, r7, r3
   1bfa2:	220c      	movs	r2, #12
   1bfa4:	701a      	strb	r2, [r3, #0]
	}
	while(i--)
   1bfa6:	e005      	b.n	1bfb4 <vTask_MOTORCONTROL+0x130>
	{
		simEventTemp[i] = true;
   1bfa8:	2317      	movs	r3, #23
   1bfaa:	18fb      	adds	r3, r7, r3
   1bfac:	781b      	ldrb	r3, [r3, #0]
   1bfae:	4aa8      	ldr	r2, [pc, #672]	; (1c250 <vTask_MOTORCONTROL+0x3cc>)
   1bfb0:	2101      	movs	r1, #1
   1bfb2:	54d1      	strb	r1, [r2, r3]
	while(i--)
   1bfb4:	2317      	movs	r3, #23
   1bfb6:	18fb      	adds	r3, r7, r3
   1bfb8:	781b      	ldrb	r3, [r3, #0]
   1bfba:	2217      	movs	r2, #23
   1bfbc:	18ba      	adds	r2, r7, r2
   1bfbe:	1e59      	subs	r1, r3, #1
   1bfc0:	7011      	strb	r1, [r2, #0]
   1bfc2:	2b00      	cmp	r3, #0
   1bfc4:	d1f0      	bne.n	1bfa8 <vTask_MOTORCONTROL+0x124>
	}
	simEvent[0] = 'N';
   1bfc6:	4ba3      	ldr	r3, [pc, #652]	; (1c254 <vTask_MOTORCONTROL+0x3d0>)
   1bfc8:	224e      	movs	r2, #78	; 0x4e
   1bfca:	701a      	strb	r2, [r3, #0]
	simEvent[1] = 'P';
   1bfcc:	4ba1      	ldr	r3, [pc, #644]	; (1c254 <vTask_MOTORCONTROL+0x3d0>)
   1bfce:	2250      	movs	r2, #80	; 0x50
   1bfd0:	705a      	strb	r2, [r3, #1]
	simEvent[2] = '_';					//chnage the recording when playing from flash, as sim800c does not have enough space right now.
   1bfd2:	4ba0      	ldr	r3, [pc, #640]	; (1c254 <vTask_MOTORCONTROL+0x3d0>)
   1bfd4:	225f      	movs	r2, #95	; 0x5f
   1bfd6:	709a      	strb	r2, [r3, #2]
	simEvent[3] = 'F';
   1bfd8:	4b9e      	ldr	r3, [pc, #632]	; (1c254 <vTask_MOTORCONTROL+0x3d0>)
   1bfda:	2246      	movs	r2, #70	; 0x46
   1bfdc:	70da      	strb	r2, [r3, #3]
	simEvent[4] = 'G';
   1bfde:	4b9d      	ldr	r3, [pc, #628]	; (1c254 <vTask_MOTORCONTROL+0x3d0>)
   1bfe0:	2247      	movs	r2, #71	; 0x47
   1bfe2:	711a      	strb	r2, [r3, #4]
	simEvent[5] = 'L';
   1bfe4:	4b9b      	ldr	r3, [pc, #620]	; (1c254 <vTask_MOTORCONTROL+0x3d0>)
   1bfe6:	224c      	movs	r2, #76	; 0x4c
   1bfe8:	715a      	strb	r2, [r3, #5]
	simEvent[6] = 'C';
   1bfea:	4b9a      	ldr	r3, [pc, #616]	; (1c254 <vTask_MOTORCONTROL+0x3d0>)
   1bfec:	2243      	movs	r2, #67	; 0x43
   1bfee:	719a      	strb	r2, [r3, #6]
	simEvent[7] = 'S';
   1bff0:	4b98      	ldr	r3, [pc, #608]	; (1c254 <vTask_MOTORCONTROL+0x3d0>)
   1bff2:	2253      	movs	r2, #83	; 0x53
   1bff4:	71da      	strb	r2, [r3, #7]
	simEvent[8] = 'O';
   1bff6:	4b97      	ldr	r3, [pc, #604]	; (1c254 <vTask_MOTORCONTROL+0x3d0>)
   1bff8:	224f      	movs	r2, #79	; 0x4f
   1bffa:	721a      	strb	r2, [r3, #8]
	simEvent[9] = 'A';
   1bffc:	4b95      	ldr	r3, [pc, #596]	; (1c254 <vTask_MOTORCONTROL+0x3d0>)
   1bffe:	2241      	movs	r2, #65	; 0x41
   1c000:	725a      	strb	r2, [r3, #9]

	simEvent[10] = ')';		//AUTO ON EVENT
   1c002:	4b94      	ldr	r3, [pc, #592]	; (1c254 <vTask_MOTORCONTROL+0x3d0>)
   1c004:	2229      	movs	r2, #41	; 0x29
   1c006:	729a      	strb	r2, [r3, #10]
	simEvent[11] = '[';		//AUTO OFF EVENT
   1c008:	4b92      	ldr	r3, [pc, #584]	; (1c254 <vTask_MOTORCONTROL+0x3d0>)
   1c00a:	225b      	movs	r2, #91	; 0x5b
   1c00c:	72da      	strb	r2, [r3, #11]
	
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1c00e:	4b8f      	ldr	r3, [pc, #572]	; (1c24c <vTask_MOTORCONTROL+0x3c8>)
   1c010:	785b      	ldrb	r3, [r3, #1]
   1c012:	2b00      	cmp	r3, #0
   1c014:	d005      	beq.n	1c022 <vTask_MOTORCONTROL+0x19e>
	{
		simEvent[12] = 'B';		//Overload Event
   1c016:	4b8f      	ldr	r3, [pc, #572]	; (1c254 <vTask_MOTORCONTROL+0x3d0>)
   1c018:	2242      	movs	r2, #66	; 0x42
   1c01a:	731a      	strb	r2, [r3, #12]
		simEvent[13] = 'J';		//Underload EVENT
   1c01c:	4b8d      	ldr	r3, [pc, #564]	; (1c254 <vTask_MOTORCONTROL+0x3d0>)
   1c01e:	224a      	movs	r2, #74	; 0x4a
   1c020:	735a      	strb	r2, [r3, #13]
	}
	//////////////////////////////////////////////////////////////////////////
	
	resetAutoStart(true);
   1c022:	2001      	movs	r0, #1
   1c024:	4b8c      	ldr	r3, [pc, #560]	; (1c258 <vTask_MOTORCONTROL+0x3d4>)
   1c026:	4798      	blx	r3
	eventOccured=true;
   1c028:	4b6d      	ldr	r3, [pc, #436]	; (1c1e0 <vTask_MOTORCONTROL+0x35c>)
   1c02a:	2201      	movs	r2, #1
   1c02c:	701a      	strb	r2, [r3, #0]
	//////////////////////////////

	
	for (;;)
	{
		xSemaphoreTake(xButton_Semaphore, portMAX_DELAY);
   1c02e:	4b8b      	ldr	r3, [pc, #556]	; (1c25c <vTask_MOTORCONTROL+0x3d8>)
   1c030:	681a      	ldr	r2, [r3, #0]
   1c032:	2301      	movs	r3, #1
   1c034:	425b      	negs	r3, r3
   1c036:	0019      	movs	r1, r3
   1c038:	0010      	movs	r0, r2
   1c03a:	4b89      	ldr	r3, [pc, #548]	; (1c260 <vTask_MOTORCONTROL+0x3dc>)
   1c03c:	4798      	blx	r3
		if(taskPSet)
   1c03e:	4b89      	ldr	r3, [pc, #548]	; (1c264 <vTask_MOTORCONTROL+0x3e0>)
   1c040:	781b      	ldrb	r3, [r3, #0]
   1c042:	b2db      	uxtb	r3, r3
   1c044:	2b00      	cmp	r3, #0
   1c046:	d006      	beq.n	1c056 <vTask_MOTORCONTROL+0x1d2>
		{
			vTaskPrioritySet(NULL,1);
   1c048:	2101      	movs	r1, #1
   1c04a:	2000      	movs	r0, #0
   1c04c:	4b86      	ldr	r3, [pc, #536]	; (1c268 <vTask_MOTORCONTROL+0x3e4>)
   1c04e:	4798      	blx	r3
			taskPSet=false;
   1c050:	4b84      	ldr	r3, [pc, #528]	; (1c264 <vTask_MOTORCONTROL+0x3e0>)
   1c052:	2200      	movs	r2, #0
   1c054:	701a      	strb	r2, [r3, #0]
		}
		xSemaphoreGive(xButton_Semaphore);
   1c056:	4b81      	ldr	r3, [pc, #516]	; (1c25c <vTask_MOTORCONTROL+0x3d8>)
   1c058:	6818      	ldr	r0, [r3, #0]
   1c05a:	2300      	movs	r3, #0
   1c05c:	2200      	movs	r2, #0
   1c05e:	2100      	movs	r1, #0
   1c060:	4c82      	ldr	r4, [pc, #520]	; (1c26c <vTask_MOTORCONTROL+0x3e8>)
   1c062:	47a0      	blx	r4
		
		if(!startSequenceOn && !stopSequenceOn)
   1c064:	4b6b      	ldr	r3, [pc, #428]	; (1c214 <vTask_MOTORCONTROL+0x390>)
   1c066:	781b      	ldrb	r3, [r3, #0]
   1c068:	2201      	movs	r2, #1
   1c06a:	4053      	eors	r3, r2
   1c06c:	b2db      	uxtb	r3, r3
   1c06e:	2b00      	cmp	r3, #0
   1c070:	d046      	beq.n	1c100 <vTask_MOTORCONTROL+0x27c>
   1c072:	4b6a      	ldr	r3, [pc, #424]	; (1c21c <vTask_MOTORCONTROL+0x398>)
   1c074:	781b      	ldrb	r3, [r3, #0]
   1c076:	2201      	movs	r2, #1
   1c078:	4053      	eors	r3, r2
   1c07a:	b2db      	uxtb	r3, r3
   1c07c:	2b00      	cmp	r3, #0
   1c07e:	d03f      	beq.n	1c100 <vTask_MOTORCONTROL+0x27c>
		{
			uint8_t tempEventOccured=eventOccured;
   1c080:	4b57      	ldr	r3, [pc, #348]	; (1c1e0 <vTask_MOTORCONTROL+0x35c>)
   1c082:	781b      	ldrb	r3, [r3, #0]
   1c084:	b2da      	uxtb	r2, r3
   1c086:	230f      	movs	r3, #15
   1c088:	18fb      	adds	r3, r7, r3
   1c08a:	701a      	strb	r2, [r3, #0]
			uint8_t tempButtonEventOccured=buttonEventOccured;
   1c08c:	4b78      	ldr	r3, [pc, #480]	; (1c270 <vTask_MOTORCONTROL+0x3ec>)
   1c08e:	781b      	ldrb	r3, [r3, #0]
   1c090:	b2da      	uxtb	r2, r3
   1c092:	230e      	movs	r3, #14
   1c094:	18fb      	adds	r3, r7, r3
   1c096:	701a      	strb	r2, [r3, #0]
			
			
			if(tempEventOccured)
   1c098:	230f      	movs	r3, #15
   1c09a:	18fb      	adds	r3, r7, r3
   1c09c:	781b      	ldrb	r3, [r3, #0]
   1c09e:	2b00      	cmp	r3, #0
   1c0a0:	d027      	beq.n	1c0f2 <vTask_MOTORCONTROL+0x26e>
			{
				if(firstEvent)
   1c0a2:	4b51      	ldr	r3, [pc, #324]	; (1c1e8 <vTask_MOTORCONTROL+0x364>)
   1c0a4:	781b      	ldrb	r3, [r3, #0]
   1c0a6:	b2db      	uxtb	r3, r3
   1c0a8:	2b00      	cmp	r3, #0
   1c0aa:	d00b      	beq.n	1c0c4 <vTask_MOTORCONTROL+0x240>
				{
					if(xTaskGetTickCount()-delayForFirstEvent>35000L)
   1c0ac:	4b4d      	ldr	r3, [pc, #308]	; (1c1e4 <vTask_MOTORCONTROL+0x360>)
   1c0ae:	4798      	blx	r3
   1c0b0:	0002      	movs	r2, r0
   1c0b2:	693b      	ldr	r3, [r7, #16]
   1c0b4:	1ad3      	subs	r3, r2, r3
   1c0b6:	4a6f      	ldr	r2, [pc, #444]	; (1c274 <vTask_MOTORCONTROL+0x3f0>)
   1c0b8:	4293      	cmp	r3, r2
   1c0ba:	d91a      	bls.n	1c0f2 <vTask_MOTORCONTROL+0x26e>
					{
						firstEvent = false;
   1c0bc:	4b4a      	ldr	r3, [pc, #296]	; (1c1e8 <vTask_MOTORCONTROL+0x364>)
   1c0be:	2200      	movs	r2, #0
   1c0c0:	701a      	strb	r2, [r3, #0]
   1c0c2:	e016      	b.n	1c0f2 <vTask_MOTORCONTROL+0x26e>
					}
				}
				else
				{
					
					if(motorFeedbackEvent)
   1c0c4:	4b6c      	ldr	r3, [pc, #432]	; (1c278 <vTask_MOTORCONTROL+0x3f4>)
   1c0c6:	781b      	ldrb	r3, [r3, #0]
   1c0c8:	b2db      	uxtb	r3, r3
   1c0ca:	2b00      	cmp	r3, #0
   1c0cc:	d00f      	beq.n	1c0ee <vTask_MOTORCONTROL+0x26a>
					{
						if((xTaskGetTickCount()-motorFeedbackEventTime>1800))
   1c0ce:	4b45      	ldr	r3, [pc, #276]	; (1c1e4 <vTask_MOTORCONTROL+0x360>)
   1c0d0:	4798      	blx	r3
   1c0d2:	0002      	movs	r2, r0
   1c0d4:	4b69      	ldr	r3, [pc, #420]	; (1c27c <vTask_MOTORCONTROL+0x3f8>)
   1c0d6:	681b      	ldr	r3, [r3, #0]
   1c0d8:	1ad2      	subs	r2, r2, r3
   1c0da:	23e1      	movs	r3, #225	; 0xe1
   1c0dc:	00db      	lsls	r3, r3, #3
   1c0de:	429a      	cmp	r2, r3
   1c0e0:	d907      	bls.n	1c0f2 <vTask_MOTORCONTROL+0x26e>
						{
							motorFeedbackEvent=false;
   1c0e2:	4b65      	ldr	r3, [pc, #404]	; (1c278 <vTask_MOTORCONTROL+0x3f4>)
   1c0e4:	2200      	movs	r2, #0
   1c0e6:	701a      	strb	r2, [r3, #0]
							operateOnEvent();
   1c0e8:	4b65      	ldr	r3, [pc, #404]	; (1c280 <vTask_MOTORCONTROL+0x3fc>)
   1c0ea:	4798      	blx	r3
   1c0ec:	e001      	b.n	1c0f2 <vTask_MOTORCONTROL+0x26e>
						}
					}
					else
					{
						operateOnEvent();
   1c0ee:	4b64      	ldr	r3, [pc, #400]	; (1c280 <vTask_MOTORCONTROL+0x3fc>)
   1c0f0:	4798      	blx	r3
			//if(tempButtonEventOccured)
			//{
			//operateOnButtonEvent();
			//}
			
			if(lastButtonEvent)
   1c0f2:	4b53      	ldr	r3, [pc, #332]	; (1c240 <vTask_MOTORCONTROL+0x3bc>)
   1c0f4:	781b      	ldrb	r3, [r3, #0]
   1c0f6:	b2db      	uxtb	r3, r3
   1c0f8:	2b00      	cmp	r3, #0
   1c0fa:	d001      	beq.n	1c100 <vTask_MOTORCONTROL+0x27c>
			{
				buttonFilter();
   1c0fc:	4b61      	ldr	r3, [pc, #388]	; (1c284 <vTask_MOTORCONTROL+0x400>)
   1c0fe:	4798      	blx	r3
			}
		}
		//// check if it is the time for new Voltage reading and if so than get new Voltage Reading.
		if(should_Detect_New_Voltage()) {
   1c100:	4b61      	ldr	r3, [pc, #388]	; (1c288 <vTask_MOTORCONTROL+0x404>)
   1c102:	4798      	blx	r3
   1c104:	1e03      	subs	r3, r0, #0
   1c106:	d003      	beq.n	1c110 <vTask_MOTORCONTROL+0x28c>
			detect_battery_voltage_and_percentage();
   1c108:	4b60      	ldr	r3, [pc, #384]	; (1c28c <vTask_MOTORCONTROL+0x408>)
   1c10a:	4798      	blx	r3
			detect_Three_Phase_Voltage();
   1c10c:	4b60      	ldr	r3, [pc, #384]	; (1c290 <vTask_MOTORCONTROL+0x40c>)
   1c10e:	4798      	blx	r3
		}
		////////
		
		// To check if new reading of motor current is needed, and get new reading, and update in Analog_Parameter_Struct
		
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1c110:	4b4e      	ldr	r3, [pc, #312]	; (1c24c <vTask_MOTORCONTROL+0x3c8>)
   1c112:	785b      	ldrb	r3, [r3, #1]
   1c114:	2b00      	cmp	r3, #0
   1c116:	d013      	beq.n	1c140 <vTask_MOTORCONTROL+0x2bc>
		{
			if(should_Detect_New_Current()) {
   1c118:	4b5e      	ldr	r3, [pc, #376]	; (1c294 <vTask_MOTORCONTROL+0x410>)
   1c11a:	4798      	blx	r3
   1c11c:	1e03      	subs	r3, r0, #0
   1c11e:	d00f      	beq.n	1c140 <vTask_MOTORCONTROL+0x2bc>
				detect_Motor_Current();
   1c120:	4b5d      	ldr	r3, [pc, #372]	; (1c298 <vTask_MOTORCONTROL+0x414>)
   1c122:	4798      	blx	r3
				if (user_settings_parameter_struct.detectMotorFeedback== MOTORFEEDBACK_DETECTION_CURRENT)
   1c124:	4b5d      	ldr	r3, [pc, #372]	; (1c29c <vTask_MOTORCONTROL+0x418>)
   1c126:	2225      	movs	r2, #37	; 0x25
   1c128:	5c9b      	ldrb	r3, [r3, r2]
   1c12a:	2b01      	cmp	r3, #1
   1c12c:	d106      	bne.n	1c13c <vTask_MOTORCONTROL+0x2b8>
				{
					if(detectMotorStateChangeUsingCurrent())
   1c12e:	4b5c      	ldr	r3, [pc, #368]	; (1c2a0 <vTask_MOTORCONTROL+0x41c>)
   1c130:	4798      	blx	r3
   1c132:	1e03      	subs	r3, r0, #0
   1c134:	d002      	beq.n	1c13c <vTask_MOTORCONTROL+0x2b8>
					{
						eventOccured=true;
   1c136:	4b2a      	ldr	r3, [pc, #168]	; (1c1e0 <vTask_MOTORCONTROL+0x35c>)
   1c138:	2201      	movs	r2, #1
   1c13a:	701a      	strb	r2, [r3, #0]
					}
				}
				
				checkCurrentConsumption();
   1c13c:	4b59      	ldr	r3, [pc, #356]	; (1c2a4 <vTask_MOTORCONTROL+0x420>)
   1c13e:	4798      	blx	r3
			}
		}
		///////
		if (waitStableLineOn && waitStableLineOver())
   1c140:	4b59      	ldr	r3, [pc, #356]	; (1c2a8 <vTask_MOTORCONTROL+0x424>)
   1c142:	781b      	ldrb	r3, [r3, #0]
   1c144:	2b00      	cmp	r3, #0
   1c146:	d005      	beq.n	1c154 <vTask_MOTORCONTROL+0x2d0>
   1c148:	4b58      	ldr	r3, [pc, #352]	; (1c2ac <vTask_MOTORCONTROL+0x428>)
   1c14a:	4798      	blx	r3
   1c14c:	1e03      	subs	r3, r0, #0
   1c14e:	d001      	beq.n	1c154 <vTask_MOTORCONTROL+0x2d0>
		{
			operateOnStableLine();
   1c150:	4b57      	ldr	r3, [pc, #348]	; (1c2b0 <vTask_MOTORCONTROL+0x42c>)
   1c152:	4798      	blx	r3
		}
		
		if(stopMotorCommandGiven && xTaskGetTickCount()-tempStopSequenceTimer>5000)
   1c154:	4b57      	ldr	r3, [pc, #348]	; (1c2b4 <vTask_MOTORCONTROL+0x430>)
   1c156:	781b      	ldrb	r3, [r3, #0]
   1c158:	2b00      	cmp	r3, #0
   1c15a:	d00b      	beq.n	1c174 <vTask_MOTORCONTROL+0x2f0>
   1c15c:	4b21      	ldr	r3, [pc, #132]	; (1c1e4 <vTask_MOTORCONTROL+0x360>)
   1c15e:	4798      	blx	r3
   1c160:	0002      	movs	r2, r0
   1c162:	4b55      	ldr	r3, [pc, #340]	; (1c2b8 <vTask_MOTORCONTROL+0x434>)
   1c164:	681b      	ldr	r3, [r3, #0]
   1c166:	1ad3      	subs	r3, r2, r3
   1c168:	4a54      	ldr	r2, [pc, #336]	; (1c2bc <vTask_MOTORCONTROL+0x438>)
   1c16a:	4293      	cmp	r3, r2
   1c16c:	d902      	bls.n	1c174 <vTask_MOTORCONTROL+0x2f0>
		{
			stopMotorCommandGiven=false;
   1c16e:	4b51      	ldr	r3, [pc, #324]	; (1c2b4 <vTask_MOTORCONTROL+0x430>)
   1c170:	2200      	movs	r2, #0
   1c172:	701a      	strb	r2, [r3, #0]
		}
		
		if(motorRelatedVoltageBypassOn)
   1c174:	4b33      	ldr	r3, [pc, #204]	; (1c244 <vTask_MOTORCONTROL+0x3c0>)
   1c176:	781b      	ldrb	r3, [r3, #0]
   1c178:	2b00      	cmp	r3, #0
   1c17a:	d006      	beq.n	1c18a <vTask_MOTORCONTROL+0x306>
		{
			if(MotorVoltageBypassTimerOver())
   1c17c:	4b50      	ldr	r3, [pc, #320]	; (1c2c0 <vTask_MOTORCONTROL+0x43c>)
   1c17e:	4798      	blx	r3
   1c180:	1e03      	subs	r3, r0, #0
   1c182:	d002      	beq.n	1c18a <vTask_MOTORCONTROL+0x306>
			{
				motorRelatedVoltageBypassOn=false;
   1c184:	4b2f      	ldr	r3, [pc, #188]	; (1c244 <vTask_MOTORCONTROL+0x3c0>)
   1c186:	2200      	movs	r2, #0
   1c188:	701a      	strb	r2, [r3, #0]
			}
		}
		
		if(singlePhasingTimerOn)
   1c18a:	4b1f      	ldr	r3, [pc, #124]	; (1c208 <vTask_MOTORCONTROL+0x384>)
   1c18c:	781b      	ldrb	r3, [r3, #0]
   1c18e:	2b00      	cmp	r3, #0
   1c190:	d100      	bne.n	1c194 <vTask_MOTORCONTROL+0x310>
   1c192:	e0a0      	b.n	1c2d6 <vTask_MOTORCONTROL+0x452>
		{
			bool b;
			if (structThreePhase_state.u8t_phase_ac_state != AC_3PH)
   1c194:	4b4b      	ldr	r3, [pc, #300]	; (1c2c4 <vTask_MOTORCONTROL+0x440>)
   1c196:	785b      	ldrb	r3, [r3, #1]
   1c198:	b2db      	uxtb	r3, r3
   1c19a:	2b03      	cmp	r3, #3
   1c19c:	d003      	beq.n	1c1a6 <vTask_MOTORCONTROL+0x322>
			{
				b = false;
   1c19e:	2316      	movs	r3, #22
   1c1a0:	18fb      	adds	r3, r7, r3
   1c1a2:	2200      	movs	r2, #0
   1c1a4:	701a      	strb	r2, [r3, #0]
			}
			if(!b)		//3 phase pin is low
   1c1a6:	2316      	movs	r3, #22
   1c1a8:	18fb      	adds	r3, r7, r3
   1c1aa:	781b      	ldrb	r3, [r3, #0]
   1c1ac:	2201      	movs	r2, #1
   1c1ae:	4053      	eors	r3, r2
   1c1b0:	b2db      	uxtb	r3, r3
   1c1b2:	2b00      	cmp	r3, #0
   1c1b4:	d100      	bne.n	1c1b8 <vTask_MOTORCONTROL+0x334>
   1c1b6:	e08b      	b.n	1c2d0 <vTask_MOTORCONTROL+0x44c>
			{
				if(singlePhasingTimerOver())
   1c1b8:	4b43      	ldr	r3, [pc, #268]	; (1c2c8 <vTask_MOTORCONTROL+0x444>)
   1c1ba:	4798      	blx	r3
   1c1bc:	1e03      	subs	r3, r0, #0
   1c1be:	d100      	bne.n	1c1c2 <vTask_MOTORCONTROL+0x33e>
   1c1c0:	e089      	b.n	1c2d6 <vTask_MOTORCONTROL+0x452>
				{
					operateOnSinglePhasing();
   1c1c2:	4b42      	ldr	r3, [pc, #264]	; (1c2cc <vTask_MOTORCONTROL+0x448>)
   1c1c4:	4798      	blx	r3
   1c1c6:	e086      	b.n	1c2d6 <vTask_MOTORCONTROL+0x452>
   1c1c8:	00019b75 	.word	0x00019b75
   1c1cc:	0001c7f5 	.word	0x0001c7f5
   1c1d0:	0001c8e9 	.word	0x0001c8e9
   1c1d4:	0001c9b9 	.word	0x0001c9b9
   1c1d8:	2000080c 	.word	0x2000080c
   1c1dc:	20000708 	.word	0x20000708
   1c1e0:	20000722 	.word	0x20000722
   1c1e4:	0002034d 	.word	0x0002034d
   1c1e8:	2000076e 	.word	0x2000076e
   1c1ec:	2000088c 	.word	0x2000088c
   1c1f0:	00018c25 	.word	0x00018c25
   1c1f4:	0001ffe9 	.word	0x0001ffe9
   1c1f8:	20000785 	.word	0x20000785
   1c1fc:	20000841 	.word	0x20000841
   1c200:	20000792 	.word	0x20000792
   1c204:	20000768 	.word	0x20000768
   1c208:	20000789 	.word	0x20000789
   1c20c:	20000818 	.word	0x20000818
   1c210:	20000793 	.word	0x20000793
   1c214:	20000791 	.word	0x20000791
   1c218:	20000862 	.word	0x20000862
   1c21c:	20000780 	.word	0x20000780
   1c220:	0001ac49 	.word	0x0001ac49
   1c224:	0001acb1 	.word	0x0001acb1
   1c228:	0001ac15 	.word	0x0001ac15
   1c22c:	200007a8 	.word	0x200007a8
   1c230:	0001a52d 	.word	0x0001a52d
   1c234:	20000724 	.word	0x20000724
   1c238:	200007dc 	.word	0x200007dc
   1c23c:	20000760 	.word	0x20000760
   1c240:	20000778 	.word	0x20000778
   1c244:	2000076b 	.word	0x2000076b
   1c248:	2000077c 	.word	0x2000077c
   1c24c:	2000062c 	.word	0x2000062c
   1c250:	2000070c 	.word	0x2000070c
   1c254:	200007f8 	.word	0x200007f8
   1c258:	0001af99 	.word	0x0001af99
   1c25c:	2000023c 	.word	0x2000023c
   1c260:	0001f6e1 	.word	0x0001f6e1
   1c264:	20000880 	.word	0x20000880
   1c268:	00020045 	.word	0x00020045
   1c26c:	0001f241 	.word	0x0001f241
   1c270:	20000797 	.word	0x20000797
   1c274:	000088b8 	.word	0x000088b8
   1c278:	20000782 	.word	0x20000782
   1c27c:	2000085c 	.word	0x2000085c
   1c280:	0001b039 	.word	0x0001b039
   1c284:	0001cac5 	.word	0x0001cac5
   1c288:	0001a451 	.word	0x0001a451
   1c28c:	0001a46d 	.word	0x0001a46d
   1c290:	0001a77d 	.word	0x0001a77d
   1c294:	0001abe5 	.word	0x0001abe5
   1c298:	0001a9ad 	.word	0x0001a9ad
   1c29c:	20000654 	.word	0x20000654
   1c2a0:	0001ae7d 	.word	0x0001ae7d
   1c2a4:	0001bc69 	.word	0x0001bc69
   1c2a8:	2000080d 	.word	0x2000080d
   1c2ac:	0001b345 	.word	0x0001b345
   1c2b0:	0001b215 	.word	0x0001b215
   1c2b4:	20000860 	.word	0x20000860
   1c2b8:	200007a0 	.word	0x200007a0
   1c2bc:	00001388 	.word	0x00001388
   1c2c0:	0001bc39 	.word	0x0001bc39
   1c2c4:	20000740 	.word	0x20000740
   1c2c8:	0001b6c5 	.word	0x0001b6c5
   1c2cc:	0001b711 	.word	0x0001b711
				}
			}
			else
			{
				singlePhasingTimerOn=false;
   1c2d0:	4b15      	ldr	r3, [pc, #84]	; (1c328 <vTask_MOTORCONTROL+0x4a4>)
   1c2d2:	2200      	movs	r2, #0
   1c2d4:	701a      	strb	r2, [r3, #0]
			}
		}
		if (startTimerOn)
   1c2d6:	4b15      	ldr	r3, [pc, #84]	; (1c32c <vTask_MOTORCONTROL+0x4a8>)
   1c2d8:	781b      	ldrb	r3, [r3, #0]
   1c2da:	2b00      	cmp	r3, #0
   1c2dc:	d007      	beq.n	1c2ee <vTask_MOTORCONTROL+0x46a>
		{
			if (startMotorTimerOver())
   1c2de:	4b14      	ldr	r3, [pc, #80]	; (1c330 <vTask_MOTORCONTROL+0x4ac>)
   1c2e0:	4798      	blx	r3
   1c2e2:	1e03      	subs	r3, r0, #0
   1c2e4:	d003      	beq.n	1c2ee <vTask_MOTORCONTROL+0x46a>
			{
				startMotor(false,false);
   1c2e6:	2100      	movs	r1, #0
   1c2e8:	2000      	movs	r0, #0
   1c2ea:	4b12      	ldr	r3, [pc, #72]	; (1c334 <vTask_MOTORCONTROL+0x4b0>)
   1c2ec:	4798      	blx	r3
			}
		}
		if (startSequenceOn)
   1c2ee:	4b12      	ldr	r3, [pc, #72]	; (1c338 <vTask_MOTORCONTROL+0x4b4>)
   1c2f0:	781b      	ldrb	r3, [r3, #0]
   1c2f2:	2b00      	cmp	r3, #0
   1c2f4:	d001      	beq.n	1c2fa <vTask_MOTORCONTROL+0x476>
		{
			terminateStartRelay();
   1c2f6:	4b11      	ldr	r3, [pc, #68]	; (1c33c <vTask_MOTORCONTROL+0x4b8>)
   1c2f8:	4798      	blx	r3
		}
		if(starDeltaTimerOn)
   1c2fa:	4b11      	ldr	r3, [pc, #68]	; (1c340 <vTask_MOTORCONTROL+0x4bc>)
   1c2fc:	781b      	ldrb	r3, [r3, #0]
   1c2fe:	2b00      	cmp	r3, #0
   1c300:	d001      	beq.n	1c306 <vTask_MOTORCONTROL+0x482>
		{
			terminateStarDeltaTimer();
   1c302:	4b10      	ldr	r3, [pc, #64]	; (1c344 <vTask_MOTORCONTROL+0x4c0>)
   1c304:	4798      	blx	r3
		}
		if(stopSequenceOn)
   1c306:	4b10      	ldr	r3, [pc, #64]	; (1c348 <vTask_MOTORCONTROL+0x4c4>)
   1c308:	781b      	ldrb	r3, [r3, #0]
   1c30a:	2b00      	cmp	r3, #0
   1c30c:	d001      	beq.n	1c312 <vTask_MOTORCONTROL+0x48e>
		{
			terminateStopRelay();
   1c30e:	4b0f      	ldr	r3, [pc, #60]	; (1c34c <vTask_MOTORCONTROL+0x4c8>)
   1c310:	4798      	blx	r3
		}
		
		SIMEventManager();
   1c312:	4b0f      	ldr	r3, [pc, #60]	; (1c350 <vTask_MOTORCONTROL+0x4cc>)
   1c314:	4798      	blx	r3
		if (factory_settings_parameter_struct.ENABLE_M2M)
   1c316:	4b0f      	ldr	r3, [pc, #60]	; (1c354 <vTask_MOTORCONTROL+0x4d0>)
   1c318:	78db      	ldrb	r3, [r3, #3]
   1c31a:	2b00      	cmp	r3, #0
   1c31c:	d100      	bne.n	1c320 <vTask_MOTORCONTROL+0x49c>
   1c31e:	e686      	b.n	1c02e <vTask_MOTORCONTROL+0x1aa>
		{
			M2MEventManager();
   1c320:	4b0d      	ldr	r3, [pc, #52]	; (1c358 <vTask_MOTORCONTROL+0x4d4>)
   1c322:	4798      	blx	r3
		xSemaphoreTake(xButton_Semaphore, portMAX_DELAY);
   1c324:	e683      	b.n	1c02e <vTask_MOTORCONTROL+0x1aa>
   1c326:	46c0      	nop			; (mov r8, r8)
   1c328:	20000789 	.word	0x20000789
   1c32c:	20000792 	.word	0x20000792
   1c330:	0001b65d 	.word	0x0001b65d
   1c334:	0001b391 	.word	0x0001b391
   1c338:	20000791 	.word	0x20000791
   1c33c:	0001b891 	.word	0x0001b891
   1c340:	20000793 	.word	0x20000793
   1c344:	0001b821 	.word	0x0001b821
   1c348:	20000780 	.word	0x20000780
   1c34c:	0001b74d 	.word	0x0001b74d
   1c350:	0001bba1 	.word	0x0001bba1
   1c354:	2000062c 	.word	0x2000062c
   1c358:	0001bb5d 	.word	0x0001bb5d

0001c35c <start_motor_service>:
		}
	}
}

void start_motor_service(void)
{
   1c35c:	b590      	push	{r4, r7, lr}
   1c35e:	b08b      	sub	sp, #44	; 0x2c
   1c360:	af02      	add	r7, sp, #8
	struct extint_chan_conf config_extint_chan_isr;
	extint_chan_get_config_defaults(&config_extint_chan_isr);
   1c362:	2314      	movs	r3, #20
   1c364:	18fb      	adds	r3, r7, r3
   1c366:	0018      	movs	r0, r3
   1c368:	4bad      	ldr	r3, [pc, #692]	; (1c620 <start_motor_service+0x2c4>)
   1c36a:	4798      	blx	r3
	config_extint_chan_isr.gpio_pin           = PIN_PB11A_EIC_EXTINT11;
   1c36c:	2314      	movs	r3, #20
   1c36e:	18fb      	adds	r3, r7, r3
   1c370:	222b      	movs	r2, #43	; 0x2b
   1c372:	601a      	str	r2, [r3, #0]
	config_extint_chan_isr.gpio_pin_mux       = MUX_PB11A_EIC_EXTINT11;
   1c374:	2314      	movs	r3, #20
   1c376:	18fb      	adds	r3, r7, r3
   1c378:	2200      	movs	r2, #0
   1c37a:	605a      	str	r2, [r3, #4]
	config_extint_chan_isr.gpio_pin_pull      = EXTINT_PULL_UP;
   1c37c:	2314      	movs	r3, #20
   1c37e:	18fb      	adds	r3, r7, r3
   1c380:	2201      	movs	r2, #1
   1c382:	721a      	strb	r2, [r3, #8]
	config_extint_chan_isr.detection_criteria = EXTINT_DETECT_RISING;
   1c384:	2314      	movs	r3, #20
   1c386:	18fb      	adds	r3, r7, r3
   1c388:	2201      	movs	r2, #1
   1c38a:	72da      	strb	r2, [r3, #11]
	config_extint_chan_isr.wake_if_sleeping   = false;
   1c38c:	2314      	movs	r3, #20
   1c38e:	18fb      	adds	r3, r7, r3
   1c390:	2200      	movs	r2, #0
   1c392:	725a      	strb	r2, [r3, #9]
	extint_chan_set_config(11, &config_extint_chan_isr);
   1c394:	2314      	movs	r3, #20
   1c396:	18fb      	adds	r3, r7, r3
   1c398:	0019      	movs	r1, r3
   1c39a:	200b      	movs	r0, #11
   1c39c:	4ba1      	ldr	r3, [pc, #644]	; (1c624 <start_motor_service+0x2c8>)
   1c39e:	4798      	blx	r3
	
	extint_register_callback(PR2_ISR,11,EXTINT_CALLBACK_TYPE_DETECT);
   1c3a0:	4ba1      	ldr	r3, [pc, #644]	; (1c628 <start_motor_service+0x2cc>)
   1c3a2:	2200      	movs	r2, #0
   1c3a4:	210b      	movs	r1, #11
   1c3a6:	0018      	movs	r0, r3
   1c3a8:	4ba0      	ldr	r3, [pc, #640]	; (1c62c <start_motor_service+0x2d0>)
   1c3aa:	4798      	blx	r3
	extint_chan_enable_callback(11,EXTINT_CALLBACK_TYPE_DETECT);
   1c3ac:	2100      	movs	r1, #0
   1c3ae:	200b      	movs	r0, #11
   1c3b0:	4b9f      	ldr	r3, [pc, #636]	; (1c630 <start_motor_service+0x2d4>)
   1c3b2:	4798      	blx	r3
	
	struct port_config pin_confg;
	port_get_config_defaults(&pin_confg);
   1c3b4:	2310      	movs	r3, #16
   1c3b6:	18fb      	adds	r3, r7, r3
   1c3b8:	0018      	movs	r0, r3
   1c3ba:	4b9e      	ldr	r3, [pc, #632]	; (1c634 <start_motor_service+0x2d8>)
   1c3bc:	4798      	blx	r3
	pin_confg.direction = PORT_PIN_DIR_INPUT;
   1c3be:	2310      	movs	r3, #16
   1c3c0:	18fb      	adds	r3, r7, r3
   1c3c2:	2200      	movs	r2, #0
   1c3c4:	701a      	strb	r2, [r3, #0]
	pin_confg.input_pull = PORT_PIN_PULL_UP;
   1c3c6:	2310      	movs	r3, #16
   1c3c8:	18fb      	adds	r3, r7, r3
   1c3ca:	2201      	movs	r2, #1
   1c3cc:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(PR1_PIN, &pin_confg);
   1c3ce:	2310      	movs	r3, #16
   1c3d0:	18fb      	adds	r3, r7, r3
   1c3d2:	0019      	movs	r1, r3
   1c3d4:	202a      	movs	r0, #42	; 0x2a
   1c3d6:	4b98      	ldr	r3, [pc, #608]	; (1c638 <start_motor_service+0x2dc>)
   1c3d8:	4798      	blx	r3
	
	//Transferring the below statement from LCD_SERVICE to here, as it solves the problem of the device hanging.
	// Whenever xSemaphoreTake is executed on xADC_Semaphore in task other than which xADC_Semaphore is defined in, than the MCU hangs.
	vSemaphoreCreateBinary(xADC_Semaphore);
   1c3da:	2203      	movs	r2, #3
   1c3dc:	2100      	movs	r1, #0
   1c3de:	2001      	movs	r0, #1
   1c3e0:	4b96      	ldr	r3, [pc, #600]	; (1c63c <start_motor_service+0x2e0>)
   1c3e2:	4798      	blx	r3
   1c3e4:	0002      	movs	r2, r0
   1c3e6:	4b96      	ldr	r3, [pc, #600]	; (1c640 <start_motor_service+0x2e4>)
   1c3e8:	601a      	str	r2, [r3, #0]
   1c3ea:	4b95      	ldr	r3, [pc, #596]	; (1c640 <start_motor_service+0x2e4>)
   1c3ec:	681b      	ldr	r3, [r3, #0]
   1c3ee:	2b00      	cmp	r3, #0
   1c3f0:	d006      	beq.n	1c400 <start_motor_service+0xa4>
   1c3f2:	4b93      	ldr	r3, [pc, #588]	; (1c640 <start_motor_service+0x2e4>)
   1c3f4:	6818      	ldr	r0, [r3, #0]
   1c3f6:	2300      	movs	r3, #0
   1c3f8:	2200      	movs	r2, #0
   1c3fa:	2100      	movs	r1, #0
   1c3fc:	4c91      	ldr	r4, [pc, #580]	; (1c644 <start_motor_service+0x2e8>)
   1c3fe:	47a0      	blx	r4
	
	vSemaphoreCreateBinary(xButton_Semaphore);
   1c400:	2203      	movs	r2, #3
   1c402:	2100      	movs	r1, #0
   1c404:	2001      	movs	r0, #1
   1c406:	4b8d      	ldr	r3, [pc, #564]	; (1c63c <start_motor_service+0x2e0>)
   1c408:	4798      	blx	r3
   1c40a:	0002      	movs	r2, r0
   1c40c:	4b8e      	ldr	r3, [pc, #568]	; (1c648 <start_motor_service+0x2ec>)
   1c40e:	601a      	str	r2, [r3, #0]
   1c410:	4b8d      	ldr	r3, [pc, #564]	; (1c648 <start_motor_service+0x2ec>)
   1c412:	681b      	ldr	r3, [r3, #0]
   1c414:	2b00      	cmp	r3, #0
   1c416:	d006      	beq.n	1c426 <start_motor_service+0xca>
   1c418:	4b8b      	ldr	r3, [pc, #556]	; (1c648 <start_motor_service+0x2ec>)
   1c41a:	6818      	ldr	r0, [r3, #0]
   1c41c:	2300      	movs	r3, #0
   1c41e:	2200      	movs	r2, #0
   1c420:	2100      	movs	r1, #0
   1c422:	4c88      	ldr	r4, [pc, #544]	; (1c644 <start_motor_service+0x2e8>)
   1c424:	47a0      	blx	r4
	
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	struct port_config config_pins;
	port_get_config_defaults(&config_pins);
   1c426:	230c      	movs	r3, #12
   1c428:	18fb      	adds	r3, r7, r3
   1c42a:	0018      	movs	r0, r3
   1c42c:	4b81      	ldr	r3, [pc, #516]	; (1c634 <start_motor_service+0x2d8>)
   1c42e:	4798      	blx	r3
	
	config_pins.direction = PORT_PIN_DIR_OUTPUT;
   1c430:	230c      	movs	r3, #12
   1c432:	18fb      	adds	r3, r7, r3
   1c434:	2201      	movs	r2, #1
   1c436:	701a      	strb	r2, [r3, #0]
	config_pins.input_pull = PORT_PIN_PULL_NONE;
   1c438:	230c      	movs	r3, #12
   1c43a:	18fb      	adds	r3, r7, r3
   1c43c:	2200      	movs	r2, #0
   1c43e:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(START_RELAY_PIN,&config_pins);
   1c440:	230c      	movs	r3, #12
   1c442:	18fb      	adds	r3, r7, r3
   1c444:	0019      	movs	r1, r3
   1c446:	202d      	movs	r0, #45	; 0x2d
   1c448:	4b7b      	ldr	r3, [pc, #492]	; (1c638 <start_motor_service+0x2dc>)
   1c44a:	4798      	blx	r3
	port_pin_set_config(STOP_RELAY_PIN,&config_pins);
   1c44c:	230c      	movs	r3, #12
   1c44e:	18fb      	adds	r3, r7, r3
   1c450:	0019      	movs	r1, r3
   1c452:	202c      	movs	r0, #44	; 0x2c
   1c454:	4b78      	ldr	r3, [pc, #480]	; (1c638 <start_motor_service+0x2dc>)
   1c456:	4798      	blx	r3
	port_pin_set_config(AUTO_ON_LED_PIN,&config_pins);
   1c458:	230c      	movs	r3, #12
   1c45a:	18fb      	adds	r3, r7, r3
   1c45c:	0019      	movs	r1, r3
   1c45e:	2028      	movs	r0, #40	; 0x28
   1c460:	4b75      	ldr	r3, [pc, #468]	; (1c638 <start_motor_service+0x2dc>)
   1c462:	4798      	blx	r3
	port_pin_set_config(THREEPHASE_OK_LED_PIN,&config_pins);
   1c464:	230c      	movs	r3, #12
   1c466:	18fb      	adds	r3, r7, r3
   1c468:	0019      	movs	r1, r3
   1c46a:	2027      	movs	r0, #39	; 0x27
   1c46c:	4b72      	ldr	r3, [pc, #456]	; (1c638 <start_motor_service+0x2dc>)
   1c46e:	4798      	blx	r3
	port_pin_set_config(MOTOR_ON_LED_PIN,&config_pins);
   1c470:	230c      	movs	r3, #12
   1c472:	18fb      	adds	r3, r7, r3
   1c474:	0019      	movs	r1, r3
   1c476:	2005      	movs	r0, #5
   1c478:	4b6f      	ldr	r3, [pc, #444]	; (1c638 <start_motor_service+0x2dc>)
   1c47a:	4798      	blx	r3
	
	AUTO_ON_LED_OFF;
   1c47c:	2101      	movs	r1, #1
   1c47e:	2028      	movs	r0, #40	; 0x28
   1c480:	4b72      	ldr	r3, [pc, #456]	; (1c64c <start_motor_service+0x2f0>)
   1c482:	4798      	blx	r3
	MOTOR_ON_LED_OFF;
   1c484:	2101      	movs	r1, #1
   1c486:	2005      	movs	r0, #5
   1c488:	4b70      	ldr	r3, [pc, #448]	; (1c64c <start_motor_service+0x2f0>)
   1c48a:	4798      	blx	r3
	THREEPHASE_OK_LED_OFF;
   1c48c:	2101      	movs	r1, #1
   1c48e:	2027      	movs	r0, #39	; 0x27
   1c490:	4b6e      	ldr	r3, [pc, #440]	; (1c64c <start_motor_service+0x2f0>)
   1c492:	4798      	blx	r3
	//port_pin_set_config(PIN_MOTOR_FEEDBACK,&config_pins);
	
	
	
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
   1c494:	003b      	movs	r3, r7
   1c496:	0018      	movs	r0, r3
   1c498:	4b61      	ldr	r3, [pc, #388]	; (1c620 <start_motor_service+0x2c4>)
   1c49a:	4798      	blx	r3
	
	config_extint_chan.gpio_pin = MOTOR_FEEDBACK_EIC_PIN;
   1c49c:	003b      	movs	r3, r7
   1c49e:	222e      	movs	r2, #46	; 0x2e
   1c4a0:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = MOTOR_FEEDBACK_EIC_MUX;
   1c4a2:	003b      	movs	r3, r7
   1c4a4:	2200      	movs	r2, #0
   1c4a6:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_NONE;
   1c4a8:	003b      	movs	r3, r7
   1c4aa:	2200      	movs	r2, #0
   1c4ac:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
   1c4ae:	003b      	movs	r3, r7
   1c4b0:	2203      	movs	r2, #3
   1c4b2:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(MOTOR_FEEDBACK_EIC_LINE, &config_extint_chan);
   1c4b4:	003b      	movs	r3, r7
   1c4b6:	0019      	movs	r1, r3
   1c4b8:	200e      	movs	r0, #14
   1c4ba:	4b5a      	ldr	r3, [pc, #360]	; (1c624 <start_motor_service+0x2c8>)
   1c4bc:	4798      	blx	r3
	
	extint_chan_enable_callback(MOTOR_FEEDBACK_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1c4be:	2100      	movs	r1, #0
   1c4c0:	200e      	movs	r0, #14
   1c4c2:	4b5b      	ldr	r3, [pc, #364]	; (1c630 <start_motor_service+0x2d4>)
   1c4c4:	4798      	blx	r3
	extint_register_callback(motor_feedback_callback,MOTOR_FEEDBACK_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1c4c6:	4b62      	ldr	r3, [pc, #392]	; (1c650 <start_motor_service+0x2f4>)
   1c4c8:	2200      	movs	r2, #0
   1c4ca:	210e      	movs	r1, #14
   1c4cc:	0018      	movs	r0, r3
   1c4ce:	4b57      	ldr	r3, [pc, #348]	; (1c62c <start_motor_service+0x2d0>)
   1c4d0:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	
	config_extint_chan.gpio_pin = START_BUTTON_EIC_PIN;
   1c4d2:	003b      	movs	r3, r7
   1c4d4:	2226      	movs	r2, #38	; 0x26
   1c4d6:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = START_BUTTON_EIC_MUX;
   1c4d8:	003b      	movs	r3, r7
   1c4da:	2200      	movs	r2, #0
   1c4dc:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1c4de:	003b      	movs	r3, r7
   1c4e0:	2201      	movs	r2, #1
   1c4e2:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1c4e4:	003b      	movs	r3, r7
   1c4e6:	2202      	movs	r2, #2
   1c4e8:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(START_BUTTON_EIC_LINE, &config_extint_chan);
   1c4ea:	003b      	movs	r3, r7
   1c4ec:	0019      	movs	r1, r3
   1c4ee:	2006      	movs	r0, #6
   1c4f0:	4b4c      	ldr	r3, [pc, #304]	; (1c624 <start_motor_service+0x2c8>)
   1c4f2:	4798      	blx	r3
	
	extint_chan_enable_callback(START_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1c4f4:	2100      	movs	r1, #0
   1c4f6:	2006      	movs	r0, #6
   1c4f8:	4b4d      	ldr	r3, [pc, #308]	; (1c630 <start_motor_service+0x2d4>)
   1c4fa:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,START_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1c4fc:	4b55      	ldr	r3, [pc, #340]	; (1c654 <start_motor_service+0x2f8>)
   1c4fe:	2200      	movs	r2, #0
   1c500:	2106      	movs	r1, #6
   1c502:	0018      	movs	r0, r3
   1c504:	4b49      	ldr	r3, [pc, #292]	; (1c62c <start_motor_service+0x2d0>)
   1c506:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_extint_chan.gpio_pin = STOP_BUTTON_EIC_PIN;
   1c508:	003b      	movs	r3, r7
   1c50a:	2225      	movs	r2, #37	; 0x25
   1c50c:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = STOP_BUTTON_EIC_MUX;
   1c50e:	003b      	movs	r3, r7
   1c510:	2200      	movs	r2, #0
   1c512:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1c514:	003b      	movs	r3, r7
   1c516:	2201      	movs	r2, #1
   1c518:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1c51a:	003b      	movs	r3, r7
   1c51c:	2202      	movs	r2, #2
   1c51e:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(STOP_BUTTON_EIC_LINE, &config_extint_chan);
   1c520:	003b      	movs	r3, r7
   1c522:	0019      	movs	r1, r3
   1c524:	2005      	movs	r0, #5
   1c526:	4b3f      	ldr	r3, [pc, #252]	; (1c624 <start_motor_service+0x2c8>)
   1c528:	4798      	blx	r3
	extint_chan_enable_callback(STOP_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1c52a:	2100      	movs	r1, #0
   1c52c:	2005      	movs	r0, #5
   1c52e:	4b40      	ldr	r3, [pc, #256]	; (1c630 <start_motor_service+0x2d4>)
   1c530:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,STOP_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1c532:	4b48      	ldr	r3, [pc, #288]	; (1c654 <start_motor_service+0x2f8>)
   1c534:	2200      	movs	r2, #0
   1c536:	2105      	movs	r1, #5
   1c538:	0018      	movs	r0, r3
   1c53a:	4b3c      	ldr	r3, [pc, #240]	; (1c62c <start_motor_service+0x2d0>)
   1c53c:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_extint_chan.gpio_pin = AUTO_BUTTON_EIC_PIN;
   1c53e:	003b      	movs	r3, r7
   1c540:	221c      	movs	r2, #28
   1c542:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = AUTO_BUTTON_EIC_MUX;
   1c544:	003b      	movs	r3, r7
   1c546:	2200      	movs	r2, #0
   1c548:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1c54a:	003b      	movs	r3, r7
   1c54c:	2201      	movs	r2, #1
   1c54e:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1c550:	003b      	movs	r3, r7
   1c552:	2202      	movs	r2, #2
   1c554:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(AUTO_BUTTON_EIC_LINE, &config_extint_chan);
   1c556:	003b      	movs	r3, r7
   1c558:	0019      	movs	r1, r3
   1c55a:	2008      	movs	r0, #8
   1c55c:	4b31      	ldr	r3, [pc, #196]	; (1c624 <start_motor_service+0x2c8>)
   1c55e:	4798      	blx	r3
	extint_chan_enable_callback(AUTO_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1c560:	2100      	movs	r1, #0
   1c562:	2008      	movs	r0, #8
   1c564:	4b32      	ldr	r3, [pc, #200]	; (1c630 <start_motor_service+0x2d4>)
   1c566:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,AUTO_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1c568:	4b3a      	ldr	r3, [pc, #232]	; (1c654 <start_motor_service+0x2f8>)
   1c56a:	2200      	movs	r2, #0
   1c56c:	2108      	movs	r1, #8
   1c56e:	0018      	movs	r0, r3
   1c570:	4b2e      	ldr	r3, [pc, #184]	; (1c62c <start_motor_service+0x2d0>)
   1c572:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_extint_chan.gpio_pin = LCD_SHOW_BUTTON_EIC_PIN;
   1c574:	003b      	movs	r3, r7
   1c576:	2229      	movs	r2, #41	; 0x29
   1c578:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = LCD_SHOW_BUTTON_EIC_MUX;
   1c57a:	003b      	movs	r3, r7
   1c57c:	2200      	movs	r2, #0
   1c57e:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1c580:	003b      	movs	r3, r7
   1c582:	2201      	movs	r2, #1
   1c584:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1c586:	003b      	movs	r3, r7
   1c588:	2202      	movs	r2, #2
   1c58a:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(LCD_SHOW_BUTTON_EIC_LINE, &config_extint_chan);
   1c58c:	003b      	movs	r3, r7
   1c58e:	0019      	movs	r1, r3
   1c590:	2009      	movs	r0, #9
   1c592:	4b24      	ldr	r3, [pc, #144]	; (1c624 <start_motor_service+0x2c8>)
   1c594:	4798      	blx	r3
	extint_chan_enable_callback(LCD_SHOW_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1c596:	2100      	movs	r1, #0
   1c598:	2009      	movs	r0, #9
   1c59a:	4b25      	ldr	r3, [pc, #148]	; (1c630 <start_motor_service+0x2d4>)
   1c59c:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,LCD_SHOW_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1c59e:	4b2d      	ldr	r3, [pc, #180]	; (1c654 <start_motor_service+0x2f8>)
   1c5a0:	2200      	movs	r2, #0
   1c5a2:	2109      	movs	r1, #9
   1c5a4:	0018      	movs	r0, r3
   1c5a6:	4b21      	ldr	r3, [pc, #132]	; (1c62c <start_motor_service+0x2d0>)
   1c5a8:	4798      	blx	r3
	////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	
	xTaskCreate(vTask_10ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,NULL);
   1c5aa:	482b      	ldr	r0, [pc, #172]	; (1c658 <start_motor_service+0x2fc>)
   1c5ac:	2300      	movs	r3, #0
   1c5ae:	9301      	str	r3, [sp, #4]
   1c5b0:	2301      	movs	r3, #1
   1c5b2:	9300      	str	r3, [sp, #0]
   1c5b4:	2300      	movs	r3, #0
   1c5b6:	2282      	movs	r2, #130	; 0x82
   1c5b8:	2100      	movs	r1, #0
   1c5ba:	4c28      	ldr	r4, [pc, #160]	; (1c65c <start_motor_service+0x300>)
   1c5bc:	47a0      	blx	r4
	xTaskCreate(vTask_100ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,NULL);
   1c5be:	4828      	ldr	r0, [pc, #160]	; (1c660 <start_motor_service+0x304>)
   1c5c0:	2300      	movs	r3, #0
   1c5c2:	9301      	str	r3, [sp, #4]
   1c5c4:	2301      	movs	r3, #1
   1c5c6:	9300      	str	r3, [sp, #0]
   1c5c8:	2300      	movs	r3, #0
   1c5ca:	2282      	movs	r2, #130	; 0x82
   1c5cc:	2100      	movs	r1, #0
   1c5ce:	4c23      	ldr	r4, [pc, #140]	; (1c65c <start_motor_service+0x300>)
   1c5d0:	47a0      	blx	r4
	xTaskCreate(vTask_50ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,&fiftymsTask);
   1c5d2:	4824      	ldr	r0, [pc, #144]	; (1c664 <start_motor_service+0x308>)
   1c5d4:	4b24      	ldr	r3, [pc, #144]	; (1c668 <start_motor_service+0x30c>)
   1c5d6:	9301      	str	r3, [sp, #4]
   1c5d8:	2301      	movs	r3, #1
   1c5da:	9300      	str	r3, [sp, #0]
   1c5dc:	2300      	movs	r3, #0
   1c5de:	2282      	movs	r2, #130	; 0x82
   1c5e0:	2100      	movs	r1, #0
   1c5e2:	4c1e      	ldr	r4, [pc, #120]	; (1c65c <start_motor_service+0x300>)
   1c5e4:	47a0      	blx	r4
	
	if(factory_settings_parameter_struct.ENABLE_WATER)
   1c5e6:	4b21      	ldr	r3, [pc, #132]	; (1c66c <start_motor_service+0x310>)
   1c5e8:	795b      	ldrb	r3, [r3, #5]
   1c5ea:	2b00      	cmp	r3, #0
   1c5ec:	d00a      	beq.n	1c604 <start_motor_service+0x2a8>
	{
		xTaskCreate(Water_Level_Task,NULL,(uint16_t)700,NULL,1,NULL);
   1c5ee:	23af      	movs	r3, #175	; 0xaf
   1c5f0:	009a      	lsls	r2, r3, #2
   1c5f2:	481f      	ldr	r0, [pc, #124]	; (1c670 <start_motor_service+0x314>)
   1c5f4:	2300      	movs	r3, #0
   1c5f6:	9301      	str	r3, [sp, #4]
   1c5f8:	2301      	movs	r3, #1
   1c5fa:	9300      	str	r3, [sp, #0]
   1c5fc:	2300      	movs	r3, #0
   1c5fe:	2100      	movs	r1, #0
   1c600:	4c16      	ldr	r4, [pc, #88]	; (1c65c <start_motor_service+0x300>)
   1c602:	47a0      	blx	r4
	}
	
	xTaskCreate(vTask_MOTORCONTROL,NULL,(uint16_t)750,NULL,1, &motorTask);
   1c604:	4a1b      	ldr	r2, [pc, #108]	; (1c674 <start_motor_service+0x318>)
   1c606:	481c      	ldr	r0, [pc, #112]	; (1c678 <start_motor_service+0x31c>)
   1c608:	4b1c      	ldr	r3, [pc, #112]	; (1c67c <start_motor_service+0x320>)
   1c60a:	9301      	str	r3, [sp, #4]
   1c60c:	2301      	movs	r3, #1
   1c60e:	9300      	str	r3, [sp, #0]
   1c610:	2300      	movs	r3, #0
   1c612:	2100      	movs	r1, #0
   1c614:	4c11      	ldr	r4, [pc, #68]	; (1c65c <start_motor_service+0x300>)
   1c616:	47a0      	blx	r4

}
   1c618:	46c0      	nop			; (mov r8, r8)
   1c61a:	46bd      	mov	sp, r7
   1c61c:	b009      	add	sp, #36	; 0x24
   1c61e:	bd90      	pop	{r4, r7, pc}
   1c620:	0001e005 	.word	0x0001e005
   1c624:	0001e039 	.word	0x0001e039
   1c628:	0001a145 	.word	0x0001a145
   1c62c:	000224fd 	.word	0x000224fd
   1c630:	00022561 	.word	0x00022561
   1c634:	000190cd 	.word	0x000190cd
   1c638:	00023071 	.word	0x00023071
   1c63c:	0001f185 	.word	0x0001f185
   1c640:	20000238 	.word	0x20000238
   1c644:	0001f241 	.word	0x0001f241
   1c648:	2000023c 	.word	0x2000023c
   1c64c:	00019135 	.word	0x00019135
   1c650:	0001c989 	.word	0x0001c989
   1c654:	0001be71 	.word	0x0001be71
   1c658:	0001a35d 	.word	0x0001a35d
   1c65c:	0001fca9 	.word	0x0001fca9
   1c660:	0001a3c9 	.word	0x0001a3c9
   1c664:	0001cc99 	.word	0x0001cc99
   1c668:	20000244 	.word	0x20000244
   1c66c:	2000062c 	.word	0x2000062c
   1c670:	000195bd 	.word	0x000195bd
   1c674:	000002ee 	.word	0x000002ee
   1c678:	0001be85 	.word	0x0001be85
   1c67c:	20000240 	.word	0x20000240

0001c680 <motor_checkSleepElligible>:

bool motor_checkSleepElligible(void)
{
   1c680:	b580      	push	{r7, lr}
   1c682:	b082      	sub	sp, #8
   1c684:	af00      	add	r7, sp, #0
	uint8_t j = 0;
   1c686:	1dfb      	adds	r3, r7, #7
   1c688:	2200      	movs	r2, #0
   1c68a:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_WATER)
   1c68c:	4b4c      	ldr	r3, [pc, #304]	; (1c7c0 <motor_checkSleepElligible+0x140>)
   1c68e:	795b      	ldrb	r3, [r3, #5]
   1c690:	2b00      	cmp	r3, #0
   1c692:	d00b      	beq.n	1c6ac <motor_checkSleepElligible+0x2c>
	{
		if (factory_settings_parameter_struct.ENABLE_GP)
   1c694:	4b4a      	ldr	r3, [pc, #296]	; (1c7c0 <motor_checkSleepElligible+0x140>)
   1c696:	791b      	ldrb	r3, [r3, #4]
   1c698:	2b00      	cmp	r3, #0
   1c69a:	d003      	beq.n	1c6a4 <motor_checkSleepElligible+0x24>
		{
			j = 19;
   1c69c:	1dfb      	adds	r3, r7, #7
   1c69e:	2213      	movs	r2, #19
   1c6a0:	701a      	strb	r2, [r3, #0]
   1c6a2:	e00e      	b.n	1c6c2 <motor_checkSleepElligible+0x42>
		}
		else
		{
			j = 17;
   1c6a4:	1dfb      	adds	r3, r7, #7
   1c6a6:	2211      	movs	r2, #17
   1c6a8:	701a      	strb	r2, [r3, #0]
   1c6aa:	e00a      	b.n	1c6c2 <motor_checkSleepElligible+0x42>
		}
	}
	else
	{
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1c6ac:	4b44      	ldr	r3, [pc, #272]	; (1c7c0 <motor_checkSleepElligible+0x140>)
   1c6ae:	785b      	ldrb	r3, [r3, #1]
   1c6b0:	2b00      	cmp	r3, #0
   1c6b2:	d003      	beq.n	1c6bc <motor_checkSleepElligible+0x3c>
		{
			j = 14;
   1c6b4:	1dfb      	adds	r3, r7, #7
   1c6b6:	220e      	movs	r2, #14
   1c6b8:	701a      	strb	r2, [r3, #0]
   1c6ba:	e002      	b.n	1c6c2 <motor_checkSleepElligible+0x42>
		}
		else
		{
			j = 12;
   1c6bc:	1dfb      	adds	r3, r7, #7
   1c6be:	220c      	movs	r2, #12
   1c6c0:	701a      	strb	r2, [r3, #0]
		}
	}
	
	bool event=true;
   1c6c2:	1dbb      	adds	r3, r7, #6
   1c6c4:	2201      	movs	r2, #1
   1c6c6:	701a      	strb	r2, [r3, #0]
	while(j--)
   1c6c8:	e00c      	b.n	1c6e4 <motor_checkSleepElligible+0x64>
	{
		if(!simEventTemp[j])
   1c6ca:	1dfb      	adds	r3, r7, #7
   1c6cc:	781b      	ldrb	r3, [r3, #0]
   1c6ce:	4a3d      	ldr	r2, [pc, #244]	; (1c7c4 <motor_checkSleepElligible+0x144>)
   1c6d0:	5cd3      	ldrb	r3, [r2, r3]
   1c6d2:	2201      	movs	r2, #1
   1c6d4:	4053      	eors	r3, r2
   1c6d6:	b2db      	uxtb	r3, r3
   1c6d8:	2b00      	cmp	r3, #0
   1c6da:	d003      	beq.n	1c6e4 <motor_checkSleepElligible+0x64>
		{
			event=false;
   1c6dc:	1dbb      	adds	r3, r7, #6
   1c6de:	2200      	movs	r2, #0
   1c6e0:	701a      	strb	r2, [r3, #0]
			break;
   1c6e2:	e006      	b.n	1c6f2 <motor_checkSleepElligible+0x72>
	while(j--)
   1c6e4:	1dfb      	adds	r3, r7, #7
   1c6e6:	781b      	ldrb	r3, [r3, #0]
   1c6e8:	1dfa      	adds	r2, r7, #7
   1c6ea:	1e59      	subs	r1, r3, #1
   1c6ec:	7011      	strb	r1, [r2, #0]
   1c6ee:	2b00      	cmp	r3, #0
   1c6f0:	d1eb      	bne.n	1c6ca <motor_checkSleepElligible+0x4a>
		}
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
   1c6f2:	4b33      	ldr	r3, [pc, #204]	; (1c7c0 <motor_checkSleepElligible+0x140>)
   1c6f4:	78db      	ldrb	r3, [r3, #3]
   1c6f6:	2b00      	cmp	r3, #0
   1c6f8:	d00e      	beq.n	1c718 <motor_checkSleepElligible+0x98>
	{
		if(event && m2mEvent_arr[0] == ME_WAITREGISTER || m2mEvent_arr[1]==ME_WAITREGISTER)
   1c6fa:	1dbb      	adds	r3, r7, #6
   1c6fc:	781b      	ldrb	r3, [r3, #0]
   1c6fe:	2b00      	cmp	r3, #0
   1c700:	d003      	beq.n	1c70a <motor_checkSleepElligible+0x8a>
   1c702:	4b31      	ldr	r3, [pc, #196]	; (1c7c8 <motor_checkSleepElligible+0x148>)
   1c704:	781b      	ldrb	r3, [r3, #0]
   1c706:	2b01      	cmp	r3, #1
   1c708:	d003      	beq.n	1c712 <motor_checkSleepElligible+0x92>
   1c70a:	4b2f      	ldr	r3, [pc, #188]	; (1c7c8 <motor_checkSleepElligible+0x148>)
   1c70c:	785b      	ldrb	r3, [r3, #1]
   1c70e:	2b01      	cmp	r3, #1
   1c710:	d102      	bne.n	1c718 <motor_checkSleepElligible+0x98>
		{
			event = false;
   1c712:	1dbb      	adds	r3, r7, #6
   1c714:	2200      	movs	r2, #0
   1c716:	701a      	strb	r2, [r3, #0]
		}
	}
	
	return ((getAllPhaseState()==AC_OFF) && !eventOccured && event && !waitStableLineOn && !singlePhasingTimerOn
   1c718:	4b2c      	ldr	r3, [pc, #176]	; (1c7cc <motor_checkSleepElligible+0x14c>)
   1c71a:	4798      	blx	r3
   1c71c:	1e03      	subs	r3, r0, #0
	&& !startTimerOn && !startSequenceOn && !stopSequenceOn && !firstEvent && !buttonEventOccured && (lastButtonEvent==0));
   1c71e:	d145      	bne.n	1c7ac <motor_checkSleepElligible+0x12c>
	return ((getAllPhaseState()==AC_OFF) && !eventOccured && event && !waitStableLineOn && !singlePhasingTimerOn
   1c720:	4b2b      	ldr	r3, [pc, #172]	; (1c7d0 <motor_checkSleepElligible+0x150>)
   1c722:	781b      	ldrb	r3, [r3, #0]
   1c724:	b2db      	uxtb	r3, r3
   1c726:	2201      	movs	r2, #1
   1c728:	4053      	eors	r3, r2
   1c72a:	b2db      	uxtb	r3, r3
   1c72c:	2b00      	cmp	r3, #0
   1c72e:	d03d      	beq.n	1c7ac <motor_checkSleepElligible+0x12c>
   1c730:	1dbb      	adds	r3, r7, #6
   1c732:	781b      	ldrb	r3, [r3, #0]
   1c734:	2b00      	cmp	r3, #0
   1c736:	d039      	beq.n	1c7ac <motor_checkSleepElligible+0x12c>
   1c738:	4b26      	ldr	r3, [pc, #152]	; (1c7d4 <motor_checkSleepElligible+0x154>)
   1c73a:	781b      	ldrb	r3, [r3, #0]
   1c73c:	2201      	movs	r2, #1
   1c73e:	4053      	eors	r3, r2
   1c740:	b2db      	uxtb	r3, r3
   1c742:	2b00      	cmp	r3, #0
   1c744:	d032      	beq.n	1c7ac <motor_checkSleepElligible+0x12c>
   1c746:	4b24      	ldr	r3, [pc, #144]	; (1c7d8 <motor_checkSleepElligible+0x158>)
   1c748:	781b      	ldrb	r3, [r3, #0]
   1c74a:	2201      	movs	r2, #1
   1c74c:	4053      	eors	r3, r2
   1c74e:	b2db      	uxtb	r3, r3
   1c750:	2b00      	cmp	r3, #0
   1c752:	d02b      	beq.n	1c7ac <motor_checkSleepElligible+0x12c>
	&& !startTimerOn && !startSequenceOn && !stopSequenceOn && !firstEvent && !buttonEventOccured && (lastButtonEvent==0));
   1c754:	4b21      	ldr	r3, [pc, #132]	; (1c7dc <motor_checkSleepElligible+0x15c>)
   1c756:	781b      	ldrb	r3, [r3, #0]
   1c758:	2201      	movs	r2, #1
   1c75a:	4053      	eors	r3, r2
   1c75c:	b2db      	uxtb	r3, r3
   1c75e:	2b00      	cmp	r3, #0
   1c760:	d024      	beq.n	1c7ac <motor_checkSleepElligible+0x12c>
   1c762:	4b1f      	ldr	r3, [pc, #124]	; (1c7e0 <motor_checkSleepElligible+0x160>)
   1c764:	781b      	ldrb	r3, [r3, #0]
   1c766:	2201      	movs	r2, #1
   1c768:	4053      	eors	r3, r2
   1c76a:	b2db      	uxtb	r3, r3
   1c76c:	2b00      	cmp	r3, #0
   1c76e:	d01d      	beq.n	1c7ac <motor_checkSleepElligible+0x12c>
   1c770:	4b1c      	ldr	r3, [pc, #112]	; (1c7e4 <motor_checkSleepElligible+0x164>)
   1c772:	781b      	ldrb	r3, [r3, #0]
   1c774:	2201      	movs	r2, #1
   1c776:	4053      	eors	r3, r2
   1c778:	b2db      	uxtb	r3, r3
   1c77a:	2b00      	cmp	r3, #0
   1c77c:	d016      	beq.n	1c7ac <motor_checkSleepElligible+0x12c>
   1c77e:	4b1a      	ldr	r3, [pc, #104]	; (1c7e8 <motor_checkSleepElligible+0x168>)
   1c780:	781b      	ldrb	r3, [r3, #0]
   1c782:	b2db      	uxtb	r3, r3
   1c784:	2201      	movs	r2, #1
   1c786:	4053      	eors	r3, r2
   1c788:	b2db      	uxtb	r3, r3
   1c78a:	2b00      	cmp	r3, #0
   1c78c:	d00e      	beq.n	1c7ac <motor_checkSleepElligible+0x12c>
   1c78e:	4b17      	ldr	r3, [pc, #92]	; (1c7ec <motor_checkSleepElligible+0x16c>)
   1c790:	781b      	ldrb	r3, [r3, #0]
   1c792:	b2db      	uxtb	r3, r3
   1c794:	2201      	movs	r2, #1
   1c796:	4053      	eors	r3, r2
   1c798:	b2db      	uxtb	r3, r3
   1c79a:	2b00      	cmp	r3, #0
   1c79c:	d006      	beq.n	1c7ac <motor_checkSleepElligible+0x12c>
   1c79e:	4b14      	ldr	r3, [pc, #80]	; (1c7f0 <motor_checkSleepElligible+0x170>)
   1c7a0:	781b      	ldrb	r3, [r3, #0]
   1c7a2:	b2db      	uxtb	r3, r3
   1c7a4:	2b00      	cmp	r3, #0
   1c7a6:	d101      	bne.n	1c7ac <motor_checkSleepElligible+0x12c>
   1c7a8:	2301      	movs	r3, #1
   1c7aa:	e000      	b.n	1c7ae <motor_checkSleepElligible+0x12e>
   1c7ac:	2300      	movs	r3, #0
   1c7ae:	1c1a      	adds	r2, r3, #0
   1c7b0:	2301      	movs	r3, #1
   1c7b2:	4013      	ands	r3, r2
   1c7b4:	b2db      	uxtb	r3, r3
	
}
   1c7b6:	0018      	movs	r0, r3
   1c7b8:	46bd      	mov	sp, r7
   1c7ba:	b002      	add	sp, #8
   1c7bc:	bd80      	pop	{r7, pc}
   1c7be:	46c0      	nop			; (mov r8, r8)
   1c7c0:	2000062c 	.word	0x2000062c
   1c7c4:	2000070c 	.word	0x2000070c
   1c7c8:	200007bc 	.word	0x200007bc
   1c7cc:	0001ac35 	.word	0x0001ac35
   1c7d0:	20000722 	.word	0x20000722
   1c7d4:	2000080d 	.word	0x2000080d
   1c7d8:	20000789 	.word	0x20000789
   1c7dc:	20000792 	.word	0x20000792
   1c7e0:	20000791 	.word	0x20000791
   1c7e4:	20000780 	.word	0x20000780
   1c7e8:	2000076e 	.word	0x2000076e
   1c7ec:	20000797 	.word	0x20000797
   1c7f0:	20000778 	.word	0x20000778

0001c7f4 <configure_ac>:


void configure_ac(void)
{
   1c7f4:	b580      	push	{r7, lr}
   1c7f6:	b08a      	sub	sp, #40	; 0x28
   1c7f8:	af00      	add	r7, sp, #0
	struct ac_config conf_ac;
	struct ac_events conf_ac_events = {{0}};
   1c7fa:	231c      	movs	r3, #28
   1c7fc:	18fb      	adds	r3, r7, r3
   1c7fe:	0018      	movs	r0, r3
   1c800:	2305      	movs	r3, #5
   1c802:	001a      	movs	r2, r3
   1c804:	2100      	movs	r1, #0
   1c806:	4b2c      	ldr	r3, [pc, #176]	; (1c8b8 <configure_ac+0xc4>)
   1c808:	4798      	blx	r3
	
	struct ac_chan_config conf_ac_channel;
	struct port_config pin_conf;
	
	ac_get_config_defaults(&conf_ac);
   1c80a:	2324      	movs	r3, #36	; 0x24
   1c80c:	18fb      	adds	r3, r7, r3
   1c80e:	0018      	movs	r0, r3
   1c810:	4b2a      	ldr	r3, [pc, #168]	; (1c8bc <configure_ac+0xc8>)
   1c812:	4798      	blx	r3
	conf_ac.run_in_standby[0] = true;
   1c814:	2324      	movs	r3, #36	; 0x24
   1c816:	18fb      	adds	r3, r7, r3
   1c818:	2201      	movs	r2, #1
   1c81a:	701a      	strb	r2, [r3, #0]
	conf_ac.dig_source_generator = GCLK_GENERATOR_6;
   1c81c:	2324      	movs	r3, #36	; 0x24
   1c81e:	18fb      	adds	r3, r7, r3
   1c820:	2206      	movs	r2, #6
   1c822:	705a      	strb	r2, [r3, #1]
	ac_init(&ac_instance, AC, &conf_ac);
   1c824:	2324      	movs	r3, #36	; 0x24
   1c826:	18fa      	adds	r2, r7, r3
   1c828:	4925      	ldr	r1, [pc, #148]	; (1c8c0 <configure_ac+0xcc>)
   1c82a:	4b26      	ldr	r3, [pc, #152]	; (1c8c4 <configure_ac+0xd0>)
   1c82c:	0018      	movs	r0, r3
   1c82e:	4b26      	ldr	r3, [pc, #152]	; (1c8c8 <configure_ac+0xd4>)
   1c830:	4798      	blx	r3
	
	conf_ac_channel.sample_mode = AC_CHAN_MODE_CONTINUOUS;
   1c832:	1d3b      	adds	r3, r7, #4
   1c834:	2200      	movs	r2, #0
   1c836:	701a      	strb	r2, [r3, #0]
	conf_ac_channel.filter = AC_CHAN_FILTER_NONE;
   1c838:	1d3b      	adds	r3, r7, #4
   1c83a:	2200      	movs	r2, #0
   1c83c:	605a      	str	r2, [r3, #4]
	conf_ac_channel.enable_hysteresis = false;
   1c83e:	1d3b      	adds	r3, r7, #4
   1c840:	2200      	movs	r2, #0
   1c842:	721a      	strb	r2, [r3, #8]
	conf_ac_channel.output_mode = AC_CHAN_OUTPUT_INTERNAL;
   1c844:	1d3b      	adds	r3, r7, #4
   1c846:	2200      	movs	r2, #0
   1c848:	60da      	str	r2, [r3, #12]
	conf_ac_channel.positive_input = AC_CHAN_POS_MUX_PIN0;
   1c84a:	1d3b      	adds	r3, r7, #4
   1c84c:	2200      	movs	r2, #0
   1c84e:	821a      	strh	r2, [r3, #16]
	conf_ac_channel.negative_input = AC_CHAN_NEG_MUX_SCALED_VCC;
   1c850:	1d3b      	adds	r3, r7, #4
   1c852:	22a0      	movs	r2, #160	; 0xa0
   1c854:	00d2      	lsls	r2, r2, #3
   1c856:	825a      	strh	r2, [r3, #18]
	/* Detect threshold 0.515625V */
	conf_ac_channel.vcc_scale_factor = 45;
   1c858:	1d3b      	adds	r3, r7, #4
   1c85a:	222d      	movs	r2, #45	; 0x2d
   1c85c:	751a      	strb	r2, [r3, #20]
	conf_ac_channel.interrupt_selection = AC_CHAN_INTERRUPT_SELECTION_TOGGLE;
   1c85e:	1d3b      	adds	r3, r7, #4
   1c860:	2200      	movs	r2, #0
   1c862:	755a      	strb	r2, [r3, #21]
	ac_chan_set_config(&ac_instance, AC_CHAN_CHANNEL_0, &conf_ac_channel);
   1c864:	1d3a      	adds	r2, r7, #4
   1c866:	4b17      	ldr	r3, [pc, #92]	; (1c8c4 <configure_ac+0xd0>)
   1c868:	2100      	movs	r1, #0
   1c86a:	0018      	movs	r0, r3
   1c86c:	4b17      	ldr	r3, [pc, #92]	; (1c8cc <configure_ac+0xd8>)
   1c86e:	4798      	blx	r3
	ac_chan_enable(&ac_instance, AC_CHAN_CHANNEL_0);
   1c870:	4b14      	ldr	r3, [pc, #80]	; (1c8c4 <configure_ac+0xd0>)
   1c872:	2100      	movs	r1, #0
   1c874:	0018      	movs	r0, r3
   1c876:	4b16      	ldr	r3, [pc, #88]	; (1c8d0 <configure_ac+0xdc>)
   1c878:	4798      	blx	r3
	
	conf_ac_events.on_event_sample[0] = true;
   1c87a:	231c      	movs	r3, #28
   1c87c:	18fb      	adds	r3, r7, r3
   1c87e:	2201      	movs	r2, #1
   1c880:	70da      	strb	r2, [r3, #3]
	ac_enable_events(&ac_instance ,&conf_ac_events);
   1c882:	231c      	movs	r3, #28
   1c884:	18fa      	adds	r2, r7, r3
   1c886:	4b0f      	ldr	r3, [pc, #60]	; (1c8c4 <configure_ac+0xd0>)
   1c888:	0011      	movs	r1, r2
   1c88a:	0018      	movs	r0, r3
   1c88c:	4b11      	ldr	r3, [pc, #68]	; (1c8d4 <configure_ac+0xe0>)
   1c88e:	4798      	blx	r3
	
	ac_enable(&ac_instance);
   1c890:	4b0c      	ldr	r3, [pc, #48]	; (1c8c4 <configure_ac+0xd0>)
   1c892:	0018      	movs	r0, r3
   1c894:	4b10      	ldr	r3, [pc, #64]	; (1c8d8 <configure_ac+0xe4>)
   1c896:	4798      	blx	r3
	
	ac_register_callback(&ac_instance, ac_detect_callback,AC_CALLBACK_COMPARATOR_0);
   1c898:	4910      	ldr	r1, [pc, #64]	; (1c8dc <configure_ac+0xe8>)
   1c89a:	4b0a      	ldr	r3, [pc, #40]	; (1c8c4 <configure_ac+0xd0>)
   1c89c:	2200      	movs	r2, #0
   1c89e:	0018      	movs	r0, r3
   1c8a0:	4b0f      	ldr	r3, [pc, #60]	; (1c8e0 <configure_ac+0xec>)
   1c8a2:	4798      	blx	r3
	ac_enable_callback(&ac_instance, AC_CALLBACK_COMPARATOR_0);
   1c8a4:	4b07      	ldr	r3, [pc, #28]	; (1c8c4 <configure_ac+0xd0>)
   1c8a6:	2100      	movs	r1, #0
   1c8a8:	0018      	movs	r0, r3
   1c8aa:	4b0e      	ldr	r3, [pc, #56]	; (1c8e4 <configure_ac+0xf0>)
   1c8ac:	4798      	blx	r3
}
   1c8ae:	46c0      	nop			; (mov r8, r8)
   1c8b0:	46bd      	mov	sp, r7
   1c8b2:	b00a      	add	sp, #40	; 0x28
   1c8b4:	bd80      	pop	{r7, pc}
   1c8b6:	46c0      	nop			; (mov r8, r8)
   1c8b8:	00028f13 	.word	0x00028f13
   1c8bc:	00018a51 	.word	0x00018a51
   1c8c0:	42004400 	.word	0x42004400
   1c8c4:	2000088c 	.word	0x2000088c
   1c8c8:	0001ce2d 	.word	0x0001ce2d
   1c8cc:	0001cf0d 	.word	0x0001cf0d
   1c8d0:	00018ba1 	.word	0x00018ba1
   1c8d4:	00018ac1 	.word	0x00018ac1
   1c8d8:	00018a89 	.word	0x00018a89
   1c8dc:	0001c979 	.word	0x0001c979
   1c8e0:	00022929 	.word	0x00022929
   1c8e4:	00018d09 	.word	0x00018d09

0001c8e8 <configure_rtc>:

void configure_rtc(void)
{
   1c8e8:	b580      	push	{r7, lr}
   1c8ea:	b088      	sub	sp, #32
   1c8ec:	af00      	add	r7, sp, #0
	struct rtc_count_config conf_rtc_count;
	struct rtc_count_events conf_rtc_events = {0};
   1c8ee:	1d3b      	adds	r3, r7, #4
   1c8f0:	0018      	movs	r0, r3
   1c8f2:	230b      	movs	r3, #11
   1c8f4:	001a      	movs	r2, r3
   1c8f6:	2100      	movs	r1, #0
   1c8f8:	4b17      	ldr	r3, [pc, #92]	; (1c958 <configure_rtc+0x70>)
   1c8fa:	4798      	blx	r3
	
	rtc_count_get_config_defaults(&conf_rtc_count);
   1c8fc:	2310      	movs	r3, #16
   1c8fe:	18fb      	adds	r3, r7, r3
   1c900:	0018      	movs	r0, r3
   1c902:	4b16      	ldr	r3, [pc, #88]	; (1c95c <configure_rtc+0x74>)
   1c904:	4798      	blx	r3
	conf_rtc_count.prescaler  = RTC_COUNT_PRESCALER_DIV_1;
   1c906:	2310      	movs	r3, #16
   1c908:	18fb      	adds	r3, r7, r3
   1c90a:	2200      	movs	r2, #0
   1c90c:	801a      	strh	r2, [r3, #0]
	conf_rtc_count.mode       = RTC_COUNT_MODE_16BIT;
   1c90e:	2310      	movs	r3, #16
   1c910:	18fb      	adds	r3, r7, r3
   1c912:	2200      	movs	r2, #0
   1c914:	709a      	strb	r2, [r3, #2]
	conf_rtc_count.continuously_update =  true;
   1c916:	2310      	movs	r3, #16
   1c918:	18fb      	adds	r3, r7, r3
   1c91a:	2201      	movs	r2, #1
   1c91c:	711a      	strb	r2, [r3, #4]
	rtc_count_init(&rtc_instance, RTC, &conf_rtc_count);
   1c91e:	2310      	movs	r3, #16
   1c920:	18fa      	adds	r2, r7, r3
   1c922:	490f      	ldr	r1, [pc, #60]	; (1c960 <configure_rtc+0x78>)
   1c924:	4b0f      	ldr	r3, [pc, #60]	; (1c964 <configure_rtc+0x7c>)
   1c926:	0018      	movs	r0, r3
   1c928:	4b0f      	ldr	r3, [pc, #60]	; (1c968 <configure_rtc+0x80>)
   1c92a:	4798      	blx	r3
	rtc_count_set_period(&rtc_instance, 10);
   1c92c:	4b0d      	ldr	r3, [pc, #52]	; (1c964 <configure_rtc+0x7c>)
   1c92e:	210a      	movs	r1, #10
   1c930:	0018      	movs	r0, r3
   1c932:	4b0e      	ldr	r3, [pc, #56]	; (1c96c <configure_rtc+0x84>)
   1c934:	4798      	blx	r3
	conf_rtc_events.generate_event_on_overflow = true;
   1c936:	1d3b      	adds	r3, r7, #4
   1c938:	2201      	movs	r2, #1
   1c93a:	701a      	strb	r2, [r3, #0]
	
	rtc_count_enable_events(&rtc_instance, &conf_rtc_events);
   1c93c:	1d3a      	adds	r2, r7, #4
   1c93e:	4b09      	ldr	r3, [pc, #36]	; (1c964 <configure_rtc+0x7c>)
   1c940:	0011      	movs	r1, r2
   1c942:	0018      	movs	r0, r3
   1c944:	4b0a      	ldr	r3, [pc, #40]	; (1c970 <configure_rtc+0x88>)
   1c946:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
   1c948:	4b06      	ldr	r3, [pc, #24]	; (1c964 <configure_rtc+0x7c>)
   1c94a:	0018      	movs	r0, r3
   1c94c:	4b09      	ldr	r3, [pc, #36]	; (1c974 <configure_rtc+0x8c>)
   1c94e:	4798      	blx	r3
}
   1c950:	46c0      	nop			; (mov r8, r8)
   1c952:	46bd      	mov	sp, r7
   1c954:	b008      	add	sp, #32
   1c956:	bd80      	pop	{r7, pc}
   1c958:	00028f13 	.word	0x00028f13
   1c95c:	00019211 	.word	0x00019211
   1c960:	40001400 	.word	0x40001400
   1c964:	20000868 	.word	0x20000868
   1c968:	0001e455 	.word	0x0001e455
   1c96c:	0001e571 	.word	0x0001e571
   1c970:	0001926d 	.word	0x0001926d
   1c974:	0001e22d 	.word	0x0001e22d

0001c978 <ac_detect_callback>:

void ac_detect_callback(struct ac_module *const module_inst)
{
   1c978:	b580      	push	{r7, lr}
   1c97a:	b082      	sub	sp, #8
   1c97c:	af00      	add	r7, sp, #0
   1c97e:	6078      	str	r0, [r7, #4]
	;
	//eventOccured = true;
}
   1c980:	46c0      	nop			; (mov r8, r8)
   1c982:	46bd      	mov	sp, r7
   1c984:	b002      	add	sp, #8
   1c986:	bd80      	pop	{r7, pc}

0001c988 <motor_feedback_callback>:

static void motor_feedback_callback(void)
{
   1c988:	b580      	push	{r7, lr}
   1c98a:	af00      	add	r7, sp, #0
	eventOccured = true;
   1c98c:	4b06      	ldr	r3, [pc, #24]	; (1c9a8 <motor_feedback_callback+0x20>)
   1c98e:	2201      	movs	r2, #1
   1c990:	701a      	strb	r2, [r3, #0]
	motorFeedbackEvent=true;
   1c992:	4b06      	ldr	r3, [pc, #24]	; (1c9ac <motor_feedback_callback+0x24>)
   1c994:	2201      	movs	r2, #1
   1c996:	701a      	strb	r2, [r3, #0]
	motorFeedbackEventTime=xTaskGetTickCountFromISR();
   1c998:	4b05      	ldr	r3, [pc, #20]	; (1c9b0 <motor_feedback_callback+0x28>)
   1c99a:	4798      	blx	r3
   1c99c:	0002      	movs	r2, r0
   1c99e:	4b05      	ldr	r3, [pc, #20]	; (1c9b4 <motor_feedback_callback+0x2c>)
   1c9a0:	601a      	str	r2, [r3, #0]
}
   1c9a2:	46c0      	nop			; (mov r8, r8)
   1c9a4:	46bd      	mov	sp, r7
   1c9a6:	bd80      	pop	{r7, pc}
   1c9a8:	20000722 	.word	0x20000722
   1c9ac:	20000782 	.word	0x20000782
   1c9b0:	00020369 	.word	0x00020369
   1c9b4:	2000085c 	.word	0x2000085c

0001c9b8 <configure_event>:

void configure_event(void)
{
   1c9b8:	b580      	push	{r7, lr}
   1c9ba:	b082      	sub	sp, #8
   1c9bc:	af00      	add	r7, sp, #0
	struct events_config conf_event;
	events_get_config_defaults(&conf_event);
   1c9be:	1d3b      	adds	r3, r7, #4
   1c9c0:	0018      	movs	r0, r3
   1c9c2:	4b0d      	ldr	r3, [pc, #52]	; (1c9f8 <configure_event+0x40>)
   1c9c4:	4798      	blx	r3
	conf_event.generator = EVSYS_ID_GEN_RTC_OVF;
   1c9c6:	1d3b      	adds	r3, r7, #4
   1c9c8:	2203      	movs	r2, #3
   1c9ca:	709a      	strb	r2, [r3, #2]
	conf_event.edge_detect = EVENTS_EDGE_DETECT_NONE;
   1c9cc:	1d3b      	adds	r3, r7, #4
   1c9ce:	2200      	movs	r2, #0
   1c9d0:	701a      	strb	r2, [r3, #0]
	conf_event.path       = EVENTS_PATH_ASYNCHRONOUS;
   1c9d2:	1d3b      	adds	r3, r7, #4
   1c9d4:	2202      	movs	r2, #2
   1c9d6:	705a      	strb	r2, [r3, #1]
	
	events_allocate(&resource, &conf_event);
   1c9d8:	1d3a      	adds	r2, r7, #4
   1c9da:	4b08      	ldr	r3, [pc, #32]	; (1c9fc <configure_event+0x44>)
   1c9dc:	0011      	movs	r1, r2
   1c9de:	0018      	movs	r0, r3
   1c9e0:	4b07      	ldr	r3, [pc, #28]	; (1ca00 <configure_event+0x48>)
   1c9e2:	4798      	blx	r3
	events_attach_user(&resource, EVSYS_ID_USER_AC_SOC_0);
   1c9e4:	4b05      	ldr	r3, [pc, #20]	; (1c9fc <configure_event+0x44>)
   1c9e6:	2119      	movs	r1, #25
   1c9e8:	0018      	movs	r0, r3
   1c9ea:	4b06      	ldr	r3, [pc, #24]	; (1ca04 <configure_event+0x4c>)
   1c9ec:	4798      	blx	r3
}
   1c9ee:	46c0      	nop			; (mov r8, r8)
   1c9f0:	46bd      	mov	sp, r7
   1c9f2:	b002      	add	sp, #8
   1c9f4:	bd80      	pop	{r7, pc}
   1c9f6:	46c0      	nop			; (mov r8, r8)
   1c9f8:	000227e9 	.word	0x000227e9
   1c9fc:	20000884 	.word	0x20000884
   1ca00:	00022811 	.word	0x00022811
   1ca04:	000228d9 	.word	0x000228d9

0001ca08 <operateOnButtonEvent>:

void operateOnButtonEvent(void)
{
   1ca08:	b580      	push	{r7, lr}
   1ca0a:	af00      	add	r7, sp, #0
	buttonEventOccured=false;
   1ca0c:	4b28      	ldr	r3, [pc, #160]	; (1cab0 <operateOnButtonEvent+0xa8>)
   1ca0e:	2200      	movs	r2, #0
   1ca10:	701a      	strb	r2, [r3, #0]
	if (START_BUTTON_INPUT_COMES)
   1ca12:	2026      	movs	r0, #38	; 0x26
   1ca14:	4b27      	ldr	r3, [pc, #156]	; (1cab4 <operateOnButtonEvent+0xac>)
   1ca16:	4798      	blx	r3
   1ca18:	0003      	movs	r3, r0
   1ca1a:	001a      	movs	r2, r3
   1ca1c:	2301      	movs	r3, #1
   1ca1e:	4053      	eors	r3, r2
   1ca20:	b2db      	uxtb	r3, r3
   1ca22:	2b00      	cmp	r3, #0
   1ca24:	d008      	beq.n	1ca38 <operateOnButtonEvent+0x30>
	{
		lastPressTime=xTaskGetTickCount();
   1ca26:	4b24      	ldr	r3, [pc, #144]	; (1cab8 <operateOnButtonEvent+0xb0>)
   1ca28:	4798      	blx	r3
   1ca2a:	0002      	movs	r2, r0
   1ca2c:	4b23      	ldr	r3, [pc, #140]	; (1cabc <operateOnButtonEvent+0xb4>)
   1ca2e:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTSTART;
   1ca30:	4b23      	ldr	r3, [pc, #140]	; (1cac0 <operateOnButtonEvent+0xb8>)
   1ca32:	2201      	movs	r2, #1
   1ca34:	701a      	strb	r2, [r3, #0]
	else if(LCDSHOW_BUTTON_INPUT_COMES)
	{
		lastPressTime= xTaskGetTickCount();
		lastButtonEvent=BTNEVENTLCDSHOW;
	}
}
   1ca36:	e037      	b.n	1caa8 <operateOnButtonEvent+0xa0>
	else if (STOP_BUTTON_INPUT_COMES)
   1ca38:	2025      	movs	r0, #37	; 0x25
   1ca3a:	4b1e      	ldr	r3, [pc, #120]	; (1cab4 <operateOnButtonEvent+0xac>)
   1ca3c:	4798      	blx	r3
   1ca3e:	0003      	movs	r3, r0
   1ca40:	001a      	movs	r2, r3
   1ca42:	2301      	movs	r3, #1
   1ca44:	4053      	eors	r3, r2
   1ca46:	b2db      	uxtb	r3, r3
   1ca48:	2b00      	cmp	r3, #0
   1ca4a:	d008      	beq.n	1ca5e <operateOnButtonEvent+0x56>
		lastPressTime=xTaskGetTickCount();
   1ca4c:	4b1a      	ldr	r3, [pc, #104]	; (1cab8 <operateOnButtonEvent+0xb0>)
   1ca4e:	4798      	blx	r3
   1ca50:	0002      	movs	r2, r0
   1ca52:	4b1a      	ldr	r3, [pc, #104]	; (1cabc <operateOnButtonEvent+0xb4>)
   1ca54:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTSTOP;
   1ca56:	4b1a      	ldr	r3, [pc, #104]	; (1cac0 <operateOnButtonEvent+0xb8>)
   1ca58:	2202      	movs	r2, #2
   1ca5a:	701a      	strb	r2, [r3, #0]
}
   1ca5c:	e024      	b.n	1caa8 <operateOnButtonEvent+0xa0>
	else if (AUTO_BUTTON_INPUT_COMES)
   1ca5e:	201c      	movs	r0, #28
   1ca60:	4b14      	ldr	r3, [pc, #80]	; (1cab4 <operateOnButtonEvent+0xac>)
   1ca62:	4798      	blx	r3
   1ca64:	0003      	movs	r3, r0
   1ca66:	001a      	movs	r2, r3
   1ca68:	2301      	movs	r3, #1
   1ca6a:	4053      	eors	r3, r2
   1ca6c:	b2db      	uxtb	r3, r3
   1ca6e:	2b00      	cmp	r3, #0
   1ca70:	d008      	beq.n	1ca84 <operateOnButtonEvent+0x7c>
		lastPressTime=xTaskGetTickCount();
   1ca72:	4b11      	ldr	r3, [pc, #68]	; (1cab8 <operateOnButtonEvent+0xb0>)
   1ca74:	4798      	blx	r3
   1ca76:	0002      	movs	r2, r0
   1ca78:	4b10      	ldr	r3, [pc, #64]	; (1cabc <operateOnButtonEvent+0xb4>)
   1ca7a:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTAUTO;
   1ca7c:	4b10      	ldr	r3, [pc, #64]	; (1cac0 <operateOnButtonEvent+0xb8>)
   1ca7e:	2203      	movs	r2, #3
   1ca80:	701a      	strb	r2, [r3, #0]
}
   1ca82:	e011      	b.n	1caa8 <operateOnButtonEvent+0xa0>
	else if(LCDSHOW_BUTTON_INPUT_COMES)
   1ca84:	2029      	movs	r0, #41	; 0x29
   1ca86:	4b0b      	ldr	r3, [pc, #44]	; (1cab4 <operateOnButtonEvent+0xac>)
   1ca88:	4798      	blx	r3
   1ca8a:	0003      	movs	r3, r0
   1ca8c:	001a      	movs	r2, r3
   1ca8e:	2301      	movs	r3, #1
   1ca90:	4053      	eors	r3, r2
   1ca92:	b2db      	uxtb	r3, r3
   1ca94:	2b00      	cmp	r3, #0
   1ca96:	d007      	beq.n	1caa8 <operateOnButtonEvent+0xa0>
		lastPressTime= xTaskGetTickCount();
   1ca98:	4b07      	ldr	r3, [pc, #28]	; (1cab8 <operateOnButtonEvent+0xb0>)
   1ca9a:	4798      	blx	r3
   1ca9c:	0002      	movs	r2, r0
   1ca9e:	4b07      	ldr	r3, [pc, #28]	; (1cabc <operateOnButtonEvent+0xb4>)
   1caa0:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTLCDSHOW;
   1caa2:	4b07      	ldr	r3, [pc, #28]	; (1cac0 <operateOnButtonEvent+0xb8>)
   1caa4:	2204      	movs	r2, #4
   1caa6:	701a      	strb	r2, [r3, #0]
}
   1caa8:	46c0      	nop			; (mov r8, r8)
   1caaa:	46bd      	mov	sp, r7
   1caac:	bd80      	pop	{r7, pc}
   1caae:	46c0      	nop			; (mov r8, r8)
   1cab0:	20000797 	.word	0x20000797
   1cab4:	000190f1 	.word	0x000190f1
   1cab8:	0002034d 	.word	0x0002034d
   1cabc:	20000760 	.word	0x20000760
   1cac0:	20000778 	.word	0x20000778

0001cac4 <buttonFilter>:

void buttonFilter(void)
{
   1cac4:	b580      	push	{r7, lr}
   1cac6:	af00      	add	r7, sp, #0
	//&& xTaskGetTickCount() - lastPressTime > 30
	if(lastButtonEvent>0)
   1cac8:	4b47      	ldr	r3, [pc, #284]	; (1cbe8 <buttonFilter+0x124>)
   1caca:	781b      	ldrb	r3, [r3, #0]
   1cacc:	b2db      	uxtb	r3, r3
   1cace:	2b00      	cmp	r3, #0
   1cad0:	d100      	bne.n	1cad4 <buttonFilter+0x10>
   1cad2:	e086      	b.n	1cbe2 <buttonFilter+0x11e>
	{
		if(lastButtonEvent==BTNEVENTSTART && START_BUTTON_INPUT_COMES)
   1cad4:	4b44      	ldr	r3, [pc, #272]	; (1cbe8 <buttonFilter+0x124>)
   1cad6:	781b      	ldrb	r3, [r3, #0]
   1cad8:	b2db      	uxtb	r3, r3
   1cada:	2b01      	cmp	r3, #1
   1cadc:	d111      	bne.n	1cb02 <buttonFilter+0x3e>
   1cade:	2026      	movs	r0, #38	; 0x26
   1cae0:	4b42      	ldr	r3, [pc, #264]	; (1cbec <buttonFilter+0x128>)
   1cae2:	4798      	blx	r3
   1cae4:	0003      	movs	r3, r0
   1cae6:	001a      	movs	r2, r3
   1cae8:	2301      	movs	r3, #1
   1caea:	4053      	eors	r3, r2
   1caec:	b2db      	uxtb	r3, r3
   1caee:	2b00      	cmp	r3, #0
   1caf0:	d007      	beq.n	1cb02 <buttonFilter+0x3e>
		{
			lastButtonEvent=0;
   1caf2:	4b3d      	ldr	r3, [pc, #244]	; (1cbe8 <buttonFilter+0x124>)
   1caf4:	2200      	movs	r2, #0
   1caf6:	701a      	strb	r2, [r3, #0]
			startMotor(false,false);
   1caf8:	2100      	movs	r1, #0
   1cafa:	2000      	movs	r0, #0
   1cafc:	4b3c      	ldr	r3, [pc, #240]	; (1cbf0 <buttonFilter+0x12c>)
   1cafe:	4798      	blx	r3
   1cb00:	e06f      	b.n	1cbe2 <buttonFilter+0x11e>
		}
		else if(lastButtonEvent==BTNEVENTSTOP && STOP_BUTTON_INPUT_COMES)
   1cb02:	4b39      	ldr	r3, [pc, #228]	; (1cbe8 <buttonFilter+0x124>)
   1cb04:	781b      	ldrb	r3, [r3, #0]
   1cb06:	b2db      	uxtb	r3, r3
   1cb08:	2b02      	cmp	r3, #2
   1cb0a:	d112      	bne.n	1cb32 <buttonFilter+0x6e>
   1cb0c:	2025      	movs	r0, #37	; 0x25
   1cb0e:	4b37      	ldr	r3, [pc, #220]	; (1cbec <buttonFilter+0x128>)
   1cb10:	4798      	blx	r3
   1cb12:	0003      	movs	r3, r0
   1cb14:	001a      	movs	r2, r3
   1cb16:	2301      	movs	r3, #1
   1cb18:	4053      	eors	r3, r2
   1cb1a:	b2db      	uxtb	r3, r3
   1cb1c:	2b00      	cmp	r3, #0
   1cb1e:	d008      	beq.n	1cb32 <buttonFilter+0x6e>
		{
			lastButtonEvent=0;
   1cb20:	4b31      	ldr	r3, [pc, #196]	; (1cbe8 <buttonFilter+0x124>)
   1cb22:	2200      	movs	r2, #0
   1cb24:	701a      	strb	r2, [r3, #0]
			stopMotor(false,false,true);
   1cb26:	2201      	movs	r2, #1
   1cb28:	2100      	movs	r1, #0
   1cb2a:	2000      	movs	r0, #0
   1cb2c:	4b31      	ldr	r3, [pc, #196]	; (1cbf4 <buttonFilter+0x130>)
   1cb2e:	4798      	blx	r3
   1cb30:	e057      	b.n	1cbe2 <buttonFilter+0x11e>
		}
		else if(lastButtonEvent==BTNEVENTAUTO && AUTO_BUTTON_INPUT_COMES)
   1cb32:	4b2d      	ldr	r3, [pc, #180]	; (1cbe8 <buttonFilter+0x124>)
   1cb34:	781b      	ldrb	r3, [r3, #0]
   1cb36:	b2db      	uxtb	r3, r3
   1cb38:	2b03      	cmp	r3, #3
   1cb3a:	d12b      	bne.n	1cb94 <buttonFilter+0xd0>
   1cb3c:	201c      	movs	r0, #28
   1cb3e:	4b2b      	ldr	r3, [pc, #172]	; (1cbec <buttonFilter+0x128>)
   1cb40:	4798      	blx	r3
   1cb42:	0003      	movs	r3, r0
   1cb44:	001a      	movs	r2, r3
   1cb46:	2301      	movs	r3, #1
   1cb48:	4053      	eors	r3, r2
   1cb4a:	b2db      	uxtb	r3, r3
   1cb4c:	2b00      	cmp	r3, #0
   1cb4e:	d021      	beq.n	1cb94 <buttonFilter+0xd0>
		{
			lastButtonEvent=0;
   1cb50:	4b25      	ldr	r3, [pc, #148]	; (1cbe8 <buttonFilter+0x124>)
   1cb52:	2200      	movs	r2, #0
   1cb54:	701a      	strb	r2, [r3, #0]
			saveAutoStartSettings(!((bool)user_settings_parameter_struct.autoStartAddress));  //set AutoStart to True in EEPROM
   1cb56:	4b28      	ldr	r3, [pc, #160]	; (1cbf8 <buttonFilter+0x134>)
   1cb58:	785b      	ldrb	r3, [r3, #1]
   1cb5a:	425a      	negs	r2, r3
   1cb5c:	4153      	adcs	r3, r2
   1cb5e:	b2db      	uxtb	r3, r3
   1cb60:	0018      	movs	r0, r3
   1cb62:	4b26      	ldr	r3, [pc, #152]	; (1cbfc <buttonFilter+0x138>)
   1cb64:	4798      	blx	r3
			resetAutoStart(true);
   1cb66:	2001      	movs	r0, #1
   1cb68:	4b25      	ldr	r3, [pc, #148]	; (1cc00 <buttonFilter+0x13c>)
   1cb6a:	4798      	blx	r3
			if(user_settings_parameter_struct.autoStartAddress)
   1cb6c:	4b22      	ldr	r3, [pc, #136]	; (1cbf8 <buttonFilter+0x134>)
   1cb6e:	785b      	ldrb	r3, [r3, #1]
   1cb70:	2b00      	cmp	r3, #0
   1cb72:	d007      	beq.n	1cb84 <buttonFilter+0xc0>
			{
				simEventTemp[10] = registerEvent(')');
   1cb74:	2029      	movs	r0, #41	; 0x29
   1cb76:	4b23      	ldr	r3, [pc, #140]	; (1cc04 <buttonFilter+0x140>)
   1cb78:	4798      	blx	r3
   1cb7a:	0003      	movs	r3, r0
   1cb7c:	001a      	movs	r2, r3
   1cb7e:	4b22      	ldr	r3, [pc, #136]	; (1cc08 <buttonFilter+0x144>)
   1cb80:	729a      	strb	r2, [r3, #10]
			if(user_settings_parameter_struct.autoStartAddress)
   1cb82:	e02e      	b.n	1cbe2 <buttonFilter+0x11e>
			}
			else
			{
				simEventTemp[11] = registerEvent('[');
   1cb84:	205b      	movs	r0, #91	; 0x5b
   1cb86:	4b1f      	ldr	r3, [pc, #124]	; (1cc04 <buttonFilter+0x140>)
   1cb88:	4798      	blx	r3
   1cb8a:	0003      	movs	r3, r0
   1cb8c:	001a      	movs	r2, r3
   1cb8e:	4b1e      	ldr	r3, [pc, #120]	; (1cc08 <buttonFilter+0x144>)
   1cb90:	72da      	strb	r2, [r3, #11]
			if(user_settings_parameter_struct.autoStartAddress)
   1cb92:	e026      	b.n	1cbe2 <buttonFilter+0x11e>
			}
		}
		else if(lastButtonEvent==BTNEVENTLCDSHOW && LCDSHOW_BUTTON_INPUT_COMES)
   1cb94:	4b14      	ldr	r3, [pc, #80]	; (1cbe8 <buttonFilter+0x124>)
   1cb96:	781b      	ldrb	r3, [r3, #0]
   1cb98:	b2db      	uxtb	r3, r3
   1cb9a:	2b04      	cmp	r3, #4
   1cb9c:	d11d      	bne.n	1cbda <buttonFilter+0x116>
   1cb9e:	2029      	movs	r0, #41	; 0x29
   1cba0:	4b12      	ldr	r3, [pc, #72]	; (1cbec <buttonFilter+0x128>)
   1cba2:	4798      	blx	r3
   1cba4:	0003      	movs	r3, r0
   1cba6:	001a      	movs	r2, r3
   1cba8:	2301      	movs	r3, #1
   1cbaa:	4053      	eors	r3, r2
   1cbac:	b2db      	uxtb	r3, r3
   1cbae:	2b00      	cmp	r3, #0
   1cbb0:	d013      	beq.n	1cbda <buttonFilter+0x116>
		{
			lastButtonEvent=0;
   1cbb2:	4b0d      	ldr	r3, [pc, #52]	; (1cbe8 <buttonFilter+0x124>)
   1cbb4:	2200      	movs	r2, #0
   1cbb6:	701a      	strb	r2, [r3, #0]
			setDisplayPause(!varPauseDisplay);
   1cbb8:	4b14      	ldr	r3, [pc, #80]	; (1cc0c <buttonFilter+0x148>)
   1cbba:	781b      	ldrb	r3, [r3, #0]
   1cbbc:	b2db      	uxtb	r3, r3
   1cbbe:	1e5a      	subs	r2, r3, #1
   1cbc0:	4193      	sbcs	r3, r2
   1cbc2:	b2db      	uxtb	r3, r3
   1cbc4:	2201      	movs	r2, #1
   1cbc6:	4053      	eors	r3, r2
   1cbc8:	b2db      	uxtb	r3, r3
   1cbca:	1c1a      	adds	r2, r3, #0
   1cbcc:	2301      	movs	r3, #1
   1cbce:	4013      	ands	r3, r2
   1cbd0:	b2db      	uxtb	r3, r3
   1cbd2:	0018      	movs	r0, r3
   1cbd4:	4b0e      	ldr	r3, [pc, #56]	; (1cc10 <buttonFilter+0x14c>)
   1cbd6:	4798      	blx	r3
   1cbd8:	e003      	b.n	1cbe2 <buttonFilter+0x11e>
		}
		else
		{
			lastButtonEvent=0;
   1cbda:	4b03      	ldr	r3, [pc, #12]	; (1cbe8 <buttonFilter+0x124>)
   1cbdc:	2200      	movs	r2, #0
   1cbde:	701a      	strb	r2, [r3, #0]
		}
	}
}
   1cbe0:	e7ff      	b.n	1cbe2 <buttonFilter+0x11e>
   1cbe2:	46c0      	nop			; (mov r8, r8)
   1cbe4:	46bd      	mov	sp, r7
   1cbe6:	bd80      	pop	{r7, pc}
   1cbe8:	20000778 	.word	0x20000778
   1cbec:	000190f1 	.word	0x000190f1
   1cbf0:	0001b391 	.word	0x0001b391
   1cbf4:	0001b56d 	.word	0x0001b56d
   1cbf8:	20000654 	.word	0x20000654
   1cbfc:	000112a5 	.word	0x000112a5
   1cc00:	0001af99 	.word	0x0001af99
   1cc04:	0001492d 	.word	0x0001492d
   1cc08:	2000070c 	.word	0x2000070c
   1cc0c:	200007a4 	.word	0x200007a4
   1cc10:	0001cc15 	.word	0x0001cc15

0001cc14 <setDisplayPause>:
//}
//}


void setDisplayPause(bool value)
{
   1cc14:	b580      	push	{r7, lr}
   1cc16:	b082      	sub	sp, #8
   1cc18:	af00      	add	r7, sp, #0
   1cc1a:	0002      	movs	r2, r0
   1cc1c:	1dfb      	adds	r3, r7, #7
   1cc1e:	701a      	strb	r2, [r3, #0]
	varPauseDisplay=value;
   1cc20:	4b03      	ldr	r3, [pc, #12]	; (1cc30 <setDisplayPause+0x1c>)
   1cc22:	1dfa      	adds	r2, r7, #7
   1cc24:	7812      	ldrb	r2, [r2, #0]
   1cc26:	701a      	strb	r2, [r3, #0]
}
   1cc28:	46c0      	nop			; (mov r8, r8)
   1cc2a:	46bd      	mov	sp, r7
   1cc2c:	b002      	add	sp, #8
   1cc2e:	bd80      	pop	{r7, pc}
   1cc30:	200007a4 	.word	0x200007a4

0001cc34 <setCallStateOnLCD>:

void setCallStateOnLCD(uint8_t callState,char* number,bool usePrevious)
{
   1cc34:	b580      	push	{r7, lr}
   1cc36:	b082      	sub	sp, #8
   1cc38:	af00      	add	r7, sp, #0
   1cc3a:	6039      	str	r1, [r7, #0]
   1cc3c:	0011      	movs	r1, r2
   1cc3e:	1dfb      	adds	r3, r7, #7
   1cc40:	1c02      	adds	r2, r0, #0
   1cc42:	701a      	strb	r2, [r3, #0]
   1cc44:	1dbb      	adds	r3, r7, #6
   1cc46:	1c0a      	adds	r2, r1, #0
   1cc48:	701a      	strb	r2, [r3, #0]
	callStateOnLCD = callState;
   1cc4a:	4b0f      	ldr	r3, [pc, #60]	; (1cc88 <setCallStateOnLCD+0x54>)
   1cc4c:	1dfa      	adds	r2, r7, #7
   1cc4e:	7812      	ldrb	r2, [r2, #0]
   1cc50:	701a      	strb	r2, [r3, #0]

	if(!usePrevious)
   1cc52:	1dbb      	adds	r3, r7, #6
   1cc54:	781b      	ldrb	r3, [r3, #0]
   1cc56:	2201      	movs	r2, #1
   1cc58:	4053      	eors	r3, r2
   1cc5a:	b2db      	uxtb	r3, r3
   1cc5c:	2b00      	cmp	r3, #0
   1cc5e:	d00f      	beq.n	1cc80 <setCallStateOnLCD+0x4c>
	{
		memset(numberOnLCD, '\0', sizeof(numberOnLCD));
   1cc60:	4b0a      	ldr	r3, [pc, #40]	; (1cc8c <setCallStateOnLCD+0x58>)
   1cc62:	2214      	movs	r2, #20
   1cc64:	2100      	movs	r1, #0
   1cc66:	0018      	movs	r0, r3
   1cc68:	4b09      	ldr	r3, [pc, #36]	; (1cc90 <setCallStateOnLCD+0x5c>)
   1cc6a:	4798      	blx	r3
		if(callStateOnLCD!=LCDCALLSTATE_IDLE)
   1cc6c:	4b06      	ldr	r3, [pc, #24]	; (1cc88 <setCallStateOnLCD+0x54>)
   1cc6e:	781b      	ldrb	r3, [r3, #0]
   1cc70:	2b00      	cmp	r3, #0
   1cc72:	d005      	beq.n	1cc80 <setCallStateOnLCD+0x4c>
		{
			strcpy(numberOnLCD,number);
   1cc74:	683a      	ldr	r2, [r7, #0]
   1cc76:	4b05      	ldr	r3, [pc, #20]	; (1cc8c <setCallStateOnLCD+0x58>)
   1cc78:	0011      	movs	r1, r2
   1cc7a:	0018      	movs	r0, r3
   1cc7c:	4b05      	ldr	r3, [pc, #20]	; (1cc94 <setCallStateOnLCD+0x60>)
   1cc7e:	4798      	blx	r3
			//sprintf(numberOnLCD,"%s",number);
		}
	}
}
   1cc80:	46c0      	nop			; (mov r8, r8)
   1cc82:	46bd      	mov	sp, r7
   1cc84:	b002      	add	sp, #8
   1cc86:	bd80      	pop	{r7, pc}
   1cc88:	200007cd 	.word	0x200007cd
   1cc8c:	20000844 	.word	0x20000844
   1cc90:	00028f13 	.word	0x00028f13
   1cc94:	00029193 	.word	0x00029193

0001cc98 <vTask_50ms_Timer>:

static void vTask_50ms_Timer(void *params)
{
   1cc98:	b590      	push	{r4, r7, lr}
   1cc9a:	b085      	sub	sp, #20
   1cc9c:	af00      	add	r7, sp, #0
   1cc9e:	6078      	str	r0, [r7, #4]
	TickType_t xLastExecutionGsm_Send_Time;
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
   1cca0:	4b17      	ldr	r3, [pc, #92]	; (1cd00 <vTask_50ms_Timer+0x68>)
   1cca2:	4798      	blx	r3
   1cca4:	0003      	movs	r3, r0
   1cca6:	60fb      	str	r3, [r7, #12]
	//--------------------------------
	for( ;; )
	{
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (25/portTICK_PERIOD_MS));
   1cca8:	230c      	movs	r3, #12
   1ccaa:	18fb      	adds	r3, r7, r3
   1ccac:	2119      	movs	r1, #25
   1ccae:	0018      	movs	r0, r3
   1ccb0:	4b14      	ldr	r3, [pc, #80]	; (1cd04 <vTask_50ms_Timer+0x6c>)
   1ccb2:	4798      	blx	r3
		if(buttonEventOccured)
   1ccb4:	4b14      	ldr	r3, [pc, #80]	; (1cd08 <vTask_50ms_Timer+0x70>)
   1ccb6:	781b      	ldrb	r3, [r3, #0]
   1ccb8:	b2db      	uxtb	r3, r3
   1ccba:	2b00      	cmp	r3, #0
   1ccbc:	d001      	beq.n	1ccc2 <vTask_50ms_Timer+0x2a>
		{
			operateOnButtonEvent();
   1ccbe:	4b13      	ldr	r3, [pc, #76]	; (1cd0c <vTask_50ms_Timer+0x74>)
   1ccc0:	4798      	blx	r3
		}

		xSemaphoreTake(xButton_Semaphore,portMAX_DELAY);
   1ccc2:	4b13      	ldr	r3, [pc, #76]	; (1cd10 <vTask_50ms_Timer+0x78>)
   1ccc4:	681a      	ldr	r2, [r3, #0]
   1ccc6:	2301      	movs	r3, #1
   1ccc8:	425b      	negs	r3, r3
   1ccca:	0019      	movs	r1, r3
   1cccc:	0010      	movs	r0, r2
   1ccce:	4b11      	ldr	r3, [pc, #68]	; (1cd14 <vTask_50ms_Timer+0x7c>)
   1ccd0:	4798      	blx	r3
		if(lastButtonEvent>0)
   1ccd2:	4b11      	ldr	r3, [pc, #68]	; (1cd18 <vTask_50ms_Timer+0x80>)
   1ccd4:	781b      	ldrb	r3, [r3, #0]
   1ccd6:	b2db      	uxtb	r3, r3
   1ccd8:	2b00      	cmp	r3, #0
   1ccda:	d008      	beq.n	1ccee <vTask_50ms_Timer+0x56>
		{
			taskPSet=true;
   1ccdc:	4b0f      	ldr	r3, [pc, #60]	; (1cd1c <vTask_50ms_Timer+0x84>)
   1ccde:	2201      	movs	r2, #1
   1cce0:	701a      	strb	r2, [r3, #0]
			vTaskPrioritySet(motorTask,2);
   1cce2:	4b0f      	ldr	r3, [pc, #60]	; (1cd20 <vTask_50ms_Timer+0x88>)
   1cce4:	681b      	ldr	r3, [r3, #0]
   1cce6:	2102      	movs	r1, #2
   1cce8:	0018      	movs	r0, r3
   1ccea:	4b0e      	ldr	r3, [pc, #56]	; (1cd24 <vTask_50ms_Timer+0x8c>)
   1ccec:	4798      	blx	r3
		}
		xSemaphoreGive(xButton_Semaphore);
   1ccee:	4b08      	ldr	r3, [pc, #32]	; (1cd10 <vTask_50ms_Timer+0x78>)
   1ccf0:	6818      	ldr	r0, [r3, #0]
   1ccf2:	2300      	movs	r3, #0
   1ccf4:	2200      	movs	r2, #0
   1ccf6:	2100      	movs	r1, #0
   1ccf8:	4c0b      	ldr	r4, [pc, #44]	; (1cd28 <vTask_50ms_Timer+0x90>)
   1ccfa:	47a0      	blx	r4
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (25/portTICK_PERIOD_MS));
   1ccfc:	e7d4      	b.n	1cca8 <vTask_50ms_Timer+0x10>
   1ccfe:	46c0      	nop			; (mov r8, r8)
   1cd00:	0002034d 	.word	0x0002034d
   1cd04:	0001ff21 	.word	0x0001ff21
   1cd08:	20000797 	.word	0x20000797
   1cd0c:	0001ca09 	.word	0x0001ca09
   1cd10:	2000023c 	.word	0x2000023c
   1cd14:	0001f6e1 	.word	0x0001f6e1
   1cd18:	20000778 	.word	0x20000778
   1cd1c:	20000880 	.word	0x20000880
   1cd20:	20000240 	.word	0x20000240
   1cd24:	00020045 	.word	0x00020045
   1cd28:	0001f241 	.word	0x0001f241

0001cd2c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   1cd2c:	b580      	push	{r7, lr}
   1cd2e:	b082      	sub	sp, #8
   1cd30:	af00      	add	r7, sp, #0
   1cd32:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   1cd34:	687b      	ldr	r3, [r7, #4]
   1cd36:	2200      	movs	r2, #0
   1cd38:	701a      	strb	r2, [r3, #0]
}
   1cd3a:	46c0      	nop			; (mov r8, r8)
   1cd3c:	46bd      	mov	sp, r7
   1cd3e:	b002      	add	sp, #8
   1cd40:	bd80      	pop	{r7, pc}
	...

0001cd44 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   1cd44:	b580      	push	{r7, lr}
   1cd46:	b082      	sub	sp, #8
   1cd48:	af00      	add	r7, sp, #0
   1cd4a:	0002      	movs	r2, r0
   1cd4c:	6039      	str	r1, [r7, #0]
   1cd4e:	1dfb      	adds	r3, r7, #7
   1cd50:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1cd52:	1dfb      	adds	r3, r7, #7
   1cd54:	781b      	ldrb	r3, [r3, #0]
   1cd56:	2b01      	cmp	r3, #1
   1cd58:	d00a      	beq.n	1cd70 <system_apb_clock_set_mask+0x2c>
   1cd5a:	2b02      	cmp	r3, #2
   1cd5c:	d00f      	beq.n	1cd7e <system_apb_clock_set_mask+0x3a>
   1cd5e:	2b00      	cmp	r3, #0
   1cd60:	d114      	bne.n	1cd8c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   1cd62:	4b0e      	ldr	r3, [pc, #56]	; (1cd9c <system_apb_clock_set_mask+0x58>)
   1cd64:	4a0d      	ldr	r2, [pc, #52]	; (1cd9c <system_apb_clock_set_mask+0x58>)
   1cd66:	6991      	ldr	r1, [r2, #24]
   1cd68:	683a      	ldr	r2, [r7, #0]
   1cd6a:	430a      	orrs	r2, r1
   1cd6c:	619a      	str	r2, [r3, #24]
			break;
   1cd6e:	e00f      	b.n	1cd90 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   1cd70:	4b0a      	ldr	r3, [pc, #40]	; (1cd9c <system_apb_clock_set_mask+0x58>)
   1cd72:	4a0a      	ldr	r2, [pc, #40]	; (1cd9c <system_apb_clock_set_mask+0x58>)
   1cd74:	69d1      	ldr	r1, [r2, #28]
   1cd76:	683a      	ldr	r2, [r7, #0]
   1cd78:	430a      	orrs	r2, r1
   1cd7a:	61da      	str	r2, [r3, #28]
			break;
   1cd7c:	e008      	b.n	1cd90 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   1cd7e:	4b07      	ldr	r3, [pc, #28]	; (1cd9c <system_apb_clock_set_mask+0x58>)
   1cd80:	4a06      	ldr	r2, [pc, #24]	; (1cd9c <system_apb_clock_set_mask+0x58>)
   1cd82:	6a11      	ldr	r1, [r2, #32]
   1cd84:	683a      	ldr	r2, [r7, #0]
   1cd86:	430a      	orrs	r2, r1
   1cd88:	621a      	str	r2, [r3, #32]
			break;
   1cd8a:	e001      	b.n	1cd90 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   1cd8c:	2317      	movs	r3, #23
   1cd8e:	e000      	b.n	1cd92 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   1cd90:	2300      	movs	r3, #0
}
   1cd92:	0018      	movs	r0, r3
   1cd94:	46bd      	mov	sp, r7
   1cd96:	b002      	add	sp, #8
   1cd98:	bd80      	pop	{r7, pc}
   1cd9a:	46c0      	nop			; (mov r8, r8)
   1cd9c:	40000400 	.word	0x40000400

0001cda0 <ac_is_syncing>:
{
   1cda0:	b580      	push	{r7, lr}
   1cda2:	b084      	sub	sp, #16
   1cda4:	af00      	add	r7, sp, #0
   1cda6:	6078      	str	r0, [r7, #4]
	Ac *const ac_module = module_inst->hw;
   1cda8:	687b      	ldr	r3, [r7, #4]
   1cdaa:	681b      	ldr	r3, [r3, #0]
   1cdac:	60fb      	str	r3, [r7, #12]
	if (ac_module->STATUSB.reg & AC_STATUSB_SYNCBUSY) {
   1cdae:	68fb      	ldr	r3, [r7, #12]
   1cdb0:	7a5b      	ldrb	r3, [r3, #9]
   1cdb2:	b2db      	uxtb	r3, r3
   1cdb4:	b25b      	sxtb	r3, r3
   1cdb6:	2b00      	cmp	r3, #0
   1cdb8:	da01      	bge.n	1cdbe <ac_is_syncing+0x1e>
		return true;
   1cdba:	2301      	movs	r3, #1
   1cdbc:	e000      	b.n	1cdc0 <ac_is_syncing+0x20>
	return false;
   1cdbe:	2300      	movs	r3, #0
}
   1cdc0:	0018      	movs	r0, r3
   1cdc2:	46bd      	mov	sp, r7
   1cdc4:	b004      	add	sp, #16
   1cdc6:	bd80      	pop	{r7, pc}

0001cdc8 <_ac_set_config>:
#include "ac.h"

static enum status_code _ac_set_config(
		struct ac_module *const module_inst,
		struct ac_config *const config)
{
   1cdc8:	b580      	push	{r7, lr}
   1cdca:	b086      	sub	sp, #24
   1cdcc:	af00      	add	r7, sp, #0
   1cdce:	6078      	str	r0, [r7, #4]
   1cdd0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(config);

	Ac *const ac_module = module_inst->hw;
   1cdd2:	687b      	ldr	r3, [r7, #4]
   1cdd4:	681b      	ldr	r3, [r3, #0]
   1cdd6:	60fb      	str	r3, [r7, #12]

	/* Use a temporary register for computing the control bits */
	uint32_t ctrla_temp = 0;
   1cdd8:	2300      	movs	r3, #0
   1cdda:	617b      	str	r3, [r7, #20]

	/* Check if the comparators should be enabled during sleep */
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
   1cddc:	2300      	movs	r3, #0
   1cdde:	613b      	str	r3, [r7, #16]
   1cde0:	e00f      	b.n	1ce02 <_ac_set_config+0x3a>
		if (config->run_in_standby[i] == true) {
   1cde2:	683a      	ldr	r2, [r7, #0]
   1cde4:	693b      	ldr	r3, [r7, #16]
   1cde6:	18d3      	adds	r3, r2, r3
   1cde8:	781b      	ldrb	r3, [r3, #0]
   1cdea:	2b00      	cmp	r3, #0
   1cdec:	d006      	beq.n	1cdfc <_ac_set_config+0x34>
			ctrla_temp |= (AC_CTRLA_RUNSTDBY_Msk << i);
   1cdee:	2204      	movs	r2, #4
   1cdf0:	693b      	ldr	r3, [r7, #16]
   1cdf2:	409a      	lsls	r2, r3
   1cdf4:	0013      	movs	r3, r2
   1cdf6:	697a      	ldr	r2, [r7, #20]
   1cdf8:	4313      	orrs	r3, r2
   1cdfa:	617b      	str	r3, [r7, #20]
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
   1cdfc:	693b      	ldr	r3, [r7, #16]
   1cdfe:	3301      	adds	r3, #1
   1ce00:	613b      	str	r3, [r7, #16]
   1ce02:	693b      	ldr	r3, [r7, #16]
   1ce04:	2b00      	cmp	r3, #0
   1ce06:	d0ec      	beq.n	1cde2 <_ac_set_config+0x1a>
		}
	}

	while (ac_is_syncing(module_inst)) {
   1ce08:	46c0      	nop			; (mov r8, r8)
   1ce0a:	687b      	ldr	r3, [r7, #4]
   1ce0c:	0018      	movs	r0, r3
   1ce0e:	4b06      	ldr	r3, [pc, #24]	; (1ce28 <_ac_set_config+0x60>)
   1ce10:	4798      	blx	r3
   1ce12:	1e03      	subs	r3, r0, #0
   1ce14:	d1f9      	bne.n	1ce0a <_ac_set_config+0x42>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->CTRLA.reg = ctrla_temp;
   1ce16:	697b      	ldr	r3, [r7, #20]
   1ce18:	b2da      	uxtb	r2, r3
   1ce1a:	68fb      	ldr	r3, [r7, #12]
   1ce1c:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   1ce1e:	2300      	movs	r3, #0
}
   1ce20:	0018      	movs	r0, r3
   1ce22:	46bd      	mov	sp, r7
   1ce24:	b006      	add	sp, #24
   1ce26:	bd80      	pop	{r7, pc}
   1ce28:	0001cda1 	.word	0x0001cda1

0001ce2c <ac_init>:
 */
enum status_code ac_init(
		struct ac_module *const module_inst,
		Ac *const hw,
		struct ac_config *const config)
{
   1ce2c:	b580      	push	{r7, lr}
   1ce2e:	b086      	sub	sp, #24
   1ce30:	af00      	add	r7, sp, #0
   1ce32:	60f8      	str	r0, [r7, #12]
   1ce34:	60b9      	str	r1, [r7, #8]
   1ce36:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module_inst->hw = hw;
   1ce38:	68fb      	ldr	r3, [r7, #12]
   1ce3a:	68ba      	ldr	r2, [r7, #8]
   1ce3c:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock and GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1ce3e:	2314      	movs	r3, #20
   1ce40:	18fb      	adds	r3, r7, r3
   1ce42:	0018      	movs	r0, r3
   1ce44:	4b2a      	ldr	r3, [pc, #168]	; (1cef0 <ac_init+0xc4>)
   1ce46:	4798      	blx	r3

	if (hw == AC) {
   1ce48:	68bb      	ldr	r3, [r7, #8]
   1ce4a:	4a2a      	ldr	r2, [pc, #168]	; (1cef4 <ac_init+0xc8>)
   1ce4c:	4293      	cmp	r3, r2
   1ce4e:	d121      	bne.n	1ce94 <ac_init+0x68>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_AC);
   1ce50:	2380      	movs	r3, #128	; 0x80
   1ce52:	029b      	lsls	r3, r3, #10
   1ce54:	0019      	movs	r1, r3
   1ce56:	2002      	movs	r0, #2
   1ce58:	4b27      	ldr	r3, [pc, #156]	; (1cef8 <ac_init+0xcc>)
   1ce5a:	4798      	blx	r3
		gclk_chan_conf.source_generator = config->dig_source_generator;
   1ce5c:	687b      	ldr	r3, [r7, #4]
   1ce5e:	785a      	ldrb	r2, [r3, #1]
   1ce60:	2314      	movs	r3, #20
   1ce62:	18fb      	adds	r3, r7, r3
   1ce64:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(AC_GCLK_ID_DIG, &gclk_chan_conf);
   1ce66:	2314      	movs	r3, #20
   1ce68:	18fb      	adds	r3, r7, r3
   1ce6a:	0019      	movs	r1, r3
   1ce6c:	201f      	movs	r0, #31
   1ce6e:	4b23      	ldr	r3, [pc, #140]	; (1cefc <ac_init+0xd0>)
   1ce70:	4798      	blx	r3
		system_gclk_chan_enable(AC_GCLK_ID_DIG);
   1ce72:	201f      	movs	r0, #31
   1ce74:	4b22      	ldr	r3, [pc, #136]	; (1cf00 <ac_init+0xd4>)
   1ce76:	4798      	blx	r3
		gclk_chan_conf.source_generator = config->ana_source_generator;
   1ce78:	687b      	ldr	r3, [r7, #4]
   1ce7a:	789a      	ldrb	r2, [r3, #2]
   1ce7c:	2314      	movs	r3, #20
   1ce7e:	18fb      	adds	r3, r7, r3
   1ce80:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(AC_GCLK_ID_ANA, &gclk_chan_conf);
   1ce82:	2314      	movs	r3, #20
   1ce84:	18fb      	adds	r3, r7, r3
   1ce86:	0019      	movs	r1, r3
   1ce88:	2020      	movs	r0, #32
   1ce8a:	4b1c      	ldr	r3, [pc, #112]	; (1cefc <ac_init+0xd0>)
   1ce8c:	4798      	blx	r3
		system_gclk_chan_enable(AC_GCLK_ID_ANA);
   1ce8e:	2020      	movs	r0, #32
   1ce90:	4b1b      	ldr	r3, [pc, #108]	; (1cf00 <ac_init+0xd4>)
   1ce92:	4798      	blx	r3
#  error This driver is not support more than three AC instances.
#endif

#if AC_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < AC_CALLBACK_N; i++) {
   1ce94:	2317      	movs	r3, #23
   1ce96:	18fb      	adds	r3, r7, r3
   1ce98:	2200      	movs	r2, #0
   1ce9a:	701a      	strb	r2, [r3, #0]
   1ce9c:	e00f      	b.n	1cebe <ac_init+0x92>
		module_inst->callback[i]        = NULL;
   1ce9e:	2317      	movs	r3, #23
   1cea0:	18fb      	adds	r3, r7, r3
   1cea2:	781b      	ldrb	r3, [r3, #0]
   1cea4:	68fa      	ldr	r2, [r7, #12]
   1cea6:	009b      	lsls	r3, r3, #2
   1cea8:	18d3      	adds	r3, r2, r3
   1ceaa:	3304      	adds	r3, #4
   1ceac:	2200      	movs	r2, #0
   1ceae:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < AC_CALLBACK_N; i++) {
   1ceb0:	2317      	movs	r3, #23
   1ceb2:	18fb      	adds	r3, r7, r3
   1ceb4:	781a      	ldrb	r2, [r3, #0]
   1ceb6:	2317      	movs	r3, #23
   1ceb8:	18fb      	adds	r3, r7, r3
   1ceba:	3201      	adds	r2, #1
   1cebc:	701a      	strb	r2, [r3, #0]
   1cebe:	2317      	movs	r3, #23
   1cec0:	18fb      	adds	r3, r7, r3
   1cec2:	781b      	ldrb	r3, [r3, #0]
   1cec4:	2b04      	cmp	r3, #4
   1cec6:	d9ea      	bls.n	1ce9e <ac_init+0x72>
	}

	/* Initialize software flags*/
	module_inst->register_callback_mask = 0x00;
   1cec8:	68fb      	ldr	r3, [r7, #12]
   1ceca:	2200      	movs	r2, #0
   1cecc:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask   = 0x00;
   1cece:	68fb      	ldr	r3, [r7, #12]
   1ced0:	2200      	movs	r2, #0
   1ced2:	765a      	strb	r2, [r3, #25]

#  if (AC_INST_NUM == 1)
	_ac_instance[0] = module_inst;
   1ced4:	4b0b      	ldr	r3, [pc, #44]	; (1cf04 <ac_init+0xd8>)
   1ced6:	68fa      	ldr	r2, [r7, #12]
   1ced8:	601a      	str	r2, [r3, #0]
	_ac_instance[_ac_get_inst_index(hw)] = module_inst;
#  endif
#endif

	/* Write configuration to module */
	return _ac_set_config(module_inst, config);
   1ceda:	687a      	ldr	r2, [r7, #4]
   1cedc:	68fb      	ldr	r3, [r7, #12]
   1cede:	0011      	movs	r1, r2
   1cee0:	0018      	movs	r0, r3
   1cee2:	4b09      	ldr	r3, [pc, #36]	; (1cf08 <ac_init+0xdc>)
   1cee4:	4798      	blx	r3
   1cee6:	0003      	movs	r3, r0
}
   1cee8:	0018      	movs	r0, r3
   1ceea:	46bd      	mov	sp, r7
   1ceec:	b006      	add	sp, #24
   1ceee:	bd80      	pop	{r7, pc}
   1cef0:	0001cd2d 	.word	0x0001cd2d
   1cef4:	42004400 	.word	0x42004400
   1cef8:	0001cd45 	.word	0x0001cd45
   1cefc:	00024ab5 	.word	0x00024ab5
   1cf00:	00024af9 	.word	0x00024af9
   1cf04:	20000984 	.word	0x20000984
   1cf08:	0001cdc9 	.word	0x0001cdc9

0001cf0c <ac_chan_set_config>:
 */
enum status_code ac_chan_set_config(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel,
		struct ac_chan_config *const config)
{
   1cf0c:	b580      	push	{r7, lr}
   1cf0e:	b086      	sub	sp, #24
   1cf10:	af00      	add	r7, sp, #0
   1cf12:	60f8      	str	r0, [r7, #12]
   1cf14:	607a      	str	r2, [r7, #4]
   1cf16:	230b      	movs	r3, #11
   1cf18:	18fb      	adds	r3, r7, r3
   1cf1a:	1c0a      	adds	r2, r1, #0
   1cf1c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(config);

	Ac *const ac_module = module_inst->hw;
   1cf1e:	68fb      	ldr	r3, [r7, #12]
   1cf20:	681b      	ldr	r3, [r3, #0]
   1cf22:	613b      	str	r3, [r7, #16]

	/* Use a temporary variable to compute the comparator configuration */
	uint32_t compctrl_temp = 0;
   1cf24:	2300      	movs	r3, #0
   1cf26:	617b      	str	r3, [r7, #20]

	/* Enable output filter mode */
	compctrl_temp |= config->filter;
   1cf28:	687b      	ldr	r3, [r7, #4]
   1cf2a:	685b      	ldr	r3, [r3, #4]
   1cf2c:	697a      	ldr	r2, [r7, #20]
   1cf2e:	4313      	orrs	r3, r2
   1cf30:	617b      	str	r3, [r7, #20]

	/* Enable output hysteresis if required */
	if (config->enable_hysteresis == true) {
   1cf32:	687b      	ldr	r3, [r7, #4]
   1cf34:	7a1b      	ldrb	r3, [r3, #8]
   1cf36:	2b00      	cmp	r3, #0
   1cf38:	d004      	beq.n	1cf44 <ac_chan_set_config+0x38>
		compctrl_temp |= AC_COMPCTRL_HYST;
   1cf3a:	697b      	ldr	r3, [r7, #20]
   1cf3c:	2280      	movs	r2, #128	; 0x80
   1cf3e:	0312      	lsls	r2, r2, #12
   1cf40:	4313      	orrs	r3, r2
   1cf42:	617b      	str	r3, [r7, #20]
	}

	/* Set output signal routing mode */
	compctrl_temp |= config->output_mode;
   1cf44:	687b      	ldr	r3, [r7, #4]
   1cf46:	68db      	ldr	r3, [r3, #12]
   1cf48:	697a      	ldr	r2, [r7, #20]
   1cf4a:	4313      	orrs	r3, r2
   1cf4c:	617b      	str	r3, [r7, #20]

	/* Configure comparator positive and negative pin MUX configurations */
	compctrl_temp |=
			(uint32_t)config->positive_input |
   1cf4e:	687b      	ldr	r3, [r7, #4]
   1cf50:	8a1a      	ldrh	r2, [r3, #16]
			(uint32_t)config->negative_input;
   1cf52:	687b      	ldr	r3, [r7, #4]
   1cf54:	8a5b      	ldrh	r3, [r3, #18]
			(uint32_t)config->positive_input |
   1cf56:	4313      	orrs	r3, r2
   1cf58:	b29b      	uxth	r3, r3
   1cf5a:	001a      	movs	r2, r3
	compctrl_temp |=
   1cf5c:	697b      	ldr	r3, [r7, #20]
   1cf5e:	4313      	orrs	r3, r2
   1cf60:	617b      	str	r3, [r7, #20]

	/* Set sampling mode (single shot or continuous) */
	compctrl_temp |= config->sample_mode;
   1cf62:	687b      	ldr	r3, [r7, #4]
   1cf64:	781b      	ldrb	r3, [r3, #0]
   1cf66:	001a      	movs	r2, r3
   1cf68:	697b      	ldr	r3, [r7, #20]
   1cf6a:	4313      	orrs	r3, r2
   1cf6c:	617b      	str	r3, [r7, #20]

	/* Set channel interrupt selection */
	compctrl_temp |= config->interrupt_selection;
   1cf6e:	687b      	ldr	r3, [r7, #4]
   1cf70:	7d5b      	ldrb	r3, [r3, #21]
   1cf72:	001a      	movs	r2, r3
   1cf74:	697b      	ldr	r3, [r7, #20]
   1cf76:	4313      	orrs	r3, r2
   1cf78:	617b      	str	r3, [r7, #20]

	while (ac_is_syncing(module_inst)) {
   1cf7a:	46c0      	nop			; (mov r8, r8)
   1cf7c:	68fb      	ldr	r3, [r7, #12]
   1cf7e:	0018      	movs	r0, r3
   1cf80:	4b0e      	ldr	r3, [pc, #56]	; (1cfbc <ac_chan_set_config+0xb0>)
   1cf82:	4798      	blx	r3
   1cf84:	1e03      	subs	r3, r0, #0
   1cf86:	d1f9      	bne.n	1cf7c <ac_chan_set_config+0x70>
		/* Wait until synchronization is complete */
	}

	/* Write the final configuration to the module's control register */
	ac_module->COMPCTRL[(uint8_t)channel].reg = compctrl_temp;
   1cf88:	230b      	movs	r3, #11
   1cf8a:	18fb      	adds	r3, r7, r3
   1cf8c:	781a      	ldrb	r2, [r3, #0]
   1cf8e:	693b      	ldr	r3, [r7, #16]
   1cf90:	3204      	adds	r2, #4
   1cf92:	0092      	lsls	r2, r2, #2
   1cf94:	6979      	ldr	r1, [r7, #20]
   1cf96:	50d1      	str	r1, [r2, r3]

	/* Configure VCC voltage scaling for the comparator */
	ac_module->SCALER[(uint8_t)channel].reg   = config->vcc_scale_factor - 1;
   1cf98:	230b      	movs	r3, #11
   1cf9a:	18fb      	adds	r3, r7, r3
   1cf9c:	781b      	ldrb	r3, [r3, #0]
   1cf9e:	687a      	ldr	r2, [r7, #4]
   1cfa0:	7d12      	ldrb	r2, [r2, #20]
   1cfa2:	3a01      	subs	r2, #1
   1cfa4:	b2d0      	uxtb	r0, r2
   1cfa6:	693a      	ldr	r2, [r7, #16]
   1cfa8:	2120      	movs	r1, #32
   1cfaa:	18d3      	adds	r3, r2, r3
   1cfac:	185b      	adds	r3, r3, r1
   1cfae:	1c02      	adds	r2, r0, #0
   1cfb0:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   1cfb2:	2300      	movs	r3, #0
}
   1cfb4:	0018      	movs	r0, r3
   1cfb6:	46bd      	mov	sp, r7
   1cfb8:	b006      	add	sp, #24
   1cfba:	bd80      	pop	{r7, pc}
   1cfbc:	0001cda1 	.word	0x0001cda1

0001cfc0 <system_gclk_chan_get_config_defaults>:
{
   1cfc0:	b580      	push	{r7, lr}
   1cfc2:	b082      	sub	sp, #8
   1cfc4:	af00      	add	r7, sp, #0
   1cfc6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1cfc8:	687b      	ldr	r3, [r7, #4]
   1cfca:	2200      	movs	r2, #0
   1cfcc:	701a      	strb	r2, [r3, #0]
}
   1cfce:	46c0      	nop			; (mov r8, r8)
   1cfd0:	46bd      	mov	sp, r7
   1cfd2:	b002      	add	sp, #8
   1cfd4:	bd80      	pop	{r7, pc}
	...

0001cfd8 <system_apb_clock_set_mask>:
{
   1cfd8:	b580      	push	{r7, lr}
   1cfda:	b082      	sub	sp, #8
   1cfdc:	af00      	add	r7, sp, #0
   1cfde:	0002      	movs	r2, r0
   1cfe0:	6039      	str	r1, [r7, #0]
   1cfe2:	1dfb      	adds	r3, r7, #7
   1cfe4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1cfe6:	1dfb      	adds	r3, r7, #7
   1cfe8:	781b      	ldrb	r3, [r3, #0]
   1cfea:	2b01      	cmp	r3, #1
   1cfec:	d00a      	beq.n	1d004 <system_apb_clock_set_mask+0x2c>
   1cfee:	2b02      	cmp	r3, #2
   1cff0:	d00f      	beq.n	1d012 <system_apb_clock_set_mask+0x3a>
   1cff2:	2b00      	cmp	r3, #0
   1cff4:	d114      	bne.n	1d020 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1cff6:	4b0e      	ldr	r3, [pc, #56]	; (1d030 <system_apb_clock_set_mask+0x58>)
   1cff8:	4a0d      	ldr	r2, [pc, #52]	; (1d030 <system_apb_clock_set_mask+0x58>)
   1cffa:	6991      	ldr	r1, [r2, #24]
   1cffc:	683a      	ldr	r2, [r7, #0]
   1cffe:	430a      	orrs	r2, r1
   1d000:	619a      	str	r2, [r3, #24]
			break;
   1d002:	e00f      	b.n	1d024 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1d004:	4b0a      	ldr	r3, [pc, #40]	; (1d030 <system_apb_clock_set_mask+0x58>)
   1d006:	4a0a      	ldr	r2, [pc, #40]	; (1d030 <system_apb_clock_set_mask+0x58>)
   1d008:	69d1      	ldr	r1, [r2, #28]
   1d00a:	683a      	ldr	r2, [r7, #0]
   1d00c:	430a      	orrs	r2, r1
   1d00e:	61da      	str	r2, [r3, #28]
			break;
   1d010:	e008      	b.n	1d024 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1d012:	4b07      	ldr	r3, [pc, #28]	; (1d030 <system_apb_clock_set_mask+0x58>)
   1d014:	4a06      	ldr	r2, [pc, #24]	; (1d030 <system_apb_clock_set_mask+0x58>)
   1d016:	6a11      	ldr	r1, [r2, #32]
   1d018:	683a      	ldr	r2, [r7, #0]
   1d01a:	430a      	orrs	r2, r1
   1d01c:	621a      	str	r2, [r3, #32]
			break;
   1d01e:	e001      	b.n	1d024 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   1d020:	2317      	movs	r3, #23
   1d022:	e000      	b.n	1d026 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1d024:	2300      	movs	r3, #0
}
   1d026:	0018      	movs	r0, r3
   1d028:	46bd      	mov	sp, r7
   1d02a:	b002      	add	sp, #8
   1d02c:	bd80      	pop	{r7, pc}
   1d02e:	46c0      	nop			; (mov r8, r8)
   1d030:	40000400 	.word	0x40000400

0001d034 <system_pinmux_get_config_defaults>:
{
   1d034:	b580      	push	{r7, lr}
   1d036:	b082      	sub	sp, #8
   1d038:	af00      	add	r7, sp, #0
   1d03a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1d03c:	687b      	ldr	r3, [r7, #4]
   1d03e:	2280      	movs	r2, #128	; 0x80
   1d040:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1d042:	687b      	ldr	r3, [r7, #4]
   1d044:	2200      	movs	r2, #0
   1d046:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1d048:	687b      	ldr	r3, [r7, #4]
   1d04a:	2201      	movs	r2, #1
   1d04c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1d04e:	687b      	ldr	r3, [r7, #4]
   1d050:	2200      	movs	r2, #0
   1d052:	70da      	strb	r2, [r3, #3]
}
   1d054:	46c0      	nop			; (mov r8, r8)
   1d056:	46bd      	mov	sp, r7
   1d058:	b002      	add	sp, #8
   1d05a:	bd80      	pop	{r7, pc}

0001d05c <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
   1d05c:	b580      	push	{r7, lr}
   1d05e:	b082      	sub	sp, #8
   1d060:	af00      	add	r7, sp, #0
   1d062:	0002      	movs	r2, r0
   1d064:	1dfb      	adds	r3, r7, #7
   1d066:	701a      	strb	r2, [r3, #0]
	switch (vref) {
   1d068:	1dfb      	adds	r3, r7, #7
   1d06a:	781b      	ldrb	r3, [r3, #0]
   1d06c:	2b00      	cmp	r3, #0
   1d06e:	d002      	beq.n	1d076 <system_voltage_reference_enable+0x1a>
   1d070:	2b01      	cmp	r3, #1
   1d072:	d007      	beq.n	1d084 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
   1d074:	e00d      	b.n	1d092 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
   1d076:	4b08      	ldr	r3, [pc, #32]	; (1d098 <system_voltage_reference_enable+0x3c>)
   1d078:	4a07      	ldr	r2, [pc, #28]	; (1d098 <system_voltage_reference_enable+0x3c>)
   1d07a:	6c12      	ldr	r2, [r2, #64]	; 0x40
   1d07c:	2102      	movs	r1, #2
   1d07e:	430a      	orrs	r2, r1
   1d080:	641a      	str	r2, [r3, #64]	; 0x40
			break;
   1d082:	e006      	b.n	1d092 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
   1d084:	4b04      	ldr	r3, [pc, #16]	; (1d098 <system_voltage_reference_enable+0x3c>)
   1d086:	4a04      	ldr	r2, [pc, #16]	; (1d098 <system_voltage_reference_enable+0x3c>)
   1d088:	6c12      	ldr	r2, [r2, #64]	; 0x40
   1d08a:	2104      	movs	r1, #4
   1d08c:	430a      	orrs	r2, r1
   1d08e:	641a      	str	r2, [r3, #64]	; 0x40
			break;
   1d090:	46c0      	nop			; (mov r8, r8)
	}
}
   1d092:	46bd      	mov	sp, r7
   1d094:	b002      	add	sp, #8
   1d096:	bd80      	pop	{r7, pc}
   1d098:	40000800 	.word	0x40000800

0001d09c <adc_is_syncing>:
{
   1d09c:	b580      	push	{r7, lr}
   1d09e:	b084      	sub	sp, #16
   1d0a0:	af00      	add	r7, sp, #0
   1d0a2:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   1d0a4:	687b      	ldr	r3, [r7, #4]
   1d0a6:	681b      	ldr	r3, [r3, #0]
   1d0a8:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   1d0aa:	68fb      	ldr	r3, [r7, #12]
   1d0ac:	7e5b      	ldrb	r3, [r3, #25]
   1d0ae:	b2db      	uxtb	r3, r3
   1d0b0:	b25b      	sxtb	r3, r3
   1d0b2:	2b00      	cmp	r3, #0
   1d0b4:	da01      	bge.n	1d0ba <adc_is_syncing+0x1e>
		return true;
   1d0b6:	2301      	movs	r3, #1
   1d0b8:	e000      	b.n	1d0bc <adc_is_syncing+0x20>
	return false;
   1d0ba:	2300      	movs	r3, #0
}
   1d0bc:	0018      	movs	r0, r3
   1d0be:	46bd      	mov	sp, r7
   1d0c0:	b004      	add	sp, #16
   1d0c2:	bd80      	pop	{r7, pc}

0001d0c4 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
   1d0c4:	b580      	push	{r7, lr}
   1d0c6:	b082      	sub	sp, #8
   1d0c8:	af00      	add	r7, sp, #0
   1d0ca:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
   1d0cc:	687b      	ldr	r3, [r7, #4]
   1d0ce:	2200      	movs	r2, #0
   1d0d0:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
   1d0d2:	687b      	ldr	r3, [r7, #4]
   1d0d4:	2200      	movs	r2, #0
   1d0d6:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
   1d0d8:	687b      	ldr	r3, [r7, #4]
   1d0da:	2200      	movs	r2, #0
   1d0dc:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
   1d0de:	687b      	ldr	r3, [r7, #4]
   1d0e0:	2200      	movs	r2, #0
   1d0e2:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
   1d0e4:	687b      	ldr	r3, [r7, #4]
   1d0e6:	2200      	movs	r2, #0
   1d0e8:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
   1d0ea:	687b      	ldr	r3, [r7, #4]
   1d0ec:	2200      	movs	r2, #0
   1d0ee:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
   1d0f0:	687b      	ldr	r3, [r7, #4]
   1d0f2:	2200      	movs	r2, #0
   1d0f4:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
   1d0f6:	687b      	ldr	r3, [r7, #4]
   1d0f8:	2200      	movs	r2, #0
   1d0fa:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
   1d0fc:	687b      	ldr	r3, [r7, #4]
   1d0fe:	2200      	movs	r2, #0
   1d100:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
   1d102:	687b      	ldr	r3, [r7, #4]
   1d104:	22c0      	movs	r2, #192	; 0xc0
   1d106:	0152      	lsls	r2, r2, #5
   1d108:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
   1d10a:	687b      	ldr	r3, [r7, #4]
   1d10c:	2200      	movs	r2, #0
   1d10e:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
   1d110:	687b      	ldr	r3, [r7, #4]
   1d112:	2200      	movs	r2, #0
   1d114:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
   1d116:	687b      	ldr	r3, [r7, #4]
   1d118:	2200      	movs	r2, #0
   1d11a:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
   1d11c:	687b      	ldr	r3, [r7, #4]
   1d11e:	2200      	movs	r2, #0
   1d120:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
   1d122:	687b      	ldr	r3, [r7, #4]
   1d124:	2200      	movs	r2, #0
   1d126:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
   1d128:	687b      	ldr	r3, [r7, #4]
   1d12a:	222a      	movs	r2, #42	; 0x2a
   1d12c:	2100      	movs	r1, #0
   1d12e:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
   1d130:	687b      	ldr	r3, [r7, #4]
   1d132:	2200      	movs	r2, #0
   1d134:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
   1d136:	687b      	ldr	r3, [r7, #4]
   1d138:	2200      	movs	r2, #0
   1d13a:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
   1d13c:	687b      	ldr	r3, [r7, #4]
   1d13e:	2224      	movs	r2, #36	; 0x24
   1d140:	2100      	movs	r1, #0
   1d142:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
   1d144:	687b      	ldr	r3, [r7, #4]
   1d146:	2200      	movs	r2, #0
   1d148:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
   1d14a:	687b      	ldr	r3, [r7, #4]
   1d14c:	2200      	movs	r2, #0
   1d14e:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
   1d150:	687b      	ldr	r3, [r7, #4]
   1d152:	2200      	movs	r2, #0
   1d154:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
   1d156:	687b      	ldr	r3, [r7, #4]
   1d158:	222b      	movs	r2, #43	; 0x2b
   1d15a:	2100      	movs	r1, #0
   1d15c:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
   1d15e:	687b      	ldr	r3, [r7, #4]
   1d160:	222c      	movs	r2, #44	; 0x2c
   1d162:	2100      	movs	r1, #0
   1d164:	5499      	strb	r1, [r3, r2]
}
   1d166:	46c0      	nop			; (mov r8, r8)
   1d168:	46bd      	mov	sp, r7
   1d16a:	b002      	add	sp, #8
   1d16c:	bd80      	pop	{r7, pc}
	...

0001d170 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
   1d170:	b580      	push	{r7, lr}
   1d172:	b098      	sub	sp, #96	; 0x60
   1d174:	af00      	add	r7, sp, #0
   1d176:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
   1d178:	230c      	movs	r3, #12
   1d17a:	18fa      	adds	r2, r7, r3
   1d17c:	4b15      	ldr	r3, [pc, #84]	; (1d1d4 <_adc_configure_ain_pin+0x64>)
   1d17e:	0010      	movs	r0, r2
   1d180:	0019      	movs	r1, r3
   1d182:	2350      	movs	r3, #80	; 0x50
   1d184:	001a      	movs	r2, r3
   1d186:	4b14      	ldr	r3, [pc, #80]	; (1d1d8 <_adc_configure_ain_pin+0x68>)
   1d188:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
   1d18a:	4b14      	ldr	r3, [pc, #80]	; (1d1dc <_adc_configure_ain_pin+0x6c>)
   1d18c:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
   1d18e:	687b      	ldr	r3, [r7, #4]
   1d190:	2b13      	cmp	r3, #19
   1d192:	d81a      	bhi.n	1d1ca <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
   1d194:	230c      	movs	r3, #12
   1d196:	18fb      	adds	r3, r7, r3
   1d198:	687a      	ldr	r2, [r7, #4]
   1d19a:	0092      	lsls	r2, r2, #2
   1d19c:	58d3      	ldr	r3, [r2, r3]
   1d19e:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
   1d1a0:	2308      	movs	r3, #8
   1d1a2:	18fb      	adds	r3, r7, r3
   1d1a4:	0018      	movs	r0, r3
   1d1a6:	4b0e      	ldr	r3, [pc, #56]	; (1d1e0 <_adc_configure_ain_pin+0x70>)
   1d1a8:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
   1d1aa:	2308      	movs	r3, #8
   1d1ac:	18fb      	adds	r3, r7, r3
   1d1ae:	2200      	movs	r2, #0
   1d1b0:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
   1d1b2:	2308      	movs	r3, #8
   1d1b4:	18fb      	adds	r3, r7, r3
   1d1b6:	2201      	movs	r2, #1
   1d1b8:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
   1d1ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1d1bc:	b2db      	uxtb	r3, r3
   1d1be:	2208      	movs	r2, #8
   1d1c0:	18ba      	adds	r2, r7, r2
   1d1c2:	0011      	movs	r1, r2
   1d1c4:	0018      	movs	r0, r3
   1d1c6:	4b07      	ldr	r3, [pc, #28]	; (1d1e4 <_adc_configure_ain_pin+0x74>)
   1d1c8:	4798      	blx	r3
	}
}
   1d1ca:	46c0      	nop			; (mov r8, r8)
   1d1cc:	46bd      	mov	sp, r7
   1d1ce:	b018      	add	sp, #96	; 0x60
   1d1d0:	bd80      	pop	{r7, pc}
   1d1d2:	46c0      	nop			; (mov r8, r8)
   1d1d4:	0002aa9c 	.word	0x0002aa9c
   1d1d8:	00028edd 	.word	0x00028edd
   1d1dc:	0000ffff 	.word	0x0000ffff
   1d1e0:	0001d035 	.word	0x0001d035
   1d1e4:	00024da1 	.word	0x00024da1

0001d1e8 <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
   1d1e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d1ea:	b089      	sub	sp, #36	; 0x24
   1d1ec:	af00      	add	r7, sp, #0
   1d1ee:	6078      	str	r0, [r7, #4]
   1d1f0:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
   1d1f2:	231f      	movs	r3, #31
   1d1f4:	18fb      	adds	r3, r7, r3
   1d1f6:	2200      	movs	r2, #0
   1d1f8:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
   1d1fa:	2310      	movs	r3, #16
   1d1fc:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
   1d1fe:	2317      	movs	r3, #23
   1d200:	18fb      	adds	r3, r7, r3
   1d202:	2200      	movs	r2, #0
   1d204:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_REVISION_Msk) >> DSU_DID_REVISION_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
   1d206:	687b      	ldr	r3, [r7, #4]
   1d208:	681b      	ldr	r3, [r3, #0]
   1d20a:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1d20c:	230c      	movs	r3, #12
   1d20e:	18fb      	adds	r3, r7, r3
   1d210:	0018      	movs	r0, r3
   1d212:	4bce      	ldr	r3, [pc, #824]	; (1d54c <_adc_set_config+0x364>)
   1d214:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
   1d216:	683b      	ldr	r3, [r7, #0]
   1d218:	781a      	ldrb	r2, [r3, #0]
   1d21a:	230c      	movs	r3, #12
   1d21c:	18fb      	adds	r3, r7, r3
   1d21e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
   1d220:	230c      	movs	r3, #12
   1d222:	18fb      	adds	r3, r7, r3
   1d224:	0019      	movs	r1, r3
   1d226:	201e      	movs	r0, #30
   1d228:	4bc9      	ldr	r3, [pc, #804]	; (1d550 <_adc_set_config+0x368>)
   1d22a:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
   1d22c:	201e      	movs	r0, #30
   1d22e:	4bc9      	ldr	r3, [pc, #804]	; (1d554 <_adc_set_config+0x36c>)
   1d230:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
   1d232:	683b      	ldr	r3, [r7, #0]
   1d234:	222c      	movs	r2, #44	; 0x2c
   1d236:	5c9b      	ldrb	r3, [r3, r2]
   1d238:	2b00      	cmp	r3, #0
   1d23a:	d040      	beq.n	1d2be <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
   1d23c:	2316      	movs	r3, #22
   1d23e:	18fb      	adds	r3, r7, r3
   1d240:	683a      	ldr	r2, [r7, #0]
   1d242:	212b      	movs	r1, #43	; 0x2b
   1d244:	5c52      	ldrb	r2, [r2, r1]
   1d246:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
   1d248:	683b      	ldr	r3, [r7, #0]
   1d24a:	7b19      	ldrb	r1, [r3, #12]
		uint8_t start_pin =
   1d24c:	2315      	movs	r3, #21
   1d24e:	18fb      	adds	r3, r7, r3
   1d250:	2216      	movs	r2, #22
   1d252:	18ba      	adds	r2, r7, r2
   1d254:	7812      	ldrb	r2, [r2, #0]
   1d256:	188a      	adds	r2, r1, r2
   1d258:	701a      	strb	r2, [r3, #0]
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
   1d25a:	683b      	ldr	r3, [r7, #0]
   1d25c:	222c      	movs	r2, #44	; 0x2c
   1d25e:	5c99      	ldrb	r1, [r3, r2]
		uint8_t end_pin =
   1d260:	230f      	movs	r3, #15
   1d262:	18fb      	adds	r3, r7, r3
   1d264:	2215      	movs	r2, #21
   1d266:	18ba      	adds	r2, r7, r2
   1d268:	7812      	ldrb	r2, [r2, #0]
   1d26a:	188a      	adds	r2, r1, r2
   1d26c:	701a      	strb	r2, [r3, #0]

		while (start_pin < end_pin) {
   1d26e:	e018      	b.n	1d2a2 <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
   1d270:	2316      	movs	r3, #22
   1d272:	18fb      	adds	r3, r7, r3
   1d274:	781b      	ldrb	r3, [r3, #0]
   1d276:	220f      	movs	r2, #15
   1d278:	4013      	ands	r3, r2
   1d27a:	683a      	ldr	r2, [r7, #0]
   1d27c:	7b12      	ldrb	r2, [r2, #12]
   1d27e:	189b      	adds	r3, r3, r2
   1d280:	0018      	movs	r0, r3
   1d282:	4bb5      	ldr	r3, [pc, #724]	; (1d558 <_adc_set_config+0x370>)
   1d284:	4798      	blx	r3
			start_pin++;
   1d286:	2315      	movs	r3, #21
   1d288:	18fb      	adds	r3, r7, r3
   1d28a:	781a      	ldrb	r2, [r3, #0]
   1d28c:	2315      	movs	r3, #21
   1d28e:	18fb      	adds	r3, r7, r3
   1d290:	3201      	adds	r2, #1
   1d292:	701a      	strb	r2, [r3, #0]
			offset++;
   1d294:	2316      	movs	r3, #22
   1d296:	18fb      	adds	r3, r7, r3
   1d298:	781a      	ldrb	r2, [r3, #0]
   1d29a:	2316      	movs	r3, #22
   1d29c:	18fb      	adds	r3, r7, r3
   1d29e:	3201      	adds	r2, #1
   1d2a0:	701a      	strb	r2, [r3, #0]
		while (start_pin < end_pin) {
   1d2a2:	2315      	movs	r3, #21
   1d2a4:	18fa      	adds	r2, r7, r3
   1d2a6:	230f      	movs	r3, #15
   1d2a8:	18fb      	adds	r3, r7, r3
   1d2aa:	7812      	ldrb	r2, [r2, #0]
   1d2ac:	781b      	ldrb	r3, [r3, #0]
   1d2ae:	429a      	cmp	r2, r3
   1d2b0:	d3de      	bcc.n	1d270 <_adc_set_config+0x88>
		}
		_adc_configure_ain_pin(config->negative_input);
   1d2b2:	683b      	ldr	r3, [r7, #0]
   1d2b4:	89db      	ldrh	r3, [r3, #14]
   1d2b6:	0018      	movs	r0, r3
   1d2b8:	4ba7      	ldr	r3, [pc, #668]	; (1d558 <_adc_set_config+0x370>)
   1d2ba:	4798      	blx	r3
   1d2bc:	e009      	b.n	1d2d2 <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
   1d2be:	683b      	ldr	r3, [r7, #0]
   1d2c0:	7b1b      	ldrb	r3, [r3, #12]
   1d2c2:	0018      	movs	r0, r3
   1d2c4:	4ba4      	ldr	r3, [pc, #656]	; (1d558 <_adc_set_config+0x370>)
   1d2c6:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
   1d2c8:	683b      	ldr	r3, [r7, #0]
   1d2ca:	89db      	ldrh	r3, [r3, #14]
   1d2cc:	0018      	movs	r0, r3
   1d2ce:	4ba2      	ldr	r3, [pc, #648]	; (1d558 <_adc_set_config+0x370>)
   1d2d0:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
   1d2d2:	683b      	ldr	r3, [r7, #0]
   1d2d4:	7d5b      	ldrb	r3, [r3, #21]
   1d2d6:	009b      	lsls	r3, r3, #2
   1d2d8:	b2da      	uxtb	r2, r3
   1d2da:	693b      	ldr	r3, [r7, #16]
   1d2dc:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
   1d2de:	683b      	ldr	r3, [r7, #0]
   1d2e0:	7d9b      	ldrb	r3, [r3, #22]
   1d2e2:	01db      	lsls	r3, r3, #7
   1d2e4:	b25a      	sxtb	r2, r3
			(config->reference);
   1d2e6:	683b      	ldr	r3, [r7, #0]
   1d2e8:	785b      	ldrb	r3, [r3, #1]
   1d2ea:	b25b      	sxtb	r3, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
   1d2ec:	4313      	orrs	r3, r2
   1d2ee:	b25b      	sxtb	r3, r3
   1d2f0:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
   1d2f2:	693b      	ldr	r3, [r7, #16]
   1d2f4:	705a      	strb	r2, [r3, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
   1d2f6:	683b      	ldr	r3, [r7, #0]
   1d2f8:	791b      	ldrb	r3, [r3, #4]
   1d2fa:	2b34      	cmp	r3, #52	; 0x34
   1d2fc:	d846      	bhi.n	1d38c <_adc_set_config+0x1a4>
   1d2fe:	009a      	lsls	r2, r3, #2
   1d300:	4b96      	ldr	r3, [pc, #600]	; (1d55c <_adc_set_config+0x374>)
   1d302:	18d3      	adds	r3, r2, r3
   1d304:	681b      	ldr	r3, [r3, #0]
   1d306:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
   1d308:	231f      	movs	r3, #31
   1d30a:	18fb      	adds	r3, r7, r3
   1d30c:	683a      	ldr	r2, [r7, #0]
   1d30e:	7c52      	ldrb	r2, [r2, #17]
   1d310:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
   1d312:	2317      	movs	r3, #23
   1d314:	18fb      	adds	r3, r7, r3
   1d316:	683a      	ldr	r2, [r7, #0]
   1d318:	7c12      	ldrb	r2, [r2, #16]
   1d31a:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1d31c:	2310      	movs	r3, #16
   1d31e:	61bb      	str	r3, [r7, #24]
		break;
   1d320:	e036      	b.n	1d390 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
   1d322:	231f      	movs	r3, #31
   1d324:	18fb      	adds	r3, r7, r3
   1d326:	2201      	movs	r2, #1
   1d328:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
   1d32a:	2317      	movs	r3, #23
   1d32c:	18fb      	adds	r3, r7, r3
   1d32e:	2202      	movs	r2, #2
   1d330:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1d332:	2310      	movs	r3, #16
   1d334:	61bb      	str	r3, [r7, #24]
		break;
   1d336:	e02b      	b.n	1d390 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
   1d338:	231f      	movs	r3, #31
   1d33a:	18fb      	adds	r3, r7, r3
   1d33c:	2202      	movs	r2, #2
   1d33e:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
   1d340:	2317      	movs	r3, #23
   1d342:	18fb      	adds	r3, r7, r3
   1d344:	2204      	movs	r2, #4
   1d346:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1d348:	2310      	movs	r3, #16
   1d34a:	61bb      	str	r3, [r7, #24]
		break;
   1d34c:	e020      	b.n	1d390 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
   1d34e:	231f      	movs	r3, #31
   1d350:	18fb      	adds	r3, r7, r3
   1d352:	2201      	movs	r2, #1
   1d354:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
   1d356:	2317      	movs	r3, #23
   1d358:	18fb      	adds	r3, r7, r3
   1d35a:	2206      	movs	r2, #6
   1d35c:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1d35e:	2310      	movs	r3, #16
   1d360:	61bb      	str	r3, [r7, #24]
		break;
   1d362:	e015      	b.n	1d390 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
   1d364:	231f      	movs	r3, #31
   1d366:	18fb      	adds	r3, r7, r3
   1d368:	2200      	movs	r2, #0
   1d36a:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
   1d36c:	2317      	movs	r3, #23
   1d36e:	18fb      	adds	r3, r7, r3
   1d370:	2208      	movs	r2, #8
   1d372:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1d374:	2310      	movs	r3, #16
   1d376:	61bb      	str	r3, [r7, #24]
		break;
   1d378:	e00a      	b.n	1d390 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
   1d37a:	2330      	movs	r3, #48	; 0x30
   1d37c:	61bb      	str	r3, [r7, #24]
		break;
   1d37e:	e007      	b.n	1d390 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
   1d380:	2320      	movs	r3, #32
   1d382:	61bb      	str	r3, [r7, #24]
		break;
   1d384:	e004      	b.n	1d390 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
   1d386:	2300      	movs	r3, #0
   1d388:	61bb      	str	r3, [r7, #24]
		break;
   1d38a:	e001      	b.n	1d390 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
   1d38c:	2317      	movs	r3, #23
   1d38e:	e1ae      	b.n	1d6ee <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
   1d390:	231f      	movs	r3, #31
   1d392:	18fb      	adds	r3, r7, r3
   1d394:	781b      	ldrb	r3, [r3, #0]
   1d396:	011b      	lsls	r3, r3, #4
   1d398:	b2db      	uxtb	r3, r3
   1d39a:	2270      	movs	r2, #112	; 0x70
   1d39c:	4013      	ands	r3, r2
   1d39e:	b2da      	uxtb	r2, r3
   1d3a0:	2317      	movs	r3, #23
   1d3a2:	18fb      	adds	r3, r7, r3
   1d3a4:	781b      	ldrb	r3, [r3, #0]
   1d3a6:	4313      	orrs	r3, r2
   1d3a8:	b2da      	uxtb	r2, r3
   1d3aa:	693b      	ldr	r3, [r7, #16]
   1d3ac:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
   1d3ae:	683b      	ldr	r3, [r7, #0]
   1d3b0:	7ddb      	ldrb	r3, [r3, #23]
   1d3b2:	2b3f      	cmp	r3, #63	; 0x3f
   1d3b4:	d901      	bls.n	1d3ba <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
   1d3b6:	2317      	movs	r3, #23
   1d3b8:	e199      	b.n	1d6ee <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
   1d3ba:	683b      	ldr	r3, [r7, #0]
   1d3bc:	7dda      	ldrb	r2, [r3, #23]
		adc_module->SAMPCTRL.reg =
   1d3be:	693b      	ldr	r3, [r7, #16]
   1d3c0:	70da      	strb	r2, [r3, #3]
	}

	while (adc_is_syncing(module_inst)) {
   1d3c2:	46c0      	nop			; (mov r8, r8)
   1d3c4:	687b      	ldr	r3, [r7, #4]
   1d3c6:	0018      	movs	r0, r3
   1d3c8:	4b65      	ldr	r3, [pc, #404]	; (1d560 <_adc_set_config+0x378>)
   1d3ca:	4798      	blx	r3
   1d3cc:	1e03      	subs	r3, r0, #0
   1d3ce:	d1f9      	bne.n	1d3c4 <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
   1d3d0:	683b      	ldr	r3, [r7, #0]
   1d3d2:	885a      	ldrh	r2, [r3, #2]
   1d3d4:	69bb      	ldr	r3, [r7, #24]
   1d3d6:	b29b      	uxth	r3, r3
   1d3d8:	4313      	orrs	r3, r2
   1d3da:	b29a      	uxth	r2, r3
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
   1d3dc:	683b      	ldr	r3, [r7, #0]
   1d3de:	2124      	movs	r1, #36	; 0x24
   1d3e0:	5c5b      	ldrb	r3, [r3, r1]
   1d3e2:	b29b      	uxth	r3, r3
   1d3e4:	00db      	lsls	r3, r3, #3
   1d3e6:	b29b      	uxth	r3, r3
			resolution |
   1d3e8:	4313      	orrs	r3, r2
   1d3ea:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
   1d3ec:	683b      	ldr	r3, [r7, #0]
   1d3ee:	7d1b      	ldrb	r3, [r3, #20]
   1d3f0:	b29b      	uxth	r3, r3
   1d3f2:	009b      	lsls	r3, r3, #2
   1d3f4:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
   1d3f6:	4313      	orrs	r3, r2
   1d3f8:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
   1d3fa:	683b      	ldr	r3, [r7, #0]
   1d3fc:	7c9b      	ldrb	r3, [r3, #18]
   1d3fe:	b29b      	uxth	r3, r3
   1d400:	18db      	adds	r3, r3, r3
   1d402:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
   1d404:	4313      	orrs	r3, r2
   1d406:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
   1d408:	683b      	ldr	r3, [r7, #0]
   1d40a:	7cdb      	ldrb	r3, [r3, #19]
   1d40c:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
   1d40e:	4313      	orrs	r3, r2
   1d410:	b29a      	uxth	r2, r3
	adc_module->CTRLB.reg =
   1d412:	693b      	ldr	r3, [r7, #16]
   1d414:	809a      	strh	r2, [r3, #4]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
   1d416:	683b      	ldr	r3, [r7, #0]
   1d418:	7e1b      	ldrb	r3, [r3, #24]
   1d41a:	2b00      	cmp	r3, #0
   1d41c:	d100      	bne.n	1d420 <_adc_set_config+0x238>
   1d41e:	e0c4      	b.n	1d5aa <_adc_set_config+0x3c2>
		switch (resolution) {
   1d420:	69bb      	ldr	r3, [r7, #24]
   1d422:	2b10      	cmp	r3, #16
   1d424:	d100      	bne.n	1d428 <_adc_set_config+0x240>
   1d426:	e076      	b.n	1d516 <_adc_set_config+0x32e>
   1d428:	d802      	bhi.n	1d430 <_adc_set_config+0x248>
   1d42a:	2b00      	cmp	r3, #0
   1d42c:	d04d      	beq.n	1d4ca <_adc_set_config+0x2e2>
   1d42e:	e0bc      	b.n	1d5aa <_adc_set_config+0x3c2>
   1d430:	2b20      	cmp	r3, #32
   1d432:	d023      	beq.n	1d47c <_adc_set_config+0x294>
   1d434:	2b30      	cmp	r3, #48	; 0x30
   1d436:	d000      	beq.n	1d43a <_adc_set_config+0x252>
   1d438:	e0b7      	b.n	1d5aa <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
   1d43a:	683b      	ldr	r3, [r7, #0]
   1d43c:	7cdb      	ldrb	r3, [r3, #19]
   1d43e:	2b00      	cmp	r3, #0
   1d440:	d011      	beq.n	1d466 <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
   1d442:	683b      	ldr	r3, [r7, #0]
   1d444:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1d446:	2b7f      	cmp	r3, #127	; 0x7f
   1d448:	dc0b      	bgt.n	1d462 <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
   1d44a:	683b      	ldr	r3, [r7, #0]
   1d44c:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
   1d44e:	3380      	adds	r3, #128	; 0x80
   1d450:	db07      	blt.n	1d462 <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
   1d452:	683b      	ldr	r3, [r7, #0]
   1d454:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
   1d456:	2b7f      	cmp	r3, #127	; 0x7f
   1d458:	dc03      	bgt.n	1d462 <_adc_set_config+0x27a>
					config->window.window_upper_value < -128)) {
   1d45a:	683b      	ldr	r3, [r7, #0]
   1d45c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
   1d45e:	3380      	adds	r3, #128	; 0x80
   1d460:	da01      	bge.n	1d466 <_adc_set_config+0x27e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d462:	2317      	movs	r3, #23
   1d464:	e143      	b.n	1d6ee <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
   1d466:	683b      	ldr	r3, [r7, #0]
   1d468:	69db      	ldr	r3, [r3, #28]
   1d46a:	2bff      	cmp	r3, #255	; 0xff
   1d46c:	dc04      	bgt.n	1d478 <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
   1d46e:	683b      	ldr	r3, [r7, #0]
   1d470:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
   1d472:	2bff      	cmp	r3, #255	; 0xff
   1d474:	dc00      	bgt.n	1d478 <_adc_set_config+0x290>
   1d476:	e091      	b.n	1d59c <_adc_set_config+0x3b4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d478:	2317      	movs	r3, #23
   1d47a:	e138      	b.n	1d6ee <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
   1d47c:	683b      	ldr	r3, [r7, #0]
   1d47e:	7cdb      	ldrb	r3, [r3, #19]
   1d480:	2b00      	cmp	r3, #0
   1d482:	d015      	beq.n	1d4b0 <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
   1d484:	683b      	ldr	r3, [r7, #0]
   1d486:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1d488:	4a36      	ldr	r2, [pc, #216]	; (1d564 <_adc_set_config+0x37c>)
   1d48a:	4293      	cmp	r3, r2
   1d48c:	dc0e      	bgt.n	1d4ac <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
   1d48e:	683b      	ldr	r3, [r7, #0]
   1d490:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
   1d492:	4a35      	ldr	r2, [pc, #212]	; (1d568 <_adc_set_config+0x380>)
   1d494:	4293      	cmp	r3, r2
   1d496:	db09      	blt.n	1d4ac <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
   1d498:	683b      	ldr	r3, [r7, #0]
   1d49a:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
   1d49c:	4a31      	ldr	r2, [pc, #196]	; (1d564 <_adc_set_config+0x37c>)
   1d49e:	4293      	cmp	r3, r2
   1d4a0:	dc04      	bgt.n	1d4ac <_adc_set_config+0x2c4>
					config->window.window_upper_value < -512)) {
   1d4a2:	683b      	ldr	r3, [r7, #0]
   1d4a4:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
   1d4a6:	4a30      	ldr	r2, [pc, #192]	; (1d568 <_adc_set_config+0x380>)
   1d4a8:	4293      	cmp	r3, r2
   1d4aa:	da01      	bge.n	1d4b0 <_adc_set_config+0x2c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d4ac:	2317      	movs	r3, #23
   1d4ae:	e11e      	b.n	1d6ee <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
   1d4b0:	683b      	ldr	r3, [r7, #0]
   1d4b2:	69db      	ldr	r3, [r3, #28]
   1d4b4:	4a2d      	ldr	r2, [pc, #180]	; (1d56c <_adc_set_config+0x384>)
   1d4b6:	4293      	cmp	r3, r2
   1d4b8:	dc05      	bgt.n	1d4c6 <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
   1d4ba:	683b      	ldr	r3, [r7, #0]
   1d4bc:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
   1d4be:	4a2b      	ldr	r2, [pc, #172]	; (1d56c <_adc_set_config+0x384>)
   1d4c0:	4293      	cmp	r3, r2
   1d4c2:	dc00      	bgt.n	1d4c6 <_adc_set_config+0x2de>
   1d4c4:	e06c      	b.n	1d5a0 <_adc_set_config+0x3b8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d4c6:	2317      	movs	r3, #23
   1d4c8:	e111      	b.n	1d6ee <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
   1d4ca:	683b      	ldr	r3, [r7, #0]
   1d4cc:	7cdb      	ldrb	r3, [r3, #19]
   1d4ce:	2b00      	cmp	r3, #0
   1d4d0:	d015      	beq.n	1d4fe <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
   1d4d2:	683b      	ldr	r3, [r7, #0]
   1d4d4:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1d4d6:	4a26      	ldr	r2, [pc, #152]	; (1d570 <_adc_set_config+0x388>)
   1d4d8:	4293      	cmp	r3, r2
   1d4da:	dc0e      	bgt.n	1d4fa <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
   1d4dc:	683b      	ldr	r3, [r7, #0]
   1d4de:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
   1d4e0:	4a24      	ldr	r2, [pc, #144]	; (1d574 <_adc_set_config+0x38c>)
   1d4e2:	4293      	cmp	r3, r2
   1d4e4:	db09      	blt.n	1d4fa <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
   1d4e6:	683b      	ldr	r3, [r7, #0]
   1d4e8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
   1d4ea:	4a21      	ldr	r2, [pc, #132]	; (1d570 <_adc_set_config+0x388>)
   1d4ec:	4293      	cmp	r3, r2
   1d4ee:	dc04      	bgt.n	1d4fa <_adc_set_config+0x312>
					config->window.window_upper_value < -2048)) {
   1d4f0:	683b      	ldr	r3, [r7, #0]
   1d4f2:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
   1d4f4:	4a1f      	ldr	r2, [pc, #124]	; (1d574 <_adc_set_config+0x38c>)
   1d4f6:	4293      	cmp	r3, r2
   1d4f8:	da01      	bge.n	1d4fe <_adc_set_config+0x316>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d4fa:	2317      	movs	r3, #23
   1d4fc:	e0f7      	b.n	1d6ee <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
   1d4fe:	683b      	ldr	r3, [r7, #0]
   1d500:	69db      	ldr	r3, [r3, #28]
   1d502:	4a1d      	ldr	r2, [pc, #116]	; (1d578 <_adc_set_config+0x390>)
   1d504:	4293      	cmp	r3, r2
   1d506:	dc04      	bgt.n	1d512 <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
   1d508:	683b      	ldr	r3, [r7, #0]
   1d50a:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
   1d50c:	4a1a      	ldr	r2, [pc, #104]	; (1d578 <_adc_set_config+0x390>)
   1d50e:	4293      	cmp	r3, r2
   1d510:	dd48      	ble.n	1d5a4 <_adc_set_config+0x3bc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d512:	2317      	movs	r3, #23
   1d514:	e0eb      	b.n	1d6ee <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
   1d516:	683b      	ldr	r3, [r7, #0]
   1d518:	7cdb      	ldrb	r3, [r3, #19]
   1d51a:	2b00      	cmp	r3, #0
   1d51c:	d032      	beq.n	1d584 <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
   1d51e:	683b      	ldr	r3, [r7, #0]
   1d520:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1d522:	4a16      	ldr	r2, [pc, #88]	; (1d57c <_adc_set_config+0x394>)
   1d524:	4293      	cmp	r3, r2
   1d526:	dc0e      	bgt.n	1d546 <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
   1d528:	683b      	ldr	r3, [r7, #0]
   1d52a:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
   1d52c:	4a14      	ldr	r2, [pc, #80]	; (1d580 <_adc_set_config+0x398>)
   1d52e:	4293      	cmp	r3, r2
   1d530:	db09      	blt.n	1d546 <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
   1d532:	683b      	ldr	r3, [r7, #0]
   1d534:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
   1d536:	4a11      	ldr	r2, [pc, #68]	; (1d57c <_adc_set_config+0x394>)
   1d538:	4293      	cmp	r3, r2
   1d53a:	dc04      	bgt.n	1d546 <_adc_set_config+0x35e>
					config->window.window_upper_value < -32768)) {
   1d53c:	683b      	ldr	r3, [r7, #0]
   1d53e:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
   1d540:	4a0f      	ldr	r2, [pc, #60]	; (1d580 <_adc_set_config+0x398>)
   1d542:	4293      	cmp	r3, r2
   1d544:	da1e      	bge.n	1d584 <_adc_set_config+0x39c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d546:	2317      	movs	r3, #23
   1d548:	e0d1      	b.n	1d6ee <_adc_set_config+0x506>
   1d54a:	46c0      	nop			; (mov r8, r8)
   1d54c:	0001cfc1 	.word	0x0001cfc1
   1d550:	00024ab5 	.word	0x00024ab5
   1d554:	00024af9 	.word	0x00024af9
   1d558:	0001d171 	.word	0x0001d171
   1d55c:	0002aaec 	.word	0x0002aaec
   1d560:	0001d09d 	.word	0x0001d09d
   1d564:	000001ff 	.word	0x000001ff
   1d568:	fffffe00 	.word	0xfffffe00
   1d56c:	000003ff 	.word	0x000003ff
   1d570:	000007ff 	.word	0x000007ff
   1d574:	fffff800 	.word	0xfffff800
   1d578:	00000fff 	.word	0x00000fff
   1d57c:	00007fff 	.word	0x00007fff
   1d580:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
   1d584:	683b      	ldr	r3, [r7, #0]
   1d586:	69db      	ldr	r3, [r3, #28]
   1d588:	4a5b      	ldr	r2, [pc, #364]	; (1d6f8 <_adc_set_config+0x510>)
   1d58a:	4293      	cmp	r3, r2
   1d58c:	dc04      	bgt.n	1d598 <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
   1d58e:	683b      	ldr	r3, [r7, #0]
   1d590:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
   1d592:	4a59      	ldr	r2, [pc, #356]	; (1d6f8 <_adc_set_config+0x510>)
   1d594:	4293      	cmp	r3, r2
   1d596:	dd07      	ble.n	1d5a8 <_adc_set_config+0x3c0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d598:	2317      	movs	r3, #23
   1d59a:	e0a8      	b.n	1d6ee <_adc_set_config+0x506>
			break;
   1d59c:	46c0      	nop			; (mov r8, r8)
   1d59e:	e004      	b.n	1d5aa <_adc_set_config+0x3c2>
			break;
   1d5a0:	46c0      	nop			; (mov r8, r8)
   1d5a2:	e002      	b.n	1d5aa <_adc_set_config+0x3c2>
			break;
   1d5a4:	46c0      	nop			; (mov r8, r8)
   1d5a6:	e000      	b.n	1d5aa <_adc_set_config+0x3c2>
			}
			break;
   1d5a8:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
   1d5aa:	46c0      	nop			; (mov r8, r8)
   1d5ac:	687b      	ldr	r3, [r7, #4]
   1d5ae:	0018      	movs	r0, r3
   1d5b0:	4b52      	ldr	r3, [pc, #328]	; (1d6fc <_adc_set_config+0x514>)
   1d5b2:	4798      	blx	r3
   1d5b4:	1e03      	subs	r3, r0, #0
   1d5b6:	d1f9      	bne.n	1d5ac <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
   1d5b8:	683b      	ldr	r3, [r7, #0]
   1d5ba:	7e1a      	ldrb	r2, [r3, #24]
   1d5bc:	693b      	ldr	r3, [r7, #16]
   1d5be:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
   1d5c0:	46c0      	nop			; (mov r8, r8)
   1d5c2:	687b      	ldr	r3, [r7, #4]
   1d5c4:	0018      	movs	r0, r3
   1d5c6:	4b4d      	ldr	r3, [pc, #308]	; (1d6fc <_adc_set_config+0x514>)
   1d5c8:	4798      	blx	r3
   1d5ca:	1e03      	subs	r3, r0, #0
   1d5cc:	d1f9      	bne.n	1d5c2 <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
   1d5ce:	683b      	ldr	r3, [r7, #0]
   1d5d0:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
   1d5d2:	b29a      	uxth	r2, r3
   1d5d4:	693b      	ldr	r3, [r7, #16]
   1d5d6:	839a      	strh	r2, [r3, #28]

	while (adc_is_syncing(module_inst)) {
   1d5d8:	46c0      	nop			; (mov r8, r8)
   1d5da:	687b      	ldr	r3, [r7, #4]
   1d5dc:	0018      	movs	r0, r3
   1d5de:	4b47      	ldr	r3, [pc, #284]	; (1d6fc <_adc_set_config+0x514>)
   1d5e0:	4798      	blx	r3
   1d5e2:	1e03      	subs	r3, r0, #0
   1d5e4:	d1f9      	bne.n	1d5da <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
   1d5e6:	683b      	ldr	r3, [r7, #0]
   1d5e8:	6a1b      	ldr	r3, [r3, #32]
   1d5ea:	b29a      	uxth	r2, r3
   1d5ec:	693b      	ldr	r3, [r7, #16]
   1d5ee:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
   1d5f0:	2314      	movs	r3, #20
   1d5f2:	18fb      	adds	r3, r7, r3
   1d5f4:	683a      	ldr	r2, [r7, #0]
   1d5f6:	212c      	movs	r1, #44	; 0x2c
   1d5f8:	5c52      	ldrb	r2, [r2, r1]
   1d5fa:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
   1d5fc:	2314      	movs	r3, #20
   1d5fe:	18fb      	adds	r3, r7, r3
   1d600:	781b      	ldrb	r3, [r3, #0]
   1d602:	2b00      	cmp	r3, #0
   1d604:	d006      	beq.n	1d614 <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
   1d606:	2314      	movs	r3, #20
   1d608:	18fb      	adds	r3, r7, r3
   1d60a:	781a      	ldrb	r2, [r3, #0]
   1d60c:	2314      	movs	r3, #20
   1d60e:	18fb      	adds	r3, r7, r3
   1d610:	3a01      	subs	r2, #1
   1d612:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
   1d614:	2314      	movs	r3, #20
   1d616:	18fb      	adds	r3, r7, r3
   1d618:	781b      	ldrb	r3, [r3, #0]
   1d61a:	2b0f      	cmp	r3, #15
   1d61c:	d804      	bhi.n	1d628 <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
   1d61e:	683b      	ldr	r3, [r7, #0]
   1d620:	222b      	movs	r2, #43	; 0x2b
   1d622:	5c9b      	ldrb	r3, [r3, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
   1d624:	2b0f      	cmp	r3, #15
   1d626:	d901      	bls.n	1d62c <_adc_set_config+0x444>
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
   1d628:	2317      	movs	r3, #23
   1d62a:	e060      	b.n	1d6ee <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
   1d62c:	46c0      	nop			; (mov r8, r8)
   1d62e:	687b      	ldr	r3, [r7, #4]
   1d630:	0018      	movs	r0, r3
   1d632:	4b32      	ldr	r3, [pc, #200]	; (1d6fc <_adc_set_config+0x514>)
   1d634:	4798      	blx	r3
   1d636:	1e03      	subs	r3, r0, #0
   1d638:	d1f9      	bne.n	1d62e <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
   1d63a:	683b      	ldr	r3, [r7, #0]
   1d63c:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
   1d63e:	683a      	ldr	r2, [r7, #0]
   1d640:	212b      	movs	r1, #43	; 0x2b
   1d642:	5c52      	ldrb	r2, [r2, r1]
   1d644:	0512      	lsls	r2, r2, #20
			config->gain_factor |
   1d646:	4313      	orrs	r3, r2
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
   1d648:	2214      	movs	r2, #20
   1d64a:	18ba      	adds	r2, r7, r2
   1d64c:	7812      	ldrb	r2, [r2, #0]
   1d64e:	0412      	lsls	r2, r2, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
   1d650:	4313      	orrs	r3, r2
			config->negative_input |
   1d652:	683a      	ldr	r2, [r7, #0]
   1d654:	89d2      	ldrh	r2, [r2, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
   1d656:	4313      	orrs	r3, r2
			config->positive_input;
   1d658:	683a      	ldr	r2, [r7, #0]
   1d65a:	7b12      	ldrb	r2, [r2, #12]
			config->negative_input |
   1d65c:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
   1d65e:	693b      	ldr	r3, [r7, #16]
   1d660:	611a      	str	r2, [r3, #16]

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
   1d662:	683b      	ldr	r3, [r7, #0]
   1d664:	222a      	movs	r2, #42	; 0x2a
   1d666:	5c9a      	ldrb	r2, [r3, r2]
   1d668:	693b      	ldr	r3, [r7, #16]
   1d66a:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
   1d66c:	693b      	ldr	r3, [r7, #16]
   1d66e:	220f      	movs	r2, #15
   1d670:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
   1d672:	683b      	ldr	r3, [r7, #0]
   1d674:	2224      	movs	r2, #36	; 0x24
   1d676:	5c9b      	ldrb	r3, [r3, r2]
   1d678:	2b00      	cmp	r3, #0
   1d67a:	d01e      	beq.n	1d6ba <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
   1d67c:	683b      	ldr	r3, [r7, #0]
   1d67e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   1d680:	4a1f      	ldr	r2, [pc, #124]	; (1d700 <_adc_set_config+0x518>)
   1d682:	4293      	cmp	r3, r2
   1d684:	d901      	bls.n	1d68a <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
   1d686:	2317      	movs	r3, #23
   1d688:	e031      	b.n	1d6ee <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
   1d68a:	683b      	ldr	r3, [r7, #0]
   1d68c:	8cda      	ldrh	r2, [r3, #38]	; 0x26
   1d68e:	693b      	ldr	r3, [r7, #16]
   1d690:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
   1d692:	683b      	ldr	r3, [r7, #0]
   1d694:	2228      	movs	r2, #40	; 0x28
   1d696:	5e9b      	ldrsh	r3, [r3, r2]
   1d698:	4a1a      	ldr	r2, [pc, #104]	; (1d704 <_adc_set_config+0x51c>)
   1d69a:	4293      	cmp	r3, r2
   1d69c:	dc05      	bgt.n	1d6aa <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
   1d69e:	683b      	ldr	r3, [r7, #0]
   1d6a0:	2228      	movs	r2, #40	; 0x28
   1d6a2:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
   1d6a4:	4a18      	ldr	r2, [pc, #96]	; (1d708 <_adc_set_config+0x520>)
   1d6a6:	4293      	cmp	r3, r2
   1d6a8:	da01      	bge.n	1d6ae <_adc_set_config+0x4c6>
			return STATUS_ERR_INVALID_ARG;
   1d6aa:	2317      	movs	r3, #23
   1d6ac:	e01f      	b.n	1d6ee <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
   1d6ae:	683b      	ldr	r3, [r7, #0]
   1d6b0:	2228      	movs	r2, #40	; 0x28
   1d6b2:	5e9b      	ldrsh	r3, [r3, r2]
   1d6b4:	b29a      	uxth	r2, r3
   1d6b6:	693b      	ldr	r3, [r7, #16]
   1d6b8:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
   1d6ba:	4b14      	ldr	r3, [pc, #80]	; (1d70c <_adc_set_config+0x524>)
   1d6bc:	681b      	ldr	r3, [r3, #0]
   1d6be:	08db      	lsrs	r3, r3, #3
   1d6c0:	b29b      	uxth	r3, r3
   1d6c2:	021b      	lsls	r3, r3, #8
   1d6c4:	b29a      	uxth	r2, r3
   1d6c6:	23e0      	movs	r3, #224	; 0xe0
   1d6c8:	00db      	lsls	r3, r3, #3
   1d6ca:	4013      	ands	r3, r2
   1d6cc:	b29a      	uxth	r2, r3
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
   1d6ce:	4b10      	ldr	r3, [pc, #64]	; (1d710 <_adc_set_config+0x528>)
   1d6d0:	685c      	ldr	r4, [r3, #4]
   1d6d2:	681b      	ldr	r3, [r3, #0]
   1d6d4:	0161      	lsls	r1, r4, #5
   1d6d6:	0edd      	lsrs	r5, r3, #27
   1d6d8:	430d      	orrs	r5, r1
   1d6da:	0ee6      	lsrs	r6, r4, #27
   1d6dc:	b2ab      	uxth	r3, r5
   1d6de:	21ff      	movs	r1, #255	; 0xff
   1d6e0:	400b      	ands	r3, r1
   1d6e2:	b29b      	uxth	r3, r3
			) |
   1d6e4:	4313      	orrs	r3, r2
   1d6e6:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
   1d6e8:	693b      	ldr	r3, [r7, #16]
   1d6ea:	851a      	strh	r2, [r3, #40]	; 0x28
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
   1d6ec:	2300      	movs	r3, #0
}
   1d6ee:	0018      	movs	r0, r3
   1d6f0:	46bd      	mov	sp, r7
   1d6f2:	b009      	add	sp, #36	; 0x24
   1d6f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d6f6:	46c0      	nop			; (mov r8, r8)
   1d6f8:	0000ffff 	.word	0x0000ffff
   1d6fc:	0001d09d 	.word	0x0001d09d
   1d700:	00000fff 	.word	0x00000fff
   1d704:	000007ff 	.word	0x000007ff
   1d708:	fffff800 	.word	0xfffff800
   1d70c:	00806024 	.word	0x00806024
   1d710:	00806020 	.word	0x00806020

0001d714 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
   1d714:	b580      	push	{r7, lr}
   1d716:	b086      	sub	sp, #24
   1d718:	af00      	add	r7, sp, #0
   1d71a:	60f8      	str	r0, [r7, #12]
   1d71c:	60b9      	str	r1, [r7, #8]
   1d71e:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
   1d720:	68fb      	ldr	r3, [r7, #12]
   1d722:	68ba      	ldr	r2, [r7, #8]
   1d724:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
   1d726:	2380      	movs	r3, #128	; 0x80
   1d728:	025b      	lsls	r3, r3, #9
   1d72a:	0019      	movs	r1, r3
   1d72c:	2002      	movs	r0, #2
   1d72e:	4b32      	ldr	r3, [pc, #200]	; (1d7f8 <adc_init+0xe4>)
   1d730:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
   1d732:	68bb      	ldr	r3, [r7, #8]
   1d734:	781b      	ldrb	r3, [r3, #0]
   1d736:	b2db      	uxtb	r3, r3
   1d738:	001a      	movs	r2, r3
   1d73a:	2301      	movs	r3, #1
   1d73c:	4013      	ands	r3, r2
   1d73e:	d001      	beq.n	1d744 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
   1d740:	2305      	movs	r3, #5
   1d742:	e055      	b.n	1d7f0 <adc_init+0xdc>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
   1d744:	68bb      	ldr	r3, [r7, #8]
   1d746:	781b      	ldrb	r3, [r3, #0]
   1d748:	b2db      	uxtb	r3, r3
   1d74a:	001a      	movs	r2, r3
   1d74c:	2302      	movs	r3, #2
   1d74e:	4013      	ands	r3, r2
   1d750:	d001      	beq.n	1d756 <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
   1d752:	231c      	movs	r3, #28
   1d754:	e04c      	b.n	1d7f0 <adc_init+0xdc>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
   1d756:	687b      	ldr	r3, [r7, #4]
   1d758:	785a      	ldrb	r2, [r3, #1]
   1d75a:	68fb      	ldr	r3, [r7, #12]
   1d75c:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
   1d75e:	68fb      	ldr	r3, [r7, #12]
   1d760:	791b      	ldrb	r3, [r3, #4]
   1d762:	2b00      	cmp	r3, #0
   1d764:	d102      	bne.n	1d76c <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
   1d766:	2001      	movs	r0, #1
   1d768:	4b24      	ldr	r3, [pc, #144]	; (1d7fc <adc_init+0xe8>)
   1d76a:	4798      	blx	r3
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
   1d76c:	2317      	movs	r3, #23
   1d76e:	18fb      	adds	r3, r7, r3
   1d770:	2200      	movs	r2, #0
   1d772:	701a      	strb	r2, [r3, #0]
   1d774:	e00e      	b.n	1d794 <adc_init+0x80>
		module_inst->callback[i] = NULL;
   1d776:	2317      	movs	r3, #23
   1d778:	18fb      	adds	r3, r7, r3
   1d77a:	781a      	ldrb	r2, [r3, #0]
   1d77c:	68fb      	ldr	r3, [r7, #12]
   1d77e:	3202      	adds	r2, #2
   1d780:	0092      	lsls	r2, r2, #2
   1d782:	2100      	movs	r1, #0
   1d784:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
   1d786:	2317      	movs	r3, #23
   1d788:	18fb      	adds	r3, r7, r3
   1d78a:	781a      	ldrb	r2, [r3, #0]
   1d78c:	2317      	movs	r3, #23
   1d78e:	18fb      	adds	r3, r7, r3
   1d790:	3201      	adds	r2, #1
   1d792:	701a      	strb	r2, [r3, #0]
   1d794:	2317      	movs	r3, #23
   1d796:	18fb      	adds	r3, r7, r3
   1d798:	781b      	ldrb	r3, [r3, #0]
   1d79a:	2b02      	cmp	r3, #2
   1d79c:	d9eb      	bls.n	1d776 <adc_init+0x62>
	};

	module_inst->registered_callback_mask = 0;
   1d79e:	68fb      	ldr	r3, [r7, #12]
   1d7a0:	2200      	movs	r2, #0
   1d7a2:	769a      	strb	r2, [r3, #26]
	module_inst->enabled_callback_mask = 0;
   1d7a4:	68fb      	ldr	r3, [r7, #12]
   1d7a6:	2200      	movs	r2, #0
   1d7a8:	76da      	strb	r2, [r3, #27]
	module_inst->remaining_conversions = 0;
   1d7aa:	68fb      	ldr	r3, [r7, #12]
   1d7ac:	2200      	movs	r2, #0
   1d7ae:	831a      	strh	r2, [r3, #24]
	module_inst->job_status = STATUS_OK;
   1d7b0:	68fb      	ldr	r3, [r7, #12]
   1d7b2:	2200      	movs	r2, #0
   1d7b4:	771a      	strb	r2, [r3, #28]

	_adc_instances[0] = module_inst;
   1d7b6:	4b12      	ldr	r3, [pc, #72]	; (1d800 <adc_init+0xec>)
   1d7b8:	68fa      	ldr	r2, [r7, #12]
   1d7ba:	601a      	str	r2, [r3, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
   1d7bc:	687b      	ldr	r3, [r7, #4]
   1d7be:	222a      	movs	r2, #42	; 0x2a
   1d7c0:	5c9b      	ldrb	r3, [r3, r2]
   1d7c2:	2b00      	cmp	r3, #0
   1d7c4:	d10a      	bne.n	1d7dc <adc_init+0xc8>
			!config->freerunning) {
   1d7c6:	687b      	ldr	r3, [r7, #4]
   1d7c8:	7d1b      	ldrb	r3, [r3, #20]
   1d7ca:	2201      	movs	r2, #1
   1d7cc:	4053      	eors	r3, r2
   1d7ce:	b2db      	uxtb	r3, r3
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
   1d7d0:	2b00      	cmp	r3, #0
   1d7d2:	d003      	beq.n	1d7dc <adc_init+0xc8>
		module_inst->software_trigger = true;
   1d7d4:	68fb      	ldr	r3, [r7, #12]
   1d7d6:	2201      	movs	r2, #1
   1d7d8:	775a      	strb	r2, [r3, #29]
   1d7da:	e002      	b.n	1d7e2 <adc_init+0xce>
	} else {
		module_inst->software_trigger = false;
   1d7dc:	68fb      	ldr	r3, [r7, #12]
   1d7de:	2200      	movs	r2, #0
   1d7e0:	775a      	strb	r2, [r3, #29]
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
   1d7e2:	687a      	ldr	r2, [r7, #4]
   1d7e4:	68fb      	ldr	r3, [r7, #12]
   1d7e6:	0011      	movs	r1, r2
   1d7e8:	0018      	movs	r0, r3
   1d7ea:	4b06      	ldr	r3, [pc, #24]	; (1d804 <adc_init+0xf0>)
   1d7ec:	4798      	blx	r3
   1d7ee:	0003      	movs	r3, r0
}
   1d7f0:	0018      	movs	r0, r3
   1d7f2:	46bd      	mov	sp, r7
   1d7f4:	b006      	add	sp, #24
   1d7f6:	bd80      	pop	{r7, pc}
   1d7f8:	0001cfd9 	.word	0x0001cfd9
   1d7fc:	0001d05d 	.word	0x0001d05d
   1d800:	200008a8 	.word	0x200008a8
   1d804:	0001d1e9 	.word	0x0001d1e9

0001d808 <adc_is_syncing>:
{
   1d808:	b580      	push	{r7, lr}
   1d80a:	b084      	sub	sp, #16
   1d80c:	af00      	add	r7, sp, #0
   1d80e:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   1d810:	687b      	ldr	r3, [r7, #4]
   1d812:	681b      	ldr	r3, [r3, #0]
   1d814:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   1d816:	68fb      	ldr	r3, [r7, #12]
   1d818:	7e5b      	ldrb	r3, [r3, #25]
   1d81a:	b2db      	uxtb	r3, r3
   1d81c:	b25b      	sxtb	r3, r3
   1d81e:	2b00      	cmp	r3, #0
   1d820:	da01      	bge.n	1d826 <adc_is_syncing+0x1e>
		return true;
   1d822:	2301      	movs	r3, #1
   1d824:	e000      	b.n	1d828 <adc_is_syncing+0x20>
	return false;
   1d826:	2300      	movs	r3, #0
}
   1d828:	0018      	movs	r0, r3
   1d82a:	46bd      	mov	sp, r7
   1d82c:	b004      	add	sp, #16
   1d82e:	bd80      	pop	{r7, pc}

0001d830 <adc_start_conversion>:
{
   1d830:	b580      	push	{r7, lr}
   1d832:	b084      	sub	sp, #16
   1d834:	af00      	add	r7, sp, #0
   1d836:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   1d838:	687b      	ldr	r3, [r7, #4]
   1d83a:	681b      	ldr	r3, [r3, #0]
   1d83c:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
   1d83e:	46c0      	nop			; (mov r8, r8)
   1d840:	687b      	ldr	r3, [r7, #4]
   1d842:	0018      	movs	r0, r3
   1d844:	4b0b      	ldr	r3, [pc, #44]	; (1d874 <adc_start_conversion+0x44>)
   1d846:	4798      	blx	r3
   1d848:	1e03      	subs	r3, r0, #0
   1d84a:	d1f9      	bne.n	1d840 <adc_start_conversion+0x10>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   1d84c:	68fb      	ldr	r3, [r7, #12]
   1d84e:	7b1b      	ldrb	r3, [r3, #12]
   1d850:	b2db      	uxtb	r3, r3
   1d852:	2202      	movs	r2, #2
   1d854:	4313      	orrs	r3, r2
   1d856:	b2da      	uxtb	r2, r3
   1d858:	68fb      	ldr	r3, [r7, #12]
   1d85a:	731a      	strb	r2, [r3, #12]
	while (adc_is_syncing(module_inst)) {
   1d85c:	46c0      	nop			; (mov r8, r8)
   1d85e:	687b      	ldr	r3, [r7, #4]
   1d860:	0018      	movs	r0, r3
   1d862:	4b04      	ldr	r3, [pc, #16]	; (1d874 <adc_start_conversion+0x44>)
   1d864:	4798      	blx	r3
   1d866:	1e03      	subs	r3, r0, #0
   1d868:	d1f9      	bne.n	1d85e <adc_start_conversion+0x2e>
}
   1d86a:	46c0      	nop			; (mov r8, r8)
   1d86c:	46bd      	mov	sp, r7
   1d86e:	b004      	add	sp, #16
   1d870:	bd80      	pop	{r7, pc}
   1d872:	46c0      	nop			; (mov r8, r8)
   1d874:	0001d809 	.word	0x0001d809

0001d878 <adc_enable_interrupt>:
{
   1d878:	b580      	push	{r7, lr}
   1d87a:	b084      	sub	sp, #16
   1d87c:	af00      	add	r7, sp, #0
   1d87e:	6078      	str	r0, [r7, #4]
   1d880:	000a      	movs	r2, r1
   1d882:	1cfb      	adds	r3, r7, #3
   1d884:	701a      	strb	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
   1d886:	687b      	ldr	r3, [r7, #4]
   1d888:	681b      	ldr	r3, [r3, #0]
   1d88a:	60fb      	str	r3, [r7, #12]
	adc_module->INTENSET.reg = interrupt;
   1d88c:	68fb      	ldr	r3, [r7, #12]
   1d88e:	1cfa      	adds	r2, r7, #3
   1d890:	7812      	ldrb	r2, [r2, #0]
   1d892:	75da      	strb	r2, [r3, #23]
}
   1d894:	46c0      	nop			; (mov r8, r8)
   1d896:	46bd      	mov	sp, r7
   1d898:	b004      	add	sp, #16
   1d89a:	bd80      	pop	{r7, pc}

0001d89c <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   1d89c:	b580      	push	{r7, lr}
   1d89e:	b084      	sub	sp, #16
   1d8a0:	af00      	add	r7, sp, #0
   1d8a2:	6078      	str	r0, [r7, #4]
   1d8a4:	000a      	movs	r2, r1
   1d8a6:	1cfb      	adds	r3, r7, #3
   1d8a8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   1d8aa:	687b      	ldr	r3, [r7, #4]
   1d8ac:	681b      	ldr	r3, [r3, #0]
   1d8ae:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   1d8b0:	68fb      	ldr	r3, [r7, #12]
   1d8b2:	1cfa      	adds	r2, r7, #3
   1d8b4:	7812      	ldrb	r2, [r2, #0]
   1d8b6:	759a      	strb	r2, [r3, #22]
}
   1d8b8:	46c0      	nop			; (mov r8, r8)
   1d8ba:	46bd      	mov	sp, r7
   1d8bc:	b004      	add	sp, #16
   1d8be:	bd80      	pop	{r7, pc}

0001d8c0 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   1d8c0:	b580      	push	{r7, lr}
   1d8c2:	b084      	sub	sp, #16
   1d8c4:	af00      	add	r7, sp, #0
   1d8c6:	0002      	movs	r2, r0
   1d8c8:	1dfb      	adds	r3, r7, #7
   1d8ca:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   1d8cc:	1dfb      	adds	r3, r7, #7
   1d8ce:	781a      	ldrb	r2, [r3, #0]
   1d8d0:	4b47      	ldr	r3, [pc, #284]	; (1d9f0 <_adc_interrupt_handler+0x130>)
   1d8d2:	0092      	lsls	r2, r2, #2
   1d8d4:	58d3      	ldr	r3, [r2, r3]
   1d8d6:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   1d8d8:	68fb      	ldr	r3, [r7, #12]
   1d8da:	681b      	ldr	r3, [r3, #0]
   1d8dc:	7e1b      	ldrb	r3, [r3, #24]
   1d8de:	b2da      	uxtb	r2, r3
   1d8e0:	68fb      	ldr	r3, [r7, #12]
   1d8e2:	681b      	ldr	r3, [r3, #0]
   1d8e4:	7ddb      	ldrb	r3, [r3, #23]
   1d8e6:	b2db      	uxtb	r3, r3
   1d8e8:	4013      	ands	r3, r2
   1d8ea:	b2db      	uxtb	r3, r3
   1d8ec:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   1d8ee:	68bb      	ldr	r3, [r7, #8]
   1d8f0:	2201      	movs	r2, #1
   1d8f2:	4013      	ands	r3, r2
   1d8f4:	d045      	beq.n	1d982 <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   1d8f6:	68fb      	ldr	r3, [r7, #12]
   1d8f8:	681b      	ldr	r3, [r3, #0]
   1d8fa:	2201      	movs	r2, #1
   1d8fc:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   1d8fe:	46c0      	nop			; (mov r8, r8)
   1d900:	68fb      	ldr	r3, [r7, #12]
   1d902:	0018      	movs	r0, r3
   1d904:	4b3b      	ldr	r3, [pc, #236]	; (1d9f4 <_adc_interrupt_handler+0x134>)
   1d906:	4798      	blx	r3
   1d908:	1e03      	subs	r3, r0, #0
   1d90a:	d1f9      	bne.n	1d900 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   1d90c:	68fb      	ldr	r3, [r7, #12]
   1d90e:	695b      	ldr	r3, [r3, #20]
   1d910:	1c99      	adds	r1, r3, #2
   1d912:	68fa      	ldr	r2, [r7, #12]
   1d914:	6151      	str	r1, [r2, #20]
   1d916:	68fa      	ldr	r2, [r7, #12]
   1d918:	6812      	ldr	r2, [r2, #0]
   1d91a:	8b52      	ldrh	r2, [r2, #26]
   1d91c:	b292      	uxth	r2, r2
   1d91e:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   1d920:	68fb      	ldr	r3, [r7, #12]
   1d922:	8b1b      	ldrh	r3, [r3, #24]
   1d924:	b29b      	uxth	r3, r3
   1d926:	3b01      	subs	r3, #1
   1d928:	b29b      	uxth	r3, r3
   1d92a:	68fa      	ldr	r2, [r7, #12]
   1d92c:	1c19      	adds	r1, r3, #0
   1d92e:	8311      	strh	r1, [r2, #24]
   1d930:	2b00      	cmp	r3, #0
   1d932:	d008      	beq.n	1d946 <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   1d934:	68fb      	ldr	r3, [r7, #12]
   1d936:	7f5b      	ldrb	r3, [r3, #29]
   1d938:	2b00      	cmp	r3, #0
   1d93a:	d022      	beq.n	1d982 <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   1d93c:	68fb      	ldr	r3, [r7, #12]
   1d93e:	0018      	movs	r0, r3
   1d940:	4b2d      	ldr	r3, [pc, #180]	; (1d9f8 <_adc_interrupt_handler+0x138>)
   1d942:	4798      	blx	r3
   1d944:	e01d      	b.n	1d982 <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   1d946:	68fb      	ldr	r3, [r7, #12]
   1d948:	2101      	movs	r1, #1
   1d94a:	0018      	movs	r0, r3
   1d94c:	4b2b      	ldr	r3, [pc, #172]	; (1d9fc <_adc_interrupt_handler+0x13c>)
   1d94e:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   1d950:	68fb      	ldr	r3, [r7, #12]
   1d952:	7f1b      	ldrb	r3, [r3, #28]
   1d954:	b2db      	uxtb	r3, r3
   1d956:	2b05      	cmp	r3, #5
   1d958:	d113      	bne.n	1d982 <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   1d95a:	68fb      	ldr	r3, [r7, #12]
   1d95c:	2200      	movs	r2, #0
   1d95e:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   1d960:	68fb      	ldr	r3, [r7, #12]
   1d962:	7edb      	ldrb	r3, [r3, #27]
   1d964:	001a      	movs	r2, r3
   1d966:	2301      	movs	r3, #1
   1d968:	4013      	ands	r3, r2
   1d96a:	d00a      	beq.n	1d982 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   1d96c:	68fb      	ldr	r3, [r7, #12]
   1d96e:	7e9b      	ldrb	r3, [r3, #26]
   1d970:	001a      	movs	r2, r3
   1d972:	2301      	movs	r3, #1
   1d974:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   1d976:	d004      	beq.n	1d982 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   1d978:	68fb      	ldr	r3, [r7, #12]
   1d97a:	689b      	ldr	r3, [r3, #8]
   1d97c:	68fa      	ldr	r2, [r7, #12]
   1d97e:	0010      	movs	r0, r2
   1d980:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   1d982:	68bb      	ldr	r3, [r7, #8]
   1d984:	2204      	movs	r2, #4
   1d986:	4013      	ands	r3, r2
   1d988:	d014      	beq.n	1d9b4 <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   1d98a:	68fb      	ldr	r3, [r7, #12]
   1d98c:	681b      	ldr	r3, [r3, #0]
   1d98e:	2204      	movs	r2, #4
   1d990:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   1d992:	68fb      	ldr	r3, [r7, #12]
   1d994:	7edb      	ldrb	r3, [r3, #27]
   1d996:	001a      	movs	r2, r3
   1d998:	2302      	movs	r3, #2
   1d99a:	4013      	ands	r3, r2
   1d99c:	d00a      	beq.n	1d9b4 <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   1d99e:	68fb      	ldr	r3, [r7, #12]
   1d9a0:	7e9b      	ldrb	r3, [r3, #26]
   1d9a2:	001a      	movs	r2, r3
   1d9a4:	2302      	movs	r3, #2
   1d9a6:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   1d9a8:	d004      	beq.n	1d9b4 <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   1d9aa:	68fb      	ldr	r3, [r7, #12]
   1d9ac:	68db      	ldr	r3, [r3, #12]
   1d9ae:	68fa      	ldr	r2, [r7, #12]
   1d9b0:	0010      	movs	r0, r2
   1d9b2:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   1d9b4:	68bb      	ldr	r3, [r7, #8]
   1d9b6:	2202      	movs	r2, #2
   1d9b8:	4013      	ands	r3, r2
   1d9ba:	d014      	beq.n	1d9e6 <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   1d9bc:	68fb      	ldr	r3, [r7, #12]
   1d9be:	681b      	ldr	r3, [r3, #0]
   1d9c0:	2202      	movs	r2, #2
   1d9c2:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   1d9c4:	68fb      	ldr	r3, [r7, #12]
   1d9c6:	7edb      	ldrb	r3, [r3, #27]
   1d9c8:	001a      	movs	r2, r3
   1d9ca:	2304      	movs	r3, #4
   1d9cc:	4013      	ands	r3, r2
   1d9ce:	d00a      	beq.n	1d9e6 <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   1d9d0:	68fb      	ldr	r3, [r7, #12]
   1d9d2:	7e9b      	ldrb	r3, [r3, #26]
   1d9d4:	001a      	movs	r2, r3
   1d9d6:	2304      	movs	r3, #4
   1d9d8:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   1d9da:	d004      	beq.n	1d9e6 <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   1d9dc:	68fb      	ldr	r3, [r7, #12]
   1d9de:	691b      	ldr	r3, [r3, #16]
   1d9e0:	68fa      	ldr	r2, [r7, #12]
   1d9e2:	0010      	movs	r0, r2
   1d9e4:	4798      	blx	r3
		}
	}
}
   1d9e6:	46c0      	nop			; (mov r8, r8)
   1d9e8:	46bd      	mov	sp, r7
   1d9ea:	b004      	add	sp, #16
   1d9ec:	bd80      	pop	{r7, pc}
   1d9ee:	46c0      	nop			; (mov r8, r8)
   1d9f0:	200008a8 	.word	0x200008a8
   1d9f4:	0001d809 	.word	0x0001d809
   1d9f8:	0001d831 	.word	0x0001d831
   1d9fc:	0001d89d 	.word	0x0001d89d

0001da00 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   1da00:	b580      	push	{r7, lr}
   1da02:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   1da04:	2000      	movs	r0, #0
   1da06:	4b02      	ldr	r3, [pc, #8]	; (1da10 <ADC_Handler+0x10>)
   1da08:	4798      	blx	r3
}
   1da0a:	46c0      	nop			; (mov r8, r8)
   1da0c:	46bd      	mov	sp, r7
   1da0e:	bd80      	pop	{r7, pc}
   1da10:	0001d8c1 	.word	0x0001d8c1

0001da14 <adc_register_callback>:
 */
void adc_register_callback(
		struct adc_module *const module,
		adc_callback_t callback_func,
		enum adc_callback callback_type)
{
   1da14:	b580      	push	{r7, lr}
   1da16:	b084      	sub	sp, #16
   1da18:	af00      	add	r7, sp, #0
   1da1a:	60f8      	str	r0, [r7, #12]
   1da1c:	60b9      	str	r1, [r7, #8]
   1da1e:	1dfb      	adds	r3, r7, #7
   1da20:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   1da22:	1dfb      	adds	r3, r7, #7
   1da24:	781a      	ldrb	r2, [r3, #0]
   1da26:	68fb      	ldr	r3, [r7, #12]
   1da28:	3202      	adds	r2, #2
   1da2a:	0092      	lsls	r2, r2, #2
   1da2c:	68b9      	ldr	r1, [r7, #8]
   1da2e:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback_mask |= (1 << callback_type);
   1da30:	68fb      	ldr	r3, [r7, #12]
   1da32:	7e9b      	ldrb	r3, [r3, #26]
   1da34:	b25a      	sxtb	r2, r3
   1da36:	1dfb      	adds	r3, r7, #7
   1da38:	781b      	ldrb	r3, [r3, #0]
   1da3a:	2101      	movs	r1, #1
   1da3c:	4099      	lsls	r1, r3
   1da3e:	000b      	movs	r3, r1
   1da40:	b25b      	sxtb	r3, r3
   1da42:	4313      	orrs	r3, r2
   1da44:	b25b      	sxtb	r3, r3
   1da46:	b2da      	uxtb	r2, r3
   1da48:	68fb      	ldr	r3, [r7, #12]
   1da4a:	769a      	strb	r2, [r3, #26]
}
   1da4c:	46c0      	nop			; (mov r8, r8)
   1da4e:	46bd      	mov	sp, r7
   1da50:	b004      	add	sp, #16
   1da52:	bd80      	pop	{r7, pc}

0001da54 <adc_read_buffer_job>:
 */
enum status_code adc_read_buffer_job(
		struct adc_module *const module_inst,
		uint16_t *buffer,
		uint16_t samples)
{
   1da54:	b580      	push	{r7, lr}
   1da56:	b084      	sub	sp, #16
   1da58:	af00      	add	r7, sp, #0
   1da5a:	60f8      	str	r0, [r7, #12]
   1da5c:	60b9      	str	r1, [r7, #8]
   1da5e:	1dbb      	adds	r3, r7, #6
   1da60:	801a      	strh	r2, [r3, #0]
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
   1da62:	68fb      	ldr	r3, [r7, #12]
   1da64:	8b1b      	ldrh	r3, [r3, #24]
   1da66:	b29b      	uxth	r3, r3
   1da68:	2b00      	cmp	r3, #0
   1da6a:	d104      	bne.n	1da76 <adc_read_buffer_job+0x22>
			module_inst->job_status == STATUS_BUSY){
   1da6c:	68fb      	ldr	r3, [r7, #12]
   1da6e:	7f1b      	ldrb	r3, [r3, #28]
   1da70:	b2db      	uxtb	r3, r3
	if(module_inst->remaining_conversions != 0 ||
   1da72:	2b05      	cmp	r3, #5
   1da74:	d101      	bne.n	1da7a <adc_read_buffer_job+0x26>
		return STATUS_BUSY;
   1da76:	2305      	movs	r3, #5
   1da78:	e017      	b.n	1daaa <adc_read_buffer_job+0x56>
	}

	module_inst->job_status = STATUS_BUSY;
   1da7a:	68fb      	ldr	r3, [r7, #12]
   1da7c:	2205      	movs	r2, #5
   1da7e:	771a      	strb	r2, [r3, #28]
	module_inst->remaining_conversions = samples;
   1da80:	68fb      	ldr	r3, [r7, #12]
   1da82:	1dba      	adds	r2, r7, #6
   1da84:	8812      	ldrh	r2, [r2, #0]
   1da86:	831a      	strh	r2, [r3, #24]
	module_inst->job_buffer = buffer;
   1da88:	68fb      	ldr	r3, [r7, #12]
   1da8a:	68ba      	ldr	r2, [r7, #8]
   1da8c:	615a      	str	r2, [r3, #20]

	adc_enable_interrupt(module_inst, ADC_INTERRUPT_RESULT_READY);
   1da8e:	68fb      	ldr	r3, [r7, #12]
   1da90:	2101      	movs	r1, #1
   1da92:	0018      	movs	r0, r3
   1da94:	4b07      	ldr	r3, [pc, #28]	; (1dab4 <adc_read_buffer_job+0x60>)
   1da96:	4798      	blx	r3

	if(module_inst->software_trigger == true) {
   1da98:	68fb      	ldr	r3, [r7, #12]
   1da9a:	7f5b      	ldrb	r3, [r3, #29]
   1da9c:	2b00      	cmp	r3, #0
   1da9e:	d003      	beq.n	1daa8 <adc_read_buffer_job+0x54>
		adc_start_conversion(module_inst);
   1daa0:	68fb      	ldr	r3, [r7, #12]
   1daa2:	0018      	movs	r0, r3
   1daa4:	4b04      	ldr	r3, [pc, #16]	; (1dab8 <adc_read_buffer_job+0x64>)
   1daa6:	4798      	blx	r3
	}

	return STATUS_OK;
   1daa8:	2300      	movs	r3, #0
}
   1daaa:	0018      	movs	r0, r3
   1daac:	46bd      	mov	sp, r7
   1daae:	b004      	add	sp, #16
   1dab0:	bd80      	pop	{r7, pc}
   1dab2:	46c0      	nop			; (mov r8, r8)
   1dab4:	0001d879 	.word	0x0001d879
   1dab8:	0001d831 	.word	0x0001d831

0001dabc <system_interrupt_disable>:
{
   1dabc:	b580      	push	{r7, lr}
   1dabe:	b082      	sub	sp, #8
   1dac0:	af00      	add	r7, sp, #0
   1dac2:	0002      	movs	r2, r0
   1dac4:	1dfb      	adds	r3, r7, #7
   1dac6:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1dac8:	4a07      	ldr	r2, [pc, #28]	; (1dae8 <system_interrupt_disable+0x2c>)
   1daca:	1dfb      	adds	r3, r7, #7
   1dacc:	781b      	ldrb	r3, [r3, #0]
   1dace:	0019      	movs	r1, r3
   1dad0:	231f      	movs	r3, #31
   1dad2:	400b      	ands	r3, r1
   1dad4:	2101      	movs	r1, #1
   1dad6:	4099      	lsls	r1, r3
   1dad8:	000b      	movs	r3, r1
   1dada:	0019      	movs	r1, r3
   1dadc:	2380      	movs	r3, #128	; 0x80
   1dade:	50d1      	str	r1, [r2, r3]
}
   1dae0:	46c0      	nop			; (mov r8, r8)
   1dae2:	46bd      	mov	sp, r7
   1dae4:	b002      	add	sp, #8
   1dae6:	bd80      	pop	{r7, pc}
   1dae8:	e000e100 	.word	0xe000e100

0001daec <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   1daec:	b580      	push	{r7, lr}
   1daee:	b084      	sub	sp, #16
   1daf0:	af00      	add	r7, sp, #0
   1daf2:	0002      	movs	r2, r0
   1daf4:	1dfb      	adds	r3, r7, #7
   1daf6:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   1daf8:	1dfb      	adds	r3, r7, #7
   1dafa:	781a      	ldrb	r2, [r3, #0]
   1dafc:	4b37      	ldr	r3, [pc, #220]	; (1dbdc <_dac_interrupt_handler+0xf0>)
   1dafe:	0092      	lsls	r2, r2, #2
   1db00:	58d3      	ldr	r3, [r2, r3]
   1db02:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   1db04:	68fb      	ldr	r3, [r7, #12]
   1db06:	681b      	ldr	r3, [r3, #0]
   1db08:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   1db0a:	68bb      	ldr	r3, [r7, #8]
   1db0c:	799b      	ldrb	r3, [r3, #6]
   1db0e:	b2db      	uxtb	r3, r3
   1db10:	001a      	movs	r2, r3
   1db12:	2301      	movs	r3, #1
   1db14:	4013      	ands	r3, r2
   1db16:	d00e      	beq.n	1db36 <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   1db18:	68bb      	ldr	r3, [r7, #8]
   1db1a:	2201      	movs	r2, #1
   1db1c:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   1db1e:	68fb      	ldr	r3, [r7, #12]
   1db20:	3314      	adds	r3, #20
   1db22:	2b00      	cmp	r3, #0
   1db24:	d007      	beq.n	1db36 <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   1db26:	68fb      	ldr	r3, [r7, #12]
   1db28:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   1db2a:	2b00      	cmp	r3, #0
   1db2c:	d003      	beq.n	1db36 <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   1db2e:	68fb      	ldr	r3, [r7, #12]
   1db30:	699b      	ldr	r3, [r3, #24]
   1db32:	2000      	movs	r0, #0
   1db34:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   1db36:	68bb      	ldr	r3, [r7, #8]
   1db38:	799b      	ldrb	r3, [r3, #6]
   1db3a:	b2db      	uxtb	r3, r3
   1db3c:	001a      	movs	r2, r3
   1db3e:	2302      	movs	r3, #2
   1db40:	4013      	ands	r3, r2
   1db42:	d047      	beq.n	1dbd4 <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   1db44:	68bb      	ldr	r3, [r7, #8]
   1db46:	2202      	movs	r2, #2
   1db48:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   1db4a:	68fb      	ldr	r3, [r7, #12]
   1db4c:	899b      	ldrh	r3, [r3, #12]
   1db4e:	b29b      	uxth	r3, r3
   1db50:	2b00      	cmp	r3, #0
   1db52:	d033      	beq.n	1dbbc <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   1db54:	68fb      	ldr	r3, [r7, #12]
   1db56:	689a      	ldr	r2, [r3, #8]
   1db58:	68fb      	ldr	r3, [r7, #12]
   1db5a:	89db      	ldrh	r3, [r3, #14]
   1db5c:	b29b      	uxth	r3, r3
   1db5e:	1c59      	adds	r1, r3, #1
   1db60:	b288      	uxth	r0, r1
   1db62:	68f9      	ldr	r1, [r7, #12]
   1db64:	81c8      	strh	r0, [r1, #14]
   1db66:	005b      	lsls	r3, r3, #1
   1db68:	18d3      	adds	r3, r2, r3
   1db6a:	881b      	ldrh	r3, [r3, #0]
   1db6c:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   1db6e:	68bb      	ldr	r3, [r7, #8]
   1db70:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   1db72:	68fb      	ldr	r3, [r7, #12]
   1db74:	899b      	ldrh	r3, [r3, #12]
   1db76:	b29b      	uxth	r3, r3
   1db78:	3b01      	subs	r3, #1
   1db7a:	b29a      	uxth	r2, r3
   1db7c:	68fb      	ldr	r3, [r7, #12]
   1db7e:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   1db80:	68fb      	ldr	r3, [r7, #12]
   1db82:	899b      	ldrh	r3, [r3, #12]
   1db84:	b29b      	uxth	r3, r3
   1db86:	2b00      	cmp	r3, #0
   1db88:	d118      	bne.n	1dbbc <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   1db8a:	68fb      	ldr	r3, [r7, #12]
   1db8c:	2220      	movs	r2, #32
   1db8e:	2100      	movs	r1, #0
   1db90:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   1db92:	68bb      	ldr	r3, [r7, #8]
   1db94:	2202      	movs	r2, #2
   1db96:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   1db98:	68bb      	ldr	r3, [r7, #8]
   1db9a:	2202      	movs	r2, #2
   1db9c:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   1db9e:	2019      	movs	r0, #25
   1dba0:	4b0f      	ldr	r3, [pc, #60]	; (1dbe0 <_dac_interrupt_handler+0xf4>)
   1dba2:	4798      	blx	r3

				if ((module->callback) &&
   1dba4:	68fb      	ldr	r3, [r7, #12]
   1dba6:	3314      	adds	r3, #20
   1dba8:	2b00      	cmp	r3, #0
   1dbaa:	d007      	beq.n	1dbbc <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   1dbac:	68fb      	ldr	r3, [r7, #12]
   1dbae:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   1dbb0:	2b00      	cmp	r3, #0
   1dbb2:	d003      	beq.n	1dbbc <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   1dbb4:	68fb      	ldr	r3, [r7, #12]
   1dbb6:	69db      	ldr	r3, [r3, #28]
   1dbb8:	2000      	movs	r0, #0
   1dbba:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   1dbbc:	68fb      	ldr	r3, [r7, #12]
   1dbbe:	3314      	adds	r3, #20
   1dbc0:	2b00      	cmp	r3, #0
   1dbc2:	d007      	beq.n	1dbd4 <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   1dbc4:	68fb      	ldr	r3, [r7, #12]
   1dbc6:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   1dbc8:	2b00      	cmp	r3, #0
   1dbca:	d003      	beq.n	1dbd4 <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   1dbcc:	68fb      	ldr	r3, [r7, #12]
   1dbce:	695b      	ldr	r3, [r3, #20]
   1dbd0:	2000      	movs	r0, #0
   1dbd2:	4798      	blx	r3
		}
	}
}
   1dbd4:	46c0      	nop			; (mov r8, r8)
   1dbd6:	46bd      	mov	sp, r7
   1dbd8:	b004      	add	sp, #16
   1dbda:	bd80      	pop	{r7, pc}
   1dbdc:	200008ac 	.word	0x200008ac
   1dbe0:	0001dabd 	.word	0x0001dabd

0001dbe4 <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   1dbe4:	b580      	push	{r7, lr}
   1dbe6:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   1dbe8:	2000      	movs	r0, #0
   1dbea:	4b02      	ldr	r3, [pc, #8]	; (1dbf4 <DAC_Handler+0x10>)
   1dbec:	4798      	blx	r3
}
   1dbee:	46c0      	nop			; (mov r8, r8)
   1dbf0:	46bd      	mov	sp, r7
   1dbf2:	bd80      	pop	{r7, pc}
   1dbf4:	0001daed 	.word	0x0001daed

0001dbf8 <system_interrupt_enter_critical_section>:
{
   1dbf8:	b580      	push	{r7, lr}
   1dbfa:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   1dbfc:	4b02      	ldr	r3, [pc, #8]	; (1dc08 <system_interrupt_enter_critical_section+0x10>)
   1dbfe:	4798      	blx	r3
}
   1dc00:	46c0      	nop			; (mov r8, r8)
   1dc02:	46bd      	mov	sp, r7
   1dc04:	bd80      	pop	{r7, pc}
   1dc06:	46c0      	nop			; (mov r8, r8)
   1dc08:	00023cfd 	.word	0x00023cfd

0001dc0c <system_interrupt_leave_critical_section>:
{
   1dc0c:	b580      	push	{r7, lr}
   1dc0e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   1dc10:	4b02      	ldr	r3, [pc, #8]	; (1dc1c <system_interrupt_leave_critical_section+0x10>)
   1dc12:	4798      	blx	r3
}
   1dc14:	46c0      	nop			; (mov r8, r8)
   1dc16:	46bd      	mov	sp, r7
   1dc18:	bd80      	pop	{r7, pc}
   1dc1a:	46c0      	nop			; (mov r8, r8)
   1dc1c:	00023d51 	.word	0x00023d51

0001dc20 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   1dc20:	b580      	push	{r7, lr}
   1dc22:	b086      	sub	sp, #24
   1dc24:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   1dc26:	4b49      	ldr	r3, [pc, #292]	; (1dd4c <DMAC_Handler+0x12c>)
   1dc28:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   1dc2a:	4b49      	ldr	r3, [pc, #292]	; (1dd50 <DMAC_Handler+0x130>)
   1dc2c:	8c1b      	ldrh	r3, [r3, #32]
   1dc2e:	b29b      	uxth	r3, r3
   1dc30:	b2da      	uxtb	r2, r3
   1dc32:	2317      	movs	r3, #23
   1dc34:	18fb      	adds	r3, r7, r3
   1dc36:	210f      	movs	r1, #15
   1dc38:	400a      	ands	r2, r1
   1dc3a:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   1dc3c:	2317      	movs	r3, #23
   1dc3e:	18fb      	adds	r3, r7, r3
   1dc40:	781a      	ldrb	r2, [r3, #0]
   1dc42:	4b44      	ldr	r3, [pc, #272]	; (1dd54 <DMAC_Handler+0x134>)
   1dc44:	0092      	lsls	r2, r2, #2
   1dc46:	58d3      	ldr	r3, [r2, r3]
   1dc48:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   1dc4a:	4a41      	ldr	r2, [pc, #260]	; (1dd50 <DMAC_Handler+0x130>)
   1dc4c:	693b      	ldr	r3, [r7, #16]
   1dc4e:	781b      	ldrb	r3, [r3, #0]
   1dc50:	210f      	movs	r1, #15
   1dc52:	400b      	ands	r3, r1
   1dc54:	b2d9      	uxtb	r1, r3
   1dc56:	233f      	movs	r3, #63	; 0x3f
   1dc58:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   1dc5a:	493d      	ldr	r1, [pc, #244]	; (1dd50 <DMAC_Handler+0x130>)
   1dc5c:	230f      	movs	r3, #15
   1dc5e:	18fb      	adds	r3, r7, r3
   1dc60:	224e      	movs	r2, #78	; 0x4e
   1dc62:	5c8a      	ldrb	r2, [r1, r2]
   1dc64:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   1dc66:	693b      	ldr	r3, [r7, #16]
   1dc68:	781b      	ldrb	r3, [r3, #0]
   1dc6a:	4a3b      	ldr	r2, [pc, #236]	; (1dd58 <DMAC_Handler+0x138>)
   1dc6c:	011b      	lsls	r3, r3, #4
   1dc6e:	18d3      	adds	r3, r2, r3
   1dc70:	3302      	adds	r3, #2
   1dc72:	881b      	ldrh	r3, [r3, #0]
   1dc74:	b29b      	uxth	r3, r3
   1dc76:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   1dc78:	693b      	ldr	r3, [r7, #16]
   1dc7a:	781b      	ldrb	r3, [r3, #0]
   1dc7c:	4a37      	ldr	r2, [pc, #220]	; (1dd5c <DMAC_Handler+0x13c>)
   1dc7e:	011b      	lsls	r3, r3, #4
   1dc80:	18d3      	adds	r3, r2, r3
   1dc82:	3302      	adds	r3, #2
   1dc84:	881b      	ldrh	r3, [r3, #0]
   1dc86:	b29b      	uxth	r3, r3
   1dc88:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   1dc8a:	68ba      	ldr	r2, [r7, #8]
   1dc8c:	687b      	ldr	r3, [r7, #4]
   1dc8e:	1ad2      	subs	r2, r2, r3
   1dc90:	693b      	ldr	r3, [r7, #16]
   1dc92:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   1dc94:	230f      	movs	r3, #15
   1dc96:	18fb      	adds	r3, r7, r3
   1dc98:	781b      	ldrb	r3, [r3, #0]
   1dc9a:	2201      	movs	r2, #1
   1dc9c:	4013      	ands	r3, r2
   1dc9e:	d016      	beq.n	1dcce <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   1dca0:	4a2b      	ldr	r2, [pc, #172]	; (1dd50 <DMAC_Handler+0x130>)
   1dca2:	234e      	movs	r3, #78	; 0x4e
   1dca4:	2101      	movs	r1, #1
   1dca6:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   1dca8:	693b      	ldr	r3, [r7, #16]
   1dcaa:	2210      	movs	r2, #16
   1dcac:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   1dcae:	693b      	ldr	r3, [r7, #16]
   1dcb0:	7c1b      	ldrb	r3, [r3, #16]
   1dcb2:	001a      	movs	r2, r3
   1dcb4:	2301      	movs	r3, #1
   1dcb6:	4013      	ands	r3, r2
   1dcb8:	d042      	beq.n	1dd40 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   1dcba:	693b      	ldr	r3, [r7, #16]
   1dcbc:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   1dcbe:	2b00      	cmp	r3, #0
   1dcc0:	d03e      	beq.n	1dd40 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   1dcc2:	693b      	ldr	r3, [r7, #16]
   1dcc4:	685b      	ldr	r3, [r3, #4]
   1dcc6:	693a      	ldr	r2, [r7, #16]
   1dcc8:	0010      	movs	r0, r2
   1dcca:	4798      	blx	r3
   1dccc:	e038      	b.n	1dd40 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   1dcce:	230f      	movs	r3, #15
   1dcd0:	18fb      	adds	r3, r7, r3
   1dcd2:	781b      	ldrb	r3, [r3, #0]
   1dcd4:	2202      	movs	r2, #2
   1dcd6:	4013      	ands	r3, r2
   1dcd8:	d016      	beq.n	1dd08 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   1dcda:	4a1d      	ldr	r2, [pc, #116]	; (1dd50 <DMAC_Handler+0x130>)
   1dcdc:	234e      	movs	r3, #78	; 0x4e
   1dcde:	2102      	movs	r1, #2
   1dce0:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   1dce2:	693b      	ldr	r3, [r7, #16]
   1dce4:	2200      	movs	r2, #0
   1dce6:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   1dce8:	693b      	ldr	r3, [r7, #16]
   1dcea:	7c1b      	ldrb	r3, [r3, #16]
   1dcec:	001a      	movs	r2, r3
   1dcee:	2302      	movs	r3, #2
   1dcf0:	4013      	ands	r3, r2
   1dcf2:	d025      	beq.n	1dd40 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   1dcf4:	693b      	ldr	r3, [r7, #16]
   1dcf6:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   1dcf8:	2b00      	cmp	r3, #0
   1dcfa:	d021      	beq.n	1dd40 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   1dcfc:	693b      	ldr	r3, [r7, #16]
   1dcfe:	689b      	ldr	r3, [r3, #8]
   1dd00:	693a      	ldr	r2, [r7, #16]
   1dd02:	0010      	movs	r0, r2
   1dd04:	4798      	blx	r3
   1dd06:	e01b      	b.n	1dd40 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   1dd08:	230f      	movs	r3, #15
   1dd0a:	18fb      	adds	r3, r7, r3
   1dd0c:	781b      	ldrb	r3, [r3, #0]
   1dd0e:	2204      	movs	r2, #4
   1dd10:	4013      	ands	r3, r2
   1dd12:	d015      	beq.n	1dd40 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   1dd14:	4a0e      	ldr	r2, [pc, #56]	; (1dd50 <DMAC_Handler+0x130>)
   1dd16:	234e      	movs	r3, #78	; 0x4e
   1dd18:	2104      	movs	r1, #4
   1dd1a:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   1dd1c:	693b      	ldr	r3, [r7, #16]
   1dd1e:	2206      	movs	r2, #6
   1dd20:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   1dd22:	693b      	ldr	r3, [r7, #16]
   1dd24:	7c1b      	ldrb	r3, [r3, #16]
   1dd26:	001a      	movs	r2, r3
   1dd28:	2304      	movs	r3, #4
   1dd2a:	4013      	ands	r3, r2
   1dd2c:	d008      	beq.n	1dd40 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   1dd2e:	693b      	ldr	r3, [r7, #16]
   1dd30:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   1dd32:	2b00      	cmp	r3, #0
   1dd34:	d004      	beq.n	1dd40 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   1dd36:	693b      	ldr	r3, [r7, #16]
   1dd38:	68db      	ldr	r3, [r3, #12]
   1dd3a:	693a      	ldr	r2, [r7, #16]
   1dd3c:	0010      	movs	r0, r2
   1dd3e:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   1dd40:	4b07      	ldr	r3, [pc, #28]	; (1dd60 <DMAC_Handler+0x140>)
   1dd42:	4798      	blx	r3
}
   1dd44:	46c0      	nop			; (mov r8, r8)
   1dd46:	46bd      	mov	sp, r7
   1dd48:	b006      	add	sp, #24
   1dd4a:	bd80      	pop	{r7, pc}
   1dd4c:	0001dbf9 	.word	0x0001dbf9
   1dd50:	41004800 	.word	0x41004800
   1dd54:	200002a0 	.word	0x200002a0
   1dd58:	200008b0 	.word	0x200008b0
   1dd5c:	20000250 	.word	0x20000250
   1dd60:	0001dc0d 	.word	0x0001dc0d

0001dd64 <system_gclk_chan_get_config_defaults>:
{
   1dd64:	b580      	push	{r7, lr}
   1dd66:	b082      	sub	sp, #8
   1dd68:	af00      	add	r7, sp, #0
   1dd6a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1dd6c:	687b      	ldr	r3, [r7, #4]
   1dd6e:	2200      	movs	r2, #0
   1dd70:	701a      	strb	r2, [r3, #0]
}
   1dd72:	46c0      	nop			; (mov r8, r8)
   1dd74:	46bd      	mov	sp, r7
   1dd76:	b002      	add	sp, #8
   1dd78:	bd80      	pop	{r7, pc}
	...

0001dd7c <system_apb_clock_set_mask>:
{
   1dd7c:	b580      	push	{r7, lr}
   1dd7e:	b082      	sub	sp, #8
   1dd80:	af00      	add	r7, sp, #0
   1dd82:	0002      	movs	r2, r0
   1dd84:	6039      	str	r1, [r7, #0]
   1dd86:	1dfb      	adds	r3, r7, #7
   1dd88:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1dd8a:	1dfb      	adds	r3, r7, #7
   1dd8c:	781b      	ldrb	r3, [r3, #0]
   1dd8e:	2b01      	cmp	r3, #1
   1dd90:	d00a      	beq.n	1dda8 <system_apb_clock_set_mask+0x2c>
   1dd92:	2b02      	cmp	r3, #2
   1dd94:	d00f      	beq.n	1ddb6 <system_apb_clock_set_mask+0x3a>
   1dd96:	2b00      	cmp	r3, #0
   1dd98:	d114      	bne.n	1ddc4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1dd9a:	4b0e      	ldr	r3, [pc, #56]	; (1ddd4 <system_apb_clock_set_mask+0x58>)
   1dd9c:	4a0d      	ldr	r2, [pc, #52]	; (1ddd4 <system_apb_clock_set_mask+0x58>)
   1dd9e:	6991      	ldr	r1, [r2, #24]
   1dda0:	683a      	ldr	r2, [r7, #0]
   1dda2:	430a      	orrs	r2, r1
   1dda4:	619a      	str	r2, [r3, #24]
			break;
   1dda6:	e00f      	b.n	1ddc8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1dda8:	4b0a      	ldr	r3, [pc, #40]	; (1ddd4 <system_apb_clock_set_mask+0x58>)
   1ddaa:	4a0a      	ldr	r2, [pc, #40]	; (1ddd4 <system_apb_clock_set_mask+0x58>)
   1ddac:	69d1      	ldr	r1, [r2, #28]
   1ddae:	683a      	ldr	r2, [r7, #0]
   1ddb0:	430a      	orrs	r2, r1
   1ddb2:	61da      	str	r2, [r3, #28]
			break;
   1ddb4:	e008      	b.n	1ddc8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1ddb6:	4b07      	ldr	r3, [pc, #28]	; (1ddd4 <system_apb_clock_set_mask+0x58>)
   1ddb8:	4a06      	ldr	r2, [pc, #24]	; (1ddd4 <system_apb_clock_set_mask+0x58>)
   1ddba:	6a11      	ldr	r1, [r2, #32]
   1ddbc:	683a      	ldr	r2, [r7, #0]
   1ddbe:	430a      	orrs	r2, r1
   1ddc0:	621a      	str	r2, [r3, #32]
			break;
   1ddc2:	e001      	b.n	1ddc8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   1ddc4:	2317      	movs	r3, #23
   1ddc6:	e000      	b.n	1ddca <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1ddc8:	2300      	movs	r3, #0
}
   1ddca:	0018      	movs	r0, r3
   1ddcc:	46bd      	mov	sp, r7
   1ddce:	b002      	add	sp, #8
   1ddd0:	bd80      	pop	{r7, pc}
   1ddd2:	46c0      	nop			; (mov r8, r8)
   1ddd4:	40000400 	.word	0x40000400

0001ddd8 <system_pinmux_get_config_defaults>:
{
   1ddd8:	b580      	push	{r7, lr}
   1ddda:	b082      	sub	sp, #8
   1dddc:	af00      	add	r7, sp, #0
   1ddde:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1dde0:	687b      	ldr	r3, [r7, #4]
   1dde2:	2280      	movs	r2, #128	; 0x80
   1dde4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1dde6:	687b      	ldr	r3, [r7, #4]
   1dde8:	2200      	movs	r2, #0
   1ddea:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1ddec:	687b      	ldr	r3, [r7, #4]
   1ddee:	2201      	movs	r2, #1
   1ddf0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1ddf2:	687b      	ldr	r3, [r7, #4]
   1ddf4:	2200      	movs	r2, #0
   1ddf6:	70da      	strb	r2, [r3, #3]
}
   1ddf8:	46c0      	nop			; (mov r8, r8)
   1ddfa:	46bd      	mov	sp, r7
   1ddfc:	b002      	add	sp, #8
   1ddfe:	bd80      	pop	{r7, pc}

0001de00 <system_interrupt_enable>:
{
   1de00:	b580      	push	{r7, lr}
   1de02:	b082      	sub	sp, #8
   1de04:	af00      	add	r7, sp, #0
   1de06:	0002      	movs	r2, r0
   1de08:	1dfb      	adds	r3, r7, #7
   1de0a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1de0c:	4b06      	ldr	r3, [pc, #24]	; (1de28 <system_interrupt_enable+0x28>)
   1de0e:	1dfa      	adds	r2, r7, #7
   1de10:	7812      	ldrb	r2, [r2, #0]
   1de12:	0011      	movs	r1, r2
   1de14:	221f      	movs	r2, #31
   1de16:	400a      	ands	r2, r1
   1de18:	2101      	movs	r1, #1
   1de1a:	4091      	lsls	r1, r2
   1de1c:	000a      	movs	r2, r1
   1de1e:	601a      	str	r2, [r3, #0]
}
   1de20:	46c0      	nop			; (mov r8, r8)
   1de22:	46bd      	mov	sp, r7
   1de24:	b002      	add	sp, #8
   1de26:	bd80      	pop	{r7, pc}
   1de28:	e000e100 	.word	0xe000e100

0001de2c <_extint_get_eic_from_channel>:
{
   1de2c:	b580      	push	{r7, lr}
   1de2e:	b084      	sub	sp, #16
   1de30:	af00      	add	r7, sp, #0
   1de32:	0002      	movs	r2, r0
   1de34:	1dfb      	adds	r3, r7, #7
   1de36:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   1de38:	230f      	movs	r3, #15
   1de3a:	18fb      	adds	r3, r7, r3
   1de3c:	1dfa      	adds	r2, r7, #7
   1de3e:	7812      	ldrb	r2, [r2, #0]
   1de40:	0952      	lsrs	r2, r2, #5
   1de42:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   1de44:	230f      	movs	r3, #15
   1de46:	18fb      	adds	r3, r7, r3
   1de48:	781b      	ldrb	r3, [r3, #0]
   1de4a:	2b00      	cmp	r3, #0
   1de4c:	d10c      	bne.n	1de68 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1de4e:	4b09      	ldr	r3, [pc, #36]	; (1de74 <_extint_get_eic_from_channel+0x48>)
   1de50:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   1de52:	230f      	movs	r3, #15
   1de54:	18fb      	adds	r3, r7, r3
   1de56:	781b      	ldrb	r3, [r3, #0]
   1de58:	009b      	lsls	r3, r3, #2
   1de5a:	2210      	movs	r2, #16
   1de5c:	4694      	mov	ip, r2
   1de5e:	44bc      	add	ip, r7
   1de60:	4463      	add	r3, ip
   1de62:	3b08      	subs	r3, #8
   1de64:	681b      	ldr	r3, [r3, #0]
   1de66:	e000      	b.n	1de6a <_extint_get_eic_from_channel+0x3e>
		return NULL;
   1de68:	2300      	movs	r3, #0
}
   1de6a:	0018      	movs	r0, r3
   1de6c:	46bd      	mov	sp, r7
   1de6e:	b004      	add	sp, #16
   1de70:	bd80      	pop	{r7, pc}
   1de72:	46c0      	nop			; (mov r8, r8)
   1de74:	40001800 	.word	0x40001800

0001de78 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   1de78:	b580      	push	{r7, lr}
   1de7a:	b082      	sub	sp, #8
   1de7c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1de7e:	4b0f      	ldr	r3, [pc, #60]	; (1debc <extint_is_syncing+0x44>)
   1de80:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1de82:	2300      	movs	r3, #0
   1de84:	607b      	str	r3, [r7, #4]
   1de86:	e011      	b.n	1deac <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   1de88:	687b      	ldr	r3, [r7, #4]
   1de8a:	009b      	lsls	r3, r3, #2
   1de8c:	2208      	movs	r2, #8
   1de8e:	4694      	mov	ip, r2
   1de90:	44bc      	add	ip, r7
   1de92:	4463      	add	r3, ip
   1de94:	3b08      	subs	r3, #8
   1de96:	681b      	ldr	r3, [r3, #0]
   1de98:	785b      	ldrb	r3, [r3, #1]
   1de9a:	b2db      	uxtb	r3, r3
   1de9c:	b25b      	sxtb	r3, r3
   1de9e:	2b00      	cmp	r3, #0
   1dea0:	da01      	bge.n	1dea6 <extint_is_syncing+0x2e>
			return true;
   1dea2:	2301      	movs	r3, #1
   1dea4:	e006      	b.n	1deb4 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1dea6:	687b      	ldr	r3, [r7, #4]
   1dea8:	3301      	adds	r3, #1
   1deaa:	607b      	str	r3, [r7, #4]
   1deac:	687b      	ldr	r3, [r7, #4]
   1deae:	2b00      	cmp	r3, #0
   1deb0:	d0ea      	beq.n	1de88 <extint_is_syncing+0x10>
		}
	}
	return false;
   1deb2:	2300      	movs	r3, #0
}
   1deb4:	0018      	movs	r0, r3
   1deb6:	46bd      	mov	sp, r7
   1deb8:	b002      	add	sp, #8
   1deba:	bd80      	pop	{r7, pc}
   1debc:	40001800 	.word	0x40001800

0001dec0 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   1dec0:	b580      	push	{r7, lr}
   1dec2:	b084      	sub	sp, #16
   1dec4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1dec6:	4b2d      	ldr	r3, [pc, #180]	; (1df7c <_system_extint_init+0xbc>)
   1dec8:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   1deca:	2140      	movs	r1, #64	; 0x40
   1decc:	2000      	movs	r0, #0
   1dece:	4b2c      	ldr	r3, [pc, #176]	; (1df80 <_system_extint_init+0xc0>)
   1ded0:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1ded2:	003b      	movs	r3, r7
   1ded4:	0018      	movs	r0, r3
   1ded6:	4b2b      	ldr	r3, [pc, #172]	; (1df84 <_system_extint_init+0xc4>)
   1ded8:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   1deda:	003b      	movs	r3, r7
   1dedc:	2206      	movs	r2, #6
   1dede:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   1dee0:	003b      	movs	r3, r7
   1dee2:	0019      	movs	r1, r3
   1dee4:	2005      	movs	r0, #5
   1dee6:	4b28      	ldr	r3, [pc, #160]	; (1df88 <_system_extint_init+0xc8>)
   1dee8:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   1deea:	2005      	movs	r0, #5
   1deec:	4b27      	ldr	r3, [pc, #156]	; (1df8c <_system_extint_init+0xcc>)
   1deee:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1def0:	2300      	movs	r3, #0
   1def2:	60fb      	str	r3, [r7, #12]
   1def4:	e018      	b.n	1df28 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   1def6:	68fb      	ldr	r3, [r7, #12]
   1def8:	009b      	lsls	r3, r3, #2
   1defa:	2210      	movs	r2, #16
   1defc:	4694      	mov	ip, r2
   1defe:	44bc      	add	ip, r7
   1df00:	4463      	add	r3, ip
   1df02:	3b0c      	subs	r3, #12
   1df04:	681a      	ldr	r2, [r3, #0]
   1df06:	68fb      	ldr	r3, [r7, #12]
   1df08:	009b      	lsls	r3, r3, #2
   1df0a:	2110      	movs	r1, #16
   1df0c:	468c      	mov	ip, r1
   1df0e:	44bc      	add	ip, r7
   1df10:	4463      	add	r3, ip
   1df12:	3b0c      	subs	r3, #12
   1df14:	681b      	ldr	r3, [r3, #0]
   1df16:	781b      	ldrb	r3, [r3, #0]
   1df18:	b2db      	uxtb	r3, r3
   1df1a:	2101      	movs	r1, #1
   1df1c:	430b      	orrs	r3, r1
   1df1e:	b2db      	uxtb	r3, r3
   1df20:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1df22:	68fb      	ldr	r3, [r7, #12]
   1df24:	3301      	adds	r3, #1
   1df26:	60fb      	str	r3, [r7, #12]
   1df28:	68fb      	ldr	r3, [r7, #12]
   1df2a:	2b00      	cmp	r3, #0
   1df2c:	d0e3      	beq.n	1def6 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   1df2e:	46c0      	nop			; (mov r8, r8)
   1df30:	4b17      	ldr	r3, [pc, #92]	; (1df90 <_system_extint_init+0xd0>)
   1df32:	4798      	blx	r3
   1df34:	1e03      	subs	r3, r0, #0
   1df36:	d1fb      	bne.n	1df30 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   1df38:	230b      	movs	r3, #11
   1df3a:	18fb      	adds	r3, r7, r3
   1df3c:	2200      	movs	r2, #0
   1df3e:	701a      	strb	r2, [r3, #0]
   1df40:	e00d      	b.n	1df5e <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   1df42:	230b      	movs	r3, #11
   1df44:	18fb      	adds	r3, r7, r3
   1df46:	781a      	ldrb	r2, [r3, #0]
   1df48:	4b12      	ldr	r3, [pc, #72]	; (1df94 <_system_extint_init+0xd4>)
   1df4a:	0092      	lsls	r2, r2, #2
   1df4c:	2100      	movs	r1, #0
   1df4e:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   1df50:	230b      	movs	r3, #11
   1df52:	18fb      	adds	r3, r7, r3
   1df54:	781a      	ldrb	r2, [r3, #0]
   1df56:	230b      	movs	r3, #11
   1df58:	18fb      	adds	r3, r7, r3
   1df5a:	3201      	adds	r2, #1
   1df5c:	701a      	strb	r2, [r3, #0]
   1df5e:	230b      	movs	r3, #11
   1df60:	18fb      	adds	r3, r7, r3
   1df62:	781b      	ldrb	r3, [r3, #0]
   1df64:	2b0f      	cmp	r3, #15
   1df66:	d9ec      	bls.n	1df42 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   1df68:	2004      	movs	r0, #4
   1df6a:	4b0b      	ldr	r3, [pc, #44]	; (1df98 <_system_extint_init+0xd8>)
   1df6c:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   1df6e:	4b0b      	ldr	r3, [pc, #44]	; (1df9c <_system_extint_init+0xdc>)
   1df70:	4798      	blx	r3
}
   1df72:	46c0      	nop			; (mov r8, r8)
   1df74:	46bd      	mov	sp, r7
   1df76:	b004      	add	sp, #16
   1df78:	bd80      	pop	{r7, pc}
   1df7a:	46c0      	nop			; (mov r8, r8)
   1df7c:	40001800 	.word	0x40001800
   1df80:	0001dd7d 	.word	0x0001dd7d
   1df84:	0001dd65 	.word	0x0001dd65
   1df88:	00024ab5 	.word	0x00024ab5
   1df8c:	00024af9 	.word	0x00024af9
   1df90:	0001de79 	.word	0x0001de79
   1df94:	20000900 	.word	0x20000900
   1df98:	0001de01 	.word	0x0001de01
   1df9c:	0001dfa1 	.word	0x0001dfa1

0001dfa0 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   1dfa0:	b580      	push	{r7, lr}
   1dfa2:	b082      	sub	sp, #8
   1dfa4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1dfa6:	4b15      	ldr	r3, [pc, #84]	; (1dffc <_extint_enable+0x5c>)
   1dfa8:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1dfaa:	2300      	movs	r3, #0
   1dfac:	607b      	str	r3, [r7, #4]
   1dfae:	e018      	b.n	1dfe2 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   1dfb0:	687b      	ldr	r3, [r7, #4]
   1dfb2:	009b      	lsls	r3, r3, #2
   1dfb4:	2208      	movs	r2, #8
   1dfb6:	4694      	mov	ip, r2
   1dfb8:	44bc      	add	ip, r7
   1dfba:	4463      	add	r3, ip
   1dfbc:	3b08      	subs	r3, #8
   1dfbe:	681a      	ldr	r2, [r3, #0]
   1dfc0:	687b      	ldr	r3, [r7, #4]
   1dfc2:	009b      	lsls	r3, r3, #2
   1dfc4:	2108      	movs	r1, #8
   1dfc6:	468c      	mov	ip, r1
   1dfc8:	44bc      	add	ip, r7
   1dfca:	4463      	add	r3, ip
   1dfcc:	3b08      	subs	r3, #8
   1dfce:	681b      	ldr	r3, [r3, #0]
   1dfd0:	781b      	ldrb	r3, [r3, #0]
   1dfd2:	b2db      	uxtb	r3, r3
   1dfd4:	2102      	movs	r1, #2
   1dfd6:	430b      	orrs	r3, r1
   1dfd8:	b2db      	uxtb	r3, r3
   1dfda:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1dfdc:	687b      	ldr	r3, [r7, #4]
   1dfde:	3301      	adds	r3, #1
   1dfe0:	607b      	str	r3, [r7, #4]
   1dfe2:	687b      	ldr	r3, [r7, #4]
   1dfe4:	2b00      	cmp	r3, #0
   1dfe6:	d0e3      	beq.n	1dfb0 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   1dfe8:	46c0      	nop			; (mov r8, r8)
   1dfea:	4b05      	ldr	r3, [pc, #20]	; (1e000 <_extint_enable+0x60>)
   1dfec:	4798      	blx	r3
   1dfee:	1e03      	subs	r3, r0, #0
   1dff0:	d1fb      	bne.n	1dfea <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   1dff2:	46c0      	nop			; (mov r8, r8)
   1dff4:	46bd      	mov	sp, r7
   1dff6:	b002      	add	sp, #8
   1dff8:	bd80      	pop	{r7, pc}
   1dffa:	46c0      	nop			; (mov r8, r8)
   1dffc:	40001800 	.word	0x40001800
   1e000:	0001de79 	.word	0x0001de79

0001e004 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   1e004:	b580      	push	{r7, lr}
   1e006:	b082      	sub	sp, #8
   1e008:	af00      	add	r7, sp, #0
   1e00a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   1e00c:	687b      	ldr	r3, [r7, #4]
   1e00e:	2200      	movs	r2, #0
   1e010:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   1e012:	687b      	ldr	r3, [r7, #4]
   1e014:	2200      	movs	r2, #0
   1e016:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   1e018:	687b      	ldr	r3, [r7, #4]
   1e01a:	2201      	movs	r2, #1
   1e01c:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   1e01e:	687b      	ldr	r3, [r7, #4]
   1e020:	2201      	movs	r2, #1
   1e022:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   1e024:	687b      	ldr	r3, [r7, #4]
   1e026:	2200      	movs	r2, #0
   1e028:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   1e02a:	687b      	ldr	r3, [r7, #4]
   1e02c:	2202      	movs	r2, #2
   1e02e:	72da      	strb	r2, [r3, #11]
}
   1e030:	46c0      	nop			; (mov r8, r8)
   1e032:	46bd      	mov	sp, r7
   1e034:	b002      	add	sp, #8
   1e036:	bd80      	pop	{r7, pc}

0001e038 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   1e038:	b580      	push	{r7, lr}
   1e03a:	b086      	sub	sp, #24
   1e03c:	af00      	add	r7, sp, #0
   1e03e:	0002      	movs	r2, r0
   1e040:	6039      	str	r1, [r7, #0]
   1e042:	1dfb      	adds	r3, r7, #7
   1e044:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   1e046:	2308      	movs	r3, #8
   1e048:	18fb      	adds	r3, r7, r3
   1e04a:	0018      	movs	r0, r3
   1e04c:	4b36      	ldr	r3, [pc, #216]	; (1e128 <extint_chan_set_config+0xf0>)
   1e04e:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   1e050:	683b      	ldr	r3, [r7, #0]
   1e052:	685b      	ldr	r3, [r3, #4]
   1e054:	b2da      	uxtb	r2, r3
   1e056:	2308      	movs	r3, #8
   1e058:	18fb      	adds	r3, r7, r3
   1e05a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1e05c:	2308      	movs	r3, #8
   1e05e:	18fb      	adds	r3, r7, r3
   1e060:	2200      	movs	r2, #0
   1e062:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   1e064:	683b      	ldr	r3, [r7, #0]
   1e066:	7a1a      	ldrb	r2, [r3, #8]
   1e068:	2308      	movs	r3, #8
   1e06a:	18fb      	adds	r3, r7, r3
   1e06c:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   1e06e:	683b      	ldr	r3, [r7, #0]
   1e070:	681b      	ldr	r3, [r3, #0]
   1e072:	b2db      	uxtb	r3, r3
   1e074:	2208      	movs	r2, #8
   1e076:	18ba      	adds	r2, r7, r2
   1e078:	0011      	movs	r1, r2
   1e07a:	0018      	movs	r0, r3
   1e07c:	4b2b      	ldr	r3, [pc, #172]	; (1e12c <extint_chan_set_config+0xf4>)
   1e07e:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   1e080:	1dfb      	adds	r3, r7, #7
   1e082:	781b      	ldrb	r3, [r3, #0]
   1e084:	0018      	movs	r0, r3
   1e086:	4b2a      	ldr	r3, [pc, #168]	; (1e130 <extint_chan_set_config+0xf8>)
   1e088:	4798      	blx	r3
   1e08a:	0003      	movs	r3, r0
   1e08c:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   1e08e:	1dfb      	adds	r3, r7, #7
   1e090:	781b      	ldrb	r3, [r3, #0]
   1e092:	2207      	movs	r2, #7
   1e094:	4013      	ands	r3, r2
   1e096:	009b      	lsls	r3, r3, #2
   1e098:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   1e09a:	683b      	ldr	r3, [r7, #0]
   1e09c:	7adb      	ldrb	r3, [r3, #11]
   1e09e:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   1e0a0:	683b      	ldr	r3, [r7, #0]
   1e0a2:	7a9b      	ldrb	r3, [r3, #10]
   1e0a4:	2b00      	cmp	r3, #0
   1e0a6:	d003      	beq.n	1e0b0 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   1e0a8:	697b      	ldr	r3, [r7, #20]
   1e0aa:	2208      	movs	r2, #8
   1e0ac:	4313      	orrs	r3, r2
   1e0ae:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   1e0b0:	1dfb      	adds	r3, r7, #7
   1e0b2:	781b      	ldrb	r3, [r3, #0]
   1e0b4:	08db      	lsrs	r3, r3, #3
   1e0b6:	b2db      	uxtb	r3, r3
   1e0b8:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   1e0ba:	1dfb      	adds	r3, r7, #7
   1e0bc:	781b      	ldrb	r3, [r3, #0]
   1e0be:	08db      	lsrs	r3, r3, #3
   1e0c0:	b2db      	uxtb	r3, r3
   1e0c2:	001a      	movs	r2, r3
   1e0c4:	693b      	ldr	r3, [r7, #16]
   1e0c6:	3206      	adds	r2, #6
   1e0c8:	0092      	lsls	r2, r2, #2
   1e0ca:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   1e0cc:	210f      	movs	r1, #15
   1e0ce:	68fa      	ldr	r2, [r7, #12]
   1e0d0:	4091      	lsls	r1, r2
   1e0d2:	000a      	movs	r2, r1
   1e0d4:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   1e0d6:	401a      	ands	r2, r3
			(new_config << config_pos);
   1e0d8:	6979      	ldr	r1, [r7, #20]
   1e0da:	68fb      	ldr	r3, [r7, #12]
   1e0dc:	4099      	lsls	r1, r3
   1e0de:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   1e0e0:	431a      	orrs	r2, r3
   1e0e2:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   1e0e4:	693b      	ldr	r3, [r7, #16]
   1e0e6:	1d82      	adds	r2, r0, #6
   1e0e8:	0092      	lsls	r2, r2, #2
   1e0ea:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   1e0ec:	683b      	ldr	r3, [r7, #0]
   1e0ee:	7a5b      	ldrb	r3, [r3, #9]
   1e0f0:	2b00      	cmp	r3, #0
   1e0f2:	d00a      	beq.n	1e10a <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   1e0f4:	693b      	ldr	r3, [r7, #16]
   1e0f6:	695a      	ldr	r2, [r3, #20]
   1e0f8:	1dfb      	adds	r3, r7, #7
   1e0fa:	781b      	ldrb	r3, [r3, #0]
   1e0fc:	2101      	movs	r1, #1
   1e0fe:	4099      	lsls	r1, r3
   1e100:	000b      	movs	r3, r1
   1e102:	431a      	orrs	r2, r3
   1e104:	693b      	ldr	r3, [r7, #16]
   1e106:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   1e108:	e00a      	b.n	1e120 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   1e10a:	693b      	ldr	r3, [r7, #16]
   1e10c:	695b      	ldr	r3, [r3, #20]
   1e10e:	1dfa      	adds	r2, r7, #7
   1e110:	7812      	ldrb	r2, [r2, #0]
   1e112:	2101      	movs	r1, #1
   1e114:	4091      	lsls	r1, r2
   1e116:	000a      	movs	r2, r1
   1e118:	43d2      	mvns	r2, r2
   1e11a:	401a      	ands	r2, r3
   1e11c:	693b      	ldr	r3, [r7, #16]
   1e11e:	615a      	str	r2, [r3, #20]
}
   1e120:	46c0      	nop			; (mov r8, r8)
   1e122:	46bd      	mov	sp, r7
   1e124:	b006      	add	sp, #24
   1e126:	bd80      	pop	{r7, pc}
   1e128:	0001ddd9 	.word	0x0001ddd9
   1e12c:	00024da1 	.word	0x00024da1
   1e130:	0001de2d 	.word	0x0001de2d

0001e134 <system_gclk_chan_get_config_defaults>:
{
   1e134:	b580      	push	{r7, lr}
   1e136:	b082      	sub	sp, #8
   1e138:	af00      	add	r7, sp, #0
   1e13a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1e13c:	687b      	ldr	r3, [r7, #4]
   1e13e:	2200      	movs	r2, #0
   1e140:	701a      	strb	r2, [r3, #0]
}
   1e142:	46c0      	nop			; (mov r8, r8)
   1e144:	46bd      	mov	sp, r7
   1e146:	b002      	add	sp, #8
   1e148:	bd80      	pop	{r7, pc}
	...

0001e14c <system_apb_clock_set_mask>:
{
   1e14c:	b580      	push	{r7, lr}
   1e14e:	b082      	sub	sp, #8
   1e150:	af00      	add	r7, sp, #0
   1e152:	0002      	movs	r2, r0
   1e154:	6039      	str	r1, [r7, #0]
   1e156:	1dfb      	adds	r3, r7, #7
   1e158:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1e15a:	1dfb      	adds	r3, r7, #7
   1e15c:	781b      	ldrb	r3, [r3, #0]
   1e15e:	2b01      	cmp	r3, #1
   1e160:	d00a      	beq.n	1e178 <system_apb_clock_set_mask+0x2c>
   1e162:	2b02      	cmp	r3, #2
   1e164:	d00f      	beq.n	1e186 <system_apb_clock_set_mask+0x3a>
   1e166:	2b00      	cmp	r3, #0
   1e168:	d114      	bne.n	1e194 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1e16a:	4b0e      	ldr	r3, [pc, #56]	; (1e1a4 <system_apb_clock_set_mask+0x58>)
   1e16c:	4a0d      	ldr	r2, [pc, #52]	; (1e1a4 <system_apb_clock_set_mask+0x58>)
   1e16e:	6991      	ldr	r1, [r2, #24]
   1e170:	683a      	ldr	r2, [r7, #0]
   1e172:	430a      	orrs	r2, r1
   1e174:	619a      	str	r2, [r3, #24]
			break;
   1e176:	e00f      	b.n	1e198 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1e178:	4b0a      	ldr	r3, [pc, #40]	; (1e1a4 <system_apb_clock_set_mask+0x58>)
   1e17a:	4a0a      	ldr	r2, [pc, #40]	; (1e1a4 <system_apb_clock_set_mask+0x58>)
   1e17c:	69d1      	ldr	r1, [r2, #28]
   1e17e:	683a      	ldr	r2, [r7, #0]
   1e180:	430a      	orrs	r2, r1
   1e182:	61da      	str	r2, [r3, #28]
			break;
   1e184:	e008      	b.n	1e198 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1e186:	4b07      	ldr	r3, [pc, #28]	; (1e1a4 <system_apb_clock_set_mask+0x58>)
   1e188:	4a06      	ldr	r2, [pc, #24]	; (1e1a4 <system_apb_clock_set_mask+0x58>)
   1e18a:	6a11      	ldr	r1, [r2, #32]
   1e18c:	683a      	ldr	r2, [r7, #0]
   1e18e:	430a      	orrs	r2, r1
   1e190:	621a      	str	r2, [r3, #32]
			break;
   1e192:	e001      	b.n	1e198 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   1e194:	2317      	movs	r3, #23
   1e196:	e000      	b.n	1e19a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1e198:	2300      	movs	r3, #0
}
   1e19a:	0018      	movs	r0, r3
   1e19c:	46bd      	mov	sp, r7
   1e19e:	b002      	add	sp, #8
   1e1a0:	bd80      	pop	{r7, pc}
   1e1a2:	46c0      	nop			; (mov r8, r8)
   1e1a4:	40000400 	.word	0x40000400

0001e1a8 <system_interrupt_enable>:
{
   1e1a8:	b580      	push	{r7, lr}
   1e1aa:	b082      	sub	sp, #8
   1e1ac:	af00      	add	r7, sp, #0
   1e1ae:	0002      	movs	r2, r0
   1e1b0:	1dfb      	adds	r3, r7, #7
   1e1b2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1e1b4:	4b06      	ldr	r3, [pc, #24]	; (1e1d0 <system_interrupt_enable+0x28>)
   1e1b6:	1dfa      	adds	r2, r7, #7
   1e1b8:	7812      	ldrb	r2, [r2, #0]
   1e1ba:	0011      	movs	r1, r2
   1e1bc:	221f      	movs	r2, #31
   1e1be:	400a      	ands	r2, r1
   1e1c0:	2101      	movs	r1, #1
   1e1c2:	4091      	lsls	r1, r2
   1e1c4:	000a      	movs	r2, r1
   1e1c6:	601a      	str	r2, [r3, #0]
}
   1e1c8:	46c0      	nop			; (mov r8, r8)
   1e1ca:	46bd      	mov	sp, r7
   1e1cc:	b002      	add	sp, #8
   1e1ce:	bd80      	pop	{r7, pc}
   1e1d0:	e000e100 	.word	0xe000e100

0001e1d4 <system_interrupt_disable>:
{
   1e1d4:	b580      	push	{r7, lr}
   1e1d6:	b082      	sub	sp, #8
   1e1d8:	af00      	add	r7, sp, #0
   1e1da:	0002      	movs	r2, r0
   1e1dc:	1dfb      	adds	r3, r7, #7
   1e1de:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1e1e0:	4a07      	ldr	r2, [pc, #28]	; (1e200 <system_interrupt_disable+0x2c>)
   1e1e2:	1dfb      	adds	r3, r7, #7
   1e1e4:	781b      	ldrb	r3, [r3, #0]
   1e1e6:	0019      	movs	r1, r3
   1e1e8:	231f      	movs	r3, #31
   1e1ea:	400b      	ands	r3, r1
   1e1ec:	2101      	movs	r1, #1
   1e1ee:	4099      	lsls	r1, r3
   1e1f0:	000b      	movs	r3, r1
   1e1f2:	0019      	movs	r1, r3
   1e1f4:	2380      	movs	r3, #128	; 0x80
   1e1f6:	50d1      	str	r1, [r2, r3]
}
   1e1f8:	46c0      	nop			; (mov r8, r8)
   1e1fa:	46bd      	mov	sp, r7
   1e1fc:	b002      	add	sp, #8
   1e1fe:	bd80      	pop	{r7, pc}
   1e200:	e000e100 	.word	0xe000e100

0001e204 <rtc_count_is_syncing>:
 *
 * \retval true  if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static bool rtc_count_is_syncing(struct rtc_module *const module)
{
   1e204:	b580      	push	{r7, lr}
   1e206:	b084      	sub	sp, #16
   1e208:	af00      	add	r7, sp, #0
   1e20a:	6078      	str	r0, [r7, #4]
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1e20c:	687b      	ldr	r3, [r7, #4]
   1e20e:	681b      	ldr	r3, [r3, #0]
   1e210:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   1e212:	68fb      	ldr	r3, [r7, #12]
   1e214:	7a9b      	ldrb	r3, [r3, #10]
   1e216:	b2db      	uxtb	r3, r3
   1e218:	b25b      	sxtb	r3, r3
   1e21a:	2b00      	cmp	r3, #0
   1e21c:	da01      	bge.n	1e222 <rtc_count_is_syncing+0x1e>
                return true;
   1e21e:	2301      	movs	r3, #1
   1e220:	e000      	b.n	1e224 <rtc_count_is_syncing+0x20>
        }

        return false;
   1e222:	2300      	movs	r3, #0
}
   1e224:	0018      	movs	r0, r3
   1e226:	46bd      	mov	sp, r7
   1e228:	b004      	add	sp, #16
   1e22a:	bd80      	pop	{r7, pc}

0001e22c <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
   1e22c:	b580      	push	{r7, lr}
   1e22e:	b084      	sub	sp, #16
   1e230:	af00      	add	r7, sp, #0
   1e232:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1e234:	687b      	ldr	r3, [r7, #4]
   1e236:	681b      	ldr	r3, [r3, #0]
   1e238:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   1e23a:	2003      	movs	r0, #3
   1e23c:	4b0a      	ldr	r3, [pc, #40]	; (1e268 <rtc_count_enable+0x3c>)
   1e23e:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
   1e240:	46c0      	nop			; (mov r8, r8)
   1e242:	687b      	ldr	r3, [r7, #4]
   1e244:	0018      	movs	r0, r3
   1e246:	4b09      	ldr	r3, [pc, #36]	; (1e26c <rtc_count_enable+0x40>)
   1e248:	4798      	blx	r3
   1e24a:	1e03      	subs	r3, r0, #0
   1e24c:	d1f9      	bne.n	1e242 <rtc_count_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
   1e24e:	68fb      	ldr	r3, [r7, #12]
   1e250:	881b      	ldrh	r3, [r3, #0]
   1e252:	b29b      	uxth	r3, r3
   1e254:	2202      	movs	r2, #2
   1e256:	4313      	orrs	r3, r2
   1e258:	b29a      	uxth	r2, r3
   1e25a:	68fb      	ldr	r3, [r7, #12]
   1e25c:	801a      	strh	r2, [r3, #0]
}
   1e25e:	46c0      	nop			; (mov r8, r8)
   1e260:	46bd      	mov	sp, r7
   1e262:	b004      	add	sp, #16
   1e264:	bd80      	pop	{r7, pc}
   1e266:	46c0      	nop			; (mov r8, r8)
   1e268:	0001e1a9 	.word	0x0001e1a9
   1e26c:	0001e205 	.word	0x0001e205

0001e270 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
   1e270:	b580      	push	{r7, lr}
   1e272:	b084      	sub	sp, #16
   1e274:	af00      	add	r7, sp, #0
   1e276:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1e278:	687b      	ldr	r3, [r7, #4]
   1e27a:	681b      	ldr	r3, [r3, #0]
   1e27c:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   1e27e:	2003      	movs	r0, #3
   1e280:	4b0d      	ldr	r3, [pc, #52]	; (1e2b8 <rtc_count_disable+0x48>)
   1e282:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
   1e284:	46c0      	nop			; (mov r8, r8)
   1e286:	687b      	ldr	r3, [r7, #4]
   1e288:	0018      	movs	r0, r3
   1e28a:	4b0c      	ldr	r3, [pc, #48]	; (1e2bc <rtc_count_disable+0x4c>)
   1e28c:	4798      	blx	r3
   1e28e:	1e03      	subs	r3, r0, #0
   1e290:	d1f9      	bne.n	1e286 <rtc_count_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
   1e292:	68fb      	ldr	r3, [r7, #12]
   1e294:	22c1      	movs	r2, #193	; 0xc1
   1e296:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
   1e298:	68fb      	ldr	r3, [r7, #12]
   1e29a:	22c1      	movs	r2, #193	; 0xc1
   1e29c:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
   1e29e:	68fb      	ldr	r3, [r7, #12]
   1e2a0:	881b      	ldrh	r3, [r3, #0]
   1e2a2:	b29b      	uxth	r3, r3
   1e2a4:	2202      	movs	r2, #2
   1e2a6:	4393      	bics	r3, r2
   1e2a8:	b29a      	uxth	r2, r3
   1e2aa:	68fb      	ldr	r3, [r7, #12]
   1e2ac:	801a      	strh	r2, [r3, #0]
}
   1e2ae:	46c0      	nop			; (mov r8, r8)
   1e2b0:	46bd      	mov	sp, r7
   1e2b2:	b004      	add	sp, #16
   1e2b4:	bd80      	pop	{r7, pc}
   1e2b6:	46c0      	nop			; (mov r8, r8)
   1e2b8:	0001e1d5 	.word	0x0001e1d5
   1e2bc:	0001e205 	.word	0x0001e205

0001e2c0 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
   1e2c0:	b580      	push	{r7, lr}
   1e2c2:	b084      	sub	sp, #16
   1e2c4:	af00      	add	r7, sp, #0
   1e2c6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1e2c8:	687b      	ldr	r3, [r7, #4]
   1e2ca:	681b      	ldr	r3, [r3, #0]
   1e2cc:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_count_disable(module);
   1e2ce:	687b      	ldr	r3, [r7, #4]
   1e2d0:	0018      	movs	r0, r3
   1e2d2:	4b0d      	ldr	r3, [pc, #52]	; (1e308 <rtc_count_reset+0x48>)
   1e2d4:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
   1e2d6:	687b      	ldr	r3, [r7, #4]
   1e2d8:	2200      	movs	r2, #0
   1e2da:	829a      	strh	r2, [r3, #20]
	module->enabled_callback    = 0;
   1e2dc:	687b      	ldr	r3, [r7, #4]
   1e2de:	2200      	movs	r2, #0
   1e2e0:	82da      	strh	r2, [r3, #22]
#endif

	while (rtc_count_is_syncing(module)) {
   1e2e2:	46c0      	nop			; (mov r8, r8)
   1e2e4:	687b      	ldr	r3, [r7, #4]
   1e2e6:	0018      	movs	r0, r3
   1e2e8:	4b08      	ldr	r3, [pc, #32]	; (1e30c <rtc_count_reset+0x4c>)
   1e2ea:	4798      	blx	r3
   1e2ec:	1e03      	subs	r3, r0, #0
   1e2ee:	d1f9      	bne.n	1e2e4 <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
   1e2f0:	68fb      	ldr	r3, [r7, #12]
   1e2f2:	881b      	ldrh	r3, [r3, #0]
   1e2f4:	b29b      	uxth	r3, r3
   1e2f6:	2201      	movs	r2, #1
   1e2f8:	4313      	orrs	r3, r2
   1e2fa:	b29a      	uxth	r2, r3
   1e2fc:	68fb      	ldr	r3, [r7, #12]
   1e2fe:	801a      	strh	r2, [r3, #0]
}
   1e300:	46c0      	nop			; (mov r8, r8)
   1e302:	46bd      	mov	sp, r7
   1e304:	b004      	add	sp, #16
   1e306:	bd80      	pop	{r7, pc}
   1e308:	0001e271 	.word	0x0001e271
   1e30c:	0001e205 	.word	0x0001e205

0001e310 <_rtc_count_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were given.
 */
static enum status_code _rtc_count_set_config(
		struct rtc_module *const module,
		const struct rtc_count_config *const config)
{
   1e310:	b580      	push	{r7, lr}
   1e312:	b084      	sub	sp, #16
   1e314:	af00      	add	r7, sp, #0
   1e316:	6078      	str	r0, [r7, #4]
   1e318:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1e31a:	687b      	ldr	r3, [r7, #4]
   1e31c:	681b      	ldr	r3, [r3, #0]
   1e31e:	60bb      	str	r3, [r7, #8]

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
   1e320:	683b      	ldr	r3, [r7, #0]
   1e322:	881a      	ldrh	r2, [r3, #0]
   1e324:	68bb      	ldr	r3, [r7, #8]
   1e326:	801a      	strh	r2, [r3, #0]

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
   1e328:	683b      	ldr	r3, [r7, #0]
   1e32a:	789b      	ldrb	r3, [r3, #2]
   1e32c:	2b00      	cmp	r3, #0
   1e32e:	d03a      	beq.n	1e3a6 <_rtc_count_set_config+0x96>
   1e330:	2b01      	cmp	r3, #1
   1e332:	d000      	beq.n	1e336 <_rtc_count_set_config+0x26>
   1e334:	e06c      	b.n	1e410 <_rtc_count_set_config+0x100>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
   1e336:	68bb      	ldr	r3, [r7, #8]
   1e338:	881b      	ldrh	r3, [r3, #0]
   1e33a:	b29a      	uxth	r2, r3
   1e33c:	68bb      	ldr	r3, [r7, #8]
   1e33e:	801a      	strh	r2, [r3, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
   1e340:	683b      	ldr	r3, [r7, #0]
   1e342:	78db      	ldrb	r3, [r3, #3]
   1e344:	2b00      	cmp	r3, #0
   1e346:	d007      	beq.n	1e358 <_rtc_count_set_config+0x48>
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
   1e348:	68bb      	ldr	r3, [r7, #8]
   1e34a:	881b      	ldrh	r3, [r3, #0]
   1e34c:	b29b      	uxth	r3, r3
   1e34e:	2280      	movs	r2, #128	; 0x80
   1e350:	4313      	orrs	r3, r2
   1e352:	b29a      	uxth	r2, r3
   1e354:	68bb      	ldr	r3, [r7, #8]
   1e356:	801a      	strh	r2, [r3, #0]
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
   1e358:	230f      	movs	r3, #15
   1e35a:	18fb      	adds	r3, r7, r3
   1e35c:	2200      	movs	r2, #0
   1e35e:	701a      	strb	r2, [r3, #0]
   1e360:	e01b      	b.n	1e39a <_rtc_count_set_config+0x8a>
				while (rtc_count_is_syncing(module)) {
   1e362:	46c0      	nop			; (mov r8, r8)
   1e364:	687b      	ldr	r3, [r7, #4]
   1e366:	0018      	movs	r0, r3
   1e368:	4b37      	ldr	r3, [pc, #220]	; (1e448 <_rtc_count_set_config+0x138>)
   1e36a:	4798      	blx	r3
   1e36c:	1e03      	subs	r3, r0, #0
   1e36e:	d1f9      	bne.n	1e364 <_rtc_count_set_config+0x54>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
   1e370:	230f      	movs	r3, #15
   1e372:	18fb      	adds	r3, r7, r3
   1e374:	781a      	ldrb	r2, [r3, #0]
   1e376:	683b      	ldr	r3, [r7, #0]
   1e378:	3202      	adds	r2, #2
   1e37a:	0092      	lsls	r2, r2, #2
   1e37c:	58d1      	ldr	r1, [r2, r3]
   1e37e:	230f      	movs	r3, #15
   1e380:	18fb      	adds	r3, r7, r3
   1e382:	781a      	ldrb	r2, [r3, #0]
   1e384:	687b      	ldr	r3, [r7, #4]
   1e386:	0018      	movs	r0, r3
   1e388:	4b30      	ldr	r3, [pc, #192]	; (1e44c <_rtc_count_set_config+0x13c>)
   1e38a:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
   1e38c:	230f      	movs	r3, #15
   1e38e:	18fb      	adds	r3, r7, r3
   1e390:	781a      	ldrb	r2, [r3, #0]
   1e392:	230f      	movs	r3, #15
   1e394:	18fb      	adds	r3, r7, r3
   1e396:	3201      	adds	r2, #1
   1e398:	701a      	strb	r2, [r3, #0]
   1e39a:	230f      	movs	r3, #15
   1e39c:	18fb      	adds	r3, r7, r3
   1e39e:	781b      	ldrb	r3, [r3, #0]
   1e3a0:	2b00      	cmp	r3, #0
   1e3a2:	d0de      	beq.n	1e362 <_rtc_count_set_config+0x52>
						(enum rtc_count_compare)i);
			}
			break;
   1e3a4:	e036      	b.n	1e414 <_rtc_count_set_config+0x104>

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
   1e3a6:	68bb      	ldr	r3, [r7, #8]
   1e3a8:	881b      	ldrh	r3, [r3, #0]
   1e3aa:	b29b      	uxth	r3, r3
   1e3ac:	2204      	movs	r2, #4
   1e3ae:	4313      	orrs	r3, r2
   1e3b0:	b29a      	uxth	r2, r3
   1e3b2:	68bb      	ldr	r3, [r7, #8]
   1e3b4:	801a      	strh	r2, [r3, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
   1e3b6:	683b      	ldr	r3, [r7, #0]
   1e3b8:	78db      	ldrb	r3, [r3, #3]
   1e3ba:	2b00      	cmp	r3, #0
   1e3bc:	d001      	beq.n	1e3c2 <_rtc_count_set_config+0xb2>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
   1e3be:	2317      	movs	r3, #23
   1e3c0:	e03e      	b.n	1e440 <_rtc_count_set_config+0x130>
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   1e3c2:	230e      	movs	r3, #14
   1e3c4:	18fb      	adds	r3, r7, r3
   1e3c6:	2200      	movs	r2, #0
   1e3c8:	701a      	strb	r2, [r3, #0]
   1e3ca:	e01b      	b.n	1e404 <_rtc_count_set_config+0xf4>
				while (rtc_count_is_syncing(module)) {
   1e3cc:	46c0      	nop			; (mov r8, r8)
   1e3ce:	687b      	ldr	r3, [r7, #4]
   1e3d0:	0018      	movs	r0, r3
   1e3d2:	4b1d      	ldr	r3, [pc, #116]	; (1e448 <_rtc_count_set_config+0x138>)
   1e3d4:	4798      	blx	r3
   1e3d6:	1e03      	subs	r3, r0, #0
   1e3d8:	d1f9      	bne.n	1e3ce <_rtc_count_set_config+0xbe>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
   1e3da:	230e      	movs	r3, #14
   1e3dc:	18fb      	adds	r3, r7, r3
   1e3de:	781a      	ldrb	r2, [r3, #0]
   1e3e0:	683b      	ldr	r3, [r7, #0]
   1e3e2:	3202      	adds	r2, #2
   1e3e4:	0092      	lsls	r2, r2, #2
   1e3e6:	58d1      	ldr	r1, [r2, r3]
   1e3e8:	230e      	movs	r3, #14
   1e3ea:	18fb      	adds	r3, r7, r3
   1e3ec:	781a      	ldrb	r2, [r3, #0]
   1e3ee:	687b      	ldr	r3, [r7, #4]
   1e3f0:	0018      	movs	r0, r3
   1e3f2:	4b16      	ldr	r3, [pc, #88]	; (1e44c <_rtc_count_set_config+0x13c>)
   1e3f4:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   1e3f6:	230e      	movs	r3, #14
   1e3f8:	18fb      	adds	r3, r7, r3
   1e3fa:	781a      	ldrb	r2, [r3, #0]
   1e3fc:	230e      	movs	r3, #14
   1e3fe:	18fb      	adds	r3, r7, r3
   1e400:	3201      	adds	r2, #1
   1e402:	701a      	strb	r2, [r3, #0]
   1e404:	230e      	movs	r3, #14
   1e406:	18fb      	adds	r3, r7, r3
   1e408:	781b      	ldrb	r3, [r3, #0]
   1e40a:	2b01      	cmp	r3, #1
   1e40c:	d9de      	bls.n	1e3cc <_rtc_count_set_config+0xbc>
						(enum rtc_count_compare)i);
			}
			break;
   1e40e:	e001      	b.n	1e414 <_rtc_count_set_config+0x104>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   1e410:	2317      	movs	r3, #23
   1e412:	e015      	b.n	1e440 <_rtc_count_set_config+0x130>
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   1e414:	683b      	ldr	r3, [r7, #0]
   1e416:	791b      	ldrb	r3, [r3, #4]
   1e418:	2b00      	cmp	r3, #0
   1e41a:	d010      	beq.n	1e43e <_rtc_count_set_config+0x12e>
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
   1e41c:	68bb      	ldr	r3, [r7, #8]
   1e41e:	885b      	ldrh	r3, [r3, #2]
   1e420:	b29b      	uxth	r3, r3
   1e422:	2280      	movs	r2, #128	; 0x80
   1e424:	01d2      	lsls	r2, r2, #7
   1e426:	4313      	orrs	r3, r2
   1e428:	b29a      	uxth	r2, r3
   1e42a:	68bb      	ldr	r3, [r7, #8]
   1e42c:	805a      	strh	r2, [r3, #2]
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RREQ;
   1e42e:	68bb      	ldr	r3, [r7, #8]
   1e430:	885b      	ldrh	r3, [r3, #2]
   1e432:	b29b      	uxth	r3, r3
   1e434:	4a06      	ldr	r2, [pc, #24]	; (1e450 <_rtc_count_set_config+0x140>)
   1e436:	4313      	orrs	r3, r2
   1e438:	b29a      	uxth	r2, r3
   1e43a:	68bb      	ldr	r3, [r7, #8]
   1e43c:	805a      	strh	r2, [r3, #2]
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
   1e43e:	2300      	movs	r3, #0
}
   1e440:	0018      	movs	r0, r3
   1e442:	46bd      	mov	sp, r7
   1e444:	b004      	add	sp, #16
   1e446:	bd80      	pop	{r7, pc}
   1e448:	0001e205 	.word	0x0001e205
   1e44c:	0001e4e5 	.word	0x0001e4e5
   1e450:	ffff8000 	.word	0xffff8000

0001e454 <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
   1e454:	b580      	push	{r7, lr}
   1e456:	b086      	sub	sp, #24
   1e458:	af00      	add	r7, sp, #0
   1e45a:	60f8      	str	r0, [r7, #12]
   1e45c:	60b9      	str	r1, [r7, #8]
   1e45e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   1e460:	68fb      	ldr	r3, [r7, #12]
   1e462:	68ba      	ldr	r2, [r7, #8]
   1e464:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   1e466:	2120      	movs	r1, #32
   1e468:	2000      	movs	r0, #0
   1e46a:	4b17      	ldr	r3, [pc, #92]	; (1e4c8 <rtc_count_init+0x74>)
   1e46c:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1e46e:	2314      	movs	r3, #20
   1e470:	18fb      	adds	r3, r7, r3
   1e472:	0018      	movs	r0, r3
   1e474:	4b15      	ldr	r3, [pc, #84]	; (1e4cc <rtc_count_init+0x78>)
   1e476:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   1e478:	2314      	movs	r3, #20
   1e47a:	18fb      	adds	r3, r7, r3
   1e47c:	2202      	movs	r2, #2
   1e47e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   1e480:	2314      	movs	r3, #20
   1e482:	18fb      	adds	r3, r7, r3
   1e484:	0019      	movs	r1, r3
   1e486:	2004      	movs	r0, #4
   1e488:	4b11      	ldr	r3, [pc, #68]	; (1e4d0 <rtc_count_init+0x7c>)
   1e48a:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   1e48c:	2004      	movs	r0, #4
   1e48e:	4b11      	ldr	r3, [pc, #68]	; (1e4d4 <rtc_count_init+0x80>)
   1e490:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
   1e492:	68fb      	ldr	r3, [r7, #12]
   1e494:	0018      	movs	r0, r3
   1e496:	4b10      	ldr	r3, [pc, #64]	; (1e4d8 <rtc_count_init+0x84>)
   1e498:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
   1e49a:	687b      	ldr	r3, [r7, #4]
   1e49c:	789a      	ldrb	r2, [r3, #2]
   1e49e:	68fb      	ldr	r3, [r7, #12]
   1e4a0:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   1e4a2:	687b      	ldr	r3, [r7, #4]
   1e4a4:	791a      	ldrb	r2, [r3, #4]
   1e4a6:	68fb      	ldr	r3, [r7, #12]
   1e4a8:	715a      	strb	r2, [r3, #5]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   1e4aa:	4b0c      	ldr	r3, [pc, #48]	; (1e4dc <rtc_count_init+0x88>)
   1e4ac:	68fa      	ldr	r2, [r7, #12]
   1e4ae:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
   1e4b0:	687a      	ldr	r2, [r7, #4]
   1e4b2:	68fb      	ldr	r3, [r7, #12]
   1e4b4:	0011      	movs	r1, r2
   1e4b6:	0018      	movs	r0, r3
   1e4b8:	4b09      	ldr	r3, [pc, #36]	; (1e4e0 <rtc_count_init+0x8c>)
   1e4ba:	4798      	blx	r3
   1e4bc:	0003      	movs	r3, r0
}
   1e4be:	0018      	movs	r0, r3
   1e4c0:	46bd      	mov	sp, r7
   1e4c2:	b006      	add	sp, #24
   1e4c4:	bd80      	pop	{r7, pc}
   1e4c6:	46c0      	nop			; (mov r8, r8)
   1e4c8:	0001e14d 	.word	0x0001e14d
   1e4cc:	0001e135 	.word	0x0001e135
   1e4d0:	00024ab5 	.word	0x00024ab5
   1e4d4:	00024af9 	.word	0x00024af9
   1e4d8:	0001e2c1 	.word	0x0001e2c1
   1e4dc:	20000940 	.word	0x20000940
   1e4e0:	0001e311 	.word	0x0001e311

0001e4e4 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
   1e4e4:	b580      	push	{r7, lr}
   1e4e6:	b086      	sub	sp, #24
   1e4e8:	af00      	add	r7, sp, #0
   1e4ea:	60f8      	str	r0, [r7, #12]
   1e4ec:	60b9      	str	r1, [r7, #8]
   1e4ee:	1dfb      	adds	r3, r7, #7
   1e4f0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1e4f2:	68fb      	ldr	r3, [r7, #12]
   1e4f4:	681b      	ldr	r3, [r3, #0]
   1e4f6:	617b      	str	r3, [r7, #20]

	while (rtc_count_is_syncing(module)) {
   1e4f8:	46c0      	nop			; (mov r8, r8)
   1e4fa:	68fb      	ldr	r3, [r7, #12]
   1e4fc:	0018      	movs	r0, r3
   1e4fe:	4b1a      	ldr	r3, [pc, #104]	; (1e568 <rtc_count_set_compare+0x84>)
   1e500:	4798      	blx	r3
   1e502:	1e03      	subs	r3, r0, #0
   1e504:	d1f9      	bne.n	1e4fa <rtc_count_set_compare+0x16>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
   1e506:	68fb      	ldr	r3, [r7, #12]
   1e508:	791b      	ldrb	r3, [r3, #4]
   1e50a:	2b00      	cmp	r3, #0
   1e50c:	d00f      	beq.n	1e52e <rtc_count_set_compare+0x4a>
   1e50e:	2b01      	cmp	r3, #1
   1e510:	d122      	bne.n	1e558 <rtc_count_set_compare+0x74>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
   1e512:	1dfb      	adds	r3, r7, #7
   1e514:	781b      	ldrb	r3, [r3, #0]
   1e516:	2b01      	cmp	r3, #1
   1e518:	d901      	bls.n	1e51e <rtc_count_set_compare+0x3a>
				return STATUS_ERR_INVALID_ARG;
   1e51a:	2317      	movs	r3, #23
   1e51c:	e01f      	b.n	1e55e <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
   1e51e:	1dfb      	adds	r3, r7, #7
   1e520:	781a      	ldrb	r2, [r3, #0]
   1e522:	697b      	ldr	r3, [r7, #20]
   1e524:	3206      	adds	r2, #6
   1e526:	0092      	lsls	r2, r2, #2
   1e528:	68b9      	ldr	r1, [r7, #8]
   1e52a:	50d1      	str	r1, [r2, r3]

			break;
   1e52c:	e016      	b.n	1e55c <rtc_count_set_compare+0x78>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
   1e52e:	1dfb      	adds	r3, r7, #7
   1e530:	781b      	ldrb	r3, [r3, #0]
   1e532:	2b02      	cmp	r3, #2
   1e534:	d901      	bls.n	1e53a <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
   1e536:	2317      	movs	r3, #23
   1e538:	e011      	b.n	1e55e <rtc_count_set_compare+0x7a>
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
   1e53a:	68bb      	ldr	r3, [r7, #8]
   1e53c:	4a0b      	ldr	r2, [pc, #44]	; (1e56c <rtc_count_set_compare+0x88>)
   1e53e:	4293      	cmp	r3, r2
   1e540:	d901      	bls.n	1e546 <rtc_count_set_compare+0x62>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
   1e542:	2317      	movs	r3, #23
   1e544:	e00b      	b.n	1e55e <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
   1e546:	1dfb      	adds	r3, r7, #7
   1e548:	781a      	ldrb	r2, [r3, #0]
   1e54a:	68bb      	ldr	r3, [r7, #8]
   1e54c:	b299      	uxth	r1, r3
   1e54e:	697b      	ldr	r3, [r7, #20]
   1e550:	320c      	adds	r2, #12
   1e552:	0052      	lsls	r2, r2, #1
   1e554:	52d1      	strh	r1, [r2, r3]

			break;
   1e556:	e001      	b.n	1e55c <rtc_count_set_compare+0x78>

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
   1e558:	231a      	movs	r3, #26
   1e55a:	e000      	b.n	1e55e <rtc_count_set_compare+0x7a>
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
   1e55c:	2300      	movs	r3, #0
}
   1e55e:	0018      	movs	r0, r3
   1e560:	46bd      	mov	sp, r7
   1e562:	b006      	add	sp, #24
   1e564:	bd80      	pop	{r7, pc}
   1e566:	46c0      	nop			; (mov r8, r8)
   1e568:	0001e205 	.word	0x0001e205
   1e56c:	0000ffff 	.word	0x0000ffff

0001e570 <rtc_count_set_period>:
 * \retval STATUS_ERR_UNSUPPORTED_DEV  If module is not operated in 16-bit mode
 */
enum status_code rtc_count_set_period(
		struct rtc_module *const module,
		const uint16_t period_value)
{
   1e570:	b580      	push	{r7, lr}
   1e572:	b084      	sub	sp, #16
   1e574:	af00      	add	r7, sp, #0
   1e576:	6078      	str	r0, [r7, #4]
   1e578:	000a      	movs	r2, r1
   1e57a:	1cbb      	adds	r3, r7, #2
   1e57c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1e57e:	687b      	ldr	r3, [r7, #4]
   1e580:	681b      	ldr	r3, [r3, #0]
   1e582:	60fb      	str	r3, [r7, #12]

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
   1e584:	687b      	ldr	r3, [r7, #4]
   1e586:	791b      	ldrb	r3, [r3, #4]
   1e588:	2b00      	cmp	r3, #0
   1e58a:	d001      	beq.n	1e590 <rtc_count_set_period+0x20>
		return STATUS_ERR_UNSUPPORTED_DEV;
   1e58c:	2315      	movs	r3, #21
   1e58e:	e00b      	b.n	1e5a8 <rtc_count_set_period+0x38>
	}

	while (rtc_count_is_syncing(module)) {
   1e590:	46c0      	nop			; (mov r8, r8)
   1e592:	687b      	ldr	r3, [r7, #4]
   1e594:	0018      	movs	r0, r3
   1e596:	4b06      	ldr	r3, [pc, #24]	; (1e5b0 <rtc_count_set_period+0x40>)
   1e598:	4798      	blx	r3
   1e59a:	1e03      	subs	r3, r0, #0
   1e59c:	d1f9      	bne.n	1e592 <rtc_count_set_period+0x22>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE1.PER.reg = period_value;
   1e59e:	68fb      	ldr	r3, [r7, #12]
   1e5a0:	1cba      	adds	r2, r7, #2
   1e5a2:	8812      	ldrh	r2, [r2, #0]
   1e5a4:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
   1e5a6:	2300      	movs	r3, #0
}
   1e5a8:	0018      	movs	r0, r3
   1e5aa:	46bd      	mov	sp, r7
   1e5ac:	b004      	add	sp, #16
   1e5ae:	bd80      	pop	{r7, pc}
   1e5b0:	0001e205 	.word	0x0001e205

0001e5b4 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   1e5b4:	b580      	push	{r7, lr}
   1e5b6:	b086      	sub	sp, #24
   1e5b8:	af00      	add	r7, sp, #0
   1e5ba:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   1e5bc:	4b31      	ldr	r3, [pc, #196]	; (1e684 <_rtc_interrupt_handler+0xd0>)
   1e5be:	687a      	ldr	r2, [r7, #4]
   1e5c0:	0092      	lsls	r2, r2, #2
   1e5c2:	58d3      	ldr	r3, [r2, r3]
   1e5c4:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   1e5c6:	697b      	ldr	r3, [r7, #20]
   1e5c8:	681b      	ldr	r3, [r3, #0]
   1e5ca:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   1e5cc:	230e      	movs	r3, #14
   1e5ce:	18fb      	adds	r3, r7, r3
   1e5d0:	697a      	ldr	r2, [r7, #20]
   1e5d2:	8ad2      	ldrh	r2, [r2, #22]
   1e5d4:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   1e5d6:	697b      	ldr	r3, [r7, #20]
   1e5d8:	8a9b      	ldrh	r3, [r3, #20]
   1e5da:	b29a      	uxth	r2, r3
   1e5dc:	230e      	movs	r3, #14
   1e5de:	18fb      	adds	r3, r7, r3
   1e5e0:	210e      	movs	r1, #14
   1e5e2:	1879      	adds	r1, r7, r1
   1e5e4:	8809      	ldrh	r1, [r1, #0]
   1e5e6:	400a      	ands	r2, r1
   1e5e8:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
   1e5ea:	693b      	ldr	r3, [r7, #16]
   1e5ec:	7a1b      	ldrb	r3, [r3, #8]
   1e5ee:	b2da      	uxtb	r2, r3
   1e5f0:	230c      	movs	r3, #12
   1e5f2:	18fb      	adds	r3, r7, r3
   1e5f4:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
   1e5f6:	693b      	ldr	r3, [r7, #16]
   1e5f8:	79db      	ldrb	r3, [r3, #7]
   1e5fa:	b2db      	uxtb	r3, r3
   1e5fc:	b29a      	uxth	r2, r3
   1e5fe:	230c      	movs	r3, #12
   1e600:	18fb      	adds	r3, r7, r3
   1e602:	210c      	movs	r1, #12
   1e604:	1879      	adds	r1, r7, r1
   1e606:	8809      	ldrh	r1, [r1, #0]
   1e608:	400a      	ands	r2, r1
   1e60a:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
   1e60c:	230c      	movs	r3, #12
   1e60e:	18fb      	adds	r3, r7, r3
   1e610:	881b      	ldrh	r3, [r3, #0]
   1e612:	2280      	movs	r2, #128	; 0x80
   1e614:	4013      	ands	r3, r2
   1e616:	d00c      	beq.n	1e632 <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
   1e618:	230e      	movs	r3, #14
   1e61a:	18fb      	adds	r3, r7, r3
   1e61c:	881b      	ldrh	r3, [r3, #0]
   1e61e:	2204      	movs	r2, #4
   1e620:	4013      	ands	r3, r2
   1e622:	d002      	beq.n	1e62a <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
   1e624:	697b      	ldr	r3, [r7, #20]
   1e626:	691b      	ldr	r3, [r3, #16]
   1e628:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
   1e62a:	693b      	ldr	r3, [r7, #16]
   1e62c:	2280      	movs	r2, #128	; 0x80
   1e62e:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
   1e630:	e024      	b.n	1e67c <_rtc_interrupt_handler+0xc8>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
   1e632:	230c      	movs	r3, #12
   1e634:	18fb      	adds	r3, r7, r3
   1e636:	881b      	ldrh	r3, [r3, #0]
   1e638:	2201      	movs	r2, #1
   1e63a:	4013      	ands	r3, r2
   1e63c:	d00c      	beq.n	1e658 <_rtc_interrupt_handler+0xa4>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
   1e63e:	230e      	movs	r3, #14
   1e640:	18fb      	adds	r3, r7, r3
   1e642:	881b      	ldrh	r3, [r3, #0]
   1e644:	2201      	movs	r2, #1
   1e646:	4013      	ands	r3, r2
   1e648:	d002      	beq.n	1e650 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
   1e64a:	697b      	ldr	r3, [r7, #20]
   1e64c:	689b      	ldr	r3, [r3, #8]
   1e64e:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
   1e650:	693b      	ldr	r3, [r7, #16]
   1e652:	2201      	movs	r2, #1
   1e654:	721a      	strb	r2, [r3, #8]
}
   1e656:	e011      	b.n	1e67c <_rtc_interrupt_handler+0xc8>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
   1e658:	230c      	movs	r3, #12
   1e65a:	18fb      	adds	r3, r7, r3
   1e65c:	881b      	ldrh	r3, [r3, #0]
   1e65e:	2202      	movs	r2, #2
   1e660:	4013      	ands	r3, r2
   1e662:	d00b      	beq.n	1e67c <_rtc_interrupt_handler+0xc8>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
   1e664:	230e      	movs	r3, #14
   1e666:	18fb      	adds	r3, r7, r3
   1e668:	881b      	ldrh	r3, [r3, #0]
   1e66a:	2202      	movs	r2, #2
   1e66c:	4013      	ands	r3, r2
   1e66e:	d002      	beq.n	1e676 <_rtc_interrupt_handler+0xc2>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
   1e670:	697b      	ldr	r3, [r7, #20]
   1e672:	68db      	ldr	r3, [r3, #12]
   1e674:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
   1e676:	693b      	ldr	r3, [r7, #16]
   1e678:	2202      	movs	r2, #2
   1e67a:	721a      	strb	r2, [r3, #8]
}
   1e67c:	46c0      	nop			; (mov r8, r8)
   1e67e:	46bd      	mov	sp, r7
   1e680:	b006      	add	sp, #24
   1e682:	bd80      	pop	{r7, pc}
   1e684:	20000940 	.word	0x20000940

0001e688 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   1e688:	b580      	push	{r7, lr}
   1e68a:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   1e68c:	2000      	movs	r0, #0
   1e68e:	4b02      	ldr	r3, [pc, #8]	; (1e698 <RTC_Handler+0x10>)
   1e690:	4798      	blx	r3
}
   1e692:	46c0      	nop			; (mov r8, r8)
   1e694:	46bd      	mov	sp, r7
   1e696:	bd80      	pop	{r7, pc}
   1e698:	0001e5b5 	.word	0x0001e5b5

0001e69c <system_gclk_chan_get_config_defaults>:
{
   1e69c:	b580      	push	{r7, lr}
   1e69e:	b082      	sub	sp, #8
   1e6a0:	af00      	add	r7, sp, #0
   1e6a2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1e6a4:	687b      	ldr	r3, [r7, #4]
   1e6a6:	2200      	movs	r2, #0
   1e6a8:	701a      	strb	r2, [r3, #0]
}
   1e6aa:	46c0      	nop			; (mov r8, r8)
   1e6ac:	46bd      	mov	sp, r7
   1e6ae:	b002      	add	sp, #8
   1e6b0:	bd80      	pop	{r7, pc}

0001e6b2 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   1e6b2:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e6b4:	b08d      	sub	sp, #52	; 0x34
   1e6b6:	af00      	add	r7, sp, #0
   1e6b8:	60b8      	str	r0, [r7, #8]
   1e6ba:	60f9      	str	r1, [r7, #12]
   1e6bc:	603a      	str	r2, [r7, #0]
   1e6be:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   1e6c0:	2300      	movs	r3, #0
   1e6c2:	2400      	movs	r4, #0
   1e6c4:	623b      	str	r3, [r7, #32]
   1e6c6:	627c      	str	r4, [r7, #36]	; 0x24
   1e6c8:	2300      	movs	r3, #0
   1e6ca:	2400      	movs	r4, #0
   1e6cc:	61bb      	str	r3, [r7, #24]
   1e6ce:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   1e6d0:	233f      	movs	r3, #63	; 0x3f
   1e6d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   1e6d4:	e053      	b.n	1e77e <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   1e6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e6d8:	3b20      	subs	r3, #32
   1e6da:	2b00      	cmp	r3, #0
   1e6dc:	db04      	blt.n	1e6e8 <long_division+0x36>
   1e6de:	2201      	movs	r2, #1
   1e6e0:	409a      	lsls	r2, r3
   1e6e2:	0013      	movs	r3, r2
   1e6e4:	617b      	str	r3, [r7, #20]
   1e6e6:	e00b      	b.n	1e700 <long_division+0x4e>
   1e6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e6ea:	2220      	movs	r2, #32
   1e6ec:	1ad3      	subs	r3, r2, r3
   1e6ee:	2201      	movs	r2, #1
   1e6f0:	40da      	lsrs	r2, r3
   1e6f2:	0013      	movs	r3, r2
   1e6f4:	2100      	movs	r1, #0
   1e6f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1e6f8:	4091      	lsls	r1, r2
   1e6fa:	000a      	movs	r2, r1
   1e6fc:	4313      	orrs	r3, r2
   1e6fe:	617b      	str	r3, [r7, #20]
   1e700:	2201      	movs	r2, #1
   1e702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e704:	409a      	lsls	r2, r3
   1e706:	0013      	movs	r3, r2
   1e708:	613b      	str	r3, [r7, #16]

		r = r << 1;
   1e70a:	69bb      	ldr	r3, [r7, #24]
   1e70c:	69fc      	ldr	r4, [r7, #28]
   1e70e:	18db      	adds	r3, r3, r3
   1e710:	4164      	adcs	r4, r4
   1e712:	61bb      	str	r3, [r7, #24]
   1e714:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   1e716:	68bb      	ldr	r3, [r7, #8]
   1e718:	693a      	ldr	r2, [r7, #16]
   1e71a:	401a      	ands	r2, r3
   1e71c:	0015      	movs	r5, r2
   1e71e:	68fb      	ldr	r3, [r7, #12]
   1e720:	697a      	ldr	r2, [r7, #20]
   1e722:	401a      	ands	r2, r3
   1e724:	0016      	movs	r6, r2
   1e726:	002b      	movs	r3, r5
   1e728:	4333      	orrs	r3, r6
   1e72a:	d007      	beq.n	1e73c <long_division+0x8a>
			r |= 0x01;
   1e72c:	69bb      	ldr	r3, [r7, #24]
   1e72e:	2201      	movs	r2, #1
   1e730:	4313      	orrs	r3, r2
   1e732:	61bb      	str	r3, [r7, #24]
   1e734:	69fb      	ldr	r3, [r7, #28]
   1e736:	2200      	movs	r2, #0
   1e738:	4313      	orrs	r3, r2
   1e73a:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   1e73c:	687a      	ldr	r2, [r7, #4]
   1e73e:	69fb      	ldr	r3, [r7, #28]
   1e740:	429a      	cmp	r2, r3
   1e742:	d819      	bhi.n	1e778 <long_division+0xc6>
   1e744:	687a      	ldr	r2, [r7, #4]
   1e746:	69fb      	ldr	r3, [r7, #28]
   1e748:	429a      	cmp	r2, r3
   1e74a:	d103      	bne.n	1e754 <long_division+0xa2>
   1e74c:	683a      	ldr	r2, [r7, #0]
   1e74e:	69bb      	ldr	r3, [r7, #24]
   1e750:	429a      	cmp	r2, r3
   1e752:	d811      	bhi.n	1e778 <long_division+0xc6>
			r = r - d;
   1e754:	69b9      	ldr	r1, [r7, #24]
   1e756:	69fa      	ldr	r2, [r7, #28]
   1e758:	683b      	ldr	r3, [r7, #0]
   1e75a:	687c      	ldr	r4, [r7, #4]
   1e75c:	1ac9      	subs	r1, r1, r3
   1e75e:	41a2      	sbcs	r2, r4
   1e760:	000b      	movs	r3, r1
   1e762:	0014      	movs	r4, r2
   1e764:	61bb      	str	r3, [r7, #24]
   1e766:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   1e768:	6a3a      	ldr	r2, [r7, #32]
   1e76a:	693b      	ldr	r3, [r7, #16]
   1e76c:	4313      	orrs	r3, r2
   1e76e:	623b      	str	r3, [r7, #32]
   1e770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1e772:	697b      	ldr	r3, [r7, #20]
   1e774:	4313      	orrs	r3, r2
   1e776:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   1e778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e77a:	3b01      	subs	r3, #1
   1e77c:	62fb      	str	r3, [r7, #44]	; 0x2c
   1e77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e780:	2b00      	cmp	r3, #0
   1e782:	daa8      	bge.n	1e6d6 <long_division+0x24>
		}
	}

	return q;
   1e784:	6a3b      	ldr	r3, [r7, #32]
   1e786:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   1e788:	0018      	movs	r0, r3
   1e78a:	0021      	movs	r1, r4
   1e78c:	46bd      	mov	sp, r7
   1e78e:	b00d      	add	sp, #52	; 0x34
   1e790:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001e792 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   1e792:	b580      	push	{r7, lr}
   1e794:	b086      	sub	sp, #24
   1e796:	af00      	add	r7, sp, #0
   1e798:	60f8      	str	r0, [r7, #12]
   1e79a:	60b9      	str	r1, [r7, #8]
   1e79c:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   1e79e:	2316      	movs	r3, #22
   1e7a0:	18fb      	adds	r3, r7, r3
   1e7a2:	2200      	movs	r2, #0
   1e7a4:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   1e7a6:	68bb      	ldr	r3, [r7, #8]
   1e7a8:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   1e7aa:	68bb      	ldr	r3, [r7, #8]
   1e7ac:	085a      	lsrs	r2, r3, #1
   1e7ae:	68fb      	ldr	r3, [r7, #12]
   1e7b0:	429a      	cmp	r2, r3
   1e7b2:	d201      	bcs.n	1e7b8 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1e7b4:	2340      	movs	r3, #64	; 0x40
   1e7b6:	e026      	b.n	1e806 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   1e7b8:	68bb      	ldr	r3, [r7, #8]
   1e7ba:	085b      	lsrs	r3, r3, #1
   1e7bc:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   1e7be:	e00a      	b.n	1e7d6 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   1e7c0:	693a      	ldr	r2, [r7, #16]
   1e7c2:	68fb      	ldr	r3, [r7, #12]
   1e7c4:	1ad3      	subs	r3, r2, r3
   1e7c6:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   1e7c8:	2316      	movs	r3, #22
   1e7ca:	18fb      	adds	r3, r7, r3
   1e7cc:	881a      	ldrh	r2, [r3, #0]
   1e7ce:	2316      	movs	r3, #22
   1e7d0:	18fb      	adds	r3, r7, r3
   1e7d2:	3201      	adds	r2, #1
   1e7d4:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   1e7d6:	693a      	ldr	r2, [r7, #16]
   1e7d8:	68fb      	ldr	r3, [r7, #12]
   1e7da:	429a      	cmp	r2, r3
   1e7dc:	d2f0      	bcs.n	1e7c0 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   1e7de:	2316      	movs	r3, #22
   1e7e0:	18fb      	adds	r3, r7, r3
   1e7e2:	2216      	movs	r2, #22
   1e7e4:	18ba      	adds	r2, r7, r2
   1e7e6:	8812      	ldrh	r2, [r2, #0]
   1e7e8:	3a01      	subs	r2, #1
   1e7ea:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   1e7ec:	2316      	movs	r3, #22
   1e7ee:	18fb      	adds	r3, r7, r3
   1e7f0:	881b      	ldrh	r3, [r3, #0]
   1e7f2:	2bff      	cmp	r3, #255	; 0xff
   1e7f4:	d901      	bls.n	1e7fa <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1e7f6:	2340      	movs	r3, #64	; 0x40
   1e7f8:	e005      	b.n	1e806 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   1e7fa:	687b      	ldr	r3, [r7, #4]
   1e7fc:	2216      	movs	r2, #22
   1e7fe:	18ba      	adds	r2, r7, r2
   1e800:	8812      	ldrh	r2, [r2, #0]
   1e802:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   1e804:	2300      	movs	r3, #0
	}
}
   1e806:	0018      	movs	r0, r3
   1e808:	46bd      	mov	sp, r7
   1e80a:	b006      	add	sp, #24
   1e80c:	bd80      	pop	{r7, pc}
	...

0001e810 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   1e810:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e812:	b0a1      	sub	sp, #132	; 0x84
   1e814:	af00      	add	r7, sp, #0
   1e816:	64f8      	str	r0, [r7, #76]	; 0x4c
   1e818:	64b9      	str	r1, [r7, #72]	; 0x48
   1e81a:	647a      	str	r2, [r7, #68]	; 0x44
   1e81c:	2243      	movs	r2, #67	; 0x43
   1e81e:	18ba      	adds	r2, r7, r2
   1e820:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   1e822:	2300      	movs	r3, #0
   1e824:	2400      	movs	r4, #0
   1e826:	673b      	str	r3, [r7, #112]	; 0x70
   1e828:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   1e82a:	2300      	movs	r3, #0
   1e82c:	2400      	movs	r4, #0
   1e82e:	66bb      	str	r3, [r7, #104]	; 0x68
   1e830:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   1e832:	2300      	movs	r3, #0
   1e834:	2400      	movs	r4, #0
   1e836:	67bb      	str	r3, [r7, #120]	; 0x78
   1e838:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   1e83a:	2300      	movs	r3, #0
   1e83c:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   1e83e:	2358      	movs	r3, #88	; 0x58
   1e840:	2240      	movs	r2, #64	; 0x40
   1e842:	4694      	mov	ip, r2
   1e844:	44bc      	add	ip, r7
   1e846:	4463      	add	r3, ip
   1e848:	781a      	ldrb	r2, [r3, #0]
   1e84a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1e84c:	435a      	muls	r2, r3
   1e84e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1e850:	429a      	cmp	r2, r3
   1e852:	d901      	bls.n	1e858 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1e854:	2340      	movs	r3, #64	; 0x40
   1e856:	e0b3      	b.n	1e9c0 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   1e858:	2343      	movs	r3, #67	; 0x43
   1e85a:	18fb      	adds	r3, r7, r3
   1e85c:	781b      	ldrb	r3, [r3, #0]
   1e85e:	2b00      	cmp	r3, #0
   1e860:	d13d      	bne.n	1e8de <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   1e862:	2358      	movs	r3, #88	; 0x58
   1e864:	2240      	movs	r2, #64	; 0x40
   1e866:	4694      	mov	ip, r2
   1e868:	44bc      	add	ip, r7
   1e86a:	4463      	add	r3, ip
   1e86c:	781b      	ldrb	r3, [r3, #0]
   1e86e:	b2db      	uxtb	r3, r3
   1e870:	613b      	str	r3, [r7, #16]
   1e872:	2300      	movs	r3, #0
   1e874:	617b      	str	r3, [r7, #20]
   1e876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1e878:	60bb      	str	r3, [r7, #8]
   1e87a:	2300      	movs	r3, #0
   1e87c:	60fb      	str	r3, [r7, #12]
   1e87e:	4c52      	ldr	r4, [pc, #328]	; (1e9c8 <_sercom_get_async_baud_val+0x1b8>)
   1e880:	68ba      	ldr	r2, [r7, #8]
   1e882:	68fb      	ldr	r3, [r7, #12]
   1e884:	6938      	ldr	r0, [r7, #16]
   1e886:	6979      	ldr	r1, [r7, #20]
   1e888:	47a0      	blx	r4
   1e88a:	0003      	movs	r3, r0
   1e88c:	000c      	movs	r4, r1
   1e88e:	001b      	movs	r3, r3
   1e890:	65fb      	str	r3, [r7, #92]	; 0x5c
   1e892:	2300      	movs	r3, #0
   1e894:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   1e896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1e898:	603b      	str	r3, [r7, #0]
   1e89a:	2300      	movs	r3, #0
   1e89c:	607b      	str	r3, [r7, #4]
   1e89e:	6db8      	ldr	r0, [r7, #88]	; 0x58
   1e8a0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   1e8a2:	683a      	ldr	r2, [r7, #0]
   1e8a4:	687b      	ldr	r3, [r7, #4]
   1e8a6:	4c49      	ldr	r4, [pc, #292]	; (1e9cc <_sercom_get_async_baud_val+0x1bc>)
   1e8a8:	47a0      	blx	r4
   1e8aa:	0003      	movs	r3, r0
   1e8ac:	000c      	movs	r4, r1
   1e8ae:	673b      	str	r3, [r7, #112]	; 0x70
   1e8b0:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   1e8b2:	2100      	movs	r1, #0
   1e8b4:	2201      	movs	r2, #1
   1e8b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1e8b8:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   1e8ba:	1ac9      	subs	r1, r1, r3
   1e8bc:	41a2      	sbcs	r2, r4
   1e8be:	000b      	movs	r3, r1
   1e8c0:	0014      	movs	r4, r2
   1e8c2:	66bb      	str	r3, [r7, #104]	; 0x68
   1e8c4:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   1e8c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1e8c8:	0c1b      	lsrs	r3, r3, #16
   1e8ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   1e8cc:	0416      	lsls	r6, r2, #16
   1e8ce:	431e      	orrs	r6, r3
   1e8d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1e8d2:	041d      	lsls	r5, r3, #16
   1e8d4:	0033      	movs	r3, r6
   1e8d6:	67bb      	str	r3, [r7, #120]	; 0x78
   1e8d8:	2300      	movs	r3, #0
   1e8da:	67fb      	str	r3, [r7, #124]	; 0x7c
   1e8dc:	e06a      	b.n	1e9b4 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   1e8de:	2343      	movs	r3, #67	; 0x43
   1e8e0:	18fb      	adds	r3, r7, r3
   1e8e2:	781b      	ldrb	r3, [r3, #0]
   1e8e4:	2b01      	cmp	r3, #1
   1e8e6:	d165      	bne.n	1e9b4 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   1e8e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1e8ea:	633b      	str	r3, [r7, #48]	; 0x30
   1e8ec:	2300      	movs	r3, #0
   1e8ee:	637b      	str	r3, [r7, #52]	; 0x34
   1e8f0:	2358      	movs	r3, #88	; 0x58
   1e8f2:	2240      	movs	r2, #64	; 0x40
   1e8f4:	4694      	mov	ip, r2
   1e8f6:	44bc      	add	ip, r7
   1e8f8:	4463      	add	r3, ip
   1e8fa:	781b      	ldrb	r3, [r3, #0]
   1e8fc:	b2db      	uxtb	r3, r3
   1e8fe:	62bb      	str	r3, [r7, #40]	; 0x28
   1e900:	2300      	movs	r3, #0
   1e902:	62fb      	str	r3, [r7, #44]	; 0x2c
   1e904:	4c30      	ldr	r4, [pc, #192]	; (1e9c8 <_sercom_get_async_baud_val+0x1b8>)
   1e906:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e90a:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1e90c:	6b79      	ldr	r1, [r7, #52]	; 0x34
   1e90e:	47a0      	blx	r4
   1e910:	0003      	movs	r3, r0
   1e912:	000c      	movs	r4, r1
   1e914:	65bb      	str	r3, [r7, #88]	; 0x58
   1e916:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   1e918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1e91a:	623b      	str	r3, [r7, #32]
   1e91c:	2300      	movs	r3, #0
   1e91e:	627b      	str	r3, [r7, #36]	; 0x24
   1e920:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1e922:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1e924:	001a      	movs	r2, r3
   1e926:	0023      	movs	r3, r4
   1e928:	6a38      	ldr	r0, [r7, #32]
   1e92a:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1e92c:	4c27      	ldr	r4, [pc, #156]	; (1e9cc <_sercom_get_async_baud_val+0x1bc>)
   1e92e:	47a0      	blx	r4
   1e930:	0003      	movs	r3, r0
   1e932:	000c      	movs	r4, r1
   1e934:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   1e936:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1e938:	2380      	movs	r3, #128	; 0x80
   1e93a:	019b      	lsls	r3, r3, #6
   1e93c:	429a      	cmp	r2, r3
   1e93e:	d901      	bls.n	1e944 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1e940:	2340      	movs	r3, #64	; 0x40
   1e942:	e03d      	b.n	1e9c0 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   1e944:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1e946:	61bb      	str	r3, [r7, #24]
   1e948:	2300      	movs	r3, #0
   1e94a:	61fb      	str	r3, [r7, #28]
   1e94c:	69b9      	ldr	r1, [r7, #24]
   1e94e:	69fa      	ldr	r2, [r7, #28]
   1e950:	000b      	movs	r3, r1
   1e952:	0f5b      	lsrs	r3, r3, #29
   1e954:	0010      	movs	r0, r2
   1e956:	00c0      	lsls	r0, r0, #3
   1e958:	63f8      	str	r0, [r7, #60]	; 0x3c
   1e95a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1e95c:	4318      	orrs	r0, r3
   1e95e:	63f8      	str	r0, [r7, #60]	; 0x3c
   1e960:	000b      	movs	r3, r1
   1e962:	00db      	lsls	r3, r3, #3
   1e964:	63bb      	str	r3, [r7, #56]	; 0x38
   1e966:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1e968:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1e96a:	001a      	movs	r2, r3
   1e96c:	0023      	movs	r3, r4
   1e96e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1e970:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1e972:	4c16      	ldr	r4, [pc, #88]	; (1e9cc <_sercom_get_async_baud_val+0x1bc>)
   1e974:	47a0      	blx	r4
   1e976:	0003      	movs	r3, r0
   1e978:	000c      	movs	r4, r1
   1e97a:	65bb      	str	r3, [r7, #88]	; 0x58
   1e97c:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   1e97e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1e980:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1e982:	b2d9      	uxtb	r1, r3
   1e984:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1e986:	b2db      	uxtb	r3, r3
   1e988:	00db      	lsls	r3, r3, #3
   1e98a:	b2da      	uxtb	r2, r3
   1e98c:	2317      	movs	r3, #23
   1e98e:	2040      	movs	r0, #64	; 0x40
   1e990:	4684      	mov	ip, r0
   1e992:	44bc      	add	ip, r7
   1e994:	4463      	add	r3, ip
   1e996:	1a8a      	subs	r2, r1, r2
   1e998:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   1e99a:	2317      	movs	r3, #23
   1e99c:	2240      	movs	r2, #64	; 0x40
   1e99e:	4694      	mov	ip, r2
   1e9a0:	44bc      	add	ip, r7
   1e9a2:	4463      	add	r3, ip
   1e9a4:	781b      	ldrb	r3, [r3, #0]
   1e9a6:	035b      	lsls	r3, r3, #13
   1e9a8:	001a      	movs	r2, r3
   1e9aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1e9ac:	4313      	orrs	r3, r2
   1e9ae:	67bb      	str	r3, [r7, #120]	; 0x78
   1e9b0:	2300      	movs	r3, #0
   1e9b2:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   1e9b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1e9b6:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   1e9b8:	b29a      	uxth	r2, r3
   1e9ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1e9bc:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   1e9be:	2300      	movs	r3, #0
}
   1e9c0:	0018      	movs	r0, r3
   1e9c2:	46bd      	mov	sp, r7
   1e9c4:	b021      	add	sp, #132	; 0x84
   1e9c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e9c8:	000269a5 	.word	0x000269a5
   1e9cc:	0001e6b3 	.word	0x0001e6b3

0001e9d0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   1e9d0:	b580      	push	{r7, lr}
   1e9d2:	b084      	sub	sp, #16
   1e9d4:	af00      	add	r7, sp, #0
   1e9d6:	0002      	movs	r2, r0
   1e9d8:	1dfb      	adds	r3, r7, #7
   1e9da:	701a      	strb	r2, [r3, #0]
   1e9dc:	1dbb      	adds	r3, r7, #6
   1e9de:	1c0a      	adds	r2, r1, #0
   1e9e0:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   1e9e2:	4b1a      	ldr	r3, [pc, #104]	; (1ea4c <sercom_set_gclk_generator+0x7c>)
   1e9e4:	781b      	ldrb	r3, [r3, #0]
   1e9e6:	2201      	movs	r2, #1
   1e9e8:	4053      	eors	r3, r2
   1e9ea:	b2db      	uxtb	r3, r3
   1e9ec:	2b00      	cmp	r3, #0
   1e9ee:	d103      	bne.n	1e9f8 <sercom_set_gclk_generator+0x28>
   1e9f0:	1dbb      	adds	r3, r7, #6
   1e9f2:	781b      	ldrb	r3, [r3, #0]
   1e9f4:	2b00      	cmp	r3, #0
   1e9f6:	d01b      	beq.n	1ea30 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1e9f8:	230c      	movs	r3, #12
   1e9fa:	18fb      	adds	r3, r7, r3
   1e9fc:	0018      	movs	r0, r3
   1e9fe:	4b14      	ldr	r3, [pc, #80]	; (1ea50 <sercom_set_gclk_generator+0x80>)
   1ea00:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   1ea02:	230c      	movs	r3, #12
   1ea04:	18fb      	adds	r3, r7, r3
   1ea06:	1dfa      	adds	r2, r7, #7
   1ea08:	7812      	ldrb	r2, [r2, #0]
   1ea0a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   1ea0c:	230c      	movs	r3, #12
   1ea0e:	18fb      	adds	r3, r7, r3
   1ea10:	0019      	movs	r1, r3
   1ea12:	2013      	movs	r0, #19
   1ea14:	4b0f      	ldr	r3, [pc, #60]	; (1ea54 <sercom_set_gclk_generator+0x84>)
   1ea16:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   1ea18:	2013      	movs	r0, #19
   1ea1a:	4b0f      	ldr	r3, [pc, #60]	; (1ea58 <sercom_set_gclk_generator+0x88>)
   1ea1c:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   1ea1e:	4b0b      	ldr	r3, [pc, #44]	; (1ea4c <sercom_set_gclk_generator+0x7c>)
   1ea20:	1dfa      	adds	r2, r7, #7
   1ea22:	7812      	ldrb	r2, [r2, #0]
   1ea24:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   1ea26:	4b09      	ldr	r3, [pc, #36]	; (1ea4c <sercom_set_gclk_generator+0x7c>)
   1ea28:	2201      	movs	r2, #1
   1ea2a:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   1ea2c:	2300      	movs	r3, #0
   1ea2e:	e008      	b.n	1ea42 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   1ea30:	4b06      	ldr	r3, [pc, #24]	; (1ea4c <sercom_set_gclk_generator+0x7c>)
   1ea32:	785b      	ldrb	r3, [r3, #1]
   1ea34:	1dfa      	adds	r2, r7, #7
   1ea36:	7812      	ldrb	r2, [r2, #0]
   1ea38:	429a      	cmp	r2, r3
   1ea3a:	d101      	bne.n	1ea40 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   1ea3c:	2300      	movs	r3, #0
   1ea3e:	e000      	b.n	1ea42 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   1ea40:	231d      	movs	r3, #29
}
   1ea42:	0018      	movs	r0, r3
   1ea44:	46bd      	mov	sp, r7
   1ea46:	b004      	add	sp, #16
   1ea48:	bd80      	pop	{r7, pc}
   1ea4a:	46c0      	nop			; (mov r8, r8)
   1ea4c:	200002b4 	.word	0x200002b4
   1ea50:	0001e69d 	.word	0x0001e69d
   1ea54:	00024ab5 	.word	0x00024ab5
   1ea58:	00024af9 	.word	0x00024af9

0001ea5c <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   1ea5c:	b580      	push	{r7, lr}
   1ea5e:	b082      	sub	sp, #8
   1ea60:	af00      	add	r7, sp, #0
   1ea62:	6078      	str	r0, [r7, #4]
   1ea64:	000a      	movs	r2, r1
   1ea66:	1cfb      	adds	r3, r7, #3
   1ea68:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   1ea6a:	687b      	ldr	r3, [r7, #4]
   1ea6c:	4a4d      	ldr	r2, [pc, #308]	; (1eba4 <_sercom_get_default_pad+0x148>)
   1ea6e:	4293      	cmp	r3, r2
   1ea70:	d03f      	beq.n	1eaf2 <_sercom_get_default_pad+0x96>
   1ea72:	4a4c      	ldr	r2, [pc, #304]	; (1eba4 <_sercom_get_default_pad+0x148>)
   1ea74:	4293      	cmp	r3, r2
   1ea76:	d806      	bhi.n	1ea86 <_sercom_get_default_pad+0x2a>
   1ea78:	4a4b      	ldr	r2, [pc, #300]	; (1eba8 <_sercom_get_default_pad+0x14c>)
   1ea7a:	4293      	cmp	r3, r2
   1ea7c:	d00f      	beq.n	1ea9e <_sercom_get_default_pad+0x42>
   1ea7e:	4a4b      	ldr	r2, [pc, #300]	; (1ebac <_sercom_get_default_pad+0x150>)
   1ea80:	4293      	cmp	r3, r2
   1ea82:	d021      	beq.n	1eac8 <_sercom_get_default_pad+0x6c>
   1ea84:	e089      	b.n	1eb9a <_sercom_get_default_pad+0x13e>
   1ea86:	4a4a      	ldr	r2, [pc, #296]	; (1ebb0 <_sercom_get_default_pad+0x154>)
   1ea88:	4293      	cmp	r3, r2
   1ea8a:	d100      	bne.n	1ea8e <_sercom_get_default_pad+0x32>
   1ea8c:	e05b      	b.n	1eb46 <_sercom_get_default_pad+0xea>
   1ea8e:	4a49      	ldr	r2, [pc, #292]	; (1ebb4 <_sercom_get_default_pad+0x158>)
   1ea90:	4293      	cmp	r3, r2
   1ea92:	d100      	bne.n	1ea96 <_sercom_get_default_pad+0x3a>
   1ea94:	e06c      	b.n	1eb70 <_sercom_get_default_pad+0x114>
   1ea96:	4a48      	ldr	r2, [pc, #288]	; (1ebb8 <_sercom_get_default_pad+0x15c>)
   1ea98:	4293      	cmp	r3, r2
   1ea9a:	d03f      	beq.n	1eb1c <_sercom_get_default_pad+0xc0>
   1ea9c:	e07d      	b.n	1eb9a <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1ea9e:	1cfb      	adds	r3, r7, #3
   1eaa0:	781b      	ldrb	r3, [r3, #0]
   1eaa2:	2b01      	cmp	r3, #1
   1eaa4:	d00a      	beq.n	1eabc <_sercom_get_default_pad+0x60>
   1eaa6:	dc02      	bgt.n	1eaae <_sercom_get_default_pad+0x52>
   1eaa8:	2b00      	cmp	r3, #0
   1eaaa:	d005      	beq.n	1eab8 <_sercom_get_default_pad+0x5c>
   1eaac:	e075      	b.n	1eb9a <_sercom_get_default_pad+0x13e>
   1eaae:	2b02      	cmp	r3, #2
   1eab0:	d006      	beq.n	1eac0 <_sercom_get_default_pad+0x64>
   1eab2:	2b03      	cmp	r3, #3
   1eab4:	d006      	beq.n	1eac4 <_sercom_get_default_pad+0x68>
   1eab6:	e070      	b.n	1eb9a <_sercom_get_default_pad+0x13e>
   1eab8:	4b40      	ldr	r3, [pc, #256]	; (1ebbc <_sercom_get_default_pad+0x160>)
   1eaba:	e06f      	b.n	1eb9c <_sercom_get_default_pad+0x140>
   1eabc:	4b40      	ldr	r3, [pc, #256]	; (1ebc0 <_sercom_get_default_pad+0x164>)
   1eabe:	e06d      	b.n	1eb9c <_sercom_get_default_pad+0x140>
   1eac0:	4b40      	ldr	r3, [pc, #256]	; (1ebc4 <_sercom_get_default_pad+0x168>)
   1eac2:	e06b      	b.n	1eb9c <_sercom_get_default_pad+0x140>
   1eac4:	4b40      	ldr	r3, [pc, #256]	; (1ebc8 <_sercom_get_default_pad+0x16c>)
   1eac6:	e069      	b.n	1eb9c <_sercom_get_default_pad+0x140>
   1eac8:	1cfb      	adds	r3, r7, #3
   1eaca:	781b      	ldrb	r3, [r3, #0]
   1eacc:	2b01      	cmp	r3, #1
   1eace:	d00a      	beq.n	1eae6 <_sercom_get_default_pad+0x8a>
   1ead0:	dc02      	bgt.n	1ead8 <_sercom_get_default_pad+0x7c>
   1ead2:	2b00      	cmp	r3, #0
   1ead4:	d005      	beq.n	1eae2 <_sercom_get_default_pad+0x86>
   1ead6:	e060      	b.n	1eb9a <_sercom_get_default_pad+0x13e>
   1ead8:	2b02      	cmp	r3, #2
   1eada:	d006      	beq.n	1eaea <_sercom_get_default_pad+0x8e>
   1eadc:	2b03      	cmp	r3, #3
   1eade:	d006      	beq.n	1eaee <_sercom_get_default_pad+0x92>
   1eae0:	e05b      	b.n	1eb9a <_sercom_get_default_pad+0x13e>
   1eae2:	2303      	movs	r3, #3
   1eae4:	e05a      	b.n	1eb9c <_sercom_get_default_pad+0x140>
   1eae6:	4b39      	ldr	r3, [pc, #228]	; (1ebcc <_sercom_get_default_pad+0x170>)
   1eae8:	e058      	b.n	1eb9c <_sercom_get_default_pad+0x140>
   1eaea:	4b39      	ldr	r3, [pc, #228]	; (1ebd0 <_sercom_get_default_pad+0x174>)
   1eaec:	e056      	b.n	1eb9c <_sercom_get_default_pad+0x140>
   1eaee:	4b39      	ldr	r3, [pc, #228]	; (1ebd4 <_sercom_get_default_pad+0x178>)
   1eaf0:	e054      	b.n	1eb9c <_sercom_get_default_pad+0x140>
   1eaf2:	1cfb      	adds	r3, r7, #3
   1eaf4:	781b      	ldrb	r3, [r3, #0]
   1eaf6:	2b01      	cmp	r3, #1
   1eaf8:	d00a      	beq.n	1eb10 <_sercom_get_default_pad+0xb4>
   1eafa:	dc02      	bgt.n	1eb02 <_sercom_get_default_pad+0xa6>
   1eafc:	2b00      	cmp	r3, #0
   1eafe:	d005      	beq.n	1eb0c <_sercom_get_default_pad+0xb0>
   1eb00:	e04b      	b.n	1eb9a <_sercom_get_default_pad+0x13e>
   1eb02:	2b02      	cmp	r3, #2
   1eb04:	d006      	beq.n	1eb14 <_sercom_get_default_pad+0xb8>
   1eb06:	2b03      	cmp	r3, #3
   1eb08:	d006      	beq.n	1eb18 <_sercom_get_default_pad+0xbc>
   1eb0a:	e046      	b.n	1eb9a <_sercom_get_default_pad+0x13e>
   1eb0c:	4b32      	ldr	r3, [pc, #200]	; (1ebd8 <_sercom_get_default_pad+0x17c>)
   1eb0e:	e045      	b.n	1eb9c <_sercom_get_default_pad+0x140>
   1eb10:	4b32      	ldr	r3, [pc, #200]	; (1ebdc <_sercom_get_default_pad+0x180>)
   1eb12:	e043      	b.n	1eb9c <_sercom_get_default_pad+0x140>
   1eb14:	4b32      	ldr	r3, [pc, #200]	; (1ebe0 <_sercom_get_default_pad+0x184>)
   1eb16:	e041      	b.n	1eb9c <_sercom_get_default_pad+0x140>
   1eb18:	4b32      	ldr	r3, [pc, #200]	; (1ebe4 <_sercom_get_default_pad+0x188>)
   1eb1a:	e03f      	b.n	1eb9c <_sercom_get_default_pad+0x140>
   1eb1c:	1cfb      	adds	r3, r7, #3
   1eb1e:	781b      	ldrb	r3, [r3, #0]
   1eb20:	2b01      	cmp	r3, #1
   1eb22:	d00a      	beq.n	1eb3a <_sercom_get_default_pad+0xde>
   1eb24:	dc02      	bgt.n	1eb2c <_sercom_get_default_pad+0xd0>
   1eb26:	2b00      	cmp	r3, #0
   1eb28:	d005      	beq.n	1eb36 <_sercom_get_default_pad+0xda>
   1eb2a:	e036      	b.n	1eb9a <_sercom_get_default_pad+0x13e>
   1eb2c:	2b02      	cmp	r3, #2
   1eb2e:	d006      	beq.n	1eb3e <_sercom_get_default_pad+0xe2>
   1eb30:	2b03      	cmp	r3, #3
   1eb32:	d006      	beq.n	1eb42 <_sercom_get_default_pad+0xe6>
   1eb34:	e031      	b.n	1eb9a <_sercom_get_default_pad+0x13e>
   1eb36:	4b2c      	ldr	r3, [pc, #176]	; (1ebe8 <_sercom_get_default_pad+0x18c>)
   1eb38:	e030      	b.n	1eb9c <_sercom_get_default_pad+0x140>
   1eb3a:	4b2c      	ldr	r3, [pc, #176]	; (1ebec <_sercom_get_default_pad+0x190>)
   1eb3c:	e02e      	b.n	1eb9c <_sercom_get_default_pad+0x140>
   1eb3e:	4b2c      	ldr	r3, [pc, #176]	; (1ebf0 <_sercom_get_default_pad+0x194>)
   1eb40:	e02c      	b.n	1eb9c <_sercom_get_default_pad+0x140>
   1eb42:	4b2c      	ldr	r3, [pc, #176]	; (1ebf4 <_sercom_get_default_pad+0x198>)
   1eb44:	e02a      	b.n	1eb9c <_sercom_get_default_pad+0x140>
   1eb46:	1cfb      	adds	r3, r7, #3
   1eb48:	781b      	ldrb	r3, [r3, #0]
   1eb4a:	2b01      	cmp	r3, #1
   1eb4c:	d00a      	beq.n	1eb64 <_sercom_get_default_pad+0x108>
   1eb4e:	dc02      	bgt.n	1eb56 <_sercom_get_default_pad+0xfa>
   1eb50:	2b00      	cmp	r3, #0
   1eb52:	d005      	beq.n	1eb60 <_sercom_get_default_pad+0x104>
   1eb54:	e021      	b.n	1eb9a <_sercom_get_default_pad+0x13e>
   1eb56:	2b02      	cmp	r3, #2
   1eb58:	d006      	beq.n	1eb68 <_sercom_get_default_pad+0x10c>
   1eb5a:	2b03      	cmp	r3, #3
   1eb5c:	d006      	beq.n	1eb6c <_sercom_get_default_pad+0x110>
   1eb5e:	e01c      	b.n	1eb9a <_sercom_get_default_pad+0x13e>
   1eb60:	4b25      	ldr	r3, [pc, #148]	; (1ebf8 <_sercom_get_default_pad+0x19c>)
   1eb62:	e01b      	b.n	1eb9c <_sercom_get_default_pad+0x140>
   1eb64:	4b25      	ldr	r3, [pc, #148]	; (1ebfc <_sercom_get_default_pad+0x1a0>)
   1eb66:	e019      	b.n	1eb9c <_sercom_get_default_pad+0x140>
   1eb68:	4b25      	ldr	r3, [pc, #148]	; (1ec00 <_sercom_get_default_pad+0x1a4>)
   1eb6a:	e017      	b.n	1eb9c <_sercom_get_default_pad+0x140>
   1eb6c:	4b25      	ldr	r3, [pc, #148]	; (1ec04 <_sercom_get_default_pad+0x1a8>)
   1eb6e:	e015      	b.n	1eb9c <_sercom_get_default_pad+0x140>
   1eb70:	1cfb      	adds	r3, r7, #3
   1eb72:	781b      	ldrb	r3, [r3, #0]
   1eb74:	2b01      	cmp	r3, #1
   1eb76:	d00a      	beq.n	1eb8e <_sercom_get_default_pad+0x132>
   1eb78:	dc02      	bgt.n	1eb80 <_sercom_get_default_pad+0x124>
   1eb7a:	2b00      	cmp	r3, #0
   1eb7c:	d005      	beq.n	1eb8a <_sercom_get_default_pad+0x12e>
   1eb7e:	e00c      	b.n	1eb9a <_sercom_get_default_pad+0x13e>
   1eb80:	2b02      	cmp	r3, #2
   1eb82:	d006      	beq.n	1eb92 <_sercom_get_default_pad+0x136>
   1eb84:	2b03      	cmp	r3, #3
   1eb86:	d006      	beq.n	1eb96 <_sercom_get_default_pad+0x13a>
   1eb88:	e007      	b.n	1eb9a <_sercom_get_default_pad+0x13e>
   1eb8a:	4b1f      	ldr	r3, [pc, #124]	; (1ec08 <_sercom_get_default_pad+0x1ac>)
   1eb8c:	e006      	b.n	1eb9c <_sercom_get_default_pad+0x140>
   1eb8e:	4b1f      	ldr	r3, [pc, #124]	; (1ec0c <_sercom_get_default_pad+0x1b0>)
   1eb90:	e004      	b.n	1eb9c <_sercom_get_default_pad+0x140>
   1eb92:	4b1f      	ldr	r3, [pc, #124]	; (1ec10 <_sercom_get_default_pad+0x1b4>)
   1eb94:	e002      	b.n	1eb9c <_sercom_get_default_pad+0x140>
   1eb96:	4b1f      	ldr	r3, [pc, #124]	; (1ec14 <_sercom_get_default_pad+0x1b8>)
   1eb98:	e000      	b.n	1eb9c <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   1eb9a:	2300      	movs	r3, #0
}
   1eb9c:	0018      	movs	r0, r3
   1eb9e:	46bd      	mov	sp, r7
   1eba0:	b002      	add	sp, #8
   1eba2:	bd80      	pop	{r7, pc}
   1eba4:	42001000 	.word	0x42001000
   1eba8:	42000800 	.word	0x42000800
   1ebac:	42000c00 	.word	0x42000c00
   1ebb0:	42001800 	.word	0x42001800
   1ebb4:	42001c00 	.word	0x42001c00
   1ebb8:	42001400 	.word	0x42001400
   1ebbc:	00040003 	.word	0x00040003
   1ebc0:	00050003 	.word	0x00050003
   1ebc4:	00060003 	.word	0x00060003
   1ebc8:	00070003 	.word	0x00070003
   1ebcc:	00010003 	.word	0x00010003
   1ebd0:	001e0003 	.word	0x001e0003
   1ebd4:	001f0003 	.word	0x001f0003
   1ebd8:	00080003 	.word	0x00080003
   1ebdc:	00090003 	.word	0x00090003
   1ebe0:	000a0003 	.word	0x000a0003
   1ebe4:	000b0003 	.word	0x000b0003
   1ebe8:	00100003 	.word	0x00100003
   1ebec:	00110003 	.word	0x00110003
   1ebf0:	00120003 	.word	0x00120003
   1ebf4:	00130003 	.word	0x00130003
   1ebf8:	000c0003 	.word	0x000c0003
   1ebfc:	000d0003 	.word	0x000d0003
   1ec00:	000e0003 	.word	0x000e0003
   1ec04:	000f0003 	.word	0x000f0003
   1ec08:	00160003 	.word	0x00160003
   1ec0c:	00170003 	.word	0x00170003
   1ec10:	00180003 	.word	0x00180003
   1ec14:	00190003 	.word	0x00190003

0001ec18 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   1ec18:	b590      	push	{r4, r7, lr}
   1ec1a:	b08b      	sub	sp, #44	; 0x2c
   1ec1c:	af00      	add	r7, sp, #0
   1ec1e:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   1ec20:	230c      	movs	r3, #12
   1ec22:	18fb      	adds	r3, r7, r3
   1ec24:	4a0f      	ldr	r2, [pc, #60]	; (1ec64 <_sercom_get_sercom_inst_index+0x4c>)
   1ec26:	ca13      	ldmia	r2!, {r0, r1, r4}
   1ec28:	c313      	stmia	r3!, {r0, r1, r4}
   1ec2a:	ca13      	ldmia	r2!, {r0, r1, r4}
   1ec2c:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1ec2e:	2300      	movs	r3, #0
   1ec30:	627b      	str	r3, [r7, #36]	; 0x24
   1ec32:	e00e      	b.n	1ec52 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   1ec34:	230c      	movs	r3, #12
   1ec36:	18fb      	adds	r3, r7, r3
   1ec38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1ec3a:	0092      	lsls	r2, r2, #2
   1ec3c:	58d3      	ldr	r3, [r2, r3]
   1ec3e:	001a      	movs	r2, r3
   1ec40:	687b      	ldr	r3, [r7, #4]
   1ec42:	429a      	cmp	r2, r3
   1ec44:	d102      	bne.n	1ec4c <_sercom_get_sercom_inst_index+0x34>
			return i;
   1ec46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ec48:	b2db      	uxtb	r3, r3
   1ec4a:	e006      	b.n	1ec5a <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1ec4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ec4e:	3301      	adds	r3, #1
   1ec50:	627b      	str	r3, [r7, #36]	; 0x24
   1ec52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ec54:	2b05      	cmp	r3, #5
   1ec56:	d9ed      	bls.n	1ec34 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   1ec58:	2300      	movs	r3, #0
}
   1ec5a:	0018      	movs	r0, r3
   1ec5c:	46bd      	mov	sp, r7
   1ec5e:	b00b      	add	sp, #44	; 0x2c
   1ec60:	bd90      	pop	{r4, r7, pc}
   1ec62:	46c0      	nop			; (mov r8, r8)
   1ec64:	0002abc0 	.word	0x0002abc0

0001ec68 <system_cpu_clock_get_hz>:
{
   1ec68:	b580      	push	{r7, lr}
   1ec6a:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   1ec6c:	2000      	movs	r0, #0
   1ec6e:	4b05      	ldr	r3, [pc, #20]	; (1ec84 <system_cpu_clock_get_hz+0x1c>)
   1ec70:	4798      	blx	r3
   1ec72:	0002      	movs	r2, r0
   1ec74:	4b04      	ldr	r3, [pc, #16]	; (1ec88 <system_cpu_clock_get_hz+0x20>)
   1ec76:	7a1b      	ldrb	r3, [r3, #8]
   1ec78:	b2db      	uxtb	r3, r3
   1ec7a:	40da      	lsrs	r2, r3
   1ec7c:	0013      	movs	r3, r2
}
   1ec7e:	0018      	movs	r0, r3
   1ec80:	46bd      	mov	sp, r7
   1ec82:	bd80      	pop	{r7, pc}
   1ec84:	000249dd 	.word	0x000249dd
   1ec88:	40000400 	.word	0x40000400

0001ec8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   1ec8c:	b580      	push	{r7, lr}
   1ec8e:	b084      	sub	sp, #16
   1ec90:	af00      	add	r7, sp, #0
   1ec92:	60f8      	str	r0, [r7, #12]
   1ec94:	60b9      	str	r1, [r7, #8]
   1ec96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   1ec98:	68fb      	ldr	r3, [r7, #12]
   1ec9a:	3b04      	subs	r3, #4
   1ec9c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1ec9e:	68fb      	ldr	r3, [r7, #12]
   1eca0:	2280      	movs	r2, #128	; 0x80
   1eca2:	0452      	lsls	r2, r2, #17
   1eca4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1eca6:	68fb      	ldr	r3, [r7, #12]
   1eca8:	3b04      	subs	r3, #4
   1ecaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   1ecac:	68ba      	ldr	r2, [r7, #8]
   1ecae:	68fb      	ldr	r3, [r7, #12]
   1ecb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1ecb2:	68fb      	ldr	r3, [r7, #12]
   1ecb4:	3b04      	subs	r3, #4
   1ecb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   1ecb8:	4a08      	ldr	r2, [pc, #32]	; (1ecdc <pxPortInitialiseStack+0x50>)
   1ecba:	68fb      	ldr	r3, [r7, #12]
   1ecbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   1ecbe:	68fb      	ldr	r3, [r7, #12]
   1ecc0:	3b14      	subs	r3, #20
   1ecc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   1ecc4:	687a      	ldr	r2, [r7, #4]
   1ecc6:	68fb      	ldr	r3, [r7, #12]
   1ecc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   1ecca:	68fb      	ldr	r3, [r7, #12]
   1eccc:	3b20      	subs	r3, #32
   1ecce:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   1ecd0:	68fb      	ldr	r3, [r7, #12]
}
   1ecd2:	0018      	movs	r0, r3
   1ecd4:	46bd      	mov	sp, r7
   1ecd6:	b004      	add	sp, #16
   1ecd8:	bd80      	pop	{r7, pc}
   1ecda:	46c0      	nop			; (mov r8, r8)
   1ecdc:	0001ece1 	.word	0x0001ece1

0001ece0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   1ece0:	b580      	push	{r7, lr}
   1ece2:	b082      	sub	sp, #8
   1ece4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   1ece6:	2300      	movs	r3, #0
   1ece8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1ecea:	4b07      	ldr	r3, [pc, #28]	; (1ed08 <prvTaskExitError+0x28>)
   1ecec:	681b      	ldr	r3, [r3, #0]
   1ecee:	3301      	adds	r3, #1
   1ecf0:	d001      	beq.n	1ecf6 <prvTaskExitError+0x16>
   1ecf2:	b672      	cpsid	i
   1ecf4:	e7fe      	b.n	1ecf4 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   1ecf6:	b672      	cpsid	i
	while( ulDummy == 0 )
   1ecf8:	46c0      	nop			; (mov r8, r8)
   1ecfa:	687b      	ldr	r3, [r7, #4]
   1ecfc:	2b00      	cmp	r3, #0
   1ecfe:	d0fc      	beq.n	1ecfa <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   1ed00:	46c0      	nop			; (mov r8, r8)
   1ed02:	46bd      	mov	sp, r7
   1ed04:	b002      	add	sp, #8
   1ed06:	bd80      	pop	{r7, pc}
   1ed08:	20000010 	.word	0x20000010

0001ed0c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   1ed0c:	b580      	push	{r7, lr}
   1ed0e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   1ed10:	46c0      	nop			; (mov r8, r8)
   1ed12:	46bd      	mov	sp, r7
   1ed14:	bd80      	pop	{r7, pc}
	...

0001ed20 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   1ed20:	4a0b      	ldr	r2, [pc, #44]	; (1ed50 <pxCurrentTCBConst2>)
   1ed22:	6813      	ldr	r3, [r2, #0]
   1ed24:	6818      	ldr	r0, [r3, #0]
   1ed26:	3020      	adds	r0, #32
   1ed28:	f380 8809 	msr	PSP, r0
   1ed2c:	2002      	movs	r0, #2
   1ed2e:	f380 8814 	msr	CONTROL, r0
   1ed32:	f3bf 8f6f 	isb	sy
   1ed36:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   1ed38:	46ae      	mov	lr, r5
   1ed3a:	bc08      	pop	{r3}
   1ed3c:	bc04      	pop	{r2}
   1ed3e:	b662      	cpsie	i
   1ed40:	4718      	bx	r3
   1ed42:	46c0      	nop			; (mov r8, r8)
   1ed44:	46c0      	nop			; (mov r8, r8)
   1ed46:	46c0      	nop			; (mov r8, r8)
   1ed48:	46c0      	nop			; (mov r8, r8)
   1ed4a:	46c0      	nop			; (mov r8, r8)
   1ed4c:	46c0      	nop			; (mov r8, r8)
   1ed4e:	46c0      	nop			; (mov r8, r8)

0001ed50 <pxCurrentTCBConst2>:
   1ed50:	200002b8 	.word	0x200002b8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   1ed54:	46c0      	nop			; (mov r8, r8)
   1ed56:	46c0      	nop			; (mov r8, r8)

0001ed58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   1ed58:	b580      	push	{r7, lr}
   1ed5a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   1ed5c:	4b0e      	ldr	r3, [pc, #56]	; (1ed98 <xPortStartScheduler+0x40>)
   1ed5e:	4a0e      	ldr	r2, [pc, #56]	; (1ed98 <xPortStartScheduler+0x40>)
   1ed60:	6812      	ldr	r2, [r2, #0]
   1ed62:	21ff      	movs	r1, #255	; 0xff
   1ed64:	0409      	lsls	r1, r1, #16
   1ed66:	430a      	orrs	r2, r1
   1ed68:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   1ed6a:	4b0b      	ldr	r3, [pc, #44]	; (1ed98 <xPortStartScheduler+0x40>)
   1ed6c:	4a0a      	ldr	r2, [pc, #40]	; (1ed98 <xPortStartScheduler+0x40>)
   1ed6e:	6812      	ldr	r2, [r2, #0]
   1ed70:	21ff      	movs	r1, #255	; 0xff
   1ed72:	0609      	lsls	r1, r1, #24
   1ed74:	430a      	orrs	r2, r1
   1ed76:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   1ed78:	4b08      	ldr	r3, [pc, #32]	; (1ed9c <xPortStartScheduler+0x44>)
   1ed7a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   1ed7c:	4b08      	ldr	r3, [pc, #32]	; (1eda0 <xPortStartScheduler+0x48>)
   1ed7e:	2200      	movs	r2, #0
   1ed80:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   1ed82:	4b08      	ldr	r3, [pc, #32]	; (1eda4 <xPortStartScheduler+0x4c>)
   1ed84:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   1ed86:	4b08      	ldr	r3, [pc, #32]	; (1eda8 <xPortStartScheduler+0x50>)
   1ed88:	4798      	blx	r3
	prvTaskExitError();
   1ed8a:	4b08      	ldr	r3, [pc, #32]	; (1edac <xPortStartScheduler+0x54>)
   1ed8c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   1ed8e:	2300      	movs	r3, #0
}
   1ed90:	0018      	movs	r0, r3
   1ed92:	46bd      	mov	sp, r7
   1ed94:	bd80      	pop	{r7, pc}
   1ed96:	46c0      	nop			; (mov r8, r8)
   1ed98:	e000ed20 	.word	0xe000ed20
   1ed9c:	0001eec9 	.word	0x0001eec9
   1eda0:	20000010 	.word	0x20000010
   1eda4:	0001ed21 	.word	0x0001ed21
   1eda8:	000204fd 	.word	0x000204fd
   1edac:	0001ece1 	.word	0x0001ece1

0001edb0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   1edb0:	b580      	push	{r7, lr}
   1edb2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   1edb4:	4b05      	ldr	r3, [pc, #20]	; (1edcc <vPortYield+0x1c>)
   1edb6:	2280      	movs	r2, #128	; 0x80
   1edb8:	0552      	lsls	r2, r2, #21
   1edba:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
   1edbc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1edc0:	f3bf 8f6f 	isb	sy
}
   1edc4:	46c0      	nop			; (mov r8, r8)
   1edc6:	46bd      	mov	sp, r7
   1edc8:	bd80      	pop	{r7, pc}
   1edca:	46c0      	nop			; (mov r8, r8)
   1edcc:	e000ed04 	.word	0xe000ed04

0001edd0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   1edd0:	b580      	push	{r7, lr}
   1edd2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   1edd4:	b672      	cpsid	i
    uxCriticalNesting++;
   1edd6:	4b06      	ldr	r3, [pc, #24]	; (1edf0 <vPortEnterCritical+0x20>)
   1edd8:	681b      	ldr	r3, [r3, #0]
   1edda:	1c5a      	adds	r2, r3, #1
   1eddc:	4b04      	ldr	r3, [pc, #16]	; (1edf0 <vPortEnterCritical+0x20>)
   1edde:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   1ede0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1ede4:	f3bf 8f6f 	isb	sy
}
   1ede8:	46c0      	nop			; (mov r8, r8)
   1edea:	46bd      	mov	sp, r7
   1edec:	bd80      	pop	{r7, pc}
   1edee:	46c0      	nop			; (mov r8, r8)
   1edf0:	20000010 	.word	0x20000010

0001edf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   1edf4:	b580      	push	{r7, lr}
   1edf6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   1edf8:	4b09      	ldr	r3, [pc, #36]	; (1ee20 <vPortExitCritical+0x2c>)
   1edfa:	681b      	ldr	r3, [r3, #0]
   1edfc:	2b00      	cmp	r3, #0
   1edfe:	d101      	bne.n	1ee04 <vPortExitCritical+0x10>
   1ee00:	b672      	cpsid	i
   1ee02:	e7fe      	b.n	1ee02 <vPortExitCritical+0xe>
    uxCriticalNesting--;
   1ee04:	4b06      	ldr	r3, [pc, #24]	; (1ee20 <vPortExitCritical+0x2c>)
   1ee06:	681b      	ldr	r3, [r3, #0]
   1ee08:	1e5a      	subs	r2, r3, #1
   1ee0a:	4b05      	ldr	r3, [pc, #20]	; (1ee20 <vPortExitCritical+0x2c>)
   1ee0c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   1ee0e:	4b04      	ldr	r3, [pc, #16]	; (1ee20 <vPortExitCritical+0x2c>)
   1ee10:	681b      	ldr	r3, [r3, #0]
   1ee12:	2b00      	cmp	r3, #0
   1ee14:	d100      	bne.n	1ee18 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   1ee16:	b662      	cpsie	i
    }
}
   1ee18:	46c0      	nop			; (mov r8, r8)
   1ee1a:	46bd      	mov	sp, r7
   1ee1c:	bd80      	pop	{r7, pc}
   1ee1e:	46c0      	nop			; (mov r8, r8)
   1ee20:	20000010 	.word	0x20000010

0001ee24 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   1ee24:	f3ef 8010 	mrs	r0, PRIMASK
   1ee28:	b672      	cpsid	i
   1ee2a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   1ee2c:	46c0      	nop			; (mov r8, r8)
   1ee2e:	0018      	movs	r0, r3

0001ee30 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   1ee30:	f380 8810 	msr	PRIMASK, r0
   1ee34:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   1ee36:	46c0      	nop			; (mov r8, r8)
	...

0001ee40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   1ee40:	f3ef 8009 	mrs	r0, PSP
   1ee44:	4b0e      	ldr	r3, [pc, #56]	; (1ee80 <pxCurrentTCBConst>)
   1ee46:	681a      	ldr	r2, [r3, #0]
   1ee48:	3820      	subs	r0, #32
   1ee4a:	6010      	str	r0, [r2, #0]
   1ee4c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1ee4e:	4644      	mov	r4, r8
   1ee50:	464d      	mov	r5, r9
   1ee52:	4656      	mov	r6, sl
   1ee54:	465f      	mov	r7, fp
   1ee56:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1ee58:	b508      	push	{r3, lr}
   1ee5a:	b672      	cpsid	i
   1ee5c:	f001 fb4e 	bl	204fc <vTaskSwitchContext>
   1ee60:	b662      	cpsie	i
   1ee62:	bc0c      	pop	{r2, r3}
   1ee64:	6811      	ldr	r1, [r2, #0]
   1ee66:	6808      	ldr	r0, [r1, #0]
   1ee68:	3010      	adds	r0, #16
   1ee6a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1ee6c:	46a0      	mov	r8, r4
   1ee6e:	46a9      	mov	r9, r5
   1ee70:	46b2      	mov	sl, r6
   1ee72:	46bb      	mov	fp, r7
   1ee74:	f380 8809 	msr	PSP, r0
   1ee78:	3820      	subs	r0, #32
   1ee7a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1ee7c:	4718      	bx	r3
   1ee7e:	46c0      	nop			; (mov r8, r8)

0001ee80 <pxCurrentTCBConst>:
   1ee80:	200002b8 	.word	0x200002b8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   1ee84:	46c0      	nop			; (mov r8, r8)
   1ee86:	46c0      	nop			; (mov r8, r8)

0001ee88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   1ee88:	b580      	push	{r7, lr}
   1ee8a:	b082      	sub	sp, #8
   1ee8c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   1ee8e:	4b0a      	ldr	r3, [pc, #40]	; (1eeb8 <SysTick_Handler+0x30>)
   1ee90:	4798      	blx	r3
   1ee92:	0003      	movs	r3, r0
   1ee94:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   1ee96:	4b09      	ldr	r3, [pc, #36]	; (1eebc <SysTick_Handler+0x34>)
   1ee98:	4798      	blx	r3
   1ee9a:	1e03      	subs	r3, r0, #0
   1ee9c:	d003      	beq.n	1eea6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   1ee9e:	4b08      	ldr	r3, [pc, #32]	; (1eec0 <SysTick_Handler+0x38>)
   1eea0:	2280      	movs	r2, #128	; 0x80
   1eea2:	0552      	lsls	r2, r2, #21
   1eea4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   1eea6:	687b      	ldr	r3, [r7, #4]
   1eea8:	0018      	movs	r0, r3
   1eeaa:	4b06      	ldr	r3, [pc, #24]	; (1eec4 <SysTick_Handler+0x3c>)
   1eeac:	4798      	blx	r3
}
   1eeae:	46c0      	nop			; (mov r8, r8)
   1eeb0:	46bd      	mov	sp, r7
   1eeb2:	b002      	add	sp, #8
   1eeb4:	bd80      	pop	{r7, pc}
   1eeb6:	46c0      	nop			; (mov r8, r8)
   1eeb8:	0001ee25 	.word	0x0001ee25
   1eebc:	00020389 	.word	0x00020389
   1eec0:	e000ed04 	.word	0xe000ed04
   1eec4:	0001ee31 	.word	0x0001ee31

0001eec8 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   1eec8:	b5b0      	push	{r4, r5, r7, lr}
   1eeca:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   1eecc:	4b0a      	ldr	r3, [pc, #40]	; (1eef8 <prvSetupTimerInterrupt+0x30>)
   1eece:	2200      	movs	r2, #0
   1eed0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   1eed2:	4b0a      	ldr	r3, [pc, #40]	; (1eefc <prvSetupTimerInterrupt+0x34>)
   1eed4:	2200      	movs	r2, #0
   1eed6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   1eed8:	4c09      	ldr	r4, [pc, #36]	; (1ef00 <prvSetupTimerInterrupt+0x38>)
   1eeda:	4b0a      	ldr	r3, [pc, #40]	; (1ef04 <prvSetupTimerInterrupt+0x3c>)
   1eedc:	4798      	blx	r3
   1eede:	4b0a      	ldr	r3, [pc, #40]	; (1ef08 <prvSetupTimerInterrupt+0x40>)
   1eee0:	22fa      	movs	r2, #250	; 0xfa
   1eee2:	0091      	lsls	r1, r2, #2
   1eee4:	4798      	blx	r3
   1eee6:	0003      	movs	r3, r0
   1eee8:	3b01      	subs	r3, #1
   1eeea:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   1eeec:	4b02      	ldr	r3, [pc, #8]	; (1eef8 <prvSetupTimerInterrupt+0x30>)
   1eeee:	2207      	movs	r2, #7
   1eef0:	601a      	str	r2, [r3, #0]
}
   1eef2:	46c0      	nop			; (mov r8, r8)
   1eef4:	46bd      	mov	sp, r7
   1eef6:	bdb0      	pop	{r4, r5, r7, pc}
   1eef8:	e000e010 	.word	0xe000e010
   1eefc:	e000e018 	.word	0xe000e018
   1ef00:	e000e014 	.word	0xe000e014
   1ef04:	0001ec69 	.word	0x0001ec69
   1ef08:	000265fd 	.word	0x000265fd

0001ef0c <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   1ef0c:	b580      	push	{r7, lr}
   1ef0e:	b084      	sub	sp, #16
   1ef10:	af00      	add	r7, sp, #0
   1ef12:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
   1ef14:	4b07      	ldr	r3, [pc, #28]	; (1ef34 <pvPortMalloc+0x28>)
   1ef16:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
   1ef18:	687b      	ldr	r3, [r7, #4]
   1ef1a:	0018      	movs	r0, r3
   1ef1c:	4b06      	ldr	r3, [pc, #24]	; (1ef38 <pvPortMalloc+0x2c>)
   1ef1e:	4798      	blx	r3
   1ef20:	0003      	movs	r3, r0
   1ef22:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   1ef24:	4b05      	ldr	r3, [pc, #20]	; (1ef3c <pvPortMalloc+0x30>)
   1ef26:	4798      	blx	r3
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
   1ef28:	68fb      	ldr	r3, [r7, #12]
}
   1ef2a:	0018      	movs	r0, r3
   1ef2c:	46bd      	mov	sp, r7
   1ef2e:	b004      	add	sp, #16
   1ef30:	bd80      	pop	{r7, pc}
   1ef32:	46c0      	nop			; (mov r8, r8)
   1ef34:	00020201 	.word	0x00020201
   1ef38:	00028e91 	.word	0x00028e91
   1ef3c:	00020219 	.word	0x00020219

0001ef40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   1ef40:	b580      	push	{r7, lr}
   1ef42:	b082      	sub	sp, #8
   1ef44:	af00      	add	r7, sp, #0
   1ef46:	6078      	str	r0, [r7, #4]
	if( pv )
   1ef48:	687b      	ldr	r3, [r7, #4]
   1ef4a:	2b00      	cmp	r3, #0
   1ef4c:	d007      	beq.n	1ef5e <vPortFree+0x1e>
	{
		vTaskSuspendAll();
   1ef4e:	4b06      	ldr	r3, [pc, #24]	; (1ef68 <vPortFree+0x28>)
   1ef50:	4798      	blx	r3
		{
			free( pv );
   1ef52:	687b      	ldr	r3, [r7, #4]
   1ef54:	0018      	movs	r0, r3
   1ef56:	4b05      	ldr	r3, [pc, #20]	; (1ef6c <vPortFree+0x2c>)
   1ef58:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
   1ef5a:	4b05      	ldr	r3, [pc, #20]	; (1ef70 <vPortFree+0x30>)
   1ef5c:	4798      	blx	r3
	}
}
   1ef5e:	46c0      	nop			; (mov r8, r8)
   1ef60:	46bd      	mov	sp, r7
   1ef62:	b002      	add	sp, #8
   1ef64:	bd80      	pop	{r7, pc}
   1ef66:	46c0      	nop			; (mov r8, r8)
   1ef68:	00020201 	.word	0x00020201
   1ef6c:	00028ea5 	.word	0x00028ea5
   1ef70:	00020219 	.word	0x00020219

0001ef74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   1ef74:	b580      	push	{r7, lr}
   1ef76:	b082      	sub	sp, #8
   1ef78:	af00      	add	r7, sp, #0
   1ef7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1ef7c:	687b      	ldr	r3, [r7, #4]
   1ef7e:	3308      	adds	r3, #8
   1ef80:	001a      	movs	r2, r3
   1ef82:	687b      	ldr	r3, [r7, #4]
   1ef84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1ef86:	687b      	ldr	r3, [r7, #4]
   1ef88:	2201      	movs	r2, #1
   1ef8a:	4252      	negs	r2, r2
   1ef8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1ef8e:	687b      	ldr	r3, [r7, #4]
   1ef90:	3308      	adds	r3, #8
   1ef92:	001a      	movs	r2, r3
   1ef94:	687b      	ldr	r3, [r7, #4]
   1ef96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1ef98:	687b      	ldr	r3, [r7, #4]
   1ef9a:	3308      	adds	r3, #8
   1ef9c:	001a      	movs	r2, r3
   1ef9e:	687b      	ldr	r3, [r7, #4]
   1efa0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1efa2:	687b      	ldr	r3, [r7, #4]
   1efa4:	2200      	movs	r2, #0
   1efa6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   1efa8:	46c0      	nop			; (mov r8, r8)
   1efaa:	46bd      	mov	sp, r7
   1efac:	b002      	add	sp, #8
   1efae:	bd80      	pop	{r7, pc}

0001efb0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   1efb0:	b580      	push	{r7, lr}
   1efb2:	b082      	sub	sp, #8
   1efb4:	af00      	add	r7, sp, #0
   1efb6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   1efb8:	687b      	ldr	r3, [r7, #4]
   1efba:	2200      	movs	r2, #0
   1efbc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1efbe:	46c0      	nop			; (mov r8, r8)
   1efc0:	46bd      	mov	sp, r7
   1efc2:	b002      	add	sp, #8
   1efc4:	bd80      	pop	{r7, pc}

0001efc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1efc6:	b580      	push	{r7, lr}
   1efc8:	b084      	sub	sp, #16
   1efca:	af00      	add	r7, sp, #0
   1efcc:	6078      	str	r0, [r7, #4]
   1efce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   1efd0:	687b      	ldr	r3, [r7, #4]
   1efd2:	685b      	ldr	r3, [r3, #4]
   1efd4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   1efd6:	683b      	ldr	r3, [r7, #0]
   1efd8:	68fa      	ldr	r2, [r7, #12]
   1efda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1efdc:	68fb      	ldr	r3, [r7, #12]
   1efde:	689a      	ldr	r2, [r3, #8]
   1efe0:	683b      	ldr	r3, [r7, #0]
   1efe2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   1efe4:	68fb      	ldr	r3, [r7, #12]
   1efe6:	689b      	ldr	r3, [r3, #8]
   1efe8:	683a      	ldr	r2, [r7, #0]
   1efea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   1efec:	68fb      	ldr	r3, [r7, #12]
   1efee:	683a      	ldr	r2, [r7, #0]
   1eff0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1eff2:	683b      	ldr	r3, [r7, #0]
   1eff4:	687a      	ldr	r2, [r7, #4]
   1eff6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1eff8:	687b      	ldr	r3, [r7, #4]
   1effa:	681b      	ldr	r3, [r3, #0]
   1effc:	1c5a      	adds	r2, r3, #1
   1effe:	687b      	ldr	r3, [r7, #4]
   1f000:	601a      	str	r2, [r3, #0]
}
   1f002:	46c0      	nop			; (mov r8, r8)
   1f004:	46bd      	mov	sp, r7
   1f006:	b004      	add	sp, #16
   1f008:	bd80      	pop	{r7, pc}

0001f00a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1f00a:	b580      	push	{r7, lr}
   1f00c:	b084      	sub	sp, #16
   1f00e:	af00      	add	r7, sp, #0
   1f010:	6078      	str	r0, [r7, #4]
   1f012:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   1f014:	683b      	ldr	r3, [r7, #0]
   1f016:	681b      	ldr	r3, [r3, #0]
   1f018:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1f01a:	68bb      	ldr	r3, [r7, #8]
   1f01c:	3301      	adds	r3, #1
   1f01e:	d103      	bne.n	1f028 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   1f020:	687b      	ldr	r3, [r7, #4]
   1f022:	691b      	ldr	r3, [r3, #16]
   1f024:	60fb      	str	r3, [r7, #12]
   1f026:	e00c      	b.n	1f042 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1f028:	687b      	ldr	r3, [r7, #4]
   1f02a:	3308      	adds	r3, #8
   1f02c:	60fb      	str	r3, [r7, #12]
   1f02e:	e002      	b.n	1f036 <vListInsert+0x2c>
   1f030:	68fb      	ldr	r3, [r7, #12]
   1f032:	685b      	ldr	r3, [r3, #4]
   1f034:	60fb      	str	r3, [r7, #12]
   1f036:	68fb      	ldr	r3, [r7, #12]
   1f038:	685b      	ldr	r3, [r3, #4]
   1f03a:	681a      	ldr	r2, [r3, #0]
   1f03c:	68bb      	ldr	r3, [r7, #8]
   1f03e:	429a      	cmp	r2, r3
   1f040:	d9f6      	bls.n	1f030 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   1f042:	68fb      	ldr	r3, [r7, #12]
   1f044:	685a      	ldr	r2, [r3, #4]
   1f046:	683b      	ldr	r3, [r7, #0]
   1f048:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1f04a:	683b      	ldr	r3, [r7, #0]
   1f04c:	685b      	ldr	r3, [r3, #4]
   1f04e:	683a      	ldr	r2, [r7, #0]
   1f050:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1f052:	683b      	ldr	r3, [r7, #0]
   1f054:	68fa      	ldr	r2, [r7, #12]
   1f056:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   1f058:	68fb      	ldr	r3, [r7, #12]
   1f05a:	683a      	ldr	r2, [r7, #0]
   1f05c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1f05e:	683b      	ldr	r3, [r7, #0]
   1f060:	687a      	ldr	r2, [r7, #4]
   1f062:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1f064:	687b      	ldr	r3, [r7, #4]
   1f066:	681b      	ldr	r3, [r3, #0]
   1f068:	1c5a      	adds	r2, r3, #1
   1f06a:	687b      	ldr	r3, [r7, #4]
   1f06c:	601a      	str	r2, [r3, #0]
}
   1f06e:	46c0      	nop			; (mov r8, r8)
   1f070:	46bd      	mov	sp, r7
   1f072:	b004      	add	sp, #16
   1f074:	bd80      	pop	{r7, pc}

0001f076 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1f076:	b580      	push	{r7, lr}
   1f078:	b084      	sub	sp, #16
   1f07a:	af00      	add	r7, sp, #0
   1f07c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   1f07e:	687b      	ldr	r3, [r7, #4]
   1f080:	691b      	ldr	r3, [r3, #16]
   1f082:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1f084:	687b      	ldr	r3, [r7, #4]
   1f086:	685b      	ldr	r3, [r3, #4]
   1f088:	687a      	ldr	r2, [r7, #4]
   1f08a:	6892      	ldr	r2, [r2, #8]
   1f08c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   1f08e:	687b      	ldr	r3, [r7, #4]
   1f090:	689b      	ldr	r3, [r3, #8]
   1f092:	687a      	ldr	r2, [r7, #4]
   1f094:	6852      	ldr	r2, [r2, #4]
   1f096:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1f098:	68fb      	ldr	r3, [r7, #12]
   1f09a:	685a      	ldr	r2, [r3, #4]
   1f09c:	687b      	ldr	r3, [r7, #4]
   1f09e:	429a      	cmp	r2, r3
   1f0a0:	d103      	bne.n	1f0aa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1f0a2:	687b      	ldr	r3, [r7, #4]
   1f0a4:	689a      	ldr	r2, [r3, #8]
   1f0a6:	68fb      	ldr	r3, [r7, #12]
   1f0a8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   1f0aa:	687b      	ldr	r3, [r7, #4]
   1f0ac:	2200      	movs	r2, #0
   1f0ae:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   1f0b0:	68fb      	ldr	r3, [r7, #12]
   1f0b2:	681b      	ldr	r3, [r3, #0]
   1f0b4:	1e5a      	subs	r2, r3, #1
   1f0b6:	68fb      	ldr	r3, [r7, #12]
   1f0b8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   1f0ba:	68fb      	ldr	r3, [r7, #12]
   1f0bc:	681b      	ldr	r3, [r3, #0]
}
   1f0be:	0018      	movs	r0, r3
   1f0c0:	46bd      	mov	sp, r7
   1f0c2:	b004      	add	sp, #16
   1f0c4:	bd80      	pop	{r7, pc}
	...

0001f0c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   1f0c8:	b580      	push	{r7, lr}
   1f0ca:	b084      	sub	sp, #16
   1f0cc:	af00      	add	r7, sp, #0
   1f0ce:	6078      	str	r0, [r7, #4]
   1f0d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1f0d2:	687b      	ldr	r3, [r7, #4]
   1f0d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   1f0d6:	68fb      	ldr	r3, [r7, #12]
   1f0d8:	2b00      	cmp	r3, #0
   1f0da:	d101      	bne.n	1f0e0 <xQueueGenericReset+0x18>
   1f0dc:	b672      	cpsid	i
   1f0de:	e7fe      	b.n	1f0de <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   1f0e0:	4b23      	ldr	r3, [pc, #140]	; (1f170 <xQueueGenericReset+0xa8>)
   1f0e2:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   1f0e4:	68fb      	ldr	r3, [r7, #12]
   1f0e6:	681a      	ldr	r2, [r3, #0]
   1f0e8:	68fb      	ldr	r3, [r7, #12]
   1f0ea:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1f0ec:	68fb      	ldr	r3, [r7, #12]
   1f0ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f0f0:	434b      	muls	r3, r1
   1f0f2:	18d2      	adds	r2, r2, r3
   1f0f4:	68fb      	ldr	r3, [r7, #12]
   1f0f6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1f0f8:	68fb      	ldr	r3, [r7, #12]
   1f0fa:	2200      	movs	r2, #0
   1f0fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1f0fe:	68fb      	ldr	r3, [r7, #12]
   1f100:	681a      	ldr	r2, [r3, #0]
   1f102:	68fb      	ldr	r3, [r7, #12]
   1f104:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   1f106:	68fb      	ldr	r3, [r7, #12]
   1f108:	681a      	ldr	r2, [r3, #0]
   1f10a:	68fb      	ldr	r3, [r7, #12]
   1f10c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1f10e:	1e59      	subs	r1, r3, #1
   1f110:	68fb      	ldr	r3, [r7, #12]
   1f112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f114:	434b      	muls	r3, r1
   1f116:	18d2      	adds	r2, r2, r3
   1f118:	68fb      	ldr	r3, [r7, #12]
   1f11a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1f11c:	68fb      	ldr	r3, [r7, #12]
   1f11e:	2244      	movs	r2, #68	; 0x44
   1f120:	21ff      	movs	r1, #255	; 0xff
   1f122:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   1f124:	68fb      	ldr	r3, [r7, #12]
   1f126:	2245      	movs	r2, #69	; 0x45
   1f128:	21ff      	movs	r1, #255	; 0xff
   1f12a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   1f12c:	683b      	ldr	r3, [r7, #0]
   1f12e:	2b00      	cmp	r3, #0
   1f130:	d10d      	bne.n	1f14e <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1f132:	68fb      	ldr	r3, [r7, #12]
   1f134:	691b      	ldr	r3, [r3, #16]
   1f136:	2b00      	cmp	r3, #0
   1f138:	d013      	beq.n	1f162 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1f13a:	68fb      	ldr	r3, [r7, #12]
   1f13c:	3310      	adds	r3, #16
   1f13e:	0018      	movs	r0, r3
   1f140:	4b0c      	ldr	r3, [pc, #48]	; (1f174 <xQueueGenericReset+0xac>)
   1f142:	4798      	blx	r3
   1f144:	1e03      	subs	r3, r0, #0
   1f146:	d00c      	beq.n	1f162 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   1f148:	4b0b      	ldr	r3, [pc, #44]	; (1f178 <xQueueGenericReset+0xb0>)
   1f14a:	4798      	blx	r3
   1f14c:	e009      	b.n	1f162 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1f14e:	68fb      	ldr	r3, [r7, #12]
   1f150:	3310      	adds	r3, #16
   1f152:	0018      	movs	r0, r3
   1f154:	4b09      	ldr	r3, [pc, #36]	; (1f17c <xQueueGenericReset+0xb4>)
   1f156:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1f158:	68fb      	ldr	r3, [r7, #12]
   1f15a:	3324      	adds	r3, #36	; 0x24
   1f15c:	0018      	movs	r0, r3
   1f15e:	4b07      	ldr	r3, [pc, #28]	; (1f17c <xQueueGenericReset+0xb4>)
   1f160:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   1f162:	4b07      	ldr	r3, [pc, #28]	; (1f180 <xQueueGenericReset+0xb8>)
   1f164:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   1f166:	2301      	movs	r3, #1
}
   1f168:	0018      	movs	r0, r3
   1f16a:	46bd      	mov	sp, r7
   1f16c:	b004      	add	sp, #16
   1f16e:	bd80      	pop	{r7, pc}
   1f170:	0001edd1 	.word	0x0001edd1
   1f174:	00020639 	.word	0x00020639
   1f178:	0001edb1 	.word	0x0001edb1
   1f17c:	0001ef75 	.word	0x0001ef75
   1f180:	0001edf5 	.word	0x0001edf5

0001f184 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   1f184:	b590      	push	{r4, r7, lr}
   1f186:	b08b      	sub	sp, #44	; 0x2c
   1f188:	af02      	add	r7, sp, #8
   1f18a:	60f8      	str	r0, [r7, #12]
   1f18c:	60b9      	str	r1, [r7, #8]
   1f18e:	1dfb      	adds	r3, r7, #7
   1f190:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1f192:	68fb      	ldr	r3, [r7, #12]
   1f194:	2b00      	cmp	r3, #0
   1f196:	d101      	bne.n	1f19c <xQueueGenericCreate+0x18>
   1f198:	b672      	cpsid	i
   1f19a:	e7fe      	b.n	1f19a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1f19c:	68bb      	ldr	r3, [r7, #8]
   1f19e:	2b00      	cmp	r3, #0
   1f1a0:	d102      	bne.n	1f1a8 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   1f1a2:	2300      	movs	r3, #0
   1f1a4:	61fb      	str	r3, [r7, #28]
   1f1a6:	e003      	b.n	1f1b0 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1f1a8:	68fb      	ldr	r3, [r7, #12]
   1f1aa:	68ba      	ldr	r2, [r7, #8]
   1f1ac:	4353      	muls	r3, r2
   1f1ae:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   1f1b0:	69fb      	ldr	r3, [r7, #28]
   1f1b2:	334c      	adds	r3, #76	; 0x4c
   1f1b4:	0018      	movs	r0, r3
   1f1b6:	4b0c      	ldr	r3, [pc, #48]	; (1f1e8 <xQueueGenericCreate+0x64>)
   1f1b8:	4798      	blx	r3
   1f1ba:	0003      	movs	r3, r0
   1f1bc:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   1f1be:	69bb      	ldr	r3, [r7, #24]
   1f1c0:	2b00      	cmp	r3, #0
   1f1c2:	d00c      	beq.n	1f1de <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   1f1c4:	69bb      	ldr	r3, [r7, #24]
   1f1c6:	334c      	adds	r3, #76	; 0x4c
   1f1c8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1f1ca:	1dfb      	adds	r3, r7, #7
   1f1cc:	781c      	ldrb	r4, [r3, #0]
   1f1ce:	697a      	ldr	r2, [r7, #20]
   1f1d0:	68b9      	ldr	r1, [r7, #8]
   1f1d2:	68f8      	ldr	r0, [r7, #12]
   1f1d4:	69bb      	ldr	r3, [r7, #24]
   1f1d6:	9300      	str	r3, [sp, #0]
   1f1d8:	0023      	movs	r3, r4
   1f1da:	4c04      	ldr	r4, [pc, #16]	; (1f1ec <xQueueGenericCreate+0x68>)
   1f1dc:	47a0      	blx	r4
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
   1f1de:	69bb      	ldr	r3, [r7, #24]
	}
   1f1e0:	0018      	movs	r0, r3
   1f1e2:	46bd      	mov	sp, r7
   1f1e4:	b009      	add	sp, #36	; 0x24
   1f1e6:	bd90      	pop	{r4, r7, pc}
   1f1e8:	0001ef0d 	.word	0x0001ef0d
   1f1ec:	0001f1f1 	.word	0x0001f1f1

0001f1f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   1f1f0:	b580      	push	{r7, lr}
   1f1f2:	b084      	sub	sp, #16
   1f1f4:	af00      	add	r7, sp, #0
   1f1f6:	60f8      	str	r0, [r7, #12]
   1f1f8:	60b9      	str	r1, [r7, #8]
   1f1fa:	607a      	str	r2, [r7, #4]
   1f1fc:	001a      	movs	r2, r3
   1f1fe:	1cfb      	adds	r3, r7, #3
   1f200:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1f202:	68bb      	ldr	r3, [r7, #8]
   1f204:	2b00      	cmp	r3, #0
   1f206:	d103      	bne.n	1f210 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1f208:	69bb      	ldr	r3, [r7, #24]
   1f20a:	69ba      	ldr	r2, [r7, #24]
   1f20c:	601a      	str	r2, [r3, #0]
   1f20e:	e002      	b.n	1f216 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1f210:	69bb      	ldr	r3, [r7, #24]
   1f212:	687a      	ldr	r2, [r7, #4]
   1f214:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1f216:	69bb      	ldr	r3, [r7, #24]
   1f218:	68fa      	ldr	r2, [r7, #12]
   1f21a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   1f21c:	69bb      	ldr	r3, [r7, #24]
   1f21e:	68ba      	ldr	r2, [r7, #8]
   1f220:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1f222:	69bb      	ldr	r3, [r7, #24]
   1f224:	2101      	movs	r1, #1
   1f226:	0018      	movs	r0, r3
   1f228:	4b04      	ldr	r3, [pc, #16]	; (1f23c <prvInitialiseNewQueue+0x4c>)
   1f22a:	4798      	blx	r3
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   1f22c:	69bb      	ldr	r3, [r7, #24]
   1f22e:	2200      	movs	r2, #0
   1f230:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
   1f232:	46c0      	nop			; (mov r8, r8)
   1f234:	46bd      	mov	sp, r7
   1f236:	b004      	add	sp, #16
   1f238:	bd80      	pop	{r7, pc}
   1f23a:	46c0      	nop			; (mov r8, r8)
   1f23c:	0001f0c9 	.word	0x0001f0c9

0001f240 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1f240:	b580      	push	{r7, lr}
   1f242:	b08a      	sub	sp, #40	; 0x28
   1f244:	af00      	add	r7, sp, #0
   1f246:	60f8      	str	r0, [r7, #12]
   1f248:	60b9      	str	r1, [r7, #8]
   1f24a:	607a      	str	r2, [r7, #4]
   1f24c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1f24e:	2300      	movs	r3, #0
   1f250:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1f252:	68fb      	ldr	r3, [r7, #12]
   1f254:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1f256:	6a3b      	ldr	r3, [r7, #32]
   1f258:	2b00      	cmp	r3, #0
   1f25a:	d101      	bne.n	1f260 <xQueueGenericSend+0x20>
   1f25c:	b672      	cpsid	i
   1f25e:	e7fe      	b.n	1f25e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1f260:	68bb      	ldr	r3, [r7, #8]
   1f262:	2b00      	cmp	r3, #0
   1f264:	d103      	bne.n	1f26e <xQueueGenericSend+0x2e>
   1f266:	6a3b      	ldr	r3, [r7, #32]
   1f268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f26a:	2b00      	cmp	r3, #0
   1f26c:	d101      	bne.n	1f272 <xQueueGenericSend+0x32>
   1f26e:	2301      	movs	r3, #1
   1f270:	e000      	b.n	1f274 <xQueueGenericSend+0x34>
   1f272:	2300      	movs	r3, #0
   1f274:	2b00      	cmp	r3, #0
   1f276:	d101      	bne.n	1f27c <xQueueGenericSend+0x3c>
   1f278:	b672      	cpsid	i
   1f27a:	e7fe      	b.n	1f27a <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1f27c:	683b      	ldr	r3, [r7, #0]
   1f27e:	2b02      	cmp	r3, #2
   1f280:	d103      	bne.n	1f28a <xQueueGenericSend+0x4a>
   1f282:	6a3b      	ldr	r3, [r7, #32]
   1f284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1f286:	2b01      	cmp	r3, #1
   1f288:	d101      	bne.n	1f28e <xQueueGenericSend+0x4e>
   1f28a:	2301      	movs	r3, #1
   1f28c:	e000      	b.n	1f290 <xQueueGenericSend+0x50>
   1f28e:	2300      	movs	r3, #0
   1f290:	2b00      	cmp	r3, #0
   1f292:	d101      	bne.n	1f298 <xQueueGenericSend+0x58>
   1f294:	b672      	cpsid	i
   1f296:	e7fe      	b.n	1f296 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1f298:	4b53      	ldr	r3, [pc, #332]	; (1f3e8 <xQueueGenericSend+0x1a8>)
   1f29a:	4798      	blx	r3
   1f29c:	1e03      	subs	r3, r0, #0
   1f29e:	d102      	bne.n	1f2a6 <xQueueGenericSend+0x66>
   1f2a0:	687b      	ldr	r3, [r7, #4]
   1f2a2:	2b00      	cmp	r3, #0
   1f2a4:	d101      	bne.n	1f2aa <xQueueGenericSend+0x6a>
   1f2a6:	2301      	movs	r3, #1
   1f2a8:	e000      	b.n	1f2ac <xQueueGenericSend+0x6c>
   1f2aa:	2300      	movs	r3, #0
   1f2ac:	2b00      	cmp	r3, #0
   1f2ae:	d101      	bne.n	1f2b4 <xQueueGenericSend+0x74>
   1f2b0:	b672      	cpsid	i
   1f2b2:	e7fe      	b.n	1f2b2 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1f2b4:	4b4d      	ldr	r3, [pc, #308]	; (1f3ec <xQueueGenericSend+0x1ac>)
   1f2b6:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1f2b8:	6a3b      	ldr	r3, [r7, #32]
   1f2ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1f2bc:	6a3b      	ldr	r3, [r7, #32]
   1f2be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1f2c0:	429a      	cmp	r2, r3
   1f2c2:	d302      	bcc.n	1f2ca <xQueueGenericSend+0x8a>
   1f2c4:	683b      	ldr	r3, [r7, #0]
   1f2c6:	2b02      	cmp	r3, #2
   1f2c8:	d12d      	bne.n	1f326 <xQueueGenericSend+0xe6>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1f2ca:	683a      	ldr	r2, [r7, #0]
   1f2cc:	68b9      	ldr	r1, [r7, #8]
   1f2ce:	6a3b      	ldr	r3, [r7, #32]
   1f2d0:	0018      	movs	r0, r3
   1f2d2:	4b47      	ldr	r3, [pc, #284]	; (1f3f0 <xQueueGenericSend+0x1b0>)
   1f2d4:	4798      	blx	r3
   1f2d6:	0003      	movs	r3, r0
   1f2d8:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1f2da:	6a3b      	ldr	r3, [r7, #32]
   1f2dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1f2de:	2b00      	cmp	r3, #0
   1f2e0:	d00a      	beq.n	1f2f8 <xQueueGenericSend+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1f2e2:	683a      	ldr	r2, [r7, #0]
   1f2e4:	6a3b      	ldr	r3, [r7, #32]
   1f2e6:	0011      	movs	r1, r2
   1f2e8:	0018      	movs	r0, r3
   1f2ea:	4b42      	ldr	r3, [pc, #264]	; (1f3f4 <xQueueGenericSend+0x1b4>)
   1f2ec:	4798      	blx	r3
   1f2ee:	1e03      	subs	r3, r0, #0
   1f2f0:	d015      	beq.n	1f31e <xQueueGenericSend+0xde>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   1f2f2:	4b41      	ldr	r3, [pc, #260]	; (1f3f8 <xQueueGenericSend+0x1b8>)
   1f2f4:	4798      	blx	r3
   1f2f6:	e012      	b.n	1f31e <xQueueGenericSend+0xde>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1f2f8:	6a3b      	ldr	r3, [r7, #32]
   1f2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f2fc:	2b00      	cmp	r3, #0
   1f2fe:	d009      	beq.n	1f314 <xQueueGenericSend+0xd4>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1f300:	6a3b      	ldr	r3, [r7, #32]
   1f302:	3324      	adds	r3, #36	; 0x24
   1f304:	0018      	movs	r0, r3
   1f306:	4b3d      	ldr	r3, [pc, #244]	; (1f3fc <xQueueGenericSend+0x1bc>)
   1f308:	4798      	blx	r3
   1f30a:	1e03      	subs	r3, r0, #0
   1f30c:	d007      	beq.n	1f31e <xQueueGenericSend+0xde>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   1f30e:	4b3a      	ldr	r3, [pc, #232]	; (1f3f8 <xQueueGenericSend+0x1b8>)
   1f310:	4798      	blx	r3
   1f312:	e004      	b.n	1f31e <xQueueGenericSend+0xde>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   1f314:	69fb      	ldr	r3, [r7, #28]
   1f316:	2b00      	cmp	r3, #0
   1f318:	d001      	beq.n	1f31e <xQueueGenericSend+0xde>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1f31a:	4b37      	ldr	r3, [pc, #220]	; (1f3f8 <xQueueGenericSend+0x1b8>)
   1f31c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1f31e:	4b38      	ldr	r3, [pc, #224]	; (1f400 <xQueueGenericSend+0x1c0>)
   1f320:	4798      	blx	r3
				return pdPASS;
   1f322:	2301      	movs	r3, #1
   1f324:	e05c      	b.n	1f3e0 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1f326:	687b      	ldr	r3, [r7, #4]
   1f328:	2b00      	cmp	r3, #0
   1f32a:	d103      	bne.n	1f334 <xQueueGenericSend+0xf4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1f32c:	4b34      	ldr	r3, [pc, #208]	; (1f400 <xQueueGenericSend+0x1c0>)
   1f32e:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   1f330:	2300      	movs	r3, #0
   1f332:	e055      	b.n	1f3e0 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
   1f334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f336:	2b00      	cmp	r3, #0
   1f338:	d106      	bne.n	1f348 <xQueueGenericSend+0x108>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1f33a:	2314      	movs	r3, #20
   1f33c:	18fb      	adds	r3, r7, r3
   1f33e:	0018      	movs	r0, r3
   1f340:	4b30      	ldr	r3, [pc, #192]	; (1f404 <xQueueGenericSend+0x1c4>)
   1f342:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1f344:	2301      	movs	r3, #1
   1f346:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1f348:	4b2d      	ldr	r3, [pc, #180]	; (1f400 <xQueueGenericSend+0x1c0>)
   1f34a:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1f34c:	4b2e      	ldr	r3, [pc, #184]	; (1f408 <xQueueGenericSend+0x1c8>)
   1f34e:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1f350:	4b26      	ldr	r3, [pc, #152]	; (1f3ec <xQueueGenericSend+0x1ac>)
   1f352:	4798      	blx	r3
   1f354:	6a3b      	ldr	r3, [r7, #32]
   1f356:	2244      	movs	r2, #68	; 0x44
   1f358:	5c9b      	ldrb	r3, [r3, r2]
   1f35a:	b25b      	sxtb	r3, r3
   1f35c:	3301      	adds	r3, #1
   1f35e:	d103      	bne.n	1f368 <xQueueGenericSend+0x128>
   1f360:	6a3b      	ldr	r3, [r7, #32]
   1f362:	2244      	movs	r2, #68	; 0x44
   1f364:	2100      	movs	r1, #0
   1f366:	5499      	strb	r1, [r3, r2]
   1f368:	6a3b      	ldr	r3, [r7, #32]
   1f36a:	2245      	movs	r2, #69	; 0x45
   1f36c:	5c9b      	ldrb	r3, [r3, r2]
   1f36e:	b25b      	sxtb	r3, r3
   1f370:	3301      	adds	r3, #1
   1f372:	d103      	bne.n	1f37c <xQueueGenericSend+0x13c>
   1f374:	6a3b      	ldr	r3, [r7, #32]
   1f376:	2245      	movs	r2, #69	; 0x45
   1f378:	2100      	movs	r1, #0
   1f37a:	5499      	strb	r1, [r3, r2]
   1f37c:	4b20      	ldr	r3, [pc, #128]	; (1f400 <xQueueGenericSend+0x1c0>)
   1f37e:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1f380:	1d3a      	adds	r2, r7, #4
   1f382:	2314      	movs	r3, #20
   1f384:	18fb      	adds	r3, r7, r3
   1f386:	0011      	movs	r1, r2
   1f388:	0018      	movs	r0, r3
   1f38a:	4b20      	ldr	r3, [pc, #128]	; (1f40c <xQueueGenericSend+0x1cc>)
   1f38c:	4798      	blx	r3
   1f38e:	1e03      	subs	r3, r0, #0
   1f390:	d11f      	bne.n	1f3d2 <xQueueGenericSend+0x192>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1f392:	6a3b      	ldr	r3, [r7, #32]
   1f394:	0018      	movs	r0, r3
   1f396:	4b1e      	ldr	r3, [pc, #120]	; (1f410 <xQueueGenericSend+0x1d0>)
   1f398:	4798      	blx	r3
   1f39a:	1e03      	subs	r3, r0, #0
   1f39c:	d012      	beq.n	1f3c4 <xQueueGenericSend+0x184>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1f39e:	6a3b      	ldr	r3, [r7, #32]
   1f3a0:	3310      	adds	r3, #16
   1f3a2:	687a      	ldr	r2, [r7, #4]
   1f3a4:	0011      	movs	r1, r2
   1f3a6:	0018      	movs	r0, r3
   1f3a8:	4b1a      	ldr	r3, [pc, #104]	; (1f414 <xQueueGenericSend+0x1d4>)
   1f3aa:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1f3ac:	6a3b      	ldr	r3, [r7, #32]
   1f3ae:	0018      	movs	r0, r3
   1f3b0:	4b19      	ldr	r3, [pc, #100]	; (1f418 <xQueueGenericSend+0x1d8>)
   1f3b2:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1f3b4:	4b19      	ldr	r3, [pc, #100]	; (1f41c <xQueueGenericSend+0x1dc>)
   1f3b6:	4798      	blx	r3
   1f3b8:	1e03      	subs	r3, r0, #0
   1f3ba:	d000      	beq.n	1f3be <xQueueGenericSend+0x17e>
   1f3bc:	e77a      	b.n	1f2b4 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   1f3be:	4b0e      	ldr	r3, [pc, #56]	; (1f3f8 <xQueueGenericSend+0x1b8>)
   1f3c0:	4798      	blx	r3
   1f3c2:	e777      	b.n	1f2b4 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1f3c4:	6a3b      	ldr	r3, [r7, #32]
   1f3c6:	0018      	movs	r0, r3
   1f3c8:	4b13      	ldr	r3, [pc, #76]	; (1f418 <xQueueGenericSend+0x1d8>)
   1f3ca:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1f3cc:	4b13      	ldr	r3, [pc, #76]	; (1f41c <xQueueGenericSend+0x1dc>)
   1f3ce:	4798      	blx	r3
   1f3d0:	e770      	b.n	1f2b4 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1f3d2:	6a3b      	ldr	r3, [r7, #32]
   1f3d4:	0018      	movs	r0, r3
   1f3d6:	4b10      	ldr	r3, [pc, #64]	; (1f418 <xQueueGenericSend+0x1d8>)
   1f3d8:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1f3da:	4b10      	ldr	r3, [pc, #64]	; (1f41c <xQueueGenericSend+0x1dc>)
   1f3dc:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   1f3de:	2300      	movs	r3, #0
		}
	}
}
   1f3e0:	0018      	movs	r0, r3
   1f3e2:	46bd      	mov	sp, r7
   1f3e4:	b00a      	add	sp, #40	; 0x28
   1f3e6:	bd80      	pop	{r7, pc}
   1f3e8:	00020971 	.word	0x00020971
   1f3ec:	0001edd1 	.word	0x0001edd1
   1f3f0:	0001f901 	.word	0x0001f901
   1f3f4:	0001fc05 	.word	0x0001fc05
   1f3f8:	0001edb1 	.word	0x0001edb1
   1f3fc:	00020639 	.word	0x00020639
   1f400:	0001edf5 	.word	0x0001edf5
   1f404:	000206f9 	.word	0x000206f9
   1f408:	00020201 	.word	0x00020201
   1f40c:	00020721 	.word	0x00020721
   1f410:	0001fb55 	.word	0x0001fb55
   1f414:	000205a1 	.word	0x000205a1
   1f418:	0001fa31 	.word	0x0001fa31
   1f41c:	00020219 	.word	0x00020219

0001f420 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1f420:	b580      	push	{r7, lr}
   1f422:	b088      	sub	sp, #32
   1f424:	af00      	add	r7, sp, #0
   1f426:	60f8      	str	r0, [r7, #12]
   1f428:	60b9      	str	r1, [r7, #8]
   1f42a:	607a      	str	r2, [r7, #4]
   1f42c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1f42e:	68fb      	ldr	r3, [r7, #12]
   1f430:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   1f432:	69bb      	ldr	r3, [r7, #24]
   1f434:	2b00      	cmp	r3, #0
   1f436:	d101      	bne.n	1f43c <xQueueGenericSendFromISR+0x1c>
   1f438:	b672      	cpsid	i
   1f43a:	e7fe      	b.n	1f43a <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1f43c:	68bb      	ldr	r3, [r7, #8]
   1f43e:	2b00      	cmp	r3, #0
   1f440:	d103      	bne.n	1f44a <xQueueGenericSendFromISR+0x2a>
   1f442:	69bb      	ldr	r3, [r7, #24]
   1f444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f446:	2b00      	cmp	r3, #0
   1f448:	d101      	bne.n	1f44e <xQueueGenericSendFromISR+0x2e>
   1f44a:	2301      	movs	r3, #1
   1f44c:	e000      	b.n	1f450 <xQueueGenericSendFromISR+0x30>
   1f44e:	2300      	movs	r3, #0
   1f450:	2b00      	cmp	r3, #0
   1f452:	d101      	bne.n	1f458 <xQueueGenericSendFromISR+0x38>
   1f454:	b672      	cpsid	i
   1f456:	e7fe      	b.n	1f456 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1f458:	683b      	ldr	r3, [r7, #0]
   1f45a:	2b02      	cmp	r3, #2
   1f45c:	d103      	bne.n	1f466 <xQueueGenericSendFromISR+0x46>
   1f45e:	69bb      	ldr	r3, [r7, #24]
   1f460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1f462:	2b01      	cmp	r3, #1
   1f464:	d101      	bne.n	1f46a <xQueueGenericSendFromISR+0x4a>
   1f466:	2301      	movs	r3, #1
   1f468:	e000      	b.n	1f46c <xQueueGenericSendFromISR+0x4c>
   1f46a:	2300      	movs	r3, #0
   1f46c:	2b00      	cmp	r3, #0
   1f46e:	d101      	bne.n	1f474 <xQueueGenericSendFromISR+0x54>
   1f470:	b672      	cpsid	i
   1f472:	e7fe      	b.n	1f472 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1f474:	4b2d      	ldr	r3, [pc, #180]	; (1f52c <xQueueGenericSendFromISR+0x10c>)
   1f476:	4798      	blx	r3
   1f478:	0003      	movs	r3, r0
   1f47a:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1f47c:	69bb      	ldr	r3, [r7, #24]
   1f47e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1f480:	69bb      	ldr	r3, [r7, #24]
   1f482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1f484:	429a      	cmp	r2, r3
   1f486:	d302      	bcc.n	1f48e <xQueueGenericSendFromISR+0x6e>
   1f488:	683b      	ldr	r3, [r7, #0]
   1f48a:	2b02      	cmp	r3, #2
   1f48c:	d142      	bne.n	1f514 <xQueueGenericSendFromISR+0xf4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1f48e:	2313      	movs	r3, #19
   1f490:	18fb      	adds	r3, r7, r3
   1f492:	69ba      	ldr	r2, [r7, #24]
   1f494:	2145      	movs	r1, #69	; 0x45
   1f496:	5c52      	ldrb	r2, [r2, r1]
   1f498:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1f49a:	683a      	ldr	r2, [r7, #0]
   1f49c:	68b9      	ldr	r1, [r7, #8]
   1f49e:	69bb      	ldr	r3, [r7, #24]
   1f4a0:	0018      	movs	r0, r3
   1f4a2:	4b23      	ldr	r3, [pc, #140]	; (1f530 <xQueueGenericSendFromISR+0x110>)
   1f4a4:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1f4a6:	2313      	movs	r3, #19
   1f4a8:	18fb      	adds	r3, r7, r3
   1f4aa:	781b      	ldrb	r3, [r3, #0]
   1f4ac:	b25b      	sxtb	r3, r3
   1f4ae:	3301      	adds	r3, #1
   1f4b0:	d124      	bne.n	1f4fc <xQueueGenericSendFromISR+0xdc>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1f4b2:	69bb      	ldr	r3, [r7, #24]
   1f4b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1f4b6:	2b00      	cmp	r3, #0
   1f4b8:	d00e      	beq.n	1f4d8 <xQueueGenericSendFromISR+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1f4ba:	683a      	ldr	r2, [r7, #0]
   1f4bc:	69bb      	ldr	r3, [r7, #24]
   1f4be:	0011      	movs	r1, r2
   1f4c0:	0018      	movs	r0, r3
   1f4c2:	4b1c      	ldr	r3, [pc, #112]	; (1f534 <xQueueGenericSendFromISR+0x114>)
   1f4c4:	4798      	blx	r3
   1f4c6:	1e03      	subs	r3, r0, #0
   1f4c8:	d021      	beq.n	1f50e <xQueueGenericSendFromISR+0xee>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1f4ca:	687b      	ldr	r3, [r7, #4]
   1f4cc:	2b00      	cmp	r3, #0
   1f4ce:	d01e      	beq.n	1f50e <xQueueGenericSendFromISR+0xee>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1f4d0:	687b      	ldr	r3, [r7, #4]
   1f4d2:	2201      	movs	r2, #1
   1f4d4:	601a      	str	r2, [r3, #0]
   1f4d6:	e01a      	b.n	1f50e <xQueueGenericSendFromISR+0xee>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1f4d8:	69bb      	ldr	r3, [r7, #24]
   1f4da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f4dc:	2b00      	cmp	r3, #0
   1f4de:	d016      	beq.n	1f50e <xQueueGenericSendFromISR+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1f4e0:	69bb      	ldr	r3, [r7, #24]
   1f4e2:	3324      	adds	r3, #36	; 0x24
   1f4e4:	0018      	movs	r0, r3
   1f4e6:	4b14      	ldr	r3, [pc, #80]	; (1f538 <xQueueGenericSendFromISR+0x118>)
   1f4e8:	4798      	blx	r3
   1f4ea:	1e03      	subs	r3, r0, #0
   1f4ec:	d00f      	beq.n	1f50e <xQueueGenericSendFromISR+0xee>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1f4ee:	687b      	ldr	r3, [r7, #4]
   1f4f0:	2b00      	cmp	r3, #0
   1f4f2:	d00c      	beq.n	1f50e <xQueueGenericSendFromISR+0xee>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1f4f4:	687b      	ldr	r3, [r7, #4]
   1f4f6:	2201      	movs	r2, #1
   1f4f8:	601a      	str	r2, [r3, #0]
   1f4fa:	e008      	b.n	1f50e <xQueueGenericSendFromISR+0xee>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1f4fc:	2313      	movs	r3, #19
   1f4fe:	18fb      	adds	r3, r7, r3
   1f500:	781b      	ldrb	r3, [r3, #0]
   1f502:	3301      	adds	r3, #1
   1f504:	b2db      	uxtb	r3, r3
   1f506:	b259      	sxtb	r1, r3
   1f508:	69bb      	ldr	r3, [r7, #24]
   1f50a:	2245      	movs	r2, #69	; 0x45
   1f50c:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1f50e:	2301      	movs	r3, #1
   1f510:	61fb      	str	r3, [r7, #28]
		{
   1f512:	e001      	b.n	1f518 <xQueueGenericSendFromISR+0xf8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   1f514:	2300      	movs	r3, #0
   1f516:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1f518:	697b      	ldr	r3, [r7, #20]
   1f51a:	0018      	movs	r0, r3
   1f51c:	4b07      	ldr	r3, [pc, #28]	; (1f53c <xQueueGenericSendFromISR+0x11c>)
   1f51e:	4798      	blx	r3

	return xReturn;
   1f520:	69fb      	ldr	r3, [r7, #28]
}
   1f522:	0018      	movs	r0, r3
   1f524:	46bd      	mov	sp, r7
   1f526:	b008      	add	sp, #32
   1f528:	bd80      	pop	{r7, pc}
   1f52a:	46c0      	nop			; (mov r8, r8)
   1f52c:	0001ee25 	.word	0x0001ee25
   1f530:	0001f901 	.word	0x0001f901
   1f534:	0001fc05 	.word	0x0001fc05
   1f538:	00020639 	.word	0x00020639
   1f53c:	0001ee31 	.word	0x0001ee31

0001f540 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1f540:	b580      	push	{r7, lr}
   1f542:	b08a      	sub	sp, #40	; 0x28
   1f544:	af00      	add	r7, sp, #0
   1f546:	60f8      	str	r0, [r7, #12]
   1f548:	60b9      	str	r1, [r7, #8]
   1f54a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1f54c:	2300      	movs	r3, #0
   1f54e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1f550:	68fb      	ldr	r3, [r7, #12]
   1f552:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1f554:	6a3b      	ldr	r3, [r7, #32]
   1f556:	2b00      	cmp	r3, #0
   1f558:	d101      	bne.n	1f55e <xQueueReceive+0x1e>
   1f55a:	b672      	cpsid	i
   1f55c:	e7fe      	b.n	1f55c <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1f55e:	68bb      	ldr	r3, [r7, #8]
   1f560:	2b00      	cmp	r3, #0
   1f562:	d103      	bne.n	1f56c <xQueueReceive+0x2c>
   1f564:	6a3b      	ldr	r3, [r7, #32]
   1f566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f568:	2b00      	cmp	r3, #0
   1f56a:	d101      	bne.n	1f570 <xQueueReceive+0x30>
   1f56c:	2301      	movs	r3, #1
   1f56e:	e000      	b.n	1f572 <xQueueReceive+0x32>
   1f570:	2300      	movs	r3, #0
   1f572:	2b00      	cmp	r3, #0
   1f574:	d101      	bne.n	1f57a <xQueueReceive+0x3a>
   1f576:	b672      	cpsid	i
   1f578:	e7fe      	b.n	1f578 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1f57a:	4b4c      	ldr	r3, [pc, #304]	; (1f6ac <xQueueReceive+0x16c>)
   1f57c:	4798      	blx	r3
   1f57e:	1e03      	subs	r3, r0, #0
   1f580:	d102      	bne.n	1f588 <xQueueReceive+0x48>
   1f582:	687b      	ldr	r3, [r7, #4]
   1f584:	2b00      	cmp	r3, #0
   1f586:	d101      	bne.n	1f58c <xQueueReceive+0x4c>
   1f588:	2301      	movs	r3, #1
   1f58a:	e000      	b.n	1f58e <xQueueReceive+0x4e>
   1f58c:	2300      	movs	r3, #0
   1f58e:	2b00      	cmp	r3, #0
   1f590:	d101      	bne.n	1f596 <xQueueReceive+0x56>
   1f592:	b672      	cpsid	i
   1f594:	e7fe      	b.n	1f594 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1f596:	4b46      	ldr	r3, [pc, #280]	; (1f6b0 <xQueueReceive+0x170>)
   1f598:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1f59a:	6a3b      	ldr	r3, [r7, #32]
   1f59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1f59e:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1f5a0:	69fb      	ldr	r3, [r7, #28]
   1f5a2:	2b00      	cmp	r3, #0
   1f5a4:	d01a      	beq.n	1f5dc <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1f5a6:	68ba      	ldr	r2, [r7, #8]
   1f5a8:	6a3b      	ldr	r3, [r7, #32]
   1f5aa:	0011      	movs	r1, r2
   1f5ac:	0018      	movs	r0, r3
   1f5ae:	4b41      	ldr	r3, [pc, #260]	; (1f6b4 <xQueueReceive+0x174>)
   1f5b0:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1f5b2:	69fb      	ldr	r3, [r7, #28]
   1f5b4:	1e5a      	subs	r2, r3, #1
   1f5b6:	6a3b      	ldr	r3, [r7, #32]
   1f5b8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1f5ba:	6a3b      	ldr	r3, [r7, #32]
   1f5bc:	691b      	ldr	r3, [r3, #16]
   1f5be:	2b00      	cmp	r3, #0
   1f5c0:	d008      	beq.n	1f5d4 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1f5c2:	6a3b      	ldr	r3, [r7, #32]
   1f5c4:	3310      	adds	r3, #16
   1f5c6:	0018      	movs	r0, r3
   1f5c8:	4b3b      	ldr	r3, [pc, #236]	; (1f6b8 <xQueueReceive+0x178>)
   1f5ca:	4798      	blx	r3
   1f5cc:	1e03      	subs	r3, r0, #0
   1f5ce:	d001      	beq.n	1f5d4 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1f5d0:	4b3a      	ldr	r3, [pc, #232]	; (1f6bc <xQueueReceive+0x17c>)
   1f5d2:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1f5d4:	4b3a      	ldr	r3, [pc, #232]	; (1f6c0 <xQueueReceive+0x180>)
   1f5d6:	4798      	blx	r3
				return pdPASS;
   1f5d8:	2301      	movs	r3, #1
   1f5da:	e062      	b.n	1f6a2 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1f5dc:	687b      	ldr	r3, [r7, #4]
   1f5de:	2b00      	cmp	r3, #0
   1f5e0:	d103      	bne.n	1f5ea <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1f5e2:	4b37      	ldr	r3, [pc, #220]	; (1f6c0 <xQueueReceive+0x180>)
   1f5e4:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   1f5e6:	2300      	movs	r3, #0
   1f5e8:	e05b      	b.n	1f6a2 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
   1f5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f5ec:	2b00      	cmp	r3, #0
   1f5ee:	d106      	bne.n	1f5fe <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1f5f0:	2314      	movs	r3, #20
   1f5f2:	18fb      	adds	r3, r7, r3
   1f5f4:	0018      	movs	r0, r3
   1f5f6:	4b33      	ldr	r3, [pc, #204]	; (1f6c4 <xQueueReceive+0x184>)
   1f5f8:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1f5fa:	2301      	movs	r3, #1
   1f5fc:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1f5fe:	4b30      	ldr	r3, [pc, #192]	; (1f6c0 <xQueueReceive+0x180>)
   1f600:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1f602:	4b31      	ldr	r3, [pc, #196]	; (1f6c8 <xQueueReceive+0x188>)
   1f604:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1f606:	4b2a      	ldr	r3, [pc, #168]	; (1f6b0 <xQueueReceive+0x170>)
   1f608:	4798      	blx	r3
   1f60a:	6a3b      	ldr	r3, [r7, #32]
   1f60c:	2244      	movs	r2, #68	; 0x44
   1f60e:	5c9b      	ldrb	r3, [r3, r2]
   1f610:	b25b      	sxtb	r3, r3
   1f612:	3301      	adds	r3, #1
   1f614:	d103      	bne.n	1f61e <xQueueReceive+0xde>
   1f616:	6a3b      	ldr	r3, [r7, #32]
   1f618:	2244      	movs	r2, #68	; 0x44
   1f61a:	2100      	movs	r1, #0
   1f61c:	5499      	strb	r1, [r3, r2]
   1f61e:	6a3b      	ldr	r3, [r7, #32]
   1f620:	2245      	movs	r2, #69	; 0x45
   1f622:	5c9b      	ldrb	r3, [r3, r2]
   1f624:	b25b      	sxtb	r3, r3
   1f626:	3301      	adds	r3, #1
   1f628:	d103      	bne.n	1f632 <xQueueReceive+0xf2>
   1f62a:	6a3b      	ldr	r3, [r7, #32]
   1f62c:	2245      	movs	r2, #69	; 0x45
   1f62e:	2100      	movs	r1, #0
   1f630:	5499      	strb	r1, [r3, r2]
   1f632:	4b23      	ldr	r3, [pc, #140]	; (1f6c0 <xQueueReceive+0x180>)
   1f634:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1f636:	1d3a      	adds	r2, r7, #4
   1f638:	2314      	movs	r3, #20
   1f63a:	18fb      	adds	r3, r7, r3
   1f63c:	0011      	movs	r1, r2
   1f63e:	0018      	movs	r0, r3
   1f640:	4b22      	ldr	r3, [pc, #136]	; (1f6cc <xQueueReceive+0x18c>)
   1f642:	4798      	blx	r3
   1f644:	1e03      	subs	r3, r0, #0
   1f646:	d11e      	bne.n	1f686 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1f648:	6a3b      	ldr	r3, [r7, #32]
   1f64a:	0018      	movs	r0, r3
   1f64c:	4b20      	ldr	r3, [pc, #128]	; (1f6d0 <xQueueReceive+0x190>)
   1f64e:	4798      	blx	r3
   1f650:	1e03      	subs	r3, r0, #0
   1f652:	d011      	beq.n	1f678 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1f654:	6a3b      	ldr	r3, [r7, #32]
   1f656:	3324      	adds	r3, #36	; 0x24
   1f658:	687a      	ldr	r2, [r7, #4]
   1f65a:	0011      	movs	r1, r2
   1f65c:	0018      	movs	r0, r3
   1f65e:	4b1d      	ldr	r3, [pc, #116]	; (1f6d4 <xQueueReceive+0x194>)
   1f660:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1f662:	6a3b      	ldr	r3, [r7, #32]
   1f664:	0018      	movs	r0, r3
   1f666:	4b1c      	ldr	r3, [pc, #112]	; (1f6d8 <xQueueReceive+0x198>)
   1f668:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1f66a:	4b1c      	ldr	r3, [pc, #112]	; (1f6dc <xQueueReceive+0x19c>)
   1f66c:	4798      	blx	r3
   1f66e:	1e03      	subs	r3, r0, #0
   1f670:	d191      	bne.n	1f596 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   1f672:	4b12      	ldr	r3, [pc, #72]	; (1f6bc <xQueueReceive+0x17c>)
   1f674:	4798      	blx	r3
   1f676:	e78e      	b.n	1f596 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1f678:	6a3b      	ldr	r3, [r7, #32]
   1f67a:	0018      	movs	r0, r3
   1f67c:	4b16      	ldr	r3, [pc, #88]	; (1f6d8 <xQueueReceive+0x198>)
   1f67e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1f680:	4b16      	ldr	r3, [pc, #88]	; (1f6dc <xQueueReceive+0x19c>)
   1f682:	4798      	blx	r3
   1f684:	e787      	b.n	1f596 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1f686:	6a3b      	ldr	r3, [r7, #32]
   1f688:	0018      	movs	r0, r3
   1f68a:	4b13      	ldr	r3, [pc, #76]	; (1f6d8 <xQueueReceive+0x198>)
   1f68c:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1f68e:	4b13      	ldr	r3, [pc, #76]	; (1f6dc <xQueueReceive+0x19c>)
   1f690:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1f692:	6a3b      	ldr	r3, [r7, #32]
   1f694:	0018      	movs	r0, r3
   1f696:	4b0e      	ldr	r3, [pc, #56]	; (1f6d0 <xQueueReceive+0x190>)
   1f698:	4798      	blx	r3
   1f69a:	1e03      	subs	r3, r0, #0
   1f69c:	d100      	bne.n	1f6a0 <xQueueReceive+0x160>
   1f69e:	e77a      	b.n	1f596 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
   1f6a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1f6a2:	0018      	movs	r0, r3
   1f6a4:	46bd      	mov	sp, r7
   1f6a6:	b00a      	add	sp, #40	; 0x28
   1f6a8:	bd80      	pop	{r7, pc}
   1f6aa:	46c0      	nop			; (mov r8, r8)
   1f6ac:	00020971 	.word	0x00020971
   1f6b0:	0001edd1 	.word	0x0001edd1
   1f6b4:	0001f9e1 	.word	0x0001f9e1
   1f6b8:	00020639 	.word	0x00020639
   1f6bc:	0001edb1 	.word	0x0001edb1
   1f6c0:	0001edf5 	.word	0x0001edf5
   1f6c4:	000206f9 	.word	0x000206f9
   1f6c8:	00020201 	.word	0x00020201
   1f6cc:	00020721 	.word	0x00020721
   1f6d0:	0001fb21 	.word	0x0001fb21
   1f6d4:	000205a1 	.word	0x000205a1
   1f6d8:	0001fa31 	.word	0x0001fa31
   1f6dc:	00020219 	.word	0x00020219

0001f6e0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   1f6e0:	b580      	push	{r7, lr}
   1f6e2:	b08a      	sub	sp, #40	; 0x28
   1f6e4:	af00      	add	r7, sp, #0
   1f6e6:	6078      	str	r0, [r7, #4]
   1f6e8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   1f6ea:	2300      	movs	r3, #0
   1f6ec:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1f6ee:	687b      	ldr	r3, [r7, #4]
   1f6f0:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   1f6f2:	2300      	movs	r3, #0
   1f6f4:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1f6f6:	69fb      	ldr	r3, [r7, #28]
   1f6f8:	2b00      	cmp	r3, #0
   1f6fa:	d101      	bne.n	1f700 <xQueueSemaphoreTake+0x20>
   1f6fc:	b672      	cpsid	i
   1f6fe:	e7fe      	b.n	1f6fe <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1f700:	69fb      	ldr	r3, [r7, #28]
   1f702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f704:	2b00      	cmp	r3, #0
   1f706:	d001      	beq.n	1f70c <xQueueSemaphoreTake+0x2c>
   1f708:	b672      	cpsid	i
   1f70a:	e7fe      	b.n	1f70a <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1f70c:	4b61      	ldr	r3, [pc, #388]	; (1f894 <xQueueSemaphoreTake+0x1b4>)
   1f70e:	4798      	blx	r3
   1f710:	1e03      	subs	r3, r0, #0
   1f712:	d102      	bne.n	1f71a <xQueueSemaphoreTake+0x3a>
   1f714:	683b      	ldr	r3, [r7, #0]
   1f716:	2b00      	cmp	r3, #0
   1f718:	d101      	bne.n	1f71e <xQueueSemaphoreTake+0x3e>
   1f71a:	2301      	movs	r3, #1
   1f71c:	e000      	b.n	1f720 <xQueueSemaphoreTake+0x40>
   1f71e:	2300      	movs	r3, #0
   1f720:	2b00      	cmp	r3, #0
   1f722:	d101      	bne.n	1f728 <xQueueSemaphoreTake+0x48>
   1f724:	b672      	cpsid	i
   1f726:	e7fe      	b.n	1f726 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1f728:	4b5b      	ldr	r3, [pc, #364]	; (1f898 <xQueueSemaphoreTake+0x1b8>)
   1f72a:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   1f72c:	69fb      	ldr	r3, [r7, #28]
   1f72e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1f730:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1f732:	69bb      	ldr	r3, [r7, #24]
   1f734:	2b00      	cmp	r3, #0
   1f736:	d01d      	beq.n	1f774 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   1f738:	69bb      	ldr	r3, [r7, #24]
   1f73a:	1e5a      	subs	r2, r3, #1
   1f73c:	69fb      	ldr	r3, [r7, #28]
   1f73e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1f740:	69fb      	ldr	r3, [r7, #28]
   1f742:	681b      	ldr	r3, [r3, #0]
   1f744:	2b00      	cmp	r3, #0
   1f746:	d104      	bne.n	1f752 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   1f748:	4b54      	ldr	r3, [pc, #336]	; (1f89c <xQueueSemaphoreTake+0x1bc>)
   1f74a:	4798      	blx	r3
   1f74c:	0002      	movs	r2, r0
   1f74e:	69fb      	ldr	r3, [r7, #28]
   1f750:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1f752:	69fb      	ldr	r3, [r7, #28]
   1f754:	691b      	ldr	r3, [r3, #16]
   1f756:	2b00      	cmp	r3, #0
   1f758:	d008      	beq.n	1f76c <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1f75a:	69fb      	ldr	r3, [r7, #28]
   1f75c:	3310      	adds	r3, #16
   1f75e:	0018      	movs	r0, r3
   1f760:	4b4f      	ldr	r3, [pc, #316]	; (1f8a0 <xQueueSemaphoreTake+0x1c0>)
   1f762:	4798      	blx	r3
   1f764:	1e03      	subs	r3, r0, #0
   1f766:	d001      	beq.n	1f76c <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1f768:	4b4e      	ldr	r3, [pc, #312]	; (1f8a4 <xQueueSemaphoreTake+0x1c4>)
   1f76a:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1f76c:	4b4e      	ldr	r3, [pc, #312]	; (1f8a8 <xQueueSemaphoreTake+0x1c8>)
   1f76e:	4798      	blx	r3
				return pdPASS;
   1f770:	2301      	movs	r3, #1
   1f772:	e08b      	b.n	1f88c <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1f774:	683b      	ldr	r3, [r7, #0]
   1f776:	2b00      	cmp	r3, #0
   1f778:	d108      	bne.n	1f78c <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   1f77a:	6a3b      	ldr	r3, [r7, #32]
   1f77c:	2b00      	cmp	r3, #0
   1f77e:	d001      	beq.n	1f784 <xQueueSemaphoreTake+0xa4>
   1f780:	b672      	cpsid	i
   1f782:	e7fe      	b.n	1f782 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   1f784:	4b48      	ldr	r3, [pc, #288]	; (1f8a8 <xQueueSemaphoreTake+0x1c8>)
   1f786:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   1f788:	2300      	movs	r3, #0
   1f78a:	e07f      	b.n	1f88c <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
   1f78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f78e:	2b00      	cmp	r3, #0
   1f790:	d106      	bne.n	1f7a0 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1f792:	230c      	movs	r3, #12
   1f794:	18fb      	adds	r3, r7, r3
   1f796:	0018      	movs	r0, r3
   1f798:	4b44      	ldr	r3, [pc, #272]	; (1f8ac <xQueueSemaphoreTake+0x1cc>)
   1f79a:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1f79c:	2301      	movs	r3, #1
   1f79e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1f7a0:	4b41      	ldr	r3, [pc, #260]	; (1f8a8 <xQueueSemaphoreTake+0x1c8>)
   1f7a2:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   1f7a4:	4b42      	ldr	r3, [pc, #264]	; (1f8b0 <xQueueSemaphoreTake+0x1d0>)
   1f7a6:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1f7a8:	4b3b      	ldr	r3, [pc, #236]	; (1f898 <xQueueSemaphoreTake+0x1b8>)
   1f7aa:	4798      	blx	r3
   1f7ac:	69fb      	ldr	r3, [r7, #28]
   1f7ae:	2244      	movs	r2, #68	; 0x44
   1f7b0:	5c9b      	ldrb	r3, [r3, r2]
   1f7b2:	b25b      	sxtb	r3, r3
   1f7b4:	3301      	adds	r3, #1
   1f7b6:	d103      	bne.n	1f7c0 <xQueueSemaphoreTake+0xe0>
   1f7b8:	69fb      	ldr	r3, [r7, #28]
   1f7ba:	2244      	movs	r2, #68	; 0x44
   1f7bc:	2100      	movs	r1, #0
   1f7be:	5499      	strb	r1, [r3, r2]
   1f7c0:	69fb      	ldr	r3, [r7, #28]
   1f7c2:	2245      	movs	r2, #69	; 0x45
   1f7c4:	5c9b      	ldrb	r3, [r3, r2]
   1f7c6:	b25b      	sxtb	r3, r3
   1f7c8:	3301      	adds	r3, #1
   1f7ca:	d103      	bne.n	1f7d4 <xQueueSemaphoreTake+0xf4>
   1f7cc:	69fb      	ldr	r3, [r7, #28]
   1f7ce:	2245      	movs	r2, #69	; 0x45
   1f7d0:	2100      	movs	r1, #0
   1f7d2:	5499      	strb	r1, [r3, r2]
   1f7d4:	4b34      	ldr	r3, [pc, #208]	; (1f8a8 <xQueueSemaphoreTake+0x1c8>)
   1f7d6:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1f7d8:	003a      	movs	r2, r7
   1f7da:	230c      	movs	r3, #12
   1f7dc:	18fb      	adds	r3, r7, r3
   1f7de:	0011      	movs	r1, r2
   1f7e0:	0018      	movs	r0, r3
   1f7e2:	4b34      	ldr	r3, [pc, #208]	; (1f8b4 <xQueueSemaphoreTake+0x1d4>)
   1f7e4:	4798      	blx	r3
   1f7e6:	1e03      	subs	r3, r0, #0
   1f7e8:	d12e      	bne.n	1f848 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1f7ea:	69fb      	ldr	r3, [r7, #28]
   1f7ec:	0018      	movs	r0, r3
   1f7ee:	4b32      	ldr	r3, [pc, #200]	; (1f8b8 <xQueueSemaphoreTake+0x1d8>)
   1f7f0:	4798      	blx	r3
   1f7f2:	1e03      	subs	r3, r0, #0
   1f7f4:	d021      	beq.n	1f83a <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1f7f6:	69fb      	ldr	r3, [r7, #28]
   1f7f8:	681b      	ldr	r3, [r3, #0]
   1f7fa:	2b00      	cmp	r3, #0
   1f7fc:	d10a      	bne.n	1f814 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
   1f7fe:	4b26      	ldr	r3, [pc, #152]	; (1f898 <xQueueSemaphoreTake+0x1b8>)
   1f800:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1f802:	69fb      	ldr	r3, [r7, #28]
   1f804:	685b      	ldr	r3, [r3, #4]
   1f806:	0018      	movs	r0, r3
   1f808:	4b2c      	ldr	r3, [pc, #176]	; (1f8bc <xQueueSemaphoreTake+0x1dc>)
   1f80a:	4798      	blx	r3
   1f80c:	0003      	movs	r3, r0
   1f80e:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1f810:	4b25      	ldr	r3, [pc, #148]	; (1f8a8 <xQueueSemaphoreTake+0x1c8>)
   1f812:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1f814:	69fb      	ldr	r3, [r7, #28]
   1f816:	3324      	adds	r3, #36	; 0x24
   1f818:	683a      	ldr	r2, [r7, #0]
   1f81a:	0011      	movs	r1, r2
   1f81c:	0018      	movs	r0, r3
   1f81e:	4b28      	ldr	r3, [pc, #160]	; (1f8c0 <xQueueSemaphoreTake+0x1e0>)
   1f820:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1f822:	69fb      	ldr	r3, [r7, #28]
   1f824:	0018      	movs	r0, r3
   1f826:	4b27      	ldr	r3, [pc, #156]	; (1f8c4 <xQueueSemaphoreTake+0x1e4>)
   1f828:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1f82a:	4b27      	ldr	r3, [pc, #156]	; (1f8c8 <xQueueSemaphoreTake+0x1e8>)
   1f82c:	4798      	blx	r3
   1f82e:	1e03      	subs	r3, r0, #0
   1f830:	d000      	beq.n	1f834 <xQueueSemaphoreTake+0x154>
   1f832:	e779      	b.n	1f728 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   1f834:	4b1b      	ldr	r3, [pc, #108]	; (1f8a4 <xQueueSemaphoreTake+0x1c4>)
   1f836:	4798      	blx	r3
   1f838:	e776      	b.n	1f728 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   1f83a:	69fb      	ldr	r3, [r7, #28]
   1f83c:	0018      	movs	r0, r3
   1f83e:	4b21      	ldr	r3, [pc, #132]	; (1f8c4 <xQueueSemaphoreTake+0x1e4>)
   1f840:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1f842:	4b21      	ldr	r3, [pc, #132]	; (1f8c8 <xQueueSemaphoreTake+0x1e8>)
   1f844:	4798      	blx	r3
   1f846:	e76f      	b.n	1f728 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1f848:	69fb      	ldr	r3, [r7, #28]
   1f84a:	0018      	movs	r0, r3
   1f84c:	4b1d      	ldr	r3, [pc, #116]	; (1f8c4 <xQueueSemaphoreTake+0x1e4>)
   1f84e:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1f850:	4b1d      	ldr	r3, [pc, #116]	; (1f8c8 <xQueueSemaphoreTake+0x1e8>)
   1f852:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1f854:	69fb      	ldr	r3, [r7, #28]
   1f856:	0018      	movs	r0, r3
   1f858:	4b17      	ldr	r3, [pc, #92]	; (1f8b8 <xQueueSemaphoreTake+0x1d8>)
   1f85a:	4798      	blx	r3
   1f85c:	1e03      	subs	r3, r0, #0
   1f85e:	d100      	bne.n	1f862 <xQueueSemaphoreTake+0x182>
   1f860:	e762      	b.n	1f728 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1f862:	6a3b      	ldr	r3, [r7, #32]
   1f864:	2b00      	cmp	r3, #0
   1f866:	d010      	beq.n	1f88a <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
   1f868:	4b0b      	ldr	r3, [pc, #44]	; (1f898 <xQueueSemaphoreTake+0x1b8>)
   1f86a:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   1f86c:	69fb      	ldr	r3, [r7, #28]
   1f86e:	0018      	movs	r0, r3
   1f870:	4b16      	ldr	r3, [pc, #88]	; (1f8cc <xQueueSemaphoreTake+0x1ec>)
   1f872:	4798      	blx	r3
   1f874:	0003      	movs	r3, r0
   1f876:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1f878:	69fb      	ldr	r3, [r7, #28]
   1f87a:	685b      	ldr	r3, [r3, #4]
   1f87c:	697a      	ldr	r2, [r7, #20]
   1f87e:	0011      	movs	r1, r2
   1f880:	0018      	movs	r0, r3
   1f882:	4b13      	ldr	r3, [pc, #76]	; (1f8d0 <xQueueSemaphoreTake+0x1f0>)
   1f884:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1f886:	4b08      	ldr	r3, [pc, #32]	; (1f8a8 <xQueueSemaphoreTake+0x1c8>)
   1f888:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
   1f88a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1f88c:	0018      	movs	r0, r3
   1f88e:	46bd      	mov	sp, r7
   1f890:	b00a      	add	sp, #40	; 0x28
   1f892:	bd80      	pop	{r7, pc}
   1f894:	00020971 	.word	0x00020971
   1f898:	0001edd1 	.word	0x0001edd1
   1f89c:	00020c3d 	.word	0x00020c3d
   1f8a0:	00020639 	.word	0x00020639
   1f8a4:	0001edb1 	.word	0x0001edb1
   1f8a8:	0001edf5 	.word	0x0001edf5
   1f8ac:	000206f9 	.word	0x000206f9
   1f8b0:	00020201 	.word	0x00020201
   1f8b4:	00020721 	.word	0x00020721
   1f8b8:	0001fb21 	.word	0x0001fb21
   1f8bc:	000209a9 	.word	0x000209a9
   1f8c0:	000205a1 	.word	0x000205a1
   1f8c4:	0001fa31 	.word	0x0001fa31
   1f8c8:	00020219 	.word	0x00020219
   1f8cc:	0001f8d5 	.word	0x0001f8d5
   1f8d0:	00020b4d 	.word	0x00020b4d

0001f8d4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1f8d4:	b580      	push	{r7, lr}
   1f8d6:	b084      	sub	sp, #16
   1f8d8:	af00      	add	r7, sp, #0
   1f8da:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1f8dc:	687b      	ldr	r3, [r7, #4]
   1f8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f8e0:	2b00      	cmp	r3, #0
   1f8e2:	d006      	beq.n	1f8f2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1f8e4:	687b      	ldr	r3, [r7, #4]
   1f8e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1f8e8:	681b      	ldr	r3, [r3, #0]
   1f8ea:	2205      	movs	r2, #5
   1f8ec:	1ad3      	subs	r3, r2, r3
   1f8ee:	60fb      	str	r3, [r7, #12]
   1f8f0:	e001      	b.n	1f8f6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1f8f2:	2300      	movs	r3, #0
   1f8f4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1f8f6:	68fb      	ldr	r3, [r7, #12]
	}
   1f8f8:	0018      	movs	r0, r3
   1f8fa:	46bd      	mov	sp, r7
   1f8fc:	b004      	add	sp, #16
   1f8fe:	bd80      	pop	{r7, pc}

0001f900 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1f900:	b580      	push	{r7, lr}
   1f902:	b086      	sub	sp, #24
   1f904:	af00      	add	r7, sp, #0
   1f906:	60f8      	str	r0, [r7, #12]
   1f908:	60b9      	str	r1, [r7, #8]
   1f90a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1f90c:	2300      	movs	r3, #0
   1f90e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1f910:	68fb      	ldr	r3, [r7, #12]
   1f912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1f914:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1f916:	68fb      	ldr	r3, [r7, #12]
   1f918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f91a:	2b00      	cmp	r3, #0
   1f91c:	d10e      	bne.n	1f93c <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1f91e:	68fb      	ldr	r3, [r7, #12]
   1f920:	681b      	ldr	r3, [r3, #0]
   1f922:	2b00      	cmp	r3, #0
   1f924:	d14e      	bne.n	1f9c4 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1f926:	68fb      	ldr	r3, [r7, #12]
   1f928:	685b      	ldr	r3, [r3, #4]
   1f92a:	0018      	movs	r0, r3
   1f92c:	4b2a      	ldr	r3, [pc, #168]	; (1f9d8 <prvCopyDataToQueue+0xd8>)
   1f92e:	4798      	blx	r3
   1f930:	0003      	movs	r3, r0
   1f932:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1f934:	68fb      	ldr	r3, [r7, #12]
   1f936:	2200      	movs	r2, #0
   1f938:	605a      	str	r2, [r3, #4]
   1f93a:	e043      	b.n	1f9c4 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1f93c:	687b      	ldr	r3, [r7, #4]
   1f93e:	2b00      	cmp	r3, #0
   1f940:	d119      	bne.n	1f976 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1f942:	68fb      	ldr	r3, [r7, #12]
   1f944:	6898      	ldr	r0, [r3, #8]
   1f946:	68fb      	ldr	r3, [r7, #12]
   1f948:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1f94a:	68bb      	ldr	r3, [r7, #8]
   1f94c:	0019      	movs	r1, r3
   1f94e:	4b23      	ldr	r3, [pc, #140]	; (1f9dc <prvCopyDataToQueue+0xdc>)
   1f950:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1f952:	68fb      	ldr	r3, [r7, #12]
   1f954:	689a      	ldr	r2, [r3, #8]
   1f956:	68fb      	ldr	r3, [r7, #12]
   1f958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f95a:	18d2      	adds	r2, r2, r3
   1f95c:	68fb      	ldr	r3, [r7, #12]
   1f95e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1f960:	68fb      	ldr	r3, [r7, #12]
   1f962:	689a      	ldr	r2, [r3, #8]
   1f964:	68fb      	ldr	r3, [r7, #12]
   1f966:	685b      	ldr	r3, [r3, #4]
   1f968:	429a      	cmp	r2, r3
   1f96a:	d32b      	bcc.n	1f9c4 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1f96c:	68fb      	ldr	r3, [r7, #12]
   1f96e:	681a      	ldr	r2, [r3, #0]
   1f970:	68fb      	ldr	r3, [r7, #12]
   1f972:	609a      	str	r2, [r3, #8]
   1f974:	e026      	b.n	1f9c4 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1f976:	68fb      	ldr	r3, [r7, #12]
   1f978:	68d8      	ldr	r0, [r3, #12]
   1f97a:	68fb      	ldr	r3, [r7, #12]
   1f97c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1f97e:	68bb      	ldr	r3, [r7, #8]
   1f980:	0019      	movs	r1, r3
   1f982:	4b16      	ldr	r3, [pc, #88]	; (1f9dc <prvCopyDataToQueue+0xdc>)
   1f984:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1f986:	68fb      	ldr	r3, [r7, #12]
   1f988:	68da      	ldr	r2, [r3, #12]
   1f98a:	68fb      	ldr	r3, [r7, #12]
   1f98c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f98e:	425b      	negs	r3, r3
   1f990:	18d2      	adds	r2, r2, r3
   1f992:	68fb      	ldr	r3, [r7, #12]
   1f994:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1f996:	68fb      	ldr	r3, [r7, #12]
   1f998:	68da      	ldr	r2, [r3, #12]
   1f99a:	68fb      	ldr	r3, [r7, #12]
   1f99c:	681b      	ldr	r3, [r3, #0]
   1f99e:	429a      	cmp	r2, r3
   1f9a0:	d207      	bcs.n	1f9b2 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1f9a2:	68fb      	ldr	r3, [r7, #12]
   1f9a4:	685a      	ldr	r2, [r3, #4]
   1f9a6:	68fb      	ldr	r3, [r7, #12]
   1f9a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f9aa:	425b      	negs	r3, r3
   1f9ac:	18d2      	adds	r2, r2, r3
   1f9ae:	68fb      	ldr	r3, [r7, #12]
   1f9b0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1f9b2:	687b      	ldr	r3, [r7, #4]
   1f9b4:	2b02      	cmp	r3, #2
   1f9b6:	d105      	bne.n	1f9c4 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1f9b8:	693b      	ldr	r3, [r7, #16]
   1f9ba:	2b00      	cmp	r3, #0
   1f9bc:	d002      	beq.n	1f9c4 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1f9be:	693b      	ldr	r3, [r7, #16]
   1f9c0:	3b01      	subs	r3, #1
   1f9c2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1f9c4:	693b      	ldr	r3, [r7, #16]
   1f9c6:	1c5a      	adds	r2, r3, #1
   1f9c8:	68fb      	ldr	r3, [r7, #12]
   1f9ca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1f9cc:	697b      	ldr	r3, [r7, #20]
}
   1f9ce:	0018      	movs	r0, r3
   1f9d0:	46bd      	mov	sp, r7
   1f9d2:	b006      	add	sp, #24
   1f9d4:	bd80      	pop	{r7, pc}
   1f9d6:	46c0      	nop			; (mov r8, r8)
   1f9d8:	00020a8d 	.word	0x00020a8d
   1f9dc:	00028edd 	.word	0x00028edd

0001f9e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1f9e0:	b580      	push	{r7, lr}
   1f9e2:	b082      	sub	sp, #8
   1f9e4:	af00      	add	r7, sp, #0
   1f9e6:	6078      	str	r0, [r7, #4]
   1f9e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1f9ea:	687b      	ldr	r3, [r7, #4]
   1f9ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f9ee:	2b00      	cmp	r3, #0
   1f9f0:	d018      	beq.n	1fa24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1f9f2:	687b      	ldr	r3, [r7, #4]
   1f9f4:	68da      	ldr	r2, [r3, #12]
   1f9f6:	687b      	ldr	r3, [r7, #4]
   1f9f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f9fa:	18d2      	adds	r2, r2, r3
   1f9fc:	687b      	ldr	r3, [r7, #4]
   1f9fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1fa00:	687b      	ldr	r3, [r7, #4]
   1fa02:	68da      	ldr	r2, [r3, #12]
   1fa04:	687b      	ldr	r3, [r7, #4]
   1fa06:	685b      	ldr	r3, [r3, #4]
   1fa08:	429a      	cmp	r2, r3
   1fa0a:	d303      	bcc.n	1fa14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1fa0c:	687b      	ldr	r3, [r7, #4]
   1fa0e:	681a      	ldr	r2, [r3, #0]
   1fa10:	687b      	ldr	r3, [r7, #4]
   1fa12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1fa14:	687b      	ldr	r3, [r7, #4]
   1fa16:	68d9      	ldr	r1, [r3, #12]
   1fa18:	687b      	ldr	r3, [r7, #4]
   1fa1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1fa1c:	683b      	ldr	r3, [r7, #0]
   1fa1e:	0018      	movs	r0, r3
   1fa20:	4b02      	ldr	r3, [pc, #8]	; (1fa2c <prvCopyDataFromQueue+0x4c>)
   1fa22:	4798      	blx	r3
	}
}
   1fa24:	46c0      	nop			; (mov r8, r8)
   1fa26:	46bd      	mov	sp, r7
   1fa28:	b002      	add	sp, #8
   1fa2a:	bd80      	pop	{r7, pc}
   1fa2c:	00028edd 	.word	0x00028edd

0001fa30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1fa30:	b580      	push	{r7, lr}
   1fa32:	b084      	sub	sp, #16
   1fa34:	af00      	add	r7, sp, #0
   1fa36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1fa38:	4b34      	ldr	r3, [pc, #208]	; (1fb0c <prvUnlockQueue+0xdc>)
   1fa3a:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1fa3c:	230f      	movs	r3, #15
   1fa3e:	18fb      	adds	r3, r7, r3
   1fa40:	687a      	ldr	r2, [r7, #4]
   1fa42:	2145      	movs	r1, #69	; 0x45
   1fa44:	5c52      	ldrb	r2, [r2, r1]
   1fa46:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1fa48:	e022      	b.n	1fa90 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   1fa4a:	687b      	ldr	r3, [r7, #4]
   1fa4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1fa4e:	2b00      	cmp	r3, #0
   1fa50:	d009      	beq.n	1fa66 <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1fa52:	687b      	ldr	r3, [r7, #4]
   1fa54:	2100      	movs	r1, #0
   1fa56:	0018      	movs	r0, r3
   1fa58:	4b2d      	ldr	r3, [pc, #180]	; (1fb10 <prvUnlockQueue+0xe0>)
   1fa5a:	4798      	blx	r3
   1fa5c:	1e03      	subs	r3, r0, #0
   1fa5e:	d00f      	beq.n	1fa80 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   1fa60:	4b2c      	ldr	r3, [pc, #176]	; (1fb14 <prvUnlockQueue+0xe4>)
   1fa62:	4798      	blx	r3
   1fa64:	e00c      	b.n	1fa80 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1fa66:	687b      	ldr	r3, [r7, #4]
   1fa68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1fa6a:	2b00      	cmp	r3, #0
   1fa6c:	d017      	beq.n	1fa9e <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1fa6e:	687b      	ldr	r3, [r7, #4]
   1fa70:	3324      	adds	r3, #36	; 0x24
   1fa72:	0018      	movs	r0, r3
   1fa74:	4b28      	ldr	r3, [pc, #160]	; (1fb18 <prvUnlockQueue+0xe8>)
   1fa76:	4798      	blx	r3
   1fa78:	1e03      	subs	r3, r0, #0
   1fa7a:	d001      	beq.n	1fa80 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   1fa7c:	4b25      	ldr	r3, [pc, #148]	; (1fb14 <prvUnlockQueue+0xe4>)
   1fa7e:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1fa80:	230f      	movs	r3, #15
   1fa82:	18fb      	adds	r3, r7, r3
   1fa84:	781b      	ldrb	r3, [r3, #0]
   1fa86:	3b01      	subs	r3, #1
   1fa88:	b2da      	uxtb	r2, r3
   1fa8a:	230f      	movs	r3, #15
   1fa8c:	18fb      	adds	r3, r7, r3
   1fa8e:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1fa90:	230f      	movs	r3, #15
   1fa92:	18fb      	adds	r3, r7, r3
   1fa94:	781b      	ldrb	r3, [r3, #0]
   1fa96:	b25b      	sxtb	r3, r3
   1fa98:	2b00      	cmp	r3, #0
   1fa9a:	dcd6      	bgt.n	1fa4a <prvUnlockQueue+0x1a>
   1fa9c:	e000      	b.n	1faa0 <prvUnlockQueue+0x70>
						break;
   1fa9e:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1faa0:	687b      	ldr	r3, [r7, #4]
   1faa2:	2245      	movs	r2, #69	; 0x45
   1faa4:	21ff      	movs	r1, #255	; 0xff
   1faa6:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1faa8:	4b1c      	ldr	r3, [pc, #112]	; (1fb1c <prvUnlockQueue+0xec>)
   1faaa:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1faac:	4b17      	ldr	r3, [pc, #92]	; (1fb0c <prvUnlockQueue+0xdc>)
   1faae:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1fab0:	230e      	movs	r3, #14
   1fab2:	18fb      	adds	r3, r7, r3
   1fab4:	687a      	ldr	r2, [r7, #4]
   1fab6:	2144      	movs	r1, #68	; 0x44
   1fab8:	5c52      	ldrb	r2, [r2, r1]
   1faba:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1fabc:	e014      	b.n	1fae8 <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1fabe:	687b      	ldr	r3, [r7, #4]
   1fac0:	691b      	ldr	r3, [r3, #16]
   1fac2:	2b00      	cmp	r3, #0
   1fac4:	d017      	beq.n	1faf6 <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1fac6:	687b      	ldr	r3, [r7, #4]
   1fac8:	3310      	adds	r3, #16
   1faca:	0018      	movs	r0, r3
   1facc:	4b12      	ldr	r3, [pc, #72]	; (1fb18 <prvUnlockQueue+0xe8>)
   1face:	4798      	blx	r3
   1fad0:	1e03      	subs	r3, r0, #0
   1fad2:	d001      	beq.n	1fad8 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1fad4:	4b0f      	ldr	r3, [pc, #60]	; (1fb14 <prvUnlockQueue+0xe4>)
   1fad6:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1fad8:	230e      	movs	r3, #14
   1fada:	18fb      	adds	r3, r7, r3
   1fadc:	781b      	ldrb	r3, [r3, #0]
   1fade:	3b01      	subs	r3, #1
   1fae0:	b2da      	uxtb	r2, r3
   1fae2:	230e      	movs	r3, #14
   1fae4:	18fb      	adds	r3, r7, r3
   1fae6:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1fae8:	230e      	movs	r3, #14
   1faea:	18fb      	adds	r3, r7, r3
   1faec:	781b      	ldrb	r3, [r3, #0]
   1faee:	b25b      	sxtb	r3, r3
   1faf0:	2b00      	cmp	r3, #0
   1faf2:	dce4      	bgt.n	1fabe <prvUnlockQueue+0x8e>
   1faf4:	e000      	b.n	1faf8 <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1faf6:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1faf8:	687b      	ldr	r3, [r7, #4]
   1fafa:	2244      	movs	r2, #68	; 0x44
   1fafc:	21ff      	movs	r1, #255	; 0xff
   1fafe:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1fb00:	4b06      	ldr	r3, [pc, #24]	; (1fb1c <prvUnlockQueue+0xec>)
   1fb02:	4798      	blx	r3
}
   1fb04:	46c0      	nop			; (mov r8, r8)
   1fb06:	46bd      	mov	sp, r7
   1fb08:	b004      	add	sp, #16
   1fb0a:	bd80      	pop	{r7, pc}
   1fb0c:	0001edd1 	.word	0x0001edd1
   1fb10:	0001fc05 	.word	0x0001fc05
   1fb14:	000207cd 	.word	0x000207cd
   1fb18:	00020639 	.word	0x00020639
   1fb1c:	0001edf5 	.word	0x0001edf5

0001fb20 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1fb20:	b580      	push	{r7, lr}
   1fb22:	b084      	sub	sp, #16
   1fb24:	af00      	add	r7, sp, #0
   1fb26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1fb28:	4b08      	ldr	r3, [pc, #32]	; (1fb4c <prvIsQueueEmpty+0x2c>)
   1fb2a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1fb2c:	687b      	ldr	r3, [r7, #4]
   1fb2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1fb30:	2b00      	cmp	r3, #0
   1fb32:	d102      	bne.n	1fb3a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1fb34:	2301      	movs	r3, #1
   1fb36:	60fb      	str	r3, [r7, #12]
   1fb38:	e001      	b.n	1fb3e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1fb3a:	2300      	movs	r3, #0
   1fb3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1fb3e:	4b04      	ldr	r3, [pc, #16]	; (1fb50 <prvIsQueueEmpty+0x30>)
   1fb40:	4798      	blx	r3

	return xReturn;
   1fb42:	68fb      	ldr	r3, [r7, #12]
}
   1fb44:	0018      	movs	r0, r3
   1fb46:	46bd      	mov	sp, r7
   1fb48:	b004      	add	sp, #16
   1fb4a:	bd80      	pop	{r7, pc}
   1fb4c:	0001edd1 	.word	0x0001edd1
   1fb50:	0001edf5 	.word	0x0001edf5

0001fb54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1fb54:	b580      	push	{r7, lr}
   1fb56:	b084      	sub	sp, #16
   1fb58:	af00      	add	r7, sp, #0
   1fb5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1fb5c:	4b09      	ldr	r3, [pc, #36]	; (1fb84 <prvIsQueueFull+0x30>)
   1fb5e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1fb60:	687b      	ldr	r3, [r7, #4]
   1fb62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1fb64:	687b      	ldr	r3, [r7, #4]
   1fb66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1fb68:	429a      	cmp	r2, r3
   1fb6a:	d102      	bne.n	1fb72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1fb6c:	2301      	movs	r3, #1
   1fb6e:	60fb      	str	r3, [r7, #12]
   1fb70:	e001      	b.n	1fb76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1fb72:	2300      	movs	r3, #0
   1fb74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1fb76:	4b04      	ldr	r3, [pc, #16]	; (1fb88 <prvIsQueueFull+0x34>)
   1fb78:	4798      	blx	r3

	return xReturn;
   1fb7a:	68fb      	ldr	r3, [r7, #12]
}
   1fb7c:	0018      	movs	r0, r3
   1fb7e:	46bd      	mov	sp, r7
   1fb80:	b004      	add	sp, #16
   1fb82:	bd80      	pop	{r7, pc}
   1fb84:	0001edd1 	.word	0x0001edd1
   1fb88:	0001edf5 	.word	0x0001edf5

0001fb8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1fb8c:	b580      	push	{r7, lr}
   1fb8e:	b086      	sub	sp, #24
   1fb90:	af00      	add	r7, sp, #0
   1fb92:	60f8      	str	r0, [r7, #12]
   1fb94:	60b9      	str	r1, [r7, #8]
   1fb96:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1fb98:	68fb      	ldr	r3, [r7, #12]
   1fb9a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1fb9c:	4b15      	ldr	r3, [pc, #84]	; (1fbf4 <vQueueWaitForMessageRestricted+0x68>)
   1fb9e:	4798      	blx	r3
   1fba0:	697b      	ldr	r3, [r7, #20]
   1fba2:	2244      	movs	r2, #68	; 0x44
   1fba4:	5c9b      	ldrb	r3, [r3, r2]
   1fba6:	b25b      	sxtb	r3, r3
   1fba8:	3301      	adds	r3, #1
   1fbaa:	d103      	bne.n	1fbb4 <vQueueWaitForMessageRestricted+0x28>
   1fbac:	697b      	ldr	r3, [r7, #20]
   1fbae:	2244      	movs	r2, #68	; 0x44
   1fbb0:	2100      	movs	r1, #0
   1fbb2:	5499      	strb	r1, [r3, r2]
   1fbb4:	697b      	ldr	r3, [r7, #20]
   1fbb6:	2245      	movs	r2, #69	; 0x45
   1fbb8:	5c9b      	ldrb	r3, [r3, r2]
   1fbba:	b25b      	sxtb	r3, r3
   1fbbc:	3301      	adds	r3, #1
   1fbbe:	d103      	bne.n	1fbc8 <vQueueWaitForMessageRestricted+0x3c>
   1fbc0:	697b      	ldr	r3, [r7, #20]
   1fbc2:	2245      	movs	r2, #69	; 0x45
   1fbc4:	2100      	movs	r1, #0
   1fbc6:	5499      	strb	r1, [r3, r2]
   1fbc8:	4b0b      	ldr	r3, [pc, #44]	; (1fbf8 <vQueueWaitForMessageRestricted+0x6c>)
   1fbca:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1fbcc:	697b      	ldr	r3, [r7, #20]
   1fbce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1fbd0:	2b00      	cmp	r3, #0
   1fbd2:	d106      	bne.n	1fbe2 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1fbd4:	697b      	ldr	r3, [r7, #20]
   1fbd6:	3324      	adds	r3, #36	; 0x24
   1fbd8:	687a      	ldr	r2, [r7, #4]
   1fbda:	68b9      	ldr	r1, [r7, #8]
   1fbdc:	0018      	movs	r0, r3
   1fbde:	4b07      	ldr	r3, [pc, #28]	; (1fbfc <vQueueWaitForMessageRestricted+0x70>)
   1fbe0:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1fbe2:	697b      	ldr	r3, [r7, #20]
   1fbe4:	0018      	movs	r0, r3
   1fbe6:	4b06      	ldr	r3, [pc, #24]	; (1fc00 <vQueueWaitForMessageRestricted+0x74>)
   1fbe8:	4798      	blx	r3
	}
   1fbea:	46c0      	nop			; (mov r8, r8)
   1fbec:	46bd      	mov	sp, r7
   1fbee:	b006      	add	sp, #24
   1fbf0:	bd80      	pop	{r7, pc}
   1fbf2:	46c0      	nop			; (mov r8, r8)
   1fbf4:	0001edd1 	.word	0x0001edd1
   1fbf8:	0001edf5 	.word	0x0001edf5
   1fbfc:	000205e5 	.word	0x000205e5
   1fc00:	0001fa31 	.word	0x0001fa31

0001fc04 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1fc04:	b580      	push	{r7, lr}
   1fc06:	b086      	sub	sp, #24
   1fc08:	af00      	add	r7, sp, #0
   1fc0a:	6078      	str	r0, [r7, #4]
   1fc0c:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1fc0e:	687b      	ldr	r3, [r7, #4]
   1fc10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1fc12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1fc14:	2300      	movs	r3, #0
   1fc16:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1fc18:	693b      	ldr	r3, [r7, #16]
   1fc1a:	2b00      	cmp	r3, #0
   1fc1c:	d101      	bne.n	1fc22 <prvNotifyQueueSetContainer+0x1e>
   1fc1e:	b672      	cpsid	i
   1fc20:	e7fe      	b.n	1fc20 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1fc22:	693b      	ldr	r3, [r7, #16]
   1fc24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1fc26:	693b      	ldr	r3, [r7, #16]
   1fc28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1fc2a:	429a      	cmp	r2, r3
   1fc2c:	d301      	bcc.n	1fc32 <prvNotifyQueueSetContainer+0x2e>
   1fc2e:	b672      	cpsid	i
   1fc30:	e7fe      	b.n	1fc30 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1fc32:	693b      	ldr	r3, [r7, #16]
   1fc34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1fc36:	693b      	ldr	r3, [r7, #16]
   1fc38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1fc3a:	429a      	cmp	r2, r3
   1fc3c:	d22a      	bcs.n	1fc94 <prvNotifyQueueSetContainer+0x90>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   1fc3e:	230f      	movs	r3, #15
   1fc40:	18fb      	adds	r3, r7, r3
   1fc42:	693a      	ldr	r2, [r7, #16]
   1fc44:	2145      	movs	r1, #69	; 0x45
   1fc46:	5c52      	ldrb	r2, [r2, r1]
   1fc48:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   1fc4a:	683a      	ldr	r2, [r7, #0]
   1fc4c:	1d39      	adds	r1, r7, #4
   1fc4e:	693b      	ldr	r3, [r7, #16]
   1fc50:	0018      	movs	r0, r3
   1fc52:	4b13      	ldr	r3, [pc, #76]	; (1fca0 <prvNotifyQueueSetContainer+0x9c>)
   1fc54:	4798      	blx	r3
   1fc56:	0003      	movs	r3, r0
   1fc58:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   1fc5a:	230f      	movs	r3, #15
   1fc5c:	18fb      	adds	r3, r7, r3
   1fc5e:	781b      	ldrb	r3, [r3, #0]
   1fc60:	b25b      	sxtb	r3, r3
   1fc62:	3301      	adds	r3, #1
   1fc64:	d10d      	bne.n	1fc82 <prvNotifyQueueSetContainer+0x7e>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1fc66:	693b      	ldr	r3, [r7, #16]
   1fc68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1fc6a:	2b00      	cmp	r3, #0
   1fc6c:	d012      	beq.n	1fc94 <prvNotifyQueueSetContainer+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1fc6e:	693b      	ldr	r3, [r7, #16]
   1fc70:	3324      	adds	r3, #36	; 0x24
   1fc72:	0018      	movs	r0, r3
   1fc74:	4b0b      	ldr	r3, [pc, #44]	; (1fca4 <prvNotifyQueueSetContainer+0xa0>)
   1fc76:	4798      	blx	r3
   1fc78:	1e03      	subs	r3, r0, #0
   1fc7a:	d00b      	beq.n	1fc94 <prvNotifyQueueSetContainer+0x90>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   1fc7c:	2301      	movs	r3, #1
   1fc7e:	617b      	str	r3, [r7, #20]
   1fc80:	e008      	b.n	1fc94 <prvNotifyQueueSetContainer+0x90>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1fc82:	230f      	movs	r3, #15
   1fc84:	18fb      	adds	r3, r7, r3
   1fc86:	781b      	ldrb	r3, [r3, #0]
   1fc88:	3301      	adds	r3, #1
   1fc8a:	b2db      	uxtb	r3, r3
   1fc8c:	b259      	sxtb	r1, r3
   1fc8e:	693b      	ldr	r3, [r7, #16]
   1fc90:	2245      	movs	r2, #69	; 0x45
   1fc92:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1fc94:	697b      	ldr	r3, [r7, #20]
	}
   1fc96:	0018      	movs	r0, r3
   1fc98:	46bd      	mov	sp, r7
   1fc9a:	b006      	add	sp, #24
   1fc9c:	bd80      	pop	{r7, pc}
   1fc9e:	46c0      	nop			; (mov r8, r8)
   1fca0:	0001f901 	.word	0x0001f901
   1fca4:	00020639 	.word	0x00020639

0001fca8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1fca8:	b590      	push	{r4, r7, lr}
   1fcaa:	b08d      	sub	sp, #52	; 0x34
   1fcac:	af04      	add	r7, sp, #16
   1fcae:	60f8      	str	r0, [r7, #12]
   1fcb0:	60b9      	str	r1, [r7, #8]
   1fcb2:	603b      	str	r3, [r7, #0]
   1fcb4:	1dbb      	adds	r3, r7, #6
   1fcb6:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1fcb8:	1dbb      	adds	r3, r7, #6
   1fcba:	881b      	ldrh	r3, [r3, #0]
   1fcbc:	009b      	lsls	r3, r3, #2
   1fcbe:	0018      	movs	r0, r3
   1fcc0:	4b1d      	ldr	r3, [pc, #116]	; (1fd38 <xTaskCreate+0x90>)
   1fcc2:	4798      	blx	r3
   1fcc4:	0003      	movs	r3, r0
   1fcc6:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   1fcc8:	697b      	ldr	r3, [r7, #20]
   1fcca:	2b00      	cmp	r3, #0
   1fccc:	d010      	beq.n	1fcf0 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1fcce:	2050      	movs	r0, #80	; 0x50
   1fcd0:	4b19      	ldr	r3, [pc, #100]	; (1fd38 <xTaskCreate+0x90>)
   1fcd2:	4798      	blx	r3
   1fcd4:	0003      	movs	r3, r0
   1fcd6:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   1fcd8:	69fb      	ldr	r3, [r7, #28]
   1fcda:	2b00      	cmp	r3, #0
   1fcdc:	d003      	beq.n	1fce6 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1fcde:	69fb      	ldr	r3, [r7, #28]
   1fce0:	697a      	ldr	r2, [r7, #20]
   1fce2:	631a      	str	r2, [r3, #48]	; 0x30
   1fce4:	e006      	b.n	1fcf4 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1fce6:	697b      	ldr	r3, [r7, #20]
   1fce8:	0018      	movs	r0, r3
   1fcea:	4b14      	ldr	r3, [pc, #80]	; (1fd3c <xTaskCreate+0x94>)
   1fcec:	4798      	blx	r3
   1fcee:	e001      	b.n	1fcf4 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1fcf0:	2300      	movs	r3, #0
   1fcf2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1fcf4:	69fb      	ldr	r3, [r7, #28]
   1fcf6:	2b00      	cmp	r3, #0
   1fcf8:	d016      	beq.n	1fd28 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1fcfa:	1dbb      	adds	r3, r7, #6
   1fcfc:	881a      	ldrh	r2, [r3, #0]
   1fcfe:	683c      	ldr	r4, [r7, #0]
   1fd00:	68b9      	ldr	r1, [r7, #8]
   1fd02:	68f8      	ldr	r0, [r7, #12]
   1fd04:	2300      	movs	r3, #0
   1fd06:	9303      	str	r3, [sp, #12]
   1fd08:	69fb      	ldr	r3, [r7, #28]
   1fd0a:	9302      	str	r3, [sp, #8]
   1fd0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1fd0e:	9301      	str	r3, [sp, #4]
   1fd10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1fd12:	9300      	str	r3, [sp, #0]
   1fd14:	0023      	movs	r3, r4
   1fd16:	4c0a      	ldr	r4, [pc, #40]	; (1fd40 <xTaskCreate+0x98>)
   1fd18:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   1fd1a:	69fb      	ldr	r3, [r7, #28]
   1fd1c:	0018      	movs	r0, r3
   1fd1e:	4b09      	ldr	r3, [pc, #36]	; (1fd44 <xTaskCreate+0x9c>)
   1fd20:	4798      	blx	r3
			xReturn = pdPASS;
   1fd22:	2301      	movs	r3, #1
   1fd24:	61bb      	str	r3, [r7, #24]
   1fd26:	e002      	b.n	1fd2e <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1fd28:	2301      	movs	r3, #1
   1fd2a:	425b      	negs	r3, r3
   1fd2c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1fd2e:	69bb      	ldr	r3, [r7, #24]
	}
   1fd30:	0018      	movs	r0, r3
   1fd32:	46bd      	mov	sp, r7
   1fd34:	b009      	add	sp, #36	; 0x24
   1fd36:	bd90      	pop	{r4, r7, pc}
   1fd38:	0001ef0d 	.word	0x0001ef0d
   1fd3c:	0001ef41 	.word	0x0001ef41
   1fd40:	0001fd49 	.word	0x0001fd49
   1fd44:	0001fe45 	.word	0x0001fe45

0001fd48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1fd48:	b580      	push	{r7, lr}
   1fd4a:	b086      	sub	sp, #24
   1fd4c:	af00      	add	r7, sp, #0
   1fd4e:	60f8      	str	r0, [r7, #12]
   1fd50:	60b9      	str	r1, [r7, #8]
   1fd52:	607a      	str	r2, [r7, #4]
   1fd54:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1fd56:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fd58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1fd5a:	687b      	ldr	r3, [r7, #4]
   1fd5c:	4936      	ldr	r1, [pc, #216]	; (1fe38 <prvInitialiseNewTask+0xf0>)
   1fd5e:	468c      	mov	ip, r1
   1fd60:	4463      	add	r3, ip
   1fd62:	009b      	lsls	r3, r3, #2
   1fd64:	18d3      	adds	r3, r2, r3
   1fd66:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1fd68:	693b      	ldr	r3, [r7, #16]
   1fd6a:	2207      	movs	r2, #7
   1fd6c:	4393      	bics	r3, r2
   1fd6e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1fd70:	693b      	ldr	r3, [r7, #16]
   1fd72:	2207      	movs	r2, #7
   1fd74:	4013      	ands	r3, r2
   1fd76:	d001      	beq.n	1fd7c <prvInitialiseNewTask+0x34>
   1fd78:	b672      	cpsid	i
   1fd7a:	e7fe      	b.n	1fd7a <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1fd7c:	2300      	movs	r3, #0
   1fd7e:	617b      	str	r3, [r7, #20]
   1fd80:	e013      	b.n	1fdaa <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1fd82:	68ba      	ldr	r2, [r7, #8]
   1fd84:	697b      	ldr	r3, [r7, #20]
   1fd86:	18d3      	adds	r3, r2, r3
   1fd88:	7818      	ldrb	r0, [r3, #0]
   1fd8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1fd8c:	2134      	movs	r1, #52	; 0x34
   1fd8e:	697b      	ldr	r3, [r7, #20]
   1fd90:	18d3      	adds	r3, r2, r3
   1fd92:	185b      	adds	r3, r3, r1
   1fd94:	1c02      	adds	r2, r0, #0
   1fd96:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1fd98:	68ba      	ldr	r2, [r7, #8]
   1fd9a:	697b      	ldr	r3, [r7, #20]
   1fd9c:	18d3      	adds	r3, r2, r3
   1fd9e:	781b      	ldrb	r3, [r3, #0]
   1fda0:	2b00      	cmp	r3, #0
   1fda2:	d006      	beq.n	1fdb2 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1fda4:	697b      	ldr	r3, [r7, #20]
   1fda6:	3301      	adds	r3, #1
   1fda8:	617b      	str	r3, [r7, #20]
   1fdaa:	697b      	ldr	r3, [r7, #20]
   1fdac:	2b09      	cmp	r3, #9
   1fdae:	d9e8      	bls.n	1fd82 <prvInitialiseNewTask+0x3a>
   1fdb0:	e000      	b.n	1fdb4 <prvInitialiseNewTask+0x6c>
		{
			break;
   1fdb2:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1fdb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fdb6:	223d      	movs	r2, #61	; 0x3d
   1fdb8:	2100      	movs	r1, #0
   1fdba:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1fdbc:	6a3b      	ldr	r3, [r7, #32]
   1fdbe:	2b04      	cmp	r3, #4
   1fdc0:	d901      	bls.n	1fdc6 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1fdc2:	2304      	movs	r3, #4
   1fdc4:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1fdc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fdc8:	6a3a      	ldr	r2, [r7, #32]
   1fdca:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1fdcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fdce:	6a3a      	ldr	r2, [r7, #32]
   1fdd0:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
   1fdd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fdd4:	2200      	movs	r2, #0
   1fdd6:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1fdd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fdda:	3304      	adds	r3, #4
   1fddc:	0018      	movs	r0, r3
   1fdde:	4b17      	ldr	r3, [pc, #92]	; (1fe3c <prvInitialiseNewTask+0xf4>)
   1fde0:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1fde2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fde4:	3318      	adds	r3, #24
   1fde6:	0018      	movs	r0, r3
   1fde8:	4b14      	ldr	r3, [pc, #80]	; (1fe3c <prvInitialiseNewTask+0xf4>)
   1fdea:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1fdec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fdee:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1fdf0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1fdf2:	6a3b      	ldr	r3, [r7, #32]
   1fdf4:	2205      	movs	r2, #5
   1fdf6:	1ad2      	subs	r2, r2, r3
   1fdf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fdfa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1fdfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fdfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1fe00:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1fe02:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fe04:	2200      	movs	r2, #0
   1fe06:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1fe08:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fe0a:	224c      	movs	r2, #76	; 0x4c
   1fe0c:	2100      	movs	r1, #0
   1fe0e:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1fe10:	683a      	ldr	r2, [r7, #0]
   1fe12:	68f9      	ldr	r1, [r7, #12]
   1fe14:	693b      	ldr	r3, [r7, #16]
   1fe16:	0018      	movs	r0, r3
   1fe18:	4b09      	ldr	r3, [pc, #36]	; (1fe40 <prvInitialiseNewTask+0xf8>)
   1fe1a:	4798      	blx	r3
   1fe1c:	0002      	movs	r2, r0
   1fe1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fe20:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1fe22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fe24:	2b00      	cmp	r3, #0
   1fe26:	d002      	beq.n	1fe2e <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1fe28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fe2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1fe2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1fe2e:	46c0      	nop			; (mov r8, r8)
   1fe30:	46bd      	mov	sp, r7
   1fe32:	b006      	add	sp, #24
   1fe34:	bd80      	pop	{r7, pc}
   1fe36:	46c0      	nop			; (mov r8, r8)
   1fe38:	3fffffff 	.word	0x3fffffff
   1fe3c:	0001efb1 	.word	0x0001efb1
   1fe40:	0001ec8d 	.word	0x0001ec8d

0001fe44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1fe44:	b580      	push	{r7, lr}
   1fe46:	b082      	sub	sp, #8
   1fe48:	af00      	add	r7, sp, #0
   1fe4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1fe4c:	4b29      	ldr	r3, [pc, #164]	; (1fef4 <prvAddNewTaskToReadyList+0xb0>)
   1fe4e:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   1fe50:	4b29      	ldr	r3, [pc, #164]	; (1fef8 <prvAddNewTaskToReadyList+0xb4>)
   1fe52:	681b      	ldr	r3, [r3, #0]
   1fe54:	1c5a      	adds	r2, r3, #1
   1fe56:	4b28      	ldr	r3, [pc, #160]	; (1fef8 <prvAddNewTaskToReadyList+0xb4>)
   1fe58:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1fe5a:	4b28      	ldr	r3, [pc, #160]	; (1fefc <prvAddNewTaskToReadyList+0xb8>)
   1fe5c:	681b      	ldr	r3, [r3, #0]
   1fe5e:	2b00      	cmp	r3, #0
   1fe60:	d109      	bne.n	1fe76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1fe62:	4b26      	ldr	r3, [pc, #152]	; (1fefc <prvAddNewTaskToReadyList+0xb8>)
   1fe64:	687a      	ldr	r2, [r7, #4]
   1fe66:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1fe68:	4b23      	ldr	r3, [pc, #140]	; (1fef8 <prvAddNewTaskToReadyList+0xb4>)
   1fe6a:	681b      	ldr	r3, [r3, #0]
   1fe6c:	2b01      	cmp	r3, #1
   1fe6e:	d110      	bne.n	1fe92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1fe70:	4b23      	ldr	r3, [pc, #140]	; (1ff00 <prvAddNewTaskToReadyList+0xbc>)
   1fe72:	4798      	blx	r3
   1fe74:	e00d      	b.n	1fe92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1fe76:	4b23      	ldr	r3, [pc, #140]	; (1ff04 <prvAddNewTaskToReadyList+0xc0>)
   1fe78:	681b      	ldr	r3, [r3, #0]
   1fe7a:	2b00      	cmp	r3, #0
   1fe7c:	d109      	bne.n	1fe92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1fe7e:	4b1f      	ldr	r3, [pc, #124]	; (1fefc <prvAddNewTaskToReadyList+0xb8>)
   1fe80:	681b      	ldr	r3, [r3, #0]
   1fe82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fe84:	687b      	ldr	r3, [r7, #4]
   1fe86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1fe88:	429a      	cmp	r2, r3
   1fe8a:	d802      	bhi.n	1fe92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1fe8c:	4b1b      	ldr	r3, [pc, #108]	; (1fefc <prvAddNewTaskToReadyList+0xb8>)
   1fe8e:	687a      	ldr	r2, [r7, #4]
   1fe90:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1fe92:	4b1d      	ldr	r3, [pc, #116]	; (1ff08 <prvAddNewTaskToReadyList+0xc4>)
   1fe94:	681b      	ldr	r3, [r3, #0]
   1fe96:	1c5a      	adds	r2, r3, #1
   1fe98:	4b1b      	ldr	r3, [pc, #108]	; (1ff08 <prvAddNewTaskToReadyList+0xc4>)
   1fe9a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
   1fe9c:	687b      	ldr	r3, [r7, #4]
   1fe9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fea0:	4b1a      	ldr	r3, [pc, #104]	; (1ff0c <prvAddNewTaskToReadyList+0xc8>)
   1fea2:	681b      	ldr	r3, [r3, #0]
   1fea4:	429a      	cmp	r2, r3
   1fea6:	d903      	bls.n	1feb0 <prvAddNewTaskToReadyList+0x6c>
   1fea8:	687b      	ldr	r3, [r7, #4]
   1feaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1feac:	4b17      	ldr	r3, [pc, #92]	; (1ff0c <prvAddNewTaskToReadyList+0xc8>)
   1feae:	601a      	str	r2, [r3, #0]
   1feb0:	687b      	ldr	r3, [r7, #4]
   1feb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1feb4:	0013      	movs	r3, r2
   1feb6:	009b      	lsls	r3, r3, #2
   1feb8:	189b      	adds	r3, r3, r2
   1feba:	009b      	lsls	r3, r3, #2
   1febc:	4a14      	ldr	r2, [pc, #80]	; (1ff10 <prvAddNewTaskToReadyList+0xcc>)
   1febe:	189a      	adds	r2, r3, r2
   1fec0:	687b      	ldr	r3, [r7, #4]
   1fec2:	3304      	adds	r3, #4
   1fec4:	0019      	movs	r1, r3
   1fec6:	0010      	movs	r0, r2
   1fec8:	4b12      	ldr	r3, [pc, #72]	; (1ff14 <prvAddNewTaskToReadyList+0xd0>)
   1feca:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1fecc:	4b12      	ldr	r3, [pc, #72]	; (1ff18 <prvAddNewTaskToReadyList+0xd4>)
   1fece:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   1fed0:	4b0c      	ldr	r3, [pc, #48]	; (1ff04 <prvAddNewTaskToReadyList+0xc0>)
   1fed2:	681b      	ldr	r3, [r3, #0]
   1fed4:	2b00      	cmp	r3, #0
   1fed6:	d008      	beq.n	1feea <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1fed8:	4b08      	ldr	r3, [pc, #32]	; (1fefc <prvAddNewTaskToReadyList+0xb8>)
   1feda:	681b      	ldr	r3, [r3, #0]
   1fedc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fede:	687b      	ldr	r3, [r7, #4]
   1fee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1fee2:	429a      	cmp	r2, r3
   1fee4:	d201      	bcs.n	1feea <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1fee6:	4b0d      	ldr	r3, [pc, #52]	; (1ff1c <prvAddNewTaskToReadyList+0xd8>)
   1fee8:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1feea:	46c0      	nop			; (mov r8, r8)
   1feec:	46bd      	mov	sp, r7
   1feee:	b002      	add	sp, #8
   1fef0:	bd80      	pop	{r7, pc}
   1fef2:	46c0      	nop			; (mov r8, r8)
   1fef4:	0001edd1 	.word	0x0001edd1
   1fef8:	20000390 	.word	0x20000390
   1fefc:	200002b8 	.word	0x200002b8
   1ff00:	00020809 	.word	0x00020809
   1ff04:	2000039c 	.word	0x2000039c
   1ff08:	200003ac 	.word	0x200003ac
   1ff0c:	20000398 	.word	0x20000398
   1ff10:	200002bc 	.word	0x200002bc
   1ff14:	0001efc7 	.word	0x0001efc7
   1ff18:	0001edf5 	.word	0x0001edf5
   1ff1c:	0001edb1 	.word	0x0001edb1

0001ff20 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
   1ff20:	b580      	push	{r7, lr}
   1ff22:	b086      	sub	sp, #24
   1ff24:	af00      	add	r7, sp, #0
   1ff26:	6078      	str	r0, [r7, #4]
   1ff28:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
   1ff2a:	2300      	movs	r3, #0
   1ff2c:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
   1ff2e:	687b      	ldr	r3, [r7, #4]
   1ff30:	2b00      	cmp	r3, #0
   1ff32:	d101      	bne.n	1ff38 <vTaskDelayUntil+0x18>
   1ff34:	b672      	cpsid	i
   1ff36:	e7fe      	b.n	1ff36 <vTaskDelayUntil+0x16>
		configASSERT( ( xTimeIncrement > 0U ) );
   1ff38:	683b      	ldr	r3, [r7, #0]
   1ff3a:	2b00      	cmp	r3, #0
   1ff3c:	d101      	bne.n	1ff42 <vTaskDelayUntil+0x22>
   1ff3e:	b672      	cpsid	i
   1ff40:	e7fe      	b.n	1ff40 <vTaskDelayUntil+0x20>
		configASSERT( uxSchedulerSuspended == 0 );
   1ff42:	4b23      	ldr	r3, [pc, #140]	; (1ffd0 <vTaskDelayUntil+0xb0>)
   1ff44:	681b      	ldr	r3, [r3, #0]
   1ff46:	2b00      	cmp	r3, #0
   1ff48:	d001      	beq.n	1ff4e <vTaskDelayUntil+0x2e>
   1ff4a:	b672      	cpsid	i
   1ff4c:	e7fe      	b.n	1ff4c <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
   1ff4e:	4b21      	ldr	r3, [pc, #132]	; (1ffd4 <vTaskDelayUntil+0xb4>)
   1ff50:	4798      	blx	r3
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   1ff52:	4b21      	ldr	r3, [pc, #132]	; (1ffd8 <vTaskDelayUntil+0xb8>)
   1ff54:	681b      	ldr	r3, [r3, #0]
   1ff56:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   1ff58:	687b      	ldr	r3, [r7, #4]
   1ff5a:	681a      	ldr	r2, [r3, #0]
   1ff5c:	683b      	ldr	r3, [r7, #0]
   1ff5e:	18d3      	adds	r3, r2, r3
   1ff60:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
   1ff62:	687b      	ldr	r3, [r7, #4]
   1ff64:	681a      	ldr	r2, [r3, #0]
   1ff66:	693b      	ldr	r3, [r7, #16]
   1ff68:	429a      	cmp	r2, r3
   1ff6a:	d90b      	bls.n	1ff84 <vTaskDelayUntil+0x64>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
   1ff6c:	687b      	ldr	r3, [r7, #4]
   1ff6e:	681a      	ldr	r2, [r3, #0]
   1ff70:	68fb      	ldr	r3, [r7, #12]
   1ff72:	429a      	cmp	r2, r3
   1ff74:	d911      	bls.n	1ff9a <vTaskDelayUntil+0x7a>
   1ff76:	68fa      	ldr	r2, [r7, #12]
   1ff78:	693b      	ldr	r3, [r7, #16]
   1ff7a:	429a      	cmp	r2, r3
   1ff7c:	d90d      	bls.n	1ff9a <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
   1ff7e:	2301      	movs	r3, #1
   1ff80:	617b      	str	r3, [r7, #20]
   1ff82:	e00a      	b.n	1ff9a <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
   1ff84:	687b      	ldr	r3, [r7, #4]
   1ff86:	681a      	ldr	r2, [r3, #0]
   1ff88:	68fb      	ldr	r3, [r7, #12]
   1ff8a:	429a      	cmp	r2, r3
   1ff8c:	d803      	bhi.n	1ff96 <vTaskDelayUntil+0x76>
   1ff8e:	68fa      	ldr	r2, [r7, #12]
   1ff90:	693b      	ldr	r3, [r7, #16]
   1ff92:	429a      	cmp	r2, r3
   1ff94:	d901      	bls.n	1ff9a <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
   1ff96:	2301      	movs	r3, #1
   1ff98:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   1ff9a:	687b      	ldr	r3, [r7, #4]
   1ff9c:	68fa      	ldr	r2, [r7, #12]
   1ff9e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
   1ffa0:	697b      	ldr	r3, [r7, #20]
   1ffa2:	2b00      	cmp	r3, #0
   1ffa4:	d006      	beq.n	1ffb4 <vTaskDelayUntil+0x94>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
   1ffa6:	68fa      	ldr	r2, [r7, #12]
   1ffa8:	693b      	ldr	r3, [r7, #16]
   1ffaa:	1ad3      	subs	r3, r2, r3
   1ffac:	2100      	movs	r1, #0
   1ffae:	0018      	movs	r0, r3
   1ffb0:	4b0a      	ldr	r3, [pc, #40]	; (1ffdc <vTaskDelayUntil+0xbc>)
   1ffb2:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   1ffb4:	4b0a      	ldr	r3, [pc, #40]	; (1ffe0 <vTaskDelayUntil+0xc0>)
   1ffb6:	4798      	blx	r3
   1ffb8:	0003      	movs	r3, r0
   1ffba:	60bb      	str	r3, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1ffbc:	68bb      	ldr	r3, [r7, #8]
   1ffbe:	2b00      	cmp	r3, #0
   1ffc0:	d101      	bne.n	1ffc6 <vTaskDelayUntil+0xa6>
		{
			portYIELD_WITHIN_API();
   1ffc2:	4b08      	ldr	r3, [pc, #32]	; (1ffe4 <vTaskDelayUntil+0xc4>)
   1ffc4:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1ffc6:	46c0      	nop			; (mov r8, r8)
   1ffc8:	46bd      	mov	sp, r7
   1ffca:	b006      	add	sp, #24
   1ffcc:	bd80      	pop	{r7, pc}
   1ffce:	46c0      	nop			; (mov r8, r8)
   1ffd0:	200003b8 	.word	0x200003b8
   1ffd4:	00020201 	.word	0x00020201
   1ffd8:	20000394 	.word	0x20000394
   1ffdc:	00020df9 	.word	0x00020df9
   1ffe0:	00020219 	.word	0x00020219
   1ffe4:	0001edb1 	.word	0x0001edb1

0001ffe8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1ffe8:	b580      	push	{r7, lr}
   1ffea:	b084      	sub	sp, #16
   1ffec:	af00      	add	r7, sp, #0
   1ffee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   1fff0:	2300      	movs	r3, #0
   1fff2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1fff4:	687b      	ldr	r3, [r7, #4]
   1fff6:	2b00      	cmp	r3, #0
   1fff8:	d010      	beq.n	2001c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1fffa:	4b0d      	ldr	r3, [pc, #52]	; (20030 <vTaskDelay+0x48>)
   1fffc:	681b      	ldr	r3, [r3, #0]
   1fffe:	2b00      	cmp	r3, #0
   20000:	d001      	beq.n	20006 <vTaskDelay+0x1e>
   20002:	b672      	cpsid	i
   20004:	e7fe      	b.n	20004 <vTaskDelay+0x1c>
			vTaskSuspendAll();
   20006:	4b0b      	ldr	r3, [pc, #44]	; (20034 <vTaskDelay+0x4c>)
   20008:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   2000a:	687b      	ldr	r3, [r7, #4]
   2000c:	2100      	movs	r1, #0
   2000e:	0018      	movs	r0, r3
   20010:	4b09      	ldr	r3, [pc, #36]	; (20038 <vTaskDelay+0x50>)
   20012:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   20014:	4b09      	ldr	r3, [pc, #36]	; (2003c <vTaskDelay+0x54>)
   20016:	4798      	blx	r3
   20018:	0003      	movs	r3, r0
   2001a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   2001c:	68fb      	ldr	r3, [r7, #12]
   2001e:	2b00      	cmp	r3, #0
   20020:	d101      	bne.n	20026 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
   20022:	4b07      	ldr	r3, [pc, #28]	; (20040 <vTaskDelay+0x58>)
   20024:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   20026:	46c0      	nop			; (mov r8, r8)
   20028:	46bd      	mov	sp, r7
   2002a:	b004      	add	sp, #16
   2002c:	bd80      	pop	{r7, pc}
   2002e:	46c0      	nop			; (mov r8, r8)
   20030:	200003b8 	.word	0x200003b8
   20034:	00020201 	.word	0x00020201
   20038:	00020df9 	.word	0x00020df9
   2003c:	00020219 	.word	0x00020219
   20040:	0001edb1 	.word	0x0001edb1

00020044 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
   20044:	b580      	push	{r7, lr}
   20046:	b086      	sub	sp, #24
   20048:	af00      	add	r7, sp, #0
   2004a:	6078      	str	r0, [r7, #4]
   2004c:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
   2004e:	2300      	movs	r3, #0
   20050:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
   20052:	683b      	ldr	r3, [r7, #0]
   20054:	2b04      	cmp	r3, #4
   20056:	d901      	bls.n	2005c <vTaskPrioritySet+0x18>
   20058:	b672      	cpsid	i
   2005a:	e7fe      	b.n	2005a <vTaskPrioritySet+0x16>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   2005c:	683b      	ldr	r3, [r7, #0]
   2005e:	2b04      	cmp	r3, #4
   20060:	d901      	bls.n	20066 <vTaskPrioritySet+0x22>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   20062:	2304      	movs	r3, #4
   20064:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
   20066:	4b3d      	ldr	r3, [pc, #244]	; (2015c <vTaskPrioritySet+0x118>)
   20068:	4798      	blx	r3
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
   2006a:	687b      	ldr	r3, [r7, #4]
   2006c:	2b00      	cmp	r3, #0
   2006e:	d102      	bne.n	20076 <vTaskPrioritySet+0x32>
   20070:	4b3b      	ldr	r3, [pc, #236]	; (20160 <vTaskPrioritySet+0x11c>)
   20072:	681b      	ldr	r3, [r3, #0]
   20074:	e000      	b.n	20078 <vTaskPrioritySet+0x34>
   20076:	687b      	ldr	r3, [r7, #4]
   20078:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
   2007a:	693b      	ldr	r3, [r7, #16]
   2007c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2007e:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
   20080:	68fa      	ldr	r2, [r7, #12]
   20082:	683b      	ldr	r3, [r7, #0]
   20084:	429a      	cmp	r2, r3
   20086:	d062      	beq.n	2014e <vTaskPrioritySet+0x10a>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
   20088:	683a      	ldr	r2, [r7, #0]
   2008a:	68fb      	ldr	r3, [r7, #12]
   2008c:	429a      	cmp	r2, r3
   2008e:	d90d      	bls.n	200ac <vTaskPrioritySet+0x68>
				{
					if( pxTCB != pxCurrentTCB )
   20090:	4b33      	ldr	r3, [pc, #204]	; (20160 <vTaskPrioritySet+0x11c>)
   20092:	681b      	ldr	r3, [r3, #0]
   20094:	693a      	ldr	r2, [r7, #16]
   20096:	429a      	cmp	r2, r3
   20098:	d00f      	beq.n	200ba <vTaskPrioritySet+0x76>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
   2009a:	4b31      	ldr	r3, [pc, #196]	; (20160 <vTaskPrioritySet+0x11c>)
   2009c:	681b      	ldr	r3, [r3, #0]
   2009e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   200a0:	683b      	ldr	r3, [r7, #0]
   200a2:	429a      	cmp	r2, r3
   200a4:	d809      	bhi.n	200ba <vTaskPrioritySet+0x76>
						{
							xYieldRequired = pdTRUE;
   200a6:	2301      	movs	r3, #1
   200a8:	617b      	str	r3, [r7, #20]
   200aa:	e006      	b.n	200ba <vTaskPrioritySet+0x76>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
   200ac:	4b2c      	ldr	r3, [pc, #176]	; (20160 <vTaskPrioritySet+0x11c>)
   200ae:	681b      	ldr	r3, [r3, #0]
   200b0:	693a      	ldr	r2, [r7, #16]
   200b2:	429a      	cmp	r2, r3
   200b4:	d101      	bne.n	200ba <vTaskPrioritySet+0x76>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
   200b6:	2301      	movs	r3, #1
   200b8:	617b      	str	r3, [r7, #20]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
   200ba:	693b      	ldr	r3, [r7, #16]
   200bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   200be:	60bb      	str	r3, [r7, #8]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
   200c0:	693b      	ldr	r3, [r7, #16]
   200c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   200c4:	693b      	ldr	r3, [r7, #16]
   200c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   200c8:	429a      	cmp	r2, r3
   200ca:	d102      	bne.n	200d2 <vTaskPrioritySet+0x8e>
					{
						pxTCB->uxPriority = uxNewPriority;
   200cc:	693b      	ldr	r3, [r7, #16]
   200ce:	683a      	ldr	r2, [r7, #0]
   200d0:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
   200d2:	693b      	ldr	r3, [r7, #16]
   200d4:	683a      	ldr	r2, [r7, #0]
   200d6:	641a      	str	r2, [r3, #64]	; 0x40
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   200d8:	693b      	ldr	r3, [r7, #16]
   200da:	699b      	ldr	r3, [r3, #24]
   200dc:	2b00      	cmp	r3, #0
   200de:	db04      	blt.n	200ea <vTaskPrioritySet+0xa6>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   200e0:	683b      	ldr	r3, [r7, #0]
   200e2:	2205      	movs	r2, #5
   200e4:	1ad2      	subs	r2, r2, r3
   200e6:	693b      	ldr	r3, [r7, #16]
   200e8:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   200ea:	693b      	ldr	r3, [r7, #16]
   200ec:	6959      	ldr	r1, [r3, #20]
   200ee:	68ba      	ldr	r2, [r7, #8]
   200f0:	0013      	movs	r3, r2
   200f2:	009b      	lsls	r3, r3, #2
   200f4:	189b      	adds	r3, r3, r2
   200f6:	009b      	lsls	r3, r3, #2
   200f8:	4a1a      	ldr	r2, [pc, #104]	; (20164 <vTaskPrioritySet+0x120>)
   200fa:	189b      	adds	r3, r3, r2
   200fc:	4299      	cmp	r1, r3
   200fe:	d101      	bne.n	20104 <vTaskPrioritySet+0xc0>
   20100:	2301      	movs	r3, #1
   20102:	e000      	b.n	20106 <vTaskPrioritySet+0xc2>
   20104:	2300      	movs	r3, #0
   20106:	2b00      	cmp	r3, #0
   20108:	d01c      	beq.n	20144 <vTaskPrioritySet+0x100>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   2010a:	693b      	ldr	r3, [r7, #16]
   2010c:	3304      	adds	r3, #4
   2010e:	0018      	movs	r0, r3
   20110:	4b15      	ldr	r3, [pc, #84]	; (20168 <vTaskPrioritySet+0x124>)
   20112:	4798      	blx	r3
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
   20114:	693b      	ldr	r3, [r7, #16]
   20116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20118:	4b14      	ldr	r3, [pc, #80]	; (2016c <vTaskPrioritySet+0x128>)
   2011a:	681b      	ldr	r3, [r3, #0]
   2011c:	429a      	cmp	r2, r3
   2011e:	d903      	bls.n	20128 <vTaskPrioritySet+0xe4>
   20120:	693b      	ldr	r3, [r7, #16]
   20122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20124:	4b11      	ldr	r3, [pc, #68]	; (2016c <vTaskPrioritySet+0x128>)
   20126:	601a      	str	r2, [r3, #0]
   20128:	693b      	ldr	r3, [r7, #16]
   2012a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2012c:	0013      	movs	r3, r2
   2012e:	009b      	lsls	r3, r3, #2
   20130:	189b      	adds	r3, r3, r2
   20132:	009b      	lsls	r3, r3, #2
   20134:	4a0b      	ldr	r2, [pc, #44]	; (20164 <vTaskPrioritySet+0x120>)
   20136:	189a      	adds	r2, r3, r2
   20138:	693b      	ldr	r3, [r7, #16]
   2013a:	3304      	adds	r3, #4
   2013c:	0019      	movs	r1, r3
   2013e:	0010      	movs	r0, r2
   20140:	4b0b      	ldr	r3, [pc, #44]	; (20170 <vTaskPrioritySet+0x12c>)
   20142:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
   20144:	697b      	ldr	r3, [r7, #20]
   20146:	2b00      	cmp	r3, #0
   20148:	d001      	beq.n	2014e <vTaskPrioritySet+0x10a>
				{
					taskYIELD_IF_USING_PREEMPTION();
   2014a:	4b0a      	ldr	r3, [pc, #40]	; (20174 <vTaskPrioritySet+0x130>)
   2014c:	4798      	blx	r3
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
   2014e:	4b0a      	ldr	r3, [pc, #40]	; (20178 <vTaskPrioritySet+0x134>)
   20150:	4798      	blx	r3
	}
   20152:	46c0      	nop			; (mov r8, r8)
   20154:	46bd      	mov	sp, r7
   20156:	b006      	add	sp, #24
   20158:	bd80      	pop	{r7, pc}
   2015a:	46c0      	nop			; (mov r8, r8)
   2015c:	0001edd1 	.word	0x0001edd1
   20160:	200002b8 	.word	0x200002b8
   20164:	200002bc 	.word	0x200002bc
   20168:	0001f077 	.word	0x0001f077
   2016c:	20000398 	.word	0x20000398
   20170:	0001efc7 	.word	0x0001efc7
   20174:	0001edb1 	.word	0x0001edb1
   20178:	0001edf5 	.word	0x0001edf5

0002017c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   2017c:	b590      	push	{r4, r7, lr}
   2017e:	b085      	sub	sp, #20
   20180:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   20182:	4916      	ldr	r1, [pc, #88]	; (201dc <vTaskStartScheduler+0x60>)
   20184:	4816      	ldr	r0, [pc, #88]	; (201e0 <vTaskStartScheduler+0x64>)
   20186:	4b17      	ldr	r3, [pc, #92]	; (201e4 <vTaskStartScheduler+0x68>)
   20188:	9301      	str	r3, [sp, #4]
   2018a:	2300      	movs	r3, #0
   2018c:	9300      	str	r3, [sp, #0]
   2018e:	2300      	movs	r3, #0
   20190:	2282      	movs	r2, #130	; 0x82
   20192:	4c15      	ldr	r4, [pc, #84]	; (201e8 <vTaskStartScheduler+0x6c>)
   20194:	47a0      	blx	r4
   20196:	0003      	movs	r3, r0
   20198:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   2019a:	687b      	ldr	r3, [r7, #4]
   2019c:	2b01      	cmp	r3, #1
   2019e:	d103      	bne.n	201a8 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   201a0:	4b12      	ldr	r3, [pc, #72]	; (201ec <vTaskStartScheduler+0x70>)
   201a2:	4798      	blx	r3
   201a4:	0003      	movs	r3, r0
   201a6:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   201a8:	687b      	ldr	r3, [r7, #4]
   201aa:	2b01      	cmp	r3, #1
   201ac:	d10d      	bne.n	201ca <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   201ae:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   201b0:	4b0f      	ldr	r3, [pc, #60]	; (201f0 <vTaskStartScheduler+0x74>)
   201b2:	2201      	movs	r2, #1
   201b4:	4252      	negs	r2, r2
   201b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   201b8:	4b0e      	ldr	r3, [pc, #56]	; (201f4 <vTaskStartScheduler+0x78>)
   201ba:	2201      	movs	r2, #1
   201bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   201be:	4b0e      	ldr	r3, [pc, #56]	; (201f8 <vTaskStartScheduler+0x7c>)
   201c0:	2200      	movs	r2, #0
   201c2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   201c4:	4b0d      	ldr	r3, [pc, #52]	; (201fc <vTaskStartScheduler+0x80>)
   201c6:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   201c8:	e004      	b.n	201d4 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   201ca:	687b      	ldr	r3, [r7, #4]
   201cc:	3301      	adds	r3, #1
   201ce:	d101      	bne.n	201d4 <vTaskStartScheduler+0x58>
   201d0:	b672      	cpsid	i
   201d2:	e7fe      	b.n	201d2 <vTaskStartScheduler+0x56>
}
   201d4:	46c0      	nop			; (mov r8, r8)
   201d6:	46bd      	mov	sp, r7
   201d8:	b003      	add	sp, #12
   201da:	bd90      	pop	{r4, r7, pc}
   201dc:	0002abd8 	.word	0x0002abd8
   201e0:	000207e1 	.word	0x000207e1
   201e4:	200003b4 	.word	0x200003b4
   201e8:	0001fca9 	.word	0x0001fca9
   201ec:	00020ead 	.word	0x00020ead
   201f0:	200003b0 	.word	0x200003b0
   201f4:	2000039c 	.word	0x2000039c
   201f8:	20000394 	.word	0x20000394
   201fc:	0001ed59 	.word	0x0001ed59

00020200 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   20200:	b580      	push	{r7, lr}
   20202:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   20204:	4b03      	ldr	r3, [pc, #12]	; (20214 <vTaskSuspendAll+0x14>)
   20206:	681b      	ldr	r3, [r3, #0]
   20208:	1c5a      	adds	r2, r3, #1
   2020a:	4b02      	ldr	r3, [pc, #8]	; (20214 <vTaskSuspendAll+0x14>)
   2020c:	601a      	str	r2, [r3, #0]
}
   2020e:	46c0      	nop			; (mov r8, r8)
   20210:	46bd      	mov	sp, r7
   20212:	bd80      	pop	{r7, pc}
   20214:	200003b8 	.word	0x200003b8

00020218 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   20218:	b580      	push	{r7, lr}
   2021a:	b084      	sub	sp, #16
   2021c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   2021e:	2300      	movs	r3, #0
   20220:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   20222:	2300      	movs	r3, #0
   20224:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   20226:	4b3a      	ldr	r3, [pc, #232]	; (20310 <xTaskResumeAll+0xf8>)
   20228:	681b      	ldr	r3, [r3, #0]
   2022a:	2b00      	cmp	r3, #0
   2022c:	d101      	bne.n	20232 <xTaskResumeAll+0x1a>
   2022e:	b672      	cpsid	i
   20230:	e7fe      	b.n	20230 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   20232:	4b38      	ldr	r3, [pc, #224]	; (20314 <xTaskResumeAll+0xfc>)
   20234:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   20236:	4b36      	ldr	r3, [pc, #216]	; (20310 <xTaskResumeAll+0xf8>)
   20238:	681b      	ldr	r3, [r3, #0]
   2023a:	1e5a      	subs	r2, r3, #1
   2023c:	4b34      	ldr	r3, [pc, #208]	; (20310 <xTaskResumeAll+0xf8>)
   2023e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   20240:	4b33      	ldr	r3, [pc, #204]	; (20310 <xTaskResumeAll+0xf8>)
   20242:	681b      	ldr	r3, [r3, #0]
   20244:	2b00      	cmp	r3, #0
   20246:	d15b      	bne.n	20300 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   20248:	4b33      	ldr	r3, [pc, #204]	; (20318 <xTaskResumeAll+0x100>)
   2024a:	681b      	ldr	r3, [r3, #0]
   2024c:	2b00      	cmp	r3, #0
   2024e:	d057      	beq.n	20300 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   20250:	e02f      	b.n	202b2 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   20252:	4b32      	ldr	r3, [pc, #200]	; (2031c <xTaskResumeAll+0x104>)
   20254:	68db      	ldr	r3, [r3, #12]
   20256:	68db      	ldr	r3, [r3, #12]
   20258:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   2025a:	68fb      	ldr	r3, [r7, #12]
   2025c:	3318      	adds	r3, #24
   2025e:	0018      	movs	r0, r3
   20260:	4b2f      	ldr	r3, [pc, #188]	; (20320 <xTaskResumeAll+0x108>)
   20262:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   20264:	68fb      	ldr	r3, [r7, #12]
   20266:	3304      	adds	r3, #4
   20268:	0018      	movs	r0, r3
   2026a:	4b2d      	ldr	r3, [pc, #180]	; (20320 <xTaskResumeAll+0x108>)
   2026c:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   2026e:	68fb      	ldr	r3, [r7, #12]
   20270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20272:	4b2c      	ldr	r3, [pc, #176]	; (20324 <xTaskResumeAll+0x10c>)
   20274:	681b      	ldr	r3, [r3, #0]
   20276:	429a      	cmp	r2, r3
   20278:	d903      	bls.n	20282 <xTaskResumeAll+0x6a>
   2027a:	68fb      	ldr	r3, [r7, #12]
   2027c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2027e:	4b29      	ldr	r3, [pc, #164]	; (20324 <xTaskResumeAll+0x10c>)
   20280:	601a      	str	r2, [r3, #0]
   20282:	68fb      	ldr	r3, [r7, #12]
   20284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20286:	0013      	movs	r3, r2
   20288:	009b      	lsls	r3, r3, #2
   2028a:	189b      	adds	r3, r3, r2
   2028c:	009b      	lsls	r3, r3, #2
   2028e:	4a26      	ldr	r2, [pc, #152]	; (20328 <xTaskResumeAll+0x110>)
   20290:	189a      	adds	r2, r3, r2
   20292:	68fb      	ldr	r3, [r7, #12]
   20294:	3304      	adds	r3, #4
   20296:	0019      	movs	r1, r3
   20298:	0010      	movs	r0, r2
   2029a:	4b24      	ldr	r3, [pc, #144]	; (2032c <xTaskResumeAll+0x114>)
   2029c:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   2029e:	68fb      	ldr	r3, [r7, #12]
   202a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   202a2:	4b23      	ldr	r3, [pc, #140]	; (20330 <xTaskResumeAll+0x118>)
   202a4:	681b      	ldr	r3, [r3, #0]
   202a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   202a8:	429a      	cmp	r2, r3
   202aa:	d302      	bcc.n	202b2 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
   202ac:	4b21      	ldr	r3, [pc, #132]	; (20334 <xTaskResumeAll+0x11c>)
   202ae:	2201      	movs	r2, #1
   202b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   202b2:	4b1a      	ldr	r3, [pc, #104]	; (2031c <xTaskResumeAll+0x104>)
   202b4:	681b      	ldr	r3, [r3, #0]
   202b6:	2b00      	cmp	r3, #0
   202b8:	d1cb      	bne.n	20252 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   202ba:	68fb      	ldr	r3, [r7, #12]
   202bc:	2b00      	cmp	r3, #0
   202be:	d001      	beq.n	202c4 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   202c0:	4b1d      	ldr	r3, [pc, #116]	; (20338 <xTaskResumeAll+0x120>)
   202c2:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   202c4:	4b1d      	ldr	r3, [pc, #116]	; (2033c <xTaskResumeAll+0x124>)
   202c6:	681b      	ldr	r3, [r3, #0]
   202c8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   202ca:	687b      	ldr	r3, [r7, #4]
   202cc:	2b00      	cmp	r3, #0
   202ce:	d00f      	beq.n	202f0 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   202d0:	4b1b      	ldr	r3, [pc, #108]	; (20340 <xTaskResumeAll+0x128>)
   202d2:	4798      	blx	r3
   202d4:	1e03      	subs	r3, r0, #0
   202d6:	d002      	beq.n	202de <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
   202d8:	4b16      	ldr	r3, [pc, #88]	; (20334 <xTaskResumeAll+0x11c>)
   202da:	2201      	movs	r2, #1
   202dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   202de:	687b      	ldr	r3, [r7, #4]
   202e0:	3b01      	subs	r3, #1
   202e2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   202e4:	687b      	ldr	r3, [r7, #4]
   202e6:	2b00      	cmp	r3, #0
   202e8:	d1f2      	bne.n	202d0 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
   202ea:	4b14      	ldr	r3, [pc, #80]	; (2033c <xTaskResumeAll+0x124>)
   202ec:	2200      	movs	r2, #0
   202ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   202f0:	4b10      	ldr	r3, [pc, #64]	; (20334 <xTaskResumeAll+0x11c>)
   202f2:	681b      	ldr	r3, [r3, #0]
   202f4:	2b00      	cmp	r3, #0
   202f6:	d003      	beq.n	20300 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   202f8:	2301      	movs	r3, #1
   202fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   202fc:	4b11      	ldr	r3, [pc, #68]	; (20344 <xTaskResumeAll+0x12c>)
   202fe:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   20300:	4b11      	ldr	r3, [pc, #68]	; (20348 <xTaskResumeAll+0x130>)
   20302:	4798      	blx	r3

	return xAlreadyYielded;
   20304:	68bb      	ldr	r3, [r7, #8]
}
   20306:	0018      	movs	r0, r3
   20308:	46bd      	mov	sp, r7
   2030a:	b004      	add	sp, #16
   2030c:	bd80      	pop	{r7, pc}
   2030e:	46c0      	nop			; (mov r8, r8)
   20310:	200003b8 	.word	0x200003b8
   20314:	0001edd1 	.word	0x0001edd1
   20318:	20000390 	.word	0x20000390
   2031c:	20000350 	.word	0x20000350
   20320:	0001f077 	.word	0x0001f077
   20324:	20000398 	.word	0x20000398
   20328:	200002bc 	.word	0x200002bc
   2032c:	0001efc7 	.word	0x0001efc7
   20330:	200002b8 	.word	0x200002b8
   20334:	200003a4 	.word	0x200003a4
   20338:	00020929 	.word	0x00020929
   2033c:	200003a0 	.word	0x200003a0
   20340:	00020389 	.word	0x00020389
   20344:	0001edb1 	.word	0x0001edb1
   20348:	0001edf5 	.word	0x0001edf5

0002034c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   2034c:	b580      	push	{r7, lr}
   2034e:	b082      	sub	sp, #8
   20350:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   20352:	4b04      	ldr	r3, [pc, #16]	; (20364 <xTaskGetTickCount+0x18>)
   20354:	681b      	ldr	r3, [r3, #0]
   20356:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   20358:	687b      	ldr	r3, [r7, #4]
}
   2035a:	0018      	movs	r0, r3
   2035c:	46bd      	mov	sp, r7
   2035e:	b002      	add	sp, #8
   20360:	bd80      	pop	{r7, pc}
   20362:	46c0      	nop			; (mov r8, r8)
   20364:	20000394 	.word	0x20000394

00020368 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
   20368:	b580      	push	{r7, lr}
   2036a:	b082      	sub	sp, #8
   2036c:	af00      	add	r7, sp, #0
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
   2036e:	2300      	movs	r3, #0
   20370:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
   20372:	4b04      	ldr	r3, [pc, #16]	; (20384 <xTaskGetTickCountFromISR+0x1c>)
   20374:	681b      	ldr	r3, [r3, #0]
   20376:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   20378:	683b      	ldr	r3, [r7, #0]
}
   2037a:	0018      	movs	r0, r3
   2037c:	46bd      	mov	sp, r7
   2037e:	b002      	add	sp, #8
   20380:	bd80      	pop	{r7, pc}
   20382:	46c0      	nop			; (mov r8, r8)
   20384:	20000394 	.word	0x20000394

00020388 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   20388:	b580      	push	{r7, lr}
   2038a:	b086      	sub	sp, #24
   2038c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   2038e:	2300      	movs	r3, #0
   20390:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   20392:	4b4c      	ldr	r3, [pc, #304]	; (204c4 <xTaskIncrementTick+0x13c>)
   20394:	681b      	ldr	r3, [r3, #0]
   20396:	2b00      	cmp	r3, #0
   20398:	d000      	beq.n	2039c <xTaskIncrementTick+0x14>
   2039a:	e083      	b.n	204a4 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   2039c:	4b4a      	ldr	r3, [pc, #296]	; (204c8 <xTaskIncrementTick+0x140>)
   2039e:	681b      	ldr	r3, [r3, #0]
   203a0:	3301      	adds	r3, #1
   203a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   203a4:	4b48      	ldr	r3, [pc, #288]	; (204c8 <xTaskIncrementTick+0x140>)
   203a6:	693a      	ldr	r2, [r7, #16]
   203a8:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   203aa:	693b      	ldr	r3, [r7, #16]
   203ac:	2b00      	cmp	r3, #0
   203ae:	d117      	bne.n	203e0 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
   203b0:	4b46      	ldr	r3, [pc, #280]	; (204cc <xTaskIncrementTick+0x144>)
   203b2:	681b      	ldr	r3, [r3, #0]
   203b4:	681b      	ldr	r3, [r3, #0]
   203b6:	2b00      	cmp	r3, #0
   203b8:	d001      	beq.n	203be <xTaskIncrementTick+0x36>
   203ba:	b672      	cpsid	i
   203bc:	e7fe      	b.n	203bc <xTaskIncrementTick+0x34>
   203be:	4b43      	ldr	r3, [pc, #268]	; (204cc <xTaskIncrementTick+0x144>)
   203c0:	681b      	ldr	r3, [r3, #0]
   203c2:	60fb      	str	r3, [r7, #12]
   203c4:	4b42      	ldr	r3, [pc, #264]	; (204d0 <xTaskIncrementTick+0x148>)
   203c6:	681a      	ldr	r2, [r3, #0]
   203c8:	4b40      	ldr	r3, [pc, #256]	; (204cc <xTaskIncrementTick+0x144>)
   203ca:	601a      	str	r2, [r3, #0]
   203cc:	4b40      	ldr	r3, [pc, #256]	; (204d0 <xTaskIncrementTick+0x148>)
   203ce:	68fa      	ldr	r2, [r7, #12]
   203d0:	601a      	str	r2, [r3, #0]
   203d2:	4b40      	ldr	r3, [pc, #256]	; (204d4 <xTaskIncrementTick+0x14c>)
   203d4:	681b      	ldr	r3, [r3, #0]
   203d6:	1c5a      	adds	r2, r3, #1
   203d8:	4b3e      	ldr	r3, [pc, #248]	; (204d4 <xTaskIncrementTick+0x14c>)
   203da:	601a      	str	r2, [r3, #0]
   203dc:	4b3e      	ldr	r3, [pc, #248]	; (204d8 <xTaskIncrementTick+0x150>)
   203de:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   203e0:	4b3e      	ldr	r3, [pc, #248]	; (204dc <xTaskIncrementTick+0x154>)
   203e2:	681b      	ldr	r3, [r3, #0]
   203e4:	693a      	ldr	r2, [r7, #16]
   203e6:	429a      	cmp	r2, r3
   203e8:	d34e      	bcc.n	20488 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   203ea:	4b38      	ldr	r3, [pc, #224]	; (204cc <xTaskIncrementTick+0x144>)
   203ec:	681b      	ldr	r3, [r3, #0]
   203ee:	681b      	ldr	r3, [r3, #0]
   203f0:	2b00      	cmp	r3, #0
   203f2:	d101      	bne.n	203f8 <xTaskIncrementTick+0x70>
   203f4:	2301      	movs	r3, #1
   203f6:	e000      	b.n	203fa <xTaskIncrementTick+0x72>
   203f8:	2300      	movs	r3, #0
   203fa:	2b00      	cmp	r3, #0
   203fc:	d004      	beq.n	20408 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   203fe:	4b37      	ldr	r3, [pc, #220]	; (204dc <xTaskIncrementTick+0x154>)
   20400:	2201      	movs	r2, #1
   20402:	4252      	negs	r2, r2
   20404:	601a      	str	r2, [r3, #0]
					break;
   20406:	e03f      	b.n	20488 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   20408:	4b30      	ldr	r3, [pc, #192]	; (204cc <xTaskIncrementTick+0x144>)
   2040a:	681b      	ldr	r3, [r3, #0]
   2040c:	68db      	ldr	r3, [r3, #12]
   2040e:	68db      	ldr	r3, [r3, #12]
   20410:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   20412:	68bb      	ldr	r3, [r7, #8]
   20414:	685b      	ldr	r3, [r3, #4]
   20416:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   20418:	693a      	ldr	r2, [r7, #16]
   2041a:	687b      	ldr	r3, [r7, #4]
   2041c:	429a      	cmp	r2, r3
   2041e:	d203      	bcs.n	20428 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   20420:	4b2e      	ldr	r3, [pc, #184]	; (204dc <xTaskIncrementTick+0x154>)
   20422:	687a      	ldr	r2, [r7, #4]
   20424:	601a      	str	r2, [r3, #0]
						break;
   20426:	e02f      	b.n	20488 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   20428:	68bb      	ldr	r3, [r7, #8]
   2042a:	3304      	adds	r3, #4
   2042c:	0018      	movs	r0, r3
   2042e:	4b2c      	ldr	r3, [pc, #176]	; (204e0 <xTaskIncrementTick+0x158>)
   20430:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   20432:	68bb      	ldr	r3, [r7, #8]
   20434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20436:	2b00      	cmp	r3, #0
   20438:	d004      	beq.n	20444 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   2043a:	68bb      	ldr	r3, [r7, #8]
   2043c:	3318      	adds	r3, #24
   2043e:	0018      	movs	r0, r3
   20440:	4b27      	ldr	r3, [pc, #156]	; (204e0 <xTaskIncrementTick+0x158>)
   20442:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   20444:	68bb      	ldr	r3, [r7, #8]
   20446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20448:	4b26      	ldr	r3, [pc, #152]	; (204e4 <xTaskIncrementTick+0x15c>)
   2044a:	681b      	ldr	r3, [r3, #0]
   2044c:	429a      	cmp	r2, r3
   2044e:	d903      	bls.n	20458 <xTaskIncrementTick+0xd0>
   20450:	68bb      	ldr	r3, [r7, #8]
   20452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20454:	4b23      	ldr	r3, [pc, #140]	; (204e4 <xTaskIncrementTick+0x15c>)
   20456:	601a      	str	r2, [r3, #0]
   20458:	68bb      	ldr	r3, [r7, #8]
   2045a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2045c:	0013      	movs	r3, r2
   2045e:	009b      	lsls	r3, r3, #2
   20460:	189b      	adds	r3, r3, r2
   20462:	009b      	lsls	r3, r3, #2
   20464:	4a20      	ldr	r2, [pc, #128]	; (204e8 <xTaskIncrementTick+0x160>)
   20466:	189a      	adds	r2, r3, r2
   20468:	68bb      	ldr	r3, [r7, #8]
   2046a:	3304      	adds	r3, #4
   2046c:	0019      	movs	r1, r3
   2046e:	0010      	movs	r0, r2
   20470:	4b1e      	ldr	r3, [pc, #120]	; (204ec <xTaskIncrementTick+0x164>)
   20472:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   20474:	68bb      	ldr	r3, [r7, #8]
   20476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20478:	4b1d      	ldr	r3, [pc, #116]	; (204f0 <xTaskIncrementTick+0x168>)
   2047a:	681b      	ldr	r3, [r3, #0]
   2047c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2047e:	429a      	cmp	r2, r3
   20480:	d3b3      	bcc.n	203ea <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
   20482:	2301      	movs	r3, #1
   20484:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   20486:	e7b0      	b.n	203ea <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   20488:	4b19      	ldr	r3, [pc, #100]	; (204f0 <xTaskIncrementTick+0x168>)
   2048a:	681b      	ldr	r3, [r3, #0]
   2048c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2048e:	4916      	ldr	r1, [pc, #88]	; (204e8 <xTaskIncrementTick+0x160>)
   20490:	0013      	movs	r3, r2
   20492:	009b      	lsls	r3, r3, #2
   20494:	189b      	adds	r3, r3, r2
   20496:	009b      	lsls	r3, r3, #2
   20498:	585b      	ldr	r3, [r3, r1]
   2049a:	2b01      	cmp	r3, #1
   2049c:	d907      	bls.n	204ae <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
   2049e:	2301      	movs	r3, #1
   204a0:	617b      	str	r3, [r7, #20]
   204a2:	e004      	b.n	204ae <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   204a4:	4b13      	ldr	r3, [pc, #76]	; (204f4 <xTaskIncrementTick+0x16c>)
   204a6:	681b      	ldr	r3, [r3, #0]
   204a8:	1c5a      	adds	r2, r3, #1
   204aa:	4b12      	ldr	r3, [pc, #72]	; (204f4 <xTaskIncrementTick+0x16c>)
   204ac:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   204ae:	4b12      	ldr	r3, [pc, #72]	; (204f8 <xTaskIncrementTick+0x170>)
   204b0:	681b      	ldr	r3, [r3, #0]
   204b2:	2b00      	cmp	r3, #0
   204b4:	d001      	beq.n	204ba <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
   204b6:	2301      	movs	r3, #1
   204b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   204ba:	697b      	ldr	r3, [r7, #20]
}
   204bc:	0018      	movs	r0, r3
   204be:	46bd      	mov	sp, r7
   204c0:	b006      	add	sp, #24
   204c2:	bd80      	pop	{r7, pc}
   204c4:	200003b8 	.word	0x200003b8
   204c8:	20000394 	.word	0x20000394
   204cc:	20000348 	.word	0x20000348
   204d0:	2000034c 	.word	0x2000034c
   204d4:	200003a8 	.word	0x200003a8
   204d8:	00020929 	.word	0x00020929
   204dc:	200003b0 	.word	0x200003b0
   204e0:	0001f077 	.word	0x0001f077
   204e4:	20000398 	.word	0x20000398
   204e8:	200002bc 	.word	0x200002bc
   204ec:	0001efc7 	.word	0x0001efc7
   204f0:	200002b8 	.word	0x200002b8
   204f4:	200003a0 	.word	0x200003a0
   204f8:	200003a4 	.word	0x200003a4

000204fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   204fc:	b580      	push	{r7, lr}
   204fe:	b082      	sub	sp, #8
   20500:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   20502:	4b22      	ldr	r3, [pc, #136]	; (2058c <vTaskSwitchContext+0x90>)
   20504:	681b      	ldr	r3, [r3, #0]
   20506:	2b00      	cmp	r3, #0
   20508:	d003      	beq.n	20512 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   2050a:	4b21      	ldr	r3, [pc, #132]	; (20590 <vTaskSwitchContext+0x94>)
   2050c:	2201      	movs	r2, #1
   2050e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   20510:	e037      	b.n	20582 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
   20512:	4b1f      	ldr	r3, [pc, #124]	; (20590 <vTaskSwitchContext+0x94>)
   20514:	2200      	movs	r2, #0
   20516:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
   20518:	4b1e      	ldr	r3, [pc, #120]	; (20594 <vTaskSwitchContext+0x98>)
   2051a:	681b      	ldr	r3, [r3, #0]
   2051c:	607b      	str	r3, [r7, #4]
   2051e:	e007      	b.n	20530 <vTaskSwitchContext+0x34>
   20520:	687b      	ldr	r3, [r7, #4]
   20522:	2b00      	cmp	r3, #0
   20524:	d101      	bne.n	2052a <vTaskSwitchContext+0x2e>
   20526:	b672      	cpsid	i
   20528:	e7fe      	b.n	20528 <vTaskSwitchContext+0x2c>
   2052a:	687b      	ldr	r3, [r7, #4]
   2052c:	3b01      	subs	r3, #1
   2052e:	607b      	str	r3, [r7, #4]
   20530:	4919      	ldr	r1, [pc, #100]	; (20598 <vTaskSwitchContext+0x9c>)
   20532:	687a      	ldr	r2, [r7, #4]
   20534:	0013      	movs	r3, r2
   20536:	009b      	lsls	r3, r3, #2
   20538:	189b      	adds	r3, r3, r2
   2053a:	009b      	lsls	r3, r3, #2
   2053c:	585b      	ldr	r3, [r3, r1]
   2053e:	2b00      	cmp	r3, #0
   20540:	d0ee      	beq.n	20520 <vTaskSwitchContext+0x24>
   20542:	687a      	ldr	r2, [r7, #4]
   20544:	0013      	movs	r3, r2
   20546:	009b      	lsls	r3, r3, #2
   20548:	189b      	adds	r3, r3, r2
   2054a:	009b      	lsls	r3, r3, #2
   2054c:	4a12      	ldr	r2, [pc, #72]	; (20598 <vTaskSwitchContext+0x9c>)
   2054e:	189b      	adds	r3, r3, r2
   20550:	603b      	str	r3, [r7, #0]
   20552:	683b      	ldr	r3, [r7, #0]
   20554:	685b      	ldr	r3, [r3, #4]
   20556:	685a      	ldr	r2, [r3, #4]
   20558:	683b      	ldr	r3, [r7, #0]
   2055a:	605a      	str	r2, [r3, #4]
   2055c:	683b      	ldr	r3, [r7, #0]
   2055e:	685a      	ldr	r2, [r3, #4]
   20560:	683b      	ldr	r3, [r7, #0]
   20562:	3308      	adds	r3, #8
   20564:	429a      	cmp	r2, r3
   20566:	d104      	bne.n	20572 <vTaskSwitchContext+0x76>
   20568:	683b      	ldr	r3, [r7, #0]
   2056a:	685b      	ldr	r3, [r3, #4]
   2056c:	685a      	ldr	r2, [r3, #4]
   2056e:	683b      	ldr	r3, [r7, #0]
   20570:	605a      	str	r2, [r3, #4]
   20572:	683b      	ldr	r3, [r7, #0]
   20574:	685b      	ldr	r3, [r3, #4]
   20576:	68da      	ldr	r2, [r3, #12]
   20578:	4b08      	ldr	r3, [pc, #32]	; (2059c <vTaskSwitchContext+0xa0>)
   2057a:	601a      	str	r2, [r3, #0]
   2057c:	4b05      	ldr	r3, [pc, #20]	; (20594 <vTaskSwitchContext+0x98>)
   2057e:	687a      	ldr	r2, [r7, #4]
   20580:	601a      	str	r2, [r3, #0]
}
   20582:	46c0      	nop			; (mov r8, r8)
   20584:	46bd      	mov	sp, r7
   20586:	b002      	add	sp, #8
   20588:	bd80      	pop	{r7, pc}
   2058a:	46c0      	nop			; (mov r8, r8)
   2058c:	200003b8 	.word	0x200003b8
   20590:	200003a4 	.word	0x200003a4
   20594:	20000398 	.word	0x20000398
   20598:	200002bc 	.word	0x200002bc
   2059c:	200002b8 	.word	0x200002b8

000205a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   205a0:	b580      	push	{r7, lr}
   205a2:	b082      	sub	sp, #8
   205a4:	af00      	add	r7, sp, #0
   205a6:	6078      	str	r0, [r7, #4]
   205a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   205aa:	687b      	ldr	r3, [r7, #4]
   205ac:	2b00      	cmp	r3, #0
   205ae:	d101      	bne.n	205b4 <vTaskPlaceOnEventList+0x14>
   205b0:	b672      	cpsid	i
   205b2:	e7fe      	b.n	205b2 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   205b4:	4b08      	ldr	r3, [pc, #32]	; (205d8 <vTaskPlaceOnEventList+0x38>)
   205b6:	681b      	ldr	r3, [r3, #0]
   205b8:	3318      	adds	r3, #24
   205ba:	001a      	movs	r2, r3
   205bc:	687b      	ldr	r3, [r7, #4]
   205be:	0011      	movs	r1, r2
   205c0:	0018      	movs	r0, r3
   205c2:	4b06      	ldr	r3, [pc, #24]	; (205dc <vTaskPlaceOnEventList+0x3c>)
   205c4:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   205c6:	683b      	ldr	r3, [r7, #0]
   205c8:	2101      	movs	r1, #1
   205ca:	0018      	movs	r0, r3
   205cc:	4b04      	ldr	r3, [pc, #16]	; (205e0 <vTaskPlaceOnEventList+0x40>)
   205ce:	4798      	blx	r3
}
   205d0:	46c0      	nop			; (mov r8, r8)
   205d2:	46bd      	mov	sp, r7
   205d4:	b002      	add	sp, #8
   205d6:	bd80      	pop	{r7, pc}
   205d8:	200002b8 	.word	0x200002b8
   205dc:	0001f00b 	.word	0x0001f00b
   205e0:	00020df9 	.word	0x00020df9

000205e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   205e4:	b580      	push	{r7, lr}
   205e6:	b084      	sub	sp, #16
   205e8:	af00      	add	r7, sp, #0
   205ea:	60f8      	str	r0, [r7, #12]
   205ec:	60b9      	str	r1, [r7, #8]
   205ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   205f0:	68fb      	ldr	r3, [r7, #12]
   205f2:	2b00      	cmp	r3, #0
   205f4:	d101      	bne.n	205fa <vTaskPlaceOnEventListRestricted+0x16>
   205f6:	b672      	cpsid	i
   205f8:	e7fe      	b.n	205f8 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   205fa:	4b0c      	ldr	r3, [pc, #48]	; (2062c <vTaskPlaceOnEventListRestricted+0x48>)
   205fc:	681b      	ldr	r3, [r3, #0]
   205fe:	3318      	adds	r3, #24
   20600:	001a      	movs	r2, r3
   20602:	68fb      	ldr	r3, [r7, #12]
   20604:	0011      	movs	r1, r2
   20606:	0018      	movs	r0, r3
   20608:	4b09      	ldr	r3, [pc, #36]	; (20630 <vTaskPlaceOnEventListRestricted+0x4c>)
   2060a:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   2060c:	687b      	ldr	r3, [r7, #4]
   2060e:	2b00      	cmp	r3, #0
   20610:	d002      	beq.n	20618 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   20612:	2301      	movs	r3, #1
   20614:	425b      	negs	r3, r3
   20616:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   20618:	687a      	ldr	r2, [r7, #4]
   2061a:	68bb      	ldr	r3, [r7, #8]
   2061c:	0011      	movs	r1, r2
   2061e:	0018      	movs	r0, r3
   20620:	4b04      	ldr	r3, [pc, #16]	; (20634 <vTaskPlaceOnEventListRestricted+0x50>)
   20622:	4798      	blx	r3
	}
   20624:	46c0      	nop			; (mov r8, r8)
   20626:	46bd      	mov	sp, r7
   20628:	b004      	add	sp, #16
   2062a:	bd80      	pop	{r7, pc}
   2062c:	200002b8 	.word	0x200002b8
   20630:	0001efc7 	.word	0x0001efc7
   20634:	00020df9 	.word	0x00020df9

00020638 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   20638:	b580      	push	{r7, lr}
   2063a:	b084      	sub	sp, #16
   2063c:	af00      	add	r7, sp, #0
   2063e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   20640:	687b      	ldr	r3, [r7, #4]
   20642:	68db      	ldr	r3, [r3, #12]
   20644:	68db      	ldr	r3, [r3, #12]
   20646:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   20648:	68bb      	ldr	r3, [r7, #8]
   2064a:	2b00      	cmp	r3, #0
   2064c:	d101      	bne.n	20652 <xTaskRemoveFromEventList+0x1a>
   2064e:	b672      	cpsid	i
   20650:	e7fe      	b.n	20650 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   20652:	68bb      	ldr	r3, [r7, #8]
   20654:	3318      	adds	r3, #24
   20656:	0018      	movs	r0, r3
   20658:	4b1f      	ldr	r3, [pc, #124]	; (206d8 <xTaskRemoveFromEventList+0xa0>)
   2065a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   2065c:	4b1f      	ldr	r3, [pc, #124]	; (206dc <xTaskRemoveFromEventList+0xa4>)
   2065e:	681b      	ldr	r3, [r3, #0]
   20660:	2b00      	cmp	r3, #0
   20662:	d11d      	bne.n	206a0 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   20664:	68bb      	ldr	r3, [r7, #8]
   20666:	3304      	adds	r3, #4
   20668:	0018      	movs	r0, r3
   2066a:	4b1b      	ldr	r3, [pc, #108]	; (206d8 <xTaskRemoveFromEventList+0xa0>)
   2066c:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   2066e:	68bb      	ldr	r3, [r7, #8]
   20670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20672:	4b1b      	ldr	r3, [pc, #108]	; (206e0 <xTaskRemoveFromEventList+0xa8>)
   20674:	681b      	ldr	r3, [r3, #0]
   20676:	429a      	cmp	r2, r3
   20678:	d903      	bls.n	20682 <xTaskRemoveFromEventList+0x4a>
   2067a:	68bb      	ldr	r3, [r7, #8]
   2067c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2067e:	4b18      	ldr	r3, [pc, #96]	; (206e0 <xTaskRemoveFromEventList+0xa8>)
   20680:	601a      	str	r2, [r3, #0]
   20682:	68bb      	ldr	r3, [r7, #8]
   20684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20686:	0013      	movs	r3, r2
   20688:	009b      	lsls	r3, r3, #2
   2068a:	189b      	adds	r3, r3, r2
   2068c:	009b      	lsls	r3, r3, #2
   2068e:	4a15      	ldr	r2, [pc, #84]	; (206e4 <xTaskRemoveFromEventList+0xac>)
   20690:	189a      	adds	r2, r3, r2
   20692:	68bb      	ldr	r3, [r7, #8]
   20694:	3304      	adds	r3, #4
   20696:	0019      	movs	r1, r3
   20698:	0010      	movs	r0, r2
   2069a:	4b13      	ldr	r3, [pc, #76]	; (206e8 <xTaskRemoveFromEventList+0xb0>)
   2069c:	4798      	blx	r3
   2069e:	e007      	b.n	206b0 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   206a0:	68bb      	ldr	r3, [r7, #8]
   206a2:	3318      	adds	r3, #24
   206a4:	001a      	movs	r2, r3
   206a6:	4b11      	ldr	r3, [pc, #68]	; (206ec <xTaskRemoveFromEventList+0xb4>)
   206a8:	0011      	movs	r1, r2
   206aa:	0018      	movs	r0, r3
   206ac:	4b0e      	ldr	r3, [pc, #56]	; (206e8 <xTaskRemoveFromEventList+0xb0>)
   206ae:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   206b0:	68bb      	ldr	r3, [r7, #8]
   206b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   206b4:	4b0e      	ldr	r3, [pc, #56]	; (206f0 <xTaskRemoveFromEventList+0xb8>)
   206b6:	681b      	ldr	r3, [r3, #0]
   206b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   206ba:	429a      	cmp	r2, r3
   206bc:	d905      	bls.n	206ca <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   206be:	2301      	movs	r3, #1
   206c0:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   206c2:	4b0c      	ldr	r3, [pc, #48]	; (206f4 <xTaskRemoveFromEventList+0xbc>)
   206c4:	2201      	movs	r2, #1
   206c6:	601a      	str	r2, [r3, #0]
   206c8:	e001      	b.n	206ce <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
   206ca:	2300      	movs	r3, #0
   206cc:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   206ce:	68fb      	ldr	r3, [r7, #12]
}
   206d0:	0018      	movs	r0, r3
   206d2:	46bd      	mov	sp, r7
   206d4:	b004      	add	sp, #16
   206d6:	bd80      	pop	{r7, pc}
   206d8:	0001f077 	.word	0x0001f077
   206dc:	200003b8 	.word	0x200003b8
   206e0:	20000398 	.word	0x20000398
   206e4:	200002bc 	.word	0x200002bc
   206e8:	0001efc7 	.word	0x0001efc7
   206ec:	20000350 	.word	0x20000350
   206f0:	200002b8 	.word	0x200002b8
   206f4:	200003a4 	.word	0x200003a4

000206f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   206f8:	b580      	push	{r7, lr}
   206fa:	b082      	sub	sp, #8
   206fc:	af00      	add	r7, sp, #0
   206fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   20700:	4b05      	ldr	r3, [pc, #20]	; (20718 <vTaskInternalSetTimeOutState+0x20>)
   20702:	681a      	ldr	r2, [r3, #0]
   20704:	687b      	ldr	r3, [r7, #4]
   20706:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   20708:	4b04      	ldr	r3, [pc, #16]	; (2071c <vTaskInternalSetTimeOutState+0x24>)
   2070a:	681a      	ldr	r2, [r3, #0]
   2070c:	687b      	ldr	r3, [r7, #4]
   2070e:	605a      	str	r2, [r3, #4]
}
   20710:	46c0      	nop			; (mov r8, r8)
   20712:	46bd      	mov	sp, r7
   20714:	b002      	add	sp, #8
   20716:	bd80      	pop	{r7, pc}
   20718:	200003a8 	.word	0x200003a8
   2071c:	20000394 	.word	0x20000394

00020720 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   20720:	b580      	push	{r7, lr}
   20722:	b086      	sub	sp, #24
   20724:	af00      	add	r7, sp, #0
   20726:	6078      	str	r0, [r7, #4]
   20728:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   2072a:	687b      	ldr	r3, [r7, #4]
   2072c:	2b00      	cmp	r3, #0
   2072e:	d101      	bne.n	20734 <xTaskCheckForTimeOut+0x14>
   20730:	b672      	cpsid	i
   20732:	e7fe      	b.n	20732 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   20734:	683b      	ldr	r3, [r7, #0]
   20736:	2b00      	cmp	r3, #0
   20738:	d101      	bne.n	2073e <xTaskCheckForTimeOut+0x1e>
   2073a:	b672      	cpsid	i
   2073c:	e7fe      	b.n	2073c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   2073e:	4b1e      	ldr	r3, [pc, #120]	; (207b8 <xTaskCheckForTimeOut+0x98>)
   20740:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   20742:	4b1e      	ldr	r3, [pc, #120]	; (207bc <xTaskCheckForTimeOut+0x9c>)
   20744:	681b      	ldr	r3, [r3, #0]
   20746:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   20748:	687b      	ldr	r3, [r7, #4]
   2074a:	685b      	ldr	r3, [r3, #4]
   2074c:	693a      	ldr	r2, [r7, #16]
   2074e:	1ad3      	subs	r3, r2, r3
   20750:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   20752:	683b      	ldr	r3, [r7, #0]
   20754:	681b      	ldr	r3, [r3, #0]
   20756:	3301      	adds	r3, #1
   20758:	d102      	bne.n	20760 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   2075a:	2300      	movs	r3, #0
   2075c:	617b      	str	r3, [r7, #20]
   2075e:	e024      	b.n	207aa <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   20760:	687b      	ldr	r3, [r7, #4]
   20762:	681a      	ldr	r2, [r3, #0]
   20764:	4b16      	ldr	r3, [pc, #88]	; (207c0 <xTaskCheckForTimeOut+0xa0>)
   20766:	681b      	ldr	r3, [r3, #0]
   20768:	429a      	cmp	r2, r3
   2076a:	d007      	beq.n	2077c <xTaskCheckForTimeOut+0x5c>
   2076c:	687b      	ldr	r3, [r7, #4]
   2076e:	685a      	ldr	r2, [r3, #4]
   20770:	693b      	ldr	r3, [r7, #16]
   20772:	429a      	cmp	r2, r3
   20774:	d802      	bhi.n	2077c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   20776:	2301      	movs	r3, #1
   20778:	617b      	str	r3, [r7, #20]
   2077a:	e016      	b.n	207aa <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   2077c:	683b      	ldr	r3, [r7, #0]
   2077e:	681a      	ldr	r2, [r3, #0]
   20780:	68fb      	ldr	r3, [r7, #12]
   20782:	429a      	cmp	r2, r3
   20784:	d90c      	bls.n	207a0 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   20786:	683b      	ldr	r3, [r7, #0]
   20788:	681a      	ldr	r2, [r3, #0]
   2078a:	68fb      	ldr	r3, [r7, #12]
   2078c:	1ad2      	subs	r2, r2, r3
   2078e:	683b      	ldr	r3, [r7, #0]
   20790:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   20792:	687b      	ldr	r3, [r7, #4]
   20794:	0018      	movs	r0, r3
   20796:	4b0b      	ldr	r3, [pc, #44]	; (207c4 <xTaskCheckForTimeOut+0xa4>)
   20798:	4798      	blx	r3
			xReturn = pdFALSE;
   2079a:	2300      	movs	r3, #0
   2079c:	617b      	str	r3, [r7, #20]
   2079e:	e004      	b.n	207aa <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   207a0:	683b      	ldr	r3, [r7, #0]
   207a2:	2200      	movs	r2, #0
   207a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   207a6:	2301      	movs	r3, #1
   207a8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   207aa:	4b07      	ldr	r3, [pc, #28]	; (207c8 <xTaskCheckForTimeOut+0xa8>)
   207ac:	4798      	blx	r3

	return xReturn;
   207ae:	697b      	ldr	r3, [r7, #20]
}
   207b0:	0018      	movs	r0, r3
   207b2:	46bd      	mov	sp, r7
   207b4:	b006      	add	sp, #24
   207b6:	bd80      	pop	{r7, pc}
   207b8:	0001edd1 	.word	0x0001edd1
   207bc:	20000394 	.word	0x20000394
   207c0:	200003a8 	.word	0x200003a8
   207c4:	000206f9 	.word	0x000206f9
   207c8:	0001edf5 	.word	0x0001edf5

000207cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   207cc:	b580      	push	{r7, lr}
   207ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   207d0:	4b02      	ldr	r3, [pc, #8]	; (207dc <vTaskMissedYield+0x10>)
   207d2:	2201      	movs	r2, #1
   207d4:	601a      	str	r2, [r3, #0]
}
   207d6:	46c0      	nop			; (mov r8, r8)
   207d8:	46bd      	mov	sp, r7
   207da:	bd80      	pop	{r7, pc}
   207dc:	200003a4 	.word	0x200003a4

000207e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   207e0:	b580      	push	{r7, lr}
   207e2:	b082      	sub	sp, #8
   207e4:	af00      	add	r7, sp, #0
   207e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   207e8:	4b04      	ldr	r3, [pc, #16]	; (207fc <prvIdleTask+0x1c>)
   207ea:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   207ec:	4b04      	ldr	r3, [pc, #16]	; (20800 <prvIdleTask+0x20>)
   207ee:	681b      	ldr	r3, [r3, #0]
   207f0:	2b01      	cmp	r3, #1
   207f2:	d9f9      	bls.n	207e8 <prvIdleTask+0x8>
			{
				taskYIELD();
   207f4:	4b03      	ldr	r3, [pc, #12]	; (20804 <prvIdleTask+0x24>)
   207f6:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   207f8:	e7f6      	b.n	207e8 <prvIdleTask+0x8>
   207fa:	46c0      	nop			; (mov r8, r8)
   207fc:	00020895 	.word	0x00020895
   20800:	200002bc 	.word	0x200002bc
   20804:	0001edb1 	.word	0x0001edb1

00020808 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   20808:	b580      	push	{r7, lr}
   2080a:	b082      	sub	sp, #8
   2080c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   2080e:	2300      	movs	r3, #0
   20810:	607b      	str	r3, [r7, #4]
   20812:	e00c      	b.n	2082e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   20814:	687a      	ldr	r2, [r7, #4]
   20816:	0013      	movs	r3, r2
   20818:	009b      	lsls	r3, r3, #2
   2081a:	189b      	adds	r3, r3, r2
   2081c:	009b      	lsls	r3, r3, #2
   2081e:	4a14      	ldr	r2, [pc, #80]	; (20870 <prvInitialiseTaskLists+0x68>)
   20820:	189b      	adds	r3, r3, r2
   20822:	0018      	movs	r0, r3
   20824:	4b13      	ldr	r3, [pc, #76]	; (20874 <prvInitialiseTaskLists+0x6c>)
   20826:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   20828:	687b      	ldr	r3, [r7, #4]
   2082a:	3301      	adds	r3, #1
   2082c:	607b      	str	r3, [r7, #4]
   2082e:	687b      	ldr	r3, [r7, #4]
   20830:	2b04      	cmp	r3, #4
   20832:	d9ef      	bls.n	20814 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   20834:	4b10      	ldr	r3, [pc, #64]	; (20878 <prvInitialiseTaskLists+0x70>)
   20836:	0018      	movs	r0, r3
   20838:	4b0e      	ldr	r3, [pc, #56]	; (20874 <prvInitialiseTaskLists+0x6c>)
   2083a:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   2083c:	4b0f      	ldr	r3, [pc, #60]	; (2087c <prvInitialiseTaskLists+0x74>)
   2083e:	0018      	movs	r0, r3
   20840:	4b0c      	ldr	r3, [pc, #48]	; (20874 <prvInitialiseTaskLists+0x6c>)
   20842:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   20844:	4b0e      	ldr	r3, [pc, #56]	; (20880 <prvInitialiseTaskLists+0x78>)
   20846:	0018      	movs	r0, r3
   20848:	4b0a      	ldr	r3, [pc, #40]	; (20874 <prvInitialiseTaskLists+0x6c>)
   2084a:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   2084c:	4b0d      	ldr	r3, [pc, #52]	; (20884 <prvInitialiseTaskLists+0x7c>)
   2084e:	0018      	movs	r0, r3
   20850:	4b08      	ldr	r3, [pc, #32]	; (20874 <prvInitialiseTaskLists+0x6c>)
   20852:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   20854:	4b0c      	ldr	r3, [pc, #48]	; (20888 <prvInitialiseTaskLists+0x80>)
   20856:	0018      	movs	r0, r3
   20858:	4b06      	ldr	r3, [pc, #24]	; (20874 <prvInitialiseTaskLists+0x6c>)
   2085a:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   2085c:	4b0b      	ldr	r3, [pc, #44]	; (2088c <prvInitialiseTaskLists+0x84>)
   2085e:	4a06      	ldr	r2, [pc, #24]	; (20878 <prvInitialiseTaskLists+0x70>)
   20860:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   20862:	4b0b      	ldr	r3, [pc, #44]	; (20890 <prvInitialiseTaskLists+0x88>)
   20864:	4a05      	ldr	r2, [pc, #20]	; (2087c <prvInitialiseTaskLists+0x74>)
   20866:	601a      	str	r2, [r3, #0]
}
   20868:	46c0      	nop			; (mov r8, r8)
   2086a:	46bd      	mov	sp, r7
   2086c:	b002      	add	sp, #8
   2086e:	bd80      	pop	{r7, pc}
   20870:	200002bc 	.word	0x200002bc
   20874:	0001ef75 	.word	0x0001ef75
   20878:	20000320 	.word	0x20000320
   2087c:	20000334 	.word	0x20000334
   20880:	20000350 	.word	0x20000350
   20884:	20000364 	.word	0x20000364
   20888:	2000037c 	.word	0x2000037c
   2088c:	20000348 	.word	0x20000348
   20890:	2000034c 	.word	0x2000034c

00020894 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   20894:	b580      	push	{r7, lr}
   20896:	b082      	sub	sp, #8
   20898:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   2089a:	e01a      	b.n	208d2 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   2089c:	4b11      	ldr	r3, [pc, #68]	; (208e4 <prvCheckTasksWaitingTermination+0x50>)
   2089e:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   208a0:	4b11      	ldr	r3, [pc, #68]	; (208e8 <prvCheckTasksWaitingTermination+0x54>)
   208a2:	68db      	ldr	r3, [r3, #12]
   208a4:	68db      	ldr	r3, [r3, #12]
   208a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   208a8:	687b      	ldr	r3, [r7, #4]
   208aa:	3304      	adds	r3, #4
   208ac:	0018      	movs	r0, r3
   208ae:	4b0f      	ldr	r3, [pc, #60]	; (208ec <prvCheckTasksWaitingTermination+0x58>)
   208b0:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   208b2:	4b0f      	ldr	r3, [pc, #60]	; (208f0 <prvCheckTasksWaitingTermination+0x5c>)
   208b4:	681b      	ldr	r3, [r3, #0]
   208b6:	1e5a      	subs	r2, r3, #1
   208b8:	4b0d      	ldr	r3, [pc, #52]	; (208f0 <prvCheckTasksWaitingTermination+0x5c>)
   208ba:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   208bc:	4b0d      	ldr	r3, [pc, #52]	; (208f4 <prvCheckTasksWaitingTermination+0x60>)
   208be:	681b      	ldr	r3, [r3, #0]
   208c0:	1e5a      	subs	r2, r3, #1
   208c2:	4b0c      	ldr	r3, [pc, #48]	; (208f4 <prvCheckTasksWaitingTermination+0x60>)
   208c4:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   208c6:	4b0c      	ldr	r3, [pc, #48]	; (208f8 <prvCheckTasksWaitingTermination+0x64>)
   208c8:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   208ca:	687b      	ldr	r3, [r7, #4]
   208cc:	0018      	movs	r0, r3
   208ce:	4b0b      	ldr	r3, [pc, #44]	; (208fc <prvCheckTasksWaitingTermination+0x68>)
   208d0:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   208d2:	4b08      	ldr	r3, [pc, #32]	; (208f4 <prvCheckTasksWaitingTermination+0x60>)
   208d4:	681b      	ldr	r3, [r3, #0]
   208d6:	2b00      	cmp	r3, #0
   208d8:	d1e0      	bne.n	2089c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   208da:	46c0      	nop			; (mov r8, r8)
   208dc:	46bd      	mov	sp, r7
   208de:	b002      	add	sp, #8
   208e0:	bd80      	pop	{r7, pc}
   208e2:	46c0      	nop			; (mov r8, r8)
   208e4:	0001edd1 	.word	0x0001edd1
   208e8:	20000364 	.word	0x20000364
   208ec:	0001f077 	.word	0x0001f077
   208f0:	20000390 	.word	0x20000390
   208f4:	20000378 	.word	0x20000378
   208f8:	0001edf5 	.word	0x0001edf5
   208fc:	00020901 	.word	0x00020901

00020900 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   20900:	b580      	push	{r7, lr}
   20902:	b082      	sub	sp, #8
   20904:	af00      	add	r7, sp, #0
   20906:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   20908:	687b      	ldr	r3, [r7, #4]
   2090a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   2090c:	0018      	movs	r0, r3
   2090e:	4b05      	ldr	r3, [pc, #20]	; (20924 <prvDeleteTCB+0x24>)
   20910:	4798      	blx	r3
			vPortFree( pxTCB );
   20912:	687b      	ldr	r3, [r7, #4]
   20914:	0018      	movs	r0, r3
   20916:	4b03      	ldr	r3, [pc, #12]	; (20924 <prvDeleteTCB+0x24>)
   20918:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   2091a:	46c0      	nop			; (mov r8, r8)
   2091c:	46bd      	mov	sp, r7
   2091e:	b002      	add	sp, #8
   20920:	bd80      	pop	{r7, pc}
   20922:	46c0      	nop			; (mov r8, r8)
   20924:	0001ef41 	.word	0x0001ef41

00020928 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   20928:	b580      	push	{r7, lr}
   2092a:	b082      	sub	sp, #8
   2092c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   2092e:	4b0e      	ldr	r3, [pc, #56]	; (20968 <prvResetNextTaskUnblockTime+0x40>)
   20930:	681b      	ldr	r3, [r3, #0]
   20932:	681b      	ldr	r3, [r3, #0]
   20934:	2b00      	cmp	r3, #0
   20936:	d101      	bne.n	2093c <prvResetNextTaskUnblockTime+0x14>
   20938:	2301      	movs	r3, #1
   2093a:	e000      	b.n	2093e <prvResetNextTaskUnblockTime+0x16>
   2093c:	2300      	movs	r3, #0
   2093e:	2b00      	cmp	r3, #0
   20940:	d004      	beq.n	2094c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   20942:	4b0a      	ldr	r3, [pc, #40]	; (2096c <prvResetNextTaskUnblockTime+0x44>)
   20944:	2201      	movs	r2, #1
   20946:	4252      	negs	r2, r2
   20948:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   2094a:	e008      	b.n	2095e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   2094c:	4b06      	ldr	r3, [pc, #24]	; (20968 <prvResetNextTaskUnblockTime+0x40>)
   2094e:	681b      	ldr	r3, [r3, #0]
   20950:	68db      	ldr	r3, [r3, #12]
   20952:	68db      	ldr	r3, [r3, #12]
   20954:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   20956:	687b      	ldr	r3, [r7, #4]
   20958:	685a      	ldr	r2, [r3, #4]
   2095a:	4b04      	ldr	r3, [pc, #16]	; (2096c <prvResetNextTaskUnblockTime+0x44>)
   2095c:	601a      	str	r2, [r3, #0]
}
   2095e:	46c0      	nop			; (mov r8, r8)
   20960:	46bd      	mov	sp, r7
   20962:	b002      	add	sp, #8
   20964:	bd80      	pop	{r7, pc}
   20966:	46c0      	nop			; (mov r8, r8)
   20968:	20000348 	.word	0x20000348
   2096c:	200003b0 	.word	0x200003b0

00020970 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   20970:	b580      	push	{r7, lr}
   20972:	b082      	sub	sp, #8
   20974:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   20976:	4b0a      	ldr	r3, [pc, #40]	; (209a0 <xTaskGetSchedulerState+0x30>)
   20978:	681b      	ldr	r3, [r3, #0]
   2097a:	2b00      	cmp	r3, #0
   2097c:	d102      	bne.n	20984 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   2097e:	2301      	movs	r3, #1
   20980:	607b      	str	r3, [r7, #4]
   20982:	e008      	b.n	20996 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   20984:	4b07      	ldr	r3, [pc, #28]	; (209a4 <xTaskGetSchedulerState+0x34>)
   20986:	681b      	ldr	r3, [r3, #0]
   20988:	2b00      	cmp	r3, #0
   2098a:	d102      	bne.n	20992 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   2098c:	2302      	movs	r3, #2
   2098e:	607b      	str	r3, [r7, #4]
   20990:	e001      	b.n	20996 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   20992:	2300      	movs	r3, #0
   20994:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   20996:	687b      	ldr	r3, [r7, #4]
	}
   20998:	0018      	movs	r0, r3
   2099a:	46bd      	mov	sp, r7
   2099c:	b002      	add	sp, #8
   2099e:	bd80      	pop	{r7, pc}
   209a0:	2000039c 	.word	0x2000039c
   209a4:	200003b8 	.word	0x200003b8

000209a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   209a8:	b580      	push	{r7, lr}
   209aa:	b084      	sub	sp, #16
   209ac:	af00      	add	r7, sp, #0
   209ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   209b0:	687b      	ldr	r3, [r7, #4]
   209b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   209b4:	2300      	movs	r3, #0
   209b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   209b8:	687b      	ldr	r3, [r7, #4]
   209ba:	2b00      	cmp	r3, #0
   209bc:	d056      	beq.n	20a6c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   209be:	68bb      	ldr	r3, [r7, #8]
   209c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   209c2:	4b2d      	ldr	r3, [pc, #180]	; (20a78 <xTaskPriorityInherit+0xd0>)
   209c4:	681b      	ldr	r3, [r3, #0]
   209c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   209c8:	429a      	cmp	r2, r3
   209ca:	d246      	bcs.n	20a5a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   209cc:	68bb      	ldr	r3, [r7, #8]
   209ce:	699b      	ldr	r3, [r3, #24]
   209d0:	2b00      	cmp	r3, #0
   209d2:	db06      	blt.n	209e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   209d4:	4b28      	ldr	r3, [pc, #160]	; (20a78 <xTaskPriorityInherit+0xd0>)
   209d6:	681b      	ldr	r3, [r3, #0]
   209d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   209da:	2205      	movs	r2, #5
   209dc:	1ad2      	subs	r2, r2, r3
   209de:	68bb      	ldr	r3, [r7, #8]
   209e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   209e2:	68bb      	ldr	r3, [r7, #8]
   209e4:	6959      	ldr	r1, [r3, #20]
   209e6:	68bb      	ldr	r3, [r7, #8]
   209e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   209ea:	0013      	movs	r3, r2
   209ec:	009b      	lsls	r3, r3, #2
   209ee:	189b      	adds	r3, r3, r2
   209f0:	009b      	lsls	r3, r3, #2
   209f2:	4a22      	ldr	r2, [pc, #136]	; (20a7c <xTaskPriorityInherit+0xd4>)
   209f4:	189b      	adds	r3, r3, r2
   209f6:	4299      	cmp	r1, r3
   209f8:	d101      	bne.n	209fe <xTaskPriorityInherit+0x56>
   209fa:	2301      	movs	r3, #1
   209fc:	e000      	b.n	20a00 <xTaskPriorityInherit+0x58>
   209fe:	2300      	movs	r3, #0
   20a00:	2b00      	cmp	r3, #0
   20a02:	d022      	beq.n	20a4a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   20a04:	68bb      	ldr	r3, [r7, #8]
   20a06:	3304      	adds	r3, #4
   20a08:	0018      	movs	r0, r3
   20a0a:	4b1d      	ldr	r3, [pc, #116]	; (20a80 <xTaskPriorityInherit+0xd8>)
   20a0c:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   20a0e:	4b1a      	ldr	r3, [pc, #104]	; (20a78 <xTaskPriorityInherit+0xd0>)
   20a10:	681b      	ldr	r3, [r3, #0]
   20a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20a14:	68bb      	ldr	r3, [r7, #8]
   20a16:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   20a18:	68bb      	ldr	r3, [r7, #8]
   20a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20a1c:	4b19      	ldr	r3, [pc, #100]	; (20a84 <xTaskPriorityInherit+0xdc>)
   20a1e:	681b      	ldr	r3, [r3, #0]
   20a20:	429a      	cmp	r2, r3
   20a22:	d903      	bls.n	20a2c <xTaskPriorityInherit+0x84>
   20a24:	68bb      	ldr	r3, [r7, #8]
   20a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20a28:	4b16      	ldr	r3, [pc, #88]	; (20a84 <xTaskPriorityInherit+0xdc>)
   20a2a:	601a      	str	r2, [r3, #0]
   20a2c:	68bb      	ldr	r3, [r7, #8]
   20a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20a30:	0013      	movs	r3, r2
   20a32:	009b      	lsls	r3, r3, #2
   20a34:	189b      	adds	r3, r3, r2
   20a36:	009b      	lsls	r3, r3, #2
   20a38:	4a10      	ldr	r2, [pc, #64]	; (20a7c <xTaskPriorityInherit+0xd4>)
   20a3a:	189a      	adds	r2, r3, r2
   20a3c:	68bb      	ldr	r3, [r7, #8]
   20a3e:	3304      	adds	r3, #4
   20a40:	0019      	movs	r1, r3
   20a42:	0010      	movs	r0, r2
   20a44:	4b10      	ldr	r3, [pc, #64]	; (20a88 <xTaskPriorityInherit+0xe0>)
   20a46:	4798      	blx	r3
   20a48:	e004      	b.n	20a54 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   20a4a:	4b0b      	ldr	r3, [pc, #44]	; (20a78 <xTaskPriorityInherit+0xd0>)
   20a4c:	681b      	ldr	r3, [r3, #0]
   20a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20a50:	68bb      	ldr	r3, [r7, #8]
   20a52:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   20a54:	2301      	movs	r3, #1
   20a56:	60fb      	str	r3, [r7, #12]
   20a58:	e008      	b.n	20a6c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   20a5a:	68bb      	ldr	r3, [r7, #8]
   20a5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   20a5e:	4b06      	ldr	r3, [pc, #24]	; (20a78 <xTaskPriorityInherit+0xd0>)
   20a60:	681b      	ldr	r3, [r3, #0]
   20a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20a64:	429a      	cmp	r2, r3
   20a66:	d201      	bcs.n	20a6c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   20a68:	2301      	movs	r3, #1
   20a6a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   20a6c:	68fb      	ldr	r3, [r7, #12]
	}
   20a6e:	0018      	movs	r0, r3
   20a70:	46bd      	mov	sp, r7
   20a72:	b004      	add	sp, #16
   20a74:	bd80      	pop	{r7, pc}
   20a76:	46c0      	nop			; (mov r8, r8)
   20a78:	200002b8 	.word	0x200002b8
   20a7c:	200002bc 	.word	0x200002bc
   20a80:	0001f077 	.word	0x0001f077
   20a84:	20000398 	.word	0x20000398
   20a88:	0001efc7 	.word	0x0001efc7

00020a8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   20a8c:	b580      	push	{r7, lr}
   20a8e:	b084      	sub	sp, #16
   20a90:	af00      	add	r7, sp, #0
   20a92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   20a94:	687b      	ldr	r3, [r7, #4]
   20a96:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   20a98:	2300      	movs	r3, #0
   20a9a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   20a9c:	687b      	ldr	r3, [r7, #4]
   20a9e:	2b00      	cmp	r3, #0
   20aa0:	d044      	beq.n	20b2c <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   20aa2:	4b25      	ldr	r3, [pc, #148]	; (20b38 <xTaskPriorityDisinherit+0xac>)
   20aa4:	681b      	ldr	r3, [r3, #0]
   20aa6:	68ba      	ldr	r2, [r7, #8]
   20aa8:	429a      	cmp	r2, r3
   20aaa:	d001      	beq.n	20ab0 <xTaskPriorityDisinherit+0x24>
   20aac:	b672      	cpsid	i
   20aae:	e7fe      	b.n	20aae <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
   20ab0:	68bb      	ldr	r3, [r7, #8]
   20ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   20ab4:	2b00      	cmp	r3, #0
   20ab6:	d101      	bne.n	20abc <xTaskPriorityDisinherit+0x30>
   20ab8:	b672      	cpsid	i
   20aba:	e7fe      	b.n	20aba <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
   20abc:	68bb      	ldr	r3, [r7, #8]
   20abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   20ac0:	1e5a      	subs	r2, r3, #1
   20ac2:	68bb      	ldr	r3, [r7, #8]
   20ac4:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   20ac6:	68bb      	ldr	r3, [r7, #8]
   20ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20aca:	68bb      	ldr	r3, [r7, #8]
   20acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   20ace:	429a      	cmp	r2, r3
   20ad0:	d02c      	beq.n	20b2c <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   20ad2:	68bb      	ldr	r3, [r7, #8]
   20ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   20ad6:	2b00      	cmp	r3, #0
   20ad8:	d128      	bne.n	20b2c <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   20ada:	68bb      	ldr	r3, [r7, #8]
   20adc:	3304      	adds	r3, #4
   20ade:	0018      	movs	r0, r3
   20ae0:	4b16      	ldr	r3, [pc, #88]	; (20b3c <xTaskPriorityDisinherit+0xb0>)
   20ae2:	4798      	blx	r3
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   20ae4:	68bb      	ldr	r3, [r7, #8]
   20ae6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   20ae8:	68bb      	ldr	r3, [r7, #8]
   20aea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   20aec:	68bb      	ldr	r3, [r7, #8]
   20aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20af0:	2205      	movs	r2, #5
   20af2:	1ad2      	subs	r2, r2, r3
   20af4:	68bb      	ldr	r3, [r7, #8]
   20af6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   20af8:	68bb      	ldr	r3, [r7, #8]
   20afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20afc:	4b10      	ldr	r3, [pc, #64]	; (20b40 <xTaskPriorityDisinherit+0xb4>)
   20afe:	681b      	ldr	r3, [r3, #0]
   20b00:	429a      	cmp	r2, r3
   20b02:	d903      	bls.n	20b0c <xTaskPriorityDisinherit+0x80>
   20b04:	68bb      	ldr	r3, [r7, #8]
   20b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20b08:	4b0d      	ldr	r3, [pc, #52]	; (20b40 <xTaskPriorityDisinherit+0xb4>)
   20b0a:	601a      	str	r2, [r3, #0]
   20b0c:	68bb      	ldr	r3, [r7, #8]
   20b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20b10:	0013      	movs	r3, r2
   20b12:	009b      	lsls	r3, r3, #2
   20b14:	189b      	adds	r3, r3, r2
   20b16:	009b      	lsls	r3, r3, #2
   20b18:	4a0a      	ldr	r2, [pc, #40]	; (20b44 <xTaskPriorityDisinherit+0xb8>)
   20b1a:	189a      	adds	r2, r3, r2
   20b1c:	68bb      	ldr	r3, [r7, #8]
   20b1e:	3304      	adds	r3, #4
   20b20:	0019      	movs	r1, r3
   20b22:	0010      	movs	r0, r2
   20b24:	4b08      	ldr	r3, [pc, #32]	; (20b48 <xTaskPriorityDisinherit+0xbc>)
   20b26:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   20b28:	2301      	movs	r3, #1
   20b2a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   20b2c:	68fb      	ldr	r3, [r7, #12]
	}
   20b2e:	0018      	movs	r0, r3
   20b30:	46bd      	mov	sp, r7
   20b32:	b004      	add	sp, #16
   20b34:	bd80      	pop	{r7, pc}
   20b36:	46c0      	nop			; (mov r8, r8)
   20b38:	200002b8 	.word	0x200002b8
   20b3c:	0001f077 	.word	0x0001f077
   20b40:	20000398 	.word	0x20000398
   20b44:	200002bc 	.word	0x200002bc
   20b48:	0001efc7 	.word	0x0001efc7

00020b4c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   20b4c:	b580      	push	{r7, lr}
   20b4e:	b086      	sub	sp, #24
   20b50:	af00      	add	r7, sp, #0
   20b52:	6078      	str	r0, [r7, #4]
   20b54:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   20b56:	687b      	ldr	r3, [r7, #4]
   20b58:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   20b5a:	2301      	movs	r3, #1
   20b5c:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   20b5e:	687b      	ldr	r3, [r7, #4]
   20b60:	2b00      	cmp	r3, #0
   20b62:	d05d      	beq.n	20c20 <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   20b64:	693b      	ldr	r3, [r7, #16]
   20b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   20b68:	2b00      	cmp	r3, #0
   20b6a:	d101      	bne.n	20b70 <vTaskPriorityDisinheritAfterTimeout+0x24>
   20b6c:	b672      	cpsid	i
   20b6e:	e7fe      	b.n	20b6e <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   20b70:	693b      	ldr	r3, [r7, #16]
   20b72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   20b74:	683b      	ldr	r3, [r7, #0]
   20b76:	429a      	cmp	r2, r3
   20b78:	d202      	bcs.n	20b80 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   20b7a:	683b      	ldr	r3, [r7, #0]
   20b7c:	617b      	str	r3, [r7, #20]
   20b7e:	e002      	b.n	20b86 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   20b80:	693b      	ldr	r3, [r7, #16]
   20b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   20b84:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   20b86:	693b      	ldr	r3, [r7, #16]
   20b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20b8a:	697b      	ldr	r3, [r7, #20]
   20b8c:	429a      	cmp	r2, r3
   20b8e:	d047      	beq.n	20c20 <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   20b90:	693b      	ldr	r3, [r7, #16]
   20b92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   20b94:	68fb      	ldr	r3, [r7, #12]
   20b96:	429a      	cmp	r2, r3
   20b98:	d142      	bne.n	20c20 <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   20b9a:	4b23      	ldr	r3, [pc, #140]	; (20c28 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
   20b9c:	681b      	ldr	r3, [r3, #0]
   20b9e:	693a      	ldr	r2, [r7, #16]
   20ba0:	429a      	cmp	r2, r3
   20ba2:	d101      	bne.n	20ba8 <vTaskPriorityDisinheritAfterTimeout+0x5c>
   20ba4:	b672      	cpsid	i
   20ba6:	e7fe      	b.n	20ba6 <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   20ba8:	693b      	ldr	r3, [r7, #16]
   20baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20bac:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   20bae:	693b      	ldr	r3, [r7, #16]
   20bb0:	697a      	ldr	r2, [r7, #20]
   20bb2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   20bb4:	693b      	ldr	r3, [r7, #16]
   20bb6:	699b      	ldr	r3, [r3, #24]
   20bb8:	2b00      	cmp	r3, #0
   20bba:	db04      	blt.n	20bc6 <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   20bbc:	697b      	ldr	r3, [r7, #20]
   20bbe:	2205      	movs	r2, #5
   20bc0:	1ad2      	subs	r2, r2, r3
   20bc2:	693b      	ldr	r3, [r7, #16]
   20bc4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   20bc6:	693b      	ldr	r3, [r7, #16]
   20bc8:	6959      	ldr	r1, [r3, #20]
   20bca:	68ba      	ldr	r2, [r7, #8]
   20bcc:	0013      	movs	r3, r2
   20bce:	009b      	lsls	r3, r3, #2
   20bd0:	189b      	adds	r3, r3, r2
   20bd2:	009b      	lsls	r3, r3, #2
   20bd4:	4a15      	ldr	r2, [pc, #84]	; (20c2c <vTaskPriorityDisinheritAfterTimeout+0xe0>)
   20bd6:	189b      	adds	r3, r3, r2
   20bd8:	4299      	cmp	r1, r3
   20bda:	d101      	bne.n	20be0 <vTaskPriorityDisinheritAfterTimeout+0x94>
   20bdc:	2301      	movs	r3, #1
   20bde:	e000      	b.n	20be2 <vTaskPriorityDisinheritAfterTimeout+0x96>
   20be0:	2300      	movs	r3, #0
   20be2:	2b00      	cmp	r3, #0
   20be4:	d01c      	beq.n	20c20 <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   20be6:	693b      	ldr	r3, [r7, #16]
   20be8:	3304      	adds	r3, #4
   20bea:	0018      	movs	r0, r3
   20bec:	4b10      	ldr	r3, [pc, #64]	; (20c30 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
   20bee:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   20bf0:	693b      	ldr	r3, [r7, #16]
   20bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20bf4:	4b0f      	ldr	r3, [pc, #60]	; (20c34 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
   20bf6:	681b      	ldr	r3, [r3, #0]
   20bf8:	429a      	cmp	r2, r3
   20bfa:	d903      	bls.n	20c04 <vTaskPriorityDisinheritAfterTimeout+0xb8>
   20bfc:	693b      	ldr	r3, [r7, #16]
   20bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20c00:	4b0c      	ldr	r3, [pc, #48]	; (20c34 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
   20c02:	601a      	str	r2, [r3, #0]
   20c04:	693b      	ldr	r3, [r7, #16]
   20c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20c08:	0013      	movs	r3, r2
   20c0a:	009b      	lsls	r3, r3, #2
   20c0c:	189b      	adds	r3, r3, r2
   20c0e:	009b      	lsls	r3, r3, #2
   20c10:	4a06      	ldr	r2, [pc, #24]	; (20c2c <vTaskPriorityDisinheritAfterTimeout+0xe0>)
   20c12:	189a      	adds	r2, r3, r2
   20c14:	693b      	ldr	r3, [r7, #16]
   20c16:	3304      	adds	r3, #4
   20c18:	0019      	movs	r1, r3
   20c1a:	0010      	movs	r0, r2
   20c1c:	4b06      	ldr	r3, [pc, #24]	; (20c38 <vTaskPriorityDisinheritAfterTimeout+0xec>)
   20c1e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   20c20:	46c0      	nop			; (mov r8, r8)
   20c22:	46bd      	mov	sp, r7
   20c24:	b006      	add	sp, #24
   20c26:	bd80      	pop	{r7, pc}
   20c28:	200002b8 	.word	0x200002b8
   20c2c:	200002bc 	.word	0x200002bc
   20c30:	0001f077 	.word	0x0001f077
   20c34:	20000398 	.word	0x20000398
   20c38:	0001efc7 	.word	0x0001efc7

00020c3c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   20c3c:	b580      	push	{r7, lr}
   20c3e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   20c40:	4b06      	ldr	r3, [pc, #24]	; (20c5c <pvTaskIncrementMutexHeldCount+0x20>)
   20c42:	681b      	ldr	r3, [r3, #0]
   20c44:	2b00      	cmp	r3, #0
   20c46:	d004      	beq.n	20c52 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   20c48:	4b04      	ldr	r3, [pc, #16]	; (20c5c <pvTaskIncrementMutexHeldCount+0x20>)
   20c4a:	681b      	ldr	r3, [r3, #0]
   20c4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   20c4e:	3201      	adds	r2, #1
   20c50:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
   20c52:	4b02      	ldr	r3, [pc, #8]	; (20c5c <pvTaskIncrementMutexHeldCount+0x20>)
   20c54:	681b      	ldr	r3, [r3, #0]
	}
   20c56:	0018      	movs	r0, r3
   20c58:	46bd      	mov	sp, r7
   20c5a:	bd80      	pop	{r7, pc}
   20c5c:	200002b8 	.word	0x200002b8

00020c60 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
   20c60:	b580      	push	{r7, lr}
   20c62:	b084      	sub	sp, #16
   20c64:	af00      	add	r7, sp, #0
   20c66:	6078      	str	r0, [r7, #4]
   20c68:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
   20c6a:	4b1d      	ldr	r3, [pc, #116]	; (20ce0 <ulTaskNotifyTake+0x80>)
   20c6c:	4798      	blx	r3
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
   20c6e:	4b1d      	ldr	r3, [pc, #116]	; (20ce4 <ulTaskNotifyTake+0x84>)
   20c70:	681b      	ldr	r3, [r3, #0]
   20c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   20c74:	2b00      	cmp	r3, #0
   20c76:	d10e      	bne.n	20c96 <ulTaskNotifyTake+0x36>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
   20c78:	4b1a      	ldr	r3, [pc, #104]	; (20ce4 <ulTaskNotifyTake+0x84>)
   20c7a:	681b      	ldr	r3, [r3, #0]
   20c7c:	224c      	movs	r2, #76	; 0x4c
   20c7e:	2101      	movs	r1, #1
   20c80:	5499      	strb	r1, [r3, r2]

				if( xTicksToWait > ( TickType_t ) 0 )
   20c82:	683b      	ldr	r3, [r7, #0]
   20c84:	2b00      	cmp	r3, #0
   20c86:	d006      	beq.n	20c96 <ulTaskNotifyTake+0x36>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   20c88:	683b      	ldr	r3, [r7, #0]
   20c8a:	2101      	movs	r1, #1
   20c8c:	0018      	movs	r0, r3
   20c8e:	4b16      	ldr	r3, [pc, #88]	; (20ce8 <ulTaskNotifyTake+0x88>)
   20c90:	4798      	blx	r3

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
   20c92:	4b16      	ldr	r3, [pc, #88]	; (20cec <ulTaskNotifyTake+0x8c>)
   20c94:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
   20c96:	4b16      	ldr	r3, [pc, #88]	; (20cf0 <ulTaskNotifyTake+0x90>)
   20c98:	4798      	blx	r3

		taskENTER_CRITICAL();
   20c9a:	4b11      	ldr	r3, [pc, #68]	; (20ce0 <ulTaskNotifyTake+0x80>)
   20c9c:	4798      	blx	r3
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
   20c9e:	4b11      	ldr	r3, [pc, #68]	; (20ce4 <ulTaskNotifyTake+0x84>)
   20ca0:	681b      	ldr	r3, [r3, #0]
   20ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   20ca4:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
   20ca6:	68fb      	ldr	r3, [r7, #12]
   20ca8:	2b00      	cmp	r3, #0
   20caa:	d00c      	beq.n	20cc6 <ulTaskNotifyTake+0x66>
			{
				if( xClearCountOnExit != pdFALSE )
   20cac:	687b      	ldr	r3, [r7, #4]
   20cae:	2b00      	cmp	r3, #0
   20cb0:	d004      	beq.n	20cbc <ulTaskNotifyTake+0x5c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
   20cb2:	4b0c      	ldr	r3, [pc, #48]	; (20ce4 <ulTaskNotifyTake+0x84>)
   20cb4:	681b      	ldr	r3, [r3, #0]
   20cb6:	2200      	movs	r2, #0
   20cb8:	649a      	str	r2, [r3, #72]	; 0x48
   20cba:	e004      	b.n	20cc6 <ulTaskNotifyTake+0x66>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
   20cbc:	4b09      	ldr	r3, [pc, #36]	; (20ce4 <ulTaskNotifyTake+0x84>)
   20cbe:	681b      	ldr	r3, [r3, #0]
   20cc0:	68fa      	ldr	r2, [r7, #12]
   20cc2:	3a01      	subs	r2, #1
   20cc4:	649a      	str	r2, [r3, #72]	; 0x48
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   20cc6:	4b07      	ldr	r3, [pc, #28]	; (20ce4 <ulTaskNotifyTake+0x84>)
   20cc8:	681b      	ldr	r3, [r3, #0]
   20cca:	224c      	movs	r2, #76	; 0x4c
   20ccc:	2100      	movs	r1, #0
   20cce:	5499      	strb	r1, [r3, r2]
		}
		taskEXIT_CRITICAL();
   20cd0:	4b07      	ldr	r3, [pc, #28]	; (20cf0 <ulTaskNotifyTake+0x90>)
   20cd2:	4798      	blx	r3

		return ulReturn;
   20cd4:	68fb      	ldr	r3, [r7, #12]
	}
   20cd6:	0018      	movs	r0, r3
   20cd8:	46bd      	mov	sp, r7
   20cda:	b004      	add	sp, #16
   20cdc:	bd80      	pop	{r7, pc}
   20cde:	46c0      	nop			; (mov r8, r8)
   20ce0:	0001edd1 	.word	0x0001edd1
   20ce4:	200002b8 	.word	0x200002b8
   20ce8:	00020df9 	.word	0x00020df9
   20cec:	0001edb1 	.word	0x0001edb1
   20cf0:	0001edf5 	.word	0x0001edf5

00020cf4 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
   20cf4:	b580      	push	{r7, lr}
   20cf6:	b086      	sub	sp, #24
   20cf8:	af00      	add	r7, sp, #0
   20cfa:	6078      	str	r0, [r7, #4]
   20cfc:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
   20cfe:	687b      	ldr	r3, [r7, #4]
   20d00:	2b00      	cmp	r3, #0
   20d02:	d101      	bne.n	20d08 <vTaskNotifyGiveFromISR+0x14>
   20d04:	b672      	cpsid	i
   20d06:	e7fe      	b.n	20d06 <vTaskNotifyGiveFromISR+0x12>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
   20d08:	687b      	ldr	r3, [r7, #4]
   20d0a:	617b      	str	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   20d0c:	4b30      	ldr	r3, [pc, #192]	; (20dd0 <vTaskNotifyGiveFromISR+0xdc>)
   20d0e:	4798      	blx	r3
   20d10:	0003      	movs	r3, r0
   20d12:	613b      	str	r3, [r7, #16]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
   20d14:	230f      	movs	r3, #15
   20d16:	18fb      	adds	r3, r7, r3
   20d18:	697a      	ldr	r2, [r7, #20]
   20d1a:	214c      	movs	r1, #76	; 0x4c
   20d1c:	5c52      	ldrb	r2, [r2, r1]
   20d1e:	701a      	strb	r2, [r3, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
   20d20:	697b      	ldr	r3, [r7, #20]
   20d22:	224c      	movs	r2, #76	; 0x4c
   20d24:	2102      	movs	r1, #2
   20d26:	5499      	strb	r1, [r3, r2]

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
   20d28:	697b      	ldr	r3, [r7, #20]
   20d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   20d2c:	1c5a      	adds	r2, r3, #1
   20d2e:	697b      	ldr	r3, [r7, #20]
   20d30:	649a      	str	r2, [r3, #72]	; 0x48

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
   20d32:	230f      	movs	r3, #15
   20d34:	18fb      	adds	r3, r7, r3
   20d36:	781b      	ldrb	r3, [r3, #0]
   20d38:	2b01      	cmp	r3, #1
   20d3a:	d140      	bne.n	20dbe <vTaskNotifyGiveFromISR+0xca>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
   20d3c:	697b      	ldr	r3, [r7, #20]
   20d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20d40:	2b00      	cmp	r3, #0
   20d42:	d001      	beq.n	20d48 <vTaskNotifyGiveFromISR+0x54>
   20d44:	b672      	cpsid	i
   20d46:	e7fe      	b.n	20d46 <vTaskNotifyGiveFromISR+0x52>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   20d48:	4b22      	ldr	r3, [pc, #136]	; (20dd4 <vTaskNotifyGiveFromISR+0xe0>)
   20d4a:	681b      	ldr	r3, [r3, #0]
   20d4c:	2b00      	cmp	r3, #0
   20d4e:	d11d      	bne.n	20d8c <vTaskNotifyGiveFromISR+0x98>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   20d50:	697b      	ldr	r3, [r7, #20]
   20d52:	3304      	adds	r3, #4
   20d54:	0018      	movs	r0, r3
   20d56:	4b20      	ldr	r3, [pc, #128]	; (20dd8 <vTaskNotifyGiveFromISR+0xe4>)
   20d58:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   20d5a:	697b      	ldr	r3, [r7, #20]
   20d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20d5e:	4b1f      	ldr	r3, [pc, #124]	; (20ddc <vTaskNotifyGiveFromISR+0xe8>)
   20d60:	681b      	ldr	r3, [r3, #0]
   20d62:	429a      	cmp	r2, r3
   20d64:	d903      	bls.n	20d6e <vTaskNotifyGiveFromISR+0x7a>
   20d66:	697b      	ldr	r3, [r7, #20]
   20d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20d6a:	4b1c      	ldr	r3, [pc, #112]	; (20ddc <vTaskNotifyGiveFromISR+0xe8>)
   20d6c:	601a      	str	r2, [r3, #0]
   20d6e:	697b      	ldr	r3, [r7, #20]
   20d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20d72:	0013      	movs	r3, r2
   20d74:	009b      	lsls	r3, r3, #2
   20d76:	189b      	adds	r3, r3, r2
   20d78:	009b      	lsls	r3, r3, #2
   20d7a:	4a19      	ldr	r2, [pc, #100]	; (20de0 <vTaskNotifyGiveFromISR+0xec>)
   20d7c:	189a      	adds	r2, r3, r2
   20d7e:	697b      	ldr	r3, [r7, #20]
   20d80:	3304      	adds	r3, #4
   20d82:	0019      	movs	r1, r3
   20d84:	0010      	movs	r0, r2
   20d86:	4b17      	ldr	r3, [pc, #92]	; (20de4 <vTaskNotifyGiveFromISR+0xf0>)
   20d88:	4798      	blx	r3
   20d8a:	e007      	b.n	20d9c <vTaskNotifyGiveFromISR+0xa8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
   20d8c:	697b      	ldr	r3, [r7, #20]
   20d8e:	3318      	adds	r3, #24
   20d90:	001a      	movs	r2, r3
   20d92:	4b15      	ldr	r3, [pc, #84]	; (20de8 <vTaskNotifyGiveFromISR+0xf4>)
   20d94:	0011      	movs	r1, r2
   20d96:	0018      	movs	r0, r3
   20d98:	4b12      	ldr	r3, [pc, #72]	; (20de4 <vTaskNotifyGiveFromISR+0xf0>)
   20d9a:	4798      	blx	r3
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
   20d9c:	697b      	ldr	r3, [r7, #20]
   20d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20da0:	4b12      	ldr	r3, [pc, #72]	; (20dec <vTaskNotifyGiveFromISR+0xf8>)
   20da2:	681b      	ldr	r3, [r3, #0]
   20da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20da6:	429a      	cmp	r2, r3
   20da8:	d909      	bls.n	20dbe <vTaskNotifyGiveFromISR+0xca>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
   20daa:	683b      	ldr	r3, [r7, #0]
   20dac:	2b00      	cmp	r3, #0
   20dae:	d003      	beq.n	20db8 <vTaskNotifyGiveFromISR+0xc4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
   20db0:	683b      	ldr	r3, [r7, #0]
   20db2:	2201      	movs	r2, #1
   20db4:	601a      	str	r2, [r3, #0]
   20db6:	e002      	b.n	20dbe <vTaskNotifyGiveFromISR+0xca>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
   20db8:	4b0d      	ldr	r3, [pc, #52]	; (20df0 <vTaskNotifyGiveFromISR+0xfc>)
   20dba:	2201      	movs	r2, #1
   20dbc:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   20dbe:	693b      	ldr	r3, [r7, #16]
   20dc0:	0018      	movs	r0, r3
   20dc2:	4b0c      	ldr	r3, [pc, #48]	; (20df4 <vTaskNotifyGiveFromISR+0x100>)
   20dc4:	4798      	blx	r3
	}
   20dc6:	46c0      	nop			; (mov r8, r8)
   20dc8:	46bd      	mov	sp, r7
   20dca:	b006      	add	sp, #24
   20dcc:	bd80      	pop	{r7, pc}
   20dce:	46c0      	nop			; (mov r8, r8)
   20dd0:	0001ee25 	.word	0x0001ee25
   20dd4:	200003b8 	.word	0x200003b8
   20dd8:	0001f077 	.word	0x0001f077
   20ddc:	20000398 	.word	0x20000398
   20de0:	200002bc 	.word	0x200002bc
   20de4:	0001efc7 	.word	0x0001efc7
   20de8:	20000350 	.word	0x20000350
   20dec:	200002b8 	.word	0x200002b8
   20df0:	200003a4 	.word	0x200003a4
   20df4:	0001ee31 	.word	0x0001ee31

00020df8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   20df8:	b580      	push	{r7, lr}
   20dfa:	b084      	sub	sp, #16
   20dfc:	af00      	add	r7, sp, #0
   20dfe:	6078      	str	r0, [r7, #4]
   20e00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   20e02:	4b21      	ldr	r3, [pc, #132]	; (20e88 <prvAddCurrentTaskToDelayedList+0x90>)
   20e04:	681b      	ldr	r3, [r3, #0]
   20e06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   20e08:	4b20      	ldr	r3, [pc, #128]	; (20e8c <prvAddCurrentTaskToDelayedList+0x94>)
   20e0a:	681b      	ldr	r3, [r3, #0]
   20e0c:	3304      	adds	r3, #4
   20e0e:	0018      	movs	r0, r3
   20e10:	4b1f      	ldr	r3, [pc, #124]	; (20e90 <prvAddCurrentTaskToDelayedList+0x98>)
   20e12:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   20e14:	687b      	ldr	r3, [r7, #4]
   20e16:	3301      	adds	r3, #1
   20e18:	d10b      	bne.n	20e32 <prvAddCurrentTaskToDelayedList+0x3a>
   20e1a:	683b      	ldr	r3, [r7, #0]
   20e1c:	2b00      	cmp	r3, #0
   20e1e:	d008      	beq.n	20e32 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   20e20:	4b1a      	ldr	r3, [pc, #104]	; (20e8c <prvAddCurrentTaskToDelayedList+0x94>)
   20e22:	681b      	ldr	r3, [r3, #0]
   20e24:	1d1a      	adds	r2, r3, #4
   20e26:	4b1b      	ldr	r3, [pc, #108]	; (20e94 <prvAddCurrentTaskToDelayedList+0x9c>)
   20e28:	0011      	movs	r1, r2
   20e2a:	0018      	movs	r0, r3
   20e2c:	4b1a      	ldr	r3, [pc, #104]	; (20e98 <prvAddCurrentTaskToDelayedList+0xa0>)
   20e2e:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   20e30:	e026      	b.n	20e80 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   20e32:	68fa      	ldr	r2, [r7, #12]
   20e34:	687b      	ldr	r3, [r7, #4]
   20e36:	18d3      	adds	r3, r2, r3
   20e38:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   20e3a:	4b14      	ldr	r3, [pc, #80]	; (20e8c <prvAddCurrentTaskToDelayedList+0x94>)
   20e3c:	681b      	ldr	r3, [r3, #0]
   20e3e:	68ba      	ldr	r2, [r7, #8]
   20e40:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   20e42:	68ba      	ldr	r2, [r7, #8]
   20e44:	68fb      	ldr	r3, [r7, #12]
   20e46:	429a      	cmp	r2, r3
   20e48:	d209      	bcs.n	20e5e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   20e4a:	4b14      	ldr	r3, [pc, #80]	; (20e9c <prvAddCurrentTaskToDelayedList+0xa4>)
   20e4c:	681a      	ldr	r2, [r3, #0]
   20e4e:	4b0f      	ldr	r3, [pc, #60]	; (20e8c <prvAddCurrentTaskToDelayedList+0x94>)
   20e50:	681b      	ldr	r3, [r3, #0]
   20e52:	3304      	adds	r3, #4
   20e54:	0019      	movs	r1, r3
   20e56:	0010      	movs	r0, r2
   20e58:	4b11      	ldr	r3, [pc, #68]	; (20ea0 <prvAddCurrentTaskToDelayedList+0xa8>)
   20e5a:	4798      	blx	r3
}
   20e5c:	e010      	b.n	20e80 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   20e5e:	4b11      	ldr	r3, [pc, #68]	; (20ea4 <prvAddCurrentTaskToDelayedList+0xac>)
   20e60:	681a      	ldr	r2, [r3, #0]
   20e62:	4b0a      	ldr	r3, [pc, #40]	; (20e8c <prvAddCurrentTaskToDelayedList+0x94>)
   20e64:	681b      	ldr	r3, [r3, #0]
   20e66:	3304      	adds	r3, #4
   20e68:	0019      	movs	r1, r3
   20e6a:	0010      	movs	r0, r2
   20e6c:	4b0c      	ldr	r3, [pc, #48]	; (20ea0 <prvAddCurrentTaskToDelayedList+0xa8>)
   20e6e:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   20e70:	4b0d      	ldr	r3, [pc, #52]	; (20ea8 <prvAddCurrentTaskToDelayedList+0xb0>)
   20e72:	681b      	ldr	r3, [r3, #0]
   20e74:	68ba      	ldr	r2, [r7, #8]
   20e76:	429a      	cmp	r2, r3
   20e78:	d202      	bcs.n	20e80 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   20e7a:	4b0b      	ldr	r3, [pc, #44]	; (20ea8 <prvAddCurrentTaskToDelayedList+0xb0>)
   20e7c:	68ba      	ldr	r2, [r7, #8]
   20e7e:	601a      	str	r2, [r3, #0]
}
   20e80:	46c0      	nop			; (mov r8, r8)
   20e82:	46bd      	mov	sp, r7
   20e84:	b004      	add	sp, #16
   20e86:	bd80      	pop	{r7, pc}
   20e88:	20000394 	.word	0x20000394
   20e8c:	200002b8 	.word	0x200002b8
   20e90:	0001f077 	.word	0x0001f077
   20e94:	2000037c 	.word	0x2000037c
   20e98:	0001efc7 	.word	0x0001efc7
   20e9c:	2000034c 	.word	0x2000034c
   20ea0:	0001f00b 	.word	0x0001f00b
   20ea4:	20000348 	.word	0x20000348
   20ea8:	200003b0 	.word	0x200003b0

00020eac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   20eac:	b590      	push	{r4, r7, lr}
   20eae:	b085      	sub	sp, #20
   20eb0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   20eb2:	2300      	movs	r3, #0
   20eb4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   20eb6:	4b0e      	ldr	r3, [pc, #56]	; (20ef0 <xTimerCreateTimerTask+0x44>)
   20eb8:	4798      	blx	r3

	if( xTimerQueue != NULL )
   20eba:	4b0e      	ldr	r3, [pc, #56]	; (20ef4 <xTimerCreateTimerTask+0x48>)
   20ebc:	681b      	ldr	r3, [r3, #0]
   20ebe:	2b00      	cmp	r3, #0
   20ec0:	d00c      	beq.n	20edc <xTimerCreateTimerTask+0x30>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   20ec2:	2382      	movs	r3, #130	; 0x82
   20ec4:	005a      	lsls	r2, r3, #1
   20ec6:	490c      	ldr	r1, [pc, #48]	; (20ef8 <xTimerCreateTimerTask+0x4c>)
   20ec8:	480c      	ldr	r0, [pc, #48]	; (20efc <xTimerCreateTimerTask+0x50>)
   20eca:	4b0d      	ldr	r3, [pc, #52]	; (20f00 <xTimerCreateTimerTask+0x54>)
   20ecc:	9301      	str	r3, [sp, #4]
   20ece:	2304      	movs	r3, #4
   20ed0:	9300      	str	r3, [sp, #0]
   20ed2:	2300      	movs	r3, #0
   20ed4:	4c0b      	ldr	r4, [pc, #44]	; (20f04 <xTimerCreateTimerTask+0x58>)
   20ed6:	47a0      	blx	r4
   20ed8:	0003      	movs	r3, r0
   20eda:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   20edc:	687b      	ldr	r3, [r7, #4]
   20ede:	2b00      	cmp	r3, #0
   20ee0:	d101      	bne.n	20ee6 <xTimerCreateTimerTask+0x3a>
   20ee2:	b672      	cpsid	i
   20ee4:	e7fe      	b.n	20ee4 <xTimerCreateTimerTask+0x38>
	return xReturn;
   20ee6:	687b      	ldr	r3, [r7, #4]
}
   20ee8:	0018      	movs	r0, r3
   20eea:	46bd      	mov	sp, r7
   20eec:	b003      	add	sp, #12
   20eee:	bd90      	pop	{r4, r7, pc}
   20ef0:	000214bd 	.word	0x000214bd
   20ef4:	200003ec 	.word	0x200003ec
   20ef8:	0002abe0 	.word	0x0002abe0
   20efc:	000210d1 	.word	0x000210d1
   20f00:	200003f0 	.word	0x200003f0
   20f04:	0001fca9 	.word	0x0001fca9

00020f08 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
   20f08:	b590      	push	{r4, r7, lr}
   20f0a:	b089      	sub	sp, #36	; 0x24
   20f0c:	af02      	add	r7, sp, #8
   20f0e:	60f8      	str	r0, [r7, #12]
   20f10:	60b9      	str	r1, [r7, #8]
   20f12:	607a      	str	r2, [r7, #4]
   20f14:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
   20f16:	2028      	movs	r0, #40	; 0x28
   20f18:	4b0b      	ldr	r3, [pc, #44]	; (20f48 <xTimerCreate+0x40>)
   20f1a:	4798      	blx	r3
   20f1c:	0003      	movs	r3, r0
   20f1e:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
   20f20:	697b      	ldr	r3, [r7, #20]
   20f22:	2b00      	cmp	r3, #0
   20f24:	d00a      	beq.n	20f3c <xTimerCreate+0x34>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
   20f26:	683c      	ldr	r4, [r7, #0]
   20f28:	687a      	ldr	r2, [r7, #4]
   20f2a:	68b9      	ldr	r1, [r7, #8]
   20f2c:	68f8      	ldr	r0, [r7, #12]
   20f2e:	697b      	ldr	r3, [r7, #20]
   20f30:	9301      	str	r3, [sp, #4]
   20f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
   20f34:	9300      	str	r3, [sp, #0]
   20f36:	0023      	movs	r3, r4
   20f38:	4c04      	ldr	r4, [pc, #16]	; (20f4c <xTimerCreate+0x44>)
   20f3a:	47a0      	blx	r4
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
   20f3c:	697b      	ldr	r3, [r7, #20]
	}
   20f3e:	0018      	movs	r0, r3
   20f40:	46bd      	mov	sp, r7
   20f42:	b007      	add	sp, #28
   20f44:	bd90      	pop	{r4, r7, pc}
   20f46:	46c0      	nop			; (mov r8, r8)
   20f48:	0001ef0d 	.word	0x0001ef0d
   20f4c:	00020f51 	.word	0x00020f51

00020f50 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
   20f50:	b580      	push	{r7, lr}
   20f52:	b084      	sub	sp, #16
   20f54:	af00      	add	r7, sp, #0
   20f56:	60f8      	str	r0, [r7, #12]
   20f58:	60b9      	str	r1, [r7, #8]
   20f5a:	607a      	str	r2, [r7, #4]
   20f5c:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
   20f5e:	68bb      	ldr	r3, [r7, #8]
   20f60:	2b00      	cmp	r3, #0
   20f62:	d101      	bne.n	20f68 <prvInitialiseNewTimer+0x18>
   20f64:	b672      	cpsid	i
   20f66:	e7fe      	b.n	20f66 <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
   20f68:	69fb      	ldr	r3, [r7, #28]
   20f6a:	2b00      	cmp	r3, #0
   20f6c:	d015      	beq.n	20f9a <prvInitialiseNewTimer+0x4a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
   20f6e:	4b0d      	ldr	r3, [pc, #52]	; (20fa4 <prvInitialiseNewTimer+0x54>)
   20f70:	4798      	blx	r3

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
   20f72:	69fb      	ldr	r3, [r7, #28]
   20f74:	68fa      	ldr	r2, [r7, #12]
   20f76:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
   20f78:	69fb      	ldr	r3, [r7, #28]
   20f7a:	68ba      	ldr	r2, [r7, #8]
   20f7c:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
   20f7e:	69fb      	ldr	r3, [r7, #28]
   20f80:	687a      	ldr	r2, [r7, #4]
   20f82:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
   20f84:	69fb      	ldr	r3, [r7, #28]
   20f86:	683a      	ldr	r2, [r7, #0]
   20f88:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
   20f8a:	69fb      	ldr	r3, [r7, #28]
   20f8c:	69ba      	ldr	r2, [r7, #24]
   20f8e:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
   20f90:	69fb      	ldr	r3, [r7, #28]
   20f92:	3304      	adds	r3, #4
   20f94:	0018      	movs	r0, r3
   20f96:	4b04      	ldr	r3, [pc, #16]	; (20fa8 <prvInitialiseNewTimer+0x58>)
   20f98:	4798      	blx	r3
		traceTIMER_CREATE( pxNewTimer );
	}
}
   20f9a:	46c0      	nop			; (mov r8, r8)
   20f9c:	46bd      	mov	sp, r7
   20f9e:	b004      	add	sp, #16
   20fa0:	bd80      	pop	{r7, pc}
   20fa2:	46c0      	nop			; (mov r8, r8)
   20fa4:	000214bd 	.word	0x000214bd
   20fa8:	0001efb1 	.word	0x0001efb1

00020fac <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   20fac:	b590      	push	{r4, r7, lr}
   20fae:	b08b      	sub	sp, #44	; 0x2c
   20fb0:	af00      	add	r7, sp, #0
   20fb2:	60f8      	str	r0, [r7, #12]
   20fb4:	60b9      	str	r1, [r7, #8]
   20fb6:	607a      	str	r2, [r7, #4]
   20fb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   20fba:	2300      	movs	r3, #0
   20fbc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   20fbe:	68fb      	ldr	r3, [r7, #12]
   20fc0:	2b00      	cmp	r3, #0
   20fc2:	d101      	bne.n	20fc8 <xTimerGenericCommand+0x1c>
   20fc4:	b672      	cpsid	i
   20fc6:	e7fe      	b.n	20fc6 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   20fc8:	4b1e      	ldr	r3, [pc, #120]	; (21044 <xTimerGenericCommand+0x98>)
   20fca:	681b      	ldr	r3, [r3, #0]
   20fcc:	2b00      	cmp	r3, #0
   20fce:	d033      	beq.n	21038 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   20fd0:	2314      	movs	r3, #20
   20fd2:	18fb      	adds	r3, r7, r3
   20fd4:	68ba      	ldr	r2, [r7, #8]
   20fd6:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   20fd8:	2314      	movs	r3, #20
   20fda:	18fb      	adds	r3, r7, r3
   20fdc:	687a      	ldr	r2, [r7, #4]
   20fde:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   20fe0:	2314      	movs	r3, #20
   20fe2:	18fb      	adds	r3, r7, r3
   20fe4:	68fa      	ldr	r2, [r7, #12]
   20fe6:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   20fe8:	68bb      	ldr	r3, [r7, #8]
   20fea:	2b05      	cmp	r3, #5
   20fec:	dc1a      	bgt.n	21024 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   20fee:	4b16      	ldr	r3, [pc, #88]	; (21048 <xTimerGenericCommand+0x9c>)
   20ff0:	4798      	blx	r3
   20ff2:	0003      	movs	r3, r0
   20ff4:	2b02      	cmp	r3, #2
   20ff6:	d10a      	bne.n	2100e <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   20ff8:	4b12      	ldr	r3, [pc, #72]	; (21044 <xTimerGenericCommand+0x98>)
   20ffa:	6818      	ldr	r0, [r3, #0]
   20ffc:	6bba      	ldr	r2, [r7, #56]	; 0x38
   20ffe:	2314      	movs	r3, #20
   21000:	18f9      	adds	r1, r7, r3
   21002:	2300      	movs	r3, #0
   21004:	4c11      	ldr	r4, [pc, #68]	; (2104c <xTimerGenericCommand+0xa0>)
   21006:	47a0      	blx	r4
   21008:	0003      	movs	r3, r0
   2100a:	627b      	str	r3, [r7, #36]	; 0x24
   2100c:	e014      	b.n	21038 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   2100e:	4b0d      	ldr	r3, [pc, #52]	; (21044 <xTimerGenericCommand+0x98>)
   21010:	6818      	ldr	r0, [r3, #0]
   21012:	2314      	movs	r3, #20
   21014:	18f9      	adds	r1, r7, r3
   21016:	2300      	movs	r3, #0
   21018:	2200      	movs	r2, #0
   2101a:	4c0c      	ldr	r4, [pc, #48]	; (2104c <xTimerGenericCommand+0xa0>)
   2101c:	47a0      	blx	r4
   2101e:	0003      	movs	r3, r0
   21020:	627b      	str	r3, [r7, #36]	; 0x24
   21022:	e009      	b.n	21038 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   21024:	4b07      	ldr	r3, [pc, #28]	; (21044 <xTimerGenericCommand+0x98>)
   21026:	6818      	ldr	r0, [r3, #0]
   21028:	683a      	ldr	r2, [r7, #0]
   2102a:	2314      	movs	r3, #20
   2102c:	18f9      	adds	r1, r7, r3
   2102e:	2300      	movs	r3, #0
   21030:	4c07      	ldr	r4, [pc, #28]	; (21050 <xTimerGenericCommand+0xa4>)
   21032:	47a0      	blx	r4
   21034:	0003      	movs	r3, r0
   21036:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   21038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2103a:	0018      	movs	r0, r3
   2103c:	46bd      	mov	sp, r7
   2103e:	b00b      	add	sp, #44	; 0x2c
   21040:	bd90      	pop	{r4, r7, pc}
   21042:	46c0      	nop			; (mov r8, r8)
   21044:	200003ec 	.word	0x200003ec
   21048:	00020971 	.word	0x00020971
   2104c:	0001f241 	.word	0x0001f241
   21050:	0001f421 	.word	0x0001f421

00021054 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   21054:	b590      	push	{r4, r7, lr}
   21056:	b087      	sub	sp, #28
   21058:	af02      	add	r7, sp, #8
   2105a:	6078      	str	r0, [r7, #4]
   2105c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   2105e:	4b18      	ldr	r3, [pc, #96]	; (210c0 <prvProcessExpiredTimer+0x6c>)
   21060:	681b      	ldr	r3, [r3, #0]
   21062:	68db      	ldr	r3, [r3, #12]
   21064:	68db      	ldr	r3, [r3, #12]
   21066:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   21068:	68fb      	ldr	r3, [r7, #12]
   2106a:	3304      	adds	r3, #4
   2106c:	0018      	movs	r0, r3
   2106e:	4b15      	ldr	r3, [pc, #84]	; (210c4 <prvProcessExpiredTimer+0x70>)
   21070:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   21072:	68fb      	ldr	r3, [r7, #12]
   21074:	69db      	ldr	r3, [r3, #28]
   21076:	2b01      	cmp	r3, #1
   21078:	d119      	bne.n	210ae <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   2107a:	68fb      	ldr	r3, [r7, #12]
   2107c:	699a      	ldr	r2, [r3, #24]
   2107e:	687b      	ldr	r3, [r7, #4]
   21080:	18d1      	adds	r1, r2, r3
   21082:	687b      	ldr	r3, [r7, #4]
   21084:	683a      	ldr	r2, [r7, #0]
   21086:	68f8      	ldr	r0, [r7, #12]
   21088:	4c0f      	ldr	r4, [pc, #60]	; (210c8 <prvProcessExpiredTimer+0x74>)
   2108a:	47a0      	blx	r4
   2108c:	1e03      	subs	r3, r0, #0
   2108e:	d00e      	beq.n	210ae <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   21090:	687a      	ldr	r2, [r7, #4]
   21092:	68f8      	ldr	r0, [r7, #12]
   21094:	2300      	movs	r3, #0
   21096:	9300      	str	r3, [sp, #0]
   21098:	2300      	movs	r3, #0
   2109a:	2100      	movs	r1, #0
   2109c:	4c0b      	ldr	r4, [pc, #44]	; (210cc <prvProcessExpiredTimer+0x78>)
   2109e:	47a0      	blx	r4
   210a0:	0003      	movs	r3, r0
   210a2:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   210a4:	68bb      	ldr	r3, [r7, #8]
   210a6:	2b00      	cmp	r3, #0
   210a8:	d101      	bne.n	210ae <prvProcessExpiredTimer+0x5a>
   210aa:	b672      	cpsid	i
   210ac:	e7fe      	b.n	210ac <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   210ae:	68fb      	ldr	r3, [r7, #12]
   210b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   210b2:	68fa      	ldr	r2, [r7, #12]
   210b4:	0010      	movs	r0, r2
   210b6:	4798      	blx	r3
}
   210b8:	46c0      	nop			; (mov r8, r8)
   210ba:	46bd      	mov	sp, r7
   210bc:	b005      	add	sp, #20
   210be:	bd90      	pop	{r4, r7, pc}
   210c0:	200003e4 	.word	0x200003e4
   210c4:	0001f077 	.word	0x0001f077
   210c8:	00021231 	.word	0x00021231
   210cc:	00020fad 	.word	0x00020fad

000210d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   210d0:	b580      	push	{r7, lr}
   210d2:	b084      	sub	sp, #16
   210d4:	af00      	add	r7, sp, #0
   210d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   210d8:	2308      	movs	r3, #8
   210da:	18fb      	adds	r3, r7, r3
   210dc:	0018      	movs	r0, r3
   210de:	4b06      	ldr	r3, [pc, #24]	; (210f8 <prvTimerTask+0x28>)
   210e0:	4798      	blx	r3
   210e2:	0003      	movs	r3, r0
   210e4:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   210e6:	68ba      	ldr	r2, [r7, #8]
   210e8:	68fb      	ldr	r3, [r7, #12]
   210ea:	0011      	movs	r1, r2
   210ec:	0018      	movs	r0, r3
   210ee:	4b03      	ldr	r3, [pc, #12]	; (210fc <prvTimerTask+0x2c>)
   210f0:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   210f2:	4b03      	ldr	r3, [pc, #12]	; (21100 <prvTimerTask+0x30>)
   210f4:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   210f6:	e7ef      	b.n	210d8 <prvTimerTask+0x8>
   210f8:	000211a9 	.word	0x000211a9
   210fc:	00021105 	.word	0x00021105
   21100:	000212b9 	.word	0x000212b9

00021104 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   21104:	b580      	push	{r7, lr}
   21106:	b084      	sub	sp, #16
   21108:	af00      	add	r7, sp, #0
   2110a:	6078      	str	r0, [r7, #4]
   2110c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   2110e:	4b1e      	ldr	r3, [pc, #120]	; (21188 <prvProcessTimerOrBlockTask+0x84>)
   21110:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   21112:	2308      	movs	r3, #8
   21114:	18fb      	adds	r3, r7, r3
   21116:	0018      	movs	r0, r3
   21118:	4b1c      	ldr	r3, [pc, #112]	; (2118c <prvProcessTimerOrBlockTask+0x88>)
   2111a:	4798      	blx	r3
   2111c:	0003      	movs	r3, r0
   2111e:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   21120:	68bb      	ldr	r3, [r7, #8]
   21122:	2b00      	cmp	r3, #0
   21124:	d129      	bne.n	2117a <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   21126:	683b      	ldr	r3, [r7, #0]
   21128:	2b00      	cmp	r3, #0
   2112a:	d10c      	bne.n	21146 <prvProcessTimerOrBlockTask+0x42>
   2112c:	687a      	ldr	r2, [r7, #4]
   2112e:	68fb      	ldr	r3, [r7, #12]
   21130:	429a      	cmp	r2, r3
   21132:	d808      	bhi.n	21146 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   21134:	4b16      	ldr	r3, [pc, #88]	; (21190 <prvProcessTimerOrBlockTask+0x8c>)
   21136:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   21138:	68fa      	ldr	r2, [r7, #12]
   2113a:	687b      	ldr	r3, [r7, #4]
   2113c:	0011      	movs	r1, r2
   2113e:	0018      	movs	r0, r3
   21140:	4b14      	ldr	r3, [pc, #80]	; (21194 <prvProcessTimerOrBlockTask+0x90>)
   21142:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   21144:	e01b      	b.n	2117e <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   21146:	683b      	ldr	r3, [r7, #0]
   21148:	2b00      	cmp	r3, #0
   2114a:	d006      	beq.n	2115a <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   2114c:	4b12      	ldr	r3, [pc, #72]	; (21198 <prvProcessTimerOrBlockTask+0x94>)
   2114e:	681b      	ldr	r3, [r3, #0]
   21150:	681b      	ldr	r3, [r3, #0]
   21152:	425a      	negs	r2, r3
   21154:	4153      	adcs	r3, r2
   21156:	b2db      	uxtb	r3, r3
   21158:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   2115a:	4b10      	ldr	r3, [pc, #64]	; (2119c <prvProcessTimerOrBlockTask+0x98>)
   2115c:	6818      	ldr	r0, [r3, #0]
   2115e:	687a      	ldr	r2, [r7, #4]
   21160:	68fb      	ldr	r3, [r7, #12]
   21162:	1ad3      	subs	r3, r2, r3
   21164:	683a      	ldr	r2, [r7, #0]
   21166:	0019      	movs	r1, r3
   21168:	4b0d      	ldr	r3, [pc, #52]	; (211a0 <prvProcessTimerOrBlockTask+0x9c>)
   2116a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   2116c:	4b08      	ldr	r3, [pc, #32]	; (21190 <prvProcessTimerOrBlockTask+0x8c>)
   2116e:	4798      	blx	r3
   21170:	1e03      	subs	r3, r0, #0
   21172:	d104      	bne.n	2117e <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   21174:	4b0b      	ldr	r3, [pc, #44]	; (211a4 <prvProcessTimerOrBlockTask+0xa0>)
   21176:	4798      	blx	r3
}
   21178:	e001      	b.n	2117e <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   2117a:	4b05      	ldr	r3, [pc, #20]	; (21190 <prvProcessTimerOrBlockTask+0x8c>)
   2117c:	4798      	blx	r3
}
   2117e:	46c0      	nop			; (mov r8, r8)
   21180:	46bd      	mov	sp, r7
   21182:	b004      	add	sp, #16
   21184:	bd80      	pop	{r7, pc}
   21186:	46c0      	nop			; (mov r8, r8)
   21188:	00020201 	.word	0x00020201
   2118c:	000211e9 	.word	0x000211e9
   21190:	00020219 	.word	0x00020219
   21194:	00021055 	.word	0x00021055
   21198:	200003e8 	.word	0x200003e8
   2119c:	200003ec 	.word	0x200003ec
   211a0:	0001fb8d 	.word	0x0001fb8d
   211a4:	0001edb1 	.word	0x0001edb1

000211a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   211a8:	b580      	push	{r7, lr}
   211aa:	b084      	sub	sp, #16
   211ac:	af00      	add	r7, sp, #0
   211ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   211b0:	4b0c      	ldr	r3, [pc, #48]	; (211e4 <prvGetNextExpireTime+0x3c>)
   211b2:	681b      	ldr	r3, [r3, #0]
   211b4:	681b      	ldr	r3, [r3, #0]
   211b6:	425a      	negs	r2, r3
   211b8:	4153      	adcs	r3, r2
   211ba:	b2db      	uxtb	r3, r3
   211bc:	001a      	movs	r2, r3
   211be:	687b      	ldr	r3, [r7, #4]
   211c0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   211c2:	687b      	ldr	r3, [r7, #4]
   211c4:	681b      	ldr	r3, [r3, #0]
   211c6:	2b00      	cmp	r3, #0
   211c8:	d105      	bne.n	211d6 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   211ca:	4b06      	ldr	r3, [pc, #24]	; (211e4 <prvGetNextExpireTime+0x3c>)
   211cc:	681b      	ldr	r3, [r3, #0]
   211ce:	68db      	ldr	r3, [r3, #12]
   211d0:	681b      	ldr	r3, [r3, #0]
   211d2:	60fb      	str	r3, [r7, #12]
   211d4:	e001      	b.n	211da <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   211d6:	2300      	movs	r3, #0
   211d8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   211da:	68fb      	ldr	r3, [r7, #12]
}
   211dc:	0018      	movs	r0, r3
   211de:	46bd      	mov	sp, r7
   211e0:	b004      	add	sp, #16
   211e2:	bd80      	pop	{r7, pc}
   211e4:	200003e4 	.word	0x200003e4

000211e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   211e8:	b580      	push	{r7, lr}
   211ea:	b084      	sub	sp, #16
   211ec:	af00      	add	r7, sp, #0
   211ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   211f0:	4b0c      	ldr	r3, [pc, #48]	; (21224 <prvSampleTimeNow+0x3c>)
   211f2:	4798      	blx	r3
   211f4:	0003      	movs	r3, r0
   211f6:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   211f8:	4b0b      	ldr	r3, [pc, #44]	; (21228 <prvSampleTimeNow+0x40>)
   211fa:	681b      	ldr	r3, [r3, #0]
   211fc:	68fa      	ldr	r2, [r7, #12]
   211fe:	429a      	cmp	r2, r3
   21200:	d205      	bcs.n	2120e <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   21202:	4b0a      	ldr	r3, [pc, #40]	; (2122c <prvSampleTimeNow+0x44>)
   21204:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   21206:	687b      	ldr	r3, [r7, #4]
   21208:	2201      	movs	r2, #1
   2120a:	601a      	str	r2, [r3, #0]
   2120c:	e002      	b.n	21214 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   2120e:	687b      	ldr	r3, [r7, #4]
   21210:	2200      	movs	r2, #0
   21212:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   21214:	4b04      	ldr	r3, [pc, #16]	; (21228 <prvSampleTimeNow+0x40>)
   21216:	68fa      	ldr	r2, [r7, #12]
   21218:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   2121a:	68fb      	ldr	r3, [r7, #12]
}
   2121c:	0018      	movs	r0, r3
   2121e:	46bd      	mov	sp, r7
   21220:	b004      	add	sp, #16
   21222:	bd80      	pop	{r7, pc}
   21224:	0002034d 	.word	0x0002034d
   21228:	200003f4 	.word	0x200003f4
   2122c:	000213fd 	.word	0x000213fd

00021230 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   21230:	b580      	push	{r7, lr}
   21232:	b086      	sub	sp, #24
   21234:	af00      	add	r7, sp, #0
   21236:	60f8      	str	r0, [r7, #12]
   21238:	60b9      	str	r1, [r7, #8]
   2123a:	607a      	str	r2, [r7, #4]
   2123c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   2123e:	2300      	movs	r3, #0
   21240:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   21242:	68fb      	ldr	r3, [r7, #12]
   21244:	68ba      	ldr	r2, [r7, #8]
   21246:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   21248:	68fb      	ldr	r3, [r7, #12]
   2124a:	68fa      	ldr	r2, [r7, #12]
   2124c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   2124e:	68ba      	ldr	r2, [r7, #8]
   21250:	687b      	ldr	r3, [r7, #4]
   21252:	429a      	cmp	r2, r3
   21254:	d812      	bhi.n	2127c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   21256:	687a      	ldr	r2, [r7, #4]
   21258:	683b      	ldr	r3, [r7, #0]
   2125a:	1ad2      	subs	r2, r2, r3
   2125c:	68fb      	ldr	r3, [r7, #12]
   2125e:	699b      	ldr	r3, [r3, #24]
   21260:	429a      	cmp	r2, r3
   21262:	d302      	bcc.n	2126a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   21264:	2301      	movs	r3, #1
   21266:	617b      	str	r3, [r7, #20]
   21268:	e01b      	b.n	212a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   2126a:	4b10      	ldr	r3, [pc, #64]	; (212ac <prvInsertTimerInActiveList+0x7c>)
   2126c:	681a      	ldr	r2, [r3, #0]
   2126e:	68fb      	ldr	r3, [r7, #12]
   21270:	3304      	adds	r3, #4
   21272:	0019      	movs	r1, r3
   21274:	0010      	movs	r0, r2
   21276:	4b0e      	ldr	r3, [pc, #56]	; (212b0 <prvInsertTimerInActiveList+0x80>)
   21278:	4798      	blx	r3
   2127a:	e012      	b.n	212a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   2127c:	687a      	ldr	r2, [r7, #4]
   2127e:	683b      	ldr	r3, [r7, #0]
   21280:	429a      	cmp	r2, r3
   21282:	d206      	bcs.n	21292 <prvInsertTimerInActiveList+0x62>
   21284:	68ba      	ldr	r2, [r7, #8]
   21286:	683b      	ldr	r3, [r7, #0]
   21288:	429a      	cmp	r2, r3
   2128a:	d302      	bcc.n	21292 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   2128c:	2301      	movs	r3, #1
   2128e:	617b      	str	r3, [r7, #20]
   21290:	e007      	b.n	212a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   21292:	4b08      	ldr	r3, [pc, #32]	; (212b4 <prvInsertTimerInActiveList+0x84>)
   21294:	681a      	ldr	r2, [r3, #0]
   21296:	68fb      	ldr	r3, [r7, #12]
   21298:	3304      	adds	r3, #4
   2129a:	0019      	movs	r1, r3
   2129c:	0010      	movs	r0, r2
   2129e:	4b04      	ldr	r3, [pc, #16]	; (212b0 <prvInsertTimerInActiveList+0x80>)
   212a0:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   212a2:	697b      	ldr	r3, [r7, #20]
}
   212a4:	0018      	movs	r0, r3
   212a6:	46bd      	mov	sp, r7
   212a8:	b006      	add	sp, #24
   212aa:	bd80      	pop	{r7, pc}
   212ac:	200003e8 	.word	0x200003e8
   212b0:	0001f00b 	.word	0x0001f00b
   212b4:	200003e4 	.word	0x200003e4

000212b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   212b8:	b590      	push	{r4, r7, lr}
   212ba:	b08d      	sub	sp, #52	; 0x34
   212bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   212be:	e07e      	b.n	213be <prvProcessReceivedCommands+0x106>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
   212c0:	2308      	movs	r3, #8
   212c2:	18fb      	adds	r3, r7, r3
   212c4:	681b      	ldr	r3, [r3, #0]
   212c6:	2b00      	cmp	r3, #0
   212c8:	da10      	bge.n	212ec <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
   212ca:	2308      	movs	r3, #8
   212cc:	18fb      	adds	r3, r7, r3
   212ce:	3304      	adds	r3, #4
   212d0:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
   212d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   212d4:	2b00      	cmp	r3, #0
   212d6:	d101      	bne.n	212dc <prvProcessReceivedCommands+0x24>
   212d8:	b672      	cpsid	i
   212da:	e7fe      	b.n	212da <prvProcessReceivedCommands+0x22>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
   212dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   212de:	681a      	ldr	r2, [r3, #0]
   212e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   212e2:	6858      	ldr	r0, [r3, #4]
   212e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   212e6:	689b      	ldr	r3, [r3, #8]
   212e8:	0019      	movs	r1, r3
   212ea:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   212ec:	2308      	movs	r3, #8
   212ee:	18fb      	adds	r3, r7, r3
   212f0:	681b      	ldr	r3, [r3, #0]
   212f2:	2b00      	cmp	r3, #0
   212f4:	db63      	blt.n	213be <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   212f6:	2308      	movs	r3, #8
   212f8:	18fb      	adds	r3, r7, r3
   212fa:	689b      	ldr	r3, [r3, #8]
   212fc:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   212fe:	6a3b      	ldr	r3, [r7, #32]
   21300:	695b      	ldr	r3, [r3, #20]
   21302:	2b00      	cmp	r3, #0
   21304:	d004      	beq.n	21310 <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   21306:	6a3b      	ldr	r3, [r7, #32]
   21308:	3304      	adds	r3, #4
   2130a:	0018      	movs	r0, r3
   2130c:	4b33      	ldr	r3, [pc, #204]	; (213dc <prvProcessReceivedCommands+0x124>)
   2130e:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   21310:	1d3b      	adds	r3, r7, #4
   21312:	0018      	movs	r0, r3
   21314:	4b32      	ldr	r3, [pc, #200]	; (213e0 <prvProcessReceivedCommands+0x128>)
   21316:	4798      	blx	r3
   21318:	0003      	movs	r3, r0
   2131a:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
   2131c:	2308      	movs	r3, #8
   2131e:	18fb      	adds	r3, r7, r3
   21320:	681b      	ldr	r3, [r3, #0]
   21322:	2b09      	cmp	r3, #9
   21324:	d84a      	bhi.n	213bc <prvProcessReceivedCommands+0x104>
   21326:	009a      	lsls	r2, r3, #2
   21328:	4b2e      	ldr	r3, [pc, #184]	; (213e4 <prvProcessReceivedCommands+0x12c>)
   2132a:	18d3      	adds	r3, r2, r3
   2132c:	681b      	ldr	r3, [r3, #0]
   2132e:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   21330:	2308      	movs	r3, #8
   21332:	18fb      	adds	r3, r7, r3
   21334:	685a      	ldr	r2, [r3, #4]
   21336:	6a3b      	ldr	r3, [r7, #32]
   21338:	699b      	ldr	r3, [r3, #24]
   2133a:	18d1      	adds	r1, r2, r3
   2133c:	2308      	movs	r3, #8
   2133e:	18fb      	adds	r3, r7, r3
   21340:	685b      	ldr	r3, [r3, #4]
   21342:	69fa      	ldr	r2, [r7, #28]
   21344:	6a38      	ldr	r0, [r7, #32]
   21346:	4c28      	ldr	r4, [pc, #160]	; (213e8 <prvProcessReceivedCommands+0x130>)
   21348:	47a0      	blx	r4
   2134a:	1e03      	subs	r3, r0, #0
   2134c:	d037      	beq.n	213be <prvProcessReceivedCommands+0x106>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   2134e:	6a3b      	ldr	r3, [r7, #32]
   21350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21352:	6a3a      	ldr	r2, [r7, #32]
   21354:	0010      	movs	r0, r2
   21356:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   21358:	6a3b      	ldr	r3, [r7, #32]
   2135a:	69db      	ldr	r3, [r3, #28]
   2135c:	2b01      	cmp	r3, #1
   2135e:	d12e      	bne.n	213be <prvProcessReceivedCommands+0x106>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   21360:	2308      	movs	r3, #8
   21362:	18fb      	adds	r3, r7, r3
   21364:	685a      	ldr	r2, [r3, #4]
   21366:	6a3b      	ldr	r3, [r7, #32]
   21368:	699b      	ldr	r3, [r3, #24]
   2136a:	18d2      	adds	r2, r2, r3
   2136c:	6a38      	ldr	r0, [r7, #32]
   2136e:	2300      	movs	r3, #0
   21370:	9300      	str	r3, [sp, #0]
   21372:	2300      	movs	r3, #0
   21374:	2100      	movs	r1, #0
   21376:	4c1d      	ldr	r4, [pc, #116]	; (213ec <prvProcessReceivedCommands+0x134>)
   21378:	47a0      	blx	r4
   2137a:	0003      	movs	r3, r0
   2137c:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
   2137e:	69bb      	ldr	r3, [r7, #24]
   21380:	2b00      	cmp	r3, #0
   21382:	d11c      	bne.n	213be <prvProcessReceivedCommands+0x106>
   21384:	b672      	cpsid	i
   21386:	e7fe      	b.n	21386 <prvProcessReceivedCommands+0xce>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   21388:	2308      	movs	r3, #8
   2138a:	18fb      	adds	r3, r7, r3
   2138c:	685a      	ldr	r2, [r3, #4]
   2138e:	6a3b      	ldr	r3, [r7, #32]
   21390:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   21392:	6a3b      	ldr	r3, [r7, #32]
   21394:	699b      	ldr	r3, [r3, #24]
   21396:	2b00      	cmp	r3, #0
   21398:	d101      	bne.n	2139e <prvProcessReceivedCommands+0xe6>
   2139a:	b672      	cpsid	i
   2139c:	e7fe      	b.n	2139c <prvProcessReceivedCommands+0xe4>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   2139e:	6a3b      	ldr	r3, [r7, #32]
   213a0:	699a      	ldr	r2, [r3, #24]
   213a2:	69fb      	ldr	r3, [r7, #28]
   213a4:	18d1      	adds	r1, r2, r3
   213a6:	69fb      	ldr	r3, [r7, #28]
   213a8:	69fa      	ldr	r2, [r7, #28]
   213aa:	6a38      	ldr	r0, [r7, #32]
   213ac:	4c0e      	ldr	r4, [pc, #56]	; (213e8 <prvProcessReceivedCommands+0x130>)
   213ae:	47a0      	blx	r4
					break;
   213b0:	e005      	b.n	213be <prvProcessReceivedCommands+0x106>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   213b2:	6a3b      	ldr	r3, [r7, #32]
   213b4:	0018      	movs	r0, r3
   213b6:	4b0e      	ldr	r3, [pc, #56]	; (213f0 <prvProcessReceivedCommands+0x138>)
   213b8:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   213ba:	e000      	b.n	213be <prvProcessReceivedCommands+0x106>

				default	:
					/* Don't expect to get here. */
					break;
   213bc:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   213be:	4b0d      	ldr	r3, [pc, #52]	; (213f4 <prvProcessReceivedCommands+0x13c>)
   213c0:	681b      	ldr	r3, [r3, #0]
   213c2:	2208      	movs	r2, #8
   213c4:	18b9      	adds	r1, r7, r2
   213c6:	2200      	movs	r2, #0
   213c8:	0018      	movs	r0, r3
   213ca:	4b0b      	ldr	r3, [pc, #44]	; (213f8 <prvProcessReceivedCommands+0x140>)
   213cc:	4798      	blx	r3
   213ce:	1e03      	subs	r3, r0, #0
   213d0:	d000      	beq.n	213d4 <prvProcessReceivedCommands+0x11c>
   213d2:	e775      	b.n	212c0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   213d4:	46c0      	nop			; (mov r8, r8)
   213d6:	46bd      	mov	sp, r7
   213d8:	b00b      	add	sp, #44	; 0x2c
   213da:	bd90      	pop	{r4, r7, pc}
   213dc:	0001f077 	.word	0x0001f077
   213e0:	000211e9 	.word	0x000211e9
   213e4:	0002abe8 	.word	0x0002abe8
   213e8:	00021231 	.word	0x00021231
   213ec:	00020fad 	.word	0x00020fad
   213f0:	0001ef41 	.word	0x0001ef41
   213f4:	200003ec 	.word	0x200003ec
   213f8:	0001f541 	.word	0x0001f541

000213fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   213fc:	b590      	push	{r4, r7, lr}
   213fe:	b089      	sub	sp, #36	; 0x24
   21400:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   21402:	e03e      	b.n	21482 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   21404:	4b28      	ldr	r3, [pc, #160]	; (214a8 <prvSwitchTimerLists+0xac>)
   21406:	681b      	ldr	r3, [r3, #0]
   21408:	68db      	ldr	r3, [r3, #12]
   2140a:	681b      	ldr	r3, [r3, #0]
   2140c:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   2140e:	4b26      	ldr	r3, [pc, #152]	; (214a8 <prvSwitchTimerLists+0xac>)
   21410:	681b      	ldr	r3, [r3, #0]
   21412:	68db      	ldr	r3, [r3, #12]
   21414:	68db      	ldr	r3, [r3, #12]
   21416:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   21418:	693b      	ldr	r3, [r7, #16]
   2141a:	3304      	adds	r3, #4
   2141c:	0018      	movs	r0, r3
   2141e:	4b23      	ldr	r3, [pc, #140]	; (214ac <prvSwitchTimerLists+0xb0>)
   21420:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   21422:	693b      	ldr	r3, [r7, #16]
   21424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21426:	693a      	ldr	r2, [r7, #16]
   21428:	0010      	movs	r0, r2
   2142a:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   2142c:	693b      	ldr	r3, [r7, #16]
   2142e:	69db      	ldr	r3, [r3, #28]
   21430:	2b01      	cmp	r3, #1
   21432:	d126      	bne.n	21482 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   21434:	693b      	ldr	r3, [r7, #16]
   21436:	699a      	ldr	r2, [r3, #24]
   21438:	697b      	ldr	r3, [r7, #20]
   2143a:	18d3      	adds	r3, r2, r3
   2143c:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   2143e:	68fa      	ldr	r2, [r7, #12]
   21440:	697b      	ldr	r3, [r7, #20]
   21442:	429a      	cmp	r2, r3
   21444:	d90e      	bls.n	21464 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   21446:	693b      	ldr	r3, [r7, #16]
   21448:	68fa      	ldr	r2, [r7, #12]
   2144a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   2144c:	693b      	ldr	r3, [r7, #16]
   2144e:	693a      	ldr	r2, [r7, #16]
   21450:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   21452:	4b15      	ldr	r3, [pc, #84]	; (214a8 <prvSwitchTimerLists+0xac>)
   21454:	681a      	ldr	r2, [r3, #0]
   21456:	693b      	ldr	r3, [r7, #16]
   21458:	3304      	adds	r3, #4
   2145a:	0019      	movs	r1, r3
   2145c:	0010      	movs	r0, r2
   2145e:	4b14      	ldr	r3, [pc, #80]	; (214b0 <prvSwitchTimerLists+0xb4>)
   21460:	4798      	blx	r3
   21462:	e00e      	b.n	21482 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   21464:	697a      	ldr	r2, [r7, #20]
   21466:	6938      	ldr	r0, [r7, #16]
   21468:	2300      	movs	r3, #0
   2146a:	9300      	str	r3, [sp, #0]
   2146c:	2300      	movs	r3, #0
   2146e:	2100      	movs	r1, #0
   21470:	4c10      	ldr	r4, [pc, #64]	; (214b4 <prvSwitchTimerLists+0xb8>)
   21472:	47a0      	blx	r4
   21474:	0003      	movs	r3, r0
   21476:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   21478:	68bb      	ldr	r3, [r7, #8]
   2147a:	2b00      	cmp	r3, #0
   2147c:	d101      	bne.n	21482 <prvSwitchTimerLists+0x86>
   2147e:	b672      	cpsid	i
   21480:	e7fe      	b.n	21480 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   21482:	4b09      	ldr	r3, [pc, #36]	; (214a8 <prvSwitchTimerLists+0xac>)
   21484:	681b      	ldr	r3, [r3, #0]
   21486:	681b      	ldr	r3, [r3, #0]
   21488:	2b00      	cmp	r3, #0
   2148a:	d1bb      	bne.n	21404 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   2148c:	4b06      	ldr	r3, [pc, #24]	; (214a8 <prvSwitchTimerLists+0xac>)
   2148e:	681b      	ldr	r3, [r3, #0]
   21490:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   21492:	4b09      	ldr	r3, [pc, #36]	; (214b8 <prvSwitchTimerLists+0xbc>)
   21494:	681a      	ldr	r2, [r3, #0]
   21496:	4b04      	ldr	r3, [pc, #16]	; (214a8 <prvSwitchTimerLists+0xac>)
   21498:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   2149a:	4b07      	ldr	r3, [pc, #28]	; (214b8 <prvSwitchTimerLists+0xbc>)
   2149c:	687a      	ldr	r2, [r7, #4]
   2149e:	601a      	str	r2, [r3, #0]
}
   214a0:	46c0      	nop			; (mov r8, r8)
   214a2:	46bd      	mov	sp, r7
   214a4:	b007      	add	sp, #28
   214a6:	bd90      	pop	{r4, r7, pc}
   214a8:	200003e4 	.word	0x200003e4
   214ac:	0001f077 	.word	0x0001f077
   214b0:	0001f00b 	.word	0x0001f00b
   214b4:	00020fad 	.word	0x00020fad
   214b8:	200003e8 	.word	0x200003e8

000214bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   214bc:	b580      	push	{r7, lr}
   214be:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   214c0:	4b10      	ldr	r3, [pc, #64]	; (21504 <prvCheckForValidListAndQueue+0x48>)
   214c2:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   214c4:	4b10      	ldr	r3, [pc, #64]	; (21508 <prvCheckForValidListAndQueue+0x4c>)
   214c6:	681b      	ldr	r3, [r3, #0]
   214c8:	2b00      	cmp	r3, #0
   214ca:	d115      	bne.n	214f8 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   214cc:	4b0f      	ldr	r3, [pc, #60]	; (2150c <prvCheckForValidListAndQueue+0x50>)
   214ce:	0018      	movs	r0, r3
   214d0:	4b0f      	ldr	r3, [pc, #60]	; (21510 <prvCheckForValidListAndQueue+0x54>)
   214d2:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   214d4:	4b0f      	ldr	r3, [pc, #60]	; (21514 <prvCheckForValidListAndQueue+0x58>)
   214d6:	0018      	movs	r0, r3
   214d8:	4b0d      	ldr	r3, [pc, #52]	; (21510 <prvCheckForValidListAndQueue+0x54>)
   214da:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   214dc:	4b0e      	ldr	r3, [pc, #56]	; (21518 <prvCheckForValidListAndQueue+0x5c>)
   214de:	4a0b      	ldr	r2, [pc, #44]	; (2150c <prvCheckForValidListAndQueue+0x50>)
   214e0:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   214e2:	4b0e      	ldr	r3, [pc, #56]	; (2151c <prvCheckForValidListAndQueue+0x60>)
   214e4:	4a0b      	ldr	r2, [pc, #44]	; (21514 <prvCheckForValidListAndQueue+0x58>)
   214e6:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   214e8:	2200      	movs	r2, #0
   214ea:	2110      	movs	r1, #16
   214ec:	2005      	movs	r0, #5
   214ee:	4b0c      	ldr	r3, [pc, #48]	; (21520 <prvCheckForValidListAndQueue+0x64>)
   214f0:	4798      	blx	r3
   214f2:	0002      	movs	r2, r0
   214f4:	4b04      	ldr	r3, [pc, #16]	; (21508 <prvCheckForValidListAndQueue+0x4c>)
   214f6:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   214f8:	4b0a      	ldr	r3, [pc, #40]	; (21524 <prvCheckForValidListAndQueue+0x68>)
   214fa:	4798      	blx	r3
}
   214fc:	46c0      	nop			; (mov r8, r8)
   214fe:	46bd      	mov	sp, r7
   21500:	bd80      	pop	{r7, pc}
   21502:	46c0      	nop			; (mov r8, r8)
   21504:	0001edd1 	.word	0x0001edd1
   21508:	200003ec 	.word	0x200003ec
   2150c:	200003bc 	.word	0x200003bc
   21510:	0001ef75 	.word	0x0001ef75
   21514:	200003d0 	.word	0x200003d0
   21518:	200003e4 	.word	0x200003e4
   2151c:	200003e8 	.word	0x200003e8
   21520:	0001f185 	.word	0x0001f185
   21524:	0001edf5 	.word	0x0001edf5

00021528 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
   21528:	b580      	push	{r7, lr}
   2152a:	b084      	sub	sp, #16
   2152c:	af00      	add	r7, sp, #0
   2152e:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
   21530:	687b      	ldr	r3, [r7, #4]
   21532:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
   21534:	687b      	ldr	r3, [r7, #4]
   21536:	2b00      	cmp	r3, #0
   21538:	d101      	bne.n	2153e <xTimerIsTimerActive+0x16>
   2153a:	b672      	cpsid	i
   2153c:	e7fe      	b.n	2153c <xTimerIsTimerActive+0x14>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
   2153e:	4b07      	ldr	r3, [pc, #28]	; (2155c <xTimerIsTimerActive+0x34>)
   21540:	4798      	blx	r3
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) ); /*lint !e961. Cast is only redundant when NULL is passed into the macro. */
   21542:	68fb      	ldr	r3, [r7, #12]
   21544:	695b      	ldr	r3, [r3, #20]
   21546:	1e5a      	subs	r2, r3, #1
   21548:	4193      	sbcs	r3, r2
   2154a:	b2db      	uxtb	r3, r3
   2154c:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
   2154e:	4b04      	ldr	r3, [pc, #16]	; (21560 <xTimerIsTimerActive+0x38>)
   21550:	4798      	blx	r3

	return xTimerIsInActiveList;
   21552:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Can't be pointer to const due to the typedef. */
   21554:	0018      	movs	r0, r3
   21556:	46bd      	mov	sp, r7
   21558:	b004      	add	sp, #16
   2155a:	bd80      	pop	{r7, pc}
   2155c:	0001edd1 	.word	0x0001edd1
   21560:	0001edf5 	.word	0x0001edf5

00021564 <wdt_clear_early_warning>:
 *
 *  Clears the Watchdog timer early warning period elapsed flag, so that a new
 *  early warning period can be detected.
 */
static inline void wdt_clear_early_warning(void)
{
   21564:	b580      	push	{r7, lr}
   21566:	b082      	sub	sp, #8
   21568:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
   2156a:	4b04      	ldr	r3, [pc, #16]	; (2157c <wdt_clear_early_warning+0x18>)
   2156c:	607b      	str	r3, [r7, #4]

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
   2156e:	687b      	ldr	r3, [r7, #4]
   21570:	2201      	movs	r2, #1
   21572:	719a      	strb	r2, [r3, #6]
}
   21574:	46c0      	nop			; (mov r8, r8)
   21576:	46bd      	mov	sp, r7
   21578:	b002      	add	sp, #8
   2157a:	bd80      	pop	{r7, pc}
   2157c:	40001000 	.word	0x40001000

00021580 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
   21580:	b580      	push	{r7, lr}
   21582:	af00      	add	r7, sp, #0
	wdt_clear_early_warning();
   21584:	4b05      	ldr	r3, [pc, #20]	; (2159c <WDT_Handler+0x1c>)
   21586:	4798      	blx	r3

	if (wdt_early_warning_callback) {
   21588:	4b05      	ldr	r3, [pc, #20]	; (215a0 <WDT_Handler+0x20>)
   2158a:	681b      	ldr	r3, [r3, #0]
   2158c:	2b00      	cmp	r3, #0
   2158e:	d002      	beq.n	21596 <WDT_Handler+0x16>
		wdt_early_warning_callback();
   21590:	4b03      	ldr	r3, [pc, #12]	; (215a0 <WDT_Handler+0x20>)
   21592:	681b      	ldr	r3, [r3, #0]
   21594:	4798      	blx	r3
	}
}
   21596:	46c0      	nop			; (mov r8, r8)
   21598:	46bd      	mov	sp, r7
   2159a:	bd80      	pop	{r7, pc}
   2159c:	00021565 	.word	0x00021565
   215a0:	20000944 	.word	0x20000944

000215a4 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   215a4:	b580      	push	{r7, lr}
   215a6:	af00      	add	r7, sp, #0
   215a8:	2000      	movs	r0, #0
   215aa:	4b02      	ldr	r3, [pc, #8]	; (215b4 <TCC0_Handler+0x10>)
   215ac:	4798      	blx	r3
   215ae:	46c0      	nop			; (mov r8, r8)
   215b0:	46bd      	mov	sp, r7
   215b2:	bd80      	pop	{r7, pc}
   215b4:	000215e1 	.word	0x000215e1

000215b8 <TCC1_Handler>:
   215b8:	b580      	push	{r7, lr}
   215ba:	af00      	add	r7, sp, #0
   215bc:	2001      	movs	r0, #1
   215be:	4b02      	ldr	r3, [pc, #8]	; (215c8 <TCC1_Handler+0x10>)
   215c0:	4798      	blx	r3
   215c2:	46c0      	nop			; (mov r8, r8)
   215c4:	46bd      	mov	sp, r7
   215c6:	bd80      	pop	{r7, pc}
   215c8:	000215e1 	.word	0x000215e1

000215cc <TCC2_Handler>:
   215cc:	b580      	push	{r7, lr}
   215ce:	af00      	add	r7, sp, #0
   215d0:	2002      	movs	r0, #2
   215d2:	4b02      	ldr	r3, [pc, #8]	; (215dc <TCC2_Handler+0x10>)
   215d4:	4798      	blx	r3
   215d6:	46c0      	nop			; (mov r8, r8)
   215d8:	46bd      	mov	sp, r7
   215da:	bd80      	pop	{r7, pc}
   215dc:	000215e1 	.word	0x000215e1

000215e0 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   215e0:	b580      	push	{r7, lr}
   215e2:	b086      	sub	sp, #24
   215e4:	af00      	add	r7, sp, #0
   215e6:	0002      	movs	r2, r0
   215e8:	1dfb      	adds	r3, r7, #7
   215ea:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   215ec:	1dfb      	adds	r3, r7, #7
   215ee:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   215f0:	4b18      	ldr	r3, [pc, #96]	; (21654 <_tcc_interrupt_handler+0x74>)
   215f2:	0092      	lsls	r2, r2, #2
   215f4:	58d3      	ldr	r3, [r2, r3]
   215f6:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   215f8:	693b      	ldr	r3, [r7, #16]
   215fa:	681b      	ldr	r3, [r3, #0]
   215fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   215fe:	693b      	ldr	r3, [r7, #16]
   21600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   21602:	401a      	ands	r2, r3
			module->enable_callback_mask);
   21604:	693b      	ldr	r3, [r7, #16]
   21606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   21608:	4013      	ands	r3, r2
   2160a:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2160c:	2300      	movs	r3, #0
   2160e:	617b      	str	r3, [r7, #20]
   21610:	e019      	b.n	21646 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   21612:	4b11      	ldr	r3, [pc, #68]	; (21658 <_tcc_interrupt_handler+0x78>)
   21614:	697a      	ldr	r2, [r7, #20]
   21616:	0092      	lsls	r2, r2, #2
   21618:	58d3      	ldr	r3, [r2, r3]
   2161a:	68fa      	ldr	r2, [r7, #12]
   2161c:	4013      	ands	r3, r2
   2161e:	d00f      	beq.n	21640 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   21620:	693a      	ldr	r2, [r7, #16]
   21622:	697b      	ldr	r3, [r7, #20]
   21624:	009b      	lsls	r3, r3, #2
   21626:	18d3      	adds	r3, r2, r3
   21628:	3304      	adds	r3, #4
   2162a:	681b      	ldr	r3, [r3, #0]
   2162c:	693a      	ldr	r2, [r7, #16]
   2162e:	0010      	movs	r0, r2
   21630:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   21632:	693b      	ldr	r3, [r7, #16]
   21634:	681b      	ldr	r3, [r3, #0]
   21636:	4a08      	ldr	r2, [pc, #32]	; (21658 <_tcc_interrupt_handler+0x78>)
   21638:	6979      	ldr	r1, [r7, #20]
   2163a:	0089      	lsls	r1, r1, #2
   2163c:	588a      	ldr	r2, [r1, r2]
   2163e:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   21640:	697b      	ldr	r3, [r7, #20]
   21642:	3301      	adds	r3, #1
   21644:	617b      	str	r3, [r7, #20]
   21646:	697b      	ldr	r3, [r7, #20]
   21648:	2b0b      	cmp	r3, #11
   2164a:	dde2      	ble.n	21612 <_tcc_interrupt_handler+0x32>
		}
	}
}
   2164c:	46c0      	nop			; (mov r8, r8)
   2164e:	46bd      	mov	sp, r7
   21650:	b006      	add	sp, #24
   21652:	bd80      	pop	{r7, pc}
   21654:	20000948 	.word	0x20000948
   21658:	0002ac10 	.word	0x0002ac10

0002165c <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   2165c:	b580      	push	{r7, lr}
   2165e:	af00      	add	r7, sp, #0
   21660:	2000      	movs	r0, #0
   21662:	4b02      	ldr	r3, [pc, #8]	; (2166c <TC3_Handler+0x10>)
   21664:	4798      	blx	r3
   21666:	46c0      	nop			; (mov r8, r8)
   21668:	46bd      	mov	sp, r7
   2166a:	bd80      	pop	{r7, pc}
   2166c:	000216c1 	.word	0x000216c1

00021670 <TC4_Handler>:
   21670:	b580      	push	{r7, lr}
   21672:	af00      	add	r7, sp, #0
   21674:	2001      	movs	r0, #1
   21676:	4b02      	ldr	r3, [pc, #8]	; (21680 <TC4_Handler+0x10>)
   21678:	4798      	blx	r3
   2167a:	46c0      	nop			; (mov r8, r8)
   2167c:	46bd      	mov	sp, r7
   2167e:	bd80      	pop	{r7, pc}
   21680:	000216c1 	.word	0x000216c1

00021684 <TC5_Handler>:
   21684:	b580      	push	{r7, lr}
   21686:	af00      	add	r7, sp, #0
   21688:	2002      	movs	r0, #2
   2168a:	4b02      	ldr	r3, [pc, #8]	; (21694 <TC5_Handler+0x10>)
   2168c:	4798      	blx	r3
   2168e:	46c0      	nop			; (mov r8, r8)
   21690:	46bd      	mov	sp, r7
   21692:	bd80      	pop	{r7, pc}
   21694:	000216c1 	.word	0x000216c1

00021698 <TC6_Handler>:
   21698:	b580      	push	{r7, lr}
   2169a:	af00      	add	r7, sp, #0
   2169c:	2003      	movs	r0, #3
   2169e:	4b02      	ldr	r3, [pc, #8]	; (216a8 <TC6_Handler+0x10>)
   216a0:	4798      	blx	r3
   216a2:	46c0      	nop			; (mov r8, r8)
   216a4:	46bd      	mov	sp, r7
   216a6:	bd80      	pop	{r7, pc}
   216a8:	000216c1 	.word	0x000216c1

000216ac <TC7_Handler>:
   216ac:	b580      	push	{r7, lr}
   216ae:	af00      	add	r7, sp, #0
   216b0:	2004      	movs	r0, #4
   216b2:	4b02      	ldr	r3, [pc, #8]	; (216bc <TC7_Handler+0x10>)
   216b4:	4798      	blx	r3
   216b6:	46c0      	nop			; (mov r8, r8)
   216b8:	46bd      	mov	sp, r7
   216ba:	bd80      	pop	{r7, pc}
   216bc:	000216c1 	.word	0x000216c1

000216c0 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   216c0:	b580      	push	{r7, lr}
   216c2:	b084      	sub	sp, #16
   216c4:	af00      	add	r7, sp, #0
   216c6:	0002      	movs	r2, r0
   216c8:	1dfb      	adds	r3, r7, #7
   216ca:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   216cc:	1dfb      	adds	r3, r7, #7
   216ce:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   216d0:	4b28      	ldr	r3, [pc, #160]	; (21774 <_tc_interrupt_handler+0xb4>)
   216d2:	0092      	lsls	r2, r2, #2
   216d4:	58d3      	ldr	r3, [r2, r3]
   216d6:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   216d8:	68fb      	ldr	r3, [r7, #12]
   216da:	681b      	ldr	r3, [r3, #0]
   216dc:	7b9b      	ldrb	r3, [r3, #14]
   216de:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   216e0:	68fa      	ldr	r2, [r7, #12]
   216e2:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   216e4:	4013      	ands	r3, r2
   216e6:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   216e8:	68fb      	ldr	r3, [r7, #12]
   216ea:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   216ec:	230b      	movs	r3, #11
   216ee:	18fb      	adds	r3, r7, r3
   216f0:	400a      	ands	r2, r1
   216f2:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   216f4:	230b      	movs	r3, #11
   216f6:	18fb      	adds	r3, r7, r3
   216f8:	781b      	ldrb	r3, [r3, #0]
   216fa:	2201      	movs	r2, #1
   216fc:	4013      	ands	r3, r2
   216fe:	d008      	beq.n	21712 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   21700:	68fb      	ldr	r3, [r7, #12]
   21702:	689b      	ldr	r3, [r3, #8]
   21704:	68fa      	ldr	r2, [r7, #12]
   21706:	0010      	movs	r0, r2
   21708:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   2170a:	68fb      	ldr	r3, [r7, #12]
   2170c:	681b      	ldr	r3, [r3, #0]
   2170e:	2201      	movs	r2, #1
   21710:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   21712:	230b      	movs	r3, #11
   21714:	18fb      	adds	r3, r7, r3
   21716:	781b      	ldrb	r3, [r3, #0]
   21718:	2202      	movs	r2, #2
   2171a:	4013      	ands	r3, r2
   2171c:	d008      	beq.n	21730 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   2171e:	68fb      	ldr	r3, [r7, #12]
   21720:	68db      	ldr	r3, [r3, #12]
   21722:	68fa      	ldr	r2, [r7, #12]
   21724:	0010      	movs	r0, r2
   21726:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   21728:	68fb      	ldr	r3, [r7, #12]
   2172a:	681b      	ldr	r3, [r3, #0]
   2172c:	2202      	movs	r2, #2
   2172e:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   21730:	230b      	movs	r3, #11
   21732:	18fb      	adds	r3, r7, r3
   21734:	781b      	ldrb	r3, [r3, #0]
   21736:	2210      	movs	r2, #16
   21738:	4013      	ands	r3, r2
   2173a:	d008      	beq.n	2174e <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   2173c:	68fb      	ldr	r3, [r7, #12]
   2173e:	691b      	ldr	r3, [r3, #16]
   21740:	68fa      	ldr	r2, [r7, #12]
   21742:	0010      	movs	r0, r2
   21744:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   21746:	68fb      	ldr	r3, [r7, #12]
   21748:	681b      	ldr	r3, [r3, #0]
   2174a:	2210      	movs	r2, #16
   2174c:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   2174e:	230b      	movs	r3, #11
   21750:	18fb      	adds	r3, r7, r3
   21752:	781b      	ldrb	r3, [r3, #0]
   21754:	2220      	movs	r2, #32
   21756:	4013      	ands	r3, r2
   21758:	d008      	beq.n	2176c <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   2175a:	68fb      	ldr	r3, [r7, #12]
   2175c:	695b      	ldr	r3, [r3, #20]
   2175e:	68fa      	ldr	r2, [r7, #12]
   21760:	0010      	movs	r0, r2
   21762:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   21764:	68fb      	ldr	r3, [r7, #12]
   21766:	681b      	ldr	r3, [r3, #0]
   21768:	2220      	movs	r2, #32
   2176a:	739a      	strb	r2, [r3, #14]
	}
}
   2176c:	46c0      	nop			; (mov r8, r8)
   2176e:	46bd      	mov	sp, r7
   21770:	b004      	add	sp, #16
   21772:	bd80      	pop	{r7, pc}
   21774:	20000954 	.word	0x20000954

00021778 <system_gclk_chan_get_config_defaults>:
{
   21778:	b580      	push	{r7, lr}
   2177a:	b082      	sub	sp, #8
   2177c:	af00      	add	r7, sp, #0
   2177e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   21780:	687b      	ldr	r3, [r7, #4]
   21782:	2200      	movs	r2, #0
   21784:	701a      	strb	r2, [r3, #0]
}
   21786:	46c0      	nop			; (mov r8, r8)
   21788:	46bd      	mov	sp, r7
   2178a:	b002      	add	sp, #8
   2178c:	bd80      	pop	{r7, pc}
	...

00021790 <system_apb_clock_set_mask>:
{
   21790:	b580      	push	{r7, lr}
   21792:	b082      	sub	sp, #8
   21794:	af00      	add	r7, sp, #0
   21796:	0002      	movs	r2, r0
   21798:	6039      	str	r1, [r7, #0]
   2179a:	1dfb      	adds	r3, r7, #7
   2179c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2179e:	1dfb      	adds	r3, r7, #7
   217a0:	781b      	ldrb	r3, [r3, #0]
   217a2:	2b01      	cmp	r3, #1
   217a4:	d00a      	beq.n	217bc <system_apb_clock_set_mask+0x2c>
   217a6:	2b02      	cmp	r3, #2
   217a8:	d00f      	beq.n	217ca <system_apb_clock_set_mask+0x3a>
   217aa:	2b00      	cmp	r3, #0
   217ac:	d114      	bne.n	217d8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   217ae:	4b0e      	ldr	r3, [pc, #56]	; (217e8 <system_apb_clock_set_mask+0x58>)
   217b0:	4a0d      	ldr	r2, [pc, #52]	; (217e8 <system_apb_clock_set_mask+0x58>)
   217b2:	6991      	ldr	r1, [r2, #24]
   217b4:	683a      	ldr	r2, [r7, #0]
   217b6:	430a      	orrs	r2, r1
   217b8:	619a      	str	r2, [r3, #24]
			break;
   217ba:	e00f      	b.n	217dc <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   217bc:	4b0a      	ldr	r3, [pc, #40]	; (217e8 <system_apb_clock_set_mask+0x58>)
   217be:	4a0a      	ldr	r2, [pc, #40]	; (217e8 <system_apb_clock_set_mask+0x58>)
   217c0:	69d1      	ldr	r1, [r2, #28]
   217c2:	683a      	ldr	r2, [r7, #0]
   217c4:	430a      	orrs	r2, r1
   217c6:	61da      	str	r2, [r3, #28]
			break;
   217c8:	e008      	b.n	217dc <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   217ca:	4b07      	ldr	r3, [pc, #28]	; (217e8 <system_apb_clock_set_mask+0x58>)
   217cc:	4a06      	ldr	r2, [pc, #24]	; (217e8 <system_apb_clock_set_mask+0x58>)
   217ce:	6a11      	ldr	r1, [r2, #32]
   217d0:	683a      	ldr	r2, [r7, #0]
   217d2:	430a      	orrs	r2, r1
   217d4:	621a      	str	r2, [r3, #32]
			break;
   217d6:	e001      	b.n	217dc <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   217d8:	2317      	movs	r3, #23
   217da:	e000      	b.n	217de <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   217dc:	2300      	movs	r3, #0
}
   217de:	0018      	movs	r0, r3
   217e0:	46bd      	mov	sp, r7
   217e2:	b002      	add	sp, #8
   217e4:	bd80      	pop	{r7, pc}
   217e6:	46c0      	nop			; (mov r8, r8)
   217e8:	40000400 	.word	0x40000400

000217ec <system_pinmux_get_config_defaults>:
{
   217ec:	b580      	push	{r7, lr}
   217ee:	b082      	sub	sp, #8
   217f0:	af00      	add	r7, sp, #0
   217f2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   217f4:	687b      	ldr	r3, [r7, #4]
   217f6:	2280      	movs	r2, #128	; 0x80
   217f8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   217fa:	687b      	ldr	r3, [r7, #4]
   217fc:	2200      	movs	r2, #0
   217fe:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   21800:	687b      	ldr	r3, [r7, #4]
   21802:	2201      	movs	r2, #1
   21804:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   21806:	687b      	ldr	r3, [r7, #4]
   21808:	2200      	movs	r2, #0
   2180a:	70da      	strb	r2, [r3, #3]
}
   2180c:	46c0      	nop			; (mov r8, r8)
   2180e:	46bd      	mov	sp, r7
   21810:	b002      	add	sp, #8
   21812:	bd80      	pop	{r7, pc}

00021814 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   21814:	b580      	push	{r7, lr}
   21816:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   21818:	4b05      	ldr	r3, [pc, #20]	; (21830 <system_is_debugger_present+0x1c>)
   2181a:	789b      	ldrb	r3, [r3, #2]
   2181c:	b2db      	uxtb	r3, r3
   2181e:	001a      	movs	r2, r3
   21820:	2302      	movs	r3, #2
   21822:	4013      	ands	r3, r2
   21824:	1e5a      	subs	r2, r3, #1
   21826:	4193      	sbcs	r3, r2
   21828:	b2db      	uxtb	r3, r3
}
   2182a:	0018      	movs	r0, r3
   2182c:	46bd      	mov	sp, r7
   2182e:	bd80      	pop	{r7, pc}
   21830:	41002000 	.word	0x41002000

00021834 <usart_is_syncing>:
{
   21834:	b580      	push	{r7, lr}
   21836:	b084      	sub	sp, #16
   21838:	af00      	add	r7, sp, #0
   2183a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   2183c:	687b      	ldr	r3, [r7, #4]
   2183e:	681b      	ldr	r3, [r3, #0]
   21840:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   21842:	68fb      	ldr	r3, [r7, #12]
   21844:	69db      	ldr	r3, [r3, #28]
   21846:	1e5a      	subs	r2, r3, #1
   21848:	4193      	sbcs	r3, r2
   2184a:	b2db      	uxtb	r3, r3
}
   2184c:	0018      	movs	r0, r3
   2184e:	46bd      	mov	sp, r7
   21850:	b004      	add	sp, #16
   21852:	bd80      	pop	{r7, pc}

00021854 <_usart_wait_for_sync>:
{
   21854:	b580      	push	{r7, lr}
   21856:	b082      	sub	sp, #8
   21858:	af00      	add	r7, sp, #0
   2185a:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   2185c:	46c0      	nop			; (mov r8, r8)
   2185e:	687b      	ldr	r3, [r7, #4]
   21860:	0018      	movs	r0, r3
   21862:	4b04      	ldr	r3, [pc, #16]	; (21874 <_usart_wait_for_sync+0x20>)
   21864:	4798      	blx	r3
   21866:	1e03      	subs	r3, r0, #0
   21868:	d1f9      	bne.n	2185e <_usart_wait_for_sync+0xa>
}
   2186a:	46c0      	nop			; (mov r8, r8)
   2186c:	46bd      	mov	sp, r7
   2186e:	b002      	add	sp, #8
   21870:	bd80      	pop	{r7, pc}
   21872:	46c0      	nop			; (mov r8, r8)
   21874:	00021835 	.word	0x00021835

00021878 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   21878:	b5b0      	push	{r4, r5, r7, lr}
   2187a:	b08c      	sub	sp, #48	; 0x30
   2187c:	af02      	add	r7, sp, #8
   2187e:	6078      	str	r0, [r7, #4]
   21880:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   21882:	687b      	ldr	r3, [r7, #4]
   21884:	681b      	ldr	r3, [r3, #0]
   21886:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   21888:	687b      	ldr	r3, [r7, #4]
   2188a:	681b      	ldr	r3, [r3, #0]
   2188c:	0018      	movs	r0, r3
   2188e:	4bab      	ldr	r3, [pc, #684]	; (21b3c <_usart_set_config+0x2c4>)
   21890:	4798      	blx	r3
   21892:	0003      	movs	r3, r0
   21894:	617b      	str	r3, [r7, #20]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   21896:	697b      	ldr	r3, [r7, #20]
   21898:	3314      	adds	r3, #20
   2189a:	613b      	str	r3, [r7, #16]
#endif

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   2189c:	2300      	movs	r3, #0
   2189e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   218a0:	2300      	movs	r3, #0
   218a2:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   218a4:	230a      	movs	r3, #10
   218a6:	18fb      	adds	r3, r7, r3
   218a8:	2200      	movs	r2, #0
   218aa:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   218ac:	231f      	movs	r3, #31
   218ae:	18fb      	adds	r3, r7, r3
   218b0:	2200      	movs	r2, #0
   218b2:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   218b4:	231e      	movs	r3, #30
   218b6:	18fb      	adds	r3, r7, r3
   218b8:	2210      	movs	r2, #16
   218ba:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   218bc:	683b      	ldr	r3, [r7, #0]
   218be:	8a1b      	ldrh	r3, [r3, #16]
   218c0:	2280      	movs	r2, #128	; 0x80
   218c2:	01d2      	lsls	r2, r2, #7
   218c4:	4293      	cmp	r3, r2
   218c6:	d01c      	beq.n	21902 <_usart_set_config+0x8a>
   218c8:	2280      	movs	r2, #128	; 0x80
   218ca:	01d2      	lsls	r2, r2, #7
   218cc:	4293      	cmp	r3, r2
   218ce:	dc06      	bgt.n	218de <_usart_set_config+0x66>
   218d0:	2b00      	cmp	r3, #0
   218d2:	d00d      	beq.n	218f0 <_usart_set_config+0x78>
   218d4:	2280      	movs	r2, #128	; 0x80
   218d6:	0192      	lsls	r2, r2, #6
   218d8:	4293      	cmp	r3, r2
   218da:	d024      	beq.n	21926 <_usart_set_config+0xae>
   218dc:	e035      	b.n	2194a <_usart_set_config+0xd2>
   218de:	22c0      	movs	r2, #192	; 0xc0
   218e0:	01d2      	lsls	r2, r2, #7
   218e2:	4293      	cmp	r3, r2
   218e4:	d028      	beq.n	21938 <_usart_set_config+0xc0>
   218e6:	2280      	movs	r2, #128	; 0x80
   218e8:	0212      	lsls	r2, r2, #8
   218ea:	4293      	cmp	r3, r2
   218ec:	d012      	beq.n	21914 <_usart_set_config+0x9c>
   218ee:	e02c      	b.n	2194a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   218f0:	231f      	movs	r3, #31
   218f2:	18fb      	adds	r3, r7, r3
   218f4:	2200      	movs	r2, #0
   218f6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   218f8:	231e      	movs	r3, #30
   218fa:	18fb      	adds	r3, r7, r3
   218fc:	2210      	movs	r2, #16
   218fe:	701a      	strb	r2, [r3, #0]
			break;
   21900:	e023      	b.n	2194a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   21902:	231f      	movs	r3, #31
   21904:	18fb      	adds	r3, r7, r3
   21906:	2200      	movs	r2, #0
   21908:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   2190a:	231e      	movs	r3, #30
   2190c:	18fb      	adds	r3, r7, r3
   2190e:	2208      	movs	r2, #8
   21910:	701a      	strb	r2, [r3, #0]
			break;
   21912:	e01a      	b.n	2194a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   21914:	231f      	movs	r3, #31
   21916:	18fb      	adds	r3, r7, r3
   21918:	2200      	movs	r2, #0
   2191a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   2191c:	231e      	movs	r3, #30
   2191e:	18fb      	adds	r3, r7, r3
   21920:	2203      	movs	r2, #3
   21922:	701a      	strb	r2, [r3, #0]
			break;
   21924:	e011      	b.n	2194a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   21926:	231f      	movs	r3, #31
   21928:	18fb      	adds	r3, r7, r3
   2192a:	2201      	movs	r2, #1
   2192c:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   2192e:	231e      	movs	r3, #30
   21930:	18fb      	adds	r3, r7, r3
   21932:	2210      	movs	r2, #16
   21934:	701a      	strb	r2, [r3, #0]
			break;
   21936:	e008      	b.n	2194a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   21938:	231f      	movs	r3, #31
   2193a:	18fb      	adds	r3, r7, r3
   2193c:	2201      	movs	r2, #1
   2193e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   21940:	231e      	movs	r3, #30
   21942:	18fb      	adds	r3, r7, r3
   21944:	2208      	movs	r2, #8
   21946:	701a      	strb	r2, [r3, #0]
			break;
   21948:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   2194a:	683b      	ldr	r3, [r7, #0]
   2194c:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   2194e:	683b      	ldr	r3, [r7, #0]
   21950:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   21952:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   21954:	683b      	ldr	r3, [r7, #0]
   21956:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   21958:	4313      	orrs	r3, r2
		config->sample_rate |
   2195a:	683a      	ldr	r2, [r7, #0]
   2195c:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   2195e:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   21960:	683a      	ldr	r2, [r7, #0]
   21962:	7e12      	ldrb	r2, [r2, #24]
   21964:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   21966:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   21968:	683a      	ldr	r2, [r7, #0]
   2196a:	2126      	movs	r1, #38	; 0x26
   2196c:	5c52      	ldrb	r2, [r2, r1]
   2196e:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   21970:	4313      	orrs	r3, r2
   21972:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   21974:	231d      	movs	r3, #29
   21976:	18fb      	adds	r3, r7, r3
   21978:	2200      	movs	r2, #0
   2197a:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   2197c:	683b      	ldr	r3, [r7, #0]
   2197e:	685b      	ldr	r3, [r3, #4]
   21980:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   21982:	68fb      	ldr	r3, [r7, #12]
   21984:	2b00      	cmp	r3, #0
   21986:	d01e      	beq.n	219c6 <_usart_set_config+0x14e>
   21988:	2280      	movs	r2, #128	; 0x80
   2198a:	0552      	lsls	r2, r2, #21
   2198c:	4293      	cmp	r3, r2
   2198e:	d14f      	bne.n	21a30 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   21990:	683b      	ldr	r3, [r7, #0]
   21992:	2227      	movs	r2, #39	; 0x27
   21994:	5c9b      	ldrb	r3, [r3, r2]
   21996:	2201      	movs	r2, #1
   21998:	4053      	eors	r3, r2
   2199a:	b2db      	uxtb	r3, r3
   2199c:	2b00      	cmp	r3, #0
   2199e:	d046      	beq.n	21a2e <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   219a0:	683b      	ldr	r3, [r7, #0]
   219a2:	6a1d      	ldr	r5, [r3, #32]
   219a4:	693b      	ldr	r3, [r7, #16]
   219a6:	b2db      	uxtb	r3, r3
   219a8:	0018      	movs	r0, r3
   219aa:	4b65      	ldr	r3, [pc, #404]	; (21b40 <_usart_set_config+0x2c8>)
   219ac:	4798      	blx	r3
   219ae:	0001      	movs	r1, r0
   219b0:	231d      	movs	r3, #29
   219b2:	18fc      	adds	r4, r7, r3
   219b4:	230a      	movs	r3, #10
   219b6:	18fb      	adds	r3, r7, r3
   219b8:	001a      	movs	r2, r3
   219ba:	0028      	movs	r0, r5
   219bc:	4b61      	ldr	r3, [pc, #388]	; (21b44 <_usart_set_config+0x2cc>)
   219be:	4798      	blx	r3
   219c0:	0003      	movs	r3, r0
   219c2:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   219c4:	e033      	b.n	21a2e <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   219c6:	683b      	ldr	r3, [r7, #0]
   219c8:	2227      	movs	r2, #39	; 0x27
   219ca:	5c9b      	ldrb	r3, [r3, r2]
   219cc:	2b00      	cmp	r3, #0
   219ce:	d014      	beq.n	219fa <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   219d0:	683b      	ldr	r3, [r7, #0]
   219d2:	6a18      	ldr	r0, [r3, #32]
   219d4:	683b      	ldr	r3, [r7, #0]
   219d6:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   219d8:	231d      	movs	r3, #29
   219da:	18fc      	adds	r4, r7, r3
   219dc:	231f      	movs	r3, #31
   219de:	18fb      	adds	r3, r7, r3
   219e0:	781d      	ldrb	r5, [r3, #0]
   219e2:	230a      	movs	r3, #10
   219e4:	18fa      	adds	r2, r7, r3
   219e6:	231e      	movs	r3, #30
   219e8:	18fb      	adds	r3, r7, r3
   219ea:	781b      	ldrb	r3, [r3, #0]
   219ec:	9300      	str	r3, [sp, #0]
   219ee:	002b      	movs	r3, r5
   219f0:	4d55      	ldr	r5, [pc, #340]	; (21b48 <_usart_set_config+0x2d0>)
   219f2:	47a8      	blx	r5
   219f4:	0003      	movs	r3, r0
   219f6:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   219f8:	e01a      	b.n	21a30 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   219fa:	683b      	ldr	r3, [r7, #0]
   219fc:	6a1d      	ldr	r5, [r3, #32]
   219fe:	693b      	ldr	r3, [r7, #16]
   21a00:	b2db      	uxtb	r3, r3
   21a02:	0018      	movs	r0, r3
   21a04:	4b4e      	ldr	r3, [pc, #312]	; (21b40 <_usart_set_config+0x2c8>)
   21a06:	4798      	blx	r3
				status_code =
   21a08:	231d      	movs	r3, #29
   21a0a:	18fc      	adds	r4, r7, r3
   21a0c:	231f      	movs	r3, #31
   21a0e:	18fb      	adds	r3, r7, r3
   21a10:	7819      	ldrb	r1, [r3, #0]
   21a12:	230a      	movs	r3, #10
   21a14:	18fa      	adds	r2, r7, r3
   21a16:	231e      	movs	r3, #30
   21a18:	18fb      	adds	r3, r7, r3
   21a1a:	781b      	ldrb	r3, [r3, #0]
   21a1c:	9300      	str	r3, [sp, #0]
   21a1e:	000b      	movs	r3, r1
   21a20:	0001      	movs	r1, r0
   21a22:	0028      	movs	r0, r5
   21a24:	4d48      	ldr	r5, [pc, #288]	; (21b48 <_usart_set_config+0x2d0>)
   21a26:	47a8      	blx	r5
   21a28:	0003      	movs	r3, r0
   21a2a:	7023      	strb	r3, [r4, #0]
			break;
   21a2c:	e000      	b.n	21a30 <_usart_set_config+0x1b8>
			break;
   21a2e:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   21a30:	231d      	movs	r3, #29
   21a32:	18fb      	adds	r3, r7, r3
   21a34:	781b      	ldrb	r3, [r3, #0]
   21a36:	2b00      	cmp	r3, #0
   21a38:	d003      	beq.n	21a42 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   21a3a:	231d      	movs	r3, #29
   21a3c:	18fb      	adds	r3, r7, r3
   21a3e:	781b      	ldrb	r3, [r3, #0]
   21a40:	e077      	b.n	21b32 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   21a42:	683b      	ldr	r3, [r7, #0]
   21a44:	7e5b      	ldrb	r3, [r3, #25]
   21a46:	2b00      	cmp	r3, #0
   21a48:	d003      	beq.n	21a52 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   21a4a:	683b      	ldr	r3, [r7, #0]
   21a4c:	7e9a      	ldrb	r2, [r3, #26]
   21a4e:	69bb      	ldr	r3, [r7, #24]
   21a50:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   21a52:	687b      	ldr	r3, [r7, #4]
   21a54:	0018      	movs	r0, r3
   21a56:	4b3d      	ldr	r3, [pc, #244]	; (21b4c <_usart_set_config+0x2d4>)
   21a58:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   21a5a:	230a      	movs	r3, #10
   21a5c:	18fb      	adds	r3, r7, r3
   21a5e:	881a      	ldrh	r2, [r3, #0]
   21a60:	69bb      	ldr	r3, [r7, #24]
   21a62:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   21a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   21a66:	68fb      	ldr	r3, [r7, #12]
   21a68:	4313      	orrs	r3, r2
   21a6a:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   21a6c:	683b      	ldr	r3, [r7, #0]
   21a6e:	2227      	movs	r2, #39	; 0x27
   21a70:	5c9b      	ldrb	r3, [r3, r2]
   21a72:	2201      	movs	r2, #1
   21a74:	4053      	eors	r3, r2
   21a76:	b2db      	uxtb	r3, r3
   21a78:	2b00      	cmp	r3, #0
   21a7a:	d003      	beq.n	21a84 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   21a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21a7e:	2204      	movs	r2, #4
   21a80:	4313      	orrs	r3, r2
   21a82:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   21a84:	683b      	ldr	r3, [r7, #0]
   21a86:	7e5b      	ldrb	r3, [r3, #25]
   21a88:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   21a8a:	683b      	ldr	r3, [r7, #0]
   21a8c:	7f1b      	ldrb	r3, [r3, #28]
   21a8e:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   21a90:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   21a92:	683b      	ldr	r3, [r7, #0]
   21a94:	7f5b      	ldrb	r3, [r3, #29]
   21a96:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   21a98:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   21a9a:	683b      	ldr	r3, [r7, #0]
   21a9c:	2124      	movs	r1, #36	; 0x24
   21a9e:	5c5b      	ldrb	r3, [r3, r1]
   21aa0:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   21aa2:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   21aa4:	683b      	ldr	r3, [r7, #0]
   21aa6:	2125      	movs	r1, #37	; 0x25
   21aa8:	5c5b      	ldrb	r3, [r3, r1]
   21aaa:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   21aac:	4313      	orrs	r3, r2
	ctrlb =  
   21aae:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   21ab0:	683b      	ldr	r3, [r7, #0]
   21ab2:	7a9b      	ldrb	r3, [r3, #10]
   21ab4:	001a      	movs	r2, r3
   21ab6:	6a3b      	ldr	r3, [r7, #32]
   21ab8:	4313      	orrs	r3, r2
   21aba:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   21abc:	683b      	ldr	r3, [r7, #0]
   21abe:	7adb      	ldrb	r3, [r3, #11]
   21ac0:	001a      	movs	r2, r3
   21ac2:	6a3b      	ldr	r3, [r7, #32]
   21ac4:	4313      	orrs	r3, r2
   21ac6:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   21ac8:	683b      	ldr	r3, [r7, #0]
   21aca:	891b      	ldrh	r3, [r3, #8]
   21acc:	2bff      	cmp	r3, #255	; 0xff
   21ace:	d00b      	beq.n	21ae8 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   21ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21ad2:	2280      	movs	r2, #128	; 0x80
   21ad4:	0452      	lsls	r2, r2, #17
   21ad6:	4313      	orrs	r3, r2
   21ad8:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   21ada:	683b      	ldr	r3, [r7, #0]
   21adc:	891b      	ldrh	r3, [r3, #8]
   21ade:	001a      	movs	r2, r3
   21ae0:	6a3b      	ldr	r3, [r7, #32]
   21ae2:	4313      	orrs	r3, r2
   21ae4:	623b      	str	r3, [r7, #32]
   21ae6:	e008      	b.n	21afa <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   21ae8:	683b      	ldr	r3, [r7, #0]
   21aea:	7edb      	ldrb	r3, [r3, #27]
   21aec:	2b00      	cmp	r3, #0
   21aee:	d004      	beq.n	21afa <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   21af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21af2:	2280      	movs	r2, #128	; 0x80
   21af4:	04d2      	lsls	r2, r2, #19
   21af6:	4313      	orrs	r3, r2
   21af8:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   21afa:	683b      	ldr	r3, [r7, #0]
   21afc:	222c      	movs	r2, #44	; 0x2c
   21afe:	5c9b      	ldrb	r3, [r3, r2]
   21b00:	2b00      	cmp	r3, #0
   21b02:	d103      	bne.n	21b0c <_usart_set_config+0x294>
   21b04:	4b12      	ldr	r3, [pc, #72]	; (21b50 <_usart_set_config+0x2d8>)
   21b06:	4798      	blx	r3
   21b08:	1e03      	subs	r3, r0, #0
   21b0a:	d003      	beq.n	21b14 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   21b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21b0e:	2280      	movs	r2, #128	; 0x80
   21b10:	4313      	orrs	r3, r2
   21b12:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   21b14:	687b      	ldr	r3, [r7, #4]
   21b16:	0018      	movs	r0, r3
   21b18:	4b0c      	ldr	r3, [pc, #48]	; (21b4c <_usart_set_config+0x2d4>)
   21b1a:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   21b1c:	69bb      	ldr	r3, [r7, #24]
   21b1e:	6a3a      	ldr	r2, [r7, #32]
   21b20:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   21b22:	687b      	ldr	r3, [r7, #4]
   21b24:	0018      	movs	r0, r3
   21b26:	4b09      	ldr	r3, [pc, #36]	; (21b4c <_usart_set_config+0x2d4>)
   21b28:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   21b2a:	69bb      	ldr	r3, [r7, #24]
   21b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   21b2e:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   21b30:	2300      	movs	r3, #0
}
   21b32:	0018      	movs	r0, r3
   21b34:	46bd      	mov	sp, r7
   21b36:	b00a      	add	sp, #40	; 0x28
   21b38:	bdb0      	pop	{r4, r5, r7, pc}
   21b3a:	46c0      	nop			; (mov r8, r8)
   21b3c:	0001ec19 	.word	0x0001ec19
   21b40:	00024bd9 	.word	0x00024bd9
   21b44:	0001e793 	.word	0x0001e793
   21b48:	0001e811 	.word	0x0001e811
   21b4c:	00021855 	.word	0x00021855
   21b50:	00021815 	.word	0x00021815

00021b54 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   21b54:	b590      	push	{r4, r7, lr}
   21b56:	b093      	sub	sp, #76	; 0x4c
   21b58:	af00      	add	r7, sp, #0
   21b5a:	60f8      	str	r0, [r7, #12]
   21b5c:	60b9      	str	r1, [r7, #8]
   21b5e:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   21b60:	233b      	movs	r3, #59	; 0x3b
   21b62:	18fb      	adds	r3, r7, r3
   21b64:	2200      	movs	r2, #0
   21b66:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   21b68:	68fb      	ldr	r3, [r7, #12]
   21b6a:	68ba      	ldr	r2, [r7, #8]
   21b6c:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   21b6e:	68fb      	ldr	r3, [r7, #12]
   21b70:	681b      	ldr	r3, [r3, #0]
   21b72:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   21b74:	68fb      	ldr	r3, [r7, #12]
   21b76:	681b      	ldr	r3, [r3, #0]
   21b78:	0018      	movs	r0, r3
   21b7a:	4b86      	ldr	r3, [pc, #536]	; (21d94 <usart_init+0x240>)
   21b7c:	4798      	blx	r3
   21b7e:	0003      	movs	r3, r0
   21b80:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   21b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21b84:	3302      	adds	r3, #2
   21b86:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   21b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21b8a:	3314      	adds	r3, #20
   21b8c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   21b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   21b90:	681b      	ldr	r3, [r3, #0]
   21b92:	2201      	movs	r2, #1
   21b94:	4013      	ands	r3, r2
   21b96:	d001      	beq.n	21b9c <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   21b98:	2305      	movs	r3, #5
   21b9a:	e0f6      	b.n	21d8a <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   21b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   21b9e:	681b      	ldr	r3, [r3, #0]
   21ba0:	2202      	movs	r2, #2
   21ba2:	4013      	ands	r3, r2
   21ba4:	d001      	beq.n	21baa <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   21ba6:	231c      	movs	r3, #28
   21ba8:	e0ef      	b.n	21d8a <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   21baa:	2201      	movs	r2, #1
   21bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   21bae:	409a      	lsls	r2, r3
   21bb0:	0013      	movs	r3, r2
   21bb2:	0019      	movs	r1, r3
   21bb4:	2002      	movs	r0, #2
   21bb6:	4b78      	ldr	r3, [pc, #480]	; (21d98 <usart_init+0x244>)
   21bb8:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   21bba:	2324      	movs	r3, #36	; 0x24
   21bbc:	18fb      	adds	r3, r7, r3
   21bbe:	0018      	movs	r0, r3
   21bc0:	4b76      	ldr	r3, [pc, #472]	; (21d9c <usart_init+0x248>)
   21bc2:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   21bc4:	687b      	ldr	r3, [r7, #4]
   21bc6:	222d      	movs	r2, #45	; 0x2d
   21bc8:	5c9a      	ldrb	r2, [r3, r2]
   21bca:	2324      	movs	r3, #36	; 0x24
   21bcc:	18fb      	adds	r3, r7, r3
   21bce:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   21bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   21bd2:	b2db      	uxtb	r3, r3
   21bd4:	2224      	movs	r2, #36	; 0x24
   21bd6:	18ba      	adds	r2, r7, r2
   21bd8:	0011      	movs	r1, r2
   21bda:	0018      	movs	r0, r3
   21bdc:	4b70      	ldr	r3, [pc, #448]	; (21da0 <usart_init+0x24c>)
   21bde:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   21be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   21be2:	b2db      	uxtb	r3, r3
   21be4:	0018      	movs	r0, r3
   21be6:	4b6f      	ldr	r3, [pc, #444]	; (21da4 <usart_init+0x250>)
   21be8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   21bea:	687b      	ldr	r3, [r7, #4]
   21bec:	222d      	movs	r2, #45	; 0x2d
   21bee:	5c9b      	ldrb	r3, [r3, r2]
   21bf0:	2100      	movs	r1, #0
   21bf2:	0018      	movs	r0, r3
   21bf4:	4b6c      	ldr	r3, [pc, #432]	; (21da8 <usart_init+0x254>)
   21bf6:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   21bf8:	687b      	ldr	r3, [r7, #4]
   21bfa:	7ada      	ldrb	r2, [r3, #11]
   21bfc:	68fb      	ldr	r3, [r7, #12]
   21bfe:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   21c00:	687b      	ldr	r3, [r7, #4]
   21c02:	2224      	movs	r2, #36	; 0x24
   21c04:	5c9a      	ldrb	r2, [r3, r2]
   21c06:	68fb      	ldr	r3, [r7, #12]
   21c08:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   21c0a:	687b      	ldr	r3, [r7, #4]
   21c0c:	2225      	movs	r2, #37	; 0x25
   21c0e:	5c9a      	ldrb	r2, [r3, r2]
   21c10:	68fb      	ldr	r3, [r7, #12]
   21c12:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   21c14:	687b      	ldr	r3, [r7, #4]
   21c16:	7eda      	ldrb	r2, [r3, #27]
   21c18:	68fb      	ldr	r3, [r7, #12]
   21c1a:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   21c1c:	687b      	ldr	r3, [r7, #4]
   21c1e:	7f1a      	ldrb	r2, [r3, #28]
   21c20:	68fb      	ldr	r3, [r7, #12]
   21c22:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   21c24:	233b      	movs	r3, #59	; 0x3b
   21c26:	18fc      	adds	r4, r7, r3
   21c28:	687a      	ldr	r2, [r7, #4]
   21c2a:	68fb      	ldr	r3, [r7, #12]
   21c2c:	0011      	movs	r1, r2
   21c2e:	0018      	movs	r0, r3
   21c30:	4b5e      	ldr	r3, [pc, #376]	; (21dac <usart_init+0x258>)
   21c32:	4798      	blx	r3
   21c34:	0003      	movs	r3, r0
   21c36:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   21c38:	233b      	movs	r3, #59	; 0x3b
   21c3a:	18fb      	adds	r3, r7, r3
   21c3c:	781b      	ldrb	r3, [r3, #0]
   21c3e:	2b00      	cmp	r3, #0
   21c40:	d003      	beq.n	21c4a <usart_init+0xf6>
		return status_code;
   21c42:	233b      	movs	r3, #59	; 0x3b
   21c44:	18fb      	adds	r3, r7, r3
   21c46:	781b      	ldrb	r3, [r3, #0]
   21c48:	e09f      	b.n	21d8a <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   21c4a:	2320      	movs	r3, #32
   21c4c:	18fb      	adds	r3, r7, r3
   21c4e:	0018      	movs	r0, r3
   21c50:	4b57      	ldr	r3, [pc, #348]	; (21db0 <usart_init+0x25c>)
   21c52:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   21c54:	2320      	movs	r3, #32
   21c56:	18fb      	adds	r3, r7, r3
   21c58:	2200      	movs	r2, #0
   21c5a:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   21c5c:	2320      	movs	r3, #32
   21c5e:	18fb      	adds	r3, r7, r3
   21c60:	2200      	movs	r2, #0
   21c62:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   21c64:	687b      	ldr	r3, [r7, #4]
   21c66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   21c68:	2310      	movs	r3, #16
   21c6a:	18fb      	adds	r3, r7, r3
   21c6c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   21c6e:	687b      	ldr	r3, [r7, #4]
   21c70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   21c72:	2310      	movs	r3, #16
   21c74:	18fb      	adds	r3, r7, r3
   21c76:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   21c78:	687b      	ldr	r3, [r7, #4]
   21c7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   21c7c:	2310      	movs	r3, #16
   21c7e:	18fb      	adds	r3, r7, r3
   21c80:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   21c82:	687b      	ldr	r3, [r7, #4]
   21c84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   21c86:	2310      	movs	r3, #16
   21c88:	18fb      	adds	r3, r7, r3
   21c8a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   21c8c:	2347      	movs	r3, #71	; 0x47
   21c8e:	18fb      	adds	r3, r7, r3
   21c90:	2200      	movs	r2, #0
   21c92:	701a      	strb	r2, [r3, #0]
   21c94:	e02c      	b.n	21cf0 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   21c96:	2347      	movs	r3, #71	; 0x47
   21c98:	18fb      	adds	r3, r7, r3
   21c9a:	781a      	ldrb	r2, [r3, #0]
   21c9c:	2310      	movs	r3, #16
   21c9e:	18fb      	adds	r3, r7, r3
   21ca0:	0092      	lsls	r2, r2, #2
   21ca2:	58d3      	ldr	r3, [r2, r3]
   21ca4:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   21ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   21ca8:	2b00      	cmp	r3, #0
   21caa:	d109      	bne.n	21cc0 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   21cac:	2347      	movs	r3, #71	; 0x47
   21cae:	18fb      	adds	r3, r7, r3
   21cb0:	781a      	ldrb	r2, [r3, #0]
   21cb2:	68bb      	ldr	r3, [r7, #8]
   21cb4:	0011      	movs	r1, r2
   21cb6:	0018      	movs	r0, r3
   21cb8:	4b3e      	ldr	r3, [pc, #248]	; (21db4 <usart_init+0x260>)
   21cba:	4798      	blx	r3
   21cbc:	0003      	movs	r3, r0
   21cbe:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   21cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   21cc2:	3301      	adds	r3, #1
   21cc4:	d00d      	beq.n	21ce2 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   21cc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   21cc8:	b2da      	uxtb	r2, r3
   21cca:	2320      	movs	r3, #32
   21ccc:	18fb      	adds	r3, r7, r3
   21cce:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   21cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   21cd2:	0c1b      	lsrs	r3, r3, #16
   21cd4:	b2db      	uxtb	r3, r3
   21cd6:	2220      	movs	r2, #32
   21cd8:	18ba      	adds	r2, r7, r2
   21cda:	0011      	movs	r1, r2
   21cdc:	0018      	movs	r0, r3
   21cde:	4b36      	ldr	r3, [pc, #216]	; (21db8 <usart_init+0x264>)
   21ce0:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   21ce2:	2347      	movs	r3, #71	; 0x47
   21ce4:	18fb      	adds	r3, r7, r3
   21ce6:	781a      	ldrb	r2, [r3, #0]
   21ce8:	2347      	movs	r3, #71	; 0x47
   21cea:	18fb      	adds	r3, r7, r3
   21cec:	3201      	adds	r2, #1
   21cee:	701a      	strb	r2, [r3, #0]
   21cf0:	2347      	movs	r3, #71	; 0x47
   21cf2:	18fb      	adds	r3, r7, r3
   21cf4:	781b      	ldrb	r3, [r3, #0]
   21cf6:	2b03      	cmp	r3, #3
   21cf8:	d9cd      	bls.n	21c96 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   21cfa:	2300      	movs	r3, #0
   21cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   21cfe:	e00a      	b.n	21d16 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   21d00:	68fa      	ldr	r2, [r7, #12]
   21d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   21d04:	3302      	adds	r3, #2
   21d06:	009b      	lsls	r3, r3, #2
   21d08:	18d3      	adds	r3, r2, r3
   21d0a:	3304      	adds	r3, #4
   21d0c:	2200      	movs	r2, #0
   21d0e:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   21d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   21d12:	3301      	adds	r3, #1
   21d14:	63fb      	str	r3, [r7, #60]	; 0x3c
   21d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   21d18:	2b05      	cmp	r3, #5
   21d1a:	d9f1      	bls.n	21d00 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   21d1c:	68fb      	ldr	r3, [r7, #12]
   21d1e:	2200      	movs	r2, #0
   21d20:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   21d22:	68fb      	ldr	r3, [r7, #12]
   21d24:	2200      	movs	r2, #0
   21d26:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   21d28:	68fb      	ldr	r3, [r7, #12]
   21d2a:	2200      	movs	r2, #0
   21d2c:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   21d2e:	68fb      	ldr	r3, [r7, #12]
   21d30:	2200      	movs	r2, #0
   21d32:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   21d34:	68fb      	ldr	r3, [r7, #12]
   21d36:	2230      	movs	r2, #48	; 0x30
   21d38:	2100      	movs	r1, #0
   21d3a:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   21d3c:	68fb      	ldr	r3, [r7, #12]
   21d3e:	2231      	movs	r2, #49	; 0x31
   21d40:	2100      	movs	r1, #0
   21d42:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   21d44:	68fb      	ldr	r3, [r7, #12]
   21d46:	2232      	movs	r2, #50	; 0x32
   21d48:	2100      	movs	r1, #0
   21d4a:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   21d4c:	68fb      	ldr	r3, [r7, #12]
   21d4e:	2233      	movs	r2, #51	; 0x33
   21d50:	2100      	movs	r1, #0
   21d52:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   21d54:	68fb      	ldr	r3, [r7, #12]
   21d56:	681b      	ldr	r3, [r3, #0]
   21d58:	2227      	movs	r2, #39	; 0x27
   21d5a:	18bc      	adds	r4, r7, r2
   21d5c:	0018      	movs	r0, r3
   21d5e:	4b0d      	ldr	r3, [pc, #52]	; (21d94 <usart_init+0x240>)
   21d60:	4798      	blx	r3
   21d62:	0003      	movs	r3, r0
   21d64:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   21d66:	4a15      	ldr	r2, [pc, #84]	; (21dbc <usart_init+0x268>)
   21d68:	2327      	movs	r3, #39	; 0x27
   21d6a:	18fb      	adds	r3, r7, r3
   21d6c:	781b      	ldrb	r3, [r3, #0]
   21d6e:	0011      	movs	r1, r2
   21d70:	0018      	movs	r0, r3
   21d72:	4b13      	ldr	r3, [pc, #76]	; (21dc0 <usart_init+0x26c>)
   21d74:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   21d76:	2327      	movs	r3, #39	; 0x27
   21d78:	18fb      	adds	r3, r7, r3
   21d7a:	781a      	ldrb	r2, [r3, #0]
   21d7c:	4b11      	ldr	r3, [pc, #68]	; (21dc4 <usart_init+0x270>)
   21d7e:	0092      	lsls	r2, r2, #2
   21d80:	68f9      	ldr	r1, [r7, #12]
   21d82:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   21d84:	233b      	movs	r3, #59	; 0x3b
   21d86:	18fb      	adds	r3, r7, r3
   21d88:	781b      	ldrb	r3, [r3, #0]
}
   21d8a:	0018      	movs	r0, r3
   21d8c:	46bd      	mov	sp, r7
   21d8e:	b013      	add	sp, #76	; 0x4c
   21d90:	bd90      	pop	{r4, r7, pc}
   21d92:	46c0      	nop			; (mov r8, r8)
   21d94:	0001ec19 	.word	0x0001ec19
   21d98:	00021791 	.word	0x00021791
   21d9c:	00021779 	.word	0x00021779
   21da0:	00024ab5 	.word	0x00024ab5
   21da4:	00024af9 	.word	0x00024af9
   21da8:	0001e9d1 	.word	0x0001e9d1
   21dac:	00021879 	.word	0x00021879
   21db0:	000217ed 	.word	0x000217ed
   21db4:	0001ea5d 	.word	0x0001ea5d
   21db8:	00024da1 	.word	0x00024da1
   21dbc:	00021f9d 	.word	0x00021f9d
   21dc0:	000222f1 	.word	0x000222f1
   21dc4:	20000968 	.word	0x20000968

00021dc8 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
   21dc8:	b580      	push	{r7, lr}
   21dca:	b084      	sub	sp, #16
   21dcc:	af00      	add	r7, sp, #0
   21dce:	6078      	str	r0, [r7, #4]
   21dd0:	000a      	movs	r2, r1
   21dd2:	1cbb      	adds	r3, r7, #2
   21dd4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   21dd6:	687b      	ldr	r3, [r7, #4]
   21dd8:	681b      	ldr	r3, [r3, #0]
   21dda:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   21ddc:	687b      	ldr	r3, [r7, #4]
   21dde:	79db      	ldrb	r3, [r3, #7]
   21de0:	2201      	movs	r2, #1
   21de2:	4053      	eors	r3, r2
   21de4:	b2db      	uxtb	r3, r3
   21de6:	2b00      	cmp	r3, #0
   21de8:	d001      	beq.n	21dee <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
   21dea:	231c      	movs	r3, #28
   21dec:	e017      	b.n	21e1e <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
   21dee:	687b      	ldr	r3, [r7, #4]
   21df0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   21df2:	b29b      	uxth	r3, r3
   21df4:	2b00      	cmp	r3, #0
   21df6:	d001      	beq.n	21dfc <usart_write_wait+0x34>
		return STATUS_BUSY;
   21df8:	2305      	movs	r3, #5
   21dfa:	e010      	b.n	21e1e <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   21dfc:	687b      	ldr	r3, [r7, #4]
   21dfe:	0018      	movs	r0, r3
   21e00:	4b09      	ldr	r3, [pc, #36]	; (21e28 <usart_write_wait+0x60>)
   21e02:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
   21e04:	68fb      	ldr	r3, [r7, #12]
   21e06:	1cba      	adds	r2, r7, #2
   21e08:	8812      	ldrh	r2, [r2, #0]
   21e0a:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
   21e0c:	46c0      	nop			; (mov r8, r8)
   21e0e:	68fb      	ldr	r3, [r7, #12]
   21e10:	7e1b      	ldrb	r3, [r3, #24]
   21e12:	b2db      	uxtb	r3, r3
   21e14:	001a      	movs	r2, r3
   21e16:	2302      	movs	r3, #2
   21e18:	4013      	ands	r3, r2
   21e1a:	d0f8      	beq.n	21e0e <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
   21e1c:	2300      	movs	r3, #0
}
   21e1e:	0018      	movs	r0, r3
   21e20:	46bd      	mov	sp, r7
   21e22:	b004      	add	sp, #16
   21e24:	bd80      	pop	{r7, pc}
   21e26:	46c0      	nop			; (mov r8, r8)
   21e28:	00021855 	.word	0x00021855

00021e2c <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   21e2c:	b580      	push	{r7, lr}
   21e2e:	b08a      	sub	sp, #40	; 0x28
   21e30:	af00      	add	r7, sp, #0
   21e32:	60f8      	str	r0, [r7, #12]
   21e34:	60b9      	str	r1, [r7, #8]
   21e36:	1dbb      	adds	r3, r7, #6
   21e38:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
   21e3a:	1dbb      	adds	r3, r7, #6
   21e3c:	881b      	ldrh	r3, [r3, #0]
   21e3e:	2b00      	cmp	r3, #0
   21e40:	d101      	bne.n	21e46 <usart_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
   21e42:	2317      	movs	r3, #23
   21e44:	e07e      	b.n	21f44 <usart_write_buffer_wait+0x118>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   21e46:	68fb      	ldr	r3, [r7, #12]
   21e48:	79db      	ldrb	r3, [r3, #7]
   21e4a:	2201      	movs	r2, #1
   21e4c:	4053      	eors	r3, r2
   21e4e:	b2db      	uxtb	r3, r3
   21e50:	2b00      	cmp	r3, #0
   21e52:	d001      	beq.n	21e58 <usart_write_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
   21e54:	231c      	movs	r3, #28
   21e56:	e075      	b.n	21f44 <usart_write_buffer_wait+0x118>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   21e58:	68fb      	ldr	r3, [r7, #12]
   21e5a:	681b      	ldr	r3, [r3, #0]
   21e5c:	617b      	str	r3, [r7, #20]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   21e5e:	68fb      	ldr	r3, [r7, #12]
   21e60:	0018      	movs	r0, r3
   21e62:	4b3a      	ldr	r3, [pc, #232]	; (21f4c <usart_write_buffer_wait+0x120>)
   21e64:	4798      	blx	r3

	uint16_t tx_pos = 0;
   21e66:	2326      	movs	r3, #38	; 0x26
   21e68:	18fb      	adds	r3, r7, r3
   21e6a:	2200      	movs	r2, #0
   21e6c:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being transferred */
	while (length--) {
   21e6e:	e048      	b.n	21f02 <usart_write_buffer_wait+0xd6>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   21e70:	2300      	movs	r3, #0
   21e72:	623b      	str	r3, [r7, #32]
   21e74:	e00f      	b.n	21e96 <usart_write_buffer_wait+0x6a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
   21e76:	697b      	ldr	r3, [r7, #20]
   21e78:	7e1b      	ldrb	r3, [r3, #24]
   21e7a:	b2db      	uxtb	r3, r3
   21e7c:	001a      	movs	r2, r3
   21e7e:	2301      	movs	r3, #1
   21e80:	4013      	ands	r3, r2
   21e82:	d10d      	bne.n	21ea0 <usart_write_buffer_wait+0x74>
				break;
			} else if (i == USART_TIMEOUT) {
   21e84:	6a3b      	ldr	r3, [r7, #32]
   21e86:	4a32      	ldr	r2, [pc, #200]	; (21f50 <usart_write_buffer_wait+0x124>)
   21e88:	4293      	cmp	r3, r2
   21e8a:	d101      	bne.n	21e90 <usart_write_buffer_wait+0x64>
				return STATUS_ERR_TIMEOUT;
   21e8c:	2312      	movs	r3, #18
   21e8e:	e059      	b.n	21f44 <usart_write_buffer_wait+0x118>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   21e90:	6a3b      	ldr	r3, [r7, #32]
   21e92:	3301      	adds	r3, #1
   21e94:	623b      	str	r3, [r7, #32]
   21e96:	6a3b      	ldr	r3, [r7, #32]
   21e98:	4a2d      	ldr	r2, [pc, #180]	; (21f50 <usart_write_buffer_wait+0x124>)
   21e9a:	4293      	cmp	r3, r2
   21e9c:	d9eb      	bls.n	21e76 <usart_write_buffer_wait+0x4a>
   21e9e:	e000      	b.n	21ea2 <usart_write_buffer_wait+0x76>
				break;
   21ea0:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   21ea2:	2326      	movs	r3, #38	; 0x26
   21ea4:	18fb      	adds	r3, r7, r3
   21ea6:	881b      	ldrh	r3, [r3, #0]
   21ea8:	2226      	movs	r2, #38	; 0x26
   21eaa:	18ba      	adds	r2, r7, r2
   21eac:	1c59      	adds	r1, r3, #1
   21eae:	8011      	strh	r1, [r2, #0]
   21eb0:	001a      	movs	r2, r3
   21eb2:	68bb      	ldr	r3, [r7, #8]
   21eb4:	189b      	adds	r3, r3, r2
   21eb6:	781a      	ldrb	r2, [r3, #0]
   21eb8:	231e      	movs	r3, #30
   21eba:	18fb      	adds	r3, r7, r3
   21ebc:	801a      	strh	r2, [r3, #0]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   21ebe:	68fb      	ldr	r3, [r7, #12]
   21ec0:	795b      	ldrb	r3, [r3, #5]
   21ec2:	2b01      	cmp	r3, #1
   21ec4:	d115      	bne.n	21ef2 <usart_write_buffer_wait+0xc6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   21ec6:	2326      	movs	r3, #38	; 0x26
   21ec8:	18fb      	adds	r3, r7, r3
   21eca:	881b      	ldrh	r3, [r3, #0]
   21ecc:	2226      	movs	r2, #38	; 0x26
   21ece:	18ba      	adds	r2, r7, r2
   21ed0:	1c59      	adds	r1, r3, #1
   21ed2:	8011      	strh	r1, [r2, #0]
   21ed4:	001a      	movs	r2, r3
   21ed6:	68bb      	ldr	r3, [r7, #8]
   21ed8:	189b      	adds	r3, r3, r2
   21eda:	781b      	ldrb	r3, [r3, #0]
   21edc:	021b      	lsls	r3, r3, #8
   21ede:	b21a      	sxth	r2, r3
   21ee0:	231e      	movs	r3, #30
   21ee2:	18fb      	adds	r3, r7, r3
   21ee4:	2100      	movs	r1, #0
   21ee6:	5e5b      	ldrsh	r3, [r3, r1]
   21ee8:	4313      	orrs	r3, r2
   21eea:	b21a      	sxth	r2, r3
   21eec:	231e      	movs	r3, #30
   21eee:	18fb      	adds	r3, r7, r3
   21ef0:	801a      	strh	r2, [r3, #0]
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
   21ef2:	231e      	movs	r3, #30
   21ef4:	18fb      	adds	r3, r7, r3
   21ef6:	881a      	ldrh	r2, [r3, #0]
   21ef8:	68fb      	ldr	r3, [r7, #12]
   21efa:	0011      	movs	r1, r2
   21efc:	0018      	movs	r0, r3
   21efe:	4b15      	ldr	r3, [pc, #84]	; (21f54 <usart_write_buffer_wait+0x128>)
   21f00:	4798      	blx	r3
	while (length--) {
   21f02:	1dbb      	adds	r3, r7, #6
   21f04:	881b      	ldrh	r3, [r3, #0]
   21f06:	1dba      	adds	r2, r7, #6
   21f08:	1e59      	subs	r1, r3, #1
   21f0a:	8011      	strh	r1, [r2, #0]
   21f0c:	2b00      	cmp	r3, #0
   21f0e:	d1af      	bne.n	21e70 <usart_write_buffer_wait+0x44>
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   21f10:	2300      	movs	r3, #0
   21f12:	61bb      	str	r3, [r7, #24]
   21f14:	e00f      	b.n	21f36 <usart_write_buffer_wait+0x10a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
   21f16:	697b      	ldr	r3, [r7, #20]
   21f18:	7e1b      	ldrb	r3, [r3, #24]
   21f1a:	b2db      	uxtb	r3, r3
   21f1c:	001a      	movs	r2, r3
   21f1e:	2302      	movs	r3, #2
   21f20:	4013      	ands	r3, r2
   21f22:	d10d      	bne.n	21f40 <usart_write_buffer_wait+0x114>
			break;
		} else if (i == USART_TIMEOUT) {
   21f24:	69bb      	ldr	r3, [r7, #24]
   21f26:	4a0a      	ldr	r2, [pc, #40]	; (21f50 <usart_write_buffer_wait+0x124>)
   21f28:	4293      	cmp	r3, r2
   21f2a:	d101      	bne.n	21f30 <usart_write_buffer_wait+0x104>
			return STATUS_ERR_TIMEOUT;
   21f2c:	2312      	movs	r3, #18
   21f2e:	e009      	b.n	21f44 <usart_write_buffer_wait+0x118>
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   21f30:	69bb      	ldr	r3, [r7, #24]
   21f32:	3301      	adds	r3, #1
   21f34:	61bb      	str	r3, [r7, #24]
   21f36:	69bb      	ldr	r3, [r7, #24]
   21f38:	4a05      	ldr	r2, [pc, #20]	; (21f50 <usart_write_buffer_wait+0x124>)
   21f3a:	4293      	cmp	r3, r2
   21f3c:	d9eb      	bls.n	21f16 <usart_write_buffer_wait+0xea>
   21f3e:	e000      	b.n	21f42 <usart_write_buffer_wait+0x116>
			break;
   21f40:	46c0      	nop			; (mov r8, r8)
		}
	}

	return STATUS_OK;
   21f42:	2300      	movs	r3, #0
}
   21f44:	0018      	movs	r0, r3
   21f46:	46bd      	mov	sp, r7
   21f48:	b00a      	add	sp, #40	; 0x28
   21f4a:	bd80      	pop	{r7, pc}
   21f4c:	00021855 	.word	0x00021855
   21f50:	0000ffff 	.word	0x0000ffff
   21f54:	00021dc9 	.word	0x00021dc9

00021f58 <usart_is_syncing>:
{
   21f58:	b580      	push	{r7, lr}
   21f5a:	b084      	sub	sp, #16
   21f5c:	af00      	add	r7, sp, #0
   21f5e:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   21f60:	687b      	ldr	r3, [r7, #4]
   21f62:	681b      	ldr	r3, [r3, #0]
   21f64:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   21f66:	68fb      	ldr	r3, [r7, #12]
   21f68:	69db      	ldr	r3, [r3, #28]
   21f6a:	1e5a      	subs	r2, r3, #1
   21f6c:	4193      	sbcs	r3, r2
   21f6e:	b2db      	uxtb	r3, r3
}
   21f70:	0018      	movs	r0, r3
   21f72:	46bd      	mov	sp, r7
   21f74:	b004      	add	sp, #16
   21f76:	bd80      	pop	{r7, pc}

00021f78 <_usart_wait_for_sync>:
{
   21f78:	b580      	push	{r7, lr}
   21f7a:	b082      	sub	sp, #8
   21f7c:	af00      	add	r7, sp, #0
   21f7e:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   21f80:	46c0      	nop			; (mov r8, r8)
   21f82:	687b      	ldr	r3, [r7, #4]
   21f84:	0018      	movs	r0, r3
   21f86:	4b04      	ldr	r3, [pc, #16]	; (21f98 <_usart_wait_for_sync+0x20>)
   21f88:	4798      	blx	r3
   21f8a:	1e03      	subs	r3, r0, #0
   21f8c:	d1f9      	bne.n	21f82 <_usart_wait_for_sync+0xa>
}
   21f8e:	46c0      	nop			; (mov r8, r8)
   21f90:	46bd      	mov	sp, r7
   21f92:	b002      	add	sp, #8
   21f94:	bd80      	pop	{r7, pc}
   21f96:	46c0      	nop			; (mov r8, r8)
   21f98:	00021f59 	.word	0x00021f59

00021f9c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   21f9c:	b580      	push	{r7, lr}
   21f9e:	b088      	sub	sp, #32
   21fa0:	af00      	add	r7, sp, #0
   21fa2:	0002      	movs	r2, r0
   21fa4:	1dfb      	adds	r3, r7, #7
   21fa6:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   21fa8:	1dfb      	adds	r3, r7, #7
   21faa:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   21fac:	4ba3      	ldr	r3, [pc, #652]	; (2223c <_usart_interrupt_handler+0x2a0>)
   21fae:	0092      	lsls	r2, r2, #2
   21fb0:	58d3      	ldr	r3, [r2, r3]
   21fb2:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   21fb4:	69bb      	ldr	r3, [r7, #24]
   21fb6:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   21fb8:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   21fba:	69bb      	ldr	r3, [r7, #24]
   21fbc:	0018      	movs	r0, r3
   21fbe:	4ba0      	ldr	r3, [pc, #640]	; (22240 <_usart_interrupt_handler+0x2a4>)
   21fc0:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   21fc2:	697b      	ldr	r3, [r7, #20]
   21fc4:	7e1b      	ldrb	r3, [r3, #24]
   21fc6:	b2da      	uxtb	r2, r3
   21fc8:	2312      	movs	r3, #18
   21fca:	18fb      	adds	r3, r7, r3
   21fcc:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   21fce:	697b      	ldr	r3, [r7, #20]
   21fd0:	7d9b      	ldrb	r3, [r3, #22]
   21fd2:	b2db      	uxtb	r3, r3
   21fd4:	b29a      	uxth	r2, r3
   21fd6:	2312      	movs	r3, #18
   21fd8:	18fb      	adds	r3, r7, r3
   21fda:	2112      	movs	r1, #18
   21fdc:	1879      	adds	r1, r7, r1
   21fde:	8809      	ldrh	r1, [r1, #0]
   21fe0:	400a      	ands	r2, r1
   21fe2:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   21fe4:	69bb      	ldr	r3, [r7, #24]
   21fe6:	2230      	movs	r2, #48	; 0x30
   21fe8:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   21fea:	69ba      	ldr	r2, [r7, #24]
   21fec:	2131      	movs	r1, #49	; 0x31
   21fee:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   21ff0:	4013      	ands	r3, r2
   21ff2:	b2da      	uxtb	r2, r3
   21ff4:	2310      	movs	r3, #16
   21ff6:	18fb      	adds	r3, r7, r3
   21ff8:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   21ffa:	2312      	movs	r3, #18
   21ffc:	18fb      	adds	r3, r7, r3
   21ffe:	881b      	ldrh	r3, [r3, #0]
   22000:	2201      	movs	r2, #1
   22002:	4013      	ands	r3, r2
   22004:	d044      	beq.n	22090 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   22006:	69bb      	ldr	r3, [r7, #24]
   22008:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2200a:	b29b      	uxth	r3, r3
   2200c:	2b00      	cmp	r3, #0
   2200e:	d03c      	beq.n	2208a <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   22010:	69bb      	ldr	r3, [r7, #24]
   22012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22014:	781b      	ldrb	r3, [r3, #0]
   22016:	b2da      	uxtb	r2, r3
   22018:	231c      	movs	r3, #28
   2201a:	18fb      	adds	r3, r7, r3
   2201c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   2201e:	69bb      	ldr	r3, [r7, #24]
   22020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22022:	1c5a      	adds	r2, r3, #1
   22024:	69bb      	ldr	r3, [r7, #24]
   22026:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   22028:	69bb      	ldr	r3, [r7, #24]
   2202a:	795b      	ldrb	r3, [r3, #5]
   2202c:	2b01      	cmp	r3, #1
   2202e:	d113      	bne.n	22058 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   22030:	69bb      	ldr	r3, [r7, #24]
   22032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22034:	781b      	ldrb	r3, [r3, #0]
   22036:	b2db      	uxtb	r3, r3
   22038:	021b      	lsls	r3, r3, #8
   2203a:	b21a      	sxth	r2, r3
   2203c:	231c      	movs	r3, #28
   2203e:	18fb      	adds	r3, r7, r3
   22040:	2100      	movs	r1, #0
   22042:	5e5b      	ldrsh	r3, [r3, r1]
   22044:	4313      	orrs	r3, r2
   22046:	b21a      	sxth	r2, r3
   22048:	231c      	movs	r3, #28
   2204a:	18fb      	adds	r3, r7, r3
   2204c:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   2204e:	69bb      	ldr	r3, [r7, #24]
   22050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22052:	1c5a      	adds	r2, r3, #1
   22054:	69bb      	ldr	r3, [r7, #24]
   22056:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   22058:	231c      	movs	r3, #28
   2205a:	18fb      	adds	r3, r7, r3
   2205c:	881b      	ldrh	r3, [r3, #0]
   2205e:	05db      	lsls	r3, r3, #23
   22060:	0ddb      	lsrs	r3, r3, #23
   22062:	b29a      	uxth	r2, r3
   22064:	697b      	ldr	r3, [r7, #20]
   22066:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   22068:	69bb      	ldr	r3, [r7, #24]
   2206a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2206c:	b29b      	uxth	r3, r3
   2206e:	3b01      	subs	r3, #1
   22070:	b29b      	uxth	r3, r3
   22072:	69ba      	ldr	r2, [r7, #24]
   22074:	1c19      	adds	r1, r3, #0
   22076:	85d1      	strh	r1, [r2, #46]	; 0x2e
   22078:	2b00      	cmp	r3, #0
   2207a:	d109      	bne.n	22090 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   2207c:	697b      	ldr	r3, [r7, #20]
   2207e:	2201      	movs	r2, #1
   22080:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   22082:	697b      	ldr	r3, [r7, #20]
   22084:	2202      	movs	r2, #2
   22086:	759a      	strb	r2, [r3, #22]
   22088:	e002      	b.n	22090 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   2208a:	697b      	ldr	r3, [r7, #20]
   2208c:	2201      	movs	r2, #1
   2208e:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   22090:	2312      	movs	r3, #18
   22092:	18fb      	adds	r3, r7, r3
   22094:	881b      	ldrh	r3, [r3, #0]
   22096:	2202      	movs	r2, #2
   22098:	4013      	ands	r3, r2
   2209a:	d011      	beq.n	220c0 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   2209c:	697b      	ldr	r3, [r7, #20]
   2209e:	2202      	movs	r2, #2
   220a0:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   220a2:	69bb      	ldr	r3, [r7, #24]
   220a4:	2233      	movs	r2, #51	; 0x33
   220a6:	2100      	movs	r1, #0
   220a8:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   220aa:	2310      	movs	r3, #16
   220ac:	18fb      	adds	r3, r7, r3
   220ae:	881b      	ldrh	r3, [r3, #0]
   220b0:	2201      	movs	r2, #1
   220b2:	4013      	ands	r3, r2
   220b4:	d004      	beq.n	220c0 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   220b6:	69bb      	ldr	r3, [r7, #24]
   220b8:	68db      	ldr	r3, [r3, #12]
   220ba:	69ba      	ldr	r2, [r7, #24]
   220bc:	0010      	movs	r0, r2
   220be:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   220c0:	2312      	movs	r3, #18
   220c2:	18fb      	adds	r3, r7, r3
   220c4:	881b      	ldrh	r3, [r3, #0]
   220c6:	2204      	movs	r2, #4
   220c8:	4013      	ands	r3, r2
   220ca:	d100      	bne.n	220ce <_usart_interrupt_handler+0x132>
   220cc:	e0bd      	b.n	2224a <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   220ce:	69bb      	ldr	r3, [r7, #24]
   220d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   220d2:	b29b      	uxth	r3, r3
   220d4:	2b00      	cmp	r3, #0
   220d6:	d100      	bne.n	220da <_usart_interrupt_handler+0x13e>
   220d8:	e0b4      	b.n	22244 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   220da:	697b      	ldr	r3, [r7, #20]
   220dc:	8b5b      	ldrh	r3, [r3, #26]
   220de:	b29b      	uxth	r3, r3
   220e0:	b2da      	uxtb	r2, r3
   220e2:	231f      	movs	r3, #31
   220e4:	18fb      	adds	r3, r7, r3
   220e6:	213f      	movs	r1, #63	; 0x3f
   220e8:	400a      	ands	r2, r1
   220ea:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   220ec:	231f      	movs	r3, #31
   220ee:	18fb      	adds	r3, r7, r3
   220f0:	781b      	ldrb	r3, [r3, #0]
   220f2:	2208      	movs	r2, #8
   220f4:	4013      	ands	r3, r2
   220f6:	d007      	beq.n	22108 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   220f8:	231f      	movs	r3, #31
   220fa:	18fb      	adds	r3, r7, r3
   220fc:	221f      	movs	r2, #31
   220fe:	18ba      	adds	r2, r7, r2
   22100:	7812      	ldrb	r2, [r2, #0]
   22102:	2108      	movs	r1, #8
   22104:	438a      	bics	r2, r1
   22106:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   22108:	231f      	movs	r3, #31
   2210a:	18fb      	adds	r3, r7, r3
   2210c:	781b      	ldrb	r3, [r3, #0]
   2210e:	2b00      	cmp	r3, #0
   22110:	d050      	beq.n	221b4 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   22112:	231f      	movs	r3, #31
   22114:	18fb      	adds	r3, r7, r3
   22116:	781b      	ldrb	r3, [r3, #0]
   22118:	2202      	movs	r2, #2
   2211a:	4013      	ands	r3, r2
   2211c:	d007      	beq.n	2212e <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   2211e:	69bb      	ldr	r3, [r7, #24]
   22120:	2232      	movs	r2, #50	; 0x32
   22122:	211a      	movs	r1, #26
   22124:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   22126:	697b      	ldr	r3, [r7, #20]
   22128:	2202      	movs	r2, #2
   2212a:	835a      	strh	r2, [r3, #26]
   2212c:	e036      	b.n	2219c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   2212e:	231f      	movs	r3, #31
   22130:	18fb      	adds	r3, r7, r3
   22132:	781b      	ldrb	r3, [r3, #0]
   22134:	2204      	movs	r2, #4
   22136:	4013      	ands	r3, r2
   22138:	d007      	beq.n	2214a <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   2213a:	69bb      	ldr	r3, [r7, #24]
   2213c:	2232      	movs	r2, #50	; 0x32
   2213e:	211e      	movs	r1, #30
   22140:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   22142:	697b      	ldr	r3, [r7, #20]
   22144:	2204      	movs	r2, #4
   22146:	835a      	strh	r2, [r3, #26]
   22148:	e028      	b.n	2219c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   2214a:	231f      	movs	r3, #31
   2214c:	18fb      	adds	r3, r7, r3
   2214e:	781b      	ldrb	r3, [r3, #0]
   22150:	2201      	movs	r2, #1
   22152:	4013      	ands	r3, r2
   22154:	d007      	beq.n	22166 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   22156:	69bb      	ldr	r3, [r7, #24]
   22158:	2232      	movs	r2, #50	; 0x32
   2215a:	2113      	movs	r1, #19
   2215c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   2215e:	697b      	ldr	r3, [r7, #20]
   22160:	2201      	movs	r2, #1
   22162:	835a      	strh	r2, [r3, #26]
   22164:	e01a      	b.n	2219c <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   22166:	231f      	movs	r3, #31
   22168:	18fb      	adds	r3, r7, r3
   2216a:	781b      	ldrb	r3, [r3, #0]
   2216c:	2210      	movs	r2, #16
   2216e:	4013      	ands	r3, r2
   22170:	d007      	beq.n	22182 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   22172:	69bb      	ldr	r3, [r7, #24]
   22174:	2232      	movs	r2, #50	; 0x32
   22176:	2142      	movs	r1, #66	; 0x42
   22178:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   2217a:	697b      	ldr	r3, [r7, #20]
   2217c:	2210      	movs	r2, #16
   2217e:	835a      	strh	r2, [r3, #26]
   22180:	e00c      	b.n	2219c <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   22182:	231f      	movs	r3, #31
   22184:	18fb      	adds	r3, r7, r3
   22186:	781b      	ldrb	r3, [r3, #0]
   22188:	2220      	movs	r2, #32
   2218a:	4013      	ands	r3, r2
   2218c:	d006      	beq.n	2219c <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   2218e:	69bb      	ldr	r3, [r7, #24]
   22190:	2232      	movs	r2, #50	; 0x32
   22192:	2141      	movs	r1, #65	; 0x41
   22194:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   22196:	697b      	ldr	r3, [r7, #20]
   22198:	2220      	movs	r2, #32
   2219a:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   2219c:	2310      	movs	r3, #16
   2219e:	18fb      	adds	r3, r7, r3
   221a0:	881b      	ldrh	r3, [r3, #0]
   221a2:	2204      	movs	r2, #4
   221a4:	4013      	ands	r3, r2
				if (callback_status
   221a6:	d050      	beq.n	2224a <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   221a8:	69bb      	ldr	r3, [r7, #24]
   221aa:	695b      	ldr	r3, [r3, #20]
   221ac:	69ba      	ldr	r2, [r7, #24]
   221ae:	0010      	movs	r0, r2
   221b0:	4798      	blx	r3
   221b2:	e04a      	b.n	2224a <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   221b4:	697b      	ldr	r3, [r7, #20]
   221b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   221b8:	b29a      	uxth	r2, r3
   221ba:	230e      	movs	r3, #14
   221bc:	18fb      	adds	r3, r7, r3
   221be:	05d2      	lsls	r2, r2, #23
   221c0:	0dd2      	lsrs	r2, r2, #23
   221c2:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   221c4:	69bb      	ldr	r3, [r7, #24]
   221c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   221c8:	220e      	movs	r2, #14
   221ca:	18ba      	adds	r2, r7, r2
   221cc:	8812      	ldrh	r2, [r2, #0]
   221ce:	b2d2      	uxtb	r2, r2
   221d0:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   221d2:	69bb      	ldr	r3, [r7, #24]
   221d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   221d6:	1c5a      	adds	r2, r3, #1
   221d8:	69bb      	ldr	r3, [r7, #24]
   221da:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   221dc:	69bb      	ldr	r3, [r7, #24]
   221de:	795b      	ldrb	r3, [r3, #5]
   221e0:	2b01      	cmp	r3, #1
   221e2:	d10d      	bne.n	22200 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   221e4:	69bb      	ldr	r3, [r7, #24]
   221e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   221e8:	220e      	movs	r2, #14
   221ea:	18ba      	adds	r2, r7, r2
   221ec:	8812      	ldrh	r2, [r2, #0]
   221ee:	0a12      	lsrs	r2, r2, #8
   221f0:	b292      	uxth	r2, r2
   221f2:	b2d2      	uxtb	r2, r2
   221f4:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   221f6:	69bb      	ldr	r3, [r7, #24]
   221f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   221fa:	1c5a      	adds	r2, r3, #1
   221fc:	69bb      	ldr	r3, [r7, #24]
   221fe:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   22200:	69bb      	ldr	r3, [r7, #24]
   22202:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   22204:	b29b      	uxth	r3, r3
   22206:	3b01      	subs	r3, #1
   22208:	b29b      	uxth	r3, r3
   2220a:	69ba      	ldr	r2, [r7, #24]
   2220c:	1c19      	adds	r1, r3, #0
   2220e:	8591      	strh	r1, [r2, #44]	; 0x2c
   22210:	2b00      	cmp	r3, #0
   22212:	d11a      	bne.n	2224a <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   22214:	697b      	ldr	r3, [r7, #20]
   22216:	2204      	movs	r2, #4
   22218:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   2221a:	69bb      	ldr	r3, [r7, #24]
   2221c:	2232      	movs	r2, #50	; 0x32
   2221e:	2100      	movs	r1, #0
   22220:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   22222:	2310      	movs	r3, #16
   22224:	18fb      	adds	r3, r7, r3
   22226:	881b      	ldrh	r3, [r3, #0]
   22228:	2202      	movs	r2, #2
   2222a:	4013      	ands	r3, r2
					if (callback_status
   2222c:	d00d      	beq.n	2224a <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   2222e:	69bb      	ldr	r3, [r7, #24]
   22230:	691b      	ldr	r3, [r3, #16]
   22232:	69ba      	ldr	r2, [r7, #24]
   22234:	0010      	movs	r0, r2
   22236:	4798      	blx	r3
   22238:	e007      	b.n	2224a <_usart_interrupt_handler+0x2ae>
   2223a:	46c0      	nop			; (mov r8, r8)
   2223c:	20000968 	.word	0x20000968
   22240:	00021f79 	.word	0x00021f79
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   22244:	697b      	ldr	r3, [r7, #20]
   22246:	2204      	movs	r2, #4
   22248:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   2224a:	2312      	movs	r3, #18
   2224c:	18fb      	adds	r3, r7, r3
   2224e:	881b      	ldrh	r3, [r3, #0]
   22250:	2210      	movs	r2, #16
   22252:	4013      	ands	r3, r2
   22254:	d010      	beq.n	22278 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   22256:	697b      	ldr	r3, [r7, #20]
   22258:	2210      	movs	r2, #16
   2225a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   2225c:	697b      	ldr	r3, [r7, #20]
   2225e:	2210      	movs	r2, #16
   22260:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   22262:	2310      	movs	r3, #16
   22264:	18fb      	adds	r3, r7, r3
   22266:	881b      	ldrh	r3, [r3, #0]
   22268:	2210      	movs	r2, #16
   2226a:	4013      	ands	r3, r2
   2226c:	d004      	beq.n	22278 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   2226e:	69bb      	ldr	r3, [r7, #24]
   22270:	69db      	ldr	r3, [r3, #28]
   22272:	69ba      	ldr	r2, [r7, #24]
   22274:	0010      	movs	r0, r2
   22276:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   22278:	2312      	movs	r3, #18
   2227a:	18fb      	adds	r3, r7, r3
   2227c:	881b      	ldrh	r3, [r3, #0]
   2227e:	2220      	movs	r2, #32
   22280:	4013      	ands	r3, r2
   22282:	d010      	beq.n	222a6 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   22284:	697b      	ldr	r3, [r7, #20]
   22286:	2220      	movs	r2, #32
   22288:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   2228a:	697b      	ldr	r3, [r7, #20]
   2228c:	2220      	movs	r2, #32
   2228e:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   22290:	2310      	movs	r3, #16
   22292:	18fb      	adds	r3, r7, r3
   22294:	881b      	ldrh	r3, [r3, #0]
   22296:	2208      	movs	r2, #8
   22298:	4013      	ands	r3, r2
   2229a:	d004      	beq.n	222a6 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   2229c:	69bb      	ldr	r3, [r7, #24]
   2229e:	699b      	ldr	r3, [r3, #24]
   222a0:	69ba      	ldr	r2, [r7, #24]
   222a2:	0010      	movs	r0, r2
   222a4:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   222a6:	2312      	movs	r3, #18
   222a8:	18fb      	adds	r3, r7, r3
   222aa:	881b      	ldrh	r3, [r3, #0]
   222ac:	2208      	movs	r2, #8
   222ae:	4013      	ands	r3, r2
   222b0:	d010      	beq.n	222d4 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   222b2:	697b      	ldr	r3, [r7, #20]
   222b4:	2208      	movs	r2, #8
   222b6:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   222b8:	697b      	ldr	r3, [r7, #20]
   222ba:	2208      	movs	r2, #8
   222bc:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   222be:	2310      	movs	r3, #16
   222c0:	18fb      	adds	r3, r7, r3
   222c2:	881b      	ldrh	r3, [r3, #0]
   222c4:	2220      	movs	r2, #32
   222c6:	4013      	ands	r3, r2
   222c8:	d004      	beq.n	222d4 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   222ca:	69bb      	ldr	r3, [r7, #24]
   222cc:	6a1b      	ldr	r3, [r3, #32]
   222ce:	69ba      	ldr	r2, [r7, #24]
   222d0:	0010      	movs	r0, r2
   222d2:	4798      	blx	r3
		}
	}
#endif
}
   222d4:	46c0      	nop			; (mov r8, r8)
   222d6:	46bd      	mov	sp, r7
   222d8:	b008      	add	sp, #32
   222da:	bd80      	pop	{r7, pc}

000222dc <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   222dc:	b580      	push	{r7, lr}
   222de:	b082      	sub	sp, #8
   222e0:	af00      	add	r7, sp, #0
   222e2:	0002      	movs	r2, r0
   222e4:	1dfb      	adds	r3, r7, #7
   222e6:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   222e8:	46c0      	nop			; (mov r8, r8)
   222ea:	46bd      	mov	sp, r7
   222ec:	b002      	add	sp, #8
   222ee:	bd80      	pop	{r7, pc}

000222f0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   222f0:	b580      	push	{r7, lr}
   222f2:	b084      	sub	sp, #16
   222f4:	af00      	add	r7, sp, #0
   222f6:	0002      	movs	r2, r0
   222f8:	6039      	str	r1, [r7, #0]
   222fa:	1dfb      	adds	r3, r7, #7
   222fc:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   222fe:	4b13      	ldr	r3, [pc, #76]	; (2234c <_sercom_set_handler+0x5c>)
   22300:	781b      	ldrb	r3, [r3, #0]
   22302:	2201      	movs	r2, #1
   22304:	4053      	eors	r3, r2
   22306:	b2db      	uxtb	r3, r3
   22308:	2b00      	cmp	r3, #0
   2230a:	d015      	beq.n	22338 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   2230c:	2300      	movs	r3, #0
   2230e:	60fb      	str	r3, [r7, #12]
   22310:	e00c      	b.n	2232c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   22312:	4b0f      	ldr	r3, [pc, #60]	; (22350 <_sercom_set_handler+0x60>)
   22314:	68fa      	ldr	r2, [r7, #12]
   22316:	0092      	lsls	r2, r2, #2
   22318:	490e      	ldr	r1, [pc, #56]	; (22354 <_sercom_set_handler+0x64>)
   2231a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   2231c:	4b0e      	ldr	r3, [pc, #56]	; (22358 <_sercom_set_handler+0x68>)
   2231e:	68fa      	ldr	r2, [r7, #12]
   22320:	0092      	lsls	r2, r2, #2
   22322:	2100      	movs	r1, #0
   22324:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   22326:	68fb      	ldr	r3, [r7, #12]
   22328:	3301      	adds	r3, #1
   2232a:	60fb      	str	r3, [r7, #12]
   2232c:	68fb      	ldr	r3, [r7, #12]
   2232e:	2b05      	cmp	r3, #5
   22330:	d9ef      	bls.n	22312 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   22332:	4b06      	ldr	r3, [pc, #24]	; (2234c <_sercom_set_handler+0x5c>)
   22334:	2201      	movs	r2, #1
   22336:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   22338:	1dfb      	adds	r3, r7, #7
   2233a:	781a      	ldrb	r2, [r3, #0]
   2233c:	4b04      	ldr	r3, [pc, #16]	; (22350 <_sercom_set_handler+0x60>)
   2233e:	0092      	lsls	r2, r2, #2
   22340:	6839      	ldr	r1, [r7, #0]
   22342:	50d1      	str	r1, [r2, r3]
}
   22344:	46c0      	nop			; (mov r8, r8)
   22346:	46bd      	mov	sp, r7
   22348:	b004      	add	sp, #16
   2234a:	bd80      	pop	{r7, pc}
   2234c:	200003f8 	.word	0x200003f8
   22350:	200003fc 	.word	0x200003fc
   22354:	000222dd 	.word	0x000222dd
   22358:	20000968 	.word	0x20000968

0002235c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   2235c:	b590      	push	{r4, r7, lr}
   2235e:	b085      	sub	sp, #20
   22360:	af00      	add	r7, sp, #0
   22362:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   22364:	2308      	movs	r3, #8
   22366:	18fb      	adds	r3, r7, r3
   22368:	4a0b      	ldr	r2, [pc, #44]	; (22398 <_sercom_get_interrupt_vector+0x3c>)
   2236a:	6811      	ldr	r1, [r2, #0]
   2236c:	6019      	str	r1, [r3, #0]
   2236e:	8892      	ldrh	r2, [r2, #4]
   22370:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   22372:	230f      	movs	r3, #15
   22374:	18fc      	adds	r4, r7, r3
   22376:	687b      	ldr	r3, [r7, #4]
   22378:	0018      	movs	r0, r3
   2237a:	4b08      	ldr	r3, [pc, #32]	; (2239c <_sercom_get_interrupt_vector+0x40>)
   2237c:	4798      	blx	r3
   2237e:	0003      	movs	r3, r0
   22380:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   22382:	230f      	movs	r3, #15
   22384:	18fb      	adds	r3, r7, r3
   22386:	781b      	ldrb	r3, [r3, #0]
   22388:	2208      	movs	r2, #8
   2238a:	18ba      	adds	r2, r7, r2
   2238c:	5cd3      	ldrb	r3, [r2, r3]
   2238e:	b25b      	sxtb	r3, r3
}
   22390:	0018      	movs	r0, r3
   22392:	46bd      	mov	sp, r7
   22394:	b005      	add	sp, #20
   22396:	bd90      	pop	{r4, r7, pc}
   22398:	0002ac40 	.word	0x0002ac40
   2239c:	0001ec19 	.word	0x0001ec19

000223a0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   223a0:	b580      	push	{r7, lr}
   223a2:	af00      	add	r7, sp, #0
   223a4:	4b03      	ldr	r3, [pc, #12]	; (223b4 <SERCOM0_Handler+0x14>)
   223a6:	681b      	ldr	r3, [r3, #0]
   223a8:	2000      	movs	r0, #0
   223aa:	4798      	blx	r3
   223ac:	46c0      	nop			; (mov r8, r8)
   223ae:	46bd      	mov	sp, r7
   223b0:	bd80      	pop	{r7, pc}
   223b2:	46c0      	nop			; (mov r8, r8)
   223b4:	200003fc 	.word	0x200003fc

000223b8 <SERCOM1_Handler>:
   223b8:	b580      	push	{r7, lr}
   223ba:	af00      	add	r7, sp, #0
   223bc:	4b03      	ldr	r3, [pc, #12]	; (223cc <SERCOM1_Handler+0x14>)
   223be:	685b      	ldr	r3, [r3, #4]
   223c0:	2001      	movs	r0, #1
   223c2:	4798      	blx	r3
   223c4:	46c0      	nop			; (mov r8, r8)
   223c6:	46bd      	mov	sp, r7
   223c8:	bd80      	pop	{r7, pc}
   223ca:	46c0      	nop			; (mov r8, r8)
   223cc:	200003fc 	.word	0x200003fc

000223d0 <SERCOM2_Handler>:
   223d0:	b580      	push	{r7, lr}
   223d2:	af00      	add	r7, sp, #0
   223d4:	4b03      	ldr	r3, [pc, #12]	; (223e4 <SERCOM2_Handler+0x14>)
   223d6:	689b      	ldr	r3, [r3, #8]
   223d8:	2002      	movs	r0, #2
   223da:	4798      	blx	r3
   223dc:	46c0      	nop			; (mov r8, r8)
   223de:	46bd      	mov	sp, r7
   223e0:	bd80      	pop	{r7, pc}
   223e2:	46c0      	nop			; (mov r8, r8)
   223e4:	200003fc 	.word	0x200003fc

000223e8 <SERCOM3_Handler>:
   223e8:	b580      	push	{r7, lr}
   223ea:	af00      	add	r7, sp, #0
   223ec:	4b03      	ldr	r3, [pc, #12]	; (223fc <SERCOM3_Handler+0x14>)
   223ee:	68db      	ldr	r3, [r3, #12]
   223f0:	2003      	movs	r0, #3
   223f2:	4798      	blx	r3
   223f4:	46c0      	nop			; (mov r8, r8)
   223f6:	46bd      	mov	sp, r7
   223f8:	bd80      	pop	{r7, pc}
   223fa:	46c0      	nop			; (mov r8, r8)
   223fc:	200003fc 	.word	0x200003fc

00022400 <SERCOM4_Handler>:
   22400:	b580      	push	{r7, lr}
   22402:	af00      	add	r7, sp, #0
   22404:	4b03      	ldr	r3, [pc, #12]	; (22414 <SERCOM4_Handler+0x14>)
   22406:	691b      	ldr	r3, [r3, #16]
   22408:	2004      	movs	r0, #4
   2240a:	4798      	blx	r3
   2240c:	46c0      	nop			; (mov r8, r8)
   2240e:	46bd      	mov	sp, r7
   22410:	bd80      	pop	{r7, pc}
   22412:	46c0      	nop			; (mov r8, r8)
   22414:	200003fc 	.word	0x200003fc

00022418 <SERCOM5_Handler>:
   22418:	b580      	push	{r7, lr}
   2241a:	af00      	add	r7, sp, #0
   2241c:	4b03      	ldr	r3, [pc, #12]	; (2242c <SERCOM5_Handler+0x14>)
   2241e:	695b      	ldr	r3, [r3, #20]
   22420:	2005      	movs	r0, #5
   22422:	4798      	blx	r3
   22424:	46c0      	nop			; (mov r8, r8)
   22426:	46bd      	mov	sp, r7
   22428:	bd80      	pop	{r7, pc}
   2242a:	46c0      	nop			; (mov r8, r8)
   2242c:	200003fc 	.word	0x200003fc

00022430 <_extint_get_eic_from_channel>:
{
   22430:	b580      	push	{r7, lr}
   22432:	b084      	sub	sp, #16
   22434:	af00      	add	r7, sp, #0
   22436:	0002      	movs	r2, r0
   22438:	1dfb      	adds	r3, r7, #7
   2243a:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   2243c:	230f      	movs	r3, #15
   2243e:	18fb      	adds	r3, r7, r3
   22440:	1dfa      	adds	r2, r7, #7
   22442:	7812      	ldrb	r2, [r2, #0]
   22444:	0952      	lsrs	r2, r2, #5
   22446:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   22448:	230f      	movs	r3, #15
   2244a:	18fb      	adds	r3, r7, r3
   2244c:	781b      	ldrb	r3, [r3, #0]
   2244e:	2b00      	cmp	r3, #0
   22450:	d10c      	bne.n	2246c <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   22452:	4b09      	ldr	r3, [pc, #36]	; (22478 <_extint_get_eic_from_channel+0x48>)
   22454:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   22456:	230f      	movs	r3, #15
   22458:	18fb      	adds	r3, r7, r3
   2245a:	781b      	ldrb	r3, [r3, #0]
   2245c:	009b      	lsls	r3, r3, #2
   2245e:	2210      	movs	r2, #16
   22460:	4694      	mov	ip, r2
   22462:	44bc      	add	ip, r7
   22464:	4463      	add	r3, ip
   22466:	3b08      	subs	r3, #8
   22468:	681b      	ldr	r3, [r3, #0]
   2246a:	e000      	b.n	2246e <_extint_get_eic_from_channel+0x3e>
		return NULL;
   2246c:	2300      	movs	r3, #0
}
   2246e:	0018      	movs	r0, r3
   22470:	46bd      	mov	sp, r7
   22472:	b004      	add	sp, #16
   22474:	bd80      	pop	{r7, pc}
   22476:	46c0      	nop			; (mov r8, r8)
   22478:	40001800 	.word	0x40001800

0002247c <extint_chan_is_detected>:
{
   2247c:	b580      	push	{r7, lr}
   2247e:	b084      	sub	sp, #16
   22480:	af00      	add	r7, sp, #0
   22482:	0002      	movs	r2, r0
   22484:	1dfb      	adds	r3, r7, #7
   22486:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   22488:	1dfb      	adds	r3, r7, #7
   2248a:	781b      	ldrb	r3, [r3, #0]
   2248c:	0018      	movs	r0, r3
   2248e:	4b0b      	ldr	r3, [pc, #44]	; (224bc <extint_chan_is_detected+0x40>)
   22490:	4798      	blx	r3
   22492:	0003      	movs	r3, r0
   22494:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   22496:	1dfb      	adds	r3, r7, #7
   22498:	781b      	ldrb	r3, [r3, #0]
   2249a:	221f      	movs	r2, #31
   2249c:	4013      	ands	r3, r2
   2249e:	2201      	movs	r2, #1
   224a0:	409a      	lsls	r2, r3
   224a2:	0013      	movs	r3, r2
   224a4:	60bb      	str	r3, [r7, #8]
	return (eic_module->INTFLAG.reg & eic_mask);
   224a6:	68fb      	ldr	r3, [r7, #12]
   224a8:	691b      	ldr	r3, [r3, #16]
   224aa:	68ba      	ldr	r2, [r7, #8]
   224ac:	4013      	ands	r3, r2
   224ae:	1e5a      	subs	r2, r3, #1
   224b0:	4193      	sbcs	r3, r2
   224b2:	b2db      	uxtb	r3, r3
}
   224b4:	0018      	movs	r0, r3
   224b6:	46bd      	mov	sp, r7
   224b8:	b004      	add	sp, #16
   224ba:	bd80      	pop	{r7, pc}
   224bc:	00022431 	.word	0x00022431

000224c0 <extint_chan_clear_detected>:
{
   224c0:	b580      	push	{r7, lr}
   224c2:	b084      	sub	sp, #16
   224c4:	af00      	add	r7, sp, #0
   224c6:	0002      	movs	r2, r0
   224c8:	1dfb      	adds	r3, r7, #7
   224ca:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   224cc:	1dfb      	adds	r3, r7, #7
   224ce:	781b      	ldrb	r3, [r3, #0]
   224d0:	0018      	movs	r0, r3
   224d2:	4b09      	ldr	r3, [pc, #36]	; (224f8 <extint_chan_clear_detected+0x38>)
   224d4:	4798      	blx	r3
   224d6:	0003      	movs	r3, r0
   224d8:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   224da:	1dfb      	adds	r3, r7, #7
   224dc:	781b      	ldrb	r3, [r3, #0]
   224de:	221f      	movs	r2, #31
   224e0:	4013      	ands	r3, r2
   224e2:	2201      	movs	r2, #1
   224e4:	409a      	lsls	r2, r3
   224e6:	0013      	movs	r3, r2
   224e8:	60bb      	str	r3, [r7, #8]
	eic_module->INTFLAG.reg = eic_mask;
   224ea:	68fb      	ldr	r3, [r7, #12]
   224ec:	68ba      	ldr	r2, [r7, #8]
   224ee:	611a      	str	r2, [r3, #16]
}
   224f0:	46c0      	nop			; (mov r8, r8)
   224f2:	46bd      	mov	sp, r7
   224f4:	b004      	add	sp, #16
   224f6:	bd80      	pop	{r7, pc}
   224f8:	00022431 	.word	0x00022431

000224fc <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   224fc:	b580      	push	{r7, lr}
   224fe:	b082      	sub	sp, #8
   22500:	af00      	add	r7, sp, #0
   22502:	6078      	str	r0, [r7, #4]
   22504:	0008      	movs	r0, r1
   22506:	0011      	movs	r1, r2
   22508:	1cfb      	adds	r3, r7, #3
   2250a:	1c02      	adds	r2, r0, #0
   2250c:	701a      	strb	r2, [r3, #0]
   2250e:	1cbb      	adds	r3, r7, #2
   22510:	1c0a      	adds	r2, r1, #0
   22512:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   22514:	1cbb      	adds	r3, r7, #2
   22516:	781b      	ldrb	r3, [r3, #0]
   22518:	2b00      	cmp	r3, #0
   2251a:	d001      	beq.n	22520 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   2251c:	2317      	movs	r3, #23
   2251e:	e019      	b.n	22554 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   22520:	1cfb      	adds	r3, r7, #3
   22522:	781a      	ldrb	r2, [r3, #0]
   22524:	4b0d      	ldr	r3, [pc, #52]	; (2255c <extint_register_callback+0x60>)
   22526:	0092      	lsls	r2, r2, #2
   22528:	58d3      	ldr	r3, [r2, r3]
   2252a:	2b00      	cmp	r3, #0
   2252c:	d107      	bne.n	2253e <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   2252e:	1cfb      	adds	r3, r7, #3
   22530:	781a      	ldrb	r2, [r3, #0]
   22532:	4b0a      	ldr	r3, [pc, #40]	; (2255c <extint_register_callback+0x60>)
   22534:	0092      	lsls	r2, r2, #2
   22536:	6879      	ldr	r1, [r7, #4]
   22538:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   2253a:	2300      	movs	r3, #0
   2253c:	e00a      	b.n	22554 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   2253e:	1cfb      	adds	r3, r7, #3
   22540:	781a      	ldrb	r2, [r3, #0]
   22542:	4b06      	ldr	r3, [pc, #24]	; (2255c <extint_register_callback+0x60>)
   22544:	0092      	lsls	r2, r2, #2
   22546:	58d2      	ldr	r2, [r2, r3]
   22548:	687b      	ldr	r3, [r7, #4]
   2254a:	429a      	cmp	r2, r3
   2254c:	d101      	bne.n	22552 <extint_register_callback+0x56>
		return STATUS_OK;
   2254e:	2300      	movs	r3, #0
   22550:	e000      	b.n	22554 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   22552:	231d      	movs	r3, #29
}
   22554:	0018      	movs	r0, r3
   22556:	46bd      	mov	sp, r7
   22558:	b002      	add	sp, #8
   2255a:	bd80      	pop	{r7, pc}
   2255c:	20000900 	.word	0x20000900

00022560 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   22560:	b580      	push	{r7, lr}
   22562:	b084      	sub	sp, #16
   22564:	af00      	add	r7, sp, #0
   22566:	0002      	movs	r2, r0
   22568:	1dfb      	adds	r3, r7, #7
   2256a:	701a      	strb	r2, [r3, #0]
   2256c:	1dbb      	adds	r3, r7, #6
   2256e:	1c0a      	adds	r2, r1, #0
   22570:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   22572:	1dbb      	adds	r3, r7, #6
   22574:	781b      	ldrb	r3, [r3, #0]
   22576:	2b00      	cmp	r3, #0
   22578:	d10e      	bne.n	22598 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   2257a:	1dfb      	adds	r3, r7, #7
   2257c:	781b      	ldrb	r3, [r3, #0]
   2257e:	0018      	movs	r0, r3
   22580:	4b08      	ldr	r3, [pc, #32]	; (225a4 <extint_chan_enable_callback+0x44>)
   22582:	4798      	blx	r3
   22584:	0003      	movs	r3, r0
   22586:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   22588:	1dfb      	adds	r3, r7, #7
   2258a:	781b      	ldrb	r3, [r3, #0]
   2258c:	2201      	movs	r2, #1
   2258e:	409a      	lsls	r2, r3
   22590:	68fb      	ldr	r3, [r7, #12]
   22592:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   22594:	2300      	movs	r3, #0
   22596:	e000      	b.n	2259a <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   22598:	2317      	movs	r3, #23
}
   2259a:	0018      	movs	r0, r3
   2259c:	46bd      	mov	sp, r7
   2259e:	b004      	add	sp, #16
   225a0:	bd80      	pop	{r7, pc}
   225a2:	46c0      	nop			; (mov r8, r8)
   225a4:	00022431 	.word	0x00022431

000225a8 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   225a8:	b580      	push	{r7, lr}
   225aa:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   225ac:	4b15      	ldr	r3, [pc, #84]	; (22604 <EIC_Handler+0x5c>)
   225ae:	2200      	movs	r2, #0
   225b0:	701a      	strb	r2, [r3, #0]
   225b2:	e020      	b.n	225f6 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   225b4:	4b13      	ldr	r3, [pc, #76]	; (22604 <EIC_Handler+0x5c>)
   225b6:	781b      	ldrb	r3, [r3, #0]
   225b8:	0018      	movs	r0, r3
   225ba:	4b13      	ldr	r3, [pc, #76]	; (22608 <EIC_Handler+0x60>)
   225bc:	4798      	blx	r3
   225be:	1e03      	subs	r3, r0, #0
   225c0:	d013      	beq.n	225ea <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   225c2:	4b10      	ldr	r3, [pc, #64]	; (22604 <EIC_Handler+0x5c>)
   225c4:	781b      	ldrb	r3, [r3, #0]
   225c6:	0018      	movs	r0, r3
   225c8:	4b10      	ldr	r3, [pc, #64]	; (2260c <EIC_Handler+0x64>)
   225ca:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   225cc:	4b0d      	ldr	r3, [pc, #52]	; (22604 <EIC_Handler+0x5c>)
   225ce:	781b      	ldrb	r3, [r3, #0]
   225d0:	001a      	movs	r2, r3
   225d2:	4b0f      	ldr	r3, [pc, #60]	; (22610 <EIC_Handler+0x68>)
   225d4:	0092      	lsls	r2, r2, #2
   225d6:	58d3      	ldr	r3, [r2, r3]
   225d8:	2b00      	cmp	r3, #0
   225da:	d006      	beq.n	225ea <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   225dc:	4b09      	ldr	r3, [pc, #36]	; (22604 <EIC_Handler+0x5c>)
   225de:	781b      	ldrb	r3, [r3, #0]
   225e0:	001a      	movs	r2, r3
   225e2:	4b0b      	ldr	r3, [pc, #44]	; (22610 <EIC_Handler+0x68>)
   225e4:	0092      	lsls	r2, r2, #2
   225e6:	58d3      	ldr	r3, [r2, r3]
   225e8:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   225ea:	4b06      	ldr	r3, [pc, #24]	; (22604 <EIC_Handler+0x5c>)
   225ec:	781b      	ldrb	r3, [r3, #0]
   225ee:	3301      	adds	r3, #1
   225f0:	b2da      	uxtb	r2, r3
   225f2:	4b04      	ldr	r3, [pc, #16]	; (22604 <EIC_Handler+0x5c>)
   225f4:	701a      	strb	r2, [r3, #0]
   225f6:	4b03      	ldr	r3, [pc, #12]	; (22604 <EIC_Handler+0x5c>)
   225f8:	781b      	ldrb	r3, [r3, #0]
   225fa:	2b0f      	cmp	r3, #15
   225fc:	d9da      	bls.n	225b4 <EIC_Handler+0xc>
			}
		}
	}
}
   225fe:	46c0      	nop			; (mov r8, r8)
   22600:	46bd      	mov	sp, r7
   22602:	bd80      	pop	{r7, pc}
   22604:	20000980 	.word	0x20000980
   22608:	0002247d 	.word	0x0002247d
   2260c:	000224c1 	.word	0x000224c1
   22610:	20000900 	.word	0x20000900

00022614 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   22614:	b580      	push	{r7, lr}
   22616:	b082      	sub	sp, #8
   22618:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   2261a:	4b15      	ldr	r3, [pc, #84]	; (22670 <EVSYS_Handler+0x5c>)
   2261c:	691b      	ldr	r3, [r3, #16]
   2261e:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   22620:	4b14      	ldr	r3, [pc, #80]	; (22674 <EVSYS_Handler+0x60>)
   22622:	699b      	ldr	r3, [r3, #24]
   22624:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   22626:	4b12      	ldr	r3, [pc, #72]	; (22670 <EVSYS_Handler+0x5c>)
   22628:	689a      	ldr	r2, [r3, #8]
   2262a:	683b      	ldr	r3, [r7, #0]
   2262c:	431a      	orrs	r2, r3
   2262e:	4b10      	ldr	r3, [pc, #64]	; (22670 <EVSYS_Handler+0x5c>)
   22630:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   22632:	4b10      	ldr	r3, [pc, #64]	; (22674 <EVSYS_Handler+0x60>)
   22634:	4a10      	ldr	r2, [pc, #64]	; (22678 <EVSYS_Handler+0x64>)
   22636:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   22638:	e008      	b.n	2264c <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   2263a:	687b      	ldr	r3, [r7, #4]
   2263c:	685a      	ldr	r2, [r3, #4]
   2263e:	687b      	ldr	r3, [r7, #4]
   22640:	681b      	ldr	r3, [r3, #0]
   22642:	0018      	movs	r0, r3
   22644:	4790      	blx	r2
		current_hook = current_hook->next;
   22646:	687b      	ldr	r3, [r7, #4]
   22648:	689b      	ldr	r3, [r3, #8]
   2264a:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   2264c:	687b      	ldr	r3, [r7, #4]
   2264e:	2b00      	cmp	r3, #0
   22650:	d1f3      	bne.n	2263a <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   22652:	4b07      	ldr	r3, [pc, #28]	; (22670 <EVSYS_Handler+0x5c>)
   22654:	68db      	ldr	r3, [r3, #12]
   22656:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   22658:	4b05      	ldr	r3, [pc, #20]	; (22670 <EVSYS_Handler+0x5c>)
   2265a:	689b      	ldr	r3, [r3, #8]
   2265c:	683a      	ldr	r2, [r7, #0]
   2265e:	43d2      	mvns	r2, r2
   22660:	401a      	ands	r2, r3
   22662:	4b03      	ldr	r3, [pc, #12]	; (22670 <EVSYS_Handler+0x5c>)
   22664:	609a      	str	r2, [r3, #8]
}
   22666:	46c0      	nop			; (mov r8, r8)
   22668:	46bd      	mov	sp, r7
   2266a:	b002      	add	sp, #8
   2266c:	bd80      	pop	{r7, pc}
   2266e:	46c0      	nop			; (mov r8, r8)
   22670:	20000014 	.word	0x20000014
   22674:	42000400 	.word	0x42000400
   22678:	0f0fffff 	.word	0x0f0fffff

0002267c <system_gclk_chan_get_config_defaults>:
{
   2267c:	b580      	push	{r7, lr}
   2267e:	b082      	sub	sp, #8
   22680:	af00      	add	r7, sp, #0
   22682:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   22684:	687b      	ldr	r3, [r7, #4]
   22686:	2200      	movs	r2, #0
   22688:	701a      	strb	r2, [r3, #0]
}
   2268a:	46c0      	nop			; (mov r8, r8)
   2268c:	46bd      	mov	sp, r7
   2268e:	b002      	add	sp, #8
   22690:	bd80      	pop	{r7, pc}
	...

00022694 <system_apb_clock_set_mask>:
{
   22694:	b580      	push	{r7, lr}
   22696:	b082      	sub	sp, #8
   22698:	af00      	add	r7, sp, #0
   2269a:	0002      	movs	r2, r0
   2269c:	6039      	str	r1, [r7, #0]
   2269e:	1dfb      	adds	r3, r7, #7
   226a0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   226a2:	1dfb      	adds	r3, r7, #7
   226a4:	781b      	ldrb	r3, [r3, #0]
   226a6:	2b01      	cmp	r3, #1
   226a8:	d00a      	beq.n	226c0 <system_apb_clock_set_mask+0x2c>
   226aa:	2b02      	cmp	r3, #2
   226ac:	d00f      	beq.n	226ce <system_apb_clock_set_mask+0x3a>
   226ae:	2b00      	cmp	r3, #0
   226b0:	d114      	bne.n	226dc <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   226b2:	4b0e      	ldr	r3, [pc, #56]	; (226ec <system_apb_clock_set_mask+0x58>)
   226b4:	4a0d      	ldr	r2, [pc, #52]	; (226ec <system_apb_clock_set_mask+0x58>)
   226b6:	6991      	ldr	r1, [r2, #24]
   226b8:	683a      	ldr	r2, [r7, #0]
   226ba:	430a      	orrs	r2, r1
   226bc:	619a      	str	r2, [r3, #24]
			break;
   226be:	e00f      	b.n	226e0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   226c0:	4b0a      	ldr	r3, [pc, #40]	; (226ec <system_apb_clock_set_mask+0x58>)
   226c2:	4a0a      	ldr	r2, [pc, #40]	; (226ec <system_apb_clock_set_mask+0x58>)
   226c4:	69d1      	ldr	r1, [r2, #28]
   226c6:	683a      	ldr	r2, [r7, #0]
   226c8:	430a      	orrs	r2, r1
   226ca:	61da      	str	r2, [r3, #28]
			break;
   226cc:	e008      	b.n	226e0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   226ce:	4b07      	ldr	r3, [pc, #28]	; (226ec <system_apb_clock_set_mask+0x58>)
   226d0:	4a06      	ldr	r2, [pc, #24]	; (226ec <system_apb_clock_set_mask+0x58>)
   226d2:	6a11      	ldr	r1, [r2, #32]
   226d4:	683a      	ldr	r2, [r7, #0]
   226d6:	430a      	orrs	r2, r1
   226d8:	621a      	str	r2, [r3, #32]
			break;
   226da:	e001      	b.n	226e0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   226dc:	2317      	movs	r3, #23
   226de:	e000      	b.n	226e2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   226e0:	2300      	movs	r3, #0
}
   226e2:	0018      	movs	r0, r3
   226e4:	46bd      	mov	sp, r7
   226e6:	b002      	add	sp, #8
   226e8:	bd80      	pop	{r7, pc}
   226ea:	46c0      	nop			; (mov r8, r8)
   226ec:	40000400 	.word	0x40000400

000226f0 <system_interrupt_enter_critical_section>:
{
   226f0:	b580      	push	{r7, lr}
   226f2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   226f4:	4b02      	ldr	r3, [pc, #8]	; (22700 <system_interrupt_enter_critical_section+0x10>)
   226f6:	4798      	blx	r3
}
   226f8:	46c0      	nop			; (mov r8, r8)
   226fa:	46bd      	mov	sp, r7
   226fc:	bd80      	pop	{r7, pc}
   226fe:	46c0      	nop			; (mov r8, r8)
   22700:	00023cfd 	.word	0x00023cfd

00022704 <system_interrupt_leave_critical_section>:
{
   22704:	b580      	push	{r7, lr}
   22706:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   22708:	4b02      	ldr	r3, [pc, #8]	; (22714 <system_interrupt_leave_critical_section+0x10>)
   2270a:	4798      	blx	r3
}
   2270c:	46c0      	nop			; (mov r8, r8)
   2270e:	46bd      	mov	sp, r7
   22710:	bd80      	pop	{r7, pc}
   22712:	46c0      	nop			; (mov r8, r8)
   22714:	00023d51 	.word	0x00023d51

00022718 <_events_find_first_free_channel_and_allocate>:

	return pos;
}

static uint8_t _events_find_first_free_channel_and_allocate(void)
{
   22718:	b580      	push	{r7, lr}
   2271a:	b084      	sub	sp, #16
   2271c:	af00      	add	r7, sp, #0
	uint8_t count;
	uint32_t tmp;
	bool allocated = false;
   2271e:	1dfb      	adds	r3, r7, #7
   22720:	2200      	movs	r2, #0
   22722:	701a      	strb	r2, [r3, #0]

	system_interrupt_enter_critical_section();
   22724:	4b21      	ldr	r3, [pc, #132]	; (227ac <_events_find_first_free_channel_and_allocate+0x94>)
   22726:	4798      	blx	r3

	tmp = _events_inst.allocated_channels;
   22728:	4b21      	ldr	r3, [pc, #132]	; (227b0 <_events_find_first_free_channel_and_allocate+0x98>)
   2272a:	681b      	ldr	r3, [r3, #0]
   2272c:	60bb      	str	r3, [r7, #8]

	for(count = 0; count < EVSYS_CHANNELS; ++count) {
   2272e:	230f      	movs	r3, #15
   22730:	18fb      	adds	r3, r7, r3
   22732:	2200      	movs	r2, #0
   22734:	701a      	strb	r2, [r3, #0]
   22736:	e022      	b.n	2277e <_events_find_first_free_channel_and_allocate+0x66>

		if(!(tmp & 0x00000001)) {
   22738:	68bb      	ldr	r3, [r7, #8]
   2273a:	2201      	movs	r2, #1
   2273c:	4013      	ands	r3, r2
   2273e:	d114      	bne.n	2276a <_events_find_first_free_channel_and_allocate+0x52>
			/* If free channel found, set as allocated and return number */

			_events_inst.allocated_channels |= 1 << count;
   22740:	4b1b      	ldr	r3, [pc, #108]	; (227b0 <_events_find_first_free_channel_and_allocate+0x98>)
   22742:	681b      	ldr	r3, [r3, #0]
   22744:	220f      	movs	r2, #15
   22746:	18ba      	adds	r2, r7, r2
   22748:	7812      	ldrb	r2, [r2, #0]
   2274a:	2101      	movs	r1, #1
   2274c:	4091      	lsls	r1, r2
   2274e:	000a      	movs	r2, r1
   22750:	431a      	orrs	r2, r3
   22752:	4b17      	ldr	r3, [pc, #92]	; (227b0 <_events_find_first_free_channel_and_allocate+0x98>)
   22754:	601a      	str	r2, [r3, #0]
			_events_inst.free_channels--;
   22756:	4b16      	ldr	r3, [pc, #88]	; (227b0 <_events_find_first_free_channel_and_allocate+0x98>)
   22758:	791b      	ldrb	r3, [r3, #4]
   2275a:	3b01      	subs	r3, #1
   2275c:	b2da      	uxtb	r2, r3
   2275e:	4b14      	ldr	r3, [pc, #80]	; (227b0 <_events_find_first_free_channel_and_allocate+0x98>)
   22760:	711a      	strb	r2, [r3, #4]
			allocated = true;
   22762:	1dfb      	adds	r3, r7, #7
   22764:	2201      	movs	r2, #1
   22766:	701a      	strb	r2, [r3, #0]

			break;
   22768:	e00e      	b.n	22788 <_events_find_first_free_channel_and_allocate+0x70>

		}

		tmp = tmp >> 1;
   2276a:	68bb      	ldr	r3, [r7, #8]
   2276c:	085b      	lsrs	r3, r3, #1
   2276e:	60bb      	str	r3, [r7, #8]
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
   22770:	230f      	movs	r3, #15
   22772:	18fb      	adds	r3, r7, r3
   22774:	220f      	movs	r2, #15
   22776:	18ba      	adds	r2, r7, r2
   22778:	7812      	ldrb	r2, [r2, #0]
   2277a:	3201      	adds	r2, #1
   2277c:	701a      	strb	r2, [r3, #0]
   2277e:	230f      	movs	r3, #15
   22780:	18fb      	adds	r3, r7, r3
   22782:	781b      	ldrb	r3, [r3, #0]
   22784:	2b0b      	cmp	r3, #11
   22786:	d9d7      	bls.n	22738 <_events_find_first_free_channel_and_allocate+0x20>
	}

	system_interrupt_leave_critical_section();
   22788:	4b0a      	ldr	r3, [pc, #40]	; (227b4 <_events_find_first_free_channel_and_allocate+0x9c>)
   2278a:	4798      	blx	r3

	if(!allocated) {
   2278c:	1dfb      	adds	r3, r7, #7
   2278e:	781b      	ldrb	r3, [r3, #0]
   22790:	2201      	movs	r2, #1
   22792:	4053      	eors	r3, r2
   22794:	b2db      	uxtb	r3, r3
   22796:	2b00      	cmp	r3, #0
   22798:	d001      	beq.n	2279e <_events_find_first_free_channel_and_allocate+0x86>
		return EVENTS_INVALID_CHANNEL;
   2279a:	23ff      	movs	r3, #255	; 0xff
   2279c:	e002      	b.n	227a4 <_events_find_first_free_channel_and_allocate+0x8c>
	} else {
		return count;
   2279e:	230f      	movs	r3, #15
   227a0:	18fb      	adds	r3, r7, r3
   227a2:	781b      	ldrb	r3, [r3, #0]
	}
}
   227a4:	0018      	movs	r0, r3
   227a6:	46bd      	mov	sp, r7
   227a8:	b004      	add	sp, #16
   227aa:	bd80      	pop	{r7, pc}
   227ac:	000226f1 	.word	0x000226f1
   227b0:	20000014 	.word	0x20000014
   227b4:	00022705 	.word	0x00022705

000227b8 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   227b8:	b580      	push	{r7, lr}
   227ba:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   227bc:	2102      	movs	r1, #2
   227be:	2002      	movs	r0, #2
   227c0:	4b07      	ldr	r3, [pc, #28]	; (227e0 <_system_events_init+0x28>)
   227c2:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   227c4:	4b07      	ldr	r3, [pc, #28]	; (227e4 <_system_events_init+0x2c>)
   227c6:	2201      	movs	r2, #1
   227c8:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   227ca:	46c0      	nop			; (mov r8, r8)
   227cc:	4b05      	ldr	r3, [pc, #20]	; (227e4 <_system_events_init+0x2c>)
   227ce:	781b      	ldrb	r3, [r3, #0]
   227d0:	b2db      	uxtb	r3, r3
   227d2:	001a      	movs	r2, r3
   227d4:	2301      	movs	r3, #1
   227d6:	4013      	ands	r3, r2
   227d8:	d1f8      	bne.n	227cc <_system_events_init+0x14>
	}
}
   227da:	46c0      	nop			; (mov r8, r8)
   227dc:	46bd      	mov	sp, r7
   227de:	bd80      	pop	{r7, pc}
   227e0:	00022695 	.word	0x00022695
   227e4:	42000400 	.word	0x42000400

000227e8 <events_get_config_defaults>:
#if defined(__GNUC__)
#  pragma GCC diagnostic pop
#endif

void events_get_config_defaults(struct events_config *config)
{
   227e8:	b580      	push	{r7, lr}
   227ea:	b082      	sub	sp, #8
   227ec:	af00      	add	r7, sp, #0
   227ee:	6078      	str	r0, [r7, #4]
	/* Check that config is something other than NULL */
	Assert(config);

	config->edge_detect  = EVENTS_EDGE_DETECT_RISING;
   227f0:	687b      	ldr	r3, [r7, #4]
   227f2:	2201      	movs	r2, #1
   227f4:	701a      	strb	r2, [r3, #0]
	config->path         = EVENTS_PATH_SYNCHRONOUS;
   227f6:	687b      	ldr	r3, [r7, #4]
   227f8:	2200      	movs	r2, #0
   227fa:	705a      	strb	r2, [r3, #1]
	config->generator    = EVSYS_ID_GEN_NONE;
   227fc:	687b      	ldr	r3, [r7, #4]
   227fe:	2200      	movs	r2, #0
   22800:	709a      	strb	r2, [r3, #2]
	config->clock_source = GCLK_GENERATOR_0;
   22802:	687b      	ldr	r3, [r7, #4]
   22804:	2200      	movs	r2, #0
   22806:	70da      	strb	r2, [r3, #3]
}
   22808:	46c0      	nop			; (mov r8, r8)
   2280a:	46bd      	mov	sp, r7
   2280c:	b002      	add	sp, #8
   2280e:	bd80      	pop	{r7, pc}

00022810 <events_allocate>:

enum status_code events_allocate(
		struct events_resource *resource,
		struct events_config *config)
{
   22810:	b590      	push	{r4, r7, lr}
   22812:	b085      	sub	sp, #20
   22814:	af00      	add	r7, sp, #0
   22816:	6078      	str	r0, [r7, #4]
   22818:	6039      	str	r1, [r7, #0]
	uint8_t new_channel;

	Assert(resource);

	new_channel = _events_find_first_free_channel_and_allocate();
   2281a:	230f      	movs	r3, #15
   2281c:	18fc      	adds	r4, r7, r3
   2281e:	4b2a      	ldr	r3, [pc, #168]	; (228c8 <events_allocate+0xb8>)
   22820:	4798      	blx	r3
   22822:	0003      	movs	r3, r0
   22824:	7023      	strb	r3, [r4, #0]

	if(new_channel == EVENTS_INVALID_CHANNEL) {
   22826:	230f      	movs	r3, #15
   22828:	18fb      	adds	r3, r7, r3
   2282a:	781b      	ldrb	r3, [r3, #0]
   2282c:	2bff      	cmp	r3, #255	; 0xff
   2282e:	d101      	bne.n	22834 <events_allocate+0x24>
		return STATUS_ERR_NOT_FOUND;
   22830:	2314      	movs	r3, #20
   22832:	e045      	b.n	228c0 <events_allocate+0xb0>
	}

	resource->channel = new_channel;
   22834:	687b      	ldr	r3, [r7, #4]
   22836:	220f      	movs	r2, #15
   22838:	18ba      	adds	r2, r7, r2
   2283a:	7812      	ldrb	r2, [r2, #0]
   2283c:	701a      	strb	r2, [r3, #0]

	if (config->path != EVENTS_PATH_ASYNCHRONOUS) {
   2283e:	683b      	ldr	r3, [r7, #0]
   22840:	785b      	ldrb	r3, [r3, #1]
   22842:	2b02      	cmp	r3, #2
   22844:	d01c      	beq.n	22880 <events_allocate+0x70>
		/* Set up a GLCK channel to use with the specific channel */
		struct system_gclk_chan_config gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   22846:	230c      	movs	r3, #12
   22848:	18fb      	adds	r3, r7, r3
   2284a:	0018      	movs	r0, r3
   2284c:	4b1f      	ldr	r3, [pc, #124]	; (228cc <events_allocate+0xbc>)
   2284e:	4798      	blx	r3
		gclk_chan_conf.source_generator =
				(enum gclk_generator)config->clock_source;
   22850:	683b      	ldr	r3, [r7, #0]
   22852:	78da      	ldrb	r2, [r3, #3]
		gclk_chan_conf.source_generator =
   22854:	230c      	movs	r3, #12
   22856:	18fb      	adds	r3, r7, r3
   22858:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(EVSYS_GCLK_ID_0 + new_channel, &gclk_chan_conf);
   2285a:	230f      	movs	r3, #15
   2285c:	18fb      	adds	r3, r7, r3
   2285e:	781b      	ldrb	r3, [r3, #0]
   22860:	3307      	adds	r3, #7
   22862:	b2db      	uxtb	r3, r3
   22864:	220c      	movs	r2, #12
   22866:	18ba      	adds	r2, r7, r2
   22868:	0011      	movs	r1, r2
   2286a:	0018      	movs	r0, r3
   2286c:	4b18      	ldr	r3, [pc, #96]	; (228d0 <events_allocate+0xc0>)
   2286e:	4798      	blx	r3
		system_gclk_chan_enable(EVSYS_GCLK_ID_0 + new_channel);
   22870:	230f      	movs	r3, #15
   22872:	18fb      	adds	r3, r7, r3
   22874:	781b      	ldrb	r3, [r3, #0]
   22876:	3307      	adds	r3, #7
   22878:	b2db      	uxtb	r3, r3
   2287a:	0018      	movs	r0, r3
   2287c:	4b15      	ldr	r3, [pc, #84]	; (228d4 <events_allocate+0xc4>)
   2287e:	4798      	blx	r3
	}

	/* Save channel setting and configure it after user multiplexer */
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
   22880:	230f      	movs	r3, #15
   22882:	18fb      	adds	r3, r7, r3
   22884:	781b      	ldrb	r3, [r3, #0]
   22886:	220f      	movs	r2, #15
   22888:	401a      	ands	r2, r3
			     EVSYS_CHANNEL_EVGEN(config->generator)   |
   2288a:	683b      	ldr	r3, [r7, #0]
   2288c:	789b      	ldrb	r3, [r3, #2]
   2288e:	041b      	lsls	r3, r3, #16
   22890:	0019      	movs	r1, r3
   22892:	23fe      	movs	r3, #254	; 0xfe
   22894:	03db      	lsls	r3, r3, #15
   22896:	400b      	ands	r3, r1
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
   22898:	431a      	orrs	r2, r3
			     EVSYS_CHANNEL_PATH(config->path)         |
   2289a:	683b      	ldr	r3, [r7, #0]
   2289c:	785b      	ldrb	r3, [r3, #1]
   2289e:	061b      	lsls	r3, r3, #24
   228a0:	0019      	movs	r1, r3
   228a2:	23c0      	movs	r3, #192	; 0xc0
   228a4:	049b      	lsls	r3, r3, #18
   228a6:	400b      	ands	r3, r1
			     EVSYS_CHANNEL_EVGEN(config->generator)   |
   228a8:	431a      	orrs	r2, r3
			     EVSYS_CHANNEL_EDGSEL(config->edge_detect);
   228aa:	683b      	ldr	r3, [r7, #0]
   228ac:	781b      	ldrb	r3, [r3, #0]
   228ae:	069b      	lsls	r3, r3, #26
   228b0:	0019      	movs	r1, r3
   228b2:	23c0      	movs	r3, #192	; 0xc0
   228b4:	051b      	lsls	r3, r3, #20
   228b6:	400b      	ands	r3, r1
			     EVSYS_CHANNEL_PATH(config->path)         |
   228b8:	431a      	orrs	r2, r3
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
   228ba:	687b      	ldr	r3, [r7, #4]
   228bc:	605a      	str	r2, [r3, #4]


	return STATUS_OK;
   228be:	2300      	movs	r3, #0
}
   228c0:	0018      	movs	r0, r3
   228c2:	46bd      	mov	sp, r7
   228c4:	b005      	add	sp, #20
   228c6:	bd90      	pop	{r4, r7, pc}
   228c8:	00022719 	.word	0x00022719
   228cc:	0002267d 	.word	0x0002267d
   228d0:	00024ab5 	.word	0x00024ab5
   228d4:	00024af9 	.word	0x00024af9

000228d8 <events_attach_user>:

	return false;
}

enum status_code events_attach_user(struct events_resource *resource, uint8_t user_id)
{
   228d8:	b580      	push	{r7, lr}
   228da:	b082      	sub	sp, #8
   228dc:	af00      	add	r7, sp, #0
   228de:	6078      	str	r0, [r7, #4]
   228e0:	000a      	movs	r2, r1
   228e2:	1cfb      	adds	r3, r7, #3
   228e4:	701a      	strb	r2, [r3, #0]
	Assert(resource);

	/* First configure user multiplexer: channel number is n + 1 */
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(resource->channel + 1) |
   228e6:	490f      	ldr	r1, [pc, #60]	; (22924 <events_attach_user+0x4c>)
   228e8:	687b      	ldr	r3, [r7, #4]
   228ea:	781b      	ldrb	r3, [r3, #0]
   228ec:	b29b      	uxth	r3, r3
   228ee:	3301      	adds	r3, #1
   228f0:	b29b      	uxth	r3, r3
   228f2:	021b      	lsls	r3, r3, #8
   228f4:	b29a      	uxth	r2, r3
   228f6:	23f8      	movs	r3, #248	; 0xf8
   228f8:	015b      	lsls	r3, r3, #5
   228fa:	4013      	ands	r3, r2
   228fc:	b29a      	uxth	r2, r3
			  EVSYS_USER_USER(user_id);
   228fe:	1cfb      	adds	r3, r7, #3
   22900:	781b      	ldrb	r3, [r3, #0]
   22902:	b29b      	uxth	r3, r3
   22904:	201f      	movs	r0, #31
   22906:	4003      	ands	r3, r0
   22908:	b29b      	uxth	r3, r3
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(resource->channel + 1) |
   2290a:	4313      	orrs	r3, r2
   2290c:	b29b      	uxth	r3, r3
   2290e:	810b      	strh	r3, [r1, #8]

	/* Then configure the channel */
	EVSYS->CHANNEL.reg = resource->channel_reg;
   22910:	4a04      	ldr	r2, [pc, #16]	; (22924 <events_attach_user+0x4c>)
   22912:	687b      	ldr	r3, [r7, #4]
   22914:	685b      	ldr	r3, [r3, #4]
   22916:	6053      	str	r3, [r2, #4]

	return STATUS_OK;
   22918:	2300      	movs	r3, #0
}
   2291a:	0018      	movs	r0, r3
   2291c:	46bd      	mov	sp, r7
   2291e:	b002      	add	sp, #8
   22920:	bd80      	pop	{r7, pc}
   22922:	46c0      	nop			; (mov r8, r8)
   22924:	42000400 	.word	0x42000400

00022928 <ac_register_callback>:
 */
enum status_code ac_register_callback(
		struct ac_module *const module,
		ac_callback_t callback_func,
		const enum ac_callback callback_type)
{
   22928:	b580      	push	{r7, lr}
   2292a:	b084      	sub	sp, #16
   2292c:	af00      	add	r7, sp, #0
   2292e:	60f8      	str	r0, [r7, #12]
   22930:	60b9      	str	r1, [r7, #8]
   22932:	1dfb      	adds	r3, r7, #7
   22934:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   22936:	1dfb      	adds	r3, r7, #7
   22938:	781b      	ldrb	r3, [r3, #0]
   2293a:	68fa      	ldr	r2, [r7, #12]
   2293c:	009b      	lsls	r3, r3, #2
   2293e:	18d3      	adds	r3, r2, r3
   22940:	3304      	adds	r3, #4
   22942:	68ba      	ldr	r2, [r7, #8]
   22944:	601a      	str	r2, [r3, #0]

	/* Set software flag for callback */
	module->register_callback_mask |= (1 << callback_type);
   22946:	68fb      	ldr	r3, [r7, #12]
   22948:	7e1b      	ldrb	r3, [r3, #24]
   2294a:	b25a      	sxtb	r2, r3
   2294c:	1dfb      	adds	r3, r7, #7
   2294e:	781b      	ldrb	r3, [r3, #0]
   22950:	2101      	movs	r1, #1
   22952:	4099      	lsls	r1, r3
   22954:	000b      	movs	r3, r1
   22956:	b25b      	sxtb	r3, r3
   22958:	4313      	orrs	r3, r2
   2295a:	b25b      	sxtb	r3, r3
   2295c:	b2da      	uxtb	r2, r3
   2295e:	68fb      	ldr	r3, [r7, #12]
   22960:	761a      	strb	r2, [r3, #24]

	return STATUS_OK;
   22962:	2300      	movs	r3, #0
}
   22964:	0018      	movs	r0, r3
   22966:	46bd      	mov	sp, r7
   22968:	b004      	add	sp, #16
   2296a:	bd80      	pop	{r7, pc}

0002296c <AC_Handler>:
/**
 * \internal ISR handler for AC
 */
#if (AC_INST_NUM == 1)
void AC_Handler(void)
{
   2296c:	b580      	push	{r7, lr}
   2296e:	af00      	add	r7, sp, #0
	_ac_interrupt_handler(0);
   22970:	2000      	movs	r0, #0
   22972:	4b02      	ldr	r3, [pc, #8]	; (2297c <AC_Handler+0x10>)
   22974:	4798      	blx	r3
}
   22976:	46c0      	nop			; (mov r8, r8)
   22978:	46bd      	mov	sp, r7
   2297a:	bd80      	pop	{r7, pc}
   2297c:	00022981 	.word	0x00022981

00022980 <_ac_interrupt_handler>:
 * that are registered and enabled.
 *
 * \param [in] instance_index  Default value 0
 */
void _ac_interrupt_handler(const uint32_t instance_index)
{
   22980:	b580      	push	{r7, lr}
   22982:	b084      	sub	sp, #16
   22984:	af00      	add	r7, sp, #0
   22986:	6078      	str	r0, [r7, #4]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */

	struct ac_module *module = _ac_instance[instance_index];
   22988:	4b23      	ldr	r3, [pc, #140]	; (22a18 <_ac_interrupt_handler+0x98>)
   2298a:	687a      	ldr	r2, [r7, #4]
   2298c:	0092      	lsls	r2, r2, #2
   2298e:	58d3      	ldr	r3, [r2, r3]
   22990:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask =
			_ac_instance[instance_index]->hw->INTFLAG.reg &
   22992:	4b21      	ldr	r3, [pc, #132]	; (22a18 <_ac_interrupt_handler+0x98>)
   22994:	687a      	ldr	r2, [r7, #4]
   22996:	0092      	lsls	r2, r2, #2
   22998:	58d3      	ldr	r3, [r2, r3]
   2299a:	681b      	ldr	r3, [r3, #0]
   2299c:	799b      	ldrb	r3, [r3, #6]
   2299e:	b2da      	uxtb	r2, r3
			(module->register_callback_mask & module->enable_callback_mask);
   229a0:	68fb      	ldr	r3, [r7, #12]
   229a2:	7e1b      	ldrb	r3, [r3, #24]
   229a4:	68f9      	ldr	r1, [r7, #12]
   229a6:	7e49      	ldrb	r1, [r1, #25]
	interrupt_and_callback_status_mask =
   229a8:	400b      	ands	r3, r1
   229aa:	b2d9      	uxtb	r1, r3
   229ac:	230b      	movs	r3, #11
   229ae:	18fb      	adds	r3, r7, r3
   229b0:	400a      	ands	r2, r1
   229b2:	701a      	strb	r2, [r3, #0]

	/* Check if comparator channel 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP0) {
   229b4:	230b      	movs	r3, #11
   229b6:	18fb      	adds	r3, r7, r3
   229b8:	781b      	ldrb	r3, [r3, #0]
   229ba:	2201      	movs	r2, #1
   229bc:	4013      	ands	r3, r2
   229be:	d008      	beq.n	229d2 <_ac_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_COMPARATOR_0])(module);
   229c0:	68fb      	ldr	r3, [r7, #12]
   229c2:	685b      	ldr	r3, [r3, #4]
   229c4:	68fa      	ldr	r2, [r7, #12]
   229c6:	0010      	movs	r0, r2
   229c8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP0;
   229ca:	68fb      	ldr	r3, [r7, #12]
   229cc:	681b      	ldr	r3, [r3, #0]
   229ce:	2201      	movs	r2, #1
   229d0:	719a      	strb	r2, [r3, #6]
	}

	/* Check if comparator channel 1 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP1) {
   229d2:	230b      	movs	r3, #11
   229d4:	18fb      	adds	r3, r7, r3
   229d6:	781b      	ldrb	r3, [r3, #0]
   229d8:	2202      	movs	r2, #2
   229da:	4013      	ands	r3, r2
   229dc:	d008      	beq.n	229f0 <_ac_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_COMPARATOR_1])(module);
   229de:	68fb      	ldr	r3, [r7, #12]
   229e0:	689b      	ldr	r3, [r3, #8]
   229e2:	68fa      	ldr	r2, [r7, #12]
   229e4:	0010      	movs	r0, r2
   229e6:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP1;
   229e8:	68fb      	ldr	r3, [r7, #12]
   229ea:	681b      	ldr	r3, [r3, #0]
   229ec:	2202      	movs	r2, #2
   229ee:	719a      	strb	r2, [r3, #6]
	}

	/* Check if window 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_WIN0) {
   229f0:	230b      	movs	r3, #11
   229f2:	18fb      	adds	r3, r7, r3
   229f4:	781b      	ldrb	r3, [r3, #0]
   229f6:	2210      	movs	r2, #16
   229f8:	4013      	ands	r3, r2
   229fa:	d008      	beq.n	22a0e <_ac_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_WINDOW_0])(module);
   229fc:	68fb      	ldr	r3, [r7, #12]
   229fe:	695b      	ldr	r3, [r3, #20]
   22a00:	68fa      	ldr	r2, [r7, #12]
   22a02:	0010      	movs	r0, r2
   22a04:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN0;
   22a06:	68fb      	ldr	r3, [r7, #12]
   22a08:	681b      	ldr	r3, [r3, #0]
   22a0a:	2210      	movs	r2, #16
   22a0c:	719a      	strb	r2, [r3, #6]
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN1;
	}
#  endif
#endif /* (AC_NUM_CMP > 2) */
}
   22a0e:	46c0      	nop			; (mov r8, r8)
   22a10:	46bd      	mov	sp, r7
   22a12:	b004      	add	sp, #16
   22a14:	bd80      	pop	{r7, pc}
   22a16:	46c0      	nop			; (mov r8, r8)
   22a18:	20000984 	.word	0x20000984

00022a1c <delay_init>:
 * \brief Initialize the delay driver.
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
   22a1c:	b580      	push	{r7, lr}
   22a1e:	af00      	add	r7, sp, #0
}
   22a20:	46c0      	nop			; (mov r8, r8)
   22a22:	46bd      	mov	sp, r7
   22a24:	bd80      	pop	{r7, pc}
	...

00022a28 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
   22a28:	b580      	push	{r7, lr}
   22a2a:	b082      	sub	sp, #8
   22a2c:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   22a2e:	4b07      	ldr	r3, [pc, #28]	; (22a4c <nvm_is_ready+0x24>)
   22a30:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
   22a32:	687b      	ldr	r3, [r7, #4]
   22a34:	7d1b      	ldrb	r3, [r3, #20]
   22a36:	b2db      	uxtb	r3, r3
   22a38:	001a      	movs	r2, r3
   22a3a:	2301      	movs	r3, #1
   22a3c:	4013      	ands	r3, r2
   22a3e:	1e5a      	subs	r2, r3, #1
   22a40:	4193      	sbcs	r3, r2
   22a42:	b2db      	uxtb	r3, r3
}
   22a44:	0018      	movs	r0, r3
   22a46:	46bd      	mov	sp, r7
   22a48:	b002      	add	sp, #8
   22a4a:	bd80      	pop	{r7, pc}
   22a4c:	41004000 	.word	0x41004000

00022a50 <system_apb_clock_set_mask>:
{
   22a50:	b580      	push	{r7, lr}
   22a52:	b082      	sub	sp, #8
   22a54:	af00      	add	r7, sp, #0
   22a56:	0002      	movs	r2, r0
   22a58:	6039      	str	r1, [r7, #0]
   22a5a:	1dfb      	adds	r3, r7, #7
   22a5c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   22a5e:	1dfb      	adds	r3, r7, #7
   22a60:	781b      	ldrb	r3, [r3, #0]
   22a62:	2b01      	cmp	r3, #1
   22a64:	d00a      	beq.n	22a7c <system_apb_clock_set_mask+0x2c>
   22a66:	2b02      	cmp	r3, #2
   22a68:	d00f      	beq.n	22a8a <system_apb_clock_set_mask+0x3a>
   22a6a:	2b00      	cmp	r3, #0
   22a6c:	d114      	bne.n	22a98 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   22a6e:	4b0e      	ldr	r3, [pc, #56]	; (22aa8 <system_apb_clock_set_mask+0x58>)
   22a70:	4a0d      	ldr	r2, [pc, #52]	; (22aa8 <system_apb_clock_set_mask+0x58>)
   22a72:	6991      	ldr	r1, [r2, #24]
   22a74:	683a      	ldr	r2, [r7, #0]
   22a76:	430a      	orrs	r2, r1
   22a78:	619a      	str	r2, [r3, #24]
			break;
   22a7a:	e00f      	b.n	22a9c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   22a7c:	4b0a      	ldr	r3, [pc, #40]	; (22aa8 <system_apb_clock_set_mask+0x58>)
   22a7e:	4a0a      	ldr	r2, [pc, #40]	; (22aa8 <system_apb_clock_set_mask+0x58>)
   22a80:	69d1      	ldr	r1, [r2, #28]
   22a82:	683a      	ldr	r2, [r7, #0]
   22a84:	430a      	orrs	r2, r1
   22a86:	61da      	str	r2, [r3, #28]
			break;
   22a88:	e008      	b.n	22a9c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   22a8a:	4b07      	ldr	r3, [pc, #28]	; (22aa8 <system_apb_clock_set_mask+0x58>)
   22a8c:	4a06      	ldr	r2, [pc, #24]	; (22aa8 <system_apb_clock_set_mask+0x58>)
   22a8e:	6a11      	ldr	r1, [r2, #32]
   22a90:	683a      	ldr	r2, [r7, #0]
   22a92:	430a      	orrs	r2, r1
   22a94:	621a      	str	r2, [r3, #32]
			break;
   22a96:	e001      	b.n	22a9c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   22a98:	2317      	movs	r3, #23
   22a9a:	e000      	b.n	22a9e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   22a9c:	2300      	movs	r3, #0
}
   22a9e:	0018      	movs	r0, r3
   22aa0:	46bd      	mov	sp, r7
   22aa2:	b002      	add	sp, #8
   22aa4:	bd80      	pop	{r7, pc}
   22aa6:	46c0      	nop			; (mov r8, r8)
   22aa8:	40000400 	.word	0x40000400

00022aac <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
   22aac:	b580      	push	{r7, lr}
   22aae:	b084      	sub	sp, #16
   22ab0:	af00      	add	r7, sp, #0
   22ab2:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   22ab4:	4b2f      	ldr	r3, [pc, #188]	; (22b74 <nvm_set_config+0xc8>)
   22ab6:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
   22ab8:	2104      	movs	r1, #4
   22aba:	2001      	movs	r0, #1
   22abc:	4b2e      	ldr	r3, [pc, #184]	; (22b78 <nvm_set_config+0xcc>)
   22abe:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   22ac0:	68fb      	ldr	r3, [r7, #12]
   22ac2:	2220      	movs	r2, #32
   22ac4:	32ff      	adds	r2, #255	; 0xff
   22ac6:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   22ac8:	4b2c      	ldr	r3, [pc, #176]	; (22b7c <nvm_set_config+0xd0>)
   22aca:	4798      	blx	r3
   22acc:	0003      	movs	r3, r0
   22ace:	001a      	movs	r2, r3
   22ad0:	2301      	movs	r3, #1
   22ad2:	4053      	eors	r3, r2
   22ad4:	b2db      	uxtb	r3, r3
   22ad6:	2b00      	cmp	r3, #0
   22ad8:	d001      	beq.n	22ade <nvm_set_config+0x32>
		return STATUS_BUSY;
   22ada:	2305      	movs	r3, #5
   22adc:	e045      	b.n	22b6a <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
   22ade:	687b      	ldr	r3, [r7, #4]
   22ae0:	781b      	ldrb	r3, [r3, #0]
   22ae2:	021b      	lsls	r3, r3, #8
   22ae4:	001a      	movs	r2, r3
   22ae6:	23c0      	movs	r3, #192	; 0xc0
   22ae8:	009b      	lsls	r3, r3, #2
   22aea:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
   22aec:	687b      	ldr	r3, [r7, #4]
   22aee:	785b      	ldrb	r3, [r3, #1]
   22af0:	01db      	lsls	r3, r3, #7
   22af2:	0019      	movs	r1, r3
   22af4:	23ff      	movs	r3, #255	; 0xff
   22af6:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
   22af8:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
   22afa:	687b      	ldr	r3, [r7, #4]
   22afc:	789b      	ldrb	r3, [r3, #2]
   22afe:	005b      	lsls	r3, r3, #1
   22b00:	0019      	movs	r1, r3
   22b02:	231e      	movs	r3, #30
   22b04:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
   22b06:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
   22b08:	687b      	ldr	r3, [r7, #4]
   22b0a:	78db      	ldrb	r3, [r3, #3]
   22b0c:	049b      	lsls	r3, r3, #18
   22b0e:	0019      	movs	r1, r3
   22b10:	2380      	movs	r3, #128	; 0x80
   22b12:	02db      	lsls	r3, r3, #11
   22b14:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
   22b16:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
   22b18:	687b      	ldr	r3, [r7, #4]
   22b1a:	791b      	ldrb	r3, [r3, #4]
   22b1c:	041b      	lsls	r3, r3, #16
   22b1e:	0019      	movs	r1, r3
   22b20:	23c0      	movs	r3, #192	; 0xc0
   22b22:	029b      	lsls	r3, r3, #10
   22b24:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
   22b26:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
   22b28:	68fb      	ldr	r3, [r7, #12]
   22b2a:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
   22b2c:	68fb      	ldr	r3, [r7, #12]
   22b2e:	689b      	ldr	r3, [r3, #8]
   22b30:	035b      	lsls	r3, r3, #13
   22b32:	0f5b      	lsrs	r3, r3, #29
   22b34:	b2db      	uxtb	r3, r3
   22b36:	001a      	movs	r2, r3
   22b38:	2308      	movs	r3, #8
   22b3a:	4093      	lsls	r3, r2
   22b3c:	b29a      	uxth	r2, r3
   22b3e:	4b10      	ldr	r3, [pc, #64]	; (22b80 <nvm_set_config+0xd4>)
   22b40:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
   22b42:	68fb      	ldr	r3, [r7, #12]
   22b44:	689b      	ldr	r3, [r3, #8]
   22b46:	b29a      	uxth	r2, r3
   22b48:	4b0d      	ldr	r3, [pc, #52]	; (22b80 <nvm_set_config+0xd4>)
   22b4a:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
   22b4c:	687b      	ldr	r3, [r7, #4]
   22b4e:	785a      	ldrb	r2, [r3, #1]
   22b50:	4b0b      	ldr	r3, [pc, #44]	; (22b80 <nvm_set_config+0xd4>)
   22b52:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
   22b54:	68fb      	ldr	r3, [r7, #12]
   22b56:	8b1b      	ldrh	r3, [r3, #24]
   22b58:	b29b      	uxth	r3, r3
   22b5a:	001a      	movs	r2, r3
   22b5c:	2380      	movs	r3, #128	; 0x80
   22b5e:	005b      	lsls	r3, r3, #1
   22b60:	4013      	ands	r3, r2
   22b62:	d001      	beq.n	22b68 <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
   22b64:	2310      	movs	r3, #16
   22b66:	e000      	b.n	22b6a <nvm_set_config+0xbe>
	}

	return STATUS_OK;
   22b68:	2300      	movs	r3, #0
}
   22b6a:	0018      	movs	r0, r3
   22b6c:	46bd      	mov	sp, r7
   22b6e:	b004      	add	sp, #16
   22b70:	bd80      	pop	{r7, pc}
   22b72:	46c0      	nop			; (mov r8, r8)
   22b74:	41004000 	.word	0x41004000
   22b78:	00022a51 	.word	0x00022a51
   22b7c:	00022a29 	.word	0x00022a29
   22b80:	20000414 	.word	0x20000414

00022b84 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
   22b84:	b580      	push	{r7, lr}
   22b86:	b086      	sub	sp, #24
   22b88:	af00      	add	r7, sp, #0
   22b8a:	60b9      	str	r1, [r7, #8]
   22b8c:	607a      	str	r2, [r7, #4]
   22b8e:	230f      	movs	r3, #15
   22b90:	18fb      	adds	r3, r7, r3
   22b92:	1c02      	adds	r2, r0, #0
   22b94:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
   22b96:	4b3a      	ldr	r3, [pc, #232]	; (22c80 <nvm_execute_command+0xfc>)
   22b98:	881b      	ldrh	r3, [r3, #0]
   22b9a:	001a      	movs	r2, r3
   22b9c:	4b38      	ldr	r3, [pc, #224]	; (22c80 <nvm_execute_command+0xfc>)
   22b9e:	885b      	ldrh	r3, [r3, #2]
   22ba0:	435a      	muls	r2, r3
   22ba2:	68bb      	ldr	r3, [r7, #8]
   22ba4:	429a      	cmp	r2, r3
   22ba6:	d209      	bcs.n	22bbc <nvm_execute_command+0x38>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
   22ba8:	68bb      	ldr	r3, [r7, #8]
   22baa:	4a36      	ldr	r2, [pc, #216]	; (22c84 <nvm_execute_command+0x100>)
   22bac:	4293      	cmp	r3, r2
   22bae:	d903      	bls.n	22bb8 <nvm_execute_command+0x34>
   22bb0:	68bb      	ldr	r3, [r7, #8]
   22bb2:	4a35      	ldr	r2, [pc, #212]	; (22c88 <nvm_execute_command+0x104>)
   22bb4:	4293      	cmp	r3, r2
   22bb6:	d901      	bls.n	22bbc <nvm_execute_command+0x38>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
   22bb8:	2318      	movs	r3, #24
   22bba:	e05c      	b.n	22c76 <nvm_execute_command+0xf2>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   22bbc:	4b33      	ldr	r3, [pc, #204]	; (22c8c <nvm_execute_command+0x108>)
   22bbe:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
   22bc0:	697b      	ldr	r3, [r7, #20]
   22bc2:	685b      	ldr	r3, [r3, #4]
   22bc4:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
   22bc6:	693b      	ldr	r3, [r7, #16]
   22bc8:	2280      	movs	r2, #128	; 0x80
   22bca:	02d2      	lsls	r2, r2, #11
   22bcc:	431a      	orrs	r2, r3
   22bce:	697b      	ldr	r3, [r7, #20]
   22bd0:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   22bd2:	697b      	ldr	r3, [r7, #20]
   22bd4:	2220      	movs	r2, #32
   22bd6:	32ff      	adds	r2, #255	; 0xff
   22bd8:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   22bda:	4b2d      	ldr	r3, [pc, #180]	; (22c90 <nvm_execute_command+0x10c>)
   22bdc:	4798      	blx	r3
   22bde:	0003      	movs	r3, r0
   22be0:	001a      	movs	r2, r3
   22be2:	2301      	movs	r3, #1
   22be4:	4053      	eors	r3, r2
   22be6:	b2db      	uxtb	r3, r3
   22be8:	2b00      	cmp	r3, #0
   22bea:	d004      	beq.n	22bf6 <nvm_execute_command+0x72>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
   22bec:	697b      	ldr	r3, [r7, #20]
   22bee:	693a      	ldr	r2, [r7, #16]
   22bf0:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
   22bf2:	2305      	movs	r3, #5
   22bf4:	e03f      	b.n	22c76 <nvm_execute_command+0xf2>
	}

	switch (command) {
   22bf6:	230f      	movs	r3, #15
   22bf8:	18fb      	adds	r3, r7, r3
   22bfa:	781b      	ldrb	r3, [r3, #0]
   22bfc:	2b45      	cmp	r3, #69	; 0x45
   22bfe:	d81d      	bhi.n	22c3c <nvm_execute_command+0xb8>
   22c00:	009a      	lsls	r2, r3, #2
   22c02:	4b24      	ldr	r3, [pc, #144]	; (22c94 <nvm_execute_command+0x110>)
   22c04:	18d3      	adds	r3, r2, r3
   22c06:	681b      	ldr	r3, [r3, #0]
   22c08:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
   22c0a:	697b      	ldr	r3, [r7, #20]
   22c0c:	8b1b      	ldrh	r3, [r3, #24]
   22c0e:	b29b      	uxth	r3, r3
   22c10:	001a      	movs	r2, r3
   22c12:	2380      	movs	r3, #128	; 0x80
   22c14:	005b      	lsls	r3, r3, #1
   22c16:	4013      	ands	r3, r2
   22c18:	d004      	beq.n	22c24 <nvm_execute_command+0xa0>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
   22c1a:	697b      	ldr	r3, [r7, #20]
   22c1c:	693a      	ldr	r2, [r7, #16]
   22c1e:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
   22c20:	2310      	movs	r3, #16
   22c22:	e028      	b.n	22c76 <nvm_execute_command+0xf2>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
   22c24:	68bb      	ldr	r3, [r7, #8]
   22c26:	089b      	lsrs	r3, r3, #2
   22c28:	005a      	lsls	r2, r3, #1
   22c2a:	697b      	ldr	r3, [r7, #20]
   22c2c:	61da      	str	r2, [r3, #28]
			break;
   22c2e:	e00b      	b.n	22c48 <nvm_execute_command+0xc4>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
   22c30:	68bb      	ldr	r3, [r7, #8]
   22c32:	089b      	lsrs	r3, r3, #2
   22c34:	005a      	lsls	r2, r3, #1
   22c36:	697b      	ldr	r3, [r7, #20]
   22c38:	61da      	str	r2, [r3, #28]
			break;
   22c3a:	e005      	b.n	22c48 <nvm_execute_command+0xc4>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
   22c3c:	697b      	ldr	r3, [r7, #20]
   22c3e:	693a      	ldr	r2, [r7, #16]
   22c40:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
   22c42:	2317      	movs	r3, #23
   22c44:	e017      	b.n	22c76 <nvm_execute_command+0xf2>
			break;
   22c46:	46c0      	nop			; (mov r8, r8)
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
   22c48:	230f      	movs	r3, #15
   22c4a:	18fb      	adds	r3, r7, r3
   22c4c:	781b      	ldrb	r3, [r3, #0]
   22c4e:	b29b      	uxth	r3, r3
   22c50:	4a11      	ldr	r2, [pc, #68]	; (22c98 <nvm_execute_command+0x114>)
   22c52:	4313      	orrs	r3, r2
   22c54:	b29a      	uxth	r2, r3
   22c56:	697b      	ldr	r3, [r7, #20]
   22c58:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
   22c5a:	46c0      	nop			; (mov r8, r8)
   22c5c:	4b0c      	ldr	r3, [pc, #48]	; (22c90 <nvm_execute_command+0x10c>)
   22c5e:	4798      	blx	r3
   22c60:	0003      	movs	r3, r0
   22c62:	001a      	movs	r2, r3
   22c64:	2301      	movs	r3, #1
   22c66:	4053      	eors	r3, r2
   22c68:	b2db      	uxtb	r3, r3
   22c6a:	2b00      	cmp	r3, #0
   22c6c:	d1f6      	bne.n	22c5c <nvm_execute_command+0xd8>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
   22c6e:	697b      	ldr	r3, [r7, #20]
   22c70:	693a      	ldr	r2, [r7, #16]
   22c72:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   22c74:	2300      	movs	r3, #0
}
   22c76:	0018      	movs	r0, r3
   22c78:	46bd      	mov	sp, r7
   22c7a:	b006      	add	sp, #24
   22c7c:	bd80      	pop	{r7, pc}
   22c7e:	46c0      	nop			; (mov r8, r8)
   22c80:	20000414 	.word	0x20000414
   22c84:	00803fff 	.word	0x00803fff
   22c88:	00806000 	.word	0x00806000
   22c8c:	41004000 	.word	0x41004000
   22c90:	00022a29 	.word	0x00022a29
   22c94:	0002ac48 	.word	0x0002ac48
   22c98:	ffffa500 	.word	0xffffa500

00022c9c <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
   22c9c:	b580      	push	{r7, lr}
   22c9e:	b088      	sub	sp, #32
   22ca0:	af00      	add	r7, sp, #0
   22ca2:	60f8      	str	r0, [r7, #12]
   22ca4:	60b9      	str	r1, [r7, #8]
   22ca6:	1dbb      	adds	r3, r7, #6
   22ca8:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   22caa:	4b4a      	ldr	r3, [pc, #296]	; (22dd4 <nvm_write_buffer+0x138>)
   22cac:	881b      	ldrh	r3, [r3, #0]
   22cae:	001a      	movs	r2, r3
   22cb0:	4b48      	ldr	r3, [pc, #288]	; (22dd4 <nvm_write_buffer+0x138>)
   22cb2:	885b      	ldrh	r3, [r3, #2]
   22cb4:	435a      	muls	r2, r3
	if (destination_address >
   22cb6:	68fb      	ldr	r3, [r7, #12]
   22cb8:	429a      	cmp	r2, r3
   22cba:	d201      	bcs.n	22cc0 <nvm_write_buffer+0x24>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
   22cbc:	2318      	movs	r3, #24
   22cbe:	e084      	b.n	22dca <nvm_write_buffer+0x12e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
   22cc0:	4b44      	ldr	r3, [pc, #272]	; (22dd4 <nvm_write_buffer+0x138>)
   22cc2:	881b      	ldrh	r3, [r3, #0]
   22cc4:	3b01      	subs	r3, #1
   22cc6:	001a      	movs	r2, r3
   22cc8:	68fb      	ldr	r3, [r7, #12]
   22cca:	4013      	ands	r3, r2
   22ccc:	d001      	beq.n	22cd2 <nvm_write_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
   22cce:	2318      	movs	r3, #24
   22cd0:	e07b      	b.n	22dca <nvm_write_buffer+0x12e>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
   22cd2:	4b40      	ldr	r3, [pc, #256]	; (22dd4 <nvm_write_buffer+0x138>)
   22cd4:	881b      	ldrh	r3, [r3, #0]
   22cd6:	1dba      	adds	r2, r7, #6
   22cd8:	8812      	ldrh	r2, [r2, #0]
   22cda:	429a      	cmp	r2, r3
   22cdc:	d901      	bls.n	22ce2 <nvm_write_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
   22cde:	2317      	movs	r3, #23
   22ce0:	e073      	b.n	22dca <nvm_write_buffer+0x12e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   22ce2:	4b3d      	ldr	r3, [pc, #244]	; (22dd8 <nvm_write_buffer+0x13c>)
   22ce4:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   22ce6:	4b3d      	ldr	r3, [pc, #244]	; (22ddc <nvm_write_buffer+0x140>)
   22ce8:	4798      	blx	r3
   22cea:	0003      	movs	r3, r0
   22cec:	001a      	movs	r2, r3
   22cee:	2301      	movs	r3, #1
   22cf0:	4053      	eors	r3, r2
   22cf2:	b2db      	uxtb	r3, r3
   22cf4:	2b00      	cmp	r3, #0
   22cf6:	d001      	beq.n	22cfc <nvm_write_buffer+0x60>
		return STATUS_BUSY;
   22cf8:	2305      	movs	r3, #5
   22cfa:	e066      	b.n	22dca <nvm_write_buffer+0x12e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
   22cfc:	697b      	ldr	r3, [r7, #20]
   22cfe:	4a38      	ldr	r2, [pc, #224]	; (22de0 <nvm_write_buffer+0x144>)
   22d00:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
   22d02:	46c0      	nop			; (mov r8, r8)
   22d04:	4b35      	ldr	r3, [pc, #212]	; (22ddc <nvm_write_buffer+0x140>)
   22d06:	4798      	blx	r3
   22d08:	0003      	movs	r3, r0
   22d0a:	001a      	movs	r2, r3
   22d0c:	2301      	movs	r3, #1
   22d0e:	4053      	eors	r3, r2
   22d10:	b2db      	uxtb	r3, r3
   22d12:	2b00      	cmp	r3, #0
   22d14:	d1f6      	bne.n	22d04 <nvm_write_buffer+0x68>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   22d16:	697b      	ldr	r3, [r7, #20]
   22d18:	2220      	movs	r2, #32
   22d1a:	32ff      	adds	r2, #255	; 0xff
   22d1c:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
   22d1e:	68fb      	ldr	r3, [r7, #12]
   22d20:	085b      	lsrs	r3, r3, #1
   22d22:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
   22d24:	231a      	movs	r3, #26
   22d26:	18fb      	adds	r3, r7, r3
   22d28:	2200      	movs	r2, #0
   22d2a:	801a      	strh	r2, [r3, #0]
   22d2c:	e032      	b.n	22d94 <nvm_write_buffer+0xf8>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
   22d2e:	231a      	movs	r3, #26
   22d30:	18fb      	adds	r3, r7, r3
   22d32:	881b      	ldrh	r3, [r3, #0]
   22d34:	68ba      	ldr	r2, [r7, #8]
   22d36:	18d3      	adds	r3, r2, r3
   22d38:	781a      	ldrb	r2, [r3, #0]
   22d3a:	2318      	movs	r3, #24
   22d3c:	18fb      	adds	r3, r7, r3
   22d3e:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
   22d40:	231a      	movs	r3, #26
   22d42:	18fb      	adds	r3, r7, r3
   22d44:	881a      	ldrh	r2, [r3, #0]
   22d46:	1dbb      	adds	r3, r7, #6
   22d48:	881b      	ldrh	r3, [r3, #0]
   22d4a:	3b01      	subs	r3, #1
   22d4c:	429a      	cmp	r2, r3
   22d4e:	da11      	bge.n	22d74 <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
   22d50:	231a      	movs	r3, #26
   22d52:	18fb      	adds	r3, r7, r3
   22d54:	881b      	ldrh	r3, [r3, #0]
   22d56:	3301      	adds	r3, #1
   22d58:	68ba      	ldr	r2, [r7, #8]
   22d5a:	18d3      	adds	r3, r2, r3
   22d5c:	781b      	ldrb	r3, [r3, #0]
   22d5e:	021b      	lsls	r3, r3, #8
   22d60:	b21a      	sxth	r2, r3
   22d62:	2318      	movs	r3, #24
   22d64:	18fb      	adds	r3, r7, r3
   22d66:	2100      	movs	r1, #0
   22d68:	5e5b      	ldrsh	r3, [r3, r1]
   22d6a:	4313      	orrs	r3, r2
   22d6c:	b21a      	sxth	r2, r3
   22d6e:	2318      	movs	r3, #24
   22d70:	18fb      	adds	r3, r7, r3
   22d72:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
   22d74:	69fb      	ldr	r3, [r7, #28]
   22d76:	1c5a      	adds	r2, r3, #1
   22d78:	61fa      	str	r2, [r7, #28]
   22d7a:	005b      	lsls	r3, r3, #1
   22d7c:	001a      	movs	r2, r3
   22d7e:	2318      	movs	r3, #24
   22d80:	18fb      	adds	r3, r7, r3
   22d82:	881b      	ldrh	r3, [r3, #0]
   22d84:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
   22d86:	231a      	movs	r3, #26
   22d88:	18fb      	adds	r3, r7, r3
   22d8a:	221a      	movs	r2, #26
   22d8c:	18ba      	adds	r2, r7, r2
   22d8e:	8812      	ldrh	r2, [r2, #0]
   22d90:	3202      	adds	r2, #2
   22d92:	801a      	strh	r2, [r3, #0]
   22d94:	231a      	movs	r3, #26
   22d96:	18fa      	adds	r2, r7, r3
   22d98:	1dbb      	adds	r3, r7, #6
   22d9a:	8812      	ldrh	r2, [r2, #0]
   22d9c:	881b      	ldrh	r3, [r3, #0]
   22d9e:	429a      	cmp	r2, r3
   22da0:	d3c5      	bcc.n	22d2e <nvm_write_buffer+0x92>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
   22da2:	4b0c      	ldr	r3, [pc, #48]	; (22dd4 <nvm_write_buffer+0x138>)
   22da4:	791b      	ldrb	r3, [r3, #4]
   22da6:	2201      	movs	r2, #1
   22da8:	4053      	eors	r3, r2
   22daa:	b2db      	uxtb	r3, r3
   22dac:	2b00      	cmp	r3, #0
   22dae:	d00b      	beq.n	22dc8 <nvm_write_buffer+0x12c>
   22db0:	1dbb      	adds	r3, r7, #6
   22db2:	881b      	ldrh	r3, [r3, #0]
   22db4:	2b3f      	cmp	r3, #63	; 0x3f
   22db6:	d807      	bhi.n	22dc8 <nvm_write_buffer+0x12c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
   22db8:	68fb      	ldr	r3, [r7, #12]
   22dba:	2200      	movs	r2, #0
   22dbc:	0019      	movs	r1, r3
   22dbe:	2004      	movs	r0, #4
   22dc0:	4b08      	ldr	r3, [pc, #32]	; (22de4 <nvm_write_buffer+0x148>)
   22dc2:	4798      	blx	r3
   22dc4:	0003      	movs	r3, r0
   22dc6:	e000      	b.n	22dca <nvm_write_buffer+0x12e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
   22dc8:	2300      	movs	r3, #0
}
   22dca:	0018      	movs	r0, r3
   22dcc:	46bd      	mov	sp, r7
   22dce:	b008      	add	sp, #32
   22dd0:	bd80      	pop	{r7, pc}
   22dd2:	46c0      	nop			; (mov r8, r8)
   22dd4:	20000414 	.word	0x20000414
   22dd8:	41004000 	.word	0x41004000
   22ddc:	00022a29 	.word	0x00022a29
   22de0:	ffffa544 	.word	0xffffa544
   22de4:	00022b85 	.word	0x00022b85

00022de8 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
   22de8:	b580      	push	{r7, lr}
   22dea:	b088      	sub	sp, #32
   22dec:	af00      	add	r7, sp, #0
   22dee:	60f8      	str	r0, [r7, #12]
   22df0:	60b9      	str	r1, [r7, #8]
   22df2:	1dbb      	adds	r3, r7, #6
   22df4:	801a      	strh	r2, [r3, #0]
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   22df6:	4b38      	ldr	r3, [pc, #224]	; (22ed8 <nvm_read_buffer+0xf0>)
   22df8:	881b      	ldrh	r3, [r3, #0]
   22dfa:	001a      	movs	r2, r3
   22dfc:	4b36      	ldr	r3, [pc, #216]	; (22ed8 <nvm_read_buffer+0xf0>)
   22dfe:	885b      	ldrh	r3, [r3, #2]
   22e00:	435a      	muls	r2, r3
	if (source_address >
   22e02:	68fb      	ldr	r3, [r7, #12]
   22e04:	429a      	cmp	r2, r3
   22e06:	d201      	bcs.n	22e0c <nvm_read_buffer+0x24>
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
   22e08:	2318      	movs	r3, #24
   22e0a:	e060      	b.n	22ece <nvm_read_buffer+0xe6>
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
   22e0c:	4b32      	ldr	r3, [pc, #200]	; (22ed8 <nvm_read_buffer+0xf0>)
   22e0e:	881b      	ldrh	r3, [r3, #0]
   22e10:	3b01      	subs	r3, #1
   22e12:	001a      	movs	r2, r3
   22e14:	68fb      	ldr	r3, [r7, #12]
   22e16:	4013      	ands	r3, r2
   22e18:	d001      	beq.n	22e1e <nvm_read_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
   22e1a:	2318      	movs	r3, #24
   22e1c:	e057      	b.n	22ece <nvm_read_buffer+0xe6>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
   22e1e:	4b2e      	ldr	r3, [pc, #184]	; (22ed8 <nvm_read_buffer+0xf0>)
   22e20:	881b      	ldrh	r3, [r3, #0]
   22e22:	1dba      	adds	r2, r7, #6
   22e24:	8812      	ldrh	r2, [r2, #0]
   22e26:	429a      	cmp	r2, r3
   22e28:	d901      	bls.n	22e2e <nvm_read_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
   22e2a:	2317      	movs	r3, #23
   22e2c:	e04f      	b.n	22ece <nvm_read_buffer+0xe6>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   22e2e:	4b2b      	ldr	r3, [pc, #172]	; (22edc <nvm_read_buffer+0xf4>)
   22e30:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   22e32:	4b2b      	ldr	r3, [pc, #172]	; (22ee0 <nvm_read_buffer+0xf8>)
   22e34:	4798      	blx	r3
   22e36:	0003      	movs	r3, r0
   22e38:	001a      	movs	r2, r3
   22e3a:	2301      	movs	r3, #1
   22e3c:	4053      	eors	r3, r2
   22e3e:	b2db      	uxtb	r3, r3
   22e40:	2b00      	cmp	r3, #0
   22e42:	d001      	beq.n	22e48 <nvm_read_buffer+0x60>
		return STATUS_BUSY;
   22e44:	2305      	movs	r3, #5
   22e46:	e042      	b.n	22ece <nvm_read_buffer+0xe6>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   22e48:	697b      	ldr	r3, [r7, #20]
   22e4a:	2220      	movs	r2, #32
   22e4c:	32ff      	adds	r2, #255	; 0xff
   22e4e:	831a      	strh	r2, [r3, #24]

	uint32_t page_address = source_address / 2;
   22e50:	68fb      	ldr	r3, [r7, #12]
   22e52:	085b      	lsrs	r3, r3, #1
   22e54:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
   22e56:	231a      	movs	r3, #26
   22e58:	18fb      	adds	r3, r7, r3
   22e5a:	2200      	movs	r2, #0
   22e5c:	801a      	strh	r2, [r3, #0]
   22e5e:	e02e      	b.n	22ebe <nvm_read_buffer+0xd6>
		/* Fetch next 16-bit chunk from the NVM memory space */
		uint16_t data = NVM_MEMORY[page_address++];
   22e60:	69fb      	ldr	r3, [r7, #28]
   22e62:	1c5a      	adds	r2, r3, #1
   22e64:	61fa      	str	r2, [r7, #28]
   22e66:	005b      	lsls	r3, r3, #1
   22e68:	001a      	movs	r2, r3
   22e6a:	2312      	movs	r3, #18
   22e6c:	18fb      	adds	r3, r7, r3
   22e6e:	8812      	ldrh	r2, [r2, #0]
   22e70:	801a      	strh	r2, [r3, #0]

		/* Copy first byte of the 16-bit chunk to the destination buffer */
		buffer[i] = (data & 0xFF);
   22e72:	231a      	movs	r3, #26
   22e74:	18fb      	adds	r3, r7, r3
   22e76:	881b      	ldrh	r3, [r3, #0]
   22e78:	68ba      	ldr	r2, [r7, #8]
   22e7a:	18d3      	adds	r3, r2, r3
   22e7c:	2212      	movs	r2, #18
   22e7e:	18ba      	adds	r2, r7, r2
   22e80:	8812      	ldrh	r2, [r2, #0]
   22e82:	b2d2      	uxtb	r2, r2
   22e84:	701a      	strb	r2, [r3, #0]

		/* If we are not at the end of a read request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
   22e86:	231a      	movs	r3, #26
   22e88:	18fb      	adds	r3, r7, r3
   22e8a:	881a      	ldrh	r2, [r3, #0]
   22e8c:	1dbb      	adds	r3, r7, #6
   22e8e:	881b      	ldrh	r3, [r3, #0]
   22e90:	3b01      	subs	r3, #1
   22e92:	429a      	cmp	r2, r3
   22e94:	da0c      	bge.n	22eb0 <nvm_read_buffer+0xc8>
			buffer[i + 1] = (data >> 8);
   22e96:	231a      	movs	r3, #26
   22e98:	18fb      	adds	r3, r7, r3
   22e9a:	881b      	ldrh	r3, [r3, #0]
   22e9c:	3301      	adds	r3, #1
   22e9e:	68ba      	ldr	r2, [r7, #8]
   22ea0:	18d3      	adds	r3, r2, r3
   22ea2:	2212      	movs	r2, #18
   22ea4:	18ba      	adds	r2, r7, r2
   22ea6:	8812      	ldrh	r2, [r2, #0]
   22ea8:	0a12      	lsrs	r2, r2, #8
   22eaa:	b292      	uxth	r2, r2
   22eac:	b2d2      	uxtb	r2, r2
   22eae:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < length; i += 2) {
   22eb0:	231a      	movs	r3, #26
   22eb2:	18fb      	adds	r3, r7, r3
   22eb4:	221a      	movs	r2, #26
   22eb6:	18ba      	adds	r2, r7, r2
   22eb8:	8812      	ldrh	r2, [r2, #0]
   22eba:	3202      	adds	r2, #2
   22ebc:	801a      	strh	r2, [r3, #0]
   22ebe:	231a      	movs	r3, #26
   22ec0:	18fa      	adds	r2, r7, r3
   22ec2:	1dbb      	adds	r3, r7, #6
   22ec4:	8812      	ldrh	r2, [r2, #0]
   22ec6:	881b      	ldrh	r3, [r3, #0]
   22ec8:	429a      	cmp	r2, r3
   22eca:	d3c9      	bcc.n	22e60 <nvm_read_buffer+0x78>
		}
	}

	return STATUS_OK;
   22ecc:	2300      	movs	r3, #0
}
   22ece:	0018      	movs	r0, r3
   22ed0:	46bd      	mov	sp, r7
   22ed2:	b008      	add	sp, #32
   22ed4:	bd80      	pop	{r7, pc}
   22ed6:	46c0      	nop			; (mov r8, r8)
   22ed8:	20000414 	.word	0x20000414
   22edc:	41004000 	.word	0x41004000
   22ee0:	00022a29 	.word	0x00022a29

00022ee4 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
   22ee4:	b580      	push	{r7, lr}
   22ee6:	b084      	sub	sp, #16
   22ee8:	af00      	add	r7, sp, #0
   22eea:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   22eec:	4b23      	ldr	r3, [pc, #140]	; (22f7c <nvm_erase_row+0x98>)
   22eee:	881b      	ldrh	r3, [r3, #0]
   22ef0:	001a      	movs	r2, r3
   22ef2:	4b22      	ldr	r3, [pc, #136]	; (22f7c <nvm_erase_row+0x98>)
   22ef4:	885b      	ldrh	r3, [r3, #2]
   22ef6:	435a      	muls	r2, r3
	if (row_address >
   22ef8:	687b      	ldr	r3, [r7, #4]
   22efa:	429a      	cmp	r2, r3
   22efc:	d201      	bcs.n	22f02 <nvm_erase_row+0x1e>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
   22efe:	2318      	movs	r3, #24
   22f00:	e037      	b.n	22f72 <nvm_erase_row+0x8e>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
   22f02:	4b1e      	ldr	r3, [pc, #120]	; (22f7c <nvm_erase_row+0x98>)
   22f04:	881b      	ldrh	r3, [r3, #0]
   22f06:	009b      	lsls	r3, r3, #2
   22f08:	3b01      	subs	r3, #1
   22f0a:	001a      	movs	r2, r3
   22f0c:	687b      	ldr	r3, [r7, #4]
   22f0e:	4013      	ands	r3, r2
   22f10:	d001      	beq.n	22f16 <nvm_erase_row+0x32>
		return STATUS_ERR_BAD_ADDRESS;
   22f12:	2318      	movs	r3, #24
   22f14:	e02d      	b.n	22f72 <nvm_erase_row+0x8e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   22f16:	4b1a      	ldr	r3, [pc, #104]	; (22f80 <nvm_erase_row+0x9c>)
   22f18:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   22f1a:	4b1a      	ldr	r3, [pc, #104]	; (22f84 <nvm_erase_row+0xa0>)
   22f1c:	4798      	blx	r3
   22f1e:	0003      	movs	r3, r0
   22f20:	001a      	movs	r2, r3
   22f22:	2301      	movs	r3, #1
   22f24:	4053      	eors	r3, r2
   22f26:	b2db      	uxtb	r3, r3
   22f28:	2b00      	cmp	r3, #0
   22f2a:	d001      	beq.n	22f30 <nvm_erase_row+0x4c>
		return STATUS_BUSY;
   22f2c:	2305      	movs	r3, #5
   22f2e:	e020      	b.n	22f72 <nvm_erase_row+0x8e>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   22f30:	68fb      	ldr	r3, [r7, #12]
   22f32:	2220      	movs	r2, #32
   22f34:	32ff      	adds	r2, #255	; 0xff
   22f36:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
   22f38:	687b      	ldr	r3, [r7, #4]
   22f3a:	089b      	lsrs	r3, r3, #2
   22f3c:	005a      	lsls	r2, r3, #1
   22f3e:	68fb      	ldr	r3, [r7, #12]
   22f40:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
   22f42:	68fb      	ldr	r3, [r7, #12]
   22f44:	4a10      	ldr	r2, [pc, #64]	; (22f88 <nvm_erase_row+0xa4>)
   22f46:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
   22f48:	46c0      	nop			; (mov r8, r8)
   22f4a:	4b0e      	ldr	r3, [pc, #56]	; (22f84 <nvm_erase_row+0xa0>)
   22f4c:	4798      	blx	r3
   22f4e:	0003      	movs	r3, r0
   22f50:	001a      	movs	r2, r3
   22f52:	2301      	movs	r3, #1
   22f54:	4053      	eors	r3, r2
   22f56:	b2db      	uxtb	r3, r3
   22f58:	2b00      	cmp	r3, #0
   22f5a:	d1f6      	bne.n	22f4a <nvm_erase_row+0x66>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
   22f5c:	68fb      	ldr	r3, [r7, #12]
   22f5e:	8b1b      	ldrh	r3, [r3, #24]
   22f60:	b29b      	uxth	r3, r3
   22f62:	b2db      	uxtb	r3, r3
   22f64:	001a      	movs	r2, r3
   22f66:	231c      	movs	r3, #28
   22f68:	4013      	ands	r3, r2
   22f6a:	d001      	beq.n	22f70 <nvm_erase_row+0x8c>
		return STATUS_ABORTED;
   22f6c:	2304      	movs	r3, #4
   22f6e:	e000      	b.n	22f72 <nvm_erase_row+0x8e>
	}

	return STATUS_OK;
   22f70:	2300      	movs	r3, #0
}
   22f72:	0018      	movs	r0, r3
   22f74:	46bd      	mov	sp, r7
   22f76:	b004      	add	sp, #16
   22f78:	bd80      	pop	{r7, pc}
   22f7a:	46c0      	nop			; (mov r8, r8)
   22f7c:	20000414 	.word	0x20000414
   22f80:	41004000 	.word	0x41004000
   22f84:	00022a29 	.word	0x00022a29
   22f88:	ffffa502 	.word	0xffffa502

00022f8c <nvm_get_parameters>:
 * \param[out] parameters    Parameter structure, which holds page size and
 *                           number of pages in the NVM memory
 */
void nvm_get_parameters(
		struct nvm_parameters *const parameters)
{
   22f8c:	b580      	push	{r7, lr}
   22f8e:	b086      	sub	sp, #24
   22f90:	af00      	add	r7, sp, #0
   22f92:	6078      	str	r0, [r7, #4]
	/* Sanity check parameters */
	Assert(parameters);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   22f94:	4b2a      	ldr	r3, [pc, #168]	; (23040 <nvm_get_parameters+0xb4>)
   22f96:	617b      	str	r3, [r7, #20]

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   22f98:	697b      	ldr	r3, [r7, #20]
   22f9a:	2220      	movs	r2, #32
   22f9c:	32ff      	adds	r2, #255	; 0xff
   22f9e:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
   22fa0:	697b      	ldr	r3, [r7, #20]
   22fa2:	689b      	ldr	r3, [r3, #8]
   22fa4:	613b      	str	r3, [r7, #16]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
   22fa6:	693b      	ldr	r3, [r7, #16]
   22fa8:	0c1b      	lsrs	r3, r3, #16
   22faa:	2207      	movs	r2, #7
   22fac:	4013      	ands	r3, r2
   22fae:	2208      	movs	r2, #8
   22fb0:	409a      	lsls	r2, r3
   22fb2:	0013      	movs	r3, r2
	parameters->page_size =
   22fb4:	b2da      	uxtb	r2, r3
   22fb6:	687b      	ldr	r3, [r7, #4]
   22fb8:	701a      	strb	r2, [r3, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
   22fba:	693b      	ldr	r3, [r7, #16]
   22fbc:	b29a      	uxth	r2, r3
   22fbe:	687b      	ldr	r3, [r7, #4]
   22fc0:	805a      	strh	r2, [r3, #2]
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
   22fc2:	4b20      	ldr	r3, [pc, #128]	; (23044 <nvm_get_parameters+0xb8>)
   22fc4:	881b      	ldrh	r3, [r3, #0]
   22fc6:	b29b      	uxth	r3, r3
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;
   22fc8:	091b      	lsrs	r3, r3, #4
   22fca:	b29a      	uxth	r2, r3
	uint16_t eeprom_fuse_value =
   22fcc:	230e      	movs	r3, #14
   22fce:	18fb      	adds	r3, r7, r3
   22fd0:	2107      	movs	r1, #7
   22fd2:	400a      	ands	r2, r1
   22fd4:	801a      	strh	r2, [r3, #0]

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
   22fd6:	230e      	movs	r3, #14
   22fd8:	18fb      	adds	r3, r7, r3
   22fda:	881b      	ldrh	r3, [r3, #0]
   22fdc:	2b07      	cmp	r3, #7
   22fde:	d103      	bne.n	22fe8 <nvm_get_parameters+0x5c>
		parameters->eeprom_number_of_pages = 0;
   22fe0:	687b      	ldr	r3, [r7, #4]
   22fe2:	2200      	movs	r2, #0
   22fe4:	605a      	str	r2, [r3, #4]
   22fe6:	e00a      	b.n	22ffe <nvm_get_parameters+0x72>
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
   22fe8:	230e      	movs	r3, #14
   22fea:	18fb      	adds	r3, r7, r3
   22fec:	881b      	ldrh	r3, [r3, #0]
   22fee:	2206      	movs	r2, #6
   22ff0:	1ad3      	subs	r3, r2, r3
   22ff2:	2204      	movs	r2, #4
   22ff4:	409a      	lsls	r2, r3
   22ff6:	0013      	movs	r3, r2
   22ff8:	001a      	movs	r2, r3
		parameters->eeprom_number_of_pages =
   22ffa:	687b      	ldr	r3, [r7, #4]
   22ffc:	605a      	str	r2, [r3, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
   22ffe:	4b11      	ldr	r3, [pc, #68]	; (23044 <nvm_get_parameters+0xb8>)
   23000:	881b      	ldrh	r3, [r3, #0]
   23002:	b29a      	uxth	r2, r3
	uint16_t boot_fuse_value =
   23004:	230c      	movs	r3, #12
   23006:	18fb      	adds	r3, r7, r3
   23008:	2107      	movs	r1, #7
   2300a:	400a      	ands	r2, r1
   2300c:	801a      	strh	r2, [r3, #0]
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
   2300e:	230c      	movs	r3, #12
   23010:	18fb      	adds	r3, r7, r3
   23012:	881b      	ldrh	r3, [r3, #0]
   23014:	2b07      	cmp	r3, #7
   23016:	d103      	bne.n	23020 <nvm_get_parameters+0x94>
		parameters->bootloader_number_of_pages = 0;
   23018:	687b      	ldr	r3, [r7, #4]
   2301a:	2200      	movs	r2, #0
   2301c:	609a      	str	r2, [r3, #8]
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
	}
}
   2301e:	e00a      	b.n	23036 <nvm_get_parameters+0xaa>
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
   23020:	230c      	movs	r3, #12
   23022:	18fb      	adds	r3, r7, r3
   23024:	881b      	ldrh	r3, [r3, #0]
   23026:	2207      	movs	r2, #7
   23028:	1ad3      	subs	r3, r2, r3
   2302a:	2204      	movs	r2, #4
   2302c:	409a      	lsls	r2, r3
   2302e:	0013      	movs	r3, r2
   23030:	001a      	movs	r2, r3
		parameters->bootloader_number_of_pages =
   23032:	687b      	ldr	r3, [r7, #4]
   23034:	609a      	str	r2, [r3, #8]
}
   23036:	46c0      	nop			; (mov r8, r8)
   23038:	46bd      	mov	sp, r7
   2303a:	b006      	add	sp, #24
   2303c:	bd80      	pop	{r7, pc}
   2303e:	46c0      	nop			; (mov r8, r8)
   23040:	41004000 	.word	0x41004000
   23044:	00804000 	.word	0x00804000

00023048 <system_pinmux_get_config_defaults>:
{
   23048:	b580      	push	{r7, lr}
   2304a:	b082      	sub	sp, #8
   2304c:	af00      	add	r7, sp, #0
   2304e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   23050:	687b      	ldr	r3, [r7, #4]
   23052:	2280      	movs	r2, #128	; 0x80
   23054:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   23056:	687b      	ldr	r3, [r7, #4]
   23058:	2200      	movs	r2, #0
   2305a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2305c:	687b      	ldr	r3, [r7, #4]
   2305e:	2201      	movs	r2, #1
   23060:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   23062:	687b      	ldr	r3, [r7, #4]
   23064:	2200      	movs	r2, #0
   23066:	70da      	strb	r2, [r3, #3]
}
   23068:	46c0      	nop			; (mov r8, r8)
   2306a:	46bd      	mov	sp, r7
   2306c:	b002      	add	sp, #8
   2306e:	bd80      	pop	{r7, pc}

00023070 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   23070:	b580      	push	{r7, lr}
   23072:	b084      	sub	sp, #16
   23074:	af00      	add	r7, sp, #0
   23076:	0002      	movs	r2, r0
   23078:	6039      	str	r1, [r7, #0]
   2307a:	1dfb      	adds	r3, r7, #7
   2307c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   2307e:	230c      	movs	r3, #12
   23080:	18fb      	adds	r3, r7, r3
   23082:	0018      	movs	r0, r3
   23084:	4b10      	ldr	r3, [pc, #64]	; (230c8 <port_pin_set_config+0x58>)
   23086:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   23088:	230c      	movs	r3, #12
   2308a:	18fb      	adds	r3, r7, r3
   2308c:	2280      	movs	r2, #128	; 0x80
   2308e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   23090:	683b      	ldr	r3, [r7, #0]
   23092:	781a      	ldrb	r2, [r3, #0]
   23094:	230c      	movs	r3, #12
   23096:	18fb      	adds	r3, r7, r3
   23098:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   2309a:	683b      	ldr	r3, [r7, #0]
   2309c:	785a      	ldrb	r2, [r3, #1]
   2309e:	230c      	movs	r3, #12
   230a0:	18fb      	adds	r3, r7, r3
   230a2:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   230a4:	683b      	ldr	r3, [r7, #0]
   230a6:	789a      	ldrb	r2, [r3, #2]
   230a8:	230c      	movs	r3, #12
   230aa:	18fb      	adds	r3, r7, r3
   230ac:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   230ae:	230c      	movs	r3, #12
   230b0:	18fa      	adds	r2, r7, r3
   230b2:	1dfb      	adds	r3, r7, #7
   230b4:	781b      	ldrb	r3, [r3, #0]
   230b6:	0011      	movs	r1, r2
   230b8:	0018      	movs	r0, r3
   230ba:	4b04      	ldr	r3, [pc, #16]	; (230cc <port_pin_set_config+0x5c>)
   230bc:	4798      	blx	r3
}
   230be:	46c0      	nop			; (mov r8, r8)
   230c0:	46bd      	mov	sp, r7
   230c2:	b004      	add	sp, #16
   230c4:	bd80      	pop	{r7, pc}
   230c6:	46c0      	nop			; (mov r8, r8)
   230c8:	00023049 	.word	0x00023049
   230cc:	00024da1 	.word	0x00024da1

000230d0 <nvm_get_config_defaults>:
{
   230d0:	b580      	push	{r7, lr}
   230d2:	b082      	sub	sp, #8
   230d4:	af00      	add	r7, sp, #0
   230d6:	6078      	str	r0, [r7, #4]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
   230d8:	687b      	ldr	r3, [r7, #4]
   230da:	2200      	movs	r2, #0
   230dc:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
   230de:	687b      	ldr	r3, [r7, #4]
   230e0:	2201      	movs	r2, #1
   230e2:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
   230e4:	4b08      	ldr	r3, [pc, #32]	; (23108 <nvm_get_config_defaults+0x38>)
   230e6:	685b      	ldr	r3, [r3, #4]
   230e8:	06db      	lsls	r3, r3, #27
   230ea:	0f1b      	lsrs	r3, r3, #28
   230ec:	b2db      	uxtb	r3, r3
   230ee:	001a      	movs	r2, r3
   230f0:	687b      	ldr	r3, [r7, #4]
   230f2:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
   230f4:	687b      	ldr	r3, [r7, #4]
   230f6:	2200      	movs	r2, #0
   230f8:	70da      	strb	r2, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
   230fa:	687b      	ldr	r3, [r7, #4]
   230fc:	2200      	movs	r2, #0
   230fe:	711a      	strb	r2, [r3, #4]
}
   23100:	46c0      	nop			; (mov r8, r8)
   23102:	46bd      	mov	sp, r7
   23104:	b002      	add	sp, #8
   23106:	bd80      	pop	{r7, pc}
   23108:	41004000 	.word	0x41004000

0002310c <_eeprom_emulator_nvm_erase_row>:
 *
 *  \param[in] row  Physical row in EEPROM space to erase
 */
static void _eeprom_emulator_nvm_erase_row(
		const uint8_t row)
{
   2310c:	b590      	push	{r4, r7, lr}
   2310e:	b085      	sub	sp, #20
   23110:	af00      	add	r7, sp, #0
   23112:	0002      	movs	r2, r0
   23114:	1dfb      	adds	r3, r7, #7
   23116:	701a      	strb	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   23118:	230f      	movs	r3, #15
   2311a:	18fb      	adds	r3, r7, r3
   2311c:	2200      	movs	r2, #0
   2311e:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_erase_row(
				(uint32_t)&_eeprom_instance.flash[row * NVMCTRL_ROW_PAGES]);
   23120:	4b0a      	ldr	r3, [pc, #40]	; (2314c <_eeprom_emulator_nvm_erase_row+0x40>)
   23122:	685b      	ldr	r3, [r3, #4]
   23124:	1dfa      	adds	r2, r7, #7
   23126:	7812      	ldrb	r2, [r2, #0]
   23128:	0212      	lsls	r2, r2, #8
   2312a:	189b      	adds	r3, r3, r2
		error_code = nvm_erase_row(
   2312c:	220f      	movs	r2, #15
   2312e:	18bc      	adds	r4, r7, r2
   23130:	0018      	movs	r0, r3
   23132:	4b07      	ldr	r3, [pc, #28]	; (23150 <_eeprom_emulator_nvm_erase_row+0x44>)
   23134:	4798      	blx	r3
   23136:	0003      	movs	r3, r0
   23138:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   2313a:	230f      	movs	r3, #15
   2313c:	18fb      	adds	r3, r7, r3
   2313e:	781b      	ldrb	r3, [r3, #0]
   23140:	2b05      	cmp	r3, #5
   23142:	d0ed      	beq.n	23120 <_eeprom_emulator_nvm_erase_row+0x14>
}
   23144:	46c0      	nop			; (mov r8, r8)
   23146:	46bd      	mov	sp, r7
   23148:	b005      	add	sp, #20
   2314a:	bd90      	pop	{r4, r7, pc}
   2314c:	2000041c 	.word	0x2000041c
   23150:	00022ee5 	.word	0x00022ee5

00023154 <_eeprom_emulator_nvm_fill_cache>:
 *  \param[in] data           Data to write to the physical memory page
 */
static void _eeprom_emulator_nvm_fill_cache(
		const uint16_t physical_page,
		const void* const data)
{
   23154:	b590      	push	{r4, r7, lr}
   23156:	b085      	sub	sp, #20
   23158:	af00      	add	r7, sp, #0
   2315a:	0002      	movs	r2, r0
   2315c:	6039      	str	r1, [r7, #0]
   2315e:	1dbb      	adds	r3, r7, #6
   23160:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   23162:	230f      	movs	r3, #15
   23164:	18fb      	adds	r3, r7, r3
   23166:	2200      	movs	r2, #0
   23168:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_write_buffer(
				(uint32_t)&_eeprom_instance.flash[physical_page],
   2316a:	4b0c      	ldr	r3, [pc, #48]	; (2319c <_eeprom_emulator_nvm_fill_cache+0x48>)
   2316c:	685a      	ldr	r2, [r3, #4]
   2316e:	1dbb      	adds	r3, r7, #6
   23170:	881b      	ldrh	r3, [r3, #0]
   23172:	019b      	lsls	r3, r3, #6
   23174:	18d3      	adds	r3, r2, r3
		error_code = nvm_write_buffer(
   23176:	0018      	movs	r0, r3
   23178:	230f      	movs	r3, #15
   2317a:	18fc      	adds	r4, r7, r3
   2317c:	683b      	ldr	r3, [r7, #0]
   2317e:	2240      	movs	r2, #64	; 0x40
   23180:	0019      	movs	r1, r3
   23182:	4b07      	ldr	r3, [pc, #28]	; (231a0 <_eeprom_emulator_nvm_fill_cache+0x4c>)
   23184:	4798      	blx	r3
   23186:	0003      	movs	r3, r0
   23188:	7023      	strb	r3, [r4, #0]
				(uint8_t*)data,
				NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
   2318a:	230f      	movs	r3, #15
   2318c:	18fb      	adds	r3, r7, r3
   2318e:	781b      	ldrb	r3, [r3, #0]
   23190:	2b05      	cmp	r3, #5
   23192:	d0ea      	beq.n	2316a <_eeprom_emulator_nvm_fill_cache+0x16>
}
   23194:	46c0      	nop			; (mov r8, r8)
   23196:	46bd      	mov	sp, r7
   23198:	b005      	add	sp, #20
   2319a:	bd90      	pop	{r4, r7, pc}
   2319c:	2000041c 	.word	0x2000041c
   231a0:	00022c9d 	.word	0x00022c9d

000231a4 <_eeprom_emulator_nvm_commit_cache>:
 *
 *  \param[in] physical_page  Physical page in EEPROM space to commit
 */
static void _eeprom_emulator_nvm_commit_cache(
		const uint16_t physical_page)
{
   231a4:	b590      	push	{r4, r7, lr}
   231a6:	b085      	sub	sp, #20
   231a8:	af00      	add	r7, sp, #0
   231aa:	0002      	movs	r2, r0
   231ac:	1dbb      	adds	r3, r7, #6
   231ae:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   231b0:	230f      	movs	r3, #15
   231b2:	18fb      	adds	r3, r7, r3
   231b4:	2200      	movs	r2, #0
   231b6:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_execute_command(
				NVM_COMMAND_WRITE_PAGE,
				(uint32_t)&_eeprom_instance.flash[physical_page], 0);
   231b8:	4b0b      	ldr	r3, [pc, #44]	; (231e8 <_eeprom_emulator_nvm_commit_cache+0x44>)
   231ba:	685a      	ldr	r2, [r3, #4]
   231bc:	1dbb      	adds	r3, r7, #6
   231be:	881b      	ldrh	r3, [r3, #0]
   231c0:	019b      	lsls	r3, r3, #6
   231c2:	18d3      	adds	r3, r2, r3
		error_code = nvm_execute_command(
   231c4:	220f      	movs	r2, #15
   231c6:	18bc      	adds	r4, r7, r2
   231c8:	2200      	movs	r2, #0
   231ca:	0019      	movs	r1, r3
   231cc:	2004      	movs	r0, #4
   231ce:	4b07      	ldr	r3, [pc, #28]	; (231ec <_eeprom_emulator_nvm_commit_cache+0x48>)
   231d0:	4798      	blx	r3
   231d2:	0003      	movs	r3, r0
   231d4:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   231d6:	230f      	movs	r3, #15
   231d8:	18fb      	adds	r3, r7, r3
   231da:	781b      	ldrb	r3, [r3, #0]
   231dc:	2b05      	cmp	r3, #5
   231de:	d0eb      	beq.n	231b8 <_eeprom_emulator_nvm_commit_cache+0x14>
}
   231e0:	46c0      	nop			; (mov r8, r8)
   231e2:	46bd      	mov	sp, r7
   231e4:	b005      	add	sp, #20
   231e6:	bd90      	pop	{r4, r7, pc}
   231e8:	2000041c 	.word	0x2000041c
   231ec:	00022b85 	.word	0x00022b85

000231f0 <_eeprom_emulator_nvm_read_page>:
 *  \param[out] data           Destination buffer to fill with the read data
 */
static void _eeprom_emulator_nvm_read_page(
		const uint16_t physical_page,
		void* const data)
{
   231f0:	b590      	push	{r4, r7, lr}
   231f2:	b085      	sub	sp, #20
   231f4:	af00      	add	r7, sp, #0
   231f6:	0002      	movs	r2, r0
   231f8:	6039      	str	r1, [r7, #0]
   231fa:	1dbb      	adds	r3, r7, #6
   231fc:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   231fe:	230f      	movs	r3, #15
   23200:	18fb      	adds	r3, r7, r3
   23202:	2200      	movs	r2, #0
   23204:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_read_buffer(
				(uint32_t)&_eeprom_instance.flash[physical_page],
   23206:	4b0c      	ldr	r3, [pc, #48]	; (23238 <_eeprom_emulator_nvm_read_page+0x48>)
   23208:	685a      	ldr	r2, [r3, #4]
   2320a:	1dbb      	adds	r3, r7, #6
   2320c:	881b      	ldrh	r3, [r3, #0]
   2320e:	019b      	lsls	r3, r3, #6
   23210:	18d3      	adds	r3, r2, r3
		error_code = nvm_read_buffer(
   23212:	0018      	movs	r0, r3
   23214:	230f      	movs	r3, #15
   23216:	18fc      	adds	r4, r7, r3
   23218:	683b      	ldr	r3, [r7, #0]
   2321a:	2240      	movs	r2, #64	; 0x40
   2321c:	0019      	movs	r1, r3
   2321e:	4b07      	ldr	r3, [pc, #28]	; (2323c <_eeprom_emulator_nvm_read_page+0x4c>)
   23220:	4798      	blx	r3
   23222:	0003      	movs	r3, r0
   23224:	7023      	strb	r3, [r4, #0]
				(uint8_t*)data,
				NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
   23226:	230f      	movs	r3, #15
   23228:	18fb      	adds	r3, r7, r3
   2322a:	781b      	ldrb	r3, [r3, #0]
   2322c:	2b05      	cmp	r3, #5
   2322e:	d0ea      	beq.n	23206 <_eeprom_emulator_nvm_read_page+0x16>
}
   23230:	46c0      	nop			; (mov r8, r8)
   23232:	46bd      	mov	sp, r7
   23234:	b005      	add	sp, #20
   23236:	bd90      	pop	{r4, r7, pc}
   23238:	2000041c 	.word	0x2000041c
   2323c:	00022de9 	.word	0x00022de9

00023240 <_eeprom_emulator_format_memory>:

/**
 * \brief Initializes the emulated EEPROM memory, destroying the current contents.
 */
static void _eeprom_emulator_format_memory(void)
{
   23240:	b580      	push	{r7, lr}
   23242:	b092      	sub	sp, #72	; 0x48
   23244:	af00      	add	r7, sp, #0
	uint16_t logical_page = 0;
   23246:	2346      	movs	r3, #70	; 0x46
   23248:	18fb      	adds	r3, r7, r3
   2324a:	2200      	movs	r2, #0
   2324c:	801a      	strh	r2, [r3, #0]

	/* Set row 0 as the spare row */
	_eeprom_instance.spare_row = 0;
   2324e:	4b32      	ldr	r3, [pc, #200]	; (23318 <_eeprom_emulator_format_memory+0xd8>)
   23250:	2287      	movs	r2, #135	; 0x87
   23252:	2100      	movs	r1, #0
   23254:	5499      	strb	r1, [r3, r2]
	_eeprom_emulator_nvm_erase_row(_eeprom_instance.spare_row);
   23256:	4b30      	ldr	r3, [pc, #192]	; (23318 <_eeprom_emulator_format_memory+0xd8>)
   23258:	2287      	movs	r2, #135	; 0x87
   2325a:	5c9b      	ldrb	r3, [r3, r2]
   2325c:	0018      	movs	r0, r3
   2325e:	4b2f      	ldr	r3, [pc, #188]	; (2331c <_eeprom_emulator_format_memory+0xdc>)
   23260:	4798      	blx	r3

	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
   23262:	2344      	movs	r3, #68	; 0x44
   23264:	18fb      	adds	r3, r7, r3
   23266:	2204      	movs	r2, #4
   23268:	801a      	strh	r2, [r3, #0]
   2326a:	e04a      	b.n	23302 <_eeprom_emulator_format_memory+0xc2>
			physical_page < _eeprom_instance.physical_pages; physical_page++) {

		if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
   2326c:	2344      	movs	r3, #68	; 0x44
   2326e:	18fb      	adds	r3, r7, r3
   23270:	881a      	ldrh	r2, [r3, #0]
   23272:	4b29      	ldr	r3, [pc, #164]	; (23318 <_eeprom_emulator_format_memory+0xd8>)
   23274:	891b      	ldrh	r3, [r3, #8]
   23276:	3b01      	subs	r3, #1
   23278:	429a      	cmp	r2, r3
   2327a:	d03a      	beq.n	232f2 <_eeprom_emulator_format_memory+0xb2>
			continue;
		}

		/* If we are at the first page in a new row, erase the entire row */
		if ((physical_page % NVMCTRL_ROW_PAGES) == 0) {
   2327c:	2344      	movs	r3, #68	; 0x44
   2327e:	18fb      	adds	r3, r7, r3
   23280:	881b      	ldrh	r3, [r3, #0]
   23282:	2203      	movs	r2, #3
   23284:	4013      	ands	r3, r2
   23286:	b29b      	uxth	r3, r3
   23288:	2b00      	cmp	r3, #0
   2328a:	d108      	bne.n	2329e <_eeprom_emulator_format_memory+0x5e>
			_eeprom_emulator_nvm_erase_row(physical_page / NVMCTRL_ROW_PAGES);
   2328c:	2344      	movs	r3, #68	; 0x44
   2328e:	18fb      	adds	r3, r7, r3
   23290:	881b      	ldrh	r3, [r3, #0]
   23292:	089b      	lsrs	r3, r3, #2
   23294:	b29b      	uxth	r3, r3
   23296:	b2db      	uxtb	r3, r3
   23298:	0018      	movs	r0, r3
   2329a:	4b20      	ldr	r3, [pc, #128]	; (2331c <_eeprom_emulator_format_memory+0xdc>)
   2329c:	4798      	blx	r3
		}

		/* Two logical pages are stored in each physical row; program in a
		 * pair of initialized but blank set of emulated EEPROM pages */
		if ((physical_page % NVMCTRL_ROW_PAGES) < 2) {
   2329e:	2344      	movs	r3, #68	; 0x44
   232a0:	18fb      	adds	r3, r7, r3
   232a2:	881b      	ldrh	r3, [r3, #0]
   232a4:	2203      	movs	r2, #3
   232a6:	4013      	ands	r3, r2
   232a8:	b29b      	uxth	r3, r3
   232aa:	2b01      	cmp	r3, #1
   232ac:	d822      	bhi.n	232f4 <_eeprom_emulator_format_memory+0xb4>
			/* Make a buffer to hold the initialized EEPROM page */
			struct _eeprom_page data;
			memset(&data, 0xFF, sizeof(data));
   232ae:	1d3b      	adds	r3, r7, #4
   232b0:	2240      	movs	r2, #64	; 0x40
   232b2:	21ff      	movs	r1, #255	; 0xff
   232b4:	0018      	movs	r0, r3
   232b6:	4b1a      	ldr	r3, [pc, #104]	; (23320 <_eeprom_emulator_format_memory+0xe0>)
   232b8:	4798      	blx	r3

			/* Set up the new EEPROM row's header */
			data.header.logical_page = logical_page;
   232ba:	2346      	movs	r3, #70	; 0x46
   232bc:	18fb      	adds	r3, r7, r3
   232be:	881b      	ldrh	r3, [r3, #0]
   232c0:	b2da      	uxtb	r2, r3
   232c2:	1d3b      	adds	r3, r7, #4
   232c4:	701a      	strb	r2, [r3, #0]

			/* Write the page out to physical memory */
			_eeprom_emulator_nvm_fill_cache(physical_page, &data);
   232c6:	1d3a      	adds	r2, r7, #4
   232c8:	2344      	movs	r3, #68	; 0x44
   232ca:	18fb      	adds	r3, r7, r3
   232cc:	881b      	ldrh	r3, [r3, #0]
   232ce:	0011      	movs	r1, r2
   232d0:	0018      	movs	r0, r3
   232d2:	4b14      	ldr	r3, [pc, #80]	; (23324 <_eeprom_emulator_format_memory+0xe4>)
   232d4:	4798      	blx	r3
			_eeprom_emulator_nvm_commit_cache(physical_page);
   232d6:	2344      	movs	r3, #68	; 0x44
   232d8:	18fb      	adds	r3, r7, r3
   232da:	881b      	ldrh	r3, [r3, #0]
   232dc:	0018      	movs	r0, r3
   232de:	4b12      	ldr	r3, [pc, #72]	; (23328 <_eeprom_emulator_format_memory+0xe8>)
   232e0:	4798      	blx	r3

			/* Increment the logical EEPROM page address now that the current
			 * address' page has been initialized */
			logical_page++;
   232e2:	2346      	movs	r3, #70	; 0x46
   232e4:	18fb      	adds	r3, r7, r3
   232e6:	881a      	ldrh	r2, [r3, #0]
   232e8:	2346      	movs	r3, #70	; 0x46
   232ea:	18fb      	adds	r3, r7, r3
   232ec:	3201      	adds	r2, #1
   232ee:	801a      	strh	r2, [r3, #0]
   232f0:	e000      	b.n	232f4 <_eeprom_emulator_format_memory+0xb4>
			continue;
   232f2:	46c0      	nop			; (mov r8, r8)
			physical_page < _eeprom_instance.physical_pages; physical_page++) {
   232f4:	2344      	movs	r3, #68	; 0x44
   232f6:	18fb      	adds	r3, r7, r3
   232f8:	881a      	ldrh	r2, [r3, #0]
   232fa:	2344      	movs	r3, #68	; 0x44
   232fc:	18fb      	adds	r3, r7, r3
   232fe:	3201      	adds	r2, #1
   23300:	801a      	strh	r2, [r3, #0]
   23302:	4b05      	ldr	r3, [pc, #20]	; (23318 <_eeprom_emulator_format_memory+0xd8>)
   23304:	891b      	ldrh	r3, [r3, #8]
	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
   23306:	2244      	movs	r2, #68	; 0x44
   23308:	18ba      	adds	r2, r7, r2
   2330a:	8812      	ldrh	r2, [r2, #0]
   2330c:	429a      	cmp	r2, r3
   2330e:	d3ad      	bcc.n	2326c <_eeprom_emulator_format_memory+0x2c>
		}
	}
}
   23310:	46c0      	nop			; (mov r8, r8)
   23312:	46bd      	mov	sp, r7
   23314:	b012      	add	sp, #72	; 0x48
   23316:	bd80      	pop	{r7, pc}
   23318:	2000041c 	.word	0x2000041c
   2331c:	0002310d 	.word	0x0002310d
   23320:	00028f13 	.word	0x00028f13
   23324:	00023155 	.word	0x00023155
   23328:	000231a5 	.word	0x000231a5

0002332c <_eeprom_emulator_is_full_row>:
 *  it is the full row.
 *
 *  \param[in]  phy_page  Physical page that in a row
 */
static bool _eeprom_emulator_is_full_row(uint16_t phy_page)
{
   2332c:	b580      	push	{r7, lr}
   2332e:	b082      	sub	sp, #8
   23330:	af00      	add	r7, sp, #0
   23332:	0002      	movs	r2, r0
   23334:	1dbb      	adds	r3, r7, #6
   23336:	801a      	strh	r2, [r3, #0]
	if((_eeprom_instance.flash[phy_page].header.logical_page
   23338:	4b14      	ldr	r3, [pc, #80]	; (2338c <_eeprom_emulator_is_full_row+0x60>)
   2333a:	685a      	ldr	r2, [r3, #4]
   2333c:	1dbb      	adds	r3, r7, #6
   2333e:	881b      	ldrh	r3, [r3, #0]
   23340:	019b      	lsls	r3, r3, #6
   23342:	18d3      	adds	r3, r2, r3
   23344:	781a      	ldrb	r2, [r3, #0]
		== _eeprom_instance.flash[phy_page+2].header.logical_page)
   23346:	4b11      	ldr	r3, [pc, #68]	; (2338c <_eeprom_emulator_is_full_row+0x60>)
   23348:	6859      	ldr	r1, [r3, #4]
   2334a:	1dbb      	adds	r3, r7, #6
   2334c:	881b      	ldrh	r3, [r3, #0]
   2334e:	3302      	adds	r3, #2
   23350:	019b      	lsls	r3, r3, #6
   23352:	18cb      	adds	r3, r1, r3
   23354:	781b      	ldrb	r3, [r3, #0]
	if((_eeprom_instance.flash[phy_page].header.logical_page
   23356:	429a      	cmp	r2, r3
   23358:	d011      	beq.n	2337e <_eeprom_emulator_is_full_row+0x52>
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
   2335a:	4b0c      	ldr	r3, [pc, #48]	; (2338c <_eeprom_emulator_is_full_row+0x60>)
   2335c:	685a      	ldr	r2, [r3, #4]
   2335e:	1dbb      	adds	r3, r7, #6
   23360:	881b      	ldrh	r3, [r3, #0]
   23362:	3301      	adds	r3, #1
   23364:	019b      	lsls	r3, r3, #6
   23366:	18d3      	adds	r3, r2, r3
   23368:	781a      	ldrb	r2, [r3, #0]
		== _eeprom_instance.flash[phy_page+2].header.logical_page )) {
   2336a:	4b08      	ldr	r3, [pc, #32]	; (2338c <_eeprom_emulator_is_full_row+0x60>)
   2336c:	6859      	ldr	r1, [r3, #4]
   2336e:	1dbb      	adds	r3, r7, #6
   23370:	881b      	ldrh	r3, [r3, #0]
   23372:	3302      	adds	r3, #2
   23374:	019b      	lsls	r3, r3, #6
   23376:	18cb      	adds	r3, r1, r3
   23378:	781b      	ldrb	r3, [r3, #0]
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
   2337a:	429a      	cmp	r2, r3
   2337c:	d101      	bne.n	23382 <_eeprom_emulator_is_full_row+0x56>
		return true;
   2337e:	2301      	movs	r3, #1
   23380:	e000      	b.n	23384 <_eeprom_emulator_is_full_row+0x58>
	} else {
		return false;
   23382:	2300      	movs	r3, #0
	}
}
   23384:	0018      	movs	r0, r3
   23386:	46bd      	mov	sp, r7
   23388:	b002      	add	sp, #8
   2338a:	bd80      	pop	{r7, pc}
   2338c:	2000041c 	.word	0x2000041c

00023390 <_eeprom_emulator_erase_invalid_page>:
 *
 *  \param[in]  pre_phy_page  One physical invalid page
 *  \param[in]  next_phy_page Another physical invalid page
 */
static void _eeprom_emulator_erase_invalid_page(uint16_t pre_phy_page,uint16_t next_phy_page)
{
   23390:	b580      	push	{r7, lr}
   23392:	b082      	sub	sp, #8
   23394:	af00      	add	r7, sp, #0
   23396:	0002      	movs	r2, r0
   23398:	1dbb      	adds	r3, r7, #6
   2339a:	801a      	strh	r2, [r3, #0]
   2339c:	1d3b      	adds	r3, r7, #4
   2339e:	1c0a      	adds	r2, r1, #0
   233a0:	801a      	strh	r2, [r3, #0]
 	/* Erase the old/full row*/
	if(_eeprom_emulator_is_full_row(pre_phy_page)) {
   233a2:	1dbb      	adds	r3, r7, #6
   233a4:	881b      	ldrh	r3, [r3, #0]
   233a6:	0018      	movs	r0, r3
   233a8:	4b0c      	ldr	r3, [pc, #48]	; (233dc <_eeprom_emulator_erase_invalid_page+0x4c>)
   233aa:	4798      	blx	r3
   233ac:	1e03      	subs	r3, r0, #0
   233ae:	d008      	beq.n	233c2 <_eeprom_emulator_erase_invalid_page+0x32>
		 _eeprom_emulator_nvm_erase_row(pre_phy_page/4);
   233b0:	1dbb      	adds	r3, r7, #6
   233b2:	881b      	ldrh	r3, [r3, #0]
   233b4:	089b      	lsrs	r3, r3, #2
   233b6:	b29b      	uxth	r3, r3
   233b8:	b2db      	uxtb	r3, r3
   233ba:	0018      	movs	r0, r3
   233bc:	4b08      	ldr	r3, [pc, #32]	; (233e0 <_eeprom_emulator_erase_invalid_page+0x50>)
   233be:	4798      	blx	r3
	} else {
		_eeprom_emulator_nvm_erase_row(next_phy_page/4);
	}
}
   233c0:	e007      	b.n	233d2 <_eeprom_emulator_erase_invalid_page+0x42>
		_eeprom_emulator_nvm_erase_row(next_phy_page/4);
   233c2:	1d3b      	adds	r3, r7, #4
   233c4:	881b      	ldrh	r3, [r3, #0]
   233c6:	089b      	lsrs	r3, r3, #2
   233c8:	b29b      	uxth	r3, r3
   233ca:	b2db      	uxtb	r3, r3
   233cc:	0018      	movs	r0, r3
   233ce:	4b04      	ldr	r3, [pc, #16]	; (233e0 <_eeprom_emulator_erase_invalid_page+0x50>)
   233d0:	4798      	blx	r3
}
   233d2:	46c0      	nop			; (mov r8, r8)
   233d4:	46bd      	mov	sp, r7
   233d6:	b002      	add	sp, #8
   233d8:	bd80      	pop	{r7, pc}
   233da:	46c0      	nop			; (mov r8, r8)
   233dc:	0002332d 	.word	0x0002332d
   233e0:	0002310d 	.word	0x0002310d

000233e4 <_eeprom_emulator_check_logical_page>:
 * \brief Check if there exist rows with same logical pages due to power drop
 *  when writing or erasing page.
 *  when existed same logical page, the old(full) row will be erased.
 */
static void _eeprom_emulator_check_logical_page(void)
{
   233e4:	b580      	push	{r7, lr}
   233e6:	b082      	sub	sp, #8
   233e8:	af00      	add	r7, sp, #0
	uint16_t i = 0, j = 0;
   233ea:	1dbb      	adds	r3, r7, #6
   233ec:	2200      	movs	r2, #0
   233ee:	801a      	strh	r2, [r3, #0]
   233f0:	1d3b      	adds	r3, r7, #4
   233f2:	2200      	movs	r2, #0
   233f4:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
   233f6:	1dbb      	adds	r3, r7, #6
   233f8:	2200      	movs	r2, #0
   233fa:	801a      	strh	r2, [r3, #0]
   233fc:	e04a      	b.n	23494 <_eeprom_emulator_check_logical_page+0xb0>

		uint16_t pre_logical_page = _eeprom_instance.flash[i].header.logical_page;
   233fe:	4b2a      	ldr	r3, [pc, #168]	; (234a8 <_eeprom_emulator_check_logical_page+0xc4>)
   23400:	685a      	ldr	r2, [r3, #4]
   23402:	1dbb      	adds	r3, r7, #6
   23404:	881b      	ldrh	r3, [r3, #0]
   23406:	019b      	lsls	r3, r3, #6
   23408:	18d3      	adds	r3, r2, r3
   2340a:	781a      	ldrb	r2, [r3, #0]
   2340c:	1cbb      	adds	r3, r7, #2
   2340e:	801a      	strh	r2, [r3, #0]
		if( pre_logical_page == EEPROM_INVALID_PAGE_NUMBER) {
   23410:	1cbb      	adds	r3, r7, #2
   23412:	881b      	ldrh	r3, [r3, #0]
   23414:	2bff      	cmp	r3, #255	; 0xff
   23416:	d037      	beq.n	23488 <_eeprom_emulator_check_logical_page+0xa4>
			continue;
		}

		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
   23418:	1d3b      	adds	r3, r7, #4
   2341a:	1dba      	adds	r2, r7, #6
   2341c:	8812      	ldrh	r2, [r2, #0]
   2341e:	3204      	adds	r2, #4
   23420:	801a      	strh	r2, [r3, #0]
   23422:	e02a      	b.n	2347a <_eeprom_emulator_check_logical_page+0x96>

			if (j == EEPROM_MASTER_PAGE_NUMBER) {
   23424:	1d3b      	adds	r3, r7, #4
   23426:	881a      	ldrh	r2, [r3, #0]
   23428:	4b1f      	ldr	r3, [pc, #124]	; (234a8 <_eeprom_emulator_check_logical_page+0xc4>)
   2342a:	891b      	ldrh	r3, [r3, #8]
   2342c:	3b01      	subs	r3, #1
   2342e:	429a      	cmp	r2, r3
   23430:	d01b      	beq.n	2346a <_eeprom_emulator_check_logical_page+0x86>
				continue;
			}
			uint16_t next_logical_page = _eeprom_instance.flash[j].header.logical_page;
   23432:	4b1d      	ldr	r3, [pc, #116]	; (234a8 <_eeprom_emulator_check_logical_page+0xc4>)
   23434:	685a      	ldr	r2, [r3, #4]
   23436:	1d3b      	adds	r3, r7, #4
   23438:	881b      	ldrh	r3, [r3, #0]
   2343a:	019b      	lsls	r3, r3, #6
   2343c:	18d3      	adds	r3, r2, r3
   2343e:	781a      	ldrb	r2, [r3, #0]
   23440:	003b      	movs	r3, r7
   23442:	801a      	strh	r2, [r3, #0]
			if( next_logical_page == EEPROM_INVALID_PAGE_NUMBER) {
   23444:	003b      	movs	r3, r7
   23446:	881b      	ldrh	r3, [r3, #0]
   23448:	2bff      	cmp	r3, #255	; 0xff
   2344a:	d010      	beq.n	2346e <_eeprom_emulator_check_logical_page+0x8a>
				continue;
			}

			if(pre_logical_page == next_logical_page) {
   2344c:	1cba      	adds	r2, r7, #2
   2344e:	003b      	movs	r3, r7
   23450:	8812      	ldrh	r2, [r2, #0]
   23452:	881b      	ldrh	r3, [r3, #0]
   23454:	429a      	cmp	r2, r3
   23456:	d10b      	bne.n	23470 <_eeprom_emulator_check_logical_page+0x8c>
				/* Found invalid logical page and erase it */
				_eeprom_emulator_erase_invalid_page(i,j);
   23458:	1d3b      	adds	r3, r7, #4
   2345a:	881a      	ldrh	r2, [r3, #0]
   2345c:	1dbb      	adds	r3, r7, #6
   2345e:	881b      	ldrh	r3, [r3, #0]
   23460:	0011      	movs	r1, r2
   23462:	0018      	movs	r0, r3
   23464:	4b11      	ldr	r3, [pc, #68]	; (234ac <_eeprom_emulator_check_logical_page+0xc8>)
   23466:	4798      	blx	r3
   23468:	e002      	b.n	23470 <_eeprom_emulator_check_logical_page+0x8c>
				continue;
   2346a:	46c0      	nop			; (mov r8, r8)
   2346c:	e000      	b.n	23470 <_eeprom_emulator_check_logical_page+0x8c>
				continue;
   2346e:	46c0      	nop			; (mov r8, r8)
		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
   23470:	1d3b      	adds	r3, r7, #4
   23472:	1d3a      	adds	r2, r7, #4
   23474:	8812      	ldrh	r2, [r2, #0]
   23476:	3204      	adds	r2, #4
   23478:	801a      	strh	r2, [r3, #0]
   2347a:	4b0b      	ldr	r3, [pc, #44]	; (234a8 <_eeprom_emulator_check_logical_page+0xc4>)
   2347c:	891b      	ldrh	r3, [r3, #8]
   2347e:	1d3a      	adds	r2, r7, #4
   23480:	8812      	ldrh	r2, [r2, #0]
   23482:	429a      	cmp	r2, r3
   23484:	d3ce      	bcc.n	23424 <_eeprom_emulator_check_logical_page+0x40>
   23486:	e000      	b.n	2348a <_eeprom_emulator_check_logical_page+0xa6>
			continue;
   23488:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
   2348a:	1dbb      	adds	r3, r7, #6
   2348c:	1dba      	adds	r2, r7, #6
   2348e:	8812      	ldrh	r2, [r2, #0]
   23490:	3204      	adds	r2, #4
   23492:	801a      	strh	r2, [r3, #0]
   23494:	4b04      	ldr	r3, [pc, #16]	; (234a8 <_eeprom_emulator_check_logical_page+0xc4>)
   23496:	891b      	ldrh	r3, [r3, #8]
   23498:	1dba      	adds	r2, r7, #6
   2349a:	8812      	ldrh	r2, [r2, #0]
   2349c:	429a      	cmp	r2, r3
   2349e:	d3ae      	bcc.n	233fe <_eeprom_emulator_check_logical_page+0x1a>
			}
		}
	}
}
   234a0:	46c0      	nop			; (mov r8, r8)
   234a2:	46bd      	mov	sp, r7
   234a4:	b002      	add	sp, #8
   234a6:	bd80      	pop	{r7, pc}
   234a8:	2000041c 	.word	0x2000041c
   234ac:	00023391 	.word	0x00023391

000234b0 <_eeprom_emulator_update_page_mapping>:

/**
 * \brief Creates a map in SRAM to translate logical EEPROM pages to physical FLASH pages.
 */
static void _eeprom_emulator_update_page_mapping(void)
{
   234b0:	b580      	push	{r7, lr}
   234b2:	b084      	sub	sp, #16
   234b4:	af00      	add	r7, sp, #0
	/* Check if exists invalid logical page */
	_eeprom_emulator_check_logical_page();
   234b6:	4b51      	ldr	r3, [pc, #324]	; (235fc <_eeprom_emulator_update_page_mapping+0x14c>)
   234b8:	4798      	blx	r3

	/* Scan through all physical pages, to map physical and logical pages */
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
   234ba:	230e      	movs	r3, #14
   234bc:	18fb      	adds	r3, r7, r3
   234be:	2200      	movs	r2, #0
   234c0:	801a      	strh	r2, [r3, #0]
   234c2:	e033      	b.n	2352c <_eeprom_emulator_update_page_mapping+0x7c>
		if (c == EEPROM_MASTER_PAGE_NUMBER) {
   234c4:	230e      	movs	r3, #14
   234c6:	18fb      	adds	r3, r7, r3
   234c8:	881a      	ldrh	r2, [r3, #0]
   234ca:	4b4d      	ldr	r3, [pc, #308]	; (23600 <_eeprom_emulator_update_page_mapping+0x150>)
   234cc:	891b      	ldrh	r3, [r3, #8]
   234ce:	3b01      	subs	r3, #1
   234d0:	429a      	cmp	r2, r3
   234d2:	d023      	beq.n	2351c <_eeprom_emulator_update_page_mapping+0x6c>
			continue;
		}

		/* Read in the logical page stored in the current physical page */
		uint16_t logical_page = _eeprom_instance.flash[c].header.logical_page;
   234d4:	4b4a      	ldr	r3, [pc, #296]	; (23600 <_eeprom_emulator_update_page_mapping+0x150>)
   234d6:	685a      	ldr	r2, [r3, #4]
   234d8:	230e      	movs	r3, #14
   234da:	18fb      	adds	r3, r7, r3
   234dc:	881b      	ldrh	r3, [r3, #0]
   234de:	019b      	lsls	r3, r3, #6
   234e0:	18d3      	adds	r3, r2, r3
   234e2:	781a      	ldrb	r2, [r3, #0]
   234e4:	2308      	movs	r3, #8
   234e6:	18fb      	adds	r3, r7, r3
   234e8:	801a      	strh	r2, [r3, #0]

		/* If the logical page number is valid, add it to the mapping */
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
   234ea:	2308      	movs	r3, #8
   234ec:	18fb      	adds	r3, r7, r3
   234ee:	881b      	ldrh	r3, [r3, #0]
   234f0:	2bff      	cmp	r3, #255	; 0xff
   234f2:	d014      	beq.n	2351e <_eeprom_emulator_update_page_mapping+0x6e>
				(logical_page < _eeprom_instance.logical_pages)) {
   234f4:	4b42      	ldr	r3, [pc, #264]	; (23600 <_eeprom_emulator_update_page_mapping+0x150>)
   234f6:	7a9b      	ldrb	r3, [r3, #10]
   234f8:	b29b      	uxth	r3, r3
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
   234fa:	2208      	movs	r2, #8
   234fc:	18ba      	adds	r2, r7, r2
   234fe:	8812      	ldrh	r2, [r2, #0]
   23500:	429a      	cmp	r2, r3
   23502:	d20c      	bcs.n	2351e <_eeprom_emulator_update_page_mapping+0x6e>
			_eeprom_instance.page_map[logical_page] = c;
   23504:	2308      	movs	r3, #8
   23506:	18fb      	adds	r3, r7, r3
   23508:	881b      	ldrh	r3, [r3, #0]
   2350a:	220e      	movs	r2, #14
   2350c:	18ba      	adds	r2, r7, r2
   2350e:	8812      	ldrh	r2, [r2, #0]
   23510:	b2d1      	uxtb	r1, r2
   23512:	4a3b      	ldr	r2, [pc, #236]	; (23600 <_eeprom_emulator_update_page_mapping+0x150>)
   23514:	18d3      	adds	r3, r2, r3
   23516:	1c0a      	adds	r2, r1, #0
   23518:	72da      	strb	r2, [r3, #11]
   2351a:	e000      	b.n	2351e <_eeprom_emulator_update_page_mapping+0x6e>
			continue;
   2351c:	46c0      	nop			; (mov r8, r8)
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
   2351e:	230e      	movs	r3, #14
   23520:	18fb      	adds	r3, r7, r3
   23522:	881a      	ldrh	r2, [r3, #0]
   23524:	230e      	movs	r3, #14
   23526:	18fb      	adds	r3, r7, r3
   23528:	3201      	adds	r2, #1
   2352a:	801a      	strh	r2, [r3, #0]
   2352c:	4b34      	ldr	r3, [pc, #208]	; (23600 <_eeprom_emulator_update_page_mapping+0x150>)
   2352e:	891b      	ldrh	r3, [r3, #8]
   23530:	220e      	movs	r2, #14
   23532:	18ba      	adds	r2, r7, r2
   23534:	8812      	ldrh	r2, [r2, #0]
   23536:	429a      	cmp	r2, r3
   23538:	d3c4      	bcc.n	234c4 <_eeprom_emulator_update_page_mapping+0x14>
		}
	}

	/* Use an invalid page number as the spare row until a valid one has been
	 * found */
	_eeprom_instance.spare_row = EEPROM_INVALID_ROW_NUMBER;
   2353a:	4b31      	ldr	r3, [pc, #196]	; (23600 <_eeprom_emulator_update_page_mapping+0x150>)
   2353c:	2287      	movs	r2, #135	; 0x87
   2353e:	213f      	movs	r1, #63	; 0x3f
   23540:	5499      	strb	r1, [r3, r2]

	/* Scan through all physical rows, to find an erased row to use as the
	 * spare */
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
   23542:	230c      	movs	r3, #12
   23544:	18fb      	adds	r3, r7, r3
   23546:	2200      	movs	r2, #0
   23548:	801a      	strh	r2, [r3, #0]
   2354a:	e04a      	b.n	235e2 <_eeprom_emulator_update_page_mapping+0x132>
		bool spare_row_found = true;
   2354c:	230b      	movs	r3, #11
   2354e:	18fb      	adds	r3, r7, r3
   23550:	2201      	movs	r2, #1
   23552:	701a      	strb	r2, [r3, #0]

		/* Look through pages within the row to see if they are all erased */
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
   23554:	230a      	movs	r3, #10
   23556:	18fb      	adds	r3, r7, r3
   23558:	2200      	movs	r2, #0
   2355a:	701a      	strb	r2, [r3, #0]
   2355c:	e028      	b.n	235b0 <_eeprom_emulator_update_page_mapping+0x100>
			uint16_t physical_page = (c * NVMCTRL_ROW_PAGES) + c2;
   2355e:	230c      	movs	r3, #12
   23560:	18fb      	adds	r3, r7, r3
   23562:	881b      	ldrh	r3, [r3, #0]
   23564:	009b      	lsls	r3, r3, #2
   23566:	b299      	uxth	r1, r3
   23568:	230a      	movs	r3, #10
   2356a:	18fb      	adds	r3, r7, r3
   2356c:	781b      	ldrb	r3, [r3, #0]
   2356e:	b29a      	uxth	r2, r3
   23570:	1dbb      	adds	r3, r7, #6
   23572:	188a      	adds	r2, r1, r2
   23574:	801a      	strh	r2, [r3, #0]

			if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
   23576:	1dbb      	adds	r3, r7, #6
   23578:	881a      	ldrh	r2, [r3, #0]
   2357a:	4b21      	ldr	r3, [pc, #132]	; (23600 <_eeprom_emulator_update_page_mapping+0x150>)
   2357c:	891b      	ldrh	r3, [r3, #8]
   2357e:	3b01      	subs	r3, #1
   23580:	429a      	cmp	r2, r3
   23582:	d00d      	beq.n	235a0 <_eeprom_emulator_update_page_mapping+0xf0>
				continue;
			}

			if (_eeprom_instance.flash[physical_page].header.logical_page !=
   23584:	4b1e      	ldr	r3, [pc, #120]	; (23600 <_eeprom_emulator_update_page_mapping+0x150>)
   23586:	685a      	ldr	r2, [r3, #4]
   23588:	1dbb      	adds	r3, r7, #6
   2358a:	881b      	ldrh	r3, [r3, #0]
   2358c:	019b      	lsls	r3, r3, #6
   2358e:	18d3      	adds	r3, r2, r3
   23590:	781b      	ldrb	r3, [r3, #0]
   23592:	2bff      	cmp	r3, #255	; 0xff
   23594:	d005      	beq.n	235a2 <_eeprom_emulator_update_page_mapping+0xf2>
					EEPROM_INVALID_PAGE_NUMBER) {
				spare_row_found = false;
   23596:	230b      	movs	r3, #11
   23598:	18fb      	adds	r3, r7, r3
   2359a:	2200      	movs	r2, #0
   2359c:	701a      	strb	r2, [r3, #0]
   2359e:	e000      	b.n	235a2 <_eeprom_emulator_update_page_mapping+0xf2>
				continue;
   235a0:	46c0      	nop			; (mov r8, r8)
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
   235a2:	230a      	movs	r3, #10
   235a4:	18fb      	adds	r3, r7, r3
   235a6:	781a      	ldrb	r2, [r3, #0]
   235a8:	230a      	movs	r3, #10
   235aa:	18fb      	adds	r3, r7, r3
   235ac:	3201      	adds	r2, #1
   235ae:	701a      	strb	r2, [r3, #0]
   235b0:	230a      	movs	r3, #10
   235b2:	18fb      	adds	r3, r7, r3
   235b4:	781b      	ldrb	r3, [r3, #0]
   235b6:	2b03      	cmp	r3, #3
   235b8:	d9d1      	bls.n	2355e <_eeprom_emulator_update_page_mapping+0xae>
			}
		}

		/* If we've now found the spare row, store it and abort the search */
		if (spare_row_found == true) {
   235ba:	230b      	movs	r3, #11
   235bc:	18fb      	adds	r3, r7, r3
   235be:	781b      	ldrb	r3, [r3, #0]
   235c0:	2b00      	cmp	r3, #0
   235c2:	d007      	beq.n	235d4 <_eeprom_emulator_update_page_mapping+0x124>
			_eeprom_instance.spare_row = c;
   235c4:	230c      	movs	r3, #12
   235c6:	18fb      	adds	r3, r7, r3
   235c8:	881b      	ldrh	r3, [r3, #0]
   235ca:	b2d9      	uxtb	r1, r3
   235cc:	4b0c      	ldr	r3, [pc, #48]	; (23600 <_eeprom_emulator_update_page_mapping+0x150>)
   235ce:	2287      	movs	r2, #135	; 0x87
   235d0:	5499      	strb	r1, [r3, r2]
			break;
   235d2:	e00f      	b.n	235f4 <_eeprom_emulator_update_page_mapping+0x144>
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
   235d4:	230c      	movs	r3, #12
   235d6:	18fb      	adds	r3, r7, r3
   235d8:	881a      	ldrh	r2, [r3, #0]
   235da:	230c      	movs	r3, #12
   235dc:	18fb      	adds	r3, r7, r3
   235de:	3201      	adds	r2, #1
   235e0:	801a      	strh	r2, [r3, #0]
   235e2:	4b07      	ldr	r3, [pc, #28]	; (23600 <_eeprom_emulator_update_page_mapping+0x150>)
   235e4:	891b      	ldrh	r3, [r3, #8]
   235e6:	089b      	lsrs	r3, r3, #2
   235e8:	b29b      	uxth	r3, r3
   235ea:	220c      	movs	r2, #12
   235ec:	18ba      	adds	r2, r7, r2
   235ee:	8812      	ldrh	r2, [r2, #0]
   235f0:	429a      	cmp	r2, r3
   235f2:	d3ab      	bcc.n	2354c <_eeprom_emulator_update_page_mapping+0x9c>
		}
	}
}
   235f4:	46c0      	nop			; (mov r8, r8)
   235f6:	46bd      	mov	sp, r7
   235f8:	b004      	add	sp, #16
   235fa:	bd80      	pop	{r7, pc}
   235fc:	000233e5 	.word	0x000233e5
   23600:	2000041c 	.word	0x2000041c

00023604 <_eeprom_emulator_is_page_free_on_row>:
 * \retval \c false  If the specified row was full and needs an erase
 */
static bool _eeprom_emulator_is_page_free_on_row(
		const uint8_t start_physical_page,
		uint8_t *const free_physical_page)
{
   23604:	b580      	push	{r7, lr}
   23606:	b084      	sub	sp, #16
   23608:	af00      	add	r7, sp, #0
   2360a:	0002      	movs	r2, r0
   2360c:	6039      	str	r1, [r7, #0]
   2360e:	1dfb      	adds	r3, r7, #7
   23610:	701a      	strb	r2, [r3, #0]
	/* Convert physical page number to a FLASH row and page within the row */
	uint8_t row         = (start_physical_page / NVMCTRL_ROW_PAGES);
   23612:	230e      	movs	r3, #14
   23614:	18fb      	adds	r3, r7, r3
   23616:	1dfa      	adds	r2, r7, #7
   23618:	7812      	ldrb	r2, [r2, #0]
   2361a:	0892      	lsrs	r2, r2, #2
   2361c:	701a      	strb	r2, [r3, #0]
	uint8_t page_in_row = (start_physical_page % NVMCTRL_ROW_PAGES);
   2361e:	230d      	movs	r3, #13
   23620:	18fb      	adds	r3, r7, r3
   23622:	1dfa      	adds	r2, r7, #7
   23624:	7812      	ldrb	r2, [r2, #0]
   23626:	2103      	movs	r1, #3
   23628:	400a      	ands	r2, r1
   2362a:	701a      	strb	r2, [r3, #0]

	/* Look in the current row for a page that isn't currently used */
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
   2362c:	230f      	movs	r3, #15
   2362e:	18fb      	adds	r3, r7, r3
   23630:	220d      	movs	r2, #13
   23632:	18ba      	adds	r2, r7, r2
   23634:	7812      	ldrb	r2, [r2, #0]
   23636:	701a      	strb	r2, [r3, #0]
   23638:	e023      	b.n	23682 <_eeprom_emulator_is_page_free_on_row+0x7e>
		/* Calculate the page number for the current page being examined */
		uint8_t page = (row * NVMCTRL_ROW_PAGES) + c;
   2363a:	230e      	movs	r3, #14
   2363c:	18fb      	adds	r3, r7, r3
   2363e:	781b      	ldrb	r3, [r3, #0]
   23640:	009b      	lsls	r3, r3, #2
   23642:	b2d9      	uxtb	r1, r3
   23644:	230c      	movs	r3, #12
   23646:	18fb      	adds	r3, r7, r3
   23648:	220f      	movs	r2, #15
   2364a:	18ba      	adds	r2, r7, r2
   2364c:	7812      	ldrb	r2, [r2, #0]
   2364e:	188a      	adds	r2, r1, r2
   23650:	701a      	strb	r2, [r3, #0]

		/* If the page is free, pass it to the caller and exit */
		if (_eeprom_instance.flash[page].header.logical_page ==
   23652:	4b11      	ldr	r3, [pc, #68]	; (23698 <_eeprom_emulator_is_page_free_on_row+0x94>)
   23654:	685a      	ldr	r2, [r3, #4]
   23656:	230c      	movs	r3, #12
   23658:	18fb      	adds	r3, r7, r3
   2365a:	781b      	ldrb	r3, [r3, #0]
   2365c:	019b      	lsls	r3, r3, #6
   2365e:	18d3      	adds	r3, r2, r3
   23660:	781b      	ldrb	r3, [r3, #0]
   23662:	2bff      	cmp	r3, #255	; 0xff
   23664:	d106      	bne.n	23674 <_eeprom_emulator_is_page_free_on_row+0x70>
				EEPROM_INVALID_PAGE_NUMBER) {
			*free_physical_page = page;
   23666:	683b      	ldr	r3, [r7, #0]
   23668:	220c      	movs	r2, #12
   2366a:	18ba      	adds	r2, r7, r2
   2366c:	7812      	ldrb	r2, [r2, #0]
   2366e:	701a      	strb	r2, [r3, #0]
			return true;
   23670:	2301      	movs	r3, #1
   23672:	e00c      	b.n	2368e <_eeprom_emulator_is_page_free_on_row+0x8a>
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
   23674:	230f      	movs	r3, #15
   23676:	18fb      	adds	r3, r7, r3
   23678:	781a      	ldrb	r2, [r3, #0]
   2367a:	230f      	movs	r3, #15
   2367c:	18fb      	adds	r3, r7, r3
   2367e:	3201      	adds	r2, #1
   23680:	701a      	strb	r2, [r3, #0]
   23682:	230f      	movs	r3, #15
   23684:	18fb      	adds	r3, r7, r3
   23686:	781b      	ldrb	r3, [r3, #0]
   23688:	2b03      	cmp	r3, #3
   2368a:	d9d6      	bls.n	2363a <_eeprom_emulator_is_page_free_on_row+0x36>
		}
	}

	/* No free page in the current row was found */
	return false;
   2368c:	2300      	movs	r3, #0
}
   2368e:	0018      	movs	r0, r3
   23690:	46bd      	mov	sp, r7
   23692:	b004      	add	sp, #16
   23694:	bd80      	pop	{r7, pc}
   23696:	46c0      	nop			; (mov r8, r8)
   23698:	2000041c 	.word	0x2000041c

0002369c <_eeprom_emulator_move_data_to_spare>:
 */
static enum status_code _eeprom_emulator_move_data_to_spare(
		const uint8_t row_number,
		const uint8_t logical_page,
		const uint8_t *const data)
{
   2369c:	b580      	push	{r7, lr}
   2369e:	b086      	sub	sp, #24
   236a0:	af00      	add	r7, sp, #0
   236a2:	603a      	str	r2, [r7, #0]
   236a4:	1dfb      	adds	r3, r7, #7
   236a6:	1c02      	adds	r2, r0, #0
   236a8:	701a      	strb	r2, [r3, #0]
   236aa:	1dbb      	adds	r3, r7, #6
   236ac:	1c0a      	adds	r2, r1, #0
   236ae:	701a      	strb	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   236b0:	2314      	movs	r3, #20
   236b2:	18fb      	adds	r3, r7, r3
   236b4:	2200      	movs	r2, #0
   236b6:	701a      	strb	r2, [r3, #0]
		uint8_t logical_page;
		uint8_t physical_page;
	} page_trans[2];

	const struct _eeprom_page *row_data =
			(struct _eeprom_page *)&_eeprom_instance.flash[row_number * NVMCTRL_ROW_PAGES];
   236b8:	4b69      	ldr	r3, [pc, #420]	; (23860 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   236ba:	685b      	ldr	r3, [r3, #4]
   236bc:	1dfa      	adds	r2, r7, #7
   236be:	7812      	ldrb	r2, [r2, #0]
   236c0:	0212      	lsls	r2, r2, #8
	const struct _eeprom_page *row_data =
   236c2:	189b      	adds	r3, r3, r2
   236c4:	613b      	str	r3, [r7, #16]

	/* There should be two logical pages of data in each row, possibly with
	 * multiple revisions (right-most version is the newest). Start by assuming
	 * the left-most two pages contain the newest page revisions. */
	page_trans[0].logical_page  = row_data[0].header.logical_page;
   236c6:	693b      	ldr	r3, [r7, #16]
   236c8:	781a      	ldrb	r2, [r3, #0]
   236ca:	2308      	movs	r3, #8
   236cc:	18fb      	adds	r3, r7, r3
   236ce:	701a      	strb	r2, [r3, #0]
	page_trans[0].physical_page = (row_number * NVMCTRL_ROW_PAGES);
   236d0:	1dfb      	adds	r3, r7, #7
   236d2:	781b      	ldrb	r3, [r3, #0]
   236d4:	009b      	lsls	r3, r3, #2
   236d6:	b2da      	uxtb	r2, r3
   236d8:	2308      	movs	r3, #8
   236da:	18fb      	adds	r3, r7, r3
   236dc:	705a      	strb	r2, [r3, #1]

	page_trans[1].logical_page  = row_data[1].header.logical_page;
   236de:	693b      	ldr	r3, [r7, #16]
   236e0:	3340      	adds	r3, #64	; 0x40
   236e2:	781a      	ldrb	r2, [r3, #0]
   236e4:	2308      	movs	r3, #8
   236e6:	18fb      	adds	r3, r7, r3
   236e8:	709a      	strb	r2, [r3, #2]
	page_trans[1].physical_page = (row_number * NVMCTRL_ROW_PAGES) + 1;
   236ea:	1dfb      	adds	r3, r7, #7
   236ec:	781b      	ldrb	r3, [r3, #0]
   236ee:	009b      	lsls	r3, r3, #2
   236f0:	b2db      	uxtb	r3, r3
   236f2:	3301      	adds	r3, #1
   236f4:	b2da      	uxtb	r2, r3
   236f6:	2308      	movs	r3, #8
   236f8:	18fb      	adds	r3, r7, r3
   236fa:	70da      	strb	r2, [r3, #3]

	/* Look for newer revisions of the two logical pages stored in the row */
	for (uint8_t c = 0; c < 2; c++) {
   236fc:	2317      	movs	r3, #23
   236fe:	18fb      	adds	r3, r7, r3
   23700:	2200      	movs	r2, #0
   23702:	701a      	strb	r2, [r3, #0]
   23704:	e03a      	b.n	2377c <_eeprom_emulator_move_data_to_spare+0xe0>
		/* Look through the remaining pages in the row for any newer revisions */
		for (uint8_t c2 = 2; c2 < NVMCTRL_ROW_PAGES; c2++) {
   23706:	2316      	movs	r3, #22
   23708:	18fb      	adds	r3, r7, r3
   2370a:	2202      	movs	r2, #2
   2370c:	701a      	strb	r2, [r3, #0]
   2370e:	e029      	b.n	23764 <_eeprom_emulator_move_data_to_spare+0xc8>
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
   23710:	2317      	movs	r3, #23
   23712:	18fb      	adds	r3, r7, r3
   23714:	781a      	ldrb	r2, [r3, #0]
   23716:	2308      	movs	r3, #8
   23718:	18fb      	adds	r3, r7, r3
   2371a:	0052      	lsls	r2, r2, #1
   2371c:	5cd2      	ldrb	r2, [r2, r3]
   2371e:	2316      	movs	r3, #22
   23720:	18fb      	adds	r3, r7, r3
   23722:	781b      	ldrb	r3, [r3, #0]
   23724:	019b      	lsls	r3, r3, #6
   23726:	6939      	ldr	r1, [r7, #16]
   23728:	18cb      	adds	r3, r1, r3
   2372a:	781b      	ldrb	r3, [r3, #0]
   2372c:	429a      	cmp	r2, r3
   2372e:	d112      	bne.n	23756 <_eeprom_emulator_move_data_to_spare+0xba>
				page_trans[c].physical_page =
   23730:	2317      	movs	r3, #23
   23732:	18fb      	adds	r3, r7, r3
   23734:	781b      	ldrb	r3, [r3, #0]
						(row_number * NVMCTRL_ROW_PAGES) + c2;
   23736:	1dfa      	adds	r2, r7, #7
   23738:	7812      	ldrb	r2, [r2, #0]
   2373a:	0092      	lsls	r2, r2, #2
   2373c:	b2d1      	uxtb	r1, r2
   2373e:	2216      	movs	r2, #22
   23740:	18ba      	adds	r2, r7, r2
   23742:	7812      	ldrb	r2, [r2, #0]
   23744:	188a      	adds	r2, r1, r2
   23746:	b2d1      	uxtb	r1, r2
				page_trans[c].physical_page =
   23748:	2208      	movs	r2, #8
   2374a:	18ba      	adds	r2, r7, r2
   2374c:	005b      	lsls	r3, r3, #1
   2374e:	18d3      	adds	r3, r2, r3
   23750:	3301      	adds	r3, #1
   23752:	1c0a      	adds	r2, r1, #0
   23754:	701a      	strb	r2, [r3, #0]
		for (uint8_t c2 = 2; c2 < NVMCTRL_ROW_PAGES; c2++) {
   23756:	2316      	movs	r3, #22
   23758:	18fb      	adds	r3, r7, r3
   2375a:	781a      	ldrb	r2, [r3, #0]
   2375c:	2316      	movs	r3, #22
   2375e:	18fb      	adds	r3, r7, r3
   23760:	3201      	adds	r2, #1
   23762:	701a      	strb	r2, [r3, #0]
   23764:	2316      	movs	r3, #22
   23766:	18fb      	adds	r3, r7, r3
   23768:	781b      	ldrb	r3, [r3, #0]
   2376a:	2b03      	cmp	r3, #3
   2376c:	d9d0      	bls.n	23710 <_eeprom_emulator_move_data_to_spare+0x74>
	for (uint8_t c = 0; c < 2; c++) {
   2376e:	2317      	movs	r3, #23
   23770:	18fb      	adds	r3, r7, r3
   23772:	781a      	ldrb	r2, [r3, #0]
   23774:	2317      	movs	r3, #23
   23776:	18fb      	adds	r3, r7, r3
   23778:	3201      	adds	r2, #1
   2377a:	701a      	strb	r2, [r3, #0]
   2377c:	2317      	movs	r3, #23
   2377e:	18fb      	adds	r3, r7, r3
   23780:	781b      	ldrb	r3, [r3, #0]
   23782:	2b01      	cmp	r3, #1
   23784:	d9bf      	bls.n	23706 <_eeprom_emulator_move_data_to_spare+0x6a>
			}
		}
	}

	/* Need to move both saved logical pages stored in the same row */
	for (uint8_t c = 0; c < 2; c++) {
   23786:	2315      	movs	r3, #21
   23788:	18fb      	adds	r3, r7, r3
   2378a:	2200      	movs	r2, #0
   2378c:	701a      	strb	r2, [r3, #0]
   2378e:	e051      	b.n	23834 <_eeprom_emulator_move_data_to_spare+0x198>
		/* Find the physical page index for the new spare row pages */
		uint32_t new_page =
				((_eeprom_instance.spare_row * NVMCTRL_ROW_PAGES) + c);
   23790:	4b33      	ldr	r3, [pc, #204]	; (23860 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   23792:	2287      	movs	r2, #135	; 0x87
   23794:	5c9b      	ldrb	r3, [r3, r2]
   23796:	009a      	lsls	r2, r3, #2
   23798:	2315      	movs	r3, #21
   2379a:	18fb      	adds	r3, r7, r3
   2379c:	781b      	ldrb	r3, [r3, #0]
   2379e:	18d3      	adds	r3, r2, r3
		uint32_t new_page =
   237a0:	60fb      	str	r3, [r7, #12]

		/* Commit any cached data to physical non-volatile memory */
		eeprom_emulator_commit_page_buffer();
   237a2:	4b30      	ldr	r3, [pc, #192]	; (23864 <_eeprom_emulator_move_data_to_spare+0x1c8>)
   237a4:	4798      	blx	r3

		/* Check if we we are looking at the page the calling function wishes
		 * to change during the move operation */
		if (logical_page == page_trans[c].logical_page) {
   237a6:	2315      	movs	r3, #21
   237a8:	18fb      	adds	r3, r7, r3
   237aa:	781a      	ldrb	r2, [r3, #0]
   237ac:	2308      	movs	r3, #8
   237ae:	18fb      	adds	r3, r7, r3
   237b0:	0052      	lsls	r2, r2, #1
   237b2:	5cd3      	ldrb	r3, [r2, r3]
   237b4:	1dba      	adds	r2, r7, #6
   237b6:	7812      	ldrb	r2, [r2, #0]
   237b8:	429a      	cmp	r2, r3
   237ba:	d10d      	bne.n	237d8 <_eeprom_emulator_move_data_to_spare+0x13c>
			/* Fill out new (updated) logical page's header in the cache */
			_eeprom_instance.cache.header.logical_page = logical_page;
   237bc:	4b28      	ldr	r3, [pc, #160]	; (23860 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   237be:	1dba      	adds	r2, r7, #6
   237c0:	2188      	movs	r1, #136	; 0x88
   237c2:	7812      	ldrb	r2, [r2, #0]
   237c4:	545a      	strb	r2, [r3, r1]

			/* Write data to SRAM cache */
			memcpy(_eeprom_instance.cache.data, data, EEPROM_PAGE_SIZE);
   237c6:	4b26      	ldr	r3, [pc, #152]	; (23860 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   237c8:	228c      	movs	r2, #140	; 0x8c
   237ca:	6839      	ldr	r1, [r7, #0]
   237cc:	189b      	adds	r3, r3, r2
   237ce:	223c      	movs	r2, #60	; 0x3c
   237d0:	0018      	movs	r0, r3
   237d2:	4b25      	ldr	r3, [pc, #148]	; (23868 <_eeprom_emulator_move_data_to_spare+0x1cc>)
   237d4:	4798      	blx	r3
   237d6:	e00e      	b.n	237f6 <_eeprom_emulator_move_data_to_spare+0x15a>
		} else {
			/* Copy existing EEPROM page to cache buffer wholesale */
			_eeprom_emulator_nvm_read_page(
					page_trans[c].physical_page, &_eeprom_instance.cache);
   237d8:	2315      	movs	r3, #21
   237da:	18fb      	adds	r3, r7, r3
   237dc:	781b      	ldrb	r3, [r3, #0]
   237de:	2208      	movs	r2, #8
   237e0:	18ba      	adds	r2, r7, r2
   237e2:	005b      	lsls	r3, r3, #1
   237e4:	18d3      	adds	r3, r2, r3
   237e6:	3301      	adds	r3, #1
   237e8:	781b      	ldrb	r3, [r3, #0]
			_eeprom_emulator_nvm_read_page(
   237ea:	b29b      	uxth	r3, r3
   237ec:	4a1f      	ldr	r2, [pc, #124]	; (2386c <_eeprom_emulator_move_data_to_spare+0x1d0>)
   237ee:	0011      	movs	r1, r2
   237f0:	0018      	movs	r0, r3
   237f2:	4b1f      	ldr	r3, [pc, #124]	; (23870 <_eeprom_emulator_move_data_to_spare+0x1d4>)
   237f4:	4798      	blx	r3
		}

		/* Fill the physical NVM buffer with the new data so that it can be
		 * quickly committed in the future if needed due to a low power
		 * condition */
		_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
   237f6:	68fb      	ldr	r3, [r7, #12]
   237f8:	b29b      	uxth	r3, r3
   237fa:	4a1c      	ldr	r2, [pc, #112]	; (2386c <_eeprom_emulator_move_data_to_spare+0x1d0>)
   237fc:	0011      	movs	r1, r2
   237fe:	0018      	movs	r0, r3
   23800:	4b1c      	ldr	r3, [pc, #112]	; (23874 <_eeprom_emulator_move_data_to_spare+0x1d8>)
   23802:	4798      	blx	r3

		/* Update the page map with the new page location and indicate that
		 * the cache now holds new data */
		_eeprom_instance.page_map[page_trans[c].logical_page] = new_page;
   23804:	2315      	movs	r3, #21
   23806:	18fb      	adds	r3, r7, r3
   23808:	781a      	ldrb	r2, [r3, #0]
   2380a:	2308      	movs	r3, #8
   2380c:	18fb      	adds	r3, r7, r3
   2380e:	0052      	lsls	r2, r2, #1
   23810:	5cd3      	ldrb	r3, [r2, r3]
   23812:	0019      	movs	r1, r3
   23814:	68fb      	ldr	r3, [r7, #12]
   23816:	b2da      	uxtb	r2, r3
   23818:	4b11      	ldr	r3, [pc, #68]	; (23860 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   2381a:	185b      	adds	r3, r3, r1
   2381c:	72da      	strb	r2, [r3, #11]
		_eeprom_instance.cache_active = true;
   2381e:	4b10      	ldr	r3, [pc, #64]	; (23860 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   23820:	22c8      	movs	r2, #200	; 0xc8
   23822:	2101      	movs	r1, #1
   23824:	5499      	strb	r1, [r3, r2]
	for (uint8_t c = 0; c < 2; c++) {
   23826:	2315      	movs	r3, #21
   23828:	18fb      	adds	r3, r7, r3
   2382a:	781a      	ldrb	r2, [r3, #0]
   2382c:	2315      	movs	r3, #21
   2382e:	18fb      	adds	r3, r7, r3
   23830:	3201      	adds	r2, #1
   23832:	701a      	strb	r2, [r3, #0]
   23834:	2315      	movs	r3, #21
   23836:	18fb      	adds	r3, r7, r3
   23838:	781b      	ldrb	r3, [r3, #0]
   2383a:	2b01      	cmp	r3, #1
   2383c:	d9a8      	bls.n	23790 <_eeprom_emulator_move_data_to_spare+0xf4>
	}

	/* Erase the row that was moved and set it as the new spare row */
	_eeprom_emulator_nvm_erase_row(row_number);
   2383e:	1dfb      	adds	r3, r7, #7
   23840:	781b      	ldrb	r3, [r3, #0]
   23842:	0018      	movs	r0, r3
   23844:	4b0c      	ldr	r3, [pc, #48]	; (23878 <_eeprom_emulator_move_data_to_spare+0x1dc>)
   23846:	4798      	blx	r3

	/* Keep the index of the new spare row */
	_eeprom_instance.spare_row = row_number;
   23848:	4b05      	ldr	r3, [pc, #20]	; (23860 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   2384a:	1dfa      	adds	r2, r7, #7
   2384c:	2187      	movs	r1, #135	; 0x87
   2384e:	7812      	ldrb	r2, [r2, #0]
   23850:	545a      	strb	r2, [r3, r1]

	return error_code;
   23852:	2314      	movs	r3, #20
   23854:	18fb      	adds	r3, r7, r3
   23856:	781b      	ldrb	r3, [r3, #0]
}
   23858:	0018      	movs	r0, r3
   2385a:	46bd      	mov	sp, r7
   2385c:	b006      	add	sp, #24
   2385e:	bd80      	pop	{r7, pc}
   23860:	2000041c 	.word	0x2000041c
   23864:	00023c99 	.word	0x00023c99
   23868:	00028edd 	.word	0x00028edd
   2386c:	200004a4 	.word	0x200004a4
   23870:	000231f1 	.word	0x000231f1
   23874:	00023155 	.word	0x00023155
   23878:	0002310d 	.word	0x0002310d

0002387c <_eeprom_emulator_create_master_page>:
 *
 * Creates a new master page in emulated EEPROM, giving information on the
 * emulator used to store the EEPROM data.
 */
static void _eeprom_emulator_create_master_page(void)
{
   2387c:	b590      	push	{r4, r7, lr}
   2387e:	b095      	sub	sp, #84	; 0x54
   23880:	af00      	add	r7, sp, #0
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
   23882:	2340      	movs	r3, #64	; 0x40
   23884:	18fb      	adds	r3, r7, r3
   23886:	4a29      	ldr	r2, [pc, #164]	; (2392c <_eeprom_emulator_create_master_page+0xb0>)
   23888:	ca13      	ldmia	r2!, {r0, r1, r4}
   2388a:	c313      	stmia	r3!, {r0, r1, r4}

	struct _eeprom_master_page master_page;
	memset(&master_page, 0xFF, sizeof(master_page));
   2388c:	003b      	movs	r3, r7
   2388e:	2240      	movs	r2, #64	; 0x40
   23890:	21ff      	movs	r1, #255	; 0xff
   23892:	0018      	movs	r0, r3
   23894:	4b26      	ldr	r3, [pc, #152]	; (23930 <_eeprom_emulator_create_master_page+0xb4>)
   23896:	4798      	blx	r3

	/* Fill out the magic key header to indicate an initialized master page */
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   23898:	234f      	movs	r3, #79	; 0x4f
   2389a:	18fb      	adds	r3, r7, r3
   2389c:	2200      	movs	r2, #0
   2389e:	701a      	strb	r2, [r3, #0]
   238a0:	e013      	b.n	238ca <_eeprom_emulator_create_master_page+0x4e>
		master_page.magic_key[c] = magic_key[c];
   238a2:	234f      	movs	r3, #79	; 0x4f
   238a4:	18fb      	adds	r3, r7, r3
   238a6:	781a      	ldrb	r2, [r3, #0]
   238a8:	234f      	movs	r3, #79	; 0x4f
   238aa:	18fb      	adds	r3, r7, r3
   238ac:	7819      	ldrb	r1, [r3, #0]
   238ae:	2340      	movs	r3, #64	; 0x40
   238b0:	18fb      	adds	r3, r7, r3
   238b2:	0089      	lsls	r1, r1, #2
   238b4:	58c9      	ldr	r1, [r1, r3]
   238b6:	003b      	movs	r3, r7
   238b8:	0092      	lsls	r2, r2, #2
   238ba:	50d1      	str	r1, [r2, r3]
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   238bc:	234f      	movs	r3, #79	; 0x4f
   238be:	18fb      	adds	r3, r7, r3
   238c0:	781a      	ldrb	r2, [r3, #0]
   238c2:	234f      	movs	r3, #79	; 0x4f
   238c4:	18fb      	adds	r3, r7, r3
   238c6:	3201      	adds	r2, #1
   238c8:	701a      	strb	r2, [r3, #0]
   238ca:	234f      	movs	r3, #79	; 0x4f
   238cc:	18fb      	adds	r3, r7, r3
   238ce:	781b      	ldrb	r3, [r3, #0]
   238d0:	2b02      	cmp	r3, #2
   238d2:	d9e6      	bls.n	238a2 <_eeprom_emulator_create_master_page+0x26>
	}

	/* Update master header with version information of this emulator */
	master_page.emulator_id   = EEPROM_EMULATOR_ID;
   238d4:	003b      	movs	r3, r7
   238d6:	2201      	movs	r2, #1
   238d8:	73da      	strb	r2, [r3, #15]
	master_page.major_version = EEPROM_MAJOR_VERSION;
   238da:	003b      	movs	r3, r7
   238dc:	2201      	movs	r2, #1
   238de:	731a      	strb	r2, [r3, #12]
	master_page.minor_version = EEPROM_MINOR_VERSION;
   238e0:	003b      	movs	r3, r7
   238e2:	2200      	movs	r2, #0
   238e4:	735a      	strb	r2, [r3, #13]
	master_page.revision      = EEPROM_REVISION;
   238e6:	003b      	movs	r3, r7
   238e8:	2200      	movs	r2, #0
   238ea:	739a      	strb	r2, [r3, #14]

	_eeprom_emulator_nvm_erase_row(
			EEPROM_MASTER_PAGE_NUMBER / NVMCTRL_ROW_PAGES);
   238ec:	4b11      	ldr	r3, [pc, #68]	; (23934 <_eeprom_emulator_create_master_page+0xb8>)
   238ee:	891b      	ldrh	r3, [r3, #8]
   238f0:	3b01      	subs	r3, #1
   238f2:	2b00      	cmp	r3, #0
   238f4:	da00      	bge.n	238f8 <_eeprom_emulator_create_master_page+0x7c>
   238f6:	3303      	adds	r3, #3
   238f8:	109b      	asrs	r3, r3, #2
	_eeprom_emulator_nvm_erase_row(
   238fa:	b2db      	uxtb	r3, r3
   238fc:	0018      	movs	r0, r3
   238fe:	4b0e      	ldr	r3, [pc, #56]	; (23938 <_eeprom_emulator_create_master_page+0xbc>)
   23900:	4798      	blx	r3

	/* Write the new master page data to physical memory */
	_eeprom_emulator_nvm_fill_cache(EEPROM_MASTER_PAGE_NUMBER, &master_page);
   23902:	4b0c      	ldr	r3, [pc, #48]	; (23934 <_eeprom_emulator_create_master_page+0xb8>)
   23904:	891b      	ldrh	r3, [r3, #8]
   23906:	3b01      	subs	r3, #1
   23908:	b29b      	uxth	r3, r3
   2390a:	003a      	movs	r2, r7
   2390c:	0011      	movs	r1, r2
   2390e:	0018      	movs	r0, r3
   23910:	4b0a      	ldr	r3, [pc, #40]	; (2393c <_eeprom_emulator_create_master_page+0xc0>)
   23912:	4798      	blx	r3
	_eeprom_emulator_nvm_commit_cache(EEPROM_MASTER_PAGE_NUMBER);
   23914:	4b07      	ldr	r3, [pc, #28]	; (23934 <_eeprom_emulator_create_master_page+0xb8>)
   23916:	891b      	ldrh	r3, [r3, #8]
   23918:	3b01      	subs	r3, #1
   2391a:	b29b      	uxth	r3, r3
   2391c:	0018      	movs	r0, r3
   2391e:	4b08      	ldr	r3, [pc, #32]	; (23940 <_eeprom_emulator_create_master_page+0xc4>)
   23920:	4798      	blx	r3
}
   23922:	46c0      	nop			; (mov r8, r8)
   23924:	46bd      	mov	sp, r7
   23926:	b015      	add	sp, #84	; 0x54
   23928:	bd90      	pop	{r4, r7, pc}
   2392a:	46c0      	nop			; (mov r8, r8)
   2392c:	0002ad60 	.word	0x0002ad60
   23930:	00028f13 	.word	0x00028f13
   23934:	2000041c 	.word	0x2000041c
   23938:	0002310d 	.word	0x0002310d
   2393c:	00023155 	.word	0x00023155
   23940:	000231a5 	.word	0x000231a5

00023944 <_eeprom_emulator_verify_master_page>:
 * \retval STATUS_ERR_BAD_FORMAT  Master page contents was invalid
 * \retval STATUS_ERR_IO          Master page indicates the data is incompatible
 *                                with this version of the EEPROM emulator
 */
static enum status_code _eeprom_emulator_verify_master_page(void)
{
   23944:	b590      	push	{r4, r7, lr}
   23946:	b095      	sub	sp, #84	; 0x54
   23948:	af00      	add	r7, sp, #0
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
   2394a:	2340      	movs	r3, #64	; 0x40
   2394c:	18fb      	adds	r3, r7, r3
   2394e:	4a22      	ldr	r2, [pc, #136]	; (239d8 <_eeprom_emulator_verify_master_page+0x94>)
   23950:	ca13      	ldmia	r2!, {r0, r1, r4}
   23952:	c313      	stmia	r3!, {r0, r1, r4}
	struct _eeprom_master_page master_page;

	/* Copy the master page to the RAM buffer so that it can be inspected */
	_eeprom_emulator_nvm_read_page(EEPROM_MASTER_PAGE_NUMBER, &master_page);
   23954:	4b21      	ldr	r3, [pc, #132]	; (239dc <_eeprom_emulator_verify_master_page+0x98>)
   23956:	891b      	ldrh	r3, [r3, #8]
   23958:	3b01      	subs	r3, #1
   2395a:	b29b      	uxth	r3, r3
   2395c:	003a      	movs	r2, r7
   2395e:	0011      	movs	r1, r2
   23960:	0018      	movs	r0, r3
   23962:	4b1f      	ldr	r3, [pc, #124]	; (239e0 <_eeprom_emulator_verify_master_page+0x9c>)
   23964:	4798      	blx	r3

	/* Verify magic key is correct in the master page header */
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   23966:	234f      	movs	r3, #79	; 0x4f
   23968:	18fb      	adds	r3, r7, r3
   2396a:	2200      	movs	r2, #0
   2396c:	701a      	strb	r2, [r3, #0]
   2396e:	e017      	b.n	239a0 <_eeprom_emulator_verify_master_page+0x5c>
		if (master_page.magic_key[c] != magic_key[c]) {
   23970:	234f      	movs	r3, #79	; 0x4f
   23972:	18fb      	adds	r3, r7, r3
   23974:	781a      	ldrb	r2, [r3, #0]
   23976:	003b      	movs	r3, r7
   23978:	0092      	lsls	r2, r2, #2
   2397a:	58d2      	ldr	r2, [r2, r3]
   2397c:	234f      	movs	r3, #79	; 0x4f
   2397e:	18fb      	adds	r3, r7, r3
   23980:	7819      	ldrb	r1, [r3, #0]
   23982:	2340      	movs	r3, #64	; 0x40
   23984:	18fb      	adds	r3, r7, r3
   23986:	0089      	lsls	r1, r1, #2
   23988:	58cb      	ldr	r3, [r1, r3]
   2398a:	429a      	cmp	r2, r3
   2398c:	d001      	beq.n	23992 <_eeprom_emulator_verify_master_page+0x4e>
			return STATUS_ERR_BAD_FORMAT;
   2398e:	231a      	movs	r3, #26
   23990:	e01e      	b.n	239d0 <_eeprom_emulator_verify_master_page+0x8c>
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   23992:	234f      	movs	r3, #79	; 0x4f
   23994:	18fb      	adds	r3, r7, r3
   23996:	781a      	ldrb	r2, [r3, #0]
   23998:	234f      	movs	r3, #79	; 0x4f
   2399a:	18fb      	adds	r3, r7, r3
   2399c:	3201      	adds	r2, #1
   2399e:	701a      	strb	r2, [r3, #0]
   239a0:	234f      	movs	r3, #79	; 0x4f
   239a2:	18fb      	adds	r3, r7, r3
   239a4:	781b      	ldrb	r3, [r3, #0]
   239a6:	2b02      	cmp	r3, #2
   239a8:	d9e2      	bls.n	23970 <_eeprom_emulator_verify_master_page+0x2c>
		}
	}

	/* Verify emulator ID in header to ensure the same scheme is used */
	if (master_page.emulator_id   != EEPROM_EMULATOR_ID) {
   239aa:	003b      	movs	r3, r7
   239ac:	7bdb      	ldrb	r3, [r3, #15]
   239ae:	2b01      	cmp	r3, #1
   239b0:	d001      	beq.n	239b6 <_eeprom_emulator_verify_master_page+0x72>
		return STATUS_ERR_IO;
   239b2:	2310      	movs	r3, #16
   239b4:	e00c      	b.n	239d0 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Verify major version in header to ensure the same version is used */
	if (master_page.major_version != EEPROM_MAJOR_VERSION) {
   239b6:	003b      	movs	r3, r7
   239b8:	7b1b      	ldrb	r3, [r3, #12]
   239ba:	2b01      	cmp	r3, #1
   239bc:	d001      	beq.n	239c2 <_eeprom_emulator_verify_master_page+0x7e>
		return STATUS_ERR_IO;
   239be:	2310      	movs	r3, #16
   239c0:	e006      	b.n	239d0 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Verify minor version in header to ensure the same version is used */
	if (master_page.minor_version != EEPROM_MINOR_VERSION) {
   239c2:	003b      	movs	r3, r7
   239c4:	7b5b      	ldrb	r3, [r3, #13]
   239c6:	2b00      	cmp	r3, #0
   239c8:	d001      	beq.n	239ce <_eeprom_emulator_verify_master_page+0x8a>
		return STATUS_ERR_IO;
   239ca:	2310      	movs	r3, #16
   239cc:	e000      	b.n	239d0 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Don't verify revision number - same major/minor is considered enough
	 * to ensure the stored data is compatible. */

	return STATUS_OK;
   239ce:	2300      	movs	r3, #0
}
   239d0:	0018      	movs	r0, r3
   239d2:	46bd      	mov	sp, r7
   239d4:	b015      	add	sp, #84	; 0x54
   239d6:	bd90      	pop	{r4, r7, pc}
   239d8:	0002ad60 	.word	0x0002ad60
   239dc:	2000041c 	.word	0x2000041c
   239e0:	000231f1 	.word	0x000231f1

000239e4 <eeprom_emulator_init>:
 *                                formatted
 * \retval STATUS_ERR_IO          EEPROM data is incompatible with this version
 *                                or scheme of the EEPROM emulator
 */
enum status_code eeprom_emulator_init(void)
{
   239e4:	b590      	push	{r4, r7, lr}
   239e6:	b087      	sub	sp, #28
   239e8:	af00      	add	r7, sp, #0
	enum status_code error_code = STATUS_OK;
   239ea:	2317      	movs	r3, #23
   239ec:	18fb      	adds	r3, r7, r3
   239ee:	2200      	movs	r2, #0
   239f0:	701a      	strb	r2, [r3, #0]
	struct nvm_parameters parameters;

	/* Retrieve the NVM controller configuration - enable manual page writing
	 * mode so that the emulator has exclusive control over page writes to
	 * allow for caching */
	nvm_get_config_defaults(&config);
   239f2:	2310      	movs	r3, #16
   239f4:	18fb      	adds	r3, r7, r3
   239f6:	0018      	movs	r0, r3
   239f8:	4b2e      	ldr	r3, [pc, #184]	; (23ab4 <eeprom_emulator_init+0xd0>)
   239fa:	4798      	blx	r3
	config.manual_page_write = true;
   239fc:	2310      	movs	r3, #16
   239fe:	18fb      	adds	r3, r7, r3
   23a00:	2201      	movs	r2, #1
   23a02:	705a      	strb	r2, [r3, #1]

	/* Apply new NVM configuration */
	do {
		error_code = nvm_set_config(&config);
   23a04:	2317      	movs	r3, #23
   23a06:	18fc      	adds	r4, r7, r3
   23a08:	2310      	movs	r3, #16
   23a0a:	18fb      	adds	r3, r7, r3
   23a0c:	0018      	movs	r0, r3
   23a0e:	4b2a      	ldr	r3, [pc, #168]	; (23ab8 <eeprom_emulator_init+0xd4>)
   23a10:	4798      	blx	r3
   23a12:	0003      	movs	r3, r0
   23a14:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   23a16:	2317      	movs	r3, #23
   23a18:	18fb      	adds	r3, r7, r3
   23a1a:	781b      	ldrb	r3, [r3, #0]
   23a1c:	2b05      	cmp	r3, #5
   23a1e:	d0f1      	beq.n	23a04 <eeprom_emulator_init+0x20>

	/* Get the NVM controller configuration parameters */
	nvm_get_parameters(&parameters);
   23a20:	1d3b      	adds	r3, r7, #4
   23a22:	0018      	movs	r0, r3
   23a24:	4b25      	ldr	r3, [pc, #148]	; (23abc <eeprom_emulator_init+0xd8>)
   23a26:	4798      	blx	r3

	/* Ensure the device fuses are configured for at least one master page row,
	 * one user EEPROM data row and one spare row */
	if (parameters.eeprom_number_of_pages < (3 * NVMCTRL_ROW_PAGES)) {
   23a28:	1d3b      	adds	r3, r7, #4
   23a2a:	685b      	ldr	r3, [r3, #4]
   23a2c:	2b0b      	cmp	r3, #11
   23a2e:	d801      	bhi.n	23a34 <eeprom_emulator_init+0x50>
		return STATUS_ERR_NO_MEMORY;
   23a30:	2316      	movs	r3, #22
   23a32:	e03b      	b.n	23aac <eeprom_emulator_init+0xc8>
	 *  - One row is reserved for the master page
	 *  - One row is reserved for the spare row
	 *  - Two logical pages can be stored in one physical row
	 */
	_eeprom_instance.physical_pages =
			parameters.eeprom_number_of_pages;
   23a34:	1d3b      	adds	r3, r7, #4
   23a36:	685b      	ldr	r3, [r3, #4]
	_eeprom_instance.physical_pages =
   23a38:	b29a      	uxth	r2, r3
   23a3a:	4b21      	ldr	r3, [pc, #132]	; (23ac0 <eeprom_emulator_init+0xdc>)
   23a3c:	811a      	strh	r2, [r3, #8]
	_eeprom_instance.logical_pages  =
			(parameters.eeprom_number_of_pages - (2 * NVMCTRL_ROW_PAGES)) / 2;
   23a3e:	1d3b      	adds	r3, r7, #4
   23a40:	685b      	ldr	r3, [r3, #4]
   23a42:	3b08      	subs	r3, #8
   23a44:	085b      	lsrs	r3, r3, #1
	_eeprom_instance.logical_pages  =
   23a46:	b2da      	uxtb	r2, r3
   23a48:	4b1d      	ldr	r3, [pc, #116]	; (23ac0 <eeprom_emulator_init+0xdc>)
   23a4a:	729a      	strb	r2, [r3, #10]

	/* Configure the EEPROM instance starting physical address in FLASH and
	 * pre-compute the index of the first page in FLASH used for EEPROM */
	_eeprom_instance.flash =
			(void*)(FLASH_SIZE -
			((uint32_t)_eeprom_instance.physical_pages * NVMCTRL_PAGE_SIZE));
   23a4c:	4b1c      	ldr	r3, [pc, #112]	; (23ac0 <eeprom_emulator_init+0xdc>)
   23a4e:	891b      	ldrh	r3, [r3, #8]
   23a50:	001a      	movs	r2, r3
			(void*)(FLASH_SIZE -
   23a52:	0013      	movs	r3, r2
   23a54:	069b      	lsls	r3, r3, #26
   23a56:	1a9b      	subs	r3, r3, r2
   23a58:	019b      	lsls	r3, r3, #6
   23a5a:	2280      	movs	r2, #128	; 0x80
   23a5c:	02d2      	lsls	r2, r2, #11
   23a5e:	4694      	mov	ip, r2
   23a60:	4463      	add	r3, ip
   23a62:	001a      	movs	r2, r3
	_eeprom_instance.flash =
   23a64:	4b16      	ldr	r3, [pc, #88]	; (23ac0 <eeprom_emulator_init+0xdc>)
   23a66:	605a      	str	r2, [r3, #4]

	/* Clear EEPROM page write cache on initialization */
	_eeprom_instance.cache_active = false;
   23a68:	4b15      	ldr	r3, [pc, #84]	; (23ac0 <eeprom_emulator_init+0xdc>)
   23a6a:	22c8      	movs	r2, #200	; 0xc8
   23a6c:	2100      	movs	r1, #0
   23a6e:	5499      	strb	r1, [r3, r2]

	/* Scan physical memory and re-create logical to physical page mapping
	 * table to locate logical pages of EEPROM data in physical FLASH */
	_eeprom_emulator_update_page_mapping();
   23a70:	4b14      	ldr	r3, [pc, #80]	; (23ac4 <eeprom_emulator_init+0xe0>)
   23a72:	4798      	blx	r3

	/* Could not find spare row - abort as the memory appears to be corrupt */
	if (_eeprom_instance.spare_row == EEPROM_INVALID_ROW_NUMBER) {
   23a74:	4b12      	ldr	r3, [pc, #72]	; (23ac0 <eeprom_emulator_init+0xdc>)
   23a76:	2287      	movs	r2, #135	; 0x87
   23a78:	5c9b      	ldrb	r3, [r3, r2]
   23a7a:	2b3f      	cmp	r3, #63	; 0x3f
   23a7c:	d101      	bne.n	23a82 <eeprom_emulator_init+0x9e>
		return STATUS_ERR_BAD_FORMAT;
   23a7e:	231a      	movs	r3, #26
   23a80:	e014      	b.n	23aac <eeprom_emulator_init+0xc8>
	}

	/* Verify that the master page contains valid data for this service */
	error_code = _eeprom_emulator_verify_master_page();
   23a82:	2317      	movs	r3, #23
   23a84:	18fc      	adds	r4, r7, r3
   23a86:	4b10      	ldr	r3, [pc, #64]	; (23ac8 <eeprom_emulator_init+0xe4>)
   23a88:	4798      	blx	r3
   23a8a:	0003      	movs	r3, r0
   23a8c:	7023      	strb	r3, [r4, #0]
	if (error_code != STATUS_OK) {
   23a8e:	2317      	movs	r3, #23
   23a90:	18fb      	adds	r3, r7, r3
   23a92:	781b      	ldrb	r3, [r3, #0]
   23a94:	2b00      	cmp	r3, #0
   23a96:	d003      	beq.n	23aa0 <eeprom_emulator_init+0xbc>
		return error_code;
   23a98:	2317      	movs	r3, #23
   23a9a:	18fb      	adds	r3, r7, r3
   23a9c:	781b      	ldrb	r3, [r3, #0]
   23a9e:	e005      	b.n	23aac <eeprom_emulator_init+0xc8>
	}

	/* Mark initialization as complete */
	_eeprom_instance.initialized = true;
   23aa0:	4b07      	ldr	r3, [pc, #28]	; (23ac0 <eeprom_emulator_init+0xdc>)
   23aa2:	2201      	movs	r2, #1
   23aa4:	701a      	strb	r2, [r3, #0]

	return error_code;
   23aa6:	2317      	movs	r3, #23
   23aa8:	18fb      	adds	r3, r7, r3
   23aaa:	781b      	ldrb	r3, [r3, #0]
}
   23aac:	0018      	movs	r0, r3
   23aae:	46bd      	mov	sp, r7
   23ab0:	b007      	add	sp, #28
   23ab2:	bd90      	pop	{r4, r7, pc}
   23ab4:	000230d1 	.word	0x000230d1
   23ab8:	00022aad 	.word	0x00022aad
   23abc:	00022f8d 	.word	0x00022f8d
   23ac0:	2000041c 	.word	0x2000041c
   23ac4:	000234b1 	.word	0x000234b1
   23ac8:	00023945 	.word	0x00023945

00023acc <eeprom_emulator_erase_memory>:
 *
 * Erases and re-initializes the emulated EEPROM memory space, destroying any
 * existing data.
 */
void eeprom_emulator_erase_memory(void)
{
   23acc:	b580      	push	{r7, lr}
   23ace:	af00      	add	r7, sp, #0
	/* Create new EEPROM memory block in EEPROM emulation section */
	_eeprom_emulator_format_memory();
   23ad0:	4b04      	ldr	r3, [pc, #16]	; (23ae4 <eeprom_emulator_erase_memory+0x18>)
   23ad2:	4798      	blx	r3

	/* Write EEPROM emulation master block */
	_eeprom_emulator_create_master_page();
   23ad4:	4b04      	ldr	r3, [pc, #16]	; (23ae8 <eeprom_emulator_erase_memory+0x1c>)
   23ad6:	4798      	blx	r3

	/* Map the newly created EEPROM memory block */
	_eeprom_emulator_update_page_mapping();
   23ad8:	4b04      	ldr	r3, [pc, #16]	; (23aec <eeprom_emulator_erase_memory+0x20>)
   23ada:	4798      	blx	r3
}
   23adc:	46c0      	nop			; (mov r8, r8)
   23ade:	46bd      	mov	sp, r7
   23ae0:	bd80      	pop	{r7, pc}
   23ae2:	46c0      	nop			; (mov r8, r8)
   23ae4:	00023241 	.word	0x00023241
   23ae8:	0002387d 	.word	0x0002387d
   23aec:	000234b1 	.word	0x000234b1

00023af0 <eeprom_emulator_write_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_write_page(
		const uint8_t logical_page,
		const uint8_t *const data)
{
   23af0:	b590      	push	{r4, r7, lr}
   23af2:	b085      	sub	sp, #20
   23af4:	af00      	add	r7, sp, #0
   23af6:	0002      	movs	r2, r0
   23af8:	6039      	str	r1, [r7, #0]
   23afa:	1dfb      	adds	r3, r7, #7
   23afc:	701a      	strb	r2, [r3, #0]
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
   23afe:	4b38      	ldr	r3, [pc, #224]	; (23be0 <eeprom_emulator_write_page+0xf0>)
   23b00:	781b      	ldrb	r3, [r3, #0]
   23b02:	2201      	movs	r2, #1
   23b04:	4053      	eors	r3, r2
   23b06:	b2db      	uxtb	r3, r3
   23b08:	2b00      	cmp	r3, #0
   23b0a:	d001      	beq.n	23b10 <eeprom_emulator_write_page+0x20>
		return STATUS_ERR_NOT_INITIALIZED;
   23b0c:	231f      	movs	r3, #31
   23b0e:	e063      	b.n	23bd8 <eeprom_emulator_write_page+0xe8>
	}

	/* Make sure the write address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
   23b10:	4b33      	ldr	r3, [pc, #204]	; (23be0 <eeprom_emulator_write_page+0xf0>)
   23b12:	7a9b      	ldrb	r3, [r3, #10]
   23b14:	1dfa      	adds	r2, r7, #7
   23b16:	7812      	ldrb	r2, [r2, #0]
   23b18:	429a      	cmp	r2, r3
   23b1a:	d301      	bcc.n	23b20 <eeprom_emulator_write_page+0x30>
		return STATUS_ERR_BAD_ADDRESS;
   23b1c:	2318      	movs	r3, #24
   23b1e:	e05b      	b.n	23bd8 <eeprom_emulator_write_page+0xe8>
	}

	/* Check if the cache is active and the currently cached page is not the
	 * page that is being written (if not, we need to commit and cache the new
	 * page) */
	if ((_eeprom_instance.cache_active == true) &&
   23b20:	4b2f      	ldr	r3, [pc, #188]	; (23be0 <eeprom_emulator_write_page+0xf0>)
   23b22:	22c8      	movs	r2, #200	; 0xc8
   23b24:	5c9b      	ldrb	r3, [r3, r2]
   23b26:	2b00      	cmp	r3, #0
   23b28:	d008      	beq.n	23b3c <eeprom_emulator_write_page+0x4c>
			(_eeprom_instance.cache.header.logical_page != logical_page)) {
   23b2a:	4b2d      	ldr	r3, [pc, #180]	; (23be0 <eeprom_emulator_write_page+0xf0>)
   23b2c:	2288      	movs	r2, #136	; 0x88
   23b2e:	5c9b      	ldrb	r3, [r3, r2]
	if ((_eeprom_instance.cache_active == true) &&
   23b30:	1dfa      	adds	r2, r7, #7
   23b32:	7812      	ldrb	r2, [r2, #0]
   23b34:	429a      	cmp	r2, r3
   23b36:	d001      	beq.n	23b3c <eeprom_emulator_write_page+0x4c>
		/* Commit the currently cached data buffer to non-volatile memory */
		eeprom_emulator_commit_page_buffer();
   23b38:	4b2a      	ldr	r3, [pc, #168]	; (23be4 <eeprom_emulator_write_page+0xf4>)
   23b3a:	4798      	blx	r3
	}

	/* Check if we have space in the current page location's physical row for
	 * a new version, and if so get the new page index */
	uint8_t new_page = 0;
   23b3c:	230e      	movs	r3, #14
   23b3e:	18fb      	adds	r3, r7, r3
   23b40:	2200      	movs	r2, #0
   23b42:	701a      	strb	r2, [r3, #0]
	bool page_spare  = _eeprom_emulator_is_page_free_on_row(
   23b44:	1dfb      	adds	r3, r7, #7
   23b46:	781b      	ldrb	r3, [r3, #0]
   23b48:	4a25      	ldr	r2, [pc, #148]	; (23be0 <eeprom_emulator_write_page+0xf0>)
   23b4a:	18d3      	adds	r3, r2, r3
   23b4c:	7adb      	ldrb	r3, [r3, #11]
   23b4e:	220f      	movs	r2, #15
   23b50:	18bc      	adds	r4, r7, r2
   23b52:	220e      	movs	r2, #14
   23b54:	18ba      	adds	r2, r7, r2
   23b56:	0011      	movs	r1, r2
   23b58:	0018      	movs	r0, r3
   23b5a:	4b23      	ldr	r3, [pc, #140]	; (23be8 <eeprom_emulator_write_page+0xf8>)
   23b5c:	4798      	blx	r3
   23b5e:	0003      	movs	r3, r0
   23b60:	7023      	strb	r3, [r4, #0]
			_eeprom_instance.page_map[logical_page], &new_page);

	/* Check if the current row is full, and we need to swap it out with a
	 * spare row */
	if (page_spare == false) {
   23b62:	230f      	movs	r3, #15
   23b64:	18fb      	adds	r3, r7, r3
   23b66:	781b      	ldrb	r3, [r3, #0]
   23b68:	2201      	movs	r2, #1
   23b6a:	4053      	eors	r3, r2
   23b6c:	b2db      	uxtb	r3, r3
   23b6e:	2b00      	cmp	r3, #0
   23b70:	d00e      	beq.n	23b90 <eeprom_emulator_write_page+0xa0>
		/* Move the other page we aren't writing that is stored in the same
		 * page to the new row, and replace the old current page with the
		 * new page contents (cache is updated to match) */
		_eeprom_emulator_move_data_to_spare(
				_eeprom_instance.page_map[logical_page] / NVMCTRL_ROW_PAGES,
   23b72:	1dfb      	adds	r3, r7, #7
   23b74:	781b      	ldrb	r3, [r3, #0]
   23b76:	4a1a      	ldr	r2, [pc, #104]	; (23be0 <eeprom_emulator_write_page+0xf0>)
   23b78:	18d3      	adds	r3, r2, r3
   23b7a:	7adb      	ldrb	r3, [r3, #11]
		_eeprom_emulator_move_data_to_spare(
   23b7c:	089b      	lsrs	r3, r3, #2
   23b7e:	b2d8      	uxtb	r0, r3
   23b80:	683a      	ldr	r2, [r7, #0]
   23b82:	1dfb      	adds	r3, r7, #7
   23b84:	781b      	ldrb	r3, [r3, #0]
   23b86:	0019      	movs	r1, r3
   23b88:	4b18      	ldr	r3, [pc, #96]	; (23bec <eeprom_emulator_write_page+0xfc>)
   23b8a:	4798      	blx	r3
				logical_page,
				data);

		/* New data is now written and the cache is updated, exit */
		return STATUS_OK;
   23b8c:	2300      	movs	r3, #0
   23b8e:	e023      	b.n	23bd8 <eeprom_emulator_write_page+0xe8>
	}

	/* Update the page cache header section with the new page header */
	_eeprom_instance.cache.header.logical_page = logical_page;
   23b90:	4b13      	ldr	r3, [pc, #76]	; (23be0 <eeprom_emulator_write_page+0xf0>)
   23b92:	1dfa      	adds	r2, r7, #7
   23b94:	2188      	movs	r1, #136	; 0x88
   23b96:	7812      	ldrb	r2, [r2, #0]
   23b98:	545a      	strb	r2, [r3, r1]

	/* Update the page cache contents with the new data */
	memcpy(&_eeprom_instance.cache.data,
   23b9a:	4b11      	ldr	r3, [pc, #68]	; (23be0 <eeprom_emulator_write_page+0xf0>)
   23b9c:	228c      	movs	r2, #140	; 0x8c
   23b9e:	6839      	ldr	r1, [r7, #0]
   23ba0:	189b      	adds	r3, r3, r2
   23ba2:	223c      	movs	r2, #60	; 0x3c
   23ba4:	0018      	movs	r0, r3
   23ba6:	4b12      	ldr	r3, [pc, #72]	; (23bf0 <eeprom_emulator_write_page+0x100>)
   23ba8:	4798      	blx	r3
			data,
			EEPROM_PAGE_SIZE);

	/* Fill the physical NVM buffer with the new data so that it can be quickly
	 * committed in the future if needed due to a low power condition */
	_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
   23baa:	230e      	movs	r3, #14
   23bac:	18fb      	adds	r3, r7, r3
   23bae:	781b      	ldrb	r3, [r3, #0]
   23bb0:	b29b      	uxth	r3, r3
   23bb2:	4a10      	ldr	r2, [pc, #64]	; (23bf4 <eeprom_emulator_write_page+0x104>)
   23bb4:	0011      	movs	r1, r2
   23bb6:	0018      	movs	r0, r3
   23bb8:	4b0f      	ldr	r3, [pc, #60]	; (23bf8 <eeprom_emulator_write_page+0x108>)
   23bba:	4798      	blx	r3

	/* Update the cache parameters and mark the cache as active */
	_eeprom_instance.page_map[logical_page] = new_page;
   23bbc:	1dfb      	adds	r3, r7, #7
   23bbe:	781b      	ldrb	r3, [r3, #0]
   23bc0:	220e      	movs	r2, #14
   23bc2:	18ba      	adds	r2, r7, r2
   23bc4:	7811      	ldrb	r1, [r2, #0]
   23bc6:	4a06      	ldr	r2, [pc, #24]	; (23be0 <eeprom_emulator_write_page+0xf0>)
   23bc8:	18d3      	adds	r3, r2, r3
   23bca:	1c0a      	adds	r2, r1, #0
   23bcc:	72da      	strb	r2, [r3, #11]
	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active           = true;
   23bce:	4b04      	ldr	r3, [pc, #16]	; (23be0 <eeprom_emulator_write_page+0xf0>)
   23bd0:	22c8      	movs	r2, #200	; 0xc8
   23bd2:	2101      	movs	r1, #1
   23bd4:	5499      	strb	r1, [r3, r2]

	return STATUS_OK;
   23bd6:	2300      	movs	r3, #0
}
   23bd8:	0018      	movs	r0, r3
   23bda:	46bd      	mov	sp, r7
   23bdc:	b005      	add	sp, #20
   23bde:	bd90      	pop	{r4, r7, pc}
   23be0:	2000041c 	.word	0x2000041c
   23be4:	00023c99 	.word	0x00023c99
   23be8:	00023605 	.word	0x00023605
   23bec:	0002369d 	.word	0x0002369d
   23bf0:	00028edd 	.word	0x00028edd
   23bf4:	200004a4 	.word	0x200004a4
   23bf8:	00023155 	.word	0x00023155

00023bfc <eeprom_emulator_read_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_read_page(
		const uint8_t logical_page,
		uint8_t *const data)
{
   23bfc:	b580      	push	{r7, lr}
   23bfe:	b092      	sub	sp, #72	; 0x48
   23c00:	af00      	add	r7, sp, #0
   23c02:	0002      	movs	r2, r0
   23c04:	6039      	str	r1, [r7, #0]
   23c06:	1dfb      	adds	r3, r7, #7
   23c08:	701a      	strb	r2, [r3, #0]
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
   23c0a:	4b20      	ldr	r3, [pc, #128]	; (23c8c <eeprom_emulator_read_page+0x90>)
   23c0c:	781b      	ldrb	r3, [r3, #0]
   23c0e:	2201      	movs	r2, #1
   23c10:	4053      	eors	r3, r2
   23c12:	b2db      	uxtb	r3, r3
   23c14:	2b00      	cmp	r3, #0
   23c16:	d001      	beq.n	23c1c <eeprom_emulator_read_page+0x20>
		return STATUS_ERR_NOT_INITIALIZED;
   23c18:	231f      	movs	r3, #31
   23c1a:	e033      	b.n	23c84 <eeprom_emulator_read_page+0x88>
	}

	/* Make sure the read address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
   23c1c:	4b1b      	ldr	r3, [pc, #108]	; (23c8c <eeprom_emulator_read_page+0x90>)
   23c1e:	7a9b      	ldrb	r3, [r3, #10]
   23c20:	1dfa      	adds	r2, r7, #7
   23c22:	7812      	ldrb	r2, [r2, #0]
   23c24:	429a      	cmp	r2, r3
   23c26:	d301      	bcc.n	23c2c <eeprom_emulator_read_page+0x30>
		return STATUS_ERR_BAD_ADDRESS;
   23c28:	2318      	movs	r3, #24
   23c2a:	e02b      	b.n	23c84 <eeprom_emulator_read_page+0x88>
	}

	/* Check if the page to read is currently cached (and potentially out of
	 * sync/newer than the physical memory) */
	if ((_eeprom_instance.cache_active == true) &&
   23c2c:	4b17      	ldr	r3, [pc, #92]	; (23c8c <eeprom_emulator_read_page+0x90>)
   23c2e:	22c8      	movs	r2, #200	; 0xc8
   23c30:	5c9b      	ldrb	r3, [r3, r2]
   23c32:	2b00      	cmp	r3, #0
   23c34:	d010      	beq.n	23c58 <eeprom_emulator_read_page+0x5c>
		 (_eeprom_instance.cache.header.logical_page == logical_page)) {
   23c36:	4b15      	ldr	r3, [pc, #84]	; (23c8c <eeprom_emulator_read_page+0x90>)
   23c38:	2288      	movs	r2, #136	; 0x88
   23c3a:	5c9b      	ldrb	r3, [r3, r2]
	if ((_eeprom_instance.cache_active == true) &&
   23c3c:	1dfa      	adds	r2, r7, #7
   23c3e:	7812      	ldrb	r2, [r2, #0]
   23c40:	429a      	cmp	r2, r3
   23c42:	d109      	bne.n	23c58 <eeprom_emulator_read_page+0x5c>
		/* Copy the potentially newer cached data into the user buffer */
		memcpy(data, _eeprom_instance.cache.data, EEPROM_PAGE_SIZE);
   23c44:	6839      	ldr	r1, [r7, #0]
   23c46:	4b11      	ldr	r3, [pc, #68]	; (23c8c <eeprom_emulator_read_page+0x90>)
   23c48:	228c      	movs	r2, #140	; 0x8c
   23c4a:	0008      	movs	r0, r1
   23c4c:	189b      	adds	r3, r3, r2
   23c4e:	223c      	movs	r2, #60	; 0x3c
   23c50:	0019      	movs	r1, r3
   23c52:	4b0f      	ldr	r3, [pc, #60]	; (23c90 <eeprom_emulator_read_page+0x94>)
   23c54:	4798      	blx	r3
   23c56:	e014      	b.n	23c82 <eeprom_emulator_read_page+0x86>
	} else {
		struct _eeprom_page temp;

		/* Copy the data from non-volatile memory into the temporary buffer */
		_eeprom_emulator_nvm_read_page(
				_eeprom_instance.page_map[logical_page], &temp);
   23c58:	1dfb      	adds	r3, r7, #7
   23c5a:	781b      	ldrb	r3, [r3, #0]
   23c5c:	4a0b      	ldr	r2, [pc, #44]	; (23c8c <eeprom_emulator_read_page+0x90>)
   23c5e:	18d3      	adds	r3, r2, r3
   23c60:	7adb      	ldrb	r3, [r3, #11]
		_eeprom_emulator_nvm_read_page(
   23c62:	b29b      	uxth	r3, r3
   23c64:	2208      	movs	r2, #8
   23c66:	18ba      	adds	r2, r7, r2
   23c68:	0011      	movs	r1, r2
   23c6a:	0018      	movs	r0, r3
   23c6c:	4b09      	ldr	r3, [pc, #36]	; (23c94 <eeprom_emulator_read_page+0x98>)
   23c6e:	4798      	blx	r3

		/* Copy the data portion of the read page to the user's buffer */
		memcpy(data, temp.data, EEPROM_PAGE_SIZE);
   23c70:	683a      	ldr	r2, [r7, #0]
   23c72:	2308      	movs	r3, #8
   23c74:	18fb      	adds	r3, r7, r3
   23c76:	0010      	movs	r0, r2
   23c78:	3304      	adds	r3, #4
   23c7a:	223c      	movs	r2, #60	; 0x3c
   23c7c:	0019      	movs	r1, r3
   23c7e:	4b04      	ldr	r3, [pc, #16]	; (23c90 <eeprom_emulator_read_page+0x94>)
   23c80:	4798      	blx	r3
	}

	return STATUS_OK;
   23c82:	2300      	movs	r3, #0
}
   23c84:	0018      	movs	r0, r3
   23c86:	46bd      	mov	sp, r7
   23c88:	b012      	add	sp, #72	; 0x48
   23c8a:	bd80      	pop	{r7, pc}
   23c8c:	2000041c 	.word	0x2000041c
   23c90:	00028edd 	.word	0x00028edd
   23c94:	000231f1 	.word	0x000231f1

00023c98 <eeprom_emulator_commit_page_buffer>:
 *       data loss.
 *
 * \return Status code indicating the status of the operation.
 */
enum status_code eeprom_emulator_commit_page_buffer(void)
{
   23c98:	b580      	push	{r7, lr}
   23c9a:	b082      	sub	sp, #8
   23c9c:	af00      	add	r7, sp, #0
	enum status_code error_code = STATUS_OK;
   23c9e:	1dfb      	adds	r3, r7, #7
   23ca0:	2200      	movs	r2, #0
   23ca2:	701a      	strb	r2, [r3, #0]

	/* If cache is inactive, no need to commit anything to physical memory */
	if (_eeprom_instance.cache_active == false) {
   23ca4:	4b10      	ldr	r3, [pc, #64]	; (23ce8 <eeprom_emulator_commit_page_buffer+0x50>)
   23ca6:	22c8      	movs	r2, #200	; 0xc8
   23ca8:	5c9b      	ldrb	r3, [r3, r2]
   23caa:	2201      	movs	r2, #1
   23cac:	4053      	eors	r3, r2
   23cae:	b2db      	uxtb	r3, r3
   23cb0:	2b00      	cmp	r3, #0
   23cb2:	d001      	beq.n	23cb8 <eeprom_emulator_commit_page_buffer+0x20>
		return STATUS_OK;
   23cb4:	2300      	movs	r3, #0
   23cb6:	e013      	b.n	23ce0 <eeprom_emulator_commit_page_buffer+0x48>
	}

	uint8_t cached_logical_page = _eeprom_instance.cache.header.logical_page;
   23cb8:	1dbb      	adds	r3, r7, #6
   23cba:	4a0b      	ldr	r2, [pc, #44]	; (23ce8 <eeprom_emulator_commit_page_buffer+0x50>)
   23cbc:	2188      	movs	r1, #136	; 0x88
   23cbe:	5c52      	ldrb	r2, [r2, r1]
   23cc0:	701a      	strb	r2, [r3, #0]

	/* Perform the page write to commit the NVM page buffer to FLASH */
	_eeprom_emulator_nvm_commit_cache(
			_eeprom_instance.page_map[cached_logical_page]);
   23cc2:	1dbb      	adds	r3, r7, #6
   23cc4:	781b      	ldrb	r3, [r3, #0]
   23cc6:	4a08      	ldr	r2, [pc, #32]	; (23ce8 <eeprom_emulator_commit_page_buffer+0x50>)
   23cc8:	18d3      	adds	r3, r2, r3
   23cca:	7adb      	ldrb	r3, [r3, #11]
	_eeprom_emulator_nvm_commit_cache(
   23ccc:	b29b      	uxth	r3, r3
   23cce:	0018      	movs	r0, r3
   23cd0:	4b06      	ldr	r3, [pc, #24]	; (23cec <eeprom_emulator_commit_page_buffer+0x54>)
   23cd2:	4798      	blx	r3

	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active = false;
   23cd4:	4b04      	ldr	r3, [pc, #16]	; (23ce8 <eeprom_emulator_commit_page_buffer+0x50>)
   23cd6:	22c8      	movs	r2, #200	; 0xc8
   23cd8:	2100      	movs	r1, #0
   23cda:	5499      	strb	r1, [r3, r2]

	return error_code;
   23cdc:	1dfb      	adds	r3, r7, #7
   23cde:	781b      	ldrb	r3, [r3, #0]
}
   23ce0:	0018      	movs	r0, r3
   23ce2:	46bd      	mov	sp, r7
   23ce4:	b002      	add	sp, #8
   23ce6:	bd80      	pop	{r7, pc}
   23ce8:	2000041c 	.word	0x2000041c
   23cec:	000231a5 	.word	0x000231a5

00023cf0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   23cf0:	b580      	push	{r7, lr}
   23cf2:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
   23cf4:	46c0      	nop			; (mov r8, r8)
   23cf6:	46bd      	mov	sp, r7
   23cf8:	bd80      	pop	{r7, pc}
	...

00023cfc <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   23cfc:	b580      	push	{r7, lr}
   23cfe:	b082      	sub	sp, #8
   23d00:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   23d02:	4b10      	ldr	r3, [pc, #64]	; (23d44 <cpu_irq_enter_critical+0x48>)
   23d04:	681b      	ldr	r3, [r3, #0]
   23d06:	2b00      	cmp	r3, #0
   23d08:	d112      	bne.n	23d30 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   23d0a:	f3ef 8310 	mrs	r3, PRIMASK
   23d0e:	607b      	str	r3, [r7, #4]
  return(result);
   23d10:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   23d12:	2b00      	cmp	r3, #0
   23d14:	d109      	bne.n	23d2a <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   23d16:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   23d18:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   23d1c:	4b0a      	ldr	r3, [pc, #40]	; (23d48 <cpu_irq_enter_critical+0x4c>)
   23d1e:	2200      	movs	r2, #0
   23d20:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   23d22:	4b0a      	ldr	r3, [pc, #40]	; (23d4c <cpu_irq_enter_critical+0x50>)
   23d24:	2201      	movs	r2, #1
   23d26:	701a      	strb	r2, [r3, #0]
   23d28:	e002      	b.n	23d30 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   23d2a:	4b08      	ldr	r3, [pc, #32]	; (23d4c <cpu_irq_enter_critical+0x50>)
   23d2c:	2200      	movs	r2, #0
   23d2e:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   23d30:	4b04      	ldr	r3, [pc, #16]	; (23d44 <cpu_irq_enter_critical+0x48>)
   23d32:	681b      	ldr	r3, [r3, #0]
   23d34:	1c5a      	adds	r2, r3, #1
   23d36:	4b03      	ldr	r3, [pc, #12]	; (23d44 <cpu_irq_enter_critical+0x48>)
   23d38:	601a      	str	r2, [r3, #0]
}
   23d3a:	46c0      	nop			; (mov r8, r8)
   23d3c:	46bd      	mov	sp, r7
   23d3e:	b002      	add	sp, #8
   23d40:	bd80      	pop	{r7, pc}
   23d42:	46c0      	nop			; (mov r8, r8)
   23d44:	200004e8 	.word	0x200004e8
   23d48:	20000028 	.word	0x20000028
   23d4c:	200004ec 	.word	0x200004ec

00023d50 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   23d50:	b580      	push	{r7, lr}
   23d52:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   23d54:	4b0b      	ldr	r3, [pc, #44]	; (23d84 <cpu_irq_leave_critical+0x34>)
   23d56:	681b      	ldr	r3, [r3, #0]
   23d58:	1e5a      	subs	r2, r3, #1
   23d5a:	4b0a      	ldr	r3, [pc, #40]	; (23d84 <cpu_irq_leave_critical+0x34>)
   23d5c:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   23d5e:	4b09      	ldr	r3, [pc, #36]	; (23d84 <cpu_irq_leave_critical+0x34>)
   23d60:	681b      	ldr	r3, [r3, #0]
   23d62:	2b00      	cmp	r3, #0
   23d64:	d10a      	bne.n	23d7c <cpu_irq_leave_critical+0x2c>
   23d66:	4b08      	ldr	r3, [pc, #32]	; (23d88 <cpu_irq_leave_critical+0x38>)
   23d68:	781b      	ldrb	r3, [r3, #0]
   23d6a:	b2db      	uxtb	r3, r3
   23d6c:	2b00      	cmp	r3, #0
   23d6e:	d005      	beq.n	23d7c <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   23d70:	4b06      	ldr	r3, [pc, #24]	; (23d8c <cpu_irq_leave_critical+0x3c>)
   23d72:	2201      	movs	r2, #1
   23d74:	701a      	strb	r2, [r3, #0]
   23d76:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   23d7a:	b662      	cpsie	i
	}
}
   23d7c:	46c0      	nop			; (mov r8, r8)
   23d7e:	46bd      	mov	sp, r7
   23d80:	bd80      	pop	{r7, pc}
   23d82:	46c0      	nop			; (mov r8, r8)
   23d84:	200004e8 	.word	0x200004e8
   23d88:	200004ec 	.word	0x200004ec
   23d8c:	20000028 	.word	0x20000028

00023d90 <system_gclk_gen_get_config_defaults>:
{
   23d90:	b580      	push	{r7, lr}
   23d92:	b082      	sub	sp, #8
   23d94:	af00      	add	r7, sp, #0
   23d96:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   23d98:	687b      	ldr	r3, [r7, #4]
   23d9a:	2201      	movs	r2, #1
   23d9c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   23d9e:	687b      	ldr	r3, [r7, #4]
   23da0:	2200      	movs	r2, #0
   23da2:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   23da4:	687b      	ldr	r3, [r7, #4]
   23da6:	2206      	movs	r2, #6
   23da8:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   23daa:	687b      	ldr	r3, [r7, #4]
   23dac:	2200      	movs	r2, #0
   23dae:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   23db0:	687b      	ldr	r3, [r7, #4]
   23db2:	2200      	movs	r2, #0
   23db4:	725a      	strb	r2, [r3, #9]
}
   23db6:	46c0      	nop			; (mov r8, r8)
   23db8:	46bd      	mov	sp, r7
   23dba:	b002      	add	sp, #8
   23dbc:	bd80      	pop	{r7, pc}

00023dbe <system_gclk_chan_get_config_defaults>:
{
   23dbe:	b580      	push	{r7, lr}
   23dc0:	b082      	sub	sp, #8
   23dc2:	af00      	add	r7, sp, #0
   23dc4:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   23dc6:	687b      	ldr	r3, [r7, #4]
   23dc8:	2200      	movs	r2, #0
   23dca:	701a      	strb	r2, [r3, #0]
}
   23dcc:	46c0      	nop			; (mov r8, r8)
   23dce:	46bd      	mov	sp, r7
   23dd0:	b002      	add	sp, #8
   23dd2:	bd80      	pop	{r7, pc}

00023dd4 <system_clock_source_xosc32k_get_config_defaults>:
{
   23dd4:	b580      	push	{r7, lr}
   23dd6:	b082      	sub	sp, #8
   23dd8:	af00      	add	r7, sp, #0
   23dda:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
   23ddc:	687b      	ldr	r3, [r7, #4]
   23dde:	2200      	movs	r2, #0
   23de0:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
   23de2:	687b      	ldr	r3, [r7, #4]
   23de4:	2204      	movs	r2, #4
   23de6:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
   23de8:	687b      	ldr	r3, [r7, #4]
   23dea:	2200      	movs	r2, #0
   23dec:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
   23dee:	687b      	ldr	r3, [r7, #4]
   23df0:	2280      	movs	r2, #128	; 0x80
   23df2:	0212      	lsls	r2, r2, #8
   23df4:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
   23df6:	687b      	ldr	r3, [r7, #4]
   23df8:	2200      	movs	r2, #0
   23dfa:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
   23dfc:	687b      	ldr	r3, [r7, #4]
   23dfe:	2201      	movs	r2, #1
   23e00:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
   23e02:	687b      	ldr	r3, [r7, #4]
   23e04:	2200      	movs	r2, #0
   23e06:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
   23e08:	687b      	ldr	r3, [r7, #4]
   23e0a:	2201      	movs	r2, #1
   23e0c:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
   23e0e:	687b      	ldr	r3, [r7, #4]
   23e10:	2200      	movs	r2, #0
   23e12:	739a      	strb	r2, [r3, #14]
}
   23e14:	46c0      	nop			; (mov r8, r8)
   23e16:	46bd      	mov	sp, r7
   23e18:	b002      	add	sp, #8
   23e1a:	bd80      	pop	{r7, pc}

00023e1c <system_clock_source_osc8m_get_config_defaults>:
{
   23e1c:	b580      	push	{r7, lr}
   23e1e:	b082      	sub	sp, #8
   23e20:	af00      	add	r7, sp, #0
   23e22:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   23e24:	687b      	ldr	r3, [r7, #4]
   23e26:	2203      	movs	r2, #3
   23e28:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   23e2a:	687b      	ldr	r3, [r7, #4]
   23e2c:	2200      	movs	r2, #0
   23e2e:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   23e30:	687b      	ldr	r3, [r7, #4]
   23e32:	2201      	movs	r2, #1
   23e34:	709a      	strb	r2, [r3, #2]
}
   23e36:	46c0      	nop			; (mov r8, r8)
   23e38:	46bd      	mov	sp, r7
   23e3a:	b002      	add	sp, #8
   23e3c:	bd80      	pop	{r7, pc}

00023e3e <system_clock_source_dfll_get_config_defaults>:
{
   23e3e:	b580      	push	{r7, lr}
   23e40:	b082      	sub	sp, #8
   23e42:	af00      	add	r7, sp, #0
   23e44:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
   23e46:	687b      	ldr	r3, [r7, #4]
   23e48:	2200      	movs	r2, #0
   23e4a:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   23e4c:	687b      	ldr	r3, [r7, #4]
   23e4e:	2200      	movs	r2, #0
   23e50:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   23e52:	687b      	ldr	r3, [r7, #4]
   23e54:	2200      	movs	r2, #0
   23e56:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   23e58:	687b      	ldr	r3, [r7, #4]
   23e5a:	2200      	movs	r2, #0
   23e5c:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   23e5e:	687b      	ldr	r3, [r7, #4]
   23e60:	2200      	movs	r2, #0
   23e62:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
   23e64:	687b      	ldr	r3, [r7, #4]
   23e66:	2201      	movs	r2, #1
   23e68:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
   23e6a:	687b      	ldr	r3, [r7, #4]
   23e6c:	2207      	movs	r2, #7
   23e6e:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
   23e70:	687b      	ldr	r3, [r7, #4]
   23e72:	223f      	movs	r2, #63	; 0x3f
   23e74:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
   23e76:	687b      	ldr	r3, [r7, #4]
   23e78:	2201      	movs	r2, #1
   23e7a:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
   23e7c:	687b      	ldr	r3, [r7, #4]
   23e7e:	2201      	movs	r2, #1
   23e80:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
   23e82:	687b      	ldr	r3, [r7, #4]
   23e84:	2206      	movs	r2, #6
   23e86:	821a      	strh	r2, [r3, #16]
}
   23e88:	46c0      	nop			; (mov r8, r8)
   23e8a:	46bd      	mov	sp, r7
   23e8c:	b002      	add	sp, #8
   23e8e:	bd80      	pop	{r7, pc}

00023e90 <system_cpu_clock_set_divider>:
{
   23e90:	b580      	push	{r7, lr}
   23e92:	b082      	sub	sp, #8
   23e94:	af00      	add	r7, sp, #0
   23e96:	0002      	movs	r2, r0
   23e98:	1dfb      	adds	r3, r7, #7
   23e9a:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   23e9c:	4a03      	ldr	r2, [pc, #12]	; (23eac <system_cpu_clock_set_divider+0x1c>)
   23e9e:	1dfb      	adds	r3, r7, #7
   23ea0:	781b      	ldrb	r3, [r3, #0]
   23ea2:	7213      	strb	r3, [r2, #8]
}
   23ea4:	46c0      	nop			; (mov r8, r8)
   23ea6:	46bd      	mov	sp, r7
   23ea8:	b002      	add	sp, #8
   23eaa:	bd80      	pop	{r7, pc}
   23eac:	40000400 	.word	0x40000400

00023eb0 <system_apb_clock_set_divider>:
{
   23eb0:	b580      	push	{r7, lr}
   23eb2:	b082      	sub	sp, #8
   23eb4:	af00      	add	r7, sp, #0
   23eb6:	0002      	movs	r2, r0
   23eb8:	1dfb      	adds	r3, r7, #7
   23eba:	701a      	strb	r2, [r3, #0]
   23ebc:	1dbb      	adds	r3, r7, #6
   23ebe:	1c0a      	adds	r2, r1, #0
   23ec0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   23ec2:	1dfb      	adds	r3, r7, #7
   23ec4:	781b      	ldrb	r3, [r3, #0]
   23ec6:	2b01      	cmp	r3, #1
   23ec8:	d008      	beq.n	23edc <system_apb_clock_set_divider+0x2c>
   23eca:	2b02      	cmp	r3, #2
   23ecc:	d00b      	beq.n	23ee6 <system_apb_clock_set_divider+0x36>
   23ece:	2b00      	cmp	r3, #0
   23ed0:	d10e      	bne.n	23ef0 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   23ed2:	4a0b      	ldr	r2, [pc, #44]	; (23f00 <system_apb_clock_set_divider+0x50>)
   23ed4:	1dbb      	adds	r3, r7, #6
   23ed6:	781b      	ldrb	r3, [r3, #0]
   23ed8:	7253      	strb	r3, [r2, #9]
			break;
   23eda:	e00b      	b.n	23ef4 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   23edc:	4a08      	ldr	r2, [pc, #32]	; (23f00 <system_apb_clock_set_divider+0x50>)
   23ede:	1dbb      	adds	r3, r7, #6
   23ee0:	781b      	ldrb	r3, [r3, #0]
   23ee2:	7293      	strb	r3, [r2, #10]
			break;
   23ee4:	e006      	b.n	23ef4 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   23ee6:	4a06      	ldr	r2, [pc, #24]	; (23f00 <system_apb_clock_set_divider+0x50>)
   23ee8:	1dbb      	adds	r3, r7, #6
   23eea:	781b      	ldrb	r3, [r3, #0]
   23eec:	72d3      	strb	r3, [r2, #11]
			break;
   23eee:	e001      	b.n	23ef4 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   23ef0:	2317      	movs	r3, #23
   23ef2:	e000      	b.n	23ef6 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   23ef4:	2300      	movs	r3, #0
}
   23ef6:	0018      	movs	r0, r3
   23ef8:	46bd      	mov	sp, r7
   23efa:	b002      	add	sp, #8
   23efc:	bd80      	pop	{r7, pc}
   23efe:	46c0      	nop			; (mov r8, r8)
   23f00:	40000400 	.word	0x40000400

00023f04 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   23f04:	b580      	push	{r7, lr}
   23f06:	b082      	sub	sp, #8
   23f08:	af00      	add	r7, sp, #0
   23f0a:	0002      	movs	r2, r0
   23f0c:	1dfb      	adds	r3, r7, #7
   23f0e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   23f10:	4a08      	ldr	r2, [pc, #32]	; (23f34 <system_flash_set_waitstates+0x30>)
   23f12:	1dfb      	adds	r3, r7, #7
   23f14:	781b      	ldrb	r3, [r3, #0]
   23f16:	210f      	movs	r1, #15
   23f18:	400b      	ands	r3, r1
   23f1a:	b2d9      	uxtb	r1, r3
   23f1c:	6853      	ldr	r3, [r2, #4]
   23f1e:	200f      	movs	r0, #15
   23f20:	4001      	ands	r1, r0
   23f22:	0049      	lsls	r1, r1, #1
   23f24:	201e      	movs	r0, #30
   23f26:	4383      	bics	r3, r0
   23f28:	430b      	orrs	r3, r1
   23f2a:	6053      	str	r3, [r2, #4]
}
   23f2c:	46c0      	nop			; (mov r8, r8)
   23f2e:	46bd      	mov	sp, r7
   23f30:	b002      	add	sp, #8
   23f32:	bd80      	pop	{r7, pc}
   23f34:	41004000 	.word	0x41004000

00023f38 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   23f38:	b580      	push	{r7, lr}
   23f3a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   23f3c:	46c0      	nop			; (mov r8, r8)
   23f3e:	4b04      	ldr	r3, [pc, #16]	; (23f50 <_system_dfll_wait_for_sync+0x18>)
   23f40:	68db      	ldr	r3, [r3, #12]
   23f42:	2210      	movs	r2, #16
   23f44:	4013      	ands	r3, r2
   23f46:	d0fa      	beq.n	23f3e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   23f48:	46c0      	nop			; (mov r8, r8)
   23f4a:	46bd      	mov	sp, r7
   23f4c:	bd80      	pop	{r7, pc}
   23f4e:	46c0      	nop			; (mov r8, r8)
   23f50:	40000800 	.word	0x40000800

00023f54 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   23f54:	b580      	push	{r7, lr}
   23f56:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   23f58:	4b0c      	ldr	r3, [pc, #48]	; (23f8c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   23f5a:	2202      	movs	r2, #2
   23f5c:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   23f5e:	4b0c      	ldr	r3, [pc, #48]	; (23f90 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   23f60:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   23f62:	4a0a      	ldr	r2, [pc, #40]	; (23f8c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   23f64:	4b0b      	ldr	r3, [pc, #44]	; (23f94 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   23f66:	689b      	ldr	r3, [r3, #8]
   23f68:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   23f6a:	4a08      	ldr	r2, [pc, #32]	; (23f8c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   23f6c:	4b09      	ldr	r3, [pc, #36]	; (23f94 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   23f6e:	685b      	ldr	r3, [r3, #4]
   23f70:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   23f72:	4b06      	ldr	r3, [pc, #24]	; (23f8c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   23f74:	2200      	movs	r2, #0
   23f76:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   23f78:	4b05      	ldr	r3, [pc, #20]	; (23f90 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   23f7a:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   23f7c:	4a03      	ldr	r2, [pc, #12]	; (23f8c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   23f7e:	4b05      	ldr	r3, [pc, #20]	; (23f94 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   23f80:	681b      	ldr	r3, [r3, #0]
   23f82:	b29b      	uxth	r3, r3
   23f84:	8493      	strh	r3, [r2, #36]	; 0x24
}
   23f86:	46c0      	nop			; (mov r8, r8)
   23f88:	46bd      	mov	sp, r7
   23f8a:	bd80      	pop	{r7, pc}
   23f8c:	40000800 	.word	0x40000800
   23f90:	00023f39 	.word	0x00023f39
   23f94:	200004f0 	.word	0x200004f0

00023f98 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   23f98:	b580      	push	{r7, lr}
   23f9a:	b082      	sub	sp, #8
   23f9c:	af00      	add	r7, sp, #0
   23f9e:	0002      	movs	r2, r0
   23fa0:	1dfb      	adds	r3, r7, #7
   23fa2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   23fa4:	1dfb      	adds	r3, r7, #7
   23fa6:	781b      	ldrb	r3, [r3, #0]
   23fa8:	2b08      	cmp	r3, #8
   23faa:	d841      	bhi.n	24030 <system_clock_source_get_hz+0x98>
   23fac:	009a      	lsls	r2, r3, #2
   23fae:	4b23      	ldr	r3, [pc, #140]	; (2403c <system_clock_source_get_hz+0xa4>)
   23fb0:	18d3      	adds	r3, r2, r3
   23fb2:	681b      	ldr	r3, [r3, #0]
   23fb4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   23fb6:	4b22      	ldr	r3, [pc, #136]	; (24040 <system_clock_source_get_hz+0xa8>)
   23fb8:	691b      	ldr	r3, [r3, #16]
   23fba:	e03a      	b.n	24032 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   23fbc:	4b21      	ldr	r3, [pc, #132]	; (24044 <system_clock_source_get_hz+0xac>)
   23fbe:	6a1b      	ldr	r3, [r3, #32]
   23fc0:	059b      	lsls	r3, r3, #22
   23fc2:	0f9b      	lsrs	r3, r3, #30
   23fc4:	b2db      	uxtb	r3, r3
   23fc6:	001a      	movs	r2, r3
   23fc8:	4b1f      	ldr	r3, [pc, #124]	; (24048 <system_clock_source_get_hz+0xb0>)
   23fca:	40d3      	lsrs	r3, r2
   23fcc:	e031      	b.n	24032 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   23fce:	2380      	movs	r3, #128	; 0x80
   23fd0:	021b      	lsls	r3, r3, #8
   23fd2:	e02e      	b.n	24032 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   23fd4:	2380      	movs	r3, #128	; 0x80
   23fd6:	021b      	lsls	r3, r3, #8
   23fd8:	e02b      	b.n	24032 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   23fda:	4b19      	ldr	r3, [pc, #100]	; (24040 <system_clock_source_get_hz+0xa8>)
   23fdc:	695b      	ldr	r3, [r3, #20]
   23fde:	e028      	b.n	24032 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   23fe0:	4b17      	ldr	r3, [pc, #92]	; (24040 <system_clock_source_get_hz+0xa8>)
   23fe2:	681b      	ldr	r3, [r3, #0]
   23fe4:	2202      	movs	r2, #2
   23fe6:	4013      	ands	r3, r2
   23fe8:	d101      	bne.n	23fee <system_clock_source_get_hz+0x56>
			return 0;
   23fea:	2300      	movs	r3, #0
   23fec:	e021      	b.n	24032 <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   23fee:	4b17      	ldr	r3, [pc, #92]	; (2404c <system_clock_source_get_hz+0xb4>)
   23ff0:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   23ff2:	4b13      	ldr	r3, [pc, #76]	; (24040 <system_clock_source_get_hz+0xa8>)
   23ff4:	681b      	ldr	r3, [r3, #0]
   23ff6:	2224      	movs	r2, #36	; 0x24
   23ff8:	4013      	ands	r3, r2
   23ffa:	2b04      	cmp	r3, #4
   23ffc:	d109      	bne.n	24012 <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   23ffe:	2000      	movs	r0, #0
   24000:	4b13      	ldr	r3, [pc, #76]	; (24050 <system_clock_source_get_hz+0xb8>)
   24002:	4798      	blx	r3
   24004:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   24006:	4b0e      	ldr	r3, [pc, #56]	; (24040 <system_clock_source_get_hz+0xa8>)
   24008:	689b      	ldr	r3, [r3, #8]
   2400a:	041b      	lsls	r3, r3, #16
   2400c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2400e:	4353      	muls	r3, r2
   24010:	e00f      	b.n	24032 <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   24012:	4b10      	ldr	r3, [pc, #64]	; (24054 <system_clock_source_get_hz+0xbc>)
   24014:	e00d      	b.n	24032 <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   24016:	4a0b      	ldr	r2, [pc, #44]	; (24044 <system_clock_source_get_hz+0xac>)
   24018:	2350      	movs	r3, #80	; 0x50
   2401a:	5cd3      	ldrb	r3, [r2, r3]
   2401c:	b2db      	uxtb	r3, r3
   2401e:	001a      	movs	r2, r3
   24020:	2304      	movs	r3, #4
   24022:	4013      	ands	r3, r2
   24024:	d101      	bne.n	2402a <system_clock_source_get_hz+0x92>
			return 0;
   24026:	2300      	movs	r3, #0
   24028:	e003      	b.n	24032 <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   2402a:	4b05      	ldr	r3, [pc, #20]	; (24040 <system_clock_source_get_hz+0xa8>)
   2402c:	68db      	ldr	r3, [r3, #12]
   2402e:	e000      	b.n	24032 <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   24030:	2300      	movs	r3, #0
	}
}
   24032:	0018      	movs	r0, r3
   24034:	46bd      	mov	sp, r7
   24036:	b002      	add	sp, #8
   24038:	bd80      	pop	{r7, pc}
   2403a:	46c0      	nop			; (mov r8, r8)
   2403c:	0002ad6c 	.word	0x0002ad6c
   24040:	200004f0 	.word	0x200004f0
   24044:	40000800 	.word	0x40000800
   24048:	007a1200 	.word	0x007a1200
   2404c:	00023f39 	.word	0x00023f39
   24050:	00024bd9 	.word	0x00024bd9
   24054:	02dc6c00 	.word	0x02dc6c00

00024058 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   24058:	b580      	push	{r7, lr}
   2405a:	b084      	sub	sp, #16
   2405c:	af00      	add	r7, sp, #0
   2405e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   24060:	4b1a      	ldr	r3, [pc, #104]	; (240cc <system_clock_source_osc8m_set_config+0x74>)
   24062:	6a1b      	ldr	r3, [r3, #32]
   24064:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   24066:	687b      	ldr	r3, [r7, #4]
   24068:	781b      	ldrb	r3, [r3, #0]
   2406a:	1c1a      	adds	r2, r3, #0
   2406c:	2303      	movs	r3, #3
   2406e:	4013      	ands	r3, r2
   24070:	b2da      	uxtb	r2, r3
   24072:	230d      	movs	r3, #13
   24074:	18fb      	adds	r3, r7, r3
   24076:	2103      	movs	r1, #3
   24078:	400a      	ands	r2, r1
   2407a:	0010      	movs	r0, r2
   2407c:	781a      	ldrb	r2, [r3, #0]
   2407e:	2103      	movs	r1, #3
   24080:	438a      	bics	r2, r1
   24082:	1c11      	adds	r1, r2, #0
   24084:	1c02      	adds	r2, r0, #0
   24086:	430a      	orrs	r2, r1
   24088:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   2408a:	687b      	ldr	r3, [r7, #4]
   2408c:	789a      	ldrb	r2, [r3, #2]
   2408e:	230c      	movs	r3, #12
   24090:	18fb      	adds	r3, r7, r3
   24092:	01d0      	lsls	r0, r2, #7
   24094:	781a      	ldrb	r2, [r3, #0]
   24096:	217f      	movs	r1, #127	; 0x7f
   24098:	400a      	ands	r2, r1
   2409a:	1c11      	adds	r1, r2, #0
   2409c:	1c02      	adds	r2, r0, #0
   2409e:	430a      	orrs	r2, r1
   240a0:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   240a2:	687b      	ldr	r3, [r7, #4]
   240a4:	785a      	ldrb	r2, [r3, #1]
   240a6:	230c      	movs	r3, #12
   240a8:	18fb      	adds	r3, r7, r3
   240aa:	2101      	movs	r1, #1
   240ac:	400a      	ands	r2, r1
   240ae:	0190      	lsls	r0, r2, #6
   240b0:	781a      	ldrb	r2, [r3, #0]
   240b2:	2140      	movs	r1, #64	; 0x40
   240b4:	438a      	bics	r2, r1
   240b6:	1c11      	adds	r1, r2, #0
   240b8:	1c02      	adds	r2, r0, #0
   240ba:	430a      	orrs	r2, r1
   240bc:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   240be:	4b03      	ldr	r3, [pc, #12]	; (240cc <system_clock_source_osc8m_set_config+0x74>)
   240c0:	68fa      	ldr	r2, [r7, #12]
   240c2:	621a      	str	r2, [r3, #32]
}
   240c4:	46c0      	nop			; (mov r8, r8)
   240c6:	46bd      	mov	sp, r7
   240c8:	b004      	add	sp, #16
   240ca:	bd80      	pop	{r7, pc}
   240cc:	40000800 	.word	0x40000800

000240d0 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
   240d0:	b580      	push	{r7, lr}
   240d2:	b084      	sub	sp, #16
   240d4:	af00      	add	r7, sp, #0
   240d6:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
   240d8:	4a43      	ldr	r2, [pc, #268]	; (241e8 <system_clock_source_xosc32k_set_config+0x118>)
   240da:	230c      	movs	r3, #12
   240dc:	18fb      	adds	r3, r7, r3
   240de:	8a92      	ldrh	r2, [r2, #20]
   240e0:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
   240e2:	687b      	ldr	r3, [r7, #4]
   240e4:	785b      	ldrb	r3, [r3, #1]
   240e6:	1c1a      	adds	r2, r3, #0
   240e8:	2307      	movs	r3, #7
   240ea:	4013      	ands	r3, r2
   240ec:	b2da      	uxtb	r2, r3
   240ee:	230c      	movs	r3, #12
   240f0:	18fb      	adds	r3, r7, r3
   240f2:	2107      	movs	r1, #7
   240f4:	400a      	ands	r2, r1
   240f6:	0010      	movs	r0, r2
   240f8:	785a      	ldrb	r2, [r3, #1]
   240fa:	2107      	movs	r1, #7
   240fc:	438a      	bics	r2, r1
   240fe:	1c11      	adds	r1, r2, #0
   24100:	1c02      	adds	r2, r0, #0
   24102:	430a      	orrs	r2, r1
   24104:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
   24106:	687b      	ldr	r3, [r7, #4]
   24108:	781b      	ldrb	r3, [r3, #0]
   2410a:	2b00      	cmp	r3, #0
   2410c:	d106      	bne.n	2411c <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
   2410e:	230c      	movs	r3, #12
   24110:	18fb      	adds	r3, r7, r3
   24112:	781a      	ldrb	r2, [r3, #0]
   24114:	2104      	movs	r1, #4
   24116:	430a      	orrs	r2, r1
   24118:	701a      	strb	r2, [r3, #0]
   2411a:	e005      	b.n	24128 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
   2411c:	230c      	movs	r3, #12
   2411e:	18fb      	adds	r3, r7, r3
   24120:	781a      	ldrb	r2, [r3, #0]
   24122:	2104      	movs	r1, #4
   24124:	438a      	bics	r2, r1
   24126:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
   24128:	687b      	ldr	r3, [r7, #4]
   2412a:	789a      	ldrb	r2, [r3, #2]
   2412c:	230c      	movs	r3, #12
   2412e:	18fb      	adds	r3, r7, r3
   24130:	2101      	movs	r1, #1
   24132:	400a      	ands	r2, r1
   24134:	0150      	lsls	r0, r2, #5
   24136:	781a      	ldrb	r2, [r3, #0]
   24138:	2120      	movs	r1, #32
   2413a:	438a      	bics	r2, r1
   2413c:	1c11      	adds	r1, r2, #0
   2413e:	1c02      	adds	r2, r0, #0
   24140:	430a      	orrs	r2, r1
   24142:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
   24144:	687b      	ldr	r3, [r7, #4]
   24146:	78da      	ldrb	r2, [r3, #3]
   24148:	230c      	movs	r3, #12
   2414a:	18fb      	adds	r3, r7, r3
   2414c:	2101      	movs	r1, #1
   2414e:	400a      	ands	r2, r1
   24150:	0110      	lsls	r0, r2, #4
   24152:	781a      	ldrb	r2, [r3, #0]
   24154:	2110      	movs	r1, #16
   24156:	438a      	bics	r2, r1
   24158:	1c11      	adds	r1, r2, #0
   2415a:	1c02      	adds	r2, r0, #0
   2415c:	430a      	orrs	r2, r1
   2415e:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
   24160:	687b      	ldr	r3, [r7, #4]
   24162:	791a      	ldrb	r2, [r3, #4]
   24164:	230c      	movs	r3, #12
   24166:	18fb      	adds	r3, r7, r3
   24168:	2101      	movs	r1, #1
   2416a:	400a      	ands	r2, r1
   2416c:	00d0      	lsls	r0, r2, #3
   2416e:	781a      	ldrb	r2, [r3, #0]
   24170:	2108      	movs	r1, #8
   24172:	438a      	bics	r2, r1
   24174:	1c11      	adds	r1, r2, #0
   24176:	1c02      	adds	r2, r0, #0
   24178:	430a      	orrs	r2, r1
   2417a:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
   2417c:	687b      	ldr	r3, [r7, #4]
   2417e:	7b5a      	ldrb	r2, [r3, #13]
   24180:	230c      	movs	r3, #12
   24182:	18fb      	adds	r3, r7, r3
   24184:	01d0      	lsls	r0, r2, #7
   24186:	781a      	ldrb	r2, [r3, #0]
   24188:	217f      	movs	r1, #127	; 0x7f
   2418a:	400a      	ands	r2, r1
   2418c:	1c11      	adds	r1, r2, #0
   2418e:	1c02      	adds	r2, r0, #0
   24190:	430a      	orrs	r2, r1
   24192:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   24194:	687b      	ldr	r3, [r7, #4]
   24196:	7b1a      	ldrb	r2, [r3, #12]
   24198:	230c      	movs	r3, #12
   2419a:	18fb      	adds	r3, r7, r3
   2419c:	2101      	movs	r1, #1
   2419e:	400a      	ands	r2, r1
   241a0:	0190      	lsls	r0, r2, #6
   241a2:	781a      	ldrb	r2, [r3, #0]
   241a4:	2140      	movs	r1, #64	; 0x40
   241a6:	438a      	bics	r2, r1
   241a8:	1c11      	adds	r1, r2, #0
   241aa:	1c02      	adds	r2, r0, #0
   241ac:	430a      	orrs	r2, r1
   241ae:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
   241b0:	687b      	ldr	r3, [r7, #4]
   241b2:	7b9a      	ldrb	r2, [r3, #14]
   241b4:	230c      	movs	r3, #12
   241b6:	18fb      	adds	r3, r7, r3
   241b8:	2101      	movs	r1, #1
   241ba:	400a      	ands	r2, r1
   241bc:	0110      	lsls	r0, r2, #4
   241be:	785a      	ldrb	r2, [r3, #1]
   241c0:	2110      	movs	r1, #16
   241c2:	438a      	bics	r2, r1
   241c4:	1c11      	adds	r1, r2, #0
   241c6:	1c02      	adds	r2, r0, #0
   241c8:	430a      	orrs	r2, r1
   241ca:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
   241cc:	687b      	ldr	r3, [r7, #4]
   241ce:	689a      	ldr	r2, [r3, #8]
   241d0:	4b06      	ldr	r3, [pc, #24]	; (241ec <system_clock_source_xosc32k_set_config+0x11c>)
   241d2:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
   241d4:	4a04      	ldr	r2, [pc, #16]	; (241e8 <system_clock_source_xosc32k_set_config+0x118>)
   241d6:	230c      	movs	r3, #12
   241d8:	18fb      	adds	r3, r7, r3
   241da:	881b      	ldrh	r3, [r3, #0]
   241dc:	8293      	strh	r3, [r2, #20]
}
   241de:	46c0      	nop			; (mov r8, r8)
   241e0:	46bd      	mov	sp, r7
   241e2:	b004      	add	sp, #16
   241e4:	bd80      	pop	{r7, pc}
   241e6:	46c0      	nop			; (mov r8, r8)
   241e8:	40000800 	.word	0x40000800
   241ec:	200004f0 	.word	0x200004f0

000241f0 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
   241f0:	b580      	push	{r7, lr}
   241f2:	b082      	sub	sp, #8
   241f4:	af00      	add	r7, sp, #0
   241f6:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   241f8:	687b      	ldr	r3, [r7, #4]
   241fa:	7a1b      	ldrb	r3, [r3, #8]
   241fc:	029b      	lsls	r3, r3, #10
   241fe:	041b      	lsls	r3, r3, #16
   24200:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
   24202:	687b      	ldr	r3, [r7, #4]
   24204:	895b      	ldrh	r3, [r3, #10]
   24206:	059b      	lsls	r3, r3, #22
   24208:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   2420a:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
   2420c:	4b2a      	ldr	r3, [pc, #168]	; (242b8 <system_clock_source_dfll_set_config+0xc8>)
   2420e:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
   24210:	687b      	ldr	r3, [r7, #4]
   24212:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
   24214:	687b      	ldr	r3, [r7, #4]
   24216:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
   24218:	4313      	orrs	r3, r2
   2421a:	b2db      	uxtb	r3, r3
   2421c:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
   2421e:	687b      	ldr	r3, [r7, #4]
   24220:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
   24222:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
   24224:	687a      	ldr	r2, [r7, #4]
   24226:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
   24228:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
   2422a:	687b      	ldr	r3, [r7, #4]
   2422c:	785b      	ldrb	r3, [r3, #1]
   2422e:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
   24230:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
   24232:	4b21      	ldr	r3, [pc, #132]	; (242b8 <system_clock_source_dfll_set_config+0xc8>)
   24234:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
   24236:	687b      	ldr	r3, [r7, #4]
   24238:	781b      	ldrb	r3, [r3, #0]
   2423a:	2b04      	cmp	r3, #4
   2423c:	d116      	bne.n	2426c <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   2423e:	687b      	ldr	r3, [r7, #4]
   24240:	7b1b      	ldrb	r3, [r3, #12]
   24242:	069b      	lsls	r3, r3, #26
   24244:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   24246:	687b      	ldr	r3, [r7, #4]
   24248:	89db      	ldrh	r3, [r3, #14]
   2424a:	041b      	lsls	r3, r3, #16
   2424c:	0019      	movs	r1, r3
   2424e:	4b1b      	ldr	r3, [pc, #108]	; (242bc <system_clock_source_dfll_set_config+0xcc>)
   24250:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   24252:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   24254:	687a      	ldr	r2, [r7, #4]
   24256:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   24258:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
   2425a:	4b17      	ldr	r3, [pc, #92]	; (242b8 <system_clock_source_dfll_set_config+0xc8>)
   2425c:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
   2425e:	4b16      	ldr	r3, [pc, #88]	; (242b8 <system_clock_source_dfll_set_config+0xc8>)
   24260:	681b      	ldr	r3, [r3, #0]
   24262:	687a      	ldr	r2, [r7, #4]
   24264:	7812      	ldrb	r2, [r2, #0]
   24266:	431a      	orrs	r2, r3
   24268:	4b13      	ldr	r3, [pc, #76]	; (242b8 <system_clock_source_dfll_set_config+0xc8>)
   2426a:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
   2426c:	687b      	ldr	r3, [r7, #4]
   2426e:	781b      	ldrb	r3, [r3, #0]
   24270:	2b20      	cmp	r3, #32
   24272:	d11c      	bne.n	242ae <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   24274:	687b      	ldr	r3, [r7, #4]
   24276:	7b1b      	ldrb	r3, [r3, #12]
   24278:	069b      	lsls	r3, r3, #26
   2427a:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   2427c:	687b      	ldr	r3, [r7, #4]
   2427e:	89db      	ldrh	r3, [r3, #14]
   24280:	041b      	lsls	r3, r3, #16
   24282:	0019      	movs	r1, r3
   24284:	4b0d      	ldr	r3, [pc, #52]	; (242bc <system_clock_source_dfll_set_config+0xcc>)
   24286:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   24288:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   2428a:	687a      	ldr	r2, [r7, #4]
   2428c:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   2428e:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
   24290:	4b09      	ldr	r3, [pc, #36]	; (242b8 <system_clock_source_dfll_set_config+0xc8>)
   24292:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
   24294:	4b08      	ldr	r3, [pc, #32]	; (242b8 <system_clock_source_dfll_set_config+0xc8>)
   24296:	681b      	ldr	r3, [r3, #0]
   24298:	687a      	ldr	r2, [r7, #4]
   2429a:	7812      	ldrb	r2, [r2, #0]
   2429c:	2104      	movs	r1, #4
   2429e:	430a      	orrs	r2, r1
   242a0:	b2d2      	uxtb	r2, r2
   242a2:	4313      	orrs	r3, r2
   242a4:	2280      	movs	r2, #128	; 0x80
   242a6:	00d2      	lsls	r2, r2, #3
   242a8:	431a      	orrs	r2, r3
   242aa:	4b03      	ldr	r3, [pc, #12]	; (242b8 <system_clock_source_dfll_set_config+0xc8>)
   242ac:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
   242ae:	46c0      	nop			; (mov r8, r8)
   242b0:	46bd      	mov	sp, r7
   242b2:	b002      	add	sp, #8
   242b4:	bd80      	pop	{r7, pc}
   242b6:	46c0      	nop			; (mov r8, r8)
   242b8:	200004f0 	.word	0x200004f0
   242bc:	03ff0000 	.word	0x03ff0000

000242c0 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   242c0:	b580      	push	{r7, lr}
   242c2:	b082      	sub	sp, #8
   242c4:	af00      	add	r7, sp, #0
   242c6:	0002      	movs	r2, r0
   242c8:	1dfb      	adds	r3, r7, #7
   242ca:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   242cc:	1dfb      	adds	r3, r7, #7
   242ce:	781b      	ldrb	r3, [r3, #0]
   242d0:	2b08      	cmp	r3, #8
   242d2:	d83b      	bhi.n	2434c <system_clock_source_enable+0x8c>
   242d4:	009a      	lsls	r2, r3, #2
   242d6:	4b21      	ldr	r3, [pc, #132]	; (2435c <system_clock_source_enable+0x9c>)
   242d8:	18d3      	adds	r3, r2, r3
   242da:	681b      	ldr	r3, [r3, #0]
   242dc:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   242de:	4b20      	ldr	r3, [pc, #128]	; (24360 <system_clock_source_enable+0xa0>)
   242e0:	4a1f      	ldr	r2, [pc, #124]	; (24360 <system_clock_source_enable+0xa0>)
   242e2:	6a12      	ldr	r2, [r2, #32]
   242e4:	2102      	movs	r1, #2
   242e6:	430a      	orrs	r2, r1
   242e8:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   242ea:	2300      	movs	r3, #0
   242ec:	e031      	b.n	24352 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   242ee:	4b1c      	ldr	r3, [pc, #112]	; (24360 <system_clock_source_enable+0xa0>)
   242f0:	4a1b      	ldr	r2, [pc, #108]	; (24360 <system_clock_source_enable+0xa0>)
   242f2:	6992      	ldr	r2, [r2, #24]
   242f4:	2102      	movs	r1, #2
   242f6:	430a      	orrs	r2, r1
   242f8:	619a      	str	r2, [r3, #24]
		break;
   242fa:	e029      	b.n	24350 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   242fc:	4a18      	ldr	r2, [pc, #96]	; (24360 <system_clock_source_enable+0xa0>)
   242fe:	4b18      	ldr	r3, [pc, #96]	; (24360 <system_clock_source_enable+0xa0>)
   24300:	8a1b      	ldrh	r3, [r3, #16]
   24302:	b29b      	uxth	r3, r3
   24304:	2102      	movs	r1, #2
   24306:	430b      	orrs	r3, r1
   24308:	b29b      	uxth	r3, r3
   2430a:	8213      	strh	r3, [r2, #16]
		break;
   2430c:	e020      	b.n	24350 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   2430e:	4a14      	ldr	r2, [pc, #80]	; (24360 <system_clock_source_enable+0xa0>)
   24310:	4b13      	ldr	r3, [pc, #76]	; (24360 <system_clock_source_enable+0xa0>)
   24312:	8a9b      	ldrh	r3, [r3, #20]
   24314:	b29b      	uxth	r3, r3
   24316:	2102      	movs	r1, #2
   24318:	430b      	orrs	r3, r1
   2431a:	b29b      	uxth	r3, r3
   2431c:	8293      	strh	r3, [r2, #20]
		break;
   2431e:	e017      	b.n	24350 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   24320:	4b10      	ldr	r3, [pc, #64]	; (24364 <system_clock_source_enable+0xa4>)
   24322:	681b      	ldr	r3, [r3, #0]
   24324:	2202      	movs	r2, #2
   24326:	431a      	orrs	r2, r3
   24328:	4b0e      	ldr	r3, [pc, #56]	; (24364 <system_clock_source_enable+0xa4>)
   2432a:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   2432c:	4b0e      	ldr	r3, [pc, #56]	; (24368 <system_clock_source_enable+0xa8>)
   2432e:	4798      	blx	r3
		break;
   24330:	e00e      	b.n	24350 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   24332:	4a0b      	ldr	r2, [pc, #44]	; (24360 <system_clock_source_enable+0xa0>)
   24334:	490a      	ldr	r1, [pc, #40]	; (24360 <system_clock_source_enable+0xa0>)
   24336:	2344      	movs	r3, #68	; 0x44
   24338:	5ccb      	ldrb	r3, [r1, r3]
   2433a:	b2db      	uxtb	r3, r3
   2433c:	2102      	movs	r1, #2
   2433e:	430b      	orrs	r3, r1
   24340:	b2d9      	uxtb	r1, r3
   24342:	2344      	movs	r3, #68	; 0x44
   24344:	54d1      	strb	r1, [r2, r3]
		break;
   24346:	e003      	b.n	24350 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   24348:	2300      	movs	r3, #0
   2434a:	e002      	b.n	24352 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   2434c:	2317      	movs	r3, #23
   2434e:	e000      	b.n	24352 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   24350:	2300      	movs	r3, #0
}
   24352:	0018      	movs	r0, r3
   24354:	46bd      	mov	sp, r7
   24356:	b002      	add	sp, #8
   24358:	bd80      	pop	{r7, pc}
   2435a:	46c0      	nop			; (mov r8, r8)
   2435c:	0002ad90 	.word	0x0002ad90
   24360:	40000800 	.word	0x40000800
   24364:	200004f0 	.word	0x200004f0
   24368:	00023f55 	.word	0x00023f55

0002436c <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   2436c:	b580      	push	{r7, lr}
   2436e:	b084      	sub	sp, #16
   24370:	af00      	add	r7, sp, #0
   24372:	0002      	movs	r2, r0
   24374:	1dfb      	adds	r3, r7, #7
   24376:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   24378:	2300      	movs	r3, #0
   2437a:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   2437c:	1dfb      	adds	r3, r7, #7
   2437e:	781b      	ldrb	r3, [r3, #0]
   24380:	2b08      	cmp	r3, #8
   24382:	d821      	bhi.n	243c8 <system_clock_source_is_ready+0x5c>
   24384:	009a      	lsls	r2, r3, #2
   24386:	4b18      	ldr	r3, [pc, #96]	; (243e8 <system_clock_source_is_ready+0x7c>)
   24388:	18d3      	adds	r3, r2, r3
   2438a:	681b      	ldr	r3, [r3, #0]
   2438c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   2438e:	2308      	movs	r3, #8
   24390:	60fb      	str	r3, [r7, #12]
		break;
   24392:	e01b      	b.n	243cc <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   24394:	2304      	movs	r3, #4
   24396:	60fb      	str	r3, [r7, #12]
		break;
   24398:	e018      	b.n	243cc <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   2439a:	2301      	movs	r3, #1
   2439c:	60fb      	str	r3, [r7, #12]
		break;
   2439e:	e015      	b.n	243cc <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   243a0:	2302      	movs	r3, #2
   243a2:	60fb      	str	r3, [r7, #12]
		break;
   243a4:	e012      	b.n	243cc <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
   243a6:	23d0      	movs	r3, #208	; 0xd0
   243a8:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
   243aa:	e00f      	b.n	243cc <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   243ac:	4a0f      	ldr	r2, [pc, #60]	; (243ec <system_clock_source_is_ready+0x80>)
   243ae:	2350      	movs	r3, #80	; 0x50
   243b0:	5cd3      	ldrb	r3, [r2, r3]
   243b2:	b2db      	uxtb	r3, r3
   243b4:	001a      	movs	r2, r3
   243b6:	2303      	movs	r3, #3
   243b8:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   243ba:	3b03      	subs	r3, #3
   243bc:	425a      	negs	r2, r3
   243be:	4153      	adcs	r3, r2
   243c0:	b2db      	uxtb	r3, r3
   243c2:	e00c      	b.n	243de <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   243c4:	2301      	movs	r3, #1
   243c6:	e00a      	b.n	243de <system_clock_source_is_ready+0x72>

	default:
		return false;
   243c8:	2300      	movs	r3, #0
   243ca:	e008      	b.n	243de <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   243cc:	4b07      	ldr	r3, [pc, #28]	; (243ec <system_clock_source_is_ready+0x80>)
   243ce:	68db      	ldr	r3, [r3, #12]
   243d0:	68fa      	ldr	r2, [r7, #12]
   243d2:	401a      	ands	r2, r3
   243d4:	68fb      	ldr	r3, [r7, #12]
   243d6:	1ad3      	subs	r3, r2, r3
   243d8:	425a      	negs	r2, r3
   243da:	4153      	adcs	r3, r2
   243dc:	b2db      	uxtb	r3, r3
}
   243de:	0018      	movs	r0, r3
   243e0:	46bd      	mov	sp, r7
   243e2:	b004      	add	sp, #16
   243e4:	bd80      	pop	{r7, pc}
   243e6:	46c0      	nop			; (mov r8, r8)
   243e8:	0002adb4 	.word	0x0002adb4
   243ec:	40000800 	.word	0x40000800

000243f0 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   243f0:	b580      	push	{r7, lr}
   243f2:	b082      	sub	sp, #8
   243f4:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
   243f6:	003b      	movs	r3, r7
   243f8:	2202      	movs	r2, #2
   243fa:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   243fc:	2300      	movs	r3, #0
   243fe:	607b      	str	r3, [r7, #4]
   24400:	e009      	b.n	24416 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   24402:	687b      	ldr	r3, [r7, #4]
   24404:	b2db      	uxtb	r3, r3
   24406:	003a      	movs	r2, r7
   24408:	0011      	movs	r1, r2
   2440a:	0018      	movs	r0, r3
   2440c:	4b05      	ldr	r3, [pc, #20]	; (24424 <_switch_peripheral_gclk+0x34>)
   2440e:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   24410:	687b      	ldr	r3, [r7, #4]
   24412:	3301      	adds	r3, #1
   24414:	607b      	str	r3, [r7, #4]
   24416:	687b      	ldr	r3, [r7, #4]
   24418:	2b24      	cmp	r3, #36	; 0x24
   2441a:	d9f2      	bls.n	24402 <_switch_peripheral_gclk+0x12>
	}
}
   2441c:	46c0      	nop			; (mov r8, r8)
   2441e:	46bd      	mov	sp, r7
   24420:	b002      	add	sp, #8
   24422:	bd80      	pop	{r7, pc}
   24424:	00024ab5 	.word	0x00024ab5

00024428 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   24428:	b580      	push	{r7, lr}
   2442a:	b0aa      	sub	sp, #168	; 0xa8
   2442c:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   2442e:	4bc1      	ldr	r3, [pc, #772]	; (24734 <system_clock_init+0x30c>)
   24430:	22c2      	movs	r2, #194	; 0xc2
   24432:	00d2      	lsls	r2, r2, #3
   24434:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   24436:	2002      	movs	r0, #2
   24438:	4bbf      	ldr	r3, [pc, #764]	; (24738 <system_clock_init+0x310>)
   2443a:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   2443c:	4bbf      	ldr	r3, [pc, #764]	; (2473c <system_clock_init+0x314>)
   2443e:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
   24440:	2394      	movs	r3, #148	; 0x94
   24442:	18fb      	adds	r3, r7, r3
   24444:	0018      	movs	r0, r3
   24446:	4bbe      	ldr	r3, [pc, #760]	; (24740 <system_clock_init+0x318>)
   24448:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
   2444a:	2394      	movs	r3, #148	; 0x94
   2444c:	18fb      	adds	r3, r7, r3
   2444e:	2280      	movs	r2, #128	; 0x80
   24450:	0212      	lsls	r2, r2, #8
   24452:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
   24454:	2394      	movs	r3, #148	; 0x94
   24456:	18fb      	adds	r3, r7, r3
   24458:	2200      	movs	r2, #0
   2445a:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
   2445c:	2394      	movs	r3, #148	; 0x94
   2445e:	18fb      	adds	r3, r7, r3
   24460:	2206      	movs	r2, #6
   24462:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
   24464:	2394      	movs	r3, #148	; 0x94
   24466:	18fb      	adds	r3, r7, r3
   24468:	2200      	movs	r2, #0
   2446a:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
   2446c:	2394      	movs	r3, #148	; 0x94
   2446e:	18fb      	adds	r3, r7, r3
   24470:	2200      	movs	r2, #0
   24472:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
   24474:	2394      	movs	r3, #148	; 0x94
   24476:	18fb      	adds	r3, r7, r3
   24478:	2201      	movs	r2, #1
   2447a:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
   2447c:	2394      	movs	r3, #148	; 0x94
   2447e:	18fb      	adds	r3, r7, r3
   24480:	2200      	movs	r2, #0
   24482:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
   24484:	2394      	movs	r3, #148	; 0x94
   24486:	18fb      	adds	r3, r7, r3
   24488:	2201      	movs	r2, #1
   2448a:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
   2448c:	2394      	movs	r3, #148	; 0x94
   2448e:	18fb      	adds	r3, r7, r3
   24490:	0018      	movs	r0, r3
   24492:	4bac      	ldr	r3, [pc, #688]	; (24744 <system_clock_init+0x31c>)
   24494:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
   24496:	2005      	movs	r0, #5
   24498:	4bab      	ldr	r3, [pc, #684]	; (24748 <system_clock_init+0x320>)
   2449a:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
   2449c:	46c0      	nop			; (mov r8, r8)
   2449e:	2005      	movs	r0, #5
   244a0:	4baa      	ldr	r3, [pc, #680]	; (2474c <system_clock_init+0x324>)
   244a2:	4798      	blx	r3
   244a4:	0003      	movs	r3, r0
   244a6:	001a      	movs	r2, r3
   244a8:	2301      	movs	r3, #1
   244aa:	4053      	eors	r3, r2
   244ac:	b2db      	uxtb	r3, r3
   244ae:	2b00      	cmp	r3, #0
   244b0:	d1f5      	bne.n	2449e <system_clock_init+0x76>


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
   244b2:	2380      	movs	r3, #128	; 0x80
   244b4:	18fb      	adds	r3, r7, r3
   244b6:	0018      	movs	r0, r3
   244b8:	4ba5      	ldr	r3, [pc, #660]	; (24750 <system_clock_init+0x328>)
   244ba:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
   244bc:	2380      	movs	r3, #128	; 0x80
   244be:	18fb      	adds	r3, r7, r3
   244c0:	2204      	movs	r2, #4
   244c2:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
   244c4:	2380      	movs	r3, #128	; 0x80
   244c6:	18fb      	adds	r3, r7, r3
   244c8:	2200      	movs	r2, #0
   244ca:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
   244cc:	4ba1      	ldr	r3, [pc, #644]	; (24754 <system_clock_init+0x32c>)
   244ce:	681b      	ldr	r3, [r3, #0]
   244d0:	0e9b      	lsrs	r3, r3, #26
   244d2:	22a4      	movs	r2, #164	; 0xa4
   244d4:	18ba      	adds	r2, r7, r2
   244d6:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
   244d8:	23a4      	movs	r3, #164	; 0xa4
   244da:	18fb      	adds	r3, r7, r3
   244dc:	681b      	ldr	r3, [r3, #0]
   244de:	2b3f      	cmp	r3, #63	; 0x3f
   244e0:	d103      	bne.n	244ea <system_clock_init+0xc2>
		coarse = 0x1f;
   244e2:	231f      	movs	r3, #31
   244e4:	22a4      	movs	r2, #164	; 0xa4
   244e6:	18ba      	adds	r2, r7, r2
   244e8:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
   244ea:	23a4      	movs	r3, #164	; 0xa4
   244ec:	18fb      	adds	r3, r7, r3
   244ee:	681b      	ldr	r3, [r3, #0]
   244f0:	b2da      	uxtb	r2, r3
   244f2:	2380      	movs	r3, #128	; 0x80
   244f4:	18fb      	adds	r3, r7, r3
   244f6:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   244f8:	2380      	movs	r3, #128	; 0x80
   244fa:	18fb      	adds	r3, r7, r3
   244fc:	2200      	movs	r2, #0
   244fe:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   24500:	2380      	movs	r3, #128	; 0x80
   24502:	18fb      	adds	r3, r7, r3
   24504:	2200      	movs	r2, #0
   24506:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   24508:	2380      	movs	r3, #128	; 0x80
   2450a:	18fb      	adds	r3, r7, r3
   2450c:	2200      	movs	r2, #0
   2450e:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   24510:	2380      	movs	r3, #128	; 0x80
   24512:	18fb      	adds	r3, r7, r3
   24514:	2200      	movs	r2, #0
   24516:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
   24518:	2380      	movs	r3, #128	; 0x80
   2451a:	18fb      	adds	r3, r7, r3
   2451c:	22b7      	movs	r2, #183	; 0xb7
   2451e:	00d2      	lsls	r2, r2, #3
   24520:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
   24522:	2380      	movs	r3, #128	; 0x80
   24524:	18fb      	adds	r3, r7, r3
   24526:	2203      	movs	r2, #3
   24528:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
   2452a:	2380      	movs	r3, #128	; 0x80
   2452c:	18fb      	adds	r3, r7, r3
   2452e:	221f      	movs	r2, #31
   24530:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
   24532:	2380      	movs	r3, #128	; 0x80
   24534:	18fb      	adds	r3, r7, r3
   24536:	0018      	movs	r0, r3
   24538:	4b87      	ldr	r3, [pc, #540]	; (24758 <system_clock_init+0x330>)
   2453a:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   2453c:	237c      	movs	r3, #124	; 0x7c
   2453e:	18fb      	adds	r3, r7, r3
   24540:	0018      	movs	r0, r3
   24542:	4b86      	ldr	r3, [pc, #536]	; (2475c <system_clock_init+0x334>)
   24544:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   24546:	237c      	movs	r3, #124	; 0x7c
   24548:	18fb      	adds	r3, r7, r3
   2454a:	2200      	movs	r2, #0
   2454c:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   2454e:	237c      	movs	r3, #124	; 0x7c
   24550:	18fb      	adds	r3, r7, r3
   24552:	2201      	movs	r2, #1
   24554:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   24556:	237c      	movs	r3, #124	; 0x7c
   24558:	18fb      	adds	r3, r7, r3
   2455a:	2201      	movs	r2, #1
   2455c:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   2455e:	237c      	movs	r3, #124	; 0x7c
   24560:	18fb      	adds	r3, r7, r3
   24562:	0018      	movs	r0, r3
   24564:	4b7e      	ldr	r3, [pc, #504]	; (24760 <system_clock_init+0x338>)
   24566:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   24568:	2006      	movs	r0, #6
   2456a:	4b77      	ldr	r3, [pc, #476]	; (24748 <system_clock_init+0x320>)
   2456c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   2456e:	4b7d      	ldr	r3, [pc, #500]	; (24764 <system_clock_init+0x33c>)
   24570:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   24572:	2364      	movs	r3, #100	; 0x64
   24574:	18fb      	adds	r3, r7, r3
   24576:	0018      	movs	r0, r3
   24578:	4b7b      	ldr	r3, [pc, #492]	; (24768 <system_clock_init+0x340>)
   2457a:	4798      	blx	r3
   2457c:	2364      	movs	r3, #100	; 0x64
   2457e:	18fb      	adds	r3, r7, r3
   24580:	2205      	movs	r2, #5
   24582:	701a      	strb	r2, [r3, #0]
   24584:	2364      	movs	r3, #100	; 0x64
   24586:	18fb      	adds	r3, r7, r3
   24588:	2201      	movs	r2, #1
   2458a:	605a      	str	r2, [r3, #4]
   2458c:	2364      	movs	r3, #100	; 0x64
   2458e:	18fb      	adds	r3, r7, r3
   24590:	2200      	movs	r2, #0
   24592:	721a      	strb	r2, [r3, #8]
   24594:	2364      	movs	r3, #100	; 0x64
   24596:	18fb      	adds	r3, r7, r3
   24598:	2200      	movs	r2, #0
   2459a:	725a      	strb	r2, [r3, #9]
   2459c:	2364      	movs	r3, #100	; 0x64
   2459e:	18fb      	adds	r3, r7, r3
   245a0:	0019      	movs	r1, r3
   245a2:	2001      	movs	r0, #1
   245a4:	4b71      	ldr	r3, [pc, #452]	; (2476c <system_clock_init+0x344>)
   245a6:	4798      	blx	r3
   245a8:	2001      	movs	r0, #1
   245aa:	4b71      	ldr	r3, [pc, #452]	; (24770 <system_clock_init+0x348>)
   245ac:	4798      	blx	r3
   245ae:	234c      	movs	r3, #76	; 0x4c
   245b0:	18fb      	adds	r3, r7, r3
   245b2:	0018      	movs	r0, r3
   245b4:	4b6c      	ldr	r3, [pc, #432]	; (24768 <system_clock_init+0x340>)
   245b6:	4798      	blx	r3
   245b8:	234c      	movs	r3, #76	; 0x4c
   245ba:	18fb      	adds	r3, r7, r3
   245bc:	2206      	movs	r2, #6
   245be:	701a      	strb	r2, [r3, #0]
   245c0:	234c      	movs	r3, #76	; 0x4c
   245c2:	18fb      	adds	r3, r7, r3
   245c4:	2201      	movs	r2, #1
   245c6:	605a      	str	r2, [r3, #4]
   245c8:	234c      	movs	r3, #76	; 0x4c
   245ca:	18fb      	adds	r3, r7, r3
   245cc:	2201      	movs	r2, #1
   245ce:	721a      	strb	r2, [r3, #8]
   245d0:	234c      	movs	r3, #76	; 0x4c
   245d2:	18fb      	adds	r3, r7, r3
   245d4:	2200      	movs	r2, #0
   245d6:	725a      	strb	r2, [r3, #9]
   245d8:	234c      	movs	r3, #76	; 0x4c
   245da:	18fb      	adds	r3, r7, r3
   245dc:	0019      	movs	r1, r3
   245de:	2003      	movs	r0, #3
   245e0:	4b62      	ldr	r3, [pc, #392]	; (2476c <system_clock_init+0x344>)
   245e2:	4798      	blx	r3
   245e4:	2003      	movs	r0, #3
   245e6:	4b62      	ldr	r3, [pc, #392]	; (24770 <system_clock_init+0x348>)
   245e8:	4798      	blx	r3
   245ea:	2340      	movs	r3, #64	; 0x40
   245ec:	18fb      	adds	r3, r7, r3
   245ee:	0018      	movs	r0, r3
   245f0:	4b5d      	ldr	r3, [pc, #372]	; (24768 <system_clock_init+0x340>)
   245f2:	4798      	blx	r3
   245f4:	2340      	movs	r3, #64	; 0x40
   245f6:	18fb      	adds	r3, r7, r3
   245f8:	2203      	movs	r2, #3
   245fa:	701a      	strb	r2, [r3, #0]
   245fc:	2340      	movs	r3, #64	; 0x40
   245fe:	18fb      	adds	r3, r7, r3
   24600:	2220      	movs	r2, #32
   24602:	605a      	str	r2, [r3, #4]
   24604:	2340      	movs	r3, #64	; 0x40
   24606:	18fb      	adds	r3, r7, r3
   24608:	2200      	movs	r2, #0
   2460a:	721a      	strb	r2, [r3, #8]
   2460c:	2340      	movs	r3, #64	; 0x40
   2460e:	18fb      	adds	r3, r7, r3
   24610:	2200      	movs	r2, #0
   24612:	725a      	strb	r2, [r3, #9]
   24614:	2340      	movs	r3, #64	; 0x40
   24616:	18fb      	adds	r3, r7, r3
   24618:	0019      	movs	r1, r3
   2461a:	2004      	movs	r0, #4
   2461c:	4b53      	ldr	r3, [pc, #332]	; (2476c <system_clock_init+0x344>)
   2461e:	4798      	blx	r3
   24620:	2004      	movs	r0, #4
   24622:	4b53      	ldr	r3, [pc, #332]	; (24770 <system_clock_init+0x348>)
   24624:	4798      	blx	r3
   24626:	2334      	movs	r3, #52	; 0x34
   24628:	18fb      	adds	r3, r7, r3
   2462a:	0018      	movs	r0, r3
   2462c:	4b4e      	ldr	r3, [pc, #312]	; (24768 <system_clock_init+0x340>)
   2462e:	4798      	blx	r3
   24630:	2334      	movs	r3, #52	; 0x34
   24632:	18fb      	adds	r3, r7, r3
   24634:	2207      	movs	r2, #7
   24636:	701a      	strb	r2, [r3, #0]
   24638:	2334      	movs	r3, #52	; 0x34
   2463a:	18fb      	adds	r3, r7, r3
   2463c:	2201      	movs	r2, #1
   2463e:	605a      	str	r2, [r3, #4]
   24640:	2334      	movs	r3, #52	; 0x34
   24642:	18fb      	adds	r3, r7, r3
   24644:	2200      	movs	r2, #0
   24646:	721a      	strb	r2, [r3, #8]
   24648:	2334      	movs	r3, #52	; 0x34
   2464a:	18fb      	adds	r3, r7, r3
   2464c:	2200      	movs	r2, #0
   2464e:	725a      	strb	r2, [r3, #9]
   24650:	2334      	movs	r3, #52	; 0x34
   24652:	18fb      	adds	r3, r7, r3
   24654:	0019      	movs	r1, r3
   24656:	2005      	movs	r0, #5
   24658:	4b44      	ldr	r3, [pc, #272]	; (2476c <system_clock_init+0x344>)
   2465a:	4798      	blx	r3
   2465c:	2005      	movs	r0, #5
   2465e:	4b44      	ldr	r3, [pc, #272]	; (24770 <system_clock_init+0x348>)
   24660:	4798      	blx	r3
   24662:	2328      	movs	r3, #40	; 0x28
   24664:	18fb      	adds	r3, r7, r3
   24666:	0018      	movs	r0, r3
   24668:	4b3f      	ldr	r3, [pc, #252]	; (24768 <system_clock_init+0x340>)
   2466a:	4798      	blx	r3
   2466c:	2328      	movs	r3, #40	; 0x28
   2466e:	18fb      	adds	r3, r7, r3
   24670:	2206      	movs	r2, #6
   24672:	701a      	strb	r2, [r3, #0]
   24674:	2328      	movs	r3, #40	; 0x28
   24676:	18fb      	adds	r3, r7, r3
   24678:	2201      	movs	r2, #1
   2467a:	605a      	str	r2, [r3, #4]
   2467c:	2328      	movs	r3, #40	; 0x28
   2467e:	18fb      	adds	r3, r7, r3
   24680:	2201      	movs	r2, #1
   24682:	721a      	strb	r2, [r3, #8]
   24684:	2328      	movs	r3, #40	; 0x28
   24686:	18fb      	adds	r3, r7, r3
   24688:	2200      	movs	r2, #0
   2468a:	725a      	strb	r2, [r3, #9]
   2468c:	2328      	movs	r3, #40	; 0x28
   2468e:	18fb      	adds	r3, r7, r3
   24690:	0019      	movs	r1, r3
   24692:	2006      	movs	r0, #6
   24694:	4b35      	ldr	r3, [pc, #212]	; (2476c <system_clock_init+0x344>)
   24696:	4798      	blx	r3
   24698:	2006      	movs	r0, #6
   2469a:	4b35      	ldr	r3, [pc, #212]	; (24770 <system_clock_init+0x348>)
   2469c:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
   2469e:	230c      	movs	r3, #12
   246a0:	18fb      	adds	r3, r7, r3
   246a2:	0018      	movs	r0, r3
   246a4:	4b33      	ldr	r3, [pc, #204]	; (24774 <system_clock_init+0x34c>)
   246a6:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
   246a8:	230c      	movs	r3, #12
   246aa:	18fb      	adds	r3, r7, r3
   246ac:	2201      	movs	r2, #1
   246ae:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
   246b0:	230c      	movs	r3, #12
   246b2:	18fb      	adds	r3, r7, r3
   246b4:	0019      	movs	r1, r3
   246b6:	2000      	movs	r0, #0
   246b8:	4b2f      	ldr	r3, [pc, #188]	; (24778 <system_clock_init+0x350>)
   246ba:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
   246bc:	2000      	movs	r0, #0
   246be:	4b2f      	ldr	r3, [pc, #188]	; (2477c <system_clock_init+0x354>)
   246c0:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
   246c2:	2007      	movs	r0, #7
   246c4:	4b20      	ldr	r3, [pc, #128]	; (24748 <system_clock_init+0x320>)
   246c6:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
   246c8:	46c0      	nop			; (mov r8, r8)
   246ca:	2007      	movs	r0, #7
   246cc:	4b1f      	ldr	r3, [pc, #124]	; (2474c <system_clock_init+0x324>)
   246ce:	4798      	blx	r3
   246d0:	0003      	movs	r3, r0
   246d2:	001a      	movs	r2, r3
   246d4:	2301      	movs	r3, #1
   246d6:	4053      	eors	r3, r2
   246d8:	b2db      	uxtb	r3, r3
   246da:	2b00      	cmp	r3, #0
   246dc:	d1f5      	bne.n	246ca <system_clock_init+0x2a2>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   246de:	2000      	movs	r0, #0
   246e0:	4b27      	ldr	r3, [pc, #156]	; (24780 <system_clock_init+0x358>)
   246e2:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   246e4:	2100      	movs	r1, #0
   246e6:	2000      	movs	r0, #0
   246e8:	4b26      	ldr	r3, [pc, #152]	; (24784 <system_clock_init+0x35c>)
   246ea:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   246ec:	2100      	movs	r1, #0
   246ee:	2001      	movs	r0, #1
   246f0:	4b24      	ldr	r3, [pc, #144]	; (24784 <system_clock_init+0x35c>)
   246f2:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   246f4:	2100      	movs	r1, #0
   246f6:	2002      	movs	r0, #2
   246f8:	4b22      	ldr	r3, [pc, #136]	; (24784 <system_clock_init+0x35c>)
   246fa:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   246fc:	003b      	movs	r3, r7
   246fe:	0018      	movs	r0, r3
   24700:	4b19      	ldr	r3, [pc, #100]	; (24768 <system_clock_init+0x340>)
   24702:	4798      	blx	r3
   24704:	003b      	movs	r3, r7
   24706:	2207      	movs	r2, #7
   24708:	701a      	strb	r2, [r3, #0]
   2470a:	003b      	movs	r3, r7
   2470c:	2201      	movs	r2, #1
   2470e:	605a      	str	r2, [r3, #4]
   24710:	003b      	movs	r3, r7
   24712:	2200      	movs	r2, #0
   24714:	721a      	strb	r2, [r3, #8]
   24716:	003b      	movs	r3, r7
   24718:	2200      	movs	r2, #0
   2471a:	725a      	strb	r2, [r3, #9]
   2471c:	003b      	movs	r3, r7
   2471e:	0019      	movs	r1, r3
   24720:	2000      	movs	r0, #0
   24722:	4b12      	ldr	r3, [pc, #72]	; (2476c <system_clock_init+0x344>)
   24724:	4798      	blx	r3
   24726:	2000      	movs	r0, #0
   24728:	4b11      	ldr	r3, [pc, #68]	; (24770 <system_clock_init+0x348>)
   2472a:	4798      	blx	r3
#endif
}
   2472c:	46c0      	nop			; (mov r8, r8)
   2472e:	46bd      	mov	sp, r7
   24730:	b02a      	add	sp, #168	; 0xa8
   24732:	bd80      	pop	{r7, pc}
   24734:	40000800 	.word	0x40000800
   24738:	00023f05 	.word	0x00023f05
   2473c:	000243f1 	.word	0x000243f1
   24740:	00023dd5 	.word	0x00023dd5
   24744:	000240d1 	.word	0x000240d1
   24748:	000242c1 	.word	0x000242c1
   2474c:	0002436d 	.word	0x0002436d
   24750:	00023e3f 	.word	0x00023e3f
   24754:	00806024 	.word	0x00806024
   24758:	000241f1 	.word	0x000241f1
   2475c:	00023e1d 	.word	0x00023e1d
   24760:	00024059 	.word	0x00024059
   24764:	0002482d 	.word	0x0002482d
   24768:	00023d91 	.word	0x00023d91
   2476c:	0002485d 	.word	0x0002485d
   24770:	00024981 	.word	0x00024981
   24774:	00023dbf 	.word	0x00023dbf
   24778:	00024ab5 	.word	0x00024ab5
   2477c:	00024af9 	.word	0x00024af9
   24780:	00023e91 	.word	0x00023e91
   24784:	00023eb1 	.word	0x00023eb1

00024788 <system_apb_clock_set_mask>:
{
   24788:	b580      	push	{r7, lr}
   2478a:	b082      	sub	sp, #8
   2478c:	af00      	add	r7, sp, #0
   2478e:	0002      	movs	r2, r0
   24790:	6039      	str	r1, [r7, #0]
   24792:	1dfb      	adds	r3, r7, #7
   24794:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   24796:	1dfb      	adds	r3, r7, #7
   24798:	781b      	ldrb	r3, [r3, #0]
   2479a:	2b01      	cmp	r3, #1
   2479c:	d00a      	beq.n	247b4 <system_apb_clock_set_mask+0x2c>
   2479e:	2b02      	cmp	r3, #2
   247a0:	d00f      	beq.n	247c2 <system_apb_clock_set_mask+0x3a>
   247a2:	2b00      	cmp	r3, #0
   247a4:	d114      	bne.n	247d0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   247a6:	4b0e      	ldr	r3, [pc, #56]	; (247e0 <system_apb_clock_set_mask+0x58>)
   247a8:	4a0d      	ldr	r2, [pc, #52]	; (247e0 <system_apb_clock_set_mask+0x58>)
   247aa:	6991      	ldr	r1, [r2, #24]
   247ac:	683a      	ldr	r2, [r7, #0]
   247ae:	430a      	orrs	r2, r1
   247b0:	619a      	str	r2, [r3, #24]
			break;
   247b2:	e00f      	b.n	247d4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   247b4:	4b0a      	ldr	r3, [pc, #40]	; (247e0 <system_apb_clock_set_mask+0x58>)
   247b6:	4a0a      	ldr	r2, [pc, #40]	; (247e0 <system_apb_clock_set_mask+0x58>)
   247b8:	69d1      	ldr	r1, [r2, #28]
   247ba:	683a      	ldr	r2, [r7, #0]
   247bc:	430a      	orrs	r2, r1
   247be:	61da      	str	r2, [r3, #28]
			break;
   247c0:	e008      	b.n	247d4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   247c2:	4b07      	ldr	r3, [pc, #28]	; (247e0 <system_apb_clock_set_mask+0x58>)
   247c4:	4a06      	ldr	r2, [pc, #24]	; (247e0 <system_apb_clock_set_mask+0x58>)
   247c6:	6a11      	ldr	r1, [r2, #32]
   247c8:	683a      	ldr	r2, [r7, #0]
   247ca:	430a      	orrs	r2, r1
   247cc:	621a      	str	r2, [r3, #32]
			break;
   247ce:	e001      	b.n	247d4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   247d0:	2317      	movs	r3, #23
   247d2:	e000      	b.n	247d6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   247d4:	2300      	movs	r3, #0
}
   247d6:	0018      	movs	r0, r3
   247d8:	46bd      	mov	sp, r7
   247da:	b002      	add	sp, #8
   247dc:	bd80      	pop	{r7, pc}
   247de:	46c0      	nop			; (mov r8, r8)
   247e0:	40000400 	.word	0x40000400

000247e4 <system_interrupt_enter_critical_section>:
{
   247e4:	b580      	push	{r7, lr}
   247e6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   247e8:	4b02      	ldr	r3, [pc, #8]	; (247f4 <system_interrupt_enter_critical_section+0x10>)
   247ea:	4798      	blx	r3
}
   247ec:	46c0      	nop			; (mov r8, r8)
   247ee:	46bd      	mov	sp, r7
   247f0:	bd80      	pop	{r7, pc}
   247f2:	46c0      	nop			; (mov r8, r8)
   247f4:	00023cfd 	.word	0x00023cfd

000247f8 <system_interrupt_leave_critical_section>:
{
   247f8:	b580      	push	{r7, lr}
   247fa:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   247fc:	4b02      	ldr	r3, [pc, #8]	; (24808 <system_interrupt_leave_critical_section+0x10>)
   247fe:	4798      	blx	r3
}
   24800:	46c0      	nop			; (mov r8, r8)
   24802:	46bd      	mov	sp, r7
   24804:	bd80      	pop	{r7, pc}
   24806:	46c0      	nop			; (mov r8, r8)
   24808:	00023d51 	.word	0x00023d51

0002480c <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   2480c:	b580      	push	{r7, lr}
   2480e:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   24810:	4b05      	ldr	r3, [pc, #20]	; (24828 <system_gclk_is_syncing+0x1c>)
   24812:	785b      	ldrb	r3, [r3, #1]
   24814:	b2db      	uxtb	r3, r3
   24816:	b25b      	sxtb	r3, r3
   24818:	2b00      	cmp	r3, #0
   2481a:	da01      	bge.n	24820 <system_gclk_is_syncing+0x14>
		return true;
   2481c:	2301      	movs	r3, #1
   2481e:	e000      	b.n	24822 <system_gclk_is_syncing+0x16>
	}

	return false;
   24820:	2300      	movs	r3, #0
}
   24822:	0018      	movs	r0, r3
   24824:	46bd      	mov	sp, r7
   24826:	bd80      	pop	{r7, pc}
   24828:	40000c00 	.word	0x40000c00

0002482c <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   2482c:	b580      	push	{r7, lr}
   2482e:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   24830:	2108      	movs	r1, #8
   24832:	2000      	movs	r0, #0
   24834:	4b07      	ldr	r3, [pc, #28]	; (24854 <system_gclk_init+0x28>)
   24836:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   24838:	4b07      	ldr	r3, [pc, #28]	; (24858 <system_gclk_init+0x2c>)
   2483a:	2201      	movs	r2, #1
   2483c:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   2483e:	46c0      	nop			; (mov r8, r8)
   24840:	4b05      	ldr	r3, [pc, #20]	; (24858 <system_gclk_init+0x2c>)
   24842:	781b      	ldrb	r3, [r3, #0]
   24844:	b2db      	uxtb	r3, r3
   24846:	001a      	movs	r2, r3
   24848:	2301      	movs	r3, #1
   2484a:	4013      	ands	r3, r2
   2484c:	d1f8      	bne.n	24840 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   2484e:	46c0      	nop			; (mov r8, r8)
   24850:	46bd      	mov	sp, r7
   24852:	bd80      	pop	{r7, pc}
   24854:	00024789 	.word	0x00024789
   24858:	40000c00 	.word	0x40000c00

0002485c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   2485c:	b580      	push	{r7, lr}
   2485e:	b086      	sub	sp, #24
   24860:	af00      	add	r7, sp, #0
   24862:	0002      	movs	r2, r0
   24864:	6039      	str	r1, [r7, #0]
   24866:	1dfb      	adds	r3, r7, #7
   24868:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   2486a:	1dfb      	adds	r3, r7, #7
   2486c:	781b      	ldrb	r3, [r3, #0]
   2486e:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   24870:	1dfb      	adds	r3, r7, #7
   24872:	781b      	ldrb	r3, [r3, #0]
   24874:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   24876:	683b      	ldr	r3, [r7, #0]
   24878:	781b      	ldrb	r3, [r3, #0]
   2487a:	021b      	lsls	r3, r3, #8
   2487c:	001a      	movs	r2, r3
   2487e:	697b      	ldr	r3, [r7, #20]
   24880:	4313      	orrs	r3, r2
   24882:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   24884:	683b      	ldr	r3, [r7, #0]
   24886:	785b      	ldrb	r3, [r3, #1]
   24888:	2b00      	cmp	r3, #0
   2488a:	d004      	beq.n	24896 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   2488c:	697b      	ldr	r3, [r7, #20]
   2488e:	2280      	movs	r2, #128	; 0x80
   24890:	02d2      	lsls	r2, r2, #11
   24892:	4313      	orrs	r3, r2
   24894:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   24896:	683b      	ldr	r3, [r7, #0]
   24898:	7a5b      	ldrb	r3, [r3, #9]
   2489a:	2b00      	cmp	r3, #0
   2489c:	d004      	beq.n	248a8 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   2489e:	697b      	ldr	r3, [r7, #20]
   248a0:	2280      	movs	r2, #128	; 0x80
   248a2:	0312      	lsls	r2, r2, #12
   248a4:	4313      	orrs	r3, r2
   248a6:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   248a8:	683b      	ldr	r3, [r7, #0]
   248aa:	685b      	ldr	r3, [r3, #4]
   248ac:	2b01      	cmp	r3, #1
   248ae:	d92c      	bls.n	2490a <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   248b0:	683b      	ldr	r3, [r7, #0]
   248b2:	685a      	ldr	r2, [r3, #4]
   248b4:	683b      	ldr	r3, [r7, #0]
   248b6:	685b      	ldr	r3, [r3, #4]
   248b8:	3b01      	subs	r3, #1
   248ba:	4013      	ands	r3, r2
   248bc:	d11a      	bne.n	248f4 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   248be:	2300      	movs	r3, #0
   248c0:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   248c2:	2302      	movs	r3, #2
   248c4:	60bb      	str	r3, [r7, #8]
   248c6:	e005      	b.n	248d4 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   248c8:	68fb      	ldr	r3, [r7, #12]
   248ca:	3301      	adds	r3, #1
   248cc:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   248ce:	68bb      	ldr	r3, [r7, #8]
   248d0:	005b      	lsls	r3, r3, #1
   248d2:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   248d4:	683b      	ldr	r3, [r7, #0]
   248d6:	685a      	ldr	r2, [r3, #4]
   248d8:	68bb      	ldr	r3, [r7, #8]
   248da:	429a      	cmp	r2, r3
   248dc:	d8f4      	bhi.n	248c8 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   248de:	68fb      	ldr	r3, [r7, #12]
   248e0:	021b      	lsls	r3, r3, #8
   248e2:	693a      	ldr	r2, [r7, #16]
   248e4:	4313      	orrs	r3, r2
   248e6:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   248e8:	697b      	ldr	r3, [r7, #20]
   248ea:	2280      	movs	r2, #128	; 0x80
   248ec:	0352      	lsls	r2, r2, #13
   248ee:	4313      	orrs	r3, r2
   248f0:	617b      	str	r3, [r7, #20]
   248f2:	e00a      	b.n	2490a <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   248f4:	683b      	ldr	r3, [r7, #0]
   248f6:	685b      	ldr	r3, [r3, #4]
   248f8:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   248fa:	693a      	ldr	r2, [r7, #16]
   248fc:	4313      	orrs	r3, r2
   248fe:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   24900:	697b      	ldr	r3, [r7, #20]
   24902:	2280      	movs	r2, #128	; 0x80
   24904:	0292      	lsls	r2, r2, #10
   24906:	4313      	orrs	r3, r2
   24908:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   2490a:	683b      	ldr	r3, [r7, #0]
   2490c:	7a1b      	ldrb	r3, [r3, #8]
   2490e:	2b00      	cmp	r3, #0
   24910:	d004      	beq.n	2491c <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   24912:	697b      	ldr	r3, [r7, #20]
   24914:	2280      	movs	r2, #128	; 0x80
   24916:	0392      	lsls	r2, r2, #14
   24918:	4313      	orrs	r3, r2
   2491a:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   2491c:	46c0      	nop			; (mov r8, r8)
   2491e:	4b13      	ldr	r3, [pc, #76]	; (2496c <system_gclk_gen_set_config+0x110>)
   24920:	4798      	blx	r3
   24922:	1e03      	subs	r3, r0, #0
   24924:	d1fb      	bne.n	2491e <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   24926:	4b12      	ldr	r3, [pc, #72]	; (24970 <system_gclk_gen_set_config+0x114>)
   24928:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2492a:	4a12      	ldr	r2, [pc, #72]	; (24974 <system_gclk_gen_set_config+0x118>)
   2492c:	1dfb      	adds	r3, r7, #7
   2492e:	781b      	ldrb	r3, [r3, #0]
   24930:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   24932:	46c0      	nop			; (mov r8, r8)
   24934:	4b0d      	ldr	r3, [pc, #52]	; (2496c <system_gclk_gen_set_config+0x110>)
   24936:	4798      	blx	r3
   24938:	1e03      	subs	r3, r0, #0
   2493a:	d1fb      	bne.n	24934 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   2493c:	4b0e      	ldr	r3, [pc, #56]	; (24978 <system_gclk_gen_set_config+0x11c>)
   2493e:	693a      	ldr	r2, [r7, #16]
   24940:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   24942:	46c0      	nop			; (mov r8, r8)
   24944:	4b09      	ldr	r3, [pc, #36]	; (2496c <system_gclk_gen_set_config+0x110>)
   24946:	4798      	blx	r3
   24948:	1e03      	subs	r3, r0, #0
   2494a:	d1fb      	bne.n	24944 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   2494c:	4b0a      	ldr	r3, [pc, #40]	; (24978 <system_gclk_gen_set_config+0x11c>)
   2494e:	4a0a      	ldr	r2, [pc, #40]	; (24978 <system_gclk_gen_set_config+0x11c>)
   24950:	6851      	ldr	r1, [r2, #4]
   24952:	2280      	movs	r2, #128	; 0x80
   24954:	0252      	lsls	r2, r2, #9
   24956:	4011      	ands	r1, r2
   24958:	697a      	ldr	r2, [r7, #20]
   2495a:	430a      	orrs	r2, r1
   2495c:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2495e:	4b07      	ldr	r3, [pc, #28]	; (2497c <system_gclk_gen_set_config+0x120>)
   24960:	4798      	blx	r3
}
   24962:	46c0      	nop			; (mov r8, r8)
   24964:	46bd      	mov	sp, r7
   24966:	b006      	add	sp, #24
   24968:	bd80      	pop	{r7, pc}
   2496a:	46c0      	nop			; (mov r8, r8)
   2496c:	0002480d 	.word	0x0002480d
   24970:	000247e5 	.word	0x000247e5
   24974:	40000c08 	.word	0x40000c08
   24978:	40000c00 	.word	0x40000c00
   2497c:	000247f9 	.word	0x000247f9

00024980 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   24980:	b580      	push	{r7, lr}
   24982:	b082      	sub	sp, #8
   24984:	af00      	add	r7, sp, #0
   24986:	0002      	movs	r2, r0
   24988:	1dfb      	adds	r3, r7, #7
   2498a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2498c:	46c0      	nop			; (mov r8, r8)
   2498e:	4b0e      	ldr	r3, [pc, #56]	; (249c8 <system_gclk_gen_enable+0x48>)
   24990:	4798      	blx	r3
   24992:	1e03      	subs	r3, r0, #0
   24994:	d1fb      	bne.n	2498e <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   24996:	4b0d      	ldr	r3, [pc, #52]	; (249cc <system_gclk_gen_enable+0x4c>)
   24998:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2499a:	4a0d      	ldr	r2, [pc, #52]	; (249d0 <system_gclk_gen_enable+0x50>)
   2499c:	1dfb      	adds	r3, r7, #7
   2499e:	781b      	ldrb	r3, [r3, #0]
   249a0:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   249a2:	46c0      	nop			; (mov r8, r8)
   249a4:	4b08      	ldr	r3, [pc, #32]	; (249c8 <system_gclk_gen_enable+0x48>)
   249a6:	4798      	blx	r3
   249a8:	1e03      	subs	r3, r0, #0
   249aa:	d1fb      	bne.n	249a4 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   249ac:	4b09      	ldr	r3, [pc, #36]	; (249d4 <system_gclk_gen_enable+0x54>)
   249ae:	4a09      	ldr	r2, [pc, #36]	; (249d4 <system_gclk_gen_enable+0x54>)
   249b0:	6852      	ldr	r2, [r2, #4]
   249b2:	2180      	movs	r1, #128	; 0x80
   249b4:	0249      	lsls	r1, r1, #9
   249b6:	430a      	orrs	r2, r1
   249b8:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   249ba:	4b07      	ldr	r3, [pc, #28]	; (249d8 <system_gclk_gen_enable+0x58>)
   249bc:	4798      	blx	r3
}
   249be:	46c0      	nop			; (mov r8, r8)
   249c0:	46bd      	mov	sp, r7
   249c2:	b002      	add	sp, #8
   249c4:	bd80      	pop	{r7, pc}
   249c6:	46c0      	nop			; (mov r8, r8)
   249c8:	0002480d 	.word	0x0002480d
   249cc:	000247e5 	.word	0x000247e5
   249d0:	40000c04 	.word	0x40000c04
   249d4:	40000c00 	.word	0x40000c00
   249d8:	000247f9 	.word	0x000247f9

000249dc <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   249dc:	b580      	push	{r7, lr}
   249de:	b086      	sub	sp, #24
   249e0:	af00      	add	r7, sp, #0
   249e2:	0002      	movs	r2, r0
   249e4:	1dfb      	adds	r3, r7, #7
   249e6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   249e8:	46c0      	nop			; (mov r8, r8)
   249ea:	4b2a      	ldr	r3, [pc, #168]	; (24a94 <system_gclk_gen_get_hz+0xb8>)
   249ec:	4798      	blx	r3
   249ee:	1e03      	subs	r3, r0, #0
   249f0:	d1fb      	bne.n	249ea <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   249f2:	4b29      	ldr	r3, [pc, #164]	; (24a98 <system_gclk_gen_get_hz+0xbc>)
   249f4:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   249f6:	4a29      	ldr	r2, [pc, #164]	; (24a9c <system_gclk_gen_get_hz+0xc0>)
   249f8:	1dfb      	adds	r3, r7, #7
   249fa:	781b      	ldrb	r3, [r3, #0]
   249fc:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   249fe:	46c0      	nop			; (mov r8, r8)
   24a00:	4b24      	ldr	r3, [pc, #144]	; (24a94 <system_gclk_gen_get_hz+0xb8>)
   24a02:	4798      	blx	r3
   24a04:	1e03      	subs	r3, r0, #0
   24a06:	d1fb      	bne.n	24a00 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   24a08:	4b25      	ldr	r3, [pc, #148]	; (24aa0 <system_gclk_gen_get_hz+0xc4>)
   24a0a:	685b      	ldr	r3, [r3, #4]
   24a0c:	04db      	lsls	r3, r3, #19
   24a0e:	0edb      	lsrs	r3, r3, #27
   24a10:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   24a12:	0018      	movs	r0, r3
   24a14:	4b23      	ldr	r3, [pc, #140]	; (24aa4 <system_gclk_gen_get_hz+0xc8>)
   24a16:	4798      	blx	r3
   24a18:	0003      	movs	r3, r0
   24a1a:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   24a1c:	4a1f      	ldr	r2, [pc, #124]	; (24a9c <system_gclk_gen_get_hz+0xc0>)
   24a1e:	1dfb      	adds	r3, r7, #7
   24a20:	781b      	ldrb	r3, [r3, #0]
   24a22:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   24a24:	4b1e      	ldr	r3, [pc, #120]	; (24aa0 <system_gclk_gen_get_hz+0xc4>)
   24a26:	685b      	ldr	r3, [r3, #4]
   24a28:	02db      	lsls	r3, r3, #11
   24a2a:	0fdb      	lsrs	r3, r3, #31
   24a2c:	b2da      	uxtb	r2, r3
   24a2e:	2313      	movs	r3, #19
   24a30:	18fb      	adds	r3, r7, r3
   24a32:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   24a34:	4a1c      	ldr	r2, [pc, #112]	; (24aa8 <system_gclk_gen_get_hz+0xcc>)
   24a36:	1dfb      	adds	r3, r7, #7
   24a38:	781b      	ldrb	r3, [r3, #0]
   24a3a:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   24a3c:	46c0      	nop			; (mov r8, r8)
   24a3e:	4b15      	ldr	r3, [pc, #84]	; (24a94 <system_gclk_gen_get_hz+0xb8>)
   24a40:	4798      	blx	r3
   24a42:	1e03      	subs	r3, r0, #0
   24a44:	d1fb      	bne.n	24a3e <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   24a46:	4b16      	ldr	r3, [pc, #88]	; (24aa0 <system_gclk_gen_get_hz+0xc4>)
   24a48:	689b      	ldr	r3, [r3, #8]
   24a4a:	021b      	lsls	r3, r3, #8
   24a4c:	0c1b      	lsrs	r3, r3, #16
   24a4e:	b29b      	uxth	r3, r3
   24a50:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   24a52:	4b16      	ldr	r3, [pc, #88]	; (24aac <system_gclk_gen_get_hz+0xd0>)
   24a54:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   24a56:	2313      	movs	r3, #19
   24a58:	18fb      	adds	r3, r7, r3
   24a5a:	781b      	ldrb	r3, [r3, #0]
   24a5c:	2b00      	cmp	r3, #0
   24a5e:	d109      	bne.n	24a74 <system_gclk_gen_get_hz+0x98>
   24a60:	68fb      	ldr	r3, [r7, #12]
   24a62:	2b01      	cmp	r3, #1
   24a64:	d906      	bls.n	24a74 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   24a66:	4b12      	ldr	r3, [pc, #72]	; (24ab0 <system_gclk_gen_get_hz+0xd4>)
   24a68:	68f9      	ldr	r1, [r7, #12]
   24a6a:	6978      	ldr	r0, [r7, #20]
   24a6c:	4798      	blx	r3
   24a6e:	0003      	movs	r3, r0
   24a70:	617b      	str	r3, [r7, #20]
   24a72:	e00a      	b.n	24a8a <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   24a74:	2313      	movs	r3, #19
   24a76:	18fb      	adds	r3, r7, r3
   24a78:	781b      	ldrb	r3, [r3, #0]
   24a7a:	2b00      	cmp	r3, #0
   24a7c:	d005      	beq.n	24a8a <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   24a7e:	68fb      	ldr	r3, [r7, #12]
   24a80:	3301      	adds	r3, #1
   24a82:	697a      	ldr	r2, [r7, #20]
   24a84:	40da      	lsrs	r2, r3
   24a86:	0013      	movs	r3, r2
   24a88:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   24a8a:	697b      	ldr	r3, [r7, #20]
}
   24a8c:	0018      	movs	r0, r3
   24a8e:	46bd      	mov	sp, r7
   24a90:	b006      	add	sp, #24
   24a92:	bd80      	pop	{r7, pc}
   24a94:	0002480d 	.word	0x0002480d
   24a98:	000247e5 	.word	0x000247e5
   24a9c:	40000c04 	.word	0x40000c04
   24aa0:	40000c00 	.word	0x40000c00
   24aa4:	00023f99 	.word	0x00023f99
   24aa8:	40000c08 	.word	0x40000c08
   24aac:	000247f9 	.word	0x000247f9
   24ab0:	000265fd 	.word	0x000265fd

00024ab4 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   24ab4:	b580      	push	{r7, lr}
   24ab6:	b084      	sub	sp, #16
   24ab8:	af00      	add	r7, sp, #0
   24aba:	0002      	movs	r2, r0
   24abc:	6039      	str	r1, [r7, #0]
   24abe:	1dfb      	adds	r3, r7, #7
   24ac0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   24ac2:	1dfb      	adds	r3, r7, #7
   24ac4:	781b      	ldrb	r3, [r3, #0]
   24ac6:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   24ac8:	683b      	ldr	r3, [r7, #0]
   24aca:	781b      	ldrb	r3, [r3, #0]
   24acc:	021b      	lsls	r3, r3, #8
   24ace:	001a      	movs	r2, r3
   24ad0:	68fb      	ldr	r3, [r7, #12]
   24ad2:	4313      	orrs	r3, r2
   24ad4:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   24ad6:	1dfb      	adds	r3, r7, #7
   24ad8:	781b      	ldrb	r3, [r3, #0]
   24ada:	0018      	movs	r0, r3
   24adc:	4b04      	ldr	r3, [pc, #16]	; (24af0 <system_gclk_chan_set_config+0x3c>)
   24ade:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   24ae0:	4b04      	ldr	r3, [pc, #16]	; (24af4 <system_gclk_chan_set_config+0x40>)
   24ae2:	68fa      	ldr	r2, [r7, #12]
   24ae4:	b292      	uxth	r2, r2
   24ae6:	805a      	strh	r2, [r3, #2]
}
   24ae8:	46c0      	nop			; (mov r8, r8)
   24aea:	46bd      	mov	sp, r7
   24aec:	b004      	add	sp, #16
   24aee:	bd80      	pop	{r7, pc}
   24af0:	00024b41 	.word	0x00024b41
   24af4:	40000c00 	.word	0x40000c00

00024af8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   24af8:	b580      	push	{r7, lr}
   24afa:	b082      	sub	sp, #8
   24afc:	af00      	add	r7, sp, #0
   24afe:	0002      	movs	r2, r0
   24b00:	1dfb      	adds	r3, r7, #7
   24b02:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   24b04:	4b0a      	ldr	r3, [pc, #40]	; (24b30 <system_gclk_chan_enable+0x38>)
   24b06:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   24b08:	4a0a      	ldr	r2, [pc, #40]	; (24b34 <system_gclk_chan_enable+0x3c>)
   24b0a:	1dfb      	adds	r3, r7, #7
   24b0c:	781b      	ldrb	r3, [r3, #0]
   24b0e:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   24b10:	4909      	ldr	r1, [pc, #36]	; (24b38 <system_gclk_chan_enable+0x40>)
   24b12:	4b09      	ldr	r3, [pc, #36]	; (24b38 <system_gclk_chan_enable+0x40>)
   24b14:	885b      	ldrh	r3, [r3, #2]
   24b16:	b29b      	uxth	r3, r3
   24b18:	2280      	movs	r2, #128	; 0x80
   24b1a:	01d2      	lsls	r2, r2, #7
   24b1c:	4313      	orrs	r3, r2
   24b1e:	b29b      	uxth	r3, r3
   24b20:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   24b22:	4b06      	ldr	r3, [pc, #24]	; (24b3c <system_gclk_chan_enable+0x44>)
   24b24:	4798      	blx	r3
}
   24b26:	46c0      	nop			; (mov r8, r8)
   24b28:	46bd      	mov	sp, r7
   24b2a:	b002      	add	sp, #8
   24b2c:	bd80      	pop	{r7, pc}
   24b2e:	46c0      	nop			; (mov r8, r8)
   24b30:	000247e5 	.word	0x000247e5
   24b34:	40000c02 	.word	0x40000c02
   24b38:	40000c00 	.word	0x40000c00
   24b3c:	000247f9 	.word	0x000247f9

00024b40 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   24b40:	b580      	push	{r7, lr}
   24b42:	b084      	sub	sp, #16
   24b44:	af00      	add	r7, sp, #0
   24b46:	0002      	movs	r2, r0
   24b48:	1dfb      	adds	r3, r7, #7
   24b4a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   24b4c:	4b1c      	ldr	r3, [pc, #112]	; (24bc0 <system_gclk_chan_disable+0x80>)
   24b4e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   24b50:	4a1c      	ldr	r2, [pc, #112]	; (24bc4 <system_gclk_chan_disable+0x84>)
   24b52:	1dfb      	adds	r3, r7, #7
   24b54:	781b      	ldrb	r3, [r3, #0]
   24b56:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   24b58:	4b1b      	ldr	r3, [pc, #108]	; (24bc8 <system_gclk_chan_disable+0x88>)
   24b5a:	885b      	ldrh	r3, [r3, #2]
   24b5c:	051b      	lsls	r3, r3, #20
   24b5e:	0f1b      	lsrs	r3, r3, #28
   24b60:	b2db      	uxtb	r3, r3
   24b62:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   24b64:	4a18      	ldr	r2, [pc, #96]	; (24bc8 <system_gclk_chan_disable+0x88>)
   24b66:	8853      	ldrh	r3, [r2, #2]
   24b68:	4918      	ldr	r1, [pc, #96]	; (24bcc <system_gclk_chan_disable+0x8c>)
   24b6a:	400b      	ands	r3, r1
   24b6c:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   24b6e:	4a16      	ldr	r2, [pc, #88]	; (24bc8 <system_gclk_chan_disable+0x88>)
   24b70:	4b15      	ldr	r3, [pc, #84]	; (24bc8 <system_gclk_chan_disable+0x88>)
   24b72:	885b      	ldrh	r3, [r3, #2]
   24b74:	b29b      	uxth	r3, r3
   24b76:	4916      	ldr	r1, [pc, #88]	; (24bd0 <system_gclk_chan_disable+0x90>)
   24b78:	400b      	ands	r3, r1
   24b7a:	b29b      	uxth	r3, r3
   24b7c:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   24b7e:	46c0      	nop			; (mov r8, r8)
   24b80:	4b11      	ldr	r3, [pc, #68]	; (24bc8 <system_gclk_chan_disable+0x88>)
   24b82:	885b      	ldrh	r3, [r3, #2]
   24b84:	b29b      	uxth	r3, r3
   24b86:	001a      	movs	r2, r3
   24b88:	2380      	movs	r3, #128	; 0x80
   24b8a:	01db      	lsls	r3, r3, #7
   24b8c:	4013      	ands	r3, r2
   24b8e:	d1f7      	bne.n	24b80 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   24b90:	4a0d      	ldr	r2, [pc, #52]	; (24bc8 <system_gclk_chan_disable+0x88>)
   24b92:	68fb      	ldr	r3, [r7, #12]
   24b94:	b2db      	uxtb	r3, r3
   24b96:	1c19      	adds	r1, r3, #0
   24b98:	230f      	movs	r3, #15
   24b9a:	400b      	ands	r3, r1
   24b9c:	b2d9      	uxtb	r1, r3
   24b9e:	8853      	ldrh	r3, [r2, #2]
   24ba0:	1c08      	adds	r0, r1, #0
   24ba2:	210f      	movs	r1, #15
   24ba4:	4001      	ands	r1, r0
   24ba6:	0208      	lsls	r0, r1, #8
   24ba8:	4908      	ldr	r1, [pc, #32]	; (24bcc <system_gclk_chan_disable+0x8c>)
   24baa:	400b      	ands	r3, r1
   24bac:	1c19      	adds	r1, r3, #0
   24bae:	1c03      	adds	r3, r0, #0
   24bb0:	430b      	orrs	r3, r1
   24bb2:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   24bb4:	4b07      	ldr	r3, [pc, #28]	; (24bd4 <system_gclk_chan_disable+0x94>)
   24bb6:	4798      	blx	r3
}
   24bb8:	46c0      	nop			; (mov r8, r8)
   24bba:	46bd      	mov	sp, r7
   24bbc:	b004      	add	sp, #16
   24bbe:	bd80      	pop	{r7, pc}
   24bc0:	000247e5 	.word	0x000247e5
   24bc4:	40000c02 	.word	0x40000c02
   24bc8:	40000c00 	.word	0x40000c00
   24bcc:	fffff0ff 	.word	0xfffff0ff
   24bd0:	ffffbfff 	.word	0xffffbfff
   24bd4:	000247f9 	.word	0x000247f9

00024bd8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   24bd8:	b580      	push	{r7, lr}
   24bda:	b084      	sub	sp, #16
   24bdc:	af00      	add	r7, sp, #0
   24bde:	0002      	movs	r2, r0
   24be0:	1dfb      	adds	r3, r7, #7
   24be2:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   24be4:	4b0d      	ldr	r3, [pc, #52]	; (24c1c <system_gclk_chan_get_hz+0x44>)
   24be6:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   24be8:	4a0d      	ldr	r2, [pc, #52]	; (24c20 <system_gclk_chan_get_hz+0x48>)
   24bea:	1dfb      	adds	r3, r7, #7
   24bec:	781b      	ldrb	r3, [r3, #0]
   24bee:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   24bf0:	4b0c      	ldr	r3, [pc, #48]	; (24c24 <system_gclk_chan_get_hz+0x4c>)
   24bf2:	885b      	ldrh	r3, [r3, #2]
   24bf4:	051b      	lsls	r3, r3, #20
   24bf6:	0f1b      	lsrs	r3, r3, #28
   24bf8:	b2da      	uxtb	r2, r3
   24bfa:	230f      	movs	r3, #15
   24bfc:	18fb      	adds	r3, r7, r3
   24bfe:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   24c00:	4b09      	ldr	r3, [pc, #36]	; (24c28 <system_gclk_chan_get_hz+0x50>)
   24c02:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   24c04:	230f      	movs	r3, #15
   24c06:	18fb      	adds	r3, r7, r3
   24c08:	781b      	ldrb	r3, [r3, #0]
   24c0a:	0018      	movs	r0, r3
   24c0c:	4b07      	ldr	r3, [pc, #28]	; (24c2c <system_gclk_chan_get_hz+0x54>)
   24c0e:	4798      	blx	r3
   24c10:	0003      	movs	r3, r0
}
   24c12:	0018      	movs	r0, r3
   24c14:	46bd      	mov	sp, r7
   24c16:	b004      	add	sp, #16
   24c18:	bd80      	pop	{r7, pc}
   24c1a:	46c0      	nop			; (mov r8, r8)
   24c1c:	000247e5 	.word	0x000247e5
   24c20:	40000c02 	.word	0x40000c02
   24c24:	40000c00 	.word	0x40000c00
   24c28:	000247f9 	.word	0x000247f9
   24c2c:	000249dd 	.word	0x000249dd

00024c30 <system_pinmux_get_group_from_gpio_pin>:
{
   24c30:	b580      	push	{r7, lr}
   24c32:	b084      	sub	sp, #16
   24c34:	af00      	add	r7, sp, #0
   24c36:	0002      	movs	r2, r0
   24c38:	1dfb      	adds	r3, r7, #7
   24c3a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   24c3c:	230f      	movs	r3, #15
   24c3e:	18fb      	adds	r3, r7, r3
   24c40:	1dfa      	adds	r2, r7, #7
   24c42:	7812      	ldrb	r2, [r2, #0]
   24c44:	09d2      	lsrs	r2, r2, #7
   24c46:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   24c48:	230e      	movs	r3, #14
   24c4a:	18fb      	adds	r3, r7, r3
   24c4c:	1dfa      	adds	r2, r7, #7
   24c4e:	7812      	ldrb	r2, [r2, #0]
   24c50:	0952      	lsrs	r2, r2, #5
   24c52:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   24c54:	4b0d      	ldr	r3, [pc, #52]	; (24c8c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   24c56:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   24c58:	230f      	movs	r3, #15
   24c5a:	18fb      	adds	r3, r7, r3
   24c5c:	781b      	ldrb	r3, [r3, #0]
   24c5e:	2b00      	cmp	r3, #0
   24c60:	d10f      	bne.n	24c82 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   24c62:	230f      	movs	r3, #15
   24c64:	18fb      	adds	r3, r7, r3
   24c66:	781b      	ldrb	r3, [r3, #0]
   24c68:	009b      	lsls	r3, r3, #2
   24c6a:	2210      	movs	r2, #16
   24c6c:	4694      	mov	ip, r2
   24c6e:	44bc      	add	ip, r7
   24c70:	4463      	add	r3, ip
   24c72:	3b08      	subs	r3, #8
   24c74:	681a      	ldr	r2, [r3, #0]
   24c76:	230e      	movs	r3, #14
   24c78:	18fb      	adds	r3, r7, r3
   24c7a:	781b      	ldrb	r3, [r3, #0]
   24c7c:	01db      	lsls	r3, r3, #7
   24c7e:	18d3      	adds	r3, r2, r3
   24c80:	e000      	b.n	24c84 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   24c82:	2300      	movs	r3, #0
}
   24c84:	0018      	movs	r0, r3
   24c86:	46bd      	mov	sp, r7
   24c88:	b004      	add	sp, #16
   24c8a:	bd80      	pop	{r7, pc}
   24c8c:	41004400 	.word	0x41004400

00024c90 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   24c90:	b580      	push	{r7, lr}
   24c92:	b088      	sub	sp, #32
   24c94:	af00      	add	r7, sp, #0
   24c96:	60f8      	str	r0, [r7, #12]
   24c98:	60b9      	str	r1, [r7, #8]
   24c9a:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   24c9c:	2300      	movs	r3, #0
   24c9e:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   24ca0:	687b      	ldr	r3, [r7, #4]
   24ca2:	78db      	ldrb	r3, [r3, #3]
   24ca4:	2201      	movs	r2, #1
   24ca6:	4053      	eors	r3, r2
   24ca8:	b2db      	uxtb	r3, r3
   24caa:	2b00      	cmp	r3, #0
   24cac:	d035      	beq.n	24d1a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   24cae:	687b      	ldr	r3, [r7, #4]
   24cb0:	781b      	ldrb	r3, [r3, #0]
   24cb2:	2b80      	cmp	r3, #128	; 0x80
   24cb4:	d00b      	beq.n	24cce <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   24cb6:	69fb      	ldr	r3, [r7, #28]
   24cb8:	2280      	movs	r2, #128	; 0x80
   24cba:	0252      	lsls	r2, r2, #9
   24cbc:	4313      	orrs	r3, r2
   24cbe:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   24cc0:	687b      	ldr	r3, [r7, #4]
   24cc2:	781b      	ldrb	r3, [r3, #0]
   24cc4:	061b      	lsls	r3, r3, #24
   24cc6:	001a      	movs	r2, r3
   24cc8:	69fb      	ldr	r3, [r7, #28]
   24cca:	4313      	orrs	r3, r2
   24ccc:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   24cce:	687b      	ldr	r3, [r7, #4]
   24cd0:	785b      	ldrb	r3, [r3, #1]
   24cd2:	2b00      	cmp	r3, #0
   24cd4:	d003      	beq.n	24cde <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   24cd6:	687b      	ldr	r3, [r7, #4]
   24cd8:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   24cda:	2b02      	cmp	r3, #2
   24cdc:	d110      	bne.n	24d00 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   24cde:	69fb      	ldr	r3, [r7, #28]
   24ce0:	2280      	movs	r2, #128	; 0x80
   24ce2:	0292      	lsls	r2, r2, #10
   24ce4:	4313      	orrs	r3, r2
   24ce6:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   24ce8:	687b      	ldr	r3, [r7, #4]
   24cea:	789b      	ldrb	r3, [r3, #2]
   24cec:	2b00      	cmp	r3, #0
   24cee:	d004      	beq.n	24cfa <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   24cf0:	69fb      	ldr	r3, [r7, #28]
   24cf2:	2280      	movs	r2, #128	; 0x80
   24cf4:	02d2      	lsls	r2, r2, #11
   24cf6:	4313      	orrs	r3, r2
   24cf8:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   24cfa:	68fb      	ldr	r3, [r7, #12]
   24cfc:	68ba      	ldr	r2, [r7, #8]
   24cfe:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   24d00:	687b      	ldr	r3, [r7, #4]
   24d02:	785b      	ldrb	r3, [r3, #1]
   24d04:	2b01      	cmp	r3, #1
   24d06:	d003      	beq.n	24d10 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   24d08:	687b      	ldr	r3, [r7, #4]
   24d0a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   24d0c:	2b02      	cmp	r3, #2
   24d0e:	d107      	bne.n	24d20 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   24d10:	69fb      	ldr	r3, [r7, #28]
   24d12:	4a22      	ldr	r2, [pc, #136]	; (24d9c <_system_pinmux_config+0x10c>)
   24d14:	4013      	ands	r3, r2
   24d16:	61fb      	str	r3, [r7, #28]
   24d18:	e002      	b.n	24d20 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   24d1a:	68fb      	ldr	r3, [r7, #12]
   24d1c:	68ba      	ldr	r2, [r7, #8]
   24d1e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   24d20:	68bb      	ldr	r3, [r7, #8]
   24d22:	041b      	lsls	r3, r3, #16
   24d24:	0c1b      	lsrs	r3, r3, #16
   24d26:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   24d28:	68bb      	ldr	r3, [r7, #8]
   24d2a:	0c1b      	lsrs	r3, r3, #16
   24d2c:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   24d2e:	69ba      	ldr	r2, [r7, #24]
   24d30:	69fb      	ldr	r3, [r7, #28]
   24d32:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   24d34:	22a0      	movs	r2, #160	; 0xa0
   24d36:	05d2      	lsls	r2, r2, #23
   24d38:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   24d3a:	68fb      	ldr	r3, [r7, #12]
   24d3c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   24d3e:	697a      	ldr	r2, [r7, #20]
   24d40:	69fb      	ldr	r3, [r7, #28]
   24d42:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   24d44:	22d0      	movs	r2, #208	; 0xd0
   24d46:	0612      	lsls	r2, r2, #24
   24d48:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   24d4a:	68fb      	ldr	r3, [r7, #12]
   24d4c:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   24d4e:	687b      	ldr	r3, [r7, #4]
   24d50:	78db      	ldrb	r3, [r3, #3]
   24d52:	2201      	movs	r2, #1
   24d54:	4053      	eors	r3, r2
   24d56:	b2db      	uxtb	r3, r3
   24d58:	2b00      	cmp	r3, #0
   24d5a:	d01a      	beq.n	24d92 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   24d5c:	69fa      	ldr	r2, [r7, #28]
   24d5e:	2380      	movs	r3, #128	; 0x80
   24d60:	02db      	lsls	r3, r3, #11
   24d62:	4013      	ands	r3, r2
   24d64:	d00a      	beq.n	24d7c <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   24d66:	687b      	ldr	r3, [r7, #4]
   24d68:	789b      	ldrb	r3, [r3, #2]
   24d6a:	2b01      	cmp	r3, #1
   24d6c:	d103      	bne.n	24d76 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   24d6e:	68fb      	ldr	r3, [r7, #12]
   24d70:	68ba      	ldr	r2, [r7, #8]
   24d72:	619a      	str	r2, [r3, #24]
   24d74:	e002      	b.n	24d7c <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   24d76:	68fb      	ldr	r3, [r7, #12]
   24d78:	68ba      	ldr	r2, [r7, #8]
   24d7a:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   24d7c:	687b      	ldr	r3, [r7, #4]
   24d7e:	785b      	ldrb	r3, [r3, #1]
   24d80:	2b01      	cmp	r3, #1
   24d82:	d003      	beq.n	24d8c <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   24d84:	687b      	ldr	r3, [r7, #4]
   24d86:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   24d88:	2b02      	cmp	r3, #2
   24d8a:	d102      	bne.n	24d92 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   24d8c:	68fb      	ldr	r3, [r7, #12]
   24d8e:	68ba      	ldr	r2, [r7, #8]
   24d90:	609a      	str	r2, [r3, #8]
		}
	}
}
   24d92:	46c0      	nop			; (mov r8, r8)
   24d94:	46bd      	mov	sp, r7
   24d96:	b008      	add	sp, #32
   24d98:	bd80      	pop	{r7, pc}
   24d9a:	46c0      	nop			; (mov r8, r8)
   24d9c:	fffbffff 	.word	0xfffbffff

00024da0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   24da0:	b580      	push	{r7, lr}
   24da2:	b084      	sub	sp, #16
   24da4:	af00      	add	r7, sp, #0
   24da6:	0002      	movs	r2, r0
   24da8:	6039      	str	r1, [r7, #0]
   24daa:	1dfb      	adds	r3, r7, #7
   24dac:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   24dae:	1dfb      	adds	r3, r7, #7
   24db0:	781b      	ldrb	r3, [r3, #0]
   24db2:	0018      	movs	r0, r3
   24db4:	4b0a      	ldr	r3, [pc, #40]	; (24de0 <system_pinmux_pin_set_config+0x40>)
   24db6:	4798      	blx	r3
   24db8:	0003      	movs	r3, r0
   24dba:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   24dbc:	1dfb      	adds	r3, r7, #7
   24dbe:	781b      	ldrb	r3, [r3, #0]
   24dc0:	221f      	movs	r2, #31
   24dc2:	4013      	ands	r3, r2
   24dc4:	2201      	movs	r2, #1
   24dc6:	409a      	lsls	r2, r3
   24dc8:	0013      	movs	r3, r2
   24dca:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   24dcc:	683a      	ldr	r2, [r7, #0]
   24dce:	68b9      	ldr	r1, [r7, #8]
   24dd0:	68fb      	ldr	r3, [r7, #12]
   24dd2:	0018      	movs	r0, r3
   24dd4:	4b03      	ldr	r3, [pc, #12]	; (24de4 <system_pinmux_pin_set_config+0x44>)
   24dd6:	4798      	blx	r3
}
   24dd8:	46c0      	nop			; (mov r8, r8)
   24dda:	46bd      	mov	sp, r7
   24ddc:	b004      	add	sp, #16
   24dde:	bd80      	pop	{r7, pc}
   24de0:	00024c31 	.word	0x00024c31
   24de4:	00024c91 	.word	0x00024c91

00024de8 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   24de8:	b580      	push	{r7, lr}
   24dea:	af00      	add	r7, sp, #0
	return;
   24dec:	46c0      	nop			; (mov r8, r8)
}
   24dee:	46bd      	mov	sp, r7
   24df0:	bd80      	pop	{r7, pc}
	...

00024df4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   24df4:	b580      	push	{r7, lr}
   24df6:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   24df8:	4b06      	ldr	r3, [pc, #24]	; (24e14 <system_init+0x20>)
   24dfa:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   24dfc:	4b06      	ldr	r3, [pc, #24]	; (24e18 <system_init+0x24>)
   24dfe:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   24e00:	4b06      	ldr	r3, [pc, #24]	; (24e1c <system_init+0x28>)
   24e02:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   24e04:	4b06      	ldr	r3, [pc, #24]	; (24e20 <system_init+0x2c>)
   24e06:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   24e08:	4b06      	ldr	r3, [pc, #24]	; (24e24 <system_init+0x30>)
   24e0a:	4798      	blx	r3
}
   24e0c:	46c0      	nop			; (mov r8, r8)
   24e0e:	46bd      	mov	sp, r7
   24e10:	bd80      	pop	{r7, pc}
   24e12:	46c0      	nop			; (mov r8, r8)
   24e14:	00024429 	.word	0x00024429
   24e18:	00023cf1 	.word	0x00023cf1
   24e1c:	000227b9 	.word	0x000227b9
   24e20:	0001dec1 	.word	0x0001dec1
   24e24:	00024de9 	.word	0x00024de9

00024e28 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   24e28:	b580      	push	{r7, lr}
   24e2a:	b082      	sub	sp, #8
   24e2c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   24e2e:	4b2f      	ldr	r3, [pc, #188]	; (24eec <Reset_Handler+0xc4>)
   24e30:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   24e32:	4b2f      	ldr	r3, [pc, #188]	; (24ef0 <Reset_Handler+0xc8>)
   24e34:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   24e36:	687a      	ldr	r2, [r7, #4]
   24e38:	683b      	ldr	r3, [r7, #0]
   24e3a:	429a      	cmp	r2, r3
   24e3c:	d00c      	beq.n	24e58 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   24e3e:	e007      	b.n	24e50 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   24e40:	683b      	ldr	r3, [r7, #0]
   24e42:	1d1a      	adds	r2, r3, #4
   24e44:	603a      	str	r2, [r7, #0]
   24e46:	687a      	ldr	r2, [r7, #4]
   24e48:	1d11      	adds	r1, r2, #4
   24e4a:	6079      	str	r1, [r7, #4]
   24e4c:	6812      	ldr	r2, [r2, #0]
   24e4e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   24e50:	683a      	ldr	r2, [r7, #0]
   24e52:	4b28      	ldr	r3, [pc, #160]	; (24ef4 <Reset_Handler+0xcc>)
   24e54:	429a      	cmp	r2, r3
   24e56:	d3f3      	bcc.n	24e40 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   24e58:	4b27      	ldr	r3, [pc, #156]	; (24ef8 <Reset_Handler+0xd0>)
   24e5a:	603b      	str	r3, [r7, #0]
   24e5c:	e004      	b.n	24e68 <Reset_Handler+0x40>
                *pDest++ = 0;
   24e5e:	683b      	ldr	r3, [r7, #0]
   24e60:	1d1a      	adds	r2, r3, #4
   24e62:	603a      	str	r2, [r7, #0]
   24e64:	2200      	movs	r2, #0
   24e66:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   24e68:	683a      	ldr	r2, [r7, #0]
   24e6a:	4b24      	ldr	r3, [pc, #144]	; (24efc <Reset_Handler+0xd4>)
   24e6c:	429a      	cmp	r2, r3
   24e6e:	d3f6      	bcc.n	24e5e <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   24e70:	4b23      	ldr	r3, [pc, #140]	; (24f00 <Reset_Handler+0xd8>)
   24e72:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   24e74:	4b23      	ldr	r3, [pc, #140]	; (24f04 <Reset_Handler+0xdc>)
   24e76:	687a      	ldr	r2, [r7, #4]
   24e78:	21ff      	movs	r1, #255	; 0xff
   24e7a:	438a      	bics	r2, r1
   24e7c:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   24e7e:	4a22      	ldr	r2, [pc, #136]	; (24f08 <Reset_Handler+0xe0>)
   24e80:	2390      	movs	r3, #144	; 0x90
   24e82:	005b      	lsls	r3, r3, #1
   24e84:	2102      	movs	r1, #2
   24e86:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   24e88:	4a20      	ldr	r2, [pc, #128]	; (24f0c <Reset_Handler+0xe4>)
   24e8a:	78d3      	ldrb	r3, [r2, #3]
   24e8c:	2103      	movs	r1, #3
   24e8e:	438b      	bics	r3, r1
   24e90:	1c19      	adds	r1, r3, #0
   24e92:	2302      	movs	r3, #2
   24e94:	430b      	orrs	r3, r1
   24e96:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   24e98:	4a1c      	ldr	r2, [pc, #112]	; (24f0c <Reset_Handler+0xe4>)
   24e9a:	78d3      	ldrb	r3, [r2, #3]
   24e9c:	210c      	movs	r1, #12
   24e9e:	438b      	bics	r3, r1
   24ea0:	1c19      	adds	r1, r3, #0
   24ea2:	2308      	movs	r3, #8
   24ea4:	430b      	orrs	r3, r1
   24ea6:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   24ea8:	4a19      	ldr	r2, [pc, #100]	; (24f10 <Reset_Handler+0xe8>)
   24eaa:	7b93      	ldrb	r3, [r2, #14]
   24eac:	2130      	movs	r1, #48	; 0x30
   24eae:	438b      	bics	r3, r1
   24eb0:	1c19      	adds	r1, r3, #0
   24eb2:	2320      	movs	r3, #32
   24eb4:	430b      	orrs	r3, r1
   24eb6:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   24eb8:	4a15      	ldr	r2, [pc, #84]	; (24f10 <Reset_Handler+0xe8>)
   24eba:	7b93      	ldrb	r3, [r2, #14]
   24ebc:	210c      	movs	r1, #12
   24ebe:	438b      	bics	r3, r1
   24ec0:	1c19      	adds	r1, r3, #0
   24ec2:	2308      	movs	r3, #8
   24ec4:	430b      	orrs	r3, r1
   24ec6:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   24ec8:	4a11      	ldr	r2, [pc, #68]	; (24f10 <Reset_Handler+0xe8>)
   24eca:	7b93      	ldrb	r3, [r2, #14]
   24ecc:	2103      	movs	r1, #3
   24ece:	438b      	bics	r3, r1
   24ed0:	1c19      	adds	r1, r3, #0
   24ed2:	2302      	movs	r3, #2
   24ed4:	430b      	orrs	r3, r1
   24ed6:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   24ed8:	4a0e      	ldr	r2, [pc, #56]	; (24f14 <Reset_Handler+0xec>)
   24eda:	6853      	ldr	r3, [r2, #4]
   24edc:	2180      	movs	r1, #128	; 0x80
   24ede:	430b      	orrs	r3, r1
   24ee0:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   24ee2:	4b0d      	ldr	r3, [pc, #52]	; (24f18 <Reset_Handler+0xf0>)
   24ee4:	4798      	blx	r3

        /* Branch to main function */
        main();
   24ee6:	4b0d      	ldr	r3, [pc, #52]	; (24f1c <Reset_Handler+0xf4>)
   24ee8:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   24eea:	e7fe      	b.n	24eea <Reset_Handler+0xc2>
   24eec:	0002b0c4 	.word	0x0002b0c4
   24ef0:	20000000 	.word	0x20000000
   24ef4:	200001fc 	.word	0x200001fc
   24ef8:	20000200 	.word	0x20000200
   24efc:	2000098c 	.word	0x2000098c
   24f00:	00010000 	.word	0x00010000
   24f04:	e000ed00 	.word	0xe000ed00
   24f08:	41007000 	.word	0x41007000
   24f0c:	41005000 	.word	0x41005000
   24f10:	41004800 	.word	0x41004800
   24f14:	41004000 	.word	0x41004000
   24f18:	00028e25 	.word	0x00028e25
   24f1c:	00025151 	.word	0x00025151

00024f20 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   24f20:	b580      	push	{r7, lr}
   24f22:	af00      	add	r7, sp, #0
        while (1) {
   24f24:	e7fe      	b.n	24f24 <Dummy_Handler+0x4>
	...

00024f28 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   24f28:	b580      	push	{r7, lr}
   24f2a:	b084      	sub	sp, #16
   24f2c:	af00      	add	r7, sp, #0
   24f2e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   24f30:	4b0a      	ldr	r3, [pc, #40]	; (24f5c <_sbrk+0x34>)
   24f32:	681b      	ldr	r3, [r3, #0]
   24f34:	2b00      	cmp	r3, #0
   24f36:	d102      	bne.n	24f3e <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   24f38:	4b08      	ldr	r3, [pc, #32]	; (24f5c <_sbrk+0x34>)
   24f3a:	4a09      	ldr	r2, [pc, #36]	; (24f60 <_sbrk+0x38>)
   24f3c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   24f3e:	4b07      	ldr	r3, [pc, #28]	; (24f5c <_sbrk+0x34>)
   24f40:	681b      	ldr	r3, [r3, #0]
   24f42:	60fb      	str	r3, [r7, #12]

	heap += incr;
   24f44:	4b05      	ldr	r3, [pc, #20]	; (24f5c <_sbrk+0x34>)
   24f46:	681a      	ldr	r2, [r3, #0]
   24f48:	687b      	ldr	r3, [r7, #4]
   24f4a:	18d2      	adds	r2, r2, r3
   24f4c:	4b03      	ldr	r3, [pc, #12]	; (24f5c <_sbrk+0x34>)
   24f4e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   24f50:	68fb      	ldr	r3, [r7, #12]
}
   24f52:	0018      	movs	r0, r3
   24f54:	46bd      	mov	sp, r7
   24f56:	b004      	add	sp, #16
   24f58:	bd80      	pop	{r7, pc}
   24f5a:	46c0      	nop			; (mov r8, r8)
   24f5c:	20000508 	.word	0x20000508
   24f60:	20002990 	.word	0x20002990

00024f64 <system_apb_clock_clear_mask>:
{
   24f64:	b580      	push	{r7, lr}
   24f66:	b082      	sub	sp, #8
   24f68:	af00      	add	r7, sp, #0
   24f6a:	0002      	movs	r2, r0
   24f6c:	6039      	str	r1, [r7, #0]
   24f6e:	1dfb      	adds	r3, r7, #7
   24f70:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   24f72:	1dfb      	adds	r3, r7, #7
   24f74:	781b      	ldrb	r3, [r3, #0]
   24f76:	2b01      	cmp	r3, #1
   24f78:	d00b      	beq.n	24f92 <system_apb_clock_clear_mask+0x2e>
   24f7a:	2b02      	cmp	r3, #2
   24f7c:	d011      	beq.n	24fa2 <system_apb_clock_clear_mask+0x3e>
   24f7e:	2b00      	cmp	r3, #0
   24f80:	d117      	bne.n	24fb2 <system_apb_clock_clear_mask+0x4e>
			PM->APBAMASK.reg &= ~mask;
   24f82:	4b0f      	ldr	r3, [pc, #60]	; (24fc0 <system_apb_clock_clear_mask+0x5c>)
   24f84:	4a0e      	ldr	r2, [pc, #56]	; (24fc0 <system_apb_clock_clear_mask+0x5c>)
   24f86:	6992      	ldr	r2, [r2, #24]
   24f88:	6839      	ldr	r1, [r7, #0]
   24f8a:	43c9      	mvns	r1, r1
   24f8c:	400a      	ands	r2, r1
   24f8e:	619a      	str	r2, [r3, #24]
			break;
   24f90:	e011      	b.n	24fb6 <system_apb_clock_clear_mask+0x52>
			PM->APBBMASK.reg &= ~mask;
   24f92:	4b0b      	ldr	r3, [pc, #44]	; (24fc0 <system_apb_clock_clear_mask+0x5c>)
   24f94:	4a0a      	ldr	r2, [pc, #40]	; (24fc0 <system_apb_clock_clear_mask+0x5c>)
   24f96:	69d2      	ldr	r2, [r2, #28]
   24f98:	6839      	ldr	r1, [r7, #0]
   24f9a:	43c9      	mvns	r1, r1
   24f9c:	400a      	ands	r2, r1
   24f9e:	61da      	str	r2, [r3, #28]
			break;
   24fa0:	e009      	b.n	24fb6 <system_apb_clock_clear_mask+0x52>
			PM->APBCMASK.reg &= ~mask;
   24fa2:	4b07      	ldr	r3, [pc, #28]	; (24fc0 <system_apb_clock_clear_mask+0x5c>)
   24fa4:	4a06      	ldr	r2, [pc, #24]	; (24fc0 <system_apb_clock_clear_mask+0x5c>)
   24fa6:	6a12      	ldr	r2, [r2, #32]
   24fa8:	6839      	ldr	r1, [r7, #0]
   24faa:	43c9      	mvns	r1, r1
   24fac:	400a      	ands	r2, r1
   24fae:	621a      	str	r2, [r3, #32]
			break;
   24fb0:	e001      	b.n	24fb6 <system_apb_clock_clear_mask+0x52>
			return STATUS_ERR_INVALID_ARG;
   24fb2:	2317      	movs	r3, #23
   24fb4:	e000      	b.n	24fb8 <system_apb_clock_clear_mask+0x54>
	return STATUS_OK;
   24fb6:	2300      	movs	r3, #0
}
   24fb8:	0018      	movs	r0, r3
   24fba:	46bd      	mov	sp, r7
   24fbc:	b002      	add	sp, #8
   24fbe:	bd80      	pop	{r7, pc}
   24fc0:	40000400 	.word	0x40000400

00024fc4 <system_interrupt_enable_global>:
{
   24fc4:	b580      	push	{r7, lr}
   24fc6:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   24fc8:	4b04      	ldr	r3, [pc, #16]	; (24fdc <system_interrupt_enable_global+0x18>)
   24fca:	2201      	movs	r2, #1
   24fcc:	701a      	strb	r2, [r3, #0]
   24fce:	f3bf 8f5f 	dmb	sy
   24fd2:	b662      	cpsie	i
}
   24fd4:	46c0      	nop			; (mov r8, r8)
   24fd6:	46bd      	mov	sp, r7
   24fd8:	bd80      	pop	{r7, pc}
   24fda:	46c0      	nop			; (mov r8, r8)
   24fdc:	20000028 	.word	0x20000028

00024fe0 <system_pinmux_get_group_from_gpio_pin>:
{
   24fe0:	b580      	push	{r7, lr}
   24fe2:	b084      	sub	sp, #16
   24fe4:	af00      	add	r7, sp, #0
   24fe6:	0002      	movs	r2, r0
   24fe8:	1dfb      	adds	r3, r7, #7
   24fea:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   24fec:	230f      	movs	r3, #15
   24fee:	18fb      	adds	r3, r7, r3
   24ff0:	1dfa      	adds	r2, r7, #7
   24ff2:	7812      	ldrb	r2, [r2, #0]
   24ff4:	09d2      	lsrs	r2, r2, #7
   24ff6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   24ff8:	230e      	movs	r3, #14
   24ffa:	18fb      	adds	r3, r7, r3
   24ffc:	1dfa      	adds	r2, r7, #7
   24ffe:	7812      	ldrb	r2, [r2, #0]
   25000:	0952      	lsrs	r2, r2, #5
   25002:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   25004:	4b0d      	ldr	r3, [pc, #52]	; (2503c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   25006:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   25008:	230f      	movs	r3, #15
   2500a:	18fb      	adds	r3, r7, r3
   2500c:	781b      	ldrb	r3, [r3, #0]
   2500e:	2b00      	cmp	r3, #0
   25010:	d10f      	bne.n	25032 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   25012:	230f      	movs	r3, #15
   25014:	18fb      	adds	r3, r7, r3
   25016:	781b      	ldrb	r3, [r3, #0]
   25018:	009b      	lsls	r3, r3, #2
   2501a:	2210      	movs	r2, #16
   2501c:	4694      	mov	ip, r2
   2501e:	44bc      	add	ip, r7
   25020:	4463      	add	r3, ip
   25022:	3b08      	subs	r3, #8
   25024:	681a      	ldr	r2, [r3, #0]
   25026:	230e      	movs	r3, #14
   25028:	18fb      	adds	r3, r7, r3
   2502a:	781b      	ldrb	r3, [r3, #0]
   2502c:	01db      	lsls	r3, r3, #7
   2502e:	18d3      	adds	r3, r2, r3
   25030:	e000      	b.n	25034 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   25032:	2300      	movs	r3, #0
}
   25034:	0018      	movs	r0, r3
   25036:	46bd      	mov	sp, r7
   25038:	b004      	add	sp, #16
   2503a:	bd80      	pop	{r7, pc}
   2503c:	41004400 	.word	0x41004400

00025040 <system_set_sleepmode>:
 * \retval STATUS_ERR_INVALID_ARG  The requested sleep mode was invalid or not
 *                                 available
 */
static inline enum status_code system_set_sleepmode(
	const enum system_sleepmode sleep_mode)
{
   25040:	b580      	push	{r7, lr}
   25042:	b084      	sub	sp, #16
   25044:	af00      	add	r7, sp, #0
   25046:	0002      	movs	r2, r0
   25048:	1dfb      	adds	r3, r7, #7
   2504a:	701a      	strb	r2, [r3, #0]

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
   2504c:	4b1a      	ldr	r3, [pc, #104]	; (250b8 <system_set_sleepmode+0x78>)
   2504e:	699b      	ldr	r3, [r3, #24]
   25050:	60fb      	str	r3, [r7, #12]

	rev &= DSU_DID_REVISION_Msk;
   25052:	68fa      	ldr	r2, [r7, #12]
   25054:	23f0      	movs	r3, #240	; 0xf0
   25056:	011b      	lsls	r3, r3, #4
   25058:	4013      	ands	r3, r2
   2505a:	60fb      	str	r3, [r7, #12]
	rev = rev >> DSU_DID_REVISION_Pos;
   2505c:	68fb      	ldr	r3, [r7, #12]
   2505e:	0a1b      	lsrs	r3, r3, #8
   25060:	60fb      	str	r3, [r7, #12]
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
	}
#endif

#if (SAMD21 || SAMR21)
	if (rev < _SYSTEM_MCU_REVISION_D) {
   25062:	68fb      	ldr	r3, [r7, #12]
   25064:	2b02      	cmp	r3, #2
   25066:	d805      	bhi.n	25074 <system_set_sleepmode+0x34>
		/* Errata 13140: Make sure that the Flash does not power all the way down
		 * when in sleep mode. */
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
   25068:	4a14      	ldr	r2, [pc, #80]	; (250bc <system_set_sleepmode+0x7c>)
   2506a:	6853      	ldr	r3, [r2, #4]
   2506c:	21c0      	movs	r1, #192	; 0xc0
   2506e:	0089      	lsls	r1, r1, #2
   25070:	430b      	orrs	r3, r1
   25072:	6053      	str	r3, [r2, #4]
	}
#endif

#endif

	switch (sleep_mode) {
   25074:	1dfb      	adds	r3, r7, #7
   25076:	781b      	ldrb	r3, [r3, #0]
   25078:	2b00      	cmp	r3, #0
   2507a:	db16      	blt.n	250aa <system_set_sleepmode+0x6a>
   2507c:	2b02      	cmp	r3, #2
   2507e:	dd02      	ble.n	25086 <system_set_sleepmode+0x46>
   25080:	2b03      	cmp	r3, #3
   25082:	d00b      	beq.n	2509c <system_set_sleepmode+0x5c>
   25084:	e011      	b.n	250aa <system_set_sleepmode+0x6a>
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
   25086:	4b0e      	ldr	r3, [pc, #56]	; (250c0 <system_set_sleepmode+0x80>)
   25088:	4a0d      	ldr	r2, [pc, #52]	; (250c0 <system_set_sleepmode+0x80>)
   2508a:	6912      	ldr	r2, [r2, #16]
   2508c:	2104      	movs	r1, #4
   2508e:	438a      	bics	r2, r1
   25090:	611a      	str	r2, [r3, #16]
			PM->SLEEP.reg = sleep_mode;
   25092:	4a0c      	ldr	r2, [pc, #48]	; (250c4 <system_set_sleepmode+0x84>)
   25094:	1dfb      	adds	r3, r7, #7
   25096:	781b      	ldrb	r3, [r3, #0]
   25098:	7053      	strb	r3, [r2, #1]
			break;
   2509a:	e008      	b.n	250ae <system_set_sleepmode+0x6e>

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
   2509c:	4b08      	ldr	r3, [pc, #32]	; (250c0 <system_set_sleepmode+0x80>)
   2509e:	4a08      	ldr	r2, [pc, #32]	; (250c0 <system_set_sleepmode+0x80>)
   250a0:	6912      	ldr	r2, [r2, #16]
   250a2:	2104      	movs	r1, #4
   250a4:	430a      	orrs	r2, r1
   250a6:	611a      	str	r2, [r3, #16]
			break;
   250a8:	e001      	b.n	250ae <system_set_sleepmode+0x6e>

		default:
			return STATUS_ERR_INVALID_ARG;
   250aa:	2317      	movs	r3, #23
   250ac:	e000      	b.n	250b0 <system_set_sleepmode+0x70>
	}

	return STATUS_OK;
   250ae:	2300      	movs	r3, #0
}
   250b0:	0018      	movs	r0, r3
   250b2:	46bd      	mov	sp, r7
   250b4:	b004      	add	sp, #16
   250b6:	bd80      	pop	{r7, pc}
   250b8:	41002000 	.word	0x41002000
   250bc:	41004000 	.word	0x41004000
   250c0:	e000ed00 	.word	0xe000ed00
   250c4:	40000400 	.word	0x40000400

000250c8 <system_sleep>:
 * all ongoing memory accesses have completed, then a WFI (Wait For Interrupt)
 * instruction to place the device into the sleep mode specified by
 * \ref system_set_sleepmode until woken by an interrupt.
 */
static inline void system_sleep(void)
{
   250c8:	b580      	push	{r7, lr}
   250ca:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
   250cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
   250d0:	bf30      	wfi
	__DSB();
	__WFI();
}
   250d2:	46c0      	nop			; (mov r8, r8)
   250d4:	46bd      	mov	sp, r7
   250d6:	bd80      	pop	{r7, pc}

000250d8 <port_get_group_from_gpio_pin>:
{
   250d8:	b580      	push	{r7, lr}
   250da:	b082      	sub	sp, #8
   250dc:	af00      	add	r7, sp, #0
   250de:	0002      	movs	r2, r0
   250e0:	1dfb      	adds	r3, r7, #7
   250e2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   250e4:	1dfb      	adds	r3, r7, #7
   250e6:	781b      	ldrb	r3, [r3, #0]
   250e8:	0018      	movs	r0, r3
   250ea:	4b03      	ldr	r3, [pc, #12]	; (250f8 <port_get_group_from_gpio_pin+0x20>)
   250ec:	4798      	blx	r3
   250ee:	0003      	movs	r3, r0
}
   250f0:	0018      	movs	r0, r3
   250f2:	46bd      	mov	sp, r7
   250f4:	b002      	add	sp, #8
   250f6:	bd80      	pop	{r7, pc}
   250f8:	00024fe1 	.word	0x00024fe1

000250fc <port_pin_set_output_level>:
{
   250fc:	b580      	push	{r7, lr}
   250fe:	b084      	sub	sp, #16
   25100:	af00      	add	r7, sp, #0
   25102:	0002      	movs	r2, r0
   25104:	1dfb      	adds	r3, r7, #7
   25106:	701a      	strb	r2, [r3, #0]
   25108:	1dbb      	adds	r3, r7, #6
   2510a:	1c0a      	adds	r2, r1, #0
   2510c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2510e:	1dfb      	adds	r3, r7, #7
   25110:	781b      	ldrb	r3, [r3, #0]
   25112:	0018      	movs	r0, r3
   25114:	4b0d      	ldr	r3, [pc, #52]	; (2514c <port_pin_set_output_level+0x50>)
   25116:	4798      	blx	r3
   25118:	0003      	movs	r3, r0
   2511a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   2511c:	1dfb      	adds	r3, r7, #7
   2511e:	781b      	ldrb	r3, [r3, #0]
   25120:	221f      	movs	r2, #31
   25122:	4013      	ands	r3, r2
   25124:	2201      	movs	r2, #1
   25126:	409a      	lsls	r2, r3
   25128:	0013      	movs	r3, r2
   2512a:	60bb      	str	r3, [r7, #8]
	if (level) {
   2512c:	1dbb      	adds	r3, r7, #6
   2512e:	781b      	ldrb	r3, [r3, #0]
   25130:	2b00      	cmp	r3, #0
   25132:	d003      	beq.n	2513c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   25134:	68fb      	ldr	r3, [r7, #12]
   25136:	68ba      	ldr	r2, [r7, #8]
   25138:	619a      	str	r2, [r3, #24]
}
   2513a:	e002      	b.n	25142 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   2513c:	68fb      	ldr	r3, [r7, #12]
   2513e:	68ba      	ldr	r2, [r7, #8]
   25140:	615a      	str	r2, [r3, #20]
}
   25142:	46c0      	nop			; (mov r8, r8)
   25144:	46bd      	mov	sp, r7
   25146:	b004      	add	sp, #16
   25148:	bd80      	pop	{r7, pc}
   2514a:	46c0      	nop			; (mov r8, r8)
   2514c:	000250d9 	.word	0x000250d9

00025150 <main>:

bool initSleepSeqeunce=false;
uint32_t tempSleepWait=0;

int main (void)
{
   25150:	b590      	push	{r4, r7, lr}
   25152:	b083      	sub	sp, #12
   25154:	af02      	add	r7, sp, #8
	system_init();
   25156:	4b18      	ldr	r3, [pc, #96]	; (251b8 <main+0x68>)
   25158:	4798      	blx	r3
	
	/* Disable digital interfaces to unused peripherals */
	system_apb_clock_clear_mask(SYSTEM_CLOCK_APB_APBA,
   2515a:	2111      	movs	r1, #17
   2515c:	2000      	movs	r0, #0
   2515e:	4b17      	ldr	r3, [pc, #92]	; (251bc <main+0x6c>)
   25160:	4798      	blx	r3
	PM_APBAMASK_PAC0 | PM_APBAMASK_WDT);
	system_apb_clock_clear_mask(SYSTEM_CLOCK_APB_APBB,
   25162:	2103      	movs	r1, #3
   25164:	2001      	movs	r0, #1
   25166:	4b15      	ldr	r3, [pc, #84]	; (251bc <main+0x6c>)
   25168:	4798      	blx	r3
	PM_APBBMASK_PAC1 | PM_APBBMASK_DSU);
	system_apb_clock_clear_mask(SYSTEM_CLOCK_APB_APBC,
   2516a:	4b15      	ldr	r3, [pc, #84]	; (251c0 <main+0x70>)
   2516c:	0019      	movs	r1, r3
   2516e:	2002      	movs	r0, #2
   25170:	4b12      	ldr	r3, [pc, #72]	; (251bc <main+0x6c>)
   25172:	4798      	blx	r3
	PM_APBCMASK_PAC2 | PM_APBCMASK_AC | PM_APBCMASK_DAC);
	
	/* Disable NVM low power mode during sleep due to lockups (device errata) */
	NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
   25174:	4a13      	ldr	r2, [pc, #76]	; (251c4 <main+0x74>)
   25176:	6853      	ldr	r3, [r2, #4]
   25178:	21c0      	movs	r1, #192	; 0xc0
   2517a:	0089      	lsls	r1, r1, #2
   2517c:	430b      	orrs	r3, r1
   2517e:	6053      	str	r3, [r2, #4]
	
	system_set_sleepmode(SYSTEM_SLEEPMODE_STANDBY);
   25180:	2003      	movs	r0, #3
   25182:	4b11      	ldr	r3, [pc, #68]	; (251c8 <main+0x78>)
   25184:	4798      	blx	r3
	
	system_interrupt_enable_global();
   25186:	4b11      	ldr	r3, [pc, #68]	; (251cc <main+0x7c>)
   25188:	4798      	blx	r3
	
	//irq_initialize_vectors();
	//cpu_irq_enable();
	delay_init();
   2518a:	4b11      	ldr	r3, [pc, #68]	; (251d0 <main+0x80>)
   2518c:	4798      	blx	r3
	init_eeprom();
   2518e:	4b11      	ldr	r3, [pc, #68]	; (251d4 <main+0x84>)
   25190:	4798      	blx	r3
	
	
	
	start_lcd_service();
   25192:	4b11      	ldr	r3, [pc, #68]	; (251d8 <main+0x88>)
   25194:	4798      	blx	r3
	start_gsm_service();
   25196:	4b11      	ldr	r3, [pc, #68]	; (251dc <main+0x8c>)
   25198:	4798      	blx	r3
	start_motor_service();
   2519a:	4b11      	ldr	r3, [pc, #68]	; (251e0 <main+0x90>)
   2519c:	4798      	blx	r3
	
	xTaskCreate(vTask_sleep_manager,NULL,(uint16_t)100,NULL,1,NULL);
   2519e:	4811      	ldr	r0, [pc, #68]	; (251e4 <main+0x94>)
   251a0:	2300      	movs	r3, #0
   251a2:	9301      	str	r3, [sp, #4]
   251a4:	2301      	movs	r3, #1
   251a6:	9300      	str	r3, [sp, #0]
   251a8:	2300      	movs	r3, #0
   251aa:	2264      	movs	r2, #100	; 0x64
   251ac:	2100      	movs	r1, #0
   251ae:	4c0e      	ldr	r4, [pc, #56]	; (251e8 <main+0x98>)
   251b0:	47a0      	blx	r4
	
	vTaskStartScheduler();
   251b2:	4b0e      	ldr	r3, [pc, #56]	; (251ec <main+0x9c>)
   251b4:	4798      	blx	r3
	
	for (;;)
   251b6:	e7fe      	b.n	251b6 <main+0x66>
   251b8:	00024df5 	.word	0x00024df5
   251bc:	00024f65 	.word	0x00024f65
   251c0:	00060001 	.word	0x00060001
   251c4:	41004000 	.word	0x41004000
   251c8:	00025041 	.word	0x00025041
   251cc:	00024fc5 	.word	0x00024fc5
   251d0:	00022a1d 	.word	0x00022a1d
   251d4:	00010151 	.word	0x00010151
   251d8:	000189b5 	.word	0x000189b5
   251dc:	000180d1 	.word	0x000180d1
   251e0:	0001c35d 	.word	0x0001c35d
   251e4:	00025239 	.word	0x00025239
   251e8:	0001fca9 	.word	0x0001fca9
   251ec:	0002017d 	.word	0x0002017d

000251f0 <checkSleepElligible>:
	}
}


bool checkSleepElligible(void)
{
   251f0:	b580      	push	{r7, lr}
   251f2:	af00      	add	r7, sp, #0
	return (/*!turnOffTimerOn && */!getACPowerState() && motor_checkSleepElligible() && gsm_checkSleepElligible());
   251f4:	4b0d      	ldr	r3, [pc, #52]	; (2522c <checkSleepElligible+0x3c>)
   251f6:	4798      	blx	r3
   251f8:	0003      	movs	r3, r0
   251fa:	001a      	movs	r2, r3
   251fc:	2301      	movs	r3, #1
   251fe:	4053      	eors	r3, r2
   25200:	b2db      	uxtb	r3, r3
   25202:	2b00      	cmp	r3, #0
   25204:	d009      	beq.n	2521a <checkSleepElligible+0x2a>
   25206:	4b0a      	ldr	r3, [pc, #40]	; (25230 <checkSleepElligible+0x40>)
   25208:	4798      	blx	r3
   2520a:	1e03      	subs	r3, r0, #0
   2520c:	d005      	beq.n	2521a <checkSleepElligible+0x2a>
   2520e:	4b09      	ldr	r3, [pc, #36]	; (25234 <checkSleepElligible+0x44>)
   25210:	4798      	blx	r3
   25212:	1e03      	subs	r3, r0, #0
   25214:	d001      	beq.n	2521a <checkSleepElligible+0x2a>
   25216:	2301      	movs	r3, #1
   25218:	e000      	b.n	2521c <checkSleepElligible+0x2c>
   2521a:	2300      	movs	r3, #0
   2521c:	1c1a      	adds	r2, r3, #0
   2521e:	2301      	movs	r3, #1
   25220:	4013      	ands	r3, r2
   25222:	b2db      	uxtb	r3, r3
}
   25224:	0018      	movs	r0, r3
   25226:	46bd      	mov	sp, r7
   25228:	bd80      	pop	{r7, pc}
   2522a:	46c0      	nop			; (mov r8, r8)
   2522c:	0001ac01 	.word	0x0001ac01
   25230:	0001c681 	.word	0x0001c681
   25234:	00018199 	.word	0x00018199

00025238 <vTask_sleep_manager>:

static void vTask_sleep_manager(void *params)
{
   25238:	b580      	push	{r7, lr}
   2523a:	b084      	sub	sp, #16
   2523c:	af00      	add	r7, sp, #0
   2523e:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	for (;;)
	{
		if (checkSleepElligible())
   25240:	4b34      	ldr	r3, [pc, #208]	; (25314 <vTask_sleep_manager+0xdc>)
   25242:	4798      	blx	r3
   25244:	1e03      	subs	r3, r0, #0
   25246:	d060      	beq.n	2530a <vTask_sleep_manager+0xd2>
		{
			if(!initSleepSeqeunce)
   25248:	4b33      	ldr	r3, [pc, #204]	; (25318 <vTask_sleep_manager+0xe0>)
   2524a:	781b      	ldrb	r3, [r3, #0]
   2524c:	2201      	movs	r2, #1
   2524e:	4053      	eors	r3, r2
   25250:	b2db      	uxtb	r3, r3
   25252:	2b00      	cmp	r3, #0
   25254:	d008      	beq.n	25268 <vTask_sleep_manager+0x30>
			{
				tempSleepWait=xTaskGetTickCount();
   25256:	4b31      	ldr	r3, [pc, #196]	; (2531c <vTask_sleep_manager+0xe4>)
   25258:	4798      	blx	r3
   2525a:	0002      	movs	r2, r0
   2525c:	4b30      	ldr	r3, [pc, #192]	; (25320 <vTask_sleep_manager+0xe8>)
   2525e:	601a      	str	r2, [r3, #0]
				initSleepSeqeunce=true;
   25260:	4b2d      	ldr	r3, [pc, #180]	; (25318 <vTask_sleep_manager+0xe0>)
   25262:	2201      	movs	r2, #1
   25264:	701a      	strb	r2, [r3, #0]
   25266:	e7eb      	b.n	25240 <vTask_sleep_manager+0x8>
			}
			else if(initSleepSeqeunce && xTaskGetTickCount()-tempSleepWait>sleepWaitTime)
   25268:	4b2b      	ldr	r3, [pc, #172]	; (25318 <vTask_sleep_manager+0xe0>)
   2526a:	781b      	ldrb	r3, [r3, #0]
   2526c:	2b00      	cmp	r3, #0
   2526e:	d0e7      	beq.n	25240 <vTask_sleep_manager+0x8>
   25270:	4b2a      	ldr	r3, [pc, #168]	; (2531c <vTask_sleep_manager+0xe4>)
   25272:	4798      	blx	r3
   25274:	0002      	movs	r2, r0
   25276:	4b2a      	ldr	r3, [pc, #168]	; (25320 <vTask_sleep_manager+0xe8>)
   25278:	681b      	ldr	r3, [r3, #0]
   2527a:	1ad3      	subs	r3, r2, r3
   2527c:	4a29      	ldr	r2, [pc, #164]	; (25324 <vTask_sleep_manager+0xec>)
   2527e:	4293      	cmp	r3, r2
   25280:	d9de      	bls.n	25240 <vTask_sleep_manager+0x8>
			{
				uint8_t cnt=10;
   25282:	230f      	movs	r3, #15
   25284:	18fb      	adds	r3, r7, r3
   25286:	220a      	movs	r2, #10
   25288:	701a      	strb	r2, [r3, #0]
				bool led=false;
   2528a:	230e      	movs	r3, #14
   2528c:	18fb      	adds	r3, r7, r3
   2528e:	2200      	movs	r2, #0
   25290:	701a      	strb	r2, [r3, #0]
				do
				{
					led=!led;
   25292:	230e      	movs	r3, #14
   25294:	18fb      	adds	r3, r7, r3
   25296:	781b      	ldrb	r3, [r3, #0]
   25298:	1e5a      	subs	r2, r3, #1
   2529a:	4193      	sbcs	r3, r2
   2529c:	b2db      	uxtb	r3, r3
   2529e:	2201      	movs	r2, #1
   252a0:	4053      	eors	r3, r2
   252a2:	b2db      	uxtb	r3, r3
   252a4:	001a      	movs	r2, r3
   252a6:	230e      	movs	r3, #14
   252a8:	18fb      	adds	r3, r7, r3
   252aa:	701a      	strb	r2, [r3, #0]
   252ac:	781a      	ldrb	r2, [r3, #0]
   252ae:	2101      	movs	r1, #1
   252b0:	400a      	ands	r2, r1
   252b2:	701a      	strb	r2, [r3, #0]
					if(led)
   252b4:	230e      	movs	r3, #14
   252b6:	18fb      	adds	r3, r7, r3
   252b8:	781b      	ldrb	r3, [r3, #0]
   252ba:	2b00      	cmp	r3, #0
   252bc:	d004      	beq.n	252c8 <vTask_sleep_manager+0x90>
					THREEPHASE_OK_LED_ON;
   252be:	2100      	movs	r1, #0
   252c0:	2027      	movs	r0, #39	; 0x27
   252c2:	4b19      	ldr	r3, [pc, #100]	; (25328 <vTask_sleep_manager+0xf0>)
   252c4:	4798      	blx	r3
   252c6:	e003      	b.n	252d0 <vTask_sleep_manager+0x98>
					else
					THREEPHASE_OK_LED_OFF;
   252c8:	2101      	movs	r1, #1
   252ca:	2027      	movs	r0, #39	; 0x27
   252cc:	4b16      	ldr	r3, [pc, #88]	; (25328 <vTask_sleep_manager+0xf0>)
   252ce:	4798      	blx	r3

					tempSleepWait=xTaskGetTickCount();
   252d0:	4b12      	ldr	r3, [pc, #72]	; (2531c <vTask_sleep_manager+0xe4>)
   252d2:	4798      	blx	r3
   252d4:	0002      	movs	r2, r0
   252d6:	4b12      	ldr	r3, [pc, #72]	; (25320 <vTask_sleep_manager+0xe8>)
   252d8:	601a      	str	r2, [r3, #0]
					while(xTaskGetTickCount()-tempSleepWait<200)
   252da:	46c0      	nop			; (mov r8, r8)
   252dc:	4b0f      	ldr	r3, [pc, #60]	; (2531c <vTask_sleep_manager+0xe4>)
   252de:	4798      	blx	r3
   252e0:	0002      	movs	r2, r0
   252e2:	4b0f      	ldr	r3, [pc, #60]	; (25320 <vTask_sleep_manager+0xe8>)
   252e4:	681b      	ldr	r3, [r3, #0]
   252e6:	1ad3      	subs	r3, r2, r3
   252e8:	2bc7      	cmp	r3, #199	; 0xc7
   252ea:	d9f7      	bls.n	252dc <vTask_sleep_manager+0xa4>
					{}
				}while(--cnt);
   252ec:	230f      	movs	r3, #15
   252ee:	18fb      	adds	r3, r7, r3
   252f0:	220f      	movs	r2, #15
   252f2:	18ba      	adds	r2, r7, r2
   252f4:	7812      	ldrb	r2, [r2, #0]
   252f6:	3a01      	subs	r2, #1
   252f8:	701a      	strb	r2, [r3, #0]
   252fa:	230f      	movs	r3, #15
   252fc:	18fb      	adds	r3, r7, r3
   252fe:	781b      	ldrb	r3, [r3, #0]
   25300:	2b00      	cmp	r3, #0
   25302:	d1c6      	bne.n	25292 <vTask_sleep_manager+0x5a>
				
				gotoSleep();
   25304:	4b09      	ldr	r3, [pc, #36]	; (2532c <vTask_sleep_manager+0xf4>)
   25306:	4798      	blx	r3
   25308:	e79a      	b.n	25240 <vTask_sleep_manager+0x8>
			}
		}
		else
		{
			initSleepSeqeunce=false;
   2530a:	4b03      	ldr	r3, [pc, #12]	; (25318 <vTask_sleep_manager+0xe0>)
   2530c:	2200      	movs	r2, #0
   2530e:	701a      	strb	r2, [r3, #0]
		if (checkSleepElligible())
   25310:	e796      	b.n	25240 <vTask_sleep_manager+0x8>
   25312:	46c0      	nop			; (mov r8, r8)
   25314:	000251f1 	.word	0x000251f1
   25318:	2000050c 	.word	0x2000050c
   2531c:	0002034d 	.word	0x0002034d
   25320:	20000510 	.word	0x20000510
   25324:	00004650 	.word	0x00004650
   25328:	000250fd 	.word	0x000250fd
   2532c:	00025331 	.word	0x00025331

00025330 <gotoSleep>:
		}
	}
}

void gotoSleep(void)
{
   25330:	b580      	push	{r7, lr}
   25332:	af00      	add	r7, sp, #0
	LCD_PWR_DIS();
   25334:	4b07      	ldr	r3, [pc, #28]	; (25354 <gotoSleep+0x24>)
   25336:	4798      	blx	r3
	
	lcd_in_sleep = true;
   25338:	4b07      	ldr	r3, [pc, #28]	; (25358 <gotoSleep+0x28>)
   2533a:	2201      	movs	r2, #1
   2533c:	701a      	strb	r2, [r3, #0]
	setNetworkCharacter=true;
   2533e:	4b07      	ldr	r3, [pc, #28]	; (2535c <gotoSleep+0x2c>)
   25340:	2201      	movs	r2, #1
   25342:	701a      	strb	r2, [r3, #0]
	system_sleep();
   25344:	4b06      	ldr	r3, [pc, #24]	; (25360 <gotoSleep+0x30>)
   25346:	4798      	blx	r3
	mcuWakeUpFromSleep=true;
   25348:	4b06      	ldr	r3, [pc, #24]	; (25364 <gotoSleep+0x34>)
   2534a:	2201      	movs	r2, #1
   2534c:	701a      	strb	r2, [r3, #0]
   2534e:	46c0      	nop			; (mov r8, r8)
   25350:	46bd      	mov	sp, r7
   25352:	bd80      	pop	{r7, pc}
   25354:	00013af5 	.word	0x00013af5
   25358:	20000863 	.word	0x20000863
   2535c:	20000864 	.word	0x20000864
   25360:	000250c9 	.word	0x000250c9
   25364:	20000840 	.word	0x20000840

00025368 <pow>:
   25368:	b5f0      	push	{r4, r5, r6, r7, lr}
   2536a:	4657      	mov	r7, sl
   2536c:	464e      	mov	r6, r9
   2536e:	46de      	mov	lr, fp
   25370:	4645      	mov	r5, r8
   25372:	b5e0      	push	{r5, r6, r7, lr}
   25374:	b08f      	sub	sp, #60	; 0x3c
   25376:	001d      	movs	r5, r3
   25378:	0006      	movs	r6, r0
   2537a:	000f      	movs	r7, r1
   2537c:	0014      	movs	r4, r2
   2537e:	f000 f9ff 	bl	25780 <__ieee754_pow>
   25382:	4bc7      	ldr	r3, [pc, #796]	; (256a0 <pow+0x338>)
   25384:	9000      	str	r0, [sp, #0]
   25386:	9101      	str	r1, [sp, #4]
   25388:	469a      	mov	sl, r3
   2538a:	781b      	ldrb	r3, [r3, #0]
   2538c:	b25b      	sxtb	r3, r3
   2538e:	4699      	mov	r9, r3
   25390:	3301      	adds	r3, #1
   25392:	d03e      	beq.n	25412 <pow+0xaa>
   25394:	0022      	movs	r2, r4
   25396:	002b      	movs	r3, r5
   25398:	0020      	movs	r0, r4
   2539a:	0029      	movs	r1, r5
   2539c:	f003 fbe2 	bl	28b64 <__aeabi_dcmpun>
   253a0:	4683      	mov	fp, r0
   253a2:	2800      	cmp	r0, #0
   253a4:	d135      	bne.n	25412 <pow+0xaa>
   253a6:	0032      	movs	r2, r6
   253a8:	003b      	movs	r3, r7
   253aa:	0030      	movs	r0, r6
   253ac:	0039      	movs	r1, r7
   253ae:	f003 fbd9 	bl	28b64 <__aeabi_dcmpun>
   253b2:	2200      	movs	r2, #0
   253b4:	9003      	str	r0, [sp, #12]
   253b6:	2800      	cmp	r0, #0
   253b8:	d000      	beq.n	253bc <pow+0x54>
   253ba:	e0b6      	b.n	2552a <pow+0x1c2>
   253bc:	2300      	movs	r3, #0
   253be:	0030      	movs	r0, r6
   253c0:	0039      	movs	r1, r7
   253c2:	f001 faa1 	bl	26908 <__aeabi_dcmpeq>
   253c6:	2800      	cmp	r0, #0
   253c8:	d02c      	beq.n	25424 <pow+0xbc>
   253ca:	2200      	movs	r2, #0
   253cc:	2300      	movs	r3, #0
   253ce:	0020      	movs	r0, r4
   253d0:	0029      	movs	r1, r5
   253d2:	f001 fa99 	bl	26908 <__aeabi_dcmpeq>
   253d6:	4683      	mov	fp, r0
   253d8:	2800      	cmp	r0, #0
   253da:	d100      	bne.n	253de <pow+0x76>
   253dc:	e077      	b.n	254ce <pow+0x166>
   253de:	ab04      	add	r3, sp, #16
   253e0:	4698      	mov	r8, r3
   253e2:	2301      	movs	r3, #1
   253e4:	4642      	mov	r2, r8
   253e6:	9304      	str	r3, [sp, #16]
   253e8:	4bae      	ldr	r3, [pc, #696]	; (256a4 <pow+0x33c>)
   253ea:	6053      	str	r3, [r2, #4]
   253ec:	4643      	mov	r3, r8
   253ee:	9a03      	ldr	r2, [sp, #12]
   253f0:	611c      	str	r4, [r3, #16]
   253f2:	615d      	str	r5, [r3, #20]
   253f4:	621a      	str	r2, [r3, #32]
   253f6:	609e      	str	r6, [r3, #8]
   253f8:	60df      	str	r7, [r3, #12]
   253fa:	4642      	mov	r2, r8
   253fc:	2300      	movs	r3, #0
   253fe:	2400      	movs	r4, #0
   25400:	6193      	str	r3, [r2, #24]
   25402:	61d4      	str	r4, [r2, #28]
   25404:	464b      	mov	r3, r9
   25406:	2b00      	cmp	r3, #0
   25408:	d04d      	beq.n	254a6 <pow+0x13e>
   2540a:	2300      	movs	r3, #0
   2540c:	4ca6      	ldr	r4, [pc, #664]	; (256a8 <pow+0x340>)
   2540e:	9300      	str	r3, [sp, #0]
   25410:	9401      	str	r4, [sp, #4]
   25412:	9800      	ldr	r0, [sp, #0]
   25414:	9901      	ldr	r1, [sp, #4]
   25416:	b00f      	add	sp, #60	; 0x3c
   25418:	bc3c      	pop	{r2, r3, r4, r5}
   2541a:	4690      	mov	r8, r2
   2541c:	4699      	mov	r9, r3
   2541e:	46a2      	mov	sl, r4
   25420:	46ab      	mov	fp, r5
   25422:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25424:	9800      	ldr	r0, [sp, #0]
   25426:	9901      	ldr	r1, [sp, #4]
   25428:	f000 ffc4 	bl	263b4 <finite>
   2542c:	4681      	mov	r9, r0
   2542e:	2800      	cmp	r0, #0
   25430:	d100      	bne.n	25434 <pow+0xcc>
   25432:	e09b      	b.n	2556c <pow+0x204>
   25434:	9800      	ldr	r0, [sp, #0]
   25436:	9901      	ldr	r1, [sp, #4]
   25438:	2200      	movs	r2, #0
   2543a:	2300      	movs	r3, #0
   2543c:	f001 fa64 	bl	26908 <__aeabi_dcmpeq>
   25440:	2800      	cmp	r0, #0
   25442:	d0e6      	beq.n	25412 <pow+0xaa>
   25444:	0030      	movs	r0, r6
   25446:	0039      	movs	r1, r7
   25448:	f000 ffb4 	bl	263b4 <finite>
   2544c:	2800      	cmp	r0, #0
   2544e:	d0e0      	beq.n	25412 <pow+0xaa>
   25450:	0020      	movs	r0, r4
   25452:	0029      	movs	r1, r5
   25454:	f000 ffae 	bl	263b4 <finite>
   25458:	2800      	cmp	r0, #0
   2545a:	d0da      	beq.n	25412 <pow+0xaa>
   2545c:	ab04      	add	r3, sp, #16
   2545e:	4698      	mov	r8, r3
   25460:	2304      	movs	r3, #4
   25462:	4642      	mov	r2, r8
   25464:	9304      	str	r3, [sp, #16]
   25466:	4b8f      	ldr	r3, [pc, #572]	; (256a4 <pow+0x33c>)
   25468:	6114      	str	r4, [r2, #16]
   2546a:	6155      	str	r5, [r2, #20]
   2546c:	6053      	str	r3, [r2, #4]
   2546e:	2300      	movs	r3, #0
   25470:	2400      	movs	r4, #0
   25472:	6213      	str	r3, [r2, #32]
   25474:	2300      	movs	r3, #0
   25476:	6193      	str	r3, [r2, #24]
   25478:	61d4      	str	r4, [r2, #28]
   2547a:	4653      	mov	r3, sl
   2547c:	781b      	ldrb	r3, [r3, #0]
   2547e:	6096      	str	r6, [r2, #8]
   25480:	60d7      	str	r7, [r2, #12]
   25482:	b25b      	sxtb	r3, r3
   25484:	2b02      	cmp	r3, #2
   25486:	d004      	beq.n	25492 <pow+0x12a>
   25488:	4640      	mov	r0, r8
   2548a:	f000 ff9d 	bl	263c8 <matherr>
   2548e:	2800      	cmp	r0, #0
   25490:	d10e      	bne.n	254b0 <pow+0x148>
   25492:	f003 fcc1 	bl	28e18 <__errno>
   25496:	2322      	movs	r3, #34	; 0x22
   25498:	6003      	str	r3, [r0, #0]
   2549a:	e009      	b.n	254b0 <pow+0x148>
   2549c:	4642      	mov	r2, r8
   2549e:	2300      	movs	r3, #0
   254a0:	2400      	movs	r4, #0
   254a2:	6193      	str	r3, [r2, #24]
   254a4:	61d4      	str	r4, [r2, #28]
   254a6:	4640      	mov	r0, r8
   254a8:	f000 ff8e 	bl	263c8 <matherr>
   254ac:	2800      	cmp	r0, #0
   254ae:	d037      	beq.n	25520 <pow+0x1b8>
   254b0:	4643      	mov	r3, r8
   254b2:	6a1b      	ldr	r3, [r3, #32]
   254b4:	2b00      	cmp	r3, #0
   254b6:	d004      	beq.n	254c2 <pow+0x15a>
   254b8:	f003 fcae 	bl	28e18 <__errno>
   254bc:	4643      	mov	r3, r8
   254be:	6a1b      	ldr	r3, [r3, #32]
   254c0:	6003      	str	r3, [r0, #0]
   254c2:	4643      	mov	r3, r8
   254c4:	69dc      	ldr	r4, [r3, #28]
   254c6:	699b      	ldr	r3, [r3, #24]
   254c8:	9300      	str	r3, [sp, #0]
   254ca:	9401      	str	r4, [sp, #4]
   254cc:	e7a1      	b.n	25412 <pow+0xaa>
   254ce:	0020      	movs	r0, r4
   254d0:	0029      	movs	r1, r5
   254d2:	f000 ff6f 	bl	263b4 <finite>
   254d6:	2800      	cmp	r0, #0
   254d8:	d09b      	beq.n	25412 <pow+0xaa>
   254da:	2200      	movs	r2, #0
   254dc:	2300      	movs	r3, #0
   254de:	0020      	movs	r0, r4
   254e0:	0029      	movs	r1, r5
   254e2:	f001 fa17 	bl	26914 <__aeabi_dcmplt>
   254e6:	2800      	cmp	r0, #0
   254e8:	d100      	bne.n	254ec <pow+0x184>
   254ea:	e792      	b.n	25412 <pow+0xaa>
   254ec:	ab04      	add	r3, sp, #16
   254ee:	4698      	mov	r8, r3
   254f0:	2301      	movs	r3, #1
   254f2:	4642      	mov	r2, r8
   254f4:	9304      	str	r3, [sp, #16]
   254f6:	4b6b      	ldr	r3, [pc, #428]	; (256a4 <pow+0x33c>)
   254f8:	6053      	str	r3, [r2, #4]
   254fa:	4643      	mov	r3, r8
   254fc:	465a      	mov	r2, fp
   254fe:	609e      	str	r6, [r3, #8]
   25500:	60df      	str	r7, [r3, #12]
   25502:	621a      	str	r2, [r3, #32]
   25504:	611c      	str	r4, [r3, #16]
   25506:	615d      	str	r5, [r3, #20]
   25508:	4653      	mov	r3, sl
   2550a:	781b      	ldrb	r3, [r3, #0]
   2550c:	b25b      	sxtb	r3, r3
   2550e:	2b00      	cmp	r3, #0
   25510:	d0c4      	beq.n	2549c <pow+0x134>
   25512:	2000      	movs	r0, #0
   25514:	4642      	mov	r2, r8
   25516:	4965      	ldr	r1, [pc, #404]	; (256ac <pow+0x344>)
   25518:	6190      	str	r0, [r2, #24]
   2551a:	61d1      	str	r1, [r2, #28]
   2551c:	2b02      	cmp	r3, #2
   2551e:	d1c2      	bne.n	254a6 <pow+0x13e>
   25520:	f003 fc7a 	bl	28e18 <__errno>
   25524:	2321      	movs	r3, #33	; 0x21
   25526:	6003      	str	r3, [r0, #0]
   25528:	e7c2      	b.n	254b0 <pow+0x148>
   2552a:	2300      	movs	r3, #0
   2552c:	0020      	movs	r0, r4
   2552e:	0029      	movs	r1, r5
   25530:	f001 f9ea 	bl	26908 <__aeabi_dcmpeq>
   25534:	2800      	cmp	r0, #0
   25536:	d100      	bne.n	2553a <pow+0x1d2>
   25538:	e76b      	b.n	25412 <pow+0xaa>
   2553a:	ab04      	add	r3, sp, #16
   2553c:	4698      	mov	r8, r3
   2553e:	2301      	movs	r3, #1
   25540:	4642      	mov	r2, r8
   25542:	9304      	str	r3, [sp, #16]
   25544:	4b57      	ldr	r3, [pc, #348]	; (256a4 <pow+0x33c>)
   25546:	4641      	mov	r1, r8
   25548:	6053      	str	r3, [r2, #4]
   2554a:	4643      	mov	r3, r8
   2554c:	465a      	mov	r2, fp
   2554e:	621a      	str	r2, [r3, #32]
   25550:	2200      	movs	r2, #0
   25552:	609e      	str	r6, [r3, #8]
   25554:	60df      	str	r7, [r3, #12]
   25556:	611c      	str	r4, [r3, #16]
   25558:	615d      	str	r5, [r3, #20]
   2555a:	4b53      	ldr	r3, [pc, #332]	; (256a8 <pow+0x340>)
   2555c:	618a      	str	r2, [r1, #24]
   2555e:	61cb      	str	r3, [r1, #28]
   25560:	9200      	str	r2, [sp, #0]
   25562:	9301      	str	r3, [sp, #4]
   25564:	464b      	mov	r3, r9
   25566:	2b02      	cmp	r3, #2
   25568:	d19d      	bne.n	254a6 <pow+0x13e>
   2556a:	e752      	b.n	25412 <pow+0xaa>
   2556c:	0030      	movs	r0, r6
   2556e:	0039      	movs	r1, r7
   25570:	f000 ff20 	bl	263b4 <finite>
   25574:	2800      	cmp	r0, #0
   25576:	d100      	bne.n	2557a <pow+0x212>
   25578:	e75c      	b.n	25434 <pow+0xcc>
   2557a:	0020      	movs	r0, r4
   2557c:	0029      	movs	r1, r5
   2557e:	f000 ff19 	bl	263b4 <finite>
   25582:	2800      	cmp	r0, #0
   25584:	d100      	bne.n	25588 <pow+0x220>
   25586:	e755      	b.n	25434 <pow+0xcc>
   25588:	9800      	ldr	r0, [sp, #0]
   2558a:	9901      	ldr	r1, [sp, #4]
   2558c:	000b      	movs	r3, r1
   2558e:	0002      	movs	r2, r0
   25590:	f003 fae8 	bl	28b64 <__aeabi_dcmpun>
   25594:	ab04      	add	r3, sp, #16
   25596:	4698      	mov	r8, r3
   25598:	2800      	cmp	r0, #0
   2559a:	d161      	bne.n	25660 <pow+0x2f8>
   2559c:	2303      	movs	r3, #3
   2559e:	4642      	mov	r2, r8
   255a0:	9304      	str	r3, [sp, #16]
   255a2:	4b40      	ldr	r3, [pc, #256]	; (256a4 <pow+0x33c>)
   255a4:	6210      	str	r0, [r2, #32]
   255a6:	6053      	str	r3, [r2, #4]
   255a8:	4653      	mov	r3, sl
   255aa:	781b      	ldrb	r3, [r3, #0]
   255ac:	6096      	str	r6, [r2, #8]
   255ae:	60d7      	str	r7, [r2, #12]
   255b0:	b25b      	sxtb	r3, r3
   255b2:	6114      	str	r4, [r2, #16]
   255b4:	6155      	str	r5, [r2, #20]
   255b6:	4699      	mov	r9, r3
   255b8:	2b00      	cmp	r3, #0
   255ba:	d12f      	bne.n	2561c <pow+0x2b4>
   255bc:	22e0      	movs	r2, #224	; 0xe0
   255be:	4641      	mov	r1, r8
   255c0:	4b3b      	ldr	r3, [pc, #236]	; (256b0 <pow+0x348>)
   255c2:	0612      	lsls	r2, r2, #24
   255c4:	618a      	str	r2, [r1, #24]
   255c6:	61cb      	str	r3, [r1, #28]
   255c8:	0030      	movs	r0, r6
   255ca:	2200      	movs	r2, #0
   255cc:	2300      	movs	r3, #0
   255ce:	0039      	movs	r1, r7
   255d0:	f001 f9a0 	bl	26914 <__aeabi_dcmplt>
   255d4:	2800      	cmp	r0, #0
   255d6:	d100      	bne.n	255da <pow+0x272>
   255d8:	e756      	b.n	25488 <pow+0x120>
   255da:	2200      	movs	r2, #0
   255dc:	4b35      	ldr	r3, [pc, #212]	; (256b4 <pow+0x34c>)
   255de:	0020      	movs	r0, r4
   255e0:	0029      	movs	r1, r5
   255e2:	f002 fd29 	bl	28038 <__aeabi_dmul>
   255e6:	0004      	movs	r4, r0
   255e8:	000d      	movs	r5, r1
   255ea:	f000 fef5 	bl	263d8 <rint>
   255ee:	0002      	movs	r2, r0
   255f0:	000b      	movs	r3, r1
   255f2:	0020      	movs	r0, r4
   255f4:	0029      	movs	r1, r5
   255f6:	f001 f987 	bl	26908 <__aeabi_dcmpeq>
   255fa:	2800      	cmp	r0, #0
   255fc:	d105      	bne.n	2560a <pow+0x2a2>
   255fe:	22e0      	movs	r2, #224	; 0xe0
   25600:	4b2d      	ldr	r3, [pc, #180]	; (256b8 <pow+0x350>)
   25602:	0612      	lsls	r2, r2, #24
   25604:	4641      	mov	r1, r8
   25606:	618a      	str	r2, [r1, #24]
   25608:	61cb      	str	r3, [r1, #28]
   2560a:	4653      	mov	r3, sl
   2560c:	781b      	ldrb	r3, [r3, #0]
   2560e:	b25b      	sxtb	r3, r3
   25610:	4699      	mov	r9, r3
   25612:	464b      	mov	r3, r9
   25614:	2b02      	cmp	r3, #2
   25616:	d000      	beq.n	2561a <pow+0x2b2>
   25618:	e736      	b.n	25488 <pow+0x120>
   2561a:	e73a      	b.n	25492 <pow+0x12a>
   2561c:	2200      	movs	r2, #0
   2561e:	4641      	mov	r1, r8
   25620:	4b26      	ldr	r3, [pc, #152]	; (256bc <pow+0x354>)
   25622:	0030      	movs	r0, r6
   25624:	618a      	str	r2, [r1, #24]
   25626:	61cb      	str	r3, [r1, #28]
   25628:	2200      	movs	r2, #0
   2562a:	2300      	movs	r3, #0
   2562c:	0039      	movs	r1, r7
   2562e:	f001 f971 	bl	26914 <__aeabi_dcmplt>
   25632:	2800      	cmp	r0, #0
   25634:	d0ed      	beq.n	25612 <pow+0x2aa>
   25636:	2200      	movs	r2, #0
   25638:	4b1e      	ldr	r3, [pc, #120]	; (256b4 <pow+0x34c>)
   2563a:	0020      	movs	r0, r4
   2563c:	0029      	movs	r1, r5
   2563e:	f002 fcfb 	bl	28038 <__aeabi_dmul>
   25642:	0004      	movs	r4, r0
   25644:	000d      	movs	r5, r1
   25646:	f000 fec7 	bl	263d8 <rint>
   2564a:	0002      	movs	r2, r0
   2564c:	000b      	movs	r3, r1
   2564e:	0020      	movs	r0, r4
   25650:	0029      	movs	r1, r5
   25652:	f001 f959 	bl	26908 <__aeabi_dcmpeq>
   25656:	2800      	cmp	r0, #0
   25658:	d1d7      	bne.n	2560a <pow+0x2a2>
   2565a:	2200      	movs	r2, #0
   2565c:	4b13      	ldr	r3, [pc, #76]	; (256ac <pow+0x344>)
   2565e:	e7d1      	b.n	25604 <pow+0x29c>
   25660:	2301      	movs	r3, #1
   25662:	4642      	mov	r2, r8
   25664:	9304      	str	r3, [sp, #16]
   25666:	4b0f      	ldr	r3, [pc, #60]	; (256a4 <pow+0x33c>)
   25668:	6053      	str	r3, [r2, #4]
   2566a:	4643      	mov	r3, r8
   2566c:	464a      	mov	r2, r9
   2566e:	611c      	str	r4, [r3, #16]
   25670:	615d      	str	r5, [r3, #20]
   25672:	621a      	str	r2, [r3, #32]
   25674:	609e      	str	r6, [r3, #8]
   25676:	60df      	str	r7, [r3, #12]
   25678:	2400      	movs	r4, #0
   2567a:	4653      	mov	r3, sl
   2567c:	571c      	ldrsb	r4, [r3, r4]
   2567e:	2c00      	cmp	r4, #0
   25680:	d100      	bne.n	25684 <pow+0x31c>
   25682:	e70b      	b.n	2549c <pow+0x134>
   25684:	2300      	movs	r3, #0
   25686:	2200      	movs	r2, #0
   25688:	0019      	movs	r1, r3
   2568a:	0010      	movs	r0, r2
   2568c:	f002 f8a0 	bl	277d0 <__aeabi_ddiv>
   25690:	4643      	mov	r3, r8
   25692:	6198      	str	r0, [r3, #24]
   25694:	61d9      	str	r1, [r3, #28]
   25696:	2c02      	cmp	r4, #2
   25698:	d100      	bne.n	2569c <pow+0x334>
   2569a:	e741      	b.n	25520 <pow+0x1b8>
   2569c:	e703      	b.n	254a6 <pow+0x13e>
   2569e:	46c0      	nop			; (mov r8, r8)
   256a0:	20000029 	.word	0x20000029
   256a4:	0002add8 	.word	0x0002add8
   256a8:	3ff00000 	.word	0x3ff00000
   256ac:	fff00000 	.word	0xfff00000
   256b0:	47efffff 	.word	0x47efffff
   256b4:	3fe00000 	.word	0x3fe00000
   256b8:	c7efffff 	.word	0xc7efffff
   256bc:	7ff00000 	.word	0x7ff00000

000256c0 <sqrt>:
   256c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   256c2:	4647      	mov	r7, r8
   256c4:	46ce      	mov	lr, r9
   256c6:	b580      	push	{r7, lr}
   256c8:	b08d      	sub	sp, #52	; 0x34
   256ca:	0004      	movs	r4, r0
   256cc:	000d      	movs	r5, r1
   256ce:	f000 fd8d 	bl	261ec <__ieee754_sqrt>
   256d2:	4b29      	ldr	r3, [pc, #164]	; (25778 <sqrt+0xb8>)
   256d4:	0006      	movs	r6, r0
   256d6:	781b      	ldrb	r3, [r3, #0]
   256d8:	000f      	movs	r7, r1
   256da:	b25b      	sxtb	r3, r3
   256dc:	4698      	mov	r8, r3
   256de:	3301      	adds	r3, #1
   256e0:	d010      	beq.n	25704 <sqrt+0x44>
   256e2:	0022      	movs	r2, r4
   256e4:	002b      	movs	r3, r5
   256e6:	0020      	movs	r0, r4
   256e8:	0029      	movs	r1, r5
   256ea:	f003 fa3b 	bl	28b64 <__aeabi_dcmpun>
   256ee:	4681      	mov	r9, r0
   256f0:	2800      	cmp	r0, #0
   256f2:	d107      	bne.n	25704 <sqrt+0x44>
   256f4:	2200      	movs	r2, #0
   256f6:	2300      	movs	r3, #0
   256f8:	0020      	movs	r0, r4
   256fa:	0029      	movs	r1, r5
   256fc:	f001 f90a 	bl	26914 <__aeabi_dcmplt>
   25700:	2800      	cmp	r0, #0
   25702:	d106      	bne.n	25712 <sqrt+0x52>
   25704:	0030      	movs	r0, r6
   25706:	0039      	movs	r1, r7
   25708:	b00d      	add	sp, #52	; 0x34
   2570a:	bc0c      	pop	{r2, r3}
   2570c:	4690      	mov	r8, r2
   2570e:	4699      	mov	r9, r3
   25710:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25712:	2301      	movs	r3, #1
   25714:	9302      	str	r3, [sp, #8]
   25716:	4b19      	ldr	r3, [pc, #100]	; (2577c <sqrt+0xbc>)
   25718:	9406      	str	r4, [sp, #24]
   2571a:	9507      	str	r5, [sp, #28]
   2571c:	9303      	str	r3, [sp, #12]
   2571e:	464b      	mov	r3, r9
   25720:	930a      	str	r3, [sp, #40]	; 0x28
   25722:	4643      	mov	r3, r8
   25724:	9404      	str	r4, [sp, #16]
   25726:	9505      	str	r5, [sp, #20]
   25728:	2b00      	cmp	r3, #0
   2572a:	d015      	beq.n	25758 <sqrt+0x98>
   2572c:	2300      	movs	r3, #0
   2572e:	2200      	movs	r2, #0
   25730:	0019      	movs	r1, r3
   25732:	0010      	movs	r0, r2
   25734:	f002 f84c 	bl	277d0 <__aeabi_ddiv>
   25738:	4643      	mov	r3, r8
   2573a:	9008      	str	r0, [sp, #32]
   2573c:	9109      	str	r1, [sp, #36]	; 0x24
   2573e:	2b02      	cmp	r3, #2
   25740:	d10e      	bne.n	25760 <sqrt+0xa0>
   25742:	f003 fb69 	bl	28e18 <__errno>
   25746:	2321      	movs	r3, #33	; 0x21
   25748:	6003      	str	r3, [r0, #0]
   2574a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2574c:	9301      	str	r3, [sp, #4]
   2574e:	2b00      	cmp	r3, #0
   25750:	d10c      	bne.n	2576c <sqrt+0xac>
   25752:	9e08      	ldr	r6, [sp, #32]
   25754:	9f09      	ldr	r7, [sp, #36]	; 0x24
   25756:	e7d5      	b.n	25704 <sqrt+0x44>
   25758:	2300      	movs	r3, #0
   2575a:	2400      	movs	r4, #0
   2575c:	9308      	str	r3, [sp, #32]
   2575e:	9409      	str	r4, [sp, #36]	; 0x24
   25760:	a802      	add	r0, sp, #8
   25762:	f000 fe31 	bl	263c8 <matherr>
   25766:	2800      	cmp	r0, #0
   25768:	d1ef      	bne.n	2574a <sqrt+0x8a>
   2576a:	e7ea      	b.n	25742 <sqrt+0x82>
   2576c:	f003 fb54 	bl	28e18 <__errno>
   25770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25772:	9301      	str	r3, [sp, #4]
   25774:	6003      	str	r3, [r0, #0]
   25776:	e7ec      	b.n	25752 <sqrt+0x92>
   25778:	20000029 	.word	0x20000029
   2577c:	0002addc 	.word	0x0002addc

00025780 <__ieee754_pow>:
   25780:	b5f0      	push	{r4, r5, r6, r7, lr}
   25782:	4657      	mov	r7, sl
   25784:	464e      	mov	r6, r9
   25786:	4645      	mov	r5, r8
   25788:	46de      	mov	lr, fp
   2578a:	001c      	movs	r4, r3
   2578c:	0013      	movs	r3, r2
   2578e:	b5e0      	push	{r5, r6, r7, lr}
   25790:	0065      	lsls	r5, r4, #1
   25792:	b091      	sub	sp, #68	; 0x44
   25794:	086d      	lsrs	r5, r5, #1
   25796:	9300      	str	r3, [sp, #0]
   25798:	9401      	str	r4, [sp, #4]
   2579a:	0007      	movs	r7, r0
   2579c:	000e      	movs	r6, r1
   2579e:	4680      	mov	r8, r0
   257a0:	4689      	mov	r9, r1
   257a2:	46a2      	mov	sl, r4
   257a4:	432b      	orrs	r3, r5
   257a6:	d031      	beq.n	2580c <__ieee754_pow+0x8c>
   257a8:	4b67      	ldr	r3, [pc, #412]	; (25948 <__ieee754_pow+0x1c8>)
   257aa:	0074      	lsls	r4, r6, #1
   257ac:	0864      	lsrs	r4, r4, #1
   257ae:	429c      	cmp	r4, r3
   257b0:	dc27      	bgt.n	25802 <__ieee754_pow+0x82>
   257b2:	d024      	beq.n	257fe <__ieee754_pow+0x7e>
   257b4:	429d      	cmp	r5, r3
   257b6:	dc24      	bgt.n	25802 <__ieee754_pow+0x82>
   257b8:	4b63      	ldr	r3, [pc, #396]	; (25948 <__ieee754_pow+0x1c8>)
   257ba:	429d      	cmp	r5, r3
   257bc:	d100      	bne.n	257c0 <__ieee754_pow+0x40>
   257be:	e081      	b.n	258c4 <__ieee754_pow+0x144>
   257c0:	2300      	movs	r3, #0
   257c2:	469b      	mov	fp, r3
   257c4:	464b      	mov	r3, r9
   257c6:	2b00      	cmp	r3, #0
   257c8:	da00      	bge.n	257cc <__ieee754_pow+0x4c>
   257ca:	e07f      	b.n	258cc <__ieee754_pow+0x14c>
   257cc:	2a00      	cmp	r2, #0
   257ce:	d12c      	bne.n	2582a <__ieee754_pow+0xaa>
   257d0:	4b5d      	ldr	r3, [pc, #372]	; (25948 <__ieee754_pow+0x1c8>)
   257d2:	429d      	cmp	r5, r3
   257d4:	d100      	bne.n	257d8 <__ieee754_pow+0x58>
   257d6:	e097      	b.n	25908 <__ieee754_pow+0x188>
   257d8:	4b5c      	ldr	r3, [pc, #368]	; (2594c <__ieee754_pow+0x1cc>)
   257da:	429d      	cmp	r5, r3
   257dc:	d066      	beq.n	258ac <__ieee754_pow+0x12c>
   257de:	2380      	movs	r3, #128	; 0x80
   257e0:	05db      	lsls	r3, r3, #23
   257e2:	459a      	cmp	sl, r3
   257e4:	d100      	bne.n	257e8 <__ieee754_pow+0x68>
   257e6:	e3b9      	b.n	25f5c <__ieee754_pow+0x7dc>
   257e8:	4b59      	ldr	r3, [pc, #356]	; (25950 <__ieee754_pow+0x1d0>)
   257ea:	459a      	cmp	sl, r3
   257ec:	d11d      	bne.n	2582a <__ieee754_pow+0xaa>
   257ee:	464b      	mov	r3, r9
   257f0:	2b00      	cmp	r3, #0
   257f2:	db1a      	blt.n	2582a <__ieee754_pow+0xaa>
   257f4:	0038      	movs	r0, r7
   257f6:	0031      	movs	r1, r6
   257f8:	f000 fcf8 	bl	261ec <__ieee754_sqrt>
   257fc:	e008      	b.n	25810 <__ieee754_pow+0x90>
   257fe:	2800      	cmp	r0, #0
   25800:	d00d      	beq.n	2581e <__ieee754_pow+0x9e>
   25802:	4b54      	ldr	r3, [pc, #336]	; (25954 <__ieee754_pow+0x1d4>)
   25804:	469c      	mov	ip, r3
   25806:	4464      	add	r4, ip
   25808:	4327      	orrs	r7, r4
   2580a:	d10a      	bne.n	25822 <__ieee754_pow+0xa2>
   2580c:	2000      	movs	r0, #0
   2580e:	494f      	ldr	r1, [pc, #316]	; (2594c <__ieee754_pow+0x1cc>)
   25810:	b011      	add	sp, #68	; 0x44
   25812:	bc3c      	pop	{r2, r3, r4, r5}
   25814:	4690      	mov	r8, r2
   25816:	4699      	mov	r9, r3
   25818:	46a2      	mov	sl, r4
   2581a:	46ab      	mov	fp, r5
   2581c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2581e:	42a5      	cmp	r5, r4
   25820:	ddca      	ble.n	257b8 <__ieee754_pow+0x38>
   25822:	484d      	ldr	r0, [pc, #308]	; (25958 <__ieee754_pow+0x1d8>)
   25824:	f000 fdd2 	bl	263cc <nan>
   25828:	e7f2      	b.n	25810 <__ieee754_pow+0x90>
   2582a:	0038      	movs	r0, r7
   2582c:	0031      	movs	r1, r6
   2582e:	f000 fdbd 	bl	263ac <fabs>
   25832:	4643      	mov	r3, r8
   25834:	2b00      	cmp	r3, #0
   25836:	d11d      	bne.n	25874 <__ieee754_pow+0xf4>
   25838:	2c00      	cmp	r4, #0
   2583a:	d004      	beq.n	25846 <__ieee754_pow+0xc6>
   2583c:	4a43      	ldr	r2, [pc, #268]	; (2594c <__ieee754_pow+0x1cc>)
   2583e:	00b3      	lsls	r3, r6, #2
   25840:	089b      	lsrs	r3, r3, #2
   25842:	4293      	cmp	r3, r2
   25844:	d116      	bne.n	25874 <__ieee754_pow+0xf4>
   25846:	4653      	mov	r3, sl
   25848:	2b00      	cmp	r3, #0
   2584a:	da00      	bge.n	2584e <__ieee754_pow+0xce>
   2584c:	e3c5      	b.n	25fda <__ieee754_pow+0x85a>
   2584e:	464b      	mov	r3, r9
   25850:	2b00      	cmp	r3, #0
   25852:	dadd      	bge.n	25810 <__ieee754_pow+0x90>
   25854:	4b3f      	ldr	r3, [pc, #252]	; (25954 <__ieee754_pow+0x1d4>)
   25856:	469c      	mov	ip, r3
   25858:	465b      	mov	r3, fp
   2585a:	4464      	add	r4, ip
   2585c:	431c      	orrs	r4, r3
   2585e:	d101      	bne.n	25864 <__ieee754_pow+0xe4>
   25860:	f000 fc53 	bl	2610a <__ieee754_pow+0x98a>
   25864:	465b      	mov	r3, fp
   25866:	2b01      	cmp	r3, #1
   25868:	d1d2      	bne.n	25810 <__ieee754_pow+0x90>
   2586a:	2480      	movs	r4, #128	; 0x80
   2586c:	0624      	lsls	r4, r4, #24
   2586e:	190b      	adds	r3, r1, r4
   25870:	0019      	movs	r1, r3
   25872:	e7cd      	b.n	25810 <__ieee754_pow+0x90>
   25874:	0ff3      	lsrs	r3, r6, #31
   25876:	3b01      	subs	r3, #1
   25878:	4698      	mov	r8, r3
   2587a:	465b      	mov	r3, fp
   2587c:	4642      	mov	r2, r8
   2587e:	4313      	orrs	r3, r2
   25880:	d057      	beq.n	25932 <__ieee754_pow+0x1b2>
   25882:	4b36      	ldr	r3, [pc, #216]	; (2595c <__ieee754_pow+0x1dc>)
   25884:	429d      	cmp	r5, r3
   25886:	dd77      	ble.n	25978 <__ieee754_pow+0x1f8>
   25888:	4b35      	ldr	r3, [pc, #212]	; (25960 <__ieee754_pow+0x1e0>)
   2588a:	429d      	cmp	r5, r3
   2588c:	dc00      	bgt.n	25890 <__ieee754_pow+0x110>
   2588e:	e3b1      	b.n	25ff4 <__ieee754_pow+0x874>
   25890:	4b34      	ldr	r3, [pc, #208]	; (25964 <__ieee754_pow+0x1e4>)
   25892:	429c      	cmp	r4, r3
   25894:	dc00      	bgt.n	25898 <__ieee754_pow+0x118>
   25896:	e3a8      	b.n	25fea <__ieee754_pow+0x86a>
   25898:	4653      	mov	r3, sl
   2589a:	2b00      	cmp	r3, #0
   2589c:	dd43      	ble.n	25926 <__ieee754_pow+0x1a6>
   2589e:	4a32      	ldr	r2, [pc, #200]	; (25968 <__ieee754_pow+0x1e8>)
   258a0:	4b32      	ldr	r3, [pc, #200]	; (2596c <__ieee754_pow+0x1ec>)
   258a2:	0010      	movs	r0, r2
   258a4:	0019      	movs	r1, r3
   258a6:	f002 fbc7 	bl	28038 <__aeabi_dmul>
   258aa:	e7b1      	b.n	25810 <__ieee754_pow+0x90>
   258ac:	4653      	mov	r3, sl
   258ae:	0038      	movs	r0, r7
   258b0:	0031      	movs	r1, r6
   258b2:	2b00      	cmp	r3, #0
   258b4:	daac      	bge.n	25810 <__ieee754_pow+0x90>
   258b6:	003a      	movs	r2, r7
   258b8:	0033      	movs	r3, r6
   258ba:	2000      	movs	r0, #0
   258bc:	4923      	ldr	r1, [pc, #140]	; (2594c <__ieee754_pow+0x1cc>)
   258be:	f001 ff87 	bl	277d0 <__aeabi_ddiv>
   258c2:	e7a5      	b.n	25810 <__ieee754_pow+0x90>
   258c4:	2a00      	cmp	r2, #0
   258c6:	d100      	bne.n	258ca <__ieee754_pow+0x14a>
   258c8:	e77a      	b.n	257c0 <__ieee754_pow+0x40>
   258ca:	e79a      	b.n	25802 <__ieee754_pow+0x82>
   258cc:	4b28      	ldr	r3, [pc, #160]	; (25970 <__ieee754_pow+0x1f0>)
   258ce:	429d      	cmp	r5, r3
   258d0:	dc2c      	bgt.n	2592c <__ieee754_pow+0x1ac>
   258d2:	4b24      	ldr	r3, [pc, #144]	; (25964 <__ieee754_pow+0x1e4>)
   258d4:	429d      	cmp	r5, r3
   258d6:	dc00      	bgt.n	258da <__ieee754_pow+0x15a>
   258d8:	e778      	b.n	257cc <__ieee754_pow+0x4c>
   258da:	4926      	ldr	r1, [pc, #152]	; (25974 <__ieee754_pow+0x1f4>)
   258dc:	152b      	asrs	r3, r5, #20
   258de:	468c      	mov	ip, r1
   258e0:	4463      	add	r3, ip
   258e2:	2b14      	cmp	r3, #20
   258e4:	dc01      	bgt.n	258ea <__ieee754_pow+0x16a>
   258e6:	f000 fbf3 	bl	260d0 <__ieee754_pow+0x950>
   258ea:	2134      	movs	r1, #52	; 0x34
   258ec:	1acb      	subs	r3, r1, r3
   258ee:	9900      	ldr	r1, [sp, #0]
   258f0:	40d9      	lsrs	r1, r3
   258f2:	0008      	movs	r0, r1
   258f4:	4098      	lsls	r0, r3
   258f6:	4282      	cmp	r2, r0
   258f8:	d000      	beq.n	258fc <__ieee754_pow+0x17c>
   258fa:	e767      	b.n	257cc <__ieee754_pow+0x4c>
   258fc:	2301      	movs	r3, #1
   258fe:	4019      	ands	r1, r3
   25900:	3301      	adds	r3, #1
   25902:	1a5b      	subs	r3, r3, r1
   25904:	469b      	mov	fp, r3
   25906:	e761      	b.n	257cc <__ieee754_pow+0x4c>
   25908:	4b12      	ldr	r3, [pc, #72]	; (25954 <__ieee754_pow+0x1d4>)
   2590a:	18e3      	adds	r3, r4, r3
   2590c:	431f      	orrs	r7, r3
   2590e:	d100      	bne.n	25912 <__ieee754_pow+0x192>
   25910:	e77c      	b.n	2580c <__ieee754_pow+0x8c>
   25912:	4b14      	ldr	r3, [pc, #80]	; (25964 <__ieee754_pow+0x1e4>)
   25914:	429c      	cmp	r4, r3
   25916:	dc00      	bgt.n	2591a <__ieee754_pow+0x19a>
   25918:	e327      	b.n	25f6a <__ieee754_pow+0x7ea>
   2591a:	9800      	ldr	r0, [sp, #0]
   2591c:	9901      	ldr	r1, [sp, #4]
   2591e:	4653      	mov	r3, sl
   25920:	2b00      	cmp	r3, #0
   25922:	db00      	blt.n	25926 <__ieee754_pow+0x1a6>
   25924:	e774      	b.n	25810 <__ieee754_pow+0x90>
   25926:	2000      	movs	r0, #0
   25928:	2100      	movs	r1, #0
   2592a:	e771      	b.n	25810 <__ieee754_pow+0x90>
   2592c:	2302      	movs	r3, #2
   2592e:	469b      	mov	fp, r3
   25930:	e74c      	b.n	257cc <__ieee754_pow+0x4c>
   25932:	003a      	movs	r2, r7
   25934:	0033      	movs	r3, r6
   25936:	0038      	movs	r0, r7
   25938:	0031      	movs	r1, r6
   2593a:	f002 fdfd 	bl	28538 <__aeabi_dsub>
   2593e:	0002      	movs	r2, r0
   25940:	000b      	movs	r3, r1
   25942:	f001 ff45 	bl	277d0 <__aeabi_ddiv>
   25946:	e763      	b.n	25810 <__ieee754_pow+0x90>
   25948:	7ff00000 	.word	0x7ff00000
   2594c:	3ff00000 	.word	0x3ff00000
   25950:	3fe00000 	.word	0x3fe00000
   25954:	c0100000 	.word	0xc0100000
   25958:	0002ade0 	.word	0x0002ade0
   2595c:	41e00000 	.word	0x41e00000
   25960:	43f00000 	.word	0x43f00000
   25964:	3fefffff 	.word	0x3fefffff
   25968:	8800759c 	.word	0x8800759c
   2596c:	7e37e43c 	.word	0x7e37e43c
   25970:	433fffff 	.word	0x433fffff
   25974:	fffffc01 	.word	0xfffffc01
   25978:	4be9      	ldr	r3, [pc, #932]	; (25d20 <__ieee754_pow+0x5a0>)
   2597a:	2200      	movs	r2, #0
   2597c:	429c      	cmp	r4, r3
   2597e:	dc06      	bgt.n	2598e <__ieee754_pow+0x20e>
   25980:	2200      	movs	r2, #0
   25982:	4be8      	ldr	r3, [pc, #928]	; (25d24 <__ieee754_pow+0x5a4>)
   25984:	f002 fb58 	bl	28038 <__aeabi_dmul>
   25988:	2235      	movs	r2, #53	; 0x35
   2598a:	000c      	movs	r4, r1
   2598c:	4252      	negs	r2, r2
   2598e:	4de6      	ldr	r5, [pc, #920]	; (25d28 <__ieee754_pow+0x5a8>)
   25990:	1523      	asrs	r3, r4, #20
   25992:	46ac      	mov	ip, r5
   25994:	4463      	add	r3, ip
   25996:	4699      	mov	r9, r3
   25998:	0324      	lsls	r4, r4, #12
   2599a:	4de4      	ldr	r5, [pc, #912]	; (25d2c <__ieee754_pow+0x5ac>)
   2599c:	4be4      	ldr	r3, [pc, #912]	; (25d30 <__ieee754_pow+0x5b0>)
   2599e:	0b24      	lsrs	r4, r4, #12
   259a0:	4491      	add	r9, r2
   259a2:	4325      	orrs	r5, r4
   259a4:	429c      	cmp	r4, r3
   259a6:	dd09      	ble.n	259bc <__ieee754_pow+0x23c>
   259a8:	4be2      	ldr	r3, [pc, #904]	; (25d34 <__ieee754_pow+0x5b4>)
   259aa:	429c      	cmp	r4, r3
   259ac:	dc00      	bgt.n	259b0 <__ieee754_pow+0x230>
   259ae:	e3b6      	b.n	2611e <__ieee754_pow+0x99e>
   259b0:	2301      	movs	r3, #1
   259b2:	469c      	mov	ip, r3
   259b4:	4be0      	ldr	r3, [pc, #896]	; (25d38 <__ieee754_pow+0x5b8>)
   259b6:	44e1      	add	r9, ip
   259b8:	469c      	mov	ip, r3
   259ba:	4465      	add	r5, ip
   259bc:	2300      	movs	r3, #0
   259be:	2400      	movs	r4, #0
   259c0:	2200      	movs	r2, #0
   259c2:	9308      	str	r3, [sp, #32]
   259c4:	9409      	str	r4, [sp, #36]	; 0x24
   259c6:	930c      	str	r3, [sp, #48]	; 0x30
   259c8:	940d      	str	r4, [sp, #52]	; 0x34
   259ca:	2400      	movs	r4, #0
   259cc:	4bd7      	ldr	r3, [pc, #860]	; (25d2c <__ieee754_pow+0x5ac>)
   259ce:	9206      	str	r2, [sp, #24]
   259d0:	9307      	str	r3, [sp, #28]
   259d2:	9a06      	ldr	r2, [sp, #24]
   259d4:	9b07      	ldr	r3, [sp, #28]
   259d6:	0029      	movs	r1, r5
   259d8:	900a      	str	r0, [sp, #40]	; 0x28
   259da:	910b      	str	r1, [sp, #44]	; 0x2c
   259dc:	f002 fdac 	bl	28538 <__aeabi_dsub>
   259e0:	9a06      	ldr	r2, [sp, #24]
   259e2:	9b07      	ldr	r3, [sp, #28]
   259e4:	0006      	movs	r6, r0
   259e6:	000f      	movs	r7, r1
   259e8:	980a      	ldr	r0, [sp, #40]	; 0x28
   259ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
   259ec:	f001 fbe0 	bl	271b0 <__aeabi_dadd>
   259f0:	0002      	movs	r2, r0
   259f2:	000b      	movs	r3, r1
   259f4:	2000      	movs	r0, #0
   259f6:	49cd      	ldr	r1, [pc, #820]	; (25d2c <__ieee754_pow+0x5ac>)
   259f8:	f001 feea 	bl	277d0 <__aeabi_ddiv>
   259fc:	000a      	movs	r2, r1
   259fe:	0001      	movs	r1, r0
   25a00:	0013      	movs	r3, r2
   25a02:	910e      	str	r1, [sp, #56]	; 0x38
   25a04:	920f      	str	r2, [sp, #60]	; 0x3c
   25a06:	0002      	movs	r2, r0
   25a08:	0039      	movs	r1, r7
   25a0a:	0030      	movs	r0, r6
   25a0c:	f002 fb14 	bl	28038 <__aeabi_dmul>
   25a10:	000a      	movs	r2, r1
   25a12:	0001      	movs	r1, r0
   25a14:	2080      	movs	r0, #128	; 0x80
   25a16:	9104      	str	r1, [sp, #16]
   25a18:	9205      	str	r2, [sp, #20]
   25a1a:	0013      	movs	r3, r2
   25a1c:	2200      	movs	r2, #0
   25a1e:	1069      	asrs	r1, r5, #1
   25a20:	2580      	movs	r5, #128	; 0x80
   25a22:	0300      	lsls	r0, r0, #12
   25a24:	4684      	mov	ip, r0
   25a26:	9202      	str	r2, [sp, #8]
   25a28:	9303      	str	r3, [sp, #12]
   25a2a:	2200      	movs	r2, #0
   25a2c:	05ad      	lsls	r5, r5, #22
   25a2e:	430d      	orrs	r5, r1
   25a30:	4465      	add	r5, ip
   25a32:	192b      	adds	r3, r5, r4
   25a34:	9802      	ldr	r0, [sp, #8]
   25a36:	9903      	ldr	r1, [sp, #12]
   25a38:	0014      	movs	r4, r2
   25a3a:	001d      	movs	r5, r3
   25a3c:	f002 fafc 	bl	28038 <__aeabi_dmul>
   25a40:	0002      	movs	r2, r0
   25a42:	000b      	movs	r3, r1
   25a44:	0030      	movs	r0, r6
   25a46:	0039      	movs	r1, r7
   25a48:	f002 fd76 	bl	28538 <__aeabi_dsub>
   25a4c:	9a06      	ldr	r2, [sp, #24]
   25a4e:	9b07      	ldr	r3, [sp, #28]
   25a50:	0006      	movs	r6, r0
   25a52:	000f      	movs	r7, r1
   25a54:	0020      	movs	r0, r4
   25a56:	0029      	movs	r1, r5
   25a58:	f002 fd6e 	bl	28538 <__aeabi_dsub>
   25a5c:	0002      	movs	r2, r0
   25a5e:	000b      	movs	r3, r1
   25a60:	980a      	ldr	r0, [sp, #40]	; 0x28
   25a62:	990b      	ldr	r1, [sp, #44]	; 0x2c
   25a64:	f002 fd68 	bl	28538 <__aeabi_dsub>
   25a68:	9a02      	ldr	r2, [sp, #8]
   25a6a:	9b03      	ldr	r3, [sp, #12]
   25a6c:	f002 fae4 	bl	28038 <__aeabi_dmul>
   25a70:	0002      	movs	r2, r0
   25a72:	000b      	movs	r3, r1
   25a74:	0030      	movs	r0, r6
   25a76:	0039      	movs	r1, r7
   25a78:	f002 fd5e 	bl	28538 <__aeabi_dsub>
   25a7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   25a7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   25a80:	f002 fada 	bl	28038 <__aeabi_dmul>
   25a84:	9d04      	ldr	r5, [sp, #16]
   25a86:	9e05      	ldr	r6, [sp, #20]
   25a88:	9006      	str	r0, [sp, #24]
   25a8a:	9107      	str	r1, [sp, #28]
   25a8c:	002a      	movs	r2, r5
   25a8e:	0033      	movs	r3, r6
   25a90:	0028      	movs	r0, r5
   25a92:	0031      	movs	r1, r6
   25a94:	f002 fad0 	bl	28038 <__aeabi_dmul>
   25a98:	0006      	movs	r6, r0
   25a9a:	000f      	movs	r7, r1
   25a9c:	4aa7      	ldr	r2, [pc, #668]	; (25d3c <__ieee754_pow+0x5bc>)
   25a9e:	4ba8      	ldr	r3, [pc, #672]	; (25d40 <__ieee754_pow+0x5c0>)
   25aa0:	f002 faca 	bl	28038 <__aeabi_dmul>
   25aa4:	4aa7      	ldr	r2, [pc, #668]	; (25d44 <__ieee754_pow+0x5c4>)
   25aa6:	4ba8      	ldr	r3, [pc, #672]	; (25d48 <__ieee754_pow+0x5c8>)
   25aa8:	f001 fb82 	bl	271b0 <__aeabi_dadd>
   25aac:	0032      	movs	r2, r6
   25aae:	003b      	movs	r3, r7
   25ab0:	f002 fac2 	bl	28038 <__aeabi_dmul>
   25ab4:	4aa5      	ldr	r2, [pc, #660]	; (25d4c <__ieee754_pow+0x5cc>)
   25ab6:	4ba6      	ldr	r3, [pc, #664]	; (25d50 <__ieee754_pow+0x5d0>)
   25ab8:	f001 fb7a 	bl	271b0 <__aeabi_dadd>
   25abc:	0032      	movs	r2, r6
   25abe:	003b      	movs	r3, r7
   25ac0:	f002 faba 	bl	28038 <__aeabi_dmul>
   25ac4:	4aa3      	ldr	r2, [pc, #652]	; (25d54 <__ieee754_pow+0x5d4>)
   25ac6:	4ba4      	ldr	r3, [pc, #656]	; (25d58 <__ieee754_pow+0x5d8>)
   25ac8:	f001 fb72 	bl	271b0 <__aeabi_dadd>
   25acc:	0032      	movs	r2, r6
   25ace:	003b      	movs	r3, r7
   25ad0:	f002 fab2 	bl	28038 <__aeabi_dmul>
   25ad4:	4aa1      	ldr	r2, [pc, #644]	; (25d5c <__ieee754_pow+0x5dc>)
   25ad6:	4ba2      	ldr	r3, [pc, #648]	; (25d60 <__ieee754_pow+0x5e0>)
   25ad8:	f001 fb6a 	bl	271b0 <__aeabi_dadd>
   25adc:	0032      	movs	r2, r6
   25ade:	003b      	movs	r3, r7
   25ae0:	f002 faaa 	bl	28038 <__aeabi_dmul>
   25ae4:	4a9f      	ldr	r2, [pc, #636]	; (25d64 <__ieee754_pow+0x5e4>)
   25ae6:	4ba0      	ldr	r3, [pc, #640]	; (25d68 <__ieee754_pow+0x5e8>)
   25ae8:	f001 fb62 	bl	271b0 <__aeabi_dadd>
   25aec:	0032      	movs	r2, r6
   25aee:	0004      	movs	r4, r0
   25af0:	000d      	movs	r5, r1
   25af2:	003b      	movs	r3, r7
   25af4:	0030      	movs	r0, r6
   25af6:	0039      	movs	r1, r7
   25af8:	f002 fa9e 	bl	28038 <__aeabi_dmul>
   25afc:	0002      	movs	r2, r0
   25afe:	000b      	movs	r3, r1
   25b00:	0020      	movs	r0, r4
   25b02:	0029      	movs	r1, r5
   25b04:	f002 fa98 	bl	28038 <__aeabi_dmul>
   25b08:	9e02      	ldr	r6, [sp, #8]
   25b0a:	9f03      	ldr	r7, [sp, #12]
   25b0c:	0004      	movs	r4, r0
   25b0e:	000d      	movs	r5, r1
   25b10:	9804      	ldr	r0, [sp, #16]
   25b12:	9905      	ldr	r1, [sp, #20]
   25b14:	0032      	movs	r2, r6
   25b16:	003b      	movs	r3, r7
   25b18:	f001 fb4a 	bl	271b0 <__aeabi_dadd>
   25b1c:	9a06      	ldr	r2, [sp, #24]
   25b1e:	9b07      	ldr	r3, [sp, #28]
   25b20:	f002 fa8a 	bl	28038 <__aeabi_dmul>
   25b24:	0022      	movs	r2, r4
   25b26:	002b      	movs	r3, r5
   25b28:	f001 fb42 	bl	271b0 <__aeabi_dadd>
   25b2c:	0032      	movs	r2, r6
   25b2e:	900a      	str	r0, [sp, #40]	; 0x28
   25b30:	910b      	str	r1, [sp, #44]	; 0x2c
   25b32:	003b      	movs	r3, r7
   25b34:	0030      	movs	r0, r6
   25b36:	0039      	movs	r1, r7
   25b38:	9602      	str	r6, [sp, #8]
   25b3a:	9703      	str	r7, [sp, #12]
   25b3c:	f002 fa7c 	bl	28038 <__aeabi_dmul>
   25b40:	2200      	movs	r2, #0
   25b42:	4b8a      	ldr	r3, [pc, #552]	; (25d6c <__ieee754_pow+0x5ec>)
   25b44:	0004      	movs	r4, r0
   25b46:	000d      	movs	r5, r1
   25b48:	f001 fb32 	bl	271b0 <__aeabi_dadd>
   25b4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   25b4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   25b50:	f001 fb2e 	bl	271b0 <__aeabi_dadd>
   25b54:	2600      	movs	r6, #0
   25b56:	000f      	movs	r7, r1
   25b58:	0032      	movs	r2, r6
   25b5a:	000b      	movs	r3, r1
   25b5c:	9802      	ldr	r0, [sp, #8]
   25b5e:	9903      	ldr	r1, [sp, #12]
   25b60:	f002 fa6a 	bl	28038 <__aeabi_dmul>
   25b64:	2200      	movs	r2, #0
   25b66:	9002      	str	r0, [sp, #8]
   25b68:	9103      	str	r1, [sp, #12]
   25b6a:	4b80      	ldr	r3, [pc, #512]	; (25d6c <__ieee754_pow+0x5ec>)
   25b6c:	0030      	movs	r0, r6
   25b6e:	0039      	movs	r1, r7
   25b70:	f002 fce2 	bl	28538 <__aeabi_dsub>
   25b74:	0022      	movs	r2, r4
   25b76:	002b      	movs	r3, r5
   25b78:	f002 fcde 	bl	28538 <__aeabi_dsub>
   25b7c:	0002      	movs	r2, r0
   25b7e:	000b      	movs	r3, r1
   25b80:	980a      	ldr	r0, [sp, #40]	; 0x28
   25b82:	990b      	ldr	r1, [sp, #44]	; 0x2c
   25b84:	f002 fcd8 	bl	28538 <__aeabi_dsub>
   25b88:	9a04      	ldr	r2, [sp, #16]
   25b8a:	9b05      	ldr	r3, [sp, #20]
   25b8c:	f002 fa54 	bl	28038 <__aeabi_dmul>
   25b90:	0032      	movs	r2, r6
   25b92:	0004      	movs	r4, r0
   25b94:	000d      	movs	r5, r1
   25b96:	9806      	ldr	r0, [sp, #24]
   25b98:	9907      	ldr	r1, [sp, #28]
   25b9a:	003b      	movs	r3, r7
   25b9c:	f002 fa4c 	bl	28038 <__aeabi_dmul>
   25ba0:	0002      	movs	r2, r0
   25ba2:	000b      	movs	r3, r1
   25ba4:	0020      	movs	r0, r4
   25ba6:	0029      	movs	r1, r5
   25ba8:	f001 fb02 	bl	271b0 <__aeabi_dadd>
   25bac:	0004      	movs	r4, r0
   25bae:	000d      	movs	r5, r1
   25bb0:	0002      	movs	r2, r0
   25bb2:	000b      	movs	r3, r1
   25bb4:	9802      	ldr	r0, [sp, #8]
   25bb6:	9903      	ldr	r1, [sp, #12]
   25bb8:	f001 fafa 	bl	271b0 <__aeabi_dadd>
   25bbc:	2600      	movs	r6, #0
   25bbe:	22e0      	movs	r2, #224	; 0xe0
   25bc0:	4b6b      	ldr	r3, [pc, #428]	; (25d70 <__ieee754_pow+0x5f0>)
   25bc2:	0612      	lsls	r2, r2, #24
   25bc4:	0030      	movs	r0, r6
   25bc6:	000f      	movs	r7, r1
   25bc8:	f002 fa36 	bl	28038 <__aeabi_dmul>
   25bcc:	9a02      	ldr	r2, [sp, #8]
   25bce:	9b03      	ldr	r3, [sp, #12]
   25bd0:	9004      	str	r0, [sp, #16]
   25bd2:	9105      	str	r1, [sp, #20]
   25bd4:	0030      	movs	r0, r6
   25bd6:	0039      	movs	r1, r7
   25bd8:	f002 fcae 	bl	28538 <__aeabi_dsub>
   25bdc:	0002      	movs	r2, r0
   25bde:	000b      	movs	r3, r1
   25be0:	0020      	movs	r0, r4
   25be2:	0029      	movs	r1, r5
   25be4:	f002 fca8 	bl	28538 <__aeabi_dsub>
   25be8:	4a62      	ldr	r2, [pc, #392]	; (25d74 <__ieee754_pow+0x5f4>)
   25bea:	4b61      	ldr	r3, [pc, #388]	; (25d70 <__ieee754_pow+0x5f0>)
   25bec:	f002 fa24 	bl	28038 <__aeabi_dmul>
   25bf0:	4a61      	ldr	r2, [pc, #388]	; (25d78 <__ieee754_pow+0x5f8>)
   25bf2:	0004      	movs	r4, r0
   25bf4:	000d      	movs	r5, r1
   25bf6:	4b61      	ldr	r3, [pc, #388]	; (25d7c <__ieee754_pow+0x5fc>)
   25bf8:	0030      	movs	r0, r6
   25bfa:	0039      	movs	r1, r7
   25bfc:	f002 fa1c 	bl	28038 <__aeabi_dmul>
   25c00:	0002      	movs	r2, r0
   25c02:	000b      	movs	r3, r1
   25c04:	0020      	movs	r0, r4
   25c06:	0029      	movs	r1, r5
   25c08:	f001 fad2 	bl	271b0 <__aeabi_dadd>
   25c0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   25c0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   25c10:	f001 face 	bl	271b0 <__aeabi_dadd>
   25c14:	0006      	movs	r6, r0
   25c16:	4648      	mov	r0, r9
   25c18:	000f      	movs	r7, r1
   25c1a:	f002 fff7 	bl	28c0c <__aeabi_i2d>
   25c1e:	0004      	movs	r4, r0
   25c20:	000d      	movs	r5, r1
   25c22:	9804      	ldr	r0, [sp, #16]
   25c24:	9905      	ldr	r1, [sp, #20]
   25c26:	0032      	movs	r2, r6
   25c28:	003b      	movs	r3, r7
   25c2a:	f001 fac1 	bl	271b0 <__aeabi_dadd>
   25c2e:	9a08      	ldr	r2, [sp, #32]
   25c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
   25c32:	f001 fabd 	bl	271b0 <__aeabi_dadd>
   25c36:	0022      	movs	r2, r4
   25c38:	002b      	movs	r3, r5
   25c3a:	f001 fab9 	bl	271b0 <__aeabi_dadd>
   25c3e:	2000      	movs	r0, #0
   25c40:	0022      	movs	r2, r4
   25c42:	002b      	movs	r3, r5
   25c44:	9002      	str	r0, [sp, #8]
   25c46:	9103      	str	r1, [sp, #12]
   25c48:	f002 fc76 	bl	28538 <__aeabi_dsub>
   25c4c:	9a08      	ldr	r2, [sp, #32]
   25c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   25c50:	f002 fc72 	bl	28538 <__aeabi_dsub>
   25c54:	9a04      	ldr	r2, [sp, #16]
   25c56:	9b05      	ldr	r3, [sp, #20]
   25c58:	f002 fc6e 	bl	28538 <__aeabi_dsub>
   25c5c:	0002      	movs	r2, r0
   25c5e:	000b      	movs	r3, r1
   25c60:	0030      	movs	r0, r6
   25c62:	0039      	movs	r1, r7
   25c64:	f002 fc68 	bl	28538 <__aeabi_dsub>
   25c68:	9004      	str	r0, [sp, #16]
   25c6a:	9105      	str	r1, [sp, #20]
   25c6c:	465b      	mov	r3, fp
   25c6e:	4642      	mov	r2, r8
   25c70:	3b01      	subs	r3, #1
   25c72:	4313      	orrs	r3, r2
   25c74:	d100      	bne.n	25c78 <__ieee754_pow+0x4f8>
   25c76:	e1ab      	b.n	25fd0 <__ieee754_pow+0x850>
   25c78:	2300      	movs	r3, #0
   25c7a:	4c2c      	ldr	r4, [pc, #176]	; (25d2c <__ieee754_pow+0x5ac>)
   25c7c:	9306      	str	r3, [sp, #24]
   25c7e:	9407      	str	r4, [sp, #28]
   25c80:	9800      	ldr	r0, [sp, #0]
   25c82:	9901      	ldr	r1, [sp, #4]
   25c84:	2600      	movs	r6, #0
   25c86:	000b      	movs	r3, r1
   25c88:	0032      	movs	r2, r6
   25c8a:	000f      	movs	r7, r1
   25c8c:	f002 fc54 	bl	28538 <__aeabi_dsub>
   25c90:	9a02      	ldr	r2, [sp, #8]
   25c92:	9b03      	ldr	r3, [sp, #12]
   25c94:	f002 f9d0 	bl	28038 <__aeabi_dmul>
   25c98:	9a00      	ldr	r2, [sp, #0]
   25c9a:	9b01      	ldr	r3, [sp, #4]
   25c9c:	0004      	movs	r4, r0
   25c9e:	000d      	movs	r5, r1
   25ca0:	9804      	ldr	r0, [sp, #16]
   25ca2:	9905      	ldr	r1, [sp, #20]
   25ca4:	f002 f9c8 	bl	28038 <__aeabi_dmul>
   25ca8:	0002      	movs	r2, r0
   25caa:	000b      	movs	r3, r1
   25cac:	0020      	movs	r0, r4
   25cae:	0029      	movs	r1, r5
   25cb0:	f001 fa7e 	bl	271b0 <__aeabi_dadd>
   25cb4:	0004      	movs	r4, r0
   25cb6:	000d      	movs	r5, r1
   25cb8:	9802      	ldr	r0, [sp, #8]
   25cba:	9903      	ldr	r1, [sp, #12]
   25cbc:	0032      	movs	r2, r6
   25cbe:	003b      	movs	r3, r7
   25cc0:	9400      	str	r4, [sp, #0]
   25cc2:	9501      	str	r5, [sp, #4]
   25cc4:	f002 f9b8 	bl	28038 <__aeabi_dmul>
   25cc8:	0002      	movs	r2, r0
   25cca:	000b      	movs	r3, r1
   25ccc:	0006      	movs	r6, r0
   25cce:	000f      	movs	r7, r1
   25cd0:	0020      	movs	r0, r4
   25cd2:	0029      	movs	r1, r5
   25cd4:	f001 fa6c 	bl	271b0 <__aeabi_dadd>
   25cd8:	4b29      	ldr	r3, [pc, #164]	; (25d80 <__ieee754_pow+0x600>)
   25cda:	0004      	movs	r4, r0
   25cdc:	000d      	movs	r5, r1
   25cde:	0002      	movs	r2, r0
   25ce0:	468b      	mov	fp, r1
   25ce2:	4299      	cmp	r1, r3
   25ce4:	dc00      	bgt.n	25ce8 <__ieee754_pow+0x568>
   25ce6:	e14f      	b.n	25f88 <__ieee754_pow+0x808>
   25ce8:	4b26      	ldr	r3, [pc, #152]	; (25d84 <__ieee754_pow+0x604>)
   25cea:	18cb      	adds	r3, r1, r3
   25cec:	4303      	orrs	r3, r0
   25cee:	d000      	beq.n	25cf2 <__ieee754_pow+0x572>
   25cf0:	e1e2      	b.n	260b8 <__ieee754_pow+0x938>
   25cf2:	9800      	ldr	r0, [sp, #0]
   25cf4:	9901      	ldr	r1, [sp, #4]
   25cf6:	4a24      	ldr	r2, [pc, #144]	; (25d88 <__ieee754_pow+0x608>)
   25cf8:	4b24      	ldr	r3, [pc, #144]	; (25d8c <__ieee754_pow+0x60c>)
   25cfa:	f001 fa59 	bl	271b0 <__aeabi_dadd>
   25cfe:	0032      	movs	r2, r6
   25d00:	9002      	str	r0, [sp, #8]
   25d02:	9103      	str	r1, [sp, #12]
   25d04:	003b      	movs	r3, r7
   25d06:	0020      	movs	r0, r4
   25d08:	0029      	movs	r1, r5
   25d0a:	f002 fc15 	bl	28538 <__aeabi_dsub>
   25d0e:	0002      	movs	r2, r0
   25d10:	000b      	movs	r3, r1
   25d12:	9802      	ldr	r0, [sp, #8]
   25d14:	9903      	ldr	r1, [sp, #12]
   25d16:	f000 fe11 	bl	2693c <__aeabi_dcmpgt>
   25d1a:	46aa      	mov	sl, r5
   25d1c:	e038      	b.n	25d90 <__ieee754_pow+0x610>
   25d1e:	46c0      	nop			; (mov r8, r8)
   25d20:	000fffff 	.word	0x000fffff
   25d24:	43400000 	.word	0x43400000
   25d28:	fffffc01 	.word	0xfffffc01
   25d2c:	3ff00000 	.word	0x3ff00000
   25d30:	0003988e 	.word	0x0003988e
   25d34:	000bb679 	.word	0x000bb679
   25d38:	fff00000 	.word	0xfff00000
   25d3c:	4a454eef 	.word	0x4a454eef
   25d40:	3fca7e28 	.word	0x3fca7e28
   25d44:	93c9db65 	.word	0x93c9db65
   25d48:	3fcd864a 	.word	0x3fcd864a
   25d4c:	a91d4101 	.word	0xa91d4101
   25d50:	3fd17460 	.word	0x3fd17460
   25d54:	518f264d 	.word	0x518f264d
   25d58:	3fd55555 	.word	0x3fd55555
   25d5c:	db6fabff 	.word	0xdb6fabff
   25d60:	3fdb6db6 	.word	0x3fdb6db6
   25d64:	33333303 	.word	0x33333303
   25d68:	3fe33333 	.word	0x3fe33333
   25d6c:	40080000 	.word	0x40080000
   25d70:	3feec709 	.word	0x3feec709
   25d74:	dc3a03fd 	.word	0xdc3a03fd
   25d78:	145b01f5 	.word	0x145b01f5
   25d7c:	be3e2fe0 	.word	0xbe3e2fe0
   25d80:	408fffff 	.word	0x408fffff
   25d84:	bf700000 	.word	0xbf700000
   25d88:	652b82fe 	.word	0x652b82fe
   25d8c:	3c971547 	.word	0x3c971547
   25d90:	2800      	cmp	r0, #0
   25d92:	d000      	beq.n	25d96 <__ieee754_pow+0x616>
   25d94:	e190      	b.n	260b8 <__ieee754_pow+0x938>
   25d96:	4aec      	ldr	r2, [pc, #944]	; (26148 <__ieee754_pow+0x9c8>)
   25d98:	4653      	mov	r3, sl
   25d9a:	4694      	mov	ip, r2
   25d9c:	2280      	movs	r2, #128	; 0x80
   25d9e:	0352      	lsls	r2, r2, #13
   25da0:	0011      	movs	r1, r2
   25da2:	151b      	asrs	r3, r3, #20
   25da4:	4463      	add	r3, ip
   25da6:	4119      	asrs	r1, r3
   25da8:	000b      	movs	r3, r1
   25daa:	4690      	mov	r8, r2
   25dac:	4ae7      	ldr	r2, [pc, #924]	; (2614c <__ieee754_pow+0x9cc>)
   25dae:	445b      	add	r3, fp
   25db0:	4694      	mov	ip, r2
   25db2:	005c      	lsls	r4, r3, #1
   25db4:	0d64      	lsrs	r4, r4, #21
   25db6:	4de6      	ldr	r5, [pc, #920]	; (26150 <__ieee754_pow+0x9d0>)
   25db8:	4464      	add	r4, ip
   25dba:	4125      	asrs	r5, r4
   25dbc:	001a      	movs	r2, r3
   25dbe:	43aa      	bics	r2, r5
   25dc0:	0011      	movs	r1, r2
   25dc2:	4642      	mov	r2, r8
   25dc4:	031b      	lsls	r3, r3, #12
   25dc6:	0b1b      	lsrs	r3, r3, #12
   25dc8:	4313      	orrs	r3, r2
   25dca:	2214      	movs	r2, #20
   25dcc:	1b14      	subs	r4, r2, r4
   25dce:	4123      	asrs	r3, r4
   25dd0:	4699      	mov	r9, r3
   25dd2:	465b      	mov	r3, fp
   25dd4:	2000      	movs	r0, #0
   25dd6:	2b00      	cmp	r3, #0
   25dd8:	da00      	bge.n	25ddc <__ieee754_pow+0x65c>
   25dda:	e1b0      	b.n	2613e <__ieee754_pow+0x9be>
   25ddc:	0002      	movs	r2, r0
   25dde:	000b      	movs	r3, r1
   25de0:	0030      	movs	r0, r6
   25de2:	0039      	movs	r1, r7
   25de4:	f002 fba8 	bl	28538 <__aeabi_dsub>
   25de8:	000b      	movs	r3, r1
   25dea:	0002      	movs	r2, r0
   25dec:	0006      	movs	r6, r0
   25dee:	000f      	movs	r7, r1
   25df0:	9800      	ldr	r0, [sp, #0]
   25df2:	9901      	ldr	r1, [sp, #4]
   25df4:	f001 f9dc 	bl	271b0 <__aeabi_dadd>
   25df8:	464b      	mov	r3, r9
   25dfa:	051b      	lsls	r3, r3, #20
   25dfc:	000d      	movs	r5, r1
   25dfe:	4698      	mov	r8, r3
   25e00:	2400      	movs	r4, #0
   25e02:	2200      	movs	r2, #0
   25e04:	4bd3      	ldr	r3, [pc, #844]	; (26154 <__ieee754_pow+0x9d4>)
   25e06:	0020      	movs	r0, r4
   25e08:	0029      	movs	r1, r5
   25e0a:	f002 f915 	bl	28038 <__aeabi_dmul>
   25e0e:	0032      	movs	r2, r6
   25e10:	9002      	str	r0, [sp, #8]
   25e12:	9103      	str	r1, [sp, #12]
   25e14:	003b      	movs	r3, r7
   25e16:	0020      	movs	r0, r4
   25e18:	0029      	movs	r1, r5
   25e1a:	f002 fb8d 	bl	28538 <__aeabi_dsub>
   25e1e:	0002      	movs	r2, r0
   25e20:	000b      	movs	r3, r1
   25e22:	9800      	ldr	r0, [sp, #0]
   25e24:	9901      	ldr	r1, [sp, #4]
   25e26:	f002 fb87 	bl	28538 <__aeabi_dsub>
   25e2a:	4acb      	ldr	r2, [pc, #812]	; (26158 <__ieee754_pow+0x9d8>)
   25e2c:	4bcb      	ldr	r3, [pc, #812]	; (2615c <__ieee754_pow+0x9dc>)
   25e2e:	f002 f903 	bl	28038 <__aeabi_dmul>
   25e32:	4acb      	ldr	r2, [pc, #812]	; (26160 <__ieee754_pow+0x9e0>)
   25e34:	0006      	movs	r6, r0
   25e36:	000f      	movs	r7, r1
   25e38:	4bca      	ldr	r3, [pc, #808]	; (26164 <__ieee754_pow+0x9e4>)
   25e3a:	0020      	movs	r0, r4
   25e3c:	0029      	movs	r1, r5
   25e3e:	f002 f8fb 	bl	28038 <__aeabi_dmul>
   25e42:	0002      	movs	r2, r0
   25e44:	000b      	movs	r3, r1
   25e46:	0030      	movs	r0, r6
   25e48:	0039      	movs	r1, r7
   25e4a:	f001 f9b1 	bl	271b0 <__aeabi_dadd>
   25e4e:	0004      	movs	r4, r0
   25e50:	000d      	movs	r5, r1
   25e52:	0002      	movs	r2, r0
   25e54:	000b      	movs	r3, r1
   25e56:	9802      	ldr	r0, [sp, #8]
   25e58:	9903      	ldr	r1, [sp, #12]
   25e5a:	f001 f9a9 	bl	271b0 <__aeabi_dadd>
   25e5e:	9a02      	ldr	r2, [sp, #8]
   25e60:	9b03      	ldr	r3, [sp, #12]
   25e62:	0006      	movs	r6, r0
   25e64:	000f      	movs	r7, r1
   25e66:	f002 fb67 	bl	28538 <__aeabi_dsub>
   25e6a:	0002      	movs	r2, r0
   25e6c:	000b      	movs	r3, r1
   25e6e:	0020      	movs	r0, r4
   25e70:	0029      	movs	r1, r5
   25e72:	f002 fb61 	bl	28538 <__aeabi_dsub>
   25e76:	0032      	movs	r2, r6
   25e78:	9000      	str	r0, [sp, #0]
   25e7a:	9101      	str	r1, [sp, #4]
   25e7c:	003b      	movs	r3, r7
   25e7e:	0030      	movs	r0, r6
   25e80:	0039      	movs	r1, r7
   25e82:	f002 f8d9 	bl	28038 <__aeabi_dmul>
   25e86:	0004      	movs	r4, r0
   25e88:	000d      	movs	r5, r1
   25e8a:	4ab7      	ldr	r2, [pc, #732]	; (26168 <__ieee754_pow+0x9e8>)
   25e8c:	4bb7      	ldr	r3, [pc, #732]	; (2616c <__ieee754_pow+0x9ec>)
   25e8e:	f002 f8d3 	bl	28038 <__aeabi_dmul>
   25e92:	4ab7      	ldr	r2, [pc, #732]	; (26170 <__ieee754_pow+0x9f0>)
   25e94:	4bb7      	ldr	r3, [pc, #732]	; (26174 <__ieee754_pow+0x9f4>)
   25e96:	f002 fb4f 	bl	28538 <__aeabi_dsub>
   25e9a:	0022      	movs	r2, r4
   25e9c:	002b      	movs	r3, r5
   25e9e:	f002 f8cb 	bl	28038 <__aeabi_dmul>
   25ea2:	4ab5      	ldr	r2, [pc, #724]	; (26178 <__ieee754_pow+0x9f8>)
   25ea4:	4bb5      	ldr	r3, [pc, #724]	; (2617c <__ieee754_pow+0x9fc>)
   25ea6:	f001 f983 	bl	271b0 <__aeabi_dadd>
   25eaa:	0022      	movs	r2, r4
   25eac:	002b      	movs	r3, r5
   25eae:	f002 f8c3 	bl	28038 <__aeabi_dmul>
   25eb2:	4ab3      	ldr	r2, [pc, #716]	; (26180 <__ieee754_pow+0xa00>)
   25eb4:	4bb3      	ldr	r3, [pc, #716]	; (26184 <__ieee754_pow+0xa04>)
   25eb6:	f002 fb3f 	bl	28538 <__aeabi_dsub>
   25eba:	0022      	movs	r2, r4
   25ebc:	002b      	movs	r3, r5
   25ebe:	f002 f8bb 	bl	28038 <__aeabi_dmul>
   25ec2:	4ab1      	ldr	r2, [pc, #708]	; (26188 <__ieee754_pow+0xa08>)
   25ec4:	4bb1      	ldr	r3, [pc, #708]	; (2618c <__ieee754_pow+0xa0c>)
   25ec6:	f001 f973 	bl	271b0 <__aeabi_dadd>
   25eca:	0022      	movs	r2, r4
   25ecc:	002b      	movs	r3, r5
   25ece:	f002 f8b3 	bl	28038 <__aeabi_dmul>
   25ed2:	0002      	movs	r2, r0
   25ed4:	000b      	movs	r3, r1
   25ed6:	0030      	movs	r0, r6
   25ed8:	0039      	movs	r1, r7
   25eda:	f002 fb2d 	bl	28538 <__aeabi_dsub>
   25ede:	0004      	movs	r4, r0
   25ee0:	000d      	movs	r5, r1
   25ee2:	0002      	movs	r2, r0
   25ee4:	000b      	movs	r3, r1
   25ee6:	0030      	movs	r0, r6
   25ee8:	0039      	movs	r1, r7
   25eea:	f002 f8a5 	bl	28038 <__aeabi_dmul>
   25eee:	2380      	movs	r3, #128	; 0x80
   25ef0:	9002      	str	r0, [sp, #8]
   25ef2:	9103      	str	r1, [sp, #12]
   25ef4:	2200      	movs	r2, #0
   25ef6:	05db      	lsls	r3, r3, #23
   25ef8:	0020      	movs	r0, r4
   25efa:	0029      	movs	r1, r5
   25efc:	f002 fb1c 	bl	28538 <__aeabi_dsub>
   25f00:	0002      	movs	r2, r0
   25f02:	000b      	movs	r3, r1
   25f04:	9802      	ldr	r0, [sp, #8]
   25f06:	9903      	ldr	r1, [sp, #12]
   25f08:	f001 fc62 	bl	277d0 <__aeabi_ddiv>
   25f0c:	9a00      	ldr	r2, [sp, #0]
   25f0e:	9b01      	ldr	r3, [sp, #4]
   25f10:	0004      	movs	r4, r0
   25f12:	000d      	movs	r5, r1
   25f14:	0030      	movs	r0, r6
   25f16:	0039      	movs	r1, r7
   25f18:	f002 f88e 	bl	28038 <__aeabi_dmul>
   25f1c:	9a00      	ldr	r2, [sp, #0]
   25f1e:	9b01      	ldr	r3, [sp, #4]
   25f20:	f001 f946 	bl	271b0 <__aeabi_dadd>
   25f24:	0002      	movs	r2, r0
   25f26:	000b      	movs	r3, r1
   25f28:	0020      	movs	r0, r4
   25f2a:	0029      	movs	r1, r5
   25f2c:	f002 fb04 	bl	28538 <__aeabi_dsub>
   25f30:	0032      	movs	r2, r6
   25f32:	003b      	movs	r3, r7
   25f34:	f002 fb00 	bl	28538 <__aeabi_dsub>
   25f38:	0002      	movs	r2, r0
   25f3a:	000b      	movs	r3, r1
   25f3c:	2000      	movs	r0, #0
   25f3e:	4994      	ldr	r1, [pc, #592]	; (26190 <__ieee754_pow+0xa10>)
   25f40:	f002 fafa 	bl	28538 <__aeabi_dsub>
   25f44:	4643      	mov	r3, r8
   25f46:	185b      	adds	r3, r3, r1
   25f48:	151a      	asrs	r2, r3, #20
   25f4a:	2a00      	cmp	r2, #0
   25f4c:	dc00      	bgt.n	25f50 <__ieee754_pow+0x7d0>
   25f4e:	e149      	b.n	261e4 <__ieee754_pow+0xa64>
   25f50:	0019      	movs	r1, r3
   25f52:	9a06      	ldr	r2, [sp, #24]
   25f54:	9b07      	ldr	r3, [sp, #28]
   25f56:	f002 f86f 	bl	28038 <__aeabi_dmul>
   25f5a:	e459      	b.n	25810 <__ieee754_pow+0x90>
   25f5c:	003a      	movs	r2, r7
   25f5e:	0033      	movs	r3, r6
   25f60:	0038      	movs	r0, r7
   25f62:	0031      	movs	r1, r6
   25f64:	f002 f868 	bl	28038 <__aeabi_dmul>
   25f68:	e452      	b.n	25810 <__ieee754_pow+0x90>
   25f6a:	4653      	mov	r3, sl
   25f6c:	2b00      	cmp	r3, #0
   25f6e:	db00      	blt.n	25f72 <__ieee754_pow+0x7f2>
   25f70:	e4d9      	b.n	25926 <__ieee754_pow+0x1a6>
   25f72:	9c00      	ldr	r4, [sp, #0]
   25f74:	9d01      	ldr	r5, [sp, #4]
   25f76:	2280      	movs	r2, #128	; 0x80
   25f78:	0612      	lsls	r2, r2, #24
   25f7a:	002b      	movs	r3, r5
   25f7c:	4694      	mov	ip, r2
   25f7e:	4463      	add	r3, ip
   25f80:	0020      	movs	r0, r4
   25f82:	0019      	movs	r1, r3
   25f84:	f7ff fc44 	bl	25810 <__ieee754_pow+0x90>
   25f88:	004b      	lsls	r3, r1, #1
   25f8a:	085b      	lsrs	r3, r3, #1
   25f8c:	469a      	mov	sl, r3
   25f8e:	4b81      	ldr	r3, [pc, #516]	; (26194 <__ieee754_pow+0xa14>)
   25f90:	459a      	cmp	sl, r3
   25f92:	dc00      	bgt.n	25f96 <__ieee754_pow+0x816>
   25f94:	e0b1      	b.n	260fa <__ieee754_pow+0x97a>
   25f96:	4b80      	ldr	r3, [pc, #512]	; (26198 <__ieee754_pow+0xa18>)
   25f98:	445b      	add	r3, fp
   25f9a:	431a      	orrs	r2, r3
   25f9c:	d10c      	bne.n	25fb8 <__ieee754_pow+0x838>
   25f9e:	0032      	movs	r2, r6
   25fa0:	003b      	movs	r3, r7
   25fa2:	f002 fac9 	bl	28538 <__aeabi_dsub>
   25fa6:	0002      	movs	r2, r0
   25fa8:	000b      	movs	r3, r1
   25faa:	9800      	ldr	r0, [sp, #0]
   25fac:	9901      	ldr	r1, [sp, #4]
   25fae:	f000 fcbb 	bl	26928 <__aeabi_dcmple>
   25fb2:	2800      	cmp	r0, #0
   25fb4:	d100      	bne.n	25fb8 <__ieee754_pow+0x838>
   25fb6:	e6ee      	b.n	25d96 <__ieee754_pow+0x616>
   25fb8:	9806      	ldr	r0, [sp, #24]
   25fba:	9907      	ldr	r1, [sp, #28]
   25fbc:	4a77      	ldr	r2, [pc, #476]	; (2619c <__ieee754_pow+0xa1c>)
   25fbe:	4b78      	ldr	r3, [pc, #480]	; (261a0 <__ieee754_pow+0xa20>)
   25fc0:	f002 f83a 	bl	28038 <__aeabi_dmul>
   25fc4:	4a75      	ldr	r2, [pc, #468]	; (2619c <__ieee754_pow+0xa1c>)
   25fc6:	4b76      	ldr	r3, [pc, #472]	; (261a0 <__ieee754_pow+0xa20>)
   25fc8:	f002 f836 	bl	28038 <__aeabi_dmul>
   25fcc:	f7ff fc20 	bl	25810 <__ieee754_pow+0x90>
   25fd0:	2300      	movs	r3, #0
   25fd2:	4c74      	ldr	r4, [pc, #464]	; (261a4 <__ieee754_pow+0xa24>)
   25fd4:	9306      	str	r3, [sp, #24]
   25fd6:	9407      	str	r4, [sp, #28]
   25fd8:	e652      	b.n	25c80 <__ieee754_pow+0x500>
   25fda:	0002      	movs	r2, r0
   25fdc:	000b      	movs	r3, r1
   25fde:	2000      	movs	r0, #0
   25fe0:	496b      	ldr	r1, [pc, #428]	; (26190 <__ieee754_pow+0xa10>)
   25fe2:	f001 fbf5 	bl	277d0 <__aeabi_ddiv>
   25fe6:	f7ff fc32 	bl	2584e <__ieee754_pow+0xce>
   25fea:	4653      	mov	r3, sl
   25fec:	2b00      	cmp	r3, #0
   25fee:	db00      	blt.n	25ff2 <__ieee754_pow+0x872>
   25ff0:	e499      	b.n	25926 <__ieee754_pow+0x1a6>
   25ff2:	e454      	b.n	2589e <__ieee754_pow+0x11e>
   25ff4:	4b6c      	ldr	r3, [pc, #432]	; (261a8 <__ieee754_pow+0xa28>)
   25ff6:	429c      	cmp	r4, r3
   25ff8:	ddf7      	ble.n	25fea <__ieee754_pow+0x86a>
   25ffa:	4b65      	ldr	r3, [pc, #404]	; (26190 <__ieee754_pow+0xa10>)
   25ffc:	429c      	cmp	r4, r3
   25ffe:	dd00      	ble.n	26002 <__ieee754_pow+0x882>
   26000:	e44a      	b.n	25898 <__ieee754_pow+0x118>
   26002:	2200      	movs	r2, #0
   26004:	4b62      	ldr	r3, [pc, #392]	; (26190 <__ieee754_pow+0xa10>)
   26006:	f002 fa97 	bl	28538 <__aeabi_dsub>
   2600a:	22c0      	movs	r2, #192	; 0xc0
   2600c:	4b67      	ldr	r3, [pc, #412]	; (261ac <__ieee754_pow+0xa2c>)
   2600e:	05d2      	lsls	r2, r2, #23
   26010:	0004      	movs	r4, r0
   26012:	000d      	movs	r5, r1
   26014:	f002 f810 	bl	28038 <__aeabi_dmul>
   26018:	4a65      	ldr	r2, [pc, #404]	; (261b0 <__ieee754_pow+0xa30>)
   2601a:	0006      	movs	r6, r0
   2601c:	000f      	movs	r7, r1
   2601e:	4b65      	ldr	r3, [pc, #404]	; (261b4 <__ieee754_pow+0xa34>)
   26020:	0020      	movs	r0, r4
   26022:	0029      	movs	r1, r5
   26024:	f002 f808 	bl	28038 <__aeabi_dmul>
   26028:	2200      	movs	r2, #0
   2602a:	9002      	str	r0, [sp, #8]
   2602c:	9103      	str	r1, [sp, #12]
   2602e:	4b62      	ldr	r3, [pc, #392]	; (261b8 <__ieee754_pow+0xa38>)
   26030:	0020      	movs	r0, r4
   26032:	0029      	movs	r1, r5
   26034:	f002 f800 	bl	28038 <__aeabi_dmul>
   26038:	0002      	movs	r2, r0
   2603a:	000b      	movs	r3, r1
   2603c:	485f      	ldr	r0, [pc, #380]	; (261bc <__ieee754_pow+0xa3c>)
   2603e:	4960      	ldr	r1, [pc, #384]	; (261c0 <__ieee754_pow+0xa40>)
   26040:	f002 fa7a 	bl	28538 <__aeabi_dsub>
   26044:	0022      	movs	r2, r4
   26046:	002b      	movs	r3, r5
   26048:	f001 fff6 	bl	28038 <__aeabi_dmul>
   2604c:	0002      	movs	r2, r0
   2604e:	000b      	movs	r3, r1
   26050:	2000      	movs	r0, #0
   26052:	495c      	ldr	r1, [pc, #368]	; (261c4 <__ieee754_pow+0xa44>)
   26054:	f002 fa70 	bl	28538 <__aeabi_dsub>
   26058:	0022      	movs	r2, r4
   2605a:	9004      	str	r0, [sp, #16]
   2605c:	9105      	str	r1, [sp, #20]
   2605e:	002b      	movs	r3, r5
   26060:	0020      	movs	r0, r4
   26062:	0029      	movs	r1, r5
   26064:	f001 ffe8 	bl	28038 <__aeabi_dmul>
   26068:	0002      	movs	r2, r0
   2606a:	000b      	movs	r3, r1
   2606c:	9804      	ldr	r0, [sp, #16]
   2606e:	9905      	ldr	r1, [sp, #20]
   26070:	f001 ffe2 	bl	28038 <__aeabi_dmul>
   26074:	4a54      	ldr	r2, [pc, #336]	; (261c8 <__ieee754_pow+0xa48>)
   26076:	4b4d      	ldr	r3, [pc, #308]	; (261ac <__ieee754_pow+0xa2c>)
   26078:	f001 ffde 	bl	28038 <__aeabi_dmul>
   2607c:	0002      	movs	r2, r0
   2607e:	000b      	movs	r3, r1
   26080:	9802      	ldr	r0, [sp, #8]
   26082:	9903      	ldr	r1, [sp, #12]
   26084:	f002 fa58 	bl	28538 <__aeabi_dsub>
   26088:	0002      	movs	r2, r0
   2608a:	000b      	movs	r3, r1
   2608c:	0004      	movs	r4, r0
   2608e:	000d      	movs	r5, r1
   26090:	0030      	movs	r0, r6
   26092:	0039      	movs	r1, r7
   26094:	f001 f88c 	bl	271b0 <__aeabi_dadd>
   26098:	2000      	movs	r0, #0
   2609a:	0032      	movs	r2, r6
   2609c:	003b      	movs	r3, r7
   2609e:	9002      	str	r0, [sp, #8]
   260a0:	9103      	str	r1, [sp, #12]
   260a2:	f002 fa49 	bl	28538 <__aeabi_dsub>
   260a6:	0002      	movs	r2, r0
   260a8:	000b      	movs	r3, r1
   260aa:	0020      	movs	r0, r4
   260ac:	0029      	movs	r1, r5
   260ae:	f002 fa43 	bl	28538 <__aeabi_dsub>
   260b2:	9004      	str	r0, [sp, #16]
   260b4:	9105      	str	r1, [sp, #20]
   260b6:	e5d9      	b.n	25c6c <__ieee754_pow+0x4ec>
   260b8:	4a44      	ldr	r2, [pc, #272]	; (261cc <__ieee754_pow+0xa4c>)
   260ba:	4b45      	ldr	r3, [pc, #276]	; (261d0 <__ieee754_pow+0xa50>)
   260bc:	9806      	ldr	r0, [sp, #24]
   260be:	9907      	ldr	r1, [sp, #28]
   260c0:	f001 ffba 	bl	28038 <__aeabi_dmul>
   260c4:	4a41      	ldr	r2, [pc, #260]	; (261cc <__ieee754_pow+0xa4c>)
   260c6:	4b42      	ldr	r3, [pc, #264]	; (261d0 <__ieee754_pow+0xa50>)
   260c8:	f001 ffb6 	bl	28038 <__aeabi_dmul>
   260cc:	f7ff fba0 	bl	25810 <__ieee754_pow+0x90>
   260d0:	2a00      	cmp	r2, #0
   260d2:	d001      	beq.n	260d8 <__ieee754_pow+0x958>
   260d4:	f7ff fba9 	bl	2582a <__ieee754_pow+0xaa>
   260d8:	3214      	adds	r2, #20
   260da:	1ad3      	subs	r3, r2, r3
   260dc:	002a      	movs	r2, r5
   260de:	411a      	asrs	r2, r3
   260e0:	0011      	movs	r1, r2
   260e2:	4099      	lsls	r1, r3
   260e4:	428d      	cmp	r5, r1
   260e6:	d001      	beq.n	260ec <__ieee754_pow+0x96c>
   260e8:	f7ff fb76 	bl	257d8 <__ieee754_pow+0x58>
   260ec:	2301      	movs	r3, #1
   260ee:	401a      	ands	r2, r3
   260f0:	18db      	adds	r3, r3, r3
   260f2:	1a9b      	subs	r3, r3, r2
   260f4:	469b      	mov	fp, r3
   260f6:	f7ff fb6f 	bl	257d8 <__ieee754_pow+0x58>
   260fa:	2200      	movs	r2, #0
   260fc:	4b31      	ldr	r3, [pc, #196]	; (261c4 <__ieee754_pow+0xa44>)
   260fe:	4690      	mov	r8, r2
   26100:	4691      	mov	r9, r2
   26102:	459a      	cmp	sl, r3
   26104:	dc00      	bgt.n	26108 <__ieee754_pow+0x988>
   26106:	e67b      	b.n	25e00 <__ieee754_pow+0x680>
   26108:	e645      	b.n	25d96 <__ieee754_pow+0x616>
   2610a:	0002      	movs	r2, r0
   2610c:	000b      	movs	r3, r1
   2610e:	f002 fa13 	bl	28538 <__aeabi_dsub>
   26112:	0002      	movs	r2, r0
   26114:	000b      	movs	r3, r1
   26116:	f001 fb5b 	bl	277d0 <__aeabi_ddiv>
   2611a:	f7ff fb79 	bl	25810 <__ieee754_pow+0x90>
   2611e:	2380      	movs	r3, #128	; 0x80
   26120:	4c2c      	ldr	r4, [pc, #176]	; (261d4 <__ieee754_pow+0xa54>)
   26122:	05db      	lsls	r3, r3, #23
   26124:	9308      	str	r3, [sp, #32]
   26126:	9409      	str	r4, [sp, #36]	; 0x24
   26128:	4b2b      	ldr	r3, [pc, #172]	; (261d8 <__ieee754_pow+0xa58>)
   2612a:	4c2c      	ldr	r4, [pc, #176]	; (261dc <__ieee754_pow+0xa5c>)
   2612c:	2200      	movs	r2, #0
   2612e:	930c      	str	r3, [sp, #48]	; 0x30
   26130:	940d      	str	r4, [sp, #52]	; 0x34
   26132:	2480      	movs	r4, #128	; 0x80
   26134:	4b2a      	ldr	r3, [pc, #168]	; (261e0 <__ieee754_pow+0xa60>)
   26136:	02e4      	lsls	r4, r4, #11
   26138:	9206      	str	r2, [sp, #24]
   2613a:	9307      	str	r3, [sp, #28]
   2613c:	e449      	b.n	259d2 <__ieee754_pow+0x252>
   2613e:	464b      	mov	r3, r9
   26140:	425b      	negs	r3, r3
   26142:	4699      	mov	r9, r3
   26144:	e64a      	b.n	25ddc <__ieee754_pow+0x65c>
   26146:	46c0      	nop			; (mov r8, r8)
   26148:	fffffc02 	.word	0xfffffc02
   2614c:	fffffc01 	.word	0xfffffc01
   26150:	000fffff 	.word	0x000fffff
   26154:	3fe62e43 	.word	0x3fe62e43
   26158:	fefa39ef 	.word	0xfefa39ef
   2615c:	3fe62e42 	.word	0x3fe62e42
   26160:	0ca86c39 	.word	0x0ca86c39
   26164:	be205c61 	.word	0xbe205c61
   26168:	72bea4d0 	.word	0x72bea4d0
   2616c:	3e663769 	.word	0x3e663769
   26170:	c5d26bf1 	.word	0xc5d26bf1
   26174:	3ebbbd41 	.word	0x3ebbbd41
   26178:	af25de2c 	.word	0xaf25de2c
   2617c:	3f11566a 	.word	0x3f11566a
   26180:	16bebd93 	.word	0x16bebd93
   26184:	3f66c16c 	.word	0x3f66c16c
   26188:	5555553e 	.word	0x5555553e
   2618c:	3fc55555 	.word	0x3fc55555
   26190:	3ff00000 	.word	0x3ff00000
   26194:	4090cbff 	.word	0x4090cbff
   26198:	3f6f3400 	.word	0x3f6f3400
   2619c:	c2f8f359 	.word	0xc2f8f359
   261a0:	01a56e1f 	.word	0x01a56e1f
   261a4:	bff00000 	.word	0xbff00000
   261a8:	3feffffe 	.word	0x3feffffe
   261ac:	3ff71547 	.word	0x3ff71547
   261b0:	f85ddf44 	.word	0xf85ddf44
   261b4:	3e54ae0b 	.word	0x3e54ae0b
   261b8:	3fd00000 	.word	0x3fd00000
   261bc:	55555555 	.word	0x55555555
   261c0:	3fd55555 	.word	0x3fd55555
   261c4:	3fe00000 	.word	0x3fe00000
   261c8:	652b82fe 	.word	0x652b82fe
   261cc:	8800759c 	.word	0x8800759c
   261d0:	7e37e43c 	.word	0x7e37e43c
   261d4:	3fe2b803 	.word	0x3fe2b803
   261d8:	43cfd006 	.word	0x43cfd006
   261dc:	3e4cfdeb 	.word	0x3e4cfdeb
   261e0:	3ff80000 	.word	0x3ff80000
   261e4:	464a      	mov	r2, r9
   261e6:	f000 f999 	bl	2651c <scalbn>
   261ea:	e6b2      	b.n	25f52 <__ieee754_pow+0x7d2>

000261ec <__ieee754_sqrt>:
   261ec:	4b6c      	ldr	r3, [pc, #432]	; (263a0 <__ieee754_sqrt+0x1b4>)
   261ee:	b5f0      	push	{r4, r5, r6, r7, lr}
   261f0:	000a      	movs	r2, r1
   261f2:	4646      	mov	r6, r8
   261f4:	000d      	movs	r5, r1
   261f6:	46d6      	mov	lr, sl
   261f8:	464f      	mov	r7, r9
   261fa:	0019      	movs	r1, r3
   261fc:	b5c0      	push	{r6, r7, lr}
   261fe:	0004      	movs	r4, r0
   26200:	0006      	movs	r6, r0
   26202:	4029      	ands	r1, r5
   26204:	4299      	cmp	r1, r3
   26206:	d100      	bne.n	2620a <__ieee754_sqrt+0x1e>
   26208:	e0a7      	b.n	2635a <__ieee754_sqrt+0x16e>
   2620a:	2d00      	cmp	r5, #0
   2620c:	dc00      	bgt.n	26210 <__ieee754_sqrt+0x24>
   2620e:	e081      	b.n	26314 <__ieee754_sqrt+0x128>
   26210:	152f      	asrs	r7, r5, #20
   26212:	d100      	bne.n	26216 <__ieee754_sqrt+0x2a>
   26214:	e08e      	b.n	26334 <__ieee754_sqrt+0x148>
   26216:	4b63      	ldr	r3, [pc, #396]	; (263a4 <__ieee754_sqrt+0x1b8>)
   26218:	0312      	lsls	r2, r2, #12
   2621a:	469c      	mov	ip, r3
   2621c:	2380      	movs	r3, #128	; 0x80
   2621e:	0b12      	lsrs	r2, r2, #12
   26220:	035b      	lsls	r3, r3, #13
   26222:	4467      	add	r7, ip
   26224:	431a      	orrs	r2, r3
   26226:	07fb      	lsls	r3, r7, #31
   26228:	d468      	bmi.n	262fc <__ieee754_sqrt+0x110>
   2622a:	107b      	asrs	r3, r7, #1
   2622c:	469c      	mov	ip, r3
   2622e:	0fe3      	lsrs	r3, r4, #31
   26230:	189b      	adds	r3, r3, r2
   26232:	189b      	adds	r3, r3, r2
   26234:	2280      	movs	r2, #128	; 0x80
   26236:	2116      	movs	r1, #22
   26238:	2600      	movs	r6, #0
   2623a:	2500      	movs	r5, #0
   2623c:	0064      	lsls	r4, r4, #1
   2623e:	0392      	lsls	r2, r2, #14
   26240:	18a8      	adds	r0, r5, r2
   26242:	4298      	cmp	r0, r3
   26244:	dc02      	bgt.n	2624c <__ieee754_sqrt+0x60>
   26246:	1885      	adds	r5, r0, r2
   26248:	1a1b      	subs	r3, r3, r0
   2624a:	18b6      	adds	r6, r6, r2
   2624c:	0fe0      	lsrs	r0, r4, #31
   2624e:	005b      	lsls	r3, r3, #1
   26250:	3901      	subs	r1, #1
   26252:	181b      	adds	r3, r3, r0
   26254:	0064      	lsls	r4, r4, #1
   26256:	0852      	lsrs	r2, r2, #1
   26258:	2900      	cmp	r1, #0
   2625a:	d1f1      	bne.n	26240 <__ieee754_sqrt+0x54>
   2625c:	2200      	movs	r2, #0
   2625e:	4692      	mov	sl, r2
   26260:	4690      	mov	r8, r2
   26262:	2280      	movs	r2, #128	; 0x80
   26264:	2020      	movs	r0, #32
   26266:	0612      	lsls	r2, r2, #24
   26268:	e009      	b.n	2627e <__ieee754_sqrt+0x92>
   2626a:	42ab      	cmp	r3, r5
   2626c:	d038      	beq.n	262e0 <__ieee754_sqrt+0xf4>
   2626e:	0fe1      	lsrs	r1, r4, #31
   26270:	18c9      	adds	r1, r1, r3
   26272:	3801      	subs	r0, #1
   26274:	18cb      	adds	r3, r1, r3
   26276:	0064      	lsls	r4, r4, #1
   26278:	0852      	lsrs	r2, r2, #1
   2627a:	2800      	cmp	r0, #0
   2627c:	d018      	beq.n	262b0 <__ieee754_sqrt+0xc4>
   2627e:	4641      	mov	r1, r8
   26280:	1851      	adds	r1, r2, r1
   26282:	42ab      	cmp	r3, r5
   26284:	ddf1      	ble.n	2626a <__ieee754_sqrt+0x7e>
   26286:	188f      	adds	r7, r1, r2
   26288:	46b8      	mov	r8, r7
   2628a:	46a9      	mov	r9, r5
   2628c:	2900      	cmp	r1, #0
   2628e:	db30      	blt.n	262f2 <__ieee754_sqrt+0x106>
   26290:	1b5b      	subs	r3, r3, r5
   26292:	428c      	cmp	r4, r1
   26294:	41ad      	sbcs	r5, r5
   26296:	426d      	negs	r5, r5
   26298:	1b5b      	subs	r3, r3, r5
   2629a:	1a64      	subs	r4, r4, r1
   2629c:	0fe1      	lsrs	r1, r4, #31
   2629e:	18c9      	adds	r1, r1, r3
   262a0:	3801      	subs	r0, #1
   262a2:	4492      	add	sl, r2
   262a4:	464d      	mov	r5, r9
   262a6:	18cb      	adds	r3, r1, r3
   262a8:	0064      	lsls	r4, r4, #1
   262aa:	0852      	lsrs	r2, r2, #1
   262ac:	2800      	cmp	r0, #0
   262ae:	d1e6      	bne.n	2627e <__ieee754_sqrt+0x92>
   262b0:	4323      	orrs	r3, r4
   262b2:	d128      	bne.n	26306 <__ieee754_sqrt+0x11a>
   262b4:	4653      	mov	r3, sl
   262b6:	085b      	lsrs	r3, r3, #1
   262b8:	493b      	ldr	r1, [pc, #236]	; (263a8 <__ieee754_sqrt+0x1bc>)
   262ba:	1072      	asrs	r2, r6, #1
   262bc:	4688      	mov	r8, r1
   262be:	4442      	add	r2, r8
   262c0:	07f1      	lsls	r1, r6, #31
   262c2:	d502      	bpl.n	262ca <__ieee754_sqrt+0xde>
   262c4:	2180      	movs	r1, #128	; 0x80
   262c6:	0609      	lsls	r1, r1, #24
   262c8:	430b      	orrs	r3, r1
   262ca:	4661      	mov	r1, ip
   262cc:	001e      	movs	r6, r3
   262ce:	050f      	lsls	r7, r1, #20
   262d0:	18bd      	adds	r5, r7, r2
   262d2:	0030      	movs	r0, r6
   262d4:	0029      	movs	r1, r5
   262d6:	bc1c      	pop	{r2, r3, r4}
   262d8:	4690      	mov	r8, r2
   262da:	4699      	mov	r9, r3
   262dc:	46a2      	mov	sl, r4
   262de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   262e0:	42a1      	cmp	r1, r4
   262e2:	d8c4      	bhi.n	2626e <__ieee754_sqrt+0x82>
   262e4:	188f      	adds	r7, r1, r2
   262e6:	46b8      	mov	r8, r7
   262e8:	2900      	cmp	r1, #0
   262ea:	db42      	blt.n	26372 <__ieee754_sqrt+0x186>
   262ec:	4699      	mov	r9, r3
   262ee:	2300      	movs	r3, #0
   262f0:	e7d3      	b.n	2629a <__ieee754_sqrt+0xae>
   262f2:	2f00      	cmp	r7, #0
   262f4:	db2f      	blt.n	26356 <__ieee754_sqrt+0x16a>
   262f6:	1c6f      	adds	r7, r5, #1
   262f8:	46b9      	mov	r9, r7
   262fa:	e7c9      	b.n	26290 <__ieee754_sqrt+0xa4>
   262fc:	0fe1      	lsrs	r1, r4, #31
   262fe:	0052      	lsls	r2, r2, #1
   26300:	188a      	adds	r2, r1, r2
   26302:	0064      	lsls	r4, r4, #1
   26304:	e791      	b.n	2622a <__ieee754_sqrt+0x3e>
   26306:	4653      	mov	r3, sl
   26308:	3301      	adds	r3, #1
   2630a:	d035      	beq.n	26378 <__ieee754_sqrt+0x18c>
   2630c:	4653      	mov	r3, sl
   2630e:	3301      	adds	r3, #1
   26310:	085b      	lsrs	r3, r3, #1
   26312:	e7d1      	b.n	262b8 <__ieee754_sqrt+0xcc>
   26314:	006b      	lsls	r3, r5, #1
   26316:	085b      	lsrs	r3, r3, #1
   26318:	4303      	orrs	r3, r0
   2631a:	d0da      	beq.n	262d2 <__ieee754_sqrt+0xe6>
   2631c:	2700      	movs	r7, #0
   2631e:	2d00      	cmp	r5, #0
   26320:	d132      	bne.n	26388 <__ieee754_sqrt+0x19c>
   26322:	0ae2      	lsrs	r2, r4, #11
   26324:	3f15      	subs	r7, #21
   26326:	0564      	lsls	r4, r4, #21
   26328:	2a00      	cmp	r2, #0
   2632a:	d0fa      	beq.n	26322 <__ieee754_sqrt+0x136>
   2632c:	2380      	movs	r3, #128	; 0x80
   2632e:	035b      	lsls	r3, r3, #13
   26330:	421a      	tst	r2, r3
   26332:	d124      	bne.n	2637e <__ieee754_sqrt+0x192>
   26334:	2080      	movs	r0, #128	; 0x80
   26336:	2300      	movs	r3, #0
   26338:	0340      	lsls	r0, r0, #13
   2633a:	e000      	b.n	2633e <__ieee754_sqrt+0x152>
   2633c:	000b      	movs	r3, r1
   2633e:	0052      	lsls	r2, r2, #1
   26340:	1c59      	adds	r1, r3, #1
   26342:	4202      	tst	r2, r0
   26344:	d0fa      	beq.n	2633c <__ieee754_sqrt+0x150>
   26346:	2020      	movs	r0, #32
   26348:	1a40      	subs	r0, r0, r1
   2634a:	1aff      	subs	r7, r7, r3
   2634c:	0023      	movs	r3, r4
   2634e:	40c3      	lsrs	r3, r0
   26350:	408c      	lsls	r4, r1
   26352:	431a      	orrs	r2, r3
   26354:	e75f      	b.n	26216 <__ieee754_sqrt+0x2a>
   26356:	46a9      	mov	r9, r5
   26358:	e79a      	b.n	26290 <__ieee754_sqrt+0xa4>
   2635a:	002b      	movs	r3, r5
   2635c:	0002      	movs	r2, r0
   2635e:	0029      	movs	r1, r5
   26360:	f001 fe6a 	bl	28038 <__aeabi_dmul>
   26364:	0032      	movs	r2, r6
   26366:	002b      	movs	r3, r5
   26368:	f000 ff22 	bl	271b0 <__aeabi_dadd>
   2636c:	0006      	movs	r6, r0
   2636e:	000d      	movs	r5, r1
   26370:	e7af      	b.n	262d2 <__ieee754_sqrt+0xe6>
   26372:	2f00      	cmp	r7, #0
   26374:	dabf      	bge.n	262f6 <__ieee754_sqrt+0x10a>
   26376:	e7b9      	b.n	262ec <__ieee754_sqrt+0x100>
   26378:	3601      	adds	r6, #1
   2637a:	2300      	movs	r3, #0
   2637c:	e79c      	b.n	262b8 <__ieee754_sqrt+0xcc>
   2637e:	2301      	movs	r3, #1
   26380:	2100      	movs	r1, #0
   26382:	2020      	movs	r0, #32
   26384:	425b      	negs	r3, r3
   26386:	e7e0      	b.n	2634a <__ieee754_sqrt+0x15e>
   26388:	002b      	movs	r3, r5
   2638a:	0002      	movs	r2, r0
   2638c:	0029      	movs	r1, r5
   2638e:	f002 f8d3 	bl	28538 <__aeabi_dsub>
   26392:	0002      	movs	r2, r0
   26394:	000b      	movs	r3, r1
   26396:	f001 fa1b 	bl	277d0 <__aeabi_ddiv>
   2639a:	0006      	movs	r6, r0
   2639c:	000d      	movs	r5, r1
   2639e:	e798      	b.n	262d2 <__ieee754_sqrt+0xe6>
   263a0:	7ff00000 	.word	0x7ff00000
   263a4:	fffffc01 	.word	0xfffffc01
   263a8:	3fe00000 	.word	0x3fe00000

000263ac <fabs>:
   263ac:	0049      	lsls	r1, r1, #1
   263ae:	084b      	lsrs	r3, r1, #1
   263b0:	0019      	movs	r1, r3
   263b2:	4770      	bx	lr

000263b4 <finite>:
   263b4:	4b03      	ldr	r3, [pc, #12]	; (263c4 <finite+0x10>)
   263b6:	0048      	lsls	r0, r1, #1
   263b8:	469c      	mov	ip, r3
   263ba:	0840      	lsrs	r0, r0, #1
   263bc:	4460      	add	r0, ip
   263be:	0fc0      	lsrs	r0, r0, #31
   263c0:	4770      	bx	lr
   263c2:	46c0      	nop			; (mov r8, r8)
   263c4:	80100000 	.word	0x80100000

000263c8 <matherr>:
   263c8:	2000      	movs	r0, #0
   263ca:	4770      	bx	lr

000263cc <nan>:
   263cc:	2000      	movs	r0, #0
   263ce:	4901      	ldr	r1, [pc, #4]	; (263d4 <nan+0x8>)
   263d0:	4770      	bx	lr
   263d2:	46c0      	nop			; (mov r8, r8)
   263d4:	7ff80000 	.word	0x7ff80000

000263d8 <rint>:
   263d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   263da:	46c6      	mov	lr, r8
   263dc:	b500      	push	{lr}
   263de:	0fcb      	lsrs	r3, r1, #31
   263e0:	4698      	mov	r8, r3
   263e2:	4c4a      	ldr	r4, [pc, #296]	; (2650c <rint+0x134>)
   263e4:	004b      	lsls	r3, r1, #1
   263e6:	0d5b      	lsrs	r3, r3, #21
   263e8:	191e      	adds	r6, r3, r4
   263ea:	b082      	sub	sp, #8
   263ec:	0007      	movs	r7, r0
   263ee:	000a      	movs	r2, r1
   263f0:	2e13      	cmp	r6, #19
   263f2:	dc35      	bgt.n	26460 <rint+0x88>
   263f4:	2e00      	cmp	r6, #0
   263f6:	db57      	blt.n	264a8 <rint+0xd0>
   263f8:	4b45      	ldr	r3, [pc, #276]	; (26510 <rint+0x138>)
   263fa:	0004      	movs	r4, r0
   263fc:	4133      	asrs	r3, r6
   263fe:	001f      	movs	r7, r3
   26400:	400f      	ands	r7, r1
   26402:	4307      	orrs	r7, r0
   26404:	000d      	movs	r5, r1
   26406:	2f00      	cmp	r7, #0
   26408:	d024      	beq.n	26454 <rint+0x7c>
   2640a:	085b      	lsrs	r3, r3, #1
   2640c:	001c      	movs	r4, r3
   2640e:	400c      	ands	r4, r1
   26410:	4320      	orrs	r0, r4
   26412:	2700      	movs	r7, #0
   26414:	2800      	cmp	r0, #0
   26416:	d007      	beq.n	26428 <rint+0x50>
   26418:	2e13      	cmp	r6, #19
   2641a:	d100      	bne.n	2641e <rint+0x46>
   2641c:	e073      	b.n	26506 <rint+0x12e>
   2641e:	2280      	movs	r2, #128	; 0x80
   26420:	02d2      	lsls	r2, r2, #11
   26422:	4132      	asrs	r2, r6
   26424:	4399      	bics	r1, r3
   26426:	430a      	orrs	r2, r1
   26428:	4643      	mov	r3, r8
   2642a:	00de      	lsls	r6, r3, #3
   2642c:	4b39      	ldr	r3, [pc, #228]	; (26514 <rint+0x13c>)
   2642e:	0011      	movs	r1, r2
   26430:	199e      	adds	r6, r3, r6
   26432:	6834      	ldr	r4, [r6, #0]
   26434:	6875      	ldr	r5, [r6, #4]
   26436:	0038      	movs	r0, r7
   26438:	0022      	movs	r2, r4
   2643a:	002b      	movs	r3, r5
   2643c:	f000 feb8 	bl	271b0 <__aeabi_dadd>
   26440:	9000      	str	r0, [sp, #0]
   26442:	9101      	str	r1, [sp, #4]
   26444:	9800      	ldr	r0, [sp, #0]
   26446:	9901      	ldr	r1, [sp, #4]
   26448:	0022      	movs	r2, r4
   2644a:	002b      	movs	r3, r5
   2644c:	f002 f874 	bl	28538 <__aeabi_dsub>
   26450:	0004      	movs	r4, r0
   26452:	000d      	movs	r5, r1
   26454:	0020      	movs	r0, r4
   26456:	0029      	movs	r1, r5
   26458:	b002      	add	sp, #8
   2645a:	bc04      	pop	{r2}
   2645c:	4690      	mov	r8, r2
   2645e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26460:	2e33      	cmp	r6, #51	; 0x33
   26462:	dd0c      	ble.n	2647e <rint+0xa6>
   26464:	2380      	movs	r3, #128	; 0x80
   26466:	0004      	movs	r4, r0
   26468:	00db      	lsls	r3, r3, #3
   2646a:	000d      	movs	r5, r1
   2646c:	429e      	cmp	r6, r3
   2646e:	d1f1      	bne.n	26454 <rint+0x7c>
   26470:	0002      	movs	r2, r0
   26472:	000b      	movs	r3, r1
   26474:	f000 fe9c 	bl	271b0 <__aeabi_dadd>
   26478:	0004      	movs	r4, r0
   2647a:	000d      	movs	r5, r1
   2647c:	e7ea      	b.n	26454 <rint+0x7c>
   2647e:	4c26      	ldr	r4, [pc, #152]	; (26518 <rint+0x140>)
   26480:	000d      	movs	r5, r1
   26482:	46a4      	mov	ip, r4
   26484:	2401      	movs	r4, #1
   26486:	4463      	add	r3, ip
   26488:	4264      	negs	r4, r4
   2648a:	40dc      	lsrs	r4, r3
   2648c:	46a4      	mov	ip, r4
   2648e:	4661      	mov	r1, ip
   26490:	0004      	movs	r4, r0
   26492:	4201      	tst	r1, r0
   26494:	d0de      	beq.n	26454 <rint+0x7c>
   26496:	0849      	lsrs	r1, r1, #1
   26498:	4201      	tst	r1, r0
   2649a:	d0c5      	beq.n	26428 <rint+0x50>
   2649c:	2780      	movs	r7, #128	; 0x80
   2649e:	05ff      	lsls	r7, r7, #23
   264a0:	411f      	asrs	r7, r3
   264a2:	4388      	bics	r0, r1
   264a4:	4307      	orrs	r7, r0
   264a6:	e7bf      	b.n	26428 <rint+0x50>
   264a8:	004b      	lsls	r3, r1, #1
   264aa:	085b      	lsrs	r3, r3, #1
   264ac:	4303      	orrs	r3, r0
   264ae:	0004      	movs	r4, r0
   264b0:	000d      	movs	r5, r1
   264b2:	2b00      	cmp	r3, #0
   264b4:	d0ce      	beq.n	26454 <rint+0x7c>
   264b6:	030b      	lsls	r3, r1, #12
   264b8:	0b1b      	lsrs	r3, r3, #12
   264ba:	4303      	orrs	r3, r0
   264bc:	001a      	movs	r2, r3
   264be:	425b      	negs	r3, r3
   264c0:	4313      	orrs	r3, r2
   264c2:	2280      	movs	r2, #128	; 0x80
   264c4:	0b1b      	lsrs	r3, r3, #12
   264c6:	0312      	lsls	r2, r2, #12
   264c8:	4013      	ands	r3, r2
   264ca:	0c4a      	lsrs	r2, r1, #17
   264cc:	0452      	lsls	r2, r2, #17
   264ce:	4313      	orrs	r3, r2
   264d0:	0019      	movs	r1, r3
   264d2:	4643      	mov	r3, r8
   264d4:	00da      	lsls	r2, r3, #3
   264d6:	4b0f      	ldr	r3, [pc, #60]	; (26514 <rint+0x13c>)
   264d8:	189b      	adds	r3, r3, r2
   264da:	681c      	ldr	r4, [r3, #0]
   264dc:	685d      	ldr	r5, [r3, #4]
   264de:	0022      	movs	r2, r4
   264e0:	002b      	movs	r3, r5
   264e2:	f000 fe65 	bl	271b0 <__aeabi_dadd>
   264e6:	9000      	str	r0, [sp, #0]
   264e8:	9101      	str	r1, [sp, #4]
   264ea:	9800      	ldr	r0, [sp, #0]
   264ec:	9901      	ldr	r1, [sp, #4]
   264ee:	0022      	movs	r2, r4
   264f0:	002b      	movs	r3, r5
   264f2:	f002 f821 	bl	28538 <__aeabi_dsub>
   264f6:	4642      	mov	r2, r8
   264f8:	004b      	lsls	r3, r1, #1
   264fa:	085b      	lsrs	r3, r3, #1
   264fc:	07d6      	lsls	r6, r2, #31
   264fe:	4333      	orrs	r3, r6
   26500:	0004      	movs	r4, r0
   26502:	001d      	movs	r5, r3
   26504:	e7a6      	b.n	26454 <rint+0x7c>
   26506:	2780      	movs	r7, #128	; 0x80
   26508:	063f      	lsls	r7, r7, #24
   2650a:	e788      	b.n	2641e <rint+0x46>
   2650c:	fffffc01 	.word	0xfffffc01
   26510:	000fffff 	.word	0x000fffff
   26514:	0002ade8 	.word	0x0002ade8
   26518:	fffffbed 	.word	0xfffffbed

0002651c <scalbn>:
   2651c:	004b      	lsls	r3, r1, #1
   2651e:	b570      	push	{r4, r5, r6, lr}
   26520:	0d5b      	lsrs	r3, r3, #21
   26522:	0014      	movs	r4, r2
   26524:	000a      	movs	r2, r1
   26526:	2b00      	cmp	r3, #0
   26528:	d11a      	bne.n	26560 <scalbn+0x44>
   2652a:	004b      	lsls	r3, r1, #1
   2652c:	085b      	lsrs	r3, r3, #1
   2652e:	4303      	orrs	r3, r0
   26530:	d015      	beq.n	2655e <scalbn+0x42>
   26532:	2200      	movs	r2, #0
   26534:	4b22      	ldr	r3, [pc, #136]	; (265c0 <scalbn+0xa4>)
   26536:	f001 fd7f 	bl	28038 <__aeabi_dmul>
   2653a:	4b22      	ldr	r3, [pc, #136]	; (265c4 <scalbn+0xa8>)
   2653c:	000a      	movs	r2, r1
   2653e:	429c      	cmp	r4, r3
   26540:	db22      	blt.n	26588 <scalbn+0x6c>
   26542:	004b      	lsls	r3, r1, #1
   26544:	0d5b      	lsrs	r3, r3, #21
   26546:	3b36      	subs	r3, #54	; 0x36
   26548:	4d1f      	ldr	r5, [pc, #124]	; (265c8 <scalbn+0xac>)
   2654a:	18e3      	adds	r3, r4, r3
   2654c:	42ab      	cmp	r3, r5
   2654e:	dc20      	bgt.n	26592 <scalbn+0x76>
   26550:	2b00      	cmp	r3, #0
   26552:	dd0d      	ble.n	26570 <scalbn+0x54>
   26554:	4c1d      	ldr	r4, [pc, #116]	; (265cc <scalbn+0xb0>)
   26556:	051b      	lsls	r3, r3, #20
   26558:	4022      	ands	r2, r4
   2655a:	431a      	orrs	r2, r3
   2655c:	0011      	movs	r1, r2
   2655e:	bd70      	pop	{r4, r5, r6, pc}
   26560:	4d1b      	ldr	r5, [pc, #108]	; (265d0 <scalbn+0xb4>)
   26562:	42ab      	cmp	r3, r5
   26564:	d1f0      	bne.n	26548 <scalbn+0x2c>
   26566:	0002      	movs	r2, r0
   26568:	000b      	movs	r3, r1
   2656a:	f000 fe21 	bl	271b0 <__aeabi_dadd>
   2656e:	e7f6      	b.n	2655e <scalbn+0x42>
   26570:	001d      	movs	r5, r3
   26572:	3535      	adds	r5, #53	; 0x35
   26574:	da18      	bge.n	265a8 <scalbn+0x8c>
   26576:	4b17      	ldr	r3, [pc, #92]	; (265d4 <scalbn+0xb8>)
   26578:	0002      	movs	r2, r0
   2657a:	429c      	cmp	r4, r3
   2657c:	dc0a      	bgt.n	26594 <scalbn+0x78>
   2657e:	000b      	movs	r3, r1
   26580:	4815      	ldr	r0, [pc, #84]	; (265d8 <scalbn+0xbc>)
   26582:	4916      	ldr	r1, [pc, #88]	; (265dc <scalbn+0xc0>)
   26584:	f000 f832 	bl	265ec <copysign>
   26588:	4a13      	ldr	r2, [pc, #76]	; (265d8 <scalbn+0xbc>)
   2658a:	4b14      	ldr	r3, [pc, #80]	; (265dc <scalbn+0xc0>)
   2658c:	f001 fd54 	bl	28038 <__aeabi_dmul>
   26590:	e7e5      	b.n	2655e <scalbn+0x42>
   26592:	0002      	movs	r2, r0
   26594:	000b      	movs	r3, r1
   26596:	4812      	ldr	r0, [pc, #72]	; (265e0 <scalbn+0xc4>)
   26598:	4912      	ldr	r1, [pc, #72]	; (265e4 <scalbn+0xc8>)
   2659a:	f000 f827 	bl	265ec <copysign>
   2659e:	4a10      	ldr	r2, [pc, #64]	; (265e0 <scalbn+0xc4>)
   265a0:	4b10      	ldr	r3, [pc, #64]	; (265e4 <scalbn+0xc8>)
   265a2:	f001 fd49 	bl	28038 <__aeabi_dmul>
   265a6:	e7da      	b.n	2655e <scalbn+0x42>
   265a8:	4c08      	ldr	r4, [pc, #32]	; (265cc <scalbn+0xb0>)
   265aa:	3336      	adds	r3, #54	; 0x36
   265ac:	4022      	ands	r2, r4
   265ae:	051b      	lsls	r3, r3, #20
   265b0:	4313      	orrs	r3, r2
   265b2:	0019      	movs	r1, r3
   265b4:	2200      	movs	r2, #0
   265b6:	4b0c      	ldr	r3, [pc, #48]	; (265e8 <scalbn+0xcc>)
   265b8:	f001 fd3e 	bl	28038 <__aeabi_dmul>
   265bc:	e7cf      	b.n	2655e <scalbn+0x42>
   265be:	46c0      	nop			; (mov r8, r8)
   265c0:	43500000 	.word	0x43500000
   265c4:	ffff3cb0 	.word	0xffff3cb0
   265c8:	000007fe 	.word	0x000007fe
   265cc:	800fffff 	.word	0x800fffff
   265d0:	000007ff 	.word	0x000007ff
   265d4:	0000c350 	.word	0x0000c350
   265d8:	c2f8f359 	.word	0xc2f8f359
   265dc:	01a56e1f 	.word	0x01a56e1f
   265e0:	8800759c 	.word	0x8800759c
   265e4:	7e37e43c 	.word	0x7e37e43c
   265e8:	3c900000 	.word	0x3c900000

000265ec <copysign>:
   265ec:	b530      	push	{r4, r5, lr}
   265ee:	004a      	lsls	r2, r1, #1
   265f0:	0fdb      	lsrs	r3, r3, #31
   265f2:	07db      	lsls	r3, r3, #31
   265f4:	0852      	lsrs	r2, r2, #1
   265f6:	431a      	orrs	r2, r3
   265f8:	0011      	movs	r1, r2
   265fa:	bd30      	pop	{r4, r5, pc}

000265fc <__udivsi3>:
   265fc:	2200      	movs	r2, #0
   265fe:	0843      	lsrs	r3, r0, #1
   26600:	428b      	cmp	r3, r1
   26602:	d374      	bcc.n	266ee <__udivsi3+0xf2>
   26604:	0903      	lsrs	r3, r0, #4
   26606:	428b      	cmp	r3, r1
   26608:	d35f      	bcc.n	266ca <__udivsi3+0xce>
   2660a:	0a03      	lsrs	r3, r0, #8
   2660c:	428b      	cmp	r3, r1
   2660e:	d344      	bcc.n	2669a <__udivsi3+0x9e>
   26610:	0b03      	lsrs	r3, r0, #12
   26612:	428b      	cmp	r3, r1
   26614:	d328      	bcc.n	26668 <__udivsi3+0x6c>
   26616:	0c03      	lsrs	r3, r0, #16
   26618:	428b      	cmp	r3, r1
   2661a:	d30d      	bcc.n	26638 <__udivsi3+0x3c>
   2661c:	22ff      	movs	r2, #255	; 0xff
   2661e:	0209      	lsls	r1, r1, #8
   26620:	ba12      	rev	r2, r2
   26622:	0c03      	lsrs	r3, r0, #16
   26624:	428b      	cmp	r3, r1
   26626:	d302      	bcc.n	2662e <__udivsi3+0x32>
   26628:	1212      	asrs	r2, r2, #8
   2662a:	0209      	lsls	r1, r1, #8
   2662c:	d065      	beq.n	266fa <__udivsi3+0xfe>
   2662e:	0b03      	lsrs	r3, r0, #12
   26630:	428b      	cmp	r3, r1
   26632:	d319      	bcc.n	26668 <__udivsi3+0x6c>
   26634:	e000      	b.n	26638 <__udivsi3+0x3c>
   26636:	0a09      	lsrs	r1, r1, #8
   26638:	0bc3      	lsrs	r3, r0, #15
   2663a:	428b      	cmp	r3, r1
   2663c:	d301      	bcc.n	26642 <__udivsi3+0x46>
   2663e:	03cb      	lsls	r3, r1, #15
   26640:	1ac0      	subs	r0, r0, r3
   26642:	4152      	adcs	r2, r2
   26644:	0b83      	lsrs	r3, r0, #14
   26646:	428b      	cmp	r3, r1
   26648:	d301      	bcc.n	2664e <__udivsi3+0x52>
   2664a:	038b      	lsls	r3, r1, #14
   2664c:	1ac0      	subs	r0, r0, r3
   2664e:	4152      	adcs	r2, r2
   26650:	0b43      	lsrs	r3, r0, #13
   26652:	428b      	cmp	r3, r1
   26654:	d301      	bcc.n	2665a <__udivsi3+0x5e>
   26656:	034b      	lsls	r3, r1, #13
   26658:	1ac0      	subs	r0, r0, r3
   2665a:	4152      	adcs	r2, r2
   2665c:	0b03      	lsrs	r3, r0, #12
   2665e:	428b      	cmp	r3, r1
   26660:	d301      	bcc.n	26666 <__udivsi3+0x6a>
   26662:	030b      	lsls	r3, r1, #12
   26664:	1ac0      	subs	r0, r0, r3
   26666:	4152      	adcs	r2, r2
   26668:	0ac3      	lsrs	r3, r0, #11
   2666a:	428b      	cmp	r3, r1
   2666c:	d301      	bcc.n	26672 <__udivsi3+0x76>
   2666e:	02cb      	lsls	r3, r1, #11
   26670:	1ac0      	subs	r0, r0, r3
   26672:	4152      	adcs	r2, r2
   26674:	0a83      	lsrs	r3, r0, #10
   26676:	428b      	cmp	r3, r1
   26678:	d301      	bcc.n	2667e <__udivsi3+0x82>
   2667a:	028b      	lsls	r3, r1, #10
   2667c:	1ac0      	subs	r0, r0, r3
   2667e:	4152      	adcs	r2, r2
   26680:	0a43      	lsrs	r3, r0, #9
   26682:	428b      	cmp	r3, r1
   26684:	d301      	bcc.n	2668a <__udivsi3+0x8e>
   26686:	024b      	lsls	r3, r1, #9
   26688:	1ac0      	subs	r0, r0, r3
   2668a:	4152      	adcs	r2, r2
   2668c:	0a03      	lsrs	r3, r0, #8
   2668e:	428b      	cmp	r3, r1
   26690:	d301      	bcc.n	26696 <__udivsi3+0x9a>
   26692:	020b      	lsls	r3, r1, #8
   26694:	1ac0      	subs	r0, r0, r3
   26696:	4152      	adcs	r2, r2
   26698:	d2cd      	bcs.n	26636 <__udivsi3+0x3a>
   2669a:	09c3      	lsrs	r3, r0, #7
   2669c:	428b      	cmp	r3, r1
   2669e:	d301      	bcc.n	266a4 <__udivsi3+0xa8>
   266a0:	01cb      	lsls	r3, r1, #7
   266a2:	1ac0      	subs	r0, r0, r3
   266a4:	4152      	adcs	r2, r2
   266a6:	0983      	lsrs	r3, r0, #6
   266a8:	428b      	cmp	r3, r1
   266aa:	d301      	bcc.n	266b0 <__udivsi3+0xb4>
   266ac:	018b      	lsls	r3, r1, #6
   266ae:	1ac0      	subs	r0, r0, r3
   266b0:	4152      	adcs	r2, r2
   266b2:	0943      	lsrs	r3, r0, #5
   266b4:	428b      	cmp	r3, r1
   266b6:	d301      	bcc.n	266bc <__udivsi3+0xc0>
   266b8:	014b      	lsls	r3, r1, #5
   266ba:	1ac0      	subs	r0, r0, r3
   266bc:	4152      	adcs	r2, r2
   266be:	0903      	lsrs	r3, r0, #4
   266c0:	428b      	cmp	r3, r1
   266c2:	d301      	bcc.n	266c8 <__udivsi3+0xcc>
   266c4:	010b      	lsls	r3, r1, #4
   266c6:	1ac0      	subs	r0, r0, r3
   266c8:	4152      	adcs	r2, r2
   266ca:	08c3      	lsrs	r3, r0, #3
   266cc:	428b      	cmp	r3, r1
   266ce:	d301      	bcc.n	266d4 <__udivsi3+0xd8>
   266d0:	00cb      	lsls	r3, r1, #3
   266d2:	1ac0      	subs	r0, r0, r3
   266d4:	4152      	adcs	r2, r2
   266d6:	0883      	lsrs	r3, r0, #2
   266d8:	428b      	cmp	r3, r1
   266da:	d301      	bcc.n	266e0 <__udivsi3+0xe4>
   266dc:	008b      	lsls	r3, r1, #2
   266de:	1ac0      	subs	r0, r0, r3
   266e0:	4152      	adcs	r2, r2
   266e2:	0843      	lsrs	r3, r0, #1
   266e4:	428b      	cmp	r3, r1
   266e6:	d301      	bcc.n	266ec <__udivsi3+0xf0>
   266e8:	004b      	lsls	r3, r1, #1
   266ea:	1ac0      	subs	r0, r0, r3
   266ec:	4152      	adcs	r2, r2
   266ee:	1a41      	subs	r1, r0, r1
   266f0:	d200      	bcs.n	266f4 <__udivsi3+0xf8>
   266f2:	4601      	mov	r1, r0
   266f4:	4152      	adcs	r2, r2
   266f6:	4610      	mov	r0, r2
   266f8:	4770      	bx	lr
   266fa:	e7ff      	b.n	266fc <__udivsi3+0x100>
   266fc:	b501      	push	{r0, lr}
   266fe:	2000      	movs	r0, #0
   26700:	f000 f8f0 	bl	268e4 <__aeabi_idiv0>
   26704:	bd02      	pop	{r1, pc}
   26706:	46c0      	nop			; (mov r8, r8)

00026708 <__aeabi_uidivmod>:
   26708:	2900      	cmp	r1, #0
   2670a:	d0f7      	beq.n	266fc <__udivsi3+0x100>
   2670c:	e776      	b.n	265fc <__udivsi3>
   2670e:	4770      	bx	lr

00026710 <__divsi3>:
   26710:	4603      	mov	r3, r0
   26712:	430b      	orrs	r3, r1
   26714:	d47f      	bmi.n	26816 <__divsi3+0x106>
   26716:	2200      	movs	r2, #0
   26718:	0843      	lsrs	r3, r0, #1
   2671a:	428b      	cmp	r3, r1
   2671c:	d374      	bcc.n	26808 <__divsi3+0xf8>
   2671e:	0903      	lsrs	r3, r0, #4
   26720:	428b      	cmp	r3, r1
   26722:	d35f      	bcc.n	267e4 <__divsi3+0xd4>
   26724:	0a03      	lsrs	r3, r0, #8
   26726:	428b      	cmp	r3, r1
   26728:	d344      	bcc.n	267b4 <__divsi3+0xa4>
   2672a:	0b03      	lsrs	r3, r0, #12
   2672c:	428b      	cmp	r3, r1
   2672e:	d328      	bcc.n	26782 <__divsi3+0x72>
   26730:	0c03      	lsrs	r3, r0, #16
   26732:	428b      	cmp	r3, r1
   26734:	d30d      	bcc.n	26752 <__divsi3+0x42>
   26736:	22ff      	movs	r2, #255	; 0xff
   26738:	0209      	lsls	r1, r1, #8
   2673a:	ba12      	rev	r2, r2
   2673c:	0c03      	lsrs	r3, r0, #16
   2673e:	428b      	cmp	r3, r1
   26740:	d302      	bcc.n	26748 <__divsi3+0x38>
   26742:	1212      	asrs	r2, r2, #8
   26744:	0209      	lsls	r1, r1, #8
   26746:	d065      	beq.n	26814 <__divsi3+0x104>
   26748:	0b03      	lsrs	r3, r0, #12
   2674a:	428b      	cmp	r3, r1
   2674c:	d319      	bcc.n	26782 <__divsi3+0x72>
   2674e:	e000      	b.n	26752 <__divsi3+0x42>
   26750:	0a09      	lsrs	r1, r1, #8
   26752:	0bc3      	lsrs	r3, r0, #15
   26754:	428b      	cmp	r3, r1
   26756:	d301      	bcc.n	2675c <__divsi3+0x4c>
   26758:	03cb      	lsls	r3, r1, #15
   2675a:	1ac0      	subs	r0, r0, r3
   2675c:	4152      	adcs	r2, r2
   2675e:	0b83      	lsrs	r3, r0, #14
   26760:	428b      	cmp	r3, r1
   26762:	d301      	bcc.n	26768 <__divsi3+0x58>
   26764:	038b      	lsls	r3, r1, #14
   26766:	1ac0      	subs	r0, r0, r3
   26768:	4152      	adcs	r2, r2
   2676a:	0b43      	lsrs	r3, r0, #13
   2676c:	428b      	cmp	r3, r1
   2676e:	d301      	bcc.n	26774 <__divsi3+0x64>
   26770:	034b      	lsls	r3, r1, #13
   26772:	1ac0      	subs	r0, r0, r3
   26774:	4152      	adcs	r2, r2
   26776:	0b03      	lsrs	r3, r0, #12
   26778:	428b      	cmp	r3, r1
   2677a:	d301      	bcc.n	26780 <__divsi3+0x70>
   2677c:	030b      	lsls	r3, r1, #12
   2677e:	1ac0      	subs	r0, r0, r3
   26780:	4152      	adcs	r2, r2
   26782:	0ac3      	lsrs	r3, r0, #11
   26784:	428b      	cmp	r3, r1
   26786:	d301      	bcc.n	2678c <__divsi3+0x7c>
   26788:	02cb      	lsls	r3, r1, #11
   2678a:	1ac0      	subs	r0, r0, r3
   2678c:	4152      	adcs	r2, r2
   2678e:	0a83      	lsrs	r3, r0, #10
   26790:	428b      	cmp	r3, r1
   26792:	d301      	bcc.n	26798 <__divsi3+0x88>
   26794:	028b      	lsls	r3, r1, #10
   26796:	1ac0      	subs	r0, r0, r3
   26798:	4152      	adcs	r2, r2
   2679a:	0a43      	lsrs	r3, r0, #9
   2679c:	428b      	cmp	r3, r1
   2679e:	d301      	bcc.n	267a4 <__divsi3+0x94>
   267a0:	024b      	lsls	r3, r1, #9
   267a2:	1ac0      	subs	r0, r0, r3
   267a4:	4152      	adcs	r2, r2
   267a6:	0a03      	lsrs	r3, r0, #8
   267a8:	428b      	cmp	r3, r1
   267aa:	d301      	bcc.n	267b0 <__divsi3+0xa0>
   267ac:	020b      	lsls	r3, r1, #8
   267ae:	1ac0      	subs	r0, r0, r3
   267b0:	4152      	adcs	r2, r2
   267b2:	d2cd      	bcs.n	26750 <__divsi3+0x40>
   267b4:	09c3      	lsrs	r3, r0, #7
   267b6:	428b      	cmp	r3, r1
   267b8:	d301      	bcc.n	267be <__divsi3+0xae>
   267ba:	01cb      	lsls	r3, r1, #7
   267bc:	1ac0      	subs	r0, r0, r3
   267be:	4152      	adcs	r2, r2
   267c0:	0983      	lsrs	r3, r0, #6
   267c2:	428b      	cmp	r3, r1
   267c4:	d301      	bcc.n	267ca <__divsi3+0xba>
   267c6:	018b      	lsls	r3, r1, #6
   267c8:	1ac0      	subs	r0, r0, r3
   267ca:	4152      	adcs	r2, r2
   267cc:	0943      	lsrs	r3, r0, #5
   267ce:	428b      	cmp	r3, r1
   267d0:	d301      	bcc.n	267d6 <__divsi3+0xc6>
   267d2:	014b      	lsls	r3, r1, #5
   267d4:	1ac0      	subs	r0, r0, r3
   267d6:	4152      	adcs	r2, r2
   267d8:	0903      	lsrs	r3, r0, #4
   267da:	428b      	cmp	r3, r1
   267dc:	d301      	bcc.n	267e2 <__divsi3+0xd2>
   267de:	010b      	lsls	r3, r1, #4
   267e0:	1ac0      	subs	r0, r0, r3
   267e2:	4152      	adcs	r2, r2
   267e4:	08c3      	lsrs	r3, r0, #3
   267e6:	428b      	cmp	r3, r1
   267e8:	d301      	bcc.n	267ee <__divsi3+0xde>
   267ea:	00cb      	lsls	r3, r1, #3
   267ec:	1ac0      	subs	r0, r0, r3
   267ee:	4152      	adcs	r2, r2
   267f0:	0883      	lsrs	r3, r0, #2
   267f2:	428b      	cmp	r3, r1
   267f4:	d301      	bcc.n	267fa <__divsi3+0xea>
   267f6:	008b      	lsls	r3, r1, #2
   267f8:	1ac0      	subs	r0, r0, r3
   267fa:	4152      	adcs	r2, r2
   267fc:	0843      	lsrs	r3, r0, #1
   267fe:	428b      	cmp	r3, r1
   26800:	d301      	bcc.n	26806 <__divsi3+0xf6>
   26802:	004b      	lsls	r3, r1, #1
   26804:	1ac0      	subs	r0, r0, r3
   26806:	4152      	adcs	r2, r2
   26808:	1a41      	subs	r1, r0, r1
   2680a:	d200      	bcs.n	2680e <__divsi3+0xfe>
   2680c:	4601      	mov	r1, r0
   2680e:	4152      	adcs	r2, r2
   26810:	4610      	mov	r0, r2
   26812:	4770      	bx	lr
   26814:	e05d      	b.n	268d2 <__divsi3+0x1c2>
   26816:	0fca      	lsrs	r2, r1, #31
   26818:	d000      	beq.n	2681c <__divsi3+0x10c>
   2681a:	4249      	negs	r1, r1
   2681c:	1003      	asrs	r3, r0, #32
   2681e:	d300      	bcc.n	26822 <__divsi3+0x112>
   26820:	4240      	negs	r0, r0
   26822:	4053      	eors	r3, r2
   26824:	2200      	movs	r2, #0
   26826:	469c      	mov	ip, r3
   26828:	0903      	lsrs	r3, r0, #4
   2682a:	428b      	cmp	r3, r1
   2682c:	d32d      	bcc.n	2688a <__divsi3+0x17a>
   2682e:	0a03      	lsrs	r3, r0, #8
   26830:	428b      	cmp	r3, r1
   26832:	d312      	bcc.n	2685a <__divsi3+0x14a>
   26834:	22fc      	movs	r2, #252	; 0xfc
   26836:	0189      	lsls	r1, r1, #6
   26838:	ba12      	rev	r2, r2
   2683a:	0a03      	lsrs	r3, r0, #8
   2683c:	428b      	cmp	r3, r1
   2683e:	d30c      	bcc.n	2685a <__divsi3+0x14a>
   26840:	0189      	lsls	r1, r1, #6
   26842:	1192      	asrs	r2, r2, #6
   26844:	428b      	cmp	r3, r1
   26846:	d308      	bcc.n	2685a <__divsi3+0x14a>
   26848:	0189      	lsls	r1, r1, #6
   2684a:	1192      	asrs	r2, r2, #6
   2684c:	428b      	cmp	r3, r1
   2684e:	d304      	bcc.n	2685a <__divsi3+0x14a>
   26850:	0189      	lsls	r1, r1, #6
   26852:	d03a      	beq.n	268ca <__divsi3+0x1ba>
   26854:	1192      	asrs	r2, r2, #6
   26856:	e000      	b.n	2685a <__divsi3+0x14a>
   26858:	0989      	lsrs	r1, r1, #6
   2685a:	09c3      	lsrs	r3, r0, #7
   2685c:	428b      	cmp	r3, r1
   2685e:	d301      	bcc.n	26864 <__divsi3+0x154>
   26860:	01cb      	lsls	r3, r1, #7
   26862:	1ac0      	subs	r0, r0, r3
   26864:	4152      	adcs	r2, r2
   26866:	0983      	lsrs	r3, r0, #6
   26868:	428b      	cmp	r3, r1
   2686a:	d301      	bcc.n	26870 <__divsi3+0x160>
   2686c:	018b      	lsls	r3, r1, #6
   2686e:	1ac0      	subs	r0, r0, r3
   26870:	4152      	adcs	r2, r2
   26872:	0943      	lsrs	r3, r0, #5
   26874:	428b      	cmp	r3, r1
   26876:	d301      	bcc.n	2687c <__divsi3+0x16c>
   26878:	014b      	lsls	r3, r1, #5
   2687a:	1ac0      	subs	r0, r0, r3
   2687c:	4152      	adcs	r2, r2
   2687e:	0903      	lsrs	r3, r0, #4
   26880:	428b      	cmp	r3, r1
   26882:	d301      	bcc.n	26888 <__divsi3+0x178>
   26884:	010b      	lsls	r3, r1, #4
   26886:	1ac0      	subs	r0, r0, r3
   26888:	4152      	adcs	r2, r2
   2688a:	08c3      	lsrs	r3, r0, #3
   2688c:	428b      	cmp	r3, r1
   2688e:	d301      	bcc.n	26894 <__divsi3+0x184>
   26890:	00cb      	lsls	r3, r1, #3
   26892:	1ac0      	subs	r0, r0, r3
   26894:	4152      	adcs	r2, r2
   26896:	0883      	lsrs	r3, r0, #2
   26898:	428b      	cmp	r3, r1
   2689a:	d301      	bcc.n	268a0 <__divsi3+0x190>
   2689c:	008b      	lsls	r3, r1, #2
   2689e:	1ac0      	subs	r0, r0, r3
   268a0:	4152      	adcs	r2, r2
   268a2:	d2d9      	bcs.n	26858 <__divsi3+0x148>
   268a4:	0843      	lsrs	r3, r0, #1
   268a6:	428b      	cmp	r3, r1
   268a8:	d301      	bcc.n	268ae <__divsi3+0x19e>
   268aa:	004b      	lsls	r3, r1, #1
   268ac:	1ac0      	subs	r0, r0, r3
   268ae:	4152      	adcs	r2, r2
   268b0:	1a41      	subs	r1, r0, r1
   268b2:	d200      	bcs.n	268b6 <__divsi3+0x1a6>
   268b4:	4601      	mov	r1, r0
   268b6:	4663      	mov	r3, ip
   268b8:	4152      	adcs	r2, r2
   268ba:	105b      	asrs	r3, r3, #1
   268bc:	4610      	mov	r0, r2
   268be:	d301      	bcc.n	268c4 <__divsi3+0x1b4>
   268c0:	4240      	negs	r0, r0
   268c2:	2b00      	cmp	r3, #0
   268c4:	d500      	bpl.n	268c8 <__divsi3+0x1b8>
   268c6:	4249      	negs	r1, r1
   268c8:	4770      	bx	lr
   268ca:	4663      	mov	r3, ip
   268cc:	105b      	asrs	r3, r3, #1
   268ce:	d300      	bcc.n	268d2 <__divsi3+0x1c2>
   268d0:	4240      	negs	r0, r0
   268d2:	b501      	push	{r0, lr}
   268d4:	2000      	movs	r0, #0
   268d6:	f000 f805 	bl	268e4 <__aeabi_idiv0>
   268da:	bd02      	pop	{r1, pc}

000268dc <__aeabi_idivmod>:
   268dc:	2900      	cmp	r1, #0
   268de:	d0f8      	beq.n	268d2 <__divsi3+0x1c2>
   268e0:	e716      	b.n	26710 <__divsi3>
   268e2:	4770      	bx	lr

000268e4 <__aeabi_idiv0>:
   268e4:	4770      	bx	lr
   268e6:	46c0      	nop			; (mov r8, r8)

000268e8 <__aeabi_cdrcmple>:
   268e8:	4684      	mov	ip, r0
   268ea:	1c10      	adds	r0, r2, #0
   268ec:	4662      	mov	r2, ip
   268ee:	468c      	mov	ip, r1
   268f0:	1c19      	adds	r1, r3, #0
   268f2:	4663      	mov	r3, ip
   268f4:	e000      	b.n	268f8 <__aeabi_cdcmpeq>
   268f6:	46c0      	nop			; (mov r8, r8)

000268f8 <__aeabi_cdcmpeq>:
   268f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   268fa:	f001 fb3b 	bl	27f74 <__ledf2>
   268fe:	2800      	cmp	r0, #0
   26900:	d401      	bmi.n	26906 <__aeabi_cdcmpeq+0xe>
   26902:	2100      	movs	r1, #0
   26904:	42c8      	cmn	r0, r1
   26906:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00026908 <__aeabi_dcmpeq>:
   26908:	b510      	push	{r4, lr}
   2690a:	f001 fa95 	bl	27e38 <__eqdf2>
   2690e:	4240      	negs	r0, r0
   26910:	3001      	adds	r0, #1
   26912:	bd10      	pop	{r4, pc}

00026914 <__aeabi_dcmplt>:
   26914:	b510      	push	{r4, lr}
   26916:	f001 fb2d 	bl	27f74 <__ledf2>
   2691a:	2800      	cmp	r0, #0
   2691c:	db01      	blt.n	26922 <__aeabi_dcmplt+0xe>
   2691e:	2000      	movs	r0, #0
   26920:	bd10      	pop	{r4, pc}
   26922:	2001      	movs	r0, #1
   26924:	bd10      	pop	{r4, pc}
   26926:	46c0      	nop			; (mov r8, r8)

00026928 <__aeabi_dcmple>:
   26928:	b510      	push	{r4, lr}
   2692a:	f001 fb23 	bl	27f74 <__ledf2>
   2692e:	2800      	cmp	r0, #0
   26930:	dd01      	ble.n	26936 <__aeabi_dcmple+0xe>
   26932:	2000      	movs	r0, #0
   26934:	bd10      	pop	{r4, pc}
   26936:	2001      	movs	r0, #1
   26938:	bd10      	pop	{r4, pc}
   2693a:	46c0      	nop			; (mov r8, r8)

0002693c <__aeabi_dcmpgt>:
   2693c:	b510      	push	{r4, lr}
   2693e:	f001 fab5 	bl	27eac <__gedf2>
   26942:	2800      	cmp	r0, #0
   26944:	dc01      	bgt.n	2694a <__aeabi_dcmpgt+0xe>
   26946:	2000      	movs	r0, #0
   26948:	bd10      	pop	{r4, pc}
   2694a:	2001      	movs	r0, #1
   2694c:	bd10      	pop	{r4, pc}
   2694e:	46c0      	nop			; (mov r8, r8)

00026950 <__aeabi_dcmpge>:
   26950:	b510      	push	{r4, lr}
   26952:	f001 faab 	bl	27eac <__gedf2>
   26956:	2800      	cmp	r0, #0
   26958:	da01      	bge.n	2695e <__aeabi_dcmpge+0xe>
   2695a:	2000      	movs	r0, #0
   2695c:	bd10      	pop	{r4, pc}
   2695e:	2001      	movs	r0, #1
   26960:	bd10      	pop	{r4, pc}
   26962:	46c0      	nop			; (mov r8, r8)

00026964 <__aeabi_uldivmod>:
   26964:	2b00      	cmp	r3, #0
   26966:	d111      	bne.n	2698c <__aeabi_uldivmod+0x28>
   26968:	2a00      	cmp	r2, #0
   2696a:	d10f      	bne.n	2698c <__aeabi_uldivmod+0x28>
   2696c:	2900      	cmp	r1, #0
   2696e:	d100      	bne.n	26972 <__aeabi_uldivmod+0xe>
   26970:	2800      	cmp	r0, #0
   26972:	d002      	beq.n	2697a <__aeabi_uldivmod+0x16>
   26974:	2100      	movs	r1, #0
   26976:	43c9      	mvns	r1, r1
   26978:	1c08      	adds	r0, r1, #0
   2697a:	b407      	push	{r0, r1, r2}
   2697c:	4802      	ldr	r0, [pc, #8]	; (26988 <__aeabi_uldivmod+0x24>)
   2697e:	a102      	add	r1, pc, #8	; (adr r1, 26988 <__aeabi_uldivmod+0x24>)
   26980:	1840      	adds	r0, r0, r1
   26982:	9002      	str	r0, [sp, #8]
   26984:	bd03      	pop	{r0, r1, pc}
   26986:	46c0      	nop			; (mov r8, r8)
   26988:	ffffff5d 	.word	0xffffff5d
   2698c:	b403      	push	{r0, r1}
   2698e:	4668      	mov	r0, sp
   26990:	b501      	push	{r0, lr}
   26992:	9802      	ldr	r0, [sp, #8]
   26994:	f000 f84e 	bl	26a34 <__udivmoddi4>
   26998:	9b01      	ldr	r3, [sp, #4]
   2699a:	469e      	mov	lr, r3
   2699c:	b002      	add	sp, #8
   2699e:	bc0c      	pop	{r2, r3}
   269a0:	4770      	bx	lr
   269a2:	46c0      	nop			; (mov r8, r8)

000269a4 <__aeabi_lmul>:
   269a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   269a6:	46ce      	mov	lr, r9
   269a8:	4647      	mov	r7, r8
   269aa:	0415      	lsls	r5, r2, #16
   269ac:	0c2d      	lsrs	r5, r5, #16
   269ae:	002e      	movs	r6, r5
   269b0:	b580      	push	{r7, lr}
   269b2:	0407      	lsls	r7, r0, #16
   269b4:	0c14      	lsrs	r4, r2, #16
   269b6:	0c3f      	lsrs	r7, r7, #16
   269b8:	4699      	mov	r9, r3
   269ba:	0c03      	lsrs	r3, r0, #16
   269bc:	437e      	muls	r6, r7
   269be:	435d      	muls	r5, r3
   269c0:	4367      	muls	r7, r4
   269c2:	4363      	muls	r3, r4
   269c4:	197f      	adds	r7, r7, r5
   269c6:	0c34      	lsrs	r4, r6, #16
   269c8:	19e4      	adds	r4, r4, r7
   269ca:	469c      	mov	ip, r3
   269cc:	42a5      	cmp	r5, r4
   269ce:	d903      	bls.n	269d8 <__aeabi_lmul+0x34>
   269d0:	2380      	movs	r3, #128	; 0x80
   269d2:	025b      	lsls	r3, r3, #9
   269d4:	4698      	mov	r8, r3
   269d6:	44c4      	add	ip, r8
   269d8:	464b      	mov	r3, r9
   269da:	4351      	muls	r1, r2
   269dc:	4343      	muls	r3, r0
   269de:	0436      	lsls	r6, r6, #16
   269e0:	0c36      	lsrs	r6, r6, #16
   269e2:	0c25      	lsrs	r5, r4, #16
   269e4:	0424      	lsls	r4, r4, #16
   269e6:	4465      	add	r5, ip
   269e8:	19a4      	adds	r4, r4, r6
   269ea:	1859      	adds	r1, r3, r1
   269ec:	1949      	adds	r1, r1, r5
   269ee:	0020      	movs	r0, r4
   269f0:	bc0c      	pop	{r2, r3}
   269f2:	4690      	mov	r8, r2
   269f4:	4699      	mov	r9, r3
   269f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000269f8 <__aeabi_d2uiz>:
   269f8:	b570      	push	{r4, r5, r6, lr}
   269fa:	2200      	movs	r2, #0
   269fc:	4b0c      	ldr	r3, [pc, #48]	; (26a30 <__aeabi_d2uiz+0x38>)
   269fe:	0004      	movs	r4, r0
   26a00:	000d      	movs	r5, r1
   26a02:	f7ff ffa5 	bl	26950 <__aeabi_dcmpge>
   26a06:	2800      	cmp	r0, #0
   26a08:	d104      	bne.n	26a14 <__aeabi_d2uiz+0x1c>
   26a0a:	0020      	movs	r0, r4
   26a0c:	0029      	movs	r1, r5
   26a0e:	f002 f8c9 	bl	28ba4 <__aeabi_d2iz>
   26a12:	bd70      	pop	{r4, r5, r6, pc}
   26a14:	4b06      	ldr	r3, [pc, #24]	; (26a30 <__aeabi_d2uiz+0x38>)
   26a16:	2200      	movs	r2, #0
   26a18:	0020      	movs	r0, r4
   26a1a:	0029      	movs	r1, r5
   26a1c:	f001 fd8c 	bl	28538 <__aeabi_dsub>
   26a20:	f002 f8c0 	bl	28ba4 <__aeabi_d2iz>
   26a24:	2380      	movs	r3, #128	; 0x80
   26a26:	061b      	lsls	r3, r3, #24
   26a28:	469c      	mov	ip, r3
   26a2a:	4460      	add	r0, ip
   26a2c:	e7f1      	b.n	26a12 <__aeabi_d2uiz+0x1a>
   26a2e:	46c0      	nop			; (mov r8, r8)
   26a30:	41e00000 	.word	0x41e00000

00026a34 <__udivmoddi4>:
   26a34:	b5f0      	push	{r4, r5, r6, r7, lr}
   26a36:	4657      	mov	r7, sl
   26a38:	464e      	mov	r6, r9
   26a3a:	4645      	mov	r5, r8
   26a3c:	46de      	mov	lr, fp
   26a3e:	b5e0      	push	{r5, r6, r7, lr}
   26a40:	0004      	movs	r4, r0
   26a42:	b083      	sub	sp, #12
   26a44:	000d      	movs	r5, r1
   26a46:	4692      	mov	sl, r2
   26a48:	4699      	mov	r9, r3
   26a4a:	428b      	cmp	r3, r1
   26a4c:	d82f      	bhi.n	26aae <__udivmoddi4+0x7a>
   26a4e:	d02c      	beq.n	26aaa <__udivmoddi4+0x76>
   26a50:	4649      	mov	r1, r9
   26a52:	4650      	mov	r0, sl
   26a54:	f002 f9c4 	bl	28de0 <__clzdi2>
   26a58:	0029      	movs	r1, r5
   26a5a:	0006      	movs	r6, r0
   26a5c:	0020      	movs	r0, r4
   26a5e:	f002 f9bf 	bl	28de0 <__clzdi2>
   26a62:	1a33      	subs	r3, r6, r0
   26a64:	4698      	mov	r8, r3
   26a66:	3b20      	subs	r3, #32
   26a68:	469b      	mov	fp, r3
   26a6a:	d500      	bpl.n	26a6e <__udivmoddi4+0x3a>
   26a6c:	e074      	b.n	26b58 <__udivmoddi4+0x124>
   26a6e:	4653      	mov	r3, sl
   26a70:	465a      	mov	r2, fp
   26a72:	4093      	lsls	r3, r2
   26a74:	001f      	movs	r7, r3
   26a76:	4653      	mov	r3, sl
   26a78:	4642      	mov	r2, r8
   26a7a:	4093      	lsls	r3, r2
   26a7c:	001e      	movs	r6, r3
   26a7e:	42af      	cmp	r7, r5
   26a80:	d829      	bhi.n	26ad6 <__udivmoddi4+0xa2>
   26a82:	d026      	beq.n	26ad2 <__udivmoddi4+0x9e>
   26a84:	465b      	mov	r3, fp
   26a86:	1ba4      	subs	r4, r4, r6
   26a88:	41bd      	sbcs	r5, r7
   26a8a:	2b00      	cmp	r3, #0
   26a8c:	da00      	bge.n	26a90 <__udivmoddi4+0x5c>
   26a8e:	e079      	b.n	26b84 <__udivmoddi4+0x150>
   26a90:	2200      	movs	r2, #0
   26a92:	2300      	movs	r3, #0
   26a94:	9200      	str	r2, [sp, #0]
   26a96:	9301      	str	r3, [sp, #4]
   26a98:	2301      	movs	r3, #1
   26a9a:	465a      	mov	r2, fp
   26a9c:	4093      	lsls	r3, r2
   26a9e:	9301      	str	r3, [sp, #4]
   26aa0:	2301      	movs	r3, #1
   26aa2:	4642      	mov	r2, r8
   26aa4:	4093      	lsls	r3, r2
   26aa6:	9300      	str	r3, [sp, #0]
   26aa8:	e019      	b.n	26ade <__udivmoddi4+0xaa>
   26aaa:	4282      	cmp	r2, r0
   26aac:	d9d0      	bls.n	26a50 <__udivmoddi4+0x1c>
   26aae:	2200      	movs	r2, #0
   26ab0:	2300      	movs	r3, #0
   26ab2:	9200      	str	r2, [sp, #0]
   26ab4:	9301      	str	r3, [sp, #4]
   26ab6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   26ab8:	2b00      	cmp	r3, #0
   26aba:	d001      	beq.n	26ac0 <__udivmoddi4+0x8c>
   26abc:	601c      	str	r4, [r3, #0]
   26abe:	605d      	str	r5, [r3, #4]
   26ac0:	9800      	ldr	r0, [sp, #0]
   26ac2:	9901      	ldr	r1, [sp, #4]
   26ac4:	b003      	add	sp, #12
   26ac6:	bc3c      	pop	{r2, r3, r4, r5}
   26ac8:	4690      	mov	r8, r2
   26aca:	4699      	mov	r9, r3
   26acc:	46a2      	mov	sl, r4
   26ace:	46ab      	mov	fp, r5
   26ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26ad2:	42a3      	cmp	r3, r4
   26ad4:	d9d6      	bls.n	26a84 <__udivmoddi4+0x50>
   26ad6:	2200      	movs	r2, #0
   26ad8:	2300      	movs	r3, #0
   26ada:	9200      	str	r2, [sp, #0]
   26adc:	9301      	str	r3, [sp, #4]
   26ade:	4643      	mov	r3, r8
   26ae0:	2b00      	cmp	r3, #0
   26ae2:	d0e8      	beq.n	26ab6 <__udivmoddi4+0x82>
   26ae4:	07fb      	lsls	r3, r7, #31
   26ae6:	0872      	lsrs	r2, r6, #1
   26ae8:	431a      	orrs	r2, r3
   26aea:	4646      	mov	r6, r8
   26aec:	087b      	lsrs	r3, r7, #1
   26aee:	e00e      	b.n	26b0e <__udivmoddi4+0xda>
   26af0:	42ab      	cmp	r3, r5
   26af2:	d101      	bne.n	26af8 <__udivmoddi4+0xc4>
   26af4:	42a2      	cmp	r2, r4
   26af6:	d80c      	bhi.n	26b12 <__udivmoddi4+0xde>
   26af8:	1aa4      	subs	r4, r4, r2
   26afa:	419d      	sbcs	r5, r3
   26afc:	2001      	movs	r0, #1
   26afe:	1924      	adds	r4, r4, r4
   26b00:	416d      	adcs	r5, r5
   26b02:	2100      	movs	r1, #0
   26b04:	3e01      	subs	r6, #1
   26b06:	1824      	adds	r4, r4, r0
   26b08:	414d      	adcs	r5, r1
   26b0a:	2e00      	cmp	r6, #0
   26b0c:	d006      	beq.n	26b1c <__udivmoddi4+0xe8>
   26b0e:	42ab      	cmp	r3, r5
   26b10:	d9ee      	bls.n	26af0 <__udivmoddi4+0xbc>
   26b12:	3e01      	subs	r6, #1
   26b14:	1924      	adds	r4, r4, r4
   26b16:	416d      	adcs	r5, r5
   26b18:	2e00      	cmp	r6, #0
   26b1a:	d1f8      	bne.n	26b0e <__udivmoddi4+0xda>
   26b1c:	465b      	mov	r3, fp
   26b1e:	9800      	ldr	r0, [sp, #0]
   26b20:	9901      	ldr	r1, [sp, #4]
   26b22:	1900      	adds	r0, r0, r4
   26b24:	4169      	adcs	r1, r5
   26b26:	2b00      	cmp	r3, #0
   26b28:	db22      	blt.n	26b70 <__udivmoddi4+0x13c>
   26b2a:	002b      	movs	r3, r5
   26b2c:	465a      	mov	r2, fp
   26b2e:	40d3      	lsrs	r3, r2
   26b30:	002a      	movs	r2, r5
   26b32:	4644      	mov	r4, r8
   26b34:	40e2      	lsrs	r2, r4
   26b36:	001c      	movs	r4, r3
   26b38:	465b      	mov	r3, fp
   26b3a:	0015      	movs	r5, r2
   26b3c:	2b00      	cmp	r3, #0
   26b3e:	db2c      	blt.n	26b9a <__udivmoddi4+0x166>
   26b40:	0026      	movs	r6, r4
   26b42:	409e      	lsls	r6, r3
   26b44:	0033      	movs	r3, r6
   26b46:	0026      	movs	r6, r4
   26b48:	4647      	mov	r7, r8
   26b4a:	40be      	lsls	r6, r7
   26b4c:	0032      	movs	r2, r6
   26b4e:	1a80      	subs	r0, r0, r2
   26b50:	4199      	sbcs	r1, r3
   26b52:	9000      	str	r0, [sp, #0]
   26b54:	9101      	str	r1, [sp, #4]
   26b56:	e7ae      	b.n	26ab6 <__udivmoddi4+0x82>
   26b58:	4642      	mov	r2, r8
   26b5a:	2320      	movs	r3, #32
   26b5c:	1a9b      	subs	r3, r3, r2
   26b5e:	4652      	mov	r2, sl
   26b60:	40da      	lsrs	r2, r3
   26b62:	4641      	mov	r1, r8
   26b64:	0013      	movs	r3, r2
   26b66:	464a      	mov	r2, r9
   26b68:	408a      	lsls	r2, r1
   26b6a:	0017      	movs	r7, r2
   26b6c:	431f      	orrs	r7, r3
   26b6e:	e782      	b.n	26a76 <__udivmoddi4+0x42>
   26b70:	4642      	mov	r2, r8
   26b72:	2320      	movs	r3, #32
   26b74:	1a9b      	subs	r3, r3, r2
   26b76:	002a      	movs	r2, r5
   26b78:	4646      	mov	r6, r8
   26b7a:	409a      	lsls	r2, r3
   26b7c:	0023      	movs	r3, r4
   26b7e:	40f3      	lsrs	r3, r6
   26b80:	4313      	orrs	r3, r2
   26b82:	e7d5      	b.n	26b30 <__udivmoddi4+0xfc>
   26b84:	4642      	mov	r2, r8
   26b86:	2320      	movs	r3, #32
   26b88:	2100      	movs	r1, #0
   26b8a:	1a9b      	subs	r3, r3, r2
   26b8c:	2200      	movs	r2, #0
   26b8e:	9100      	str	r1, [sp, #0]
   26b90:	9201      	str	r2, [sp, #4]
   26b92:	2201      	movs	r2, #1
   26b94:	40da      	lsrs	r2, r3
   26b96:	9201      	str	r2, [sp, #4]
   26b98:	e782      	b.n	26aa0 <__udivmoddi4+0x6c>
   26b9a:	4642      	mov	r2, r8
   26b9c:	2320      	movs	r3, #32
   26b9e:	0026      	movs	r6, r4
   26ba0:	1a9b      	subs	r3, r3, r2
   26ba2:	40de      	lsrs	r6, r3
   26ba4:	002f      	movs	r7, r5
   26ba6:	46b4      	mov	ip, r6
   26ba8:	4097      	lsls	r7, r2
   26baa:	4666      	mov	r6, ip
   26bac:	003b      	movs	r3, r7
   26bae:	4333      	orrs	r3, r6
   26bb0:	e7c9      	b.n	26b46 <__udivmoddi4+0x112>
   26bb2:	46c0      	nop			; (mov r8, r8)

00026bb4 <__aeabi_fdiv>:
   26bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   26bb6:	4657      	mov	r7, sl
   26bb8:	464e      	mov	r6, r9
   26bba:	46de      	mov	lr, fp
   26bbc:	4645      	mov	r5, r8
   26bbe:	b5e0      	push	{r5, r6, r7, lr}
   26bc0:	0244      	lsls	r4, r0, #9
   26bc2:	0043      	lsls	r3, r0, #1
   26bc4:	0fc6      	lsrs	r6, r0, #31
   26bc6:	b083      	sub	sp, #12
   26bc8:	1c0f      	adds	r7, r1, #0
   26bca:	0a64      	lsrs	r4, r4, #9
   26bcc:	0e1b      	lsrs	r3, r3, #24
   26bce:	46b2      	mov	sl, r6
   26bd0:	d053      	beq.n	26c7a <__aeabi_fdiv+0xc6>
   26bd2:	2bff      	cmp	r3, #255	; 0xff
   26bd4:	d027      	beq.n	26c26 <__aeabi_fdiv+0x72>
   26bd6:	2280      	movs	r2, #128	; 0x80
   26bd8:	00e4      	lsls	r4, r4, #3
   26bda:	04d2      	lsls	r2, r2, #19
   26bdc:	4314      	orrs	r4, r2
   26bde:	227f      	movs	r2, #127	; 0x7f
   26be0:	4252      	negs	r2, r2
   26be2:	4690      	mov	r8, r2
   26be4:	4498      	add	r8, r3
   26be6:	2300      	movs	r3, #0
   26be8:	4699      	mov	r9, r3
   26bea:	469b      	mov	fp, r3
   26bec:	027d      	lsls	r5, r7, #9
   26bee:	0078      	lsls	r0, r7, #1
   26bf0:	0ffb      	lsrs	r3, r7, #31
   26bf2:	0a6d      	lsrs	r5, r5, #9
   26bf4:	0e00      	lsrs	r0, r0, #24
   26bf6:	9300      	str	r3, [sp, #0]
   26bf8:	d024      	beq.n	26c44 <__aeabi_fdiv+0x90>
   26bfa:	28ff      	cmp	r0, #255	; 0xff
   26bfc:	d046      	beq.n	26c8c <__aeabi_fdiv+0xd8>
   26bfe:	2380      	movs	r3, #128	; 0x80
   26c00:	2100      	movs	r1, #0
   26c02:	00ed      	lsls	r5, r5, #3
   26c04:	04db      	lsls	r3, r3, #19
   26c06:	431d      	orrs	r5, r3
   26c08:	387f      	subs	r0, #127	; 0x7f
   26c0a:	4647      	mov	r7, r8
   26c0c:	1a38      	subs	r0, r7, r0
   26c0e:	464f      	mov	r7, r9
   26c10:	430f      	orrs	r7, r1
   26c12:	00bf      	lsls	r7, r7, #2
   26c14:	46b9      	mov	r9, r7
   26c16:	0033      	movs	r3, r6
   26c18:	9a00      	ldr	r2, [sp, #0]
   26c1a:	4f87      	ldr	r7, [pc, #540]	; (26e38 <__aeabi_fdiv+0x284>)
   26c1c:	4053      	eors	r3, r2
   26c1e:	464a      	mov	r2, r9
   26c20:	58ba      	ldr	r2, [r7, r2]
   26c22:	9301      	str	r3, [sp, #4]
   26c24:	4697      	mov	pc, r2
   26c26:	2c00      	cmp	r4, #0
   26c28:	d14e      	bne.n	26cc8 <__aeabi_fdiv+0x114>
   26c2a:	2308      	movs	r3, #8
   26c2c:	4699      	mov	r9, r3
   26c2e:	33f7      	adds	r3, #247	; 0xf7
   26c30:	4698      	mov	r8, r3
   26c32:	3bfd      	subs	r3, #253	; 0xfd
   26c34:	469b      	mov	fp, r3
   26c36:	027d      	lsls	r5, r7, #9
   26c38:	0078      	lsls	r0, r7, #1
   26c3a:	0ffb      	lsrs	r3, r7, #31
   26c3c:	0a6d      	lsrs	r5, r5, #9
   26c3e:	0e00      	lsrs	r0, r0, #24
   26c40:	9300      	str	r3, [sp, #0]
   26c42:	d1da      	bne.n	26bfa <__aeabi_fdiv+0x46>
   26c44:	2d00      	cmp	r5, #0
   26c46:	d126      	bne.n	26c96 <__aeabi_fdiv+0xe2>
   26c48:	2000      	movs	r0, #0
   26c4a:	2101      	movs	r1, #1
   26c4c:	0033      	movs	r3, r6
   26c4e:	9a00      	ldr	r2, [sp, #0]
   26c50:	4f7a      	ldr	r7, [pc, #488]	; (26e3c <__aeabi_fdiv+0x288>)
   26c52:	4053      	eors	r3, r2
   26c54:	4642      	mov	r2, r8
   26c56:	1a10      	subs	r0, r2, r0
   26c58:	464a      	mov	r2, r9
   26c5a:	430a      	orrs	r2, r1
   26c5c:	0092      	lsls	r2, r2, #2
   26c5e:	58ba      	ldr	r2, [r7, r2]
   26c60:	001d      	movs	r5, r3
   26c62:	4697      	mov	pc, r2
   26c64:	9b00      	ldr	r3, [sp, #0]
   26c66:	002c      	movs	r4, r5
   26c68:	469a      	mov	sl, r3
   26c6a:	468b      	mov	fp, r1
   26c6c:	465b      	mov	r3, fp
   26c6e:	2b02      	cmp	r3, #2
   26c70:	d131      	bne.n	26cd6 <__aeabi_fdiv+0x122>
   26c72:	4653      	mov	r3, sl
   26c74:	21ff      	movs	r1, #255	; 0xff
   26c76:	2400      	movs	r4, #0
   26c78:	e038      	b.n	26cec <__aeabi_fdiv+0x138>
   26c7a:	2c00      	cmp	r4, #0
   26c7c:	d117      	bne.n	26cae <__aeabi_fdiv+0xfa>
   26c7e:	2304      	movs	r3, #4
   26c80:	4699      	mov	r9, r3
   26c82:	2300      	movs	r3, #0
   26c84:	4698      	mov	r8, r3
   26c86:	3301      	adds	r3, #1
   26c88:	469b      	mov	fp, r3
   26c8a:	e7af      	b.n	26bec <__aeabi_fdiv+0x38>
   26c8c:	20ff      	movs	r0, #255	; 0xff
   26c8e:	2d00      	cmp	r5, #0
   26c90:	d10b      	bne.n	26caa <__aeabi_fdiv+0xf6>
   26c92:	2102      	movs	r1, #2
   26c94:	e7da      	b.n	26c4c <__aeabi_fdiv+0x98>
   26c96:	0028      	movs	r0, r5
   26c98:	f002 f884 	bl	28da4 <__clzsi2>
   26c9c:	1f43      	subs	r3, r0, #5
   26c9e:	409d      	lsls	r5, r3
   26ca0:	2376      	movs	r3, #118	; 0x76
   26ca2:	425b      	negs	r3, r3
   26ca4:	1a18      	subs	r0, r3, r0
   26ca6:	2100      	movs	r1, #0
   26ca8:	e7af      	b.n	26c0a <__aeabi_fdiv+0x56>
   26caa:	2103      	movs	r1, #3
   26cac:	e7ad      	b.n	26c0a <__aeabi_fdiv+0x56>
   26cae:	0020      	movs	r0, r4
   26cb0:	f002 f878 	bl	28da4 <__clzsi2>
   26cb4:	1f43      	subs	r3, r0, #5
   26cb6:	409c      	lsls	r4, r3
   26cb8:	2376      	movs	r3, #118	; 0x76
   26cba:	425b      	negs	r3, r3
   26cbc:	1a1b      	subs	r3, r3, r0
   26cbe:	4698      	mov	r8, r3
   26cc0:	2300      	movs	r3, #0
   26cc2:	4699      	mov	r9, r3
   26cc4:	469b      	mov	fp, r3
   26cc6:	e791      	b.n	26bec <__aeabi_fdiv+0x38>
   26cc8:	230c      	movs	r3, #12
   26cca:	4699      	mov	r9, r3
   26ccc:	33f3      	adds	r3, #243	; 0xf3
   26cce:	4698      	mov	r8, r3
   26cd0:	3bfc      	subs	r3, #252	; 0xfc
   26cd2:	469b      	mov	fp, r3
   26cd4:	e78a      	b.n	26bec <__aeabi_fdiv+0x38>
   26cd6:	2b03      	cmp	r3, #3
   26cd8:	d100      	bne.n	26cdc <__aeabi_fdiv+0x128>
   26cda:	e0a5      	b.n	26e28 <__aeabi_fdiv+0x274>
   26cdc:	4655      	mov	r5, sl
   26cde:	2b01      	cmp	r3, #1
   26ce0:	d000      	beq.n	26ce4 <__aeabi_fdiv+0x130>
   26ce2:	e081      	b.n	26de8 <__aeabi_fdiv+0x234>
   26ce4:	2301      	movs	r3, #1
   26ce6:	2100      	movs	r1, #0
   26ce8:	2400      	movs	r4, #0
   26cea:	402b      	ands	r3, r5
   26cec:	0264      	lsls	r4, r4, #9
   26cee:	05c9      	lsls	r1, r1, #23
   26cf0:	0a60      	lsrs	r0, r4, #9
   26cf2:	07db      	lsls	r3, r3, #31
   26cf4:	4308      	orrs	r0, r1
   26cf6:	4318      	orrs	r0, r3
   26cf8:	b003      	add	sp, #12
   26cfa:	bc3c      	pop	{r2, r3, r4, r5}
   26cfc:	4690      	mov	r8, r2
   26cfe:	4699      	mov	r9, r3
   26d00:	46a2      	mov	sl, r4
   26d02:	46ab      	mov	fp, r5
   26d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26d06:	2480      	movs	r4, #128	; 0x80
   26d08:	2300      	movs	r3, #0
   26d0a:	03e4      	lsls	r4, r4, #15
   26d0c:	21ff      	movs	r1, #255	; 0xff
   26d0e:	e7ed      	b.n	26cec <__aeabi_fdiv+0x138>
   26d10:	21ff      	movs	r1, #255	; 0xff
   26d12:	2400      	movs	r4, #0
   26d14:	e7ea      	b.n	26cec <__aeabi_fdiv+0x138>
   26d16:	2301      	movs	r3, #1
   26d18:	1a59      	subs	r1, r3, r1
   26d1a:	291b      	cmp	r1, #27
   26d1c:	dd66      	ble.n	26dec <__aeabi_fdiv+0x238>
   26d1e:	9a01      	ldr	r2, [sp, #4]
   26d20:	4013      	ands	r3, r2
   26d22:	2100      	movs	r1, #0
   26d24:	2400      	movs	r4, #0
   26d26:	e7e1      	b.n	26cec <__aeabi_fdiv+0x138>
   26d28:	2380      	movs	r3, #128	; 0x80
   26d2a:	03db      	lsls	r3, r3, #15
   26d2c:	421c      	tst	r4, r3
   26d2e:	d038      	beq.n	26da2 <__aeabi_fdiv+0x1ee>
   26d30:	421d      	tst	r5, r3
   26d32:	d051      	beq.n	26dd8 <__aeabi_fdiv+0x224>
   26d34:	431c      	orrs	r4, r3
   26d36:	0264      	lsls	r4, r4, #9
   26d38:	0a64      	lsrs	r4, r4, #9
   26d3a:	0033      	movs	r3, r6
   26d3c:	21ff      	movs	r1, #255	; 0xff
   26d3e:	e7d5      	b.n	26cec <__aeabi_fdiv+0x138>
   26d40:	0163      	lsls	r3, r4, #5
   26d42:	016c      	lsls	r4, r5, #5
   26d44:	42a3      	cmp	r3, r4
   26d46:	d23b      	bcs.n	26dc0 <__aeabi_fdiv+0x20c>
   26d48:	261b      	movs	r6, #27
   26d4a:	2100      	movs	r1, #0
   26d4c:	3801      	subs	r0, #1
   26d4e:	2501      	movs	r5, #1
   26d50:	001f      	movs	r7, r3
   26d52:	0049      	lsls	r1, r1, #1
   26d54:	005b      	lsls	r3, r3, #1
   26d56:	2f00      	cmp	r7, #0
   26d58:	db01      	blt.n	26d5e <__aeabi_fdiv+0x1aa>
   26d5a:	429c      	cmp	r4, r3
   26d5c:	d801      	bhi.n	26d62 <__aeabi_fdiv+0x1ae>
   26d5e:	1b1b      	subs	r3, r3, r4
   26d60:	4329      	orrs	r1, r5
   26d62:	3e01      	subs	r6, #1
   26d64:	2e00      	cmp	r6, #0
   26d66:	d1f3      	bne.n	26d50 <__aeabi_fdiv+0x19c>
   26d68:	001c      	movs	r4, r3
   26d6a:	1e63      	subs	r3, r4, #1
   26d6c:	419c      	sbcs	r4, r3
   26d6e:	430c      	orrs	r4, r1
   26d70:	0001      	movs	r1, r0
   26d72:	317f      	adds	r1, #127	; 0x7f
   26d74:	2900      	cmp	r1, #0
   26d76:	ddce      	ble.n	26d16 <__aeabi_fdiv+0x162>
   26d78:	0763      	lsls	r3, r4, #29
   26d7a:	d004      	beq.n	26d86 <__aeabi_fdiv+0x1d2>
   26d7c:	230f      	movs	r3, #15
   26d7e:	4023      	ands	r3, r4
   26d80:	2b04      	cmp	r3, #4
   26d82:	d000      	beq.n	26d86 <__aeabi_fdiv+0x1d2>
   26d84:	3404      	adds	r4, #4
   26d86:	0123      	lsls	r3, r4, #4
   26d88:	d503      	bpl.n	26d92 <__aeabi_fdiv+0x1de>
   26d8a:	0001      	movs	r1, r0
   26d8c:	4b2c      	ldr	r3, [pc, #176]	; (26e40 <__aeabi_fdiv+0x28c>)
   26d8e:	3180      	adds	r1, #128	; 0x80
   26d90:	401c      	ands	r4, r3
   26d92:	29fe      	cmp	r1, #254	; 0xfe
   26d94:	dd0d      	ble.n	26db2 <__aeabi_fdiv+0x1fe>
   26d96:	2301      	movs	r3, #1
   26d98:	9a01      	ldr	r2, [sp, #4]
   26d9a:	21ff      	movs	r1, #255	; 0xff
   26d9c:	4013      	ands	r3, r2
   26d9e:	2400      	movs	r4, #0
   26da0:	e7a4      	b.n	26cec <__aeabi_fdiv+0x138>
   26da2:	2380      	movs	r3, #128	; 0x80
   26da4:	03db      	lsls	r3, r3, #15
   26da6:	431c      	orrs	r4, r3
   26da8:	0264      	lsls	r4, r4, #9
   26daa:	0a64      	lsrs	r4, r4, #9
   26dac:	0033      	movs	r3, r6
   26dae:	21ff      	movs	r1, #255	; 0xff
   26db0:	e79c      	b.n	26cec <__aeabi_fdiv+0x138>
   26db2:	2301      	movs	r3, #1
   26db4:	9a01      	ldr	r2, [sp, #4]
   26db6:	01a4      	lsls	r4, r4, #6
   26db8:	0a64      	lsrs	r4, r4, #9
   26dba:	b2c9      	uxtb	r1, r1
   26dbc:	4013      	ands	r3, r2
   26dbe:	e795      	b.n	26cec <__aeabi_fdiv+0x138>
   26dc0:	1b1b      	subs	r3, r3, r4
   26dc2:	261a      	movs	r6, #26
   26dc4:	2101      	movs	r1, #1
   26dc6:	e7c2      	b.n	26d4e <__aeabi_fdiv+0x19a>
   26dc8:	9b00      	ldr	r3, [sp, #0]
   26dca:	468b      	mov	fp, r1
   26dcc:	469a      	mov	sl, r3
   26dce:	2400      	movs	r4, #0
   26dd0:	e74c      	b.n	26c6c <__aeabi_fdiv+0xb8>
   26dd2:	0263      	lsls	r3, r4, #9
   26dd4:	d5e5      	bpl.n	26da2 <__aeabi_fdiv+0x1ee>
   26dd6:	2500      	movs	r5, #0
   26dd8:	2480      	movs	r4, #128	; 0x80
   26dda:	03e4      	lsls	r4, r4, #15
   26ddc:	432c      	orrs	r4, r5
   26dde:	0264      	lsls	r4, r4, #9
   26de0:	0a64      	lsrs	r4, r4, #9
   26de2:	9b00      	ldr	r3, [sp, #0]
   26de4:	21ff      	movs	r1, #255	; 0xff
   26de6:	e781      	b.n	26cec <__aeabi_fdiv+0x138>
   26de8:	9501      	str	r5, [sp, #4]
   26dea:	e7c1      	b.n	26d70 <__aeabi_fdiv+0x1bc>
   26dec:	0023      	movs	r3, r4
   26dee:	2020      	movs	r0, #32
   26df0:	40cb      	lsrs	r3, r1
   26df2:	1a41      	subs	r1, r0, r1
   26df4:	408c      	lsls	r4, r1
   26df6:	1e61      	subs	r1, r4, #1
   26df8:	418c      	sbcs	r4, r1
   26dfa:	431c      	orrs	r4, r3
   26dfc:	0763      	lsls	r3, r4, #29
   26dfe:	d004      	beq.n	26e0a <__aeabi_fdiv+0x256>
   26e00:	230f      	movs	r3, #15
   26e02:	4023      	ands	r3, r4
   26e04:	2b04      	cmp	r3, #4
   26e06:	d000      	beq.n	26e0a <__aeabi_fdiv+0x256>
   26e08:	3404      	adds	r4, #4
   26e0a:	0163      	lsls	r3, r4, #5
   26e0c:	d505      	bpl.n	26e1a <__aeabi_fdiv+0x266>
   26e0e:	2301      	movs	r3, #1
   26e10:	9a01      	ldr	r2, [sp, #4]
   26e12:	2101      	movs	r1, #1
   26e14:	4013      	ands	r3, r2
   26e16:	2400      	movs	r4, #0
   26e18:	e768      	b.n	26cec <__aeabi_fdiv+0x138>
   26e1a:	2301      	movs	r3, #1
   26e1c:	9a01      	ldr	r2, [sp, #4]
   26e1e:	01a4      	lsls	r4, r4, #6
   26e20:	0a64      	lsrs	r4, r4, #9
   26e22:	4013      	ands	r3, r2
   26e24:	2100      	movs	r1, #0
   26e26:	e761      	b.n	26cec <__aeabi_fdiv+0x138>
   26e28:	2380      	movs	r3, #128	; 0x80
   26e2a:	03db      	lsls	r3, r3, #15
   26e2c:	431c      	orrs	r4, r3
   26e2e:	0264      	lsls	r4, r4, #9
   26e30:	0a64      	lsrs	r4, r4, #9
   26e32:	4653      	mov	r3, sl
   26e34:	21ff      	movs	r1, #255	; 0xff
   26e36:	e759      	b.n	26cec <__aeabi_fdiv+0x138>
   26e38:	0002adf8 	.word	0x0002adf8
   26e3c:	0002ae38 	.word	0x0002ae38
   26e40:	f7ffffff 	.word	0xf7ffffff

00026e44 <__aeabi_fmul>:
   26e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26e46:	4657      	mov	r7, sl
   26e48:	464e      	mov	r6, r9
   26e4a:	4645      	mov	r5, r8
   26e4c:	46de      	mov	lr, fp
   26e4e:	b5e0      	push	{r5, r6, r7, lr}
   26e50:	0247      	lsls	r7, r0, #9
   26e52:	0046      	lsls	r6, r0, #1
   26e54:	4688      	mov	r8, r1
   26e56:	0a7f      	lsrs	r7, r7, #9
   26e58:	0e36      	lsrs	r6, r6, #24
   26e5a:	0fc4      	lsrs	r4, r0, #31
   26e5c:	2e00      	cmp	r6, #0
   26e5e:	d047      	beq.n	26ef0 <__aeabi_fmul+0xac>
   26e60:	2eff      	cmp	r6, #255	; 0xff
   26e62:	d024      	beq.n	26eae <__aeabi_fmul+0x6a>
   26e64:	00fb      	lsls	r3, r7, #3
   26e66:	2780      	movs	r7, #128	; 0x80
   26e68:	04ff      	lsls	r7, r7, #19
   26e6a:	431f      	orrs	r7, r3
   26e6c:	2300      	movs	r3, #0
   26e6e:	4699      	mov	r9, r3
   26e70:	469a      	mov	sl, r3
   26e72:	3e7f      	subs	r6, #127	; 0x7f
   26e74:	4643      	mov	r3, r8
   26e76:	025d      	lsls	r5, r3, #9
   26e78:	0058      	lsls	r0, r3, #1
   26e7a:	0fdb      	lsrs	r3, r3, #31
   26e7c:	0a6d      	lsrs	r5, r5, #9
   26e7e:	0e00      	lsrs	r0, r0, #24
   26e80:	4698      	mov	r8, r3
   26e82:	d043      	beq.n	26f0c <__aeabi_fmul+0xc8>
   26e84:	28ff      	cmp	r0, #255	; 0xff
   26e86:	d03b      	beq.n	26f00 <__aeabi_fmul+0xbc>
   26e88:	00eb      	lsls	r3, r5, #3
   26e8a:	2580      	movs	r5, #128	; 0x80
   26e8c:	2200      	movs	r2, #0
   26e8e:	04ed      	lsls	r5, r5, #19
   26e90:	431d      	orrs	r5, r3
   26e92:	387f      	subs	r0, #127	; 0x7f
   26e94:	1836      	adds	r6, r6, r0
   26e96:	1c73      	adds	r3, r6, #1
   26e98:	4641      	mov	r1, r8
   26e9a:	469b      	mov	fp, r3
   26e9c:	464b      	mov	r3, r9
   26e9e:	4061      	eors	r1, r4
   26ea0:	4313      	orrs	r3, r2
   26ea2:	2b0f      	cmp	r3, #15
   26ea4:	d864      	bhi.n	26f70 <__aeabi_fmul+0x12c>
   26ea6:	4875      	ldr	r0, [pc, #468]	; (2707c <__aeabi_fmul+0x238>)
   26ea8:	009b      	lsls	r3, r3, #2
   26eaa:	58c3      	ldr	r3, [r0, r3]
   26eac:	469f      	mov	pc, r3
   26eae:	2f00      	cmp	r7, #0
   26eb0:	d142      	bne.n	26f38 <__aeabi_fmul+0xf4>
   26eb2:	2308      	movs	r3, #8
   26eb4:	4699      	mov	r9, r3
   26eb6:	3b06      	subs	r3, #6
   26eb8:	26ff      	movs	r6, #255	; 0xff
   26eba:	469a      	mov	sl, r3
   26ebc:	e7da      	b.n	26e74 <__aeabi_fmul+0x30>
   26ebe:	4641      	mov	r1, r8
   26ec0:	2a02      	cmp	r2, #2
   26ec2:	d028      	beq.n	26f16 <__aeabi_fmul+0xd2>
   26ec4:	2a03      	cmp	r2, #3
   26ec6:	d100      	bne.n	26eca <__aeabi_fmul+0x86>
   26ec8:	e0ce      	b.n	27068 <__aeabi_fmul+0x224>
   26eca:	2a01      	cmp	r2, #1
   26ecc:	d000      	beq.n	26ed0 <__aeabi_fmul+0x8c>
   26ece:	e0ac      	b.n	2702a <__aeabi_fmul+0x1e6>
   26ed0:	4011      	ands	r1, r2
   26ed2:	2000      	movs	r0, #0
   26ed4:	2200      	movs	r2, #0
   26ed6:	b2cc      	uxtb	r4, r1
   26ed8:	0240      	lsls	r0, r0, #9
   26eda:	05d2      	lsls	r2, r2, #23
   26edc:	0a40      	lsrs	r0, r0, #9
   26ede:	07e4      	lsls	r4, r4, #31
   26ee0:	4310      	orrs	r0, r2
   26ee2:	4320      	orrs	r0, r4
   26ee4:	bc3c      	pop	{r2, r3, r4, r5}
   26ee6:	4690      	mov	r8, r2
   26ee8:	4699      	mov	r9, r3
   26eea:	46a2      	mov	sl, r4
   26eec:	46ab      	mov	fp, r5
   26eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26ef0:	2f00      	cmp	r7, #0
   26ef2:	d115      	bne.n	26f20 <__aeabi_fmul+0xdc>
   26ef4:	2304      	movs	r3, #4
   26ef6:	4699      	mov	r9, r3
   26ef8:	3b03      	subs	r3, #3
   26efa:	2600      	movs	r6, #0
   26efc:	469a      	mov	sl, r3
   26efe:	e7b9      	b.n	26e74 <__aeabi_fmul+0x30>
   26f00:	20ff      	movs	r0, #255	; 0xff
   26f02:	2202      	movs	r2, #2
   26f04:	2d00      	cmp	r5, #0
   26f06:	d0c5      	beq.n	26e94 <__aeabi_fmul+0x50>
   26f08:	2203      	movs	r2, #3
   26f0a:	e7c3      	b.n	26e94 <__aeabi_fmul+0x50>
   26f0c:	2d00      	cmp	r5, #0
   26f0e:	d119      	bne.n	26f44 <__aeabi_fmul+0x100>
   26f10:	2000      	movs	r0, #0
   26f12:	2201      	movs	r2, #1
   26f14:	e7be      	b.n	26e94 <__aeabi_fmul+0x50>
   26f16:	2401      	movs	r4, #1
   26f18:	22ff      	movs	r2, #255	; 0xff
   26f1a:	400c      	ands	r4, r1
   26f1c:	2000      	movs	r0, #0
   26f1e:	e7db      	b.n	26ed8 <__aeabi_fmul+0x94>
   26f20:	0038      	movs	r0, r7
   26f22:	f001 ff3f 	bl	28da4 <__clzsi2>
   26f26:	2676      	movs	r6, #118	; 0x76
   26f28:	1f43      	subs	r3, r0, #5
   26f2a:	409f      	lsls	r7, r3
   26f2c:	2300      	movs	r3, #0
   26f2e:	4276      	negs	r6, r6
   26f30:	1a36      	subs	r6, r6, r0
   26f32:	4699      	mov	r9, r3
   26f34:	469a      	mov	sl, r3
   26f36:	e79d      	b.n	26e74 <__aeabi_fmul+0x30>
   26f38:	230c      	movs	r3, #12
   26f3a:	4699      	mov	r9, r3
   26f3c:	3b09      	subs	r3, #9
   26f3e:	26ff      	movs	r6, #255	; 0xff
   26f40:	469a      	mov	sl, r3
   26f42:	e797      	b.n	26e74 <__aeabi_fmul+0x30>
   26f44:	0028      	movs	r0, r5
   26f46:	f001 ff2d 	bl	28da4 <__clzsi2>
   26f4a:	1f43      	subs	r3, r0, #5
   26f4c:	409d      	lsls	r5, r3
   26f4e:	2376      	movs	r3, #118	; 0x76
   26f50:	425b      	negs	r3, r3
   26f52:	1a18      	subs	r0, r3, r0
   26f54:	2200      	movs	r2, #0
   26f56:	e79d      	b.n	26e94 <__aeabi_fmul+0x50>
   26f58:	2080      	movs	r0, #128	; 0x80
   26f5a:	2400      	movs	r4, #0
   26f5c:	03c0      	lsls	r0, r0, #15
   26f5e:	22ff      	movs	r2, #255	; 0xff
   26f60:	e7ba      	b.n	26ed8 <__aeabi_fmul+0x94>
   26f62:	003d      	movs	r5, r7
   26f64:	4652      	mov	r2, sl
   26f66:	e7ab      	b.n	26ec0 <__aeabi_fmul+0x7c>
   26f68:	003d      	movs	r5, r7
   26f6a:	0021      	movs	r1, r4
   26f6c:	4652      	mov	r2, sl
   26f6e:	e7a7      	b.n	26ec0 <__aeabi_fmul+0x7c>
   26f70:	0c3b      	lsrs	r3, r7, #16
   26f72:	469c      	mov	ip, r3
   26f74:	042a      	lsls	r2, r5, #16
   26f76:	0c12      	lsrs	r2, r2, #16
   26f78:	0c2b      	lsrs	r3, r5, #16
   26f7a:	0014      	movs	r4, r2
   26f7c:	4660      	mov	r0, ip
   26f7e:	4665      	mov	r5, ip
   26f80:	043f      	lsls	r7, r7, #16
   26f82:	0c3f      	lsrs	r7, r7, #16
   26f84:	437c      	muls	r4, r7
   26f86:	4342      	muls	r2, r0
   26f88:	435d      	muls	r5, r3
   26f8a:	437b      	muls	r3, r7
   26f8c:	0c27      	lsrs	r7, r4, #16
   26f8e:	189b      	adds	r3, r3, r2
   26f90:	18ff      	adds	r7, r7, r3
   26f92:	42ba      	cmp	r2, r7
   26f94:	d903      	bls.n	26f9e <__aeabi_fmul+0x15a>
   26f96:	2380      	movs	r3, #128	; 0x80
   26f98:	025b      	lsls	r3, r3, #9
   26f9a:	469c      	mov	ip, r3
   26f9c:	4465      	add	r5, ip
   26f9e:	0424      	lsls	r4, r4, #16
   26fa0:	043a      	lsls	r2, r7, #16
   26fa2:	0c24      	lsrs	r4, r4, #16
   26fa4:	1912      	adds	r2, r2, r4
   26fa6:	0193      	lsls	r3, r2, #6
   26fa8:	1e5c      	subs	r4, r3, #1
   26faa:	41a3      	sbcs	r3, r4
   26fac:	0c3f      	lsrs	r7, r7, #16
   26fae:	0e92      	lsrs	r2, r2, #26
   26fb0:	197d      	adds	r5, r7, r5
   26fb2:	431a      	orrs	r2, r3
   26fb4:	01ad      	lsls	r5, r5, #6
   26fb6:	4315      	orrs	r5, r2
   26fb8:	012b      	lsls	r3, r5, #4
   26fba:	d504      	bpl.n	26fc6 <__aeabi_fmul+0x182>
   26fbc:	2301      	movs	r3, #1
   26fbe:	465e      	mov	r6, fp
   26fc0:	086a      	lsrs	r2, r5, #1
   26fc2:	401d      	ands	r5, r3
   26fc4:	4315      	orrs	r5, r2
   26fc6:	0032      	movs	r2, r6
   26fc8:	327f      	adds	r2, #127	; 0x7f
   26fca:	2a00      	cmp	r2, #0
   26fcc:	dd25      	ble.n	2701a <__aeabi_fmul+0x1d6>
   26fce:	076b      	lsls	r3, r5, #29
   26fd0:	d004      	beq.n	26fdc <__aeabi_fmul+0x198>
   26fd2:	230f      	movs	r3, #15
   26fd4:	402b      	ands	r3, r5
   26fd6:	2b04      	cmp	r3, #4
   26fd8:	d000      	beq.n	26fdc <__aeabi_fmul+0x198>
   26fda:	3504      	adds	r5, #4
   26fdc:	012b      	lsls	r3, r5, #4
   26fde:	d503      	bpl.n	26fe8 <__aeabi_fmul+0x1a4>
   26fe0:	0032      	movs	r2, r6
   26fe2:	4b27      	ldr	r3, [pc, #156]	; (27080 <__aeabi_fmul+0x23c>)
   26fe4:	3280      	adds	r2, #128	; 0x80
   26fe6:	401d      	ands	r5, r3
   26fe8:	2afe      	cmp	r2, #254	; 0xfe
   26fea:	dc94      	bgt.n	26f16 <__aeabi_fmul+0xd2>
   26fec:	2401      	movs	r4, #1
   26fee:	01a8      	lsls	r0, r5, #6
   26ff0:	0a40      	lsrs	r0, r0, #9
   26ff2:	b2d2      	uxtb	r2, r2
   26ff4:	400c      	ands	r4, r1
   26ff6:	e76f      	b.n	26ed8 <__aeabi_fmul+0x94>
   26ff8:	2080      	movs	r0, #128	; 0x80
   26ffa:	03c0      	lsls	r0, r0, #15
   26ffc:	4207      	tst	r7, r0
   26ffe:	d007      	beq.n	27010 <__aeabi_fmul+0x1cc>
   27000:	4205      	tst	r5, r0
   27002:	d105      	bne.n	27010 <__aeabi_fmul+0x1cc>
   27004:	4328      	orrs	r0, r5
   27006:	0240      	lsls	r0, r0, #9
   27008:	0a40      	lsrs	r0, r0, #9
   2700a:	4644      	mov	r4, r8
   2700c:	22ff      	movs	r2, #255	; 0xff
   2700e:	e763      	b.n	26ed8 <__aeabi_fmul+0x94>
   27010:	4338      	orrs	r0, r7
   27012:	0240      	lsls	r0, r0, #9
   27014:	0a40      	lsrs	r0, r0, #9
   27016:	22ff      	movs	r2, #255	; 0xff
   27018:	e75e      	b.n	26ed8 <__aeabi_fmul+0x94>
   2701a:	2401      	movs	r4, #1
   2701c:	1aa3      	subs	r3, r4, r2
   2701e:	2b1b      	cmp	r3, #27
   27020:	dd05      	ble.n	2702e <__aeabi_fmul+0x1ea>
   27022:	400c      	ands	r4, r1
   27024:	2200      	movs	r2, #0
   27026:	2000      	movs	r0, #0
   27028:	e756      	b.n	26ed8 <__aeabi_fmul+0x94>
   2702a:	465e      	mov	r6, fp
   2702c:	e7cb      	b.n	26fc6 <__aeabi_fmul+0x182>
   2702e:	002a      	movs	r2, r5
   27030:	2020      	movs	r0, #32
   27032:	40da      	lsrs	r2, r3
   27034:	1ac3      	subs	r3, r0, r3
   27036:	409d      	lsls	r5, r3
   27038:	002b      	movs	r3, r5
   2703a:	1e5d      	subs	r5, r3, #1
   2703c:	41ab      	sbcs	r3, r5
   2703e:	4313      	orrs	r3, r2
   27040:	075a      	lsls	r2, r3, #29
   27042:	d004      	beq.n	2704e <__aeabi_fmul+0x20a>
   27044:	220f      	movs	r2, #15
   27046:	401a      	ands	r2, r3
   27048:	2a04      	cmp	r2, #4
   2704a:	d000      	beq.n	2704e <__aeabi_fmul+0x20a>
   2704c:	3304      	adds	r3, #4
   2704e:	015a      	lsls	r2, r3, #5
   27050:	d504      	bpl.n	2705c <__aeabi_fmul+0x218>
   27052:	2401      	movs	r4, #1
   27054:	2201      	movs	r2, #1
   27056:	400c      	ands	r4, r1
   27058:	2000      	movs	r0, #0
   2705a:	e73d      	b.n	26ed8 <__aeabi_fmul+0x94>
   2705c:	2401      	movs	r4, #1
   2705e:	019b      	lsls	r3, r3, #6
   27060:	0a58      	lsrs	r0, r3, #9
   27062:	400c      	ands	r4, r1
   27064:	2200      	movs	r2, #0
   27066:	e737      	b.n	26ed8 <__aeabi_fmul+0x94>
   27068:	2080      	movs	r0, #128	; 0x80
   2706a:	2401      	movs	r4, #1
   2706c:	03c0      	lsls	r0, r0, #15
   2706e:	4328      	orrs	r0, r5
   27070:	0240      	lsls	r0, r0, #9
   27072:	0a40      	lsrs	r0, r0, #9
   27074:	400c      	ands	r4, r1
   27076:	22ff      	movs	r2, #255	; 0xff
   27078:	e72e      	b.n	26ed8 <__aeabi_fmul+0x94>
   2707a:	46c0      	nop			; (mov r8, r8)
   2707c:	0002ae78 	.word	0x0002ae78
   27080:	f7ffffff 	.word	0xf7ffffff

00027084 <__aeabi_i2f>:
   27084:	b570      	push	{r4, r5, r6, lr}
   27086:	2800      	cmp	r0, #0
   27088:	d030      	beq.n	270ec <__aeabi_i2f+0x68>
   2708a:	17c3      	asrs	r3, r0, #31
   2708c:	18c4      	adds	r4, r0, r3
   2708e:	405c      	eors	r4, r3
   27090:	0fc5      	lsrs	r5, r0, #31
   27092:	0020      	movs	r0, r4
   27094:	f001 fe86 	bl	28da4 <__clzsi2>
   27098:	239e      	movs	r3, #158	; 0x9e
   2709a:	1a1b      	subs	r3, r3, r0
   2709c:	2b96      	cmp	r3, #150	; 0x96
   2709e:	dc0d      	bgt.n	270bc <__aeabi_i2f+0x38>
   270a0:	2296      	movs	r2, #150	; 0x96
   270a2:	1ad2      	subs	r2, r2, r3
   270a4:	4094      	lsls	r4, r2
   270a6:	002a      	movs	r2, r5
   270a8:	0264      	lsls	r4, r4, #9
   270aa:	0a64      	lsrs	r4, r4, #9
   270ac:	b2db      	uxtb	r3, r3
   270ae:	0264      	lsls	r4, r4, #9
   270b0:	05db      	lsls	r3, r3, #23
   270b2:	0a60      	lsrs	r0, r4, #9
   270b4:	07d2      	lsls	r2, r2, #31
   270b6:	4318      	orrs	r0, r3
   270b8:	4310      	orrs	r0, r2
   270ba:	bd70      	pop	{r4, r5, r6, pc}
   270bc:	2b99      	cmp	r3, #153	; 0x99
   270be:	dc19      	bgt.n	270f4 <__aeabi_i2f+0x70>
   270c0:	2299      	movs	r2, #153	; 0x99
   270c2:	1ad2      	subs	r2, r2, r3
   270c4:	2a00      	cmp	r2, #0
   270c6:	dd29      	ble.n	2711c <__aeabi_i2f+0x98>
   270c8:	4094      	lsls	r4, r2
   270ca:	0022      	movs	r2, r4
   270cc:	4c14      	ldr	r4, [pc, #80]	; (27120 <__aeabi_i2f+0x9c>)
   270ce:	4014      	ands	r4, r2
   270d0:	0751      	lsls	r1, r2, #29
   270d2:	d004      	beq.n	270de <__aeabi_i2f+0x5a>
   270d4:	210f      	movs	r1, #15
   270d6:	400a      	ands	r2, r1
   270d8:	2a04      	cmp	r2, #4
   270da:	d000      	beq.n	270de <__aeabi_i2f+0x5a>
   270dc:	3404      	adds	r4, #4
   270de:	0162      	lsls	r2, r4, #5
   270e0:	d413      	bmi.n	2710a <__aeabi_i2f+0x86>
   270e2:	01a4      	lsls	r4, r4, #6
   270e4:	0a64      	lsrs	r4, r4, #9
   270e6:	b2db      	uxtb	r3, r3
   270e8:	002a      	movs	r2, r5
   270ea:	e7e0      	b.n	270ae <__aeabi_i2f+0x2a>
   270ec:	2200      	movs	r2, #0
   270ee:	2300      	movs	r3, #0
   270f0:	2400      	movs	r4, #0
   270f2:	e7dc      	b.n	270ae <__aeabi_i2f+0x2a>
   270f4:	2205      	movs	r2, #5
   270f6:	0021      	movs	r1, r4
   270f8:	1a12      	subs	r2, r2, r0
   270fa:	40d1      	lsrs	r1, r2
   270fc:	22b9      	movs	r2, #185	; 0xb9
   270fe:	1ad2      	subs	r2, r2, r3
   27100:	4094      	lsls	r4, r2
   27102:	1e62      	subs	r2, r4, #1
   27104:	4194      	sbcs	r4, r2
   27106:	430c      	orrs	r4, r1
   27108:	e7da      	b.n	270c0 <__aeabi_i2f+0x3c>
   2710a:	4b05      	ldr	r3, [pc, #20]	; (27120 <__aeabi_i2f+0x9c>)
   2710c:	002a      	movs	r2, r5
   2710e:	401c      	ands	r4, r3
   27110:	239f      	movs	r3, #159	; 0x9f
   27112:	01a4      	lsls	r4, r4, #6
   27114:	1a1b      	subs	r3, r3, r0
   27116:	0a64      	lsrs	r4, r4, #9
   27118:	b2db      	uxtb	r3, r3
   2711a:	e7c8      	b.n	270ae <__aeabi_i2f+0x2a>
   2711c:	0022      	movs	r2, r4
   2711e:	e7d5      	b.n	270cc <__aeabi_i2f+0x48>
   27120:	fbffffff 	.word	0xfbffffff

00027124 <__aeabi_ui2f>:
   27124:	b510      	push	{r4, lr}
   27126:	1e04      	subs	r4, r0, #0
   27128:	d027      	beq.n	2717a <__aeabi_ui2f+0x56>
   2712a:	f001 fe3b 	bl	28da4 <__clzsi2>
   2712e:	239e      	movs	r3, #158	; 0x9e
   27130:	1a1b      	subs	r3, r3, r0
   27132:	2b96      	cmp	r3, #150	; 0x96
   27134:	dc0a      	bgt.n	2714c <__aeabi_ui2f+0x28>
   27136:	2296      	movs	r2, #150	; 0x96
   27138:	1ad2      	subs	r2, r2, r3
   2713a:	4094      	lsls	r4, r2
   2713c:	0264      	lsls	r4, r4, #9
   2713e:	0a64      	lsrs	r4, r4, #9
   27140:	b2db      	uxtb	r3, r3
   27142:	0264      	lsls	r4, r4, #9
   27144:	05db      	lsls	r3, r3, #23
   27146:	0a60      	lsrs	r0, r4, #9
   27148:	4318      	orrs	r0, r3
   2714a:	bd10      	pop	{r4, pc}
   2714c:	2b99      	cmp	r3, #153	; 0x99
   2714e:	dc17      	bgt.n	27180 <__aeabi_ui2f+0x5c>
   27150:	2299      	movs	r2, #153	; 0x99
   27152:	1ad2      	subs	r2, r2, r3
   27154:	2a00      	cmp	r2, #0
   27156:	dd27      	ble.n	271a8 <__aeabi_ui2f+0x84>
   27158:	4094      	lsls	r4, r2
   2715a:	0022      	movs	r2, r4
   2715c:	4c13      	ldr	r4, [pc, #76]	; (271ac <__aeabi_ui2f+0x88>)
   2715e:	4014      	ands	r4, r2
   27160:	0751      	lsls	r1, r2, #29
   27162:	d004      	beq.n	2716e <__aeabi_ui2f+0x4a>
   27164:	210f      	movs	r1, #15
   27166:	400a      	ands	r2, r1
   27168:	2a04      	cmp	r2, #4
   2716a:	d000      	beq.n	2716e <__aeabi_ui2f+0x4a>
   2716c:	3404      	adds	r4, #4
   2716e:	0162      	lsls	r2, r4, #5
   27170:	d412      	bmi.n	27198 <__aeabi_ui2f+0x74>
   27172:	01a4      	lsls	r4, r4, #6
   27174:	0a64      	lsrs	r4, r4, #9
   27176:	b2db      	uxtb	r3, r3
   27178:	e7e3      	b.n	27142 <__aeabi_ui2f+0x1e>
   2717a:	2300      	movs	r3, #0
   2717c:	2400      	movs	r4, #0
   2717e:	e7e0      	b.n	27142 <__aeabi_ui2f+0x1e>
   27180:	22b9      	movs	r2, #185	; 0xb9
   27182:	0021      	movs	r1, r4
   27184:	1ad2      	subs	r2, r2, r3
   27186:	4091      	lsls	r1, r2
   27188:	000a      	movs	r2, r1
   2718a:	1e51      	subs	r1, r2, #1
   2718c:	418a      	sbcs	r2, r1
   2718e:	2105      	movs	r1, #5
   27190:	1a09      	subs	r1, r1, r0
   27192:	40cc      	lsrs	r4, r1
   27194:	4314      	orrs	r4, r2
   27196:	e7db      	b.n	27150 <__aeabi_ui2f+0x2c>
   27198:	4b04      	ldr	r3, [pc, #16]	; (271ac <__aeabi_ui2f+0x88>)
   2719a:	401c      	ands	r4, r3
   2719c:	239f      	movs	r3, #159	; 0x9f
   2719e:	01a4      	lsls	r4, r4, #6
   271a0:	1a1b      	subs	r3, r3, r0
   271a2:	0a64      	lsrs	r4, r4, #9
   271a4:	b2db      	uxtb	r3, r3
   271a6:	e7cc      	b.n	27142 <__aeabi_ui2f+0x1e>
   271a8:	0022      	movs	r2, r4
   271aa:	e7d7      	b.n	2715c <__aeabi_ui2f+0x38>
   271ac:	fbffffff 	.word	0xfbffffff

000271b0 <__aeabi_dadd>:
   271b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   271b2:	4645      	mov	r5, r8
   271b4:	46de      	mov	lr, fp
   271b6:	4657      	mov	r7, sl
   271b8:	464e      	mov	r6, r9
   271ba:	030c      	lsls	r4, r1, #12
   271bc:	b5e0      	push	{r5, r6, r7, lr}
   271be:	004e      	lsls	r6, r1, #1
   271c0:	0fc9      	lsrs	r1, r1, #31
   271c2:	4688      	mov	r8, r1
   271c4:	000d      	movs	r5, r1
   271c6:	0a61      	lsrs	r1, r4, #9
   271c8:	0f44      	lsrs	r4, r0, #29
   271ca:	430c      	orrs	r4, r1
   271cc:	00c7      	lsls	r7, r0, #3
   271ce:	0319      	lsls	r1, r3, #12
   271d0:	0058      	lsls	r0, r3, #1
   271d2:	0fdb      	lsrs	r3, r3, #31
   271d4:	469b      	mov	fp, r3
   271d6:	0a4b      	lsrs	r3, r1, #9
   271d8:	0f51      	lsrs	r1, r2, #29
   271da:	430b      	orrs	r3, r1
   271dc:	0d76      	lsrs	r6, r6, #21
   271de:	0d40      	lsrs	r0, r0, #21
   271e0:	0019      	movs	r1, r3
   271e2:	00d2      	lsls	r2, r2, #3
   271e4:	45d8      	cmp	r8, fp
   271e6:	d100      	bne.n	271ea <__aeabi_dadd+0x3a>
   271e8:	e0ae      	b.n	27348 <__aeabi_dadd+0x198>
   271ea:	1a35      	subs	r5, r6, r0
   271ec:	2d00      	cmp	r5, #0
   271ee:	dc00      	bgt.n	271f2 <__aeabi_dadd+0x42>
   271f0:	e0f6      	b.n	273e0 <__aeabi_dadd+0x230>
   271f2:	2800      	cmp	r0, #0
   271f4:	d10f      	bne.n	27216 <__aeabi_dadd+0x66>
   271f6:	4313      	orrs	r3, r2
   271f8:	d100      	bne.n	271fc <__aeabi_dadd+0x4c>
   271fa:	e0db      	b.n	273b4 <__aeabi_dadd+0x204>
   271fc:	1e6b      	subs	r3, r5, #1
   271fe:	2b00      	cmp	r3, #0
   27200:	d000      	beq.n	27204 <__aeabi_dadd+0x54>
   27202:	e137      	b.n	27474 <__aeabi_dadd+0x2c4>
   27204:	1aba      	subs	r2, r7, r2
   27206:	4297      	cmp	r7, r2
   27208:	41bf      	sbcs	r7, r7
   2720a:	1a64      	subs	r4, r4, r1
   2720c:	427f      	negs	r7, r7
   2720e:	1be4      	subs	r4, r4, r7
   27210:	2601      	movs	r6, #1
   27212:	0017      	movs	r7, r2
   27214:	e024      	b.n	27260 <__aeabi_dadd+0xb0>
   27216:	4bc6      	ldr	r3, [pc, #792]	; (27530 <__aeabi_dadd+0x380>)
   27218:	429e      	cmp	r6, r3
   2721a:	d04d      	beq.n	272b8 <__aeabi_dadd+0x108>
   2721c:	2380      	movs	r3, #128	; 0x80
   2721e:	041b      	lsls	r3, r3, #16
   27220:	4319      	orrs	r1, r3
   27222:	2d38      	cmp	r5, #56	; 0x38
   27224:	dd00      	ble.n	27228 <__aeabi_dadd+0x78>
   27226:	e107      	b.n	27438 <__aeabi_dadd+0x288>
   27228:	2d1f      	cmp	r5, #31
   2722a:	dd00      	ble.n	2722e <__aeabi_dadd+0x7e>
   2722c:	e138      	b.n	274a0 <__aeabi_dadd+0x2f0>
   2722e:	2020      	movs	r0, #32
   27230:	1b43      	subs	r3, r0, r5
   27232:	469a      	mov	sl, r3
   27234:	000b      	movs	r3, r1
   27236:	4650      	mov	r0, sl
   27238:	4083      	lsls	r3, r0
   2723a:	4699      	mov	r9, r3
   2723c:	0013      	movs	r3, r2
   2723e:	4648      	mov	r0, r9
   27240:	40eb      	lsrs	r3, r5
   27242:	4318      	orrs	r0, r3
   27244:	0003      	movs	r3, r0
   27246:	4650      	mov	r0, sl
   27248:	4082      	lsls	r2, r0
   2724a:	1e50      	subs	r0, r2, #1
   2724c:	4182      	sbcs	r2, r0
   2724e:	40e9      	lsrs	r1, r5
   27250:	431a      	orrs	r2, r3
   27252:	1aba      	subs	r2, r7, r2
   27254:	1a61      	subs	r1, r4, r1
   27256:	4297      	cmp	r7, r2
   27258:	41a4      	sbcs	r4, r4
   2725a:	0017      	movs	r7, r2
   2725c:	4264      	negs	r4, r4
   2725e:	1b0c      	subs	r4, r1, r4
   27260:	0223      	lsls	r3, r4, #8
   27262:	d562      	bpl.n	2732a <__aeabi_dadd+0x17a>
   27264:	0264      	lsls	r4, r4, #9
   27266:	0a65      	lsrs	r5, r4, #9
   27268:	2d00      	cmp	r5, #0
   2726a:	d100      	bne.n	2726e <__aeabi_dadd+0xbe>
   2726c:	e0df      	b.n	2742e <__aeabi_dadd+0x27e>
   2726e:	0028      	movs	r0, r5
   27270:	f001 fd98 	bl	28da4 <__clzsi2>
   27274:	0003      	movs	r3, r0
   27276:	3b08      	subs	r3, #8
   27278:	2b1f      	cmp	r3, #31
   2727a:	dd00      	ble.n	2727e <__aeabi_dadd+0xce>
   2727c:	e0d2      	b.n	27424 <__aeabi_dadd+0x274>
   2727e:	2220      	movs	r2, #32
   27280:	003c      	movs	r4, r7
   27282:	1ad2      	subs	r2, r2, r3
   27284:	409d      	lsls	r5, r3
   27286:	40d4      	lsrs	r4, r2
   27288:	409f      	lsls	r7, r3
   2728a:	4325      	orrs	r5, r4
   2728c:	429e      	cmp	r6, r3
   2728e:	dd00      	ble.n	27292 <__aeabi_dadd+0xe2>
   27290:	e0c4      	b.n	2741c <__aeabi_dadd+0x26c>
   27292:	1b9e      	subs	r6, r3, r6
   27294:	1c73      	adds	r3, r6, #1
   27296:	2b1f      	cmp	r3, #31
   27298:	dd00      	ble.n	2729c <__aeabi_dadd+0xec>
   2729a:	e0f1      	b.n	27480 <__aeabi_dadd+0x2d0>
   2729c:	2220      	movs	r2, #32
   2729e:	0038      	movs	r0, r7
   272a0:	0029      	movs	r1, r5
   272a2:	1ad2      	subs	r2, r2, r3
   272a4:	40d8      	lsrs	r0, r3
   272a6:	4091      	lsls	r1, r2
   272a8:	4097      	lsls	r7, r2
   272aa:	002c      	movs	r4, r5
   272ac:	4301      	orrs	r1, r0
   272ae:	1e78      	subs	r0, r7, #1
   272b0:	4187      	sbcs	r7, r0
   272b2:	40dc      	lsrs	r4, r3
   272b4:	2600      	movs	r6, #0
   272b6:	430f      	orrs	r7, r1
   272b8:	077b      	lsls	r3, r7, #29
   272ba:	d009      	beq.n	272d0 <__aeabi_dadd+0x120>
   272bc:	230f      	movs	r3, #15
   272be:	403b      	ands	r3, r7
   272c0:	2b04      	cmp	r3, #4
   272c2:	d005      	beq.n	272d0 <__aeabi_dadd+0x120>
   272c4:	1d3b      	adds	r3, r7, #4
   272c6:	42bb      	cmp	r3, r7
   272c8:	41bf      	sbcs	r7, r7
   272ca:	427f      	negs	r7, r7
   272cc:	19e4      	adds	r4, r4, r7
   272ce:	001f      	movs	r7, r3
   272d0:	0223      	lsls	r3, r4, #8
   272d2:	d52c      	bpl.n	2732e <__aeabi_dadd+0x17e>
   272d4:	4b96      	ldr	r3, [pc, #600]	; (27530 <__aeabi_dadd+0x380>)
   272d6:	3601      	adds	r6, #1
   272d8:	429e      	cmp	r6, r3
   272da:	d100      	bne.n	272de <__aeabi_dadd+0x12e>
   272dc:	e09a      	b.n	27414 <__aeabi_dadd+0x264>
   272de:	4645      	mov	r5, r8
   272e0:	4b94      	ldr	r3, [pc, #592]	; (27534 <__aeabi_dadd+0x384>)
   272e2:	08ff      	lsrs	r7, r7, #3
   272e4:	401c      	ands	r4, r3
   272e6:	0760      	lsls	r0, r4, #29
   272e8:	0576      	lsls	r6, r6, #21
   272ea:	0264      	lsls	r4, r4, #9
   272ec:	4307      	orrs	r7, r0
   272ee:	0b24      	lsrs	r4, r4, #12
   272f0:	0d76      	lsrs	r6, r6, #21
   272f2:	2100      	movs	r1, #0
   272f4:	0324      	lsls	r4, r4, #12
   272f6:	0b23      	lsrs	r3, r4, #12
   272f8:	0d0c      	lsrs	r4, r1, #20
   272fa:	4a8f      	ldr	r2, [pc, #572]	; (27538 <__aeabi_dadd+0x388>)
   272fc:	0524      	lsls	r4, r4, #20
   272fe:	431c      	orrs	r4, r3
   27300:	4014      	ands	r4, r2
   27302:	0533      	lsls	r3, r6, #20
   27304:	4323      	orrs	r3, r4
   27306:	005b      	lsls	r3, r3, #1
   27308:	07ed      	lsls	r5, r5, #31
   2730a:	085b      	lsrs	r3, r3, #1
   2730c:	432b      	orrs	r3, r5
   2730e:	0038      	movs	r0, r7
   27310:	0019      	movs	r1, r3
   27312:	bc3c      	pop	{r2, r3, r4, r5}
   27314:	4690      	mov	r8, r2
   27316:	4699      	mov	r9, r3
   27318:	46a2      	mov	sl, r4
   2731a:	46ab      	mov	fp, r5
   2731c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2731e:	4664      	mov	r4, ip
   27320:	4304      	orrs	r4, r0
   27322:	d100      	bne.n	27326 <__aeabi_dadd+0x176>
   27324:	e211      	b.n	2774a <__aeabi_dadd+0x59a>
   27326:	0004      	movs	r4, r0
   27328:	4667      	mov	r7, ip
   2732a:	077b      	lsls	r3, r7, #29
   2732c:	d1c6      	bne.n	272bc <__aeabi_dadd+0x10c>
   2732e:	4645      	mov	r5, r8
   27330:	0760      	lsls	r0, r4, #29
   27332:	08ff      	lsrs	r7, r7, #3
   27334:	4307      	orrs	r7, r0
   27336:	08e4      	lsrs	r4, r4, #3
   27338:	4b7d      	ldr	r3, [pc, #500]	; (27530 <__aeabi_dadd+0x380>)
   2733a:	429e      	cmp	r6, r3
   2733c:	d030      	beq.n	273a0 <__aeabi_dadd+0x1f0>
   2733e:	0324      	lsls	r4, r4, #12
   27340:	0576      	lsls	r6, r6, #21
   27342:	0b24      	lsrs	r4, r4, #12
   27344:	0d76      	lsrs	r6, r6, #21
   27346:	e7d4      	b.n	272f2 <__aeabi_dadd+0x142>
   27348:	1a33      	subs	r3, r6, r0
   2734a:	469a      	mov	sl, r3
   2734c:	2b00      	cmp	r3, #0
   2734e:	dd78      	ble.n	27442 <__aeabi_dadd+0x292>
   27350:	2800      	cmp	r0, #0
   27352:	d031      	beq.n	273b8 <__aeabi_dadd+0x208>
   27354:	4876      	ldr	r0, [pc, #472]	; (27530 <__aeabi_dadd+0x380>)
   27356:	4286      	cmp	r6, r0
   27358:	d0ae      	beq.n	272b8 <__aeabi_dadd+0x108>
   2735a:	2080      	movs	r0, #128	; 0x80
   2735c:	0400      	lsls	r0, r0, #16
   2735e:	4301      	orrs	r1, r0
   27360:	4653      	mov	r3, sl
   27362:	2b38      	cmp	r3, #56	; 0x38
   27364:	dc00      	bgt.n	27368 <__aeabi_dadd+0x1b8>
   27366:	e0e9      	b.n	2753c <__aeabi_dadd+0x38c>
   27368:	430a      	orrs	r2, r1
   2736a:	1e51      	subs	r1, r2, #1
   2736c:	418a      	sbcs	r2, r1
   2736e:	2100      	movs	r1, #0
   27370:	19d2      	adds	r2, r2, r7
   27372:	42ba      	cmp	r2, r7
   27374:	41bf      	sbcs	r7, r7
   27376:	1909      	adds	r1, r1, r4
   27378:	427c      	negs	r4, r7
   2737a:	0017      	movs	r7, r2
   2737c:	190c      	adds	r4, r1, r4
   2737e:	0223      	lsls	r3, r4, #8
   27380:	d5d3      	bpl.n	2732a <__aeabi_dadd+0x17a>
   27382:	4b6b      	ldr	r3, [pc, #428]	; (27530 <__aeabi_dadd+0x380>)
   27384:	3601      	adds	r6, #1
   27386:	429e      	cmp	r6, r3
   27388:	d100      	bne.n	2738c <__aeabi_dadd+0x1dc>
   2738a:	e13a      	b.n	27602 <__aeabi_dadd+0x452>
   2738c:	2001      	movs	r0, #1
   2738e:	4b69      	ldr	r3, [pc, #420]	; (27534 <__aeabi_dadd+0x384>)
   27390:	401c      	ands	r4, r3
   27392:	087b      	lsrs	r3, r7, #1
   27394:	4007      	ands	r7, r0
   27396:	431f      	orrs	r7, r3
   27398:	07e0      	lsls	r0, r4, #31
   2739a:	4307      	orrs	r7, r0
   2739c:	0864      	lsrs	r4, r4, #1
   2739e:	e78b      	b.n	272b8 <__aeabi_dadd+0x108>
   273a0:	0023      	movs	r3, r4
   273a2:	433b      	orrs	r3, r7
   273a4:	d100      	bne.n	273a8 <__aeabi_dadd+0x1f8>
   273a6:	e1cb      	b.n	27740 <__aeabi_dadd+0x590>
   273a8:	2280      	movs	r2, #128	; 0x80
   273aa:	0312      	lsls	r2, r2, #12
   273ac:	4314      	orrs	r4, r2
   273ae:	0324      	lsls	r4, r4, #12
   273b0:	0b24      	lsrs	r4, r4, #12
   273b2:	e79e      	b.n	272f2 <__aeabi_dadd+0x142>
   273b4:	002e      	movs	r6, r5
   273b6:	e77f      	b.n	272b8 <__aeabi_dadd+0x108>
   273b8:	0008      	movs	r0, r1
   273ba:	4310      	orrs	r0, r2
   273bc:	d100      	bne.n	273c0 <__aeabi_dadd+0x210>
   273be:	e0b4      	b.n	2752a <__aeabi_dadd+0x37a>
   273c0:	1e58      	subs	r0, r3, #1
   273c2:	2800      	cmp	r0, #0
   273c4:	d000      	beq.n	273c8 <__aeabi_dadd+0x218>
   273c6:	e0de      	b.n	27586 <__aeabi_dadd+0x3d6>
   273c8:	18ba      	adds	r2, r7, r2
   273ca:	42ba      	cmp	r2, r7
   273cc:	419b      	sbcs	r3, r3
   273ce:	1864      	adds	r4, r4, r1
   273d0:	425b      	negs	r3, r3
   273d2:	18e4      	adds	r4, r4, r3
   273d4:	0017      	movs	r7, r2
   273d6:	2601      	movs	r6, #1
   273d8:	0223      	lsls	r3, r4, #8
   273da:	d5a6      	bpl.n	2732a <__aeabi_dadd+0x17a>
   273dc:	2602      	movs	r6, #2
   273de:	e7d5      	b.n	2738c <__aeabi_dadd+0x1dc>
   273e0:	2d00      	cmp	r5, #0
   273e2:	d16e      	bne.n	274c2 <__aeabi_dadd+0x312>
   273e4:	1c70      	adds	r0, r6, #1
   273e6:	0540      	lsls	r0, r0, #21
   273e8:	0d40      	lsrs	r0, r0, #21
   273ea:	2801      	cmp	r0, #1
   273ec:	dc00      	bgt.n	273f0 <__aeabi_dadd+0x240>
   273ee:	e0f9      	b.n	275e4 <__aeabi_dadd+0x434>
   273f0:	1ab8      	subs	r0, r7, r2
   273f2:	4684      	mov	ip, r0
   273f4:	4287      	cmp	r7, r0
   273f6:	4180      	sbcs	r0, r0
   273f8:	1ae5      	subs	r5, r4, r3
   273fa:	4240      	negs	r0, r0
   273fc:	1a2d      	subs	r5, r5, r0
   273fe:	0228      	lsls	r0, r5, #8
   27400:	d400      	bmi.n	27404 <__aeabi_dadd+0x254>
   27402:	e089      	b.n	27518 <__aeabi_dadd+0x368>
   27404:	1bd7      	subs	r7, r2, r7
   27406:	42ba      	cmp	r2, r7
   27408:	4192      	sbcs	r2, r2
   2740a:	1b1c      	subs	r4, r3, r4
   2740c:	4252      	negs	r2, r2
   2740e:	1aa5      	subs	r5, r4, r2
   27410:	46d8      	mov	r8, fp
   27412:	e729      	b.n	27268 <__aeabi_dadd+0xb8>
   27414:	4645      	mov	r5, r8
   27416:	2400      	movs	r4, #0
   27418:	2700      	movs	r7, #0
   2741a:	e76a      	b.n	272f2 <__aeabi_dadd+0x142>
   2741c:	4c45      	ldr	r4, [pc, #276]	; (27534 <__aeabi_dadd+0x384>)
   2741e:	1af6      	subs	r6, r6, r3
   27420:	402c      	ands	r4, r5
   27422:	e749      	b.n	272b8 <__aeabi_dadd+0x108>
   27424:	003d      	movs	r5, r7
   27426:	3828      	subs	r0, #40	; 0x28
   27428:	4085      	lsls	r5, r0
   2742a:	2700      	movs	r7, #0
   2742c:	e72e      	b.n	2728c <__aeabi_dadd+0xdc>
   2742e:	0038      	movs	r0, r7
   27430:	f001 fcb8 	bl	28da4 <__clzsi2>
   27434:	3020      	adds	r0, #32
   27436:	e71d      	b.n	27274 <__aeabi_dadd+0xc4>
   27438:	430a      	orrs	r2, r1
   2743a:	1e51      	subs	r1, r2, #1
   2743c:	418a      	sbcs	r2, r1
   2743e:	2100      	movs	r1, #0
   27440:	e707      	b.n	27252 <__aeabi_dadd+0xa2>
   27442:	2b00      	cmp	r3, #0
   27444:	d000      	beq.n	27448 <__aeabi_dadd+0x298>
   27446:	e0f3      	b.n	27630 <__aeabi_dadd+0x480>
   27448:	1c70      	adds	r0, r6, #1
   2744a:	0543      	lsls	r3, r0, #21
   2744c:	0d5b      	lsrs	r3, r3, #21
   2744e:	2b01      	cmp	r3, #1
   27450:	dc00      	bgt.n	27454 <__aeabi_dadd+0x2a4>
   27452:	e0ad      	b.n	275b0 <__aeabi_dadd+0x400>
   27454:	4b36      	ldr	r3, [pc, #216]	; (27530 <__aeabi_dadd+0x380>)
   27456:	4298      	cmp	r0, r3
   27458:	d100      	bne.n	2745c <__aeabi_dadd+0x2ac>
   2745a:	e0d1      	b.n	27600 <__aeabi_dadd+0x450>
   2745c:	18ba      	adds	r2, r7, r2
   2745e:	42ba      	cmp	r2, r7
   27460:	41bf      	sbcs	r7, r7
   27462:	1864      	adds	r4, r4, r1
   27464:	427f      	negs	r7, r7
   27466:	19e4      	adds	r4, r4, r7
   27468:	07e7      	lsls	r7, r4, #31
   2746a:	0852      	lsrs	r2, r2, #1
   2746c:	4317      	orrs	r7, r2
   2746e:	0864      	lsrs	r4, r4, #1
   27470:	0006      	movs	r6, r0
   27472:	e721      	b.n	272b8 <__aeabi_dadd+0x108>
   27474:	482e      	ldr	r0, [pc, #184]	; (27530 <__aeabi_dadd+0x380>)
   27476:	4285      	cmp	r5, r0
   27478:	d100      	bne.n	2747c <__aeabi_dadd+0x2cc>
   2747a:	e093      	b.n	275a4 <__aeabi_dadd+0x3f4>
   2747c:	001d      	movs	r5, r3
   2747e:	e6d0      	b.n	27222 <__aeabi_dadd+0x72>
   27480:	0029      	movs	r1, r5
   27482:	3e1f      	subs	r6, #31
   27484:	40f1      	lsrs	r1, r6
   27486:	2b20      	cmp	r3, #32
   27488:	d100      	bne.n	2748c <__aeabi_dadd+0x2dc>
   2748a:	e08d      	b.n	275a8 <__aeabi_dadd+0x3f8>
   2748c:	2240      	movs	r2, #64	; 0x40
   2748e:	1ad3      	subs	r3, r2, r3
   27490:	409d      	lsls	r5, r3
   27492:	432f      	orrs	r7, r5
   27494:	1e7d      	subs	r5, r7, #1
   27496:	41af      	sbcs	r7, r5
   27498:	2400      	movs	r4, #0
   2749a:	430f      	orrs	r7, r1
   2749c:	2600      	movs	r6, #0
   2749e:	e744      	b.n	2732a <__aeabi_dadd+0x17a>
   274a0:	002b      	movs	r3, r5
   274a2:	0008      	movs	r0, r1
   274a4:	3b20      	subs	r3, #32
   274a6:	40d8      	lsrs	r0, r3
   274a8:	0003      	movs	r3, r0
   274aa:	2d20      	cmp	r5, #32
   274ac:	d100      	bne.n	274b0 <__aeabi_dadd+0x300>
   274ae:	e07d      	b.n	275ac <__aeabi_dadd+0x3fc>
   274b0:	2040      	movs	r0, #64	; 0x40
   274b2:	1b45      	subs	r5, r0, r5
   274b4:	40a9      	lsls	r1, r5
   274b6:	430a      	orrs	r2, r1
   274b8:	1e51      	subs	r1, r2, #1
   274ba:	418a      	sbcs	r2, r1
   274bc:	2100      	movs	r1, #0
   274be:	431a      	orrs	r2, r3
   274c0:	e6c7      	b.n	27252 <__aeabi_dadd+0xa2>
   274c2:	2e00      	cmp	r6, #0
   274c4:	d050      	beq.n	27568 <__aeabi_dadd+0x3b8>
   274c6:	4e1a      	ldr	r6, [pc, #104]	; (27530 <__aeabi_dadd+0x380>)
   274c8:	42b0      	cmp	r0, r6
   274ca:	d057      	beq.n	2757c <__aeabi_dadd+0x3cc>
   274cc:	2680      	movs	r6, #128	; 0x80
   274ce:	426b      	negs	r3, r5
   274d0:	4699      	mov	r9, r3
   274d2:	0436      	lsls	r6, r6, #16
   274d4:	4334      	orrs	r4, r6
   274d6:	464b      	mov	r3, r9
   274d8:	2b38      	cmp	r3, #56	; 0x38
   274da:	dd00      	ble.n	274de <__aeabi_dadd+0x32e>
   274dc:	e0d6      	b.n	2768c <__aeabi_dadd+0x4dc>
   274de:	2b1f      	cmp	r3, #31
   274e0:	dd00      	ble.n	274e4 <__aeabi_dadd+0x334>
   274e2:	e135      	b.n	27750 <__aeabi_dadd+0x5a0>
   274e4:	2620      	movs	r6, #32
   274e6:	1af5      	subs	r5, r6, r3
   274e8:	0026      	movs	r6, r4
   274ea:	40ae      	lsls	r6, r5
   274ec:	46b2      	mov	sl, r6
   274ee:	003e      	movs	r6, r7
   274f0:	40de      	lsrs	r6, r3
   274f2:	46ac      	mov	ip, r5
   274f4:	0035      	movs	r5, r6
   274f6:	4656      	mov	r6, sl
   274f8:	432e      	orrs	r6, r5
   274fa:	4665      	mov	r5, ip
   274fc:	40af      	lsls	r7, r5
   274fe:	1e7d      	subs	r5, r7, #1
   27500:	41af      	sbcs	r7, r5
   27502:	40dc      	lsrs	r4, r3
   27504:	4337      	orrs	r7, r6
   27506:	1bd7      	subs	r7, r2, r7
   27508:	42ba      	cmp	r2, r7
   2750a:	4192      	sbcs	r2, r2
   2750c:	1b0c      	subs	r4, r1, r4
   2750e:	4252      	negs	r2, r2
   27510:	1aa4      	subs	r4, r4, r2
   27512:	0006      	movs	r6, r0
   27514:	46d8      	mov	r8, fp
   27516:	e6a3      	b.n	27260 <__aeabi_dadd+0xb0>
   27518:	4664      	mov	r4, ip
   2751a:	4667      	mov	r7, ip
   2751c:	432c      	orrs	r4, r5
   2751e:	d000      	beq.n	27522 <__aeabi_dadd+0x372>
   27520:	e6a2      	b.n	27268 <__aeabi_dadd+0xb8>
   27522:	2500      	movs	r5, #0
   27524:	2600      	movs	r6, #0
   27526:	2700      	movs	r7, #0
   27528:	e706      	b.n	27338 <__aeabi_dadd+0x188>
   2752a:	001e      	movs	r6, r3
   2752c:	e6c4      	b.n	272b8 <__aeabi_dadd+0x108>
   2752e:	46c0      	nop			; (mov r8, r8)
   27530:	000007ff 	.word	0x000007ff
   27534:	ff7fffff 	.word	0xff7fffff
   27538:	800fffff 	.word	0x800fffff
   2753c:	2b1f      	cmp	r3, #31
   2753e:	dc63      	bgt.n	27608 <__aeabi_dadd+0x458>
   27540:	2020      	movs	r0, #32
   27542:	1ac3      	subs	r3, r0, r3
   27544:	0008      	movs	r0, r1
   27546:	4098      	lsls	r0, r3
   27548:	469c      	mov	ip, r3
   2754a:	4683      	mov	fp, r0
   2754c:	4653      	mov	r3, sl
   2754e:	0010      	movs	r0, r2
   27550:	40d8      	lsrs	r0, r3
   27552:	0003      	movs	r3, r0
   27554:	4658      	mov	r0, fp
   27556:	4318      	orrs	r0, r3
   27558:	4663      	mov	r3, ip
   2755a:	409a      	lsls	r2, r3
   2755c:	1e53      	subs	r3, r2, #1
   2755e:	419a      	sbcs	r2, r3
   27560:	4653      	mov	r3, sl
   27562:	4302      	orrs	r2, r0
   27564:	40d9      	lsrs	r1, r3
   27566:	e703      	b.n	27370 <__aeabi_dadd+0x1c0>
   27568:	0026      	movs	r6, r4
   2756a:	433e      	orrs	r6, r7
   2756c:	d006      	beq.n	2757c <__aeabi_dadd+0x3cc>
   2756e:	43eb      	mvns	r3, r5
   27570:	4699      	mov	r9, r3
   27572:	2b00      	cmp	r3, #0
   27574:	d0c7      	beq.n	27506 <__aeabi_dadd+0x356>
   27576:	4e94      	ldr	r6, [pc, #592]	; (277c8 <__aeabi_dadd+0x618>)
   27578:	42b0      	cmp	r0, r6
   2757a:	d1ac      	bne.n	274d6 <__aeabi_dadd+0x326>
   2757c:	000c      	movs	r4, r1
   2757e:	0017      	movs	r7, r2
   27580:	0006      	movs	r6, r0
   27582:	46d8      	mov	r8, fp
   27584:	e698      	b.n	272b8 <__aeabi_dadd+0x108>
   27586:	4b90      	ldr	r3, [pc, #576]	; (277c8 <__aeabi_dadd+0x618>)
   27588:	459a      	cmp	sl, r3
   2758a:	d00b      	beq.n	275a4 <__aeabi_dadd+0x3f4>
   2758c:	4682      	mov	sl, r0
   2758e:	e6e7      	b.n	27360 <__aeabi_dadd+0x1b0>
   27590:	2800      	cmp	r0, #0
   27592:	d000      	beq.n	27596 <__aeabi_dadd+0x3e6>
   27594:	e09e      	b.n	276d4 <__aeabi_dadd+0x524>
   27596:	0018      	movs	r0, r3
   27598:	4310      	orrs	r0, r2
   2759a:	d100      	bne.n	2759e <__aeabi_dadd+0x3ee>
   2759c:	e0e9      	b.n	27772 <__aeabi_dadd+0x5c2>
   2759e:	001c      	movs	r4, r3
   275a0:	0017      	movs	r7, r2
   275a2:	46d8      	mov	r8, fp
   275a4:	4e88      	ldr	r6, [pc, #544]	; (277c8 <__aeabi_dadd+0x618>)
   275a6:	e687      	b.n	272b8 <__aeabi_dadd+0x108>
   275a8:	2500      	movs	r5, #0
   275aa:	e772      	b.n	27492 <__aeabi_dadd+0x2e2>
   275ac:	2100      	movs	r1, #0
   275ae:	e782      	b.n	274b6 <__aeabi_dadd+0x306>
   275b0:	0023      	movs	r3, r4
   275b2:	433b      	orrs	r3, r7
   275b4:	2e00      	cmp	r6, #0
   275b6:	d000      	beq.n	275ba <__aeabi_dadd+0x40a>
   275b8:	e0ab      	b.n	27712 <__aeabi_dadd+0x562>
   275ba:	2b00      	cmp	r3, #0
   275bc:	d100      	bne.n	275c0 <__aeabi_dadd+0x410>
   275be:	e0e7      	b.n	27790 <__aeabi_dadd+0x5e0>
   275c0:	000b      	movs	r3, r1
   275c2:	4313      	orrs	r3, r2
   275c4:	d100      	bne.n	275c8 <__aeabi_dadd+0x418>
   275c6:	e677      	b.n	272b8 <__aeabi_dadd+0x108>
   275c8:	18ba      	adds	r2, r7, r2
   275ca:	42ba      	cmp	r2, r7
   275cc:	41bf      	sbcs	r7, r7
   275ce:	1864      	adds	r4, r4, r1
   275d0:	427f      	negs	r7, r7
   275d2:	19e4      	adds	r4, r4, r7
   275d4:	0223      	lsls	r3, r4, #8
   275d6:	d400      	bmi.n	275da <__aeabi_dadd+0x42a>
   275d8:	e0f2      	b.n	277c0 <__aeabi_dadd+0x610>
   275da:	4b7c      	ldr	r3, [pc, #496]	; (277cc <__aeabi_dadd+0x61c>)
   275dc:	0017      	movs	r7, r2
   275de:	401c      	ands	r4, r3
   275e0:	0006      	movs	r6, r0
   275e2:	e669      	b.n	272b8 <__aeabi_dadd+0x108>
   275e4:	0020      	movs	r0, r4
   275e6:	4338      	orrs	r0, r7
   275e8:	2e00      	cmp	r6, #0
   275ea:	d1d1      	bne.n	27590 <__aeabi_dadd+0x3e0>
   275ec:	2800      	cmp	r0, #0
   275ee:	d15b      	bne.n	276a8 <__aeabi_dadd+0x4f8>
   275f0:	001c      	movs	r4, r3
   275f2:	4314      	orrs	r4, r2
   275f4:	d100      	bne.n	275f8 <__aeabi_dadd+0x448>
   275f6:	e0a8      	b.n	2774a <__aeabi_dadd+0x59a>
   275f8:	001c      	movs	r4, r3
   275fa:	0017      	movs	r7, r2
   275fc:	46d8      	mov	r8, fp
   275fe:	e65b      	b.n	272b8 <__aeabi_dadd+0x108>
   27600:	0006      	movs	r6, r0
   27602:	2400      	movs	r4, #0
   27604:	2700      	movs	r7, #0
   27606:	e697      	b.n	27338 <__aeabi_dadd+0x188>
   27608:	4650      	mov	r0, sl
   2760a:	000b      	movs	r3, r1
   2760c:	3820      	subs	r0, #32
   2760e:	40c3      	lsrs	r3, r0
   27610:	4699      	mov	r9, r3
   27612:	4653      	mov	r3, sl
   27614:	2b20      	cmp	r3, #32
   27616:	d100      	bne.n	2761a <__aeabi_dadd+0x46a>
   27618:	e095      	b.n	27746 <__aeabi_dadd+0x596>
   2761a:	2340      	movs	r3, #64	; 0x40
   2761c:	4650      	mov	r0, sl
   2761e:	1a1b      	subs	r3, r3, r0
   27620:	4099      	lsls	r1, r3
   27622:	430a      	orrs	r2, r1
   27624:	1e51      	subs	r1, r2, #1
   27626:	418a      	sbcs	r2, r1
   27628:	464b      	mov	r3, r9
   2762a:	2100      	movs	r1, #0
   2762c:	431a      	orrs	r2, r3
   2762e:	e69f      	b.n	27370 <__aeabi_dadd+0x1c0>
   27630:	2e00      	cmp	r6, #0
   27632:	d130      	bne.n	27696 <__aeabi_dadd+0x4e6>
   27634:	0026      	movs	r6, r4
   27636:	433e      	orrs	r6, r7
   27638:	d067      	beq.n	2770a <__aeabi_dadd+0x55a>
   2763a:	43db      	mvns	r3, r3
   2763c:	469a      	mov	sl, r3
   2763e:	2b00      	cmp	r3, #0
   27640:	d01c      	beq.n	2767c <__aeabi_dadd+0x4cc>
   27642:	4e61      	ldr	r6, [pc, #388]	; (277c8 <__aeabi_dadd+0x618>)
   27644:	42b0      	cmp	r0, r6
   27646:	d060      	beq.n	2770a <__aeabi_dadd+0x55a>
   27648:	4653      	mov	r3, sl
   2764a:	2b38      	cmp	r3, #56	; 0x38
   2764c:	dd00      	ble.n	27650 <__aeabi_dadd+0x4a0>
   2764e:	e096      	b.n	2777e <__aeabi_dadd+0x5ce>
   27650:	2b1f      	cmp	r3, #31
   27652:	dd00      	ble.n	27656 <__aeabi_dadd+0x4a6>
   27654:	e09f      	b.n	27796 <__aeabi_dadd+0x5e6>
   27656:	2620      	movs	r6, #32
   27658:	1af3      	subs	r3, r6, r3
   2765a:	0026      	movs	r6, r4
   2765c:	409e      	lsls	r6, r3
   2765e:	469c      	mov	ip, r3
   27660:	46b3      	mov	fp, r6
   27662:	4653      	mov	r3, sl
   27664:	003e      	movs	r6, r7
   27666:	40de      	lsrs	r6, r3
   27668:	0033      	movs	r3, r6
   2766a:	465e      	mov	r6, fp
   2766c:	431e      	orrs	r6, r3
   2766e:	4663      	mov	r3, ip
   27670:	409f      	lsls	r7, r3
   27672:	1e7b      	subs	r3, r7, #1
   27674:	419f      	sbcs	r7, r3
   27676:	4653      	mov	r3, sl
   27678:	40dc      	lsrs	r4, r3
   2767a:	4337      	orrs	r7, r6
   2767c:	18bf      	adds	r7, r7, r2
   2767e:	4297      	cmp	r7, r2
   27680:	4192      	sbcs	r2, r2
   27682:	1864      	adds	r4, r4, r1
   27684:	4252      	negs	r2, r2
   27686:	18a4      	adds	r4, r4, r2
   27688:	0006      	movs	r6, r0
   2768a:	e678      	b.n	2737e <__aeabi_dadd+0x1ce>
   2768c:	4327      	orrs	r7, r4
   2768e:	1e7c      	subs	r4, r7, #1
   27690:	41a7      	sbcs	r7, r4
   27692:	2400      	movs	r4, #0
   27694:	e737      	b.n	27506 <__aeabi_dadd+0x356>
   27696:	4e4c      	ldr	r6, [pc, #304]	; (277c8 <__aeabi_dadd+0x618>)
   27698:	42b0      	cmp	r0, r6
   2769a:	d036      	beq.n	2770a <__aeabi_dadd+0x55a>
   2769c:	2680      	movs	r6, #128	; 0x80
   2769e:	425b      	negs	r3, r3
   276a0:	0436      	lsls	r6, r6, #16
   276a2:	469a      	mov	sl, r3
   276a4:	4334      	orrs	r4, r6
   276a6:	e7cf      	b.n	27648 <__aeabi_dadd+0x498>
   276a8:	0018      	movs	r0, r3
   276aa:	4310      	orrs	r0, r2
   276ac:	d100      	bne.n	276b0 <__aeabi_dadd+0x500>
   276ae:	e603      	b.n	272b8 <__aeabi_dadd+0x108>
   276b0:	1ab8      	subs	r0, r7, r2
   276b2:	4684      	mov	ip, r0
   276b4:	4567      	cmp	r7, ip
   276b6:	41ad      	sbcs	r5, r5
   276b8:	1ae0      	subs	r0, r4, r3
   276ba:	426d      	negs	r5, r5
   276bc:	1b40      	subs	r0, r0, r5
   276be:	0205      	lsls	r5, r0, #8
   276c0:	d400      	bmi.n	276c4 <__aeabi_dadd+0x514>
   276c2:	e62c      	b.n	2731e <__aeabi_dadd+0x16e>
   276c4:	1bd7      	subs	r7, r2, r7
   276c6:	42ba      	cmp	r2, r7
   276c8:	4192      	sbcs	r2, r2
   276ca:	1b1c      	subs	r4, r3, r4
   276cc:	4252      	negs	r2, r2
   276ce:	1aa4      	subs	r4, r4, r2
   276d0:	46d8      	mov	r8, fp
   276d2:	e5f1      	b.n	272b8 <__aeabi_dadd+0x108>
   276d4:	0018      	movs	r0, r3
   276d6:	4310      	orrs	r0, r2
   276d8:	d100      	bne.n	276dc <__aeabi_dadd+0x52c>
   276da:	e763      	b.n	275a4 <__aeabi_dadd+0x3f4>
   276dc:	08f8      	lsrs	r0, r7, #3
   276de:	0767      	lsls	r7, r4, #29
   276e0:	4307      	orrs	r7, r0
   276e2:	2080      	movs	r0, #128	; 0x80
   276e4:	08e4      	lsrs	r4, r4, #3
   276e6:	0300      	lsls	r0, r0, #12
   276e8:	4204      	tst	r4, r0
   276ea:	d008      	beq.n	276fe <__aeabi_dadd+0x54e>
   276ec:	08dd      	lsrs	r5, r3, #3
   276ee:	4205      	tst	r5, r0
   276f0:	d105      	bne.n	276fe <__aeabi_dadd+0x54e>
   276f2:	08d2      	lsrs	r2, r2, #3
   276f4:	0759      	lsls	r1, r3, #29
   276f6:	4311      	orrs	r1, r2
   276f8:	000f      	movs	r7, r1
   276fa:	002c      	movs	r4, r5
   276fc:	46d8      	mov	r8, fp
   276fe:	0f7b      	lsrs	r3, r7, #29
   27700:	00e4      	lsls	r4, r4, #3
   27702:	431c      	orrs	r4, r3
   27704:	00ff      	lsls	r7, r7, #3
   27706:	4e30      	ldr	r6, [pc, #192]	; (277c8 <__aeabi_dadd+0x618>)
   27708:	e5d6      	b.n	272b8 <__aeabi_dadd+0x108>
   2770a:	000c      	movs	r4, r1
   2770c:	0017      	movs	r7, r2
   2770e:	0006      	movs	r6, r0
   27710:	e5d2      	b.n	272b8 <__aeabi_dadd+0x108>
   27712:	2b00      	cmp	r3, #0
   27714:	d038      	beq.n	27788 <__aeabi_dadd+0x5d8>
   27716:	000b      	movs	r3, r1
   27718:	4313      	orrs	r3, r2
   2771a:	d100      	bne.n	2771e <__aeabi_dadd+0x56e>
   2771c:	e742      	b.n	275a4 <__aeabi_dadd+0x3f4>
   2771e:	08f8      	lsrs	r0, r7, #3
   27720:	0767      	lsls	r7, r4, #29
   27722:	4307      	orrs	r7, r0
   27724:	2080      	movs	r0, #128	; 0x80
   27726:	08e4      	lsrs	r4, r4, #3
   27728:	0300      	lsls	r0, r0, #12
   2772a:	4204      	tst	r4, r0
   2772c:	d0e7      	beq.n	276fe <__aeabi_dadd+0x54e>
   2772e:	08cb      	lsrs	r3, r1, #3
   27730:	4203      	tst	r3, r0
   27732:	d1e4      	bne.n	276fe <__aeabi_dadd+0x54e>
   27734:	08d2      	lsrs	r2, r2, #3
   27736:	0749      	lsls	r1, r1, #29
   27738:	4311      	orrs	r1, r2
   2773a:	000f      	movs	r7, r1
   2773c:	001c      	movs	r4, r3
   2773e:	e7de      	b.n	276fe <__aeabi_dadd+0x54e>
   27740:	2700      	movs	r7, #0
   27742:	2400      	movs	r4, #0
   27744:	e5d5      	b.n	272f2 <__aeabi_dadd+0x142>
   27746:	2100      	movs	r1, #0
   27748:	e76b      	b.n	27622 <__aeabi_dadd+0x472>
   2774a:	2500      	movs	r5, #0
   2774c:	2700      	movs	r7, #0
   2774e:	e5f3      	b.n	27338 <__aeabi_dadd+0x188>
   27750:	464e      	mov	r6, r9
   27752:	0025      	movs	r5, r4
   27754:	3e20      	subs	r6, #32
   27756:	40f5      	lsrs	r5, r6
   27758:	464b      	mov	r3, r9
   2775a:	002e      	movs	r6, r5
   2775c:	2b20      	cmp	r3, #32
   2775e:	d02d      	beq.n	277bc <__aeabi_dadd+0x60c>
   27760:	2540      	movs	r5, #64	; 0x40
   27762:	1aed      	subs	r5, r5, r3
   27764:	40ac      	lsls	r4, r5
   27766:	4327      	orrs	r7, r4
   27768:	1e7c      	subs	r4, r7, #1
   2776a:	41a7      	sbcs	r7, r4
   2776c:	2400      	movs	r4, #0
   2776e:	4337      	orrs	r7, r6
   27770:	e6c9      	b.n	27506 <__aeabi_dadd+0x356>
   27772:	2480      	movs	r4, #128	; 0x80
   27774:	2500      	movs	r5, #0
   27776:	0324      	lsls	r4, r4, #12
   27778:	4e13      	ldr	r6, [pc, #76]	; (277c8 <__aeabi_dadd+0x618>)
   2777a:	2700      	movs	r7, #0
   2777c:	e5dc      	b.n	27338 <__aeabi_dadd+0x188>
   2777e:	4327      	orrs	r7, r4
   27780:	1e7c      	subs	r4, r7, #1
   27782:	41a7      	sbcs	r7, r4
   27784:	2400      	movs	r4, #0
   27786:	e779      	b.n	2767c <__aeabi_dadd+0x4cc>
   27788:	000c      	movs	r4, r1
   2778a:	0017      	movs	r7, r2
   2778c:	4e0e      	ldr	r6, [pc, #56]	; (277c8 <__aeabi_dadd+0x618>)
   2778e:	e593      	b.n	272b8 <__aeabi_dadd+0x108>
   27790:	000c      	movs	r4, r1
   27792:	0017      	movs	r7, r2
   27794:	e590      	b.n	272b8 <__aeabi_dadd+0x108>
   27796:	4656      	mov	r6, sl
   27798:	0023      	movs	r3, r4
   2779a:	3e20      	subs	r6, #32
   2779c:	40f3      	lsrs	r3, r6
   2779e:	4699      	mov	r9, r3
   277a0:	4653      	mov	r3, sl
   277a2:	2b20      	cmp	r3, #32
   277a4:	d00e      	beq.n	277c4 <__aeabi_dadd+0x614>
   277a6:	2340      	movs	r3, #64	; 0x40
   277a8:	4656      	mov	r6, sl
   277aa:	1b9b      	subs	r3, r3, r6
   277ac:	409c      	lsls	r4, r3
   277ae:	4327      	orrs	r7, r4
   277b0:	1e7c      	subs	r4, r7, #1
   277b2:	41a7      	sbcs	r7, r4
   277b4:	464b      	mov	r3, r9
   277b6:	2400      	movs	r4, #0
   277b8:	431f      	orrs	r7, r3
   277ba:	e75f      	b.n	2767c <__aeabi_dadd+0x4cc>
   277bc:	2400      	movs	r4, #0
   277be:	e7d2      	b.n	27766 <__aeabi_dadd+0x5b6>
   277c0:	0017      	movs	r7, r2
   277c2:	e5b2      	b.n	2732a <__aeabi_dadd+0x17a>
   277c4:	2400      	movs	r4, #0
   277c6:	e7f2      	b.n	277ae <__aeabi_dadd+0x5fe>
   277c8:	000007ff 	.word	0x000007ff
   277cc:	ff7fffff 	.word	0xff7fffff

000277d0 <__aeabi_ddiv>:
   277d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   277d2:	4657      	mov	r7, sl
   277d4:	4645      	mov	r5, r8
   277d6:	46de      	mov	lr, fp
   277d8:	464e      	mov	r6, r9
   277da:	b5e0      	push	{r5, r6, r7, lr}
   277dc:	004c      	lsls	r4, r1, #1
   277de:	030e      	lsls	r6, r1, #12
   277e0:	b087      	sub	sp, #28
   277e2:	4683      	mov	fp, r0
   277e4:	4692      	mov	sl, r2
   277e6:	001d      	movs	r5, r3
   277e8:	4680      	mov	r8, r0
   277ea:	0b36      	lsrs	r6, r6, #12
   277ec:	0d64      	lsrs	r4, r4, #21
   277ee:	0fcf      	lsrs	r7, r1, #31
   277f0:	2c00      	cmp	r4, #0
   277f2:	d04f      	beq.n	27894 <__aeabi_ddiv+0xc4>
   277f4:	4b6f      	ldr	r3, [pc, #444]	; (279b4 <__aeabi_ddiv+0x1e4>)
   277f6:	429c      	cmp	r4, r3
   277f8:	d035      	beq.n	27866 <__aeabi_ddiv+0x96>
   277fa:	2380      	movs	r3, #128	; 0x80
   277fc:	0f42      	lsrs	r2, r0, #29
   277fe:	041b      	lsls	r3, r3, #16
   27800:	00f6      	lsls	r6, r6, #3
   27802:	4313      	orrs	r3, r2
   27804:	4333      	orrs	r3, r6
   27806:	4699      	mov	r9, r3
   27808:	00c3      	lsls	r3, r0, #3
   2780a:	4698      	mov	r8, r3
   2780c:	4b6a      	ldr	r3, [pc, #424]	; (279b8 <__aeabi_ddiv+0x1e8>)
   2780e:	2600      	movs	r6, #0
   27810:	469c      	mov	ip, r3
   27812:	2300      	movs	r3, #0
   27814:	4464      	add	r4, ip
   27816:	9303      	str	r3, [sp, #12]
   27818:	032b      	lsls	r3, r5, #12
   2781a:	0b1b      	lsrs	r3, r3, #12
   2781c:	469b      	mov	fp, r3
   2781e:	006b      	lsls	r3, r5, #1
   27820:	0fed      	lsrs	r5, r5, #31
   27822:	4650      	mov	r0, sl
   27824:	0d5b      	lsrs	r3, r3, #21
   27826:	9501      	str	r5, [sp, #4]
   27828:	d05e      	beq.n	278e8 <__aeabi_ddiv+0x118>
   2782a:	4a62      	ldr	r2, [pc, #392]	; (279b4 <__aeabi_ddiv+0x1e4>)
   2782c:	4293      	cmp	r3, r2
   2782e:	d053      	beq.n	278d8 <__aeabi_ddiv+0x108>
   27830:	465a      	mov	r2, fp
   27832:	00d1      	lsls	r1, r2, #3
   27834:	2280      	movs	r2, #128	; 0x80
   27836:	0f40      	lsrs	r0, r0, #29
   27838:	0412      	lsls	r2, r2, #16
   2783a:	4302      	orrs	r2, r0
   2783c:	430a      	orrs	r2, r1
   2783e:	4693      	mov	fp, r2
   27840:	4652      	mov	r2, sl
   27842:	00d1      	lsls	r1, r2, #3
   27844:	4a5c      	ldr	r2, [pc, #368]	; (279b8 <__aeabi_ddiv+0x1e8>)
   27846:	4694      	mov	ip, r2
   27848:	2200      	movs	r2, #0
   2784a:	4463      	add	r3, ip
   2784c:	0038      	movs	r0, r7
   2784e:	4068      	eors	r0, r5
   27850:	4684      	mov	ip, r0
   27852:	9002      	str	r0, [sp, #8]
   27854:	1ae4      	subs	r4, r4, r3
   27856:	4316      	orrs	r6, r2
   27858:	2e0f      	cmp	r6, #15
   2785a:	d900      	bls.n	2785e <__aeabi_ddiv+0x8e>
   2785c:	e0b4      	b.n	279c8 <__aeabi_ddiv+0x1f8>
   2785e:	4b57      	ldr	r3, [pc, #348]	; (279bc <__aeabi_ddiv+0x1ec>)
   27860:	00b6      	lsls	r6, r6, #2
   27862:	599b      	ldr	r3, [r3, r6]
   27864:	469f      	mov	pc, r3
   27866:	0003      	movs	r3, r0
   27868:	4333      	orrs	r3, r6
   2786a:	4699      	mov	r9, r3
   2786c:	d16c      	bne.n	27948 <__aeabi_ddiv+0x178>
   2786e:	2300      	movs	r3, #0
   27870:	4698      	mov	r8, r3
   27872:	3302      	adds	r3, #2
   27874:	2608      	movs	r6, #8
   27876:	9303      	str	r3, [sp, #12]
   27878:	e7ce      	b.n	27818 <__aeabi_ddiv+0x48>
   2787a:	46cb      	mov	fp, r9
   2787c:	4641      	mov	r1, r8
   2787e:	9a03      	ldr	r2, [sp, #12]
   27880:	9701      	str	r7, [sp, #4]
   27882:	2a02      	cmp	r2, #2
   27884:	d165      	bne.n	27952 <__aeabi_ddiv+0x182>
   27886:	9b01      	ldr	r3, [sp, #4]
   27888:	4c4a      	ldr	r4, [pc, #296]	; (279b4 <__aeabi_ddiv+0x1e4>)
   2788a:	469c      	mov	ip, r3
   2788c:	2300      	movs	r3, #0
   2788e:	2200      	movs	r2, #0
   27890:	4698      	mov	r8, r3
   27892:	e06b      	b.n	2796c <__aeabi_ddiv+0x19c>
   27894:	0003      	movs	r3, r0
   27896:	4333      	orrs	r3, r6
   27898:	4699      	mov	r9, r3
   2789a:	d04e      	beq.n	2793a <__aeabi_ddiv+0x16a>
   2789c:	2e00      	cmp	r6, #0
   2789e:	d100      	bne.n	278a2 <__aeabi_ddiv+0xd2>
   278a0:	e1bc      	b.n	27c1c <__aeabi_ddiv+0x44c>
   278a2:	0030      	movs	r0, r6
   278a4:	f001 fa7e 	bl	28da4 <__clzsi2>
   278a8:	0003      	movs	r3, r0
   278aa:	3b0b      	subs	r3, #11
   278ac:	2b1c      	cmp	r3, #28
   278ae:	dd00      	ble.n	278b2 <__aeabi_ddiv+0xe2>
   278b0:	e1ac      	b.n	27c0c <__aeabi_ddiv+0x43c>
   278b2:	221d      	movs	r2, #29
   278b4:	1ad3      	subs	r3, r2, r3
   278b6:	465a      	mov	r2, fp
   278b8:	0001      	movs	r1, r0
   278ba:	40da      	lsrs	r2, r3
   278bc:	3908      	subs	r1, #8
   278be:	408e      	lsls	r6, r1
   278c0:	0013      	movs	r3, r2
   278c2:	4333      	orrs	r3, r6
   278c4:	4699      	mov	r9, r3
   278c6:	465b      	mov	r3, fp
   278c8:	408b      	lsls	r3, r1
   278ca:	4698      	mov	r8, r3
   278cc:	2300      	movs	r3, #0
   278ce:	4c3c      	ldr	r4, [pc, #240]	; (279c0 <__aeabi_ddiv+0x1f0>)
   278d0:	2600      	movs	r6, #0
   278d2:	1a24      	subs	r4, r4, r0
   278d4:	9303      	str	r3, [sp, #12]
   278d6:	e79f      	b.n	27818 <__aeabi_ddiv+0x48>
   278d8:	4651      	mov	r1, sl
   278da:	465a      	mov	r2, fp
   278dc:	4311      	orrs	r1, r2
   278de:	d129      	bne.n	27934 <__aeabi_ddiv+0x164>
   278e0:	2200      	movs	r2, #0
   278e2:	4693      	mov	fp, r2
   278e4:	3202      	adds	r2, #2
   278e6:	e7b1      	b.n	2784c <__aeabi_ddiv+0x7c>
   278e8:	4659      	mov	r1, fp
   278ea:	4301      	orrs	r1, r0
   278ec:	d01e      	beq.n	2792c <__aeabi_ddiv+0x15c>
   278ee:	465b      	mov	r3, fp
   278f0:	2b00      	cmp	r3, #0
   278f2:	d100      	bne.n	278f6 <__aeabi_ddiv+0x126>
   278f4:	e19e      	b.n	27c34 <__aeabi_ddiv+0x464>
   278f6:	4658      	mov	r0, fp
   278f8:	f001 fa54 	bl	28da4 <__clzsi2>
   278fc:	0003      	movs	r3, r0
   278fe:	3b0b      	subs	r3, #11
   27900:	2b1c      	cmp	r3, #28
   27902:	dd00      	ble.n	27906 <__aeabi_ddiv+0x136>
   27904:	e18f      	b.n	27c26 <__aeabi_ddiv+0x456>
   27906:	0002      	movs	r2, r0
   27908:	4659      	mov	r1, fp
   2790a:	3a08      	subs	r2, #8
   2790c:	4091      	lsls	r1, r2
   2790e:	468b      	mov	fp, r1
   27910:	211d      	movs	r1, #29
   27912:	1acb      	subs	r3, r1, r3
   27914:	4651      	mov	r1, sl
   27916:	40d9      	lsrs	r1, r3
   27918:	000b      	movs	r3, r1
   2791a:	4659      	mov	r1, fp
   2791c:	430b      	orrs	r3, r1
   2791e:	4651      	mov	r1, sl
   27920:	469b      	mov	fp, r3
   27922:	4091      	lsls	r1, r2
   27924:	4b26      	ldr	r3, [pc, #152]	; (279c0 <__aeabi_ddiv+0x1f0>)
   27926:	2200      	movs	r2, #0
   27928:	1a1b      	subs	r3, r3, r0
   2792a:	e78f      	b.n	2784c <__aeabi_ddiv+0x7c>
   2792c:	2300      	movs	r3, #0
   2792e:	2201      	movs	r2, #1
   27930:	469b      	mov	fp, r3
   27932:	e78b      	b.n	2784c <__aeabi_ddiv+0x7c>
   27934:	4651      	mov	r1, sl
   27936:	2203      	movs	r2, #3
   27938:	e788      	b.n	2784c <__aeabi_ddiv+0x7c>
   2793a:	2300      	movs	r3, #0
   2793c:	4698      	mov	r8, r3
   2793e:	3301      	adds	r3, #1
   27940:	2604      	movs	r6, #4
   27942:	2400      	movs	r4, #0
   27944:	9303      	str	r3, [sp, #12]
   27946:	e767      	b.n	27818 <__aeabi_ddiv+0x48>
   27948:	2303      	movs	r3, #3
   2794a:	46b1      	mov	r9, r6
   2794c:	9303      	str	r3, [sp, #12]
   2794e:	260c      	movs	r6, #12
   27950:	e762      	b.n	27818 <__aeabi_ddiv+0x48>
   27952:	2a03      	cmp	r2, #3
   27954:	d100      	bne.n	27958 <__aeabi_ddiv+0x188>
   27956:	e25c      	b.n	27e12 <__aeabi_ddiv+0x642>
   27958:	9b01      	ldr	r3, [sp, #4]
   2795a:	2a01      	cmp	r2, #1
   2795c:	d000      	beq.n	27960 <__aeabi_ddiv+0x190>
   2795e:	e1e4      	b.n	27d2a <__aeabi_ddiv+0x55a>
   27960:	4013      	ands	r3, r2
   27962:	469c      	mov	ip, r3
   27964:	2300      	movs	r3, #0
   27966:	2400      	movs	r4, #0
   27968:	2200      	movs	r2, #0
   2796a:	4698      	mov	r8, r3
   2796c:	2100      	movs	r1, #0
   2796e:	0312      	lsls	r2, r2, #12
   27970:	0b13      	lsrs	r3, r2, #12
   27972:	0d0a      	lsrs	r2, r1, #20
   27974:	0512      	lsls	r2, r2, #20
   27976:	431a      	orrs	r2, r3
   27978:	0523      	lsls	r3, r4, #20
   2797a:	4c12      	ldr	r4, [pc, #72]	; (279c4 <__aeabi_ddiv+0x1f4>)
   2797c:	4640      	mov	r0, r8
   2797e:	4022      	ands	r2, r4
   27980:	4313      	orrs	r3, r2
   27982:	4662      	mov	r2, ip
   27984:	005b      	lsls	r3, r3, #1
   27986:	07d2      	lsls	r2, r2, #31
   27988:	085b      	lsrs	r3, r3, #1
   2798a:	4313      	orrs	r3, r2
   2798c:	0019      	movs	r1, r3
   2798e:	b007      	add	sp, #28
   27990:	bc3c      	pop	{r2, r3, r4, r5}
   27992:	4690      	mov	r8, r2
   27994:	4699      	mov	r9, r3
   27996:	46a2      	mov	sl, r4
   27998:	46ab      	mov	fp, r5
   2799a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2799c:	2300      	movs	r3, #0
   2799e:	2280      	movs	r2, #128	; 0x80
   279a0:	469c      	mov	ip, r3
   279a2:	0312      	lsls	r2, r2, #12
   279a4:	4698      	mov	r8, r3
   279a6:	4c03      	ldr	r4, [pc, #12]	; (279b4 <__aeabi_ddiv+0x1e4>)
   279a8:	e7e0      	b.n	2796c <__aeabi_ddiv+0x19c>
   279aa:	2300      	movs	r3, #0
   279ac:	4c01      	ldr	r4, [pc, #4]	; (279b4 <__aeabi_ddiv+0x1e4>)
   279ae:	2200      	movs	r2, #0
   279b0:	4698      	mov	r8, r3
   279b2:	e7db      	b.n	2796c <__aeabi_ddiv+0x19c>
   279b4:	000007ff 	.word	0x000007ff
   279b8:	fffffc01 	.word	0xfffffc01
   279bc:	0002aeb8 	.word	0x0002aeb8
   279c0:	fffffc0d 	.word	0xfffffc0d
   279c4:	800fffff 	.word	0x800fffff
   279c8:	45d9      	cmp	r9, fp
   279ca:	d900      	bls.n	279ce <__aeabi_ddiv+0x1fe>
   279cc:	e139      	b.n	27c42 <__aeabi_ddiv+0x472>
   279ce:	d100      	bne.n	279d2 <__aeabi_ddiv+0x202>
   279d0:	e134      	b.n	27c3c <__aeabi_ddiv+0x46c>
   279d2:	2300      	movs	r3, #0
   279d4:	4646      	mov	r6, r8
   279d6:	464d      	mov	r5, r9
   279d8:	469a      	mov	sl, r3
   279da:	3c01      	subs	r4, #1
   279dc:	465b      	mov	r3, fp
   279de:	0e0a      	lsrs	r2, r1, #24
   279e0:	021b      	lsls	r3, r3, #8
   279e2:	431a      	orrs	r2, r3
   279e4:	020b      	lsls	r3, r1, #8
   279e6:	0c17      	lsrs	r7, r2, #16
   279e8:	9303      	str	r3, [sp, #12]
   279ea:	0413      	lsls	r3, r2, #16
   279ec:	0c1b      	lsrs	r3, r3, #16
   279ee:	0039      	movs	r1, r7
   279f0:	0028      	movs	r0, r5
   279f2:	4690      	mov	r8, r2
   279f4:	9301      	str	r3, [sp, #4]
   279f6:	f7fe fe01 	bl	265fc <__udivsi3>
   279fa:	0002      	movs	r2, r0
   279fc:	9b01      	ldr	r3, [sp, #4]
   279fe:	4683      	mov	fp, r0
   27a00:	435a      	muls	r2, r3
   27a02:	0028      	movs	r0, r5
   27a04:	0039      	movs	r1, r7
   27a06:	4691      	mov	r9, r2
   27a08:	f7fe fe7e 	bl	26708 <__aeabi_uidivmod>
   27a0c:	0c35      	lsrs	r5, r6, #16
   27a0e:	0409      	lsls	r1, r1, #16
   27a10:	430d      	orrs	r5, r1
   27a12:	45a9      	cmp	r9, r5
   27a14:	d90d      	bls.n	27a32 <__aeabi_ddiv+0x262>
   27a16:	465b      	mov	r3, fp
   27a18:	4445      	add	r5, r8
   27a1a:	3b01      	subs	r3, #1
   27a1c:	45a8      	cmp	r8, r5
   27a1e:	d900      	bls.n	27a22 <__aeabi_ddiv+0x252>
   27a20:	e13a      	b.n	27c98 <__aeabi_ddiv+0x4c8>
   27a22:	45a9      	cmp	r9, r5
   27a24:	d800      	bhi.n	27a28 <__aeabi_ddiv+0x258>
   27a26:	e137      	b.n	27c98 <__aeabi_ddiv+0x4c8>
   27a28:	2302      	movs	r3, #2
   27a2a:	425b      	negs	r3, r3
   27a2c:	469c      	mov	ip, r3
   27a2e:	4445      	add	r5, r8
   27a30:	44e3      	add	fp, ip
   27a32:	464b      	mov	r3, r9
   27a34:	1aeb      	subs	r3, r5, r3
   27a36:	0039      	movs	r1, r7
   27a38:	0018      	movs	r0, r3
   27a3a:	9304      	str	r3, [sp, #16]
   27a3c:	f7fe fdde 	bl	265fc <__udivsi3>
   27a40:	9b01      	ldr	r3, [sp, #4]
   27a42:	0005      	movs	r5, r0
   27a44:	4343      	muls	r3, r0
   27a46:	0039      	movs	r1, r7
   27a48:	9804      	ldr	r0, [sp, #16]
   27a4a:	4699      	mov	r9, r3
   27a4c:	f7fe fe5c 	bl	26708 <__aeabi_uidivmod>
   27a50:	0433      	lsls	r3, r6, #16
   27a52:	0409      	lsls	r1, r1, #16
   27a54:	0c1b      	lsrs	r3, r3, #16
   27a56:	430b      	orrs	r3, r1
   27a58:	4599      	cmp	r9, r3
   27a5a:	d909      	bls.n	27a70 <__aeabi_ddiv+0x2a0>
   27a5c:	4443      	add	r3, r8
   27a5e:	1e6a      	subs	r2, r5, #1
   27a60:	4598      	cmp	r8, r3
   27a62:	d900      	bls.n	27a66 <__aeabi_ddiv+0x296>
   27a64:	e11a      	b.n	27c9c <__aeabi_ddiv+0x4cc>
   27a66:	4599      	cmp	r9, r3
   27a68:	d800      	bhi.n	27a6c <__aeabi_ddiv+0x29c>
   27a6a:	e117      	b.n	27c9c <__aeabi_ddiv+0x4cc>
   27a6c:	3d02      	subs	r5, #2
   27a6e:	4443      	add	r3, r8
   27a70:	464a      	mov	r2, r9
   27a72:	1a9b      	subs	r3, r3, r2
   27a74:	465a      	mov	r2, fp
   27a76:	0412      	lsls	r2, r2, #16
   27a78:	432a      	orrs	r2, r5
   27a7a:	9903      	ldr	r1, [sp, #12]
   27a7c:	4693      	mov	fp, r2
   27a7e:	0c10      	lsrs	r0, r2, #16
   27a80:	0c0a      	lsrs	r2, r1, #16
   27a82:	4691      	mov	r9, r2
   27a84:	0409      	lsls	r1, r1, #16
   27a86:	465a      	mov	r2, fp
   27a88:	0c09      	lsrs	r1, r1, #16
   27a8a:	464e      	mov	r6, r9
   27a8c:	000d      	movs	r5, r1
   27a8e:	0412      	lsls	r2, r2, #16
   27a90:	0c12      	lsrs	r2, r2, #16
   27a92:	4345      	muls	r5, r0
   27a94:	9105      	str	r1, [sp, #20]
   27a96:	4351      	muls	r1, r2
   27a98:	4372      	muls	r2, r6
   27a9a:	4370      	muls	r0, r6
   27a9c:	1952      	adds	r2, r2, r5
   27a9e:	0c0e      	lsrs	r6, r1, #16
   27aa0:	18b2      	adds	r2, r6, r2
   27aa2:	4295      	cmp	r5, r2
   27aa4:	d903      	bls.n	27aae <__aeabi_ddiv+0x2de>
   27aa6:	2580      	movs	r5, #128	; 0x80
   27aa8:	026d      	lsls	r5, r5, #9
   27aaa:	46ac      	mov	ip, r5
   27aac:	4460      	add	r0, ip
   27aae:	0c15      	lsrs	r5, r2, #16
   27ab0:	0409      	lsls	r1, r1, #16
   27ab2:	0412      	lsls	r2, r2, #16
   27ab4:	0c09      	lsrs	r1, r1, #16
   27ab6:	1828      	adds	r0, r5, r0
   27ab8:	1852      	adds	r2, r2, r1
   27aba:	4283      	cmp	r3, r0
   27abc:	d200      	bcs.n	27ac0 <__aeabi_ddiv+0x2f0>
   27abe:	e0ce      	b.n	27c5e <__aeabi_ddiv+0x48e>
   27ac0:	d100      	bne.n	27ac4 <__aeabi_ddiv+0x2f4>
   27ac2:	e0c8      	b.n	27c56 <__aeabi_ddiv+0x486>
   27ac4:	1a1d      	subs	r5, r3, r0
   27ac6:	4653      	mov	r3, sl
   27ac8:	1a9e      	subs	r6, r3, r2
   27aca:	45b2      	cmp	sl, r6
   27acc:	4192      	sbcs	r2, r2
   27ace:	4252      	negs	r2, r2
   27ad0:	1aab      	subs	r3, r5, r2
   27ad2:	469a      	mov	sl, r3
   27ad4:	4598      	cmp	r8, r3
   27ad6:	d100      	bne.n	27ada <__aeabi_ddiv+0x30a>
   27ad8:	e117      	b.n	27d0a <__aeabi_ddiv+0x53a>
   27ada:	0039      	movs	r1, r7
   27adc:	0018      	movs	r0, r3
   27ade:	f7fe fd8d 	bl	265fc <__udivsi3>
   27ae2:	9b01      	ldr	r3, [sp, #4]
   27ae4:	0005      	movs	r5, r0
   27ae6:	4343      	muls	r3, r0
   27ae8:	0039      	movs	r1, r7
   27aea:	4650      	mov	r0, sl
   27aec:	9304      	str	r3, [sp, #16]
   27aee:	f7fe fe0b 	bl	26708 <__aeabi_uidivmod>
   27af2:	9804      	ldr	r0, [sp, #16]
   27af4:	040b      	lsls	r3, r1, #16
   27af6:	0c31      	lsrs	r1, r6, #16
   27af8:	4319      	orrs	r1, r3
   27afa:	4288      	cmp	r0, r1
   27afc:	d909      	bls.n	27b12 <__aeabi_ddiv+0x342>
   27afe:	4441      	add	r1, r8
   27b00:	1e6b      	subs	r3, r5, #1
   27b02:	4588      	cmp	r8, r1
   27b04:	d900      	bls.n	27b08 <__aeabi_ddiv+0x338>
   27b06:	e107      	b.n	27d18 <__aeabi_ddiv+0x548>
   27b08:	4288      	cmp	r0, r1
   27b0a:	d800      	bhi.n	27b0e <__aeabi_ddiv+0x33e>
   27b0c:	e104      	b.n	27d18 <__aeabi_ddiv+0x548>
   27b0e:	3d02      	subs	r5, #2
   27b10:	4441      	add	r1, r8
   27b12:	9b04      	ldr	r3, [sp, #16]
   27b14:	1acb      	subs	r3, r1, r3
   27b16:	0018      	movs	r0, r3
   27b18:	0039      	movs	r1, r7
   27b1a:	9304      	str	r3, [sp, #16]
   27b1c:	f7fe fd6e 	bl	265fc <__udivsi3>
   27b20:	9b01      	ldr	r3, [sp, #4]
   27b22:	4682      	mov	sl, r0
   27b24:	4343      	muls	r3, r0
   27b26:	0039      	movs	r1, r7
   27b28:	9804      	ldr	r0, [sp, #16]
   27b2a:	9301      	str	r3, [sp, #4]
   27b2c:	f7fe fdec 	bl	26708 <__aeabi_uidivmod>
   27b30:	9801      	ldr	r0, [sp, #4]
   27b32:	040b      	lsls	r3, r1, #16
   27b34:	0431      	lsls	r1, r6, #16
   27b36:	0c09      	lsrs	r1, r1, #16
   27b38:	4319      	orrs	r1, r3
   27b3a:	4288      	cmp	r0, r1
   27b3c:	d90d      	bls.n	27b5a <__aeabi_ddiv+0x38a>
   27b3e:	4653      	mov	r3, sl
   27b40:	4441      	add	r1, r8
   27b42:	3b01      	subs	r3, #1
   27b44:	4588      	cmp	r8, r1
   27b46:	d900      	bls.n	27b4a <__aeabi_ddiv+0x37a>
   27b48:	e0e8      	b.n	27d1c <__aeabi_ddiv+0x54c>
   27b4a:	4288      	cmp	r0, r1
   27b4c:	d800      	bhi.n	27b50 <__aeabi_ddiv+0x380>
   27b4e:	e0e5      	b.n	27d1c <__aeabi_ddiv+0x54c>
   27b50:	2302      	movs	r3, #2
   27b52:	425b      	negs	r3, r3
   27b54:	469c      	mov	ip, r3
   27b56:	4441      	add	r1, r8
   27b58:	44e2      	add	sl, ip
   27b5a:	9b01      	ldr	r3, [sp, #4]
   27b5c:	042d      	lsls	r5, r5, #16
   27b5e:	1ace      	subs	r6, r1, r3
   27b60:	4651      	mov	r1, sl
   27b62:	4329      	orrs	r1, r5
   27b64:	9d05      	ldr	r5, [sp, #20]
   27b66:	464f      	mov	r7, r9
   27b68:	002a      	movs	r2, r5
   27b6a:	040b      	lsls	r3, r1, #16
   27b6c:	0c08      	lsrs	r0, r1, #16
   27b6e:	0c1b      	lsrs	r3, r3, #16
   27b70:	435a      	muls	r2, r3
   27b72:	4345      	muls	r5, r0
   27b74:	437b      	muls	r3, r7
   27b76:	4378      	muls	r0, r7
   27b78:	195b      	adds	r3, r3, r5
   27b7a:	0c17      	lsrs	r7, r2, #16
   27b7c:	18fb      	adds	r3, r7, r3
   27b7e:	429d      	cmp	r5, r3
   27b80:	d903      	bls.n	27b8a <__aeabi_ddiv+0x3ba>
   27b82:	2580      	movs	r5, #128	; 0x80
   27b84:	026d      	lsls	r5, r5, #9
   27b86:	46ac      	mov	ip, r5
   27b88:	4460      	add	r0, ip
   27b8a:	0c1d      	lsrs	r5, r3, #16
   27b8c:	0412      	lsls	r2, r2, #16
   27b8e:	041b      	lsls	r3, r3, #16
   27b90:	0c12      	lsrs	r2, r2, #16
   27b92:	1828      	adds	r0, r5, r0
   27b94:	189b      	adds	r3, r3, r2
   27b96:	4286      	cmp	r6, r0
   27b98:	d200      	bcs.n	27b9c <__aeabi_ddiv+0x3cc>
   27b9a:	e093      	b.n	27cc4 <__aeabi_ddiv+0x4f4>
   27b9c:	d100      	bne.n	27ba0 <__aeabi_ddiv+0x3d0>
   27b9e:	e08e      	b.n	27cbe <__aeabi_ddiv+0x4ee>
   27ba0:	2301      	movs	r3, #1
   27ba2:	4319      	orrs	r1, r3
   27ba4:	4ba0      	ldr	r3, [pc, #640]	; (27e28 <__aeabi_ddiv+0x658>)
   27ba6:	18e3      	adds	r3, r4, r3
   27ba8:	2b00      	cmp	r3, #0
   27baa:	dc00      	bgt.n	27bae <__aeabi_ddiv+0x3de>
   27bac:	e099      	b.n	27ce2 <__aeabi_ddiv+0x512>
   27bae:	074a      	lsls	r2, r1, #29
   27bb0:	d000      	beq.n	27bb4 <__aeabi_ddiv+0x3e4>
   27bb2:	e09e      	b.n	27cf2 <__aeabi_ddiv+0x522>
   27bb4:	465a      	mov	r2, fp
   27bb6:	01d2      	lsls	r2, r2, #7
   27bb8:	d506      	bpl.n	27bc8 <__aeabi_ddiv+0x3f8>
   27bba:	465a      	mov	r2, fp
   27bbc:	4b9b      	ldr	r3, [pc, #620]	; (27e2c <__aeabi_ddiv+0x65c>)
   27bbe:	401a      	ands	r2, r3
   27bc0:	2380      	movs	r3, #128	; 0x80
   27bc2:	4693      	mov	fp, r2
   27bc4:	00db      	lsls	r3, r3, #3
   27bc6:	18e3      	adds	r3, r4, r3
   27bc8:	4a99      	ldr	r2, [pc, #612]	; (27e30 <__aeabi_ddiv+0x660>)
   27bca:	4293      	cmp	r3, r2
   27bcc:	dd68      	ble.n	27ca0 <__aeabi_ddiv+0x4d0>
   27bce:	2301      	movs	r3, #1
   27bd0:	9a02      	ldr	r2, [sp, #8]
   27bd2:	4c98      	ldr	r4, [pc, #608]	; (27e34 <__aeabi_ddiv+0x664>)
   27bd4:	401a      	ands	r2, r3
   27bd6:	2300      	movs	r3, #0
   27bd8:	4694      	mov	ip, r2
   27bda:	4698      	mov	r8, r3
   27bdc:	2200      	movs	r2, #0
   27bde:	e6c5      	b.n	2796c <__aeabi_ddiv+0x19c>
   27be0:	2280      	movs	r2, #128	; 0x80
   27be2:	464b      	mov	r3, r9
   27be4:	0312      	lsls	r2, r2, #12
   27be6:	4213      	tst	r3, r2
   27be8:	d00a      	beq.n	27c00 <__aeabi_ddiv+0x430>
   27bea:	465b      	mov	r3, fp
   27bec:	4213      	tst	r3, r2
   27bee:	d106      	bne.n	27bfe <__aeabi_ddiv+0x42e>
   27bf0:	431a      	orrs	r2, r3
   27bf2:	0312      	lsls	r2, r2, #12
   27bf4:	0b12      	lsrs	r2, r2, #12
   27bf6:	46ac      	mov	ip, r5
   27bf8:	4688      	mov	r8, r1
   27bfa:	4c8e      	ldr	r4, [pc, #568]	; (27e34 <__aeabi_ddiv+0x664>)
   27bfc:	e6b6      	b.n	2796c <__aeabi_ddiv+0x19c>
   27bfe:	464b      	mov	r3, r9
   27c00:	431a      	orrs	r2, r3
   27c02:	0312      	lsls	r2, r2, #12
   27c04:	0b12      	lsrs	r2, r2, #12
   27c06:	46bc      	mov	ip, r7
   27c08:	4c8a      	ldr	r4, [pc, #552]	; (27e34 <__aeabi_ddiv+0x664>)
   27c0a:	e6af      	b.n	2796c <__aeabi_ddiv+0x19c>
   27c0c:	0003      	movs	r3, r0
   27c0e:	465a      	mov	r2, fp
   27c10:	3b28      	subs	r3, #40	; 0x28
   27c12:	409a      	lsls	r2, r3
   27c14:	2300      	movs	r3, #0
   27c16:	4691      	mov	r9, r2
   27c18:	4698      	mov	r8, r3
   27c1a:	e657      	b.n	278cc <__aeabi_ddiv+0xfc>
   27c1c:	4658      	mov	r0, fp
   27c1e:	f001 f8c1 	bl	28da4 <__clzsi2>
   27c22:	3020      	adds	r0, #32
   27c24:	e640      	b.n	278a8 <__aeabi_ddiv+0xd8>
   27c26:	0003      	movs	r3, r0
   27c28:	4652      	mov	r2, sl
   27c2a:	3b28      	subs	r3, #40	; 0x28
   27c2c:	409a      	lsls	r2, r3
   27c2e:	2100      	movs	r1, #0
   27c30:	4693      	mov	fp, r2
   27c32:	e677      	b.n	27924 <__aeabi_ddiv+0x154>
   27c34:	f001 f8b6 	bl	28da4 <__clzsi2>
   27c38:	3020      	adds	r0, #32
   27c3a:	e65f      	b.n	278fc <__aeabi_ddiv+0x12c>
   27c3c:	4588      	cmp	r8, r1
   27c3e:	d200      	bcs.n	27c42 <__aeabi_ddiv+0x472>
   27c40:	e6c7      	b.n	279d2 <__aeabi_ddiv+0x202>
   27c42:	464b      	mov	r3, r9
   27c44:	07de      	lsls	r6, r3, #31
   27c46:	085d      	lsrs	r5, r3, #1
   27c48:	4643      	mov	r3, r8
   27c4a:	085b      	lsrs	r3, r3, #1
   27c4c:	431e      	orrs	r6, r3
   27c4e:	4643      	mov	r3, r8
   27c50:	07db      	lsls	r3, r3, #31
   27c52:	469a      	mov	sl, r3
   27c54:	e6c2      	b.n	279dc <__aeabi_ddiv+0x20c>
   27c56:	2500      	movs	r5, #0
   27c58:	4592      	cmp	sl, r2
   27c5a:	d300      	bcc.n	27c5e <__aeabi_ddiv+0x48e>
   27c5c:	e733      	b.n	27ac6 <__aeabi_ddiv+0x2f6>
   27c5e:	9e03      	ldr	r6, [sp, #12]
   27c60:	4659      	mov	r1, fp
   27c62:	46b4      	mov	ip, r6
   27c64:	44e2      	add	sl, ip
   27c66:	45b2      	cmp	sl, r6
   27c68:	41ad      	sbcs	r5, r5
   27c6a:	426d      	negs	r5, r5
   27c6c:	4445      	add	r5, r8
   27c6e:	18eb      	adds	r3, r5, r3
   27c70:	3901      	subs	r1, #1
   27c72:	4598      	cmp	r8, r3
   27c74:	d207      	bcs.n	27c86 <__aeabi_ddiv+0x4b6>
   27c76:	4298      	cmp	r0, r3
   27c78:	d900      	bls.n	27c7c <__aeabi_ddiv+0x4ac>
   27c7a:	e07f      	b.n	27d7c <__aeabi_ddiv+0x5ac>
   27c7c:	d100      	bne.n	27c80 <__aeabi_ddiv+0x4b0>
   27c7e:	e0bc      	b.n	27dfa <__aeabi_ddiv+0x62a>
   27c80:	1a1d      	subs	r5, r3, r0
   27c82:	468b      	mov	fp, r1
   27c84:	e71f      	b.n	27ac6 <__aeabi_ddiv+0x2f6>
   27c86:	4598      	cmp	r8, r3
   27c88:	d1fa      	bne.n	27c80 <__aeabi_ddiv+0x4b0>
   27c8a:	9d03      	ldr	r5, [sp, #12]
   27c8c:	4555      	cmp	r5, sl
   27c8e:	d9f2      	bls.n	27c76 <__aeabi_ddiv+0x4a6>
   27c90:	4643      	mov	r3, r8
   27c92:	468b      	mov	fp, r1
   27c94:	1a1d      	subs	r5, r3, r0
   27c96:	e716      	b.n	27ac6 <__aeabi_ddiv+0x2f6>
   27c98:	469b      	mov	fp, r3
   27c9a:	e6ca      	b.n	27a32 <__aeabi_ddiv+0x262>
   27c9c:	0015      	movs	r5, r2
   27c9e:	e6e7      	b.n	27a70 <__aeabi_ddiv+0x2a0>
   27ca0:	465a      	mov	r2, fp
   27ca2:	08c9      	lsrs	r1, r1, #3
   27ca4:	0752      	lsls	r2, r2, #29
   27ca6:	430a      	orrs	r2, r1
   27ca8:	055b      	lsls	r3, r3, #21
   27caa:	4690      	mov	r8, r2
   27cac:	0d5c      	lsrs	r4, r3, #21
   27cae:	465a      	mov	r2, fp
   27cb0:	2301      	movs	r3, #1
   27cb2:	9902      	ldr	r1, [sp, #8]
   27cb4:	0252      	lsls	r2, r2, #9
   27cb6:	4019      	ands	r1, r3
   27cb8:	0b12      	lsrs	r2, r2, #12
   27cba:	468c      	mov	ip, r1
   27cbc:	e656      	b.n	2796c <__aeabi_ddiv+0x19c>
   27cbe:	2b00      	cmp	r3, #0
   27cc0:	d100      	bne.n	27cc4 <__aeabi_ddiv+0x4f4>
   27cc2:	e76f      	b.n	27ba4 <__aeabi_ddiv+0x3d4>
   27cc4:	4446      	add	r6, r8
   27cc6:	1e4a      	subs	r2, r1, #1
   27cc8:	45b0      	cmp	r8, r6
   27cca:	d929      	bls.n	27d20 <__aeabi_ddiv+0x550>
   27ccc:	0011      	movs	r1, r2
   27cce:	4286      	cmp	r6, r0
   27cd0:	d000      	beq.n	27cd4 <__aeabi_ddiv+0x504>
   27cd2:	e765      	b.n	27ba0 <__aeabi_ddiv+0x3d0>
   27cd4:	9a03      	ldr	r2, [sp, #12]
   27cd6:	4293      	cmp	r3, r2
   27cd8:	d000      	beq.n	27cdc <__aeabi_ddiv+0x50c>
   27cda:	e761      	b.n	27ba0 <__aeabi_ddiv+0x3d0>
   27cdc:	e762      	b.n	27ba4 <__aeabi_ddiv+0x3d4>
   27cde:	2101      	movs	r1, #1
   27ce0:	4249      	negs	r1, r1
   27ce2:	2001      	movs	r0, #1
   27ce4:	1ac2      	subs	r2, r0, r3
   27ce6:	2a38      	cmp	r2, #56	; 0x38
   27ce8:	dd21      	ble.n	27d2e <__aeabi_ddiv+0x55e>
   27cea:	9b02      	ldr	r3, [sp, #8]
   27cec:	4003      	ands	r3, r0
   27cee:	469c      	mov	ip, r3
   27cf0:	e638      	b.n	27964 <__aeabi_ddiv+0x194>
   27cf2:	220f      	movs	r2, #15
   27cf4:	400a      	ands	r2, r1
   27cf6:	2a04      	cmp	r2, #4
   27cf8:	d100      	bne.n	27cfc <__aeabi_ddiv+0x52c>
   27cfa:	e75b      	b.n	27bb4 <__aeabi_ddiv+0x3e4>
   27cfc:	000a      	movs	r2, r1
   27cfe:	1d11      	adds	r1, r2, #4
   27d00:	4291      	cmp	r1, r2
   27d02:	4192      	sbcs	r2, r2
   27d04:	4252      	negs	r2, r2
   27d06:	4493      	add	fp, r2
   27d08:	e754      	b.n	27bb4 <__aeabi_ddiv+0x3e4>
   27d0a:	4b47      	ldr	r3, [pc, #284]	; (27e28 <__aeabi_ddiv+0x658>)
   27d0c:	18e3      	adds	r3, r4, r3
   27d0e:	2b00      	cmp	r3, #0
   27d10:	dde5      	ble.n	27cde <__aeabi_ddiv+0x50e>
   27d12:	2201      	movs	r2, #1
   27d14:	4252      	negs	r2, r2
   27d16:	e7f2      	b.n	27cfe <__aeabi_ddiv+0x52e>
   27d18:	001d      	movs	r5, r3
   27d1a:	e6fa      	b.n	27b12 <__aeabi_ddiv+0x342>
   27d1c:	469a      	mov	sl, r3
   27d1e:	e71c      	b.n	27b5a <__aeabi_ddiv+0x38a>
   27d20:	42b0      	cmp	r0, r6
   27d22:	d839      	bhi.n	27d98 <__aeabi_ddiv+0x5c8>
   27d24:	d06e      	beq.n	27e04 <__aeabi_ddiv+0x634>
   27d26:	0011      	movs	r1, r2
   27d28:	e73a      	b.n	27ba0 <__aeabi_ddiv+0x3d0>
   27d2a:	9302      	str	r3, [sp, #8]
   27d2c:	e73a      	b.n	27ba4 <__aeabi_ddiv+0x3d4>
   27d2e:	2a1f      	cmp	r2, #31
   27d30:	dc3c      	bgt.n	27dac <__aeabi_ddiv+0x5dc>
   27d32:	2320      	movs	r3, #32
   27d34:	1a9b      	subs	r3, r3, r2
   27d36:	000c      	movs	r4, r1
   27d38:	4658      	mov	r0, fp
   27d3a:	4099      	lsls	r1, r3
   27d3c:	4098      	lsls	r0, r3
   27d3e:	1e4b      	subs	r3, r1, #1
   27d40:	4199      	sbcs	r1, r3
   27d42:	465b      	mov	r3, fp
   27d44:	40d4      	lsrs	r4, r2
   27d46:	40d3      	lsrs	r3, r2
   27d48:	4320      	orrs	r0, r4
   27d4a:	4308      	orrs	r0, r1
   27d4c:	001a      	movs	r2, r3
   27d4e:	0743      	lsls	r3, r0, #29
   27d50:	d009      	beq.n	27d66 <__aeabi_ddiv+0x596>
   27d52:	230f      	movs	r3, #15
   27d54:	4003      	ands	r3, r0
   27d56:	2b04      	cmp	r3, #4
   27d58:	d005      	beq.n	27d66 <__aeabi_ddiv+0x596>
   27d5a:	0001      	movs	r1, r0
   27d5c:	1d08      	adds	r0, r1, #4
   27d5e:	4288      	cmp	r0, r1
   27d60:	419b      	sbcs	r3, r3
   27d62:	425b      	negs	r3, r3
   27d64:	18d2      	adds	r2, r2, r3
   27d66:	0213      	lsls	r3, r2, #8
   27d68:	d53a      	bpl.n	27de0 <__aeabi_ddiv+0x610>
   27d6a:	2301      	movs	r3, #1
   27d6c:	9a02      	ldr	r2, [sp, #8]
   27d6e:	2401      	movs	r4, #1
   27d70:	401a      	ands	r2, r3
   27d72:	2300      	movs	r3, #0
   27d74:	4694      	mov	ip, r2
   27d76:	4698      	mov	r8, r3
   27d78:	2200      	movs	r2, #0
   27d7a:	e5f7      	b.n	2796c <__aeabi_ddiv+0x19c>
   27d7c:	2102      	movs	r1, #2
   27d7e:	4249      	negs	r1, r1
   27d80:	468c      	mov	ip, r1
   27d82:	9d03      	ldr	r5, [sp, #12]
   27d84:	44e3      	add	fp, ip
   27d86:	46ac      	mov	ip, r5
   27d88:	44e2      	add	sl, ip
   27d8a:	45aa      	cmp	sl, r5
   27d8c:	41ad      	sbcs	r5, r5
   27d8e:	426d      	negs	r5, r5
   27d90:	4445      	add	r5, r8
   27d92:	18ed      	adds	r5, r5, r3
   27d94:	1a2d      	subs	r5, r5, r0
   27d96:	e696      	b.n	27ac6 <__aeabi_ddiv+0x2f6>
   27d98:	1e8a      	subs	r2, r1, #2
   27d9a:	9903      	ldr	r1, [sp, #12]
   27d9c:	004d      	lsls	r5, r1, #1
   27d9e:	428d      	cmp	r5, r1
   27da0:	4189      	sbcs	r1, r1
   27da2:	4249      	negs	r1, r1
   27da4:	4441      	add	r1, r8
   27da6:	1876      	adds	r6, r6, r1
   27da8:	9503      	str	r5, [sp, #12]
   27daa:	e78f      	b.n	27ccc <__aeabi_ddiv+0x4fc>
   27dac:	201f      	movs	r0, #31
   27dae:	4240      	negs	r0, r0
   27db0:	1ac3      	subs	r3, r0, r3
   27db2:	4658      	mov	r0, fp
   27db4:	40d8      	lsrs	r0, r3
   27db6:	0003      	movs	r3, r0
   27db8:	2a20      	cmp	r2, #32
   27dba:	d028      	beq.n	27e0e <__aeabi_ddiv+0x63e>
   27dbc:	2040      	movs	r0, #64	; 0x40
   27dbe:	465d      	mov	r5, fp
   27dc0:	1a82      	subs	r2, r0, r2
   27dc2:	4095      	lsls	r5, r2
   27dc4:	4329      	orrs	r1, r5
   27dc6:	1e4a      	subs	r2, r1, #1
   27dc8:	4191      	sbcs	r1, r2
   27dca:	4319      	orrs	r1, r3
   27dcc:	2307      	movs	r3, #7
   27dce:	2200      	movs	r2, #0
   27dd0:	400b      	ands	r3, r1
   27dd2:	d009      	beq.n	27de8 <__aeabi_ddiv+0x618>
   27dd4:	230f      	movs	r3, #15
   27dd6:	2200      	movs	r2, #0
   27dd8:	400b      	ands	r3, r1
   27dda:	0008      	movs	r0, r1
   27ddc:	2b04      	cmp	r3, #4
   27dde:	d1bd      	bne.n	27d5c <__aeabi_ddiv+0x58c>
   27de0:	0001      	movs	r1, r0
   27de2:	0753      	lsls	r3, r2, #29
   27de4:	0252      	lsls	r2, r2, #9
   27de6:	0b12      	lsrs	r2, r2, #12
   27de8:	08c9      	lsrs	r1, r1, #3
   27dea:	4319      	orrs	r1, r3
   27dec:	2301      	movs	r3, #1
   27dee:	4688      	mov	r8, r1
   27df0:	9902      	ldr	r1, [sp, #8]
   27df2:	2400      	movs	r4, #0
   27df4:	4019      	ands	r1, r3
   27df6:	468c      	mov	ip, r1
   27df8:	e5b8      	b.n	2796c <__aeabi_ddiv+0x19c>
   27dfa:	4552      	cmp	r2, sl
   27dfc:	d8be      	bhi.n	27d7c <__aeabi_ddiv+0x5ac>
   27dfe:	468b      	mov	fp, r1
   27e00:	2500      	movs	r5, #0
   27e02:	e660      	b.n	27ac6 <__aeabi_ddiv+0x2f6>
   27e04:	9d03      	ldr	r5, [sp, #12]
   27e06:	429d      	cmp	r5, r3
   27e08:	d3c6      	bcc.n	27d98 <__aeabi_ddiv+0x5c8>
   27e0a:	0011      	movs	r1, r2
   27e0c:	e762      	b.n	27cd4 <__aeabi_ddiv+0x504>
   27e0e:	2500      	movs	r5, #0
   27e10:	e7d8      	b.n	27dc4 <__aeabi_ddiv+0x5f4>
   27e12:	2280      	movs	r2, #128	; 0x80
   27e14:	465b      	mov	r3, fp
   27e16:	0312      	lsls	r2, r2, #12
   27e18:	431a      	orrs	r2, r3
   27e1a:	9b01      	ldr	r3, [sp, #4]
   27e1c:	0312      	lsls	r2, r2, #12
   27e1e:	0b12      	lsrs	r2, r2, #12
   27e20:	469c      	mov	ip, r3
   27e22:	4688      	mov	r8, r1
   27e24:	4c03      	ldr	r4, [pc, #12]	; (27e34 <__aeabi_ddiv+0x664>)
   27e26:	e5a1      	b.n	2796c <__aeabi_ddiv+0x19c>
   27e28:	000003ff 	.word	0x000003ff
   27e2c:	feffffff 	.word	0xfeffffff
   27e30:	000007fe 	.word	0x000007fe
   27e34:	000007ff 	.word	0x000007ff

00027e38 <__eqdf2>:
   27e38:	b5f0      	push	{r4, r5, r6, r7, lr}
   27e3a:	464f      	mov	r7, r9
   27e3c:	4646      	mov	r6, r8
   27e3e:	46d6      	mov	lr, sl
   27e40:	005c      	lsls	r4, r3, #1
   27e42:	b5c0      	push	{r6, r7, lr}
   27e44:	031f      	lsls	r7, r3, #12
   27e46:	0fdb      	lsrs	r3, r3, #31
   27e48:	469a      	mov	sl, r3
   27e4a:	4b17      	ldr	r3, [pc, #92]	; (27ea8 <__eqdf2+0x70>)
   27e4c:	030e      	lsls	r6, r1, #12
   27e4e:	004d      	lsls	r5, r1, #1
   27e50:	4684      	mov	ip, r0
   27e52:	4680      	mov	r8, r0
   27e54:	0b36      	lsrs	r6, r6, #12
   27e56:	0d6d      	lsrs	r5, r5, #21
   27e58:	0fc9      	lsrs	r1, r1, #31
   27e5a:	4691      	mov	r9, r2
   27e5c:	0b3f      	lsrs	r7, r7, #12
   27e5e:	0d64      	lsrs	r4, r4, #21
   27e60:	2001      	movs	r0, #1
   27e62:	429d      	cmp	r5, r3
   27e64:	d008      	beq.n	27e78 <__eqdf2+0x40>
   27e66:	429c      	cmp	r4, r3
   27e68:	d001      	beq.n	27e6e <__eqdf2+0x36>
   27e6a:	42a5      	cmp	r5, r4
   27e6c:	d00b      	beq.n	27e86 <__eqdf2+0x4e>
   27e6e:	bc1c      	pop	{r2, r3, r4}
   27e70:	4690      	mov	r8, r2
   27e72:	4699      	mov	r9, r3
   27e74:	46a2      	mov	sl, r4
   27e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27e78:	4663      	mov	r3, ip
   27e7a:	4333      	orrs	r3, r6
   27e7c:	d1f7      	bne.n	27e6e <__eqdf2+0x36>
   27e7e:	42ac      	cmp	r4, r5
   27e80:	d1f5      	bne.n	27e6e <__eqdf2+0x36>
   27e82:	433a      	orrs	r2, r7
   27e84:	d1f3      	bne.n	27e6e <__eqdf2+0x36>
   27e86:	2001      	movs	r0, #1
   27e88:	42be      	cmp	r6, r7
   27e8a:	d1f0      	bne.n	27e6e <__eqdf2+0x36>
   27e8c:	45c8      	cmp	r8, r9
   27e8e:	d1ee      	bne.n	27e6e <__eqdf2+0x36>
   27e90:	4551      	cmp	r1, sl
   27e92:	d007      	beq.n	27ea4 <__eqdf2+0x6c>
   27e94:	2d00      	cmp	r5, #0
   27e96:	d1ea      	bne.n	27e6e <__eqdf2+0x36>
   27e98:	4663      	mov	r3, ip
   27e9a:	431e      	orrs	r6, r3
   27e9c:	0030      	movs	r0, r6
   27e9e:	1e46      	subs	r6, r0, #1
   27ea0:	41b0      	sbcs	r0, r6
   27ea2:	e7e4      	b.n	27e6e <__eqdf2+0x36>
   27ea4:	2000      	movs	r0, #0
   27ea6:	e7e2      	b.n	27e6e <__eqdf2+0x36>
   27ea8:	000007ff 	.word	0x000007ff

00027eac <__gedf2>:
   27eac:	b5f0      	push	{r4, r5, r6, r7, lr}
   27eae:	4645      	mov	r5, r8
   27eb0:	46de      	mov	lr, fp
   27eb2:	4657      	mov	r7, sl
   27eb4:	464e      	mov	r6, r9
   27eb6:	b5e0      	push	{r5, r6, r7, lr}
   27eb8:	031f      	lsls	r7, r3, #12
   27eba:	0b3d      	lsrs	r5, r7, #12
   27ebc:	4f2c      	ldr	r7, [pc, #176]	; (27f70 <__gedf2+0xc4>)
   27ebe:	030e      	lsls	r6, r1, #12
   27ec0:	004c      	lsls	r4, r1, #1
   27ec2:	46ab      	mov	fp, r5
   27ec4:	005d      	lsls	r5, r3, #1
   27ec6:	4684      	mov	ip, r0
   27ec8:	0b36      	lsrs	r6, r6, #12
   27eca:	0d64      	lsrs	r4, r4, #21
   27ecc:	0fc9      	lsrs	r1, r1, #31
   27ece:	4690      	mov	r8, r2
   27ed0:	0d6d      	lsrs	r5, r5, #21
   27ed2:	0fdb      	lsrs	r3, r3, #31
   27ed4:	42bc      	cmp	r4, r7
   27ed6:	d02a      	beq.n	27f2e <__gedf2+0x82>
   27ed8:	4f25      	ldr	r7, [pc, #148]	; (27f70 <__gedf2+0xc4>)
   27eda:	42bd      	cmp	r5, r7
   27edc:	d02d      	beq.n	27f3a <__gedf2+0x8e>
   27ede:	2c00      	cmp	r4, #0
   27ee0:	d10f      	bne.n	27f02 <__gedf2+0x56>
   27ee2:	4330      	orrs	r0, r6
   27ee4:	0007      	movs	r7, r0
   27ee6:	4681      	mov	r9, r0
   27ee8:	4278      	negs	r0, r7
   27eea:	4178      	adcs	r0, r7
   27eec:	b2c0      	uxtb	r0, r0
   27eee:	2d00      	cmp	r5, #0
   27ef0:	d117      	bne.n	27f22 <__gedf2+0x76>
   27ef2:	465f      	mov	r7, fp
   27ef4:	433a      	orrs	r2, r7
   27ef6:	d114      	bne.n	27f22 <__gedf2+0x76>
   27ef8:	464b      	mov	r3, r9
   27efa:	2000      	movs	r0, #0
   27efc:	2b00      	cmp	r3, #0
   27efe:	d00a      	beq.n	27f16 <__gedf2+0x6a>
   27f00:	e006      	b.n	27f10 <__gedf2+0x64>
   27f02:	2d00      	cmp	r5, #0
   27f04:	d102      	bne.n	27f0c <__gedf2+0x60>
   27f06:	4658      	mov	r0, fp
   27f08:	4302      	orrs	r2, r0
   27f0a:	d001      	beq.n	27f10 <__gedf2+0x64>
   27f0c:	4299      	cmp	r1, r3
   27f0e:	d018      	beq.n	27f42 <__gedf2+0x96>
   27f10:	4248      	negs	r0, r1
   27f12:	2101      	movs	r1, #1
   27f14:	4308      	orrs	r0, r1
   27f16:	bc3c      	pop	{r2, r3, r4, r5}
   27f18:	4690      	mov	r8, r2
   27f1a:	4699      	mov	r9, r3
   27f1c:	46a2      	mov	sl, r4
   27f1e:	46ab      	mov	fp, r5
   27f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27f22:	2800      	cmp	r0, #0
   27f24:	d0f2      	beq.n	27f0c <__gedf2+0x60>
   27f26:	2001      	movs	r0, #1
   27f28:	3b01      	subs	r3, #1
   27f2a:	4318      	orrs	r0, r3
   27f2c:	e7f3      	b.n	27f16 <__gedf2+0x6a>
   27f2e:	0037      	movs	r7, r6
   27f30:	4307      	orrs	r7, r0
   27f32:	d0d1      	beq.n	27ed8 <__gedf2+0x2c>
   27f34:	2002      	movs	r0, #2
   27f36:	4240      	negs	r0, r0
   27f38:	e7ed      	b.n	27f16 <__gedf2+0x6a>
   27f3a:	465f      	mov	r7, fp
   27f3c:	4317      	orrs	r7, r2
   27f3e:	d0ce      	beq.n	27ede <__gedf2+0x32>
   27f40:	e7f8      	b.n	27f34 <__gedf2+0x88>
   27f42:	42ac      	cmp	r4, r5
   27f44:	dce4      	bgt.n	27f10 <__gedf2+0x64>
   27f46:	da03      	bge.n	27f50 <__gedf2+0xa4>
   27f48:	1e48      	subs	r0, r1, #1
   27f4a:	2101      	movs	r1, #1
   27f4c:	4308      	orrs	r0, r1
   27f4e:	e7e2      	b.n	27f16 <__gedf2+0x6a>
   27f50:	455e      	cmp	r6, fp
   27f52:	d8dd      	bhi.n	27f10 <__gedf2+0x64>
   27f54:	d006      	beq.n	27f64 <__gedf2+0xb8>
   27f56:	2000      	movs	r0, #0
   27f58:	455e      	cmp	r6, fp
   27f5a:	d2dc      	bcs.n	27f16 <__gedf2+0x6a>
   27f5c:	2301      	movs	r3, #1
   27f5e:	1e48      	subs	r0, r1, #1
   27f60:	4318      	orrs	r0, r3
   27f62:	e7d8      	b.n	27f16 <__gedf2+0x6a>
   27f64:	45c4      	cmp	ip, r8
   27f66:	d8d3      	bhi.n	27f10 <__gedf2+0x64>
   27f68:	2000      	movs	r0, #0
   27f6a:	45c4      	cmp	ip, r8
   27f6c:	d3f6      	bcc.n	27f5c <__gedf2+0xb0>
   27f6e:	e7d2      	b.n	27f16 <__gedf2+0x6a>
   27f70:	000007ff 	.word	0x000007ff

00027f74 <__ledf2>:
   27f74:	b5f0      	push	{r4, r5, r6, r7, lr}
   27f76:	464e      	mov	r6, r9
   27f78:	4645      	mov	r5, r8
   27f7a:	46de      	mov	lr, fp
   27f7c:	4657      	mov	r7, sl
   27f7e:	005c      	lsls	r4, r3, #1
   27f80:	b5e0      	push	{r5, r6, r7, lr}
   27f82:	031f      	lsls	r7, r3, #12
   27f84:	0fdb      	lsrs	r3, r3, #31
   27f86:	4699      	mov	r9, r3
   27f88:	4b2a      	ldr	r3, [pc, #168]	; (28034 <__ledf2+0xc0>)
   27f8a:	030e      	lsls	r6, r1, #12
   27f8c:	004d      	lsls	r5, r1, #1
   27f8e:	0fc9      	lsrs	r1, r1, #31
   27f90:	4684      	mov	ip, r0
   27f92:	0b36      	lsrs	r6, r6, #12
   27f94:	0d6d      	lsrs	r5, r5, #21
   27f96:	468b      	mov	fp, r1
   27f98:	4690      	mov	r8, r2
   27f9a:	0b3f      	lsrs	r7, r7, #12
   27f9c:	0d64      	lsrs	r4, r4, #21
   27f9e:	429d      	cmp	r5, r3
   27fa0:	d020      	beq.n	27fe4 <__ledf2+0x70>
   27fa2:	4b24      	ldr	r3, [pc, #144]	; (28034 <__ledf2+0xc0>)
   27fa4:	429c      	cmp	r4, r3
   27fa6:	d022      	beq.n	27fee <__ledf2+0x7a>
   27fa8:	2d00      	cmp	r5, #0
   27faa:	d112      	bne.n	27fd2 <__ledf2+0x5e>
   27fac:	4330      	orrs	r0, r6
   27fae:	4243      	negs	r3, r0
   27fb0:	4143      	adcs	r3, r0
   27fb2:	b2db      	uxtb	r3, r3
   27fb4:	2c00      	cmp	r4, #0
   27fb6:	d01f      	beq.n	27ff8 <__ledf2+0x84>
   27fb8:	2b00      	cmp	r3, #0
   27fba:	d00c      	beq.n	27fd6 <__ledf2+0x62>
   27fbc:	464b      	mov	r3, r9
   27fbe:	2001      	movs	r0, #1
   27fc0:	3b01      	subs	r3, #1
   27fc2:	4303      	orrs	r3, r0
   27fc4:	0018      	movs	r0, r3
   27fc6:	bc3c      	pop	{r2, r3, r4, r5}
   27fc8:	4690      	mov	r8, r2
   27fca:	4699      	mov	r9, r3
   27fcc:	46a2      	mov	sl, r4
   27fce:	46ab      	mov	fp, r5
   27fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27fd2:	2c00      	cmp	r4, #0
   27fd4:	d016      	beq.n	28004 <__ledf2+0x90>
   27fd6:	45cb      	cmp	fp, r9
   27fd8:	d017      	beq.n	2800a <__ledf2+0x96>
   27fda:	465b      	mov	r3, fp
   27fdc:	4259      	negs	r1, r3
   27fde:	2301      	movs	r3, #1
   27fe0:	430b      	orrs	r3, r1
   27fe2:	e7ef      	b.n	27fc4 <__ledf2+0x50>
   27fe4:	0031      	movs	r1, r6
   27fe6:	2302      	movs	r3, #2
   27fe8:	4301      	orrs	r1, r0
   27fea:	d1eb      	bne.n	27fc4 <__ledf2+0x50>
   27fec:	e7d9      	b.n	27fa2 <__ledf2+0x2e>
   27fee:	0039      	movs	r1, r7
   27ff0:	2302      	movs	r3, #2
   27ff2:	4311      	orrs	r1, r2
   27ff4:	d1e6      	bne.n	27fc4 <__ledf2+0x50>
   27ff6:	e7d7      	b.n	27fa8 <__ledf2+0x34>
   27ff8:	433a      	orrs	r2, r7
   27ffa:	d1dd      	bne.n	27fb8 <__ledf2+0x44>
   27ffc:	2300      	movs	r3, #0
   27ffe:	2800      	cmp	r0, #0
   28000:	d0e0      	beq.n	27fc4 <__ledf2+0x50>
   28002:	e7ea      	b.n	27fda <__ledf2+0x66>
   28004:	433a      	orrs	r2, r7
   28006:	d1e6      	bne.n	27fd6 <__ledf2+0x62>
   28008:	e7e7      	b.n	27fda <__ledf2+0x66>
   2800a:	42a5      	cmp	r5, r4
   2800c:	dce5      	bgt.n	27fda <__ledf2+0x66>
   2800e:	db05      	blt.n	2801c <__ledf2+0xa8>
   28010:	42be      	cmp	r6, r7
   28012:	d8e2      	bhi.n	27fda <__ledf2+0x66>
   28014:	d007      	beq.n	28026 <__ledf2+0xb2>
   28016:	2300      	movs	r3, #0
   28018:	42be      	cmp	r6, r7
   2801a:	d2d3      	bcs.n	27fc4 <__ledf2+0x50>
   2801c:	4659      	mov	r1, fp
   2801e:	2301      	movs	r3, #1
   28020:	3901      	subs	r1, #1
   28022:	430b      	orrs	r3, r1
   28024:	e7ce      	b.n	27fc4 <__ledf2+0x50>
   28026:	45c4      	cmp	ip, r8
   28028:	d8d7      	bhi.n	27fda <__ledf2+0x66>
   2802a:	2300      	movs	r3, #0
   2802c:	45c4      	cmp	ip, r8
   2802e:	d3f5      	bcc.n	2801c <__ledf2+0xa8>
   28030:	e7c8      	b.n	27fc4 <__ledf2+0x50>
   28032:	46c0      	nop			; (mov r8, r8)
   28034:	000007ff 	.word	0x000007ff

00028038 <__aeabi_dmul>:
   28038:	b5f0      	push	{r4, r5, r6, r7, lr}
   2803a:	4657      	mov	r7, sl
   2803c:	4645      	mov	r5, r8
   2803e:	46de      	mov	lr, fp
   28040:	464e      	mov	r6, r9
   28042:	b5e0      	push	{r5, r6, r7, lr}
   28044:	030c      	lsls	r4, r1, #12
   28046:	4698      	mov	r8, r3
   28048:	004e      	lsls	r6, r1, #1
   2804a:	0b23      	lsrs	r3, r4, #12
   2804c:	b087      	sub	sp, #28
   2804e:	0007      	movs	r7, r0
   28050:	4692      	mov	sl, r2
   28052:	469b      	mov	fp, r3
   28054:	0d76      	lsrs	r6, r6, #21
   28056:	0fcd      	lsrs	r5, r1, #31
   28058:	2e00      	cmp	r6, #0
   2805a:	d06b      	beq.n	28134 <__aeabi_dmul+0xfc>
   2805c:	4b6d      	ldr	r3, [pc, #436]	; (28214 <__aeabi_dmul+0x1dc>)
   2805e:	429e      	cmp	r6, r3
   28060:	d035      	beq.n	280ce <__aeabi_dmul+0x96>
   28062:	2480      	movs	r4, #128	; 0x80
   28064:	465b      	mov	r3, fp
   28066:	0f42      	lsrs	r2, r0, #29
   28068:	0424      	lsls	r4, r4, #16
   2806a:	00db      	lsls	r3, r3, #3
   2806c:	4314      	orrs	r4, r2
   2806e:	431c      	orrs	r4, r3
   28070:	00c3      	lsls	r3, r0, #3
   28072:	4699      	mov	r9, r3
   28074:	4b68      	ldr	r3, [pc, #416]	; (28218 <__aeabi_dmul+0x1e0>)
   28076:	46a3      	mov	fp, r4
   28078:	469c      	mov	ip, r3
   2807a:	2300      	movs	r3, #0
   2807c:	2700      	movs	r7, #0
   2807e:	4466      	add	r6, ip
   28080:	9302      	str	r3, [sp, #8]
   28082:	4643      	mov	r3, r8
   28084:	031c      	lsls	r4, r3, #12
   28086:	005a      	lsls	r2, r3, #1
   28088:	0fdb      	lsrs	r3, r3, #31
   2808a:	4650      	mov	r0, sl
   2808c:	0b24      	lsrs	r4, r4, #12
   2808e:	0d52      	lsrs	r2, r2, #21
   28090:	4698      	mov	r8, r3
   28092:	d100      	bne.n	28096 <__aeabi_dmul+0x5e>
   28094:	e076      	b.n	28184 <__aeabi_dmul+0x14c>
   28096:	4b5f      	ldr	r3, [pc, #380]	; (28214 <__aeabi_dmul+0x1dc>)
   28098:	429a      	cmp	r2, r3
   2809a:	d06d      	beq.n	28178 <__aeabi_dmul+0x140>
   2809c:	2380      	movs	r3, #128	; 0x80
   2809e:	0f41      	lsrs	r1, r0, #29
   280a0:	041b      	lsls	r3, r3, #16
   280a2:	430b      	orrs	r3, r1
   280a4:	495c      	ldr	r1, [pc, #368]	; (28218 <__aeabi_dmul+0x1e0>)
   280a6:	00e4      	lsls	r4, r4, #3
   280a8:	468c      	mov	ip, r1
   280aa:	431c      	orrs	r4, r3
   280ac:	00c3      	lsls	r3, r0, #3
   280ae:	2000      	movs	r0, #0
   280b0:	4462      	add	r2, ip
   280b2:	4641      	mov	r1, r8
   280b4:	18b6      	adds	r6, r6, r2
   280b6:	4069      	eors	r1, r5
   280b8:	1c72      	adds	r2, r6, #1
   280ba:	9101      	str	r1, [sp, #4]
   280bc:	4694      	mov	ip, r2
   280be:	4307      	orrs	r7, r0
   280c0:	2f0f      	cmp	r7, #15
   280c2:	d900      	bls.n	280c6 <__aeabi_dmul+0x8e>
   280c4:	e0b0      	b.n	28228 <__aeabi_dmul+0x1f0>
   280c6:	4a55      	ldr	r2, [pc, #340]	; (2821c <__aeabi_dmul+0x1e4>)
   280c8:	00bf      	lsls	r7, r7, #2
   280ca:	59d2      	ldr	r2, [r2, r7]
   280cc:	4697      	mov	pc, r2
   280ce:	465b      	mov	r3, fp
   280d0:	4303      	orrs	r3, r0
   280d2:	4699      	mov	r9, r3
   280d4:	d000      	beq.n	280d8 <__aeabi_dmul+0xa0>
   280d6:	e087      	b.n	281e8 <__aeabi_dmul+0x1b0>
   280d8:	2300      	movs	r3, #0
   280da:	469b      	mov	fp, r3
   280dc:	3302      	adds	r3, #2
   280de:	2708      	movs	r7, #8
   280e0:	9302      	str	r3, [sp, #8]
   280e2:	e7ce      	b.n	28082 <__aeabi_dmul+0x4a>
   280e4:	4642      	mov	r2, r8
   280e6:	9201      	str	r2, [sp, #4]
   280e8:	2802      	cmp	r0, #2
   280ea:	d067      	beq.n	281bc <__aeabi_dmul+0x184>
   280ec:	2803      	cmp	r0, #3
   280ee:	d100      	bne.n	280f2 <__aeabi_dmul+0xba>
   280f0:	e20e      	b.n	28510 <__aeabi_dmul+0x4d8>
   280f2:	2801      	cmp	r0, #1
   280f4:	d000      	beq.n	280f8 <__aeabi_dmul+0xc0>
   280f6:	e162      	b.n	283be <__aeabi_dmul+0x386>
   280f8:	2300      	movs	r3, #0
   280fa:	2400      	movs	r4, #0
   280fc:	2200      	movs	r2, #0
   280fe:	4699      	mov	r9, r3
   28100:	9901      	ldr	r1, [sp, #4]
   28102:	4001      	ands	r1, r0
   28104:	b2cd      	uxtb	r5, r1
   28106:	2100      	movs	r1, #0
   28108:	0312      	lsls	r2, r2, #12
   2810a:	0d0b      	lsrs	r3, r1, #20
   2810c:	0b12      	lsrs	r2, r2, #12
   2810e:	051b      	lsls	r3, r3, #20
   28110:	4313      	orrs	r3, r2
   28112:	4a43      	ldr	r2, [pc, #268]	; (28220 <__aeabi_dmul+0x1e8>)
   28114:	0524      	lsls	r4, r4, #20
   28116:	4013      	ands	r3, r2
   28118:	431c      	orrs	r4, r3
   2811a:	0064      	lsls	r4, r4, #1
   2811c:	07ed      	lsls	r5, r5, #31
   2811e:	0864      	lsrs	r4, r4, #1
   28120:	432c      	orrs	r4, r5
   28122:	4648      	mov	r0, r9
   28124:	0021      	movs	r1, r4
   28126:	b007      	add	sp, #28
   28128:	bc3c      	pop	{r2, r3, r4, r5}
   2812a:	4690      	mov	r8, r2
   2812c:	4699      	mov	r9, r3
   2812e:	46a2      	mov	sl, r4
   28130:	46ab      	mov	fp, r5
   28132:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28134:	4303      	orrs	r3, r0
   28136:	4699      	mov	r9, r3
   28138:	d04f      	beq.n	281da <__aeabi_dmul+0x1a2>
   2813a:	465b      	mov	r3, fp
   2813c:	2b00      	cmp	r3, #0
   2813e:	d100      	bne.n	28142 <__aeabi_dmul+0x10a>
   28140:	e189      	b.n	28456 <__aeabi_dmul+0x41e>
   28142:	4658      	mov	r0, fp
   28144:	f000 fe2e 	bl	28da4 <__clzsi2>
   28148:	0003      	movs	r3, r0
   2814a:	3b0b      	subs	r3, #11
   2814c:	2b1c      	cmp	r3, #28
   2814e:	dd00      	ble.n	28152 <__aeabi_dmul+0x11a>
   28150:	e17a      	b.n	28448 <__aeabi_dmul+0x410>
   28152:	221d      	movs	r2, #29
   28154:	1ad3      	subs	r3, r2, r3
   28156:	003a      	movs	r2, r7
   28158:	0001      	movs	r1, r0
   2815a:	465c      	mov	r4, fp
   2815c:	40da      	lsrs	r2, r3
   2815e:	3908      	subs	r1, #8
   28160:	408c      	lsls	r4, r1
   28162:	0013      	movs	r3, r2
   28164:	408f      	lsls	r7, r1
   28166:	4323      	orrs	r3, r4
   28168:	469b      	mov	fp, r3
   2816a:	46b9      	mov	r9, r7
   2816c:	2300      	movs	r3, #0
   2816e:	4e2d      	ldr	r6, [pc, #180]	; (28224 <__aeabi_dmul+0x1ec>)
   28170:	2700      	movs	r7, #0
   28172:	1a36      	subs	r6, r6, r0
   28174:	9302      	str	r3, [sp, #8]
   28176:	e784      	b.n	28082 <__aeabi_dmul+0x4a>
   28178:	4653      	mov	r3, sl
   2817a:	4323      	orrs	r3, r4
   2817c:	d12a      	bne.n	281d4 <__aeabi_dmul+0x19c>
   2817e:	2400      	movs	r4, #0
   28180:	2002      	movs	r0, #2
   28182:	e796      	b.n	280b2 <__aeabi_dmul+0x7a>
   28184:	4653      	mov	r3, sl
   28186:	4323      	orrs	r3, r4
   28188:	d020      	beq.n	281cc <__aeabi_dmul+0x194>
   2818a:	2c00      	cmp	r4, #0
   2818c:	d100      	bne.n	28190 <__aeabi_dmul+0x158>
   2818e:	e157      	b.n	28440 <__aeabi_dmul+0x408>
   28190:	0020      	movs	r0, r4
   28192:	f000 fe07 	bl	28da4 <__clzsi2>
   28196:	0003      	movs	r3, r0
   28198:	3b0b      	subs	r3, #11
   2819a:	2b1c      	cmp	r3, #28
   2819c:	dd00      	ble.n	281a0 <__aeabi_dmul+0x168>
   2819e:	e149      	b.n	28434 <__aeabi_dmul+0x3fc>
   281a0:	211d      	movs	r1, #29
   281a2:	1acb      	subs	r3, r1, r3
   281a4:	4651      	mov	r1, sl
   281a6:	0002      	movs	r2, r0
   281a8:	40d9      	lsrs	r1, r3
   281aa:	4653      	mov	r3, sl
   281ac:	3a08      	subs	r2, #8
   281ae:	4094      	lsls	r4, r2
   281b0:	4093      	lsls	r3, r2
   281b2:	430c      	orrs	r4, r1
   281b4:	4a1b      	ldr	r2, [pc, #108]	; (28224 <__aeabi_dmul+0x1ec>)
   281b6:	1a12      	subs	r2, r2, r0
   281b8:	2000      	movs	r0, #0
   281ba:	e77a      	b.n	280b2 <__aeabi_dmul+0x7a>
   281bc:	2501      	movs	r5, #1
   281be:	9b01      	ldr	r3, [sp, #4]
   281c0:	4c14      	ldr	r4, [pc, #80]	; (28214 <__aeabi_dmul+0x1dc>)
   281c2:	401d      	ands	r5, r3
   281c4:	2300      	movs	r3, #0
   281c6:	2200      	movs	r2, #0
   281c8:	4699      	mov	r9, r3
   281ca:	e79c      	b.n	28106 <__aeabi_dmul+0xce>
   281cc:	2400      	movs	r4, #0
   281ce:	2200      	movs	r2, #0
   281d0:	2001      	movs	r0, #1
   281d2:	e76e      	b.n	280b2 <__aeabi_dmul+0x7a>
   281d4:	4653      	mov	r3, sl
   281d6:	2003      	movs	r0, #3
   281d8:	e76b      	b.n	280b2 <__aeabi_dmul+0x7a>
   281da:	2300      	movs	r3, #0
   281dc:	469b      	mov	fp, r3
   281de:	3301      	adds	r3, #1
   281e0:	2704      	movs	r7, #4
   281e2:	2600      	movs	r6, #0
   281e4:	9302      	str	r3, [sp, #8]
   281e6:	e74c      	b.n	28082 <__aeabi_dmul+0x4a>
   281e8:	2303      	movs	r3, #3
   281ea:	4681      	mov	r9, r0
   281ec:	270c      	movs	r7, #12
   281ee:	9302      	str	r3, [sp, #8]
   281f0:	e747      	b.n	28082 <__aeabi_dmul+0x4a>
   281f2:	2280      	movs	r2, #128	; 0x80
   281f4:	2300      	movs	r3, #0
   281f6:	2500      	movs	r5, #0
   281f8:	0312      	lsls	r2, r2, #12
   281fa:	4699      	mov	r9, r3
   281fc:	4c05      	ldr	r4, [pc, #20]	; (28214 <__aeabi_dmul+0x1dc>)
   281fe:	e782      	b.n	28106 <__aeabi_dmul+0xce>
   28200:	465c      	mov	r4, fp
   28202:	464b      	mov	r3, r9
   28204:	9802      	ldr	r0, [sp, #8]
   28206:	e76f      	b.n	280e8 <__aeabi_dmul+0xb0>
   28208:	465c      	mov	r4, fp
   2820a:	464b      	mov	r3, r9
   2820c:	9501      	str	r5, [sp, #4]
   2820e:	9802      	ldr	r0, [sp, #8]
   28210:	e76a      	b.n	280e8 <__aeabi_dmul+0xb0>
   28212:	46c0      	nop			; (mov r8, r8)
   28214:	000007ff 	.word	0x000007ff
   28218:	fffffc01 	.word	0xfffffc01
   2821c:	0002aef8 	.word	0x0002aef8
   28220:	800fffff 	.word	0x800fffff
   28224:	fffffc0d 	.word	0xfffffc0d
   28228:	464a      	mov	r2, r9
   2822a:	4649      	mov	r1, r9
   2822c:	0c17      	lsrs	r7, r2, #16
   2822e:	0c1a      	lsrs	r2, r3, #16
   28230:	041b      	lsls	r3, r3, #16
   28232:	0c1b      	lsrs	r3, r3, #16
   28234:	0408      	lsls	r0, r1, #16
   28236:	0019      	movs	r1, r3
   28238:	0c00      	lsrs	r0, r0, #16
   2823a:	4341      	muls	r1, r0
   2823c:	0015      	movs	r5, r2
   2823e:	4688      	mov	r8, r1
   28240:	0019      	movs	r1, r3
   28242:	437d      	muls	r5, r7
   28244:	4379      	muls	r1, r7
   28246:	9503      	str	r5, [sp, #12]
   28248:	4689      	mov	r9, r1
   2824a:	0029      	movs	r1, r5
   2824c:	0015      	movs	r5, r2
   2824e:	4345      	muls	r5, r0
   28250:	444d      	add	r5, r9
   28252:	9502      	str	r5, [sp, #8]
   28254:	4645      	mov	r5, r8
   28256:	0c2d      	lsrs	r5, r5, #16
   28258:	46aa      	mov	sl, r5
   2825a:	9d02      	ldr	r5, [sp, #8]
   2825c:	4455      	add	r5, sl
   2825e:	45a9      	cmp	r9, r5
   28260:	d906      	bls.n	28270 <__aeabi_dmul+0x238>
   28262:	468a      	mov	sl, r1
   28264:	2180      	movs	r1, #128	; 0x80
   28266:	0249      	lsls	r1, r1, #9
   28268:	4689      	mov	r9, r1
   2826a:	44ca      	add	sl, r9
   2826c:	4651      	mov	r1, sl
   2826e:	9103      	str	r1, [sp, #12]
   28270:	0c29      	lsrs	r1, r5, #16
   28272:	9104      	str	r1, [sp, #16]
   28274:	4641      	mov	r1, r8
   28276:	0409      	lsls	r1, r1, #16
   28278:	042d      	lsls	r5, r5, #16
   2827a:	0c09      	lsrs	r1, r1, #16
   2827c:	4688      	mov	r8, r1
   2827e:	0029      	movs	r1, r5
   28280:	0c25      	lsrs	r5, r4, #16
   28282:	0424      	lsls	r4, r4, #16
   28284:	4441      	add	r1, r8
   28286:	0c24      	lsrs	r4, r4, #16
   28288:	9105      	str	r1, [sp, #20]
   2828a:	0021      	movs	r1, r4
   2828c:	4341      	muls	r1, r0
   2828e:	4688      	mov	r8, r1
   28290:	0021      	movs	r1, r4
   28292:	4379      	muls	r1, r7
   28294:	468a      	mov	sl, r1
   28296:	4368      	muls	r0, r5
   28298:	4641      	mov	r1, r8
   2829a:	4450      	add	r0, sl
   2829c:	4681      	mov	r9, r0
   2829e:	0c08      	lsrs	r0, r1, #16
   282a0:	4448      	add	r0, r9
   282a2:	436f      	muls	r7, r5
   282a4:	4582      	cmp	sl, r0
   282a6:	d903      	bls.n	282b0 <__aeabi_dmul+0x278>
   282a8:	2180      	movs	r1, #128	; 0x80
   282aa:	0249      	lsls	r1, r1, #9
   282ac:	4689      	mov	r9, r1
   282ae:	444f      	add	r7, r9
   282b0:	0c01      	lsrs	r1, r0, #16
   282b2:	4689      	mov	r9, r1
   282b4:	0039      	movs	r1, r7
   282b6:	4449      	add	r1, r9
   282b8:	9102      	str	r1, [sp, #8]
   282ba:	4641      	mov	r1, r8
   282bc:	040f      	lsls	r7, r1, #16
   282be:	9904      	ldr	r1, [sp, #16]
   282c0:	0c3f      	lsrs	r7, r7, #16
   282c2:	4688      	mov	r8, r1
   282c4:	0400      	lsls	r0, r0, #16
   282c6:	19c0      	adds	r0, r0, r7
   282c8:	4480      	add	r8, r0
   282ca:	4641      	mov	r1, r8
   282cc:	9104      	str	r1, [sp, #16]
   282ce:	4659      	mov	r1, fp
   282d0:	0c0f      	lsrs	r7, r1, #16
   282d2:	0409      	lsls	r1, r1, #16
   282d4:	0c09      	lsrs	r1, r1, #16
   282d6:	4688      	mov	r8, r1
   282d8:	4359      	muls	r1, r3
   282da:	468a      	mov	sl, r1
   282dc:	0039      	movs	r1, r7
   282de:	4351      	muls	r1, r2
   282e0:	4689      	mov	r9, r1
   282e2:	4641      	mov	r1, r8
   282e4:	434a      	muls	r2, r1
   282e6:	4651      	mov	r1, sl
   282e8:	0c09      	lsrs	r1, r1, #16
   282ea:	468b      	mov	fp, r1
   282ec:	437b      	muls	r3, r7
   282ee:	18d2      	adds	r2, r2, r3
   282f0:	445a      	add	r2, fp
   282f2:	4293      	cmp	r3, r2
   282f4:	d903      	bls.n	282fe <__aeabi_dmul+0x2c6>
   282f6:	2380      	movs	r3, #128	; 0x80
   282f8:	025b      	lsls	r3, r3, #9
   282fa:	469b      	mov	fp, r3
   282fc:	44d9      	add	r9, fp
   282fe:	4651      	mov	r1, sl
   28300:	0409      	lsls	r1, r1, #16
   28302:	0c09      	lsrs	r1, r1, #16
   28304:	468a      	mov	sl, r1
   28306:	4641      	mov	r1, r8
   28308:	4361      	muls	r1, r4
   2830a:	437c      	muls	r4, r7
   2830c:	0c13      	lsrs	r3, r2, #16
   2830e:	0412      	lsls	r2, r2, #16
   28310:	444b      	add	r3, r9
   28312:	4452      	add	r2, sl
   28314:	46a1      	mov	r9, r4
   28316:	468a      	mov	sl, r1
   28318:	003c      	movs	r4, r7
   2831a:	4641      	mov	r1, r8
   2831c:	436c      	muls	r4, r5
   2831e:	434d      	muls	r5, r1
   28320:	4651      	mov	r1, sl
   28322:	444d      	add	r5, r9
   28324:	0c0f      	lsrs	r7, r1, #16
   28326:	197d      	adds	r5, r7, r5
   28328:	45a9      	cmp	r9, r5
   2832a:	d903      	bls.n	28334 <__aeabi_dmul+0x2fc>
   2832c:	2180      	movs	r1, #128	; 0x80
   2832e:	0249      	lsls	r1, r1, #9
   28330:	4688      	mov	r8, r1
   28332:	4444      	add	r4, r8
   28334:	9f04      	ldr	r7, [sp, #16]
   28336:	9903      	ldr	r1, [sp, #12]
   28338:	46b8      	mov	r8, r7
   2833a:	4441      	add	r1, r8
   2833c:	468b      	mov	fp, r1
   2833e:	4583      	cmp	fp, r0
   28340:	4180      	sbcs	r0, r0
   28342:	4241      	negs	r1, r0
   28344:	4688      	mov	r8, r1
   28346:	4651      	mov	r1, sl
   28348:	0408      	lsls	r0, r1, #16
   2834a:	042f      	lsls	r7, r5, #16
   2834c:	0c00      	lsrs	r0, r0, #16
   2834e:	183f      	adds	r7, r7, r0
   28350:	4658      	mov	r0, fp
   28352:	9902      	ldr	r1, [sp, #8]
   28354:	1810      	adds	r0, r2, r0
   28356:	4689      	mov	r9, r1
   28358:	4290      	cmp	r0, r2
   2835a:	4192      	sbcs	r2, r2
   2835c:	444f      	add	r7, r9
   2835e:	46ba      	mov	sl, r7
   28360:	4252      	negs	r2, r2
   28362:	4699      	mov	r9, r3
   28364:	4693      	mov	fp, r2
   28366:	44c2      	add	sl, r8
   28368:	44d1      	add	r9, sl
   2836a:	44cb      	add	fp, r9
   2836c:	428f      	cmp	r7, r1
   2836e:	41bf      	sbcs	r7, r7
   28370:	45c2      	cmp	sl, r8
   28372:	4189      	sbcs	r1, r1
   28374:	4599      	cmp	r9, r3
   28376:	419b      	sbcs	r3, r3
   28378:	4593      	cmp	fp, r2
   2837a:	4192      	sbcs	r2, r2
   2837c:	427f      	negs	r7, r7
   2837e:	4249      	negs	r1, r1
   28380:	0c2d      	lsrs	r5, r5, #16
   28382:	4252      	negs	r2, r2
   28384:	430f      	orrs	r7, r1
   28386:	425b      	negs	r3, r3
   28388:	4313      	orrs	r3, r2
   2838a:	197f      	adds	r7, r7, r5
   2838c:	18ff      	adds	r7, r7, r3
   2838e:	465b      	mov	r3, fp
   28390:	193c      	adds	r4, r7, r4
   28392:	0ddb      	lsrs	r3, r3, #23
   28394:	9a05      	ldr	r2, [sp, #20]
   28396:	0264      	lsls	r4, r4, #9
   28398:	431c      	orrs	r4, r3
   2839a:	0243      	lsls	r3, r0, #9
   2839c:	4313      	orrs	r3, r2
   2839e:	1e5d      	subs	r5, r3, #1
   283a0:	41ab      	sbcs	r3, r5
   283a2:	465a      	mov	r2, fp
   283a4:	0dc0      	lsrs	r0, r0, #23
   283a6:	4303      	orrs	r3, r0
   283a8:	0252      	lsls	r2, r2, #9
   283aa:	4313      	orrs	r3, r2
   283ac:	01e2      	lsls	r2, r4, #7
   283ae:	d556      	bpl.n	2845e <__aeabi_dmul+0x426>
   283b0:	2001      	movs	r0, #1
   283b2:	085a      	lsrs	r2, r3, #1
   283b4:	4003      	ands	r3, r0
   283b6:	4313      	orrs	r3, r2
   283b8:	07e2      	lsls	r2, r4, #31
   283ba:	4313      	orrs	r3, r2
   283bc:	0864      	lsrs	r4, r4, #1
   283be:	485a      	ldr	r0, [pc, #360]	; (28528 <__aeabi_dmul+0x4f0>)
   283c0:	4460      	add	r0, ip
   283c2:	2800      	cmp	r0, #0
   283c4:	dd4d      	ble.n	28462 <__aeabi_dmul+0x42a>
   283c6:	075a      	lsls	r2, r3, #29
   283c8:	d009      	beq.n	283de <__aeabi_dmul+0x3a6>
   283ca:	220f      	movs	r2, #15
   283cc:	401a      	ands	r2, r3
   283ce:	2a04      	cmp	r2, #4
   283d0:	d005      	beq.n	283de <__aeabi_dmul+0x3a6>
   283d2:	1d1a      	adds	r2, r3, #4
   283d4:	429a      	cmp	r2, r3
   283d6:	419b      	sbcs	r3, r3
   283d8:	425b      	negs	r3, r3
   283da:	18e4      	adds	r4, r4, r3
   283dc:	0013      	movs	r3, r2
   283de:	01e2      	lsls	r2, r4, #7
   283e0:	d504      	bpl.n	283ec <__aeabi_dmul+0x3b4>
   283e2:	2080      	movs	r0, #128	; 0x80
   283e4:	4a51      	ldr	r2, [pc, #324]	; (2852c <__aeabi_dmul+0x4f4>)
   283e6:	00c0      	lsls	r0, r0, #3
   283e8:	4014      	ands	r4, r2
   283ea:	4460      	add	r0, ip
   283ec:	4a50      	ldr	r2, [pc, #320]	; (28530 <__aeabi_dmul+0x4f8>)
   283ee:	4290      	cmp	r0, r2
   283f0:	dd00      	ble.n	283f4 <__aeabi_dmul+0x3bc>
   283f2:	e6e3      	b.n	281bc <__aeabi_dmul+0x184>
   283f4:	2501      	movs	r5, #1
   283f6:	08db      	lsrs	r3, r3, #3
   283f8:	0762      	lsls	r2, r4, #29
   283fa:	431a      	orrs	r2, r3
   283fc:	0264      	lsls	r4, r4, #9
   283fe:	9b01      	ldr	r3, [sp, #4]
   28400:	4691      	mov	r9, r2
   28402:	0b22      	lsrs	r2, r4, #12
   28404:	0544      	lsls	r4, r0, #21
   28406:	0d64      	lsrs	r4, r4, #21
   28408:	401d      	ands	r5, r3
   2840a:	e67c      	b.n	28106 <__aeabi_dmul+0xce>
   2840c:	2280      	movs	r2, #128	; 0x80
   2840e:	4659      	mov	r1, fp
   28410:	0312      	lsls	r2, r2, #12
   28412:	4211      	tst	r1, r2
   28414:	d008      	beq.n	28428 <__aeabi_dmul+0x3f0>
   28416:	4214      	tst	r4, r2
   28418:	d106      	bne.n	28428 <__aeabi_dmul+0x3f0>
   2841a:	4322      	orrs	r2, r4
   2841c:	0312      	lsls	r2, r2, #12
   2841e:	0b12      	lsrs	r2, r2, #12
   28420:	4645      	mov	r5, r8
   28422:	4699      	mov	r9, r3
   28424:	4c43      	ldr	r4, [pc, #268]	; (28534 <__aeabi_dmul+0x4fc>)
   28426:	e66e      	b.n	28106 <__aeabi_dmul+0xce>
   28428:	465b      	mov	r3, fp
   2842a:	431a      	orrs	r2, r3
   2842c:	0312      	lsls	r2, r2, #12
   2842e:	0b12      	lsrs	r2, r2, #12
   28430:	4c40      	ldr	r4, [pc, #256]	; (28534 <__aeabi_dmul+0x4fc>)
   28432:	e668      	b.n	28106 <__aeabi_dmul+0xce>
   28434:	0003      	movs	r3, r0
   28436:	4654      	mov	r4, sl
   28438:	3b28      	subs	r3, #40	; 0x28
   2843a:	409c      	lsls	r4, r3
   2843c:	2300      	movs	r3, #0
   2843e:	e6b9      	b.n	281b4 <__aeabi_dmul+0x17c>
   28440:	f000 fcb0 	bl	28da4 <__clzsi2>
   28444:	3020      	adds	r0, #32
   28446:	e6a6      	b.n	28196 <__aeabi_dmul+0x15e>
   28448:	0003      	movs	r3, r0
   2844a:	3b28      	subs	r3, #40	; 0x28
   2844c:	409f      	lsls	r7, r3
   2844e:	2300      	movs	r3, #0
   28450:	46bb      	mov	fp, r7
   28452:	4699      	mov	r9, r3
   28454:	e68a      	b.n	2816c <__aeabi_dmul+0x134>
   28456:	f000 fca5 	bl	28da4 <__clzsi2>
   2845a:	3020      	adds	r0, #32
   2845c:	e674      	b.n	28148 <__aeabi_dmul+0x110>
   2845e:	46b4      	mov	ip, r6
   28460:	e7ad      	b.n	283be <__aeabi_dmul+0x386>
   28462:	2501      	movs	r5, #1
   28464:	1a2a      	subs	r2, r5, r0
   28466:	2a38      	cmp	r2, #56	; 0x38
   28468:	dd06      	ble.n	28478 <__aeabi_dmul+0x440>
   2846a:	9b01      	ldr	r3, [sp, #4]
   2846c:	2400      	movs	r4, #0
   2846e:	401d      	ands	r5, r3
   28470:	2300      	movs	r3, #0
   28472:	2200      	movs	r2, #0
   28474:	4699      	mov	r9, r3
   28476:	e646      	b.n	28106 <__aeabi_dmul+0xce>
   28478:	2a1f      	cmp	r2, #31
   2847a:	dc21      	bgt.n	284c0 <__aeabi_dmul+0x488>
   2847c:	2520      	movs	r5, #32
   2847e:	0020      	movs	r0, r4
   28480:	1aad      	subs	r5, r5, r2
   28482:	001e      	movs	r6, r3
   28484:	40ab      	lsls	r3, r5
   28486:	40a8      	lsls	r0, r5
   28488:	40d6      	lsrs	r6, r2
   2848a:	1e5d      	subs	r5, r3, #1
   2848c:	41ab      	sbcs	r3, r5
   2848e:	4330      	orrs	r0, r6
   28490:	4318      	orrs	r0, r3
   28492:	40d4      	lsrs	r4, r2
   28494:	0743      	lsls	r3, r0, #29
   28496:	d009      	beq.n	284ac <__aeabi_dmul+0x474>
   28498:	230f      	movs	r3, #15
   2849a:	4003      	ands	r3, r0
   2849c:	2b04      	cmp	r3, #4
   2849e:	d005      	beq.n	284ac <__aeabi_dmul+0x474>
   284a0:	0003      	movs	r3, r0
   284a2:	1d18      	adds	r0, r3, #4
   284a4:	4298      	cmp	r0, r3
   284a6:	419b      	sbcs	r3, r3
   284a8:	425b      	negs	r3, r3
   284aa:	18e4      	adds	r4, r4, r3
   284ac:	0223      	lsls	r3, r4, #8
   284ae:	d521      	bpl.n	284f4 <__aeabi_dmul+0x4bc>
   284b0:	2501      	movs	r5, #1
   284b2:	9b01      	ldr	r3, [sp, #4]
   284b4:	2401      	movs	r4, #1
   284b6:	401d      	ands	r5, r3
   284b8:	2300      	movs	r3, #0
   284ba:	2200      	movs	r2, #0
   284bc:	4699      	mov	r9, r3
   284be:	e622      	b.n	28106 <__aeabi_dmul+0xce>
   284c0:	251f      	movs	r5, #31
   284c2:	0021      	movs	r1, r4
   284c4:	426d      	negs	r5, r5
   284c6:	1a28      	subs	r0, r5, r0
   284c8:	40c1      	lsrs	r1, r0
   284ca:	0008      	movs	r0, r1
   284cc:	2a20      	cmp	r2, #32
   284ce:	d01d      	beq.n	2850c <__aeabi_dmul+0x4d4>
   284d0:	355f      	adds	r5, #95	; 0x5f
   284d2:	1aaa      	subs	r2, r5, r2
   284d4:	4094      	lsls	r4, r2
   284d6:	4323      	orrs	r3, r4
   284d8:	1e5c      	subs	r4, r3, #1
   284da:	41a3      	sbcs	r3, r4
   284dc:	2507      	movs	r5, #7
   284de:	4303      	orrs	r3, r0
   284e0:	401d      	ands	r5, r3
   284e2:	2200      	movs	r2, #0
   284e4:	2d00      	cmp	r5, #0
   284e6:	d009      	beq.n	284fc <__aeabi_dmul+0x4c4>
   284e8:	220f      	movs	r2, #15
   284ea:	2400      	movs	r4, #0
   284ec:	401a      	ands	r2, r3
   284ee:	0018      	movs	r0, r3
   284f0:	2a04      	cmp	r2, #4
   284f2:	d1d6      	bne.n	284a2 <__aeabi_dmul+0x46a>
   284f4:	0003      	movs	r3, r0
   284f6:	0765      	lsls	r5, r4, #29
   284f8:	0264      	lsls	r4, r4, #9
   284fa:	0b22      	lsrs	r2, r4, #12
   284fc:	08db      	lsrs	r3, r3, #3
   284fe:	432b      	orrs	r3, r5
   28500:	2501      	movs	r5, #1
   28502:	4699      	mov	r9, r3
   28504:	9b01      	ldr	r3, [sp, #4]
   28506:	2400      	movs	r4, #0
   28508:	401d      	ands	r5, r3
   2850a:	e5fc      	b.n	28106 <__aeabi_dmul+0xce>
   2850c:	2400      	movs	r4, #0
   2850e:	e7e2      	b.n	284d6 <__aeabi_dmul+0x49e>
   28510:	2280      	movs	r2, #128	; 0x80
   28512:	2501      	movs	r5, #1
   28514:	0312      	lsls	r2, r2, #12
   28516:	4322      	orrs	r2, r4
   28518:	9901      	ldr	r1, [sp, #4]
   2851a:	0312      	lsls	r2, r2, #12
   2851c:	0b12      	lsrs	r2, r2, #12
   2851e:	400d      	ands	r5, r1
   28520:	4699      	mov	r9, r3
   28522:	4c04      	ldr	r4, [pc, #16]	; (28534 <__aeabi_dmul+0x4fc>)
   28524:	e5ef      	b.n	28106 <__aeabi_dmul+0xce>
   28526:	46c0      	nop			; (mov r8, r8)
   28528:	000003ff 	.word	0x000003ff
   2852c:	feffffff 	.word	0xfeffffff
   28530:	000007fe 	.word	0x000007fe
   28534:	000007ff 	.word	0x000007ff

00028538 <__aeabi_dsub>:
   28538:	b5f0      	push	{r4, r5, r6, r7, lr}
   2853a:	4646      	mov	r6, r8
   2853c:	46d6      	mov	lr, sl
   2853e:	464f      	mov	r7, r9
   28540:	030c      	lsls	r4, r1, #12
   28542:	b5c0      	push	{r6, r7, lr}
   28544:	0fcd      	lsrs	r5, r1, #31
   28546:	004e      	lsls	r6, r1, #1
   28548:	0a61      	lsrs	r1, r4, #9
   2854a:	0f44      	lsrs	r4, r0, #29
   2854c:	430c      	orrs	r4, r1
   2854e:	00c1      	lsls	r1, r0, #3
   28550:	0058      	lsls	r0, r3, #1
   28552:	0d40      	lsrs	r0, r0, #21
   28554:	4684      	mov	ip, r0
   28556:	468a      	mov	sl, r1
   28558:	000f      	movs	r7, r1
   2855a:	0319      	lsls	r1, r3, #12
   2855c:	0f50      	lsrs	r0, r2, #29
   2855e:	0a49      	lsrs	r1, r1, #9
   28560:	4301      	orrs	r1, r0
   28562:	48c6      	ldr	r0, [pc, #792]	; (2887c <__aeabi_dsub+0x344>)
   28564:	0d76      	lsrs	r6, r6, #21
   28566:	46a8      	mov	r8, r5
   28568:	0fdb      	lsrs	r3, r3, #31
   2856a:	00d2      	lsls	r2, r2, #3
   2856c:	4584      	cmp	ip, r0
   2856e:	d100      	bne.n	28572 <__aeabi_dsub+0x3a>
   28570:	e0d8      	b.n	28724 <__aeabi_dsub+0x1ec>
   28572:	2001      	movs	r0, #1
   28574:	4043      	eors	r3, r0
   28576:	42ab      	cmp	r3, r5
   28578:	d100      	bne.n	2857c <__aeabi_dsub+0x44>
   2857a:	e0a6      	b.n	286ca <__aeabi_dsub+0x192>
   2857c:	4660      	mov	r0, ip
   2857e:	1a35      	subs	r5, r6, r0
   28580:	2d00      	cmp	r5, #0
   28582:	dc00      	bgt.n	28586 <__aeabi_dsub+0x4e>
   28584:	e105      	b.n	28792 <__aeabi_dsub+0x25a>
   28586:	2800      	cmp	r0, #0
   28588:	d110      	bne.n	285ac <__aeabi_dsub+0x74>
   2858a:	000b      	movs	r3, r1
   2858c:	4313      	orrs	r3, r2
   2858e:	d100      	bne.n	28592 <__aeabi_dsub+0x5a>
   28590:	e0d7      	b.n	28742 <__aeabi_dsub+0x20a>
   28592:	1e6b      	subs	r3, r5, #1
   28594:	2b00      	cmp	r3, #0
   28596:	d000      	beq.n	2859a <__aeabi_dsub+0x62>
   28598:	e14b      	b.n	28832 <__aeabi_dsub+0x2fa>
   2859a:	4653      	mov	r3, sl
   2859c:	1a9f      	subs	r7, r3, r2
   2859e:	45ba      	cmp	sl, r7
   285a0:	4180      	sbcs	r0, r0
   285a2:	1a64      	subs	r4, r4, r1
   285a4:	4240      	negs	r0, r0
   285a6:	1a24      	subs	r4, r4, r0
   285a8:	2601      	movs	r6, #1
   285aa:	e01e      	b.n	285ea <__aeabi_dsub+0xb2>
   285ac:	4bb3      	ldr	r3, [pc, #716]	; (2887c <__aeabi_dsub+0x344>)
   285ae:	429e      	cmp	r6, r3
   285b0:	d048      	beq.n	28644 <__aeabi_dsub+0x10c>
   285b2:	2380      	movs	r3, #128	; 0x80
   285b4:	041b      	lsls	r3, r3, #16
   285b6:	4319      	orrs	r1, r3
   285b8:	2d38      	cmp	r5, #56	; 0x38
   285ba:	dd00      	ble.n	285be <__aeabi_dsub+0x86>
   285bc:	e119      	b.n	287f2 <__aeabi_dsub+0x2ba>
   285be:	2d1f      	cmp	r5, #31
   285c0:	dd00      	ble.n	285c4 <__aeabi_dsub+0x8c>
   285c2:	e14c      	b.n	2885e <__aeabi_dsub+0x326>
   285c4:	2320      	movs	r3, #32
   285c6:	000f      	movs	r7, r1
   285c8:	1b5b      	subs	r3, r3, r5
   285ca:	0010      	movs	r0, r2
   285cc:	409a      	lsls	r2, r3
   285ce:	409f      	lsls	r7, r3
   285d0:	40e8      	lsrs	r0, r5
   285d2:	1e53      	subs	r3, r2, #1
   285d4:	419a      	sbcs	r2, r3
   285d6:	40e9      	lsrs	r1, r5
   285d8:	4307      	orrs	r7, r0
   285da:	4317      	orrs	r7, r2
   285dc:	4653      	mov	r3, sl
   285de:	1bdf      	subs	r7, r3, r7
   285e0:	1a61      	subs	r1, r4, r1
   285e2:	45ba      	cmp	sl, r7
   285e4:	41a4      	sbcs	r4, r4
   285e6:	4264      	negs	r4, r4
   285e8:	1b0c      	subs	r4, r1, r4
   285ea:	0223      	lsls	r3, r4, #8
   285ec:	d400      	bmi.n	285f0 <__aeabi_dsub+0xb8>
   285ee:	e0c5      	b.n	2877c <__aeabi_dsub+0x244>
   285f0:	0264      	lsls	r4, r4, #9
   285f2:	0a65      	lsrs	r5, r4, #9
   285f4:	2d00      	cmp	r5, #0
   285f6:	d100      	bne.n	285fa <__aeabi_dsub+0xc2>
   285f8:	e0f6      	b.n	287e8 <__aeabi_dsub+0x2b0>
   285fa:	0028      	movs	r0, r5
   285fc:	f000 fbd2 	bl	28da4 <__clzsi2>
   28600:	0003      	movs	r3, r0
   28602:	3b08      	subs	r3, #8
   28604:	2b1f      	cmp	r3, #31
   28606:	dd00      	ble.n	2860a <__aeabi_dsub+0xd2>
   28608:	e0e9      	b.n	287de <__aeabi_dsub+0x2a6>
   2860a:	2220      	movs	r2, #32
   2860c:	003c      	movs	r4, r7
   2860e:	1ad2      	subs	r2, r2, r3
   28610:	409d      	lsls	r5, r3
   28612:	40d4      	lsrs	r4, r2
   28614:	409f      	lsls	r7, r3
   28616:	4325      	orrs	r5, r4
   28618:	429e      	cmp	r6, r3
   2861a:	dd00      	ble.n	2861e <__aeabi_dsub+0xe6>
   2861c:	e0db      	b.n	287d6 <__aeabi_dsub+0x29e>
   2861e:	1b9e      	subs	r6, r3, r6
   28620:	1c73      	adds	r3, r6, #1
   28622:	2b1f      	cmp	r3, #31
   28624:	dd00      	ble.n	28628 <__aeabi_dsub+0xf0>
   28626:	e10a      	b.n	2883e <__aeabi_dsub+0x306>
   28628:	2220      	movs	r2, #32
   2862a:	0038      	movs	r0, r7
   2862c:	1ad2      	subs	r2, r2, r3
   2862e:	0029      	movs	r1, r5
   28630:	4097      	lsls	r7, r2
   28632:	002c      	movs	r4, r5
   28634:	4091      	lsls	r1, r2
   28636:	40d8      	lsrs	r0, r3
   28638:	1e7a      	subs	r2, r7, #1
   2863a:	4197      	sbcs	r7, r2
   2863c:	40dc      	lsrs	r4, r3
   2863e:	2600      	movs	r6, #0
   28640:	4301      	orrs	r1, r0
   28642:	430f      	orrs	r7, r1
   28644:	077b      	lsls	r3, r7, #29
   28646:	d009      	beq.n	2865c <__aeabi_dsub+0x124>
   28648:	230f      	movs	r3, #15
   2864a:	403b      	ands	r3, r7
   2864c:	2b04      	cmp	r3, #4
   2864e:	d005      	beq.n	2865c <__aeabi_dsub+0x124>
   28650:	1d3b      	adds	r3, r7, #4
   28652:	42bb      	cmp	r3, r7
   28654:	41bf      	sbcs	r7, r7
   28656:	427f      	negs	r7, r7
   28658:	19e4      	adds	r4, r4, r7
   2865a:	001f      	movs	r7, r3
   2865c:	0223      	lsls	r3, r4, #8
   2865e:	d525      	bpl.n	286ac <__aeabi_dsub+0x174>
   28660:	4b86      	ldr	r3, [pc, #536]	; (2887c <__aeabi_dsub+0x344>)
   28662:	3601      	adds	r6, #1
   28664:	429e      	cmp	r6, r3
   28666:	d100      	bne.n	2866a <__aeabi_dsub+0x132>
   28668:	e0af      	b.n	287ca <__aeabi_dsub+0x292>
   2866a:	4b85      	ldr	r3, [pc, #532]	; (28880 <__aeabi_dsub+0x348>)
   2866c:	2501      	movs	r5, #1
   2866e:	401c      	ands	r4, r3
   28670:	4643      	mov	r3, r8
   28672:	0762      	lsls	r2, r4, #29
   28674:	08ff      	lsrs	r7, r7, #3
   28676:	0264      	lsls	r4, r4, #9
   28678:	0576      	lsls	r6, r6, #21
   2867a:	4317      	orrs	r7, r2
   2867c:	0b24      	lsrs	r4, r4, #12
   2867e:	0d76      	lsrs	r6, r6, #21
   28680:	401d      	ands	r5, r3
   28682:	2100      	movs	r1, #0
   28684:	0324      	lsls	r4, r4, #12
   28686:	0b23      	lsrs	r3, r4, #12
   28688:	0d0c      	lsrs	r4, r1, #20
   2868a:	4a7e      	ldr	r2, [pc, #504]	; (28884 <__aeabi_dsub+0x34c>)
   2868c:	0524      	lsls	r4, r4, #20
   2868e:	431c      	orrs	r4, r3
   28690:	4014      	ands	r4, r2
   28692:	0533      	lsls	r3, r6, #20
   28694:	4323      	orrs	r3, r4
   28696:	005b      	lsls	r3, r3, #1
   28698:	07ed      	lsls	r5, r5, #31
   2869a:	085b      	lsrs	r3, r3, #1
   2869c:	432b      	orrs	r3, r5
   2869e:	0038      	movs	r0, r7
   286a0:	0019      	movs	r1, r3
   286a2:	bc1c      	pop	{r2, r3, r4}
   286a4:	4690      	mov	r8, r2
   286a6:	4699      	mov	r9, r3
   286a8:	46a2      	mov	sl, r4
   286aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   286ac:	2501      	movs	r5, #1
   286ae:	4643      	mov	r3, r8
   286b0:	0762      	lsls	r2, r4, #29
   286b2:	08ff      	lsrs	r7, r7, #3
   286b4:	4317      	orrs	r7, r2
   286b6:	08e4      	lsrs	r4, r4, #3
   286b8:	401d      	ands	r5, r3
   286ba:	4b70      	ldr	r3, [pc, #448]	; (2887c <__aeabi_dsub+0x344>)
   286bc:	429e      	cmp	r6, r3
   286be:	d036      	beq.n	2872e <__aeabi_dsub+0x1f6>
   286c0:	0324      	lsls	r4, r4, #12
   286c2:	0576      	lsls	r6, r6, #21
   286c4:	0b24      	lsrs	r4, r4, #12
   286c6:	0d76      	lsrs	r6, r6, #21
   286c8:	e7db      	b.n	28682 <__aeabi_dsub+0x14a>
   286ca:	4663      	mov	r3, ip
   286cc:	1af3      	subs	r3, r6, r3
   286ce:	2b00      	cmp	r3, #0
   286d0:	dc00      	bgt.n	286d4 <__aeabi_dsub+0x19c>
   286d2:	e094      	b.n	287fe <__aeabi_dsub+0x2c6>
   286d4:	4660      	mov	r0, ip
   286d6:	2800      	cmp	r0, #0
   286d8:	d035      	beq.n	28746 <__aeabi_dsub+0x20e>
   286da:	4868      	ldr	r0, [pc, #416]	; (2887c <__aeabi_dsub+0x344>)
   286dc:	4286      	cmp	r6, r0
   286de:	d0b1      	beq.n	28644 <__aeabi_dsub+0x10c>
   286e0:	2780      	movs	r7, #128	; 0x80
   286e2:	043f      	lsls	r7, r7, #16
   286e4:	4339      	orrs	r1, r7
   286e6:	2b38      	cmp	r3, #56	; 0x38
   286e8:	dc00      	bgt.n	286ec <__aeabi_dsub+0x1b4>
   286ea:	e0fd      	b.n	288e8 <__aeabi_dsub+0x3b0>
   286ec:	430a      	orrs	r2, r1
   286ee:	0017      	movs	r7, r2
   286f0:	2100      	movs	r1, #0
   286f2:	1e7a      	subs	r2, r7, #1
   286f4:	4197      	sbcs	r7, r2
   286f6:	4457      	add	r7, sl
   286f8:	4557      	cmp	r7, sl
   286fa:	4180      	sbcs	r0, r0
   286fc:	1909      	adds	r1, r1, r4
   286fe:	4244      	negs	r4, r0
   28700:	190c      	adds	r4, r1, r4
   28702:	0223      	lsls	r3, r4, #8
   28704:	d53a      	bpl.n	2877c <__aeabi_dsub+0x244>
   28706:	4b5d      	ldr	r3, [pc, #372]	; (2887c <__aeabi_dsub+0x344>)
   28708:	3601      	adds	r6, #1
   2870a:	429e      	cmp	r6, r3
   2870c:	d100      	bne.n	28710 <__aeabi_dsub+0x1d8>
   2870e:	e14b      	b.n	289a8 <__aeabi_dsub+0x470>
   28710:	2201      	movs	r2, #1
   28712:	4b5b      	ldr	r3, [pc, #364]	; (28880 <__aeabi_dsub+0x348>)
   28714:	401c      	ands	r4, r3
   28716:	087b      	lsrs	r3, r7, #1
   28718:	4017      	ands	r7, r2
   2871a:	431f      	orrs	r7, r3
   2871c:	07e2      	lsls	r2, r4, #31
   2871e:	4317      	orrs	r7, r2
   28720:	0864      	lsrs	r4, r4, #1
   28722:	e78f      	b.n	28644 <__aeabi_dsub+0x10c>
   28724:	0008      	movs	r0, r1
   28726:	4310      	orrs	r0, r2
   28728:	d000      	beq.n	2872c <__aeabi_dsub+0x1f4>
   2872a:	e724      	b.n	28576 <__aeabi_dsub+0x3e>
   2872c:	e721      	b.n	28572 <__aeabi_dsub+0x3a>
   2872e:	0023      	movs	r3, r4
   28730:	433b      	orrs	r3, r7
   28732:	d100      	bne.n	28736 <__aeabi_dsub+0x1fe>
   28734:	e1b9      	b.n	28aaa <__aeabi_dsub+0x572>
   28736:	2280      	movs	r2, #128	; 0x80
   28738:	0312      	lsls	r2, r2, #12
   2873a:	4314      	orrs	r4, r2
   2873c:	0324      	lsls	r4, r4, #12
   2873e:	0b24      	lsrs	r4, r4, #12
   28740:	e79f      	b.n	28682 <__aeabi_dsub+0x14a>
   28742:	002e      	movs	r6, r5
   28744:	e77e      	b.n	28644 <__aeabi_dsub+0x10c>
   28746:	0008      	movs	r0, r1
   28748:	4310      	orrs	r0, r2
   2874a:	d100      	bne.n	2874e <__aeabi_dsub+0x216>
   2874c:	e0ca      	b.n	288e4 <__aeabi_dsub+0x3ac>
   2874e:	1e58      	subs	r0, r3, #1
   28750:	4684      	mov	ip, r0
   28752:	2800      	cmp	r0, #0
   28754:	d000      	beq.n	28758 <__aeabi_dsub+0x220>
   28756:	e0e7      	b.n	28928 <__aeabi_dsub+0x3f0>
   28758:	4452      	add	r2, sl
   2875a:	4552      	cmp	r2, sl
   2875c:	4180      	sbcs	r0, r0
   2875e:	1864      	adds	r4, r4, r1
   28760:	4240      	negs	r0, r0
   28762:	1824      	adds	r4, r4, r0
   28764:	0017      	movs	r7, r2
   28766:	2601      	movs	r6, #1
   28768:	0223      	lsls	r3, r4, #8
   2876a:	d507      	bpl.n	2877c <__aeabi_dsub+0x244>
   2876c:	2602      	movs	r6, #2
   2876e:	e7cf      	b.n	28710 <__aeabi_dsub+0x1d8>
   28770:	4664      	mov	r4, ip
   28772:	432c      	orrs	r4, r5
   28774:	d100      	bne.n	28778 <__aeabi_dsub+0x240>
   28776:	e1b3      	b.n	28ae0 <__aeabi_dsub+0x5a8>
   28778:	002c      	movs	r4, r5
   2877a:	4667      	mov	r7, ip
   2877c:	077b      	lsls	r3, r7, #29
   2877e:	d000      	beq.n	28782 <__aeabi_dsub+0x24a>
   28780:	e762      	b.n	28648 <__aeabi_dsub+0x110>
   28782:	0763      	lsls	r3, r4, #29
   28784:	08ff      	lsrs	r7, r7, #3
   28786:	431f      	orrs	r7, r3
   28788:	2501      	movs	r5, #1
   2878a:	4643      	mov	r3, r8
   2878c:	08e4      	lsrs	r4, r4, #3
   2878e:	401d      	ands	r5, r3
   28790:	e793      	b.n	286ba <__aeabi_dsub+0x182>
   28792:	2d00      	cmp	r5, #0
   28794:	d178      	bne.n	28888 <__aeabi_dsub+0x350>
   28796:	1c75      	adds	r5, r6, #1
   28798:	056d      	lsls	r5, r5, #21
   2879a:	0d6d      	lsrs	r5, r5, #21
   2879c:	2d01      	cmp	r5, #1
   2879e:	dc00      	bgt.n	287a2 <__aeabi_dsub+0x26a>
   287a0:	e0f2      	b.n	28988 <__aeabi_dsub+0x450>
   287a2:	4650      	mov	r0, sl
   287a4:	1a80      	subs	r0, r0, r2
   287a6:	4582      	cmp	sl, r0
   287a8:	41bf      	sbcs	r7, r7
   287aa:	1a65      	subs	r5, r4, r1
   287ac:	427f      	negs	r7, r7
   287ae:	1bed      	subs	r5, r5, r7
   287b0:	4684      	mov	ip, r0
   287b2:	0228      	lsls	r0, r5, #8
   287b4:	d400      	bmi.n	287b8 <__aeabi_dsub+0x280>
   287b6:	e08c      	b.n	288d2 <__aeabi_dsub+0x39a>
   287b8:	4650      	mov	r0, sl
   287ba:	1a17      	subs	r7, r2, r0
   287bc:	42ba      	cmp	r2, r7
   287be:	4192      	sbcs	r2, r2
   287c0:	1b0c      	subs	r4, r1, r4
   287c2:	4255      	negs	r5, r2
   287c4:	1b65      	subs	r5, r4, r5
   287c6:	4698      	mov	r8, r3
   287c8:	e714      	b.n	285f4 <__aeabi_dsub+0xbc>
   287ca:	2501      	movs	r5, #1
   287cc:	4643      	mov	r3, r8
   287ce:	2400      	movs	r4, #0
   287d0:	401d      	ands	r5, r3
   287d2:	2700      	movs	r7, #0
   287d4:	e755      	b.n	28682 <__aeabi_dsub+0x14a>
   287d6:	4c2a      	ldr	r4, [pc, #168]	; (28880 <__aeabi_dsub+0x348>)
   287d8:	1af6      	subs	r6, r6, r3
   287da:	402c      	ands	r4, r5
   287dc:	e732      	b.n	28644 <__aeabi_dsub+0x10c>
   287de:	003d      	movs	r5, r7
   287e0:	3828      	subs	r0, #40	; 0x28
   287e2:	4085      	lsls	r5, r0
   287e4:	2700      	movs	r7, #0
   287e6:	e717      	b.n	28618 <__aeabi_dsub+0xe0>
   287e8:	0038      	movs	r0, r7
   287ea:	f000 fadb 	bl	28da4 <__clzsi2>
   287ee:	3020      	adds	r0, #32
   287f0:	e706      	b.n	28600 <__aeabi_dsub+0xc8>
   287f2:	430a      	orrs	r2, r1
   287f4:	0017      	movs	r7, r2
   287f6:	2100      	movs	r1, #0
   287f8:	1e7a      	subs	r2, r7, #1
   287fa:	4197      	sbcs	r7, r2
   287fc:	e6ee      	b.n	285dc <__aeabi_dsub+0xa4>
   287fe:	2b00      	cmp	r3, #0
   28800:	d000      	beq.n	28804 <__aeabi_dsub+0x2cc>
   28802:	e0e5      	b.n	289d0 <__aeabi_dsub+0x498>
   28804:	1c73      	adds	r3, r6, #1
   28806:	469c      	mov	ip, r3
   28808:	055b      	lsls	r3, r3, #21
   2880a:	0d5b      	lsrs	r3, r3, #21
   2880c:	2b01      	cmp	r3, #1
   2880e:	dc00      	bgt.n	28812 <__aeabi_dsub+0x2da>
   28810:	e09f      	b.n	28952 <__aeabi_dsub+0x41a>
   28812:	4b1a      	ldr	r3, [pc, #104]	; (2887c <__aeabi_dsub+0x344>)
   28814:	459c      	cmp	ip, r3
   28816:	d100      	bne.n	2881a <__aeabi_dsub+0x2e2>
   28818:	e0c5      	b.n	289a6 <__aeabi_dsub+0x46e>
   2881a:	4452      	add	r2, sl
   2881c:	4552      	cmp	r2, sl
   2881e:	4180      	sbcs	r0, r0
   28820:	1864      	adds	r4, r4, r1
   28822:	4240      	negs	r0, r0
   28824:	1824      	adds	r4, r4, r0
   28826:	07e7      	lsls	r7, r4, #31
   28828:	0852      	lsrs	r2, r2, #1
   2882a:	4317      	orrs	r7, r2
   2882c:	0864      	lsrs	r4, r4, #1
   2882e:	4666      	mov	r6, ip
   28830:	e708      	b.n	28644 <__aeabi_dsub+0x10c>
   28832:	4812      	ldr	r0, [pc, #72]	; (2887c <__aeabi_dsub+0x344>)
   28834:	4285      	cmp	r5, r0
   28836:	d100      	bne.n	2883a <__aeabi_dsub+0x302>
   28838:	e085      	b.n	28946 <__aeabi_dsub+0x40e>
   2883a:	001d      	movs	r5, r3
   2883c:	e6bc      	b.n	285b8 <__aeabi_dsub+0x80>
   2883e:	0029      	movs	r1, r5
   28840:	3e1f      	subs	r6, #31
   28842:	40f1      	lsrs	r1, r6
   28844:	2b20      	cmp	r3, #32
   28846:	d100      	bne.n	2884a <__aeabi_dsub+0x312>
   28848:	e07f      	b.n	2894a <__aeabi_dsub+0x412>
   2884a:	2240      	movs	r2, #64	; 0x40
   2884c:	1ad3      	subs	r3, r2, r3
   2884e:	409d      	lsls	r5, r3
   28850:	432f      	orrs	r7, r5
   28852:	1e7d      	subs	r5, r7, #1
   28854:	41af      	sbcs	r7, r5
   28856:	2400      	movs	r4, #0
   28858:	430f      	orrs	r7, r1
   2885a:	2600      	movs	r6, #0
   2885c:	e78e      	b.n	2877c <__aeabi_dsub+0x244>
   2885e:	002b      	movs	r3, r5
   28860:	000f      	movs	r7, r1
   28862:	3b20      	subs	r3, #32
   28864:	40df      	lsrs	r7, r3
   28866:	2d20      	cmp	r5, #32
   28868:	d071      	beq.n	2894e <__aeabi_dsub+0x416>
   2886a:	2340      	movs	r3, #64	; 0x40
   2886c:	1b5d      	subs	r5, r3, r5
   2886e:	40a9      	lsls	r1, r5
   28870:	430a      	orrs	r2, r1
   28872:	1e51      	subs	r1, r2, #1
   28874:	418a      	sbcs	r2, r1
   28876:	2100      	movs	r1, #0
   28878:	4317      	orrs	r7, r2
   2887a:	e6af      	b.n	285dc <__aeabi_dsub+0xa4>
   2887c:	000007ff 	.word	0x000007ff
   28880:	ff7fffff 	.word	0xff7fffff
   28884:	800fffff 	.word	0x800fffff
   28888:	2e00      	cmp	r6, #0
   2888a:	d03e      	beq.n	2890a <__aeabi_dsub+0x3d2>
   2888c:	4eb3      	ldr	r6, [pc, #716]	; (28b5c <__aeabi_dsub+0x624>)
   2888e:	45b4      	cmp	ip, r6
   28890:	d045      	beq.n	2891e <__aeabi_dsub+0x3e6>
   28892:	2680      	movs	r6, #128	; 0x80
   28894:	0436      	lsls	r6, r6, #16
   28896:	426d      	negs	r5, r5
   28898:	4334      	orrs	r4, r6
   2889a:	2d38      	cmp	r5, #56	; 0x38
   2889c:	dd00      	ble.n	288a0 <__aeabi_dsub+0x368>
   2889e:	e0a8      	b.n	289f2 <__aeabi_dsub+0x4ba>
   288a0:	2d1f      	cmp	r5, #31
   288a2:	dd00      	ble.n	288a6 <__aeabi_dsub+0x36e>
   288a4:	e11f      	b.n	28ae6 <__aeabi_dsub+0x5ae>
   288a6:	2620      	movs	r6, #32
   288a8:	0027      	movs	r7, r4
   288aa:	4650      	mov	r0, sl
   288ac:	1b76      	subs	r6, r6, r5
   288ae:	40b7      	lsls	r7, r6
   288b0:	40e8      	lsrs	r0, r5
   288b2:	4307      	orrs	r7, r0
   288b4:	4650      	mov	r0, sl
   288b6:	40b0      	lsls	r0, r6
   288b8:	1e46      	subs	r6, r0, #1
   288ba:	41b0      	sbcs	r0, r6
   288bc:	40ec      	lsrs	r4, r5
   288be:	4338      	orrs	r0, r7
   288c0:	1a17      	subs	r7, r2, r0
   288c2:	42ba      	cmp	r2, r7
   288c4:	4192      	sbcs	r2, r2
   288c6:	1b0c      	subs	r4, r1, r4
   288c8:	4252      	negs	r2, r2
   288ca:	1aa4      	subs	r4, r4, r2
   288cc:	4666      	mov	r6, ip
   288ce:	4698      	mov	r8, r3
   288d0:	e68b      	b.n	285ea <__aeabi_dsub+0xb2>
   288d2:	4664      	mov	r4, ip
   288d4:	4667      	mov	r7, ip
   288d6:	432c      	orrs	r4, r5
   288d8:	d000      	beq.n	288dc <__aeabi_dsub+0x3a4>
   288da:	e68b      	b.n	285f4 <__aeabi_dsub+0xbc>
   288dc:	2500      	movs	r5, #0
   288de:	2600      	movs	r6, #0
   288e0:	2700      	movs	r7, #0
   288e2:	e6ea      	b.n	286ba <__aeabi_dsub+0x182>
   288e4:	001e      	movs	r6, r3
   288e6:	e6ad      	b.n	28644 <__aeabi_dsub+0x10c>
   288e8:	2b1f      	cmp	r3, #31
   288ea:	dc60      	bgt.n	289ae <__aeabi_dsub+0x476>
   288ec:	2720      	movs	r7, #32
   288ee:	1af8      	subs	r0, r7, r3
   288f0:	000f      	movs	r7, r1
   288f2:	4684      	mov	ip, r0
   288f4:	4087      	lsls	r7, r0
   288f6:	0010      	movs	r0, r2
   288f8:	40d8      	lsrs	r0, r3
   288fa:	4307      	orrs	r7, r0
   288fc:	4660      	mov	r0, ip
   288fe:	4082      	lsls	r2, r0
   28900:	1e50      	subs	r0, r2, #1
   28902:	4182      	sbcs	r2, r0
   28904:	40d9      	lsrs	r1, r3
   28906:	4317      	orrs	r7, r2
   28908:	e6f5      	b.n	286f6 <__aeabi_dsub+0x1be>
   2890a:	0026      	movs	r6, r4
   2890c:	4650      	mov	r0, sl
   2890e:	4306      	orrs	r6, r0
   28910:	d005      	beq.n	2891e <__aeabi_dsub+0x3e6>
   28912:	43ed      	mvns	r5, r5
   28914:	2d00      	cmp	r5, #0
   28916:	d0d3      	beq.n	288c0 <__aeabi_dsub+0x388>
   28918:	4e90      	ldr	r6, [pc, #576]	; (28b5c <__aeabi_dsub+0x624>)
   2891a:	45b4      	cmp	ip, r6
   2891c:	d1bd      	bne.n	2889a <__aeabi_dsub+0x362>
   2891e:	000c      	movs	r4, r1
   28920:	0017      	movs	r7, r2
   28922:	4666      	mov	r6, ip
   28924:	4698      	mov	r8, r3
   28926:	e68d      	b.n	28644 <__aeabi_dsub+0x10c>
   28928:	488c      	ldr	r0, [pc, #560]	; (28b5c <__aeabi_dsub+0x624>)
   2892a:	4283      	cmp	r3, r0
   2892c:	d00b      	beq.n	28946 <__aeabi_dsub+0x40e>
   2892e:	4663      	mov	r3, ip
   28930:	e6d9      	b.n	286e6 <__aeabi_dsub+0x1ae>
   28932:	2d00      	cmp	r5, #0
   28934:	d000      	beq.n	28938 <__aeabi_dsub+0x400>
   28936:	e096      	b.n	28a66 <__aeabi_dsub+0x52e>
   28938:	0008      	movs	r0, r1
   2893a:	4310      	orrs	r0, r2
   2893c:	d100      	bne.n	28940 <__aeabi_dsub+0x408>
   2893e:	e0e2      	b.n	28b06 <__aeabi_dsub+0x5ce>
   28940:	000c      	movs	r4, r1
   28942:	0017      	movs	r7, r2
   28944:	4698      	mov	r8, r3
   28946:	4e85      	ldr	r6, [pc, #532]	; (28b5c <__aeabi_dsub+0x624>)
   28948:	e67c      	b.n	28644 <__aeabi_dsub+0x10c>
   2894a:	2500      	movs	r5, #0
   2894c:	e780      	b.n	28850 <__aeabi_dsub+0x318>
   2894e:	2100      	movs	r1, #0
   28950:	e78e      	b.n	28870 <__aeabi_dsub+0x338>
   28952:	0023      	movs	r3, r4
   28954:	4650      	mov	r0, sl
   28956:	4303      	orrs	r3, r0
   28958:	2e00      	cmp	r6, #0
   2895a:	d000      	beq.n	2895e <__aeabi_dsub+0x426>
   2895c:	e0a8      	b.n	28ab0 <__aeabi_dsub+0x578>
   2895e:	2b00      	cmp	r3, #0
   28960:	d100      	bne.n	28964 <__aeabi_dsub+0x42c>
   28962:	e0de      	b.n	28b22 <__aeabi_dsub+0x5ea>
   28964:	000b      	movs	r3, r1
   28966:	4313      	orrs	r3, r2
   28968:	d100      	bne.n	2896c <__aeabi_dsub+0x434>
   2896a:	e66b      	b.n	28644 <__aeabi_dsub+0x10c>
   2896c:	4452      	add	r2, sl
   2896e:	4552      	cmp	r2, sl
   28970:	4180      	sbcs	r0, r0
   28972:	1864      	adds	r4, r4, r1
   28974:	4240      	negs	r0, r0
   28976:	1824      	adds	r4, r4, r0
   28978:	0017      	movs	r7, r2
   2897a:	0223      	lsls	r3, r4, #8
   2897c:	d400      	bmi.n	28980 <__aeabi_dsub+0x448>
   2897e:	e6fd      	b.n	2877c <__aeabi_dsub+0x244>
   28980:	4b77      	ldr	r3, [pc, #476]	; (28b60 <__aeabi_dsub+0x628>)
   28982:	4666      	mov	r6, ip
   28984:	401c      	ands	r4, r3
   28986:	e65d      	b.n	28644 <__aeabi_dsub+0x10c>
   28988:	0025      	movs	r5, r4
   2898a:	4650      	mov	r0, sl
   2898c:	4305      	orrs	r5, r0
   2898e:	2e00      	cmp	r6, #0
   28990:	d1cf      	bne.n	28932 <__aeabi_dsub+0x3fa>
   28992:	2d00      	cmp	r5, #0
   28994:	d14f      	bne.n	28a36 <__aeabi_dsub+0x4fe>
   28996:	000c      	movs	r4, r1
   28998:	4314      	orrs	r4, r2
   2899a:	d100      	bne.n	2899e <__aeabi_dsub+0x466>
   2899c:	e0a0      	b.n	28ae0 <__aeabi_dsub+0x5a8>
   2899e:	000c      	movs	r4, r1
   289a0:	0017      	movs	r7, r2
   289a2:	4698      	mov	r8, r3
   289a4:	e64e      	b.n	28644 <__aeabi_dsub+0x10c>
   289a6:	4666      	mov	r6, ip
   289a8:	2400      	movs	r4, #0
   289aa:	2700      	movs	r7, #0
   289ac:	e685      	b.n	286ba <__aeabi_dsub+0x182>
   289ae:	001f      	movs	r7, r3
   289b0:	0008      	movs	r0, r1
   289b2:	3f20      	subs	r7, #32
   289b4:	40f8      	lsrs	r0, r7
   289b6:	0007      	movs	r7, r0
   289b8:	2b20      	cmp	r3, #32
   289ba:	d100      	bne.n	289be <__aeabi_dsub+0x486>
   289bc:	e08e      	b.n	28adc <__aeabi_dsub+0x5a4>
   289be:	2040      	movs	r0, #64	; 0x40
   289c0:	1ac3      	subs	r3, r0, r3
   289c2:	4099      	lsls	r1, r3
   289c4:	430a      	orrs	r2, r1
   289c6:	1e51      	subs	r1, r2, #1
   289c8:	418a      	sbcs	r2, r1
   289ca:	2100      	movs	r1, #0
   289cc:	4317      	orrs	r7, r2
   289ce:	e692      	b.n	286f6 <__aeabi_dsub+0x1be>
   289d0:	2e00      	cmp	r6, #0
   289d2:	d114      	bne.n	289fe <__aeabi_dsub+0x4c6>
   289d4:	0026      	movs	r6, r4
   289d6:	4650      	mov	r0, sl
   289d8:	4306      	orrs	r6, r0
   289da:	d062      	beq.n	28aa2 <__aeabi_dsub+0x56a>
   289dc:	43db      	mvns	r3, r3
   289de:	2b00      	cmp	r3, #0
   289e0:	d15c      	bne.n	28a9c <__aeabi_dsub+0x564>
   289e2:	1887      	adds	r7, r0, r2
   289e4:	4297      	cmp	r7, r2
   289e6:	4192      	sbcs	r2, r2
   289e8:	1864      	adds	r4, r4, r1
   289ea:	4252      	negs	r2, r2
   289ec:	18a4      	adds	r4, r4, r2
   289ee:	4666      	mov	r6, ip
   289f0:	e687      	b.n	28702 <__aeabi_dsub+0x1ca>
   289f2:	4650      	mov	r0, sl
   289f4:	4320      	orrs	r0, r4
   289f6:	1e44      	subs	r4, r0, #1
   289f8:	41a0      	sbcs	r0, r4
   289fa:	2400      	movs	r4, #0
   289fc:	e760      	b.n	288c0 <__aeabi_dsub+0x388>
   289fe:	4e57      	ldr	r6, [pc, #348]	; (28b5c <__aeabi_dsub+0x624>)
   28a00:	45b4      	cmp	ip, r6
   28a02:	d04e      	beq.n	28aa2 <__aeabi_dsub+0x56a>
   28a04:	2680      	movs	r6, #128	; 0x80
   28a06:	0436      	lsls	r6, r6, #16
   28a08:	425b      	negs	r3, r3
   28a0a:	4334      	orrs	r4, r6
   28a0c:	2b38      	cmp	r3, #56	; 0x38
   28a0e:	dd00      	ble.n	28a12 <__aeabi_dsub+0x4da>
   28a10:	e07f      	b.n	28b12 <__aeabi_dsub+0x5da>
   28a12:	2b1f      	cmp	r3, #31
   28a14:	dd00      	ble.n	28a18 <__aeabi_dsub+0x4e0>
   28a16:	e08b      	b.n	28b30 <__aeabi_dsub+0x5f8>
   28a18:	2620      	movs	r6, #32
   28a1a:	0027      	movs	r7, r4
   28a1c:	4650      	mov	r0, sl
   28a1e:	1af6      	subs	r6, r6, r3
   28a20:	40b7      	lsls	r7, r6
   28a22:	40d8      	lsrs	r0, r3
   28a24:	4307      	orrs	r7, r0
   28a26:	4650      	mov	r0, sl
   28a28:	40b0      	lsls	r0, r6
   28a2a:	1e46      	subs	r6, r0, #1
   28a2c:	41b0      	sbcs	r0, r6
   28a2e:	4307      	orrs	r7, r0
   28a30:	40dc      	lsrs	r4, r3
   28a32:	18bf      	adds	r7, r7, r2
   28a34:	e7d6      	b.n	289e4 <__aeabi_dsub+0x4ac>
   28a36:	000d      	movs	r5, r1
   28a38:	4315      	orrs	r5, r2
   28a3a:	d100      	bne.n	28a3e <__aeabi_dsub+0x506>
   28a3c:	e602      	b.n	28644 <__aeabi_dsub+0x10c>
   28a3e:	4650      	mov	r0, sl
   28a40:	1a80      	subs	r0, r0, r2
   28a42:	4582      	cmp	sl, r0
   28a44:	41bf      	sbcs	r7, r7
   28a46:	1a65      	subs	r5, r4, r1
   28a48:	427f      	negs	r7, r7
   28a4a:	1bed      	subs	r5, r5, r7
   28a4c:	4684      	mov	ip, r0
   28a4e:	0228      	lsls	r0, r5, #8
   28a50:	d400      	bmi.n	28a54 <__aeabi_dsub+0x51c>
   28a52:	e68d      	b.n	28770 <__aeabi_dsub+0x238>
   28a54:	4650      	mov	r0, sl
   28a56:	1a17      	subs	r7, r2, r0
   28a58:	42ba      	cmp	r2, r7
   28a5a:	4192      	sbcs	r2, r2
   28a5c:	1b0c      	subs	r4, r1, r4
   28a5e:	4252      	negs	r2, r2
   28a60:	1aa4      	subs	r4, r4, r2
   28a62:	4698      	mov	r8, r3
   28a64:	e5ee      	b.n	28644 <__aeabi_dsub+0x10c>
   28a66:	000d      	movs	r5, r1
   28a68:	4315      	orrs	r5, r2
   28a6a:	d100      	bne.n	28a6e <__aeabi_dsub+0x536>
   28a6c:	e76b      	b.n	28946 <__aeabi_dsub+0x40e>
   28a6e:	4650      	mov	r0, sl
   28a70:	0767      	lsls	r7, r4, #29
   28a72:	08c0      	lsrs	r0, r0, #3
   28a74:	4307      	orrs	r7, r0
   28a76:	2080      	movs	r0, #128	; 0x80
   28a78:	08e4      	lsrs	r4, r4, #3
   28a7a:	0300      	lsls	r0, r0, #12
   28a7c:	4204      	tst	r4, r0
   28a7e:	d007      	beq.n	28a90 <__aeabi_dsub+0x558>
   28a80:	08cd      	lsrs	r5, r1, #3
   28a82:	4205      	tst	r5, r0
   28a84:	d104      	bne.n	28a90 <__aeabi_dsub+0x558>
   28a86:	002c      	movs	r4, r5
   28a88:	4698      	mov	r8, r3
   28a8a:	08d7      	lsrs	r7, r2, #3
   28a8c:	0749      	lsls	r1, r1, #29
   28a8e:	430f      	orrs	r7, r1
   28a90:	0f7b      	lsrs	r3, r7, #29
   28a92:	00e4      	lsls	r4, r4, #3
   28a94:	431c      	orrs	r4, r3
   28a96:	00ff      	lsls	r7, r7, #3
   28a98:	4e30      	ldr	r6, [pc, #192]	; (28b5c <__aeabi_dsub+0x624>)
   28a9a:	e5d3      	b.n	28644 <__aeabi_dsub+0x10c>
   28a9c:	4e2f      	ldr	r6, [pc, #188]	; (28b5c <__aeabi_dsub+0x624>)
   28a9e:	45b4      	cmp	ip, r6
   28aa0:	d1b4      	bne.n	28a0c <__aeabi_dsub+0x4d4>
   28aa2:	000c      	movs	r4, r1
   28aa4:	0017      	movs	r7, r2
   28aa6:	4666      	mov	r6, ip
   28aa8:	e5cc      	b.n	28644 <__aeabi_dsub+0x10c>
   28aaa:	2700      	movs	r7, #0
   28aac:	2400      	movs	r4, #0
   28aae:	e5e8      	b.n	28682 <__aeabi_dsub+0x14a>
   28ab0:	2b00      	cmp	r3, #0
   28ab2:	d039      	beq.n	28b28 <__aeabi_dsub+0x5f0>
   28ab4:	000b      	movs	r3, r1
   28ab6:	4313      	orrs	r3, r2
   28ab8:	d100      	bne.n	28abc <__aeabi_dsub+0x584>
   28aba:	e744      	b.n	28946 <__aeabi_dsub+0x40e>
   28abc:	08c0      	lsrs	r0, r0, #3
   28abe:	0767      	lsls	r7, r4, #29
   28ac0:	4307      	orrs	r7, r0
   28ac2:	2080      	movs	r0, #128	; 0x80
   28ac4:	08e4      	lsrs	r4, r4, #3
   28ac6:	0300      	lsls	r0, r0, #12
   28ac8:	4204      	tst	r4, r0
   28aca:	d0e1      	beq.n	28a90 <__aeabi_dsub+0x558>
   28acc:	08cb      	lsrs	r3, r1, #3
   28ace:	4203      	tst	r3, r0
   28ad0:	d1de      	bne.n	28a90 <__aeabi_dsub+0x558>
   28ad2:	08d7      	lsrs	r7, r2, #3
   28ad4:	0749      	lsls	r1, r1, #29
   28ad6:	430f      	orrs	r7, r1
   28ad8:	001c      	movs	r4, r3
   28ada:	e7d9      	b.n	28a90 <__aeabi_dsub+0x558>
   28adc:	2100      	movs	r1, #0
   28ade:	e771      	b.n	289c4 <__aeabi_dsub+0x48c>
   28ae0:	2500      	movs	r5, #0
   28ae2:	2700      	movs	r7, #0
   28ae4:	e5e9      	b.n	286ba <__aeabi_dsub+0x182>
   28ae6:	002e      	movs	r6, r5
   28ae8:	0027      	movs	r7, r4
   28aea:	3e20      	subs	r6, #32
   28aec:	40f7      	lsrs	r7, r6
   28aee:	2d20      	cmp	r5, #32
   28af0:	d02f      	beq.n	28b52 <__aeabi_dsub+0x61a>
   28af2:	2640      	movs	r6, #64	; 0x40
   28af4:	1b75      	subs	r5, r6, r5
   28af6:	40ac      	lsls	r4, r5
   28af8:	4650      	mov	r0, sl
   28afa:	4320      	orrs	r0, r4
   28afc:	1e44      	subs	r4, r0, #1
   28afe:	41a0      	sbcs	r0, r4
   28b00:	2400      	movs	r4, #0
   28b02:	4338      	orrs	r0, r7
   28b04:	e6dc      	b.n	288c0 <__aeabi_dsub+0x388>
   28b06:	2480      	movs	r4, #128	; 0x80
   28b08:	2500      	movs	r5, #0
   28b0a:	0324      	lsls	r4, r4, #12
   28b0c:	4e13      	ldr	r6, [pc, #76]	; (28b5c <__aeabi_dsub+0x624>)
   28b0e:	2700      	movs	r7, #0
   28b10:	e5d3      	b.n	286ba <__aeabi_dsub+0x182>
   28b12:	4650      	mov	r0, sl
   28b14:	4320      	orrs	r0, r4
   28b16:	0007      	movs	r7, r0
   28b18:	1e78      	subs	r0, r7, #1
   28b1a:	4187      	sbcs	r7, r0
   28b1c:	2400      	movs	r4, #0
   28b1e:	18bf      	adds	r7, r7, r2
   28b20:	e760      	b.n	289e4 <__aeabi_dsub+0x4ac>
   28b22:	000c      	movs	r4, r1
   28b24:	0017      	movs	r7, r2
   28b26:	e58d      	b.n	28644 <__aeabi_dsub+0x10c>
   28b28:	000c      	movs	r4, r1
   28b2a:	0017      	movs	r7, r2
   28b2c:	4e0b      	ldr	r6, [pc, #44]	; (28b5c <__aeabi_dsub+0x624>)
   28b2e:	e589      	b.n	28644 <__aeabi_dsub+0x10c>
   28b30:	001e      	movs	r6, r3
   28b32:	0027      	movs	r7, r4
   28b34:	3e20      	subs	r6, #32
   28b36:	40f7      	lsrs	r7, r6
   28b38:	2b20      	cmp	r3, #32
   28b3a:	d00c      	beq.n	28b56 <__aeabi_dsub+0x61e>
   28b3c:	2640      	movs	r6, #64	; 0x40
   28b3e:	1af3      	subs	r3, r6, r3
   28b40:	409c      	lsls	r4, r3
   28b42:	4650      	mov	r0, sl
   28b44:	4320      	orrs	r0, r4
   28b46:	1e44      	subs	r4, r0, #1
   28b48:	41a0      	sbcs	r0, r4
   28b4a:	4307      	orrs	r7, r0
   28b4c:	2400      	movs	r4, #0
   28b4e:	18bf      	adds	r7, r7, r2
   28b50:	e748      	b.n	289e4 <__aeabi_dsub+0x4ac>
   28b52:	2400      	movs	r4, #0
   28b54:	e7d0      	b.n	28af8 <__aeabi_dsub+0x5c0>
   28b56:	2400      	movs	r4, #0
   28b58:	e7f3      	b.n	28b42 <__aeabi_dsub+0x60a>
   28b5a:	46c0      	nop			; (mov r8, r8)
   28b5c:	000007ff 	.word	0x000007ff
   28b60:	ff7fffff 	.word	0xff7fffff

00028b64 <__aeabi_dcmpun>:
   28b64:	b570      	push	{r4, r5, r6, lr}
   28b66:	4e0e      	ldr	r6, [pc, #56]	; (28ba0 <__aeabi_dcmpun+0x3c>)
   28b68:	030d      	lsls	r5, r1, #12
   28b6a:	031c      	lsls	r4, r3, #12
   28b6c:	0049      	lsls	r1, r1, #1
   28b6e:	005b      	lsls	r3, r3, #1
   28b70:	0b2d      	lsrs	r5, r5, #12
   28b72:	0d49      	lsrs	r1, r1, #21
   28b74:	0b24      	lsrs	r4, r4, #12
   28b76:	0d5b      	lsrs	r3, r3, #21
   28b78:	42b1      	cmp	r1, r6
   28b7a:	d004      	beq.n	28b86 <__aeabi_dcmpun+0x22>
   28b7c:	4908      	ldr	r1, [pc, #32]	; (28ba0 <__aeabi_dcmpun+0x3c>)
   28b7e:	2000      	movs	r0, #0
   28b80:	428b      	cmp	r3, r1
   28b82:	d008      	beq.n	28b96 <__aeabi_dcmpun+0x32>
   28b84:	bd70      	pop	{r4, r5, r6, pc}
   28b86:	4305      	orrs	r5, r0
   28b88:	2001      	movs	r0, #1
   28b8a:	2d00      	cmp	r5, #0
   28b8c:	d1fa      	bne.n	28b84 <__aeabi_dcmpun+0x20>
   28b8e:	4904      	ldr	r1, [pc, #16]	; (28ba0 <__aeabi_dcmpun+0x3c>)
   28b90:	2000      	movs	r0, #0
   28b92:	428b      	cmp	r3, r1
   28b94:	d1f6      	bne.n	28b84 <__aeabi_dcmpun+0x20>
   28b96:	4314      	orrs	r4, r2
   28b98:	0020      	movs	r0, r4
   28b9a:	1e44      	subs	r4, r0, #1
   28b9c:	41a0      	sbcs	r0, r4
   28b9e:	e7f1      	b.n	28b84 <__aeabi_dcmpun+0x20>
   28ba0:	000007ff 	.word	0x000007ff

00028ba4 <__aeabi_d2iz>:
   28ba4:	b530      	push	{r4, r5, lr}
   28ba6:	4d13      	ldr	r5, [pc, #76]	; (28bf4 <__aeabi_d2iz+0x50>)
   28ba8:	030a      	lsls	r2, r1, #12
   28baa:	004b      	lsls	r3, r1, #1
   28bac:	0b12      	lsrs	r2, r2, #12
   28bae:	0d5b      	lsrs	r3, r3, #21
   28bb0:	0fc9      	lsrs	r1, r1, #31
   28bb2:	2400      	movs	r4, #0
   28bb4:	42ab      	cmp	r3, r5
   28bb6:	dd10      	ble.n	28bda <__aeabi_d2iz+0x36>
   28bb8:	4c0f      	ldr	r4, [pc, #60]	; (28bf8 <__aeabi_d2iz+0x54>)
   28bba:	42a3      	cmp	r3, r4
   28bbc:	dc0f      	bgt.n	28bde <__aeabi_d2iz+0x3a>
   28bbe:	2480      	movs	r4, #128	; 0x80
   28bc0:	4d0e      	ldr	r5, [pc, #56]	; (28bfc <__aeabi_d2iz+0x58>)
   28bc2:	0364      	lsls	r4, r4, #13
   28bc4:	4322      	orrs	r2, r4
   28bc6:	1aed      	subs	r5, r5, r3
   28bc8:	2d1f      	cmp	r5, #31
   28bca:	dd0b      	ble.n	28be4 <__aeabi_d2iz+0x40>
   28bcc:	480c      	ldr	r0, [pc, #48]	; (28c00 <__aeabi_d2iz+0x5c>)
   28bce:	1ac3      	subs	r3, r0, r3
   28bd0:	40da      	lsrs	r2, r3
   28bd2:	4254      	negs	r4, r2
   28bd4:	2900      	cmp	r1, #0
   28bd6:	d100      	bne.n	28bda <__aeabi_d2iz+0x36>
   28bd8:	0014      	movs	r4, r2
   28bda:	0020      	movs	r0, r4
   28bdc:	bd30      	pop	{r4, r5, pc}
   28bde:	4b09      	ldr	r3, [pc, #36]	; (28c04 <__aeabi_d2iz+0x60>)
   28be0:	18cc      	adds	r4, r1, r3
   28be2:	e7fa      	b.n	28bda <__aeabi_d2iz+0x36>
   28be4:	4c08      	ldr	r4, [pc, #32]	; (28c08 <__aeabi_d2iz+0x64>)
   28be6:	40e8      	lsrs	r0, r5
   28be8:	46a4      	mov	ip, r4
   28bea:	4463      	add	r3, ip
   28bec:	409a      	lsls	r2, r3
   28bee:	4302      	orrs	r2, r0
   28bf0:	e7ef      	b.n	28bd2 <__aeabi_d2iz+0x2e>
   28bf2:	46c0      	nop			; (mov r8, r8)
   28bf4:	000003fe 	.word	0x000003fe
   28bf8:	0000041d 	.word	0x0000041d
   28bfc:	00000433 	.word	0x00000433
   28c00:	00000413 	.word	0x00000413
   28c04:	7fffffff 	.word	0x7fffffff
   28c08:	fffffbed 	.word	0xfffffbed

00028c0c <__aeabi_i2d>:
   28c0c:	b570      	push	{r4, r5, r6, lr}
   28c0e:	2800      	cmp	r0, #0
   28c10:	d030      	beq.n	28c74 <__aeabi_i2d+0x68>
   28c12:	17c3      	asrs	r3, r0, #31
   28c14:	18c4      	adds	r4, r0, r3
   28c16:	405c      	eors	r4, r3
   28c18:	0fc5      	lsrs	r5, r0, #31
   28c1a:	0020      	movs	r0, r4
   28c1c:	f000 f8c2 	bl	28da4 <__clzsi2>
   28c20:	4b17      	ldr	r3, [pc, #92]	; (28c80 <__aeabi_i2d+0x74>)
   28c22:	4a18      	ldr	r2, [pc, #96]	; (28c84 <__aeabi_i2d+0x78>)
   28c24:	1a1b      	subs	r3, r3, r0
   28c26:	1ad2      	subs	r2, r2, r3
   28c28:	2a1f      	cmp	r2, #31
   28c2a:	dd18      	ble.n	28c5e <__aeabi_i2d+0x52>
   28c2c:	4a16      	ldr	r2, [pc, #88]	; (28c88 <__aeabi_i2d+0x7c>)
   28c2e:	1ad2      	subs	r2, r2, r3
   28c30:	4094      	lsls	r4, r2
   28c32:	2200      	movs	r2, #0
   28c34:	0324      	lsls	r4, r4, #12
   28c36:	055b      	lsls	r3, r3, #21
   28c38:	0b24      	lsrs	r4, r4, #12
   28c3a:	0d5b      	lsrs	r3, r3, #21
   28c3c:	2100      	movs	r1, #0
   28c3e:	0010      	movs	r0, r2
   28c40:	0324      	lsls	r4, r4, #12
   28c42:	0d0a      	lsrs	r2, r1, #20
   28c44:	0b24      	lsrs	r4, r4, #12
   28c46:	0512      	lsls	r2, r2, #20
   28c48:	4322      	orrs	r2, r4
   28c4a:	4c10      	ldr	r4, [pc, #64]	; (28c8c <__aeabi_i2d+0x80>)
   28c4c:	051b      	lsls	r3, r3, #20
   28c4e:	4022      	ands	r2, r4
   28c50:	4313      	orrs	r3, r2
   28c52:	005b      	lsls	r3, r3, #1
   28c54:	07ed      	lsls	r5, r5, #31
   28c56:	085b      	lsrs	r3, r3, #1
   28c58:	432b      	orrs	r3, r5
   28c5a:	0019      	movs	r1, r3
   28c5c:	bd70      	pop	{r4, r5, r6, pc}
   28c5e:	0021      	movs	r1, r4
   28c60:	4091      	lsls	r1, r2
   28c62:	000a      	movs	r2, r1
   28c64:	210b      	movs	r1, #11
   28c66:	1a08      	subs	r0, r1, r0
   28c68:	40c4      	lsrs	r4, r0
   28c6a:	055b      	lsls	r3, r3, #21
   28c6c:	0324      	lsls	r4, r4, #12
   28c6e:	0b24      	lsrs	r4, r4, #12
   28c70:	0d5b      	lsrs	r3, r3, #21
   28c72:	e7e3      	b.n	28c3c <__aeabi_i2d+0x30>
   28c74:	2500      	movs	r5, #0
   28c76:	2300      	movs	r3, #0
   28c78:	2400      	movs	r4, #0
   28c7a:	2200      	movs	r2, #0
   28c7c:	e7de      	b.n	28c3c <__aeabi_i2d+0x30>
   28c7e:	46c0      	nop			; (mov r8, r8)
   28c80:	0000041e 	.word	0x0000041e
   28c84:	00000433 	.word	0x00000433
   28c88:	00000413 	.word	0x00000413
   28c8c:	800fffff 	.word	0x800fffff

00028c90 <__aeabi_ui2d>:
   28c90:	b510      	push	{r4, lr}
   28c92:	1e04      	subs	r4, r0, #0
   28c94:	d028      	beq.n	28ce8 <__aeabi_ui2d+0x58>
   28c96:	f000 f885 	bl	28da4 <__clzsi2>
   28c9a:	4b15      	ldr	r3, [pc, #84]	; (28cf0 <__aeabi_ui2d+0x60>)
   28c9c:	4a15      	ldr	r2, [pc, #84]	; (28cf4 <__aeabi_ui2d+0x64>)
   28c9e:	1a1b      	subs	r3, r3, r0
   28ca0:	1ad2      	subs	r2, r2, r3
   28ca2:	2a1f      	cmp	r2, #31
   28ca4:	dd15      	ble.n	28cd2 <__aeabi_ui2d+0x42>
   28ca6:	4a14      	ldr	r2, [pc, #80]	; (28cf8 <__aeabi_ui2d+0x68>)
   28ca8:	1ad2      	subs	r2, r2, r3
   28caa:	4094      	lsls	r4, r2
   28cac:	2200      	movs	r2, #0
   28cae:	0324      	lsls	r4, r4, #12
   28cb0:	055b      	lsls	r3, r3, #21
   28cb2:	0b24      	lsrs	r4, r4, #12
   28cb4:	0d5b      	lsrs	r3, r3, #21
   28cb6:	2100      	movs	r1, #0
   28cb8:	0010      	movs	r0, r2
   28cba:	0324      	lsls	r4, r4, #12
   28cbc:	0d0a      	lsrs	r2, r1, #20
   28cbe:	0b24      	lsrs	r4, r4, #12
   28cc0:	0512      	lsls	r2, r2, #20
   28cc2:	4322      	orrs	r2, r4
   28cc4:	4c0d      	ldr	r4, [pc, #52]	; (28cfc <__aeabi_ui2d+0x6c>)
   28cc6:	051b      	lsls	r3, r3, #20
   28cc8:	4022      	ands	r2, r4
   28cca:	4313      	orrs	r3, r2
   28ccc:	005b      	lsls	r3, r3, #1
   28cce:	0859      	lsrs	r1, r3, #1
   28cd0:	bd10      	pop	{r4, pc}
   28cd2:	0021      	movs	r1, r4
   28cd4:	4091      	lsls	r1, r2
   28cd6:	000a      	movs	r2, r1
   28cd8:	210b      	movs	r1, #11
   28cda:	1a08      	subs	r0, r1, r0
   28cdc:	40c4      	lsrs	r4, r0
   28cde:	055b      	lsls	r3, r3, #21
   28ce0:	0324      	lsls	r4, r4, #12
   28ce2:	0b24      	lsrs	r4, r4, #12
   28ce4:	0d5b      	lsrs	r3, r3, #21
   28ce6:	e7e6      	b.n	28cb6 <__aeabi_ui2d+0x26>
   28ce8:	2300      	movs	r3, #0
   28cea:	2400      	movs	r4, #0
   28cec:	2200      	movs	r2, #0
   28cee:	e7e2      	b.n	28cb6 <__aeabi_ui2d+0x26>
   28cf0:	0000041e 	.word	0x0000041e
   28cf4:	00000433 	.word	0x00000433
   28cf8:	00000413 	.word	0x00000413
   28cfc:	800fffff 	.word	0x800fffff

00028d00 <__aeabi_f2d>:
   28d00:	0041      	lsls	r1, r0, #1
   28d02:	0e09      	lsrs	r1, r1, #24
   28d04:	1c4b      	adds	r3, r1, #1
   28d06:	b570      	push	{r4, r5, r6, lr}
   28d08:	b2db      	uxtb	r3, r3
   28d0a:	0246      	lsls	r6, r0, #9
   28d0c:	0a75      	lsrs	r5, r6, #9
   28d0e:	0fc4      	lsrs	r4, r0, #31
   28d10:	2b01      	cmp	r3, #1
   28d12:	dd14      	ble.n	28d3e <__aeabi_f2d+0x3e>
   28d14:	23e0      	movs	r3, #224	; 0xe0
   28d16:	009b      	lsls	r3, r3, #2
   28d18:	076d      	lsls	r5, r5, #29
   28d1a:	0b36      	lsrs	r6, r6, #12
   28d1c:	18cb      	adds	r3, r1, r3
   28d1e:	2100      	movs	r1, #0
   28d20:	0d0a      	lsrs	r2, r1, #20
   28d22:	0028      	movs	r0, r5
   28d24:	0512      	lsls	r2, r2, #20
   28d26:	4d1c      	ldr	r5, [pc, #112]	; (28d98 <__aeabi_f2d+0x98>)
   28d28:	4332      	orrs	r2, r6
   28d2a:	055b      	lsls	r3, r3, #21
   28d2c:	402a      	ands	r2, r5
   28d2e:	085b      	lsrs	r3, r3, #1
   28d30:	4313      	orrs	r3, r2
   28d32:	005b      	lsls	r3, r3, #1
   28d34:	07e4      	lsls	r4, r4, #31
   28d36:	085b      	lsrs	r3, r3, #1
   28d38:	4323      	orrs	r3, r4
   28d3a:	0019      	movs	r1, r3
   28d3c:	bd70      	pop	{r4, r5, r6, pc}
   28d3e:	2900      	cmp	r1, #0
   28d40:	d114      	bne.n	28d6c <__aeabi_f2d+0x6c>
   28d42:	2d00      	cmp	r5, #0
   28d44:	d01e      	beq.n	28d84 <__aeabi_f2d+0x84>
   28d46:	0028      	movs	r0, r5
   28d48:	f000 f82c 	bl	28da4 <__clzsi2>
   28d4c:	280a      	cmp	r0, #10
   28d4e:	dc1c      	bgt.n	28d8a <__aeabi_f2d+0x8a>
   28d50:	230b      	movs	r3, #11
   28d52:	002a      	movs	r2, r5
   28d54:	1a1b      	subs	r3, r3, r0
   28d56:	40da      	lsrs	r2, r3
   28d58:	0003      	movs	r3, r0
   28d5a:	3315      	adds	r3, #21
   28d5c:	409d      	lsls	r5, r3
   28d5e:	4b0f      	ldr	r3, [pc, #60]	; (28d9c <__aeabi_f2d+0x9c>)
   28d60:	0312      	lsls	r2, r2, #12
   28d62:	1a1b      	subs	r3, r3, r0
   28d64:	055b      	lsls	r3, r3, #21
   28d66:	0b16      	lsrs	r6, r2, #12
   28d68:	0d5b      	lsrs	r3, r3, #21
   28d6a:	e7d8      	b.n	28d1e <__aeabi_f2d+0x1e>
   28d6c:	2d00      	cmp	r5, #0
   28d6e:	d006      	beq.n	28d7e <__aeabi_f2d+0x7e>
   28d70:	0b32      	lsrs	r2, r6, #12
   28d72:	2680      	movs	r6, #128	; 0x80
   28d74:	0336      	lsls	r6, r6, #12
   28d76:	076d      	lsls	r5, r5, #29
   28d78:	4316      	orrs	r6, r2
   28d7a:	4b09      	ldr	r3, [pc, #36]	; (28da0 <__aeabi_f2d+0xa0>)
   28d7c:	e7cf      	b.n	28d1e <__aeabi_f2d+0x1e>
   28d7e:	4b08      	ldr	r3, [pc, #32]	; (28da0 <__aeabi_f2d+0xa0>)
   28d80:	2600      	movs	r6, #0
   28d82:	e7cc      	b.n	28d1e <__aeabi_f2d+0x1e>
   28d84:	2300      	movs	r3, #0
   28d86:	2600      	movs	r6, #0
   28d88:	e7c9      	b.n	28d1e <__aeabi_f2d+0x1e>
   28d8a:	0003      	movs	r3, r0
   28d8c:	002a      	movs	r2, r5
   28d8e:	3b0b      	subs	r3, #11
   28d90:	409a      	lsls	r2, r3
   28d92:	2500      	movs	r5, #0
   28d94:	e7e3      	b.n	28d5e <__aeabi_f2d+0x5e>
   28d96:	46c0      	nop			; (mov r8, r8)
   28d98:	800fffff 	.word	0x800fffff
   28d9c:	00000389 	.word	0x00000389
   28da0:	000007ff 	.word	0x000007ff

00028da4 <__clzsi2>:
   28da4:	211c      	movs	r1, #28
   28da6:	2301      	movs	r3, #1
   28da8:	041b      	lsls	r3, r3, #16
   28daa:	4298      	cmp	r0, r3
   28dac:	d301      	bcc.n	28db2 <__clzsi2+0xe>
   28dae:	0c00      	lsrs	r0, r0, #16
   28db0:	3910      	subs	r1, #16
   28db2:	0a1b      	lsrs	r3, r3, #8
   28db4:	4298      	cmp	r0, r3
   28db6:	d301      	bcc.n	28dbc <__clzsi2+0x18>
   28db8:	0a00      	lsrs	r0, r0, #8
   28dba:	3908      	subs	r1, #8
   28dbc:	091b      	lsrs	r3, r3, #4
   28dbe:	4298      	cmp	r0, r3
   28dc0:	d301      	bcc.n	28dc6 <__clzsi2+0x22>
   28dc2:	0900      	lsrs	r0, r0, #4
   28dc4:	3904      	subs	r1, #4
   28dc6:	a202      	add	r2, pc, #8	; (adr r2, 28dd0 <__clzsi2+0x2c>)
   28dc8:	5c10      	ldrb	r0, [r2, r0]
   28dca:	1840      	adds	r0, r0, r1
   28dcc:	4770      	bx	lr
   28dce:	46c0      	nop			; (mov r8, r8)
   28dd0:	02020304 	.word	0x02020304
   28dd4:	01010101 	.word	0x01010101
	...

00028de0 <__clzdi2>:
   28de0:	b510      	push	{r4, lr}
   28de2:	2900      	cmp	r1, #0
   28de4:	d103      	bne.n	28dee <__clzdi2+0xe>
   28de6:	f7ff ffdd 	bl	28da4 <__clzsi2>
   28dea:	3020      	adds	r0, #32
   28dec:	e002      	b.n	28df4 <__clzdi2+0x14>
   28dee:	1c08      	adds	r0, r1, #0
   28df0:	f7ff ffd8 	bl	28da4 <__clzsi2>
   28df4:	bd10      	pop	{r4, pc}
   28df6:	46c0      	nop			; (mov r8, r8)

00028df8 <atoi>:
   28df8:	b510      	push	{r4, lr}
   28dfa:	220a      	movs	r2, #10
   28dfc:	2100      	movs	r1, #0
   28dfe:	f000 fadd 	bl	293bc <strtol>
   28e02:	bd10      	pop	{r4, pc}

00028e04 <calloc>:
   28e04:	b510      	push	{r4, lr}
   28e06:	4b03      	ldr	r3, [pc, #12]	; (28e14 <calloc+0x10>)
   28e08:	000a      	movs	r2, r1
   28e0a:	0001      	movs	r1, r0
   28e0c:	6818      	ldr	r0, [r3, #0]
   28e0e:	f000 f888 	bl	28f22 <_calloc_r>
   28e12:	bd10      	pop	{r4, pc}
   28e14:	2000002c 	.word	0x2000002c

00028e18 <__errno>:
   28e18:	4b01      	ldr	r3, [pc, #4]	; (28e20 <__errno+0x8>)
   28e1a:	6818      	ldr	r0, [r3, #0]
   28e1c:	4770      	bx	lr
   28e1e:	46c0      	nop			; (mov r8, r8)
   28e20:	2000002c 	.word	0x2000002c

00028e24 <__libc_init_array>:
   28e24:	b570      	push	{r4, r5, r6, lr}
   28e26:	2600      	movs	r6, #0
   28e28:	4d0c      	ldr	r5, [pc, #48]	; (28e5c <__libc_init_array+0x38>)
   28e2a:	4c0d      	ldr	r4, [pc, #52]	; (28e60 <__libc_init_array+0x3c>)
   28e2c:	1b64      	subs	r4, r4, r5
   28e2e:	10a4      	asrs	r4, r4, #2
   28e30:	42a6      	cmp	r6, r4
   28e32:	d109      	bne.n	28e48 <__libc_init_array+0x24>
   28e34:	2600      	movs	r6, #0
   28e36:	f002 f931 	bl	2b09c <_init>
   28e3a:	4d0a      	ldr	r5, [pc, #40]	; (28e64 <__libc_init_array+0x40>)
   28e3c:	4c0a      	ldr	r4, [pc, #40]	; (28e68 <__libc_init_array+0x44>)
   28e3e:	1b64      	subs	r4, r4, r5
   28e40:	10a4      	asrs	r4, r4, #2
   28e42:	42a6      	cmp	r6, r4
   28e44:	d105      	bne.n	28e52 <__libc_init_array+0x2e>
   28e46:	bd70      	pop	{r4, r5, r6, pc}
   28e48:	00b3      	lsls	r3, r6, #2
   28e4a:	58eb      	ldr	r3, [r5, r3]
   28e4c:	4798      	blx	r3
   28e4e:	3601      	adds	r6, #1
   28e50:	e7ee      	b.n	28e30 <__libc_init_array+0xc>
   28e52:	00b3      	lsls	r3, r6, #2
   28e54:	58eb      	ldr	r3, [r5, r3]
   28e56:	4798      	blx	r3
   28e58:	3601      	adds	r6, #1
   28e5a:	e7f2      	b.n	28e42 <__libc_init_array+0x1e>
   28e5c:	0002b0a8 	.word	0x0002b0a8
   28e60:	0002b0a8 	.word	0x0002b0a8
   28e64:	0002b0a8 	.word	0x0002b0a8
   28e68:	0002b0ac 	.word	0x0002b0ac

00028e6c <__locale_ctype_ptr_l>:
   28e6c:	30ec      	adds	r0, #236	; 0xec
   28e6e:	6800      	ldr	r0, [r0, #0]
   28e70:	4770      	bx	lr
	...

00028e74 <__locale_ctype_ptr>:
   28e74:	4b04      	ldr	r3, [pc, #16]	; (28e88 <__locale_ctype_ptr+0x14>)
   28e76:	681b      	ldr	r3, [r3, #0]
   28e78:	6a1b      	ldr	r3, [r3, #32]
   28e7a:	2b00      	cmp	r3, #0
   28e7c:	d100      	bne.n	28e80 <__locale_ctype_ptr+0xc>
   28e7e:	4b03      	ldr	r3, [pc, #12]	; (28e8c <__locale_ctype_ptr+0x18>)
   28e80:	33ec      	adds	r3, #236	; 0xec
   28e82:	6818      	ldr	r0, [r3, #0]
   28e84:	4770      	bx	lr
   28e86:	46c0      	nop			; (mov r8, r8)
   28e88:	2000002c 	.word	0x2000002c
   28e8c:	20000090 	.word	0x20000090

00028e90 <malloc>:
   28e90:	b510      	push	{r4, lr}
   28e92:	4b03      	ldr	r3, [pc, #12]	; (28ea0 <malloc+0x10>)
   28e94:	0001      	movs	r1, r0
   28e96:	6818      	ldr	r0, [r3, #0]
   28e98:	f000 f89c 	bl	28fd4 <_malloc_r>
   28e9c:	bd10      	pop	{r4, pc}
   28e9e:	46c0      	nop			; (mov r8, r8)
   28ea0:	2000002c 	.word	0x2000002c

00028ea4 <free>:
   28ea4:	b510      	push	{r4, lr}
   28ea6:	4b03      	ldr	r3, [pc, #12]	; (28eb4 <free+0x10>)
   28ea8:	0001      	movs	r1, r0
   28eaa:	6818      	ldr	r0, [r3, #0]
   28eac:	f000 f848 	bl	28f40 <_free_r>
   28eb0:	bd10      	pop	{r4, pc}
   28eb2:	46c0      	nop			; (mov r8, r8)
   28eb4:	2000002c 	.word	0x2000002c

00028eb8 <__ascii_mbtowc>:
   28eb8:	b082      	sub	sp, #8
   28eba:	2900      	cmp	r1, #0
   28ebc:	d100      	bne.n	28ec0 <__ascii_mbtowc+0x8>
   28ebe:	a901      	add	r1, sp, #4
   28ec0:	1e10      	subs	r0, r2, #0
   28ec2:	d006      	beq.n	28ed2 <__ascii_mbtowc+0x1a>
   28ec4:	2b00      	cmp	r3, #0
   28ec6:	d006      	beq.n	28ed6 <__ascii_mbtowc+0x1e>
   28ec8:	7813      	ldrb	r3, [r2, #0]
   28eca:	600b      	str	r3, [r1, #0]
   28ecc:	7810      	ldrb	r0, [r2, #0]
   28ece:	1e43      	subs	r3, r0, #1
   28ed0:	4198      	sbcs	r0, r3
   28ed2:	b002      	add	sp, #8
   28ed4:	4770      	bx	lr
   28ed6:	2002      	movs	r0, #2
   28ed8:	4240      	negs	r0, r0
   28eda:	e7fa      	b.n	28ed2 <__ascii_mbtowc+0x1a>

00028edc <memcpy>:
   28edc:	2300      	movs	r3, #0
   28ede:	b510      	push	{r4, lr}
   28ee0:	429a      	cmp	r2, r3
   28ee2:	d100      	bne.n	28ee6 <memcpy+0xa>
   28ee4:	bd10      	pop	{r4, pc}
   28ee6:	5ccc      	ldrb	r4, [r1, r3]
   28ee8:	54c4      	strb	r4, [r0, r3]
   28eea:	3301      	adds	r3, #1
   28eec:	e7f8      	b.n	28ee0 <memcpy+0x4>

00028eee <memmove>:
   28eee:	b510      	push	{r4, lr}
   28ef0:	4288      	cmp	r0, r1
   28ef2:	d902      	bls.n	28efa <memmove+0xc>
   28ef4:	188b      	adds	r3, r1, r2
   28ef6:	4298      	cmp	r0, r3
   28ef8:	d308      	bcc.n	28f0c <memmove+0x1e>
   28efa:	2300      	movs	r3, #0
   28efc:	429a      	cmp	r2, r3
   28efe:	d007      	beq.n	28f10 <memmove+0x22>
   28f00:	5ccc      	ldrb	r4, [r1, r3]
   28f02:	54c4      	strb	r4, [r0, r3]
   28f04:	3301      	adds	r3, #1
   28f06:	e7f9      	b.n	28efc <memmove+0xe>
   28f08:	5c8b      	ldrb	r3, [r1, r2]
   28f0a:	5483      	strb	r3, [r0, r2]
   28f0c:	3a01      	subs	r2, #1
   28f0e:	d2fb      	bcs.n	28f08 <memmove+0x1a>
   28f10:	bd10      	pop	{r4, pc}

00028f12 <memset>:
   28f12:	0003      	movs	r3, r0
   28f14:	1882      	adds	r2, r0, r2
   28f16:	4293      	cmp	r3, r2
   28f18:	d100      	bne.n	28f1c <memset+0xa>
   28f1a:	4770      	bx	lr
   28f1c:	7019      	strb	r1, [r3, #0]
   28f1e:	3301      	adds	r3, #1
   28f20:	e7f9      	b.n	28f16 <memset+0x4>

00028f22 <_calloc_r>:
   28f22:	434a      	muls	r2, r1
   28f24:	b570      	push	{r4, r5, r6, lr}
   28f26:	0011      	movs	r1, r2
   28f28:	0014      	movs	r4, r2
   28f2a:	f000 f853 	bl	28fd4 <_malloc_r>
   28f2e:	1e05      	subs	r5, r0, #0
   28f30:	d003      	beq.n	28f3a <_calloc_r+0x18>
   28f32:	0022      	movs	r2, r4
   28f34:	2100      	movs	r1, #0
   28f36:	f7ff ffec 	bl	28f12 <memset>
   28f3a:	0028      	movs	r0, r5
   28f3c:	bd70      	pop	{r4, r5, r6, pc}
	...

00028f40 <_free_r>:
   28f40:	b570      	push	{r4, r5, r6, lr}
   28f42:	0005      	movs	r5, r0
   28f44:	2900      	cmp	r1, #0
   28f46:	d010      	beq.n	28f6a <_free_r+0x2a>
   28f48:	1f0c      	subs	r4, r1, #4
   28f4a:	6823      	ldr	r3, [r4, #0]
   28f4c:	2b00      	cmp	r3, #0
   28f4e:	da00      	bge.n	28f52 <_free_r+0x12>
   28f50:	18e4      	adds	r4, r4, r3
   28f52:	0028      	movs	r0, r5
   28f54:	f000 fab4 	bl	294c0 <__malloc_lock>
   28f58:	4a1d      	ldr	r2, [pc, #116]	; (28fd0 <_free_r+0x90>)
   28f5a:	6813      	ldr	r3, [r2, #0]
   28f5c:	2b00      	cmp	r3, #0
   28f5e:	d105      	bne.n	28f6c <_free_r+0x2c>
   28f60:	6063      	str	r3, [r4, #4]
   28f62:	6014      	str	r4, [r2, #0]
   28f64:	0028      	movs	r0, r5
   28f66:	f000 faac 	bl	294c2 <__malloc_unlock>
   28f6a:	bd70      	pop	{r4, r5, r6, pc}
   28f6c:	42a3      	cmp	r3, r4
   28f6e:	d909      	bls.n	28f84 <_free_r+0x44>
   28f70:	6821      	ldr	r1, [r4, #0]
   28f72:	1860      	adds	r0, r4, r1
   28f74:	4283      	cmp	r3, r0
   28f76:	d1f3      	bne.n	28f60 <_free_r+0x20>
   28f78:	6818      	ldr	r0, [r3, #0]
   28f7a:	685b      	ldr	r3, [r3, #4]
   28f7c:	1841      	adds	r1, r0, r1
   28f7e:	6021      	str	r1, [r4, #0]
   28f80:	e7ee      	b.n	28f60 <_free_r+0x20>
   28f82:	0013      	movs	r3, r2
   28f84:	685a      	ldr	r2, [r3, #4]
   28f86:	2a00      	cmp	r2, #0
   28f88:	d001      	beq.n	28f8e <_free_r+0x4e>
   28f8a:	42a2      	cmp	r2, r4
   28f8c:	d9f9      	bls.n	28f82 <_free_r+0x42>
   28f8e:	6819      	ldr	r1, [r3, #0]
   28f90:	1858      	adds	r0, r3, r1
   28f92:	42a0      	cmp	r0, r4
   28f94:	d10b      	bne.n	28fae <_free_r+0x6e>
   28f96:	6820      	ldr	r0, [r4, #0]
   28f98:	1809      	adds	r1, r1, r0
   28f9a:	1858      	adds	r0, r3, r1
   28f9c:	6019      	str	r1, [r3, #0]
   28f9e:	4282      	cmp	r2, r0
   28fa0:	d1e0      	bne.n	28f64 <_free_r+0x24>
   28fa2:	6810      	ldr	r0, [r2, #0]
   28fa4:	6852      	ldr	r2, [r2, #4]
   28fa6:	1841      	adds	r1, r0, r1
   28fa8:	6019      	str	r1, [r3, #0]
   28faa:	605a      	str	r2, [r3, #4]
   28fac:	e7da      	b.n	28f64 <_free_r+0x24>
   28fae:	42a0      	cmp	r0, r4
   28fb0:	d902      	bls.n	28fb8 <_free_r+0x78>
   28fb2:	230c      	movs	r3, #12
   28fb4:	602b      	str	r3, [r5, #0]
   28fb6:	e7d5      	b.n	28f64 <_free_r+0x24>
   28fb8:	6821      	ldr	r1, [r4, #0]
   28fba:	1860      	adds	r0, r4, r1
   28fbc:	4282      	cmp	r2, r0
   28fbe:	d103      	bne.n	28fc8 <_free_r+0x88>
   28fc0:	6810      	ldr	r0, [r2, #0]
   28fc2:	6852      	ldr	r2, [r2, #4]
   28fc4:	1841      	adds	r1, r0, r1
   28fc6:	6021      	str	r1, [r4, #0]
   28fc8:	6062      	str	r2, [r4, #4]
   28fca:	605c      	str	r4, [r3, #4]
   28fcc:	e7ca      	b.n	28f64 <_free_r+0x24>
   28fce:	46c0      	nop			; (mov r8, r8)
   28fd0:	20000514 	.word	0x20000514

00028fd4 <_malloc_r>:
   28fd4:	2303      	movs	r3, #3
   28fd6:	b570      	push	{r4, r5, r6, lr}
   28fd8:	1ccd      	adds	r5, r1, #3
   28fda:	439d      	bics	r5, r3
   28fdc:	3508      	adds	r5, #8
   28fde:	0006      	movs	r6, r0
   28fe0:	2d0c      	cmp	r5, #12
   28fe2:	d21e      	bcs.n	29022 <_malloc_r+0x4e>
   28fe4:	250c      	movs	r5, #12
   28fe6:	42a9      	cmp	r1, r5
   28fe8:	d81d      	bhi.n	29026 <_malloc_r+0x52>
   28fea:	0030      	movs	r0, r6
   28fec:	f000 fa68 	bl	294c0 <__malloc_lock>
   28ff0:	4a25      	ldr	r2, [pc, #148]	; (29088 <_malloc_r+0xb4>)
   28ff2:	6814      	ldr	r4, [r2, #0]
   28ff4:	0021      	movs	r1, r4
   28ff6:	2900      	cmp	r1, #0
   28ff8:	d119      	bne.n	2902e <_malloc_r+0x5a>
   28ffa:	4c24      	ldr	r4, [pc, #144]	; (2908c <_malloc_r+0xb8>)
   28ffc:	6823      	ldr	r3, [r4, #0]
   28ffe:	2b00      	cmp	r3, #0
   29000:	d103      	bne.n	2900a <_malloc_r+0x36>
   29002:	0030      	movs	r0, r6
   29004:	f000 f844 	bl	29090 <_sbrk_r>
   29008:	6020      	str	r0, [r4, #0]
   2900a:	0029      	movs	r1, r5
   2900c:	0030      	movs	r0, r6
   2900e:	f000 f83f 	bl	29090 <_sbrk_r>
   29012:	1c43      	adds	r3, r0, #1
   29014:	d12c      	bne.n	29070 <_malloc_r+0x9c>
   29016:	230c      	movs	r3, #12
   29018:	0030      	movs	r0, r6
   2901a:	6033      	str	r3, [r6, #0]
   2901c:	f000 fa51 	bl	294c2 <__malloc_unlock>
   29020:	e003      	b.n	2902a <_malloc_r+0x56>
   29022:	2d00      	cmp	r5, #0
   29024:	dadf      	bge.n	28fe6 <_malloc_r+0x12>
   29026:	230c      	movs	r3, #12
   29028:	6033      	str	r3, [r6, #0]
   2902a:	2000      	movs	r0, #0
   2902c:	bd70      	pop	{r4, r5, r6, pc}
   2902e:	680b      	ldr	r3, [r1, #0]
   29030:	1b5b      	subs	r3, r3, r5
   29032:	d41a      	bmi.n	2906a <_malloc_r+0x96>
   29034:	2b0b      	cmp	r3, #11
   29036:	d903      	bls.n	29040 <_malloc_r+0x6c>
   29038:	600b      	str	r3, [r1, #0]
   2903a:	18cc      	adds	r4, r1, r3
   2903c:	6025      	str	r5, [r4, #0]
   2903e:	e003      	b.n	29048 <_malloc_r+0x74>
   29040:	428c      	cmp	r4, r1
   29042:	d10e      	bne.n	29062 <_malloc_r+0x8e>
   29044:	6863      	ldr	r3, [r4, #4]
   29046:	6013      	str	r3, [r2, #0]
   29048:	0030      	movs	r0, r6
   2904a:	f000 fa3a 	bl	294c2 <__malloc_unlock>
   2904e:	0020      	movs	r0, r4
   29050:	2207      	movs	r2, #7
   29052:	300b      	adds	r0, #11
   29054:	1d23      	adds	r3, r4, #4
   29056:	4390      	bics	r0, r2
   29058:	1ac3      	subs	r3, r0, r3
   2905a:	d0e7      	beq.n	2902c <_malloc_r+0x58>
   2905c:	425a      	negs	r2, r3
   2905e:	50e2      	str	r2, [r4, r3]
   29060:	e7e4      	b.n	2902c <_malloc_r+0x58>
   29062:	684b      	ldr	r3, [r1, #4]
   29064:	6063      	str	r3, [r4, #4]
   29066:	000c      	movs	r4, r1
   29068:	e7ee      	b.n	29048 <_malloc_r+0x74>
   2906a:	000c      	movs	r4, r1
   2906c:	6849      	ldr	r1, [r1, #4]
   2906e:	e7c2      	b.n	28ff6 <_malloc_r+0x22>
   29070:	2303      	movs	r3, #3
   29072:	1cc4      	adds	r4, r0, #3
   29074:	439c      	bics	r4, r3
   29076:	42a0      	cmp	r0, r4
   29078:	d0e0      	beq.n	2903c <_malloc_r+0x68>
   2907a:	1a21      	subs	r1, r4, r0
   2907c:	0030      	movs	r0, r6
   2907e:	f000 f807 	bl	29090 <_sbrk_r>
   29082:	1c43      	adds	r3, r0, #1
   29084:	d1da      	bne.n	2903c <_malloc_r+0x68>
   29086:	e7c6      	b.n	29016 <_malloc_r+0x42>
   29088:	20000514 	.word	0x20000514
   2908c:	20000518 	.word	0x20000518

00029090 <_sbrk_r>:
   29090:	2300      	movs	r3, #0
   29092:	b570      	push	{r4, r5, r6, lr}
   29094:	4c06      	ldr	r4, [pc, #24]	; (290b0 <_sbrk_r+0x20>)
   29096:	0005      	movs	r5, r0
   29098:	0008      	movs	r0, r1
   2909a:	6023      	str	r3, [r4, #0]
   2909c:	f7fb ff44 	bl	24f28 <_sbrk>
   290a0:	1c43      	adds	r3, r0, #1
   290a2:	d103      	bne.n	290ac <_sbrk_r+0x1c>
   290a4:	6823      	ldr	r3, [r4, #0]
   290a6:	2b00      	cmp	r3, #0
   290a8:	d000      	beq.n	290ac <_sbrk_r+0x1c>
   290aa:	602b      	str	r3, [r5, #0]
   290ac:	bd70      	pop	{r4, r5, r6, pc}
   290ae:	46c0      	nop			; (mov r8, r8)
   290b0:	20000988 	.word	0x20000988

000290b4 <sniprintf>:
   290b4:	b40c      	push	{r2, r3}
   290b6:	b530      	push	{r4, r5, lr}
   290b8:	4b16      	ldr	r3, [pc, #88]	; (29114 <sniprintf+0x60>)
   290ba:	b09d      	sub	sp, #116	; 0x74
   290bc:	1e0c      	subs	r4, r1, #0
   290be:	681d      	ldr	r5, [r3, #0]
   290c0:	da08      	bge.n	290d4 <sniprintf+0x20>
   290c2:	238b      	movs	r3, #139	; 0x8b
   290c4:	2001      	movs	r0, #1
   290c6:	602b      	str	r3, [r5, #0]
   290c8:	4240      	negs	r0, r0
   290ca:	b01d      	add	sp, #116	; 0x74
   290cc:	bc30      	pop	{r4, r5}
   290ce:	bc08      	pop	{r3}
   290d0:	b002      	add	sp, #8
   290d2:	4718      	bx	r3
   290d4:	2382      	movs	r3, #130	; 0x82
   290d6:	a902      	add	r1, sp, #8
   290d8:	009b      	lsls	r3, r3, #2
   290da:	818b      	strh	r3, [r1, #12]
   290dc:	2300      	movs	r3, #0
   290de:	9002      	str	r0, [sp, #8]
   290e0:	6108      	str	r0, [r1, #16]
   290e2:	429c      	cmp	r4, r3
   290e4:	d000      	beq.n	290e8 <sniprintf+0x34>
   290e6:	1e63      	subs	r3, r4, #1
   290e8:	608b      	str	r3, [r1, #8]
   290ea:	614b      	str	r3, [r1, #20]
   290ec:	2301      	movs	r3, #1
   290ee:	425b      	negs	r3, r3
   290f0:	81cb      	strh	r3, [r1, #14]
   290f2:	9a20      	ldr	r2, [sp, #128]	; 0x80
   290f4:	ab21      	add	r3, sp, #132	; 0x84
   290f6:	0028      	movs	r0, r5
   290f8:	9301      	str	r3, [sp, #4]
   290fa:	f000 fa45 	bl	29588 <_svfiprintf_r>
   290fe:	1c43      	adds	r3, r0, #1
   29100:	da01      	bge.n	29106 <sniprintf+0x52>
   29102:	238b      	movs	r3, #139	; 0x8b
   29104:	602b      	str	r3, [r5, #0]
   29106:	2c00      	cmp	r4, #0
   29108:	d0df      	beq.n	290ca <sniprintf+0x16>
   2910a:	2300      	movs	r3, #0
   2910c:	9a02      	ldr	r2, [sp, #8]
   2910e:	7013      	strb	r3, [r2, #0]
   29110:	e7db      	b.n	290ca <sniprintf+0x16>
   29112:	46c0      	nop			; (mov r8, r8)
   29114:	2000002c 	.word	0x2000002c

00029118 <siprintf>:
   29118:	b40e      	push	{r1, r2, r3}
   2911a:	b510      	push	{r4, lr}
   2911c:	b09d      	sub	sp, #116	; 0x74
   2911e:	a902      	add	r1, sp, #8
   29120:	9002      	str	r0, [sp, #8]
   29122:	6108      	str	r0, [r1, #16]
   29124:	480b      	ldr	r0, [pc, #44]	; (29154 <siprintf+0x3c>)
   29126:	2482      	movs	r4, #130	; 0x82
   29128:	6088      	str	r0, [r1, #8]
   2912a:	6148      	str	r0, [r1, #20]
   2912c:	2001      	movs	r0, #1
   2912e:	4240      	negs	r0, r0
   29130:	ab1f      	add	r3, sp, #124	; 0x7c
   29132:	81c8      	strh	r0, [r1, #14]
   29134:	4808      	ldr	r0, [pc, #32]	; (29158 <siprintf+0x40>)
   29136:	cb04      	ldmia	r3!, {r2}
   29138:	00a4      	lsls	r4, r4, #2
   2913a:	6800      	ldr	r0, [r0, #0]
   2913c:	9301      	str	r3, [sp, #4]
   2913e:	818c      	strh	r4, [r1, #12]
   29140:	f000 fa22 	bl	29588 <_svfiprintf_r>
   29144:	2300      	movs	r3, #0
   29146:	9a02      	ldr	r2, [sp, #8]
   29148:	7013      	strb	r3, [r2, #0]
   2914a:	b01d      	add	sp, #116	; 0x74
   2914c:	bc10      	pop	{r4}
   2914e:	bc08      	pop	{r3}
   29150:	b003      	add	sp, #12
   29152:	4718      	bx	r3
   29154:	7fffffff 	.word	0x7fffffff
   29158:	2000002c 	.word	0x2000002c

0002915c <strcat>:
   2915c:	0002      	movs	r2, r0
   2915e:	b510      	push	{r4, lr}
   29160:	7813      	ldrb	r3, [r2, #0]
   29162:	2b00      	cmp	r3, #0
   29164:	d105      	bne.n	29172 <strcat+0x16>
   29166:	5ccc      	ldrb	r4, [r1, r3]
   29168:	54d4      	strb	r4, [r2, r3]
   2916a:	3301      	adds	r3, #1
   2916c:	2c00      	cmp	r4, #0
   2916e:	d1fa      	bne.n	29166 <strcat+0xa>
   29170:	bd10      	pop	{r4, pc}
   29172:	3201      	adds	r2, #1
   29174:	e7f4      	b.n	29160 <strcat+0x4>

00029176 <strchr>:
   29176:	b2c9      	uxtb	r1, r1
   29178:	7803      	ldrb	r3, [r0, #0]
   2917a:	2b00      	cmp	r3, #0
   2917c:	d004      	beq.n	29188 <strchr+0x12>
   2917e:	4299      	cmp	r1, r3
   29180:	d100      	bne.n	29184 <strchr+0xe>
   29182:	4770      	bx	lr
   29184:	3001      	adds	r0, #1
   29186:	e7f7      	b.n	29178 <strchr+0x2>
   29188:	424b      	negs	r3, r1
   2918a:	4159      	adcs	r1, r3
   2918c:	4249      	negs	r1, r1
   2918e:	4008      	ands	r0, r1
   29190:	e7f7      	b.n	29182 <strchr+0xc>

00029192 <strcpy>:
   29192:	1c03      	adds	r3, r0, #0
   29194:	780a      	ldrb	r2, [r1, #0]
   29196:	3101      	adds	r1, #1
   29198:	701a      	strb	r2, [r3, #0]
   2919a:	3301      	adds	r3, #1
   2919c:	2a00      	cmp	r2, #0
   2919e:	d1f9      	bne.n	29194 <strcpy+0x2>
   291a0:	4770      	bx	lr

000291a2 <strlen>:
   291a2:	2300      	movs	r3, #0
   291a4:	5cc2      	ldrb	r2, [r0, r3]
   291a6:	3301      	adds	r3, #1
   291a8:	2a00      	cmp	r2, #0
   291aa:	d1fb      	bne.n	291a4 <strlen+0x2>
   291ac:	1e58      	subs	r0, r3, #1
   291ae:	4770      	bx	lr

000291b0 <strncmp>:
   291b0:	2300      	movs	r3, #0
   291b2:	b530      	push	{r4, r5, lr}
   291b4:	429a      	cmp	r2, r3
   291b6:	d00a      	beq.n	291ce <strncmp+0x1e>
   291b8:	3a01      	subs	r2, #1
   291ba:	5cc4      	ldrb	r4, [r0, r3]
   291bc:	5ccd      	ldrb	r5, [r1, r3]
   291be:	42ac      	cmp	r4, r5
   291c0:	d104      	bne.n	291cc <strncmp+0x1c>
   291c2:	429a      	cmp	r2, r3
   291c4:	d002      	beq.n	291cc <strncmp+0x1c>
   291c6:	3301      	adds	r3, #1
   291c8:	2c00      	cmp	r4, #0
   291ca:	d1f6      	bne.n	291ba <strncmp+0xa>
   291cc:	1b63      	subs	r3, r4, r5
   291ce:	0018      	movs	r0, r3
   291d0:	bd30      	pop	{r4, r5, pc}

000291d2 <strstr>:
   291d2:	b510      	push	{r4, lr}
   291d4:	0002      	movs	r2, r0
   291d6:	7800      	ldrb	r0, [r0, #0]
   291d8:	2800      	cmp	r0, #0
   291da:	d104      	bne.n	291e6 <strstr+0x14>
   291dc:	7809      	ldrb	r1, [r1, #0]
   291de:	2900      	cmp	r1, #0
   291e0:	d00d      	beq.n	291fe <strstr+0x2c>
   291e2:	bd10      	pop	{r4, pc}
   291e4:	3201      	adds	r2, #1
   291e6:	7810      	ldrb	r0, [r2, #0]
   291e8:	2800      	cmp	r0, #0
   291ea:	d0fa      	beq.n	291e2 <strstr+0x10>
   291ec:	2300      	movs	r3, #0
   291ee:	5cc8      	ldrb	r0, [r1, r3]
   291f0:	2800      	cmp	r0, #0
   291f2:	d004      	beq.n	291fe <strstr+0x2c>
   291f4:	5cd4      	ldrb	r4, [r2, r3]
   291f6:	4284      	cmp	r4, r0
   291f8:	d1f4      	bne.n	291e4 <strstr+0x12>
   291fa:	3301      	adds	r3, #1
   291fc:	e7f7      	b.n	291ee <strstr+0x1c>
   291fe:	0010      	movs	r0, r2
   29200:	e7ef      	b.n	291e2 <strstr+0x10>
	...

00029204 <strtok>:
   29204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29206:	4b12      	ldr	r3, [pc, #72]	; (29250 <strtok+0x4c>)
   29208:	0006      	movs	r6, r0
   2920a:	681d      	ldr	r5, [r3, #0]
   2920c:	000f      	movs	r7, r1
   2920e:	6dac      	ldr	r4, [r5, #88]	; 0x58
   29210:	2c00      	cmp	r4, #0
   29212:	d116      	bne.n	29242 <strtok+0x3e>
   29214:	2050      	movs	r0, #80	; 0x50
   29216:	f7ff fe3b 	bl	28e90 <malloc>
   2921a:	65a8      	str	r0, [r5, #88]	; 0x58
   2921c:	6004      	str	r4, [r0, #0]
   2921e:	6044      	str	r4, [r0, #4]
   29220:	6084      	str	r4, [r0, #8]
   29222:	60c4      	str	r4, [r0, #12]
   29224:	6104      	str	r4, [r0, #16]
   29226:	6144      	str	r4, [r0, #20]
   29228:	6184      	str	r4, [r0, #24]
   2922a:	6284      	str	r4, [r0, #40]	; 0x28
   2922c:	62c4      	str	r4, [r0, #44]	; 0x2c
   2922e:	6304      	str	r4, [r0, #48]	; 0x30
   29230:	6344      	str	r4, [r0, #52]	; 0x34
   29232:	6384      	str	r4, [r0, #56]	; 0x38
   29234:	63c4      	str	r4, [r0, #60]	; 0x3c
   29236:	6404      	str	r4, [r0, #64]	; 0x40
   29238:	6444      	str	r4, [r0, #68]	; 0x44
   2923a:	6484      	str	r4, [r0, #72]	; 0x48
   2923c:	64c4      	str	r4, [r0, #76]	; 0x4c
   2923e:	7704      	strb	r4, [r0, #28]
   29240:	6244      	str	r4, [r0, #36]	; 0x24
   29242:	6daa      	ldr	r2, [r5, #88]	; 0x58
   29244:	0039      	movs	r1, r7
   29246:	0030      	movs	r0, r6
   29248:	2301      	movs	r3, #1
   2924a:	f000 f803 	bl	29254 <__strtok_r>
   2924e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29250:	2000002c 	.word	0x2000002c

00029254 <__strtok_r>:
   29254:	b5f0      	push	{r4, r5, r6, r7, lr}
   29256:	2800      	cmp	r0, #0
   29258:	d104      	bne.n	29264 <__strtok_r+0x10>
   2925a:	6810      	ldr	r0, [r2, #0]
   2925c:	2800      	cmp	r0, #0
   2925e:	d101      	bne.n	29264 <__strtok_r+0x10>
   29260:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29262:	0020      	movs	r0, r4
   29264:	000e      	movs	r6, r1
   29266:	7805      	ldrb	r5, [r0, #0]
   29268:	1c44      	adds	r4, r0, #1
   2926a:	7837      	ldrb	r7, [r6, #0]
   2926c:	2f00      	cmp	r7, #0
   2926e:	d104      	bne.n	2927a <__strtok_r+0x26>
   29270:	2d00      	cmp	r5, #0
   29272:	d110      	bne.n	29296 <__strtok_r+0x42>
   29274:	6015      	str	r5, [r2, #0]
   29276:	0028      	movs	r0, r5
   29278:	e7f2      	b.n	29260 <__strtok_r+0xc>
   2927a:	3601      	adds	r6, #1
   2927c:	42bd      	cmp	r5, r7
   2927e:	d1f4      	bne.n	2926a <__strtok_r+0x16>
   29280:	2b00      	cmp	r3, #0
   29282:	d1ee      	bne.n	29262 <__strtok_r+0xe>
   29284:	6014      	str	r4, [r2, #0]
   29286:	7003      	strb	r3, [r0, #0]
   29288:	e7ea      	b.n	29260 <__strtok_r+0xc>
   2928a:	0033      	movs	r3, r6
   2928c:	e00e      	b.n	292ac <__strtok_r+0x58>
   2928e:	3501      	adds	r5, #1
   29290:	001c      	movs	r4, r3
   29292:	2f00      	cmp	r7, #0
   29294:	d102      	bne.n	2929c <__strtok_r+0x48>
   29296:	000d      	movs	r5, r1
   29298:	7826      	ldrb	r6, [r4, #0]
   2929a:	1c63      	adds	r3, r4, #1
   2929c:	782f      	ldrb	r7, [r5, #0]
   2929e:	42be      	cmp	r6, r7
   292a0:	d1f5      	bne.n	2928e <__strtok_r+0x3a>
   292a2:	2e00      	cmp	r6, #0
   292a4:	d0f1      	beq.n	2928a <__strtok_r+0x36>
   292a6:	2400      	movs	r4, #0
   292a8:	1e59      	subs	r1, r3, #1
   292aa:	700c      	strb	r4, [r1, #0]
   292ac:	6013      	str	r3, [r2, #0]
   292ae:	e7d7      	b.n	29260 <__strtok_r+0xc>

000292b0 <_strtol_l.isra.0>:
   292b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   292b2:	001f      	movs	r7, r3
   292b4:	000e      	movs	r6, r1
   292b6:	b087      	sub	sp, #28
   292b8:	9005      	str	r0, [sp, #20]
   292ba:	9103      	str	r1, [sp, #12]
   292bc:	9202      	str	r2, [sp, #8]
   292be:	980c      	ldr	r0, [sp, #48]	; 0x30
   292c0:	7834      	ldrb	r4, [r6, #0]
   292c2:	f7ff fdd3 	bl	28e6c <__locale_ctype_ptr_l>
   292c6:	2208      	movs	r2, #8
   292c8:	1900      	adds	r0, r0, r4
   292ca:	7843      	ldrb	r3, [r0, #1]
   292cc:	1c75      	adds	r5, r6, #1
   292ce:	4013      	ands	r3, r2
   292d0:	d10c      	bne.n	292ec <_strtol_l.isra.0+0x3c>
   292d2:	2c2d      	cmp	r4, #45	; 0x2d
   292d4:	d10c      	bne.n	292f0 <_strtol_l.isra.0+0x40>
   292d6:	3301      	adds	r3, #1
   292d8:	782c      	ldrb	r4, [r5, #0]
   292da:	9301      	str	r3, [sp, #4]
   292dc:	1cb5      	adds	r5, r6, #2
   292de:	2f00      	cmp	r7, #0
   292e0:	d00c      	beq.n	292fc <_strtol_l.isra.0+0x4c>
   292e2:	2f10      	cmp	r7, #16
   292e4:	d114      	bne.n	29310 <_strtol_l.isra.0+0x60>
   292e6:	2c30      	cmp	r4, #48	; 0x30
   292e8:	d00a      	beq.n	29300 <_strtol_l.isra.0+0x50>
   292ea:	e011      	b.n	29310 <_strtol_l.isra.0+0x60>
   292ec:	002e      	movs	r6, r5
   292ee:	e7e6      	b.n	292be <_strtol_l.isra.0+0xe>
   292f0:	9301      	str	r3, [sp, #4]
   292f2:	2c2b      	cmp	r4, #43	; 0x2b
   292f4:	d1f3      	bne.n	292de <_strtol_l.isra.0+0x2e>
   292f6:	782c      	ldrb	r4, [r5, #0]
   292f8:	1cb5      	adds	r5, r6, #2
   292fa:	e7f0      	b.n	292de <_strtol_l.isra.0+0x2e>
   292fc:	2c30      	cmp	r4, #48	; 0x30
   292fe:	d12f      	bne.n	29360 <_strtol_l.isra.0+0xb0>
   29300:	2220      	movs	r2, #32
   29302:	782b      	ldrb	r3, [r5, #0]
   29304:	4393      	bics	r3, r2
   29306:	2b58      	cmp	r3, #88	; 0x58
   29308:	d151      	bne.n	293ae <_strtol_l.isra.0+0xfe>
   2930a:	2710      	movs	r7, #16
   2930c:	786c      	ldrb	r4, [r5, #1]
   2930e:	3502      	adds	r5, #2
   29310:	9b01      	ldr	r3, [sp, #4]
   29312:	4a29      	ldr	r2, [pc, #164]	; (293b8 <_strtol_l.isra.0+0x108>)
   29314:	0039      	movs	r1, r7
   29316:	189e      	adds	r6, r3, r2
   29318:	0030      	movs	r0, r6
   2931a:	f7fd f9f5 	bl	26708 <__aeabi_uidivmod>
   2931e:	0030      	movs	r0, r6
   29320:	9104      	str	r1, [sp, #16]
   29322:	0039      	movs	r1, r7
   29324:	f7fd f96a 	bl	265fc <__udivsi3>
   29328:	2101      	movs	r1, #1
   2932a:	2300      	movs	r3, #0
   2932c:	4249      	negs	r1, r1
   2932e:	0002      	movs	r2, r0
   29330:	468c      	mov	ip, r1
   29332:	0018      	movs	r0, r3
   29334:	0021      	movs	r1, r4
   29336:	3930      	subs	r1, #48	; 0x30
   29338:	2909      	cmp	r1, #9
   2933a:	d813      	bhi.n	29364 <_strtol_l.isra.0+0xb4>
   2933c:	000c      	movs	r4, r1
   2933e:	42a7      	cmp	r7, r4
   29340:	dd1c      	ble.n	2937c <_strtol_l.isra.0+0xcc>
   29342:	1c59      	adds	r1, r3, #1
   29344:	d009      	beq.n	2935a <_strtol_l.isra.0+0xaa>
   29346:	4663      	mov	r3, ip
   29348:	4282      	cmp	r2, r0
   2934a:	d306      	bcc.n	2935a <_strtol_l.isra.0+0xaa>
   2934c:	d102      	bne.n	29354 <_strtol_l.isra.0+0xa4>
   2934e:	9904      	ldr	r1, [sp, #16]
   29350:	42a1      	cmp	r1, r4
   29352:	db02      	blt.n	2935a <_strtol_l.isra.0+0xaa>
   29354:	2301      	movs	r3, #1
   29356:	4378      	muls	r0, r7
   29358:	1820      	adds	r0, r4, r0
   2935a:	782c      	ldrb	r4, [r5, #0]
   2935c:	3501      	adds	r5, #1
   2935e:	e7e9      	b.n	29334 <_strtol_l.isra.0+0x84>
   29360:	270a      	movs	r7, #10
   29362:	e7d5      	b.n	29310 <_strtol_l.isra.0+0x60>
   29364:	0021      	movs	r1, r4
   29366:	3941      	subs	r1, #65	; 0x41
   29368:	2919      	cmp	r1, #25
   2936a:	d801      	bhi.n	29370 <_strtol_l.isra.0+0xc0>
   2936c:	3c37      	subs	r4, #55	; 0x37
   2936e:	e7e6      	b.n	2933e <_strtol_l.isra.0+0x8e>
   29370:	0021      	movs	r1, r4
   29372:	3961      	subs	r1, #97	; 0x61
   29374:	2919      	cmp	r1, #25
   29376:	d801      	bhi.n	2937c <_strtol_l.isra.0+0xcc>
   29378:	3c57      	subs	r4, #87	; 0x57
   2937a:	e7e0      	b.n	2933e <_strtol_l.isra.0+0x8e>
   2937c:	1c5a      	adds	r2, r3, #1
   2937e:	d108      	bne.n	29392 <_strtol_l.isra.0+0xe2>
   29380:	9a05      	ldr	r2, [sp, #20]
   29382:	3323      	adds	r3, #35	; 0x23
   29384:	6013      	str	r3, [r2, #0]
   29386:	9b02      	ldr	r3, [sp, #8]
   29388:	0030      	movs	r0, r6
   2938a:	2b00      	cmp	r3, #0
   2938c:	d10b      	bne.n	293a6 <_strtol_l.isra.0+0xf6>
   2938e:	b007      	add	sp, #28
   29390:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29392:	9a01      	ldr	r2, [sp, #4]
   29394:	2a00      	cmp	r2, #0
   29396:	d000      	beq.n	2939a <_strtol_l.isra.0+0xea>
   29398:	4240      	negs	r0, r0
   2939a:	9a02      	ldr	r2, [sp, #8]
   2939c:	2a00      	cmp	r2, #0
   2939e:	d0f6      	beq.n	2938e <_strtol_l.isra.0+0xde>
   293a0:	9a03      	ldr	r2, [sp, #12]
   293a2:	2b00      	cmp	r3, #0
   293a4:	d000      	beq.n	293a8 <_strtol_l.isra.0+0xf8>
   293a6:	1e6a      	subs	r2, r5, #1
   293a8:	9b02      	ldr	r3, [sp, #8]
   293aa:	601a      	str	r2, [r3, #0]
   293ac:	e7ef      	b.n	2938e <_strtol_l.isra.0+0xde>
   293ae:	2430      	movs	r4, #48	; 0x30
   293b0:	2f00      	cmp	r7, #0
   293b2:	d1ad      	bne.n	29310 <_strtol_l.isra.0+0x60>
   293b4:	3708      	adds	r7, #8
   293b6:	e7ab      	b.n	29310 <_strtol_l.isra.0+0x60>
   293b8:	7fffffff 	.word	0x7fffffff

000293bc <strtol>:
   293bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   293be:	0013      	movs	r3, r2
   293c0:	4a06      	ldr	r2, [pc, #24]	; (293dc <strtol+0x20>)
   293c2:	0005      	movs	r5, r0
   293c4:	6810      	ldr	r0, [r2, #0]
   293c6:	6a04      	ldr	r4, [r0, #32]
   293c8:	2c00      	cmp	r4, #0
   293ca:	d100      	bne.n	293ce <strtol+0x12>
   293cc:	4c04      	ldr	r4, [pc, #16]	; (293e0 <strtol+0x24>)
   293ce:	000a      	movs	r2, r1
   293d0:	9400      	str	r4, [sp, #0]
   293d2:	0029      	movs	r1, r5
   293d4:	f7ff ff6c 	bl	292b0 <_strtol_l.isra.0>
   293d8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   293da:	46c0      	nop			; (mov r8, r8)
   293dc:	2000002c 	.word	0x2000002c
   293e0:	20000090 	.word	0x20000090

000293e4 <__utoa>:
   293e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   293e6:	0017      	movs	r7, r2
   293e8:	b08f      	sub	sp, #60	; 0x3c
   293ea:	2225      	movs	r2, #37	; 0x25
   293ec:	0006      	movs	r6, r0
   293ee:	000d      	movs	r5, r1
   293f0:	a804      	add	r0, sp, #16
   293f2:	4918      	ldr	r1, [pc, #96]	; (29454 <__utoa+0x70>)
   293f4:	f7ff fd72 	bl	28edc <memcpy>
   293f8:	aa04      	add	r2, sp, #16
   293fa:	1ebb      	subs	r3, r7, #2
   293fc:	2400      	movs	r4, #0
   293fe:	9203      	str	r2, [sp, #12]
   29400:	2b22      	cmp	r3, #34	; 0x22
   29402:	d905      	bls.n	29410 <__utoa+0x2c>
   29404:	702c      	strb	r4, [r5, #0]
   29406:	0025      	movs	r5, r4
   29408:	0028      	movs	r0, r5
   2940a:	b00f      	add	sp, #60	; 0x3c
   2940c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2940e:	9c01      	ldr	r4, [sp, #4]
   29410:	1c63      	adds	r3, r4, #1
   29412:	9301      	str	r3, [sp, #4]
   29414:	18eb      	adds	r3, r5, r3
   29416:	9300      	str	r3, [sp, #0]
   29418:	0030      	movs	r0, r6
   2941a:	3b01      	subs	r3, #1
   2941c:	0039      	movs	r1, r7
   2941e:	9302      	str	r3, [sp, #8]
   29420:	f7fd f972 	bl	26708 <__aeabi_uidivmod>
   29424:	9b03      	ldr	r3, [sp, #12]
   29426:	9a02      	ldr	r2, [sp, #8]
   29428:	5c5b      	ldrb	r3, [r3, r1]
   2942a:	0030      	movs	r0, r6
   2942c:	7013      	strb	r3, [r2, #0]
   2942e:	0039      	movs	r1, r7
   29430:	f7fd f8e4 	bl	265fc <__udivsi3>
   29434:	1e06      	subs	r6, r0, #0
   29436:	d1ea      	bne.n	2940e <__utoa+0x2a>
   29438:	9b00      	ldr	r3, [sp, #0]
   2943a:	7018      	strb	r0, [r3, #0]
   2943c:	002b      	movs	r3, r5
   2943e:	1b5a      	subs	r2, r3, r5
   29440:	4294      	cmp	r4, r2
   29442:	dde1      	ble.n	29408 <__utoa+0x24>
   29444:	781a      	ldrb	r2, [r3, #0]
   29446:	5d29      	ldrb	r1, [r5, r4]
   29448:	7019      	strb	r1, [r3, #0]
   2944a:	552a      	strb	r2, [r5, r4]
   2944c:	3301      	adds	r3, #1
   2944e:	3c01      	subs	r4, #1
   29450:	e7f5      	b.n	2943e <__utoa+0x5a>
   29452:	46c0      	nop			; (mov r8, r8)
   29454:	0002af42 	.word	0x0002af42

00029458 <utoa>:
   29458:	b510      	push	{r4, lr}
   2945a:	f7ff ffc3 	bl	293e4 <__utoa>
   2945e:	bd10      	pop	{r4, pc}

00029460 <_vsiprintf_r>:
   29460:	b530      	push	{r4, r5, lr}
   29462:	b09b      	sub	sp, #108	; 0x6c
   29464:	9100      	str	r1, [sp, #0]
   29466:	9104      	str	r1, [sp, #16]
   29468:	4908      	ldr	r1, [pc, #32]	; (2948c <_vsiprintf_r+0x2c>)
   2946a:	466d      	mov	r5, sp
   2946c:	9102      	str	r1, [sp, #8]
   2946e:	9105      	str	r1, [sp, #20]
   29470:	2101      	movs	r1, #1
   29472:	2482      	movs	r4, #130	; 0x82
   29474:	4249      	negs	r1, r1
   29476:	81e9      	strh	r1, [r5, #14]
   29478:	00a4      	lsls	r4, r4, #2
   2947a:	4669      	mov	r1, sp
   2947c:	81ac      	strh	r4, [r5, #12]
   2947e:	f000 f883 	bl	29588 <_svfiprintf_r>
   29482:	2300      	movs	r3, #0
   29484:	9a00      	ldr	r2, [sp, #0]
   29486:	7013      	strb	r3, [r2, #0]
   29488:	b01b      	add	sp, #108	; 0x6c
   2948a:	bd30      	pop	{r4, r5, pc}
   2948c:	7fffffff 	.word	0x7fffffff

00029490 <vsiprintf>:
   29490:	b510      	push	{r4, lr}
   29492:	0013      	movs	r3, r2
   29494:	000a      	movs	r2, r1
   29496:	0001      	movs	r1, r0
   29498:	4802      	ldr	r0, [pc, #8]	; (294a4 <vsiprintf+0x14>)
   2949a:	6800      	ldr	r0, [r0, #0]
   2949c:	f7ff ffe0 	bl	29460 <_vsiprintf_r>
   294a0:	bd10      	pop	{r4, pc}
   294a2:	46c0      	nop			; (mov r8, r8)
   294a4:	2000002c 	.word	0x2000002c

000294a8 <__ascii_wctomb>:
   294a8:	1e0b      	subs	r3, r1, #0
   294aa:	d004      	beq.n	294b6 <__ascii_wctomb+0xe>
   294ac:	2aff      	cmp	r2, #255	; 0xff
   294ae:	d904      	bls.n	294ba <__ascii_wctomb+0x12>
   294b0:	238a      	movs	r3, #138	; 0x8a
   294b2:	6003      	str	r3, [r0, #0]
   294b4:	3b8b      	subs	r3, #139	; 0x8b
   294b6:	0018      	movs	r0, r3
   294b8:	4770      	bx	lr
   294ba:	700a      	strb	r2, [r1, #0]
   294bc:	2301      	movs	r3, #1
   294be:	e7fa      	b.n	294b6 <__ascii_wctomb+0xe>

000294c0 <__malloc_lock>:
   294c0:	4770      	bx	lr

000294c2 <__malloc_unlock>:
   294c2:	4770      	bx	lr

000294c4 <__ssputs_r>:
   294c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   294c6:	688e      	ldr	r6, [r1, #8]
   294c8:	b085      	sub	sp, #20
   294ca:	0007      	movs	r7, r0
   294cc:	000c      	movs	r4, r1
   294ce:	9203      	str	r2, [sp, #12]
   294d0:	9301      	str	r3, [sp, #4]
   294d2:	429e      	cmp	r6, r3
   294d4:	d839      	bhi.n	2954a <__ssputs_r+0x86>
   294d6:	2390      	movs	r3, #144	; 0x90
   294d8:	898a      	ldrh	r2, [r1, #12]
   294da:	00db      	lsls	r3, r3, #3
   294dc:	421a      	tst	r2, r3
   294de:	d034      	beq.n	2954a <__ssputs_r+0x86>
   294e0:	2503      	movs	r5, #3
   294e2:	6909      	ldr	r1, [r1, #16]
   294e4:	6823      	ldr	r3, [r4, #0]
   294e6:	1a5b      	subs	r3, r3, r1
   294e8:	9302      	str	r3, [sp, #8]
   294ea:	6963      	ldr	r3, [r4, #20]
   294ec:	9802      	ldr	r0, [sp, #8]
   294ee:	435d      	muls	r5, r3
   294f0:	0feb      	lsrs	r3, r5, #31
   294f2:	195d      	adds	r5, r3, r5
   294f4:	9b01      	ldr	r3, [sp, #4]
   294f6:	106d      	asrs	r5, r5, #1
   294f8:	3301      	adds	r3, #1
   294fa:	181b      	adds	r3, r3, r0
   294fc:	42ab      	cmp	r3, r5
   294fe:	d900      	bls.n	29502 <__ssputs_r+0x3e>
   29500:	001d      	movs	r5, r3
   29502:	0553      	lsls	r3, r2, #21
   29504:	d532      	bpl.n	2956c <__ssputs_r+0xa8>
   29506:	0029      	movs	r1, r5
   29508:	0038      	movs	r0, r7
   2950a:	f7ff fd63 	bl	28fd4 <_malloc_r>
   2950e:	1e06      	subs	r6, r0, #0
   29510:	d109      	bne.n	29526 <__ssputs_r+0x62>
   29512:	230c      	movs	r3, #12
   29514:	603b      	str	r3, [r7, #0]
   29516:	2340      	movs	r3, #64	; 0x40
   29518:	2001      	movs	r0, #1
   2951a:	89a2      	ldrh	r2, [r4, #12]
   2951c:	4240      	negs	r0, r0
   2951e:	4313      	orrs	r3, r2
   29520:	81a3      	strh	r3, [r4, #12]
   29522:	b005      	add	sp, #20
   29524:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29526:	9a02      	ldr	r2, [sp, #8]
   29528:	6921      	ldr	r1, [r4, #16]
   2952a:	f7ff fcd7 	bl	28edc <memcpy>
   2952e:	89a3      	ldrh	r3, [r4, #12]
   29530:	4a14      	ldr	r2, [pc, #80]	; (29584 <__ssputs_r+0xc0>)
   29532:	401a      	ands	r2, r3
   29534:	2380      	movs	r3, #128	; 0x80
   29536:	4313      	orrs	r3, r2
   29538:	81a3      	strh	r3, [r4, #12]
   2953a:	9b02      	ldr	r3, [sp, #8]
   2953c:	6126      	str	r6, [r4, #16]
   2953e:	18f6      	adds	r6, r6, r3
   29540:	6026      	str	r6, [r4, #0]
   29542:	6165      	str	r5, [r4, #20]
   29544:	9e01      	ldr	r6, [sp, #4]
   29546:	1aed      	subs	r5, r5, r3
   29548:	60a5      	str	r5, [r4, #8]
   2954a:	9b01      	ldr	r3, [sp, #4]
   2954c:	42b3      	cmp	r3, r6
   2954e:	d200      	bcs.n	29552 <__ssputs_r+0x8e>
   29550:	001e      	movs	r6, r3
   29552:	0032      	movs	r2, r6
   29554:	9903      	ldr	r1, [sp, #12]
   29556:	6820      	ldr	r0, [r4, #0]
   29558:	f7ff fcc9 	bl	28eee <memmove>
   2955c:	68a3      	ldr	r3, [r4, #8]
   2955e:	2000      	movs	r0, #0
   29560:	1b9b      	subs	r3, r3, r6
   29562:	60a3      	str	r3, [r4, #8]
   29564:	6823      	ldr	r3, [r4, #0]
   29566:	199e      	adds	r6, r3, r6
   29568:	6026      	str	r6, [r4, #0]
   2956a:	e7da      	b.n	29522 <__ssputs_r+0x5e>
   2956c:	002a      	movs	r2, r5
   2956e:	0038      	movs	r0, r7
   29570:	f000 faa1 	bl	29ab6 <_realloc_r>
   29574:	1e06      	subs	r6, r0, #0
   29576:	d1e0      	bne.n	2953a <__ssputs_r+0x76>
   29578:	6921      	ldr	r1, [r4, #16]
   2957a:	0038      	movs	r0, r7
   2957c:	f7ff fce0 	bl	28f40 <_free_r>
   29580:	e7c7      	b.n	29512 <__ssputs_r+0x4e>
   29582:	46c0      	nop			; (mov r8, r8)
   29584:	fffffb7f 	.word	0xfffffb7f

00029588 <_svfiprintf_r>:
   29588:	b5f0      	push	{r4, r5, r6, r7, lr}
   2958a:	b09f      	sub	sp, #124	; 0x7c
   2958c:	9002      	str	r0, [sp, #8]
   2958e:	9305      	str	r3, [sp, #20]
   29590:	898b      	ldrh	r3, [r1, #12]
   29592:	000f      	movs	r7, r1
   29594:	0016      	movs	r6, r2
   29596:	061b      	lsls	r3, r3, #24
   29598:	d511      	bpl.n	295be <_svfiprintf_r+0x36>
   2959a:	690b      	ldr	r3, [r1, #16]
   2959c:	2b00      	cmp	r3, #0
   2959e:	d10e      	bne.n	295be <_svfiprintf_r+0x36>
   295a0:	2140      	movs	r1, #64	; 0x40
   295a2:	f7ff fd17 	bl	28fd4 <_malloc_r>
   295a6:	6038      	str	r0, [r7, #0]
   295a8:	6138      	str	r0, [r7, #16]
   295aa:	2800      	cmp	r0, #0
   295ac:	d105      	bne.n	295ba <_svfiprintf_r+0x32>
   295ae:	230c      	movs	r3, #12
   295b0:	9a02      	ldr	r2, [sp, #8]
   295b2:	3801      	subs	r0, #1
   295b4:	6013      	str	r3, [r2, #0]
   295b6:	b01f      	add	sp, #124	; 0x7c
   295b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   295ba:	2340      	movs	r3, #64	; 0x40
   295bc:	617b      	str	r3, [r7, #20]
   295be:	2300      	movs	r3, #0
   295c0:	ad06      	add	r5, sp, #24
   295c2:	616b      	str	r3, [r5, #20]
   295c4:	3320      	adds	r3, #32
   295c6:	766b      	strb	r3, [r5, #25]
   295c8:	3310      	adds	r3, #16
   295ca:	76ab      	strb	r3, [r5, #26]
   295cc:	0034      	movs	r4, r6
   295ce:	7823      	ldrb	r3, [r4, #0]
   295d0:	2b00      	cmp	r3, #0
   295d2:	d147      	bne.n	29664 <_svfiprintf_r+0xdc>
   295d4:	1ba3      	subs	r3, r4, r6
   295d6:	9304      	str	r3, [sp, #16]
   295d8:	d00d      	beq.n	295f6 <_svfiprintf_r+0x6e>
   295da:	1ba3      	subs	r3, r4, r6
   295dc:	0032      	movs	r2, r6
   295de:	0039      	movs	r1, r7
   295e0:	9802      	ldr	r0, [sp, #8]
   295e2:	f7ff ff6f 	bl	294c4 <__ssputs_r>
   295e6:	1c43      	adds	r3, r0, #1
   295e8:	d100      	bne.n	295ec <_svfiprintf_r+0x64>
   295ea:	e0b5      	b.n	29758 <_svfiprintf_r+0x1d0>
   295ec:	696a      	ldr	r2, [r5, #20]
   295ee:	9b04      	ldr	r3, [sp, #16]
   295f0:	4694      	mov	ip, r2
   295f2:	4463      	add	r3, ip
   295f4:	616b      	str	r3, [r5, #20]
   295f6:	7823      	ldrb	r3, [r4, #0]
   295f8:	2b00      	cmp	r3, #0
   295fa:	d100      	bne.n	295fe <_svfiprintf_r+0x76>
   295fc:	e0ac      	b.n	29758 <_svfiprintf_r+0x1d0>
   295fe:	2201      	movs	r2, #1
   29600:	2300      	movs	r3, #0
   29602:	4252      	negs	r2, r2
   29604:	606a      	str	r2, [r5, #4]
   29606:	a902      	add	r1, sp, #8
   29608:	3254      	adds	r2, #84	; 0x54
   2960a:	1852      	adds	r2, r2, r1
   2960c:	3401      	adds	r4, #1
   2960e:	602b      	str	r3, [r5, #0]
   29610:	60eb      	str	r3, [r5, #12]
   29612:	60ab      	str	r3, [r5, #8]
   29614:	7013      	strb	r3, [r2, #0]
   29616:	65ab      	str	r3, [r5, #88]	; 0x58
   29618:	4e58      	ldr	r6, [pc, #352]	; (2977c <_svfiprintf_r+0x1f4>)
   2961a:	2205      	movs	r2, #5
   2961c:	7821      	ldrb	r1, [r4, #0]
   2961e:	0030      	movs	r0, r6
   29620:	f000 fa3e 	bl	29aa0 <memchr>
   29624:	1c62      	adds	r2, r4, #1
   29626:	2800      	cmp	r0, #0
   29628:	d120      	bne.n	2966c <_svfiprintf_r+0xe4>
   2962a:	6829      	ldr	r1, [r5, #0]
   2962c:	06cb      	lsls	r3, r1, #27
   2962e:	d504      	bpl.n	2963a <_svfiprintf_r+0xb2>
   29630:	2353      	movs	r3, #83	; 0x53
   29632:	ae02      	add	r6, sp, #8
   29634:	3020      	adds	r0, #32
   29636:	199b      	adds	r3, r3, r6
   29638:	7018      	strb	r0, [r3, #0]
   2963a:	070b      	lsls	r3, r1, #28
   2963c:	d504      	bpl.n	29648 <_svfiprintf_r+0xc0>
   2963e:	2353      	movs	r3, #83	; 0x53
   29640:	202b      	movs	r0, #43	; 0x2b
   29642:	ae02      	add	r6, sp, #8
   29644:	199b      	adds	r3, r3, r6
   29646:	7018      	strb	r0, [r3, #0]
   29648:	7823      	ldrb	r3, [r4, #0]
   2964a:	2b2a      	cmp	r3, #42	; 0x2a
   2964c:	d016      	beq.n	2967c <_svfiprintf_r+0xf4>
   2964e:	2000      	movs	r0, #0
   29650:	210a      	movs	r1, #10
   29652:	9b09      	ldr	r3, [sp, #36]	; 0x24
   29654:	7822      	ldrb	r2, [r4, #0]
   29656:	3a30      	subs	r2, #48	; 0x30
   29658:	2a09      	cmp	r2, #9
   2965a:	d955      	bls.n	29708 <_svfiprintf_r+0x180>
   2965c:	2800      	cmp	r0, #0
   2965e:	d015      	beq.n	2968c <_svfiprintf_r+0x104>
   29660:	9309      	str	r3, [sp, #36]	; 0x24
   29662:	e013      	b.n	2968c <_svfiprintf_r+0x104>
   29664:	2b25      	cmp	r3, #37	; 0x25
   29666:	d0b5      	beq.n	295d4 <_svfiprintf_r+0x4c>
   29668:	3401      	adds	r4, #1
   2966a:	e7b0      	b.n	295ce <_svfiprintf_r+0x46>
   2966c:	2301      	movs	r3, #1
   2966e:	1b80      	subs	r0, r0, r6
   29670:	4083      	lsls	r3, r0
   29672:	6829      	ldr	r1, [r5, #0]
   29674:	0014      	movs	r4, r2
   29676:	430b      	orrs	r3, r1
   29678:	602b      	str	r3, [r5, #0]
   2967a:	e7cd      	b.n	29618 <_svfiprintf_r+0x90>
   2967c:	9b05      	ldr	r3, [sp, #20]
   2967e:	1d18      	adds	r0, r3, #4
   29680:	681b      	ldr	r3, [r3, #0]
   29682:	9005      	str	r0, [sp, #20]
   29684:	2b00      	cmp	r3, #0
   29686:	db39      	blt.n	296fc <_svfiprintf_r+0x174>
   29688:	9309      	str	r3, [sp, #36]	; 0x24
   2968a:	0014      	movs	r4, r2
   2968c:	7823      	ldrb	r3, [r4, #0]
   2968e:	2b2e      	cmp	r3, #46	; 0x2e
   29690:	d10b      	bne.n	296aa <_svfiprintf_r+0x122>
   29692:	7863      	ldrb	r3, [r4, #1]
   29694:	1c62      	adds	r2, r4, #1
   29696:	2b2a      	cmp	r3, #42	; 0x2a
   29698:	d13e      	bne.n	29718 <_svfiprintf_r+0x190>
   2969a:	9b05      	ldr	r3, [sp, #20]
   2969c:	3402      	adds	r4, #2
   2969e:	1d1a      	adds	r2, r3, #4
   296a0:	681b      	ldr	r3, [r3, #0]
   296a2:	9205      	str	r2, [sp, #20]
   296a4:	2b00      	cmp	r3, #0
   296a6:	db34      	blt.n	29712 <_svfiprintf_r+0x18a>
   296a8:	9307      	str	r3, [sp, #28]
   296aa:	4e35      	ldr	r6, [pc, #212]	; (29780 <_svfiprintf_r+0x1f8>)
   296ac:	7821      	ldrb	r1, [r4, #0]
   296ae:	2203      	movs	r2, #3
   296b0:	0030      	movs	r0, r6
   296b2:	f000 f9f5 	bl	29aa0 <memchr>
   296b6:	2800      	cmp	r0, #0
   296b8:	d006      	beq.n	296c8 <_svfiprintf_r+0x140>
   296ba:	2340      	movs	r3, #64	; 0x40
   296bc:	1b80      	subs	r0, r0, r6
   296be:	4083      	lsls	r3, r0
   296c0:	682a      	ldr	r2, [r5, #0]
   296c2:	3401      	adds	r4, #1
   296c4:	4313      	orrs	r3, r2
   296c6:	602b      	str	r3, [r5, #0]
   296c8:	7821      	ldrb	r1, [r4, #0]
   296ca:	2206      	movs	r2, #6
   296cc:	482d      	ldr	r0, [pc, #180]	; (29784 <_svfiprintf_r+0x1fc>)
   296ce:	1c66      	adds	r6, r4, #1
   296d0:	7629      	strb	r1, [r5, #24]
   296d2:	f000 f9e5 	bl	29aa0 <memchr>
   296d6:	2800      	cmp	r0, #0
   296d8:	d046      	beq.n	29768 <_svfiprintf_r+0x1e0>
   296da:	4b2b      	ldr	r3, [pc, #172]	; (29788 <_svfiprintf_r+0x200>)
   296dc:	2b00      	cmp	r3, #0
   296de:	d12f      	bne.n	29740 <_svfiprintf_r+0x1b8>
   296e0:	6829      	ldr	r1, [r5, #0]
   296e2:	9b05      	ldr	r3, [sp, #20]
   296e4:	2207      	movs	r2, #7
   296e6:	05c9      	lsls	r1, r1, #23
   296e8:	d528      	bpl.n	2973c <_svfiprintf_r+0x1b4>
   296ea:	189b      	adds	r3, r3, r2
   296ec:	4393      	bics	r3, r2
   296ee:	3308      	adds	r3, #8
   296f0:	9305      	str	r3, [sp, #20]
   296f2:	696b      	ldr	r3, [r5, #20]
   296f4:	9a03      	ldr	r2, [sp, #12]
   296f6:	189b      	adds	r3, r3, r2
   296f8:	616b      	str	r3, [r5, #20]
   296fa:	e767      	b.n	295cc <_svfiprintf_r+0x44>
   296fc:	425b      	negs	r3, r3
   296fe:	60eb      	str	r3, [r5, #12]
   29700:	2302      	movs	r3, #2
   29702:	430b      	orrs	r3, r1
   29704:	602b      	str	r3, [r5, #0]
   29706:	e7c0      	b.n	2968a <_svfiprintf_r+0x102>
   29708:	434b      	muls	r3, r1
   2970a:	3401      	adds	r4, #1
   2970c:	189b      	adds	r3, r3, r2
   2970e:	2001      	movs	r0, #1
   29710:	e7a0      	b.n	29654 <_svfiprintf_r+0xcc>
   29712:	2301      	movs	r3, #1
   29714:	425b      	negs	r3, r3
   29716:	e7c7      	b.n	296a8 <_svfiprintf_r+0x120>
   29718:	2300      	movs	r3, #0
   2971a:	0014      	movs	r4, r2
   2971c:	200a      	movs	r0, #10
   2971e:	001a      	movs	r2, r3
   29720:	606b      	str	r3, [r5, #4]
   29722:	7821      	ldrb	r1, [r4, #0]
   29724:	3930      	subs	r1, #48	; 0x30
   29726:	2909      	cmp	r1, #9
   29728:	d903      	bls.n	29732 <_svfiprintf_r+0x1aa>
   2972a:	2b00      	cmp	r3, #0
   2972c:	d0bd      	beq.n	296aa <_svfiprintf_r+0x122>
   2972e:	9207      	str	r2, [sp, #28]
   29730:	e7bb      	b.n	296aa <_svfiprintf_r+0x122>
   29732:	4342      	muls	r2, r0
   29734:	3401      	adds	r4, #1
   29736:	1852      	adds	r2, r2, r1
   29738:	2301      	movs	r3, #1
   2973a:	e7f2      	b.n	29722 <_svfiprintf_r+0x19a>
   2973c:	3307      	adds	r3, #7
   2973e:	e7d5      	b.n	296ec <_svfiprintf_r+0x164>
   29740:	ab05      	add	r3, sp, #20
   29742:	9300      	str	r3, [sp, #0]
   29744:	003a      	movs	r2, r7
   29746:	4b11      	ldr	r3, [pc, #68]	; (2978c <_svfiprintf_r+0x204>)
   29748:	0029      	movs	r1, r5
   2974a:	9802      	ldr	r0, [sp, #8]
   2974c:	e000      	b.n	29750 <_svfiprintf_r+0x1c8>
   2974e:	bf00      	nop
   29750:	9003      	str	r0, [sp, #12]
   29752:	9b03      	ldr	r3, [sp, #12]
   29754:	3301      	adds	r3, #1
   29756:	d1cc      	bne.n	296f2 <_svfiprintf_r+0x16a>
   29758:	89bb      	ldrh	r3, [r7, #12]
   2975a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   2975c:	065b      	lsls	r3, r3, #25
   2975e:	d400      	bmi.n	29762 <_svfiprintf_r+0x1da>
   29760:	e729      	b.n	295b6 <_svfiprintf_r+0x2e>
   29762:	2001      	movs	r0, #1
   29764:	4240      	negs	r0, r0
   29766:	e726      	b.n	295b6 <_svfiprintf_r+0x2e>
   29768:	ab05      	add	r3, sp, #20
   2976a:	9300      	str	r3, [sp, #0]
   2976c:	003a      	movs	r2, r7
   2976e:	4b07      	ldr	r3, [pc, #28]	; (2978c <_svfiprintf_r+0x204>)
   29770:	0029      	movs	r1, r5
   29772:	9802      	ldr	r0, [sp, #8]
   29774:	f000 f87a 	bl	2986c <_printf_i>
   29778:	e7ea      	b.n	29750 <_svfiprintf_r+0x1c8>
   2977a:	46c0      	nop			; (mov r8, r8)
   2977c:	0002b068 	.word	0x0002b068
   29780:	0002b06e 	.word	0x0002b06e
   29784:	0002b072 	.word	0x0002b072
   29788:	00000000 	.word	0x00000000
   2978c:	000294c5 	.word	0x000294c5

00029790 <_printf_common>:
   29790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   29792:	0015      	movs	r5, r2
   29794:	9301      	str	r3, [sp, #4]
   29796:	688a      	ldr	r2, [r1, #8]
   29798:	690b      	ldr	r3, [r1, #16]
   2979a:	9000      	str	r0, [sp, #0]
   2979c:	000c      	movs	r4, r1
   2979e:	4293      	cmp	r3, r2
   297a0:	da00      	bge.n	297a4 <_printf_common+0x14>
   297a2:	0013      	movs	r3, r2
   297a4:	0022      	movs	r2, r4
   297a6:	602b      	str	r3, [r5, #0]
   297a8:	3243      	adds	r2, #67	; 0x43
   297aa:	7812      	ldrb	r2, [r2, #0]
   297ac:	2a00      	cmp	r2, #0
   297ae:	d001      	beq.n	297b4 <_printf_common+0x24>
   297b0:	3301      	adds	r3, #1
   297b2:	602b      	str	r3, [r5, #0]
   297b4:	6823      	ldr	r3, [r4, #0]
   297b6:	069b      	lsls	r3, r3, #26
   297b8:	d502      	bpl.n	297c0 <_printf_common+0x30>
   297ba:	682b      	ldr	r3, [r5, #0]
   297bc:	3302      	adds	r3, #2
   297be:	602b      	str	r3, [r5, #0]
   297c0:	2706      	movs	r7, #6
   297c2:	6823      	ldr	r3, [r4, #0]
   297c4:	401f      	ands	r7, r3
   297c6:	d027      	beq.n	29818 <_printf_common+0x88>
   297c8:	0023      	movs	r3, r4
   297ca:	3343      	adds	r3, #67	; 0x43
   297cc:	781b      	ldrb	r3, [r3, #0]
   297ce:	1e5a      	subs	r2, r3, #1
   297d0:	4193      	sbcs	r3, r2
   297d2:	6822      	ldr	r2, [r4, #0]
   297d4:	0692      	lsls	r2, r2, #26
   297d6:	d430      	bmi.n	2983a <_printf_common+0xaa>
   297d8:	0022      	movs	r2, r4
   297da:	9901      	ldr	r1, [sp, #4]
   297dc:	3243      	adds	r2, #67	; 0x43
   297de:	9800      	ldr	r0, [sp, #0]
   297e0:	9e08      	ldr	r6, [sp, #32]
   297e2:	47b0      	blx	r6
   297e4:	1c43      	adds	r3, r0, #1
   297e6:	d025      	beq.n	29834 <_printf_common+0xa4>
   297e8:	2306      	movs	r3, #6
   297ea:	6820      	ldr	r0, [r4, #0]
   297ec:	682a      	ldr	r2, [r5, #0]
   297ee:	68e1      	ldr	r1, [r4, #12]
   297f0:	4003      	ands	r3, r0
   297f2:	2500      	movs	r5, #0
   297f4:	2b04      	cmp	r3, #4
   297f6:	d103      	bne.n	29800 <_printf_common+0x70>
   297f8:	1a8d      	subs	r5, r1, r2
   297fa:	43eb      	mvns	r3, r5
   297fc:	17db      	asrs	r3, r3, #31
   297fe:	401d      	ands	r5, r3
   29800:	68a3      	ldr	r3, [r4, #8]
   29802:	6922      	ldr	r2, [r4, #16]
   29804:	4293      	cmp	r3, r2
   29806:	dd01      	ble.n	2980c <_printf_common+0x7c>
   29808:	1a9b      	subs	r3, r3, r2
   2980a:	18ed      	adds	r5, r5, r3
   2980c:	2700      	movs	r7, #0
   2980e:	42bd      	cmp	r5, r7
   29810:	d120      	bne.n	29854 <_printf_common+0xc4>
   29812:	2000      	movs	r0, #0
   29814:	e010      	b.n	29838 <_printf_common+0xa8>
   29816:	3701      	adds	r7, #1
   29818:	68e3      	ldr	r3, [r4, #12]
   2981a:	682a      	ldr	r2, [r5, #0]
   2981c:	1a9b      	subs	r3, r3, r2
   2981e:	429f      	cmp	r7, r3
   29820:	dad2      	bge.n	297c8 <_printf_common+0x38>
   29822:	0022      	movs	r2, r4
   29824:	2301      	movs	r3, #1
   29826:	3219      	adds	r2, #25
   29828:	9901      	ldr	r1, [sp, #4]
   2982a:	9800      	ldr	r0, [sp, #0]
   2982c:	9e08      	ldr	r6, [sp, #32]
   2982e:	47b0      	blx	r6
   29830:	1c43      	adds	r3, r0, #1
   29832:	d1f0      	bne.n	29816 <_printf_common+0x86>
   29834:	2001      	movs	r0, #1
   29836:	4240      	negs	r0, r0
   29838:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   2983a:	2030      	movs	r0, #48	; 0x30
   2983c:	18e1      	adds	r1, r4, r3
   2983e:	3143      	adds	r1, #67	; 0x43
   29840:	7008      	strb	r0, [r1, #0]
   29842:	0021      	movs	r1, r4
   29844:	1c5a      	adds	r2, r3, #1
   29846:	3145      	adds	r1, #69	; 0x45
   29848:	7809      	ldrb	r1, [r1, #0]
   2984a:	18a2      	adds	r2, r4, r2
   2984c:	3243      	adds	r2, #67	; 0x43
   2984e:	3302      	adds	r3, #2
   29850:	7011      	strb	r1, [r2, #0]
   29852:	e7c1      	b.n	297d8 <_printf_common+0x48>
   29854:	0022      	movs	r2, r4
   29856:	2301      	movs	r3, #1
   29858:	321a      	adds	r2, #26
   2985a:	9901      	ldr	r1, [sp, #4]
   2985c:	9800      	ldr	r0, [sp, #0]
   2985e:	9e08      	ldr	r6, [sp, #32]
   29860:	47b0      	blx	r6
   29862:	1c43      	adds	r3, r0, #1
   29864:	d0e6      	beq.n	29834 <_printf_common+0xa4>
   29866:	3701      	adds	r7, #1
   29868:	e7d1      	b.n	2980e <_printf_common+0x7e>
	...

0002986c <_printf_i>:
   2986c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2986e:	b08b      	sub	sp, #44	; 0x2c
   29870:	9206      	str	r2, [sp, #24]
   29872:	000a      	movs	r2, r1
   29874:	3243      	adds	r2, #67	; 0x43
   29876:	9307      	str	r3, [sp, #28]
   29878:	9005      	str	r0, [sp, #20]
   2987a:	9204      	str	r2, [sp, #16]
   2987c:	7e0a      	ldrb	r2, [r1, #24]
   2987e:	000c      	movs	r4, r1
   29880:	9b10      	ldr	r3, [sp, #64]	; 0x40
   29882:	2a6e      	cmp	r2, #110	; 0x6e
   29884:	d100      	bne.n	29888 <_printf_i+0x1c>
   29886:	e08f      	b.n	299a8 <_printf_i+0x13c>
   29888:	d817      	bhi.n	298ba <_printf_i+0x4e>
   2988a:	2a63      	cmp	r2, #99	; 0x63
   2988c:	d02c      	beq.n	298e8 <_printf_i+0x7c>
   2988e:	d808      	bhi.n	298a2 <_printf_i+0x36>
   29890:	2a00      	cmp	r2, #0
   29892:	d100      	bne.n	29896 <_printf_i+0x2a>
   29894:	e099      	b.n	299ca <_printf_i+0x15e>
   29896:	2a58      	cmp	r2, #88	; 0x58
   29898:	d054      	beq.n	29944 <_printf_i+0xd8>
   2989a:	0026      	movs	r6, r4
   2989c:	3642      	adds	r6, #66	; 0x42
   2989e:	7032      	strb	r2, [r6, #0]
   298a0:	e029      	b.n	298f6 <_printf_i+0x8a>
   298a2:	2a64      	cmp	r2, #100	; 0x64
   298a4:	d001      	beq.n	298aa <_printf_i+0x3e>
   298a6:	2a69      	cmp	r2, #105	; 0x69
   298a8:	d1f7      	bne.n	2989a <_printf_i+0x2e>
   298aa:	6821      	ldr	r1, [r4, #0]
   298ac:	681a      	ldr	r2, [r3, #0]
   298ae:	0608      	lsls	r0, r1, #24
   298b0:	d523      	bpl.n	298fa <_printf_i+0x8e>
   298b2:	1d11      	adds	r1, r2, #4
   298b4:	6019      	str	r1, [r3, #0]
   298b6:	6815      	ldr	r5, [r2, #0]
   298b8:	e025      	b.n	29906 <_printf_i+0x9a>
   298ba:	2a73      	cmp	r2, #115	; 0x73
   298bc:	d100      	bne.n	298c0 <_printf_i+0x54>
   298be:	e088      	b.n	299d2 <_printf_i+0x166>
   298c0:	d808      	bhi.n	298d4 <_printf_i+0x68>
   298c2:	2a6f      	cmp	r2, #111	; 0x6f
   298c4:	d029      	beq.n	2991a <_printf_i+0xae>
   298c6:	2a70      	cmp	r2, #112	; 0x70
   298c8:	d1e7      	bne.n	2989a <_printf_i+0x2e>
   298ca:	2220      	movs	r2, #32
   298cc:	6809      	ldr	r1, [r1, #0]
   298ce:	430a      	orrs	r2, r1
   298d0:	6022      	str	r2, [r4, #0]
   298d2:	e003      	b.n	298dc <_printf_i+0x70>
   298d4:	2a75      	cmp	r2, #117	; 0x75
   298d6:	d020      	beq.n	2991a <_printf_i+0xae>
   298d8:	2a78      	cmp	r2, #120	; 0x78
   298da:	d1de      	bne.n	2989a <_printf_i+0x2e>
   298dc:	0022      	movs	r2, r4
   298de:	2178      	movs	r1, #120	; 0x78
   298e0:	3245      	adds	r2, #69	; 0x45
   298e2:	7011      	strb	r1, [r2, #0]
   298e4:	4a6c      	ldr	r2, [pc, #432]	; (29a98 <_printf_i+0x22c>)
   298e6:	e030      	b.n	2994a <_printf_i+0xde>
   298e8:	000e      	movs	r6, r1
   298ea:	681a      	ldr	r2, [r3, #0]
   298ec:	3642      	adds	r6, #66	; 0x42
   298ee:	1d11      	adds	r1, r2, #4
   298f0:	6019      	str	r1, [r3, #0]
   298f2:	6813      	ldr	r3, [r2, #0]
   298f4:	7033      	strb	r3, [r6, #0]
   298f6:	2301      	movs	r3, #1
   298f8:	e079      	b.n	299ee <_printf_i+0x182>
   298fa:	0649      	lsls	r1, r1, #25
   298fc:	d5d9      	bpl.n	298b2 <_printf_i+0x46>
   298fe:	1d11      	adds	r1, r2, #4
   29900:	6019      	str	r1, [r3, #0]
   29902:	2300      	movs	r3, #0
   29904:	5ed5      	ldrsh	r5, [r2, r3]
   29906:	2d00      	cmp	r5, #0
   29908:	da03      	bge.n	29912 <_printf_i+0xa6>
   2990a:	232d      	movs	r3, #45	; 0x2d
   2990c:	9a04      	ldr	r2, [sp, #16]
   2990e:	426d      	negs	r5, r5
   29910:	7013      	strb	r3, [r2, #0]
   29912:	4b62      	ldr	r3, [pc, #392]	; (29a9c <_printf_i+0x230>)
   29914:	270a      	movs	r7, #10
   29916:	9303      	str	r3, [sp, #12]
   29918:	e02f      	b.n	2997a <_printf_i+0x10e>
   2991a:	6820      	ldr	r0, [r4, #0]
   2991c:	6819      	ldr	r1, [r3, #0]
   2991e:	0605      	lsls	r5, r0, #24
   29920:	d503      	bpl.n	2992a <_printf_i+0xbe>
   29922:	1d08      	adds	r0, r1, #4
   29924:	6018      	str	r0, [r3, #0]
   29926:	680d      	ldr	r5, [r1, #0]
   29928:	e005      	b.n	29936 <_printf_i+0xca>
   2992a:	0640      	lsls	r0, r0, #25
   2992c:	d5f9      	bpl.n	29922 <_printf_i+0xb6>
   2992e:	680d      	ldr	r5, [r1, #0]
   29930:	1d08      	adds	r0, r1, #4
   29932:	6018      	str	r0, [r3, #0]
   29934:	b2ad      	uxth	r5, r5
   29936:	4b59      	ldr	r3, [pc, #356]	; (29a9c <_printf_i+0x230>)
   29938:	2708      	movs	r7, #8
   2993a:	9303      	str	r3, [sp, #12]
   2993c:	2a6f      	cmp	r2, #111	; 0x6f
   2993e:	d018      	beq.n	29972 <_printf_i+0x106>
   29940:	270a      	movs	r7, #10
   29942:	e016      	b.n	29972 <_printf_i+0x106>
   29944:	3145      	adds	r1, #69	; 0x45
   29946:	700a      	strb	r2, [r1, #0]
   29948:	4a54      	ldr	r2, [pc, #336]	; (29a9c <_printf_i+0x230>)
   2994a:	9203      	str	r2, [sp, #12]
   2994c:	681a      	ldr	r2, [r3, #0]
   2994e:	6821      	ldr	r1, [r4, #0]
   29950:	1d10      	adds	r0, r2, #4
   29952:	6018      	str	r0, [r3, #0]
   29954:	6815      	ldr	r5, [r2, #0]
   29956:	0608      	lsls	r0, r1, #24
   29958:	d522      	bpl.n	299a0 <_printf_i+0x134>
   2995a:	07cb      	lsls	r3, r1, #31
   2995c:	d502      	bpl.n	29964 <_printf_i+0xf8>
   2995e:	2320      	movs	r3, #32
   29960:	4319      	orrs	r1, r3
   29962:	6021      	str	r1, [r4, #0]
   29964:	2710      	movs	r7, #16
   29966:	2d00      	cmp	r5, #0
   29968:	d103      	bne.n	29972 <_printf_i+0x106>
   2996a:	2320      	movs	r3, #32
   2996c:	6822      	ldr	r2, [r4, #0]
   2996e:	439a      	bics	r2, r3
   29970:	6022      	str	r2, [r4, #0]
   29972:	0023      	movs	r3, r4
   29974:	2200      	movs	r2, #0
   29976:	3343      	adds	r3, #67	; 0x43
   29978:	701a      	strb	r2, [r3, #0]
   2997a:	6863      	ldr	r3, [r4, #4]
   2997c:	60a3      	str	r3, [r4, #8]
   2997e:	2b00      	cmp	r3, #0
   29980:	db5c      	blt.n	29a3c <_printf_i+0x1d0>
   29982:	2204      	movs	r2, #4
   29984:	6821      	ldr	r1, [r4, #0]
   29986:	4391      	bics	r1, r2
   29988:	6021      	str	r1, [r4, #0]
   2998a:	2d00      	cmp	r5, #0
   2998c:	d158      	bne.n	29a40 <_printf_i+0x1d4>
   2998e:	9e04      	ldr	r6, [sp, #16]
   29990:	2b00      	cmp	r3, #0
   29992:	d064      	beq.n	29a5e <_printf_i+0x1f2>
   29994:	0026      	movs	r6, r4
   29996:	9b03      	ldr	r3, [sp, #12]
   29998:	3642      	adds	r6, #66	; 0x42
   2999a:	781b      	ldrb	r3, [r3, #0]
   2999c:	7033      	strb	r3, [r6, #0]
   2999e:	e05e      	b.n	29a5e <_printf_i+0x1f2>
   299a0:	0648      	lsls	r0, r1, #25
   299a2:	d5da      	bpl.n	2995a <_printf_i+0xee>
   299a4:	b2ad      	uxth	r5, r5
   299a6:	e7d8      	b.n	2995a <_printf_i+0xee>
   299a8:	6809      	ldr	r1, [r1, #0]
   299aa:	681a      	ldr	r2, [r3, #0]
   299ac:	0608      	lsls	r0, r1, #24
   299ae:	d505      	bpl.n	299bc <_printf_i+0x150>
   299b0:	1d11      	adds	r1, r2, #4
   299b2:	6019      	str	r1, [r3, #0]
   299b4:	6813      	ldr	r3, [r2, #0]
   299b6:	6962      	ldr	r2, [r4, #20]
   299b8:	601a      	str	r2, [r3, #0]
   299ba:	e006      	b.n	299ca <_printf_i+0x15e>
   299bc:	0649      	lsls	r1, r1, #25
   299be:	d5f7      	bpl.n	299b0 <_printf_i+0x144>
   299c0:	1d11      	adds	r1, r2, #4
   299c2:	6019      	str	r1, [r3, #0]
   299c4:	6813      	ldr	r3, [r2, #0]
   299c6:	8aa2      	ldrh	r2, [r4, #20]
   299c8:	801a      	strh	r2, [r3, #0]
   299ca:	2300      	movs	r3, #0
   299cc:	9e04      	ldr	r6, [sp, #16]
   299ce:	6123      	str	r3, [r4, #16]
   299d0:	e054      	b.n	29a7c <_printf_i+0x210>
   299d2:	681a      	ldr	r2, [r3, #0]
   299d4:	1d11      	adds	r1, r2, #4
   299d6:	6019      	str	r1, [r3, #0]
   299d8:	6816      	ldr	r6, [r2, #0]
   299da:	2100      	movs	r1, #0
   299dc:	6862      	ldr	r2, [r4, #4]
   299de:	0030      	movs	r0, r6
   299e0:	f000 f85e 	bl	29aa0 <memchr>
   299e4:	2800      	cmp	r0, #0
   299e6:	d001      	beq.n	299ec <_printf_i+0x180>
   299e8:	1b80      	subs	r0, r0, r6
   299ea:	6060      	str	r0, [r4, #4]
   299ec:	6863      	ldr	r3, [r4, #4]
   299ee:	6123      	str	r3, [r4, #16]
   299f0:	2300      	movs	r3, #0
   299f2:	9a04      	ldr	r2, [sp, #16]
   299f4:	7013      	strb	r3, [r2, #0]
   299f6:	e041      	b.n	29a7c <_printf_i+0x210>
   299f8:	6923      	ldr	r3, [r4, #16]
   299fa:	0032      	movs	r2, r6
   299fc:	9906      	ldr	r1, [sp, #24]
   299fe:	9805      	ldr	r0, [sp, #20]
   29a00:	9d07      	ldr	r5, [sp, #28]
   29a02:	47a8      	blx	r5
   29a04:	1c43      	adds	r3, r0, #1
   29a06:	d043      	beq.n	29a90 <_printf_i+0x224>
   29a08:	6823      	ldr	r3, [r4, #0]
   29a0a:	2500      	movs	r5, #0
   29a0c:	079b      	lsls	r3, r3, #30
   29a0e:	d40f      	bmi.n	29a30 <_printf_i+0x1c4>
   29a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
   29a12:	68e0      	ldr	r0, [r4, #12]
   29a14:	4298      	cmp	r0, r3
   29a16:	da3d      	bge.n	29a94 <_printf_i+0x228>
   29a18:	0018      	movs	r0, r3
   29a1a:	e03b      	b.n	29a94 <_printf_i+0x228>
   29a1c:	0022      	movs	r2, r4
   29a1e:	2301      	movs	r3, #1
   29a20:	3219      	adds	r2, #25
   29a22:	9906      	ldr	r1, [sp, #24]
   29a24:	9805      	ldr	r0, [sp, #20]
   29a26:	9e07      	ldr	r6, [sp, #28]
   29a28:	47b0      	blx	r6
   29a2a:	1c43      	adds	r3, r0, #1
   29a2c:	d030      	beq.n	29a90 <_printf_i+0x224>
   29a2e:	3501      	adds	r5, #1
   29a30:	68e3      	ldr	r3, [r4, #12]
   29a32:	9a09      	ldr	r2, [sp, #36]	; 0x24
   29a34:	1a9b      	subs	r3, r3, r2
   29a36:	429d      	cmp	r5, r3
   29a38:	dbf0      	blt.n	29a1c <_printf_i+0x1b0>
   29a3a:	e7e9      	b.n	29a10 <_printf_i+0x1a4>
   29a3c:	2d00      	cmp	r5, #0
   29a3e:	d0a9      	beq.n	29994 <_printf_i+0x128>
   29a40:	9e04      	ldr	r6, [sp, #16]
   29a42:	0028      	movs	r0, r5
   29a44:	0039      	movs	r1, r7
   29a46:	f7fc fe5f 	bl	26708 <__aeabi_uidivmod>
   29a4a:	9b03      	ldr	r3, [sp, #12]
   29a4c:	3e01      	subs	r6, #1
   29a4e:	5c5b      	ldrb	r3, [r3, r1]
   29a50:	0028      	movs	r0, r5
   29a52:	7033      	strb	r3, [r6, #0]
   29a54:	0039      	movs	r1, r7
   29a56:	f7fc fdd1 	bl	265fc <__udivsi3>
   29a5a:	1e05      	subs	r5, r0, #0
   29a5c:	d1f1      	bne.n	29a42 <_printf_i+0x1d6>
   29a5e:	2f08      	cmp	r7, #8
   29a60:	d109      	bne.n	29a76 <_printf_i+0x20a>
   29a62:	6823      	ldr	r3, [r4, #0]
   29a64:	07db      	lsls	r3, r3, #31
   29a66:	d506      	bpl.n	29a76 <_printf_i+0x20a>
   29a68:	6863      	ldr	r3, [r4, #4]
   29a6a:	6922      	ldr	r2, [r4, #16]
   29a6c:	4293      	cmp	r3, r2
   29a6e:	dc02      	bgt.n	29a76 <_printf_i+0x20a>
   29a70:	2330      	movs	r3, #48	; 0x30
   29a72:	3e01      	subs	r6, #1
   29a74:	7033      	strb	r3, [r6, #0]
   29a76:	9b04      	ldr	r3, [sp, #16]
   29a78:	1b9b      	subs	r3, r3, r6
   29a7a:	6123      	str	r3, [r4, #16]
   29a7c:	9b07      	ldr	r3, [sp, #28]
   29a7e:	aa09      	add	r2, sp, #36	; 0x24
   29a80:	9300      	str	r3, [sp, #0]
   29a82:	0021      	movs	r1, r4
   29a84:	9b06      	ldr	r3, [sp, #24]
   29a86:	9805      	ldr	r0, [sp, #20]
   29a88:	f7ff fe82 	bl	29790 <_printf_common>
   29a8c:	1c43      	adds	r3, r0, #1
   29a8e:	d1b3      	bne.n	299f8 <_printf_i+0x18c>
   29a90:	2001      	movs	r0, #1
   29a92:	4240      	negs	r0, r0
   29a94:	b00b      	add	sp, #44	; 0x2c
   29a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29a98:	0002b08a 	.word	0x0002b08a
   29a9c:	0002b079 	.word	0x0002b079

00029aa0 <memchr>:
   29aa0:	b2c9      	uxtb	r1, r1
   29aa2:	1882      	adds	r2, r0, r2
   29aa4:	4290      	cmp	r0, r2
   29aa6:	d101      	bne.n	29aac <memchr+0xc>
   29aa8:	2000      	movs	r0, #0
   29aaa:	4770      	bx	lr
   29aac:	7803      	ldrb	r3, [r0, #0]
   29aae:	428b      	cmp	r3, r1
   29ab0:	d0fb      	beq.n	29aaa <memchr+0xa>
   29ab2:	3001      	adds	r0, #1
   29ab4:	e7f6      	b.n	29aa4 <memchr+0x4>

00029ab6 <_realloc_r>:
   29ab6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29ab8:	0007      	movs	r7, r0
   29aba:	000d      	movs	r5, r1
   29abc:	0016      	movs	r6, r2
   29abe:	2900      	cmp	r1, #0
   29ac0:	d105      	bne.n	29ace <_realloc_r+0x18>
   29ac2:	0011      	movs	r1, r2
   29ac4:	f7ff fa86 	bl	28fd4 <_malloc_r>
   29ac8:	0004      	movs	r4, r0
   29aca:	0020      	movs	r0, r4
   29acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29ace:	2a00      	cmp	r2, #0
   29ad0:	d103      	bne.n	29ada <_realloc_r+0x24>
   29ad2:	f7ff fa35 	bl	28f40 <_free_r>
   29ad6:	0034      	movs	r4, r6
   29ad8:	e7f7      	b.n	29aca <_realloc_r+0x14>
   29ada:	f000 f812 	bl	29b02 <_malloc_usable_size_r>
   29ade:	002c      	movs	r4, r5
   29ae0:	4286      	cmp	r6, r0
   29ae2:	d9f2      	bls.n	29aca <_realloc_r+0x14>
   29ae4:	0031      	movs	r1, r6
   29ae6:	0038      	movs	r0, r7
   29ae8:	f7ff fa74 	bl	28fd4 <_malloc_r>
   29aec:	1e04      	subs	r4, r0, #0
   29aee:	d0ec      	beq.n	29aca <_realloc_r+0x14>
   29af0:	0029      	movs	r1, r5
   29af2:	0032      	movs	r2, r6
   29af4:	f7ff f9f2 	bl	28edc <memcpy>
   29af8:	0029      	movs	r1, r5
   29afa:	0038      	movs	r0, r7
   29afc:	f7ff fa20 	bl	28f40 <_free_r>
   29b00:	e7e3      	b.n	29aca <_realloc_r+0x14>

00029b02 <_malloc_usable_size_r>:
   29b02:	1f0b      	subs	r3, r1, #4
   29b04:	681b      	ldr	r3, [r3, #0]
   29b06:	1f18      	subs	r0, r3, #4
   29b08:	2b00      	cmp	r3, #0
   29b0a:	da01      	bge.n	29b10 <_malloc_usable_size_r+0xe>
   29b0c:	580b      	ldr	r3, [r1, r0]
   29b0e:	18c0      	adds	r0, r0, r3
   29b10:	4770      	bx	lr
   29b12:	0000      	movs	r0, r0
   29b14:	30303030 	.word	0x30303030
   29b18:	30303030 	.word	0x30303030
   29b1c:	00003030 	.word	0x00003030
   29b20:	2e707466 	.word	0x2e707466
   29b24:	76697264 	.word	0x76697264
   29b28:	2e716865 	.word	0x2e716865
   29b2c:	006d6f63 	.word	0x006d6f63
   29b30:	7269662f 	.word	0x7269662f
   29b34:	7261776d 	.word	0x7261776d
   29b38:	00002f65 	.word	0x00002f65
   29b3c:	75686172 	.word	0x75686172
   29b40:	61726e6c 	.word	0x61726e6c
   29b44:	646f6874 	.word	0x646f6874
   29b48:	006c636b 	.word	0x006c636b
   29b4c:	34333231 	.word	0x34333231
   29b50:	38373635 	.word	0x38373635
   29b54:	00000039 	.word	0x00000039
   29b58:	6d726966 	.word	0x6d726966
   29b5c:	65726177 	.word	0x65726177
   29b60:	6e69622e 	.word	0x6e69622e
   29b64:	00000000 	.word	0x00000000
   29b68:	31343037 	.word	0x31343037
   29b6c:	39363931 	.word	0x39363931
   29b70:	00003935 	.word	0x00003935
   29b74:	38393637 	.word	0x38393637
   29b78:	32393334 	.word	0x32393334
   29b7c:	00003130 	.word	0x00003130
   29b80:	33383337 	.word	0x33383337
   29b84:	32343136 	.word	0x32343136
   29b88:	00003431 	.word	0x00003431
   29b8c:	33383337 	.word	0x33383337
   29b90:	36323236 	.word	0x36323236
   29b94:	00003837 	.word	0x00003837
   29b98:	36383539 	.word	0x36383539
   29b9c:	39353331 	.word	0x39353331
   29ba0:	00003837 	.word	0x00003837
   29ba4:	00003a50 	.word	0x00003a50
   29ba8:	00003a53 	.word	0x00003a53
   29bac:	0000000a 	.word	0x0000000a
   29bb0:	00006425 	.word	0x00006425
   29bb4:	204d5347 	.word	0x204d5347
   29bb8:	656d6954 	.word	0x656d6954
   29bbc:	0074756f 	.word	0x0074756f
   29bc0:	4f525245 	.word	0x4f525245
   29bc4:	00000052 	.word	0x00000052
   29bc8:	00004b4f 	.word	0x00004b4f
   29bcc:	000d5441 	.word	0x000d5441
   29bd0:	492b5441 	.word	0x492b5441
   29bd4:	303d4346 	.word	0x303d4346
   29bd8:	000d302c 	.word	0x000d302c
   29bdc:	4552432b 	.word	0x4552432b
   29be0:	30203a47 	.word	0x30203a47
   29be4:	0000312c 	.word	0x0000312c
   29be8:	432b5441 	.word	0x432b5441
   29bec:	3f474552 	.word	0x3f474552
   29bf0:	0000000d 	.word	0x0000000d
   29bf4:	4552432b 	.word	0x4552432b
   29bf8:	30203a47 	.word	0x30203a47
   29bfc:	0000352c 	.word	0x0000352c
   29c00:	492b5441 	.word	0x492b5441
   29c04:	253d5250 	.word	0x253d5250
   29c08:	00000d64 	.word	0x00000d64
   29c0c:	492b5441 	.word	0x492b5441
   29c10:	303d5250 	.word	0x303d5250
   29c14:	0000000d 	.word	0x0000000d
   29c18:	432b5441 	.word	0x432b5441
   29c1c:	3d474552 	.word	0x3d474552
   29c20:	00000d31 	.word	0x00000d31
   29c24:	432b5441 	.word	0x432b5441
   29c28:	3d4e5546 	.word	0x3d4e5546
   29c2c:	00000d31 	.word	0x00000d31
   29c30:	5546432b 	.word	0x5546432b
   29c34:	31203a4e 	.word	0x31203a4e
   29c38:	00000000 	.word	0x00000000
   29c3c:	432b5441 	.word	0x432b5441
   29c40:	3f4e5546 	.word	0x3f4e5546
   29c44:	0000000d 	.word	0x0000000d
   29c48:	432b5441 	.word	0x432b5441
   29c4c:	3d4e5546 	.word	0x3d4e5546
   29c50:	00000d30 	.word	0x00000d30
   29c54:	5546432b 	.word	0x5546432b
   29c58:	30203a4e 	.word	0x30203a4e
   29c5c:	00000000 	.word	0x00000000
   29c60:	432b5441 	.word	0x432b5441
   29c64:	3d4e5546 	.word	0x3d4e5546
   29c68:	0d312c31 	.word	0x0d312c31
   29c6c:	00000000 	.word	0x00000000
   29c70:	4950432b 	.word	0x4950432b
   29c74:	52203a4e 	.word	0x52203a4e
   29c78:	59444145 	.word	0x59444145
   29c7c:	00000000 	.word	0x00000000
   29c80:	432b5441 	.word	0x432b5441
   29c84:	3f4e4950 	.word	0x3f4e4950
   29c88:	0000000d 	.word	0x0000000d
   29c8c:	432b5441 	.word	0x432b5441
   29c90:	4144474d 	.word	0x4144474d
   29c94:	4544223d 	.word	0x4544223d
   29c98:	4c41204c 	.word	0x4c41204c
   29c9c:	000d224c 	.word	0x000d224c
   29ca0:	57265441 	.word	0x57265441
   29ca4:	0000000d 	.word	0x0000000d
   29ca8:	432b5441 	.word	0x432b5441
   29cac:	3d50494c 	.word	0x3d50494c
   29cb0:	00000d31 	.word	0x00000d31
   29cb4:	432b5441 	.word	0x432b5441
   29cb8:	3d504c4f 	.word	0x3d504c4f
   29cbc:	00000d31 	.word	0x00000d31
   29cc0:	432b5441 	.word	0x432b5441
   29cc4:	4b4c4353 	.word	0x4b4c4353
   29cc8:	000d313d 	.word	0x000d313d
   29ccc:	432b5441 	.word	0x432b5441
   29cd0:	3f504c4f 	.word	0x3f504c4f
   29cd4:	0000000d 	.word	0x0000000d
   29cd8:	4c4f432b 	.word	0x4c4f432b
   29cdc:	00000050 	.word	0x00000050
   29ce0:	0000003a 	.word	0x0000003a
   29ce4:	0000002c 	.word	0x0000002c
   29ce8:	432b5441 	.word	0x432b5441
   29cec:	3d43434c 	.word	0x3d43434c
   29cf0:	00000d31 	.word	0x00000d31
   29cf4:	46265441 	.word	0x46265441
   29cf8:	0000000d 	.word	0x0000000d
   29cfc:	30455441 	.word	0x30455441
   29d00:	0000000d 	.word	0x0000000d
   29d04:	432b5441 	.word	0x432b5441
   29d08:	3d46474d 	.word	0x3d46474d
   29d0c:	00000d31 	.word	0x00000d31
   29d10:	432b5441 	.word	0x432b5441
   29d14:	3d504d53 	.word	0x3d504d53
   29d18:	312c3731 	.word	0x312c3731
   29d1c:	302c3736 	.word	0x302c3736
   29d20:	000d302c 	.word	0x000d302c
   29d24:	432b5441 	.word	0x432b5441
   29d28:	3d534153 	.word	0x3d534153
   29d2c:	00000d30 	.word	0x00000d30
   29d30:	432b5441 	.word	0x432b5441
   29d34:	3d534153 	.word	0x3d534153
   29d38:	00000d31 	.word	0x00000d31
   29d3c:	432b5441 	.word	0x432b5441
   29d40:	000d5153 	.word	0x000d5153
   29d44:	00003939 	.word	0x00003939
   29d48:	432b5441 	.word	0x432b5441
   29d4c:	3d494d4e 	.word	0x3d494d4e
   29d50:	2c312c32 	.word	0x2c312c32
   29d54:	2c302c30 	.word	0x2c302c30
   29d58:	00000d30 	.word	0x00000d30
   29d5c:	432b5441 	.word	0x432b5441
   29d60:	3d494d4e 	.word	0x3d494d4e
   29d64:	2c302c31 	.word	0x2c302c31
   29d68:	2c302c30 	.word	0x2c302c30
   29d6c:	00000d30 	.word	0x00000d30
   29d70:	432b5441 	.word	0x432b5441
   29d74:	3d53474d 	.word	0x3d53474d
   29d78:	22732522 	.word	0x22732522
   29d7c:	0000000d 	.word	0x0000000d
   29d80:	0000003e 	.word	0x0000003e
   29d84:	0d1a7325 	.word	0x0d1a7325
   29d88:	00000000 	.word	0x00000000
   29d8c:	432b5441 	.word	0x432b5441
   29d90:	3d4c474d 	.word	0x3d4c474d
   29d94:	43455222 	.word	0x43455222
   29d98:	524e5520 	.word	0x524e5520
   29d9c:	22444145 	.word	0x22444145
   29da0:	0000000d 	.word	0x0000000d
   29da4:	432b5441 	.word	0x432b5441
   29da8:	3d4c474d 	.word	0x3d4c474d
   29dac:	43455222 	.word	0x43455222
   29db0:	41455220 	.word	0x41455220
   29db4:	000d2244 	.word	0x000d2244
   29db8:	432b5441 	.word	0x432b5441
   29dbc:	3d4c474d 	.word	0x3d4c474d
   29dc0:	4c4c4122 	.word	0x4c4c4122
   29dc4:	00000d22 	.word	0x00000d22
   29dc8:	4c474d43 	.word	0x4c474d43
   29dcc:	00000000 	.word	0x00000000
   29dd0:	432b5441 	.word	0x432b5441
   29dd4:	3d52474d 	.word	0x3d52474d
   29dd8:	000d6425 	.word	0x000d6425
   29ddc:	474d432b 	.word	0x474d432b
   29de0:	00000052 	.word	0x00000052
   29de4:	25445441 	.word	0x25445441
   29de8:	000d3b73 	.word	0x000d3b73
   29dec:	0d415441 	.word	0x0d415441
   29df0:	00000000 	.word	0x00000000
   29df4:	432b5441 	.word	0x432b5441
   29df8:	3d53544c 	.word	0x3d53544c
   29dfc:	00000d31 	.word	0x00000d31
   29e00:	432b5441 	.word	0x432b5441
   29e04:	3d53544c 	.word	0x3d53544c
   29e08:	00000d30 	.word	0x00000d30
   29e0c:	442b5441 	.word	0x442b5441
   29e10:	3d544544 	.word	0x3d544544
   29e14:	00000d31 	.word	0x00000d31
   29e18:	562b5441 	.word	0x562b5441
   29e1c:	223d5354 	.word	0x223d5354
   29e20:	0d227325 	.word	0x0d227325
   29e24:	00000000 	.word	0x00000000
   29e28:	432b5441 	.word	0x432b5441
   29e2c:	0d505548 	.word	0x0d505548
   29e30:	00000000 	.word	0x00000000
   29e34:	432b5441 	.word	0x432b5441
   29e38:	3d415743 	.word	0x3d415743
   29e3c:	0d302c30 	.word	0x0d302c30
   29e40:	00000000 	.word	0x00000000
   29e44:	472b5441 	.word	0x472b5441
   29e48:	55424d53 	.word	0x55424d53
   29e4c:	313d5953 	.word	0x313d5953
   29e50:	0000000d 	.word	0x0000000d
   29e54:	472b5441 	.word	0x472b5441
   29e58:	55424d53 	.word	0x55424d53
   29e5c:	303d5953 	.word	0x303d5953
   29e60:	0000000d 	.word	0x0000000d
   29e64:	432b5441 	.word	0x432b5441
   29e68:	3d434552 	.word	0x3d434552
   29e6c:	00000d35 	.word	0x00000d35
   29e70:	432b5441 	.word	0x432b5441
   29e74:	3d434552 	.word	0x3d434552
   29e78:	43222c34 	.word	0x43222c34
   29e7c:	73555c3a 	.word	0x73555c3a
   29e80:	255c7265 	.word	0x255c7265
   29e84:	6d612e63 	.word	0x6d612e63
   29e88:	302c2272 	.word	0x302c2272
   29e8c:	2c30392c 	.word	0x2c30392c
   29e90:	000d7525 	.word	0x000d7525
   29e94:	432b5441 	.word	0x432b5441
   29e98:	3f4b4c43 	.word	0x3f4b4c43
   29e9c:	0000000d 	.word	0x0000000d
   29ea0:	00000022 	.word	0x00000022
   29ea4:	0000002f 	.word	0x0000002f
   29ea8:	0000002b 	.word	0x0000002b
   29eac:	544d432b 	.word	0x544d432b
   29eb0:	00003a49 	.word	0x00003a49
   29eb4:	474e4952 	.word	0x474e4952
   29eb8:	00000000 	.word	0x00000000
   29ebc:	494c432b 	.word	0x494c432b
   29ec0:	00000050 	.word	0x00000050
   29ec4:	43204f4e 	.word	0x43204f4e
   29ec8:	49525241 	.word	0x49525241
   29ecc:	00005245 	.word	0x00005245
   29ed0:	59535542 	.word	0x59535542
   29ed4:	00000000 	.word	0x00000000
   29ed8:	41204f4e 	.word	0x41204f4e
   29edc:	4557534e 	.word	0x4557534e
   29ee0:	00000052 	.word	0x00000052
   29ee4:	4d54442b 	.word	0x4d54442b
   29ee8:	00003a46 	.word	0x00003a46
   29eec:	4552432b 	.word	0x4552432b
   29ef0:	30203a43 	.word	0x30203a43
   29ef4:	00000000 	.word	0x00000000
   29ef8:	532b5441 	.word	0x532b5441
   29efc:	52425041 	.word	0x52425041
   29f00:	312c333d 	.word	0x312c333d
   29f04:	4f43222c 	.word	0x4f43222c
   29f08:	5059544e 	.word	0x5059544e
   29f0c:	222c2245 	.word	0x222c2245
   29f10:	53525047 	.word	0x53525047
   29f14:	00000d22 	.word	0x00000d22
   29f18:	432b5441 	.word	0x432b5441
   29f1c:	3f53504f 	.word	0x3f53504f
   29f20:	0000000d 	.word	0x0000000d
   29f24:	504f432b 	.word	0x504f432b
   29f28:	00003a53 	.word	0x00003a53
   29f2c:	41454449 	.word	0x41454449
   29f30:	00000000 	.word	0x00000000
   29f34:	532b5441 	.word	0x532b5441
   29f38:	52425041 	.word	0x52425041
   29f3c:	312c333d 	.word	0x312c333d
   29f40:	5041222c 	.word	0x5041222c
   29f44:	222c224e 	.word	0x222c224e
   29f48:	65746e69 	.word	0x65746e69
   29f4c:	74656e72 	.word	0x74656e72
   29f50:	00000d22 	.word	0x00000d22
   29f54:	41444f56 	.word	0x41444f56
   29f58:	00000000 	.word	0x00000000
   29f5c:	532b5441 	.word	0x532b5441
   29f60:	52425041 	.word	0x52425041
   29f64:	312c333d 	.word	0x312c333d
   29f68:	5041222c 	.word	0x5041222c
   29f6c:	222c224e 	.word	0x222c224e
   29f70:	22777777 	.word	0x22777777
   29f74:	0000000d 	.word	0x0000000d
   29f78:	4c4e5342 	.word	0x4c4e5342
   29f7c:	00000000 	.word	0x00000000
   29f80:	532b5441 	.word	0x532b5441
   29f84:	52425041 	.word	0x52425041
   29f88:	312c333d 	.word	0x312c333d
   29f8c:	5041222c 	.word	0x5041222c
   29f90:	222c224e 	.word	0x222c224e
   29f94:	6c6e7362 	.word	0x6c6e7362
   29f98:	2274656e 	.word	0x2274656e
   29f9c:	0000000d 	.word	0x0000000d
   29fa0:	54524941 	.word	0x54524941
   29fa4:	00004c45 	.word	0x00004c45
   29fa8:	532b5441 	.word	0x532b5441
   29fac:	52425041 	.word	0x52425041
   29fb0:	312c333d 	.word	0x312c333d
   29fb4:	5041222c 	.word	0x5041222c
   29fb8:	222c224e 	.word	0x222c224e
   29fbc:	74726961 	.word	0x74726961
   29fc0:	70676c65 	.word	0x70676c65
   29fc4:	632e7372 	.word	0x632e7372
   29fc8:	0d226d6f 	.word	0x0d226d6f
   29fcc:	00000000 	.word	0x00000000
   29fd0:	532b5441 	.word	0x532b5441
   29fd4:	52425041 	.word	0x52425041
   29fd8:	312c333d 	.word	0x312c333d
   29fdc:	5041222c 	.word	0x5041222c
   29fe0:	222c224e 	.word	0x222c224e
   29fe4:	00000d22 	.word	0x00000d22
   29fe8:	532b5441 	.word	0x532b5441
   29fec:	52425041 	.word	0x52425041
   29ff0:	312c323d 	.word	0x312c323d
   29ff4:	0000000d 	.word	0x0000000d
   29ff8:	5041532b 	.word	0x5041532b
   29ffc:	203a5242 	.word	0x203a5242
   2a000:	00302c31 	.word	0x00302c31
   2a004:	5041532b 	.word	0x5041532b
   2a008:	203a5242 	.word	0x203a5242
   2a00c:	00312c31 	.word	0x00312c31
   2a010:	5041532b 	.word	0x5041532b
   2a014:	203a5242 	.word	0x203a5242
   2a018:	00322c31 	.word	0x00322c31
   2a01c:	5041532b 	.word	0x5041532b
   2a020:	203a5242 	.word	0x203a5242
   2a024:	00332c31 	.word	0x00332c31
   2a028:	532b5441 	.word	0x532b5441
   2a02c:	52425041 	.word	0x52425041
   2a030:	312c313d 	.word	0x312c313d
   2a034:	0000000d 	.word	0x0000000d
   2a038:	532b5441 	.word	0x532b5441
   2a03c:	52425041 	.word	0x52425041
   2a040:	312c303d 	.word	0x312c303d
   2a044:	0000000d 	.word	0x0000000d
   2a048:	462b5441 	.word	0x462b5441
   2a04c:	49435054 	.word	0x49435054
   2a050:	0d313d44 	.word	0x0d313d44
   2a054:	00000000 	.word	0x00000000
   2a058:	462b5441 	.word	0x462b5441
   2a05c:	45535054 	.word	0x45535054
   2a060:	223d5652 	.word	0x223d5652
   2a064:	0d227325 	.word	0x0d227325
   2a068:	00000000 	.word	0x00000000
   2a06c:	462b5441 	.word	0x462b5441
   2a070:	4e555054 	.word	0x4e555054
   2a074:	7325223d 	.word	0x7325223d
   2a078:	00000d22 	.word	0x00000d22
   2a07c:	462b5441 	.word	0x462b5441
   2a080:	57505054 	.word	0x57505054
   2a084:	7325223d 	.word	0x7325223d
   2a088:	00000d22 	.word	0x00000d22
   2a08c:	462b5441 	.word	0x462b5441
   2a090:	45475054 	.word	0x45475054
   2a094:	4d414e54 	.word	0x4d414e54
   2a098:	25223d45 	.word	0x25223d45
   2a09c:	000d2273 	.word	0x000d2273
   2a0a0:	462b5441 	.word	0x462b5441
   2a0a4:	45475054 	.word	0x45475054
   2a0a8:	54415054 	.word	0x54415054
   2a0ac:	25223d48 	.word	0x25223d48
   2a0b0:	000d2273 	.word	0x000d2273
   2a0b4:	5054462b 	.word	0x5054462b
   2a0b8:	455a4953 	.word	0x455a4953
   2a0bc:	2c31203a 	.word	0x2c31203a
   2a0c0:	00000000 	.word	0x00000000
   2a0c4:	462b5441 	.word	0x462b5441
   2a0c8:	49535054 	.word	0x49535054
   2a0cc:	000d455a 	.word	0x000d455a
   2a0d0:	5054462b 	.word	0x5054462b
   2a0d4:	3a544547 	.word	0x3a544547
   2a0d8:	312c3120 	.word	0x312c3120
   2a0dc:	00000000 	.word	0x00000000
   2a0e0:	462b5441 	.word	0x462b5441
   2a0e4:	45475054 	.word	0x45475054
   2a0e8:	0d313d54 	.word	0x0d313d54
   2a0ec:	00000000 	.word	0x00000000
   2a0f0:	462b5441 	.word	0x462b5441
   2a0f4:	45475054 	.word	0x45475054
   2a0f8:	2c323d54 	.word	0x2c323d54
   2a0fc:	000d6425 	.word	0x000d6425
   2a100:	5054462b 	.word	0x5054462b
   2a104:	3a544547 	.word	0x3a544547
   2a108:	00000020 	.word	0x00000020
   2a10c:	434c432b 	.word	0x434c432b
   2a110:	31203a43 	.word	0x31203a43
   2a114:	322c302c 	.word	0x322c302c
   2a118:	00000000 	.word	0x00000000
   2a11c:	434c432b 	.word	0x434c432b
   2a120:	31203a43 	.word	0x31203a43
   2a124:	332c302c 	.word	0x332c302c
   2a128:	00000000 	.word	0x00000000
   2a12c:	434c432b 	.word	0x434c432b
   2a130:	31203a43 	.word	0x31203a43
   2a134:	302c302c 	.word	0x302c302c
   2a138:	00000000 	.word	0x00000000
   2a13c:	434c432b 	.word	0x434c432b
   2a140:	31203a43 	.word	0x31203a43
   2a144:	362c302c 	.word	0x362c302c
	...
   2a150:	4e4f4d41 	.word	0x4e4f4d41
   2a154:	00000000 	.word	0x00000000
   2a158:	55475250 	.word	0x55475250
   2a15c:	00004450 	.word	0x00004450
   2a160:	54494157 	.word	0x54494157
   2a164:	00000000 	.word	0x00000000
   2a168:	204d5347 	.word	0x204d5347
   2a16c:	4c4c4143 	.word	0x4c4c4143
   2a170:	49415720 	.word	0x49415720
   2a174:	4e495454 	.word	0x4e495454
   2a178:	49442047 	.word	0x49442047
   2a17c:	4c424153 	.word	0x4c424153
   2a180:	203a2045 	.word	0x203a2045
   2a184:	43435553 	.word	0x43435553
   2a188:	00535345 	.word	0x00535345
   2a18c:	204d5347 	.word	0x204d5347
   2a190:	4c4c4143 	.word	0x4c4c4143
   2a194:	49415720 	.word	0x49415720
   2a198:	4e495454 	.word	0x4e495454
   2a19c:	49442047 	.word	0x49442047
   2a1a0:	4c424153 	.word	0x4c424153
   2a1a4:	203a2045 	.word	0x203a2045
   2a1a8:	4c494146 	.word	0x4c494146
   2a1ac:	00004445 	.word	0x00004445
   2a1b0:	41454c43 	.word	0x41454c43
   2a1b4:	4c4c4152 	.word	0x4c4c4152
   2a1b8:	00000000 	.word	0x00000000
   2a1bc:	204c4c41 	.word	0x204c4c41
   2a1c0:	52455355 	.word	0x52455355
   2a1c4:	4d554e20 	.word	0x4d554e20
   2a1c8:	53524542 	.word	0x53524542
   2a1cc:	454c4320 	.word	0x454c4320
   2a1d0:	44455241 	.word	0x44455241
   2a1d4:	00000000 	.word	0x00000000
   2a1d8:	41464544 	.word	0x41464544
   2a1dc:	00544c55 	.word	0x00544c55
   2a1e0:	204c4c41 	.word	0x204c4c41
   2a1e4:	54544553 	.word	0x54544553
   2a1e8:	53474e49 	.word	0x53474e49
   2a1ec:	45524120 	.word	0x45524120
   2a1f0:	574f4e20 	.word	0x574f4e20
   2a1f4:	43414620 	.word	0x43414620
   2a1f8:	59524f54 	.word	0x59524f54
   2a1fc:	46454420 	.word	0x46454420
   2a200:	544c5541 	.word	0x544c5541
   2a204:	00000000 	.word	0x00000000
   2a208:	004d554e 	.word	0x004d554e
   2a20c:	4e206f4e 	.word	0x4e206f4e
   2a210:	65626d75 	.word	0x65626d75
   2a214:	45207372 	.word	0x45207372
   2a218:	74736978 	.word	0x74736978
   2a21c:	00000073 	.word	0x00000073
   2a220:	45534552 	.word	0x45534552
   2a224:	00000054 	.word	0x00000054
   2a228:	00444944 	.word	0x00444944
   2a22c:	32422020 	.word	0x32422020
   2a230:	33302d34 	.word	0x33302d34
   2a234:	2d39302d 	.word	0x2d39302d
   2a238:	20203931 	.word	0x20203931
   2a23c:	00000000 	.word	0x00000000
   2a240:	20756c25 	.word	0x20756c25
   2a244:	00007325 	.word	0x00007325
   2a248:	4f545541 	.word	0x4f545541
   2a24c:	00004e4f 	.word	0x00004e4f
   2a250:	4f544f4d 	.word	0x4f544f4d
   2a254:	55412052 	.word	0x55412052
   2a258:	4e4f4f54 	.word	0x4e4f4f54
   2a25c:	004e4f20 	.word	0x004e4f20
   2a260:	4f545541 	.word	0x4f545541
   2a264:	0046464f 	.word	0x0046464f
   2a268:	4f544f4d 	.word	0x4f544f4d
   2a26c:	55412052 	.word	0x55412052
   2a270:	4e4f4f54 	.word	0x4e4f4f54
   2a274:	46464f20 	.word	0x46464f20
   2a278:	00000000 	.word	0x00000000
   2a27c:	50594257 	.word	0x50594257
   2a280:	00004e4f 	.word	0x00004e4f
   2a284:	45544157 	.word	0x45544157
   2a288:	59422052 	.word	0x59422052
   2a28c:	53534150 	.word	0x53534150
   2a290:	004e4f20 	.word	0x004e4f20
   2a294:	50594257 	.word	0x50594257
   2a298:	0046464f 	.word	0x0046464f
   2a29c:	45544157 	.word	0x45544157
   2a2a0:	59422052 	.word	0x59422052
   2a2a4:	53534150 	.word	0x53534150
   2a2a8:	46464f20 	.word	0x46464f20
   2a2ac:	00000000 	.word	0x00000000
   2a2b0:	4f505053 	.word	0x4f505053
   2a2b4:	0000004e 	.word	0x0000004e
   2a2b8:	20505053 	.word	0x20505053
   2a2bc:	00004e4f 	.word	0x00004e4f
   2a2c0:	4f505053 	.word	0x4f505053
   2a2c4:	00004646 	.word	0x00004646
   2a2c8:	20505053 	.word	0x20505053
   2a2cc:	0046464f 	.word	0x0046464f
   2a2d0:	56505053 	.word	0x56505053
   2a2d4:	00000000 	.word	0x00000000
   2a2d8:	20505053 	.word	0x20505053
   2a2dc:	544c4f56 	.word	0x544c4f56
   2a2e0:	54455320 	.word	0x54455320
   2a2e4:	00000000 	.word	0x00000000
   2a2e8:	4f514553 	.word	0x4f514553
   2a2ec:	0000004e 	.word	0x0000004e
   2a2f0:	50514553 	.word	0x50514553
   2a2f4:	004e4f20 	.word	0x004e4f20
   2a2f8:	4f514553 	.word	0x4f514553
   2a2fc:	00004646 	.word	0x00004646
   2a300:	50514553 	.word	0x50514553
   2a304:	46464f20 	.word	0x46464f20
   2a308:	00000000 	.word	0x00000000
   2a30c:	00444e44 	.word	0x00444e44
   2a310:	20444e44 	.word	0x20444e44
   2a314:	0000203a 	.word	0x0000203a
   2a318:	004b4f20 	.word	0x004b4f20
   2a31c:	4b424446 	.word	0x4b424446
   2a320:	00000000 	.word	0x00000000
   2a324:	4b424446 	.word	0x4b424446
   2a328:	25203a20 	.word	0x25203a20
   2a32c:	00000064 	.word	0x00000064
   2a330:	454d4f55 	.word	0x454d4f55
   2a334:	444f4854 	.word	0x444f4854
   2a338:	00000000 	.word	0x00000000
   2a33c:	454d4f55 	.word	0x454d4f55
   2a340:	444f4854 	.word	0x444f4854
   2a344:	00203a20 	.word	0x00203a20
   2a348:	5942564d 	.word	0x5942564d
   2a34c:	004e4f50 	.word	0x004e4f50
   2a350:	4f544f4d 	.word	0x4f544f4d
   2a354:	4f562052 	.word	0x4f562052
   2a358:	4741544c 	.word	0x4741544c
   2a35c:	59422045 	.word	0x59422045
   2a360:	53534150 	.word	0x53534150
   2a364:	004e4f20 	.word	0x004e4f20
   2a368:	5942564d 	.word	0x5942564d
   2a36c:	46464f50 	.word	0x46464f50
   2a370:	00000000 	.word	0x00000000
   2a374:	4f544f4d 	.word	0x4f544f4d
   2a378:	4f562052 	.word	0x4f562052
   2a37c:	4741544c 	.word	0x4741544c
   2a380:	59422045 	.word	0x59422045
   2a384:	53534150 	.word	0x53534150
   2a388:	46464f20 	.word	0x46464f20
   2a38c:	00000000 	.word	0x00000000
   2a390:	5942564d 	.word	0x5942564d
   2a394:	00005450 	.word	0x00005450
   2a398:	6f746f4d 	.word	0x6f746f4d
   2a39c:	6f562072 	.word	0x6f562072
   2a3a0:	6761746c 	.word	0x6761746c
   2a3a4:	79422065 	.word	0x79422065
   2a3a8:	73736170 	.word	0x73736170
   2a3ac:	6d695420 	.word	0x6d695420
   2a3b0:	65532065 	.word	0x65532065
   2a3b4:	6f742074 	.word	0x6f742074
   2a3b8:	00642520 	.word	0x00642520
   2a3bc:	50534552 	.word	0x50534552
   2a3c0:	00000000 	.word	0x00000000
   2a3c4:	50534552 	.word	0x50534552
   2a3c8:	00203a20 	.word	0x00203a20
   2a3cc:	0052564f 	.word	0x0052564f
   2a3d0:	2052564f 	.word	0x2052564f
   2a3d4:	20544553 	.word	0x20544553
   2a3d8:	00004b4f 	.word	0x00004b4f
   2a3dc:	52444e55 	.word	0x52444e55
   2a3e0:	00000000 	.word	0x00000000
   2a3e4:	52444e55 	.word	0x52444e55
   2a3e8:	54455320 	.word	0x54455320
   2a3ec:	004b4f20 	.word	0x004b4f20
   2a3f0:	41545341 	.word	0x41545341
   2a3f4:	00000054 	.word	0x00000054
   2a3f8:	75253a43 	.word	0x75253a43
   2a3fc:	0a75252e 	.word	0x0a75252e
   2a400:	75253a4e 	.word	0x75253a4e
   2a404:	253a4f0a 	.word	0x253a4f0a
   2a408:	3a550a75 	.word	0x3a550a75
   2a40c:	4f0a7525 	.word	0x4f0a7525
   2a410:	75253a50 	.word	0x75253a50
   2a414:	3a50550a 	.word	0x3a50550a
   2a418:	00007525 	.word	0x00007525
   2a41c:	4f46564f 	.word	0x4f46564f
   2a420:	0000004e 	.word	0x0000004e
   2a424:	56455250 	.word	0x56455250
   2a428:	20544e45 	.word	0x20544e45
   2a42c:	5245564f 	.word	0x5245564f
   2a430:	574f4c46 	.word	0x574f4c46
   2a434:	54455320 	.word	0x54455320
   2a438:	474e4954 	.word	0x474e4954
   2a43c:	004e4f20 	.word	0x004e4f20
   2a440:	4f46564f 	.word	0x4f46564f
   2a444:	00004646 	.word	0x00004646
   2a448:	56455250 	.word	0x56455250
   2a44c:	20544e45 	.word	0x20544e45
   2a450:	5245564f 	.word	0x5245564f
   2a454:	574f4c46 	.word	0x574f4c46
   2a458:	54455320 	.word	0x54455320
   2a45c:	474e4954 	.word	0x474e4954
   2a460:	46464f20 	.word	0x46464f20
   2a464:	00000000 	.word	0x00000000
   2a468:	4f4d324d 	.word	0x4f4d324d
   2a46c:	0000004e 	.word	0x0000004e
   2a470:	204d324d 	.word	0x204d324d
   2a474:	6e727554 	.word	0x6e727554
   2a478:	4f206465 	.word	0x4f206465
   2a47c:	52202c6e 	.word	0x52202c6e
   2a480:	746f6d65 	.word	0x746f6d65
   2a484:	754e2065 	.word	0x754e2065
   2a488:	7265626d 	.word	0x7265626d
   2a48c:	726c4120 	.word	0x726c4120
   2a490:	79646165 	.word	0x79646165
   2a494:	72655620 	.word	0x72655620
   2a498:	65696669 	.word	0x65696669
   2a49c:	00000064 	.word	0x00000064
   2a4a0:	6f727245 	.word	0x6f727245
   2a4a4:	4d203a72 	.word	0x4d203a72
   2a4a8:	52204d32 	.word	0x52204d32
   2a4ac:	746f6d65 	.word	0x746f6d65
   2a4b0:	754e2065 	.word	0x754e2065
   2a4b4:	7265626d 	.word	0x7265626d
   2a4b8:	746f4e20 	.word	0x746f4e20
   2a4bc:	65725020 	.word	0x65725020
   2a4c0:	746e6573 	.word	0x746e6573
   2a4c4:	00000000 	.word	0x00000000
   2a4c8:	4f4d324d 	.word	0x4f4d324d
   2a4cc:	00004646 	.word	0x00004646
   2a4d0:	204d324d 	.word	0x204d324d
   2a4d4:	54544553 	.word	0x54544553
   2a4d8:	20474e49 	.word	0x20474e49
   2a4dc:	0046464f 	.word	0x0046464f
   2a4e0:	54415453 	.word	0x54415453
   2a4e4:	00005355 	.word	0x00005355
   2a4e8:	45544c41 	.word	0x45544c41
   2a4ec:	54414e52 	.word	0x54414e52
   2a4f0:	554e2045 	.word	0x554e2045
   2a4f4:	5245424d 	.word	0x5245424d
   2a4f8:	004e4f20 	.word	0x004e4f20
   2a4fc:	45544c41 	.word	0x45544c41
   2a500:	54414e52 	.word	0x54414e52
   2a504:	554e2045 	.word	0x554e2045
   2a508:	5245424d 	.word	0x5245424d
   2a50c:	544f4e20 	.word	0x544f4e20
   2a510:	45525020 	.word	0x45525020
   2a514:	544e4553 	.word	0x544e4553
   2a518:	00000000 	.word	0x00000000
   2a51c:	464f4d41 	.word	0x464f4d41
   2a520:	00000046 	.word	0x00000046
   2a524:	45544c41 	.word	0x45544c41
   2a528:	54414e52 	.word	0x54414e52
   2a52c:	4f4d2045 	.word	0x4f4d2045
   2a530:	454c4942 	.word	0x454c4942
   2a534:	4d554e20 	.word	0x4d554e20
   2a538:	20524542 	.word	0x20524542
   2a53c:	0046464f 	.word	0x0046464f
   2a540:	464f434e 	.word	0x464f434e
   2a544:	00000046 	.word	0x00000046
   2a548:	43204f4e 	.word	0x43204f4e
   2a54c:	204c4c41 	.word	0x204c4c41
   2a550:	54544553 	.word	0x54544553
   2a554:	20474e49 	.word	0x20474e49
   2a558:	0046464f 	.word	0x0046464f
   2a55c:	54544547 	.word	0x54544547
   2a560:	00454d49 	.word	0x00454d49
   2a564:	454d4954 	.word	0x454d4954
   2a568:	25203a20 	.word	0x25203a20
   2a56c:	75253a75 	.word	0x75253a75
   2a570:	00000000 	.word	0x00000000
   2a574:	54544553 	.word	0x54544553
   2a578:	00454d49 	.word	0x00454d49
   2a57c:	4954434e 	.word	0x4954434e
   2a580:	0000454d 	.word	0x0000454d
   2a584:	0000002d 	.word	0x0000002d
   2a588:	0000003a 	.word	0x0000003a
   2a58c:	43204f4e 	.word	0x43204f4e
   2a590:	204c4c41 	.word	0x204c4c41
   2a594:	494d4954 	.word	0x494d4954
   2a598:	2053474e 	.word	0x2053474e
   2a59c:	00544553 	.word	0x00544553
   2a5a0:	47415453 	.word	0x47415453
   2a5a4:	00000045 	.word	0x00000045
   2a5a8:	4c4c4143 	.word	0x4c4c4143
   2a5ac:	41545320 	.word	0x41545320
   2a5b0:	53204547 	.word	0x53204547
   2a5b4:	54205445 	.word	0x54205445
   2a5b8:	203a204f 	.word	0x203a204f
   2a5bc:	00006425 	.word	0x00006425
   2a5c0:	52415453 	.word	0x52415453
   2a5c4:	454d4954 	.word	0x454d4954
   2a5c8:	00000000 	.word	0x00000000
   2a5cc:	41545320 	.word	0x41545320
   2a5d0:	4d495452 	.word	0x4d495452
   2a5d4:	45532045 	.word	0x45532045
   2a5d8:	4f542054 	.word	0x4f542054
   2a5dc:	25203a20 	.word	0x25203a20
   2a5e0:	00000064 	.word	0x00000064
   2a5e4:	4f545541 	.word	0x4f545541
   2a5e8:	454d4954 	.word	0x454d4954
   2a5ec:	00000000 	.word	0x00000000
   2a5f0:	54554120 	.word	0x54554120
   2a5f4:	4d49544f 	.word	0x4d49544f
   2a5f8:	45532045 	.word	0x45532045
   2a5fc:	4f542054 	.word	0x4f542054
   2a600:	25203a20 	.word	0x25203a20
   2a604:	00000064 	.word	0x00000064
   2a608:	004c4142 	.word	0x004c4142
   2a60c:	002b504d 	.word	0x002b504d
   2a610:	4f4e2050 	.word	0x4f4e2050
   2a614:	44444120 	.word	0x44444120
   2a618:	00444544 	.word	0x00444544
   2a61c:	002b534d 	.word	0x002b534d
   2a620:	4f4e2053 	.word	0x4f4e2053
   2a624:	44444120 	.word	0x44444120
   2a628:	00444544 	.word	0x00444544
   2a62c:	00002b4d 	.word	0x00002b4d
   2a630:	49424f4d 	.word	0x49424f4d
   2a634:	4e20454c 	.word	0x4e20454c
   2a638:	00003a4f 	.word	0x00003a4f
   2a63c:	0000000a 	.word	0x0000000a
   2a640:	45444441 	.word	0x45444441
   2a644:	55532044 	.word	0x55532044
   2a648:	53454343 	.word	0x53454343
   2a64c:	4c554653 	.word	0x4c554653
   2a650:	0000594c 	.word	0x0000594c
   2a654:	00002d4d 	.word	0x00002d4d
   2a658:	4f4d4552 	.word	0x4f4d4552
   2a65c:	20444556 	.word	0x20444556
   2a660:	43435553 	.word	0x43435553
   2a664:	46535345 	.word	0x46535345
   2a668:	594c4c55 	.word	0x594c4c55
   2a66c:	00000000 	.word	0x00000000
   2a670:	002b4d41 	.word	0x002b4d41
   2a674:	45544c41 	.word	0x45544c41
   2a678:	54414e52 	.word	0x54414e52
   2a67c:	4f4d2045 	.word	0x4f4d2045
   2a680:	454c4942 	.word	0x454c4942
   2a684:	204f4e20 	.word	0x204f4e20
   2a688:	20444441 	.word	0x20444441
   2a68c:	43435553 	.word	0x43435553
   2a690:	00535345 	.word	0x00535345
   2a694:	002b4d4d 	.word	0x002b4d4d
   2a698:	204d324d 	.word	0x204d324d
   2a69c:	202e4f4e 	.word	0x202e4f4e
   2a6a0:	45444441 	.word	0x45444441
   2a6a4:	00000044 	.word	0x00000044
   2a6a8:	002b524d 	.word	0x002b524d
   2a6ac:	204d324d 	.word	0x204d324d
   2a6b0:	4f4d4552 	.word	0x4f4d4552
   2a6b4:	4e204554 	.word	0x4e204554
   2a6b8:	41202e4f 	.word	0x41202e4f
   2a6bc:	44454444 	.word	0x44454444
   2a6c0:	00000000 	.word	0x00000000
   2a6c4:	4f525245 	.word	0x4f525245
   2a6c8:	203a2052 	.word	0x203a2052
   2a6cc:	00007325 	.word	0x00007325
   2a6d0:	00004e4f 	.word	0x00004e4f
   2a6d4:	48502032 	.word	0x48502032
   2a6d8:	00455341 	.word	0x00455341
   2a6dc:	00004b4f 	.word	0x00004b4f
   2a6e0:	4f525245 	.word	0x4f525245
   2a6e4:	00000052 	.word	0x00000052
   2a6e8:	203a5952 	.word	0x203a5952
   2a6ec:	59206425 	.word	0x59206425
   2a6f0:	25203a42 	.word	0x25203a42
   2a6f4:	52422064 	.word	0x52422064
   2a6f8:	6425203a 	.word	0x6425203a
   2a6fc:	3a43410a 	.word	0x3a43410a
   2a700:	0a732520 	.word	0x0a732520
   2a704:	75716553 	.word	0x75716553
   2a708:	65636e65 	.word	0x65636e65
   2a70c:	7325203a 	.word	0x7325203a
   2a710:	746f4d0a 	.word	0x746f4d0a
   2a714:	203a726f 	.word	0x203a726f
   2a718:	430a7325 	.word	0x430a7325
   2a71c:	65727275 	.word	0x65727275
   2a720:	203a746e 	.word	0x203a746e
   2a724:	0a416425 	.word	0x0a416425
   2a728:	7774654e 	.word	0x7774654e
   2a72c:	3a6b726f 	.word	0x3a6b726f
   2a730:	00642520 	.word	0x00642520
   2a734:	304d4d56 	.word	0x304d4d56
   2a738:	00000031 	.word	0x00000031
   2a73c:	4f544f4d 	.word	0x4f544f4d
   2a740:	00002052 	.word	0x00002052
   2a744:	0046464f 	.word	0x0046464f
   2a748:	20572f46 	.word	0x20572f46
   2a74c:	61647055 	.word	0x61647055
   2a750:	43206574 	.word	0x43206574
   2a754:	6c706d6f 	.word	0x6c706d6f
   2a758:	64657465 	.word	0x64657465
   2a75c:	00000000 	.word	0x00000000
   2a760:	20572f46 	.word	0x20572f46
   2a764:	61647055 	.word	0x61647055
   2a768:	45206574 	.word	0x45206574
   2a76c:	726f7272 	.word	0x726f7272
   2a770:	00000000 	.word	0x00000000
   2a774:	30303030 	.word	0x30303030
   2a778:	30303030 	.word	0x30303030
   2a77c:	00003030 	.word	0x00003030
   2a780:	494d4441 	.word	0x494d4441
   2a784:	0000004e 	.word	0x0000004e
   2a788:	00000023 	.word	0x00000023
   2a78c:	30524d56 	.word	0x30524d56
   2a790:	00000032 	.word	0x00000032
   2a794:	204d324d 	.word	0x204d324d
   2a798:	4e525554 	.word	0x4e525554
   2a79c:	4f204445 	.word	0x4f204445
   2a7a0:	0000004e 	.word	0x0000004e
   2a7a4:	0000203a 	.word	0x0000203a
   2a7a8:	00017290 	.word	0x00017290
   2a7ac:	00017376 	.word	0x00017376
   2a7b0:	00017376 	.word	0x00017376
   2a7b4:	00017290 	.word	0x00017290
   2a7b8:	00017376 	.word	0x00017376
   2a7bc:	00017376 	.word	0x00017376
   2a7c0:	00017376 	.word	0x00017376
   2a7c4:	00017376 	.word	0x00017376
   2a7c8:	00017376 	.word	0x00017376
   2a7cc:	00017376 	.word	0x00017376
   2a7d0:	00017376 	.word	0x00017376
   2a7d4:	00017376 	.word	0x00017376
   2a7d8:	00017290 	.word	0x00017290
   2a7dc:	00017376 	.word	0x00017376
   2a7e0:	00017376 	.word	0x00017376
   2a7e4:	00017376 	.word	0x00017376
   2a7e8:	00017252 	.word	0x00017252
   2a7ec:	00017376 	.word	0x00017376
   2a7f0:	00017290 	.word	0x00017290
   2a7f4:	49524b20 	.word	0x49524b20
   2a7f8:	414e4853 	.word	0x414e4853
   2a7fc:	4d532020 	.word	0x4d532020
   2a800:	20545241 	.word	0x20545241
   2a804:	00000000 	.word	0x00000000
   2a808:	54202020 	.word	0x54202020
   2a80c:	4e484345 	.word	0x4e484345
   2a810:	474f4c4f 	.word	0x474f4c4f
   2a814:	20202059 	.word	0x20202059
   2a818:	00000000 	.word	0x00000000
   2a81c:	4f532020 	.word	0x4f532020
   2a820:	41575446 	.word	0x41575446
   2a824:	56204552 	.word	0x56204552
   2a828:	20205245 	.word	0x20205245
   2a82c:	00000000 	.word	0x00000000
   2a830:	32422020 	.word	0x32422020
   2a834:	33302d34 	.word	0x33302d34
   2a838:	2d39302d 	.word	0x2d39302d
   2a83c:	20203931 	.word	0x20203931
   2a840:	00000000 	.word	0x00000000
   2a844:	00007325 	.word	0x00007325
   2a848:	74696e49 	.word	0x74696e49
   2a84c:	696c6169 	.word	0x696c6169
   2a850:	676e697a 	.word	0x676e697a
   2a854:	202e2e2e 	.word	0x202e2e2e
   2a858:	00000000 	.word	0x00000000
   2a85c:	4d4d4f43 	.word	0x4d4d4f43
   2a860:	45444e41 	.word	0x45444e41
   2a864:	32762052 	.word	0x32762052
   2a868:	20202020 	.word	0x20202020
   2a86c:	00000000 	.word	0x00000000
   2a870:	20595256 	.word	0x20595256
   2a874:	59562020 	.word	0x59562020
   2a878:	20202042 	.word	0x20202042
   2a87c:	20524256 	.word	0x20524256
   2a880:	00000000 	.word	0x00000000
   2a884:	6c333025 	.word	0x6c333025
   2a888:	20202075 	.word	0x20202075
   2a88c:	00000000 	.word	0x00000000
   2a890:	6c333025 	.word	0x6c333025
   2a894:	00002075 	.word	0x00002075
   2a898:	4f544f4d 	.word	0x4f544f4d
   2a89c:	20203a52 	.word	0x20203a52
   2a8a0:	2046464f 	.word	0x2046464f
   2a8a4:	20202020 	.word	0x20202020
   2a8a8:	00000000 	.word	0x00000000
   2a8ac:	20202020 	.word	0x20202020
   2a8b0:	20202020 	.word	0x20202020
   2a8b4:	20202020 	.word	0x20202020
   2a8b8:	20202020 	.word	0x20202020
   2a8bc:	00000000 	.word	0x00000000
   2a8c0:	4f544f4d 	.word	0x4f544f4d
   2a8c4:	55432052 	.word	0x55432052
   2a8c8:	4e455252 	.word	0x4e455252
   2a8cc:	20203a54 	.word	0x20203a54
   2a8d0:	00000000 	.word	0x00000000
   2a8d4:	6c333025 	.word	0x6c333025
   2a8d8:	30252e75 	.word	0x30252e75
   2a8dc:	20756c32 	.word	0x20756c32
   2a8e0:	20202020 	.word	0x20202020
   2a8e4:	20202020 	.word	0x20202020
   2a8e8:	00202020 	.word	0x00202020
   2a8ec:	4f544f4d 	.word	0x4f544f4d
   2a8f0:	41572052 	.word	0x41572052
   2a8f4:	47415454 	.word	0x47415454
   2a8f8:	20203a45 	.word	0x20203a45
   2a8fc:	00000000 	.word	0x00000000
   2a900:	6c333025 	.word	0x6c333025
   2a904:	30252e75 	.word	0x30252e75
   2a908:	20756c32 	.word	0x20756c32
   2a90c:	2020576b 	.word	0x2020576b
   2a910:	20202020 	.word	0x20202020
   2a914:	00202020 	.word	0x00202020
   2a918:	48502033 	.word	0x48502033
   2a91c:	20455341 	.word	0x20455341
   2a920:	3a514553 	.word	0x3a514553
   2a924:	00000000 	.word	0x00000000
   2a928:	204b4f20 	.word	0x204b4f20
   2a92c:	00000000 	.word	0x00000000
   2a930:	52524520 	.word	0x52524520
   2a934:	00000000 	.word	0x00000000
   2a938:	53414850 	.word	0x53414850
   2a93c:	54532045 	.word	0x54532045
   2a940:	3a455441 	.word	0x3a455441
   2a944:	00000000 	.word	0x00000000
   2a948:	48503320 	.word	0x48503320
   2a94c:	00000020 	.word	0x00000020
   2a950:	48503220 	.word	0x48503220
   2a954:	00000020 	.word	0x00000020
   2a958:	46464f20 	.word	0x46464f20
   2a95c:	00000000 	.word	0x00000000
   2a960:	454c2d4f 	.word	0x454c2d4f
   2a964:	204c4556 	.word	0x204c4556
   2a968:	0000203a 	.word	0x0000203a
   2a96c:	48474948 	.word	0x48474948
   2a970:	00002020 	.word	0x00002020
   2a974:	2044494d 	.word	0x2044494d
   2a978:	00002020 	.word	0x00002020
   2a97c:	20574f4c 	.word	0x20574f4c
   2a980:	00002020 	.word	0x00002020
   2a984:	454c2d55 	.word	0x454c2d55
   2a988:	204c4556 	.word	0x204c4556
   2a98c:	0000203a 	.word	0x0000203a
   2a990:	43545243 	.word	0x43545243
   2a994:	0000204c 	.word	0x0000204c
   2a998:	74746142 	.word	0x74746142
   2a99c:	50797265 	.word	0x50797265
   2a9a0:	203a7265 	.word	0x203a7265
   2a9a4:	25257525 	.word	0x25257525
   2a9a8:	00000020 	.word	0x00000020
   2a9ac:	4e474953 	.word	0x4e474953
   2a9b0:	3a204c41 	.word	0x3a204c41
   2a9b4:	00000020 	.word	0x00000020
   2a9b8:	20202020 	.word	0x20202020
   2a9bc:	00202020 	.word	0x00202020
   2a9c0:	4f434e49 	.word	0x4f434e49
   2a9c4:	474e494d 	.word	0x474e494d
   2a9c8:	4c414320 	.word	0x4c414320
   2a9cc:	202e2e4c 	.word	0x202e2e4c
   2a9d0:	00000000 	.word	0x00000000
   2a9d4:	36312d25 	.word	0x36312d25
   2a9d8:	00000073 	.word	0x00000073
   2a9dc:	43204e49 	.word	0x43204e49
   2a9e0:	2e4c4c41 	.word	0x2e4c4c41
   2a9e4:	20202e2e 	.word	0x20202e2e
   2a9e8:	20202020 	.word	0x20202020
   2a9ec:	00000000 	.word	0x00000000
   2a9f0:	4c414944 	.word	0x4c414944
   2a9f4:	2e474e49 	.word	0x2e474e49
   2a9f8:	20202e2e 	.word	0x20202e2e
   2a9fc:	20202020 	.word	0x20202020
   2aa00:	00000000 	.word	0x00000000
   2aa04:	4f434e49 	.word	0x4f434e49
   2aa08:	474e494d 	.word	0x474e494d
   2aa0c:	534d5320 	.word	0x534d5320
   2aa10:	202e2e2e 	.word	0x202e2e2e
   2aa14:	00000000 	.word	0x00000000
   2aa18:	4754554f 	.word	0x4754554f
   2aa1c:	474e494f 	.word	0x474e494f
   2aa20:	534d5320 	.word	0x534d5320
   2aa24:	202e2e2e 	.word	0x202e2e2e
	...
   2aa30:	1f1f0000 	.word	0x1f1f0000
   2aa34:	00000000 	.word	0x00000000
   2aa38:	1f1f1f00 	.word	0x1f1f1f00
   2aa3c:	00000000 	.word	0x00000000
   2aa40:	1f1f1f1f 	.word	0x1f1f1f1f
   2aa44:	1f1f0000 	.word	0x1f1f0000
   2aa48:	1f1f1f1f 	.word	0x1f1f1f1f
   2aa4c:	1f1f1f1f 	.word	0x1f1f1f1f
   2aa50:	1f1f1f1f 	.word	0x1f1f1f1f
   2aa54:	0001884e 	.word	0x0001884e
   2aa58:	0001840a 	.word	0x0001840a
   2aa5c:	0001844e 	.word	0x0001844e
   2aa60:	000184b4 	.word	0x000184b4
   2aa64:	00018516 	.word	0x00018516
   2aa68:	00018584 	.word	0x00018584
   2aa6c:	00018700 	.word	0x00018700
   2aa70:	00018782 	.word	0x00018782
   2aa74:	0001884c 	.word	0x0001884c
   2aa78:	0001879c 	.word	0x0001879c
   2aa7c:	000187ba 	.word	0x000187ba
   2aa80:	000187d8 	.word	0x000187d8
   2aa84:	000187f6 	.word	0x000187f6
   2aa88:	0001881e 	.word	0x0001881e
   2aa8c:	756c255d 	.word	0x756c255d
   2aa90:	756c257b 	.word	0x756c257b
   2aa94:	756c257d 	.word	0x756c257d
   2aa98:	00000000 	.word	0x00000000
   2aa9c:	00000002 	.word	0x00000002
   2aaa0:	00000003 	.word	0x00000003
   2aaa4:	00000028 	.word	0x00000028
   2aaa8:	00000029 	.word	0x00000029
   2aaac:	00000004 	.word	0x00000004
   2aab0:	00000005 	.word	0x00000005
   2aab4:	00000006 	.word	0x00000006
   2aab8:	00000007 	.word	0x00000007
   2aabc:	00000020 	.word	0x00000020
   2aac0:	00000021 	.word	0x00000021
   2aac4:	00000022 	.word	0x00000022
   2aac8:	00000023 	.word	0x00000023
   2aacc:	00000024 	.word	0x00000024
   2aad0:	00000025 	.word	0x00000025
   2aad4:	00000026 	.word	0x00000026
   2aad8:	00000027 	.word	0x00000027
   2aadc:	00000008 	.word	0x00000008
   2aae0:	00000009 	.word	0x00000009
   2aae4:	0000000a 	.word	0x0000000a
   2aae8:	0000000b 	.word	0x0000000b
   2aaec:	0001d386 	.word	0x0001d386
   2aaf0:	0001d38c 	.word	0x0001d38c
   2aaf4:	0001d38c 	.word	0x0001d38c
   2aaf8:	0001d38c 	.word	0x0001d38c
   2aafc:	0001d38c 	.word	0x0001d38c
   2ab00:	0001d38c 	.word	0x0001d38c
   2ab04:	0001d38c 	.word	0x0001d38c
   2ab08:	0001d38c 	.word	0x0001d38c
   2ab0c:	0001d38c 	.word	0x0001d38c
   2ab10:	0001d38c 	.word	0x0001d38c
   2ab14:	0001d38c 	.word	0x0001d38c
   2ab18:	0001d38c 	.word	0x0001d38c
   2ab1c:	0001d38c 	.word	0x0001d38c
   2ab20:	0001d38c 	.word	0x0001d38c
   2ab24:	0001d38c 	.word	0x0001d38c
   2ab28:	0001d38c 	.word	0x0001d38c
   2ab2c:	0001d364 	.word	0x0001d364
   2ab30:	0001d38c 	.word	0x0001d38c
   2ab34:	0001d38c 	.word	0x0001d38c
   2ab38:	0001d38c 	.word	0x0001d38c
   2ab3c:	0001d38c 	.word	0x0001d38c
   2ab40:	0001d38c 	.word	0x0001d38c
   2ab44:	0001d38c 	.word	0x0001d38c
   2ab48:	0001d38c 	.word	0x0001d38c
   2ab4c:	0001d38c 	.word	0x0001d38c
   2ab50:	0001d38c 	.word	0x0001d38c
   2ab54:	0001d38c 	.word	0x0001d38c
   2ab58:	0001d38c 	.word	0x0001d38c
   2ab5c:	0001d38c 	.word	0x0001d38c
   2ab60:	0001d38c 	.word	0x0001d38c
   2ab64:	0001d38c 	.word	0x0001d38c
   2ab68:	0001d38c 	.word	0x0001d38c
   2ab6c:	0001d380 	.word	0x0001d380
   2ab70:	0001d38c 	.word	0x0001d38c
   2ab74:	0001d38c 	.word	0x0001d38c
   2ab78:	0001d38c 	.word	0x0001d38c
   2ab7c:	0001d38c 	.word	0x0001d38c
   2ab80:	0001d38c 	.word	0x0001d38c
   2ab84:	0001d38c 	.word	0x0001d38c
   2ab88:	0001d38c 	.word	0x0001d38c
   2ab8c:	0001d38c 	.word	0x0001d38c
   2ab90:	0001d38c 	.word	0x0001d38c
   2ab94:	0001d38c 	.word	0x0001d38c
   2ab98:	0001d38c 	.word	0x0001d38c
   2ab9c:	0001d38c 	.word	0x0001d38c
   2aba0:	0001d38c 	.word	0x0001d38c
   2aba4:	0001d38c 	.word	0x0001d38c
   2aba8:	0001d38c 	.word	0x0001d38c
   2abac:	0001d37a 	.word	0x0001d37a
   2abb0:	0001d322 	.word	0x0001d322
   2abb4:	0001d338 	.word	0x0001d338
   2abb8:	0001d34e 	.word	0x0001d34e
   2abbc:	0001d308 	.word	0x0001d308
   2abc0:	42000800 	.word	0x42000800
   2abc4:	42000c00 	.word	0x42000c00
   2abc8:	42001000 	.word	0x42001000
   2abcc:	42001400 	.word	0x42001400
   2abd0:	42001800 	.word	0x42001800
   2abd4:	42001c00 	.word	0x42001c00
   2abd8:	454c4449 	.word	0x454c4449
   2abdc:	00000000 	.word	0x00000000
   2abe0:	20726d54 	.word	0x20726d54
   2abe4:	00637653 	.word	0x00637653
   2abe8:	00021330 	.word	0x00021330
   2abec:	00021330 	.word	0x00021330
   2abf0:	00021330 	.word	0x00021330
   2abf4:	000213be 	.word	0x000213be
   2abf8:	00021388 	.word	0x00021388
   2abfc:	000213b2 	.word	0x000213b2
   2ac00:	00021330 	.word	0x00021330
   2ac04:	00021330 	.word	0x00021330
   2ac08:	000213be 	.word	0x000213be
   2ac0c:	00021388 	.word	0x00021388

0002ac10 <_tcc_intflag>:
   2ac10:	00000001 00000002 00000004 00000008     ................
   2ac20:	00001000 00002000 00004000 00008000     ..... ...@......
   2ac30:	00010000 00020000 00040000 00080000     ................
   2ac40:	0c0b0a09 00000e0d 00022c3c 00022c3c     ........<,..<,..
   2ac50:	00022c30 00022c3c 00022c30 00022c0a     0,..<,..0,...,..
   2ac60:	00022c0a 00022c3c 00022c3c 00022c3c     .,..<,..<,..<,..
   2ac70:	00022c3c 00022c3c 00022c3c 00022c3c     <,..<,..<,..<,..
   2ac80:	00022c3c 00022c3c 00022c3c 00022c3c     <,..<,..<,..<,..
   2ac90:	00022c3c 00022c3c 00022c3c 00022c3c     <,..<,..<,..<,..
   2aca0:	00022c3c 00022c3c 00022c3c 00022c3c     <,..<,..<,..<,..
   2acb0:	00022c3c 00022c3c 00022c3c 00022c3c     <,..<,..<,..<,..
   2acc0:	00022c3c 00022c3c 00022c3c 00022c3c     <,..<,..<,..<,..
   2acd0:	00022c3c 00022c3c 00022c3c 00022c3c     <,..<,..<,..<,..
   2ace0:	00022c3c 00022c3c 00022c3c 00022c3c     <,..<,..<,..<,..
   2acf0:	00022c3c 00022c3c 00022c3c 00022c3c     <,..<,..<,..<,..
   2ad00:	00022c3c 00022c3c 00022c3c 00022c3c     <,..<,..<,..<,..
   2ad10:	00022c3c 00022c3c 00022c3c 00022c3c     <,..<,..<,..<,..
   2ad20:	00022c3c 00022c3c 00022c3c 00022c3c     <,..<,..<,..<,..
   2ad30:	00022c3c 00022c3c 00022c3c 00022c3c     <,..<,..<,..<,..
   2ad40:	00022c3c 00022c3c 00022c30 00022c30     <,..<,..0,..0,..
   2ad50:	00022c46 00022c46 00022c46 00022c46     F,..F,..F,..F,..
   2ad60:	41744545 50524f4d 456d752e 00023fb6     EEtAMORP.umE.?..
   2ad70:	00024030 00024030 00023fd4 00023fce     0@..0@...?...?..
   2ad80:	00023fda 00023fbc 00023fe0 00024016     .?...?...?...@..
   2ad90:	000242fc 0002434c 0002434c 00024348     .B..LC..LC..HC..
   2ada0:	000242ee 0002430e 000242de 00024320     .B...C...B.. C..
   2adb0:	00024332 0002439a 000243c8 000243c8     2C...C...C...C..
   2adc0:	000243c4 00024394 000243a0 0002438e     .C...C...C...C..
   2add0:	000243a6 000243ac 00776f70 74727173     .C...C..pow.sqrt
	...

0002ade8 <TWO52>:
   2ade8:	00000000 43300000 00000000 c3300000     ......0C......0.
   2adf8:	00026d40 00026d10 00026d22 00026c64     @m...m.."m..dl..
   2ae08:	00026d22 00026d06 00026d22 00026c64     "m...m.."m..dl..
   2ae18:	00026d10 00026d10 00026d06 00026c64     .m...m...m..dl..
   2ae28:	00026c6c 00026c6c 00026c6c 00026d28     ll..ll..ll..(m..
   2ae38:	00026d10 00026d10 00026ce4 00026dc8     .m...m...l...m..
   2ae48:	00026ce4 00026d06 00026ce4 00026dc8     .l...m...l...m..
   2ae58:	00026d10 00026d10 00026d06 00026dc8     .m...m...m...m..
   2ae68:	00026c6c 00026c6c 00026c6c 00026dd2     ll..ll..ll...m..
   2ae78:	00026f70 00026ec0 00026ec0 00026ebe     po...n...n...n..
   2ae88:	00026f62 00026f62 00026f58 00026ebe     bo..bo..Xo...n..
   2ae98:	00026f62 00026f58 00026f62 00026ebe     bo..Xo..bo...n..
   2aea8:	00026f68 00026f68 00026f68 00026ff8     ho..ho..ho...o..
   2aeb8:	000279c8 000279aa 00027964 00027882     .y...y..dy...x..
   2aec8:	00027964 0002799c 00027964 00027882     dy...y..dy...x..
   2aed8:	000279aa 000279aa 0002799c 00027882     .y...y...y...x..
   2aee8:	0002787a 0002787a 0002787a 00027be0     zx..zx..zx...{..
   2aef8:	00028228 000280e8 000280e8 000280e4     (...............
   2af08:	00028200 00028200 000281f2 000280e4     ................
   2af18:	00028200 000281f2 00028200 000280e4     ................
   2af28:	00028208 00028208 00028208 0002840c     ................
   2af38:	4f500043 00584953 3130002e 35343332     C.POSIX...012345
   2af48:	39383736 64636261 68676665 6c6b6a69     6789abcdefghijkl
   2af58:	706f6e6d 74737271 78777675 00007a79              mnopqrstuvwxyz.

0002af67 <_ctype_>:
   2af67:	20202000 20202020 28282020 20282828     .         ((((( 
   2af77:	20202020 20202020 20202020 20202020                     
   2af87:	10108820 10101010 10101010 10101010      ...............
   2af97:	04040410 04040404 10040404 10101010     ................
   2afa7:	41411010 41414141 01010101 01010101     ..AAAAAA........
   2afb7:	01010101 01010101 01010101 10101010     ................
   2afc7:	42421010 42424242 02020202 02020202     ..BBBBBB........
   2afd7:	02020202 02020202 02020202 10101010     ................
   2afe7:	00000020 00000000 00000000 00000000      ...............
	...
   2b067:	302d2300 6800202b 65004c6c 46456766     .#-0+ .hlL.efgEF
   2b077:	31300047 35343332 39383736 44434241     G.0123456789ABCD
   2b087:	30004645 34333231 38373635 63626139     EF.0123456789abc
   2b097:	00666564 c0b5f800                                def..

0002b09c <_init>:
   2b09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b09e:	46c0      	nop			; (mov r8, r8)
   2b0a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2b0a2:	bc08      	pop	{r3}
   2b0a4:	469e      	mov	lr, r3
   2b0a6:	4770      	bx	lr

0002b0a8 <__init_array_start>:
   2b0a8:	000100dd 	.word	0x000100dd

0002b0ac <_fini>:
   2b0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b0ae:	46c0      	nop			; (mov r8, r8)
   2b0b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2b0b2:	bc08      	pop	{r3}
   2b0b4:	469e      	mov	lr, r3
   2b0b6:	4770      	bx	lr

0002b0b8 <__fini_array_start>:
   2b0b8:	000100b5 	.word	0x000100b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <ucharPhase_Seq_Check_Flag>:
2000000c:	0101                                             .

2000000d <ucharVoltage_Detect_Timer_Counter>:
2000000d:	0001 aa00                                        ...

20000010 <uxCriticalNesting>:
20000010:	aaaa aaaa                                   ....

20000014 <_events_inst>:
20000014:	0000 0000 000c 0000 0000 0000 0000 0000     ................
20000024:	0000 0000                                   ....

20000028 <g_interrupt_enabled>:
20000028:	0101                                             .

20000029 <__fdlib_version>:
20000029:	0001 3000                                        ...

2000002c <_impure_ptr>:
2000002c:	0030 2000                                   0.. 

20000030 <impure_data>:
	...

20000090 <__global_locale>:
20000090:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000b0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000d0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000f0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000110:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000130:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000150:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000170:	94a9 0002 8eb9 0002 0000 0000 af67 0002     ............g...
20000180:	af40 0002 b06d 0002 b06d 0002 b06d 0002     @...m...m...m...
20000190:	b06d 0002 b06d 0002 b06d 0002 b06d 0002     m...m...m...m...
200001a0:	b06d 0002 b06d 0002 ffff ffff ffff ffff     m...m...........
200001b0:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
200001d8:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
