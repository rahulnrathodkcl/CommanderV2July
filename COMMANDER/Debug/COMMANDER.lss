
COMMANDER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00019bc4  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00019bc4  00019bc4  00029bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000001fc  20000000  00019bcc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000072c  20000200  00019dd0  00030200  2**4
                  ALLOC
  4 .stack        00002004  2000092c  0001a4fc  00030200  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY
  7 .debug_info   0007e89f  00000000  00000000  0003027d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00008aa8  00000000  00000000  000aeb1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000a731  00000000  00000000  000b75c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001d08  00000000  00000000  000c1cf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001b10  00000000  00000000  000c39fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00028764  00000000  00000000  000c550d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000277dd  00000000  00000000  000edc71  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a2289  00000000  00000000  0011544e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000071ec  00000000  00000000  001b76d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	30 29 00 20 21 3b 01 00 19 3c 01 00 19 3c 01 00     0). !;...<...<..
	...
      2c:	bd db 00 00 00 00 00 00 00 00 00 00 f1 dc 00 00     ................
      3c:	39 dd 00 00 19 3c 01 00 19 3c 01 00 79 02 01 00     9....<...<..y...
      4c:	39 d5 00 00 a1 12 01 00 19 3c 01 00 d1 ca 00 00     9........<......
      5c:	19 3c 01 00 0d 13 01 00 99 10 01 00 b1 10 01 00     .<..............
      6c:	c9 10 01 00 e1 10 01 00 f9 10 01 00 11 11 01 00     ................
      7c:	9d 02 01 00 b1 02 01 00 c5 02 01 00 55 03 01 00     ............U...
      8c:	69 03 01 00 7d 03 01 00 91 03 01 00 a5 03 01 00     i...}...........
      9c:	59 c9 00 00 65 16 01 00 95 ca 00 00 19 3c 01 00     Y...e........<..
      ac:	19 3c 01 00 00 00 00 00                             .<......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000200 	.word	0x20000200
      d4:	00000000 	.word	0x00000000
      d8:	00019bcc 	.word	0x00019bcc

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000204 	.word	0x20000204
     108:	00019bcc 	.word	0x00019bcc
     10c:	00019bcc 	.word	0x00019bcc
     110:	00000000 	.word	0x00000000

00000114 <configure_eeprom>:
#include "eeprom_driver.h"

void configure_eeprom(void)
{
     114:	b590      	push	{r4, r7, lr}
     116:	b083      	sub	sp, #12
     118:	af00      	add	r7, sp, #0
	enum status_code error_code = eeprom_emulator_init();
     11a:	1dfc      	adds	r4, r7, #7
     11c:	4b0a      	ldr	r3, [pc, #40]	; (148 <configure_eeprom+0x34>)
     11e:	4798      	blx	r3
     120:	0003      	movs	r3, r0
     122:	7023      	strb	r3, [r4, #0]
	if (error_code == STATUS_ERR_NO_MEMORY)
     124:	1dfb      	adds	r3, r7, #7
     126:	781b      	ldrb	r3, [r3, #0]
     128:	2b16      	cmp	r3, #22
     12a:	d100      	bne.n	12e <configure_eeprom+0x1a>
	{
		while (true);
     12c:	e7fe      	b.n	12c <configure_eeprom+0x18>
	}
	else if (error_code != STATUS_OK)
     12e:	1dfb      	adds	r3, r7, #7
     130:	781b      	ldrb	r3, [r3, #0]
     132:	2b00      	cmp	r3, #0
     134:	d003      	beq.n	13e <configure_eeprom+0x2a>
	{
		eeprom_emulator_erase_memory();
     136:	4b05      	ldr	r3, [pc, #20]	; (14c <configure_eeprom+0x38>)
     138:	4798      	blx	r3
		eeprom_emulator_init();
     13a:	4b03      	ldr	r3, [pc, #12]	; (148 <configure_eeprom+0x34>)
     13c:	4798      	blx	r3
	}
}
     13e:	46c0      	nop			; (mov r8, r8)
     140:	46bd      	mov	sp, r7
     142:	b003      	add	sp, #12
     144:	bd90      	pop	{r4, r7, pc}
     146:	46c0      	nop			; (mov r8, r8)
     148:	000126dd 	.word	0x000126dd
     14c:	000127c5 	.word	0x000127c5

00000150 <init_eeprom>:

void init_eeprom(void)
{
     150:	b580      	push	{r7, lr}
     152:	af00      	add	r7, sp, #0
	configure_eeprom();
     154:	4bf6      	ldr	r3, [pc, #984]	; (530 <init_eeprom+0x3e0>)
     156:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(BOOTLOADER_PARAMETER_PAGE, page_data);
     158:	4bf6      	ldr	r3, [pc, #984]	; (534 <init_eeprom+0x3e4>)
     15a:	0019      	movs	r1, r3
     15c:	2000      	movs	r0, #0
     15e:	4bf6      	ldr	r3, [pc, #984]	; (538 <init_eeprom+0x3e8>)
     160:	4798      	blx	r3
	memcpy(&bootloader_parameter,page_data,sizeof(bootloader_parameter));
     162:	49f4      	ldr	r1, [pc, #976]	; (534 <init_eeprom+0x3e4>)
     164:	4bf5      	ldr	r3, [pc, #980]	; (53c <init_eeprom+0x3ec>)
     166:	2218      	movs	r2, #24
     168:	0018      	movs	r0, r3
     16a:	4bf5      	ldr	r3, [pc, #980]	; (540 <init_eeprom+0x3f0>)
     16c:	4798      	blx	r3
	if (bootloader_parameter.ucharFirst_Time_Write != 85)
     16e:	4bf3      	ldr	r3, [pc, #972]	; (53c <init_eeprom+0x3ec>)
     170:	791b      	ldrb	r3, [r3, #4]
     172:	2b55      	cmp	r3, #85	; 0x55
     174:	d029      	beq.n	1ca <init_eeprom+0x7a>
	{
		bootloader_parameter.ulongintDiscard		   = 0;
     176:	4bf1      	ldr	r3, [pc, #964]	; (53c <init_eeprom+0x3ec>)
     178:	2200      	movs	r2, #0
     17a:	601a      	str	r2, [r3, #0]
		bootloader_parameter.ucharFirst_Time_Write	   = 85;
     17c:	4bef      	ldr	r3, [pc, #956]	; (53c <init_eeprom+0x3ec>)
     17e:	2255      	movs	r2, #85	; 0x55
     180:	711a      	strb	r2, [r3, #4]
		bootloader_parameter.firmware_download_pending = false;
     182:	4bee      	ldr	r3, [pc, #952]	; (53c <init_eeprom+0x3ec>)
     184:	2200      	movs	r2, #0
     186:	715a      	strb	r2, [r3, #5]
		bootloader_parameter.firmware_update_process_completed = false;
     188:	4bec      	ldr	r3, [pc, #944]	; (53c <init_eeprom+0x3ec>)
     18a:	2200      	movs	r2, #0
     18c:	719a      	strb	r2, [r3, #6]
		bootloader_parameter.firmware_update_error_code = 0;
     18e:	4beb      	ldr	r3, [pc, #940]	; (53c <init_eeprom+0x3ec>)
     190:	2200      	movs	r2, #0
     192:	71da      	strb	r2, [r3, #7]
		
		memset(bootloader_parameter.firmware_updater_mobile_no, '\0', sizeof(bootloader_parameter.firmware_updater_mobile_no));
     194:	4beb      	ldr	r3, [pc, #940]	; (544 <init_eeprom+0x3f4>)
     196:	2210      	movs	r2, #16
     198:	2100      	movs	r1, #0
     19a:	0018      	movs	r0, r3
     19c:	4bea      	ldr	r3, [pc, #936]	; (548 <init_eeprom+0x3f8>)
     19e:	4798      	blx	r3
		strcpy(bootloader_parameter.firmware_updater_mobile_no,"0000000000");
     1a0:	4be8      	ldr	r3, [pc, #928]	; (544 <init_eeprom+0x3f4>)
     1a2:	4aea      	ldr	r2, [pc, #936]	; (54c <init_eeprom+0x3fc>)
     1a4:	ca03      	ldmia	r2!, {r0, r1}
     1a6:	c303      	stmia	r3!, {r0, r1}
     1a8:	8811      	ldrh	r1, [r2, #0]
     1aa:	8019      	strh	r1, [r3, #0]
     1ac:	7892      	ldrb	r2, [r2, #2]
     1ae:	709a      	strb	r2, [r3, #2]
		
		memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
     1b0:	49e2      	ldr	r1, [pc, #904]	; (53c <init_eeprom+0x3ec>)
     1b2:	4be0      	ldr	r3, [pc, #896]	; (534 <init_eeprom+0x3e4>)
     1b4:	2218      	movs	r2, #24
     1b6:	0018      	movs	r0, r3
     1b8:	4be1      	ldr	r3, [pc, #900]	; (540 <init_eeprom+0x3f0>)
     1ba:	4798      	blx	r3
		eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
     1bc:	4bdd      	ldr	r3, [pc, #884]	; (534 <init_eeprom+0x3e4>)
     1be:	0019      	movs	r1, r3
     1c0:	2000      	movs	r0, #0
     1c2:	4be3      	ldr	r3, [pc, #908]	; (550 <init_eeprom+0x400>)
     1c4:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     1c6:	4be3      	ldr	r3, [pc, #908]	; (554 <init_eeprom+0x404>)
     1c8:	4798      	blx	r3
	}
	
	eeprom_emulator_read_page(FTP_PATH_PARAMETER_PAGE, page_data);
     1ca:	4bda      	ldr	r3, [pc, #872]	; (534 <init_eeprom+0x3e4>)
     1cc:	0019      	movs	r1, r3
     1ce:	2001      	movs	r0, #1
     1d0:	4bd9      	ldr	r3, [pc, #868]	; (538 <init_eeprom+0x3e8>)
     1d2:	4798      	blx	r3
	memcpy(&ftp_path_parameter,page_data,sizeof(ftp_path_parameter));
     1d4:	49d7      	ldr	r1, [pc, #860]	; (534 <init_eeprom+0x3e4>)
     1d6:	4be0      	ldr	r3, [pc, #896]	; (558 <init_eeprom+0x408>)
     1d8:	2238      	movs	r2, #56	; 0x38
     1da:	0018      	movs	r0, r3
     1dc:	4bd8      	ldr	r3, [pc, #864]	; (540 <init_eeprom+0x3f0>)
     1de:	4798      	blx	r3
	if (ftp_path_parameter.ucharFirst_Time_Write !=85)
     1e0:	4bdd      	ldr	r3, [pc, #884]	; (558 <init_eeprom+0x408>)
     1e2:	791b      	ldrb	r3, [r3, #4]
     1e4:	2b55      	cmp	r3, #85	; 0x55
     1e6:	d02e      	beq.n	246 <init_eeprom+0xf6>
	{
		ftp_path_parameter.ulongintDiscard			   = 0;
     1e8:	4bdb      	ldr	r3, [pc, #876]	; (558 <init_eeprom+0x408>)
     1ea:	2200      	movs	r2, #0
     1ec:	601a      	str	r2, [r3, #0]
		ftp_path_parameter.ucharFirst_Time_Write	   = 85;
     1ee:	4bda      	ldr	r3, [pc, #872]	; (558 <init_eeprom+0x408>)
     1f0:	2255      	movs	r2, #85	; 0x55
     1f2:	711a      	strb	r2, [r3, #4]
		
		memset(ftp_path_parameter.ftp_address, '\0', sizeof(ftp_path_parameter.ftp_address));
     1f4:	4bd9      	ldr	r3, [pc, #868]	; (55c <init_eeprom+0x40c>)
     1f6:	221e      	movs	r2, #30
     1f8:	2100      	movs	r1, #0
     1fa:	0018      	movs	r0, r3
     1fc:	4bd2      	ldr	r3, [pc, #840]	; (548 <init_eeprom+0x3f8>)
     1fe:	4798      	blx	r3
		strcpy(ftp_path_parameter.ftp_address,"ftp.drivehq.com");
     200:	4ad6      	ldr	r2, [pc, #856]	; (55c <init_eeprom+0x40c>)
     202:	4bd7      	ldr	r3, [pc, #860]	; (560 <init_eeprom+0x410>)
     204:	0010      	movs	r0, r2
     206:	0019      	movs	r1, r3
     208:	2310      	movs	r3, #16
     20a:	001a      	movs	r2, r3
     20c:	4bcc      	ldr	r3, [pc, #816]	; (540 <init_eeprom+0x3f0>)
     20e:	4798      	blx	r3
		
		memset(ftp_path_parameter.ftp_path, '\0', sizeof(ftp_path_parameter.ftp_path));
     210:	4bd4      	ldr	r3, [pc, #848]	; (564 <init_eeprom+0x414>)
     212:	2214      	movs	r2, #20
     214:	2100      	movs	r1, #0
     216:	0018      	movs	r0, r3
     218:	4bcb      	ldr	r3, [pc, #812]	; (548 <init_eeprom+0x3f8>)
     21a:	4798      	blx	r3
		strcpy(ftp_path_parameter.ftp_path,"/firmware/");
     21c:	4ad1      	ldr	r2, [pc, #836]	; (564 <init_eeprom+0x414>)
     21e:	4bd2      	ldr	r3, [pc, #840]	; (568 <init_eeprom+0x418>)
     220:	0010      	movs	r0, r2
     222:	0019      	movs	r1, r3
     224:	230b      	movs	r3, #11
     226:	001a      	movs	r2, r3
     228:	4bc5      	ldr	r3, [pc, #788]	; (540 <init_eeprom+0x3f0>)
     22a:	4798      	blx	r3
		
		memcpy(page_data,&ftp_path_parameter,sizeof(ftp_path_parameter));
     22c:	49ca      	ldr	r1, [pc, #808]	; (558 <init_eeprom+0x408>)
     22e:	4bc1      	ldr	r3, [pc, #772]	; (534 <init_eeprom+0x3e4>)
     230:	2238      	movs	r2, #56	; 0x38
     232:	0018      	movs	r0, r3
     234:	4bc2      	ldr	r3, [pc, #776]	; (540 <init_eeprom+0x3f0>)
     236:	4798      	blx	r3
		eeprom_emulator_write_page(FTP_PATH_PARAMETER_PAGE, page_data);
     238:	4bbe      	ldr	r3, [pc, #760]	; (534 <init_eeprom+0x3e4>)
     23a:	0019      	movs	r1, r3
     23c:	2001      	movs	r0, #1
     23e:	4bc4      	ldr	r3, [pc, #784]	; (550 <init_eeprom+0x400>)
     240:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     242:	4bc4      	ldr	r3, [pc, #784]	; (554 <init_eeprom+0x404>)
     244:	4798      	blx	r3
	}
	
	eeprom_emulator_read_page(FTP_USER_PARAMETER_PAGE, page_data);
     246:	4bbb      	ldr	r3, [pc, #748]	; (534 <init_eeprom+0x3e4>)
     248:	0019      	movs	r1, r3
     24a:	2002      	movs	r0, #2
     24c:	4bba      	ldr	r3, [pc, #744]	; (538 <init_eeprom+0x3e8>)
     24e:	4798      	blx	r3
	memcpy(&ftp_user_parameter,page_data,sizeof(ftp_user_parameter));
     250:	49b8      	ldr	r1, [pc, #736]	; (534 <init_eeprom+0x3e4>)
     252:	4bc6      	ldr	r3, [pc, #792]	; (56c <init_eeprom+0x41c>)
     254:	2238      	movs	r2, #56	; 0x38
     256:	0018      	movs	r0, r3
     258:	4bb9      	ldr	r3, [pc, #740]	; (540 <init_eeprom+0x3f0>)
     25a:	4798      	blx	r3
	if (ftp_user_parameter.ucharFirst_Time_Write !=85)
     25c:	4bc3      	ldr	r3, [pc, #780]	; (56c <init_eeprom+0x41c>)
     25e:	791b      	ldrb	r3, [r3, #4]
     260:	2b55      	cmp	r3, #85	; 0x55
     262:	d03c      	beq.n	2de <init_eeprom+0x18e>
	{
		ftp_user_parameter.ulongintDiscard			   = 0;
     264:	4bc1      	ldr	r3, [pc, #772]	; (56c <init_eeprom+0x41c>)
     266:	2200      	movs	r2, #0
     268:	601a      	str	r2, [r3, #0]
		ftp_user_parameter.ucharFirst_Time_Write	   = 85;
     26a:	4bc0      	ldr	r3, [pc, #768]	; (56c <init_eeprom+0x41c>)
     26c:	2255      	movs	r2, #85	; 0x55
     26e:	711a      	strb	r2, [r3, #4]
		
		memset(ftp_user_parameter.ftp_username, '\0', sizeof(ftp_user_parameter.ftp_username));
     270:	4bbf      	ldr	r3, [pc, #764]	; (570 <init_eeprom+0x420>)
     272:	2210      	movs	r2, #16
     274:	2100      	movs	r1, #0
     276:	0018      	movs	r0, r3
     278:	4bb3      	ldr	r3, [pc, #716]	; (548 <init_eeprom+0x3f8>)
     27a:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_username,"rahulnrathodkcl");
     27c:	4bbb      	ldr	r3, [pc, #748]	; (56c <init_eeprom+0x41c>)
     27e:	2205      	movs	r2, #5
     280:	49bc      	ldr	r1, [pc, #752]	; (574 <init_eeprom+0x424>)
     282:	189b      	adds	r3, r3, r2
     284:	2210      	movs	r2, #16
     286:	0018      	movs	r0, r3
     288:	4bad      	ldr	r3, [pc, #692]	; (540 <init_eeprom+0x3f0>)
     28a:	4798      	blx	r3
		
		memset(ftp_user_parameter.ftp_filename, '\0', sizeof(ftp_user_parameter.ftp_password));
     28c:	4bba      	ldr	r3, [pc, #744]	; (578 <init_eeprom+0x428>)
     28e:	2210      	movs	r2, #16
     290:	2100      	movs	r1, #0
     292:	0018      	movs	r0, r3
     294:	4bac      	ldr	r3, [pc, #688]	; (548 <init_eeprom+0x3f8>)
     296:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_password,"123456789");
     298:	4ab8      	ldr	r2, [pc, #736]	; (57c <init_eeprom+0x42c>)
     29a:	4bb9      	ldr	r3, [pc, #740]	; (580 <init_eeprom+0x430>)
     29c:	0010      	movs	r0, r2
     29e:	0019      	movs	r1, r3
     2a0:	230a      	movs	r3, #10
     2a2:	001a      	movs	r2, r3
     2a4:	4ba6      	ldr	r3, [pc, #664]	; (540 <init_eeprom+0x3f0>)
     2a6:	4798      	blx	r3
		
		memset(ftp_user_parameter.ftp_filename, '\0', sizeof(ftp_user_parameter.ftp_filename));
     2a8:	4bb3      	ldr	r3, [pc, #716]	; (578 <init_eeprom+0x428>)
     2aa:	2210      	movs	r2, #16
     2ac:	2100      	movs	r1, #0
     2ae:	0018      	movs	r0, r3
     2b0:	4ba5      	ldr	r3, [pc, #660]	; (548 <init_eeprom+0x3f8>)
     2b2:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_filename,"firmware.bin");
     2b4:	4ab0      	ldr	r2, [pc, #704]	; (578 <init_eeprom+0x428>)
     2b6:	4bb3      	ldr	r3, [pc, #716]	; (584 <init_eeprom+0x434>)
     2b8:	0010      	movs	r0, r2
     2ba:	0019      	movs	r1, r3
     2bc:	230d      	movs	r3, #13
     2be:	001a      	movs	r2, r3
     2c0:	4b9f      	ldr	r3, [pc, #636]	; (540 <init_eeprom+0x3f0>)
     2c2:	4798      	blx	r3
		
		memcpy(page_data,&ftp_user_parameter,sizeof(ftp_user_parameter));
     2c4:	49a9      	ldr	r1, [pc, #676]	; (56c <init_eeprom+0x41c>)
     2c6:	4b9b      	ldr	r3, [pc, #620]	; (534 <init_eeprom+0x3e4>)
     2c8:	2238      	movs	r2, #56	; 0x38
     2ca:	0018      	movs	r0, r3
     2cc:	4b9c      	ldr	r3, [pc, #624]	; (540 <init_eeprom+0x3f0>)
     2ce:	4798      	blx	r3
		eeprom_emulator_write_page(FTP_USER_PARAMETER_PAGE, page_data);
     2d0:	4b98      	ldr	r3, [pc, #608]	; (534 <init_eeprom+0x3e4>)
     2d2:	0019      	movs	r1, r3
     2d4:	2002      	movs	r0, #2
     2d6:	4b9e      	ldr	r3, [pc, #632]	; (550 <init_eeprom+0x400>)
     2d8:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     2da:	4b9e      	ldr	r3, [pc, #632]	; (554 <init_eeprom+0x404>)
     2dc:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(USER_COUNTER_PAGE, page_data);
     2de:	4b95      	ldr	r3, [pc, #596]	; (534 <init_eeprom+0x3e4>)
     2e0:	0019      	movs	r1, r3
     2e2:	2008      	movs	r0, #8
     2e4:	4b94      	ldr	r3, [pc, #592]	; (538 <init_eeprom+0x3e8>)
     2e6:	4798      	blx	r3
	memcpy(&user_count_struct,page_data,sizeof(user_count_struct));
     2e8:	4aa7      	ldr	r2, [pc, #668]	; (588 <init_eeprom+0x438>)
     2ea:	4b92      	ldr	r3, [pc, #584]	; (534 <init_eeprom+0x3e4>)
     2ec:	0010      	movs	r0, r2
     2ee:	0019      	movs	r1, r3
     2f0:	2308      	movs	r3, #8
     2f2:	001a      	movs	r2, r3
     2f4:	4b92      	ldr	r3, [pc, #584]	; (540 <init_eeprom+0x3f0>)
     2f6:	4798      	blx	r3
	if (user_count_struct.u8tfirst_time_write_ee != 85)
     2f8:	4ba3      	ldr	r3, [pc, #652]	; (588 <init_eeprom+0x438>)
     2fa:	781b      	ldrb	r3, [r3, #0]
     2fc:	2b55      	cmp	r3, #85	; 0x55
     2fe:	d01d      	beq.n	33c <init_eeprom+0x1ec>
	{
		user_count_struct.u8tfirst_time_write_ee = 85;
     300:	4ba1      	ldr	r3, [pc, #644]	; (588 <init_eeprom+0x438>)
     302:	2255      	movs	r2, #85	; 0x55
     304:	701a      	strb	r2, [r3, #0]
		user_count_struct.total_user_no_count    = 15;
     306:	4ba0      	ldr	r3, [pc, #640]	; (588 <init_eeprom+0x438>)
     308:	220f      	movs	r2, #15
     30a:	705a      	strb	r2, [r3, #1]
		user_count_struct.current_user_no_count  = 0;
     30c:	4b9e      	ldr	r3, [pc, #632]	; (588 <init_eeprom+0x438>)
     30e:	2200      	movs	r2, #0
     310:	709a      	strb	r2, [r3, #2]
		user_count_struct.primaryNumberIndex = 0;
     312:	4b9d      	ldr	r3, [pc, #628]	; (588 <init_eeprom+0x438>)
     314:	2200      	movs	r2, #0
     316:	70da      	strb	r2, [r3, #3]
		user_count_struct.secondaryNumberIndex = 1;
     318:	4b9b      	ldr	r3, [pc, #620]	; (588 <init_eeprom+0x438>)
     31a:	2201      	movs	r2, #1
     31c:	711a      	strb	r2, [r3, #4]
		
		
		memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
     31e:	4a85      	ldr	r2, [pc, #532]	; (534 <init_eeprom+0x3e4>)
     320:	4b99      	ldr	r3, [pc, #612]	; (588 <init_eeprom+0x438>)
     322:	0010      	movs	r0, r2
     324:	0019      	movs	r1, r3
     326:	2308      	movs	r3, #8
     328:	001a      	movs	r2, r3
     32a:	4b85      	ldr	r3, [pc, #532]	; (540 <init_eeprom+0x3f0>)
     32c:	4798      	blx	r3
		eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
     32e:	4b81      	ldr	r3, [pc, #516]	; (534 <init_eeprom+0x3e4>)
     330:	0019      	movs	r1, r3
     332:	2008      	movs	r0, #8
     334:	4b86      	ldr	r3, [pc, #536]	; (550 <init_eeprom+0x400>)
     336:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     338:	4b86      	ldr	r3, [pc, #536]	; (554 <init_eeprom+0x404>)
     33a:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	config_mobile_no_ee(ADMIN_1_MOBILE_NUMBER_PAGE,"7041196959");
     33c:	4b93      	ldr	r3, [pc, #588]	; (58c <init_eeprom+0x43c>)
     33e:	0019      	movs	r1, r3
     340:	2003      	movs	r0, #3
     342:	4b93      	ldr	r3, [pc, #588]	; (590 <init_eeprom+0x440>)
     344:	4798      	blx	r3
	config_mobile_no_ee(ADMIN_2_MOBILE_NUMBER_PAGE,"7698439201");
     346:	4b93      	ldr	r3, [pc, #588]	; (594 <init_eeprom+0x444>)
     348:	0019      	movs	r1, r3
     34a:	2004      	movs	r0, #4
     34c:	4b90      	ldr	r3, [pc, #576]	; (590 <init_eeprom+0x440>)
     34e:	4798      	blx	r3
	config_mobile_no_ee(ADMIN_3_MOBILE_NUMBER_PAGE,"7383614214");
     350:	4b91      	ldr	r3, [pc, #580]	; (598 <init_eeprom+0x448>)
     352:	0019      	movs	r1, r3
     354:	2005      	movs	r0, #5
     356:	4b8e      	ldr	r3, [pc, #568]	; (590 <init_eeprom+0x440>)
     358:	4798      	blx	r3
	config_mobile_no_ee(ADMIN_4_MOBILE_NUMBER_PAGE,"7383622678");
     35a:	4b90      	ldr	r3, [pc, #576]	; (59c <init_eeprom+0x44c>)
     35c:	0019      	movs	r1, r3
     35e:	2006      	movs	r0, #6
     360:	4b8b      	ldr	r3, [pc, #556]	; (590 <init_eeprom+0x440>)
     362:	4798      	blx	r3
	//config_mobile_no_ee(ADMIN_5_MOBILE_NUMBER_PAGE,"9586135978");
	config_mobile_no_ee(ADMIN_5_MOBILE_NUMBER_PAGE,"9586135978");
     364:	4b8e      	ldr	r3, [pc, #568]	; (5a0 <init_eeprom+0x450>)
     366:	0019      	movs	r1, r3
     368:	2007      	movs	r0, #7
     36a:	4b89      	ldr	r3, [pc, #548]	; (590 <init_eeprom+0x440>)
     36c:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_mobile_no_ee(USER_1_MOBILE_NUMBER_PAGE ,"0000000000");
     36e:	4b77      	ldr	r3, [pc, #476]	; (54c <init_eeprom+0x3fc>)
     370:	0019      	movs	r1, r3
     372:	2009      	movs	r0, #9
     374:	4b86      	ldr	r3, [pc, #536]	; (590 <init_eeprom+0x440>)
     376:	4798      	blx	r3
	config_mobile_no_ee(USER_2_MOBILE_NUMBER_PAGE ,"0000000000");
     378:	4b74      	ldr	r3, [pc, #464]	; (54c <init_eeprom+0x3fc>)
     37a:	0019      	movs	r1, r3
     37c:	200a      	movs	r0, #10
     37e:	4b84      	ldr	r3, [pc, #528]	; (590 <init_eeprom+0x440>)
     380:	4798      	blx	r3
	config_mobile_no_ee(USER_3_MOBILE_NUMBER_PAGE ,"0000000000");
     382:	4b72      	ldr	r3, [pc, #456]	; (54c <init_eeprom+0x3fc>)
     384:	0019      	movs	r1, r3
     386:	200b      	movs	r0, #11
     388:	4b81      	ldr	r3, [pc, #516]	; (590 <init_eeprom+0x440>)
     38a:	4798      	blx	r3
	config_mobile_no_ee(USER_4_MOBILE_NUMBER_PAGE ,"0000000000");
     38c:	4b6f      	ldr	r3, [pc, #444]	; (54c <init_eeprom+0x3fc>)
     38e:	0019      	movs	r1, r3
     390:	200c      	movs	r0, #12
     392:	4b7f      	ldr	r3, [pc, #508]	; (590 <init_eeprom+0x440>)
     394:	4798      	blx	r3
	config_mobile_no_ee(USER_5_MOBILE_NUMBER_PAGE ,"0000000000");
     396:	4b6d      	ldr	r3, [pc, #436]	; (54c <init_eeprom+0x3fc>)
     398:	0019      	movs	r1, r3
     39a:	200d      	movs	r0, #13
     39c:	4b7c      	ldr	r3, [pc, #496]	; (590 <init_eeprom+0x440>)
     39e:	4798      	blx	r3
	config_mobile_no_ee(USER_6_MOBILE_NUMBER_PAGE ,"0000000000");
     3a0:	4b6a      	ldr	r3, [pc, #424]	; (54c <init_eeprom+0x3fc>)
     3a2:	0019      	movs	r1, r3
     3a4:	200e      	movs	r0, #14
     3a6:	4b7a      	ldr	r3, [pc, #488]	; (590 <init_eeprom+0x440>)
     3a8:	4798      	blx	r3
	config_mobile_no_ee(USER_7_MOBILE_NUMBER_PAGE ,"0000000000");
     3aa:	4b68      	ldr	r3, [pc, #416]	; (54c <init_eeprom+0x3fc>)
     3ac:	0019      	movs	r1, r3
     3ae:	200f      	movs	r0, #15
     3b0:	4b77      	ldr	r3, [pc, #476]	; (590 <init_eeprom+0x440>)
     3b2:	4798      	blx	r3
	config_mobile_no_ee(USER_8_MOBILE_NUMBER_PAGE ,"0000000000");
     3b4:	4b65      	ldr	r3, [pc, #404]	; (54c <init_eeprom+0x3fc>)
     3b6:	0019      	movs	r1, r3
     3b8:	2010      	movs	r0, #16
     3ba:	4b75      	ldr	r3, [pc, #468]	; (590 <init_eeprom+0x440>)
     3bc:	4798      	blx	r3
	config_mobile_no_ee(USER_9_MOBILE_NUMBER_PAGE ,"0000000000");
     3be:	4b63      	ldr	r3, [pc, #396]	; (54c <init_eeprom+0x3fc>)
     3c0:	0019      	movs	r1, r3
     3c2:	2011      	movs	r0, #17
     3c4:	4b72      	ldr	r3, [pc, #456]	; (590 <init_eeprom+0x440>)
     3c6:	4798      	blx	r3
	config_mobile_no_ee(USER_10_MOBILE_NUMBER_PAGE,"0000000000");
     3c8:	4b60      	ldr	r3, [pc, #384]	; (54c <init_eeprom+0x3fc>)
     3ca:	0019      	movs	r1, r3
     3cc:	2012      	movs	r0, #18
     3ce:	4b70      	ldr	r3, [pc, #448]	; (590 <init_eeprom+0x440>)
     3d0:	4798      	blx	r3
	config_mobile_no_ee(USER_11_MOBILE_NUMBER_PAGE,"0000000000");
     3d2:	4b5e      	ldr	r3, [pc, #376]	; (54c <init_eeprom+0x3fc>)
     3d4:	0019      	movs	r1, r3
     3d6:	2013      	movs	r0, #19
     3d8:	4b6d      	ldr	r3, [pc, #436]	; (590 <init_eeprom+0x440>)
     3da:	4798      	blx	r3
	config_mobile_no_ee(USER_12_MOBILE_NUMBER_PAGE,"0000000000");
     3dc:	4b5b      	ldr	r3, [pc, #364]	; (54c <init_eeprom+0x3fc>)
     3de:	0019      	movs	r1, r3
     3e0:	2014      	movs	r0, #20
     3e2:	4b6b      	ldr	r3, [pc, #428]	; (590 <init_eeprom+0x440>)
     3e4:	4798      	blx	r3
	config_mobile_no_ee(USER_13_MOBILE_NUMBER_PAGE,"0000000000");
     3e6:	4b59      	ldr	r3, [pc, #356]	; (54c <init_eeprom+0x3fc>)
     3e8:	0019      	movs	r1, r3
     3ea:	2015      	movs	r0, #21
     3ec:	4b68      	ldr	r3, [pc, #416]	; (590 <init_eeprom+0x440>)
     3ee:	4798      	blx	r3
	config_mobile_no_ee(USER_14_MOBILE_NUMBER_PAGE,"0000000000");
     3f0:	4b56      	ldr	r3, [pc, #344]	; (54c <init_eeprom+0x3fc>)
     3f2:	0019      	movs	r1, r3
     3f4:	2016      	movs	r0, #22
     3f6:	4b66      	ldr	r3, [pc, #408]	; (590 <init_eeprom+0x440>)
     3f8:	4798      	blx	r3
	config_mobile_no_ee(USER_15_MOBILE_NUMBER_PAGE,"0000000000");
     3fa:	4b54      	ldr	r3, [pc, #336]	; (54c <init_eeprom+0x3fc>)
     3fc:	0019      	movs	r1, r3
     3fe:	2017      	movs	r0, #23
     400:	4b63      	ldr	r3, [pc, #396]	; (590 <init_eeprom+0x440>)
     402:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(ALTARNATE_NUMBERS_PAGE, page_data);
     404:	4b4b      	ldr	r3, [pc, #300]	; (534 <init_eeprom+0x3e4>)
     406:	0019      	movs	r1, r3
     408:	2018      	movs	r0, #24
     40a:	4b4b      	ldr	r3, [pc, #300]	; (538 <init_eeprom+0x3e8>)
     40c:	4798      	blx	r3
	memcpy(&alternateNumber_struct,page_data,sizeof(alternateNumber_struct));
     40e:	4a65      	ldr	r2, [pc, #404]	; (5a4 <init_eeprom+0x454>)
     410:	4b48      	ldr	r3, [pc, #288]	; (534 <init_eeprom+0x3e4>)
     412:	0010      	movs	r0, r2
     414:	0019      	movs	r1, r3
     416:	2318      	movs	r3, #24
     418:	001a      	movs	r2, r3
     41a:	4b49      	ldr	r3, [pc, #292]	; (540 <init_eeprom+0x3f0>)
     41c:	4798      	blx	r3
	if (alternateNumber_struct.u8tfirst_time_write_ee != 85)
     41e:	4b61      	ldr	r3, [pc, #388]	; (5a4 <init_eeprom+0x454>)
     420:	781b      	ldrb	r3, [r3, #0]
     422:	2b55      	cmp	r3, #85	; 0x55
     424:	d025      	beq.n	472 <init_eeprom+0x322>
	{
		alternateNumber_struct.u8tfirst_time_write_ee = 85;
     426:	4b5f      	ldr	r3, [pc, #380]	; (5a4 <init_eeprom+0x454>)
     428:	2255      	movs	r2, #85	; 0x55
     42a:	701a      	strb	r2, [r3, #0]
		
		alternateNumber_struct.alterNumberPresent = false;
     42c:	4b5d      	ldr	r3, [pc, #372]	; (5a4 <init_eeprom+0x454>)
     42e:	2200      	movs	r2, #0
     430:	709a      	strb	r2, [r3, #2]
		alternateNumber_struct.alterNumberSetting = false;
     432:	4b5c      	ldr	r3, [pc, #368]	; (5a4 <init_eeprom+0x454>)
     434:	2200      	movs	r2, #0
     436:	705a      	strb	r2, [r3, #1]
		
		memset(alternateNumber_struct.alternateNumber_ee, '\0', sizeof(alternateNumber_struct.alternateNumber_ee));
     438:	4b5b      	ldr	r3, [pc, #364]	; (5a8 <init_eeprom+0x458>)
     43a:	2214      	movs	r2, #20
     43c:	2100      	movs	r1, #0
     43e:	0018      	movs	r0, r3
     440:	4b41      	ldr	r3, [pc, #260]	; (548 <init_eeprom+0x3f8>)
     442:	4798      	blx	r3
		strcpy(alternateNumber_struct.alternateNumber_ee,"0000000000");
     444:	4a58      	ldr	r2, [pc, #352]	; (5a8 <init_eeprom+0x458>)
     446:	4b41      	ldr	r3, [pc, #260]	; (54c <init_eeprom+0x3fc>)
     448:	0010      	movs	r0, r2
     44a:	0019      	movs	r1, r3
     44c:	230b      	movs	r3, #11
     44e:	001a      	movs	r2, r3
     450:	4b3b      	ldr	r3, [pc, #236]	; (540 <init_eeprom+0x3f0>)
     452:	4798      	blx	r3
		
		memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
     454:	4a37      	ldr	r2, [pc, #220]	; (534 <init_eeprom+0x3e4>)
     456:	4b53      	ldr	r3, [pc, #332]	; (5a4 <init_eeprom+0x454>)
     458:	0010      	movs	r0, r2
     45a:	0019      	movs	r1, r3
     45c:	2318      	movs	r3, #24
     45e:	001a      	movs	r2, r3
     460:	4b37      	ldr	r3, [pc, #220]	; (540 <init_eeprom+0x3f0>)
     462:	4798      	blx	r3
		eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
     464:	4b33      	ldr	r3, [pc, #204]	; (534 <init_eeprom+0x3e4>)
     466:	0019      	movs	r1, r3
     468:	2018      	movs	r0, #24
     46a:	4b39      	ldr	r3, [pc, #228]	; (550 <init_eeprom+0x400>)
     46c:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     46e:	4b39      	ldr	r3, [pc, #228]	; (554 <init_eeprom+0x404>)
     470:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(M2M_NUMBERS_PAGE, page_data);
     472:	4b30      	ldr	r3, [pc, #192]	; (534 <init_eeprom+0x3e4>)
     474:	0019      	movs	r1, r3
     476:	2019      	movs	r0, #25
     478:	4b2f      	ldr	r3, [pc, #188]	; (538 <init_eeprom+0x3e8>)
     47a:	4798      	blx	r3
	memcpy(&m2m_Numbers_struct,page_data,sizeof(m2m_Numbers_struct));
     47c:	4a4b      	ldr	r2, [pc, #300]	; (5ac <init_eeprom+0x45c>)
     47e:	4b2d      	ldr	r3, [pc, #180]	; (534 <init_eeprom+0x3e4>)
     480:	0010      	movs	r0, r2
     482:	0019      	movs	r1, r3
     484:	2330      	movs	r3, #48	; 0x30
     486:	001a      	movs	r2, r3
     488:	4b2d      	ldr	r3, [pc, #180]	; (540 <init_eeprom+0x3f0>)
     48a:	4798      	blx	r3
	if (m2m_Numbers_struct.u8tfirst_time_write_ee != 85)
     48c:	4b47      	ldr	r3, [pc, #284]	; (5ac <init_eeprom+0x45c>)
     48e:	781b      	ldrb	r3, [r3, #0]
     490:	2b55      	cmp	r3, #85	; 0x55
     492:	d03c      	beq.n	50e <init_eeprom+0x3be>
	{
		m2m_Numbers_struct.u8tfirst_time_write_ee = 85;
     494:	4b45      	ldr	r3, [pc, #276]	; (5ac <init_eeprom+0x45c>)
     496:	2255      	movs	r2, #85	; 0x55
     498:	701a      	strb	r2, [r3, #0]
		
		memset(m2m_Numbers_struct.m2mNumber_ee, '\0', sizeof(m2m_Numbers_struct.m2mNumber_ee));
     49a:	4b45      	ldr	r3, [pc, #276]	; (5b0 <init_eeprom+0x460>)
     49c:	2214      	movs	r2, #20
     49e:	2100      	movs	r1, #0
     4a0:	0018      	movs	r0, r3
     4a2:	4b29      	ldr	r3, [pc, #164]	; (548 <init_eeprom+0x3f8>)
     4a4:	4798      	blx	r3
		strcpy(m2m_Numbers_struct.m2mNumber_ee,"0000000000");
     4a6:	4a42      	ldr	r2, [pc, #264]	; (5b0 <init_eeprom+0x460>)
     4a8:	4b28      	ldr	r3, [pc, #160]	; (54c <init_eeprom+0x3fc>)
     4aa:	0010      	movs	r0, r2
     4ac:	0019      	movs	r1, r3
     4ae:	230b      	movs	r3, #11
     4b0:	001a      	movs	r2, r3
     4b2:	4b23      	ldr	r3, [pc, #140]	; (540 <init_eeprom+0x3f0>)
     4b4:	4798      	blx	r3
		
		memset(m2m_Numbers_struct.m2mremoteNumber_ee, '\0', sizeof(m2m_Numbers_struct.m2mremoteNumber_ee));
     4b6:	4b3f      	ldr	r3, [pc, #252]	; (5b4 <init_eeprom+0x464>)
     4b8:	2214      	movs	r2, #20
     4ba:	2100      	movs	r1, #0
     4bc:	0018      	movs	r0, r3
     4be:	4b22      	ldr	r3, [pc, #136]	; (548 <init_eeprom+0x3f8>)
     4c0:	4798      	blx	r3
		strcpy(m2m_Numbers_struct.m2mremoteNumber_ee,"0000000000");
     4c2:	4a3c      	ldr	r2, [pc, #240]	; (5b4 <init_eeprom+0x464>)
     4c4:	4b21      	ldr	r3, [pc, #132]	; (54c <init_eeprom+0x3fc>)
     4c6:	0010      	movs	r0, r2
     4c8:	0019      	movs	r1, r3
     4ca:	230b      	movs	r3, #11
     4cc:	001a      	movs	r2, r3
     4ce:	4b1c      	ldr	r3, [pc, #112]	; (540 <init_eeprom+0x3f0>)
     4d0:	4798      	blx	r3
		
		m2m_Numbers_struct.m2mPresent			= false;
     4d2:	4b36      	ldr	r3, [pc, #216]	; (5ac <init_eeprom+0x45c>)
     4d4:	2200      	movs	r2, #0
     4d6:	705a      	strb	r2, [r3, #1]
		m2m_Numbers_struct.m2mVerified			= false;
     4d8:	4b34      	ldr	r3, [pc, #208]	; (5ac <init_eeprom+0x45c>)
     4da:	2200      	movs	r2, #0
     4dc:	709a      	strb	r2, [r3, #2]
		
		m2m_Numbers_struct.m2mRemotePresent		= false;
     4de:	4b33      	ldr	r3, [pc, #204]	; (5ac <init_eeprom+0x45c>)
     4e0:	2200      	movs	r2, #0
     4e2:	70da      	strb	r2, [r3, #3]
		m2m_Numbers_struct.m2mRemoteVerified	= false;
     4e4:	4b31      	ldr	r3, [pc, #196]	; (5ac <init_eeprom+0x45c>)
     4e6:	2200      	movs	r2, #0
     4e8:	711a      	strb	r2, [r3, #4]
		
		m2m_Numbers_struct.m2mSetting			= false;
     4ea:	4b30      	ldr	r3, [pc, #192]	; (5ac <init_eeprom+0x45c>)
     4ec:	2200      	movs	r2, #0
     4ee:	715a      	strb	r2, [r3, #5]
		
		memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
     4f0:	4a10      	ldr	r2, [pc, #64]	; (534 <init_eeprom+0x3e4>)
     4f2:	4b2e      	ldr	r3, [pc, #184]	; (5ac <init_eeprom+0x45c>)
     4f4:	0010      	movs	r0, r2
     4f6:	0019      	movs	r1, r3
     4f8:	2330      	movs	r3, #48	; 0x30
     4fa:	001a      	movs	r2, r3
     4fc:	4b10      	ldr	r3, [pc, #64]	; (540 <init_eeprom+0x3f0>)
     4fe:	4798      	blx	r3
		eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
     500:	4b0c      	ldr	r3, [pc, #48]	; (534 <init_eeprom+0x3e4>)
     502:	0019      	movs	r1, r3
     504:	2019      	movs	r0, #25
     506:	4b12      	ldr	r3, [pc, #72]	; (550 <init_eeprom+0x400>)
     508:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     50a:	4b12      	ldr	r3, [pc, #72]	; (554 <init_eeprom+0x404>)
     50c:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(USER_SETTING_PARAMETERS_PAGE, page_data);
     50e:	4b09      	ldr	r3, [pc, #36]	; (534 <init_eeprom+0x3e4>)
     510:	0019      	movs	r1, r3
     512:	201a      	movs	r0, #26
     514:	4b08      	ldr	r3, [pc, #32]	; (538 <init_eeprom+0x3e8>)
     516:	4798      	blx	r3
	memcpy(&user_settings_parameter_struct,page_data,sizeof(user_settings_parameter_struct));
     518:	4906      	ldr	r1, [pc, #24]	; (534 <init_eeprom+0x3e4>)
     51a:	4b27      	ldr	r3, [pc, #156]	; (5b8 <init_eeprom+0x468>)
     51c:	222c      	movs	r2, #44	; 0x2c
     51e:	0018      	movs	r0, r3
     520:	4b07      	ldr	r3, [pc, #28]	; (540 <init_eeprom+0x3f0>)
     522:	4798      	blx	r3
	if (user_settings_parameter_struct.u8tfirst_time_write_ee != 85)
     524:	4b24      	ldr	r3, [pc, #144]	; (5b8 <init_eeprom+0x468>)
     526:	781b      	ldrb	r3, [r3, #0]
     528:	2b55      	cmp	r3, #85	; 0x55
     52a:	d100      	bne.n	52e <init_eeprom+0x3de>
     52c:	e0a1      	b.n	672 <init_eeprom+0x522>
     52e:	e045      	b.n	5bc <init_eeprom+0x46c>
     530:	00000115 	.word	0x00000115
     534:	20000574 	.word	0x20000574
     538:	000128f5 	.word	0x000128f5
     53c:	200005e8 	.word	0x200005e8
     540:	00017b21 	.word	0x00017b21
     544:	200005f0 	.word	0x200005f0
     548:	00017b57 	.word	0x00017b57
     54c:	00018758 	.word	0x00018758
     550:	000127e9 	.word	0x000127e9
     554:	00012991 	.word	0x00012991
     558:	2000050c 	.word	0x2000050c
     55c:	20000511 	.word	0x20000511
     560:	00018764 	.word	0x00018764
     564:	2000052f 	.word	0x2000052f
     568:	00018774 	.word	0x00018774
     56c:	200005b0 	.word	0x200005b0
     570:	200005b5 	.word	0x200005b5
     574:	00018780 	.word	0x00018780
     578:	200005d5 	.word	0x200005d5
     57c:	200005c5 	.word	0x200005c5
     580:	00018790 	.word	0x00018790
     584:	0001879c 	.word	0x0001879c
     588:	20000600 	.word	0x20000600
     58c:	000187ac 	.word	0x000187ac
     590:	0000072d 	.word	0x0000072d
     594:	000187b8 	.word	0x000187b8
     598:	000187c4 	.word	0x000187c4
     59c:	000187d0 	.word	0x000187d0
     5a0:	000187dc 	.word	0x000187dc
     5a4:	20000634 	.word	0x20000634
     5a8:	20000638 	.word	0x20000638
     5ac:	20000544 	.word	0x20000544
     5b0:	2000054c 	.word	0x2000054c
     5b4:	20000560 	.word	0x20000560
     5b8:	2000064c 	.word	0x2000064c
	{
		user_settings_parameter_struct.u8tfirst_time_write_ee		= 85;
     5bc:	4b51      	ldr	r3, [pc, #324]	; (704 <init_eeprom+0x5b4>)
     5be:	2255      	movs	r2, #85	; 0x55
     5c0:	701a      	strb	r2, [r3, #0]
		
		user_settings_parameter_struct.autoStartAddress				= false;
     5c2:	4b50      	ldr	r3, [pc, #320]	; (704 <init_eeprom+0x5b4>)
     5c4:	2200      	movs	r2, #0
     5c6:	705a      	strb	r2, [r3, #1]
		user_settings_parameter_struct.autoStartTimeAddress			= 50;
     5c8:	4b4e      	ldr	r3, [pc, #312]	; (704 <init_eeprom+0x5b4>)
     5ca:	2232      	movs	r2, #50	; 0x32
     5cc:	805a      	strh	r2, [r3, #2]
		user_settings_parameter_struct.dndAddress					= DND_OFF;
     5ce:	4b4d      	ldr	r3, [pc, #308]	; (704 <init_eeprom+0x5b4>)
     5d0:	224f      	movs	r2, #79	; 0x4f
     5d2:	711a      	strb	r2, [r3, #4]
		user_settings_parameter_struct.responseAddress				= 'T';
     5d4:	4b4b      	ldr	r3, [pc, #300]	; (704 <init_eeprom+0x5b4>)
     5d6:	2254      	movs	r2, #84	; 0x54
     5d8:	715a      	strb	r2, [r3, #5]
		user_settings_parameter_struct.starDeltaTimerAddress		= 2;
     5da:	4b4a      	ldr	r3, [pc, #296]	; (704 <init_eeprom+0x5b4>)
     5dc:	2202      	movs	r2, #2
     5de:	80da      	strh	r2, [r3, #6]
		//user_settings_parameter_struct.bypassAddress				= false;
		user_settings_parameter_struct.eventStageAddress			= 0;
     5e0:	4b48      	ldr	r3, [pc, #288]	; (704 <init_eeprom+0x5b4>)
     5e2:	2200      	movs	r2, #0
     5e4:	721a      	strb	r2, [r3, #8]
		user_settings_parameter_struct.noCallAddress				= false;
     5e6:	4b47      	ldr	r3, [pc, #284]	; (704 <init_eeprom+0x5b4>)
     5e8:	2200      	movs	r2, #0
     5ea:	725a      	strb	r2, [r3, #9]
		user_settings_parameter_struct.noCallStartTimeHourAddress	= 0;
     5ec:	4b45      	ldr	r3, [pc, #276]	; (704 <init_eeprom+0x5b4>)
     5ee:	2200      	movs	r2, #0
     5f0:	729a      	strb	r2, [r3, #10]
		user_settings_parameter_struct.noCallStartTimeMinuteAddress = 0;
     5f2:	4b44      	ldr	r3, [pc, #272]	; (704 <init_eeprom+0x5b4>)
     5f4:	2200      	movs	r2, #0
     5f6:	72da      	strb	r2, [r3, #11]
		user_settings_parameter_struct.noCallStopTimeHourAddress	= 0;
     5f8:	4b42      	ldr	r3, [pc, #264]	; (704 <init_eeprom+0x5b4>)
     5fa:	2200      	movs	r2, #0
     5fc:	731a      	strb	r2, [r3, #12]
		user_settings_parameter_struct.noCallStopTimeMinuteAddress	= 0;
     5fe:	4b41      	ldr	r3, [pc, #260]	; (704 <init_eeprom+0x5b4>)
     600:	2200      	movs	r2, #0
     602:	735a      	strb	r2, [r3, #13]
		user_settings_parameter_struct.lowVoltAddress				= 0;
     604:	4b3f      	ldr	r3, [pc, #252]	; (704 <init_eeprom+0x5b4>)
     606:	2200      	movs	r2, #0
     608:	739a      	strb	r2, [r3, #14]
		user_settings_parameter_struct.currentDetectionAddress		= false;
     60a:	4b3e      	ldr	r3, [pc, #248]	; (704 <init_eeprom+0x5b4>)
     60c:	2200      	movs	r2, #0
     60e:	73da      	strb	r2, [r3, #15]
		user_settings_parameter_struct.normalLoadAddress			= 0;
     610:	4b3c      	ldr	r3, [pc, #240]	; (704 <init_eeprom+0x5b4>)
     612:	2200      	movs	r2, #0
     614:	611a      	str	r2, [r3, #16]
		user_settings_parameter_struct.overloadAddress				= 0;
     616:	4b3b      	ldr	r3, [pc, #236]	; (704 <init_eeprom+0x5b4>)
     618:	2200      	movs	r2, #0
     61a:	615a      	str	r2, [r3, #20]
		user_settings_parameter_struct.underloadAddress				= 0;
     61c:	4b39      	ldr	r3, [pc, #228]	; (704 <init_eeprom+0x5b4>)
     61e:	2200      	movs	r2, #0
     620:	619a      	str	r2, [r3, #24]
		user_settings_parameter_struct.underloadPerAddress			= 85;
     622:	4b38      	ldr	r3, [pc, #224]	; (704 <init_eeprom+0x5b4>)
     624:	2255      	movs	r2, #85	; 0x55
     626:	771a      	strb	r2, [r3, #28]
		user_settings_parameter_struct.overloadPerAddress			= 120;
     628:	4b36      	ldr	r3, [pc, #216]	; (704 <init_eeprom+0x5b4>)
     62a:	2278      	movs	r2, #120	; 0x78
     62c:	775a      	strb	r2, [r3, #29]
		//user_settings_parameter_struct.jumperSettingAddress			= 1;
		user_settings_parameter_struct.preventOverFlowAddress		= false;
     62e:	4b35      	ldr	r3, [pc, #212]	; (704 <init_eeprom+0x5b4>)
     630:	2200      	movs	r2, #0
     632:	779a      	strb	r2, [r3, #30]
		user_settings_parameter_struct.waterBypassAddress			= false;
     634:	4b33      	ldr	r3, [pc, #204]	; (704 <init_eeprom+0x5b4>)
     636:	2200      	movs	r2, #0
     638:	77da      	strb	r2, [r3, #31]
		
		user_settings_parameter_struct.detectSinglePhasing			= true;
     63a:	4b32      	ldr	r3, [pc, #200]	; (704 <init_eeprom+0x5b4>)
     63c:	2220      	movs	r2, #32
     63e:	2101      	movs	r1, #1
     640:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.singlePhasingVoltage			= 80;
     642:	4b30      	ldr	r3, [pc, #192]	; (704 <init_eeprom+0x5b4>)
     644:	2250      	movs	r2, #80	; 0x50
     646:	845a      	strh	r2, [r3, #34]	; 0x22
		user_settings_parameter_struct.detectPhaseSequence			= true;
     648:	4b2e      	ldr	r3, [pc, #184]	; (704 <init_eeprom+0x5b4>)
     64a:	2224      	movs	r2, #36	; 0x24
     64c:	2101      	movs	r1, #1
     64e:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.detectMotorFeedback			= MOTORFEEDBACK_DETECTION_CURRENT;
     650:	4b2c      	ldr	r3, [pc, #176]	; (704 <init_eeprom+0x5b4>)
     652:	2225      	movs	r2, #37	; 0x25
     654:	2101      	movs	r1, #1
     656:	5499      	strb	r1, [r3, r2]
		

		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     658:	492a      	ldr	r1, [pc, #168]	; (704 <init_eeprom+0x5b4>)
     65a:	4b2b      	ldr	r3, [pc, #172]	; (708 <init_eeprom+0x5b8>)
     65c:	222c      	movs	r2, #44	; 0x2c
     65e:	0018      	movs	r0, r3
     660:	4b2a      	ldr	r3, [pc, #168]	; (70c <init_eeprom+0x5bc>)
     662:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
     664:	4b28      	ldr	r3, [pc, #160]	; (708 <init_eeprom+0x5b8>)
     666:	0019      	movs	r1, r3
     668:	201a      	movs	r0, #26
     66a:	4b29      	ldr	r3, [pc, #164]	; (710 <init_eeprom+0x5c0>)
     66c:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     66e:	4b29      	ldr	r3, [pc, #164]	; (714 <init_eeprom+0x5c4>)
     670:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(FACTORY_SETTING_PARAMETERS_PAGE, page_data);
     672:	4b25      	ldr	r3, [pc, #148]	; (708 <init_eeprom+0x5b8>)
     674:	0019      	movs	r1, r3
     676:	201b      	movs	r0, #27
     678:	4b27      	ldr	r3, [pc, #156]	; (718 <init_eeprom+0x5c8>)
     67a:	4798      	blx	r3
	memcpy(&factory_settings_parameter_struct,page_data,sizeof(factory_settings_parameter_struct));
     67c:	4a27      	ldr	r2, [pc, #156]	; (71c <init_eeprom+0x5cc>)
     67e:	4b22      	ldr	r3, [pc, #136]	; (708 <init_eeprom+0x5b8>)
     680:	0010      	movs	r0, r2
     682:	0019      	movs	r1, r3
     684:	231c      	movs	r3, #28
     686:	001a      	movs	r2, r3
     688:	4b20      	ldr	r3, [pc, #128]	; (70c <init_eeprom+0x5bc>)
     68a:	4798      	blx	r3
	if (factory_settings_parameter_struct.u8tfirst_time_write_ee != 85)
     68c:	4b23      	ldr	r3, [pc, #140]	; (71c <init_eeprom+0x5cc>)
     68e:	781b      	ldrb	r3, [r3, #0]
     690:	2b55      	cmp	r3, #85	; 0x55
     692:	d034      	beq.n	6fe <init_eeprom+0x5ae>
	{
		factory_settings_parameter_struct.u8tfirst_time_write_ee	= 85;
     694:	4b21      	ldr	r3, [pc, #132]	; (71c <init_eeprom+0x5cc>)
     696:	2255      	movs	r2, #85	; 0x55
     698:	701a      	strb	r2, [r3, #0]
		factory_settings_parameter_struct.AMPERE_SPEAK				= true;
     69a:	4b20      	ldr	r3, [pc, #128]	; (71c <init_eeprom+0x5cc>)
     69c:	2201      	movs	r2, #1
     69e:	709a      	strb	r2, [r3, #2]
		factory_settings_parameter_struct.ENABLE_CURRENT			= true;
     6a0:	4b1e      	ldr	r3, [pc, #120]	; (71c <init_eeprom+0x5cc>)
     6a2:	2201      	movs	r2, #1
     6a4:	705a      	strb	r2, [r3, #1]
		factory_settings_parameter_struct.DUAL_LEVEL			    = false;	//= true;
     6a6:	4b1d      	ldr	r3, [pc, #116]	; (71c <init_eeprom+0x5cc>)
     6a8:	2200      	movs	r2, #0
     6aa:	719a      	strb	r2, [r3, #6]
		factory_settings_parameter_struct.ENABLE_WATER				= false;	//= true;
     6ac:	4b1b      	ldr	r3, [pc, #108]	; (71c <init_eeprom+0x5cc>)
     6ae:	2200      	movs	r2, #0
     6b0:	715a      	strb	r2, [r3, #5]
		factory_settings_parameter_struct.ENABLE_GP					= false;	// = true;
     6b2:	4b1a      	ldr	r3, [pc, #104]	; (71c <init_eeprom+0x5cc>)
     6b4:	2200      	movs	r2, #0
     6b6:	711a      	strb	r2, [r3, #4]
		factory_settings_parameter_struct.ENABLE_M2M				= false;
     6b8:	4b18      	ldr	r3, [pc, #96]	; (71c <init_eeprom+0x5cc>)
     6ba:	2200      	movs	r2, #0
     6bc:	70da      	strb	r2, [r3, #3]
		factory_settings_parameter_struct.NOLEVELCHANGECALL			= false;
     6be:	4b17      	ldr	r3, [pc, #92]	; (71c <init_eeprom+0x5cc>)
     6c0:	2200      	movs	r2, #0
     6c2:	71da      	strb	r2, [r3, #7]
		
		memset(factory_settings_parameter_struct.DeviceID_ee, '\0', sizeof(factory_settings_parameter_struct.DeviceID_ee));
     6c4:	4b16      	ldr	r3, [pc, #88]	; (720 <init_eeprom+0x5d0>)
     6c6:	2214      	movs	r2, #20
     6c8:	2100      	movs	r1, #0
     6ca:	0018      	movs	r0, r3
     6cc:	4b15      	ldr	r3, [pc, #84]	; (724 <init_eeprom+0x5d4>)
     6ce:	4798      	blx	r3
		strcpy(factory_settings_parameter_struct.DeviceID_ee,"0000000000");
     6d0:	4a13      	ldr	r2, [pc, #76]	; (720 <init_eeprom+0x5d0>)
     6d2:	4b15      	ldr	r3, [pc, #84]	; (728 <init_eeprom+0x5d8>)
     6d4:	0010      	movs	r0, r2
     6d6:	0019      	movs	r1, r3
     6d8:	230b      	movs	r3, #11
     6da:	001a      	movs	r2, r3
     6dc:	4b0b      	ldr	r3, [pc, #44]	; (70c <init_eeprom+0x5bc>)
     6de:	4798      	blx	r3
		
		memcpy(page_data,&factory_settings_parameter_struct,sizeof(factory_settings_parameter_struct));
     6e0:	4a09      	ldr	r2, [pc, #36]	; (708 <init_eeprom+0x5b8>)
     6e2:	4b0e      	ldr	r3, [pc, #56]	; (71c <init_eeprom+0x5cc>)
     6e4:	0010      	movs	r0, r2
     6e6:	0019      	movs	r1, r3
     6e8:	231c      	movs	r3, #28
     6ea:	001a      	movs	r2, r3
     6ec:	4b07      	ldr	r3, [pc, #28]	; (70c <init_eeprom+0x5bc>)
     6ee:	4798      	blx	r3
		eeprom_emulator_write_page(FACTORY_SETTING_PARAMETERS_PAGE, page_data);
     6f0:	4b05      	ldr	r3, [pc, #20]	; (708 <init_eeprom+0x5b8>)
     6f2:	0019      	movs	r1, r3
     6f4:	201b      	movs	r0, #27
     6f6:	4b06      	ldr	r3, [pc, #24]	; (710 <init_eeprom+0x5c0>)
     6f8:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     6fa:	4b06      	ldr	r3, [pc, #24]	; (714 <init_eeprom+0x5c4>)
     6fc:	4798      	blx	r3
	}
}
     6fe:	46c0      	nop			; (mov r8, r8)
     700:	46bd      	mov	sp, r7
     702:	bd80      	pop	{r7, pc}
     704:	2000064c 	.word	0x2000064c
     708:	20000574 	.word	0x20000574
     70c:	00017b21 	.word	0x00017b21
     710:	000127e9 	.word	0x000127e9
     714:	00012991 	.word	0x00012991
     718:	000128f5 	.word	0x000128f5
     71c:	20000618 	.word	0x20000618
     720:	20000620 	.word	0x20000620
     724:	00017b57 	.word	0x00017b57
     728:	00018758 	.word	0x00018758

0000072c <config_mobile_no_ee>:

void config_mobile_no_ee(const uint8_t page_loc,const char *mobile_number)
{
     72c:	b580      	push	{r7, lr}
     72e:	b088      	sub	sp, #32
     730:	af00      	add	r7, sp, #0
     732:	0002      	movs	r2, r0
     734:	6039      	str	r1, [r7, #0]
     736:	1dfb      	adds	r3, r7, #7
     738:	701a      	strb	r2, [r3, #0]
	struct mobile_no_struct mobile_no;
	memset(page_data, '\0', sizeof(page_data));
     73a:	4b28      	ldr	r3, [pc, #160]	; (7dc <config_mobile_no_ee+0xb0>)
     73c:	223c      	movs	r2, #60	; 0x3c
     73e:	2100      	movs	r1, #0
     740:	0018      	movs	r0, r3
     742:	4b27      	ldr	r3, [pc, #156]	; (7e0 <config_mobile_no_ee+0xb4>)
     744:	4798      	blx	r3
	eeprom_emulator_read_page(page_loc, page_data);
     746:	4a25      	ldr	r2, [pc, #148]	; (7dc <config_mobile_no_ee+0xb0>)
     748:	1dfb      	adds	r3, r7, #7
     74a:	781b      	ldrb	r3, [r3, #0]
     74c:	0011      	movs	r1, r2
     74e:	0018      	movs	r0, r3
     750:	4b24      	ldr	r3, [pc, #144]	; (7e4 <config_mobile_no_ee+0xb8>)
     752:	4798      	blx	r3
	memcpy(&mobile_no,page_data,sizeof(mobile_no));
     754:	2308      	movs	r3, #8
     756:	18fa      	adds	r2, r7, r3
     758:	4b20      	ldr	r3, [pc, #128]	; (7dc <config_mobile_no_ee+0xb0>)
     75a:	0010      	movs	r0, r2
     75c:	0019      	movs	r1, r3
     75e:	2318      	movs	r3, #24
     760:	001a      	movs	r2, r3
     762:	4b21      	ldr	r3, [pc, #132]	; (7e8 <config_mobile_no_ee+0xbc>)
     764:	4798      	blx	r3
	if (mobile_no.u8tfirst_time_write_ee != 85)
     766:	2308      	movs	r3, #8
     768:	18fb      	adds	r3, r7, r3
     76a:	781b      	ldrb	r3, [r3, #0]
     76c:	2b55      	cmp	r3, #85	; 0x55
     76e:	d031      	beq.n	7d4 <config_mobile_no_ee+0xa8>
	{
		mobile_no.u8tfirst_time_write_ee = 85;
     770:	2308      	movs	r3, #8
     772:	18fb      	adds	r3, r7, r3
     774:	2255      	movs	r2, #85	; 0x55
     776:	701a      	strb	r2, [r3, #0]
		mobile_no.dummy1 = 0;
     778:	2308      	movs	r3, #8
     77a:	18fb      	adds	r3, r7, r3
     77c:	2200      	movs	r2, #0
     77e:	705a      	strb	r2, [r3, #1]
		mobile_no.dummy2 = 0;
     780:	2308      	movs	r3, #8
     782:	18fb      	adds	r3, r7, r3
     784:	2200      	movs	r2, #0
     786:	709a      	strb	r2, [r3, #2]
		mobile_no.dummy3 = 0;
     788:	2308      	movs	r3, #8
     78a:	18fb      	adds	r3, r7, r3
     78c:	2200      	movs	r2, #0
     78e:	70da      	strb	r2, [r3, #3]
		memset(mobile_no.mobile_no_ee, '\0', sizeof(mobile_no.mobile_no_ee));
     790:	2308      	movs	r3, #8
     792:	18fb      	adds	r3, r7, r3
     794:	3304      	adds	r3, #4
     796:	2214      	movs	r2, #20
     798:	2100      	movs	r1, #0
     79a:	0018      	movs	r0, r3
     79c:	4b10      	ldr	r3, [pc, #64]	; (7e0 <config_mobile_no_ee+0xb4>)
     79e:	4798      	blx	r3
		strcpy(mobile_no.mobile_no_ee,mobile_number);
     7a0:	683a      	ldr	r2, [r7, #0]
     7a2:	2308      	movs	r3, #8
     7a4:	18fb      	adds	r3, r7, r3
     7a6:	3304      	adds	r3, #4
     7a8:	0011      	movs	r1, r2
     7aa:	0018      	movs	r0, r3
     7ac:	4b0f      	ldr	r3, [pc, #60]	; (7ec <config_mobile_no_ee+0xc0>)
     7ae:	4798      	blx	r3
		
		memcpy(page_data,&mobile_no,sizeof(mobile_no));
     7b0:	4a0a      	ldr	r2, [pc, #40]	; (7dc <config_mobile_no_ee+0xb0>)
     7b2:	2308      	movs	r3, #8
     7b4:	18fb      	adds	r3, r7, r3
     7b6:	0010      	movs	r0, r2
     7b8:	0019      	movs	r1, r3
     7ba:	2318      	movs	r3, #24
     7bc:	001a      	movs	r2, r3
     7be:	4b0a      	ldr	r3, [pc, #40]	; (7e8 <config_mobile_no_ee+0xbc>)
     7c0:	4798      	blx	r3
		eeprom_emulator_write_page(page_loc, page_data);
     7c2:	4a06      	ldr	r2, [pc, #24]	; (7dc <config_mobile_no_ee+0xb0>)
     7c4:	1dfb      	adds	r3, r7, #7
     7c6:	781b      	ldrb	r3, [r3, #0]
     7c8:	0011      	movs	r1, r2
     7ca:	0018      	movs	r0, r3
     7cc:	4b08      	ldr	r3, [pc, #32]	; (7f0 <config_mobile_no_ee+0xc4>)
     7ce:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     7d0:	4b08      	ldr	r3, [pc, #32]	; (7f4 <config_mobile_no_ee+0xc8>)
     7d2:	4798      	blx	r3
	}
}
     7d4:	46c0      	nop			; (mov r8, r8)
     7d6:	46bd      	mov	sp, r7
     7d8:	b008      	add	sp, #32
     7da:	bd80      	pop	{r7, pc}
     7dc:	20000574 	.word	0x20000574
     7e0:	00017b57 	.word	0x00017b57
     7e4:	000128f5 	.word	0x000128f5
     7e8:	00017b21 	.word	0x00017b21
     7ec:	00017dd7 	.word	0x00017dd7
     7f0:	000127e9 	.word	0x000127e9
     7f4:	00012991 	.word	0x00012991

000007f8 <getNumbers>:


void getNumbers(char *string)
{
     7f8:	b580      	push	{r7, lr}
     7fa:	b08a      	sub	sp, #40	; 0x28
     7fc:	af00      	add	r7, sp, #0
     7fe:	6078      	str	r0, [r7, #4]
	strcpy(string,"");
     800:	687b      	ldr	r3, [r7, #4]
     802:	2200      	movs	r2, #0
     804:	701a      	strb	r2, [r3, #0]
	
	for(uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
     806:	2327      	movs	r3, #39	; 0x27
     808:	18fb      	adds	r3, r7, r3
     80a:	2200      	movs	r2, #0
     80c:	701a      	strb	r2, [r3, #0]
     80e:	e063      	b.n	8d8 <getNumbers+0xe0>
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
     810:	4b37      	ldr	r3, [pc, #220]	; (8f0 <getNumbers+0xf8>)
     812:	223c      	movs	r2, #60	; 0x3c
     814:	2100      	movs	r1, #0
     816:	0018      	movs	r0, r3
     818:	4b36      	ldr	r3, [pc, #216]	; (8f4 <getNumbers+0xfc>)
     81a:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
     81c:	2327      	movs	r3, #39	; 0x27
     81e:	18fb      	adds	r3, r7, r3
     820:	781b      	ldrb	r3, [r3, #0]
     822:	3309      	adds	r3, #9
     824:	b2db      	uxtb	r3, r3
     826:	4a32      	ldr	r2, [pc, #200]	; (8f0 <getNumbers+0xf8>)
     828:	0011      	movs	r1, r2
     82a:	0018      	movs	r0, r3
     82c:	4b32      	ldr	r3, [pc, #200]	; (8f8 <getNumbers+0x100>)
     82e:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
     830:	230c      	movs	r3, #12
     832:	18fa      	adds	r2, r7, r3
     834:	4b2e      	ldr	r3, [pc, #184]	; (8f0 <getNumbers+0xf8>)
     836:	0010      	movs	r0, r2
     838:	0019      	movs	r1, r3
     83a:	2318      	movs	r3, #24
     83c:	001a      	movs	r2, r3
     83e:	4b2f      	ldr	r3, [pc, #188]	; (8fc <getNumbers+0x104>)
     840:	4798      	blx	r3
		if(i==user_count_struct.primaryNumberIndex)
     842:	4b2f      	ldr	r3, [pc, #188]	; (900 <getNumbers+0x108>)
     844:	78db      	ldrb	r3, [r3, #3]
     846:	2227      	movs	r2, #39	; 0x27
     848:	18ba      	adds	r2, r7, r2
     84a:	7812      	ldrb	r2, [r2, #0]
     84c:	429a      	cmp	r2, r3
     84e:	d10f      	bne.n	870 <getNumbers+0x78>
		{
			strcat(string,"P:");
     850:	687b      	ldr	r3, [r7, #4]
     852:	0018      	movs	r0, r3
     854:	4b2b      	ldr	r3, [pc, #172]	; (904 <getNumbers+0x10c>)
     856:	4798      	blx	r3
     858:	0003      	movs	r3, r0
     85a:	001a      	movs	r2, r3
     85c:	687b      	ldr	r3, [r7, #4]
     85e:	189a      	adds	r2, r3, r2
     860:	4b29      	ldr	r3, [pc, #164]	; (908 <getNumbers+0x110>)
     862:	0010      	movs	r0, r2
     864:	0019      	movs	r1, r3
     866:	2303      	movs	r3, #3
     868:	001a      	movs	r2, r3
     86a:	4b24      	ldr	r3, [pc, #144]	; (8fc <getNumbers+0x104>)
     86c:	4798      	blx	r3
     86e:	e015      	b.n	89c <getNumbers+0xa4>
		}
		else if(i==user_count_struct.secondaryNumberIndex)
     870:	4b23      	ldr	r3, [pc, #140]	; (900 <getNumbers+0x108>)
     872:	791b      	ldrb	r3, [r3, #4]
     874:	2227      	movs	r2, #39	; 0x27
     876:	18ba      	adds	r2, r7, r2
     878:	7812      	ldrb	r2, [r2, #0]
     87a:	429a      	cmp	r2, r3
     87c:	d10e      	bne.n	89c <getNumbers+0xa4>
		{
			strcat(string,"S:");
     87e:	687b      	ldr	r3, [r7, #4]
     880:	0018      	movs	r0, r3
     882:	4b20      	ldr	r3, [pc, #128]	; (904 <getNumbers+0x10c>)
     884:	4798      	blx	r3
     886:	0003      	movs	r3, r0
     888:	001a      	movs	r2, r3
     88a:	687b      	ldr	r3, [r7, #4]
     88c:	189a      	adds	r2, r3, r2
     88e:	4b1f      	ldr	r3, [pc, #124]	; (90c <getNumbers+0x114>)
     890:	0010      	movs	r0, r2
     892:	0019      	movs	r1, r3
     894:	2303      	movs	r3, #3
     896:	001a      	movs	r2, r3
     898:	4b18      	ldr	r3, [pc, #96]	; (8fc <getNumbers+0x104>)
     89a:	4798      	blx	r3
		}
		strcat(string,mobile_no.mobile_no_ee);
     89c:	230c      	movs	r3, #12
     89e:	18fb      	adds	r3, r7, r3
     8a0:	1d1a      	adds	r2, r3, #4
     8a2:	687b      	ldr	r3, [r7, #4]
     8a4:	0011      	movs	r1, r2
     8a6:	0018      	movs	r0, r3
     8a8:	4b19      	ldr	r3, [pc, #100]	; (910 <getNumbers+0x118>)
     8aa:	4798      	blx	r3
		strcat(string,"\n");
     8ac:	687b      	ldr	r3, [r7, #4]
     8ae:	0018      	movs	r0, r3
     8b0:	4b14      	ldr	r3, [pc, #80]	; (904 <getNumbers+0x10c>)
     8b2:	4798      	blx	r3
     8b4:	0003      	movs	r3, r0
     8b6:	001a      	movs	r2, r3
     8b8:	687b      	ldr	r3, [r7, #4]
     8ba:	189a      	adds	r2, r3, r2
     8bc:	4b15      	ldr	r3, [pc, #84]	; (914 <getNumbers+0x11c>)
     8be:	0010      	movs	r0, r2
     8c0:	0019      	movs	r1, r3
     8c2:	2302      	movs	r3, #2
     8c4:	001a      	movs	r2, r3
     8c6:	4b0d      	ldr	r3, [pc, #52]	; (8fc <getNumbers+0x104>)
     8c8:	4798      	blx	r3
	for(uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
     8ca:	2327      	movs	r3, #39	; 0x27
     8cc:	18fb      	adds	r3, r7, r3
     8ce:	781a      	ldrb	r2, [r3, #0]
     8d0:	2327      	movs	r3, #39	; 0x27
     8d2:	18fb      	adds	r3, r7, r3
     8d4:	3201      	adds	r2, #1
     8d6:	701a      	strb	r2, [r3, #0]
     8d8:	4b09      	ldr	r3, [pc, #36]	; (900 <getNumbers+0x108>)
     8da:	789b      	ldrb	r3, [r3, #2]
     8dc:	2227      	movs	r2, #39	; 0x27
     8de:	18ba      	adds	r2, r7, r2
     8e0:	7812      	ldrb	r2, [r2, #0]
     8e2:	429a      	cmp	r2, r3
     8e4:	d394      	bcc.n	810 <getNumbers+0x18>
	}
}
     8e6:	46c0      	nop			; (mov r8, r8)
     8e8:	46bd      	mov	sp, r7
     8ea:	b00a      	add	sp, #40	; 0x28
     8ec:	bd80      	pop	{r7, pc}
     8ee:	46c0      	nop			; (mov r8, r8)
     8f0:	20000574 	.word	0x20000574
     8f4:	00017b57 	.word	0x00017b57
     8f8:	000128f5 	.word	0x000128f5
     8fc:	00017b21 	.word	0x00017b21
     900:	20000600 	.word	0x20000600
     904:	00017de7 	.word	0x00017de7
     908:	000187e8 	.word	0x000187e8
     90c:	000187ec 	.word	0x000187ec
     910:	00017da1 	.word	0x00017da1
     914:	000187f0 	.word	0x000187f0

00000918 <getIndexedNumber>:

char *getIndexedNumber(char *IndexNo, uint8_t index)
{
     918:	b580      	push	{r7, lr}
     91a:	b088      	sub	sp, #32
     91c:	af00      	add	r7, sp, #0
     91e:	6078      	str	r0, [r7, #4]
     920:	000a      	movs	r2, r1
     922:	1cfb      	adds	r3, r7, #3
     924:	701a      	strb	r2, [r3, #0]
	strcpy(IndexNo,"");
     926:	687b      	ldr	r3, [r7, #4]
     928:	2200      	movs	r2, #0
     92a:	701a      	strb	r2, [r3, #0]
	if(user_count_struct.current_user_no_count>index)
     92c:	4b15      	ldr	r3, [pc, #84]	; (984 <getIndexedNumber+0x6c>)
     92e:	789b      	ldrb	r3, [r3, #2]
     930:	1cfa      	adds	r2, r7, #3
     932:	7812      	ldrb	r2, [r2, #0]
     934:	429a      	cmp	r2, r3
     936:	d21f      	bcs.n	978 <getIndexedNumber+0x60>
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
     938:	4b13      	ldr	r3, [pc, #76]	; (988 <getIndexedNumber+0x70>)
     93a:	223c      	movs	r2, #60	; 0x3c
     93c:	2100      	movs	r1, #0
     93e:	0018      	movs	r0, r3
     940:	4b12      	ldr	r3, [pc, #72]	; (98c <getIndexedNumber+0x74>)
     942:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+index, page_data);
     944:	1cfb      	adds	r3, r7, #3
     946:	781b      	ldrb	r3, [r3, #0]
     948:	3309      	adds	r3, #9
     94a:	b2db      	uxtb	r3, r3
     94c:	4a0e      	ldr	r2, [pc, #56]	; (988 <getIndexedNumber+0x70>)
     94e:	0011      	movs	r1, r2
     950:	0018      	movs	r0, r3
     952:	4b0f      	ldr	r3, [pc, #60]	; (990 <getIndexedNumber+0x78>)
     954:	4798      	blx	r3
		//eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+index-1, page_data);
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
     956:	2308      	movs	r3, #8
     958:	18fa      	adds	r2, r7, r3
     95a:	4b0b      	ldr	r3, [pc, #44]	; (988 <getIndexedNumber+0x70>)
     95c:	0010      	movs	r0, r2
     95e:	0019      	movs	r1, r3
     960:	2318      	movs	r3, #24
     962:	001a      	movs	r2, r3
     964:	4b0b      	ldr	r3, [pc, #44]	; (994 <getIndexedNumber+0x7c>)
     966:	4798      	blx	r3
		strcat(IndexNo,mobile_no.mobile_no_ee);
     968:	2308      	movs	r3, #8
     96a:	18fb      	adds	r3, r7, r3
     96c:	1d1a      	adds	r2, r3, #4
     96e:	687b      	ldr	r3, [r7, #4]
     970:	0011      	movs	r1, r2
     972:	0018      	movs	r0, r3
     974:	4b08      	ldr	r3, [pc, #32]	; (998 <getIndexedNumber+0x80>)
     976:	4798      	blx	r3
	}
	return IndexNo;
     978:	687b      	ldr	r3, [r7, #4]
}
     97a:	0018      	movs	r0, r3
     97c:	46bd      	mov	sp, r7
     97e:	b008      	add	sp, #32
     980:	bd80      	pop	{r7, pc}
     982:	46c0      	nop			; (mov r8, r8)
     984:	20000600 	.word	0x20000600
     988:	20000574 	.word	0x20000574
     98c:	00017b57 	.word	0x00017b57
     990:	000128f5 	.word	0x000128f5
     994:	00017b21 	.word	0x00017b21
     998:	00017da1 	.word	0x00017da1

0000099c <isPrimaryNumber>:

bool isPrimaryNumber(char *number)
{
     99c:	b580      	push	{r7, lr}
     99e:	b088      	sub	sp, #32
     9a0:	af00      	add	r7, sp, #0
     9a2:	6078      	str	r0, [r7, #4]
	if(user_count_struct.current_user_no_count > 0)
     9a4:	4b14      	ldr	r3, [pc, #80]	; (9f8 <isPrimaryNumber+0x5c>)
     9a6:	789b      	ldrb	r3, [r3, #2]
     9a8:	2b00      	cmp	r3, #0
     9aa:	d020      	beq.n	9ee <isPrimaryNumber+0x52>
	{
		char primaryNumber[20] = {0};
     9ac:	230c      	movs	r3, #12
     9ae:	18fb      	adds	r3, r7, r3
     9b0:	0018      	movs	r0, r3
     9b2:	2314      	movs	r3, #20
     9b4:	001a      	movs	r2, r3
     9b6:	2100      	movs	r1, #0
     9b8:	4b10      	ldr	r3, [pc, #64]	; (9fc <isPrimaryNumber+0x60>)
     9ba:	4798      	blx	r3
		getIndexedNumber(&primaryNumber,user_count_struct.primaryNumberIndex);
     9bc:	4b0e      	ldr	r3, [pc, #56]	; (9f8 <isPrimaryNumber+0x5c>)
     9be:	78da      	ldrb	r2, [r3, #3]
     9c0:	230c      	movs	r3, #12
     9c2:	18fb      	adds	r3, r7, r3
     9c4:	0011      	movs	r1, r2
     9c6:	0018      	movs	r0, r3
     9c8:	4b0d      	ldr	r3, [pc, #52]	; (a00 <isPrimaryNumber+0x64>)
     9ca:	4798      	blx	r3
		if(strstr(number,primaryNumber))
     9cc:	230c      	movs	r3, #12
     9ce:	18fa      	adds	r2, r7, r3
     9d0:	687b      	ldr	r3, [r7, #4]
     9d2:	0011      	movs	r1, r2
     9d4:	0018      	movs	r0, r3
     9d6:	4b0b      	ldr	r3, [pc, #44]	; (a04 <isPrimaryNumber+0x68>)
     9d8:	4798      	blx	r3
     9da:	1e03      	subs	r3, r0, #0
     9dc:	d001      	beq.n	9e2 <isPrimaryNumber+0x46>
		{
			return true;
     9de:	2301      	movs	r3, #1
     9e0:	e006      	b.n	9f0 <isPrimaryNumber+0x54>
		}
		else
		{
			return isAlterNumber(number);
     9e2:	687b      	ldr	r3, [r7, #4]
     9e4:	0018      	movs	r0, r3
     9e6:	4b08      	ldr	r3, [pc, #32]	; (a08 <isPrimaryNumber+0x6c>)
     9e8:	4798      	blx	r3
     9ea:	0003      	movs	r3, r0
     9ec:	e000      	b.n	9f0 <isPrimaryNumber+0x54>
		//else
		//{
		//return isAlterNumber(number);
		//}
	}
	return false;
     9ee:	2300      	movs	r3, #0
}
     9f0:	0018      	movs	r0, r3
     9f2:	46bd      	mov	sp, r7
     9f4:	b008      	add	sp, #32
     9f6:	bd80      	pop	{r7, pc}
     9f8:	20000600 	.word	0x20000600
     9fc:	00017b57 	.word	0x00017b57
     a00:	00000919 	.word	0x00000919
     a04:	00017e17 	.word	0x00017e17
     a08:	00000a0d 	.word	0x00000a0d

00000a0c <isAlterNumber>:

bool isAlterNumber(char *number)
{
     a0c:	b580      	push	{r7, lr}
     a0e:	b082      	sub	sp, #8
     a10:	af00      	add	r7, sp, #0
     a12:	6078      	str	r0, [r7, #4]
	if(user_count_struct.current_user_no_count > 0)
     a14:	4b0b      	ldr	r3, [pc, #44]	; (a44 <isAlterNumber+0x38>)
     a16:	789b      	ldrb	r3, [r3, #2]
     a18:	2b00      	cmp	r3, #0
     a1a:	d00d      	beq.n	a38 <isAlterNumber+0x2c>
	{
		if ((alternateNumber_struct.alterNumberPresent) && (strstr(number, alternateNumber_struct.alternateNumber_ee)))
     a1c:	4b0a      	ldr	r3, [pc, #40]	; (a48 <isAlterNumber+0x3c>)
     a1e:	789b      	ldrb	r3, [r3, #2]
     a20:	2b00      	cmp	r3, #0
     a22:	d009      	beq.n	a38 <isAlterNumber+0x2c>
     a24:	4a09      	ldr	r2, [pc, #36]	; (a4c <isAlterNumber+0x40>)
     a26:	687b      	ldr	r3, [r7, #4]
     a28:	0011      	movs	r1, r2
     a2a:	0018      	movs	r0, r3
     a2c:	4b08      	ldr	r3, [pc, #32]	; (a50 <isAlterNumber+0x44>)
     a2e:	4798      	blx	r3
     a30:	1e03      	subs	r3, r0, #0
     a32:	d001      	beq.n	a38 <isAlterNumber+0x2c>
		{
			return true;
     a34:	2301      	movs	r3, #1
     a36:	e000      	b.n	a3a <isAlterNumber+0x2e>
		}
	}
	return false;
     a38:	2300      	movs	r3, #0
}
     a3a:	0018      	movs	r0, r3
     a3c:	46bd      	mov	sp, r7
     a3e:	b002      	add	sp, #8
     a40:	bd80      	pop	{r7, pc}
     a42:	46c0      	nop			; (mov r8, r8)
     a44:	20000600 	.word	0x20000600
     a48:	20000634 	.word	0x20000634
     a4c:	20000638 	.word	0x20000638
     a50:	00017e17 	.word	0x00017e17

00000a54 <isM2MNumber>:

bool isM2MNumber(char *number)
{
     a54:	b580      	push	{r7, lr}
     a56:	b082      	sub	sp, #8
     a58:	af00      	add	r7, sp, #0
     a5a:	6078      	str	r0, [r7, #4]
	if ((m2m_Numbers_struct.m2mPresent) && strstr(number,m2m_Numbers_struct.m2mNumber_ee))
     a5c:	4b09      	ldr	r3, [pc, #36]	; (a84 <isM2MNumber+0x30>)
     a5e:	785b      	ldrb	r3, [r3, #1]
     a60:	2b00      	cmp	r3, #0
     a62:	d009      	beq.n	a78 <isM2MNumber+0x24>
     a64:	4a08      	ldr	r2, [pc, #32]	; (a88 <isM2MNumber+0x34>)
     a66:	687b      	ldr	r3, [r7, #4]
     a68:	0011      	movs	r1, r2
     a6a:	0018      	movs	r0, r3
     a6c:	4b07      	ldr	r3, [pc, #28]	; (a8c <isM2MNumber+0x38>)
     a6e:	4798      	blx	r3
     a70:	1e03      	subs	r3, r0, #0
     a72:	d001      	beq.n	a78 <isM2MNumber+0x24>
	{
		return true;
     a74:	2301      	movs	r3, #1
     a76:	e000      	b.n	a7a <isM2MNumber+0x26>
	}
	return false;
     a78:	2300      	movs	r3, #0
}
     a7a:	0018      	movs	r0, r3
     a7c:	46bd      	mov	sp, r7
     a7e:	b002      	add	sp, #8
     a80:	bd80      	pop	{r7, pc}
     a82:	46c0      	nop			; (mov r8, r8)
     a84:	20000544 	.word	0x20000544
     a88:	2000054c 	.word	0x2000054c
     a8c:	00017e17 	.word	0x00017e17

00000a90 <isM2MRemoteNumber>:

bool isM2MRemoteNumber(char *number)
{
     a90:	b580      	push	{r7, lr}
     a92:	b082      	sub	sp, #8
     a94:	af00      	add	r7, sp, #0
     a96:	6078      	str	r0, [r7, #4]
	if ((m2m_Numbers_struct.m2mRemotePresent) && strstr(number,m2m_Numbers_struct.m2mremoteNumber_ee))
     a98:	4b09      	ldr	r3, [pc, #36]	; (ac0 <isM2MRemoteNumber+0x30>)
     a9a:	78db      	ldrb	r3, [r3, #3]
     a9c:	2b00      	cmp	r3, #0
     a9e:	d009      	beq.n	ab4 <isM2MRemoteNumber+0x24>
     aa0:	4a08      	ldr	r2, [pc, #32]	; (ac4 <isM2MRemoteNumber+0x34>)
     aa2:	687b      	ldr	r3, [r7, #4]
     aa4:	0011      	movs	r1, r2
     aa6:	0018      	movs	r0, r3
     aa8:	4b07      	ldr	r3, [pc, #28]	; (ac8 <isM2MRemoteNumber+0x38>)
     aaa:	4798      	blx	r3
     aac:	1e03      	subs	r3, r0, #0
     aae:	d001      	beq.n	ab4 <isM2MRemoteNumber+0x24>
	{
		return true;
     ab0:	2301      	movs	r3, #1
     ab2:	e000      	b.n	ab6 <isM2MRemoteNumber+0x26>
	}
	return false;
     ab4:	2300      	movs	r3, #0
}
     ab6:	0018      	movs	r0, r3
     ab8:	46bd      	mov	sp, r7
     aba:	b002      	add	sp, #8
     abc:	bd80      	pop	{r7, pc}
     abe:	46c0      	nop			; (mov r8, r8)
     ac0:	20000544 	.word	0x20000544
     ac4:	20000560 	.word	0x20000560
     ac8:	00017e17 	.word	0x00017e17

00000acc <getM2MNumber>:

char *getM2MNumber(char *m2mNo)
{
     acc:	b580      	push	{r7, lr}
     ace:	b082      	sub	sp, #8
     ad0:	af00      	add	r7, sp, #0
     ad2:	6078      	str	r0, [r7, #4]
	if (m2m_Numbers_struct.m2mPresent)
     ad4:	4b09      	ldr	r3, [pc, #36]	; (afc <getM2MNumber+0x30>)
     ad6:	785b      	ldrb	r3, [r3, #1]
     ad8:	2b00      	cmp	r3, #0
     ada:	d006      	beq.n	aea <getM2MNumber+0x1e>
	{
		//strstr(m2mNo,m2m_Numbers_struct.m2mNumber_ee);
		strcpy(m2mNo,m2m_Numbers_struct.m2mNumber_ee);
     adc:	4a08      	ldr	r2, [pc, #32]	; (b00 <getM2MNumber+0x34>)
     ade:	687b      	ldr	r3, [r7, #4]
     ae0:	0011      	movs	r1, r2
     ae2:	0018      	movs	r0, r3
     ae4:	4b07      	ldr	r3, [pc, #28]	; (b04 <getM2MNumber+0x38>)
     ae6:	4798      	blx	r3
     ae8:	e002      	b.n	af0 <getM2MNumber+0x24>
	}
	else
	{
		strcpy(m2mNo,"");
     aea:	687b      	ldr	r3, [r7, #4]
     aec:	2200      	movs	r2, #0
     aee:	701a      	strb	r2, [r3, #0]
	}
	return m2mNo;
     af0:	687b      	ldr	r3, [r7, #4]
}
     af2:	0018      	movs	r0, r3
     af4:	46bd      	mov	sp, r7
     af6:	b002      	add	sp, #8
     af8:	bd80      	pop	{r7, pc}
     afa:	46c0      	nop			; (mov r8, r8)
     afc:	20000544 	.word	0x20000544
     b00:	2000054c 	.word	0x2000054c
     b04:	00017dd7 	.word	0x00017dd7

00000b08 <getM2MRemoteNumber>:

char *getM2MRemoteNumber(char *m2mNoRemotNo)
{
     b08:	b580      	push	{r7, lr}
     b0a:	b082      	sub	sp, #8
     b0c:	af00      	add	r7, sp, #0
     b0e:	6078      	str	r0, [r7, #4]
	if (m2m_Numbers_struct.m2mRemotePresent)
     b10:	4b09      	ldr	r3, [pc, #36]	; (b38 <getM2MRemoteNumber+0x30>)
     b12:	78db      	ldrb	r3, [r3, #3]
     b14:	2b00      	cmp	r3, #0
     b16:	d006      	beq.n	b26 <getM2MRemoteNumber+0x1e>
	{
		strcpy(m2mNoRemotNo,m2m_Numbers_struct.m2mremoteNumber_ee);
     b18:	4a08      	ldr	r2, [pc, #32]	; (b3c <getM2MRemoteNumber+0x34>)
     b1a:	687b      	ldr	r3, [r7, #4]
     b1c:	0011      	movs	r1, r2
     b1e:	0018      	movs	r0, r3
     b20:	4b07      	ldr	r3, [pc, #28]	; (b40 <getM2MRemoteNumber+0x38>)
     b22:	4798      	blx	r3
     b24:	e002      	b.n	b2c <getM2MRemoteNumber+0x24>
	}
	else
	{
		strcpy(m2mNoRemotNo,"");
     b26:	687b      	ldr	r3, [r7, #4]
     b28:	2200      	movs	r2, #0
     b2a:	701a      	strb	r2, [r3, #0]
	}
	return m2mNoRemotNo;
     b2c:	687b      	ldr	r3, [r7, #4]
}
     b2e:	0018      	movs	r0, r3
     b30:	46bd      	mov	sp, r7
     b32:	b002      	add	sp, #8
     b34:	bd80      	pop	{r7, pc}
     b36:	46c0      	nop			; (mov r8, r8)
     b38:	20000544 	.word	0x20000544
     b3c:	20000560 	.word	0x20000560
     b40:	00017dd7 	.word	0x00017dd7

00000b44 <setM2MVerify>:

void setM2MVerify(bool flag)
{
     b44:	b580      	push	{r7, lr}
     b46:	b082      	sub	sp, #8
     b48:	af00      	add	r7, sp, #0
     b4a:	0002      	movs	r2, r0
     b4c:	1dfb      	adds	r3, r7, #7
     b4e:	701a      	strb	r2, [r3, #0]
	m2m_Numbers_struct.m2mVerified = (uint8_t)flag;
     b50:	1dfb      	adds	r3, r7, #7
     b52:	781a      	ldrb	r2, [r3, #0]
     b54:	4b0a      	ldr	r3, [pc, #40]	; (b80 <setM2MVerify+0x3c>)
     b56:	709a      	strb	r2, [r3, #2]
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
     b58:	4a0a      	ldr	r2, [pc, #40]	; (b84 <setM2MVerify+0x40>)
     b5a:	4b09      	ldr	r3, [pc, #36]	; (b80 <setM2MVerify+0x3c>)
     b5c:	0010      	movs	r0, r2
     b5e:	0019      	movs	r1, r3
     b60:	2330      	movs	r3, #48	; 0x30
     b62:	001a      	movs	r2, r3
     b64:	4b08      	ldr	r3, [pc, #32]	; (b88 <setM2MVerify+0x44>)
     b66:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
     b68:	4b06      	ldr	r3, [pc, #24]	; (b84 <setM2MVerify+0x40>)
     b6a:	0019      	movs	r1, r3
     b6c:	2019      	movs	r0, #25
     b6e:	4b07      	ldr	r3, [pc, #28]	; (b8c <setM2MVerify+0x48>)
     b70:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     b72:	4b07      	ldr	r3, [pc, #28]	; (b90 <setM2MVerify+0x4c>)
     b74:	4798      	blx	r3
}
     b76:	46c0      	nop			; (mov r8, r8)
     b78:	46bd      	mov	sp, r7
     b7a:	b002      	add	sp, #8
     b7c:	bd80      	pop	{r7, pc}
     b7e:	46c0      	nop			; (mov r8, r8)
     b80:	20000544 	.word	0x20000544
     b84:	20000574 	.word	0x20000574
     b88:	00017b21 	.word	0x00017b21
     b8c:	000127e9 	.word	0x000127e9
     b90:	00012991 	.word	0x00012991

00000b94 <setM2MRemoteVerified>:

void setM2MRemoteVerified(bool flag)
{
     b94:	b580      	push	{r7, lr}
     b96:	b082      	sub	sp, #8
     b98:	af00      	add	r7, sp, #0
     b9a:	0002      	movs	r2, r0
     b9c:	1dfb      	adds	r3, r7, #7
     b9e:	701a      	strb	r2, [r3, #0]
	m2m_Numbers_struct.m2mRemoteVerified = (uint8_t)flag;
     ba0:	1dfb      	adds	r3, r7, #7
     ba2:	781a      	ldrb	r2, [r3, #0]
     ba4:	4b0a      	ldr	r3, [pc, #40]	; (bd0 <setM2MRemoteVerified+0x3c>)
     ba6:	711a      	strb	r2, [r3, #4]
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
     ba8:	4a0a      	ldr	r2, [pc, #40]	; (bd4 <setM2MRemoteVerified+0x40>)
     baa:	4b09      	ldr	r3, [pc, #36]	; (bd0 <setM2MRemoteVerified+0x3c>)
     bac:	0010      	movs	r0, r2
     bae:	0019      	movs	r1, r3
     bb0:	2330      	movs	r3, #48	; 0x30
     bb2:	001a      	movs	r2, r3
     bb4:	4b08      	ldr	r3, [pc, #32]	; (bd8 <setM2MRemoteVerified+0x44>)
     bb6:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
     bb8:	4b06      	ldr	r3, [pc, #24]	; (bd4 <setM2MRemoteVerified+0x40>)
     bba:	0019      	movs	r1, r3
     bbc:	2019      	movs	r0, #25
     bbe:	4b07      	ldr	r3, [pc, #28]	; (bdc <setM2MRemoteVerified+0x48>)
     bc0:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     bc2:	4b07      	ldr	r3, [pc, #28]	; (be0 <setM2MRemoteVerified+0x4c>)
     bc4:	4798      	blx	r3
}
     bc6:	46c0      	nop			; (mov r8, r8)
     bc8:	46bd      	mov	sp, r7
     bca:	b002      	add	sp, #8
     bcc:	bd80      	pop	{r7, pc}
     bce:	46c0      	nop			; (mov r8, r8)
     bd0:	20000544 	.word	0x20000544
     bd4:	20000574 	.word	0x20000574
     bd8:	00017b21 	.word	0x00017b21
     bdc:	000127e9 	.word	0x000127e9
     be0:	00012991 	.word	0x00012991

00000be4 <saveM2MSettings>:

void saveM2MSettings(bool flag)
{
     be4:	b580      	push	{r7, lr}
     be6:	b082      	sub	sp, #8
     be8:	af00      	add	r7, sp, #0
     bea:	0002      	movs	r2, r0
     bec:	1dfb      	adds	r3, r7, #7
     bee:	701a      	strb	r2, [r3, #0]
	m2m_Numbers_struct.m2mSetting = (uint8_t)flag;
     bf0:	1dfb      	adds	r3, r7, #7
     bf2:	781a      	ldrb	r2, [r3, #0]
     bf4:	4b0f      	ldr	r3, [pc, #60]	; (c34 <saveM2MSettings+0x50>)
     bf6:	715a      	strb	r2, [r3, #5]
	if(!flag)					// m2m turned off
     bf8:	1dfb      	adds	r3, r7, #7
     bfa:	781b      	ldrb	r3, [r3, #0]
     bfc:	2201      	movs	r2, #1
     bfe:	4053      	eors	r3, r2
     c00:	b2db      	uxtb	r3, r3
     c02:	2b00      	cmp	r3, #0
     c04:	d002      	beq.n	c0c <saveM2MSettings+0x28>
	{
		m2m_Numbers_struct.m2mRemoteVerified=false;
     c06:	4b0b      	ldr	r3, [pc, #44]	; (c34 <saveM2MSettings+0x50>)
     c08:	2200      	movs	r2, #0
     c0a:	711a      	strb	r2, [r3, #4]
	}
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
     c0c:	4a0a      	ldr	r2, [pc, #40]	; (c38 <saveM2MSettings+0x54>)
     c0e:	4b09      	ldr	r3, [pc, #36]	; (c34 <saveM2MSettings+0x50>)
     c10:	0010      	movs	r0, r2
     c12:	0019      	movs	r1, r3
     c14:	2330      	movs	r3, #48	; 0x30
     c16:	001a      	movs	r2, r3
     c18:	4b08      	ldr	r3, [pc, #32]	; (c3c <saveM2MSettings+0x58>)
     c1a:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
     c1c:	4b06      	ldr	r3, [pc, #24]	; (c38 <saveM2MSettings+0x54>)
     c1e:	0019      	movs	r1, r3
     c20:	2019      	movs	r0, #25
     c22:	4b07      	ldr	r3, [pc, #28]	; (c40 <saveM2MSettings+0x5c>)
     c24:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     c26:	4b07      	ldr	r3, [pc, #28]	; (c44 <saveM2MSettings+0x60>)
     c28:	4798      	blx	r3
}
     c2a:	46c0      	nop			; (mov r8, r8)
     c2c:	46bd      	mov	sp, r7
     c2e:	b002      	add	sp, #8
     c30:	bd80      	pop	{r7, pc}
     c32:	46c0      	nop			; (mov r8, r8)
     c34:	20000544 	.word	0x20000544
     c38:	20000574 	.word	0x20000574
     c3c:	00017b21 	.word	0x00017b21
     c40:	000127e9 	.word	0x000127e9
     c44:	00012991 	.word	0x00012991

00000c48 <addM2MNumber>:

void addM2MNumber(char *no)
{
     c48:	b580      	push	{r7, lr}
     c4a:	b082      	sub	sp, #8
     c4c:	af00      	add	r7, sp, #0
     c4e:	6078      	str	r0, [r7, #4]
	m2m_Numbers_struct.m2mPresent = true;
     c50:	4b0f      	ldr	r3, [pc, #60]	; (c90 <addM2MNumber+0x48>)
     c52:	2201      	movs	r2, #1
     c54:	705a      	strb	r2, [r3, #1]
	strcpy(m2m_Numbers_struct.m2mNumber_ee,no);
     c56:	687a      	ldr	r2, [r7, #4]
     c58:	4b0e      	ldr	r3, [pc, #56]	; (c94 <addM2MNumber+0x4c>)
     c5a:	0011      	movs	r1, r2
     c5c:	0018      	movs	r0, r3
     c5e:	4b0e      	ldr	r3, [pc, #56]	; (c98 <addM2MNumber+0x50>)
     c60:	4798      	blx	r3
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
     c62:	4a0e      	ldr	r2, [pc, #56]	; (c9c <addM2MNumber+0x54>)
     c64:	4b0a      	ldr	r3, [pc, #40]	; (c90 <addM2MNumber+0x48>)
     c66:	0010      	movs	r0, r2
     c68:	0019      	movs	r1, r3
     c6a:	2330      	movs	r3, #48	; 0x30
     c6c:	001a      	movs	r2, r3
     c6e:	4b0c      	ldr	r3, [pc, #48]	; (ca0 <addM2MNumber+0x58>)
     c70:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
     c72:	4b0a      	ldr	r3, [pc, #40]	; (c9c <addM2MNumber+0x54>)
     c74:	0019      	movs	r1, r3
     c76:	2019      	movs	r0, #25
     c78:	4b0a      	ldr	r3, [pc, #40]	; (ca4 <addM2MNumber+0x5c>)
     c7a:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     c7c:	4b0a      	ldr	r3, [pc, #40]	; (ca8 <addM2MNumber+0x60>)
     c7e:	4798      	blx	r3
	setM2MVerify(false);
     c80:	2000      	movs	r0, #0
     c82:	4b0a      	ldr	r3, [pc, #40]	; (cac <addM2MNumber+0x64>)
     c84:	4798      	blx	r3
}
     c86:	46c0      	nop			; (mov r8, r8)
     c88:	46bd      	mov	sp, r7
     c8a:	b002      	add	sp, #8
     c8c:	bd80      	pop	{r7, pc}
     c8e:	46c0      	nop			; (mov r8, r8)
     c90:	20000544 	.word	0x20000544
     c94:	2000054c 	.word	0x2000054c
     c98:	00017dd7 	.word	0x00017dd7
     c9c:	20000574 	.word	0x20000574
     ca0:	00017b21 	.word	0x00017b21
     ca4:	000127e9 	.word	0x000127e9
     ca8:	00012991 	.word	0x00012991
     cac:	00000b45 	.word	0x00000b45

00000cb0 <addM2MRemoteNumber>:

void addM2MRemoteNumber(char *no)
{
     cb0:	b580      	push	{r7, lr}
     cb2:	b082      	sub	sp, #8
     cb4:	af00      	add	r7, sp, #0
     cb6:	6078      	str	r0, [r7, #4]
	m2m_Numbers_struct.m2mRemotePresent = true;
     cb8:	4b10      	ldr	r3, [pc, #64]	; (cfc <addM2MRemoteNumber+0x4c>)
     cba:	2201      	movs	r2, #1
     cbc:	70da      	strb	r2, [r3, #3]
	strcpy(m2m_Numbers_struct.m2mremoteNumber_ee,no);
     cbe:	687a      	ldr	r2, [r7, #4]
     cc0:	4b0f      	ldr	r3, [pc, #60]	; (d00 <addM2MRemoteNumber+0x50>)
     cc2:	0011      	movs	r1, r2
     cc4:	0018      	movs	r0, r3
     cc6:	4b0f      	ldr	r3, [pc, #60]	; (d04 <addM2MRemoteNumber+0x54>)
     cc8:	4798      	blx	r3
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
     cca:	4a0f      	ldr	r2, [pc, #60]	; (d08 <addM2MRemoteNumber+0x58>)
     ccc:	4b0b      	ldr	r3, [pc, #44]	; (cfc <addM2MRemoteNumber+0x4c>)
     cce:	0010      	movs	r0, r2
     cd0:	0019      	movs	r1, r3
     cd2:	2330      	movs	r3, #48	; 0x30
     cd4:	001a      	movs	r2, r3
     cd6:	4b0d      	ldr	r3, [pc, #52]	; (d0c <addM2MRemoteNumber+0x5c>)
     cd8:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
     cda:	4b0b      	ldr	r3, [pc, #44]	; (d08 <addM2MRemoteNumber+0x58>)
     cdc:	0019      	movs	r1, r3
     cde:	2019      	movs	r0, #25
     ce0:	4b0b      	ldr	r3, [pc, #44]	; (d10 <addM2MRemoteNumber+0x60>)
     ce2:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     ce4:	4b0b      	ldr	r3, [pc, #44]	; (d14 <addM2MRemoteNumber+0x64>)
     ce6:	4798      	blx	r3
	setM2MRemoteVerified(false);
     ce8:	2000      	movs	r0, #0
     cea:	4b0b      	ldr	r3, [pc, #44]	; (d18 <addM2MRemoteNumber+0x68>)
     cec:	4798      	blx	r3
	saveM2MSettings(false);
     cee:	2000      	movs	r0, #0
     cf0:	4b0a      	ldr	r3, [pc, #40]	; (d1c <addM2MRemoteNumber+0x6c>)
     cf2:	4798      	blx	r3
}
     cf4:	46c0      	nop			; (mov r8, r8)
     cf6:	46bd      	mov	sp, r7
     cf8:	b002      	add	sp, #8
     cfa:	bd80      	pop	{r7, pc}
     cfc:	20000544 	.word	0x20000544
     d00:	20000560 	.word	0x20000560
     d04:	00017dd7 	.word	0x00017dd7
     d08:	20000574 	.word	0x20000574
     d0c:	00017b21 	.word	0x00017b21
     d10:	000127e9 	.word	0x000127e9
     d14:	00012991 	.word	0x00012991
     d18:	00000b95 	.word	0x00000b95
     d1c:	00000be5 	.word	0x00000be5

00000d20 <getActiveNumber>:

char *getActiveNumber(char *ActiveNo)
{
     d20:	b580      	push	{r7, lr}
     d22:	b08e      	sub	sp, #56	; 0x38
     d24:	af00      	add	r7, sp, #0
     d26:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count > 0)
     d28:	4b28      	ldr	r3, [pc, #160]	; (dcc <getActiveNumber+0xac>)
     d2a:	789b      	ldrb	r3, [r3, #2]
     d2c:	2b00      	cmp	r3, #0
     d2e:	d02b      	beq.n	d88 <getActiveNumber+0x68>
	{
		if ((alternateNumber_struct.alterNumberSetting))
     d30:	4b27      	ldr	r3, [pc, #156]	; (dd0 <getActiveNumber+0xb0>)
     d32:	785b      	ldrb	r3, [r3, #1]
     d34:	2b00      	cmp	r3, #0
     d36:	d006      	beq.n	d46 <getActiveNumber+0x26>
		{
			strcpy(ActiveNo,alternateNumber_struct.alternateNumber_ee);
     d38:	4a26      	ldr	r2, [pc, #152]	; (dd4 <getActiveNumber+0xb4>)
     d3a:	687b      	ldr	r3, [r7, #4]
     d3c:	0011      	movs	r1, r2
     d3e:	0018      	movs	r0, r3
     d40:	4b25      	ldr	r3, [pc, #148]	; (dd8 <getActiveNumber+0xb8>)
     d42:	4798      	blx	r3
     d44:	e03c      	b.n	dc0 <getActiveNumber+0xa0>
		}
		else
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
     d46:	4b25      	ldr	r3, [pc, #148]	; (ddc <getActiveNumber+0xbc>)
     d48:	223c      	movs	r2, #60	; 0x3c
     d4a:	2100      	movs	r1, #0
     d4c:	0018      	movs	r0, r3
     d4e:	4b24      	ldr	r3, [pc, #144]	; (de0 <getActiveNumber+0xc0>)
     d50:	4798      	blx	r3
			eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+user_count_struct.primaryNumberIndex, page_data);
     d52:	4b1e      	ldr	r3, [pc, #120]	; (dcc <getActiveNumber+0xac>)
     d54:	78db      	ldrb	r3, [r3, #3]
     d56:	3309      	adds	r3, #9
     d58:	b2db      	uxtb	r3, r3
     d5a:	4a20      	ldr	r2, [pc, #128]	; (ddc <getActiveNumber+0xbc>)
     d5c:	0011      	movs	r1, r2
     d5e:	0018      	movs	r0, r3
     d60:	4b20      	ldr	r3, [pc, #128]	; (de4 <getActiveNumber+0xc4>)
     d62:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
     d64:	2320      	movs	r3, #32
     d66:	18fa      	adds	r2, r7, r3
     d68:	4b1c      	ldr	r3, [pc, #112]	; (ddc <getActiveNumber+0xbc>)
     d6a:	0010      	movs	r0, r2
     d6c:	0019      	movs	r1, r3
     d6e:	2318      	movs	r3, #24
     d70:	001a      	movs	r2, r3
     d72:	4b1d      	ldr	r3, [pc, #116]	; (de8 <getActiveNumber+0xc8>)
     d74:	4798      	blx	r3
			strcpy(ActiveNo,mobile_no.mobile_no_ee);
     d76:	2320      	movs	r3, #32
     d78:	18fb      	adds	r3, r7, r3
     d7a:	1d1a      	adds	r2, r3, #4
     d7c:	687b      	ldr	r3, [r7, #4]
     d7e:	0011      	movs	r1, r2
     d80:	0018      	movs	r0, r3
     d82:	4b15      	ldr	r3, [pc, #84]	; (dd8 <getActiveNumber+0xb8>)
     d84:	4798      	blx	r3
     d86:	e01b      	b.n	dc0 <getActiveNumber+0xa0>
		}
	}
	else																					// no effect of this portion as registerEvent checks for numbercount is > 0
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
     d88:	4b14      	ldr	r3, [pc, #80]	; (ddc <getActiveNumber+0xbc>)
     d8a:	223c      	movs	r2, #60	; 0x3c
     d8c:	2100      	movs	r1, #0
     d8e:	0018      	movs	r0, r3
     d90:	4b13      	ldr	r3, [pc, #76]	; (de0 <getActiveNumber+0xc0>)
     d92:	4798      	blx	r3
		eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE, page_data);
     d94:	4b11      	ldr	r3, [pc, #68]	; (ddc <getActiveNumber+0xbc>)
     d96:	0019      	movs	r1, r3
     d98:	2003      	movs	r0, #3
     d9a:	4b12      	ldr	r3, [pc, #72]	; (de4 <getActiveNumber+0xc4>)
     d9c:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
     d9e:	2308      	movs	r3, #8
     da0:	18fa      	adds	r2, r7, r3
     da2:	4b0e      	ldr	r3, [pc, #56]	; (ddc <getActiveNumber+0xbc>)
     da4:	0010      	movs	r0, r2
     da6:	0019      	movs	r1, r3
     da8:	2318      	movs	r3, #24
     daa:	001a      	movs	r2, r3
     dac:	4b0e      	ldr	r3, [pc, #56]	; (de8 <getActiveNumber+0xc8>)
     dae:	4798      	blx	r3
		strcpy(ActiveNo,mobile_no.mobile_no_ee);
     db0:	2308      	movs	r3, #8
     db2:	18fb      	adds	r3, r7, r3
     db4:	1d1a      	adds	r2, r3, #4
     db6:	687b      	ldr	r3, [r7, #4]
     db8:	0011      	movs	r1, r2
     dba:	0018      	movs	r0, r3
     dbc:	4b06      	ldr	r3, [pc, #24]	; (dd8 <getActiveNumber+0xb8>)
     dbe:	4798      	blx	r3
	}
	
	return ActiveNo;
     dc0:	687b      	ldr	r3, [r7, #4]
}
     dc2:	0018      	movs	r0, r3
     dc4:	46bd      	mov	sp, r7
     dc6:	b00e      	add	sp, #56	; 0x38
     dc8:	bd80      	pop	{r7, pc}
     dca:	46c0      	nop			; (mov r8, r8)
     dcc:	20000600 	.word	0x20000600
     dd0:	20000634 	.word	0x20000634
     dd4:	20000638 	.word	0x20000638
     dd8:	00017dd7 	.word	0x00017dd7
     ddc:	20000574 	.word	0x20000574
     de0:	00017b57 	.word	0x00017b57
     de4:	000128f5 	.word	0x000128f5
     de8:	00017b21 	.word	0x00017b21

00000dec <checkExists>:
uint8_t checkExists(char *number)
{
     dec:	b580      	push	{r7, lr}
     dee:	b08a      	sub	sp, #40	; 0x28
     df0:	af00      	add	r7, sp, #0
     df2:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count > 0)
     df4:	4b33      	ldr	r3, [pc, #204]	; (ec4 <checkExists+0xd8>)
     df6:	789b      	ldrb	r3, [r3, #2]
     df8:	2b00      	cmp	r3, #0
     dfa:	d039      	beq.n	e70 <checkExists+0x84>
		//if(isPrimaryNumber(number))
		//{
		//return 0;
		//}
		
		for (uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
     dfc:	2327      	movs	r3, #39	; 0x27
     dfe:	18fb      	adds	r3, r7, r3
     e00:	2200      	movs	r2, #0
     e02:	701a      	strb	r2, [r3, #0]
     e04:	e02d      	b.n	e62 <checkExists+0x76>
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
     e06:	4b30      	ldr	r3, [pc, #192]	; (ec8 <checkExists+0xdc>)
     e08:	223c      	movs	r2, #60	; 0x3c
     e0a:	2100      	movs	r1, #0
     e0c:	0018      	movs	r0, r3
     e0e:	4b2f      	ldr	r3, [pc, #188]	; (ecc <checkExists+0xe0>)
     e10:	4798      	blx	r3
			eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
     e12:	2327      	movs	r3, #39	; 0x27
     e14:	18fb      	adds	r3, r7, r3
     e16:	781b      	ldrb	r3, [r3, #0]
     e18:	3309      	adds	r3, #9
     e1a:	b2db      	uxtb	r3, r3
     e1c:	4a2a      	ldr	r2, [pc, #168]	; (ec8 <checkExists+0xdc>)
     e1e:	0011      	movs	r1, r2
     e20:	0018      	movs	r0, r3
     e22:	4b2b      	ldr	r3, [pc, #172]	; (ed0 <checkExists+0xe4>)
     e24:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
     e26:	230c      	movs	r3, #12
     e28:	18fa      	adds	r2, r7, r3
     e2a:	4b27      	ldr	r3, [pc, #156]	; (ec8 <checkExists+0xdc>)
     e2c:	0010      	movs	r0, r2
     e2e:	0019      	movs	r1, r3
     e30:	2318      	movs	r3, #24
     e32:	001a      	movs	r2, r3
     e34:	4b27      	ldr	r3, [pc, #156]	; (ed4 <checkExists+0xe8>)
     e36:	4798      	blx	r3
			if (strstr(number,mobile_no.mobile_no_ee))
     e38:	230c      	movs	r3, #12
     e3a:	18fb      	adds	r3, r7, r3
     e3c:	1d1a      	adds	r2, r3, #4
     e3e:	687b      	ldr	r3, [r7, #4]
     e40:	0011      	movs	r1, r2
     e42:	0018      	movs	r0, r3
     e44:	4b24      	ldr	r3, [pc, #144]	; (ed8 <checkExists+0xec>)
     e46:	4798      	blx	r3
     e48:	1e03      	subs	r3, r0, #0
     e4a:	d003      	beq.n	e54 <checkExists+0x68>
			{
				return i;
     e4c:	2327      	movs	r3, #39	; 0x27
     e4e:	18fb      	adds	r3, r7, r3
     e50:	781b      	ldrb	r3, [r3, #0]
     e52:	e032      	b.n	eba <checkExists+0xce>
		for (uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
     e54:	2327      	movs	r3, #39	; 0x27
     e56:	18fb      	adds	r3, r7, r3
     e58:	781a      	ldrb	r2, [r3, #0]
     e5a:	2327      	movs	r3, #39	; 0x27
     e5c:	18fb      	adds	r3, r7, r3
     e5e:	3201      	adds	r2, #1
     e60:	701a      	strb	r2, [r3, #0]
     e62:	4b18      	ldr	r3, [pc, #96]	; (ec4 <checkExists+0xd8>)
     e64:	789b      	ldrb	r3, [r3, #2]
     e66:	2227      	movs	r2, #39	; 0x27
     e68:	18ba      	adds	r2, r7, r2
     e6a:	7812      	ldrb	r2, [r2, #0]
     e6c:	429a      	cmp	r2, r3
     e6e:	d3ca      	bcc.n	e06 <checkExists+0x1a>
			}
		}
	}

	if(isAlterNumber(number))
     e70:	687b      	ldr	r3, [r7, #4]
     e72:	0018      	movs	r0, r3
     e74:	4b19      	ldr	r3, [pc, #100]	; (edc <checkExists+0xf0>)
     e76:	4798      	blx	r3
     e78:	1e03      	subs	r3, r0, #0
     e7a:	d001      	beq.n	e80 <checkExists+0x94>
	{
		return 0xFD;
     e7c:	23fd      	movs	r3, #253	; 0xfd
     e7e:	e01c      	b.n	eba <checkExists+0xce>
	}

	if((m2m_Numbers_struct.m2mVerified) && isM2MNumber(number))
     e80:	4b17      	ldr	r3, [pc, #92]	; (ee0 <checkExists+0xf4>)
     e82:	789b      	ldrb	r3, [r3, #2]
     e84:	2b00      	cmp	r3, #0
     e86:	d007      	beq.n	e98 <checkExists+0xac>
     e88:	687b      	ldr	r3, [r7, #4]
     e8a:	0018      	movs	r0, r3
     e8c:	4b15      	ldr	r3, [pc, #84]	; (ee4 <checkExists+0xf8>)
     e8e:	4798      	blx	r3
     e90:	1e03      	subs	r3, r0, #0
     e92:	d001      	beq.n	e98 <checkExists+0xac>
	{
		return 0xFE;
     e94:	23fe      	movs	r3, #254	; 0xfe
     e96:	e010      	b.n	eba <checkExists+0xce>
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
     e98:	4b13      	ldr	r3, [pc, #76]	; (ee8 <checkExists+0xfc>)
     e9a:	78db      	ldrb	r3, [r3, #3]
     e9c:	2b00      	cmp	r3, #0
     e9e:	d00b      	beq.n	eb8 <checkExists+0xcc>
	{
		if ((m2m_Numbers_struct.m2mRemoteVerified) && isM2MRemoteNumber(number))
     ea0:	4b0f      	ldr	r3, [pc, #60]	; (ee0 <checkExists+0xf4>)
     ea2:	791b      	ldrb	r3, [r3, #4]
     ea4:	2b00      	cmp	r3, #0
     ea6:	d007      	beq.n	eb8 <checkExists+0xcc>
     ea8:	687b      	ldr	r3, [r7, #4]
     eaa:	0018      	movs	r0, r3
     eac:	4b0f      	ldr	r3, [pc, #60]	; (eec <checkExists+0x100>)
     eae:	4798      	blx	r3
     eb0:	1e03      	subs	r3, r0, #0
     eb2:	d001      	beq.n	eb8 <checkExists+0xcc>
		{
			return 0xFE;
     eb4:	23fe      	movs	r3, #254	; 0xfe
     eb6:	e000      	b.n	eba <checkExists+0xce>
		}
	}
	return 0xFF;
     eb8:	23ff      	movs	r3, #255	; 0xff
}
     eba:	0018      	movs	r0, r3
     ebc:	46bd      	mov	sp, r7
     ebe:	b00a      	add	sp, #40	; 0x28
     ec0:	bd80      	pop	{r7, pc}
     ec2:	46c0      	nop			; (mov r8, r8)
     ec4:	20000600 	.word	0x20000600
     ec8:	20000574 	.word	0x20000574
     ecc:	00017b57 	.word	0x00017b57
     ed0:	000128f5 	.word	0x000128f5
     ed4:	00017b21 	.word	0x00017b21
     ed8:	00017e17 	.word	0x00017e17
     edc:	00000a0d 	.word	0x00000a0d
     ee0:	20000544 	.word	0x20000544
     ee4:	00000a55 	.word	0x00000a55
     ee8:	20000618 	.word	0x20000618
     eec:	00000a91 	.word	0x00000a91

00000ef0 <addNumber>:

bool addNumber(char *number)
{
     ef0:	b580      	push	{r7, lr}
     ef2:	b088      	sub	sp, #32
     ef4:	af00      	add	r7, sp, #0
     ef6:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count == user_count_struct.total_user_no_count)
     ef8:	4b33      	ldr	r3, [pc, #204]	; (fc8 <addNumber+0xd8>)
     efa:	789a      	ldrb	r2, [r3, #2]
     efc:	4b32      	ldr	r3, [pc, #200]	; (fc8 <addNumber+0xd8>)
     efe:	785b      	ldrb	r3, [r3, #1]
     f00:	429a      	cmp	r2, r3
     f02:	d101      	bne.n	f08 <addNumber+0x18>
	{
		return false;
     f04:	2300      	movs	r3, #0
     f06:	e05a      	b.n	fbe <addNumber+0xce>
	}
	else
	{
		if (checkExists(number) > 0xF0)
     f08:	687b      	ldr	r3, [r7, #4]
     f0a:	0018      	movs	r0, r3
     f0c:	4b2f      	ldr	r3, [pc, #188]	; (fcc <addNumber+0xdc>)
     f0e:	4798      	blx	r3
     f10:	0003      	movs	r3, r0
     f12:	2bf0      	cmp	r3, #240	; 0xf0
     f14:	d952      	bls.n	fbc <addNumber+0xcc>
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
     f16:	4b2e      	ldr	r3, [pc, #184]	; (fd0 <addNumber+0xe0>)
     f18:	223c      	movs	r2, #60	; 0x3c
     f1a:	2100      	movs	r1, #0
     f1c:	0018      	movs	r0, r3
     f1e:	4b2d      	ldr	r3, [pc, #180]	; (fd4 <addNumber+0xe4>)
     f20:	4798      	blx	r3
			eeprom_emulator_read_page((USER_1_MOBILE_NUMBER_PAGE+user_count_struct.current_user_no_count), page_data);
     f22:	4b29      	ldr	r3, [pc, #164]	; (fc8 <addNumber+0xd8>)
     f24:	789b      	ldrb	r3, [r3, #2]
     f26:	3309      	adds	r3, #9
     f28:	b2db      	uxtb	r3, r3
     f2a:	4a29      	ldr	r2, [pc, #164]	; (fd0 <addNumber+0xe0>)
     f2c:	0011      	movs	r1, r2
     f2e:	0018      	movs	r0, r3
     f30:	4b29      	ldr	r3, [pc, #164]	; (fd8 <addNumber+0xe8>)
     f32:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
     f34:	2308      	movs	r3, #8
     f36:	18fa      	adds	r2, r7, r3
     f38:	4b25      	ldr	r3, [pc, #148]	; (fd0 <addNumber+0xe0>)
     f3a:	0010      	movs	r0, r2
     f3c:	0019      	movs	r1, r3
     f3e:	2318      	movs	r3, #24
     f40:	001a      	movs	r2, r3
     f42:	4b26      	ldr	r3, [pc, #152]	; (fdc <addNumber+0xec>)
     f44:	4798      	blx	r3
			
			memset(mobile_no.mobile_no_ee, '\0', sizeof(mobile_no.mobile_no_ee));
     f46:	2308      	movs	r3, #8
     f48:	18fb      	adds	r3, r7, r3
     f4a:	3304      	adds	r3, #4
     f4c:	2214      	movs	r2, #20
     f4e:	2100      	movs	r1, #0
     f50:	0018      	movs	r0, r3
     f52:	4b20      	ldr	r3, [pc, #128]	; (fd4 <addNumber+0xe4>)
     f54:	4798      	blx	r3
			strcpy(mobile_no.mobile_no_ee,number);
     f56:	687a      	ldr	r2, [r7, #4]
     f58:	2308      	movs	r3, #8
     f5a:	18fb      	adds	r3, r7, r3
     f5c:	3304      	adds	r3, #4
     f5e:	0011      	movs	r1, r2
     f60:	0018      	movs	r0, r3
     f62:	4b1f      	ldr	r3, [pc, #124]	; (fe0 <addNumber+0xf0>)
     f64:	4798      	blx	r3
			
			memcpy(page_data,&mobile_no,sizeof(mobile_no));
     f66:	4a1a      	ldr	r2, [pc, #104]	; (fd0 <addNumber+0xe0>)
     f68:	2308      	movs	r3, #8
     f6a:	18fb      	adds	r3, r7, r3
     f6c:	0010      	movs	r0, r2
     f6e:	0019      	movs	r1, r3
     f70:	2318      	movs	r3, #24
     f72:	001a      	movs	r2, r3
     f74:	4b19      	ldr	r3, [pc, #100]	; (fdc <addNumber+0xec>)
     f76:	4798      	blx	r3
			eeprom_emulator_write_page((USER_1_MOBILE_NUMBER_PAGE+user_count_struct.current_user_no_count), page_data);
     f78:	4b13      	ldr	r3, [pc, #76]	; (fc8 <addNumber+0xd8>)
     f7a:	789b      	ldrb	r3, [r3, #2]
     f7c:	3309      	adds	r3, #9
     f7e:	b2db      	uxtb	r3, r3
     f80:	4a13      	ldr	r2, [pc, #76]	; (fd0 <addNumber+0xe0>)
     f82:	0011      	movs	r1, r2
     f84:	0018      	movs	r0, r3
     f86:	4b17      	ldr	r3, [pc, #92]	; (fe4 <addNumber+0xf4>)
     f88:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
     f8a:	4b17      	ldr	r3, [pc, #92]	; (fe8 <addNumber+0xf8>)
     f8c:	4798      	blx	r3
			
			user_count_struct.current_user_no_count++;
     f8e:	4b0e      	ldr	r3, [pc, #56]	; (fc8 <addNumber+0xd8>)
     f90:	789b      	ldrb	r3, [r3, #2]
     f92:	3301      	adds	r3, #1
     f94:	b2da      	uxtb	r2, r3
     f96:	4b0c      	ldr	r3, [pc, #48]	; (fc8 <addNumber+0xd8>)
     f98:	709a      	strb	r2, [r3, #2]
			
			memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
     f9a:	4a0d      	ldr	r2, [pc, #52]	; (fd0 <addNumber+0xe0>)
     f9c:	4b0a      	ldr	r3, [pc, #40]	; (fc8 <addNumber+0xd8>)
     f9e:	0010      	movs	r0, r2
     fa0:	0019      	movs	r1, r3
     fa2:	2308      	movs	r3, #8
     fa4:	001a      	movs	r2, r3
     fa6:	4b0d      	ldr	r3, [pc, #52]	; (fdc <addNumber+0xec>)
     fa8:	4798      	blx	r3
			eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
     faa:	4b09      	ldr	r3, [pc, #36]	; (fd0 <addNumber+0xe0>)
     fac:	0019      	movs	r1, r3
     fae:	2008      	movs	r0, #8
     fb0:	4b0c      	ldr	r3, [pc, #48]	; (fe4 <addNumber+0xf4>)
     fb2:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
     fb4:	4b0c      	ldr	r3, [pc, #48]	; (fe8 <addNumber+0xf8>)
     fb6:	4798      	blx	r3
			
			return true;
     fb8:	2301      	movs	r3, #1
     fba:	e000      	b.n	fbe <addNumber+0xce>
		}
	}
	return false;
     fbc:	2300      	movs	r3, #0
}
     fbe:	0018      	movs	r0, r3
     fc0:	46bd      	mov	sp, r7
     fc2:	b008      	add	sp, #32
     fc4:	bd80      	pop	{r7, pc}
     fc6:	46c0      	nop			; (mov r8, r8)
     fc8:	20000600 	.word	0x20000600
     fcc:	00000ded 	.word	0x00000ded
     fd0:	20000574 	.word	0x20000574
     fd4:	00017b57 	.word	0x00017b57
     fd8:	000128f5 	.word	0x000128f5
     fdc:	00017b21 	.word	0x00017b21
     fe0:	00017dd7 	.word	0x00017dd7
     fe4:	000127e9 	.word	0x000127e9
     fe8:	00012991 	.word	0x00012991

00000fec <removeNumber>:

bool removeNumber(char *numer)
{
     fec:	b590      	push	{r4, r7, lr}
     fee:	b085      	sub	sp, #20
     ff0:	af00      	add	r7, sp, #0
     ff2:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count < 2)
     ff4:	4b3d      	ldr	r3, [pc, #244]	; (10ec <removeNumber+0x100>)
     ff6:	789b      	ldrb	r3, [r3, #2]
     ff8:	2b01      	cmp	r3, #1
     ffa:	d801      	bhi.n	1000 <removeNumber+0x14>
	{
		return false;
     ffc:	2300      	movs	r3, #0
     ffe:	e071      	b.n	10e4 <removeNumber+0xf8>
	}
	else
	{
		uint8_t loc =  checkExists(numer);
    1000:	230e      	movs	r3, #14
    1002:	18fc      	adds	r4, r7, r3
    1004:	687b      	ldr	r3, [r7, #4]
    1006:	0018      	movs	r0, r3
    1008:	4b39      	ldr	r3, [pc, #228]	; (10f0 <removeNumber+0x104>)
    100a:	4798      	blx	r3
    100c:	0003      	movs	r3, r0
    100e:	7023      	strb	r3, [r4, #0]
		if ((loc < user_count_struct.total_user_no_count) && (loc != user_count_struct.primaryNumberIndex))	//number is not special number(i.e. alter,m2m,m2mRemote) and not primary number
    1010:	4b36      	ldr	r3, [pc, #216]	; (10ec <removeNumber+0x100>)
    1012:	785b      	ldrb	r3, [r3, #1]
    1014:	220e      	movs	r2, #14
    1016:	18ba      	adds	r2, r7, r2
    1018:	7812      	ldrb	r2, [r2, #0]
    101a:	429a      	cmp	r2, r3
    101c:	d261      	bcs.n	10e2 <removeNumber+0xf6>
    101e:	4b33      	ldr	r3, [pc, #204]	; (10ec <removeNumber+0x100>)
    1020:	78db      	ldrb	r3, [r3, #3]
    1022:	220e      	movs	r2, #14
    1024:	18ba      	adds	r2, r7, r2
    1026:	7812      	ldrb	r2, [r2, #0]
    1028:	429a      	cmp	r2, r3
    102a:	d05a      	beq.n	10e2 <removeNumber+0xf6>
		{
			for (uint8_t i=loc;i<(user_count_struct.current_user_no_count-1);i++)
    102c:	230f      	movs	r3, #15
    102e:	18fb      	adds	r3, r7, r3
    1030:	220e      	movs	r2, #14
    1032:	18ba      	adds	r2, r7, r2
    1034:	7812      	ldrb	r2, [r2, #0]
    1036:	701a      	strb	r2, [r3, #0]
    1038:	e022      	b.n	1080 <removeNumber+0x94>
			{
				memset(page_data, '\0', sizeof(page_data));
    103a:	4b2e      	ldr	r3, [pc, #184]	; (10f4 <removeNumber+0x108>)
    103c:	223c      	movs	r2, #60	; 0x3c
    103e:	2100      	movs	r1, #0
    1040:	0018      	movs	r0, r3
    1042:	4b2d      	ldr	r3, [pc, #180]	; (10f8 <removeNumber+0x10c>)
    1044:	4798      	blx	r3
				eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i+1, page_data);
    1046:	230f      	movs	r3, #15
    1048:	18fb      	adds	r3, r7, r3
    104a:	781b      	ldrb	r3, [r3, #0]
    104c:	330a      	adds	r3, #10
    104e:	b2db      	uxtb	r3, r3
    1050:	4a28      	ldr	r2, [pc, #160]	; (10f4 <removeNumber+0x108>)
    1052:	0011      	movs	r1, r2
    1054:	0018      	movs	r0, r3
    1056:	4b29      	ldr	r3, [pc, #164]	; (10fc <removeNumber+0x110>)
    1058:	4798      	blx	r3
				eeprom_emulator_write_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
    105a:	230f      	movs	r3, #15
    105c:	18fb      	adds	r3, r7, r3
    105e:	781b      	ldrb	r3, [r3, #0]
    1060:	3309      	adds	r3, #9
    1062:	b2db      	uxtb	r3, r3
    1064:	4a23      	ldr	r2, [pc, #140]	; (10f4 <removeNumber+0x108>)
    1066:	0011      	movs	r1, r2
    1068:	0018      	movs	r0, r3
    106a:	4b25      	ldr	r3, [pc, #148]	; (1100 <removeNumber+0x114>)
    106c:	4798      	blx	r3
				eeprom_emulator_commit_page_buffer();
    106e:	4b25      	ldr	r3, [pc, #148]	; (1104 <removeNumber+0x118>)
    1070:	4798      	blx	r3
			for (uint8_t i=loc;i<(user_count_struct.current_user_no_count-1);i++)
    1072:	230f      	movs	r3, #15
    1074:	18fb      	adds	r3, r7, r3
    1076:	781a      	ldrb	r2, [r3, #0]
    1078:	230f      	movs	r3, #15
    107a:	18fb      	adds	r3, r7, r3
    107c:	3201      	adds	r2, #1
    107e:	701a      	strb	r2, [r3, #0]
    1080:	230f      	movs	r3, #15
    1082:	18fb      	adds	r3, r7, r3
    1084:	781a      	ldrb	r2, [r3, #0]
    1086:	4b19      	ldr	r3, [pc, #100]	; (10ec <removeNumber+0x100>)
    1088:	789b      	ldrb	r3, [r3, #2]
    108a:	3b01      	subs	r3, #1
    108c:	429a      	cmp	r2, r3
    108e:	dbd4      	blt.n	103a <removeNumber+0x4e>
			}
			user_count_struct.current_user_no_count--;
    1090:	4b16      	ldr	r3, [pc, #88]	; (10ec <removeNumber+0x100>)
    1092:	789b      	ldrb	r3, [r3, #2]
    1094:	3b01      	subs	r3, #1
    1096:	b2da      	uxtb	r2, r3
    1098:	4b14      	ldr	r3, [pc, #80]	; (10ec <removeNumber+0x100>)
    109a:	709a      	strb	r2, [r3, #2]
			
			if(loc==user_count_struct.secondaryNumberIndex || loc>user_count_struct.current_user_no_count-1)
    109c:	4b13      	ldr	r3, [pc, #76]	; (10ec <removeNumber+0x100>)
    109e:	791b      	ldrb	r3, [r3, #4]
    10a0:	220e      	movs	r2, #14
    10a2:	18ba      	adds	r2, r7, r2
    10a4:	7812      	ldrb	r2, [r2, #0]
    10a6:	429a      	cmp	r2, r3
    10a8:	d007      	beq.n	10ba <removeNumber+0xce>
    10aa:	230e      	movs	r3, #14
    10ac:	18fb      	adds	r3, r7, r3
    10ae:	781a      	ldrb	r2, [r3, #0]
    10b0:	4b0e      	ldr	r3, [pc, #56]	; (10ec <removeNumber+0x100>)
    10b2:	789b      	ldrb	r3, [r3, #2]
    10b4:	3b01      	subs	r3, #1
    10b6:	429a      	cmp	r2, r3
    10b8:	dd02      	ble.n	10c0 <removeNumber+0xd4>
			{
				user_count_struct.secondaryNumberIndex= 1;
    10ba:	4b0c      	ldr	r3, [pc, #48]	; (10ec <removeNumber+0x100>)
    10bc:	2201      	movs	r2, #1
    10be:	711a      	strb	r2, [r3, #4]
			}
			memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
    10c0:	4a0c      	ldr	r2, [pc, #48]	; (10f4 <removeNumber+0x108>)
    10c2:	4b0a      	ldr	r3, [pc, #40]	; (10ec <removeNumber+0x100>)
    10c4:	0010      	movs	r0, r2
    10c6:	0019      	movs	r1, r3
    10c8:	2308      	movs	r3, #8
    10ca:	001a      	movs	r2, r3
    10cc:	4b0e      	ldr	r3, [pc, #56]	; (1108 <removeNumber+0x11c>)
    10ce:	4798      	blx	r3
			eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
    10d0:	4b08      	ldr	r3, [pc, #32]	; (10f4 <removeNumber+0x108>)
    10d2:	0019      	movs	r1, r3
    10d4:	2008      	movs	r0, #8
    10d6:	4b0a      	ldr	r3, [pc, #40]	; (1100 <removeNumber+0x114>)
    10d8:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
    10da:	4b0a      	ldr	r3, [pc, #40]	; (1104 <removeNumber+0x118>)
    10dc:	4798      	blx	r3
			return true;
    10de:	2301      	movs	r3, #1
    10e0:	e000      	b.n	10e4 <removeNumber+0xf8>
		}
	}
	return false;
    10e2:	2300      	movs	r3, #0
}
    10e4:	0018      	movs	r0, r3
    10e6:	46bd      	mov	sp, r7
    10e8:	b005      	add	sp, #20
    10ea:	bd90      	pop	{r4, r7, pc}
    10ec:	20000600 	.word	0x20000600
    10f0:	00000ded 	.word	0x00000ded
    10f4:	20000574 	.word	0x20000574
    10f8:	00017b57 	.word	0x00017b57
    10fc:	000128f5 	.word	0x000128f5
    1100:	000127e9 	.word	0x000127e9
    1104:	00012991 	.word	0x00012991
    1108:	00017b21 	.word	0x00017b21

0000110c <clearNumbers>:

void clearNumbers(bool admin)
{
    110c:	b580      	push	{r7, lr}
    110e:	b082      	sub	sp, #8
    1110:	af00      	add	r7, sp, #0
    1112:	0002      	movs	r2, r0
    1114:	1dfb      	adds	r3, r7, #7
    1116:	701a      	strb	r2, [r3, #0]
	if (admin)
    1118:	1dfb      	adds	r3, r7, #7
    111a:	781b      	ldrb	r3, [r3, #0]
    111c:	2b00      	cmp	r3, #0
    111e:	d003      	beq.n	1128 <clearNumbers+0x1c>
	{
		user_count_struct.current_user_no_count = 0;
    1120:	4b28      	ldr	r3, [pc, #160]	; (11c4 <clearNumbers+0xb8>)
    1122:	2200      	movs	r2, #0
    1124:	709a      	strb	r2, [r3, #2]
    1126:	e018      	b.n	115a <clearNumbers+0x4e>
	}
	else
	{
		memset(page_data, '\0', sizeof(page_data));
    1128:	4b27      	ldr	r3, [pc, #156]	; (11c8 <clearNumbers+0xbc>)
    112a:	223c      	movs	r2, #60	; 0x3c
    112c:	2100      	movs	r1, #0
    112e:	0018      	movs	r0, r3
    1130:	4b26      	ldr	r3, [pc, #152]	; (11cc <clearNumbers+0xc0>)
    1132:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+user_count_struct.primaryNumberIndex, page_data);
    1134:	4b23      	ldr	r3, [pc, #140]	; (11c4 <clearNumbers+0xb8>)
    1136:	78db      	ldrb	r3, [r3, #3]
    1138:	3309      	adds	r3, #9
    113a:	b2db      	uxtb	r3, r3
    113c:	4a22      	ldr	r2, [pc, #136]	; (11c8 <clearNumbers+0xbc>)
    113e:	0011      	movs	r1, r2
    1140:	0018      	movs	r0, r3
    1142:	4b23      	ldr	r3, [pc, #140]	; (11d0 <clearNumbers+0xc4>)
    1144:	4798      	blx	r3
		eeprom_emulator_write_page(USER_1_MOBILE_NUMBER_PAGE, page_data);
    1146:	4b20      	ldr	r3, [pc, #128]	; (11c8 <clearNumbers+0xbc>)
    1148:	0019      	movs	r1, r3
    114a:	2009      	movs	r0, #9
    114c:	4b21      	ldr	r3, [pc, #132]	; (11d4 <clearNumbers+0xc8>)
    114e:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
    1150:	4b21      	ldr	r3, [pc, #132]	; (11d8 <clearNumbers+0xcc>)
    1152:	4798      	blx	r3

		user_count_struct.current_user_no_count = 1;
    1154:	4b1b      	ldr	r3, [pc, #108]	; (11c4 <clearNumbers+0xb8>)
    1156:	2201      	movs	r2, #1
    1158:	709a      	strb	r2, [r3, #2]
		
	}
	user_count_struct.primaryNumberIndex=0;
    115a:	4b1a      	ldr	r3, [pc, #104]	; (11c4 <clearNumbers+0xb8>)
    115c:	2200      	movs	r2, #0
    115e:	70da      	strb	r2, [r3, #3]
	user_count_struct.secondaryNumberIndex=1;
    1160:	4b18      	ldr	r3, [pc, #96]	; (11c4 <clearNumbers+0xb8>)
    1162:	2201      	movs	r2, #1
    1164:	711a      	strb	r2, [r3, #4]

	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
    1166:	4a18      	ldr	r2, [pc, #96]	; (11c8 <clearNumbers+0xbc>)
    1168:	4b16      	ldr	r3, [pc, #88]	; (11c4 <clearNumbers+0xb8>)
    116a:	0010      	movs	r0, r2
    116c:	0019      	movs	r1, r3
    116e:	2308      	movs	r3, #8
    1170:	001a      	movs	r2, r3
    1172:	4b1a      	ldr	r3, [pc, #104]	; (11dc <clearNumbers+0xd0>)
    1174:	4798      	blx	r3
	user_count_struct.primaryNumberIndex=0;
    1176:	4b13      	ldr	r3, [pc, #76]	; (11c4 <clearNumbers+0xb8>)
    1178:	2200      	movs	r2, #0
    117a:	70da      	strb	r2, [r3, #3]
	user_count_struct.secondaryNumberIndex=1;
    117c:	4b11      	ldr	r3, [pc, #68]	; (11c4 <clearNumbers+0xb8>)
    117e:	2201      	movs	r2, #1
    1180:	711a      	strb	r2, [r3, #4]
	eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
    1182:	4b11      	ldr	r3, [pc, #68]	; (11c8 <clearNumbers+0xbc>)
    1184:	0019      	movs	r1, r3
    1186:	2008      	movs	r0, #8
    1188:	4b12      	ldr	r3, [pc, #72]	; (11d4 <clearNumbers+0xc8>)
    118a:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    118c:	4b12      	ldr	r3, [pc, #72]	; (11d8 <clearNumbers+0xcc>)
    118e:	4798      	blx	r3
	
	saveAlterNumberSetting(false);
    1190:	2000      	movs	r0, #0
    1192:	4b13      	ldr	r3, [pc, #76]	; (11e0 <clearNumbers+0xd4>)
    1194:	4798      	blx	r3
	
	alternateNumber_struct.alterNumberPresent = false;
    1196:	4b13      	ldr	r3, [pc, #76]	; (11e4 <clearNumbers+0xd8>)
    1198:	2200      	movs	r2, #0
    119a:	709a      	strb	r2, [r3, #2]
	memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
    119c:	4a0a      	ldr	r2, [pc, #40]	; (11c8 <clearNumbers+0xbc>)
    119e:	4b11      	ldr	r3, [pc, #68]	; (11e4 <clearNumbers+0xd8>)
    11a0:	0010      	movs	r0, r2
    11a2:	0019      	movs	r1, r3
    11a4:	2318      	movs	r3, #24
    11a6:	001a      	movs	r2, r3
    11a8:	4b0c      	ldr	r3, [pc, #48]	; (11dc <clearNumbers+0xd0>)
    11aa:	4798      	blx	r3
	eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
    11ac:	4b06      	ldr	r3, [pc, #24]	; (11c8 <clearNumbers+0xbc>)
    11ae:	0019      	movs	r1, r3
    11b0:	2018      	movs	r0, #24
    11b2:	4b08      	ldr	r3, [pc, #32]	; (11d4 <clearNumbers+0xc8>)
    11b4:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    11b6:	4b08      	ldr	r3, [pc, #32]	; (11d8 <clearNumbers+0xcc>)
    11b8:	4798      	blx	r3
}
    11ba:	46c0      	nop			; (mov r8, r8)
    11bc:	46bd      	mov	sp, r7
    11be:	b002      	add	sp, #8
    11c0:	bd80      	pop	{r7, pc}
    11c2:	46c0      	nop			; (mov r8, r8)
    11c4:	20000600 	.word	0x20000600
    11c8:	20000574 	.word	0x20000574
    11cc:	00017b57 	.word	0x00017b57
    11d0:	000128f5 	.word	0x000128f5
    11d4:	000127e9 	.word	0x000127e9
    11d8:	00012991 	.word	0x00012991
    11dc:	00017b21 	.word	0x00017b21
    11e0:	000011e9 	.word	0x000011e9
    11e4:	20000634 	.word	0x20000634

000011e8 <saveAlterNumberSetting>:

void saveAlterNumberSetting(bool flag)
{
    11e8:	b580      	push	{r7, lr}
    11ea:	b082      	sub	sp, #8
    11ec:	af00      	add	r7, sp, #0
    11ee:	0002      	movs	r2, r0
    11f0:	1dfb      	adds	r3, r7, #7
    11f2:	701a      	strb	r2, [r3, #0]
	alternateNumber_struct.alterNumberSetting = flag;
    11f4:	1dfb      	adds	r3, r7, #7
    11f6:	781a      	ldrb	r2, [r3, #0]
    11f8:	4b0a      	ldr	r3, [pc, #40]	; (1224 <saveAlterNumberSetting+0x3c>)
    11fa:	705a      	strb	r2, [r3, #1]
	memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
    11fc:	4a0a      	ldr	r2, [pc, #40]	; (1228 <saveAlterNumberSetting+0x40>)
    11fe:	4b09      	ldr	r3, [pc, #36]	; (1224 <saveAlterNumberSetting+0x3c>)
    1200:	0010      	movs	r0, r2
    1202:	0019      	movs	r1, r3
    1204:	2318      	movs	r3, #24
    1206:	001a      	movs	r2, r3
    1208:	4b08      	ldr	r3, [pc, #32]	; (122c <saveAlterNumberSetting+0x44>)
    120a:	4798      	blx	r3
	eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
    120c:	4b06      	ldr	r3, [pc, #24]	; (1228 <saveAlterNumberSetting+0x40>)
    120e:	0019      	movs	r1, r3
    1210:	2018      	movs	r0, #24
    1212:	4b07      	ldr	r3, [pc, #28]	; (1230 <saveAlterNumberSetting+0x48>)
    1214:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    1216:	4b07      	ldr	r3, [pc, #28]	; (1234 <saveAlterNumberSetting+0x4c>)
    1218:	4798      	blx	r3
}
    121a:	46c0      	nop			; (mov r8, r8)
    121c:	46bd      	mov	sp, r7
    121e:	b002      	add	sp, #8
    1220:	bd80      	pop	{r7, pc}
    1222:	46c0      	nop			; (mov r8, r8)
    1224:	20000634 	.word	0x20000634
    1228:	20000574 	.word	0x20000574
    122c:	00017b21 	.word	0x00017b21
    1230:	000127e9 	.word	0x000127e9
    1234:	00012991 	.word	0x00012991

00001238 <addAlternateNumber>:

bool addAlternateNumber(char *numer)
{
    1238:	b580      	push	{r7, lr}
    123a:	b082      	sub	sp, #8
    123c:	af00      	add	r7, sp, #0
    123e:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count > 0)
    1240:	4b11      	ldr	r3, [pc, #68]	; (1288 <addAlternateNumber+0x50>)
    1242:	789b      	ldrb	r3, [r3, #2]
    1244:	2b00      	cmp	r3, #0
    1246:	d019      	beq.n	127c <addAlternateNumber+0x44>
	{
		alternateNumber_struct.alterNumberPresent = true;
    1248:	4b10      	ldr	r3, [pc, #64]	; (128c <addAlternateNumber+0x54>)
    124a:	2201      	movs	r2, #1
    124c:	709a      	strb	r2, [r3, #2]
		strcpy(alternateNumber_struct.alternateNumber_ee,numer);
    124e:	687a      	ldr	r2, [r7, #4]
    1250:	4b0f      	ldr	r3, [pc, #60]	; (1290 <addAlternateNumber+0x58>)
    1252:	0011      	movs	r1, r2
    1254:	0018      	movs	r0, r3
    1256:	4b0f      	ldr	r3, [pc, #60]	; (1294 <addAlternateNumber+0x5c>)
    1258:	4798      	blx	r3
		memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
    125a:	4a0f      	ldr	r2, [pc, #60]	; (1298 <addAlternateNumber+0x60>)
    125c:	4b0b      	ldr	r3, [pc, #44]	; (128c <addAlternateNumber+0x54>)
    125e:	0010      	movs	r0, r2
    1260:	0019      	movs	r1, r3
    1262:	2318      	movs	r3, #24
    1264:	001a      	movs	r2, r3
    1266:	4b0d      	ldr	r3, [pc, #52]	; (129c <addAlternateNumber+0x64>)
    1268:	4798      	blx	r3
		eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
    126a:	4b0b      	ldr	r3, [pc, #44]	; (1298 <addAlternateNumber+0x60>)
    126c:	0019      	movs	r1, r3
    126e:	2018      	movs	r0, #24
    1270:	4b0b      	ldr	r3, [pc, #44]	; (12a0 <addAlternateNumber+0x68>)
    1272:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
    1274:	4b0b      	ldr	r3, [pc, #44]	; (12a4 <addAlternateNumber+0x6c>)
    1276:	4798      	blx	r3
		
		return true;
    1278:	2301      	movs	r3, #1
    127a:	e000      	b.n	127e <addAlternateNumber+0x46>
	}
	return false;
    127c:	2300      	movs	r3, #0
}
    127e:	0018      	movs	r0, r3
    1280:	46bd      	mov	sp, r7
    1282:	b002      	add	sp, #8
    1284:	bd80      	pop	{r7, pc}
    1286:	46c0      	nop			; (mov r8, r8)
    1288:	20000600 	.word	0x20000600
    128c:	20000634 	.word	0x20000634
    1290:	20000638 	.word	0x20000638
    1294:	00017dd7 	.word	0x00017dd7
    1298:	20000574 	.word	0x20000574
    129c:	00017b21 	.word	0x00017b21
    12a0:	000127e9 	.word	0x000127e9
    12a4:	00012991 	.word	0x00012991

000012a8 <saveAutoStartSettings>:

void saveAutoStartSettings(bool flag)
{
    12a8:	b580      	push	{r7, lr}
    12aa:	b082      	sub	sp, #8
    12ac:	af00      	add	r7, sp, #0
    12ae:	0002      	movs	r2, r0
    12b0:	1dfb      	adds	r3, r7, #7
    12b2:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.autoStartAddress = (uint8_t)flag;
    12b4:	1dfb      	adds	r3, r7, #7
    12b6:	781a      	ldrb	r2, [r3, #0]
    12b8:	4b09      	ldr	r3, [pc, #36]	; (12e0 <saveAutoStartSettings+0x38>)
    12ba:	705a      	strb	r2, [r3, #1]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    12bc:	4908      	ldr	r1, [pc, #32]	; (12e0 <saveAutoStartSettings+0x38>)
    12be:	4b09      	ldr	r3, [pc, #36]	; (12e4 <saveAutoStartSettings+0x3c>)
    12c0:	222c      	movs	r2, #44	; 0x2c
    12c2:	0018      	movs	r0, r3
    12c4:	4b08      	ldr	r3, [pc, #32]	; (12e8 <saveAutoStartSettings+0x40>)
    12c6:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    12c8:	4b06      	ldr	r3, [pc, #24]	; (12e4 <saveAutoStartSettings+0x3c>)
    12ca:	0019      	movs	r1, r3
    12cc:	201a      	movs	r0, #26
    12ce:	4b07      	ldr	r3, [pc, #28]	; (12ec <saveAutoStartSettings+0x44>)
    12d0:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    12d2:	4b07      	ldr	r3, [pc, #28]	; (12f0 <saveAutoStartSettings+0x48>)
    12d4:	4798      	blx	r3
}
    12d6:	46c0      	nop			; (mov r8, r8)
    12d8:	46bd      	mov	sp, r7
    12da:	b002      	add	sp, #8
    12dc:	bd80      	pop	{r7, pc}
    12de:	46c0      	nop			; (mov r8, r8)
    12e0:	2000064c 	.word	0x2000064c
    12e4:	20000574 	.word	0x20000574
    12e8:	00017b21 	.word	0x00017b21
    12ec:	000127e9 	.word	0x000127e9
    12f0:	00012991 	.word	0x00012991

000012f4 <saveAutoStartTimeSettings>:

void saveAutoStartTimeSettings(uint16_t value)
{
    12f4:	b580      	push	{r7, lr}
    12f6:	b082      	sub	sp, #8
    12f8:	af00      	add	r7, sp, #0
    12fa:	0002      	movs	r2, r0
    12fc:	1dbb      	adds	r3, r7, #6
    12fe:	801a      	strh	r2, [r3, #0]
	user_settings_parameter_struct.autoStartTimeAddress = value;
    1300:	4b0a      	ldr	r3, [pc, #40]	; (132c <saveAutoStartTimeSettings+0x38>)
    1302:	1dba      	adds	r2, r7, #6
    1304:	8812      	ldrh	r2, [r2, #0]
    1306:	805a      	strh	r2, [r3, #2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    1308:	4908      	ldr	r1, [pc, #32]	; (132c <saveAutoStartTimeSettings+0x38>)
    130a:	4b09      	ldr	r3, [pc, #36]	; (1330 <saveAutoStartTimeSettings+0x3c>)
    130c:	222c      	movs	r2, #44	; 0x2c
    130e:	0018      	movs	r0, r3
    1310:	4b08      	ldr	r3, [pc, #32]	; (1334 <saveAutoStartTimeSettings+0x40>)
    1312:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    1314:	4b06      	ldr	r3, [pc, #24]	; (1330 <saveAutoStartTimeSettings+0x3c>)
    1316:	0019      	movs	r1, r3
    1318:	201a      	movs	r0, #26
    131a:	4b07      	ldr	r3, [pc, #28]	; (1338 <saveAutoStartTimeSettings+0x44>)
    131c:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    131e:	4b07      	ldr	r3, [pc, #28]	; (133c <saveAutoStartTimeSettings+0x48>)
    1320:	4798      	blx	r3
}
    1322:	46c0      	nop			; (mov r8, r8)
    1324:	46bd      	mov	sp, r7
    1326:	b002      	add	sp, #8
    1328:	bd80      	pop	{r7, pc}
    132a:	46c0      	nop			; (mov r8, r8)
    132c:	2000064c 	.word	0x2000064c
    1330:	20000574 	.word	0x20000574
    1334:	00017b21 	.word	0x00017b21
    1338:	000127e9 	.word	0x000127e9
    133c:	00012991 	.word	0x00012991

00001340 <saveDNDSettings>:

void saveDNDSettings(char flag)
{
    1340:	b580      	push	{r7, lr}
    1342:	b082      	sub	sp, #8
    1344:	af00      	add	r7, sp, #0
    1346:	0002      	movs	r2, r0
    1348:	1dfb      	adds	r3, r7, #7
    134a:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.dndAddress = flag;
    134c:	4b0a      	ldr	r3, [pc, #40]	; (1378 <saveDNDSettings+0x38>)
    134e:	1dfa      	adds	r2, r7, #7
    1350:	7812      	ldrb	r2, [r2, #0]
    1352:	711a      	strb	r2, [r3, #4]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    1354:	4908      	ldr	r1, [pc, #32]	; (1378 <saveDNDSettings+0x38>)
    1356:	4b09      	ldr	r3, [pc, #36]	; (137c <saveDNDSettings+0x3c>)
    1358:	222c      	movs	r2, #44	; 0x2c
    135a:	0018      	movs	r0, r3
    135c:	4b08      	ldr	r3, [pc, #32]	; (1380 <saveDNDSettings+0x40>)
    135e:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    1360:	4b06      	ldr	r3, [pc, #24]	; (137c <saveDNDSettings+0x3c>)
    1362:	0019      	movs	r1, r3
    1364:	201a      	movs	r0, #26
    1366:	4b07      	ldr	r3, [pc, #28]	; (1384 <saveDNDSettings+0x44>)
    1368:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    136a:	4b07      	ldr	r3, [pc, #28]	; (1388 <saveDNDSettings+0x48>)
    136c:	4798      	blx	r3
}
    136e:	46c0      	nop			; (mov r8, r8)
    1370:	46bd      	mov	sp, r7
    1372:	b002      	add	sp, #8
    1374:	bd80      	pop	{r7, pc}
    1376:	46c0      	nop			; (mov r8, r8)
    1378:	2000064c 	.word	0x2000064c
    137c:	20000574 	.word	0x20000574
    1380:	00017b21 	.word	0x00017b21
    1384:	000127e9 	.word	0x000127e9
    1388:	00012991 	.word	0x00012991

0000138c <saveResponseSettings>:
//eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
//eeprom_emulator_commit_page_buffer();
//}

void saveResponseSettings(char response)
{
    138c:	b580      	push	{r7, lr}
    138e:	b082      	sub	sp, #8
    1390:	af00      	add	r7, sp, #0
    1392:	0002      	movs	r2, r0
    1394:	1dfb      	adds	r3, r7, #7
    1396:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.responseAddress = response;
    1398:	4b0a      	ldr	r3, [pc, #40]	; (13c4 <saveResponseSettings+0x38>)
    139a:	1dfa      	adds	r2, r7, #7
    139c:	7812      	ldrb	r2, [r2, #0]
    139e:	715a      	strb	r2, [r3, #5]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    13a0:	4908      	ldr	r1, [pc, #32]	; (13c4 <saveResponseSettings+0x38>)
    13a2:	4b09      	ldr	r3, [pc, #36]	; (13c8 <saveResponseSettings+0x3c>)
    13a4:	222c      	movs	r2, #44	; 0x2c
    13a6:	0018      	movs	r0, r3
    13a8:	4b08      	ldr	r3, [pc, #32]	; (13cc <saveResponseSettings+0x40>)
    13aa:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    13ac:	4b06      	ldr	r3, [pc, #24]	; (13c8 <saveResponseSettings+0x3c>)
    13ae:	0019      	movs	r1, r3
    13b0:	201a      	movs	r0, #26
    13b2:	4b07      	ldr	r3, [pc, #28]	; (13d0 <saveResponseSettings+0x44>)
    13b4:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    13b6:	4b07      	ldr	r3, [pc, #28]	; (13d4 <saveResponseSettings+0x48>)
    13b8:	4798      	blx	r3
}
    13ba:	46c0      	nop			; (mov r8, r8)
    13bc:	46bd      	mov	sp, r7
    13be:	b002      	add	sp, #8
    13c0:	bd80      	pop	{r7, pc}
    13c2:	46c0      	nop			; (mov r8, r8)
    13c4:	2000064c 	.word	0x2000064c
    13c8:	20000574 	.word	0x20000574
    13cc:	00017b21 	.word	0x00017b21
    13d0:	000127e9 	.word	0x000127e9
    13d4:	00012991 	.word	0x00012991

000013d8 <saveNoCallSettings>:

void saveNoCallSettings(bool flag,uint8_t startHour,uint8_t startMinute,uint8_t stopHour,uint8_t stopMinute)
{
    13d8:	b5b0      	push	{r4, r5, r7, lr}
    13da:	b082      	sub	sp, #8
    13dc:	af00      	add	r7, sp, #0
    13de:	0005      	movs	r5, r0
    13e0:	000c      	movs	r4, r1
    13e2:	0010      	movs	r0, r2
    13e4:	0019      	movs	r1, r3
    13e6:	1dfb      	adds	r3, r7, #7
    13e8:	1c2a      	adds	r2, r5, #0
    13ea:	701a      	strb	r2, [r3, #0]
    13ec:	1dbb      	adds	r3, r7, #6
    13ee:	1c22      	adds	r2, r4, #0
    13f0:	701a      	strb	r2, [r3, #0]
    13f2:	1d7b      	adds	r3, r7, #5
    13f4:	1c02      	adds	r2, r0, #0
    13f6:	701a      	strb	r2, [r3, #0]
    13f8:	1d3b      	adds	r3, r7, #4
    13fa:	1c0a      	adds	r2, r1, #0
    13fc:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.noCallAddress = (uint8_t)flag;
    13fe:	1dfb      	adds	r3, r7, #7
    1400:	781a      	ldrb	r2, [r3, #0]
    1402:	4b14      	ldr	r3, [pc, #80]	; (1454 <saveNoCallSettings+0x7c>)
    1404:	725a      	strb	r2, [r3, #9]
	if (user_settings_parameter_struct.noCallAddress)
    1406:	4b13      	ldr	r3, [pc, #76]	; (1454 <saveNoCallSettings+0x7c>)
    1408:	7a5b      	ldrb	r3, [r3, #9]
    140a:	2b00      	cmp	r3, #0
    140c:	d010      	beq.n	1430 <saveNoCallSettings+0x58>
	{
		user_settings_parameter_struct.noCallStartTimeHourAddress = startHour;
    140e:	4b11      	ldr	r3, [pc, #68]	; (1454 <saveNoCallSettings+0x7c>)
    1410:	1dba      	adds	r2, r7, #6
    1412:	7812      	ldrb	r2, [r2, #0]
    1414:	729a      	strb	r2, [r3, #10]
		user_settings_parameter_struct.noCallStartTimeMinuteAddress = startMinute;
    1416:	4b0f      	ldr	r3, [pc, #60]	; (1454 <saveNoCallSettings+0x7c>)
    1418:	1d7a      	adds	r2, r7, #5
    141a:	7812      	ldrb	r2, [r2, #0]
    141c:	72da      	strb	r2, [r3, #11]
		
		user_settings_parameter_struct.noCallStopTimeHourAddress = stopHour;
    141e:	4b0d      	ldr	r3, [pc, #52]	; (1454 <saveNoCallSettings+0x7c>)
    1420:	1d3a      	adds	r2, r7, #4
    1422:	7812      	ldrb	r2, [r2, #0]
    1424:	731a      	strb	r2, [r3, #12]
		user_settings_parameter_struct.noCallStopTimeMinuteAddress = stopMinute;
    1426:	4b0b      	ldr	r3, [pc, #44]	; (1454 <saveNoCallSettings+0x7c>)
    1428:	2218      	movs	r2, #24
    142a:	18ba      	adds	r2, r7, r2
    142c:	7812      	ldrb	r2, [r2, #0]
    142e:	735a      	strb	r2, [r3, #13]
	}
	
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    1430:	4908      	ldr	r1, [pc, #32]	; (1454 <saveNoCallSettings+0x7c>)
    1432:	4b09      	ldr	r3, [pc, #36]	; (1458 <saveNoCallSettings+0x80>)
    1434:	222c      	movs	r2, #44	; 0x2c
    1436:	0018      	movs	r0, r3
    1438:	4b08      	ldr	r3, [pc, #32]	; (145c <saveNoCallSettings+0x84>)
    143a:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    143c:	4b06      	ldr	r3, [pc, #24]	; (1458 <saveNoCallSettings+0x80>)
    143e:	0019      	movs	r1, r3
    1440:	201a      	movs	r0, #26
    1442:	4b07      	ldr	r3, [pc, #28]	; (1460 <saveNoCallSettings+0x88>)
    1444:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    1446:	4b07      	ldr	r3, [pc, #28]	; (1464 <saveNoCallSettings+0x8c>)
    1448:	4798      	blx	r3
}
    144a:	46c0      	nop			; (mov r8, r8)
    144c:	46bd      	mov	sp, r7
    144e:	b002      	add	sp, #8
    1450:	bdb0      	pop	{r4, r5, r7, pc}
    1452:	46c0      	nop			; (mov r8, r8)
    1454:	2000064c 	.word	0x2000064c
    1458:	20000574 	.word	0x20000574
    145c:	00017b21 	.word	0x00017b21
    1460:	000127e9 	.word	0x000127e9
    1464:	00012991 	.word	0x00012991

00001468 <saveWaterBypassSettings>:

void saveWaterBypassSettings(bool flag)
{
    1468:	b580      	push	{r7, lr}
    146a:	b082      	sub	sp, #8
    146c:	af00      	add	r7, sp, #0
    146e:	0002      	movs	r2, r0
    1470:	1dfb      	adds	r3, r7, #7
    1472:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.waterBypassAddress = (uint8_t)flag;
    1474:	1dfb      	adds	r3, r7, #7
    1476:	781a      	ldrb	r2, [r3, #0]
    1478:	4b09      	ldr	r3, [pc, #36]	; (14a0 <saveWaterBypassSettings+0x38>)
    147a:	77da      	strb	r2, [r3, #31]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    147c:	4908      	ldr	r1, [pc, #32]	; (14a0 <saveWaterBypassSettings+0x38>)
    147e:	4b09      	ldr	r3, [pc, #36]	; (14a4 <saveWaterBypassSettings+0x3c>)
    1480:	222c      	movs	r2, #44	; 0x2c
    1482:	0018      	movs	r0, r3
    1484:	4b08      	ldr	r3, [pc, #32]	; (14a8 <saveWaterBypassSettings+0x40>)
    1486:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    1488:	4b06      	ldr	r3, [pc, #24]	; (14a4 <saveWaterBypassSettings+0x3c>)
    148a:	0019      	movs	r1, r3
    148c:	201a      	movs	r0, #26
    148e:	4b07      	ldr	r3, [pc, #28]	; (14ac <saveWaterBypassSettings+0x44>)
    1490:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    1492:	4b07      	ldr	r3, [pc, #28]	; (14b0 <saveWaterBypassSettings+0x48>)
    1494:	4798      	blx	r3
}
    1496:	46c0      	nop			; (mov r8, r8)
    1498:	46bd      	mov	sp, r7
    149a:	b002      	add	sp, #8
    149c:	bd80      	pop	{r7, pc}
    149e:	46c0      	nop			; (mov r8, r8)
    14a0:	2000064c 	.word	0x2000064c
    14a4:	20000574 	.word	0x20000574
    14a8:	00017b21 	.word	0x00017b21
    14ac:	000127e9 	.word	0x000127e9
    14b0:	00012991 	.word	0x00012991

000014b4 <savePreventOverFlowSettings>:

void savePreventOverFlowSettings(bool flag)
{
    14b4:	b580      	push	{r7, lr}
    14b6:	b082      	sub	sp, #8
    14b8:	af00      	add	r7, sp, #0
    14ba:	0002      	movs	r2, r0
    14bc:	1dfb      	adds	r3, r7, #7
    14be:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.preventOverFlowAddress = (uint8_t)flag;
    14c0:	1dfb      	adds	r3, r7, #7
    14c2:	781a      	ldrb	r2, [r3, #0]
    14c4:	4b09      	ldr	r3, [pc, #36]	; (14ec <savePreventOverFlowSettings+0x38>)
    14c6:	779a      	strb	r2, [r3, #30]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    14c8:	4908      	ldr	r1, [pc, #32]	; (14ec <savePreventOverFlowSettings+0x38>)
    14ca:	4b09      	ldr	r3, [pc, #36]	; (14f0 <savePreventOverFlowSettings+0x3c>)
    14cc:	222c      	movs	r2, #44	; 0x2c
    14ce:	0018      	movs	r0, r3
    14d0:	4b08      	ldr	r3, [pc, #32]	; (14f4 <savePreventOverFlowSettings+0x40>)
    14d2:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    14d4:	4b06      	ldr	r3, [pc, #24]	; (14f0 <savePreventOverFlowSettings+0x3c>)
    14d6:	0019      	movs	r1, r3
    14d8:	201a      	movs	r0, #26
    14da:	4b07      	ldr	r3, [pc, #28]	; (14f8 <savePreventOverFlowSettings+0x44>)
    14dc:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    14de:	4b07      	ldr	r3, [pc, #28]	; (14fc <savePreventOverFlowSettings+0x48>)
    14e0:	4798      	blx	r3
}
    14e2:	46c0      	nop			; (mov r8, r8)
    14e4:	46bd      	mov	sp, r7
    14e6:	b002      	add	sp, #8
    14e8:	bd80      	pop	{r7, pc}
    14ea:	46c0      	nop			; (mov r8, r8)
    14ec:	2000064c 	.word	0x2000064c
    14f0:	20000574 	.word	0x20000574
    14f4:	00017b21 	.word	0x00017b21
    14f8:	000127e9 	.word	0x000127e9
    14fc:	00012991 	.word	0x00012991

00001500 <setOverloadPer>:
//eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
//eeprom_emulator_commit_page_buffer();
//}

bool setOverloadPer(uint8_t overloadPerValue)
{
    1500:	b580      	push	{r7, lr}
    1502:	b082      	sub	sp, #8
    1504:	af00      	add	r7, sp, #0
    1506:	0002      	movs	r2, r0
    1508:	1dfb      	adds	r3, r7, #7
    150a:	701a      	strb	r2, [r3, #0]
	if(overloadPerValue>100)
    150c:	1dfb      	adds	r3, r7, #7
    150e:	781b      	ldrb	r3, [r3, #0]
    1510:	2b64      	cmp	r3, #100	; 0x64
    1512:	d918      	bls.n	1546 <setOverloadPer+0x46>
	{
		user_settings_parameter_struct.overloadPerAddress = overloadPerValue;
    1514:	4b0e      	ldr	r3, [pc, #56]	; (1550 <setOverloadPer+0x50>)
    1516:	1dfa      	adds	r2, r7, #7
    1518:	7812      	ldrb	r2, [r2, #0]
    151a:	775a      	strb	r2, [r3, #29]
		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    151c:	490c      	ldr	r1, [pc, #48]	; (1550 <setOverloadPer+0x50>)
    151e:	4b0d      	ldr	r3, [pc, #52]	; (1554 <setOverloadPer+0x54>)
    1520:	222c      	movs	r2, #44	; 0x2c
    1522:	0018      	movs	r0, r3
    1524:	4b0c      	ldr	r3, [pc, #48]	; (1558 <setOverloadPer+0x58>)
    1526:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    1528:	4b0a      	ldr	r3, [pc, #40]	; (1554 <setOverloadPer+0x54>)
    152a:	0019      	movs	r1, r3
    152c:	201a      	movs	r0, #26
    152e:	4b0b      	ldr	r3, [pc, #44]	; (155c <setOverloadPer+0x5c>)
    1530:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
    1532:	4b0b      	ldr	r3, [pc, #44]	; (1560 <setOverloadPer+0x60>)
    1534:	4798      	blx	r3
		
		if (user_settings_parameter_struct.currentDetectionAddress)
    1536:	4b06      	ldr	r3, [pc, #24]	; (1550 <setOverloadPer+0x50>)
    1538:	7bdb      	ldrb	r3, [r3, #15]
    153a:	2b00      	cmp	r3, #0
    153c:	d001      	beq.n	1542 <setOverloadPer+0x42>
		{
			calcCurrentValues();
    153e:	4b09      	ldr	r3, [pc, #36]	; (1564 <setOverloadPer+0x64>)
    1540:	4798      	blx	r3
		}
		return true;
    1542:	2301      	movs	r3, #1
    1544:	e000      	b.n	1548 <setOverloadPer+0x48>
	}
	return false;
    1546:	2300      	movs	r3, #0
}
    1548:	0018      	movs	r0, r3
    154a:	46bd      	mov	sp, r7
    154c:	b002      	add	sp, #8
    154e:	bd80      	pop	{r7, pc}
    1550:	2000064c 	.word	0x2000064c
    1554:	20000574 	.word	0x20000574
    1558:	00017b21 	.word	0x00017b21
    155c:	000127e9 	.word	0x000127e9
    1560:	00012991 	.word	0x00012991
    1564:	00001709 	.word	0x00001709

00001568 <setUnderloadPer>:

bool setUnderloadPer(uint8_t underloadPerValue)
{
    1568:	b580      	push	{r7, lr}
    156a:	b082      	sub	sp, #8
    156c:	af00      	add	r7, sp, #0
    156e:	0002      	movs	r2, r0
    1570:	1dfb      	adds	r3, r7, #7
    1572:	701a      	strb	r2, [r3, #0]
	if(underloadPerValue>0 && underloadPerValue <100)
    1574:	1dfb      	adds	r3, r7, #7
    1576:	781b      	ldrb	r3, [r3, #0]
    1578:	2b00      	cmp	r3, #0
    157a:	d01c      	beq.n	15b6 <setUnderloadPer+0x4e>
    157c:	1dfb      	adds	r3, r7, #7
    157e:	781b      	ldrb	r3, [r3, #0]
    1580:	2b63      	cmp	r3, #99	; 0x63
    1582:	d818      	bhi.n	15b6 <setUnderloadPer+0x4e>
	{
		user_settings_parameter_struct.underloadPerAddress = underloadPerValue;
    1584:	4b0e      	ldr	r3, [pc, #56]	; (15c0 <setUnderloadPer+0x58>)
    1586:	1dfa      	adds	r2, r7, #7
    1588:	7812      	ldrb	r2, [r2, #0]
    158a:	771a      	strb	r2, [r3, #28]
		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    158c:	490c      	ldr	r1, [pc, #48]	; (15c0 <setUnderloadPer+0x58>)
    158e:	4b0d      	ldr	r3, [pc, #52]	; (15c4 <setUnderloadPer+0x5c>)
    1590:	222c      	movs	r2, #44	; 0x2c
    1592:	0018      	movs	r0, r3
    1594:	4b0c      	ldr	r3, [pc, #48]	; (15c8 <setUnderloadPer+0x60>)
    1596:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    1598:	4b0a      	ldr	r3, [pc, #40]	; (15c4 <setUnderloadPer+0x5c>)
    159a:	0019      	movs	r1, r3
    159c:	201a      	movs	r0, #26
    159e:	4b0b      	ldr	r3, [pc, #44]	; (15cc <setUnderloadPer+0x64>)
    15a0:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
    15a2:	4b0b      	ldr	r3, [pc, #44]	; (15d0 <setUnderloadPer+0x68>)
    15a4:	4798      	blx	r3
		if (user_settings_parameter_struct.currentDetectionAddress)
    15a6:	4b06      	ldr	r3, [pc, #24]	; (15c0 <setUnderloadPer+0x58>)
    15a8:	7bdb      	ldrb	r3, [r3, #15]
    15aa:	2b00      	cmp	r3, #0
    15ac:	d001      	beq.n	15b2 <setUnderloadPer+0x4a>
		{
			calcCurrentValues();
    15ae:	4b09      	ldr	r3, [pc, #36]	; (15d4 <setUnderloadPer+0x6c>)
    15b0:	4798      	blx	r3
		}
		return true;
    15b2:	2301      	movs	r3, #1
    15b4:	e000      	b.n	15b8 <setUnderloadPer+0x50>
	}
	return false;
    15b6:	2300      	movs	r3, #0
}
    15b8:	0018      	movs	r0, r3
    15ba:	46bd      	mov	sp, r7
    15bc:	b002      	add	sp, #8
    15be:	bd80      	pop	{r7, pc}
    15c0:	2000064c 	.word	0x2000064c
    15c4:	20000574 	.word	0x20000574
    15c8:	00017b21 	.word	0x00017b21
    15cc:	000127e9 	.word	0x000127e9
    15d0:	00012991 	.word	0x00012991
    15d4:	00001709 	.word	0x00001709

000015d8 <saveSinglePhasingSettings>:

void saveSinglePhasingSettings(bool singlePhasing)
{
    15d8:	b580      	push	{r7, lr}
    15da:	b082      	sub	sp, #8
    15dc:	af00      	add	r7, sp, #0
    15de:	0002      	movs	r2, r0
    15e0:	1dfb      	adds	r3, r7, #7
    15e2:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.detectSinglePhasing=singlePhasing;
    15e4:	1dfb      	adds	r3, r7, #7
    15e6:	7819      	ldrb	r1, [r3, #0]
    15e8:	4b09      	ldr	r3, [pc, #36]	; (1610 <saveSinglePhasingSettings+0x38>)
    15ea:	2220      	movs	r2, #32
    15ec:	5499      	strb	r1, [r3, r2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    15ee:	4908      	ldr	r1, [pc, #32]	; (1610 <saveSinglePhasingSettings+0x38>)
    15f0:	4b08      	ldr	r3, [pc, #32]	; (1614 <saveSinglePhasingSettings+0x3c>)
    15f2:	222c      	movs	r2, #44	; 0x2c
    15f4:	0018      	movs	r0, r3
    15f6:	4b08      	ldr	r3, [pc, #32]	; (1618 <saveSinglePhasingSettings+0x40>)
    15f8:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    15fa:	4b06      	ldr	r3, [pc, #24]	; (1614 <saveSinglePhasingSettings+0x3c>)
    15fc:	0019      	movs	r1, r3
    15fe:	201a      	movs	r0, #26
    1600:	4b06      	ldr	r3, [pc, #24]	; (161c <saveSinglePhasingSettings+0x44>)
    1602:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    1604:	4b06      	ldr	r3, [pc, #24]	; (1620 <saveSinglePhasingSettings+0x48>)
    1606:	4798      	blx	r3
}
    1608:	46c0      	nop			; (mov r8, r8)
    160a:	46bd      	mov	sp, r7
    160c:	b002      	add	sp, #8
    160e:	bd80      	pop	{r7, pc}
    1610:	2000064c 	.word	0x2000064c
    1614:	20000574 	.word	0x20000574
    1618:	00017b21 	.word	0x00017b21
    161c:	000127e9 	.word	0x000127e9
    1620:	00012991 	.word	0x00012991

00001624 <saveSinglePhasingVoltage>:

void saveSinglePhasingVoltage(uint16_t voltage)
{
    1624:	b580      	push	{r7, lr}
    1626:	b082      	sub	sp, #8
    1628:	af00      	add	r7, sp, #0
    162a:	0002      	movs	r2, r0
    162c:	1dbb      	adds	r3, r7, #6
    162e:	801a      	strh	r2, [r3, #0]
	user_settings_parameter_struct.singlePhasingVoltage= voltage;
    1630:	4b0a      	ldr	r3, [pc, #40]	; (165c <saveSinglePhasingVoltage+0x38>)
    1632:	1dba      	adds	r2, r7, #6
    1634:	8812      	ldrh	r2, [r2, #0]
    1636:	845a      	strh	r2, [r3, #34]	; 0x22
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    1638:	4908      	ldr	r1, [pc, #32]	; (165c <saveSinglePhasingVoltage+0x38>)
    163a:	4b09      	ldr	r3, [pc, #36]	; (1660 <saveSinglePhasingVoltage+0x3c>)
    163c:	222c      	movs	r2, #44	; 0x2c
    163e:	0018      	movs	r0, r3
    1640:	4b08      	ldr	r3, [pc, #32]	; (1664 <saveSinglePhasingVoltage+0x40>)
    1642:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    1644:	4b06      	ldr	r3, [pc, #24]	; (1660 <saveSinglePhasingVoltage+0x3c>)
    1646:	0019      	movs	r1, r3
    1648:	201a      	movs	r0, #26
    164a:	4b07      	ldr	r3, [pc, #28]	; (1668 <saveSinglePhasingVoltage+0x44>)
    164c:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    164e:	4b07      	ldr	r3, [pc, #28]	; (166c <saveSinglePhasingVoltage+0x48>)
    1650:	4798      	blx	r3
}
    1652:	46c0      	nop			; (mov r8, r8)
    1654:	46bd      	mov	sp, r7
    1656:	b002      	add	sp, #8
    1658:	bd80      	pop	{r7, pc}
    165a:	46c0      	nop			; (mov r8, r8)
    165c:	2000064c 	.word	0x2000064c
    1660:	20000574 	.word	0x20000574
    1664:	00017b21 	.word	0x00017b21
    1668:	000127e9 	.word	0x000127e9
    166c:	00012991 	.word	0x00012991

00001670 <savePhaseSequenceProtectionSettings>:

void savePhaseSequenceProtectionSettings(bool phaseSequenceSetting)
{
    1670:	b580      	push	{r7, lr}
    1672:	b082      	sub	sp, #8
    1674:	af00      	add	r7, sp, #0
    1676:	0002      	movs	r2, r0
    1678:	1dfb      	adds	r3, r7, #7
    167a:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.detectPhaseSequence= phaseSequenceSetting;
    167c:	1dfb      	adds	r3, r7, #7
    167e:	7819      	ldrb	r1, [r3, #0]
    1680:	4b09      	ldr	r3, [pc, #36]	; (16a8 <savePhaseSequenceProtectionSettings+0x38>)
    1682:	2224      	movs	r2, #36	; 0x24
    1684:	5499      	strb	r1, [r3, r2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    1686:	4908      	ldr	r1, [pc, #32]	; (16a8 <savePhaseSequenceProtectionSettings+0x38>)
    1688:	4b08      	ldr	r3, [pc, #32]	; (16ac <savePhaseSequenceProtectionSettings+0x3c>)
    168a:	222c      	movs	r2, #44	; 0x2c
    168c:	0018      	movs	r0, r3
    168e:	4b08      	ldr	r3, [pc, #32]	; (16b0 <savePhaseSequenceProtectionSettings+0x40>)
    1690:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    1692:	4b06      	ldr	r3, [pc, #24]	; (16ac <savePhaseSequenceProtectionSettings+0x3c>)
    1694:	0019      	movs	r1, r3
    1696:	201a      	movs	r0, #26
    1698:	4b06      	ldr	r3, [pc, #24]	; (16b4 <savePhaseSequenceProtectionSettings+0x44>)
    169a:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    169c:	4b06      	ldr	r3, [pc, #24]	; (16b8 <savePhaseSequenceProtectionSettings+0x48>)
    169e:	4798      	blx	r3
}
    16a0:	46c0      	nop			; (mov r8, r8)
    16a2:	46bd      	mov	sp, r7
    16a4:	b002      	add	sp, #8
    16a6:	bd80      	pop	{r7, pc}
    16a8:	2000064c 	.word	0x2000064c
    16ac:	20000574 	.word	0x20000574
    16b0:	00017b21 	.word	0x00017b21
    16b4:	000127e9 	.word	0x000127e9
    16b8:	00012991 	.word	0x00012991

000016bc <saveMotorFeedbackDetectionSettings>:


void saveMotorFeedbackDetectionSettings(uint8_t motorFeedbackDetection)
{
    16bc:	b580      	push	{r7, lr}
    16be:	b082      	sub	sp, #8
    16c0:	af00      	add	r7, sp, #0
    16c2:	0002      	movs	r2, r0
    16c4:	1dfb      	adds	r3, r7, #7
    16c6:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.detectMotorFeedback = motorFeedbackDetection;
    16c8:	4b0a      	ldr	r3, [pc, #40]	; (16f4 <saveMotorFeedbackDetectionSettings+0x38>)
    16ca:	1dfa      	adds	r2, r7, #7
    16cc:	2125      	movs	r1, #37	; 0x25
    16ce:	7812      	ldrb	r2, [r2, #0]
    16d0:	545a      	strb	r2, [r3, r1]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    16d2:	4908      	ldr	r1, [pc, #32]	; (16f4 <saveMotorFeedbackDetectionSettings+0x38>)
    16d4:	4b08      	ldr	r3, [pc, #32]	; (16f8 <saveMotorFeedbackDetectionSettings+0x3c>)
    16d6:	222c      	movs	r2, #44	; 0x2c
    16d8:	0018      	movs	r0, r3
    16da:	4b08      	ldr	r3, [pc, #32]	; (16fc <saveMotorFeedbackDetectionSettings+0x40>)
    16dc:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    16de:	4b06      	ldr	r3, [pc, #24]	; (16f8 <saveMotorFeedbackDetectionSettings+0x3c>)
    16e0:	0019      	movs	r1, r3
    16e2:	201a      	movs	r0, #26
    16e4:	4b06      	ldr	r3, [pc, #24]	; (1700 <saveMotorFeedbackDetectionSettings+0x44>)
    16e6:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    16e8:	4b06      	ldr	r3, [pc, #24]	; (1704 <saveMotorFeedbackDetectionSettings+0x48>)
    16ea:	4798      	blx	r3
}
    16ec:	46c0      	nop			; (mov r8, r8)
    16ee:	46bd      	mov	sp, r7
    16f0:	b002      	add	sp, #8
    16f2:	bd80      	pop	{r7, pc}
    16f4:	2000064c 	.word	0x2000064c
    16f8:	20000574 	.word	0x20000574
    16fc:	00017b21 	.word	0x00017b21
    1700:	000127e9 	.word	0x000127e9
    1704:	00012991 	.word	0x00012991

00001708 <calcCurrentValues>:


void calcCurrentValues(void)
{
    1708:	b590      	push	{r4, r7, lr}
    170a:	b083      	sub	sp, #12
    170c:	af00      	add	r7, sp, #0
	uint16_t temp = (user_settings_parameter_struct.normalLoadAddress * (float)user_settings_parameter_struct.underloadPerAddress) / 100.0;
    170e:	4b2b      	ldr	r3, [pc, #172]	; (17bc <calcCurrentValues+0xb4>)
    1710:	691a      	ldr	r2, [r3, #16]
    1712:	4b2b      	ldr	r3, [pc, #172]	; (17c0 <calcCurrentValues+0xb8>)
    1714:	0010      	movs	r0, r2
    1716:	4798      	blx	r3
    1718:	1c04      	adds	r4, r0, #0
    171a:	4b28      	ldr	r3, [pc, #160]	; (17bc <calcCurrentValues+0xb4>)
    171c:	7f1a      	ldrb	r2, [r3, #28]
    171e:	4b28      	ldr	r3, [pc, #160]	; (17c0 <calcCurrentValues+0xb8>)
    1720:	0010      	movs	r0, r2
    1722:	4798      	blx	r3
    1724:	1c02      	adds	r2, r0, #0
    1726:	4b27      	ldr	r3, [pc, #156]	; (17c4 <calcCurrentValues+0xbc>)
    1728:	1c11      	adds	r1, r2, #0
    172a:	1c20      	adds	r0, r4, #0
    172c:	4798      	blx	r3
    172e:	1c03      	adds	r3, r0, #0
    1730:	1c1a      	adds	r2, r3, #0
    1732:	4b25      	ldr	r3, [pc, #148]	; (17c8 <calcCurrentValues+0xc0>)
    1734:	1c10      	adds	r0, r2, #0
    1736:	4798      	blx	r3
    1738:	4c24      	ldr	r4, [pc, #144]	; (17cc <calcCurrentValues+0xc4>)
    173a:	2200      	movs	r2, #0
    173c:	4b24      	ldr	r3, [pc, #144]	; (17d0 <calcCurrentValues+0xc8>)
    173e:	47a0      	blx	r4
    1740:	0003      	movs	r3, r0
    1742:	000c      	movs	r4, r1
    1744:	0019      	movs	r1, r3
    1746:	0022      	movs	r2, r4
    1748:	1dbc      	adds	r4, r7, #6
    174a:	4b22      	ldr	r3, [pc, #136]	; (17d4 <calcCurrentValues+0xcc>)
    174c:	0008      	movs	r0, r1
    174e:	0011      	movs	r1, r2
    1750:	4798      	blx	r3
    1752:	0003      	movs	r3, r0
    1754:	8023      	strh	r3, [r4, #0]
	setUnderloadValue(temp);
    1756:	1dbb      	adds	r3, r7, #6
    1758:	881b      	ldrh	r3, [r3, #0]
    175a:	0018      	movs	r0, r3
    175c:	4b1e      	ldr	r3, [pc, #120]	; (17d8 <calcCurrentValues+0xd0>)
    175e:	4798      	blx	r3

	temp = (user_settings_parameter_struct.normalLoadAddress * (float)user_settings_parameter_struct.overloadPerAddress) / 100.0;
    1760:	4b16      	ldr	r3, [pc, #88]	; (17bc <calcCurrentValues+0xb4>)
    1762:	691a      	ldr	r2, [r3, #16]
    1764:	4b16      	ldr	r3, [pc, #88]	; (17c0 <calcCurrentValues+0xb8>)
    1766:	0010      	movs	r0, r2
    1768:	4798      	blx	r3
    176a:	1c04      	adds	r4, r0, #0
    176c:	4b13      	ldr	r3, [pc, #76]	; (17bc <calcCurrentValues+0xb4>)
    176e:	7f5a      	ldrb	r2, [r3, #29]
    1770:	4b13      	ldr	r3, [pc, #76]	; (17c0 <calcCurrentValues+0xb8>)
    1772:	0010      	movs	r0, r2
    1774:	4798      	blx	r3
    1776:	1c02      	adds	r2, r0, #0
    1778:	4b12      	ldr	r3, [pc, #72]	; (17c4 <calcCurrentValues+0xbc>)
    177a:	1c11      	adds	r1, r2, #0
    177c:	1c20      	adds	r0, r4, #0
    177e:	4798      	blx	r3
    1780:	1c03      	adds	r3, r0, #0
    1782:	1c1a      	adds	r2, r3, #0
    1784:	4b10      	ldr	r3, [pc, #64]	; (17c8 <calcCurrentValues+0xc0>)
    1786:	1c10      	adds	r0, r2, #0
    1788:	4798      	blx	r3
    178a:	4c10      	ldr	r4, [pc, #64]	; (17cc <calcCurrentValues+0xc4>)
    178c:	2200      	movs	r2, #0
    178e:	4b10      	ldr	r3, [pc, #64]	; (17d0 <calcCurrentValues+0xc8>)
    1790:	47a0      	blx	r4
    1792:	0003      	movs	r3, r0
    1794:	000c      	movs	r4, r1
    1796:	0019      	movs	r1, r3
    1798:	0022      	movs	r2, r4
    179a:	1dbc      	adds	r4, r7, #6
    179c:	4b0d      	ldr	r3, [pc, #52]	; (17d4 <calcCurrentValues+0xcc>)
    179e:	0008      	movs	r0, r1
    17a0:	0011      	movs	r1, r2
    17a2:	4798      	blx	r3
    17a4:	0003      	movs	r3, r0
    17a6:	8023      	strh	r3, [r4, #0]
	setOverloadValue(temp);
    17a8:	1dbb      	adds	r3, r7, #6
    17aa:	881b      	ldrh	r3, [r3, #0]
    17ac:	0018      	movs	r0, r3
    17ae:	4b0b      	ldr	r3, [pc, #44]	; (17dc <calcCurrentValues+0xd4>)
    17b0:	4798      	blx	r3
}
    17b2:	46c0      	nop			; (mov r8, r8)
    17b4:	46bd      	mov	sp, r7
    17b6:	b003      	add	sp, #12
    17b8:	bd90      	pop	{r4, r7, pc}
    17ba:	46c0      	nop			; (mov r8, r8)
    17bc:	2000064c 	.word	0x2000064c
    17c0:	00015d69 	.word	0x00015d69
    17c4:	00015b29 	.word	0x00015b29
    17c8:	00017945 	.word	0x00017945
    17cc:	00016415 	.word	0x00016415
    17d0:	40590000 	.word	0x40590000
    17d4:	000156dd 	.word	0x000156dd
    17d8:	000017e1 	.word	0x000017e1
    17dc:	00001825 	.word	0x00001825

000017e0 <setUnderloadValue>:

void setUnderloadValue(uint32_t underValue)
{
    17e0:	b580      	push	{r7, lr}
    17e2:	b082      	sub	sp, #8
    17e4:	af00      	add	r7, sp, #0
    17e6:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.underloadAddress = underValue;
    17e8:	4b09      	ldr	r3, [pc, #36]	; (1810 <setUnderloadValue+0x30>)
    17ea:	687a      	ldr	r2, [r7, #4]
    17ec:	619a      	str	r2, [r3, #24]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    17ee:	4908      	ldr	r1, [pc, #32]	; (1810 <setUnderloadValue+0x30>)
    17f0:	4b08      	ldr	r3, [pc, #32]	; (1814 <setUnderloadValue+0x34>)
    17f2:	222c      	movs	r2, #44	; 0x2c
    17f4:	0018      	movs	r0, r3
    17f6:	4b08      	ldr	r3, [pc, #32]	; (1818 <setUnderloadValue+0x38>)
    17f8:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    17fa:	4b06      	ldr	r3, [pc, #24]	; (1814 <setUnderloadValue+0x34>)
    17fc:	0019      	movs	r1, r3
    17fe:	201a      	movs	r0, #26
    1800:	4b06      	ldr	r3, [pc, #24]	; (181c <setUnderloadValue+0x3c>)
    1802:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    1804:	4b06      	ldr	r3, [pc, #24]	; (1820 <setUnderloadValue+0x40>)
    1806:	4798      	blx	r3
}
    1808:	46c0      	nop			; (mov r8, r8)
    180a:	46bd      	mov	sp, r7
    180c:	b002      	add	sp, #8
    180e:	bd80      	pop	{r7, pc}
    1810:	2000064c 	.word	0x2000064c
    1814:	20000574 	.word	0x20000574
    1818:	00017b21 	.word	0x00017b21
    181c:	000127e9 	.word	0x000127e9
    1820:	00012991 	.word	0x00012991

00001824 <setOverloadValue>:

void setOverloadValue(uint32_t overValue)
{
    1824:	b580      	push	{r7, lr}
    1826:	b082      	sub	sp, #8
    1828:	af00      	add	r7, sp, #0
    182a:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.overloadAddress = overValue;
    182c:	4b09      	ldr	r3, [pc, #36]	; (1854 <setOverloadValue+0x30>)
    182e:	687a      	ldr	r2, [r7, #4]
    1830:	615a      	str	r2, [r3, #20]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    1832:	4908      	ldr	r1, [pc, #32]	; (1854 <setOverloadValue+0x30>)
    1834:	4b08      	ldr	r3, [pc, #32]	; (1858 <setOverloadValue+0x34>)
    1836:	222c      	movs	r2, #44	; 0x2c
    1838:	0018      	movs	r0, r3
    183a:	4b08      	ldr	r3, [pc, #32]	; (185c <setOverloadValue+0x38>)
    183c:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    183e:	4b06      	ldr	r3, [pc, #24]	; (1858 <setOverloadValue+0x34>)
    1840:	0019      	movs	r1, r3
    1842:	201a      	movs	r0, #26
    1844:	4b06      	ldr	r3, [pc, #24]	; (1860 <setOverloadValue+0x3c>)
    1846:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    1848:	4b06      	ldr	r3, [pc, #24]	; (1864 <setOverloadValue+0x40>)
    184a:	4798      	blx	r3
}
    184c:	46c0      	nop			; (mov r8, r8)
    184e:	46bd      	mov	sp, r7
    1850:	b002      	add	sp, #8
    1852:	bd80      	pop	{r7, pc}
    1854:	2000064c 	.word	0x2000064c
    1858:	20000574 	.word	0x20000574
    185c:	00017b21 	.word	0x00017b21
    1860:	000127e9 	.word	0x000127e9
    1864:	00012991 	.word	0x00012991

00001868 <setNormalLoadValue>:

void setNormalLoadValue(uint32_t normalVal)
{
    1868:	b580      	push	{r7, lr}
    186a:	b082      	sub	sp, #8
    186c:	af00      	add	r7, sp, #0
    186e:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.normalLoadAddress = normalVal;
    1870:	4b09      	ldr	r3, [pc, #36]	; (1898 <setNormalLoadValue+0x30>)
    1872:	687a      	ldr	r2, [r7, #4]
    1874:	611a      	str	r2, [r3, #16]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    1876:	4908      	ldr	r1, [pc, #32]	; (1898 <setNormalLoadValue+0x30>)
    1878:	4b08      	ldr	r3, [pc, #32]	; (189c <setNormalLoadValue+0x34>)
    187a:	222c      	movs	r2, #44	; 0x2c
    187c:	0018      	movs	r0, r3
    187e:	4b08      	ldr	r3, [pc, #32]	; (18a0 <setNormalLoadValue+0x38>)
    1880:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    1882:	4b06      	ldr	r3, [pc, #24]	; (189c <setNormalLoadValue+0x34>)
    1884:	0019      	movs	r1, r3
    1886:	201a      	movs	r0, #26
    1888:	4b06      	ldr	r3, [pc, #24]	; (18a4 <setNormalLoadValue+0x3c>)
    188a:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    188c:	4b06      	ldr	r3, [pc, #24]	; (18a8 <setNormalLoadValue+0x40>)
    188e:	4798      	blx	r3
}
    1890:	46c0      	nop			; (mov r8, r8)
    1892:	46bd      	mov	sp, r7
    1894:	b002      	add	sp, #8
    1896:	bd80      	pop	{r7, pc}
    1898:	2000064c 	.word	0x2000064c
    189c:	20000574 	.word	0x20000574
    18a0:	00017b21 	.word	0x00017b21
    18a4:	000127e9 	.word	0x000127e9
    18a8:	00012991 	.word	0x00012991

000018ac <setCurrentDetection>:

void setCurrentDetection(bool cValue)
{
    18ac:	b580      	push	{r7, lr}
    18ae:	b082      	sub	sp, #8
    18b0:	af00      	add	r7, sp, #0
    18b2:	0002      	movs	r2, r0
    18b4:	1dfb      	adds	r3, r7, #7
    18b6:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.currentDetectionAddress = cValue;
    18b8:	1dfb      	adds	r3, r7, #7
    18ba:	781a      	ldrb	r2, [r3, #0]
    18bc:	4b09      	ldr	r3, [pc, #36]	; (18e4 <setCurrentDetection+0x38>)
    18be:	73da      	strb	r2, [r3, #15]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    18c0:	4908      	ldr	r1, [pc, #32]	; (18e4 <setCurrentDetection+0x38>)
    18c2:	4b09      	ldr	r3, [pc, #36]	; (18e8 <setCurrentDetection+0x3c>)
    18c4:	222c      	movs	r2, #44	; 0x2c
    18c6:	0018      	movs	r0, r3
    18c8:	4b08      	ldr	r3, [pc, #32]	; (18ec <setCurrentDetection+0x40>)
    18ca:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    18cc:	4b06      	ldr	r3, [pc, #24]	; (18e8 <setCurrentDetection+0x3c>)
    18ce:	0019      	movs	r1, r3
    18d0:	201a      	movs	r0, #26
    18d2:	4b07      	ldr	r3, [pc, #28]	; (18f0 <setCurrentDetection+0x44>)
    18d4:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    18d6:	4b07      	ldr	r3, [pc, #28]	; (18f4 <setCurrentDetection+0x48>)
    18d8:	4798      	blx	r3
}
    18da:	46c0      	nop			; (mov r8, r8)
    18dc:	46bd      	mov	sp, r7
    18de:	b002      	add	sp, #8
    18e0:	bd80      	pop	{r7, pc}
    18e2:	46c0      	nop			; (mov r8, r8)
    18e4:	2000064c 	.word	0x2000064c
    18e8:	20000574 	.word	0x20000574
    18ec:	00017b21 	.word	0x00017b21
    18f0:	000127e9 	.word	0x000127e9
    18f4:	00012991 	.word	0x00012991

000018f8 <saveStarDeltaTimer>:
	strcpy(deviceID,factory_settings_parameter_struct.DeviceID_ee);
	return deviceID;
}

void saveStarDeltaTimer(uint16_t StartDeltaTime)
{
    18f8:	b580      	push	{r7, lr}
    18fa:	b082      	sub	sp, #8
    18fc:	af00      	add	r7, sp, #0
    18fe:	0002      	movs	r2, r0
    1900:	1dbb      	adds	r3, r7, #6
    1902:	801a      	strh	r2, [r3, #0]
	user_settings_parameter_struct.starDeltaTimerAddress = StartDeltaTime;
    1904:	4b0a      	ldr	r3, [pc, #40]	; (1930 <saveStarDeltaTimer+0x38>)
    1906:	1dba      	adds	r2, r7, #6
    1908:	8812      	ldrh	r2, [r2, #0]
    190a:	80da      	strh	r2, [r3, #6]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    190c:	4908      	ldr	r1, [pc, #32]	; (1930 <saveStarDeltaTimer+0x38>)
    190e:	4b09      	ldr	r3, [pc, #36]	; (1934 <saveStarDeltaTimer+0x3c>)
    1910:	222c      	movs	r2, #44	; 0x2c
    1912:	0018      	movs	r0, r3
    1914:	4b08      	ldr	r3, [pc, #32]	; (1938 <saveStarDeltaTimer+0x40>)
    1916:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    1918:	4b06      	ldr	r3, [pc, #24]	; (1934 <saveStarDeltaTimer+0x3c>)
    191a:	0019      	movs	r1, r3
    191c:	201a      	movs	r0, #26
    191e:	4b07      	ldr	r3, [pc, #28]	; (193c <saveStarDeltaTimer+0x44>)
    1920:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    1922:	4b07      	ldr	r3, [pc, #28]	; (1940 <saveStarDeltaTimer+0x48>)
    1924:	4798      	blx	r3
}
    1926:	46c0      	nop			; (mov r8, r8)
    1928:	46bd      	mov	sp, r7
    192a:	b002      	add	sp, #8
    192c:	bd80      	pop	{r7, pc}
    192e:	46c0      	nop			; (mov r8, r8)
    1930:	2000064c 	.word	0x2000064c
    1934:	20000574 	.word	0x20000574
    1938:	00017b21 	.word	0x00017b21
    193c:	000127e9 	.word	0x000127e9
    1940:	00012991 	.word	0x00012991

00001944 <saveEventStageSettings>:

void saveEventStageSettings(uint8_t data)
{
    1944:	b580      	push	{r7, lr}
    1946:	b082      	sub	sp, #8
    1948:	af00      	add	r7, sp, #0
    194a:	0002      	movs	r2, r0
    194c:	1dfb      	adds	r3, r7, #7
    194e:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.eventStageAddress = data;
    1950:	4b0a      	ldr	r3, [pc, #40]	; (197c <saveEventStageSettings+0x38>)
    1952:	1dfa      	adds	r2, r7, #7
    1954:	7812      	ldrb	r2, [r2, #0]
    1956:	721a      	strb	r2, [r3, #8]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    1958:	4908      	ldr	r1, [pc, #32]	; (197c <saveEventStageSettings+0x38>)
    195a:	4b09      	ldr	r3, [pc, #36]	; (1980 <saveEventStageSettings+0x3c>)
    195c:	222c      	movs	r2, #44	; 0x2c
    195e:	0018      	movs	r0, r3
    1960:	4b08      	ldr	r3, [pc, #32]	; (1984 <saveEventStageSettings+0x40>)
    1962:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    1964:	4b06      	ldr	r3, [pc, #24]	; (1980 <saveEventStageSettings+0x3c>)
    1966:	0019      	movs	r1, r3
    1968:	201a      	movs	r0, #26
    196a:	4b07      	ldr	r3, [pc, #28]	; (1988 <saveEventStageSettings+0x44>)
    196c:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    196e:	4b07      	ldr	r3, [pc, #28]	; (198c <saveEventStageSettings+0x48>)
    1970:	4798      	blx	r3
}
    1972:	46c0      	nop			; (mov r8, r8)
    1974:	46bd      	mov	sp, r7
    1976:	b002      	add	sp, #8
    1978:	bd80      	pop	{r7, pc}
    197a:	46c0      	nop			; (mov r8, r8)
    197c:	2000064c 	.word	0x2000064c
    1980:	20000574 	.word	0x20000574
    1984:	00017b21 	.word	0x00017b21
    1988:	000127e9 	.word	0x000127e9
    198c:	00012991 	.word	0x00012991

00001990 <isAdmin>:

bool isAdmin(char *number)
{
    1990:	b580      	push	{r7, lr}
    1992:	b08a      	sub	sp, #40	; 0x28
    1994:	af00      	add	r7, sp, #0
    1996:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<5;i++)
    1998:	2327      	movs	r3, #39	; 0x27
    199a:	18fb      	adds	r3, r7, r3
    199c:	2200      	movs	r2, #0
    199e:	701a      	strb	r2, [r3, #0]
    19a0:	e02b      	b.n	19fa <isAdmin+0x6a>
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
    19a2:	4b1b      	ldr	r3, [pc, #108]	; (1a10 <isAdmin+0x80>)
    19a4:	223c      	movs	r2, #60	; 0x3c
    19a6:	2100      	movs	r1, #0
    19a8:	0018      	movs	r0, r3
    19aa:	4b1a      	ldr	r3, [pc, #104]	; (1a14 <isAdmin+0x84>)
    19ac:	4798      	blx	r3
		eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE+i, page_data);
    19ae:	2327      	movs	r3, #39	; 0x27
    19b0:	18fb      	adds	r3, r7, r3
    19b2:	781b      	ldrb	r3, [r3, #0]
    19b4:	3303      	adds	r3, #3
    19b6:	b2db      	uxtb	r3, r3
    19b8:	4a15      	ldr	r2, [pc, #84]	; (1a10 <isAdmin+0x80>)
    19ba:	0011      	movs	r1, r2
    19bc:	0018      	movs	r0, r3
    19be:	4b16      	ldr	r3, [pc, #88]	; (1a18 <isAdmin+0x88>)
    19c0:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
    19c2:	230c      	movs	r3, #12
    19c4:	18fa      	adds	r2, r7, r3
    19c6:	4b12      	ldr	r3, [pc, #72]	; (1a10 <isAdmin+0x80>)
    19c8:	0010      	movs	r0, r2
    19ca:	0019      	movs	r1, r3
    19cc:	2318      	movs	r3, #24
    19ce:	001a      	movs	r2, r3
    19d0:	4b12      	ldr	r3, [pc, #72]	; (1a1c <isAdmin+0x8c>)
    19d2:	4798      	blx	r3
		
		if (strstr(number,mobile_no.mobile_no_ee))
    19d4:	230c      	movs	r3, #12
    19d6:	18fb      	adds	r3, r7, r3
    19d8:	1d1a      	adds	r2, r3, #4
    19da:	687b      	ldr	r3, [r7, #4]
    19dc:	0011      	movs	r1, r2
    19de:	0018      	movs	r0, r3
    19e0:	4b0f      	ldr	r3, [pc, #60]	; (1a20 <isAdmin+0x90>)
    19e2:	4798      	blx	r3
    19e4:	1e03      	subs	r3, r0, #0
    19e6:	d001      	beq.n	19ec <isAdmin+0x5c>
		{
			return true;
    19e8:	2301      	movs	r3, #1
    19ea:	e00c      	b.n	1a06 <isAdmin+0x76>
	for (uint8_t i=0;i<5;i++)
    19ec:	2327      	movs	r3, #39	; 0x27
    19ee:	18fb      	adds	r3, r7, r3
    19f0:	781a      	ldrb	r2, [r3, #0]
    19f2:	2327      	movs	r3, #39	; 0x27
    19f4:	18fb      	adds	r3, r7, r3
    19f6:	3201      	adds	r2, #1
    19f8:	701a      	strb	r2, [r3, #0]
    19fa:	2327      	movs	r3, #39	; 0x27
    19fc:	18fb      	adds	r3, r7, r3
    19fe:	781b      	ldrb	r3, [r3, #0]
    1a00:	2b04      	cmp	r3, #4
    1a02:	d9ce      	bls.n	19a2 <isAdmin+0x12>
		}
	}
	return false;
    1a04:	2300      	movs	r3, #0
}
    1a06:	0018      	movs	r0, r3
    1a08:	46bd      	mov	sp, r7
    1a0a:	b00a      	add	sp, #40	; 0x28
    1a0c:	bd80      	pop	{r7, pc}
    1a0e:	46c0      	nop			; (mov r8, r8)
    1a10:	20000574 	.word	0x20000574
    1a14:	00017b57 	.word	0x00017b57
    1a18:	000128f5 	.word	0x000128f5
    1a1c:	00017b21 	.word	0x00017b21
    1a20:	00017e17 	.word	0x00017e17

00001a24 <setPrimaryNumberIndex>:


void setPrimaryNumberIndex(uint8_t index)
{
    1a24:	b580      	push	{r7, lr}
    1a26:	b082      	sub	sp, #8
    1a28:	af00      	add	r7, sp, #0
    1a2a:	0002      	movs	r2, r0
    1a2c:	1dfb      	adds	r3, r7, #7
    1a2e:	701a      	strb	r2, [r3, #0]
	user_count_struct.primaryNumberIndex = index;
    1a30:	4b0b      	ldr	r3, [pc, #44]	; (1a60 <setPrimaryNumberIndex+0x3c>)
    1a32:	1dfa      	adds	r2, r7, #7
    1a34:	7812      	ldrb	r2, [r2, #0]
    1a36:	70da      	strb	r2, [r3, #3]
	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
    1a38:	4a0a      	ldr	r2, [pc, #40]	; (1a64 <setPrimaryNumberIndex+0x40>)
    1a3a:	4b09      	ldr	r3, [pc, #36]	; (1a60 <setPrimaryNumberIndex+0x3c>)
    1a3c:	0010      	movs	r0, r2
    1a3e:	0019      	movs	r1, r3
    1a40:	2308      	movs	r3, #8
    1a42:	001a      	movs	r2, r3
    1a44:	4b08      	ldr	r3, [pc, #32]	; (1a68 <setPrimaryNumberIndex+0x44>)
    1a46:	4798      	blx	r3
	eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
    1a48:	4b06      	ldr	r3, [pc, #24]	; (1a64 <setPrimaryNumberIndex+0x40>)
    1a4a:	0019      	movs	r1, r3
    1a4c:	2008      	movs	r0, #8
    1a4e:	4b07      	ldr	r3, [pc, #28]	; (1a6c <setPrimaryNumberIndex+0x48>)
    1a50:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    1a52:	4b07      	ldr	r3, [pc, #28]	; (1a70 <setPrimaryNumberIndex+0x4c>)
    1a54:	4798      	blx	r3

}
    1a56:	46c0      	nop			; (mov r8, r8)
    1a58:	46bd      	mov	sp, r7
    1a5a:	b002      	add	sp, #8
    1a5c:	bd80      	pop	{r7, pc}
    1a5e:	46c0      	nop			; (mov r8, r8)
    1a60:	20000600 	.word	0x20000600
    1a64:	20000574 	.word	0x20000574
    1a68:	00017b21 	.word	0x00017b21
    1a6c:	000127e9 	.word	0x000127e9
    1a70:	00012991 	.word	0x00012991

00001a74 <setSecondaryNumberIndex>:

void setSecondaryNumberIndex(uint8_t index)
{
    1a74:	b580      	push	{r7, lr}
    1a76:	b082      	sub	sp, #8
    1a78:	af00      	add	r7, sp, #0
    1a7a:	0002      	movs	r2, r0
    1a7c:	1dfb      	adds	r3, r7, #7
    1a7e:	701a      	strb	r2, [r3, #0]
	user_count_struct.secondaryNumberIndex = index;
    1a80:	4b0b      	ldr	r3, [pc, #44]	; (1ab0 <setSecondaryNumberIndex+0x3c>)
    1a82:	1dfa      	adds	r2, r7, #7
    1a84:	7812      	ldrb	r2, [r2, #0]
    1a86:	711a      	strb	r2, [r3, #4]
	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
    1a88:	4a0a      	ldr	r2, [pc, #40]	; (1ab4 <setSecondaryNumberIndex+0x40>)
    1a8a:	4b09      	ldr	r3, [pc, #36]	; (1ab0 <setSecondaryNumberIndex+0x3c>)
    1a8c:	0010      	movs	r0, r2
    1a8e:	0019      	movs	r1, r3
    1a90:	2308      	movs	r3, #8
    1a92:	001a      	movs	r2, r3
    1a94:	4b08      	ldr	r3, [pc, #32]	; (1ab8 <setSecondaryNumberIndex+0x44>)
    1a96:	4798      	blx	r3
	eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
    1a98:	4b06      	ldr	r3, [pc, #24]	; (1ab4 <setSecondaryNumberIndex+0x40>)
    1a9a:	0019      	movs	r1, r3
    1a9c:	2008      	movs	r0, #8
    1a9e:	4b07      	ldr	r3, [pc, #28]	; (1abc <setSecondaryNumberIndex+0x48>)
    1aa0:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    1aa2:	4b07      	ldr	r3, [pc, #28]	; (1ac0 <setSecondaryNumberIndex+0x4c>)
    1aa4:	4798      	blx	r3
}
    1aa6:	46c0      	nop			; (mov r8, r8)
    1aa8:	46bd      	mov	sp, r7
    1aaa:	b002      	add	sp, #8
    1aac:	bd80      	pop	{r7, pc}
    1aae:	46c0      	nop			; (mov r8, r8)
    1ab0:	20000600 	.word	0x20000600
    1ab4:	20000574 	.word	0x20000574
    1ab8:	00017b21 	.word	0x00017b21
    1abc:	000127e9 	.word	0x000127e9
    1ac0:	00012991 	.word	0x00012991

00001ac4 <addPrimaryIndexedNumber>:

bool addPrimaryIndexedNumber(char *number)
{
    1ac4:	b590      	push	{r4, r7, lr}
    1ac6:	b085      	sub	sp, #20
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
	//checkUserExists would return a 1 based index,starting at 1 and not at 0
	uint8_t index = checkExists(number);
    1acc:	230e      	movs	r3, #14
    1ace:	18fc      	adds	r4, r7, r3
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	0018      	movs	r0, r3
    1ad4:	4b21      	ldr	r3, [pc, #132]	; (1b5c <addPrimaryIndexedNumber+0x98>)
    1ad6:	4798      	blx	r3
    1ad8:	0003      	movs	r3, r0
    1ada:	7023      	strb	r3, [r4, #0]

	uint8_t newPrimaryIndex=0xFF;
    1adc:	230f      	movs	r3, #15
    1ade:	18fb      	adds	r3, r7, r3
    1ae0:	22ff      	movs	r2, #255	; 0xff
    1ae2:	701a      	strb	r2, [r3, #0]
	if(index >= user_count_struct.total_user_no_count)								//the numebr does not exists, need to add it
    1ae4:	4b1e      	ldr	r3, [pc, #120]	; (1b60 <addPrimaryIndexedNumber+0x9c>)
    1ae6:	785b      	ldrb	r3, [r3, #1]
    1ae8:	220e      	movs	r2, #14
    1aea:	18ba      	adds	r2, r7, r2
    1aec:	7812      	ldrb	r2, [r2, #0]
    1aee:	429a      	cmp	r2, r3
    1af0:	d309      	bcc.n	1b06 <addPrimaryIndexedNumber+0x42>
	{
		newPrimaryIndex = user_count_struct.current_user_no_count;
    1af2:	230f      	movs	r3, #15
    1af4:	18fb      	adds	r3, r7, r3
    1af6:	4a1a      	ldr	r2, [pc, #104]	; (1b60 <addPrimaryIndexedNumber+0x9c>)
    1af8:	7892      	ldrb	r2, [r2, #2]
    1afa:	701a      	strb	r2, [r3, #0]
		addNumber(number);
    1afc:	687b      	ldr	r3, [r7, #4]
    1afe:	0018      	movs	r0, r3
    1b00:	4b18      	ldr	r3, [pc, #96]	; (1b64 <addPrimaryIndexedNumber+0xa0>)
    1b02:	4798      	blx	r3
    1b04:	e00c      	b.n	1b20 <addPrimaryIndexedNumber+0x5c>
	}
	else if(index<user_count_struct.total_user_no_count)
    1b06:	4b16      	ldr	r3, [pc, #88]	; (1b60 <addPrimaryIndexedNumber+0x9c>)
    1b08:	785b      	ldrb	r3, [r3, #1]
    1b0a:	220e      	movs	r2, #14
    1b0c:	18ba      	adds	r2, r7, r2
    1b0e:	7812      	ldrb	r2, [r2, #0]
    1b10:	429a      	cmp	r2, r3
    1b12:	d205      	bcs.n	1b20 <addPrimaryIndexedNumber+0x5c>
	{
		newPrimaryIndex = index;
    1b14:	230f      	movs	r3, #15
    1b16:	18fb      	adds	r3, r7, r3
    1b18:	220e      	movs	r2, #14
    1b1a:	18ba      	adds	r2, r7, r2
    1b1c:	7812      	ldrb	r2, [r2, #0]
    1b1e:	701a      	strb	r2, [r3, #0]
	}

	if(newPrimaryIndex < user_count_struct.total_user_no_count)
    1b20:	4b0f      	ldr	r3, [pc, #60]	; (1b60 <addPrimaryIndexedNumber+0x9c>)
    1b22:	785b      	ldrb	r3, [r3, #1]
    1b24:	220f      	movs	r2, #15
    1b26:	18ba      	adds	r2, r7, r2
    1b28:	7812      	ldrb	r2, [r2, #0]
    1b2a:	429a      	cmp	r2, r3
    1b2c:	d210      	bcs.n	1b50 <addPrimaryIndexedNumber+0x8c>
	{
		// if current numbers present are more than 1, than set the previous primary number as secondary number
		if (user_count_struct.current_user_no_count>1)
    1b2e:	4b0c      	ldr	r3, [pc, #48]	; (1b60 <addPrimaryIndexedNumber+0x9c>)
    1b30:	789b      	ldrb	r3, [r3, #2]
    1b32:	2b01      	cmp	r3, #1
    1b34:	d904      	bls.n	1b40 <addPrimaryIndexedNumber+0x7c>
		{
			setSecondaryNumberIndex(user_count_struct.primaryNumberIndex);
    1b36:	4b0a      	ldr	r3, [pc, #40]	; (1b60 <addPrimaryIndexedNumber+0x9c>)
    1b38:	78db      	ldrb	r3, [r3, #3]
    1b3a:	0018      	movs	r0, r3
    1b3c:	4b0a      	ldr	r3, [pc, #40]	; (1b68 <addPrimaryIndexedNumber+0xa4>)
    1b3e:	4798      	blx	r3
		}
		
		setPrimaryNumberIndex(newPrimaryIndex);
    1b40:	230f      	movs	r3, #15
    1b42:	18fb      	adds	r3, r7, r3
    1b44:	781b      	ldrb	r3, [r3, #0]
    1b46:	0018      	movs	r0, r3
    1b48:	4b08      	ldr	r3, [pc, #32]	; (1b6c <addPrimaryIndexedNumber+0xa8>)
    1b4a:	4798      	blx	r3
		return true;
    1b4c:	2301      	movs	r3, #1
    1b4e:	e000      	b.n	1b52 <addPrimaryIndexedNumber+0x8e>
	}

	return false;
    1b50:	2300      	movs	r3, #0
}
    1b52:	0018      	movs	r0, r3
    1b54:	46bd      	mov	sp, r7
    1b56:	b005      	add	sp, #20
    1b58:	bd90      	pop	{r4, r7, pc}
    1b5a:	46c0      	nop			; (mov r8, r8)
    1b5c:	00000ded 	.word	0x00000ded
    1b60:	20000600 	.word	0x20000600
    1b64:	00000ef1 	.word	0x00000ef1
    1b68:	00001a75 	.word	0x00001a75
    1b6c:	00001a25 	.word	0x00001a25

00001b70 <addSecondaryIndexedNumber>:

bool addSecondaryIndexedNumber(char *number)
{
    1b70:	b590      	push	{r4, r7, lr}
    1b72:	b085      	sub	sp, #20
    1b74:	af00      	add	r7, sp, #0
    1b76:	6078      	str	r0, [r7, #4]
	//check if any 2 numbers are present in system one of which would be primary, than only allow to add secondary number
	if(user_count_struct.current_user_no_count<2)
    1b78:	4b21      	ldr	r3, [pc, #132]	; (1c00 <addSecondaryIndexedNumber+0x90>)
    1b7a:	789b      	ldrb	r3, [r3, #2]
    1b7c:	2b01      	cmp	r3, #1
    1b7e:	d801      	bhi.n	1b84 <addSecondaryIndexedNumber+0x14>
	return false;
    1b80:	2300      	movs	r3, #0
    1b82:	e039      	b.n	1bf8 <addSecondaryIndexedNumber+0x88>

	//checkUserExists would return a 1 based index,starting at 1 and not at 0
	uint8_t index = checkExists(number);
    1b84:	230e      	movs	r3, #14
    1b86:	18fc      	adds	r4, r7, r3
    1b88:	687b      	ldr	r3, [r7, #4]
    1b8a:	0018      	movs	r0, r3
    1b8c:	4b1d      	ldr	r3, [pc, #116]	; (1c04 <addSecondaryIndexedNumber+0x94>)
    1b8e:	4798      	blx	r3
    1b90:	0003      	movs	r3, r0
    1b92:	7023      	strb	r3, [r4, #0]

	uint8_t newSecondaryIndex=0xFF;
    1b94:	230f      	movs	r3, #15
    1b96:	18fb      	adds	r3, r7, r3
    1b98:	22ff      	movs	r2, #255	; 0xff
    1b9a:	701a      	strb	r2, [r3, #0]
	if(index >= user_count_struct.total_user_no_count)								//number not present, need to add the number
    1b9c:	4b18      	ldr	r3, [pc, #96]	; (1c00 <addSecondaryIndexedNumber+0x90>)
    1b9e:	785b      	ldrb	r3, [r3, #1]
    1ba0:	220e      	movs	r2, #14
    1ba2:	18ba      	adds	r2, r7, r2
    1ba4:	7812      	ldrb	r2, [r2, #0]
    1ba6:	429a      	cmp	r2, r3
    1ba8:	d309      	bcc.n	1bbe <addSecondaryIndexedNumber+0x4e>
	{
		newSecondaryIndex = user_count_struct.current_user_no_count;
    1baa:	230f      	movs	r3, #15
    1bac:	18fb      	adds	r3, r7, r3
    1bae:	4a14      	ldr	r2, [pc, #80]	; (1c00 <addSecondaryIndexedNumber+0x90>)
    1bb0:	7892      	ldrb	r2, [r2, #2]
    1bb2:	701a      	strb	r2, [r3, #0]
		addNumber(number);
    1bb4:	687b      	ldr	r3, [r7, #4]
    1bb6:	0018      	movs	r0, r3
    1bb8:	4b13      	ldr	r3, [pc, #76]	; (1c08 <addSecondaryIndexedNumber+0x98>)
    1bba:	4798      	blx	r3
    1bbc:	e00c      	b.n	1bd8 <addSecondaryIndexedNumber+0x68>
	}
	else if(index < user_count_struct.total_user_no_count)
    1bbe:	4b10      	ldr	r3, [pc, #64]	; (1c00 <addSecondaryIndexedNumber+0x90>)
    1bc0:	785b      	ldrb	r3, [r3, #1]
    1bc2:	220e      	movs	r2, #14
    1bc4:	18ba      	adds	r2, r7, r2
    1bc6:	7812      	ldrb	r2, [r2, #0]
    1bc8:	429a      	cmp	r2, r3
    1bca:	d205      	bcs.n	1bd8 <addSecondaryIndexedNumber+0x68>
	{
		newSecondaryIndex = index;
    1bcc:	230f      	movs	r3, #15
    1bce:	18fb      	adds	r3, r7, r3
    1bd0:	220e      	movs	r2, #14
    1bd2:	18ba      	adds	r2, r7, r2
    1bd4:	7812      	ldrb	r2, [r2, #0]
    1bd6:	701a      	strb	r2, [r3, #0]
	}

	if(newSecondaryIndex < user_count_struct.total_user_no_count)
    1bd8:	4b09      	ldr	r3, [pc, #36]	; (1c00 <addSecondaryIndexedNumber+0x90>)
    1bda:	785b      	ldrb	r3, [r3, #1]
    1bdc:	220f      	movs	r2, #15
    1bde:	18ba      	adds	r2, r7, r2
    1be0:	7812      	ldrb	r2, [r2, #0]
    1be2:	429a      	cmp	r2, r3
    1be4:	d207      	bcs.n	1bf6 <addSecondaryIndexedNumber+0x86>
	{
		setSecondaryNumberIndex(newSecondaryIndex);
    1be6:	230f      	movs	r3, #15
    1be8:	18fb      	adds	r3, r7, r3
    1bea:	781b      	ldrb	r3, [r3, #0]
    1bec:	0018      	movs	r0, r3
    1bee:	4b07      	ldr	r3, [pc, #28]	; (1c0c <addSecondaryIndexedNumber+0x9c>)
    1bf0:	4798      	blx	r3
		return true;
    1bf2:	2301      	movs	r3, #1
    1bf4:	e000      	b.n	1bf8 <addSecondaryIndexedNumber+0x88>
	}
	return false;
    1bf6:	2300      	movs	r3, #0
}
    1bf8:	0018      	movs	r0, r3
    1bfa:	46bd      	mov	sp, r7
    1bfc:	b005      	add	sp, #20
    1bfe:	bd90      	pop	{r4, r7, pc}
    1c00:	20000600 	.word	0x20000600
    1c04:	00000ded 	.word	0x00000ded
    1c08:	00000ef1 	.word	0x00000ef1
    1c0c:	00001a75 	.word	0x00001a75

00001c10 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    1c10:	b580      	push	{r7, lr}
    1c12:	b082      	sub	sp, #8
    1c14:	af00      	add	r7, sp, #0
    1c16:	0002      	movs	r2, r0
    1c18:	1dfb      	adds	r3, r7, #7
    1c1a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1c1c:	4b06      	ldr	r3, [pc, #24]	; (1c38 <system_interrupt_enable+0x28>)
    1c1e:	1dfa      	adds	r2, r7, #7
    1c20:	7812      	ldrb	r2, [r2, #0]
    1c22:	0011      	movs	r1, r2
    1c24:	221f      	movs	r2, #31
    1c26:	400a      	ands	r2, r1
    1c28:	2101      	movs	r1, #1
    1c2a:	4091      	lsls	r1, r2
    1c2c:	000a      	movs	r2, r1
    1c2e:	601a      	str	r2, [r3, #0]
}
    1c30:	46c0      	nop			; (mov r8, r8)
    1c32:	46bd      	mov	sp, r7
    1c34:	b002      	add	sp, #8
    1c36:	bd80      	pop	{r7, pc}
    1c38:	e000e100 	.word	0xe000e100

00001c3c <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    1c3c:	b580      	push	{r7, lr}
    1c3e:	b082      	sub	sp, #8
    1c40:	af00      	add	r7, sp, #0
    1c42:	0002      	movs	r2, r0
    1c44:	1dfb      	adds	r3, r7, #7
    1c46:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1c48:	4a07      	ldr	r2, [pc, #28]	; (1c68 <system_interrupt_disable+0x2c>)
    1c4a:	1dfb      	adds	r3, r7, #7
    1c4c:	781b      	ldrb	r3, [r3, #0]
    1c4e:	0019      	movs	r1, r3
    1c50:	231f      	movs	r3, #31
    1c52:	400b      	ands	r3, r1
    1c54:	2101      	movs	r1, #1
    1c56:	4099      	lsls	r1, r3
    1c58:	000b      	movs	r3, r1
    1c5a:	0019      	movs	r1, r3
    1c5c:	2380      	movs	r3, #128	; 0x80
    1c5e:	50d1      	str	r1, [r2, r3]
}
    1c60:	46c0      	nop			; (mov r8, r8)
    1c62:	46bd      	mov	sp, r7
    1c64:	b002      	add	sp, #8
    1c66:	bd80      	pop	{r7, pc}
    1c68:	e000e100 	.word	0xe000e100

00001c6c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1c6c:	b580      	push	{r7, lr}
    1c6e:	b084      	sub	sp, #16
    1c70:	af00      	add	r7, sp, #0
    1c72:	0002      	movs	r2, r0
    1c74:	1dfb      	adds	r3, r7, #7
    1c76:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1c78:	230f      	movs	r3, #15
    1c7a:	18fb      	adds	r3, r7, r3
    1c7c:	1dfa      	adds	r2, r7, #7
    1c7e:	7812      	ldrb	r2, [r2, #0]
    1c80:	09d2      	lsrs	r2, r2, #7
    1c82:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1c84:	230e      	movs	r3, #14
    1c86:	18fb      	adds	r3, r7, r3
    1c88:	1dfa      	adds	r2, r7, #7
    1c8a:	7812      	ldrb	r2, [r2, #0]
    1c8c:	0952      	lsrs	r2, r2, #5
    1c8e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1c90:	4b0d      	ldr	r3, [pc, #52]	; (1cc8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1c92:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    1c94:	230f      	movs	r3, #15
    1c96:	18fb      	adds	r3, r7, r3
    1c98:	781b      	ldrb	r3, [r3, #0]
    1c9a:	2b00      	cmp	r3, #0
    1c9c:	d10f      	bne.n	1cbe <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1c9e:	230f      	movs	r3, #15
    1ca0:	18fb      	adds	r3, r7, r3
    1ca2:	781b      	ldrb	r3, [r3, #0]
    1ca4:	009b      	lsls	r3, r3, #2
    1ca6:	2210      	movs	r2, #16
    1ca8:	4694      	mov	ip, r2
    1caa:	44bc      	add	ip, r7
    1cac:	4463      	add	r3, ip
    1cae:	3b08      	subs	r3, #8
    1cb0:	681a      	ldr	r2, [r3, #0]
    1cb2:	230e      	movs	r3, #14
    1cb4:	18fb      	adds	r3, r7, r3
    1cb6:	781b      	ldrb	r3, [r3, #0]
    1cb8:	01db      	lsls	r3, r3, #7
    1cba:	18d3      	adds	r3, r2, r3
    1cbc:	e000      	b.n	1cc0 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    1cbe:	2300      	movs	r3, #0
	}
}
    1cc0:	0018      	movs	r0, r3
    1cc2:	46bd      	mov	sp, r7
    1cc4:	b004      	add	sp, #16
    1cc6:	bd80      	pop	{r7, pc}
    1cc8:	41004400 	.word	0x41004400

00001ccc <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1ccc:	b580      	push	{r7, lr}
    1cce:	b082      	sub	sp, #8
    1cd0:	af00      	add	r7, sp, #0
    1cd2:	0002      	movs	r2, r0
    1cd4:	1dfb      	adds	r3, r7, #7
    1cd6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1cd8:	1dfb      	adds	r3, r7, #7
    1cda:	781b      	ldrb	r3, [r3, #0]
    1cdc:	0018      	movs	r0, r3
    1cde:	4b03      	ldr	r3, [pc, #12]	; (1cec <port_get_group_from_gpio_pin+0x20>)
    1ce0:	4798      	blx	r3
    1ce2:	0003      	movs	r3, r0
}
    1ce4:	0018      	movs	r0, r3
    1ce6:	46bd      	mov	sp, r7
    1ce8:	b002      	add	sp, #8
    1cea:	bd80      	pop	{r7, pc}
    1cec:	00001c6d 	.word	0x00001c6d

00001cf0 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    1cf0:	b580      	push	{r7, lr}
    1cf2:	b082      	sub	sp, #8
    1cf4:	af00      	add	r7, sp, #0
    1cf6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    1cf8:	687b      	ldr	r3, [r7, #4]
    1cfa:	2200      	movs	r2, #0
    1cfc:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    1cfe:	687b      	ldr	r3, [r7, #4]
    1d00:	2201      	movs	r2, #1
    1d02:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    1d04:	687b      	ldr	r3, [r7, #4]
    1d06:	2200      	movs	r2, #0
    1d08:	709a      	strb	r2, [r3, #2]
}
    1d0a:	46c0      	nop			; (mov r8, r8)
    1d0c:	46bd      	mov	sp, r7
    1d0e:	b002      	add	sp, #8
    1d10:	bd80      	pop	{r7, pc}
	...

00001d14 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    1d14:	b580      	push	{r7, lr}
    1d16:	b084      	sub	sp, #16
    1d18:	af00      	add	r7, sp, #0
    1d1a:	0002      	movs	r2, r0
    1d1c:	1dfb      	adds	r3, r7, #7
    1d1e:	701a      	strb	r2, [r3, #0]
    1d20:	1dbb      	adds	r3, r7, #6
    1d22:	1c0a      	adds	r2, r1, #0
    1d24:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1d26:	1dfb      	adds	r3, r7, #7
    1d28:	781b      	ldrb	r3, [r3, #0]
    1d2a:	0018      	movs	r0, r3
    1d2c:	4b0d      	ldr	r3, [pc, #52]	; (1d64 <port_pin_set_output_level+0x50>)
    1d2e:	4798      	blx	r3
    1d30:	0003      	movs	r3, r0
    1d32:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1d34:	1dfb      	adds	r3, r7, #7
    1d36:	781b      	ldrb	r3, [r3, #0]
    1d38:	221f      	movs	r2, #31
    1d3a:	4013      	ands	r3, r2
    1d3c:	2201      	movs	r2, #1
    1d3e:	409a      	lsls	r2, r3
    1d40:	0013      	movs	r3, r2
    1d42:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    1d44:	1dbb      	adds	r3, r7, #6
    1d46:	781b      	ldrb	r3, [r3, #0]
    1d48:	2b00      	cmp	r3, #0
    1d4a:	d003      	beq.n	1d54 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    1d4c:	68fb      	ldr	r3, [r7, #12]
    1d4e:	68ba      	ldr	r2, [r7, #8]
    1d50:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    1d52:	e002      	b.n	1d5a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    1d54:	68fb      	ldr	r3, [r7, #12]
    1d56:	68ba      	ldr	r2, [r7, #8]
    1d58:	615a      	str	r2, [r3, #20]
}
    1d5a:	46c0      	nop			; (mov r8, r8)
    1d5c:	46bd      	mov	sp, r7
    1d5e:	b004      	add	sp, #16
    1d60:	bd80      	pop	{r7, pc}
    1d62:	46c0      	nop			; (mov r8, r8)
    1d64:	00001ccd 	.word	0x00001ccd

00001d68 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    1d68:	b580      	push	{r7, lr}
    1d6a:	b084      	sub	sp, #16
    1d6c:	af00      	add	r7, sp, #0
    1d6e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1d70:	687b      	ldr	r3, [r7, #4]
    1d72:	681b      	ldr	r3, [r3, #0]
    1d74:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1d76:	68fb      	ldr	r3, [r7, #12]
    1d78:	69db      	ldr	r3, [r3, #28]
    1d7a:	1e5a      	subs	r2, r3, #1
    1d7c:	4193      	sbcs	r3, r2
    1d7e:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    1d80:	0018      	movs	r0, r3
    1d82:	46bd      	mov	sp, r7
    1d84:	b004      	add	sp, #16
    1d86:	bd80      	pop	{r7, pc}

00001d88 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    1d88:	b580      	push	{r7, lr}
    1d8a:	b082      	sub	sp, #8
    1d8c:	af00      	add	r7, sp, #0
    1d8e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1d90:	46c0      	nop			; (mov r8, r8)
    1d92:	687b      	ldr	r3, [r7, #4]
    1d94:	0018      	movs	r0, r3
    1d96:	4b04      	ldr	r3, [pc, #16]	; (1da8 <_usart_wait_for_sync+0x20>)
    1d98:	4798      	blx	r3
    1d9a:	1e03      	subs	r3, r0, #0
    1d9c:	d1f9      	bne.n	1d92 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    1d9e:	46c0      	nop			; (mov r8, r8)
    1da0:	46bd      	mov	sp, r7
    1da2:	b002      	add	sp, #8
    1da4:	bd80      	pop	{r7, pc}
    1da6:	46c0      	nop			; (mov r8, r8)
    1da8:	00001d69 	.word	0x00001d69

00001dac <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    1dac:	b580      	push	{r7, lr}
    1dae:	b082      	sub	sp, #8
    1db0:	af00      	add	r7, sp, #0
    1db2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1db4:	687b      	ldr	r3, [r7, #4]
    1db6:	2280      	movs	r2, #128	; 0x80
    1db8:	05d2      	lsls	r2, r2, #23
    1dba:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1dbc:	687b      	ldr	r3, [r7, #4]
    1dbe:	2200      	movs	r2, #0
    1dc0:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    1dc2:	687b      	ldr	r3, [r7, #4]
    1dc4:	22ff      	movs	r2, #255	; 0xff
    1dc6:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    1dc8:	687b      	ldr	r3, [r7, #4]
    1dca:	2200      	movs	r2, #0
    1dcc:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1dce:	687b      	ldr	r3, [r7, #4]
    1dd0:	2200      	movs	r2, #0
    1dd2:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    1dd4:	687b      	ldr	r3, [r7, #4]
    1dd6:	2296      	movs	r2, #150	; 0x96
    1dd8:	0192      	lsls	r2, r2, #6
    1dda:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    1ddc:	687b      	ldr	r3, [r7, #4]
    1dde:	2224      	movs	r2, #36	; 0x24
    1de0:	2101      	movs	r1, #1
    1de2:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    1de4:	687b      	ldr	r3, [r7, #4]
    1de6:	2225      	movs	r2, #37	; 0x25
    1de8:	2101      	movs	r1, #1
    1dea:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	2226      	movs	r2, #38	; 0x26
    1df0:	2100      	movs	r1, #0
    1df2:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    1df4:	687b      	ldr	r3, [r7, #4]
    1df6:	2227      	movs	r2, #39	; 0x27
    1df8:	2100      	movs	r1, #0
    1dfa:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	2200      	movs	r2, #0
    1e00:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    1e02:	687b      	ldr	r3, [r7, #4]
    1e04:	2288      	movs	r2, #136	; 0x88
    1e06:	0352      	lsls	r2, r2, #13
    1e08:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    1e0a:	687b      	ldr	r3, [r7, #4]
    1e0c:	222c      	movs	r2, #44	; 0x2c
    1e0e:	2100      	movs	r1, #0
    1e10:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    1e12:	687b      	ldr	r3, [r7, #4]
    1e14:	222d      	movs	r2, #45	; 0x2d
    1e16:	2100      	movs	r1, #0
    1e18:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    1e1a:	687b      	ldr	r3, [r7, #4]
    1e1c:	2200      	movs	r2, #0
    1e1e:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    1e20:	687b      	ldr	r3, [r7, #4]
    1e22:	2200      	movs	r2, #0
    1e24:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    1e26:	687b      	ldr	r3, [r7, #4]
    1e28:	2200      	movs	r2, #0
    1e2a:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    1e2c:	687b      	ldr	r3, [r7, #4]
    1e2e:	2200      	movs	r2, #0
    1e30:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1e32:	687b      	ldr	r3, [r7, #4]
    1e34:	2200      	movs	r2, #0
    1e36:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1e38:	687b      	ldr	r3, [r7, #4]
    1e3a:	2200      	movs	r2, #0
    1e3c:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1e3e:	687b      	ldr	r3, [r7, #4]
    1e40:	2200      	movs	r2, #0
    1e42:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1e44:	687b      	ldr	r3, [r7, #4]
    1e46:	2200      	movs	r2, #0
    1e48:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1e4a:	687b      	ldr	r3, [r7, #4]
    1e4c:	2200      	movs	r2, #0
    1e4e:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1e50:	687b      	ldr	r3, [r7, #4]
    1e52:	2200      	movs	r2, #0
    1e54:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    1e56:	687b      	ldr	r3, [r7, #4]
    1e58:	2213      	movs	r2, #19
    1e5a:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	2200      	movs	r2, #0
    1e60:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    1e62:	46c0      	nop			; (mov r8, r8)
    1e64:	46bd      	mov	sp, r7
    1e66:	b002      	add	sp, #8
    1e68:	bd80      	pop	{r7, pc}
	...

00001e6c <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    1e6c:	b580      	push	{r7, lr}
    1e6e:	b084      	sub	sp, #16
    1e70:	af00      	add	r7, sp, #0
    1e72:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1e74:	687b      	ldr	r3, [r7, #4]
    1e76:	681b      	ldr	r3, [r3, #0]
    1e78:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1e7a:	687b      	ldr	r3, [r7, #4]
    1e7c:	681b      	ldr	r3, [r3, #0]
    1e7e:	0018      	movs	r0, r3
    1e80:	4b09      	ldr	r3, [pc, #36]	; (1ea8 <usart_enable+0x3c>)
    1e82:	4798      	blx	r3
    1e84:	0003      	movs	r3, r0
    1e86:	0018      	movs	r0, r3
    1e88:	4b08      	ldr	r3, [pc, #32]	; (1eac <usart_enable+0x40>)
    1e8a:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1e8c:	687b      	ldr	r3, [r7, #4]
    1e8e:	0018      	movs	r0, r3
    1e90:	4b07      	ldr	r3, [pc, #28]	; (1eb0 <usart_enable+0x44>)
    1e92:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1e94:	68fb      	ldr	r3, [r7, #12]
    1e96:	681b      	ldr	r3, [r3, #0]
    1e98:	2202      	movs	r2, #2
    1e9a:	431a      	orrs	r2, r3
    1e9c:	68fb      	ldr	r3, [r7, #12]
    1e9e:	601a      	str	r2, [r3, #0]
}
    1ea0:	46c0      	nop			; (mov r8, r8)
    1ea2:	46bd      	mov	sp, r7
    1ea4:	b004      	add	sp, #16
    1ea6:	bd80      	pop	{r7, pc}
    1ea8:	00011055 	.word	0x00011055
    1eac:	00001c11 	.word	0x00001c11
    1eb0:	00001d89 	.word	0x00001d89

00001eb4 <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
    1eb4:	b580      	push	{r7, lr}
    1eb6:	b084      	sub	sp, #16
    1eb8:	af00      	add	r7, sp, #0
    1eba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1ebc:	687b      	ldr	r3, [r7, #4]
    1ebe:	681b      	ldr	r3, [r3, #0]
    1ec0:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    1ec2:	687b      	ldr	r3, [r7, #4]
    1ec4:	681b      	ldr	r3, [r3, #0]
    1ec6:	0018      	movs	r0, r3
    1ec8:	4b0a      	ldr	r3, [pc, #40]	; (1ef4 <usart_disable+0x40>)
    1eca:	4798      	blx	r3
    1ecc:	0003      	movs	r3, r0
    1ece:	0018      	movs	r0, r3
    1ed0:	4b09      	ldr	r3, [pc, #36]	; (1ef8 <usart_disable+0x44>)
    1ed2:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1ed4:	687b      	ldr	r3, [r7, #4]
    1ed6:	0018      	movs	r0, r3
    1ed8:	4b08      	ldr	r3, [pc, #32]	; (1efc <usart_disable+0x48>)
    1eda:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1edc:	68fb      	ldr	r3, [r7, #12]
    1ede:	681b      	ldr	r3, [r3, #0]
    1ee0:	2202      	movs	r2, #2
    1ee2:	4393      	bics	r3, r2
    1ee4:	001a      	movs	r2, r3
    1ee6:	68fb      	ldr	r3, [r7, #12]
    1ee8:	601a      	str	r2, [r3, #0]
}
    1eea:	46c0      	nop			; (mov r8, r8)
    1eec:	46bd      	mov	sp, r7
    1eee:	b004      	add	sp, #16
    1ef0:	bd80      	pop	{r7, pc}
    1ef2:	46c0      	nop			; (mov r8, r8)
    1ef4:	00011055 	.word	0x00011055
    1ef8:	00001c3d 	.word	0x00001c3d
    1efc:	00001d89 	.word	0x00001d89

00001f00 <usart_reset>:
 *
 * \param[in]  module  Pointer to the USART software instance struct
 */
static inline void usart_reset(
		const struct usart_module *const module)
{
    1f00:	b580      	push	{r7, lr}
    1f02:	b084      	sub	sp, #16
    1f04:	af00      	add	r7, sp, #0
    1f06:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1f08:	687b      	ldr	r3, [r7, #4]
    1f0a:	681b      	ldr	r3, [r3, #0]
    1f0c:	60fb      	str	r3, [r7, #12]

	usart_disable(module);
    1f0e:	687b      	ldr	r3, [r7, #4]
    1f10:	0018      	movs	r0, r3
    1f12:	4b06      	ldr	r3, [pc, #24]	; (1f2c <usart_reset+0x2c>)
    1f14:	4798      	blx	r3

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1f16:	687b      	ldr	r3, [r7, #4]
    1f18:	0018      	movs	r0, r3
    1f1a:	4b05      	ldr	r3, [pc, #20]	; (1f30 <usart_reset+0x30>)
    1f1c:	4798      	blx	r3

	/* Reset module */
	usart_hw->CTRLA.reg = SERCOM_USART_CTRLA_SWRST;
    1f1e:	68fb      	ldr	r3, [r7, #12]
    1f20:	2201      	movs	r2, #1
    1f22:	601a      	str	r2, [r3, #0]
}
    1f24:	46c0      	nop			; (mov r8, r8)
    1f26:	46bd      	mov	sp, r7
    1f28:	b004      	add	sp, #16
    1f2a:	bd80      	pop	{r7, pc}
    1f2c:	00001eb5 	.word	0x00001eb5
    1f30:	00001d89 	.word	0x00001d89

00001f34 <gsm_timer_callback>:
/** FreeRTOS timer callback function, fired when the a timer period has elapsed.
 *
 *  \param[in]  timer  ID of the timer that has expired.
 */
static void gsm_timer_callback(TimerHandle_t timer)
{
    1f34:	b580      	push	{r7, lr}
    1f36:	b082      	sub	sp, #8
    1f38:	af00      	add	r7, sp, #0
    1f3a:	6078      	str	r0, [r7, #4]
}
    1f3c:	46c0      	nop			; (mov r8, r8)
    1f3e:	46bd      	mov	sp, r7
    1f40:	b002      	add	sp, #8
    1f42:	bd80      	pop	{r7, pc}

00001f44 <Flush_RX_Buffer>:

void Flush_RX_Buffer(void)
{
    1f44:	b580      	push	{r7, lr}
    1f46:	b082      	sub	sp, #8
    1f48:	af00      	add	r7, sp, #0
	uint8_t ucharTemp_Value;
	portBASE_TYPE xStatus;
	while(1)
	{
		xStatus=xQueueReceive(gsm_rx_queue,&ucharTemp_Value,0);
    1f4a:	4b09      	ldr	r3, [pc, #36]	; (1f70 <Flush_RX_Buffer+0x2c>)
    1f4c:	681b      	ldr	r3, [r3, #0]
    1f4e:	1cf9      	adds	r1, r7, #3
    1f50:	2200      	movs	r2, #0
    1f52:	0018      	movs	r0, r3
    1f54:	4b07      	ldr	r3, [pc, #28]	; (1f74 <Flush_RX_Buffer+0x30>)
    1f56:	4798      	blx	r3
    1f58:	0003      	movs	r3, r0
    1f5a:	607b      	str	r3, [r7, #4]
		if (xStatus==errQUEUE_EMPTY)
    1f5c:	687b      	ldr	r3, [r7, #4]
    1f5e:	2b00      	cmp	r3, #0
    1f60:	d000      	beq.n	1f64 <Flush_RX_Buffer+0x20>
		xStatus=xQueueReceive(gsm_rx_queue,&ucharTemp_Value,0);
    1f62:	e7f2      	b.n	1f4a <Flush_RX_Buffer+0x6>
		{
			break;
    1f64:	46c0      	nop			; (mov r8, r8)
		}
	}
}
    1f66:	46c0      	nop			; (mov r8, r8)
    1f68:	46bd      	mov	sp, r7
    1f6a:	b002      	add	sp, #8
    1f6c:	bd80      	pop	{r7, pc}
    1f6e:	46c0      	nop			; (mov r8, r8)
    1f70:	2000021c 	.word	0x2000021c
    1f74:	0000e3f1 	.word	0x0000e3f1

00001f78 <gsm_rx_handler>:

static void gsm_rx_handler(uint8_t instance)
{
    1f78:	b590      	push	{r4, r7, lr}
    1f7a:	b085      	sub	sp, #20
    1f7c:	af00      	add	r7, sp, #0
    1f7e:	0002      	movs	r2, r0
    1f80:	1dfb      	adds	r3, r7, #7
    1f82:	701a      	strb	r2, [r3, #0]
	SercomUsart *const usart_hw = &GSM_SERCOM->USART;
    1f84:	4b18      	ldr	r3, [pc, #96]	; (1fe8 <gsm_rx_handler+0x70>)
    1f86:	60fb      	str	r3, [r7, #12]
	UNUSED(instance);
	if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) 
    1f88:	68fb      	ldr	r3, [r7, #12]
    1f8a:	7e1b      	ldrb	r3, [r3, #24]
    1f8c:	b2db      	uxtb	r3, r3
    1f8e:	001a      	movs	r2, r3
    1f90:	2304      	movs	r3, #4
    1f92:	4013      	ands	r3, r2
    1f94:	d023      	beq.n	1fde <gsm_rx_handler+0x66>
	{
		/* Check if a data reception error occurred */
		uint8_t rx_error = usart_hw->STATUS.reg &
    1f96:	68fb      	ldr	r3, [r7, #12]
    1f98:	8b5b      	ldrh	r3, [r3, #26]
    1f9a:	b29b      	uxth	r3, r3
    1f9c:	b2da      	uxtb	r2, r3
    1f9e:	230b      	movs	r3, #11
    1fa0:	18fb      	adds	r3, r7, r3
    1fa2:	2106      	movs	r1, #6
    1fa4:	400a      	ands	r2, r1
    1fa6:	701a      	strb	r2, [r3, #0]
		(SERCOM_USART_STATUS_FERR | SERCOM_USART_STATUS_BUFOVF);
		/* If error occurred clear the error flags, otherwise queue new data */
		if (rx_error) 
    1fa8:	230b      	movs	r3, #11
    1faa:	18fb      	adds	r3, r7, r3
    1fac:	781b      	ldrb	r3, [r3, #0]
    1fae:	2b00      	cmp	r3, #0
    1fb0:	d006      	beq.n	1fc0 <gsm_rx_handler+0x48>
		{
			usart_hw->STATUS.reg = rx_error;
    1fb2:	230b      	movs	r3, #11
    1fb4:	18fb      	adds	r3, r7, r3
    1fb6:	781b      	ldrb	r3, [r3, #0]
    1fb8:	b29a      	uxth	r2, r3
    1fba:	68fb      	ldr	r3, [r7, #12]
    1fbc:	835a      	strh	r2, [r3, #26]
		{
			uint8_t data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
			xQueueSendFromISR(gsm_rx_queue, &data, NULL);
		}
	}
}
    1fbe:	e00e      	b.n	1fde <gsm_rx_handler+0x66>
			uint8_t data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1fc0:	68fb      	ldr	r3, [r7, #12]
    1fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1fc4:	b29b      	uxth	r3, r3
    1fc6:	b2da      	uxtb	r2, r3
    1fc8:	230a      	movs	r3, #10
    1fca:	18fb      	adds	r3, r7, r3
    1fcc:	701a      	strb	r2, [r3, #0]
			xQueueSendFromISR(gsm_rx_queue, &data, NULL);
    1fce:	4b07      	ldr	r3, [pc, #28]	; (1fec <gsm_rx_handler+0x74>)
    1fd0:	6818      	ldr	r0, [r3, #0]
    1fd2:	230a      	movs	r3, #10
    1fd4:	18f9      	adds	r1, r7, r3
    1fd6:	2300      	movs	r3, #0
    1fd8:	2200      	movs	r2, #0
    1fda:	4c05      	ldr	r4, [pc, #20]	; (1ff0 <gsm_rx_handler+0x78>)
    1fdc:	47a0      	blx	r4
}
    1fde:	46c0      	nop			; (mov r8, r8)
    1fe0:	46bd      	mov	sp, r7
    1fe2:	b005      	add	sp, #20
    1fe4:	bd90      	pop	{r4, r7, pc}
    1fe6:	46c0      	nop			; (mov r8, r8)
    1fe8:	42001400 	.word	0x42001400
    1fec:	2000021c 	.word	0x2000021c
    1ff0:	0000e2d1 	.word	0x0000e2d1

00001ff4 <gsm_ring_detect_pin_callback>:

static void gsm_ring_detect_pin_callback(void)
{
    1ff4:	b580      	push	{r7, lr}
    1ff6:	af00      	add	r7, sp, #0
	
}
    1ff8:	46c0      	nop			; (mov r8, r8)
    1ffa:	46bd      	mov	sp, r7
    1ffc:	bd80      	pop	{r7, pc}
	...

00002000 <gsm_init>:

void gsm_init(void)	
{
    2000:	b590      	push	{r4, r7, lr}
    2002:	b097      	sub	sp, #92	; 0x5c
    2004:	af02      	add	r7, sp, #8
	struct port_config gsm_pin_config;
	port_get_config_defaults(&gsm_pin_config);
    2006:	234c      	movs	r3, #76	; 0x4c
    2008:	18fb      	adds	r3, r7, r3
    200a:	0018      	movs	r0, r3
    200c:	4b4d      	ldr	r3, [pc, #308]	; (2144 <STACK_SIZE+0x144>)
    200e:	4798      	blx	r3
	
	/* Configure pin to control the GSM module sleep state */
	gsm_pin_config.direction = PORT_PIN_DIR_OUTPUT;
    2010:	234c      	movs	r3, #76	; 0x4c
    2012:	18fb      	adds	r3, r7, r3
    2014:	2201      	movs	r2, #1
    2016:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(GSM_DTR_PIN, &gsm_pin_config);
    2018:	234c      	movs	r3, #76	; 0x4c
    201a:	18fb      	adds	r3, r7, r3
    201c:	0019      	movs	r1, r3
    201e:	2014      	movs	r0, #20
    2020:	4b49      	ldr	r3, [pc, #292]	; (2148 <STACK_SIZE+0x148>)
    2022:	4798      	blx	r3
	port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
    2024:	2100      	movs	r1, #0
    2026:	2014      	movs	r0, #20
    2028:	4b48      	ldr	r3, [pc, #288]	; (214c <STACK_SIZE+0x14c>)
    202a:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    202c:	2340      	movs	r3, #64	; 0x40
    202e:	18fb      	adds	r3, r7, r3
    2030:	0018      	movs	r0, r3
    2032:	4b47      	ldr	r3, [pc, #284]	; (2150 <STACK_SIZE+0x150>)
    2034:	4798      	blx	r3
	config_extint_chan.gpio_pin = GSM_RING_EIC_PIN;
    2036:	2340      	movs	r3, #64	; 0x40
    2038:	18fb      	adds	r3, r7, r3
    203a:	2231      	movs	r2, #49	; 0x31
    203c:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = GSM_RING_EIC_MUX;
    203e:	2340      	movs	r3, #64	; 0x40
    2040:	18fb      	adds	r3, r7, r3
    2042:	2200      	movs	r2, #0
    2044:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    2046:	2340      	movs	r3, #64	; 0x40
    2048:	18fb      	adds	r3, r7, r3
    204a:	2201      	movs	r2, #1
    204c:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    204e:	2340      	movs	r3, #64	; 0x40
    2050:	18fb      	adds	r3, r7, r3
    2052:	2202      	movs	r2, #2
    2054:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(GSM_RING_EIC_LINE, &config_extint_chan);
    2056:	2340      	movs	r3, #64	; 0x40
    2058:	18fb      	adds	r3, r7, r3
    205a:	0019      	movs	r1, r3
    205c:	2001      	movs	r0, #1
    205e:	4b3d      	ldr	r3, [pc, #244]	; (2154 <STACK_SIZE+0x154>)
    2060:	4798      	blx	r3
		
	extint_chan_enable_callback(GSM_RING_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    2062:	2100      	movs	r1, #0
    2064:	2001      	movs	r0, #1
    2066:	4b3c      	ldr	r3, [pc, #240]	; (2158 <STACK_SIZE+0x158>)
    2068:	4798      	blx	r3
	extint_register_callback(gsm_ring_detect_pin_callback,GSM_RING_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    206a:	4b3c      	ldr	r3, [pc, #240]	; (215c <STACK_SIZE+0x15c>)
    206c:	2200      	movs	r2, #0
    206e:	2101      	movs	r1, #1
    2070:	0018      	movs	r0, r3
    2072:	4b3b      	ldr	r3, [pc, #236]	; (2160 <STACK_SIZE+0x160>)
    2074:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	
	gsm_rx_queue = xQueueCreate(240, sizeof(uint8_t));
    2076:	2200      	movs	r2, #0
    2078:	2101      	movs	r1, #1
    207a:	20f0      	movs	r0, #240	; 0xf0
    207c:	4b39      	ldr	r3, [pc, #228]	; (2164 <STACK_SIZE+0x164>)
    207e:	4798      	blx	r3
    2080:	0002      	movs	r2, r0
    2082:	4b39      	ldr	r3, [pc, #228]	; (2168 <STACK_SIZE+0x168>)
    2084:	601a      	str	r2, [r3, #0]
	gsm_cmd_timeout_timer = xTimerCreate((const char *)"GSM Timeout",GSM_TIMEOUT_PERIOD_TICKS, pdFALSE, NULL, gsm_timer_callback);
    2086:	4939      	ldr	r1, [pc, #228]	; (216c <STACK_SIZE+0x16c>)
    2088:	4839      	ldr	r0, [pc, #228]	; (2170 <STACK_SIZE+0x170>)
    208a:	4b3a      	ldr	r3, [pc, #232]	; (2174 <STACK_SIZE+0x174>)
    208c:	9300      	str	r3, [sp, #0]
    208e:	2300      	movs	r3, #0
    2090:	2200      	movs	r2, #0
    2092:	4c39      	ldr	r4, [pc, #228]	; (2178 <STACK_SIZE+0x178>)
    2094:	47a0      	blx	r4
    2096:	0002      	movs	r2, r0
    2098:	4b38      	ldr	r3, [pc, #224]	; (217c <STACK_SIZE+0x17c>)
    209a:	601a      	str	r2, [r3, #0]
	vSemaphoreCreateBinary(gsm_busy_semaphore);
    209c:	2203      	movs	r2, #3
    209e:	2100      	movs	r1, #0
    20a0:	2001      	movs	r0, #1
    20a2:	4b30      	ldr	r3, [pc, #192]	; (2164 <STACK_SIZE+0x164>)
    20a4:	4798      	blx	r3
    20a6:	0002      	movs	r2, r0
    20a8:	4b35      	ldr	r3, [pc, #212]	; (2180 <STACK_SIZE+0x180>)
    20aa:	601a      	str	r2, [r3, #0]
    20ac:	4b34      	ldr	r3, [pc, #208]	; (2180 <STACK_SIZE+0x180>)
    20ae:	681b      	ldr	r3, [r3, #0]
    20b0:	2b00      	cmp	r3, #0
    20b2:	d006      	beq.n	20c2 <gsm_init+0xc2>
    20b4:	4b32      	ldr	r3, [pc, #200]	; (2180 <STACK_SIZE+0x180>)
    20b6:	6818      	ldr	r0, [r3, #0]
    20b8:	2300      	movs	r3, #0
    20ba:	2200      	movs	r2, #0
    20bc:	2100      	movs	r1, #0
    20be:	4c31      	ldr	r4, [pc, #196]	; (2184 <STACK_SIZE+0x184>)
    20c0:	47a0      	blx	r4
	
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
    20c2:	003b      	movs	r3, r7
    20c4:	0018      	movs	r0, r3
    20c6:	4b30      	ldr	r3, [pc, #192]	; (2188 <STACK_SIZE+0x188>)
    20c8:	4798      	blx	r3
	config_usart.baudrate		= GSM_BAUDRATE;
    20ca:	003b      	movs	r3, r7
    20cc:	22e1      	movs	r2, #225	; 0xe1
    20ce:	0252      	lsls	r2, r2, #9
    20d0:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting	= GSM_SERCOM_MUX;
    20d2:	003b      	movs	r3, r7
    20d4:	2280      	movs	r2, #128	; 0x80
    20d6:	0352      	lsls	r2, r2, #13
    20d8:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0	= GSM_SERCOM_PAD0_MUX;
    20da:	003b      	movs	r3, r7
    20dc:	4a2b      	ldr	r2, [pc, #172]	; (218c <STACK_SIZE+0x18c>)
    20de:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1	= GSM_SERCOM_PAD1_MUX;
    20e0:	003b      	movs	r3, r7
    20e2:	4a2b      	ldr	r2, [pc, #172]	; (2190 <STACK_SIZE+0x190>)
    20e4:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2	= GSM_SERCOM_PAD2_MUX;
    20e6:	003b      	movs	r3, r7
    20e8:	2201      	movs	r2, #1
    20ea:	4252      	negs	r2, r2
    20ec:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3	= GSM_SERCOM_PAD3_MUX;
    20ee:	003b      	movs	r3, r7
    20f0:	2201      	movs	r2, #1
    20f2:	4252      	negs	r2, r2
    20f4:	63da      	str	r2, [r3, #60]	; 0x3c
	config_usart.run_in_standby = true;
    20f6:	003b      	movs	r3, r7
    20f8:	222c      	movs	r2, #44	; 0x2c
    20fa:	2101      	movs	r1, #1
    20fc:	5499      	strb	r1, [r3, r2]
	while (usart_init(&gsm_usart,GSM_SERCOM, &config_usart) != STATUS_OK)
    20fe:	e003      	b.n	2108 <gsm_init+0x108>
	{
		usart_reset(&gsm_usart);
    2100:	4b24      	ldr	r3, [pc, #144]	; (2194 <STACK_SIZE+0x194>)
    2102:	0018      	movs	r0, r3
    2104:	4b24      	ldr	r3, [pc, #144]	; (2198 <STACK_SIZE+0x198>)
    2106:	4798      	blx	r3
	while (usart_init(&gsm_usart,GSM_SERCOM, &config_usart) != STATUS_OK)
    2108:	003a      	movs	r2, r7
    210a:	4924      	ldr	r1, [pc, #144]	; (219c <STACK_SIZE+0x19c>)
    210c:	4b21      	ldr	r3, [pc, #132]	; (2194 <STACK_SIZE+0x194>)
    210e:	0018      	movs	r0, r3
    2110:	4b23      	ldr	r3, [pc, #140]	; (21a0 <STACK_SIZE+0x1a0>)
    2112:	4798      	blx	r3
    2114:	1e03      	subs	r3, r0, #0
    2116:	d1f3      	bne.n	2100 <gsm_init+0x100>
	}
	usart_enable(&gsm_usart);
    2118:	4b1e      	ldr	r3, [pc, #120]	; (2194 <STACK_SIZE+0x194>)
    211a:	0018      	movs	r0, r3
    211c:	4b21      	ldr	r3, [pc, #132]	; (21a4 <STACK_SIZE+0x1a4>)
    211e:	4798      	blx	r3
	_sercom_set_handler(_sercom_get_sercom_inst_index(GSM_SERCOM),gsm_rx_handler);
    2120:	4b1e      	ldr	r3, [pc, #120]	; (219c <STACK_SIZE+0x19c>)
    2122:	0018      	movs	r0, r3
    2124:	4b20      	ldr	r3, [pc, #128]	; (21a8 <STACK_SIZE+0x1a8>)
    2126:	4798      	blx	r3
    2128:	0003      	movs	r3, r0
    212a:	001a      	movs	r2, r3
    212c:	4b1f      	ldr	r3, [pc, #124]	; (21ac <STACK_SIZE+0x1ac>)
    212e:	0019      	movs	r1, r3
    2130:	0010      	movs	r0, r2
    2132:	4b1f      	ldr	r3, [pc, #124]	; (21b0 <STACK_SIZE+0x1b0>)
    2134:	4798      	blx	r3
	GSM_SERCOM->USART.INTENSET.reg=SERCOM_USART_INTFLAG_RXC;
    2136:	4b19      	ldr	r3, [pc, #100]	; (219c <STACK_SIZE+0x19c>)
    2138:	2204      	movs	r2, #4
    213a:	759a      	strb	r2, [r3, #22]
}
    213c:	46c0      	nop			; (mov r8, r8)
    213e:	46bd      	mov	sp, r7
    2140:	b015      	add	sp, #84	; 0x54
    2142:	bd90      	pop	{r4, r7, pc}
    2144:	00001cf1 	.word	0x00001cf1
    2148:	00011d69 	.word	0x00011d69
    214c:	00001d15 	.word	0x00001d15
    2150:	0000ceb5 	.word	0x0000ceb5
    2154:	0000cee9 	.word	0x0000cee9
    2158:	00011259 	.word	0x00011259
    215c:	00001ff5 	.word	0x00001ff5
    2160:	000111f5 	.word	0x000111f5
    2164:	0000e035 	.word	0x0000e035
    2168:	2000021c 	.word	0x2000021c
    216c:	00001388 	.word	0x00001388
    2170:	000187f4 	.word	0x000187f4
    2174:	00001f35 	.word	0x00001f35
    2178:	0000fc01 	.word	0x0000fc01
    217c:	20000220 	.word	0x20000220
    2180:	20000224 	.word	0x20000224
    2184:	0000e0f1 	.word	0x0000e0f1
    2188:	00001dad 	.word	0x00001dad
    218c:	00160002 	.word	0x00160002
    2190:	00170002 	.word	0x00170002
    2194:	20000680 	.word	0x20000680
    2198:	00001f01 	.word	0x00001f01
    219c:	42001400 	.word	0x42001400
    21a0:	0001084d 	.word	0x0001084d
    21a4:	00001e6d 	.word	0x00001e6d
    21a8:	0000dac9 	.word	0x0000dac9
    21ac:	00001f79 	.word	0x00001f79
    21b0:	00010fe9 	.word	0x00010fe9

000021b4 <gsm_send_at_command>:

enum gsm_error gsm_send_at_command(const char *const atcommand,const char* aResponExit,const uint32_t aTimeoutMax,const uint8_t aLenOut, char *aResponOut)
{
    21b4:	b590      	push	{r4, r7, lr}
    21b6:	b08b      	sub	sp, #44	; 0x2c
    21b8:	af02      	add	r7, sp, #8
    21ba:	60f8      	str	r0, [r7, #12]
    21bc:	60b9      	str	r1, [r7, #8]
    21be:	607a      	str	r2, [r7, #4]
    21c0:	001a      	movs	r2, r3
    21c2:	1cfb      	adds	r3, r7, #3
    21c4:	701a      	strb	r2, [r3, #0]
	
	/* Try to acquire the command lock; if already busy with a command, abort */
	if (xSemaphoreTake(gsm_busy_semaphore, 1) == pdFALSE) 
    21c6:	4b64      	ldr	r3, [pc, #400]	; (2358 <gsm_send_at_command+0x1a4>)
    21c8:	681b      	ldr	r3, [r3, #0]
    21ca:	2101      	movs	r1, #1
    21cc:	0018      	movs	r0, r3
    21ce:	4b63      	ldr	r3, [pc, #396]	; (235c <gsm_send_at_command+0x1a8>)
    21d0:	4798      	blx	r3
    21d2:	1e03      	subs	r3, r0, #0
    21d4:	d101      	bne.n	21da <gsm_send_at_command+0x26>
	{
		return GSM_ERROR_OPERATION_IN_PROGRESS;
    21d6:	2302      	movs	r3, #2
    21d8:	e0ba      	b.n	2350 <gsm_send_at_command+0x19c>
	/* Enable DTR and wait for the module to be ready to accept a command */
	//port_pin_set_output_level(GSM_DTR_PIN, GSM_DTR_PIN_ACTIVE);
	//vTaskDelay(100 / portTICK_PERIOD_MS);
	
	//////////////////////////////////////////////////////////////////////////
	Flush_RX_Buffer();
    21da:	4b61      	ldr	r3, [pc, #388]	; (2360 <gsm_send_at_command+0x1ac>)
    21dc:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	enum gsm_error err_no=GSM_ERROR_NONE;
    21de:	231f      	movs	r3, #31
    21e0:	18fb      	adds	r3, r7, r3
    21e2:	2200      	movs	r2, #0
    21e4:	701a      	strb	r2, [r3, #0]
	
	uint8_t u8tRx_Index=0;
    21e6:	231e      	movs	r3, #30
    21e8:	18fb      	adds	r3, r7, r3
    21ea:	2200      	movs	r2, #0
    21ec:	701a      	strb	r2, [r3, #0]
	char u8tTemp_Char=0;
    21ee:	2313      	movs	r3, #19
    21f0:	18fb      	adds	r3, r7, r3
    21f2:	2200      	movs	r2, #0
    21f4:	701a      	strb	r2, [r3, #0]
	portBASE_TYPE xStatus;

	char *aDataBuffer = (char*) calloc(MAX_BUFFER_TMP,sizeof(char));
    21f6:	2101      	movs	r1, #1
    21f8:	20f0      	movs	r0, #240	; 0xf0
    21fa:	4b5a      	ldr	r3, [pc, #360]	; (2364 <gsm_send_at_command+0x1b0>)
    21fc:	4798      	blx	r3
    21fe:	0003      	movs	r3, r0
    2200:	61bb      	str	r3, [r7, #24]
	
	//buffer created???
	if (aDataBuffer == NULL)
    2202:	69bb      	ldr	r3, [r7, #24]
    2204:	2b00      	cmp	r3, #0
    2206:	d101      	bne.n	220c <gsm_send_at_command+0x58>
	{
		//port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
		return 0;
    2208:	2300      	movs	r3, #0
    220a:	e0a1      	b.n	2350 <gsm_send_at_command+0x19c>
	}

	//reset to all 0
	memset(aDataBuffer, '\0', MAX_BUFFER_TMP);
    220c:	69bb      	ldr	r3, [r7, #24]
    220e:	22f0      	movs	r2, #240	; 0xf0
    2210:	2100      	movs	r1, #0
    2212:	0018      	movs	r0, r3
    2214:	4b54      	ldr	r3, [pc, #336]	; (2368 <gsm_send_at_command+0x1b4>)
    2216:	4798      	blx	r3
	
	/* Send the command to the GSM module when it is ready */
	usart_write_buffer_wait(&gsm_usart, (uint8_t *)atcommand, strlen(atcommand));	
    2218:	68fb      	ldr	r3, [r7, #12]
    221a:	0018      	movs	r0, r3
    221c:	4b53      	ldr	r3, [pc, #332]	; (236c <gsm_send_at_command+0x1b8>)
    221e:	4798      	blx	r3
    2220:	0003      	movs	r3, r0
    2222:	b29a      	uxth	r2, r3
    2224:	68f9      	ldr	r1, [r7, #12]
    2226:	4b52      	ldr	r3, [pc, #328]	; (2370 <gsm_send_at_command+0x1bc>)
    2228:	0018      	movs	r0, r3
    222a:	4b52      	ldr	r3, [pc, #328]	; (2374 <gsm_send_at_command+0x1c0>)
    222c:	4798      	blx	r3
	
	/* Start the timeout timer to ensure a timely response from the module */
	xTimerChangePeriod(gsm_cmd_timeout_timer,(aTimeoutMax / portTICK_PERIOD_MS),portMAX_DELAY);
    222e:	4b52      	ldr	r3, [pc, #328]	; (2378 <gsm_send_at_command+0x1c4>)
    2230:	6818      	ldr	r0, [r3, #0]
    2232:	687a      	ldr	r2, [r7, #4]
    2234:	2301      	movs	r3, #1
    2236:	425b      	negs	r3, r3
    2238:	9300      	str	r3, [sp, #0]
    223a:	2300      	movs	r3, #0
    223c:	2104      	movs	r1, #4
    223e:	4c4f      	ldr	r4, [pc, #316]	; (237c <gsm_send_at_command+0x1c8>)
    2240:	47a0      	blx	r4
	
	while (true)
	{
		if(xTimerIsTimerActive(gsm_cmd_timeout_timer))
    2242:	4b4d      	ldr	r3, [pc, #308]	; (2378 <gsm_send_at_command+0x1c4>)
    2244:	681b      	ldr	r3, [r3, #0]
    2246:	0018      	movs	r0, r3
    2248:	4b4d      	ldr	r3, [pc, #308]	; (2380 <gsm_send_at_command+0x1cc>)
    224a:	4798      	blx	r3
    224c:	1e03      	subs	r3, r0, #0
    224e:	d03e      	beq.n	22ce <gsm_send_at_command+0x11a>
		{
			if (u8tRx_Index<240)
    2250:	231e      	movs	r3, #30
    2252:	18fb      	adds	r3, r7, r3
    2254:	781b      	ldrb	r3, [r3, #0]
    2256:	2bef      	cmp	r3, #239	; 0xef
    2258:	d81c      	bhi.n	2294 <gsm_send_at_command+0xe0>
			{
				xStatus=xQueueReceive(gsm_rx_queue,&u8tTemp_Char, 0);
    225a:	4b4a      	ldr	r3, [pc, #296]	; (2384 <gsm_send_at_command+0x1d0>)
    225c:	681b      	ldr	r3, [r3, #0]
    225e:	2213      	movs	r2, #19
    2260:	18b9      	adds	r1, r7, r2
    2262:	2200      	movs	r2, #0
    2264:	0018      	movs	r0, r3
    2266:	4b48      	ldr	r3, [pc, #288]	; (2388 <gsm_send_at_command+0x1d4>)
    2268:	4798      	blx	r3
    226a:	0003      	movs	r3, r0
    226c:	617b      	str	r3, [r7, #20]
				if(xStatus!=errQUEUE_EMPTY)
    226e:	697b      	ldr	r3, [r7, #20]
    2270:	2b00      	cmp	r3, #0
    2272:	d00f      	beq.n	2294 <gsm_send_at_command+0xe0>
				{
					aDataBuffer[u8tRx_Index] = u8tTemp_Char;
    2274:	231e      	movs	r3, #30
    2276:	18fb      	adds	r3, r7, r3
    2278:	781b      	ldrb	r3, [r3, #0]
    227a:	69ba      	ldr	r2, [r7, #24]
    227c:	18d3      	adds	r3, r2, r3
    227e:	2213      	movs	r2, #19
    2280:	18ba      	adds	r2, r7, r2
    2282:	7812      	ldrb	r2, [r2, #0]
    2284:	701a      	strb	r2, [r3, #0]
					u8tRx_Index++;
    2286:	231e      	movs	r3, #30
    2288:	18fb      	adds	r3, r7, r3
    228a:	781a      	ldrb	r2, [r3, #0]
    228c:	231e      	movs	r3, #30
    228e:	18fb      	adds	r3, r7, r3
    2290:	3201      	adds	r2, #1
    2292:	701a      	strb	r2, [r3, #0]
				}
			}
			if (aResponExit != NULL)
    2294:	68bb      	ldr	r3, [r7, #8]
    2296:	2b00      	cmp	r3, #0
    2298:	d00c      	beq.n	22b4 <gsm_send_at_command+0x100>
			{
				if (strstr((const char*)aDataBuffer, (const char*)aResponExit) != NULL)
    229a:	68ba      	ldr	r2, [r7, #8]
    229c:	69bb      	ldr	r3, [r7, #24]
    229e:	0011      	movs	r1, r2
    22a0:	0018      	movs	r0, r3
    22a2:	4b3a      	ldr	r3, [pc, #232]	; (238c <gsm_send_at_command+0x1d8>)
    22a4:	4798      	blx	r3
    22a6:	1e03      	subs	r3, r0, #0
    22a8:	d004      	beq.n	22b4 <gsm_send_at_command+0x100>
				{
					err_no = GSM_ERROR_NONE;
    22aa:	231f      	movs	r3, #31
    22ac:	18fb      	adds	r3, r7, r3
    22ae:	2200      	movs	r2, #0
    22b0:	701a      	strb	r2, [r3, #0]
					break;
    22b2:	e024      	b.n	22fe <gsm_send_at_command+0x14a>
				}
			}
			if (strstr((const char*)aDataBuffer, (const char*)RESPONS_ERROR) != NULL)
    22b4:	4a36      	ldr	r2, [pc, #216]	; (2390 <gsm_send_at_command+0x1dc>)
    22b6:	69bb      	ldr	r3, [r7, #24]
    22b8:	0011      	movs	r1, r2
    22ba:	0018      	movs	r0, r3
    22bc:	4b33      	ldr	r3, [pc, #204]	; (238c <gsm_send_at_command+0x1d8>)
    22be:	4798      	blx	r3
    22c0:	1e03      	subs	r3, r0, #0
    22c2:	d0be      	beq.n	2242 <gsm_send_at_command+0x8e>
			{
				err_no = GSM_ERROR_COMMAND_ERROR;
    22c4:	231f      	movs	r3, #31
    22c6:	18fb      	adds	r3, r7, r3
    22c8:	220b      	movs	r2, #11
    22ca:	701a      	strb	r2, [r3, #0]
				break;
    22cc:	e017      	b.n	22fe <gsm_send_at_command+0x14a>
			}
		}
		else
		{
			xTimerStop(gsm_cmd_timeout_timer, portMAX_DELAY);
    22ce:	4b2a      	ldr	r3, [pc, #168]	; (2378 <gsm_send_at_command+0x1c4>)
    22d0:	6818      	ldr	r0, [r3, #0]
    22d2:	2301      	movs	r3, #1
    22d4:	425b      	negs	r3, r3
    22d6:	9300      	str	r3, [sp, #0]
    22d8:	2300      	movs	r3, #0
    22da:	2200      	movs	r2, #0
    22dc:	2103      	movs	r1, #3
    22de:	4c27      	ldr	r4, [pc, #156]	; (237c <gsm_send_at_command+0x1c8>)
    22e0:	47a0      	blx	r4
			if (u8tRx_Index==0)
    22e2:	231e      	movs	r3, #30
    22e4:	18fb      	adds	r3, r7, r3
    22e6:	781b      	ldrb	r3, [r3, #0]
    22e8:	2b00      	cmp	r3, #0
    22ea:	d104      	bne.n	22f6 <gsm_send_at_command+0x142>
			{
				err_no = GSM_ERROR_TIMEOUT;
    22ec:	231f      	movs	r3, #31
    22ee:	18fb      	adds	r3, r7, r3
    22f0:	2207      	movs	r2, #7
    22f2:	701a      	strb	r2, [r3, #0]
				break;
    22f4:	e003      	b.n	22fe <gsm_send_at_command+0x14a>
			}
			else
			{
				err_no = GSM_ERROR_UNKWON;
    22f6:	231f      	movs	r3, #31
    22f8:	18fb      	adds	r3, r7, r3
    22fa:	2208      	movs	r2, #8
    22fc:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	
	//copy it to the out
	if ((aLenOut != 0) && (aResponOut != NULL) && (aLenOut > u8tRx_Index) && (err_no==GSM_ERROR_NONE))
    22fe:	1cfb      	adds	r3, r7, #3
    2300:	781b      	ldrb	r3, [r3, #0]
    2302:	2b00      	cmp	r3, #0
    2304:	d016      	beq.n	2334 <gsm_send_at_command+0x180>
    2306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2308:	2b00      	cmp	r3, #0
    230a:	d013      	beq.n	2334 <gsm_send_at_command+0x180>
    230c:	1cfa      	adds	r2, r7, #3
    230e:	231e      	movs	r3, #30
    2310:	18fb      	adds	r3, r7, r3
    2312:	7812      	ldrb	r2, [r2, #0]
    2314:	781b      	ldrb	r3, [r3, #0]
    2316:	429a      	cmp	r2, r3
    2318:	d90c      	bls.n	2334 <gsm_send_at_command+0x180>
    231a:	231f      	movs	r3, #31
    231c:	18fb      	adds	r3, r7, r3
    231e:	781b      	ldrb	r3, [r3, #0]
    2320:	2b00      	cmp	r3, #0
    2322:	d107      	bne.n	2334 <gsm_send_at_command+0x180>
	{
		memcpy(aResponOut, aDataBuffer, u8tRx_Index *sizeof(uint8_t));
    2324:	231e      	movs	r3, #30
    2326:	18fb      	adds	r3, r7, r3
    2328:	781a      	ldrb	r2, [r3, #0]
    232a:	69b9      	ldr	r1, [r7, #24]
    232c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    232e:	0018      	movs	r0, r3
    2330:	4b18      	ldr	r3, [pc, #96]	; (2394 <gsm_send_at_command+0x1e0>)
    2332:	4798      	blx	r3
	}
	
	//port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
	
	xSemaphoreGive(gsm_busy_semaphore);
    2334:	4b08      	ldr	r3, [pc, #32]	; (2358 <gsm_send_at_command+0x1a4>)
    2336:	6818      	ldr	r0, [r3, #0]
    2338:	2300      	movs	r3, #0
    233a:	2200      	movs	r2, #0
    233c:	2100      	movs	r1, #0
    233e:	4c16      	ldr	r4, [pc, #88]	; (2398 <gsm_send_at_command+0x1e4>)
    2340:	47a0      	blx	r4
	free(aDataBuffer);
    2342:	69bb      	ldr	r3, [r7, #24]
    2344:	0018      	movs	r0, r3
    2346:	4b15      	ldr	r3, [pc, #84]	; (239c <gsm_send_at_command+0x1e8>)
    2348:	4798      	blx	r3
	return err_no;
    234a:	231f      	movs	r3, #31
    234c:	18fb      	adds	r3, r7, r3
    234e:	781b      	ldrb	r3, [r3, #0]
}
    2350:	0018      	movs	r0, r3
    2352:	46bd      	mov	sp, r7
    2354:	b009      	add	sp, #36	; 0x24
    2356:	bd90      	pop	{r4, r7, pc}
    2358:	20000224 	.word	0x20000224
    235c:	0000e591 	.word	0x0000e591
    2360:	00001f45 	.word	0x00001f45
    2364:	00017a49 	.word	0x00017a49
    2368:	00017b57 	.word	0x00017b57
    236c:	00017de7 	.word	0x00017de7
    2370:	20000680 	.word	0x20000680
    2374:	00010b25 	.word	0x00010b25
    2378:	20000220 	.word	0x20000220
    237c:	0000fca5 	.word	0x0000fca5
    2380:	00010221 	.word	0x00010221
    2384:	2000021c 	.word	0x2000021c
    2388:	0000e3f1 	.word	0x0000e3f1
    238c:	00017e17 	.word	0x00017e17
    2390:	00018800 	.word	0x00018800
    2394:	00017b21 	.word	0x00017b21
    2398:	0000e0f1 	.word	0x0000e0f1
    239c:	00017ae9 	.word	0x00017ae9

000023a0 <gsm_check_module>:


enum gsm_error gsm_check_module(void)
{
    23a0:	b590      	push	{r4, r7, lr}
    23a2:	b083      	sub	sp, #12
    23a4:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT\r"),(const char*)RESPONS_OK,5000,0, NULL);
    23a6:	4a06      	ldr	r2, [pc, #24]	; (23c0 <gsm_check_module+0x20>)
    23a8:	4906      	ldr	r1, [pc, #24]	; (23c4 <gsm_check_module+0x24>)
    23aa:	4807      	ldr	r0, [pc, #28]	; (23c8 <gsm_check_module+0x28>)
    23ac:	2300      	movs	r3, #0
    23ae:	9300      	str	r3, [sp, #0]
    23b0:	2300      	movs	r3, #0
    23b2:	4c06      	ldr	r4, [pc, #24]	; (23cc <gsm_check_module+0x2c>)
    23b4:	47a0      	blx	r4
    23b6:	0003      	movs	r3, r0
}
    23b8:	0018      	movs	r0, r3
    23ba:	46bd      	mov	sp, r7
    23bc:	b001      	add	sp, #4
    23be:	bd90      	pop	{r4, r7, pc}
    23c0:	00001388 	.word	0x00001388
    23c4:	00018808 	.word	0x00018808
    23c8:	0001880c 	.word	0x0001880c
    23cc:	000021b5 	.word	0x000021b5

000023d0 <gsm_is_network_registered>:
{
	return gsm_send_at_command((const char*)("AT+IFC=0,0\r"), (const char*)RESPONS_OK,5000,0, NULL);
}

enum gsm_error gsm_is_network_registered(void)
{
    23d0:	b5b0      	push	{r4, r5, r7, lr}
    23d2:	b084      	sub	sp, #16
    23d4:	af02      	add	r7, sp, #8
	enum gsm_error errHomeNw;
	enum gsm_error errRomNw;
	errHomeNw = gsm_send_at_command((const char*)("AT+CREG?\r"), (const char*)"+CREG: 0,1",5000,0, NULL);
    23d6:	1dfc      	adds	r4, r7, #7
    23d8:	4a12      	ldr	r2, [pc, #72]	; (2424 <gsm_is_network_registered+0x54>)
    23da:	4913      	ldr	r1, [pc, #76]	; (2428 <gsm_is_network_registered+0x58>)
    23dc:	4813      	ldr	r0, [pc, #76]	; (242c <gsm_is_network_registered+0x5c>)
    23de:	2300      	movs	r3, #0
    23e0:	9300      	str	r3, [sp, #0]
    23e2:	2300      	movs	r3, #0
    23e4:	4d12      	ldr	r5, [pc, #72]	; (2430 <gsm_is_network_registered+0x60>)
    23e6:	47a8      	blx	r5
    23e8:	0003      	movs	r3, r0
    23ea:	7023      	strb	r3, [r4, #0]
	if (errHomeNw==GSM_ERROR_NONE)
    23ec:	1dfb      	adds	r3, r7, #7
    23ee:	781b      	ldrb	r3, [r3, #0]
    23f0:	2b00      	cmp	r3, #0
    23f2:	d101      	bne.n	23f8 <gsm_is_network_registered+0x28>
	{
		return GSM_NETWORK_REGISTERED;	
    23f4:	2309      	movs	r3, #9
    23f6:	e011      	b.n	241c <gsm_is_network_registered+0x4c>
	}
	else
	{
		errRomNw = gsm_send_at_command((const char*)("AT+CREG?\r"), (const char*)"+CREG: 0,5",5000,0, NULL);
    23f8:	1dbc      	adds	r4, r7, #6
    23fa:	4a0a      	ldr	r2, [pc, #40]	; (2424 <gsm_is_network_registered+0x54>)
    23fc:	490d      	ldr	r1, [pc, #52]	; (2434 <gsm_is_network_registered+0x64>)
    23fe:	480b      	ldr	r0, [pc, #44]	; (242c <gsm_is_network_registered+0x5c>)
    2400:	2300      	movs	r3, #0
    2402:	9300      	str	r3, [sp, #0]
    2404:	2300      	movs	r3, #0
    2406:	4d0a      	ldr	r5, [pc, #40]	; (2430 <gsm_is_network_registered+0x60>)
    2408:	47a8      	blx	r5
    240a:	0003      	movs	r3, r0
    240c:	7023      	strb	r3, [r4, #0]
		{
			if (errRomNw==GSM_ERROR_NONE)
    240e:	1dbb      	adds	r3, r7, #6
    2410:	781b      	ldrb	r3, [r3, #0]
    2412:	2b00      	cmp	r3, #0
    2414:	d101      	bne.n	241a <gsm_is_network_registered+0x4a>
			{
				return GSM_NETWORK_REGISTERED;
    2416:	2309      	movs	r3, #9
    2418:	e000      	b.n	241c <gsm_is_network_registered+0x4c>
			}
			else
			{
				return GSM_NETWORK_NOT_REGISTERED;
    241a:	230a      	movs	r3, #10
			}
		}
	}
}
    241c:	0018      	movs	r0, r3
    241e:	46bd      	mov	sp, r7
    2420:	b002      	add	sp, #8
    2422:	bdb0      	pop	{r4, r5, r7, pc}
    2424:	00001388 	.word	0x00001388
    2428:	0001881c 	.word	0x0001881c
    242c:	00018828 	.word	0x00018828
    2430:	000021b5 	.word	0x000021b5
    2434:	00018834 	.word	0x00018834

00002438 <gsm_set_baudrate>:

enum gsm_error gsm_set_baudrate(void)
{
    2438:	b590      	push	{r4, r7, lr}
    243a:	b089      	sub	sp, #36	; 0x24
    243c:	af02      	add	r7, sp, #8
	char baurate_at_command[20]={0};
    243e:	1d3b      	adds	r3, r7, #4
    2440:	0018      	movs	r0, r3
    2442:	2314      	movs	r3, #20
    2444:	001a      	movs	r2, r3
    2446:	2100      	movs	r1, #0
    2448:	4b0a      	ldr	r3, [pc, #40]	; (2474 <gsm_set_baudrate+0x3c>)
    244a:	4798      	blx	r3
		
	sprintf(baurate_at_command, "AT+IPR=%d\r",GSM_BAUDRATE);
    244c:	23e1      	movs	r3, #225	; 0xe1
    244e:	025a      	lsls	r2, r3, #9
    2450:	4909      	ldr	r1, [pc, #36]	; (2478 <gsm_set_baudrate+0x40>)
    2452:	1d3b      	adds	r3, r7, #4
    2454:	0018      	movs	r0, r3
    2456:	4b09      	ldr	r3, [pc, #36]	; (247c <gsm_set_baudrate+0x44>)
    2458:	4798      	blx	r3
	
	return gsm_send_at_command((const char*)(baurate_at_command), (const char*)RESPONS_OK,5000,0, NULL);
    245a:	4a09      	ldr	r2, [pc, #36]	; (2480 <gsm_set_baudrate+0x48>)
    245c:	4909      	ldr	r1, [pc, #36]	; (2484 <gsm_set_baudrate+0x4c>)
    245e:	1d38      	adds	r0, r7, #4
    2460:	2300      	movs	r3, #0
    2462:	9300      	str	r3, [sp, #0]
    2464:	2300      	movs	r3, #0
    2466:	4c08      	ldr	r4, [pc, #32]	; (2488 <gsm_set_baudrate+0x50>)
    2468:	47a0      	blx	r4
    246a:	0003      	movs	r3, r0
}
    246c:	0018      	movs	r0, r3
    246e:	46bd      	mov	sp, r7
    2470:	b007      	add	sp, #28
    2472:	bd90      	pop	{r4, r7, pc}
    2474:	00017b57 	.word	0x00017b57
    2478:	00018840 	.word	0x00018840
    247c:	00017d5d 	.word	0x00017d5d
    2480:	00001388 	.word	0x00001388
    2484:	00018808 	.word	0x00018808
    2488:	000021b5 	.word	0x000021b5

0000248c <gsm_detect_simcard>:
{
	return gsm_send_at_command((const char*)("AT+CFUN=1,1\r"), (const char*)RESPONS_OK,10000,0, NULL);
}

enum gsm_error gsm_detect_simcard(void)
{
    248c:	b590      	push	{r4, r7, lr}
    248e:	b083      	sub	sp, #12
    2490:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CPIN?\r"), (const char*)"+CPIN: READY",5000,0, NULL);
    2492:	4a06      	ldr	r2, [pc, #24]	; (24ac <gsm_detect_simcard+0x20>)
    2494:	4906      	ldr	r1, [pc, #24]	; (24b0 <gsm_detect_simcard+0x24>)
    2496:	4807      	ldr	r0, [pc, #28]	; (24b4 <gsm_detect_simcard+0x28>)
    2498:	2300      	movs	r3, #0
    249a:	9300      	str	r3, [sp, #0]
    249c:	2300      	movs	r3, #0
    249e:	4c06      	ldr	r4, [pc, #24]	; (24b8 <gsm_detect_simcard+0x2c>)
    24a0:	47a0      	blx	r4
    24a2:	0003      	movs	r3, r0
}
    24a4:	0018      	movs	r0, r3
    24a6:	46bd      	mov	sp, r7
    24a8:	b001      	add	sp, #4
    24aa:	bd90      	pop	{r4, r7, pc}
    24ac:	00001388 	.word	0x00001388
    24b0:	000188b0 	.word	0x000188b0
    24b4:	000188c0 	.word	0x000188c0
    24b8:	000021b5 	.word	0x000021b5

000024bc <gsm_delete_all_sms>:

enum gsm_error gsm_delete_all_sms(void)
{
    24bc:	b590      	push	{r4, r7, lr}
    24be:	b083      	sub	sp, #12
    24c0:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CMGDA=\"DEL ALL\"\r"), (const char*)RESPONS_OK,25000,0, NULL);
    24c2:	4a06      	ldr	r2, [pc, #24]	; (24dc <gsm_delete_all_sms+0x20>)
    24c4:	4906      	ldr	r1, [pc, #24]	; (24e0 <gsm_delete_all_sms+0x24>)
    24c6:	4807      	ldr	r0, [pc, #28]	; (24e4 <gsm_delete_all_sms+0x28>)
    24c8:	2300      	movs	r3, #0
    24ca:	9300      	str	r3, [sp, #0]
    24cc:	2300      	movs	r3, #0
    24ce:	4c06      	ldr	r4, [pc, #24]	; (24e8 <gsm_delete_all_sms+0x2c>)
    24d0:	47a0      	blx	r4
    24d2:	0003      	movs	r3, r0
}
    24d4:	0018      	movs	r0, r3
    24d6:	46bd      	mov	sp, r7
    24d8:	b001      	add	sp, #4
    24da:	bd90      	pop	{r4, r7, pc}
    24dc:	000061a8 	.word	0x000061a8
    24e0:	00018808 	.word	0x00018808
    24e4:	000188cc 	.word	0x000188cc
    24e8:	000021b5 	.word	0x000021b5

000024ec <gsm_store_active_profile>:

enum gsm_error gsm_store_active_profile(void)
{
    24ec:	b590      	push	{r4, r7, lr}
    24ee:	b083      	sub	sp, #12
    24f0:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT&W\r"), (const char*)RESPONS_OK,5000,0, NULL);
    24f2:	4a06      	ldr	r2, [pc, #24]	; (250c <gsm_store_active_profile+0x20>)
    24f4:	4906      	ldr	r1, [pc, #24]	; (2510 <gsm_store_active_profile+0x24>)
    24f6:	4807      	ldr	r0, [pc, #28]	; (2514 <gsm_store_active_profile+0x28>)
    24f8:	2300      	movs	r3, #0
    24fa:	9300      	str	r3, [sp, #0]
    24fc:	2300      	movs	r3, #0
    24fe:	4c06      	ldr	r4, [pc, #24]	; (2518 <gsm_store_active_profile+0x2c>)
    2500:	47a0      	blx	r4
    2502:	0003      	movs	r3, r0
}
    2504:	0018      	movs	r0, r3
    2506:	46bd      	mov	sp, r7
    2508:	b001      	add	sp, #4
    250a:	bd90      	pop	{r4, r7, pc}
    250c:	00001388 	.word	0x00001388
    2510:	00018808 	.word	0x00018808
    2514:	000188e0 	.word	0x000188e0
    2518:	000021b5 	.word	0x000021b5

0000251c <gsm_enable_calling_line_identification>:


enum gsm_error gsm_enable_calling_line_identification(void)
{
    251c:	b590      	push	{r4, r7, lr}
    251e:	b083      	sub	sp, #12
    2520:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CLIP=1\r"), (const char*)RESPONS_OK,15000,0, NULL);
    2522:	4a06      	ldr	r2, [pc, #24]	; (253c <gsm_enable_calling_line_identification+0x20>)
    2524:	4906      	ldr	r1, [pc, #24]	; (2540 <gsm_enable_calling_line_identification+0x24>)
    2526:	4807      	ldr	r0, [pc, #28]	; (2544 <gsm_enable_calling_line_identification+0x28>)
    2528:	2300      	movs	r3, #0
    252a:	9300      	str	r3, [sp, #0]
    252c:	2300      	movs	r3, #0
    252e:	4c06      	ldr	r4, [pc, #24]	; (2548 <gsm_enable_calling_line_identification+0x2c>)
    2530:	47a0      	blx	r4
    2532:	0003      	movs	r3, r0
}
    2534:	0018      	movs	r0, r3
    2536:	46bd      	mov	sp, r7
    2538:	b001      	add	sp, #4
    253a:	bd90      	pop	{r4, r7, pc}
    253c:	00003a98 	.word	0x00003a98
    2540:	00018808 	.word	0x00018808
    2544:	000188e8 	.word	0x000188e8
    2548:	000021b5 	.word	0x000021b5

0000254c <gsm_enable_connected_line_identification_presentation>:

enum gsm_error gsm_enable_connected_line_identification_presentation(void)
{
    254c:	b590      	push	{r4, r7, lr}
    254e:	b083      	sub	sp, #12
    2550:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+COLP=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
    2552:	4a06      	ldr	r2, [pc, #24]	; (256c <gsm_enable_connected_line_identification_presentation+0x20>)
    2554:	4906      	ldr	r1, [pc, #24]	; (2570 <gsm_enable_connected_line_identification_presentation+0x24>)
    2556:	4807      	ldr	r0, [pc, #28]	; (2574 <gsm_enable_connected_line_identification_presentation+0x28>)
    2558:	2300      	movs	r3, #0
    255a:	9300      	str	r3, [sp, #0]
    255c:	2300      	movs	r3, #0
    255e:	4c06      	ldr	r4, [pc, #24]	; (2578 <gsm_enable_connected_line_identification_presentation+0x2c>)
    2560:	47a0      	blx	r4
    2562:	0003      	movs	r3, r0
}
    2564:	0018      	movs	r0, r3
    2566:	46bd      	mov	sp, r7
    2568:	b001      	add	sp, #4
    256a:	bd90      	pop	{r4, r7, pc}
    256c:	00001388 	.word	0x00001388
    2570:	00018808 	.word	0x00018808
    2574:	000188f4 	.word	0x000188f4
    2578:	000021b5 	.word	0x000021b5

0000257c <gsm_enable_list_current_calls_of_ME>:
	}
}


enum gsm_error gsm_enable_list_current_calls_of_ME(void)
{
    257c:	b590      	push	{r4, r7, lr}
    257e:	b083      	sub	sp, #12
    2580:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CLCC=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
    2582:	4a06      	ldr	r2, [pc, #24]	; (259c <gsm_enable_list_current_calls_of_ME+0x20>)
    2584:	4906      	ldr	r1, [pc, #24]	; (25a0 <gsm_enable_list_current_calls_of_ME+0x24>)
    2586:	4807      	ldr	r0, [pc, #28]	; (25a4 <gsm_enable_list_current_calls_of_ME+0x28>)
    2588:	2300      	movs	r3, #0
    258a:	9300      	str	r3, [sp, #0]
    258c:	2300      	movs	r3, #0
    258e:	4c06      	ldr	r4, [pc, #24]	; (25a8 <gsm_enable_list_current_calls_of_ME+0x2c>)
    2590:	47a0      	blx	r4
    2592:	0003      	movs	r3, r0
}
    2594:	0018      	movs	r0, r3
    2596:	46bd      	mov	sp, r7
    2598:	b001      	add	sp, #4
    259a:	bd90      	pop	{r4, r7, pc}
    259c:	00001388 	.word	0x00001388
    25a0:	00018808 	.word	0x00018808
    25a4:	00018928 	.word	0x00018928
    25a8:	000021b5 	.word	0x000021b5

000025ac <gsm_factory_reset>:

enum gsm_error gsm_factory_reset(void)
{
    25ac:	b590      	push	{r4, r7, lr}
    25ae:	b083      	sub	sp, #12
    25b0:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT&F\r"), (const char*)RESPONS_OK,15000,0, NULL);
    25b2:	4a06      	ldr	r2, [pc, #24]	; (25cc <gsm_factory_reset+0x20>)
    25b4:	4906      	ldr	r1, [pc, #24]	; (25d0 <gsm_factory_reset+0x24>)
    25b6:	4807      	ldr	r0, [pc, #28]	; (25d4 <gsm_factory_reset+0x28>)
    25b8:	2300      	movs	r3, #0
    25ba:	9300      	str	r3, [sp, #0]
    25bc:	2300      	movs	r3, #0
    25be:	4c06      	ldr	r4, [pc, #24]	; (25d8 <gsm_factory_reset+0x2c>)
    25c0:	47a0      	blx	r4
    25c2:	0003      	movs	r3, r0
}
    25c4:	0018      	movs	r0, r3
    25c6:	46bd      	mov	sp, r7
    25c8:	b001      	add	sp, #4
    25ca:	bd90      	pop	{r4, r7, pc}
    25cc:	00003a98 	.word	0x00003a98
    25d0:	00018808 	.word	0x00018808
    25d4:	00018934 	.word	0x00018934
    25d8:	000021b5 	.word	0x000021b5

000025dc <gsm_echo_off>:

enum gsm_error gsm_echo_off(void)
{
    25dc:	b590      	push	{r4, r7, lr}
    25de:	b083      	sub	sp, #12
    25e0:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("ATE0\r"), (const char*)RESPONS_OK,5000,0, NULL);
    25e2:	4a06      	ldr	r2, [pc, #24]	; (25fc <gsm_echo_off+0x20>)
    25e4:	4906      	ldr	r1, [pc, #24]	; (2600 <gsm_echo_off+0x24>)
    25e6:	4807      	ldr	r0, [pc, #28]	; (2604 <gsm_echo_off+0x28>)
    25e8:	2300      	movs	r3, #0
    25ea:	9300      	str	r3, [sp, #0]
    25ec:	2300      	movs	r3, #0
    25ee:	4c06      	ldr	r4, [pc, #24]	; (2608 <gsm_echo_off+0x2c>)
    25f0:	47a0      	blx	r4
    25f2:	0003      	movs	r3, r0
}
    25f4:	0018      	movs	r0, r3
    25f6:	46bd      	mov	sp, r7
    25f8:	b001      	add	sp, #4
    25fa:	bd90      	pop	{r4, r7, pc}
    25fc:	00001388 	.word	0x00001388
    2600:	00018808 	.word	0x00018808
    2604:	0001893c 	.word	0x0001893c
    2608:	000021b5 	.word	0x000021b5

0000260c <gsm_select_sms_message_formate_text_mode>:

enum gsm_error gsm_select_sms_message_formate_text_mode(void) //PDU:0,TEXT:1
{
    260c:	b590      	push	{r4, r7, lr}
    260e:	b083      	sub	sp, #12
    2610:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CMGF=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
    2612:	4a06      	ldr	r2, [pc, #24]	; (262c <gsm_select_sms_message_formate_text_mode+0x20>)
    2614:	4906      	ldr	r1, [pc, #24]	; (2630 <gsm_select_sms_message_formate_text_mode+0x24>)
    2616:	4807      	ldr	r0, [pc, #28]	; (2634 <gsm_select_sms_message_formate_text_mode+0x28>)
    2618:	2300      	movs	r3, #0
    261a:	9300      	str	r3, [sp, #0]
    261c:	2300      	movs	r3, #0
    261e:	4c06      	ldr	r4, [pc, #24]	; (2638 <gsm_select_sms_message_formate_text_mode+0x2c>)
    2620:	47a0      	blx	r4
    2622:	0003      	movs	r3, r0
}
    2624:	0018      	movs	r0, r3
    2626:	46bd      	mov	sp, r7
    2628:	b001      	add	sp, #4
    262a:	bd90      	pop	{r4, r7, pc}
    262c:	00001388 	.word	0x00001388
    2630:	00018808 	.word	0x00018808
    2634:	00018944 	.word	0x00018944
    2638:	000021b5 	.word	0x000021b5

0000263c <gsm_set_sms_text_mode_parameter>:

enum gsm_error gsm_set_sms_text_mode_parameter(void)
{
    263c:	b590      	push	{r4, r7, lr}
    263e:	b083      	sub	sp, #12
    2640:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CSMP=17,167,0,0\r"), (const char*)RESPONS_OK,7000,0, NULL);
    2642:	4a06      	ldr	r2, [pc, #24]	; (265c <gsm_set_sms_text_mode_parameter+0x20>)
    2644:	4906      	ldr	r1, [pc, #24]	; (2660 <gsm_set_sms_text_mode_parameter+0x24>)
    2646:	4807      	ldr	r0, [pc, #28]	; (2664 <gsm_set_sms_text_mode_parameter+0x28>)
    2648:	2300      	movs	r3, #0
    264a:	9300      	str	r3, [sp, #0]
    264c:	2300      	movs	r3, #0
    264e:	4c06      	ldr	r4, [pc, #24]	; (2668 <gsm_set_sms_text_mode_parameter+0x2c>)
    2650:	47a0      	blx	r4
    2652:	0003      	movs	r3, r0
}
    2654:	0018      	movs	r0, r3
    2656:	46bd      	mov	sp, r7
    2658:	b001      	add	sp, #4
    265a:	bd90      	pop	{r4, r7, pc}
    265c:	00001b58 	.word	0x00001b58
    2660:	00018808 	.word	0x00018808
    2664:	00018950 	.word	0x00018950
    2668:	000021b5 	.word	0x000021b5

0000266c <gsm_getsignalstrength>:
 20--25   4
 26--31   5
 
 */
uint8_t gsm_getsignalstrength(void)
{
    266c:	b5b0      	push	{r4, r5, r7, lr}
    266e:	b088      	sub	sp, #32
    2670:	af02      	add	r7, sp, #8
	
	uint8_t sig_strength;
	
	const uint8_t MAX_BUFFER = 100;
    2672:	2316      	movs	r3, #22
    2674:	18fb      	adds	r3, r7, r3
    2676:	2264      	movs	r2, #100	; 0x64
    2678:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
    267a:	2316      	movs	r3, #22
    267c:	18fb      	adds	r3, r7, r3
    267e:	781b      	ldrb	r3, [r3, #0]
    2680:	2101      	movs	r1, #1
    2682:	0018      	movs	r0, r3
    2684:	4b60      	ldr	r3, [pc, #384]	; (2808 <gsm_getsignalstrength+0x19c>)
    2686:	4798      	blx	r3
    2688:	0003      	movs	r3, r0
    268a:	613b      	str	r3, [r7, #16]
	if (cmdx == NULL)
    268c:	693b      	ldr	r3, [r7, #16]
    268e:	2b00      	cmp	r3, #0
    2690:	d105      	bne.n	269e <gsm_getsignalstrength+0x32>
	{
		free(cmdx);
    2692:	693b      	ldr	r3, [r7, #16]
    2694:	0018      	movs	r0, r3
    2696:	4b5d      	ldr	r3, [pc, #372]	; (280c <gsm_getsignalstrength+0x1a0>)
    2698:	4798      	blx	r3
		return 0;
    269a:	2300      	movs	r3, #0
    269c:	e0af      	b.n	27fe <gsm_getsignalstrength+0x192>
	}
	memset(cmdx, '\0', MAX_BUFFER);
    269e:	2316      	movs	r3, #22
    26a0:	18fb      	adds	r3, r7, r3
    26a2:	781a      	ldrb	r2, [r3, #0]
    26a4:	693b      	ldr	r3, [r7, #16]
    26a6:	2100      	movs	r1, #0
    26a8:	0018      	movs	r0, r3
    26aa:	4b59      	ldr	r3, [pc, #356]	; (2810 <gsm_getsignalstrength+0x1a4>)
    26ac:	4798      	blx	r3
	enum gsm_error gsm_err =  gsm_send_at_command((const char*)("AT+CSQ\r"), (const char*)RESPONS_OK,5000,MAX_BUFFER,cmdx);
    26ae:	230f      	movs	r3, #15
    26b0:	18fc      	adds	r4, r7, r3
    26b2:	2316      	movs	r3, #22
    26b4:	18fb      	adds	r3, r7, r3
    26b6:	781a      	ldrb	r2, [r3, #0]
    26b8:	4d56      	ldr	r5, [pc, #344]	; (2814 <gsm_getsignalstrength+0x1a8>)
    26ba:	4957      	ldr	r1, [pc, #348]	; (2818 <gsm_getsignalstrength+0x1ac>)
    26bc:	4857      	ldr	r0, [pc, #348]	; (281c <gsm_getsignalstrength+0x1b0>)
    26be:	693b      	ldr	r3, [r7, #16]
    26c0:	9300      	str	r3, [sp, #0]
    26c2:	0013      	movs	r3, r2
    26c4:	002a      	movs	r2, r5
    26c6:	4d56      	ldr	r5, [pc, #344]	; (2820 <gsm_getsignalstrength+0x1b4>)
    26c8:	47a8      	blx	r5
    26ca:	0003      	movs	r3, r0
    26cc:	7023      	strb	r3, [r4, #0]
	
	if(gsm_err == GSM_ERROR_NONE)
    26ce:	230f      	movs	r3, #15
    26d0:	18fb      	adds	r3, r7, r3
    26d2:	781b      	ldrb	r3, [r3, #0]
    26d4:	2b00      	cmp	r3, #0
    26d6:	d000      	beq.n	26da <gsm_getsignalstrength+0x6e>
    26d8:	e086      	b.n	27e8 <gsm_getsignalstrength+0x17c>
	{
		if (strstr(cmdx,"99")==NULL)
    26da:	4a52      	ldr	r2, [pc, #328]	; (2824 <gsm_getsignalstrength+0x1b8>)
    26dc:	693b      	ldr	r3, [r7, #16]
    26de:	0011      	movs	r1, r2
    26e0:	0018      	movs	r0, r3
    26e2:	4b51      	ldr	r3, [pc, #324]	; (2828 <gsm_getsignalstrength+0x1bc>)
    26e4:	4798      	blx	r3
    26e6:	1e03      	subs	r3, r0, #0
    26e8:	d000      	beq.n	26ec <gsm_getsignalstrength+0x80>
    26ea:	e078      	b.n	27de <gsm_getsignalstrength+0x172>
		{
			char *ptr_tocken;
			ptr_tocken = strtok(cmdx,":");
    26ec:	4a4f      	ldr	r2, [pc, #316]	; (282c <gsm_getsignalstrength+0x1c0>)
    26ee:	693b      	ldr	r3, [r7, #16]
    26f0:	0011      	movs	r1, r2
    26f2:	0018      	movs	r0, r3
    26f4:	4b4e      	ldr	r3, [pc, #312]	; (2830 <gsm_getsignalstrength+0x1c4>)
    26f6:	4798      	blx	r3
    26f8:	0003      	movs	r3, r0
    26fa:	60bb      	str	r3, [r7, #8]
			ptr_tocken = strtok(NULL,":");
    26fc:	4b4b      	ldr	r3, [pc, #300]	; (282c <gsm_getsignalstrength+0x1c0>)
    26fe:	0019      	movs	r1, r3
    2700:	2000      	movs	r0, #0
    2702:	4b4b      	ldr	r3, [pc, #300]	; (2830 <gsm_getsignalstrength+0x1c4>)
    2704:	4798      	blx	r3
    2706:	0003      	movs	r3, r0
    2708:	60bb      	str	r3, [r7, #8]
			ptr_tocken = strtok(ptr_tocken,",");
    270a:	4a4a      	ldr	r2, [pc, #296]	; (2834 <gsm_getsignalstrength+0x1c8>)
    270c:	68bb      	ldr	r3, [r7, #8]
    270e:	0011      	movs	r1, r2
    2710:	0018      	movs	r0, r3
    2712:	4b47      	ldr	r3, [pc, #284]	; (2830 <gsm_getsignalstrength+0x1c4>)
    2714:	4798      	blx	r3
    2716:	0003      	movs	r3, r0
    2718:	60bb      	str	r3, [r7, #8]
			RemoveSpaces(ptr_tocken);
    271a:	68bb      	ldr	r3, [r7, #8]
    271c:	0018      	movs	r0, r3
    271e:	4b46      	ldr	r3, [pc, #280]	; (2838 <gsm_getsignalstrength+0x1cc>)
    2720:	4798      	blx	r3
			uint8_t nw = atoi(ptr_tocken);
    2722:	68bb      	ldr	r3, [r7, #8]
    2724:	0018      	movs	r0, r3
    2726:	4b45      	ldr	r3, [pc, #276]	; (283c <gsm_getsignalstrength+0x1d0>)
    2728:	4798      	blx	r3
    272a:	0002      	movs	r2, r0
    272c:	1dfb      	adds	r3, r7, #7
    272e:	701a      	strb	r2, [r3, #0]
			if (nw==0 || nw==1 || nw== 99)
    2730:	1dfb      	adds	r3, r7, #7
    2732:	781b      	ldrb	r3, [r3, #0]
    2734:	2b00      	cmp	r3, #0
    2736:	d007      	beq.n	2748 <gsm_getsignalstrength+0xdc>
    2738:	1dfb      	adds	r3, r7, #7
    273a:	781b      	ldrb	r3, [r3, #0]
    273c:	2b01      	cmp	r3, #1
    273e:	d003      	beq.n	2748 <gsm_getsignalstrength+0xdc>
    2740:	1dfb      	adds	r3, r7, #7
    2742:	781b      	ldrb	r3, [r3, #0]
    2744:	2b63      	cmp	r3, #99	; 0x63
    2746:	d104      	bne.n	2752 <gsm_getsignalstrength+0xe6>
			{
				sig_strength = 0;
    2748:	2317      	movs	r3, #23
    274a:	18fb      	adds	r3, r7, r3
    274c:	2200      	movs	r2, #0
    274e:	701a      	strb	r2, [r3, #0]
    2750:	e04e      	b.n	27f0 <gsm_getsignalstrength+0x184>
			}
			else
			{
				if (nw>=2 && nw<=7)
    2752:	1dfb      	adds	r3, r7, #7
    2754:	781b      	ldrb	r3, [r3, #0]
    2756:	2b01      	cmp	r3, #1
    2758:	d908      	bls.n	276c <gsm_getsignalstrength+0x100>
    275a:	1dfb      	adds	r3, r7, #7
    275c:	781b      	ldrb	r3, [r3, #0]
    275e:	2b07      	cmp	r3, #7
    2760:	d804      	bhi.n	276c <gsm_getsignalstrength+0x100>
				{
					sig_strength = 1;
    2762:	2317      	movs	r3, #23
    2764:	18fb      	adds	r3, r7, r3
    2766:	2201      	movs	r2, #1
    2768:	701a      	strb	r2, [r3, #0]
    276a:	e041      	b.n	27f0 <gsm_getsignalstrength+0x184>
				}
				else if (nw>=8 && nw<=13)
    276c:	1dfb      	adds	r3, r7, #7
    276e:	781b      	ldrb	r3, [r3, #0]
    2770:	2b07      	cmp	r3, #7
    2772:	d908      	bls.n	2786 <gsm_getsignalstrength+0x11a>
    2774:	1dfb      	adds	r3, r7, #7
    2776:	781b      	ldrb	r3, [r3, #0]
    2778:	2b0d      	cmp	r3, #13
    277a:	d804      	bhi.n	2786 <gsm_getsignalstrength+0x11a>
				{
					sig_strength = 2;
    277c:	2317      	movs	r3, #23
    277e:	18fb      	adds	r3, r7, r3
    2780:	2202      	movs	r2, #2
    2782:	701a      	strb	r2, [r3, #0]
    2784:	e034      	b.n	27f0 <gsm_getsignalstrength+0x184>
				}
				else if (nw>=14 && nw<=19)
    2786:	1dfb      	adds	r3, r7, #7
    2788:	781b      	ldrb	r3, [r3, #0]
    278a:	2b0d      	cmp	r3, #13
    278c:	d908      	bls.n	27a0 <gsm_getsignalstrength+0x134>
    278e:	1dfb      	adds	r3, r7, #7
    2790:	781b      	ldrb	r3, [r3, #0]
    2792:	2b13      	cmp	r3, #19
    2794:	d804      	bhi.n	27a0 <gsm_getsignalstrength+0x134>
				{
					sig_strength = 3;
    2796:	2317      	movs	r3, #23
    2798:	18fb      	adds	r3, r7, r3
    279a:	2203      	movs	r2, #3
    279c:	701a      	strb	r2, [r3, #0]
    279e:	e027      	b.n	27f0 <gsm_getsignalstrength+0x184>
				}
				else if (nw>=20 && nw<=25)
    27a0:	1dfb      	adds	r3, r7, #7
    27a2:	781b      	ldrb	r3, [r3, #0]
    27a4:	2b13      	cmp	r3, #19
    27a6:	d908      	bls.n	27ba <gsm_getsignalstrength+0x14e>
    27a8:	1dfb      	adds	r3, r7, #7
    27aa:	781b      	ldrb	r3, [r3, #0]
    27ac:	2b19      	cmp	r3, #25
    27ae:	d804      	bhi.n	27ba <gsm_getsignalstrength+0x14e>
				{
					sig_strength = 4;
    27b0:	2317      	movs	r3, #23
    27b2:	18fb      	adds	r3, r7, r3
    27b4:	2204      	movs	r2, #4
    27b6:	701a      	strb	r2, [r3, #0]
    27b8:	e01a      	b.n	27f0 <gsm_getsignalstrength+0x184>
				}
				else if (nw>=26 && nw<=31)
    27ba:	1dfb      	adds	r3, r7, #7
    27bc:	781b      	ldrb	r3, [r3, #0]
    27be:	2b19      	cmp	r3, #25
    27c0:	d908      	bls.n	27d4 <gsm_getsignalstrength+0x168>
    27c2:	1dfb      	adds	r3, r7, #7
    27c4:	781b      	ldrb	r3, [r3, #0]
    27c6:	2b1f      	cmp	r3, #31
    27c8:	d804      	bhi.n	27d4 <gsm_getsignalstrength+0x168>
				{
					sig_strength = 5;
    27ca:	2317      	movs	r3, #23
    27cc:	18fb      	adds	r3, r7, r3
    27ce:	2205      	movs	r2, #5
    27d0:	701a      	strb	r2, [r3, #0]
    27d2:	e00d      	b.n	27f0 <gsm_getsignalstrength+0x184>
				}
				else
				{
					sig_strength = 0;
    27d4:	2317      	movs	r3, #23
    27d6:	18fb      	adds	r3, r7, r3
    27d8:	2200      	movs	r2, #0
    27da:	701a      	strb	r2, [r3, #0]
    27dc:	e008      	b.n	27f0 <gsm_getsignalstrength+0x184>
				}
			}
		}
		else
		{
			sig_strength = 0;
    27de:	2317      	movs	r3, #23
    27e0:	18fb      	adds	r3, r7, r3
    27e2:	2200      	movs	r2, #0
    27e4:	701a      	strb	r2, [r3, #0]
    27e6:	e003      	b.n	27f0 <gsm_getsignalstrength+0x184>
		}
	}
	else
	{
		sig_strength = 0;
    27e8:	2317      	movs	r3, #23
    27ea:	18fb      	adds	r3, r7, r3
    27ec:	2200      	movs	r2, #0
    27ee:	701a      	strb	r2, [r3, #0]
	}
	
	free(cmdx);
    27f0:	693b      	ldr	r3, [r7, #16]
    27f2:	0018      	movs	r0, r3
    27f4:	4b05      	ldr	r3, [pc, #20]	; (280c <gsm_getsignalstrength+0x1a0>)
    27f6:	4798      	blx	r3
	
	return sig_strength;
    27f8:	2317      	movs	r3, #23
    27fa:	18fb      	adds	r3, r7, r3
    27fc:	781b      	ldrb	r3, [r3, #0]
}
    27fe:	0018      	movs	r0, r3
    2800:	46bd      	mov	sp, r7
    2802:	b006      	add	sp, #24
    2804:	bdb0      	pop	{r4, r5, r7, pc}
    2806:	46c0      	nop			; (mov r8, r8)
    2808:	00017a49 	.word	0x00017a49
    280c:	00017ae9 	.word	0x00017ae9
    2810:	00017b57 	.word	0x00017b57
    2814:	00001388 	.word	0x00001388
    2818:	00018808 	.word	0x00018808
    281c:	0001897c 	.word	0x0001897c
    2820:	000021b5 	.word	0x000021b5
    2824:	00018984 	.word	0x00018984
    2828:	00017e17 	.word	0x00017e17
    282c:	00018920 	.word	0x00018920
    2830:	00017e49 	.word	0x00017e49
    2834:	00018924 	.word	0x00018924
    2838:	00002841 	.word	0x00002841
    283c:	00017a3d 	.word	0x00017a3d

00002840 <RemoveSpaces>:

void RemoveSpaces(char* source)
{
    2840:	b580      	push	{r7, lr}
    2842:	b084      	sub	sp, #16
    2844:	af00      	add	r7, sp, #0
    2846:	6078      	str	r0, [r7, #4]
	char* i = source;
    2848:	687b      	ldr	r3, [r7, #4]
    284a:	60fb      	str	r3, [r7, #12]
	char* j = source;
    284c:	687b      	ldr	r3, [r7, #4]
    284e:	60bb      	str	r3, [r7, #8]
	while(*j != 0)
    2850:	e00c      	b.n	286c <RemoveSpaces+0x2c>
	{
		*i = *j++;
    2852:	68bb      	ldr	r3, [r7, #8]
    2854:	1c5a      	adds	r2, r3, #1
    2856:	60ba      	str	r2, [r7, #8]
    2858:	781a      	ldrb	r2, [r3, #0]
    285a:	68fb      	ldr	r3, [r7, #12]
    285c:	701a      	strb	r2, [r3, #0]
		if(*i != ' ')
    285e:	68fb      	ldr	r3, [r7, #12]
    2860:	781b      	ldrb	r3, [r3, #0]
    2862:	2b20      	cmp	r3, #32
    2864:	d002      	beq.n	286c <RemoveSpaces+0x2c>
		i++;
    2866:	68fb      	ldr	r3, [r7, #12]
    2868:	3301      	adds	r3, #1
    286a:	60fb      	str	r3, [r7, #12]
	while(*j != 0)
    286c:	68bb      	ldr	r3, [r7, #8]
    286e:	781b      	ldrb	r3, [r3, #0]
    2870:	2b00      	cmp	r3, #0
    2872:	d1ee      	bne.n	2852 <RemoveSpaces+0x12>
	}
	*i = 0;
    2874:	68fb      	ldr	r3, [r7, #12]
    2876:	2200      	movs	r2, #0
    2878:	701a      	strb	r2, [r3, #0]
}
    287a:	46c0      	nop			; (mov r8, r8)
    287c:	46bd      	mov	sp, r7
    287e:	b004      	add	sp, #16
    2880:	bd80      	pop	{r7, pc}
	...

00002884 <gsm_enable_new_sms_message_indications>:
{
	return gsm_send_at_command((const char*)("AT&F\r"), (const char*)RESPONS_OK,10000,0,NULL);
}

enum gsm_error gsm_enable_new_sms_message_indications(void)
{
    2884:	b590      	push	{r4, r7, lr}
    2886:	b083      	sub	sp, #12
    2888:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CNMI=2,1,0,0,0\r"), (const char*)RESPONS_OK,5000,0,NULL);
    288a:	4a06      	ldr	r2, [pc, #24]	; (28a4 <gsm_enable_new_sms_message_indications+0x20>)
    288c:	4906      	ldr	r1, [pc, #24]	; (28a8 <gsm_enable_new_sms_message_indications+0x24>)
    288e:	4807      	ldr	r0, [pc, #28]	; (28ac <gsm_enable_new_sms_message_indications+0x28>)
    2890:	2300      	movs	r3, #0
    2892:	9300      	str	r3, [sp, #0]
    2894:	2300      	movs	r3, #0
    2896:	4c06      	ldr	r4, [pc, #24]	; (28b0 <gsm_enable_new_sms_message_indications+0x2c>)
    2898:	47a0      	blx	r4
    289a:	0003      	movs	r3, r0
}
    289c:	0018      	movs	r0, r3
    289e:	46bd      	mov	sp, r7
    28a0:	b001      	add	sp, #4
    28a2:	bd90      	pop	{r4, r7, pc}
    28a4:	00001388 	.word	0x00001388
    28a8:	00018808 	.word	0x00018808
    28ac:	00018988 	.word	0x00018988
    28b0:	000021b5 	.word	0x000021b5

000028b4 <gsm_send_sms>:
{
	return gsm_send_at_command((const char*)("AT+CNMI=1,0,0,0,0\r"), (const char*)RESPONS_OK,5000,0,NULL);
}

enum gsm_error gsm_send_sms(const char *phone_number, const char *message)
{
    28b4:	b5b0      	push	{r4, r5, r7, lr}
    28b6:	b088      	sub	sp, #32
    28b8:	af02      	add	r7, sp, #8
    28ba:	6078      	str	r0, [r7, #4]
    28bc:	6039      	str	r1, [r7, #0]
	/* Double-check the message length is acceptable (160 byte max payload) */
	if (strlen(message) > 250) 
    28be:	683b      	ldr	r3, [r7, #0]
    28c0:	0018      	movs	r0, r3
    28c2:	4b3b      	ldr	r3, [pc, #236]	; (29b0 <gsm_send_sms+0xfc>)
    28c4:	4798      	blx	r3
    28c6:	0003      	movs	r3, r0
    28c8:	2bfa      	cmp	r3, #250	; 0xfa
    28ca:	d901      	bls.n	28d0 <gsm_send_sms+0x1c>
	{
		return GSM_ERROR_MESSAGE_LENGTH;
    28cc:	2303      	movs	r3, #3
    28ce:	e06b      	b.n	29a8 <gsm_send_sms+0xf4>
	}
	/* Double-check the recipient phone number length */
	if (strlen(phone_number) < 6) 
    28d0:	687b      	ldr	r3, [r7, #4]
    28d2:	0018      	movs	r0, r3
    28d4:	4b36      	ldr	r3, [pc, #216]	; (29b0 <gsm_send_sms+0xfc>)
    28d6:	4798      	blx	r3
    28d8:	0003      	movs	r3, r0
    28da:	2b05      	cmp	r3, #5
    28dc:	d801      	bhi.n	28e2 <gsm_send_sms+0x2e>
	{
		return GSM_ERROR_PHONE_NUMBER_LENGTH;
    28de:	2304      	movs	r3, #4
    28e0:	e062      	b.n	29a8 <gsm_send_sms+0xf4>
	}
	
	enum gsm_error err;
	const uint8_t MAX_BUFFER = 250;
    28e2:	2317      	movs	r3, #23
    28e4:	18fb      	adds	r3, r7, r3
    28e6:	22fa      	movs	r2, #250	; 0xfa
    28e8:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
    28ea:	2317      	movs	r3, #23
    28ec:	18fb      	adds	r3, r7, r3
    28ee:	781b      	ldrb	r3, [r3, #0]
    28f0:	2101      	movs	r1, #1
    28f2:	0018      	movs	r0, r3
    28f4:	4b2f      	ldr	r3, [pc, #188]	; (29b4 <gsm_send_sms+0x100>)
    28f6:	4798      	blx	r3
    28f8:	0003      	movs	r3, r0
    28fa:	613b      	str	r3, [r7, #16]
	//buffer created???
	if (cmdx == NULL)
    28fc:	693b      	ldr	r3, [r7, #16]
    28fe:	2b00      	cmp	r3, #0
    2900:	d101      	bne.n	2906 <gsm_send_sms+0x52>
	{
		return 0;
    2902:	2300      	movs	r3, #0
    2904:	e050      	b.n	29a8 <gsm_send_sms+0xf4>
	}
	memset(cmdx, '\0', MAX_BUFFER);
    2906:	2317      	movs	r3, #23
    2908:	18fb      	adds	r3, r7, r3
    290a:	781a      	ldrb	r2, [r3, #0]
    290c:	693b      	ldr	r3, [r7, #16]
    290e:	2100      	movs	r1, #0
    2910:	0018      	movs	r0, r3
    2912:	4b29      	ldr	r3, [pc, #164]	; (29b8 <gsm_send_sms+0x104>)
    2914:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER, "AT+CMGS=\"%s\"\r", phone_number);
    2916:	2317      	movs	r3, #23
    2918:	18fb      	adds	r3, r7, r3
    291a:	7819      	ldrb	r1, [r3, #0]
    291c:	687b      	ldr	r3, [r7, #4]
    291e:	4a27      	ldr	r2, [pc, #156]	; (29bc <gsm_send_sms+0x108>)
    2920:	6938      	ldr	r0, [r7, #16]
    2922:	4c27      	ldr	r4, [pc, #156]	; (29c0 <gsm_send_sms+0x10c>)
    2924:	47a0      	blx	r4
	if (gsm_send_at_command((const char*)cmdx, (const char*)">",60000, 0, NULL)==GSM_ERROR_NONE)
    2926:	4a27      	ldr	r2, [pc, #156]	; (29c4 <gsm_send_sms+0x110>)
    2928:	4927      	ldr	r1, [pc, #156]	; (29c8 <gsm_send_sms+0x114>)
    292a:	6938      	ldr	r0, [r7, #16]
    292c:	2300      	movs	r3, #0
    292e:	9300      	str	r3, [sp, #0]
    2930:	2300      	movs	r3, #0
    2932:	4c26      	ldr	r4, [pc, #152]	; (29cc <gsm_send_sms+0x118>)
    2934:	47a0      	blx	r4
    2936:	1e03      	subs	r3, r0, #0
    2938:	d131      	bne.n	299e <gsm_send_sms+0xea>
	{
		vTaskDelay(500/portTICK_PERIOD_MS);		//todo: check if sms is reaching time is reduced than 30 seconds, if yes, than keep this statement, else remove it.
    293a:	23fa      	movs	r3, #250	; 0xfa
    293c:	005b      	lsls	r3, r3, #1
    293e:	0018      	movs	r0, r3
    2940:	4b23      	ldr	r3, [pc, #140]	; (29d0 <gsm_send_sms+0x11c>)
    2942:	4798      	blx	r3
		memset(cmdx, '\0', MAX_BUFFER);
    2944:	2317      	movs	r3, #23
    2946:	18fb      	adds	r3, r7, r3
    2948:	781a      	ldrb	r2, [r3, #0]
    294a:	693b      	ldr	r3, [r7, #16]
    294c:	2100      	movs	r1, #0
    294e:	0018      	movs	r0, r3
    2950:	4b19      	ldr	r3, [pc, #100]	; (29b8 <gsm_send_sms+0x104>)
    2952:	4798      	blx	r3
		
		snprintf((char*)cmdx, MAX_BUFFER, "%s\x1A\x0D",message);
    2954:	2317      	movs	r3, #23
    2956:	18fb      	adds	r3, r7, r3
    2958:	7819      	ldrb	r1, [r3, #0]
    295a:	683b      	ldr	r3, [r7, #0]
    295c:	4a1d      	ldr	r2, [pc, #116]	; (29d4 <gsm_send_sms+0x120>)
    295e:	6938      	ldr	r0, [r7, #16]
    2960:	4c17      	ldr	r4, [pc, #92]	; (29c0 <gsm_send_sms+0x10c>)
    2962:	47a0      	blx	r4
		
	    err = gsm_send_at_command((const char*)cmdx, (const char*)RESPONS_OK,60000, 0, NULL);
    2964:	230f      	movs	r3, #15
    2966:	18fc      	adds	r4, r7, r3
    2968:	4a16      	ldr	r2, [pc, #88]	; (29c4 <gsm_send_sms+0x110>)
    296a:	491b      	ldr	r1, [pc, #108]	; (29d8 <gsm_send_sms+0x124>)
    296c:	6938      	ldr	r0, [r7, #16]
    296e:	2300      	movs	r3, #0
    2970:	9300      	str	r3, [sp, #0]
    2972:	2300      	movs	r3, #0
    2974:	4d15      	ldr	r5, [pc, #84]	; (29cc <gsm_send_sms+0x118>)
    2976:	47a8      	blx	r5
    2978:	0003      	movs	r3, r0
    297a:	7023      	strb	r3, [r4, #0]
		if (err == GSM_ERROR_NONE)
    297c:	230f      	movs	r3, #15
    297e:	18fb      	adds	r3, r7, r3
    2980:	781b      	ldrb	r3, [r3, #0]
    2982:	2b00      	cmp	r3, #0
    2984:	d105      	bne.n	2992 <gsm_send_sms+0xde>
		{
			free(cmdx);
    2986:	693b      	ldr	r3, [r7, #16]
    2988:	0018      	movs	r0, r3
    298a:	4b14      	ldr	r3, [pc, #80]	; (29dc <gsm_send_sms+0x128>)
    298c:	4798      	blx	r3
			return GSM_ERROR_NONE;
    298e:	2300      	movs	r3, #0
    2990:	e00a      	b.n	29a8 <gsm_send_sms+0xf4>
		}
		else 
		{
			free(cmdx);
    2992:	693b      	ldr	r3, [r7, #16]
    2994:	0018      	movs	r0, r3
    2996:	4b11      	ldr	r3, [pc, #68]	; (29dc <gsm_send_sms+0x128>)
    2998:	4798      	blx	r3
			return GSM_ERROR_SMS_SEND_FAILED;
    299a:	2306      	movs	r3, #6
    299c:	e004      	b.n	29a8 <gsm_send_sms+0xf4>
		}
	}
	else
	{
		free(cmdx);
    299e:	693b      	ldr	r3, [r7, #16]
    29a0:	0018      	movs	r0, r3
    29a2:	4b0e      	ldr	r3, [pc, #56]	; (29dc <gsm_send_sms+0x128>)
    29a4:	4798      	blx	r3
		return GSM_ERROR_SMS_SEND_FAILED;
    29a6:	2306      	movs	r3, #6
	}
}
    29a8:	0018      	movs	r0, r3
    29aa:	46bd      	mov	sp, r7
    29ac:	b006      	add	sp, #24
    29ae:	bdb0      	pop	{r4, r5, r7, pc}
    29b0:	00017de7 	.word	0x00017de7
    29b4:	00017a49 	.word	0x00017a49
    29b8:	00017b57 	.word	0x00017b57
    29bc:	000189b0 	.word	0x000189b0
    29c0:	00017cf9 	.word	0x00017cf9
    29c4:	0000ea60 	.word	0x0000ea60
    29c8:	000189c0 	.word	0x000189c0
    29cc:	000021b5 	.word	0x000021b5
    29d0:	0000ee99 	.word	0x0000ee99
    29d4:	000189c4 	.word	0x000189c4
    29d8:	00018808 	.word	0x00018808
    29dc:	00017ae9 	.word	0x00017ae9

000029e0 <gsm_read_sms>:
	free(cmdx);
	return sms_index;
}

enum gsm_error gsm_read_sms(uint8_t position, char *phone_number, uint8_t max_phone_len, char *SMS_text, uint8_t max_SMS_len)
{
    29e0:	b590      	push	{r4, r7, lr}
    29e2:	b08f      	sub	sp, #60	; 0x3c
    29e4:	af02      	add	r7, sp, #8
    29e6:	60b9      	str	r1, [r7, #8]
    29e8:	0011      	movs	r1, r2
    29ea:	607b      	str	r3, [r7, #4]
    29ec:	230f      	movs	r3, #15
    29ee:	18fb      	adds	r3, r7, r3
    29f0:	1c02      	adds	r2, r0, #0
    29f2:	701a      	strb	r2, [r3, #0]
    29f4:	230e      	movs	r3, #14
    29f6:	18fb      	adds	r3, r7, r3
    29f8:	1c0a      	adds	r2, r1, #0
    29fa:	701a      	strb	r2, [r3, #0]
	const uint8_t MAX_BUFFER = 230;
    29fc:	232f      	movs	r3, #47	; 0x2f
    29fe:	18fb      	adds	r3, r7, r3
    2a00:	22e6      	movs	r2, #230	; 0xe6
    2a02:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
    2a04:	232f      	movs	r3, #47	; 0x2f
    2a06:	18fb      	adds	r3, r7, r3
    2a08:	781b      	ldrb	r3, [r3, #0]
    2a0a:	2101      	movs	r1, #1
    2a0c:	0018      	movs	r0, r3
    2a0e:	4b6e      	ldr	r3, [pc, #440]	; (2bc8 <gsm_read_sms+0x1e8>)
    2a10:	4798      	blx	r3
    2a12:	0003      	movs	r3, r0
    2a14:	62bb      	str	r3, [r7, #40]	; 0x28
	if (cmdx == NULL)
    2a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2a18:	2b00      	cmp	r3, #0
    2a1a:	d105      	bne.n	2a28 <gsm_read_sms+0x48>
	{
		free(cmdx);
    2a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2a1e:	0018      	movs	r0, r3
    2a20:	4b6a      	ldr	r3, [pc, #424]	; (2bcc <gsm_read_sms+0x1ec>)
    2a22:	4798      	blx	r3
		return 0;
    2a24:	2300      	movs	r3, #0
    2a26:	e0ca      	b.n	2bbe <gsm_read_sms+0x1de>
	}
	memset(cmdx, '\0', MAX_BUFFER);
    2a28:	232f      	movs	r3, #47	; 0x2f
    2a2a:	18fb      	adds	r3, r7, r3
    2a2c:	781a      	ldrb	r2, [r3, #0]
    2a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2a30:	2100      	movs	r1, #0
    2a32:	0018      	movs	r0, r3
    2a34:	4b66      	ldr	r3, [pc, #408]	; (2bd0 <gsm_read_sms+0x1f0>)
    2a36:	4798      	blx	r3
	
	uint8_t cmgr_at_command[10] = {0};
    2a38:	2310      	movs	r3, #16
    2a3a:	18fb      	adds	r3, r7, r3
    2a3c:	0018      	movs	r0, r3
    2a3e:	230a      	movs	r3, #10
    2a40:	001a      	movs	r2, r3
    2a42:	2100      	movs	r1, #0
    2a44:	4b62      	ldr	r3, [pc, #392]	; (2bd0 <gsm_read_sms+0x1f0>)
    2a46:	4798      	blx	r3
	
	snprintf((char*)cmgr_at_command, MAX_BUFFER, "AT+CMGR=%d\r",position);
    2a48:	232f      	movs	r3, #47	; 0x2f
    2a4a:	18fb      	adds	r3, r7, r3
    2a4c:	7819      	ldrb	r1, [r3, #0]
    2a4e:	230f      	movs	r3, #15
    2a50:	18fb      	adds	r3, r7, r3
    2a52:	781b      	ldrb	r3, [r3, #0]
    2a54:	4a5f      	ldr	r2, [pc, #380]	; (2bd4 <gsm_read_sms+0x1f4>)
    2a56:	2010      	movs	r0, #16
    2a58:	1838      	adds	r0, r7, r0
    2a5a:	4c5f      	ldr	r4, [pc, #380]	; (2bd8 <gsm_read_sms+0x1f8>)
    2a5c:	47a0      	blx	r4
	
	if (gsm_send_at_command((const char*)cmgr_at_command, (const char*)RESPONS_OK,5000, MAX_BUFFER, cmdx)==GSM_ERROR_NONE)
    2a5e:	232f      	movs	r3, #47	; 0x2f
    2a60:	18fb      	adds	r3, r7, r3
    2a62:	781a      	ldrb	r2, [r3, #0]
    2a64:	4c5d      	ldr	r4, [pc, #372]	; (2bdc <gsm_read_sms+0x1fc>)
    2a66:	495e      	ldr	r1, [pc, #376]	; (2be0 <gsm_read_sms+0x200>)
    2a68:	2310      	movs	r3, #16
    2a6a:	18f8      	adds	r0, r7, r3
    2a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2a6e:	9300      	str	r3, [sp, #0]
    2a70:	0013      	movs	r3, r2
    2a72:	0022      	movs	r2, r4
    2a74:	4c5b      	ldr	r4, [pc, #364]	; (2be4 <gsm_read_sms+0x204>)
    2a76:	47a0      	blx	r4
    2a78:	1e03      	subs	r3, r0, #0
    2a7a:	d000      	beq.n	2a7e <gsm_read_sms+0x9e>
    2a7c:	e094      	b.n	2ba8 <gsm_read_sms+0x1c8>
	{
		char *strig_cmp;
		char *p_char;
		char *p_char1;
		strig_cmp = strstr(cmdx,"+CMGR");
    2a7e:	4a5a      	ldr	r2, [pc, #360]	; (2be8 <gsm_read_sms+0x208>)
    2a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2a82:	0011      	movs	r1, r2
    2a84:	0018      	movs	r0, r3
    2a86:	4b59      	ldr	r3, [pc, #356]	; (2bec <gsm_read_sms+0x20c>)
    2a88:	4798      	blx	r3
    2a8a:	0003      	movs	r3, r0
    2a8c:	627b      	str	r3, [r7, #36]	; 0x24
		if (strig_cmp != 0)
    2a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a90:	2b00      	cmp	r3, #0
    2a92:	d100      	bne.n	2a96 <gsm_read_sms+0xb6>
    2a94:	e082      	b.n	2b9c <gsm_read_sms+0x1bc>
		{
			p_char = strchr((char *)(cmdx),',');
    2a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2a98:	212c      	movs	r1, #44	; 0x2c
    2a9a:	0018      	movs	r0, r3
    2a9c:	4b54      	ldr	r3, [pc, #336]	; (2bf0 <gsm_read_sms+0x210>)
    2a9e:	4798      	blx	r3
    2aa0:	0003      	movs	r3, r0
    2aa2:	623b      	str	r3, [r7, #32]
			p_char1 = p_char+2;
    2aa4:	6a3b      	ldr	r3, [r7, #32]
    2aa6:	3302      	adds	r3, #2
    2aa8:	61fb      	str	r3, [r7, #28]
			p_char = strchr((char *)(p_char1),'"');
    2aaa:	69fb      	ldr	r3, [r7, #28]
    2aac:	2122      	movs	r1, #34	; 0x22
    2aae:	0018      	movs	r0, r3
    2ab0:	4b4f      	ldr	r3, [pc, #316]	; (2bf0 <gsm_read_sms+0x210>)
    2ab2:	4798      	blx	r3
    2ab4:	0003      	movs	r3, r0
    2ab6:	623b      	str	r3, [r7, #32]
			uint8_t len;
			if (p_char != NULL)
    2ab8:	6a3b      	ldr	r3, [r7, #32]
    2aba:	2b00      	cmp	r3, #0
    2abc:	d02a      	beq.n	2b14 <gsm_read_sms+0x134>
			{
				*p_char = 0;
    2abe:	6a3b      	ldr	r3, [r7, #32]
    2ac0:	2200      	movs	r2, #0
    2ac2:	701a      	strb	r2, [r3, #0]
				len = strlen(p_char1);
    2ac4:	69fb      	ldr	r3, [r7, #28]
    2ac6:	0018      	movs	r0, r3
    2ac8:	4b4a      	ldr	r3, [pc, #296]	; (2bf4 <gsm_read_sms+0x214>)
    2aca:	4798      	blx	r3
    2acc:	0002      	movs	r2, r0
    2ace:	231b      	movs	r3, #27
    2ad0:	18fb      	adds	r3, r7, r3
    2ad2:	701a      	strb	r2, [r3, #0]
				if(len < max_phone_len)
    2ad4:	231b      	movs	r3, #27
    2ad6:	18fa      	adds	r2, r7, r3
    2ad8:	230e      	movs	r3, #14
    2ada:	18fb      	adds	r3, r7, r3
    2adc:	7812      	ldrb	r2, [r2, #0]
    2ade:	781b      	ldrb	r3, [r3, #0]
    2ae0:	429a      	cmp	r2, r3
    2ae2:	d206      	bcs.n	2af2 <gsm_read_sms+0x112>
				{
					strcpy(phone_number, (char *)(p_char1));
    2ae4:	69fa      	ldr	r2, [r7, #28]
    2ae6:	68bb      	ldr	r3, [r7, #8]
    2ae8:	0011      	movs	r1, r2
    2aea:	0018      	movs	r0, r3
    2aec:	4b42      	ldr	r3, [pc, #264]	; (2bf8 <gsm_read_sms+0x218>)
    2aee:	4798      	blx	r3
    2af0:	e010      	b.n	2b14 <gsm_read_sms+0x134>
				}
				else
				{
					memcpy(phone_number,(char *)p_char1,(max_phone_len-1));
    2af2:	230e      	movs	r3, #14
    2af4:	18fb      	adds	r3, r7, r3
    2af6:	781b      	ldrb	r3, [r3, #0]
    2af8:	3b01      	subs	r3, #1
    2afa:	001a      	movs	r2, r3
    2afc:	69f9      	ldr	r1, [r7, #28]
    2afe:	68bb      	ldr	r3, [r7, #8]
    2b00:	0018      	movs	r0, r3
    2b02:	4b3e      	ldr	r3, [pc, #248]	; (2bfc <gsm_read_sms+0x21c>)
    2b04:	4798      	blx	r3
					phone_number[max_phone_len]=0;
    2b06:	230e      	movs	r3, #14
    2b08:	18fb      	adds	r3, r7, r3
    2b0a:	781b      	ldrb	r3, [r3, #0]
    2b0c:	68ba      	ldr	r2, [r7, #8]
    2b0e:	18d3      	adds	r3, r2, r3
    2b10:	2200      	movs	r2, #0
    2b12:	701a      	strb	r2, [r3, #0]
				}
			}
			p_char = strchr(p_char+1, 0x0a);
    2b14:	6a3b      	ldr	r3, [r7, #32]
    2b16:	3301      	adds	r3, #1
    2b18:	210a      	movs	r1, #10
    2b1a:	0018      	movs	r0, r3
    2b1c:	4b34      	ldr	r3, [pc, #208]	; (2bf0 <gsm_read_sms+0x210>)
    2b1e:	4798      	blx	r3
    2b20:	0003      	movs	r3, r0
    2b22:	623b      	str	r3, [r7, #32]
			if (p_char != NULL)
    2b24:	6a3b      	ldr	r3, [r7, #32]
    2b26:	2b00      	cmp	r3, #0
    2b28:	d044      	beq.n	2bb4 <gsm_read_sms+0x1d4>
			{
				p_char++;
    2b2a:	6a3b      	ldr	r3, [r7, #32]
    2b2c:	3301      	adds	r3, #1
    2b2e:	623b      	str	r3, [r7, #32]
				p_char1 = strchr((char *)(p_char), 0x0d);
    2b30:	6a3b      	ldr	r3, [r7, #32]
    2b32:	210d      	movs	r1, #13
    2b34:	0018      	movs	r0, r3
    2b36:	4b2e      	ldr	r3, [pc, #184]	; (2bf0 <gsm_read_sms+0x210>)
    2b38:	4798      	blx	r3
    2b3a:	0003      	movs	r3, r0
    2b3c:	61fb      	str	r3, [r7, #28]
				if (p_char1 != NULL)
    2b3e:	69fb      	ldr	r3, [r7, #28]
    2b40:	2b00      	cmp	r3, #0
    2b42:	d002      	beq.n	2b4a <gsm_read_sms+0x16a>
				{
					*p_char1 = 0;
    2b44:	69fb      	ldr	r3, [r7, #28]
    2b46:	2200      	movs	r2, #0
    2b48:	701a      	strb	r2, [r3, #0]
				}
				len = strlen(p_char);
    2b4a:	6a3b      	ldr	r3, [r7, #32]
    2b4c:	0018      	movs	r0, r3
    2b4e:	4b29      	ldr	r3, [pc, #164]	; (2bf4 <gsm_read_sms+0x214>)
    2b50:	4798      	blx	r3
    2b52:	0002      	movs	r2, r0
    2b54:	231b      	movs	r3, #27
    2b56:	18fb      	adds	r3, r7, r3
    2b58:	701a      	strb	r2, [r3, #0]
				if (len < max_SMS_len)
    2b5a:	231b      	movs	r3, #27
    2b5c:	18fb      	adds	r3, r7, r3
    2b5e:	2240      	movs	r2, #64	; 0x40
    2b60:	18b9      	adds	r1, r7, r2
    2b62:	781a      	ldrb	r2, [r3, #0]
    2b64:	780b      	ldrb	r3, [r1, #0]
    2b66:	429a      	cmp	r2, r3
    2b68:	d206      	bcs.n	2b78 <gsm_read_sms+0x198>
				{
					strcpy(SMS_text, (char *)(p_char));
    2b6a:	6a3a      	ldr	r2, [r7, #32]
    2b6c:	687b      	ldr	r3, [r7, #4]
    2b6e:	0011      	movs	r1, r2
    2b70:	0018      	movs	r0, r3
    2b72:	4b21      	ldr	r3, [pc, #132]	; (2bf8 <gsm_read_sms+0x218>)
    2b74:	4798      	blx	r3
    2b76:	e01d      	b.n	2bb4 <gsm_read_sms+0x1d4>
				}
				else
				{
					memcpy(SMS_text, (char *)(p_char), (max_SMS_len-1));
    2b78:	2340      	movs	r3, #64	; 0x40
    2b7a:	18fb      	adds	r3, r7, r3
    2b7c:	781b      	ldrb	r3, [r3, #0]
    2b7e:	3b01      	subs	r3, #1
    2b80:	001a      	movs	r2, r3
    2b82:	6a39      	ldr	r1, [r7, #32]
    2b84:	687b      	ldr	r3, [r7, #4]
    2b86:	0018      	movs	r0, r3
    2b88:	4b1c      	ldr	r3, [pc, #112]	; (2bfc <gsm_read_sms+0x21c>)
    2b8a:	4798      	blx	r3
					SMS_text[max_SMS_len] = 0;
    2b8c:	2340      	movs	r3, #64	; 0x40
    2b8e:	18fb      	adds	r3, r7, r3
    2b90:	781b      	ldrb	r3, [r3, #0]
    2b92:	687a      	ldr	r2, [r7, #4]
    2b94:	18d3      	adds	r3, r2, r3
    2b96:	2200      	movs	r2, #0
    2b98:	701a      	strb	r2, [r3, #0]
    2b9a:	e00b      	b.n	2bb4 <gsm_read_sms+0x1d4>
				}
			}
		}
		else
		{
			free(cmdx);
    2b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2b9e:	0018      	movs	r0, r3
    2ba0:	4b0a      	ldr	r3, [pc, #40]	; (2bcc <gsm_read_sms+0x1ec>)
    2ba2:	4798      	blx	r3
			return GSM_ERROR_SMS_NOT_AVAILABLE; 
    2ba4:	230c      	movs	r3, #12
    2ba6:	e00a      	b.n	2bbe <gsm_read_sms+0x1de>
		}
	}
	else
	{
		free(cmdx);
    2ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2baa:	0018      	movs	r0, r3
    2bac:	4b07      	ldr	r3, [pc, #28]	; (2bcc <gsm_read_sms+0x1ec>)
    2bae:	4798      	blx	r3
		return GSM_ERROR_SMS_NOT_AVAILABLE; 
    2bb0:	230c      	movs	r3, #12
    2bb2:	e004      	b.n	2bbe <gsm_read_sms+0x1de>
	}
	free(cmdx);
    2bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2bb6:	0018      	movs	r0, r3
    2bb8:	4b04      	ldr	r3, [pc, #16]	; (2bcc <gsm_read_sms+0x1ec>)
    2bba:	4798      	blx	r3
	return GSM_ERROR_NONE; 
    2bbc:	2300      	movs	r3, #0
}
    2bbe:	0018      	movs	r0, r3
    2bc0:	46bd      	mov	sp, r7
    2bc2:	b00d      	add	sp, #52	; 0x34
    2bc4:	bd90      	pop	{r4, r7, pc}
    2bc6:	46c0      	nop			; (mov r8, r8)
    2bc8:	00017a49 	.word	0x00017a49
    2bcc:	00017ae9 	.word	0x00017ae9
    2bd0:	00017b57 	.word	0x00017b57
    2bd4:	00018a10 	.word	0x00018a10
    2bd8:	00017cf9 	.word	0x00017cf9
    2bdc:	00001388 	.word	0x00001388
    2be0:	00018808 	.word	0x00018808
    2be4:	000021b5 	.word	0x000021b5
    2be8:	00018a1c 	.word	0x00018a1c
    2bec:	00017e17 	.word	0x00017e17
    2bf0:	00017dbb 	.word	0x00017dbb
    2bf4:	00017de7 	.word	0x00017de7
    2bf8:	00017dd7 	.word	0x00017dd7
    2bfc:	00017b21 	.word	0x00017b21

00002c00 <gsm_call_to_dial_a_number>:


enum gsm_error gsm_call_to_dial_a_number(const char *to)
{
    2c00:	b5b0      	push	{r4, r5, r7, lr}
    2c02:	b088      	sub	sp, #32
    2c04:	af02      	add	r7, sp, #8
    2c06:	6078      	str	r0, [r7, #4]
	const uint8_t MAX_BUFFER = 30;
    2c08:	2317      	movs	r3, #23
    2c0a:	18fb      	adds	r3, r7, r3
    2c0c:	221e      	movs	r2, #30
    2c0e:	701a      	strb	r2, [r3, #0]
	enum gsm_error err;
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
    2c10:	2317      	movs	r3, #23
    2c12:	18fb      	adds	r3, r7, r3
    2c14:	781b      	ldrb	r3, [r3, #0]
    2c16:	2101      	movs	r1, #1
    2c18:	0018      	movs	r0, r3
    2c1a:	4b18      	ldr	r3, [pc, #96]	; (2c7c <gsm_call_to_dial_a_number+0x7c>)
    2c1c:	4798      	blx	r3
    2c1e:	0003      	movs	r3, r0
    2c20:	613b      	str	r3, [r7, #16]
	
	//buffer created?
	if (cmdx == NULL)
    2c22:	693b      	ldr	r3, [r7, #16]
    2c24:	2b00      	cmp	r3, #0
    2c26:	d101      	bne.n	2c2c <gsm_call_to_dial_a_number+0x2c>
	{
		return 0;
    2c28:	2300      	movs	r3, #0
    2c2a:	e023      	b.n	2c74 <gsm_call_to_dial_a_number+0x74>
	}
	
	//init string
	memset(cmdx, '\0', MAX_BUFFER);
    2c2c:	2317      	movs	r3, #23
    2c2e:	18fb      	adds	r3, r7, r3
    2c30:	781a      	ldrb	r2, [r3, #0]
    2c32:	693b      	ldr	r3, [r7, #16]
    2c34:	2100      	movs	r1, #0
    2c36:	0018      	movs	r0, r3
    2c38:	4b11      	ldr	r3, [pc, #68]	; (2c80 <gsm_call_to_dial_a_number+0x80>)
    2c3a:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER, "ATD%s;\r", to);
    2c3c:	2317      	movs	r3, #23
    2c3e:	18fb      	adds	r3, r7, r3
    2c40:	7819      	ldrb	r1, [r3, #0]
    2c42:	687b      	ldr	r3, [r7, #4]
    2c44:	4a0f      	ldr	r2, [pc, #60]	; (2c84 <gsm_call_to_dial_a_number+0x84>)
    2c46:	6938      	ldr	r0, [r7, #16]
    2c48:	4c0f      	ldr	r4, [pc, #60]	; (2c88 <gsm_call_to_dial_a_number+0x88>)
    2c4a:	47a0      	blx	r4
	
	err = gsm_send_at_command((const char*)cmdx, (const char*)RESPONS_OK,2000,0, NULL);
    2c4c:	230f      	movs	r3, #15
    2c4e:	18fc      	adds	r4, r7, r3
    2c50:	23fa      	movs	r3, #250	; 0xfa
    2c52:	00da      	lsls	r2, r3, #3
    2c54:	490d      	ldr	r1, [pc, #52]	; (2c8c <gsm_call_to_dial_a_number+0x8c>)
    2c56:	6938      	ldr	r0, [r7, #16]
    2c58:	2300      	movs	r3, #0
    2c5a:	9300      	str	r3, [sp, #0]
    2c5c:	2300      	movs	r3, #0
    2c5e:	4d0c      	ldr	r5, [pc, #48]	; (2c90 <gsm_call_to_dial_a_number+0x90>)
    2c60:	47a8      	blx	r5
    2c62:	0003      	movs	r3, r0
    2c64:	7023      	strb	r3, [r4, #0]
	free(cmdx);
    2c66:	693b      	ldr	r3, [r7, #16]
    2c68:	0018      	movs	r0, r3
    2c6a:	4b0a      	ldr	r3, [pc, #40]	; (2c94 <gsm_call_to_dial_a_number+0x94>)
    2c6c:	4798      	blx	r3
	return err;
    2c6e:	230f      	movs	r3, #15
    2c70:	18fb      	adds	r3, r7, r3
    2c72:	781b      	ldrb	r3, [r3, #0]
	
}
    2c74:	0018      	movs	r0, r3
    2c76:	46bd      	mov	sp, r7
    2c78:	b006      	add	sp, #24
    2c7a:	bdb0      	pop	{r4, r5, r7, pc}
    2c7c:	00017a49 	.word	0x00017a49
    2c80:	00017b57 	.word	0x00017b57
    2c84:	00018a24 	.word	0x00018a24
    2c88:	00017cf9 	.word	0x00017cf9
    2c8c:	00018808 	.word	0x00018808
    2c90:	000021b5 	.word	0x000021b5
    2c94:	00017ae9 	.word	0x00017ae9

00002c98 <gsm_answer_an_incomming_call>:

enum gsm_error gsm_answer_an_incomming_call(void)
{
    2c98:	b590      	push	{r4, r7, lr}
    2c9a:	b083      	sub	sp, #12
    2c9c:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("ATA\r"), (const char*)RESPONS_OK,5000,0, NULL);
    2c9e:	4a06      	ldr	r2, [pc, #24]	; (2cb8 <gsm_answer_an_incomming_call+0x20>)
    2ca0:	4906      	ldr	r1, [pc, #24]	; (2cbc <gsm_answer_an_incomming_call+0x24>)
    2ca2:	4807      	ldr	r0, [pc, #28]	; (2cc0 <gsm_answer_an_incomming_call+0x28>)
    2ca4:	2300      	movs	r3, #0
    2ca6:	9300      	str	r3, [sp, #0]
    2ca8:	2300      	movs	r3, #0
    2caa:	4c06      	ldr	r4, [pc, #24]	; (2cc4 <gsm_answer_an_incomming_call+0x2c>)
    2cac:	47a0      	blx	r4
    2cae:	0003      	movs	r3, r0
}
    2cb0:	0018      	movs	r0, r3
    2cb2:	46bd      	mov	sp, r7
    2cb4:	b001      	add	sp, #4
    2cb6:	bd90      	pop	{r4, r7, pc}
    2cb8:	00001388 	.word	0x00001388
    2cbc:	00018808 	.word	0x00018808
    2cc0:	00018a2c 	.word	0x00018a2c
    2cc4:	000021b5 	.word	0x000021b5

00002cc8 <gsm_enable_network_time_update>:


enum gsm_error gsm_enable_network_time_update(void)
{
    2cc8:	b590      	push	{r4, r7, lr}
    2cca:	b083      	sub	sp, #12
    2ccc:	af02      	add	r7, sp, #8
	return 	gsm_send_at_command((const char*)("AT+CLTS=1\r"), (const char*)RESPONS_OK,10000,0, NULL);
    2cce:	4a06      	ldr	r2, [pc, #24]	; (2ce8 <gsm_enable_network_time_update+0x20>)
    2cd0:	4906      	ldr	r1, [pc, #24]	; (2cec <gsm_enable_network_time_update+0x24>)
    2cd2:	4807      	ldr	r0, [pc, #28]	; (2cf0 <gsm_enable_network_time_update+0x28>)
    2cd4:	2300      	movs	r3, #0
    2cd6:	9300      	str	r3, [sp, #0]
    2cd8:	2300      	movs	r3, #0
    2cda:	4c06      	ldr	r4, [pc, #24]	; (2cf4 <gsm_enable_network_time_update+0x2c>)
    2cdc:	47a0      	blx	r4
    2cde:	0003      	movs	r3, r0
}
    2ce0:	0018      	movs	r0, r3
    2ce2:	46bd      	mov	sp, r7
    2ce4:	b001      	add	sp, #4
    2ce6:	bd90      	pop	{r4, r7, pc}
    2ce8:	00002710 	.word	0x00002710
    2cec:	00018808 	.word	0x00018808
    2cf0:	00018a34 	.word	0x00018a34
    2cf4:	000021b5 	.word	0x000021b5

00002cf8 <gsm_enable_DTMF_detection>:
{
	return 	gsm_send_at_command((const char*)("AT+CLTS=0\r"), (const char*)RESPONS_OK,10000,0, NULL);
}

enum gsm_error gsm_enable_DTMF_detection(void)
{
    2cf8:	b590      	push	{r4, r7, lr}
    2cfa:	b083      	sub	sp, #12
    2cfc:	af02      	add	r7, sp, #8
	return 	gsm_send_at_command((const char*)("AT+DDET=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
    2cfe:	4a06      	ldr	r2, [pc, #24]	; (2d18 <gsm_enable_DTMF_detection+0x20>)
    2d00:	4906      	ldr	r1, [pc, #24]	; (2d1c <gsm_enable_DTMF_detection+0x24>)
    2d02:	4807      	ldr	r0, [pc, #28]	; (2d20 <gsm_enable_DTMF_detection+0x28>)
    2d04:	2300      	movs	r3, #0
    2d06:	9300      	str	r3, [sp, #0]
    2d08:	2300      	movs	r3, #0
    2d0a:	4c06      	ldr	r4, [pc, #24]	; (2d24 <gsm_enable_DTMF_detection+0x2c>)
    2d0c:	47a0      	blx	r4
    2d0e:	0003      	movs	r3, r0
}
    2d10:	0018      	movs	r0, r3
    2d12:	46bd      	mov	sp, r7
    2d14:	b001      	add	sp, #4
    2d16:	bd90      	pop	{r4, r7, pc}
    2d18:	00001388 	.word	0x00001388
    2d1c:	00018808 	.word	0x00018808
    2d20:	00018a4c 	.word	0x00018a4c
    2d24:	000021b5 	.word	0x000021b5

00002d28 <gsm_send_DTMF_Tone>:

enum gsm_error gsm_send_DTMF_Tone(char *tone)
{
    2d28:	b5b0      	push	{r4, r5, r7, lr}
    2d2a:	b088      	sub	sp, #32
    2d2c:	af02      	add	r7, sp, #8
    2d2e:	6078      	str	r0, [r7, #4]
	const uint8_t MAX_BUFFER = 30;
    2d30:	2317      	movs	r3, #23
    2d32:	18fb      	adds	r3, r7, r3
    2d34:	221e      	movs	r2, #30
    2d36:	701a      	strb	r2, [r3, #0]
	enum gsm_error err;
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
    2d38:	2317      	movs	r3, #23
    2d3a:	18fb      	adds	r3, r7, r3
    2d3c:	781b      	ldrb	r3, [r3, #0]
    2d3e:	2101      	movs	r1, #1
    2d40:	0018      	movs	r0, r3
    2d42:	4b18      	ldr	r3, [pc, #96]	; (2da4 <gsm_send_DTMF_Tone+0x7c>)
    2d44:	4798      	blx	r3
    2d46:	0003      	movs	r3, r0
    2d48:	613b      	str	r3, [r7, #16]
	
	//buffer created?
	if (cmdx == NULL)
    2d4a:	693b      	ldr	r3, [r7, #16]
    2d4c:	2b00      	cmp	r3, #0
    2d4e:	d101      	bne.n	2d54 <gsm_send_DTMF_Tone+0x2c>
	{
		return 0;
    2d50:	2300      	movs	r3, #0
    2d52:	e022      	b.n	2d9a <gsm_send_DTMF_Tone+0x72>
	}
	
	//init string
	memset(cmdx, '\0', MAX_BUFFER);
    2d54:	2317      	movs	r3, #23
    2d56:	18fb      	adds	r3, r7, r3
    2d58:	781a      	ldrb	r2, [r3, #0]
    2d5a:	693b      	ldr	r3, [r7, #16]
    2d5c:	2100      	movs	r1, #0
    2d5e:	0018      	movs	r0, r3
    2d60:	4b11      	ldr	r3, [pc, #68]	; (2da8 <gsm_send_DTMF_Tone+0x80>)
    2d62:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER,"AT+VTS=\"%s\"\r",tone);
    2d64:	2317      	movs	r3, #23
    2d66:	18fb      	adds	r3, r7, r3
    2d68:	7819      	ldrb	r1, [r3, #0]
    2d6a:	687b      	ldr	r3, [r7, #4]
    2d6c:	4a0f      	ldr	r2, [pc, #60]	; (2dac <gsm_send_DTMF_Tone+0x84>)
    2d6e:	6938      	ldr	r0, [r7, #16]
    2d70:	4c0f      	ldr	r4, [pc, #60]	; (2db0 <gsm_send_DTMF_Tone+0x88>)
    2d72:	47a0      	blx	r4
	
	err = gsm_send_at_command((const char*)(cmdx), (const char*)RESPONS_OK,5000,0, NULL);
    2d74:	230f      	movs	r3, #15
    2d76:	18fc      	adds	r4, r7, r3
    2d78:	4a0e      	ldr	r2, [pc, #56]	; (2db4 <gsm_send_DTMF_Tone+0x8c>)
    2d7a:	490f      	ldr	r1, [pc, #60]	; (2db8 <gsm_send_DTMF_Tone+0x90>)
    2d7c:	6938      	ldr	r0, [r7, #16]
    2d7e:	2300      	movs	r3, #0
    2d80:	9300      	str	r3, [sp, #0]
    2d82:	2300      	movs	r3, #0
    2d84:	4d0d      	ldr	r5, [pc, #52]	; (2dbc <gsm_send_DTMF_Tone+0x94>)
    2d86:	47a8      	blx	r5
    2d88:	0003      	movs	r3, r0
    2d8a:	7023      	strb	r3, [r4, #0]
	free(cmdx);
    2d8c:	693b      	ldr	r3, [r7, #16]
    2d8e:	0018      	movs	r0, r3
    2d90:	4b0b      	ldr	r3, [pc, #44]	; (2dc0 <gsm_send_DTMF_Tone+0x98>)
    2d92:	4798      	blx	r3
	return err;
    2d94:	230f      	movs	r3, #15
    2d96:	18fb      	adds	r3, r7, r3
    2d98:	781b      	ldrb	r3, [r3, #0]
}
    2d9a:	0018      	movs	r0, r3
    2d9c:	46bd      	mov	sp, r7
    2d9e:	b006      	add	sp, #24
    2da0:	bdb0      	pop	{r4, r5, r7, pc}
    2da2:	46c0      	nop			; (mov r8, r8)
    2da4:	00017a49 	.word	0x00017a49
    2da8:	00017b57 	.word	0x00017b57
    2dac:	00018a58 	.word	0x00018a58
    2db0:	00017cf9 	.word	0x00017cf9
    2db4:	00001388 	.word	0x00001388
    2db8:	00018808 	.word	0x00018808
    2dbc:	000021b5 	.word	0x000021b5
    2dc0:	00017ae9 	.word	0x00017ae9

00002dc4 <gsm_hangup_call>:

enum gsm_error gsm_hangup_call(void)
{
    2dc4:	b590      	push	{r4, r7, lr}
    2dc6:	b083      	sub	sp, #12
    2dc8:	af02      	add	r7, sp, #8
	return 	gsm_send_at_command((const char*)("AT+CHUP\r"), (const char*)RESPONS_OK,5000,0, NULL);
    2dca:	4a06      	ldr	r2, [pc, #24]	; (2de4 <gsm_hangup_call+0x20>)
    2dcc:	4906      	ldr	r1, [pc, #24]	; (2de8 <gsm_hangup_call+0x24>)
    2dce:	4807      	ldr	r0, [pc, #28]	; (2dec <gsm_hangup_call+0x28>)
    2dd0:	2300      	movs	r3, #0
    2dd2:	9300      	str	r3, [sp, #0]
    2dd4:	2300      	movs	r3, #0
    2dd6:	4c06      	ldr	r4, [pc, #24]	; (2df0 <gsm_hangup_call+0x2c>)
    2dd8:	47a0      	blx	r4
    2dda:	0003      	movs	r3, r0
}
    2ddc:	0018      	movs	r0, r3
    2dde:	46bd      	mov	sp, r7
    2de0:	b001      	add	sp, #4
    2de2:	bd90      	pop	{r4, r7, pc}
    2de4:	00001388 	.word	0x00001388
    2de8:	00018808 	.word	0x00018808
    2dec:	00018a68 	.word	0x00018a68
    2df0:	000021b5 	.word	0x000021b5

00002df4 <gsm_disable_call_waiting>:

enum gsm_error gsm_disable_call_waiting(void)
{
    2df4:	b590      	push	{r4, r7, lr}
    2df6:	b083      	sub	sp, #12
    2df8:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CCWA=0,0\r"), (const char*)RESPONS_OK,18000,0, NULL);
    2dfa:	4a06      	ldr	r2, [pc, #24]	; (2e14 <gsm_disable_call_waiting+0x20>)
    2dfc:	4906      	ldr	r1, [pc, #24]	; (2e18 <gsm_disable_call_waiting+0x24>)
    2dfe:	4807      	ldr	r0, [pc, #28]	; (2e1c <gsm_disable_call_waiting+0x28>)
    2e00:	2300      	movs	r3, #0
    2e02:	9300      	str	r3, [sp, #0]
    2e04:	2300      	movs	r3, #0
    2e06:	4c06      	ldr	r4, [pc, #24]	; (2e20 <gsm_disable_call_waiting+0x2c>)
    2e08:	47a0      	blx	r4
    2e0a:	0003      	movs	r3, r0
}
    2e0c:	0018      	movs	r0, r3
    2e0e:	46bd      	mov	sp, r7
    2e10:	b001      	add	sp, #4
    2e12:	bd90      	pop	{r4, r7, pc}
    2e14:	00004650 	.word	0x00004650
    2e18:	00018808 	.word	0x00018808
    2e1c:	00018a74 	.word	0x00018a74
    2e20:	000021b5 	.word	0x000021b5

00002e24 <gsm_stop_play_record_file>:
	return gsm_send_at_command((const char*)("AT+GSMBUSY=0\r"), (const char*)RESPONS_OK,5000,0, NULL);
}


enum gsm_error gsm_stop_play_record_file(void)
{
    2e24:	b590      	push	{r4, r7, lr}
    2e26:	b083      	sub	sp, #12
    2e28:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CREC=5\r"), (const char*)RESPONS_OK,2000,0, NULL);
    2e2a:	23fa      	movs	r3, #250	; 0xfa
    2e2c:	00da      	lsls	r2, r3, #3
    2e2e:	4906      	ldr	r1, [pc, #24]	; (2e48 <gsm_stop_play_record_file+0x24>)
    2e30:	4806      	ldr	r0, [pc, #24]	; (2e4c <gsm_stop_play_record_file+0x28>)
    2e32:	2300      	movs	r3, #0
    2e34:	9300      	str	r3, [sp, #0]
    2e36:	2300      	movs	r3, #0
    2e38:	4c05      	ldr	r4, [pc, #20]	; (2e50 <gsm_stop_play_record_file+0x2c>)
    2e3a:	47a0      	blx	r4
    2e3c:	0003      	movs	r3, r0
}
    2e3e:	0018      	movs	r0, r3
    2e40:	46bd      	mov	sp, r7
    2e42:	b001      	add	sp, #4
    2e44:	bd90      	pop	{r4, r7, pc}
    2e46:	46c0      	nop			; (mov r8, r8)
    2e48:	00018808 	.word	0x00018808
    2e4c:	00018aa4 	.word	0x00018aa4
    2e50:	000021b5 	.word	0x000021b5

00002e54 <gsm_play_record_file>:

enum gsm_error gsm_play_record_file(const char *filename,bool playInfinitely)
{
    2e54:	b590      	push	{r4, r7, lr}
    2e56:	b087      	sub	sp, #28
    2e58:	af02      	add	r7, sp, #8
    2e5a:	6078      	str	r0, [r7, #4]
    2e5c:	000a      	movs	r2, r1
    2e5e:	1cfb      	adds	r3, r7, #3
    2e60:	701a      	strb	r2, [r3, #0]
	//AT+CREC=4,"C:\User\555.amr",0,100$0D
	
	uint8_t repeat = 0;
    2e62:	230f      	movs	r3, #15
    2e64:	18fb      	adds	r3, r7, r3
    2e66:	2200      	movs	r2, #0
    2e68:	701a      	strb	r2, [r3, #0]
	if (playInfinitely)
    2e6a:	1cfb      	adds	r3, r7, #3
    2e6c:	781b      	ldrb	r3, [r3, #0]
    2e6e:	2b00      	cmp	r3, #0
    2e70:	d003      	beq.n	2e7a <gsm_play_record_file+0x26>
	{
		repeat = 1;
    2e72:	230f      	movs	r3, #15
    2e74:	18fb      	adds	r3, r7, r3
    2e76:	2201      	movs	r2, #1
    2e78:	701a      	strb	r2, [r3, #0]
	}
	
	const uint8_t MAX_BUFFER = 50;
    2e7a:	230e      	movs	r3, #14
    2e7c:	18fb      	adds	r3, r7, r3
    2e7e:	2232      	movs	r2, #50	; 0x32
    2e80:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
    2e82:	230e      	movs	r3, #14
    2e84:	18fb      	adds	r3, r7, r3
    2e86:	781b      	ldrb	r3, [r3, #0]
    2e88:	2101      	movs	r1, #1
    2e8a:	0018      	movs	r0, r3
    2e8c:	4b17      	ldr	r3, [pc, #92]	; (2eec <gsm_play_record_file+0x98>)
    2e8e:	4798      	blx	r3
    2e90:	0003      	movs	r3, r0
    2e92:	60bb      	str	r3, [r7, #8]
	//buffer created???
	if (cmdx == NULL)
    2e94:	68bb      	ldr	r3, [r7, #8]
    2e96:	2b00      	cmp	r3, #0
    2e98:	d101      	bne.n	2e9e <gsm_play_record_file+0x4a>
	{
		return 0;
    2e9a:	2300      	movs	r3, #0
    2e9c:	e022      	b.n	2ee4 <gsm_play_record_file+0x90>
	}
	memset(cmdx, '\0', MAX_BUFFER);
    2e9e:	230e      	movs	r3, #14
    2ea0:	18fb      	adds	r3, r7, r3
    2ea2:	781a      	ldrb	r2, [r3, #0]
    2ea4:	68bb      	ldr	r3, [r7, #8]
    2ea6:	2100      	movs	r1, #0
    2ea8:	0018      	movs	r0, r3
    2eaa:	4b11      	ldr	r3, [pc, #68]	; (2ef0 <gsm_play_record_file+0x9c>)
    2eac:	4798      	blx	r3
	
	snprintf((char*)cmdx, MAX_BUFFER, "AT+CREC=4,\"C:\\User\\%c.amr\",0,90,%u\r",filename,repeat);
    2eae:	230e      	movs	r3, #14
    2eb0:	18fb      	adds	r3, r7, r3
    2eb2:	7819      	ldrb	r1, [r3, #0]
    2eb4:	230f      	movs	r3, #15
    2eb6:	18fb      	adds	r3, r7, r3
    2eb8:	781b      	ldrb	r3, [r3, #0]
    2eba:	687c      	ldr	r4, [r7, #4]
    2ebc:	4a0d      	ldr	r2, [pc, #52]	; (2ef4 <gsm_play_record_file+0xa0>)
    2ebe:	68b8      	ldr	r0, [r7, #8]
    2ec0:	9300      	str	r3, [sp, #0]
    2ec2:	0023      	movs	r3, r4
    2ec4:	4c0c      	ldr	r4, [pc, #48]	; (2ef8 <gsm_play_record_file+0xa4>)
    2ec6:	47a0      	blx	r4
	
	gsm_send_at_command((const char*)(cmdx), (const char*)RESPONS_OK,2000,0, NULL);
    2ec8:	23fa      	movs	r3, #250	; 0xfa
    2eca:	00da      	lsls	r2, r3, #3
    2ecc:	490b      	ldr	r1, [pc, #44]	; (2efc <gsm_play_record_file+0xa8>)
    2ece:	68b8      	ldr	r0, [r7, #8]
    2ed0:	2300      	movs	r3, #0
    2ed2:	9300      	str	r3, [sp, #0]
    2ed4:	2300      	movs	r3, #0
    2ed6:	4c0a      	ldr	r4, [pc, #40]	; (2f00 <gsm_play_record_file+0xac>)
    2ed8:	47a0      	blx	r4
	free(cmdx);
    2eda:	68bb      	ldr	r3, [r7, #8]
    2edc:	0018      	movs	r0, r3
    2ede:	4b09      	ldr	r3, [pc, #36]	; (2f04 <gsm_play_record_file+0xb0>)
    2ee0:	4798      	blx	r3
	return GSM_ERROR_NONE;
    2ee2:	2300      	movs	r3, #0
	
}
    2ee4:	0018      	movs	r0, r3
    2ee6:	46bd      	mov	sp, r7
    2ee8:	b005      	add	sp, #20
    2eea:	bd90      	pop	{r4, r7, pc}
    2eec:	00017a49 	.word	0x00017a49
    2ef0:	00017b57 	.word	0x00017b57
    2ef4:	00018ab0 	.word	0x00018ab0
    2ef8:	00017cf9 	.word	0x00017cf9
    2efc:	00018808 	.word	0x00018808
    2f00:	000021b5 	.word	0x000021b5
    2f04:	00017ae9 	.word	0x00017ae9

00002f08 <gsm_get_internal_rtc_time>:

enum gsm_error gsm_get_internal_rtc_time(void)
{
    2f08:	b5b0      	push	{r4, r5, r7, lr}
    2f0a:	b086      	sub	sp, #24
    2f0c:	af02      	add	r7, sp, #8
	const uint8_t MAX_BUFFER = 70;
    2f0e:	230f      	movs	r3, #15
    2f10:	18fb      	adds	r3, r7, r3
    2f12:	2246      	movs	r2, #70	; 0x46
    2f14:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
    2f16:	230f      	movs	r3, #15
    2f18:	18fb      	adds	r3, r7, r3
    2f1a:	781b      	ldrb	r3, [r3, #0]
    2f1c:	2101      	movs	r1, #1
    2f1e:	0018      	movs	r0, r3
    2f20:	4b57      	ldr	r3, [pc, #348]	; (3080 <gsm_get_internal_rtc_time+0x178>)
    2f22:	4798      	blx	r3
    2f24:	0003      	movs	r3, r0
    2f26:	60bb      	str	r3, [r7, #8]
	if (cmdx == NULL)
    2f28:	68bb      	ldr	r3, [r7, #8]
    2f2a:	2b00      	cmp	r3, #0
    2f2c:	d105      	bne.n	2f3a <gsm_get_internal_rtc_time+0x32>
	{
		free(cmdx);
    2f2e:	68bb      	ldr	r3, [r7, #8]
    2f30:	0018      	movs	r0, r3
    2f32:	4b54      	ldr	r3, [pc, #336]	; (3084 <gsm_get_internal_rtc_time+0x17c>)
    2f34:	4798      	blx	r3
		return 0;
    2f36:	2300      	movs	r3, #0
    2f38:	e09d      	b.n	3076 <gsm_get_internal_rtc_time+0x16e>
	}
	memset(cmdx, '\0', MAX_BUFFER);
    2f3a:	230f      	movs	r3, #15
    2f3c:	18fb      	adds	r3, r7, r3
    2f3e:	781a      	ldrb	r2, [r3, #0]
    2f40:	68bb      	ldr	r3, [r7, #8]
    2f42:	2100      	movs	r1, #0
    2f44:	0018      	movs	r0, r3
    2f46:	4b50      	ldr	r3, [pc, #320]	; (3088 <gsm_get_internal_rtc_time+0x180>)
    2f48:	4798      	blx	r3
	
	enum gsm_error err;
	err = gsm_send_at_command((const char*)"AT+CCLK?\r", (const char*)RESPONS_OK,5000,MAX_BUFFER, cmdx);
    2f4a:	1dfc      	adds	r4, r7, #7
    2f4c:	230f      	movs	r3, #15
    2f4e:	18fb      	adds	r3, r7, r3
    2f50:	781a      	ldrb	r2, [r3, #0]
    2f52:	4d4e      	ldr	r5, [pc, #312]	; (308c <gsm_get_internal_rtc_time+0x184>)
    2f54:	494e      	ldr	r1, [pc, #312]	; (3090 <gsm_get_internal_rtc_time+0x188>)
    2f56:	484f      	ldr	r0, [pc, #316]	; (3094 <gsm_get_internal_rtc_time+0x18c>)
    2f58:	68bb      	ldr	r3, [r7, #8]
    2f5a:	9300      	str	r3, [sp, #0]
    2f5c:	0013      	movs	r3, r2
    2f5e:	002a      	movs	r2, r5
    2f60:	4d4d      	ldr	r5, [pc, #308]	; (3098 <gsm_get_internal_rtc_time+0x190>)
    2f62:	47a8      	blx	r5
    2f64:	0003      	movs	r3, r0
    2f66:	7023      	strb	r3, [r4, #0]
	if(err==GSM_ERROR_NONE)
    2f68:	1dfb      	adds	r3, r7, #7
    2f6a:	781b      	ldrb	r3, [r3, #0]
    2f6c:	2b00      	cmp	r3, #0
    2f6e:	d16a      	bne.n	3046 <gsm_get_internal_rtc_time+0x13e>
	{
		char *cclktocken;
		cclktocken = strtok(cmdx,"\"");
    2f70:	4a4a      	ldr	r2, [pc, #296]	; (309c <gsm_get_internal_rtc_time+0x194>)
    2f72:	68bb      	ldr	r3, [r7, #8]
    2f74:	0011      	movs	r1, r2
    2f76:	0018      	movs	r0, r3
    2f78:	4b49      	ldr	r3, [pc, #292]	; (30a0 <gsm_get_internal_rtc_time+0x198>)
    2f7a:	4798      	blx	r3
    2f7c:	0003      	movs	r3, r0
    2f7e:	603b      	str	r3, [r7, #0]
		cclktocken = strtok(NULL,"\"");
    2f80:	4b46      	ldr	r3, [pc, #280]	; (309c <gsm_get_internal_rtc_time+0x194>)
    2f82:	0019      	movs	r1, r3
    2f84:	2000      	movs	r0, #0
    2f86:	4b46      	ldr	r3, [pc, #280]	; (30a0 <gsm_get_internal_rtc_time+0x198>)
    2f88:	4798      	blx	r3
    2f8a:	0003      	movs	r3, r0
    2f8c:	603b      	str	r3, [r7, #0]
		
		cclktocken = strtok(cclktocken,"/");
    2f8e:	4a45      	ldr	r2, [pc, #276]	; (30a4 <gsm_get_internal_rtc_time+0x19c>)
    2f90:	683b      	ldr	r3, [r7, #0]
    2f92:	0011      	movs	r1, r2
    2f94:	0018      	movs	r0, r3
    2f96:	4b42      	ldr	r3, [pc, #264]	; (30a0 <gsm_get_internal_rtc_time+0x198>)
    2f98:	4798      	blx	r3
    2f9a:	0003      	movs	r3, r0
    2f9c:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_year = atoi(cclktocken);
    2f9e:	683b      	ldr	r3, [r7, #0]
    2fa0:	0018      	movs	r0, r3
    2fa2:	4b41      	ldr	r3, [pc, #260]	; (30a8 <gsm_get_internal_rtc_time+0x1a0>)
    2fa4:	4798      	blx	r3
    2fa6:	0003      	movs	r3, r0
    2fa8:	b2da      	uxtb	r2, r3
    2faa:	4b40      	ldr	r3, [pc, #256]	; (30ac <gsm_get_internal_rtc_time+0x1a4>)
    2fac:	701a      	strb	r2, [r3, #0]
		
		cclktocken = strtok(NULL,"/");
    2fae:	4b3d      	ldr	r3, [pc, #244]	; (30a4 <gsm_get_internal_rtc_time+0x19c>)
    2fb0:	0019      	movs	r1, r3
    2fb2:	2000      	movs	r0, #0
    2fb4:	4b3a      	ldr	r3, [pc, #232]	; (30a0 <gsm_get_internal_rtc_time+0x198>)
    2fb6:	4798      	blx	r3
    2fb8:	0003      	movs	r3, r0
    2fba:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_month = atoi(cclktocken);
    2fbc:	683b      	ldr	r3, [r7, #0]
    2fbe:	0018      	movs	r0, r3
    2fc0:	4b39      	ldr	r3, [pc, #228]	; (30a8 <gsm_get_internal_rtc_time+0x1a0>)
    2fc2:	4798      	blx	r3
    2fc4:	0003      	movs	r3, r0
    2fc6:	b2da      	uxtb	r2, r3
    2fc8:	4b38      	ldr	r3, [pc, #224]	; (30ac <gsm_get_internal_rtc_time+0x1a4>)
    2fca:	705a      	strb	r2, [r3, #1]
		
		cclktocken = strtok(NULL,",");
    2fcc:	4b38      	ldr	r3, [pc, #224]	; (30b0 <gsm_get_internal_rtc_time+0x1a8>)
    2fce:	0019      	movs	r1, r3
    2fd0:	2000      	movs	r0, #0
    2fd2:	4b33      	ldr	r3, [pc, #204]	; (30a0 <gsm_get_internal_rtc_time+0x198>)
    2fd4:	4798      	blx	r3
    2fd6:	0003      	movs	r3, r0
    2fd8:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_date = atoi(cclktocken);
    2fda:	683b      	ldr	r3, [r7, #0]
    2fdc:	0018      	movs	r0, r3
    2fde:	4b32      	ldr	r3, [pc, #200]	; (30a8 <gsm_get_internal_rtc_time+0x1a0>)
    2fe0:	4798      	blx	r3
    2fe2:	0003      	movs	r3, r0
    2fe4:	b2da      	uxtb	r2, r3
    2fe6:	4b31      	ldr	r3, [pc, #196]	; (30ac <gsm_get_internal_rtc_time+0x1a4>)
    2fe8:	709a      	strb	r2, [r3, #2]
		
		cclktocken = strtok(NULL,":");
    2fea:	4b32      	ldr	r3, [pc, #200]	; (30b4 <gsm_get_internal_rtc_time+0x1ac>)
    2fec:	0019      	movs	r1, r3
    2fee:	2000      	movs	r0, #0
    2ff0:	4b2b      	ldr	r3, [pc, #172]	; (30a0 <gsm_get_internal_rtc_time+0x198>)
    2ff2:	4798      	blx	r3
    2ff4:	0003      	movs	r3, r0
    2ff6:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_hour = atoi(cclktocken);
    2ff8:	683b      	ldr	r3, [r7, #0]
    2ffa:	0018      	movs	r0, r3
    2ffc:	4b2a      	ldr	r3, [pc, #168]	; (30a8 <gsm_get_internal_rtc_time+0x1a0>)
    2ffe:	4798      	blx	r3
    3000:	0003      	movs	r3, r0
    3002:	b2da      	uxtb	r2, r3
    3004:	4b29      	ldr	r3, [pc, #164]	; (30ac <gsm_get_internal_rtc_time+0x1a4>)
    3006:	70da      	strb	r2, [r3, #3]
		
		cclktocken = strtok(NULL,":");
    3008:	4b2a      	ldr	r3, [pc, #168]	; (30b4 <gsm_get_internal_rtc_time+0x1ac>)
    300a:	0019      	movs	r1, r3
    300c:	2000      	movs	r0, #0
    300e:	4b24      	ldr	r3, [pc, #144]	; (30a0 <gsm_get_internal_rtc_time+0x198>)
    3010:	4798      	blx	r3
    3012:	0003      	movs	r3, r0
    3014:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_minute = atoi(cclktocken);
    3016:	683b      	ldr	r3, [r7, #0]
    3018:	0018      	movs	r0, r3
    301a:	4b23      	ldr	r3, [pc, #140]	; (30a8 <gsm_get_internal_rtc_time+0x1a0>)
    301c:	4798      	blx	r3
    301e:	0003      	movs	r3, r0
    3020:	b2da      	uxtb	r2, r3
    3022:	4b22      	ldr	r3, [pc, #136]	; (30ac <gsm_get_internal_rtc_time+0x1a4>)
    3024:	711a      	strb	r2, [r3, #4]
		
		cclktocken = strtok(NULL,"+");
    3026:	4b24      	ldr	r3, [pc, #144]	; (30b8 <gsm_get_internal_rtc_time+0x1b0>)
    3028:	0019      	movs	r1, r3
    302a:	2000      	movs	r0, #0
    302c:	4b1c      	ldr	r3, [pc, #112]	; (30a0 <gsm_get_internal_rtc_time+0x198>)
    302e:	4798      	blx	r3
    3030:	0003      	movs	r3, r0
    3032:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_second = atoi(cclktocken);
    3034:	683b      	ldr	r3, [r7, #0]
    3036:	0018      	movs	r0, r3
    3038:	4b1b      	ldr	r3, [pc, #108]	; (30a8 <gsm_get_internal_rtc_time+0x1a0>)
    303a:	4798      	blx	r3
    303c:	0003      	movs	r3, r0
    303e:	b2da      	uxtb	r2, r3
    3040:	4b1a      	ldr	r3, [pc, #104]	; (30ac <gsm_get_internal_rtc_time+0x1a4>)
    3042:	715a      	strb	r2, [r3, #5]
    3044:	e011      	b.n	306a <gsm_get_internal_rtc_time+0x162>
	}
	else
	{
		struct_internal_rtc.Network_year = 0;
    3046:	4b19      	ldr	r3, [pc, #100]	; (30ac <gsm_get_internal_rtc_time+0x1a4>)
    3048:	2200      	movs	r2, #0
    304a:	701a      	strb	r2, [r3, #0]
		struct_internal_rtc.Network_month = 0;
    304c:	4b17      	ldr	r3, [pc, #92]	; (30ac <gsm_get_internal_rtc_time+0x1a4>)
    304e:	2200      	movs	r2, #0
    3050:	705a      	strb	r2, [r3, #1]
		struct_internal_rtc.Network_date = 0;
    3052:	4b16      	ldr	r3, [pc, #88]	; (30ac <gsm_get_internal_rtc_time+0x1a4>)
    3054:	2200      	movs	r2, #0
    3056:	709a      	strb	r2, [r3, #2]
		struct_internal_rtc.Network_hour = 0;
    3058:	4b14      	ldr	r3, [pc, #80]	; (30ac <gsm_get_internal_rtc_time+0x1a4>)
    305a:	2200      	movs	r2, #0
    305c:	70da      	strb	r2, [r3, #3]
		struct_internal_rtc.Network_minute = 0;
    305e:	4b13      	ldr	r3, [pc, #76]	; (30ac <gsm_get_internal_rtc_time+0x1a4>)
    3060:	2200      	movs	r2, #0
    3062:	711a      	strb	r2, [r3, #4]
		struct_internal_rtc.Network_second = 0;
    3064:	4b11      	ldr	r3, [pc, #68]	; (30ac <gsm_get_internal_rtc_time+0x1a4>)
    3066:	2200      	movs	r2, #0
    3068:	715a      	strb	r2, [r3, #5]
	}
	
	free(cmdx);
    306a:	68bb      	ldr	r3, [r7, #8]
    306c:	0018      	movs	r0, r3
    306e:	4b05      	ldr	r3, [pc, #20]	; (3084 <gsm_get_internal_rtc_time+0x17c>)
    3070:	4798      	blx	r3
	return err;
    3072:	1dfb      	adds	r3, r7, #7
    3074:	781b      	ldrb	r3, [r3, #0]
}
    3076:	0018      	movs	r0, r3
    3078:	46bd      	mov	sp, r7
    307a:	b004      	add	sp, #16
    307c:	bdb0      	pop	{r4, r5, r7, pc}
    307e:	46c0      	nop			; (mov r8, r8)
    3080:	00017a49 	.word	0x00017a49
    3084:	00017ae9 	.word	0x00017ae9
    3088:	00017b57 	.word	0x00017b57
    308c:	00001388 	.word	0x00001388
    3090:	00018808 	.word	0x00018808
    3094:	00018ad4 	.word	0x00018ad4
    3098:	000021b5 	.word	0x000021b5
    309c:	00018ae0 	.word	0x00018ae0
    30a0:	00017e49 	.word	0x00017e49
    30a4:	00018ae4 	.word	0x00018ae4
    30a8:	00017a3d 	.word	0x00017a3d
    30ac:	20000678 	.word	0x20000678
    30b0:	00018924 	.word	0x00018924
    30b4:	00018920 	.word	0x00018920
    30b8:	00018ae8 	.word	0x00018ae8

000030bc <gsm_config_module>:


enum gsm_error gsm_config_module(void)
{
    30bc:	b580      	push	{r7, lr}
    30be:	af00      	add	r7, sp, #0
	if (gsm_check_module() == GSM_ERROR_NONE)
    30c0:	4b31      	ldr	r3, [pc, #196]	; (3188 <gsm_config_module+0xcc>)
    30c2:	4798      	blx	r3
    30c4:	1e03      	subs	r3, r0, #0
    30c6:	d000      	beq.n	30ca <gsm_config_module+0xe>
    30c8:	e058      	b.n	317c <gsm_config_module+0xc0>
	{
		if (gsm_factory_reset() == GSM_ERROR_NONE)
    30ca:	4b30      	ldr	r3, [pc, #192]	; (318c <gsm_config_module+0xd0>)
    30cc:	4798      	blx	r3
    30ce:	1e03      	subs	r3, r0, #0
    30d0:	d000      	beq.n	30d4 <gsm_config_module+0x18>
    30d2:	e051      	b.n	3178 <gsm_config_module+0xbc>
		{
			vTaskDelay(2000/portTICK_PERIOD_MS);
    30d4:	23fa      	movs	r3, #250	; 0xfa
    30d6:	00db      	lsls	r3, r3, #3
    30d8:	0018      	movs	r0, r3
    30da:	4b2d      	ldr	r3, [pc, #180]	; (3190 <gsm_config_module+0xd4>)
    30dc:	4798      	blx	r3
			
			if (gsm_detect_simcard() == GSM_ERROR_NONE)
    30de:	4b2d      	ldr	r3, [pc, #180]	; (3194 <gsm_config_module+0xd8>)
    30e0:	4798      	blx	r3
    30e2:	1e03      	subs	r3, r0, #0
    30e4:	d146      	bne.n	3174 <gsm_config_module+0xb8>
			{
				if (gsm_echo_off() == GSM_ERROR_NONE)
    30e6:	4b2c      	ldr	r3, [pc, #176]	; (3198 <gsm_config_module+0xdc>)
    30e8:	4798      	blx	r3
    30ea:	1e03      	subs	r3, r0, #0
    30ec:	d148      	bne.n	3180 <gsm_config_module+0xc4>
				{
					if (gsm_set_baudrate() == GSM_ERROR_NONE)
    30ee:	4b2b      	ldr	r3, [pc, #172]	; (319c <gsm_config_module+0xe0>)
    30f0:	4798      	blx	r3
    30f2:	1e03      	subs	r3, r0, #0
    30f4:	d13c      	bne.n	3170 <gsm_config_module+0xb4>
					{
						vTaskDelay(2000/portTICK_PERIOD_MS);
    30f6:	23fa      	movs	r3, #250	; 0xfa
    30f8:	00db      	lsls	r3, r3, #3
    30fa:	0018      	movs	r0, r3
    30fc:	4b24      	ldr	r3, [pc, #144]	; (3190 <gsm_config_module+0xd4>)
    30fe:	4798      	blx	r3
						
						if (gsm_enable_calling_line_identification()==GSM_ERROR_NONE)
    3100:	4b27      	ldr	r3, [pc, #156]	; (31a0 <gsm_config_module+0xe4>)
    3102:	4798      	blx	r3
    3104:	1e03      	subs	r3, r0, #0
    3106:	d131      	bne.n	316c <gsm_config_module+0xb0>
						{
							if (gsm_enable_connected_line_identification_presentation() == GSM_ERROR_NONE)
    3108:	4b26      	ldr	r3, [pc, #152]	; (31a4 <gsm_config_module+0xe8>)
    310a:	4798      	blx	r3
    310c:	1e03      	subs	r3, r0, #0
    310e:	d12b      	bne.n	3168 <gsm_config_module+0xac>
							{
								if (gsm_enable_list_current_calls_of_ME() == GSM_ERROR_NONE)
    3110:	4b25      	ldr	r3, [pc, #148]	; (31a8 <gsm_config_module+0xec>)
    3112:	4798      	blx	r3
    3114:	1e03      	subs	r3, r0, #0
    3116:	d125      	bne.n	3164 <gsm_config_module+0xa8>
								{
									if (gsm_select_sms_message_formate_text_mode() == GSM_ERROR_NONE)
    3118:	4b24      	ldr	r3, [pc, #144]	; (31ac <gsm_config_module+0xf0>)
    311a:	4798      	blx	r3
    311c:	1e03      	subs	r3, r0, #0
    311e:	d11f      	bne.n	3160 <gsm_config_module+0xa4>
									{
										if (gsm_set_sms_text_mode_parameter() == GSM_ERROR_NONE)
    3120:	4b23      	ldr	r3, [pc, #140]	; (31b0 <gsm_config_module+0xf4>)
    3122:	4798      	blx	r3
    3124:	1e03      	subs	r3, r0, #0
    3126:	d119      	bne.n	315c <gsm_config_module+0xa0>
										{
											if (gsm_enable_new_sms_message_indications() == GSM_ERROR_NONE)
    3128:	4b22      	ldr	r3, [pc, #136]	; (31b4 <gsm_config_module+0xf8>)
    312a:	4798      	blx	r3
    312c:	1e03      	subs	r3, r0, #0
    312e:	d113      	bne.n	3158 <gsm_config_module+0x9c>
											{
												if (gsm_enable_network_time_update() == GSM_ERROR_NONE)
    3130:	4b21      	ldr	r3, [pc, #132]	; (31b8 <gsm_config_module+0xfc>)
    3132:	4798      	blx	r3
    3134:	1e03      	subs	r3, r0, #0
    3136:	d10d      	bne.n	3154 <gsm_config_module+0x98>
												{
													if (gsm_enable_DTMF_detection() == GSM_ERROR_NONE)
    3138:	4b20      	ldr	r3, [pc, #128]	; (31bc <gsm_config_module+0x100>)
    313a:	4798      	blx	r3
    313c:	1e03      	subs	r3, r0, #0
    313e:	d107      	bne.n	3150 <gsm_config_module+0x94>
													{
														//if (gsm_enable_sleep_mode()==GSM_ERROR_NONE)
														{
															if (gsm_store_active_profile() == GSM_ERROR_NONE)
    3140:	4b1f      	ldr	r3, [pc, #124]	; (31c0 <gsm_config_module+0x104>)
    3142:	4798      	blx	r3
    3144:	1e03      	subs	r3, r0, #0
    3146:	d101      	bne.n	314c <gsm_config_module+0x90>
															{
																return GSM_ERROR_NONE; 
    3148:	2300      	movs	r3, #0
    314a:	e01a      	b.n	3182 <gsm_config_module+0xc6>
															}
															else
															{
																return GSM_ERROR_CONFIG_FAILED;
    314c:	2310      	movs	r3, #16
    314e:	e018      	b.n	3182 <gsm_config_module+0xc6>
														//	return GSM_ERROR_CONFIG_FAILED;
														}
													}
													else
													{
														return GSM_ERROR_CONFIG_FAILED;
    3150:	2310      	movs	r3, #16
    3152:	e016      	b.n	3182 <gsm_config_module+0xc6>
													}
												}
												else
												{
													return GSM_ERROR_CONFIG_FAILED;
    3154:	2310      	movs	r3, #16
    3156:	e014      	b.n	3182 <gsm_config_module+0xc6>
												}
											}
											else
											{
												return GSM_ERROR_CONFIG_FAILED;
    3158:	2310      	movs	r3, #16
    315a:	e012      	b.n	3182 <gsm_config_module+0xc6>
											}
										}
										else
										{
											return GSM_ERROR_CONFIG_FAILED;
    315c:	2310      	movs	r3, #16
    315e:	e010      	b.n	3182 <gsm_config_module+0xc6>
										}
									}
									else
									{
										return GSM_ERROR_CONFIG_FAILED;
    3160:	2310      	movs	r3, #16
    3162:	e00e      	b.n	3182 <gsm_config_module+0xc6>
									}
								}
								else
								{
									return GSM_ERROR_CONFIG_FAILED;
    3164:	2310      	movs	r3, #16
    3166:	e00c      	b.n	3182 <gsm_config_module+0xc6>
								}
							}
							else
							{
								return GSM_ERROR_CONFIG_FAILED;
    3168:	2310      	movs	r3, #16
    316a:	e00a      	b.n	3182 <gsm_config_module+0xc6>
							}
						}
						else
						{
							return GSM_ERROR_CONFIG_FAILED;
    316c:	2310      	movs	r3, #16
    316e:	e008      	b.n	3182 <gsm_config_module+0xc6>
						}
					}
					else
					{
						return GSM_ERROR_CONFIG_FAILED;
    3170:	2310      	movs	r3, #16
    3172:	e006      	b.n	3182 <gsm_config_module+0xc6>
					}
				}
			}
			else
			{
				return GSM_ERROR_CONFIG_FAILED;
    3174:	2310      	movs	r3, #16
    3176:	e004      	b.n	3182 <gsm_config_module+0xc6>
			}
		}
		else
		{
			return GSM_ERROR_CONFIG_FAILED;
    3178:	2310      	movs	r3, #16
    317a:	e002      	b.n	3182 <gsm_config_module+0xc6>
		}
	}
	else
	{
		return GSM_ERROR_CONFIG_FAILED;
    317c:	2310      	movs	r3, #16
    317e:	e000      	b.n	3182 <gsm_config_module+0xc6>
	}
	
	return GSM_ERROR_CONFIG_FAILED;
    3180:	2310      	movs	r3, #16
}
    3182:	0018      	movs	r0, r3
    3184:	46bd      	mov	sp, r7
    3186:	bd80      	pop	{r7, pc}
    3188:	000023a1 	.word	0x000023a1
    318c:	000025ad 	.word	0x000025ad
    3190:	0000ee99 	.word	0x0000ee99
    3194:	0000248d 	.word	0x0000248d
    3198:	000025dd 	.word	0x000025dd
    319c:	00002439 	.word	0x00002439
    31a0:	0000251d 	.word	0x0000251d
    31a4:	0000254d 	.word	0x0000254d
    31a8:	0000257d 	.word	0x0000257d
    31ac:	0000260d 	.word	0x0000260d
    31b0:	0000263d 	.word	0x0000263d
    31b4:	00002885 	.word	0x00002885
    31b8:	00002cc9 	.word	0x00002cc9
    31bc:	00002cf9 	.word	0x00002cf9
    31c0:	000024ed 	.word	0x000024ed

000031c4 <gsm_read_response_line>:

bool gsm_read_response_line(char *buffer,uint8_t length)
{
    31c4:	b580      	push	{r7, lr}
    31c6:	b084      	sub	sp, #16
    31c8:	af00      	add	r7, sp, #0
    31ca:	6078      	str	r0, [r7, #4]
    31cc:	000a      	movs	r2, r1
    31ce:	1cfb      	adds	r3, r7, #3
    31d0:	701a      	strb	r2, [r3, #0]
	bool line_non_empty = false;
    31d2:	230f      	movs	r3, #15
    31d4:	18fb      	adds	r3, r7, r3
    31d6:	2200      	movs	r2, #0
    31d8:	701a      	strb	r2, [r3, #0]
	while (length > 1) 
    31da:	e026      	b.n	322a <gsm_read_response_line+0x66>
	{
		uint8_t curr_rx;
		/* Fetch next buffered character received from the module */
		if (xQueueReceive(gsm_rx_queue, &curr_rx, 500 / portTICK_PERIOD_MS) == pdFALSE)
    31dc:	4b1b      	ldr	r3, [pc, #108]	; (324c <gsm_read_response_line+0x88>)
    31de:	6818      	ldr	r0, [r3, #0]
    31e0:	23fa      	movs	r3, #250	; 0xfa
    31e2:	005a      	lsls	r2, r3, #1
    31e4:	230e      	movs	r3, #14
    31e6:	18fb      	adds	r3, r7, r3
    31e8:	0019      	movs	r1, r3
    31ea:	4b19      	ldr	r3, [pc, #100]	; (3250 <gsm_read_response_line+0x8c>)
    31ec:	4798      	blx	r3
    31ee:	1e03      	subs	r3, r0, #0
    31f0:	d101      	bne.n	31f6 <gsm_read_response_line+0x32>
		{
			return false;
    31f2:	2300      	movs	r3, #0
    31f4:	e025      	b.n	3242 <gsm_read_response_line+0x7e>
		}

		if (curr_rx == '\n') 
    31f6:	230e      	movs	r3, #14
    31f8:	18fb      	adds	r3, r7, r3
    31fa:	781b      	ldrb	r3, [r3, #0]
    31fc:	2b0a      	cmp	r3, #10
    31fe:	d014      	beq.n	322a <gsm_read_response_line+0x66>
		{
			/* Ignore newline characters */
		}
		else if (curr_rx != '\r') 
    3200:	230e      	movs	r3, #14
    3202:	18fb      	adds	r3, r7, r3
    3204:	781b      	ldrb	r3, [r3, #0]
    3206:	2b0d      	cmp	r3, #13
    3208:	d014      	beq.n	3234 <gsm_read_response_line+0x70>
		{
			/* Non end-of-command CR character */
			*(buffer++) = curr_rx;
    320a:	687b      	ldr	r3, [r7, #4]
    320c:	1c5a      	adds	r2, r3, #1
    320e:	607a      	str	r2, [r7, #4]
    3210:	220e      	movs	r2, #14
    3212:	18ba      	adds	r2, r7, r2
    3214:	7812      	ldrb	r2, [r2, #0]
    3216:	701a      	strb	r2, [r3, #0]
			length--;
    3218:	1cfb      	adds	r3, r7, #3
    321a:	781a      	ldrb	r2, [r3, #0]
    321c:	1cfb      	adds	r3, r7, #3
    321e:	3a01      	subs	r2, #1
    3220:	701a      	strb	r2, [r3, #0]
			line_non_empty = true;
    3222:	230f      	movs	r3, #15
    3224:	18fb      	adds	r3, r7, r3
    3226:	2201      	movs	r2, #1
    3228:	701a      	strb	r2, [r3, #0]
	while (length > 1) 
    322a:	1cfb      	adds	r3, r7, #3
    322c:	781b      	ldrb	r3, [r3, #0]
    322e:	2b01      	cmp	r3, #1
    3230:	d8d4      	bhi.n	31dc <gsm_read_response_line+0x18>
    3232:	e000      	b.n	3236 <gsm_read_response_line+0x72>
		}
		else
		{
			/* End of command, finished reading line */
			break;
    3234:	46c0      	nop			; (mov r8, r8)
		}
	}

	*(buffer) = '\0';
    3236:	687b      	ldr	r3, [r7, #4]
    3238:	2200      	movs	r2, #0
    323a:	701a      	strb	r2, [r3, #0]
	
	return line_non_empty;
    323c:	230f      	movs	r3, #15
    323e:	18fb      	adds	r3, r7, r3
    3240:	781b      	ldrb	r3, [r3, #0]
}
    3242:	0018      	movs	r0, r3
    3244:	46bd      	mov	sp, r7
    3246:	b004      	add	sp, #16
    3248:	bd80      	pop	{r7, pc}
    324a:	46c0      	nop			; (mov r8, r8)
    324c:	2000021c 	.word	0x2000021c
    3250:	0000e3f1 	.word	0x0000e3f1

00003254 <gsm_responseLine_isNew_SMS_Received>:

char gsm_responseLine_isNew_SMS_Received(char *response)
{
    3254:	b580      	push	{r7, lr}
    3256:	b084      	sub	sp, #16
    3258:	af00      	add	r7, sp, #0
    325a:	6078      	str	r0, [r7, #4]
	
	char sms_index = 0;
    325c:	230f      	movs	r3, #15
    325e:	18fb      	adds	r3, r7, r3
    3260:	2200      	movs	r2, #0
    3262:	701a      	strb	r2, [r3, #0]
	
	if (strstr(response,"+CMTI:"))
    3264:	4a17      	ldr	r2, [pc, #92]	; (32c4 <gsm_responseLine_isNew_SMS_Received+0x70>)
    3266:	687b      	ldr	r3, [r7, #4]
    3268:	0011      	movs	r1, r2
    326a:	0018      	movs	r0, r3
    326c:	4b16      	ldr	r3, [pc, #88]	; (32c8 <gsm_responseLine_isNew_SMS_Received+0x74>)
    326e:	4798      	blx	r3
    3270:	1e03      	subs	r3, r0, #0
    3272:	d01b      	beq.n	32ac <gsm_responseLine_isNew_SMS_Received+0x58>
	{
		char *ptr_tocken;
		ptr_tocken = strtok(response,",");
    3274:	4a15      	ldr	r2, [pc, #84]	; (32cc <gsm_responseLine_isNew_SMS_Received+0x78>)
    3276:	687b      	ldr	r3, [r7, #4]
    3278:	0011      	movs	r1, r2
    327a:	0018      	movs	r0, r3
    327c:	4b14      	ldr	r3, [pc, #80]	; (32d0 <gsm_responseLine_isNew_SMS_Received+0x7c>)
    327e:	4798      	blx	r3
    3280:	0003      	movs	r3, r0
    3282:	60bb      	str	r3, [r7, #8]
		ptr_tocken = strtok(NULL,",");
    3284:	4b11      	ldr	r3, [pc, #68]	; (32cc <gsm_responseLine_isNew_SMS_Received+0x78>)
    3286:	0019      	movs	r1, r3
    3288:	2000      	movs	r0, #0
    328a:	4b11      	ldr	r3, [pc, #68]	; (32d0 <gsm_responseLine_isNew_SMS_Received+0x7c>)
    328c:	4798      	blx	r3
    328e:	0003      	movs	r3, r0
    3290:	60bb      	str	r3, [r7, #8]
		
		RemoveSpaces(ptr_tocken);
    3292:	68bb      	ldr	r3, [r7, #8]
    3294:	0018      	movs	r0, r3
    3296:	4b0f      	ldr	r3, [pc, #60]	; (32d4 <gsm_responseLine_isNew_SMS_Received+0x80>)
    3298:	4798      	blx	r3
		
		sms_index = atoi(ptr_tocken);
    329a:	68bb      	ldr	r3, [r7, #8]
    329c:	0018      	movs	r0, r3
    329e:	4b0e      	ldr	r3, [pc, #56]	; (32d8 <gsm_responseLine_isNew_SMS_Received+0x84>)
    32a0:	4798      	blx	r3
    32a2:	0002      	movs	r2, r0
    32a4:	230f      	movs	r3, #15
    32a6:	18fb      	adds	r3, r7, r3
    32a8:	701a      	strb	r2, [r3, #0]
    32aa:	e003      	b.n	32b4 <gsm_responseLine_isNew_SMS_Received+0x60>
		
	}
	else
	{
		sms_index =  0;
    32ac:	230f      	movs	r3, #15
    32ae:	18fb      	adds	r3, r7, r3
    32b0:	2200      	movs	r2, #0
    32b2:	701a      	strb	r2, [r3, #0]
	}
	
	return sms_index;
    32b4:	230f      	movs	r3, #15
    32b6:	18fb      	adds	r3, r7, r3
    32b8:	781b      	ldrb	r3, [r3, #0]
}
    32ba:	0018      	movs	r0, r3
    32bc:	46bd      	mov	sp, r7
    32be:	b004      	add	sp, #16
    32c0:	bd80      	pop	{r7, pc}
    32c2:	46c0      	nop			; (mov r8, r8)
    32c4:	00018aec 	.word	0x00018aec
    32c8:	00017e17 	.word	0x00017e17
    32cc:	00018924 	.word	0x00018924
    32d0:	00017e49 	.word	0x00017e49
    32d4:	00002841 	.word	0x00002841
    32d8:	00017a3d 	.word	0x00017a3d

000032dc <gsm_responseLine_isRinging>:

bool gsm_responseLine_isRinging(char *response)
{
    32dc:	b580      	push	{r7, lr}
    32de:	b082      	sub	sp, #8
    32e0:	af00      	add	r7, sp, #0
    32e2:	6078      	str	r0, [r7, #4]
	if (strstr(response,"RING"))
    32e4:	4a07      	ldr	r2, [pc, #28]	; (3304 <gsm_responseLine_isRinging+0x28>)
    32e6:	687b      	ldr	r3, [r7, #4]
    32e8:	0011      	movs	r1, r2
    32ea:	0018      	movs	r0, r3
    32ec:	4b06      	ldr	r3, [pc, #24]	; (3308 <gsm_responseLine_isRinging+0x2c>)
    32ee:	4798      	blx	r3
    32f0:	1e03      	subs	r3, r0, #0
    32f2:	d001      	beq.n	32f8 <gsm_responseLine_isRinging+0x1c>
	{
		return true;	
    32f4:	2301      	movs	r3, #1
    32f6:	e000      	b.n	32fa <gsm_responseLine_isRinging+0x1e>
	}
	else
	{
		return false;
    32f8:	2300      	movs	r3, #0
	}
}
    32fa:	0018      	movs	r0, r3
    32fc:	46bd      	mov	sp, r7
    32fe:	b002      	add	sp, #8
    3300:	bd80      	pop	{r7, pc}
    3302:	46c0      	nop			; (mov r8, r8)
    3304:	00018af4 	.word	0x00018af4
    3308:	00017e17 	.word	0x00017e17

0000330c <gsm_responseLine_get_IncommingCallNo>:

bool gsm_responseLine_get_IncommingCallNo(char *response,char *phone_number)
{
    330c:	b580      	push	{r7, lr}
    330e:	b084      	sub	sp, #16
    3310:	af00      	add	r7, sp, #0
    3312:	6078      	str	r0, [r7, #4]
    3314:	6039      	str	r1, [r7, #0]
	if(strstr(response,"+CLIP"))
    3316:	4a1e      	ldr	r2, [pc, #120]	; (3390 <gsm_responseLine_get_IncommingCallNo+0x84>)
    3318:	687b      	ldr	r3, [r7, #4]
    331a:	0011      	movs	r1, r2
    331c:	0018      	movs	r0, r3
    331e:	4b1d      	ldr	r3, [pc, #116]	; (3394 <gsm_responseLine_get_IncommingCallNo+0x88>)
    3320:	4798      	blx	r3
    3322:	1e03      	subs	r3, r0, #0
    3324:	d02e      	beq.n	3384 <gsm_responseLine_get_IncommingCallNo+0x78>
	{
		  char *ptr_tocken;
		  ptr_tocken = strtok(response,":"); 
    3326:	4a1c      	ldr	r2, [pc, #112]	; (3398 <gsm_responseLine_get_IncommingCallNo+0x8c>)
    3328:	687b      	ldr	r3, [r7, #4]
    332a:	0011      	movs	r1, r2
    332c:	0018      	movs	r0, r3
    332e:	4b1b      	ldr	r3, [pc, #108]	; (339c <gsm_responseLine_get_IncommingCallNo+0x90>)
    3330:	4798      	blx	r3
    3332:	0003      	movs	r3, r0
    3334:	60fb      	str	r3, [r7, #12]
		  ptr_tocken = strtok(NULL,",");
    3336:	4b1a      	ldr	r3, [pc, #104]	; (33a0 <gsm_responseLine_get_IncommingCallNo+0x94>)
    3338:	0019      	movs	r1, r3
    333a:	2000      	movs	r0, #0
    333c:	4b17      	ldr	r3, [pc, #92]	; (339c <gsm_responseLine_get_IncommingCallNo+0x90>)
    333e:	4798      	blx	r3
    3340:	0003      	movs	r3, r0
    3342:	60fb      	str	r3, [r7, #12]
		  ptr_tocken = strtok(ptr_tocken,"\"");
    3344:	4a17      	ldr	r2, [pc, #92]	; (33a4 <gsm_responseLine_get_IncommingCallNo+0x98>)
    3346:	68fb      	ldr	r3, [r7, #12]
    3348:	0011      	movs	r1, r2
    334a:	0018      	movs	r0, r3
    334c:	4b13      	ldr	r3, [pc, #76]	; (339c <gsm_responseLine_get_IncommingCallNo+0x90>)
    334e:	4798      	blx	r3
    3350:	0003      	movs	r3, r0
    3352:	60fb      	str	r3, [r7, #12]
		  ptr_tocken = strtok(NULL,"\"");
    3354:	4b13      	ldr	r3, [pc, #76]	; (33a4 <gsm_responseLine_get_IncommingCallNo+0x98>)
    3356:	0019      	movs	r1, r3
    3358:	2000      	movs	r0, #0
    335a:	4b10      	ldr	r3, [pc, #64]	; (339c <gsm_responseLine_get_IncommingCallNo+0x90>)
    335c:	4798      	blx	r3
    335e:	0003      	movs	r3, r0
    3360:	60fb      	str	r3, [r7, #12]
		  
		  if (!strstr(ptr_tocken,"+"))
    3362:	68fb      	ldr	r3, [r7, #12]
    3364:	212b      	movs	r1, #43	; 0x2b
    3366:	0018      	movs	r0, r3
    3368:	4b0f      	ldr	r3, [pc, #60]	; (33a8 <gsm_responseLine_get_IncommingCallNo+0x9c>)
    336a:	4798      	blx	r3
    336c:	1e03      	subs	r3, r0, #0
    336e:	d101      	bne.n	3374 <gsm_responseLine_get_IncommingCallNo+0x68>
		  {
			  return false;
    3370:	2300      	movs	r3, #0
    3372:	e008      	b.n	3386 <gsm_responseLine_get_IncommingCallNo+0x7a>
		  }
		  strcpy(phone_number, (char *)(ptr_tocken));		  
    3374:	68fa      	ldr	r2, [r7, #12]
    3376:	683b      	ldr	r3, [r7, #0]
    3378:	0011      	movs	r1, r2
    337a:	0018      	movs	r0, r3
    337c:	4b0b      	ldr	r3, [pc, #44]	; (33ac <gsm_responseLine_get_IncommingCallNo+0xa0>)
    337e:	4798      	blx	r3
		  return true;
    3380:	2301      	movs	r3, #1
    3382:	e000      	b.n	3386 <gsm_responseLine_get_IncommingCallNo+0x7a>
	}
	else
	{
		return false;
    3384:	2300      	movs	r3, #0
	}
}
    3386:	0018      	movs	r0, r3
    3388:	46bd      	mov	sp, r7
    338a:	b004      	add	sp, #16
    338c:	bd80      	pop	{r7, pc}
    338e:	46c0      	nop			; (mov r8, r8)
    3390:	00018afc 	.word	0x00018afc
    3394:	00017e17 	.word	0x00017e17
    3398:	00018920 	.word	0x00018920
    339c:	00017e49 	.word	0x00017e49
    33a0:	00018924 	.word	0x00018924
    33a4:	00018ae0 	.word	0x00018ae0
    33a8:	00017dbb 	.word	0x00017dbb
    33ac:	00017dd7 	.word	0x00017dd7

000033b0 <gsm_responseLine_isCallCut>:

bool gsm_responseLine_isCallCut(char *response)
{
    33b0:	b580      	push	{r7, lr}
    33b2:	b082      	sub	sp, #8
    33b4:	af00      	add	r7, sp, #0
    33b6:	6078      	str	r0, [r7, #4]
	if (strstr(response,"NO CARRIER"))
    33b8:	4a16      	ldr	r2, [pc, #88]	; (3414 <gsm_responseLine_isCallCut+0x64>)
    33ba:	687b      	ldr	r3, [r7, #4]
    33bc:	0011      	movs	r1, r2
    33be:	0018      	movs	r0, r3
    33c0:	4b15      	ldr	r3, [pc, #84]	; (3418 <gsm_responseLine_isCallCut+0x68>)
    33c2:	4798      	blx	r3
    33c4:	1e03      	subs	r3, r0, #0
    33c6:	d001      	beq.n	33cc <gsm_responseLine_isCallCut+0x1c>
	{
		return true;
    33c8:	2301      	movs	r3, #1
    33ca:	e01e      	b.n	340a <gsm_responseLine_isCallCut+0x5a>
	}
	else if (strstr(response,"BUSY"))
    33cc:	4a13      	ldr	r2, [pc, #76]	; (341c <gsm_responseLine_isCallCut+0x6c>)
    33ce:	687b      	ldr	r3, [r7, #4]
    33d0:	0011      	movs	r1, r2
    33d2:	0018      	movs	r0, r3
    33d4:	4b10      	ldr	r3, [pc, #64]	; (3418 <gsm_responseLine_isCallCut+0x68>)
    33d6:	4798      	blx	r3
    33d8:	1e03      	subs	r3, r0, #0
    33da:	d001      	beq.n	33e0 <gsm_responseLine_isCallCut+0x30>
	{
		return true;
    33dc:	2301      	movs	r3, #1
    33de:	e014      	b.n	340a <gsm_responseLine_isCallCut+0x5a>
	}
	else if (strstr(response,"NO ANSWER"))
    33e0:	4a0f      	ldr	r2, [pc, #60]	; (3420 <gsm_responseLine_isCallCut+0x70>)
    33e2:	687b      	ldr	r3, [r7, #4]
    33e4:	0011      	movs	r1, r2
    33e6:	0018      	movs	r0, r3
    33e8:	4b0b      	ldr	r3, [pc, #44]	; (3418 <gsm_responseLine_isCallCut+0x68>)
    33ea:	4798      	blx	r3
    33ec:	1e03      	subs	r3, r0, #0
    33ee:	d001      	beq.n	33f4 <gsm_responseLine_isCallCut+0x44>
	{
		return true;
    33f0:	2301      	movs	r3, #1
    33f2:	e00a      	b.n	340a <gsm_responseLine_isCallCut+0x5a>
	}
	else if (strstr(response,"ERROR"))
    33f4:	4a0b      	ldr	r2, [pc, #44]	; (3424 <gsm_responseLine_isCallCut+0x74>)
    33f6:	687b      	ldr	r3, [r7, #4]
    33f8:	0011      	movs	r1, r2
    33fa:	0018      	movs	r0, r3
    33fc:	4b06      	ldr	r3, [pc, #24]	; (3418 <gsm_responseLine_isCallCut+0x68>)
    33fe:	4798      	blx	r3
    3400:	1e03      	subs	r3, r0, #0
    3402:	d001      	beq.n	3408 <gsm_responseLine_isCallCut+0x58>
	{
		return true;
    3404:	2301      	movs	r3, #1
    3406:	e000      	b.n	340a <gsm_responseLine_isCallCut+0x5a>
	}
	else
	{
		return false;
    3408:	2300      	movs	r3, #0
	}
}
    340a:	0018      	movs	r0, r3
    340c:	46bd      	mov	sp, r7
    340e:	b002      	add	sp, #8
    3410:	bd80      	pop	{r7, pc}
    3412:	46c0      	nop			; (mov r8, r8)
    3414:	00018b04 	.word	0x00018b04
    3418:	00017e17 	.word	0x00017e17
    341c:	00018b10 	.word	0x00018b10
    3420:	00018b18 	.word	0x00018b18
    3424:	00018800 	.word	0x00018800

00003428 <gsm_responseLine_isNew_DTMF_Command_Received>:

bool gsm_responseLine_isNew_DTMF_Command_Received(char *response)
{
    3428:	b580      	push	{r7, lr}
    342a:	b082      	sub	sp, #8
    342c:	af00      	add	r7, sp, #0
    342e:	6078      	str	r0, [r7, #4]
	if (strstr(response,"+DTMF:"))
    3430:	4a07      	ldr	r2, [pc, #28]	; (3450 <gsm_responseLine_isNew_DTMF_Command_Received+0x28>)
    3432:	687b      	ldr	r3, [r7, #4]
    3434:	0011      	movs	r1, r2
    3436:	0018      	movs	r0, r3
    3438:	4b06      	ldr	r3, [pc, #24]	; (3454 <gsm_responseLine_isNew_DTMF_Command_Received+0x2c>)
    343a:	4798      	blx	r3
    343c:	1e03      	subs	r3, r0, #0
    343e:	d001      	beq.n	3444 <gsm_responseLine_isNew_DTMF_Command_Received+0x1c>
	{
		return true;
    3440:	2301      	movs	r3, #1
    3442:	e000      	b.n	3446 <gsm_responseLine_isNew_DTMF_Command_Received+0x1e>
	}
	else
	{
		return false;
    3444:	2300      	movs	r3, #0
	}
}
    3446:	0018      	movs	r0, r3
    3448:	46bd      	mov	sp, r7
    344a:	b002      	add	sp, #8
    344c:	bd80      	pop	{r7, pc}
    344e:	46c0      	nop			; (mov r8, r8)
    3450:	00018b24 	.word	0x00018b24
    3454:	00017e17 	.word	0x00017e17

00003458 <gsm_responseLine_is_StopSound_Received>:

bool gsm_responseLine_is_StopSound_Received(char *response)
{
    3458:	b580      	push	{r7, lr}
    345a:	b082      	sub	sp, #8
    345c:	af00      	add	r7, sp, #0
    345e:	6078      	str	r0, [r7, #4]
	if (strstr(response,"+CREC: 0"))
    3460:	4a07      	ldr	r2, [pc, #28]	; (3480 <gsm_responseLine_is_StopSound_Received+0x28>)
    3462:	687b      	ldr	r3, [r7, #4]
    3464:	0011      	movs	r1, r2
    3466:	0018      	movs	r0, r3
    3468:	4b06      	ldr	r3, [pc, #24]	; (3484 <gsm_responseLine_is_StopSound_Received+0x2c>)
    346a:	4798      	blx	r3
    346c:	1e03      	subs	r3, r0, #0
    346e:	d001      	beq.n	3474 <gsm_responseLine_is_StopSound_Received+0x1c>
	{
		return true;
    3470:	2301      	movs	r3, #1
    3472:	e000      	b.n	3476 <gsm_responseLine_is_StopSound_Received+0x1e>
	}
	else
	{
		return false;
    3474:	2300      	movs	r3, #0
	}
}
    3476:	0018      	movs	r0, r3
    3478:	46bd      	mov	sp, r7
    347a:	b002      	add	sp, #8
    347c:	bd80      	pop	{r7, pc}
    347e:	46c0      	nop			; (mov r8, r8)
    3480:	00018b2c 	.word	0x00018b2c
    3484:	00017e17 	.word	0x00017e17

00003488 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3488:	b580      	push	{r7, lr}
    348a:	b084      	sub	sp, #16
    348c:	af00      	add	r7, sp, #0
    348e:	0002      	movs	r2, r0
    3490:	1dfb      	adds	r3, r7, #7
    3492:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3494:	230f      	movs	r3, #15
    3496:	18fb      	adds	r3, r7, r3
    3498:	1dfa      	adds	r2, r7, #7
    349a:	7812      	ldrb	r2, [r2, #0]
    349c:	09d2      	lsrs	r2, r2, #7
    349e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    34a0:	230e      	movs	r3, #14
    34a2:	18fb      	adds	r3, r7, r3
    34a4:	1dfa      	adds	r2, r7, #7
    34a6:	7812      	ldrb	r2, [r2, #0]
    34a8:	0952      	lsrs	r2, r2, #5
    34aa:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    34ac:	4b0d      	ldr	r3, [pc, #52]	; (34e4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    34ae:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    34b0:	230f      	movs	r3, #15
    34b2:	18fb      	adds	r3, r7, r3
    34b4:	781b      	ldrb	r3, [r3, #0]
    34b6:	2b00      	cmp	r3, #0
    34b8:	d10f      	bne.n	34da <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    34ba:	230f      	movs	r3, #15
    34bc:	18fb      	adds	r3, r7, r3
    34be:	781b      	ldrb	r3, [r3, #0]
    34c0:	009b      	lsls	r3, r3, #2
    34c2:	2210      	movs	r2, #16
    34c4:	4694      	mov	ip, r2
    34c6:	44bc      	add	ip, r7
    34c8:	4463      	add	r3, ip
    34ca:	3b08      	subs	r3, #8
    34cc:	681a      	ldr	r2, [r3, #0]
    34ce:	230e      	movs	r3, #14
    34d0:	18fb      	adds	r3, r7, r3
    34d2:	781b      	ldrb	r3, [r3, #0]
    34d4:	01db      	lsls	r3, r3, #7
    34d6:	18d3      	adds	r3, r2, r3
    34d8:	e000      	b.n	34dc <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    34da:	2300      	movs	r3, #0
	}
}
    34dc:	0018      	movs	r0, r3
    34de:	46bd      	mov	sp, r7
    34e0:	b004      	add	sp, #16
    34e2:	bd80      	pop	{r7, pc}
    34e4:	41004400 	.word	0x41004400

000034e8 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    34e8:	b580      	push	{r7, lr}
    34ea:	b082      	sub	sp, #8
    34ec:	af00      	add	r7, sp, #0
    34ee:	0002      	movs	r2, r0
    34f0:	1dfb      	adds	r3, r7, #7
    34f2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    34f4:	1dfb      	adds	r3, r7, #7
    34f6:	781b      	ldrb	r3, [r3, #0]
    34f8:	0018      	movs	r0, r3
    34fa:	4b03      	ldr	r3, [pc, #12]	; (3508 <port_get_group_from_gpio_pin+0x20>)
    34fc:	4798      	blx	r3
    34fe:	0003      	movs	r3, r0
}
    3500:	0018      	movs	r0, r3
    3502:	46bd      	mov	sp, r7
    3504:	b002      	add	sp, #8
    3506:	bd80      	pop	{r7, pc}
    3508:	00003489 	.word	0x00003489

0000350c <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    350c:	b580      	push	{r7, lr}
    350e:	b082      	sub	sp, #8
    3510:	af00      	add	r7, sp, #0
    3512:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    3514:	687b      	ldr	r3, [r7, #4]
    3516:	2200      	movs	r2, #0
    3518:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    351a:	687b      	ldr	r3, [r7, #4]
    351c:	2201      	movs	r2, #1
    351e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    3520:	687b      	ldr	r3, [r7, #4]
    3522:	2200      	movs	r2, #0
    3524:	709a      	strb	r2, [r3, #2]
}
    3526:	46c0      	nop			; (mov r8, r8)
    3528:	46bd      	mov	sp, r7
    352a:	b002      	add	sp, #8
    352c:	bd80      	pop	{r7, pc}
	...

00003530 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    3530:	b580      	push	{r7, lr}
    3532:	b084      	sub	sp, #16
    3534:	af00      	add	r7, sp, #0
    3536:	0002      	movs	r2, r0
    3538:	1dfb      	adds	r3, r7, #7
    353a:	701a      	strb	r2, [r3, #0]
    353c:	1dbb      	adds	r3, r7, #6
    353e:	1c0a      	adds	r2, r1, #0
    3540:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3542:	1dfb      	adds	r3, r7, #7
    3544:	781b      	ldrb	r3, [r3, #0]
    3546:	0018      	movs	r0, r3
    3548:	4b0d      	ldr	r3, [pc, #52]	; (3580 <port_pin_set_output_level+0x50>)
    354a:	4798      	blx	r3
    354c:	0003      	movs	r3, r0
    354e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3550:	1dfb      	adds	r3, r7, #7
    3552:	781b      	ldrb	r3, [r3, #0]
    3554:	221f      	movs	r2, #31
    3556:	4013      	ands	r3, r2
    3558:	2201      	movs	r2, #1
    355a:	409a      	lsls	r2, r3
    355c:	0013      	movs	r3, r2
    355e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    3560:	1dbb      	adds	r3, r7, #6
    3562:	781b      	ldrb	r3, [r3, #0]
    3564:	2b00      	cmp	r3, #0
    3566:	d003      	beq.n	3570 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3568:	68fb      	ldr	r3, [r7, #12]
    356a:	68ba      	ldr	r2, [r7, #8]
    356c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    356e:	e002      	b.n	3576 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    3570:	68fb      	ldr	r3, [r7, #12]
    3572:	68ba      	ldr	r2, [r7, #8]
    3574:	615a      	str	r2, [r3, #20]
}
    3576:	46c0      	nop			; (mov r8, r8)
    3578:	46bd      	mov	sp, r7
    357a:	b004      	add	sp, #16
    357c:	bd80      	pop	{r7, pc}
    357e:	46c0      	nop			; (mov r8, r8)
    3580:	000034e9 	.word	0x000034e9

00003584 <LCD_init>:
#include <asf.h>
#include "lcd_driver.h"


void LCD_init()
{
    3584:	b5f0      	push	{r4, r5, r6, r7, lr}
    3586:	b08b      	sub	sp, #44	; 0x2c
    3588:	af00      	add	r7, sp, #0
	uint8_t cols = LCD_COLS;
    358a:	230b      	movs	r3, #11
    358c:	2218      	movs	r2, #24
    358e:	4694      	mov	ip, r2
    3590:	44bc      	add	ip, r7
    3592:	4463      	add	r3, ip
    3594:	2210      	movs	r2, #16
    3596:	701a      	strb	r2, [r3, #0]
	uint8_t lines = LCD_ROWS;
    3598:	230a      	movs	r3, #10
    359a:	2218      	movs	r2, #24
    359c:	4694      	mov	ip, r2
    359e:	44bc      	add	ip, r7
    35a0:	4463      	add	r3, ip
    35a2:	2202      	movs	r2, #2
    35a4:	701a      	strb	r2, [r3, #0]
	delay_init();
    35a6:	4b90      	ldr	r3, [pc, #576]	; (37e8 <LCD_init+0x264>)
    35a8:	4798      	blx	r3
	_rs_pin     = LCD_RS_PIN;
    35aa:	4b90      	ldr	r3, [pc, #576]	; (37ec <LCD_init+0x268>)
    35ac:	223f      	movs	r2, #63	; 0x3f
    35ae:	701a      	strb	r2, [r3, #0]
	_enable_pin = LCD_EN_PIN;
    35b0:	4b8f      	ldr	r3, [pc, #572]	; (37f0 <LCD_init+0x26c>)
    35b2:	223e      	movs	r2, #62	; 0x3e
    35b4:	701a      	strb	r2, [r3, #0]
	
	_data_pins[0] = LCD_DATA_LINE_D4_PIN;
    35b6:	4b8f      	ldr	r3, [pc, #572]	; (37f4 <LCD_init+0x270>)
    35b8:	2221      	movs	r2, #33	; 0x21
    35ba:	701a      	strb	r2, [r3, #0]
	_data_pins[1] = LCD_DATA_LINE_D5_PIN;
    35bc:	4b8d      	ldr	r3, [pc, #564]	; (37f4 <LCD_init+0x270>)
    35be:	2220      	movs	r2, #32
    35c0:	705a      	strb	r2, [r3, #1]
	_data_pins[2] = LCD_DATA_LINE_D6_PIN;
    35c2:	4b8c      	ldr	r3, [pc, #560]	; (37f4 <LCD_init+0x270>)
    35c4:	2223      	movs	r2, #35	; 0x23
    35c6:	709a      	strb	r2, [r3, #2]
	_data_pins[3] = LCD_DATA_LINE_D7_PIN;
    35c8:	4b8a      	ldr	r3, [pc, #552]	; (37f4 <LCD_init+0x270>)
    35ca:	2222      	movs	r2, #34	; 0x22
    35cc:	70da      	strb	r2, [r3, #3]

	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    35ce:	4b8a      	ldr	r3, [pc, #552]	; (37f8 <LCD_init+0x274>)
    35d0:	2200      	movs	r2, #0
    35d2:	701a      	strb	r2, [r3, #0]
	
	if (lines > 1)
    35d4:	230a      	movs	r3, #10
    35d6:	2218      	movs	r2, #24
    35d8:	4694      	mov	ip, r2
    35da:	44bc      	add	ip, r7
    35dc:	4463      	add	r3, ip
    35de:	781b      	ldrb	r3, [r3, #0]
    35e0:	2b01      	cmp	r3, #1
    35e2:	d906      	bls.n	35f2 <LCD_init+0x6e>
	{
		_displayfunction |= LCD_2LINE;
    35e4:	4b84      	ldr	r3, [pc, #528]	; (37f8 <LCD_init+0x274>)
    35e6:	781b      	ldrb	r3, [r3, #0]
    35e8:	2208      	movs	r2, #8
    35ea:	4313      	orrs	r3, r2
    35ec:	b2da      	uxtb	r2, r3
    35ee:	4b82      	ldr	r3, [pc, #520]	; (37f8 <LCD_init+0x274>)
    35f0:	701a      	strb	r2, [r3, #0]
	}
	_numlines = lines;
    35f2:	4b82      	ldr	r3, [pc, #520]	; (37fc <LCD_init+0x278>)
    35f4:	220a      	movs	r2, #10
    35f6:	2118      	movs	r1, #24
    35f8:	468c      	mov	ip, r1
    35fa:	44bc      	add	ip, r7
    35fc:	4462      	add	r2, ip
    35fe:	7812      	ldrb	r2, [r2, #0]
    3600:	701a      	strb	r2, [r3, #0]
	LCD_setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
    3602:	230b      	movs	r3, #11
    3604:	2218      	movs	r2, #24
    3606:	4694      	mov	ip, r2
    3608:	44bc      	add	ip, r7
    360a:	4463      	add	r3, ip
    360c:	781a      	ldrb	r2, [r3, #0]
    360e:	230b      	movs	r3, #11
    3610:	2118      	movs	r1, #24
    3612:	468c      	mov	ip, r1
    3614:	44bc      	add	ip, r7
    3616:	4463      	add	r3, ip
    3618:	781b      	ldrb	r3, [r3, #0]
    361a:	3340      	adds	r3, #64	; 0x40
    361c:	2140      	movs	r1, #64	; 0x40
    361e:	2000      	movs	r0, #0
    3620:	4c77      	ldr	r4, [pc, #476]	; (3800 <LCD_init+0x27c>)
    3622:	47a0      	blx	r4
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    3624:	231c      	movs	r3, #28
    3626:	18fb      	adds	r3, r7, r3
    3628:	0018      	movs	r0, r3
    362a:	4b76      	ldr	r3, [pc, #472]	; (3804 <LCD_init+0x280>)
    362c:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    362e:	231c      	movs	r3, #28
    3630:	18fb      	adds	r3, r7, r3
    3632:	2201      	movs	r2, #1
    3634:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(_rs_pin,&config_port_pin);
    3636:	4b6d      	ldr	r3, [pc, #436]	; (37ec <LCD_init+0x268>)
    3638:	781b      	ldrb	r3, [r3, #0]
    363a:	221c      	movs	r2, #28
    363c:	18ba      	adds	r2, r7, r2
    363e:	0011      	movs	r1, r2
    3640:	0018      	movs	r0, r3
    3642:	4b71      	ldr	r3, [pc, #452]	; (3808 <LCD_init+0x284>)
    3644:	4798      	blx	r3
	port_pin_set_config(_enable_pin,&config_port_pin);
    3646:	4b6a      	ldr	r3, [pc, #424]	; (37f0 <LCD_init+0x26c>)
    3648:	781b      	ldrb	r3, [r3, #0]
    364a:	221c      	movs	r2, #28
    364c:	18ba      	adds	r2, r7, r2
    364e:	0011      	movs	r1, r2
    3650:	0018      	movs	r0, r3
    3652:	4b6d      	ldr	r3, [pc, #436]	; (3808 <LCD_init+0x284>)
    3654:	4798      	blx	r3
	//port_pin_set_config(LCD_BACKLIGHT,&config_port_pin);
	
	for (int i=0; i<4; ++i)
    3656:	2300      	movs	r3, #0
    3658:	627b      	str	r3, [r7, #36]	; 0x24
    365a:	e00c      	b.n	3676 <LCD_init+0xf2>
	{
		port_pin_set_config(_data_pins[i],&config_port_pin);
    365c:	4a65      	ldr	r2, [pc, #404]	; (37f4 <LCD_init+0x270>)
    365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3660:	18d3      	adds	r3, r2, r3
    3662:	781b      	ldrb	r3, [r3, #0]
    3664:	221c      	movs	r2, #28
    3666:	18ba      	adds	r2, r7, r2
    3668:	0011      	movs	r1, r2
    366a:	0018      	movs	r0, r3
    366c:	4b66      	ldr	r3, [pc, #408]	; (3808 <LCD_init+0x284>)
    366e:	4798      	blx	r3
	for (int i=0; i<4; ++i)
    3670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3672:	3301      	adds	r3, #1
    3674:	627b      	str	r3, [r7, #36]	; 0x24
    3676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3678:	2b03      	cmp	r3, #3
    367a:	ddef      	ble.n	365c <LCD_init+0xd8>
	}
	delay_us(50000);
    367c:	2000      	movs	r0, #0
    367e:	4b63      	ldr	r3, [pc, #396]	; (380c <LCD_init+0x288>)
    3680:	4798      	blx	r3
    3682:	0003      	movs	r3, r0
    3684:	613b      	str	r3, [r7, #16]
    3686:	2300      	movs	r3, #0
    3688:	617b      	str	r3, [r7, #20]
    368a:	4c61      	ldr	r4, [pc, #388]	; (3810 <LCD_init+0x28c>)
    368c:	4a61      	ldr	r2, [pc, #388]	; (3814 <LCD_init+0x290>)
    368e:	2300      	movs	r3, #0
    3690:	6938      	ldr	r0, [r7, #16]
    3692:	6979      	ldr	r1, [r7, #20]
    3694:	47a0      	blx	r4
    3696:	0003      	movs	r3, r0
    3698:	000c      	movs	r4, r1
    369a:	0019      	movs	r1, r3
    369c:	0022      	movs	r2, r4
    369e:	4b5e      	ldr	r3, [pc, #376]	; (3818 <LCD_init+0x294>)
    36a0:	2400      	movs	r4, #0
    36a2:	18c9      	adds	r1, r1, r3
    36a4:	4162      	adcs	r2, r4
    36a6:	0008      	movs	r0, r1
    36a8:	0011      	movs	r1, r2
    36aa:	4c5c      	ldr	r4, [pc, #368]	; (381c <LCD_init+0x298>)
    36ac:	4a5c      	ldr	r2, [pc, #368]	; (3820 <LCD_init+0x29c>)
    36ae:	2300      	movs	r3, #0
    36b0:	47a0      	blx	r4
    36b2:	0003      	movs	r3, r0
    36b4:	000c      	movs	r4, r1
    36b6:	0018      	movs	r0, r3
    36b8:	4b5a      	ldr	r3, [pc, #360]	; (3824 <LCD_init+0x2a0>)
    36ba:	4798      	blx	r3
	port_pin_set_output_level(_rs_pin,LOW);
    36bc:	4b4b      	ldr	r3, [pc, #300]	; (37ec <LCD_init+0x268>)
    36be:	781b      	ldrb	r3, [r3, #0]
    36c0:	2100      	movs	r1, #0
    36c2:	0018      	movs	r0, r3
    36c4:	4b58      	ldr	r3, [pc, #352]	; (3828 <LCD_init+0x2a4>)
    36c6:	4798      	blx	r3
	port_pin_set_output_level(_enable_pin,LOW);
    36c8:	4b49      	ldr	r3, [pc, #292]	; (37f0 <LCD_init+0x26c>)
    36ca:	781b      	ldrb	r3, [r3, #0]
    36cc:	2100      	movs	r1, #0
    36ce:	0018      	movs	r0, r3
    36d0:	4b55      	ldr	r3, [pc, #340]	; (3828 <LCD_init+0x2a4>)
    36d2:	4798      	blx	r3
	//port_pin_set_output_level(LCD_BACKLIGHT,LOW);
	
	 write4bits(0x03);
    36d4:	2003      	movs	r0, #3
    36d6:	4b55      	ldr	r3, [pc, #340]	; (382c <LCD_init+0x2a8>)
    36d8:	4798      	blx	r3
	 delay_us(4500); 
    36da:	2000      	movs	r0, #0
    36dc:	4b4b      	ldr	r3, [pc, #300]	; (380c <LCD_init+0x288>)
    36de:	4798      	blx	r3
    36e0:	0003      	movs	r3, r0
    36e2:	60bb      	str	r3, [r7, #8]
    36e4:	2300      	movs	r3, #0
    36e6:	60fb      	str	r3, [r7, #12]
    36e8:	4c49      	ldr	r4, [pc, #292]	; (3810 <LCD_init+0x28c>)
    36ea:	4a51      	ldr	r2, [pc, #324]	; (3830 <LCD_init+0x2ac>)
    36ec:	2300      	movs	r3, #0
    36ee:	68b8      	ldr	r0, [r7, #8]
    36f0:	68f9      	ldr	r1, [r7, #12]
    36f2:	47a0      	blx	r4
    36f4:	0003      	movs	r3, r0
    36f6:	000c      	movs	r4, r1
    36f8:	0019      	movs	r1, r3
    36fa:	0022      	movs	r2, r4
    36fc:	4b46      	ldr	r3, [pc, #280]	; (3818 <LCD_init+0x294>)
    36fe:	2400      	movs	r4, #0
    3700:	18c9      	adds	r1, r1, r3
    3702:	4162      	adcs	r2, r4
    3704:	0008      	movs	r0, r1
    3706:	0011      	movs	r1, r2
    3708:	4c44      	ldr	r4, [pc, #272]	; (381c <LCD_init+0x298>)
    370a:	4a45      	ldr	r2, [pc, #276]	; (3820 <LCD_init+0x29c>)
    370c:	2300      	movs	r3, #0
    370e:	47a0      	blx	r4
    3710:	0003      	movs	r3, r0
    3712:	000c      	movs	r4, r1
    3714:	0018      	movs	r0, r3
    3716:	4b43      	ldr	r3, [pc, #268]	; (3824 <LCD_init+0x2a0>)
    3718:	4798      	blx	r3
	 
	 write4bits(0x03);
    371a:	2003      	movs	r0, #3
    371c:	4b43      	ldr	r3, [pc, #268]	; (382c <LCD_init+0x2a8>)
    371e:	4798      	blx	r3
	 delay_us(4500); 
    3720:	2000      	movs	r0, #0
    3722:	4b3a      	ldr	r3, [pc, #232]	; (380c <LCD_init+0x288>)
    3724:	4798      	blx	r3
    3726:	0003      	movs	r3, r0
    3728:	603b      	str	r3, [r7, #0]
    372a:	2300      	movs	r3, #0
    372c:	607b      	str	r3, [r7, #4]
    372e:	4c38      	ldr	r4, [pc, #224]	; (3810 <LCD_init+0x28c>)
    3730:	4a3f      	ldr	r2, [pc, #252]	; (3830 <LCD_init+0x2ac>)
    3732:	2300      	movs	r3, #0
    3734:	6838      	ldr	r0, [r7, #0]
    3736:	6879      	ldr	r1, [r7, #4]
    3738:	47a0      	blx	r4
    373a:	0003      	movs	r3, r0
    373c:	000c      	movs	r4, r1
    373e:	0019      	movs	r1, r3
    3740:	0022      	movs	r2, r4
    3742:	4b35      	ldr	r3, [pc, #212]	; (3818 <LCD_init+0x294>)
    3744:	2400      	movs	r4, #0
    3746:	18c9      	adds	r1, r1, r3
    3748:	4162      	adcs	r2, r4
    374a:	0008      	movs	r0, r1
    374c:	0011      	movs	r1, r2
    374e:	4c33      	ldr	r4, [pc, #204]	; (381c <LCD_init+0x298>)
    3750:	4a33      	ldr	r2, [pc, #204]	; (3820 <LCD_init+0x29c>)
    3752:	2300      	movs	r3, #0
    3754:	47a0      	blx	r4
    3756:	0003      	movs	r3, r0
    3758:	000c      	movs	r4, r1
    375a:	0018      	movs	r0, r3
    375c:	4b31      	ldr	r3, [pc, #196]	; (3824 <LCD_init+0x2a0>)
    375e:	4798      	blx	r3
	
	 write4bits(0x03);
    3760:	2003      	movs	r0, #3
    3762:	4b32      	ldr	r3, [pc, #200]	; (382c <LCD_init+0x2a8>)
    3764:	4798      	blx	r3
	 delay_us(150);
    3766:	2000      	movs	r0, #0
    3768:	4b28      	ldr	r3, [pc, #160]	; (380c <LCD_init+0x288>)
    376a:	4798      	blx	r3
    376c:	0003      	movs	r3, r0
    376e:	001d      	movs	r5, r3
    3770:	2300      	movs	r3, #0
    3772:	001e      	movs	r6, r3
    3774:	4c26      	ldr	r4, [pc, #152]	; (3810 <LCD_init+0x28c>)
    3776:	2296      	movs	r2, #150	; 0x96
    3778:	2300      	movs	r3, #0
    377a:	0028      	movs	r0, r5
    377c:	0031      	movs	r1, r6
    377e:	47a0      	blx	r4
    3780:	0003      	movs	r3, r0
    3782:	000c      	movs	r4, r1
    3784:	0019      	movs	r1, r3
    3786:	0022      	movs	r2, r4
    3788:	4b23      	ldr	r3, [pc, #140]	; (3818 <LCD_init+0x294>)
    378a:	2400      	movs	r4, #0
    378c:	18c9      	adds	r1, r1, r3
    378e:	4162      	adcs	r2, r4
    3790:	0008      	movs	r0, r1
    3792:	0011      	movs	r1, r2
    3794:	4c21      	ldr	r4, [pc, #132]	; (381c <LCD_init+0x298>)
    3796:	4a22      	ldr	r2, [pc, #136]	; (3820 <LCD_init+0x29c>)
    3798:	2300      	movs	r3, #0
    379a:	47a0      	blx	r4
    379c:	0003      	movs	r3, r0
    379e:	000c      	movs	r4, r1
    37a0:	0018      	movs	r0, r3
    37a2:	4b20      	ldr	r3, [pc, #128]	; (3824 <LCD_init+0x2a0>)
    37a4:	4798      	blx	r3

	 write4bits(0x02);
    37a6:	2002      	movs	r0, #2
    37a8:	4b20      	ldr	r3, [pc, #128]	; (382c <LCD_init+0x2a8>)
    37aa:	4798      	blx	r3

	 command(LCD_FUNCTIONSET | _displayfunction);
    37ac:	4b12      	ldr	r3, [pc, #72]	; (37f8 <LCD_init+0x274>)
    37ae:	781b      	ldrb	r3, [r3, #0]
    37b0:	2220      	movs	r2, #32
    37b2:	4313      	orrs	r3, r2
    37b4:	b2db      	uxtb	r3, r3
    37b6:	0018      	movs	r0, r3
    37b8:	4b1e      	ldr	r3, [pc, #120]	; (3834 <LCD_init+0x2b0>)
    37ba:	4798      	blx	r3
	 
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    37bc:	4b1e      	ldr	r3, [pc, #120]	; (3838 <LCD_init+0x2b4>)
    37be:	2204      	movs	r2, #4
    37c0:	701a      	strb	r2, [r3, #0]
	LCD_display();
    37c2:	4b1e      	ldr	r3, [pc, #120]	; (383c <LCD_init+0x2b8>)
    37c4:	4798      	blx	r3
	LCD_clear();
    37c6:	4b1e      	ldr	r3, [pc, #120]	; (3840 <LCD_init+0x2bc>)
    37c8:	4798      	blx	r3
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    37ca:	4b1e      	ldr	r3, [pc, #120]	; (3844 <LCD_init+0x2c0>)
    37cc:	2202      	movs	r2, #2
    37ce:	701a      	strb	r2, [r3, #0]
	command(LCD_ENTRYMODESET | _displaymode);
    37d0:	4b1c      	ldr	r3, [pc, #112]	; (3844 <LCD_init+0x2c0>)
    37d2:	781b      	ldrb	r3, [r3, #0]
    37d4:	2204      	movs	r2, #4
    37d6:	4313      	orrs	r3, r2
    37d8:	b2db      	uxtb	r3, r3
    37da:	0018      	movs	r0, r3
    37dc:	4b15      	ldr	r3, [pc, #84]	; (3834 <LCD_init+0x2b0>)
    37de:	4798      	blx	r3
}
    37e0:	46c0      	nop			; (mov r8, r8)
    37e2:	46bd      	mov	sp, r7
    37e4:	b00b      	add	sp, #44	; 0x2c
    37e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    37e8:	00011715 	.word	0x00011715
    37ec:	200006c3 	.word	0x200006c3
    37f0:	200006c2 	.word	0x200006c2
    37f4:	200006bc 	.word	0x200006bc
    37f8:	200006c1 	.word	0x200006c1
    37fc:	200006ba 	.word	0x200006ba
    3800:	000038f5 	.word	0x000038f5
    3804:	0000350d 	.word	0x0000350d
    3808:	00011d69 	.word	0x00011d69
    380c:	000136d5 	.word	0x000136d5
    3810:	00015689 	.word	0x00015689
    3814:	0000c350 	.word	0x0000c350
    3818:	006acfbf 	.word	0x006acfbf
    381c:	00015649 	.word	0x00015649
    3820:	006acfc0 	.word	0x006acfc0
    3824:	20000001 	.word	0x20000001
    3828:	00003531 	.word	0x00003531
    382c:	00003931 	.word	0x00003931
    3830:	00001194 	.word	0x00001194
    3834:	00003a75 	.word	0x00003a75
    3838:	200006b9 	.word	0x200006b9
    383c:	00003c5d 	.word	0x00003c5d
    3840:	00003b15 	.word	0x00003b15
    3844:	200006c0 	.word	0x200006c0

00003848 <LCD_PWR_CONFIG>:

void LCD_PWR_CONFIG()
{
    3848:	b580      	push	{r7, lr}
    384a:	b082      	sub	sp, #8
    384c:	af00      	add	r7, sp, #0
	struct port_config pin_conf_gsm_status;
	port_get_config_defaults(&pin_conf_gsm_status);
    384e:	1d3b      	adds	r3, r7, #4
    3850:	0018      	movs	r0, r3
    3852:	4b08      	ldr	r3, [pc, #32]	; (3874 <LCD_PWR_CONFIG+0x2c>)
    3854:	4798      	blx	r3
	pin_conf_gsm_status.direction  = PORT_PIN_DIR_OUTPUT;
    3856:	1d3b      	adds	r3, r7, #4
    3858:	2201      	movs	r2, #1
    385a:	701a      	strb	r2, [r3, #0]
	pin_conf_gsm_status.input_pull = PORT_PIN_PULL_NONE;
    385c:	1d3b      	adds	r3, r7, #4
    385e:	2200      	movs	r2, #0
    3860:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(LCD_PWR_CNTRL, &pin_conf_gsm_status);
    3862:	1d3b      	adds	r3, r7, #4
    3864:	0019      	movs	r1, r3
    3866:	2024      	movs	r0, #36	; 0x24
    3868:	4b03      	ldr	r3, [pc, #12]	; (3878 <LCD_PWR_CONFIG+0x30>)
    386a:	4798      	blx	r3
}
    386c:	46c0      	nop			; (mov r8, r8)
    386e:	46bd      	mov	sp, r7
    3870:	b002      	add	sp, #8
    3872:	bd80      	pop	{r7, pc}
    3874:	0000350d 	.word	0x0000350d
    3878:	00011d69 	.word	0x00011d69

0000387c <LCD_PWR_EN>:

void LCD_PWR_EN()
{
    387c:	b580      	push	{r7, lr}
    387e:	af00      	add	r7, sp, #0
	port_pin_set_output_level(LCD_PWR_CNTRL,HIGH);
    3880:	2101      	movs	r1, #1
    3882:	2024      	movs	r0, #36	; 0x24
    3884:	4b02      	ldr	r3, [pc, #8]	; (3890 <LCD_PWR_EN+0x14>)
    3886:	4798      	blx	r3
}
    3888:	46c0      	nop			; (mov r8, r8)
    388a:	46bd      	mov	sp, r7
    388c:	bd80      	pop	{r7, pc}
    388e:	46c0      	nop			; (mov r8, r8)
    3890:	00003531 	.word	0x00003531

00003894 <LCD_PWR_DIS>:
void LCD_PWR_DIS()
{
    3894:	b580      	push	{r7, lr}
    3896:	b082      	sub	sp, #8
    3898:	af00      	add	r7, sp, #0
	port_pin_set_output_level(LCD_PWR_CNTRL,LOW);
    389a:	2100      	movs	r1, #0
    389c:	2024      	movs	r0, #36	; 0x24
    389e:	4b11      	ldr	r3, [pc, #68]	; (38e4 <LCD_PWR_DIS+0x50>)
    38a0:	4798      	blx	r3
	
	for (int i = 0; i < 4; i++)
    38a2:	2300      	movs	r3, #0
    38a4:	607b      	str	r3, [r7, #4]
    38a6:	e00a      	b.n	38be <LCD_PWR_DIS+0x2a>
	{
		port_pin_set_output_level(_data_pins[i],LOW);
    38a8:	4a0f      	ldr	r2, [pc, #60]	; (38e8 <LCD_PWR_DIS+0x54>)
    38aa:	687b      	ldr	r3, [r7, #4]
    38ac:	18d3      	adds	r3, r2, r3
    38ae:	781b      	ldrb	r3, [r3, #0]
    38b0:	2100      	movs	r1, #0
    38b2:	0018      	movs	r0, r3
    38b4:	4b0b      	ldr	r3, [pc, #44]	; (38e4 <LCD_PWR_DIS+0x50>)
    38b6:	4798      	blx	r3
	for (int i = 0; i < 4; i++)
    38b8:	687b      	ldr	r3, [r7, #4]
    38ba:	3301      	adds	r3, #1
    38bc:	607b      	str	r3, [r7, #4]
    38be:	687b      	ldr	r3, [r7, #4]
    38c0:	2b03      	cmp	r3, #3
    38c2:	ddf1      	ble.n	38a8 <LCD_PWR_DIS+0x14>
	}
	
	port_pin_set_output_level(_enable_pin, LOW);
    38c4:	4b09      	ldr	r3, [pc, #36]	; (38ec <LCD_PWR_DIS+0x58>)
    38c6:	781b      	ldrb	r3, [r3, #0]
    38c8:	2100      	movs	r1, #0
    38ca:	0018      	movs	r0, r3
    38cc:	4b05      	ldr	r3, [pc, #20]	; (38e4 <LCD_PWR_DIS+0x50>)
    38ce:	4798      	blx	r3
	
	port_pin_set_output_level(_rs_pin, LOW);
    38d0:	4b07      	ldr	r3, [pc, #28]	; (38f0 <LCD_PWR_DIS+0x5c>)
    38d2:	781b      	ldrb	r3, [r3, #0]
    38d4:	2100      	movs	r1, #0
    38d6:	0018      	movs	r0, r3
    38d8:	4b02      	ldr	r3, [pc, #8]	; (38e4 <LCD_PWR_DIS+0x50>)
    38da:	4798      	blx	r3
	
}
    38dc:	46c0      	nop			; (mov r8, r8)
    38de:	46bd      	mov	sp, r7
    38e0:	b002      	add	sp, #8
    38e2:	bd80      	pop	{r7, pc}
    38e4:	00003531 	.word	0x00003531
    38e8:	200006bc 	.word	0x200006bc
    38ec:	200006c2 	.word	0x200006c2
    38f0:	200006c3 	.word	0x200006c3

000038f4 <LCD_setRowOffsets>:

void LCD_setRowOffsets(int row0, int row1, int row2, int row3)
{
    38f4:	b580      	push	{r7, lr}
    38f6:	b084      	sub	sp, #16
    38f8:	af00      	add	r7, sp, #0
    38fa:	60f8      	str	r0, [r7, #12]
    38fc:	60b9      	str	r1, [r7, #8]
    38fe:	607a      	str	r2, [r7, #4]
    3900:	603b      	str	r3, [r7, #0]
	_row_offsets[0] = row0;
    3902:	68fb      	ldr	r3, [r7, #12]
    3904:	b2da      	uxtb	r2, r3
    3906:	4b09      	ldr	r3, [pc, #36]	; (392c <LCD_setRowOffsets+0x38>)
    3908:	701a      	strb	r2, [r3, #0]
	_row_offsets[1] = row1;
    390a:	68bb      	ldr	r3, [r7, #8]
    390c:	b2da      	uxtb	r2, r3
    390e:	4b07      	ldr	r3, [pc, #28]	; (392c <LCD_setRowOffsets+0x38>)
    3910:	705a      	strb	r2, [r3, #1]
	_row_offsets[2] = row2;
    3912:	687b      	ldr	r3, [r7, #4]
    3914:	b2da      	uxtb	r2, r3
    3916:	4b05      	ldr	r3, [pc, #20]	; (392c <LCD_setRowOffsets+0x38>)
    3918:	709a      	strb	r2, [r3, #2]
	_row_offsets[3] = row3;
    391a:	683b      	ldr	r3, [r7, #0]
    391c:	b2da      	uxtb	r2, r3
    391e:	4b03      	ldr	r3, [pc, #12]	; (392c <LCD_setRowOffsets+0x38>)
    3920:	70da      	strb	r2, [r3, #3]
}
    3922:	46c0      	nop			; (mov r8, r8)
    3924:	46bd      	mov	sp, r7
    3926:	b004      	add	sp, #16
    3928:	bd80      	pop	{r7, pc}
    392a:	46c0      	nop			; (mov r8, r8)
    392c:	200006b4 	.word	0x200006b4

00003930 <write4bits>:

void write4bits(uint8_t value)
{
    3930:	b580      	push	{r7, lr}
    3932:	b084      	sub	sp, #16
    3934:	af00      	add	r7, sp, #0
    3936:	0002      	movs	r2, r0
    3938:	1dfb      	adds	r3, r7, #7
    393a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++) 
    393c:	2300      	movs	r3, #0
    393e:	60fb      	str	r3, [r7, #12]
    3940:	e013      	b.n	396a <write4bits+0x3a>
	{
		port_pin_set_output_level(_data_pins[i], (value >> i) & 0x01);
    3942:	4a0e      	ldr	r2, [pc, #56]	; (397c <write4bits+0x4c>)
    3944:	68fb      	ldr	r3, [r7, #12]
    3946:	18d3      	adds	r3, r2, r3
    3948:	7818      	ldrb	r0, [r3, #0]
    394a:	1dfb      	adds	r3, r7, #7
    394c:	781a      	ldrb	r2, [r3, #0]
    394e:	68fb      	ldr	r3, [r7, #12]
    3950:	411a      	asrs	r2, r3
    3952:	0013      	movs	r3, r2
    3954:	2201      	movs	r2, #1
    3956:	4013      	ands	r3, r2
    3958:	1e5a      	subs	r2, r3, #1
    395a:	4193      	sbcs	r3, r2
    395c:	b2db      	uxtb	r3, r3
    395e:	0019      	movs	r1, r3
    3960:	4b07      	ldr	r3, [pc, #28]	; (3980 <write4bits+0x50>)
    3962:	4798      	blx	r3
	for (int i = 0; i < 4; i++) 
    3964:	68fb      	ldr	r3, [r7, #12]
    3966:	3301      	adds	r3, #1
    3968:	60fb      	str	r3, [r7, #12]
    396a:	68fb      	ldr	r3, [r7, #12]
    396c:	2b03      	cmp	r3, #3
    396e:	dde8      	ble.n	3942 <write4bits+0x12>
	}
	pulseEnable();
    3970:	4b04      	ldr	r3, [pc, #16]	; (3984 <write4bits+0x54>)
    3972:	4798      	blx	r3
}
    3974:	46c0      	nop			; (mov r8, r8)
    3976:	46bd      	mov	sp, r7
    3978:	b004      	add	sp, #16
    397a:	bd80      	pop	{r7, pc}
    397c:	200006bc 	.word	0x200006bc
    3980:	00003531 	.word	0x00003531
    3984:	00003989 	.word	0x00003989

00003988 <pulseEnable>:



void pulseEnable(void)
{
    3988:	b5f0      	push	{r4, r5, r6, r7, lr}
    398a:	b085      	sub	sp, #20
    398c:	af00      	add	r7, sp, #0
 	port_pin_set_output_level(_enable_pin, LOW);
    398e:	4b31      	ldr	r3, [pc, #196]	; (3a54 <pulseEnable+0xcc>)
    3990:	781b      	ldrb	r3, [r3, #0]
    3992:	2100      	movs	r1, #0
    3994:	0018      	movs	r0, r3
    3996:	4b30      	ldr	r3, [pc, #192]	; (3a58 <pulseEnable+0xd0>)
    3998:	4798      	blx	r3
 	delay_us(1);
    399a:	2000      	movs	r0, #0
    399c:	4b2f      	ldr	r3, [pc, #188]	; (3a5c <pulseEnable+0xd4>)
    399e:	4798      	blx	r3
    39a0:	0003      	movs	r3, r0
    39a2:	60bb      	str	r3, [r7, #8]
    39a4:	2300      	movs	r3, #0
    39a6:	60fb      	str	r3, [r7, #12]
    39a8:	4b2d      	ldr	r3, [pc, #180]	; (3a60 <pulseEnable+0xd8>)
    39aa:	2400      	movs	r4, #0
    39ac:	68b8      	ldr	r0, [r7, #8]
    39ae:	68f9      	ldr	r1, [r7, #12]
    39b0:	18c0      	adds	r0, r0, r3
    39b2:	4161      	adcs	r1, r4
    39b4:	4c2b      	ldr	r4, [pc, #172]	; (3a64 <pulseEnable+0xdc>)
    39b6:	4a2c      	ldr	r2, [pc, #176]	; (3a68 <pulseEnable+0xe0>)
    39b8:	2300      	movs	r3, #0
    39ba:	47a0      	blx	r4
    39bc:	0003      	movs	r3, r0
    39be:	000c      	movs	r4, r1
    39c0:	0018      	movs	r0, r3
    39c2:	4b2a      	ldr	r3, [pc, #168]	; (3a6c <pulseEnable+0xe4>)
    39c4:	4798      	blx	r3
 	port_pin_set_output_level(_enable_pin, HIGH);
    39c6:	4b23      	ldr	r3, [pc, #140]	; (3a54 <pulseEnable+0xcc>)
    39c8:	781b      	ldrb	r3, [r3, #0]
    39ca:	2101      	movs	r1, #1
    39cc:	0018      	movs	r0, r3
    39ce:	4b22      	ldr	r3, [pc, #136]	; (3a58 <pulseEnable+0xd0>)
    39d0:	4798      	blx	r3
 	delay_us(1);
    39d2:	2000      	movs	r0, #0
    39d4:	4b21      	ldr	r3, [pc, #132]	; (3a5c <pulseEnable+0xd4>)
    39d6:	4798      	blx	r3
    39d8:	0003      	movs	r3, r0
    39da:	001d      	movs	r5, r3
    39dc:	2300      	movs	r3, #0
    39de:	001e      	movs	r6, r3
    39e0:	4b1f      	ldr	r3, [pc, #124]	; (3a60 <pulseEnable+0xd8>)
    39e2:	2400      	movs	r4, #0
    39e4:	0028      	movs	r0, r5
    39e6:	0031      	movs	r1, r6
    39e8:	18c0      	adds	r0, r0, r3
    39ea:	4161      	adcs	r1, r4
    39ec:	4c1d      	ldr	r4, [pc, #116]	; (3a64 <pulseEnable+0xdc>)
    39ee:	4a1e      	ldr	r2, [pc, #120]	; (3a68 <pulseEnable+0xe0>)
    39f0:	2300      	movs	r3, #0
    39f2:	47a0      	blx	r4
    39f4:	0003      	movs	r3, r0
    39f6:	000c      	movs	r4, r1
    39f8:	0018      	movs	r0, r3
    39fa:	4b1c      	ldr	r3, [pc, #112]	; (3a6c <pulseEnable+0xe4>)
    39fc:	4798      	blx	r3
 	port_pin_set_output_level(_enable_pin, LOW);
    39fe:	4b15      	ldr	r3, [pc, #84]	; (3a54 <pulseEnable+0xcc>)
    3a00:	781b      	ldrb	r3, [r3, #0]
    3a02:	2100      	movs	r1, #0
    3a04:	0018      	movs	r0, r3
    3a06:	4b14      	ldr	r3, [pc, #80]	; (3a58 <pulseEnable+0xd0>)
    3a08:	4798      	blx	r3
 	delay_us(100);
    3a0a:	2000      	movs	r0, #0
    3a0c:	4b13      	ldr	r3, [pc, #76]	; (3a5c <pulseEnable+0xd4>)
    3a0e:	4798      	blx	r3
    3a10:	0003      	movs	r3, r0
    3a12:	603b      	str	r3, [r7, #0]
    3a14:	2300      	movs	r3, #0
    3a16:	607b      	str	r3, [r7, #4]
    3a18:	4c15      	ldr	r4, [pc, #84]	; (3a70 <pulseEnable+0xe8>)
    3a1a:	2264      	movs	r2, #100	; 0x64
    3a1c:	2300      	movs	r3, #0
    3a1e:	6838      	ldr	r0, [r7, #0]
    3a20:	6879      	ldr	r1, [r7, #4]
    3a22:	47a0      	blx	r4
    3a24:	0003      	movs	r3, r0
    3a26:	000c      	movs	r4, r1
    3a28:	0019      	movs	r1, r3
    3a2a:	0022      	movs	r2, r4
    3a2c:	4b0c      	ldr	r3, [pc, #48]	; (3a60 <pulseEnable+0xd8>)
    3a2e:	2400      	movs	r4, #0
    3a30:	18c9      	adds	r1, r1, r3
    3a32:	4162      	adcs	r2, r4
    3a34:	0008      	movs	r0, r1
    3a36:	0011      	movs	r1, r2
    3a38:	4c0a      	ldr	r4, [pc, #40]	; (3a64 <pulseEnable+0xdc>)
    3a3a:	4a0b      	ldr	r2, [pc, #44]	; (3a68 <pulseEnable+0xe0>)
    3a3c:	2300      	movs	r3, #0
    3a3e:	47a0      	blx	r4
    3a40:	0003      	movs	r3, r0
    3a42:	000c      	movs	r4, r1
    3a44:	0018      	movs	r0, r3
    3a46:	4b09      	ldr	r3, [pc, #36]	; (3a6c <pulseEnable+0xe4>)
    3a48:	4798      	blx	r3

	//port_pin_set_output_level(_enable_pin, HIGH);
	//delay_us(1);
	//port_pin_set_output_level(_enable_pin, LOW);
	//delay_us(500);
}
    3a4a:	46c0      	nop			; (mov r8, r8)
    3a4c:	46bd      	mov	sp, r7
    3a4e:	b005      	add	sp, #20
    3a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a52:	46c0      	nop			; (mov r8, r8)
    3a54:	200006c2 	.word	0x200006c2
    3a58:	00003531 	.word	0x00003531
    3a5c:	000136d5 	.word	0x000136d5
    3a60:	006acfbf 	.word	0x006acfbf
    3a64:	00015649 	.word	0x00015649
    3a68:	006acfc0 	.word	0x006acfc0
    3a6c:	20000001 	.word	0x20000001
    3a70:	00015689 	.word	0x00015689

00003a74 <command>:

inline void command(uint8_t value) 
{
    3a74:	b580      	push	{r7, lr}
    3a76:	b082      	sub	sp, #8
    3a78:	af00      	add	r7, sp, #0
    3a7a:	0002      	movs	r2, r0
    3a7c:	1dfb      	adds	r3, r7, #7
    3a7e:	701a      	strb	r2, [r3, #0]
	send(value, LOW);
    3a80:	1dfb      	adds	r3, r7, #7
    3a82:	781b      	ldrb	r3, [r3, #0]
    3a84:	2100      	movs	r1, #0
    3a86:	0018      	movs	r0, r3
    3a88:	4b02      	ldr	r3, [pc, #8]	; (3a94 <command+0x20>)
    3a8a:	4798      	blx	r3
}
    3a8c:	46c0      	nop			; (mov r8, r8)
    3a8e:	46bd      	mov	sp, r7
    3a90:	b002      	add	sp, #8
    3a92:	bd80      	pop	{r7, pc}
    3a94:	00003ac1 	.word	0x00003ac1

00003a98 <LCD_write>:

inline size_t LCD_write(uint8_t value)
{
    3a98:	b580      	push	{r7, lr}
    3a9a:	b082      	sub	sp, #8
    3a9c:	af00      	add	r7, sp, #0
    3a9e:	0002      	movs	r2, r0
    3aa0:	1dfb      	adds	r3, r7, #7
    3aa2:	701a      	strb	r2, [r3, #0]
	send(value, HIGH);
    3aa4:	1dfb      	adds	r3, r7, #7
    3aa6:	781b      	ldrb	r3, [r3, #0]
    3aa8:	2101      	movs	r1, #1
    3aaa:	0018      	movs	r0, r3
    3aac:	4b03      	ldr	r3, [pc, #12]	; (3abc <LCD_write+0x24>)
    3aae:	4798      	blx	r3
	return 1;
    3ab0:	2301      	movs	r3, #1
}
    3ab2:	0018      	movs	r0, r3
    3ab4:	46bd      	mov	sp, r7
    3ab6:	b002      	add	sp, #8
    3ab8:	bd80      	pop	{r7, pc}
    3aba:	46c0      	nop			; (mov r8, r8)
    3abc:	00003ac1 	.word	0x00003ac1

00003ac0 <send>:

void send(uint8_t value, uint8_t mode) 
{
    3ac0:	b580      	push	{r7, lr}
    3ac2:	b082      	sub	sp, #8
    3ac4:	af00      	add	r7, sp, #0
    3ac6:	0002      	movs	r2, r0
    3ac8:	1dfb      	adds	r3, r7, #7
    3aca:	701a      	strb	r2, [r3, #0]
    3acc:	1dbb      	adds	r3, r7, #6
    3ace:	1c0a      	adds	r2, r1, #0
    3ad0:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(_rs_pin, mode);
    3ad2:	4b0d      	ldr	r3, [pc, #52]	; (3b08 <send+0x48>)
    3ad4:	781a      	ldrb	r2, [r3, #0]
    3ad6:	1dbb      	adds	r3, r7, #6
    3ad8:	781b      	ldrb	r3, [r3, #0]
    3ada:	1e59      	subs	r1, r3, #1
    3adc:	418b      	sbcs	r3, r1
    3ade:	b2db      	uxtb	r3, r3
    3ae0:	0019      	movs	r1, r3
    3ae2:	0010      	movs	r0, r2
    3ae4:	4b09      	ldr	r3, [pc, #36]	; (3b0c <send+0x4c>)
    3ae6:	4798      	blx	r3
	
	{
		write4bits(value>>4);
    3ae8:	1dfb      	adds	r3, r7, #7
    3aea:	781b      	ldrb	r3, [r3, #0]
    3aec:	091b      	lsrs	r3, r3, #4
    3aee:	b2db      	uxtb	r3, r3
    3af0:	0018      	movs	r0, r3
    3af2:	4b07      	ldr	r3, [pc, #28]	; (3b10 <send+0x50>)
    3af4:	4798      	blx	r3
		write4bits(value);
    3af6:	1dfb      	adds	r3, r7, #7
    3af8:	781b      	ldrb	r3, [r3, #0]
    3afa:	0018      	movs	r0, r3
    3afc:	4b04      	ldr	r3, [pc, #16]	; (3b10 <send+0x50>)
    3afe:	4798      	blx	r3
	}
}
    3b00:	46c0      	nop			; (mov r8, r8)
    3b02:	46bd      	mov	sp, r7
    3b04:	b002      	add	sp, #8
    3b06:	bd80      	pop	{r7, pc}
    3b08:	200006c3 	.word	0x200006c3
    3b0c:	00003531 	.word	0x00003531
    3b10:	00003931 	.word	0x00003931

00003b14 <LCD_clear>:

void LCD_clear(void)
{
    3b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b16:	af00      	add	r7, sp, #0
	command(LCD_CLEARDISPLAY);
    3b18:	2001      	movs	r0, #1
    3b1a:	4b13      	ldr	r3, [pc, #76]	; (3b68 <LCD_clear+0x54>)
    3b1c:	4798      	blx	r3
	delay_us(2000);
    3b1e:	2000      	movs	r0, #0
    3b20:	4b12      	ldr	r3, [pc, #72]	; (3b6c <LCD_clear+0x58>)
    3b22:	4798      	blx	r3
    3b24:	0003      	movs	r3, r0
    3b26:	001d      	movs	r5, r3
    3b28:	2300      	movs	r3, #0
    3b2a:	001e      	movs	r6, r3
    3b2c:	4c10      	ldr	r4, [pc, #64]	; (3b70 <LCD_clear+0x5c>)
    3b2e:	22fa      	movs	r2, #250	; 0xfa
    3b30:	00d2      	lsls	r2, r2, #3
    3b32:	2300      	movs	r3, #0
    3b34:	0028      	movs	r0, r5
    3b36:	0031      	movs	r1, r6
    3b38:	47a0      	blx	r4
    3b3a:	0003      	movs	r3, r0
    3b3c:	000c      	movs	r4, r1
    3b3e:	0019      	movs	r1, r3
    3b40:	0022      	movs	r2, r4
    3b42:	4b0c      	ldr	r3, [pc, #48]	; (3b74 <LCD_clear+0x60>)
    3b44:	2400      	movs	r4, #0
    3b46:	18c9      	adds	r1, r1, r3
    3b48:	4162      	adcs	r2, r4
    3b4a:	0008      	movs	r0, r1
    3b4c:	0011      	movs	r1, r2
    3b4e:	4c0a      	ldr	r4, [pc, #40]	; (3b78 <LCD_clear+0x64>)
    3b50:	4a0a      	ldr	r2, [pc, #40]	; (3b7c <LCD_clear+0x68>)
    3b52:	2300      	movs	r3, #0
    3b54:	47a0      	blx	r4
    3b56:	0003      	movs	r3, r0
    3b58:	000c      	movs	r4, r1
    3b5a:	0018      	movs	r0, r3
    3b5c:	4b08      	ldr	r3, [pc, #32]	; (3b80 <LCD_clear+0x6c>)
    3b5e:	4798      	blx	r3
}
    3b60:	46c0      	nop			; (mov r8, r8)
    3b62:	46bd      	mov	sp, r7
    3b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3b66:	46c0      	nop			; (mov r8, r8)
    3b68:	00003a75 	.word	0x00003a75
    3b6c:	000136d5 	.word	0x000136d5
    3b70:	00015689 	.word	0x00015689
    3b74:	006acfbf 	.word	0x006acfbf
    3b78:	00015649 	.word	0x00015649
    3b7c:	006acfc0 	.word	0x006acfc0
    3b80:	20000001 	.word	0x20000001

00003b84 <LCD_Create_Custom_createChar>:


void LCD_Create_Custom_createChar(uint8_t location, uint8_t charmap[]) 
{
    3b84:	b580      	push	{r7, lr}
    3b86:	b084      	sub	sp, #16
    3b88:	af00      	add	r7, sp, #0
    3b8a:	0002      	movs	r2, r0
    3b8c:	6039      	str	r1, [r7, #0]
    3b8e:	1dfb      	adds	r3, r7, #7
    3b90:	701a      	strb	r2, [r3, #0]
	location &= 0x7;
    3b92:	1dfb      	adds	r3, r7, #7
    3b94:	1dfa      	adds	r2, r7, #7
    3b96:	7812      	ldrb	r2, [r2, #0]
    3b98:	2107      	movs	r1, #7
    3b9a:	400a      	ands	r2, r1
    3b9c:	701a      	strb	r2, [r3, #0]
	command(LCD_SETCGRAMADDR | (location << 3));
    3b9e:	1dfb      	adds	r3, r7, #7
    3ba0:	781b      	ldrb	r3, [r3, #0]
    3ba2:	00db      	lsls	r3, r3, #3
    3ba4:	b25b      	sxtb	r3, r3
    3ba6:	2240      	movs	r2, #64	; 0x40
    3ba8:	4313      	orrs	r3, r2
    3baa:	b25b      	sxtb	r3, r3
    3bac:	b2db      	uxtb	r3, r3
    3bae:	0018      	movs	r0, r3
    3bb0:	4b0a      	ldr	r3, [pc, #40]	; (3bdc <LCD_Create_Custom_createChar+0x58>)
    3bb2:	4798      	blx	r3
	for (int i=0; i<8; i++)
    3bb4:	2300      	movs	r3, #0
    3bb6:	60fb      	str	r3, [r7, #12]
    3bb8:	e009      	b.n	3bce <LCD_Create_Custom_createChar+0x4a>
	{
		LCD_write(charmap[i]);
    3bba:	68fb      	ldr	r3, [r7, #12]
    3bbc:	683a      	ldr	r2, [r7, #0]
    3bbe:	18d3      	adds	r3, r2, r3
    3bc0:	781b      	ldrb	r3, [r3, #0]
    3bc2:	0018      	movs	r0, r3
    3bc4:	4b06      	ldr	r3, [pc, #24]	; (3be0 <LCD_Create_Custom_createChar+0x5c>)
    3bc6:	4798      	blx	r3
	for (int i=0; i<8; i++)
    3bc8:	68fb      	ldr	r3, [r7, #12]
    3bca:	3301      	adds	r3, #1
    3bcc:	60fb      	str	r3, [r7, #12]
    3bce:	68fb      	ldr	r3, [r7, #12]
    3bd0:	2b07      	cmp	r3, #7
    3bd2:	ddf2      	ble.n	3bba <LCD_Create_Custom_createChar+0x36>
	}
}
    3bd4:	46c0      	nop			; (mov r8, r8)
    3bd6:	46bd      	mov	sp, r7
    3bd8:	b004      	add	sp, #16
    3bda:	bd80      	pop	{r7, pc}
    3bdc:	00003a75 	.word	0x00003a75
    3be0:	00003a99 	.word	0x00003a99

00003be4 <LCD_setCursor>:
	command(LCD_RETURNHOME);
	delay_us(2000);
}

void LCD_setCursor(uint8_t col, uint8_t row)
{
    3be4:	b580      	push	{r7, lr}
    3be6:	b084      	sub	sp, #16
    3be8:	af00      	add	r7, sp, #0
    3bea:	0002      	movs	r2, r0
    3bec:	1dfb      	adds	r3, r7, #7
    3bee:	701a      	strb	r2, [r3, #0]
    3bf0:	1dbb      	adds	r3, r7, #6
    3bf2:	1c0a      	adds	r2, r1, #0
    3bf4:	701a      	strb	r2, [r3, #0]
	const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
    3bf6:	2304      	movs	r3, #4
    3bf8:	60fb      	str	r3, [r7, #12]
	if ( row >= max_lines ) 
    3bfa:	1dbb      	adds	r3, r7, #6
    3bfc:	781a      	ldrb	r2, [r3, #0]
    3bfe:	68fb      	ldr	r3, [r7, #12]
    3c00:	429a      	cmp	r2, r3
    3c02:	d304      	bcc.n	3c0e <LCD_setCursor+0x2a>
	{
		row = max_lines - 1; 
    3c04:	68fb      	ldr	r3, [r7, #12]
    3c06:	b2da      	uxtb	r2, r3
    3c08:	1dbb      	adds	r3, r7, #6
    3c0a:	3a01      	subs	r2, #1
    3c0c:	701a      	strb	r2, [r3, #0]
	}
	if ( row >= _numlines )
    3c0e:	4b10      	ldr	r3, [pc, #64]	; (3c50 <LCD_setCursor+0x6c>)
    3c10:	781b      	ldrb	r3, [r3, #0]
    3c12:	1dba      	adds	r2, r7, #6
    3c14:	7812      	ldrb	r2, [r2, #0]
    3c16:	429a      	cmp	r2, r3
    3c18:	d304      	bcc.n	3c24 <LCD_setCursor+0x40>
	{
		row = _numlines - 1;
    3c1a:	4b0d      	ldr	r3, [pc, #52]	; (3c50 <LCD_setCursor+0x6c>)
    3c1c:	781a      	ldrb	r2, [r3, #0]
    3c1e:	1dbb      	adds	r3, r7, #6
    3c20:	3a01      	subs	r2, #1
    3c22:	701a      	strb	r2, [r3, #0]
	}
	command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
    3c24:	1dbb      	adds	r3, r7, #6
    3c26:	781b      	ldrb	r3, [r3, #0]
    3c28:	4a0a      	ldr	r2, [pc, #40]	; (3c54 <LCD_setCursor+0x70>)
    3c2a:	5cd2      	ldrb	r2, [r2, r3]
    3c2c:	1dfb      	adds	r3, r7, #7
    3c2e:	781b      	ldrb	r3, [r3, #0]
    3c30:	18d3      	adds	r3, r2, r3
    3c32:	b2db      	uxtb	r3, r3
    3c34:	b25b      	sxtb	r3, r3
    3c36:	2280      	movs	r2, #128	; 0x80
    3c38:	4252      	negs	r2, r2
    3c3a:	4313      	orrs	r3, r2
    3c3c:	b25b      	sxtb	r3, r3
    3c3e:	b2db      	uxtb	r3, r3
    3c40:	0018      	movs	r0, r3
    3c42:	4b05      	ldr	r3, [pc, #20]	; (3c58 <LCD_setCursor+0x74>)
    3c44:	4798      	blx	r3
}
    3c46:	46c0      	nop			; (mov r8, r8)
    3c48:	46bd      	mov	sp, r7
    3c4a:	b004      	add	sp, #16
    3c4c:	bd80      	pop	{r7, pc}
    3c4e:	46c0      	nop			; (mov r8, r8)
    3c50:	200006ba 	.word	0x200006ba
    3c54:	200006b4 	.word	0x200006b4
    3c58:	00003a75 	.word	0x00003a75

00003c5c <LCD_display>:
{
	_displaycontrol &= ~LCD_DISPLAYON;
	command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LCD_display(void) 
{
    3c5c:	b580      	push	{r7, lr}
    3c5e:	af00      	add	r7, sp, #0
	_displaycontrol |= LCD_DISPLAYON;
    3c60:	4b08      	ldr	r3, [pc, #32]	; (3c84 <LCD_display+0x28>)
    3c62:	781b      	ldrb	r3, [r3, #0]
    3c64:	2204      	movs	r2, #4
    3c66:	4313      	orrs	r3, r2
    3c68:	b2da      	uxtb	r2, r3
    3c6a:	4b06      	ldr	r3, [pc, #24]	; (3c84 <LCD_display+0x28>)
    3c6c:	701a      	strb	r2, [r3, #0]
	command(LCD_DISPLAYCONTROL | _displaycontrol);
    3c6e:	4b05      	ldr	r3, [pc, #20]	; (3c84 <LCD_display+0x28>)
    3c70:	781b      	ldrb	r3, [r3, #0]
    3c72:	2208      	movs	r2, #8
    3c74:	4313      	orrs	r3, r2
    3c76:	b2db      	uxtb	r3, r3
    3c78:	0018      	movs	r0, r3
    3c7a:	4b03      	ldr	r3, [pc, #12]	; (3c88 <LCD_display+0x2c>)
    3c7c:	4798      	blx	r3
}
    3c7e:	46c0      	nop			; (mov r8, r8)
    3c80:	46bd      	mov	sp, r7
    3c82:	bd80      	pop	{r7, pc}
    3c84:	200006b9 	.word	0x200006b9
    3c88:	00003a75 	.word	0x00003a75

00003c8c <Buffer_writer>:

//////////////////////////////////////////////////////////////////////////


size_t Buffer_writer(const char *buffer)
{
    3c8c:	b580      	push	{r7, lr}
    3c8e:	b084      	sub	sp, #16
    3c90:	af00      	add	r7, sp, #0
    3c92:	6078      	str	r0, [r7, #4]
	size_t size = strlen(buffer);
    3c94:	687b      	ldr	r3, [r7, #4]
    3c96:	0018      	movs	r0, r3
    3c98:	4b0f      	ldr	r3, [pc, #60]	; (3cd8 <Buffer_writer+0x4c>)
    3c9a:	4798      	blx	r3
    3c9c:	0003      	movs	r3, r0
    3c9e:	60fb      	str	r3, [r7, #12]
	size_t n = 0;
    3ca0:	2300      	movs	r3, #0
    3ca2:	60bb      	str	r3, [r7, #8]
	while (size--) {
    3ca4:	e00b      	b.n	3cbe <Buffer_writer+0x32>
		if (LCD_write(*buffer++)) n++;
    3ca6:	687b      	ldr	r3, [r7, #4]
    3ca8:	1c5a      	adds	r2, r3, #1
    3caa:	607a      	str	r2, [r7, #4]
    3cac:	781b      	ldrb	r3, [r3, #0]
    3cae:	0018      	movs	r0, r3
    3cb0:	4b0a      	ldr	r3, [pc, #40]	; (3cdc <Buffer_writer+0x50>)
    3cb2:	4798      	blx	r3
    3cb4:	1e03      	subs	r3, r0, #0
    3cb6:	d008      	beq.n	3cca <Buffer_writer+0x3e>
    3cb8:	68bb      	ldr	r3, [r7, #8]
    3cba:	3301      	adds	r3, #1
    3cbc:	60bb      	str	r3, [r7, #8]
	while (size--) {
    3cbe:	68fb      	ldr	r3, [r7, #12]
    3cc0:	1e5a      	subs	r2, r3, #1
    3cc2:	60fa      	str	r2, [r7, #12]
    3cc4:	2b00      	cmp	r3, #0
    3cc6:	d1ee      	bne.n	3ca6 <Buffer_writer+0x1a>
    3cc8:	e000      	b.n	3ccc <Buffer_writer+0x40>
		else break;
    3cca:	46c0      	nop			; (mov r8, r8)
	}
	return n;
    3ccc:	68bb      	ldr	r3, [r7, #8]
}
    3cce:	0018      	movs	r0, r3
    3cd0:	46bd      	mov	sp, r7
    3cd2:	b004      	add	sp, #16
    3cd4:	bd80      	pop	{r7, pc}
    3cd6:	46c0      	nop			; (mov r8, r8)
    3cd8:	00017de7 	.word	0x00017de7
    3cdc:	00003a99 	.word	0x00003a99

00003ce0 <lcd_printf>:
	return n;
}


void lcd_printf(const  char *fmt, ...)
{
    3ce0:	b40f      	push	{r0, r1, r2, r3}
    3ce2:	b580      	push	{r7, lr}
    3ce4:	b084      	sub	sp, #16
    3ce6:	af00      	add	r7, sp, #0
	int num_chars;
	char *lcd_buff;
	num_chars = strlen(fmt) + 3;
    3ce8:	69bb      	ldr	r3, [r7, #24]
    3cea:	0018      	movs	r0, r3
    3cec:	4b11      	ldr	r3, [pc, #68]	; (3d34 <lcd_printf+0x54>)
    3cee:	4798      	blx	r3
    3cf0:	0003      	movs	r3, r0
    3cf2:	3303      	adds	r3, #3
    3cf4:	60fb      	str	r3, [r7, #12]
	lcd_buff = (char *)malloc(sizeof(char) * num_chars);
    3cf6:	68fb      	ldr	r3, [r7, #12]
    3cf8:	0018      	movs	r0, r3
    3cfa:	4b0f      	ldr	r3, [pc, #60]	; (3d38 <lcd_printf+0x58>)
    3cfc:	4798      	blx	r3
    3cfe:	0003      	movs	r3, r0
    3d00:	60bb      	str	r3, [r7, #8]
	va_list args;
	va_start(args, fmt);
    3d02:	231c      	movs	r3, #28
    3d04:	18fb      	adds	r3, r7, r3
    3d06:	607b      	str	r3, [r7, #4]
	vsprintf(lcd_buff,fmt,args);
    3d08:	687a      	ldr	r2, [r7, #4]
    3d0a:	69b9      	ldr	r1, [r7, #24]
    3d0c:	68bb      	ldr	r3, [r7, #8]
    3d0e:	0018      	movs	r0, r3
    3d10:	4b0a      	ldr	r3, [pc, #40]	; (3d3c <lcd_printf+0x5c>)
    3d12:	4798      	blx	r3
	Buffer_writer(lcd_buff);
    3d14:	68bb      	ldr	r3, [r7, #8]
    3d16:	0018      	movs	r0, r3
    3d18:	4b09      	ldr	r3, [pc, #36]	; (3d40 <lcd_printf+0x60>)
    3d1a:	4798      	blx	r3
	va_end(args);
	free(lcd_buff);
    3d1c:	68bb      	ldr	r3, [r7, #8]
    3d1e:	0018      	movs	r0, r3
    3d20:	4b08      	ldr	r3, [pc, #32]	; (3d44 <lcd_printf+0x64>)
    3d22:	4798      	blx	r3
}
    3d24:	46c0      	nop			; (mov r8, r8)
    3d26:	46bd      	mov	sp, r7
    3d28:	b004      	add	sp, #16
    3d2a:	bc80      	pop	{r7}
    3d2c:	bc08      	pop	{r3}
    3d2e:	b004      	add	sp, #16
    3d30:	4718      	bx	r3
    3d32:	46c0      	nop			; (mov r8, r8)
    3d34:	00017de7 	.word	0x00017de7
    3d38:	00017ad5 	.word	0x00017ad5
    3d3c:	000180d5 	.word	0x000180d5
    3d40:	00003c8d 	.word	0x00003c8d
    3d44:	00017ae9 	.word	0x00017ae9

00003d48 <StringtoUpperCase>:
#include "yalgo.h"
#include "itoa.h"


void StringtoUpperCase(char *str)
{
    3d48:	b580      	push	{r7, lr}
    3d4a:	b084      	sub	sp, #16
    3d4c:	af00      	add	r7, sp, #0
    3d4e:	6078      	str	r0, [r7, #4]
	if (!str) return;
    3d50:	687b      	ldr	r3, [r7, #4]
    3d52:	2b00      	cmp	r3, #0
    3d54:	d028      	beq.n	3da8 <StringtoUpperCase+0x60>
	for (char *p = str; *p; p++) {
    3d56:	687b      	ldr	r3, [r7, #4]
    3d58:	60fb      	str	r3, [r7, #12]
    3d5a:	e020      	b.n	3d9e <StringtoUpperCase+0x56>
		*p = toupper(*p);
    3d5c:	230b      	movs	r3, #11
    3d5e:	18fb      	adds	r3, r7, r3
    3d60:	68fa      	ldr	r2, [r7, #12]
    3d62:	7812      	ldrb	r2, [r2, #0]
    3d64:	701a      	strb	r2, [r3, #0]
    3d66:	4b12      	ldr	r3, [pc, #72]	; (3db0 <StringtoUpperCase+0x68>)
    3d68:	4798      	blx	r3
    3d6a:	0002      	movs	r2, r0
    3d6c:	230b      	movs	r3, #11
    3d6e:	18fb      	adds	r3, r7, r3
    3d70:	781b      	ldrb	r3, [r3, #0]
    3d72:	3301      	adds	r3, #1
    3d74:	18d3      	adds	r3, r2, r3
    3d76:	781b      	ldrb	r3, [r3, #0]
    3d78:	001a      	movs	r2, r3
    3d7a:	2303      	movs	r3, #3
    3d7c:	4013      	ands	r3, r2
    3d7e:	2b02      	cmp	r3, #2
    3d80:	d104      	bne.n	3d8c <StringtoUpperCase+0x44>
    3d82:	230b      	movs	r3, #11
    3d84:	18fb      	adds	r3, r7, r3
    3d86:	781b      	ldrb	r3, [r3, #0]
    3d88:	3b20      	subs	r3, #32
    3d8a:	e002      	b.n	3d92 <StringtoUpperCase+0x4a>
    3d8c:	230b      	movs	r3, #11
    3d8e:	18fb      	adds	r3, r7, r3
    3d90:	781b      	ldrb	r3, [r3, #0]
    3d92:	b2da      	uxtb	r2, r3
    3d94:	68fb      	ldr	r3, [r7, #12]
    3d96:	701a      	strb	r2, [r3, #0]
	for (char *p = str; *p; p++) {
    3d98:	68fb      	ldr	r3, [r7, #12]
    3d9a:	3301      	adds	r3, #1
    3d9c:	60fb      	str	r3, [r7, #12]
    3d9e:	68fb      	ldr	r3, [r7, #12]
    3da0:	781b      	ldrb	r3, [r3, #0]
    3da2:	2b00      	cmp	r3, #0
    3da4:	d1da      	bne.n	3d5c <StringtoUpperCase+0x14>
    3da6:	e000      	b.n	3daa <StringtoUpperCase+0x62>
	if (!str) return;
    3da8:	46c0      	nop			; (mov r8, r8)
	}
}
    3daa:	46bd      	mov	sp, r7
    3dac:	b004      	add	sp, #16
    3dae:	bd80      	pop	{r7, pc}
    3db0:	00017ab9 	.word	0x00017ab9

00003db4 <StringstartsWith>:

bool StringstartsWith(const char *str,const char *pre)
{
    3db4:	b580      	push	{r7, lr}
    3db6:	b084      	sub	sp, #16
    3db8:	af00      	add	r7, sp, #0
    3dba:	6078      	str	r0, [r7, #4]
    3dbc:	6039      	str	r1, [r7, #0]
	size_t lenpre = strlen(pre),
    3dbe:	683b      	ldr	r3, [r7, #0]
    3dc0:	0018      	movs	r0, r3
    3dc2:	4b10      	ldr	r3, [pc, #64]	; (3e04 <StringstartsWith+0x50>)
    3dc4:	4798      	blx	r3
    3dc6:	0003      	movs	r3, r0
    3dc8:	60fb      	str	r3, [r7, #12]
	lenstr = strlen(str);
    3dca:	687b      	ldr	r3, [r7, #4]
    3dcc:	0018      	movs	r0, r3
    3dce:	4b0d      	ldr	r3, [pc, #52]	; (3e04 <StringstartsWith+0x50>)
    3dd0:	4798      	blx	r3
    3dd2:	0003      	movs	r3, r0
    3dd4:	60bb      	str	r3, [r7, #8]
	return lenstr < lenpre ? false : strncmp(pre, str, lenpre) == 0;
    3dd6:	68ba      	ldr	r2, [r7, #8]
    3dd8:	68fb      	ldr	r3, [r7, #12]
    3dda:	429a      	cmp	r2, r3
    3ddc:	d309      	bcc.n	3df2 <StringstartsWith+0x3e>
    3dde:	68fa      	ldr	r2, [r7, #12]
    3de0:	6879      	ldr	r1, [r7, #4]
    3de2:	683b      	ldr	r3, [r7, #0]
    3de4:	0018      	movs	r0, r3
    3de6:	4b08      	ldr	r3, [pc, #32]	; (3e08 <StringstartsWith+0x54>)
    3de8:	4798      	blx	r3
    3dea:	1e03      	subs	r3, r0, #0
    3dec:	d101      	bne.n	3df2 <StringstartsWith+0x3e>
    3dee:	2301      	movs	r3, #1
    3df0:	e000      	b.n	3df4 <StringstartsWith+0x40>
    3df2:	2300      	movs	r3, #0
    3df4:	1c1a      	adds	r2, r3, #0
    3df6:	2301      	movs	r3, #1
    3df8:	4013      	ands	r3, r2
    3dfa:	b2db      	uxtb	r3, r3
}
    3dfc:	0018      	movs	r0, r3
    3dfe:	46bd      	mov	sp, r7
    3e00:	b004      	add	sp, #16
    3e02:	bd80      	pop	{r7, pc}
    3e04:	00017de7 	.word	0x00017de7
    3e08:	00017df5 	.word	0x00017df5

00003e0c <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
    3e0c:	b580      	push	{r7, lr}
    3e0e:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    3e10:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    3e14:	4b02      	ldr	r3, [pc, #8]	; (3e20 <NVIC_SystemReset+0x14>)
    3e16:	4a03      	ldr	r2, [pc, #12]	; (3e24 <NVIC_SystemReset+0x18>)
    3e18:	60da      	str	r2, [r3, #12]
    3e1a:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
    3e1e:	e7fe      	b.n	3e1e <NVIC_SystemReset+0x12>
    3e20:	e000ed00 	.word	0xe000ed00
    3e24:	05fa0004 	.word	0x05fa0004

00003e28 <system_pinmux_get_group_from_gpio_pin>:
{
    3e28:	b580      	push	{r7, lr}
    3e2a:	b084      	sub	sp, #16
    3e2c:	af00      	add	r7, sp, #0
    3e2e:	0002      	movs	r2, r0
    3e30:	1dfb      	adds	r3, r7, #7
    3e32:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3e34:	230f      	movs	r3, #15
    3e36:	18fb      	adds	r3, r7, r3
    3e38:	1dfa      	adds	r2, r7, #7
    3e3a:	7812      	ldrb	r2, [r2, #0]
    3e3c:	09d2      	lsrs	r2, r2, #7
    3e3e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3e40:	230e      	movs	r3, #14
    3e42:	18fb      	adds	r3, r7, r3
    3e44:	1dfa      	adds	r2, r7, #7
    3e46:	7812      	ldrb	r2, [r2, #0]
    3e48:	0952      	lsrs	r2, r2, #5
    3e4a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3e4c:	4b0d      	ldr	r3, [pc, #52]	; (3e84 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3e4e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    3e50:	230f      	movs	r3, #15
    3e52:	18fb      	adds	r3, r7, r3
    3e54:	781b      	ldrb	r3, [r3, #0]
    3e56:	2b00      	cmp	r3, #0
    3e58:	d10f      	bne.n	3e7a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3e5a:	230f      	movs	r3, #15
    3e5c:	18fb      	adds	r3, r7, r3
    3e5e:	781b      	ldrb	r3, [r3, #0]
    3e60:	009b      	lsls	r3, r3, #2
    3e62:	2210      	movs	r2, #16
    3e64:	4694      	mov	ip, r2
    3e66:	44bc      	add	ip, r7
    3e68:	4463      	add	r3, ip
    3e6a:	3b08      	subs	r3, #8
    3e6c:	681a      	ldr	r2, [r3, #0]
    3e6e:	230e      	movs	r3, #14
    3e70:	18fb      	adds	r3, r7, r3
    3e72:	781b      	ldrb	r3, [r3, #0]
    3e74:	01db      	lsls	r3, r3, #7
    3e76:	18d3      	adds	r3, r2, r3
    3e78:	e000      	b.n	3e7c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    3e7a:	2300      	movs	r3, #0
}
    3e7c:	0018      	movs	r0, r3
    3e7e:	46bd      	mov	sp, r7
    3e80:	b004      	add	sp, #16
    3e82:	bd80      	pop	{r7, pc}
    3e84:	41004400 	.word	0x41004400

00003e88 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
    3e88:	b580      	push	{r7, lr}
    3e8a:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
    3e8c:	4b02      	ldr	r3, [pc, #8]	; (3e98 <system_reset+0x10>)
    3e8e:	4798      	blx	r3
}
    3e90:	46c0      	nop			; (mov r8, r8)
    3e92:	46bd      	mov	sp, r7
    3e94:	bd80      	pop	{r7, pc}
    3e96:	46c0      	nop			; (mov r8, r8)
    3e98:	00003e0d 	.word	0x00003e0d

00003e9c <port_get_group_from_gpio_pin>:
{
    3e9c:	b580      	push	{r7, lr}
    3e9e:	b082      	sub	sp, #8
    3ea0:	af00      	add	r7, sp, #0
    3ea2:	0002      	movs	r2, r0
    3ea4:	1dfb      	adds	r3, r7, #7
    3ea6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3ea8:	1dfb      	adds	r3, r7, #7
    3eaa:	781b      	ldrb	r3, [r3, #0]
    3eac:	0018      	movs	r0, r3
    3eae:	4b03      	ldr	r3, [pc, #12]	; (3ebc <port_get_group_from_gpio_pin+0x20>)
    3eb0:	4798      	blx	r3
    3eb2:	0003      	movs	r3, r0
}
    3eb4:	0018      	movs	r0, r3
    3eb6:	46bd      	mov	sp, r7
    3eb8:	b002      	add	sp, #8
    3eba:	bd80      	pop	{r7, pc}
    3ebc:	00003e29 	.word	0x00003e29

00003ec0 <port_get_config_defaults>:
{
    3ec0:	b580      	push	{r7, lr}
    3ec2:	b082      	sub	sp, #8
    3ec4:	af00      	add	r7, sp, #0
    3ec6:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    3ec8:	687b      	ldr	r3, [r7, #4]
    3eca:	2200      	movs	r2, #0
    3ecc:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    3ece:	687b      	ldr	r3, [r7, #4]
    3ed0:	2201      	movs	r2, #1
    3ed2:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    3ed4:	687b      	ldr	r3, [r7, #4]
    3ed6:	2200      	movs	r2, #0
    3ed8:	709a      	strb	r2, [r3, #2]
}
    3eda:	46c0      	nop			; (mov r8, r8)
    3edc:	46bd      	mov	sp, r7
    3ede:	b002      	add	sp, #8
    3ee0:	bd80      	pop	{r7, pc}
	...

00003ee4 <port_pin_get_input_level>:
{
    3ee4:	b580      	push	{r7, lr}
    3ee6:	b084      	sub	sp, #16
    3ee8:	af00      	add	r7, sp, #0
    3eea:	0002      	movs	r2, r0
    3eec:	1dfb      	adds	r3, r7, #7
    3eee:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3ef0:	1dfb      	adds	r3, r7, #7
    3ef2:	781b      	ldrb	r3, [r3, #0]
    3ef4:	0018      	movs	r0, r3
    3ef6:	4b0b      	ldr	r3, [pc, #44]	; (3f24 <port_pin_get_input_level+0x40>)
    3ef8:	4798      	blx	r3
    3efa:	0003      	movs	r3, r0
    3efc:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3efe:	1dfb      	adds	r3, r7, #7
    3f00:	781b      	ldrb	r3, [r3, #0]
    3f02:	221f      	movs	r2, #31
    3f04:	4013      	ands	r3, r2
    3f06:	2201      	movs	r2, #1
    3f08:	409a      	lsls	r2, r3
    3f0a:	0013      	movs	r3, r2
    3f0c:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
    3f0e:	68fb      	ldr	r3, [r7, #12]
    3f10:	6a1b      	ldr	r3, [r3, #32]
    3f12:	68ba      	ldr	r2, [r7, #8]
    3f14:	4013      	ands	r3, r2
    3f16:	1e5a      	subs	r2, r3, #1
    3f18:	4193      	sbcs	r3, r2
    3f1a:	b2db      	uxtb	r3, r3
}
    3f1c:	0018      	movs	r0, r3
    3f1e:	46bd      	mov	sp, r7
    3f20:	b004      	add	sp, #16
    3f22:	bd80      	pop	{r7, pc}
    3f24:	00003e9d 	.word	0x00003e9d

00003f28 <setObtainEvent>:

static void vTask_GSM_service(void *params);


void setObtainEvent(void)
{
    3f28:	b580      	push	{r7, lr}
    3f2a:	af00      	add	r7, sp, #0
	if (!obtainNewEvent  && xTaskGetTickCount() - obtainEventTimer > 1000)
    3f2c:	4b0b      	ldr	r3, [pc, #44]	; (3f5c <setObtainEvent+0x34>)
    3f2e:	781b      	ldrb	r3, [r3, #0]
    3f30:	2201      	movs	r2, #1
    3f32:	4053      	eors	r3, r2
    3f34:	b2db      	uxtb	r3, r3
    3f36:	2b00      	cmp	r3, #0
    3f38:	d00c      	beq.n	3f54 <setObtainEvent+0x2c>
    3f3a:	4b09      	ldr	r3, [pc, #36]	; (3f60 <setObtainEvent+0x38>)
    3f3c:	4798      	blx	r3
    3f3e:	0002      	movs	r2, r0
    3f40:	4b08      	ldr	r3, [pc, #32]	; (3f64 <setObtainEvent+0x3c>)
    3f42:	681b      	ldr	r3, [r3, #0]
    3f44:	1ad2      	subs	r2, r2, r3
    3f46:	23fa      	movs	r3, #250	; 0xfa
    3f48:	009b      	lsls	r3, r3, #2
    3f4a:	429a      	cmp	r2, r3
    3f4c:	d902      	bls.n	3f54 <setObtainEvent+0x2c>
	{
		obtainNewEvent = true;
    3f4e:	4b03      	ldr	r3, [pc, #12]	; (3f5c <setObtainEvent+0x34>)
    3f50:	2201      	movs	r2, #1
    3f52:	701a      	strb	r2, [r3, #0]
	}
}
    3f54:	46c0      	nop			; (mov r8, r8)
    3f56:	46bd      	mov	sp, r7
    3f58:	bd80      	pop	{r7, pc}
    3f5a:	46c0      	nop			; (mov r8, r8)
    3f5c:	2000073a 	.word	0x2000073a
    3f60:	0000f1fd 	.word	0x0000f1fd
    3f64:	200007b8 	.word	0x200007b8

00003f68 <operateOnStagedEvent>:

void operateOnStagedEvent(void)
{
    3f68:	b580      	push	{r7, lr}
    3f6a:	b082      	sub	sp, #8
    3f6c:	af00      	add	r7, sp, #0
	uint8_t temp1= 1;
    3f6e:	1dfb      	adds	r3, r7, #7
    3f70:	2201      	movs	r2, #1
    3f72:	701a      	strb	r2, [r3, #0]
	if(eventStaged)
    3f74:	4b23      	ldr	r3, [pc, #140]	; (4004 <operateOnStagedEvent+0x9c>)
    3f76:	781b      	ldrb	r3, [r3, #0]
    3f78:	2b00      	cmp	r3, #0
    3f7a:	d003      	beq.n	3f84 <operateOnStagedEvent+0x1c>
	{
		temp1 = user_settings_parameter_struct.eventStageAddress;
    3f7c:	1dfb      	adds	r3, r7, #7
    3f7e:	4a22      	ldr	r2, [pc, #136]	; (4008 <operateOnStagedEvent+0xa0>)
    3f80:	7a12      	ldrb	r2, [r2, #8]
    3f82:	701a      	strb	r2, [r3, #0]
	}
	
	if(obtainNewEvent && (retries==1 || (xTaskGetTickCount()-tempEventStageTime>((unsigned long)temp1*60000L))))
    3f84:	4b21      	ldr	r3, [pc, #132]	; (400c <operateOnStagedEvent+0xa4>)
    3f86:	781b      	ldrb	r3, [r3, #0]
    3f88:	2b00      	cmp	r3, #0
    3f8a:	d037      	beq.n	3ffc <operateOnStagedEvent+0x94>
    3f8c:	4b20      	ldr	r3, [pc, #128]	; (4010 <operateOnStagedEvent+0xa8>)
    3f8e:	781b      	ldrb	r3, [r3, #0]
    3f90:	2b01      	cmp	r3, #1
    3f92:	d00b      	beq.n	3fac <operateOnStagedEvent+0x44>
    3f94:	4b1f      	ldr	r3, [pc, #124]	; (4014 <operateOnStagedEvent+0xac>)
    3f96:	4798      	blx	r3
    3f98:	0002      	movs	r2, r0
    3f9a:	4b1f      	ldr	r3, [pc, #124]	; (4018 <operateOnStagedEvent+0xb0>)
    3f9c:	681b      	ldr	r3, [r3, #0]
    3f9e:	1ad2      	subs	r2, r2, r3
    3fa0:	1dfb      	adds	r3, r7, #7
    3fa2:	781b      	ldrb	r3, [r3, #0]
    3fa4:	491d      	ldr	r1, [pc, #116]	; (401c <operateOnStagedEvent+0xb4>)
    3fa6:	434b      	muls	r3, r1
    3fa8:	429a      	cmp	r2, r3
    3faa:	d927      	bls.n	3ffc <operateOnStagedEvent+0x94>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
    3fac:	4b1c      	ldr	r3, [pc, #112]	; (4020 <operateOnStagedEvent+0xb8>)
    3fae:	78db      	ldrb	r3, [r3, #3]
    3fb0:	2b00      	cmp	r3, #0
    3fb2:	d01a      	beq.n	3fea <operateOnStagedEvent+0x82>
		{
			if (eventStaged)
    3fb4:	4b13      	ldr	r3, [pc, #76]	; (4004 <operateOnStagedEvent+0x9c>)
    3fb6:	781b      	ldrb	r3, [r3, #0]
    3fb8:	2b00      	cmp	r3, #0
    3fba:	d007      	beq.n	3fcc <operateOnStagedEvent+0x64>
			{
				actionType=stagedEventType;
    3fbc:	4b19      	ldr	r3, [pc, #100]	; (4024 <operateOnStagedEvent+0xbc>)
    3fbe:	781a      	ldrb	r2, [r3, #0]
    3fc0:	4b19      	ldr	r3, [pc, #100]	; (4028 <operateOnStagedEvent+0xc0>)
    3fc2:	701a      	strb	r2, [r3, #0]
				eventStaged=false;
    3fc4:	4b0f      	ldr	r3, [pc, #60]	; (4004 <operateOnStagedEvent+0x9c>)
    3fc6:	2200      	movs	r2, #0
    3fc8:	701a      	strb	r2, [r3, #0]
    3fca:	e015      	b.n	3ff8 <operateOnStagedEvent+0x90>
			}
			else if (m2mEventStaged)
    3fcc:	4b17      	ldr	r3, [pc, #92]	; (402c <operateOnStagedEvent+0xc4>)
    3fce:	781b      	ldrb	r3, [r3, #0]
    3fd0:	2b00      	cmp	r3, #0
    3fd2:	d011      	beq.n	3ff8 <operateOnStagedEvent+0x90>
			{
				m2mEventNo=stagedEventType;
    3fd4:	4b13      	ldr	r3, [pc, #76]	; (4024 <operateOnStagedEvent+0xbc>)
    3fd6:	781a      	ldrb	r2, [r3, #0]
    3fd8:	4b15      	ldr	r3, [pc, #84]	; (4030 <operateOnStagedEvent+0xc8>)
    3fda:	701a      	strb	r2, [r3, #0]
				m2mEvent=true;
    3fdc:	4b15      	ldr	r3, [pc, #84]	; (4034 <operateOnStagedEvent+0xcc>)
    3fde:	2201      	movs	r2, #1
    3fe0:	701a      	strb	r2, [r3, #0]
				m2mEventStaged=false;
    3fe2:	4b12      	ldr	r3, [pc, #72]	; (402c <operateOnStagedEvent+0xc4>)
    3fe4:	2200      	movs	r2, #0
    3fe6:	701a      	strb	r2, [r3, #0]
    3fe8:	e006      	b.n	3ff8 <operateOnStagedEvent+0x90>
			}
		}
		else
		{
			actionType=stagedEventType;
    3fea:	4b0e      	ldr	r3, [pc, #56]	; (4024 <operateOnStagedEvent+0xbc>)
    3fec:	781a      	ldrb	r2, [r3, #0]
    3fee:	4b0e      	ldr	r3, [pc, #56]	; (4028 <operateOnStagedEvent+0xc0>)
    3ff0:	701a      	strb	r2, [r3, #0]
			eventStaged=false;
    3ff2:	4b04      	ldr	r3, [pc, #16]	; (4004 <operateOnStagedEvent+0x9c>)
    3ff4:	2200      	movs	r2, #0
    3ff6:	701a      	strb	r2, [r3, #0]
		}
		makeResponseAction();
    3ff8:	4b0f      	ldr	r3, [pc, #60]	; (4038 <operateOnStagedEvent+0xd0>)
    3ffa:	4798      	blx	r3
	}
}
    3ffc:	46c0      	nop			; (mov r8, r8)
    3ffe:	46bd      	mov	sp, r7
    4000:	b002      	add	sp, #8
    4002:	bd80      	pop	{r7, pc}
    4004:	2000078a 	.word	0x2000078a
    4008:	2000064c 	.word	0x2000064c
    400c:	2000073a 	.word	0x2000073a
    4010:	200006c9 	.word	0x200006c9
    4014:	0000f1fd 	.word	0x0000f1fd
    4018:	2000079c 	.word	0x2000079c
    401c:	0000ea60 	.word	0x0000ea60
    4020:	20000618 	.word	0x20000618
    4024:	2000073c 	.word	0x2000073c
    4028:	2000072b 	.word	0x2000072b
    402c:	20000756 	.word	0x20000756
    4030:	20000705 	.word	0x20000705
    4034:	2000070b 	.word	0x2000070b
    4038:	0000403d 	.word	0x0000403d

0000403c <makeResponseAction>:

void makeResponseAction(void)
{
    403c:	b580      	push	{r7, lr}
    403e:	af00      	add	r7, sp, #0
	if(user_settings_parameter_struct.responseAddress != 'N' || m2mEvent)
    4040:	4b07      	ldr	r3, [pc, #28]	; (4060 <makeResponseAction+0x24>)
    4042:	795b      	ldrb	r3, [r3, #5]
    4044:	2b4e      	cmp	r3, #78	; 0x4e
    4046:	d103      	bne.n	4050 <makeResponseAction+0x14>
    4048:	4b06      	ldr	r3, [pc, #24]	; (4064 <makeResponseAction+0x28>)
    404a:	781b      	ldrb	r3, [r3, #0]
    404c:	2b00      	cmp	r3, #0
    404e:	d004      	beq.n	405a <makeResponseAction+0x1e>
	{
		freezeIncomingCalls = true;
    4050:	4b05      	ldr	r3, [pc, #20]	; (4068 <makeResponseAction+0x2c>)
    4052:	2201      	movs	r2, #1
    4054:	701a      	strb	r2, [r3, #0]
		//acceptCommands();
		makeCall();
    4056:	4b05      	ldr	r3, [pc, #20]	; (406c <makeResponseAction+0x30>)
    4058:	4798      	blx	r3
	}
}
    405a:	46c0      	nop			; (mov r8, r8)
    405c:	46bd      	mov	sp, r7
    405e:	bd80      	pop	{r7, pc}
    4060:	2000064c 	.word	0x2000064c
    4064:	2000070b 	.word	0x2000070b
    4068:	2000070c 	.word	0x2000070c
    406c:	000042a5 	.word	0x000042a5

00004070 <endCall>:

void endCall(void)
{
    4070:	b580      	push	{r7, lr}
    4072:	af00      	add	r7, sp, #0
	nr  = 0;
    4074:	4b6d      	ldr	r3, [pc, #436]	; (422c <endCall+0x1bc>)
    4076:	2200      	movs	r2, #0
    4078:	701a      	strb	r2, [r3, #0]
	inCall=false;
    407a:	4b6d      	ldr	r3, [pc, #436]	; (4230 <endCall+0x1c0>)
    407c:	2200      	movs	r2, #0
    407e:	701a      	strb	r2, [r3, #0]
	
	gsm_hangup_call();
    4080:	4b6c      	ldr	r3, [pc, #432]	; (4234 <endCall+0x1c4>)
    4082:	4798      	blx	r3
	setCallStateOnLCD(LCDCALLSTATE_IDLE,NULL,false);
    4084:	2200      	movs	r2, #0
    4086:	2100      	movs	r1, #0
    4088:	2000      	movs	r0, #0
    408a:	4b6b      	ldr	r3, [pc, #428]	; (4238 <endCall+0x1c8>)
    408c:	4798      	blx	r3
	//unsigned long temp = xTaskGetTickCount();
	vTaskDelay(1000);
    408e:	23fa      	movs	r3, #250	; 0xfa
    4090:	009b      	lsls	r3, r3, #2
    4092:	0018      	movs	r0, r3
    4094:	4b69      	ldr	r3, [pc, #420]	; (423c <endCall+0x1cc>)
    4096:	4798      	blx	r3
	freezeIncomingCalls = false;
    4098:	4b69      	ldr	r3, [pc, #420]	; (4240 <endCall+0x1d0>)
    409a:	2200      	movs	r2, #0
    409c:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
    409e:	4b69      	ldr	r3, [pc, #420]	; (4244 <endCall+0x1d4>)
    40a0:	785b      	ldrb	r3, [r3, #1]
    40a2:	2b00      	cmp	r3, #0
    40a4:	d002      	beq.n	40ac <endCall+0x3c>
	{
		zeroPressed=false;
    40a6:	4b68      	ldr	r3, [pc, #416]	; (4248 <endCall+0x1d8>)
    40a8:	2200      	movs	r2, #0
    40aa:	701a      	strb	r2, [r3, #0]
	}
	
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
    40ac:	4b65      	ldr	r3, [pc, #404]	; (4244 <endCall+0x1d4>)
    40ae:	78db      	ldrb	r3, [r3, #3]
    40b0:	2b01      	cmp	r3, #1
    40b2:	d11d      	bne.n	40f0 <endCall+0x80>
	((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O' && !m2mEvent):
    40b4:	4b65      	ldr	r3, [pc, #404]	; (424c <endCall+0x1dc>)
    40b6:	781b      	ldrb	r3, [r3, #0]
    40b8:	b2db      	uxtb	r3, r3
    40ba:	2b4e      	cmp	r3, #78	; 0x4e
    40bc:	d004      	beq.n	40c8 <endCall+0x58>
    40be:	4b63      	ldr	r3, [pc, #396]	; (424c <endCall+0x1dc>)
    40c0:	781b      	ldrb	r3, [r3, #0]
    40c2:	b2db      	uxtb	r3, r3
    40c4:	2b52      	cmp	r3, #82	; 0x52
    40c6:	d10d      	bne.n	40e4 <endCall+0x74>
    40c8:	4b61      	ldr	r3, [pc, #388]	; (4250 <endCall+0x1e0>)
    40ca:	781b      	ldrb	r3, [r3, #0]
    40cc:	b2db      	uxtb	r3, r3
    40ce:	2b4f      	cmp	r3, #79	; 0x4f
    40d0:	d108      	bne.n	40e4 <endCall+0x74>
    40d2:	4b60      	ldr	r3, [pc, #384]	; (4254 <endCall+0x1e4>)
    40d4:	781b      	ldrb	r3, [r3, #0]
    40d6:	2201      	movs	r2, #1
    40d8:	4053      	eors	r3, r2
    40da:	b2db      	uxtb	r3, r3
    40dc:	2b00      	cmp	r3, #0
    40de:	d001      	beq.n	40e4 <endCall+0x74>
    40e0:	2301      	movs	r3, #1
    40e2:	e000      	b.n	40e6 <endCall+0x76>
    40e4:	2300      	movs	r3, #0
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
    40e6:	1c1a      	adds	r2, r3, #0
    40e8:	2301      	movs	r3, #1
    40ea:	4013      	ands	r3, r2
    40ec:	b2db      	uxtb	r3, r3
    40ee:	e015      	b.n	411c <endCall+0xac>
	((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O'))
    40f0:	4b56      	ldr	r3, [pc, #344]	; (424c <endCall+0x1dc>)
    40f2:	781b      	ldrb	r3, [r3, #0]
    40f4:	b2db      	uxtb	r3, r3
    40f6:	2b4e      	cmp	r3, #78	; 0x4e
    40f8:	d004      	beq.n	4104 <endCall+0x94>
    40fa:	4b54      	ldr	r3, [pc, #336]	; (424c <endCall+0x1dc>)
    40fc:	781b      	ldrb	r3, [r3, #0]
    40fe:	b2db      	uxtb	r3, r3
    4100:	2b52      	cmp	r3, #82	; 0x52
    4102:	d106      	bne.n	4112 <endCall+0xa2>
    4104:	4b52      	ldr	r3, [pc, #328]	; (4250 <endCall+0x1e0>)
    4106:	781b      	ldrb	r3, [r3, #0]
    4108:	b2db      	uxtb	r3, r3
    410a:	2b4f      	cmp	r3, #79	; 0x4f
    410c:	d101      	bne.n	4112 <endCall+0xa2>
    410e:	2301      	movs	r3, #1
    4110:	e000      	b.n	4114 <endCall+0xa4>
    4112:	2300      	movs	r3, #0
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
    4114:	1c1a      	adds	r2, r3, #0
    4116:	2301      	movs	r3, #1
    4118:	4013      	ands	r3, r2
    411a:	b2db      	uxtb	r3, r3
    411c:	2b00      	cmp	r3, #0
    411e:	d021      	beq.n	4164 <endCall+0xf4>
	{
		if((retries==0) && !callAccepted && (user_settings_parameter_struct.responseAddress=='T') && (user_count_struct.current_user_no_count>1))
    4120:	4b4d      	ldr	r3, [pc, #308]	; (4258 <endCall+0x1e8>)
    4122:	781b      	ldrb	r3, [r3, #0]
    4124:	2b00      	cmp	r3, #0
    4126:	d11d      	bne.n	4164 <endCall+0xf4>
    4128:	4b4c      	ldr	r3, [pc, #304]	; (425c <endCall+0x1ec>)
    412a:	781b      	ldrb	r3, [r3, #0]
    412c:	2201      	movs	r2, #1
    412e:	4053      	eors	r3, r2
    4130:	b2db      	uxtb	r3, r3
    4132:	2b00      	cmp	r3, #0
    4134:	d016      	beq.n	4164 <endCall+0xf4>
    4136:	4b4a      	ldr	r3, [pc, #296]	; (4260 <endCall+0x1f0>)
    4138:	795b      	ldrb	r3, [r3, #5]
    413a:	2b54      	cmp	r3, #84	; 0x54
    413c:	d112      	bne.n	4164 <endCall+0xf4>
    413e:	4b49      	ldr	r3, [pc, #292]	; (4264 <endCall+0x1f4>)
    4140:	789b      	ldrb	r3, [r3, #2]
    4142:	2b01      	cmp	r3, #1
    4144:	d90e      	bls.n	4164 <endCall+0xf4>
		{
			retries=1;
    4146:	4b44      	ldr	r3, [pc, #272]	; (4258 <endCall+0x1e8>)
    4148:	2201      	movs	r2, #1
    414a:	701a      	strb	r2, [r3, #0]
			eventStaged=true;
    414c:	4b46      	ldr	r3, [pc, #280]	; (4268 <endCall+0x1f8>)
    414e:	2201      	movs	r2, #1
    4150:	701a      	strb	r2, [r3, #0]
			tempEventStageTime=xTaskGetTickCount();
    4152:	4b46      	ldr	r3, [pc, #280]	; (426c <endCall+0x1fc>)
    4154:	4798      	blx	r3
    4156:	0002      	movs	r2, r0
    4158:	4b45      	ldr	r3, [pc, #276]	; (4270 <endCall+0x200>)
    415a:	601a      	str	r2, [r3, #0]
			stagedEventType=actionType;
    415c:	4b45      	ldr	r3, [pc, #276]	; (4274 <endCall+0x204>)
    415e:	781a      	ldrb	r2, [r3, #0]
    4160:	4b45      	ldr	r3, [pc, #276]	; (4278 <endCall+0x208>)
    4162:	701a      	strb	r2, [r3, #0]
		}
	}
	
	if (factory_settings_parameter_struct.ENABLE_M2M)
    4164:	4b37      	ldr	r3, [pc, #220]	; (4244 <endCall+0x1d4>)
    4166:	78db      	ldrb	r3, [r3, #3]
    4168:	2b00      	cmp	r3, #0
    416a:	d047      	beq.n	41fc <endCall+0x18c>
	{
		if((currentStatus == 'I' || currentStatus=='R') && currentCallStatus == 'O' && m2mEvent && m2m_Numbers_struct.m2mSetting)
    416c:	4b37      	ldr	r3, [pc, #220]	; (424c <endCall+0x1dc>)
    416e:	781b      	ldrb	r3, [r3, #0]
    4170:	b2db      	uxtb	r3, r3
    4172:	2b49      	cmp	r3, #73	; 0x49
    4174:	d004      	beq.n	4180 <endCall+0x110>
    4176:	4b35      	ldr	r3, [pc, #212]	; (424c <endCall+0x1dc>)
    4178:	781b      	ldrb	r3, [r3, #0]
    417a:	b2db      	uxtb	r3, r3
    417c:	2b52      	cmp	r3, #82	; 0x52
    417e:	d137      	bne.n	41f0 <endCall+0x180>
    4180:	4b33      	ldr	r3, [pc, #204]	; (4250 <endCall+0x1e0>)
    4182:	781b      	ldrb	r3, [r3, #0]
    4184:	b2db      	uxtb	r3, r3
    4186:	2b4f      	cmp	r3, #79	; 0x4f
    4188:	d132      	bne.n	41f0 <endCall+0x180>
    418a:	4b32      	ldr	r3, [pc, #200]	; (4254 <endCall+0x1e4>)
    418c:	781b      	ldrb	r3, [r3, #0]
    418e:	2b00      	cmp	r3, #0
    4190:	d02e      	beq.n	41f0 <endCall+0x180>
    4192:	4b3a      	ldr	r3, [pc, #232]	; (427c <endCall+0x20c>)
    4194:	795b      	ldrb	r3, [r3, #5]
    4196:	2b00      	cmp	r3, #0
    4198:	d02a      	beq.n	41f0 <endCall+0x180>
		{
			m2mEventCalls++;
    419a:	4b39      	ldr	r3, [pc, #228]	; (4280 <endCall+0x210>)
    419c:	781b      	ldrb	r3, [r3, #0]
    419e:	3301      	adds	r3, #1
    41a0:	b2da      	uxtb	r2, r3
    41a2:	4b37      	ldr	r3, [pc, #220]	; (4280 <endCall+0x210>)
    41a4:	701a      	strb	r2, [r3, #0]
			if(m2mAck)
    41a6:	4b37      	ldr	r3, [pc, #220]	; (4284 <endCall+0x214>)
    41a8:	781b      	ldrb	r3, [r3, #0]
    41aa:	2b00      	cmp	r3, #0
    41ac:	d006      	beq.n	41bc <endCall+0x14c>
			{
				setM2MEventState(m2mEventNo,ME_CLEARED);
    41ae:	4b36      	ldr	r3, [pc, #216]	; (4288 <endCall+0x218>)
    41b0:	781b      	ldrb	r3, [r3, #0]
    41b2:	2100      	movs	r1, #0
    41b4:	0018      	movs	r0, r3
    41b6:	4b35      	ldr	r3, [pc, #212]	; (428c <endCall+0x21c>)
    41b8:	4798      	blx	r3
    41ba:	e016      	b.n	41ea <endCall+0x17a>
			}
			else
			{
				if(m2mEventCalls<2)
    41bc:	4b30      	ldr	r3, [pc, #192]	; (4280 <endCall+0x210>)
    41be:	781b      	ldrb	r3, [r3, #0]
    41c0:	2b01      	cmp	r3, #1
    41c2:	d80c      	bhi.n	41de <endCall+0x16e>
				{
					tempEventStageTime=xTaskGetTickCount();
    41c4:	4b29      	ldr	r3, [pc, #164]	; (426c <endCall+0x1fc>)
    41c6:	4798      	blx	r3
    41c8:	0002      	movs	r2, r0
    41ca:	4b29      	ldr	r3, [pc, #164]	; (4270 <endCall+0x200>)
    41cc:	601a      	str	r2, [r3, #0]
					stagedEventType=m2mEventNo;
    41ce:	4b2e      	ldr	r3, [pc, #184]	; (4288 <endCall+0x218>)
    41d0:	781a      	ldrb	r2, [r3, #0]
    41d2:	4b29      	ldr	r3, [pc, #164]	; (4278 <endCall+0x208>)
    41d4:	701a      	strb	r2, [r3, #0]
					m2mEventStaged=true;
    41d6:	4b2e      	ldr	r3, [pc, #184]	; (4290 <endCall+0x220>)
    41d8:	2201      	movs	r2, #1
    41da:	701a      	strb	r2, [r3, #0]
    41dc:	e005      	b.n	41ea <endCall+0x17a>
				}
				else
				{
					setM2MEventState(m2mEventNo,ME_NOTAVAILABLE);
    41de:	4b2a      	ldr	r3, [pc, #168]	; (4288 <endCall+0x218>)
    41e0:	781b      	ldrb	r3, [r3, #0]
    41e2:	2103      	movs	r1, #3
    41e4:	0018      	movs	r0, r3
    41e6:	4b29      	ldr	r3, [pc, #164]	; (428c <endCall+0x21c>)
    41e8:	4798      	blx	r3
				}
			}
			m2mEvent = false;
    41ea:	4b1a      	ldr	r3, [pc, #104]	; (4254 <endCall+0x1e4>)
    41ec:	2200      	movs	r2, #0
    41ee:	701a      	strb	r2, [r3, #0]
		}
		keyPressed=false;
    41f0:	4b28      	ldr	r3, [pc, #160]	; (4294 <endCall+0x224>)
    41f2:	2200      	movs	r2, #0
    41f4:	701a      	strb	r2, [r3, #0]
		m2mAck=false;
    41f6:	4b23      	ldr	r3, [pc, #140]	; (4284 <endCall+0x214>)
    41f8:	2200      	movs	r2, #0
    41fa:	701a      	strb	r2, [r3, #0]
	}
	callAccepted = false;
    41fc:	4b17      	ldr	r3, [pc, #92]	; (425c <endCall+0x1ec>)
    41fe:	2200      	movs	r2, #0
    4200:	701a      	strb	r2, [r3, #0]
	currentStatus = 'N';
    4202:	4b12      	ldr	r3, [pc, #72]	; (424c <endCall+0x1dc>)
    4204:	224e      	movs	r2, #78	; 0x4e
    4206:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'N';
    4208:	4b11      	ldr	r3, [pc, #68]	; (4250 <endCall+0x1e0>)
    420a:	224e      	movs	r2, #78	; 0x4e
    420c:	701a      	strb	r2, [r3, #0]

	isRegisteredNumber=false;
    420e:	4b22      	ldr	r3, [pc, #136]	; (4298 <endCall+0x228>)
    4210:	2200      	movs	r2, #0
    4212:	701a      	strb	r2, [r3, #0]
	obtainEventTimer = xTaskGetTickCount();
    4214:	4b15      	ldr	r3, [pc, #84]	; (426c <endCall+0x1fc>)
    4216:	4798      	blx	r3
    4218:	0002      	movs	r2, r0
    421a:	4b20      	ldr	r3, [pc, #128]	; (429c <endCall+0x22c>)
    421c:	601a      	str	r2, [r3, #0]
	obtainNewEvent = false;
    421e:	4b20      	ldr	r3, [pc, #128]	; (42a0 <endCall+0x230>)
    4220:	2200      	movs	r2, #0
    4222:	701a      	strb	r2, [r3, #0]
}
    4224:	46c0      	nop			; (mov r8, r8)
    4226:	46bd      	mov	sp, r7
    4228:	bd80      	pop	{r7, pc}
    422a:	46c0      	nop			; (mov r8, r8)
    422c:	200006c8 	.word	0x200006c8
    4230:	20000764 	.word	0x20000764
    4234:	00002dc5 	.word	0x00002dc5
    4238:	0000bbdd 	.word	0x0000bbdd
    423c:	0000ee99 	.word	0x0000ee99
    4240:	2000070c 	.word	0x2000070c
    4244:	20000618 	.word	0x20000618
    4248:	200007b3 	.word	0x200007b3
    424c:	20000798 	.word	0x20000798
    4250:	20000757 	.word	0x20000757
    4254:	2000070b 	.word	0x2000070b
    4258:	200006c9 	.word	0x200006c9
    425c:	20000766 	.word	0x20000766
    4260:	2000064c 	.word	0x2000064c
    4264:	20000600 	.word	0x20000600
    4268:	2000078a 	.word	0x2000078a
    426c:	0000f1fd 	.word	0x0000f1fd
    4270:	2000079c 	.word	0x2000079c
    4274:	2000072b 	.word	0x2000072b
    4278:	2000073c 	.word	0x2000073c
    427c:	20000544 	.word	0x20000544
    4280:	2000078b 	.word	0x2000078b
    4284:	20000704 	.word	0x20000704
    4288:	20000705 	.word	0x20000705
    428c:	0000ac3d 	.word	0x0000ac3d
    4290:	20000756 	.word	0x20000756
    4294:	20000788 	.word	0x20000788
    4298:	20000760 	.word	0x20000760
    429c:	200007b8 	.word	0x200007b8
    42a0:	2000073a 	.word	0x2000073a

000042a4 <makeCall>:


void makeCall(void)
{
    42a4:	b580      	push	{r7, lr}
    42a6:	b086      	sub	sp, #24
    42a8:	af00      	add	r7, sp, #0
	inCall=true;
    42aa:	4b20      	ldr	r3, [pc, #128]	; (432c <makeCall+0x88>)
    42ac:	2201      	movs	r2, #1
    42ae:	701a      	strb	r2, [r3, #0]
	
	char command[20] = {0};
    42b0:	1d3b      	adds	r3, r7, #4
    42b2:	0018      	movs	r0, r3
    42b4:	2314      	movs	r3, #20
    42b6:	001a      	movs	r2, r3
    42b8:	2100      	movs	r1, #0
    42ba:	4b1d      	ldr	r3, [pc, #116]	; (4330 <makeCall+0x8c>)
    42bc:	4798      	blx	r3
	
	if(m2m_Numbers_struct.m2mSetting && m2mEvent)
    42be:	4b1d      	ldr	r3, [pc, #116]	; (4334 <makeCall+0x90>)
    42c0:	795b      	ldrb	r3, [r3, #5]
    42c2:	2b00      	cmp	r3, #0
    42c4:	d008      	beq.n	42d8 <makeCall+0x34>
    42c6:	4b1c      	ldr	r3, [pc, #112]	; (4338 <makeCall+0x94>)
    42c8:	781b      	ldrb	r3, [r3, #0]
    42ca:	2b00      	cmp	r3, #0
    42cc:	d004      	beq.n	42d8 <makeCall+0x34>
	{
		getM2MRemoteNumber(command);
    42ce:	1d3b      	adds	r3, r7, #4
    42d0:	0018      	movs	r0, r3
    42d2:	4b1a      	ldr	r3, [pc, #104]	; (433c <makeCall+0x98>)
    42d4:	4798      	blx	r3
    42d6:	e00f      	b.n	42f8 <makeCall+0x54>
	}
	else
	{
		if(retries)
    42d8:	4b19      	ldr	r3, [pc, #100]	; (4340 <makeCall+0x9c>)
    42da:	781b      	ldrb	r3, [r3, #0]
    42dc:	2b00      	cmp	r3, #0
    42de:	d007      	beq.n	42f0 <makeCall+0x4c>
		{
			getIndexedNumber(command,user_count_struct.secondaryNumberIndex);
    42e0:	4b18      	ldr	r3, [pc, #96]	; (4344 <makeCall+0xa0>)
    42e2:	791a      	ldrb	r2, [r3, #4]
    42e4:	1d3b      	adds	r3, r7, #4
    42e6:	0011      	movs	r1, r2
    42e8:	0018      	movs	r0, r3
    42ea:	4b17      	ldr	r3, [pc, #92]	; (4348 <makeCall+0xa4>)
    42ec:	4798      	blx	r3
    42ee:	e003      	b.n	42f8 <makeCall+0x54>
		}
		else
		{
			getActiveNumber(command);
    42f0:	1d3b      	adds	r3, r7, #4
    42f2:	0018      	movs	r0, r3
    42f4:	4b15      	ldr	r3, [pc, #84]	; (434c <makeCall+0xa8>)
    42f6:	4798      	blx	r3
		}
	}
	gsm_call_to_dial_a_number(command);
    42f8:	1d3b      	adds	r3, r7, #4
    42fa:	0018      	movs	r0, r3
    42fc:	4b14      	ldr	r3, [pc, #80]	; (4350 <makeCall+0xac>)
    42fe:	4798      	blx	r3
	setCallStateOnLCD(LCDCALLSTATE_OUTGOING,command,false);
    4300:	1d3b      	adds	r3, r7, #4
    4302:	2200      	movs	r2, #0
    4304:	0019      	movs	r1, r3
    4306:	2003      	movs	r0, #3
    4308:	4b12      	ldr	r3, [pc, #72]	; (4354 <makeCall+0xb0>)
    430a:	4798      	blx	r3
	callCutWait = xTaskGetTickCount();
    430c:	4b12      	ldr	r3, [pc, #72]	; (4358 <makeCall+0xb4>)
    430e:	4798      	blx	r3
    4310:	0002      	movs	r2, r0
    4312:	4b12      	ldr	r3, [pc, #72]	; (435c <makeCall+0xb8>)
    4314:	601a      	str	r2, [r3, #0]
	currentStatus = 'R';
    4316:	4b12      	ldr	r3, [pc, #72]	; (4360 <makeCall+0xbc>)
    4318:	2252      	movs	r2, #82	; 0x52
    431a:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'O';
    431c:	4b11      	ldr	r3, [pc, #68]	; (4364 <makeCall+0xc0>)
    431e:	224f      	movs	r2, #79	; 0x4f
    4320:	701a      	strb	r2, [r3, #0]
}
    4322:	46c0      	nop			; (mov r8, r8)
    4324:	46bd      	mov	sp, r7
    4326:	b006      	add	sp, #24
    4328:	bd80      	pop	{r7, pc}
    432a:	46c0      	nop			; (mov r8, r8)
    432c:	20000764 	.word	0x20000764
    4330:	00017b57 	.word	0x00017b57
    4334:	20000544 	.word	0x20000544
    4338:	2000070b 	.word	0x2000070b
    433c:	00000b09 	.word	0x00000b09
    4340:	200006c9 	.word	0x200006c9
    4344:	20000600 	.word	0x20000600
    4348:	00000919 	.word	0x00000919
    434c:	00000d21 	.word	0x00000d21
    4350:	00002c01 	.word	0x00002c01
    4354:	0000bbdd 	.word	0x0000bbdd
    4358:	0000f1fd 	.word	0x0000f1fd
    435c:	200007bc 	.word	0x200007bc
    4360:	20000798 	.word	0x20000798
    4364:	20000757 	.word	0x20000757

00004368 <acceptCall>:

void acceptCall(void)
{
    4368:	b580      	push	{r7, lr}
    436a:	af00      	add	r7, sp, #0
	isRegisteredNumber=false;   //clear flag for next call, in case any error occures and endCall() is not called for ending the call
    436c:	4b0a      	ldr	r3, [pc, #40]	; (4398 <acceptCall+0x30>)
    436e:	2200      	movs	r2, #0
    4370:	701a      	strb	r2, [r3, #0]
	callAccepted = true;
    4372:	4b0a      	ldr	r3, [pc, #40]	; (439c <acceptCall+0x34>)
    4374:	2201      	movs	r2, #1
    4376:	701a      	strb	r2, [r3, #0]
	gsm_answer_an_incomming_call();
    4378:	4b09      	ldr	r3, [pc, #36]	; (43a0 <acceptCall+0x38>)
    437a:	4798      	blx	r3
	currentStatus = 'I';
    437c:	4b09      	ldr	r3, [pc, #36]	; (43a4 <acceptCall+0x3c>)
    437e:	2249      	movs	r2, #73	; 0x49
    4380:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'I';
    4382:	4b09      	ldr	r3, [pc, #36]	; (43a8 <acceptCall+0x40>)
    4384:	2249      	movs	r2, #73	; 0x49
    4386:	701a      	strb	r2, [r3, #0]
	playSound('M',true);
    4388:	2101      	movs	r1, #1
    438a:	204d      	movs	r0, #77	; 0x4d
    438c:	4b07      	ldr	r3, [pc, #28]	; (43ac <acceptCall+0x44>)
    438e:	4798      	blx	r3
	//displayInIncomingCall
}
    4390:	46c0      	nop			; (mov r8, r8)
    4392:	46bd      	mov	sp, r7
    4394:	bd80      	pop	{r7, pc}
    4396:	46c0      	nop			; (mov r8, r8)
    4398:	20000760 	.word	0x20000760
    439c:	20000766 	.word	0x20000766
    43a0:	00002c99 	.word	0x00002c99
    43a4:	20000798 	.word	0x20000798
    43a8:	20000757 	.word	0x20000757
    43ac:	000043b1 	.word	0x000043b1

000043b0 <playSound>:

//void playSound(char actionType, bool newAction=true)
void playSound(char actionTypeT, bool newAction)
{
    43b0:	b580      	push	{r7, lr}
    43b2:	b082      	sub	sp, #8
    43b4:	af00      	add	r7, sp, #0
    43b6:	0002      	movs	r2, r0
    43b8:	1dfb      	adds	r3, r7, #7
    43ba:	701a      	strb	r2, [r3, #0]
    43bc:	1dbb      	adds	r3, r7, #6
    43be:	1c0a      	adds	r2, r1, #0
    43c0:	701a      	strb	r2, [r3, #0]
	gsm_stop_play_record_file();
    43c2:	4b14      	ldr	r3, [pc, #80]	; (4414 <playSound+0x64>)
    43c4:	4798      	blx	r3
	bplaySound = true;
    43c6:	4b14      	ldr	r3, [pc, #80]	; (4418 <playSound+0x68>)
    43c8:	2201      	movs	r2, #1
    43ca:	701a      	strb	r2, [r3, #0]
	if (newAction)
    43cc:	1dbb      	adds	r3, r7, #6
    43ce:	781b      	ldrb	r3, [r3, #0]
    43d0:	2b00      	cmp	r3, #0
    43d2:	d016      	beq.n	4402 <playSound+0x52>
	{
		maxPlayingFiles=1;
    43d4:	4b11      	ldr	r3, [pc, #68]	; (441c <playSound+0x6c>)
    43d6:	2201      	movs	r2, #1
    43d8:	701a      	strb	r2, [r3, #0]
		currentPlayingFileIndex=0;
    43da:	4b11      	ldr	r3, [pc, #68]	; (4420 <playSound+0x70>)
    43dc:	2200      	movs	r2, #0
    43de:	701a      	strb	r2, [r3, #0]
		playFilesList[currentPlayingFileIndex]=actionTypeT;
    43e0:	4b0f      	ldr	r3, [pc, #60]	; (4420 <playSound+0x70>)
    43e2:	781b      	ldrb	r3, [r3, #0]
    43e4:	0019      	movs	r1, r3
    43e6:	4b0f      	ldr	r3, [pc, #60]	; (4424 <playSound+0x74>)
    43e8:	1dfa      	adds	r2, r7, #7
    43ea:	7812      	ldrb	r2, [r2, #0]
    43ec:	545a      	strb	r2, [r3, r1]
		playFilesList[currentPlayingFileIndex+1]='\0';
    43ee:	4b0c      	ldr	r3, [pc, #48]	; (4420 <playSound+0x70>)
    43f0:	781b      	ldrb	r3, [r3, #0]
    43f2:	3301      	adds	r3, #1
    43f4:	4a0b      	ldr	r2, [pc, #44]	; (4424 <playSound+0x74>)
    43f6:	2100      	movs	r1, #0
    43f8:	54d1      	strb	r1, [r2, r3]
		actionType = actionTypeT;
    43fa:	4b0b      	ldr	r3, [pc, #44]	; (4428 <playSound+0x78>)
    43fc:	1dfa      	adds	r2, r7, #7
    43fe:	7812      	ldrb	r2, [r2, #0]
    4400:	701a      	strb	r2, [r3, #0]
	}
	playFile = actionTypeT;
    4402:	4b0a      	ldr	r3, [pc, #40]	; (442c <playSound+0x7c>)
    4404:	1dfa      	adds	r2, r7, #7
    4406:	7812      	ldrb	r2, [r2, #0]
    4408:	701a      	strb	r2, [r3, #0]
}
    440a:	46c0      	nop			; (mov r8, r8)
    440c:	46bd      	mov	sp, r7
    440e:	b002      	add	sp, #8
    4410:	bd80      	pop	{r7, pc}
    4412:	46c0      	nop			; (mov r8, r8)
    4414:	00002e25 	.word	0x00002e25
    4418:	20000801 	.word	0x20000801
    441c:	2000078c 	.word	0x2000078c
    4420:	2000077c 	.word	0x2000077c
    4424:	20000714 	.word	0x20000714
    4428:	2000072b 	.word	0x2000072b
    442c:	2000077b 	.word	0x2000077b

00004430 <playSoundElligible>:

bool playSoundElligible(void)
{
    4430:	b580      	push	{r7, lr}
    4432:	af00      	add	r7, sp, #0
	return (bplaySound && ((xTaskGetTickCount() - soundWait) > (soundWaitTime * 100)));
    4434:	4b0d      	ldr	r3, [pc, #52]	; (446c <playSoundElligible+0x3c>)
    4436:	781b      	ldrb	r3, [r3, #0]
    4438:	2b00      	cmp	r3, #0
    443a:	d00e      	beq.n	445a <playSoundElligible+0x2a>
    443c:	4b0c      	ldr	r3, [pc, #48]	; (4470 <playSoundElligible+0x40>)
    443e:	4798      	blx	r3
    4440:	0002      	movs	r2, r0
    4442:	4b0c      	ldr	r3, [pc, #48]	; (4474 <playSoundElligible+0x44>)
    4444:	681b      	ldr	r3, [r3, #0]
    4446:	1ad3      	subs	r3, r2, r3
    4448:	4a0b      	ldr	r2, [pc, #44]	; (4478 <playSoundElligible+0x48>)
    444a:	7812      	ldrb	r2, [r2, #0]
    444c:	0011      	movs	r1, r2
    444e:	2264      	movs	r2, #100	; 0x64
    4450:	434a      	muls	r2, r1
    4452:	4293      	cmp	r3, r2
    4454:	d901      	bls.n	445a <playSoundElligible+0x2a>
    4456:	2301      	movs	r3, #1
    4458:	e000      	b.n	445c <playSoundElligible+0x2c>
    445a:	2300      	movs	r3, #0
    445c:	1c1a      	adds	r2, r3, #0
    445e:	2301      	movs	r3, #1
    4460:	4013      	ands	r3, r2
    4462:	b2db      	uxtb	r3, r3
}
    4464:	0018      	movs	r0, r3
    4466:	46bd      	mov	sp, r7
    4468:	bd80      	pop	{r7, pc}
    446a:	46c0      	nop			; (mov r8, r8)
    446c:	20000801 	.word	0x20000801
    4470:	0000f1fd 	.word	0x0000f1fd
    4474:	200007e4 	.word	0x200007e4
    4478:	2000078d 	.word	0x2000078d

0000447c <triggerPlaySound>:

void triggerPlaySound(void)
{
    447c:	b580      	push	{r7, lr}
    447e:	af00      	add	r7, sp, #0
	if(maxPlayingFiles>1)
    4480:	4b0b      	ldr	r3, [pc, #44]	; (44b0 <triggerPlaySound+0x34>)
    4482:	781b      	ldrb	r3, [r3, #0]
    4484:	2b01      	cmp	r3, #1
    4486:	d906      	bls.n	4496 <triggerPlaySound+0x1a>
	{
		gsm_play_record_file((char*)playFile,false);
    4488:	4b0a      	ldr	r3, [pc, #40]	; (44b4 <triggerPlaySound+0x38>)
    448a:	781b      	ldrb	r3, [r3, #0]
    448c:	2100      	movs	r1, #0
    448e:	0018      	movs	r0, r3
    4490:	4b09      	ldr	r3, [pc, #36]	; (44b8 <triggerPlaySound+0x3c>)
    4492:	4798      	blx	r3
    4494:	e005      	b.n	44a2 <triggerPlaySound+0x26>
	}
	else
	{
		gsm_play_record_file((char*)playFile,true);
    4496:	4b07      	ldr	r3, [pc, #28]	; (44b4 <triggerPlaySound+0x38>)
    4498:	781b      	ldrb	r3, [r3, #0]
    449a:	2101      	movs	r1, #1
    449c:	0018      	movs	r0, r3
    449e:	4b06      	ldr	r3, [pc, #24]	; (44b8 <triggerPlaySound+0x3c>)
    44a0:	4798      	blx	r3
	}
	bplaySound = false;
    44a2:	4b06      	ldr	r3, [pc, #24]	; (44bc <triggerPlaySound+0x40>)
    44a4:	2200      	movs	r2, #0
    44a6:	701a      	strb	r2, [r3, #0]
}
    44a8:	46c0      	nop			; (mov r8, r8)
    44aa:	46bd      	mov	sp, r7
    44ac:	bd80      	pop	{r7, pc}
    44ae:	46c0      	nop			; (mov r8, r8)
    44b0:	2000078c 	.word	0x2000078c
    44b4:	2000077b 	.word	0x2000077b
    44b8:	00002e55 	.word	0x00002e55
    44bc:	20000801 	.word	0x20000801

000044c0 <playSoundAgain>:

void playSoundAgain(char *string)
{
    44c0:	b580      	push	{r7, lr}
    44c2:	b082      	sub	sp, #8
    44c4:	af00      	add	r7, sp, #0
    44c6:	6078      	str	r0, [r7, #4]
	if (!bplaySound && gsm_responseLine_is_StopSound_Received(string))
    44c8:	4b18      	ldr	r3, [pc, #96]	; (452c <playSoundAgain+0x6c>)
    44ca:	781b      	ldrb	r3, [r3, #0]
    44cc:	2201      	movs	r2, #1
    44ce:	4053      	eors	r3, r2
    44d0:	b2db      	uxtb	r3, r3
    44d2:	2b00      	cmp	r3, #0
    44d4:	d025      	beq.n	4522 <playSoundAgain+0x62>
    44d6:	687b      	ldr	r3, [r7, #4]
    44d8:	0018      	movs	r0, r3
    44da:	4b15      	ldr	r3, [pc, #84]	; (4530 <playSoundAgain+0x70>)
    44dc:	4798      	blx	r3
    44de:	1e03      	subs	r3, r0, #0
    44e0:	d01f      	beq.n	4522 <playSoundAgain+0x62>
	{
		if(maxPlayingFiles>1)
    44e2:	4b14      	ldr	r3, [pc, #80]	; (4534 <playSoundAgain+0x74>)
    44e4:	781b      	ldrb	r3, [r3, #0]
    44e6:	2b01      	cmp	r3, #1
    44e8:	d91b      	bls.n	4522 <playSoundAgain+0x62>
		{
			if(currentPlayingFileIndex<maxPlayingFiles-1)
    44ea:	4b13      	ldr	r3, [pc, #76]	; (4538 <playSoundAgain+0x78>)
    44ec:	781b      	ldrb	r3, [r3, #0]
    44ee:	001a      	movs	r2, r3
    44f0:	4b10      	ldr	r3, [pc, #64]	; (4534 <playSoundAgain+0x74>)
    44f2:	781b      	ldrb	r3, [r3, #0]
    44f4:	3b01      	subs	r3, #1
    44f6:	429a      	cmp	r2, r3
    44f8:	da0f      	bge.n	451a <playSoundAgain+0x5a>
			{
				playSound(playFilesList[++currentPlayingFileIndex],false);
    44fa:	4b0f      	ldr	r3, [pc, #60]	; (4538 <playSoundAgain+0x78>)
    44fc:	781b      	ldrb	r3, [r3, #0]
    44fe:	3301      	adds	r3, #1
    4500:	b2da      	uxtb	r2, r3
    4502:	4b0d      	ldr	r3, [pc, #52]	; (4538 <playSoundAgain+0x78>)
    4504:	701a      	strb	r2, [r3, #0]
    4506:	4b0c      	ldr	r3, [pc, #48]	; (4538 <playSoundAgain+0x78>)
    4508:	781b      	ldrb	r3, [r3, #0]
    450a:	001a      	movs	r2, r3
    450c:	4b0b      	ldr	r3, [pc, #44]	; (453c <playSoundAgain+0x7c>)
    450e:	5c9b      	ldrb	r3, [r3, r2]
    4510:	2100      	movs	r1, #0
    4512:	0018      	movs	r0, r3
    4514:	4b0a      	ldr	r3, [pc, #40]	; (4540 <playSoundAgain+0x80>)
    4516:	4798      	blx	r3
			{
				playSound('M',true);
			}
		}
	}
}
    4518:	e003      	b.n	4522 <playSoundAgain+0x62>
				playSound('M',true);
    451a:	2101      	movs	r1, #1
    451c:	204d      	movs	r0, #77	; 0x4d
    451e:	4b08      	ldr	r3, [pc, #32]	; (4540 <playSoundAgain+0x80>)
    4520:	4798      	blx	r3
}
    4522:	46c0      	nop			; (mov r8, r8)
    4524:	46bd      	mov	sp, r7
    4526:	b002      	add	sp, #8
    4528:	bd80      	pop	{r7, pc}
    452a:	46c0      	nop			; (mov r8, r8)
    452c:	20000801 	.word	0x20000801
    4530:	00003459 	.word	0x00003459
    4534:	2000078c 	.word	0x2000078c
    4538:	2000077c 	.word	0x2000077c
    453c:	20000714 	.word	0x20000714
    4540:	000043b1 	.word	0x000043b1

00004544 <playRepeatedFiles>:

void playRepeatedFiles(char *fileList)
{
    4544:	b580      	push	{r7, lr}
    4546:	b082      	sub	sp, #8
    4548:	af00      	add	r7, sp, #0
    454a:	6078      	str	r0, [r7, #4]
	if(strlen(fileList)<15)
    454c:	687b      	ldr	r3, [r7, #4]
    454e:	0018      	movs	r0, r3
    4550:	4b14      	ldr	r3, [pc, #80]	; (45a4 <playRepeatedFiles+0x60>)
    4552:	4798      	blx	r3
    4554:	0003      	movs	r3, r0
    4556:	2b0e      	cmp	r3, #14
    4558:	d81f      	bhi.n	459a <playRepeatedFiles+0x56>
	{
		currentPlayingFileIndex=0;
    455a:	4b13      	ldr	r3, [pc, #76]	; (45a8 <playRepeatedFiles+0x64>)
    455c:	2200      	movs	r2, #0
    455e:	701a      	strb	r2, [r3, #0]
		maxPlayingFiles=strlen(fileList);
    4560:	687b      	ldr	r3, [r7, #4]
    4562:	0018      	movs	r0, r3
    4564:	4b0f      	ldr	r3, [pc, #60]	; (45a4 <playRepeatedFiles+0x60>)
    4566:	4798      	blx	r3
    4568:	0003      	movs	r3, r0
    456a:	b2da      	uxtb	r2, r3
    456c:	4b0f      	ldr	r3, [pc, #60]	; (45ac <playRepeatedFiles+0x68>)
    456e:	701a      	strb	r2, [r3, #0]
		strcpy(playFilesList,fileList);
    4570:	687a      	ldr	r2, [r7, #4]
    4572:	4b0f      	ldr	r3, [pc, #60]	; (45b0 <playRepeatedFiles+0x6c>)
    4574:	0011      	movs	r1, r2
    4576:	0018      	movs	r0, r3
    4578:	4b0e      	ldr	r3, [pc, #56]	; (45b4 <playRepeatedFiles+0x70>)
    457a:	4798      	blx	r3
		soundWait = xTaskGetTickCount();
    457c:	4b0e      	ldr	r3, [pc, #56]	; (45b8 <playRepeatedFiles+0x74>)
    457e:	4798      	blx	r3
    4580:	0002      	movs	r2, r0
    4582:	4b0e      	ldr	r3, [pc, #56]	; (45bc <playRepeatedFiles+0x78>)
    4584:	601a      	str	r2, [r3, #0]
		playFile = playFilesList[currentPlayingFileIndex];
    4586:	4b08      	ldr	r3, [pc, #32]	; (45a8 <playRepeatedFiles+0x64>)
    4588:	781b      	ldrb	r3, [r3, #0]
    458a:	001a      	movs	r2, r3
    458c:	4b08      	ldr	r3, [pc, #32]	; (45b0 <playRepeatedFiles+0x6c>)
    458e:	5c9a      	ldrb	r2, [r3, r2]
    4590:	4b0b      	ldr	r3, [pc, #44]	; (45c0 <playRepeatedFiles+0x7c>)
    4592:	701a      	strb	r2, [r3, #0]
		bplaySound = true;
    4594:	4b0b      	ldr	r3, [pc, #44]	; (45c4 <playRepeatedFiles+0x80>)
    4596:	2201      	movs	r2, #1
    4598:	701a      	strb	r2, [r3, #0]
	}
}
    459a:	46c0      	nop			; (mov r8, r8)
    459c:	46bd      	mov	sp, r7
    459e:	b002      	add	sp, #8
    45a0:	bd80      	pop	{r7, pc}
    45a2:	46c0      	nop			; (mov r8, r8)
    45a4:	00017de7 	.word	0x00017de7
    45a8:	2000077c 	.word	0x2000077c
    45ac:	2000078c 	.word	0x2000078c
    45b0:	20000714 	.word	0x20000714
    45b4:	00017dd7 	.word	0x00017dd7
    45b8:	0000f1fd 	.word	0x0000f1fd
    45bc:	200007e4 	.word	0x200007e4
    45c0:	2000077b 	.word	0x2000077b
    45c4:	20000801 	.word	0x20000801

000045c8 <callTimerExpire>:

bool callTimerExpire(void)
{
    45c8:	b580      	push	{r7, lr}
    45ca:	af00      	add	r7, sp, #0
	return ((xTaskGetTickCount() - callCutWait) >= (callCutWaitTime * 100));
    45cc:	4b09      	ldr	r3, [pc, #36]	; (45f4 <callTimerExpire+0x2c>)
    45ce:	4798      	blx	r3
    45d0:	0002      	movs	r2, r0
    45d2:	4b09      	ldr	r3, [pc, #36]	; (45f8 <callTimerExpire+0x30>)
    45d4:	681b      	ldr	r3, [r3, #0]
    45d6:	1ad2      	subs	r2, r2, r3
    45d8:	4b08      	ldr	r3, [pc, #32]	; (45fc <callTimerExpire+0x34>)
    45da:	881b      	ldrh	r3, [r3, #0]
    45dc:	0019      	movs	r1, r3
    45de:	2364      	movs	r3, #100	; 0x64
    45e0:	434b      	muls	r3, r1
    45e2:	0019      	movs	r1, r3
    45e4:	2300      	movs	r3, #0
    45e6:	428a      	cmp	r2, r1
    45e8:	415b      	adcs	r3, r3
    45ea:	b2db      	uxtb	r3, r3
}
    45ec:	0018      	movs	r0, r3
    45ee:	46bd      	mov	sp, r7
    45f0:	bd80      	pop	{r7, pc}
    45f2:	46c0      	nop			; (mov r8, r8)
    45f4:	0000f1fd 	.word	0x0000f1fd
    45f8:	200007bc 	.word	0x200007bc
    45fc:	2000072c 	.word	0x2000072c

00004600 <OutGoingcallState>:

char OutGoingcallState(char *response)
{
    4600:	b580      	push	{r7, lr}
    4602:	b082      	sub	sp, #8
    4604:	af00      	add	r7, sp, #0
    4606:	6078      	str	r0, [r7, #4]
	if(strstr(response,"+CLCC: 1,0,2"))
    4608:	4a16      	ldr	r2, [pc, #88]	; (4664 <OutGoingcallState+0x64>)
    460a:	687b      	ldr	r3, [r7, #4]
    460c:	0011      	movs	r1, r2
    460e:	0018      	movs	r0, r3
    4610:	4b15      	ldr	r3, [pc, #84]	; (4668 <OutGoingcallState+0x68>)
    4612:	4798      	blx	r3
    4614:	1e03      	subs	r3, r0, #0
    4616:	d001      	beq.n	461c <OutGoingcallState+0x1c>
	{
		return 'D';								//dialling
    4618:	2344      	movs	r3, #68	; 0x44
    461a:	e01e      	b.n	465a <OutGoingcallState+0x5a>
	}
	else if (strstr(response,"+CLCC: 1,0,3"))
    461c:	4a13      	ldr	r2, [pc, #76]	; (466c <OutGoingcallState+0x6c>)
    461e:	687b      	ldr	r3, [r7, #4]
    4620:	0011      	movs	r1, r2
    4622:	0018      	movs	r0, r3
    4624:	4b10      	ldr	r3, [pc, #64]	; (4668 <OutGoingcallState+0x68>)
    4626:	4798      	blx	r3
    4628:	1e03      	subs	r3, r0, #0
    462a:	d001      	beq.n	4630 <OutGoingcallState+0x30>
	{
		return 'R';								//alerting
    462c:	2352      	movs	r3, #82	; 0x52
    462e:	e014      	b.n	465a <OutGoingcallState+0x5a>
	}
	else if (strstr(response,"+CLCC: 1,0,0"))
    4630:	4a0f      	ldr	r2, [pc, #60]	; (4670 <OutGoingcallState+0x70>)
    4632:	687b      	ldr	r3, [r7, #4]
    4634:	0011      	movs	r1, r2
    4636:	0018      	movs	r0, r3
    4638:	4b0b      	ldr	r3, [pc, #44]	; (4668 <OutGoingcallState+0x68>)
    463a:	4798      	blx	r3
    463c:	1e03      	subs	r3, r0, #0
    463e:	d001      	beq.n	4644 <OutGoingcallState+0x44>
	{
		return 'I';								//active call
    4640:	2349      	movs	r3, #73	; 0x49
    4642:	e00a      	b.n	465a <OutGoingcallState+0x5a>
	}
	else if (strstr(response,"+CLCC: 1,0,6"))
    4644:	4a0b      	ldr	r2, [pc, #44]	; (4674 <OutGoingcallState+0x74>)
    4646:	687b      	ldr	r3, [r7, #4]
    4648:	0011      	movs	r1, r2
    464a:	0018      	movs	r0, r3
    464c:	4b06      	ldr	r3, [pc, #24]	; (4668 <OutGoingcallState+0x68>)
    464e:	4798      	blx	r3
    4650:	1e03      	subs	r3, r0, #0
    4652:	d001      	beq.n	4658 <OutGoingcallState+0x58>
	{
		return 'E';								//call ended
    4654:	2345      	movs	r3, #69	; 0x45
    4656:	e000      	b.n	465a <OutGoingcallState+0x5a>
	}
	else
	{
		return 'N';
    4658:	234e      	movs	r3, #78	; 0x4e
	}
}
    465a:	0018      	movs	r0, r3
    465c:	46bd      	mov	sp, r7
    465e:	b002      	add	sp, #8
    4660:	bd80      	pop	{r7, pc}
    4662:	46c0      	nop			; (mov r8, r8)
    4664:	00018d4c 	.word	0x00018d4c
    4668:	00017e17 	.word	0x00017e17
    466c:	00018d5c 	.word	0x00018d5c
    4670:	00018d6c 	.word	0x00018d6c
    4674:	00018d7c 	.word	0x00018d7c

00004678 <registerEvent>:

bool registerEvent(char eventType)
{
    4678:	b580      	push	{r7, lr}
    467a:	b082      	sub	sp, #8
    467c:	af00      	add	r7, sp, #0
    467e:	0002      	movs	r2, r0
    4680:	1dfb      	adds	r3, r7, #7
    4682:	701a      	strb	r2, [r3, #0]
	//if(isSIMReset())
	//{
	//return false;
	//}
	if(user_count_struct.current_user_no_count==0 || user_settings_parameter_struct.responseAddress=='N')
    4684:	4b34      	ldr	r3, [pc, #208]	; (4758 <registerEvent+0xe0>)
    4686:	789b      	ldrb	r3, [r3, #2]
    4688:	2b00      	cmp	r3, #0
    468a:	d003      	beq.n	4694 <registerEvent+0x1c>
    468c:	4b33      	ldr	r3, [pc, #204]	; (475c <registerEvent+0xe4>)
    468e:	795b      	ldrb	r3, [r3, #5]
    4690:	2b4e      	cmp	r3, #78	; 0x4e
    4692:	d101      	bne.n	4698 <registerEvent+0x20>
	{
		return true;
    4694:	2301      	movs	r3, #1
    4696:	e05b      	b.n	4750 <registerEvent+0xd8>
	}
	if (!initialized)
    4698:	4b31      	ldr	r3, [pc, #196]	; (4760 <registerEvent+0xe8>)
    469a:	781b      	ldrb	r3, [r3, #0]
    469c:	b2db      	uxtb	r3, r3
    469e:	2201      	movs	r2, #1
    46a0:	4053      	eors	r3, r2
    46a2:	b2db      	uxtb	r3, r3
    46a4:	2b00      	cmp	r3, #0
    46a6:	d001      	beq.n	46ac <registerEvent+0x34>
	{
		return true;
    46a8:	2301      	movs	r3, #1
    46aa:	e051      	b.n	4750 <registerEvent+0xd8>
	}
	if(!eventStaged && actionType==eventType)
    46ac:	4b2d      	ldr	r3, [pc, #180]	; (4764 <registerEvent+0xec>)
    46ae:	781b      	ldrb	r3, [r3, #0]
    46b0:	2201      	movs	r2, #1
    46b2:	4053      	eors	r3, r2
    46b4:	b2db      	uxtb	r3, r3
    46b6:	2b00      	cmp	r3, #0
    46b8:	d007      	beq.n	46ca <registerEvent+0x52>
    46ba:	4b2b      	ldr	r3, [pc, #172]	; (4768 <registerEvent+0xf0>)
    46bc:	781b      	ldrb	r3, [r3, #0]
    46be:	1dfa      	adds	r2, r7, #7
    46c0:	7812      	ldrb	r2, [r2, #0]
    46c2:	429a      	cmp	r2, r3
    46c4:	d101      	bne.n	46ca <registerEvent+0x52>
	{
		return true;
    46c6:	2301      	movs	r3, #1
    46c8:	e042      	b.n	4750 <registerEvent+0xd8>
	}
	//if ((factory_settings_parameter_struct.ENABLE_M2M==true)?
	//(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged):
	//(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged))
	if(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged)
    46ca:	4b28      	ldr	r3, [pc, #160]	; (476c <registerEvent+0xf4>)
    46cc:	781b      	ldrb	r3, [r3, #0]
    46ce:	b2db      	uxtb	r3, r3
    46d0:	2b4e      	cmp	r3, #78	; 0x4e
    46d2:	d13c      	bne.n	474e <registerEvent+0xd6>
    46d4:	4b26      	ldr	r3, [pc, #152]	; (4770 <registerEvent+0xf8>)
    46d6:	781b      	ldrb	r3, [r3, #0]
    46d8:	b2db      	uxtb	r3, r3
    46da:	2b4e      	cmp	r3, #78	; 0x4e
    46dc:	d137      	bne.n	474e <registerEvent+0xd6>
    46de:	4b25      	ldr	r3, [pc, #148]	; (4774 <registerEvent+0xfc>)
    46e0:	781b      	ldrb	r3, [r3, #0]
    46e2:	2b00      	cmp	r3, #0
    46e4:	d033      	beq.n	474e <registerEvent+0xd6>
    46e6:	4b1f      	ldr	r3, [pc, #124]	; (4764 <registerEvent+0xec>)
    46e8:	781b      	ldrb	r3, [r3, #0]
    46ea:	2201      	movs	r2, #1
    46ec:	4053      	eors	r3, r2
    46ee:	b2db      	uxtb	r3, r3
    46f0:	2b00      	cmp	r3, #0
    46f2:	d02c      	beq.n	474e <registerEvent+0xd6>
    46f4:	4b20      	ldr	r3, [pc, #128]	; (4778 <registerEvent+0x100>)
    46f6:	781b      	ldrb	r3, [r3, #0]
    46f8:	2201      	movs	r2, #1
    46fa:	4053      	eors	r3, r2
    46fc:	b2db      	uxtb	r3, r3
    46fe:	2b00      	cmp	r3, #0
    4700:	d025      	beq.n	474e <registerEvent+0xd6>
	{
		if(user_settings_parameter_struct.noCallAddress && checkNoCallTime())
    4702:	4b16      	ldr	r3, [pc, #88]	; (475c <registerEvent+0xe4>)
    4704:	7a5b      	ldrb	r3, [r3, #9]
    4706:	2b00      	cmp	r3, #0
    4708:	d005      	beq.n	4716 <registerEvent+0x9e>
    470a:	4b1c      	ldr	r3, [pc, #112]	; (477c <registerEvent+0x104>)
    470c:	4798      	blx	r3
    470e:	1e03      	subs	r3, r0, #0
    4710:	d001      	beq.n	4716 <registerEvent+0x9e>
		{
			return true;
    4712:	2301      	movs	r3, #1
    4714:	e01c      	b.n	4750 <registerEvent+0xd8>
		}
		retries=0;
    4716:	4b1a      	ldr	r3, [pc, #104]	; (4780 <registerEvent+0x108>)
    4718:	2200      	movs	r2, #0
    471a:	701a      	strb	r2, [r3, #0]
		if(user_settings_parameter_struct.eventStageAddress>0x00)
    471c:	4b0f      	ldr	r3, [pc, #60]	; (475c <registerEvent+0xe4>)
    471e:	7a1b      	ldrb	r3, [r3, #8]
    4720:	2b00      	cmp	r3, #0
    4722:	d00c      	beq.n	473e <registerEvent+0xc6>
		{
			tempEventStageTime=xTaskGetTickCount();
    4724:	4b17      	ldr	r3, [pc, #92]	; (4784 <registerEvent+0x10c>)
    4726:	4798      	blx	r3
    4728:	0002      	movs	r2, r0
    472a:	4b17      	ldr	r3, [pc, #92]	; (4788 <registerEvent+0x110>)
    472c:	601a      	str	r2, [r3, #0]
			stagedEventType=eventType;
    472e:	4b17      	ldr	r3, [pc, #92]	; (478c <registerEvent+0x114>)
    4730:	1dfa      	adds	r2, r7, #7
    4732:	7812      	ldrb	r2, [r2, #0]
    4734:	701a      	strb	r2, [r3, #0]
			eventStaged=true;
    4736:	4b0b      	ldr	r3, [pc, #44]	; (4764 <registerEvent+0xec>)
    4738:	2201      	movs	r2, #1
    473a:	701a      	strb	r2, [r3, #0]
    473c:	e005      	b.n	474a <registerEvent+0xd2>
		}
		else
		{
			actionType = eventType;
    473e:	4b0a      	ldr	r3, [pc, #40]	; (4768 <registerEvent+0xf0>)
    4740:	1dfa      	adds	r2, r7, #7
    4742:	7812      	ldrb	r2, [r2, #0]
    4744:	701a      	strb	r2, [r3, #0]
			makeResponseAction();
    4746:	4b12      	ldr	r3, [pc, #72]	; (4790 <registerEvent+0x118>)
    4748:	4798      	blx	r3
		}
		return true;
    474a:	2301      	movs	r3, #1
    474c:	e000      	b.n	4750 <registerEvent+0xd8>
	}
	else
	{
		return false;
    474e:	2300      	movs	r3, #0
	}
}
    4750:	0018      	movs	r0, r3
    4752:	46bd      	mov	sp, r7
    4754:	b002      	add	sp, #8
    4756:	bd80      	pop	{r7, pc}
    4758:	20000600 	.word	0x20000600
    475c:	2000064c 	.word	0x2000064c
    4760:	20000765 	.word	0x20000765
    4764:	2000078a 	.word	0x2000078a
    4768:	2000072b 	.word	0x2000072b
    476c:	20000798 	.word	0x20000798
    4770:	20000757 	.word	0x20000757
    4774:	2000073a 	.word	0x2000073a
    4778:	20000756 	.word	0x20000756
    477c:	00006b09 	.word	0x00006b09
    4780:	200006c9 	.word	0x200006c9
    4784:	0000f1fd 	.word	0x0000f1fd
    4788:	2000079c 	.word	0x2000079c
    478c:	2000073c 	.word	0x2000073c
    4790:	0000403d 	.word	0x0000403d

00004794 <registerM2MEvent>:

void registerM2MEvent(uint8_t eventNo)
{
    4794:	b580      	push	{r7, lr}
    4796:	b082      	sub	sp, #8
    4798:	af00      	add	r7, sp, #0
    479a:	0002      	movs	r2, r0
    479c:	1dfb      	adds	r3, r7, #7
    479e:	701a      	strb	r2, [r3, #0]
	if (!initialized)
    47a0:	4b20      	ldr	r3, [pc, #128]	; (4824 <registerM2MEvent+0x90>)
    47a2:	781b      	ldrb	r3, [r3, #0]
    47a4:	b2db      	uxtb	r3, r3
    47a6:	2201      	movs	r2, #1
    47a8:	4053      	eors	r3, r2
    47aa:	b2db      	uxtb	r3, r3
    47ac:	2b00      	cmp	r3, #0
    47ae:	d006      	beq.n	47be <registerM2MEvent+0x2a>
	{
		setM2MEventState(eventNo,ME_CLEARED);
    47b0:	1dfb      	adds	r3, r7, #7
    47b2:	781b      	ldrb	r3, [r3, #0]
    47b4:	2100      	movs	r1, #0
    47b6:	0018      	movs	r0, r3
    47b8:	4b1b      	ldr	r3, [pc, #108]	; (4828 <registerM2MEvent+0x94>)
    47ba:	4798      	blx	r3
		return;
    47bc:	e02e      	b.n	481c <registerM2MEvent+0x88>
	}

	if (currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged)
    47be:	4b1b      	ldr	r3, [pc, #108]	; (482c <registerM2MEvent+0x98>)
    47c0:	781b      	ldrb	r3, [r3, #0]
    47c2:	b2db      	uxtb	r3, r3
    47c4:	2b4e      	cmp	r3, #78	; 0x4e
    47c6:	d129      	bne.n	481c <registerM2MEvent+0x88>
    47c8:	4b19      	ldr	r3, [pc, #100]	; (4830 <registerM2MEvent+0x9c>)
    47ca:	781b      	ldrb	r3, [r3, #0]
    47cc:	b2db      	uxtb	r3, r3
    47ce:	2b4e      	cmp	r3, #78	; 0x4e
    47d0:	d124      	bne.n	481c <registerM2MEvent+0x88>
    47d2:	4b18      	ldr	r3, [pc, #96]	; (4834 <registerM2MEvent+0xa0>)
    47d4:	781b      	ldrb	r3, [r3, #0]
    47d6:	2b00      	cmp	r3, #0
    47d8:	d020      	beq.n	481c <registerM2MEvent+0x88>
    47da:	4b17      	ldr	r3, [pc, #92]	; (4838 <registerM2MEvent+0xa4>)
    47dc:	781b      	ldrb	r3, [r3, #0]
    47de:	2201      	movs	r2, #1
    47e0:	4053      	eors	r3, r2
    47e2:	b2db      	uxtb	r3, r3
    47e4:	2b00      	cmp	r3, #0
    47e6:	d019      	beq.n	481c <registerM2MEvent+0x88>
    47e8:	4b14      	ldr	r3, [pc, #80]	; (483c <registerM2MEvent+0xa8>)
    47ea:	781b      	ldrb	r3, [r3, #0]
    47ec:	2201      	movs	r2, #1
    47ee:	4053      	eors	r3, r2
    47f0:	b2db      	uxtb	r3, r3
    47f2:	2b00      	cmp	r3, #0
    47f4:	d012      	beq.n	481c <registerM2MEvent+0x88>
	{
		setM2MEventState(eventNo,ME_SERVICING);
    47f6:	1dfb      	adds	r3, r7, #7
    47f8:	781b      	ldrb	r3, [r3, #0]
    47fa:	2102      	movs	r1, #2
    47fc:	0018      	movs	r0, r3
    47fe:	4b0a      	ldr	r3, [pc, #40]	; (4828 <registerM2MEvent+0x94>)
    4800:	4798      	blx	r3
		m2mEvent=true;
    4802:	4b0f      	ldr	r3, [pc, #60]	; (4840 <registerM2MEvent+0xac>)
    4804:	2201      	movs	r2, #1
    4806:	701a      	strb	r2, [r3, #0]
		m2mEventNo = eventNo;
    4808:	4b0e      	ldr	r3, [pc, #56]	; (4844 <registerM2MEvent+0xb0>)
    480a:	1dfa      	adds	r2, r7, #7
    480c:	7812      	ldrb	r2, [r2, #0]
    480e:	701a      	strb	r2, [r3, #0]
		m2mEventCalls=0;
    4810:	4b0d      	ldr	r3, [pc, #52]	; (4848 <registerM2MEvent+0xb4>)
    4812:	2200      	movs	r2, #0
    4814:	701a      	strb	r2, [r3, #0]
		makeResponseAction();
    4816:	4b0d      	ldr	r3, [pc, #52]	; (484c <registerM2MEvent+0xb8>)
    4818:	4798      	blx	r3
		return;
    481a:	46c0      	nop			; (mov r8, r8)
	}
}
    481c:	46bd      	mov	sp, r7
    481e:	b002      	add	sp, #8
    4820:	bd80      	pop	{r7, pc}
    4822:	46c0      	nop			; (mov r8, r8)
    4824:	20000765 	.word	0x20000765
    4828:	0000ac3d 	.word	0x0000ac3d
    482c:	20000798 	.word	0x20000798
    4830:	20000757 	.word	0x20000757
    4834:	2000073a 	.word	0x2000073a
    4838:	2000078a 	.word	0x2000078a
    483c:	20000756 	.word	0x20000756
    4840:	2000070b 	.word	0x2000070b
    4844:	20000705 	.word	0x20000705
    4848:	2000078b 	.word	0x2000078b
    484c:	0000403d 	.word	0x0000403d

00004850 <setMotorMGRResponse>:

void setMotorMGRResponse(char response)
{
    4850:	b580      	push	{r7, lr}
    4852:	b082      	sub	sp, #8
    4854:	af00      	add	r7, sp, #0
    4856:	0002      	movs	r2, r0
    4858:	1dfb      	adds	r3, r7, #7
    485a:	701a      	strb	r2, [r3, #0]
	if(currentStatus!='I')    // not in Call than return.
    485c:	4b07      	ldr	r3, [pc, #28]	; (487c <setMotorMGRResponse+0x2c>)
    485e:	781b      	ldrb	r3, [r3, #0]
    4860:	b2db      	uxtb	r3, r3
    4862:	2b49      	cmp	r3, #73	; 0x49
    4864:	d106      	bne.n	4874 <setMotorMGRResponse+0x24>
	{
		return;
	}
	playSound(response,true);
    4866:	1dfb      	adds	r3, r7, #7
    4868:	781b      	ldrb	r3, [r3, #0]
    486a:	2101      	movs	r1, #1
    486c:	0018      	movs	r0, r3
    486e:	4b04      	ldr	r3, [pc, #16]	; (4880 <setMotorMGRResponse+0x30>)
    4870:	4798      	blx	r3
    4872:	e000      	b.n	4876 <setMotorMGRResponse+0x26>
		return;
    4874:	46c0      	nop			; (mov r8, r8)
}
    4876:	46bd      	mov	sp, r7
    4878:	b002      	add	sp, #8
    487a:	bd80      	pop	{r7, pc}
    487c:	20000798 	.word	0x20000798
    4880:	000043b1 	.word	0x000043b1

00004884 <checkRespSMS>:

void checkRespSMS(char t1)
{
    4884:	b580      	push	{r7, lr}
    4886:	b082      	sub	sp, #8
    4888:	af00      	add	r7, sp, #0
    488a:	0002      	movs	r2, r0
    488c:	1dfb      	adds	r3, r7, #7
    488e:	701a      	strb	r2, [r3, #0]
	if (!callAccepted && user_settings_parameter_struct.responseAddress=='A')
    4890:	4b0c      	ldr	r3, [pc, #48]	; (48c4 <checkRespSMS+0x40>)
    4892:	781b      	ldrb	r3, [r3, #0]
    4894:	2201      	movs	r2, #1
    4896:	4053      	eors	r3, r2
    4898:	b2db      	uxtb	r3, r3
    489a:	2b00      	cmp	r3, #0
    489c:	d00d      	beq.n	48ba <checkRespSMS+0x36>
    489e:	4b0a      	ldr	r3, [pc, #40]	; (48c8 <checkRespSMS+0x44>)
    48a0:	795b      	ldrb	r3, [r3, #5]
    48a2:	2b41      	cmp	r3, #65	; 0x41
    48a4:	d109      	bne.n	48ba <checkRespSMS+0x36>
	{
		actionType = t1;
    48a6:	4b09      	ldr	r3, [pc, #36]	; (48cc <checkRespSMS+0x48>)
    48a8:	1dfa      	adds	r2, r7, #7
    48aa:	7812      	ldrb	r2, [r2, #0]
    48ac:	701a      	strb	r2, [r3, #0]
		sendSMS("",false,false);
    48ae:	4b08      	ldr	r3, [pc, #32]	; (48d0 <checkRespSMS+0x4c>)
    48b0:	2200      	movs	r2, #0
    48b2:	2100      	movs	r1, #0
    48b4:	0018      	movs	r0, r3
    48b6:	4b07      	ldr	r3, [pc, #28]	; (48d4 <checkRespSMS+0x50>)
    48b8:	4798      	blx	r3
	}
}
    48ba:	46c0      	nop			; (mov r8, r8)
    48bc:	46bd      	mov	sp, r7
    48be:	b002      	add	sp, #8
    48c0:	bd80      	pop	{r7, pc}
    48c2:	46c0      	nop			; (mov r8, r8)
    48c4:	20000766 	.word	0x20000766
    48c8:	2000064c 	.word	0x2000064c
    48cc:	2000072b 	.word	0x2000072b
    48d0:	00018d8c 	.word	0x00018d8c
    48d4:	00006bed 	.word	0x00006bed

000048d8 <subDTMF>:

void subDTMF(void)
{
    48d8:	b580      	push	{r7, lr}
    48da:	af00      	add	r7, sp, #0
	gsm_stop_play_record_file();
    48dc:	4b04      	ldr	r3, [pc, #16]	; (48f0 <subDTMF+0x18>)
    48de:	4798      	blx	r3
	callCutWait = xTaskGetTickCount();
    48e0:	4b04      	ldr	r3, [pc, #16]	; (48f4 <subDTMF+0x1c>)
    48e2:	4798      	blx	r3
    48e4:	0002      	movs	r2, r0
    48e6:	4b04      	ldr	r3, [pc, #16]	; (48f8 <subDTMF+0x20>)
    48e8:	601a      	str	r2, [r3, #0]
}
    48ea:	46c0      	nop			; (mov r8, r8)
    48ec:	46bd      	mov	sp, r7
    48ee:	bd80      	pop	{r7, pc}
    48f0:	00002e25 	.word	0x00002e25
    48f4:	0000f1fd 	.word	0x0000f1fd
    48f8:	200007bc 	.word	0x200007bc

000048fc <processOnDTMF>:

void processOnDTMF(char *dtmf_cmd)
{
    48fc:	b580      	push	{r7, lr}
    48fe:	b084      	sub	sp, #16
    4900:	af00      	add	r7, sp, #0
    4902:	6078      	str	r0, [r7, #4]
	char dtmf = dtmf_cmd[0];
    4904:	230f      	movs	r3, #15
    4906:	18fb      	adds	r3, r7, r3
    4908:	687a      	ldr	r2, [r7, #4]
    490a:	7812      	ldrb	r2, [r2, #0]
    490c:	701a      	strb	r2, [r3, #0]
	
	//LCD_clear();
	//lcd_printf("%c",dtmf);
	if (factory_settings_parameter_struct.ENABLE_M2M)
    490e:	4b6a      	ldr	r3, [pc, #424]	; (4ab8 <processOnDTMF+0x1bc>)
    4910:	78db      	ldrb	r3, [r3, #3]
    4912:	2b00      	cmp	r3, #0
    4914:	d010      	beq.n	4938 <processOnDTMF+0x3c>
	{
		if (m2mEvent)
    4916:	4b69      	ldr	r3, [pc, #420]	; (4abc <processOnDTMF+0x1c0>)
    4918:	781b      	ldrb	r3, [r3, #0]
    491a:	2b00      	cmp	r3, #0
    491c:	d100      	bne.n	4920 <processOnDTMF+0x24>
    491e:	e0c7      	b.n	4ab0 <processOnDTMF+0x1b4>
		{
			if(dtmf == 'A')
    4920:	230f      	movs	r3, #15
    4922:	18fb      	adds	r3, r7, r3
    4924:	781b      	ldrb	r3, [r3, #0]
    4926:	2b41      	cmp	r3, #65	; 0x41
    4928:	d000      	beq.n	492c <processOnDTMF+0x30>
    492a:	e0c1      	b.n	4ab0 <processOnDTMF+0x1b4>
			{
				m2mAck=true;
    492c:	4b64      	ldr	r3, [pc, #400]	; (4ac0 <processOnDTMF+0x1c4>)
    492e:	2201      	movs	r2, #1
    4930:	701a      	strb	r2, [r3, #0]
				gsm_hangup_call();
    4932:	4b64      	ldr	r3, [pc, #400]	; (4ac4 <processOnDTMF+0x1c8>)
    4934:	4798      	blx	r3
		{
			subDTMF();
			voltageOnCall();
		}
	}
}
    4936:	e0bb      	b.n	4ab0 <processOnDTMF+0x1b4>
		if (dtmf == '1') //Motor On
    4938:	230f      	movs	r3, #15
    493a:	18fb      	adds	r3, r7, r3
    493c:	781b      	ldrb	r3, [r3, #0]
    493e:	2b31      	cmp	r3, #49	; 0x31
    4940:	d106      	bne.n	4950 <processOnDTMF+0x54>
			subDTMF();
    4942:	4b61      	ldr	r3, [pc, #388]	; (4ac8 <processOnDTMF+0x1cc>)
    4944:	4798      	blx	r3
			startMotor(true,false);
    4946:	2100      	movs	r1, #0
    4948:	2001      	movs	r0, #1
    494a:	4b60      	ldr	r3, [pc, #384]	; (4acc <processOnDTMF+0x1d0>)
    494c:	4798      	blx	r3
}
    494e:	e0af      	b.n	4ab0 <processOnDTMF+0x1b4>
		else if (dtmf == '2') //Motor Off
    4950:	230f      	movs	r3, #15
    4952:	18fb      	adds	r3, r7, r3
    4954:	781b      	ldrb	r3, [r3, #0]
    4956:	2b32      	cmp	r3, #50	; 0x32
    4958:	d107      	bne.n	496a <processOnDTMF+0x6e>
			subDTMF();
    495a:	4b5b      	ldr	r3, [pc, #364]	; (4ac8 <processOnDTMF+0x1cc>)
    495c:	4798      	blx	r3
			stopMotor(true,false,false);
    495e:	2200      	movs	r2, #0
    4960:	2100      	movs	r1, #0
    4962:	2001      	movs	r0, #1
    4964:	4b5a      	ldr	r3, [pc, #360]	; (4ad0 <processOnDTMF+0x1d4>)
    4966:	4798      	blx	r3
}
    4968:	e0a2      	b.n	4ab0 <processOnDTMF+0x1b4>
		else if (dtmf == '3') //Status
    496a:	230f      	movs	r3, #15
    496c:	18fb      	adds	r3, r7, r3
    496e:	781b      	ldrb	r3, [r3, #0]
    4970:	2b33      	cmp	r3, #51	; 0x33
    4972:	d104      	bne.n	497e <processOnDTMF+0x82>
			subDTMF();
    4974:	4b54      	ldr	r3, [pc, #336]	; (4ac8 <processOnDTMF+0x1cc>)
    4976:	4798      	blx	r3
			statusOnCall();
    4978:	4b56      	ldr	r3, [pc, #344]	; (4ad4 <processOnDTMF+0x1d8>)
    497a:	4798      	blx	r3
}
    497c:	e098      	b.n	4ab0 <processOnDTMF+0x1b4>
		else if (dtmf == '4') //underground status
    497e:	230f      	movs	r3, #15
    4980:	18fb      	adds	r3, r7, r3
    4982:	781b      	ldrb	r3, [r3, #0]
    4984:	2b34      	cmp	r3, #52	; 0x34
    4986:	d10a      	bne.n	499e <processOnDTMF+0xa2>
			if (factory_settings_parameter_struct.ENABLE_WATER)
    4988:	4b4b      	ldr	r3, [pc, #300]	; (4ab8 <processOnDTMF+0x1bc>)
    498a:	795b      	ldrb	r3, [r3, #5]
    498c:	2b00      	cmp	r3, #0
    498e:	d100      	bne.n	4992 <processOnDTMF+0x96>
    4990:	e08e      	b.n	4ab0 <processOnDTMF+0x1b4>
				subDTMF();
    4992:	4b4d      	ldr	r3, [pc, #308]	; (4ac8 <processOnDTMF+0x1cc>)
    4994:	4798      	blx	r3
				waterStatusOnCall(false);
    4996:	2000      	movs	r0, #0
    4998:	4b4f      	ldr	r3, [pc, #316]	; (4ad8 <processOnDTMF+0x1dc>)
    499a:	4798      	blx	r3
}
    499c:	e088      	b.n	4ab0 <processOnDTMF+0x1b4>
		else if (dtmf == '5') //overHead Status
    499e:	230f      	movs	r3, #15
    49a0:	18fb      	adds	r3, r7, r3
    49a2:	781b      	ldrb	r3, [r3, #0]
    49a4:	2b35      	cmp	r3, #53	; 0x35
    49a6:	d10a      	bne.n	49be <processOnDTMF+0xc2>
			if (factory_settings_parameter_struct.ENABLE_GP)
    49a8:	4b43      	ldr	r3, [pc, #268]	; (4ab8 <processOnDTMF+0x1bc>)
    49aa:	791b      	ldrb	r3, [r3, #4]
    49ac:	2b00      	cmp	r3, #0
    49ae:	d100      	bne.n	49b2 <processOnDTMF+0xb6>
    49b0:	e07e      	b.n	4ab0 <processOnDTMF+0x1b4>
				subDTMF();
    49b2:	4b45      	ldr	r3, [pc, #276]	; (4ac8 <processOnDTMF+0x1cc>)
    49b4:	4798      	blx	r3
				overHeadWaterStatusOnCall(false);
    49b6:	2000      	movs	r0, #0
    49b8:	4b48      	ldr	r3, [pc, #288]	; (4adc <processOnDTMF+0x1e0>)
    49ba:	4798      	blx	r3
}
    49bc:	e078      	b.n	4ab0 <processOnDTMF+0x1b4>
		else if(dtmf == '0')
    49be:	230f      	movs	r3, #15
    49c0:	18fb      	adds	r3, r7, r3
    49c2:	781b      	ldrb	r3, [r3, #0]
    49c4:	2b30      	cmp	r3, #48	; 0x30
    49c6:	d114      	bne.n	49f2 <processOnDTMF+0xf6>
			if (factory_settings_parameter_struct.ENABLE_CURRENT)
    49c8:	4b3b      	ldr	r3, [pc, #236]	; (4ab8 <processOnDTMF+0x1bc>)
    49ca:	785b      	ldrb	r3, [r3, #1]
    49cc:	2b00      	cmp	r3, #0
    49ce:	d100      	bne.n	49d2 <processOnDTMF+0xd6>
    49d0:	e06e      	b.n	4ab0 <processOnDTMF+0x1b4>
				if(zeroPressed)
    49d2:	4b43      	ldr	r3, [pc, #268]	; (4ae0 <processOnDTMF+0x1e4>)
    49d4:	781b      	ldrb	r3, [r3, #0]
    49d6:	2b00      	cmp	r3, #0
    49d8:	d007      	beq.n	49ea <processOnDTMF+0xee>
					autoSetCurrent();   //to enable or disable current detection
    49da:	4b42      	ldr	r3, [pc, #264]	; (4ae4 <processOnDTMF+0x1e8>)
    49dc:	4798      	blx	r3
					subDTMF();
    49de:	4b3a      	ldr	r3, [pc, #232]	; (4ac8 <processOnDTMF+0x1cc>)
    49e0:	4798      	blx	r3
					zeroPressed=false;
    49e2:	4b3f      	ldr	r3, [pc, #252]	; (4ae0 <processOnDTMF+0x1e4>)
    49e4:	2200      	movs	r2, #0
    49e6:	701a      	strb	r2, [r3, #0]
}
    49e8:	e062      	b.n	4ab0 <processOnDTMF+0x1b4>
					zeroPressed=true;
    49ea:	4b3d      	ldr	r3, [pc, #244]	; (4ae0 <processOnDTMF+0x1e4>)
    49ec:	2201      	movs	r2, #1
    49ee:	701a      	strb	r2, [r3, #0]
}
    49f0:	e05e      	b.n	4ab0 <processOnDTMF+0x1b4>
		else if (dtmf == '7') //Speak Current Ampere On Call
    49f2:	230f      	movs	r3, #15
    49f4:	18fb      	adds	r3, r7, r3
    49f6:	781b      	ldrb	r3, [r3, #0]
    49f8:	2b37      	cmp	r3, #55	; 0x37
    49fa:	d108      	bne.n	4a0e <processOnDTMF+0x112>
			if (factory_settings_parameter_struct.AMPERE_SPEAK)
    49fc:	4b2e      	ldr	r3, [pc, #184]	; (4ab8 <processOnDTMF+0x1bc>)
    49fe:	789b      	ldrb	r3, [r3, #2]
    4a00:	2b00      	cmp	r3, #0
    4a02:	d055      	beq.n	4ab0 <processOnDTMF+0x1b4>
				subDTMF();
    4a04:	4b30      	ldr	r3, [pc, #192]	; (4ac8 <processOnDTMF+0x1cc>)
    4a06:	4798      	blx	r3
				speakAmpere();
    4a08:	4b37      	ldr	r3, [pc, #220]	; (4ae8 <processOnDTMF+0x1ec>)
    4a0a:	4798      	blx	r3
}
    4a0c:	e050      	b.n	4ab0 <processOnDTMF+0x1b4>
		else if(dtmf=='D')
    4a0e:	230f      	movs	r3, #15
    4a10:	18fb      	adds	r3, r7, r3
    4a12:	781b      	ldrb	r3, [r3, #0]
    4a14:	2b44      	cmp	r3, #68	; 0x44
    4a16:	d10d      	bne.n	4a34 <processOnDTMF+0x138>
			saveAutoStartSettings(true);  //set AutoStart to True in EEPROM
    4a18:	2001      	movs	r0, #1
    4a1a:	4b34      	ldr	r3, [pc, #208]	; (4aec <processOnDTMF+0x1f0>)
    4a1c:	4798      	blx	r3
			resetAutoStart(true);
    4a1e:	2001      	movs	r0, #1
    4a20:	4b33      	ldr	r3, [pc, #204]	; (4af0 <processOnDTMF+0x1f4>)
    4a22:	4798      	blx	r3
			startMotor(false,false);
    4a24:	2100      	movs	r1, #0
    4a26:	2000      	movs	r0, #0
    4a28:	4b28      	ldr	r3, [pc, #160]	; (4acc <processOnDTMF+0x1d0>)
    4a2a:	4798      	blx	r3
			sendDTMFTone(0xFF);
    4a2c:	20ff      	movs	r0, #255	; 0xff
    4a2e:	4b31      	ldr	r3, [pc, #196]	; (4af4 <processOnDTMF+0x1f8>)
    4a30:	4798      	blx	r3
}
    4a32:	e03d      	b.n	4ab0 <processOnDTMF+0x1b4>
		else if(dtmf=='C')
    4a34:	230f      	movs	r3, #15
    4a36:	18fb      	adds	r3, r7, r3
    4a38:	781b      	ldrb	r3, [r3, #0]
    4a3a:	2b43      	cmp	r3, #67	; 0x43
    4a3c:	d10b      	bne.n	4a56 <processOnDTMF+0x15a>
			saveAutoStartSettings(false);  //set AutoStart to false in EEPROM
    4a3e:	2000      	movs	r0, #0
    4a40:	4b2a      	ldr	r3, [pc, #168]	; (4aec <processOnDTMF+0x1f0>)
    4a42:	4798      	blx	r3
			stopMotor(false,false,true);
    4a44:	2201      	movs	r2, #1
    4a46:	2100      	movs	r1, #0
    4a48:	2000      	movs	r0, #0
    4a4a:	4b21      	ldr	r3, [pc, #132]	; (4ad0 <processOnDTMF+0x1d4>)
    4a4c:	4798      	blx	r3
			sendDTMFTone(0xFF);
    4a4e:	20ff      	movs	r0, #255	; 0xff
    4a50:	4b28      	ldr	r3, [pc, #160]	; (4af4 <processOnDTMF+0x1f8>)
    4a52:	4798      	blx	r3
}
    4a54:	e02c      	b.n	4ab0 <processOnDTMF+0x1b4>
		else if (dtmf == '8') //Set AUTOTIMER ON
    4a56:	230f      	movs	r3, #15
    4a58:	18fb      	adds	r3, r7, r3
    4a5a:	781b      	ldrb	r3, [r3, #0]
    4a5c:	2b38      	cmp	r3, #56	; 0x38
    4a5e:	d10c      	bne.n	4a7a <processOnDTMF+0x17e>
			subDTMF();
    4a60:	4b19      	ldr	r3, [pc, #100]	; (4ac8 <processOnDTMF+0x1cc>)
    4a62:	4798      	blx	r3
			saveAutoStartSettings(true);  //set AutoStart to True in EEPROM
    4a64:	2001      	movs	r0, #1
    4a66:	4b21      	ldr	r3, [pc, #132]	; (4aec <processOnDTMF+0x1f0>)
    4a68:	4798      	blx	r3
			resetAutoStart(true);
    4a6a:	2001      	movs	r0, #1
    4a6c:	4b20      	ldr	r3, [pc, #128]	; (4af0 <processOnDTMF+0x1f4>)
    4a6e:	4798      	blx	r3
			playSound(')',true);     // playFile AutoStart is On
    4a70:	2101      	movs	r1, #1
    4a72:	2029      	movs	r0, #41	; 0x29
    4a74:	4b20      	ldr	r3, [pc, #128]	; (4af8 <processOnDTMF+0x1fc>)
    4a76:	4798      	blx	r3
}
    4a78:	e01a      	b.n	4ab0 <processOnDTMF+0x1b4>
		else if (dtmf == '9') //Set AUTOTIMER OFF
    4a7a:	230f      	movs	r3, #15
    4a7c:	18fb      	adds	r3, r7, r3
    4a7e:	781b      	ldrb	r3, [r3, #0]
    4a80:	2b39      	cmp	r3, #57	; 0x39
    4a82:	d10c      	bne.n	4a9e <processOnDTMF+0x1a2>
			subDTMF();
    4a84:	4b10      	ldr	r3, [pc, #64]	; (4ac8 <processOnDTMF+0x1cc>)
    4a86:	4798      	blx	r3
			saveAutoStartSettings(false);  //set AUtoStart to False in EEPROM
    4a88:	2000      	movs	r0, #0
    4a8a:	4b18      	ldr	r3, [pc, #96]	; (4aec <processOnDTMF+0x1f0>)
    4a8c:	4798      	blx	r3
			resetAutoStart(true);
    4a8e:	2001      	movs	r0, #1
    4a90:	4b17      	ldr	r3, [pc, #92]	; (4af0 <processOnDTMF+0x1f4>)
    4a92:	4798      	blx	r3
			playSound('[',true); //playFile autoStart is turned oFF
    4a94:	2101      	movs	r1, #1
    4a96:	205b      	movs	r0, #91	; 0x5b
    4a98:	4b17      	ldr	r3, [pc, #92]	; (4af8 <processOnDTMF+0x1fc>)
    4a9a:	4798      	blx	r3
}
    4a9c:	e008      	b.n	4ab0 <processOnDTMF+0x1b4>
		else if(dtmf == '*')
    4a9e:	230f      	movs	r3, #15
    4aa0:	18fb      	adds	r3, r7, r3
    4aa2:	781b      	ldrb	r3, [r3, #0]
    4aa4:	2b2a      	cmp	r3, #42	; 0x2a
    4aa6:	d103      	bne.n	4ab0 <processOnDTMF+0x1b4>
			subDTMF();
    4aa8:	4b07      	ldr	r3, [pc, #28]	; (4ac8 <processOnDTMF+0x1cc>)
    4aaa:	4798      	blx	r3
			voltageOnCall();
    4aac:	4b13      	ldr	r3, [pc, #76]	; (4afc <processOnDTMF+0x200>)
    4aae:	4798      	blx	r3
}
    4ab0:	46c0      	nop			; (mov r8, r8)
    4ab2:	46bd      	mov	sp, r7
    4ab4:	b004      	add	sp, #16
    4ab6:	bd80      	pop	{r7, pc}
    4ab8:	20000618 	.word	0x20000618
    4abc:	2000070b 	.word	0x2000070b
    4ac0:	20000704 	.word	0x20000704
    4ac4:	00002dc5 	.word	0x00002dc5
    4ac8:	000048d9 	.word	0x000048d9
    4acc:	0000a52d 	.word	0x0000a52d
    4ad0:	0000a6e9 	.word	0x0000a6e9
    4ad4:	0000aaed 	.word	0x0000aaed
    4ad8:	00008bb1 	.word	0x00008bb1
    4adc:	00008a69 	.word	0x00008a69
    4ae0:	200007b3 	.word	0x200007b3
    4ae4:	0000954d 	.word	0x0000954d
    4ae8:	00009641 	.word	0x00009641
    4aec:	000012a9 	.word	0x000012a9
    4af0:	0000a0f9 	.word	0x0000a0f9
    4af4:	00006da9 	.word	0x00006da9
    4af8:	000043b1 	.word	0x000043b1
    4afc:	0000abfd 	.word	0x0000abfd

00004b00 <processOnSMS>:

void processOnSMS(char *received_command, bool admin,bool response_sms_processed_cmd,bool alterNumber, char *phone_number)
{
    4b00:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b02:	46c6      	mov	lr, r8
    4b04:	b500      	push	{lr}
    4b06:	b0d2      	sub	sp, #328	; 0x148
    4b08:	af06      	add	r7, sp, #24
    4b0a:	60f8      	str	r0, [r7, #12]
    4b0c:	000c      	movs	r4, r1
    4b0e:	0010      	movs	r0, r2
    4b10:	0019      	movs	r1, r3
    4b12:	4bea      	ldr	r3, [pc, #936]	; (4ebc <processOnSMS+0x3bc>)
    4b14:	2294      	movs	r2, #148	; 0x94
    4b16:	0052      	lsls	r2, r2, #1
    4b18:	4694      	mov	ip, r2
    4b1a:	2208      	movs	r2, #8
    4b1c:	4690      	mov	r8, r2
    4b1e:	44b8      	add	r8, r7
    4b20:	44c4      	add	ip, r8
    4b22:	4463      	add	r3, ip
    4b24:	1c22      	adds	r2, r4, #0
    4b26:	701a      	strb	r2, [r3, #0]
    4b28:	4be5      	ldr	r3, [pc, #916]	; (4ec0 <processOnSMS+0x3c0>)
    4b2a:	2294      	movs	r2, #148	; 0x94
    4b2c:	0052      	lsls	r2, r2, #1
    4b2e:	4694      	mov	ip, r2
    4b30:	2208      	movs	r2, #8
    4b32:	4690      	mov	r8, r2
    4b34:	44b8      	add	r8, r7
    4b36:	44c4      	add	ip, r8
    4b38:	4463      	add	r3, ip
    4b3a:	1c02      	adds	r2, r0, #0
    4b3c:	701a      	strb	r2, [r3, #0]
    4b3e:	4be1      	ldr	r3, [pc, #900]	; (4ec4 <processOnSMS+0x3c4>)
    4b40:	2294      	movs	r2, #148	; 0x94
    4b42:	0052      	lsls	r2, r2, #1
    4b44:	4694      	mov	ip, r2
    4b46:	2208      	movs	r2, #8
    4b48:	4690      	mov	r8, r2
    4b4a:	44b8      	add	r8, r7
    4b4c:	44c4      	add	ip, r8
    4b4e:	4463      	add	r3, ip
    4b50:	1c0a      	adds	r2, r1, #0
    4b52:	701a      	strb	r2, [r3, #0]
	char *copy_received_command;
	char resep_msg[250];
	bool incomingSMSProcessed=false;
    4b54:	2328      	movs	r3, #40	; 0x28
    4b56:	33ff      	adds	r3, #255	; 0xff
    4b58:	2208      	movs	r2, #8
    4b5a:	4694      	mov	ip, r2
    4b5c:	44bc      	add	ip, r7
    4b5e:	4463      	add	r3, ip
    4b60:	2200      	movs	r2, #0
    4b62:	701a      	strb	r2, [r3, #0]

	copy_received_command = received_command;
    4b64:	68fb      	ldr	r3, [r7, #12]
    4b66:	228c      	movs	r2, #140	; 0x8c
    4b68:	0052      	lsls	r2, r2, #1
    4b6a:	2108      	movs	r1, #8
    4b6c:	468c      	mov	ip, r1
    4b6e:	44bc      	add	ip, r7
    4b70:	4462      	add	r2, ip
    4b72:	6013      	str	r3, [r2, #0]
	
	if(alterNumber)
    4b74:	4bd3      	ldr	r3, [pc, #844]	; (4ec4 <processOnSMS+0x3c4>)
    4b76:	2294      	movs	r2, #148	; 0x94
    4b78:	0052      	lsls	r2, r2, #1
    4b7a:	4694      	mov	ip, r2
    4b7c:	2208      	movs	r2, #8
    4b7e:	4690      	mov	r8, r2
    4b80:	44b8      	add	r8, r7
    4b82:	44c4      	add	ip, r8
    4b84:	4463      	add	r3, ip
    4b86:	781b      	ldrb	r3, [r3, #0]
    4b88:	2b00      	cmp	r3, #0
    4b8a:	d00e      	beq.n	4baa <processOnSMS+0xaa>
	{
		if(!StringstartsWith(received_command,"AMON"))
    4b8c:	4ace      	ldr	r2, [pc, #824]	; (4ec8 <processOnSMS+0x3c8>)
    4b8e:	68fb      	ldr	r3, [r7, #12]
    4b90:	0011      	movs	r1, r2
    4b92:	0018      	movs	r0, r3
    4b94:	4bcd      	ldr	r3, [pc, #820]	; (4ecc <processOnSMS+0x3cc>)
    4b96:	4798      	blx	r3
    4b98:	0003      	movs	r3, r0
    4b9a:	001a      	movs	r2, r3
    4b9c:	2301      	movs	r3, #1
    4b9e:	4053      	eors	r3, r2
    4ba0:	b2db      	uxtb	r3, r3
    4ba2:	2b00      	cmp	r3, #0
    4ba4:	d001      	beq.n	4baa <processOnSMS+0xaa>
    4ba6:	f001 feed 	bl	6984 <processOnSMS+0x1e84>
		return;
	}
	
	if (StringstartsWith(received_command,"PRGUPD"))
    4baa:	4ac9      	ldr	r2, [pc, #804]	; (4ed0 <processOnSMS+0x3d0>)
    4bac:	68fb      	ldr	r3, [r7, #12]
    4bae:	0011      	movs	r1, r2
    4bb0:	0018      	movs	r0, r3
    4bb2:	4bc6      	ldr	r3, [pc, #792]	; (4ecc <processOnSMS+0x3cc>)
    4bb4:	4798      	blx	r3
    4bb6:	1e03      	subs	r3, r0, #0
    4bb8:	d014      	beq.n	4be4 <processOnSMS+0xe4>
	{
		//if (admin)
		{
			bootloader_parameter.firmware_download_pending = true;
    4bba:	4bc6      	ldr	r3, [pc, #792]	; (4ed4 <processOnSMS+0x3d4>)
    4bbc:	2201      	movs	r2, #1
    4bbe:	715a      	strb	r2, [r3, #5]
			memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
    4bc0:	49c4      	ldr	r1, [pc, #784]	; (4ed4 <processOnSMS+0x3d4>)
    4bc2:	4bc5      	ldr	r3, [pc, #788]	; (4ed8 <processOnSMS+0x3d8>)
    4bc4:	2218      	movs	r2, #24
    4bc6:	0018      	movs	r0, r3
    4bc8:	4bc4      	ldr	r3, [pc, #784]	; (4edc <processOnSMS+0x3dc>)
    4bca:	4798      	blx	r3
			eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
    4bcc:	4bc2      	ldr	r3, [pc, #776]	; (4ed8 <processOnSMS+0x3d8>)
    4bce:	0019      	movs	r1, r3
    4bd0:	2000      	movs	r0, #0
    4bd2:	4bc3      	ldr	r3, [pc, #780]	; (4ee0 <processOnSMS+0x3e0>)
    4bd4:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
    4bd6:	4bc3      	ldr	r3, [pc, #780]	; (4ee4 <processOnSMS+0x3e4>)
    4bd8:	4798      	blx	r3
			vTaskDelay(100);
    4bda:	2064      	movs	r0, #100	; 0x64
    4bdc:	4bc2      	ldr	r3, [pc, #776]	; (4ee8 <processOnSMS+0x3e8>)
    4bde:	4798      	blx	r3
			system_reset();
    4be0:	4bc2      	ldr	r3, [pc, #776]	; (4eec <processOnSMS+0x3ec>)
    4be2:	4798      	blx	r3
		}
	}
	
	if (StringstartsWith(received_command,"WAIT"))
    4be4:	4ac2      	ldr	r2, [pc, #776]	; (4ef0 <processOnSMS+0x3f0>)
    4be6:	68fb      	ldr	r3, [r7, #12]
    4be8:	0011      	movs	r1, r2
    4bea:	0018      	movs	r0, r3
    4bec:	4bb7      	ldr	r3, [pc, #732]	; (4ecc <processOnSMS+0x3cc>)
    4bee:	4798      	blx	r3
    4bf0:	1e03      	subs	r3, r0, #0
    4bf2:	d047      	beq.n	4c84 <processOnSMS+0x184>
	{
		enum gsm_error err = gsm_disable_call_waiting();
    4bf4:	2318      	movs	r3, #24
    4bf6:	33ff      	adds	r3, #255	; 0xff
    4bf8:	2208      	movs	r2, #8
    4bfa:	18ba      	adds	r2, r7, r2
    4bfc:	18d4      	adds	r4, r2, r3
    4bfe:	4bbd      	ldr	r3, [pc, #756]	; (4ef4 <processOnSMS+0x3f4>)
    4c00:	4798      	blx	r3
    4c02:	0003      	movs	r3, r0
    4c04:	7023      	strb	r3, [r4, #0]
		incomingSMSProcessed=true;
    4c06:	2328      	movs	r3, #40	; 0x28
    4c08:	33ff      	adds	r3, #255	; 0xff
    4c0a:	2208      	movs	r2, #8
    4c0c:	4694      	mov	ip, r2
    4c0e:	44bc      	add	ip, r7
    4c10:	4463      	add	r3, ip
    4c12:	2201      	movs	r2, #1
    4c14:	701a      	strb	r2, [r3, #0]
		if (response_sms_processed_cmd == true)
    4c16:	4baa      	ldr	r3, [pc, #680]	; (4ec0 <processOnSMS+0x3c0>)
    4c18:	2294      	movs	r2, #148	; 0x94
    4c1a:	0052      	lsls	r2, r2, #1
    4c1c:	4694      	mov	ip, r2
    4c1e:	2208      	movs	r2, #8
    4c20:	4690      	mov	r8, r2
    4c22:	44b8      	add	r8, r7
    4c24:	44c4      	add	ip, r8
    4c26:	4463      	add	r3, ip
    4c28:	781b      	ldrb	r3, [r3, #0]
    4c2a:	2b00      	cmp	r3, #0
    4c2c:	d101      	bne.n	4c32 <processOnSMS+0x132>
    4c2e:	f001 fe63 	bl	68f8 <processOnSMS+0x1df8>
		{
			if (err == GSM_ERROR_NONE)
    4c32:	2318      	movs	r3, #24
    4c34:	33ff      	adds	r3, #255	; 0xff
    4c36:	2208      	movs	r2, #8
    4c38:	4694      	mov	ip, r2
    4c3a:	44bc      	add	ip, r7
    4c3c:	4463      	add	r3, ip
    4c3e:	781b      	ldrb	r3, [r3, #0]
    4c40:	2b00      	cmp	r3, #0
    4c42:	d10d      	bne.n	4c60 <processOnSMS+0x160>
			{
				strcpy(resep_msg,"GSM CALL WAITTING DISABLE : SUCCESS");
    4c44:	230c      	movs	r3, #12
    4c46:	2208      	movs	r2, #8
    4c48:	4694      	mov	ip, r2
    4c4a:	44bc      	add	ip, r7
    4c4c:	4463      	add	r3, ip
    4c4e:	4aaa      	ldr	r2, [pc, #680]	; (4ef8 <processOnSMS+0x3f8>)
    4c50:	ca13      	ldmia	r2!, {r0, r1, r4}
    4c52:	c313      	stmia	r3!, {r0, r1, r4}
    4c54:	ca13      	ldmia	r2!, {r0, r1, r4}
    4c56:	c313      	stmia	r3!, {r0, r1, r4}
    4c58:	ca13      	ldmia	r2!, {r0, r1, r4}
    4c5a:	c313      	stmia	r3!, {r0, r1, r4}
    4c5c:	f001 fe4c 	bl	68f8 <processOnSMS+0x1df8>
			}
			else
			{
				strcpy(resep_msg,"GSM CALL WAITTING DISABLE : FAILED");
    4c60:	230c      	movs	r3, #12
    4c62:	2208      	movs	r2, #8
    4c64:	4694      	mov	ip, r2
    4c66:	44bc      	add	ip, r7
    4c68:	4463      	add	r3, ip
    4c6a:	4aa4      	ldr	r2, [pc, #656]	; (4efc <processOnSMS+0x3fc>)
    4c6c:	ca13      	ldmia	r2!, {r0, r1, r4}
    4c6e:	c313      	stmia	r3!, {r0, r1, r4}
    4c70:	ca13      	ldmia	r2!, {r0, r1, r4}
    4c72:	c313      	stmia	r3!, {r0, r1, r4}
    4c74:	ca03      	ldmia	r2!, {r0, r1}
    4c76:	c303      	stmia	r3!, {r0, r1}
    4c78:	8811      	ldrh	r1, [r2, #0]
    4c7a:	8019      	strh	r1, [r3, #0]
    4c7c:	7892      	ldrb	r2, [r2, #2]
    4c7e:	709a      	strb	r2, [r3, #2]
    4c80:	f001 fe3a 	bl	68f8 <processOnSMS+0x1df8>
			}
		}
	}
	else if (StringstartsWith(received_command,"CLEARALL"))
    4c84:	4a9e      	ldr	r2, [pc, #632]	; (4f00 <processOnSMS+0x400>)
    4c86:	68fb      	ldr	r3, [r7, #12]
    4c88:	0011      	movs	r1, r2
    4c8a:	0018      	movs	r0, r3
    4c8c:	4b8f      	ldr	r3, [pc, #572]	; (4ecc <processOnSMS+0x3cc>)
    4c8e:	4798      	blx	r3
    4c90:	1e03      	subs	r3, r0, #0
    4c92:	d030      	beq.n	4cf6 <processOnSMS+0x1f6>
	{
		clearNumbers(admin);
    4c94:	4b89      	ldr	r3, [pc, #548]	; (4ebc <processOnSMS+0x3bc>)
    4c96:	2294      	movs	r2, #148	; 0x94
    4c98:	0052      	lsls	r2, r2, #1
    4c9a:	4694      	mov	ip, r2
    4c9c:	2208      	movs	r2, #8
    4c9e:	4690      	mov	r8, r2
    4ca0:	44b8      	add	r8, r7
    4ca2:	44c4      	add	ip, r8
    4ca4:	4463      	add	r3, ip
    4ca6:	781b      	ldrb	r3, [r3, #0]
    4ca8:	0018      	movs	r0, r3
    4caa:	4b96      	ldr	r3, [pc, #600]	; (4f04 <processOnSMS+0x404>)
    4cac:	4798      	blx	r3
		incomingSMSProcessed=true;
    4cae:	2328      	movs	r3, #40	; 0x28
    4cb0:	33ff      	adds	r3, #255	; 0xff
    4cb2:	2208      	movs	r2, #8
    4cb4:	4694      	mov	ip, r2
    4cb6:	44bc      	add	ip, r7
    4cb8:	4463      	add	r3, ip
    4cba:	2201      	movs	r2, #1
    4cbc:	701a      	strb	r2, [r3, #0]
		if (response_sms_processed_cmd == true)
    4cbe:	4b80      	ldr	r3, [pc, #512]	; (4ec0 <processOnSMS+0x3c0>)
    4cc0:	2294      	movs	r2, #148	; 0x94
    4cc2:	0052      	lsls	r2, r2, #1
    4cc4:	4694      	mov	ip, r2
    4cc6:	2208      	movs	r2, #8
    4cc8:	4690      	mov	r8, r2
    4cca:	44b8      	add	r8, r7
    4ccc:	44c4      	add	ip, r8
    4cce:	4463      	add	r3, ip
    4cd0:	781b      	ldrb	r3, [r3, #0]
    4cd2:	2b00      	cmp	r3, #0
    4cd4:	d101      	bne.n	4cda <processOnSMS+0x1da>
    4cd6:	f001 fe0f 	bl	68f8 <processOnSMS+0x1df8>
		{
			strcpy(resep_msg,"ALL USER NUMBERS CLEARED");
    4cda:	230c      	movs	r3, #12
    4cdc:	2208      	movs	r2, #8
    4cde:	4694      	mov	ip, r2
    4ce0:	44bc      	add	ip, r7
    4ce2:	4463      	add	r3, ip
    4ce4:	4a88      	ldr	r2, [pc, #544]	; (4f08 <processOnSMS+0x408>)
    4ce6:	ca13      	ldmia	r2!, {r0, r1, r4}
    4ce8:	c313      	stmia	r3!, {r0, r1, r4}
    4cea:	ca13      	ldmia	r2!, {r0, r1, r4}
    4cec:	c313      	stmia	r3!, {r0, r1, r4}
    4cee:	7812      	ldrb	r2, [r2, #0]
    4cf0:	701a      	strb	r2, [r3, #0]
    4cf2:	f001 fe01 	bl	68f8 <processOnSMS+0x1df8>
		}
	}
	else if (StringstartsWith(received_command,"DEFAULT"))
    4cf6:	4a85      	ldr	r2, [pc, #532]	; (4f0c <processOnSMS+0x40c>)
    4cf8:	68fb      	ldr	r3, [r7, #12]
    4cfa:	0011      	movs	r1, r2
    4cfc:	0018      	movs	r0, r3
    4cfe:	4b73      	ldr	r3, [pc, #460]	; (4ecc <processOnSMS+0x3cc>)
    4d00:	4798      	blx	r3
    4d02:	1e03      	subs	r3, r0, #0
    4d04:	d065      	beq.n	4dd2 <processOnSMS+0x2d2>
	{
		saveAutoStartSettings(false);
    4d06:	2000      	movs	r0, #0
    4d08:	4b81      	ldr	r3, [pc, #516]	; (4f10 <processOnSMS+0x410>)
    4d0a:	4798      	blx	r3
		if (factory_settings_parameter_struct.ENABLE_WATER)
    4d0c:	4b81      	ldr	r3, [pc, #516]	; (4f14 <processOnSMS+0x414>)
    4d0e:	795b      	ldrb	r3, [r3, #5]
    4d10:	2b00      	cmp	r3, #0
    4d12:	d00d      	beq.n	4d30 <processOnSMS+0x230>
		{
			saveWaterBypassSettings(false);
    4d14:	2000      	movs	r0, #0
    4d16:	4b80      	ldr	r3, [pc, #512]	; (4f18 <processOnSMS+0x418>)
    4d18:	4798      	blx	r3
			if (factory_settings_parameter_struct.ENABLE_M2M)
    4d1a:	4b7e      	ldr	r3, [pc, #504]	; (4f14 <processOnSMS+0x414>)
    4d1c:	78db      	ldrb	r3, [r3, #3]
    4d1e:	2b00      	cmp	r3, #0
    4d20:	d003      	beq.n	4d2a <processOnSMS+0x22a>
			{
				saveM2MSettings(false);
    4d22:	2000      	movs	r0, #0
    4d24:	4b7d      	ldr	r3, [pc, #500]	; (4f1c <processOnSMS+0x41c>)
    4d26:	4798      	blx	r3
    4d28:	e002      	b.n	4d30 <processOnSMS+0x230>
			}
			else
			{
				savePreventOverFlowSettings(false);
    4d2a:	2000      	movs	r0, #0
    4d2c:	4b7c      	ldr	r3, [pc, #496]	; (4f20 <processOnSMS+0x420>)
    4d2e:	4798      	blx	r3
			}
		}
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
    4d30:	4b78      	ldr	r3, [pc, #480]	; (4f14 <processOnSMS+0x414>)
    4d32:	785b      	ldrb	r3, [r3, #1]
    4d34:	2b00      	cmp	r3, #0
    4d36:	d008      	beq.n	4d4a <processOnSMS+0x24a>
		{
			setOverloadPer(120);
    4d38:	2078      	movs	r0, #120	; 0x78
    4d3a:	4b7a      	ldr	r3, [pc, #488]	; (4f24 <processOnSMS+0x424>)
    4d3c:	4798      	blx	r3
			setUnderloadPer(85);
    4d3e:	2055      	movs	r0, #85	; 0x55
    4d40:	4b79      	ldr	r3, [pc, #484]	; (4f28 <processOnSMS+0x428>)
    4d42:	4798      	blx	r3
			setCurrentDetection(false);
    4d44:	2000      	movs	r0, #0
    4d46:	4b79      	ldr	r3, [pc, #484]	; (4f2c <processOnSMS+0x42c>)
    4d48:	4798      	blx	r3
		}
		saveEventStageSettings(0);
    4d4a:	2000      	movs	r0, #0
    4d4c:	4b78      	ldr	r3, [pc, #480]	; (4f30 <processOnSMS+0x430>)
    4d4e:	4798      	blx	r3
		//saveBypassSettings(false);
		saveDNDSettings(false);
    4d50:	2000      	movs	r0, #0
    4d52:	4b78      	ldr	r3, [pc, #480]	; (4f34 <processOnSMS+0x434>)
    4d54:	4798      	blx	r3
		saveResponseSettings('C');
    4d56:	2043      	movs	r0, #67	; 0x43
    4d58:	4b77      	ldr	r3, [pc, #476]	; (4f38 <processOnSMS+0x438>)
    4d5a:	4798      	blx	r3
		saveAutoStartTimeSettings(50);
    4d5c:	2032      	movs	r0, #50	; 0x32
    4d5e:	4b77      	ldr	r3, [pc, #476]	; (4f3c <processOnSMS+0x43c>)
    4d60:	4798      	blx	r3
		saveStarDeltaTimer(2);
    4d62:	2002      	movs	r0, #2
    4d64:	4b76      	ldr	r3, [pc, #472]	; (4f40 <processOnSMS+0x440>)
    4d66:	4798      	blx	r3
		
		saveSinglePhasingSettings(true);
    4d68:	2001      	movs	r0, #1
    4d6a:	4b76      	ldr	r3, [pc, #472]	; (4f44 <processOnSMS+0x444>)
    4d6c:	4798      	blx	r3
		saveSinglePhasingVoltage(80);
    4d6e:	2050      	movs	r0, #80	; 0x50
    4d70:	4b75      	ldr	r3, [pc, #468]	; (4f48 <processOnSMS+0x448>)
    4d72:	4798      	blx	r3
		savePhaseSequenceProtectionSettings(true);
    4d74:	2001      	movs	r0, #1
    4d76:	4b75      	ldr	r3, [pc, #468]	; (4f4c <processOnSMS+0x44c>)
    4d78:	4798      	blx	r3
		setPrimaryNumberIndex(0);
    4d7a:	2000      	movs	r0, #0
    4d7c:	4b74      	ldr	r3, [pc, #464]	; (4f50 <processOnSMS+0x450>)
    4d7e:	4798      	blx	r3
		setSecondaryNumberIndex(1);
    4d80:	2001      	movs	r0, #1
    4d82:	4b74      	ldr	r3, [pc, #464]	; (4f54 <processOnSMS+0x454>)
    4d84:	4798      	blx	r3
		
		incomingSMSProcessed=true;
    4d86:	2328      	movs	r3, #40	; 0x28
    4d88:	33ff      	adds	r3, #255	; 0xff
    4d8a:	2208      	movs	r2, #8
    4d8c:	4694      	mov	ip, r2
    4d8e:	44bc      	add	ip, r7
    4d90:	4463      	add	r3, ip
    4d92:	2201      	movs	r2, #1
    4d94:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
    4d96:	4b4a      	ldr	r3, [pc, #296]	; (4ec0 <processOnSMS+0x3c0>)
    4d98:	2294      	movs	r2, #148	; 0x94
    4d9a:	0052      	lsls	r2, r2, #1
    4d9c:	4694      	mov	ip, r2
    4d9e:	2208      	movs	r2, #8
    4da0:	4690      	mov	r8, r2
    4da2:	44b8      	add	r8, r7
    4da4:	44c4      	add	ip, r8
    4da6:	4463      	add	r3, ip
    4da8:	781b      	ldrb	r3, [r3, #0]
    4daa:	2b00      	cmp	r3, #0
    4dac:	d101      	bne.n	4db2 <processOnSMS+0x2b2>
    4dae:	f001 fda3 	bl	68f8 <processOnSMS+0x1df8>
		{
			strcpy(resep_msg,"ALL SETTINGS ARE NOW FACTORY DEFAULT");
    4db2:	230c      	movs	r3, #12
    4db4:	2208      	movs	r2, #8
    4db6:	4694      	mov	ip, r2
    4db8:	44bc      	add	ip, r7
    4dba:	4463      	add	r3, ip
    4dbc:	4a66      	ldr	r2, [pc, #408]	; (4f58 <processOnSMS+0x458>)
    4dbe:	ca13      	ldmia	r2!, {r0, r1, r4}
    4dc0:	c313      	stmia	r3!, {r0, r1, r4}
    4dc2:	ca13      	ldmia	r2!, {r0, r1, r4}
    4dc4:	c313      	stmia	r3!, {r0, r1, r4}
    4dc6:	ca13      	ldmia	r2!, {r0, r1, r4}
    4dc8:	c313      	stmia	r3!, {r0, r1, r4}
    4dca:	7812      	ldrb	r2, [r2, #0]
    4dcc:	701a      	strb	r2, [r3, #0]
    4dce:	f001 fd93 	bl	68f8 <processOnSMS+0x1df8>
		}
	}
	else if (StringstartsWith(received_command,"NUM"))
    4dd2:	4a62      	ldr	r2, [pc, #392]	; (4f5c <processOnSMS+0x45c>)
    4dd4:	68fb      	ldr	r3, [r7, #12]
    4dd6:	0011      	movs	r1, r2
    4dd8:	0018      	movs	r0, r3
    4dda:	4b3c      	ldr	r3, [pc, #240]	; (4ecc <processOnSMS+0x3cc>)
    4ddc:	4798      	blx	r3
    4dde:	1e03      	subs	r3, r0, #0
    4de0:	d038      	beq.n	4e54 <processOnSMS+0x354>
	{
		response_sms_processed_cmd = true;
    4de2:	4b37      	ldr	r3, [pc, #220]	; (4ec0 <processOnSMS+0x3c0>)
    4de4:	2294      	movs	r2, #148	; 0x94
    4de6:	0052      	lsls	r2, r2, #1
    4de8:	4694      	mov	ip, r2
    4dea:	2208      	movs	r2, #8
    4dec:	4690      	mov	r8, r2
    4dee:	44b8      	add	r8, r7
    4df0:	44c4      	add	ip, r8
    4df2:	4463      	add	r3, ip
    4df4:	2201      	movs	r2, #1
    4df6:	701a      	strb	r2, [r3, #0]
		incomingSMSProcessed=true;
    4df8:	2328      	movs	r3, #40	; 0x28
    4dfa:	33ff      	adds	r3, #255	; 0xff
    4dfc:	2208      	movs	r2, #8
    4dfe:	4694      	mov	ip, r2
    4e00:	44bc      	add	ip, r7
    4e02:	4463      	add	r3, ip
    4e04:	2201      	movs	r2, #1
    4e06:	701a      	strb	r2, [r3, #0]
		
		memset(resep_msg, '\0', sizeof(resep_msg));
    4e08:	230c      	movs	r3, #12
    4e0a:	2208      	movs	r2, #8
    4e0c:	4694      	mov	ip, r2
    4e0e:	44bc      	add	ip, r7
    4e10:	4463      	add	r3, ip
    4e12:	22fa      	movs	r2, #250	; 0xfa
    4e14:	2100      	movs	r1, #0
    4e16:	0018      	movs	r0, r3
    4e18:	4b51      	ldr	r3, [pc, #324]	; (4f60 <processOnSMS+0x460>)
    4e1a:	4798      	blx	r3
		if (user_count_struct.current_user_no_count==0)
    4e1c:	4b51      	ldr	r3, [pc, #324]	; (4f64 <processOnSMS+0x464>)
    4e1e:	789b      	ldrb	r3, [r3, #2]
    4e20:	2b00      	cmp	r3, #0
    4e22:	d10d      	bne.n	4e40 <processOnSMS+0x340>
		{
			strcpy(resep_msg,"No Numbers Exists");
    4e24:	230c      	movs	r3, #12
    4e26:	2208      	movs	r2, #8
    4e28:	4694      	mov	ip, r2
    4e2a:	44bc      	add	ip, r7
    4e2c:	4463      	add	r3, ip
    4e2e:	4a4e      	ldr	r2, [pc, #312]	; (4f68 <processOnSMS+0x468>)
    4e30:	ca13      	ldmia	r2!, {r0, r1, r4}
    4e32:	c313      	stmia	r3!, {r0, r1, r4}
    4e34:	6811      	ldr	r1, [r2, #0]
    4e36:	6019      	str	r1, [r3, #0]
    4e38:	8892      	ldrh	r2, [r2, #4]
    4e3a:	809a      	strh	r2, [r3, #4]
    4e3c:	f001 fd5c 	bl	68f8 <processOnSMS+0x1df8>
		}
		else
		{
			getNumbers(resep_msg);
    4e40:	230c      	movs	r3, #12
    4e42:	2208      	movs	r2, #8
    4e44:	4694      	mov	ip, r2
    4e46:	44bc      	add	ip, r7
    4e48:	4463      	add	r3, ip
    4e4a:	0018      	movs	r0, r3
    4e4c:	4b47      	ldr	r3, [pc, #284]	; (4f6c <processOnSMS+0x46c>)
    4e4e:	4798      	blx	r3
    4e50:	f001 fd52 	bl	68f8 <processOnSMS+0x1df8>
		}
	}
	else if (StringstartsWith(received_command,"RESET"))
    4e54:	4a46      	ldr	r2, [pc, #280]	; (4f70 <processOnSMS+0x470>)
    4e56:	68fb      	ldr	r3, [r7, #12]
    4e58:	0011      	movs	r1, r2
    4e5a:	0018      	movs	r0, r3
    4e5c:	4b1b      	ldr	r3, [pc, #108]	; (4ecc <processOnSMS+0x3cc>)
    4e5e:	4798      	blx	r3
    4e60:	1e03      	subs	r3, r0, #0
    4e62:	d003      	beq.n	4e6c <processOnSMS+0x36c>
	{
		system_reset();
    4e64:	4b21      	ldr	r3, [pc, #132]	; (4eec <processOnSMS+0x3ec>)
    4e66:	4798      	blx	r3
    4e68:	f001 fd46 	bl	68f8 <processOnSMS+0x1df8>
	}
	else if (StringstartsWith(received_command,"DID"))
    4e6c:	4a41      	ldr	r2, [pc, #260]	; (4f74 <processOnSMS+0x474>)
    4e6e:	68fb      	ldr	r3, [r7, #12]
    4e70:	0011      	movs	r1, r2
    4e72:	0018      	movs	r0, r3
    4e74:	4b15      	ldr	r3, [pc, #84]	; (4ecc <processOnSMS+0x3cc>)
    4e76:	4798      	blx	r3
    4e78:	1e03      	subs	r3, r0, #0
    4e7a:	d100      	bne.n	4e7e <processOnSMS+0x37e>
    4e7c:	e080      	b.n	4f80 <processOnSMS+0x480>
	{
		response_sms_processed_cmd=true;
    4e7e:	4b10      	ldr	r3, [pc, #64]	; (4ec0 <processOnSMS+0x3c0>)
    4e80:	2294      	movs	r2, #148	; 0x94
    4e82:	0052      	lsls	r2, r2, #1
    4e84:	4694      	mov	ip, r2
    4e86:	2208      	movs	r2, #8
    4e88:	4690      	mov	r8, r2
    4e8a:	44b8      	add	r8, r7
    4e8c:	44c4      	add	ip, r8
    4e8e:	4463      	add	r3, ip
    4e90:	2201      	movs	r2, #1
    4e92:	701a      	strb	r2, [r3, #0]
		incomingSMSProcessed=true;
    4e94:	2328      	movs	r3, #40	; 0x28
    4e96:	33ff      	adds	r3, #255	; 0xff
    4e98:	2208      	movs	r2, #8
    4e9a:	4694      	mov	ip, r2
    4e9c:	44bc      	add	ip, r7
    4e9e:	4463      	add	r3, ip
    4ea0:	2201      	movs	r2, #1
    4ea2:	701a      	strb	r2, [r3, #0]
		
		strcpy(resep_msg,factory_settings_parameter_struct.DeviceID_ee);
    4ea4:	4a34      	ldr	r2, [pc, #208]	; (4f78 <processOnSMS+0x478>)
    4ea6:	230c      	movs	r3, #12
    4ea8:	2108      	movs	r1, #8
    4eaa:	468c      	mov	ip, r1
    4eac:	44bc      	add	ip, r7
    4eae:	4463      	add	r3, ip
    4eb0:	0011      	movs	r1, r2
    4eb2:	0018      	movs	r0, r3
    4eb4:	4b31      	ldr	r3, [pc, #196]	; (4f7c <processOnSMS+0x47c>)
    4eb6:	4798      	blx	r3
    4eb8:	f001 fd1e 	bl	68f8 <processOnSMS+0x1df8>
    4ebc:	fffffedb 	.word	0xfffffedb
    4ec0:	fffffeda 	.word	0xfffffeda
    4ec4:	fffffed9 	.word	0xfffffed9
    4ec8:	00018d90 	.word	0x00018d90
    4ecc:	00003db5 	.word	0x00003db5
    4ed0:	00018d98 	.word	0x00018d98
    4ed4:	200005e8 	.word	0x200005e8
    4ed8:	20000574 	.word	0x20000574
    4edc:	00017b21 	.word	0x00017b21
    4ee0:	000127e9 	.word	0x000127e9
    4ee4:	00012991 	.word	0x00012991
    4ee8:	0000ee99 	.word	0x0000ee99
    4eec:	00003e89 	.word	0x00003e89
    4ef0:	00018da0 	.word	0x00018da0
    4ef4:	00002df5 	.word	0x00002df5
    4ef8:	00018da8 	.word	0x00018da8
    4efc:	00018dcc 	.word	0x00018dcc
    4f00:	00018df0 	.word	0x00018df0
    4f04:	0000110d 	.word	0x0000110d
    4f08:	00018dfc 	.word	0x00018dfc
    4f0c:	00018e18 	.word	0x00018e18
    4f10:	000012a9 	.word	0x000012a9
    4f14:	20000618 	.word	0x20000618
    4f18:	00001469 	.word	0x00001469
    4f1c:	00000be5 	.word	0x00000be5
    4f20:	000014b5 	.word	0x000014b5
    4f24:	00001501 	.word	0x00001501
    4f28:	00001569 	.word	0x00001569
    4f2c:	000018ad 	.word	0x000018ad
    4f30:	00001945 	.word	0x00001945
    4f34:	00001341 	.word	0x00001341
    4f38:	0000138d 	.word	0x0000138d
    4f3c:	000012f5 	.word	0x000012f5
    4f40:	000018f9 	.word	0x000018f9
    4f44:	000015d9 	.word	0x000015d9
    4f48:	00001625 	.word	0x00001625
    4f4c:	00001671 	.word	0x00001671
    4f50:	00001a25 	.word	0x00001a25
    4f54:	00001a75 	.word	0x00001a75
    4f58:	00018e20 	.word	0x00018e20
    4f5c:	00018e48 	.word	0x00018e48
    4f60:	00017b57 	.word	0x00017b57
    4f64:	20000600 	.word	0x20000600
    4f68:	00018e4c 	.word	0x00018e4c
    4f6c:	000007f9 	.word	0x000007f9
    4f70:	00018e60 	.word	0x00018e60
    4f74:	00018e68 	.word	0x00018e68
    4f78:	20000620 	.word	0x20000620
    4f7c:	00017dd7 	.word	0x00017dd7
		//sprintf(resep_msg,"Software:%s\nModel:%d\nDeviceId:%lu\nHW:%d",
		//SOFTWARE_VER,factory_parameter_struct.u16tmodelNo,factory_parameter_struct.u32deviceId,
		//factory_parameter_struct.u16thardwareVer);

	}
	else if (StringstartsWith(received_command,"AUTOON"))
    4f80:	4aec      	ldr	r2, [pc, #944]	; (5334 <processOnSMS+0x834>)
    4f82:	68fb      	ldr	r3, [r7, #12]
    4f84:	0011      	movs	r1, r2
    4f86:	0018      	movs	r0, r3
    4f88:	4beb      	ldr	r3, [pc, #940]	; (5338 <processOnSMS+0x838>)
    4f8a:	4798      	blx	r3
    4f8c:	1e03      	subs	r3, r0, #0
    4f8e:	d027      	beq.n	4fe0 <processOnSMS+0x4e0>
	{
		saveAutoStartSettings(true);
    4f90:	2001      	movs	r0, #1
    4f92:	4bea      	ldr	r3, [pc, #936]	; (533c <processOnSMS+0x83c>)
    4f94:	4798      	blx	r3
		resetAutoStart(true);
    4f96:	2001      	movs	r0, #1
    4f98:	4be9      	ldr	r3, [pc, #932]	; (5340 <processOnSMS+0x840>)
    4f9a:	4798      	blx	r3
		
		incomingSMSProcessed=true;
    4f9c:	2328      	movs	r3, #40	; 0x28
    4f9e:	33ff      	adds	r3, #255	; 0xff
    4fa0:	2208      	movs	r2, #8
    4fa2:	4694      	mov	ip, r2
    4fa4:	44bc      	add	ip, r7
    4fa6:	4463      	add	r3, ip
    4fa8:	2201      	movs	r2, #1
    4faa:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
    4fac:	4be5      	ldr	r3, [pc, #916]	; (5344 <processOnSMS+0x844>)
    4fae:	2294      	movs	r2, #148	; 0x94
    4fb0:	0052      	lsls	r2, r2, #1
    4fb2:	4694      	mov	ip, r2
    4fb4:	2208      	movs	r2, #8
    4fb6:	4690      	mov	r8, r2
    4fb8:	44b8      	add	r8, r7
    4fba:	44c4      	add	ip, r8
    4fbc:	4463      	add	r3, ip
    4fbe:	781b      	ldrb	r3, [r3, #0]
    4fc0:	2b00      	cmp	r3, #0
    4fc2:	d101      	bne.n	4fc8 <processOnSMS+0x4c8>
    4fc4:	f001 fc98 	bl	68f8 <processOnSMS+0x1df8>
		{
			strcpy(resep_msg,"MOTOR AUTOON ON");
    4fc8:	230c      	movs	r3, #12
    4fca:	2208      	movs	r2, #8
    4fcc:	4694      	mov	ip, r2
    4fce:	44bc      	add	ip, r7
    4fd0:	4463      	add	r3, ip
    4fd2:	4add      	ldr	r2, [pc, #884]	; (5348 <processOnSMS+0x848>)
    4fd4:	ca13      	ldmia	r2!, {r0, r1, r4}
    4fd6:	c313      	stmia	r3!, {r0, r1, r4}
    4fd8:	6812      	ldr	r2, [r2, #0]
    4fda:	601a      	str	r2, [r3, #0]
    4fdc:	f001 fc8c 	bl	68f8 <processOnSMS+0x1df8>
		}
	}
	else if (StringstartsWith(received_command,"AUTOOFF"))
    4fe0:	4ada      	ldr	r2, [pc, #872]	; (534c <processOnSMS+0x84c>)
    4fe2:	68fb      	ldr	r3, [r7, #12]
    4fe4:	0011      	movs	r1, r2
    4fe6:	0018      	movs	r0, r3
    4fe8:	4bd3      	ldr	r3, [pc, #844]	; (5338 <processOnSMS+0x838>)
    4fea:	4798      	blx	r3
    4fec:	1e03      	subs	r3, r0, #0
    4fee:	d029      	beq.n	5044 <processOnSMS+0x544>
	{
		saveAutoStartSettings(false);
    4ff0:	2000      	movs	r0, #0
    4ff2:	4bd2      	ldr	r3, [pc, #840]	; (533c <processOnSMS+0x83c>)
    4ff4:	4798      	blx	r3
		resetAutoStart(true);
    4ff6:	2001      	movs	r0, #1
    4ff8:	4bd1      	ldr	r3, [pc, #836]	; (5340 <processOnSMS+0x840>)
    4ffa:	4798      	blx	r3
		
		incomingSMSProcessed=true;
    4ffc:	2328      	movs	r3, #40	; 0x28
    4ffe:	33ff      	adds	r3, #255	; 0xff
    5000:	2208      	movs	r2, #8
    5002:	4694      	mov	ip, r2
    5004:	44bc      	add	ip, r7
    5006:	4463      	add	r3, ip
    5008:	2201      	movs	r2, #1
    500a:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
    500c:	4bcd      	ldr	r3, [pc, #820]	; (5344 <processOnSMS+0x844>)
    500e:	2294      	movs	r2, #148	; 0x94
    5010:	0052      	lsls	r2, r2, #1
    5012:	4694      	mov	ip, r2
    5014:	2208      	movs	r2, #8
    5016:	4690      	mov	r8, r2
    5018:	44b8      	add	r8, r7
    501a:	44c4      	add	ip, r8
    501c:	4463      	add	r3, ip
    501e:	781b      	ldrb	r3, [r3, #0]
    5020:	2b00      	cmp	r3, #0
    5022:	d101      	bne.n	5028 <processOnSMS+0x528>
    5024:	f001 fc68 	bl	68f8 <processOnSMS+0x1df8>
		{
			strcpy(resep_msg,"MOTOR AUTOON OFF");
    5028:	230c      	movs	r3, #12
    502a:	2208      	movs	r2, #8
    502c:	4694      	mov	ip, r2
    502e:	44bc      	add	ip, r7
    5030:	4463      	add	r3, ip
    5032:	4ac7      	ldr	r2, [pc, #796]	; (5350 <processOnSMS+0x850>)
    5034:	ca13      	ldmia	r2!, {r0, r1, r4}
    5036:	c313      	stmia	r3!, {r0, r1, r4}
    5038:	6811      	ldr	r1, [r2, #0]
    503a:	6019      	str	r1, [r3, #0]
    503c:	7912      	ldrb	r2, [r2, #4]
    503e:	711a      	strb	r2, [r3, #4]
    5040:	f001 fc5a 	bl	68f8 <processOnSMS+0x1df8>
		}
	}
	else if (StringstartsWith(received_command,"WBYPON"))
    5044:	4ac3      	ldr	r2, [pc, #780]	; (5354 <processOnSMS+0x854>)
    5046:	68fb      	ldr	r3, [r7, #12]
    5048:	0011      	movs	r1, r2
    504a:	0018      	movs	r0, r3
    504c:	4bba      	ldr	r3, [pc, #744]	; (5338 <processOnSMS+0x838>)
    504e:	4798      	blx	r3
    5050:	1e03      	subs	r3, r0, #0
    5052:	d02a      	beq.n	50aa <processOnSMS+0x5aa>
	{
		
		if (factory_settings_parameter_struct.ENABLE_WATER)
    5054:	4bc0      	ldr	r3, [pc, #768]	; (5358 <processOnSMS+0x858>)
    5056:	795b      	ldrb	r3, [r3, #5]
    5058:	2b00      	cmp	r3, #0
    505a:	d101      	bne.n	5060 <processOnSMS+0x560>
    505c:	f001 fc4c 	bl	68f8 <processOnSMS+0x1df8>
		{
			incomingSMSProcessed=true;
    5060:	2328      	movs	r3, #40	; 0x28
    5062:	33ff      	adds	r3, #255	; 0xff
    5064:	2208      	movs	r2, #8
    5066:	4694      	mov	ip, r2
    5068:	44bc      	add	ip, r7
    506a:	4463      	add	r3, ip
    506c:	2201      	movs	r2, #1
    506e:	701a      	strb	r2, [r3, #0]
			saveWaterBypassSettings(true);
    5070:	2001      	movs	r0, #1
    5072:	4bba      	ldr	r3, [pc, #744]	; (535c <processOnSMS+0x85c>)
    5074:	4798      	blx	r3
			if (response_sms_processed_cmd == true)
    5076:	4bb3      	ldr	r3, [pc, #716]	; (5344 <processOnSMS+0x844>)
    5078:	2294      	movs	r2, #148	; 0x94
    507a:	0052      	lsls	r2, r2, #1
    507c:	4694      	mov	ip, r2
    507e:	2208      	movs	r2, #8
    5080:	4690      	mov	r8, r2
    5082:	44b8      	add	r8, r7
    5084:	44c4      	add	ip, r8
    5086:	4463      	add	r3, ip
    5088:	781b      	ldrb	r3, [r3, #0]
    508a:	2b00      	cmp	r3, #0
    508c:	d101      	bne.n	5092 <processOnSMS+0x592>
    508e:	f001 fc33 	bl	68f8 <processOnSMS+0x1df8>
			{
				strcpy(resep_msg,"WATER BYPASS ON");
    5092:	230c      	movs	r3, #12
    5094:	2208      	movs	r2, #8
    5096:	4694      	mov	ip, r2
    5098:	44bc      	add	ip, r7
    509a:	4463      	add	r3, ip
    509c:	4ab0      	ldr	r2, [pc, #704]	; (5360 <processOnSMS+0x860>)
    509e:	ca13      	ldmia	r2!, {r0, r1, r4}
    50a0:	c313      	stmia	r3!, {r0, r1, r4}
    50a2:	6812      	ldr	r2, [r2, #0]
    50a4:	601a      	str	r2, [r3, #0]
    50a6:	f001 fc27 	bl	68f8 <processOnSMS+0x1df8>
			}
		}
	}
	else if (StringstartsWith(received_command,"WBYPOFF"))
    50aa:	4aae      	ldr	r2, [pc, #696]	; (5364 <processOnSMS+0x864>)
    50ac:	68fb      	ldr	r3, [r7, #12]
    50ae:	0011      	movs	r1, r2
    50b0:	0018      	movs	r0, r3
    50b2:	4ba1      	ldr	r3, [pc, #644]	; (5338 <processOnSMS+0x838>)
    50b4:	4798      	blx	r3
    50b6:	1e03      	subs	r3, r0, #0
    50b8:	d02c      	beq.n	5114 <processOnSMS+0x614>
	{
		if (factory_settings_parameter_struct.ENABLE_WATER)
    50ba:	4ba7      	ldr	r3, [pc, #668]	; (5358 <processOnSMS+0x858>)
    50bc:	795b      	ldrb	r3, [r3, #5]
    50be:	2b00      	cmp	r3, #0
    50c0:	d101      	bne.n	50c6 <processOnSMS+0x5c6>
    50c2:	f001 fc19 	bl	68f8 <processOnSMS+0x1df8>
		{
			incomingSMSProcessed=true;
    50c6:	2328      	movs	r3, #40	; 0x28
    50c8:	33ff      	adds	r3, #255	; 0xff
    50ca:	2208      	movs	r2, #8
    50cc:	4694      	mov	ip, r2
    50ce:	44bc      	add	ip, r7
    50d0:	4463      	add	r3, ip
    50d2:	2201      	movs	r2, #1
    50d4:	701a      	strb	r2, [r3, #0]
			saveWaterBypassSettings(false);
    50d6:	2000      	movs	r0, #0
    50d8:	4ba0      	ldr	r3, [pc, #640]	; (535c <processOnSMS+0x85c>)
    50da:	4798      	blx	r3
			if (response_sms_processed_cmd == true)
    50dc:	4b99      	ldr	r3, [pc, #612]	; (5344 <processOnSMS+0x844>)
    50de:	2294      	movs	r2, #148	; 0x94
    50e0:	0052      	lsls	r2, r2, #1
    50e2:	4694      	mov	ip, r2
    50e4:	2208      	movs	r2, #8
    50e6:	4690      	mov	r8, r2
    50e8:	44b8      	add	r8, r7
    50ea:	44c4      	add	ip, r8
    50ec:	4463      	add	r3, ip
    50ee:	781b      	ldrb	r3, [r3, #0]
    50f0:	2b00      	cmp	r3, #0
    50f2:	d101      	bne.n	50f8 <processOnSMS+0x5f8>
    50f4:	f001 fc00 	bl	68f8 <processOnSMS+0x1df8>
			{
				strcpy(resep_msg,"WATER BYPASS OFF");
    50f8:	230c      	movs	r3, #12
    50fa:	2208      	movs	r2, #8
    50fc:	4694      	mov	ip, r2
    50fe:	44bc      	add	ip, r7
    5100:	4463      	add	r3, ip
    5102:	4a99      	ldr	r2, [pc, #612]	; (5368 <processOnSMS+0x868>)
    5104:	ca13      	ldmia	r2!, {r0, r1, r4}
    5106:	c313      	stmia	r3!, {r0, r1, r4}
    5108:	6811      	ldr	r1, [r2, #0]
    510a:	6019      	str	r1, [r3, #0]
    510c:	7912      	ldrb	r2, [r2, #4]
    510e:	711a      	strb	r2, [r3, #4]
    5110:	f001 fbf2 	bl	68f8 <processOnSMS+0x1df8>
			}
		}
	}
	else if (StringstartsWith(received_command,"SPPON"))
    5114:	4a95      	ldr	r2, [pc, #596]	; (536c <processOnSMS+0x86c>)
    5116:	68fb      	ldr	r3, [r7, #12]
    5118:	0011      	movs	r1, r2
    511a:	0018      	movs	r0, r3
    511c:	4b86      	ldr	r3, [pc, #536]	; (5338 <processOnSMS+0x838>)
    511e:	4798      	blx	r3
    5120:	1e03      	subs	r3, r0, #0
    5122:	d026      	beq.n	5172 <processOnSMS+0x672>
	{
		saveSinglePhasingSettings(true);
    5124:	2001      	movs	r0, #1
    5126:	4b92      	ldr	r3, [pc, #584]	; (5370 <processOnSMS+0x870>)
    5128:	4798      	blx	r3
		incomingSMSProcessed=true;
    512a:	2328      	movs	r3, #40	; 0x28
    512c:	33ff      	adds	r3, #255	; 0xff
    512e:	2208      	movs	r2, #8
    5130:	4694      	mov	ip, r2
    5132:	44bc      	add	ip, r7
    5134:	4463      	add	r3, ip
    5136:	2201      	movs	r2, #1
    5138:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
    513a:	4b82      	ldr	r3, [pc, #520]	; (5344 <processOnSMS+0x844>)
    513c:	2294      	movs	r2, #148	; 0x94
    513e:	0052      	lsls	r2, r2, #1
    5140:	4694      	mov	ip, r2
    5142:	2208      	movs	r2, #8
    5144:	4690      	mov	r8, r2
    5146:	44b8      	add	r8, r7
    5148:	44c4      	add	ip, r8
    514a:	4463      	add	r3, ip
    514c:	781b      	ldrb	r3, [r3, #0]
    514e:	2b00      	cmp	r3, #0
    5150:	d101      	bne.n	5156 <processOnSMS+0x656>
    5152:	f001 fbd1 	bl	68f8 <processOnSMS+0x1df8>
		{
			strcpy(resep_msg,"SPP ON");
    5156:	230c      	movs	r3, #12
    5158:	2208      	movs	r2, #8
    515a:	4694      	mov	ip, r2
    515c:	44bc      	add	ip, r7
    515e:	4463      	add	r3, ip
    5160:	4a84      	ldr	r2, [pc, #528]	; (5374 <processOnSMS+0x874>)
    5162:	6811      	ldr	r1, [r2, #0]
    5164:	6019      	str	r1, [r3, #0]
    5166:	8891      	ldrh	r1, [r2, #4]
    5168:	8099      	strh	r1, [r3, #4]
    516a:	7992      	ldrb	r2, [r2, #6]
    516c:	719a      	strb	r2, [r3, #6]
    516e:	f001 fbc3 	bl	68f8 <processOnSMS+0x1df8>
		}
	}
	else if (StringstartsWith(received_command,"SPPOFF"))
    5172:	4a81      	ldr	r2, [pc, #516]	; (5378 <processOnSMS+0x878>)
    5174:	68fb      	ldr	r3, [r7, #12]
    5176:	0011      	movs	r1, r2
    5178:	0018      	movs	r0, r3
    517a:	4b6f      	ldr	r3, [pc, #444]	; (5338 <processOnSMS+0x838>)
    517c:	4798      	blx	r3
    517e:	1e03      	subs	r3, r0, #0
    5180:	d022      	beq.n	51c8 <processOnSMS+0x6c8>
	{
		saveSinglePhasingSettings(false);
    5182:	2000      	movs	r0, #0
    5184:	4b7a      	ldr	r3, [pc, #488]	; (5370 <processOnSMS+0x870>)
    5186:	4798      	blx	r3
		incomingSMSProcessed=true;
    5188:	2328      	movs	r3, #40	; 0x28
    518a:	33ff      	adds	r3, #255	; 0xff
    518c:	2208      	movs	r2, #8
    518e:	4694      	mov	ip, r2
    5190:	44bc      	add	ip, r7
    5192:	4463      	add	r3, ip
    5194:	2201      	movs	r2, #1
    5196:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
    5198:	4b6a      	ldr	r3, [pc, #424]	; (5344 <processOnSMS+0x844>)
    519a:	2294      	movs	r2, #148	; 0x94
    519c:	0052      	lsls	r2, r2, #1
    519e:	4694      	mov	ip, r2
    51a0:	2208      	movs	r2, #8
    51a2:	4690      	mov	r8, r2
    51a4:	44b8      	add	r8, r7
    51a6:	44c4      	add	ip, r8
    51a8:	4463      	add	r3, ip
    51aa:	781b      	ldrb	r3, [r3, #0]
    51ac:	2b00      	cmp	r3, #0
    51ae:	d101      	bne.n	51b4 <processOnSMS+0x6b4>
    51b0:	f001 fba2 	bl	68f8 <processOnSMS+0x1df8>
		{
			strcpy(resep_msg,"SPP OFF");
    51b4:	230c      	movs	r3, #12
    51b6:	2208      	movs	r2, #8
    51b8:	4694      	mov	ip, r2
    51ba:	44bc      	add	ip, r7
    51bc:	4463      	add	r3, ip
    51be:	4a6f      	ldr	r2, [pc, #444]	; (537c <processOnSMS+0x87c>)
    51c0:	ca03      	ldmia	r2!, {r0, r1}
    51c2:	c303      	stmia	r3!, {r0, r1}
    51c4:	f001 fb98 	bl	68f8 <processOnSMS+0x1df8>
		}
	}
	else if(StringstartsWith(received_command,"SPPV"))
    51c8:	4a6d      	ldr	r2, [pc, #436]	; (5380 <processOnSMS+0x880>)
    51ca:	68fb      	ldr	r3, [r7, #12]
    51cc:	0011      	movs	r1, r2
    51ce:	0018      	movs	r0, r3
    51d0:	4b59      	ldr	r3, [pc, #356]	; (5338 <processOnSMS+0x838>)
    51d2:	4798      	blx	r3
    51d4:	1e03      	subs	r3, r0, #0
    51d6:	d055      	beq.n	5284 <processOnSMS+0x784>
	{
		memmove(received_command,received_command+4,strlen(received_command));
    51d8:	68fb      	ldr	r3, [r7, #12]
    51da:	1d1c      	adds	r4, r3, #4
    51dc:	68fb      	ldr	r3, [r7, #12]
    51de:	0018      	movs	r0, r3
    51e0:	4b68      	ldr	r3, [pc, #416]	; (5384 <processOnSMS+0x884>)
    51e2:	4798      	blx	r3
    51e4:	0002      	movs	r2, r0
    51e6:	68fb      	ldr	r3, [r7, #12]
    51e8:	0021      	movs	r1, r4
    51ea:	0018      	movs	r0, r3
    51ec:	4b66      	ldr	r3, [pc, #408]	; (5388 <processOnSMS+0x888>)
    51ee:	4798      	blx	r3
		uint8_t sppVoltage = atoi(received_command);
    51f0:	68fb      	ldr	r3, [r7, #12]
    51f2:	0018      	movs	r0, r3
    51f4:	4b65      	ldr	r3, [pc, #404]	; (538c <processOnSMS+0x88c>)
    51f6:	4798      	blx	r3
    51f8:	0002      	movs	r2, r0
    51fa:	2393      	movs	r3, #147	; 0x93
    51fc:	005b      	lsls	r3, r3, #1
    51fe:	2108      	movs	r1, #8
    5200:	468c      	mov	ip, r1
    5202:	44bc      	add	ip, r7
    5204:	4463      	add	r3, ip
    5206:	701a      	strb	r2, [r3, #0]
		if(sppVoltage<20) sppVoltage=20;
    5208:	2393      	movs	r3, #147	; 0x93
    520a:	005b      	lsls	r3, r3, #1
    520c:	2208      	movs	r2, #8
    520e:	4694      	mov	ip, r2
    5210:	44bc      	add	ip, r7
    5212:	4463      	add	r3, ip
    5214:	781b      	ldrb	r3, [r3, #0]
    5216:	2b13      	cmp	r3, #19
    5218:	d807      	bhi.n	522a <processOnSMS+0x72a>
    521a:	2393      	movs	r3, #147	; 0x93
    521c:	005b      	lsls	r3, r3, #1
    521e:	2208      	movs	r2, #8
    5220:	4694      	mov	ip, r2
    5222:	44bc      	add	ip, r7
    5224:	4463      	add	r3, ip
    5226:	2214      	movs	r2, #20
    5228:	701a      	strb	r2, [r3, #0]
		if(sppVoltage>440) sppVoltage=440;
		saveSinglePhasingVoltage(sppVoltage);
    522a:	2393      	movs	r3, #147	; 0x93
    522c:	005b      	lsls	r3, r3, #1
    522e:	2208      	movs	r2, #8
    5230:	4694      	mov	ip, r2
    5232:	44bc      	add	ip, r7
    5234:	4463      	add	r3, ip
    5236:	781b      	ldrb	r3, [r3, #0]
    5238:	b29b      	uxth	r3, r3
    523a:	0018      	movs	r0, r3
    523c:	4b54      	ldr	r3, [pc, #336]	; (5390 <processOnSMS+0x890>)
    523e:	4798      	blx	r3
		
		incomingSMSProcessed=true;
    5240:	2328      	movs	r3, #40	; 0x28
    5242:	33ff      	adds	r3, #255	; 0xff
    5244:	2208      	movs	r2, #8
    5246:	4694      	mov	ip, r2
    5248:	44bc      	add	ip, r7
    524a:	4463      	add	r3, ip
    524c:	2201      	movs	r2, #1
    524e:	701a      	strb	r2, [r3, #0]
		
		
		if (response_sms_processed_cmd == true)
    5250:	4b3c      	ldr	r3, [pc, #240]	; (5344 <processOnSMS+0x844>)
    5252:	2294      	movs	r2, #148	; 0x94
    5254:	0052      	lsls	r2, r2, #1
    5256:	4694      	mov	ip, r2
    5258:	2208      	movs	r2, #8
    525a:	4690      	mov	r8, r2
    525c:	44b8      	add	r8, r7
    525e:	44c4      	add	ip, r8
    5260:	4463      	add	r3, ip
    5262:	781b      	ldrb	r3, [r3, #0]
    5264:	2b00      	cmp	r3, #0
    5266:	d101      	bne.n	526c <processOnSMS+0x76c>
    5268:	f001 fb46 	bl	68f8 <processOnSMS+0x1df8>
		{
			strcpy(resep_msg,"SPP VOLT SET");
    526c:	230c      	movs	r3, #12
    526e:	2208      	movs	r2, #8
    5270:	4694      	mov	ip, r2
    5272:	44bc      	add	ip, r7
    5274:	4463      	add	r3, ip
    5276:	4a47      	ldr	r2, [pc, #284]	; (5394 <processOnSMS+0x894>)
    5278:	ca13      	ldmia	r2!, {r0, r1, r4}
    527a:	c313      	stmia	r3!, {r0, r1, r4}
    527c:	7812      	ldrb	r2, [r2, #0]
    527e:	701a      	strb	r2, [r3, #0]
    5280:	f001 fb3a 	bl	68f8 <processOnSMS+0x1df8>
		}
	}
	else if(StringstartsWith(received_command,"SEQON"))
    5284:	4a44      	ldr	r2, [pc, #272]	; (5398 <processOnSMS+0x898>)
    5286:	68fb      	ldr	r3, [r7, #12]
    5288:	0011      	movs	r1, r2
    528a:	0018      	movs	r0, r3
    528c:	4b2a      	ldr	r3, [pc, #168]	; (5338 <processOnSMS+0x838>)
    528e:	4798      	blx	r3
    5290:	1e03      	subs	r3, r0, #0
    5292:	d022      	beq.n	52da <processOnSMS+0x7da>
	{
		savePhaseSequenceProtectionSettings(true);
    5294:	2001      	movs	r0, #1
    5296:	4b41      	ldr	r3, [pc, #260]	; (539c <processOnSMS+0x89c>)
    5298:	4798      	blx	r3
		
		incomingSMSProcessed=true;
    529a:	2328      	movs	r3, #40	; 0x28
    529c:	33ff      	adds	r3, #255	; 0xff
    529e:	2208      	movs	r2, #8
    52a0:	4694      	mov	ip, r2
    52a2:	44bc      	add	ip, r7
    52a4:	4463      	add	r3, ip
    52a6:	2201      	movs	r2, #1
    52a8:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
    52aa:	4b26      	ldr	r3, [pc, #152]	; (5344 <processOnSMS+0x844>)
    52ac:	2294      	movs	r2, #148	; 0x94
    52ae:	0052      	lsls	r2, r2, #1
    52b0:	4694      	mov	ip, r2
    52b2:	2208      	movs	r2, #8
    52b4:	4690      	mov	r8, r2
    52b6:	44b8      	add	r8, r7
    52b8:	44c4      	add	ip, r8
    52ba:	4463      	add	r3, ip
    52bc:	781b      	ldrb	r3, [r3, #0]
    52be:	2b00      	cmp	r3, #0
    52c0:	d101      	bne.n	52c6 <processOnSMS+0x7c6>
    52c2:	f001 fb19 	bl	68f8 <processOnSMS+0x1df8>
		{
			strcpy(resep_msg,"SEQP ON");
    52c6:	230c      	movs	r3, #12
    52c8:	2208      	movs	r2, #8
    52ca:	4694      	mov	ip, r2
    52cc:	44bc      	add	ip, r7
    52ce:	4463      	add	r3, ip
    52d0:	4a33      	ldr	r2, [pc, #204]	; (53a0 <processOnSMS+0x8a0>)
    52d2:	ca03      	ldmia	r2!, {r0, r1}
    52d4:	c303      	stmia	r3!, {r0, r1}
    52d6:	f001 fb0f 	bl	68f8 <processOnSMS+0x1df8>
		}
	}
	else if(StringstartsWith(received_command,"SEQOFF"))
    52da:	4a32      	ldr	r2, [pc, #200]	; (53a4 <processOnSMS+0x8a4>)
    52dc:	68fb      	ldr	r3, [r7, #12]
    52de:	0011      	movs	r1, r2
    52e0:	0018      	movs	r0, r3
    52e2:	4b15      	ldr	r3, [pc, #84]	; (5338 <processOnSMS+0x838>)
    52e4:	4798      	blx	r3
    52e6:	1e03      	subs	r3, r0, #0
    52e8:	d060      	beq.n	53ac <processOnSMS+0x8ac>
	{
		savePhaseSequenceProtectionSettings(false);
    52ea:	2000      	movs	r0, #0
    52ec:	4b2b      	ldr	r3, [pc, #172]	; (539c <processOnSMS+0x89c>)
    52ee:	4798      	blx	r3

		incomingSMSProcessed=true;
    52f0:	2328      	movs	r3, #40	; 0x28
    52f2:	33ff      	adds	r3, #255	; 0xff
    52f4:	2208      	movs	r2, #8
    52f6:	4694      	mov	ip, r2
    52f8:	44bc      	add	ip, r7
    52fa:	4463      	add	r3, ip
    52fc:	2201      	movs	r2, #1
    52fe:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
    5300:	4b10      	ldr	r3, [pc, #64]	; (5344 <processOnSMS+0x844>)
    5302:	2294      	movs	r2, #148	; 0x94
    5304:	0052      	lsls	r2, r2, #1
    5306:	4694      	mov	ip, r2
    5308:	2208      	movs	r2, #8
    530a:	4690      	mov	r8, r2
    530c:	44b8      	add	r8, r7
    530e:	44c4      	add	ip, r8
    5310:	4463      	add	r3, ip
    5312:	781b      	ldrb	r3, [r3, #0]
    5314:	2b00      	cmp	r3, #0
    5316:	d101      	bne.n	531c <processOnSMS+0x81c>
    5318:	f001 faee 	bl	68f8 <processOnSMS+0x1df8>
		{
			strcpy(resep_msg,"SEQP OFF");
    531c:	230c      	movs	r3, #12
    531e:	2208      	movs	r2, #8
    5320:	4694      	mov	ip, r2
    5322:	44bc      	add	ip, r7
    5324:	4463      	add	r3, ip
    5326:	4a20      	ldr	r2, [pc, #128]	; (53a8 <processOnSMS+0x8a8>)
    5328:	ca03      	ldmia	r2!, {r0, r1}
    532a:	c303      	stmia	r3!, {r0, r1}
    532c:	7812      	ldrb	r2, [r2, #0]
    532e:	701a      	strb	r2, [r3, #0]
    5330:	f001 fae2 	bl	68f8 <processOnSMS+0x1df8>
    5334:	00018e6c 	.word	0x00018e6c
    5338:	00003db5 	.word	0x00003db5
    533c:	000012a9 	.word	0x000012a9
    5340:	0000a0f9 	.word	0x0000a0f9
    5344:	fffffeda 	.word	0xfffffeda
    5348:	00018e74 	.word	0x00018e74
    534c:	00018e84 	.word	0x00018e84
    5350:	00018e8c 	.word	0x00018e8c
    5354:	00018ea0 	.word	0x00018ea0
    5358:	20000618 	.word	0x20000618
    535c:	00001469 	.word	0x00001469
    5360:	00018ea8 	.word	0x00018ea8
    5364:	00018eb8 	.word	0x00018eb8
    5368:	00018ec0 	.word	0x00018ec0
    536c:	00018ed4 	.word	0x00018ed4
    5370:	000015d9 	.word	0x000015d9
    5374:	00018edc 	.word	0x00018edc
    5378:	00018ee4 	.word	0x00018ee4
    537c:	00018eec 	.word	0x00018eec
    5380:	00018ef4 	.word	0x00018ef4
    5384:	00017de7 	.word	0x00017de7
    5388:	00017b33 	.word	0x00017b33
    538c:	00017a3d 	.word	0x00017a3d
    5390:	00001625 	.word	0x00001625
    5394:	00018efc 	.word	0x00018efc
    5398:	00018f0c 	.word	0x00018f0c
    539c:	00001671 	.word	0x00001671
    53a0:	00018f14 	.word	0x00018f14
    53a4:	00018f1c 	.word	0x00018f1c
    53a8:	00018f24 	.word	0x00018f24
		}
	}
	else if (StringstartsWith(received_command,"DND"))
    53ac:	4adf      	ldr	r2, [pc, #892]	; (572c <processOnSMS+0xc2c>)
    53ae:	68fb      	ldr	r3, [r7, #12]
    53b0:	0011      	movs	r1, r2
    53b2:	0018      	movs	r0, r3
    53b4:	4bde      	ldr	r3, [pc, #888]	; (5730 <processOnSMS+0xc30>)
    53b6:	4798      	blx	r3
    53b8:	1e03      	subs	r3, r0, #0
    53ba:	d06c      	beq.n	5496 <processOnSMS+0x996>
	{
		if (strlen(received_command)>3)
    53bc:	68fb      	ldr	r3, [r7, #12]
    53be:	0018      	movs	r0, r3
    53c0:	4bdc      	ldr	r3, [pc, #880]	; (5734 <processOnSMS+0xc34>)
    53c2:	4798      	blx	r3
    53c4:	0003      	movs	r3, r0
    53c6:	2b03      	cmp	r3, #3
    53c8:	d801      	bhi.n	53ce <processOnSMS+0x8ce>
    53ca:	f001 fa95 	bl	68f8 <processOnSMS+0x1df8>
		{
			memmove(received_command,received_command+3,strlen(received_command));
    53ce:	68fb      	ldr	r3, [r7, #12]
    53d0:	1cdc      	adds	r4, r3, #3
    53d2:	68fb      	ldr	r3, [r7, #12]
    53d4:	0018      	movs	r0, r3
    53d6:	4bd7      	ldr	r3, [pc, #860]	; (5734 <processOnSMS+0xc34>)
    53d8:	4798      	blx	r3
    53da:	0002      	movs	r2, r0
    53dc:	68fb      	ldr	r3, [r7, #12]
    53de:	0021      	movs	r1, r4
    53e0:	0018      	movs	r0, r3
    53e2:	4bd5      	ldr	r3, [pc, #852]	; (5738 <processOnSMS+0xc38>)
    53e4:	4798      	blx	r3
			if(received_command[0]=='L' || received_command[0]=='S' || received_command[0]=='O')
    53e6:	68fb      	ldr	r3, [r7, #12]
    53e8:	781b      	ldrb	r3, [r3, #0]
    53ea:	2b4c      	cmp	r3, #76	; 0x4c
    53ec:	d009      	beq.n	5402 <processOnSMS+0x902>
    53ee:	68fb      	ldr	r3, [r7, #12]
    53f0:	781b      	ldrb	r3, [r3, #0]
    53f2:	2b53      	cmp	r3, #83	; 0x53
    53f4:	d005      	beq.n	5402 <processOnSMS+0x902>
    53f6:	68fb      	ldr	r3, [r7, #12]
    53f8:	781b      	ldrb	r3, [r3, #0]
    53fa:	2b4f      	cmp	r3, #79	; 0x4f
    53fc:	d001      	beq.n	5402 <processOnSMS+0x902>
    53fe:	f001 fa7b 	bl	68f8 <processOnSMS+0x1df8>
			{
				saveDNDSettings((char)received_command);  //save specific RESPONSE settings
    5402:	68fb      	ldr	r3, [r7, #12]
    5404:	b2db      	uxtb	r3, r3
    5406:	0018      	movs	r0, r3
    5408:	4bcc      	ldr	r3, [pc, #816]	; (573c <processOnSMS+0xc3c>)
    540a:	4798      	blx	r3
				
				incomingSMSProcessed=true;
    540c:	2328      	movs	r3, #40	; 0x28
    540e:	33ff      	adds	r3, #255	; 0xff
    5410:	2208      	movs	r2, #8
    5412:	4694      	mov	ip, r2
    5414:	44bc      	add	ip, r7
    5416:	4463      	add	r3, ip
    5418:	2201      	movs	r2, #1
    541a:	701a      	strb	r2, [r3, #0]
				
				if (response_sms_processed_cmd == true)
    541c:	4bc8      	ldr	r3, [pc, #800]	; (5740 <processOnSMS+0xc40>)
    541e:	2294      	movs	r2, #148	; 0x94
    5420:	0052      	lsls	r2, r2, #1
    5422:	4694      	mov	ip, r2
    5424:	2208      	movs	r2, #8
    5426:	4690      	mov	r8, r2
    5428:	44b8      	add	r8, r7
    542a:	44c4      	add	ip, r8
    542c:	4463      	add	r3, ip
    542e:	781b      	ldrb	r3, [r3, #0]
    5430:	2b00      	cmp	r3, #0
    5432:	d101      	bne.n	5438 <processOnSMS+0x938>
    5434:	f001 fa60 	bl	68f8 <processOnSMS+0x1df8>
				{
					strcpy(resep_msg,"DND : ");
    5438:	230c      	movs	r3, #12
    543a:	2208      	movs	r2, #8
    543c:	4694      	mov	ip, r2
    543e:	44bc      	add	ip, r7
    5440:	4463      	add	r3, ip
    5442:	4ac0      	ldr	r2, [pc, #768]	; (5744 <processOnSMS+0xc44>)
    5444:	6811      	ldr	r1, [r2, #0]
    5446:	6019      	str	r1, [r3, #0]
    5448:	8891      	ldrh	r1, [r2, #4]
    544a:	8099      	strh	r1, [r3, #4]
    544c:	7992      	ldrb	r2, [r2, #6]
    544e:	719a      	strb	r2, [r3, #6]
					strcat(resep_msg,received_command);
    5450:	68fa      	ldr	r2, [r7, #12]
    5452:	230c      	movs	r3, #12
    5454:	2108      	movs	r1, #8
    5456:	468c      	mov	ip, r1
    5458:	44bc      	add	ip, r7
    545a:	4463      	add	r3, ip
    545c:	0011      	movs	r1, r2
    545e:	0018      	movs	r0, r3
    5460:	4bb9      	ldr	r3, [pc, #740]	; (5748 <processOnSMS+0xc48>)
    5462:	4798      	blx	r3
					strcat(resep_msg," OK");
    5464:	230c      	movs	r3, #12
    5466:	2208      	movs	r2, #8
    5468:	4694      	mov	ip, r2
    546a:	44bc      	add	ip, r7
    546c:	4463      	add	r3, ip
    546e:	0018      	movs	r0, r3
    5470:	4bb0      	ldr	r3, [pc, #704]	; (5734 <processOnSMS+0xc34>)
    5472:	4798      	blx	r3
    5474:	0003      	movs	r3, r0
    5476:	001a      	movs	r2, r3
    5478:	230c      	movs	r3, #12
    547a:	2108      	movs	r1, #8
    547c:	468c      	mov	ip, r1
    547e:	44bc      	add	ip, r7
    5480:	4463      	add	r3, ip
    5482:	189a      	adds	r2, r3, r2
    5484:	4bb1      	ldr	r3, [pc, #708]	; (574c <processOnSMS+0xc4c>)
    5486:	0010      	movs	r0, r2
    5488:	0019      	movs	r1, r3
    548a:	2304      	movs	r3, #4
    548c:	001a      	movs	r2, r3
    548e:	4bb0      	ldr	r3, [pc, #704]	; (5750 <processOnSMS+0xc50>)
    5490:	4798      	blx	r3
    5492:	f001 fa31 	bl	68f8 <processOnSMS+0x1df8>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"FDBK"))
    5496:	4aaf      	ldr	r2, [pc, #700]	; (5754 <processOnSMS+0xc54>)
    5498:	68fb      	ldr	r3, [r7, #12]
    549a:	0011      	movs	r1, r2
    549c:	0018      	movs	r0, r3
    549e:	4ba4      	ldr	r3, [pc, #656]	; (5730 <processOnSMS+0xc30>)
    54a0:	4798      	blx	r3
    54a2:	1e03      	subs	r3, r0, #0
    54a4:	d072      	beq.n	558c <processOnSMS+0xa8c>
	{
		if (strlen(received_command)>4)
    54a6:	68fb      	ldr	r3, [r7, #12]
    54a8:	0018      	movs	r0, r3
    54aa:	4ba2      	ldr	r3, [pc, #648]	; (5734 <processOnSMS+0xc34>)
    54ac:	4798      	blx	r3
    54ae:	0003      	movs	r3, r0
    54b0:	2b04      	cmp	r3, #4
    54b2:	d801      	bhi.n	54b8 <processOnSMS+0x9b8>
    54b4:	f001 fa20 	bl	68f8 <processOnSMS+0x1df8>
		{
			memmove(received_command,received_command+4,strlen(received_command));
    54b8:	68fb      	ldr	r3, [r7, #12]
    54ba:	1d1c      	adds	r4, r3, #4
    54bc:	68fb      	ldr	r3, [r7, #12]
    54be:	0018      	movs	r0, r3
    54c0:	4b9c      	ldr	r3, [pc, #624]	; (5734 <processOnSMS+0xc34>)
    54c2:	4798      	blx	r3
    54c4:	0002      	movs	r2, r0
    54c6:	68fb      	ldr	r3, [r7, #12]
    54c8:	0021      	movs	r1, r4
    54ca:	0018      	movs	r0, r3
    54cc:	4b9a      	ldr	r3, [pc, #616]	; (5738 <processOnSMS+0xc38>)
    54ce:	4798      	blx	r3
			uint8_t fdbkValue = atoi(received_command);
    54d0:	68fb      	ldr	r3, [r7, #12]
    54d2:	0018      	movs	r0, r3
    54d4:	4ba0      	ldr	r3, [pc, #640]	; (5758 <processOnSMS+0xc58>)
    54d6:	4798      	blx	r3
    54d8:	0002      	movs	r2, r0
    54da:	2326      	movs	r3, #38	; 0x26
    54dc:	33ff      	adds	r3, #255	; 0xff
    54de:	2108      	movs	r1, #8
    54e0:	468c      	mov	ip, r1
    54e2:	44bc      	add	ip, r7
    54e4:	4463      	add	r3, ip
    54e6:	701a      	strb	r2, [r3, #0]
			if (fdbkValue <= MOTORFEEDBACK_DETECTION_ON)
    54e8:	2326      	movs	r3, #38	; 0x26
    54ea:	33ff      	adds	r3, #255	; 0xff
    54ec:	2208      	movs	r2, #8
    54ee:	4694      	mov	ip, r2
    54f0:	44bc      	add	ip, r7
    54f2:	4463      	add	r3, ip
    54f4:	781b      	ldrb	r3, [r3, #0]
    54f6:	2b02      	cmp	r3, #2
    54f8:	d901      	bls.n	54fe <processOnSMS+0x9fe>
    54fa:	f001 f9fd 	bl	68f8 <processOnSMS+0x1df8>
			{
				if (fdbkValue == MOTORFEEDBACK_DETECTION_CURRENT)
    54fe:	2326      	movs	r3, #38	; 0x26
    5500:	33ff      	adds	r3, #255	; 0xff
    5502:	2208      	movs	r2, #8
    5504:	4694      	mov	ip, r2
    5506:	44bc      	add	ip, r7
    5508:	4463      	add	r3, ip
    550a:	781b      	ldrb	r3, [r3, #0]
    550c:	2b01      	cmp	r3, #1
    550e:	d10b      	bne.n	5528 <processOnSMS+0xa28>
				{
					if (!factory_settings_parameter_struct.ENABLE_CURRENT)
    5510:	4b92      	ldr	r3, [pc, #584]	; (575c <processOnSMS+0xc5c>)
    5512:	785b      	ldrb	r3, [r3, #1]
    5514:	2b00      	cmp	r3, #0
    5516:	d107      	bne.n	5528 <processOnSMS+0xa28>
					{
						fdbkValue=MOTORFEEDBACK_DETECTION_OFF;
    5518:	2326      	movs	r3, #38	; 0x26
    551a:	33ff      	adds	r3, #255	; 0xff
    551c:	2208      	movs	r2, #8
    551e:	4694      	mov	ip, r2
    5520:	44bc      	add	ip, r7
    5522:	4463      	add	r3, ip
    5524:	2200      	movs	r2, #0
    5526:	701a      	strb	r2, [r3, #0]
					}
				}
				saveMotorFeedbackDetectionSettings(fdbkValue);
    5528:	2326      	movs	r3, #38	; 0x26
    552a:	33ff      	adds	r3, #255	; 0xff
    552c:	2208      	movs	r2, #8
    552e:	4694      	mov	ip, r2
    5530:	44bc      	add	ip, r7
    5532:	4463      	add	r3, ip
    5534:	781b      	ldrb	r3, [r3, #0]
    5536:	0018      	movs	r0, r3
    5538:	4b89      	ldr	r3, [pc, #548]	; (5760 <processOnSMS+0xc60>)
    553a:	4798      	blx	r3
				incomingSMSProcessed=true;
    553c:	2328      	movs	r3, #40	; 0x28
    553e:	33ff      	adds	r3, #255	; 0xff
    5540:	2208      	movs	r2, #8
    5542:	4694      	mov	ip, r2
    5544:	44bc      	add	ip, r7
    5546:	4463      	add	r3, ip
    5548:	2201      	movs	r2, #1
    554a:	701a      	strb	r2, [r3, #0]
				
				if (response_sms_processed_cmd == true)
    554c:	4b7c      	ldr	r3, [pc, #496]	; (5740 <processOnSMS+0xc40>)
    554e:	2294      	movs	r2, #148	; 0x94
    5550:	0052      	lsls	r2, r2, #1
    5552:	4694      	mov	ip, r2
    5554:	2208      	movs	r2, #8
    5556:	4690      	mov	r8, r2
    5558:	44b8      	add	r8, r7
    555a:	44c4      	add	ip, r8
    555c:	4463      	add	r3, ip
    555e:	781b      	ldrb	r3, [r3, #0]
    5560:	2b00      	cmp	r3, #0
    5562:	d101      	bne.n	5568 <processOnSMS+0xa68>
    5564:	f001 f9c8 	bl	68f8 <processOnSMS+0x1df8>
				{
					sprintf(resep_msg,"FDBK : %d", fdbkValue);
    5568:	2326      	movs	r3, #38	; 0x26
    556a:	33ff      	adds	r3, #255	; 0xff
    556c:	2208      	movs	r2, #8
    556e:	4694      	mov	ip, r2
    5570:	44bc      	add	ip, r7
    5572:	4463      	add	r3, ip
    5574:	781a      	ldrb	r2, [r3, #0]
    5576:	497b      	ldr	r1, [pc, #492]	; (5764 <processOnSMS+0xc64>)
    5578:	230c      	movs	r3, #12
    557a:	2008      	movs	r0, #8
    557c:	4684      	mov	ip, r0
    557e:	44bc      	add	ip, r7
    5580:	4463      	add	r3, ip
    5582:	0018      	movs	r0, r3
    5584:	4b78      	ldr	r3, [pc, #480]	; (5768 <processOnSMS+0xc68>)
    5586:	4798      	blx	r3
    5588:	f001 f9b6 	bl	68f8 <processOnSMS+0x1df8>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"RESP"))
    558c:	4a77      	ldr	r2, [pc, #476]	; (576c <processOnSMS+0xc6c>)
    558e:	68fb      	ldr	r3, [r7, #12]
    5590:	0011      	movs	r1, r2
    5592:	0018      	movs	r0, r3
    5594:	4b66      	ldr	r3, [pc, #408]	; (5730 <processOnSMS+0xc30>)
    5596:	4798      	blx	r3
    5598:	1e03      	subs	r3, r0, #0
    559a:	d06c      	beq.n	5676 <processOnSMS+0xb76>
	{
		if (strlen(received_command)>4)
    559c:	68fb      	ldr	r3, [r7, #12]
    559e:	0018      	movs	r0, r3
    55a0:	4b64      	ldr	r3, [pc, #400]	; (5734 <processOnSMS+0xc34>)
    55a2:	4798      	blx	r3
    55a4:	0003      	movs	r3, r0
    55a6:	2b04      	cmp	r3, #4
    55a8:	d801      	bhi.n	55ae <processOnSMS+0xaae>
    55aa:	f001 f9a5 	bl	68f8 <processOnSMS+0x1df8>
		{
			memmove(received_command,received_command+4,strlen(received_command));
    55ae:	68fb      	ldr	r3, [r7, #12]
    55b0:	1d1c      	adds	r4, r3, #4
    55b2:	68fb      	ldr	r3, [r7, #12]
    55b4:	0018      	movs	r0, r3
    55b6:	4b5f      	ldr	r3, [pc, #380]	; (5734 <processOnSMS+0xc34>)
    55b8:	4798      	blx	r3
    55ba:	0002      	movs	r2, r0
    55bc:	68fb      	ldr	r3, [r7, #12]
    55be:	0021      	movs	r1, r4
    55c0:	0018      	movs	r0, r3
    55c2:	4b5d      	ldr	r3, [pc, #372]	; (5738 <processOnSMS+0xc38>)
    55c4:	4798      	blx	r3
			if(received_command[0]=='C' || received_command[0]=='A' || received_command[0]=='T' || received_command[0]=='N')
    55c6:	68fb      	ldr	r3, [r7, #12]
    55c8:	781b      	ldrb	r3, [r3, #0]
    55ca:	2b43      	cmp	r3, #67	; 0x43
    55cc:	d00d      	beq.n	55ea <processOnSMS+0xaea>
    55ce:	68fb      	ldr	r3, [r7, #12]
    55d0:	781b      	ldrb	r3, [r3, #0]
    55d2:	2b41      	cmp	r3, #65	; 0x41
    55d4:	d009      	beq.n	55ea <processOnSMS+0xaea>
    55d6:	68fb      	ldr	r3, [r7, #12]
    55d8:	781b      	ldrb	r3, [r3, #0]
    55da:	2b54      	cmp	r3, #84	; 0x54
    55dc:	d005      	beq.n	55ea <processOnSMS+0xaea>
    55de:	68fb      	ldr	r3, [r7, #12]
    55e0:	781b      	ldrb	r3, [r3, #0]
    55e2:	2b4e      	cmp	r3, #78	; 0x4e
    55e4:	d001      	beq.n	55ea <processOnSMS+0xaea>
    55e6:	f001 f987 	bl	68f8 <processOnSMS+0x1df8>
			{
				saveResponseSettings((char)received_command);  //save specific RESPONSE settings
    55ea:	68fb      	ldr	r3, [r7, #12]
    55ec:	b2db      	uxtb	r3, r3
    55ee:	0018      	movs	r0, r3
    55f0:	4b5f      	ldr	r3, [pc, #380]	; (5770 <processOnSMS+0xc70>)
    55f2:	4798      	blx	r3
				
				incomingSMSProcessed=true;
    55f4:	2328      	movs	r3, #40	; 0x28
    55f6:	33ff      	adds	r3, #255	; 0xff
    55f8:	2208      	movs	r2, #8
    55fa:	4694      	mov	ip, r2
    55fc:	44bc      	add	ip, r7
    55fe:	4463      	add	r3, ip
    5600:	2201      	movs	r2, #1
    5602:	701a      	strb	r2, [r3, #0]
				
				if (response_sms_processed_cmd == true)
    5604:	4b4e      	ldr	r3, [pc, #312]	; (5740 <processOnSMS+0xc40>)
    5606:	2294      	movs	r2, #148	; 0x94
    5608:	0052      	lsls	r2, r2, #1
    560a:	4694      	mov	ip, r2
    560c:	2208      	movs	r2, #8
    560e:	4690      	mov	r8, r2
    5610:	44b8      	add	r8, r7
    5612:	44c4      	add	ip, r8
    5614:	4463      	add	r3, ip
    5616:	781b      	ldrb	r3, [r3, #0]
    5618:	2b00      	cmp	r3, #0
    561a:	d101      	bne.n	5620 <processOnSMS+0xb20>
    561c:	f001 f96c 	bl	68f8 <processOnSMS+0x1df8>
				{
					strcpy(resep_msg,"RESP : ");
    5620:	230c      	movs	r3, #12
    5622:	2208      	movs	r2, #8
    5624:	4694      	mov	ip, r2
    5626:	44bc      	add	ip, r7
    5628:	4463      	add	r3, ip
    562a:	4a52      	ldr	r2, [pc, #328]	; (5774 <processOnSMS+0xc74>)
    562c:	ca03      	ldmia	r2!, {r0, r1}
    562e:	c303      	stmia	r3!, {r0, r1}
					strcat(resep_msg,received_command);
    5630:	68fa      	ldr	r2, [r7, #12]
    5632:	230c      	movs	r3, #12
    5634:	2108      	movs	r1, #8
    5636:	468c      	mov	ip, r1
    5638:	44bc      	add	ip, r7
    563a:	4463      	add	r3, ip
    563c:	0011      	movs	r1, r2
    563e:	0018      	movs	r0, r3
    5640:	4b41      	ldr	r3, [pc, #260]	; (5748 <processOnSMS+0xc48>)
    5642:	4798      	blx	r3
					strcat(resep_msg," OK");
    5644:	230c      	movs	r3, #12
    5646:	2208      	movs	r2, #8
    5648:	4694      	mov	ip, r2
    564a:	44bc      	add	ip, r7
    564c:	4463      	add	r3, ip
    564e:	0018      	movs	r0, r3
    5650:	4b38      	ldr	r3, [pc, #224]	; (5734 <processOnSMS+0xc34>)
    5652:	4798      	blx	r3
    5654:	0003      	movs	r3, r0
    5656:	001a      	movs	r2, r3
    5658:	230c      	movs	r3, #12
    565a:	2108      	movs	r1, #8
    565c:	468c      	mov	ip, r1
    565e:	44bc      	add	ip, r7
    5660:	4463      	add	r3, ip
    5662:	189a      	adds	r2, r3, r2
    5664:	4b39      	ldr	r3, [pc, #228]	; (574c <processOnSMS+0xc4c>)
    5666:	0010      	movs	r0, r2
    5668:	0019      	movs	r1, r3
    566a:	2304      	movs	r3, #4
    566c:	001a      	movs	r2, r3
    566e:	4b38      	ldr	r3, [pc, #224]	; (5750 <processOnSMS+0xc50>)
    5670:	4798      	blx	r3
    5672:	f001 f941 	bl	68f8 <processOnSMS+0x1df8>
	}
	//else if (StringstartsWith(received_command,"SJMP"))
	//{
	//strcpy(resep_msg,"New hardware does not required Jumper Setting");
	//}
	else if (StringstartsWith(received_command,"OVR"))
    5676:	4a40      	ldr	r2, [pc, #256]	; (5778 <processOnSMS+0xc78>)
    5678:	68fb      	ldr	r3, [r7, #12]
    567a:	0011      	movs	r1, r2
    567c:	0018      	movs	r0, r3
    567e:	4b2c      	ldr	r3, [pc, #176]	; (5730 <processOnSMS+0xc30>)
    5680:	4798      	blx	r3
    5682:	1e03      	subs	r3, r0, #0
    5684:	d100      	bne.n	5688 <processOnSMS+0xb88>
    5686:	e07d      	b.n	5784 <processOnSMS+0xc84>
	{
		memmove(received_command,received_command+3,strlen(received_command));
    5688:	68fb      	ldr	r3, [r7, #12]
    568a:	1cdc      	adds	r4, r3, #3
    568c:	68fb      	ldr	r3, [r7, #12]
    568e:	0018      	movs	r0, r3
    5690:	4b28      	ldr	r3, [pc, #160]	; (5734 <processOnSMS+0xc34>)
    5692:	4798      	blx	r3
    5694:	0002      	movs	r2, r0
    5696:	68fb      	ldr	r3, [r7, #12]
    5698:	0021      	movs	r1, r4
    569a:	0018      	movs	r0, r3
    569c:	4b26      	ldr	r3, [pc, #152]	; (5738 <processOnSMS+0xc38>)
    569e:	4798      	blx	r3
		uint8_t ovr_per = atoi(received_command);
    56a0:	68fb      	ldr	r3, [r7, #12]
    56a2:	0018      	movs	r0, r3
    56a4:	4b2c      	ldr	r3, [pc, #176]	; (5758 <processOnSMS+0xc58>)
    56a6:	4798      	blx	r3
    56a8:	0002      	movs	r2, r0
    56aa:	238b      	movs	r3, #139	; 0x8b
    56ac:	005b      	lsls	r3, r3, #1
    56ae:	2108      	movs	r1, #8
    56b0:	468c      	mov	ip, r1
    56b2:	44bc      	add	ip, r7
    56b4:	4463      	add	r3, ip
    56b6:	701a      	strb	r2, [r3, #0]
		if(ovr_per>104)
    56b8:	238b      	movs	r3, #139	; 0x8b
    56ba:	005b      	lsls	r3, r3, #1
    56bc:	2208      	movs	r2, #8
    56be:	4694      	mov	ip, r2
    56c0:	44bc      	add	ip, r7
    56c2:	4463      	add	r3, ip
    56c4:	781b      	ldrb	r3, [r3, #0]
    56c6:	2b68      	cmp	r3, #104	; 0x68
    56c8:	d801      	bhi.n	56ce <processOnSMS+0xbce>
    56ca:	f001 f915 	bl	68f8 <processOnSMS+0x1df8>
		{
			setOverloadPer(ovr_per);
    56ce:	238b      	movs	r3, #139	; 0x8b
    56d0:	005b      	lsls	r3, r3, #1
    56d2:	2208      	movs	r2, #8
    56d4:	4694      	mov	ip, r2
    56d6:	44bc      	add	ip, r7
    56d8:	4463      	add	r3, ip
    56da:	781b      	ldrb	r3, [r3, #0]
    56dc:	0018      	movs	r0, r3
    56de:	4b27      	ldr	r3, [pc, #156]	; (577c <processOnSMS+0xc7c>)
    56e0:	4798      	blx	r3
			incomingSMSProcessed=true;
    56e2:	2328      	movs	r3, #40	; 0x28
    56e4:	33ff      	adds	r3, #255	; 0xff
    56e6:	2208      	movs	r2, #8
    56e8:	4694      	mov	ip, r2
    56ea:	44bc      	add	ip, r7
    56ec:	4463      	add	r3, ip
    56ee:	2201      	movs	r2, #1
    56f0:	701a      	strb	r2, [r3, #0]
			
			if (response_sms_processed_cmd == true)
    56f2:	4b13      	ldr	r3, [pc, #76]	; (5740 <processOnSMS+0xc40>)
    56f4:	2294      	movs	r2, #148	; 0x94
    56f6:	0052      	lsls	r2, r2, #1
    56f8:	4694      	mov	ip, r2
    56fa:	2208      	movs	r2, #8
    56fc:	4690      	mov	r8, r2
    56fe:	44b8      	add	r8, r7
    5700:	44c4      	add	ip, r8
    5702:	4463      	add	r3, ip
    5704:	781b      	ldrb	r3, [r3, #0]
    5706:	2b00      	cmp	r3, #0
    5708:	d101      	bne.n	570e <processOnSMS+0xc0e>
    570a:	f001 f8f5 	bl	68f8 <processOnSMS+0x1df8>
			{
				strcpy(resep_msg,"OVR SET OK");
    570e:	230c      	movs	r3, #12
    5710:	2208      	movs	r2, #8
    5712:	4694      	mov	ip, r2
    5714:	44bc      	add	ip, r7
    5716:	4463      	add	r3, ip
    5718:	4a19      	ldr	r2, [pc, #100]	; (5780 <processOnSMS+0xc80>)
    571a:	ca03      	ldmia	r2!, {r0, r1}
    571c:	c303      	stmia	r3!, {r0, r1}
    571e:	8811      	ldrh	r1, [r2, #0]
    5720:	8019      	strh	r1, [r3, #0]
    5722:	7892      	ldrb	r2, [r2, #2]
    5724:	709a      	strb	r2, [r3, #2]
    5726:	f001 f8e7 	bl	68f8 <processOnSMS+0x1df8>
    572a:	46c0      	nop			; (mov r8, r8)
    572c:	00018f30 	.word	0x00018f30
    5730:	00003db5 	.word	0x00003db5
    5734:	00017de7 	.word	0x00017de7
    5738:	00017b33 	.word	0x00017b33
    573c:	00001341 	.word	0x00001341
    5740:	fffffeda 	.word	0xfffffeda
    5744:	00018f34 	.word	0x00018f34
    5748:	00017da1 	.word	0x00017da1
    574c:	00018f3c 	.word	0x00018f3c
    5750:	00017b21 	.word	0x00017b21
    5754:	00018f40 	.word	0x00018f40
    5758:	00017a3d 	.word	0x00017a3d
    575c:	20000618 	.word	0x20000618
    5760:	000016bd 	.word	0x000016bd
    5764:	00018f48 	.word	0x00018f48
    5768:	00017d5d 	.word	0x00017d5d
    576c:	00018f54 	.word	0x00018f54
    5770:	0000138d 	.word	0x0000138d
    5774:	00018f5c 	.word	0x00018f5c
    5778:	00018f64 	.word	0x00018f64
    577c:	00001501 	.word	0x00001501
    5780:	00018f68 	.word	0x00018f68
			}
		}
	}
	else if (StringstartsWith(received_command,"UNDR"))
    5784:	4aee      	ldr	r2, [pc, #952]	; (5b40 <processOnSMS+0x1040>)
    5786:	68fb      	ldr	r3, [r7, #12]
    5788:	0011      	movs	r1, r2
    578a:	0018      	movs	r0, r3
    578c:	4bed      	ldr	r3, [pc, #948]	; (5b44 <processOnSMS+0x1044>)
    578e:	4798      	blx	r3
    5790:	1e03      	subs	r3, r0, #0
    5792:	d057      	beq.n	5844 <processOnSMS+0xd44>
	{
		memmove(received_command,received_command+4,strlen(received_command));
    5794:	68fb      	ldr	r3, [r7, #12]
    5796:	1d1c      	adds	r4, r3, #4
    5798:	68fb      	ldr	r3, [r7, #12]
    579a:	0018      	movs	r0, r3
    579c:	4bea      	ldr	r3, [pc, #936]	; (5b48 <processOnSMS+0x1048>)
    579e:	4798      	blx	r3
    57a0:	0002      	movs	r2, r0
    57a2:	68fb      	ldr	r3, [r7, #12]
    57a4:	0021      	movs	r1, r4
    57a6:	0018      	movs	r0, r3
    57a8:	4be8      	ldr	r3, [pc, #928]	; (5b4c <processOnSMS+0x104c>)
    57aa:	4798      	blx	r3
		uint8_t undr_per = atoi(received_command);
    57ac:	68fb      	ldr	r3, [r7, #12]
    57ae:	0018      	movs	r0, r3
    57b0:	4be7      	ldr	r3, [pc, #924]	; (5b50 <processOnSMS+0x1050>)
    57b2:	4798      	blx	r3
    57b4:	0002      	movs	r2, r0
    57b6:	2316      	movs	r3, #22
    57b8:	33ff      	adds	r3, #255	; 0xff
    57ba:	2108      	movs	r1, #8
    57bc:	468c      	mov	ip, r1
    57be:	44bc      	add	ip, r7
    57c0:	4463      	add	r3, ip
    57c2:	701a      	strb	r2, [r3, #0]
		if(undr_per<98 && undr_per>0)
    57c4:	2316      	movs	r3, #22
    57c6:	33ff      	adds	r3, #255	; 0xff
    57c8:	2208      	movs	r2, #8
    57ca:	4694      	mov	ip, r2
    57cc:	44bc      	add	ip, r7
    57ce:	4463      	add	r3, ip
    57d0:	781b      	ldrb	r3, [r3, #0]
    57d2:	2b61      	cmp	r3, #97	; 0x61
    57d4:	d901      	bls.n	57da <processOnSMS+0xcda>
    57d6:	f001 f88f 	bl	68f8 <processOnSMS+0x1df8>
    57da:	2316      	movs	r3, #22
    57dc:	33ff      	adds	r3, #255	; 0xff
    57de:	2208      	movs	r2, #8
    57e0:	4694      	mov	ip, r2
    57e2:	44bc      	add	ip, r7
    57e4:	4463      	add	r3, ip
    57e6:	781b      	ldrb	r3, [r3, #0]
    57e8:	2b00      	cmp	r3, #0
    57ea:	d101      	bne.n	57f0 <processOnSMS+0xcf0>
    57ec:	f001 f884 	bl	68f8 <processOnSMS+0x1df8>
		{

			setUnderloadPer(undr_per);
    57f0:	2316      	movs	r3, #22
    57f2:	33ff      	adds	r3, #255	; 0xff
    57f4:	2208      	movs	r2, #8
    57f6:	4694      	mov	ip, r2
    57f8:	44bc      	add	ip, r7
    57fa:	4463      	add	r3, ip
    57fc:	781b      	ldrb	r3, [r3, #0]
    57fe:	0018      	movs	r0, r3
    5800:	4bd4      	ldr	r3, [pc, #848]	; (5b54 <processOnSMS+0x1054>)
    5802:	4798      	blx	r3

			incomingSMSProcessed=true;
    5804:	2328      	movs	r3, #40	; 0x28
    5806:	33ff      	adds	r3, #255	; 0xff
    5808:	2208      	movs	r2, #8
    580a:	4694      	mov	ip, r2
    580c:	44bc      	add	ip, r7
    580e:	4463      	add	r3, ip
    5810:	2201      	movs	r2, #1
    5812:	701a      	strb	r2, [r3, #0]

			if (response_sms_processed_cmd == true)
    5814:	4bd0      	ldr	r3, [pc, #832]	; (5b58 <processOnSMS+0x1058>)
    5816:	2294      	movs	r2, #148	; 0x94
    5818:	0052      	lsls	r2, r2, #1
    581a:	4694      	mov	ip, r2
    581c:	2208      	movs	r2, #8
    581e:	4690      	mov	r8, r2
    5820:	44b8      	add	r8, r7
    5822:	44c4      	add	ip, r8
    5824:	4463      	add	r3, ip
    5826:	781b      	ldrb	r3, [r3, #0]
    5828:	2b00      	cmp	r3, #0
    582a:	d101      	bne.n	5830 <processOnSMS+0xd30>
    582c:	f001 f864 	bl	68f8 <processOnSMS+0x1df8>
			{
				strcpy(resep_msg,"UNDR SET OK");
    5830:	230c      	movs	r3, #12
    5832:	2208      	movs	r2, #8
    5834:	4694      	mov	ip, r2
    5836:	44bc      	add	ip, r7
    5838:	4463      	add	r3, ip
    583a:	4ac8      	ldr	r2, [pc, #800]	; (5b5c <processOnSMS+0x105c>)
    583c:	ca13      	ldmia	r2!, {r0, r1, r4}
    583e:	c313      	stmia	r3!, {r0, r1, r4}
    5840:	f001 f85a 	bl	68f8 <processOnSMS+0x1df8>
			}
		}
	}
	else if (StringstartsWith(received_command,"ASTAT"))
    5844:	4ac6      	ldr	r2, [pc, #792]	; (5b60 <processOnSMS+0x1060>)
    5846:	68fb      	ldr	r3, [r7, #12]
    5848:	0011      	movs	r1, r2
    584a:	0018      	movs	r0, r3
    584c:	4bbd      	ldr	r3, [pc, #756]	; (5b44 <processOnSMS+0x1044>)
    584e:	4798      	blx	r3
    5850:	1e03      	subs	r3, r0, #0
    5852:	d040      	beq.n	58d6 <processOnSMS+0xdd6>
	{
		if(factory_settings_parameter_struct.ENABLE_CURRENT)
    5854:	4bc3      	ldr	r3, [pc, #780]	; (5b64 <processOnSMS+0x1064>)
    5856:	785b      	ldrb	r3, [r3, #1]
    5858:	2b00      	cmp	r3, #0
    585a:	d101      	bne.n	5860 <processOnSMS+0xd60>
    585c:	f001 f84c 	bl	68f8 <processOnSMS+0x1df8>
		{
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
			Analog_Parameter_Struct.Motor_Current_IntPart,
    5860:	4bc1      	ldr	r3, [pc, #772]	; (5b68 <processOnSMS+0x1068>)
    5862:	8a9b      	ldrh	r3, [r3, #20]
    5864:	b29b      	uxth	r3, r3
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
    5866:	607b      	str	r3, [r7, #4]
			Analog_Parameter_Struct.Motor_Current_DecPart,
    5868:	4bbf      	ldr	r3, [pc, #764]	; (5b68 <processOnSMS+0x1068>)
    586a:	8adb      	ldrh	r3, [r3, #22]
    586c:	b29b      	uxth	r3, r3
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
    586e:	603b      	str	r3, [r7, #0]
    5870:	4bbe      	ldr	r3, [pc, #760]	; (5b6c <processOnSMS+0x106c>)
    5872:	691a      	ldr	r2, [r3, #16]
    5874:	4bbd      	ldr	r3, [pc, #756]	; (5b6c <processOnSMS+0x106c>)
    5876:	6959      	ldr	r1, [r3, #20]
    5878:	4bbc      	ldr	r3, [pc, #752]	; (5b6c <processOnSMS+0x106c>)
    587a:	699b      	ldr	r3, [r3, #24]
    587c:	4698      	mov	r8, r3
			user_settings_parameter_struct.normalLoadAddress,
			user_settings_parameter_struct.overloadAddress,
			user_settings_parameter_struct.underloadAddress,
			user_settings_parameter_struct.overloadPerAddress,
    587e:	48bb      	ldr	r0, [pc, #748]	; (5b6c <processOnSMS+0x106c>)
    5880:	7f40      	ldrb	r0, [r0, #29]
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
    5882:	0005      	movs	r5, r0
			user_settings_parameter_struct.underloadPerAddress);
    5884:	48b9      	ldr	r0, [pc, #740]	; (5b6c <processOnSMS+0x106c>)
    5886:	7f00      	ldrb	r0, [r0, #28]
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
    5888:	0006      	movs	r6, r0
    588a:	4cb9      	ldr	r4, [pc, #740]	; (5b70 <processOnSMS+0x1070>)
    588c:	200c      	movs	r0, #12
    588e:	2308      	movs	r3, #8
    5890:	469c      	mov	ip, r3
    5892:	44bc      	add	ip, r7
    5894:	4460      	add	r0, ip
    5896:	9604      	str	r6, [sp, #16]
    5898:	9503      	str	r5, [sp, #12]
    589a:	4643      	mov	r3, r8
    589c:	9302      	str	r3, [sp, #8]
    589e:	9101      	str	r1, [sp, #4]
    58a0:	9200      	str	r2, [sp, #0]
    58a2:	683b      	ldr	r3, [r7, #0]
    58a4:	687a      	ldr	r2, [r7, #4]
    58a6:	0021      	movs	r1, r4
    58a8:	4cb2      	ldr	r4, [pc, #712]	; (5b74 <processOnSMS+0x1074>)
    58aa:	47a0      	blx	r4
			response_sms_processed_cmd = true;
    58ac:	4baa      	ldr	r3, [pc, #680]	; (5b58 <processOnSMS+0x1058>)
    58ae:	2294      	movs	r2, #148	; 0x94
    58b0:	0052      	lsls	r2, r2, #1
    58b2:	4694      	mov	ip, r2
    58b4:	2208      	movs	r2, #8
    58b6:	4690      	mov	r8, r2
    58b8:	44b8      	add	r8, r7
    58ba:	44c4      	add	ip, r8
    58bc:	4463      	add	r3, ip
    58be:	2201      	movs	r2, #1
    58c0:	701a      	strb	r2, [r3, #0]
			incomingSMSProcessed=true;
    58c2:	2328      	movs	r3, #40	; 0x28
    58c4:	33ff      	adds	r3, #255	; 0xff
    58c6:	2208      	movs	r2, #8
    58c8:	4694      	mov	ip, r2
    58ca:	44bc      	add	ip, r7
    58cc:	4463      	add	r3, ip
    58ce:	2201      	movs	r2, #1
    58d0:	701a      	strb	r2, [r3, #0]
    58d2:	f001 f811 	bl	68f8 <processOnSMS+0x1df8>

		}

	}
	else if (StringstartsWith(received_command,"OVFON"))
    58d6:	4aa8      	ldr	r2, [pc, #672]	; (5b78 <processOnSMS+0x1078>)
    58d8:	68fb      	ldr	r3, [r7, #12]
    58da:	0011      	movs	r1, r2
    58dc:	0018      	movs	r0, r3
    58de:	4b99      	ldr	r3, [pc, #612]	; (5b44 <processOnSMS+0x1044>)
    58e0:	4798      	blx	r3
    58e2:	1e03      	subs	r3, r0, #0
    58e4:	d032      	beq.n	594c <processOnSMS+0xe4c>
	{
		if (factory_settings_parameter_struct.ENABLE_WATER && !(factory_settings_parameter_struct.ENABLE_M2M))
    58e6:	4b9f      	ldr	r3, [pc, #636]	; (5b64 <processOnSMS+0x1064>)
    58e8:	795b      	ldrb	r3, [r3, #5]
    58ea:	2b00      	cmp	r3, #0
    58ec:	d101      	bne.n	58f2 <processOnSMS+0xdf2>
    58ee:	f001 f803 	bl	68f8 <processOnSMS+0x1df8>
    58f2:	4b9c      	ldr	r3, [pc, #624]	; (5b64 <processOnSMS+0x1064>)
    58f4:	78db      	ldrb	r3, [r3, #3]
    58f6:	2b00      	cmp	r3, #0
    58f8:	d001      	beq.n	58fe <processOnSMS+0xdfe>
    58fa:	f000 fffd 	bl	68f8 <processOnSMS+0x1df8>
		{
			savePreventOverFlowSettings(true);  //set DND to False in EEPROM
    58fe:	2001      	movs	r0, #1
    5900:	4b9e      	ldr	r3, [pc, #632]	; (5b7c <processOnSMS+0x107c>)
    5902:	4798      	blx	r3
			
			incomingSMSProcessed=true;
    5904:	2328      	movs	r3, #40	; 0x28
    5906:	33ff      	adds	r3, #255	; 0xff
    5908:	2208      	movs	r2, #8
    590a:	4694      	mov	ip, r2
    590c:	44bc      	add	ip, r7
    590e:	4463      	add	r3, ip
    5910:	2201      	movs	r2, #1
    5912:	701a      	strb	r2, [r3, #0]
			
			if(response_sms_processed_cmd == true)
    5914:	4b90      	ldr	r3, [pc, #576]	; (5b58 <processOnSMS+0x1058>)
    5916:	2294      	movs	r2, #148	; 0x94
    5918:	0052      	lsls	r2, r2, #1
    591a:	4694      	mov	ip, r2
    591c:	2208      	movs	r2, #8
    591e:	4690      	mov	r8, r2
    5920:	44b8      	add	r8, r7
    5922:	44c4      	add	ip, r8
    5924:	4463      	add	r3, ip
    5926:	781b      	ldrb	r3, [r3, #0]
    5928:	2b00      	cmp	r3, #0
    592a:	d101      	bne.n	5930 <processOnSMS+0xe30>
    592c:	f000 ffe4 	bl	68f8 <processOnSMS+0x1df8>
			{
				strcpy(resep_msg,"PREVENT OVERFLOW SETTING ON");
    5930:	230c      	movs	r3, #12
    5932:	2208      	movs	r2, #8
    5934:	4694      	mov	ip, r2
    5936:	44bc      	add	ip, r7
    5938:	4463      	add	r3, ip
    593a:	4a91      	ldr	r2, [pc, #580]	; (5b80 <processOnSMS+0x1080>)
    593c:	ca13      	ldmia	r2!, {r0, r1, r4}
    593e:	c313      	stmia	r3!, {r0, r1, r4}
    5940:	ca13      	ldmia	r2!, {r0, r1, r4}
    5942:	c313      	stmia	r3!, {r0, r1, r4}
    5944:	6812      	ldr	r2, [r2, #0]
    5946:	601a      	str	r2, [r3, #0]
    5948:	f000 ffd6 	bl	68f8 <processOnSMS+0x1df8>
			}
		}
	}
	else if (StringstartsWith(received_command,"OVFOFF"))
    594c:	4a8d      	ldr	r2, [pc, #564]	; (5b84 <processOnSMS+0x1084>)
    594e:	68fb      	ldr	r3, [r7, #12]
    5950:	0011      	movs	r1, r2
    5952:	0018      	movs	r0, r3
    5954:	4b7b      	ldr	r3, [pc, #492]	; (5b44 <processOnSMS+0x1044>)
    5956:	4798      	blx	r3
    5958:	1e03      	subs	r3, r0, #0
    595a:	d034      	beq.n	59c6 <processOnSMS+0xec6>
	{
		if (factory_settings_parameter_struct.ENABLE_WATER && !(factory_settings_parameter_struct.ENABLE_M2M))
    595c:	4b81      	ldr	r3, [pc, #516]	; (5b64 <processOnSMS+0x1064>)
    595e:	795b      	ldrb	r3, [r3, #5]
    5960:	2b00      	cmp	r3, #0
    5962:	d101      	bne.n	5968 <processOnSMS+0xe68>
    5964:	f000 ffc8 	bl	68f8 <processOnSMS+0x1df8>
    5968:	4b7e      	ldr	r3, [pc, #504]	; (5b64 <processOnSMS+0x1064>)
    596a:	78db      	ldrb	r3, [r3, #3]
    596c:	2b00      	cmp	r3, #0
    596e:	d001      	beq.n	5974 <processOnSMS+0xe74>
    5970:	f000 ffc2 	bl	68f8 <processOnSMS+0x1df8>
		{
			savePreventOverFlowSettings(false);  //set DND to False in EEPROM
    5974:	2000      	movs	r0, #0
    5976:	4b81      	ldr	r3, [pc, #516]	; (5b7c <processOnSMS+0x107c>)
    5978:	4798      	blx	r3

			incomingSMSProcessed=true;
    597a:	2328      	movs	r3, #40	; 0x28
    597c:	33ff      	adds	r3, #255	; 0xff
    597e:	2208      	movs	r2, #8
    5980:	4694      	mov	ip, r2
    5982:	44bc      	add	ip, r7
    5984:	4463      	add	r3, ip
    5986:	2201      	movs	r2, #1
    5988:	701a      	strb	r2, [r3, #0]

			if(response_sms_processed_cmd == true)
    598a:	4b73      	ldr	r3, [pc, #460]	; (5b58 <processOnSMS+0x1058>)
    598c:	2294      	movs	r2, #148	; 0x94
    598e:	0052      	lsls	r2, r2, #1
    5990:	4694      	mov	ip, r2
    5992:	2208      	movs	r2, #8
    5994:	4690      	mov	r8, r2
    5996:	44b8      	add	r8, r7
    5998:	44c4      	add	ip, r8
    599a:	4463      	add	r3, ip
    599c:	781b      	ldrb	r3, [r3, #0]
    599e:	2b00      	cmp	r3, #0
    59a0:	d101      	bne.n	59a6 <processOnSMS+0xea6>
    59a2:	f000 ffa9 	bl	68f8 <processOnSMS+0x1df8>
			{
				strcpy(resep_msg,"PREVENT OVERFLOW SETTING OFF");
    59a6:	230c      	movs	r3, #12
    59a8:	2208      	movs	r2, #8
    59aa:	4694      	mov	ip, r2
    59ac:	44bc      	add	ip, r7
    59ae:	4463      	add	r3, ip
    59b0:	4a75      	ldr	r2, [pc, #468]	; (5b88 <processOnSMS+0x1088>)
    59b2:	ca13      	ldmia	r2!, {r0, r1, r4}
    59b4:	c313      	stmia	r3!, {r0, r1, r4}
    59b6:	ca13      	ldmia	r2!, {r0, r1, r4}
    59b8:	c313      	stmia	r3!, {r0, r1, r4}
    59ba:	6811      	ldr	r1, [r2, #0]
    59bc:	6019      	str	r1, [r3, #0]
    59be:	7912      	ldrb	r2, [r2, #4]
    59c0:	711a      	strb	r2, [r3, #4]
    59c2:	f000 ff99 	bl	68f8 <processOnSMS+0x1df8>
			}
		}
	}
	else if (StringstartsWith(received_command,"M2MON"))
    59c6:	4a71      	ldr	r2, [pc, #452]	; (5b8c <processOnSMS+0x108c>)
    59c8:	68fb      	ldr	r3, [r7, #12]
    59ca:	0011      	movs	r1, r2
    59cc:	0018      	movs	r0, r3
    59ce:	4b5d      	ldr	r3, [pc, #372]	; (5b44 <processOnSMS+0x1044>)
    59d0:	4798      	blx	r3
    59d2:	1e03      	subs	r3, r0, #0
    59d4:	d05c      	beq.n	5a90 <processOnSMS+0xf90>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
    59d6:	4b63      	ldr	r3, [pc, #396]	; (5b64 <processOnSMS+0x1064>)
    59d8:	78db      	ldrb	r3, [r3, #3]
    59da:	2b00      	cmp	r3, #0
    59dc:	d101      	bne.n	59e2 <processOnSMS+0xee2>
    59de:	f000 ff8b 	bl	68f8 <processOnSMS+0x1df8>
		{
			incomingSMSProcessed=true;
    59e2:	2328      	movs	r3, #40	; 0x28
    59e4:	33ff      	adds	r3, #255	; 0xff
    59e6:	2208      	movs	r2, #8
    59e8:	4694      	mov	ip, r2
    59ea:	44bc      	add	ip, r7
    59ec:	4463      	add	r3, ip
    59ee:	2201      	movs	r2, #1
    59f0:	701a      	strb	r2, [r3, #0]
			
			if(m2m_Numbers_struct.m2mRemotePresent)
    59f2:	4b67      	ldr	r3, [pc, #412]	; (5b90 <processOnSMS+0x1090>)
    59f4:	78db      	ldrb	r3, [r3, #3]
    59f6:	2b00      	cmp	r3, #0
    59f8:	d02f      	beq.n	5a5a <processOnSMS+0xf5a>
			{
				if(!m2m_Numbers_struct.m2mRemoteVerified)
    59fa:	4b65      	ldr	r3, [pc, #404]	; (5b90 <processOnSMS+0x1090>)
    59fc:	791b      	ldrb	r3, [r3, #4]
    59fe:	2b00      	cmp	r3, #0
    5a00:	d10e      	bne.n	5a20 <processOnSMS+0xf20>
				{
					response_sms_processed_cmd = false;
    5a02:	4b55      	ldr	r3, [pc, #340]	; (5b58 <processOnSMS+0x1058>)
    5a04:	2294      	movs	r2, #148	; 0x94
    5a06:	0052      	lsls	r2, r2, #1
    5a08:	4694      	mov	ip, r2
    5a0a:	2208      	movs	r2, #8
    5a0c:	4690      	mov	r8, r2
    5a0e:	44b8      	add	r8, r7
    5a10:	44c4      	add	ip, r8
    5a12:	4463      	add	r3, ip
    5a14:	2200      	movs	r2, #0
    5a16:	701a      	strb	r2, [r3, #0]
					verifyRemoteNumber();
    5a18:	4b5e      	ldr	r3, [pc, #376]	; (5b94 <processOnSMS+0x1094>)
    5a1a:	4798      	blx	r3
    5a1c:	f000 ff6c 	bl	68f8 <processOnSMS+0x1df8>
				}
				else
				{
					response_sms_processed_cmd = true;
    5a20:	4b4d      	ldr	r3, [pc, #308]	; (5b58 <processOnSMS+0x1058>)
    5a22:	2294      	movs	r2, #148	; 0x94
    5a24:	0052      	lsls	r2, r2, #1
    5a26:	4694      	mov	ip, r2
    5a28:	2208      	movs	r2, #8
    5a2a:	4690      	mov	r8, r2
    5a2c:	44b8      	add	r8, r7
    5a2e:	44c4      	add	ip, r8
    5a30:	4463      	add	r3, ip
    5a32:	2201      	movs	r2, #1
    5a34:	701a      	strb	r2, [r3, #0]
					strcpy(resep_msg,"M2M Turned On, Remote Number Already Verified");
    5a36:	230c      	movs	r3, #12
    5a38:	2208      	movs	r2, #8
    5a3a:	4694      	mov	ip, r2
    5a3c:	44bc      	add	ip, r7
    5a3e:	4463      	add	r3, ip
    5a40:	4a55      	ldr	r2, [pc, #340]	; (5b98 <processOnSMS+0x1098>)
    5a42:	ca13      	ldmia	r2!, {r0, r1, r4}
    5a44:	c313      	stmia	r3!, {r0, r1, r4}
    5a46:	ca13      	ldmia	r2!, {r0, r1, r4}
    5a48:	c313      	stmia	r3!, {r0, r1, r4}
    5a4a:	ca13      	ldmia	r2!, {r0, r1, r4}
    5a4c:	c313      	stmia	r3!, {r0, r1, r4}
    5a4e:	ca03      	ldmia	r2!, {r0, r1}
    5a50:	c303      	stmia	r3!, {r0, r1}
    5a52:	8812      	ldrh	r2, [r2, #0]
    5a54:	801a      	strh	r2, [r3, #0]
    5a56:	f000 ff4f 	bl	68f8 <processOnSMS+0x1df8>
				}
			}
			else
			{
				response_sms_processed_cmd=true;
    5a5a:	4b3f      	ldr	r3, [pc, #252]	; (5b58 <processOnSMS+0x1058>)
    5a5c:	2294      	movs	r2, #148	; 0x94
    5a5e:	0052      	lsls	r2, r2, #1
    5a60:	4694      	mov	ip, r2
    5a62:	2208      	movs	r2, #8
    5a64:	4690      	mov	r8, r2
    5a66:	44b8      	add	r8, r7
    5a68:	44c4      	add	ip, r8
    5a6a:	4463      	add	r3, ip
    5a6c:	2201      	movs	r2, #1
    5a6e:	701a      	strb	r2, [r3, #0]
				strcpy(resep_msg,"Error: M2M Remote Number Not Present");
    5a70:	230c      	movs	r3, #12
    5a72:	2208      	movs	r2, #8
    5a74:	4694      	mov	ip, r2
    5a76:	44bc      	add	ip, r7
    5a78:	4463      	add	r3, ip
    5a7a:	4a48      	ldr	r2, [pc, #288]	; (5b9c <processOnSMS+0x109c>)
    5a7c:	ca13      	ldmia	r2!, {r0, r1, r4}
    5a7e:	c313      	stmia	r3!, {r0, r1, r4}
    5a80:	ca13      	ldmia	r2!, {r0, r1, r4}
    5a82:	c313      	stmia	r3!, {r0, r1, r4}
    5a84:	ca13      	ldmia	r2!, {r0, r1, r4}
    5a86:	c313      	stmia	r3!, {r0, r1, r4}
    5a88:	7812      	ldrb	r2, [r2, #0]
    5a8a:	701a      	strb	r2, [r3, #0]
    5a8c:	f000 ff34 	bl	68f8 <processOnSMS+0x1df8>
			}
		}
	}
	else if (StringstartsWith(received_command,"M2MOFF"))
    5a90:	4a43      	ldr	r2, [pc, #268]	; (5ba0 <processOnSMS+0x10a0>)
    5a92:	68fb      	ldr	r3, [r7, #12]
    5a94:	0011      	movs	r1, r2
    5a96:	0018      	movs	r0, r3
    5a98:	4b2a      	ldr	r3, [pc, #168]	; (5b44 <processOnSMS+0x1044>)
    5a9a:	4798      	blx	r3
    5a9c:	1e03      	subs	r3, r0, #0
    5a9e:	d02a      	beq.n	5af6 <processOnSMS+0xff6>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
    5aa0:	4b30      	ldr	r3, [pc, #192]	; (5b64 <processOnSMS+0x1064>)
    5aa2:	78db      	ldrb	r3, [r3, #3]
    5aa4:	2b00      	cmp	r3, #0
    5aa6:	d101      	bne.n	5aac <processOnSMS+0xfac>
    5aa8:	f000 ff26 	bl	68f8 <processOnSMS+0x1df8>
		{
			incomingSMSProcessed=true;
    5aac:	2328      	movs	r3, #40	; 0x28
    5aae:	33ff      	adds	r3, #255	; 0xff
    5ab0:	2208      	movs	r2, #8
    5ab2:	4694      	mov	ip, r2
    5ab4:	44bc      	add	ip, r7
    5ab6:	4463      	add	r3, ip
    5ab8:	2201      	movs	r2, #1
    5aba:	701a      	strb	r2, [r3, #0]
			
			saveM2MSettings(false);
    5abc:	2000      	movs	r0, #0
    5abe:	4b39      	ldr	r3, [pc, #228]	; (5ba4 <processOnSMS+0x10a4>)
    5ac0:	4798      	blx	r3
			if(response_sms_processed_cmd == true)
    5ac2:	4b25      	ldr	r3, [pc, #148]	; (5b58 <processOnSMS+0x1058>)
    5ac4:	2294      	movs	r2, #148	; 0x94
    5ac6:	0052      	lsls	r2, r2, #1
    5ac8:	4694      	mov	ip, r2
    5aca:	2208      	movs	r2, #8
    5acc:	4690      	mov	r8, r2
    5ace:	44b8      	add	r8, r7
    5ad0:	44c4      	add	ip, r8
    5ad2:	4463      	add	r3, ip
    5ad4:	781b      	ldrb	r3, [r3, #0]
    5ad6:	2b00      	cmp	r3, #0
    5ad8:	d101      	bne.n	5ade <processOnSMS+0xfde>
    5ada:	f000 ff0d 	bl	68f8 <processOnSMS+0x1df8>
			{
				strcpy(resep_msg,"M2M SETTING OFF");
    5ade:	230c      	movs	r3, #12
    5ae0:	2208      	movs	r2, #8
    5ae2:	4694      	mov	ip, r2
    5ae4:	44bc      	add	ip, r7
    5ae6:	4463      	add	r3, ip
    5ae8:	4a2f      	ldr	r2, [pc, #188]	; (5ba8 <processOnSMS+0x10a8>)
    5aea:	ca13      	ldmia	r2!, {r0, r1, r4}
    5aec:	c313      	stmia	r3!, {r0, r1, r4}
    5aee:	6812      	ldr	r2, [r2, #0]
    5af0:	601a      	str	r2, [r3, #0]
    5af2:	f000 ff01 	bl	68f8 <processOnSMS+0x1df8>
			}
		}
	}
	else if (StringstartsWith(received_command,"STATUS"))
    5af6:	4a2d      	ldr	r2, [pc, #180]	; (5bac <processOnSMS+0x10ac>)
    5af8:	68fb      	ldr	r3, [r7, #12]
    5afa:	0011      	movs	r1, r2
    5afc:	0018      	movs	r0, r3
    5afe:	4b11      	ldr	r3, [pc, #68]	; (5b44 <processOnSMS+0x1044>)
    5b00:	4798      	blx	r3
    5b02:	1e03      	subs	r3, r0, #0
    5b04:	d056      	beq.n	5bb4 <processOnSMS+0x10b4>
	{
		incomingSMSProcessed=true;
    5b06:	2328      	movs	r3, #40	; 0x28
    5b08:	33ff      	adds	r3, #255	; 0xff
    5b0a:	2208      	movs	r2, #8
    5b0c:	4694      	mov	ip, r2
    5b0e:	44bc      	add	ip, r7
    5b10:	4463      	add	r3, ip
    5b12:	2201      	movs	r2, #1
    5b14:	701a      	strb	r2, [r3, #0]
		response_sms_processed_cmd=true;
    5b16:	4b10      	ldr	r3, [pc, #64]	; (5b58 <processOnSMS+0x1058>)
    5b18:	2294      	movs	r2, #148	; 0x94
    5b1a:	0052      	lsls	r2, r2, #1
    5b1c:	4694      	mov	ip, r2
    5b1e:	2208      	movs	r2, #8
    5b20:	4690      	mov	r8, r2
    5b22:	44b8      	add	r8, r7
    5b24:	44c4      	add	ip, r8
    5b26:	4463      	add	r3, ip
    5b28:	2201      	movs	r2, #1
    5b2a:	701a      	strb	r2, [r3, #0]
		
		buildStatusMessage(&resep_msg);
    5b2c:	230c      	movs	r3, #12
    5b2e:	2208      	movs	r2, #8
    5b30:	4694      	mov	ip, r2
    5b32:	44bc      	add	ip, r7
    5b34:	4463      	add	r3, ip
    5b36:	0018      	movs	r0, r3
    5b38:	4b1d      	ldr	r3, [pc, #116]	; (5bb0 <processOnSMS+0x10b0>)
    5b3a:	4798      	blx	r3
    5b3c:	f000 fedc 	bl	68f8 <processOnSMS+0x1df8>
    5b40:	00018f74 	.word	0x00018f74
    5b44:	00003db5 	.word	0x00003db5
    5b48:	00017de7 	.word	0x00017de7
    5b4c:	00017b33 	.word	0x00017b33
    5b50:	00017a3d 	.word	0x00017a3d
    5b54:	00001569 	.word	0x00001569
    5b58:	fffffeda 	.word	0xfffffeda
    5b5c:	00018f7c 	.word	0x00018f7c
    5b60:	00018f88 	.word	0x00018f88
    5b64:	20000618 	.word	0x20000618
    5b68:	200006cc 	.word	0x200006cc
    5b6c:	2000064c 	.word	0x2000064c
    5b70:	00018f90 	.word	0x00018f90
    5b74:	00017d5d 	.word	0x00017d5d
    5b78:	00018fb4 	.word	0x00018fb4
    5b7c:	000014b5 	.word	0x000014b5
    5b80:	00018fbc 	.word	0x00018fbc
    5b84:	00018fd8 	.word	0x00018fd8
    5b88:	00018fe0 	.word	0x00018fe0
    5b8c:	00019000 	.word	0x00019000
    5b90:	20000544 	.word	0x20000544
    5b94:	00006bcd 	.word	0x00006bcd
    5b98:	00019008 	.word	0x00019008
    5b9c:	00019038 	.word	0x00019038
    5ba0:	00019060 	.word	0x00019060
    5ba4:	00000be5 	.word	0x00000be5
    5ba8:	00019068 	.word	0x00019068
    5bac:	00019078 	.word	0x00019078
    5bb0:	000069c1 	.word	0x000069c1
	}
	else if (StringstartsWith(received_command,"AMON") && (admin || alterNumber))
    5bb4:	4a87      	ldr	r2, [pc, #540]	; (5dd4 <processOnSMS+0x12d4>)
    5bb6:	68fb      	ldr	r3, [r7, #12]
    5bb8:	0011      	movs	r1, r2
    5bba:	0018      	movs	r0, r3
    5bbc:	4b86      	ldr	r3, [pc, #536]	; (5dd8 <processOnSMS+0x12d8>)
    5bbe:	4798      	blx	r3
    5bc0:	1e03      	subs	r3, r0, #0
    5bc2:	d05e      	beq.n	5c82 <processOnSMS+0x1182>
    5bc4:	4b85      	ldr	r3, [pc, #532]	; (5ddc <processOnSMS+0x12dc>)
    5bc6:	2294      	movs	r2, #148	; 0x94
    5bc8:	0052      	lsls	r2, r2, #1
    5bca:	4694      	mov	ip, r2
    5bcc:	2208      	movs	r2, #8
    5bce:	4690      	mov	r8, r2
    5bd0:	44b8      	add	r8, r7
    5bd2:	44c4      	add	ip, r8
    5bd4:	4463      	add	r3, ip
    5bd6:	781b      	ldrb	r3, [r3, #0]
    5bd8:	2b00      	cmp	r3, #0
    5bda:	d10b      	bne.n	5bf4 <processOnSMS+0x10f4>
    5bdc:	4b80      	ldr	r3, [pc, #512]	; (5de0 <processOnSMS+0x12e0>)
    5bde:	2294      	movs	r2, #148	; 0x94
    5be0:	0052      	lsls	r2, r2, #1
    5be2:	4694      	mov	ip, r2
    5be4:	2208      	movs	r2, #8
    5be6:	4690      	mov	r8, r2
    5be8:	44b8      	add	r8, r7
    5bea:	44c4      	add	ip, r8
    5bec:	4463      	add	r3, ip
    5bee:	781b      	ldrb	r3, [r3, #0]
    5bf0:	2b00      	cmp	r3, #0
    5bf2:	d046      	beq.n	5c82 <processOnSMS+0x1182>
	{
		incomingSMSProcessed=true;
    5bf4:	2328      	movs	r3, #40	; 0x28
    5bf6:	33ff      	adds	r3, #255	; 0xff
    5bf8:	2208      	movs	r2, #8
    5bfa:	4694      	mov	ip, r2
    5bfc:	44bc      	add	ip, r7
    5bfe:	4463      	add	r3, ip
    5c00:	2201      	movs	r2, #1
    5c02:	701a      	strb	r2, [r3, #0]
		
		if (alternateNumber_struct.alterNumberPresent)
    5c04:	4b77      	ldr	r3, [pc, #476]	; (5de4 <processOnSMS+0x12e4>)
    5c06:	789b      	ldrb	r3, [r3, #2]
    5c08:	2b00      	cmp	r3, #0
    5c0a:	d01c      	beq.n	5c46 <processOnSMS+0x1146>
		{
			saveAlterNumberSetting(true);
    5c0c:	2001      	movs	r0, #1
    5c0e:	4b76      	ldr	r3, [pc, #472]	; (5de8 <processOnSMS+0x12e8>)
    5c10:	4798      	blx	r3
			if(response_sms_processed_cmd == true)
    5c12:	4b76      	ldr	r3, [pc, #472]	; (5dec <processOnSMS+0x12ec>)
    5c14:	2294      	movs	r2, #148	; 0x94
    5c16:	0052      	lsls	r2, r2, #1
    5c18:	4694      	mov	ip, r2
    5c1a:	2208      	movs	r2, #8
    5c1c:	4690      	mov	r8, r2
    5c1e:	44b8      	add	r8, r7
    5c20:	44c4      	add	ip, r8
    5c22:	4463      	add	r3, ip
    5c24:	781b      	ldrb	r3, [r3, #0]
    5c26:	2b00      	cmp	r3, #0
    5c28:	d101      	bne.n	5c2e <processOnSMS+0x112e>
    5c2a:	f000 fe64 	bl	68f6 <processOnSMS+0x1df6>
			{
				strcpy(resep_msg,"ALTERNATE NUMBER ON");
    5c2e:	230c      	movs	r3, #12
    5c30:	2208      	movs	r2, #8
    5c32:	4694      	mov	ip, r2
    5c34:	44bc      	add	ip, r7
    5c36:	4463      	add	r3, ip
    5c38:	4a6d      	ldr	r2, [pc, #436]	; (5df0 <processOnSMS+0x12f0>)
    5c3a:	ca13      	ldmia	r2!, {r0, r1, r4}
    5c3c:	c313      	stmia	r3!, {r0, r1, r4}
    5c3e:	ca03      	ldmia	r2!, {r0, r1}
    5c40:	c303      	stmia	r3!, {r0, r1}
		if (alternateNumber_struct.alterNumberPresent)
    5c42:	f000 fe58 	bl	68f6 <processOnSMS+0x1df6>
			}
		}
		else
		{
			if(response_sms_processed_cmd == true)
    5c46:	4b69      	ldr	r3, [pc, #420]	; (5dec <processOnSMS+0x12ec>)
    5c48:	2294      	movs	r2, #148	; 0x94
    5c4a:	0052      	lsls	r2, r2, #1
    5c4c:	4694      	mov	ip, r2
    5c4e:	2208      	movs	r2, #8
    5c50:	4690      	mov	r8, r2
    5c52:	44b8      	add	r8, r7
    5c54:	44c4      	add	ip, r8
    5c56:	4463      	add	r3, ip
    5c58:	781b      	ldrb	r3, [r3, #0]
    5c5a:	2b00      	cmp	r3, #0
    5c5c:	d101      	bne.n	5c62 <processOnSMS+0x1162>
    5c5e:	f000 fe4a 	bl	68f6 <processOnSMS+0x1df6>
			{
				strcpy(resep_msg,"ALTERNATE NUMBER NOT PRESENT");
    5c62:	230c      	movs	r3, #12
    5c64:	2208      	movs	r2, #8
    5c66:	4694      	mov	ip, r2
    5c68:	44bc      	add	ip, r7
    5c6a:	4463      	add	r3, ip
    5c6c:	4a61      	ldr	r2, [pc, #388]	; (5df4 <processOnSMS+0x12f4>)
    5c6e:	ca13      	ldmia	r2!, {r0, r1, r4}
    5c70:	c313      	stmia	r3!, {r0, r1, r4}
    5c72:	ca13      	ldmia	r2!, {r0, r1, r4}
    5c74:	c313      	stmia	r3!, {r0, r1, r4}
    5c76:	6811      	ldr	r1, [r2, #0]
    5c78:	6019      	str	r1, [r3, #0]
    5c7a:	7912      	ldrb	r2, [r2, #4]
    5c7c:	711a      	strb	r2, [r3, #4]
		if (alternateNumber_struct.alterNumberPresent)
    5c7e:	f000 fe3a 	bl	68f6 <processOnSMS+0x1df6>
			}
		}
	}
	else if (StringstartsWith(received_command,"AMOFF"))
    5c82:	4a5d      	ldr	r2, [pc, #372]	; (5df8 <processOnSMS+0x12f8>)
    5c84:	68fb      	ldr	r3, [r7, #12]
    5c86:	0011      	movs	r1, r2
    5c88:	0018      	movs	r0, r3
    5c8a:	4b53      	ldr	r3, [pc, #332]	; (5dd8 <processOnSMS+0x12d8>)
    5c8c:	4798      	blx	r3
    5c8e:	1e03      	subs	r3, r0, #0
    5c90:	d026      	beq.n	5ce0 <processOnSMS+0x11e0>
	{
		saveAlterNumberSetting(false);
    5c92:	2000      	movs	r0, #0
    5c94:	4b54      	ldr	r3, [pc, #336]	; (5de8 <processOnSMS+0x12e8>)
    5c96:	4798      	blx	r3
		incomingSMSProcessed=true;
    5c98:	2328      	movs	r3, #40	; 0x28
    5c9a:	33ff      	adds	r3, #255	; 0xff
    5c9c:	2208      	movs	r2, #8
    5c9e:	4694      	mov	ip, r2
    5ca0:	44bc      	add	ip, r7
    5ca2:	4463      	add	r3, ip
    5ca4:	2201      	movs	r2, #1
    5ca6:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
    5ca8:	4b50      	ldr	r3, [pc, #320]	; (5dec <processOnSMS+0x12ec>)
    5caa:	2294      	movs	r2, #148	; 0x94
    5cac:	0052      	lsls	r2, r2, #1
    5cae:	4694      	mov	ip, r2
    5cb0:	2208      	movs	r2, #8
    5cb2:	4690      	mov	r8, r2
    5cb4:	44b8      	add	r8, r7
    5cb6:	44c4      	add	ip, r8
    5cb8:	4463      	add	r3, ip
    5cba:	781b      	ldrb	r3, [r3, #0]
    5cbc:	2b00      	cmp	r3, #0
    5cbe:	d101      	bne.n	5cc4 <processOnSMS+0x11c4>
    5cc0:	f000 fe1a 	bl	68f8 <processOnSMS+0x1df8>
		{
			strcpy(resep_msg,"ALTERNATE MOBILE NUMBER OFF");
    5cc4:	230c      	movs	r3, #12
    5cc6:	2208      	movs	r2, #8
    5cc8:	4694      	mov	ip, r2
    5cca:	44bc      	add	ip, r7
    5ccc:	4463      	add	r3, ip
    5cce:	4a4b      	ldr	r2, [pc, #300]	; (5dfc <processOnSMS+0x12fc>)
    5cd0:	ca13      	ldmia	r2!, {r0, r1, r4}
    5cd2:	c313      	stmia	r3!, {r0, r1, r4}
    5cd4:	ca13      	ldmia	r2!, {r0, r1, r4}
    5cd6:	c313      	stmia	r3!, {r0, r1, r4}
    5cd8:	6812      	ldr	r2, [r2, #0]
    5cda:	601a      	str	r2, [r3, #0]
    5cdc:	f000 fe0c 	bl	68f8 <processOnSMS+0x1df8>
		}
	}
	else if (StringstartsWith(received_command,"NCOFF"))
    5ce0:	4a47      	ldr	r2, [pc, #284]	; (5e00 <processOnSMS+0x1300>)
    5ce2:	68fb      	ldr	r3, [r7, #12]
    5ce4:	0011      	movs	r1, r2
    5ce6:	0018      	movs	r0, r3
    5ce8:	4b3b      	ldr	r3, [pc, #236]	; (5dd8 <processOnSMS+0x12d8>)
    5cea:	4798      	blx	r3
    5cec:	1e03      	subs	r3, r0, #0
    5cee:	d029      	beq.n	5d44 <processOnSMS+0x1244>
	{
		saveNoCallSettings(false,0,0,0,0);
    5cf0:	2300      	movs	r3, #0
    5cf2:	9300      	str	r3, [sp, #0]
    5cf4:	2300      	movs	r3, #0
    5cf6:	2200      	movs	r2, #0
    5cf8:	2100      	movs	r1, #0
    5cfa:	2000      	movs	r0, #0
    5cfc:	4c41      	ldr	r4, [pc, #260]	; (5e04 <processOnSMS+0x1304>)
    5cfe:	47a0      	blx	r4
		incomingSMSProcessed=true;
    5d00:	2328      	movs	r3, #40	; 0x28
    5d02:	33ff      	adds	r3, #255	; 0xff
    5d04:	2208      	movs	r2, #8
    5d06:	4694      	mov	ip, r2
    5d08:	44bc      	add	ip, r7
    5d0a:	4463      	add	r3, ip
    5d0c:	2201      	movs	r2, #1
    5d0e:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
    5d10:	4b36      	ldr	r3, [pc, #216]	; (5dec <processOnSMS+0x12ec>)
    5d12:	2294      	movs	r2, #148	; 0x94
    5d14:	0052      	lsls	r2, r2, #1
    5d16:	4694      	mov	ip, r2
    5d18:	2208      	movs	r2, #8
    5d1a:	4690      	mov	r8, r2
    5d1c:	44b8      	add	r8, r7
    5d1e:	44c4      	add	ip, r8
    5d20:	4463      	add	r3, ip
    5d22:	781b      	ldrb	r3, [r3, #0]
    5d24:	2b00      	cmp	r3, #0
    5d26:	d101      	bne.n	5d2c <processOnSMS+0x122c>
    5d28:	f000 fde6 	bl	68f8 <processOnSMS+0x1df8>
		{
			strcpy(resep_msg,"NO CALL SETTING OFF");
    5d2c:	230c      	movs	r3, #12
    5d2e:	2208      	movs	r2, #8
    5d30:	4694      	mov	ip, r2
    5d32:	44bc      	add	ip, r7
    5d34:	4463      	add	r3, ip
    5d36:	4a34      	ldr	r2, [pc, #208]	; (5e08 <processOnSMS+0x1308>)
    5d38:	ca13      	ldmia	r2!, {r0, r1, r4}
    5d3a:	c313      	stmia	r3!, {r0, r1, r4}
    5d3c:	ca03      	ldmia	r2!, {r0, r1}
    5d3e:	c303      	stmia	r3!, {r0, r1}
    5d40:	f000 fdda 	bl	68f8 <processOnSMS+0x1df8>
		}
	}
	else if (StringstartsWith(received_command,"GETTIME"))
    5d44:	4a31      	ldr	r2, [pc, #196]	; (5e0c <processOnSMS+0x130c>)
    5d46:	68fb      	ldr	r3, [r7, #12]
    5d48:	0011      	movs	r1, r2
    5d4a:	0018      	movs	r0, r3
    5d4c:	4b22      	ldr	r3, [pc, #136]	; (5dd8 <processOnSMS+0x12d8>)
    5d4e:	4798      	blx	r3
    5d50:	1e03      	subs	r3, r0, #0
    5d52:	d067      	beq.n	5e24 <processOnSMS+0x1324>
	{
		uint8_t globalHours,globalMinutes;
		getSystemTime(&globalHours,&globalMinutes);
    5d54:	230a      	movs	r3, #10
    5d56:	2208      	movs	r2, #8
    5d58:	18ba      	adds	r2, r7, r2
    5d5a:	18d2      	adds	r2, r2, r3
    5d5c:	230b      	movs	r3, #11
    5d5e:	2108      	movs	r1, #8
    5d60:	468c      	mov	ip, r1
    5d62:	44bc      	add	ip, r7
    5d64:	4463      	add	r3, ip
    5d66:	0011      	movs	r1, r2
    5d68:	0018      	movs	r0, r3
    5d6a:	4b29      	ldr	r3, [pc, #164]	; (5e10 <processOnSMS+0x1310>)
    5d6c:	4798      	blx	r3
		
		sprintf(resep_msg,"TIME : %u:%u",
    5d6e:	4b29      	ldr	r3, [pc, #164]	; (5e14 <processOnSMS+0x1314>)
    5d70:	2294      	movs	r2, #148	; 0x94
    5d72:	0052      	lsls	r2, r2, #1
    5d74:	4694      	mov	ip, r2
    5d76:	2208      	movs	r2, #8
    5d78:	4690      	mov	r8, r2
    5d7a:	44b8      	add	r8, r7
    5d7c:	44c4      	add	ip, r8
    5d7e:	4463      	add	r3, ip
    5d80:	781b      	ldrb	r3, [r3, #0]
    5d82:	001a      	movs	r2, r3
    5d84:	4b24      	ldr	r3, [pc, #144]	; (5e18 <processOnSMS+0x1318>)
    5d86:	2194      	movs	r1, #148	; 0x94
    5d88:	0049      	lsls	r1, r1, #1
    5d8a:	468c      	mov	ip, r1
    5d8c:	2108      	movs	r1, #8
    5d8e:	4688      	mov	r8, r1
    5d90:	44b8      	add	r8, r7
    5d92:	44c4      	add	ip, r8
    5d94:	4463      	add	r3, ip
    5d96:	781b      	ldrb	r3, [r3, #0]
    5d98:	4920      	ldr	r1, [pc, #128]	; (5e1c <processOnSMS+0x131c>)
    5d9a:	200c      	movs	r0, #12
    5d9c:	2408      	movs	r4, #8
    5d9e:	46a4      	mov	ip, r4
    5da0:	44bc      	add	ip, r7
    5da2:	4460      	add	r0, ip
    5da4:	4c1e      	ldr	r4, [pc, #120]	; (5e20 <processOnSMS+0x1320>)
    5da6:	47a0      	blx	r4
		globalHours,globalMinutes);

		incomingSMSProcessed=true;
    5da8:	2328      	movs	r3, #40	; 0x28
    5daa:	33ff      	adds	r3, #255	; 0xff
    5dac:	2208      	movs	r2, #8
    5dae:	4694      	mov	ip, r2
    5db0:	44bc      	add	ip, r7
    5db2:	4463      	add	r3, ip
    5db4:	2201      	movs	r2, #1
    5db6:	701a      	strb	r2, [r3, #0]

		response_sms_processed_cmd = true;
    5db8:	4b0c      	ldr	r3, [pc, #48]	; (5dec <processOnSMS+0x12ec>)
    5dba:	2294      	movs	r2, #148	; 0x94
    5dbc:	0052      	lsls	r2, r2, #1
    5dbe:	4694      	mov	ip, r2
    5dc0:	2208      	movs	r2, #8
    5dc2:	4690      	mov	r8, r2
    5dc4:	44b8      	add	r8, r7
    5dc6:	44c4      	add	ip, r8
    5dc8:	4463      	add	r3, ip
    5dca:	2201      	movs	r2, #1
    5dcc:	701a      	strb	r2, [r3, #0]
    5dce:	f000 fd93 	bl	68f8 <processOnSMS+0x1df8>
    5dd2:	46c0      	nop			; (mov r8, r8)
    5dd4:	00018d90 	.word	0x00018d90
    5dd8:	00003db5 	.word	0x00003db5
    5ddc:	fffffedb 	.word	0xfffffedb
    5de0:	fffffed9 	.word	0xfffffed9
    5de4:	20000634 	.word	0x20000634
    5de8:	000011e9 	.word	0x000011e9
    5dec:	fffffeda 	.word	0xfffffeda
    5df0:	00019080 	.word	0x00019080
    5df4:	00019094 	.word	0x00019094
    5df8:	000190b4 	.word	0x000190b4
    5dfc:	000190bc 	.word	0x000190bc
    5e00:	000190d8 	.word	0x000190d8
    5e04:	000013d9 	.word	0x000013d9
    5e08:	000190e0 	.word	0x000190e0
    5e0c:	000190f4 	.word	0x000190f4
    5e10:	00006e05 	.word	0x00006e05
    5e14:	fffffee3 	.word	0xfffffee3
    5e18:	fffffee2 	.word	0xfffffee2
    5e1c:	000190fc 	.word	0x000190fc
    5e20:	00017d5d 	.word	0x00017d5d
	}
	else if (StringstartsWith(received_command,"SETTIME"))
    5e24:	4ada      	ldr	r2, [pc, #872]	; (6190 <processOnSMS+0x1690>)
    5e26:	68fb      	ldr	r3, [r7, #12]
    5e28:	0011      	movs	r1, r2
    5e2a:	0018      	movs	r0, r3
    5e2c:	4bd9      	ldr	r3, [pc, #868]	; (6194 <processOnSMS+0x1694>)
    5e2e:	4798      	blx	r3
    5e30:	1e03      	subs	r3, r0, #0
    5e32:	d001      	beq.n	5e38 <processOnSMS+0x1338>
    5e34:	f000 fd60 	bl	68f8 <processOnSMS+0x1df8>
		//todo: implement
		//set internal RTC of Either MCU or SIM800 to check no call time
		

	}
	else if (StringstartsWith(received_command,"NCTIME"))
    5e38:	4ad7      	ldr	r2, [pc, #860]	; (6198 <processOnSMS+0x1698>)
    5e3a:	68fb      	ldr	r3, [r7, #12]
    5e3c:	0011      	movs	r1, r2
    5e3e:	0018      	movs	r0, r3
    5e40:	4bd4      	ldr	r3, [pc, #848]	; (6194 <processOnSMS+0x1694>)
    5e42:	4798      	blx	r3
    5e44:	1e03      	subs	r3, r0, #0
    5e46:	d100      	bne.n	5e4a <processOnSMS+0x134a>
    5e48:	e13c      	b.n	60c4 <processOnSMS+0x15c4>
	{
		char *ptrclcc;
		uint8_t startHH, startMM, stopHH, stopMM;

		ptrclcc = strtok(received_command,"-");
    5e4a:	4ad4      	ldr	r2, [pc, #848]	; (619c <processOnSMS+0x169c>)
    5e4c:	68fb      	ldr	r3, [r7, #12]
    5e4e:	0011      	movs	r1, r2
    5e50:	0018      	movs	r0, r3
    5e52:	4bd3      	ldr	r3, [pc, #844]	; (61a0 <processOnSMS+0x16a0>)
    5e54:	4798      	blx	r3
    5e56:	0003      	movs	r3, r0
    5e58:	2288      	movs	r2, #136	; 0x88
    5e5a:	0052      	lsls	r2, r2, #1
    5e5c:	2108      	movs	r1, #8
    5e5e:	468c      	mov	ip, r1
    5e60:	44bc      	add	ip, r7
    5e62:	4462      	add	r2, ip
    5e64:	6013      	str	r3, [r2, #0]
		ptrclcc = strtok(NULL,":");
    5e66:	4bcf      	ldr	r3, [pc, #828]	; (61a4 <processOnSMS+0x16a4>)
    5e68:	0019      	movs	r1, r3
    5e6a:	2000      	movs	r0, #0
    5e6c:	4bcc      	ldr	r3, [pc, #816]	; (61a0 <processOnSMS+0x16a0>)
    5e6e:	4798      	blx	r3
    5e70:	0003      	movs	r3, r0
    5e72:	2288      	movs	r2, #136	; 0x88
    5e74:	0052      	lsls	r2, r2, #1
    5e76:	2108      	movs	r1, #8
    5e78:	468c      	mov	ip, r1
    5e7a:	44bc      	add	ip, r7
    5e7c:	4462      	add	r2, ip
    5e7e:	6013      	str	r3, [r2, #0]
		startHH=atoi(*ptrclcc);
    5e80:	2388      	movs	r3, #136	; 0x88
    5e82:	005b      	lsls	r3, r3, #1
    5e84:	2208      	movs	r2, #8
    5e86:	4694      	mov	ip, r2
    5e88:	44bc      	add	ip, r7
    5e8a:	4463      	add	r3, ip
    5e8c:	681b      	ldr	r3, [r3, #0]
    5e8e:	781b      	ldrb	r3, [r3, #0]
    5e90:	0018      	movs	r0, r3
    5e92:	4bc5      	ldr	r3, [pc, #788]	; (61a8 <processOnSMS+0x16a8>)
    5e94:	4798      	blx	r3
    5e96:	0002      	movs	r2, r0
    5e98:	2310      	movs	r3, #16
    5e9a:	33ff      	adds	r3, #255	; 0xff
    5e9c:	2108      	movs	r1, #8
    5e9e:	468c      	mov	ip, r1
    5ea0:	44bc      	add	ip, r7
    5ea2:	4463      	add	r3, ip
    5ea4:	701a      	strb	r2, [r3, #0]
		ptrclcc = strtok(NULL,"-");
    5ea6:	4bbd      	ldr	r3, [pc, #756]	; (619c <processOnSMS+0x169c>)
    5ea8:	0019      	movs	r1, r3
    5eaa:	2000      	movs	r0, #0
    5eac:	4bbc      	ldr	r3, [pc, #752]	; (61a0 <processOnSMS+0x16a0>)
    5eae:	4798      	blx	r3
    5eb0:	0003      	movs	r3, r0
    5eb2:	2288      	movs	r2, #136	; 0x88
    5eb4:	0052      	lsls	r2, r2, #1
    5eb6:	2108      	movs	r1, #8
    5eb8:	468c      	mov	ip, r1
    5eba:	44bc      	add	ip, r7
    5ebc:	4462      	add	r2, ip
    5ebe:	6013      	str	r3, [r2, #0]
		startMM=atoi(*ptrclcc);
    5ec0:	2388      	movs	r3, #136	; 0x88
    5ec2:	005b      	lsls	r3, r3, #1
    5ec4:	2208      	movs	r2, #8
    5ec6:	4694      	mov	ip, r2
    5ec8:	44bc      	add	ip, r7
    5eca:	4463      	add	r3, ip
    5ecc:	681b      	ldr	r3, [r3, #0]
    5ece:	781b      	ldrb	r3, [r3, #0]
    5ed0:	0018      	movs	r0, r3
    5ed2:	4bb5      	ldr	r3, [pc, #724]	; (61a8 <processOnSMS+0x16a8>)
    5ed4:	4798      	blx	r3
    5ed6:	0002      	movs	r2, r0
    5ed8:	2387      	movs	r3, #135	; 0x87
    5eda:	005b      	lsls	r3, r3, #1
    5edc:	2108      	movs	r1, #8
    5ede:	468c      	mov	ip, r1
    5ee0:	44bc      	add	ip, r7
    5ee2:	4463      	add	r3, ip
    5ee4:	701a      	strb	r2, [r3, #0]
		ptrclcc = strtok(NULL,":");
    5ee6:	4baf      	ldr	r3, [pc, #700]	; (61a4 <processOnSMS+0x16a4>)
    5ee8:	0019      	movs	r1, r3
    5eea:	2000      	movs	r0, #0
    5eec:	4bac      	ldr	r3, [pc, #688]	; (61a0 <processOnSMS+0x16a0>)
    5eee:	4798      	blx	r3
    5ef0:	0003      	movs	r3, r0
    5ef2:	2288      	movs	r2, #136	; 0x88
    5ef4:	0052      	lsls	r2, r2, #1
    5ef6:	2108      	movs	r1, #8
    5ef8:	468c      	mov	ip, r1
    5efa:	44bc      	add	ip, r7
    5efc:	4462      	add	r2, ip
    5efe:	6013      	str	r3, [r2, #0]
		stopHH=atoi(*ptrclcc);
    5f00:	2388      	movs	r3, #136	; 0x88
    5f02:	005b      	lsls	r3, r3, #1
    5f04:	2208      	movs	r2, #8
    5f06:	4694      	mov	ip, r2
    5f08:	44bc      	add	ip, r7
    5f0a:	4463      	add	r3, ip
    5f0c:	681b      	ldr	r3, [r3, #0]
    5f0e:	781b      	ldrb	r3, [r3, #0]
    5f10:	0018      	movs	r0, r3
    5f12:	4ba5      	ldr	r3, [pc, #660]	; (61a8 <processOnSMS+0x16a8>)
    5f14:	4798      	blx	r3
    5f16:	0002      	movs	r2, r0
    5f18:	230e      	movs	r3, #14
    5f1a:	33ff      	adds	r3, #255	; 0xff
    5f1c:	2108      	movs	r1, #8
    5f1e:	468c      	mov	ip, r1
    5f20:	44bc      	add	ip, r7
    5f22:	4463      	add	r3, ip
    5f24:	701a      	strb	r2, [r3, #0]
		ptrclcc = strtok(NULL,":");
    5f26:	4b9f      	ldr	r3, [pc, #636]	; (61a4 <processOnSMS+0x16a4>)
    5f28:	0019      	movs	r1, r3
    5f2a:	2000      	movs	r0, #0
    5f2c:	4b9c      	ldr	r3, [pc, #624]	; (61a0 <processOnSMS+0x16a0>)
    5f2e:	4798      	blx	r3
    5f30:	0003      	movs	r3, r0
    5f32:	2288      	movs	r2, #136	; 0x88
    5f34:	0052      	lsls	r2, r2, #1
    5f36:	2108      	movs	r1, #8
    5f38:	468c      	mov	ip, r1
    5f3a:	44bc      	add	ip, r7
    5f3c:	4462      	add	r2, ip
    5f3e:	6013      	str	r3, [r2, #0]
		stopMM=atoi(*ptrclcc);
    5f40:	2388      	movs	r3, #136	; 0x88
    5f42:	005b      	lsls	r3, r3, #1
    5f44:	2208      	movs	r2, #8
    5f46:	4694      	mov	ip, r2
    5f48:	44bc      	add	ip, r7
    5f4a:	4463      	add	r3, ip
    5f4c:	681b      	ldr	r3, [r3, #0]
    5f4e:	781b      	ldrb	r3, [r3, #0]
    5f50:	0018      	movs	r0, r3
    5f52:	4b95      	ldr	r3, [pc, #596]	; (61a8 <processOnSMS+0x16a8>)
    5f54:	4798      	blx	r3
    5f56:	0002      	movs	r2, r0
    5f58:	2386      	movs	r3, #134	; 0x86
    5f5a:	005b      	lsls	r3, r3, #1
    5f5c:	2108      	movs	r1, #8
    5f5e:	468c      	mov	ip, r1
    5f60:	44bc      	add	ip, r7
    5f62:	4463      	add	r3, ip
    5f64:	701a      	strb	r2, [r3, #0]

		if(startHH>=0 && startHH<24 && startMM>=0 && startMM<60)
    5f66:	2310      	movs	r3, #16
    5f68:	33ff      	adds	r3, #255	; 0xff
    5f6a:	2208      	movs	r2, #8
    5f6c:	4694      	mov	ip, r2
    5f6e:	44bc      	add	ip, r7
    5f70:	4463      	add	r3, ip
    5f72:	781b      	ldrb	r3, [r3, #0]
    5f74:	2b17      	cmp	r3, #23
    5f76:	d901      	bls.n	5f7c <processOnSMS+0x147c>
    5f78:	f000 fcbe 	bl	68f8 <processOnSMS+0x1df8>
    5f7c:	2387      	movs	r3, #135	; 0x87
    5f7e:	005b      	lsls	r3, r3, #1
    5f80:	2208      	movs	r2, #8
    5f82:	4694      	mov	ip, r2
    5f84:	44bc      	add	ip, r7
    5f86:	4463      	add	r3, ip
    5f88:	781b      	ldrb	r3, [r3, #0]
    5f8a:	2b3b      	cmp	r3, #59	; 0x3b
    5f8c:	d901      	bls.n	5f92 <processOnSMS+0x1492>
    5f8e:	f000 fcb3 	bl	68f8 <processOnSMS+0x1df8>
		{
			if(stopHH>=0 && stopHH<24 && stopMM>=0 && stopMM<60)
    5f92:	230e      	movs	r3, #14
    5f94:	33ff      	adds	r3, #255	; 0xff
    5f96:	2208      	movs	r2, #8
    5f98:	4694      	mov	ip, r2
    5f9a:	44bc      	add	ip, r7
    5f9c:	4463      	add	r3, ip
    5f9e:	781b      	ldrb	r3, [r3, #0]
    5fa0:	2b17      	cmp	r3, #23
    5fa2:	d901      	bls.n	5fa8 <processOnSMS+0x14a8>
    5fa4:	f000 fca8 	bl	68f8 <processOnSMS+0x1df8>
    5fa8:	2386      	movs	r3, #134	; 0x86
    5faa:	005b      	lsls	r3, r3, #1
    5fac:	2208      	movs	r2, #8
    5fae:	4694      	mov	ip, r2
    5fb0:	44bc      	add	ip, r7
    5fb2:	4463      	add	r3, ip
    5fb4:	781b      	ldrb	r3, [r3, #0]
    5fb6:	2b3b      	cmp	r3, #59	; 0x3b
    5fb8:	d901      	bls.n	5fbe <processOnSMS+0x14be>
    5fba:	f000 fc9d 	bl	68f8 <processOnSMS+0x1df8>
			{
				incomingSMSProcessed=true;
    5fbe:	2328      	movs	r3, #40	; 0x28
    5fc0:	33ff      	adds	r3, #255	; 0xff
    5fc2:	2208      	movs	r2, #8
    5fc4:	4694      	mov	ip, r2
    5fc6:	44bc      	add	ip, r7
    5fc8:	4463      	add	r3, ip
    5fca:	2201      	movs	r2, #1
    5fcc:	701a      	strb	r2, [r3, #0]
				
				if(startHH==stopHH && startMM==stopMM)
    5fce:	2310      	movs	r3, #16
    5fd0:	33ff      	adds	r3, #255	; 0xff
    5fd2:	2208      	movs	r2, #8
    5fd4:	18ba      	adds	r2, r7, r2
    5fd6:	18d2      	adds	r2, r2, r3
    5fd8:	230e      	movs	r3, #14
    5fda:	33ff      	adds	r3, #255	; 0xff
    5fdc:	2108      	movs	r1, #8
    5fde:	468c      	mov	ip, r1
    5fe0:	44bc      	add	ip, r7
    5fe2:	4463      	add	r3, ip
    5fe4:	7812      	ldrb	r2, [r2, #0]
    5fe6:	781b      	ldrb	r3, [r3, #0]
    5fe8:	429a      	cmp	r2, r3
    5fea:	d130      	bne.n	604e <processOnSMS+0x154e>
    5fec:	2387      	movs	r3, #135	; 0x87
    5fee:	005b      	lsls	r3, r3, #1
    5ff0:	2208      	movs	r2, #8
    5ff2:	18ba      	adds	r2, r7, r2
    5ff4:	18d2      	adds	r2, r2, r3
    5ff6:	2386      	movs	r3, #134	; 0x86
    5ff8:	005b      	lsls	r3, r3, #1
    5ffa:	2108      	movs	r1, #8
    5ffc:	468c      	mov	ip, r1
    5ffe:	44bc      	add	ip, r7
    6000:	4463      	add	r3, ip
    6002:	7812      	ldrb	r2, [r2, #0]
    6004:	781b      	ldrb	r3, [r3, #0]
    6006:	429a      	cmp	r2, r3
    6008:	d121      	bne.n	604e <processOnSMS+0x154e>
				{
					saveNoCallSettings(false,0,0,0,0);
    600a:	2300      	movs	r3, #0
    600c:	9300      	str	r3, [sp, #0]
    600e:	2300      	movs	r3, #0
    6010:	2200      	movs	r2, #0
    6012:	2100      	movs	r1, #0
    6014:	2000      	movs	r0, #0
    6016:	4c65      	ldr	r4, [pc, #404]	; (61ac <processOnSMS+0x16ac>)
    6018:	47a0      	blx	r4
					if(response_sms_processed_cmd)
    601a:	4b65      	ldr	r3, [pc, #404]	; (61b0 <processOnSMS+0x16b0>)
    601c:	2294      	movs	r2, #148	; 0x94
    601e:	0052      	lsls	r2, r2, #1
    6020:	4694      	mov	ip, r2
    6022:	2208      	movs	r2, #8
    6024:	4690      	mov	r8, r2
    6026:	44b8      	add	r8, r7
    6028:	44c4      	add	ip, r8
    602a:	4463      	add	r3, ip
    602c:	781b      	ldrb	r3, [r3, #0]
    602e:	2b00      	cmp	r3, #0
    6030:	d101      	bne.n	6036 <processOnSMS+0x1536>
    6032:	f000 fc61 	bl	68f8 <processOnSMS+0x1df8>
					{
						strcpy(resep_msg,"NO CALL SETTING OFF");
    6036:	230c      	movs	r3, #12
    6038:	2208      	movs	r2, #8
    603a:	4694      	mov	ip, r2
    603c:	44bc      	add	ip, r7
    603e:	4463      	add	r3, ip
    6040:	4a5c      	ldr	r2, [pc, #368]	; (61b4 <processOnSMS+0x16b4>)
    6042:	ca13      	ldmia	r2!, {r0, r1, r4}
    6044:	c313      	stmia	r3!, {r0, r1, r4}
    6046:	ca03      	ldmia	r2!, {r0, r1}
    6048:	c303      	stmia	r3!, {r0, r1}
					if(response_sms_processed_cmd)
    604a:	f000 fc55 	bl	68f8 <processOnSMS+0x1df8>
					}
				}
				else
				{
					saveNoCallSettings(true,startHH,startMM,stopHH,stopMM);
    604e:	230e      	movs	r3, #14
    6050:	33ff      	adds	r3, #255	; 0xff
    6052:	2208      	movs	r2, #8
    6054:	4694      	mov	ip, r2
    6056:	44bc      	add	ip, r7
    6058:	4463      	add	r3, ip
    605a:	7818      	ldrb	r0, [r3, #0]
    605c:	2387      	movs	r3, #135	; 0x87
    605e:	005b      	lsls	r3, r3, #1
    6060:	2208      	movs	r2, #8
    6062:	4694      	mov	ip, r2
    6064:	44bc      	add	ip, r7
    6066:	4463      	add	r3, ip
    6068:	781a      	ldrb	r2, [r3, #0]
    606a:	2310      	movs	r3, #16
    606c:	33ff      	adds	r3, #255	; 0xff
    606e:	2108      	movs	r1, #8
    6070:	468c      	mov	ip, r1
    6072:	44bc      	add	ip, r7
    6074:	4463      	add	r3, ip
    6076:	7819      	ldrb	r1, [r3, #0]
    6078:	2386      	movs	r3, #134	; 0x86
    607a:	005b      	lsls	r3, r3, #1
    607c:	2408      	movs	r4, #8
    607e:	46a4      	mov	ip, r4
    6080:	44bc      	add	ip, r7
    6082:	4463      	add	r3, ip
    6084:	781b      	ldrb	r3, [r3, #0]
    6086:	9300      	str	r3, [sp, #0]
    6088:	0003      	movs	r3, r0
    608a:	2001      	movs	r0, #1
    608c:	4c47      	ldr	r4, [pc, #284]	; (61ac <processOnSMS+0x16ac>)
    608e:	47a0      	blx	r4
					if(response_sms_processed_cmd)
    6090:	4b47      	ldr	r3, [pc, #284]	; (61b0 <processOnSMS+0x16b0>)
    6092:	2294      	movs	r2, #148	; 0x94
    6094:	0052      	lsls	r2, r2, #1
    6096:	4694      	mov	ip, r2
    6098:	2208      	movs	r2, #8
    609a:	4690      	mov	r8, r2
    609c:	44b8      	add	r8, r7
    609e:	44c4      	add	ip, r8
    60a0:	4463      	add	r3, ip
    60a2:	781b      	ldrb	r3, [r3, #0]
    60a4:	2b00      	cmp	r3, #0
    60a6:	d101      	bne.n	60ac <processOnSMS+0x15ac>
    60a8:	f000 fc26 	bl	68f8 <processOnSMS+0x1df8>
					{
						strcpy(resep_msg,"NO CALL TIMINGS SET");
    60ac:	230c      	movs	r3, #12
    60ae:	2208      	movs	r2, #8
    60b0:	4694      	mov	ip, r2
    60b2:	44bc      	add	ip, r7
    60b4:	4463      	add	r3, ip
    60b6:	4a40      	ldr	r2, [pc, #256]	; (61b8 <processOnSMS+0x16b8>)
    60b8:	ca13      	ldmia	r2!, {r0, r1, r4}
    60ba:	c313      	stmia	r3!, {r0, r1, r4}
    60bc:	ca03      	ldmia	r2!, {r0, r1}
    60be:	c303      	stmia	r3!, {r0, r1}
    60c0:	f000 fc1a 	bl	68f8 <processOnSMS+0x1df8>
					}
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"STAGE"))
    60c4:	4a3d      	ldr	r2, [pc, #244]	; (61bc <processOnSMS+0x16bc>)
    60c6:	68fb      	ldr	r3, [r7, #12]
    60c8:	0011      	movs	r1, r2
    60ca:	0018      	movs	r0, r3
    60cc:	4b31      	ldr	r3, [pc, #196]	; (6194 <processOnSMS+0x1694>)
    60ce:	4798      	blx	r3
    60d0:	1e03      	subs	r3, r0, #0
    60d2:	d100      	bne.n	60d6 <processOnSMS+0x15d6>
    60d4:	e07e      	b.n	61d4 <processOnSMS+0x16d4>
	{
		memmove(received_command,received_command+5,strlen(received_command));
    60d6:	68fb      	ldr	r3, [r7, #12]
    60d8:	1d5c      	adds	r4, r3, #5
    60da:	68fb      	ldr	r3, [r7, #12]
    60dc:	0018      	movs	r0, r3
    60de:	4b38      	ldr	r3, [pc, #224]	; (61c0 <processOnSMS+0x16c0>)
    60e0:	4798      	blx	r3
    60e2:	0002      	movs	r2, r0
    60e4:	68fb      	ldr	r3, [r7, #12]
    60e6:	0021      	movs	r1, r4
    60e8:	0018      	movs	r0, r3
    60ea:	4b36      	ldr	r3, [pc, #216]	; (61c4 <processOnSMS+0x16c4>)
    60ec:	4798      	blx	r3
		uint16_t stageLevel = atoi(received_command);
    60ee:	68fb      	ldr	r3, [r7, #12]
    60f0:	0018      	movs	r0, r3
    60f2:	4b2d      	ldr	r3, [pc, #180]	; (61a8 <processOnSMS+0x16a8>)
    60f4:	4798      	blx	r3
    60f6:	0002      	movs	r2, r0
    60f8:	2391      	movs	r3, #145	; 0x91
    60fa:	005b      	lsls	r3, r3, #1
    60fc:	2108      	movs	r1, #8
    60fe:	468c      	mov	ip, r1
    6100:	44bc      	add	ip, r7
    6102:	4463      	add	r3, ip
    6104:	801a      	strh	r2, [r3, #0]
		if (stageLevel < 0) stageLevel = 0;
		if (stageLevel > 5) stageLevel = 5;
    6106:	2391      	movs	r3, #145	; 0x91
    6108:	005b      	lsls	r3, r3, #1
    610a:	2208      	movs	r2, #8
    610c:	4694      	mov	ip, r2
    610e:	44bc      	add	ip, r7
    6110:	4463      	add	r3, ip
    6112:	881b      	ldrh	r3, [r3, #0]
    6114:	2b05      	cmp	r3, #5
    6116:	d907      	bls.n	6128 <processOnSMS+0x1628>
    6118:	2391      	movs	r3, #145	; 0x91
    611a:	005b      	lsls	r3, r3, #1
    611c:	2208      	movs	r2, #8
    611e:	4694      	mov	ip, r2
    6120:	44bc      	add	ip, r7
    6122:	4463      	add	r3, ip
    6124:	2205      	movs	r2, #5
    6126:	801a      	strh	r2, [r3, #0]
		saveEventStageSettings(stageLevel);  //Store in EEPROM the EVENT STAGE
    6128:	2391      	movs	r3, #145	; 0x91
    612a:	005b      	lsls	r3, r3, #1
    612c:	2208      	movs	r2, #8
    612e:	4694      	mov	ip, r2
    6130:	44bc      	add	ip, r7
    6132:	4463      	add	r3, ip
    6134:	881b      	ldrh	r3, [r3, #0]
    6136:	b2db      	uxtb	r3, r3
    6138:	0018      	movs	r0, r3
    613a:	4b23      	ldr	r3, [pc, #140]	; (61c8 <processOnSMS+0x16c8>)
    613c:	4798      	blx	r3
		
		incomingSMSProcessed=true;
    613e:	2328      	movs	r3, #40	; 0x28
    6140:	33ff      	adds	r3, #255	; 0xff
    6142:	2208      	movs	r2, #8
    6144:	4694      	mov	ip, r2
    6146:	44bc      	add	ip, r7
    6148:	4463      	add	r3, ip
    614a:	2201      	movs	r2, #1
    614c:	701a      	strb	r2, [r3, #0]
		
		if(response_sms_processed_cmd)
    614e:	4b18      	ldr	r3, [pc, #96]	; (61b0 <processOnSMS+0x16b0>)
    6150:	2294      	movs	r2, #148	; 0x94
    6152:	0052      	lsls	r2, r2, #1
    6154:	4694      	mov	ip, r2
    6156:	2208      	movs	r2, #8
    6158:	4690      	mov	r8, r2
    615a:	44b8      	add	r8, r7
    615c:	44c4      	add	ip, r8
    615e:	4463      	add	r3, ip
    6160:	781b      	ldrb	r3, [r3, #0]
    6162:	2b00      	cmp	r3, #0
    6164:	d101      	bne.n	616a <processOnSMS+0x166a>
    6166:	f000 fbc7 	bl	68f8 <processOnSMS+0x1df8>
		{
			sprintf(resep_msg,"CALL STAGE SET TO : %d", stageLevel);
    616a:	2391      	movs	r3, #145	; 0x91
    616c:	005b      	lsls	r3, r3, #1
    616e:	2208      	movs	r2, #8
    6170:	4694      	mov	ip, r2
    6172:	44bc      	add	ip, r7
    6174:	4463      	add	r3, ip
    6176:	881a      	ldrh	r2, [r3, #0]
    6178:	4914      	ldr	r1, [pc, #80]	; (61cc <processOnSMS+0x16cc>)
    617a:	230c      	movs	r3, #12
    617c:	2008      	movs	r0, #8
    617e:	4684      	mov	ip, r0
    6180:	44bc      	add	ip, r7
    6182:	4463      	add	r3, ip
    6184:	0018      	movs	r0, r3
    6186:	4b12      	ldr	r3, [pc, #72]	; (61d0 <processOnSMS+0x16d0>)
    6188:	4798      	blx	r3
    618a:	f000 fbb5 	bl	68f8 <processOnSMS+0x1df8>
    618e:	46c0      	nop			; (mov r8, r8)
    6190:	0001910c 	.word	0x0001910c
    6194:	00003db5 	.word	0x00003db5
    6198:	00019114 	.word	0x00019114
    619c:	0001911c 	.word	0x0001911c
    61a0:	00017e49 	.word	0x00017e49
    61a4:	00019120 	.word	0x00019120
    61a8:	00017a3d 	.word	0x00017a3d
    61ac:	000013d9 	.word	0x000013d9
    61b0:	fffffeda 	.word	0xfffffeda
    61b4:	000190e0 	.word	0x000190e0
    61b8:	00019124 	.word	0x00019124
    61bc:	00019138 	.word	0x00019138
    61c0:	00017de7 	.word	0x00017de7
    61c4:	00017b33 	.word	0x00017b33
    61c8:	00001945 	.word	0x00001945
    61cc:	00019140 	.word	0x00019140
    61d0:	00017d5d 	.word	0x00017d5d
		}
	}
	else if (StringstartsWith(received_command,"STARTIME"))
    61d4:	4aa6      	ldr	r2, [pc, #664]	; (6470 <processOnSMS+0x1970>)
    61d6:	68fb      	ldr	r3, [r7, #12]
    61d8:	0011      	movs	r1, r2
    61da:	0018      	movs	r0, r3
    61dc:	4ba5      	ldr	r3, [pc, #660]	; (6474 <processOnSMS+0x1974>)
    61de:	4798      	blx	r3
    61e0:	1e03      	subs	r3, r0, #0
    61e2:	d06d      	beq.n	62c0 <processOnSMS+0x17c0>
	{
		memmove(received_command,received_command+8,strlen(received_command));
    61e4:	68fb      	ldr	r3, [r7, #12]
    61e6:	3308      	adds	r3, #8
    61e8:	001c      	movs	r4, r3
    61ea:	68fb      	ldr	r3, [r7, #12]
    61ec:	0018      	movs	r0, r3
    61ee:	4ba2      	ldr	r3, [pc, #648]	; (6478 <processOnSMS+0x1978>)
    61f0:	4798      	blx	r3
    61f2:	0002      	movs	r2, r0
    61f4:	68fb      	ldr	r3, [r7, #12]
    61f6:	0021      	movs	r1, r4
    61f8:	0018      	movs	r0, r3
    61fa:	4ba0      	ldr	r3, [pc, #640]	; (647c <processOnSMS+0x197c>)
    61fc:	4798      	blx	r3
		uint16_t STARTIME = atoi(received_command);
    61fe:	68fb      	ldr	r3, [r7, #12]
    6200:	0018      	movs	r0, r3
    6202:	4b9f      	ldr	r3, [pc, #636]	; (6480 <processOnSMS+0x1980>)
    6204:	4798      	blx	r3
    6206:	0002      	movs	r2, r0
    6208:	2390      	movs	r3, #144	; 0x90
    620a:	005b      	lsls	r3, r3, #1
    620c:	2108      	movs	r1, #8
    620e:	468c      	mov	ip, r1
    6210:	44bc      	add	ip, r7
    6212:	4463      	add	r3, ip
    6214:	801a      	strh	r2, [r3, #0]
		if (STARTIME < 2)
    6216:	2390      	movs	r3, #144	; 0x90
    6218:	005b      	lsls	r3, r3, #1
    621a:	2208      	movs	r2, #8
    621c:	4694      	mov	ip, r2
    621e:	44bc      	add	ip, r7
    6220:	4463      	add	r3, ip
    6222:	881b      	ldrh	r3, [r3, #0]
    6224:	2b01      	cmp	r3, #1
    6226:	d807      	bhi.n	6238 <processOnSMS+0x1738>
		{
			STARTIME = 2;
    6228:	2390      	movs	r3, #144	; 0x90
    622a:	005b      	lsls	r3, r3, #1
    622c:	2208      	movs	r2, #8
    622e:	4694      	mov	ip, r2
    6230:	44bc      	add	ip, r7
    6232:	4463      	add	r3, ip
    6234:	2202      	movs	r2, #2
    6236:	801a      	strh	r2, [r3, #0]
		}
		if (STARTIME > 1200)
    6238:	2390      	movs	r3, #144	; 0x90
    623a:	005b      	lsls	r3, r3, #1
    623c:	2208      	movs	r2, #8
    623e:	4694      	mov	ip, r2
    6240:	44bc      	add	ip, r7
    6242:	4463      	add	r3, ip
    6244:	881a      	ldrh	r2, [r3, #0]
    6246:	2396      	movs	r3, #150	; 0x96
    6248:	00db      	lsls	r3, r3, #3
    624a:	429a      	cmp	r2, r3
    624c:	d908      	bls.n	6260 <processOnSMS+0x1760>
		{
			STARTIME = 1200;
    624e:	2390      	movs	r3, #144	; 0x90
    6250:	005b      	lsls	r3, r3, #1
    6252:	2208      	movs	r2, #8
    6254:	4694      	mov	ip, r2
    6256:	44bc      	add	ip, r7
    6258:	4463      	add	r3, ip
    625a:	2296      	movs	r2, #150	; 0x96
    625c:	00d2      	lsls	r2, r2, #3
    625e:	801a      	strh	r2, [r3, #0]
		}
		saveStarDeltaTimer(STARTIME);
    6260:	2390      	movs	r3, #144	; 0x90
    6262:	005b      	lsls	r3, r3, #1
    6264:	2208      	movs	r2, #8
    6266:	4694      	mov	ip, r2
    6268:	44bc      	add	ip, r7
    626a:	4463      	add	r3, ip
    626c:	881b      	ldrh	r3, [r3, #0]
    626e:	0018      	movs	r0, r3
    6270:	4b84      	ldr	r3, [pc, #528]	; (6484 <processOnSMS+0x1984>)
    6272:	4798      	blx	r3
		
		incomingSMSProcessed=true;
    6274:	2328      	movs	r3, #40	; 0x28
    6276:	33ff      	adds	r3, #255	; 0xff
    6278:	2208      	movs	r2, #8
    627a:	4694      	mov	ip, r2
    627c:	44bc      	add	ip, r7
    627e:	4463      	add	r3, ip
    6280:	2201      	movs	r2, #1
    6282:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
    6284:	4b80      	ldr	r3, [pc, #512]	; (6488 <processOnSMS+0x1988>)
    6286:	2294      	movs	r2, #148	; 0x94
    6288:	0052      	lsls	r2, r2, #1
    628a:	4694      	mov	ip, r2
    628c:	2208      	movs	r2, #8
    628e:	4690      	mov	r8, r2
    6290:	44b8      	add	r8, r7
    6292:	44c4      	add	ip, r8
    6294:	4463      	add	r3, ip
    6296:	781b      	ldrb	r3, [r3, #0]
    6298:	2b00      	cmp	r3, #0
    629a:	d100      	bne.n	629e <processOnSMS+0x179e>
    629c:	e32c      	b.n	68f8 <processOnSMS+0x1df8>
		{
			sprintf(resep_msg," STARTIME SET TO : %d",STARTIME);
    629e:	2390      	movs	r3, #144	; 0x90
    62a0:	005b      	lsls	r3, r3, #1
    62a2:	2208      	movs	r2, #8
    62a4:	4694      	mov	ip, r2
    62a6:	44bc      	add	ip, r7
    62a8:	4463      	add	r3, ip
    62aa:	881a      	ldrh	r2, [r3, #0]
    62ac:	4977      	ldr	r1, [pc, #476]	; (648c <processOnSMS+0x198c>)
    62ae:	230c      	movs	r3, #12
    62b0:	2008      	movs	r0, #8
    62b2:	4684      	mov	ip, r0
    62b4:	44bc      	add	ip, r7
    62b6:	4463      	add	r3, ip
    62b8:	0018      	movs	r0, r3
    62ba:	4b75      	ldr	r3, [pc, #468]	; (6490 <processOnSMS+0x1990>)
    62bc:	4798      	blx	r3
    62be:	e31b      	b.n	68f8 <processOnSMS+0x1df8>
		}
	}
	else if (StringstartsWith(received_command,"AUTOTIME"))
    62c0:	4a74      	ldr	r2, [pc, #464]	; (6494 <processOnSMS+0x1994>)
    62c2:	68fb      	ldr	r3, [r7, #12]
    62c4:	0011      	movs	r1, r2
    62c6:	0018      	movs	r0, r3
    62c8:	4b6a      	ldr	r3, [pc, #424]	; (6474 <processOnSMS+0x1974>)
    62ca:	4798      	blx	r3
    62cc:	1e03      	subs	r3, r0, #0
    62ce:	d06d      	beq.n	63ac <processOnSMS+0x18ac>
	{
		memmove(received_command,received_command+8,strlen(received_command));
    62d0:	68fb      	ldr	r3, [r7, #12]
    62d2:	3308      	adds	r3, #8
    62d4:	001c      	movs	r4, r3
    62d6:	68fb      	ldr	r3, [r7, #12]
    62d8:	0018      	movs	r0, r3
    62da:	4b67      	ldr	r3, [pc, #412]	; (6478 <processOnSMS+0x1978>)
    62dc:	4798      	blx	r3
    62de:	0002      	movs	r2, r0
    62e0:	68fb      	ldr	r3, [r7, #12]
    62e2:	0021      	movs	r1, r4
    62e4:	0018      	movs	r0, r3
    62e6:	4b65      	ldr	r3, [pc, #404]	; (647c <processOnSMS+0x197c>)
    62e8:	4798      	blx	r3
		uint16_t AUTOTIME = atoi(received_command);
    62ea:	68fb      	ldr	r3, [r7, #12]
    62ec:	0018      	movs	r0, r3
    62ee:	4b64      	ldr	r3, [pc, #400]	; (6480 <processOnSMS+0x1980>)
    62f0:	4798      	blx	r3
    62f2:	0002      	movs	r2, r0
    62f4:	238f      	movs	r3, #143	; 0x8f
    62f6:	005b      	lsls	r3, r3, #1
    62f8:	2108      	movs	r1, #8
    62fa:	468c      	mov	ip, r1
    62fc:	44bc      	add	ip, r7
    62fe:	4463      	add	r3, ip
    6300:	801a      	strh	r2, [r3, #0]
		if (AUTOTIME < 50)
    6302:	238f      	movs	r3, #143	; 0x8f
    6304:	005b      	lsls	r3, r3, #1
    6306:	2208      	movs	r2, #8
    6308:	4694      	mov	ip, r2
    630a:	44bc      	add	ip, r7
    630c:	4463      	add	r3, ip
    630e:	881b      	ldrh	r3, [r3, #0]
    6310:	2b31      	cmp	r3, #49	; 0x31
    6312:	d807      	bhi.n	6324 <processOnSMS+0x1824>
		{
			AUTOTIME = 50;
    6314:	238f      	movs	r3, #143	; 0x8f
    6316:	005b      	lsls	r3, r3, #1
    6318:	2208      	movs	r2, #8
    631a:	4694      	mov	ip, r2
    631c:	44bc      	add	ip, r7
    631e:	4463      	add	r3, ip
    6320:	2232      	movs	r2, #50	; 0x32
    6322:	801a      	strh	r2, [r3, #0]
		}
		if (AUTOTIME > 28800)
    6324:	238f      	movs	r3, #143	; 0x8f
    6326:	005b      	lsls	r3, r3, #1
    6328:	2208      	movs	r2, #8
    632a:	4694      	mov	ip, r2
    632c:	44bc      	add	ip, r7
    632e:	4463      	add	r3, ip
    6330:	881a      	ldrh	r2, [r3, #0]
    6332:	23e1      	movs	r3, #225	; 0xe1
    6334:	01db      	lsls	r3, r3, #7
    6336:	429a      	cmp	r2, r3
    6338:	d908      	bls.n	634c <processOnSMS+0x184c>
		{
			AUTOTIME = 28800;
    633a:	238f      	movs	r3, #143	; 0x8f
    633c:	005b      	lsls	r3, r3, #1
    633e:	2208      	movs	r2, #8
    6340:	4694      	mov	ip, r2
    6342:	44bc      	add	ip, r7
    6344:	4463      	add	r3, ip
    6346:	22e1      	movs	r2, #225	; 0xe1
    6348:	01d2      	lsls	r2, r2, #7
    634a:	801a      	strh	r2, [r3, #0]
		}
		saveAutoStartTimeSettings(AUTOTIME);
    634c:	238f      	movs	r3, #143	; 0x8f
    634e:	005b      	lsls	r3, r3, #1
    6350:	2208      	movs	r2, #8
    6352:	4694      	mov	ip, r2
    6354:	44bc      	add	ip, r7
    6356:	4463      	add	r3, ip
    6358:	881b      	ldrh	r3, [r3, #0]
    635a:	0018      	movs	r0, r3
    635c:	4b4e      	ldr	r3, [pc, #312]	; (6498 <processOnSMS+0x1998>)
    635e:	4798      	blx	r3
		incomingSMSProcessed=true;
    6360:	2328      	movs	r3, #40	; 0x28
    6362:	33ff      	adds	r3, #255	; 0xff
    6364:	2208      	movs	r2, #8
    6366:	4694      	mov	ip, r2
    6368:	44bc      	add	ip, r7
    636a:	4463      	add	r3, ip
    636c:	2201      	movs	r2, #1
    636e:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
    6370:	4b45      	ldr	r3, [pc, #276]	; (6488 <processOnSMS+0x1988>)
    6372:	2294      	movs	r2, #148	; 0x94
    6374:	0052      	lsls	r2, r2, #1
    6376:	4694      	mov	ip, r2
    6378:	2208      	movs	r2, #8
    637a:	4690      	mov	r8, r2
    637c:	44b8      	add	r8, r7
    637e:	44c4      	add	ip, r8
    6380:	4463      	add	r3, ip
    6382:	781b      	ldrb	r3, [r3, #0]
    6384:	2b00      	cmp	r3, #0
    6386:	d100      	bne.n	638a <processOnSMS+0x188a>
    6388:	e2b6      	b.n	68f8 <processOnSMS+0x1df8>
		{
			sprintf(resep_msg," AUTOTIME SET TO : %d",AUTOTIME);
    638a:	238f      	movs	r3, #143	; 0x8f
    638c:	005b      	lsls	r3, r3, #1
    638e:	2208      	movs	r2, #8
    6390:	4694      	mov	ip, r2
    6392:	44bc      	add	ip, r7
    6394:	4463      	add	r3, ip
    6396:	881a      	ldrh	r2, [r3, #0]
    6398:	4940      	ldr	r1, [pc, #256]	; (649c <processOnSMS+0x199c>)
    639a:	230c      	movs	r3, #12
    639c:	2008      	movs	r0, #8
    639e:	4684      	mov	ip, r0
    63a0:	44bc      	add	ip, r7
    63a2:	4463      	add	r3, ip
    63a4:	0018      	movs	r0, r3
    63a6:	4b3a      	ldr	r3, [pc, #232]	; (6490 <processOnSMS+0x1990>)
    63a8:	4798      	blx	r3
    63aa:	e2a5      	b.n	68f8 <processOnSMS+0x1df8>
		}
	}
	else if (StringstartsWith(received_command,"BAL"))
    63ac:	4a3c      	ldr	r2, [pc, #240]	; (64a0 <processOnSMS+0x19a0>)
    63ae:	68fb      	ldr	r3, [r7, #12]
    63b0:	0011      	movs	r1, r2
    63b2:	0018      	movs	r0, r3
    63b4:	4b2f      	ldr	r3, [pc, #188]	; (6474 <processOnSMS+0x1974>)
    63b6:	4798      	blx	r3
    63b8:	1e03      	subs	r3, r0, #0
    63ba:	d000      	beq.n	63be <processOnSMS+0x18be>
    63bc:	e29c      	b.n	68f8 <processOnSMS+0x1df8>
		// The received sms will be like BAL*141# for vodafone
		// We need to extract the URC number and check the balance, and send it to user
		//todo: implement mechanism to check current balance of sim card
		
	}
	else if(StringstartsWith(received_command,"MP+"))
    63be:	4a39      	ldr	r2, [pc, #228]	; (64a4 <processOnSMS+0x19a4>)
    63c0:	68fb      	ldr	r3, [r7, #12]
    63c2:	0011      	movs	r1, r2
    63c4:	0018      	movs	r0, r3
    63c6:	4b2b      	ldr	r3, [pc, #172]	; (6474 <processOnSMS+0x1974>)
    63c8:	4798      	blx	r3
    63ca:	1e03      	subs	r3, r0, #0
    63cc:	d023      	beq.n	6416 <processOnSMS+0x1916>
	{
		memmove(received_command,received_command+3,strlen(received_command));
    63ce:	68fb      	ldr	r3, [r7, #12]
    63d0:	1cdc      	adds	r4, r3, #3
    63d2:	68fb      	ldr	r3, [r7, #12]
    63d4:	0018      	movs	r0, r3
    63d6:	4b28      	ldr	r3, [pc, #160]	; (6478 <processOnSMS+0x1978>)
    63d8:	4798      	blx	r3
    63da:	0002      	movs	r2, r0
    63dc:	68fb      	ldr	r3, [r7, #12]
    63de:	0021      	movs	r1, r4
    63e0:	0018      	movs	r0, r3
    63e2:	4b26      	ldr	r3, [pc, #152]	; (647c <processOnSMS+0x197c>)
    63e4:	4798      	blx	r3
		if(addPrimaryIndexedNumber(received_command))
    63e6:	68fb      	ldr	r3, [r7, #12]
    63e8:	0018      	movs	r0, r3
    63ea:	4b2f      	ldr	r3, [pc, #188]	; (64a8 <processOnSMS+0x19a8>)
    63ec:	4798      	blx	r3
    63ee:	1e03      	subs	r3, r0, #0
    63f0:	d100      	bne.n	63f4 <processOnSMS+0x18f4>
    63f2:	e281      	b.n	68f8 <processOnSMS+0x1df8>
		{
			incomingSMSProcessed=true;
    63f4:	2328      	movs	r3, #40	; 0x28
    63f6:	33ff      	adds	r3, #255	; 0xff
    63f8:	2208      	movs	r2, #8
    63fa:	4694      	mov	ip, r2
    63fc:	44bc      	add	ip, r7
    63fe:	4463      	add	r3, ip
    6400:	2201      	movs	r2, #1
    6402:	701a      	strb	r2, [r3, #0]
			strcpy(resep_msg,"P NO ADDDED");
    6404:	230c      	movs	r3, #12
    6406:	2208      	movs	r2, #8
    6408:	4694      	mov	ip, r2
    640a:	44bc      	add	ip, r7
    640c:	4463      	add	r3, ip
    640e:	4a27      	ldr	r2, [pc, #156]	; (64ac <processOnSMS+0x19ac>)
    6410:	ca13      	ldmia	r2!, {r0, r1, r4}
    6412:	c313      	stmia	r3!, {r0, r1, r4}
    6414:	e270      	b.n	68f8 <processOnSMS+0x1df8>
		}
	}
	else if(StringstartsWith(received_command,"MS+"))
    6416:	4a26      	ldr	r2, [pc, #152]	; (64b0 <processOnSMS+0x19b0>)
    6418:	68fb      	ldr	r3, [r7, #12]
    641a:	0011      	movs	r1, r2
    641c:	0018      	movs	r0, r3
    641e:	4b15      	ldr	r3, [pc, #84]	; (6474 <processOnSMS+0x1974>)
    6420:	4798      	blx	r3
    6422:	1e03      	subs	r3, r0, #0
    6424:	d04a      	beq.n	64bc <processOnSMS+0x19bc>
	{
		memmove(received_command,received_command+3,strlen(received_command));
    6426:	68fb      	ldr	r3, [r7, #12]
    6428:	1cdc      	adds	r4, r3, #3
    642a:	68fb      	ldr	r3, [r7, #12]
    642c:	0018      	movs	r0, r3
    642e:	4b12      	ldr	r3, [pc, #72]	; (6478 <processOnSMS+0x1978>)
    6430:	4798      	blx	r3
    6432:	0002      	movs	r2, r0
    6434:	68fb      	ldr	r3, [r7, #12]
    6436:	0021      	movs	r1, r4
    6438:	0018      	movs	r0, r3
    643a:	4b10      	ldr	r3, [pc, #64]	; (647c <processOnSMS+0x197c>)
    643c:	4798      	blx	r3
		if(addSecondaryIndexedNumber(received_command))
    643e:	68fb      	ldr	r3, [r7, #12]
    6440:	0018      	movs	r0, r3
    6442:	4b1c      	ldr	r3, [pc, #112]	; (64b4 <processOnSMS+0x19b4>)
    6444:	4798      	blx	r3
    6446:	1e03      	subs	r3, r0, #0
    6448:	d100      	bne.n	644c <processOnSMS+0x194c>
    644a:	e255      	b.n	68f8 <processOnSMS+0x1df8>
		{
			incomingSMSProcessed=true;
    644c:	2328      	movs	r3, #40	; 0x28
    644e:	33ff      	adds	r3, #255	; 0xff
    6450:	2208      	movs	r2, #8
    6452:	4694      	mov	ip, r2
    6454:	44bc      	add	ip, r7
    6456:	4463      	add	r3, ip
    6458:	2201      	movs	r2, #1
    645a:	701a      	strb	r2, [r3, #0]
			strcpy(resep_msg,"S NO ADDDED");
    645c:	230c      	movs	r3, #12
    645e:	2208      	movs	r2, #8
    6460:	4694      	mov	ip, r2
    6462:	44bc      	add	ip, r7
    6464:	4463      	add	r3, ip
    6466:	4a14      	ldr	r2, [pc, #80]	; (64b8 <processOnSMS+0x19b8>)
    6468:	ca13      	ldmia	r2!, {r0, r1, r4}
    646a:	c313      	stmia	r3!, {r0, r1, r4}
    646c:	e244      	b.n	68f8 <processOnSMS+0x1df8>
    646e:	46c0      	nop			; (mov r8, r8)
    6470:	00019158 	.word	0x00019158
    6474:	00003db5 	.word	0x00003db5
    6478:	00017de7 	.word	0x00017de7
    647c:	00017b33 	.word	0x00017b33
    6480:	00017a3d 	.word	0x00017a3d
    6484:	000018f9 	.word	0x000018f9
    6488:	fffffeda 	.word	0xfffffeda
    648c:	00019164 	.word	0x00019164
    6490:	00017d5d 	.word	0x00017d5d
    6494:	0001917c 	.word	0x0001917c
    6498:	000012f5 	.word	0x000012f5
    649c:	00019188 	.word	0x00019188
    64a0:	000191a0 	.word	0x000191a0
    64a4:	000191a4 	.word	0x000191a4
    64a8:	00001ac5 	.word	0x00001ac5
    64ac:	000191a8 	.word	0x000191a8
    64b0:	000191b4 	.word	0x000191b4
    64b4:	00001b71 	.word	0x00001b71
    64b8:	000191b8 	.word	0x000191b8
		}
	}
	else if (StringstartsWith(received_command,"M+"))
    64bc:	4adb      	ldr	r2, [pc, #876]	; (682c <processOnSMS+0x1d2c>)
    64be:	68fb      	ldr	r3, [r7, #12]
    64c0:	0011      	movs	r1, r2
    64c2:	0018      	movs	r0, r3
    64c4:	4bda      	ldr	r3, [pc, #872]	; (6830 <processOnSMS+0x1d30>)
    64c6:	4798      	blx	r3
    64c8:	1e03      	subs	r3, r0, #0
    64ca:	d100      	bne.n	64ce <processOnSMS+0x19ce>
    64cc:	e091      	b.n	65f2 <processOnSMS+0x1af2>
	{
		memmove(received_command,received_command+2,strlen(received_command));
    64ce:	68fb      	ldr	r3, [r7, #12]
    64d0:	1c9c      	adds	r4, r3, #2
    64d2:	68fb      	ldr	r3, [r7, #12]
    64d4:	0018      	movs	r0, r3
    64d6:	4bd7      	ldr	r3, [pc, #860]	; (6834 <processOnSMS+0x1d34>)
    64d8:	4798      	blx	r3
    64da:	0002      	movs	r2, r0
    64dc:	68fb      	ldr	r3, [r7, #12]
    64de:	0021      	movs	r1, r4
    64e0:	0018      	movs	r0, r3
    64e2:	4bd5      	ldr	r3, [pc, #852]	; (6838 <processOnSMS+0x1d38>)
    64e4:	4798      	blx	r3
		bool result = addNumber(received_command);
    64e6:	230c      	movs	r3, #12
    64e8:	33ff      	adds	r3, #255	; 0xff
    64ea:	2208      	movs	r2, #8
    64ec:	18ba      	adds	r2, r7, r2
    64ee:	18d4      	adds	r4, r2, r3
    64f0:	68fb      	ldr	r3, [r7, #12]
    64f2:	0018      	movs	r0, r3
    64f4:	4bd1      	ldr	r3, [pc, #836]	; (683c <processOnSMS+0x1d3c>)
    64f6:	4798      	blx	r3
    64f8:	0003      	movs	r3, r0
    64fa:	7023      	strb	r3, [r4, #0]
		if(result)
    64fc:	230c      	movs	r3, #12
    64fe:	33ff      	adds	r3, #255	; 0xff
    6500:	2208      	movs	r2, #8
    6502:	4694      	mov	ip, r2
    6504:	44bc      	add	ip, r7
    6506:	4463      	add	r3, ip
    6508:	781b      	ldrb	r3, [r3, #0]
    650a:	2b00      	cmp	r3, #0
    650c:	d100      	bne.n	6510 <processOnSMS+0x1a10>
    650e:	e1f3      	b.n	68f8 <processOnSMS+0x1df8>
		{
			incomingSMSProcessed=true;
    6510:	2328      	movs	r3, #40	; 0x28
    6512:	33ff      	adds	r3, #255	; 0xff
    6514:	2208      	movs	r2, #8
    6516:	4694      	mov	ip, r2
    6518:	44bc      	add	ip, r7
    651a:	4463      	add	r3, ip
    651c:	2201      	movs	r2, #1
    651e:	701a      	strb	r2, [r3, #0]
			if (response_sms_processed_cmd == true)
    6520:	4bc7      	ldr	r3, [pc, #796]	; (6840 <processOnSMS+0x1d40>)
    6522:	2294      	movs	r2, #148	; 0x94
    6524:	0052      	lsls	r2, r2, #1
    6526:	4694      	mov	ip, r2
    6528:	2208      	movs	r2, #8
    652a:	4690      	mov	r8, r2
    652c:	44b8      	add	r8, r7
    652e:	44c4      	add	ip, r8
    6530:	4463      	add	r3, ip
    6532:	781b      	ldrb	r3, [r3, #0]
    6534:	2b00      	cmp	r3, #0
    6536:	d100      	bne.n	653a <processOnSMS+0x1a3a>
    6538:	e1de      	b.n	68f8 <processOnSMS+0x1df8>
			{
				strcpy(resep_msg,"MOBILE NO:");
    653a:	230c      	movs	r3, #12
    653c:	2208      	movs	r2, #8
    653e:	4694      	mov	ip, r2
    6540:	44bc      	add	ip, r7
    6542:	4463      	add	r3, ip
    6544:	4abf      	ldr	r2, [pc, #764]	; (6844 <processOnSMS+0x1d44>)
    6546:	ca03      	ldmia	r2!, {r0, r1}
    6548:	c303      	stmia	r3!, {r0, r1}
    654a:	8811      	ldrh	r1, [r2, #0]
    654c:	8019      	strh	r1, [r3, #0]
    654e:	7892      	ldrb	r2, [r2, #2]
    6550:	709a      	strb	r2, [r3, #2]
				strcat(resep_msg,"\n");
    6552:	230c      	movs	r3, #12
    6554:	2208      	movs	r2, #8
    6556:	4694      	mov	ip, r2
    6558:	44bc      	add	ip, r7
    655a:	4463      	add	r3, ip
    655c:	0018      	movs	r0, r3
    655e:	4bb5      	ldr	r3, [pc, #724]	; (6834 <processOnSMS+0x1d34>)
    6560:	4798      	blx	r3
    6562:	0003      	movs	r3, r0
    6564:	001a      	movs	r2, r3
    6566:	230c      	movs	r3, #12
    6568:	2108      	movs	r1, #8
    656a:	468c      	mov	ip, r1
    656c:	44bc      	add	ip, r7
    656e:	4463      	add	r3, ip
    6570:	189a      	adds	r2, r3, r2
    6572:	4bb5      	ldr	r3, [pc, #724]	; (6848 <processOnSMS+0x1d48>)
    6574:	0010      	movs	r0, r2
    6576:	0019      	movs	r1, r3
    6578:	2302      	movs	r3, #2
    657a:	001a      	movs	r2, r3
    657c:	4bb3      	ldr	r3, [pc, #716]	; (684c <processOnSMS+0x1d4c>)
    657e:	4798      	blx	r3
				strcat(resep_msg,received_command);
    6580:	68fa      	ldr	r2, [r7, #12]
    6582:	230c      	movs	r3, #12
    6584:	2108      	movs	r1, #8
    6586:	468c      	mov	ip, r1
    6588:	44bc      	add	ip, r7
    658a:	4463      	add	r3, ip
    658c:	0011      	movs	r1, r2
    658e:	0018      	movs	r0, r3
    6590:	4baf      	ldr	r3, [pc, #700]	; (6850 <processOnSMS+0x1d50>)
    6592:	4798      	blx	r3
				strcat(resep_msg,"\n");
    6594:	230c      	movs	r3, #12
    6596:	2208      	movs	r2, #8
    6598:	4694      	mov	ip, r2
    659a:	44bc      	add	ip, r7
    659c:	4463      	add	r3, ip
    659e:	0018      	movs	r0, r3
    65a0:	4ba4      	ldr	r3, [pc, #656]	; (6834 <processOnSMS+0x1d34>)
    65a2:	4798      	blx	r3
    65a4:	0003      	movs	r3, r0
    65a6:	001a      	movs	r2, r3
    65a8:	230c      	movs	r3, #12
    65aa:	2108      	movs	r1, #8
    65ac:	468c      	mov	ip, r1
    65ae:	44bc      	add	ip, r7
    65b0:	4463      	add	r3, ip
    65b2:	189a      	adds	r2, r3, r2
    65b4:	4ba4      	ldr	r3, [pc, #656]	; (6848 <processOnSMS+0x1d48>)
    65b6:	0010      	movs	r0, r2
    65b8:	0019      	movs	r1, r3
    65ba:	2302      	movs	r3, #2
    65bc:	001a      	movs	r2, r3
    65be:	4ba3      	ldr	r3, [pc, #652]	; (684c <processOnSMS+0x1d4c>)
    65c0:	4798      	blx	r3
				strcat(resep_msg,"ADDED SUCCESSFULLY");
    65c2:	230c      	movs	r3, #12
    65c4:	2208      	movs	r2, #8
    65c6:	4694      	mov	ip, r2
    65c8:	44bc      	add	ip, r7
    65ca:	4463      	add	r3, ip
    65cc:	0018      	movs	r0, r3
    65ce:	4b99      	ldr	r3, [pc, #612]	; (6834 <processOnSMS+0x1d34>)
    65d0:	4798      	blx	r3
    65d2:	0003      	movs	r3, r0
    65d4:	001a      	movs	r2, r3
    65d6:	230c      	movs	r3, #12
    65d8:	2108      	movs	r1, #8
    65da:	468c      	mov	ip, r1
    65dc:	44bc      	add	ip, r7
    65de:	4463      	add	r3, ip
    65e0:	189a      	adds	r2, r3, r2
    65e2:	4b9c      	ldr	r3, [pc, #624]	; (6854 <processOnSMS+0x1d54>)
    65e4:	0010      	movs	r0, r2
    65e6:	0019      	movs	r1, r3
    65e8:	2313      	movs	r3, #19
    65ea:	001a      	movs	r2, r3
    65ec:	4b97      	ldr	r3, [pc, #604]	; (684c <processOnSMS+0x1d4c>)
    65ee:	4798      	blx	r3
    65f0:	e182      	b.n	68f8 <processOnSMS+0x1df8>
			}
		}
	}
	else if (StringstartsWith(received_command,"M-"))
    65f2:	4a99      	ldr	r2, [pc, #612]	; (6858 <processOnSMS+0x1d58>)
    65f4:	68fb      	ldr	r3, [r7, #12]
    65f6:	0011      	movs	r1, r2
    65f8:	0018      	movs	r0, r3
    65fa:	4b8d      	ldr	r3, [pc, #564]	; (6830 <processOnSMS+0x1d30>)
    65fc:	4798      	blx	r3
    65fe:	1e03      	subs	r3, r0, #0
    6600:	d100      	bne.n	6604 <processOnSMS+0x1b04>
    6602:	e091      	b.n	6728 <processOnSMS+0x1c28>
	{
		memmove(received_command,received_command+2,strlen(received_command));
    6604:	68fb      	ldr	r3, [r7, #12]
    6606:	1c9c      	adds	r4, r3, #2
    6608:	68fb      	ldr	r3, [r7, #12]
    660a:	0018      	movs	r0, r3
    660c:	4b89      	ldr	r3, [pc, #548]	; (6834 <processOnSMS+0x1d34>)
    660e:	4798      	blx	r3
    6610:	0002      	movs	r2, r0
    6612:	68fb      	ldr	r3, [r7, #12]
    6614:	0021      	movs	r1, r4
    6616:	0018      	movs	r0, r3
    6618:	4b87      	ldr	r3, [pc, #540]	; (6838 <processOnSMS+0x1d38>)
    661a:	4798      	blx	r3
		bool result = removeNumber(received_command);
    661c:	2385      	movs	r3, #133	; 0x85
    661e:	005b      	lsls	r3, r3, #1
    6620:	2208      	movs	r2, #8
    6622:	18ba      	adds	r2, r7, r2
    6624:	18d4      	adds	r4, r2, r3
    6626:	68fb      	ldr	r3, [r7, #12]
    6628:	0018      	movs	r0, r3
    662a:	4b8c      	ldr	r3, [pc, #560]	; (685c <processOnSMS+0x1d5c>)
    662c:	4798      	blx	r3
    662e:	0003      	movs	r3, r0
    6630:	7023      	strb	r3, [r4, #0]
		if(result)
    6632:	2385      	movs	r3, #133	; 0x85
    6634:	005b      	lsls	r3, r3, #1
    6636:	2208      	movs	r2, #8
    6638:	4694      	mov	ip, r2
    663a:	44bc      	add	ip, r7
    663c:	4463      	add	r3, ip
    663e:	781b      	ldrb	r3, [r3, #0]
    6640:	2b00      	cmp	r3, #0
    6642:	d100      	bne.n	6646 <processOnSMS+0x1b46>
    6644:	e158      	b.n	68f8 <processOnSMS+0x1df8>
		{
			incomingSMSProcessed=true;
    6646:	2328      	movs	r3, #40	; 0x28
    6648:	33ff      	adds	r3, #255	; 0xff
    664a:	2208      	movs	r2, #8
    664c:	4694      	mov	ip, r2
    664e:	44bc      	add	ip, r7
    6650:	4463      	add	r3, ip
    6652:	2201      	movs	r2, #1
    6654:	701a      	strb	r2, [r3, #0]
			
			if (response_sms_processed_cmd == true)
    6656:	4b7a      	ldr	r3, [pc, #488]	; (6840 <processOnSMS+0x1d40>)
    6658:	2294      	movs	r2, #148	; 0x94
    665a:	0052      	lsls	r2, r2, #1
    665c:	4694      	mov	ip, r2
    665e:	2208      	movs	r2, #8
    6660:	4690      	mov	r8, r2
    6662:	44b8      	add	r8, r7
    6664:	44c4      	add	ip, r8
    6666:	4463      	add	r3, ip
    6668:	781b      	ldrb	r3, [r3, #0]
    666a:	2b00      	cmp	r3, #0
    666c:	d100      	bne.n	6670 <processOnSMS+0x1b70>
    666e:	e143      	b.n	68f8 <processOnSMS+0x1df8>
			{
				strcpy(resep_msg,"MOBILE NO:");
    6670:	230c      	movs	r3, #12
    6672:	2208      	movs	r2, #8
    6674:	4694      	mov	ip, r2
    6676:	44bc      	add	ip, r7
    6678:	4463      	add	r3, ip
    667a:	4a72      	ldr	r2, [pc, #456]	; (6844 <processOnSMS+0x1d44>)
    667c:	ca03      	ldmia	r2!, {r0, r1}
    667e:	c303      	stmia	r3!, {r0, r1}
    6680:	8811      	ldrh	r1, [r2, #0]
    6682:	8019      	strh	r1, [r3, #0]
    6684:	7892      	ldrb	r2, [r2, #2]
    6686:	709a      	strb	r2, [r3, #2]
				strcat(resep_msg,"\n");
    6688:	230c      	movs	r3, #12
    668a:	2208      	movs	r2, #8
    668c:	4694      	mov	ip, r2
    668e:	44bc      	add	ip, r7
    6690:	4463      	add	r3, ip
    6692:	0018      	movs	r0, r3
    6694:	4b67      	ldr	r3, [pc, #412]	; (6834 <processOnSMS+0x1d34>)
    6696:	4798      	blx	r3
    6698:	0003      	movs	r3, r0
    669a:	001a      	movs	r2, r3
    669c:	230c      	movs	r3, #12
    669e:	2108      	movs	r1, #8
    66a0:	468c      	mov	ip, r1
    66a2:	44bc      	add	ip, r7
    66a4:	4463      	add	r3, ip
    66a6:	189a      	adds	r2, r3, r2
    66a8:	4b67      	ldr	r3, [pc, #412]	; (6848 <processOnSMS+0x1d48>)
    66aa:	0010      	movs	r0, r2
    66ac:	0019      	movs	r1, r3
    66ae:	2302      	movs	r3, #2
    66b0:	001a      	movs	r2, r3
    66b2:	4b66      	ldr	r3, [pc, #408]	; (684c <processOnSMS+0x1d4c>)
    66b4:	4798      	blx	r3
				strcat(resep_msg,received_command);
    66b6:	68fa      	ldr	r2, [r7, #12]
    66b8:	230c      	movs	r3, #12
    66ba:	2108      	movs	r1, #8
    66bc:	468c      	mov	ip, r1
    66be:	44bc      	add	ip, r7
    66c0:	4463      	add	r3, ip
    66c2:	0011      	movs	r1, r2
    66c4:	0018      	movs	r0, r3
    66c6:	4b62      	ldr	r3, [pc, #392]	; (6850 <processOnSMS+0x1d50>)
    66c8:	4798      	blx	r3
				strcat(resep_msg,"\n");
    66ca:	230c      	movs	r3, #12
    66cc:	2208      	movs	r2, #8
    66ce:	4694      	mov	ip, r2
    66d0:	44bc      	add	ip, r7
    66d2:	4463      	add	r3, ip
    66d4:	0018      	movs	r0, r3
    66d6:	4b57      	ldr	r3, [pc, #348]	; (6834 <processOnSMS+0x1d34>)
    66d8:	4798      	blx	r3
    66da:	0003      	movs	r3, r0
    66dc:	001a      	movs	r2, r3
    66de:	230c      	movs	r3, #12
    66e0:	2108      	movs	r1, #8
    66e2:	468c      	mov	ip, r1
    66e4:	44bc      	add	ip, r7
    66e6:	4463      	add	r3, ip
    66e8:	189a      	adds	r2, r3, r2
    66ea:	4b57      	ldr	r3, [pc, #348]	; (6848 <processOnSMS+0x1d48>)
    66ec:	0010      	movs	r0, r2
    66ee:	0019      	movs	r1, r3
    66f0:	2302      	movs	r3, #2
    66f2:	001a      	movs	r2, r3
    66f4:	4b55      	ldr	r3, [pc, #340]	; (684c <processOnSMS+0x1d4c>)
    66f6:	4798      	blx	r3
				strcat(resep_msg,"REMOVED SUCCESSFULLY");
    66f8:	230c      	movs	r3, #12
    66fa:	2208      	movs	r2, #8
    66fc:	4694      	mov	ip, r2
    66fe:	44bc      	add	ip, r7
    6700:	4463      	add	r3, ip
    6702:	0018      	movs	r0, r3
    6704:	4b4b      	ldr	r3, [pc, #300]	; (6834 <processOnSMS+0x1d34>)
    6706:	4798      	blx	r3
    6708:	0003      	movs	r3, r0
    670a:	001a      	movs	r2, r3
    670c:	230c      	movs	r3, #12
    670e:	2108      	movs	r1, #8
    6710:	468c      	mov	ip, r1
    6712:	44bc      	add	ip, r7
    6714:	4463      	add	r3, ip
    6716:	189a      	adds	r2, r3, r2
    6718:	4b51      	ldr	r3, [pc, #324]	; (6860 <processOnSMS+0x1d60>)
    671a:	0010      	movs	r0, r2
    671c:	0019      	movs	r1, r3
    671e:	2315      	movs	r3, #21
    6720:	001a      	movs	r2, r3
    6722:	4b4a      	ldr	r3, [pc, #296]	; (684c <processOnSMS+0x1d4c>)
    6724:	4798      	blx	r3
    6726:	e0e7      	b.n	68f8 <processOnSMS+0x1df8>
			}
		}
	}
	else if (StringstartsWith(received_command,"AM+"))
    6728:	4a4e      	ldr	r2, [pc, #312]	; (6864 <processOnSMS+0x1d64>)
    672a:	68fb      	ldr	r3, [r7, #12]
    672c:	0011      	movs	r1, r2
    672e:	0018      	movs	r0, r3
    6730:	4b3f      	ldr	r3, [pc, #252]	; (6830 <processOnSMS+0x1d30>)
    6732:	4798      	blx	r3
    6734:	1e03      	subs	r3, r0, #0
    6736:	d042      	beq.n	67be <processOnSMS+0x1cbe>
	{
		//if (isNumeric(str))
		{
			memmove(received_command,received_command+3,strlen(received_command));
    6738:	68fb      	ldr	r3, [r7, #12]
    673a:	1cdc      	adds	r4, r3, #3
    673c:	68fb      	ldr	r3, [r7, #12]
    673e:	0018      	movs	r0, r3
    6740:	4b3c      	ldr	r3, [pc, #240]	; (6834 <processOnSMS+0x1d34>)
    6742:	4798      	blx	r3
    6744:	0002      	movs	r2, r0
    6746:	68fb      	ldr	r3, [r7, #12]
    6748:	0021      	movs	r1, r4
    674a:	0018      	movs	r0, r3
    674c:	4b3a      	ldr	r3, [pc, #232]	; (6838 <processOnSMS+0x1d38>)
    674e:	4798      	blx	r3
			bool result  = addAlternateNumber(received_command);
    6750:	230a      	movs	r3, #10
    6752:	33ff      	adds	r3, #255	; 0xff
    6754:	2208      	movs	r2, #8
    6756:	18ba      	adds	r2, r7, r2
    6758:	18d4      	adds	r4, r2, r3
    675a:	68fb      	ldr	r3, [r7, #12]
    675c:	0018      	movs	r0, r3
    675e:	4b42      	ldr	r3, [pc, #264]	; (6868 <processOnSMS+0x1d68>)
    6760:	4798      	blx	r3
    6762:	0003      	movs	r3, r0
    6764:	7023      	strb	r3, [r4, #0]
			incomingSMSProcessed=true;
    6766:	2328      	movs	r3, #40	; 0x28
    6768:	33ff      	adds	r3, #255	; 0xff
    676a:	2208      	movs	r2, #8
    676c:	4694      	mov	ip, r2
    676e:	44bc      	add	ip, r7
    6770:	4463      	add	r3, ip
    6772:	2201      	movs	r2, #1
    6774:	701a      	strb	r2, [r3, #0]
			if(result)
    6776:	230a      	movs	r3, #10
    6778:	33ff      	adds	r3, #255	; 0xff
    677a:	2208      	movs	r2, #8
    677c:	4694      	mov	ip, r2
    677e:	44bc      	add	ip, r7
    6780:	4463      	add	r3, ip
    6782:	781b      	ldrb	r3, [r3, #0]
    6784:	2b00      	cmp	r3, #0
    6786:	d100      	bne.n	678a <processOnSMS+0x1c8a>
    6788:	e0b6      	b.n	68f8 <processOnSMS+0x1df8>
			{
				if (response_sms_processed_cmd == true)
    678a:	4b2d      	ldr	r3, [pc, #180]	; (6840 <processOnSMS+0x1d40>)
    678c:	2294      	movs	r2, #148	; 0x94
    678e:	0052      	lsls	r2, r2, #1
    6790:	4694      	mov	ip, r2
    6792:	2208      	movs	r2, #8
    6794:	4690      	mov	r8, r2
    6796:	44b8      	add	r8, r7
    6798:	44c4      	add	ip, r8
    679a:	4463      	add	r3, ip
    679c:	781b      	ldrb	r3, [r3, #0]
    679e:	2b00      	cmp	r3, #0
    67a0:	d100      	bne.n	67a4 <processOnSMS+0x1ca4>
    67a2:	e0a9      	b.n	68f8 <processOnSMS+0x1df8>
				{
					strcpy(resep_msg,"ALTERNATE MOBILE NO ADD SUCCESS");
    67a4:	230c      	movs	r3, #12
    67a6:	2208      	movs	r2, #8
    67a8:	4694      	mov	ip, r2
    67aa:	44bc      	add	ip, r7
    67ac:	4463      	add	r3, ip
    67ae:	4a2f      	ldr	r2, [pc, #188]	; (686c <processOnSMS+0x1d6c>)
    67b0:	ca13      	ldmia	r2!, {r0, r1, r4}
    67b2:	c313      	stmia	r3!, {r0, r1, r4}
    67b4:	ca13      	ldmia	r2!, {r0, r1, r4}
    67b6:	c313      	stmia	r3!, {r0, r1, r4}
    67b8:	ca03      	ldmia	r2!, {r0, r1}
    67ba:	c303      	stmia	r3!, {r0, r1}
    67bc:	e09c      	b.n	68f8 <processOnSMS+0x1df8>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"MM+"))
    67be:	4a2c      	ldr	r2, [pc, #176]	; (6870 <processOnSMS+0x1d70>)
    67c0:	68fb      	ldr	r3, [r7, #12]
    67c2:	0011      	movs	r1, r2
    67c4:	0018      	movs	r0, r3
    67c6:	4b1a      	ldr	r3, [pc, #104]	; (6830 <processOnSMS+0x1d30>)
    67c8:	4798      	blx	r3
    67ca:	1e03      	subs	r3, r0, #0
    67cc:	d056      	beq.n	687c <processOnSMS+0x1d7c>
	{
		//if (isNumeric(str))
		{
			memmove(received_command,received_command+3,strlen(received_command));
    67ce:	68fb      	ldr	r3, [r7, #12]
    67d0:	1cdc      	adds	r4, r3, #3
    67d2:	68fb      	ldr	r3, [r7, #12]
    67d4:	0018      	movs	r0, r3
    67d6:	4b17      	ldr	r3, [pc, #92]	; (6834 <processOnSMS+0x1d34>)
    67d8:	4798      	blx	r3
    67da:	0002      	movs	r2, r0
    67dc:	68fb      	ldr	r3, [r7, #12]
    67de:	0021      	movs	r1, r4
    67e0:	0018      	movs	r0, r3
    67e2:	4b15      	ldr	r3, [pc, #84]	; (6838 <processOnSMS+0x1d38>)
    67e4:	4798      	blx	r3
			addM2MNumber(received_command);
    67e6:	68fb      	ldr	r3, [r7, #12]
    67e8:	0018      	movs	r0, r3
    67ea:	4b22      	ldr	r3, [pc, #136]	; (6874 <processOnSMS+0x1d74>)
    67ec:	4798      	blx	r3
			incomingSMSProcessed=true;
    67ee:	2328      	movs	r3, #40	; 0x28
    67f0:	33ff      	adds	r3, #255	; 0xff
    67f2:	2208      	movs	r2, #8
    67f4:	4694      	mov	ip, r2
    67f6:	44bc      	add	ip, r7
    67f8:	4463      	add	r3, ip
    67fa:	2201      	movs	r2, #1
    67fc:	701a      	strb	r2, [r3, #0]

			if (response_sms_processed_cmd == true)
    67fe:	4b10      	ldr	r3, [pc, #64]	; (6840 <processOnSMS+0x1d40>)
    6800:	2294      	movs	r2, #148	; 0x94
    6802:	0052      	lsls	r2, r2, #1
    6804:	4694      	mov	ip, r2
    6806:	2208      	movs	r2, #8
    6808:	4690      	mov	r8, r2
    680a:	44b8      	add	r8, r7
    680c:	44c4      	add	ip, r8
    680e:	4463      	add	r3, ip
    6810:	781b      	ldrb	r3, [r3, #0]
    6812:	2b00      	cmp	r3, #0
    6814:	d070      	beq.n	68f8 <processOnSMS+0x1df8>
			{
				strcpy(resep_msg,"M2M NO. ADDED");
    6816:	230c      	movs	r3, #12
    6818:	2208      	movs	r2, #8
    681a:	4694      	mov	ip, r2
    681c:	44bc      	add	ip, r7
    681e:	4463      	add	r3, ip
    6820:	4a15      	ldr	r2, [pc, #84]	; (6878 <processOnSMS+0x1d78>)
    6822:	ca13      	ldmia	r2!, {r0, r1, r4}
    6824:	c313      	stmia	r3!, {r0, r1, r4}
    6826:	8812      	ldrh	r2, [r2, #0]
    6828:	801a      	strh	r2, [r3, #0]
    682a:	e065      	b.n	68f8 <processOnSMS+0x1df8>
    682c:	000191c4 	.word	0x000191c4
    6830:	00003db5 	.word	0x00003db5
    6834:	00017de7 	.word	0x00017de7
    6838:	00017b33 	.word	0x00017b33
    683c:	00000ef1 	.word	0x00000ef1
    6840:	fffffeda 	.word	0xfffffeda
    6844:	000191c8 	.word	0x000191c8
    6848:	000191d4 	.word	0x000191d4
    684c:	00017b21 	.word	0x00017b21
    6850:	00017da1 	.word	0x00017da1
    6854:	000191d8 	.word	0x000191d8
    6858:	000191ec 	.word	0x000191ec
    685c:	00000fed 	.word	0x00000fed
    6860:	000191f0 	.word	0x000191f0
    6864:	00019208 	.word	0x00019208
    6868:	00001239 	.word	0x00001239
    686c:	0001920c 	.word	0x0001920c
    6870:	0001922c 	.word	0x0001922c
    6874:	00000c49 	.word	0x00000c49
    6878:	00019230 	.word	0x00019230
			}
		}
	}
	
	else if (StringstartsWith(received_command,"MR+"))
    687c:	4a44      	ldr	r2, [pc, #272]	; (6990 <processOnSMS+0x1e90>)
    687e:	68fb      	ldr	r3, [r7, #12]
    6880:	0011      	movs	r1, r2
    6882:	0018      	movs	r0, r3
    6884:	4b43      	ldr	r3, [pc, #268]	; (6994 <processOnSMS+0x1e94>)
    6886:	4798      	blx	r3
    6888:	1e03      	subs	r3, r0, #0
    688a:	d035      	beq.n	68f8 <processOnSMS+0x1df8>
	{
		//if (isNumeric(str))
		if(factory_settings_parameter_struct.ENABLE_M2M)
    688c:	4b42      	ldr	r3, [pc, #264]	; (6998 <processOnSMS+0x1e98>)
    688e:	78db      	ldrb	r3, [r3, #3]
    6890:	2b00      	cmp	r3, #0
    6892:	d031      	beq.n	68f8 <processOnSMS+0x1df8>
		{
			memmove(received_command,received_command+3,strlen(received_command));
    6894:	68fb      	ldr	r3, [r7, #12]
    6896:	1cdc      	adds	r4, r3, #3
    6898:	68fb      	ldr	r3, [r7, #12]
    689a:	0018      	movs	r0, r3
    689c:	4b3f      	ldr	r3, [pc, #252]	; (699c <processOnSMS+0x1e9c>)
    689e:	4798      	blx	r3
    68a0:	0002      	movs	r2, r0
    68a2:	68fb      	ldr	r3, [r7, #12]
    68a4:	0021      	movs	r1, r4
    68a6:	0018      	movs	r0, r3
    68a8:	4b3d      	ldr	r3, [pc, #244]	; (69a0 <processOnSMS+0x1ea0>)
    68aa:	4798      	blx	r3
			incomingSMSProcessed=true;
    68ac:	2328      	movs	r3, #40	; 0x28
    68ae:	33ff      	adds	r3, #255	; 0xff
    68b0:	2208      	movs	r2, #8
    68b2:	4694      	mov	ip, r2
    68b4:	44bc      	add	ip, r7
    68b6:	4463      	add	r3, ip
    68b8:	2201      	movs	r2, #1
    68ba:	701a      	strb	r2, [r3, #0]
			
			addM2MRemoteNumber(received_command);
    68bc:	68fb      	ldr	r3, [r7, #12]
    68be:	0018      	movs	r0, r3
    68c0:	4b38      	ldr	r3, [pc, #224]	; (69a4 <processOnSMS+0x1ea4>)
    68c2:	4798      	blx	r3
			if (response_sms_processed_cmd == true)
    68c4:	4b38      	ldr	r3, [pc, #224]	; (69a8 <processOnSMS+0x1ea8>)
    68c6:	2294      	movs	r2, #148	; 0x94
    68c8:	0052      	lsls	r2, r2, #1
    68ca:	4694      	mov	ip, r2
    68cc:	2208      	movs	r2, #8
    68ce:	4690      	mov	r8, r2
    68d0:	44b8      	add	r8, r7
    68d2:	44c4      	add	ip, r8
    68d4:	4463      	add	r3, ip
    68d6:	781b      	ldrb	r3, [r3, #0]
    68d8:	2b00      	cmp	r3, #0
    68da:	d00d      	beq.n	68f8 <processOnSMS+0x1df8>
			{
				strcpy(resep_msg,"M2M REMOTE NO. ADDED");
    68dc:	230c      	movs	r3, #12
    68de:	2208      	movs	r2, #8
    68e0:	4694      	mov	ip, r2
    68e2:	44bc      	add	ip, r7
    68e4:	4463      	add	r3, ip
    68e6:	4a31      	ldr	r2, [pc, #196]	; (69ac <processOnSMS+0x1eac>)
    68e8:	ca13      	ldmia	r2!, {r0, r1, r4}
    68ea:	c313      	stmia	r3!, {r0, r1, r4}
    68ec:	ca03      	ldmia	r2!, {r0, r1}
    68ee:	c303      	stmia	r3!, {r0, r1}
    68f0:	7812      	ldrb	r2, [r2, #0]
    68f2:	701a      	strb	r2, [r3, #0]
    68f4:	e000      	b.n	68f8 <processOnSMS+0x1df8>
		if (alternateNumber_struct.alterNumberPresent)
    68f6:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	
	if (response_sms_processed_cmd == true)
    68f8:	4b2b      	ldr	r3, [pc, #172]	; (69a8 <processOnSMS+0x1ea8>)
    68fa:	2294      	movs	r2, #148	; 0x94
    68fc:	0052      	lsls	r2, r2, #1
    68fe:	4694      	mov	ip, r2
    6900:	2208      	movs	r2, #8
    6902:	4690      	mov	r8, r2
    6904:	44b8      	add	r8, r7
    6906:	44c4      	add	ip, r8
    6908:	4463      	add	r3, ip
    690a:	781b      	ldrb	r3, [r3, #0]
    690c:	2b00      	cmp	r3, #0
    690e:	d03a      	beq.n	6986 <processOnSMS+0x1e86>
	{
		if(!incomingSMSProcessed)
    6910:	2328      	movs	r3, #40	; 0x28
    6912:	33ff      	adds	r3, #255	; 0xff
    6914:	2208      	movs	r2, #8
    6916:	4694      	mov	ip, r2
    6918:	44bc      	add	ip, r7
    691a:	4463      	add	r3, ip
    691c:	781b      	ldrb	r3, [r3, #0]
    691e:	2201      	movs	r2, #1
    6920:	4053      	eors	r3, r2
    6922:	b2db      	uxtb	r3, r3
    6924:	2b00      	cmp	r3, #0
    6926:	d011      	beq.n	694c <processOnSMS+0x1e4c>
		{
			sprintf(resep_msg,"ERROR : %s",*copy_received_command);
    6928:	238c      	movs	r3, #140	; 0x8c
    692a:	005b      	lsls	r3, r3, #1
    692c:	2208      	movs	r2, #8
    692e:	4694      	mov	ip, r2
    6930:	44bc      	add	ip, r7
    6932:	4463      	add	r3, ip
    6934:	681b      	ldr	r3, [r3, #0]
    6936:	781b      	ldrb	r3, [r3, #0]
    6938:	001a      	movs	r2, r3
    693a:	491d      	ldr	r1, [pc, #116]	; (69b0 <processOnSMS+0x1eb0>)
    693c:	230c      	movs	r3, #12
    693e:	2008      	movs	r0, #8
    6940:	4684      	mov	ip, r0
    6942:	44bc      	add	ip, r7
    6944:	4463      	add	r3, ip
    6946:	0018      	movs	r0, r3
    6948:	4b1a      	ldr	r3, [pc, #104]	; (69b4 <processOnSMS+0x1eb4>)
    694a:	4798      	blx	r3
		}
		setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
    694c:	23a0      	movs	r3, #160	; 0xa0
    694e:	005b      	lsls	r3, r3, #1
    6950:	2208      	movs	r2, #8
    6952:	4694      	mov	ip, r2
    6954:	44bc      	add	ip, r7
    6956:	4463      	add	r3, ip
    6958:	681b      	ldr	r3, [r3, #0]
    695a:	2200      	movs	r2, #0
    695c:	0019      	movs	r1, r3
    695e:	2005      	movs	r0, #5
    6960:	4b15      	ldr	r3, [pc, #84]	; (69b8 <processOnSMS+0x1eb8>)
    6962:	4798      	blx	r3
		gsm_send_sms(phone_number,resep_msg);
    6964:	230c      	movs	r3, #12
    6966:	2208      	movs	r2, #8
    6968:	18ba      	adds	r2, r7, r2
    696a:	18d2      	adds	r2, r2, r3
    696c:	23a0      	movs	r3, #160	; 0xa0
    696e:	005b      	lsls	r3, r3, #1
    6970:	2108      	movs	r1, #8
    6972:	468c      	mov	ip, r1
    6974:	44bc      	add	ip, r7
    6976:	4463      	add	r3, ip
    6978:	681b      	ldr	r3, [r3, #0]
    697a:	0011      	movs	r1, r2
    697c:	0018      	movs	r0, r3
    697e:	4b0f      	ldr	r3, [pc, #60]	; (69bc <processOnSMS+0x1ebc>)
    6980:	4798      	blx	r3
    6982:	e000      	b.n	6986 <processOnSMS+0x1e86>
		return;
    6984:	46c0      	nop			; (mov r8, r8)
	}
}
    6986:	46bd      	mov	sp, r7
    6988:	b04c      	add	sp, #304	; 0x130
    698a:	bc04      	pop	{r2}
    698c:	4690      	mov	r8, r2
    698e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6990:	00019240 	.word	0x00019240
    6994:	00003db5 	.word	0x00003db5
    6998:	20000618 	.word	0x20000618
    699c:	00017de7 	.word	0x00017de7
    69a0:	00017b33 	.word	0x00017b33
    69a4:	00000cb1 	.word	0x00000cb1
    69a8:	fffffeda 	.word	0xfffffeda
    69ac:	00019244 	.word	0x00019244
    69b0:	0001925c 	.word	0x0001925c
    69b4:	00017d5d 	.word	0x00017d5d
    69b8:	0000bbdd 	.word	0x0000bbdd
    69bc:	000028b5 	.word	0x000028b5

000069c0 <buildStatusMessage>:

void buildStatusMessage(char *resep_msg)
{
    69c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    69c2:	b091      	sub	sp, #68	; 0x44
    69c4:	af06      	add	r7, sp, #24
    69c6:	6078      	str	r0, [r7, #4]
	uint8_t network= gsm_getsignalstrength();
    69c8:	2327      	movs	r3, #39	; 0x27
    69ca:	18fc      	adds	r4, r7, r3
    69cc:	4b32      	ldr	r3, [pc, #200]	; (6a98 <buildStatusMessage+0xd8>)
    69ce:	4798      	blx	r3
    69d0:	0003      	movs	r3, r0
    69d2:	7023      	strb	r3, [r4, #0]
	char strACState[10],strSeq[7],strMotor[5];
	switch(structThreePhase_state.u8t_phase_ac_state)
    69d4:	4b31      	ldr	r3, [pc, #196]	; (6a9c <buildStatusMessage+0xdc>)
    69d6:	785b      	ldrb	r3, [r3, #1]
    69d8:	b2db      	uxtb	r3, r3
    69da:	2b02      	cmp	r3, #2
    69dc:	d009      	beq.n	69f2 <buildStatusMessage+0x32>
    69de:	2b03      	cmp	r3, #3
    69e0:	d10d      	bne.n	69fe <buildStatusMessage+0x3e>
	{
		case AC_3PH:
		sprintf(strACState,(const uint8_t*)("ON"));
    69e2:	231c      	movs	r3, #28
    69e4:	18fb      	adds	r3, r7, r3
    69e6:	4a2e      	ldr	r2, [pc, #184]	; (6aa0 <buildStatusMessage+0xe0>)
    69e8:	8811      	ldrh	r1, [r2, #0]
    69ea:	8019      	strh	r1, [r3, #0]
    69ec:	7892      	ldrb	r2, [r2, #2]
    69ee:	709a      	strb	r2, [r3, #2]
		break;
    69f0:	e00a      	b.n	6a08 <buildStatusMessage+0x48>
		case AC_2PH:
		sprintf(strACState,(const uint8_t*)("2 PHASE"));
    69f2:	231c      	movs	r3, #28
    69f4:	18fb      	adds	r3, r7, r3
    69f6:	4a2b      	ldr	r2, [pc, #172]	; (6aa4 <buildStatusMessage+0xe4>)
    69f8:	ca03      	ldmia	r2!, {r0, r1}
    69fa:	c303      	stmia	r3!, {r0, r1}
		break;
    69fc:	e004      	b.n	6a08 <buildStatusMessage+0x48>
		default:
		sprintf(strACState,(const uint8_t*)("OFF"));
    69fe:	231c      	movs	r3, #28
    6a00:	18fb      	adds	r3, r7, r3
    6a02:	4a29      	ldr	r2, [pc, #164]	; (6aa8 <buildStatusMessage+0xe8>)
    6a04:	601a      	str	r2, [r3, #0]
		break;
    6a06:	46c0      	nop			; (mov r8, r8)
	}
	
	if(structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
    6a08:	4b24      	ldr	r3, [pc, #144]	; (6a9c <buildStatusMessage+0xdc>)
    6a0a:	781b      	ldrb	r3, [r3, #0]
    6a0c:	b2db      	uxtb	r3, r3
    6a0e:	2b02      	cmp	r3, #2
    6a10:	d107      	bne.n	6a22 <buildStatusMessage+0x62>
	{
		sprintf(strSeq,(const uint8_t*)("OK"));
    6a12:	2314      	movs	r3, #20
    6a14:	18fb      	adds	r3, r7, r3
    6a16:	4a25      	ldr	r2, [pc, #148]	; (6aac <buildStatusMessage+0xec>)
    6a18:	8811      	ldrh	r1, [r2, #0]
    6a1a:	8019      	strh	r1, [r3, #0]
    6a1c:	7892      	ldrb	r2, [r2, #2]
    6a1e:	709a      	strb	r2, [r3, #2]
    6a20:	e006      	b.n	6a30 <buildStatusMessage+0x70>
	}
	else
	{
		sprintf(strSeq,(const uint8_t*)("ERROR"));
    6a22:	2314      	movs	r3, #20
    6a24:	18fb      	adds	r3, r7, r3
    6a26:	4a22      	ldr	r2, [pc, #136]	; (6ab0 <buildStatusMessage+0xf0>)
    6a28:	6811      	ldr	r1, [r2, #0]
    6a2a:	6019      	str	r1, [r3, #0]
    6a2c:	8892      	ldrh	r2, [r2, #4]
    6a2e:	809a      	strh	r2, [r3, #4]
	}
	
	if(getMotorState())
    6a30:	4b20      	ldr	r3, [pc, #128]	; (6ab4 <buildStatusMessage+0xf4>)
    6a32:	4798      	blx	r3
    6a34:	1e03      	subs	r3, r0, #0
    6a36:	d007      	beq.n	6a48 <buildStatusMessage+0x88>
	{
		sprintf(strMotor,(const uint8_t*)("ON"));
    6a38:	230c      	movs	r3, #12
    6a3a:	18fb      	adds	r3, r7, r3
    6a3c:	4a18      	ldr	r2, [pc, #96]	; (6aa0 <buildStatusMessage+0xe0>)
    6a3e:	8811      	ldrh	r1, [r2, #0]
    6a40:	8019      	strh	r1, [r3, #0]
    6a42:	7892      	ldrb	r2, [r2, #2]
    6a44:	709a      	strb	r2, [r3, #2]
    6a46:	e003      	b.n	6a50 <buildStatusMessage+0x90>
	}
	else
	{
		sprintf(strMotor,(const uint8_t*)("OFF"));
    6a48:	230c      	movs	r3, #12
    6a4a:	18fb      	adds	r3, r7, r3
    6a4c:	4a16      	ldr	r2, [pc, #88]	; (6aa8 <buildStatusMessage+0xe8>)
    6a4e:	601a      	str	r2, [r3, #0]
	}
	
	sprintf(resep_msg,"RY: %d YB: %d BR: %d\nAC: %s\nSequence: %s\nMotor: %s\nCurrent: %dA\nNetwork: %d",
    6a50:	4b19      	ldr	r3, [pc, #100]	; (6ab8 <buildStatusMessage+0xf8>)
    6a52:	681c      	ldr	r4, [r3, #0]
    6a54:	4b18      	ldr	r3, [pc, #96]	; (6ab8 <buildStatusMessage+0xf8>)
    6a56:	685d      	ldr	r5, [r3, #4]
    6a58:	4b17      	ldr	r3, [pc, #92]	; (6ab8 <buildStatusMessage+0xf8>)
    6a5a:	689b      	ldr	r3, [r3, #8]
	Analog_Parameter_Struct.PhaseRY_Voltage,Analog_Parameter_Struct.PhaseYB_Voltage,Analog_Parameter_Struct.PhaseBR_Voltage,
	strACState,strSeq,strMotor,Analog_Parameter_Struct.Motor_Current_IntPart,network);
    6a5c:	4a16      	ldr	r2, [pc, #88]	; (6ab8 <buildStatusMessage+0xf8>)
    6a5e:	8a92      	ldrh	r2, [r2, #20]
    6a60:	b292      	uxth	r2, r2
	sprintf(resep_msg,"RY: %d YB: %d BR: %d\nAC: %s\nSequence: %s\nMotor: %s\nCurrent: %dA\nNetwork: %d",
    6a62:	0016      	movs	r6, r2
    6a64:	2227      	movs	r2, #39	; 0x27
    6a66:	18ba      	adds	r2, r7, r2
    6a68:	7812      	ldrb	r2, [r2, #0]
    6a6a:	4914      	ldr	r1, [pc, #80]	; (6abc <buildStatusMessage+0xfc>)
    6a6c:	6878      	ldr	r0, [r7, #4]
    6a6e:	9205      	str	r2, [sp, #20]
    6a70:	9604      	str	r6, [sp, #16]
    6a72:	220c      	movs	r2, #12
    6a74:	18ba      	adds	r2, r7, r2
    6a76:	9203      	str	r2, [sp, #12]
    6a78:	2214      	movs	r2, #20
    6a7a:	18ba      	adds	r2, r7, r2
    6a7c:	9202      	str	r2, [sp, #8]
    6a7e:	221c      	movs	r2, #28
    6a80:	18ba      	adds	r2, r7, r2
    6a82:	9201      	str	r2, [sp, #4]
    6a84:	9300      	str	r3, [sp, #0]
    6a86:	002b      	movs	r3, r5
    6a88:	0022      	movs	r2, r4
    6a8a:	4c0d      	ldr	r4, [pc, #52]	; (6ac0 <buildStatusMessage+0x100>)
    6a8c:	47a0      	blx	r4
}
    6a8e:	46c0      	nop			; (mov r8, r8)
    6a90:	46bd      	mov	sp, r7
    6a92:	b00b      	add	sp, #44	; 0x2c
    6a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a96:	46c0      	nop			; (mov r8, r8)
    6a98:	0000266d 	.word	0x0000266d
    6a9c:	20000710 	.word	0x20000710
    6aa0:	00019268 	.word	0x00019268
    6aa4:	0001926c 	.word	0x0001926c
    6aa8:	0046464f 	.word	0x0046464f
    6aac:	00019274 	.word	0x00019274
    6ab0:	00019278 	.word	0x00019278
    6ab4:	00009e1d 	.word	0x00009e1d
    6ab8:	200006cc 	.word	0x200006cc
    6abc:	00019280 	.word	0x00019280
    6ac0:	00017d5d 	.word	0x00017d5d

00006ac4 <checkNumber>:


bool checkNumber(char *number)
{
    6ac4:	b580      	push	{r7, lr}
    6ac6:	b082      	sub	sp, #8
    6ac8:	af00      	add	r7, sp, #0
    6aca:	6078      	str	r0, [r7, #4]
	if ((isAdmin(number)) || (checkExists(number)<user_count_struct.total_user_no_count))
    6acc:	687b      	ldr	r3, [r7, #4]
    6ace:	0018      	movs	r0, r3
    6ad0:	4b0a      	ldr	r3, [pc, #40]	; (6afc <checkNumber+0x38>)
    6ad2:	4798      	blx	r3
    6ad4:	1e03      	subs	r3, r0, #0
    6ad6:	d109      	bne.n	6aec <checkNumber+0x28>
    6ad8:	687b      	ldr	r3, [r7, #4]
    6ada:	0018      	movs	r0, r3
    6adc:	4b08      	ldr	r3, [pc, #32]	; (6b00 <checkNumber+0x3c>)
    6ade:	4798      	blx	r3
    6ae0:	0003      	movs	r3, r0
    6ae2:	001a      	movs	r2, r3
    6ae4:	4b07      	ldr	r3, [pc, #28]	; (6b04 <checkNumber+0x40>)
    6ae6:	785b      	ldrb	r3, [r3, #1]
    6ae8:	429a      	cmp	r2, r3
    6aea:	d201      	bcs.n	6af0 <checkNumber+0x2c>
	{
		return true;
    6aec:	2301      	movs	r3, #1
    6aee:	e000      	b.n	6af2 <checkNumber+0x2e>
	}
	else
	{
		return false;
    6af0:	2300      	movs	r3, #0
	}
}
    6af2:	0018      	movs	r0, r3
    6af4:	46bd      	mov	sp, r7
    6af6:	b002      	add	sp, #8
    6af8:	bd80      	pop	{r7, pc}
    6afa:	46c0      	nop			; (mov r8, r8)
    6afc:	00001991 	.word	0x00001991
    6b00:	00000ded 	.word	0x00000ded
    6b04:	20000600 	.word	0x20000600

00006b08 <checkNoCallTime>:

bool checkNoCallTime(void)
{
    6b08:	b580      	push	{r7, lr}
    6b0a:	b082      	sub	sp, #8
    6b0c:	af00      	add	r7, sp, #0
	uint8_t globalHours, globalMinutes;
	getSystemTime(&globalHours,&globalMinutes);
    6b0e:	1dba      	adds	r2, r7, #6
    6b10:	1dfb      	adds	r3, r7, #7
    6b12:	0011      	movs	r1, r2
    6b14:	0018      	movs	r0, r3
    6b16:	4b2b      	ldr	r3, [pc, #172]	; (6bc4 <checkNoCallTime+0xbc>)
    6b18:	4798      	blx	r3
	if(globalHours >= (user_settings_parameter_struct.noCallStartTimeHourAddress) && globalHours <=(user_settings_parameter_struct.noCallStopTimeHourAddress))
    6b1a:	4b2b      	ldr	r3, [pc, #172]	; (6bc8 <checkNoCallTime+0xc0>)
    6b1c:	7a9a      	ldrb	r2, [r3, #10]
    6b1e:	1dfb      	adds	r3, r7, #7
    6b20:	781b      	ldrb	r3, [r3, #0]
    6b22:	429a      	cmp	r2, r3
    6b24:	d849      	bhi.n	6bba <checkNoCallTime+0xb2>
    6b26:	4b28      	ldr	r3, [pc, #160]	; (6bc8 <checkNoCallTime+0xc0>)
    6b28:	7b1a      	ldrb	r2, [r3, #12]
    6b2a:	1dfb      	adds	r3, r7, #7
    6b2c:	781b      	ldrb	r3, [r3, #0]
    6b2e:	429a      	cmp	r2, r3
    6b30:	d343      	bcc.n	6bba <checkNoCallTime+0xb2>
	{
		if(user_settings_parameter_struct.noCallStartTimeHourAddress==user_settings_parameter_struct.noCallStopTimeHourAddress)
    6b32:	4b25      	ldr	r3, [pc, #148]	; (6bc8 <checkNoCallTime+0xc0>)
    6b34:	7a9a      	ldrb	r2, [r3, #10]
    6b36:	4b24      	ldr	r3, [pc, #144]	; (6bc8 <checkNoCallTime+0xc0>)
    6b38:	7b1b      	ldrb	r3, [r3, #12]
    6b3a:	429a      	cmp	r2, r3
    6b3c:	d10f      	bne.n	6b5e <checkNoCallTime+0x56>
		{
			if(globalMinutes>=(user_settings_parameter_struct.noCallStartTimeMinuteAddress) && globalMinutes<=(user_settings_parameter_struct.noCallStopTimeMinuteAddress))
    6b3e:	4b22      	ldr	r3, [pc, #136]	; (6bc8 <checkNoCallTime+0xc0>)
    6b40:	7ada      	ldrb	r2, [r3, #11]
    6b42:	1dbb      	adds	r3, r7, #6
    6b44:	781b      	ldrb	r3, [r3, #0]
    6b46:	429a      	cmp	r2, r3
    6b48:	d807      	bhi.n	6b5a <checkNoCallTime+0x52>
    6b4a:	4b1f      	ldr	r3, [pc, #124]	; (6bc8 <checkNoCallTime+0xc0>)
    6b4c:	7b5a      	ldrb	r2, [r3, #13]
    6b4e:	1dbb      	adds	r3, r7, #6
    6b50:	781b      	ldrb	r3, [r3, #0]
    6b52:	429a      	cmp	r2, r3
    6b54:	d301      	bcc.n	6b5a <checkNoCallTime+0x52>
			return true;
    6b56:	2301      	movs	r3, #1
    6b58:	e030      	b.n	6bbc <checkNoCallTime+0xb4>
			else
			return false;
    6b5a:	2300      	movs	r3, #0
    6b5c:	e02e      	b.n	6bbc <checkNoCallTime+0xb4>
		}
		if(globalHours==user_settings_parameter_struct.noCallStartTimeHourAddress)
    6b5e:	4b1a      	ldr	r3, [pc, #104]	; (6bc8 <checkNoCallTime+0xc0>)
    6b60:	7a9a      	ldrb	r2, [r3, #10]
    6b62:	1dfb      	adds	r3, r7, #7
    6b64:	781b      	ldrb	r3, [r3, #0]
    6b66:	429a      	cmp	r2, r3
    6b68:	d109      	bne.n	6b7e <checkNoCallTime+0x76>
		{
			if(globalMinutes>=user_settings_parameter_struct.noCallStartTimeMinuteAddress)
    6b6a:	4b17      	ldr	r3, [pc, #92]	; (6bc8 <checkNoCallTime+0xc0>)
    6b6c:	7ada      	ldrb	r2, [r3, #11]
    6b6e:	1dbb      	adds	r3, r7, #6
    6b70:	781b      	ldrb	r3, [r3, #0]
    6b72:	429a      	cmp	r2, r3
    6b74:	d801      	bhi.n	6b7a <checkNoCallTime+0x72>
			return true;
    6b76:	2301      	movs	r3, #1
    6b78:	e020      	b.n	6bbc <checkNoCallTime+0xb4>
			else
			return false;
    6b7a:	2300      	movs	r3, #0
    6b7c:	e01e      	b.n	6bbc <checkNoCallTime+0xb4>
		}
		if(globalHours==user_settings_parameter_struct.noCallStopTimeHourAddress)
    6b7e:	4b12      	ldr	r3, [pc, #72]	; (6bc8 <checkNoCallTime+0xc0>)
    6b80:	7b1a      	ldrb	r2, [r3, #12]
    6b82:	1dfb      	adds	r3, r7, #7
    6b84:	781b      	ldrb	r3, [r3, #0]
    6b86:	429a      	cmp	r2, r3
    6b88:	d109      	bne.n	6b9e <checkNoCallTime+0x96>
		{
			if(globalMinutes<=(user_settings_parameter_struct.noCallStopTimeMinuteAddress))
    6b8a:	4b0f      	ldr	r3, [pc, #60]	; (6bc8 <checkNoCallTime+0xc0>)
    6b8c:	7b5a      	ldrb	r2, [r3, #13]
    6b8e:	1dbb      	adds	r3, r7, #6
    6b90:	781b      	ldrb	r3, [r3, #0]
    6b92:	429a      	cmp	r2, r3
    6b94:	d301      	bcc.n	6b9a <checkNoCallTime+0x92>
			return true;
    6b96:	2301      	movs	r3, #1
    6b98:	e010      	b.n	6bbc <checkNoCallTime+0xb4>
			else
			return false;
    6b9a:	2300      	movs	r3, #0
    6b9c:	e00e      	b.n	6bbc <checkNoCallTime+0xb4>
		}
		if(globalHours > (user_settings_parameter_struct.noCallStartTimeHourAddress) && globalHours < (user_settings_parameter_struct.noCallStopTimeHourAddress))
    6b9e:	4b0a      	ldr	r3, [pc, #40]	; (6bc8 <checkNoCallTime+0xc0>)
    6ba0:	7a9a      	ldrb	r2, [r3, #10]
    6ba2:	1dfb      	adds	r3, r7, #7
    6ba4:	781b      	ldrb	r3, [r3, #0]
    6ba6:	429a      	cmp	r2, r3
    6ba8:	d207      	bcs.n	6bba <checkNoCallTime+0xb2>
    6baa:	4b07      	ldr	r3, [pc, #28]	; (6bc8 <checkNoCallTime+0xc0>)
    6bac:	7b1a      	ldrb	r2, [r3, #12]
    6bae:	1dfb      	adds	r3, r7, #7
    6bb0:	781b      	ldrb	r3, [r3, #0]
    6bb2:	429a      	cmp	r2, r3
    6bb4:	d901      	bls.n	6bba <checkNoCallTime+0xb2>
		return true;
    6bb6:	2301      	movs	r3, #1
    6bb8:	e000      	b.n	6bbc <checkNoCallTime+0xb4>
	}
	return false;
    6bba:	2300      	movs	r3, #0
}
    6bbc:	0018      	movs	r0, r3
    6bbe:	46bd      	mov	sp, r7
    6bc0:	b002      	add	sp, #8
    6bc2:	bd80      	pop	{r7, pc}
    6bc4:	00006e05 	.word	0x00006e05
    6bc8:	2000064c 	.word	0x2000064c

00006bcc <verifyRemoteNumber>:

void verifyRemoteNumber(void)
{
    6bcc:	b580      	push	{r7, lr}
    6bce:	af00      	add	r7, sp, #0
	sendSMS(("VMM01"),true,SEND_TO_M2M_REMOTE);
    6bd0:	4b04      	ldr	r3, [pc, #16]	; (6be4 <verifyRemoteNumber+0x18>)
    6bd2:	2201      	movs	r2, #1
    6bd4:	2101      	movs	r1, #1
    6bd6:	0018      	movs	r0, r3
    6bd8:	4b03      	ldr	r3, [pc, #12]	; (6be8 <verifyRemoteNumber+0x1c>)
    6bda:	4798      	blx	r3
}
    6bdc:	46c0      	nop			; (mov r8, r8)
    6bde:	46bd      	mov	sp, r7
    6be0:	bd80      	pop	{r7, pc}
    6be2:	46c0      	nop			; (mov r8, r8)
    6be4:	000192cc 	.word	0x000192cc
    6be8:	00006bed 	.word	0x00006bed

00006bec <sendSMS>:

void sendSMS(char *msg, bool predefMsg, uint8_t isM2M)  ////void sendSMS(char *msg, bool predefMsg = false, uint8_t isM2M);
{
    6bec:	b580      	push	{r7, lr}
    6bee:	b08e      	sub	sp, #56	; 0x38
    6bf0:	af00      	add	r7, sp, #0
    6bf2:	6078      	str	r0, [r7, #4]
    6bf4:	0008      	movs	r0, r1
    6bf6:	0011      	movs	r1, r2
    6bf8:	1cfb      	adds	r3, r7, #3
    6bfa:	1c02      	adds	r2, r0, #0
    6bfc:	701a      	strb	r2, [r3, #0]
    6bfe:	1cbb      	adds	r3, r7, #2
    6c00:	1c0a      	adds	r2, r1, #0
    6c02:	701a      	strb	r2, [r3, #0]
	inCall=true;
    6c04:	4b55      	ldr	r3, [pc, #340]	; (6d5c <sendSMS+0x170>)
    6c06:	2201      	movs	r2, #1
    6c08:	701a      	strb	r2, [r3, #0]
	if (!predefMsg)
    6c0a:	1cfb      	adds	r3, r7, #3
    6c0c:	781b      	ldrb	r3, [r3, #0]
    6c0e:	2201      	movs	r2, #1
    6c10:	4053      	eors	r3, r2
    6c12:	b2db      	uxtb	r3, r3
    6c14:	2b00      	cmp	r3, #0
    6c16:	d048      	beq.n	6caa <sendSMS+0xbe>
	{
		switch(actionType)
    6c18:	4b51      	ldr	r3, [pc, #324]	; (6d60 <sendSMS+0x174>)
    6c1a:	781b      	ldrb	r3, [r3, #0]
    6c1c:	3b43      	subs	r3, #67	; 0x43
    6c1e:	2b12      	cmp	r3, #18
    6c20:	d900      	bls.n	6c24 <sendSMS+0x38>
    6c22:	e096      	b.n	6d52 <sendSMS+0x166>
    6c24:	009a      	lsls	r2, r3, #2
    6c26:	4b4f      	ldr	r3, [pc, #316]	; (6d64 <sendSMS+0x178>)
    6c28:	18d3      	adds	r3, r2, r3
    6c2a:	681b      	ldr	r3, [r3, #0]
    6c2c:	469f      	mov	pc, r3
		{
			case 'S':
			strcat(msg,STR_MOTOR);
    6c2e:	687b      	ldr	r3, [r7, #4]
    6c30:	0018      	movs	r0, r3
    6c32:	4b4d      	ldr	r3, [pc, #308]	; (6d68 <sendSMS+0x17c>)
    6c34:	4798      	blx	r3
    6c36:	0003      	movs	r3, r0
    6c38:	001a      	movs	r2, r3
    6c3a:	687b      	ldr	r3, [r7, #4]
    6c3c:	189a      	adds	r2, r3, r2
    6c3e:	4b4b      	ldr	r3, [pc, #300]	; (6d6c <sendSMS+0x180>)
    6c40:	0010      	movs	r0, r2
    6c42:	0019      	movs	r1, r3
    6c44:	2307      	movs	r3, #7
    6c46:	001a      	movs	r2, r3
    6c48:	4b49      	ldr	r3, [pc, #292]	; (6d70 <sendSMS+0x184>)
    6c4a:	4798      	blx	r3
			strcat(msg,STR_ON);
    6c4c:	687b      	ldr	r3, [r7, #4]
    6c4e:	0018      	movs	r0, r3
    6c50:	4b45      	ldr	r3, [pc, #276]	; (6d68 <sendSMS+0x17c>)
    6c52:	4798      	blx	r3
    6c54:	0003      	movs	r3, r0
    6c56:	001a      	movs	r2, r3
    6c58:	687b      	ldr	r3, [r7, #4]
    6c5a:	189a      	adds	r2, r3, r2
    6c5c:	4b45      	ldr	r3, [pc, #276]	; (6d74 <sendSMS+0x188>)
    6c5e:	0010      	movs	r0, r2
    6c60:	0019      	movs	r1, r3
    6c62:	2303      	movs	r3, #3
    6c64:	001a      	movs	r2, r3
    6c66:	4b42      	ldr	r3, [pc, #264]	; (6d70 <sendSMS+0x184>)
    6c68:	4798      	blx	r3
			break;
    6c6a:	e01e      	b.n	6caa <sendSMS+0xbe>
			case 'O':
			case 'U':
			case 'C':
			case 'F':
			strcat(msg,STR_MOTOR);
    6c6c:	687b      	ldr	r3, [r7, #4]
    6c6e:	0018      	movs	r0, r3
    6c70:	4b3d      	ldr	r3, [pc, #244]	; (6d68 <sendSMS+0x17c>)
    6c72:	4798      	blx	r3
    6c74:	0003      	movs	r3, r0
    6c76:	001a      	movs	r2, r3
    6c78:	687b      	ldr	r3, [r7, #4]
    6c7a:	189a      	adds	r2, r3, r2
    6c7c:	4b3b      	ldr	r3, [pc, #236]	; (6d6c <sendSMS+0x180>)
    6c7e:	0010      	movs	r0, r2
    6c80:	0019      	movs	r1, r3
    6c82:	2307      	movs	r3, #7
    6c84:	001a      	movs	r2, r3
    6c86:	4b3a      	ldr	r3, [pc, #232]	; (6d70 <sendSMS+0x184>)
    6c88:	4798      	blx	r3
			strcat(msg,STR_OFF);
    6c8a:	687b      	ldr	r3, [r7, #4]
    6c8c:	0018      	movs	r0, r3
    6c8e:	4b36      	ldr	r3, [pc, #216]	; (6d68 <sendSMS+0x17c>)
    6c90:	4798      	blx	r3
    6c92:	0003      	movs	r3, r0
    6c94:	001a      	movs	r2, r3
    6c96:	687b      	ldr	r3, [r7, #4]
    6c98:	189a      	adds	r2, r3, r2
    6c9a:	4b37      	ldr	r3, [pc, #220]	; (6d78 <sendSMS+0x18c>)
    6c9c:	0010      	movs	r0, r2
    6c9e:	0019      	movs	r1, r3
    6ca0:	2304      	movs	r3, #4
    6ca2:	001a      	movs	r2, r3
    6ca4:	4b32      	ldr	r3, [pc, #200]	; (6d70 <sendSMS+0x184>)
    6ca6:	4798      	blx	r3
			break;
    6ca8:	46c0      	nop			; (mov r8, r8)
		}
	}
	
	char phone_number[20];
	
	if(isM2M==SEND_TO_M2M_MASTER)
    6caa:	1cbb      	adds	r3, r7, #2
    6cac:	781b      	ldrb	r3, [r3, #0]
    6cae:	2b02      	cmp	r3, #2
    6cb0:	d105      	bne.n	6cbe <sendSMS+0xd2>
	{
		getM2MNumber(phone_number);
    6cb2:	2324      	movs	r3, #36	; 0x24
    6cb4:	18fb      	adds	r3, r7, r3
    6cb6:	0018      	movs	r0, r3
    6cb8:	4b30      	ldr	r3, [pc, #192]	; (6d7c <sendSMS+0x190>)
    6cba:	4798      	blx	r3
    6cbc:	e034      	b.n	6d28 <sendSMS+0x13c>
	}
	else if (isM2M==SEND_TO_M2M_REMOTE)
    6cbe:	1cbb      	adds	r3, r7, #2
    6cc0:	781b      	ldrb	r3, [r3, #0]
    6cc2:	2b01      	cmp	r3, #1
    6cc4:	d109      	bne.n	6cda <sendSMS+0xee>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
    6cc6:	4b2e      	ldr	r3, [pc, #184]	; (6d80 <sendSMS+0x194>)
    6cc8:	78db      	ldrb	r3, [r3, #3]
    6cca:	2b00      	cmp	r3, #0
    6ccc:	d02c      	beq.n	6d28 <sendSMS+0x13c>
		{
			getM2MRemoteNumber(phone_number);
    6cce:	2324      	movs	r3, #36	; 0x24
    6cd0:	18fb      	adds	r3, r7, r3
    6cd2:	0018      	movs	r0, r3
    6cd4:	4b2b      	ldr	r3, [pc, #172]	; (6d84 <sendSMS+0x198>)
    6cd6:	4798      	blx	r3
    6cd8:	e026      	b.n	6d28 <sendSMS+0x13c>
		}
	}
	else
	{
		if (isMsgFromAdmin)
    6cda:	4b2b      	ldr	r3, [pc, #172]	; (6d88 <sendSMS+0x19c>)
    6cdc:	781b      	ldrb	r3, [r3, #0]
    6cde:	2b00      	cmp	r3, #0
    6ce0:	d01d      	beq.n	6d1e <sendSMS+0x132>
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
    6ce2:	4b2a      	ldr	r3, [pc, #168]	; (6d8c <sendSMS+0x1a0>)
    6ce4:	223c      	movs	r2, #60	; 0x3c
    6ce6:	2100      	movs	r1, #0
    6ce8:	0018      	movs	r0, r3
    6cea:	4b29      	ldr	r3, [pc, #164]	; (6d90 <sendSMS+0x1a4>)
    6cec:	4798      	blx	r3
			eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE, page_data);
    6cee:	4b27      	ldr	r3, [pc, #156]	; (6d8c <sendSMS+0x1a0>)
    6cf0:	0019      	movs	r1, r3
    6cf2:	2003      	movs	r0, #3
    6cf4:	4b27      	ldr	r3, [pc, #156]	; (6d94 <sendSMS+0x1a8>)
    6cf6:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
    6cf8:	230c      	movs	r3, #12
    6cfa:	18fa      	adds	r2, r7, r3
    6cfc:	4b23      	ldr	r3, [pc, #140]	; (6d8c <sendSMS+0x1a0>)
    6cfe:	0010      	movs	r0, r2
    6d00:	0019      	movs	r1, r3
    6d02:	2318      	movs	r3, #24
    6d04:	001a      	movs	r2, r3
    6d06:	4b1a      	ldr	r3, [pc, #104]	; (6d70 <sendSMS+0x184>)
    6d08:	4798      	blx	r3
			strcpy(phone_number,mobile_no.mobile_no_ee);
    6d0a:	230c      	movs	r3, #12
    6d0c:	18fb      	adds	r3, r7, r3
    6d0e:	1d1a      	adds	r2, r3, #4
    6d10:	2324      	movs	r3, #36	; 0x24
    6d12:	18fb      	adds	r3, r7, r3
    6d14:	0011      	movs	r1, r2
    6d16:	0018      	movs	r0, r3
    6d18:	4b1f      	ldr	r3, [pc, #124]	; (6d98 <sendSMS+0x1ac>)
    6d1a:	4798      	blx	r3
    6d1c:	e004      	b.n	6d28 <sendSMS+0x13c>
		}
		else
		{
			getActiveNumber(phone_number);
    6d1e:	2324      	movs	r3, #36	; 0x24
    6d20:	18fb      	adds	r3, r7, r3
    6d22:	0018      	movs	r0, r3
    6d24:	4b1d      	ldr	r3, [pc, #116]	; (6d9c <sendSMS+0x1b0>)
    6d26:	4798      	blx	r3
		}
	}
	setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
    6d28:	2324      	movs	r3, #36	; 0x24
    6d2a:	18fb      	adds	r3, r7, r3
    6d2c:	2200      	movs	r2, #0
    6d2e:	0019      	movs	r1, r3
    6d30:	2005      	movs	r0, #5
    6d32:	4b1b      	ldr	r3, [pc, #108]	; (6da0 <sendSMS+0x1b4>)
    6d34:	4798      	blx	r3
	gsm_send_sms(phone_number,msg);
    6d36:	687a      	ldr	r2, [r7, #4]
    6d38:	2324      	movs	r3, #36	; 0x24
    6d3a:	18fb      	adds	r3, r7, r3
    6d3c:	0011      	movs	r1, r2
    6d3e:	0018      	movs	r0, r3
    6d40:	4b18      	ldr	r3, [pc, #96]	; (6da4 <sendSMS+0x1b8>)
    6d42:	4798      	blx	r3
	isMsgFromAdmin = false;
    6d44:	4b10      	ldr	r3, [pc, #64]	; (6d88 <sendSMS+0x19c>)
    6d46:	2200      	movs	r2, #0
    6d48:	701a      	strb	r2, [r3, #0]
	inCall=false;
    6d4a:	4b04      	ldr	r3, [pc, #16]	; (6d5c <sendSMS+0x170>)
    6d4c:	2200      	movs	r2, #0
    6d4e:	701a      	strb	r2, [r3, #0]
    6d50:	e000      	b.n	6d54 <sendSMS+0x168>
			return;
    6d52:	46c0      	nop			; (mov r8, r8)
}
    6d54:	46bd      	mov	sp, r7
    6d56:	b00e      	add	sp, #56	; 0x38
    6d58:	bd80      	pop	{r7, pc}
    6d5a:	46c0      	nop			; (mov r8, r8)
    6d5c:	20000764 	.word	0x20000764
    6d60:	2000072b 	.word	0x2000072b
    6d64:	00019308 	.word	0x00019308
    6d68:	00017de7 	.word	0x00017de7
    6d6c:	000192d4 	.word	0x000192d4
    6d70:	00017b21 	.word	0x00017b21
    6d74:	00019268 	.word	0x00019268
    6d78:	000192dc 	.word	0x000192dc
    6d7c:	00000acd 	.word	0x00000acd
    6d80:	20000618 	.word	0x20000618
    6d84:	00000b09 	.word	0x00000b09
    6d88:	20000744 	.word	0x20000744
    6d8c:	20000574 	.word	0x20000574
    6d90:	00017b57 	.word	0x00017b57
    6d94:	000128f5 	.word	0x000128f5
    6d98:	00017dd7 	.word	0x00017dd7
    6d9c:	00000d21 	.word	0x00000d21
    6da0:	0000bbdd 	.word	0x0000bbdd
    6da4:	000028b5 	.word	0x000028b5

00006da8 <sendDTMFTone>:

void sendDTMFTone(uint8_t eventNo)
{
    6da8:	b580      	push	{r7, lr}
    6daa:	b082      	sub	sp, #8
    6dac:	af00      	add	r7, sp, #0
    6dae:	0002      	movs	r2, r0
    6db0:	1dfb      	adds	r3, r7, #7
    6db2:	701a      	strb	r2, [r3, #0]
	if(eventNo==0xFF)
    6db4:	1dfb      	adds	r3, r7, #7
    6db6:	781b      	ldrb	r3, [r3, #0]
    6db8:	2bff      	cmp	r3, #255	; 0xff
    6dba:	d103      	bne.n	6dc4 <sendDTMFTone+0x1c>
	{
		gsm_send_DTMF_Tone('A');
    6dbc:	2041      	movs	r0, #65	; 0x41
    6dbe:	4b0f      	ldr	r3, [pc, #60]	; (6dfc <sendDTMFTone+0x54>)
    6dc0:	4798      	blx	r3
	}
	else if (eventNo==1 && factory_settings_parameter_struct.ENABLE_M2M)
	{
		gsm_send_DTMF_Tone('C');
	}
}
    6dc2:	e016      	b.n	6df2 <sendDTMFTone+0x4a>
	else if (eventNo==0 && factory_settings_parameter_struct.ENABLE_M2M)
    6dc4:	1dfb      	adds	r3, r7, #7
    6dc6:	781b      	ldrb	r3, [r3, #0]
    6dc8:	2b00      	cmp	r3, #0
    6dca:	d107      	bne.n	6ddc <sendDTMFTone+0x34>
    6dcc:	4b0c      	ldr	r3, [pc, #48]	; (6e00 <sendDTMFTone+0x58>)
    6dce:	78db      	ldrb	r3, [r3, #3]
    6dd0:	2b00      	cmp	r3, #0
    6dd2:	d003      	beq.n	6ddc <sendDTMFTone+0x34>
		gsm_send_DTMF_Tone('D');
    6dd4:	2044      	movs	r0, #68	; 0x44
    6dd6:	4b09      	ldr	r3, [pc, #36]	; (6dfc <sendDTMFTone+0x54>)
    6dd8:	4798      	blx	r3
}
    6dda:	e00a      	b.n	6df2 <sendDTMFTone+0x4a>
	else if (eventNo==1 && factory_settings_parameter_struct.ENABLE_M2M)
    6ddc:	1dfb      	adds	r3, r7, #7
    6dde:	781b      	ldrb	r3, [r3, #0]
    6de0:	2b01      	cmp	r3, #1
    6de2:	d106      	bne.n	6df2 <sendDTMFTone+0x4a>
    6de4:	4b06      	ldr	r3, [pc, #24]	; (6e00 <sendDTMFTone+0x58>)
    6de6:	78db      	ldrb	r3, [r3, #3]
    6de8:	2b00      	cmp	r3, #0
    6dea:	d002      	beq.n	6df2 <sendDTMFTone+0x4a>
		gsm_send_DTMF_Tone('C');
    6dec:	2043      	movs	r0, #67	; 0x43
    6dee:	4b03      	ldr	r3, [pc, #12]	; (6dfc <sendDTMFTone+0x54>)
    6df0:	4798      	blx	r3
}
    6df2:	46c0      	nop			; (mov r8, r8)
    6df4:	46bd      	mov	sp, r7
    6df6:	b002      	add	sp, #8
    6df8:	bd80      	pop	{r7, pc}
    6dfa:	46c0      	nop			; (mov r8, r8)
    6dfc:	00002d29 	.word	0x00002d29
    6e00:	20000618 	.word	0x20000618

00006e04 <getSystemTime>:

void getSystemTime(uint8_t *Hours, uint8_t *Minutes)
{
    6e04:	b580      	push	{r7, lr}
    6e06:	b082      	sub	sp, #8
    6e08:	af00      	add	r7, sp, #0
    6e0a:	6078      	str	r0, [r7, #4]
    6e0c:	6039      	str	r1, [r7, #0]
	if (gsm_get_internal_rtc_time() == GSM_ERROR_NONE)
    6e0e:	4b09      	ldr	r3, [pc, #36]	; (6e34 <getSystemTime+0x30>)
    6e10:	4798      	blx	r3
    6e12:	1e03      	subs	r3, r0, #0
    6e14:	d109      	bne.n	6e2a <getSystemTime+0x26>
	{
		*Hours = struct_internal_rtc.Network_hour;
    6e16:	4b08      	ldr	r3, [pc, #32]	; (6e38 <getSystemTime+0x34>)
    6e18:	78db      	ldrb	r3, [r3, #3]
    6e1a:	b2da      	uxtb	r2, r3
    6e1c:	687b      	ldr	r3, [r7, #4]
    6e1e:	701a      	strb	r2, [r3, #0]
		*Minutes = struct_internal_rtc.Network_minute;
    6e20:	4b05      	ldr	r3, [pc, #20]	; (6e38 <getSystemTime+0x34>)
    6e22:	791b      	ldrb	r3, [r3, #4]
    6e24:	b2da      	uxtb	r2, r3
    6e26:	683b      	ldr	r3, [r7, #0]
    6e28:	701a      	strb	r2, [r3, #0]
	}
}
    6e2a:	46c0      	nop			; (mov r8, r8)
    6e2c:	46bd      	mov	sp, r7
    6e2e:	b002      	add	sp, #8
    6e30:	bd80      	pop	{r7, pc}
    6e32:	46c0      	nop			; (mov r8, r8)
    6e34:	00002f09 	.word	0x00002f09
    6e38:	20000678 	.word	0x20000678

00006e3c <vTask_GSM_service>:
#define GSM_PWR_AS_OP	GSM_PWR_DDR|=GSM_PWR_POS
#define GSM_PWR_ON		GSM_PWR_PORT|=GSM_PWR_POS
#define GSM_PWR_OFF		GSM_PWR_PORT&=~(GSM_PWR_POS)
//////////////////////////////////////////////////////////////////////////
static void vTask_GSM_service(void *params)
{
    6e3c:	b590      	push	{r4, r7, lr}
    6e3e:	b0cf      	sub	sp, #316	; 0x13c
    6e40:	af02      	add	r7, sp, #8
    6e42:	6078      	str	r0, [r7, #4]
	
	uint32_t network_update_time = 0;
    6e44:	2300      	movs	r3, #0
    6e46:	2296      	movs	r2, #150	; 0x96
    6e48:	0052      	lsls	r2, r2, #1
    6e4a:	18ba      	adds	r2, r7, r2
    6e4c:	6013      	str	r3, [r2, #0]
	
	GSM_PWR_AS_OP;
    6e4e:	4bc6      	ldr	r3, [pc, #792]	; (7168 <vTask_GSM_service+0x32c>)
    6e50:	4ac5      	ldr	r2, [pc, #788]	; (7168 <vTask_GSM_service+0x32c>)
    6e52:	6812      	ldr	r2, [r2, #0]
    6e54:	2180      	movs	r1, #128	; 0x80
    6e56:	0249      	lsls	r1, r1, #9
    6e58:	430a      	orrs	r2, r1
    6e5a:	601a      	str	r2, [r3, #0]
	
	struct port_config pin_conf_gsm_status;
	port_get_config_defaults(&pin_conf_gsm_status);
    6e5c:	2388      	movs	r3, #136	; 0x88
    6e5e:	005b      	lsls	r3, r3, #1
    6e60:	18fb      	adds	r3, r7, r3
    6e62:	0018      	movs	r0, r3
    6e64:	4bc1      	ldr	r3, [pc, #772]	; (716c <vTask_GSM_service+0x330>)
    6e66:	4798      	blx	r3
	pin_conf_gsm_status.direction  = PORT_PIN_DIR_INPUT;
    6e68:	2388      	movs	r3, #136	; 0x88
    6e6a:	005b      	lsls	r3, r3, #1
    6e6c:	18fb      	adds	r3, r7, r3
    6e6e:	2200      	movs	r2, #0
    6e70:	701a      	strb	r2, [r3, #0]
	pin_conf_gsm_status.input_pull = PORT_PIN_PULL_NONE;
    6e72:	2388      	movs	r3, #136	; 0x88
    6e74:	005b      	lsls	r3, r3, #1
    6e76:	18fb      	adds	r3, r7, r3
    6e78:	2200      	movs	r2, #0
    6e7a:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(GSM_STATUS_POSITION, &pin_conf_gsm_status);
    6e7c:	2388      	movs	r3, #136	; 0x88
    6e7e:	005b      	lsls	r3, r3, #1
    6e80:	18fb      	adds	r3, r7, r3
    6e82:	0019      	movs	r1, r3
    6e84:	201b      	movs	r0, #27
    6e86:	4bba      	ldr	r3, [pc, #744]	; (7170 <vTask_GSM_service+0x334>)
    6e88:	4798      	blx	r3
	
	gsm_init();
    6e8a:	4bba      	ldr	r3, [pc, #744]	; (7174 <vTask_GSM_service+0x338>)
    6e8c:	4798      	blx	r3
	
	initialized = false;
    6e8e:	4bba      	ldr	r3, [pc, #744]	; (7178 <vTask_GSM_service+0x33c>)
    6e90:	2200      	movs	r2, #0
    6e92:	701a      	strb	r2, [r3, #0]
	
	inCall=false;
    6e94:	4bb9      	ldr	r3, [pc, #740]	; (717c <vTask_GSM_service+0x340>)
    6e96:	2200      	movs	r2, #0
    6e98:	701a      	strb	r2, [r3, #0]
	simReInit=false;
    6e9a:	4bb9      	ldr	r3, [pc, #740]	; (7180 <vTask_GSM_service+0x344>)
    6e9c:	2200      	movs	r2, #0
    6e9e:	701a      	strb	r2, [r3, #0]
	
	bool boolGsm_config_flag			=false;
    6ea0:	232c      	movs	r3, #44	; 0x2c
    6ea2:	33ff      	adds	r3, #255	; 0xff
    6ea4:	18fb      	adds	r3, r7, r3
    6ea6:	2200      	movs	r2, #0
    6ea8:	701a      	strb	r2, [r3, #0]
	bool boolOne_Time_Msg_Delete_Flag   =false;
    6eaa:	2395      	movs	r3, #149	; 0x95
    6eac:	005b      	lsls	r3, r3, #1
    6eae:	18fb      	adds	r3, r7, r3
    6eb0:	2200      	movs	r2, #0
    6eb2:	701a      	strb	r2, [r3, #0]
	
	Signal_Strength = 0;
    6eb4:	4bb3      	ldr	r3, [pc, #716]	; (7184 <vTask_GSM_service+0x348>)
    6eb6:	2200      	movs	r2, #0
    6eb8:	701a      	strb	r2, [r3, #0]
	
	soundWaitTime = 5;
    6eba:	4bb3      	ldr	r3, [pc, #716]	; (7188 <vTask_GSM_service+0x34c>)
    6ebc:	2205      	movs	r2, #5
    6ebe:	701a      	strb	r2, [r3, #0]
	bplaySound = false;
    6ec0:	4bb2      	ldr	r3, [pc, #712]	; (718c <vTask_GSM_service+0x350>)
    6ec2:	2200      	movs	r2, #0
    6ec4:	701a      	strb	r2, [r3, #0]
	
	actionType = 'N';
    6ec6:	4bb2      	ldr	r3, [pc, #712]	; (7190 <vTask_GSM_service+0x354>)
    6ec8:	224e      	movs	r2, #78	; 0x4e
    6eca:	701a      	strb	r2, [r3, #0]
	callCutWaitTime = 580;
    6ecc:	4bb1      	ldr	r3, [pc, #708]	; (7194 <vTask_GSM_service+0x358>)
    6ece:	2291      	movs	r2, #145	; 0x91
    6ed0:	0092      	lsls	r2, r2, #2
    6ed2:	801a      	strh	r2, [r3, #0]
	nr = 0;
    6ed4:	4bb0      	ldr	r3, [pc, #704]	; (7198 <vTask_GSM_service+0x35c>)
    6ed6:	2200      	movs	r2, #0
    6ed8:	701a      	strb	r2, [r3, #0]
	currentStatus = 'N';
    6eda:	4bb0      	ldr	r3, [pc, #704]	; (719c <vTask_GSM_service+0x360>)
    6edc:	224e      	movs	r2, #78	; 0x4e
    6ede:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'N';
    6ee0:	4baf      	ldr	r3, [pc, #700]	; (71a0 <vTask_GSM_service+0x364>)
    6ee2:	224e      	movs	r2, #78	; 0x4e
    6ee4:	701a      	strb	r2, [r3, #0]
	callAccepted = false;
    6ee6:	4baf      	ldr	r3, [pc, #700]	; (71a4 <vTask_GSM_service+0x368>)
    6ee8:	2200      	movs	r2, #0
    6eea:	701a      	strb	r2, [r3, #0]
	freezeIncomingCalls = false;
    6eec:	4bae      	ldr	r3, [pc, #696]	; (71a8 <vTask_GSM_service+0x36c>)
    6eee:	2200      	movs	r2, #0
    6ef0:	701a      	strb	r2, [r3, #0]
	obtainNewEvent = true;
    6ef2:	4bae      	ldr	r3, [pc, #696]	; (71ac <vTask_GSM_service+0x370>)
    6ef4:	2201      	movs	r2, #1
    6ef6:	701a      	strb	r2, [r3, #0]
	isMsgFromAdmin = false;
    6ef8:	4bad      	ldr	r3, [pc, #692]	; (71b0 <vTask_GSM_service+0x374>)
    6efa:	2200      	movs	r2, #0
    6efc:	701a      	strb	r2, [r3, #0]
	eventStaged=false;
    6efe:	4bad      	ldr	r3, [pc, #692]	; (71b4 <vTask_GSM_service+0x378>)
    6f00:	2200      	movs	r2, #0
    6f02:	701a      	strb	r2, [r3, #0]
	stagedEventType = 'N';
    6f04:	4bac      	ldr	r3, [pc, #688]	; (71b8 <vTask_GSM_service+0x37c>)
    6f06:	224e      	movs	r2, #78	; 0x4e
    6f08:	701a      	strb	r2, [r3, #0]
	isRegisteredNumber=false;
    6f0a:	4bac      	ldr	r3, [pc, #688]	; (71bc <vTask_GSM_service+0x380>)
    6f0c:	2200      	movs	r2, #0
    6f0e:	701a      	strb	r2, [r3, #0]
	retries=0;
    6f10:	4bab      	ldr	r3, [pc, #684]	; (71c0 <vTask_GSM_service+0x384>)
    6f12:	2200      	movs	r2, #0
    6f14:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
    6f16:	4bab      	ldr	r3, [pc, #684]	; (71c4 <vTask_GSM_service+0x388>)
    6f18:	785b      	ldrb	r3, [r3, #1]
    6f1a:	2b00      	cmp	r3, #0
    6f1c:	d002      	beq.n	6f24 <vTask_GSM_service+0xe8>
	{
		zeroPressed=false;
    6f1e:	4baa      	ldr	r3, [pc, #680]	; (71c8 <vTask_GSM_service+0x38c>)
    6f20:	2200      	movs	r2, #0
    6f22:	701a      	strb	r2, [r3, #0]
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
    6f24:	4ba7      	ldr	r3, [pc, #668]	; (71c4 <vTask_GSM_service+0x388>)
    6f26:	78db      	ldrb	r3, [r3, #3]
    6f28:	2b00      	cmp	r3, #0
    6f2a:	d012      	beq.n	6f52 <vTask_GSM_service+0x116>
	{
		m2mAck=false;
    6f2c:	4ba7      	ldr	r3, [pc, #668]	; (71cc <vTask_GSM_service+0x390>)
    6f2e:	2200      	movs	r2, #0
    6f30:	701a      	strb	r2, [r3, #0]
		m2mEventCalls=m2mEventNo=0;
    6f32:	4ba7      	ldr	r3, [pc, #668]	; (71d0 <vTask_GSM_service+0x394>)
    6f34:	2200      	movs	r2, #0
    6f36:	701a      	strb	r2, [r3, #0]
    6f38:	4ba5      	ldr	r3, [pc, #660]	; (71d0 <vTask_GSM_service+0x394>)
    6f3a:	781a      	ldrb	r2, [r3, #0]
    6f3c:	4ba5      	ldr	r3, [pc, #660]	; (71d4 <vTask_GSM_service+0x398>)
    6f3e:	701a      	strb	r2, [r3, #0]
		m2mEventStaged=false;
    6f40:	4ba5      	ldr	r3, [pc, #660]	; (71d8 <vTask_GSM_service+0x39c>)
    6f42:	2200      	movs	r2, #0
    6f44:	701a      	strb	r2, [r3, #0]
		m2mEvent=false;
    6f46:	4ba5      	ldr	r3, [pc, #660]	; (71dc <vTask_GSM_service+0x3a0>)
    6f48:	2200      	movs	r2, #0
    6f4a:	701a      	strb	r2, [r3, #0]
		keyPressed=false;
    6f4c:	4ba4      	ldr	r3, [pc, #656]	; (71e0 <vTask_GSM_service+0x3a4>)
    6f4e:	2200      	movs	r2, #0
    6f50:	701a      	strb	r2, [r3, #0]
	}
	
	if(GSM_STATUS_OK)
    6f52:	201b      	movs	r0, #27
    6f54:	4ba3      	ldr	r3, [pc, #652]	; (71e4 <vTask_GSM_service+0x3a8>)
    6f56:	4798      	blx	r3
    6f58:	1e03      	subs	r3, r0, #0
    6f5a:	d01e      	beq.n	6f9a <vTask_GSM_service+0x15e>
	{
		boolGsm_config_flag			=false;
    6f5c:	232c      	movs	r3, #44	; 0x2c
    6f5e:	33ff      	adds	r3, #255	; 0xff
    6f60:	18fb      	adds	r3, r7, r3
    6f62:	2200      	movs	r2, #0
    6f64:	701a      	strb	r2, [r3, #0]
		boolOne_Time_Msg_Delete_Flag   =false;
    6f66:	2395      	movs	r3, #149	; 0x95
    6f68:	005b      	lsls	r3, r3, #1
    6f6a:	18fb      	adds	r3, r7, r3
    6f6c:	2200      	movs	r2, #0
    6f6e:	701a      	strb	r2, [r3, #0]
		
		GSM_PWR_ON;
    6f70:	4b9d      	ldr	r3, [pc, #628]	; (71e8 <vTask_GSM_service+0x3ac>)
    6f72:	4a9d      	ldr	r2, [pc, #628]	; (71e8 <vTask_GSM_service+0x3ac>)
    6f74:	6812      	ldr	r2, [r2, #0]
    6f76:	2180      	movs	r1, #128	; 0x80
    6f78:	0249      	lsls	r1, r1, #9
    6f7a:	430a      	orrs	r2, r1
    6f7c:	601a      	str	r2, [r3, #0]
		vTaskDelay(3000);
    6f7e:	4b9b      	ldr	r3, [pc, #620]	; (71ec <vTask_GSM_service+0x3b0>)
    6f80:	0018      	movs	r0, r3
    6f82:	4b9b      	ldr	r3, [pc, #620]	; (71f0 <vTask_GSM_service+0x3b4>)
    6f84:	4798      	blx	r3
		GSM_PWR_OFF;
    6f86:	4b98      	ldr	r3, [pc, #608]	; (71e8 <vTask_GSM_service+0x3ac>)
    6f88:	4a97      	ldr	r2, [pc, #604]	; (71e8 <vTask_GSM_service+0x3ac>)
    6f8a:	6812      	ldr	r2, [r2, #0]
    6f8c:	4999      	ldr	r1, [pc, #612]	; (71f4 <vTask_GSM_service+0x3b8>)
    6f8e:	400a      	ands	r2, r1
    6f90:	601a      	str	r2, [r3, #0]
		vTaskDelay(5000);
    6f92:	4b99      	ldr	r3, [pc, #612]	; (71f8 <vTask_GSM_service+0x3bc>)
    6f94:	0018      	movs	r0, r3
    6f96:	4b96      	ldr	r3, [pc, #600]	; (71f0 <vTask_GSM_service+0x3b4>)
    6f98:	4798      	blx	r3
	}
	
	for (;;)
	{
		if (GSM_STATUS_OK)
    6f9a:	201b      	movs	r0, #27
    6f9c:	4b91      	ldr	r3, [pc, #580]	; (71e4 <vTask_GSM_service+0x3a8>)
    6f9e:	4798      	blx	r3
    6fa0:	1e03      	subs	r3, r0, #0
    6fa2:	d101      	bne.n	6fa8 <vTask_GSM_service+0x16c>
    6fa4:	f000 fc4e 	bl	7844 <vTask_GSM_service+0xa08>
		{
			if (boolGsm_config_flag == false)
    6fa8:	232c      	movs	r3, #44	; 0x2c
    6faa:	33ff      	adds	r3, #255	; 0xff
    6fac:	18fb      	adds	r3, r7, r3
    6fae:	781b      	ldrb	r3, [r3, #0]
    6fb0:	2201      	movs	r2, #1
    6fb2:	4053      	eors	r3, r2
    6fb4:	b2db      	uxtb	r3, r3
    6fb6:	2b00      	cmp	r3, #0
    6fb8:	d038      	beq.n	702c <vTask_GSM_service+0x1f0>
			{
				if (gsm_is_network_registered() == GSM_NETWORK_REGISTERED)
    6fba:	4b90      	ldr	r3, [pc, #576]	; (71fc <vTask_GSM_service+0x3c0>)
    6fbc:	4798      	blx	r3
    6fbe:	0003      	movs	r3, r0
    6fc0:	2b09      	cmp	r3, #9
    6fc2:	d12d      	bne.n	7020 <vTask_GSM_service+0x1e4>
				{
					if(gsm_config_module()==GSM_ERROR_NONE)
    6fc4:	4b8e      	ldr	r3, [pc, #568]	; (7200 <vTask_GSM_service+0x3c4>)
    6fc6:	4798      	blx	r3
    6fc8:	1e03      	subs	r3, r0, #0
    6fca:	d123      	bne.n	7014 <vTask_GSM_service+0x1d8>
					{
						for (uint8_t i=0;i<20;i++)
    6fcc:	232a      	movs	r3, #42	; 0x2a
    6fce:	33ff      	adds	r3, #255	; 0xff
    6fd0:	18fb      	adds	r3, r7, r3
    6fd2:	2200      	movs	r2, #0
    6fd4:	701a      	strb	r2, [r3, #0]
    6fd6:	e011      	b.n	6ffc <vTask_GSM_service+0x1c0>
						{
							Signal_Strength = gsm_getsignalstrength();
    6fd8:	4b8a      	ldr	r3, [pc, #552]	; (7204 <vTask_GSM_service+0x3c8>)
    6fda:	4798      	blx	r3
    6fdc:	0003      	movs	r3, r0
    6fde:	001a      	movs	r2, r3
    6fe0:	4b68      	ldr	r3, [pc, #416]	; (7184 <vTask_GSM_service+0x348>)
    6fe2:	701a      	strb	r2, [r3, #0]
							vTaskDelay(50);
    6fe4:	2032      	movs	r0, #50	; 0x32
    6fe6:	4b82      	ldr	r3, [pc, #520]	; (71f0 <vTask_GSM_service+0x3b4>)
    6fe8:	4798      	blx	r3
						for (uint8_t i=0;i<20;i++)
    6fea:	232a      	movs	r3, #42	; 0x2a
    6fec:	33ff      	adds	r3, #255	; 0xff
    6fee:	18fb      	adds	r3, r7, r3
    6ff0:	781a      	ldrb	r2, [r3, #0]
    6ff2:	232a      	movs	r3, #42	; 0x2a
    6ff4:	33ff      	adds	r3, #255	; 0xff
    6ff6:	18fb      	adds	r3, r7, r3
    6ff8:	3201      	adds	r2, #1
    6ffa:	701a      	strb	r2, [r3, #0]
    6ffc:	232a      	movs	r3, #42	; 0x2a
    6ffe:	33ff      	adds	r3, #255	; 0xff
    7000:	18fb      	adds	r3, r7, r3
    7002:	781b      	ldrb	r3, [r3, #0]
    7004:	2b13      	cmp	r3, #19
    7006:	d9e7      	bls.n	6fd8 <vTask_GSM_service+0x19c>
						}
						boolGsm_config_flag = true;
    7008:	232c      	movs	r3, #44	; 0x2c
    700a:	33ff      	adds	r3, #255	; 0xff
    700c:	18fb      	adds	r3, r7, r3
    700e:	2201      	movs	r2, #1
    7010:	701a      	strb	r2, [r3, #0]
    7012:	e7c2      	b.n	6f9a <vTask_GSM_service+0x15e>
					}
					else
					{
						boolGsm_config_flag = false;
    7014:	232c      	movs	r3, #44	; 0x2c
    7016:	33ff      	adds	r3, #255	; 0xff
    7018:	18fb      	adds	r3, r7, r3
    701a:	2200      	movs	r2, #0
    701c:	701a      	strb	r2, [r3, #0]
    701e:	e7bc      	b.n	6f9a <vTask_GSM_service+0x15e>
					}
				}
				else
				{
					vTaskDelay(2000/portTICK_PERIOD_MS);
    7020:	23fa      	movs	r3, #250	; 0xfa
    7022:	00db      	lsls	r3, r3, #3
    7024:	0018      	movs	r0, r3
    7026:	4b72      	ldr	r3, [pc, #456]	; (71f0 <vTask_GSM_service+0x3b4>)
    7028:	4798      	blx	r3
    702a:	e7b6      	b.n	6f9a <vTask_GSM_service+0x15e>
				}
			}
			else
			{
				if ((boolOne_Time_Msg_Delete_Flag == false) && (boolGsm_config_flag == true))
    702c:	2395      	movs	r3, #149	; 0x95
    702e:	005b      	lsls	r3, r3, #1
    7030:	18fb      	adds	r3, r7, r3
    7032:	781b      	ldrb	r3, [r3, #0]
    7034:	2201      	movs	r2, #1
    7036:	4053      	eors	r3, r2
    7038:	b2db      	uxtb	r3, r3
    703a:	2b00      	cmp	r3, #0
    703c:	d01a      	beq.n	7074 <vTask_GSM_service+0x238>
    703e:	232c      	movs	r3, #44	; 0x2c
    7040:	33ff      	adds	r3, #255	; 0xff
    7042:	18fb      	adds	r3, r7, r3
    7044:	781b      	ldrb	r3, [r3, #0]
    7046:	2b00      	cmp	r3, #0
    7048:	d014      	beq.n	7074 <vTask_GSM_service+0x238>
				{
					if (gsm_delete_all_sms() == GSM_ERROR_NONE)
    704a:	4b6f      	ldr	r3, [pc, #444]	; (7208 <vTask_GSM_service+0x3cc>)
    704c:	4798      	blx	r3
    704e:	1e03      	subs	r3, r0, #0
    7050:	d109      	bne.n	7066 <vTask_GSM_service+0x22a>
					{
						boolOne_Time_Msg_Delete_Flag = true;
    7052:	2395      	movs	r3, #149	; 0x95
    7054:	005b      	lsls	r3, r3, #1
    7056:	18fb      	adds	r3, r7, r3
    7058:	2201      	movs	r2, #1
    705a:	701a      	strb	r2, [r3, #0]
						initialized = true;
    705c:	4b46      	ldr	r3, [pc, #280]	; (7178 <vTask_GSM_service+0x33c>)
    705e:	2201      	movs	r2, #1
    7060:	701a      	strb	r2, [r3, #0]
					if (gsm_delete_all_sms() == GSM_ERROR_NONE)
    7062:	f000 fc14 	bl	788e <vTask_GSM_service+0xa52>
					}
					else
					{
						boolOne_Time_Msg_Delete_Flag = false;
    7066:	2395      	movs	r3, #149	; 0x95
    7068:	005b      	lsls	r3, r3, #1
    706a:	18fb      	adds	r3, r7, r3
    706c:	2200      	movs	r2, #0
    706e:	701a      	strb	r2, [r3, #0]
					if (gsm_delete_all_sms() == GSM_ERROR_NONE)
    7070:	f000 fc0d 	bl	788e <vTask_GSM_service+0xa52>
					}
				}
				else
				{
					if (currentStatus == 'N' && currentCallStatus == 'N')
    7074:	4b49      	ldr	r3, [pc, #292]	; (719c <vTask_GSM_service+0x360>)
    7076:	781b      	ldrb	r3, [r3, #0]
    7078:	b2db      	uxtb	r3, r3
    707a:	2b4e      	cmp	r3, #78	; 0x4e
    707c:	d12a      	bne.n	70d4 <vTask_GSM_service+0x298>
    707e:	4b48      	ldr	r3, [pc, #288]	; (71a0 <vTask_GSM_service+0x364>)
    7080:	781b      	ldrb	r3, [r3, #0]
    7082:	b2db      	uxtb	r3, r3
    7084:	2b4e      	cmp	r3, #78	; 0x4e
    7086:	d125      	bne.n	70d4 <vTask_GSM_service+0x298>
					{
						////Update network
						if (xTaskGetTickCount() - network_update_time>= (1*30*1000))
    7088:	4b60      	ldr	r3, [pc, #384]	; (720c <vTask_GSM_service+0x3d0>)
    708a:	4798      	blx	r3
    708c:	0002      	movs	r2, r0
    708e:	2396      	movs	r3, #150	; 0x96
    7090:	005b      	lsls	r3, r3, #1
    7092:	18fb      	adds	r3, r7, r3
    7094:	681b      	ldr	r3, [r3, #0]
    7096:	1ad3      	subs	r3, r2, r3
    7098:	4a5d      	ldr	r2, [pc, #372]	; (7210 <vTask_GSM_service+0x3d4>)
    709a:	4293      	cmp	r3, r2
    709c:	d90c      	bls.n	70b8 <vTask_GSM_service+0x27c>
						{
							network_update_time = xTaskGetTickCount();
    709e:	4b5b      	ldr	r3, [pc, #364]	; (720c <vTask_GSM_service+0x3d0>)
    70a0:	4798      	blx	r3
    70a2:	0003      	movs	r3, r0
    70a4:	2296      	movs	r2, #150	; 0x96
    70a6:	0052      	lsls	r2, r2, #1
    70a8:	18ba      	adds	r2, r7, r2
    70aa:	6013      	str	r3, [r2, #0]
							Signal_Strength = gsm_getsignalstrength();
    70ac:	4b55      	ldr	r3, [pc, #340]	; (7204 <vTask_GSM_service+0x3c8>)
    70ae:	4798      	blx	r3
    70b0:	0003      	movs	r3, r0
    70b2:	001a      	movs	r2, r3
    70b4:	4b33      	ldr	r3, [pc, #204]	; (7184 <vTask_GSM_service+0x348>)
    70b6:	701a      	strb	r2, [r3, #0]
						}
						
						setObtainEvent();
    70b8:	4b56      	ldr	r3, [pc, #344]	; (7214 <vTask_GSM_service+0x3d8>)
    70ba:	4798      	blx	r3
						if (eventStaged || m2mEventStaged)
    70bc:	4b3d      	ldr	r3, [pc, #244]	; (71b4 <vTask_GSM_service+0x378>)
    70be:	781b      	ldrb	r3, [r3, #0]
    70c0:	2b00      	cmp	r3, #0
    70c2:	d104      	bne.n	70ce <vTask_GSM_service+0x292>
    70c4:	4b44      	ldr	r3, [pc, #272]	; (71d8 <vTask_GSM_service+0x39c>)
    70c6:	781b      	ldrb	r3, [r3, #0]
    70c8:	2b00      	cmp	r3, #0
    70ca:	d100      	bne.n	70ce <vTask_GSM_service+0x292>
    70cc:	e0b4      	b.n	7238 <vTask_GSM_service+0x3fc>
						{
							operateOnStagedEvent();
    70ce:	4b52      	ldr	r3, [pc, #328]	; (7218 <vTask_GSM_service+0x3dc>)
    70d0:	4798      	blx	r3
						if (eventStaged || m2mEventStaged)
    70d2:	e0b1      	b.n	7238 <vTask_GSM_service+0x3fc>
						}
					}
					else if (currentStatus == 'I' || currentStatus == 'R')
    70d4:	4b31      	ldr	r3, [pc, #196]	; (719c <vTask_GSM_service+0x360>)
    70d6:	781b      	ldrb	r3, [r3, #0]
    70d8:	b2db      	uxtb	r3, r3
    70da:	2b49      	cmp	r3, #73	; 0x49
    70dc:	d005      	beq.n	70ea <vTask_GSM_service+0x2ae>
    70de:	4b2f      	ldr	r3, [pc, #188]	; (719c <vTask_GSM_service+0x360>)
    70e0:	781b      	ldrb	r3, [r3, #0]
    70e2:	b2db      	uxtb	r3, r3
    70e4:	2b52      	cmp	r3, #82	; 0x52
    70e6:	d000      	beq.n	70ea <vTask_GSM_service+0x2ae>
    70e8:	e0a7      	b.n	723a <vTask_GSM_service+0x3fe>
					{
						if (callTimerExpire())
    70ea:	4b4c      	ldr	r3, [pc, #304]	; (721c <vTask_GSM_service+0x3e0>)
    70ec:	4798      	blx	r3
    70ee:	1e03      	subs	r3, r0, #0
    70f0:	d00e      	beq.n	7110 <vTask_GSM_service+0x2d4>
						{
							char t1 = actionType;
    70f2:	2326      	movs	r3, #38	; 0x26
    70f4:	33ff      	adds	r3, #255	; 0xff
    70f6:	18fb      	adds	r3, r7, r3
    70f8:	4a25      	ldr	r2, [pc, #148]	; (7190 <vTask_GSM_service+0x354>)
    70fa:	7812      	ldrb	r2, [r2, #0]
    70fc:	701a      	strb	r2, [r3, #0]
							endCall();
    70fe:	4b48      	ldr	r3, [pc, #288]	; (7220 <vTask_GSM_service+0x3e4>)
    7100:	4798      	blx	r3
							checkRespSMS(t1);
    7102:	2326      	movs	r3, #38	; 0x26
    7104:	33ff      	adds	r3, #255	; 0xff
    7106:	18fb      	adds	r3, r7, r3
    7108:	781b      	ldrb	r3, [r3, #0]
    710a:	0018      	movs	r0, r3
    710c:	4b45      	ldr	r3, [pc, #276]	; (7224 <vTask_GSM_service+0x3e8>)
    710e:	4798      	blx	r3
						}
						if (factory_settings_parameter_struct.ENABLE_M2M)
    7110:	4b2c      	ldr	r3, [pc, #176]	; (71c4 <vTask_GSM_service+0x388>)
    7112:	78db      	ldrb	r3, [r3, #3]
    7114:	2b00      	cmp	r3, #0
    7116:	d020      	beq.n	715a <vTask_GSM_service+0x31e>
						{
							if(m2mEvent && callAccepted)
    7118:	4b30      	ldr	r3, [pc, #192]	; (71dc <vTask_GSM_service+0x3a0>)
    711a:	781b      	ldrb	r3, [r3, #0]
    711c:	2b00      	cmp	r3, #0
    711e:	d01c      	beq.n	715a <vTask_GSM_service+0x31e>
    7120:	4b20      	ldr	r3, [pc, #128]	; (71a4 <vTask_GSM_service+0x368>)
    7122:	781b      	ldrb	r3, [r3, #0]
    7124:	2b00      	cmp	r3, #0
    7126:	d018      	beq.n	715a <vTask_GSM_service+0x31e>
							{
								if(!keyPressed &&  xTaskGetTickCount() - callCutWait > 2000)
    7128:	4b2d      	ldr	r3, [pc, #180]	; (71e0 <vTask_GSM_service+0x3a4>)
    712a:	781b      	ldrb	r3, [r3, #0]
    712c:	2201      	movs	r2, #1
    712e:	4053      	eors	r3, r2
    7130:	b2db      	uxtb	r3, r3
    7132:	2b00      	cmp	r3, #0
    7134:	d011      	beq.n	715a <vTask_GSM_service+0x31e>
    7136:	4b35      	ldr	r3, [pc, #212]	; (720c <vTask_GSM_service+0x3d0>)
    7138:	4798      	blx	r3
    713a:	0002      	movs	r2, r0
    713c:	4b3a      	ldr	r3, [pc, #232]	; (7228 <vTask_GSM_service+0x3ec>)
    713e:	681b      	ldr	r3, [r3, #0]
    7140:	1ad2      	subs	r2, r2, r3
    7142:	23fa      	movs	r3, #250	; 0xfa
    7144:	00db      	lsls	r3, r3, #3
    7146:	429a      	cmp	r2, r3
    7148:	d907      	bls.n	715a <vTask_GSM_service+0x31e>
								{
									keyPressed=true;
    714a:	4b25      	ldr	r3, [pc, #148]	; (71e0 <vTask_GSM_service+0x3a4>)
    714c:	2201      	movs	r2, #1
    714e:	701a      	strb	r2, [r3, #0]
									sendDTMFTone(m2mEventNo);
    7150:	4b1f      	ldr	r3, [pc, #124]	; (71d0 <vTask_GSM_service+0x394>)
    7152:	781b      	ldrb	r3, [r3, #0]
    7154:	0018      	movs	r0, r3
    7156:	4b35      	ldr	r3, [pc, #212]	; (722c <vTask_GSM_service+0x3f0>)
    7158:	4798      	blx	r3
								}
							}
						}
						if (playSoundElligible())
    715a:	4b35      	ldr	r3, [pc, #212]	; (7230 <vTask_GSM_service+0x3f4>)
    715c:	4798      	blx	r3
    715e:	1e03      	subs	r3, r0, #0
    7160:	d06b      	beq.n	723a <vTask_GSM_service+0x3fe>
						{
							triggerPlaySound();
    7162:	4b34      	ldr	r3, [pc, #208]	; (7234 <vTask_GSM_service+0x3f8>)
    7164:	4798      	blx	r3
    7166:	e068      	b.n	723a <vTask_GSM_service+0x3fe>
    7168:	41004480 	.word	0x41004480
    716c:	00003ec1 	.word	0x00003ec1
    7170:	00011d69 	.word	0x00011d69
    7174:	00002001 	.word	0x00002001
    7178:	20000765 	.word	0x20000765
    717c:	20000764 	.word	0x20000764
    7180:	2000074f 	.word	0x2000074f
    7184:	20000752 	.word	0x20000752
    7188:	2000078d 	.word	0x2000078d
    718c:	20000801 	.word	0x20000801
    7190:	2000072b 	.word	0x2000072b
    7194:	2000072c 	.word	0x2000072c
    7198:	200006c8 	.word	0x200006c8
    719c:	20000798 	.word	0x20000798
    71a0:	20000757 	.word	0x20000757
    71a4:	20000766 	.word	0x20000766
    71a8:	2000070c 	.word	0x2000070c
    71ac:	2000073a 	.word	0x2000073a
    71b0:	20000744 	.word	0x20000744
    71b4:	2000078a 	.word	0x2000078a
    71b8:	2000073c 	.word	0x2000073c
    71bc:	20000760 	.word	0x20000760
    71c0:	200006c9 	.word	0x200006c9
    71c4:	20000618 	.word	0x20000618
    71c8:	200007b3 	.word	0x200007b3
    71cc:	20000704 	.word	0x20000704
    71d0:	20000705 	.word	0x20000705
    71d4:	2000078b 	.word	0x2000078b
    71d8:	20000756 	.word	0x20000756
    71dc:	2000070b 	.word	0x2000070b
    71e0:	20000788 	.word	0x20000788
    71e4:	00003ee5 	.word	0x00003ee5
    71e8:	41004490 	.word	0x41004490
    71ec:	00000bb8 	.word	0x00000bb8
    71f0:	0000ee99 	.word	0x0000ee99
    71f4:	fffeffff 	.word	0xfffeffff
    71f8:	00001388 	.word	0x00001388
    71fc:	000023d1 	.word	0x000023d1
    7200:	000030bd 	.word	0x000030bd
    7204:	0000266d 	.word	0x0000266d
    7208:	000024bd 	.word	0x000024bd
    720c:	0000f1fd 	.word	0x0000f1fd
    7210:	0000752f 	.word	0x0000752f
    7214:	00003f29 	.word	0x00003f29
    7218:	00003f69 	.word	0x00003f69
    721c:	000045c9 	.word	0x000045c9
    7220:	00004071 	.word	0x00004071
    7224:	00004885 	.word	0x00004885
    7228:	200007bc 	.word	0x200007bc
    722c:	00006da9 	.word	0x00006da9
    7230:	00004431 	.word	0x00004431
    7234:	0000447d 	.word	0x0000447d
						if (eventStaged || m2mEventStaged)
    7238:	46c0      	nop			; (mov r8, r8)
						}
					}
					//////////////////////////////////////////////////////////////////////////
					char response[64] = {0};
    723a:	4bde      	ldr	r3, [pc, #888]	; (75b4 <vTask_GSM_service+0x778>)
    723c:	2298      	movs	r2, #152	; 0x98
    723e:	0052      	lsls	r2, r2, #1
    7240:	4694      	mov	ip, r2
    7242:	44bc      	add	ip, r7
    7244:	4463      	add	r3, ip
    7246:	0018      	movs	r0, r3
    7248:	2340      	movs	r3, #64	; 0x40
    724a:	001a      	movs	r2, r3
    724c:	2100      	movs	r1, #0
    724e:	4bda      	ldr	r3, [pc, #872]	; (75b8 <vTask_GSM_service+0x77c>)
    7250:	4798      	blx	r3
					if (gsm_read_response_line(response,sizeof(response)))
    7252:	230c      	movs	r3, #12
    7254:	18fb      	adds	r3, r7, r3
    7256:	2140      	movs	r1, #64	; 0x40
    7258:	0018      	movs	r0, r3
    725a:	4bd8      	ldr	r3, [pc, #864]	; (75bc <vTask_GSM_service+0x780>)
    725c:	4798      	blx	r3
    725e:	1e03      	subs	r3, r0, #0
    7260:	d100      	bne.n	7264 <vTask_GSM_service+0x428>
    7262:	e69a      	b.n	6f9a <vTask_GSM_service+0x15e>
					{
						uint8_t sms_index;
						sms_index = gsm_responseLine_isNew_SMS_Received(response);
    7264:	2392      	movs	r3, #146	; 0x92
    7266:	005b      	lsls	r3, r3, #1
    7268:	18fc      	adds	r4, r7, r3
    726a:	230c      	movs	r3, #12
    726c:	18fb      	adds	r3, r7, r3
    726e:	0018      	movs	r0, r3
    7270:	4bd3      	ldr	r3, [pc, #844]	; (75c0 <vTask_GSM_service+0x784>)
    7272:	4798      	blx	r3
    7274:	0003      	movs	r3, r0
    7276:	7023      	strb	r3, [r4, #0]
						if (sms_index>0)
    7278:	2392      	movs	r3, #146	; 0x92
    727a:	005b      	lsls	r3, r3, #1
    727c:	18fb      	adds	r3, r7, r3
    727e:	781b      	ldrb	r3, [r3, #0]
    7280:	2b00      	cmp	r3, #0
    7282:	d100      	bne.n	7286 <vTask_GSM_service+0x44a>
    7284:	e0d5      	b.n	7432 <vTask_GSM_service+0x5f6>
						{
							char phone_number[15];
							char Received_SMS[160];
							gsm_read_sms(sms_index,phone_number,15,Received_SMS,160);
    7286:	234c      	movs	r3, #76	; 0x4c
    7288:	18fa      	adds	r2, r7, r3
    728a:	1c79      	adds	r1, r7, #1
    728c:	31ff      	adds	r1, #255	; 0xff
    728e:	2392      	movs	r3, #146	; 0x92
    7290:	005b      	lsls	r3, r3, #1
    7292:	18fb      	adds	r3, r7, r3
    7294:	7818      	ldrb	r0, [r3, #0]
    7296:	23a0      	movs	r3, #160	; 0xa0
    7298:	9300      	str	r3, [sp, #0]
    729a:	0013      	movs	r3, r2
    729c:	220f      	movs	r2, #15
    729e:	4cc9      	ldr	r4, [pc, #804]	; (75c4 <vTask_GSM_service+0x788>)
    72a0:	47a0      	blx	r4
							bool admin = isAdmin(phone_number);
    72a2:	2324      	movs	r3, #36	; 0x24
    72a4:	33ff      	adds	r3, #255	; 0xff
    72a6:	18fc      	adds	r4, r7, r3
    72a8:	1c7b      	adds	r3, r7, #1
    72aa:	33ff      	adds	r3, #255	; 0xff
    72ac:	0018      	movs	r0, r3
    72ae:	4bc6      	ldr	r3, [pc, #792]	; (75c8 <vTask_GSM_service+0x78c>)
    72b0:	4798      	blx	r3
    72b2:	0003      	movs	r3, r0
    72b4:	7023      	strb	r3, [r4, #0]
							bool primaryUser = isPrimaryNumber(phone_number);
    72b6:	2391      	movs	r3, #145	; 0x91
    72b8:	005b      	lsls	r3, r3, #1
    72ba:	18fc      	adds	r4, r7, r3
    72bc:	1c7b      	adds	r3, r7, #1
    72be:	33ff      	adds	r3, #255	; 0xff
    72c0:	0018      	movs	r0, r3
    72c2:	4bc2      	ldr	r3, [pc, #776]	; (75cc <vTask_GSM_service+0x790>)
    72c4:	4798      	blx	r3
    72c6:	0003      	movs	r3, r0
    72c8:	7023      	strb	r3, [r4, #0]
							bool alterUsr = isAlterNumber(phone_number);
    72ca:	2322      	movs	r3, #34	; 0x22
    72cc:	33ff      	adds	r3, #255	; 0xff
    72ce:	18fc      	adds	r4, r7, r3
    72d0:	1c7b      	adds	r3, r7, #1
    72d2:	33ff      	adds	r3, #255	; 0xff
    72d4:	0018      	movs	r0, r3
    72d6:	4bbe      	ldr	r3, [pc, #760]	; (75d0 <vTask_GSM_service+0x794>)
    72d8:	4798      	blx	r3
    72da:	0003      	movs	r3, r0
    72dc:	7023      	strb	r3, [r4, #0]
							bool response_sms_processed_cmd = true;
    72de:	2394      	movs	r3, #148	; 0x94
    72e0:	005b      	lsls	r3, r3, #1
    72e2:	18fb      	adds	r3, r7, r3
    72e4:	2201      	movs	r2, #1
    72e6:	701a      	strb	r2, [r3, #0]
							
							if(isAdmin)
							{
								setCallStateOnLCD(LCDCALLSTATE_INCOMINGSMS,"ADMIN",false);
    72e8:	4bba      	ldr	r3, [pc, #744]	; (75d4 <vTask_GSM_service+0x798>)
    72ea:	2200      	movs	r2, #0
    72ec:	0019      	movs	r1, r3
    72ee:	2004      	movs	r0, #4
    72f0:	4bb9      	ldr	r3, [pc, #740]	; (75d8 <vTask_GSM_service+0x79c>)
    72f2:	4798      	blx	r3
							else
							{
								setCallStateOnLCD(LCDCALLSTATE_INCOMINGSMS,phone_number,false);
							}
							
							StringtoUpperCase(Received_SMS);
    72f4:	234c      	movs	r3, #76	; 0x4c
    72f6:	18fb      	adds	r3, r7, r3
    72f8:	0018      	movs	r0, r3
    72fa:	4bb8      	ldr	r3, [pc, #736]	; (75dc <vTask_GSM_service+0x7a0>)
    72fc:	4798      	blx	r3
							//{
							//memmove(Received_SMS,Received_SMS+17,strlen(Received_SMS));		//discard passPhrase
							//admin = true;													//set admin as true as passCode matches
							//}

							if (admin || primaryUser || alterUsr)
    72fe:	2324      	movs	r3, #36	; 0x24
    7300:	33ff      	adds	r3, #255	; 0xff
    7302:	18fb      	adds	r3, r7, r3
    7304:	781b      	ldrb	r3, [r3, #0]
    7306:	2b00      	cmp	r3, #0
    7308:	d10b      	bne.n	7322 <vTask_GSM_service+0x4e6>
    730a:	2391      	movs	r3, #145	; 0x91
    730c:	005b      	lsls	r3, r3, #1
    730e:	18fb      	adds	r3, r7, r3
    7310:	781b      	ldrb	r3, [r3, #0]
    7312:	2b00      	cmp	r3, #0
    7314:	d105      	bne.n	7322 <vTask_GSM_service+0x4e6>
    7316:	2322      	movs	r3, #34	; 0x22
    7318:	33ff      	adds	r3, #255	; 0xff
    731a:	18fb      	adds	r3, r7, r3
    731c:	781b      	ldrb	r3, [r3, #0]
    731e:	2b00      	cmp	r3, #0
    7320:	d031      	beq.n	7386 <vTask_GSM_service+0x54a>
							{
								if(StringstartsWith(Received_SMS,"#"))
    7322:	4aaf      	ldr	r2, [pc, #700]	; (75e0 <vTask_GSM_service+0x7a4>)
    7324:	234c      	movs	r3, #76	; 0x4c
    7326:	18fb      	adds	r3, r7, r3
    7328:	0011      	movs	r1, r2
    732a:	0018      	movs	r0, r3
    732c:	4bad      	ldr	r3, [pc, #692]	; (75e4 <vTask_GSM_service+0x7a8>)
    732e:	4798      	blx	r3
    7330:	1e03      	subs	r3, r0, #0
    7332:	d013      	beq.n	735c <vTask_GSM_service+0x520>
								{
									memmove(Received_SMS, Received_SMS+1, strlen(Received_SMS));  //this will remove '#'
    7334:	234c      	movs	r3, #76	; 0x4c
    7336:	18fc      	adds	r4, r7, r3
    7338:	3401      	adds	r4, #1
    733a:	234c      	movs	r3, #76	; 0x4c
    733c:	18fb      	adds	r3, r7, r3
    733e:	0018      	movs	r0, r3
    7340:	4ba9      	ldr	r3, [pc, #676]	; (75e8 <vTask_GSM_service+0x7ac>)
    7342:	4798      	blx	r3
    7344:	0002      	movs	r2, r0
    7346:	234c      	movs	r3, #76	; 0x4c
    7348:	18fb      	adds	r3, r7, r3
    734a:	0021      	movs	r1, r4
    734c:	0018      	movs	r0, r3
    734e:	4ba7      	ldr	r3, [pc, #668]	; (75ec <vTask_GSM_service+0x7b0>)
    7350:	4798      	blx	r3
									response_sms_processed_cmd=false;
    7352:	2394      	movs	r3, #148	; 0x94
    7354:	005b      	lsls	r3, r3, #1
    7356:	18fb      	adds	r3, r7, r3
    7358:	2200      	movs	r2, #0
    735a:	701a      	strb	r2, [r3, #0]
								}
								processOnSMS(Received_SMS,admin,response_sms_processed_cmd,alterUsr,phone_number);
    735c:	2322      	movs	r3, #34	; 0x22
    735e:	33ff      	adds	r3, #255	; 0xff
    7360:	18fb      	adds	r3, r7, r3
    7362:	781c      	ldrb	r4, [r3, #0]
    7364:	2394      	movs	r3, #148	; 0x94
    7366:	005b      	lsls	r3, r3, #1
    7368:	18fb      	adds	r3, r7, r3
    736a:	781a      	ldrb	r2, [r3, #0]
    736c:	2324      	movs	r3, #36	; 0x24
    736e:	33ff      	adds	r3, #255	; 0xff
    7370:	18fb      	adds	r3, r7, r3
    7372:	7819      	ldrb	r1, [r3, #0]
    7374:	234c      	movs	r3, #76	; 0x4c
    7376:	18f8      	adds	r0, r7, r3
    7378:	1c7b      	adds	r3, r7, #1
    737a:	33ff      	adds	r3, #255	; 0xff
    737c:	9300      	str	r3, [sp, #0]
    737e:	0023      	movs	r3, r4
    7380:	4c9b      	ldr	r4, [pc, #620]	; (75f0 <vTask_GSM_service+0x7b4>)
    7382:	47a0      	blx	r4
    7384:	e053      	b.n	742e <vTask_GSM_service+0x5f2>
							}
							else if(isM2MNumber(phone_number))
    7386:	1c7b      	adds	r3, r7, #1
    7388:	33ff      	adds	r3, #255	; 0xff
    738a:	0018      	movs	r0, r3
    738c:	4b99      	ldr	r3, [pc, #612]	; (75f4 <vTask_GSM_service+0x7b8>)
    738e:	4798      	blx	r3
    7390:	1e03      	subs	r3, r0, #0
    7392:	d01f      	beq.n	73d4 <vTask_GSM_service+0x598>
							{
								if(StringstartsWith(Received_SMS,"VMM01"))
    7394:	4a98      	ldr	r2, [pc, #608]	; (75f8 <vTask_GSM_service+0x7bc>)
    7396:	234c      	movs	r3, #76	; 0x4c
    7398:	18fb      	adds	r3, r7, r3
    739a:	0011      	movs	r1, r2
    739c:	0018      	movs	r0, r3
    739e:	4b91      	ldr	r3, [pc, #580]	; (75e4 <vTask_GSM_service+0x7a8>)
    73a0:	4798      	blx	r3
    73a2:	1e03      	subs	r3, r0, #0
    73a4:	d043      	beq.n	742e <vTask_GSM_service+0x5f2>
								{
									setM2MVerify(true);
    73a6:	2001      	movs	r0, #1
    73a8:	4b94      	ldr	r3, [pc, #592]	; (75fc <vTask_GSM_service+0x7c0>)
    73aa:	4798      	blx	r3
									getM2MNumber(phone_number);
    73ac:	1c7b      	adds	r3, r7, #1
    73ae:	33ff      	adds	r3, #255	; 0xff
    73b0:	0018      	movs	r0, r3
    73b2:	4b93      	ldr	r3, [pc, #588]	; (7600 <vTask_GSM_service+0x7c4>)
    73b4:	4798      	blx	r3
									setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
    73b6:	1c7b      	adds	r3, r7, #1
    73b8:	33ff      	adds	r3, #255	; 0xff
    73ba:	2200      	movs	r2, #0
    73bc:	0019      	movs	r1, r3
    73be:	2005      	movs	r0, #5
    73c0:	4b85      	ldr	r3, [pc, #532]	; (75d8 <vTask_GSM_service+0x79c>)
    73c2:	4798      	blx	r3
									gsm_send_sms(phone_number,"VMR02");
    73c4:	4a8f      	ldr	r2, [pc, #572]	; (7604 <vTask_GSM_service+0x7c8>)
    73c6:	1c7b      	adds	r3, r7, #1
    73c8:	33ff      	adds	r3, #255	; 0xff
    73ca:	0011      	movs	r1, r2
    73cc:	0018      	movs	r0, r3
    73ce:	4b8e      	ldr	r3, [pc, #568]	; (7608 <vTask_GSM_service+0x7cc>)
    73d0:	4798      	blx	r3
    73d2:	e02c      	b.n	742e <vTask_GSM_service+0x5f2>
								}
							}
							else if(factory_settings_parameter_struct.ENABLE_M2M && isM2MRemoteNumber(phone_number))
    73d4:	4b8d      	ldr	r3, [pc, #564]	; (760c <vTask_GSM_service+0x7d0>)
    73d6:	78db      	ldrb	r3, [r3, #3]
    73d8:	2b00      	cmp	r3, #0
    73da:	d028      	beq.n	742e <vTask_GSM_service+0x5f2>
    73dc:	1c7b      	adds	r3, r7, #1
    73de:	33ff      	adds	r3, #255	; 0xff
    73e0:	0018      	movs	r0, r3
    73e2:	4b8b      	ldr	r3, [pc, #556]	; (7610 <vTask_GSM_service+0x7d4>)
    73e4:	4798      	blx	r3
    73e6:	1e03      	subs	r3, r0, #0
    73e8:	d021      	beq.n	742e <vTask_GSM_service+0x5f2>
							{
								if(StringstartsWith(Received_SMS,"VMR02"))
    73ea:	4a86      	ldr	r2, [pc, #536]	; (7604 <vTask_GSM_service+0x7c8>)
    73ec:	234c      	movs	r3, #76	; 0x4c
    73ee:	18fb      	adds	r3, r7, r3
    73f0:	0011      	movs	r1, r2
    73f2:	0018      	movs	r0, r3
    73f4:	4b7b      	ldr	r3, [pc, #492]	; (75e4 <vTask_GSM_service+0x7a8>)
    73f6:	4798      	blx	r3
    73f8:	1e03      	subs	r3, r0, #0
    73fa:	d018      	beq.n	742e <vTask_GSM_service+0x5f2>
								{
									setM2MRemoteVerified(true);
    73fc:	2001      	movs	r0, #1
    73fe:	4b85      	ldr	r3, [pc, #532]	; (7614 <vTask_GSM_service+0x7d8>)
    7400:	4798      	blx	r3
									saveM2MSettings(true);
    7402:	2001      	movs	r0, #1
    7404:	4b84      	ldr	r3, [pc, #528]	; (7618 <vTask_GSM_service+0x7dc>)
    7406:	4798      	blx	r3
									getActiveNumber(phone_number);
    7408:	1c7b      	adds	r3, r7, #1
    740a:	33ff      	adds	r3, #255	; 0xff
    740c:	0018      	movs	r0, r3
    740e:	4b83      	ldr	r3, [pc, #524]	; (761c <vTask_GSM_service+0x7e0>)
    7410:	4798      	blx	r3
									setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
    7412:	1c7b      	adds	r3, r7, #1
    7414:	33ff      	adds	r3, #255	; 0xff
    7416:	2200      	movs	r2, #0
    7418:	0019      	movs	r1, r3
    741a:	2005      	movs	r0, #5
    741c:	4b6e      	ldr	r3, [pc, #440]	; (75d8 <vTask_GSM_service+0x79c>)
    741e:	4798      	blx	r3
									gsm_send_sms(phone_number,"M2M TURNED ON");
    7420:	4a7f      	ldr	r2, [pc, #508]	; (7620 <vTask_GSM_service+0x7e4>)
    7422:	1c7b      	adds	r3, r7, #1
    7424:	33ff      	adds	r3, #255	; 0xff
    7426:	0011      	movs	r1, r2
    7428:	0018      	movs	r0, r3
    742a:	4b77      	ldr	r3, [pc, #476]	; (7608 <vTask_GSM_service+0x7cc>)
    742c:	4798      	blx	r3
								}
							}
							gsm_delete_all_sms();
    742e:	4b7d      	ldr	r3, [pc, #500]	; (7624 <vTask_GSM_service+0x7e8>)
    7430:	4798      	blx	r3
						}


						if (!freezeIncomingCalls &&  (currentStatus == 'N' || currentStatus == 'R') && (currentCallStatus == 'N' || currentCallStatus == 'I')) //Ringing Incoming Call
    7432:	4b7d      	ldr	r3, [pc, #500]	; (7628 <vTask_GSM_service+0x7ec>)
    7434:	781b      	ldrb	r3, [r3, #0]
    7436:	2201      	movs	r2, #1
    7438:	4053      	eors	r3, r2
    743a:	b2db      	uxtb	r3, r3
    743c:	2b00      	cmp	r3, #0
    743e:	d100      	bne.n	7442 <vTask_GSM_service+0x606>
    7440:	e099      	b.n	7576 <vTask_GSM_service+0x73a>
    7442:	4b7a      	ldr	r3, [pc, #488]	; (762c <vTask_GSM_service+0x7f0>)
    7444:	781b      	ldrb	r3, [r3, #0]
    7446:	b2db      	uxtb	r3, r3
    7448:	2b4e      	cmp	r3, #78	; 0x4e
    744a:	d005      	beq.n	7458 <vTask_GSM_service+0x61c>
    744c:	4b77      	ldr	r3, [pc, #476]	; (762c <vTask_GSM_service+0x7f0>)
    744e:	781b      	ldrb	r3, [r3, #0]
    7450:	b2db      	uxtb	r3, r3
    7452:	2b52      	cmp	r3, #82	; 0x52
    7454:	d000      	beq.n	7458 <vTask_GSM_service+0x61c>
    7456:	e08e      	b.n	7576 <vTask_GSM_service+0x73a>
    7458:	4b75      	ldr	r3, [pc, #468]	; (7630 <vTask_GSM_service+0x7f4>)
    745a:	781b      	ldrb	r3, [r3, #0]
    745c:	b2db      	uxtb	r3, r3
    745e:	2b4e      	cmp	r3, #78	; 0x4e
    7460:	d005      	beq.n	746e <vTask_GSM_service+0x632>
    7462:	4b73      	ldr	r3, [pc, #460]	; (7630 <vTask_GSM_service+0x7f4>)
    7464:	781b      	ldrb	r3, [r3, #0]
    7466:	b2db      	uxtb	r3, r3
    7468:	2b49      	cmp	r3, #73	; 0x49
    746a:	d000      	beq.n	746e <vTask_GSM_service+0x632>
    746c:	e083      	b.n	7576 <vTask_GSM_service+0x73a>
						{
							if (gsm_responseLine_isRinging(response))
    746e:	230c      	movs	r3, #12
    7470:	18fb      	adds	r3, r7, r3
    7472:	0018      	movs	r0, r3
    7474:	4b6f      	ldr	r3, [pc, #444]	; (7634 <vTask_GSM_service+0x7f8>)
    7476:	4798      	blx	r3
    7478:	1e03      	subs	r3, r0, #0
    747a:	d071      	beq.n	7560 <vTask_GSM_service+0x724>
							{
								currentStatus = 'R';
    747c:	4b6b      	ldr	r3, [pc, #428]	; (762c <vTask_GSM_service+0x7f0>)
    747e:	2252      	movs	r2, #82	; 0x52
    7480:	701a      	strb	r2, [r3, #0]
								currentCallStatus = 'I';
    7482:	4b6b      	ldr	r3, [pc, #428]	; (7630 <vTask_GSM_service+0x7f4>)
    7484:	2249      	movs	r2, #73	; 0x49
    7486:	701a      	strb	r2, [r3, #0]
								char incoming_caller[20]={0};
    7488:	23ec      	movs	r3, #236	; 0xec
    748a:	18fb      	adds	r3, r7, r3
    748c:	0018      	movs	r0, r3
    748e:	2314      	movs	r3, #20
    7490:	001a      	movs	r2, r3
    7492:	2100      	movs	r1, #0
    7494:	4b48      	ldr	r3, [pc, #288]	; (75b8 <vTask_GSM_service+0x77c>)
    7496:	4798      	blx	r3
								inCall = true;
    7498:	4b67      	ldr	r3, [pc, #412]	; (7638 <vTask_GSM_service+0x7fc>)
    749a:	2201      	movs	r2, #1
    749c:	701a      	strb	r2, [r3, #0]
								
								bool new_call = false;
    749e:	2328      	movs	r3, #40	; 0x28
    74a0:	33ff      	adds	r3, #255	; 0xff
    74a2:	18fb      	adds	r3, r7, r3
    74a4:	2200      	movs	r2, #0
    74a6:	701a      	strb	r2, [r3, #0]
								for (uint8_t i=0;i<4;i++)
    74a8:	2393      	movs	r3, #147	; 0x93
    74aa:	005b      	lsls	r3, r3, #1
    74ac:	18fb      	adds	r3, r7, r3
    74ae:	2200      	movs	r2, #0
    74b0:	701a      	strb	r2, [r3, #0]
    74b2:	e02f      	b.n	7514 <vTask_GSM_service+0x6d8>
								{
									vTaskDelay(500/portTICK_PERIOD_MS);
    74b4:	23fa      	movs	r3, #250	; 0xfa
    74b6:	005b      	lsls	r3, r3, #1
    74b8:	0018      	movs	r0, r3
    74ba:	4b60      	ldr	r3, [pc, #384]	; (763c <vTask_GSM_service+0x800>)
    74bc:	4798      	blx	r3
									gsm_read_response_line(response,sizeof(response));
    74be:	230c      	movs	r3, #12
    74c0:	18fb      	adds	r3, r7, r3
    74c2:	2140      	movs	r1, #64	; 0x40
    74c4:	0018      	movs	r0, r3
    74c6:	4b3d      	ldr	r3, [pc, #244]	; (75bc <vTask_GSM_service+0x780>)
    74c8:	4798      	blx	r3
									if (gsm_responseLine_get_IncommingCallNo(response,incoming_caller))
    74ca:	23ec      	movs	r3, #236	; 0xec
    74cc:	18fa      	adds	r2, r7, r3
    74ce:	230c      	movs	r3, #12
    74d0:	18fb      	adds	r3, r7, r3
    74d2:	0011      	movs	r1, r2
    74d4:	0018      	movs	r0, r3
    74d6:	4b5a      	ldr	r3, [pc, #360]	; (7640 <vTask_GSM_service+0x804>)
    74d8:	4798      	blx	r3
    74da:	1e03      	subs	r3, r0, #0
    74dc:	d011      	beq.n	7502 <vTask_GSM_service+0x6c6>
									{
										setCallStateOnLCD(LCDCALLSTATE_RINGING,incoming_caller,false);
    74de:	23ec      	movs	r3, #236	; 0xec
    74e0:	18fb      	adds	r3, r7, r3
    74e2:	2200      	movs	r2, #0
    74e4:	0019      	movs	r1, r3
    74e6:	2001      	movs	r0, #1
    74e8:	4b3b      	ldr	r3, [pc, #236]	; (75d8 <vTask_GSM_service+0x79c>)
    74ea:	4798      	blx	r3
										new_call = true;
    74ec:	2328      	movs	r3, #40	; 0x28
    74ee:	33ff      	adds	r3, #255	; 0xff
    74f0:	18fb      	adds	r3, r7, r3
    74f2:	2201      	movs	r2, #1
    74f4:	701a      	strb	r2, [r3, #0]
										callCutWait = xTaskGetTickCount();
    74f6:	4b53      	ldr	r3, [pc, #332]	; (7644 <vTask_GSM_service+0x808>)
    74f8:	4798      	blx	r3
    74fa:	0002      	movs	r2, r0
    74fc:	4b52      	ldr	r3, [pc, #328]	; (7648 <vTask_GSM_service+0x80c>)
    74fe:	601a      	str	r2, [r3, #0]
										break;
    7500:	e00e      	b.n	7520 <vTask_GSM_service+0x6e4>
								for (uint8_t i=0;i<4;i++)
    7502:	2393      	movs	r3, #147	; 0x93
    7504:	005b      	lsls	r3, r3, #1
    7506:	18fb      	adds	r3, r7, r3
    7508:	781a      	ldrb	r2, [r3, #0]
    750a:	2393      	movs	r3, #147	; 0x93
    750c:	005b      	lsls	r3, r3, #1
    750e:	18fb      	adds	r3, r7, r3
    7510:	3201      	adds	r2, #1
    7512:	701a      	strb	r2, [r3, #0]
    7514:	2393      	movs	r3, #147	; 0x93
    7516:	005b      	lsls	r3, r3, #1
    7518:	18fb      	adds	r3, r7, r3
    751a:	781b      	ldrb	r3, [r3, #0]
    751c:	2b03      	cmp	r3, #3
    751e:	d9c9      	bls.n	74b4 <vTask_GSM_service+0x678>
									}
								}
								if (new_call)
    7520:	2328      	movs	r3, #40	; 0x28
    7522:	33ff      	adds	r3, #255	; 0xff
    7524:	18fb      	adds	r3, r7, r3
    7526:	781b      	ldrb	r3, [r3, #0]
    7528:	2b00      	cmp	r3, #0
    752a:	d100      	bne.n	752e <vTask_GSM_service+0x6f2>
    752c:	e1ab      	b.n	7886 <vTask_GSM_service+0xa4a>
								{
									new_call = false;
    752e:	2328      	movs	r3, #40	; 0x28
    7530:	33ff      	adds	r3, #255	; 0xff
    7532:	18fb      	adds	r3, r7, r3
    7534:	2200      	movs	r2, #0
    7536:	701a      	strb	r2, [r3, #0]
									if (checkNumber(incoming_caller))
    7538:	23ec      	movs	r3, #236	; 0xec
    753a:	18fb      	adds	r3, r7, r3
    753c:	0018      	movs	r0, r3
    753e:	4b43      	ldr	r3, [pc, #268]	; (764c <vTask_GSM_service+0x810>)
    7540:	4798      	blx	r3
    7542:	1e03      	subs	r3, r0, #0
    7544:	d009      	beq.n	755a <vTask_GSM_service+0x71e>
									{
										acceptCall();
    7546:	4b42      	ldr	r3, [pc, #264]	; (7650 <vTask_GSM_service+0x814>)
    7548:	4798      	blx	r3
										setCallStateOnLCD(LCDCALLSTATE_INCALL,incoming_caller,false);
    754a:	23ec      	movs	r3, #236	; 0xec
    754c:	18fb      	adds	r3, r7, r3
    754e:	2200      	movs	r2, #0
    7550:	0019      	movs	r1, r3
    7552:	2002      	movs	r0, #2
    7554:	4b20      	ldr	r3, [pc, #128]	; (75d8 <vTask_GSM_service+0x79c>)
    7556:	4798      	blx	r3
							if (gsm_responseLine_isRinging(response))
    7558:	e195      	b.n	7886 <vTask_GSM_service+0xa4a>
									}
									else
									{
										endCall();
    755a:	4b3e      	ldr	r3, [pc, #248]	; (7654 <vTask_GSM_service+0x818>)
    755c:	4798      	blx	r3
							if (gsm_responseLine_isRinging(response))
    755e:	e192      	b.n	7886 <vTask_GSM_service+0xa4a>
									}
								}
							}
							else if (gsm_responseLine_isCallCut(response))
    7560:	230c      	movs	r3, #12
    7562:	18fb      	adds	r3, r7, r3
    7564:	0018      	movs	r0, r3
    7566:	4b3c      	ldr	r3, [pc, #240]	; (7658 <vTask_GSM_service+0x81c>)
    7568:	4798      	blx	r3
    756a:	1e03      	subs	r3, r0, #0
    756c:	d100      	bne.n	7570 <vTask_GSM_service+0x734>
    756e:	e18a      	b.n	7886 <vTask_GSM_service+0xa4a>
							{
								endCall();
    7570:	4b38      	ldr	r3, [pc, #224]	; (7654 <vTask_GSM_service+0x818>)
    7572:	4798      	blx	r3
							if (gsm_responseLine_isRinging(response))
    7574:	e187      	b.n	7886 <vTask_GSM_service+0xa4a>
							}
						}
						else if (!freezeIncomingCalls && currentStatus == 'I' && currentCallStatus == 'I') //IN CALL INCOMING CALL
    7576:	4b2c      	ldr	r3, [pc, #176]	; (7628 <vTask_GSM_service+0x7ec>)
    7578:	781b      	ldrb	r3, [r3, #0]
    757a:	2201      	movs	r2, #1
    757c:	4053      	eors	r3, r2
    757e:	b2db      	uxtb	r3, r3
    7580:	2b00      	cmp	r3, #0
    7582:	d100      	bne.n	7586 <vTask_GSM_service+0x74a>
    7584:	e09c      	b.n	76c0 <vTask_GSM_service+0x884>
    7586:	4b29      	ldr	r3, [pc, #164]	; (762c <vTask_GSM_service+0x7f0>)
    7588:	781b      	ldrb	r3, [r3, #0]
    758a:	b2db      	uxtb	r3, r3
    758c:	2b49      	cmp	r3, #73	; 0x49
    758e:	d000      	beq.n	7592 <vTask_GSM_service+0x756>
    7590:	e096      	b.n	76c0 <vTask_GSM_service+0x884>
    7592:	4b27      	ldr	r3, [pc, #156]	; (7630 <vTask_GSM_service+0x7f4>)
    7594:	781b      	ldrb	r3, [r3, #0]
    7596:	b2db      	uxtb	r3, r3
    7598:	2b49      	cmp	r3, #73	; 0x49
    759a:	d000      	beq.n	759e <vTask_GSM_service+0x762>
    759c:	e090      	b.n	76c0 <vTask_GSM_service+0x884>
						{
							if (gsm_responseLine_isCallCut(response))
    759e:	230c      	movs	r3, #12
    75a0:	18fb      	adds	r3, r7, r3
    75a2:	0018      	movs	r0, r3
    75a4:	4b2c      	ldr	r3, [pc, #176]	; (7658 <vTask_GSM_service+0x81c>)
    75a6:	4798      	blx	r3
    75a8:	1e03      	subs	r3, r0, #0
    75aa:	d057      	beq.n	765c <vTask_GSM_service+0x820>
							{
								endCall();
    75ac:	4b29      	ldr	r3, [pc, #164]	; (7654 <vTask_GSM_service+0x818>)
    75ae:	4798      	blx	r3
							if (gsm_responseLine_isCallCut(response))
    75b0:	e16d      	b.n	788e <vTask_GSM_service+0xa52>
    75b2:	46c0      	nop			; (mov r8, r8)
    75b4:	fffffedc 	.word	0xfffffedc
    75b8:	00017b57 	.word	0x00017b57
    75bc:	000031c5 	.word	0x000031c5
    75c0:	00003255 	.word	0x00003255
    75c4:	000029e1 	.word	0x000029e1
    75c8:	00001991 	.word	0x00001991
    75cc:	0000099d 	.word	0x0000099d
    75d0:	00000a0d 	.word	0x00000a0d
    75d4:	000192e0 	.word	0x000192e0
    75d8:	0000bbdd 	.word	0x0000bbdd
    75dc:	00003d49 	.word	0x00003d49
    75e0:	000192e8 	.word	0x000192e8
    75e4:	00003db5 	.word	0x00003db5
    75e8:	00017de7 	.word	0x00017de7
    75ec:	00017b33 	.word	0x00017b33
    75f0:	00004b01 	.word	0x00004b01
    75f4:	00000a55 	.word	0x00000a55
    75f8:	000192cc 	.word	0x000192cc
    75fc:	00000b45 	.word	0x00000b45
    7600:	00000acd 	.word	0x00000acd
    7604:	000192ec 	.word	0x000192ec
    7608:	000028b5 	.word	0x000028b5
    760c:	20000618 	.word	0x20000618
    7610:	00000a91 	.word	0x00000a91
    7614:	00000b95 	.word	0x00000b95
    7618:	00000be5 	.word	0x00000be5
    761c:	00000d21 	.word	0x00000d21
    7620:	000192f4 	.word	0x000192f4
    7624:	000024bd 	.word	0x000024bd
    7628:	2000070c 	.word	0x2000070c
    762c:	20000798 	.word	0x20000798
    7630:	20000757 	.word	0x20000757
    7634:	000032dd 	.word	0x000032dd
    7638:	20000764 	.word	0x20000764
    763c:	0000ee99 	.word	0x0000ee99
    7640:	0000330d 	.word	0x0000330d
    7644:	0000f1fd 	.word	0x0000f1fd
    7648:	200007bc 	.word	0x200007bc
    764c:	00006ac5 	.word	0x00006ac5
    7650:	00004369 	.word	0x00004369
    7654:	00004071 	.word	0x00004071
    7658:	000033b1 	.word	0x000033b1
							}
							else if(gsm_responseLine_isNew_DTMF_Command_Received(response))
    765c:	230c      	movs	r3, #12
    765e:	18fb      	adds	r3, r7, r3
    7660:	0018      	movs	r0, r3
    7662:	4b8c      	ldr	r3, [pc, #560]	; (7894 <vTask_GSM_service+0xa58>)
    7664:	4798      	blx	r3
    7666:	1e03      	subs	r3, r0, #0
    7668:	d024      	beq.n	76b4 <vTask_GSM_service+0x878>
							{
								char *dtmf_tocken;
								dtmf_tocken = strtok(response,": ");
    766a:	4a8b      	ldr	r2, [pc, #556]	; (7898 <vTask_GSM_service+0xa5c>)
    766c:	230c      	movs	r3, #12
    766e:	18fb      	adds	r3, r7, r3
    7670:	0011      	movs	r1, r2
    7672:	0018      	movs	r0, r3
    7674:	4b89      	ldr	r3, [pc, #548]	; (789c <vTask_GSM_service+0xa60>)
    7676:	4798      	blx	r3
    7678:	0003      	movs	r3, r0
    767a:	228e      	movs	r2, #142	; 0x8e
    767c:	0052      	lsls	r2, r2, #1
    767e:	18ba      	adds	r2, r7, r2
    7680:	6013      	str	r3, [r2, #0]
								dtmf_tocken = strtok(NULL,": ");
    7682:	4b85      	ldr	r3, [pc, #532]	; (7898 <vTask_GSM_service+0xa5c>)
    7684:	0019      	movs	r1, r3
    7686:	2000      	movs	r0, #0
    7688:	4b84      	ldr	r3, [pc, #528]	; (789c <vTask_GSM_service+0xa60>)
    768a:	4798      	blx	r3
    768c:	0003      	movs	r3, r0
    768e:	228e      	movs	r2, #142	; 0x8e
    7690:	0052      	lsls	r2, r2, #1
    7692:	18ba      	adds	r2, r7, r2
    7694:	6013      	str	r3, [r2, #0]
								RemoveSpaces(dtmf_tocken);
    7696:	238e      	movs	r3, #142	; 0x8e
    7698:	005b      	lsls	r3, r3, #1
    769a:	18fb      	adds	r3, r7, r3
    769c:	681b      	ldr	r3, [r3, #0]
    769e:	0018      	movs	r0, r3
    76a0:	4b7f      	ldr	r3, [pc, #508]	; (78a0 <vTask_GSM_service+0xa64>)
    76a2:	4798      	blx	r3
								processOnDTMF(dtmf_tocken);
    76a4:	238e      	movs	r3, #142	; 0x8e
    76a6:	005b      	lsls	r3, r3, #1
    76a8:	18fb      	adds	r3, r7, r3
    76aa:	681b      	ldr	r3, [r3, #0]
    76ac:	0018      	movs	r0, r3
    76ae:	4b7d      	ldr	r3, [pc, #500]	; (78a4 <vTask_GSM_service+0xa68>)
    76b0:	4798      	blx	r3
							if (gsm_responseLine_isCallCut(response))
    76b2:	e0ec      	b.n	788e <vTask_GSM_service+0xa52>
							}
							else
							{
								playSoundAgain(response);
    76b4:	230c      	movs	r3, #12
    76b6:	18fb      	adds	r3, r7, r3
    76b8:	0018      	movs	r0, r3
    76ba:	4b7b      	ldr	r3, [pc, #492]	; (78a8 <vTask_GSM_service+0xa6c>)
    76bc:	4798      	blx	r3
							if (gsm_responseLine_isCallCut(response))
    76be:	e0e6      	b.n	788e <vTask_GSM_service+0xa52>
							}
						}
						else if ((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O') // OUTGOING CALL
    76c0:	4b7a      	ldr	r3, [pc, #488]	; (78ac <vTask_GSM_service+0xa70>)
    76c2:	781b      	ldrb	r3, [r3, #0]
    76c4:	b2db      	uxtb	r3, r3
    76c6:	2b4e      	cmp	r3, #78	; 0x4e
    76c8:	d004      	beq.n	76d4 <vTask_GSM_service+0x898>
    76ca:	4b78      	ldr	r3, [pc, #480]	; (78ac <vTask_GSM_service+0xa70>)
    76cc:	781b      	ldrb	r3, [r3, #0]
    76ce:	b2db      	uxtb	r3, r3
    76d0:	2b52      	cmp	r3, #82	; 0x52
    76d2:	d163      	bne.n	779c <vTask_GSM_service+0x960>
    76d4:	4b76      	ldr	r3, [pc, #472]	; (78b0 <vTask_GSM_service+0xa74>)
    76d6:	781b      	ldrb	r3, [r3, #0]
    76d8:	b2db      	uxtb	r3, r3
    76da:	2b4f      	cmp	r3, #79	; 0x4f
    76dc:	d15e      	bne.n	779c <vTask_GSM_service+0x960>
						{
							if (OutGoingcallState(response) == 'R')
    76de:	230c      	movs	r3, #12
    76e0:	18fb      	adds	r3, r7, r3
    76e2:	0018      	movs	r0, r3
    76e4:	4b73      	ldr	r3, [pc, #460]	; (78b4 <vTask_GSM_service+0xa78>)
    76e6:	4798      	blx	r3
    76e8:	0003      	movs	r3, r0
    76ea:	2b52      	cmp	r3, #82	; 0x52
    76ec:	d10b      	bne.n	7706 <vTask_GSM_service+0x8ca>
							{
								callCutWait = xTaskGetTickCount();
    76ee:	4b72      	ldr	r3, [pc, #456]	; (78b8 <vTask_GSM_service+0xa7c>)
    76f0:	4798      	blx	r3
    76f2:	0002      	movs	r2, r0
    76f4:	4b71      	ldr	r3, [pc, #452]	; (78bc <vTask_GSM_service+0xa80>)
    76f6:	601a      	str	r2, [r3, #0]
								currentStatus = 'R';
    76f8:	4b6c      	ldr	r3, [pc, #432]	; (78ac <vTask_GSM_service+0xa70>)
    76fa:	2252      	movs	r2, #82	; 0x52
    76fc:	701a      	strb	r2, [r3, #0]
								currentCallStatus = 'O';
    76fe:	4b6c      	ldr	r3, [pc, #432]	; (78b0 <vTask_GSM_service+0xa74>)
    7700:	224f      	movs	r2, #79	; 0x4f
    7702:	701a      	strb	r2, [r3, #0]
							if (OutGoingcallState(response) == 'R')
    7704:	e0c2      	b.n	788c <vTask_GSM_service+0xa50>
							}
							else if (gsm_responseLine_isCallCut(response) || OutGoingcallState(response) == 'E') //
    7706:	230c      	movs	r3, #12
    7708:	18fb      	adds	r3, r7, r3
    770a:	0018      	movs	r0, r3
    770c:	4b6c      	ldr	r3, [pc, #432]	; (78c0 <vTask_GSM_service+0xa84>)
    770e:	4798      	blx	r3
    7710:	1e03      	subs	r3, r0, #0
    7712:	d107      	bne.n	7724 <vTask_GSM_service+0x8e8>
    7714:	230c      	movs	r3, #12
    7716:	18fb      	adds	r3, r7, r3
    7718:	0018      	movs	r0, r3
    771a:	4b66      	ldr	r3, [pc, #408]	; (78b4 <vTask_GSM_service+0xa78>)
    771c:	4798      	blx	r3
    771e:	0003      	movs	r3, r0
    7720:	2b45      	cmp	r3, #69	; 0x45
    7722:	d110      	bne.n	7746 <vTask_GSM_service+0x90a>
							{
								char t1 = actionType;
    7724:	231c      	movs	r3, #28
    7726:	33ff      	adds	r3, #255	; 0xff
    7728:	18fb      	adds	r3, r7, r3
    772a:	4a66      	ldr	r2, [pc, #408]	; (78c4 <vTask_GSM_service+0xa88>)
    772c:	7812      	ldrb	r2, [r2, #0]
    772e:	701a      	strb	r2, [r3, #0]
								endCall();
    7730:	4b65      	ldr	r3, [pc, #404]	; (78c8 <vTask_GSM_service+0xa8c>)
    7732:	4798      	blx	r3
								checkRespSMS(t1);
    7734:	231c      	movs	r3, #28
    7736:	33ff      	adds	r3, #255	; 0xff
    7738:	18fb      	adds	r3, r7, r3
    773a:	781b      	ldrb	r3, [r3, #0]
    773c:	0018      	movs	r0, r3
    773e:	4b63      	ldr	r3, [pc, #396]	; (78cc <vTask_GSM_service+0xa90>)
    7740:	4798      	blx	r3
							{
    7742:	46c0      	nop			; (mov r8, r8)
							if (OutGoingcallState(response) == 'R')
    7744:	e0a2      	b.n	788c <vTask_GSM_service+0xa50>
							}
							else if (OutGoingcallState(response) == 'I')
    7746:	230c      	movs	r3, #12
    7748:	18fb      	adds	r3, r7, r3
    774a:	0018      	movs	r0, r3
    774c:	4b59      	ldr	r3, [pc, #356]	; (78b4 <vTask_GSM_service+0xa78>)
    774e:	4798      	blx	r3
    7750:	0003      	movs	r3, r0
    7752:	2b49      	cmp	r3, #73	; 0x49
    7754:	d000      	beq.n	7758 <vTask_GSM_service+0x91c>
    7756:	e099      	b.n	788c <vTask_GSM_service+0xa50>
							{
								callCutWait = xTaskGetTickCount();
    7758:	4b57      	ldr	r3, [pc, #348]	; (78b8 <vTask_GSM_service+0xa7c>)
    775a:	4798      	blx	r3
    775c:	0002      	movs	r2, r0
    775e:	4b57      	ldr	r3, [pc, #348]	; (78bc <vTask_GSM_service+0xa80>)
    7760:	601a      	str	r2, [r3, #0]
								currentStatus = 'I';
    7762:	4b52      	ldr	r3, [pc, #328]	; (78ac <vTask_GSM_service+0xa70>)
    7764:	2249      	movs	r2, #73	; 0x49
    7766:	701a      	strb	r2, [r3, #0]
								currentCallStatus = 'O';
    7768:	4b51      	ldr	r3, [pc, #324]	; (78b0 <vTask_GSM_service+0xa74>)
    776a:	224f      	movs	r2, #79	; 0x4f
    776c:	701a      	strb	r2, [r3, #0]
								callAccepted = true;
    776e:	4b58      	ldr	r3, [pc, #352]	; (78d0 <vTask_GSM_service+0xa94>)
    7770:	2201      	movs	r2, #1
    7772:	701a      	strb	r2, [r3, #0]
								setCallStateOnLCD(LCDCALLSTATE_INCALL,NULL,true);
    7774:	2201      	movs	r2, #1
    7776:	2100      	movs	r1, #0
    7778:	2002      	movs	r0, #2
    777a:	4b56      	ldr	r3, [pc, #344]	; (78d4 <vTask_GSM_service+0xa98>)
    777c:	4798      	blx	r3
								if (!m2mEvent)
    777e:	4b56      	ldr	r3, [pc, #344]	; (78d8 <vTask_GSM_service+0xa9c>)
    7780:	781b      	ldrb	r3, [r3, #0]
    7782:	2201      	movs	r2, #1
    7784:	4053      	eors	r3, r2
    7786:	b2db      	uxtb	r3, r3
    7788:	2b00      	cmp	r3, #0
    778a:	d100      	bne.n	778e <vTask_GSM_service+0x952>
    778c:	e07e      	b.n	788c <vTask_GSM_service+0xa50>
								{
									playSound(actionType,true);
    778e:	4b4d      	ldr	r3, [pc, #308]	; (78c4 <vTask_GSM_service+0xa88>)
    7790:	781b      	ldrb	r3, [r3, #0]
    7792:	2101      	movs	r1, #1
    7794:	0018      	movs	r0, r3
    7796:	4b51      	ldr	r3, [pc, #324]	; (78dc <vTask_GSM_service+0xaa0>)
    7798:	4798      	blx	r3
							if (OutGoingcallState(response) == 'R')
    779a:	e077      	b.n	788c <vTask_GSM_service+0xa50>
								}
							}
						}
						else if (currentStatus == 'I' && currentCallStatus == 'O') //IN CALL OUTGOING CALL
    779c:	4b43      	ldr	r3, [pc, #268]	; (78ac <vTask_GSM_service+0xa70>)
    779e:	781b      	ldrb	r3, [r3, #0]
    77a0:	b2db      	uxtb	r3, r3
    77a2:	2b49      	cmp	r3, #73	; 0x49
    77a4:	d001      	beq.n	77aa <vTask_GSM_service+0x96e>
    77a6:	f7ff fbf8 	bl	6f9a <vTask_GSM_service+0x15e>
    77aa:	4b41      	ldr	r3, [pc, #260]	; (78b0 <vTask_GSM_service+0xa74>)
    77ac:	781b      	ldrb	r3, [r3, #0]
    77ae:	b2db      	uxtb	r3, r3
    77b0:	2b4f      	cmp	r3, #79	; 0x4f
    77b2:	d001      	beq.n	77b8 <vTask_GSM_service+0x97c>
    77b4:	f7ff fbf1 	bl	6f9a <vTask_GSM_service+0x15e>
						{
							if (gsm_responseLine_isCallCut(response) || OutGoingcallState(response) == 'E')
    77b8:	230c      	movs	r3, #12
    77ba:	18fb      	adds	r3, r7, r3
    77bc:	0018      	movs	r0, r3
    77be:	4b40      	ldr	r3, [pc, #256]	; (78c0 <vTask_GSM_service+0xa84>)
    77c0:	4798      	blx	r3
    77c2:	1e03      	subs	r3, r0, #0
    77c4:	d107      	bne.n	77d6 <vTask_GSM_service+0x99a>
    77c6:	230c      	movs	r3, #12
    77c8:	18fb      	adds	r3, r7, r3
    77ca:	0018      	movs	r0, r3
    77cc:	4b39      	ldr	r3, [pc, #228]	; (78b4 <vTask_GSM_service+0xa78>)
    77ce:	4798      	blx	r3
    77d0:	0003      	movs	r3, r0
    77d2:	2b45      	cmp	r3, #69	; 0x45
    77d4:	d102      	bne.n	77dc <vTask_GSM_service+0x9a0>
							{
								endCall();
    77d6:	4b3c      	ldr	r3, [pc, #240]	; (78c8 <vTask_GSM_service+0xa8c>)
    77d8:	4798      	blx	r3
    77da:	e058      	b.n	788e <vTask_GSM_service+0xa52>
							}
							else if (gsm_responseLine_isNew_DTMF_Command_Received(response))
    77dc:	230c      	movs	r3, #12
    77de:	18fb      	adds	r3, r7, r3
    77e0:	0018      	movs	r0, r3
    77e2:	4b2c      	ldr	r3, [pc, #176]	; (7894 <vTask_GSM_service+0xa58>)
    77e4:	4798      	blx	r3
    77e6:	1e03      	subs	r3, r0, #0
    77e8:	d025      	beq.n	7836 <vTask_GSM_service+0x9fa>
							{
								char *dtmf_tocken;
								dtmf_tocken = strtok(response,": ");
    77ea:	4a2b      	ldr	r2, [pc, #172]	; (7898 <vTask_GSM_service+0xa5c>)
    77ec:	230c      	movs	r3, #12
    77ee:	18fb      	adds	r3, r7, r3
    77f0:	0011      	movs	r1, r2
    77f2:	0018      	movs	r0, r3
    77f4:	4b29      	ldr	r3, [pc, #164]	; (789c <vTask_GSM_service+0xa60>)
    77f6:	4798      	blx	r3
    77f8:	0003      	movs	r3, r0
    77fa:	228a      	movs	r2, #138	; 0x8a
    77fc:	0052      	lsls	r2, r2, #1
    77fe:	18ba      	adds	r2, r7, r2
    7800:	6013      	str	r3, [r2, #0]
								dtmf_tocken = strtok(NULL,": ");
    7802:	4b25      	ldr	r3, [pc, #148]	; (7898 <vTask_GSM_service+0xa5c>)
    7804:	0019      	movs	r1, r3
    7806:	2000      	movs	r0, #0
    7808:	4b24      	ldr	r3, [pc, #144]	; (789c <vTask_GSM_service+0xa60>)
    780a:	4798      	blx	r3
    780c:	0003      	movs	r3, r0
    780e:	228a      	movs	r2, #138	; 0x8a
    7810:	0052      	lsls	r2, r2, #1
    7812:	18ba      	adds	r2, r7, r2
    7814:	6013      	str	r3, [r2, #0]
								RemoveSpaces(dtmf_tocken);
    7816:	238a      	movs	r3, #138	; 0x8a
    7818:	005b      	lsls	r3, r3, #1
    781a:	18fb      	adds	r3, r7, r3
    781c:	681b      	ldr	r3, [r3, #0]
    781e:	0018      	movs	r0, r3
    7820:	4b1f      	ldr	r3, [pc, #124]	; (78a0 <vTask_GSM_service+0xa64>)
    7822:	4798      	blx	r3
								processOnDTMF(dtmf_tocken);
    7824:	238a      	movs	r3, #138	; 0x8a
    7826:	005b      	lsls	r3, r3, #1
    7828:	18fb      	adds	r3, r7, r3
    782a:	681b      	ldr	r3, [r3, #0]
    782c:	0018      	movs	r0, r3
    782e:	4b1d      	ldr	r3, [pc, #116]	; (78a4 <vTask_GSM_service+0xa68>)
    7830:	4798      	blx	r3
    7832:	f7ff fbb2 	bl	6f9a <vTask_GSM_service+0x15e>
							}
							else
							{
								playSoundAgain(response);
    7836:	230c      	movs	r3, #12
    7838:	18fb      	adds	r3, r7, r3
    783a:	0018      	movs	r0, r3
    783c:	4b1a      	ldr	r3, [pc, #104]	; (78a8 <vTask_GSM_service+0xa6c>)
    783e:	4798      	blx	r3
    7840:	f7ff fbab 	bl	6f9a <vTask_GSM_service+0x15e>
				}
			}
		}
		else
		{
			boolGsm_config_flag			=false;
    7844:	232c      	movs	r3, #44	; 0x2c
    7846:	33ff      	adds	r3, #255	; 0xff
    7848:	18fb      	adds	r3, r7, r3
    784a:	2200      	movs	r2, #0
    784c:	701a      	strb	r2, [r3, #0]
			boolOne_Time_Msg_Delete_Flag   =false;
    784e:	2395      	movs	r3, #149	; 0x95
    7850:	005b      	lsls	r3, r3, #1
    7852:	18fb      	adds	r3, r7, r3
    7854:	2200      	movs	r2, #0
    7856:	701a      	strb	r2, [r3, #0]
			
			GSM_PWR_ON;
    7858:	4b21      	ldr	r3, [pc, #132]	; (78e0 <vTask_GSM_service+0xaa4>)
    785a:	4a21      	ldr	r2, [pc, #132]	; (78e0 <vTask_GSM_service+0xaa4>)
    785c:	6812      	ldr	r2, [r2, #0]
    785e:	2180      	movs	r1, #128	; 0x80
    7860:	0249      	lsls	r1, r1, #9
    7862:	430a      	orrs	r2, r1
    7864:	601a      	str	r2, [r3, #0]
			vTaskDelay(3000);
    7866:	4b1f      	ldr	r3, [pc, #124]	; (78e4 <vTask_GSM_service+0xaa8>)
    7868:	0018      	movs	r0, r3
    786a:	4b1f      	ldr	r3, [pc, #124]	; (78e8 <vTask_GSM_service+0xaac>)
    786c:	4798      	blx	r3
			GSM_PWR_OFF;
    786e:	4b1c      	ldr	r3, [pc, #112]	; (78e0 <vTask_GSM_service+0xaa4>)
    7870:	4a1b      	ldr	r2, [pc, #108]	; (78e0 <vTask_GSM_service+0xaa4>)
    7872:	6812      	ldr	r2, [r2, #0]
    7874:	491d      	ldr	r1, [pc, #116]	; (78ec <vTask_GSM_service+0xab0>)
    7876:	400a      	ands	r2, r1
    7878:	601a      	str	r2, [r3, #0]
			vTaskDelay(5000);
    787a:	4b1d      	ldr	r3, [pc, #116]	; (78f0 <vTask_GSM_service+0xab4>)
    787c:	0018      	movs	r0, r3
    787e:	4b1a      	ldr	r3, [pc, #104]	; (78e8 <vTask_GSM_service+0xaac>)
    7880:	4798      	blx	r3
    7882:	f7ff fb8a 	bl	6f9a <vTask_GSM_service+0x15e>
							if (gsm_responseLine_isRinging(response))
    7886:	46c0      	nop			; (mov r8, r8)
    7888:	f7ff fb87 	bl	6f9a <vTask_GSM_service+0x15e>
							if (OutGoingcallState(response) == 'R')
    788c:	46c0      	nop			; (mov r8, r8)
		if (GSM_STATUS_OK)
    788e:	f7ff fb84 	bl	6f9a <vTask_GSM_service+0x15e>
    7892:	46c0      	nop			; (mov r8, r8)
    7894:	00003429 	.word	0x00003429
    7898:	00019304 	.word	0x00019304
    789c:	00017e49 	.word	0x00017e49
    78a0:	00002841 	.word	0x00002841
    78a4:	000048fd 	.word	0x000048fd
    78a8:	000044c1 	.word	0x000044c1
    78ac:	20000798 	.word	0x20000798
    78b0:	20000757 	.word	0x20000757
    78b4:	00004601 	.word	0x00004601
    78b8:	0000f1fd 	.word	0x0000f1fd
    78bc:	200007bc 	.word	0x200007bc
    78c0:	000033b1 	.word	0x000033b1
    78c4:	2000072b 	.word	0x2000072b
    78c8:	00004071 	.word	0x00004071
    78cc:	00004885 	.word	0x00004885
    78d0:	20000766 	.word	0x20000766
    78d4:	0000bbdd 	.word	0x0000bbdd
    78d8:	2000070b 	.word	0x2000070b
    78dc:	000043b1 	.word	0x000043b1
    78e0:	41004490 	.word	0x41004490
    78e4:	00000bb8 	.word	0x00000bb8
    78e8:	0000ee99 	.word	0x0000ee99
    78ec:	fffeffff 	.word	0xfffeffff
    78f0:	00001388 	.word	0x00001388

000078f4 <start_gsm_service>:
		}
	}
}
void start_gsm_service(void)
{
    78f4:	b590      	push	{r4, r7, lr}
    78f6:	b083      	sub	sp, #12
    78f8:	af02      	add	r7, sp, #8
	xTaskCreate(vTask_GSM_service,NULL,(uint16_t)940,NULL,1,NULL);
    78fa:	23eb      	movs	r3, #235	; 0xeb
    78fc:	009a      	lsls	r2, r3, #2
    78fe:	4806      	ldr	r0, [pc, #24]	; (7918 <start_gsm_service+0x24>)
    7900:	2300      	movs	r3, #0
    7902:	9301      	str	r3, [sp, #4]
    7904:	2301      	movs	r3, #1
    7906:	9300      	str	r3, [sp, #0]
    7908:	2300      	movs	r3, #0
    790a:	2100      	movs	r1, #0
    790c:	4c03      	ldr	r4, [pc, #12]	; (791c <start_gsm_service+0x28>)
    790e:	47a0      	blx	r4
}
    7910:	46c0      	nop			; (mov r8, r8)
    7912:	46bd      	mov	sp, r7
    7914:	b001      	add	sp, #4
    7916:	bd90      	pop	{r4, r7, pc}
    7918:	00006e3d 	.word	0x00006e3d
    791c:	0000eb59 	.word	0x0000eb59

00007920 <busy>:

bool busy(void)
{
    7920:	b580      	push	{r7, lr}
    7922:	af00      	add	r7, sp, #0
	return (inCall /*|| inInterrupt*/);
    7924:	4b02      	ldr	r3, [pc, #8]	; (7930 <busy+0x10>)
    7926:	781b      	ldrb	r3, [r3, #0]
}
    7928:	0018      	movs	r0, r3
    792a:	46bd      	mov	sp, r7
    792c:	bd80      	pop	{r7, pc}
    792e:	46c0      	nop			; (mov r8, r8)
    7930:	20000764 	.word	0x20000764

00007934 <checkNotInCall>:

bool checkNotInCall(void)
{
    7934:	b580      	push	{r7, lr}
    7936:	af00      	add	r7, sp, #0
	return ( /*!sendCUSDResponse     &&*/  currentStatus=='N'
    7938:	4b13      	ldr	r3, [pc, #76]	; (7988 <checkNotInCall+0x54>)
    793a:	781b      	ldrb	r3, [r3, #0]
    793c:	b2db      	uxtb	r3, r3
	&&  currentCallStatus=='N'  &&  obtainNewEvent
	&&  !freezeIncomingCalls && !busy());
    793e:	2b4e      	cmp	r3, #78	; 0x4e
    7940:	d11a      	bne.n	7978 <checkNotInCall+0x44>
	&&  currentCallStatus=='N'  &&  obtainNewEvent
    7942:	4b12      	ldr	r3, [pc, #72]	; (798c <checkNotInCall+0x58>)
    7944:	781b      	ldrb	r3, [r3, #0]
    7946:	b2db      	uxtb	r3, r3
    7948:	2b4e      	cmp	r3, #78	; 0x4e
    794a:	d115      	bne.n	7978 <checkNotInCall+0x44>
    794c:	4b10      	ldr	r3, [pc, #64]	; (7990 <checkNotInCall+0x5c>)
    794e:	781b      	ldrb	r3, [r3, #0]
    7950:	2b00      	cmp	r3, #0
    7952:	d011      	beq.n	7978 <checkNotInCall+0x44>
	&&  !freezeIncomingCalls && !busy());
    7954:	4b0f      	ldr	r3, [pc, #60]	; (7994 <checkNotInCall+0x60>)
    7956:	781b      	ldrb	r3, [r3, #0]
    7958:	2201      	movs	r2, #1
    795a:	4053      	eors	r3, r2
    795c:	b2db      	uxtb	r3, r3
    795e:	2b00      	cmp	r3, #0
    7960:	d00a      	beq.n	7978 <checkNotInCall+0x44>
    7962:	4b0d      	ldr	r3, [pc, #52]	; (7998 <checkNotInCall+0x64>)
    7964:	4798      	blx	r3
    7966:	0003      	movs	r3, r0
    7968:	001a      	movs	r2, r3
    796a:	2301      	movs	r3, #1
    796c:	4053      	eors	r3, r2
    796e:	b2db      	uxtb	r3, r3
    7970:	2b00      	cmp	r3, #0
    7972:	d001      	beq.n	7978 <checkNotInCall+0x44>
    7974:	2301      	movs	r3, #1
    7976:	e000      	b.n	797a <checkNotInCall+0x46>
    7978:	2300      	movs	r3, #0
    797a:	1c1a      	adds	r2, r3, #0
    797c:	2301      	movs	r3, #1
    797e:	4013      	ands	r3, r2
    7980:	b2db      	uxtb	r3, r3
}
    7982:	0018      	movs	r0, r3
    7984:	46bd      	mov	sp, r7
    7986:	bd80      	pop	{r7, pc}
    7988:	20000798 	.word	0x20000798
    798c:	20000757 	.word	0x20000757
    7990:	2000073a 	.word	0x2000073a
    7994:	2000070c 	.word	0x2000070c
    7998:	00007921 	.word	0x00007921

0000799c <gsm_checkSleepElligible>:

bool gsm_checkSleepElligible(void)
{
    799c:	b580      	push	{r7, lr}
    799e:	af00      	add	r7, sp, #0
	if (factory_settings_parameter_struct.ENABLE_M2M)
    79a0:	4b20      	ldr	r3, [pc, #128]	; (7a24 <gsm_checkSleepElligible+0x88>)
    79a2:	78db      	ldrb	r3, [r3, #3]
    79a4:	2b00      	cmp	r3, #0
    79a6:	d020      	beq.n	79ea <gsm_checkSleepElligible+0x4e>
	{
		return(!commandsAccepted  && checkNotInCall() && !m2mEventStaged && !eventStaged);
    79a8:	4b1f      	ldr	r3, [pc, #124]	; (7a28 <gsm_checkSleepElligible+0x8c>)
    79aa:	781b      	ldrb	r3, [r3, #0]
    79ac:	2201      	movs	r2, #1
    79ae:	4053      	eors	r3, r2
    79b0:	b2db      	uxtb	r3, r3
    79b2:	2b00      	cmp	r3, #0
    79b4:	d013      	beq.n	79de <gsm_checkSleepElligible+0x42>
    79b6:	4b1d      	ldr	r3, [pc, #116]	; (7a2c <gsm_checkSleepElligible+0x90>)
    79b8:	4798      	blx	r3
    79ba:	1e03      	subs	r3, r0, #0
    79bc:	d00f      	beq.n	79de <gsm_checkSleepElligible+0x42>
    79be:	4b1c      	ldr	r3, [pc, #112]	; (7a30 <gsm_checkSleepElligible+0x94>)
    79c0:	781b      	ldrb	r3, [r3, #0]
    79c2:	2201      	movs	r2, #1
    79c4:	4053      	eors	r3, r2
    79c6:	b2db      	uxtb	r3, r3
    79c8:	2b00      	cmp	r3, #0
    79ca:	d008      	beq.n	79de <gsm_checkSleepElligible+0x42>
    79cc:	4b19      	ldr	r3, [pc, #100]	; (7a34 <gsm_checkSleepElligible+0x98>)
    79ce:	781b      	ldrb	r3, [r3, #0]
    79d0:	2201      	movs	r2, #1
    79d2:	4053      	eors	r3, r2
    79d4:	b2db      	uxtb	r3, r3
    79d6:	2b00      	cmp	r3, #0
    79d8:	d001      	beq.n	79de <gsm_checkSleepElligible+0x42>
    79da:	2301      	movs	r3, #1
    79dc:	e000      	b.n	79e0 <gsm_checkSleepElligible+0x44>
    79de:	2300      	movs	r3, #0
    79e0:	1c1a      	adds	r2, r3, #0
    79e2:	2301      	movs	r3, #1
    79e4:	4013      	ands	r3, r2
    79e6:	b2db      	uxtb	r3, r3
    79e8:	e018      	b.n	7a1c <gsm_checkSleepElligible+0x80>
	}
	else
	{
		return(!commandsAccepted  && checkNotInCall() && !eventStaged);
    79ea:	4b0f      	ldr	r3, [pc, #60]	; (7a28 <gsm_checkSleepElligible+0x8c>)
    79ec:	781b      	ldrb	r3, [r3, #0]
    79ee:	2201      	movs	r2, #1
    79f0:	4053      	eors	r3, r2
    79f2:	b2db      	uxtb	r3, r3
    79f4:	2b00      	cmp	r3, #0
    79f6:	d00c      	beq.n	7a12 <gsm_checkSleepElligible+0x76>
    79f8:	4b0c      	ldr	r3, [pc, #48]	; (7a2c <gsm_checkSleepElligible+0x90>)
    79fa:	4798      	blx	r3
    79fc:	1e03      	subs	r3, r0, #0
    79fe:	d008      	beq.n	7a12 <gsm_checkSleepElligible+0x76>
    7a00:	4b0c      	ldr	r3, [pc, #48]	; (7a34 <gsm_checkSleepElligible+0x98>)
    7a02:	781b      	ldrb	r3, [r3, #0]
    7a04:	2201      	movs	r2, #1
    7a06:	4053      	eors	r3, r2
    7a08:	b2db      	uxtb	r3, r3
    7a0a:	2b00      	cmp	r3, #0
    7a0c:	d001      	beq.n	7a12 <gsm_checkSleepElligible+0x76>
    7a0e:	2301      	movs	r3, #1
    7a10:	e000      	b.n	7a14 <gsm_checkSleepElligible+0x78>
    7a12:	2300      	movs	r3, #0
    7a14:	1c1a      	adds	r2, r3, #0
    7a16:	2301      	movs	r3, #1
    7a18:	4013      	ands	r3, r2
    7a1a:	b2db      	uxtb	r3, r3
	}
    7a1c:	0018      	movs	r0, r3
    7a1e:	46bd      	mov	sp, r7
    7a20:	bd80      	pop	{r7, pc}
    7a22:	46c0      	nop			; (mov r8, r8)
    7a24:	20000618 	.word	0x20000618
    7a28:	20000753 	.word	0x20000753
    7a2c:	00007935 	.word	0x00007935
    7a30:	20000756 	.word	0x20000756
    7a34:	2000078a 	.word	0x2000078a

00007a38 <lcd_displaying_task>:
static QueueHandle_t xfour_Second_Queue;
static TimerHandle_t four_Second_timeout_timer=NULL;
static void four_second_timer_callback(TimerHandle_t timer);

static void lcd_displaying_task(void *params)
{
    7a38:	b590      	push	{r4, r7, lr}
    7a3a:	b093      	sub	sp, #76	; 0x4c
    7a3c:	af02      	add	r7, sp, #8
    7a3e:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	
	lcd_in_sleep = false;
    7a40:	4be6      	ldr	r3, [pc, #920]	; (7ddc <lcd_displaying_task+0x3a4>)
    7a42:	2200      	movs	r2, #0
    7a44:	701a      	strb	r2, [r3, #0]
	
	LCD_PWR_CONFIG();
    7a46:	4be6      	ldr	r3, [pc, #920]	; (7de0 <lcd_displaying_task+0x3a8>)
    7a48:	4798      	blx	r3
	LCD_PWR_EN();
    7a4a:	4be6      	ldr	r3, [pc, #920]	; (7de4 <lcd_displaying_task+0x3ac>)
    7a4c:	4798      	blx	r3
	vTaskDelay(500);
    7a4e:	23fa      	movs	r3, #250	; 0xfa
    7a50:	005b      	lsls	r3, r3, #1
    7a52:	0018      	movs	r0, r3
    7a54:	4be4      	ldr	r3, [pc, #912]	; (7de8 <lcd_displaying_task+0x3b0>)
    7a56:	4798      	blx	r3
	
	LCD_init();
    7a58:	4be4      	ldr	r3, [pc, #912]	; (7dec <lcd_displaying_task+0x3b4>)
    7a5a:	4798      	blx	r3
	
	uint8_t screen=1;
    7a5c:	233f      	movs	r3, #63	; 0x3f
    7a5e:	18fb      	adds	r3, r7, r3
    7a60:	2201      	movs	r2, #1
    7a62:	701a      	strb	r2, [r3, #0]
	
	bool four_sec_timer_is_active = true;
    7a64:	233d      	movs	r3, #61	; 0x3d
    7a66:	18fb      	adds	r3, r7, r3
    7a68:	2201      	movs	r2, #1
    7a6a:	701a      	strb	r2, [r3, #0]
	bool two_sec_timer_is_active = false;
    7a6c:	233c      	movs	r3, #60	; 0x3c
    7a6e:	18fb      	adds	r3, r7, r3
    7a70:	2200      	movs	r2, #0
    7a72:	701a      	strb	r2, [r3, #0]
	
	uint8_t time=0;
    7a74:	233a      	movs	r3, #58	; 0x3a
    7a76:	18fb      	adds	r3, r7, r3
    7a78:	2200      	movs	r2, #0
    7a7a:	701a      	strb	r2, [r3, #0]
	
	byte Network_0[8]={
    7a7c:	2330      	movs	r3, #48	; 0x30
    7a7e:	18fb      	adds	r3, r7, r3
    7a80:	0018      	movs	r0, r3
    7a82:	2308      	movs	r3, #8
    7a84:	001a      	movs	r2, r3
    7a86:	2100      	movs	r1, #0
    7a88:	4bd9      	ldr	r3, [pc, #868]	; (7df0 <lcd_displaying_task+0x3b8>)
    7a8a:	4798      	blx	r3
		0B00000,
		0B00000,
		0B00000
	};
	
	byte Network_1[8]={
    7a8c:	2328      	movs	r3, #40	; 0x28
    7a8e:	18fb      	adds	r3, r7, r3
    7a90:	4ad8      	ldr	r2, [pc, #864]	; (7df4 <lcd_displaying_task+0x3bc>)
    7a92:	ca03      	ldmia	r2!, {r0, r1}
    7a94:	c303      	stmia	r3!, {r0, r1}
		0B00000,
		0B00000,
		0B11111,
		0B11111
	};
	byte Network_2[8]={
    7a96:	2320      	movs	r3, #32
    7a98:	18fb      	adds	r3, r7, r3
    7a9a:	4ad7      	ldr	r2, [pc, #860]	; (7df8 <lcd_displaying_task+0x3c0>)
    7a9c:	ca03      	ldmia	r2!, {r0, r1}
    7a9e:	c303      	stmia	r3!, {r0, r1}
		0B00000,
		0B11111,
		0B11111,
		0B11111
	};
	byte Network_3[8]={
    7aa0:	2318      	movs	r3, #24
    7aa2:	18fb      	adds	r3, r7, r3
    7aa4:	4ad5      	ldr	r2, [pc, #852]	; (7dfc <lcd_displaying_task+0x3c4>)
    7aa6:	ca03      	ldmia	r2!, {r0, r1}
    7aa8:	c303      	stmia	r3!, {r0, r1}
		0B11111,
		0B11111,
		0B11111,
		0B11111
	};
	byte Network_4[8]={
    7aaa:	2310      	movs	r3, #16
    7aac:	18fb      	adds	r3, r7, r3
    7aae:	4ad4      	ldr	r2, [pc, #848]	; (7e00 <lcd_displaying_task+0x3c8>)
    7ab0:	ca03      	ldmia	r2!, {r0, r1}
    7ab2:	c303      	stmia	r3!, {r0, r1}
		0B11111,
		0B11111,
		0B11111
	};

	byte Network_5[8]={
    7ab4:	2308      	movs	r3, #8
    7ab6:	18fb      	adds	r3, r7, r3
    7ab8:	4ad2      	ldr	r2, [pc, #840]	; (7e04 <lcd_displaying_task+0x3cc>)
    7aba:	ca03      	ldmia	r2!, {r0, r1}
    7abc:	c303      	stmia	r3!, {r0, r1}
		0B11111,
		0B11111,
		0B11111
	};
	
	LCD_Create_Custom_createChar(0,Network_0);
    7abe:	2330      	movs	r3, #48	; 0x30
    7ac0:	18fb      	adds	r3, r7, r3
    7ac2:	0019      	movs	r1, r3
    7ac4:	2000      	movs	r0, #0
    7ac6:	4bd0      	ldr	r3, [pc, #832]	; (7e08 <lcd_displaying_task+0x3d0>)
    7ac8:	4798      	blx	r3
	LCD_Create_Custom_createChar(1,Network_1);
    7aca:	2328      	movs	r3, #40	; 0x28
    7acc:	18fb      	adds	r3, r7, r3
    7ace:	0019      	movs	r1, r3
    7ad0:	2001      	movs	r0, #1
    7ad2:	4bcd      	ldr	r3, [pc, #820]	; (7e08 <lcd_displaying_task+0x3d0>)
    7ad4:	4798      	blx	r3
	LCD_Create_Custom_createChar(2,Network_2);
    7ad6:	2320      	movs	r3, #32
    7ad8:	18fb      	adds	r3, r7, r3
    7ada:	0019      	movs	r1, r3
    7adc:	2002      	movs	r0, #2
    7ade:	4bca      	ldr	r3, [pc, #808]	; (7e08 <lcd_displaying_task+0x3d0>)
    7ae0:	4798      	blx	r3
	LCD_Create_Custom_createChar(3,Network_3);
    7ae2:	2318      	movs	r3, #24
    7ae4:	18fb      	adds	r3, r7, r3
    7ae6:	0019      	movs	r1, r3
    7ae8:	2003      	movs	r0, #3
    7aea:	4bc7      	ldr	r3, [pc, #796]	; (7e08 <lcd_displaying_task+0x3d0>)
    7aec:	4798      	blx	r3
	LCD_Create_Custom_createChar(4,Network_4);
    7aee:	2310      	movs	r3, #16
    7af0:	18fb      	adds	r3, r7, r3
    7af2:	0019      	movs	r1, r3
    7af4:	2004      	movs	r0, #4
    7af6:	4bc4      	ldr	r3, [pc, #784]	; (7e08 <lcd_displaying_task+0x3d0>)
    7af8:	4798      	blx	r3
	LCD_Create_Custom_createChar(5,Network_5);
    7afa:	2308      	movs	r3, #8
    7afc:	18fb      	adds	r3, r7, r3
    7afe:	0019      	movs	r1, r3
    7b00:	2005      	movs	r0, #5
    7b02:	4bc1      	ldr	r3, [pc, #772]	; (7e08 <lcd_displaying_task+0x3d0>)
    7b04:	4798      	blx	r3
	
	LCD_clear();
    7b06:	4bc1      	ldr	r3, [pc, #772]	; (7e0c <lcd_displaying_task+0x3d4>)
    7b08:	4798      	blx	r3
	LCD_setCursor(0,0);
    7b0a:	2100      	movs	r1, #0
    7b0c:	2000      	movs	r0, #0
    7b0e:	4bc0      	ldr	r3, [pc, #768]	; (7e10 <lcd_displaying_task+0x3d8>)
    7b10:	4798      	blx	r3
	lcd_printf(" KRISHNA  SMART ");
    7b12:	4bc0      	ldr	r3, [pc, #768]	; (7e14 <lcd_displaying_task+0x3dc>)
    7b14:	0018      	movs	r0, r3
    7b16:	4bc0      	ldr	r3, [pc, #768]	; (7e18 <lcd_displaying_task+0x3e0>)
    7b18:	4798      	blx	r3
	LCD_setCursor(0,1);
    7b1a:	2101      	movs	r1, #1
    7b1c:	2000      	movs	r0, #0
    7b1e:	4bbc      	ldr	r3, [pc, #752]	; (7e10 <lcd_displaying_task+0x3d8>)
    7b20:	4798      	blx	r3
	lcd_printf("   TECHNOLOGY   ");
    7b22:	4bbe      	ldr	r3, [pc, #760]	; (7e1c <lcd_displaying_task+0x3e4>)
    7b24:	0018      	movs	r0, r3
    7b26:	4bbc      	ldr	r3, [pc, #752]	; (7e18 <lcd_displaying_task+0x3e0>)
    7b28:	4798      	blx	r3
	vTaskDelay(3000);
    7b2a:	4bbd      	ldr	r3, [pc, #756]	; (7e20 <lcd_displaying_task+0x3e8>)
    7b2c:	0018      	movs	r0, r3
    7b2e:	4bae      	ldr	r3, [pc, #696]	; (7de8 <lcd_displaying_task+0x3b0>)
    7b30:	4798      	blx	r3
	
	LCD_clear();
    7b32:	4bb6      	ldr	r3, [pc, #728]	; (7e0c <lcd_displaying_task+0x3d4>)
    7b34:	4798      	blx	r3
	LCD_setCursor(0,0);
    7b36:	2100      	movs	r1, #0
    7b38:	2000      	movs	r0, #0
    7b3a:	4bb5      	ldr	r3, [pc, #724]	; (7e10 <lcd_displaying_task+0x3d8>)
    7b3c:	4798      	blx	r3
	lcd_printf("  SOFTWARE VER  ");
    7b3e:	4bb9      	ldr	r3, [pc, #740]	; (7e24 <lcd_displaying_task+0x3ec>)
    7b40:	0018      	movs	r0, r3
    7b42:	4bb5      	ldr	r3, [pc, #724]	; (7e18 <lcd_displaying_task+0x3e0>)
    7b44:	4798      	blx	r3
	LCD_setCursor(0,1);
    7b46:	2101      	movs	r1, #1
    7b48:	2000      	movs	r0, #0
    7b4a:	4bb1      	ldr	r3, [pc, #708]	; (7e10 <lcd_displaying_task+0x3d8>)
    7b4c:	4798      	blx	r3
	lcd_printf("%s",VERSION_NO);
    7b4e:	4ab6      	ldr	r2, [pc, #728]	; (7e28 <lcd_displaying_task+0x3f0>)
    7b50:	4bb6      	ldr	r3, [pc, #728]	; (7e2c <lcd_displaying_task+0x3f4>)
    7b52:	0011      	movs	r1, r2
    7b54:	0018      	movs	r0, r3
    7b56:	4bb0      	ldr	r3, [pc, #704]	; (7e18 <lcd_displaying_task+0x3e0>)
    7b58:	4798      	blx	r3
	vTaskDelay(2000);
    7b5a:	23fa      	movs	r3, #250	; 0xfa
    7b5c:	00db      	lsls	r3, r3, #3
    7b5e:	0018      	movs	r0, r3
    7b60:	4ba1      	ldr	r3, [pc, #644]	; (7de8 <lcd_displaying_task+0x3b0>)
    7b62:	4798      	blx	r3
	
	four_Second_timeout_timer = xTimerCreate(NULL,(1 * 4000 / portTICK_PERIOD_MS), pdTRUE, NULL, four_second_timer_callback);
    7b64:	23fa      	movs	r3, #250	; 0xfa
    7b66:	0119      	lsls	r1, r3, #4
    7b68:	4bb1      	ldr	r3, [pc, #708]	; (7e30 <lcd_displaying_task+0x3f8>)
    7b6a:	9300      	str	r3, [sp, #0]
    7b6c:	2300      	movs	r3, #0
    7b6e:	2201      	movs	r2, #1
    7b70:	2000      	movs	r0, #0
    7b72:	4cb0      	ldr	r4, [pc, #704]	; (7e34 <lcd_displaying_task+0x3fc>)
    7b74:	47a0      	blx	r4
    7b76:	0002      	movs	r2, r0
    7b78:	4baf      	ldr	r3, [pc, #700]	; (7e38 <lcd_displaying_task+0x400>)
    7b7a:	601a      	str	r2, [r3, #0]
	xTimerStart( four_Second_timeout_timer, 0 );
    7b7c:	4bae      	ldr	r3, [pc, #696]	; (7e38 <lcd_displaying_task+0x400>)
    7b7e:	681c      	ldr	r4, [r3, #0]
    7b80:	4bae      	ldr	r3, [pc, #696]	; (7e3c <lcd_displaying_task+0x404>)
    7b82:	4798      	blx	r3
    7b84:	0002      	movs	r2, r0
    7b86:	2300      	movs	r3, #0
    7b88:	9300      	str	r3, [sp, #0]
    7b8a:	2300      	movs	r3, #0
    7b8c:	2101      	movs	r1, #1
    7b8e:	0020      	movs	r0, r4
    7b90:	4cab      	ldr	r4, [pc, #684]	; (7e40 <lcd_displaying_task+0x408>)
    7b92:	47a0      	blx	r4
	
	
	for (;;)
	{
		if (lcd_in_sleep)
    7b94:	4b91      	ldr	r3, [pc, #580]	; (7ddc <lcd_displaying_task+0x3a4>)
    7b96:	781b      	ldrb	r3, [r3, #0]
    7b98:	b2db      	uxtb	r3, r3
    7b9a:	2b00      	cmp	r3, #0
    7b9c:	d009      	beq.n	7bb2 <lcd_displaying_task+0x17a>
		{
			lcd_in_sleep = false;
    7b9e:	4b8f      	ldr	r3, [pc, #572]	; (7ddc <lcd_displaying_task+0x3a4>)
    7ba0:	2200      	movs	r2, #0
    7ba2:	701a      	strb	r2, [r3, #0]
			LCD_PWR_EN();
    7ba4:	4b8f      	ldr	r3, [pc, #572]	; (7de4 <lcd_displaying_task+0x3ac>)
    7ba6:	4798      	blx	r3
			vTaskDelay(100);
    7ba8:	2064      	movs	r0, #100	; 0x64
    7baa:	4b8f      	ldr	r3, [pc, #572]	; (7de8 <lcd_displaying_task+0x3b0>)
    7bac:	4798      	blx	r3
			LCD_init();
    7bae:	4b8f      	ldr	r3, [pc, #572]	; (7dec <lcd_displaying_task+0x3b4>)
    7bb0:	4798      	blx	r3
		}
		
		switch(screen)
    7bb2:	233f      	movs	r3, #63	; 0x3f
    7bb4:	18fb      	adds	r3, r7, r3
    7bb6:	781b      	ldrb	r3, [r3, #0]
    7bb8:	2b06      	cmp	r3, #6
    7bba:	d900      	bls.n	7bbe <lcd_displaying_task+0x186>
    7bbc:	e1fa      	b.n	7fb4 <lcd_displaying_task+0x57c>
    7bbe:	009a      	lsls	r2, r3, #2
    7bc0:	4ba0      	ldr	r3, [pc, #640]	; (7e44 <lcd_displaying_task+0x40c>)
    7bc2:	18d3      	adds	r3, r2, r3
    7bc4:	681b      	ldr	r3, [r3, #0]
    7bc6:	469f      	mov	pc, r3
		{
			case  1:
			{
				LCD_setCursor(0,0);
    7bc8:	2100      	movs	r1, #0
    7bca:	2000      	movs	r0, #0
    7bcc:	4b90      	ldr	r3, [pc, #576]	; (7e10 <lcd_displaying_task+0x3d8>)
    7bce:	4798      	blx	r3
				lcd_printf("VRY   VYB   VBR ");
    7bd0:	4b9d      	ldr	r3, [pc, #628]	; (7e48 <lcd_displaying_task+0x410>)
    7bd2:	0018      	movs	r0, r3
    7bd4:	4b90      	ldr	r3, [pc, #576]	; (7e18 <lcd_displaying_task+0x3e0>)
    7bd6:	4798      	blx	r3
				LCD_setCursor(0,1);
    7bd8:	2101      	movs	r1, #1
    7bda:	2000      	movs	r0, #0
    7bdc:	4b8c      	ldr	r3, [pc, #560]	; (7e10 <lcd_displaying_task+0x3d8>)
    7bde:	4798      	blx	r3
				lcd_printf("%03lu   ",(Analog_Parameter_Struct.PhaseRY_Voltage));
    7be0:	4b9a      	ldr	r3, [pc, #616]	; (7e4c <lcd_displaying_task+0x414>)
    7be2:	681a      	ldr	r2, [r3, #0]
    7be4:	4b9a      	ldr	r3, [pc, #616]	; (7e50 <lcd_displaying_task+0x418>)
    7be6:	0011      	movs	r1, r2
    7be8:	0018      	movs	r0, r3
    7bea:	4b8b      	ldr	r3, [pc, #556]	; (7e18 <lcd_displaying_task+0x3e0>)
    7bec:	4798      	blx	r3
				lcd_printf("%03lu   ",(Analog_Parameter_Struct.PhaseYB_Voltage));
    7bee:	4b97      	ldr	r3, [pc, #604]	; (7e4c <lcd_displaying_task+0x414>)
    7bf0:	685a      	ldr	r2, [r3, #4]
    7bf2:	4b97      	ldr	r3, [pc, #604]	; (7e50 <lcd_displaying_task+0x418>)
    7bf4:	0011      	movs	r1, r2
    7bf6:	0018      	movs	r0, r3
    7bf8:	4b87      	ldr	r3, [pc, #540]	; (7e18 <lcd_displaying_task+0x3e0>)
    7bfa:	4798      	blx	r3
				lcd_printf("%03lu ",(Analog_Parameter_Struct.PhaseBR_Voltage));
    7bfc:	4b93      	ldr	r3, [pc, #588]	; (7e4c <lcd_displaying_task+0x414>)
    7bfe:	689a      	ldr	r2, [r3, #8]
    7c00:	4b94      	ldr	r3, [pc, #592]	; (7e54 <lcd_displaying_task+0x41c>)
    7c02:	0011      	movs	r1, r2
    7c04:	0018      	movs	r0, r3
    7c06:	4b84      	ldr	r3, [pc, #528]	; (7e18 <lcd_displaying_task+0x3e0>)
    7c08:	4798      	blx	r3
				break;
    7c0a:	e1d3      	b.n	7fb4 <lcd_displaying_task+0x57c>
			}
			case  2:
			{
				if(!getMotorState())
    7c0c:	4b92      	ldr	r3, [pc, #584]	; (7e58 <lcd_displaying_task+0x420>)
    7c0e:	4798      	blx	r3
    7c10:	0003      	movs	r3, r0
    7c12:	001a      	movs	r2, r3
    7c14:	2301      	movs	r3, #1
    7c16:	4053      	eors	r3, r2
    7c18:	b2db      	uxtb	r3, r3
    7c1a:	2b00      	cmp	r3, #0
    7c1c:	d010      	beq.n	7c40 <lcd_displaying_task+0x208>
				{
					LCD_setCursor(0,0);
    7c1e:	2100      	movs	r1, #0
    7c20:	2000      	movs	r0, #0
    7c22:	4b7b      	ldr	r3, [pc, #492]	; (7e10 <lcd_displaying_task+0x3d8>)
    7c24:	4798      	blx	r3
					lcd_printf("MOTOR:  OFF     ");
    7c26:	4b8d      	ldr	r3, [pc, #564]	; (7e5c <lcd_displaying_task+0x424>)
    7c28:	0018      	movs	r0, r3
    7c2a:	4b7b      	ldr	r3, [pc, #492]	; (7e18 <lcd_displaying_task+0x3e0>)
    7c2c:	4798      	blx	r3
					LCD_setCursor(0,1);
    7c2e:	2101      	movs	r1, #1
    7c30:	2000      	movs	r0, #0
    7c32:	4b77      	ldr	r3, [pc, #476]	; (7e10 <lcd_displaying_task+0x3d8>)
    7c34:	4798      	blx	r3
					lcd_printf("                ");
    7c36:	4b8a      	ldr	r3, [pc, #552]	; (7e60 <lcd_displaying_task+0x428>)
    7c38:	0018      	movs	r0, r3
    7c3a:	4b77      	ldr	r3, [pc, #476]	; (7e18 <lcd_displaying_task+0x3e0>)
    7c3c:	4798      	blx	r3
					LCD_setCursor(0,0);
					lcd_printf("MOTOR CURRENT:  ");
					LCD_setCursor(0,1);
					lcd_printf("%03lu.%02lu            ",(Analog_Parameter_Struct.Motor_Current_IntPart),(Analog_Parameter_Struct.Motor_Current_DecPart));
				}
				break;
    7c3e:	e1b9      	b.n	7fb4 <lcd_displaying_task+0x57c>
					LCD_setCursor(0,0);
    7c40:	2100      	movs	r1, #0
    7c42:	2000      	movs	r0, #0
    7c44:	4b72      	ldr	r3, [pc, #456]	; (7e10 <lcd_displaying_task+0x3d8>)
    7c46:	4798      	blx	r3
					lcd_printf("MOTOR CURRENT:  ");
    7c48:	4b86      	ldr	r3, [pc, #536]	; (7e64 <lcd_displaying_task+0x42c>)
    7c4a:	0018      	movs	r0, r3
    7c4c:	4b72      	ldr	r3, [pc, #456]	; (7e18 <lcd_displaying_task+0x3e0>)
    7c4e:	4798      	blx	r3
					LCD_setCursor(0,1);
    7c50:	2101      	movs	r1, #1
    7c52:	2000      	movs	r0, #0
    7c54:	4b6e      	ldr	r3, [pc, #440]	; (7e10 <lcd_displaying_task+0x3d8>)
    7c56:	4798      	blx	r3
					lcd_printf("%03lu.%02lu            ",(Analog_Parameter_Struct.Motor_Current_IntPart),(Analog_Parameter_Struct.Motor_Current_DecPart));
    7c58:	4b7c      	ldr	r3, [pc, #496]	; (7e4c <lcd_displaying_task+0x414>)
    7c5a:	8a9b      	ldrh	r3, [r3, #20]
    7c5c:	b29b      	uxth	r3, r3
    7c5e:	0019      	movs	r1, r3
    7c60:	4b7a      	ldr	r3, [pc, #488]	; (7e4c <lcd_displaying_task+0x414>)
    7c62:	8adb      	ldrh	r3, [r3, #22]
    7c64:	b29b      	uxth	r3, r3
    7c66:	001a      	movs	r2, r3
    7c68:	4b7f      	ldr	r3, [pc, #508]	; (7e68 <lcd_displaying_task+0x430>)
    7c6a:	0018      	movs	r0, r3
    7c6c:	4b6a      	ldr	r3, [pc, #424]	; (7e18 <lcd_displaying_task+0x3e0>)
    7c6e:	4798      	blx	r3
				break;
    7c70:	e1a0      	b.n	7fb4 <lcd_displaying_task+0x57c>
			}
			
			case 3:
			{
				LCD_setCursor(0,0);
    7c72:	2100      	movs	r1, #0
    7c74:	2000      	movs	r0, #0
    7c76:	4b66      	ldr	r3, [pc, #408]	; (7e10 <lcd_displaying_task+0x3d8>)
    7c78:	4798      	blx	r3
				lcd_printf("3 PHASE SEQ:");
    7c7a:	4b7c      	ldr	r3, [pc, #496]	; (7e6c <lcd_displaying_task+0x434>)
    7c7c:	0018      	movs	r0, r3
    7c7e:	4b66      	ldr	r3, [pc, #408]	; (7e18 <lcd_displaying_task+0x3e0>)
    7c80:	4798      	blx	r3
				if (structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
    7c82:	4b7b      	ldr	r3, [pc, #492]	; (7e70 <lcd_displaying_task+0x438>)
    7c84:	781b      	ldrb	r3, [r3, #0]
    7c86:	b2db      	uxtb	r3, r3
    7c88:	2b02      	cmp	r3, #2
    7c8a:	d104      	bne.n	7c96 <lcd_displaying_task+0x25e>
				{
					lcd_printf(" OK ");
    7c8c:	4b79      	ldr	r3, [pc, #484]	; (7e74 <lcd_displaying_task+0x43c>)
    7c8e:	0018      	movs	r0, r3
    7c90:	4b61      	ldr	r3, [pc, #388]	; (7e18 <lcd_displaying_task+0x3e0>)
    7c92:	4798      	blx	r3
    7c94:	e003      	b.n	7c9e <lcd_displaying_task+0x266>
				}
				else
				{
					lcd_printf(" ERR");
    7c96:	4b78      	ldr	r3, [pc, #480]	; (7e78 <lcd_displaying_task+0x440>)
    7c98:	0018      	movs	r0, r3
    7c9a:	4b5f      	ldr	r3, [pc, #380]	; (7e18 <lcd_displaying_task+0x3e0>)
    7c9c:	4798      	blx	r3
				}
				LCD_setCursor(0,1);
    7c9e:	2101      	movs	r1, #1
    7ca0:	2000      	movs	r0, #0
    7ca2:	4b5b      	ldr	r3, [pc, #364]	; (7e10 <lcd_displaying_task+0x3d8>)
    7ca4:	4798      	blx	r3
				lcd_printf("PHASE STATE:");
    7ca6:	4b75      	ldr	r3, [pc, #468]	; (7e7c <lcd_displaying_task+0x444>)
    7ca8:	0018      	movs	r0, r3
    7caa:	4b5b      	ldr	r3, [pc, #364]	; (7e18 <lcd_displaying_task+0x3e0>)
    7cac:	4798      	blx	r3
				if (structThreePhase_state.u8t_phase_ac_state == AC_3PH)
    7cae:	4b70      	ldr	r3, [pc, #448]	; (7e70 <lcd_displaying_task+0x438>)
    7cb0:	785b      	ldrb	r3, [r3, #1]
    7cb2:	b2db      	uxtb	r3, r3
    7cb4:	2b03      	cmp	r3, #3
    7cb6:	d104      	bne.n	7cc2 <lcd_displaying_task+0x28a>
				{
					lcd_printf(" 3PH ");
    7cb8:	4b71      	ldr	r3, [pc, #452]	; (7e80 <lcd_displaying_task+0x448>)
    7cba:	0018      	movs	r0, r3
    7cbc:	4b56      	ldr	r3, [pc, #344]	; (7e18 <lcd_displaying_task+0x3e0>)
    7cbe:	4798      	blx	r3
				}
				else
				{
					lcd_printf(" OFF");
				}
				break;
    7cc0:	e178      	b.n	7fb4 <lcd_displaying_task+0x57c>
				else if(structThreePhase_state.u8t_phase_ac_state == AC_2PH)
    7cc2:	4b6b      	ldr	r3, [pc, #428]	; (7e70 <lcd_displaying_task+0x438>)
    7cc4:	785b      	ldrb	r3, [r3, #1]
    7cc6:	b2db      	uxtb	r3, r3
    7cc8:	2b02      	cmp	r3, #2
    7cca:	d104      	bne.n	7cd6 <lcd_displaying_task+0x29e>
					lcd_printf(" 2PH ");
    7ccc:	4b6d      	ldr	r3, [pc, #436]	; (7e84 <lcd_displaying_task+0x44c>)
    7cce:	0018      	movs	r0, r3
    7cd0:	4b51      	ldr	r3, [pc, #324]	; (7e18 <lcd_displaying_task+0x3e0>)
    7cd2:	4798      	blx	r3
				break;
    7cd4:	e16e      	b.n	7fb4 <lcd_displaying_task+0x57c>
					lcd_printf(" OFF");
    7cd6:	4b6c      	ldr	r3, [pc, #432]	; (7e88 <lcd_displaying_task+0x450>)
    7cd8:	0018      	movs	r0, r3
    7cda:	4b4f      	ldr	r3, [pc, #316]	; (7e18 <lcd_displaying_task+0x3e0>)
    7cdc:	4798      	blx	r3
				break;
    7cde:	e169      	b.n	7fb4 <lcd_displaying_task+0x57c>
			}
			case 4:
			{
				LCD_setCursor(0,0);
    7ce0:	2100      	movs	r1, #0
    7ce2:	2000      	movs	r0, #0
    7ce4:	4b4a      	ldr	r3, [pc, #296]	; (7e10 <lcd_displaying_task+0x3d8>)
    7ce6:	4798      	blx	r3
				lcd_printf("O-LEVEL : ");
    7ce8:	4b68      	ldr	r3, [pc, #416]	; (7e8c <lcd_displaying_task+0x454>)
    7cea:	0018      	movs	r0, r3
    7cec:	4b4a      	ldr	r3, [pc, #296]	; (7e18 <lcd_displaying_task+0x3e0>)
    7cee:	4798      	blx	r3
				if (overheadLevel == OVERHEADHIGHLEVEL)
    7cf0:	4b67      	ldr	r3, [pc, #412]	; (7e90 <lcd_displaying_task+0x458>)
    7cf2:	781b      	ldrb	r3, [r3, #0]
    7cf4:	b2db      	uxtb	r3, r3
    7cf6:	2b02      	cmp	r3, #2
    7cf8:	d104      	bne.n	7d04 <lcd_displaying_task+0x2cc>
				{
					lcd_printf("HIGH  ");
    7cfa:	4b66      	ldr	r3, [pc, #408]	; (7e94 <lcd_displaying_task+0x45c>)
    7cfc:	0018      	movs	r0, r3
    7cfe:	4b46      	ldr	r3, [pc, #280]	; (7e18 <lcd_displaying_task+0x3e0>)
    7d00:	4798      	blx	r3
    7d02:	e012      	b.n	7d2a <lcd_displaying_task+0x2f2>
				}
				else if (overheadLevel == OVERHEADMIDLEVEL)
    7d04:	4b62      	ldr	r3, [pc, #392]	; (7e90 <lcd_displaying_task+0x458>)
    7d06:	781b      	ldrb	r3, [r3, #0]
    7d08:	b2db      	uxtb	r3, r3
    7d0a:	2b01      	cmp	r3, #1
    7d0c:	d104      	bne.n	7d18 <lcd_displaying_task+0x2e0>
				{
					lcd_printf("MID   ");
    7d0e:	4b62      	ldr	r3, [pc, #392]	; (7e98 <lcd_displaying_task+0x460>)
    7d10:	0018      	movs	r0, r3
    7d12:	4b41      	ldr	r3, [pc, #260]	; (7e18 <lcd_displaying_task+0x3e0>)
    7d14:	4798      	blx	r3
    7d16:	e008      	b.n	7d2a <lcd_displaying_task+0x2f2>
				}
				else if (overheadLevel == OVERHEADCRITICALLEVEL)
    7d18:	4b5d      	ldr	r3, [pc, #372]	; (7e90 <lcd_displaying_task+0x458>)
    7d1a:	781b      	ldrb	r3, [r3, #0]
    7d1c:	b2db      	uxtb	r3, r3
    7d1e:	2b00      	cmp	r3, #0
    7d20:	d103      	bne.n	7d2a <lcd_displaying_task+0x2f2>
				{
					lcd_printf("LOW   ");
    7d22:	4b5e      	ldr	r3, [pc, #376]	; (7e9c <lcd_displaying_task+0x464>)
    7d24:	0018      	movs	r0, r3
    7d26:	4b3c      	ldr	r3, [pc, #240]	; (7e18 <lcd_displaying_task+0x3e0>)
    7d28:	4798      	blx	r3
				}
				LCD_setCursor(0,1);
    7d2a:	2101      	movs	r1, #1
    7d2c:	2000      	movs	r0, #0
    7d2e:	4b38      	ldr	r3, [pc, #224]	; (7e10 <lcd_displaying_task+0x3d8>)
    7d30:	4798      	blx	r3
				lcd_printf("U-LEVEL : ");
    7d32:	4b5b      	ldr	r3, [pc, #364]	; (7ea0 <lcd_displaying_task+0x468>)
    7d34:	0018      	movs	r0, r3
    7d36:	4b38      	ldr	r3, [pc, #224]	; (7e18 <lcd_displaying_task+0x3e0>)
    7d38:	4798      	blx	r3
				if (undergroundLevel == CRITICALLEVEL)
    7d3a:	4b5a      	ldr	r3, [pc, #360]	; (7ea4 <lcd_displaying_task+0x46c>)
    7d3c:	781b      	ldrb	r3, [r3, #0]
    7d3e:	2b00      	cmp	r3, #0
    7d40:	d104      	bne.n	7d4c <lcd_displaying_task+0x314>
				{
					lcd_printf("CRTCL ");
    7d42:	4b59      	ldr	r3, [pc, #356]	; (7ea8 <lcd_displaying_task+0x470>)
    7d44:	0018      	movs	r0, r3
    7d46:	4b34      	ldr	r3, [pc, #208]	; (7e18 <lcd_displaying_task+0x3e0>)
    7d48:	4798      	blx	r3
				}
				else if (undergroundLevel == HIGHLEVEL)
				{
					lcd_printf("HIGH  ");
				}
				break;
    7d4a:	e130      	b.n	7fae <lcd_displaying_task+0x576>
				else if (undergroundLevel == LOWLEVEL)
    7d4c:	4b55      	ldr	r3, [pc, #340]	; (7ea4 <lcd_displaying_task+0x46c>)
    7d4e:	781b      	ldrb	r3, [r3, #0]
    7d50:	2b01      	cmp	r3, #1
    7d52:	d104      	bne.n	7d5e <lcd_displaying_task+0x326>
					lcd_printf("LOW   ");
    7d54:	4b51      	ldr	r3, [pc, #324]	; (7e9c <lcd_displaying_task+0x464>)
    7d56:	0018      	movs	r0, r3
    7d58:	4b2f      	ldr	r3, [pc, #188]	; (7e18 <lcd_displaying_task+0x3e0>)
    7d5a:	4798      	blx	r3
				break;
    7d5c:	e127      	b.n	7fae <lcd_displaying_task+0x576>
				else if (undergroundLevel == MIDLEVEL)
    7d5e:	4b51      	ldr	r3, [pc, #324]	; (7ea4 <lcd_displaying_task+0x46c>)
    7d60:	781b      	ldrb	r3, [r3, #0]
    7d62:	2b02      	cmp	r3, #2
    7d64:	d104      	bne.n	7d70 <lcd_displaying_task+0x338>
					lcd_printf("MID   ");
    7d66:	4b4c      	ldr	r3, [pc, #304]	; (7e98 <lcd_displaying_task+0x460>)
    7d68:	0018      	movs	r0, r3
    7d6a:	4b2b      	ldr	r3, [pc, #172]	; (7e18 <lcd_displaying_task+0x3e0>)
    7d6c:	4798      	blx	r3
				break;
    7d6e:	e11e      	b.n	7fae <lcd_displaying_task+0x576>
				else if (undergroundLevel == HIGHLEVEL)
    7d70:	4b4c      	ldr	r3, [pc, #304]	; (7ea4 <lcd_displaying_task+0x46c>)
    7d72:	781b      	ldrb	r3, [r3, #0]
    7d74:	2b03      	cmp	r3, #3
    7d76:	d000      	beq.n	7d7a <lcd_displaying_task+0x342>
    7d78:	e119      	b.n	7fae <lcd_displaying_task+0x576>
					lcd_printf("HIGH  ");
    7d7a:	4b46      	ldr	r3, [pc, #280]	; (7e94 <lcd_displaying_task+0x45c>)
    7d7c:	0018      	movs	r0, r3
    7d7e:	4b26      	ldr	r3, [pc, #152]	; (7e18 <lcd_displaying_task+0x3e0>)
    7d80:	4798      	blx	r3
				break;
    7d82:	e114      	b.n	7fae <lcd_displaying_task+0x576>
			}
			case 5:
			{
				LCD_setCursor(0,0);
    7d84:	2100      	movs	r1, #0
    7d86:	2000      	movs	r0, #0
    7d88:	4b21      	ldr	r3, [pc, #132]	; (7e10 <lcd_displaying_task+0x3d8>)
    7d8a:	4798      	blx	r3
				lcd_printf("BatteryPer: %u%% ",Analog_Parameter_Struct.Battery_percentage);
    7d8c:	4b2f      	ldr	r3, [pc, #188]	; (7e4c <lcd_displaying_task+0x414>)
    7d8e:	7f1b      	ldrb	r3, [r3, #28]
    7d90:	b2db      	uxtb	r3, r3
    7d92:	001a      	movs	r2, r3
    7d94:	4b45      	ldr	r3, [pc, #276]	; (7eac <lcd_displaying_task+0x474>)
    7d96:	0011      	movs	r1, r2
    7d98:	0018      	movs	r0, r3
    7d9a:	4b1f      	ldr	r3, [pc, #124]	; (7e18 <lcd_displaying_task+0x3e0>)
    7d9c:	4798      	blx	r3
				LCD_setCursor(0,1);
    7d9e:	2101      	movs	r1, #1
    7da0:	2000      	movs	r0, #0
    7da2:	4b1b      	ldr	r3, [pc, #108]	; (7e10 <lcd_displaying_task+0x3d8>)
    7da4:	4798      	blx	r3
				lcd_printf("SIGNAL : ");
    7da6:	4b42      	ldr	r3, [pc, #264]	; (7eb0 <lcd_displaying_task+0x478>)
    7da8:	0018      	movs	r0, r3
    7daa:	4b1b      	ldr	r3, [pc, #108]	; (7e18 <lcd_displaying_task+0x3e0>)
    7dac:	4798      	blx	r3
				LCD_setCursor(9,1);
    7dae:	2101      	movs	r1, #1
    7db0:	2009      	movs	r0, #9
    7db2:	4b17      	ldr	r3, [pc, #92]	; (7e10 <lcd_displaying_task+0x3d8>)
    7db4:	4798      	blx	r3
				lcd_printf("       ");
    7db6:	4b3f      	ldr	r3, [pc, #252]	; (7eb4 <lcd_displaying_task+0x47c>)
    7db8:	0018      	movs	r0, r3
    7dba:	4b17      	ldr	r3, [pc, #92]	; (7e18 <lcd_displaying_task+0x3e0>)
    7dbc:	4798      	blx	r3
				LCD_setCursor(9,1);
    7dbe:	2101      	movs	r1, #1
    7dc0:	2009      	movs	r0, #9
    7dc2:	4b13      	ldr	r3, [pc, #76]	; (7e10 <lcd_displaying_task+0x3d8>)
    7dc4:	4798      	blx	r3
				
				uint8_t tempSignal = Signal_Strength;
    7dc6:	233b      	movs	r3, #59	; 0x3b
    7dc8:	18fb      	adds	r3, r7, r3
    7dca:	4a3b      	ldr	r2, [pc, #236]	; (7eb8 <lcd_displaying_task+0x480>)
    7dcc:	7812      	ldrb	r2, [r2, #0]
    7dce:	701a      	strb	r2, [r3, #0]
				for (uint8_t i=0;i<=tempSignal;i++)
    7dd0:	233e      	movs	r3, #62	; 0x3e
    7dd2:	18fb      	adds	r3, r7, r3
    7dd4:	2200      	movs	r2, #0
    7dd6:	701a      	strb	r2, [r3, #0]
    7dd8:	e07d      	b.n	7ed6 <lcd_displaying_task+0x49e>
    7dda:	46c0      	nop			; (mov r8, r8)
    7ddc:	20000803 	.word	0x20000803
    7de0:	00003849 	.word	0x00003849
    7de4:	0000387d 	.word	0x0000387d
    7de8:	0000ee99 	.word	0x0000ee99
    7dec:	00003585 	.word	0x00003585
    7df0:	00017b57 	.word	0x00017b57
    7df4:	00019538 	.word	0x00019538
    7df8:	00019540 	.word	0x00019540
    7dfc:	00019548 	.word	0x00019548
    7e00:	00019550 	.word	0x00019550
    7e04:	00019558 	.word	0x00019558
    7e08:	00003b85 	.word	0x00003b85
    7e0c:	00003b15 	.word	0x00003b15
    7e10:	00003be5 	.word	0x00003be5
    7e14:	00019354 	.word	0x00019354
    7e18:	00003ce1 	.word	0x00003ce1
    7e1c:	00019368 	.word	0x00019368
    7e20:	00000bb8 	.word	0x00000bb8
    7e24:	0001937c 	.word	0x0001937c
    7e28:	00019390 	.word	0x00019390
    7e2c:	000193a4 	.word	0x000193a4
    7e30:	000080f1 	.word	0x000080f1
    7e34:	0000fc01 	.word	0x0000fc01
    7e38:	2000022c 	.word	0x2000022c
    7e3c:	0000f1fd 	.word	0x0000f1fd
    7e40:	0000fca5 	.word	0x0000fca5
    7e44:	00019560 	.word	0x00019560
    7e48:	000193a8 	.word	0x000193a8
    7e4c:	200006cc 	.word	0x200006cc
    7e50:	000193bc 	.word	0x000193bc
    7e54:	000193c8 	.word	0x000193c8
    7e58:	00009e1d 	.word	0x00009e1d
    7e5c:	000193d0 	.word	0x000193d0
    7e60:	000193e4 	.word	0x000193e4
    7e64:	000193f8 	.word	0x000193f8
    7e68:	0001940c 	.word	0x0001940c
    7e6c:	00019424 	.word	0x00019424
    7e70:	20000710 	.word	0x20000710
    7e74:	00019434 	.word	0x00019434
    7e78:	0001943c 	.word	0x0001943c
    7e7c:	00019444 	.word	0x00019444
    7e80:	00019454 	.word	0x00019454
    7e84:	0001945c 	.word	0x0001945c
    7e88:	00019464 	.word	0x00019464
    7e8c:	0001946c 	.word	0x0001946c
    7e90:	20000758 	.word	0x20000758
    7e94:	00019478 	.word	0x00019478
    7e98:	00019480 	.word	0x00019480
    7e9c:	00019488 	.word	0x00019488
    7ea0:	00019490 	.word	0x00019490
    7ea4:	20000800 	.word	0x20000800
    7ea8:	0001949c 	.word	0x0001949c
    7eac:	000194a4 	.word	0x000194a4
    7eb0:	000194b8 	.word	0x000194b8
    7eb4:	000194c4 	.word	0x000194c4
    7eb8:	20000752 	.word	0x20000752
				{
					LCD_write(i);
    7ebc:	233e      	movs	r3, #62	; 0x3e
    7ebe:	18fb      	adds	r3, r7, r3
    7ec0:	781b      	ldrb	r3, [r3, #0]
    7ec2:	0018      	movs	r0, r3
    7ec4:	4b65      	ldr	r3, [pc, #404]	; (805c <lcd_displaying_task+0x624>)
    7ec6:	4798      	blx	r3
				for (uint8_t i=0;i<=tempSignal;i++)
    7ec8:	233e      	movs	r3, #62	; 0x3e
    7eca:	18fb      	adds	r3, r7, r3
    7ecc:	781a      	ldrb	r2, [r3, #0]
    7ece:	233e      	movs	r3, #62	; 0x3e
    7ed0:	18fb      	adds	r3, r7, r3
    7ed2:	3201      	adds	r2, #1
    7ed4:	701a      	strb	r2, [r3, #0]
    7ed6:	233e      	movs	r3, #62	; 0x3e
    7ed8:	18fa      	adds	r2, r7, r3
    7eda:	233b      	movs	r3, #59	; 0x3b
    7edc:	18fb      	adds	r3, r7, r3
    7ede:	7812      	ldrb	r2, [r2, #0]
    7ee0:	781b      	ldrb	r3, [r3, #0]
    7ee2:	429a      	cmp	r2, r3
    7ee4:	d9ea      	bls.n	7ebc <lcd_displaying_task+0x484>
				}
				
				break;
    7ee6:	e065      	b.n	7fb4 <lcd_displaying_task+0x57c>
			}
			case 6:
			{
				LCD_setCursor(0,0);
    7ee8:	2100      	movs	r1, #0
    7eea:	2000      	movs	r0, #0
    7eec:	4b5c      	ldr	r3, [pc, #368]	; (8060 <lcd_displaying_task+0x628>)
    7eee:	4798      	blx	r3
				switch(callStateOnLCD)
    7ef0:	4b5c      	ldr	r3, [pc, #368]	; (8064 <lcd_displaying_task+0x62c>)
    7ef2:	781b      	ldrb	r3, [r3, #0]
    7ef4:	2b05      	cmp	r3, #5
    7ef6:	d85c      	bhi.n	7fb2 <lcd_displaying_task+0x57a>
    7ef8:	009a      	lsls	r2, r3, #2
    7efa:	4b5b      	ldr	r3, [pc, #364]	; (8068 <lcd_displaying_task+0x630>)
    7efc:	18d3      	adds	r3, r2, r3
    7efe:	681b      	ldr	r3, [r3, #0]
    7f00:	469f      	mov	pc, r3
				{
					case LCDCALLSTATE_RINGING:
					{
						lcd_printf("INCOMING CALL.. ");
    7f02:	4b5a      	ldr	r3, [pc, #360]	; (806c <lcd_displaying_task+0x634>)
    7f04:	0018      	movs	r0, r3
    7f06:	4b5a      	ldr	r3, [pc, #360]	; (8070 <lcd_displaying_task+0x638>)
    7f08:	4798      	blx	r3
						LCD_setCursor(0,1);
    7f0a:	2101      	movs	r1, #1
    7f0c:	2000      	movs	r0, #0
    7f0e:	4b54      	ldr	r3, [pc, #336]	; (8060 <lcd_displaying_task+0x628>)
    7f10:	4798      	blx	r3
						lcd_printf("%-16s",numberOnLCD);
    7f12:	4a58      	ldr	r2, [pc, #352]	; (8074 <lcd_displaying_task+0x63c>)
    7f14:	4b58      	ldr	r3, [pc, #352]	; (8078 <lcd_displaying_task+0x640>)
    7f16:	0011      	movs	r1, r2
    7f18:	0018      	movs	r0, r3
    7f1a:	4b55      	ldr	r3, [pc, #340]	; (8070 <lcd_displaying_task+0x638>)
    7f1c:	4798      	blx	r3
						break;
    7f1e:	e045      	b.n	7fac <lcd_displaying_task+0x574>
					}
					case LCDCALLSTATE_INCALL:
					{
						lcd_printf("IN CALL...      ");
    7f20:	4b56      	ldr	r3, [pc, #344]	; (807c <lcd_displaying_task+0x644>)
    7f22:	0018      	movs	r0, r3
    7f24:	4b52      	ldr	r3, [pc, #328]	; (8070 <lcd_displaying_task+0x638>)
    7f26:	4798      	blx	r3
						LCD_setCursor(0,1);
    7f28:	2101      	movs	r1, #1
    7f2a:	2000      	movs	r0, #0
    7f2c:	4b4c      	ldr	r3, [pc, #304]	; (8060 <lcd_displaying_task+0x628>)
    7f2e:	4798      	blx	r3
						lcd_printf("%-16s",numberOnLCD);
    7f30:	4a50      	ldr	r2, [pc, #320]	; (8074 <lcd_displaying_task+0x63c>)
    7f32:	4b51      	ldr	r3, [pc, #324]	; (8078 <lcd_displaying_task+0x640>)
    7f34:	0011      	movs	r1, r2
    7f36:	0018      	movs	r0, r3
    7f38:	4b4d      	ldr	r3, [pc, #308]	; (8070 <lcd_displaying_task+0x638>)
    7f3a:	4798      	blx	r3
						break;
    7f3c:	e036      	b.n	7fac <lcd_displaying_task+0x574>
					}
					case LCDCALLSTATE_OUTGOING:
					{
						lcd_printf("DIALING...      ");
    7f3e:	4b50      	ldr	r3, [pc, #320]	; (8080 <lcd_displaying_task+0x648>)
    7f40:	0018      	movs	r0, r3
    7f42:	4b4b      	ldr	r3, [pc, #300]	; (8070 <lcd_displaying_task+0x638>)
    7f44:	4798      	blx	r3
						LCD_setCursor(0,1);
    7f46:	2101      	movs	r1, #1
    7f48:	2000      	movs	r0, #0
    7f4a:	4b45      	ldr	r3, [pc, #276]	; (8060 <lcd_displaying_task+0x628>)
    7f4c:	4798      	blx	r3
						lcd_printf("%-16s",numberOnLCD);
    7f4e:	4a49      	ldr	r2, [pc, #292]	; (8074 <lcd_displaying_task+0x63c>)
    7f50:	4b49      	ldr	r3, [pc, #292]	; (8078 <lcd_displaying_task+0x640>)
    7f52:	0011      	movs	r1, r2
    7f54:	0018      	movs	r0, r3
    7f56:	4b46      	ldr	r3, [pc, #280]	; (8070 <lcd_displaying_task+0x638>)
    7f58:	4798      	blx	r3
						break;
    7f5a:	e027      	b.n	7fac <lcd_displaying_task+0x574>
					}
					case LCDCALLSTATE_INCOMINGSMS:
					{
						lcd_printf("INCOMING SMS... ");
    7f5c:	4b49      	ldr	r3, [pc, #292]	; (8084 <lcd_displaying_task+0x64c>)
    7f5e:	0018      	movs	r0, r3
    7f60:	4b43      	ldr	r3, [pc, #268]	; (8070 <lcd_displaying_task+0x638>)
    7f62:	4798      	blx	r3
						LCD_setCursor(0,1);
    7f64:	2101      	movs	r1, #1
    7f66:	2000      	movs	r0, #0
    7f68:	4b3d      	ldr	r3, [pc, #244]	; (8060 <lcd_displaying_task+0x628>)
    7f6a:	4798      	blx	r3
						lcd_printf("%-16s",numberOnLCD);
    7f6c:	4a41      	ldr	r2, [pc, #260]	; (8074 <lcd_displaying_task+0x63c>)
    7f6e:	4b42      	ldr	r3, [pc, #264]	; (8078 <lcd_displaying_task+0x640>)
    7f70:	0011      	movs	r1, r2
    7f72:	0018      	movs	r0, r3
    7f74:	4b3e      	ldr	r3, [pc, #248]	; (8070 <lcd_displaying_task+0x638>)
    7f76:	4798      	blx	r3
						setCallStateOnLCD(LCDCALLSTATE_IDLE,NULL,false);
    7f78:	2200      	movs	r2, #0
    7f7a:	2100      	movs	r1, #0
    7f7c:	2000      	movs	r0, #0
    7f7e:	4b42      	ldr	r3, [pc, #264]	; (8088 <lcd_displaying_task+0x650>)
    7f80:	4798      	blx	r3
						break;
    7f82:	e013      	b.n	7fac <lcd_displaying_task+0x574>
					}
					case LCDCALLSTATE_OUTGOINGSMS:
					{
						lcd_printf("OUTGOING SMS... ");
    7f84:	4b41      	ldr	r3, [pc, #260]	; (808c <lcd_displaying_task+0x654>)
    7f86:	0018      	movs	r0, r3
    7f88:	4b39      	ldr	r3, [pc, #228]	; (8070 <lcd_displaying_task+0x638>)
    7f8a:	4798      	blx	r3
						LCD_setCursor(0,1);
    7f8c:	2101      	movs	r1, #1
    7f8e:	2000      	movs	r0, #0
    7f90:	4b33      	ldr	r3, [pc, #204]	; (8060 <lcd_displaying_task+0x628>)
    7f92:	4798      	blx	r3
						lcd_printf("%-16s",numberOnLCD);
    7f94:	4a37      	ldr	r2, [pc, #220]	; (8074 <lcd_displaying_task+0x63c>)
    7f96:	4b38      	ldr	r3, [pc, #224]	; (8078 <lcd_displaying_task+0x640>)
    7f98:	0011      	movs	r1, r2
    7f9a:	0018      	movs	r0, r3
    7f9c:	4b34      	ldr	r3, [pc, #208]	; (8070 <lcd_displaying_task+0x638>)
    7f9e:	4798      	blx	r3
						setCallStateOnLCD(LCDCALLSTATE_IDLE,NULL,false);
    7fa0:	2200      	movs	r2, #0
    7fa2:	2100      	movs	r1, #0
    7fa4:	2000      	movs	r0, #0
    7fa6:	4b38      	ldr	r3, [pc, #224]	; (8088 <lcd_displaying_task+0x650>)
    7fa8:	4798      	blx	r3
						break;
    7faa:	46c0      	nop			; (mov r8, r8)
					}
				}
				break;
    7fac:	e001      	b.n	7fb2 <lcd_displaying_task+0x57a>
				break;
    7fae:	46c0      	nop			; (mov r8, r8)
    7fb0:	e000      	b.n	7fb4 <lcd_displaying_task+0x57c>
				break;
    7fb2:	46c0      	nop			; (mov r8, r8)
			}
		}
		if (xQueueReceive(xfour_Second_Queue,&time,0))
    7fb4:	4b36      	ldr	r3, [pc, #216]	; (8090 <lcd_displaying_task+0x658>)
    7fb6:	681b      	ldr	r3, [r3, #0]
    7fb8:	223a      	movs	r2, #58	; 0x3a
    7fba:	18b9      	adds	r1, r7, r2
    7fbc:	2200      	movs	r2, #0
    7fbe:	0018      	movs	r0, r3
    7fc0:	4b34      	ldr	r3, [pc, #208]	; (8094 <lcd_displaying_task+0x65c>)
    7fc2:	4798      	blx	r3
    7fc4:	1e03      	subs	r3, r0, #0
    7fc6:	d039      	beq.n	803c <lcd_displaying_task+0x604>
		{
			xTimerChangePeriod( four_Second_timeout_timer, 4000/portTICK_PERIOD_MS, portMAX_DELAY);
    7fc8:	4b33      	ldr	r3, [pc, #204]	; (8098 <lcd_displaying_task+0x660>)
    7fca:	6818      	ldr	r0, [r3, #0]
    7fcc:	23fa      	movs	r3, #250	; 0xfa
    7fce:	011a      	lsls	r2, r3, #4
    7fd0:	2301      	movs	r3, #1
    7fd2:	425b      	negs	r3, r3
    7fd4:	9300      	str	r3, [sp, #0]
    7fd6:	2300      	movs	r3, #0
    7fd8:	2104      	movs	r1, #4
    7fda:	4c30      	ldr	r4, [pc, #192]	; (809c <lcd_displaying_task+0x664>)
    7fdc:	47a0      	blx	r4
			if(varPauseDisplay==false)
    7fde:	4b30      	ldr	r3, [pc, #192]	; (80a0 <lcd_displaying_task+0x668>)
    7fe0:	781b      	ldrb	r3, [r3, #0]
    7fe2:	b2db      	uxtb	r3, r3
    7fe4:	2201      	movs	r2, #1
    7fe6:	4053      	eors	r3, r2
    7fe8:	b2db      	uxtb	r3, r3
    7fea:	2b00      	cmp	r3, #0
    7fec:	d026      	beq.n	803c <lcd_displaying_task+0x604>
			{
				screen++;
    7fee:	233f      	movs	r3, #63	; 0x3f
    7ff0:	18fb      	adds	r3, r7, r3
    7ff2:	781a      	ldrb	r2, [r3, #0]
    7ff4:	233f      	movs	r3, #63	; 0x3f
    7ff6:	18fb      	adds	r3, r7, r3
    7ff8:	3201      	adds	r2, #1
    7ffa:	701a      	strb	r2, [r3, #0]
				if(!factory_settings_parameter_struct.ENABLE_WATER && screen==4)
    7ffc:	4b29      	ldr	r3, [pc, #164]	; (80a4 <lcd_displaying_task+0x66c>)
    7ffe:	795b      	ldrb	r3, [r3, #5]
    8000:	2b00      	cmp	r3, #0
    8002:	d10b      	bne.n	801c <lcd_displaying_task+0x5e4>
    8004:	233f      	movs	r3, #63	; 0x3f
    8006:	18fb      	adds	r3, r7, r3
    8008:	781b      	ldrb	r3, [r3, #0]
    800a:	2b04      	cmp	r3, #4
    800c:	d106      	bne.n	801c <lcd_displaying_task+0x5e4>
				{
					screen++;
    800e:	233f      	movs	r3, #63	; 0x3f
    8010:	18fb      	adds	r3, r7, r3
    8012:	781a      	ldrb	r2, [r3, #0]
    8014:	233f      	movs	r3, #63	; 0x3f
    8016:	18fb      	adds	r3, r7, r3
    8018:	3201      	adds	r2, #1
    801a:	701a      	strb	r2, [r3, #0]
				}
				if(callStateOnLCD==LCDCALLSTATE_IDLE && screen==6)
    801c:	4b11      	ldr	r3, [pc, #68]	; (8064 <lcd_displaying_task+0x62c>)
    801e:	781b      	ldrb	r3, [r3, #0]
    8020:	2b00      	cmp	r3, #0
    8022:	d10b      	bne.n	803c <lcd_displaying_task+0x604>
    8024:	233f      	movs	r3, #63	; 0x3f
    8026:	18fb      	adds	r3, r7, r3
    8028:	781b      	ldrb	r3, [r3, #0]
    802a:	2b06      	cmp	r3, #6
    802c:	d106      	bne.n	803c <lcd_displaying_task+0x604>
				{
					screen++;
    802e:	233f      	movs	r3, #63	; 0x3f
    8030:	18fb      	adds	r3, r7, r3
    8032:	781a      	ldrb	r2, [r3, #0]
    8034:	233f      	movs	r3, #63	; 0x3f
    8036:	18fb      	adds	r3, r7, r3
    8038:	3201      	adds	r2, #1
    803a:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		
		if (screen>6)
    803c:	233f      	movs	r3, #63	; 0x3f
    803e:	18fb      	adds	r3, r7, r3
    8040:	781b      	ldrb	r3, [r3, #0]
    8042:	2b06      	cmp	r3, #6
    8044:	d903      	bls.n	804e <lcd_displaying_task+0x616>
		{
			screen=1;
    8046:	233f      	movs	r3, #63	; 0x3f
    8048:	18fb      	adds	r3, r7, r3
    804a:	2201      	movs	r2, #1
    804c:	701a      	strb	r2, [r3, #0]
		}
		
		vTaskDelay(500);
    804e:	23fa      	movs	r3, #250	; 0xfa
    8050:	005b      	lsls	r3, r3, #1
    8052:	0018      	movs	r0, r3
    8054:	4b14      	ldr	r3, [pc, #80]	; (80a8 <lcd_displaying_task+0x670>)
    8056:	4798      	blx	r3
		if (lcd_in_sleep)
    8058:	e59c      	b.n	7b94 <lcd_displaying_task+0x15c>
    805a:	46c0      	nop			; (mov r8, r8)
    805c:	00003a99 	.word	0x00003a99
    8060:	00003be5 	.word	0x00003be5
    8064:	20000789 	.word	0x20000789
    8068:	0001957c 	.word	0x0001957c
    806c:	000194cc 	.word	0x000194cc
    8070:	00003ce1 	.word	0x00003ce1
    8074:	200007ec 	.word	0x200007ec
    8078:	000194e0 	.word	0x000194e0
    807c:	000194e8 	.word	0x000194e8
    8080:	000194fc 	.word	0x000194fc
    8084:	00019510 	.word	0x00019510
    8088:	0000bbdd 	.word	0x0000bbdd
    808c:	00019524 	.word	0x00019524
    8090:	20000228 	.word	0x20000228
    8094:	0000e3f1 	.word	0x0000e3f1
    8098:	2000022c 	.word	0x2000022c
    809c:	0000fca5 	.word	0x0000fca5
    80a0:	20000774 	.word	0x20000774
    80a4:	20000618 	.word	0x20000618
    80a8:	0000ee99 	.word	0x0000ee99

000080ac <start_lcd_service>:
	}
}


void start_lcd_service(void)
{
    80ac:	b590      	push	{r4, r7, lr}
    80ae:	b083      	sub	sp, #12
    80b0:	af02      	add	r7, sp, #8
	
	xfour_Second_Queue=xQueueCreate(1,sizeof(uint8_t));
    80b2:	2200      	movs	r2, #0
    80b4:	2101      	movs	r1, #1
    80b6:	2001      	movs	r0, #1
    80b8:	4b09      	ldr	r3, [pc, #36]	; (80e0 <start_lcd_service+0x34>)
    80ba:	4798      	blx	r3
    80bc:	0002      	movs	r2, r0
    80be:	4b09      	ldr	r3, [pc, #36]	; (80e4 <start_lcd_service+0x38>)
    80c0:	601a      	str	r2, [r3, #0]
	xTaskCreate(lcd_displaying_task,NULL,(uint16_t)400,NULL,1,NULL);
    80c2:	23c8      	movs	r3, #200	; 0xc8
    80c4:	005a      	lsls	r2, r3, #1
    80c6:	4808      	ldr	r0, [pc, #32]	; (80e8 <start_lcd_service+0x3c>)
    80c8:	2300      	movs	r3, #0
    80ca:	9301      	str	r3, [sp, #4]
    80cc:	2301      	movs	r3, #1
    80ce:	9300      	str	r3, [sp, #0]
    80d0:	2300      	movs	r3, #0
    80d2:	2100      	movs	r1, #0
    80d4:	4c05      	ldr	r4, [pc, #20]	; (80ec <start_lcd_service+0x40>)
    80d6:	47a0      	blx	r4
	
}
    80d8:	46c0      	nop			; (mov r8, r8)
    80da:	46bd      	mov	sp, r7
    80dc:	b001      	add	sp, #4
    80de:	bd90      	pop	{r4, r7, pc}
    80e0:	0000e035 	.word	0x0000e035
    80e4:	20000228 	.word	0x20000228
    80e8:	00007a39 	.word	0x00007a39
    80ec:	0000eb59 	.word	0x0000eb59

000080f0 <four_second_timer_callback>:

static void four_second_timer_callback(TimerHandle_t timer)
{
    80f0:	b590      	push	{r4, r7, lr}
    80f2:	b085      	sub	sp, #20
    80f4:	af00      	add	r7, sp, #0
    80f6:	6078      	str	r0, [r7, #4]
	uint8_t ucharfour_Second=1;
    80f8:	230f      	movs	r3, #15
    80fa:	18fb      	adds	r3, r7, r3
    80fc:	2201      	movs	r2, #1
    80fe:	701a      	strb	r2, [r3, #0]
	xQueueSendFromISR(xfour_Second_Queue,&ucharfour_Second,0);
    8100:	4b05      	ldr	r3, [pc, #20]	; (8118 <four_second_timer_callback+0x28>)
    8102:	6818      	ldr	r0, [r3, #0]
    8104:	230f      	movs	r3, #15
    8106:	18f9      	adds	r1, r7, r3
    8108:	2300      	movs	r3, #0
    810a:	2200      	movs	r2, #0
    810c:	4c03      	ldr	r4, [pc, #12]	; (811c <four_second_timer_callback+0x2c>)
    810e:	47a0      	blx	r4
}
    8110:	46c0      	nop			; (mov r8, r8)
    8112:	46bd      	mov	sp, r7
    8114:	b005      	add	sp, #20
    8116:	bd90      	pop	{r4, r7, pc}
    8118:	20000228 	.word	0x20000228
    811c:	0000e2d1 	.word	0x0000e2d1

00008120 <ac_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval ture If the module synchronization is ongoing
 */
static inline bool ac_is_syncing(
        struct ac_module *const module_inst)
{
    8120:	b580      	push	{r7, lr}
    8122:	b084      	sub	sp, #16
    8124:	af00      	add	r7, sp, #0
    8126:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Ac *const ac_module = module_inst->hw;
    8128:	687b      	ldr	r3, [r7, #4]
    812a:	681b      	ldr	r3, [r3, #0]
    812c:	60fb      	str	r3, [r7, #12]
		return true;
	}

	return false;
#else
	if (ac_module->STATUSB.reg & AC_STATUSB_SYNCBUSY) {
    812e:	68fb      	ldr	r3, [r7, #12]
    8130:	7a5b      	ldrb	r3, [r3, #9]
    8132:	b2db      	uxtb	r3, r3
    8134:	b25b      	sxtb	r3, r3
    8136:	2b00      	cmp	r3, #0
    8138:	da01      	bge.n	813e <ac_is_syncing+0x1e>
		return true;
    813a:	2301      	movs	r3, #1
    813c:	e000      	b.n	8140 <ac_is_syncing+0x20>
	}

	return false;
    813e:	2300      	movs	r3, #0
#endif
}
    8140:	0018      	movs	r0, r3
    8142:	46bd      	mov	sp, r7
    8144:	b004      	add	sp, #16
    8146:	bd80      	pop	{r7, pc}

00008148 <ac_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void ac_get_config_defaults(
		struct ac_config *const config)
{
    8148:	b580      	push	{r7, lr}
    814a:	b084      	sub	sp, #16
    814c:	af00      	add	r7, sp, #0
    814e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);
#ifdef FEATURE_AC_RUN_IN_STANDY_PAIR_COMPARATOR
	/* Default configuration values */
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
    8150:	2300      	movs	r3, #0
    8152:	60fb      	str	r3, [r7, #12]
    8154:	e007      	b.n	8166 <ac_get_config_defaults+0x1e>
		config->run_in_standby[i] = false;
    8156:	687a      	ldr	r2, [r7, #4]
    8158:	68fb      	ldr	r3, [r7, #12]
    815a:	18d3      	adds	r3, r2, r3
    815c:	2200      	movs	r2, #0
    815e:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
    8160:	68fb      	ldr	r3, [r7, #12]
    8162:	3301      	adds	r3, #1
    8164:	60fb      	str	r3, [r7, #12]
    8166:	68fb      	ldr	r3, [r7, #12]
    8168:	2b00      	cmp	r3, #0
    816a:	d0f4      	beq.n	8156 <ac_get_config_defaults+0xe>
	}
#endif
#if (SAMD) || (SAMHA1) || (SAMHA0) || (SAMR21)
	config->dig_source_generator = GCLK_GENERATOR_0;
    816c:	687b      	ldr	r3, [r7, #4]
    816e:	2200      	movs	r2, #0
    8170:	705a      	strb	r2, [r3, #1]
	config->ana_source_generator = GCLK_GENERATOR_3;
    8172:	687b      	ldr	r3, [r7, #4]
    8174:	2203      	movs	r2, #3
    8176:	709a      	strb	r2, [r3, #2]
#else
	config->source_generator = GCLK_GENERATOR_0;
#endif
}
    8178:	46c0      	nop			; (mov r8, r8)
    817a:	46bd      	mov	sp, r7
    817c:	b004      	add	sp, #16
    817e:	bd80      	pop	{r7, pc}

00008180 <ac_enable>:
 *
 * \param[in] module_inst  Software instance for the Analog Comparator peripheral
 */
static inline void ac_enable(
		struct ac_module *const module_inst)
{
    8180:	b580      	push	{r7, lr}
    8182:	b084      	sub	sp, #16
    8184:	af00      	add	r7, sp, #0
    8186:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
    8188:	687b      	ldr	r3, [r7, #4]
    818a:	681b      	ldr	r3, [r3, #0]
    818c:	60fb      	str	r3, [r7, #12]

	while (ac_is_syncing(module_inst)) {
    818e:	46c0      	nop			; (mov r8, r8)
    8190:	687b      	ldr	r3, [r7, #4]
    8192:	0018      	movs	r0, r3
    8194:	4b07      	ldr	r3, [pc, #28]	; (81b4 <ac_enable+0x34>)
    8196:	4798      	blx	r3
    8198:	1e03      	subs	r3, r0, #0
    819a:	d1f9      	bne.n	8190 <ac_enable+0x10>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->CTRLA.reg |= AC_CTRLA_ENABLE;
    819c:	68fb      	ldr	r3, [r7, #12]
    819e:	781b      	ldrb	r3, [r3, #0]
    81a0:	b2db      	uxtb	r3, r3
    81a2:	2202      	movs	r2, #2
    81a4:	4313      	orrs	r3, r2
    81a6:	b2da      	uxtb	r2, r3
    81a8:	68fb      	ldr	r3, [r7, #12]
    81aa:	701a      	strb	r2, [r3, #0]
}
    81ac:	46c0      	nop			; (mov r8, r8)
    81ae:	46bd      	mov	sp, r7
    81b0:	b004      	add	sp, #16
    81b2:	bd80      	pop	{r7, pc}
    81b4:	00008121 	.word	0x00008121

000081b8 <ac_enable_events>:
 *  \param[in] events       Struct containing flags of events to enable
 */
static inline void ac_enable_events(
		struct ac_module *const module_inst,
		struct ac_events *const events)
{
    81b8:	b580      	push	{r7, lr}
    81ba:	b086      	sub	sp, #24
    81bc:	af00      	add	r7, sp, #0
    81be:	6078      	str	r0, [r7, #4]
    81c0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(events);

	Ac *const ac_module = module_inst->hw;
    81c2:	687b      	ldr	r3, [r7, #4]
    81c4:	681b      	ldr	r3, [r3, #0]
    81c6:	60fb      	str	r3, [r7, #12]

	uint32_t event_mask = 0;
    81c8:	2300      	movs	r3, #0
    81ca:	617b      	str	r3, [r7, #20]

	/* Configure window output events for each comparator pair */
	for (uint8_t i = 0; i < AC_PAIRS; i++) {
    81cc:	2313      	movs	r3, #19
    81ce:	18fb      	adds	r3, r7, r3
    81d0:	2200      	movs	r2, #0
    81d2:	701a      	strb	r2, [r3, #0]
    81d4:	e017      	b.n	8206 <ac_enable_events+0x4e>
		if (events->generate_event_on_window[i] == true) {
    81d6:	2313      	movs	r3, #19
    81d8:	18fb      	adds	r3, r7, r3
    81da:	781b      	ldrb	r3, [r3, #0]
    81dc:	683a      	ldr	r2, [r7, #0]
    81de:	5cd3      	ldrb	r3, [r2, r3]
    81e0:	2b00      	cmp	r3, #0
    81e2:	d009      	beq.n	81f8 <ac_enable_events+0x40>
			event_mask |= (AC_EVCTRL_WINEO0 << i);
    81e4:	2313      	movs	r3, #19
    81e6:	18fb      	adds	r3, r7, r3
    81e8:	781b      	ldrb	r3, [r3, #0]
    81ea:	2210      	movs	r2, #16
    81ec:	409a      	lsls	r2, r3
    81ee:	0013      	movs	r3, r2
    81f0:	001a      	movs	r2, r3
    81f2:	697b      	ldr	r3, [r7, #20]
    81f4:	4313      	orrs	r3, r2
    81f6:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < AC_PAIRS; i++) {
    81f8:	2313      	movs	r3, #19
    81fa:	18fb      	adds	r3, r7, r3
    81fc:	781a      	ldrb	r2, [r3, #0]
    81fe:	2313      	movs	r3, #19
    8200:	18fb      	adds	r3, r7, r3
    8202:	3201      	adds	r2, #1
    8204:	701a      	strb	r2, [r3, #0]
    8206:	2313      	movs	r3, #19
    8208:	18fb      	adds	r3, r7, r3
    820a:	781b      	ldrb	r3, [r3, #0]
    820c:	2b00      	cmp	r3, #0
    820e:	d0e2      	beq.n	81d6 <ac_enable_events+0x1e>
		}
	}

	/* Configure sample input/output events for each comparator */
	for (uint8_t i = 0; i < AC_NUM_CMP; i++) {
    8210:	2312      	movs	r3, #18
    8212:	18fb      	adds	r3, r7, r3
    8214:	2200      	movs	r2, #0
    8216:	701a      	strb	r2, [r3, #0]
    8218:	e02b      	b.n	8272 <ac_enable_events+0xba>
		if (events->on_event_sample[i] == true) {
    821a:	2312      	movs	r3, #18
    821c:	18fb      	adds	r3, r7, r3
    821e:	781b      	ldrb	r3, [r3, #0]
    8220:	683a      	ldr	r2, [r7, #0]
    8222:	18d3      	adds	r3, r2, r3
    8224:	78db      	ldrb	r3, [r3, #3]
    8226:	2b00      	cmp	r3, #0
    8228:	d00a      	beq.n	8240 <ac_enable_events+0x88>
			event_mask |= (AC_EVCTRL_COMPEI0 << i);
    822a:	2312      	movs	r3, #18
    822c:	18fb      	adds	r3, r7, r3
    822e:	781b      	ldrb	r3, [r3, #0]
    8230:	2280      	movs	r2, #128	; 0x80
    8232:	0052      	lsls	r2, r2, #1
    8234:	409a      	lsls	r2, r3
    8236:	0013      	movs	r3, r2
    8238:	001a      	movs	r2, r3
    823a:	697b      	ldr	r3, [r7, #20]
    823c:	4313      	orrs	r3, r2
    823e:	617b      	str	r3, [r7, #20]
		}

		if (events->generate_event_on_state[i] == true) {
    8240:	2312      	movs	r3, #18
    8242:	18fb      	adds	r3, r7, r3
    8244:	781b      	ldrb	r3, [r3, #0]
    8246:	683a      	ldr	r2, [r7, #0]
    8248:	18d3      	adds	r3, r2, r3
    824a:	785b      	ldrb	r3, [r3, #1]
    824c:	2b00      	cmp	r3, #0
    824e:	d009      	beq.n	8264 <ac_enable_events+0xac>
			event_mask |= (AC_EVCTRL_COMPEO0 << i);
    8250:	2312      	movs	r3, #18
    8252:	18fb      	adds	r3, r7, r3
    8254:	781b      	ldrb	r3, [r3, #0]
    8256:	2201      	movs	r2, #1
    8258:	409a      	lsls	r2, r3
    825a:	0013      	movs	r3, r2
    825c:	001a      	movs	r2, r3
    825e:	697b      	ldr	r3, [r7, #20]
    8260:	4313      	orrs	r3, r2
    8262:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < AC_NUM_CMP; i++) {
    8264:	2312      	movs	r3, #18
    8266:	18fb      	adds	r3, r7, r3
    8268:	781a      	ldrb	r2, [r3, #0]
    826a:	2312      	movs	r3, #18
    826c:	18fb      	adds	r3, r7, r3
    826e:	3201      	adds	r2, #1
    8270:	701a      	strb	r2, [r3, #0]
    8272:	2312      	movs	r3, #18
    8274:	18fb      	adds	r3, r7, r3
    8276:	781b      	ldrb	r3, [r3, #0]
    8278:	2b01      	cmp	r3, #1
    827a:	d9ce      	bls.n	821a <ac_enable_events+0x62>
		}
	}

	ac_module->EVCTRL.reg |= event_mask;
    827c:	68fb      	ldr	r3, [r7, #12]
    827e:	885b      	ldrh	r3, [r3, #2]
    8280:	b29a      	uxth	r2, r3
    8282:	697b      	ldr	r3, [r7, #20]
    8284:	b29b      	uxth	r3, r3
    8286:	4313      	orrs	r3, r2
    8288:	b29a      	uxth	r2, r3
    828a:	68fb      	ldr	r3, [r7, #12]
    828c:	805a      	strh	r2, [r3, #2]
}
    828e:	46c0      	nop			; (mov r8, r8)
    8290:	46bd      	mov	sp, r7
    8292:	b006      	add	sp, #24
    8294:	bd80      	pop	{r7, pc}
	...

00008298 <ac_chan_enable>:
 *  \param[in] channel      Comparator channel to enable
 */
static inline void ac_chan_enable(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel)
{
    8298:	b580      	push	{r7, lr}
    829a:	b084      	sub	sp, #16
    829c:	af00      	add	r7, sp, #0
    829e:	6078      	str	r0, [r7, #4]
    82a0:	000a      	movs	r2, r1
    82a2:	1cfb      	adds	r3, r7, #3
    82a4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
    82a6:	687b      	ldr	r3, [r7, #4]
    82a8:	681b      	ldr	r3, [r3, #0]
    82aa:	60fb      	str	r3, [r7, #12]

	while (ac_is_syncing(module_inst)) {
    82ac:	46c0      	nop			; (mov r8, r8)
    82ae:	687b      	ldr	r3, [r7, #4]
    82b0:	0018      	movs	r0, r3
    82b2:	4b0b      	ldr	r3, [pc, #44]	; (82e0 <ac_chan_enable+0x48>)
    82b4:	4798      	blx	r3
    82b6:	1e03      	subs	r3, r0, #0
    82b8:	d1f9      	bne.n	82ae <ac_chan_enable+0x16>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->COMPCTRL[(uint8_t)channel].reg |= AC_COMPCTRL_ENABLE;
    82ba:	1cfb      	adds	r3, r7, #3
    82bc:	781a      	ldrb	r2, [r3, #0]
    82be:	1cfb      	adds	r3, r7, #3
    82c0:	7819      	ldrb	r1, [r3, #0]
    82c2:	68fb      	ldr	r3, [r7, #12]
    82c4:	3104      	adds	r1, #4
    82c6:	0089      	lsls	r1, r1, #2
    82c8:	58cb      	ldr	r3, [r1, r3]
    82ca:	2101      	movs	r1, #1
    82cc:	4319      	orrs	r1, r3
    82ce:	68fb      	ldr	r3, [r7, #12]
    82d0:	3204      	adds	r2, #4
    82d2:	0092      	lsls	r2, r2, #2
    82d4:	50d1      	str	r1, [r2, r3]
}
    82d6:	46c0      	nop			; (mov r8, r8)
    82d8:	46bd      	mov	sp, r7
    82da:	b004      	add	sp, #16
    82dc:	bd80      	pop	{r7, pc}
    82de:	46c0      	nop			; (mov r8, r8)
    82e0:	00008121 	.word	0x00008121

000082e4 <ac_chan_is_ready>:
 *  \return Comparator channel readiness state.
 */
static inline bool ac_chan_is_ready(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel)
{
    82e4:	b580      	push	{r7, lr}
    82e6:	b084      	sub	sp, #16
    82e8:	af00      	add	r7, sp, #0
    82ea:	6078      	str	r0, [r7, #4]
    82ec:	000a      	movs	r2, r1
    82ee:	1cfb      	adds	r3, r7, #3
    82f0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
    82f2:	687b      	ldr	r3, [r7, #4]
    82f4:	681b      	ldr	r3, [r3, #0]
    82f6:	60fb      	str	r3, [r7, #12]

	return (ac_module->STATUSB.reg & (AC_STATUSB_READY0 << (uint8_t)channel));
    82f8:	68fb      	ldr	r3, [r7, #12]
    82fa:	7a5b      	ldrb	r3, [r3, #9]
    82fc:	b2db      	uxtb	r3, r3
    82fe:	0019      	movs	r1, r3
    8300:	1cfb      	adds	r3, r7, #3
    8302:	781b      	ldrb	r3, [r3, #0]
    8304:	2201      	movs	r2, #1
    8306:	409a      	lsls	r2, r3
    8308:	0013      	movs	r3, r2
    830a:	400b      	ands	r3, r1
    830c:	1e5a      	subs	r2, r3, #1
    830e:	4193      	sbcs	r3, r2
    8310:	b2db      	uxtb	r3, r3
}
    8312:	0018      	movs	r0, r3
    8314:	46bd      	mov	sp, r7
    8316:	b004      	add	sp, #16
    8318:	bd80      	pop	{r7, pc}
	...

0000831c <ac_chan_get_status>:
 *  \return Bit mask of comparator channel status flags.
 */
static inline uint8_t ac_chan_get_status(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel)
{
    831c:	b580      	push	{r7, lr}
    831e:	b084      	sub	sp, #16
    8320:	af00      	add	r7, sp, #0
    8322:	6078      	str	r0, [r7, #4]
    8324:	000a      	movs	r2, r1
    8326:	1cfb      	adds	r3, r7, #3
    8328:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
    832a:	687b      	ldr	r3, [r7, #4]
    832c:	681b      	ldr	r3, [r3, #0]
    832e:	60bb      	str	r3, [r7, #8]

	uint8_t status_mask = 0;
    8330:	230f      	movs	r3, #15
    8332:	18fb      	adds	r3, r7, r3
    8334:	2200      	movs	r2, #0
    8336:	701a      	strb	r2, [r3, #0]

	if (ac_module->INTFLAG.reg & (1 << channel)) {
    8338:	68bb      	ldr	r3, [r7, #8]
    833a:	799b      	ldrb	r3, [r3, #6]
    833c:	b2db      	uxtb	r3, r3
    833e:	001a      	movs	r2, r3
    8340:	1cfb      	adds	r3, r7, #3
    8342:	781b      	ldrb	r3, [r3, #0]
    8344:	411a      	asrs	r2, r3
    8346:	0013      	movs	r3, r2
    8348:	2201      	movs	r2, #1
    834a:	4013      	ands	r3, r2
    834c:	d003      	beq.n	8356 <ac_chan_get_status+0x3a>
		status_mask = AC_CHAN_STATUS_INTERRUPT_SET;
    834e:	230f      	movs	r3, #15
    8350:	18fb      	adds	r3, r7, r3
    8352:	2208      	movs	r2, #8
    8354:	701a      	strb	r2, [r3, #0]
	}

	if (ac_chan_is_ready(module_inst, channel) == false) {
    8356:	1cfb      	adds	r3, r7, #3
    8358:	781a      	ldrb	r2, [r3, #0]
    835a:	687b      	ldr	r3, [r7, #4]
    835c:	0011      	movs	r1, r2
    835e:	0018      	movs	r0, r3
    8360:	4b1b      	ldr	r3, [pc, #108]	; (83d0 <ac_chan_get_status+0xb4>)
    8362:	4798      	blx	r3
    8364:	0003      	movs	r3, r0
    8366:	001a      	movs	r2, r3
    8368:	2301      	movs	r3, #1
    836a:	4053      	eors	r3, r2
    836c:	b2db      	uxtb	r3, r3
    836e:	2b00      	cmp	r3, #0
    8370:	d00b      	beq.n	838a <ac_chan_get_status+0x6e>
		status_mask |= AC_CHAN_STATUS_UNKNOWN;
    8372:	230f      	movs	r3, #15
    8374:	18fb      	adds	r3, r7, r3
    8376:	220f      	movs	r2, #15
    8378:	18ba      	adds	r2, r7, r2
    837a:	7812      	ldrb	r2, [r2, #0]
    837c:	2101      	movs	r1, #1
    837e:	430a      	orrs	r2, r1
    8380:	701a      	strb	r2, [r3, #0]
		return status_mask;
    8382:	230f      	movs	r3, #15
    8384:	18fb      	adds	r3, r7, r3
    8386:	781b      	ldrb	r3, [r3, #0]
    8388:	e01e      	b.n	83c8 <ac_chan_get_status+0xac>
	}

	if (ac_module->STATUSA.reg & (AC_STATUSA_STATE0 << (uint8_t)channel)) {
    838a:	68bb      	ldr	r3, [r7, #8]
    838c:	7a1b      	ldrb	r3, [r3, #8]
    838e:	b2db      	uxtb	r3, r3
    8390:	001a      	movs	r2, r3
    8392:	1cfb      	adds	r3, r7, #3
    8394:	781b      	ldrb	r3, [r3, #0]
    8396:	411a      	asrs	r2, r3
    8398:	0013      	movs	r3, r2
    839a:	2201      	movs	r2, #1
    839c:	4013      	ands	r3, r2
    839e:	d008      	beq.n	83b2 <ac_chan_get_status+0x96>
		status_mask |= AC_CHAN_STATUS_POS_ABOVE_NEG;
    83a0:	230f      	movs	r3, #15
    83a2:	18fb      	adds	r3, r7, r3
    83a4:	220f      	movs	r2, #15
    83a6:	18ba      	adds	r2, r7, r2
    83a8:	7812      	ldrb	r2, [r2, #0]
    83aa:	2104      	movs	r1, #4
    83ac:	430a      	orrs	r2, r1
    83ae:	701a      	strb	r2, [r3, #0]
    83b0:	e007      	b.n	83c2 <ac_chan_get_status+0xa6>
	} else {
		status_mask |= AC_CHAN_STATUS_NEG_ABOVE_POS;
    83b2:	230f      	movs	r3, #15
    83b4:	18fb      	adds	r3, r7, r3
    83b6:	220f      	movs	r2, #15
    83b8:	18ba      	adds	r2, r7, r2
    83ba:	7812      	ldrb	r2, [r2, #0]
    83bc:	2102      	movs	r1, #2
    83be:	430a      	orrs	r2, r1
    83c0:	701a      	strb	r2, [r3, #0]
	}
	return status_mask;
    83c2:	230f      	movs	r3, #15
    83c4:	18fb      	adds	r3, r7, r3
    83c6:	781b      	ldrb	r3, [r3, #0]
}
    83c8:	0018      	movs	r0, r3
    83ca:	46bd      	mov	sp, r7
    83cc:	b004      	add	sp, #16
    83ce:	bd80      	pop	{r7, pc}
    83d0:	000082e5 	.word	0x000082e5

000083d4 <system_interrupt_enable>:
{
    83d4:	b580      	push	{r7, lr}
    83d6:	b082      	sub	sp, #8
    83d8:	af00      	add	r7, sp, #0
    83da:	0002      	movs	r2, r0
    83dc:	1dfb      	adds	r3, r7, #7
    83de:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    83e0:	4b06      	ldr	r3, [pc, #24]	; (83fc <system_interrupt_enable+0x28>)
    83e2:	1dfa      	adds	r2, r7, #7
    83e4:	7812      	ldrb	r2, [r2, #0]
    83e6:	0011      	movs	r1, r2
    83e8:	221f      	movs	r2, #31
    83ea:	400a      	ands	r2, r1
    83ec:	2101      	movs	r1, #1
    83ee:	4091      	lsls	r1, r2
    83f0:	000a      	movs	r2, r1
    83f2:	601a      	str	r2, [r3, #0]
}
    83f4:	46c0      	nop			; (mov r8, r8)
    83f6:	46bd      	mov	sp, r7
    83f8:	b002      	add	sp, #8
    83fa:	bd80      	pop	{r7, pc}
    83fc:	e000e100 	.word	0xe000e100

00008400 <ac_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void ac_enable_callback(
		struct ac_module *const module,
		const enum ac_callback callback_type)
{
    8400:	b580      	push	{r7, lr}
    8402:	b084      	sub	sp, #16
    8404:	af00      	add	r7, sp, #0
    8406:	6078      	str	r0, [r7, #4]
    8408:	000a      	movs	r2, r1
    840a:	1cfb      	adds	r3, r7, #3
    840c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Set software flag for the callback */
	module->enable_callback_mask |= (1 << callback_type);
    840e:	687b      	ldr	r3, [r7, #4]
    8410:	7e5b      	ldrb	r3, [r3, #25]
    8412:	b25a      	sxtb	r2, r3
    8414:	1cfb      	adds	r3, r7, #3
    8416:	781b      	ldrb	r3, [r3, #0]
    8418:	2101      	movs	r1, #1
    841a:	4099      	lsls	r1, r3
    841c:	000b      	movs	r3, r1
    841e:	b25b      	sxtb	r3, r3
    8420:	4313      	orrs	r3, r2
    8422:	b25b      	sxtb	r3, r3
    8424:	b2da      	uxtb	r2, r3
    8426:	687b      	ldr	r3, [r7, #4]
    8428:	765a      	strb	r2, [r3, #25]

	uint32_t inenset_temp = 0;
    842a:	2300      	movs	r3, #0
    842c:	60fb      	str	r3, [r7, #12]

	switch (callback_type)
    842e:	1cfb      	adds	r3, r7, #3
    8430:	781b      	ldrb	r3, [r3, #0]
    8432:	2b01      	cmp	r3, #1
    8434:	d009      	beq.n	844a <ac_enable_callback+0x4a>
    8436:	2b04      	cmp	r3, #4
    8438:	d00c      	beq.n	8454 <ac_enable_callback+0x54>
    843a:	2b00      	cmp	r3, #0
    843c:	d000      	beq.n	8440 <ac_enable_callback+0x40>
			inenset_temp |= AC_INTFLAG_WIN1;
			break;
#  endif
#endif
		default:
			break;
    843e:	e00e      	b.n	845e <ac_enable_callback+0x5e>
			inenset_temp |= AC_INTFLAG_COMP0;
    8440:	68fb      	ldr	r3, [r7, #12]
    8442:	2201      	movs	r2, #1
    8444:	4313      	orrs	r3, r2
    8446:	60fb      	str	r3, [r7, #12]
			break;
    8448:	e009      	b.n	845e <ac_enable_callback+0x5e>
			inenset_temp |= AC_INTFLAG_COMP1;
    844a:	68fb      	ldr	r3, [r7, #12]
    844c:	2202      	movs	r2, #2
    844e:	4313      	orrs	r3, r2
    8450:	60fb      	str	r3, [r7, #12]
			break;
    8452:	e004      	b.n	845e <ac_enable_callback+0x5e>
			inenset_temp |= AC_INTFLAG_WIN0;
    8454:	68fb      	ldr	r3, [r7, #12]
    8456:	2210      	movs	r2, #16
    8458:	4313      	orrs	r3, r2
    845a:	60fb      	str	r3, [r7, #12]
			break;
    845c:	46c0      	nop			; (mov r8, r8)
	}

	/* Enable the interrupt for the callback */
	module->hw->INTENSET.reg = inenset_temp;
    845e:	687b      	ldr	r3, [r7, #4]
    8460:	681b      	ldr	r3, [r3, #0]
    8462:	68fa      	ldr	r2, [r7, #12]
    8464:	b2d2      	uxtb	r2, r2
    8466:	715a      	strb	r2, [r3, #5]

#if (AC_INST_NUM == 1)
	/* Enable interrupts for AC module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_AC);
    8468:	2018      	movs	r0, #24
    846a:	4b03      	ldr	r3, [pc, #12]	; (8478 <ac_enable_callback+0x78>)
    846c:	4798      	blx	r3
#elif (AC_INST_NUM > 1)
	system_interrupt_enable(_ac_interrupt_get_interrupt_vector(_ac_get_inst_index(module->hw)));
#endif /* (AC_INST_NUM > 1) */
}
    846e:	46c0      	nop			; (mov r8, r8)
    8470:	46bd      	mov	sp, r7
    8472:	b004      	add	sp, #16
    8474:	bd80      	pop	{r7, pc}
    8476:	46c0      	nop			; (mov r8, r8)
    8478:	000083d5 	.word	0x000083d5

0000847c <system_pinmux_get_group_from_gpio_pin>:
{
    847c:	b580      	push	{r7, lr}
    847e:	b084      	sub	sp, #16
    8480:	af00      	add	r7, sp, #0
    8482:	0002      	movs	r2, r0
    8484:	1dfb      	adds	r3, r7, #7
    8486:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    8488:	230f      	movs	r3, #15
    848a:	18fb      	adds	r3, r7, r3
    848c:	1dfa      	adds	r2, r7, #7
    848e:	7812      	ldrb	r2, [r2, #0]
    8490:	09d2      	lsrs	r2, r2, #7
    8492:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    8494:	230e      	movs	r3, #14
    8496:	18fb      	adds	r3, r7, r3
    8498:	1dfa      	adds	r2, r7, #7
    849a:	7812      	ldrb	r2, [r2, #0]
    849c:	0952      	lsrs	r2, r2, #5
    849e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    84a0:	4b0d      	ldr	r3, [pc, #52]	; (84d8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    84a2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    84a4:	230f      	movs	r3, #15
    84a6:	18fb      	adds	r3, r7, r3
    84a8:	781b      	ldrb	r3, [r3, #0]
    84aa:	2b00      	cmp	r3, #0
    84ac:	d10f      	bne.n	84ce <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    84ae:	230f      	movs	r3, #15
    84b0:	18fb      	adds	r3, r7, r3
    84b2:	781b      	ldrb	r3, [r3, #0]
    84b4:	009b      	lsls	r3, r3, #2
    84b6:	2210      	movs	r2, #16
    84b8:	4694      	mov	ip, r2
    84ba:	44bc      	add	ip, r7
    84bc:	4463      	add	r3, ip
    84be:	3b08      	subs	r3, #8
    84c0:	681a      	ldr	r2, [r3, #0]
    84c2:	230e      	movs	r3, #14
    84c4:	18fb      	adds	r3, r7, r3
    84c6:	781b      	ldrb	r3, [r3, #0]
    84c8:	01db      	lsls	r3, r3, #7
    84ca:	18d3      	adds	r3, r2, r3
    84cc:	e000      	b.n	84d0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    84ce:	2300      	movs	r3, #0
}
    84d0:	0018      	movs	r0, r3
    84d2:	46bd      	mov	sp, r7
    84d4:	b004      	add	sp, #16
    84d6:	bd80      	pop	{r7, pc}
    84d8:	41004400 	.word	0x41004400

000084dc <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    84dc:	b580      	push	{r7, lr}
    84de:	b084      	sub	sp, #16
    84e0:	af00      	add	r7, sp, #0
    84e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    84e4:	687b      	ldr	r3, [r7, #4]
    84e6:	681b      	ldr	r3, [r3, #0]
    84e8:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    84ea:	68fb      	ldr	r3, [r7, #12]
    84ec:	7e5b      	ldrb	r3, [r3, #25]
    84ee:	b2db      	uxtb	r3, r3
    84f0:	b25b      	sxtb	r3, r3
    84f2:	2b00      	cmp	r3, #0
    84f4:	da01      	bge.n	84fa <adc_is_syncing+0x1e>
		return true;
    84f6:	2301      	movs	r3, #1
    84f8:	e000      	b.n	84fc <adc_is_syncing+0x20>
	}

	return false;
    84fa:	2300      	movs	r3, #0
}
    84fc:	0018      	movs	r0, r3
    84fe:	46bd      	mov	sp, r7
    8500:	b004      	add	sp, #16
    8502:	bd80      	pop	{r7, pc}

00008504 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
    8504:	b580      	push	{r7, lr}
    8506:	b086      	sub	sp, #24
    8508:	af00      	add	r7, sp, #0
    850a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    850c:	687b      	ldr	r3, [r7, #4]
    850e:	681b      	ldr	r3, [r3, #0]
    8510:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    8512:	693b      	ldr	r3, [r7, #16]
    8514:	7e1b      	ldrb	r3, [r3, #24]
    8516:	b2db      	uxtb	r3, r3
    8518:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
    851a:	2300      	movs	r3, #0
    851c:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    851e:	68fb      	ldr	r3, [r7, #12]
    8520:	2201      	movs	r2, #1
    8522:	4013      	ands	r3, r2
    8524:	d003      	beq.n	852e <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
    8526:	697b      	ldr	r3, [r7, #20]
    8528:	2201      	movs	r2, #1
    852a:	4313      	orrs	r3, r2
    852c:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    852e:	68fb      	ldr	r3, [r7, #12]
    8530:	2204      	movs	r2, #4
    8532:	4013      	ands	r3, r2
    8534:	d003      	beq.n	853e <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
    8536:	697b      	ldr	r3, [r7, #20]
    8538:	2202      	movs	r2, #2
    853a:	4313      	orrs	r3, r2
    853c:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    853e:	68fb      	ldr	r3, [r7, #12]
    8540:	2202      	movs	r2, #2
    8542:	4013      	ands	r3, r2
    8544:	d003      	beq.n	854e <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
    8546:	697b      	ldr	r3, [r7, #20]
    8548:	2204      	movs	r2, #4
    854a:	4313      	orrs	r3, r2
    854c:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
    854e:	697b      	ldr	r3, [r7, #20]
}
    8550:	0018      	movs	r0, r3
    8552:	46bd      	mov	sp, r7
    8554:	b006      	add	sp, #24
    8556:	bd80      	pop	{r7, pc}

00008558 <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
    8558:	b580      	push	{r7, lr}
    855a:	b084      	sub	sp, #16
    855c:	af00      	add	r7, sp, #0
    855e:	6078      	str	r0, [r7, #4]
    8560:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    8562:	687b      	ldr	r3, [r7, #4]
    8564:	681b      	ldr	r3, [r3, #0]
    8566:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
    8568:	2300      	movs	r3, #0
    856a:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
    856c:	683b      	ldr	r3, [r7, #0]
    856e:	2201      	movs	r2, #1
    8570:	4013      	ands	r3, r2
    8572:	d003      	beq.n	857c <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
    8574:	68fb      	ldr	r3, [r7, #12]
    8576:	2201      	movs	r2, #1
    8578:	4313      	orrs	r3, r2
    857a:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
    857c:	683b      	ldr	r3, [r7, #0]
    857e:	2202      	movs	r2, #2
    8580:	4013      	ands	r3, r2
    8582:	d003      	beq.n	858c <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
    8584:	68fb      	ldr	r3, [r7, #12]
    8586:	2204      	movs	r2, #4
    8588:	4313      	orrs	r3, r2
    858a:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
    858c:	683b      	ldr	r3, [r7, #0]
    858e:	2204      	movs	r2, #4
    8590:	4013      	ands	r3, r2
    8592:	d003      	beq.n	859c <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
    8594:	68fb      	ldr	r3, [r7, #12]
    8596:	2202      	movs	r2, #2
    8598:	4313      	orrs	r3, r2
    859a:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    859c:	68fb      	ldr	r3, [r7, #12]
    859e:	b2da      	uxtb	r2, r3
    85a0:	68bb      	ldr	r3, [r7, #8]
    85a2:	761a      	strb	r2, [r3, #24]
}
    85a4:	46c0      	nop			; (mov r8, r8)
    85a6:	46bd      	mov	sp, r7
    85a8:	b004      	add	sp, #16
    85aa:	bd80      	pop	{r7, pc}

000085ac <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
    85ac:	b580      	push	{r7, lr}
    85ae:	b084      	sub	sp, #16
    85b0:	af00      	add	r7, sp, #0
    85b2:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    85b4:	687b      	ldr	r3, [r7, #4]
    85b6:	681b      	ldr	r3, [r3, #0]
    85b8:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    85ba:	46c0      	nop			; (mov r8, r8)
    85bc:	687b      	ldr	r3, [r7, #4]
    85be:	0018      	movs	r0, r3
    85c0:	4b10      	ldr	r3, [pc, #64]	; (8604 <adc_enable+0x58>)
    85c2:	4798      	blx	r3
    85c4:	1e03      	subs	r3, r0, #0
    85c6:	d1f9      	bne.n	85bc <adc_enable+0x10>
	system_interrupt_enable(_adc_interrupt_get_interrupt_vector(
			_adc_get_inst_index(adc_module)));
#   elif (SAMC20)
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC0);
#	else
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
    85c8:	2017      	movs	r0, #23
    85ca:	4b0f      	ldr	r3, [pc, #60]	; (8608 <adc_enable+0x5c>)
    85cc:	4798      	blx	r3
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    85ce:	68fb      	ldr	r3, [r7, #12]
    85d0:	220f      	movs	r2, #15
    85d2:	759a      	strb	r2, [r3, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    85d4:	68fb      	ldr	r3, [r7, #12]
    85d6:	220f      	movs	r2, #15
    85d8:	761a      	strb	r2, [r3, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    85da:	68fb      	ldr	r3, [r7, #12]
    85dc:	781b      	ldrb	r3, [r3, #0]
    85de:	b2db      	uxtb	r3, r3
    85e0:	2202      	movs	r2, #2
    85e2:	4313      	orrs	r3, r2
    85e4:	b2da      	uxtb	r2, r3
    85e6:	68fb      	ldr	r3, [r7, #12]
    85e8:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
    85ea:	46c0      	nop			; (mov r8, r8)
    85ec:	687b      	ldr	r3, [r7, #4]
    85ee:	0018      	movs	r0, r3
    85f0:	4b04      	ldr	r3, [pc, #16]	; (8604 <adc_enable+0x58>)
    85f2:	4798      	blx	r3
    85f4:	1e03      	subs	r3, r0, #0
    85f6:	d1f9      	bne.n	85ec <adc_enable+0x40>
		/* Wait for synchronization */
	}
	return STATUS_OK;
    85f8:	2300      	movs	r3, #0
}
    85fa:	0018      	movs	r0, r3
    85fc:	46bd      	mov	sp, r7
    85fe:	b004      	add	sp, #16
    8600:	bd80      	pop	{r7, pc}
    8602:	46c0      	nop			; (mov r8, r8)
    8604:	000084dd 	.word	0x000084dd
    8608:	000083d5 	.word	0x000083d5

0000860c <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    860c:	b580      	push	{r7, lr}
    860e:	b084      	sub	sp, #16
    8610:	af00      	add	r7, sp, #0
    8612:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    8614:	687b      	ldr	r3, [r7, #4]
    8616:	681b      	ldr	r3, [r3, #0]
    8618:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    861a:	46c0      	nop			; (mov r8, r8)
    861c:	687b      	ldr	r3, [r7, #4]
    861e:	0018      	movs	r0, r3
    8620:	4b0b      	ldr	r3, [pc, #44]	; (8650 <adc_start_conversion+0x44>)
    8622:	4798      	blx	r3
    8624:	1e03      	subs	r3, r0, #0
    8626:	d1f9      	bne.n	861c <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    8628:	68fb      	ldr	r3, [r7, #12]
    862a:	7b1b      	ldrb	r3, [r3, #12]
    862c:	b2db      	uxtb	r3, r3
    862e:	2202      	movs	r2, #2
    8630:	4313      	orrs	r3, r2
    8632:	b2da      	uxtb	r2, r3
    8634:	68fb      	ldr	r3, [r7, #12]
    8636:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    8638:	46c0      	nop			; (mov r8, r8)
    863a:	687b      	ldr	r3, [r7, #4]
    863c:	0018      	movs	r0, r3
    863e:	4b04      	ldr	r3, [pc, #16]	; (8650 <adc_start_conversion+0x44>)
    8640:	4798      	blx	r3
    8642:	1e03      	subs	r3, r0, #0
    8644:	d1f9      	bne.n	863a <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    8646:	46c0      	nop			; (mov r8, r8)
    8648:	46bd      	mov	sp, r7
    864a:	b004      	add	sp, #16
    864c:	bd80      	pop	{r7, pc}
    864e:	46c0      	nop			; (mov r8, r8)
    8650:	000084dd 	.word	0x000084dd

00008654 <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
    8654:	b580      	push	{r7, lr}
    8656:	b084      	sub	sp, #16
    8658:	af00      	add	r7, sp, #0
    865a:	6078      	str	r0, [r7, #4]
    865c:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    865e:	687b      	ldr	r3, [r7, #4]
    8660:	0018      	movs	r0, r3
    8662:	4b18      	ldr	r3, [pc, #96]	; (86c4 <adc_read+0x70>)
    8664:	4798      	blx	r3
    8666:	0002      	movs	r2, r0
    8668:	2301      	movs	r3, #1
    866a:	4013      	ands	r3, r2
    866c:	d101      	bne.n	8672 <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
    866e:	2305      	movs	r3, #5
    8670:	e023      	b.n	86ba <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
    8672:	687b      	ldr	r3, [r7, #4]
    8674:	681b      	ldr	r3, [r3, #0]
    8676:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMHA1) || (SAMHA0) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    8678:	46c0      	nop			; (mov r8, r8)
    867a:	687b      	ldr	r3, [r7, #4]
    867c:	0018      	movs	r0, r3
    867e:	4b12      	ldr	r3, [pc, #72]	; (86c8 <adc_read+0x74>)
    8680:	4798      	blx	r3
    8682:	1e03      	subs	r3, r0, #0
    8684:	d1f9      	bne.n	867a <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    8686:	68fb      	ldr	r3, [r7, #12]
    8688:	8b5b      	ldrh	r3, [r3, #26]
    868a:	b29a      	uxth	r2, r3
    868c:	683b      	ldr	r3, [r7, #0]
    868e:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    8690:	687b      	ldr	r3, [r7, #4]
    8692:	2101      	movs	r1, #1
    8694:	0018      	movs	r0, r3
    8696:	4b0d      	ldr	r3, [pc, #52]	; (86cc <adc_read+0x78>)
    8698:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    869a:	687b      	ldr	r3, [r7, #4]
    869c:	0018      	movs	r0, r3
    869e:	4b09      	ldr	r3, [pc, #36]	; (86c4 <adc_read+0x70>)
    86a0:	4798      	blx	r3
    86a2:	0002      	movs	r2, r0
    86a4:	2304      	movs	r3, #4
    86a6:	4013      	ands	r3, r2
    86a8:	d006      	beq.n	86b8 <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
    86aa:	687b      	ldr	r3, [r7, #4]
    86ac:	2104      	movs	r1, #4
    86ae:	0018      	movs	r0, r3
    86b0:	4b06      	ldr	r3, [pc, #24]	; (86cc <adc_read+0x78>)
    86b2:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
    86b4:	231e      	movs	r3, #30
    86b6:	e000      	b.n	86ba <adc_read+0x66>
	}

	return STATUS_OK;
    86b8:	2300      	movs	r3, #0
}
    86ba:	0018      	movs	r0, r3
    86bc:	46bd      	mov	sp, r7
    86be:	b004      	add	sp, #16
    86c0:	bd80      	pop	{r7, pc}
    86c2:	46c0      	nop			; (mov r8, r8)
    86c4:	00008505 	.word	0x00008505
    86c8:	000084dd 	.word	0x000084dd
    86cc:	00008559 	.word	0x00008559

000086d0 <adc_set_positive_input>:
 * \param[in] positive_input  Positive input pin
 */
static inline void adc_set_positive_input(
		struct adc_module *const module_inst,
		const enum adc_positive_input positive_input)
{
    86d0:	b580      	push	{r7, lr}
    86d2:	b084      	sub	sp, #16
    86d4:	af00      	add	r7, sp, #0
    86d6:	6078      	str	r0, [r7, #4]
    86d8:	000a      	movs	r2, r1
    86da:	1cfb      	adds	r3, r7, #3
    86dc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    86de:	687b      	ldr	r3, [r7, #4]
    86e0:	681b      	ldr	r3, [r3, #0]
    86e2:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    86e4:	46c0      	nop			; (mov r8, r8)
    86e6:	687b      	ldr	r3, [r7, #4]
    86e8:	0018      	movs	r0, r3
    86ea:	4b0c      	ldr	r3, [pc, #48]	; (871c <adc_set_positive_input+0x4c>)
    86ec:	4798      	blx	r3
    86ee:	1e03      	subs	r3, r0, #0
    86f0:	d1f9      	bne.n	86e6 <adc_set_positive_input+0x16>
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    86f2:	68fb      	ldr	r3, [r7, #12]
    86f4:	691b      	ldr	r3, [r3, #16]
    86f6:	221f      	movs	r2, #31
    86f8:	4393      	bics	r3, r2
    86fa:	001a      	movs	r2, r3
    86fc:	1cfb      	adds	r3, r7, #3
    86fe:	781b      	ldrb	r3, [r3, #0]
    8700:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
    8702:	68fb      	ldr	r3, [r7, #12]
    8704:	611a      	str	r2, [r3, #16]
			(positive_input);

	while (adc_is_syncing(module_inst)) {
    8706:	46c0      	nop			; (mov r8, r8)
    8708:	687b      	ldr	r3, [r7, #4]
    870a:	0018      	movs	r0, r3
    870c:	4b03      	ldr	r3, [pc, #12]	; (871c <adc_set_positive_input+0x4c>)
    870e:	4798      	blx	r3
    8710:	1e03      	subs	r3, r0, #0
    8712:	d1f9      	bne.n	8708 <adc_set_positive_input+0x38>
		/* Wait for synchronization */
	}
}
    8714:	46c0      	nop			; (mov r8, r8)
    8716:	46bd      	mov	sp, r7
    8718:	b004      	add	sp, #16
    871a:	bd80      	pop	{r7, pc}
    871c:	000084dd 	.word	0x000084dd

00008720 <port_get_group_from_gpio_pin>:
{
    8720:	b580      	push	{r7, lr}
    8722:	b082      	sub	sp, #8
    8724:	af00      	add	r7, sp, #0
    8726:	0002      	movs	r2, r0
    8728:	1dfb      	adds	r3, r7, #7
    872a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    872c:	1dfb      	adds	r3, r7, #7
    872e:	781b      	ldrb	r3, [r3, #0]
    8730:	0018      	movs	r0, r3
    8732:	4b03      	ldr	r3, [pc, #12]	; (8740 <port_get_group_from_gpio_pin+0x20>)
    8734:	4798      	blx	r3
    8736:	0003      	movs	r3, r0
}
    8738:	0018      	movs	r0, r3
    873a:	46bd      	mov	sp, r7
    873c:	b002      	add	sp, #8
    873e:	bd80      	pop	{r7, pc}
    8740:	0000847d 	.word	0x0000847d

00008744 <port_get_config_defaults>:
{
    8744:	b580      	push	{r7, lr}
    8746:	b082      	sub	sp, #8
    8748:	af00      	add	r7, sp, #0
    874a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    874c:	687b      	ldr	r3, [r7, #4]
    874e:	2200      	movs	r2, #0
    8750:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    8752:	687b      	ldr	r3, [r7, #4]
    8754:	2201      	movs	r2, #1
    8756:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    8758:	687b      	ldr	r3, [r7, #4]
    875a:	2200      	movs	r2, #0
    875c:	709a      	strb	r2, [r3, #2]
}
    875e:	46c0      	nop			; (mov r8, r8)
    8760:	46bd      	mov	sp, r7
    8762:	b002      	add	sp, #8
    8764:	bd80      	pop	{r7, pc}
	...

00008768 <port_pin_get_input_level>:
{
    8768:	b580      	push	{r7, lr}
    876a:	b084      	sub	sp, #16
    876c:	af00      	add	r7, sp, #0
    876e:	0002      	movs	r2, r0
    8770:	1dfb      	adds	r3, r7, #7
    8772:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    8774:	1dfb      	adds	r3, r7, #7
    8776:	781b      	ldrb	r3, [r3, #0]
    8778:	0018      	movs	r0, r3
    877a:	4b0b      	ldr	r3, [pc, #44]	; (87a8 <port_pin_get_input_level+0x40>)
    877c:	4798      	blx	r3
    877e:	0003      	movs	r3, r0
    8780:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8782:	1dfb      	adds	r3, r7, #7
    8784:	781b      	ldrb	r3, [r3, #0]
    8786:	221f      	movs	r2, #31
    8788:	4013      	ands	r3, r2
    878a:	2201      	movs	r2, #1
    878c:	409a      	lsls	r2, r3
    878e:	0013      	movs	r3, r2
    8790:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
    8792:	68fb      	ldr	r3, [r7, #12]
    8794:	6a1b      	ldr	r3, [r3, #32]
    8796:	68ba      	ldr	r2, [r7, #8]
    8798:	4013      	ands	r3, r2
    879a:	1e5a      	subs	r2, r3, #1
    879c:	4193      	sbcs	r3, r2
    879e:	b2db      	uxtb	r3, r3
}
    87a0:	0018      	movs	r0, r3
    87a2:	46bd      	mov	sp, r7
    87a4:	b004      	add	sp, #16
    87a6:	bd80      	pop	{r7, pc}
    87a8:	00008721 	.word	0x00008721

000087ac <port_pin_set_output_level>:
{
    87ac:	b580      	push	{r7, lr}
    87ae:	b084      	sub	sp, #16
    87b0:	af00      	add	r7, sp, #0
    87b2:	0002      	movs	r2, r0
    87b4:	1dfb      	adds	r3, r7, #7
    87b6:	701a      	strb	r2, [r3, #0]
    87b8:	1dbb      	adds	r3, r7, #6
    87ba:	1c0a      	adds	r2, r1, #0
    87bc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    87be:	1dfb      	adds	r3, r7, #7
    87c0:	781b      	ldrb	r3, [r3, #0]
    87c2:	0018      	movs	r0, r3
    87c4:	4b0d      	ldr	r3, [pc, #52]	; (87fc <port_pin_set_output_level+0x50>)
    87c6:	4798      	blx	r3
    87c8:	0003      	movs	r3, r0
    87ca:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    87cc:	1dfb      	adds	r3, r7, #7
    87ce:	781b      	ldrb	r3, [r3, #0]
    87d0:	221f      	movs	r2, #31
    87d2:	4013      	ands	r3, r2
    87d4:	2201      	movs	r2, #1
    87d6:	409a      	lsls	r2, r3
    87d8:	0013      	movs	r3, r2
    87da:	60bb      	str	r3, [r7, #8]
	if (level) {
    87dc:	1dbb      	adds	r3, r7, #6
    87de:	781b      	ldrb	r3, [r3, #0]
    87e0:	2b00      	cmp	r3, #0
    87e2:	d003      	beq.n	87ec <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    87e4:	68fb      	ldr	r3, [r7, #12]
    87e6:	68ba      	ldr	r2, [r7, #8]
    87e8:	619a      	str	r2, [r3, #24]
}
    87ea:	e002      	b.n	87f2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    87ec:	68fb      	ldr	r3, [r7, #12]
    87ee:	68ba      	ldr	r2, [r7, #8]
    87f0:	615a      	str	r2, [r3, #20]
}
    87f2:	46c0      	nop			; (mov r8, r8)
    87f4:	46bd      	mov	sp, r7
    87f6:	b004      	add	sp, #16
    87f8:	bd80      	pop	{r7, pc}
    87fa:	46c0      	nop			; (mov r8, r8)
    87fc:	00008721 	.word	0x00008721

00008800 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    8800:	b580      	push	{r7, lr}
    8802:	b084      	sub	sp, #16
    8804:	af00      	add	r7, sp, #0
    8806:	0002      	movs	r2, r0
    8808:	1dfb      	adds	r3, r7, #7
    880a:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    880c:	230f      	movs	r3, #15
    880e:	18fb      	adds	r3, r7, r3
    8810:	1dfa      	adds	r2, r7, #7
    8812:	7812      	ldrb	r2, [r2, #0]
    8814:	0952      	lsrs	r2, r2, #5
    8816:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    8818:	230f      	movs	r3, #15
    881a:	18fb      	adds	r3, r7, r3
    881c:	781b      	ldrb	r3, [r3, #0]
    881e:	2b00      	cmp	r3, #0
    8820:	d10c      	bne.n	883c <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    8822:	4b09      	ldr	r3, [pc, #36]	; (8848 <_extint_get_eic_from_channel+0x48>)
    8824:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    8826:	230f      	movs	r3, #15
    8828:	18fb      	adds	r3, r7, r3
    882a:	781b      	ldrb	r3, [r3, #0]
    882c:	009b      	lsls	r3, r3, #2
    882e:	2210      	movs	r2, #16
    8830:	4694      	mov	ip, r2
    8832:	44bc      	add	ip, r7
    8834:	4463      	add	r3, ip
    8836:	3b08      	subs	r3, #8
    8838:	681b      	ldr	r3, [r3, #0]
    883a:	e000      	b.n	883e <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    883c:	2300      	movs	r3, #0
	}
}
    883e:	0018      	movs	r0, r3
    8840:	46bd      	mov	sp, r7
    8842:	b004      	add	sp, #16
    8844:	bd80      	pop	{r7, pc}
    8846:	46c0      	nop			; (mov r8, r8)
    8848:	40001800 	.word	0x40001800

0000884c <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    884c:	b580      	push	{r7, lr}
    884e:	b084      	sub	sp, #16
    8850:	af00      	add	r7, sp, #0
    8852:	0002      	movs	r2, r0
    8854:	1dfb      	adds	r3, r7, #7
    8856:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    8858:	1dfb      	adds	r3, r7, #7
    885a:	781b      	ldrb	r3, [r3, #0]
    885c:	0018      	movs	r0, r3
    885e:	4b09      	ldr	r3, [pc, #36]	; (8884 <extint_chan_clear_detected+0x38>)
    8860:	4798      	blx	r3
    8862:	0003      	movs	r3, r0
    8864:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    8866:	1dfb      	adds	r3, r7, #7
    8868:	781b      	ldrb	r3, [r3, #0]
    886a:	221f      	movs	r2, #31
    886c:	4013      	ands	r3, r2
    886e:	2201      	movs	r2, #1
    8870:	409a      	lsls	r2, r3
    8872:	0013      	movs	r3, r2
    8874:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    8876:	68fb      	ldr	r3, [r7, #12]
    8878:	68ba      	ldr	r2, [r7, #8]
    887a:	611a      	str	r2, [r3, #16]
}
    887c:	46c0      	nop			; (mov r8, r8)
    887e:	46bd      	mov	sp, r7
    8880:	b004      	add	sp, #16
    8882:	bd80      	pop	{r7, pc}
    8884:	00008801 	.word	0x00008801

00008888 <rtc_count_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_count_get_config_defaults(
		struct rtc_count_config *const config)
{
    8888:	b580      	push	{r7, lr}
    888a:	b084      	sub	sp, #16
    888c:	af00      	add	r7, sp, #0
    888e:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
    8890:	687b      	ldr	r3, [r7, #4]
    8892:	22a0      	movs	r2, #160	; 0xa0
    8894:	0112      	lsls	r2, r2, #4
    8896:	801a      	strh	r2, [r3, #0]
	config->mode                = RTC_COUNT_MODE_32BIT;
    8898:	687b      	ldr	r3, [r7, #4]
    889a:	2201      	movs	r2, #1
    889c:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
    889e:	687b      	ldr	r3, [r7, #4]
    88a0:	2200      	movs	r2, #0
    88a2:	70da      	strb	r2, [r3, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    88a4:	687b      	ldr	r3, [r7, #4]
    88a6:	2200      	movs	r2, #0
    88a8:	711a      	strb	r2, [r3, #4]
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    88aa:	230f      	movs	r3, #15
    88ac:	18fb      	adds	r3, r7, r3
    88ae:	2200      	movs	r2, #0
    88b0:	701a      	strb	r2, [r3, #0]
    88b2:	e00e      	b.n	88d2 <rtc_count_get_config_defaults+0x4a>
		config->compare_values[i] = 0;
    88b4:	230f      	movs	r3, #15
    88b6:	18fb      	adds	r3, r7, r3
    88b8:	781a      	ldrb	r2, [r3, #0]
    88ba:	687b      	ldr	r3, [r7, #4]
    88bc:	3202      	adds	r2, #2
    88be:	0092      	lsls	r2, r2, #2
    88c0:	2100      	movs	r1, #0
    88c2:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    88c4:	230f      	movs	r3, #15
    88c6:	18fb      	adds	r3, r7, r3
    88c8:	781a      	ldrb	r2, [r3, #0]
    88ca:	230f      	movs	r3, #15
    88cc:	18fb      	adds	r3, r7, r3
    88ce:	3201      	adds	r2, #1
    88d0:	701a      	strb	r2, [r3, #0]
    88d2:	230f      	movs	r3, #15
    88d4:	18fb      	adds	r3, r7, r3
    88d6:	781b      	ldrb	r3, [r3, #0]
    88d8:	2b01      	cmp	r3, #1
    88da:	d9eb      	bls.n	88b4 <rtc_count_get_config_defaults+0x2c>
	}
}
    88dc:	46c0      	nop			; (mov r8, r8)
    88de:	46bd      	mov	sp, r7
    88e0:	b004      	add	sp, #16
    88e2:	bd80      	pop	{r7, pc}

000088e4 <rtc_count_enable_events>:
 *  \param[in] events    Struct containing flags of events to enable
 */
static inline void rtc_count_enable_events(
		struct rtc_module *const module,
		struct rtc_count_events *const events)
{
    88e4:	b580      	push	{r7, lr}
    88e6:	b086      	sub	sp, #24
    88e8:	af00      	add	r7, sp, #0
    88ea:	6078      	str	r0, [r7, #4]
    88ec:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    88ee:	687b      	ldr	r3, [r7, #4]
    88f0:	681b      	ldr	r3, [r3, #0]
    88f2:	60fb      	str	r3, [r7, #12]

	uint32_t event_mask = 0;
    88f4:	2300      	movs	r3, #0
    88f6:	617b      	str	r3, [r7, #20]

	/* Check if the user has requested an overflow event */
	if (events->generate_event_on_overflow) {
    88f8:	683b      	ldr	r3, [r7, #0]
    88fa:	781b      	ldrb	r3, [r3, #0]
    88fc:	2b00      	cmp	r3, #0
    88fe:	d004      	beq.n	890a <rtc_count_enable_events+0x26>
		event_mask |= RTC_MODE0_EVCTRL_OVFEO;
    8900:	697b      	ldr	r3, [r7, #20]
    8902:	2280      	movs	r2, #128	; 0x80
    8904:	0212      	lsls	r2, r2, #8
    8906:	4313      	orrs	r3, r2
    8908:	617b      	str	r3, [r7, #20]
	}

	/* Check if the user has requested any compare events */
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    890a:	2313      	movs	r3, #19
    890c:	18fb      	adds	r3, r7, r3
    890e:	2200      	movs	r2, #0
    8910:	701a      	strb	r2, [r3, #0]
    8912:	e01c      	b.n	894e <rtc_count_enable_events+0x6a>
		if (events->generate_event_on_compare[i]) {
    8914:	2313      	movs	r3, #19
    8916:	18fb      	adds	r3, r7, r3
    8918:	781b      	ldrb	r3, [r3, #0]
    891a:	683a      	ldr	r2, [r7, #0]
    891c:	18d3      	adds	r3, r2, r3
    891e:	785b      	ldrb	r3, [r3, #1]
    8920:	2b00      	cmp	r3, #0
    8922:	d00d      	beq.n	8940 <rtc_count_enable_events+0x5c>
			event_mask |= RTC_MODE0_EVCTRL_CMPEO(1 << i);
    8924:	2313      	movs	r3, #19
    8926:	18fb      	adds	r3, r7, r3
    8928:	781b      	ldrb	r3, [r3, #0]
    892a:	2201      	movs	r2, #1
    892c:	409a      	lsls	r2, r3
    892e:	0013      	movs	r3, r2
    8930:	021b      	lsls	r3, r3, #8
    8932:	001a      	movs	r2, r3
    8934:	2380      	movs	r3, #128	; 0x80
    8936:	005b      	lsls	r3, r3, #1
    8938:	4013      	ands	r3, r2
    893a:	697a      	ldr	r2, [r7, #20]
    893c:	4313      	orrs	r3, r2
    893e:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    8940:	2313      	movs	r3, #19
    8942:	18fb      	adds	r3, r7, r3
    8944:	781a      	ldrb	r2, [r3, #0]
    8946:	2313      	movs	r3, #19
    8948:	18fb      	adds	r3, r7, r3
    894a:	3201      	adds	r2, #1
    894c:	701a      	strb	r2, [r3, #0]
    894e:	2313      	movs	r3, #19
    8950:	18fb      	adds	r3, r7, r3
    8952:	781b      	ldrb	r3, [r3, #0]
    8954:	2b01      	cmp	r3, #1
    8956:	d9dd      	bls.n	8914 <rtc_count_enable_events+0x30>
		}
	}

	/* Check if the user has requested any periodic events */
	for (uint8_t i = 0; i < 8; i++) {
    8958:	2312      	movs	r3, #18
    895a:	18fb      	adds	r3, r7, r3
    895c:	2200      	movs	r2, #0
    895e:	701a      	strb	r2, [r3, #0]
    8960:	e01a      	b.n	8998 <rtc_count_enable_events+0xb4>
		if (events->generate_event_on_periodic[i]) {
    8962:	2312      	movs	r3, #18
    8964:	18fb      	adds	r3, r7, r3
    8966:	781b      	ldrb	r3, [r3, #0]
    8968:	683a      	ldr	r2, [r7, #0]
    896a:	18d3      	adds	r3, r2, r3
    896c:	78db      	ldrb	r3, [r3, #3]
    896e:	2b00      	cmp	r3, #0
    8970:	d00b      	beq.n	898a <rtc_count_enable_events+0xa6>
			event_mask |= RTC_MODE0_EVCTRL_PEREO(1 << i);
    8972:	2312      	movs	r3, #18
    8974:	18fb      	adds	r3, r7, r3
    8976:	781b      	ldrb	r3, [r3, #0]
    8978:	2201      	movs	r2, #1
    897a:	409a      	lsls	r2, r3
    897c:	0013      	movs	r3, r2
    897e:	001a      	movs	r2, r3
    8980:	23ff      	movs	r3, #255	; 0xff
    8982:	4013      	ands	r3, r2
    8984:	697a      	ldr	r2, [r7, #20]
    8986:	4313      	orrs	r3, r2
    8988:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < 8; i++) {
    898a:	2312      	movs	r3, #18
    898c:	18fb      	adds	r3, r7, r3
    898e:	781a      	ldrb	r2, [r3, #0]
    8990:	2312      	movs	r3, #18
    8992:	18fb      	adds	r3, r7, r3
    8994:	3201      	adds	r2, #1
    8996:	701a      	strb	r2, [r3, #0]
    8998:	2312      	movs	r3, #18
    899a:	18fb      	adds	r3, r7, r3
    899c:	781b      	ldrb	r3, [r3, #0]
    899e:	2b07      	cmp	r3, #7
    89a0:	d9df      	bls.n	8962 <rtc_count_enable_events+0x7e>
		event_mask |= RTC_MODE0_EVCTRL_TAMPEVEI;
	}
#endif

	/* Enable given event(s). */
	rtc_module->MODE0.EVCTRL.reg |= event_mask;
    89a2:	68fb      	ldr	r3, [r7, #12]
    89a4:	889b      	ldrh	r3, [r3, #4]
    89a6:	b29a      	uxth	r2, r3
    89a8:	697b      	ldr	r3, [r7, #20]
    89aa:	b29b      	uxth	r3, r3
    89ac:	4313      	orrs	r3, r2
    89ae:	b29a      	uxth	r2, r3
    89b0:	68fb      	ldr	r3, [r7, #12]
    89b2:	809a      	strh	r2, [r3, #4]
}
    89b4:	46c0      	nop			; (mov r8, r8)
    89b6:	46bd      	mov	sp, r7
    89b8:	b006      	add	sp, #24
    89ba:	bd80      	pop	{r7, pc}

000089bc <readOverHeadWaterSensorState>:
simEventTemp[9]		: lost AC power in 1 phase						A
*/


void readOverHeadWaterSensorState(bool *olow,bool *ohigh)
{
    89bc:	b580      	push	{r7, lr}
    89be:	b082      	sub	sp, #8
    89c0:	af00      	add	r7, sp, #0
    89c2:	6078      	str	r0, [r7, #4]
    89c4:	6039      	str	r1, [r7, #0]
	*olow = port_pin_get_input_level(OVERHEAD_TANK_LL_PIN);
    89c6:	200d      	movs	r0, #13
    89c8:	4b08      	ldr	r3, [pc, #32]	; (89ec <readOverHeadWaterSensorState+0x30>)
    89ca:	4798      	blx	r3
    89cc:	0003      	movs	r3, r0
    89ce:	001a      	movs	r2, r3
    89d0:	687b      	ldr	r3, [r7, #4]
    89d2:	701a      	strb	r2, [r3, #0]
	//*omid = port_pin_get_input_level(OVERHEAD_TANK_ML_PIN);
	*ohigh = port_pin_get_input_level(OVERHEAD_TANK_HL_PIN);
    89d4:	202f      	movs	r0, #47	; 0x2f
    89d6:	4b05      	ldr	r3, [pc, #20]	; (89ec <readOverHeadWaterSensorState+0x30>)
    89d8:	4798      	blx	r3
    89da:	0003      	movs	r3, r0
    89dc:	001a      	movs	r2, r3
    89de:	683b      	ldr	r3, [r7, #0]
    89e0:	701a      	strb	r2, [r3, #0]
}
    89e2:	46c0      	nop			; (mov r8, r8)
    89e4:	46bd      	mov	sp, r7
    89e6:	b002      	add	sp, #8
    89e8:	bd80      	pop	{r7, pc}
    89ea:	46c0      	nop			; (mov r8, r8)
    89ec:	00008769 	.word	0x00008769

000089f0 <updateOverheadLevel>:

void updateOverheadLevel(uint8_t level)
{
    89f0:	b580      	push	{r7, lr}
    89f2:	b082      	sub	sp, #8
    89f4:	af00      	add	r7, sp, #0
    89f6:	0002      	movs	r2, r0
    89f8:	1dfb      	adds	r3, r7, #7
    89fa:	701a      	strb	r2, [r3, #0]
	overheadLevel=level;
    89fc:	4b03      	ldr	r3, [pc, #12]	; (8a0c <updateOverheadLevel+0x1c>)
    89fe:	1dfa      	adds	r2, r7, #7
    8a00:	7812      	ldrb	r2, [r2, #0]
    8a02:	701a      	strb	r2, [r3, #0]
}
    8a04:	46c0      	nop			; (mov r8, r8)
    8a06:	46bd      	mov	sp, r7
    8a08:	b002      	add	sp, #8
    8a0a:	bd80      	pop	{r7, pc}
    8a0c:	20000758 	.word	0x20000758

00008a10 <getOverHeadWaterSensorState>:

uint8_t getOverHeadWaterSensorState(void)
{
    8a10:	b580      	push	{r7, lr}
    8a12:	b082      	sub	sp, #8
    8a14:	af00      	add	r7, sp, #0
	bool olow,omid,ohigh;
	readOverHeadWaterSensorState(&olow,&ohigh);
    8a16:	1d7a      	adds	r2, r7, #5
    8a18:	1dbb      	adds	r3, r7, #6
    8a1a:	0011      	movs	r1, r2
    8a1c:	0018      	movs	r0, r3
    8a1e:	4b11      	ldr	r3, [pc, #68]	; (8a64 <getOverHeadWaterSensorState+0x54>)
    8a20:	4798      	blx	r3
	uint8_t ans=0;
    8a22:	1dfb      	adds	r3, r7, #7
    8a24:	2200      	movs	r2, #0
    8a26:	701a      	strb	r2, [r3, #0]
	if(!olow)
    8a28:	1dbb      	adds	r3, r7, #6
    8a2a:	781b      	ldrb	r3, [r3, #0]
    8a2c:	2201      	movs	r2, #1
    8a2e:	4053      	eors	r3, r2
    8a30:	b2db      	uxtb	r3, r3
    8a32:	2b00      	cmp	r3, #0
    8a34:	d010      	beq.n	8a58 <getOverHeadWaterSensorState+0x48>
	{
		ans++;
    8a36:	1dfb      	adds	r3, r7, #7
    8a38:	781a      	ldrb	r2, [r3, #0]
    8a3a:	1dfb      	adds	r3, r7, #7
    8a3c:	3201      	adds	r2, #1
    8a3e:	701a      	strb	r2, [r3, #0]
		//if(!omid)
		{
			//ans++;
			if (!ohigh)
    8a40:	1d7b      	adds	r3, r7, #5
    8a42:	781b      	ldrb	r3, [r3, #0]
    8a44:	2201      	movs	r2, #1
    8a46:	4053      	eors	r3, r2
    8a48:	b2db      	uxtb	r3, r3
    8a4a:	2b00      	cmp	r3, #0
    8a4c:	d004      	beq.n	8a58 <getOverHeadWaterSensorState+0x48>
			{
				ans++;
    8a4e:	1dfb      	adds	r3, r7, #7
    8a50:	781a      	ldrb	r2, [r3, #0]
    8a52:	1dfb      	adds	r3, r7, #7
    8a54:	3201      	adds	r2, #1
    8a56:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return ans;
    8a58:	1dfb      	adds	r3, r7, #7
    8a5a:	781b      	ldrb	r3, [r3, #0]
}
    8a5c:	0018      	movs	r0, r3
    8a5e:	46bd      	mov	sp, r7
    8a60:	b002      	add	sp, #8
    8a62:	bd80      	pop	{r7, pc}
    8a64:	000089bd 	.word	0x000089bd

00008a68 <overHeadWaterStatusOnCall>:

void overHeadWaterStatusOnCall(bool current)
{
    8a68:	b590      	push	{r4, r7, lr}
    8a6a:	b085      	sub	sp, #20
    8a6c:	af00      	add	r7, sp, #0
    8a6e:	0002      	movs	r2, r0
    8a70:	1dfb      	adds	r3, r7, #7
    8a72:	701a      	strb	r2, [r3, #0]
	uint8_t temp = getOverHeadWaterSensorState();
    8a74:	230f      	movs	r3, #15
    8a76:	18fc      	adds	r4, r7, r3
    8a78:	4b15      	ldr	r3, [pc, #84]	; (8ad0 <overHeadWaterStatusOnCall+0x68>)
    8a7a:	4798      	blx	r3
    8a7c:	0003      	movs	r3, r0
    8a7e:	7023      	strb	r3, [r4, #0]
	if(current)
    8a80:	1dfb      	adds	r3, r7, #7
    8a82:	781b      	ldrb	r3, [r3, #0]
    8a84:	2b00      	cmp	r3, #0
    8a86:	d004      	beq.n	8a92 <overHeadWaterStatusOnCall+0x2a>
	temp = overheadLevel;
    8a88:	230f      	movs	r3, #15
    8a8a:	18fb      	adds	r3, r7, r3
    8a8c:	4a11      	ldr	r2, [pc, #68]	; (8ad4 <overHeadWaterStatusOnCall+0x6c>)
    8a8e:	7812      	ldrb	r2, [r2, #0]
    8a90:	701a      	strb	r2, [r3, #0]
	if(temp == OVERHEADHIGHLEVEL)
    8a92:	230f      	movs	r3, #15
    8a94:	18fb      	adds	r3, r7, r3
    8a96:	781b      	ldrb	r3, [r3, #0]
    8a98:	2b02      	cmp	r3, #2
    8a9a:	d103      	bne.n	8aa4 <overHeadWaterStatusOnCall+0x3c>
	{
		setMotorMGRResponse('V');
    8a9c:	2056      	movs	r0, #86	; 0x56
    8a9e:	4b0e      	ldr	r3, [pc, #56]	; (8ad8 <overHeadWaterStatusOnCall+0x70>)
    8aa0:	4798      	blx	r3
	}
	else if (temp == OVERHEADCRITICALLEVEL)
	{
		setMotorMGRResponse('W');
	}
}
    8aa2:	e010      	b.n	8ac6 <overHeadWaterStatusOnCall+0x5e>
	else if(temp == OVERHEADMIDLEVEL)
    8aa4:	230f      	movs	r3, #15
    8aa6:	18fb      	adds	r3, r7, r3
    8aa8:	781b      	ldrb	r3, [r3, #0]
    8aaa:	2b01      	cmp	r3, #1
    8aac:	d103      	bne.n	8ab6 <overHeadWaterStatusOnCall+0x4e>
		setMotorMGRResponse('X');
    8aae:	2058      	movs	r0, #88	; 0x58
    8ab0:	4b09      	ldr	r3, [pc, #36]	; (8ad8 <overHeadWaterStatusOnCall+0x70>)
    8ab2:	4798      	blx	r3
}
    8ab4:	e007      	b.n	8ac6 <overHeadWaterStatusOnCall+0x5e>
	else if (temp == OVERHEADCRITICALLEVEL)
    8ab6:	230f      	movs	r3, #15
    8ab8:	18fb      	adds	r3, r7, r3
    8aba:	781b      	ldrb	r3, [r3, #0]
    8abc:	2b00      	cmp	r3, #0
    8abe:	d102      	bne.n	8ac6 <overHeadWaterStatusOnCall+0x5e>
		setMotorMGRResponse('W');
    8ac0:	2057      	movs	r0, #87	; 0x57
    8ac2:	4b05      	ldr	r3, [pc, #20]	; (8ad8 <overHeadWaterStatusOnCall+0x70>)
    8ac4:	4798      	blx	r3
}
    8ac6:	46c0      	nop			; (mov r8, r8)
    8ac8:	46bd      	mov	sp, r7
    8aca:	b005      	add	sp, #20
    8acc:	bd90      	pop	{r4, r7, pc}
    8ace:	46c0      	nop			; (mov r8, r8)
    8ad0:	00008a11 	.word	0x00008a11
    8ad4:	20000758 	.word	0x20000758
    8ad8:	00004851 	.word	0x00004851

00008adc <readWaterSensorState>:

void readWaterSensorState(bool *low,bool *mid,bool *high)
{
    8adc:	b580      	push	{r7, lr}
    8ade:	b084      	sub	sp, #16
    8ae0:	af00      	add	r7, sp, #0
    8ae2:	60f8      	str	r0, [r7, #12]
    8ae4:	60b9      	str	r1, [r7, #8]
    8ae6:	607a      	str	r2, [r7, #4]
	*low = port_pin_get_input_level(UNDERGRUND_TANK_LL_PIN);
    8ae8:	2037      	movs	r0, #55	; 0x37
    8aea:	4b0c      	ldr	r3, [pc, #48]	; (8b1c <readWaterSensorState+0x40>)
    8aec:	4798      	blx	r3
    8aee:	0003      	movs	r3, r0
    8af0:	001a      	movs	r2, r3
    8af2:	68fb      	ldr	r3, [r7, #12]
    8af4:	701a      	strb	r2, [r3, #0]
	*mid = port_pin_get_input_level(UNDERGRUND_TANK_ML_PIN);
    8af6:	200f      	movs	r0, #15
    8af8:	4b08      	ldr	r3, [pc, #32]	; (8b1c <readWaterSensorState+0x40>)
    8afa:	4798      	blx	r3
    8afc:	0003      	movs	r3, r0
    8afe:	001a      	movs	r2, r3
    8b00:	68bb      	ldr	r3, [r7, #8]
    8b02:	701a      	strb	r2, [r3, #0]
	*high = port_pin_get_input_level(UNDERGRUND_TANK_HL_PIN);
    8b04:	200e      	movs	r0, #14
    8b06:	4b05      	ldr	r3, [pc, #20]	; (8b1c <readWaterSensorState+0x40>)
    8b08:	4798      	blx	r3
    8b0a:	0003      	movs	r3, r0
    8b0c:	001a      	movs	r2, r3
    8b0e:	687b      	ldr	r3, [r7, #4]
    8b10:	701a      	strb	r2, [r3, #0]
}
    8b12:	46c0      	nop			; (mov r8, r8)
    8b14:	46bd      	mov	sp, r7
    8b16:	b004      	add	sp, #16
    8b18:	bd80      	pop	{r7, pc}
    8b1a:	46c0      	nop			; (mov r8, r8)
    8b1c:	00008769 	.word	0x00008769

00008b20 <updateUndergroundLevel>:

void updateUndergroundLevel(uint8_t level)
{
    8b20:	b580      	push	{r7, lr}
    8b22:	b082      	sub	sp, #8
    8b24:	af00      	add	r7, sp, #0
    8b26:	0002      	movs	r2, r0
    8b28:	1dfb      	adds	r3, r7, #7
    8b2a:	701a      	strb	r2, [r3, #0]
	undergroundLevel=level;
    8b2c:	4b03      	ldr	r3, [pc, #12]	; (8b3c <updateUndergroundLevel+0x1c>)
    8b2e:	1dfa      	adds	r2, r7, #7
    8b30:	7812      	ldrb	r2, [r2, #0]
    8b32:	701a      	strb	r2, [r3, #0]
}
    8b34:	46c0      	nop			; (mov r8, r8)
    8b36:	46bd      	mov	sp, r7
    8b38:	b002      	add	sp, #8
    8b3a:	bd80      	pop	{r7, pc}
    8b3c:	20000800 	.word	0x20000800

00008b40 <getWaterSensorState>:

uint8_t getWaterSensorState(void)
{
    8b40:	b580      	push	{r7, lr}
    8b42:	b082      	sub	sp, #8
    8b44:	af00      	add	r7, sp, #0
	bool l,m,h;
	readWaterSensorState(&l,&m,&h);
    8b46:	1d3a      	adds	r2, r7, #4
    8b48:	1d79      	adds	r1, r7, #5
    8b4a:	1dbb      	adds	r3, r7, #6
    8b4c:	0018      	movs	r0, r3
    8b4e:	4b17      	ldr	r3, [pc, #92]	; (8bac <getWaterSensorState+0x6c>)
    8b50:	4798      	blx	r3
	uint8_t ans=0;
    8b52:	1dfb      	adds	r3, r7, #7
    8b54:	2200      	movs	r2, #0
    8b56:	701a      	strb	r2, [r3, #0]

	if(!l)
    8b58:	1dbb      	adds	r3, r7, #6
    8b5a:	781b      	ldrb	r3, [r3, #0]
    8b5c:	2201      	movs	r2, #1
    8b5e:	4053      	eors	r3, r2
    8b60:	b2db      	uxtb	r3, r3
    8b62:	2b00      	cmp	r3, #0
    8b64:	d01c      	beq.n	8ba0 <getWaterSensorState+0x60>
	{
		ans++;
    8b66:	1dfb      	adds	r3, r7, #7
    8b68:	781a      	ldrb	r2, [r3, #0]
    8b6a:	1dfb      	adds	r3, r7, #7
    8b6c:	3201      	adds	r2, #1
    8b6e:	701a      	strb	r2, [r3, #0]
		if(!m)
    8b70:	1d7b      	adds	r3, r7, #5
    8b72:	781b      	ldrb	r3, [r3, #0]
    8b74:	2201      	movs	r2, #1
    8b76:	4053      	eors	r3, r2
    8b78:	b2db      	uxtb	r3, r3
    8b7a:	2b00      	cmp	r3, #0
    8b7c:	d010      	beq.n	8ba0 <getWaterSensorState+0x60>
		{
			ans++;
    8b7e:	1dfb      	adds	r3, r7, #7
    8b80:	781a      	ldrb	r2, [r3, #0]
    8b82:	1dfb      	adds	r3, r7, #7
    8b84:	3201      	adds	r2, #1
    8b86:	701a      	strb	r2, [r3, #0]
			if(!h)
    8b88:	1d3b      	adds	r3, r7, #4
    8b8a:	781b      	ldrb	r3, [r3, #0]
    8b8c:	2201      	movs	r2, #1
    8b8e:	4053      	eors	r3, r2
    8b90:	b2db      	uxtb	r3, r3
    8b92:	2b00      	cmp	r3, #0
    8b94:	d004      	beq.n	8ba0 <getWaterSensorState+0x60>
			{
				ans++;
    8b96:	1dfb      	adds	r3, r7, #7
    8b98:	781a      	ldrb	r2, [r3, #0]
    8b9a:	1dfb      	adds	r3, r7, #7
    8b9c:	3201      	adds	r2, #1
    8b9e:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return ans;
    8ba0:	1dfb      	adds	r3, r7, #7
    8ba2:	781b      	ldrb	r3, [r3, #0]
}
    8ba4:	0018      	movs	r0, r3
    8ba6:	46bd      	mov	sp, r7
    8ba8:	b002      	add	sp, #8
    8baa:	bd80      	pop	{r7, pc}
    8bac:	00008add 	.word	0x00008add

00008bb0 <waterStatusOnCall>:

void waterStatusOnCall(bool current)
{
    8bb0:	b590      	push	{r4, r7, lr}
    8bb2:	b085      	sub	sp, #20
    8bb4:	af00      	add	r7, sp, #0
    8bb6:	0002      	movs	r2, r0
    8bb8:	1dfb      	adds	r3, r7, #7
    8bba:	701a      	strb	r2, [r3, #0]
	uint8_t temp = getWaterSensorState();
    8bbc:	230f      	movs	r3, #15
    8bbe:	18fc      	adds	r4, r7, r3
    8bc0:	4b19      	ldr	r3, [pc, #100]	; (8c28 <waterStatusOnCall+0x78>)
    8bc2:	4798      	blx	r3
    8bc4:	0003      	movs	r3, r0
    8bc6:	7023      	strb	r3, [r4, #0]
	if(current)
    8bc8:	1dfb      	adds	r3, r7, #7
    8bca:	781b      	ldrb	r3, [r3, #0]
    8bcc:	2b00      	cmp	r3, #0
    8bce:	d004      	beq.n	8bda <waterStatusOnCall+0x2a>
	temp = undergroundLevel;
    8bd0:	230f      	movs	r3, #15
    8bd2:	18fb      	adds	r3, r7, r3
    8bd4:	4a15      	ldr	r2, [pc, #84]	; (8c2c <waterStatusOnCall+0x7c>)
    8bd6:	7812      	ldrb	r2, [r2, #0]
    8bd8:	701a      	strb	r2, [r3, #0]

	if(temp==CRITICALLEVEL)
    8bda:	230f      	movs	r3, #15
    8bdc:	18fb      	adds	r3, r7, r3
    8bde:	781b      	ldrb	r3, [r3, #0]
    8be0:	2b00      	cmp	r3, #0
    8be2:	d103      	bne.n	8bec <waterStatusOnCall+0x3c>
	{
		setMotorMGRResponse('T');	//water level insufficient
    8be4:	2054      	movs	r0, #84	; 0x54
    8be6:	4b12      	ldr	r3, [pc, #72]	; (8c30 <waterStatusOnCall+0x80>)
    8be8:	4798      	blx	r3
	}
	else if(temp==HIGHLEVEL)
	{
		setMotorMGRResponse('E');	//well is full
	}
}
    8bea:	e019      	b.n	8c20 <waterStatusOnCall+0x70>
	else if(temp==LOWLEVEL)
    8bec:	230f      	movs	r3, #15
    8bee:	18fb      	adds	r3, r7, r3
    8bf0:	781b      	ldrb	r3, [r3, #0]
    8bf2:	2b01      	cmp	r3, #1
    8bf4:	d103      	bne.n	8bfe <waterStatusOnCall+0x4e>
		setMotorMGRResponse('Q');	//water below 2nd sensor
    8bf6:	2051      	movs	r0, #81	; 0x51
    8bf8:	4b0d      	ldr	r3, [pc, #52]	; (8c30 <waterStatusOnCall+0x80>)
    8bfa:	4798      	blx	r3
}
    8bfc:	e010      	b.n	8c20 <waterStatusOnCall+0x70>
	else if(temp==MIDLEVEL)
    8bfe:	230f      	movs	r3, #15
    8c00:	18fb      	adds	r3, r7, r3
    8c02:	781b      	ldrb	r3, [r3, #0]
    8c04:	2b02      	cmp	r3, #2
    8c06:	d103      	bne.n	8c10 <waterStatusOnCall+0x60>
		setMotorMGRResponse('R');	//water below 1st sensor
    8c08:	2052      	movs	r0, #82	; 0x52
    8c0a:	4b09      	ldr	r3, [pc, #36]	; (8c30 <waterStatusOnCall+0x80>)
    8c0c:	4798      	blx	r3
}
    8c0e:	e007      	b.n	8c20 <waterStatusOnCall+0x70>
	else if(temp==HIGHLEVEL)
    8c10:	230f      	movs	r3, #15
    8c12:	18fb      	adds	r3, r7, r3
    8c14:	781b      	ldrb	r3, [r3, #0]
    8c16:	2b03      	cmp	r3, #3
    8c18:	d102      	bne.n	8c20 <waterStatusOnCall+0x70>
		setMotorMGRResponse('E');	//well is full
    8c1a:	2045      	movs	r0, #69	; 0x45
    8c1c:	4b04      	ldr	r3, [pc, #16]	; (8c30 <waterStatusOnCall+0x80>)
    8c1e:	4798      	blx	r3
}
    8c20:	46c0      	nop			; (mov r8, r8)
    8c22:	46bd      	mov	sp, r7
    8c24:	b005      	add	sp, #20
    8c26:	bd90      	pop	{r4, r7, pc}
    8c28:	00008b41 	.word	0x00008b41
    8c2c:	20000800 	.word	0x20000800
    8c30:	00004851 	.word	0x00004851

00008c34 <Water_Level_Task>:

static void Water_Level_Task(void *params)
{
    8c34:	b590      	push	{r4, r7, lr}
    8c36:	b085      	sub	sp, #20
    8c38:	af00      	add	r7, sp, #0
    8c3a:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	
	struct port_config water_level_sensor_pin_config;
	port_get_config_defaults(&water_level_sensor_pin_config);
    8c3c:	2308      	movs	r3, #8
    8c3e:	18fb      	adds	r3, r7, r3
    8c40:	0018      	movs	r0, r3
    8c42:	4b8b      	ldr	r3, [pc, #556]	; (8e70 <Water_Level_Task+0x23c>)
    8c44:	4798      	blx	r3
	
	water_level_sensor_pin_config.direction = PORT_PIN_DIR_INPUT;
    8c46:	2308      	movs	r3, #8
    8c48:	18fb      	adds	r3, r7, r3
    8c4a:	2200      	movs	r2, #0
    8c4c:	701a      	strb	r2, [r3, #0]
	water_level_sensor_pin_config.input_pull = PORT_PIN_PULL_UP;
    8c4e:	2308      	movs	r3, #8
    8c50:	18fb      	adds	r3, r7, r3
    8c52:	2201      	movs	r2, #1
    8c54:	705a      	strb	r2, [r3, #1]
	
	port_pin_set_config(OVERHEAD_TANK_HL_PIN,	&water_level_sensor_pin_config);
    8c56:	2308      	movs	r3, #8
    8c58:	18fb      	adds	r3, r7, r3
    8c5a:	0019      	movs	r1, r3
    8c5c:	202f      	movs	r0, #47	; 0x2f
    8c5e:	4b85      	ldr	r3, [pc, #532]	; (8e74 <Water_Level_Task+0x240>)
    8c60:	4798      	blx	r3
	port_pin_set_config(OVERHEAD_TANK_ML_PIN,	&water_level_sensor_pin_config);
    8c62:	2308      	movs	r3, #8
    8c64:	18fb      	adds	r3, r7, r3
    8c66:	0019      	movs	r1, r3
    8c68:	200c      	movs	r0, #12
    8c6a:	4b82      	ldr	r3, [pc, #520]	; (8e74 <Water_Level_Task+0x240>)
    8c6c:	4798      	blx	r3
	port_pin_set_config(OVERHEAD_TANK_LL_PIN,	&water_level_sensor_pin_config);
    8c6e:	2308      	movs	r3, #8
    8c70:	18fb      	adds	r3, r7, r3
    8c72:	0019      	movs	r1, r3
    8c74:	200d      	movs	r0, #13
    8c76:	4b7f      	ldr	r3, [pc, #508]	; (8e74 <Water_Level_Task+0x240>)
    8c78:	4798      	blx	r3
	port_pin_set_config(UNDERGRUND_TANK_HL_PIN, &water_level_sensor_pin_config);
    8c7a:	2308      	movs	r3, #8
    8c7c:	18fb      	adds	r3, r7, r3
    8c7e:	0019      	movs	r1, r3
    8c80:	200e      	movs	r0, #14
    8c82:	4b7c      	ldr	r3, [pc, #496]	; (8e74 <Water_Level_Task+0x240>)
    8c84:	4798      	blx	r3
	port_pin_set_config(UNDERGRUND_TANK_ML_PIN, &water_level_sensor_pin_config);
    8c86:	2308      	movs	r3, #8
    8c88:	18fb      	adds	r3, r7, r3
    8c8a:	0019      	movs	r1, r3
    8c8c:	200f      	movs	r0, #15
    8c8e:	4b79      	ldr	r3, [pc, #484]	; (8e74 <Water_Level_Task+0x240>)
    8c90:	4798      	blx	r3
	port_pin_set_config(UNDERGRUND_TANK_LL_PIN, &water_level_sensor_pin_config);
    8c92:	2308      	movs	r3, #8
    8c94:	18fb      	adds	r3, r7, r3
    8c96:	0019      	movs	r1, r3
    8c98:	2037      	movs	r0, #55	; 0x37
    8c9a:	4b76      	ldr	r3, [pc, #472]	; (8e74 <Water_Level_Task+0x240>)
    8c9c:	4798      	blx	r3
	
	undergroundLevel = MIDLEVEL;
    8c9e:	4b76      	ldr	r3, [pc, #472]	; (8e78 <Water_Level_Task+0x244>)
    8ca0:	2202      	movs	r2, #2
    8ca2:	701a      	strb	r2, [r3, #0]
	tempUndergroundLevel = MIDLEVEL;
    8ca4:	4b75      	ldr	r3, [pc, #468]	; (8e7c <Water_Level_Task+0x248>)
    8ca6:	2202      	movs	r2, #2
    8ca8:	701a      	strb	r2, [r3, #0]
	
	overheadLevel = OVERHEADMIDLEVEL;
    8caa:	4b75      	ldr	r3, [pc, #468]	; (8e80 <Water_Level_Task+0x24c>)
    8cac:	2201      	movs	r2, #1
    8cae:	701a      	strb	r2, [r3, #0]
	tempOverheadLevel = OVERHEADMIDLEVEL;
    8cb0:	4b74      	ldr	r3, [pc, #464]	; (8e84 <Water_Level_Task+0x250>)
    8cb2:	2201      	movs	r2, #1
    8cb4:	701a      	strb	r2, [r3, #0]
	tempWaterEventCount = 0;
    8cb6:	4b74      	ldr	r3, [pc, #464]	; (8e88 <Water_Level_Task+0x254>)
    8cb8:	2200      	movs	r2, #0
    8cba:	701a      	strb	r2, [r3, #0]
	
	uint8_t j = 0;
    8cbc:	230f      	movs	r3, #15
    8cbe:	18fb      	adds	r3, r7, r3
    8cc0:	2200      	movs	r2, #0
    8cc2:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_GP)
    8cc4:	4b71      	ldr	r3, [pc, #452]	; (8e8c <Water_Level_Task+0x258>)
    8cc6:	791b      	ldrb	r3, [r3, #4]
    8cc8:	2b00      	cmp	r3, #0
    8cca:	d004      	beq.n	8cd6 <Water_Level_Task+0xa2>
	{
		j = 19;
    8ccc:	230f      	movs	r3, #15
    8cce:	18fb      	adds	r3, r7, r3
    8cd0:	2213      	movs	r2, #19
    8cd2:	701a      	strb	r2, [r3, #0]
    8cd4:	e003      	b.n	8cde <Water_Level_Task+0xaa>
	}
	else
	{
		j= 17;
    8cd6:	230f      	movs	r3, #15
    8cd8:	18fb      	adds	r3, r7, r3
    8cda:	2211      	movs	r2, #17
    8cdc:	701a      	strb	r2, [r3, #0]
	}
	for (uint8_t i=12;i<j;i++)
    8cde:	230e      	movs	r3, #14
    8ce0:	18fb      	adds	r3, r7, r3
    8ce2:	220c      	movs	r2, #12
    8ce4:	701a      	strb	r2, [r3, #0]
    8ce6:	e00c      	b.n	8d02 <Water_Level_Task+0xce>
	{
		simEventTemp[i] = true;
    8ce8:	230e      	movs	r3, #14
    8cea:	18fb      	adds	r3, r7, r3
    8cec:	781b      	ldrb	r3, [r3, #0]
    8cee:	4a68      	ldr	r2, [pc, #416]	; (8e90 <Water_Level_Task+0x25c>)
    8cf0:	2101      	movs	r1, #1
    8cf2:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=12;i<j;i++)
    8cf4:	230e      	movs	r3, #14
    8cf6:	18fb      	adds	r3, r7, r3
    8cf8:	781a      	ldrb	r2, [r3, #0]
    8cfa:	230e      	movs	r3, #14
    8cfc:	18fb      	adds	r3, r7, r3
    8cfe:	3201      	adds	r2, #1
    8d00:	701a      	strb	r2, [r3, #0]
    8d02:	230e      	movs	r3, #14
    8d04:	18fa      	adds	r2, r7, r3
    8d06:	230f      	movs	r3, #15
    8d08:	18fb      	adds	r3, r7, r3
    8d0a:	7812      	ldrb	r2, [r2, #0]
    8d0c:	781b      	ldrb	r3, [r3, #0]
    8d0e:	429a      	cmp	r2, r3
    8d10:	d3ea      	bcc.n	8ce8 <Water_Level_Task+0xb4>
	}
	simEvent[12] = 'I';
    8d12:	4b60      	ldr	r3, [pc, #384]	; (8e94 <Water_Level_Task+0x260>)
    8d14:	2249      	movs	r2, #73	; 0x49
    8d16:	731a      	strb	r2, [r3, #12]
	simEvent[13] = 'D';
    8d18:	4b5e      	ldr	r3, [pc, #376]	; (8e94 <Water_Level_Task+0x260>)
    8d1a:	2244      	movs	r2, #68	; 0x44
    8d1c:	735a      	strb	r2, [r3, #13]
	simEvent[14] = 'H';
    8d1e:	4b5d      	ldr	r3, [pc, #372]	; (8e94 <Water_Level_Task+0x260>)
    8d20:	2248      	movs	r2, #72	; 0x48
    8d22:	739a      	strb	r2, [r3, #14]
	simEvent[15] = 'E';
    8d24:	4b5b      	ldr	r3, [pc, #364]	; (8e94 <Water_Level_Task+0x260>)
    8d26:	2245      	movs	r2, #69	; 0x45
    8d28:	73da      	strb	r2, [r3, #15]
	simEvent[16] = 'Z';
    8d2a:	4b5a      	ldr	r3, [pc, #360]	; (8e94 <Water_Level_Task+0x260>)
    8d2c:	225a      	movs	r2, #90	; 0x5a
    8d2e:	741a      	strb	r2, [r3, #16]
	if (factory_settings_parameter_struct.ENABLE_GP)
    8d30:	4b56      	ldr	r3, [pc, #344]	; (8e8c <Water_Level_Task+0x258>)
    8d32:	791b      	ldrb	r3, [r3, #4]
    8d34:	2b00      	cmp	r3, #0
    8d36:	d005      	beq.n	8d44 <Water_Level_Task+0x110>
	{
		simEvent[17] = 'V';
    8d38:	4b56      	ldr	r3, [pc, #344]	; (8e94 <Water_Level_Task+0x260>)
    8d3a:	2256      	movs	r2, #86	; 0x56
    8d3c:	745a      	strb	r2, [r3, #17]
		simEvent[18] = 'W';
    8d3e:	4b55      	ldr	r3, [pc, #340]	; (8e94 <Water_Level_Task+0x260>)
    8d40:	2257      	movs	r2, #87	; 0x57
    8d42:	749a      	strb	r2, [r3, #18]
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
    8d44:	4b51      	ldr	r3, [pc, #324]	; (8e8c <Water_Level_Task+0x258>)
    8d46:	78db      	ldrb	r3, [r3, #3]
    8d48:	2b00      	cmp	r3, #0
    8d4a:	d00b      	beq.n	8d64 <Water_Level_Task+0x130>
	{
		m2mEvent_arr[0] = ME_CLEARED;
    8d4c:	4b52      	ldr	r3, [pc, #328]	; (8e98 <Water_Level_Task+0x264>)
    8d4e:	2200      	movs	r2, #0
    8d50:	701a      	strb	r2, [r3, #0]
		m2mEvent_arr[1] = ME_CLEARED;
    8d52:	4b51      	ldr	r3, [pc, #324]	; (8e98 <Water_Level_Task+0x264>)
    8d54:	2200      	movs	r2, #0
    8d56:	705a      	strb	r2, [r3, #1]
		
		mapTable[0] = 13;
    8d58:	4b50      	ldr	r3, [pc, #320]	; (8e9c <Water_Level_Task+0x268>)
    8d5a:	220d      	movs	r2, #13
    8d5c:	701a      	strb	r2, [r3, #0]
		mapTable[1] = 15;
    8d5e:	4b4f      	ldr	r3, [pc, #316]	; (8e9c <Water_Level_Task+0x268>)
    8d60:	220f      	movs	r2, #15
    8d62:	705a      	strb	r2, [r3, #1]
	}
	
	
	for (;;)
	{
		bool result=false;
    8d64:	230c      	movs	r3, #12
    8d66:	18fb      	adds	r3, r7, r3
    8d68:	2200      	movs	r2, #0
    8d6a:	701a      	strb	r2, [r3, #0]
		
		if (!(user_settings_parameter_struct.waterBypassAddress))
    8d6c:	4b4c      	ldr	r3, [pc, #304]	; (8ea0 <Water_Level_Task+0x26c>)
    8d6e:	7fdb      	ldrb	r3, [r3, #31]
    8d70:	2b00      	cmp	r3, #0
    8d72:	d000      	beq.n	8d76 <Water_Level_Task+0x142>
    8d74:	e073      	b.n	8e5e <Water_Level_Task+0x22a>
		{
			uint8_t uLevel;
			uint8_t oLevel;
			uLevel = getWaterSensorState();
    8d76:	230b      	movs	r3, #11
    8d78:	18fc      	adds	r4, r7, r3
    8d7a:	4b4a      	ldr	r3, [pc, #296]	; (8ea4 <Water_Level_Task+0x270>)
    8d7c:	4798      	blx	r3
    8d7e:	0003      	movs	r3, r0
    8d80:	7023      	strb	r3, [r4, #0]
			
			if (factory_settings_parameter_struct.ENABLE_GP)
    8d82:	4b42      	ldr	r3, [pc, #264]	; (8e8c <Water_Level_Task+0x258>)
    8d84:	791b      	ldrb	r3, [r3, #4]
    8d86:	2b00      	cmp	r3, #0
    8d88:	d005      	beq.n	8d96 <Water_Level_Task+0x162>
			{
				oLevel =getOverHeadWaterSensorState();
    8d8a:	230d      	movs	r3, #13
    8d8c:	18fc      	adds	r4, r7, r3
    8d8e:	4b46      	ldr	r3, [pc, #280]	; (8ea8 <Water_Level_Task+0x274>)
    8d90:	4798      	blx	r3
    8d92:	0003      	movs	r3, r0
    8d94:	7023      	strb	r3, [r4, #0]
			}
			
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
    8d96:	4b3d      	ldr	r3, [pc, #244]	; (8e8c <Water_Level_Task+0x258>)
    8d98:	791b      	ldrb	r3, [r3, #4]
    8d9a:	2b01      	cmp	r3, #1
    8d9c:	d125      	bne.n	8dea <Water_Level_Task+0x1b6>
			((uLevel!=undergroundLevel && uLevel==tempUndergroundLevel) ||(oLevel!=overheadLevel && oLevel==tempOverheadLevel)):
    8d9e:	4b36      	ldr	r3, [pc, #216]	; (8e78 <Water_Level_Task+0x244>)
    8da0:	781b      	ldrb	r3, [r3, #0]
    8da2:	220b      	movs	r2, #11
    8da4:	18ba      	adds	r2, r7, r2
    8da6:	7812      	ldrb	r2, [r2, #0]
    8da8:	429a      	cmp	r2, r3
    8daa:	d006      	beq.n	8dba <Water_Level_Task+0x186>
    8dac:	4b33      	ldr	r3, [pc, #204]	; (8e7c <Water_Level_Task+0x248>)
    8dae:	781b      	ldrb	r3, [r3, #0]
    8db0:	220b      	movs	r2, #11
    8db2:	18ba      	adds	r2, r7, r2
    8db4:	7812      	ldrb	r2, [r2, #0]
    8db6:	429a      	cmp	r2, r3
    8db8:	d00f      	beq.n	8dda <Water_Level_Task+0x1a6>
    8dba:	4b31      	ldr	r3, [pc, #196]	; (8e80 <Water_Level_Task+0x24c>)
    8dbc:	781b      	ldrb	r3, [r3, #0]
    8dbe:	b2db      	uxtb	r3, r3
    8dc0:	220d      	movs	r2, #13
    8dc2:	18ba      	adds	r2, r7, r2
    8dc4:	7812      	ldrb	r2, [r2, #0]
    8dc6:	429a      	cmp	r2, r3
    8dc8:	d009      	beq.n	8dde <Water_Level_Task+0x1aa>
    8dca:	4b2e      	ldr	r3, [pc, #184]	; (8e84 <Water_Level_Task+0x250>)
    8dcc:	781b      	ldrb	r3, [r3, #0]
    8dce:	b2db      	uxtb	r3, r3
    8dd0:	220d      	movs	r2, #13
    8dd2:	18ba      	adds	r2, r7, r2
    8dd4:	7812      	ldrb	r2, [r2, #0]
    8dd6:	429a      	cmp	r2, r3
    8dd8:	d101      	bne.n	8dde <Water_Level_Task+0x1aa>
    8dda:	2301      	movs	r3, #1
    8ddc:	e000      	b.n	8de0 <Water_Level_Task+0x1ac>
    8dde:	2300      	movs	r3, #0
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
    8de0:	1c1a      	adds	r2, r3, #0
    8de2:	2301      	movs	r3, #1
    8de4:	4013      	ands	r3, r2
    8de6:	b2db      	uxtb	r3, r3
    8de8:	e014      	b.n	8e14 <Water_Level_Task+0x1e0>
			((uLevel!=undergroundLevel && uLevel==tempUndergroundLevel))
    8dea:	4b23      	ldr	r3, [pc, #140]	; (8e78 <Water_Level_Task+0x244>)
    8dec:	781b      	ldrb	r3, [r3, #0]
    8dee:	220b      	movs	r2, #11
    8df0:	18ba      	adds	r2, r7, r2
    8df2:	7812      	ldrb	r2, [r2, #0]
    8df4:	429a      	cmp	r2, r3
    8df6:	d008      	beq.n	8e0a <Water_Level_Task+0x1d6>
    8df8:	4b20      	ldr	r3, [pc, #128]	; (8e7c <Water_Level_Task+0x248>)
    8dfa:	781b      	ldrb	r3, [r3, #0]
    8dfc:	220b      	movs	r2, #11
    8dfe:	18ba      	adds	r2, r7, r2
    8e00:	7812      	ldrb	r2, [r2, #0]
    8e02:	429a      	cmp	r2, r3
    8e04:	d101      	bne.n	8e0a <Water_Level_Task+0x1d6>
    8e06:	2301      	movs	r3, #1
    8e08:	e000      	b.n	8e0c <Water_Level_Task+0x1d8>
    8e0a:	2300      	movs	r3, #0
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
    8e0c:	1c1a      	adds	r2, r3, #0
    8e0e:	2301      	movs	r3, #1
    8e10:	4013      	ands	r3, r2
    8e12:	b2db      	uxtb	r3, r3
    8e14:	2b00      	cmp	r3, #0
    8e16:	d010      	beq.n	8e3a <Water_Level_Task+0x206>
			)
			{
				tempWaterEventCount++;
    8e18:	4b1b      	ldr	r3, [pc, #108]	; (8e88 <Water_Level_Task+0x254>)
    8e1a:	781b      	ldrb	r3, [r3, #0]
    8e1c:	3301      	adds	r3, #1
    8e1e:	b2da      	uxtb	r2, r3
    8e20:	4b19      	ldr	r3, [pc, #100]	; (8e88 <Water_Level_Task+0x254>)
    8e22:	701a      	strb	r2, [r3, #0]
				if(tempWaterEventCount>9)
    8e24:	4b18      	ldr	r3, [pc, #96]	; (8e88 <Water_Level_Task+0x254>)
    8e26:	781b      	ldrb	r3, [r3, #0]
    8e28:	2b09      	cmp	r3, #9
    8e2a:	d909      	bls.n	8e40 <Water_Level_Task+0x20c>
				{
					operateOnWaterEvent();
    8e2c:	4b1f      	ldr	r3, [pc, #124]	; (8eac <Water_Level_Task+0x278>)
    8e2e:	4798      	blx	r3
					result=true;
    8e30:	230c      	movs	r3, #12
    8e32:	18fb      	adds	r3, r7, r3
    8e34:	2201      	movs	r2, #1
    8e36:	701a      	strb	r2, [r3, #0]
    8e38:	e002      	b.n	8e40 <Water_Level_Task+0x20c>
				}
			}
			else
			{
				tempWaterEventCount=0;
    8e3a:	4b13      	ldr	r3, [pc, #76]	; (8e88 <Water_Level_Task+0x254>)
    8e3c:	2200      	movs	r2, #0
    8e3e:	701a      	strb	r2, [r3, #0]
			}
			tempUndergroundLevel=uLevel;
    8e40:	4b0e      	ldr	r3, [pc, #56]	; (8e7c <Water_Level_Task+0x248>)
    8e42:	220b      	movs	r2, #11
    8e44:	18ba      	adds	r2, r7, r2
    8e46:	7812      	ldrb	r2, [r2, #0]
    8e48:	701a      	strb	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_GP)
    8e4a:	4b10      	ldr	r3, [pc, #64]	; (8e8c <Water_Level_Task+0x258>)
    8e4c:	791b      	ldrb	r3, [r3, #4]
    8e4e:	2b00      	cmp	r3, #0
    8e50:	d009      	beq.n	8e66 <Water_Level_Task+0x232>
			{
				tempOverheadLevel=oLevel;
    8e52:	4b0c      	ldr	r3, [pc, #48]	; (8e84 <Water_Level_Task+0x250>)
    8e54:	220d      	movs	r2, #13
    8e56:	18ba      	adds	r2, r7, r2
    8e58:	7812      	ldrb	r2, [r2, #0]
    8e5a:	701a      	strb	r2, [r3, #0]
    8e5c:	e003      	b.n	8e66 <Water_Level_Task+0x232>
			}
		}
		else
		{
			vTaskDelay(5000/portTICK_PERIOD_MS);
    8e5e:	4b14      	ldr	r3, [pc, #80]	; (8eb0 <Water_Level_Task+0x27c>)
    8e60:	0018      	movs	r0, r3
    8e62:	4b14      	ldr	r3, [pc, #80]	; (8eb4 <Water_Level_Task+0x280>)
    8e64:	4798      	blx	r3
		}
		vTaskDelay(100/portTICK_PERIOD_MS);
    8e66:	2064      	movs	r0, #100	; 0x64
    8e68:	4b12      	ldr	r3, [pc, #72]	; (8eb4 <Water_Level_Task+0x280>)
    8e6a:	4798      	blx	r3
	{
    8e6c:	e77a      	b.n	8d64 <Water_Level_Task+0x130>
    8e6e:	46c0      	nop			; (mov r8, r8)
    8e70:	00008745 	.word	0x00008745
    8e74:	00011d69 	.word	0x00011d69
    8e78:	20000800 	.word	0x20000800
    8e7c:	20000739 	.word	0x20000739
    8e80:	20000758 	.word	0x20000758
    8e84:	2000072a 	.word	0x2000072a
    8e88:	20000754 	.word	0x20000754
    8e8c:	20000618 	.word	0x20000618
    8e90:	200006f0 	.word	0x200006f0
    8e94:	200007a0 	.word	0x200007a0
    8e98:	20000778 	.word	0x20000778
    8e9c:	20000708 	.word	0x20000708
    8ea0:	2000064c 	.word	0x2000064c
    8ea4:	00008b41 	.word	0x00008b41
    8ea8:	00008a11 	.word	0x00008a11
    8eac:	00008eb9 	.word	0x00008eb9
    8eb0:	00001388 	.word	0x00001388
    8eb4:	0000ee99 	.word	0x0000ee99

00008eb8 <operateOnWaterEvent>:
	}
}

void operateOnWaterEvent(void)
{
    8eb8:	b580      	push	{r7, lr}
    8eba:	b082      	sub	sp, #8
    8ebc:	af00      	add	r7, sp, #0
	uint8_t uLevel = tempUndergroundLevel;
    8ebe:	1dfb      	adds	r3, r7, #7
    8ec0:	4abb      	ldr	r2, [pc, #748]	; (91b0 <operateOnWaterEvent+0x2f8>)
    8ec2:	7812      	ldrb	r2, [r2, #0]
    8ec4:	701a      	strb	r2, [r3, #0]
	uint8_t oLevel = tempOverheadLevel;
    8ec6:	1dbb      	adds	r3, r7, #6
    8ec8:	4aba      	ldr	r2, [pc, #744]	; (91b4 <operateOnWaterEvent+0x2fc>)
    8eca:	7812      	ldrb	r2, [r2, #0]
    8ecc:	701a      	strb	r2, [r3, #0]
	if(uLevel == undergroundLevel)
    8ece:	4bba      	ldr	r3, [pc, #744]	; (91b8 <operateOnWaterEvent+0x300>)
    8ed0:	781b      	ldrb	r3, [r3, #0]
    8ed2:	1dfa      	adds	r2, r7, #7
    8ed4:	7812      	ldrb	r2, [r2, #0]
    8ed6:	429a      	cmp	r2, r3
    8ed8:	d10c      	bne.n	8ef4 <operateOnWaterEvent+0x3c>
	{
		if (factory_settings_parameter_struct.ENABLE_GP)
    8eda:	4bb8      	ldr	r3, [pc, #736]	; (91bc <operateOnWaterEvent+0x304>)
    8edc:	791b      	ldrb	r3, [r3, #4]
    8ede:	2b00      	cmp	r3, #0
    8ee0:	d000      	beq.n	8ee4 <operateOnWaterEvent+0x2c>
    8ee2:	e15e      	b.n	91a2 <operateOnWaterEvent+0x2ea>
		{
			return;
		}
		else
		{
			if(oLevel==overheadLevel)
    8ee4:	4bb6      	ldr	r3, [pc, #728]	; (91c0 <operateOnWaterEvent+0x308>)
    8ee6:	781b      	ldrb	r3, [r3, #0]
    8ee8:	b2db      	uxtb	r3, r3
    8eea:	1dba      	adds	r2, r7, #6
    8eec:	7812      	ldrb	r2, [r2, #0]
    8eee:	429a      	cmp	r2, r3
    8ef0:	d100      	bne.n	8ef4 <operateOnWaterEvent+0x3c>
    8ef2:	e158      	b.n	91a6 <operateOnWaterEvent+0x2ee>
			{
				return;
			}
		}
	}
	if (getMotorState())
    8ef4:	4bb3      	ldr	r3, [pc, #716]	; (91c4 <operateOnWaterEvent+0x30c>)
    8ef6:	4798      	blx	r3
    8ef8:	1e03      	subs	r3, r0, #0
    8efa:	d100      	bne.n	8efe <operateOnWaterEvent+0x46>
    8efc:	e0c3      	b.n	9086 <operateOnWaterEvent+0x1ce>
	{
		if ((uLevel == CRITICALLEVEL) && (undergroundLevel>CRITICALLEVEL))	//no water in well
    8efe:	1dfb      	adds	r3, r7, #7
    8f00:	781b      	ldrb	r3, [r3, #0]
    8f02:	2b00      	cmp	r3, #0
    8f04:	d122      	bne.n	8f4c <operateOnWaterEvent+0x94>
    8f06:	4bac      	ldr	r3, [pc, #688]	; (91b8 <operateOnWaterEvent+0x300>)
    8f08:	781b      	ldrb	r3, [r3, #0]
    8f0a:	2b00      	cmp	r3, #0
    8f0c:	d01e      	beq.n	8f4c <operateOnWaterEvent+0x94>
		{
			stopMotor(false,true,false);
    8f0e:	2200      	movs	r2, #0
    8f10:	2101      	movs	r1, #1
    8f12:	2000      	movs	r0, #0
    8f14:	4bac      	ldr	r3, [pc, #688]	; (91c8 <operateOnWaterEvent+0x310>)
    8f16:	4798      	blx	r3
			simEventTemp[12] = registerEvent('I');	//report To SIM Motor Off due to insufficient water level
    8f18:	2049      	movs	r0, #73	; 0x49
    8f1a:	4bac      	ldr	r3, [pc, #688]	; (91cc <operateOnWaterEvent+0x314>)
    8f1c:	4798      	blx	r3
    8f1e:	0003      	movs	r3, r0
    8f20:	001a      	movs	r2, r3
    8f22:	4bab      	ldr	r3, [pc, #684]	; (91d0 <operateOnWaterEvent+0x318>)
    8f24:	731a      	strb	r2, [r3, #12]
			if (factory_settings_parameter_struct.ENABLE_M2M)
    8f26:	4ba5      	ldr	r3, [pc, #660]	; (91bc <operateOnWaterEvent+0x304>)
    8f28:	78db      	ldrb	r3, [r3, #3]
    8f2a:	2b00      	cmp	r3, #0
    8f2c:	d100      	bne.n	8f30 <operateOnWaterEvent+0x78>
    8f2e:	e071      	b.n	9014 <operateOnWaterEvent+0x15c>
			{
				if ((m2m_Numbers_struct.m2mSetting) && (undergroundLevel>LOWLEVEL))
    8f30:	4ba8      	ldr	r3, [pc, #672]	; (91d4 <operateOnWaterEvent+0x31c>)
    8f32:	795b      	ldrb	r3, [r3, #5]
    8f34:	2b00      	cmp	r3, #0
    8f36:	d100      	bne.n	8f3a <operateOnWaterEvent+0x82>
    8f38:	e06c      	b.n	9014 <operateOnWaterEvent+0x15c>
    8f3a:	4b9f      	ldr	r3, [pc, #636]	; (91b8 <operateOnWaterEvent+0x300>)
    8f3c:	781b      	ldrb	r3, [r3, #0]
    8f3e:	2b01      	cmp	r3, #1
    8f40:	d800      	bhi.n	8f44 <operateOnWaterEvent+0x8c>
    8f42:	e067      	b.n	9014 <operateOnWaterEvent+0x15c>
				{
					m2mEvent_arr[0] = ME_WAITREGISTER;
    8f44:	4ba4      	ldr	r3, [pc, #656]	; (91d8 <operateOnWaterEvent+0x320>)
    8f46:	2201      	movs	r2, #1
    8f48:	701a      	strb	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_M2M)
    8f4a:	e063      	b.n	9014 <operateOnWaterEvent+0x15c>
				}
			}
		}
		else if (uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)
    8f4c:	1dfb      	adds	r3, r7, #7
    8f4e:	781b      	ldrb	r3, [r3, #0]
    8f50:	2b03      	cmp	r3, #3
    8f52:	d12f      	bne.n	8fb4 <operateOnWaterEvent+0xfc>
    8f54:	4b98      	ldr	r3, [pc, #608]	; (91b8 <operateOnWaterEvent+0x300>)
    8f56:	781b      	ldrb	r3, [r3, #0]
    8f58:	2b02      	cmp	r3, #2
    8f5a:	d82b      	bhi.n	8fb4 <operateOnWaterEvent+0xfc>
		{
			if (factory_settings_parameter_struct.ENABLE_M2M)
    8f5c:	4b97      	ldr	r3, [pc, #604]	; (91bc <operateOnWaterEvent+0x304>)
    8f5e:	78db      	ldrb	r3, [r3, #3]
    8f60:	2b00      	cmp	r3, #0
    8f62:	d05a      	beq.n	901a <operateOnWaterEvent+0x162>
			{
				if (m2m_Numbers_struct.m2mSetting)
    8f64:	4b9b      	ldr	r3, [pc, #620]	; (91d4 <operateOnWaterEvent+0x31c>)
    8f66:	795b      	ldrb	r3, [r3, #5]
    8f68:	2b00      	cmp	r3, #0
    8f6a:	d003      	beq.n	8f74 <operateOnWaterEvent+0xbc>
				{
					m2mEvent_arr[1] = ME_WAITREGISTER;
    8f6c:	4b9a      	ldr	r3, [pc, #616]	; (91d8 <operateOnWaterEvent+0x320>)
    8f6e:	2201      	movs	r2, #1
    8f70:	705a      	strb	r2, [r3, #1]
    8f72:	e006      	b.n	8f82 <operateOnWaterEvent+0xca>
				}
				else
				{
					simEventTemp[15] = registerEvent('E');	//report To SIM well is full.
    8f74:	2045      	movs	r0, #69	; 0x45
    8f76:	4b95      	ldr	r3, [pc, #596]	; (91cc <operateOnWaterEvent+0x314>)
    8f78:	4798      	blx	r3
    8f7a:	0003      	movs	r3, r0
    8f7c:	001a      	movs	r2, r3
    8f7e:	4b94      	ldr	r3, [pc, #592]	; (91d0 <operateOnWaterEvent+0x318>)
    8f80:	73da      	strb	r2, [r3, #15]
				}
				if (user_settings_parameter_struct.preventOverFlowAddress)
    8f82:	4b96      	ldr	r3, [pc, #600]	; (91dc <operateOnWaterEvent+0x324>)
    8f84:	7f9b      	ldrb	r3, [r3, #30]
    8f86:	2b00      	cmp	r3, #0
    8f88:	d00c      	beq.n	8fa4 <operateOnWaterEvent+0xec>
				{
					stopMotor(false,true,false);
    8f8a:	2200      	movs	r2, #0
    8f8c:	2101      	movs	r1, #1
    8f8e:	2000      	movs	r0, #0
    8f90:	4b8d      	ldr	r3, [pc, #564]	; (91c8 <operateOnWaterEvent+0x310>)
    8f92:	4798      	blx	r3
					simEventTemp[14] = registerEvent('H'); //report To SIM well is full, so stopped motor
    8f94:	2048      	movs	r0, #72	; 0x48
    8f96:	4b8d      	ldr	r3, [pc, #564]	; (91cc <operateOnWaterEvent+0x314>)
    8f98:	4798      	blx	r3
    8f9a:	0003      	movs	r3, r0
    8f9c:	001a      	movs	r2, r3
    8f9e:	4b8c      	ldr	r3, [pc, #560]	; (91d0 <operateOnWaterEvent+0x318>)
    8fa0:	739a      	strb	r2, [r3, #14]
			if (factory_settings_parameter_struct.ENABLE_M2M)
    8fa2:	e03a      	b.n	901a <operateOnWaterEvent+0x162>
				}
				else
				{
					simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
    8fa4:	2045      	movs	r0, #69	; 0x45
    8fa6:	4b89      	ldr	r3, [pc, #548]	; (91cc <operateOnWaterEvent+0x314>)
    8fa8:	4798      	blx	r3
    8faa:	0003      	movs	r3, r0
    8fac:	001a      	movs	r2, r3
    8fae:	4b88      	ldr	r3, [pc, #544]	; (91d0 <operateOnWaterEvent+0x318>)
    8fb0:	73da      	strb	r2, [r3, #15]
			if (factory_settings_parameter_struct.ENABLE_M2M)
    8fb2:	e032      	b.n	901a <operateOnWaterEvent+0x162>
				}
			}
		}
		else if ((uLevel==LOWLEVEL) && (undergroundLevel>LOWLEVEL))		// decrease in water level
    8fb4:	1dfb      	adds	r3, r7, #7
    8fb6:	781b      	ldrb	r3, [r3, #0]
    8fb8:	2b01      	cmp	r3, #1
    8fba:	d11b      	bne.n	8ff4 <operateOnWaterEvent+0x13c>
    8fbc:	4b7e      	ldr	r3, [pc, #504]	; (91b8 <operateOnWaterEvent+0x300>)
    8fbe:	781b      	ldrb	r3, [r3, #0]
    8fc0:	2b01      	cmp	r3, #1
    8fc2:	d917      	bls.n	8ff4 <operateOnWaterEvent+0x13c>
		{
			if (factory_settings_parameter_struct.ENABLE_M2M)
    8fc4:	4b7d      	ldr	r3, [pc, #500]	; (91bc <operateOnWaterEvent+0x304>)
    8fc6:	78db      	ldrb	r3, [r3, #3]
    8fc8:	2b00      	cmp	r3, #0
    8fca:	d007      	beq.n	8fdc <operateOnWaterEvent+0x124>
			{
				if (m2m_Numbers_struct.m2mSetting)
    8fcc:	4b81      	ldr	r3, [pc, #516]	; (91d4 <operateOnWaterEvent+0x31c>)
    8fce:	795b      	ldrb	r3, [r3, #5]
    8fd0:	2b00      	cmp	r3, #0
    8fd2:	d021      	beq.n	9018 <operateOnWaterEvent+0x160>
				{
					m2mEvent_arr[0] = ME_WAITREGISTER;
    8fd4:	4b80      	ldr	r3, [pc, #512]	; (91d8 <operateOnWaterEvent+0x320>)
    8fd6:	2201      	movs	r2, #1
    8fd8:	701a      	strb	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_M2M)
    8fda:	e01d      	b.n	9018 <operateOnWaterEvent+0x160>
				}
			}
			else
			{
				if (factory_settings_parameter_struct.NOLEVELCHANGECALL)
    8fdc:	4b77      	ldr	r3, [pc, #476]	; (91bc <operateOnWaterEvent+0x304>)
    8fde:	79db      	ldrb	r3, [r3, #7]
    8fe0:	2b00      	cmp	r3, #0
    8fe2:	d019      	beq.n	9018 <operateOnWaterEvent+0x160>
				{
					simEventTemp[13] = registerEvent('D'); //report To SIM water level is decrease..
    8fe4:	2044      	movs	r0, #68	; 0x44
    8fe6:	4b79      	ldr	r3, [pc, #484]	; (91cc <operateOnWaterEvent+0x314>)
    8fe8:	4798      	blx	r3
    8fea:	0003      	movs	r3, r0
    8fec:	001a      	movs	r2, r3
    8fee:	4b78      	ldr	r3, [pc, #480]	; (91d0 <operateOnWaterEvent+0x318>)
    8ff0:	735a      	strb	r2, [r3, #13]
			if (factory_settings_parameter_struct.ENABLE_M2M)
    8ff2:	e011      	b.n	9018 <operateOnWaterEvent+0x160>
				}
			}
		}
		else if (uLevel==MIDLEVEL && undergroundLevel<MIDLEVEL)		// increase in water level
    8ff4:	1dfb      	adds	r3, r7, #7
    8ff6:	781b      	ldrb	r3, [r3, #0]
    8ff8:	2b02      	cmp	r3, #2
    8ffa:	d10e      	bne.n	901a <operateOnWaterEvent+0x162>
    8ffc:	4b6e      	ldr	r3, [pc, #440]	; (91b8 <operateOnWaterEvent+0x300>)
    8ffe:	781b      	ldrb	r3, [r3, #0]
    9000:	2b01      	cmp	r3, #1
    9002:	d80a      	bhi.n	901a <operateOnWaterEvent+0x162>
		{
			simEventTemp[16] = registerEvent('Z'); //report To SIM water level is increasing..
    9004:	205a      	movs	r0, #90	; 0x5a
    9006:	4b71      	ldr	r3, [pc, #452]	; (91cc <operateOnWaterEvent+0x314>)
    9008:	4798      	blx	r3
    900a:	0003      	movs	r3, r0
    900c:	001a      	movs	r2, r3
    900e:	4b70      	ldr	r3, [pc, #448]	; (91d0 <operateOnWaterEvent+0x318>)
    9010:	741a      	strb	r2, [r3, #16]
    9012:	e002      	b.n	901a <operateOnWaterEvent+0x162>
			if (factory_settings_parameter_struct.ENABLE_M2M)
    9014:	46c0      	nop			; (mov r8, r8)
    9016:	e000      	b.n	901a <operateOnWaterEvent+0x162>
			if (factory_settings_parameter_struct.ENABLE_M2M)
    9018:	46c0      	nop			; (mov r8, r8)
		}
		if (factory_settings_parameter_struct.ENABLE_GP)
    901a:	4b68      	ldr	r3, [pc, #416]	; (91bc <operateOnWaterEvent+0x304>)
    901c:	791b      	ldrb	r3, [r3, #4]
    901e:	2b00      	cmp	r3, #0
    9020:	d100      	bne.n	9024 <operateOnWaterEvent+0x16c>
    9022:	e0af      	b.n	9184 <operateOnWaterEvent+0x2cc>
		{
			if(oLevel!=overheadLevel)
    9024:	4b66      	ldr	r3, [pc, #408]	; (91c0 <operateOnWaterEvent+0x308>)
    9026:	781b      	ldrb	r3, [r3, #0]
    9028:	b2db      	uxtb	r3, r3
    902a:	1dba      	adds	r2, r7, #6
    902c:	7812      	ldrb	r2, [r2, #0]
    902e:	429a      	cmp	r2, r3
    9030:	d100      	bne.n	9034 <operateOnWaterEvent+0x17c>
    9032:	e0a7      	b.n	9184 <operateOnWaterEvent+0x2cc>
			{
				if(oLevel==OVERHEADHIGHLEVEL && overheadLevel<OVERHEADHIGHLEVEL)		////overhead tank is full
    9034:	1dbb      	adds	r3, r7, #6
    9036:	781b      	ldrb	r3, [r3, #0]
    9038:	2b02      	cmp	r3, #2
    903a:	d111      	bne.n	9060 <operateOnWaterEvent+0x1a8>
    903c:	4b60      	ldr	r3, [pc, #384]	; (91c0 <operateOnWaterEvent+0x308>)
    903e:	781b      	ldrb	r3, [r3, #0]
    9040:	b2db      	uxtb	r3, r3
    9042:	2b01      	cmp	r3, #1
    9044:	d80c      	bhi.n	9060 <operateOnWaterEvent+0x1a8>
				{
					stopMotor(false,true,false);
    9046:	2200      	movs	r2, #0
    9048:	2101      	movs	r1, #1
    904a:	2000      	movs	r0, #0
    904c:	4b5e      	ldr	r3, [pc, #376]	; (91c8 <operateOnWaterEvent+0x310>)
    904e:	4798      	blx	r3
					simEventTemp[17] = registerEvent('V'); //report To SIM Motor Off due to overhead tank full
    9050:	2056      	movs	r0, #86	; 0x56
    9052:	4b5e      	ldr	r3, [pc, #376]	; (91cc <operateOnWaterEvent+0x314>)
    9054:	4798      	blx	r3
    9056:	0003      	movs	r3, r0
    9058:	001a      	movs	r2, r3
    905a:	4b5d      	ldr	r3, [pc, #372]	; (91d0 <operateOnWaterEvent+0x318>)
    905c:	745a      	strb	r2, [r3, #17]
    905e:	e091      	b.n	9184 <operateOnWaterEvent+0x2cc>
				}
				else if (oLevel==OVERHEADCRITICALLEVEL && overheadLevel>OVERHEADCRITICALLEVEL)	// overhead tank empty.
    9060:	1dbb      	adds	r3, r7, #6
    9062:	781b      	ldrb	r3, [r3, #0]
    9064:	2b00      	cmp	r3, #0
    9066:	d000      	beq.n	906a <operateOnWaterEvent+0x1b2>
    9068:	e08c      	b.n	9184 <operateOnWaterEvent+0x2cc>
    906a:	4b55      	ldr	r3, [pc, #340]	; (91c0 <operateOnWaterEvent+0x308>)
    906c:	781b      	ldrb	r3, [r3, #0]
    906e:	b2db      	uxtb	r3, r3
    9070:	2b00      	cmp	r3, #0
    9072:	d100      	bne.n	9076 <operateOnWaterEvent+0x1be>
    9074:	e086      	b.n	9184 <operateOnWaterEvent+0x2cc>
				{
					simEventTemp[18] = registerEvent('W'); //report To SIM , overhead tank empty.
    9076:	2057      	movs	r0, #87	; 0x57
    9078:	4b54      	ldr	r3, [pc, #336]	; (91cc <operateOnWaterEvent+0x314>)
    907a:	4798      	blx	r3
    907c:	0003      	movs	r3, r0
    907e:	001a      	movs	r2, r3
    9080:	4b53      	ldr	r3, [pc, #332]	; (91d0 <operateOnWaterEvent+0x318>)
    9082:	749a      	strb	r2, [r3, #18]
    9084:	e07e      	b.n	9184 <operateOnWaterEvent+0x2cc>
			}
		}
	}
	else
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
    9086:	4b4d      	ldr	r3, [pc, #308]	; (91bc <operateOnWaterEvent+0x304>)
    9088:	78db      	ldrb	r3, [r3, #3]
    908a:	2b00      	cmp	r3, #0
    908c:	d027      	beq.n	90de <operateOnWaterEvent+0x226>
		{
			if(m2m_Numbers_struct.m2mSetting && uLevel<MIDLEVEL && undergroundLevel>=MIDLEVEL)	//level is decreased
    908e:	4b51      	ldr	r3, [pc, #324]	; (91d4 <operateOnWaterEvent+0x31c>)
    9090:	795b      	ldrb	r3, [r3, #5]
    9092:	2b00      	cmp	r3, #0
    9094:	d00b      	beq.n	90ae <operateOnWaterEvent+0x1f6>
    9096:	1dfb      	adds	r3, r7, #7
    9098:	781b      	ldrb	r3, [r3, #0]
    909a:	2b01      	cmp	r3, #1
    909c:	d807      	bhi.n	90ae <operateOnWaterEvent+0x1f6>
    909e:	4b46      	ldr	r3, [pc, #280]	; (91b8 <operateOnWaterEvent+0x300>)
    90a0:	781b      	ldrb	r3, [r3, #0]
    90a2:	2b01      	cmp	r3, #1
    90a4:	d903      	bls.n	90ae <operateOnWaterEvent+0x1f6>
			{
				m2mEvent_arr[0] = ME_WAITREGISTER;
    90a6:	4b4c      	ldr	r3, [pc, #304]	; (91d8 <operateOnWaterEvent+0x320>)
    90a8:	2201      	movs	r2, #1
    90aa:	701a      	strb	r2, [r3, #0]
    90ac:	e04b      	b.n	9146 <operateOnWaterEvent+0x28e>
			}
			else if (uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)			//well is full
    90ae:	1dfb      	adds	r3, r7, #7
    90b0:	781b      	ldrb	r3, [r3, #0]
    90b2:	2b03      	cmp	r3, #3
    90b4:	d147      	bne.n	9146 <operateOnWaterEvent+0x28e>
    90b6:	4b40      	ldr	r3, [pc, #256]	; (91b8 <operateOnWaterEvent+0x300>)
    90b8:	781b      	ldrb	r3, [r3, #0]
    90ba:	2b02      	cmp	r3, #2
    90bc:	d843      	bhi.n	9146 <operateOnWaterEvent+0x28e>
			{
				if(m2m_Numbers_struct.m2mSetting)
    90be:	4b45      	ldr	r3, [pc, #276]	; (91d4 <operateOnWaterEvent+0x31c>)
    90c0:	795b      	ldrb	r3, [r3, #5]
    90c2:	2b00      	cmp	r3, #0
    90c4:	d003      	beq.n	90ce <operateOnWaterEvent+0x216>
				{
					m2mEvent_arr[1] = ME_WAITREGISTER;
    90c6:	4b44      	ldr	r3, [pc, #272]	; (91d8 <operateOnWaterEvent+0x320>)
    90c8:	2201      	movs	r2, #1
    90ca:	705a      	strb	r2, [r3, #1]
    90cc:	e03b      	b.n	9146 <operateOnWaterEvent+0x28e>
				}
				else
				{
					simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
    90ce:	2045      	movs	r0, #69	; 0x45
    90d0:	4b3e      	ldr	r3, [pc, #248]	; (91cc <operateOnWaterEvent+0x314>)
    90d2:	4798      	blx	r3
    90d4:	0003      	movs	r3, r0
    90d6:	001a      	movs	r2, r3
    90d8:	4b3d      	ldr	r3, [pc, #244]	; (91d0 <operateOnWaterEvent+0x318>)
    90da:	73da      	strb	r2, [r3, #15]
    90dc:	e033      	b.n	9146 <operateOnWaterEvent+0x28e>
				}
			}
		}
		else if(uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)		//well is full
    90de:	1dfb      	adds	r3, r7, #7
    90e0:	781b      	ldrb	r3, [r3, #0]
    90e2:	2b03      	cmp	r3, #3
    90e4:	d10b      	bne.n	90fe <operateOnWaterEvent+0x246>
    90e6:	4b34      	ldr	r3, [pc, #208]	; (91b8 <operateOnWaterEvent+0x300>)
    90e8:	781b      	ldrb	r3, [r3, #0]
    90ea:	2b02      	cmp	r3, #2
    90ec:	d807      	bhi.n	90fe <operateOnWaterEvent+0x246>
		{
			simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
    90ee:	2045      	movs	r0, #69	; 0x45
    90f0:	4b36      	ldr	r3, [pc, #216]	; (91cc <operateOnWaterEvent+0x314>)
    90f2:	4798      	blx	r3
    90f4:	0003      	movs	r3, r0
    90f6:	001a      	movs	r2, r3
    90f8:	4b35      	ldr	r3, [pc, #212]	; (91d0 <operateOnWaterEvent+0x318>)
    90fa:	73da      	strb	r2, [r3, #15]
    90fc:	e023      	b.n	9146 <operateOnWaterEvent+0x28e>
		}
		else if (uLevel==MIDLEVEL && undergroundLevel<MIDLEVEL)		// underground level is increasing
    90fe:	1dfb      	adds	r3, r7, #7
    9100:	781b      	ldrb	r3, [r3, #0]
    9102:	2b02      	cmp	r3, #2
    9104:	d11f      	bne.n	9146 <operateOnWaterEvent+0x28e>
    9106:	4b2c      	ldr	r3, [pc, #176]	; (91b8 <operateOnWaterEvent+0x300>)
    9108:	781b      	ldrb	r3, [r3, #0]
    910a:	2b01      	cmp	r3, #1
    910c:	d81b      	bhi.n	9146 <operateOnWaterEvent+0x28e>
		{
			if (factory_settings_parameter_struct.ENABLE_GP)
    910e:	4b2b      	ldr	r3, [pc, #172]	; (91bc <operateOnWaterEvent+0x304>)
    9110:	791b      	ldrb	r3, [r3, #4]
    9112:	2b00      	cmp	r3, #0
    9114:	d00d      	beq.n	9132 <operateOnWaterEvent+0x27a>
			{
				if (factory_settings_parameter_struct.DUAL_LEVEL)
    9116:	4b29      	ldr	r3, [pc, #164]	; (91bc <operateOnWaterEvent+0x304>)
    9118:	799b      	ldrb	r3, [r3, #6]
    911a:	2b00      	cmp	r3, #0
    911c:	d009      	beq.n	9132 <operateOnWaterEvent+0x27a>
				{
					if(oLevel<OVERHEADHIGHLEVEL)
    911e:	1dbb      	adds	r3, r7, #6
    9120:	781b      	ldrb	r3, [r3, #0]
    9122:	2b01      	cmp	r3, #1
    9124:	d805      	bhi.n	9132 <operateOnWaterEvent+0x27a>
					{
						if(user_settings_parameter_struct.autoStartAddress)			//autoStart is ON
    9126:	4b2d      	ldr	r3, [pc, #180]	; (91dc <operateOnWaterEvent+0x324>)
    9128:	785b      	ldrb	r3, [r3, #1]
    912a:	2b00      	cmp	r3, #0
    912c:	d001      	beq.n	9132 <operateOnWaterEvent+0x27a>
						{
							triggerAutoStart();
    912e:	4b2c      	ldr	r3, [pc, #176]	; (91e0 <operateOnWaterEvent+0x328>)
    9130:	4798      	blx	r3
						}
					}
				}
			}
			if (factory_settings_parameter_struct.DUAL_LEVEL)
    9132:	4b22      	ldr	r3, [pc, #136]	; (91bc <operateOnWaterEvent+0x304>)
    9134:	799b      	ldrb	r3, [r3, #6]
    9136:	2b00      	cmp	r3, #0
    9138:	d005      	beq.n	9146 <operateOnWaterEvent+0x28e>
			{
				if(user_settings_parameter_struct.autoStartAddress)			//autoStart is ON
    913a:	4b28      	ldr	r3, [pc, #160]	; (91dc <operateOnWaterEvent+0x324>)
    913c:	785b      	ldrb	r3, [r3, #1]
    913e:	2b00      	cmp	r3, #0
    9140:	d001      	beq.n	9146 <operateOnWaterEvent+0x28e>
				{
					triggerAutoStart();
    9142:	4b27      	ldr	r3, [pc, #156]	; (91e0 <operateOnWaterEvent+0x328>)
    9144:	4798      	blx	r3
				}
			}
		}
		if (factory_settings_parameter_struct.ENABLE_GP)
    9146:	4b1d      	ldr	r3, [pc, #116]	; (91bc <operateOnWaterEvent+0x304>)
    9148:	791b      	ldrb	r3, [r3, #4]
    914a:	2b00      	cmp	r3, #0
    914c:	d01a      	beq.n	9184 <operateOnWaterEvent+0x2cc>
		{
			if (oLevel==OVERHEADCRITICALLEVEL && overheadLevel>OVERHEADCRITICALLEVEL && uLevel>CRITICALLEVEL) // overhead tank is empty, and underground not low
    914e:	1dbb      	adds	r3, r7, #6
    9150:	781b      	ldrb	r3, [r3, #0]
    9152:	2b00      	cmp	r3, #0
    9154:	d116      	bne.n	9184 <operateOnWaterEvent+0x2cc>
    9156:	4b1a      	ldr	r3, [pc, #104]	; (91c0 <operateOnWaterEvent+0x308>)
    9158:	781b      	ldrb	r3, [r3, #0]
    915a:	b2db      	uxtb	r3, r3
    915c:	2b00      	cmp	r3, #0
    915e:	d011      	beq.n	9184 <operateOnWaterEvent+0x2cc>
    9160:	1dfb      	adds	r3, r7, #7
    9162:	781b      	ldrb	r3, [r3, #0]
    9164:	2b00      	cmp	r3, #0
    9166:	d00d      	beq.n	9184 <operateOnWaterEvent+0x2cc>
			{
				if(user_settings_parameter_struct.autoStartAddress)		//autoStart is ON
    9168:	4b1c      	ldr	r3, [pc, #112]	; (91dc <operateOnWaterEvent+0x324>)
    916a:	785b      	ldrb	r3, [r3, #1]
    916c:	2b00      	cmp	r3, #0
    916e:	d002      	beq.n	9176 <operateOnWaterEvent+0x2be>
				{
					triggerAutoStart();
    9170:	4b1b      	ldr	r3, [pc, #108]	; (91e0 <operateOnWaterEvent+0x328>)
    9172:	4798      	blx	r3
    9174:	e006      	b.n	9184 <operateOnWaterEvent+0x2cc>
				}
				else
				{
					simEventTemp[18] = registerEvent('W'); //report To SIM overhead tank is empty.
    9176:	2057      	movs	r0, #87	; 0x57
    9178:	4b14      	ldr	r3, [pc, #80]	; (91cc <operateOnWaterEvent+0x314>)
    917a:	4798      	blx	r3
    917c:	0003      	movs	r3, r0
    917e:	001a      	movs	r2, r3
    9180:	4b13      	ldr	r3, [pc, #76]	; (91d0 <operateOnWaterEvent+0x318>)
    9182:	749a      	strb	r2, [r3, #18]
				}
			}
		}
	}
	if (factory_settings_parameter_struct.ENABLE_GP)
    9184:	4b0d      	ldr	r3, [pc, #52]	; (91bc <operateOnWaterEvent+0x304>)
    9186:	791b      	ldrb	r3, [r3, #4]
    9188:	2b00      	cmp	r3, #0
    918a:	d004      	beq.n	9196 <operateOnWaterEvent+0x2de>
	{
		updateOverheadLevel(oLevel);
    918c:	1dbb      	adds	r3, r7, #6
    918e:	781b      	ldrb	r3, [r3, #0]
    9190:	0018      	movs	r0, r3
    9192:	4b14      	ldr	r3, [pc, #80]	; (91e4 <operateOnWaterEvent+0x32c>)
    9194:	4798      	blx	r3
	}
	updateUndergroundLevel(uLevel);
    9196:	1dfb      	adds	r3, r7, #7
    9198:	781b      	ldrb	r3, [r3, #0]
    919a:	0018      	movs	r0, r3
    919c:	4b12      	ldr	r3, [pc, #72]	; (91e8 <operateOnWaterEvent+0x330>)
    919e:	4798      	blx	r3
    91a0:	e002      	b.n	91a8 <operateOnWaterEvent+0x2f0>
			return;
    91a2:	46c0      	nop			; (mov r8, r8)
    91a4:	e000      	b.n	91a8 <operateOnWaterEvent+0x2f0>
				return;
    91a6:	46c0      	nop			; (mov r8, r8)
}
    91a8:	46bd      	mov	sp, r7
    91aa:	b002      	add	sp, #8
    91ac:	bd80      	pop	{r7, pc}
    91ae:	46c0      	nop			; (mov r8, r8)
    91b0:	20000739 	.word	0x20000739
    91b4:	2000072a 	.word	0x2000072a
    91b8:	20000800 	.word	0x20000800
    91bc:	20000618 	.word	0x20000618
    91c0:	20000758 	.word	0x20000758
    91c4:	00009e1d 	.word	0x00009e1d
    91c8:	0000a6e9 	.word	0x0000a6e9
    91cc:	00004679 	.word	0x00004679
    91d0:	200006f0 	.word	0x200006f0
    91d4:	20000544 	.word	0x20000544
    91d8:	20000778 	.word	0x20000778
    91dc:	2000064c 	.word	0x2000064c
    91e0:	0000a151 	.word	0x0000a151
    91e4:	000089f1 	.word	0x000089f1
    91e8:	00008b21 	.word	0x00008b21

000091ec <Configure_ADC0>:

void Configure_ADC0(void)
{
    91ec:	b580      	push	{r7, lr}
    91ee:	b08c      	sub	sp, #48	; 0x30
    91f0:	af00      	add	r7, sp, #0
	struct adc_config config;
	adc_get_config_defaults(&config);
    91f2:	003b      	movs	r3, r7
    91f4:	0018      	movs	r0, r3
    91f6:	4b15      	ldr	r3, [pc, #84]	; (924c <Configure_ADC0+0x60>)
    91f8:	4798      	blx	r3
	config.positive_input = ADC_POSITIVE_INPUT_PIN19;
    91fa:	003b      	movs	r3, r7
    91fc:	2213      	movs	r2, #19
    91fe:	731a      	strb	r2, [r3, #12]
	config.negative_input = ADC_NEGATIVE_INPUT_GND;
    9200:	003b      	movs	r3, r7
    9202:	22c0      	movs	r2, #192	; 0xc0
    9204:	0152      	lsls	r2, r2, #5
    9206:	81da      	strh	r2, [r3, #14]
	config.reference      = ADC_REFERENCE_AREFA;//ADC_REFERENCE_INT1V;
    9208:	003b      	movs	r3, r7
    920a:	2203      	movs	r2, #3
    920c:	705a      	strb	r2, [r3, #1]
	config.clock_source   = GCLK_GENERATOR_3;
    920e:	003b      	movs	r3, r7
    9210:	2203      	movs	r2, #3
    9212:	701a      	strb	r2, [r3, #0]
	config.gain_factor    = ADC_GAIN_FACTOR_1X;
    9214:	003b      	movs	r3, r7
    9216:	2200      	movs	r2, #0
    9218:	609a      	str	r2, [r3, #8]
	config.resolution	= ADC_RESOLUTION_12BIT;
    921a:	003b      	movs	r3, r7
    921c:	2200      	movs	r2, #0
    921e:	711a      	strb	r2, [r3, #4]
	
	config.clock_prescaler = ADC_CLOCK_PRESCALER_DIV64; //125kHz adc clock (8MHz/64)
    9220:	003b      	movs	r3, r7
    9222:	2280      	movs	r2, #128	; 0x80
    9224:	00d2      	lsls	r2, r2, #3
    9226:	805a      	strh	r2, [r3, #2]
	
	config.run_in_standby = true;
    9228:	003b      	movs	r3, r7
    922a:	2201      	movs	r2, #1
    922c:	755a      	strb	r2, [r3, #21]
	
	adc_init(&adc_inst, ADC, &config);// Initialize the ADC
    922e:	003a      	movs	r2, r7
    9230:	4907      	ldr	r1, [pc, #28]	; (9250 <Configure_ADC0+0x64>)
    9232:	4b08      	ldr	r3, [pc, #32]	; (9254 <Configure_ADC0+0x68>)
    9234:	0018      	movs	r0, r3
    9236:	4b08      	ldr	r3, [pc, #32]	; (9258 <Configure_ADC0+0x6c>)
    9238:	4798      	blx	r3
	adc_enable(&adc_inst);
    923a:	4b06      	ldr	r3, [pc, #24]	; (9254 <Configure_ADC0+0x68>)
    923c:	0018      	movs	r0, r3
    923e:	4b07      	ldr	r3, [pc, #28]	; (925c <Configure_ADC0+0x70>)
    9240:	4798      	blx	r3
}
    9242:	46c0      	nop			; (mov r8, r8)
    9244:	46bd      	mov	sp, r7
    9246:	b00c      	add	sp, #48	; 0x30
    9248:	bd80      	pop	{r7, pc}
    924a:	46c0      	nop			; (mov r8, r8)
    924c:	0000c041 	.word	0x0000c041
    9250:	42004000 	.word	0x42004000
    9254:	200007c4 	.word	0x200007c4
    9258:	0000c691 	.word	0x0000c691
    925c:	000085ad 	.word	0x000085ad

00009260 <Read_ADC0>:

uint32_t Read_ADC0(uint32_t adc_pin,uint16_t samples)
{
    9260:	b580      	push	{r7, lr}
    9262:	b084      	sub	sp, #16
    9264:	af00      	add	r7, sp, #0
    9266:	6078      	str	r0, [r7, #4]
    9268:	000a      	movs	r2, r1
    926a:	1cbb      	adds	r3, r7, #2
    926c:	801a      	strh	r2, [r3, #0]
	adc_set_positive_input(&adc_inst, adc_pin);
    926e:	687b      	ldr	r3, [r7, #4]
    9270:	b2da      	uxtb	r2, r3
    9272:	4b24      	ldr	r3, [pc, #144]	; (9304 <Read_ADC0+0xa4>)
    9274:	0011      	movs	r1, r2
    9276:	0018      	movs	r0, r3
    9278:	4b23      	ldr	r3, [pc, #140]	; (9308 <Read_ADC0+0xa8>)
    927a:	4798      	blx	r3
	uint16_t current_value = 0;
    927c:	2308      	movs	r3, #8
    927e:	18fb      	adds	r3, r7, r3
    9280:	2200      	movs	r2, #0
    9282:	801a      	strh	r2, [r3, #0]
	uint32_t total_value = 0;
    9284:	2300      	movs	r3, #0
    9286:	60fb      	str	r3, [r7, #12]
	for (uint16_t uintLoop=0;uintLoop<samples;uintLoop++)
    9288:	230a      	movs	r3, #10
    928a:	18fb      	adds	r3, r7, r3
    928c:	2200      	movs	r2, #0
    928e:	801a      	strh	r2, [r3, #0]
    9290:	e026      	b.n	92e0 <Read_ADC0+0x80>
	{
		current_value = 0;
    9292:	2308      	movs	r3, #8
    9294:	18fb      	adds	r3, r7, r3
    9296:	2200      	movs	r2, #0
    9298:	801a      	strh	r2, [r3, #0]
		adc_start_conversion(&adc_inst);
    929a:	4b1a      	ldr	r3, [pc, #104]	; (9304 <Read_ADC0+0xa4>)
    929c:	0018      	movs	r0, r3
    929e:	4b1b      	ldr	r3, [pc, #108]	; (930c <Read_ADC0+0xac>)
    92a0:	4798      	blx	r3
		while((adc_get_status(&adc_inst) & ADC_STATUS_RESULT_READY) != 1);
    92a2:	46c0      	nop			; (mov r8, r8)
    92a4:	4b17      	ldr	r3, [pc, #92]	; (9304 <Read_ADC0+0xa4>)
    92a6:	0018      	movs	r0, r3
    92a8:	4b19      	ldr	r3, [pc, #100]	; (9310 <Read_ADC0+0xb0>)
    92aa:	4798      	blx	r3
    92ac:	0002      	movs	r2, r0
    92ae:	2301      	movs	r3, #1
    92b0:	4013      	ands	r3, r2
    92b2:	2b01      	cmp	r3, #1
    92b4:	d1f6      	bne.n	92a4 <Read_ADC0+0x44>
		adc_read(&adc_inst, &current_value);
    92b6:	2308      	movs	r3, #8
    92b8:	18fa      	adds	r2, r7, r3
    92ba:	4b12      	ldr	r3, [pc, #72]	; (9304 <Read_ADC0+0xa4>)
    92bc:	0011      	movs	r1, r2
    92be:	0018      	movs	r0, r3
    92c0:	4b14      	ldr	r3, [pc, #80]	; (9314 <Read_ADC0+0xb4>)
    92c2:	4798      	blx	r3
		total_value+=current_value;
    92c4:	2308      	movs	r3, #8
    92c6:	18fb      	adds	r3, r7, r3
    92c8:	881b      	ldrh	r3, [r3, #0]
    92ca:	001a      	movs	r2, r3
    92cc:	68fb      	ldr	r3, [r7, #12]
    92ce:	189b      	adds	r3, r3, r2
    92d0:	60fb      	str	r3, [r7, #12]
	for (uint16_t uintLoop=0;uintLoop<samples;uintLoop++)
    92d2:	230a      	movs	r3, #10
    92d4:	18fb      	adds	r3, r7, r3
    92d6:	881a      	ldrh	r2, [r3, #0]
    92d8:	230a      	movs	r3, #10
    92da:	18fb      	adds	r3, r7, r3
    92dc:	3201      	adds	r2, #1
    92de:	801a      	strh	r2, [r3, #0]
    92e0:	230a      	movs	r3, #10
    92e2:	18fa      	adds	r2, r7, r3
    92e4:	1cbb      	adds	r3, r7, #2
    92e6:	8812      	ldrh	r2, [r2, #0]
    92e8:	881b      	ldrh	r3, [r3, #0]
    92ea:	429a      	cmp	r2, r3
    92ec:	d3d1      	bcc.n	9292 <Read_ADC0+0x32>
	}
	
	return (total_value/samples);
    92ee:	1cbb      	adds	r3, r7, #2
    92f0:	881a      	ldrh	r2, [r3, #0]
    92f2:	4b09      	ldr	r3, [pc, #36]	; (9318 <Read_ADC0+0xb8>)
    92f4:	0011      	movs	r1, r2
    92f6:	68f8      	ldr	r0, [r7, #12]
    92f8:	4798      	blx	r3
    92fa:	0003      	movs	r3, r0
}
    92fc:	0018      	movs	r0, r3
    92fe:	46bd      	mov	sp, r7
    9300:	b004      	add	sp, #16
    9302:	bd80      	pop	{r7, pc}
    9304:	200007c4 	.word	0x200007c4
    9308:	000086d1 	.word	0x000086d1
    930c:	0000860d 	.word	0x0000860d
    9310:	00008505 	.word	0x00008505
    9314:	00008655 	.word	0x00008655
    9318:	000152e1 	.word	0x000152e1

0000931c <Read_Voltage_ADC0>:


uint32_t Read_Voltage_ADC0(uint32_t adc_pin)
{
    931c:	b5f0      	push	{r4, r5, r6, r7, lr}
    931e:	b093      	sub	sp, #76	; 0x4c
    9320:	af00      	add	r7, sp, #0
    9322:	61f8      	str	r0, [r7, #28]
    9324:	466b      	mov	r3, sp
    9326:	61bb      	str	r3, [r7, #24]
	adc_set_positive_input(&adc_inst, adc_pin);
    9328:	69fb      	ldr	r3, [r7, #28]
    932a:	b2da      	uxtb	r2, r3
    932c:	4b7b      	ldr	r3, [pc, #492]	; (951c <Read_Voltage_ADC0+0x200>)
    932e:	0011      	movs	r1, r2
    9330:	0018      	movs	r0, r3
    9332:	4b7b      	ldr	r3, [pc, #492]	; (9520 <Read_Voltage_ADC0+0x204>)
    9334:	4798      	blx	r3
	//read 500 samples
	
	uint16_t no_of_samples = 544;  //272 samples contain one full cycle
    9336:	2324      	movs	r3, #36	; 0x24
    9338:	2218      	movs	r2, #24
    933a:	4694      	mov	ip, r2
    933c:	44bc      	add	ip, r7
    933e:	4463      	add	r3, ip
    9340:	2288      	movs	r2, #136	; 0x88
    9342:	0092      	lsls	r2, r2, #2
    9344:	801a      	strh	r2, [r3, #0]
	uint16_t samples_buffer[no_of_samples];
    9346:	2324      	movs	r3, #36	; 0x24
    9348:	2218      	movs	r2, #24
    934a:	4694      	mov	ip, r2
    934c:	44bc      	add	ip, r7
    934e:	4463      	add	r3, ip
    9350:	881b      	ldrh	r3, [r3, #0]
    9352:	001a      	movs	r2, r3
    9354:	3a01      	subs	r2, #1
    9356:	63ba      	str	r2, [r7, #56]	; 0x38
    9358:	60bb      	str	r3, [r7, #8]
    935a:	2200      	movs	r2, #0
    935c:	60fa      	str	r2, [r7, #12]
    935e:	68b8      	ldr	r0, [r7, #8]
    9360:	68f9      	ldr	r1, [r7, #12]
    9362:	0002      	movs	r2, r0
    9364:	0f12      	lsrs	r2, r2, #28
    9366:	000e      	movs	r6, r1
    9368:	0136      	lsls	r6, r6, #4
    936a:	617e      	str	r6, [r7, #20]
    936c:	697e      	ldr	r6, [r7, #20]
    936e:	4316      	orrs	r6, r2
    9370:	617e      	str	r6, [r7, #20]
    9372:	0002      	movs	r2, r0
    9374:	0112      	lsls	r2, r2, #4
    9376:	613a      	str	r2, [r7, #16]
    9378:	603b      	str	r3, [r7, #0]
    937a:	2200      	movs	r2, #0
    937c:	607a      	str	r2, [r7, #4]
    937e:	6838      	ldr	r0, [r7, #0]
    9380:	6879      	ldr	r1, [r7, #4]
    9382:	0002      	movs	r2, r0
    9384:	0f12      	lsrs	r2, r2, #28
    9386:	000e      	movs	r6, r1
    9388:	0135      	lsls	r5, r6, #4
    938a:	4315      	orrs	r5, r2
    938c:	0002      	movs	r2, r0
    938e:	0114      	lsls	r4, r2, #4
    9390:	005b      	lsls	r3, r3, #1
    9392:	3301      	adds	r3, #1
    9394:	3307      	adds	r3, #7
    9396:	08db      	lsrs	r3, r3, #3
    9398:	00db      	lsls	r3, r3, #3
    939a:	466a      	mov	r2, sp
    939c:	1ad3      	subs	r3, r2, r3
    939e:	469d      	mov	sp, r3
    93a0:	466b      	mov	r3, sp
    93a2:	3301      	adds	r3, #1
    93a4:	085b      	lsrs	r3, r3, #1
    93a6:	005b      	lsls	r3, r3, #1
    93a8:	637b      	str	r3, [r7, #52]	; 0x34
	for (uint16_t i=0;i<no_of_samples;i++)
    93aa:	232e      	movs	r3, #46	; 0x2e
    93ac:	2218      	movs	r2, #24
    93ae:	4694      	mov	ip, r2
    93b0:	44bc      	add	ip, r7
    93b2:	4463      	add	r3, ip
    93b4:	2200      	movs	r2, #0
    93b6:	801a      	strh	r2, [r3, #0]
    93b8:	e021      	b.n	93fe <Read_Voltage_ADC0+0xe2>
	{
		adc_start_conversion(&adc_inst);
    93ba:	4b58      	ldr	r3, [pc, #352]	; (951c <Read_Voltage_ADC0+0x200>)
    93bc:	0018      	movs	r0, r3
    93be:	4b59      	ldr	r3, [pc, #356]	; (9524 <Read_Voltage_ADC0+0x208>)
    93c0:	4798      	blx	r3
		while (adc_read(&adc_inst, &samples_buffer[i]) != STATUS_OK) {
    93c2:	46c0      	nop			; (mov r8, r8)
    93c4:	232e      	movs	r3, #46	; 0x2e
    93c6:	2218      	movs	r2, #24
    93c8:	4694      	mov	ip, r2
    93ca:	44bc      	add	ip, r7
    93cc:	4463      	add	r3, ip
    93ce:	881b      	ldrh	r3, [r3, #0]
    93d0:	005b      	lsls	r3, r3, #1
    93d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    93d4:	18d2      	adds	r2, r2, r3
    93d6:	4b51      	ldr	r3, [pc, #324]	; (951c <Read_Voltage_ADC0+0x200>)
    93d8:	0011      	movs	r1, r2
    93da:	0018      	movs	r0, r3
    93dc:	4b52      	ldr	r3, [pc, #328]	; (9528 <Read_Voltage_ADC0+0x20c>)
    93de:	4798      	blx	r3
    93e0:	1e03      	subs	r3, r0, #0
    93e2:	d1ef      	bne.n	93c4 <Read_Voltage_ADC0+0xa8>
	for (uint16_t i=0;i<no_of_samples;i++)
    93e4:	232e      	movs	r3, #46	; 0x2e
    93e6:	2218      	movs	r2, #24
    93e8:	4694      	mov	ip, r2
    93ea:	44bc      	add	ip, r7
    93ec:	4463      	add	r3, ip
    93ee:	881a      	ldrh	r2, [r3, #0]
    93f0:	232e      	movs	r3, #46	; 0x2e
    93f2:	2118      	movs	r1, #24
    93f4:	468c      	mov	ip, r1
    93f6:	44bc      	add	ip, r7
    93f8:	4463      	add	r3, ip
    93fa:	3201      	adds	r2, #1
    93fc:	801a      	strh	r2, [r3, #0]
    93fe:	232e      	movs	r3, #46	; 0x2e
    9400:	2218      	movs	r2, #24
    9402:	18ba      	adds	r2, r7, r2
    9404:	18d2      	adds	r2, r2, r3
    9406:	2324      	movs	r3, #36	; 0x24
    9408:	2118      	movs	r1, #24
    940a:	468c      	mov	ip, r1
    940c:	44bc      	add	ip, r7
    940e:	4463      	add	r3, ip
    9410:	8812      	ldrh	r2, [r2, #0]
    9412:	881b      	ldrh	r3, [r3, #0]
    9414:	429a      	cmp	r2, r3
    9416:	d3d0      	bcc.n	93ba <Read_Voltage_ADC0+0x9e>
		}
	}
	
	uint32_t square = 0;
    9418:	2300      	movs	r3, #0
    941a:	643b      	str	r3, [r7, #64]	; 0x40
	
	double  mean = 0.0;
    941c:	2300      	movs	r3, #0
    941e:	2400      	movs	r4, #0
    9420:	62bb      	str	r3, [r7, #40]	; 0x28
    9422:	62fc      	str	r4, [r7, #44]	; 0x2c
	
	double  root = 0.0;
    9424:	2300      	movs	r3, #0
    9426:	2400      	movs	r4, #0
    9428:	623b      	str	r3, [r7, #32]
    942a:	627c      	str	r4, [r7, #36]	; 0x24
	
	for (uint16_t i = 0; i < no_of_samples; i++)
    942c:	2326      	movs	r3, #38	; 0x26
    942e:	2218      	movs	r2, #24
    9430:	4694      	mov	ip, r2
    9432:	44bc      	add	ip, r7
    9434:	4463      	add	r3, ip
    9436:	2200      	movs	r2, #0
    9438:	801a      	strh	r2, [r3, #0]
    943a:	e032      	b.n	94a2 <Read_Voltage_ADC0+0x186>
	{
		square += pow(samples_buffer[i], 2);
    943c:	2326      	movs	r3, #38	; 0x26
    943e:	2218      	movs	r2, #24
    9440:	4694      	mov	ip, r2
    9442:	44bc      	add	ip, r7
    9444:	4463      	add	r3, ip
    9446:	881a      	ldrh	r2, [r3, #0]
    9448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    944a:	0052      	lsls	r2, r2, #1
    944c:	5ad2      	ldrh	r2, [r2, r3]
    944e:	4b37      	ldr	r3, [pc, #220]	; (952c <Read_Voltage_ADC0+0x210>)
    9450:	0010      	movs	r0, r2
    9452:	4798      	blx	r3
    9454:	2300      	movs	r3, #0
    9456:	2480      	movs	r4, #128	; 0x80
    9458:	05e4      	lsls	r4, r4, #23
    945a:	001a      	movs	r2, r3
    945c:	0023      	movs	r3, r4
    945e:	4c34      	ldr	r4, [pc, #208]	; (9530 <Read_Voltage_ADC0+0x214>)
    9460:	47a0      	blx	r4
    9462:	0005      	movs	r5, r0
    9464:	000e      	movs	r6, r1
    9466:	4b31      	ldr	r3, [pc, #196]	; (952c <Read_Voltage_ADC0+0x210>)
    9468:	6c38      	ldr	r0, [r7, #64]	; 0x40
    946a:	4798      	blx	r3
    946c:	4c31      	ldr	r4, [pc, #196]	; (9534 <Read_Voltage_ADC0+0x218>)
    946e:	002a      	movs	r2, r5
    9470:	0033      	movs	r3, r6
    9472:	47a0      	blx	r4
    9474:	0003      	movs	r3, r0
    9476:	000c      	movs	r4, r1
    9478:	0019      	movs	r1, r3
    947a:	0022      	movs	r2, r4
    947c:	4b2e      	ldr	r3, [pc, #184]	; (9538 <Read_Voltage_ADC0+0x21c>)
    947e:	0008      	movs	r0, r1
    9480:	0011      	movs	r1, r2
    9482:	4798      	blx	r3
    9484:	0003      	movs	r3, r0
    9486:	643b      	str	r3, [r7, #64]	; 0x40
	for (uint16_t i = 0; i < no_of_samples; i++)
    9488:	2326      	movs	r3, #38	; 0x26
    948a:	2218      	movs	r2, #24
    948c:	4694      	mov	ip, r2
    948e:	44bc      	add	ip, r7
    9490:	4463      	add	r3, ip
    9492:	881a      	ldrh	r2, [r3, #0]
    9494:	2326      	movs	r3, #38	; 0x26
    9496:	2118      	movs	r1, #24
    9498:	468c      	mov	ip, r1
    949a:	44bc      	add	ip, r7
    949c:	4463      	add	r3, ip
    949e:	3201      	adds	r2, #1
    94a0:	801a      	strh	r2, [r3, #0]
    94a2:	2326      	movs	r3, #38	; 0x26
    94a4:	2218      	movs	r2, #24
    94a6:	18ba      	adds	r2, r7, r2
    94a8:	18d2      	adds	r2, r2, r3
    94aa:	2324      	movs	r3, #36	; 0x24
    94ac:	2118      	movs	r1, #24
    94ae:	468c      	mov	ip, r1
    94b0:	44bc      	add	ip, r7
    94b2:	4463      	add	r3, ip
    94b4:	8812      	ldrh	r2, [r2, #0]
    94b6:	881b      	ldrh	r3, [r3, #0]
    94b8:	429a      	cmp	r2, r3
    94ba:	d3bf      	bcc.n	943c <Read_Voltage_ADC0+0x120>
	}
	
	mean = (square / (float)(no_of_samples));
    94bc:	4b1f      	ldr	r3, [pc, #124]	; (953c <Read_Voltage_ADC0+0x220>)
    94be:	6c38      	ldr	r0, [r7, #64]	; 0x40
    94c0:	4798      	blx	r3
    94c2:	1c04      	adds	r4, r0, #0
    94c4:	2324      	movs	r3, #36	; 0x24
    94c6:	2218      	movs	r2, #24
    94c8:	4694      	mov	ip, r2
    94ca:	44bc      	add	ip, r7
    94cc:	4463      	add	r3, ip
    94ce:	881a      	ldrh	r2, [r3, #0]
    94d0:	4b1a      	ldr	r3, [pc, #104]	; (953c <Read_Voltage_ADC0+0x220>)
    94d2:	0010      	movs	r0, r2
    94d4:	4798      	blx	r3
    94d6:	1c02      	adds	r2, r0, #0
    94d8:	4b19      	ldr	r3, [pc, #100]	; (9540 <Read_Voltage_ADC0+0x224>)
    94da:	1c11      	adds	r1, r2, #0
    94dc:	1c20      	adds	r0, r4, #0
    94de:	4798      	blx	r3
    94e0:	1c03      	adds	r3, r0, #0
    94e2:	1c1a      	adds	r2, r3, #0
    94e4:	4b17      	ldr	r3, [pc, #92]	; (9544 <Read_Voltage_ADC0+0x228>)
    94e6:	1c10      	adds	r0, r2, #0
    94e8:	4798      	blx	r3
    94ea:	0003      	movs	r3, r0
    94ec:	000c      	movs	r4, r1
    94ee:	62bb      	str	r3, [r7, #40]	; 0x28
    94f0:	62fc      	str	r4, [r7, #44]	; 0x2c
	
	// Calculate Root.
	root = sqrt(mean);
    94f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94f4:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    94f6:	0018      	movs	r0, r3
    94f8:	0021      	movs	r1, r4
    94fa:	4b13      	ldr	r3, [pc, #76]	; (9548 <Read_Voltage_ADC0+0x22c>)
    94fc:	4798      	blx	r3
    94fe:	0003      	movs	r3, r0
    9500:	000c      	movs	r4, r1
    9502:	623b      	str	r3, [r7, #32]
    9504:	627c      	str	r4, [r7, #36]	; 0x24
	
	return (uint32_t)root;
    9506:	4b0c      	ldr	r3, [pc, #48]	; (9538 <Read_Voltage_ADC0+0x21c>)
    9508:	6a38      	ldr	r0, [r7, #32]
    950a:	6a79      	ldr	r1, [r7, #36]	; 0x24
    950c:	4798      	blx	r3
    950e:	0003      	movs	r3, r0
    9510:	69ba      	ldr	r2, [r7, #24]
    9512:	4695      	mov	sp, r2
	//}
	//}
	//}
	//
	//return samples_buffer[5]; //0,1,2,3,4 are considered as voltage spikes
}
    9514:	0018      	movs	r0, r3
    9516:	46bd      	mov	sp, r7
    9518:	b013      	add	sp, #76	; 0x4c
    951a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    951c:	200007c4 	.word	0x200007c4
    9520:	000086d1 	.word	0x000086d1
    9524:	0000860d 	.word	0x0000860d
    9528:	00008655 	.word	0x00008655
    952c:	000178d5 	.word	0x000178d5
    9530:	0001404d 	.word	0x0001404d
    9534:	00015df5 	.word	0x00015df5
    9538:	000156dd 	.word	0x000156dd
    953c:	00015d69 	.word	0x00015d69
    9540:	00015899 	.word	0x00015899
    9544:	00017945 	.word	0x00017945
    9548:	000143a5 	.word	0x000143a5

0000954c <autoSetCurrent>:

void autoSetCurrent(void)
{
    954c:	b580      	push	{r7, lr}
    954e:	b084      	sub	sp, #16
    9550:	af00      	add	r7, sp, #0
	if(getMotorState() && !startSequenceOn && !starDeltaTimerOn && !stopSequenceOn && getAllPhaseState())
    9552:	4b2e      	ldr	r3, [pc, #184]	; (960c <autoSetCurrent+0xc0>)
    9554:	4798      	blx	r3
    9556:	1e03      	subs	r3, r0, #0
    9558:	d04e      	beq.n	95f8 <autoSetCurrent+0xac>
    955a:	4b2d      	ldr	r3, [pc, #180]	; (9610 <autoSetCurrent+0xc4>)
    955c:	781b      	ldrb	r3, [r3, #0]
    955e:	2201      	movs	r2, #1
    9560:	4053      	eors	r3, r2
    9562:	b2db      	uxtb	r3, r3
    9564:	2b00      	cmp	r3, #0
    9566:	d047      	beq.n	95f8 <autoSetCurrent+0xac>
    9568:	4b2a      	ldr	r3, [pc, #168]	; (9614 <autoSetCurrent+0xc8>)
    956a:	781b      	ldrb	r3, [r3, #0]
    956c:	2201      	movs	r2, #1
    956e:	4053      	eors	r3, r2
    9570:	b2db      	uxtb	r3, r3
    9572:	2b00      	cmp	r3, #0
    9574:	d040      	beq.n	95f8 <autoSetCurrent+0xac>
    9576:	4b28      	ldr	r3, [pc, #160]	; (9618 <autoSetCurrent+0xcc>)
    9578:	781b      	ldrb	r3, [r3, #0]
    957a:	2201      	movs	r2, #1
    957c:	4053      	eors	r3, r2
    957e:	b2db      	uxtb	r3, r3
    9580:	2b00      	cmp	r3, #0
    9582:	d039      	beq.n	95f8 <autoSetCurrent+0xac>
    9584:	4b25      	ldr	r3, [pc, #148]	; (961c <autoSetCurrent+0xd0>)
    9586:	4798      	blx	r3
    9588:	1e03      	subs	r3, r0, #0
    958a:	d035      	beq.n	95f8 <autoSetCurrent+0xac>
	{
		uint32_t ADCcurrent = Analog_Parameter_Struct.Motor_Current;
    958c:	4b24      	ldr	r3, [pc, #144]	; (9620 <autoSetCurrent+0xd4>)
    958e:	691b      	ldr	r3, [r3, #16]
    9590:	60fb      	str	r3, [r7, #12]
		//ADCcurrent = Read_ADC0(ADC_POSITIVE_INPUT_PIN16,200);
		//xSemaphoreGive(xADC_Semaphore);
		//}
		
		
		if(ADCcurrent<250)     //ADC VALUE FOR 2.5A
    9592:	68fb      	ldr	r3, [r7, #12]
    9594:	2bf9      	cmp	r3, #249	; 0xf9
    9596:	d806      	bhi.n	95a6 <autoSetCurrent+0x5a>
		{
			setCurrentDetection(false);
    9598:	2000      	movs	r0, #0
    959a:	4b22      	ldr	r3, [pc, #136]	; (9624 <autoSetCurrent+0xd8>)
    959c:	4798      	blx	r3
			setMotorMGRResponse('Y');		//ampere cleared
    959e:	2059      	movs	r0, #89	; 0x59
    95a0:	4b21      	ldr	r3, [pc, #132]	; (9628 <autoSetCurrent+0xdc>)
    95a2:	4798      	blx	r3
			return;
    95a4:	e02e      	b.n	9604 <autoSetCurrent+0xb8>
		}
		
		uint32_t tempUnder = ADCcurrent  * user_settings_parameter_struct.underloadPerAddress / 100;
    95a6:	4b21      	ldr	r3, [pc, #132]	; (962c <autoSetCurrent+0xe0>)
    95a8:	7f1b      	ldrb	r3, [r3, #28]
    95aa:	001a      	movs	r2, r3
    95ac:	68fb      	ldr	r3, [r7, #12]
    95ae:	435a      	muls	r2, r3
    95b0:	4b1f      	ldr	r3, [pc, #124]	; (9630 <autoSetCurrent+0xe4>)
    95b2:	2164      	movs	r1, #100	; 0x64
    95b4:	0010      	movs	r0, r2
    95b6:	4798      	blx	r3
    95b8:	0003      	movs	r3, r0
    95ba:	60bb      	str	r3, [r7, #8]
		uint32_t tempOver = ADCcurrent  * user_settings_parameter_struct.overloadPerAddress / 100;
    95bc:	4b1b      	ldr	r3, [pc, #108]	; (962c <autoSetCurrent+0xe0>)
    95be:	7f5b      	ldrb	r3, [r3, #29]
    95c0:	001a      	movs	r2, r3
    95c2:	68fb      	ldr	r3, [r7, #12]
    95c4:	435a      	muls	r2, r3
    95c6:	4b1a      	ldr	r3, [pc, #104]	; (9630 <autoSetCurrent+0xe4>)
    95c8:	2164      	movs	r1, #100	; 0x64
    95ca:	0010      	movs	r0, r2
    95cc:	4798      	blx	r3
    95ce:	0003      	movs	r3, r0
    95d0:	607b      	str	r3, [r7, #4]

		setNormalLoadValue(ADCcurrent);
    95d2:	68fb      	ldr	r3, [r7, #12]
    95d4:	0018      	movs	r0, r3
    95d6:	4b17      	ldr	r3, [pc, #92]	; (9634 <autoSetCurrent+0xe8>)
    95d8:	4798      	blx	r3
		setUnderloadValue(tempUnder);
    95da:	68bb      	ldr	r3, [r7, #8]
    95dc:	0018      	movs	r0, r3
    95de:	4b16      	ldr	r3, [pc, #88]	; (9638 <autoSetCurrent+0xec>)
    95e0:	4798      	blx	r3
		setOverloadValue(tempOver);
    95e2:	687b      	ldr	r3, [r7, #4]
    95e4:	0018      	movs	r0, r3
    95e6:	4b15      	ldr	r3, [pc, #84]	; (963c <autoSetCurrent+0xf0>)
    95e8:	4798      	blx	r3
		setCurrentDetection(true);
    95ea:	2001      	movs	r0, #1
    95ec:	4b0d      	ldr	r3, [pc, #52]	; (9624 <autoSetCurrent+0xd8>)
    95ee:	4798      	blx	r3
		setMotorMGRResponse('K');		//ampere settings complete
    95f0:	204b      	movs	r0, #75	; 0x4b
    95f2:	4b0d      	ldr	r3, [pc, #52]	; (9628 <autoSetCurrent+0xdc>)
    95f4:	4798      	blx	r3
	{
    95f6:	e005      	b.n	9604 <autoSetCurrent+0xb8>
	}
	else
	{
		setCurrentDetection(false);
    95f8:	2000      	movs	r0, #0
    95fa:	4b0a      	ldr	r3, [pc, #40]	; (9624 <autoSetCurrent+0xd8>)
    95fc:	4798      	blx	r3
		setMotorMGRResponse('Y');		//ampere cleared
    95fe:	2059      	movs	r0, #89	; 0x59
    9600:	4b09      	ldr	r3, [pc, #36]	; (9628 <autoSetCurrent+0xdc>)
    9602:	4798      	blx	r3
	}
}
    9604:	46bd      	mov	sp, r7
    9606:	b004      	add	sp, #16
    9608:	bd80      	pop	{r7, pc}
    960a:	46c0      	nop			; (mov r8, r8)
    960c:	00009e1d 	.word	0x00009e1d
    9610:	20000761 	.word	0x20000761
    9614:	20000763 	.word	0x20000763
    9618:	20000751 	.word	0x20000751
    961c:	00009db5 	.word	0x00009db5
    9620:	200006cc 	.word	0x200006cc
    9624:	000018ad 	.word	0x000018ad
    9628:	00004851 	.word	0x00004851
    962c:	2000064c 	.word	0x2000064c
    9630:	000152e1 	.word	0x000152e1
    9634:	00001869 	.word	0x00001869
    9638:	000017e1 	.word	0x000017e1
    963c:	00001825 	.word	0x00001825

00009640 <speakAmpere>:

void speakAmpere(void)
{
    9640:	b580      	push	{r7, lr}
    9642:	b084      	sub	sp, #16
    9644:	af00      	add	r7, sp, #0
	if(getMotorState())
    9646:	4b0d      	ldr	r3, [pc, #52]	; (967c <speakAmpere+0x3c>)
    9648:	4798      	blx	r3
    964a:	1e03      	subs	r3, r0, #0
    964c:	d00f      	beq.n	966e <speakAmpere+0x2e>
	{
		char cTemp[8];
		
		uint32_t ADCcurrent = Analog_Parameter_Struct.Motor_Current_IntPart;
    964e:	4b0c      	ldr	r3, [pc, #48]	; (9680 <speakAmpere+0x40>)
    9650:	8a9b      	ldrh	r3, [r3, #20]
    9652:	b29b      	uxth	r3, r3
    9654:	60fb      	str	r3, [r7, #12]
		//xSemaphoreGive(xADC_Semaphore);
		//ADCcurrent = (ADCcurrent*7225)/100000;
		//xSemaphoreGive(xADC_Semaphore);
		//}
		
		utoa(ADCcurrent, cTemp, 10);
    9656:	1d39      	adds	r1, r7, #4
    9658:	68fb      	ldr	r3, [r7, #12]
    965a:	220a      	movs	r2, #10
    965c:	0018      	movs	r0, r3
    965e:	4b09      	ldr	r3, [pc, #36]	; (9684 <speakAmpere+0x44>)
    9660:	4798      	blx	r3
		playRepeatedFiles(cTemp);
    9662:	1d3b      	adds	r3, r7, #4
    9664:	0018      	movs	r0, r3
    9666:	4b08      	ldr	r3, [pc, #32]	; (9688 <speakAmpere+0x48>)
    9668:	4798      	blx	r3
		return;
    966a:	46c0      	nop			; (mov r8, r8)
    966c:	e002      	b.n	9674 <speakAmpere+0x34>
	}
	setMotorMGRResponse('-');
    966e:	202d      	movs	r0, #45	; 0x2d
    9670:	4b06      	ldr	r3, [pc, #24]	; (968c <speakAmpere+0x4c>)
    9672:	4798      	blx	r3
}
    9674:	46bd      	mov	sp, r7
    9676:	b004      	add	sp, #16
    9678:	bd80      	pop	{r7, pc}
    967a:	46c0      	nop			; (mov r8, r8)
    967c:	00009e1d 	.word	0x00009e1d
    9680:	200006cc 	.word	0x200006cc
    9684:	0001809d 	.word	0x0001809d
    9688:	00004545 	.word	0x00004545
    968c:	00004851 	.word	0x00004851

00009690 <PR2_ISR>:

void PR2_ISR(void)
{
    9690:	b5f0      	push	{r4, r5, r6, r7, lr}
    9692:	b08b      	sub	sp, #44	; 0x2c
    9694:	af00      	add	r7, sp, #0
	if (ucharPhase_Seq_Check_Flag==1)
    9696:	4b77      	ldr	r3, [pc, #476]	; (9874 <PR2_ISR+0x1e4>)
    9698:	781b      	ldrb	r3, [r3, #0]
    969a:	b2db      	uxtb	r3, r3
    969c:	2b01      	cmp	r3, #1
    969e:	d000      	beq.n	96a2 <PR2_ISR+0x12>
    96a0:	e0e3      	b.n	986a <PR2_ISR+0x1da>
	{
		ucharPhase_1_Timer_Counter=0;
    96a2:	4b75      	ldr	r3, [pc, #468]	; (9878 <PR2_ISR+0x1e8>)
    96a4:	2200      	movs	r2, #0
    96a6:	701a      	strb	r2, [r3, #0]
		delay_ms(5);
    96a8:	2000      	movs	r0, #0
    96aa:	4b74      	ldr	r3, [pc, #464]	; (987c <PR2_ISR+0x1ec>)
    96ac:	4798      	blx	r3
    96ae:	0003      	movs	r3, r0
    96b0:	60bb      	str	r3, [r7, #8]
    96b2:	2300      	movs	r3, #0
    96b4:	60fb      	str	r3, [r7, #12]
    96b6:	68bb      	ldr	r3, [r7, #8]
    96b8:	68fc      	ldr	r4, [r7, #12]
    96ba:	0f9a      	lsrs	r2, r3, #30
    96bc:	00a0      	lsls	r0, r4, #2
    96be:	61f8      	str	r0, [r7, #28]
    96c0:	69f8      	ldr	r0, [r7, #28]
    96c2:	4310      	orrs	r0, r2
    96c4:	61f8      	str	r0, [r7, #28]
    96c6:	009b      	lsls	r3, r3, #2
    96c8:	61bb      	str	r3, [r7, #24]
    96ca:	69bb      	ldr	r3, [r7, #24]
    96cc:	69fc      	ldr	r4, [r7, #28]
    96ce:	68b9      	ldr	r1, [r7, #8]
    96d0:	68fa      	ldr	r2, [r7, #12]
    96d2:	185b      	adds	r3, r3, r1
    96d4:	4154      	adcs	r4, r2
    96d6:	496a      	ldr	r1, [pc, #424]	; (9880 <PR2_ISR+0x1f0>)
    96d8:	2200      	movs	r2, #0
    96da:	185b      	adds	r3, r3, r1
    96dc:	4154      	adcs	r4, r2
    96de:	0018      	movs	r0, r3
    96e0:	0021      	movs	r1, r4
    96e2:	4c68      	ldr	r4, [pc, #416]	; (9884 <PR2_ISR+0x1f4>)
    96e4:	4a68      	ldr	r2, [pc, #416]	; (9888 <PR2_ISR+0x1f8>)
    96e6:	2300      	movs	r3, #0
    96e8:	47a0      	blx	r4
    96ea:	0003      	movs	r3, r0
    96ec:	000c      	movs	r4, r1
    96ee:	0018      	movs	r0, r3
    96f0:	4b66      	ldr	r3, [pc, #408]	; (988c <PR2_ISR+0x1fc>)
    96f2:	4798      	blx	r3
		volatile unsigned char ucharHigh_Flag=0,ucharLow_Flag=0,ucharHigh_To_Low_Flag=0,ucharLow_To_High_Flag=0;
    96f4:	2323      	movs	r3, #35	; 0x23
    96f6:	18fb      	adds	r3, r7, r3
    96f8:	2200      	movs	r2, #0
    96fa:	701a      	strb	r2, [r3, #0]
    96fc:	2322      	movs	r3, #34	; 0x22
    96fe:	18fb      	adds	r3, r7, r3
    9700:	2200      	movs	r2, #0
    9702:	701a      	strb	r2, [r3, #0]
    9704:	2321      	movs	r3, #33	; 0x21
    9706:	18fb      	adds	r3, r7, r3
    9708:	2200      	movs	r2, #0
    970a:	701a      	strb	r2, [r3, #0]
    970c:	2320      	movs	r3, #32
    970e:	18fb      	adds	r3, r7, r3
    9710:	2200      	movs	r2, #0
    9712:	701a      	strb	r2, [r3, #0]
		if (port_pin_get_input_level(PR2_PIN)==HIGH)
    9714:	202b      	movs	r0, #43	; 0x2b
    9716:	4b5e      	ldr	r3, [pc, #376]	; (9890 <PR2_ISR+0x200>)
    9718:	4798      	blx	r3
    971a:	1e03      	subs	r3, r0, #0
    971c:	d100      	bne.n	9720 <PR2_ISR+0x90>
    971e:	e08e      	b.n	983e <PR2_ISR+0x1ae>
		{
			for (unsigned int uintLoop=0;uintLoop<120;uintLoop++)
    9720:	2300      	movs	r3, #0
    9722:	627b      	str	r3, [r7, #36]	; 0x24
    9724:	e085      	b.n	9832 <PR2_ISR+0x1a2>
			{
				delay_us(25);
    9726:	2000      	movs	r0, #0
    9728:	4b54      	ldr	r3, [pc, #336]	; (987c <PR2_ISR+0x1ec>)
    972a:	4798      	blx	r3
    972c:	0003      	movs	r3, r0
    972e:	603b      	str	r3, [r7, #0]
    9730:	2300      	movs	r3, #0
    9732:	607b      	str	r3, [r7, #4]
    9734:	6838      	ldr	r0, [r7, #0]
    9736:	6879      	ldr	r1, [r7, #4]
    9738:	0003      	movs	r3, r0
    973a:	000c      	movs	r4, r1
    973c:	0f9a      	lsrs	r2, r3, #30
    973e:	00a6      	lsls	r6, r4, #2
    9740:	4316      	orrs	r6, r2
    9742:	009d      	lsls	r5, r3, #2
    9744:	0003      	movs	r3, r0
    9746:	000c      	movs	r4, r1
    9748:	195b      	adds	r3, r3, r5
    974a:	4174      	adcs	r4, r6
    974c:	0f9a      	lsrs	r2, r3, #30
    974e:	00a1      	lsls	r1, r4, #2
    9750:	6179      	str	r1, [r7, #20]
    9752:	6979      	ldr	r1, [r7, #20]
    9754:	4311      	orrs	r1, r2
    9756:	6179      	str	r1, [r7, #20]
    9758:	009a      	lsls	r2, r3, #2
    975a:	613a      	str	r2, [r7, #16]
    975c:	6939      	ldr	r1, [r7, #16]
    975e:	697a      	ldr	r2, [r7, #20]
    9760:	185b      	adds	r3, r3, r1
    9762:	4154      	adcs	r4, r2
    9764:	494b      	ldr	r1, [pc, #300]	; (9894 <PR2_ISR+0x204>)
    9766:	2200      	movs	r2, #0
    9768:	185b      	adds	r3, r3, r1
    976a:	4154      	adcs	r4, r2
    976c:	0018      	movs	r0, r3
    976e:	0021      	movs	r1, r4
    9770:	4c44      	ldr	r4, [pc, #272]	; (9884 <PR2_ISR+0x1f4>)
    9772:	4a49      	ldr	r2, [pc, #292]	; (9898 <PR2_ISR+0x208>)
    9774:	2300      	movs	r3, #0
    9776:	47a0      	blx	r4
    9778:	0003      	movs	r3, r0
    977a:	000c      	movs	r4, r1
    977c:	0018      	movs	r0, r3
    977e:	4b43      	ldr	r3, [pc, #268]	; (988c <PR2_ISR+0x1fc>)
    9780:	4798      	blx	r3
				if ((port_pin_get_input_level(PR1_PIN)==HIGH)&&(ucharHigh_Flag==0))
    9782:	202a      	movs	r0, #42	; 0x2a
    9784:	4b42      	ldr	r3, [pc, #264]	; (9890 <PR2_ISR+0x200>)
    9786:	4798      	blx	r3
    9788:	1e03      	subs	r3, r0, #0
    978a:	d014      	beq.n	97b6 <PR2_ISR+0x126>
    978c:	2323      	movs	r3, #35	; 0x23
    978e:	18fb      	adds	r3, r7, r3
    9790:	781b      	ldrb	r3, [r3, #0]
    9792:	b2db      	uxtb	r3, r3
    9794:	2b00      	cmp	r3, #0
    9796:	d10e      	bne.n	97b6 <PR2_ISR+0x126>
				{
					ucharHigh_Flag=1;
    9798:	2323      	movs	r3, #35	; 0x23
    979a:	18fb      	adds	r3, r7, r3
    979c:	2201      	movs	r2, #1
    979e:	701a      	strb	r2, [r3, #0]
					if (ucharLow_Flag==1)
    97a0:	2322      	movs	r3, #34	; 0x22
    97a2:	18fb      	adds	r3, r7, r3
    97a4:	781b      	ldrb	r3, [r3, #0]
    97a6:	b2db      	uxtb	r3, r3
    97a8:	2b01      	cmp	r3, #1
    97aa:	d104      	bne.n	97b6 <PR2_ISR+0x126>
					{
						ucharLow_To_High_Flag=1;
    97ac:	2320      	movs	r3, #32
    97ae:	18fb      	adds	r3, r7, r3
    97b0:	2201      	movs	r2, #1
    97b2:	701a      	strb	r2, [r3, #0]
						break;
    97b4:	e043      	b.n	983e <PR2_ISR+0x1ae>
					}
				}
				if ((port_pin_get_input_level(PR1_PIN)==LOW)&&(ucharLow_Flag==0))
    97b6:	202a      	movs	r0, #42	; 0x2a
    97b8:	4b35      	ldr	r3, [pc, #212]	; (9890 <PR2_ISR+0x200>)
    97ba:	4798      	blx	r3
    97bc:	0003      	movs	r3, r0
    97be:	001a      	movs	r2, r3
    97c0:	2301      	movs	r3, #1
    97c2:	4053      	eors	r3, r2
    97c4:	b2db      	uxtb	r3, r3
    97c6:	2b00      	cmp	r3, #0
    97c8:	d013      	beq.n	97f2 <PR2_ISR+0x162>
    97ca:	2322      	movs	r3, #34	; 0x22
    97cc:	18fb      	adds	r3, r7, r3
    97ce:	781b      	ldrb	r3, [r3, #0]
    97d0:	b2db      	uxtb	r3, r3
    97d2:	2b00      	cmp	r3, #0
    97d4:	d10d      	bne.n	97f2 <PR2_ISR+0x162>
				{
					ucharLow_Flag=1;
    97d6:	2322      	movs	r3, #34	; 0x22
    97d8:	18fb      	adds	r3, r7, r3
    97da:	2201      	movs	r2, #1
    97dc:	701a      	strb	r2, [r3, #0]
					if (ucharHigh_Flag==1)
    97de:	2323      	movs	r3, #35	; 0x23
    97e0:	18fb      	adds	r3, r7, r3
    97e2:	781b      	ldrb	r3, [r3, #0]
    97e4:	b2db      	uxtb	r3, r3
    97e6:	2b01      	cmp	r3, #1
    97e8:	d103      	bne.n	97f2 <PR2_ISR+0x162>
					{
						ucharHigh_To_Low_Flag=1;
    97ea:	2321      	movs	r3, #33	; 0x21
    97ec:	18fb      	adds	r3, r7, r3
    97ee:	2201      	movs	r2, #1
    97f0:	701a      	strb	r2, [r3, #0]
					}
				}
				if (ucharHigh_To_Low_Flag==1)
    97f2:	2321      	movs	r3, #33	; 0x21
    97f4:	18fb      	adds	r3, r7, r3
    97f6:	781b      	ldrb	r3, [r3, #0]
    97f8:	b2db      	uxtb	r3, r3
    97fa:	2b01      	cmp	r3, #1
    97fc:	d10c      	bne.n	9818 <PR2_ISR+0x188>
				{
					// LCD takes data from structThreePhase_state, which should have latest sequence data.
					structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_OK;
    97fe:	4b27      	ldr	r3, [pc, #156]	; (989c <PR2_ISR+0x20c>)
    9800:	2202      	movs	r2, #2
    9802:	701a      	strb	r2, [r3, #0]
					ucharPhase_Seq_Err_Flag=2;//0=undefined, 1=error, 2=ok
    9804:	4b26      	ldr	r3, [pc, #152]	; (98a0 <PR2_ISR+0x210>)
    9806:	2202      	movs	r2, #2
    9808:	701a      	strb	r2, [r3, #0]
					ucharPhase_Seq_Err_Counter=0;
    980a:	4b26      	ldr	r3, [pc, #152]	; (98a4 <PR2_ISR+0x214>)
    980c:	2200      	movs	r2, #0
    980e:	701a      	strb	r2, [r3, #0]
					ucharPhase_Seq_Check_Flag=0;
    9810:	4b18      	ldr	r3, [pc, #96]	; (9874 <PR2_ISR+0x1e4>)
    9812:	2200      	movs	r2, #0
    9814:	701a      	strb	r2, [r3, #0]
					break;
    9816:	e012      	b.n	983e <PR2_ISR+0x1ae>
				}
				if ((port_pin_get_input_level(PR2_PIN)==LOW))
    9818:	202b      	movs	r0, #43	; 0x2b
    981a:	4b1d      	ldr	r3, [pc, #116]	; (9890 <PR2_ISR+0x200>)
    981c:	4798      	blx	r3
    981e:	0003      	movs	r3, r0
    9820:	001a      	movs	r2, r3
    9822:	2301      	movs	r3, #1
    9824:	4053      	eors	r3, r2
    9826:	b2db      	uxtb	r3, r3
    9828:	2b00      	cmp	r3, #0
    982a:	d107      	bne.n	983c <PR2_ISR+0x1ac>
			for (unsigned int uintLoop=0;uintLoop<120;uintLoop++)
    982c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    982e:	3301      	adds	r3, #1
    9830:	627b      	str	r3, [r7, #36]	; 0x24
    9832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9834:	2b77      	cmp	r3, #119	; 0x77
    9836:	d800      	bhi.n	983a <PR2_ISR+0x1aa>
    9838:	e775      	b.n	9726 <PR2_ISR+0x96>
    983a:	e000      	b.n	983e <PR2_ISR+0x1ae>
				{
					break;
    983c:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
		if (++ucharPhase_Seq_Err_Counter>2)
    983e:	4b19      	ldr	r3, [pc, #100]	; (98a4 <PR2_ISR+0x214>)
    9840:	781b      	ldrb	r3, [r3, #0]
    9842:	b2db      	uxtb	r3, r3
    9844:	3301      	adds	r3, #1
    9846:	b2db      	uxtb	r3, r3
    9848:	4a16      	ldr	r2, [pc, #88]	; (98a4 <PR2_ISR+0x214>)
    984a:	1c19      	adds	r1, r3, #0
    984c:	7011      	strb	r1, [r2, #0]
    984e:	2b02      	cmp	r3, #2
    9850:	d90b      	bls.n	986a <PR2_ISR+0x1da>
		{
			ucharPhase_Seq_Err_Counter=0;
    9852:	4b14      	ldr	r3, [pc, #80]	; (98a4 <PR2_ISR+0x214>)
    9854:	2200      	movs	r2, #0
    9856:	701a      	strb	r2, [r3, #0]
			structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_ERROR;
    9858:	4b10      	ldr	r3, [pc, #64]	; (989c <PR2_ISR+0x20c>)
    985a:	2201      	movs	r2, #1
    985c:	701a      	strb	r2, [r3, #0]
			ucharPhase_Seq_Err_Flag=1;//0=undefined, 1=error, 2=ok
    985e:	4b10      	ldr	r3, [pc, #64]	; (98a0 <PR2_ISR+0x210>)
    9860:	2201      	movs	r2, #1
    9862:	701a      	strb	r2, [r3, #0]
			ucharPhase_Seq_Check_Flag=0;
    9864:	4b03      	ldr	r3, [pc, #12]	; (9874 <PR2_ISR+0x1e4>)
    9866:	2200      	movs	r2, #0
    9868:	701a      	strb	r2, [r3, #0]
		}
	}
}
    986a:	46c0      	nop			; (mov r8, r8)
    986c:	46bd      	mov	sp, r7
    986e:	b00b      	add	sp, #44	; 0x2c
    9870:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9872:	46c0      	nop			; (mov r8, r8)
    9874:	2000000c 	.word	0x2000000c
    9878:	20000238 	.word	0x20000238
    987c:	000136d5 	.word	0x000136d5
    9880:	00001b57 	.word	0x00001b57
    9884:	00015649 	.word	0x00015649
    9888:	00001b58 	.word	0x00001b58
    988c:	20000001 	.word	0x20000001
    9890:	00008769 	.word	0x00008769
    9894:	006acfbf 	.word	0x006acfbf
    9898:	006acfc0 	.word	0x006acfc0
    989c:	20000710 	.word	0x20000710
    98a0:	20000234 	.word	0x20000234
    98a4:	20000235 	.word	0x20000235

000098a8 <vTask_10ms_Timer>:

static void vTask_10ms_Timer(void *params)
{
    98a8:	b580      	push	{r7, lr}
    98aa:	b084      	sub	sp, #16
    98ac:	af00      	add	r7, sp, #0
    98ae:	6078      	str	r0, [r7, #4]
	TickType_t xLastExecutionGsm_Send_Time;
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
    98b0:	4b12      	ldr	r3, [pc, #72]	; (98fc <vTask_10ms_Timer+0x54>)
    98b2:	4798      	blx	r3
    98b4:	0003      	movs	r3, r0
    98b6:	60fb      	str	r3, [r7, #12]
	//--------------------------------
	for( ;; )
	{
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (10/portTICK_PERIOD_MS));
    98b8:	230c      	movs	r3, #12
    98ba:	18fb      	adds	r3, r7, r3
    98bc:	210a      	movs	r1, #10
    98be:	0018      	movs	r0, r3
    98c0:	4b0f      	ldr	r3, [pc, #60]	; (9900 <vTask_10ms_Timer+0x58>)
    98c2:	4798      	blx	r3
		if(ucharPhase_Seq_Check_Flag==1)
    98c4:	4b0f      	ldr	r3, [pc, #60]	; (9904 <vTask_10ms_Timer+0x5c>)
    98c6:	781b      	ldrb	r3, [r3, #0]
    98c8:	b2db      	uxtb	r3, r3
    98ca:	2b01      	cmp	r3, #1
    98cc:	d1f4      	bne.n	98b8 <vTask_10ms_Timer+0x10>
		{
			if(++ucharPhase_1_Timer_Counter>=20)
    98ce:	4b0e      	ldr	r3, [pc, #56]	; (9908 <vTask_10ms_Timer+0x60>)
    98d0:	781b      	ldrb	r3, [r3, #0]
    98d2:	3301      	adds	r3, #1
    98d4:	b2da      	uxtb	r2, r3
    98d6:	4b0c      	ldr	r3, [pc, #48]	; (9908 <vTask_10ms_Timer+0x60>)
    98d8:	701a      	strb	r2, [r3, #0]
    98da:	4b0b      	ldr	r3, [pc, #44]	; (9908 <vTask_10ms_Timer+0x60>)
    98dc:	781b      	ldrb	r3, [r3, #0]
    98de:	2b13      	cmp	r3, #19
    98e0:	d9ea      	bls.n	98b8 <vTask_10ms_Timer+0x10>
			{
				ucharPhase_1_Timer_Counter=0;
    98e2:	4b09      	ldr	r3, [pc, #36]	; (9908 <vTask_10ms_Timer+0x60>)
    98e4:	2200      	movs	r2, #0
    98e6:	701a      	strb	r2, [r3, #0]
				structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_ERROR;
    98e8:	4b08      	ldr	r3, [pc, #32]	; (990c <vTask_10ms_Timer+0x64>)
    98ea:	2201      	movs	r2, #1
    98ec:	701a      	strb	r2, [r3, #0]
				ucharPhase_Seq_Err_Flag=1;//0=undefined, 1=error, 2=ok
    98ee:	4b08      	ldr	r3, [pc, #32]	; (9910 <vTask_10ms_Timer+0x68>)
    98f0:	2201      	movs	r2, #1
    98f2:	701a      	strb	r2, [r3, #0]
				ucharPhase_Seq_Check_Flag=0;
    98f4:	4b03      	ldr	r3, [pc, #12]	; (9904 <vTask_10ms_Timer+0x5c>)
    98f6:	2200      	movs	r2, #0
    98f8:	701a      	strb	r2, [r3, #0]
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (10/portTICK_PERIOD_MS));
    98fa:	e7dd      	b.n	98b8 <vTask_10ms_Timer+0x10>
    98fc:	0000f1fd 	.word	0x0000f1fd
    9900:	0000edd1 	.word	0x0000edd1
    9904:	2000000c 	.word	0x2000000c
    9908:	20000238 	.word	0x20000238
    990c:	20000710 	.word	0x20000710
    9910:	20000234 	.word	0x20000234

00009914 <vTask_100ms_Timer>:
		}
	}
}

static void vTask_100ms_Timer(void *params)
{
    9914:	b580      	push	{r7, lr}
    9916:	b084      	sub	sp, #16
    9918:	af00      	add	r7, sp, #0
    991a:	6078      	str	r0, [r7, #4]
	TickType_t xLastExecutionGsm_Send_Time;
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
    991c:	4b17      	ldr	r3, [pc, #92]	; (997c <vTask_100ms_Timer+0x68>)
    991e:	4798      	blx	r3
    9920:	0003      	movs	r3, r0
    9922:	60fb      	str	r3, [r7, #12]
	//--------------------------------
	for( ;; )
	{
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (100/portTICK_PERIOD_MS));
    9924:	230c      	movs	r3, #12
    9926:	18fb      	adds	r3, r7, r3
    9928:	2164      	movs	r1, #100	; 0x64
    992a:	0018      	movs	r0, r3
    992c:	4b14      	ldr	r3, [pc, #80]	; (9980 <vTask_100ms_Timer+0x6c>)
    992e:	4798      	blx	r3
		
		////////
		//Voltaqe Detect Timer Counter, Reset every 500ms to 0, which triggers the New Voltage Reading Acquisition from ADC.
		if(ucharVoltage_Detect_Timer_Counter++>4)
    9930:	4b14      	ldr	r3, [pc, #80]	; (9984 <vTask_100ms_Timer+0x70>)
    9932:	781b      	ldrb	r3, [r3, #0]
    9934:	b2db      	uxtb	r3, r3
    9936:	1c5a      	adds	r2, r3, #1
    9938:	b2d1      	uxtb	r1, r2
    993a:	4a12      	ldr	r2, [pc, #72]	; (9984 <vTask_100ms_Timer+0x70>)
    993c:	7011      	strb	r1, [r2, #0]
    993e:	2b04      	cmp	r3, #4
    9940:	d905      	bls.n	994e <vTask_100ms_Timer+0x3a>
		{
			ucharVoltage_Detect_Timer_Counter=0;
    9942:	4b10      	ldr	r3, [pc, #64]	; (9984 <vTask_100ms_Timer+0x70>)
    9944:	2200      	movs	r2, #0
    9946:	701a      	strb	r2, [r3, #0]
			//Add Flag to enable detection of current, as the Voltage Detect Timer Counter won't be 0, as voltage reading takes 100ms Time.
			ucharCurrent_Detect_Flag=1;
    9948:	4b0f      	ldr	r3, [pc, #60]	; (9988 <vTask_100ms_Timer+0x74>)
    994a:	2201      	movs	r2, #1
    994c:	701a      	strb	r2, [r3, #0]
			
		}
		/////////
		if (ucharPhase_Seq_Timer_Counter++>4)
    994e:	4b0f      	ldr	r3, [pc, #60]	; (998c <vTask_100ms_Timer+0x78>)
    9950:	781b      	ldrb	r3, [r3, #0]
    9952:	b2db      	uxtb	r3, r3
    9954:	1c5a      	adds	r2, r3, #1
    9956:	b2d1      	uxtb	r1, r2
    9958:	4a0c      	ldr	r2, [pc, #48]	; (998c <vTask_100ms_Timer+0x78>)
    995a:	7011      	strb	r1, [r2, #0]
    995c:	2b04      	cmp	r3, #4
    995e:	d9e1      	bls.n	9924 <vTask_100ms_Timer+0x10>
		{
			ucharPhase_Seq_Timer_Counter=0;
    9960:	4b0a      	ldr	r3, [pc, #40]	; (998c <vTask_100ms_Timer+0x78>)
    9962:	2200      	movs	r2, #0
    9964:	701a      	strb	r2, [r3, #0]
			ucharPhase_Seq_Check_Flag=1;//0=not check, 1=Check
    9966:	4b0a      	ldr	r3, [pc, #40]	; (9990 <vTask_100ms_Timer+0x7c>)
    9968:	2201      	movs	r2, #1
    996a:	701a      	strb	r2, [r3, #0]
			ucharPhase_1_Timer_Counter=0;
    996c:	4b09      	ldr	r3, [pc, #36]	; (9994 <vTask_100ms_Timer+0x80>)
    996e:	2200      	movs	r2, #0
    9970:	701a      	strb	r2, [r3, #0]
			extint_chan_clear_detected(11);
    9972:	200b      	movs	r0, #11
    9974:	4b08      	ldr	r3, [pc, #32]	; (9998 <vTask_100ms_Timer+0x84>)
    9976:	4798      	blx	r3
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (100/portTICK_PERIOD_MS));
    9978:	e7d4      	b.n	9924 <vTask_100ms_Timer+0x10>
    997a:	46c0      	nop			; (mov r8, r8)
    997c:	0000f1fd 	.word	0x0000f1fd
    9980:	0000edd1 	.word	0x0000edd1
    9984:	2000000d 	.word	0x2000000d
    9988:	20000237 	.word	0x20000237
    998c:	20000236 	.word	0x20000236
    9990:	2000000c 	.word	0x2000000c
    9994:	20000238 	.word	0x20000238
    9998:	0000884d 	.word	0x0000884d

0000999c <should_Detect_New_Voltage>:
		}
	}
}

//Function to check if new Voltage reading should be acquired from the ADC, by checking the timer Variable for reading Voltage with 0.
bool should_Detect_New_Voltage(void) {
    999c:	b580      	push	{r7, lr}
    999e:	af00      	add	r7, sp, #0
	return (ucharVoltage_Detect_Timer_Counter == 0);
    99a0:	4b04      	ldr	r3, [pc, #16]	; (99b4 <should_Detect_New_Voltage+0x18>)
    99a2:	781b      	ldrb	r3, [r3, #0]
    99a4:	b2db      	uxtb	r3, r3
    99a6:	425a      	negs	r2, r3
    99a8:	4153      	adcs	r3, r2
    99aa:	b2db      	uxtb	r3, r3
}
    99ac:	0018      	movs	r0, r3
    99ae:	46bd      	mov	sp, r7
    99b0:	bd80      	pop	{r7, pc}
    99b2:	46c0      	nop			; (mov r8, r8)
    99b4:	2000000d 	.word	0x2000000d

000099b8 <detect_battery_voltage_and_percentage>:

void detect_battery_voltage_and_percentage(void)
{
    99b8:	b590      	push	{r4, r7, lr}
    99ba:	b083      	sub	sp, #12
    99bc:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
    99be:	4b25      	ldr	r3, [pc, #148]	; (9a54 <detect_battery_voltage_and_percentage+0x9c>)
    99c0:	681a      	ldr	r2, [r3, #0]
    99c2:	2301      	movs	r3, #1
    99c4:	425b      	negs	r3, r3
    99c6:	0019      	movs	r1, r3
    99c8:	0010      	movs	r0, r2
    99ca:	4b23      	ldr	r3, [pc, #140]	; (9a58 <detect_battery_voltage_and_percentage+0xa0>)
    99cc:	4798      	blx	r3
    99ce:	0003      	movs	r3, r0
    99d0:	2b01      	cmp	r3, #1
    99d2:	d13b      	bne.n	9a4c <detect_battery_voltage_and_percentage+0x94>
	{
		uint32_t bat_v = Read_ADC0(ADC_POSITIVE_INPUT_PIN7,200);
    99d4:	21c8      	movs	r1, #200	; 0xc8
    99d6:	2007      	movs	r0, #7
    99d8:	4b20      	ldr	r3, [pc, #128]	; (9a5c <detect_battery_voltage_and_percentage+0xa4>)
    99da:	4798      	blx	r3
    99dc:	0003      	movs	r3, r0
    99de:	603b      	str	r3, [r7, #0]
		Analog_Parameter_Struct.Battery_Voltage = (bat_v * 1457)/1000;
    99e0:	683b      	ldr	r3, [r7, #0]
    99e2:	4a1f      	ldr	r2, [pc, #124]	; (9a60 <detect_battery_voltage_and_percentage+0xa8>)
    99e4:	435a      	muls	r2, r3
    99e6:	0010      	movs	r0, r2
    99e8:	4b1e      	ldr	r3, [pc, #120]	; (9a64 <detect_battery_voltage_and_percentage+0xac>)
    99ea:	22fa      	movs	r2, #250	; 0xfa
    99ec:	0091      	lsls	r1, r2, #2
    99ee:	4798      	blx	r3
    99f0:	0003      	movs	r3, r0
    99f2:	001a      	movs	r2, r3
    99f4:	4b1c      	ldr	r3, [pc, #112]	; (9a68 <detect_battery_voltage_and_percentage+0xb0>)
    99f6:	619a      	str	r2, [r3, #24]
		uint8_t bat_per = 0;
    99f8:	1dfb      	adds	r3, r7, #7
    99fa:	2200      	movs	r2, #0
    99fc:	701a      	strb	r2, [r3, #0]
		
		if (Analog_Parameter_Struct.Battery_Voltage <= 3300)
    99fe:	4b1a      	ldr	r3, [pc, #104]	; (9a68 <detect_battery_voltage_and_percentage+0xb0>)
    9a00:	699b      	ldr	r3, [r3, #24]
    9a02:	4a1a      	ldr	r2, [pc, #104]	; (9a6c <detect_battery_voltage_and_percentage+0xb4>)
    9a04:	4293      	cmp	r3, r2
    9a06:	d803      	bhi.n	9a10 <detect_battery_voltage_and_percentage+0x58>
		{
			bat_per = 0;
    9a08:	1dfb      	adds	r3, r7, #7
    9a0a:	2200      	movs	r2, #0
    9a0c:	701a      	strb	r2, [r3, #0]
    9a0e:	e012      	b.n	9a36 <detect_battery_voltage_and_percentage+0x7e>
		}
		else
		{
			//bat_per = ((((float)Analog_Parameter_Struct.Battery_Voltage/1000)-3.3)*100)/0.9;
			bat_per = (Analog_Parameter_Struct.Battery_Voltage-3300)/9;
    9a10:	4b15      	ldr	r3, [pc, #84]	; (9a68 <detect_battery_voltage_and_percentage+0xb0>)
    9a12:	699b      	ldr	r3, [r3, #24]
    9a14:	4a16      	ldr	r2, [pc, #88]	; (9a70 <detect_battery_voltage_and_percentage+0xb8>)
    9a16:	189a      	adds	r2, r3, r2
    9a18:	4b12      	ldr	r3, [pc, #72]	; (9a64 <detect_battery_voltage_and_percentage+0xac>)
    9a1a:	2109      	movs	r1, #9
    9a1c:	0010      	movs	r0, r2
    9a1e:	4798      	blx	r3
    9a20:	0003      	movs	r3, r0
    9a22:	001a      	movs	r2, r3
    9a24:	1dfb      	adds	r3, r7, #7
    9a26:	701a      	strb	r2, [r3, #0]
			if (bat_per>100) bat_per=100;
    9a28:	1dfb      	adds	r3, r7, #7
    9a2a:	781b      	ldrb	r3, [r3, #0]
    9a2c:	2b64      	cmp	r3, #100	; 0x64
    9a2e:	d902      	bls.n	9a36 <detect_battery_voltage_and_percentage+0x7e>
    9a30:	1dfb      	adds	r3, r7, #7
    9a32:	2264      	movs	r2, #100	; 0x64
    9a34:	701a      	strb	r2, [r3, #0]
		}
		
		Analog_Parameter_Struct.Battery_percentage = bat_per;
    9a36:	4b0c      	ldr	r3, [pc, #48]	; (9a68 <detect_battery_voltage_and_percentage+0xb0>)
    9a38:	1dfa      	adds	r2, r7, #7
    9a3a:	7812      	ldrb	r2, [r2, #0]
    9a3c:	771a      	strb	r2, [r3, #28]
		
		xSemaphoreGive(xADC_Semaphore);
    9a3e:	4b05      	ldr	r3, [pc, #20]	; (9a54 <detect_battery_voltage_and_percentage+0x9c>)
    9a40:	6818      	ldr	r0, [r3, #0]
    9a42:	2300      	movs	r3, #0
    9a44:	2200      	movs	r2, #0
    9a46:	2100      	movs	r1, #0
    9a48:	4c0a      	ldr	r4, [pc, #40]	; (9a74 <detect_battery_voltage_and_percentage+0xbc>)
    9a4a:	47a0      	blx	r4
	}
}
    9a4c:	46c0      	nop			; (mov r8, r8)
    9a4e:	46bd      	mov	sp, r7
    9a50:	b003      	add	sp, #12
    9a52:	bd90      	pop	{r4, r7, pc}
    9a54:	20000230 	.word	0x20000230
    9a58:	0000e591 	.word	0x0000e591
    9a5c:	00009261 	.word	0x00009261
    9a60:	000005b1 	.word	0x000005b1
    9a64:	000152e1 	.word	0x000152e1
    9a68:	200006cc 	.word	0x200006cc
    9a6c:	00000ce4 	.word	0x00000ce4
    9a70:	fffff31c 	.word	0xfffff31c
    9a74:	0000e0f1 	.word	0x0000e0f1

00009a78 <detect_Three_Phase_Voltage>:

//Function to save the 3 phase voltage from ADC in to the structure, ADC values are filtered, and multiplied by factor here.
void detect_Three_Phase_Voltage(void) {
    9a78:	b590      	push	{r4, r7, lr}
    9a7a:	b085      	sub	sp, #20
    9a7c:	af00      	add	r7, sp, #0
	
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
    9a7e:	4b3d      	ldr	r3, [pc, #244]	; (9b74 <detect_Three_Phase_Voltage+0xfc>)
    9a80:	681a      	ldr	r2, [r3, #0]
    9a82:	2301      	movs	r3, #1
    9a84:	425b      	negs	r3, r3
    9a86:	0019      	movs	r1, r3
    9a88:	0010      	movs	r0, r2
    9a8a:	4b3b      	ldr	r3, [pc, #236]	; (9b78 <detect_Three_Phase_Voltage+0x100>)
    9a8c:	4798      	blx	r3
    9a8e:	0003      	movs	r3, r0
    9a90:	2b01      	cmp	r3, #1
    9a92:	d16b      	bne.n	9b6c <detect_Three_Phase_Voltage+0xf4>
	{
		//int32_t adcRY = Read_ADC0(ADC_POSITIVE_INPUT_PIN19,2000);
		int32_t adcRY = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN19);
    9a94:	2013      	movs	r0, #19
    9a96:	4b39      	ldr	r3, [pc, #228]	; (9b7c <detect_Three_Phase_Voltage+0x104>)
    9a98:	4798      	blx	r3
    9a9a:	0003      	movs	r3, r0
    9a9c:	60fb      	str	r3, [r7, #12]
		adcRY = (adcRY-10);
    9a9e:	68fb      	ldr	r3, [r7, #12]
    9aa0:	3b0a      	subs	r3, #10
    9aa2:	60fb      	str	r3, [r7, #12]
		if (adcRY<0)
    9aa4:	68fb      	ldr	r3, [r7, #12]
    9aa6:	2b00      	cmp	r3, #0
    9aa8:	da02      	bge.n	9ab0 <detect_Three_Phase_Voltage+0x38>
		{
			adcRY = 0;
    9aaa:	2300      	movs	r3, #0
    9aac:	60fb      	str	r3, [r7, #12]
    9aae:	e00f      	b.n	9ad0 <detect_Three_Phase_Voltage+0x58>
		}
		else
		{
			adcRY = (((adcRY-10)*655)/1000);
    9ab0:	68fb      	ldr	r3, [r7, #12]
    9ab2:	3b0a      	subs	r3, #10
    9ab4:	4a32      	ldr	r2, [pc, #200]	; (9b80 <detect_Three_Phase_Voltage+0x108>)
    9ab6:	435a      	muls	r2, r3
    9ab8:	0010      	movs	r0, r2
    9aba:	4b32      	ldr	r3, [pc, #200]	; (9b84 <detect_Three_Phase_Voltage+0x10c>)
    9abc:	22fa      	movs	r2, #250	; 0xfa
    9abe:	0091      	lsls	r1, r2, #2
    9ac0:	4798      	blx	r3
    9ac2:	0003      	movs	r3, r0
    9ac4:	60fb      	str	r3, [r7, #12]
			if (adcRY<0)
    9ac6:	68fb      	ldr	r3, [r7, #12]
    9ac8:	2b00      	cmp	r3, #0
    9aca:	da01      	bge.n	9ad0 <detect_Three_Phase_Voltage+0x58>
			{
				adcRY = 0;
    9acc:	2300      	movs	r3, #0
    9ace:	60fb      	str	r3, [r7, #12]
			}
		}
		
		//int32_t adcYB = Read_ADC0(ADC_POSITIVE_INPUT_PIN18,2000);
		int32_t adcYB = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN18);
    9ad0:	2012      	movs	r0, #18
    9ad2:	4b2a      	ldr	r3, [pc, #168]	; (9b7c <detect_Three_Phase_Voltage+0x104>)
    9ad4:	4798      	blx	r3
    9ad6:	0003      	movs	r3, r0
    9ad8:	60bb      	str	r3, [r7, #8]
		adcYB = (adcYB-10);
    9ada:	68bb      	ldr	r3, [r7, #8]
    9adc:	3b0a      	subs	r3, #10
    9ade:	60bb      	str	r3, [r7, #8]
		if (adcYB<0)
    9ae0:	68bb      	ldr	r3, [r7, #8]
    9ae2:	2b00      	cmp	r3, #0
    9ae4:	da02      	bge.n	9aec <detect_Three_Phase_Voltage+0x74>
		{
			adcYB = 0;
    9ae6:	2300      	movs	r3, #0
    9ae8:	60bb      	str	r3, [r7, #8]
    9aea:	e00f      	b.n	9b0c <detect_Three_Phase_Voltage+0x94>
		}
		else
		{
			adcYB = (((adcYB-10)*655)/1000);
    9aec:	68bb      	ldr	r3, [r7, #8]
    9aee:	3b0a      	subs	r3, #10
    9af0:	4a23      	ldr	r2, [pc, #140]	; (9b80 <detect_Three_Phase_Voltage+0x108>)
    9af2:	435a      	muls	r2, r3
    9af4:	0010      	movs	r0, r2
    9af6:	4b23      	ldr	r3, [pc, #140]	; (9b84 <detect_Three_Phase_Voltage+0x10c>)
    9af8:	22fa      	movs	r2, #250	; 0xfa
    9afa:	0091      	lsls	r1, r2, #2
    9afc:	4798      	blx	r3
    9afe:	0003      	movs	r3, r0
    9b00:	60bb      	str	r3, [r7, #8]
			if (adcYB<0)
    9b02:	68bb      	ldr	r3, [r7, #8]
    9b04:	2b00      	cmp	r3, #0
    9b06:	da01      	bge.n	9b0c <detect_Three_Phase_Voltage+0x94>
			{
				adcYB = 0;
    9b08:	2300      	movs	r3, #0
    9b0a:	60bb      	str	r3, [r7, #8]
			}
		}
		//int32_t adcBR =  Read_ADC0(ADC_POSITIVE_INPUT_PIN17,2000);
		int32_t adcBR = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN17);
    9b0c:	2011      	movs	r0, #17
    9b0e:	4b1b      	ldr	r3, [pc, #108]	; (9b7c <detect_Three_Phase_Voltage+0x104>)
    9b10:	4798      	blx	r3
    9b12:	0003      	movs	r3, r0
    9b14:	607b      	str	r3, [r7, #4]
		adcBR = (adcBR-12);
    9b16:	687b      	ldr	r3, [r7, #4]
    9b18:	3b0c      	subs	r3, #12
    9b1a:	607b      	str	r3, [r7, #4]
		if (adcBR<0)
    9b1c:	687b      	ldr	r3, [r7, #4]
    9b1e:	2b00      	cmp	r3, #0
    9b20:	da02      	bge.n	9b28 <detect_Three_Phase_Voltage+0xb0>
		{
			adcBR = 0;
    9b22:	2300      	movs	r3, #0
    9b24:	607b      	str	r3, [r7, #4]
    9b26:	e00f      	b.n	9b48 <detect_Three_Phase_Voltage+0xd0>
		}
		else
		{
			adcBR = (((adcBR-12)*670)/1000);
    9b28:	687b      	ldr	r3, [r7, #4]
    9b2a:	3b0c      	subs	r3, #12
    9b2c:	4a16      	ldr	r2, [pc, #88]	; (9b88 <detect_Three_Phase_Voltage+0x110>)
    9b2e:	435a      	muls	r2, r3
    9b30:	0010      	movs	r0, r2
    9b32:	4b14      	ldr	r3, [pc, #80]	; (9b84 <detect_Three_Phase_Voltage+0x10c>)
    9b34:	22fa      	movs	r2, #250	; 0xfa
    9b36:	0091      	lsls	r1, r2, #2
    9b38:	4798      	blx	r3
    9b3a:	0003      	movs	r3, r0
    9b3c:	607b      	str	r3, [r7, #4]
			if (adcBR<0)
    9b3e:	687b      	ldr	r3, [r7, #4]
    9b40:	2b00      	cmp	r3, #0
    9b42:	da01      	bge.n	9b48 <detect_Three_Phase_Voltage+0xd0>
			{
				adcBR = 0;
    9b44:	2300      	movs	r3, #0
    9b46:	607b      	str	r3, [r7, #4]
			}
		}
		
		
		Analog_Parameter_Struct.PhaseRY_Voltage = adcRY;
    9b48:	68fa      	ldr	r2, [r7, #12]
    9b4a:	4b10      	ldr	r3, [pc, #64]	; (9b8c <detect_Three_Phase_Voltage+0x114>)
    9b4c:	601a      	str	r2, [r3, #0]
		Analog_Parameter_Struct.PhaseYB_Voltage = adcYB;
    9b4e:	68ba      	ldr	r2, [r7, #8]
    9b50:	4b0e      	ldr	r3, [pc, #56]	; (9b8c <detect_Three_Phase_Voltage+0x114>)
    9b52:	605a      	str	r2, [r3, #4]
		Analog_Parameter_Struct.PhaseBR_Voltage = adcBR;
    9b54:	687a      	ldr	r2, [r7, #4]
    9b56:	4b0d      	ldr	r3, [pc, #52]	; (9b8c <detect_Three_Phase_Voltage+0x114>)
    9b58:	609a      	str	r2, [r3, #8]
		
		set_Three_Phase_State_From_Voltage();
    9b5a:	4b0d      	ldr	r3, [pc, #52]	; (9b90 <detect_Three_Phase_Voltage+0x118>)
    9b5c:	4798      	blx	r3
		xSemaphoreGive(xADC_Semaphore);
    9b5e:	4b05      	ldr	r3, [pc, #20]	; (9b74 <detect_Three_Phase_Voltage+0xfc>)
    9b60:	6818      	ldr	r0, [r3, #0]
    9b62:	2300      	movs	r3, #0
    9b64:	2200      	movs	r2, #0
    9b66:	2100      	movs	r1, #0
    9b68:	4c0a      	ldr	r4, [pc, #40]	; (9b94 <detect_Three_Phase_Voltage+0x11c>)
    9b6a:	47a0      	blx	r4
	}
}
    9b6c:	46c0      	nop			; (mov r8, r8)
    9b6e:	46bd      	mov	sp, r7
    9b70:	b005      	add	sp, #20
    9b72:	bd90      	pop	{r4, r7, pc}
    9b74:	20000230 	.word	0x20000230
    9b78:	0000e591 	.word	0x0000e591
    9b7c:	0000931d 	.word	0x0000931d
    9b80:	0000028f 	.word	0x0000028f
    9b84:	000153f5 	.word	0x000153f5
    9b88:	0000029e 	.word	0x0000029e
    9b8c:	200006cc 	.word	0x200006cc
    9b90:	00009b99 	.word	0x00009b99
    9b94:	0000e0f1 	.word	0x0000e0f1

00009b98 <set_Three_Phase_State_From_Voltage>:

//Function to set the Three Phase State from acquired voltage
void set_Three_Phase_State_From_Voltage(void) {
    9b98:	b580      	push	{r7, lr}
    9b9a:	b082      	sub	sp, #8
    9b9c:	af00      	add	r7, sp, #0
	
	uint8_t temp_phase_state = structThreePhase_state.u8t_phase_ac_state;		//save last AC Phase State, in case AC Phase State is going to change
    9b9e:	1dfb      	adds	r3, r7, #7
    9ba0:	4a2a      	ldr	r2, [pc, #168]	; (9c4c <set_Three_Phase_State_From_Voltage+0xb4>)
    9ba2:	7852      	ldrb	r2, [r2, #1]
    9ba4:	701a      	strb	r2, [r3, #0]
	
	
	if ((Analog_Parameter_Struct.PhaseRY_Voltage < 40) &&
    9ba6:	4b2a      	ldr	r3, [pc, #168]	; (9c50 <set_Three_Phase_State_From_Voltage+0xb8>)
    9ba8:	681b      	ldr	r3, [r3, #0]
    9baa:	2b27      	cmp	r3, #39	; 0x27
    9bac:	d80b      	bhi.n	9bc6 <set_Three_Phase_State_From_Voltage+0x2e>
	(Analog_Parameter_Struct.PhaseYB_Voltage < 40) &&
    9bae:	4b28      	ldr	r3, [pc, #160]	; (9c50 <set_Three_Phase_State_From_Voltage+0xb8>)
    9bb0:	685b      	ldr	r3, [r3, #4]
	if ((Analog_Parameter_Struct.PhaseRY_Voltage < 40) &&
    9bb2:	2b27      	cmp	r3, #39	; 0x27
    9bb4:	d807      	bhi.n	9bc6 <set_Three_Phase_State_From_Voltage+0x2e>
	(Analog_Parameter_Struct.PhaseBR_Voltage < 40))				// if All phase volt, less than 40
    9bb6:	4b26      	ldr	r3, [pc, #152]	; (9c50 <set_Three_Phase_State_From_Voltage+0xb8>)
    9bb8:	689b      	ldr	r3, [r3, #8]
	(Analog_Parameter_Struct.PhaseYB_Voltage < 40) &&
    9bba:	2b27      	cmp	r3, #39	; 0x27
    9bbc:	d803      	bhi.n	9bc6 <set_Three_Phase_State_From_Voltage+0x2e>
	{
		structThreePhase_state.u8t_phase_ac_state = AC_OFF; //no phase is present, light is cut off
    9bbe:	4b23      	ldr	r3, [pc, #140]	; (9c4c <set_Three_Phase_State_From_Voltage+0xb4>)
    9bc0:	2200      	movs	r2, #0
    9bc2:	705a      	strb	r2, [r3, #1]
    9bc4:	e02a      	b.n	9c1c <set_Three_Phase_State_From_Voltage+0x84>
	}
	else if((abs(Analog_Parameter_Struct.PhaseRY_Voltage-Analog_Parameter_Struct.PhaseYB_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
    9bc6:	4b22      	ldr	r3, [pc, #136]	; (9c50 <set_Three_Phase_State_From_Voltage+0xb8>)
    9bc8:	681a      	ldr	r2, [r3, #0]
    9bca:	4b21      	ldr	r3, [pc, #132]	; (9c50 <set_Three_Phase_State_From_Voltage+0xb8>)
    9bcc:	685b      	ldr	r3, [r3, #4]
    9bce:	1ad3      	subs	r3, r2, r3
    9bd0:	17da      	asrs	r2, r3, #31
    9bd2:	189b      	adds	r3, r3, r2
    9bd4:	4053      	eors	r3, r2
    9bd6:	4a1f      	ldr	r2, [pc, #124]	; (9c54 <set_Three_Phase_State_From_Voltage+0xbc>)
    9bd8:	8c52      	ldrh	r2, [r2, #34]	; 0x22
    9bda:	4293      	cmp	r3, r2
    9bdc:	dc17      	bgt.n	9c0e <set_Three_Phase_State_From_Voltage+0x76>
	(abs(Analog_Parameter_Struct.PhaseYB_Voltage-Analog_Parameter_Struct.PhaseBR_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
    9bde:	4b1c      	ldr	r3, [pc, #112]	; (9c50 <set_Three_Phase_State_From_Voltage+0xb8>)
    9be0:	685a      	ldr	r2, [r3, #4]
    9be2:	4b1b      	ldr	r3, [pc, #108]	; (9c50 <set_Three_Phase_State_From_Voltage+0xb8>)
    9be4:	689b      	ldr	r3, [r3, #8]
    9be6:	1ad3      	subs	r3, r2, r3
    9be8:	17da      	asrs	r2, r3, #31
    9bea:	189b      	adds	r3, r3, r2
    9bec:	4053      	eors	r3, r2
    9bee:	4a19      	ldr	r2, [pc, #100]	; (9c54 <set_Three_Phase_State_From_Voltage+0xbc>)
    9bf0:	8c52      	ldrh	r2, [r2, #34]	; 0x22
	else if((abs(Analog_Parameter_Struct.PhaseRY_Voltage-Analog_Parameter_Struct.PhaseYB_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
    9bf2:	4293      	cmp	r3, r2
    9bf4:	dc0b      	bgt.n	9c0e <set_Three_Phase_State_From_Voltage+0x76>
	(abs(Analog_Parameter_Struct.PhaseBR_Voltage-Analog_Parameter_Struct.PhaseRY_Voltage)>user_settings_parameter_struct.singlePhasingVoltage))  // if diff betweeen any 2 phases > 80
    9bf6:	4b16      	ldr	r3, [pc, #88]	; (9c50 <set_Three_Phase_State_From_Voltage+0xb8>)
    9bf8:	689a      	ldr	r2, [r3, #8]
    9bfa:	4b15      	ldr	r3, [pc, #84]	; (9c50 <set_Three_Phase_State_From_Voltage+0xb8>)
    9bfc:	681b      	ldr	r3, [r3, #0]
    9bfe:	1ad3      	subs	r3, r2, r3
    9c00:	17da      	asrs	r2, r3, #31
    9c02:	189b      	adds	r3, r3, r2
    9c04:	4053      	eors	r3, r2
    9c06:	4a13      	ldr	r2, [pc, #76]	; (9c54 <set_Three_Phase_State_From_Voltage+0xbc>)
    9c08:	8c52      	ldrh	r2, [r2, #34]	; 0x22
	(abs(Analog_Parameter_Struct.PhaseYB_Voltage-Analog_Parameter_Struct.PhaseBR_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
    9c0a:	4293      	cmp	r3, r2
    9c0c:	dd03      	ble.n	9c16 <set_Three_Phase_State_From_Voltage+0x7e>
	{
		structThreePhase_state.u8t_phase_ac_state = AC_2PH;//Single phasing Occured
    9c0e:	4b0f      	ldr	r3, [pc, #60]	; (9c4c <set_Three_Phase_State_From_Voltage+0xb4>)
    9c10:	2202      	movs	r2, #2
    9c12:	705a      	strb	r2, [r3, #1]
    9c14:	e002      	b.n	9c1c <set_Three_Phase_State_From_Voltage+0x84>
	}
	else  //all Phase are present
	{
		structThreePhase_state.u8t_phase_ac_state = AC_3PH;
    9c16:	4b0d      	ldr	r3, [pc, #52]	; (9c4c <set_Three_Phase_State_From_Voltage+0xb4>)
    9c18:	2203      	movs	r2, #3
    9c1a:	705a      	strb	r2, [r3, #1]
	}
	
	if (current_three_phase_state != structThreePhase_state.u8t_phase_ac_state)
    9c1c:	4b0b      	ldr	r3, [pc, #44]	; (9c4c <set_Three_Phase_State_From_Voltage+0xb4>)
    9c1e:	785b      	ldrb	r3, [r3, #1]
    9c20:	b2da      	uxtb	r2, r3
    9c22:	4b0d      	ldr	r3, [pc, #52]	; (9c58 <set_Three_Phase_State_From_Voltage+0xc0>)
    9c24:	781b      	ldrb	r3, [r3, #0]
    9c26:	b2db      	uxtb	r3, r3
    9c28:	429a      	cmp	r2, r3
    9c2a:	d00b      	beq.n	9c44 <set_Three_Phase_State_From_Voltage+0xac>
	{
		last_three_phase_state  = 	temp_phase_state;								//assign saved temp AC Phase State to last_three_phase_state
    9c2c:	4b0b      	ldr	r3, [pc, #44]	; (9c5c <set_Three_Phase_State_From_Voltage+0xc4>)
    9c2e:	1dfa      	adds	r2, r7, #7
    9c30:	7812      	ldrb	r2, [r2, #0]
    9c32:	701a      	strb	r2, [r3, #0]
		current_three_phase_state = structThreePhase_state.u8t_phase_ac_state;
    9c34:	4b05      	ldr	r3, [pc, #20]	; (9c4c <set_Three_Phase_State_From_Voltage+0xb4>)
    9c36:	785b      	ldrb	r3, [r3, #1]
    9c38:	b2da      	uxtb	r2, r3
    9c3a:	4b07      	ldr	r3, [pc, #28]	; (9c58 <set_Three_Phase_State_From_Voltage+0xc0>)
    9c3c:	701a      	strb	r2, [r3, #0]
		eventOccured = true;
    9c3e:	4b08      	ldr	r3, [pc, #32]	; (9c60 <set_Three_Phase_State_From_Voltage+0xc8>)
    9c40:	2201      	movs	r2, #1
    9c42:	701a      	strb	r2, [r3, #0]
	}
}
    9c44:	46c0      	nop			; (mov r8, r8)
    9c46:	46bd      	mov	sp, r7
    9c48:	b002      	add	sp, #8
    9c4a:	bd80      	pop	{r7, pc}
    9c4c:	20000710 	.word	0x20000710
    9c50:	200006cc 	.word	0x200006cc
    9c54:	2000064c 	.word	0x2000064c
    9c58:	200007e8 	.word	0x200007e8
    9c5c:	20000703 	.word	0x20000703
    9c60:	20000707 	.word	0x20000707

00009c64 <detect_Motor_Current>:

//Function to detect the Motor Current, From ADC, Average it (using ADC_0) , and store it in the Analog_Parameter_Struct
void detect_Motor_Current(void){
    9c64:	b590      	push	{r4, r7, lr}
    9c66:	b083      	sub	sp, #12
    9c68:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
    9c6a:	4b32      	ldr	r3, [pc, #200]	; (9d34 <detect_Motor_Current+0xd0>)
    9c6c:	681a      	ldr	r2, [r3, #0]
    9c6e:	2301      	movs	r3, #1
    9c70:	425b      	negs	r3, r3
    9c72:	0019      	movs	r1, r3
    9c74:	0010      	movs	r0, r2
    9c76:	4b30      	ldr	r3, [pc, #192]	; (9d38 <detect_Motor_Current+0xd4>)
    9c78:	4798      	blx	r3
    9c7a:	0003      	movs	r3, r0
    9c7c:	2b01      	cmp	r3, #1
    9c7e:	d155      	bne.n	9d2c <detect_Motor_Current+0xc8>
	{
		uint32_t ADCcurrent = Read_ADC0(ADC_POSITIVE_INPUT_PIN16,200);
    9c80:	21c8      	movs	r1, #200	; 0xc8
    9c82:	2010      	movs	r0, #16
    9c84:	4b2d      	ldr	r3, [pc, #180]	; (9d3c <detect_Motor_Current+0xd8>)
    9c86:	4798      	blx	r3
    9c88:	0003      	movs	r3, r0
    9c8a:	607b      	str	r3, [r7, #4]
		
		
		if(ADCcurrent>15)
    9c8c:	687b      	ldr	r3, [r7, #4]
    9c8e:	2b0f      	cmp	r3, #15
    9c90:	d906      	bls.n	9ca0 <detect_Motor_Current+0x3c>
		{
			ADCcurrent = abs(ADCcurrent - 15);
    9c92:	687b      	ldr	r3, [r7, #4]
    9c94:	3b0f      	subs	r3, #15
    9c96:	17da      	asrs	r2, r3, #31
    9c98:	189b      	adds	r3, r3, r2
    9c9a:	4053      	eors	r3, r2
    9c9c:	607b      	str	r3, [r7, #4]
    9c9e:	e004      	b.n	9caa <detect_Motor_Current+0x46>
		}
		else if(ADCcurrent <= 15)
    9ca0:	687b      	ldr	r3, [r7, #4]
    9ca2:	2b0f      	cmp	r3, #15
    9ca4:	d801      	bhi.n	9caa <detect_Motor_Current+0x46>
		{
			ADCcurrent = 0;
    9ca6:	2300      	movs	r3, #0
    9ca8:	607b      	str	r3, [r7, #4]
		}
		
		xSemaphoreGive(xADC_Semaphore);
    9caa:	4b22      	ldr	r3, [pc, #136]	; (9d34 <detect_Motor_Current+0xd0>)
    9cac:	6818      	ldr	r0, [r3, #0]
    9cae:	2300      	movs	r3, #0
    9cb0:	2200      	movs	r2, #0
    9cb2:	2100      	movs	r1, #0
    9cb4:	4c22      	ldr	r4, [pc, #136]	; (9d40 <detect_Motor_Current+0xdc>)
    9cb6:	47a0      	blx	r4
		Analog_Parameter_Struct.Motor_Current_ADC_Value = ADCcurrent;				// does ADCcurrent here have ADC Value of Current ?
    9cb8:	4b22      	ldr	r3, [pc, #136]	; (9d44 <detect_Motor_Current+0xe0>)
    9cba:	687a      	ldr	r2, [r7, #4]
    9cbc:	60da      	str	r2, [r3, #12]
		//ADCcurrent = (ADCcurrent*7225)/1000;
		ADCcurrent = (ADCcurrent*3425)/1000;
    9cbe:	687b      	ldr	r3, [r7, #4]
    9cc0:	4a21      	ldr	r2, [pc, #132]	; (9d48 <detect_Motor_Current+0xe4>)
    9cc2:	435a      	muls	r2, r3
    9cc4:	0010      	movs	r0, r2
    9cc6:	4b21      	ldr	r3, [pc, #132]	; (9d4c <detect_Motor_Current+0xe8>)
    9cc8:	22fa      	movs	r2, #250	; 0xfa
    9cca:	0091      	lsls	r1, r2, #2
    9ccc:	4798      	blx	r3
    9cce:	0003      	movs	r3, r0
    9cd0:	607b      	str	r3, [r7, #4]
		if(ADCcurrent<1200 && ADCcurrent!=0)
    9cd2:	687b      	ldr	r3, [r7, #4]
    9cd4:	4a1e      	ldr	r2, [pc, #120]	; (9d50 <detect_Motor_Current+0xec>)
    9cd6:	4293      	cmp	r3, r2
    9cd8:	d810      	bhi.n	9cfc <detect_Motor_Current+0x98>
    9cda:	687b      	ldr	r3, [r7, #4]
    9cdc:	2b00      	cmp	r3, #0
    9cde:	d00d      	beq.n	9cfc <detect_Motor_Current+0x98>
		{
			ADCcurrent = ADCcurrent + (((1200-ADCcurrent)*272)/1000);
    9ce0:	687b      	ldr	r3, [r7, #4]
    9ce2:	4a1c      	ldr	r2, [pc, #112]	; (9d54 <detect_Motor_Current+0xf0>)
    9ce4:	4353      	muls	r3, r2
    9ce6:	4a1c      	ldr	r2, [pc, #112]	; (9d58 <detect_Motor_Current+0xf4>)
    9ce8:	1898      	adds	r0, r3, r2
    9cea:	4b18      	ldr	r3, [pc, #96]	; (9d4c <detect_Motor_Current+0xe8>)
    9cec:	22fa      	movs	r2, #250	; 0xfa
    9cee:	0091      	lsls	r1, r2, #2
    9cf0:	4798      	blx	r3
    9cf2:	0003      	movs	r3, r0
    9cf4:	001a      	movs	r2, r3
    9cf6:	687b      	ldr	r3, [r7, #4]
    9cf8:	189b      	adds	r3, r3, r2
    9cfa:	607b      	str	r3, [r7, #4]
		}
		Analog_Parameter_Struct.Motor_Current = ADCcurrent;
    9cfc:	4b11      	ldr	r3, [pc, #68]	; (9d44 <detect_Motor_Current+0xe0>)
    9cfe:	687a      	ldr	r2, [r7, #4]
    9d00:	611a      	str	r2, [r3, #16]
		Analog_Parameter_Struct.Motor_Current_IntPart = ADCcurrent/100;
    9d02:	687a      	ldr	r2, [r7, #4]
    9d04:	4b11      	ldr	r3, [pc, #68]	; (9d4c <detect_Motor_Current+0xe8>)
    9d06:	2164      	movs	r1, #100	; 0x64
    9d08:	0010      	movs	r0, r2
    9d0a:	4798      	blx	r3
    9d0c:	0003      	movs	r3, r0
    9d0e:	b29a      	uxth	r2, r3
    9d10:	4b0c      	ldr	r3, [pc, #48]	; (9d44 <detect_Motor_Current+0xe0>)
    9d12:	829a      	strh	r2, [r3, #20]
		Analog_Parameter_Struct.Motor_Current_DecPart = ADCcurrent%100;
    9d14:	687a      	ldr	r2, [r7, #4]
    9d16:	4b11      	ldr	r3, [pc, #68]	; (9d5c <detect_Motor_Current+0xf8>)
    9d18:	2164      	movs	r1, #100	; 0x64
    9d1a:	0010      	movs	r0, r2
    9d1c:	4798      	blx	r3
    9d1e:	000b      	movs	r3, r1
    9d20:	b29a      	uxth	r2, r3
    9d22:	4b08      	ldr	r3, [pc, #32]	; (9d44 <detect_Motor_Current+0xe0>)
    9d24:	82da      	strh	r2, [r3, #22]
		ucharCurrent_Detect_Flag = 0;												//reset the flag, to disable current reading for next 500ms
    9d26:	4b0e      	ldr	r3, [pc, #56]	; (9d60 <detect_Motor_Current+0xfc>)
    9d28:	2200      	movs	r2, #0
    9d2a:	701a      	strb	r2, [r3, #0]
	}
}
    9d2c:	46c0      	nop			; (mov r8, r8)
    9d2e:	46bd      	mov	sp, r7
    9d30:	b003      	add	sp, #12
    9d32:	bd90      	pop	{r4, r7, pc}
    9d34:	20000230 	.word	0x20000230
    9d38:	0000e591 	.word	0x0000e591
    9d3c:	00009261 	.word	0x00009261
    9d40:	0000e0f1 	.word	0x0000e0f1
    9d44:	200006cc 	.word	0x200006cc
    9d48:	00000d61 	.word	0x00000d61
    9d4c:	000152e1 	.word	0x000152e1
    9d50:	000004af 	.word	0x000004af
    9d54:	fffffef0 	.word	0xfffffef0
    9d58:	0004fb00 	.word	0x0004fb00
    9d5c:	000153ed 	.word	0x000153ed
    9d60:	20000237 	.word	0x20000237

00009d64 <should_Detect_New_Current>:

//Function to check if the New Current Reading should be read
bool should_Detect_New_Current(void){
    9d64:	b580      	push	{r7, lr}
    9d66:	af00      	add	r7, sp, #0
	
	//todo : add all the conditions checks i.e. motor ON, current consumption ON etc. , and should get new reading every 500ms
	
	return (ucharCurrent_Detect_Flag == 1);
    9d68:	4b04      	ldr	r3, [pc, #16]	; (9d7c <should_Detect_New_Current+0x18>)
    9d6a:	781b      	ldrb	r3, [r3, #0]
    9d6c:	b2db      	uxtb	r3, r3
    9d6e:	3b01      	subs	r3, #1
    9d70:	425a      	negs	r2, r3
    9d72:	4153      	adcs	r3, r2
    9d74:	b2db      	uxtb	r3, r3
	
	//return (should_Detect_New_Voltage());
}
    9d76:	0018      	movs	r0, r3
    9d78:	46bd      	mov	sp, r7
    9d7a:	bd80      	pop	{r7, pc}
    9d7c:	20000237 	.word	0x20000237

00009d80 <getACPowerState>:


bool getACPowerState(void)
{
    9d80:	b580      	push	{r7, lr}
    9d82:	af00      	add	r7, sp, #0
	//return false;
	return phaseAC;
    9d84:	4b02      	ldr	r3, [pc, #8]	; (9d90 <getACPowerState+0x10>)
    9d86:	781b      	ldrb	r3, [r3, #0]
    9d88:	b2db      	uxtb	r3, r3
}
    9d8a:	0018      	movs	r0, r3
    9d8c:	46bd      	mov	sp, r7
    9d8e:	bd80      	pop	{r7, pc}
    9d90:	2000077a 	.word	0x2000077a

00009d94 <setACPowerState>:

void setACPowerState(bool state)
{
    9d94:	b580      	push	{r7, lr}
    9d96:	b082      	sub	sp, #8
    9d98:	af00      	add	r7, sp, #0
    9d9a:	0002      	movs	r2, r0
    9d9c:	1dfb      	adds	r3, r7, #7
    9d9e:	701a      	strb	r2, [r3, #0]
	phaseAC = state;
    9da0:	4b03      	ldr	r3, [pc, #12]	; (9db0 <setACPowerState+0x1c>)
    9da2:	1dfa      	adds	r2, r7, #7
    9da4:	7812      	ldrb	r2, [r2, #0]
    9da6:	701a      	strb	r2, [r3, #0]
}
    9da8:	46c0      	nop			; (mov r8, r8)
    9daa:	46bd      	mov	sp, r7
    9dac:	b002      	add	sp, #8
    9dae:	bd80      	pop	{r7, pc}
    9db0:	2000077a 	.word	0x2000077a

00009db4 <getAllPhaseState>:

uint8_t getAllPhaseState(void)
{
    9db4:	b580      	push	{r7, lr}
    9db6:	af00      	add	r7, sp, #0
	return allPhase;
    9db8:	4b02      	ldr	r3, [pc, #8]	; (9dc4 <getAllPhaseState+0x10>)
    9dba:	781b      	ldrb	r3, [r3, #0]
    9dbc:	b2db      	uxtb	r3, r3
	//}
	//else
	//{
	//return allPhase;
	//}
}
    9dbe:	0018      	movs	r0, r3
    9dc0:	46bd      	mov	sp, r7
    9dc2:	bd80      	pop	{r7, pc}
    9dc4:	20000729 	.word	0x20000729

00009dc8 <setAllPhaseState>:

void setAllPhaseState(uint8_t state)
{
    9dc8:	b580      	push	{r7, lr}
    9dca:	b082      	sub	sp, #8
    9dcc:	af00      	add	r7, sp, #0
    9dce:	0002      	movs	r2, r0
    9dd0:	1dfb      	adds	r3, r7, #7
    9dd2:	701a      	strb	r2, [r3, #0]
	allPhase = state;
    9dd4:	4b03      	ldr	r3, [pc, #12]	; (9de4 <setAllPhaseState+0x1c>)
    9dd6:	1dfa      	adds	r2, r7, #7
    9dd8:	7812      	ldrb	r2, [r2, #0]
    9dda:	701a      	strb	r2, [r3, #0]
}
    9ddc:	46c0      	nop			; (mov r8, r8)
    9dde:	46bd      	mov	sp, r7
    9de0:	b002      	add	sp, #8
    9de2:	bd80      	pop	{r7, pc}
    9de4:	20000729 	.word	0x20000729

00009de8 <getPhaseSequence>:

bool getPhaseSequence()
{
    9de8:	b580      	push	{r7, lr}
    9dea:	af00      	add	r7, sp, #0
	return vBoolPhaseSeq;
    9dec:	4b02      	ldr	r3, [pc, #8]	; (9df8 <getPhaseSequence+0x10>)
    9dee:	781b      	ldrb	r3, [r3, #0]
    9df0:	b2db      	uxtb	r3, r3
}
    9df2:	0018      	movs	r0, r3
    9df4:	46bd      	mov	sp, r7
    9df6:	bd80      	pop	{r7, pc}
    9df8:	2000073b 	.word	0x2000073b

00009dfc <setPhaseSequence>:

void setPhaseSequence(bool phaseSequence)
{
    9dfc:	b580      	push	{r7, lr}
    9dfe:	b082      	sub	sp, #8
    9e00:	af00      	add	r7, sp, #0
    9e02:	0002      	movs	r2, r0
    9e04:	1dfb      	adds	r3, r7, #7
    9e06:	701a      	strb	r2, [r3, #0]
	vBoolPhaseSeq=phaseSequence;
    9e08:	4b03      	ldr	r3, [pc, #12]	; (9e18 <setPhaseSequence+0x1c>)
    9e0a:	1dfa      	adds	r2, r7, #7
    9e0c:	7812      	ldrb	r2, [r2, #0]
    9e0e:	701a      	strb	r2, [r3, #0]
}
    9e10:	46c0      	nop			; (mov r8, r8)
    9e12:	46bd      	mov	sp, r7
    9e14:	b002      	add	sp, #8
    9e16:	bd80      	pop	{r7, pc}
    9e18:	2000073b 	.word	0x2000073b

00009e1c <getMotorState>:


bool getMotorState(void)
{
    9e1c:	b580      	push	{r7, lr}
    9e1e:	af00      	add	r7, sp, #0
	return mFeedback;
    9e20:	4b02      	ldr	r3, [pc, #8]	; (9e2c <getMotorState+0x10>)
    9e22:	781b      	ldrb	r3, [r3, #0]
    9e24:	b2db      	uxtb	r3, r3
}
    9e26:	0018      	movs	r0, r3
    9e28:	46bd      	mov	sp, r7
    9e2a:	bd80      	pop	{r7, pc}
    9e2c:	2000070a 	.word	0x2000070a

00009e30 <setMotorState>:

void setMotorState(bool state)
{
    9e30:	b580      	push	{r7, lr}
    9e32:	b082      	sub	sp, #8
    9e34:	af00      	add	r7, sp, #0
    9e36:	0002      	movs	r2, r0
    9e38:	1dfb      	adds	r3, r7, #7
    9e3a:	701a      	strb	r2, [r3, #0]
	mFeedback = state;
    9e3c:	4b0a      	ldr	r3, [pc, #40]	; (9e68 <setMotorState+0x38>)
    9e3e:	1dfa      	adds	r2, r7, #7
    9e40:	7812      	ldrb	r2, [r2, #0]
    9e42:	701a      	strb	r2, [r3, #0]
	if (state)
    9e44:	1dfb      	adds	r3, r7, #7
    9e46:	781b      	ldrb	r3, [r3, #0]
    9e48:	2b00      	cmp	r3, #0
    9e4a:	d004      	beq.n	9e56 <setMotorState+0x26>
	{
		MOTOR_ON_LED_ON;
    9e4c:	2100      	movs	r1, #0
    9e4e:	2005      	movs	r0, #5
    9e50:	4b06      	ldr	r3, [pc, #24]	; (9e6c <setMotorState+0x3c>)
    9e52:	4798      	blx	r3
	}
	else
	{
		MOTOR_ON_LED_OFF;
	}
}
    9e54:	e003      	b.n	9e5e <setMotorState+0x2e>
		MOTOR_ON_LED_OFF;
    9e56:	2101      	movs	r1, #1
    9e58:	2005      	movs	r0, #5
    9e5a:	4b04      	ldr	r3, [pc, #16]	; (9e6c <setMotorState+0x3c>)
    9e5c:	4798      	blx	r3
}
    9e5e:	46c0      	nop			; (mov r8, r8)
    9e60:	46bd      	mov	sp, r7
    9e62:	b002      	add	sp, #8
    9e64:	bd80      	pop	{r7, pc}
    9e66:	46c0      	nop			; (mov r8, r8)
    9e68:	2000070a 	.word	0x2000070a
    9e6c:	000087ad 	.word	0x000087ad

00009e70 <getMotorState_from_pin>:

bool getMotorState_from_pin(void)
{
    9e70:	b590      	push	{r4, r7, lr}
    9e72:	b083      	sub	sp, #12
    9e74:	af00      	add	r7, sp, #0
	uint8_t p1;
	bool p2, p3, p4;
	readSensorState(&p1, &p2, &p3, &p4);
    9e76:	1d3b      	adds	r3, r7, #4
    9e78:	1d7a      	adds	r2, r7, #5
    9e7a:	1db9      	adds	r1, r7, #6
    9e7c:	1df8      	adds	r0, r7, #7
    9e7e:	4c06      	ldr	r4, [pc, #24]	; (9e98 <getMotorState_from_pin+0x28>)
    9e80:	47a0      	blx	r4
	setMotorState(p3);
    9e82:	1d7b      	adds	r3, r7, #5
    9e84:	781b      	ldrb	r3, [r3, #0]
    9e86:	0018      	movs	r0, r3
    9e88:	4b04      	ldr	r3, [pc, #16]	; (9e9c <getMotorState_from_pin+0x2c>)
    9e8a:	4798      	blx	r3
	return p3;
    9e8c:	1d7b      	adds	r3, r7, #5
    9e8e:	781b      	ldrb	r3, [r3, #0]
}
    9e90:	0018      	movs	r0, r3
    9e92:	46bd      	mov	sp, r7
    9e94:	b003      	add	sp, #12
    9e96:	bd90      	pop	{r4, r7, pc}
    9e98:	00009ea1 	.word	0x00009ea1
    9e9c:	00009e31 	.word	0x00009e31

00009ea0 <readSensorState>:



void readSensorState(uint8_t *allPhase, bool *phaseSeq,bool *motor, bool *acPhase)
{
    9ea0:	b590      	push	{r4, r7, lr}
    9ea2:	b087      	sub	sp, #28
    9ea4:	af00      	add	r7, sp, #0
    9ea6:	60f8      	str	r0, [r7, #12]
    9ea8:	60b9      	str	r1, [r7, #8]
    9eaa:	607a      	str	r2, [r7, #4]
    9eac:	603b      	str	r3, [r7, #0]
	*allPhase = structThreePhase_state.u8t_phase_ac_state;
    9eae:	4b37      	ldr	r3, [pc, #220]	; (9f8c <readSensorState+0xec>)
    9eb0:	785b      	ldrb	r3, [r3, #1]
    9eb2:	b2da      	uxtb	r2, r3
    9eb4:	68fb      	ldr	r3, [r7, #12]
    9eb6:	701a      	strb	r2, [r3, #0]
	//*phaseSeq = structThreePhase_state.u8t_phase_sequence_flag;
	if(structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
    9eb8:	4b34      	ldr	r3, [pc, #208]	; (9f8c <readSensorState+0xec>)
    9eba:	781b      	ldrb	r3, [r3, #0]
    9ebc:	b2db      	uxtb	r3, r3
    9ebe:	2b02      	cmp	r3, #2
    9ec0:	d103      	bne.n	9eca <readSensorState+0x2a>
	{
		*phaseSeq=true;
    9ec2:	68bb      	ldr	r3, [r7, #8]
    9ec4:	2201      	movs	r2, #1
    9ec6:	701a      	strb	r2, [r3, #0]
    9ec8:	e002      	b.n	9ed0 <readSensorState+0x30>
	}
	else
	{
		*phaseSeq = false;
    9eca:	68bb      	ldr	r3, [r7, #8]
    9ecc:	2200      	movs	r2, #0
    9ece:	701a      	strb	r2, [r3, #0]
	//{
	//*p1 = false;
	//}

	// If MotorFeedback Detection is disabled
	if (user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_OFF)
    9ed0:	4b2f      	ldr	r3, [pc, #188]	; (9f90 <readSensorState+0xf0>)
    9ed2:	2225      	movs	r2, #37	; 0x25
    9ed4:	5c9b      	ldrb	r3, [r3, r2]
    9ed6:	2b00      	cmp	r3, #0
    9ed8:	d106      	bne.n	9ee8 <readSensorState+0x48>
	{
		*motor  = getMotorState();
    9eda:	4b2e      	ldr	r3, [pc, #184]	; (9f94 <readSensorState+0xf4>)
    9edc:	4798      	blx	r3
    9ede:	0003      	movs	r3, r0
    9ee0:	001a      	movs	r2, r3
    9ee2:	687b      	ldr	r3, [r7, #4]
    9ee4:	701a      	strb	r2, [r3, #0]
    9ee6:	e020      	b.n	9f2a <readSensorState+0x8a>
	}
	// If Motor Feedback is to be detected using Current
	else if(user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_CURRENT)
    9ee8:	4b29      	ldr	r3, [pc, #164]	; (9f90 <readSensorState+0xf0>)
    9eea:	2225      	movs	r2, #37	; 0x25
    9eec:	5c9b      	ldrb	r3, [r3, r2]
    9eee:	2b01      	cmp	r3, #1
    9ef0:	d106      	bne.n	9f00 <readSensorState+0x60>
	{
		*motor = checkMotorStatusUsingCurrent();
    9ef2:	4b29      	ldr	r3, [pc, #164]	; (9f98 <readSensorState+0xf8>)
    9ef4:	4798      	blx	r3
    9ef6:	0003      	movs	r3, r0
    9ef8:	001a      	movs	r2, r3
    9efa:	687b      	ldr	r3, [r7, #4]
    9efc:	701a      	strb	r2, [r3, #0]
    9efe:	e014      	b.n	9f2a <readSensorState+0x8a>
		
	}
	// if Motor Feedback is to be detected using HW Feedback Circuit
	else if(user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_ON)
    9f00:	4b23      	ldr	r3, [pc, #140]	; (9f90 <readSensorState+0xf0>)
    9f02:	2225      	movs	r2, #37	; 0x25
    9f04:	5c9b      	ldrb	r3, [r3, r2]
    9f06:	2b02      	cmp	r3, #2
    9f08:	d10f      	bne.n	9f2a <readSensorState+0x8a>
	{
		*motor  = !(port_pin_get_input_level(PIN_MOTOR_FEEDBACK));
    9f0a:	202e      	movs	r0, #46	; 0x2e
    9f0c:	4b23      	ldr	r3, [pc, #140]	; (9f9c <readSensorState+0xfc>)
    9f0e:	4798      	blx	r3
    9f10:	0003      	movs	r3, r0
    9f12:	1e5a      	subs	r2, r3, #1
    9f14:	4193      	sbcs	r3, r2
    9f16:	b2db      	uxtb	r3, r3
    9f18:	2201      	movs	r2, #1
    9f1a:	4053      	eors	r3, r2
    9f1c:	b2db      	uxtb	r3, r3
    9f1e:	1c1a      	adds	r2, r3, #0
    9f20:	2301      	movs	r3, #1
    9f22:	4013      	ands	r3, r2
    9f24:	b2da      	uxtb	r2, r3
    9f26:	687b      	ldr	r3, [r7, #4]
    9f28:	701a      	strb	r2, [r3, #0]
	}


	
	uint8_t last_comparison = AC_CHAN_STATUS_UNKNOWN;
    9f2a:	2317      	movs	r3, #23
    9f2c:	18fb      	adds	r3, r7, r3
    9f2e:	2201      	movs	r2, #1
    9f30:	701a      	strb	r2, [r3, #0]
	
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0);
    9f32:	2317      	movs	r3, #23
    9f34:	18fc      	adds	r4, r7, r3
    9f36:	4b1a      	ldr	r3, [pc, #104]	; (9fa0 <readSensorState+0x100>)
    9f38:	2100      	movs	r1, #0
    9f3a:	0018      	movs	r0, r3
    9f3c:	4b19      	ldr	r3, [pc, #100]	; (9fa4 <readSensorState+0x104>)
    9f3e:	4798      	blx	r3
    9f40:	0003      	movs	r3, r0
    9f42:	7023      	strb	r3, [r4, #0]
	vTaskDelay(500/portTICK_PERIOD_MS);
    9f44:	23fa      	movs	r3, #250	; 0xfa
    9f46:	005b      	lsls	r3, r3, #1
    9f48:	0018      	movs	r0, r3
    9f4a:	4b17      	ldr	r3, [pc, #92]	; (9fa8 <readSensorState+0x108>)
    9f4c:	4798      	blx	r3
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0); //read again
    9f4e:	2317      	movs	r3, #23
    9f50:	18fc      	adds	r4, r7, r3
    9f52:	4b13      	ldr	r3, [pc, #76]	; (9fa0 <readSensorState+0x100>)
    9f54:	2100      	movs	r1, #0
    9f56:	0018      	movs	r0, r3
    9f58:	4b12      	ldr	r3, [pc, #72]	; (9fa4 <readSensorState+0x104>)
    9f5a:	4798      	blx	r3
    9f5c:	0003      	movs	r3, r0
    9f5e:	7023      	strb	r3, [r4, #0]
	
	if (last_comparison & AC_CHAN_STATUS_POS_ABOVE_NEG)
    9f60:	2317      	movs	r3, #23
    9f62:	18fb      	adds	r3, r7, r3
    9f64:	781b      	ldrb	r3, [r3, #0]
    9f66:	2204      	movs	r2, #4
    9f68:	4013      	ands	r3, r2
    9f6a:	d003      	beq.n	9f74 <readSensorState+0xd4>
	{
		isACpowerAvailable = true;
    9f6c:	4b0f      	ldr	r3, [pc, #60]	; (9fac <readSensorState+0x10c>)
    9f6e:	2201      	movs	r2, #1
    9f70:	701a      	strb	r2, [r3, #0]
    9f72:	e002      	b.n	9f7a <readSensorState+0xda>
	}
	else
	{
		isACpowerAvailable = false;
    9f74:	4b0d      	ldr	r3, [pc, #52]	; (9fac <readSensorState+0x10c>)
    9f76:	2200      	movs	r2, #0
    9f78:	701a      	strb	r2, [r3, #0]
	}
	
	*acPhase =  isACpowerAvailable;
    9f7a:	4b0c      	ldr	r3, [pc, #48]	; (9fac <readSensorState+0x10c>)
    9f7c:	781b      	ldrb	r3, [r3, #0]
    9f7e:	b2da      	uxtb	r2, r3
    9f80:	683b      	ldr	r3, [r7, #0]
    9f82:	701a      	strb	r2, [r3, #0]
}
    9f84:	46c0      	nop			; (mov r8, r8)
    9f86:	46bd      	mov	sp, r7
    9f88:	b007      	add	sp, #28
    9f8a:	bd90      	pop	{r4, r7, pc}
    9f8c:	20000710 	.word	0x20000710
    9f90:	2000064c 	.word	0x2000064c
    9f94:	00009e1d 	.word	0x00009e1d
    9f98:	00009fb1 	.word	0x00009fb1
    9f9c:	00008769 	.word	0x00008769
    9fa0:	20000824 	.word	0x20000824
    9fa4:	0000831d 	.word	0x0000831d
    9fa8:	0000ee99 	.word	0x0000ee99
    9fac:	20000755 	.word	0x20000755

00009fb0 <checkMotorStatusUsingCurrent>:

bool checkMotorStatusUsingCurrent(void)
{
    9fb0:	b580      	push	{r7, lr}
    9fb2:	af00      	add	r7, sp, #0
	if (Analog_Parameter_Struct.Motor_Current_IntPart > 4)
    9fb4:	4b05      	ldr	r3, [pc, #20]	; (9fcc <checkMotorStatusUsingCurrent+0x1c>)
    9fb6:	8a9b      	ldrh	r3, [r3, #20]
    9fb8:	b29b      	uxth	r3, r3
    9fba:	2b04      	cmp	r3, #4
    9fbc:	d901      	bls.n	9fc2 <checkMotorStatusUsingCurrent+0x12>
	{
		return true;
    9fbe:	2301      	movs	r3, #1
    9fc0:	e000      	b.n	9fc4 <checkMotorStatusUsingCurrent+0x14>
	}
	else
	{
		return false;
    9fc2:	2300      	movs	r3, #0
	}
}
    9fc4:	0018      	movs	r0, r3
    9fc6:	46bd      	mov	sp, r7
    9fc8:	bd80      	pop	{r7, pc}
    9fca:	46c0      	nop			; (mov r8, r8)
    9fcc:	200006cc 	.word	0x200006cc

00009fd0 <detectMotorStateChangeUsingCurrent>:

bool detectMotorStateChangeUsingCurrent(void)
{
    9fd0:	b5b0      	push	{r4, r5, r7, lr}
    9fd2:	af00      	add	r7, sp, #0
	if (getMotorState() != checkMotorStatusUsingCurrent())
    9fd4:	4b07      	ldr	r3, [pc, #28]	; (9ff4 <detectMotorStateChangeUsingCurrent+0x24>)
    9fd6:	4798      	blx	r3
    9fd8:	0003      	movs	r3, r0
    9fda:	001c      	movs	r4, r3
    9fdc:	4b06      	ldr	r3, [pc, #24]	; (9ff8 <detectMotorStateChangeUsingCurrent+0x28>)
    9fde:	4798      	blx	r3
    9fe0:	0003      	movs	r3, r0
    9fe2:	429c      	cmp	r4, r3
    9fe4:	d001      	beq.n	9fea <detectMotorStateChangeUsingCurrent+0x1a>
	{
		return true;
    9fe6:	2301      	movs	r3, #1
    9fe8:	e000      	b.n	9fec <detectMotorStateChangeUsingCurrent+0x1c>
	}
	else
	{
		return false;
    9fea:	2300      	movs	r3, #0
	}
}
    9fec:	0018      	movs	r0, r3
    9fee:	46bd      	mov	sp, r7
    9ff0:	bdb0      	pop	{r4, r5, r7, pc}
    9ff2:	46c0      	nop			; (mov r8, r8)
    9ff4:	00009e1d 	.word	0x00009e1d
    9ff8:	00009fb1 	.word	0x00009fb1

00009ffc <updateSensorState>:


void updateSensorState(uint8_t var3PhaseState, bool var3PhaseSeq, bool motorState, bool acPhaseState)
{
    9ffc:	b5b0      	push	{r4, r5, r7, lr}
    9ffe:	b084      	sub	sp, #16
    a000:	af00      	add	r7, sp, #0
    a002:	0005      	movs	r5, r0
    a004:	000c      	movs	r4, r1
    a006:	0010      	movs	r0, r2
    a008:	0019      	movs	r1, r3
    a00a:	1dfb      	adds	r3, r7, #7
    a00c:	1c2a      	adds	r2, r5, #0
    a00e:	701a      	strb	r2, [r3, #0]
    a010:	1dbb      	adds	r3, r7, #6
    a012:	1c22      	adds	r2, r4, #0
    a014:	701a      	strb	r2, [r3, #0]
    a016:	1d7b      	adds	r3, r7, #5
    a018:	1c02      	adds	r2, r0, #0
    a01a:	701a      	strb	r2, [r3, #0]
    a01c:	1d3b      	adds	r3, r7, #4
    a01e:	1c0a      	adds	r2, r1, #0
    a020:	701a      	strb	r2, [r3, #0]
	setAllPhaseState(var3PhaseState); // allPhase = p1;
    a022:	1dfb      	adds	r3, r7, #7
    a024:	781b      	ldrb	r3, [r3, #0]
    a026:	0018      	movs	r0, r3
    a028:	4b29      	ldr	r3, [pc, #164]	; (a0d0 <updateSensorState+0xd4>)
    a02a:	4798      	blx	r3
	setPhaseSequence(var3PhaseSeq);
    a02c:	1dbb      	adds	r3, r7, #6
    a02e:	781b      	ldrb	r3, [r3, #0]
    a030:	0018      	movs	r0, r3
    a032:	4b28      	ldr	r3, [pc, #160]	; (a0d4 <updateSensorState+0xd8>)
    a034:	4798      	blx	r3
	setMotorState(motorState); // mFeedback = p2;
    a036:	1d7b      	adds	r3, r7, #5
    a038:	781b      	ldrb	r3, [r3, #0]
    a03a:	0018      	movs	r0, r3
    a03c:	4b26      	ldr	r3, [pc, #152]	; (a0d8 <updateSensorState+0xdc>)
    a03e:	4798      	blx	r3
	setACPowerState(acPhaseState); // phaseAC = p4;
    a040:	1d3b      	adds	r3, r7, #4
    a042:	781b      	ldrb	r3, [r3, #0]
    a044:	0018      	movs	r0, r3
    a046:	4b25      	ldr	r3, [pc, #148]	; (a0dc <updateSensorState+0xe0>)
    a048:	4798      	blx	r3
	
	if(getAllPhaseState()==AC_3PH && getACPowerState())
    a04a:	4b25      	ldr	r3, [pc, #148]	; (a0e0 <updateSensorState+0xe4>)
    a04c:	4798      	blx	r3
    a04e:	0003      	movs	r3, r0
    a050:	2b03      	cmp	r3, #3
    a052:	d12e      	bne.n	a0b2 <updateSensorState+0xb6>
    a054:	4b23      	ldr	r3, [pc, #140]	; (a0e4 <updateSensorState+0xe8>)
    a056:	4798      	blx	r3
    a058:	1e03      	subs	r3, r0, #0
    a05a:	d02a      	beq.n	a0b2 <updateSensorState+0xb6>
	{
		bool tempPhaseSequence = true;									// init temp variable with default value as correct sequence
    a05c:	230f      	movs	r3, #15
    a05e:	18fb      	adds	r3, r7, r3
    a060:	2201      	movs	r2, #1
    a062:	701a      	strb	r2, [r3, #0]

		if(user_settings_parameter_struct.detectPhaseSequence)			// if detection of Phase Sequence is enabled
    a064:	4b20      	ldr	r3, [pc, #128]	; (a0e8 <updateSensorState+0xec>)
    a066:	2224      	movs	r2, #36	; 0x24
    a068:	5c9b      	ldrb	r3, [r3, r2]
    a06a:	2b00      	cmp	r3, #0
    a06c:	d005      	beq.n	a07a <updateSensorState+0x7e>
		{
			tempPhaseSequence = getPhaseSequence();						// save the current phase sequence  in temp varialbe for further use
    a06e:	230f      	movs	r3, #15
    a070:	18fc      	adds	r4, r7, r3
    a072:	4b1e      	ldr	r3, [pc, #120]	; (a0ec <updateSensorState+0xf0>)
    a074:	4798      	blx	r3
    a076:	0003      	movs	r3, r0
    a078:	7023      	strb	r3, [r4, #0]
		}

		if(tempPhaseSequence)											// check if sequence is correct
    a07a:	230f      	movs	r3, #15
    a07c:	18fb      	adds	r3, r7, r3
    a07e:	781b      	ldrb	r3, [r3, #0]
    a080:	2b00      	cmp	r3, #0
    a082:	d004      	beq.n	a08e <updateSensorState+0x92>
		{
			THREEPHASE_OK_LED_ON;
    a084:	2100      	movs	r1, #0
    a086:	2027      	movs	r0, #39	; 0x27
    a088:	4b19      	ldr	r3, [pc, #100]	; (a0f0 <updateSensorState+0xf4>)
    a08a:	4798      	blx	r3
    a08c:	e003      	b.n	a096 <updateSensorState+0x9a>
		}
		else
		{
			THREEPHASE_OK_LED_OFF;
    a08e:	2101      	movs	r1, #1
    a090:	2027      	movs	r0, #39	; 0x27
    a092:	4b17      	ldr	r3, [pc, #92]	; (a0f0 <updateSensorState+0xf4>)
    a094:	4798      	blx	r3
		}
		
		if((bool)user_settings_parameter_struct.autoStartAddress)
    a096:	4b14      	ldr	r3, [pc, #80]	; (a0e8 <updateSensorState+0xec>)
    a098:	785b      	ldrb	r3, [r3, #1]
    a09a:	2b00      	cmp	r3, #0
    a09c:	d004      	beq.n	a0a8 <updateSensorState+0xac>
		{
			AUTO_ON_LED_ON;
    a09e:	2100      	movs	r1, #0
    a0a0:	2028      	movs	r0, #40	; 0x28
    a0a2:	4b13      	ldr	r3, [pc, #76]	; (a0f0 <updateSensorState+0xf4>)
    a0a4:	4798      	blx	r3
	{
    a0a6:	e00f      	b.n	a0c8 <updateSensorState+0xcc>
		}
		else
		{
			AUTO_ON_LED_OFF;
    a0a8:	2101      	movs	r1, #1
    a0aa:	2028      	movs	r0, #40	; 0x28
    a0ac:	4b10      	ldr	r3, [pc, #64]	; (a0f0 <updateSensorState+0xf4>)
    a0ae:	4798      	blx	r3
	{
    a0b0:	e00a      	b.n	a0c8 <updateSensorState+0xcc>
		}
	}
	else
	{
		THREEPHASE_OK_LED_OFF;
    a0b2:	2101      	movs	r1, #1
    a0b4:	2027      	movs	r0, #39	; 0x27
    a0b6:	4b0e      	ldr	r3, [pc, #56]	; (a0f0 <updateSensorState+0xf4>)
    a0b8:	4798      	blx	r3
		AUTO_ON_LED_OFF;
    a0ba:	2101      	movs	r1, #1
    a0bc:	2028      	movs	r0, #40	; 0x28
    a0be:	4b0c      	ldr	r3, [pc, #48]	; (a0f0 <updateSensorState+0xf4>)
    a0c0:	4798      	blx	r3
		startTimerOn=false;
    a0c2:	4b0c      	ldr	r3, [pc, #48]	; (a0f4 <updateSensorState+0xf8>)
    a0c4:	2200      	movs	r2, #0
    a0c6:	701a      	strb	r2, [r3, #0]
	//
	//if (!getACPowerState() || !getAllPhaseState())
	//{
	//startTimerOn = false;
	//}
}
    a0c8:	46c0      	nop			; (mov r8, r8)
    a0ca:	46bd      	mov	sp, r7
    a0cc:	b004      	add	sp, #16
    a0ce:	bdb0      	pop	{r4, r5, r7, pc}
    a0d0:	00009dc9 	.word	0x00009dc9
    a0d4:	00009dfd 	.word	0x00009dfd
    a0d8:	00009e31 	.word	0x00009e31
    a0dc:	00009d95 	.word	0x00009d95
    a0e0:	00009db5 	.word	0x00009db5
    a0e4:	00009d81 	.word	0x00009d81
    a0e8:	2000064c 	.word	0x2000064c
    a0ec:	00009de9 	.word	0x00009de9
    a0f0:	000087ad 	.word	0x000087ad
    a0f4:	20000762 	.word	0x20000762

0000a0f8 <resetAutoStart>:

void resetAutoStart(bool setChange)
{
    a0f8:	b580      	push	{r7, lr}
    a0fa:	b082      	sub	sp, #8
    a0fc:	af00      	add	r7, sp, #0
    a0fe:	0002      	movs	r2, r0
    a100:	1dfb      	adds	r3, r7, #7
    a102:	701a      	strb	r2, [r3, #0]
	if (!(bool)user_settings_parameter_struct.autoStartAddress)
    a104:	4b0e      	ldr	r3, [pc, #56]	; (a140 <resetAutoStart+0x48>)
    a106:	785b      	ldrb	r3, [r3, #1]
    a108:	2b00      	cmp	r3, #0
    a10a:	d107      	bne.n	a11c <resetAutoStart+0x24>
	{
		startTimerOn=false;
    a10c:	4b0d      	ldr	r3, [pc, #52]	; (a144 <resetAutoStart+0x4c>)
    a10e:	2200      	movs	r2, #0
    a110:	701a      	strb	r2, [r3, #0]
		AUTO_ON_LED_OFF;
    a112:	2101      	movs	r1, #1
    a114:	2028      	movs	r0, #40	; 0x28
    a116:	4b0c      	ldr	r3, [pc, #48]	; (a148 <resetAutoStart+0x50>)
    a118:	4798      	blx	r3
		if (setChange)
		{
			triggerAutoStart();
		}
	}
}
    a11a:	e00d      	b.n	a138 <resetAutoStart+0x40>
	else if ((bool)user_settings_parameter_struct.autoStartAddress)
    a11c:	4b08      	ldr	r3, [pc, #32]	; (a140 <resetAutoStart+0x48>)
    a11e:	785b      	ldrb	r3, [r3, #1]
    a120:	2b00      	cmp	r3, #0
    a122:	d009      	beq.n	a138 <resetAutoStart+0x40>
		AUTO_ON_LED_ON;
    a124:	2100      	movs	r1, #0
    a126:	2028      	movs	r0, #40	; 0x28
    a128:	4b07      	ldr	r3, [pc, #28]	; (a148 <resetAutoStart+0x50>)
    a12a:	4798      	blx	r3
		if (setChange)
    a12c:	1dfb      	adds	r3, r7, #7
    a12e:	781b      	ldrb	r3, [r3, #0]
    a130:	2b00      	cmp	r3, #0
    a132:	d001      	beq.n	a138 <resetAutoStart+0x40>
			triggerAutoStart();
    a134:	4b05      	ldr	r3, [pc, #20]	; (a14c <resetAutoStart+0x54>)
    a136:	4798      	blx	r3
}
    a138:	46c0      	nop			; (mov r8, r8)
    a13a:	46bd      	mov	sp, r7
    a13c:	b002      	add	sp, #8
    a13e:	bd80      	pop	{r7, pc}
    a140:	2000064c 	.word	0x2000064c
    a144:	20000762 	.word	0x20000762
    a148:	000087ad 	.word	0x000087ad
    a14c:	0000a151 	.word	0x0000a151

0000a150 <triggerAutoStart>:

void triggerAutoStart(void)
{
    a150:	b580      	push	{r7, lr}
    a152:	af00      	add	r7, sp, #0
	if (!getMotorState())
    a154:	4b0d      	ldr	r3, [pc, #52]	; (a18c <triggerAutoStart+0x3c>)
    a156:	4798      	blx	r3
    a158:	0003      	movs	r3, r0
    a15a:	001a      	movs	r2, r3
    a15c:	2301      	movs	r3, #1
    a15e:	4053      	eors	r3, r2
    a160:	b2db      	uxtb	r3, r3
    a162:	2b00      	cmp	r3, #0
    a164:	d00f      	beq.n	a186 <triggerAutoStart+0x36>
	{
		if (getAllPhaseState() && getACPowerState())
    a166:	4b0a      	ldr	r3, [pc, #40]	; (a190 <triggerAutoStart+0x40>)
    a168:	4798      	blx	r3
    a16a:	1e03      	subs	r3, r0, #0
    a16c:	d00b      	beq.n	a186 <triggerAutoStart+0x36>
    a16e:	4b09      	ldr	r3, [pc, #36]	; (a194 <triggerAutoStart+0x44>)
    a170:	4798      	blx	r3
    a172:	1e03      	subs	r3, r0, #0
    a174:	d007      	beq.n	a186 <triggerAutoStart+0x36>
		{
			startTimerOn = true;
    a176:	4b08      	ldr	r3, [pc, #32]	; (a198 <triggerAutoStart+0x48>)
    a178:	2201      	movs	r2, #1
    a17a:	701a      	strb	r2, [r3, #0]
			tempStartTimer = xTaskGetTickCount();
    a17c:	4b07      	ldr	r3, [pc, #28]	; (a19c <triggerAutoStart+0x4c>)
    a17e:	4798      	blx	r3
    a180:	0002      	movs	r2, r0
    a182:	4b07      	ldr	r3, [pc, #28]	; (a1a0 <triggerAutoStart+0x50>)
    a184:	601a      	str	r2, [r3, #0]
		}
	}
}
    a186:	46c0      	nop			; (mov r8, r8)
    a188:	46bd      	mov	sp, r7
    a18a:	bd80      	pop	{r7, pc}
    a18c:	00009e1d 	.word	0x00009e1d
    a190:	00009db5 	.word	0x00009db5
    a194:	00009d81 	.word	0x00009d81
    a198:	20000762 	.word	0x20000762
    a19c:	0000f1fd 	.word	0x0000f1fd
    a1a0:	20000768 	.word	0x20000768

0000a1a4 <operateOnEvent>:

void operateOnEvent(void)
{
    a1a4:	b590      	push	{r4, r7, lr}
    a1a6:	b083      	sub	sp, #12
    a1a8:	af00      	add	r7, sp, #0
	uint8_t t3Phase;
	//bool t3Phase, tMotor, tacPhase;
	bool tPhaseSeq, tMotor, tacPhase;
	readSensorState(&t3Phase, &tPhaseSeq, &tMotor, &tacPhase);
    a1aa:	1d3b      	adds	r3, r7, #4
    a1ac:	1d7a      	adds	r2, r7, #5
    a1ae:	1db9      	adds	r1, r7, #6
    a1b0:	1df8      	adds	r0, r7, #7
    a1b2:	4c67      	ldr	r4, [pc, #412]	; (a350 <operateOnEvent+0x1ac>)
    a1b4:	47a0      	blx	r4
	eventOccured = false;
    a1b6:	4b67      	ldr	r3, [pc, #412]	; (a354 <operateOnEvent+0x1b0>)
    a1b8:	2200      	movs	r2, #0
    a1ba:	701a      	strb	r2, [r3, #0]
	
	//todo: add current phase Sequence and previous phase sequence is equals check here
	if ((t3Phase == getAllPhaseState()) && (tMotor == getMotorState()) && (tacPhase == getACPowerState()))
    a1bc:	4b66      	ldr	r3, [pc, #408]	; (a358 <operateOnEvent+0x1b4>)
    a1be:	4798      	blx	r3
    a1c0:	0003      	movs	r3, r0
    a1c2:	001a      	movs	r2, r3
    a1c4:	1dfb      	adds	r3, r7, #7
    a1c6:	781b      	ldrb	r3, [r3, #0]
    a1c8:	429a      	cmp	r2, r3
    a1ca:	d110      	bne.n	a1ee <operateOnEvent+0x4a>
    a1cc:	4b63      	ldr	r3, [pc, #396]	; (a35c <operateOnEvent+0x1b8>)
    a1ce:	4798      	blx	r3
    a1d0:	0003      	movs	r3, r0
    a1d2:	001a      	movs	r2, r3
    a1d4:	1d7b      	adds	r3, r7, #5
    a1d6:	781b      	ldrb	r3, [r3, #0]
    a1d8:	429a      	cmp	r2, r3
    a1da:	d108      	bne.n	a1ee <operateOnEvent+0x4a>
    a1dc:	4b60      	ldr	r3, [pc, #384]	; (a360 <operateOnEvent+0x1bc>)
    a1de:	4798      	blx	r3
    a1e0:	0003      	movs	r3, r0
    a1e2:	001a      	movs	r2, r3
    a1e4:	1d3b      	adds	r3, r7, #4
    a1e6:	781b      	ldrb	r3, [r3, #0]
    a1e8:	429a      	cmp	r2, r3
    a1ea:	d100      	bne.n	a1ee <operateOnEvent+0x4a>
    a1ec:	e0ab      	b.n	a346 <operateOnEvent+0x1a2>
	{
		return;
	}
	if (getMotorState())	//motorOn
    a1ee:	4b5b      	ldr	r3, [pc, #364]	; (a35c <operateOnEvent+0x1b8>)
    a1f0:	4798      	blx	r3
    a1f2:	1e03      	subs	r3, r0, #0
    a1f4:	d100      	bne.n	a1f8 <operateOnEvent+0x54>
    a1f6:	e066      	b.n	a2c6 <operateOnEvent+0x122>
	{
		if (t3Phase==AC_OFF && !tMotor && !tacPhase)	//acPower Cut Off
    a1f8:	1dfb      	adds	r3, r7, #7
    a1fa:	781b      	ldrb	r3, [r3, #0]
    a1fc:	2b00      	cmp	r3, #0
    a1fe:	d11e      	bne.n	a23e <operateOnEvent+0x9a>
    a200:	1d7b      	adds	r3, r7, #5
    a202:	781b      	ldrb	r3, [r3, #0]
    a204:	2201      	movs	r2, #1
    a206:	4053      	eors	r3, r2
    a208:	b2db      	uxtb	r3, r3
    a20a:	2b00      	cmp	r3, #0
    a20c:	d017      	beq.n	a23e <operateOnEvent+0x9a>
    a20e:	1d3b      	adds	r3, r7, #4
    a210:	781b      	ldrb	r3, [r3, #0]
    a212:	2201      	movs	r2, #1
    a214:	4053      	eors	r3, r2
    a216:	b2db      	uxtb	r3, r3
    a218:	2b00      	cmp	r3, #0
    a21a:	d010      	beq.n	a23e <operateOnEvent+0x9a>
		{
			stopMotor(false,true,false);
    a21c:	2200      	movs	r2, #0
    a21e:	2101      	movs	r1, #1
    a220:	2000      	movs	r0, #0
    a222:	4b50      	ldr	r3, [pc, #320]	; (a364 <operateOnEvent+0x1c0>)
    a224:	4798      	blx	r3
			THREEPHASE_OK_LED_OFF;
    a226:	2101      	movs	r1, #1
    a228:	2027      	movs	r0, #39	; 0x27
    a22a:	4b4f      	ldr	r3, [pc, #316]	; (a368 <operateOnEvent+0x1c4>)
    a22c:	4798      	blx	r3
			simEventTemp[6] = registerEvent('C'); //report To SIM Motor Off due to POWER CUT OFF
    a22e:	2043      	movs	r0, #67	; 0x43
    a230:	4b4e      	ldr	r3, [pc, #312]	; (a36c <operateOnEvent+0x1c8>)
    a232:	4798      	blx	r3
    a234:	0003      	movs	r3, r0
    a236:	001a      	movs	r2, r3
    a238:	4b4d      	ldr	r3, [pc, #308]	; (a370 <operateOnEvent+0x1cc>)
    a23a:	719a      	strb	r2, [r3, #6]
    a23c:	e078      	b.n	a330 <operateOnEvent+0x18c>
		}
		////////////////////////////////////////Unknown Motor Off Check ////////////////////////////////////////
		
		else if ((tacPhase && getACPowerState()) &&																										//AC PHASE PRESENT
    a23e:	1d3b      	adds	r3, r7, #4
    a240:	781b      	ldrb	r3, [r3, #0]
    a242:	2b00      	cmp	r3, #0
    a244:	d029      	beq.n	a29a <operateOnEvent+0xf6>
    a246:	4b46      	ldr	r3, [pc, #280]	; (a360 <operateOnEvent+0x1bc>)
    a248:	4798      	blx	r3
    a24a:	1e03      	subs	r3, r0, #0
    a24c:	d025      	beq.n	a29a <operateOnEvent+0xf6>
		((user_settings_parameter_struct.detectSinglePhasing && t3Phase==AC_3PH && getAllPhaseState()==AC_3PH) ||								//IF SPP ON, 3 phase old and current is present
    a24e:	4b49      	ldr	r3, [pc, #292]	; (a374 <operateOnEvent+0x1d0>)
    a250:	2220      	movs	r2, #32
    a252:	5c9b      	ldrb	r3, [r3, r2]
		else if ((tacPhase && getACPowerState()) &&																										//AC PHASE PRESENT
    a254:	2b00      	cmp	r3, #0
    a256:	d008      	beq.n	a26a <operateOnEvent+0xc6>
		((user_settings_parameter_struct.detectSinglePhasing && t3Phase==AC_3PH && getAllPhaseState()==AC_3PH) ||								//IF SPP ON, 3 phase old and current is present
    a258:	1dfb      	adds	r3, r7, #7
    a25a:	781b      	ldrb	r3, [r3, #0]
    a25c:	2b03      	cmp	r3, #3
    a25e:	d104      	bne.n	a26a <operateOnEvent+0xc6>
    a260:	4b3d      	ldr	r3, [pc, #244]	; (a358 <operateOnEvent+0x1b4>)
    a262:	4798      	blx	r3
    a264:	0003      	movs	r3, r0
    a266:	2b03      	cmp	r3, #3
    a268:	d00d      	beq.n	a286 <operateOnEvent+0xe2>
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
    a26a:	4b42      	ldr	r3, [pc, #264]	; (a374 <operateOnEvent+0x1d0>)
    a26c:	2220      	movs	r2, #32
    a26e:	5c9b      	ldrb	r3, [r3, r2]
		((user_settings_parameter_struct.detectSinglePhasing && t3Phase==AC_3PH && getAllPhaseState()==AC_3PH) ||								//IF SPP ON, 3 phase old and current is present
    a270:	2b00      	cmp	r3, #0
    a272:	d112      	bne.n	a29a <operateOnEvent+0xf6>
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
    a274:	1dfb      	adds	r3, r7, #7
    a276:	781b      	ldrb	r3, [r3, #0]
    a278:	2b01      	cmp	r3, #1
    a27a:	d90e      	bls.n	a29a <operateOnEvent+0xf6>
    a27c:	4b36      	ldr	r3, [pc, #216]	; (a358 <operateOnEvent+0x1b4>)
    a27e:	4798      	blx	r3
    a280:	0003      	movs	r3, r0
    a282:	2b01      	cmp	r3, #1
    a284:	d909      	bls.n	a29a <operateOnEvent+0xf6>
		(!tMotor))																																// AND MOTOR HAS TURNED OFF
    a286:	1d7b      	adds	r3, r7, #5
    a288:	781b      	ldrb	r3, [r3, #0]
    a28a:	2201      	movs	r2, #1
    a28c:	4053      	eors	r3, r2
    a28e:	b2db      	uxtb	r3, r3
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
    a290:	2b00      	cmp	r3, #0
    a292:	d002      	beq.n	a29a <operateOnEvent+0xf6>
		{
			unknownMotorOff();
    a294:	4b38      	ldr	r3, [pc, #224]	; (a378 <operateOnEvent+0x1d4>)
    a296:	4798      	blx	r3
    a298:	e04a      	b.n	a330 <operateOnEvent+0x18c>
		}
		///////////////////////// SINGLE PHASING CHECK /////////////////////////
		else if (user_settings_parameter_struct.detectSinglePhasing &&																						//SPP IS ON
    a29a:	4b36      	ldr	r3, [pc, #216]	; (a374 <operateOnEvent+0x1d0>)
    a29c:	2220      	movs	r2, #32
    a29e:	5c9b      	ldrb	r3, [r3, r2]
    a2a0:	2b00      	cmp	r3, #0
    a2a2:	d045      	beq.n	a330 <operateOnEvent+0x18c>
		t3Phase==AC_2PH &&																														// Only 2 Phase Present
    a2a4:	1dfb      	adds	r3, r7, #7
    a2a6:	781b      	ldrb	r3, [r3, #0]
		else if (user_settings_parameter_struct.detectSinglePhasing &&																						//SPP IS ON
    a2a8:	2b02      	cmp	r3, #2
    a2aa:	d141      	bne.n	a330 <operateOnEvent+0x18c>
		t3Phase==AC_2PH &&																														// Only 2 Phase Present
    a2ac:	1d3b      	adds	r3, r7, #4
    a2ae:	781b      	ldrb	r3, [r3, #0]
    a2b0:	2b00      	cmp	r3, #0
    a2b2:	d03d      	beq.n	a330 <operateOnEvent+0x18c>
		tacPhase) ////single phasing occured																									// AC Phase is Present
		{
			tempSinglePhasingTimer = xTaskGetTickCount();
    a2b4:	4b31      	ldr	r3, [pc, #196]	; (a37c <operateOnEvent+0x1d8>)
    a2b6:	4798      	blx	r3
    a2b8:	0002      	movs	r2, r0
    a2ba:	4b31      	ldr	r3, [pc, #196]	; (a380 <operateOnEvent+0x1dc>)
    a2bc:	601a      	str	r2, [r3, #0]
			singlePhasingTimerOn = true;
    a2be:	4b31      	ldr	r3, [pc, #196]	; (a384 <operateOnEvent+0x1e0>)
    a2c0:	2201      	movs	r2, #1
    a2c2:	701a      	strb	r2, [r3, #0]
    a2c4:	e034      	b.n	a330 <operateOnEvent+0x18c>
		}
	}
	else
	{
		if (tMotor)		// motor turn on manually
    a2c6:	1d7b      	adds	r3, r7, #5
    a2c8:	781b      	ldrb	r3, [r3, #0]
    a2ca:	2b00      	cmp	r3, #0
    a2cc:	d028      	beq.n	a320 <operateOnEvent+0x17c>
		{
			if (t3Phase==AC_3PH && tPhaseSeq && tacPhase)
    a2ce:	1dfb      	adds	r3, r7, #7
    a2d0:	781b      	ldrb	r3, [r3, #0]
    a2d2:	2b03      	cmp	r3, #3
    a2d4:	d11e      	bne.n	a314 <operateOnEvent+0x170>
    a2d6:	1dbb      	adds	r3, r7, #6
    a2d8:	781b      	ldrb	r3, [r3, #0]
    a2da:	2b00      	cmp	r3, #0
    a2dc:	d01a      	beq.n	a314 <operateOnEvent+0x170>
    a2de:	1d3b      	adds	r3, r7, #4
    a2e0:	781b      	ldrb	r3, [r3, #0]
    a2e2:	2b00      	cmp	r3, #0
    a2e4:	d016      	beq.n	a314 <operateOnEvent+0x170>
			{
				if (startTimerOn)
    a2e6:	4b28      	ldr	r3, [pc, #160]	; (a388 <operateOnEvent+0x1e4>)
    a2e8:	781b      	ldrb	r3, [r3, #0]
    a2ea:	2b00      	cmp	r3, #0
    a2ec:	d002      	beq.n	a2f4 <operateOnEvent+0x150>
				{
					startTimerOn = false;
    a2ee:	4b26      	ldr	r3, [pc, #152]	; (a388 <operateOnEvent+0x1e4>)
    a2f0:	2200      	movs	r2, #0
    a2f2:	701a      	strb	r2, [r3, #0]
				}
				THREEPHASE_OK_LED_ON;
    a2f4:	2100      	movs	r1, #0
    a2f6:	2027      	movs	r0, #39	; 0x27
    a2f8:	4b1b      	ldr	r3, [pc, #108]	; (a368 <operateOnEvent+0x1c4>)
    a2fa:	4798      	blx	r3
				simEventTemp[7] = registerEvent('S');	//register To SIM Motor has started
    a2fc:	2053      	movs	r0, #83	; 0x53
    a2fe:	4b1b      	ldr	r3, [pc, #108]	; (a36c <operateOnEvent+0x1c8>)
    a300:	4798      	blx	r3
    a302:	0003      	movs	r3, r0
    a304:	001a      	movs	r2, r3
    a306:	4b1a      	ldr	r3, [pc, #104]	; (a370 <operateOnEvent+0x1cc>)
    a308:	71da      	strb	r2, [r3, #7]
				startMotor(true,true);
    a30a:	2101      	movs	r1, #1
    a30c:	2001      	movs	r0, #1
    a30e:	4b1f      	ldr	r3, [pc, #124]	; (a38c <operateOnEvent+0x1e8>)
    a310:	4798      	blx	r3
    a312:	e00d      	b.n	a330 <operateOnEvent+0x18c>
			}
			else
			{
				stopMotor(false,true,false);
    a314:	2200      	movs	r2, #0
    a316:	2101      	movs	r1, #1
    a318:	2000      	movs	r0, #0
    a31a:	4b12      	ldr	r3, [pc, #72]	; (a364 <operateOnEvent+0x1c0>)
    a31c:	4798      	blx	r3
    a31e:	e007      	b.n	a330 <operateOnEvent+0x18c>
			}
		}
		else
		{
			waitStableLineOn = true;
    a320:	4b1b      	ldr	r3, [pc, #108]	; (a390 <operateOnEvent+0x1ec>)
    a322:	2201      	movs	r2, #1
    a324:	701a      	strb	r2, [r3, #0]
			waitStableLineTimer = xTaskGetTickCount();
    a326:	4b15      	ldr	r3, [pc, #84]	; (a37c <operateOnEvent+0x1d8>)
    a328:	4798      	blx	r3
    a32a:	0002      	movs	r2, r0
    a32c:	4b19      	ldr	r3, [pc, #100]	; (a394 <operateOnEvent+0x1f0>)
    a32e:	601a      	str	r2, [r3, #0]
		}
	}
	updateSensorState(t3Phase,tPhaseSeq, tMotor,tacPhase);
    a330:	1dfb      	adds	r3, r7, #7
    a332:	7818      	ldrb	r0, [r3, #0]
    a334:	1dbb      	adds	r3, r7, #6
    a336:	7819      	ldrb	r1, [r3, #0]
    a338:	1d7b      	adds	r3, r7, #5
    a33a:	781a      	ldrb	r2, [r3, #0]
    a33c:	1d3b      	adds	r3, r7, #4
    a33e:	781b      	ldrb	r3, [r3, #0]
    a340:	4c15      	ldr	r4, [pc, #84]	; (a398 <operateOnEvent+0x1f4>)
    a342:	47a0      	blx	r4
    a344:	e000      	b.n	a348 <operateOnEvent+0x1a4>
		return;
    a346:	46c0      	nop			; (mov r8, r8)
}
    a348:	46bd      	mov	sp, r7
    a34a:	b003      	add	sp, #12
    a34c:	bd90      	pop	{r4, r7, pc}
    a34e:	46c0      	nop			; (mov r8, r8)
    a350:	00009ea1 	.word	0x00009ea1
    a354:	20000707 	.word	0x20000707
    a358:	00009db5 	.word	0x00009db5
    a35c:	00009e1d 	.word	0x00009e1d
    a360:	00009d81 	.word	0x00009d81
    a364:	0000a6e9 	.word	0x0000a6e9
    a368:	000087ad 	.word	0x000087ad
    a36c:	00004679 	.word	0x00004679
    a370:	200006f0 	.word	0x200006f0
    a374:	2000064c 	.word	0x2000064c
    a378:	0000a7dd 	.word	0x0000a7dd
    a37c:	0000f1fd 	.word	0x0000f1fd
    a380:	20000748 	.word	0x20000748
    a384:	20000759 	.word	0x20000759
    a388:	20000762 	.word	0x20000762
    a38c:	0000a52d 	.word	0x0000a52d
    a390:	200007b5 	.word	0x200007b5
    a394:	20000784 	.word	0x20000784
    a398:	00009ffd 	.word	0x00009ffd

0000a39c <checkLineSensors>:

uint8_t checkLineSensors(void)
{
    a39c:	b580      	push	{r7, lr}
    a39e:	af00      	add	r7, sp, #0
	return structThreePhase_state.u8t_phase_ac_state;
    a3a0:	4b02      	ldr	r3, [pc, #8]	; (a3ac <checkLineSensors+0x10>)
    a3a2:	785b      	ldrb	r3, [r3, #1]
    a3a4:	b2db      	uxtb	r3, r3
}
    a3a6:	0018      	movs	r0, r3
    a3a8:	46bd      	mov	sp, r7
    a3aa:	bd80      	pop	{r7, pc}
    a3ac:	20000710 	.word	0x20000710

0000a3b0 <operateOnStableLine>:

void operateOnStableLine(void)
{
    a3b0:	b590      	push	{r4, r7, lr}
    a3b2:	b083      	sub	sp, #12
    a3b4:	af00      	add	r7, sp, #0
	waitStableLineOn = false;
    a3b6:	4b41      	ldr	r3, [pc, #260]	; (a4bc <operateOnStableLine+0x10c>)
    a3b8:	2200      	movs	r2, #0
    a3ba:	701a      	strb	r2, [r3, #0]
	uint8_t temp = checkLineSensors();
    a3bc:	1dbc      	adds	r4, r7, #6
    a3be:	4b40      	ldr	r3, [pc, #256]	; (a4c0 <operateOnStableLine+0x110>)
    a3c0:	4798      	blx	r3
    a3c2:	0003      	movs	r3, r0
    a3c4:	7023      	strb	r3, [r4, #0]
	if (temp == AC_3PH)
    a3c6:	1dbb      	adds	r3, r7, #6
    a3c8:	781b      	ldrb	r3, [r3, #0]
    a3ca:	2b03      	cmp	r3, #3
    a3cc:	d133      	bne.n	a436 <operateOnStableLine+0x86>
	{
		bool tempPhaseSeq = true;													//Set Temp Phase Seq to True
    a3ce:	1dfb      	adds	r3, r7, #7
    a3d0:	2201      	movs	r2, #1
    a3d2:	701a      	strb	r2, [r3, #0]
		if(user_settings_parameter_struct.detectPhaseSequence)						// if Sequence Detection is needed
    a3d4:	4b3b      	ldr	r3, [pc, #236]	; (a4c4 <operateOnStableLine+0x114>)
    a3d6:	2224      	movs	r2, #36	; 0x24
    a3d8:	5c9b      	ldrb	r3, [r3, r2]
    a3da:	2b00      	cmp	r3, #0
    a3dc:	d004      	beq.n	a3e8 <operateOnStableLine+0x38>
		{
			tempPhaseSeq = getPhaseSequence();										// set current phase seq to the temp variable
    a3de:	1dfc      	adds	r4, r7, #7
    a3e0:	4b39      	ldr	r3, [pc, #228]	; (a4c8 <operateOnStableLine+0x118>)
    a3e2:	4798      	blx	r3
    a3e4:	0003      	movs	r3, r0
    a3e6:	7023      	strb	r3, [r4, #0]
		}
		
		if(tempPhaseSeq)															// if correct phase seq than
    a3e8:	1dfb      	adds	r3, r7, #7
    a3ea:	781b      	ldrb	r3, [r3, #0]
    a3ec:	2b00      	cmp	r3, #0
    a3ee:	d016      	beq.n	a41e <operateOnStableLine+0x6e>
		{
			THREEPHASE_OK_LED_ON;
    a3f0:	2100      	movs	r1, #0
    a3f2:	2027      	movs	r0, #39	; 0x27
    a3f4:	4b35      	ldr	r3, [pc, #212]	; (a4cc <operateOnStableLine+0x11c>)
    a3f6:	4798      	blx	r3
			if (user_settings_parameter_struct.autoStartAddress)
    a3f8:	4b32      	ldr	r3, [pc, #200]	; (a4c4 <operateOnStableLine+0x114>)
    a3fa:	785b      	ldrb	r3, [r3, #1]
    a3fc:	2b00      	cmp	r3, #0
    a3fe:	d002      	beq.n	a406 <operateOnStableLine+0x56>
			{
				triggerAutoStart();
    a400:	4b33      	ldr	r3, [pc, #204]	; (a4d0 <operateOnStableLine+0x120>)
    a402:	4798      	blx	r3
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
		{
			simEventTemp[5] = registerEvent('L'); //register To SIM AC Power OFF
		}
	}
}
    a404:	e055      	b.n	a4b2 <operateOnStableLine+0x102>
				if (user_settings_parameter_struct.dndAddress!=DND_LIGHT)			//DND IS OFF FOR ALL 3 PHASE LIGHT EVENTS, DND IS ON FOR SINGLE PHASING EVENTS
    a406:	4b2f      	ldr	r3, [pc, #188]	; (a4c4 <operateOnStableLine+0x114>)
    a408:	791b      	ldrb	r3, [r3, #4]
    a40a:	2b4c      	cmp	r3, #76	; 0x4c
    a40c:	d051      	beq.n	a4b2 <operateOnStableLine+0x102>
					simEventTemp[4] = registerEvent('G');							//register TO SIM AC power ON
    a40e:	2047      	movs	r0, #71	; 0x47
    a410:	4b30      	ldr	r3, [pc, #192]	; (a4d4 <operateOnStableLine+0x124>)
    a412:	4798      	blx	r3
    a414:	0003      	movs	r3, r0
    a416:	001a      	movs	r2, r3
    a418:	4b2f      	ldr	r3, [pc, #188]	; (a4d8 <operateOnStableLine+0x128>)
    a41a:	711a      	strb	r2, [r3, #4]
}
    a41c:	e049      	b.n	a4b2 <operateOnStableLine+0x102>
			THREEPHASE_OK_LED_OFF;
    a41e:	2101      	movs	r1, #1
    a420:	2027      	movs	r0, #39	; 0x27
    a422:	4b2a      	ldr	r3, [pc, #168]	; (a4cc <operateOnStableLine+0x11c>)
    a424:	4798      	blx	r3
			simEventTemp[9] = registerEvent('A');								//incorrect sequence
    a426:	2041      	movs	r0, #65	; 0x41
    a428:	4b2a      	ldr	r3, [pc, #168]	; (a4d4 <operateOnStableLine+0x124>)
    a42a:	4798      	blx	r3
    a42c:	0003      	movs	r3, r0
    a42e:	001a      	movs	r2, r3
    a430:	4b29      	ldr	r3, [pc, #164]	; (a4d8 <operateOnStableLine+0x128>)
    a432:	725a      	strb	r2, [r3, #9]
}
    a434:	e03d      	b.n	a4b2 <operateOnStableLine+0x102>
	else if (temp == AC_2PH) //Got Power in 2 phase
    a436:	1dbb      	adds	r3, r7, #6
    a438:	781b      	ldrb	r3, [r3, #0]
    a43a:	2b02      	cmp	r3, #2
    a43c:	d114      	bne.n	a468 <operateOnStableLine+0xb8>
		THREEPHASE_OK_LED_OFF;
    a43e:	2101      	movs	r1, #1
    a440:	2027      	movs	r0, #39	; 0x27
    a442:	4b22      	ldr	r3, [pc, #136]	; (a4cc <operateOnStableLine+0x11c>)
    a444:	4798      	blx	r3
		if (user_settings_parameter_struct.dndAddress == DND_OFF &&					//DND IS OFF FOR ALL KIND OF EVENTS
    a446:	4b1f      	ldr	r3, [pc, #124]	; (a4c4 <operateOnStableLine+0x114>)
    a448:	791b      	ldrb	r3, [r3, #4]
    a44a:	2b4f      	cmp	r3, #79	; 0x4f
    a44c:	d131      	bne.n	a4b2 <operateOnStableLine+0x102>
		!user_settings_parameter_struct.detectSinglePhasing)					//SINGLE PHASING PROTECTION IS ON
    a44e:	4b1d      	ldr	r3, [pc, #116]	; (a4c4 <operateOnStableLine+0x114>)
    a450:	2220      	movs	r2, #32
    a452:	5c9b      	ldrb	r3, [r3, r2]
		if (user_settings_parameter_struct.dndAddress == DND_OFF &&					//DND IS OFF FOR ALL KIND OF EVENTS
    a454:	2b00      	cmp	r3, #0
    a456:	d12c      	bne.n	a4b2 <operateOnStableLine+0x102>
			simEventTemp[9] = registerEvent('A'); //register TO SIM 2 phase power ON
    a458:	2041      	movs	r0, #65	; 0x41
    a45a:	4b1e      	ldr	r3, [pc, #120]	; (a4d4 <operateOnStableLine+0x124>)
    a45c:	4798      	blx	r3
    a45e:	0003      	movs	r3, r0
    a460:	001a      	movs	r2, r3
    a462:	4b1d      	ldr	r3, [pc, #116]	; (a4d8 <operateOnStableLine+0x128>)
    a464:	725a      	strb	r2, [r3, #9]
}
    a466:	e024      	b.n	a4b2 <operateOnStableLine+0x102>
	else if (temp == AC_OFF)	//Lost Power in All Phase
    a468:	1dbb      	adds	r3, r7, #6
    a46a:	781b      	ldrb	r3, [r3, #0]
    a46c:	2b00      	cmp	r3, #0
    a46e:	d120      	bne.n	a4b2 <operateOnStableLine+0x102>
		THREEPHASE_OK_LED_OFF;
    a470:	2101      	movs	r1, #1
    a472:	2027      	movs	r0, #39	; 0x27
    a474:	4b15      	ldr	r3, [pc, #84]	; (a4cc <operateOnStableLine+0x11c>)
    a476:	4798      	blx	r3
		if ((user_settings_parameter_struct.dndAddress == DND_OFF) ||												//DND IS OFF FOR ALL EVENTS
    a478:	4b12      	ldr	r3, [pc, #72]	; (a4c4 <operateOnStableLine+0x114>)
    a47a:	791b      	ldrb	r3, [r3, #4]
    a47c:	2b4f      	cmp	r3, #79	; 0x4f
    a47e:	d011      	beq.n	a4a4 <operateOnStableLine+0xf4>
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
    a480:	4b16      	ldr	r3, [pc, #88]	; (a4dc <operateOnStableLine+0x12c>)
    a482:	781b      	ldrb	r3, [r3, #0]
    a484:	b2db      	uxtb	r3, r3
		if ((user_settings_parameter_struct.dndAddress == DND_OFF) ||												//DND IS OFF FOR ALL EVENTS
    a486:	2b02      	cmp	r3, #2
    a488:	d103      	bne.n	a492 <operateOnStableLine+0xe2>
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
    a48a:	4b0e      	ldr	r3, [pc, #56]	; (a4c4 <operateOnStableLine+0x114>)
    a48c:	791b      	ldrb	r3, [r3, #4]
    a48e:	2b4f      	cmp	r3, #79	; 0x4f
    a490:	d008      	beq.n	a4a4 <operateOnStableLine+0xf4>
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
    a492:	4b12      	ldr	r3, [pc, #72]	; (a4dc <operateOnStableLine+0x12c>)
    a494:	781b      	ldrb	r3, [r3, #0]
    a496:	b2db      	uxtb	r3, r3
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
    a498:	2b03      	cmp	r3, #3
    a49a:	d10a      	bne.n	a4b2 <operateOnStableLine+0x102>
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
    a49c:	4b09      	ldr	r3, [pc, #36]	; (a4c4 <operateOnStableLine+0x114>)
    a49e:	791b      	ldrb	r3, [r3, #4]
    a4a0:	2b4c      	cmp	r3, #76	; 0x4c
    a4a2:	d006      	beq.n	a4b2 <operateOnStableLine+0x102>
			simEventTemp[5] = registerEvent('L'); //register To SIM AC Power OFF
    a4a4:	204c      	movs	r0, #76	; 0x4c
    a4a6:	4b0b      	ldr	r3, [pc, #44]	; (a4d4 <operateOnStableLine+0x124>)
    a4a8:	4798      	blx	r3
    a4aa:	0003      	movs	r3, r0
    a4ac:	001a      	movs	r2, r3
    a4ae:	4b0a      	ldr	r3, [pc, #40]	; (a4d8 <operateOnStableLine+0x128>)
    a4b0:	715a      	strb	r2, [r3, #5]
}
    a4b2:	46c0      	nop			; (mov r8, r8)
    a4b4:	46bd      	mov	sp, r7
    a4b6:	b003      	add	sp, #12
    a4b8:	bd90      	pop	{r4, r7, pc}
    a4ba:	46c0      	nop			; (mov r8, r8)
    a4bc:	200007b5 	.word	0x200007b5
    a4c0:	0000a39d 	.word	0x0000a39d
    a4c4:	2000064c 	.word	0x2000064c
    a4c8:	00009de9 	.word	0x00009de9
    a4cc:	000087ad 	.word	0x000087ad
    a4d0:	0000a151 	.word	0x0000a151
    a4d4:	00004679 	.word	0x00004679
    a4d8:	200006f0 	.word	0x200006f0
    a4dc:	20000703 	.word	0x20000703

0000a4e0 <waitStableLineOver>:

bool waitStableLineOver(void)
{
    a4e0:	b580      	push	{r7, lr}
    a4e2:	af00      	add	r7, sp, #0
	return (waitStableLineOn && xTaskGetTickCount() - waitStableLineTimer >= (waitStableLineTime * 100));
    a4e4:	4b0d      	ldr	r3, [pc, #52]	; (a51c <waitStableLineOver+0x3c>)
    a4e6:	781b      	ldrb	r3, [r3, #0]
    a4e8:	2b00      	cmp	r3, #0
    a4ea:	d00e      	beq.n	a50a <waitStableLineOver+0x2a>
    a4ec:	4b0c      	ldr	r3, [pc, #48]	; (a520 <waitStableLineOver+0x40>)
    a4ee:	4798      	blx	r3
    a4f0:	0002      	movs	r2, r0
    a4f2:	4b0c      	ldr	r3, [pc, #48]	; (a524 <waitStableLineOver+0x44>)
    a4f4:	681b      	ldr	r3, [r3, #0]
    a4f6:	1ad3      	subs	r3, r2, r3
    a4f8:	4a0b      	ldr	r2, [pc, #44]	; (a528 <waitStableLineOver+0x48>)
    a4fa:	7812      	ldrb	r2, [r2, #0]
    a4fc:	0011      	movs	r1, r2
    a4fe:	2264      	movs	r2, #100	; 0x64
    a500:	434a      	muls	r2, r1
    a502:	4293      	cmp	r3, r2
    a504:	d301      	bcc.n	a50a <waitStableLineOver+0x2a>
    a506:	2301      	movs	r3, #1
    a508:	e000      	b.n	a50c <waitStableLineOver+0x2c>
    a50a:	2300      	movs	r3, #0
    a50c:	1c1a      	adds	r2, r3, #0
    a50e:	2301      	movs	r3, #1
    a510:	4013      	ands	r3, r2
    a512:	b2db      	uxtb	r3, r3
}
    a514:	0018      	movs	r0, r3
    a516:	46bd      	mov	sp, r7
    a518:	bd80      	pop	{r7, pc}
    a51a:	46c0      	nop			; (mov r8, r8)
    a51c:	200007b5 	.word	0x200007b5
    a520:	0000f1fd 	.word	0x0000f1fd
    a524:	20000784 	.word	0x20000784
    a528:	20000799 	.word	0x20000799

0000a52c <startMotor>:


void startMotor(bool commanded, bool forcedStart)
{
    a52c:	b580      	push	{r7, lr}
    a52e:	b082      	sub	sp, #8
    a530:	af00      	add	r7, sp, #0
    a532:	0002      	movs	r2, r0
    a534:	1dfb      	adds	r3, r7, #7
    a536:	701a      	strb	r2, [r3, #0]
    a538:	1dbb      	adds	r3, r7, #6
    a53a:	1c0a      	adds	r2, r1, #0
    a53c:	701a      	strb	r2, [r3, #0]
	startTimerOn = false;
    a53e:	4b56      	ldr	r3, [pc, #344]	; (a698 <startMotor+0x16c>)
    a540:	2200      	movs	r2, #0
    a542:	701a      	strb	r2, [r3, #0]
	
	if (forcedStart || (getACPowerState() &&																														//AC Phase is Presnet
    a544:	1dbb      	adds	r3, r7, #6
    a546:	781b      	ldrb	r3, [r3, #0]
    a548:	2b00      	cmp	r3, #0
    a54a:	d124      	bne.n	a596 <startMotor+0x6a>
    a54c:	4b53      	ldr	r3, [pc, #332]	; (a69c <startMotor+0x170>)
    a54e:	4798      	blx	r3
    a550:	1e03      	subs	r3, r0, #0
    a552:	d100      	bne.n	a556 <startMotor+0x2a>
    a554:	e08b      	b.n	a66e <startMotor+0x142>
	((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
    a556:	4b52      	ldr	r3, [pc, #328]	; (a6a0 <startMotor+0x174>)
    a558:	4798      	blx	r3
    a55a:	0003      	movs	r3, r0
	if (forcedStart || (getACPowerState() &&																														//AC Phase is Presnet
    a55c:	2b03      	cmp	r3, #3
    a55e:	d00b      	beq.n	a578 <startMotor+0x4c>
	((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
    a560:	4b4f      	ldr	r3, [pc, #316]	; (a6a0 <startMotor+0x174>)
    a562:	4798      	blx	r3
    a564:	0003      	movs	r3, r0
    a566:	2b02      	cmp	r3, #2
    a568:	d000      	beq.n	a56c <startMotor+0x40>
    a56a:	e080      	b.n	a66e <startMotor+0x142>
    a56c:	4b4d      	ldr	r3, [pc, #308]	; (a6a4 <startMotor+0x178>)
    a56e:	2220      	movs	r2, #32
    a570:	5c9b      	ldrb	r3, [r3, r2]
    a572:	2b00      	cmp	r3, #0
    a574:	d000      	beq.n	a578 <startMotor+0x4c>
    a576:	e07a      	b.n	a66e <startMotor+0x142>
	((user_settings_parameter_struct.detectPhaseSequence && getPhaseSequence()) || (!user_settings_parameter_struct.detectPhaseSequence))))	//Phase Sequnce Protection is ON and correct phase seq, or Phase Seq Protection is off
    a578:	4b4a      	ldr	r3, [pc, #296]	; (a6a4 <startMotor+0x178>)
    a57a:	2224      	movs	r2, #36	; 0x24
    a57c:	5c9b      	ldrb	r3, [r3, r2]
	((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
    a57e:	2b00      	cmp	r3, #0
    a580:	d003      	beq.n	a58a <startMotor+0x5e>
	((user_settings_parameter_struct.detectPhaseSequence && getPhaseSequence()) || (!user_settings_parameter_struct.detectPhaseSequence))))	//Phase Sequnce Protection is ON and correct phase seq, or Phase Seq Protection is off
    a582:	4b49      	ldr	r3, [pc, #292]	; (a6a8 <startMotor+0x17c>)
    a584:	4798      	blx	r3
    a586:	1e03      	subs	r3, r0, #0
    a588:	d105      	bne.n	a596 <startMotor+0x6a>
    a58a:	4b46      	ldr	r3, [pc, #280]	; (a6a4 <startMotor+0x178>)
    a58c:	2224      	movs	r2, #36	; 0x24
    a58e:	5c9b      	ldrb	r3, [r3, r2]
    a590:	2b00      	cmp	r3, #0
    a592:	d000      	beq.n	a596 <startMotor+0x6a>
    a594:	e06b      	b.n	a66e <startMotor+0x142>
	{
		if (!getMotorState())
    a596:	4b45      	ldr	r3, [pc, #276]	; (a6ac <startMotor+0x180>)
    a598:	4798      	blx	r3
    a59a:	0003      	movs	r3, r0
    a59c:	001a      	movs	r2, r3
    a59e:	2301      	movs	r3, #1
    a5a0:	4053      	eors	r3, r2
    a5a2:	b2db      	uxtb	r3, r3
    a5a4:	2b00      	cmp	r3, #0
    a5a6:	d05a      	beq.n	a65e <startMotor+0x132>
		{
			if (factory_settings_parameter_struct.ENABLE_WATER)
    a5a8:	4b41      	ldr	r3, [pc, #260]	; (a6b0 <startMotor+0x184>)
    a5aa:	795b      	ldrb	r3, [r3, #5]
    a5ac:	2b00      	cmp	r3, #0
    a5ae:	d034      	beq.n	a61a <startMotor+0xee>
			{
				if(!(user_settings_parameter_struct.waterBypassAddress) && getWaterSensorState()==CRITICALLEVEL)
    a5b0:	4b3c      	ldr	r3, [pc, #240]	; (a6a4 <startMotor+0x178>)
    a5b2:	7fdb      	ldrb	r3, [r3, #31]
    a5b4:	2b00      	cmp	r3, #0
    a5b6:	d113      	bne.n	a5e0 <startMotor+0xb4>
    a5b8:	4b3e      	ldr	r3, [pc, #248]	; (a6b4 <startMotor+0x188>)
    a5ba:	4798      	blx	r3
    a5bc:	1e03      	subs	r3, r0, #0
    a5be:	d10f      	bne.n	a5e0 <startMotor+0xb4>
				{
					if (commanded)
    a5c0:	1dfb      	adds	r3, r7, #7
    a5c2:	781b      	ldrb	r3, [r3, #0]
    a5c4:	2b00      	cmp	r3, #0
    a5c6:	d003      	beq.n	a5d0 <startMotor+0xa4>
					{
						setMotorMGRResponse('T');	//cannot start motor due to some problem
    a5c8:	2054      	movs	r0, #84	; 0x54
    a5ca:	4b3b      	ldr	r3, [pc, #236]	; (a6b8 <startMotor+0x18c>)
    a5cc:	4798      	blx	r3
					}
					else
					{
						simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
					}
					return;
    a5ce:	e05f      	b.n	a690 <startMotor+0x164>
						simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
    a5d0:	204e      	movs	r0, #78	; 0x4e
    a5d2:	4b3a      	ldr	r3, [pc, #232]	; (a6bc <startMotor+0x190>)
    a5d4:	4798      	blx	r3
    a5d6:	0003      	movs	r3, r0
    a5d8:	001a      	movs	r2, r3
    a5da:	4b39      	ldr	r3, [pc, #228]	; (a6c0 <startMotor+0x194>)
    a5dc:	701a      	strb	r2, [r3, #0]
					return;
    a5de:	e057      	b.n	a690 <startMotor+0x164>
				}
				
				if (factory_settings_parameter_struct.ENABLE_GP)
    a5e0:	4b33      	ldr	r3, [pc, #204]	; (a6b0 <startMotor+0x184>)
    a5e2:	791b      	ldrb	r3, [r3, #4]
    a5e4:	2b00      	cmp	r3, #0
    a5e6:	d018      	beq.n	a61a <startMotor+0xee>
				{
					if(!(user_settings_parameter_struct.waterBypassAddress) && getOverHeadWaterSensorState()==OVERHEADHIGHLEVEL)
    a5e8:	4b2e      	ldr	r3, [pc, #184]	; (a6a4 <startMotor+0x178>)
    a5ea:	7fdb      	ldrb	r3, [r3, #31]
    a5ec:	2b00      	cmp	r3, #0
    a5ee:	d114      	bne.n	a61a <startMotor+0xee>
    a5f0:	4b34      	ldr	r3, [pc, #208]	; (a6c4 <startMotor+0x198>)
    a5f2:	4798      	blx	r3
    a5f4:	0003      	movs	r3, r0
    a5f6:	2b02      	cmp	r3, #2
    a5f8:	d10f      	bne.n	a61a <startMotor+0xee>
					{
						if(commanded)
    a5fa:	1dfb      	adds	r3, r7, #7
    a5fc:	781b      	ldrb	r3, [r3, #0]
    a5fe:	2b00      	cmp	r3, #0
    a600:	d003      	beq.n	a60a <startMotor+0xde>
						{
							setMotorMGRResponse('V');	//cannot start motor as OverHead Tank Full.
    a602:	2056      	movs	r0, #86	; 0x56
    a604:	4b2c      	ldr	r3, [pc, #176]	; (a6b8 <startMotor+0x18c>)
    a606:	4798      	blx	r3
						}
						else
						{
							simEventTemp[17] = registerEvent('V');//register To SIM motor not started due to ANY REASON
						}
						return;
    a608:	e042      	b.n	a690 <startMotor+0x164>
							simEventTemp[17] = registerEvent('V');//register To SIM motor not started due to ANY REASON
    a60a:	2056      	movs	r0, #86	; 0x56
    a60c:	4b2b      	ldr	r3, [pc, #172]	; (a6bc <startMotor+0x190>)
    a60e:	4798      	blx	r3
    a610:	0003      	movs	r3, r0
    a612:	001a      	movs	r2, r3
    a614:	4b2a      	ldr	r3, [pc, #168]	; (a6c0 <startMotor+0x194>)
    a616:	745a      	strb	r2, [r3, #17]
						return;
    a618:	e03a      	b.n	a690 <startMotor+0x164>
					}
				}
			}

			STOP_RELAY_ON;
    a61a:	2101      	movs	r1, #1
    a61c:	202c      	movs	r0, #44	; 0x2c
    a61e:	4b2a      	ldr	r3, [pc, #168]	; (a6c8 <startMotor+0x19c>)
    a620:	4798      	blx	r3
			START_RELAY_ON;
    a622:	2101      	movs	r1, #1
    a624:	202d      	movs	r0, #45	; 0x2d
    a626:	4b28      	ldr	r3, [pc, #160]	; (a6c8 <startMotor+0x19c>)
    a628:	4798      	blx	r3
			//MOTOR_ON_LED_ON;
			tempStartSequenceTimer = xTaskGetTickCount();
    a62a:	4b28      	ldr	r3, [pc, #160]	; (a6cc <startMotor+0x1a0>)
    a62c:	4798      	blx	r3
    a62e:	0002      	movs	r2, r0
    a630:	4b27      	ldr	r3, [pc, #156]	; (a6d0 <startMotor+0x1a4>)
    a632:	601a      	str	r2, [r3, #0]
			startSequenceOn = true;
    a634:	4b27      	ldr	r3, [pc, #156]	; (a6d4 <startMotor+0x1a8>)
    a636:	2201      	movs	r2, #1
    a638:	701a      	strb	r2, [r3, #0]
			setMotorState(true);
    a63a:	2001      	movs	r0, #1
    a63c:	4b26      	ldr	r3, [pc, #152]	; (a6d8 <startMotor+0x1ac>)
    a63e:	4798      	blx	r3
			if (factory_settings_parameter_struct.ENABLE_CURRENT)
    a640:	4b1b      	ldr	r3, [pc, #108]	; (a6b0 <startMotor+0x184>)
    a642:	785b      	ldrb	r3, [r3, #1]
    a644:	2b00      	cmp	r3, #0
    a646:	d005      	beq.n	a654 <startMotor+0x128>
			{
				enableCurrentBuffer=false;
    a648:	4b24      	ldr	r3, [pc, #144]	; (a6dc <startMotor+0x1b0>)
    a64a:	2200      	movs	r2, #0
    a64c:	701a      	strb	r2, [r3, #0]
				lastCurrentReading=CR_NORMAL;
    a64e:	4b24      	ldr	r3, [pc, #144]	; (a6e0 <startMotor+0x1b4>)
    a650:	2200      	movs	r2, #0
    a652:	701a      	strb	r2, [r3, #0]
			}
			gotOnCommand = commanded;
    a654:	4b23      	ldr	r3, [pc, #140]	; (a6e4 <startMotor+0x1b8>)
    a656:	1dfa      	adds	r2, r7, #7
    a658:	7812      	ldrb	r2, [r2, #0]
    a65a:	701a      	strb	r2, [r3, #0]
		if (!getMotorState())
    a65c:	e017      	b.n	a68e <startMotor+0x162>
		}
		else
		{
			if (commanded)
    a65e:	1dfb      	adds	r3, r7, #7
    a660:	781b      	ldrb	r3, [r3, #0]
    a662:	2b00      	cmp	r3, #0
    a664:	d013      	beq.n	a68e <startMotor+0x162>
			{
				setMotorMGRResponse('+');		//motor is already on
    a666:	202b      	movs	r0, #43	; 0x2b
    a668:	4b13      	ldr	r3, [pc, #76]	; (a6b8 <startMotor+0x18c>)
    a66a:	4798      	blx	r3
		if (!getMotorState())
    a66c:	e00f      	b.n	a68e <startMotor+0x162>
			}
		}
	}
	else
	{
		if (commanded)
    a66e:	1dfb      	adds	r3, r7, #7
    a670:	781b      	ldrb	r3, [r3, #0]
    a672:	2b00      	cmp	r3, #0
    a674:	d003      	beq.n	a67e <startMotor+0x152>
		{
			setMotorMGRResponse('N');	//cannot start motor due to some problem
    a676:	204e      	movs	r0, #78	; 0x4e
    a678:	4b0f      	ldr	r3, [pc, #60]	; (a6b8 <startMotor+0x18c>)
    a67a:	4798      	blx	r3
    a67c:	e008      	b.n	a690 <startMotor+0x164>
		}
		else
		{
			simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
    a67e:	204e      	movs	r0, #78	; 0x4e
    a680:	4b0e      	ldr	r3, [pc, #56]	; (a6bc <startMotor+0x190>)
    a682:	4798      	blx	r3
    a684:	0003      	movs	r3, r0
    a686:	001a      	movs	r2, r3
    a688:	4b0d      	ldr	r3, [pc, #52]	; (a6c0 <startMotor+0x194>)
    a68a:	701a      	strb	r2, [r3, #0]
    a68c:	e000      	b.n	a690 <startMotor+0x164>
		if (!getMotorState())
    a68e:	46c0      	nop			; (mov r8, r8)
		}
	}
}
    a690:	46bd      	mov	sp, r7
    a692:	b002      	add	sp, #8
    a694:	bd80      	pop	{r7, pc}
    a696:	46c0      	nop			; (mov r8, r8)
    a698:	20000762 	.word	0x20000762
    a69c:	00009d81 	.word	0x00009d81
    a6a0:	00009db5 	.word	0x00009db5
    a6a4:	2000064c 	.word	0x2000064c
    a6a8:	00009de9 	.word	0x00009de9
    a6ac:	00009e1d 	.word	0x00009e1d
    a6b0:	20000618 	.word	0x20000618
    a6b4:	00008b41 	.word	0x00008b41
    a6b8:	00004851 	.word	0x00004851
    a6bc:	00004679 	.word	0x00004679
    a6c0:	200006f0 	.word	0x200006f0
    a6c4:	00008a11 	.word	0x00008a11
    a6c8:	000087ad 	.word	0x000087ad
    a6cc:	0000f1fd 	.word	0x0000f1fd
    a6d0:	2000075c 	.word	0x2000075c
    a6d4:	20000761 	.word	0x20000761
    a6d8:	00009e31 	.word	0x00009e31
    a6dc:	20000728 	.word	0x20000728
    a6e0:	2000074e 	.word	0x2000074e
    a6e4:	200006ec 	.word	0x200006ec

0000a6e8 <stopMotor>:

void stopMotor(bool commanded, bool forceStop,bool offButton)
{
    a6e8:	b590      	push	{r4, r7, lr}
    a6ea:	b083      	sub	sp, #12
    a6ec:	af00      	add	r7, sp, #0
    a6ee:	0004      	movs	r4, r0
    a6f0:	0008      	movs	r0, r1
    a6f2:	0011      	movs	r1, r2
    a6f4:	1dfb      	adds	r3, r7, #7
    a6f6:	1c22      	adds	r2, r4, #0
    a6f8:	701a      	strb	r2, [r3, #0]
    a6fa:	1dbb      	adds	r3, r7, #6
    a6fc:	1c02      	adds	r2, r0, #0
    a6fe:	701a      	strb	r2, [r3, #0]
    a700:	1d7b      	adds	r3, r7, #5
    a702:	1c0a      	adds	r2, r1, #0
    a704:	701a      	strb	r2, [r3, #0]
	if (forceStop || getMotorState())
    a706:	1dbb      	adds	r3, r7, #6
    a708:	781b      	ldrb	r3, [r3, #0]
    a70a:	2b00      	cmp	r3, #0
    a70c:	d103      	bne.n	a716 <stopMotor+0x2e>
    a70e:	4b19      	ldr	r3, [pc, #100]	; (a774 <stopMotor+0x8c>)
    a710:	4798      	blx	r3
    a712:	1e03      	subs	r3, r0, #0
    a714:	d021      	beq.n	a75a <stopMotor+0x72>
	{
		singlePhasingTimerOn = false;
    a716:	4b18      	ldr	r3, [pc, #96]	; (a778 <stopMotor+0x90>)
    a718:	2200      	movs	r2, #0
    a71a:	701a      	strb	r2, [r3, #0]
		STOP_RELAY_OFF;
    a71c:	2100      	movs	r1, #0
    a71e:	202c      	movs	r0, #44	; 0x2c
    a720:	4b16      	ldr	r3, [pc, #88]	; (a77c <stopMotor+0x94>)
    a722:	4798      	blx	r3
		tempStopSequenceTimer = xTaskGetTickCount();
    a724:	4b16      	ldr	r3, [pc, #88]	; (a780 <stopMotor+0x98>)
    a726:	4798      	blx	r3
    a728:	0002      	movs	r2, r0
    a72a:	4b16      	ldr	r3, [pc, #88]	; (a784 <stopMotor+0x9c>)
    a72c:	601a      	str	r2, [r3, #0]
		stopSequenceOn = true;
    a72e:	4b16      	ldr	r3, [pc, #88]	; (a788 <stopMotor+0xa0>)
    a730:	2201      	movs	r2, #1
    a732:	701a      	strb	r2, [r3, #0]
		setMotorState(false);
    a734:	2000      	movs	r0, #0
    a736:	4b15      	ldr	r3, [pc, #84]	; (a78c <stopMotor+0xa4>)
    a738:	4798      	blx	r3
		gotOffCommand = commanded;
    a73a:	4b15      	ldr	r3, [pc, #84]	; (a790 <stopMotor+0xa8>)
    a73c:	1dfa      	adds	r2, r7, #7
    a73e:	7812      	ldrb	r2, [r2, #0]
    a740:	701a      	strb	r2, [r3, #0]
		offButtonPressed=offButton;
    a742:	4b14      	ldr	r3, [pc, #80]	; (a794 <stopMotor+0xac>)
    a744:	1d7a      	adds	r2, r7, #5
    a746:	7812      	ldrb	r2, [r2, #0]
    a748:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
    a74a:	4b13      	ldr	r3, [pc, #76]	; (a798 <stopMotor+0xb0>)
    a74c:	785b      	ldrb	r3, [r3, #1]
    a74e:	2b00      	cmp	r3, #0
    a750:	d00b      	beq.n	a76a <stopMotor+0x82>
		{
			lastCurrentReading=CR_NORMAL;			//to make the current readings normal
    a752:	4b12      	ldr	r3, [pc, #72]	; (a79c <stopMotor+0xb4>)
    a754:	2200      	movs	r2, #0
    a756:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
    a758:	e007      	b.n	a76a <stopMotor+0x82>
		}
	}
	else
	{
		if (commanded)
    a75a:	1dfb      	adds	r3, r7, #7
    a75c:	781b      	ldrb	r3, [r3, #0]
    a75e:	2b00      	cmp	r3, #0
    a760:	d003      	beq.n	a76a <stopMotor+0x82>
		{
			setMotorMGRResponse('-');	//motor is already off
    a762:	202d      	movs	r0, #45	; 0x2d
    a764:	4b0e      	ldr	r3, [pc, #56]	; (a7a0 <stopMotor+0xb8>)
    a766:	4798      	blx	r3
		}
	}
}
    a768:	e7ff      	b.n	a76a <stopMotor+0x82>
    a76a:	46c0      	nop			; (mov r8, r8)
    a76c:	46bd      	mov	sp, r7
    a76e:	b003      	add	sp, #12
    a770:	bd90      	pop	{r4, r7, pc}
    a772:	46c0      	nop			; (mov r8, r8)
    a774:	00009e1d 	.word	0x00009e1d
    a778:	20000759 	.word	0x20000759
    a77c:	000087ad 	.word	0x000087ad
    a780:	0000f1fd 	.word	0x0000f1fd
    a784:	20000770 	.word	0x20000770
    a788:	20000751 	.word	0x20000751
    a78c:	00009e31 	.word	0x00009e31
    a790:	200007b4 	.word	0x200007b4
    a794:	2000076c 	.word	0x2000076c
    a798:	20000618 	.word	0x20000618
    a79c:	2000074e 	.word	0x2000074e
    a7a0:	00004851 	.word	0x00004851

0000a7a4 <startMotorTimerOver>:

bool startMotorTimerOver(void)
{
    a7a4:	b580      	push	{r7, lr}
    a7a6:	af00      	add	r7, sp, #0
	return (xTaskGetTickCount() - tempStartTimer >= (((unsigned long int)user_settings_parameter_struct.autoStartTimeAddress * 1000)));
    a7a8:	4b09      	ldr	r3, [pc, #36]	; (a7d0 <startMotorTimerOver+0x2c>)
    a7aa:	4798      	blx	r3
    a7ac:	0002      	movs	r2, r0
    a7ae:	4b09      	ldr	r3, [pc, #36]	; (a7d4 <startMotorTimerOver+0x30>)
    a7b0:	681b      	ldr	r3, [r3, #0]
    a7b2:	1ad1      	subs	r1, r2, r3
    a7b4:	4b08      	ldr	r3, [pc, #32]	; (a7d8 <startMotorTimerOver+0x34>)
    a7b6:	885b      	ldrh	r3, [r3, #2]
    a7b8:	001a      	movs	r2, r3
    a7ba:	23fa      	movs	r3, #250	; 0xfa
    a7bc:	009b      	lsls	r3, r3, #2
    a7be:	435a      	muls	r2, r3
    a7c0:	2300      	movs	r3, #0
    a7c2:	4291      	cmp	r1, r2
    a7c4:	415b      	adcs	r3, r3
    a7c6:	b2db      	uxtb	r3, r3
}
    a7c8:	0018      	movs	r0, r3
    a7ca:	46bd      	mov	sp, r7
    a7cc:	bd80      	pop	{r7, pc}
    a7ce:	46c0      	nop			; (mov r8, r8)
    a7d0:	0000f1fd 	.word	0x0000f1fd
    a7d4:	20000768 	.word	0x20000768
    a7d8:	2000064c 	.word	0x2000064c

0000a7dc <unknownMotorOff>:

void unknownMotorOff(void)
{
    a7dc:	b580      	push	{r7, lr}
    a7de:	af00      	add	r7, sp, #0
	// waitCheckACTimerOn = false;
	//report to SIM Motor Off due to Unknown Reason
	stopMotor(false,true,false);
    a7e0:	2200      	movs	r2, #0
    a7e2:	2101      	movs	r1, #1
    a7e4:	2000      	movs	r0, #0
    a7e6:	4b06      	ldr	r3, [pc, #24]	; (a800 <unknownMotorOff+0x24>)
    a7e8:	4798      	blx	r3
	simEventTemp[2] = registerEvent('U');
    a7ea:	2055      	movs	r0, #85	; 0x55
    a7ec:	4b05      	ldr	r3, [pc, #20]	; (a804 <unknownMotorOff+0x28>)
    a7ee:	4798      	blx	r3
    a7f0:	0003      	movs	r3, r0
    a7f2:	001a      	movs	r2, r3
    a7f4:	4b04      	ldr	r3, [pc, #16]	; (a808 <unknownMotorOff+0x2c>)
    a7f6:	709a      	strb	r2, [r3, #2]
}
    a7f8:	46c0      	nop			; (mov r8, r8)
    a7fa:	46bd      	mov	sp, r7
    a7fc:	bd80      	pop	{r7, pc}
    a7fe:	46c0      	nop			; (mov r8, r8)
    a800:	0000a6e9 	.word	0x0000a6e9
    a804:	00004679 	.word	0x00004679
    a808:	200006f0 	.word	0x200006f0

0000a80c <singlePhasingTimerOver>:

bool singlePhasingTimerOver(void)
{
    a80c:	b580      	push	{r7, lr}
    a80e:	af00      	add	r7, sp, #0
	return (singlePhasingTimerOn && xTaskGetTickCount() - tempSinglePhasingTimer > ((unsigned int)singlePhasingTime * 100));
    a810:	4b0d      	ldr	r3, [pc, #52]	; (a848 <singlePhasingTimerOver+0x3c>)
    a812:	781b      	ldrb	r3, [r3, #0]
    a814:	2b00      	cmp	r3, #0
    a816:	d00e      	beq.n	a836 <singlePhasingTimerOver+0x2a>
    a818:	4b0c      	ldr	r3, [pc, #48]	; (a84c <singlePhasingTimerOver+0x40>)
    a81a:	4798      	blx	r3
    a81c:	0002      	movs	r2, r0
    a81e:	4b0c      	ldr	r3, [pc, #48]	; (a850 <singlePhasingTimerOver+0x44>)
    a820:	681b      	ldr	r3, [r3, #0]
    a822:	1ad2      	subs	r2, r2, r3
    a824:	4b0b      	ldr	r3, [pc, #44]	; (a854 <singlePhasingTimerOver+0x48>)
    a826:	781b      	ldrb	r3, [r3, #0]
    a828:	0019      	movs	r1, r3
    a82a:	2364      	movs	r3, #100	; 0x64
    a82c:	434b      	muls	r3, r1
    a82e:	429a      	cmp	r2, r3
    a830:	d901      	bls.n	a836 <singlePhasingTimerOver+0x2a>
    a832:	2301      	movs	r3, #1
    a834:	e000      	b.n	a838 <singlePhasingTimerOver+0x2c>
    a836:	2300      	movs	r3, #0
    a838:	1c1a      	adds	r2, r3, #0
    a83a:	2301      	movs	r3, #1
    a83c:	4013      	ands	r3, r2
    a83e:	b2db      	uxtb	r3, r3
}
    a840:	0018      	movs	r0, r3
    a842:	46bd      	mov	sp, r7
    a844:	bd80      	pop	{r7, pc}
    a846:	46c0      	nop			; (mov r8, r8)
    a848:	20000759 	.word	0x20000759
    a84c:	0000f1fd 	.word	0x0000f1fd
    a850:	20000748 	.word	0x20000748
    a854:	20000738 	.word	0x20000738

0000a858 <operateOnSinglePhasing>:

void operateOnSinglePhasing(void)
{
    a858:	b580      	push	{r7, lr}
    a85a:	af00      	add	r7, sp, #0
	THREEPHASE_OK_LED_OFF;
    a85c:	2101      	movs	r1, #1
    a85e:	2027      	movs	r0, #39	; 0x27
    a860:	4b08      	ldr	r3, [pc, #32]	; (a884 <operateOnSinglePhasing+0x2c>)
    a862:	4798      	blx	r3
	stopMotor(false,true,false);
    a864:	2200      	movs	r2, #0
    a866:	2101      	movs	r1, #1
    a868:	2000      	movs	r0, #0
    a86a:	4b07      	ldr	r3, [pc, #28]	; (a888 <operateOnSinglePhasing+0x30>)
    a86c:	4798      	blx	r3
	simEventTemp[3] = registerEvent('F');
    a86e:	2046      	movs	r0, #70	; 0x46
    a870:	4b06      	ldr	r3, [pc, #24]	; (a88c <operateOnSinglePhasing+0x34>)
    a872:	4798      	blx	r3
    a874:	0003      	movs	r3, r0
    a876:	001a      	movs	r2, r3
    a878:	4b05      	ldr	r3, [pc, #20]	; (a890 <operateOnSinglePhasing+0x38>)
    a87a:	70da      	strb	r2, [r3, #3]
}
    a87c:	46c0      	nop			; (mov r8, r8)
    a87e:	46bd      	mov	sp, r7
    a880:	bd80      	pop	{r7, pc}
    a882:	46c0      	nop			; (mov r8, r8)
    a884:	000087ad 	.word	0x000087ad
    a888:	0000a6e9 	.word	0x0000a6e9
    a88c:	00004679 	.word	0x00004679
    a890:	200006f0 	.word	0x200006f0

0000a894 <terminateStopRelay>:

void terminateStopRelay(void)
{
    a894:	b580      	push	{r7, lr}
    a896:	af00      	add	r7, sp, #0
	if (stopSequenceOn && xTaskGetTickCount() - tempStopSequenceTimer > (stopSequenceTimerTime * 100))
    a898:	4b27      	ldr	r3, [pc, #156]	; (a938 <terminateStopRelay+0xa4>)
    a89a:	781b      	ldrb	r3, [r3, #0]
    a89c:	2b00      	cmp	r3, #0
    a89e:	d047      	beq.n	a930 <terminateStopRelay+0x9c>
    a8a0:	4b26      	ldr	r3, [pc, #152]	; (a93c <terminateStopRelay+0xa8>)
    a8a2:	4798      	blx	r3
    a8a4:	0002      	movs	r2, r0
    a8a6:	4b26      	ldr	r3, [pc, #152]	; (a940 <terminateStopRelay+0xac>)
    a8a8:	681b      	ldr	r3, [r3, #0]
    a8aa:	1ad3      	subs	r3, r2, r3
    a8ac:	4a25      	ldr	r2, [pc, #148]	; (a944 <terminateStopRelay+0xb0>)
    a8ae:	7812      	ldrb	r2, [r2, #0]
    a8b0:	0011      	movs	r1, r2
    a8b2:	2264      	movs	r2, #100	; 0x64
    a8b4:	434a      	muls	r2, r1
    a8b6:	4293      	cmp	r3, r2
    a8b8:	d93a      	bls.n	a930 <terminateStopRelay+0x9c>
	{
		//if ((bool)(user_settings_parameter_struct.autoStartAddress) && getACPowerState())
		//{
		//STOP_RELAY_ON;
		//}
		stopSequenceOn = false;
    a8ba:	4b1f      	ldr	r3, [pc, #124]	; (a938 <terminateStopRelay+0xa4>)
    a8bc:	2200      	movs	r2, #0
    a8be:	701a      	strb	r2, [r3, #0]
		if (!getMotorState_from_pin())		//motor has turned off
    a8c0:	4b21      	ldr	r3, [pc, #132]	; (a948 <terminateStopRelay+0xb4>)
    a8c2:	4798      	blx	r3
    a8c4:	0003      	movs	r3, r0
    a8c6:	001a      	movs	r2, r3
    a8c8:	2301      	movs	r3, #1
    a8ca:	4053      	eors	r3, r2
    a8cc:	b2db      	uxtb	r3, r3
    a8ce:	2b00      	cmp	r3, #0
    a8d0:	d019      	beq.n	a906 <terminateStopRelay+0x72>
		{
			if (gotOffCommand)
    a8d2:	4b1e      	ldr	r3, [pc, #120]	; (a94c <terminateStopRelay+0xb8>)
    a8d4:	781b      	ldrb	r3, [r3, #0]
    a8d6:	2b00      	cmp	r3, #0
    a8d8:	d006      	beq.n	a8e8 <terminateStopRelay+0x54>
			{
				gotOffCommand = false;
    a8da:	4b1c      	ldr	r3, [pc, #112]	; (a94c <terminateStopRelay+0xb8>)
    a8dc:	2200      	movs	r2, #0
    a8de:	701a      	strb	r2, [r3, #0]
				setMotorMGRResponse('O');		//motor has stopped
    a8e0:	204f      	movs	r0, #79	; 0x4f
    a8e2:	4b1b      	ldr	r3, [pc, #108]	; (a950 <terminateStopRelay+0xbc>)
    a8e4:	4798      	blx	r3
    a8e6:	e020      	b.n	a92a <terminateStopRelay+0x96>
			}
			else if(offButtonPressed)
    a8e8:	4b1a      	ldr	r3, [pc, #104]	; (a954 <terminateStopRelay+0xc0>)
    a8ea:	781b      	ldrb	r3, [r3, #0]
    a8ec:	2b00      	cmp	r3, #0
    a8ee:	d01c      	beq.n	a92a <terminateStopRelay+0x96>
			{
				offButtonPressed=false;
    a8f0:	4b18      	ldr	r3, [pc, #96]	; (a954 <terminateStopRelay+0xc0>)
    a8f2:	2200      	movs	r2, #0
    a8f4:	701a      	strb	r2, [r3, #0]
				simEventTemp[8] = registerEvent('O'); //register TO SIM motor has turned off
    a8f6:	204f      	movs	r0, #79	; 0x4f
    a8f8:	4b17      	ldr	r3, [pc, #92]	; (a958 <terminateStopRelay+0xc4>)
    a8fa:	4798      	blx	r3
    a8fc:	0003      	movs	r3, r0
    a8fe:	001a      	movs	r2, r3
    a900:	4b16      	ldr	r3, [pc, #88]	; (a95c <terminateStopRelay+0xc8>)
    a902:	721a      	strb	r2, [r3, #8]
    a904:	e011      	b.n	a92a <terminateStopRelay+0x96>
			}
		}
		else
		{
			if (gotOffCommand)
    a906:	4b11      	ldr	r3, [pc, #68]	; (a94c <terminateStopRelay+0xb8>)
    a908:	781b      	ldrb	r3, [r3, #0]
    a90a:	2b00      	cmp	r3, #0
    a90c:	d006      	beq.n	a91c <terminateStopRelay+0x88>
			{
				gotOffCommand = false;
    a90e:	4b0f      	ldr	r3, [pc, #60]	; (a94c <terminateStopRelay+0xb8>)
    a910:	2200      	movs	r2, #0
    a912:	701a      	strb	r2, [r3, #0]
				setMotorMGRResponse('P');		//cannot turn off motor
    a914:	2050      	movs	r0, #80	; 0x50
    a916:	4b0e      	ldr	r3, [pc, #56]	; (a950 <terminateStopRelay+0xbc>)
    a918:	4798      	blx	r3
    a91a:	e006      	b.n	a92a <terminateStopRelay+0x96>
			}
			else
			{
				simEventTemp[1] = registerEvent('P');
    a91c:	2050      	movs	r0, #80	; 0x50
    a91e:	4b0e      	ldr	r3, [pc, #56]	; (a958 <terminateStopRelay+0xc4>)
    a920:	4798      	blx	r3
    a922:	0003      	movs	r3, r0
    a924:	001a      	movs	r2, r3
    a926:	4b0d      	ldr	r3, [pc, #52]	; (a95c <terminateStopRelay+0xc8>)
    a928:	705a      	strb	r2, [r3, #1]
			}
		}
		offButtonPressed=false;
    a92a:	4b0a      	ldr	r3, [pc, #40]	; (a954 <terminateStopRelay+0xc0>)
    a92c:	2200      	movs	r2, #0
    a92e:	701a      	strb	r2, [r3, #0]
	}
}
    a930:	46c0      	nop			; (mov r8, r8)
    a932:	46bd      	mov	sp, r7
    a934:	bd80      	pop	{r7, pc}
    a936:	46c0      	nop			; (mov r8, r8)
    a938:	20000751 	.word	0x20000751
    a93c:	0000f1fd 	.word	0x0000f1fd
    a940:	20000770 	.word	0x20000770
    a944:	20000802 	.word	0x20000802
    a948:	00009e71 	.word	0x00009e71
    a94c:	200007b4 	.word	0x200007b4
    a950:	00004851 	.word	0x00004851
    a954:	2000076c 	.word	0x2000076c
    a958:	00004679 	.word	0x00004679
    a95c:	200006f0 	.word	0x200006f0

0000a960 <terminateStarDeltaTimer>:

void terminateStarDeltaTimer(void)
{
    a960:	b580      	push	{r7, lr}
    a962:	af00      	add	r7, sp, #0
	if(starDeltaTimerOn && xTaskGetTickCount() - tempStartSequenceTimer > ((unsigned long int)(user_settings_parameter_struct.starDeltaTimerAddress) *1000L))
    a964:	4b13      	ldr	r3, [pc, #76]	; (a9b4 <terminateStarDeltaTimer+0x54>)
    a966:	781b      	ldrb	r3, [r3, #0]
    a968:	2b00      	cmp	r3, #0
    a96a:	d020      	beq.n	a9ae <terminateStarDeltaTimer+0x4e>
    a96c:	4b12      	ldr	r3, [pc, #72]	; (a9b8 <terminateStarDeltaTimer+0x58>)
    a96e:	4798      	blx	r3
    a970:	0002      	movs	r2, r0
    a972:	4b12      	ldr	r3, [pc, #72]	; (a9bc <terminateStarDeltaTimer+0x5c>)
    a974:	681b      	ldr	r3, [r3, #0]
    a976:	1ad2      	subs	r2, r2, r3
    a978:	4b11      	ldr	r3, [pc, #68]	; (a9c0 <terminateStarDeltaTimer+0x60>)
    a97a:	88db      	ldrh	r3, [r3, #6]
    a97c:	0019      	movs	r1, r3
    a97e:	23fa      	movs	r3, #250	; 0xfa
    a980:	009b      	lsls	r3, r3, #2
    a982:	434b      	muls	r3, r1
    a984:	429a      	cmp	r2, r3
    a986:	d912      	bls.n	a9ae <terminateStarDeltaTimer+0x4e>
	{
		START_RELAY_OFF;
    a988:	2100      	movs	r1, #0
    a98a:	202d      	movs	r0, #45	; 0x2d
    a98c:	4b0d      	ldr	r3, [pc, #52]	; (a9c4 <terminateStarDeltaTimer+0x64>)
    a98e:	4798      	blx	r3
		starDeltaTimerOn=false;
    a990:	4b08      	ldr	r3, [pc, #32]	; (a9b4 <terminateStarDeltaTimer+0x54>)
    a992:	2200      	movs	r2, #0
    a994:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
    a996:	4b0c      	ldr	r3, [pc, #48]	; (a9c8 <terminateStarDeltaTimer+0x68>)
    a998:	785b      	ldrb	r3, [r3, #1]
    a99a:	2b00      	cmp	r3, #0
    a99c:	d007      	beq.n	a9ae <terminateStarDeltaTimer+0x4e>
		{
			enableCurrentBuffer=true;
    a99e:	4b0b      	ldr	r3, [pc, #44]	; (a9cc <terminateStarDeltaTimer+0x6c>)
    a9a0:	2201      	movs	r2, #1
    a9a2:	701a      	strb	r2, [r3, #0]
			tempStartSequenceTimer=xTaskGetTickCount();
    a9a4:	4b04      	ldr	r3, [pc, #16]	; (a9b8 <terminateStarDeltaTimer+0x58>)
    a9a6:	4798      	blx	r3
    a9a8:	0002      	movs	r2, r0
    a9aa:	4b04      	ldr	r3, [pc, #16]	; (a9bc <terminateStarDeltaTimer+0x5c>)
    a9ac:	601a      	str	r2, [r3, #0]
		}
	}
}
    a9ae:	46c0      	nop			; (mov r8, r8)
    a9b0:	46bd      	mov	sp, r7
    a9b2:	bd80      	pop	{r7, pc}
    a9b4:	20000763 	.word	0x20000763
    a9b8:	0000f1fd 	.word	0x0000f1fd
    a9bc:	2000075c 	.word	0x2000075c
    a9c0:	2000064c 	.word	0x2000064c
    a9c4:	000087ad 	.word	0x000087ad
    a9c8:	20000618 	.word	0x20000618
    a9cc:	20000728 	.word	0x20000728

0000a9d0 <terminateStartRelay>:

void terminateStartRelay(void)
{
    a9d0:	b590      	push	{r4, r7, lr}
    a9d2:	b083      	sub	sp, #12
    a9d4:	af00      	add	r7, sp, #0
	if (startSequenceOn &&  xTaskGetTickCount() - tempStartSequenceTimer > (startSequenceTimerTime * 100))
    a9d6:	4b36      	ldr	r3, [pc, #216]	; (aab0 <terminateStartRelay+0xe0>)
    a9d8:	781b      	ldrb	r3, [r3, #0]
    a9da:	2b00      	cmp	r3, #0
    a9dc:	d064      	beq.n	aaa8 <terminateStartRelay+0xd8>
    a9de:	4b35      	ldr	r3, [pc, #212]	; (aab4 <terminateStartRelay+0xe4>)
    a9e0:	4798      	blx	r3
    a9e2:	0002      	movs	r2, r0
    a9e4:	4b34      	ldr	r3, [pc, #208]	; (aab8 <terminateStartRelay+0xe8>)
    a9e6:	681b      	ldr	r3, [r3, #0]
    a9e8:	1ad3      	subs	r3, r2, r3
    a9ea:	4a34      	ldr	r2, [pc, #208]	; (aabc <terminateStartRelay+0xec>)
    a9ec:	7812      	ldrb	r2, [r2, #0]
    a9ee:	0011      	movs	r1, r2
    a9f0:	2264      	movs	r2, #100	; 0x64
    a9f2:	434a      	muls	r2, r1
    a9f4:	4293      	cmp	r3, r2
    a9f6:	d957      	bls.n	aaa8 <terminateStartRelay+0xd8>
	{
		if(((unsigned int)user_settings_parameter_struct.starDeltaTimerAddress *10) <= startSequenceTimerTime)
    a9f8:	4b31      	ldr	r3, [pc, #196]	; (aac0 <terminateStartRelay+0xf0>)
    a9fa:	88db      	ldrh	r3, [r3, #6]
    a9fc:	001a      	movs	r2, r3
    a9fe:	0013      	movs	r3, r2
    aa00:	009b      	lsls	r3, r3, #2
    aa02:	189b      	adds	r3, r3, r2
    aa04:	005b      	lsls	r3, r3, #1
    aa06:	001a      	movs	r2, r3
    aa08:	4b2c      	ldr	r3, [pc, #176]	; (aabc <terminateStartRelay+0xec>)
    aa0a:	781b      	ldrb	r3, [r3, #0]
    aa0c:	429a      	cmp	r2, r3
    aa0e:	d810      	bhi.n	aa32 <terminateStartRelay+0x62>
		{
			START_RELAY_OFF;
    aa10:	2100      	movs	r1, #0
    aa12:	202d      	movs	r0, #45	; 0x2d
    aa14:	4b2b      	ldr	r3, [pc, #172]	; (aac4 <terminateStartRelay+0xf4>)
    aa16:	4798      	blx	r3
			tempStartSequenceTimer=xTaskGetTickCount();
    aa18:	4b26      	ldr	r3, [pc, #152]	; (aab4 <terminateStartRelay+0xe4>)
    aa1a:	4798      	blx	r3
    aa1c:	0002      	movs	r2, r0
    aa1e:	4b26      	ldr	r3, [pc, #152]	; (aab8 <terminateStartRelay+0xe8>)
    aa20:	601a      	str	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_CURRENT)
    aa22:	4b29      	ldr	r3, [pc, #164]	; (aac8 <terminateStartRelay+0xf8>)
    aa24:	785b      	ldrb	r3, [r3, #1]
    aa26:	2b00      	cmp	r3, #0
    aa28:	d006      	beq.n	aa38 <terminateStartRelay+0x68>
			{
				enableCurrentBuffer=true;
    aa2a:	4b28      	ldr	r3, [pc, #160]	; (aacc <terminateStartRelay+0xfc>)
    aa2c:	2201      	movs	r2, #1
    aa2e:	701a      	strb	r2, [r3, #0]
    aa30:	e002      	b.n	aa38 <terminateStartRelay+0x68>
			}
		}
		else
		{
			starDeltaTimerOn=true;
    aa32:	4b27      	ldr	r3, [pc, #156]	; (aad0 <terminateStartRelay+0x100>)
    aa34:	2201      	movs	r2, #1
    aa36:	701a      	strb	r2, [r3, #0]
		}
		startSequenceOn = false;
    aa38:	4b1d      	ldr	r3, [pc, #116]	; (aab0 <terminateStartRelay+0xe0>)
    aa3a:	2200      	movs	r2, #0
    aa3c:	701a      	strb	r2, [r3, #0]
		bool motor = getMotorState_from_pin();
    aa3e:	1dfc      	adds	r4, r7, #7
    aa40:	4b24      	ldr	r3, [pc, #144]	; (aad4 <terminateStartRelay+0x104>)
    aa42:	4798      	blx	r3
    aa44:	0003      	movs	r3, r0
    aa46:	7023      	strb	r3, [r4, #0]
		if (gotOnCommand)
    aa48:	4b23      	ldr	r3, [pc, #140]	; (aad8 <terminateStartRelay+0x108>)
    aa4a:	781b      	ldrb	r3, [r3, #0]
    aa4c:	2b00      	cmp	r3, #0
    aa4e:	d013      	beq.n	aa78 <terminateStartRelay+0xa8>
		{
			gotOnCommand = false;
    aa50:	4b21      	ldr	r3, [pc, #132]	; (aad8 <terminateStartRelay+0x108>)
    aa52:	2200      	movs	r2, #0
    aa54:	701a      	strb	r2, [r3, #0]
			if (motor)
    aa56:	1dfb      	adds	r3, r7, #7
    aa58:	781b      	ldrb	r3, [r3, #0]
    aa5a:	2b00      	cmp	r3, #0
    aa5c:	d003      	beq.n	aa66 <terminateStartRelay+0x96>
			{
				setMotorMGRResponse('S'); // motor has started
    aa5e:	2053      	movs	r0, #83	; 0x53
    aa60:	4b1e      	ldr	r3, [pc, #120]	; (aadc <terminateStartRelay+0x10c>)
    aa62:	4798      	blx	r3
				stopMotor(false,true,false);
				simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
			}
		}
	}
}
    aa64:	e020      	b.n	aaa8 <terminateStartRelay+0xd8>
				stopMotor(false,true,false);
    aa66:	2200      	movs	r2, #0
    aa68:	2101      	movs	r1, #1
    aa6a:	2000      	movs	r0, #0
    aa6c:	4b1c      	ldr	r3, [pc, #112]	; (aae0 <terminateStartRelay+0x110>)
    aa6e:	4798      	blx	r3
				setMotorMGRResponse('N');	//cannot start motor due to some problem
    aa70:	204e      	movs	r0, #78	; 0x4e
    aa72:	4b1a      	ldr	r3, [pc, #104]	; (aadc <terminateStartRelay+0x10c>)
    aa74:	4798      	blx	r3
}
    aa76:	e017      	b.n	aaa8 <terminateStartRelay+0xd8>
			if (motor)
    aa78:	1dfb      	adds	r3, r7, #7
    aa7a:	781b      	ldrb	r3, [r3, #0]
    aa7c:	2b00      	cmp	r3, #0
    aa7e:	d007      	beq.n	aa90 <terminateStartRelay+0xc0>
				simEventTemp[7] = registerEvent('S');// ;//register To SIM Motor has started
    aa80:	2053      	movs	r0, #83	; 0x53
    aa82:	4b18      	ldr	r3, [pc, #96]	; (aae4 <terminateStartRelay+0x114>)
    aa84:	4798      	blx	r3
    aa86:	0003      	movs	r3, r0
    aa88:	001a      	movs	r2, r3
    aa8a:	4b17      	ldr	r3, [pc, #92]	; (aae8 <terminateStartRelay+0x118>)
    aa8c:	71da      	strb	r2, [r3, #7]
}
    aa8e:	e00b      	b.n	aaa8 <terminateStartRelay+0xd8>
				stopMotor(false,true,false);
    aa90:	2200      	movs	r2, #0
    aa92:	2101      	movs	r1, #1
    aa94:	2000      	movs	r0, #0
    aa96:	4b12      	ldr	r3, [pc, #72]	; (aae0 <terminateStartRelay+0x110>)
    aa98:	4798      	blx	r3
				simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
    aa9a:	204e      	movs	r0, #78	; 0x4e
    aa9c:	4b11      	ldr	r3, [pc, #68]	; (aae4 <terminateStartRelay+0x114>)
    aa9e:	4798      	blx	r3
    aaa0:	0003      	movs	r3, r0
    aaa2:	001a      	movs	r2, r3
    aaa4:	4b10      	ldr	r3, [pc, #64]	; (aae8 <terminateStartRelay+0x118>)
    aaa6:	701a      	strb	r2, [r3, #0]
}
    aaa8:	46c0      	nop			; (mov r8, r8)
    aaaa:	46bd      	mov	sp, r7
    aaac:	b003      	add	sp, #12
    aaae:	bd90      	pop	{r4, r7, pc}
    aab0:	20000761 	.word	0x20000761
    aab4:	0000f1fd 	.word	0x0000f1fd
    aab8:	2000075c 	.word	0x2000075c
    aabc:	200007c0 	.word	0x200007c0
    aac0:	2000064c 	.word	0x2000064c
    aac4:	000087ad 	.word	0x000087ad
    aac8:	20000618 	.word	0x20000618
    aacc:	20000728 	.word	0x20000728
    aad0:	20000763 	.word	0x20000763
    aad4:	00009e71 	.word	0x00009e71
    aad8:	200006ec 	.word	0x200006ec
    aadc:	00004851 	.word	0x00004851
    aae0:	0000a6e9 	.word	0x0000a6e9
    aae4:	00004679 	.word	0x00004679
    aae8:	200006f0 	.word	0x200006f0

0000aaec <statusOnCall>:

void statusOnCall(void)
{
    aaec:	b590      	push	{r4, r7, lr}
    aaee:	b083      	sub	sp, #12
    aaf0:	af00      	add	r7, sp, #0
	char status[5];
	uint8_t index=0;
    aaf2:	1dfb      	adds	r3, r7, #7
    aaf4:	2200      	movs	r2, #0
    aaf6:	701a      	strb	r2, [r3, #0]
	uint8_t b = checkLineSensors();
    aaf8:	1dbc      	adds	r4, r7, #6
    aafa:	4b3b      	ldr	r3, [pc, #236]	; (abe8 <statusOnCall+0xfc>)
    aafc:	4798      	blx	r3
    aafe:	0003      	movs	r3, r0
    ab00:	7023      	strb	r3, [r4, #0]
	if (b == AC_OFF)
    ab02:	1dbb      	adds	r3, r7, #6
    ab04:	781b      	ldrb	r3, [r3, #0]
    ab06:	2b00      	cmp	r3, #0
    ab08:	d109      	bne.n	ab1e <statusOnCall+0x32>
	{
		status[index++]='L';
    ab0a:	1dfb      	adds	r3, r7, #7
    ab0c:	781b      	ldrb	r3, [r3, #0]
    ab0e:	1dfa      	adds	r2, r7, #7
    ab10:	1c59      	adds	r1, r3, #1
    ab12:	7011      	strb	r1, [r2, #0]
    ab14:	001a      	movs	r2, r3
    ab16:	003b      	movs	r3, r7
    ab18:	214c      	movs	r1, #76	; 0x4c
    ab1a:	5499      	strb	r1, [r3, r2]
    ab1c:	e03b      	b.n	ab96 <statusOnCall+0xaa>
		// sim1->setMotorMGRResponse('L');	//motor off, no light
	}
	else if (b == AC_2PH)	//power only in 2 phase
    ab1e:	1dbb      	adds	r3, r7, #6
    ab20:	781b      	ldrb	r3, [r3, #0]
    ab22:	2b02      	cmp	r3, #2
    ab24:	d109      	bne.n	ab3a <statusOnCall+0x4e>
	{
		status[index++]='A';
    ab26:	1dfb      	adds	r3, r7, #7
    ab28:	781b      	ldrb	r3, [r3, #0]
    ab2a:	1dfa      	adds	r2, r7, #7
    ab2c:	1c59      	adds	r1, r3, #1
    ab2e:	7011      	strb	r1, [r2, #0]
    ab30:	001a      	movs	r2, r3
    ab32:	003b      	movs	r3, r7
    ab34:	2141      	movs	r1, #65	; 0x41
    ab36:	5499      	strb	r1, [r3, r2]
    ab38:	e02d      	b.n	ab96 <statusOnCall+0xaa>
		// sim1->setMotorMGRResponse('A');
	}
	else if (b == AC_3PH)
    ab3a:	1dbb      	adds	r3, r7, #6
    ab3c:	781b      	ldrb	r3, [r3, #0]
    ab3e:	2b03      	cmp	r3, #3
    ab40:	d129      	bne.n	ab96 <statusOnCall+0xaa>
	{
		bool temp = getMotorState_from_pin();
    ab42:	1d7c      	adds	r4, r7, #5
    ab44:	4b29      	ldr	r3, [pc, #164]	; (abec <statusOnCall+0x100>)
    ab46:	4798      	blx	r3
    ab48:	0003      	movs	r3, r0
    ab4a:	7023      	strb	r3, [r4, #0]
		if (temp)
    ab4c:	1d7b      	adds	r3, r7, #5
    ab4e:	781b      	ldrb	r3, [r3, #0]
    ab50:	2b00      	cmp	r3, #0
    ab52:	d009      	beq.n	ab68 <statusOnCall+0x7c>
		{
			status[index++]='+';
    ab54:	1dfb      	adds	r3, r7, #7
    ab56:	781b      	ldrb	r3, [r3, #0]
    ab58:	1dfa      	adds	r2, r7, #7
    ab5a:	1c59      	adds	r1, r3, #1
    ab5c:	7011      	strb	r1, [r2, #0]
    ab5e:	001a      	movs	r2, r3
    ab60:	003b      	movs	r3, r7
    ab62:	212b      	movs	r1, #43	; 0x2b
    ab64:	5499      	strb	r1, [r3, r2]
    ab66:	e016      	b.n	ab96 <statusOnCall+0xaa>
			// sim1->setMotorMGRResponse('+');	//motor is on
		}
		else
		{
			status[index++]='_';
    ab68:	1dfb      	adds	r3, r7, #7
    ab6a:	781b      	ldrb	r3, [r3, #0]
    ab6c:	1dfa      	adds	r2, r7, #7
    ab6e:	1c59      	adds	r1, r3, #1
    ab70:	7011      	strb	r1, [r2, #0]
    ab72:	001a      	movs	r2, r3
    ab74:	003b      	movs	r3, r7
    ab76:	215f      	movs	r1, #95	; 0x5f
    ab78:	5499      	strb	r1, [r3, r2]
			
			//Play File for Wrong Phase Sequence if phase seq is wrong
			if(structThreePhase_state.u8t_phase_sequence_flag !=THREEPHASE_OK)					//3 phase sequence is incorrect
    ab7a:	4b1d      	ldr	r3, [pc, #116]	; (abf0 <statusOnCall+0x104>)
    ab7c:	781b      	ldrb	r3, [r3, #0]
    ab7e:	b2db      	uxtb	r3, r3
    ab80:	2b02      	cmp	r3, #2
    ab82:	d008      	beq.n	ab96 <statusOnCall+0xaa>
			{
				//todo: replace A(single Phasing) in below statement with Character for Wrong Phase Sequence Event
				status[index++]='A';
    ab84:	1dfb      	adds	r3, r7, #7
    ab86:	781b      	ldrb	r3, [r3, #0]
    ab88:	1dfa      	adds	r2, r7, #7
    ab8a:	1c59      	adds	r1, r3, #1
    ab8c:	7011      	strb	r1, [r2, #0]
    ab8e:	001a      	movs	r2, r3
    ab90:	003b      	movs	r3, r7
    ab92:	2141      	movs	r1, #65	; 0x41
    ab94:	5499      	strb	r1, [r3, r2]

			// sim1->setMotorMGRResponse('_');	//motor off, light on
		}
	}

	if(user_settings_parameter_struct.autoStartAddress)
    ab96:	4b17      	ldr	r3, [pc, #92]	; (abf4 <statusOnCall+0x108>)
    ab98:	785b      	ldrb	r3, [r3, #1]
    ab9a:	2b00      	cmp	r3, #0
    ab9c:	d009      	beq.n	abb2 <statusOnCall+0xc6>
	{
		status[index++]=')';
    ab9e:	1dfb      	adds	r3, r7, #7
    aba0:	781b      	ldrb	r3, [r3, #0]
    aba2:	1dfa      	adds	r2, r7, #7
    aba4:	1c59      	adds	r1, r3, #1
    aba6:	7011      	strb	r1, [r2, #0]
    aba8:	001a      	movs	r2, r3
    abaa:	003b      	movs	r3, r7
    abac:	2129      	movs	r1, #41	; 0x29
    abae:	5499      	strb	r1, [r3, r2]
    abb0:	e008      	b.n	abc4 <statusOnCall+0xd8>
	}
	else
	{
		status[index++]='[';
    abb2:	1dfb      	adds	r3, r7, #7
    abb4:	781b      	ldrb	r3, [r3, #0]
    abb6:	1dfa      	adds	r2, r7, #7
    abb8:	1c59      	adds	r1, r3, #1
    abba:	7011      	strb	r1, [r2, #0]
    abbc:	001a      	movs	r2, r3
    abbe:	003b      	movs	r3, r7
    abc0:	215b      	movs	r1, #91	; 0x5b
    abc2:	5499      	strb	r1, [r3, r2]
	}
	
	status[index++]='\0';
    abc4:	1dfb      	adds	r3, r7, #7
    abc6:	781b      	ldrb	r3, [r3, #0]
    abc8:	1dfa      	adds	r2, r7, #7
    abca:	1c59      	adds	r1, r3, #1
    abcc:	7011      	strb	r1, [r2, #0]
    abce:	001a      	movs	r2, r3
    abd0:	003b      	movs	r3, r7
    abd2:	2100      	movs	r1, #0
    abd4:	5499      	strb	r1, [r3, r2]

	playRepeatedFiles(status);
    abd6:	003b      	movs	r3, r7
    abd8:	0018      	movs	r0, r3
    abda:	4b07      	ldr	r3, [pc, #28]	; (abf8 <statusOnCall+0x10c>)
    abdc:	4798      	blx	r3
}
    abde:	46c0      	nop			; (mov r8, r8)
    abe0:	46bd      	mov	sp, r7
    abe2:	b003      	add	sp, #12
    abe4:	bd90      	pop	{r4, r7, pc}
    abe6:	46c0      	nop			; (mov r8, r8)
    abe8:	0000a39d 	.word	0x0000a39d
    abec:	00009e71 	.word	0x00009e71
    abf0:	20000710 	.word	0x20000710
    abf4:	2000064c 	.word	0x2000064c
    abf8:	00004545 	.word	0x00004545

0000abfc <voltageOnCall>:

void voltageOnCall(void)
{
    abfc:	b590      	push	{r4, r7, lr}
    abfe:	b087      	sub	sp, #28
    ac00:	af02      	add	r7, sp, #8
	char voltFiles[13];
	//change the below string seq to speak R Y B instead of 0
	sprintf(voltFiles,"0%lu0%lu0%lu",Analog_Parameter_Struct.PhaseRY_Voltage,Analog_Parameter_Struct.PhaseYB_Voltage,Analog_Parameter_Struct.PhaseBR_Voltage);
    ac02:	4b0a      	ldr	r3, [pc, #40]	; (ac2c <voltageOnCall+0x30>)
    ac04:	681a      	ldr	r2, [r3, #0]
    ac06:	4b09      	ldr	r3, [pc, #36]	; (ac2c <voltageOnCall+0x30>)
    ac08:	685c      	ldr	r4, [r3, #4]
    ac0a:	4b08      	ldr	r3, [pc, #32]	; (ac2c <voltageOnCall+0x30>)
    ac0c:	689b      	ldr	r3, [r3, #8]
    ac0e:	4908      	ldr	r1, [pc, #32]	; (ac30 <voltageOnCall+0x34>)
    ac10:	0038      	movs	r0, r7
    ac12:	9300      	str	r3, [sp, #0]
    ac14:	0023      	movs	r3, r4
    ac16:	4c07      	ldr	r4, [pc, #28]	; (ac34 <voltageOnCall+0x38>)
    ac18:	47a0      	blx	r4
	playRepeatedFiles(voltFiles);
    ac1a:	003b      	movs	r3, r7
    ac1c:	0018      	movs	r0, r3
    ac1e:	4b06      	ldr	r3, [pc, #24]	; (ac38 <voltageOnCall+0x3c>)
    ac20:	4798      	blx	r3
}
    ac22:	46c0      	nop			; (mov r8, r8)
    ac24:	46bd      	mov	sp, r7
    ac26:	b005      	add	sp, #20
    ac28:	bd90      	pop	{r4, r7, pc}
    ac2a:	46c0      	nop			; (mov r8, r8)
    ac2c:	200006cc 	.word	0x200006cc
    ac30:	00019594 	.word	0x00019594
    ac34:	00017d5d 	.word	0x00017d5d
    ac38:	00004545 	.word	0x00004545

0000ac3c <setM2MEventState>:

void setM2MEventState(uint8_t eventNo, uint8_t state)
{
    ac3c:	b580      	push	{r7, lr}
    ac3e:	b082      	sub	sp, #8
    ac40:	af00      	add	r7, sp, #0
    ac42:	0002      	movs	r2, r0
    ac44:	1dfb      	adds	r3, r7, #7
    ac46:	701a      	strb	r2, [r3, #0]
    ac48:	1dbb      	adds	r3, r7, #6
    ac4a:	1c0a      	adds	r2, r1, #0
    ac4c:	701a      	strb	r2, [r3, #0]
	if(m2mEvent_arr[eventNo]==ME_SERVICING)
    ac4e:	1dfb      	adds	r3, r7, #7
    ac50:	781b      	ldrb	r3, [r3, #0]
    ac52:	4a0e      	ldr	r2, [pc, #56]	; (ac8c <setM2MEventState+0x50>)
    ac54:	5cd3      	ldrb	r3, [r2, r3]
    ac56:	2b02      	cmp	r3, #2
    ac58:	d10e      	bne.n	ac78 <setM2MEventState+0x3c>
	{
		if(state==ME_NOTAVAILABLE)
    ac5a:	1dbb      	adds	r3, r7, #6
    ac5c:	781b      	ldrb	r3, [r3, #0]
    ac5e:	2b03      	cmp	r3, #3
    ac60:	d10a      	bne.n	ac78 <setM2MEventState+0x3c>
		{
			state=ME_CLEARED;
    ac62:	1dbb      	adds	r3, r7, #6
    ac64:	2200      	movs	r2, #0
    ac66:	701a      	strb	r2, [r3, #0]
			simEventTemp[mapTable[eventNo]]=false;	//regsiter relevant Normal Event
    ac68:	1dfb      	adds	r3, r7, #7
    ac6a:	781b      	ldrb	r3, [r3, #0]
    ac6c:	4a08      	ldr	r2, [pc, #32]	; (ac90 <setM2MEventState+0x54>)
    ac6e:	5cd3      	ldrb	r3, [r2, r3]
    ac70:	001a      	movs	r2, r3
    ac72:	4b08      	ldr	r3, [pc, #32]	; (ac94 <setM2MEventState+0x58>)
    ac74:	2100      	movs	r1, #0
    ac76:	5499      	strb	r1, [r3, r2]
		}
	}
	m2mEvent_arr[eventNo]=state;
    ac78:	1dfb      	adds	r3, r7, #7
    ac7a:	781b      	ldrb	r3, [r3, #0]
    ac7c:	4a03      	ldr	r2, [pc, #12]	; (ac8c <setM2MEventState+0x50>)
    ac7e:	1db9      	adds	r1, r7, #6
    ac80:	7809      	ldrb	r1, [r1, #0]
    ac82:	54d1      	strb	r1, [r2, r3]
}
    ac84:	46c0      	nop			; (mov r8, r8)
    ac86:	46bd      	mov	sp, r7
    ac88:	b002      	add	sp, #8
    ac8a:	bd80      	pop	{r7, pc}
    ac8c:	20000778 	.word	0x20000778
    ac90:	20000708 	.word	0x20000708
    ac94:	200006f0 	.word	0x200006f0

0000ac98 <M2MEventManager>:

void M2MEventManager(void)
{
    ac98:	b580      	push	{r7, lr}
    ac9a:	b082      	sub	sp, #8
    ac9c:	af00      	add	r7, sp, #0
	uint8_t j=2;
    ac9e:	1dfb      	adds	r3, r7, #7
    aca0:	2202      	movs	r2, #2
    aca2:	701a      	strb	r2, [r3, #0]
	while(j--)
    aca4:	e00a      	b.n	acbc <M2MEventManager+0x24>
	{
		if(m2mEvent_arr[j]==ME_WAITREGISTER)
    aca6:	1dfb      	adds	r3, r7, #7
    aca8:	781b      	ldrb	r3, [r3, #0]
    acaa:	4a0a      	ldr	r2, [pc, #40]	; (acd4 <M2MEventManager+0x3c>)
    acac:	5cd3      	ldrb	r3, [r2, r3]
    acae:	2b01      	cmp	r3, #1
    acb0:	d104      	bne.n	acbc <M2MEventManager+0x24>
		{
			registerM2MEvent(j);
    acb2:	1dfb      	adds	r3, r7, #7
    acb4:	781b      	ldrb	r3, [r3, #0]
    acb6:	0018      	movs	r0, r3
    acb8:	4b07      	ldr	r3, [pc, #28]	; (acd8 <M2MEventManager+0x40>)
    acba:	4798      	blx	r3
	while(j--)
    acbc:	1dfb      	adds	r3, r7, #7
    acbe:	781b      	ldrb	r3, [r3, #0]
    acc0:	1dfa      	adds	r2, r7, #7
    acc2:	1e59      	subs	r1, r3, #1
    acc4:	7011      	strb	r1, [r2, #0]
    acc6:	2b00      	cmp	r3, #0
    acc8:	d1ed      	bne.n	aca6 <M2MEventManager+0xe>
		}
	}
}
    acca:	46c0      	nop			; (mov r8, r8)
    accc:	46bd      	mov	sp, r7
    acce:	b002      	add	sp, #8
    acd0:	bd80      	pop	{r7, pc}
    acd2:	46c0      	nop			; (mov r8, r8)
    acd4:	20000778 	.word	0x20000778
    acd8:	00004795 	.word	0x00004795

0000acdc <SIMEventManager>:

void SIMEventManager(void)
{
    acdc:	b590      	push	{r4, r7, lr}
    acde:	b083      	sub	sp, #12
    ace0:	af00      	add	r7, sp, #0
	uint8_t i = 0;
    ace2:	1dfb      	adds	r3, r7, #7
    ace4:	2200      	movs	r2, #0
    ace6:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_WATER)
    ace8:	4b1e      	ldr	r3, [pc, #120]	; (ad64 <SIMEventManager+0x88>)
    acea:	795b      	ldrb	r3, [r3, #5]
    acec:	2b00      	cmp	r3, #0
    acee:	d00b      	beq.n	ad08 <SIMEventManager+0x2c>
	{
		if (factory_settings_parameter_struct.ENABLE_GP)
    acf0:	4b1c      	ldr	r3, [pc, #112]	; (ad64 <SIMEventManager+0x88>)
    acf2:	791b      	ldrb	r3, [r3, #4]
    acf4:	2b00      	cmp	r3, #0
    acf6:	d003      	beq.n	ad00 <SIMEventManager+0x24>
		{
			i = 19;
    acf8:	1dfb      	adds	r3, r7, #7
    acfa:	2213      	movs	r2, #19
    acfc:	701a      	strb	r2, [r3, #0]
    acfe:	e025      	b.n	ad4c <SIMEventManager+0x70>
		}
		else
		{
			i = 17;
    ad00:	1dfb      	adds	r3, r7, #7
    ad02:	2211      	movs	r2, #17
    ad04:	701a      	strb	r2, [r3, #0]
    ad06:	e021      	b.n	ad4c <SIMEventManager+0x70>
		}
	}
	else
	{
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
    ad08:	4b16      	ldr	r3, [pc, #88]	; (ad64 <SIMEventManager+0x88>)
    ad0a:	785b      	ldrb	r3, [r3, #1]
    ad0c:	2b00      	cmp	r3, #0
    ad0e:	d003      	beq.n	ad18 <SIMEventManager+0x3c>
		{
			i = 14;
    ad10:	1dfb      	adds	r3, r7, #7
    ad12:	220e      	movs	r2, #14
    ad14:	701a      	strb	r2, [r3, #0]
    ad16:	e019      	b.n	ad4c <SIMEventManager+0x70>
		}
		else
		{
			i = 12;
    ad18:	1dfb      	adds	r3, r7, #7
    ad1a:	220c      	movs	r2, #12
    ad1c:	701a      	strb	r2, [r3, #0]
		}
	}
	
	while(i--)
    ad1e:	e015      	b.n	ad4c <SIMEventManager+0x70>
	{
		if (!simEventTemp[i])
    ad20:	1dfb      	adds	r3, r7, #7
    ad22:	781b      	ldrb	r3, [r3, #0]
    ad24:	4a10      	ldr	r2, [pc, #64]	; (ad68 <SIMEventManager+0x8c>)
    ad26:	5cd3      	ldrb	r3, [r2, r3]
    ad28:	2201      	movs	r2, #1
    ad2a:	4053      	eors	r3, r2
    ad2c:	b2db      	uxtb	r3, r3
    ad2e:	2b00      	cmp	r3, #0
    ad30:	d00c      	beq.n	ad4c <SIMEventManager+0x70>
		simEventTemp[i] = registerEvent(simEvent[i]);
    ad32:	1dfb      	adds	r3, r7, #7
    ad34:	781c      	ldrb	r4, [r3, #0]
    ad36:	1dfb      	adds	r3, r7, #7
    ad38:	781b      	ldrb	r3, [r3, #0]
    ad3a:	4a0c      	ldr	r2, [pc, #48]	; (ad6c <SIMEventManager+0x90>)
    ad3c:	5cd3      	ldrb	r3, [r2, r3]
    ad3e:	0018      	movs	r0, r3
    ad40:	4b0b      	ldr	r3, [pc, #44]	; (ad70 <SIMEventManager+0x94>)
    ad42:	4798      	blx	r3
    ad44:	0003      	movs	r3, r0
    ad46:	001a      	movs	r2, r3
    ad48:	4b07      	ldr	r3, [pc, #28]	; (ad68 <SIMEventManager+0x8c>)
    ad4a:	551a      	strb	r2, [r3, r4]
	while(i--)
    ad4c:	1dfb      	adds	r3, r7, #7
    ad4e:	781b      	ldrb	r3, [r3, #0]
    ad50:	1dfa      	adds	r2, r7, #7
    ad52:	1e59      	subs	r1, r3, #1
    ad54:	7011      	strb	r1, [r2, #0]
    ad56:	2b00      	cmp	r3, #0
    ad58:	d1e2      	bne.n	ad20 <SIMEventManager+0x44>
	}
}
    ad5a:	46c0      	nop			; (mov r8, r8)
    ad5c:	46bd      	mov	sp, r7
    ad5e:	b003      	add	sp, #12
    ad60:	bd90      	pop	{r4, r7, pc}
    ad62:	46c0      	nop			; (mov r8, r8)
    ad64:	20000618 	.word	0x20000618
    ad68:	200006f0 	.word	0x200006f0
    ad6c:	200007a0 	.word	0x200007a0
    ad70:	00004679 	.word	0x00004679

0000ad74 <checkCurrentConsumption>:


void checkCurrentConsumption(void)
{
    ad74:	b580      	push	{r7, lr}
    ad76:	b084      	sub	sp, #16
    ad78:	af00      	add	r7, sp, #0
	if(startSequenceOn || stopSequenceOn || !getMotorState() || !(user_settings_parameter_struct.currentDetectionAddress) || starDeltaTimerOn)
    ad7a:	4b6f      	ldr	r3, [pc, #444]	; (af38 <checkCurrentConsumption+0x1c4>)
    ad7c:	781b      	ldrb	r3, [r3, #0]
    ad7e:	2b00      	cmp	r3, #0
    ad80:	d000      	beq.n	ad84 <checkCurrentConsumption+0x10>
    ad82:	e0d5      	b.n	af30 <checkCurrentConsumption+0x1bc>
    ad84:	4b6d      	ldr	r3, [pc, #436]	; (af3c <checkCurrentConsumption+0x1c8>)
    ad86:	781b      	ldrb	r3, [r3, #0]
    ad88:	2b00      	cmp	r3, #0
    ad8a:	d000      	beq.n	ad8e <checkCurrentConsumption+0x1a>
    ad8c:	e0d0      	b.n	af30 <checkCurrentConsumption+0x1bc>
    ad8e:	4b6c      	ldr	r3, [pc, #432]	; (af40 <checkCurrentConsumption+0x1cc>)
    ad90:	4798      	blx	r3
    ad92:	0003      	movs	r3, r0
    ad94:	001a      	movs	r2, r3
    ad96:	2301      	movs	r3, #1
    ad98:	4053      	eors	r3, r2
    ad9a:	b2db      	uxtb	r3, r3
    ad9c:	2b00      	cmp	r3, #0
    ad9e:	d000      	beq.n	ada2 <checkCurrentConsumption+0x2e>
    ada0:	e0c6      	b.n	af30 <checkCurrentConsumption+0x1bc>
    ada2:	4b68      	ldr	r3, [pc, #416]	; (af44 <checkCurrentConsumption+0x1d0>)
    ada4:	7bdb      	ldrb	r3, [r3, #15]
    ada6:	2b00      	cmp	r3, #0
    ada8:	d100      	bne.n	adac <checkCurrentConsumption+0x38>
    adaa:	e0c1      	b.n	af30 <checkCurrentConsumption+0x1bc>
    adac:	4b66      	ldr	r3, [pc, #408]	; (af48 <checkCurrentConsumption+0x1d4>)
    adae:	781b      	ldrb	r3, [r3, #0]
    adb0:	2b00      	cmp	r3, #0
    adb2:	d000      	beq.n	adb6 <checkCurrentConsumption+0x42>
    adb4:	e0bc      	b.n	af30 <checkCurrentConsumption+0x1bc>
	{
		return;
	}
	//|| ((xTaskGetTickCount()-lastCurrentReadingTime)<500))
	
	if(enableCurrentBuffer && xTaskGetTickCount()-tempStartSequenceTimer>30000)
    adb6:	4b65      	ldr	r3, [pc, #404]	; (af4c <checkCurrentConsumption+0x1d8>)
    adb8:	781b      	ldrb	r3, [r3, #0]
    adba:	2b00      	cmp	r3, #0
    adbc:	d00b      	beq.n	add6 <checkCurrentConsumption+0x62>
    adbe:	4b64      	ldr	r3, [pc, #400]	; (af50 <checkCurrentConsumption+0x1dc>)
    adc0:	4798      	blx	r3
    adc2:	0002      	movs	r2, r0
    adc4:	4b63      	ldr	r3, [pc, #396]	; (af54 <checkCurrentConsumption+0x1e0>)
    adc6:	681b      	ldr	r3, [r3, #0]
    adc8:	1ad3      	subs	r3, r2, r3
    adca:	4a63      	ldr	r2, [pc, #396]	; (af58 <checkCurrentConsumption+0x1e4>)
    adcc:	4293      	cmp	r3, r2
    adce:	d902      	bls.n	add6 <checkCurrentConsumption+0x62>
	{
		enableCurrentBuffer=false;
    add0:	4b5e      	ldr	r3, [pc, #376]	; (af4c <checkCurrentConsumption+0x1d8>)
    add2:	2200      	movs	r2, #0
    add4:	701a      	strb	r2, [r3, #0]
	}
	
	//lastCurrentReadingTime=xTaskGetTickCount();
	
	uint32_t ADCcurrent = Analog_Parameter_Struct.Motor_Current;
    add6:	4b61      	ldr	r3, [pc, #388]	; (af5c <checkCurrentConsumption+0x1e8>)
    add8:	691b      	ldr	r3, [r3, #16]
    adda:	607b      	str	r3, [r7, #4]
	//{
	//ADCcurrent = Read_ADC0(ADC_POSITIVE_INPUT_PIN16,200);
	//xSemaphoreGive(xADC_Semaphore);
	//}
	
	uint32_t temp = ADCcurrent;
    addc:	687b      	ldr	r3, [r7, #4]
    adde:	603b      	str	r3, [r7, #0]
	
	uint32_t overLoadDetectValue=12000;
    ade0:	4b5f      	ldr	r3, [pc, #380]	; (af60 <checkCurrentConsumption+0x1ec>)
    ade2:	60fb      	str	r3, [r7, #12]
	
	uint8_t temp2;
	
	if(enableCurrentBuffer && temp>(user_settings_parameter_struct.normalLoadAddress<<1))    //more than double  <<1 gives mulile of 2 value (double the orignal value)
    ade4:	4b59      	ldr	r3, [pc, #356]	; (af4c <checkCurrentConsumption+0x1d8>)
    ade6:	781b      	ldrb	r3, [r3, #0]
    ade8:	2b00      	cmp	r3, #0
    adea:	d00c      	beq.n	ae06 <checkCurrentConsumption+0x92>
    adec:	4b55      	ldr	r3, [pc, #340]	; (af44 <checkCurrentConsumption+0x1d0>)
    adee:	691b      	ldr	r3, [r3, #16]
    adf0:	005a      	lsls	r2, r3, #1
    adf2:	683b      	ldr	r3, [r7, #0]
    adf4:	429a      	cmp	r2, r3
    adf6:	d206      	bcs.n	ae06 <checkCurrentConsumption+0x92>
	{
		temp2 = CR_OVER2;
    adf8:	230b      	movs	r3, #11
    adfa:	18fb      	adds	r3, r7, r3
    adfc:	2202      	movs	r2, #2
    adfe:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=18000;
    ae00:	4b58      	ldr	r3, [pc, #352]	; (af64 <checkCurrentConsumption+0x1f0>)
    ae02:	60fb      	str	r3, [r7, #12]
    ae04:	e055      	b.n	aeb2 <checkCurrentConsumption+0x13e>
	}
	else if(!enableCurrentBuffer && temp>(user_settings_parameter_struct.normalLoadAddress<<1))			//more than double
    ae06:	4b51      	ldr	r3, [pc, #324]	; (af4c <checkCurrentConsumption+0x1d8>)
    ae08:	781b      	ldrb	r3, [r3, #0]
    ae0a:	2201      	movs	r2, #1
    ae0c:	4053      	eors	r3, r2
    ae0e:	b2db      	uxtb	r3, r3
    ae10:	2b00      	cmp	r3, #0
    ae12:	d00d      	beq.n	ae30 <checkCurrentConsumption+0xbc>
    ae14:	4b4b      	ldr	r3, [pc, #300]	; (af44 <checkCurrentConsumption+0x1d0>)
    ae16:	691b      	ldr	r3, [r3, #16]
    ae18:	005a      	lsls	r2, r3, #1
    ae1a:	683b      	ldr	r3, [r7, #0]
    ae1c:	429a      	cmp	r2, r3
    ae1e:	d207      	bcs.n	ae30 <checkCurrentConsumption+0xbc>
	{
		temp2 = CR_OVER;
    ae20:	230b      	movs	r3, #11
    ae22:	18fb      	adds	r3, r7, r3
    ae24:	2201      	movs	r2, #1
    ae26:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>2;
    ae28:	68fb      	ldr	r3, [r7, #12]
    ae2a:	089b      	lsrs	r3, r3, #2
    ae2c:	60fb      	str	r3, [r7, #12]
    ae2e:	e040      	b.n	aeb2 <checkCurrentConsumption+0x13e>
	}
	else if(!enableCurrentBuffer && temp> (user_settings_parameter_struct.normalLoadAddress+(user_settings_parameter_struct.normalLoadAddress>>1))) // more than 1.5
    ae30:	4b46      	ldr	r3, [pc, #280]	; (af4c <checkCurrentConsumption+0x1d8>)
    ae32:	781b      	ldrb	r3, [r3, #0]
    ae34:	2201      	movs	r2, #1
    ae36:	4053      	eors	r3, r2
    ae38:	b2db      	uxtb	r3, r3
    ae3a:	2b00      	cmp	r3, #0
    ae3c:	d010      	beq.n	ae60 <checkCurrentConsumption+0xec>
    ae3e:	4b41      	ldr	r3, [pc, #260]	; (af44 <checkCurrentConsumption+0x1d0>)
    ae40:	691a      	ldr	r2, [r3, #16]
    ae42:	4b40      	ldr	r3, [pc, #256]	; (af44 <checkCurrentConsumption+0x1d0>)
    ae44:	691b      	ldr	r3, [r3, #16]
    ae46:	085b      	lsrs	r3, r3, #1
    ae48:	18d2      	adds	r2, r2, r3
    ae4a:	683b      	ldr	r3, [r7, #0]
    ae4c:	429a      	cmp	r2, r3
    ae4e:	d207      	bcs.n	ae60 <checkCurrentConsumption+0xec>
	{
		temp2 = CR_OVER;
    ae50:	230b      	movs	r3, #11
    ae52:	18fb      	adds	r3, r7, r3
    ae54:	2201      	movs	r2, #1
    ae56:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>1;
    ae58:	68fb      	ldr	r3, [r7, #12]
    ae5a:	085b      	lsrs	r3, r3, #1
    ae5c:	60fb      	str	r3, [r7, #12]
    ae5e:	e028      	b.n	aeb2 <checkCurrentConsumption+0x13e>
	}
	else if (!enableCurrentBuffer && temp>user_settings_parameter_struct.overloadAddress)		// more than 1.25 to 1.5
    ae60:	4b3a      	ldr	r3, [pc, #232]	; (af4c <checkCurrentConsumption+0x1d8>)
    ae62:	781b      	ldrb	r3, [r3, #0]
    ae64:	2201      	movs	r2, #1
    ae66:	4053      	eors	r3, r2
    ae68:	b2db      	uxtb	r3, r3
    ae6a:	2b00      	cmp	r3, #0
    ae6c:	d009      	beq.n	ae82 <checkCurrentConsumption+0x10e>
    ae6e:	4b35      	ldr	r3, [pc, #212]	; (af44 <checkCurrentConsumption+0x1d0>)
    ae70:	695a      	ldr	r2, [r3, #20]
    ae72:	683b      	ldr	r3, [r7, #0]
    ae74:	429a      	cmp	r2, r3
    ae76:	d204      	bcs.n	ae82 <checkCurrentConsumption+0x10e>
	{
		temp2 = CR_OVER;
    ae78:	230b      	movs	r3, #11
    ae7a:	18fb      	adds	r3, r7, r3
    ae7c:	2201      	movs	r2, #1
    ae7e:	701a      	strb	r2, [r3, #0]
    ae80:	e017      	b.n	aeb2 <checkCurrentConsumption+0x13e>
	}
	else if(temp < user_settings_parameter_struct.underloadAddress && !enableCurrentBuffer)		// only consider noLoad after 30 secs
    ae82:	4b30      	ldr	r3, [pc, #192]	; (af44 <checkCurrentConsumption+0x1d0>)
    ae84:	699a      	ldr	r2, [r3, #24]
    ae86:	683b      	ldr	r3, [r7, #0]
    ae88:	429a      	cmp	r2, r3
    ae8a:	d90e      	bls.n	aeaa <checkCurrentConsumption+0x136>
    ae8c:	4b2f      	ldr	r3, [pc, #188]	; (af4c <checkCurrentConsumption+0x1d8>)
    ae8e:	781b      	ldrb	r3, [r3, #0]
    ae90:	2201      	movs	r2, #1
    ae92:	4053      	eors	r3, r2
    ae94:	b2db      	uxtb	r3, r3
    ae96:	2b00      	cmp	r3, #0
    ae98:	d007      	beq.n	aeaa <checkCurrentConsumption+0x136>
	{
		temp2 = CR_UNDER;
    ae9a:	230b      	movs	r3, #11
    ae9c:	18fb      	adds	r3, r7, r3
    ae9e:	2202      	movs	r2, #2
    aea0:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>2;
    aea2:	68fb      	ldr	r3, [r7, #12]
    aea4:	089b      	lsrs	r3, r3, #2
    aea6:	60fb      	str	r3, [r7, #12]
    aea8:	e003      	b.n	aeb2 <checkCurrentConsumption+0x13e>
	}
	else
	{
		temp2= CR_NORMAL;
    aeaa:	230b      	movs	r3, #11
    aeac:	18fb      	adds	r3, r7, r3
    aeae:	2200      	movs	r2, #0
    aeb0:	701a      	strb	r2, [r3, #0]
	}
	if(lastCurrentReading == temp2)
    aeb2:	4b2d      	ldr	r3, [pc, #180]	; (af68 <checkCurrentConsumption+0x1f4>)
    aeb4:	781b      	ldrb	r3, [r3, #0]
    aeb6:	220b      	movs	r2, #11
    aeb8:	18ba      	adds	r2, r7, r2
    aeba:	7812      	ldrb	r2, [r2, #0]
    aebc:	429a      	cmp	r2, r3
    aebe:	d12c      	bne.n	af1a <checkCurrentConsumption+0x1a6>
	{
		if(xTaskGetTickCount()-currentEventFilterTempTime>overLoadDetectValue)
    aec0:	4b23      	ldr	r3, [pc, #140]	; (af50 <checkCurrentConsumption+0x1dc>)
    aec2:	4798      	blx	r3
    aec4:	0002      	movs	r2, r0
    aec6:	4b29      	ldr	r3, [pc, #164]	; (af6c <checkCurrentConsumption+0x1f8>)
    aec8:	681b      	ldr	r3, [r3, #0]
    aeca:	1ad2      	subs	r2, r2, r3
    aecc:	68fb      	ldr	r3, [r7, #12]
    aece:	429a      	cmp	r2, r3
    aed0:	d92f      	bls.n	af32 <checkCurrentConsumption+0x1be>
		{
			if(temp2==CR_OVER)
    aed2:	230b      	movs	r3, #11
    aed4:	18fb      	adds	r3, r7, r3
    aed6:	781b      	ldrb	r3, [r3, #0]
    aed8:	2b01      	cmp	r3, #1
    aeda:	d10c      	bne.n	aef6 <checkCurrentConsumption+0x182>
			{
				stopMotor(false,true,false);
    aedc:	2200      	movs	r2, #0
    aede:	2101      	movs	r1, #1
    aee0:	2000      	movs	r0, #0
    aee2:	4b23      	ldr	r3, [pc, #140]	; (af70 <checkCurrentConsumption+0x1fc>)
    aee4:	4798      	blx	r3
				simEventTemp[12] = registerEvent('B');			//register overload Event
    aee6:	2042      	movs	r0, #66	; 0x42
    aee8:	4b22      	ldr	r3, [pc, #136]	; (af74 <checkCurrentConsumption+0x200>)
    aeea:	4798      	blx	r3
    aeec:	0003      	movs	r3, r0
    aeee:	001a      	movs	r2, r3
    aef0:	4b21      	ldr	r3, [pc, #132]	; (af78 <checkCurrentConsumption+0x204>)
    aef2:	731a      	strb	r2, [r3, #12]
    aef4:	e01d      	b.n	af32 <checkCurrentConsumption+0x1be>
			}
			else if(temp2==CR_UNDER)
    aef6:	230b      	movs	r3, #11
    aef8:	18fb      	adds	r3, r7, r3
    aefa:	781b      	ldrb	r3, [r3, #0]
    aefc:	2b02      	cmp	r3, #2
    aefe:	d118      	bne.n	af32 <checkCurrentConsumption+0x1be>
			{
				stopMotor(false,true,false);
    af00:	2200      	movs	r2, #0
    af02:	2101      	movs	r1, #1
    af04:	2000      	movs	r0, #0
    af06:	4b1a      	ldr	r3, [pc, #104]	; (af70 <checkCurrentConsumption+0x1fc>)
    af08:	4798      	blx	r3
				simEventTemp[13] = registerEvent('J');			// register Underload Event
    af0a:	204a      	movs	r0, #74	; 0x4a
    af0c:	4b19      	ldr	r3, [pc, #100]	; (af74 <checkCurrentConsumption+0x200>)
    af0e:	4798      	blx	r3
    af10:	0003      	movs	r3, r0
    af12:	001a      	movs	r2, r3
    af14:	4b18      	ldr	r3, [pc, #96]	; (af78 <checkCurrentConsumption+0x204>)
    af16:	735a      	strb	r2, [r3, #13]
    af18:	e00b      	b.n	af32 <checkCurrentConsumption+0x1be>
			}
		}
	}
	else
	{
		currentEventFilterTempTime = xTaskGetTickCount();
    af1a:	4b0d      	ldr	r3, [pc, #52]	; (af50 <checkCurrentConsumption+0x1dc>)
    af1c:	4798      	blx	r3
    af1e:	0002      	movs	r2, r0
    af20:	4b12      	ldr	r3, [pc, #72]	; (af6c <checkCurrentConsumption+0x1f8>)
    af22:	601a      	str	r2, [r3, #0]
		lastCurrentReading=temp2;
    af24:	4b10      	ldr	r3, [pc, #64]	; (af68 <checkCurrentConsumption+0x1f4>)
    af26:	220b      	movs	r2, #11
    af28:	18ba      	adds	r2, r7, r2
    af2a:	7812      	ldrb	r2, [r2, #0]
    af2c:	701a      	strb	r2, [r3, #0]
    af2e:	e000      	b.n	af32 <checkCurrentConsumption+0x1be>
		return;
    af30:	46c0      	nop			; (mov r8, r8)
	}
}
    af32:	46bd      	mov	sp, r7
    af34:	b004      	add	sp, #16
    af36:	bd80      	pop	{r7, pc}
    af38:	20000761 	.word	0x20000761
    af3c:	20000751 	.word	0x20000751
    af40:	00009e1d 	.word	0x00009e1d
    af44:	2000064c 	.word	0x2000064c
    af48:	20000763 	.word	0x20000763
    af4c:	20000728 	.word	0x20000728
    af50:	0000f1fd 	.word	0x0000f1fd
    af54:	2000075c 	.word	0x2000075c
    af58:	00007530 	.word	0x00007530
    af5c:	200006cc 	.word	0x200006cc
    af60:	00002ee0 	.word	0x00002ee0
    af64:	00004650 	.word	0x00004650
    af68:	2000074e 	.word	0x2000074e
    af6c:	20000734 	.word	0x20000734
    af70:	0000a6e9 	.word	0x0000a6e9
    af74:	00004679 	.word	0x00004679
    af78:	200006f0 	.word	0x200006f0

0000af7c <button_detect_pin_callback>:

static void button_detect_pin_callback(void)
{
    af7c:	b580      	push	{r7, lr}
    af7e:	af00      	add	r7, sp, #0
	buttonEventOccured = true;
    af80:	4b02      	ldr	r3, [pc, #8]	; (af8c <button_detect_pin_callback+0x10>)
    af82:	2201      	movs	r2, #1
    af84:	701a      	strb	r2, [r3, #0]
	//	xTaskNotifyGive(fiftymsTask);
}
    af86:	46c0      	nop			; (mov r8, r8)
    af88:	46bd      	mov	sp, r7
    af8a:	bd80      	pop	{r7, pc}
    af8c:	20000767 	.word	0x20000767

0000af90 <vTask_MOTORCONTROL>:

static void vTask_MOTORCONTROL(void *params)
{
    af90:	b590      	push	{r4, r7, lr}
    af92:	b087      	sub	sp, #28
    af94:	af00      	add	r7, sp, #0
    af96:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	
	Configure_ADC0();
    af98:	4bbb      	ldr	r3, [pc, #748]	; (b288 <vTask_MOTORCONTROL+0x2f8>)
    af9a:	4798      	blx	r3
	
	configure_ac();
    af9c:	4bbb      	ldr	r3, [pc, #748]	; (b28c <vTask_MOTORCONTROL+0x2fc>)
    af9e:	4798      	blx	r3
	configure_rtc();
    afa0:	4bbb      	ldr	r3, [pc, #748]	; (b290 <vTask_MOTORCONTROL+0x300>)
    afa2:	4798      	blx	r3
	configure_event();
    afa4:	4bbb      	ldr	r3, [pc, #748]	; (b294 <vTask_MOTORCONTROL+0x304>)
    afa6:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	gotOffCommand = false;
    afa8:	4bbb      	ldr	r3, [pc, #748]	; (b298 <vTask_MOTORCONTROL+0x308>)
    afaa:	2200      	movs	r2, #0
    afac:	701a      	strb	r2, [r3, #0]
	gotOnCommand = false;
    afae:	4bbb      	ldr	r3, [pc, #748]	; (b29c <vTask_MOTORCONTROL+0x30c>)
    afb0:	2200      	movs	r2, #0
    afb2:	701a      	strb	r2, [r3, #0]

	//////////////////////////////////////////////////////////////////////////
	eventOccured = false;
    afb4:	4bba      	ldr	r3, [pc, #744]	; (b2a0 <vTask_MOTORCONTROL+0x310>)
    afb6:	2200      	movs	r2, #0
    afb8:	701a      	strb	r2, [r3, #0]
	
	uint8_t last_comparison = AC_CHAN_STATUS_UNKNOWN;
    afba:	2314      	movs	r3, #20
    afbc:	18fb      	adds	r3, r7, r3
    afbe:	2201      	movs	r2, #1
    afc0:	701a      	strb	r2, [r3, #0]
	
	//sets the variable to store current ticks, so that we can delay first event operation
	uint32_t delayForFirstEvent = xTaskGetTickCount();			
    afc2:	4bb8      	ldr	r3, [pc, #736]	; (b2a4 <vTask_MOTORCONTROL+0x314>)
    afc4:	4798      	blx	r3
    afc6:	0003      	movs	r3, r0
    afc8:	613b      	str	r3, [r7, #16]
	bool firstEvent = true;	
    afca:	2317      	movs	r3, #23
    afcc:	18fb      	adds	r3, r7, r3
    afce:	2201      	movs	r2, #1
    afd0:	701a      	strb	r2, [r3, #0]
	
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0);
    afd2:	2314      	movs	r3, #20
    afd4:	18fc      	adds	r4, r7, r3
    afd6:	4bb4      	ldr	r3, [pc, #720]	; (b2a8 <vTask_MOTORCONTROL+0x318>)
    afd8:	2100      	movs	r1, #0
    afda:	0018      	movs	r0, r3
    afdc:	4bb3      	ldr	r3, [pc, #716]	; (b2ac <vTask_MOTORCONTROL+0x31c>)
    afde:	4798      	blx	r3
    afe0:	0003      	movs	r3, r0
    afe2:	7023      	strb	r3, [r4, #0]
	vTaskDelay(500/portTICK_PERIOD_MS);
    afe4:	23fa      	movs	r3, #250	; 0xfa
    afe6:	005b      	lsls	r3, r3, #1
    afe8:	0018      	movs	r0, r3
    afea:	4bb1      	ldr	r3, [pc, #708]	; (b2b0 <vTask_MOTORCONTROL+0x320>)
    afec:	4798      	blx	r3
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0); //read again
    afee:	2314      	movs	r3, #20
    aff0:	18fc      	adds	r4, r7, r3
    aff2:	4bad      	ldr	r3, [pc, #692]	; (b2a8 <vTask_MOTORCONTROL+0x318>)
    aff4:	2100      	movs	r1, #0
    aff6:	0018      	movs	r0, r3
    aff8:	4bac      	ldr	r3, [pc, #688]	; (b2ac <vTask_MOTORCONTROL+0x31c>)
    affa:	4798      	blx	r3
    affc:	0003      	movs	r3, r0
    affe:	7023      	strb	r3, [r4, #0]
	
	if (last_comparison & AC_CHAN_STATUS_POS_ABOVE_NEG)
    b000:	2314      	movs	r3, #20
    b002:	18fb      	adds	r3, r7, r3
    b004:	781b      	ldrb	r3, [r3, #0]
    b006:	2204      	movs	r2, #4
    b008:	4013      	ands	r3, r2
    b00a:	d003      	beq.n	b014 <vTask_MOTORCONTROL+0x84>
	{
		isACpowerAvailable = true;
    b00c:	4ba9      	ldr	r3, [pc, #676]	; (b2b4 <vTask_MOTORCONTROL+0x324>)
    b00e:	2201      	movs	r2, #1
    b010:	701a      	strb	r2, [r3, #0]
    b012:	e002      	b.n	b01a <vTask_MOTORCONTROL+0x8a>
	}
	else
	{
		isACpowerAvailable = false;
    b014:	4ba7      	ldr	r3, [pc, #668]	; (b2b4 <vTask_MOTORCONTROL+0x324>)
    b016:	2200      	movs	r2, #0
    b018:	701a      	strb	r2, [r3, #0]
	}
	
	current_three_phase_state = AC_OFF;
    b01a:	4ba7      	ldr	r3, [pc, #668]	; (b2b8 <vTask_MOTORCONTROL+0x328>)
    b01c:	2200      	movs	r2, #0
    b01e:	701a      	strb	r2, [r3, #0]
	//////////////////////////////////////////////////////////////////////////
	
	startTimerOn = false;
    b020:	4ba6      	ldr	r3, [pc, #664]	; (b2bc <vTask_MOTORCONTROL+0x32c>)
    b022:	2200      	movs	r2, #0
    b024:	701a      	strb	r2, [r3, #0]

	singlePhasingTime = 10;
    b026:	4ba6      	ldr	r3, [pc, #664]	; (b2c0 <vTask_MOTORCONTROL+0x330>)
    b028:	220a      	movs	r2, #10
    b02a:	701a      	strb	r2, [r3, #0]
	singlePhasingTimerOn = false;
    b02c:	4ba5      	ldr	r3, [pc, #660]	; (b2c4 <vTask_MOTORCONTROL+0x334>)
    b02e:	2200      	movs	r2, #0
    b030:	701a      	strb	r2, [r3, #0]

	startSequenceTimerTime = 20;
    b032:	4ba5      	ldr	r3, [pc, #660]	; (b2c8 <vTask_MOTORCONTROL+0x338>)
    b034:	2214      	movs	r2, #20
    b036:	701a      	strb	r2, [r3, #0]
	starDeltaTimerOn=false;
    b038:	4ba4      	ldr	r3, [pc, #656]	; (b2cc <vTask_MOTORCONTROL+0x33c>)
    b03a:	2200      	movs	r2, #0
    b03c:	701a      	strb	r2, [r3, #0]
	startSequenceOn = false;
    b03e:	4ba4      	ldr	r3, [pc, #656]	; (b2d0 <vTask_MOTORCONTROL+0x340>)
    b040:	2200      	movs	r2, #0
    b042:	701a      	strb	r2, [r3, #0]

	stopSequenceTimerTime = 20;
    b044:	4ba3      	ldr	r3, [pc, #652]	; (b2d4 <vTask_MOTORCONTROL+0x344>)
    b046:	2214      	movs	r2, #20
    b048:	701a      	strb	r2, [r3, #0]
	stopSequenceOn = false;
    b04a:	4ba3      	ldr	r3, [pc, #652]	; (b2d8 <vTask_MOTORCONTROL+0x348>)
    b04c:	2200      	movs	r2, #0
    b04e:	701a      	strb	r2, [r3, #0]
	
	setAllPhaseState(false); // allPhase = false;
    b050:	2000      	movs	r0, #0
    b052:	4ba2      	ldr	r3, [pc, #648]	; (b2dc <vTask_MOTORCONTROL+0x34c>)
    b054:	4798      	blx	r3
	setMotorState(false);// mFeedback = false;
    b056:	2000      	movs	r0, #0
    b058:	4ba1      	ldr	r3, [pc, #644]	; (b2e0 <vTask_MOTORCONTROL+0x350>)
    b05a:	4798      	blx	r3
	setACPowerState(false);//  phaseAC = false;
    b05c:	2000      	movs	r0, #0
    b05e:	4ba1      	ldr	r3, [pc, #644]	; (b2e4 <vTask_MOTORCONTROL+0x354>)
    b060:	4798      	blx	r3
	
	lastPressTime=0;
    b062:	4ba1      	ldr	r3, [pc, #644]	; (b2e8 <vTask_MOTORCONTROL+0x358>)
    b064:	2200      	movs	r2, #0
    b066:	601a      	str	r2, [r3, #0]
	lastButtonEvent=0;
    b068:	4ba0      	ldr	r3, [pc, #640]	; (b2ec <vTask_MOTORCONTROL+0x35c>)
    b06a:	2200      	movs	r2, #0
    b06c:	701a      	strb	r2, [r3, #0]
	
	uint8_t i= 0;
    b06e:	2316      	movs	r3, #22
    b070:	18fb      	adds	r3, r7, r3
    b072:	2200      	movs	r2, #0
    b074:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
    b076:	4b9e      	ldr	r3, [pc, #632]	; (b2f0 <vTask_MOTORCONTROL+0x360>)
    b078:	785b      	ldrb	r3, [r3, #1]
    b07a:	2b00      	cmp	r3, #0
    b07c:	d004      	beq.n	b088 <vTask_MOTORCONTROL+0xf8>
	{
		i=14;
    b07e:	2316      	movs	r3, #22
    b080:	18fb      	adds	r3, r7, r3
    b082:	220e      	movs	r2, #14
    b084:	701a      	strb	r2, [r3, #0]
    b086:	e00a      	b.n	b09e <vTask_MOTORCONTROL+0x10e>
	}
	else
	{
		i = 12;
    b088:	2316      	movs	r3, #22
    b08a:	18fb      	adds	r3, r7, r3
    b08c:	220c      	movs	r2, #12
    b08e:	701a      	strb	r2, [r3, #0]
	}
	while(i--)
    b090:	e005      	b.n	b09e <vTask_MOTORCONTROL+0x10e>
	{
		simEventTemp[i] = true;
    b092:	2316      	movs	r3, #22
    b094:	18fb      	adds	r3, r7, r3
    b096:	781b      	ldrb	r3, [r3, #0]
    b098:	4a96      	ldr	r2, [pc, #600]	; (b2f4 <vTask_MOTORCONTROL+0x364>)
    b09a:	2101      	movs	r1, #1
    b09c:	54d1      	strb	r1, [r2, r3]
	while(i--)
    b09e:	2316      	movs	r3, #22
    b0a0:	18fb      	adds	r3, r7, r3
    b0a2:	781b      	ldrb	r3, [r3, #0]
    b0a4:	2216      	movs	r2, #22
    b0a6:	18ba      	adds	r2, r7, r2
    b0a8:	1e59      	subs	r1, r3, #1
    b0aa:	7011      	strb	r1, [r2, #0]
    b0ac:	2b00      	cmp	r3, #0
    b0ae:	d1f0      	bne.n	b092 <vTask_MOTORCONTROL+0x102>
	}
	simEvent[0] = 'N';
    b0b0:	4b91      	ldr	r3, [pc, #580]	; (b2f8 <vTask_MOTORCONTROL+0x368>)
    b0b2:	224e      	movs	r2, #78	; 0x4e
    b0b4:	701a      	strb	r2, [r3, #0]
	simEvent[1] = 'P';
    b0b6:	4b90      	ldr	r3, [pc, #576]	; (b2f8 <vTask_MOTORCONTROL+0x368>)
    b0b8:	2250      	movs	r2, #80	; 0x50
    b0ba:	705a      	strb	r2, [r3, #1]
	simEvent[2] = 'U';
    b0bc:	4b8e      	ldr	r3, [pc, #568]	; (b2f8 <vTask_MOTORCONTROL+0x368>)
    b0be:	2255      	movs	r2, #85	; 0x55
    b0c0:	709a      	strb	r2, [r3, #2]
	simEvent[3] = 'F';
    b0c2:	4b8d      	ldr	r3, [pc, #564]	; (b2f8 <vTask_MOTORCONTROL+0x368>)
    b0c4:	2246      	movs	r2, #70	; 0x46
    b0c6:	70da      	strb	r2, [r3, #3]
	simEvent[4] = 'G';
    b0c8:	4b8b      	ldr	r3, [pc, #556]	; (b2f8 <vTask_MOTORCONTROL+0x368>)
    b0ca:	2247      	movs	r2, #71	; 0x47
    b0cc:	711a      	strb	r2, [r3, #4]
	simEvent[5] = 'L';
    b0ce:	4b8a      	ldr	r3, [pc, #552]	; (b2f8 <vTask_MOTORCONTROL+0x368>)
    b0d0:	224c      	movs	r2, #76	; 0x4c
    b0d2:	715a      	strb	r2, [r3, #5]
	simEvent[6] = 'C';
    b0d4:	4b88      	ldr	r3, [pc, #544]	; (b2f8 <vTask_MOTORCONTROL+0x368>)
    b0d6:	2243      	movs	r2, #67	; 0x43
    b0d8:	719a      	strb	r2, [r3, #6]
	simEvent[7] = 'S';
    b0da:	4b87      	ldr	r3, [pc, #540]	; (b2f8 <vTask_MOTORCONTROL+0x368>)
    b0dc:	2253      	movs	r2, #83	; 0x53
    b0de:	71da      	strb	r2, [r3, #7]
	simEvent[8] = 'O';
    b0e0:	4b85      	ldr	r3, [pc, #532]	; (b2f8 <vTask_MOTORCONTROL+0x368>)
    b0e2:	224f      	movs	r2, #79	; 0x4f
    b0e4:	721a      	strb	r2, [r3, #8]
	simEvent[9] = 'A';
    b0e6:	4b84      	ldr	r3, [pc, #528]	; (b2f8 <vTask_MOTORCONTROL+0x368>)
    b0e8:	2241      	movs	r2, #65	; 0x41
    b0ea:	725a      	strb	r2, [r3, #9]

	simEvent[10] = ')';		//AUTO ON EVENT
    b0ec:	4b82      	ldr	r3, [pc, #520]	; (b2f8 <vTask_MOTORCONTROL+0x368>)
    b0ee:	2229      	movs	r2, #41	; 0x29
    b0f0:	729a      	strb	r2, [r3, #10]
	simEvent[11] = '[';		//AUTO OFF EVENT
    b0f2:	4b81      	ldr	r3, [pc, #516]	; (b2f8 <vTask_MOTORCONTROL+0x368>)
    b0f4:	225b      	movs	r2, #91	; 0x5b
    b0f6:	72da      	strb	r2, [r3, #11]
	
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
    b0f8:	4b7d      	ldr	r3, [pc, #500]	; (b2f0 <vTask_MOTORCONTROL+0x360>)
    b0fa:	785b      	ldrb	r3, [r3, #1]
    b0fc:	2b00      	cmp	r3, #0
    b0fe:	d005      	beq.n	b10c <vTask_MOTORCONTROL+0x17c>
	{
		simEvent[12] = 'B';		//Overload Event
    b100:	4b7d      	ldr	r3, [pc, #500]	; (b2f8 <vTask_MOTORCONTROL+0x368>)
    b102:	2242      	movs	r2, #66	; 0x42
    b104:	731a      	strb	r2, [r3, #12]
		simEvent[13] = 'J';		//Underload EVENT
    b106:	4b7c      	ldr	r3, [pc, #496]	; (b2f8 <vTask_MOTORCONTROL+0x368>)
    b108:	224a      	movs	r2, #74	; 0x4a
    b10a:	735a      	strb	r2, [r3, #13]
	}
	//////////////////////////////////////////////////////////////////////////
	
	resetAutoStart(true);
    b10c:	2001      	movs	r0, #1
    b10e:	4b7b      	ldr	r3, [pc, #492]	; (b2fc <vTask_MOTORCONTROL+0x36c>)
    b110:	4798      	blx	r3
	eventOccured=true;
    b112:	4b63      	ldr	r3, [pc, #396]	; (b2a0 <vTask_MOTORCONTROL+0x310>)
    b114:	2201      	movs	r2, #1
    b116:	701a      	strb	r2, [r3, #0]

	
	for (;;)
	{
		
		if(taskPSet)
    b118:	4b79      	ldr	r3, [pc, #484]	; (b300 <vTask_MOTORCONTROL+0x370>)
    b11a:	781b      	ldrb	r3, [r3, #0]
    b11c:	b2db      	uxtb	r3, r3
    b11e:	2b00      	cmp	r3, #0
    b120:	d006      	beq.n	b130 <vTask_MOTORCONTROL+0x1a0>
		{
			vTaskPrioritySet(NULL,1);
    b122:	2101      	movs	r1, #1
    b124:	2000      	movs	r0, #0
    b126:	4b77      	ldr	r3, [pc, #476]	; (b304 <vTask_MOTORCONTROL+0x374>)
    b128:	4798      	blx	r3
			taskPSet=false;
    b12a:	4b75      	ldr	r3, [pc, #468]	; (b300 <vTask_MOTORCONTROL+0x370>)
    b12c:	2200      	movs	r2, #0
    b12e:	701a      	strb	r2, [r3, #0]
		}
		
		if(!startSequenceOn && !stopSequenceOn)
    b130:	4b67      	ldr	r3, [pc, #412]	; (b2d0 <vTask_MOTORCONTROL+0x340>)
    b132:	781b      	ldrb	r3, [r3, #0]
    b134:	2201      	movs	r2, #1
    b136:	4053      	eors	r3, r2
    b138:	b2db      	uxtb	r3, r3
    b13a:	2b00      	cmp	r3, #0
    b13c:	d032      	beq.n	b1a4 <vTask_MOTORCONTROL+0x214>
    b13e:	4b66      	ldr	r3, [pc, #408]	; (b2d8 <vTask_MOTORCONTROL+0x348>)
    b140:	781b      	ldrb	r3, [r3, #0]
    b142:	2201      	movs	r2, #1
    b144:	4053      	eors	r3, r2
    b146:	b2db      	uxtb	r3, r3
    b148:	2b00      	cmp	r3, #0
    b14a:	d02b      	beq.n	b1a4 <vTask_MOTORCONTROL+0x214>
		{
			uint8_t tempEventOccured=eventOccured;
    b14c:	4b54      	ldr	r3, [pc, #336]	; (b2a0 <vTask_MOTORCONTROL+0x310>)
    b14e:	781b      	ldrb	r3, [r3, #0]
    b150:	b2da      	uxtb	r2, r3
    b152:	230f      	movs	r3, #15
    b154:	18fb      	adds	r3, r7, r3
    b156:	701a      	strb	r2, [r3, #0]
			uint8_t tempButtonEventOccured=buttonEventOccured;
    b158:	4b6b      	ldr	r3, [pc, #428]	; (b308 <vTask_MOTORCONTROL+0x378>)
    b15a:	781b      	ldrb	r3, [r3, #0]
    b15c:	b2da      	uxtb	r2, r3
    b15e:	230e      	movs	r3, #14
    b160:	18fb      	adds	r3, r7, r3
    b162:	701a      	strb	r2, [r3, #0]
		
			
			if(tempEventOccured)
    b164:	230f      	movs	r3, #15
    b166:	18fb      	adds	r3, r7, r3
    b168:	781b      	ldrb	r3, [r3, #0]
    b16a:	2b00      	cmp	r3, #0
    b16c:	d013      	beq.n	b196 <vTask_MOTORCONTROL+0x206>
			{
					if(firstEvent)
    b16e:	2317      	movs	r3, #23
    b170:	18fb      	adds	r3, r7, r3
    b172:	781b      	ldrb	r3, [r3, #0]
    b174:	2b00      	cmp	r3, #0
    b176:	d00c      	beq.n	b192 <vTask_MOTORCONTROL+0x202>
					{
						if(xTaskGetTickCount()-delayForFirstEvent>35000L)
    b178:	4b4a      	ldr	r3, [pc, #296]	; (b2a4 <vTask_MOTORCONTROL+0x314>)
    b17a:	4798      	blx	r3
    b17c:	0002      	movs	r2, r0
    b17e:	693b      	ldr	r3, [r7, #16]
    b180:	1ad3      	subs	r3, r2, r3
    b182:	4a62      	ldr	r2, [pc, #392]	; (b30c <vTask_MOTORCONTROL+0x37c>)
    b184:	4293      	cmp	r3, r2
    b186:	d906      	bls.n	b196 <vTask_MOTORCONTROL+0x206>
						{
							firstEvent = false;
    b188:	2317      	movs	r3, #23
    b18a:	18fb      	adds	r3, r7, r3
    b18c:	2200      	movs	r2, #0
    b18e:	701a      	strb	r2, [r3, #0]
    b190:	e001      	b.n	b196 <vTask_MOTORCONTROL+0x206>
						}
					}
					else
					{
						operateOnEvent();
    b192:	4b5f      	ldr	r3, [pc, #380]	; (b310 <vTask_MOTORCONTROL+0x380>)
    b194:	4798      	blx	r3
			//if(tempButtonEventOccured)
			//{
			//operateOnButtonEvent();
			//}
			
			if(lastButtonEvent)
    b196:	4b55      	ldr	r3, [pc, #340]	; (b2ec <vTask_MOTORCONTROL+0x35c>)
    b198:	781b      	ldrb	r3, [r3, #0]
    b19a:	b2db      	uxtb	r3, r3
    b19c:	2b00      	cmp	r3, #0
    b19e:	d001      	beq.n	b1a4 <vTask_MOTORCONTROL+0x214>
			{
				buttonFilter();
    b1a0:	4b5c      	ldr	r3, [pc, #368]	; (b314 <vTask_MOTORCONTROL+0x384>)
    b1a2:	4798      	blx	r3
			}
		}
		//// check if it is the time for new Voltage reading and if so than get new Voltage Reading.
		if(should_Detect_New_Voltage()) {
    b1a4:	4b5c      	ldr	r3, [pc, #368]	; (b318 <vTask_MOTORCONTROL+0x388>)
    b1a6:	4798      	blx	r3
    b1a8:	1e03      	subs	r3, r0, #0
    b1aa:	d003      	beq.n	b1b4 <vTask_MOTORCONTROL+0x224>
			detect_battery_voltage_and_percentage();
    b1ac:	4b5b      	ldr	r3, [pc, #364]	; (b31c <vTask_MOTORCONTROL+0x38c>)
    b1ae:	4798      	blx	r3
			detect_Three_Phase_Voltage();
    b1b0:	4b5b      	ldr	r3, [pc, #364]	; (b320 <vTask_MOTORCONTROL+0x390>)
    b1b2:	4798      	blx	r3
		}
		////////
		
		// To check if new reading of motor current is needed, and get new reading, and update in Analog_Parameter_Struct
		
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
    b1b4:	4b4e      	ldr	r3, [pc, #312]	; (b2f0 <vTask_MOTORCONTROL+0x360>)
    b1b6:	785b      	ldrb	r3, [r3, #1]
    b1b8:	2b00      	cmp	r3, #0
    b1ba:	d013      	beq.n	b1e4 <vTask_MOTORCONTROL+0x254>
		{
			if(should_Detect_New_Current()) {
    b1bc:	4b59      	ldr	r3, [pc, #356]	; (b324 <vTask_MOTORCONTROL+0x394>)
    b1be:	4798      	blx	r3
    b1c0:	1e03      	subs	r3, r0, #0
    b1c2:	d00f      	beq.n	b1e4 <vTask_MOTORCONTROL+0x254>
				detect_Motor_Current();
    b1c4:	4b58      	ldr	r3, [pc, #352]	; (b328 <vTask_MOTORCONTROL+0x398>)
    b1c6:	4798      	blx	r3
				if (user_settings_parameter_struct.detectMotorFeedback== MOTORFEEDBACK_DETECTION_CURRENT)
    b1c8:	4b58      	ldr	r3, [pc, #352]	; (b32c <vTask_MOTORCONTROL+0x39c>)
    b1ca:	2225      	movs	r2, #37	; 0x25
    b1cc:	5c9b      	ldrb	r3, [r3, r2]
    b1ce:	2b01      	cmp	r3, #1
    b1d0:	d106      	bne.n	b1e0 <vTask_MOTORCONTROL+0x250>
				{
					if(detectMotorStateChangeUsingCurrent())
    b1d2:	4b57      	ldr	r3, [pc, #348]	; (b330 <vTask_MOTORCONTROL+0x3a0>)
    b1d4:	4798      	blx	r3
    b1d6:	1e03      	subs	r3, r0, #0
    b1d8:	d002      	beq.n	b1e0 <vTask_MOTORCONTROL+0x250>
					{
						eventOccured=true;
    b1da:	4b31      	ldr	r3, [pc, #196]	; (b2a0 <vTask_MOTORCONTROL+0x310>)
    b1dc:	2201      	movs	r2, #1
    b1de:	701a      	strb	r2, [r3, #0]
					}
				}
				
				checkCurrentConsumption();
    b1e0:	4b54      	ldr	r3, [pc, #336]	; (b334 <vTask_MOTORCONTROL+0x3a4>)
    b1e2:	4798      	blx	r3
			}
		}
		///////
		if (waitStableLineOn && waitStableLineOver())
    b1e4:	4b54      	ldr	r3, [pc, #336]	; (b338 <vTask_MOTORCONTROL+0x3a8>)
    b1e6:	781b      	ldrb	r3, [r3, #0]
    b1e8:	2b00      	cmp	r3, #0
    b1ea:	d005      	beq.n	b1f8 <vTask_MOTORCONTROL+0x268>
    b1ec:	4b53      	ldr	r3, [pc, #332]	; (b33c <vTask_MOTORCONTROL+0x3ac>)
    b1ee:	4798      	blx	r3
    b1f0:	1e03      	subs	r3, r0, #0
    b1f2:	d001      	beq.n	b1f8 <vTask_MOTORCONTROL+0x268>
		{
			operateOnStableLine();
    b1f4:	4b52      	ldr	r3, [pc, #328]	; (b340 <vTask_MOTORCONTROL+0x3b0>)
    b1f6:	4798      	blx	r3
		}
		if(singlePhasingTimerOn)
    b1f8:	4b32      	ldr	r3, [pc, #200]	; (b2c4 <vTask_MOTORCONTROL+0x334>)
    b1fa:	781b      	ldrb	r3, [r3, #0]
    b1fc:	2b00      	cmp	r3, #0
    b1fe:	d01a      	beq.n	b236 <vTask_MOTORCONTROL+0x2a6>
		{
			bool b;
			if (structThreePhase_state.u8t_phase_ac_state != AC_3PH)
    b200:	4b50      	ldr	r3, [pc, #320]	; (b344 <vTask_MOTORCONTROL+0x3b4>)
    b202:	785b      	ldrb	r3, [r3, #1]
    b204:	b2db      	uxtb	r3, r3
    b206:	2b03      	cmp	r3, #3
    b208:	d003      	beq.n	b212 <vTask_MOTORCONTROL+0x282>
			{
				b = false;
    b20a:	2315      	movs	r3, #21
    b20c:	18fb      	adds	r3, r7, r3
    b20e:	2200      	movs	r2, #0
    b210:	701a      	strb	r2, [r3, #0]
			}
			if(!b)		//3 phase pin is low
    b212:	2315      	movs	r3, #21
    b214:	18fb      	adds	r3, r7, r3
    b216:	781b      	ldrb	r3, [r3, #0]
    b218:	2201      	movs	r2, #1
    b21a:	4053      	eors	r3, r2
    b21c:	b2db      	uxtb	r3, r3
    b21e:	2b00      	cmp	r3, #0
    b220:	d006      	beq.n	b230 <vTask_MOTORCONTROL+0x2a0>
			{
				if(singlePhasingTimerOver())
    b222:	4b49      	ldr	r3, [pc, #292]	; (b348 <vTask_MOTORCONTROL+0x3b8>)
    b224:	4798      	blx	r3
    b226:	1e03      	subs	r3, r0, #0
    b228:	d005      	beq.n	b236 <vTask_MOTORCONTROL+0x2a6>
				{
					operateOnSinglePhasing();
    b22a:	4b48      	ldr	r3, [pc, #288]	; (b34c <vTask_MOTORCONTROL+0x3bc>)
    b22c:	4798      	blx	r3
    b22e:	e002      	b.n	b236 <vTask_MOTORCONTROL+0x2a6>
				}
			}
			else
			{
				singlePhasingTimerOn=false;
    b230:	4b24      	ldr	r3, [pc, #144]	; (b2c4 <vTask_MOTORCONTROL+0x334>)
    b232:	2200      	movs	r2, #0
    b234:	701a      	strb	r2, [r3, #0]
			}
		}
		if (startTimerOn)
    b236:	4b21      	ldr	r3, [pc, #132]	; (b2bc <vTask_MOTORCONTROL+0x32c>)
    b238:	781b      	ldrb	r3, [r3, #0]
    b23a:	2b00      	cmp	r3, #0
    b23c:	d007      	beq.n	b24e <vTask_MOTORCONTROL+0x2be>
		{
			if (startMotorTimerOver())
    b23e:	4b44      	ldr	r3, [pc, #272]	; (b350 <vTask_MOTORCONTROL+0x3c0>)
    b240:	4798      	blx	r3
    b242:	1e03      	subs	r3, r0, #0
    b244:	d003      	beq.n	b24e <vTask_MOTORCONTROL+0x2be>
			{
				startMotor(false,false);
    b246:	2100      	movs	r1, #0
    b248:	2000      	movs	r0, #0
    b24a:	4b42      	ldr	r3, [pc, #264]	; (b354 <vTask_MOTORCONTROL+0x3c4>)
    b24c:	4798      	blx	r3
			}
		}
		if (startSequenceOn)
    b24e:	4b20      	ldr	r3, [pc, #128]	; (b2d0 <vTask_MOTORCONTROL+0x340>)
    b250:	781b      	ldrb	r3, [r3, #0]
    b252:	2b00      	cmp	r3, #0
    b254:	d001      	beq.n	b25a <vTask_MOTORCONTROL+0x2ca>
		{
			terminateStartRelay();
    b256:	4b40      	ldr	r3, [pc, #256]	; (b358 <vTask_MOTORCONTROL+0x3c8>)
    b258:	4798      	blx	r3
		}
		if(starDeltaTimerOn)
    b25a:	4b1c      	ldr	r3, [pc, #112]	; (b2cc <vTask_MOTORCONTROL+0x33c>)
    b25c:	781b      	ldrb	r3, [r3, #0]
    b25e:	2b00      	cmp	r3, #0
    b260:	d001      	beq.n	b266 <vTask_MOTORCONTROL+0x2d6>
		{
			terminateStarDeltaTimer();
    b262:	4b3e      	ldr	r3, [pc, #248]	; (b35c <vTask_MOTORCONTROL+0x3cc>)
    b264:	4798      	blx	r3
		}
		if(stopSequenceOn)
    b266:	4b1c      	ldr	r3, [pc, #112]	; (b2d8 <vTask_MOTORCONTROL+0x348>)
    b268:	781b      	ldrb	r3, [r3, #0]
    b26a:	2b00      	cmp	r3, #0
    b26c:	d001      	beq.n	b272 <vTask_MOTORCONTROL+0x2e2>
		{
			terminateStopRelay();
    b26e:	4b3c      	ldr	r3, [pc, #240]	; (b360 <vTask_MOTORCONTROL+0x3d0>)
    b270:	4798      	blx	r3
		}
		
		SIMEventManager();
    b272:	4b3c      	ldr	r3, [pc, #240]	; (b364 <vTask_MOTORCONTROL+0x3d4>)
    b274:	4798      	blx	r3
		if (factory_settings_parameter_struct.ENABLE_M2M)
    b276:	4b1e      	ldr	r3, [pc, #120]	; (b2f0 <vTask_MOTORCONTROL+0x360>)
    b278:	78db      	ldrb	r3, [r3, #3]
    b27a:	2b00      	cmp	r3, #0
    b27c:	d100      	bne.n	b280 <vTask_MOTORCONTROL+0x2f0>
    b27e:	e74b      	b.n	b118 <vTask_MOTORCONTROL+0x188>
		{
			M2MEventManager();
    b280:	4b39      	ldr	r3, [pc, #228]	; (b368 <vTask_MOTORCONTROL+0x3d8>)
    b282:	4798      	blx	r3
		if(taskPSet)
    b284:	e748      	b.n	b118 <vTask_MOTORCONTROL+0x188>
    b286:	46c0      	nop			; (mov r8, r8)
    b288:	000091ed 	.word	0x000091ed
    b28c:	0000b7ad 	.word	0x0000b7ad
    b290:	0000b8a1 	.word	0x0000b8a1
    b294:	0000b961 	.word	0x0000b961
    b298:	200007b4 	.word	0x200007b4
    b29c:	200006ec 	.word	0x200006ec
    b2a0:	20000707 	.word	0x20000707
    b2a4:	0000f1fd 	.word	0x0000f1fd
    b2a8:	20000824 	.word	0x20000824
    b2ac:	0000831d 	.word	0x0000831d
    b2b0:	0000ee99 	.word	0x0000ee99
    b2b4:	20000755 	.word	0x20000755
    b2b8:	200007e8 	.word	0x200007e8
    b2bc:	20000762 	.word	0x20000762
    b2c0:	20000738 	.word	0x20000738
    b2c4:	20000759 	.word	0x20000759
    b2c8:	200007c0 	.word	0x200007c0
    b2cc:	20000763 	.word	0x20000763
    b2d0:	20000761 	.word	0x20000761
    b2d4:	20000802 	.word	0x20000802
    b2d8:	20000751 	.word	0x20000751
    b2dc:	00009dc9 	.word	0x00009dc9
    b2e0:	00009e31 	.word	0x00009e31
    b2e4:	00009d95 	.word	0x00009d95
    b2e8:	20000730 	.word	0x20000730
    b2ec:	20000750 	.word	0x20000750
    b2f0:	20000618 	.word	0x20000618
    b2f4:	200006f0 	.word	0x200006f0
    b2f8:	200007a0 	.word	0x200007a0
    b2fc:	0000a0f9 	.word	0x0000a0f9
    b300:	20000706 	.word	0x20000706
    b304:	0000eef5 	.word	0x0000eef5
    b308:	20000767 	.word	0x20000767
    b30c:	000088b8 	.word	0x000088b8
    b310:	0000a1a5 	.word	0x0000a1a5
    b314:	0000ba6d 	.word	0x0000ba6d
    b318:	0000999d 	.word	0x0000999d
    b31c:	000099b9 	.word	0x000099b9
    b320:	00009a79 	.word	0x00009a79
    b324:	00009d65 	.word	0x00009d65
    b328:	00009c65 	.word	0x00009c65
    b32c:	2000064c 	.word	0x2000064c
    b330:	00009fd1 	.word	0x00009fd1
    b334:	0000ad75 	.word	0x0000ad75
    b338:	200007b5 	.word	0x200007b5
    b33c:	0000a4e1 	.word	0x0000a4e1
    b340:	0000a3b1 	.word	0x0000a3b1
    b344:	20000710 	.word	0x20000710
    b348:	0000a80d 	.word	0x0000a80d
    b34c:	0000a859 	.word	0x0000a859
    b350:	0000a7a5 	.word	0x0000a7a5
    b354:	0000a52d 	.word	0x0000a52d
    b358:	0000a9d1 	.word	0x0000a9d1
    b35c:	0000a961 	.word	0x0000a961
    b360:	0000a895 	.word	0x0000a895
    b364:	0000acdd 	.word	0x0000acdd
    b368:	0000ac99 	.word	0x0000ac99

0000b36c <start_motor_service>:
		}
	}
}

void start_motor_service(void)
{
    b36c:	b590      	push	{r4, r7, lr}
    b36e:	b08b      	sub	sp, #44	; 0x2c
    b370:	af02      	add	r7, sp, #8
	struct extint_chan_conf config_extint_chan_isr;
	extint_chan_get_config_defaults(&config_extint_chan_isr);
    b372:	2314      	movs	r3, #20
    b374:	18fb      	adds	r3, r7, r3
    b376:	0018      	movs	r0, r3
    b378:	4ba4      	ldr	r3, [pc, #656]	; (b60c <start_motor_service+0x2a0>)
    b37a:	4798      	blx	r3
	config_extint_chan_isr.gpio_pin           = PIN_PB11A_EIC_EXTINT11;
    b37c:	2314      	movs	r3, #20
    b37e:	18fb      	adds	r3, r7, r3
    b380:	222b      	movs	r2, #43	; 0x2b
    b382:	601a      	str	r2, [r3, #0]
	config_extint_chan_isr.gpio_pin_mux       = MUX_PB11A_EIC_EXTINT11;
    b384:	2314      	movs	r3, #20
    b386:	18fb      	adds	r3, r7, r3
    b388:	2200      	movs	r2, #0
    b38a:	605a      	str	r2, [r3, #4]
	config_extint_chan_isr.gpio_pin_pull      = EXTINT_PULL_UP;
    b38c:	2314      	movs	r3, #20
    b38e:	18fb      	adds	r3, r7, r3
    b390:	2201      	movs	r2, #1
    b392:	721a      	strb	r2, [r3, #8]
	config_extint_chan_isr.detection_criteria = EXTINT_DETECT_RISING;
    b394:	2314      	movs	r3, #20
    b396:	18fb      	adds	r3, r7, r3
    b398:	2201      	movs	r2, #1
    b39a:	72da      	strb	r2, [r3, #11]
	config_extint_chan_isr.wake_if_sleeping   = false;
    b39c:	2314      	movs	r3, #20
    b39e:	18fb      	adds	r3, r7, r3
    b3a0:	2200      	movs	r2, #0
    b3a2:	725a      	strb	r2, [r3, #9]
	extint_chan_set_config(11, &config_extint_chan_isr);
    b3a4:	2314      	movs	r3, #20
    b3a6:	18fb      	adds	r3, r7, r3
    b3a8:	0019      	movs	r1, r3
    b3aa:	200b      	movs	r0, #11
    b3ac:	4b98      	ldr	r3, [pc, #608]	; (b610 <start_motor_service+0x2a4>)
    b3ae:	4798      	blx	r3
	
	extint_register_callback(PR2_ISR,11,EXTINT_CALLBACK_TYPE_DETECT);
    b3b0:	4b98      	ldr	r3, [pc, #608]	; (b614 <start_motor_service+0x2a8>)
    b3b2:	2200      	movs	r2, #0
    b3b4:	210b      	movs	r1, #11
    b3b6:	0018      	movs	r0, r3
    b3b8:	4b97      	ldr	r3, [pc, #604]	; (b618 <start_motor_service+0x2ac>)
    b3ba:	4798      	blx	r3
	extint_chan_enable_callback(11,EXTINT_CALLBACK_TYPE_DETECT);
    b3bc:	2100      	movs	r1, #0
    b3be:	200b      	movs	r0, #11
    b3c0:	4b96      	ldr	r3, [pc, #600]	; (b61c <start_motor_service+0x2b0>)
    b3c2:	4798      	blx	r3
	
	struct port_config pin_confg;
	port_get_config_defaults(&pin_confg);
    b3c4:	2310      	movs	r3, #16
    b3c6:	18fb      	adds	r3, r7, r3
    b3c8:	0018      	movs	r0, r3
    b3ca:	4b95      	ldr	r3, [pc, #596]	; (b620 <start_motor_service+0x2b4>)
    b3cc:	4798      	blx	r3
	pin_confg.direction = PORT_PIN_DIR_INPUT;
    b3ce:	2310      	movs	r3, #16
    b3d0:	18fb      	adds	r3, r7, r3
    b3d2:	2200      	movs	r2, #0
    b3d4:	701a      	strb	r2, [r3, #0]
	pin_confg.input_pull = PORT_PIN_PULL_UP;
    b3d6:	2310      	movs	r3, #16
    b3d8:	18fb      	adds	r3, r7, r3
    b3da:	2201      	movs	r2, #1
    b3dc:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(PR1_PIN, &pin_confg);
    b3de:	2310      	movs	r3, #16
    b3e0:	18fb      	adds	r3, r7, r3
    b3e2:	0019      	movs	r1, r3
    b3e4:	202a      	movs	r0, #42	; 0x2a
    b3e6:	4b8f      	ldr	r3, [pc, #572]	; (b624 <start_motor_service+0x2b8>)
    b3e8:	4798      	blx	r3
	
	//Transferring the below statement from LCD_SERVICE to here, as it solves the problem of the device hanging.
	// Whenever xSemaphoreTake is executed on xADC_Semaphore in task other than which xADC_Semaphore is defined in, than the MCU hangs.
	vSemaphoreCreateBinary(xADC_Semaphore);
    b3ea:	2203      	movs	r2, #3
    b3ec:	2100      	movs	r1, #0
    b3ee:	2001      	movs	r0, #1
    b3f0:	4b8d      	ldr	r3, [pc, #564]	; (b628 <start_motor_service+0x2bc>)
    b3f2:	4798      	blx	r3
    b3f4:	0002      	movs	r2, r0
    b3f6:	4b8d      	ldr	r3, [pc, #564]	; (b62c <start_motor_service+0x2c0>)
    b3f8:	601a      	str	r2, [r3, #0]
    b3fa:	4b8c      	ldr	r3, [pc, #560]	; (b62c <start_motor_service+0x2c0>)
    b3fc:	681b      	ldr	r3, [r3, #0]
    b3fe:	2b00      	cmp	r3, #0
    b400:	d006      	beq.n	b410 <start_motor_service+0xa4>
    b402:	4b8a      	ldr	r3, [pc, #552]	; (b62c <start_motor_service+0x2c0>)
    b404:	6818      	ldr	r0, [r3, #0]
    b406:	2300      	movs	r3, #0
    b408:	2200      	movs	r2, #0
    b40a:	2100      	movs	r1, #0
    b40c:	4c88      	ldr	r4, [pc, #544]	; (b630 <start_motor_service+0x2c4>)
    b40e:	47a0      	blx	r4
	
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	struct port_config config_pins;
	port_get_config_defaults(&config_pins);
    b410:	230c      	movs	r3, #12
    b412:	18fb      	adds	r3, r7, r3
    b414:	0018      	movs	r0, r3
    b416:	4b82      	ldr	r3, [pc, #520]	; (b620 <start_motor_service+0x2b4>)
    b418:	4798      	blx	r3
	
	config_pins.direction = PORT_PIN_DIR_OUTPUT;
    b41a:	230c      	movs	r3, #12
    b41c:	18fb      	adds	r3, r7, r3
    b41e:	2201      	movs	r2, #1
    b420:	701a      	strb	r2, [r3, #0]
	config_pins.input_pull = PORT_PIN_PULL_NONE;
    b422:	230c      	movs	r3, #12
    b424:	18fb      	adds	r3, r7, r3
    b426:	2200      	movs	r2, #0
    b428:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(START_RELAY_PIN,&config_pins);
    b42a:	230c      	movs	r3, #12
    b42c:	18fb      	adds	r3, r7, r3
    b42e:	0019      	movs	r1, r3
    b430:	202d      	movs	r0, #45	; 0x2d
    b432:	4b7c      	ldr	r3, [pc, #496]	; (b624 <start_motor_service+0x2b8>)
    b434:	4798      	blx	r3
	port_pin_set_config(STOP_RELAY_PIN,&config_pins);
    b436:	230c      	movs	r3, #12
    b438:	18fb      	adds	r3, r7, r3
    b43a:	0019      	movs	r1, r3
    b43c:	202c      	movs	r0, #44	; 0x2c
    b43e:	4b79      	ldr	r3, [pc, #484]	; (b624 <start_motor_service+0x2b8>)
    b440:	4798      	blx	r3
	port_pin_set_config(AUTO_ON_LED_PIN,&config_pins);
    b442:	230c      	movs	r3, #12
    b444:	18fb      	adds	r3, r7, r3
    b446:	0019      	movs	r1, r3
    b448:	2028      	movs	r0, #40	; 0x28
    b44a:	4b76      	ldr	r3, [pc, #472]	; (b624 <start_motor_service+0x2b8>)
    b44c:	4798      	blx	r3
	port_pin_set_config(THREEPHASE_OK_LED_PIN,&config_pins);
    b44e:	230c      	movs	r3, #12
    b450:	18fb      	adds	r3, r7, r3
    b452:	0019      	movs	r1, r3
    b454:	2027      	movs	r0, #39	; 0x27
    b456:	4b73      	ldr	r3, [pc, #460]	; (b624 <start_motor_service+0x2b8>)
    b458:	4798      	blx	r3
	port_pin_set_config(MOTOR_ON_LED_PIN,&config_pins);
    b45a:	230c      	movs	r3, #12
    b45c:	18fb      	adds	r3, r7, r3
    b45e:	0019      	movs	r1, r3
    b460:	2005      	movs	r0, #5
    b462:	4b70      	ldr	r3, [pc, #448]	; (b624 <start_motor_service+0x2b8>)
    b464:	4798      	blx	r3
	
	AUTO_ON_LED_OFF;
    b466:	2101      	movs	r1, #1
    b468:	2028      	movs	r0, #40	; 0x28
    b46a:	4b72      	ldr	r3, [pc, #456]	; (b634 <start_motor_service+0x2c8>)
    b46c:	4798      	blx	r3
	MOTOR_ON_LED_OFF;
    b46e:	2101      	movs	r1, #1
    b470:	2005      	movs	r0, #5
    b472:	4b70      	ldr	r3, [pc, #448]	; (b634 <start_motor_service+0x2c8>)
    b474:	4798      	blx	r3
	THREEPHASE_OK_LED_OFF;
    b476:	2101      	movs	r1, #1
    b478:	2027      	movs	r0, #39	; 0x27
    b47a:	4b6e      	ldr	r3, [pc, #440]	; (b634 <start_motor_service+0x2c8>)
    b47c:	4798      	blx	r3
	//port_pin_set_config(PIN_MOTOR_FEEDBACK,&config_pins);
	
	
	
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    b47e:	003b      	movs	r3, r7
    b480:	0018      	movs	r0, r3
    b482:	4b62      	ldr	r3, [pc, #392]	; (b60c <start_motor_service+0x2a0>)
    b484:	4798      	blx	r3
	
	config_extint_chan.gpio_pin = MOTOR_FEEDBACK_EIC_PIN;
    b486:	003b      	movs	r3, r7
    b488:	222e      	movs	r2, #46	; 0x2e
    b48a:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = MOTOR_FEEDBACK_EIC_MUX;
    b48c:	003b      	movs	r3, r7
    b48e:	2200      	movs	r2, #0
    b490:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    b492:	003b      	movs	r3, r7
    b494:	2201      	movs	r2, #1
    b496:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    b498:	003b      	movs	r3, r7
    b49a:	2203      	movs	r2, #3
    b49c:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(MOTOR_FEEDBACK_EIC_LINE, &config_extint_chan);
    b49e:	003b      	movs	r3, r7
    b4a0:	0019      	movs	r1, r3
    b4a2:	200e      	movs	r0, #14
    b4a4:	4b5a      	ldr	r3, [pc, #360]	; (b610 <start_motor_service+0x2a4>)
    b4a6:	4798      	blx	r3
	
	extint_chan_enable_callback(MOTOR_FEEDBACK_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    b4a8:	2100      	movs	r1, #0
    b4aa:	200e      	movs	r0, #14
    b4ac:	4b5b      	ldr	r3, [pc, #364]	; (b61c <start_motor_service+0x2b0>)
    b4ae:	4798      	blx	r3
	extint_register_callback(motor_feedback_callback,MOTOR_FEEDBACK_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    b4b0:	4b61      	ldr	r3, [pc, #388]	; (b638 <start_motor_service+0x2cc>)
    b4b2:	2200      	movs	r2, #0
    b4b4:	210e      	movs	r1, #14
    b4b6:	0018      	movs	r0, r3
    b4b8:	4b57      	ldr	r3, [pc, #348]	; (b618 <start_motor_service+0x2ac>)
    b4ba:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	
	config_extint_chan.gpio_pin = START_BUTTON_EIC_PIN;
    b4bc:	003b      	movs	r3, r7
    b4be:	2226      	movs	r2, #38	; 0x26
    b4c0:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = START_BUTTON_EIC_MUX;
    b4c2:	003b      	movs	r3, r7
    b4c4:	2200      	movs	r2, #0
    b4c6:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    b4c8:	003b      	movs	r3, r7
    b4ca:	2201      	movs	r2, #1
    b4cc:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    b4ce:	003b      	movs	r3, r7
    b4d0:	2202      	movs	r2, #2
    b4d2:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(START_BUTTON_EIC_LINE, &config_extint_chan);
    b4d4:	003b      	movs	r3, r7
    b4d6:	0019      	movs	r1, r3
    b4d8:	2006      	movs	r0, #6
    b4da:	4b4d      	ldr	r3, [pc, #308]	; (b610 <start_motor_service+0x2a4>)
    b4dc:	4798      	blx	r3
	
	extint_chan_enable_callback(START_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    b4de:	2100      	movs	r1, #0
    b4e0:	2006      	movs	r0, #6
    b4e2:	4b4e      	ldr	r3, [pc, #312]	; (b61c <start_motor_service+0x2b0>)
    b4e4:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,START_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    b4e6:	4b55      	ldr	r3, [pc, #340]	; (b63c <start_motor_service+0x2d0>)
    b4e8:	2200      	movs	r2, #0
    b4ea:	2106      	movs	r1, #6
    b4ec:	0018      	movs	r0, r3
    b4ee:	4b4a      	ldr	r3, [pc, #296]	; (b618 <start_motor_service+0x2ac>)
    b4f0:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_extint_chan.gpio_pin = STOP_BUTTON_EIC_PIN;
    b4f2:	003b      	movs	r3, r7
    b4f4:	2225      	movs	r2, #37	; 0x25
    b4f6:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = STOP_BUTTON_EIC_MUX;
    b4f8:	003b      	movs	r3, r7
    b4fa:	2200      	movs	r2, #0
    b4fc:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    b4fe:	003b      	movs	r3, r7
    b500:	2201      	movs	r2, #1
    b502:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    b504:	003b      	movs	r3, r7
    b506:	2202      	movs	r2, #2
    b508:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(STOP_BUTTON_EIC_LINE, &config_extint_chan);
    b50a:	003b      	movs	r3, r7
    b50c:	0019      	movs	r1, r3
    b50e:	2005      	movs	r0, #5
    b510:	4b3f      	ldr	r3, [pc, #252]	; (b610 <start_motor_service+0x2a4>)
    b512:	4798      	blx	r3
	extint_chan_enable_callback(STOP_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    b514:	2100      	movs	r1, #0
    b516:	2005      	movs	r0, #5
    b518:	4b40      	ldr	r3, [pc, #256]	; (b61c <start_motor_service+0x2b0>)
    b51a:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,STOP_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    b51c:	4b47      	ldr	r3, [pc, #284]	; (b63c <start_motor_service+0x2d0>)
    b51e:	2200      	movs	r2, #0
    b520:	2105      	movs	r1, #5
    b522:	0018      	movs	r0, r3
    b524:	4b3c      	ldr	r3, [pc, #240]	; (b618 <start_motor_service+0x2ac>)
    b526:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_extint_chan.gpio_pin = AUTO_BUTTON_EIC_PIN;
    b528:	003b      	movs	r3, r7
    b52a:	221c      	movs	r2, #28
    b52c:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = AUTO_BUTTON_EIC_MUX;
    b52e:	003b      	movs	r3, r7
    b530:	2200      	movs	r2, #0
    b532:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    b534:	003b      	movs	r3, r7
    b536:	2201      	movs	r2, #1
    b538:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    b53a:	003b      	movs	r3, r7
    b53c:	2202      	movs	r2, #2
    b53e:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(AUTO_BUTTON_EIC_LINE, &config_extint_chan);
    b540:	003b      	movs	r3, r7
    b542:	0019      	movs	r1, r3
    b544:	2008      	movs	r0, #8
    b546:	4b32      	ldr	r3, [pc, #200]	; (b610 <start_motor_service+0x2a4>)
    b548:	4798      	blx	r3
	extint_chan_enable_callback(AUTO_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    b54a:	2100      	movs	r1, #0
    b54c:	2008      	movs	r0, #8
    b54e:	4b33      	ldr	r3, [pc, #204]	; (b61c <start_motor_service+0x2b0>)
    b550:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,AUTO_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    b552:	4b3a      	ldr	r3, [pc, #232]	; (b63c <start_motor_service+0x2d0>)
    b554:	2200      	movs	r2, #0
    b556:	2108      	movs	r1, #8
    b558:	0018      	movs	r0, r3
    b55a:	4b2f      	ldr	r3, [pc, #188]	; (b618 <start_motor_service+0x2ac>)
    b55c:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_extint_chan.gpio_pin = LCD_SHOW_BUTTON_EIC_PIN;
    b55e:	003b      	movs	r3, r7
    b560:	2229      	movs	r2, #41	; 0x29
    b562:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = LCD_SHOW_BUTTON_EIC_MUX;
    b564:	003b      	movs	r3, r7
    b566:	2200      	movs	r2, #0
    b568:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    b56a:	003b      	movs	r3, r7
    b56c:	2201      	movs	r2, #1
    b56e:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    b570:	003b      	movs	r3, r7
    b572:	2202      	movs	r2, #2
    b574:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(LCD_SHOW_BUTTON_EIC_LINE, &config_extint_chan);
    b576:	003b      	movs	r3, r7
    b578:	0019      	movs	r1, r3
    b57a:	2009      	movs	r0, #9
    b57c:	4b24      	ldr	r3, [pc, #144]	; (b610 <start_motor_service+0x2a4>)
    b57e:	4798      	blx	r3
	extint_chan_enable_callback(LCD_SHOW_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    b580:	2100      	movs	r1, #0
    b582:	2009      	movs	r0, #9
    b584:	4b25      	ldr	r3, [pc, #148]	; (b61c <start_motor_service+0x2b0>)
    b586:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,LCD_SHOW_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    b588:	4b2c      	ldr	r3, [pc, #176]	; (b63c <start_motor_service+0x2d0>)
    b58a:	2200      	movs	r2, #0
    b58c:	2109      	movs	r1, #9
    b58e:	0018      	movs	r0, r3
    b590:	4b21      	ldr	r3, [pc, #132]	; (b618 <start_motor_service+0x2ac>)
    b592:	4798      	blx	r3
	////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	
	xTaskCreate(vTask_10ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,NULL);
    b594:	482a      	ldr	r0, [pc, #168]	; (b640 <start_motor_service+0x2d4>)
    b596:	2300      	movs	r3, #0
    b598:	9301      	str	r3, [sp, #4]
    b59a:	2301      	movs	r3, #1
    b59c:	9300      	str	r3, [sp, #0]
    b59e:	2300      	movs	r3, #0
    b5a0:	2282      	movs	r2, #130	; 0x82
    b5a2:	2100      	movs	r1, #0
    b5a4:	4c27      	ldr	r4, [pc, #156]	; (b644 <start_motor_service+0x2d8>)
    b5a6:	47a0      	blx	r4
	xTaskCreate(vTask_100ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,NULL);
    b5a8:	4827      	ldr	r0, [pc, #156]	; (b648 <start_motor_service+0x2dc>)
    b5aa:	2300      	movs	r3, #0
    b5ac:	9301      	str	r3, [sp, #4]
    b5ae:	2301      	movs	r3, #1
    b5b0:	9300      	str	r3, [sp, #0]
    b5b2:	2300      	movs	r3, #0
    b5b4:	2282      	movs	r2, #130	; 0x82
    b5b6:	2100      	movs	r1, #0
    b5b8:	4c22      	ldr	r4, [pc, #136]	; (b644 <start_motor_service+0x2d8>)
    b5ba:	47a0      	blx	r4
	xTaskCreate(vTask_50ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,&fiftymsTask);
    b5bc:	4823      	ldr	r0, [pc, #140]	; (b64c <start_motor_service+0x2e0>)
    b5be:	4b24      	ldr	r3, [pc, #144]	; (b650 <start_motor_service+0x2e4>)
    b5c0:	9301      	str	r3, [sp, #4]
    b5c2:	2301      	movs	r3, #1
    b5c4:	9300      	str	r3, [sp, #0]
    b5c6:	2300      	movs	r3, #0
    b5c8:	2282      	movs	r2, #130	; 0x82
    b5ca:	2100      	movs	r1, #0
    b5cc:	4c1d      	ldr	r4, [pc, #116]	; (b644 <start_motor_service+0x2d8>)
    b5ce:	47a0      	blx	r4
	
	if(factory_settings_parameter_struct.ENABLE_WATER)
    b5d0:	4b20      	ldr	r3, [pc, #128]	; (b654 <start_motor_service+0x2e8>)
    b5d2:	795b      	ldrb	r3, [r3, #5]
    b5d4:	2b00      	cmp	r3, #0
    b5d6:	d00a      	beq.n	b5ee <start_motor_service+0x282>
	{
		xTaskCreate(Water_Level_Task,NULL,(uint16_t)700,NULL,1,NULL);
    b5d8:	23af      	movs	r3, #175	; 0xaf
    b5da:	009a      	lsls	r2, r3, #2
    b5dc:	481e      	ldr	r0, [pc, #120]	; (b658 <start_motor_service+0x2ec>)
    b5de:	2300      	movs	r3, #0
    b5e0:	9301      	str	r3, [sp, #4]
    b5e2:	2301      	movs	r3, #1
    b5e4:	9300      	str	r3, [sp, #0]
    b5e6:	2300      	movs	r3, #0
    b5e8:	2100      	movs	r1, #0
    b5ea:	4c16      	ldr	r4, [pc, #88]	; (b644 <start_motor_service+0x2d8>)
    b5ec:	47a0      	blx	r4
	}
	

	xTaskCreate(vTask_MOTORCONTROL,NULL,(uint16_t)720,NULL,1, &motorTask);
    b5ee:	23b4      	movs	r3, #180	; 0xb4
    b5f0:	009a      	lsls	r2, r3, #2
    b5f2:	481a      	ldr	r0, [pc, #104]	; (b65c <start_motor_service+0x2f0>)
    b5f4:	4b1a      	ldr	r3, [pc, #104]	; (b660 <start_motor_service+0x2f4>)
    b5f6:	9301      	str	r3, [sp, #4]
    b5f8:	2301      	movs	r3, #1
    b5fa:	9300      	str	r3, [sp, #0]
    b5fc:	2300      	movs	r3, #0
    b5fe:	2100      	movs	r1, #0
    b600:	4c10      	ldr	r4, [pc, #64]	; (b644 <start_motor_service+0x2d8>)
    b602:	47a0      	blx	r4

}
    b604:	46c0      	nop			; (mov r8, r8)
    b606:	46bd      	mov	sp, r7
    b608:	b009      	add	sp, #36	; 0x24
    b60a:	bd90      	pop	{r4, r7, pc}
    b60c:	0000ceb5 	.word	0x0000ceb5
    b610:	0000cee9 	.word	0x0000cee9
    b614:	00009691 	.word	0x00009691
    b618:	000111f5 	.word	0x000111f5
    b61c:	00011259 	.word	0x00011259
    b620:	00008745 	.word	0x00008745
    b624:	00011d69 	.word	0x00011d69
    b628:	0000e035 	.word	0x0000e035
    b62c:	20000230 	.word	0x20000230
    b630:	0000e0f1 	.word	0x0000e0f1
    b634:	000087ad 	.word	0x000087ad
    b638:	0000b94d 	.word	0x0000b94d
    b63c:	0000af7d 	.word	0x0000af7d
    b640:	000098a9 	.word	0x000098a9
    b644:	0000eb59 	.word	0x0000eb59
    b648:	00009915 	.word	0x00009915
    b64c:	0000bc41 	.word	0x0000bc41
    b650:	20000740 	.word	0x20000740
    b654:	20000618 	.word	0x20000618
    b658:	00008c35 	.word	0x00008c35
    b65c:	0000af91 	.word	0x0000af91
    b660:	20000794 	.word	0x20000794

0000b664 <motor_checkSleepElligible>:

bool motor_checkSleepElligible(void)
{
    b664:	b580      	push	{r7, lr}
    b666:	b082      	sub	sp, #8
    b668:	af00      	add	r7, sp, #0
	uint8_t j = 0;
    b66a:	1dfb      	adds	r3, r7, #7
    b66c:	2200      	movs	r2, #0
    b66e:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_WATER)
    b670:	4b44      	ldr	r3, [pc, #272]	; (b784 <motor_checkSleepElligible+0x120>)
    b672:	795b      	ldrb	r3, [r3, #5]
    b674:	2b00      	cmp	r3, #0
    b676:	d00b      	beq.n	b690 <motor_checkSleepElligible+0x2c>
	{
		if (factory_settings_parameter_struct.ENABLE_GP)
    b678:	4b42      	ldr	r3, [pc, #264]	; (b784 <motor_checkSleepElligible+0x120>)
    b67a:	791b      	ldrb	r3, [r3, #4]
    b67c:	2b00      	cmp	r3, #0
    b67e:	d003      	beq.n	b688 <motor_checkSleepElligible+0x24>
		{
			j = 19;
    b680:	1dfb      	adds	r3, r7, #7
    b682:	2213      	movs	r2, #19
    b684:	701a      	strb	r2, [r3, #0]
    b686:	e00e      	b.n	b6a6 <motor_checkSleepElligible+0x42>
		}
		else
		{
			j = 17;
    b688:	1dfb      	adds	r3, r7, #7
    b68a:	2211      	movs	r2, #17
    b68c:	701a      	strb	r2, [r3, #0]
    b68e:	e00a      	b.n	b6a6 <motor_checkSleepElligible+0x42>
		}
	}
	else
	{
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
    b690:	4b3c      	ldr	r3, [pc, #240]	; (b784 <motor_checkSleepElligible+0x120>)
    b692:	785b      	ldrb	r3, [r3, #1]
    b694:	2b00      	cmp	r3, #0
    b696:	d003      	beq.n	b6a0 <motor_checkSleepElligible+0x3c>
		{
			j = 14;
    b698:	1dfb      	adds	r3, r7, #7
    b69a:	220e      	movs	r2, #14
    b69c:	701a      	strb	r2, [r3, #0]
    b69e:	e002      	b.n	b6a6 <motor_checkSleepElligible+0x42>
		}
		else
		{
			j = 12;
    b6a0:	1dfb      	adds	r3, r7, #7
    b6a2:	220c      	movs	r2, #12
    b6a4:	701a      	strb	r2, [r3, #0]
		}
	}
	
	bool event=true;
    b6a6:	1dbb      	adds	r3, r7, #6
    b6a8:	2201      	movs	r2, #1
    b6aa:	701a      	strb	r2, [r3, #0]
	while(j--)
    b6ac:	e00c      	b.n	b6c8 <motor_checkSleepElligible+0x64>
	{
		if(!simEventTemp[j])
    b6ae:	1dfb      	adds	r3, r7, #7
    b6b0:	781b      	ldrb	r3, [r3, #0]
    b6b2:	4a35      	ldr	r2, [pc, #212]	; (b788 <motor_checkSleepElligible+0x124>)
    b6b4:	5cd3      	ldrb	r3, [r2, r3]
    b6b6:	2201      	movs	r2, #1
    b6b8:	4053      	eors	r3, r2
    b6ba:	b2db      	uxtb	r3, r3
    b6bc:	2b00      	cmp	r3, #0
    b6be:	d003      	beq.n	b6c8 <motor_checkSleepElligible+0x64>
		{
			event=false;
    b6c0:	1dbb      	adds	r3, r7, #6
    b6c2:	2200      	movs	r2, #0
    b6c4:	701a      	strb	r2, [r3, #0]
			break;
    b6c6:	e006      	b.n	b6d6 <motor_checkSleepElligible+0x72>
	while(j--)
    b6c8:	1dfb      	adds	r3, r7, #7
    b6ca:	781b      	ldrb	r3, [r3, #0]
    b6cc:	1dfa      	adds	r2, r7, #7
    b6ce:	1e59      	subs	r1, r3, #1
    b6d0:	7011      	strb	r1, [r2, #0]
    b6d2:	2b00      	cmp	r3, #0
    b6d4:	d1eb      	bne.n	b6ae <motor_checkSleepElligible+0x4a>
		}
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
    b6d6:	4b2b      	ldr	r3, [pc, #172]	; (b784 <motor_checkSleepElligible+0x120>)
    b6d8:	78db      	ldrb	r3, [r3, #3]
    b6da:	2b00      	cmp	r3, #0
    b6dc:	d00e      	beq.n	b6fc <motor_checkSleepElligible+0x98>
	{
		if(event && m2mEvent_arr[0] == ME_WAITREGISTER || m2mEvent_arr[1]==ME_WAITREGISTER)
    b6de:	1dbb      	adds	r3, r7, #6
    b6e0:	781b      	ldrb	r3, [r3, #0]
    b6e2:	2b00      	cmp	r3, #0
    b6e4:	d003      	beq.n	b6ee <motor_checkSleepElligible+0x8a>
    b6e6:	4b29      	ldr	r3, [pc, #164]	; (b78c <motor_checkSleepElligible+0x128>)
    b6e8:	781b      	ldrb	r3, [r3, #0]
    b6ea:	2b01      	cmp	r3, #1
    b6ec:	d003      	beq.n	b6f6 <motor_checkSleepElligible+0x92>
    b6ee:	4b27      	ldr	r3, [pc, #156]	; (b78c <motor_checkSleepElligible+0x128>)
    b6f0:	785b      	ldrb	r3, [r3, #1]
    b6f2:	2b01      	cmp	r3, #1
    b6f4:	d102      	bne.n	b6fc <motor_checkSleepElligible+0x98>
		{
			event = false;
    b6f6:	1dbb      	adds	r3, r7, #6
    b6f8:	2200      	movs	r2, #0
    b6fa:	701a      	strb	r2, [r3, #0]
		}
	}
	
	return (!getACPowerState() && !eventOccured && event && !waitStableLineOn && !singlePhasingTimerOn
    b6fc:	4b24      	ldr	r3, [pc, #144]	; (b790 <motor_checkSleepElligible+0x12c>)
    b6fe:	4798      	blx	r3
    b700:	0003      	movs	r3, r0
    b702:	001a      	movs	r2, r3
    b704:	2301      	movs	r3, #1
    b706:	4053      	eors	r3, r2
    b708:	b2db      	uxtb	r3, r3
	&& !startTimerOn && !startSequenceOn && !stopSequenceOn);
    b70a:	2b00      	cmp	r3, #0
    b70c:	d030      	beq.n	b770 <motor_checkSleepElligible+0x10c>
	return (!getACPowerState() && !eventOccured && event && !waitStableLineOn && !singlePhasingTimerOn
    b70e:	4b21      	ldr	r3, [pc, #132]	; (b794 <motor_checkSleepElligible+0x130>)
    b710:	781b      	ldrb	r3, [r3, #0]
    b712:	b2db      	uxtb	r3, r3
    b714:	2201      	movs	r2, #1
    b716:	4053      	eors	r3, r2
    b718:	b2db      	uxtb	r3, r3
    b71a:	2b00      	cmp	r3, #0
    b71c:	d028      	beq.n	b770 <motor_checkSleepElligible+0x10c>
    b71e:	1dbb      	adds	r3, r7, #6
    b720:	781b      	ldrb	r3, [r3, #0]
    b722:	2b00      	cmp	r3, #0
    b724:	d024      	beq.n	b770 <motor_checkSleepElligible+0x10c>
    b726:	4b1c      	ldr	r3, [pc, #112]	; (b798 <motor_checkSleepElligible+0x134>)
    b728:	781b      	ldrb	r3, [r3, #0]
    b72a:	2201      	movs	r2, #1
    b72c:	4053      	eors	r3, r2
    b72e:	b2db      	uxtb	r3, r3
    b730:	2b00      	cmp	r3, #0
    b732:	d01d      	beq.n	b770 <motor_checkSleepElligible+0x10c>
    b734:	4b19      	ldr	r3, [pc, #100]	; (b79c <motor_checkSleepElligible+0x138>)
    b736:	781b      	ldrb	r3, [r3, #0]
    b738:	2201      	movs	r2, #1
    b73a:	4053      	eors	r3, r2
    b73c:	b2db      	uxtb	r3, r3
    b73e:	2b00      	cmp	r3, #0
    b740:	d016      	beq.n	b770 <motor_checkSleepElligible+0x10c>
	&& !startTimerOn && !startSequenceOn && !stopSequenceOn);
    b742:	4b17      	ldr	r3, [pc, #92]	; (b7a0 <motor_checkSleepElligible+0x13c>)
    b744:	781b      	ldrb	r3, [r3, #0]
    b746:	2201      	movs	r2, #1
    b748:	4053      	eors	r3, r2
    b74a:	b2db      	uxtb	r3, r3
    b74c:	2b00      	cmp	r3, #0
    b74e:	d00f      	beq.n	b770 <motor_checkSleepElligible+0x10c>
    b750:	4b14      	ldr	r3, [pc, #80]	; (b7a4 <motor_checkSleepElligible+0x140>)
    b752:	781b      	ldrb	r3, [r3, #0]
    b754:	2201      	movs	r2, #1
    b756:	4053      	eors	r3, r2
    b758:	b2db      	uxtb	r3, r3
    b75a:	2b00      	cmp	r3, #0
    b75c:	d008      	beq.n	b770 <motor_checkSleepElligible+0x10c>
    b75e:	4b12      	ldr	r3, [pc, #72]	; (b7a8 <motor_checkSleepElligible+0x144>)
    b760:	781b      	ldrb	r3, [r3, #0]
    b762:	2201      	movs	r2, #1
    b764:	4053      	eors	r3, r2
    b766:	b2db      	uxtb	r3, r3
    b768:	2b00      	cmp	r3, #0
    b76a:	d001      	beq.n	b770 <motor_checkSleepElligible+0x10c>
    b76c:	2301      	movs	r3, #1
    b76e:	e000      	b.n	b772 <motor_checkSleepElligible+0x10e>
    b770:	2300      	movs	r3, #0
    b772:	1c1a      	adds	r2, r3, #0
    b774:	2301      	movs	r3, #1
    b776:	4013      	ands	r3, r2
    b778:	b2db      	uxtb	r3, r3
	
}
    b77a:	0018      	movs	r0, r3
    b77c:	46bd      	mov	sp, r7
    b77e:	b002      	add	sp, #8
    b780:	bd80      	pop	{r7, pc}
    b782:	46c0      	nop			; (mov r8, r8)
    b784:	20000618 	.word	0x20000618
    b788:	200006f0 	.word	0x200006f0
    b78c:	20000778 	.word	0x20000778
    b790:	00009d81 	.word	0x00009d81
    b794:	20000707 	.word	0x20000707
    b798:	200007b5 	.word	0x200007b5
    b79c:	20000759 	.word	0x20000759
    b7a0:	20000762 	.word	0x20000762
    b7a4:	20000761 	.word	0x20000761
    b7a8:	20000751 	.word	0x20000751

0000b7ac <configure_ac>:


void configure_ac(void)
{
    b7ac:	b580      	push	{r7, lr}
    b7ae:	b08a      	sub	sp, #40	; 0x28
    b7b0:	af00      	add	r7, sp, #0
	struct ac_config conf_ac;
	struct ac_events conf_ac_events = {{0}};
    b7b2:	231c      	movs	r3, #28
    b7b4:	18fb      	adds	r3, r7, r3
    b7b6:	0018      	movs	r0, r3
    b7b8:	2305      	movs	r3, #5
    b7ba:	001a      	movs	r2, r3
    b7bc:	2100      	movs	r1, #0
    b7be:	4b2c      	ldr	r3, [pc, #176]	; (b870 <configure_ac+0xc4>)
    b7c0:	4798      	blx	r3
	
	struct ac_chan_config conf_ac_channel;
	struct port_config pin_conf;
	
	ac_get_config_defaults(&conf_ac);
    b7c2:	2324      	movs	r3, #36	; 0x24
    b7c4:	18fb      	adds	r3, r7, r3
    b7c6:	0018      	movs	r0, r3
    b7c8:	4b2a      	ldr	r3, [pc, #168]	; (b874 <configure_ac+0xc8>)
    b7ca:	4798      	blx	r3
	conf_ac.run_in_standby[0] = true;
    b7cc:	2324      	movs	r3, #36	; 0x24
    b7ce:	18fb      	adds	r3, r7, r3
    b7d0:	2201      	movs	r2, #1
    b7d2:	701a      	strb	r2, [r3, #0]
	conf_ac.dig_source_generator = GCLK_GENERATOR_6;
    b7d4:	2324      	movs	r3, #36	; 0x24
    b7d6:	18fb      	adds	r3, r7, r3
    b7d8:	2206      	movs	r2, #6
    b7da:	705a      	strb	r2, [r3, #1]
	ac_init(&ac_instance, AC, &conf_ac);
    b7dc:	2324      	movs	r3, #36	; 0x24
    b7de:	18fa      	adds	r2, r7, r3
    b7e0:	4925      	ldr	r1, [pc, #148]	; (b878 <configure_ac+0xcc>)
    b7e2:	4b26      	ldr	r3, [pc, #152]	; (b87c <configure_ac+0xd0>)
    b7e4:	0018      	movs	r0, r3
    b7e6:	4b26      	ldr	r3, [pc, #152]	; (b880 <configure_ac+0xd4>)
    b7e8:	4798      	blx	r3
	
	conf_ac_channel.sample_mode = AC_CHAN_MODE_CONTINUOUS;
    b7ea:	1d3b      	adds	r3, r7, #4
    b7ec:	2200      	movs	r2, #0
    b7ee:	701a      	strb	r2, [r3, #0]
	conf_ac_channel.filter = AC_CHAN_FILTER_NONE;
    b7f0:	1d3b      	adds	r3, r7, #4
    b7f2:	2200      	movs	r2, #0
    b7f4:	605a      	str	r2, [r3, #4]
	conf_ac_channel.enable_hysteresis = false;
    b7f6:	1d3b      	adds	r3, r7, #4
    b7f8:	2200      	movs	r2, #0
    b7fa:	721a      	strb	r2, [r3, #8]
	conf_ac_channel.output_mode = AC_CHAN_OUTPUT_INTERNAL;
    b7fc:	1d3b      	adds	r3, r7, #4
    b7fe:	2200      	movs	r2, #0
    b800:	60da      	str	r2, [r3, #12]
	conf_ac_channel.positive_input = AC_CHAN_POS_MUX_PIN0;
    b802:	1d3b      	adds	r3, r7, #4
    b804:	2200      	movs	r2, #0
    b806:	821a      	strh	r2, [r3, #16]
	conf_ac_channel.negative_input = AC_CHAN_NEG_MUX_SCALED_VCC;
    b808:	1d3b      	adds	r3, r7, #4
    b80a:	22a0      	movs	r2, #160	; 0xa0
    b80c:	00d2      	lsls	r2, r2, #3
    b80e:	825a      	strh	r2, [r3, #18]
	/* Detect threshold 0.515625V */
	conf_ac_channel.vcc_scale_factor = 45;
    b810:	1d3b      	adds	r3, r7, #4
    b812:	222d      	movs	r2, #45	; 0x2d
    b814:	751a      	strb	r2, [r3, #20]
	conf_ac_channel.interrupt_selection = AC_CHAN_INTERRUPT_SELECTION_TOGGLE;
    b816:	1d3b      	adds	r3, r7, #4
    b818:	2200      	movs	r2, #0
    b81a:	755a      	strb	r2, [r3, #21]
	ac_chan_set_config(&ac_instance, AC_CHAN_CHANNEL_0, &conf_ac_channel);
    b81c:	1d3a      	adds	r2, r7, #4
    b81e:	4b17      	ldr	r3, [pc, #92]	; (b87c <configure_ac+0xd0>)
    b820:	2100      	movs	r1, #0
    b822:	0018      	movs	r0, r3
    b824:	4b17      	ldr	r3, [pc, #92]	; (b884 <configure_ac+0xd8>)
    b826:	4798      	blx	r3
	ac_chan_enable(&ac_instance, AC_CHAN_CHANNEL_0);
    b828:	4b14      	ldr	r3, [pc, #80]	; (b87c <configure_ac+0xd0>)
    b82a:	2100      	movs	r1, #0
    b82c:	0018      	movs	r0, r3
    b82e:	4b16      	ldr	r3, [pc, #88]	; (b888 <configure_ac+0xdc>)
    b830:	4798      	blx	r3
	
	conf_ac_events.on_event_sample[0] = true;
    b832:	231c      	movs	r3, #28
    b834:	18fb      	adds	r3, r7, r3
    b836:	2201      	movs	r2, #1
    b838:	70da      	strb	r2, [r3, #3]
	ac_enable_events(&ac_instance ,&conf_ac_events);
    b83a:	231c      	movs	r3, #28
    b83c:	18fa      	adds	r2, r7, r3
    b83e:	4b0f      	ldr	r3, [pc, #60]	; (b87c <configure_ac+0xd0>)
    b840:	0011      	movs	r1, r2
    b842:	0018      	movs	r0, r3
    b844:	4b11      	ldr	r3, [pc, #68]	; (b88c <configure_ac+0xe0>)
    b846:	4798      	blx	r3
	
	ac_enable(&ac_instance);
    b848:	4b0c      	ldr	r3, [pc, #48]	; (b87c <configure_ac+0xd0>)
    b84a:	0018      	movs	r0, r3
    b84c:	4b10      	ldr	r3, [pc, #64]	; (b890 <configure_ac+0xe4>)
    b84e:	4798      	blx	r3
	
	ac_register_callback(&ac_instance, ac_detect_callback,AC_CALLBACK_COMPARATOR_0);
    b850:	4910      	ldr	r1, [pc, #64]	; (b894 <configure_ac+0xe8>)
    b852:	4b0a      	ldr	r3, [pc, #40]	; (b87c <configure_ac+0xd0>)
    b854:	2200      	movs	r2, #0
    b856:	0018      	movs	r0, r3
    b858:	4b0f      	ldr	r3, [pc, #60]	; (b898 <configure_ac+0xec>)
    b85a:	4798      	blx	r3
	ac_enable_callback(&ac_instance, AC_CALLBACK_COMPARATOR_0);
    b85c:	4b07      	ldr	r3, [pc, #28]	; (b87c <configure_ac+0xd0>)
    b85e:	2100      	movs	r1, #0
    b860:	0018      	movs	r0, r3
    b862:	4b0e      	ldr	r3, [pc, #56]	; (b89c <configure_ac+0xf0>)
    b864:	4798      	blx	r3
}
    b866:	46c0      	nop			; (mov r8, r8)
    b868:	46bd      	mov	sp, r7
    b86a:	b00a      	add	sp, #40	; 0x28
    b86c:	bd80      	pop	{r7, pc}
    b86e:	46c0      	nop			; (mov r8, r8)
    b870:	00017b57 	.word	0x00017b57
    b874:	00008149 	.word	0x00008149
    b878:	42004400 	.word	0x42004400
    b87c:	20000824 	.word	0x20000824
    b880:	0000bda9 	.word	0x0000bda9
    b884:	0000be89 	.word	0x0000be89
    b888:	00008299 	.word	0x00008299
    b88c:	000081b9 	.word	0x000081b9
    b890:	00008181 	.word	0x00008181
    b894:	0000b931 	.word	0x0000b931
    b898:	00011621 	.word	0x00011621
    b89c:	00008401 	.word	0x00008401

0000b8a0 <configure_rtc>:

void configure_rtc(void)
{
    b8a0:	b580      	push	{r7, lr}
    b8a2:	b088      	sub	sp, #32
    b8a4:	af00      	add	r7, sp, #0
	struct rtc_count_config conf_rtc_count;
	struct rtc_count_events conf_rtc_events = {0};
    b8a6:	1d3b      	adds	r3, r7, #4
    b8a8:	0018      	movs	r0, r3
    b8aa:	230b      	movs	r3, #11
    b8ac:	001a      	movs	r2, r3
    b8ae:	2100      	movs	r1, #0
    b8b0:	4b17      	ldr	r3, [pc, #92]	; (b910 <configure_rtc+0x70>)
    b8b2:	4798      	blx	r3
	
	rtc_count_get_config_defaults(&conf_rtc_count);
    b8b4:	2310      	movs	r3, #16
    b8b6:	18fb      	adds	r3, r7, r3
    b8b8:	0018      	movs	r0, r3
    b8ba:	4b16      	ldr	r3, [pc, #88]	; (b914 <configure_rtc+0x74>)
    b8bc:	4798      	blx	r3
	conf_rtc_count.prescaler  = RTC_COUNT_PRESCALER_DIV_1;
    b8be:	2310      	movs	r3, #16
    b8c0:	18fb      	adds	r3, r7, r3
    b8c2:	2200      	movs	r2, #0
    b8c4:	801a      	strh	r2, [r3, #0]
	conf_rtc_count.mode       = RTC_COUNT_MODE_16BIT;
    b8c6:	2310      	movs	r3, #16
    b8c8:	18fb      	adds	r3, r7, r3
    b8ca:	2200      	movs	r2, #0
    b8cc:	709a      	strb	r2, [r3, #2]
	conf_rtc_count.continuously_update =  true;
    b8ce:	2310      	movs	r3, #16
    b8d0:	18fb      	adds	r3, r7, r3
    b8d2:	2201      	movs	r2, #1
    b8d4:	711a      	strb	r2, [r3, #4]
	rtc_count_init(&rtc_instance, RTC, &conf_rtc_count);
    b8d6:	2310      	movs	r3, #16
    b8d8:	18fa      	adds	r2, r7, r3
    b8da:	490f      	ldr	r1, [pc, #60]	; (b918 <configure_rtc+0x78>)
    b8dc:	4b0f      	ldr	r3, [pc, #60]	; (b91c <configure_rtc+0x7c>)
    b8de:	0018      	movs	r0, r3
    b8e0:	4b0f      	ldr	r3, [pc, #60]	; (b920 <configure_rtc+0x80>)
    b8e2:	4798      	blx	r3
	rtc_count_set_period(&rtc_instance, 10);
    b8e4:	4b0d      	ldr	r3, [pc, #52]	; (b91c <configure_rtc+0x7c>)
    b8e6:	210a      	movs	r1, #10
    b8e8:	0018      	movs	r0, r3
    b8ea:	4b0e      	ldr	r3, [pc, #56]	; (b924 <configure_rtc+0x84>)
    b8ec:	4798      	blx	r3
	conf_rtc_events.generate_event_on_overflow = true;
    b8ee:	1d3b      	adds	r3, r7, #4
    b8f0:	2201      	movs	r2, #1
    b8f2:	701a      	strb	r2, [r3, #0]
	
	rtc_count_enable_events(&rtc_instance, &conf_rtc_events);
    b8f4:	1d3a      	adds	r2, r7, #4
    b8f6:	4b09      	ldr	r3, [pc, #36]	; (b91c <configure_rtc+0x7c>)
    b8f8:	0011      	movs	r1, r2
    b8fa:	0018      	movs	r0, r3
    b8fc:	4b0a      	ldr	r3, [pc, #40]	; (b928 <configure_rtc+0x88>)
    b8fe:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
    b900:	4b06      	ldr	r3, [pc, #24]	; (b91c <configure_rtc+0x7c>)
    b902:	0018      	movs	r0, r3
    b904:	4b09      	ldr	r3, [pc, #36]	; (b92c <configure_rtc+0x8c>)
    b906:	4798      	blx	r3
}
    b908:	46c0      	nop			; (mov r8, r8)
    b90a:	46bd      	mov	sp, r7
    b90c:	b008      	add	sp, #32
    b90e:	bd80      	pop	{r7, pc}
    b910:	00017b57 	.word	0x00017b57
    b914:	00008889 	.word	0x00008889
    b918:	40001400 	.word	0x40001400
    b91c:	20000804 	.word	0x20000804
    b920:	0000d305 	.word	0x0000d305
    b924:	0000d421 	.word	0x0000d421
    b928:	000088e5 	.word	0x000088e5
    b92c:	0000d0dd 	.word	0x0000d0dd

0000b930 <ac_detect_callback>:

void ac_detect_callback(struct ac_module *const module_inst)
{
    b930:	b580      	push	{r7, lr}
    b932:	b082      	sub	sp, #8
    b934:	af00      	add	r7, sp, #0
    b936:	6078      	str	r0, [r7, #4]
	eventOccured = true;
    b938:	4b03      	ldr	r3, [pc, #12]	; (b948 <ac_detect_callback+0x18>)
    b93a:	2201      	movs	r2, #1
    b93c:	701a      	strb	r2, [r3, #0]
}
    b93e:	46c0      	nop			; (mov r8, r8)
    b940:	46bd      	mov	sp, r7
    b942:	b002      	add	sp, #8
    b944:	bd80      	pop	{r7, pc}
    b946:	46c0      	nop			; (mov r8, r8)
    b948:	20000707 	.word	0x20000707

0000b94c <motor_feedback_callback>:

static void motor_feedback_callback(void)
{
    b94c:	b580      	push	{r7, lr}
    b94e:	af00      	add	r7, sp, #0
	eventOccured = true;
    b950:	4b02      	ldr	r3, [pc, #8]	; (b95c <motor_feedback_callback+0x10>)
    b952:	2201      	movs	r2, #1
    b954:	701a      	strb	r2, [r3, #0]
}
    b956:	46c0      	nop			; (mov r8, r8)
    b958:	46bd      	mov	sp, r7
    b95a:	bd80      	pop	{r7, pc}
    b95c:	20000707 	.word	0x20000707

0000b960 <configure_event>:

void configure_event(void)
{
    b960:	b580      	push	{r7, lr}
    b962:	b082      	sub	sp, #8
    b964:	af00      	add	r7, sp, #0
	struct events_config conf_event;
	events_get_config_defaults(&conf_event);
    b966:	1d3b      	adds	r3, r7, #4
    b968:	0018      	movs	r0, r3
    b96a:	4b0d      	ldr	r3, [pc, #52]	; (b9a0 <configure_event+0x40>)
    b96c:	4798      	blx	r3
	conf_event.generator = EVSYS_ID_GEN_RTC_OVF;
    b96e:	1d3b      	adds	r3, r7, #4
    b970:	2203      	movs	r2, #3
    b972:	709a      	strb	r2, [r3, #2]
	conf_event.edge_detect = EVENTS_EDGE_DETECT_NONE;
    b974:	1d3b      	adds	r3, r7, #4
    b976:	2200      	movs	r2, #0
    b978:	701a      	strb	r2, [r3, #0]
	conf_event.path       = EVENTS_PATH_ASYNCHRONOUS;
    b97a:	1d3b      	adds	r3, r7, #4
    b97c:	2202      	movs	r2, #2
    b97e:	705a      	strb	r2, [r3, #1]
	
	events_allocate(&resource, &conf_event);
    b980:	1d3a      	adds	r2, r7, #4
    b982:	4b08      	ldr	r3, [pc, #32]	; (b9a4 <configure_event+0x44>)
    b984:	0011      	movs	r1, r2
    b986:	0018      	movs	r0, r3
    b988:	4b07      	ldr	r3, [pc, #28]	; (b9a8 <configure_event+0x48>)
    b98a:	4798      	blx	r3
	events_attach_user(&resource, EVSYS_ID_USER_AC_SOC_0);
    b98c:	4b05      	ldr	r3, [pc, #20]	; (b9a4 <configure_event+0x44>)
    b98e:	2119      	movs	r1, #25
    b990:	0018      	movs	r0, r3
    b992:	4b06      	ldr	r3, [pc, #24]	; (b9ac <configure_event+0x4c>)
    b994:	4798      	blx	r3
}
    b996:	46c0      	nop			; (mov r8, r8)
    b998:	46bd      	mov	sp, r7
    b99a:	b002      	add	sp, #8
    b99c:	bd80      	pop	{r7, pc}
    b99e:	46c0      	nop			; (mov r8, r8)
    b9a0:	000114e1 	.word	0x000114e1
    b9a4:	2000081c 	.word	0x2000081c
    b9a8:	00011509 	.word	0x00011509
    b9ac:	000115d1 	.word	0x000115d1

0000b9b0 <operateOnButtonEvent>:

void operateOnButtonEvent(void)
{
    b9b0:	b580      	push	{r7, lr}
    b9b2:	af00      	add	r7, sp, #0
	buttonEventOccured=false;
    b9b4:	4b28      	ldr	r3, [pc, #160]	; (ba58 <operateOnButtonEvent+0xa8>)
    b9b6:	2200      	movs	r2, #0
    b9b8:	701a      	strb	r2, [r3, #0]
	if (START_BUTTON_INPUT_COMES)
    b9ba:	2026      	movs	r0, #38	; 0x26
    b9bc:	4b27      	ldr	r3, [pc, #156]	; (ba5c <operateOnButtonEvent+0xac>)
    b9be:	4798      	blx	r3
    b9c0:	0003      	movs	r3, r0
    b9c2:	001a      	movs	r2, r3
    b9c4:	2301      	movs	r3, #1
    b9c6:	4053      	eors	r3, r2
    b9c8:	b2db      	uxtb	r3, r3
    b9ca:	2b00      	cmp	r3, #0
    b9cc:	d008      	beq.n	b9e0 <operateOnButtonEvent+0x30>
	{
		lastPressTime=xTaskGetTickCount();
    b9ce:	4b24      	ldr	r3, [pc, #144]	; (ba60 <operateOnButtonEvent+0xb0>)
    b9d0:	4798      	blx	r3
    b9d2:	0002      	movs	r2, r0
    b9d4:	4b23      	ldr	r3, [pc, #140]	; (ba64 <operateOnButtonEvent+0xb4>)
    b9d6:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTSTART;
    b9d8:	4b23      	ldr	r3, [pc, #140]	; (ba68 <operateOnButtonEvent+0xb8>)
    b9da:	2201      	movs	r2, #1
    b9dc:	701a      	strb	r2, [r3, #0]
	else if(LCDSHOW_BUTTON_INPUT_COMES)
	{
		lastPressTime= xTaskGetTickCount();
		lastButtonEvent=BTNEVENTLCDSHOW;
	}
}
    b9de:	e037      	b.n	ba50 <operateOnButtonEvent+0xa0>
	else if (STOP_BUTTON_INPUT_COMES)
    b9e0:	2025      	movs	r0, #37	; 0x25
    b9e2:	4b1e      	ldr	r3, [pc, #120]	; (ba5c <operateOnButtonEvent+0xac>)
    b9e4:	4798      	blx	r3
    b9e6:	0003      	movs	r3, r0
    b9e8:	001a      	movs	r2, r3
    b9ea:	2301      	movs	r3, #1
    b9ec:	4053      	eors	r3, r2
    b9ee:	b2db      	uxtb	r3, r3
    b9f0:	2b00      	cmp	r3, #0
    b9f2:	d008      	beq.n	ba06 <operateOnButtonEvent+0x56>
		lastPressTime=xTaskGetTickCount();
    b9f4:	4b1a      	ldr	r3, [pc, #104]	; (ba60 <operateOnButtonEvent+0xb0>)
    b9f6:	4798      	blx	r3
    b9f8:	0002      	movs	r2, r0
    b9fa:	4b1a      	ldr	r3, [pc, #104]	; (ba64 <operateOnButtonEvent+0xb4>)
    b9fc:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTSTOP;
    b9fe:	4b1a      	ldr	r3, [pc, #104]	; (ba68 <operateOnButtonEvent+0xb8>)
    ba00:	2202      	movs	r2, #2
    ba02:	701a      	strb	r2, [r3, #0]
}
    ba04:	e024      	b.n	ba50 <operateOnButtonEvent+0xa0>
	else if (AUTO_BUTTON_INPUT_COMES)
    ba06:	201c      	movs	r0, #28
    ba08:	4b14      	ldr	r3, [pc, #80]	; (ba5c <operateOnButtonEvent+0xac>)
    ba0a:	4798      	blx	r3
    ba0c:	0003      	movs	r3, r0
    ba0e:	001a      	movs	r2, r3
    ba10:	2301      	movs	r3, #1
    ba12:	4053      	eors	r3, r2
    ba14:	b2db      	uxtb	r3, r3
    ba16:	2b00      	cmp	r3, #0
    ba18:	d008      	beq.n	ba2c <operateOnButtonEvent+0x7c>
		lastPressTime=xTaskGetTickCount();
    ba1a:	4b11      	ldr	r3, [pc, #68]	; (ba60 <operateOnButtonEvent+0xb0>)
    ba1c:	4798      	blx	r3
    ba1e:	0002      	movs	r2, r0
    ba20:	4b10      	ldr	r3, [pc, #64]	; (ba64 <operateOnButtonEvent+0xb4>)
    ba22:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTAUTO;
    ba24:	4b10      	ldr	r3, [pc, #64]	; (ba68 <operateOnButtonEvent+0xb8>)
    ba26:	2203      	movs	r2, #3
    ba28:	701a      	strb	r2, [r3, #0]
}
    ba2a:	e011      	b.n	ba50 <operateOnButtonEvent+0xa0>
	else if(LCDSHOW_BUTTON_INPUT_COMES)
    ba2c:	2029      	movs	r0, #41	; 0x29
    ba2e:	4b0b      	ldr	r3, [pc, #44]	; (ba5c <operateOnButtonEvent+0xac>)
    ba30:	4798      	blx	r3
    ba32:	0003      	movs	r3, r0
    ba34:	001a      	movs	r2, r3
    ba36:	2301      	movs	r3, #1
    ba38:	4053      	eors	r3, r2
    ba3a:	b2db      	uxtb	r3, r3
    ba3c:	2b00      	cmp	r3, #0
    ba3e:	d007      	beq.n	ba50 <operateOnButtonEvent+0xa0>
		lastPressTime= xTaskGetTickCount();
    ba40:	4b07      	ldr	r3, [pc, #28]	; (ba60 <operateOnButtonEvent+0xb0>)
    ba42:	4798      	blx	r3
    ba44:	0002      	movs	r2, r0
    ba46:	4b07      	ldr	r3, [pc, #28]	; (ba64 <operateOnButtonEvent+0xb4>)
    ba48:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTLCDSHOW;
    ba4a:	4b07      	ldr	r3, [pc, #28]	; (ba68 <operateOnButtonEvent+0xb8>)
    ba4c:	2204      	movs	r2, #4
    ba4e:	701a      	strb	r2, [r3, #0]
}
    ba50:	46c0      	nop			; (mov r8, r8)
    ba52:	46bd      	mov	sp, r7
    ba54:	bd80      	pop	{r7, pc}
    ba56:	46c0      	nop			; (mov r8, r8)
    ba58:	20000767 	.word	0x20000767
    ba5c:	00008769 	.word	0x00008769
    ba60:	0000f1fd 	.word	0x0000f1fd
    ba64:	20000730 	.word	0x20000730
    ba68:	20000750 	.word	0x20000750

0000ba6c <buttonFilter>:

void buttonFilter(void)
{
    ba6c:	b580      	push	{r7, lr}
    ba6e:	af00      	add	r7, sp, #0
	//&& xTaskGetTickCount() - lastPressTime > 30
	if(lastButtonEvent>0)
    ba70:	4b47      	ldr	r3, [pc, #284]	; (bb90 <buttonFilter+0x124>)
    ba72:	781b      	ldrb	r3, [r3, #0]
    ba74:	b2db      	uxtb	r3, r3
    ba76:	2b00      	cmp	r3, #0
    ba78:	d100      	bne.n	ba7c <buttonFilter+0x10>
    ba7a:	e086      	b.n	bb8a <buttonFilter+0x11e>
	{
		if(lastButtonEvent==BTNEVENTSTART && START_BUTTON_INPUT_COMES)
    ba7c:	4b44      	ldr	r3, [pc, #272]	; (bb90 <buttonFilter+0x124>)
    ba7e:	781b      	ldrb	r3, [r3, #0]
    ba80:	b2db      	uxtb	r3, r3
    ba82:	2b01      	cmp	r3, #1
    ba84:	d111      	bne.n	baaa <buttonFilter+0x3e>
    ba86:	2026      	movs	r0, #38	; 0x26
    ba88:	4b42      	ldr	r3, [pc, #264]	; (bb94 <buttonFilter+0x128>)
    ba8a:	4798      	blx	r3
    ba8c:	0003      	movs	r3, r0
    ba8e:	001a      	movs	r2, r3
    ba90:	2301      	movs	r3, #1
    ba92:	4053      	eors	r3, r2
    ba94:	b2db      	uxtb	r3, r3
    ba96:	2b00      	cmp	r3, #0
    ba98:	d007      	beq.n	baaa <buttonFilter+0x3e>
		{
			lastButtonEvent=0;
    ba9a:	4b3d      	ldr	r3, [pc, #244]	; (bb90 <buttonFilter+0x124>)
    ba9c:	2200      	movs	r2, #0
    ba9e:	701a      	strb	r2, [r3, #0]
			startMotor(false,false);
    baa0:	2100      	movs	r1, #0
    baa2:	2000      	movs	r0, #0
    baa4:	4b3c      	ldr	r3, [pc, #240]	; (bb98 <buttonFilter+0x12c>)
    baa6:	4798      	blx	r3
    baa8:	e06f      	b.n	bb8a <buttonFilter+0x11e>
		}
		else if(lastButtonEvent==BTNEVENTSTOP && STOP_BUTTON_INPUT_COMES)
    baaa:	4b39      	ldr	r3, [pc, #228]	; (bb90 <buttonFilter+0x124>)
    baac:	781b      	ldrb	r3, [r3, #0]
    baae:	b2db      	uxtb	r3, r3
    bab0:	2b02      	cmp	r3, #2
    bab2:	d112      	bne.n	bada <buttonFilter+0x6e>
    bab4:	2025      	movs	r0, #37	; 0x25
    bab6:	4b37      	ldr	r3, [pc, #220]	; (bb94 <buttonFilter+0x128>)
    bab8:	4798      	blx	r3
    baba:	0003      	movs	r3, r0
    babc:	001a      	movs	r2, r3
    babe:	2301      	movs	r3, #1
    bac0:	4053      	eors	r3, r2
    bac2:	b2db      	uxtb	r3, r3
    bac4:	2b00      	cmp	r3, #0
    bac6:	d008      	beq.n	bada <buttonFilter+0x6e>
		{
			lastButtonEvent=0;
    bac8:	4b31      	ldr	r3, [pc, #196]	; (bb90 <buttonFilter+0x124>)
    baca:	2200      	movs	r2, #0
    bacc:	701a      	strb	r2, [r3, #0]
			stopMotor(false,false,true);
    bace:	2201      	movs	r2, #1
    bad0:	2100      	movs	r1, #0
    bad2:	2000      	movs	r0, #0
    bad4:	4b31      	ldr	r3, [pc, #196]	; (bb9c <buttonFilter+0x130>)
    bad6:	4798      	blx	r3
    bad8:	e057      	b.n	bb8a <buttonFilter+0x11e>
		}
		else if(lastButtonEvent==BTNEVENTAUTO && AUTO_BUTTON_INPUT_COMES)
    bada:	4b2d      	ldr	r3, [pc, #180]	; (bb90 <buttonFilter+0x124>)
    badc:	781b      	ldrb	r3, [r3, #0]
    bade:	b2db      	uxtb	r3, r3
    bae0:	2b03      	cmp	r3, #3
    bae2:	d12b      	bne.n	bb3c <buttonFilter+0xd0>
    bae4:	201c      	movs	r0, #28
    bae6:	4b2b      	ldr	r3, [pc, #172]	; (bb94 <buttonFilter+0x128>)
    bae8:	4798      	blx	r3
    baea:	0003      	movs	r3, r0
    baec:	001a      	movs	r2, r3
    baee:	2301      	movs	r3, #1
    baf0:	4053      	eors	r3, r2
    baf2:	b2db      	uxtb	r3, r3
    baf4:	2b00      	cmp	r3, #0
    baf6:	d021      	beq.n	bb3c <buttonFilter+0xd0>
		{
			lastButtonEvent=0;
    baf8:	4b25      	ldr	r3, [pc, #148]	; (bb90 <buttonFilter+0x124>)
    bafa:	2200      	movs	r2, #0
    bafc:	701a      	strb	r2, [r3, #0]
			saveAutoStartSettings(!((bool)user_settings_parameter_struct.autoStartAddress));  //set AutoStart to True in EEPROM
    bafe:	4b28      	ldr	r3, [pc, #160]	; (bba0 <buttonFilter+0x134>)
    bb00:	785b      	ldrb	r3, [r3, #1]
    bb02:	425a      	negs	r2, r3
    bb04:	4153      	adcs	r3, r2
    bb06:	b2db      	uxtb	r3, r3
    bb08:	0018      	movs	r0, r3
    bb0a:	4b26      	ldr	r3, [pc, #152]	; (bba4 <buttonFilter+0x138>)
    bb0c:	4798      	blx	r3
			resetAutoStart(true);
    bb0e:	2001      	movs	r0, #1
    bb10:	4b25      	ldr	r3, [pc, #148]	; (bba8 <buttonFilter+0x13c>)
    bb12:	4798      	blx	r3
			if(user_settings_parameter_struct.autoStartAddress)
    bb14:	4b22      	ldr	r3, [pc, #136]	; (bba0 <buttonFilter+0x134>)
    bb16:	785b      	ldrb	r3, [r3, #1]
    bb18:	2b00      	cmp	r3, #0
    bb1a:	d007      	beq.n	bb2c <buttonFilter+0xc0>
			{
				simEventTemp[10] = registerEvent(')');
    bb1c:	2029      	movs	r0, #41	; 0x29
    bb1e:	4b23      	ldr	r3, [pc, #140]	; (bbac <buttonFilter+0x140>)
    bb20:	4798      	blx	r3
    bb22:	0003      	movs	r3, r0
    bb24:	001a      	movs	r2, r3
    bb26:	4b22      	ldr	r3, [pc, #136]	; (bbb0 <buttonFilter+0x144>)
    bb28:	729a      	strb	r2, [r3, #10]
			if(user_settings_parameter_struct.autoStartAddress)
    bb2a:	e02e      	b.n	bb8a <buttonFilter+0x11e>
			}
			else
			{
				simEventTemp[11] = registerEvent('[');
    bb2c:	205b      	movs	r0, #91	; 0x5b
    bb2e:	4b1f      	ldr	r3, [pc, #124]	; (bbac <buttonFilter+0x140>)
    bb30:	4798      	blx	r3
    bb32:	0003      	movs	r3, r0
    bb34:	001a      	movs	r2, r3
    bb36:	4b1e      	ldr	r3, [pc, #120]	; (bbb0 <buttonFilter+0x144>)
    bb38:	72da      	strb	r2, [r3, #11]
			if(user_settings_parameter_struct.autoStartAddress)
    bb3a:	e026      	b.n	bb8a <buttonFilter+0x11e>
			}
		}
		else if(lastButtonEvent==BTNEVENTLCDSHOW && LCDSHOW_BUTTON_INPUT_COMES)
    bb3c:	4b14      	ldr	r3, [pc, #80]	; (bb90 <buttonFilter+0x124>)
    bb3e:	781b      	ldrb	r3, [r3, #0]
    bb40:	b2db      	uxtb	r3, r3
    bb42:	2b04      	cmp	r3, #4
    bb44:	d11d      	bne.n	bb82 <buttonFilter+0x116>
    bb46:	2029      	movs	r0, #41	; 0x29
    bb48:	4b12      	ldr	r3, [pc, #72]	; (bb94 <buttonFilter+0x128>)
    bb4a:	4798      	blx	r3
    bb4c:	0003      	movs	r3, r0
    bb4e:	001a      	movs	r2, r3
    bb50:	2301      	movs	r3, #1
    bb52:	4053      	eors	r3, r2
    bb54:	b2db      	uxtb	r3, r3
    bb56:	2b00      	cmp	r3, #0
    bb58:	d013      	beq.n	bb82 <buttonFilter+0x116>
		{
			lastButtonEvent=0;
    bb5a:	4b0d      	ldr	r3, [pc, #52]	; (bb90 <buttonFilter+0x124>)
    bb5c:	2200      	movs	r2, #0
    bb5e:	701a      	strb	r2, [r3, #0]
			setDisplayPause(!varPauseDisplay);
    bb60:	4b14      	ldr	r3, [pc, #80]	; (bbb4 <buttonFilter+0x148>)
    bb62:	781b      	ldrb	r3, [r3, #0]
    bb64:	b2db      	uxtb	r3, r3
    bb66:	1e5a      	subs	r2, r3, #1
    bb68:	4193      	sbcs	r3, r2
    bb6a:	b2db      	uxtb	r3, r3
    bb6c:	2201      	movs	r2, #1
    bb6e:	4053      	eors	r3, r2
    bb70:	b2db      	uxtb	r3, r3
    bb72:	1c1a      	adds	r2, r3, #0
    bb74:	2301      	movs	r3, #1
    bb76:	4013      	ands	r3, r2
    bb78:	b2db      	uxtb	r3, r3
    bb7a:	0018      	movs	r0, r3
    bb7c:	4b0e      	ldr	r3, [pc, #56]	; (bbb8 <buttonFilter+0x14c>)
    bb7e:	4798      	blx	r3
    bb80:	e003      	b.n	bb8a <buttonFilter+0x11e>
		}
		else
		{
			lastButtonEvent=0;
    bb82:	4b03      	ldr	r3, [pc, #12]	; (bb90 <buttonFilter+0x124>)
    bb84:	2200      	movs	r2, #0
    bb86:	701a      	strb	r2, [r3, #0]
		}
	}
}
    bb88:	e7ff      	b.n	bb8a <buttonFilter+0x11e>
    bb8a:	46c0      	nop			; (mov r8, r8)
    bb8c:	46bd      	mov	sp, r7
    bb8e:	bd80      	pop	{r7, pc}
    bb90:	20000750 	.word	0x20000750
    bb94:	00008769 	.word	0x00008769
    bb98:	0000a52d 	.word	0x0000a52d
    bb9c:	0000a6e9 	.word	0x0000a6e9
    bba0:	2000064c 	.word	0x2000064c
    bba4:	000012a9 	.word	0x000012a9
    bba8:	0000a0f9 	.word	0x0000a0f9
    bbac:	00004679 	.word	0x00004679
    bbb0:	200006f0 	.word	0x200006f0
    bbb4:	20000774 	.word	0x20000774
    bbb8:	0000bbbd 	.word	0x0000bbbd

0000bbbc <setDisplayPause>:
//}
//}


void setDisplayPause(bool value)
{
    bbbc:	b580      	push	{r7, lr}
    bbbe:	b082      	sub	sp, #8
    bbc0:	af00      	add	r7, sp, #0
    bbc2:	0002      	movs	r2, r0
    bbc4:	1dfb      	adds	r3, r7, #7
    bbc6:	701a      	strb	r2, [r3, #0]
	varPauseDisplay=value;
    bbc8:	4b03      	ldr	r3, [pc, #12]	; (bbd8 <setDisplayPause+0x1c>)
    bbca:	1dfa      	adds	r2, r7, #7
    bbcc:	7812      	ldrb	r2, [r2, #0]
    bbce:	701a      	strb	r2, [r3, #0]
}
    bbd0:	46c0      	nop			; (mov r8, r8)
    bbd2:	46bd      	mov	sp, r7
    bbd4:	b002      	add	sp, #8
    bbd6:	bd80      	pop	{r7, pc}
    bbd8:	20000774 	.word	0x20000774

0000bbdc <setCallStateOnLCD>:

void setCallStateOnLCD(uint8_t callState,char* number,bool usePrevious)
{
    bbdc:	b580      	push	{r7, lr}
    bbde:	b082      	sub	sp, #8
    bbe0:	af00      	add	r7, sp, #0
    bbe2:	6039      	str	r1, [r7, #0]
    bbe4:	0011      	movs	r1, r2
    bbe6:	1dfb      	adds	r3, r7, #7
    bbe8:	1c02      	adds	r2, r0, #0
    bbea:	701a      	strb	r2, [r3, #0]
    bbec:	1dbb      	adds	r3, r7, #6
    bbee:	1c0a      	adds	r2, r1, #0
    bbf0:	701a      	strb	r2, [r3, #0]
	callStateOnLCD = callState;
    bbf2:	4b0f      	ldr	r3, [pc, #60]	; (bc30 <setCallStateOnLCD+0x54>)
    bbf4:	1dfa      	adds	r2, r7, #7
    bbf6:	7812      	ldrb	r2, [r2, #0]
    bbf8:	701a      	strb	r2, [r3, #0]

	if(!usePrevious)
    bbfa:	1dbb      	adds	r3, r7, #6
    bbfc:	781b      	ldrb	r3, [r3, #0]
    bbfe:	2201      	movs	r2, #1
    bc00:	4053      	eors	r3, r2
    bc02:	b2db      	uxtb	r3, r3
    bc04:	2b00      	cmp	r3, #0
    bc06:	d00f      	beq.n	bc28 <setCallStateOnLCD+0x4c>
	{
		memset(numberOnLCD, '\0', sizeof(numberOnLCD));
    bc08:	4b0a      	ldr	r3, [pc, #40]	; (bc34 <setCallStateOnLCD+0x58>)
    bc0a:	2214      	movs	r2, #20
    bc0c:	2100      	movs	r1, #0
    bc0e:	0018      	movs	r0, r3
    bc10:	4b09      	ldr	r3, [pc, #36]	; (bc38 <setCallStateOnLCD+0x5c>)
    bc12:	4798      	blx	r3
		if(callStateOnLCD!=LCDCALLSTATE_IDLE)
    bc14:	4b06      	ldr	r3, [pc, #24]	; (bc30 <setCallStateOnLCD+0x54>)
    bc16:	781b      	ldrb	r3, [r3, #0]
    bc18:	2b00      	cmp	r3, #0
    bc1a:	d005      	beq.n	bc28 <setCallStateOnLCD+0x4c>
		{
			strcpy(numberOnLCD,number);
    bc1c:	683a      	ldr	r2, [r7, #0]
    bc1e:	4b05      	ldr	r3, [pc, #20]	; (bc34 <setCallStateOnLCD+0x58>)
    bc20:	0011      	movs	r1, r2
    bc22:	0018      	movs	r0, r3
    bc24:	4b05      	ldr	r3, [pc, #20]	; (bc3c <setCallStateOnLCD+0x60>)
    bc26:	4798      	blx	r3
			//sprintf(numberOnLCD,"%s",number);
		}
	}
}
    bc28:	46c0      	nop			; (mov r8, r8)
    bc2a:	46bd      	mov	sp, r7
    bc2c:	b002      	add	sp, #8
    bc2e:	bd80      	pop	{r7, pc}
    bc30:	20000789 	.word	0x20000789
    bc34:	200007ec 	.word	0x200007ec
    bc38:	00017b57 	.word	0x00017b57
    bc3c:	00017dd7 	.word	0x00017dd7

0000bc40 <vTask_50ms_Timer>:

static void vTask_50ms_Timer(void *params)
{
    bc40:	b580      	push	{r7, lr}
    bc42:	b084      	sub	sp, #16
    bc44:	af00      	add	r7, sp, #0
    bc46:	6078      	str	r0, [r7, #4]
	TickType_t xLastExecutionGsm_Send_Time;
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
    bc48:	4b0f      	ldr	r3, [pc, #60]	; (bc88 <vTask_50ms_Timer+0x48>)
    bc4a:	4798      	blx	r3
    bc4c:	0003      	movs	r3, r0
    bc4e:	60fb      	str	r3, [r7, #12]
	//--------------------------------
	for( ;; )
	{
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (25/portTICK_PERIOD_MS));
    bc50:	230c      	movs	r3, #12
    bc52:	18fb      	adds	r3, r7, r3
    bc54:	2119      	movs	r1, #25
    bc56:	0018      	movs	r0, r3
    bc58:	4b0c      	ldr	r3, [pc, #48]	; (bc8c <vTask_50ms_Timer+0x4c>)
    bc5a:	4798      	blx	r3
		if(buttonEventOccured)
    bc5c:	4b0c      	ldr	r3, [pc, #48]	; (bc90 <vTask_50ms_Timer+0x50>)
    bc5e:	781b      	ldrb	r3, [r3, #0]
    bc60:	b2db      	uxtb	r3, r3
    bc62:	2b00      	cmp	r3, #0
    bc64:	d001      	beq.n	bc6a <vTask_50ms_Timer+0x2a>
		{
			operateOnButtonEvent();
    bc66:	4b0b      	ldr	r3, [pc, #44]	; (bc94 <vTask_50ms_Timer+0x54>)
    bc68:	4798      	blx	r3
		}
		if(lastButtonEvent>0)
    bc6a:	4b0b      	ldr	r3, [pc, #44]	; (bc98 <vTask_50ms_Timer+0x58>)
    bc6c:	781b      	ldrb	r3, [r3, #0]
    bc6e:	b2db      	uxtb	r3, r3
    bc70:	2b00      	cmp	r3, #0
    bc72:	d0ed      	beq.n	bc50 <vTask_50ms_Timer+0x10>
		{
			taskPSet=true;
    bc74:	4b09      	ldr	r3, [pc, #36]	; (bc9c <vTask_50ms_Timer+0x5c>)
    bc76:	2201      	movs	r2, #1
    bc78:	701a      	strb	r2, [r3, #0]
			vTaskPrioritySet(motorTask,2);
    bc7a:	4b09      	ldr	r3, [pc, #36]	; (bca0 <vTask_50ms_Timer+0x60>)
    bc7c:	681b      	ldr	r3, [r3, #0]
    bc7e:	2102      	movs	r1, #2
    bc80:	0018      	movs	r0, r3
    bc82:	4b08      	ldr	r3, [pc, #32]	; (bca4 <vTask_50ms_Timer+0x64>)
    bc84:	4798      	blx	r3
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (25/portTICK_PERIOD_MS));
    bc86:	e7e3      	b.n	bc50 <vTask_50ms_Timer+0x10>
    bc88:	0000f1fd 	.word	0x0000f1fd
    bc8c:	0000edd1 	.word	0x0000edd1
    bc90:	20000767 	.word	0x20000767
    bc94:	0000b9b1 	.word	0x0000b9b1
    bc98:	20000750 	.word	0x20000750
    bc9c:	20000706 	.word	0x20000706
    bca0:	20000794 	.word	0x20000794
    bca4:	0000eef5 	.word	0x0000eef5

0000bca8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    bca8:	b580      	push	{r7, lr}
    bcaa:	b082      	sub	sp, #8
    bcac:	af00      	add	r7, sp, #0
    bcae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    bcb0:	687b      	ldr	r3, [r7, #4]
    bcb2:	2200      	movs	r2, #0
    bcb4:	701a      	strb	r2, [r3, #0]
}
    bcb6:	46c0      	nop			; (mov r8, r8)
    bcb8:	46bd      	mov	sp, r7
    bcba:	b002      	add	sp, #8
    bcbc:	bd80      	pop	{r7, pc}
	...

0000bcc0 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    bcc0:	b580      	push	{r7, lr}
    bcc2:	b082      	sub	sp, #8
    bcc4:	af00      	add	r7, sp, #0
    bcc6:	0002      	movs	r2, r0
    bcc8:	6039      	str	r1, [r7, #0]
    bcca:	1dfb      	adds	r3, r7, #7
    bccc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    bcce:	1dfb      	adds	r3, r7, #7
    bcd0:	781b      	ldrb	r3, [r3, #0]
    bcd2:	2b01      	cmp	r3, #1
    bcd4:	d00a      	beq.n	bcec <system_apb_clock_set_mask+0x2c>
    bcd6:	2b02      	cmp	r3, #2
    bcd8:	d00f      	beq.n	bcfa <system_apb_clock_set_mask+0x3a>
    bcda:	2b00      	cmp	r3, #0
    bcdc:	d114      	bne.n	bd08 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    bcde:	4b0e      	ldr	r3, [pc, #56]	; (bd18 <system_apb_clock_set_mask+0x58>)
    bce0:	4a0d      	ldr	r2, [pc, #52]	; (bd18 <system_apb_clock_set_mask+0x58>)
    bce2:	6991      	ldr	r1, [r2, #24]
    bce4:	683a      	ldr	r2, [r7, #0]
    bce6:	430a      	orrs	r2, r1
    bce8:	619a      	str	r2, [r3, #24]
			break;
    bcea:	e00f      	b.n	bd0c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    bcec:	4b0a      	ldr	r3, [pc, #40]	; (bd18 <system_apb_clock_set_mask+0x58>)
    bcee:	4a0a      	ldr	r2, [pc, #40]	; (bd18 <system_apb_clock_set_mask+0x58>)
    bcf0:	69d1      	ldr	r1, [r2, #28]
    bcf2:	683a      	ldr	r2, [r7, #0]
    bcf4:	430a      	orrs	r2, r1
    bcf6:	61da      	str	r2, [r3, #28]
			break;
    bcf8:	e008      	b.n	bd0c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    bcfa:	4b07      	ldr	r3, [pc, #28]	; (bd18 <system_apb_clock_set_mask+0x58>)
    bcfc:	4a06      	ldr	r2, [pc, #24]	; (bd18 <system_apb_clock_set_mask+0x58>)
    bcfe:	6a11      	ldr	r1, [r2, #32]
    bd00:	683a      	ldr	r2, [r7, #0]
    bd02:	430a      	orrs	r2, r1
    bd04:	621a      	str	r2, [r3, #32]
			break;
    bd06:	e001      	b.n	bd0c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    bd08:	2317      	movs	r3, #23
    bd0a:	e000      	b.n	bd0e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    bd0c:	2300      	movs	r3, #0
}
    bd0e:	0018      	movs	r0, r3
    bd10:	46bd      	mov	sp, r7
    bd12:	b002      	add	sp, #8
    bd14:	bd80      	pop	{r7, pc}
    bd16:	46c0      	nop			; (mov r8, r8)
    bd18:	40000400 	.word	0x40000400

0000bd1c <ac_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval ture If the module synchronization is ongoing
 */
static inline bool ac_is_syncing(
        struct ac_module *const module_inst)
{
    bd1c:	b580      	push	{r7, lr}
    bd1e:	b084      	sub	sp, #16
    bd20:	af00      	add	r7, sp, #0
    bd22:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Ac *const ac_module = module_inst->hw;
    bd24:	687b      	ldr	r3, [r7, #4]
    bd26:	681b      	ldr	r3, [r3, #0]
    bd28:	60fb      	str	r3, [r7, #12]
		return true;
	}

	return false;
#else
	if (ac_module->STATUSB.reg & AC_STATUSB_SYNCBUSY) {
    bd2a:	68fb      	ldr	r3, [r7, #12]
    bd2c:	7a5b      	ldrb	r3, [r3, #9]
    bd2e:	b2db      	uxtb	r3, r3
    bd30:	b25b      	sxtb	r3, r3
    bd32:	2b00      	cmp	r3, #0
    bd34:	da01      	bge.n	bd3a <ac_is_syncing+0x1e>
		return true;
    bd36:	2301      	movs	r3, #1
    bd38:	e000      	b.n	bd3c <ac_is_syncing+0x20>
	}

	return false;
    bd3a:	2300      	movs	r3, #0
#endif
}
    bd3c:	0018      	movs	r0, r3
    bd3e:	46bd      	mov	sp, r7
    bd40:	b004      	add	sp, #16
    bd42:	bd80      	pop	{r7, pc}

0000bd44 <_ac_set_config>:
#include "ac.h"

static enum status_code _ac_set_config(
		struct ac_module *const module_inst,
		struct ac_config *const config)
{
    bd44:	b580      	push	{r7, lr}
    bd46:	b086      	sub	sp, #24
    bd48:	af00      	add	r7, sp, #0
    bd4a:	6078      	str	r0, [r7, #4]
    bd4c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(config);

	Ac *const ac_module = module_inst->hw;
    bd4e:	687b      	ldr	r3, [r7, #4]
    bd50:	681b      	ldr	r3, [r3, #0]
    bd52:	60fb      	str	r3, [r7, #12]

	/* Use a temporary register for computing the control bits */
	uint32_t ctrla_temp = 0;
    bd54:	2300      	movs	r3, #0
    bd56:	617b      	str	r3, [r7, #20]

	/* Check if the comparators should be enabled during sleep */
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
    bd58:	2300      	movs	r3, #0
    bd5a:	613b      	str	r3, [r7, #16]
    bd5c:	e00f      	b.n	bd7e <_ac_set_config+0x3a>
		if (config->run_in_standby[i] == true) {
    bd5e:	683a      	ldr	r2, [r7, #0]
    bd60:	693b      	ldr	r3, [r7, #16]
    bd62:	18d3      	adds	r3, r2, r3
    bd64:	781b      	ldrb	r3, [r3, #0]
    bd66:	2b00      	cmp	r3, #0
    bd68:	d006      	beq.n	bd78 <_ac_set_config+0x34>
			ctrla_temp |= (AC_CTRLA_RUNSTDBY_Msk << i);
    bd6a:	2204      	movs	r2, #4
    bd6c:	693b      	ldr	r3, [r7, #16]
    bd6e:	409a      	lsls	r2, r3
    bd70:	0013      	movs	r3, r2
    bd72:	697a      	ldr	r2, [r7, #20]
    bd74:	4313      	orrs	r3, r2
    bd76:	617b      	str	r3, [r7, #20]
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
    bd78:	693b      	ldr	r3, [r7, #16]
    bd7a:	3301      	adds	r3, #1
    bd7c:	613b      	str	r3, [r7, #16]
    bd7e:	693b      	ldr	r3, [r7, #16]
    bd80:	2b00      	cmp	r3, #0
    bd82:	d0ec      	beq.n	bd5e <_ac_set_config+0x1a>
		}
	}

	while (ac_is_syncing(module_inst)) {
    bd84:	46c0      	nop			; (mov r8, r8)
    bd86:	687b      	ldr	r3, [r7, #4]
    bd88:	0018      	movs	r0, r3
    bd8a:	4b06      	ldr	r3, [pc, #24]	; (bda4 <_ac_set_config+0x60>)
    bd8c:	4798      	blx	r3
    bd8e:	1e03      	subs	r3, r0, #0
    bd90:	d1f9      	bne.n	bd86 <_ac_set_config+0x42>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->CTRLA.reg = ctrla_temp;
    bd92:	697b      	ldr	r3, [r7, #20]
    bd94:	b2da      	uxtb	r2, r3
    bd96:	68fb      	ldr	r3, [r7, #12]
    bd98:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    bd9a:	2300      	movs	r3, #0
}
    bd9c:	0018      	movs	r0, r3
    bd9e:	46bd      	mov	sp, r7
    bda0:	b006      	add	sp, #24
    bda2:	bd80      	pop	{r7, pc}
    bda4:	0000bd1d 	.word	0x0000bd1d

0000bda8 <ac_init>:
 */
enum status_code ac_init(
		struct ac_module *const module_inst,
		Ac *const hw,
		struct ac_config *const config)
{
    bda8:	b580      	push	{r7, lr}
    bdaa:	b086      	sub	sp, #24
    bdac:	af00      	add	r7, sp, #0
    bdae:	60f8      	str	r0, [r7, #12]
    bdb0:	60b9      	str	r1, [r7, #8]
    bdb2:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module_inst->hw = hw;
    bdb4:	68fb      	ldr	r3, [r7, #12]
    bdb6:	68ba      	ldr	r2, [r7, #8]
    bdb8:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock and GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    bdba:	2314      	movs	r3, #20
    bdbc:	18fb      	adds	r3, r7, r3
    bdbe:	0018      	movs	r0, r3
    bdc0:	4b2a      	ldr	r3, [pc, #168]	; (be6c <ac_init+0xc4>)
    bdc2:	4798      	blx	r3

	if (hw == AC) {
    bdc4:	68bb      	ldr	r3, [r7, #8]
    bdc6:	4a2a      	ldr	r2, [pc, #168]	; (be70 <ac_init+0xc8>)
    bdc8:	4293      	cmp	r3, r2
    bdca:	d121      	bne.n	be10 <ac_init+0x68>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_AC);
    bdcc:	2380      	movs	r3, #128	; 0x80
    bdce:	029b      	lsls	r3, r3, #10
    bdd0:	0019      	movs	r1, r3
    bdd2:	2002      	movs	r0, #2
    bdd4:	4b27      	ldr	r3, [pc, #156]	; (be74 <ac_init+0xcc>)
    bdd6:	4798      	blx	r3
		gclk_chan_conf.source_generator = config->dig_source_generator;
    bdd8:	687b      	ldr	r3, [r7, #4]
    bdda:	785a      	ldrb	r2, [r3, #1]
    bddc:	2314      	movs	r3, #20
    bdde:	18fb      	adds	r3, r7, r3
    bde0:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(AC_GCLK_ID_DIG, &gclk_chan_conf);
    bde2:	2314      	movs	r3, #20
    bde4:	18fb      	adds	r3, r7, r3
    bde6:	0019      	movs	r1, r3
    bde8:	201f      	movs	r0, #31
    bdea:	4b23      	ldr	r3, [pc, #140]	; (be78 <ac_init+0xd0>)
    bdec:	4798      	blx	r3
		system_gclk_chan_enable(AC_GCLK_ID_DIG);
    bdee:	201f      	movs	r0, #31
    bdf0:	4b22      	ldr	r3, [pc, #136]	; (be7c <ac_init+0xd4>)
    bdf2:	4798      	blx	r3
		gclk_chan_conf.source_generator = config->ana_source_generator;
    bdf4:	687b      	ldr	r3, [r7, #4]
    bdf6:	789a      	ldrb	r2, [r3, #2]
    bdf8:	2314      	movs	r3, #20
    bdfa:	18fb      	adds	r3, r7, r3
    bdfc:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(AC_GCLK_ID_ANA, &gclk_chan_conf);
    bdfe:	2314      	movs	r3, #20
    be00:	18fb      	adds	r3, r7, r3
    be02:	0019      	movs	r1, r3
    be04:	2020      	movs	r0, #32
    be06:	4b1c      	ldr	r3, [pc, #112]	; (be78 <ac_init+0xd0>)
    be08:	4798      	blx	r3
		system_gclk_chan_enable(AC_GCLK_ID_ANA);
    be0a:	2020      	movs	r0, #32
    be0c:	4b1b      	ldr	r3, [pc, #108]	; (be7c <ac_init+0xd4>)
    be0e:	4798      	blx	r3
#  error This driver is not support more than three AC instances.
#endif

#if AC_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < AC_CALLBACK_N; i++) {
    be10:	2317      	movs	r3, #23
    be12:	18fb      	adds	r3, r7, r3
    be14:	2200      	movs	r2, #0
    be16:	701a      	strb	r2, [r3, #0]
    be18:	e00f      	b.n	be3a <ac_init+0x92>
		module_inst->callback[i]        = NULL;
    be1a:	2317      	movs	r3, #23
    be1c:	18fb      	adds	r3, r7, r3
    be1e:	781b      	ldrb	r3, [r3, #0]
    be20:	68fa      	ldr	r2, [r7, #12]
    be22:	009b      	lsls	r3, r3, #2
    be24:	18d3      	adds	r3, r2, r3
    be26:	3304      	adds	r3, #4
    be28:	2200      	movs	r2, #0
    be2a:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < AC_CALLBACK_N; i++) {
    be2c:	2317      	movs	r3, #23
    be2e:	18fb      	adds	r3, r7, r3
    be30:	781a      	ldrb	r2, [r3, #0]
    be32:	2317      	movs	r3, #23
    be34:	18fb      	adds	r3, r7, r3
    be36:	3201      	adds	r2, #1
    be38:	701a      	strb	r2, [r3, #0]
    be3a:	2317      	movs	r3, #23
    be3c:	18fb      	adds	r3, r7, r3
    be3e:	781b      	ldrb	r3, [r3, #0]
    be40:	2b04      	cmp	r3, #4
    be42:	d9ea      	bls.n	be1a <ac_init+0x72>
	}

	/* Initialize software flags*/
	module_inst->register_callback_mask = 0x00;
    be44:	68fb      	ldr	r3, [r7, #12]
    be46:	2200      	movs	r2, #0
    be48:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask   = 0x00;
    be4a:	68fb      	ldr	r3, [r7, #12]
    be4c:	2200      	movs	r2, #0
    be4e:	765a      	strb	r2, [r3, #25]

#  if (AC_INST_NUM == 1)
	_ac_instance[0] = module_inst;
    be50:	4b0b      	ldr	r3, [pc, #44]	; (be80 <ac_init+0xd8>)
    be52:	68fa      	ldr	r2, [r7, #12]
    be54:	601a      	str	r2, [r3, #0]
	_ac_instance[_ac_get_inst_index(hw)] = module_inst;
#  endif
#endif

	/* Write configuration to module */
	return _ac_set_config(module_inst, config);
    be56:	687a      	ldr	r2, [r7, #4]
    be58:	68fb      	ldr	r3, [r7, #12]
    be5a:	0011      	movs	r1, r2
    be5c:	0018      	movs	r0, r3
    be5e:	4b09      	ldr	r3, [pc, #36]	; (be84 <ac_init+0xdc>)
    be60:	4798      	blx	r3
    be62:	0003      	movs	r3, r0
}
    be64:	0018      	movs	r0, r3
    be66:	46bd      	mov	sp, r7
    be68:	b006      	add	sp, #24
    be6a:	bd80      	pop	{r7, pc}
    be6c:	0000bca9 	.word	0x0000bca9
    be70:	42004400 	.word	0x42004400
    be74:	0000bcc1 	.word	0x0000bcc1
    be78:	000137ad 	.word	0x000137ad
    be7c:	000137f1 	.word	0x000137f1
    be80:	20000924 	.word	0x20000924
    be84:	0000bd45 	.word	0x0000bd45

0000be88 <ac_chan_set_config>:
 */
enum status_code ac_chan_set_config(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel,
		struct ac_chan_config *const config)
{
    be88:	b580      	push	{r7, lr}
    be8a:	b086      	sub	sp, #24
    be8c:	af00      	add	r7, sp, #0
    be8e:	60f8      	str	r0, [r7, #12]
    be90:	607a      	str	r2, [r7, #4]
    be92:	230b      	movs	r3, #11
    be94:	18fb      	adds	r3, r7, r3
    be96:	1c0a      	adds	r2, r1, #0
    be98:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(config);

	Ac *const ac_module = module_inst->hw;
    be9a:	68fb      	ldr	r3, [r7, #12]
    be9c:	681b      	ldr	r3, [r3, #0]
    be9e:	613b      	str	r3, [r7, #16]

	/* Use a temporary variable to compute the comparator configuration */
	uint32_t compctrl_temp = 0;
    bea0:	2300      	movs	r3, #0
    bea2:	617b      	str	r3, [r7, #20]

	/* Enable output filter mode */
	compctrl_temp |= config->filter;
    bea4:	687b      	ldr	r3, [r7, #4]
    bea6:	685b      	ldr	r3, [r3, #4]
    bea8:	697a      	ldr	r2, [r7, #20]
    beaa:	4313      	orrs	r3, r2
    beac:	617b      	str	r3, [r7, #20]

	/* Enable output hysteresis if required */
	if (config->enable_hysteresis == true) {
    beae:	687b      	ldr	r3, [r7, #4]
    beb0:	7a1b      	ldrb	r3, [r3, #8]
    beb2:	2b00      	cmp	r3, #0
    beb4:	d004      	beq.n	bec0 <ac_chan_set_config+0x38>
		compctrl_temp |= AC_COMPCTRL_HYST;
    beb6:	697b      	ldr	r3, [r7, #20]
    beb8:	2280      	movs	r2, #128	; 0x80
    beba:	0312      	lsls	r2, r2, #12
    bebc:	4313      	orrs	r3, r2
    bebe:	617b      	str	r3, [r7, #20]
	}

	/* Set output signal routing mode */
	compctrl_temp |= config->output_mode;
    bec0:	687b      	ldr	r3, [r7, #4]
    bec2:	68db      	ldr	r3, [r3, #12]
    bec4:	697a      	ldr	r2, [r7, #20]
    bec6:	4313      	orrs	r3, r2
    bec8:	617b      	str	r3, [r7, #20]

	/* Configure comparator positive and negative pin MUX configurations */
	compctrl_temp |=
			(uint32_t)config->positive_input |
    beca:	687b      	ldr	r3, [r7, #4]
    becc:	8a1a      	ldrh	r2, [r3, #16]
			(uint32_t)config->negative_input;
    bece:	687b      	ldr	r3, [r7, #4]
    bed0:	8a5b      	ldrh	r3, [r3, #18]
			(uint32_t)config->positive_input |
    bed2:	4313      	orrs	r3, r2
    bed4:	b29b      	uxth	r3, r3
    bed6:	001a      	movs	r2, r3
	compctrl_temp |=
    bed8:	697b      	ldr	r3, [r7, #20]
    beda:	4313      	orrs	r3, r2
    bedc:	617b      	str	r3, [r7, #20]

	/* Set sampling mode (single shot or continuous) */
	compctrl_temp |= config->sample_mode;
    bede:	687b      	ldr	r3, [r7, #4]
    bee0:	781b      	ldrb	r3, [r3, #0]
    bee2:	001a      	movs	r2, r3
    bee4:	697b      	ldr	r3, [r7, #20]
    bee6:	4313      	orrs	r3, r2
    bee8:	617b      	str	r3, [r7, #20]

	/* Set channel interrupt selection */
	compctrl_temp |= config->interrupt_selection;
    beea:	687b      	ldr	r3, [r7, #4]
    beec:	7d5b      	ldrb	r3, [r3, #21]
    beee:	001a      	movs	r2, r3
    bef0:	697b      	ldr	r3, [r7, #20]
    bef2:	4313      	orrs	r3, r2
    bef4:	617b      	str	r3, [r7, #20]

	while (ac_is_syncing(module_inst)) {
    bef6:	46c0      	nop			; (mov r8, r8)
    bef8:	68fb      	ldr	r3, [r7, #12]
    befa:	0018      	movs	r0, r3
    befc:	4b0e      	ldr	r3, [pc, #56]	; (bf38 <ac_chan_set_config+0xb0>)
    befe:	4798      	blx	r3
    bf00:	1e03      	subs	r3, r0, #0
    bf02:	d1f9      	bne.n	bef8 <ac_chan_set_config+0x70>
		/* Wait until synchronization is complete */
	}

	/* Write the final configuration to the module's control register */
	ac_module->COMPCTRL[(uint8_t)channel].reg = compctrl_temp;
    bf04:	230b      	movs	r3, #11
    bf06:	18fb      	adds	r3, r7, r3
    bf08:	781a      	ldrb	r2, [r3, #0]
    bf0a:	693b      	ldr	r3, [r7, #16]
    bf0c:	3204      	adds	r2, #4
    bf0e:	0092      	lsls	r2, r2, #2
    bf10:	6979      	ldr	r1, [r7, #20]
    bf12:	50d1      	str	r1, [r2, r3]

	/* Configure VCC voltage scaling for the comparator */
	ac_module->SCALER[(uint8_t)channel].reg   = config->vcc_scale_factor - 1;
    bf14:	230b      	movs	r3, #11
    bf16:	18fb      	adds	r3, r7, r3
    bf18:	781b      	ldrb	r3, [r3, #0]
    bf1a:	687a      	ldr	r2, [r7, #4]
    bf1c:	7d12      	ldrb	r2, [r2, #20]
    bf1e:	3a01      	subs	r2, #1
    bf20:	b2d0      	uxtb	r0, r2
    bf22:	693a      	ldr	r2, [r7, #16]
    bf24:	2120      	movs	r1, #32
    bf26:	18d3      	adds	r3, r2, r3
    bf28:	185b      	adds	r3, r3, r1
    bf2a:	1c02      	adds	r2, r0, #0
    bf2c:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    bf2e:	2300      	movs	r3, #0
}
    bf30:	0018      	movs	r0, r3
    bf32:	46bd      	mov	sp, r7
    bf34:	b006      	add	sp, #24
    bf36:	bd80      	pop	{r7, pc}
    bf38:	0000bd1d 	.word	0x0000bd1d

0000bf3c <system_gclk_chan_get_config_defaults>:
{
    bf3c:	b580      	push	{r7, lr}
    bf3e:	b082      	sub	sp, #8
    bf40:	af00      	add	r7, sp, #0
    bf42:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    bf44:	687b      	ldr	r3, [r7, #4]
    bf46:	2200      	movs	r2, #0
    bf48:	701a      	strb	r2, [r3, #0]
}
    bf4a:	46c0      	nop			; (mov r8, r8)
    bf4c:	46bd      	mov	sp, r7
    bf4e:	b002      	add	sp, #8
    bf50:	bd80      	pop	{r7, pc}
	...

0000bf54 <system_apb_clock_set_mask>:
{
    bf54:	b580      	push	{r7, lr}
    bf56:	b082      	sub	sp, #8
    bf58:	af00      	add	r7, sp, #0
    bf5a:	0002      	movs	r2, r0
    bf5c:	6039      	str	r1, [r7, #0]
    bf5e:	1dfb      	adds	r3, r7, #7
    bf60:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    bf62:	1dfb      	adds	r3, r7, #7
    bf64:	781b      	ldrb	r3, [r3, #0]
    bf66:	2b01      	cmp	r3, #1
    bf68:	d00a      	beq.n	bf80 <system_apb_clock_set_mask+0x2c>
    bf6a:	2b02      	cmp	r3, #2
    bf6c:	d00f      	beq.n	bf8e <system_apb_clock_set_mask+0x3a>
    bf6e:	2b00      	cmp	r3, #0
    bf70:	d114      	bne.n	bf9c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    bf72:	4b0e      	ldr	r3, [pc, #56]	; (bfac <system_apb_clock_set_mask+0x58>)
    bf74:	4a0d      	ldr	r2, [pc, #52]	; (bfac <system_apb_clock_set_mask+0x58>)
    bf76:	6991      	ldr	r1, [r2, #24]
    bf78:	683a      	ldr	r2, [r7, #0]
    bf7a:	430a      	orrs	r2, r1
    bf7c:	619a      	str	r2, [r3, #24]
			break;
    bf7e:	e00f      	b.n	bfa0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    bf80:	4b0a      	ldr	r3, [pc, #40]	; (bfac <system_apb_clock_set_mask+0x58>)
    bf82:	4a0a      	ldr	r2, [pc, #40]	; (bfac <system_apb_clock_set_mask+0x58>)
    bf84:	69d1      	ldr	r1, [r2, #28]
    bf86:	683a      	ldr	r2, [r7, #0]
    bf88:	430a      	orrs	r2, r1
    bf8a:	61da      	str	r2, [r3, #28]
			break;
    bf8c:	e008      	b.n	bfa0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    bf8e:	4b07      	ldr	r3, [pc, #28]	; (bfac <system_apb_clock_set_mask+0x58>)
    bf90:	4a06      	ldr	r2, [pc, #24]	; (bfac <system_apb_clock_set_mask+0x58>)
    bf92:	6a11      	ldr	r1, [r2, #32]
    bf94:	683a      	ldr	r2, [r7, #0]
    bf96:	430a      	orrs	r2, r1
    bf98:	621a      	str	r2, [r3, #32]
			break;
    bf9a:	e001      	b.n	bfa0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    bf9c:	2317      	movs	r3, #23
    bf9e:	e000      	b.n	bfa2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    bfa0:	2300      	movs	r3, #0
}
    bfa2:	0018      	movs	r0, r3
    bfa4:	46bd      	mov	sp, r7
    bfa6:	b002      	add	sp, #8
    bfa8:	bd80      	pop	{r7, pc}
    bfaa:	46c0      	nop			; (mov r8, r8)
    bfac:	40000400 	.word	0x40000400

0000bfb0 <system_pinmux_get_config_defaults>:
{
    bfb0:	b580      	push	{r7, lr}
    bfb2:	b082      	sub	sp, #8
    bfb4:	af00      	add	r7, sp, #0
    bfb6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    bfb8:	687b      	ldr	r3, [r7, #4]
    bfba:	2280      	movs	r2, #128	; 0x80
    bfbc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    bfbe:	687b      	ldr	r3, [r7, #4]
    bfc0:	2200      	movs	r2, #0
    bfc2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    bfc4:	687b      	ldr	r3, [r7, #4]
    bfc6:	2201      	movs	r2, #1
    bfc8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    bfca:	687b      	ldr	r3, [r7, #4]
    bfcc:	2200      	movs	r2, #0
    bfce:	70da      	strb	r2, [r3, #3]
}
    bfd0:	46c0      	nop			; (mov r8, r8)
    bfd2:	46bd      	mov	sp, r7
    bfd4:	b002      	add	sp, #8
    bfd6:	bd80      	pop	{r7, pc}

0000bfd8 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
    bfd8:	b580      	push	{r7, lr}
    bfda:	b082      	sub	sp, #8
    bfdc:	af00      	add	r7, sp, #0
    bfde:	0002      	movs	r2, r0
    bfe0:	1dfb      	adds	r3, r7, #7
    bfe2:	701a      	strb	r2, [r3, #0]
	switch (vref) {
    bfe4:	1dfb      	adds	r3, r7, #7
    bfe6:	781b      	ldrb	r3, [r3, #0]
    bfe8:	2b00      	cmp	r3, #0
    bfea:	d002      	beq.n	bff2 <system_voltage_reference_enable+0x1a>
    bfec:	2b01      	cmp	r3, #1
    bfee:	d007      	beq.n	c000 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
    bff0:	e00d      	b.n	c00e <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
    bff2:	4b08      	ldr	r3, [pc, #32]	; (c014 <system_voltage_reference_enable+0x3c>)
    bff4:	4a07      	ldr	r2, [pc, #28]	; (c014 <system_voltage_reference_enable+0x3c>)
    bff6:	6c12      	ldr	r2, [r2, #64]	; 0x40
    bff8:	2102      	movs	r1, #2
    bffa:	430a      	orrs	r2, r1
    bffc:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    bffe:	e006      	b.n	c00e <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    c000:	4b04      	ldr	r3, [pc, #16]	; (c014 <system_voltage_reference_enable+0x3c>)
    c002:	4a04      	ldr	r2, [pc, #16]	; (c014 <system_voltage_reference_enable+0x3c>)
    c004:	6c12      	ldr	r2, [r2, #64]	; 0x40
    c006:	2104      	movs	r1, #4
    c008:	430a      	orrs	r2, r1
    c00a:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    c00c:	46c0      	nop			; (mov r8, r8)
	}
}
    c00e:	46bd      	mov	sp, r7
    c010:	b002      	add	sp, #8
    c012:	bd80      	pop	{r7, pc}
    c014:	40000800 	.word	0x40000800

0000c018 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    c018:	b580      	push	{r7, lr}
    c01a:	b084      	sub	sp, #16
    c01c:	af00      	add	r7, sp, #0
    c01e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    c020:	687b      	ldr	r3, [r7, #4]
    c022:	681b      	ldr	r3, [r3, #0]
    c024:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    c026:	68fb      	ldr	r3, [r7, #12]
    c028:	7e5b      	ldrb	r3, [r3, #25]
    c02a:	b2db      	uxtb	r3, r3
    c02c:	b25b      	sxtb	r3, r3
    c02e:	2b00      	cmp	r3, #0
    c030:	da01      	bge.n	c036 <adc_is_syncing+0x1e>
		return true;
    c032:	2301      	movs	r3, #1
    c034:	e000      	b.n	c038 <adc_is_syncing+0x20>
	}

	return false;
    c036:	2300      	movs	r3, #0
}
    c038:	0018      	movs	r0, r3
    c03a:	46bd      	mov	sp, r7
    c03c:	b004      	add	sp, #16
    c03e:	bd80      	pop	{r7, pc}

0000c040 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    c040:	b580      	push	{r7, lr}
    c042:	b082      	sub	sp, #8
    c044:	af00      	add	r7, sp, #0
    c046:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    c048:	687b      	ldr	r3, [r7, #4]
    c04a:	2200      	movs	r2, #0
    c04c:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    c04e:	687b      	ldr	r3, [r7, #4]
    c050:	2200      	movs	r2, #0
    c052:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    c054:	687b      	ldr	r3, [r7, #4]
    c056:	2200      	movs	r2, #0
    c058:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    c05a:	687b      	ldr	r3, [r7, #4]
    c05c:	2200      	movs	r2, #0
    c05e:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    c060:	687b      	ldr	r3, [r7, #4]
    c062:	2200      	movs	r2, #0
    c064:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
    c066:	687b      	ldr	r3, [r7, #4]
    c068:	2200      	movs	r2, #0
    c06a:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
    c06c:	687b      	ldr	r3, [r7, #4]
    c06e:	2200      	movs	r2, #0
    c070:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    c072:	687b      	ldr	r3, [r7, #4]
    c074:	2200      	movs	r2, #0
    c076:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    c078:	687b      	ldr	r3, [r7, #4]
    c07a:	2200      	movs	r2, #0
    c07c:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    c07e:	687b      	ldr	r3, [r7, #4]
    c080:	22c0      	movs	r2, #192	; 0xc0
    c082:	0152      	lsls	r2, r2, #5
    c084:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    c086:	687b      	ldr	r3, [r7, #4]
    c088:	2200      	movs	r2, #0
    c08a:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    c08c:	687b      	ldr	r3, [r7, #4]
    c08e:	2200      	movs	r2, #0
    c090:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
    c092:	687b      	ldr	r3, [r7, #4]
    c094:	2200      	movs	r2, #0
    c096:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
    c098:	687b      	ldr	r3, [r7, #4]
    c09a:	2200      	movs	r2, #0
    c09c:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
    c09e:	687b      	ldr	r3, [r7, #4]
    c0a0:	2200      	movs	r2, #0
    c0a2:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    c0a4:	687b      	ldr	r3, [r7, #4]
    c0a6:	222a      	movs	r2, #42	; 0x2a
    c0a8:	2100      	movs	r1, #0
    c0aa:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
    c0ac:	687b      	ldr	r3, [r7, #4]
    c0ae:	2200      	movs	r2, #0
    c0b0:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
    c0b2:	687b      	ldr	r3, [r7, #4]
    c0b4:	2200      	movs	r2, #0
    c0b6:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
    c0b8:	687b      	ldr	r3, [r7, #4]
    c0ba:	2224      	movs	r2, #36	; 0x24
    c0bc:	2100      	movs	r1, #0
    c0be:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    c0c0:	687b      	ldr	r3, [r7, #4]
    c0c2:	2200      	movs	r2, #0
    c0c4:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    c0c6:	687b      	ldr	r3, [r7, #4]
    c0c8:	2200      	movs	r2, #0
    c0ca:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
    c0cc:	687b      	ldr	r3, [r7, #4]
    c0ce:	2200      	movs	r2, #0
    c0d0:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
    c0d2:	687b      	ldr	r3, [r7, #4]
    c0d4:	222b      	movs	r2, #43	; 0x2b
    c0d6:	2100      	movs	r1, #0
    c0d8:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
    c0da:	687b      	ldr	r3, [r7, #4]
    c0dc:	222c      	movs	r2, #44	; 0x2c
    c0de:	2100      	movs	r1, #0
    c0e0:	5499      	strb	r1, [r3, r2]
}
    c0e2:	46c0      	nop			; (mov r8, r8)
    c0e4:	46bd      	mov	sp, r7
    c0e6:	b002      	add	sp, #8
    c0e8:	bd80      	pop	{r7, pc}
	...

0000c0ec <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
    c0ec:	b580      	push	{r7, lr}
    c0ee:	b098      	sub	sp, #96	; 0x60
    c0f0:	af00      	add	r7, sp, #0
    c0f2:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    c0f4:	230c      	movs	r3, #12
    c0f6:	18fa      	adds	r2, r7, r3
    c0f8:	4b15      	ldr	r3, [pc, #84]	; (c150 <_adc_configure_ain_pin+0x64>)
    c0fa:	0010      	movs	r0, r2
    c0fc:	0019      	movs	r1, r3
    c0fe:	2350      	movs	r3, #80	; 0x50
    c100:	001a      	movs	r2, r3
    c102:	4b14      	ldr	r3, [pc, #80]	; (c154 <_adc_configure_ain_pin+0x68>)
    c104:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
    c106:	4b14      	ldr	r3, [pc, #80]	; (c158 <_adc_configure_ain_pin+0x6c>)
    c108:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
    c10a:	687b      	ldr	r3, [r7, #4]
    c10c:	2b13      	cmp	r3, #19
    c10e:	d81a      	bhi.n	c146 <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    c110:	230c      	movs	r3, #12
    c112:	18fb      	adds	r3, r7, r3
    c114:	687a      	ldr	r2, [r7, #4]
    c116:	0092      	lsls	r2, r2, #2
    c118:	58d3      	ldr	r3, [r2, r3]
    c11a:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
    c11c:	2308      	movs	r3, #8
    c11e:	18fb      	adds	r3, r7, r3
    c120:	0018      	movs	r0, r3
    c122:	4b0e      	ldr	r3, [pc, #56]	; (c15c <_adc_configure_ain_pin+0x70>)
    c124:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    c126:	2308      	movs	r3, #8
    c128:	18fb      	adds	r3, r7, r3
    c12a:	2200      	movs	r2, #0
    c12c:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
    c12e:	2308      	movs	r3, #8
    c130:	18fb      	adds	r3, r7, r3
    c132:	2201      	movs	r2, #1
    c134:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    c136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c138:	b2db      	uxtb	r3, r3
    c13a:	2208      	movs	r2, #8
    c13c:	18ba      	adds	r2, r7, r2
    c13e:	0011      	movs	r1, r2
    c140:	0018      	movs	r0, r3
    c142:	4b07      	ldr	r3, [pc, #28]	; (c160 <_adc_configure_ain_pin+0x74>)
    c144:	4798      	blx	r3
	}
}
    c146:	46c0      	nop			; (mov r8, r8)
    c148:	46bd      	mov	sp, r7
    c14a:	b018      	add	sp, #96	; 0x60
    c14c:	bd80      	pop	{r7, pc}
    c14e:	46c0      	nop			; (mov r8, r8)
    c150:	000195a4 	.word	0x000195a4
    c154:	00017b21 	.word	0x00017b21
    c158:	0000ffff 	.word	0x0000ffff
    c15c:	0000bfb1 	.word	0x0000bfb1
    c160:	00013a99 	.word	0x00013a99

0000c164 <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
    c164:	b5f0      	push	{r4, r5, r6, r7, lr}
    c166:	b089      	sub	sp, #36	; 0x24
    c168:	af00      	add	r7, sp, #0
    c16a:	6078      	str	r0, [r7, #4]
    c16c:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
    c16e:	231f      	movs	r3, #31
    c170:	18fb      	adds	r3, r7, r3
    c172:	2200      	movs	r2, #0
    c174:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
    c176:	2310      	movs	r3, #16
    c178:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    c17a:	2317      	movs	r3, #23
    c17c:	18fb      	adds	r3, r7, r3
    c17e:	2200      	movs	r2, #0
    c180:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_REVISION_Msk) >> DSU_DID_REVISION_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
    c182:	687b      	ldr	r3, [r7, #4]
    c184:	681b      	ldr	r3, [r3, #0]
    c186:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    c188:	230c      	movs	r3, #12
    c18a:	18fb      	adds	r3, r7, r3
    c18c:	0018      	movs	r0, r3
    c18e:	4bce      	ldr	r3, [pc, #824]	; (c4c8 <_adc_set_config+0x364>)
    c190:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
    c192:	683b      	ldr	r3, [r7, #0]
    c194:	781a      	ldrb	r2, [r3, #0]
    c196:	230c      	movs	r3, #12
    c198:	18fb      	adds	r3, r7, r3
    c19a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    c19c:	230c      	movs	r3, #12
    c19e:	18fb      	adds	r3, r7, r3
    c1a0:	0019      	movs	r1, r3
    c1a2:	201e      	movs	r0, #30
    c1a4:	4bc9      	ldr	r3, [pc, #804]	; (c4cc <_adc_set_config+0x368>)
    c1a6:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    c1a8:	201e      	movs	r0, #30
    c1aa:	4bc9      	ldr	r3, [pc, #804]	; (c4d0 <_adc_set_config+0x36c>)
    c1ac:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
    c1ae:	683b      	ldr	r3, [r7, #0]
    c1b0:	222c      	movs	r2, #44	; 0x2c
    c1b2:	5c9b      	ldrb	r3, [r3, r2]
    c1b4:	2b00      	cmp	r3, #0
    c1b6:	d040      	beq.n	c23a <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
    c1b8:	2316      	movs	r3, #22
    c1ba:	18fb      	adds	r3, r7, r3
    c1bc:	683a      	ldr	r2, [r7, #0]
    c1be:	212b      	movs	r1, #43	; 0x2b
    c1c0:	5c52      	ldrb	r2, [r2, r1]
    c1c2:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
    c1c4:	683b      	ldr	r3, [r7, #0]
    c1c6:	7b19      	ldrb	r1, [r3, #12]
		uint8_t start_pin =
    c1c8:	2315      	movs	r3, #21
    c1ca:	18fb      	adds	r3, r7, r3
    c1cc:	2216      	movs	r2, #22
    c1ce:	18ba      	adds	r2, r7, r2
    c1d0:	7812      	ldrb	r2, [r2, #0]
    c1d2:	188a      	adds	r2, r1, r2
    c1d4:	701a      	strb	r2, [r3, #0]
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
    c1d6:	683b      	ldr	r3, [r7, #0]
    c1d8:	222c      	movs	r2, #44	; 0x2c
    c1da:	5c99      	ldrb	r1, [r3, r2]
		uint8_t end_pin =
    c1dc:	230f      	movs	r3, #15
    c1de:	18fb      	adds	r3, r7, r3
    c1e0:	2215      	movs	r2, #21
    c1e2:	18ba      	adds	r2, r7, r2
    c1e4:	7812      	ldrb	r2, [r2, #0]
    c1e6:	188a      	adds	r2, r1, r2
    c1e8:	701a      	strb	r2, [r3, #0]

		while (start_pin < end_pin) {
    c1ea:	e018      	b.n	c21e <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    c1ec:	2316      	movs	r3, #22
    c1ee:	18fb      	adds	r3, r7, r3
    c1f0:	781b      	ldrb	r3, [r3, #0]
    c1f2:	220f      	movs	r2, #15
    c1f4:	4013      	ands	r3, r2
    c1f6:	683a      	ldr	r2, [r7, #0]
    c1f8:	7b12      	ldrb	r2, [r2, #12]
    c1fa:	189b      	adds	r3, r3, r2
    c1fc:	0018      	movs	r0, r3
    c1fe:	4bb5      	ldr	r3, [pc, #724]	; (c4d4 <_adc_set_config+0x370>)
    c200:	4798      	blx	r3
			start_pin++;
    c202:	2315      	movs	r3, #21
    c204:	18fb      	adds	r3, r7, r3
    c206:	781a      	ldrb	r2, [r3, #0]
    c208:	2315      	movs	r3, #21
    c20a:	18fb      	adds	r3, r7, r3
    c20c:	3201      	adds	r2, #1
    c20e:	701a      	strb	r2, [r3, #0]
			offset++;
    c210:	2316      	movs	r3, #22
    c212:	18fb      	adds	r3, r7, r3
    c214:	781a      	ldrb	r2, [r3, #0]
    c216:	2316      	movs	r3, #22
    c218:	18fb      	adds	r3, r7, r3
    c21a:	3201      	adds	r2, #1
    c21c:	701a      	strb	r2, [r3, #0]
		while (start_pin < end_pin) {
    c21e:	2315      	movs	r3, #21
    c220:	18fa      	adds	r2, r7, r3
    c222:	230f      	movs	r3, #15
    c224:	18fb      	adds	r3, r7, r3
    c226:	7812      	ldrb	r2, [r2, #0]
    c228:	781b      	ldrb	r3, [r3, #0]
    c22a:	429a      	cmp	r2, r3
    c22c:	d3de      	bcc.n	c1ec <_adc_set_config+0x88>
		}
		_adc_configure_ain_pin(config->negative_input);
    c22e:	683b      	ldr	r3, [r7, #0]
    c230:	89db      	ldrh	r3, [r3, #14]
    c232:	0018      	movs	r0, r3
    c234:	4ba7      	ldr	r3, [pc, #668]	; (c4d4 <_adc_set_config+0x370>)
    c236:	4798      	blx	r3
    c238:	e009      	b.n	c24e <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
    c23a:	683b      	ldr	r3, [r7, #0]
    c23c:	7b1b      	ldrb	r3, [r3, #12]
    c23e:	0018      	movs	r0, r3
    c240:	4ba4      	ldr	r3, [pc, #656]	; (c4d4 <_adc_set_config+0x370>)
    c242:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
    c244:	683b      	ldr	r3, [r7, #0]
    c246:	89db      	ldrh	r3, [r3, #14]
    c248:	0018      	movs	r0, r3
    c24a:	4ba2      	ldr	r3, [pc, #648]	; (c4d4 <_adc_set_config+0x370>)
    c24c:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    c24e:	683b      	ldr	r3, [r7, #0]
    c250:	7d5b      	ldrb	r3, [r3, #21]
    c252:	009b      	lsls	r3, r3, #2
    c254:	b2da      	uxtb	r2, r3
    c256:	693b      	ldr	r3, [r7, #16]
    c258:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    c25a:	683b      	ldr	r3, [r7, #0]
    c25c:	7d9b      	ldrb	r3, [r3, #22]
    c25e:	01db      	lsls	r3, r3, #7
    c260:	b25a      	sxtb	r2, r3
			(config->reference);
    c262:	683b      	ldr	r3, [r7, #0]
    c264:	785b      	ldrb	r3, [r3, #1]
    c266:	b25b      	sxtb	r3, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    c268:	4313      	orrs	r3, r2
    c26a:	b25b      	sxtb	r3, r3
    c26c:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
    c26e:	693b      	ldr	r3, [r7, #16]
    c270:	705a      	strb	r2, [r3, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
    c272:	683b      	ldr	r3, [r7, #0]
    c274:	791b      	ldrb	r3, [r3, #4]
    c276:	2b34      	cmp	r3, #52	; 0x34
    c278:	d846      	bhi.n	c308 <_adc_set_config+0x1a4>
    c27a:	009a      	lsls	r2, r3, #2
    c27c:	4b96      	ldr	r3, [pc, #600]	; (c4d8 <_adc_set_config+0x374>)
    c27e:	18d3      	adds	r3, r2, r3
    c280:	681b      	ldr	r3, [r3, #0]
    c282:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
    c284:	231f      	movs	r3, #31
    c286:	18fb      	adds	r3, r7, r3
    c288:	683a      	ldr	r2, [r7, #0]
    c28a:	7c52      	ldrb	r2, [r2, #17]
    c28c:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
    c28e:	2317      	movs	r3, #23
    c290:	18fb      	adds	r3, r7, r3
    c292:	683a      	ldr	r2, [r7, #0]
    c294:	7c12      	ldrb	r2, [r2, #16]
    c296:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    c298:	2310      	movs	r3, #16
    c29a:	61bb      	str	r3, [r7, #24]
		break;
    c29c:	e036      	b.n	c30c <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    c29e:	231f      	movs	r3, #31
    c2a0:	18fb      	adds	r3, r7, r3
    c2a2:	2201      	movs	r2, #1
    c2a4:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    c2a6:	2317      	movs	r3, #23
    c2a8:	18fb      	adds	r3, r7, r3
    c2aa:	2202      	movs	r2, #2
    c2ac:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    c2ae:	2310      	movs	r3, #16
    c2b0:	61bb      	str	r3, [r7, #24]
		break;
    c2b2:	e02b      	b.n	c30c <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
    c2b4:	231f      	movs	r3, #31
    c2b6:	18fb      	adds	r3, r7, r3
    c2b8:	2202      	movs	r2, #2
    c2ba:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    c2bc:	2317      	movs	r3, #23
    c2be:	18fb      	adds	r3, r7, r3
    c2c0:	2204      	movs	r2, #4
    c2c2:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    c2c4:	2310      	movs	r3, #16
    c2c6:	61bb      	str	r3, [r7, #24]
		break;
    c2c8:	e020      	b.n	c30c <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    c2ca:	231f      	movs	r3, #31
    c2cc:	18fb      	adds	r3, r7, r3
    c2ce:	2201      	movs	r2, #1
    c2d0:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    c2d2:	2317      	movs	r3, #23
    c2d4:	18fb      	adds	r3, r7, r3
    c2d6:	2206      	movs	r2, #6
    c2d8:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    c2da:	2310      	movs	r3, #16
    c2dc:	61bb      	str	r3, [r7, #24]
		break;
    c2de:	e015      	b.n	c30c <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    c2e0:	231f      	movs	r3, #31
    c2e2:	18fb      	adds	r3, r7, r3
    c2e4:	2200      	movs	r2, #0
    c2e6:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    c2e8:	2317      	movs	r3, #23
    c2ea:	18fb      	adds	r3, r7, r3
    c2ec:	2208      	movs	r2, #8
    c2ee:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    c2f0:	2310      	movs	r3, #16
    c2f2:	61bb      	str	r3, [r7, #24]
		break;
    c2f4:	e00a      	b.n	c30c <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
    c2f6:	2330      	movs	r3, #48	; 0x30
    c2f8:	61bb      	str	r3, [r7, #24]
		break;
    c2fa:	e007      	b.n	c30c <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
    c2fc:	2320      	movs	r3, #32
    c2fe:	61bb      	str	r3, [r7, #24]
		break;
    c300:	e004      	b.n	c30c <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
    c302:	2300      	movs	r3, #0
    c304:	61bb      	str	r3, [r7, #24]
		break;
    c306:	e001      	b.n	c30c <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
    c308:	2317      	movs	r3, #23
    c30a:	e1ae      	b.n	c66a <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    c30c:	231f      	movs	r3, #31
    c30e:	18fb      	adds	r3, r7, r3
    c310:	781b      	ldrb	r3, [r3, #0]
    c312:	011b      	lsls	r3, r3, #4
    c314:	b2db      	uxtb	r3, r3
    c316:	2270      	movs	r2, #112	; 0x70
    c318:	4013      	ands	r3, r2
    c31a:	b2da      	uxtb	r2, r3
    c31c:	2317      	movs	r3, #23
    c31e:	18fb      	adds	r3, r7, r3
    c320:	781b      	ldrb	r3, [r3, #0]
    c322:	4313      	orrs	r3, r2
    c324:	b2da      	uxtb	r2, r3
    c326:	693b      	ldr	r3, [r7, #16]
    c328:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    c32a:	683b      	ldr	r3, [r7, #0]
    c32c:	7ddb      	ldrb	r3, [r3, #23]
    c32e:	2b3f      	cmp	r3, #63	; 0x3f
    c330:	d901      	bls.n	c336 <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
    c332:	2317      	movs	r3, #23
    c334:	e199      	b.n	c66a <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
    c336:	683b      	ldr	r3, [r7, #0]
    c338:	7dda      	ldrb	r2, [r3, #23]
		adc_module->SAMPCTRL.reg =
    c33a:	693b      	ldr	r3, [r7, #16]
    c33c:	70da      	strb	r2, [r3, #3]
	}

	while (adc_is_syncing(module_inst)) {
    c33e:	46c0      	nop			; (mov r8, r8)
    c340:	687b      	ldr	r3, [r7, #4]
    c342:	0018      	movs	r0, r3
    c344:	4b65      	ldr	r3, [pc, #404]	; (c4dc <_adc_set_config+0x378>)
    c346:	4798      	blx	r3
    c348:	1e03      	subs	r3, r0, #0
    c34a:	d1f9      	bne.n	c340 <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
    c34c:	683b      	ldr	r3, [r7, #0]
    c34e:	885a      	ldrh	r2, [r3, #2]
    c350:	69bb      	ldr	r3, [r7, #24]
    c352:	b29b      	uxth	r3, r3
    c354:	4313      	orrs	r3, r2
    c356:	b29a      	uxth	r2, r3
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    c358:	683b      	ldr	r3, [r7, #0]
    c35a:	2124      	movs	r1, #36	; 0x24
    c35c:	5c5b      	ldrb	r3, [r3, r1]
    c35e:	b29b      	uxth	r3, r3
    c360:	00db      	lsls	r3, r3, #3
    c362:	b29b      	uxth	r3, r3
			resolution |
    c364:	4313      	orrs	r3, r2
    c366:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    c368:	683b      	ldr	r3, [r7, #0]
    c36a:	7d1b      	ldrb	r3, [r3, #20]
    c36c:	b29b      	uxth	r3, r3
    c36e:	009b      	lsls	r3, r3, #2
    c370:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    c372:	4313      	orrs	r3, r2
    c374:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    c376:	683b      	ldr	r3, [r7, #0]
    c378:	7c9b      	ldrb	r3, [r3, #18]
    c37a:	b29b      	uxth	r3, r3
    c37c:	18db      	adds	r3, r3, r3
    c37e:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    c380:	4313      	orrs	r3, r2
    c382:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    c384:	683b      	ldr	r3, [r7, #0]
    c386:	7cdb      	ldrb	r3, [r3, #19]
    c388:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    c38a:	4313      	orrs	r3, r2
    c38c:	b29a      	uxth	r2, r3
	adc_module->CTRLB.reg =
    c38e:	693b      	ldr	r3, [r7, #16]
    c390:	809a      	strh	r2, [r3, #4]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    c392:	683b      	ldr	r3, [r7, #0]
    c394:	7e1b      	ldrb	r3, [r3, #24]
    c396:	2b00      	cmp	r3, #0
    c398:	d100      	bne.n	c39c <_adc_set_config+0x238>
    c39a:	e0c4      	b.n	c526 <_adc_set_config+0x3c2>
		switch (resolution) {
    c39c:	69bb      	ldr	r3, [r7, #24]
    c39e:	2b10      	cmp	r3, #16
    c3a0:	d100      	bne.n	c3a4 <_adc_set_config+0x240>
    c3a2:	e076      	b.n	c492 <_adc_set_config+0x32e>
    c3a4:	d802      	bhi.n	c3ac <_adc_set_config+0x248>
    c3a6:	2b00      	cmp	r3, #0
    c3a8:	d04d      	beq.n	c446 <_adc_set_config+0x2e2>
    c3aa:	e0bc      	b.n	c526 <_adc_set_config+0x3c2>
    c3ac:	2b20      	cmp	r3, #32
    c3ae:	d023      	beq.n	c3f8 <_adc_set_config+0x294>
    c3b0:	2b30      	cmp	r3, #48	; 0x30
    c3b2:	d000      	beq.n	c3b6 <_adc_set_config+0x252>
    c3b4:	e0b7      	b.n	c526 <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    c3b6:	683b      	ldr	r3, [r7, #0]
    c3b8:	7cdb      	ldrb	r3, [r3, #19]
    c3ba:	2b00      	cmp	r3, #0
    c3bc:	d011      	beq.n	c3e2 <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
    c3be:	683b      	ldr	r3, [r7, #0]
    c3c0:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    c3c2:	2b7f      	cmp	r3, #127	; 0x7f
    c3c4:	dc0b      	bgt.n	c3de <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
    c3c6:	683b      	ldr	r3, [r7, #0]
    c3c8:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
    c3ca:	3380      	adds	r3, #128	; 0x80
    c3cc:	db07      	blt.n	c3de <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
    c3ce:	683b      	ldr	r3, [r7, #0]
    c3d0:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
    c3d2:	2b7f      	cmp	r3, #127	; 0x7f
    c3d4:	dc03      	bgt.n	c3de <_adc_set_config+0x27a>
					config->window.window_upper_value < -128)) {
    c3d6:	683b      	ldr	r3, [r7, #0]
    c3d8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
    c3da:	3380      	adds	r3, #128	; 0x80
    c3dc:	da01      	bge.n	c3e2 <_adc_set_config+0x27e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    c3de:	2317      	movs	r3, #23
    c3e0:	e143      	b.n	c66a <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
    c3e2:	683b      	ldr	r3, [r7, #0]
    c3e4:	69db      	ldr	r3, [r3, #28]
    c3e6:	2bff      	cmp	r3, #255	; 0xff
    c3e8:	dc04      	bgt.n	c3f4 <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
    c3ea:	683b      	ldr	r3, [r7, #0]
    c3ec:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
    c3ee:	2bff      	cmp	r3, #255	; 0xff
    c3f0:	dc00      	bgt.n	c3f4 <_adc_set_config+0x290>
    c3f2:	e091      	b.n	c518 <_adc_set_config+0x3b4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    c3f4:	2317      	movs	r3, #23
    c3f6:	e138      	b.n	c66a <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    c3f8:	683b      	ldr	r3, [r7, #0]
    c3fa:	7cdb      	ldrb	r3, [r3, #19]
    c3fc:	2b00      	cmp	r3, #0
    c3fe:	d015      	beq.n	c42c <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
    c400:	683b      	ldr	r3, [r7, #0]
    c402:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    c404:	4a36      	ldr	r2, [pc, #216]	; (c4e0 <_adc_set_config+0x37c>)
    c406:	4293      	cmp	r3, r2
    c408:	dc0e      	bgt.n	c428 <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
    c40a:	683b      	ldr	r3, [r7, #0]
    c40c:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
    c40e:	4a35      	ldr	r2, [pc, #212]	; (c4e4 <_adc_set_config+0x380>)
    c410:	4293      	cmp	r3, r2
    c412:	db09      	blt.n	c428 <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
    c414:	683b      	ldr	r3, [r7, #0]
    c416:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
    c418:	4a31      	ldr	r2, [pc, #196]	; (c4e0 <_adc_set_config+0x37c>)
    c41a:	4293      	cmp	r3, r2
    c41c:	dc04      	bgt.n	c428 <_adc_set_config+0x2c4>
					config->window.window_upper_value < -512)) {
    c41e:	683b      	ldr	r3, [r7, #0]
    c420:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
    c422:	4a30      	ldr	r2, [pc, #192]	; (c4e4 <_adc_set_config+0x380>)
    c424:	4293      	cmp	r3, r2
    c426:	da01      	bge.n	c42c <_adc_set_config+0x2c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    c428:	2317      	movs	r3, #23
    c42a:	e11e      	b.n	c66a <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
    c42c:	683b      	ldr	r3, [r7, #0]
    c42e:	69db      	ldr	r3, [r3, #28]
    c430:	4a2d      	ldr	r2, [pc, #180]	; (c4e8 <_adc_set_config+0x384>)
    c432:	4293      	cmp	r3, r2
    c434:	dc05      	bgt.n	c442 <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
    c436:	683b      	ldr	r3, [r7, #0]
    c438:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
    c43a:	4a2b      	ldr	r2, [pc, #172]	; (c4e8 <_adc_set_config+0x384>)
    c43c:	4293      	cmp	r3, r2
    c43e:	dc00      	bgt.n	c442 <_adc_set_config+0x2de>
    c440:	e06c      	b.n	c51c <_adc_set_config+0x3b8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    c442:	2317      	movs	r3, #23
    c444:	e111      	b.n	c66a <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    c446:	683b      	ldr	r3, [r7, #0]
    c448:	7cdb      	ldrb	r3, [r3, #19]
    c44a:	2b00      	cmp	r3, #0
    c44c:	d015      	beq.n	c47a <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
    c44e:	683b      	ldr	r3, [r7, #0]
    c450:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    c452:	4a26      	ldr	r2, [pc, #152]	; (c4ec <_adc_set_config+0x388>)
    c454:	4293      	cmp	r3, r2
    c456:	dc0e      	bgt.n	c476 <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
    c458:	683b      	ldr	r3, [r7, #0]
    c45a:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
    c45c:	4a24      	ldr	r2, [pc, #144]	; (c4f0 <_adc_set_config+0x38c>)
    c45e:	4293      	cmp	r3, r2
    c460:	db09      	blt.n	c476 <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
    c462:	683b      	ldr	r3, [r7, #0]
    c464:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
    c466:	4a21      	ldr	r2, [pc, #132]	; (c4ec <_adc_set_config+0x388>)
    c468:	4293      	cmp	r3, r2
    c46a:	dc04      	bgt.n	c476 <_adc_set_config+0x312>
					config->window.window_upper_value < -2048)) {
    c46c:	683b      	ldr	r3, [r7, #0]
    c46e:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
    c470:	4a1f      	ldr	r2, [pc, #124]	; (c4f0 <_adc_set_config+0x38c>)
    c472:	4293      	cmp	r3, r2
    c474:	da01      	bge.n	c47a <_adc_set_config+0x316>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    c476:	2317      	movs	r3, #23
    c478:	e0f7      	b.n	c66a <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
    c47a:	683b      	ldr	r3, [r7, #0]
    c47c:	69db      	ldr	r3, [r3, #28]
    c47e:	4a1d      	ldr	r2, [pc, #116]	; (c4f4 <_adc_set_config+0x390>)
    c480:	4293      	cmp	r3, r2
    c482:	dc04      	bgt.n	c48e <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
    c484:	683b      	ldr	r3, [r7, #0]
    c486:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
    c488:	4a1a      	ldr	r2, [pc, #104]	; (c4f4 <_adc_set_config+0x390>)
    c48a:	4293      	cmp	r3, r2
    c48c:	dd48      	ble.n	c520 <_adc_set_config+0x3bc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    c48e:	2317      	movs	r3, #23
    c490:	e0eb      	b.n	c66a <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    c492:	683b      	ldr	r3, [r7, #0]
    c494:	7cdb      	ldrb	r3, [r3, #19]
    c496:	2b00      	cmp	r3, #0
    c498:	d032      	beq.n	c500 <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
    c49a:	683b      	ldr	r3, [r7, #0]
    c49c:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    c49e:	4a16      	ldr	r2, [pc, #88]	; (c4f8 <_adc_set_config+0x394>)
    c4a0:	4293      	cmp	r3, r2
    c4a2:	dc0e      	bgt.n	c4c2 <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
    c4a4:	683b      	ldr	r3, [r7, #0]
    c4a6:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
    c4a8:	4a14      	ldr	r2, [pc, #80]	; (c4fc <_adc_set_config+0x398>)
    c4aa:	4293      	cmp	r3, r2
    c4ac:	db09      	blt.n	c4c2 <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
    c4ae:	683b      	ldr	r3, [r7, #0]
    c4b0:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
    c4b2:	4a11      	ldr	r2, [pc, #68]	; (c4f8 <_adc_set_config+0x394>)
    c4b4:	4293      	cmp	r3, r2
    c4b6:	dc04      	bgt.n	c4c2 <_adc_set_config+0x35e>
					config->window.window_upper_value < -32768)) {
    c4b8:	683b      	ldr	r3, [r7, #0]
    c4ba:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
    c4bc:	4a0f      	ldr	r2, [pc, #60]	; (c4fc <_adc_set_config+0x398>)
    c4be:	4293      	cmp	r3, r2
    c4c0:	da1e      	bge.n	c500 <_adc_set_config+0x39c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    c4c2:	2317      	movs	r3, #23
    c4c4:	e0d1      	b.n	c66a <_adc_set_config+0x506>
    c4c6:	46c0      	nop			; (mov r8, r8)
    c4c8:	0000bf3d 	.word	0x0000bf3d
    c4cc:	000137ad 	.word	0x000137ad
    c4d0:	000137f1 	.word	0x000137f1
    c4d4:	0000c0ed 	.word	0x0000c0ed
    c4d8:	000195f4 	.word	0x000195f4
    c4dc:	0000c019 	.word	0x0000c019
    c4e0:	000001ff 	.word	0x000001ff
    c4e4:	fffffe00 	.word	0xfffffe00
    c4e8:	000003ff 	.word	0x000003ff
    c4ec:	000007ff 	.word	0x000007ff
    c4f0:	fffff800 	.word	0xfffff800
    c4f4:	00000fff 	.word	0x00000fff
    c4f8:	00007fff 	.word	0x00007fff
    c4fc:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
    c500:	683b      	ldr	r3, [r7, #0]
    c502:	69db      	ldr	r3, [r3, #28]
    c504:	4a5b      	ldr	r2, [pc, #364]	; (c674 <_adc_set_config+0x510>)
    c506:	4293      	cmp	r3, r2
    c508:	dc04      	bgt.n	c514 <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
    c50a:	683b      	ldr	r3, [r7, #0]
    c50c:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
    c50e:	4a59      	ldr	r2, [pc, #356]	; (c674 <_adc_set_config+0x510>)
    c510:	4293      	cmp	r3, r2
    c512:	dd07      	ble.n	c524 <_adc_set_config+0x3c0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    c514:	2317      	movs	r3, #23
    c516:	e0a8      	b.n	c66a <_adc_set_config+0x506>
			break;
    c518:	46c0      	nop			; (mov r8, r8)
    c51a:	e004      	b.n	c526 <_adc_set_config+0x3c2>
			break;
    c51c:	46c0      	nop			; (mov r8, r8)
    c51e:	e002      	b.n	c526 <_adc_set_config+0x3c2>
			break;
    c520:	46c0      	nop			; (mov r8, r8)
    c522:	e000      	b.n	c526 <_adc_set_config+0x3c2>
			}
			break;
    c524:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
    c526:	46c0      	nop			; (mov r8, r8)
    c528:	687b      	ldr	r3, [r7, #4]
    c52a:	0018      	movs	r0, r3
    c52c:	4b52      	ldr	r3, [pc, #328]	; (c678 <_adc_set_config+0x514>)
    c52e:	4798      	blx	r3
    c530:	1e03      	subs	r3, r0, #0
    c532:	d1f9      	bne.n	c528 <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
    c534:	683b      	ldr	r3, [r7, #0]
    c536:	7e1a      	ldrb	r2, [r3, #24]
    c538:	693b      	ldr	r3, [r7, #16]
    c53a:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
    c53c:	46c0      	nop			; (mov r8, r8)
    c53e:	687b      	ldr	r3, [r7, #4]
    c540:	0018      	movs	r0, r3
    c542:	4b4d      	ldr	r3, [pc, #308]	; (c678 <_adc_set_config+0x514>)
    c544:	4798      	blx	r3
    c546:	1e03      	subs	r3, r0, #0
    c548:	d1f9      	bne.n	c53e <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
    c54a:	683b      	ldr	r3, [r7, #0]
    c54c:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
    c54e:	b29a      	uxth	r2, r3
    c550:	693b      	ldr	r3, [r7, #16]
    c552:	839a      	strh	r2, [r3, #28]

	while (adc_is_syncing(module_inst)) {
    c554:	46c0      	nop			; (mov r8, r8)
    c556:	687b      	ldr	r3, [r7, #4]
    c558:	0018      	movs	r0, r3
    c55a:	4b47      	ldr	r3, [pc, #284]	; (c678 <_adc_set_config+0x514>)
    c55c:	4798      	blx	r3
    c55e:	1e03      	subs	r3, r0, #0
    c560:	d1f9      	bne.n	c556 <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
    c562:	683b      	ldr	r3, [r7, #0]
    c564:	6a1b      	ldr	r3, [r3, #32]
    c566:	b29a      	uxth	r2, r3
    c568:	693b      	ldr	r3, [r7, #16]
    c56a:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    c56c:	2314      	movs	r3, #20
    c56e:	18fb      	adds	r3, r7, r3
    c570:	683a      	ldr	r2, [r7, #0]
    c572:	212c      	movs	r1, #44	; 0x2c
    c574:	5c52      	ldrb	r2, [r2, r1]
    c576:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
    c578:	2314      	movs	r3, #20
    c57a:	18fb      	adds	r3, r7, r3
    c57c:	781b      	ldrb	r3, [r3, #0]
    c57e:	2b00      	cmp	r3, #0
    c580:	d006      	beq.n	c590 <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
    c582:	2314      	movs	r3, #20
    c584:	18fb      	adds	r3, r7, r3
    c586:	781a      	ldrb	r2, [r3, #0]
    c588:	2314      	movs	r3, #20
    c58a:	18fb      	adds	r3, r7, r3
    c58c:	3a01      	subs	r2, #1
    c58e:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    c590:	2314      	movs	r3, #20
    c592:	18fb      	adds	r3, r7, r3
    c594:	781b      	ldrb	r3, [r3, #0]
    c596:	2b0f      	cmp	r3, #15
    c598:	d804      	bhi.n	c5a4 <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    c59a:	683b      	ldr	r3, [r7, #0]
    c59c:	222b      	movs	r2, #43	; 0x2b
    c59e:	5c9b      	ldrb	r3, [r3, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    c5a0:	2b0f      	cmp	r3, #15
    c5a2:	d901      	bls.n	c5a8 <_adc_set_config+0x444>
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
    c5a4:	2317      	movs	r3, #23
    c5a6:	e060      	b.n	c66a <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
    c5a8:	46c0      	nop			; (mov r8, r8)
    c5aa:	687b      	ldr	r3, [r7, #4]
    c5ac:	0018      	movs	r0, r3
    c5ae:	4b32      	ldr	r3, [pc, #200]	; (c678 <_adc_set_config+0x514>)
    c5b0:	4798      	blx	r3
    c5b2:	1e03      	subs	r3, r0, #0
    c5b4:	d1f9      	bne.n	c5aa <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
    c5b6:	683b      	ldr	r3, [r7, #0]
    c5b8:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
    c5ba:	683a      	ldr	r2, [r7, #0]
    c5bc:	212b      	movs	r1, #43	; 0x2b
    c5be:	5c52      	ldrb	r2, [r2, r1]
    c5c0:	0512      	lsls	r2, r2, #20
			config->gain_factor |
    c5c2:	4313      	orrs	r3, r2
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    c5c4:	2214      	movs	r2, #20
    c5c6:	18ba      	adds	r2, r7, r2
    c5c8:	7812      	ldrb	r2, [r2, #0]
    c5ca:	0412      	lsls	r2, r2, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
    c5cc:	4313      	orrs	r3, r2
			config->negative_input |
    c5ce:	683a      	ldr	r2, [r7, #0]
    c5d0:	89d2      	ldrh	r2, [r2, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    c5d2:	4313      	orrs	r3, r2
			config->positive_input;
    c5d4:	683a      	ldr	r2, [r7, #0]
    c5d6:	7b12      	ldrb	r2, [r2, #12]
			config->negative_input |
    c5d8:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
    c5da:	693b      	ldr	r3, [r7, #16]
    c5dc:	611a      	str	r2, [r3, #16]

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
    c5de:	683b      	ldr	r3, [r7, #0]
    c5e0:	222a      	movs	r2, #42	; 0x2a
    c5e2:	5c9a      	ldrb	r2, [r3, r2]
    c5e4:	693b      	ldr	r3, [r7, #16]
    c5e6:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
    c5e8:	693b      	ldr	r3, [r7, #16]
    c5ea:	220f      	movs	r2, #15
    c5ec:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
    c5ee:	683b      	ldr	r3, [r7, #0]
    c5f0:	2224      	movs	r2, #36	; 0x24
    c5f2:	5c9b      	ldrb	r3, [r3, r2]
    c5f4:	2b00      	cmp	r3, #0
    c5f6:	d01e      	beq.n	c636 <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    c5f8:	683b      	ldr	r3, [r7, #0]
    c5fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    c5fc:	4a1f      	ldr	r2, [pc, #124]	; (c67c <_adc_set_config+0x518>)
    c5fe:	4293      	cmp	r3, r2
    c600:	d901      	bls.n	c606 <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
    c602:	2317      	movs	r3, #23
    c604:	e031      	b.n	c66a <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    c606:	683b      	ldr	r3, [r7, #0]
    c608:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    c60a:	693b      	ldr	r3, [r7, #16]
    c60c:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    c60e:	683b      	ldr	r3, [r7, #0]
    c610:	2228      	movs	r2, #40	; 0x28
    c612:	5e9b      	ldrsh	r3, [r3, r2]
    c614:	4a1a      	ldr	r2, [pc, #104]	; (c680 <_adc_set_config+0x51c>)
    c616:	4293      	cmp	r3, r2
    c618:	dc05      	bgt.n	c626 <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
    c61a:	683b      	ldr	r3, [r7, #0]
    c61c:	2228      	movs	r2, #40	; 0x28
    c61e:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
    c620:	4a18      	ldr	r2, [pc, #96]	; (c684 <_adc_set_config+0x520>)
    c622:	4293      	cmp	r3, r2
    c624:	da01      	bge.n	c62a <_adc_set_config+0x4c6>
			return STATUS_ERR_INVALID_ARG;
    c626:	2317      	movs	r3, #23
    c628:	e01f      	b.n	c66a <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    c62a:	683b      	ldr	r3, [r7, #0]
    c62c:	2228      	movs	r2, #40	; 0x28
    c62e:	5e9b      	ldrsh	r3, [r3, r2]
    c630:	b29a      	uxth	r2, r3
    c632:	693b      	ldr	r3, [r7, #16]
    c634:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
    c636:	4b14      	ldr	r3, [pc, #80]	; (c688 <_adc_set_config+0x524>)
    c638:	681b      	ldr	r3, [r3, #0]
    c63a:	08db      	lsrs	r3, r3, #3
    c63c:	b29b      	uxth	r3, r3
    c63e:	021b      	lsls	r3, r3, #8
    c640:	b29a      	uxth	r2, r3
    c642:	23e0      	movs	r3, #224	; 0xe0
    c644:	00db      	lsls	r3, r3, #3
    c646:	4013      	ands	r3, r2
    c648:	b29a      	uxth	r2, r3
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
    c64a:	4b10      	ldr	r3, [pc, #64]	; (c68c <_adc_set_config+0x528>)
    c64c:	685c      	ldr	r4, [r3, #4]
    c64e:	681b      	ldr	r3, [r3, #0]
    c650:	0161      	lsls	r1, r4, #5
    c652:	0edd      	lsrs	r5, r3, #27
    c654:	430d      	orrs	r5, r1
    c656:	0ee6      	lsrs	r6, r4, #27
    c658:	b2ab      	uxth	r3, r5
    c65a:	21ff      	movs	r1, #255	; 0xff
    c65c:	400b      	ands	r3, r1
    c65e:	b29b      	uxth	r3, r3
			) |
    c660:	4313      	orrs	r3, r2
    c662:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
    c664:	693b      	ldr	r3, [r7, #16]
    c666:	851a      	strh	r2, [r3, #40]	; 0x28
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
    c668:	2300      	movs	r3, #0
}
    c66a:	0018      	movs	r0, r3
    c66c:	46bd      	mov	sp, r7
    c66e:	b009      	add	sp, #36	; 0x24
    c670:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c672:	46c0      	nop			; (mov r8, r8)
    c674:	0000ffff 	.word	0x0000ffff
    c678:	0000c019 	.word	0x0000c019
    c67c:	00000fff 	.word	0x00000fff
    c680:	000007ff 	.word	0x000007ff
    c684:	fffff800 	.word	0xfffff800
    c688:	00806024 	.word	0x00806024
    c68c:	00806020 	.word	0x00806020

0000c690 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    c690:	b580      	push	{r7, lr}
    c692:	b086      	sub	sp, #24
    c694:	af00      	add	r7, sp, #0
    c696:	60f8      	str	r0, [r7, #12]
    c698:	60b9      	str	r1, [r7, #8]
    c69a:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    c69c:	68fb      	ldr	r3, [r7, #12]
    c69e:	68ba      	ldr	r2, [r7, #8]
    c6a0:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
    c6a2:	2380      	movs	r3, #128	; 0x80
    c6a4:	025b      	lsls	r3, r3, #9
    c6a6:	0019      	movs	r1, r3
    c6a8:	2002      	movs	r0, #2
    c6aa:	4b32      	ldr	r3, [pc, #200]	; (c774 <adc_init+0xe4>)
    c6ac:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    c6ae:	68bb      	ldr	r3, [r7, #8]
    c6b0:	781b      	ldrb	r3, [r3, #0]
    c6b2:	b2db      	uxtb	r3, r3
    c6b4:	001a      	movs	r2, r3
    c6b6:	2301      	movs	r3, #1
    c6b8:	4013      	ands	r3, r2
    c6ba:	d001      	beq.n	c6c0 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    c6bc:	2305      	movs	r3, #5
    c6be:	e055      	b.n	c76c <adc_init+0xdc>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    c6c0:	68bb      	ldr	r3, [r7, #8]
    c6c2:	781b      	ldrb	r3, [r3, #0]
    c6c4:	b2db      	uxtb	r3, r3
    c6c6:	001a      	movs	r2, r3
    c6c8:	2302      	movs	r3, #2
    c6ca:	4013      	ands	r3, r2
    c6cc:	d001      	beq.n	c6d2 <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    c6ce:	231c      	movs	r3, #28
    c6d0:	e04c      	b.n	c76c <adc_init+0xdc>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
    c6d2:	687b      	ldr	r3, [r7, #4]
    c6d4:	785a      	ldrb	r2, [r3, #1]
    c6d6:	68fb      	ldr	r3, [r7, #12]
    c6d8:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    c6da:	68fb      	ldr	r3, [r7, #12]
    c6dc:	791b      	ldrb	r3, [r3, #4]
    c6de:	2b00      	cmp	r3, #0
    c6e0:	d102      	bne.n	c6e8 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
    c6e2:	2001      	movs	r0, #1
    c6e4:	4b24      	ldr	r3, [pc, #144]	; (c778 <adc_init+0xe8>)
    c6e6:	4798      	blx	r3
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
    c6e8:	2317      	movs	r3, #23
    c6ea:	18fb      	adds	r3, r7, r3
    c6ec:	2200      	movs	r2, #0
    c6ee:	701a      	strb	r2, [r3, #0]
    c6f0:	e00e      	b.n	c710 <adc_init+0x80>
		module_inst->callback[i] = NULL;
    c6f2:	2317      	movs	r3, #23
    c6f4:	18fb      	adds	r3, r7, r3
    c6f6:	781a      	ldrb	r2, [r3, #0]
    c6f8:	68fb      	ldr	r3, [r7, #12]
    c6fa:	3202      	adds	r2, #2
    c6fc:	0092      	lsls	r2, r2, #2
    c6fe:	2100      	movs	r1, #0
    c700:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
    c702:	2317      	movs	r3, #23
    c704:	18fb      	adds	r3, r7, r3
    c706:	781a      	ldrb	r2, [r3, #0]
    c708:	2317      	movs	r3, #23
    c70a:	18fb      	adds	r3, r7, r3
    c70c:	3201      	adds	r2, #1
    c70e:	701a      	strb	r2, [r3, #0]
    c710:	2317      	movs	r3, #23
    c712:	18fb      	adds	r3, r7, r3
    c714:	781b      	ldrb	r3, [r3, #0]
    c716:	2b02      	cmp	r3, #2
    c718:	d9eb      	bls.n	c6f2 <adc_init+0x62>
	};

	module_inst->registered_callback_mask = 0;
    c71a:	68fb      	ldr	r3, [r7, #12]
    c71c:	2200      	movs	r2, #0
    c71e:	769a      	strb	r2, [r3, #26]
	module_inst->enabled_callback_mask = 0;
    c720:	68fb      	ldr	r3, [r7, #12]
    c722:	2200      	movs	r2, #0
    c724:	76da      	strb	r2, [r3, #27]
	module_inst->remaining_conversions = 0;
    c726:	68fb      	ldr	r3, [r7, #12]
    c728:	2200      	movs	r2, #0
    c72a:	831a      	strh	r2, [r3, #24]
	module_inst->job_status = STATUS_OK;
    c72c:	68fb      	ldr	r3, [r7, #12]
    c72e:	2200      	movs	r2, #0
    c730:	771a      	strb	r2, [r3, #28]

	_adc_instances[0] = module_inst;
    c732:	4b12      	ldr	r3, [pc, #72]	; (c77c <adc_init+0xec>)
    c734:	68fa      	ldr	r2, [r7, #12]
    c736:	601a      	str	r2, [r3, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    c738:	687b      	ldr	r3, [r7, #4]
    c73a:	222a      	movs	r2, #42	; 0x2a
    c73c:	5c9b      	ldrb	r3, [r3, r2]
    c73e:	2b00      	cmp	r3, #0
    c740:	d10a      	bne.n	c758 <adc_init+0xc8>
			!config->freerunning) {
    c742:	687b      	ldr	r3, [r7, #4]
    c744:	7d1b      	ldrb	r3, [r3, #20]
    c746:	2201      	movs	r2, #1
    c748:	4053      	eors	r3, r2
    c74a:	b2db      	uxtb	r3, r3
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    c74c:	2b00      	cmp	r3, #0
    c74e:	d003      	beq.n	c758 <adc_init+0xc8>
		module_inst->software_trigger = true;
    c750:	68fb      	ldr	r3, [r7, #12]
    c752:	2201      	movs	r2, #1
    c754:	775a      	strb	r2, [r3, #29]
    c756:	e002      	b.n	c75e <adc_init+0xce>
	} else {
		module_inst->software_trigger = false;
    c758:	68fb      	ldr	r3, [r7, #12]
    c75a:	2200      	movs	r2, #0
    c75c:	775a      	strb	r2, [r3, #29]
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
    c75e:	687a      	ldr	r2, [r7, #4]
    c760:	68fb      	ldr	r3, [r7, #12]
    c762:	0011      	movs	r1, r2
    c764:	0018      	movs	r0, r3
    c766:	4b06      	ldr	r3, [pc, #24]	; (c780 <adc_init+0xf0>)
    c768:	4798      	blx	r3
    c76a:	0003      	movs	r3, r0
}
    c76c:	0018      	movs	r0, r3
    c76e:	46bd      	mov	sp, r7
    c770:	b006      	add	sp, #24
    c772:	bd80      	pop	{r7, pc}
    c774:	0000bf55 	.word	0x0000bf55
    c778:	0000bfd9 	.word	0x0000bfd9
    c77c:	20000840 	.word	0x20000840
    c780:	0000c165 	.word	0x0000c165

0000c784 <adc_is_syncing>:
{
    c784:	b580      	push	{r7, lr}
    c786:	b084      	sub	sp, #16
    c788:	af00      	add	r7, sp, #0
    c78a:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    c78c:	687b      	ldr	r3, [r7, #4]
    c78e:	681b      	ldr	r3, [r3, #0]
    c790:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    c792:	68fb      	ldr	r3, [r7, #12]
    c794:	7e5b      	ldrb	r3, [r3, #25]
    c796:	b2db      	uxtb	r3, r3
    c798:	b25b      	sxtb	r3, r3
    c79a:	2b00      	cmp	r3, #0
    c79c:	da01      	bge.n	c7a2 <adc_is_syncing+0x1e>
		return true;
    c79e:	2301      	movs	r3, #1
    c7a0:	e000      	b.n	c7a4 <adc_is_syncing+0x20>
	return false;
    c7a2:	2300      	movs	r3, #0
}
    c7a4:	0018      	movs	r0, r3
    c7a6:	46bd      	mov	sp, r7
    c7a8:	b004      	add	sp, #16
    c7aa:	bd80      	pop	{r7, pc}

0000c7ac <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    c7ac:	b580      	push	{r7, lr}
    c7ae:	b084      	sub	sp, #16
    c7b0:	af00      	add	r7, sp, #0
    c7b2:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    c7b4:	687b      	ldr	r3, [r7, #4]
    c7b6:	681b      	ldr	r3, [r3, #0]
    c7b8:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    c7ba:	46c0      	nop			; (mov r8, r8)
    c7bc:	687b      	ldr	r3, [r7, #4]
    c7be:	0018      	movs	r0, r3
    c7c0:	4b0b      	ldr	r3, [pc, #44]	; (c7f0 <adc_start_conversion+0x44>)
    c7c2:	4798      	blx	r3
    c7c4:	1e03      	subs	r3, r0, #0
    c7c6:	d1f9      	bne.n	c7bc <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    c7c8:	68fb      	ldr	r3, [r7, #12]
    c7ca:	7b1b      	ldrb	r3, [r3, #12]
    c7cc:	b2db      	uxtb	r3, r3
    c7ce:	2202      	movs	r2, #2
    c7d0:	4313      	orrs	r3, r2
    c7d2:	b2da      	uxtb	r2, r3
    c7d4:	68fb      	ldr	r3, [r7, #12]
    c7d6:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    c7d8:	46c0      	nop			; (mov r8, r8)
    c7da:	687b      	ldr	r3, [r7, #4]
    c7dc:	0018      	movs	r0, r3
    c7de:	4b04      	ldr	r3, [pc, #16]	; (c7f0 <adc_start_conversion+0x44>)
    c7e0:	4798      	blx	r3
    c7e2:	1e03      	subs	r3, r0, #0
    c7e4:	d1f9      	bne.n	c7da <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    c7e6:	46c0      	nop			; (mov r8, r8)
    c7e8:	46bd      	mov	sp, r7
    c7ea:	b004      	add	sp, #16
    c7ec:	bd80      	pop	{r7, pc}
    c7ee:	46c0      	nop			; (mov r8, r8)
    c7f0:	0000c785 	.word	0x0000c785

0000c7f4 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
    c7f4:	b580      	push	{r7, lr}
    c7f6:	b084      	sub	sp, #16
    c7f8:	af00      	add	r7, sp, #0
    c7fa:	6078      	str	r0, [r7, #4]
    c7fc:	000a      	movs	r2, r1
    c7fe:	1cfb      	adds	r3, r7, #3
    c800:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    c802:	687b      	ldr	r3, [r7, #4]
    c804:	681b      	ldr	r3, [r3, #0]
    c806:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    c808:	68fb      	ldr	r3, [r7, #12]
    c80a:	1cfa      	adds	r2, r7, #3
    c80c:	7812      	ldrb	r2, [r2, #0]
    c80e:	759a      	strb	r2, [r3, #22]
}
    c810:	46c0      	nop			; (mov r8, r8)
    c812:	46bd      	mov	sp, r7
    c814:	b004      	add	sp, #16
    c816:	bd80      	pop	{r7, pc}

0000c818 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
    c818:	b580      	push	{r7, lr}
    c81a:	b084      	sub	sp, #16
    c81c:	af00      	add	r7, sp, #0
    c81e:	0002      	movs	r2, r0
    c820:	1dfb      	adds	r3, r7, #7
    c822:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
    c824:	1dfb      	adds	r3, r7, #7
    c826:	781a      	ldrb	r2, [r3, #0]
    c828:	4b47      	ldr	r3, [pc, #284]	; (c948 <_adc_interrupt_handler+0x130>)
    c82a:	0092      	lsls	r2, r2, #2
    c82c:	58d3      	ldr	r3, [r2, r3]
    c82e:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
    c830:	68fb      	ldr	r3, [r7, #12]
    c832:	681b      	ldr	r3, [r3, #0]
    c834:	7e1b      	ldrb	r3, [r3, #24]
    c836:	b2da      	uxtb	r2, r3
    c838:	68fb      	ldr	r3, [r7, #12]
    c83a:	681b      	ldr	r3, [r3, #0]
    c83c:	7ddb      	ldrb	r3, [r3, #23]
    c83e:	b2db      	uxtb	r3, r3
    c840:	4013      	ands	r3, r2
    c842:	b2db      	uxtb	r3, r3
    c844:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
    c846:	68bb      	ldr	r3, [r7, #8]
    c848:	2201      	movs	r2, #1
    c84a:	4013      	ands	r3, r2
    c84c:	d045      	beq.n	c8da <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    c84e:	68fb      	ldr	r3, [r7, #12]
    c850:	681b      	ldr	r3, [r3, #0]
    c852:	2201      	movs	r2, #1
    c854:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
    c856:	46c0      	nop			; (mov r8, r8)
    c858:	68fb      	ldr	r3, [r7, #12]
    c85a:	0018      	movs	r0, r3
    c85c:	4b3b      	ldr	r3, [pc, #236]	; (c94c <_adc_interrupt_handler+0x134>)
    c85e:	4798      	blx	r3
    c860:	1e03      	subs	r3, r0, #0
    c862:	d1f9      	bne.n	c858 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
    c864:	68fb      	ldr	r3, [r7, #12]
    c866:	695b      	ldr	r3, [r3, #20]
    c868:	1c99      	adds	r1, r3, #2
    c86a:	68fa      	ldr	r2, [r7, #12]
    c86c:	6151      	str	r1, [r2, #20]
    c86e:	68fa      	ldr	r2, [r7, #12]
    c870:	6812      	ldr	r2, [r2, #0]
    c872:	8b52      	ldrh	r2, [r2, #26]
    c874:	b292      	uxth	r2, r2
    c876:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
    c878:	68fb      	ldr	r3, [r7, #12]
    c87a:	8b1b      	ldrh	r3, [r3, #24]
    c87c:	b29b      	uxth	r3, r3
    c87e:	3b01      	subs	r3, #1
    c880:	b29b      	uxth	r3, r3
    c882:	68fa      	ldr	r2, [r7, #12]
    c884:	1c19      	adds	r1, r3, #0
    c886:	8311      	strh	r1, [r2, #24]
    c888:	2b00      	cmp	r3, #0
    c88a:	d008      	beq.n	c89e <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
    c88c:	68fb      	ldr	r3, [r7, #12]
    c88e:	7f5b      	ldrb	r3, [r3, #29]
    c890:	2b00      	cmp	r3, #0
    c892:	d022      	beq.n	c8da <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
    c894:	68fb      	ldr	r3, [r7, #12]
    c896:	0018      	movs	r0, r3
    c898:	4b2d      	ldr	r3, [pc, #180]	; (c950 <_adc_interrupt_handler+0x138>)
    c89a:	4798      	blx	r3
    c89c:	e01d      	b.n	c8da <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
    c89e:	68fb      	ldr	r3, [r7, #12]
    c8a0:	2101      	movs	r1, #1
    c8a2:	0018      	movs	r0, r3
    c8a4:	4b2b      	ldr	r3, [pc, #172]	; (c954 <_adc_interrupt_handler+0x13c>)
    c8a6:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
    c8a8:	68fb      	ldr	r3, [r7, #12]
    c8aa:	7f1b      	ldrb	r3, [r3, #28]
    c8ac:	b2db      	uxtb	r3, r3
    c8ae:	2b05      	cmp	r3, #5
    c8b0:	d113      	bne.n	c8da <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
    c8b2:	68fb      	ldr	r3, [r7, #12]
    c8b4:	2200      	movs	r2, #0
    c8b6:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
    c8b8:	68fb      	ldr	r3, [r7, #12]
    c8ba:	7edb      	ldrb	r3, [r3, #27]
    c8bc:	001a      	movs	r2, r3
    c8be:	2301      	movs	r3, #1
    c8c0:	4013      	ands	r3, r2
    c8c2:	d00a      	beq.n	c8da <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
    c8c4:	68fb      	ldr	r3, [r7, #12]
    c8c6:	7e9b      	ldrb	r3, [r3, #26]
    c8c8:	001a      	movs	r2, r3
    c8ca:	2301      	movs	r3, #1
    c8cc:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
    c8ce:	d004      	beq.n	c8da <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    c8d0:	68fb      	ldr	r3, [r7, #12]
    c8d2:	689b      	ldr	r3, [r3, #8]
    c8d4:	68fa      	ldr	r2, [r7, #12]
    c8d6:	0010      	movs	r0, r2
    c8d8:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
    c8da:	68bb      	ldr	r3, [r7, #8]
    c8dc:	2204      	movs	r2, #4
    c8de:	4013      	ands	r3, r2
    c8e0:	d014      	beq.n	c90c <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    c8e2:	68fb      	ldr	r3, [r7, #12]
    c8e4:	681b      	ldr	r3, [r3, #0]
    c8e6:	2204      	movs	r2, #4
    c8e8:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    c8ea:	68fb      	ldr	r3, [r7, #12]
    c8ec:	7edb      	ldrb	r3, [r3, #27]
    c8ee:	001a      	movs	r2, r3
    c8f0:	2302      	movs	r3, #2
    c8f2:	4013      	ands	r3, r2
    c8f4:	d00a      	beq.n	c90c <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
    c8f6:	68fb      	ldr	r3, [r7, #12]
    c8f8:	7e9b      	ldrb	r3, [r3, #26]
    c8fa:	001a      	movs	r2, r3
    c8fc:	2302      	movs	r3, #2
    c8fe:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    c900:	d004      	beq.n	c90c <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    c902:	68fb      	ldr	r3, [r7, #12]
    c904:	68db      	ldr	r3, [r3, #12]
    c906:	68fa      	ldr	r2, [r7, #12]
    c908:	0010      	movs	r0, r2
    c90a:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
    c90c:	68bb      	ldr	r3, [r7, #8]
    c90e:	2202      	movs	r2, #2
    c910:	4013      	ands	r3, r2
    c912:	d014      	beq.n	c93e <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    c914:	68fb      	ldr	r3, [r7, #12]
    c916:	681b      	ldr	r3, [r3, #0]
    c918:	2202      	movs	r2, #2
    c91a:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    c91c:	68fb      	ldr	r3, [r7, #12]
    c91e:	7edb      	ldrb	r3, [r3, #27]
    c920:	001a      	movs	r2, r3
    c922:	2304      	movs	r3, #4
    c924:	4013      	ands	r3, r2
    c926:	d00a      	beq.n	c93e <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
    c928:	68fb      	ldr	r3, [r7, #12]
    c92a:	7e9b      	ldrb	r3, [r3, #26]
    c92c:	001a      	movs	r2, r3
    c92e:	2304      	movs	r3, #4
    c930:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    c932:	d004      	beq.n	c93e <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    c934:	68fb      	ldr	r3, [r7, #12]
    c936:	691b      	ldr	r3, [r3, #16]
    c938:	68fa      	ldr	r2, [r7, #12]
    c93a:	0010      	movs	r0, r2
    c93c:	4798      	blx	r3
		}
	}
}
    c93e:	46c0      	nop			; (mov r8, r8)
    c940:	46bd      	mov	sp, r7
    c942:	b004      	add	sp, #16
    c944:	bd80      	pop	{r7, pc}
    c946:	46c0      	nop			; (mov r8, r8)
    c948:	20000840 	.word	0x20000840
    c94c:	0000c785 	.word	0x0000c785
    c950:	0000c7ad 	.word	0x0000c7ad
    c954:	0000c7f5 	.word	0x0000c7f5

0000c958 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    c958:	b580      	push	{r7, lr}
    c95a:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
    c95c:	2000      	movs	r0, #0
    c95e:	4b02      	ldr	r3, [pc, #8]	; (c968 <ADC_Handler+0x10>)
    c960:	4798      	blx	r3
}
    c962:	46c0      	nop			; (mov r8, r8)
    c964:	46bd      	mov	sp, r7
    c966:	bd80      	pop	{r7, pc}
    c968:	0000c819 	.word	0x0000c819

0000c96c <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    c96c:	b580      	push	{r7, lr}
    c96e:	b082      	sub	sp, #8
    c970:	af00      	add	r7, sp, #0
    c972:	0002      	movs	r2, r0
    c974:	1dfb      	adds	r3, r7, #7
    c976:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    c978:	4a07      	ldr	r2, [pc, #28]	; (c998 <system_interrupt_disable+0x2c>)
    c97a:	1dfb      	adds	r3, r7, #7
    c97c:	781b      	ldrb	r3, [r3, #0]
    c97e:	0019      	movs	r1, r3
    c980:	231f      	movs	r3, #31
    c982:	400b      	ands	r3, r1
    c984:	2101      	movs	r1, #1
    c986:	4099      	lsls	r1, r3
    c988:	000b      	movs	r3, r1
    c98a:	0019      	movs	r1, r3
    c98c:	2380      	movs	r3, #128	; 0x80
    c98e:	50d1      	str	r1, [r2, r3]
}
    c990:	46c0      	nop			; (mov r8, r8)
    c992:	46bd      	mov	sp, r7
    c994:	b002      	add	sp, #8
    c996:	bd80      	pop	{r7, pc}
    c998:	e000e100 	.word	0xe000e100

0000c99c <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
    c99c:	b580      	push	{r7, lr}
    c99e:	b084      	sub	sp, #16
    c9a0:	af00      	add	r7, sp, #0
    c9a2:	0002      	movs	r2, r0
    c9a4:	1dfb      	adds	r3, r7, #7
    c9a6:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
    c9a8:	1dfb      	adds	r3, r7, #7
    c9aa:	781a      	ldrb	r2, [r3, #0]
    c9ac:	4b37      	ldr	r3, [pc, #220]	; (ca8c <_dac_interrupt_handler+0xf0>)
    c9ae:	0092      	lsls	r2, r2, #2
    c9b0:	58d3      	ldr	r3, [r2, r3]
    c9b2:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
    c9b4:	68fb      	ldr	r3, [r7, #12]
    c9b6:	681b      	ldr	r3, [r3, #0]
    c9b8:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
    c9ba:	68bb      	ldr	r3, [r7, #8]
    c9bc:	799b      	ldrb	r3, [r3, #6]
    c9be:	b2db      	uxtb	r3, r3
    c9c0:	001a      	movs	r2, r3
    c9c2:	2301      	movs	r3, #1
    c9c4:	4013      	ands	r3, r2
    c9c6:	d00e      	beq.n	c9e6 <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
    c9c8:	68bb      	ldr	r3, [r7, #8]
    c9ca:	2201      	movs	r2, #1
    c9cc:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
    c9ce:	68fb      	ldr	r3, [r7, #12]
    c9d0:	3314      	adds	r3, #20
    c9d2:	2b00      	cmp	r3, #0
    c9d4:	d007      	beq.n	c9e6 <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
    c9d6:	68fb      	ldr	r3, [r7, #12]
    c9d8:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
    c9da:	2b00      	cmp	r3, #0
    c9dc:	d003      	beq.n	c9e6 <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
    c9de:	68fb      	ldr	r3, [r7, #12]
    c9e0:	699b      	ldr	r3, [r3, #24]
    c9e2:	2000      	movs	r0, #0
    c9e4:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
    c9e6:	68bb      	ldr	r3, [r7, #8]
    c9e8:	799b      	ldrb	r3, [r3, #6]
    c9ea:	b2db      	uxtb	r3, r3
    c9ec:	001a      	movs	r2, r3
    c9ee:	2302      	movs	r3, #2
    c9f0:	4013      	ands	r3, r2
    c9f2:	d047      	beq.n	ca84 <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
    c9f4:	68bb      	ldr	r3, [r7, #8]
    c9f6:	2202      	movs	r2, #2
    c9f8:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
    c9fa:	68fb      	ldr	r3, [r7, #12]
    c9fc:	899b      	ldrh	r3, [r3, #12]
    c9fe:	b29b      	uxth	r3, r3
    ca00:	2b00      	cmp	r3, #0
    ca02:	d033      	beq.n	ca6c <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
    ca04:	68fb      	ldr	r3, [r7, #12]
    ca06:	689a      	ldr	r2, [r3, #8]
    ca08:	68fb      	ldr	r3, [r7, #12]
    ca0a:	89db      	ldrh	r3, [r3, #14]
    ca0c:	b29b      	uxth	r3, r3
    ca0e:	1c59      	adds	r1, r3, #1
    ca10:	b288      	uxth	r0, r1
    ca12:	68f9      	ldr	r1, [r7, #12]
    ca14:	81c8      	strh	r0, [r1, #14]
    ca16:	005b      	lsls	r3, r3, #1
    ca18:	18d3      	adds	r3, r2, r3
    ca1a:	881b      	ldrh	r3, [r3, #0]
    ca1c:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
    ca1e:	68bb      	ldr	r3, [r7, #8]
    ca20:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
    ca22:	68fb      	ldr	r3, [r7, #12]
    ca24:	899b      	ldrh	r3, [r3, #12]
    ca26:	b29b      	uxth	r3, r3
    ca28:	3b01      	subs	r3, #1
    ca2a:	b29a      	uxth	r2, r3
    ca2c:	68fb      	ldr	r3, [r7, #12]
    ca2e:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
    ca30:	68fb      	ldr	r3, [r7, #12]
    ca32:	899b      	ldrh	r3, [r3, #12]
    ca34:	b29b      	uxth	r3, r3
    ca36:	2b00      	cmp	r3, #0
    ca38:	d118      	bne.n	ca6c <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
    ca3a:	68fb      	ldr	r3, [r7, #12]
    ca3c:	2220      	movs	r2, #32
    ca3e:	2100      	movs	r1, #0
    ca40:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
    ca42:	68bb      	ldr	r3, [r7, #8]
    ca44:	2202      	movs	r2, #2
    ca46:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
    ca48:	68bb      	ldr	r3, [r7, #8]
    ca4a:	2202      	movs	r2, #2
    ca4c:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
    ca4e:	2019      	movs	r0, #25
    ca50:	4b0f      	ldr	r3, [pc, #60]	; (ca90 <_dac_interrupt_handler+0xf4>)
    ca52:	4798      	blx	r3

				if ((module->callback) &&
    ca54:	68fb      	ldr	r3, [r7, #12]
    ca56:	3314      	adds	r3, #20
    ca58:	2b00      	cmp	r3, #0
    ca5a:	d007      	beq.n	ca6c <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
    ca5c:	68fb      	ldr	r3, [r7, #12]
    ca5e:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
    ca60:	2b00      	cmp	r3, #0
    ca62:	d003      	beq.n	ca6c <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
    ca64:	68fb      	ldr	r3, [r7, #12]
    ca66:	69db      	ldr	r3, [r3, #28]
    ca68:	2000      	movs	r0, #0
    ca6a:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
    ca6c:	68fb      	ldr	r3, [r7, #12]
    ca6e:	3314      	adds	r3, #20
    ca70:	2b00      	cmp	r3, #0
    ca72:	d007      	beq.n	ca84 <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
    ca74:	68fb      	ldr	r3, [r7, #12]
    ca76:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
    ca78:	2b00      	cmp	r3, #0
    ca7a:	d003      	beq.n	ca84 <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
    ca7c:	68fb      	ldr	r3, [r7, #12]
    ca7e:	695b      	ldr	r3, [r3, #20]
    ca80:	2000      	movs	r0, #0
    ca82:	4798      	blx	r3
		}
	}
}
    ca84:	46c0      	nop			; (mov r8, r8)
    ca86:	46bd      	mov	sp, r7
    ca88:	b004      	add	sp, #16
    ca8a:	bd80      	pop	{r7, pc}
    ca8c:	20000844 	.word	0x20000844
    ca90:	0000c96d 	.word	0x0000c96d

0000ca94 <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
    ca94:	b580      	push	{r7, lr}
    ca96:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
    ca98:	2000      	movs	r0, #0
    ca9a:	4b02      	ldr	r3, [pc, #8]	; (caa4 <DAC_Handler+0x10>)
    ca9c:	4798      	blx	r3
}
    ca9e:	46c0      	nop			; (mov r8, r8)
    caa0:	46bd      	mov	sp, r7
    caa2:	bd80      	pop	{r7, pc}
    caa4:	0000c99d 	.word	0x0000c99d

0000caa8 <system_interrupt_enter_critical_section>:
{
    caa8:	b580      	push	{r7, lr}
    caaa:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    caac:	4b02      	ldr	r3, [pc, #8]	; (cab8 <system_interrupt_enter_critical_section+0x10>)
    caae:	4798      	blx	r3
}
    cab0:	46c0      	nop			; (mov r8, r8)
    cab2:	46bd      	mov	sp, r7
    cab4:	bd80      	pop	{r7, pc}
    cab6:	46c0      	nop			; (mov r8, r8)
    cab8:	000129f5 	.word	0x000129f5

0000cabc <system_interrupt_leave_critical_section>:
{
    cabc:	b580      	push	{r7, lr}
    cabe:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    cac0:	4b02      	ldr	r3, [pc, #8]	; (cacc <system_interrupt_leave_critical_section+0x10>)
    cac2:	4798      	blx	r3
}
    cac4:	46c0      	nop			; (mov r8, r8)
    cac6:	46bd      	mov	sp, r7
    cac8:	bd80      	pop	{r7, pc}
    caca:	46c0      	nop			; (mov r8, r8)
    cacc:	00012a49 	.word	0x00012a49

0000cad0 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
    cad0:	b580      	push	{r7, lr}
    cad2:	b086      	sub	sp, #24
    cad4:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
    cad6:	4b49      	ldr	r3, [pc, #292]	; (cbfc <DMAC_Handler+0x12c>)
    cad8:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
    cada:	4b49      	ldr	r3, [pc, #292]	; (cc00 <DMAC_Handler+0x130>)
    cadc:	8c1b      	ldrh	r3, [r3, #32]
    cade:	b29b      	uxth	r3, r3
    cae0:	b2da      	uxtb	r2, r3
    cae2:	2317      	movs	r3, #23
    cae4:	18fb      	adds	r3, r7, r3
    cae6:	210f      	movs	r1, #15
    cae8:	400a      	ands	r2, r1
    caea:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
    caec:	2317      	movs	r3, #23
    caee:	18fb      	adds	r3, r7, r3
    caf0:	781a      	ldrb	r2, [r3, #0]
    caf2:	4b44      	ldr	r3, [pc, #272]	; (cc04 <DMAC_Handler+0x134>)
    caf4:	0092      	lsls	r2, r2, #2
    caf6:	58d3      	ldr	r3, [r2, r3]
    caf8:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    cafa:	4a41      	ldr	r2, [pc, #260]	; (cc00 <DMAC_Handler+0x130>)
    cafc:	693b      	ldr	r3, [r7, #16]
    cafe:	781b      	ldrb	r3, [r3, #0]
    cb00:	210f      	movs	r1, #15
    cb02:	400b      	ands	r3, r1
    cb04:	b2d9      	uxtb	r1, r3
    cb06:	233f      	movs	r3, #63	; 0x3f
    cb08:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
    cb0a:	493d      	ldr	r1, [pc, #244]	; (cc00 <DMAC_Handler+0x130>)
    cb0c:	230f      	movs	r3, #15
    cb0e:	18fb      	adds	r3, r7, r3
    cb10:	224e      	movs	r2, #78	; 0x4e
    cb12:	5c8a      	ldrb	r2, [r1, r2]
    cb14:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
    cb16:	693b      	ldr	r3, [r7, #16]
    cb18:	781b      	ldrb	r3, [r3, #0]
    cb1a:	4a3b      	ldr	r2, [pc, #236]	; (cc08 <DMAC_Handler+0x138>)
    cb1c:	011b      	lsls	r3, r3, #4
    cb1e:	18d3      	adds	r3, r2, r3
    cb20:	3302      	adds	r3, #2
    cb22:	881b      	ldrh	r3, [r3, #0]
    cb24:	b29b      	uxth	r3, r3
    cb26:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
    cb28:	693b      	ldr	r3, [r7, #16]
    cb2a:	781b      	ldrb	r3, [r3, #0]
    cb2c:	4a37      	ldr	r2, [pc, #220]	; (cc0c <DMAC_Handler+0x13c>)
    cb2e:	011b      	lsls	r3, r3, #4
    cb30:	18d3      	adds	r3, r2, r3
    cb32:	3302      	adds	r3, #2
    cb34:	881b      	ldrh	r3, [r3, #0]
    cb36:	b29b      	uxth	r3, r3
    cb38:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
    cb3a:	68ba      	ldr	r2, [r7, #8]
    cb3c:	687b      	ldr	r3, [r7, #4]
    cb3e:	1ad2      	subs	r2, r2, r3
    cb40:	693b      	ldr	r3, [r7, #16]
    cb42:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
    cb44:	230f      	movs	r3, #15
    cb46:	18fb      	adds	r3, r7, r3
    cb48:	781b      	ldrb	r3, [r3, #0]
    cb4a:	2201      	movs	r2, #1
    cb4c:	4013      	ands	r3, r2
    cb4e:	d016      	beq.n	cb7e <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
    cb50:	4a2b      	ldr	r2, [pc, #172]	; (cc00 <DMAC_Handler+0x130>)
    cb52:	234e      	movs	r3, #78	; 0x4e
    cb54:	2101      	movs	r1, #1
    cb56:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
    cb58:	693b      	ldr	r3, [r7, #16]
    cb5a:	2210      	movs	r2, #16
    cb5c:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    cb5e:	693b      	ldr	r3, [r7, #16]
    cb60:	7c1b      	ldrb	r3, [r3, #16]
    cb62:	001a      	movs	r2, r3
    cb64:	2301      	movs	r3, #1
    cb66:	4013      	ands	r3, r2
    cb68:	d042      	beq.n	cbf0 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
    cb6a:	693b      	ldr	r3, [r7, #16]
    cb6c:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    cb6e:	2b00      	cmp	r3, #0
    cb70:	d03e      	beq.n	cbf0 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
    cb72:	693b      	ldr	r3, [r7, #16]
    cb74:	685b      	ldr	r3, [r3, #4]
    cb76:	693a      	ldr	r2, [r7, #16]
    cb78:	0010      	movs	r0, r2
    cb7a:	4798      	blx	r3
    cb7c:	e038      	b.n	cbf0 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
    cb7e:	230f      	movs	r3, #15
    cb80:	18fb      	adds	r3, r7, r3
    cb82:	781b      	ldrb	r3, [r3, #0]
    cb84:	2202      	movs	r2, #2
    cb86:	4013      	ands	r3, r2
    cb88:	d016      	beq.n	cbb8 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
    cb8a:	4a1d      	ldr	r2, [pc, #116]	; (cc00 <DMAC_Handler+0x130>)
    cb8c:	234e      	movs	r3, #78	; 0x4e
    cb8e:	2102      	movs	r1, #2
    cb90:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
    cb92:	693b      	ldr	r3, [r7, #16]
    cb94:	2200      	movs	r2, #0
    cb96:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    cb98:	693b      	ldr	r3, [r7, #16]
    cb9a:	7c1b      	ldrb	r3, [r3, #16]
    cb9c:	001a      	movs	r2, r3
    cb9e:	2302      	movs	r3, #2
    cba0:	4013      	ands	r3, r2
    cba2:	d025      	beq.n	cbf0 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
    cba4:	693b      	ldr	r3, [r7, #16]
    cba6:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    cba8:	2b00      	cmp	r3, #0
    cbaa:	d021      	beq.n	cbf0 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
    cbac:	693b      	ldr	r3, [r7, #16]
    cbae:	689b      	ldr	r3, [r3, #8]
    cbb0:	693a      	ldr	r2, [r7, #16]
    cbb2:	0010      	movs	r0, r2
    cbb4:	4798      	blx	r3
    cbb6:	e01b      	b.n	cbf0 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
    cbb8:	230f      	movs	r3, #15
    cbba:	18fb      	adds	r3, r7, r3
    cbbc:	781b      	ldrb	r3, [r3, #0]
    cbbe:	2204      	movs	r2, #4
    cbc0:	4013      	ands	r3, r2
    cbc2:	d015      	beq.n	cbf0 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
    cbc4:	4a0e      	ldr	r2, [pc, #56]	; (cc00 <DMAC_Handler+0x130>)
    cbc6:	234e      	movs	r3, #78	; 0x4e
    cbc8:	2104      	movs	r1, #4
    cbca:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
    cbcc:	693b      	ldr	r3, [r7, #16]
    cbce:	2206      	movs	r2, #6
    cbd0:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    cbd2:	693b      	ldr	r3, [r7, #16]
    cbd4:	7c1b      	ldrb	r3, [r3, #16]
    cbd6:	001a      	movs	r2, r3
    cbd8:	2304      	movs	r3, #4
    cbda:	4013      	ands	r3, r2
    cbdc:	d008      	beq.n	cbf0 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
    cbde:	693b      	ldr	r3, [r7, #16]
    cbe0:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    cbe2:	2b00      	cmp	r3, #0
    cbe4:	d004      	beq.n	cbf0 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
    cbe6:	693b      	ldr	r3, [r7, #16]
    cbe8:	68db      	ldr	r3, [r3, #12]
    cbea:	693a      	ldr	r2, [r7, #16]
    cbec:	0010      	movs	r0, r2
    cbee:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
    cbf0:	4b07      	ldr	r3, [pc, #28]	; (cc10 <DMAC_Handler+0x140>)
    cbf2:	4798      	blx	r3
}
    cbf4:	46c0      	nop			; (mov r8, r8)
    cbf6:	46bd      	mov	sp, r7
    cbf8:	b006      	add	sp, #24
    cbfa:	bd80      	pop	{r7, pc}
    cbfc:	0000caa9 	.word	0x0000caa9
    cc00:	41004800 	.word	0x41004800
    cc04:	20000290 	.word	0x20000290
    cc08:	20000850 	.word	0x20000850
    cc0c:	20000240 	.word	0x20000240
    cc10:	0000cabd 	.word	0x0000cabd

0000cc14 <system_gclk_chan_get_config_defaults>:
{
    cc14:	b580      	push	{r7, lr}
    cc16:	b082      	sub	sp, #8
    cc18:	af00      	add	r7, sp, #0
    cc1a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    cc1c:	687b      	ldr	r3, [r7, #4]
    cc1e:	2200      	movs	r2, #0
    cc20:	701a      	strb	r2, [r3, #0]
}
    cc22:	46c0      	nop			; (mov r8, r8)
    cc24:	46bd      	mov	sp, r7
    cc26:	b002      	add	sp, #8
    cc28:	bd80      	pop	{r7, pc}
	...

0000cc2c <system_apb_clock_set_mask>:
{
    cc2c:	b580      	push	{r7, lr}
    cc2e:	b082      	sub	sp, #8
    cc30:	af00      	add	r7, sp, #0
    cc32:	0002      	movs	r2, r0
    cc34:	6039      	str	r1, [r7, #0]
    cc36:	1dfb      	adds	r3, r7, #7
    cc38:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    cc3a:	1dfb      	adds	r3, r7, #7
    cc3c:	781b      	ldrb	r3, [r3, #0]
    cc3e:	2b01      	cmp	r3, #1
    cc40:	d00a      	beq.n	cc58 <system_apb_clock_set_mask+0x2c>
    cc42:	2b02      	cmp	r3, #2
    cc44:	d00f      	beq.n	cc66 <system_apb_clock_set_mask+0x3a>
    cc46:	2b00      	cmp	r3, #0
    cc48:	d114      	bne.n	cc74 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    cc4a:	4b0e      	ldr	r3, [pc, #56]	; (cc84 <system_apb_clock_set_mask+0x58>)
    cc4c:	4a0d      	ldr	r2, [pc, #52]	; (cc84 <system_apb_clock_set_mask+0x58>)
    cc4e:	6991      	ldr	r1, [r2, #24]
    cc50:	683a      	ldr	r2, [r7, #0]
    cc52:	430a      	orrs	r2, r1
    cc54:	619a      	str	r2, [r3, #24]
			break;
    cc56:	e00f      	b.n	cc78 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    cc58:	4b0a      	ldr	r3, [pc, #40]	; (cc84 <system_apb_clock_set_mask+0x58>)
    cc5a:	4a0a      	ldr	r2, [pc, #40]	; (cc84 <system_apb_clock_set_mask+0x58>)
    cc5c:	69d1      	ldr	r1, [r2, #28]
    cc5e:	683a      	ldr	r2, [r7, #0]
    cc60:	430a      	orrs	r2, r1
    cc62:	61da      	str	r2, [r3, #28]
			break;
    cc64:	e008      	b.n	cc78 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    cc66:	4b07      	ldr	r3, [pc, #28]	; (cc84 <system_apb_clock_set_mask+0x58>)
    cc68:	4a06      	ldr	r2, [pc, #24]	; (cc84 <system_apb_clock_set_mask+0x58>)
    cc6a:	6a11      	ldr	r1, [r2, #32]
    cc6c:	683a      	ldr	r2, [r7, #0]
    cc6e:	430a      	orrs	r2, r1
    cc70:	621a      	str	r2, [r3, #32]
			break;
    cc72:	e001      	b.n	cc78 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    cc74:	2317      	movs	r3, #23
    cc76:	e000      	b.n	cc7a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    cc78:	2300      	movs	r3, #0
}
    cc7a:	0018      	movs	r0, r3
    cc7c:	46bd      	mov	sp, r7
    cc7e:	b002      	add	sp, #8
    cc80:	bd80      	pop	{r7, pc}
    cc82:	46c0      	nop			; (mov r8, r8)
    cc84:	40000400 	.word	0x40000400

0000cc88 <system_pinmux_get_config_defaults>:
{
    cc88:	b580      	push	{r7, lr}
    cc8a:	b082      	sub	sp, #8
    cc8c:	af00      	add	r7, sp, #0
    cc8e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    cc90:	687b      	ldr	r3, [r7, #4]
    cc92:	2280      	movs	r2, #128	; 0x80
    cc94:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    cc96:	687b      	ldr	r3, [r7, #4]
    cc98:	2200      	movs	r2, #0
    cc9a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    cc9c:	687b      	ldr	r3, [r7, #4]
    cc9e:	2201      	movs	r2, #1
    cca0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    cca2:	687b      	ldr	r3, [r7, #4]
    cca4:	2200      	movs	r2, #0
    cca6:	70da      	strb	r2, [r3, #3]
}
    cca8:	46c0      	nop			; (mov r8, r8)
    ccaa:	46bd      	mov	sp, r7
    ccac:	b002      	add	sp, #8
    ccae:	bd80      	pop	{r7, pc}

0000ccb0 <system_interrupt_enable>:
{
    ccb0:	b580      	push	{r7, lr}
    ccb2:	b082      	sub	sp, #8
    ccb4:	af00      	add	r7, sp, #0
    ccb6:	0002      	movs	r2, r0
    ccb8:	1dfb      	adds	r3, r7, #7
    ccba:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    ccbc:	4b06      	ldr	r3, [pc, #24]	; (ccd8 <system_interrupt_enable+0x28>)
    ccbe:	1dfa      	adds	r2, r7, #7
    ccc0:	7812      	ldrb	r2, [r2, #0]
    ccc2:	0011      	movs	r1, r2
    ccc4:	221f      	movs	r2, #31
    ccc6:	400a      	ands	r2, r1
    ccc8:	2101      	movs	r1, #1
    ccca:	4091      	lsls	r1, r2
    cccc:	000a      	movs	r2, r1
    ccce:	601a      	str	r2, [r3, #0]
}
    ccd0:	46c0      	nop			; (mov r8, r8)
    ccd2:	46bd      	mov	sp, r7
    ccd4:	b002      	add	sp, #8
    ccd6:	bd80      	pop	{r7, pc}
    ccd8:	e000e100 	.word	0xe000e100

0000ccdc <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    ccdc:	b580      	push	{r7, lr}
    ccde:	b084      	sub	sp, #16
    cce0:	af00      	add	r7, sp, #0
    cce2:	0002      	movs	r2, r0
    cce4:	1dfb      	adds	r3, r7, #7
    cce6:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    cce8:	230f      	movs	r3, #15
    ccea:	18fb      	adds	r3, r7, r3
    ccec:	1dfa      	adds	r2, r7, #7
    ccee:	7812      	ldrb	r2, [r2, #0]
    ccf0:	0952      	lsrs	r2, r2, #5
    ccf2:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    ccf4:	230f      	movs	r3, #15
    ccf6:	18fb      	adds	r3, r7, r3
    ccf8:	781b      	ldrb	r3, [r3, #0]
    ccfa:	2b00      	cmp	r3, #0
    ccfc:	d10c      	bne.n	cd18 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    ccfe:	4b09      	ldr	r3, [pc, #36]	; (cd24 <_extint_get_eic_from_channel+0x48>)
    cd00:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    cd02:	230f      	movs	r3, #15
    cd04:	18fb      	adds	r3, r7, r3
    cd06:	781b      	ldrb	r3, [r3, #0]
    cd08:	009b      	lsls	r3, r3, #2
    cd0a:	2210      	movs	r2, #16
    cd0c:	4694      	mov	ip, r2
    cd0e:	44bc      	add	ip, r7
    cd10:	4463      	add	r3, ip
    cd12:	3b08      	subs	r3, #8
    cd14:	681b      	ldr	r3, [r3, #0]
    cd16:	e000      	b.n	cd1a <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    cd18:	2300      	movs	r3, #0
	}
}
    cd1a:	0018      	movs	r0, r3
    cd1c:	46bd      	mov	sp, r7
    cd1e:	b004      	add	sp, #16
    cd20:	bd80      	pop	{r7, pc}
    cd22:	46c0      	nop			; (mov r8, r8)
    cd24:	40001800 	.word	0x40001800

0000cd28 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    cd28:	b580      	push	{r7, lr}
    cd2a:	b082      	sub	sp, #8
    cd2c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    cd2e:	4b0f      	ldr	r3, [pc, #60]	; (cd6c <extint_is_syncing+0x44>)
    cd30:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    cd32:	2300      	movs	r3, #0
    cd34:	607b      	str	r3, [r7, #4]
    cd36:	e011      	b.n	cd5c <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    cd38:	687b      	ldr	r3, [r7, #4]
    cd3a:	009b      	lsls	r3, r3, #2
    cd3c:	2208      	movs	r2, #8
    cd3e:	4694      	mov	ip, r2
    cd40:	44bc      	add	ip, r7
    cd42:	4463      	add	r3, ip
    cd44:	3b08      	subs	r3, #8
    cd46:	681b      	ldr	r3, [r3, #0]
    cd48:	785b      	ldrb	r3, [r3, #1]
    cd4a:	b2db      	uxtb	r3, r3
    cd4c:	b25b      	sxtb	r3, r3
    cd4e:	2b00      	cmp	r3, #0
    cd50:	da01      	bge.n	cd56 <extint_is_syncing+0x2e>
			return true;
    cd52:	2301      	movs	r3, #1
    cd54:	e006      	b.n	cd64 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    cd56:	687b      	ldr	r3, [r7, #4]
    cd58:	3301      	adds	r3, #1
    cd5a:	607b      	str	r3, [r7, #4]
    cd5c:	687b      	ldr	r3, [r7, #4]
    cd5e:	2b00      	cmp	r3, #0
    cd60:	d0ea      	beq.n	cd38 <extint_is_syncing+0x10>
		}
	}
	return false;
    cd62:	2300      	movs	r3, #0
}
    cd64:	0018      	movs	r0, r3
    cd66:	46bd      	mov	sp, r7
    cd68:	b002      	add	sp, #8
    cd6a:	bd80      	pop	{r7, pc}
    cd6c:	40001800 	.word	0x40001800

0000cd70 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    cd70:	b580      	push	{r7, lr}
    cd72:	b084      	sub	sp, #16
    cd74:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    cd76:	4b2d      	ldr	r3, [pc, #180]	; (ce2c <_system_extint_init+0xbc>)
    cd78:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    cd7a:	2140      	movs	r1, #64	; 0x40
    cd7c:	2000      	movs	r0, #0
    cd7e:	4b2c      	ldr	r3, [pc, #176]	; (ce30 <_system_extint_init+0xc0>)
    cd80:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    cd82:	003b      	movs	r3, r7
    cd84:	0018      	movs	r0, r3
    cd86:	4b2b      	ldr	r3, [pc, #172]	; (ce34 <_system_extint_init+0xc4>)
    cd88:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    cd8a:	003b      	movs	r3, r7
    cd8c:	2206      	movs	r2, #6
    cd8e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    cd90:	003b      	movs	r3, r7
    cd92:	0019      	movs	r1, r3
    cd94:	2005      	movs	r0, #5
    cd96:	4b28      	ldr	r3, [pc, #160]	; (ce38 <_system_extint_init+0xc8>)
    cd98:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    cd9a:	2005      	movs	r0, #5
    cd9c:	4b27      	ldr	r3, [pc, #156]	; (ce3c <_system_extint_init+0xcc>)
    cd9e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    cda0:	2300      	movs	r3, #0
    cda2:	60fb      	str	r3, [r7, #12]
    cda4:	e018      	b.n	cdd8 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    cda6:	68fb      	ldr	r3, [r7, #12]
    cda8:	009b      	lsls	r3, r3, #2
    cdaa:	2210      	movs	r2, #16
    cdac:	4694      	mov	ip, r2
    cdae:	44bc      	add	ip, r7
    cdb0:	4463      	add	r3, ip
    cdb2:	3b0c      	subs	r3, #12
    cdb4:	681a      	ldr	r2, [r3, #0]
    cdb6:	68fb      	ldr	r3, [r7, #12]
    cdb8:	009b      	lsls	r3, r3, #2
    cdba:	2110      	movs	r1, #16
    cdbc:	468c      	mov	ip, r1
    cdbe:	44bc      	add	ip, r7
    cdc0:	4463      	add	r3, ip
    cdc2:	3b0c      	subs	r3, #12
    cdc4:	681b      	ldr	r3, [r3, #0]
    cdc6:	781b      	ldrb	r3, [r3, #0]
    cdc8:	b2db      	uxtb	r3, r3
    cdca:	2101      	movs	r1, #1
    cdcc:	430b      	orrs	r3, r1
    cdce:	b2db      	uxtb	r3, r3
    cdd0:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    cdd2:	68fb      	ldr	r3, [r7, #12]
    cdd4:	3301      	adds	r3, #1
    cdd6:	60fb      	str	r3, [r7, #12]
    cdd8:	68fb      	ldr	r3, [r7, #12]
    cdda:	2b00      	cmp	r3, #0
    cddc:	d0e3      	beq.n	cda6 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
    cdde:	46c0      	nop			; (mov r8, r8)
    cde0:	4b17      	ldr	r3, [pc, #92]	; (ce40 <_system_extint_init+0xd0>)
    cde2:	4798      	blx	r3
    cde4:	1e03      	subs	r3, r0, #0
    cde6:	d1fb      	bne.n	cde0 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    cde8:	230b      	movs	r3, #11
    cdea:	18fb      	adds	r3, r7, r3
    cdec:	2200      	movs	r2, #0
    cdee:	701a      	strb	r2, [r3, #0]
    cdf0:	e00d      	b.n	ce0e <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    cdf2:	230b      	movs	r3, #11
    cdf4:	18fb      	adds	r3, r7, r3
    cdf6:	781a      	ldrb	r2, [r3, #0]
    cdf8:	4b12      	ldr	r3, [pc, #72]	; (ce44 <_system_extint_init+0xd4>)
    cdfa:	0092      	lsls	r2, r2, #2
    cdfc:	2100      	movs	r1, #0
    cdfe:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    ce00:	230b      	movs	r3, #11
    ce02:	18fb      	adds	r3, r7, r3
    ce04:	781a      	ldrb	r2, [r3, #0]
    ce06:	230b      	movs	r3, #11
    ce08:	18fb      	adds	r3, r7, r3
    ce0a:	3201      	adds	r2, #1
    ce0c:	701a      	strb	r2, [r3, #0]
    ce0e:	230b      	movs	r3, #11
    ce10:	18fb      	adds	r3, r7, r3
    ce12:	781b      	ldrb	r3, [r3, #0]
    ce14:	2b0f      	cmp	r3, #15
    ce16:	d9ec      	bls.n	cdf2 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    ce18:	2004      	movs	r0, #4
    ce1a:	4b0b      	ldr	r3, [pc, #44]	; (ce48 <_system_extint_init+0xd8>)
    ce1c:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    ce1e:	4b0b      	ldr	r3, [pc, #44]	; (ce4c <_system_extint_init+0xdc>)
    ce20:	4798      	blx	r3
}
    ce22:	46c0      	nop			; (mov r8, r8)
    ce24:	46bd      	mov	sp, r7
    ce26:	b004      	add	sp, #16
    ce28:	bd80      	pop	{r7, pc}
    ce2a:	46c0      	nop			; (mov r8, r8)
    ce2c:	40001800 	.word	0x40001800
    ce30:	0000cc2d 	.word	0x0000cc2d
    ce34:	0000cc15 	.word	0x0000cc15
    ce38:	000137ad 	.word	0x000137ad
    ce3c:	000137f1 	.word	0x000137f1
    ce40:	0000cd29 	.word	0x0000cd29
    ce44:	200008a0 	.word	0x200008a0
    ce48:	0000ccb1 	.word	0x0000ccb1
    ce4c:	0000ce51 	.word	0x0000ce51

0000ce50 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    ce50:	b580      	push	{r7, lr}
    ce52:	b082      	sub	sp, #8
    ce54:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    ce56:	4b15      	ldr	r3, [pc, #84]	; (ceac <_extint_enable+0x5c>)
    ce58:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    ce5a:	2300      	movs	r3, #0
    ce5c:	607b      	str	r3, [r7, #4]
    ce5e:	e018      	b.n	ce92 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    ce60:	687b      	ldr	r3, [r7, #4]
    ce62:	009b      	lsls	r3, r3, #2
    ce64:	2208      	movs	r2, #8
    ce66:	4694      	mov	ip, r2
    ce68:	44bc      	add	ip, r7
    ce6a:	4463      	add	r3, ip
    ce6c:	3b08      	subs	r3, #8
    ce6e:	681a      	ldr	r2, [r3, #0]
    ce70:	687b      	ldr	r3, [r7, #4]
    ce72:	009b      	lsls	r3, r3, #2
    ce74:	2108      	movs	r1, #8
    ce76:	468c      	mov	ip, r1
    ce78:	44bc      	add	ip, r7
    ce7a:	4463      	add	r3, ip
    ce7c:	3b08      	subs	r3, #8
    ce7e:	681b      	ldr	r3, [r3, #0]
    ce80:	781b      	ldrb	r3, [r3, #0]
    ce82:	b2db      	uxtb	r3, r3
    ce84:	2102      	movs	r1, #2
    ce86:	430b      	orrs	r3, r1
    ce88:	b2db      	uxtb	r3, r3
    ce8a:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    ce8c:	687b      	ldr	r3, [r7, #4]
    ce8e:	3301      	adds	r3, #1
    ce90:	607b      	str	r3, [r7, #4]
    ce92:	687b      	ldr	r3, [r7, #4]
    ce94:	2b00      	cmp	r3, #0
    ce96:	d0e3      	beq.n	ce60 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
    ce98:	46c0      	nop			; (mov r8, r8)
    ce9a:	4b05      	ldr	r3, [pc, #20]	; (ceb0 <_extint_enable+0x60>)
    ce9c:	4798      	blx	r3
    ce9e:	1e03      	subs	r3, r0, #0
    cea0:	d1fb      	bne.n	ce9a <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    cea2:	46c0      	nop			; (mov r8, r8)
    cea4:	46bd      	mov	sp, r7
    cea6:	b002      	add	sp, #8
    cea8:	bd80      	pop	{r7, pc}
    ceaa:	46c0      	nop			; (mov r8, r8)
    ceac:	40001800 	.word	0x40001800
    ceb0:	0000cd29 	.word	0x0000cd29

0000ceb4 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    ceb4:	b580      	push	{r7, lr}
    ceb6:	b082      	sub	sp, #8
    ceb8:	af00      	add	r7, sp, #0
    ceba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    cebc:	687b      	ldr	r3, [r7, #4]
    cebe:	2200      	movs	r2, #0
    cec0:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    cec2:	687b      	ldr	r3, [r7, #4]
    cec4:	2200      	movs	r2, #0
    cec6:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    cec8:	687b      	ldr	r3, [r7, #4]
    ceca:	2201      	movs	r2, #1
    cecc:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    cece:	687b      	ldr	r3, [r7, #4]
    ced0:	2201      	movs	r2, #1
    ced2:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    ced4:	687b      	ldr	r3, [r7, #4]
    ced6:	2200      	movs	r2, #0
    ced8:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    ceda:	687b      	ldr	r3, [r7, #4]
    cedc:	2202      	movs	r2, #2
    cede:	72da      	strb	r2, [r3, #11]
}
    cee0:	46c0      	nop			; (mov r8, r8)
    cee2:	46bd      	mov	sp, r7
    cee4:	b002      	add	sp, #8
    cee6:	bd80      	pop	{r7, pc}

0000cee8 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    cee8:	b580      	push	{r7, lr}
    ceea:	b086      	sub	sp, #24
    ceec:	af00      	add	r7, sp, #0
    ceee:	0002      	movs	r2, r0
    cef0:	6039      	str	r1, [r7, #0]
    cef2:	1dfb      	adds	r3, r7, #7
    cef4:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    cef6:	2308      	movs	r3, #8
    cef8:	18fb      	adds	r3, r7, r3
    cefa:	0018      	movs	r0, r3
    cefc:	4b36      	ldr	r3, [pc, #216]	; (cfd8 <extint_chan_set_config+0xf0>)
    cefe:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    cf00:	683b      	ldr	r3, [r7, #0]
    cf02:	685b      	ldr	r3, [r3, #4]
    cf04:	b2da      	uxtb	r2, r3
    cf06:	2308      	movs	r3, #8
    cf08:	18fb      	adds	r3, r7, r3
    cf0a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    cf0c:	2308      	movs	r3, #8
    cf0e:	18fb      	adds	r3, r7, r3
    cf10:	2200      	movs	r2, #0
    cf12:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    cf14:	683b      	ldr	r3, [r7, #0]
    cf16:	7a1a      	ldrb	r2, [r3, #8]
    cf18:	2308      	movs	r3, #8
    cf1a:	18fb      	adds	r3, r7, r3
    cf1c:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    cf1e:	683b      	ldr	r3, [r7, #0]
    cf20:	681b      	ldr	r3, [r3, #0]
    cf22:	b2db      	uxtb	r3, r3
    cf24:	2208      	movs	r2, #8
    cf26:	18ba      	adds	r2, r7, r2
    cf28:	0011      	movs	r1, r2
    cf2a:	0018      	movs	r0, r3
    cf2c:	4b2b      	ldr	r3, [pc, #172]	; (cfdc <extint_chan_set_config+0xf4>)
    cf2e:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    cf30:	1dfb      	adds	r3, r7, #7
    cf32:	781b      	ldrb	r3, [r3, #0]
    cf34:	0018      	movs	r0, r3
    cf36:	4b2a      	ldr	r3, [pc, #168]	; (cfe0 <extint_chan_set_config+0xf8>)
    cf38:	4798      	blx	r3
    cf3a:	0003      	movs	r3, r0
    cf3c:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    cf3e:	1dfb      	adds	r3, r7, #7
    cf40:	781b      	ldrb	r3, [r3, #0]
    cf42:	2207      	movs	r2, #7
    cf44:	4013      	ands	r3, r2
    cf46:	009b      	lsls	r3, r3, #2
    cf48:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    cf4a:	683b      	ldr	r3, [r7, #0]
    cf4c:	7adb      	ldrb	r3, [r3, #11]
    cf4e:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    cf50:	683b      	ldr	r3, [r7, #0]
    cf52:	7a9b      	ldrb	r3, [r3, #10]
    cf54:	2b00      	cmp	r3, #0
    cf56:	d003      	beq.n	cf60 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    cf58:	697b      	ldr	r3, [r7, #20]
    cf5a:	2208      	movs	r2, #8
    cf5c:	4313      	orrs	r3, r2
    cf5e:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    cf60:	1dfb      	adds	r3, r7, #7
    cf62:	781b      	ldrb	r3, [r3, #0]
    cf64:	08db      	lsrs	r3, r3, #3
    cf66:	b2db      	uxtb	r3, r3
    cf68:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    cf6a:	1dfb      	adds	r3, r7, #7
    cf6c:	781b      	ldrb	r3, [r3, #0]
    cf6e:	08db      	lsrs	r3, r3, #3
    cf70:	b2db      	uxtb	r3, r3
    cf72:	001a      	movs	r2, r3
    cf74:	693b      	ldr	r3, [r7, #16]
    cf76:	3206      	adds	r2, #6
    cf78:	0092      	lsls	r2, r2, #2
    cf7a:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    cf7c:	210f      	movs	r1, #15
    cf7e:	68fa      	ldr	r2, [r7, #12]
    cf80:	4091      	lsls	r1, r2
    cf82:	000a      	movs	r2, r1
    cf84:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    cf86:	401a      	ands	r2, r3
			(new_config << config_pos);
    cf88:	6979      	ldr	r1, [r7, #20]
    cf8a:	68fb      	ldr	r3, [r7, #12]
    cf8c:	4099      	lsls	r1, r3
    cf8e:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    cf90:	431a      	orrs	r2, r3
    cf92:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    cf94:	693b      	ldr	r3, [r7, #16]
    cf96:	1d82      	adds	r2, r0, #6
    cf98:	0092      	lsls	r2, r2, #2
    cf9a:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    cf9c:	683b      	ldr	r3, [r7, #0]
    cf9e:	7a5b      	ldrb	r3, [r3, #9]
    cfa0:	2b00      	cmp	r3, #0
    cfa2:	d00a      	beq.n	cfba <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    cfa4:	693b      	ldr	r3, [r7, #16]
    cfa6:	695a      	ldr	r2, [r3, #20]
    cfa8:	1dfb      	adds	r3, r7, #7
    cfaa:	781b      	ldrb	r3, [r3, #0]
    cfac:	2101      	movs	r1, #1
    cfae:	4099      	lsls	r1, r3
    cfb0:	000b      	movs	r3, r1
    cfb2:	431a      	orrs	r2, r3
    cfb4:	693b      	ldr	r3, [r7, #16]
    cfb6:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
    cfb8:	e00a      	b.n	cfd0 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    cfba:	693b      	ldr	r3, [r7, #16]
    cfbc:	695b      	ldr	r3, [r3, #20]
    cfbe:	1dfa      	adds	r2, r7, #7
    cfc0:	7812      	ldrb	r2, [r2, #0]
    cfc2:	2101      	movs	r1, #1
    cfc4:	4091      	lsls	r1, r2
    cfc6:	000a      	movs	r2, r1
    cfc8:	43d2      	mvns	r2, r2
    cfca:	401a      	ands	r2, r3
    cfcc:	693b      	ldr	r3, [r7, #16]
    cfce:	615a      	str	r2, [r3, #20]
}
    cfd0:	46c0      	nop			; (mov r8, r8)
    cfd2:	46bd      	mov	sp, r7
    cfd4:	b006      	add	sp, #24
    cfd6:	bd80      	pop	{r7, pc}
    cfd8:	0000cc89 	.word	0x0000cc89
    cfdc:	00013a99 	.word	0x00013a99
    cfe0:	0000ccdd 	.word	0x0000ccdd

0000cfe4 <system_gclk_chan_get_config_defaults>:
{
    cfe4:	b580      	push	{r7, lr}
    cfe6:	b082      	sub	sp, #8
    cfe8:	af00      	add	r7, sp, #0
    cfea:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    cfec:	687b      	ldr	r3, [r7, #4]
    cfee:	2200      	movs	r2, #0
    cff0:	701a      	strb	r2, [r3, #0]
}
    cff2:	46c0      	nop			; (mov r8, r8)
    cff4:	46bd      	mov	sp, r7
    cff6:	b002      	add	sp, #8
    cff8:	bd80      	pop	{r7, pc}
	...

0000cffc <system_apb_clock_set_mask>:
{
    cffc:	b580      	push	{r7, lr}
    cffe:	b082      	sub	sp, #8
    d000:	af00      	add	r7, sp, #0
    d002:	0002      	movs	r2, r0
    d004:	6039      	str	r1, [r7, #0]
    d006:	1dfb      	adds	r3, r7, #7
    d008:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    d00a:	1dfb      	adds	r3, r7, #7
    d00c:	781b      	ldrb	r3, [r3, #0]
    d00e:	2b01      	cmp	r3, #1
    d010:	d00a      	beq.n	d028 <system_apb_clock_set_mask+0x2c>
    d012:	2b02      	cmp	r3, #2
    d014:	d00f      	beq.n	d036 <system_apb_clock_set_mask+0x3a>
    d016:	2b00      	cmp	r3, #0
    d018:	d114      	bne.n	d044 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    d01a:	4b0e      	ldr	r3, [pc, #56]	; (d054 <system_apb_clock_set_mask+0x58>)
    d01c:	4a0d      	ldr	r2, [pc, #52]	; (d054 <system_apb_clock_set_mask+0x58>)
    d01e:	6991      	ldr	r1, [r2, #24]
    d020:	683a      	ldr	r2, [r7, #0]
    d022:	430a      	orrs	r2, r1
    d024:	619a      	str	r2, [r3, #24]
			break;
    d026:	e00f      	b.n	d048 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    d028:	4b0a      	ldr	r3, [pc, #40]	; (d054 <system_apb_clock_set_mask+0x58>)
    d02a:	4a0a      	ldr	r2, [pc, #40]	; (d054 <system_apb_clock_set_mask+0x58>)
    d02c:	69d1      	ldr	r1, [r2, #28]
    d02e:	683a      	ldr	r2, [r7, #0]
    d030:	430a      	orrs	r2, r1
    d032:	61da      	str	r2, [r3, #28]
			break;
    d034:	e008      	b.n	d048 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    d036:	4b07      	ldr	r3, [pc, #28]	; (d054 <system_apb_clock_set_mask+0x58>)
    d038:	4a06      	ldr	r2, [pc, #24]	; (d054 <system_apb_clock_set_mask+0x58>)
    d03a:	6a11      	ldr	r1, [r2, #32]
    d03c:	683a      	ldr	r2, [r7, #0]
    d03e:	430a      	orrs	r2, r1
    d040:	621a      	str	r2, [r3, #32]
			break;
    d042:	e001      	b.n	d048 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    d044:	2317      	movs	r3, #23
    d046:	e000      	b.n	d04a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    d048:	2300      	movs	r3, #0
}
    d04a:	0018      	movs	r0, r3
    d04c:	46bd      	mov	sp, r7
    d04e:	b002      	add	sp, #8
    d050:	bd80      	pop	{r7, pc}
    d052:	46c0      	nop			; (mov r8, r8)
    d054:	40000400 	.word	0x40000400

0000d058 <system_interrupt_enable>:
{
    d058:	b580      	push	{r7, lr}
    d05a:	b082      	sub	sp, #8
    d05c:	af00      	add	r7, sp, #0
    d05e:	0002      	movs	r2, r0
    d060:	1dfb      	adds	r3, r7, #7
    d062:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    d064:	4b06      	ldr	r3, [pc, #24]	; (d080 <system_interrupt_enable+0x28>)
    d066:	1dfa      	adds	r2, r7, #7
    d068:	7812      	ldrb	r2, [r2, #0]
    d06a:	0011      	movs	r1, r2
    d06c:	221f      	movs	r2, #31
    d06e:	400a      	ands	r2, r1
    d070:	2101      	movs	r1, #1
    d072:	4091      	lsls	r1, r2
    d074:	000a      	movs	r2, r1
    d076:	601a      	str	r2, [r3, #0]
}
    d078:	46c0      	nop			; (mov r8, r8)
    d07a:	46bd      	mov	sp, r7
    d07c:	b002      	add	sp, #8
    d07e:	bd80      	pop	{r7, pc}
    d080:	e000e100 	.word	0xe000e100

0000d084 <system_interrupt_disable>:
{
    d084:	b580      	push	{r7, lr}
    d086:	b082      	sub	sp, #8
    d088:	af00      	add	r7, sp, #0
    d08a:	0002      	movs	r2, r0
    d08c:	1dfb      	adds	r3, r7, #7
    d08e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    d090:	4a07      	ldr	r2, [pc, #28]	; (d0b0 <system_interrupt_disable+0x2c>)
    d092:	1dfb      	adds	r3, r7, #7
    d094:	781b      	ldrb	r3, [r3, #0]
    d096:	0019      	movs	r1, r3
    d098:	231f      	movs	r3, #31
    d09a:	400b      	ands	r3, r1
    d09c:	2101      	movs	r1, #1
    d09e:	4099      	lsls	r1, r3
    d0a0:	000b      	movs	r3, r1
    d0a2:	0019      	movs	r1, r3
    d0a4:	2380      	movs	r3, #128	; 0x80
    d0a6:	50d1      	str	r1, [r2, r3]
}
    d0a8:	46c0      	nop			; (mov r8, r8)
    d0aa:	46bd      	mov	sp, r7
    d0ac:	b002      	add	sp, #8
    d0ae:	bd80      	pop	{r7, pc}
    d0b0:	e000e100 	.word	0xe000e100

0000d0b4 <rtc_count_is_syncing>:
 *
 * \retval true  if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static bool rtc_count_is_syncing(struct rtc_module *const module)
{
    d0b4:	b580      	push	{r7, lr}
    d0b6:	b084      	sub	sp, #16
    d0b8:	af00      	add	r7, sp, #0
    d0ba:	6078      	str	r0, [r7, #4]
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    d0bc:	687b      	ldr	r3, [r7, #4]
    d0be:	681b      	ldr	r3, [r3, #0]
    d0c0:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    d0c2:	68fb      	ldr	r3, [r7, #12]
    d0c4:	7a9b      	ldrb	r3, [r3, #10]
    d0c6:	b2db      	uxtb	r3, r3
    d0c8:	b25b      	sxtb	r3, r3
    d0ca:	2b00      	cmp	r3, #0
    d0cc:	da01      	bge.n	d0d2 <rtc_count_is_syncing+0x1e>
                return true;
    d0ce:	2301      	movs	r3, #1
    d0d0:	e000      	b.n	d0d4 <rtc_count_is_syncing+0x20>
        }

        return false;
    d0d2:	2300      	movs	r3, #0
}
    d0d4:	0018      	movs	r0, r3
    d0d6:	46bd      	mov	sp, r7
    d0d8:	b004      	add	sp, #16
    d0da:	bd80      	pop	{r7, pc}

0000d0dc <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
    d0dc:	b580      	push	{r7, lr}
    d0de:	b084      	sub	sp, #16
    d0e0:	af00      	add	r7, sp, #0
    d0e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    d0e4:	687b      	ldr	r3, [r7, #4]
    d0e6:	681b      	ldr	r3, [r3, #0]
    d0e8:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
    d0ea:	2003      	movs	r0, #3
    d0ec:	4b0a      	ldr	r3, [pc, #40]	; (d118 <rtc_count_enable+0x3c>)
    d0ee:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
    d0f0:	46c0      	nop			; (mov r8, r8)
    d0f2:	687b      	ldr	r3, [r7, #4]
    d0f4:	0018      	movs	r0, r3
    d0f6:	4b09      	ldr	r3, [pc, #36]	; (d11c <rtc_count_enable+0x40>)
    d0f8:	4798      	blx	r3
    d0fa:	1e03      	subs	r3, r0, #0
    d0fc:	d1f9      	bne.n	d0f2 <rtc_count_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
    d0fe:	68fb      	ldr	r3, [r7, #12]
    d100:	881b      	ldrh	r3, [r3, #0]
    d102:	b29b      	uxth	r3, r3
    d104:	2202      	movs	r2, #2
    d106:	4313      	orrs	r3, r2
    d108:	b29a      	uxth	r2, r3
    d10a:	68fb      	ldr	r3, [r7, #12]
    d10c:	801a      	strh	r2, [r3, #0]
}
    d10e:	46c0      	nop			; (mov r8, r8)
    d110:	46bd      	mov	sp, r7
    d112:	b004      	add	sp, #16
    d114:	bd80      	pop	{r7, pc}
    d116:	46c0      	nop			; (mov r8, r8)
    d118:	0000d059 	.word	0x0000d059
    d11c:	0000d0b5 	.word	0x0000d0b5

0000d120 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
    d120:	b580      	push	{r7, lr}
    d122:	b084      	sub	sp, #16
    d124:	af00      	add	r7, sp, #0
    d126:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    d128:	687b      	ldr	r3, [r7, #4]
    d12a:	681b      	ldr	r3, [r3, #0]
    d12c:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
    d12e:	2003      	movs	r0, #3
    d130:	4b0d      	ldr	r3, [pc, #52]	; (d168 <rtc_count_disable+0x48>)
    d132:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
    d134:	46c0      	nop			; (mov r8, r8)
    d136:	687b      	ldr	r3, [r7, #4]
    d138:	0018      	movs	r0, r3
    d13a:	4b0c      	ldr	r3, [pc, #48]	; (d16c <rtc_count_disable+0x4c>)
    d13c:	4798      	blx	r3
    d13e:	1e03      	subs	r3, r0, #0
    d140:	d1f9      	bne.n	d136 <rtc_count_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
    d142:	68fb      	ldr	r3, [r7, #12]
    d144:	22c1      	movs	r2, #193	; 0xc1
    d146:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
    d148:	68fb      	ldr	r3, [r7, #12]
    d14a:	22c1      	movs	r2, #193	; 0xc1
    d14c:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
    d14e:	68fb      	ldr	r3, [r7, #12]
    d150:	881b      	ldrh	r3, [r3, #0]
    d152:	b29b      	uxth	r3, r3
    d154:	2202      	movs	r2, #2
    d156:	4393      	bics	r3, r2
    d158:	b29a      	uxth	r2, r3
    d15a:	68fb      	ldr	r3, [r7, #12]
    d15c:	801a      	strh	r2, [r3, #0]
}
    d15e:	46c0      	nop			; (mov r8, r8)
    d160:	46bd      	mov	sp, r7
    d162:	b004      	add	sp, #16
    d164:	bd80      	pop	{r7, pc}
    d166:	46c0      	nop			; (mov r8, r8)
    d168:	0000d085 	.word	0x0000d085
    d16c:	0000d0b5 	.word	0x0000d0b5

0000d170 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
    d170:	b580      	push	{r7, lr}
    d172:	b084      	sub	sp, #16
    d174:	af00      	add	r7, sp, #0
    d176:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    d178:	687b      	ldr	r3, [r7, #4]
    d17a:	681b      	ldr	r3, [r3, #0]
    d17c:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_count_disable(module);
    d17e:	687b      	ldr	r3, [r7, #4]
    d180:	0018      	movs	r0, r3
    d182:	4b0d      	ldr	r3, [pc, #52]	; (d1b8 <rtc_count_reset+0x48>)
    d184:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
    d186:	687b      	ldr	r3, [r7, #4]
    d188:	2200      	movs	r2, #0
    d18a:	829a      	strh	r2, [r3, #20]
	module->enabled_callback    = 0;
    d18c:	687b      	ldr	r3, [r7, #4]
    d18e:	2200      	movs	r2, #0
    d190:	82da      	strh	r2, [r3, #22]
#endif

	while (rtc_count_is_syncing(module)) {
    d192:	46c0      	nop			; (mov r8, r8)
    d194:	687b      	ldr	r3, [r7, #4]
    d196:	0018      	movs	r0, r3
    d198:	4b08      	ldr	r3, [pc, #32]	; (d1bc <rtc_count_reset+0x4c>)
    d19a:	4798      	blx	r3
    d19c:	1e03      	subs	r3, r0, #0
    d19e:	d1f9      	bne.n	d194 <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
    d1a0:	68fb      	ldr	r3, [r7, #12]
    d1a2:	881b      	ldrh	r3, [r3, #0]
    d1a4:	b29b      	uxth	r3, r3
    d1a6:	2201      	movs	r2, #1
    d1a8:	4313      	orrs	r3, r2
    d1aa:	b29a      	uxth	r2, r3
    d1ac:	68fb      	ldr	r3, [r7, #12]
    d1ae:	801a      	strh	r2, [r3, #0]
}
    d1b0:	46c0      	nop			; (mov r8, r8)
    d1b2:	46bd      	mov	sp, r7
    d1b4:	b004      	add	sp, #16
    d1b6:	bd80      	pop	{r7, pc}
    d1b8:	0000d121 	.word	0x0000d121
    d1bc:	0000d0b5 	.word	0x0000d0b5

0000d1c0 <_rtc_count_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were given.
 */
static enum status_code _rtc_count_set_config(
		struct rtc_module *const module,
		const struct rtc_count_config *const config)
{
    d1c0:	b580      	push	{r7, lr}
    d1c2:	b084      	sub	sp, #16
    d1c4:	af00      	add	r7, sp, #0
    d1c6:	6078      	str	r0, [r7, #4]
    d1c8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    d1ca:	687b      	ldr	r3, [r7, #4]
    d1cc:	681b      	ldr	r3, [r3, #0]
    d1ce:	60bb      	str	r3, [r7, #8]

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
    d1d0:	683b      	ldr	r3, [r7, #0]
    d1d2:	881a      	ldrh	r2, [r3, #0]
    d1d4:	68bb      	ldr	r3, [r7, #8]
    d1d6:	801a      	strh	r2, [r3, #0]

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
    d1d8:	683b      	ldr	r3, [r7, #0]
    d1da:	789b      	ldrb	r3, [r3, #2]
    d1dc:	2b00      	cmp	r3, #0
    d1de:	d03a      	beq.n	d256 <_rtc_count_set_config+0x96>
    d1e0:	2b01      	cmp	r3, #1
    d1e2:	d000      	beq.n	d1e6 <_rtc_count_set_config+0x26>
    d1e4:	e06c      	b.n	d2c0 <_rtc_count_set_config+0x100>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
    d1e6:	68bb      	ldr	r3, [r7, #8]
    d1e8:	881b      	ldrh	r3, [r3, #0]
    d1ea:	b29a      	uxth	r2, r3
    d1ec:	68bb      	ldr	r3, [r7, #8]
    d1ee:	801a      	strh	r2, [r3, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
    d1f0:	683b      	ldr	r3, [r7, #0]
    d1f2:	78db      	ldrb	r3, [r3, #3]
    d1f4:	2b00      	cmp	r3, #0
    d1f6:	d007      	beq.n	d208 <_rtc_count_set_config+0x48>
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
    d1f8:	68bb      	ldr	r3, [r7, #8]
    d1fa:	881b      	ldrh	r3, [r3, #0]
    d1fc:	b29b      	uxth	r3, r3
    d1fe:	2280      	movs	r2, #128	; 0x80
    d200:	4313      	orrs	r3, r2
    d202:	b29a      	uxth	r2, r3
    d204:	68bb      	ldr	r3, [r7, #8]
    d206:	801a      	strh	r2, [r3, #0]
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
    d208:	230f      	movs	r3, #15
    d20a:	18fb      	adds	r3, r7, r3
    d20c:	2200      	movs	r2, #0
    d20e:	701a      	strb	r2, [r3, #0]
    d210:	e01b      	b.n	d24a <_rtc_count_set_config+0x8a>
				while (rtc_count_is_syncing(module)) {
    d212:	46c0      	nop			; (mov r8, r8)
    d214:	687b      	ldr	r3, [r7, #4]
    d216:	0018      	movs	r0, r3
    d218:	4b37      	ldr	r3, [pc, #220]	; (d2f8 <_rtc_count_set_config+0x138>)
    d21a:	4798      	blx	r3
    d21c:	1e03      	subs	r3, r0, #0
    d21e:	d1f9      	bne.n	d214 <_rtc_count_set_config+0x54>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
    d220:	230f      	movs	r3, #15
    d222:	18fb      	adds	r3, r7, r3
    d224:	781a      	ldrb	r2, [r3, #0]
    d226:	683b      	ldr	r3, [r7, #0]
    d228:	3202      	adds	r2, #2
    d22a:	0092      	lsls	r2, r2, #2
    d22c:	58d1      	ldr	r1, [r2, r3]
    d22e:	230f      	movs	r3, #15
    d230:	18fb      	adds	r3, r7, r3
    d232:	781a      	ldrb	r2, [r3, #0]
    d234:	687b      	ldr	r3, [r7, #4]
    d236:	0018      	movs	r0, r3
    d238:	4b30      	ldr	r3, [pc, #192]	; (d2fc <_rtc_count_set_config+0x13c>)
    d23a:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
    d23c:	230f      	movs	r3, #15
    d23e:	18fb      	adds	r3, r7, r3
    d240:	781a      	ldrb	r2, [r3, #0]
    d242:	230f      	movs	r3, #15
    d244:	18fb      	adds	r3, r7, r3
    d246:	3201      	adds	r2, #1
    d248:	701a      	strb	r2, [r3, #0]
    d24a:	230f      	movs	r3, #15
    d24c:	18fb      	adds	r3, r7, r3
    d24e:	781b      	ldrb	r3, [r3, #0]
    d250:	2b00      	cmp	r3, #0
    d252:	d0de      	beq.n	d212 <_rtc_count_set_config+0x52>
						(enum rtc_count_compare)i);
			}
			break;
    d254:	e036      	b.n	d2c4 <_rtc_count_set_config+0x104>

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
    d256:	68bb      	ldr	r3, [r7, #8]
    d258:	881b      	ldrh	r3, [r3, #0]
    d25a:	b29b      	uxth	r3, r3
    d25c:	2204      	movs	r2, #4
    d25e:	4313      	orrs	r3, r2
    d260:	b29a      	uxth	r2, r3
    d262:	68bb      	ldr	r3, [r7, #8]
    d264:	801a      	strh	r2, [r3, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
    d266:	683b      	ldr	r3, [r7, #0]
    d268:	78db      	ldrb	r3, [r3, #3]
    d26a:	2b00      	cmp	r3, #0
    d26c:	d001      	beq.n	d272 <_rtc_count_set_config+0xb2>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
    d26e:	2317      	movs	r3, #23
    d270:	e03e      	b.n	d2f0 <_rtc_count_set_config+0x130>
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    d272:	230e      	movs	r3, #14
    d274:	18fb      	adds	r3, r7, r3
    d276:	2200      	movs	r2, #0
    d278:	701a      	strb	r2, [r3, #0]
    d27a:	e01b      	b.n	d2b4 <_rtc_count_set_config+0xf4>
				while (rtc_count_is_syncing(module)) {
    d27c:	46c0      	nop			; (mov r8, r8)
    d27e:	687b      	ldr	r3, [r7, #4]
    d280:	0018      	movs	r0, r3
    d282:	4b1d      	ldr	r3, [pc, #116]	; (d2f8 <_rtc_count_set_config+0x138>)
    d284:	4798      	blx	r3
    d286:	1e03      	subs	r3, r0, #0
    d288:	d1f9      	bne.n	d27e <_rtc_count_set_config+0xbe>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
    d28a:	230e      	movs	r3, #14
    d28c:	18fb      	adds	r3, r7, r3
    d28e:	781a      	ldrb	r2, [r3, #0]
    d290:	683b      	ldr	r3, [r7, #0]
    d292:	3202      	adds	r2, #2
    d294:	0092      	lsls	r2, r2, #2
    d296:	58d1      	ldr	r1, [r2, r3]
    d298:	230e      	movs	r3, #14
    d29a:	18fb      	adds	r3, r7, r3
    d29c:	781a      	ldrb	r2, [r3, #0]
    d29e:	687b      	ldr	r3, [r7, #4]
    d2a0:	0018      	movs	r0, r3
    d2a2:	4b16      	ldr	r3, [pc, #88]	; (d2fc <_rtc_count_set_config+0x13c>)
    d2a4:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    d2a6:	230e      	movs	r3, #14
    d2a8:	18fb      	adds	r3, r7, r3
    d2aa:	781a      	ldrb	r2, [r3, #0]
    d2ac:	230e      	movs	r3, #14
    d2ae:	18fb      	adds	r3, r7, r3
    d2b0:	3201      	adds	r2, #1
    d2b2:	701a      	strb	r2, [r3, #0]
    d2b4:	230e      	movs	r3, #14
    d2b6:	18fb      	adds	r3, r7, r3
    d2b8:	781b      	ldrb	r3, [r3, #0]
    d2ba:	2b01      	cmp	r3, #1
    d2bc:	d9de      	bls.n	d27c <_rtc_count_set_config+0xbc>
						(enum rtc_count_compare)i);
			}
			break;
    d2be:	e001      	b.n	d2c4 <_rtc_count_set_config+0x104>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    d2c0:	2317      	movs	r3, #23
    d2c2:	e015      	b.n	d2f0 <_rtc_count_set_config+0x130>
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
    d2c4:	683b      	ldr	r3, [r7, #0]
    d2c6:	791b      	ldrb	r3, [r3, #4]
    d2c8:	2b00      	cmp	r3, #0
    d2ca:	d010      	beq.n	d2ee <_rtc_count_set_config+0x12e>
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
    d2cc:	68bb      	ldr	r3, [r7, #8]
    d2ce:	885b      	ldrh	r3, [r3, #2]
    d2d0:	b29b      	uxth	r3, r3
    d2d2:	2280      	movs	r2, #128	; 0x80
    d2d4:	01d2      	lsls	r2, r2, #7
    d2d6:	4313      	orrs	r3, r2
    d2d8:	b29a      	uxth	r2, r3
    d2da:	68bb      	ldr	r3, [r7, #8]
    d2dc:	805a      	strh	r2, [r3, #2]
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RREQ;
    d2de:	68bb      	ldr	r3, [r7, #8]
    d2e0:	885b      	ldrh	r3, [r3, #2]
    d2e2:	b29b      	uxth	r3, r3
    d2e4:	4a06      	ldr	r2, [pc, #24]	; (d300 <_rtc_count_set_config+0x140>)
    d2e6:	4313      	orrs	r3, r2
    d2e8:	b29a      	uxth	r2, r3
    d2ea:	68bb      	ldr	r3, [r7, #8]
    d2ec:	805a      	strh	r2, [r3, #2]
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
    d2ee:	2300      	movs	r3, #0
}
    d2f0:	0018      	movs	r0, r3
    d2f2:	46bd      	mov	sp, r7
    d2f4:	b004      	add	sp, #16
    d2f6:	bd80      	pop	{r7, pc}
    d2f8:	0000d0b5 	.word	0x0000d0b5
    d2fc:	0000d395 	.word	0x0000d395
    d300:	ffff8000 	.word	0xffff8000

0000d304 <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
    d304:	b580      	push	{r7, lr}
    d306:	b086      	sub	sp, #24
    d308:	af00      	add	r7, sp, #0
    d30a:	60f8      	str	r0, [r7, #12]
    d30c:	60b9      	str	r1, [r7, #8]
    d30e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    d310:	68fb      	ldr	r3, [r7, #12]
    d312:	68ba      	ldr	r2, [r7, #8]
    d314:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
    d316:	2120      	movs	r1, #32
    d318:	2000      	movs	r0, #0
    d31a:	4b17      	ldr	r3, [pc, #92]	; (d378 <rtc_count_init+0x74>)
    d31c:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    d31e:	2314      	movs	r3, #20
    d320:	18fb      	adds	r3, r7, r3
    d322:	0018      	movs	r0, r3
    d324:	4b15      	ldr	r3, [pc, #84]	; (d37c <rtc_count_init+0x78>)
    d326:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    d328:	2314      	movs	r3, #20
    d32a:	18fb      	adds	r3, r7, r3
    d32c:	2202      	movs	r2, #2
    d32e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    d330:	2314      	movs	r3, #20
    d332:	18fb      	adds	r3, r7, r3
    d334:	0019      	movs	r1, r3
    d336:	2004      	movs	r0, #4
    d338:	4b11      	ldr	r3, [pc, #68]	; (d380 <rtc_count_init+0x7c>)
    d33a:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    d33c:	2004      	movs	r0, #4
    d33e:	4b11      	ldr	r3, [pc, #68]	; (d384 <rtc_count_init+0x80>)
    d340:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
    d342:	68fb      	ldr	r3, [r7, #12]
    d344:	0018      	movs	r0, r3
    d346:	4b10      	ldr	r3, [pc, #64]	; (d388 <rtc_count_init+0x84>)
    d348:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
    d34a:	687b      	ldr	r3, [r7, #4]
    d34c:	789a      	ldrb	r2, [r3, #2]
    d34e:	68fb      	ldr	r3, [r7, #12]
    d350:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
    d352:	687b      	ldr	r3, [r7, #4]
    d354:	791a      	ldrb	r2, [r3, #4]
    d356:	68fb      	ldr	r3, [r7, #12]
    d358:	715a      	strb	r2, [r3, #5]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
    d35a:	4b0c      	ldr	r3, [pc, #48]	; (d38c <rtc_count_init+0x88>)
    d35c:	68fa      	ldr	r2, [r7, #12]
    d35e:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
    d360:	687a      	ldr	r2, [r7, #4]
    d362:	68fb      	ldr	r3, [r7, #12]
    d364:	0011      	movs	r1, r2
    d366:	0018      	movs	r0, r3
    d368:	4b09      	ldr	r3, [pc, #36]	; (d390 <rtc_count_init+0x8c>)
    d36a:	4798      	blx	r3
    d36c:	0003      	movs	r3, r0
}
    d36e:	0018      	movs	r0, r3
    d370:	46bd      	mov	sp, r7
    d372:	b006      	add	sp, #24
    d374:	bd80      	pop	{r7, pc}
    d376:	46c0      	nop			; (mov r8, r8)
    d378:	0000cffd 	.word	0x0000cffd
    d37c:	0000cfe5 	.word	0x0000cfe5
    d380:	000137ad 	.word	0x000137ad
    d384:	000137f1 	.word	0x000137f1
    d388:	0000d171 	.word	0x0000d171
    d38c:	200008e0 	.word	0x200008e0
    d390:	0000d1c1 	.word	0x0000d1c1

0000d394 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
    d394:	b580      	push	{r7, lr}
    d396:	b086      	sub	sp, #24
    d398:	af00      	add	r7, sp, #0
    d39a:	60f8      	str	r0, [r7, #12]
    d39c:	60b9      	str	r1, [r7, #8]
    d39e:	1dfb      	adds	r3, r7, #7
    d3a0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    d3a2:	68fb      	ldr	r3, [r7, #12]
    d3a4:	681b      	ldr	r3, [r3, #0]
    d3a6:	617b      	str	r3, [r7, #20]

	while (rtc_count_is_syncing(module)) {
    d3a8:	46c0      	nop			; (mov r8, r8)
    d3aa:	68fb      	ldr	r3, [r7, #12]
    d3ac:	0018      	movs	r0, r3
    d3ae:	4b1a      	ldr	r3, [pc, #104]	; (d418 <rtc_count_set_compare+0x84>)
    d3b0:	4798      	blx	r3
    d3b2:	1e03      	subs	r3, r0, #0
    d3b4:	d1f9      	bne.n	d3aa <rtc_count_set_compare+0x16>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
    d3b6:	68fb      	ldr	r3, [r7, #12]
    d3b8:	791b      	ldrb	r3, [r3, #4]
    d3ba:	2b00      	cmp	r3, #0
    d3bc:	d00f      	beq.n	d3de <rtc_count_set_compare+0x4a>
    d3be:	2b01      	cmp	r3, #1
    d3c0:	d122      	bne.n	d408 <rtc_count_set_compare+0x74>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
    d3c2:	1dfb      	adds	r3, r7, #7
    d3c4:	781b      	ldrb	r3, [r3, #0]
    d3c6:	2b01      	cmp	r3, #1
    d3c8:	d901      	bls.n	d3ce <rtc_count_set_compare+0x3a>
				return STATUS_ERR_INVALID_ARG;
    d3ca:	2317      	movs	r3, #23
    d3cc:	e01f      	b.n	d40e <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
    d3ce:	1dfb      	adds	r3, r7, #7
    d3d0:	781a      	ldrb	r2, [r3, #0]
    d3d2:	697b      	ldr	r3, [r7, #20]
    d3d4:	3206      	adds	r2, #6
    d3d6:	0092      	lsls	r2, r2, #2
    d3d8:	68b9      	ldr	r1, [r7, #8]
    d3da:	50d1      	str	r1, [r2, r3]

			break;
    d3dc:	e016      	b.n	d40c <rtc_count_set_compare+0x78>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
    d3de:	1dfb      	adds	r3, r7, #7
    d3e0:	781b      	ldrb	r3, [r3, #0]
    d3e2:	2b02      	cmp	r3, #2
    d3e4:	d901      	bls.n	d3ea <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
    d3e6:	2317      	movs	r3, #23
    d3e8:	e011      	b.n	d40e <rtc_count_set_compare+0x7a>
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
    d3ea:	68bb      	ldr	r3, [r7, #8]
    d3ec:	4a0b      	ldr	r2, [pc, #44]	; (d41c <rtc_count_set_compare+0x88>)
    d3ee:	4293      	cmp	r3, r2
    d3f0:	d901      	bls.n	d3f6 <rtc_count_set_compare+0x62>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
    d3f2:	2317      	movs	r3, #23
    d3f4:	e00b      	b.n	d40e <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
    d3f6:	1dfb      	adds	r3, r7, #7
    d3f8:	781a      	ldrb	r2, [r3, #0]
    d3fa:	68bb      	ldr	r3, [r7, #8]
    d3fc:	b299      	uxth	r1, r3
    d3fe:	697b      	ldr	r3, [r7, #20]
    d400:	320c      	adds	r2, #12
    d402:	0052      	lsls	r2, r2, #1
    d404:	52d1      	strh	r1, [r2, r3]

			break;
    d406:	e001      	b.n	d40c <rtc_count_set_compare+0x78>

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
    d408:	231a      	movs	r3, #26
    d40a:	e000      	b.n	d40e <rtc_count_set_compare+0x7a>
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
    d40c:	2300      	movs	r3, #0
}
    d40e:	0018      	movs	r0, r3
    d410:	46bd      	mov	sp, r7
    d412:	b006      	add	sp, #24
    d414:	bd80      	pop	{r7, pc}
    d416:	46c0      	nop			; (mov r8, r8)
    d418:	0000d0b5 	.word	0x0000d0b5
    d41c:	0000ffff 	.word	0x0000ffff

0000d420 <rtc_count_set_period>:
 * \retval STATUS_ERR_UNSUPPORTED_DEV  If module is not operated in 16-bit mode
 */
enum status_code rtc_count_set_period(
		struct rtc_module *const module,
		const uint16_t period_value)
{
    d420:	b580      	push	{r7, lr}
    d422:	b084      	sub	sp, #16
    d424:	af00      	add	r7, sp, #0
    d426:	6078      	str	r0, [r7, #4]
    d428:	000a      	movs	r2, r1
    d42a:	1cbb      	adds	r3, r7, #2
    d42c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    d42e:	687b      	ldr	r3, [r7, #4]
    d430:	681b      	ldr	r3, [r3, #0]
    d432:	60fb      	str	r3, [r7, #12]

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
    d434:	687b      	ldr	r3, [r7, #4]
    d436:	791b      	ldrb	r3, [r3, #4]
    d438:	2b00      	cmp	r3, #0
    d43a:	d001      	beq.n	d440 <rtc_count_set_period+0x20>
		return STATUS_ERR_UNSUPPORTED_DEV;
    d43c:	2315      	movs	r3, #21
    d43e:	e00b      	b.n	d458 <rtc_count_set_period+0x38>
	}

	while (rtc_count_is_syncing(module)) {
    d440:	46c0      	nop			; (mov r8, r8)
    d442:	687b      	ldr	r3, [r7, #4]
    d444:	0018      	movs	r0, r3
    d446:	4b06      	ldr	r3, [pc, #24]	; (d460 <rtc_count_set_period+0x40>)
    d448:	4798      	blx	r3
    d44a:	1e03      	subs	r3, r0, #0
    d44c:	d1f9      	bne.n	d442 <rtc_count_set_period+0x22>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE1.PER.reg = period_value;
    d44e:	68fb      	ldr	r3, [r7, #12]
    d450:	1cba      	adds	r2, r7, #2
    d452:	8812      	ldrh	r2, [r2, #0]
    d454:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
    d456:	2300      	movs	r3, #0
}
    d458:	0018      	movs	r0, r3
    d45a:	46bd      	mov	sp, r7
    d45c:	b004      	add	sp, #16
    d45e:	bd80      	pop	{r7, pc}
    d460:	0000d0b5 	.word	0x0000d0b5

0000d464 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
    d464:	b580      	push	{r7, lr}
    d466:	b086      	sub	sp, #24
    d468:	af00      	add	r7, sp, #0
    d46a:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
    d46c:	4b31      	ldr	r3, [pc, #196]	; (d534 <_rtc_interrupt_handler+0xd0>)
    d46e:	687a      	ldr	r2, [r7, #4]
    d470:	0092      	lsls	r2, r2, #2
    d472:	58d3      	ldr	r3, [r2, r3]
    d474:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
    d476:	697b      	ldr	r3, [r7, #20]
    d478:	681b      	ldr	r3, [r3, #0]
    d47a:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    d47c:	230e      	movs	r3, #14
    d47e:	18fb      	adds	r3, r7, r3
    d480:	697a      	ldr	r2, [r7, #20]
    d482:	8ad2      	ldrh	r2, [r2, #22]
    d484:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    d486:	697b      	ldr	r3, [r7, #20]
    d488:	8a9b      	ldrh	r3, [r3, #20]
    d48a:	b29a      	uxth	r2, r3
    d48c:	230e      	movs	r3, #14
    d48e:	18fb      	adds	r3, r7, r3
    d490:	210e      	movs	r1, #14
    d492:	1879      	adds	r1, r7, r1
    d494:	8809      	ldrh	r1, [r1, #0]
    d496:	400a      	ands	r2, r1
    d498:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    d49a:	693b      	ldr	r3, [r7, #16]
    d49c:	7a1b      	ldrb	r3, [r3, #8]
    d49e:	b2da      	uxtb	r2, r3
    d4a0:	230c      	movs	r3, #12
    d4a2:	18fb      	adds	r3, r7, r3
    d4a4:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    d4a6:	693b      	ldr	r3, [r7, #16]
    d4a8:	79db      	ldrb	r3, [r3, #7]
    d4aa:	b2db      	uxtb	r3, r3
    d4ac:	b29a      	uxth	r2, r3
    d4ae:	230c      	movs	r3, #12
    d4b0:	18fb      	adds	r3, r7, r3
    d4b2:	210c      	movs	r1, #12
    d4b4:	1879      	adds	r1, r7, r1
    d4b6:	8809      	ldrh	r1, [r1, #0]
    d4b8:	400a      	ands	r2, r1
    d4ba:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    d4bc:	230c      	movs	r3, #12
    d4be:	18fb      	adds	r3, r7, r3
    d4c0:	881b      	ldrh	r3, [r3, #0]
    d4c2:	2280      	movs	r2, #128	; 0x80
    d4c4:	4013      	ands	r3, r2
    d4c6:	d00c      	beq.n	d4e2 <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    d4c8:	230e      	movs	r3, #14
    d4ca:	18fb      	adds	r3, r7, r3
    d4cc:	881b      	ldrh	r3, [r3, #0]
    d4ce:	2204      	movs	r2, #4
    d4d0:	4013      	ands	r3, r2
    d4d2:	d002      	beq.n	d4da <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    d4d4:	697b      	ldr	r3, [r7, #20]
    d4d6:	691b      	ldr	r3, [r3, #16]
    d4d8:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    d4da:	693b      	ldr	r3, [r7, #16]
    d4dc:	2280      	movs	r2, #128	; 0x80
    d4de:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
    d4e0:	e024      	b.n	d52c <_rtc_interrupt_handler+0xc8>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    d4e2:	230c      	movs	r3, #12
    d4e4:	18fb      	adds	r3, r7, r3
    d4e6:	881b      	ldrh	r3, [r3, #0]
    d4e8:	2201      	movs	r2, #1
    d4ea:	4013      	ands	r3, r2
    d4ec:	d00c      	beq.n	d508 <_rtc_interrupt_handler+0xa4>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    d4ee:	230e      	movs	r3, #14
    d4f0:	18fb      	adds	r3, r7, r3
    d4f2:	881b      	ldrh	r3, [r3, #0]
    d4f4:	2201      	movs	r2, #1
    d4f6:	4013      	ands	r3, r2
    d4f8:	d002      	beq.n	d500 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    d4fa:	697b      	ldr	r3, [r7, #20]
    d4fc:	689b      	ldr	r3, [r3, #8]
    d4fe:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    d500:	693b      	ldr	r3, [r7, #16]
    d502:	2201      	movs	r2, #1
    d504:	721a      	strb	r2, [r3, #8]
}
    d506:	e011      	b.n	d52c <_rtc_interrupt_handler+0xc8>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    d508:	230c      	movs	r3, #12
    d50a:	18fb      	adds	r3, r7, r3
    d50c:	881b      	ldrh	r3, [r3, #0]
    d50e:	2202      	movs	r2, #2
    d510:	4013      	ands	r3, r2
    d512:	d00b      	beq.n	d52c <_rtc_interrupt_handler+0xc8>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    d514:	230e      	movs	r3, #14
    d516:	18fb      	adds	r3, r7, r3
    d518:	881b      	ldrh	r3, [r3, #0]
    d51a:	2202      	movs	r2, #2
    d51c:	4013      	ands	r3, r2
    d51e:	d002      	beq.n	d526 <_rtc_interrupt_handler+0xc2>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    d520:	697b      	ldr	r3, [r7, #20]
    d522:	68db      	ldr	r3, [r3, #12]
    d524:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    d526:	693b      	ldr	r3, [r7, #16]
    d528:	2202      	movs	r2, #2
    d52a:	721a      	strb	r2, [r3, #8]
}
    d52c:	46c0      	nop			; (mov r8, r8)
    d52e:	46bd      	mov	sp, r7
    d530:	b006      	add	sp, #24
    d532:	bd80      	pop	{r7, pc}
    d534:	200008e0 	.word	0x200008e0

0000d538 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    d538:	b580      	push	{r7, lr}
    d53a:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
    d53c:	2000      	movs	r0, #0
    d53e:	4b02      	ldr	r3, [pc, #8]	; (d548 <RTC_Handler+0x10>)
    d540:	4798      	blx	r3
}
    d542:	46c0      	nop			; (mov r8, r8)
    d544:	46bd      	mov	sp, r7
    d546:	bd80      	pop	{r7, pc}
    d548:	0000d465 	.word	0x0000d465

0000d54c <system_gclk_chan_get_config_defaults>:
{
    d54c:	b580      	push	{r7, lr}
    d54e:	b082      	sub	sp, #8
    d550:	af00      	add	r7, sp, #0
    d552:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    d554:	687b      	ldr	r3, [r7, #4]
    d556:	2200      	movs	r2, #0
    d558:	701a      	strb	r2, [r3, #0]
}
    d55a:	46c0      	nop			; (mov r8, r8)
    d55c:	46bd      	mov	sp, r7
    d55e:	b002      	add	sp, #8
    d560:	bd80      	pop	{r7, pc}

0000d562 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    d562:	b5f0      	push	{r4, r5, r6, r7, lr}
    d564:	b08d      	sub	sp, #52	; 0x34
    d566:	af00      	add	r7, sp, #0
    d568:	60b8      	str	r0, [r7, #8]
    d56a:	60f9      	str	r1, [r7, #12]
    d56c:	603a      	str	r2, [r7, #0]
    d56e:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    d570:	2300      	movs	r3, #0
    d572:	2400      	movs	r4, #0
    d574:	623b      	str	r3, [r7, #32]
    d576:	627c      	str	r4, [r7, #36]	; 0x24
    d578:	2300      	movs	r3, #0
    d57a:	2400      	movs	r4, #0
    d57c:	61bb      	str	r3, [r7, #24]
    d57e:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    d580:	233f      	movs	r3, #63	; 0x3f
    d582:	62fb      	str	r3, [r7, #44]	; 0x2c
    d584:	e053      	b.n	d62e <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    d586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d588:	3b20      	subs	r3, #32
    d58a:	2b00      	cmp	r3, #0
    d58c:	db04      	blt.n	d598 <long_division+0x36>
    d58e:	2201      	movs	r2, #1
    d590:	409a      	lsls	r2, r3
    d592:	0013      	movs	r3, r2
    d594:	617b      	str	r3, [r7, #20]
    d596:	e00b      	b.n	d5b0 <long_division+0x4e>
    d598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d59a:	2220      	movs	r2, #32
    d59c:	1ad3      	subs	r3, r2, r3
    d59e:	2201      	movs	r2, #1
    d5a0:	40da      	lsrs	r2, r3
    d5a2:	0013      	movs	r3, r2
    d5a4:	2100      	movs	r1, #0
    d5a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    d5a8:	4091      	lsls	r1, r2
    d5aa:	000a      	movs	r2, r1
    d5ac:	4313      	orrs	r3, r2
    d5ae:	617b      	str	r3, [r7, #20]
    d5b0:	2201      	movs	r2, #1
    d5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d5b4:	409a      	lsls	r2, r3
    d5b6:	0013      	movs	r3, r2
    d5b8:	613b      	str	r3, [r7, #16]

		r = r << 1;
    d5ba:	69bb      	ldr	r3, [r7, #24]
    d5bc:	69fc      	ldr	r4, [r7, #28]
    d5be:	18db      	adds	r3, r3, r3
    d5c0:	4164      	adcs	r4, r4
    d5c2:	61bb      	str	r3, [r7, #24]
    d5c4:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    d5c6:	68bb      	ldr	r3, [r7, #8]
    d5c8:	693a      	ldr	r2, [r7, #16]
    d5ca:	401a      	ands	r2, r3
    d5cc:	0015      	movs	r5, r2
    d5ce:	68fb      	ldr	r3, [r7, #12]
    d5d0:	697a      	ldr	r2, [r7, #20]
    d5d2:	401a      	ands	r2, r3
    d5d4:	0016      	movs	r6, r2
    d5d6:	002b      	movs	r3, r5
    d5d8:	4333      	orrs	r3, r6
    d5da:	d007      	beq.n	d5ec <long_division+0x8a>
			r |= 0x01;
    d5dc:	69bb      	ldr	r3, [r7, #24]
    d5de:	2201      	movs	r2, #1
    d5e0:	4313      	orrs	r3, r2
    d5e2:	61bb      	str	r3, [r7, #24]
    d5e4:	69fb      	ldr	r3, [r7, #28]
    d5e6:	2200      	movs	r2, #0
    d5e8:	4313      	orrs	r3, r2
    d5ea:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    d5ec:	687a      	ldr	r2, [r7, #4]
    d5ee:	69fb      	ldr	r3, [r7, #28]
    d5f0:	429a      	cmp	r2, r3
    d5f2:	d819      	bhi.n	d628 <long_division+0xc6>
    d5f4:	687a      	ldr	r2, [r7, #4]
    d5f6:	69fb      	ldr	r3, [r7, #28]
    d5f8:	429a      	cmp	r2, r3
    d5fa:	d103      	bne.n	d604 <long_division+0xa2>
    d5fc:	683a      	ldr	r2, [r7, #0]
    d5fe:	69bb      	ldr	r3, [r7, #24]
    d600:	429a      	cmp	r2, r3
    d602:	d811      	bhi.n	d628 <long_division+0xc6>
			r = r - d;
    d604:	69b9      	ldr	r1, [r7, #24]
    d606:	69fa      	ldr	r2, [r7, #28]
    d608:	683b      	ldr	r3, [r7, #0]
    d60a:	687c      	ldr	r4, [r7, #4]
    d60c:	1ac9      	subs	r1, r1, r3
    d60e:	41a2      	sbcs	r2, r4
    d610:	000b      	movs	r3, r1
    d612:	0014      	movs	r4, r2
    d614:	61bb      	str	r3, [r7, #24]
    d616:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    d618:	6a3a      	ldr	r2, [r7, #32]
    d61a:	693b      	ldr	r3, [r7, #16]
    d61c:	4313      	orrs	r3, r2
    d61e:	623b      	str	r3, [r7, #32]
    d620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d622:	697b      	ldr	r3, [r7, #20]
    d624:	4313      	orrs	r3, r2
    d626:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    d628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d62a:	3b01      	subs	r3, #1
    d62c:	62fb      	str	r3, [r7, #44]	; 0x2c
    d62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d630:	2b00      	cmp	r3, #0
    d632:	daa8      	bge.n	d586 <long_division+0x24>
		}
	}

	return q;
    d634:	6a3b      	ldr	r3, [r7, #32]
    d636:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    d638:	0018      	movs	r0, r3
    d63a:	0021      	movs	r1, r4
    d63c:	46bd      	mov	sp, r7
    d63e:	b00d      	add	sp, #52	; 0x34
    d640:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d642 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    d642:	b580      	push	{r7, lr}
    d644:	b086      	sub	sp, #24
    d646:	af00      	add	r7, sp, #0
    d648:	60f8      	str	r0, [r7, #12]
    d64a:	60b9      	str	r1, [r7, #8]
    d64c:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    d64e:	2316      	movs	r3, #22
    d650:	18fb      	adds	r3, r7, r3
    d652:	2200      	movs	r2, #0
    d654:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    d656:	68bb      	ldr	r3, [r7, #8]
    d658:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    d65a:	68bb      	ldr	r3, [r7, #8]
    d65c:	085a      	lsrs	r2, r3, #1
    d65e:	68fb      	ldr	r3, [r7, #12]
    d660:	429a      	cmp	r2, r3
    d662:	d201      	bcs.n	d668 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    d664:	2340      	movs	r3, #64	; 0x40
    d666:	e026      	b.n	d6b6 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    d668:	68bb      	ldr	r3, [r7, #8]
    d66a:	085b      	lsrs	r3, r3, #1
    d66c:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    d66e:	e00a      	b.n	d686 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    d670:	693a      	ldr	r2, [r7, #16]
    d672:	68fb      	ldr	r3, [r7, #12]
    d674:	1ad3      	subs	r3, r2, r3
    d676:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    d678:	2316      	movs	r3, #22
    d67a:	18fb      	adds	r3, r7, r3
    d67c:	881a      	ldrh	r2, [r3, #0]
    d67e:	2316      	movs	r3, #22
    d680:	18fb      	adds	r3, r7, r3
    d682:	3201      	adds	r2, #1
    d684:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    d686:	693a      	ldr	r2, [r7, #16]
    d688:	68fb      	ldr	r3, [r7, #12]
    d68a:	429a      	cmp	r2, r3
    d68c:	d2f0      	bcs.n	d670 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    d68e:	2316      	movs	r3, #22
    d690:	18fb      	adds	r3, r7, r3
    d692:	2216      	movs	r2, #22
    d694:	18ba      	adds	r2, r7, r2
    d696:	8812      	ldrh	r2, [r2, #0]
    d698:	3a01      	subs	r2, #1
    d69a:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    d69c:	2316      	movs	r3, #22
    d69e:	18fb      	adds	r3, r7, r3
    d6a0:	881b      	ldrh	r3, [r3, #0]
    d6a2:	2bff      	cmp	r3, #255	; 0xff
    d6a4:	d901      	bls.n	d6aa <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    d6a6:	2340      	movs	r3, #64	; 0x40
    d6a8:	e005      	b.n	d6b6 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    d6aa:	687b      	ldr	r3, [r7, #4]
    d6ac:	2216      	movs	r2, #22
    d6ae:	18ba      	adds	r2, r7, r2
    d6b0:	8812      	ldrh	r2, [r2, #0]
    d6b2:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    d6b4:	2300      	movs	r3, #0
	}
}
    d6b6:	0018      	movs	r0, r3
    d6b8:	46bd      	mov	sp, r7
    d6ba:	b006      	add	sp, #24
    d6bc:	bd80      	pop	{r7, pc}
	...

0000d6c0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    d6c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d6c2:	b0a1      	sub	sp, #132	; 0x84
    d6c4:	af00      	add	r7, sp, #0
    d6c6:	64f8      	str	r0, [r7, #76]	; 0x4c
    d6c8:	64b9      	str	r1, [r7, #72]	; 0x48
    d6ca:	647a      	str	r2, [r7, #68]	; 0x44
    d6cc:	2243      	movs	r2, #67	; 0x43
    d6ce:	18ba      	adds	r2, r7, r2
    d6d0:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    d6d2:	2300      	movs	r3, #0
    d6d4:	2400      	movs	r4, #0
    d6d6:	673b      	str	r3, [r7, #112]	; 0x70
    d6d8:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    d6da:	2300      	movs	r3, #0
    d6dc:	2400      	movs	r4, #0
    d6de:	66bb      	str	r3, [r7, #104]	; 0x68
    d6e0:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    d6e2:	2300      	movs	r3, #0
    d6e4:	2400      	movs	r4, #0
    d6e6:	67bb      	str	r3, [r7, #120]	; 0x78
    d6e8:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    d6ea:	2300      	movs	r3, #0
    d6ec:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    d6ee:	2358      	movs	r3, #88	; 0x58
    d6f0:	2240      	movs	r2, #64	; 0x40
    d6f2:	4694      	mov	ip, r2
    d6f4:	44bc      	add	ip, r7
    d6f6:	4463      	add	r3, ip
    d6f8:	781a      	ldrb	r2, [r3, #0]
    d6fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d6fc:	435a      	muls	r2, r3
    d6fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    d700:	429a      	cmp	r2, r3
    d702:	d901      	bls.n	d708 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    d704:	2340      	movs	r3, #64	; 0x40
    d706:	e0b3      	b.n	d870 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    d708:	2343      	movs	r3, #67	; 0x43
    d70a:	18fb      	adds	r3, r7, r3
    d70c:	781b      	ldrb	r3, [r3, #0]
    d70e:	2b00      	cmp	r3, #0
    d710:	d13d      	bne.n	d78e <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    d712:	2358      	movs	r3, #88	; 0x58
    d714:	2240      	movs	r2, #64	; 0x40
    d716:	4694      	mov	ip, r2
    d718:	44bc      	add	ip, r7
    d71a:	4463      	add	r3, ip
    d71c:	781b      	ldrb	r3, [r3, #0]
    d71e:	b2db      	uxtb	r3, r3
    d720:	613b      	str	r3, [r7, #16]
    d722:	2300      	movs	r3, #0
    d724:	617b      	str	r3, [r7, #20]
    d726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d728:	60bb      	str	r3, [r7, #8]
    d72a:	2300      	movs	r3, #0
    d72c:	60fb      	str	r3, [r7, #12]
    d72e:	4c52      	ldr	r4, [pc, #328]	; (d878 <_sercom_get_async_baud_val+0x1b8>)
    d730:	68ba      	ldr	r2, [r7, #8]
    d732:	68fb      	ldr	r3, [r7, #12]
    d734:	6938      	ldr	r0, [r7, #16]
    d736:	6979      	ldr	r1, [r7, #20]
    d738:	47a0      	blx	r4
    d73a:	0003      	movs	r3, r0
    d73c:	000c      	movs	r4, r1
    d73e:	001b      	movs	r3, r3
    d740:	65fb      	str	r3, [r7, #92]	; 0x5c
    d742:	2300      	movs	r3, #0
    d744:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    d746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    d748:	603b      	str	r3, [r7, #0]
    d74a:	2300      	movs	r3, #0
    d74c:	607b      	str	r3, [r7, #4]
    d74e:	6db8      	ldr	r0, [r7, #88]	; 0x58
    d750:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    d752:	683a      	ldr	r2, [r7, #0]
    d754:	687b      	ldr	r3, [r7, #4]
    d756:	4c49      	ldr	r4, [pc, #292]	; (d87c <_sercom_get_async_baud_val+0x1bc>)
    d758:	47a0      	blx	r4
    d75a:	0003      	movs	r3, r0
    d75c:	000c      	movs	r4, r1
    d75e:	673b      	str	r3, [r7, #112]	; 0x70
    d760:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    d762:	2100      	movs	r1, #0
    d764:	2201      	movs	r2, #1
    d766:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    d768:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    d76a:	1ac9      	subs	r1, r1, r3
    d76c:	41a2      	sbcs	r2, r4
    d76e:	000b      	movs	r3, r1
    d770:	0014      	movs	r4, r2
    d772:	66bb      	str	r3, [r7, #104]	; 0x68
    d774:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    d776:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    d778:	0c1b      	lsrs	r3, r3, #16
    d77a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    d77c:	0416      	lsls	r6, r2, #16
    d77e:	431e      	orrs	r6, r3
    d780:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    d782:	041d      	lsls	r5, r3, #16
    d784:	0033      	movs	r3, r6
    d786:	67bb      	str	r3, [r7, #120]	; 0x78
    d788:	2300      	movs	r3, #0
    d78a:	67fb      	str	r3, [r7, #124]	; 0x7c
    d78c:	e06a      	b.n	d864 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    d78e:	2343      	movs	r3, #67	; 0x43
    d790:	18fb      	adds	r3, r7, r3
    d792:	781b      	ldrb	r3, [r3, #0]
    d794:	2b01      	cmp	r3, #1
    d796:	d165      	bne.n	d864 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    d798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d79a:	633b      	str	r3, [r7, #48]	; 0x30
    d79c:	2300      	movs	r3, #0
    d79e:	637b      	str	r3, [r7, #52]	; 0x34
    d7a0:	2358      	movs	r3, #88	; 0x58
    d7a2:	2240      	movs	r2, #64	; 0x40
    d7a4:	4694      	mov	ip, r2
    d7a6:	44bc      	add	ip, r7
    d7a8:	4463      	add	r3, ip
    d7aa:	781b      	ldrb	r3, [r3, #0]
    d7ac:	b2db      	uxtb	r3, r3
    d7ae:	62bb      	str	r3, [r7, #40]	; 0x28
    d7b0:	2300      	movs	r3, #0
    d7b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    d7b4:	4c30      	ldr	r4, [pc, #192]	; (d878 <_sercom_get_async_baud_val+0x1b8>)
    d7b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d7ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
    d7bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
    d7be:	47a0      	blx	r4
    d7c0:	0003      	movs	r3, r0
    d7c2:	000c      	movs	r4, r1
    d7c4:	65bb      	str	r3, [r7, #88]	; 0x58
    d7c6:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    d7c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    d7ca:	623b      	str	r3, [r7, #32]
    d7cc:	2300      	movs	r3, #0
    d7ce:	627b      	str	r3, [r7, #36]	; 0x24
    d7d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    d7d2:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    d7d4:	001a      	movs	r2, r3
    d7d6:	0023      	movs	r3, r4
    d7d8:	6a38      	ldr	r0, [r7, #32]
    d7da:	6a79      	ldr	r1, [r7, #36]	; 0x24
    d7dc:	4c27      	ldr	r4, [pc, #156]	; (d87c <_sercom_get_async_baud_val+0x1bc>)
    d7de:	47a0      	blx	r4
    d7e0:	0003      	movs	r3, r0
    d7e2:	000c      	movs	r4, r1
    d7e4:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    d7e6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    d7e8:	2380      	movs	r3, #128	; 0x80
    d7ea:	019b      	lsls	r3, r3, #6
    d7ec:	429a      	cmp	r2, r3
    d7ee:	d901      	bls.n	d7f4 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    d7f0:	2340      	movs	r3, #64	; 0x40
    d7f2:	e03d      	b.n	d870 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    d7f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    d7f6:	61bb      	str	r3, [r7, #24]
    d7f8:	2300      	movs	r3, #0
    d7fa:	61fb      	str	r3, [r7, #28]
    d7fc:	69b9      	ldr	r1, [r7, #24]
    d7fe:	69fa      	ldr	r2, [r7, #28]
    d800:	000b      	movs	r3, r1
    d802:	0f5b      	lsrs	r3, r3, #29
    d804:	0010      	movs	r0, r2
    d806:	00c0      	lsls	r0, r0, #3
    d808:	63f8      	str	r0, [r7, #60]	; 0x3c
    d80a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    d80c:	4318      	orrs	r0, r3
    d80e:	63f8      	str	r0, [r7, #60]	; 0x3c
    d810:	000b      	movs	r3, r1
    d812:	00db      	lsls	r3, r3, #3
    d814:	63bb      	str	r3, [r7, #56]	; 0x38
    d816:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    d818:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    d81a:	001a      	movs	r2, r3
    d81c:	0023      	movs	r3, r4
    d81e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    d820:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    d822:	4c16      	ldr	r4, [pc, #88]	; (d87c <_sercom_get_async_baud_val+0x1bc>)
    d824:	47a0      	blx	r4
    d826:	0003      	movs	r3, r0
    d828:	000c      	movs	r4, r1
    d82a:	65bb      	str	r3, [r7, #88]	; 0x58
    d82c:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    d82e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    d830:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    d832:	b2d9      	uxtb	r1, r3
    d834:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    d836:	b2db      	uxtb	r3, r3
    d838:	00db      	lsls	r3, r3, #3
    d83a:	b2da      	uxtb	r2, r3
    d83c:	2317      	movs	r3, #23
    d83e:	2040      	movs	r0, #64	; 0x40
    d840:	4684      	mov	ip, r0
    d842:	44bc      	add	ip, r7
    d844:	4463      	add	r3, ip
    d846:	1a8a      	subs	r2, r1, r2
    d848:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    d84a:	2317      	movs	r3, #23
    d84c:	2240      	movs	r2, #64	; 0x40
    d84e:	4694      	mov	ip, r2
    d850:	44bc      	add	ip, r7
    d852:	4463      	add	r3, ip
    d854:	781b      	ldrb	r3, [r3, #0]
    d856:	035b      	lsls	r3, r3, #13
    d858:	001a      	movs	r2, r3
    d85a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    d85c:	4313      	orrs	r3, r2
    d85e:	67bb      	str	r3, [r7, #120]	; 0x78
    d860:	2300      	movs	r3, #0
    d862:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    d864:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    d866:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    d868:	b29a      	uxth	r2, r3
    d86a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d86c:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    d86e:	2300      	movs	r3, #0
}
    d870:	0018      	movs	r0, r3
    d872:	46bd      	mov	sp, r7
    d874:	b021      	add	sp, #132	; 0x84
    d876:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d878:	00015689 	.word	0x00015689
    d87c:	0000d563 	.word	0x0000d563

0000d880 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    d880:	b580      	push	{r7, lr}
    d882:	b084      	sub	sp, #16
    d884:	af00      	add	r7, sp, #0
    d886:	0002      	movs	r2, r0
    d888:	1dfb      	adds	r3, r7, #7
    d88a:	701a      	strb	r2, [r3, #0]
    d88c:	1dbb      	adds	r3, r7, #6
    d88e:	1c0a      	adds	r2, r1, #0
    d890:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    d892:	4b1a      	ldr	r3, [pc, #104]	; (d8fc <sercom_set_gclk_generator+0x7c>)
    d894:	781b      	ldrb	r3, [r3, #0]
    d896:	2201      	movs	r2, #1
    d898:	4053      	eors	r3, r2
    d89a:	b2db      	uxtb	r3, r3
    d89c:	2b00      	cmp	r3, #0
    d89e:	d103      	bne.n	d8a8 <sercom_set_gclk_generator+0x28>
    d8a0:	1dbb      	adds	r3, r7, #6
    d8a2:	781b      	ldrb	r3, [r3, #0]
    d8a4:	2b00      	cmp	r3, #0
    d8a6:	d01b      	beq.n	d8e0 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    d8a8:	230c      	movs	r3, #12
    d8aa:	18fb      	adds	r3, r7, r3
    d8ac:	0018      	movs	r0, r3
    d8ae:	4b14      	ldr	r3, [pc, #80]	; (d900 <sercom_set_gclk_generator+0x80>)
    d8b0:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    d8b2:	230c      	movs	r3, #12
    d8b4:	18fb      	adds	r3, r7, r3
    d8b6:	1dfa      	adds	r2, r7, #7
    d8b8:	7812      	ldrb	r2, [r2, #0]
    d8ba:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    d8bc:	230c      	movs	r3, #12
    d8be:	18fb      	adds	r3, r7, r3
    d8c0:	0019      	movs	r1, r3
    d8c2:	2013      	movs	r0, #19
    d8c4:	4b0f      	ldr	r3, [pc, #60]	; (d904 <sercom_set_gclk_generator+0x84>)
    d8c6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    d8c8:	2013      	movs	r0, #19
    d8ca:	4b0f      	ldr	r3, [pc, #60]	; (d908 <sercom_set_gclk_generator+0x88>)
    d8cc:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    d8ce:	4b0b      	ldr	r3, [pc, #44]	; (d8fc <sercom_set_gclk_generator+0x7c>)
    d8d0:	1dfa      	adds	r2, r7, #7
    d8d2:	7812      	ldrb	r2, [r2, #0]
    d8d4:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    d8d6:	4b09      	ldr	r3, [pc, #36]	; (d8fc <sercom_set_gclk_generator+0x7c>)
    d8d8:	2201      	movs	r2, #1
    d8da:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    d8dc:	2300      	movs	r3, #0
    d8de:	e008      	b.n	d8f2 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    d8e0:	4b06      	ldr	r3, [pc, #24]	; (d8fc <sercom_set_gclk_generator+0x7c>)
    d8e2:	785b      	ldrb	r3, [r3, #1]
    d8e4:	1dfa      	adds	r2, r7, #7
    d8e6:	7812      	ldrb	r2, [r2, #0]
    d8e8:	429a      	cmp	r2, r3
    d8ea:	d101      	bne.n	d8f0 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    d8ec:	2300      	movs	r3, #0
    d8ee:	e000      	b.n	d8f2 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    d8f0:	231d      	movs	r3, #29
}
    d8f2:	0018      	movs	r0, r3
    d8f4:	46bd      	mov	sp, r7
    d8f6:	b004      	add	sp, #16
    d8f8:	bd80      	pop	{r7, pc}
    d8fa:	46c0      	nop			; (mov r8, r8)
    d8fc:	200002a4 	.word	0x200002a4
    d900:	0000d54d 	.word	0x0000d54d
    d904:	000137ad 	.word	0x000137ad
    d908:	000137f1 	.word	0x000137f1

0000d90c <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    d90c:	b580      	push	{r7, lr}
    d90e:	b082      	sub	sp, #8
    d910:	af00      	add	r7, sp, #0
    d912:	6078      	str	r0, [r7, #4]
    d914:	000a      	movs	r2, r1
    d916:	1cfb      	adds	r3, r7, #3
    d918:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    d91a:	687b      	ldr	r3, [r7, #4]
    d91c:	4a4d      	ldr	r2, [pc, #308]	; (da54 <_sercom_get_default_pad+0x148>)
    d91e:	4293      	cmp	r3, r2
    d920:	d03f      	beq.n	d9a2 <_sercom_get_default_pad+0x96>
    d922:	4a4c      	ldr	r2, [pc, #304]	; (da54 <_sercom_get_default_pad+0x148>)
    d924:	4293      	cmp	r3, r2
    d926:	d806      	bhi.n	d936 <_sercom_get_default_pad+0x2a>
    d928:	4a4b      	ldr	r2, [pc, #300]	; (da58 <_sercom_get_default_pad+0x14c>)
    d92a:	4293      	cmp	r3, r2
    d92c:	d00f      	beq.n	d94e <_sercom_get_default_pad+0x42>
    d92e:	4a4b      	ldr	r2, [pc, #300]	; (da5c <_sercom_get_default_pad+0x150>)
    d930:	4293      	cmp	r3, r2
    d932:	d021      	beq.n	d978 <_sercom_get_default_pad+0x6c>
    d934:	e089      	b.n	da4a <_sercom_get_default_pad+0x13e>
    d936:	4a4a      	ldr	r2, [pc, #296]	; (da60 <_sercom_get_default_pad+0x154>)
    d938:	4293      	cmp	r3, r2
    d93a:	d100      	bne.n	d93e <_sercom_get_default_pad+0x32>
    d93c:	e05b      	b.n	d9f6 <_sercom_get_default_pad+0xea>
    d93e:	4a49      	ldr	r2, [pc, #292]	; (da64 <_sercom_get_default_pad+0x158>)
    d940:	4293      	cmp	r3, r2
    d942:	d100      	bne.n	d946 <_sercom_get_default_pad+0x3a>
    d944:	e06c      	b.n	da20 <_sercom_get_default_pad+0x114>
    d946:	4a48      	ldr	r2, [pc, #288]	; (da68 <_sercom_get_default_pad+0x15c>)
    d948:	4293      	cmp	r3, r2
    d94a:	d03f      	beq.n	d9cc <_sercom_get_default_pad+0xc0>
    d94c:	e07d      	b.n	da4a <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    d94e:	1cfb      	adds	r3, r7, #3
    d950:	781b      	ldrb	r3, [r3, #0]
    d952:	2b01      	cmp	r3, #1
    d954:	d00a      	beq.n	d96c <_sercom_get_default_pad+0x60>
    d956:	dc02      	bgt.n	d95e <_sercom_get_default_pad+0x52>
    d958:	2b00      	cmp	r3, #0
    d95a:	d005      	beq.n	d968 <_sercom_get_default_pad+0x5c>
    d95c:	e075      	b.n	da4a <_sercom_get_default_pad+0x13e>
    d95e:	2b02      	cmp	r3, #2
    d960:	d006      	beq.n	d970 <_sercom_get_default_pad+0x64>
    d962:	2b03      	cmp	r3, #3
    d964:	d006      	beq.n	d974 <_sercom_get_default_pad+0x68>
    d966:	e070      	b.n	da4a <_sercom_get_default_pad+0x13e>
    d968:	4b40      	ldr	r3, [pc, #256]	; (da6c <_sercom_get_default_pad+0x160>)
    d96a:	e06f      	b.n	da4c <_sercom_get_default_pad+0x140>
    d96c:	4b40      	ldr	r3, [pc, #256]	; (da70 <_sercom_get_default_pad+0x164>)
    d96e:	e06d      	b.n	da4c <_sercom_get_default_pad+0x140>
    d970:	4b40      	ldr	r3, [pc, #256]	; (da74 <_sercom_get_default_pad+0x168>)
    d972:	e06b      	b.n	da4c <_sercom_get_default_pad+0x140>
    d974:	4b40      	ldr	r3, [pc, #256]	; (da78 <_sercom_get_default_pad+0x16c>)
    d976:	e069      	b.n	da4c <_sercom_get_default_pad+0x140>
    d978:	1cfb      	adds	r3, r7, #3
    d97a:	781b      	ldrb	r3, [r3, #0]
    d97c:	2b01      	cmp	r3, #1
    d97e:	d00a      	beq.n	d996 <_sercom_get_default_pad+0x8a>
    d980:	dc02      	bgt.n	d988 <_sercom_get_default_pad+0x7c>
    d982:	2b00      	cmp	r3, #0
    d984:	d005      	beq.n	d992 <_sercom_get_default_pad+0x86>
    d986:	e060      	b.n	da4a <_sercom_get_default_pad+0x13e>
    d988:	2b02      	cmp	r3, #2
    d98a:	d006      	beq.n	d99a <_sercom_get_default_pad+0x8e>
    d98c:	2b03      	cmp	r3, #3
    d98e:	d006      	beq.n	d99e <_sercom_get_default_pad+0x92>
    d990:	e05b      	b.n	da4a <_sercom_get_default_pad+0x13e>
    d992:	2303      	movs	r3, #3
    d994:	e05a      	b.n	da4c <_sercom_get_default_pad+0x140>
    d996:	4b39      	ldr	r3, [pc, #228]	; (da7c <_sercom_get_default_pad+0x170>)
    d998:	e058      	b.n	da4c <_sercom_get_default_pad+0x140>
    d99a:	4b39      	ldr	r3, [pc, #228]	; (da80 <_sercom_get_default_pad+0x174>)
    d99c:	e056      	b.n	da4c <_sercom_get_default_pad+0x140>
    d99e:	4b39      	ldr	r3, [pc, #228]	; (da84 <_sercom_get_default_pad+0x178>)
    d9a0:	e054      	b.n	da4c <_sercom_get_default_pad+0x140>
    d9a2:	1cfb      	adds	r3, r7, #3
    d9a4:	781b      	ldrb	r3, [r3, #0]
    d9a6:	2b01      	cmp	r3, #1
    d9a8:	d00a      	beq.n	d9c0 <_sercom_get_default_pad+0xb4>
    d9aa:	dc02      	bgt.n	d9b2 <_sercom_get_default_pad+0xa6>
    d9ac:	2b00      	cmp	r3, #0
    d9ae:	d005      	beq.n	d9bc <_sercom_get_default_pad+0xb0>
    d9b0:	e04b      	b.n	da4a <_sercom_get_default_pad+0x13e>
    d9b2:	2b02      	cmp	r3, #2
    d9b4:	d006      	beq.n	d9c4 <_sercom_get_default_pad+0xb8>
    d9b6:	2b03      	cmp	r3, #3
    d9b8:	d006      	beq.n	d9c8 <_sercom_get_default_pad+0xbc>
    d9ba:	e046      	b.n	da4a <_sercom_get_default_pad+0x13e>
    d9bc:	4b32      	ldr	r3, [pc, #200]	; (da88 <_sercom_get_default_pad+0x17c>)
    d9be:	e045      	b.n	da4c <_sercom_get_default_pad+0x140>
    d9c0:	4b32      	ldr	r3, [pc, #200]	; (da8c <_sercom_get_default_pad+0x180>)
    d9c2:	e043      	b.n	da4c <_sercom_get_default_pad+0x140>
    d9c4:	4b32      	ldr	r3, [pc, #200]	; (da90 <_sercom_get_default_pad+0x184>)
    d9c6:	e041      	b.n	da4c <_sercom_get_default_pad+0x140>
    d9c8:	4b32      	ldr	r3, [pc, #200]	; (da94 <_sercom_get_default_pad+0x188>)
    d9ca:	e03f      	b.n	da4c <_sercom_get_default_pad+0x140>
    d9cc:	1cfb      	adds	r3, r7, #3
    d9ce:	781b      	ldrb	r3, [r3, #0]
    d9d0:	2b01      	cmp	r3, #1
    d9d2:	d00a      	beq.n	d9ea <_sercom_get_default_pad+0xde>
    d9d4:	dc02      	bgt.n	d9dc <_sercom_get_default_pad+0xd0>
    d9d6:	2b00      	cmp	r3, #0
    d9d8:	d005      	beq.n	d9e6 <_sercom_get_default_pad+0xda>
    d9da:	e036      	b.n	da4a <_sercom_get_default_pad+0x13e>
    d9dc:	2b02      	cmp	r3, #2
    d9de:	d006      	beq.n	d9ee <_sercom_get_default_pad+0xe2>
    d9e0:	2b03      	cmp	r3, #3
    d9e2:	d006      	beq.n	d9f2 <_sercom_get_default_pad+0xe6>
    d9e4:	e031      	b.n	da4a <_sercom_get_default_pad+0x13e>
    d9e6:	4b2c      	ldr	r3, [pc, #176]	; (da98 <_sercom_get_default_pad+0x18c>)
    d9e8:	e030      	b.n	da4c <_sercom_get_default_pad+0x140>
    d9ea:	4b2c      	ldr	r3, [pc, #176]	; (da9c <_sercom_get_default_pad+0x190>)
    d9ec:	e02e      	b.n	da4c <_sercom_get_default_pad+0x140>
    d9ee:	4b2c      	ldr	r3, [pc, #176]	; (daa0 <_sercom_get_default_pad+0x194>)
    d9f0:	e02c      	b.n	da4c <_sercom_get_default_pad+0x140>
    d9f2:	4b2c      	ldr	r3, [pc, #176]	; (daa4 <_sercom_get_default_pad+0x198>)
    d9f4:	e02a      	b.n	da4c <_sercom_get_default_pad+0x140>
    d9f6:	1cfb      	adds	r3, r7, #3
    d9f8:	781b      	ldrb	r3, [r3, #0]
    d9fa:	2b01      	cmp	r3, #1
    d9fc:	d00a      	beq.n	da14 <_sercom_get_default_pad+0x108>
    d9fe:	dc02      	bgt.n	da06 <_sercom_get_default_pad+0xfa>
    da00:	2b00      	cmp	r3, #0
    da02:	d005      	beq.n	da10 <_sercom_get_default_pad+0x104>
    da04:	e021      	b.n	da4a <_sercom_get_default_pad+0x13e>
    da06:	2b02      	cmp	r3, #2
    da08:	d006      	beq.n	da18 <_sercom_get_default_pad+0x10c>
    da0a:	2b03      	cmp	r3, #3
    da0c:	d006      	beq.n	da1c <_sercom_get_default_pad+0x110>
    da0e:	e01c      	b.n	da4a <_sercom_get_default_pad+0x13e>
    da10:	4b25      	ldr	r3, [pc, #148]	; (daa8 <_sercom_get_default_pad+0x19c>)
    da12:	e01b      	b.n	da4c <_sercom_get_default_pad+0x140>
    da14:	4b25      	ldr	r3, [pc, #148]	; (daac <_sercom_get_default_pad+0x1a0>)
    da16:	e019      	b.n	da4c <_sercom_get_default_pad+0x140>
    da18:	4b25      	ldr	r3, [pc, #148]	; (dab0 <_sercom_get_default_pad+0x1a4>)
    da1a:	e017      	b.n	da4c <_sercom_get_default_pad+0x140>
    da1c:	4b25      	ldr	r3, [pc, #148]	; (dab4 <_sercom_get_default_pad+0x1a8>)
    da1e:	e015      	b.n	da4c <_sercom_get_default_pad+0x140>
    da20:	1cfb      	adds	r3, r7, #3
    da22:	781b      	ldrb	r3, [r3, #0]
    da24:	2b01      	cmp	r3, #1
    da26:	d00a      	beq.n	da3e <_sercom_get_default_pad+0x132>
    da28:	dc02      	bgt.n	da30 <_sercom_get_default_pad+0x124>
    da2a:	2b00      	cmp	r3, #0
    da2c:	d005      	beq.n	da3a <_sercom_get_default_pad+0x12e>
    da2e:	e00c      	b.n	da4a <_sercom_get_default_pad+0x13e>
    da30:	2b02      	cmp	r3, #2
    da32:	d006      	beq.n	da42 <_sercom_get_default_pad+0x136>
    da34:	2b03      	cmp	r3, #3
    da36:	d006      	beq.n	da46 <_sercom_get_default_pad+0x13a>
    da38:	e007      	b.n	da4a <_sercom_get_default_pad+0x13e>
    da3a:	4b1f      	ldr	r3, [pc, #124]	; (dab8 <_sercom_get_default_pad+0x1ac>)
    da3c:	e006      	b.n	da4c <_sercom_get_default_pad+0x140>
    da3e:	4b1f      	ldr	r3, [pc, #124]	; (dabc <_sercom_get_default_pad+0x1b0>)
    da40:	e004      	b.n	da4c <_sercom_get_default_pad+0x140>
    da42:	4b1f      	ldr	r3, [pc, #124]	; (dac0 <_sercom_get_default_pad+0x1b4>)
    da44:	e002      	b.n	da4c <_sercom_get_default_pad+0x140>
    da46:	4b1f      	ldr	r3, [pc, #124]	; (dac4 <_sercom_get_default_pad+0x1b8>)
    da48:	e000      	b.n	da4c <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    da4a:	2300      	movs	r3, #0
}
    da4c:	0018      	movs	r0, r3
    da4e:	46bd      	mov	sp, r7
    da50:	b002      	add	sp, #8
    da52:	bd80      	pop	{r7, pc}
    da54:	42001000 	.word	0x42001000
    da58:	42000800 	.word	0x42000800
    da5c:	42000c00 	.word	0x42000c00
    da60:	42001800 	.word	0x42001800
    da64:	42001c00 	.word	0x42001c00
    da68:	42001400 	.word	0x42001400
    da6c:	00040003 	.word	0x00040003
    da70:	00050003 	.word	0x00050003
    da74:	00060003 	.word	0x00060003
    da78:	00070003 	.word	0x00070003
    da7c:	00010003 	.word	0x00010003
    da80:	001e0003 	.word	0x001e0003
    da84:	001f0003 	.word	0x001f0003
    da88:	00080003 	.word	0x00080003
    da8c:	00090003 	.word	0x00090003
    da90:	000a0003 	.word	0x000a0003
    da94:	000b0003 	.word	0x000b0003
    da98:	00100003 	.word	0x00100003
    da9c:	00110003 	.word	0x00110003
    daa0:	00120003 	.word	0x00120003
    daa4:	00130003 	.word	0x00130003
    daa8:	000c0003 	.word	0x000c0003
    daac:	000d0003 	.word	0x000d0003
    dab0:	000e0003 	.word	0x000e0003
    dab4:	000f0003 	.word	0x000f0003
    dab8:	00160003 	.word	0x00160003
    dabc:	00170003 	.word	0x00170003
    dac0:	00180003 	.word	0x00180003
    dac4:	00190003 	.word	0x00190003

0000dac8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    dac8:	b590      	push	{r4, r7, lr}
    daca:	b08b      	sub	sp, #44	; 0x2c
    dacc:	af00      	add	r7, sp, #0
    dace:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    dad0:	230c      	movs	r3, #12
    dad2:	18fb      	adds	r3, r7, r3
    dad4:	4a0f      	ldr	r2, [pc, #60]	; (db14 <_sercom_get_sercom_inst_index+0x4c>)
    dad6:	ca13      	ldmia	r2!, {r0, r1, r4}
    dad8:	c313      	stmia	r3!, {r0, r1, r4}
    dada:	ca13      	ldmia	r2!, {r0, r1, r4}
    dadc:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    dade:	2300      	movs	r3, #0
    dae0:	627b      	str	r3, [r7, #36]	; 0x24
    dae2:	e00e      	b.n	db02 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    dae4:	230c      	movs	r3, #12
    dae6:	18fb      	adds	r3, r7, r3
    dae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    daea:	0092      	lsls	r2, r2, #2
    daec:	58d3      	ldr	r3, [r2, r3]
    daee:	001a      	movs	r2, r3
    daf0:	687b      	ldr	r3, [r7, #4]
    daf2:	429a      	cmp	r2, r3
    daf4:	d102      	bne.n	dafc <_sercom_get_sercom_inst_index+0x34>
			return i;
    daf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    daf8:	b2db      	uxtb	r3, r3
    dafa:	e006      	b.n	db0a <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    dafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    dafe:	3301      	adds	r3, #1
    db00:	627b      	str	r3, [r7, #36]	; 0x24
    db02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    db04:	2b05      	cmp	r3, #5
    db06:	d9ed      	bls.n	dae4 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    db08:	2300      	movs	r3, #0
}
    db0a:	0018      	movs	r0, r3
    db0c:	46bd      	mov	sp, r7
    db0e:	b00b      	add	sp, #44	; 0x2c
    db10:	bd90      	pop	{r4, r7, pc}
    db12:	46c0      	nop			; (mov r8, r8)
    db14:	000196c8 	.word	0x000196c8

0000db18 <system_cpu_clock_get_hz>:
{
    db18:	b580      	push	{r7, lr}
    db1a:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    db1c:	2000      	movs	r0, #0
    db1e:	4b05      	ldr	r3, [pc, #20]	; (db34 <system_cpu_clock_get_hz+0x1c>)
    db20:	4798      	blx	r3
    db22:	0002      	movs	r2, r0
    db24:	4b04      	ldr	r3, [pc, #16]	; (db38 <system_cpu_clock_get_hz+0x20>)
    db26:	7a1b      	ldrb	r3, [r3, #8]
    db28:	b2db      	uxtb	r3, r3
    db2a:	40da      	lsrs	r2, r3
    db2c:	0013      	movs	r3, r2
}
    db2e:	0018      	movs	r0, r3
    db30:	46bd      	mov	sp, r7
    db32:	bd80      	pop	{r7, pc}
    db34:	000136d5 	.word	0x000136d5
    db38:	40000400 	.word	0x40000400

0000db3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    db3c:	b580      	push	{r7, lr}
    db3e:	b084      	sub	sp, #16
    db40:	af00      	add	r7, sp, #0
    db42:	60f8      	str	r0, [r7, #12]
    db44:	60b9      	str	r1, [r7, #8]
    db46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    db48:	68fb      	ldr	r3, [r7, #12]
    db4a:	3b04      	subs	r3, #4
    db4c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    db4e:	68fb      	ldr	r3, [r7, #12]
    db50:	2280      	movs	r2, #128	; 0x80
    db52:	0452      	lsls	r2, r2, #17
    db54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    db56:	68fb      	ldr	r3, [r7, #12]
    db58:	3b04      	subs	r3, #4
    db5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    db5c:	68ba      	ldr	r2, [r7, #8]
    db5e:	68fb      	ldr	r3, [r7, #12]
    db60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    db62:	68fb      	ldr	r3, [r7, #12]
    db64:	3b04      	subs	r3, #4
    db66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    db68:	4a08      	ldr	r2, [pc, #32]	; (db8c <pxPortInitialiseStack+0x50>)
    db6a:	68fb      	ldr	r3, [r7, #12]
    db6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    db6e:	68fb      	ldr	r3, [r7, #12]
    db70:	3b14      	subs	r3, #20
    db72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    db74:	687a      	ldr	r2, [r7, #4]
    db76:	68fb      	ldr	r3, [r7, #12]
    db78:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    db7a:	68fb      	ldr	r3, [r7, #12]
    db7c:	3b20      	subs	r3, #32
    db7e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    db80:	68fb      	ldr	r3, [r7, #12]
}
    db82:	0018      	movs	r0, r3
    db84:	46bd      	mov	sp, r7
    db86:	b004      	add	sp, #16
    db88:	bd80      	pop	{r7, pc}
    db8a:	46c0      	nop			; (mov r8, r8)
    db8c:	0000db91 	.word	0x0000db91

0000db90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    db90:	b580      	push	{r7, lr}
    db92:	b082      	sub	sp, #8
    db94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
    db96:	2300      	movs	r3, #0
    db98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    db9a:	4b07      	ldr	r3, [pc, #28]	; (dbb8 <prvTaskExitError+0x28>)
    db9c:	681b      	ldr	r3, [r3, #0]
    db9e:	3301      	adds	r3, #1
    dba0:	d001      	beq.n	dba6 <prvTaskExitError+0x16>
    dba2:	b672      	cpsid	i
    dba4:	e7fe      	b.n	dba4 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
    dba6:	b672      	cpsid	i
	while( ulDummy == 0 )
    dba8:	46c0      	nop			; (mov r8, r8)
    dbaa:	687b      	ldr	r3, [r7, #4]
    dbac:	2b00      	cmp	r3, #0
    dbae:	d0fc      	beq.n	dbaa <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    dbb0:	46c0      	nop			; (mov r8, r8)
    dbb2:	46bd      	mov	sp, r7
    dbb4:	b002      	add	sp, #8
    dbb6:	bd80      	pop	{r7, pc}
    dbb8:	20000010 	.word	0x20000010

0000dbbc <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    dbbc:	b580      	push	{r7, lr}
    dbbe:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
    dbc0:	46c0      	nop			; (mov r8, r8)
    dbc2:	46bd      	mov	sp, r7
    dbc4:	bd80      	pop	{r7, pc}
	...

0000dbd0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    dbd0:	4a0b      	ldr	r2, [pc, #44]	; (dc00 <pxCurrentTCBConst2>)
    dbd2:	6813      	ldr	r3, [r2, #0]
    dbd4:	6818      	ldr	r0, [r3, #0]
    dbd6:	3020      	adds	r0, #32
    dbd8:	f380 8809 	msr	PSP, r0
    dbdc:	2002      	movs	r0, #2
    dbde:	f380 8814 	msr	CONTROL, r0
    dbe2:	f3bf 8f6f 	isb	sy
    dbe6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    dbe8:	46ae      	mov	lr, r5
    dbea:	bc08      	pop	{r3}
    dbec:	bc04      	pop	{r2}
    dbee:	b662      	cpsie	i
    dbf0:	4718      	bx	r3
    dbf2:	46c0      	nop			; (mov r8, r8)
    dbf4:	46c0      	nop			; (mov r8, r8)
    dbf6:	46c0      	nop			; (mov r8, r8)
    dbf8:	46c0      	nop			; (mov r8, r8)
    dbfa:	46c0      	nop			; (mov r8, r8)
    dbfc:	46c0      	nop			; (mov r8, r8)
    dbfe:	46c0      	nop			; (mov r8, r8)

0000dc00 <pxCurrentTCBConst2>:
    dc00:	200002a8 	.word	0x200002a8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
    dc04:	46c0      	nop			; (mov r8, r8)
    dc06:	46c0      	nop			; (mov r8, r8)

0000dc08 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    dc08:	b580      	push	{r7, lr}
    dc0a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    dc0c:	4b0e      	ldr	r3, [pc, #56]	; (dc48 <xPortStartScheduler+0x40>)
    dc0e:	4a0e      	ldr	r2, [pc, #56]	; (dc48 <xPortStartScheduler+0x40>)
    dc10:	6812      	ldr	r2, [r2, #0]
    dc12:	21ff      	movs	r1, #255	; 0xff
    dc14:	0409      	lsls	r1, r1, #16
    dc16:	430a      	orrs	r2, r1
    dc18:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    dc1a:	4b0b      	ldr	r3, [pc, #44]	; (dc48 <xPortStartScheduler+0x40>)
    dc1c:	4a0a      	ldr	r2, [pc, #40]	; (dc48 <xPortStartScheduler+0x40>)
    dc1e:	6812      	ldr	r2, [r2, #0]
    dc20:	21ff      	movs	r1, #255	; 0xff
    dc22:	0609      	lsls	r1, r1, #24
    dc24:	430a      	orrs	r2, r1
    dc26:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    dc28:	4b08      	ldr	r3, [pc, #32]	; (dc4c <xPortStartScheduler+0x44>)
    dc2a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    dc2c:	4b08      	ldr	r3, [pc, #32]	; (dc50 <xPortStartScheduler+0x48>)
    dc2e:	2200      	movs	r2, #0
    dc30:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    dc32:	4b08      	ldr	r3, [pc, #32]	; (dc54 <xPortStartScheduler+0x4c>)
    dc34:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
    dc36:	4b08      	ldr	r3, [pc, #32]	; (dc58 <xPortStartScheduler+0x50>)
    dc38:	4798      	blx	r3
	prvTaskExitError();
    dc3a:	4b08      	ldr	r3, [pc, #32]	; (dc5c <xPortStartScheduler+0x54>)
    dc3c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
    dc3e:	2300      	movs	r3, #0
}
    dc40:	0018      	movs	r0, r3
    dc42:	46bd      	mov	sp, r7
    dc44:	bd80      	pop	{r7, pc}
    dc46:	46c0      	nop			; (mov r8, r8)
    dc48:	e000ed20 	.word	0xe000ed20
    dc4c:	0000dd79 	.word	0x0000dd79
    dc50:	20000010 	.word	0x20000010
    dc54:	0000dbd1 	.word	0x0000dbd1
    dc58:	0000f38d 	.word	0x0000f38d
    dc5c:	0000db91 	.word	0x0000db91

0000dc60 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
    dc60:	b580      	push	{r7, lr}
    dc62:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    dc64:	4b05      	ldr	r3, [pc, #20]	; (dc7c <vPortYield+0x1c>)
    dc66:	2280      	movs	r2, #128	; 0x80
    dc68:	0552      	lsls	r2, r2, #21
    dc6a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
    dc6c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    dc70:	f3bf 8f6f 	isb	sy
}
    dc74:	46c0      	nop			; (mov r8, r8)
    dc76:	46bd      	mov	sp, r7
    dc78:	bd80      	pop	{r7, pc}
    dc7a:	46c0      	nop			; (mov r8, r8)
    dc7c:	e000ed04 	.word	0xe000ed04

0000dc80 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    dc80:	b580      	push	{r7, lr}
    dc82:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
    dc84:	b672      	cpsid	i
    uxCriticalNesting++;
    dc86:	4b06      	ldr	r3, [pc, #24]	; (dca0 <vPortEnterCritical+0x20>)
    dc88:	681b      	ldr	r3, [r3, #0]
    dc8a:	1c5a      	adds	r2, r3, #1
    dc8c:	4b04      	ldr	r3, [pc, #16]	; (dca0 <vPortEnterCritical+0x20>)
    dc8e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
    dc90:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    dc94:	f3bf 8f6f 	isb	sy
}
    dc98:	46c0      	nop			; (mov r8, r8)
    dc9a:	46bd      	mov	sp, r7
    dc9c:	bd80      	pop	{r7, pc}
    dc9e:	46c0      	nop			; (mov r8, r8)
    dca0:	20000010 	.word	0x20000010

0000dca4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    dca4:	b580      	push	{r7, lr}
    dca6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
    dca8:	4b09      	ldr	r3, [pc, #36]	; (dcd0 <vPortExitCritical+0x2c>)
    dcaa:	681b      	ldr	r3, [r3, #0]
    dcac:	2b00      	cmp	r3, #0
    dcae:	d101      	bne.n	dcb4 <vPortExitCritical+0x10>
    dcb0:	b672      	cpsid	i
    dcb2:	e7fe      	b.n	dcb2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
    dcb4:	4b06      	ldr	r3, [pc, #24]	; (dcd0 <vPortExitCritical+0x2c>)
    dcb6:	681b      	ldr	r3, [r3, #0]
    dcb8:	1e5a      	subs	r2, r3, #1
    dcba:	4b05      	ldr	r3, [pc, #20]	; (dcd0 <vPortExitCritical+0x2c>)
    dcbc:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
    dcbe:	4b04      	ldr	r3, [pc, #16]	; (dcd0 <vPortExitCritical+0x2c>)
    dcc0:	681b      	ldr	r3, [r3, #0]
    dcc2:	2b00      	cmp	r3, #0
    dcc4:	d100      	bne.n	dcc8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
    dcc6:	b662      	cpsie	i
    }
}
    dcc8:	46c0      	nop			; (mov r8, r8)
    dcca:	46bd      	mov	sp, r7
    dccc:	bd80      	pop	{r7, pc}
    dcce:	46c0      	nop			; (mov r8, r8)
    dcd0:	20000010 	.word	0x20000010

0000dcd4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
    dcd4:	f3ef 8010 	mrs	r0, PRIMASK
    dcd8:	b672      	cpsid	i
    dcda:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
    dcdc:	46c0      	nop			; (mov r8, r8)
    dcde:	0018      	movs	r0, r3

0000dce0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
    dce0:	f380 8810 	msr	PRIMASK, r0
    dce4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
    dce6:	46c0      	nop			; (mov r8, r8)
	...

0000dcf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    dcf0:	f3ef 8009 	mrs	r0, PSP
    dcf4:	4b0e      	ldr	r3, [pc, #56]	; (dd30 <pxCurrentTCBConst>)
    dcf6:	681a      	ldr	r2, [r3, #0]
    dcf8:	3820      	subs	r0, #32
    dcfa:	6010      	str	r0, [r2, #0]
    dcfc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    dcfe:	4644      	mov	r4, r8
    dd00:	464d      	mov	r5, r9
    dd02:	4656      	mov	r6, sl
    dd04:	465f      	mov	r7, fp
    dd06:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    dd08:	b508      	push	{r3, lr}
    dd0a:	b672      	cpsid	i
    dd0c:	f001 fb3e 	bl	f38c <vTaskSwitchContext>
    dd10:	b662      	cpsie	i
    dd12:	bc0c      	pop	{r2, r3}
    dd14:	6811      	ldr	r1, [r2, #0]
    dd16:	6808      	ldr	r0, [r1, #0]
    dd18:	3010      	adds	r0, #16
    dd1a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    dd1c:	46a0      	mov	r8, r4
    dd1e:	46a9      	mov	r9, r5
    dd20:	46b2      	mov	sl, r6
    dd22:	46bb      	mov	fp, r7
    dd24:	f380 8809 	msr	PSP, r0
    dd28:	3820      	subs	r0, #32
    dd2a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    dd2c:	4718      	bx	r3
    dd2e:	46c0      	nop			; (mov r8, r8)

0000dd30 <pxCurrentTCBConst>:
    dd30:	200002a8 	.word	0x200002a8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
    dd34:	46c0      	nop			; (mov r8, r8)
    dd36:	46c0      	nop			; (mov r8, r8)

0000dd38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    dd38:	b580      	push	{r7, lr}
    dd3a:	b082      	sub	sp, #8
    dd3c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    dd3e:	4b0a      	ldr	r3, [pc, #40]	; (dd68 <SysTick_Handler+0x30>)
    dd40:	4798      	blx	r3
    dd42:	0003      	movs	r3, r0
    dd44:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    dd46:	4b09      	ldr	r3, [pc, #36]	; (dd6c <SysTick_Handler+0x34>)
    dd48:	4798      	blx	r3
    dd4a:	1e03      	subs	r3, r0, #0
    dd4c:	d003      	beq.n	dd56 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    dd4e:	4b08      	ldr	r3, [pc, #32]	; (dd70 <SysTick_Handler+0x38>)
    dd50:	2280      	movs	r2, #128	; 0x80
    dd52:	0552      	lsls	r2, r2, #21
    dd54:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    dd56:	687b      	ldr	r3, [r7, #4]
    dd58:	0018      	movs	r0, r3
    dd5a:	4b06      	ldr	r3, [pc, #24]	; (dd74 <SysTick_Handler+0x3c>)
    dd5c:	4798      	blx	r3
}
    dd5e:	46c0      	nop			; (mov r8, r8)
    dd60:	46bd      	mov	sp, r7
    dd62:	b002      	add	sp, #8
    dd64:	bd80      	pop	{r7, pc}
    dd66:	46c0      	nop			; (mov r8, r8)
    dd68:	0000dcd5 	.word	0x0000dcd5
    dd6c:	0000f219 	.word	0x0000f219
    dd70:	e000ed04 	.word	0xe000ed04
    dd74:	0000dce1 	.word	0x0000dce1

0000dd78 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    dd78:	b5b0      	push	{r4, r5, r7, lr}
    dd7a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
    dd7c:	4b0a      	ldr	r3, [pc, #40]	; (dda8 <prvSetupTimerInterrupt+0x30>)
    dd7e:	2200      	movs	r2, #0
    dd80:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
    dd82:	4b0a      	ldr	r3, [pc, #40]	; (ddac <prvSetupTimerInterrupt+0x34>)
    dd84:	2200      	movs	r2, #0
    dd86:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    dd88:	4c09      	ldr	r4, [pc, #36]	; (ddb0 <prvSetupTimerInterrupt+0x38>)
    dd8a:	4b0a      	ldr	r3, [pc, #40]	; (ddb4 <prvSetupTimerInterrupt+0x3c>)
    dd8c:	4798      	blx	r3
    dd8e:	4b0a      	ldr	r3, [pc, #40]	; (ddb8 <prvSetupTimerInterrupt+0x40>)
    dd90:	22fa      	movs	r2, #250	; 0xfa
    dd92:	0091      	lsls	r1, r2, #2
    dd94:	4798      	blx	r3
    dd96:	0003      	movs	r3, r0
    dd98:	3b01      	subs	r3, #1
    dd9a:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    dd9c:	4b02      	ldr	r3, [pc, #8]	; (dda8 <prvSetupTimerInterrupt+0x30>)
    dd9e:	2207      	movs	r2, #7
    dda0:	601a      	str	r2, [r3, #0]
}
    dda2:	46c0      	nop			; (mov r8, r8)
    dda4:	46bd      	mov	sp, r7
    dda6:	bdb0      	pop	{r4, r5, r7, pc}
    dda8:	e000e010 	.word	0xe000e010
    ddac:	e000e018 	.word	0xe000e018
    ddb0:	e000e014 	.word	0xe000e014
    ddb4:	0000db19 	.word	0x0000db19
    ddb8:	000152e1 	.word	0x000152e1

0000ddbc <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    ddbc:	b580      	push	{r7, lr}
    ddbe:	b084      	sub	sp, #16
    ddc0:	af00      	add	r7, sp, #0
    ddc2:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
    ddc4:	4b07      	ldr	r3, [pc, #28]	; (dde4 <pvPortMalloc+0x28>)
    ddc6:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
    ddc8:	687b      	ldr	r3, [r7, #4]
    ddca:	0018      	movs	r0, r3
    ddcc:	4b06      	ldr	r3, [pc, #24]	; (dde8 <pvPortMalloc+0x2c>)
    ddce:	4798      	blx	r3
    ddd0:	0003      	movs	r3, r0
    ddd2:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    ddd4:	4b05      	ldr	r3, [pc, #20]	; (ddec <pvPortMalloc+0x30>)
    ddd6:	4798      	blx	r3
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    ddd8:	68fb      	ldr	r3, [r7, #12]
}
    ddda:	0018      	movs	r0, r3
    dddc:	46bd      	mov	sp, r7
    ddde:	b004      	add	sp, #16
    dde0:	bd80      	pop	{r7, pc}
    dde2:	46c0      	nop			; (mov r8, r8)
    dde4:	0000f0b1 	.word	0x0000f0b1
    dde8:	00017ad5 	.word	0x00017ad5
    ddec:	0000f0c9 	.word	0x0000f0c9

0000ddf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    ddf0:	b580      	push	{r7, lr}
    ddf2:	b082      	sub	sp, #8
    ddf4:	af00      	add	r7, sp, #0
    ddf6:	6078      	str	r0, [r7, #4]
	if( pv )
    ddf8:	687b      	ldr	r3, [r7, #4]
    ddfa:	2b00      	cmp	r3, #0
    ddfc:	d007      	beq.n	de0e <vPortFree+0x1e>
	{
		vTaskSuspendAll();
    ddfe:	4b06      	ldr	r3, [pc, #24]	; (de18 <vPortFree+0x28>)
    de00:	4798      	blx	r3
		{
			free( pv );
    de02:	687b      	ldr	r3, [r7, #4]
    de04:	0018      	movs	r0, r3
    de06:	4b05      	ldr	r3, [pc, #20]	; (de1c <vPortFree+0x2c>)
    de08:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
    de0a:	4b05      	ldr	r3, [pc, #20]	; (de20 <vPortFree+0x30>)
    de0c:	4798      	blx	r3
	}
}
    de0e:	46c0      	nop			; (mov r8, r8)
    de10:	46bd      	mov	sp, r7
    de12:	b002      	add	sp, #8
    de14:	bd80      	pop	{r7, pc}
    de16:	46c0      	nop			; (mov r8, r8)
    de18:	0000f0b1 	.word	0x0000f0b1
    de1c:	00017ae9 	.word	0x00017ae9
    de20:	0000f0c9 	.word	0x0000f0c9

0000de24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    de24:	b580      	push	{r7, lr}
    de26:	b082      	sub	sp, #8
    de28:	af00      	add	r7, sp, #0
    de2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    de2c:	687b      	ldr	r3, [r7, #4]
    de2e:	3308      	adds	r3, #8
    de30:	001a      	movs	r2, r3
    de32:	687b      	ldr	r3, [r7, #4]
    de34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    de36:	687b      	ldr	r3, [r7, #4]
    de38:	2201      	movs	r2, #1
    de3a:	4252      	negs	r2, r2
    de3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    de3e:	687b      	ldr	r3, [r7, #4]
    de40:	3308      	adds	r3, #8
    de42:	001a      	movs	r2, r3
    de44:	687b      	ldr	r3, [r7, #4]
    de46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    de48:	687b      	ldr	r3, [r7, #4]
    de4a:	3308      	adds	r3, #8
    de4c:	001a      	movs	r2, r3
    de4e:	687b      	ldr	r3, [r7, #4]
    de50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    de52:	687b      	ldr	r3, [r7, #4]
    de54:	2200      	movs	r2, #0
    de56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    de58:	46c0      	nop			; (mov r8, r8)
    de5a:	46bd      	mov	sp, r7
    de5c:	b002      	add	sp, #8
    de5e:	bd80      	pop	{r7, pc}

0000de60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    de60:	b580      	push	{r7, lr}
    de62:	b082      	sub	sp, #8
    de64:	af00      	add	r7, sp, #0
    de66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    de68:	687b      	ldr	r3, [r7, #4]
    de6a:	2200      	movs	r2, #0
    de6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    de6e:	46c0      	nop			; (mov r8, r8)
    de70:	46bd      	mov	sp, r7
    de72:	b002      	add	sp, #8
    de74:	bd80      	pop	{r7, pc}

0000de76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    de76:	b580      	push	{r7, lr}
    de78:	b084      	sub	sp, #16
    de7a:	af00      	add	r7, sp, #0
    de7c:	6078      	str	r0, [r7, #4]
    de7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
    de80:	687b      	ldr	r3, [r7, #4]
    de82:	685b      	ldr	r3, [r3, #4]
    de84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    de86:	683b      	ldr	r3, [r7, #0]
    de88:	68fa      	ldr	r2, [r7, #12]
    de8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    de8c:	68fb      	ldr	r3, [r7, #12]
    de8e:	689a      	ldr	r2, [r3, #8]
    de90:	683b      	ldr	r3, [r7, #0]
    de92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    de94:	68fb      	ldr	r3, [r7, #12]
    de96:	689b      	ldr	r3, [r3, #8]
    de98:	683a      	ldr	r2, [r7, #0]
    de9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
    de9c:	68fb      	ldr	r3, [r7, #12]
    de9e:	683a      	ldr	r2, [r7, #0]
    dea0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    dea2:	683b      	ldr	r3, [r7, #0]
    dea4:	687a      	ldr	r2, [r7, #4]
    dea6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    dea8:	687b      	ldr	r3, [r7, #4]
    deaa:	681b      	ldr	r3, [r3, #0]
    deac:	1c5a      	adds	r2, r3, #1
    deae:	687b      	ldr	r3, [r7, #4]
    deb0:	601a      	str	r2, [r3, #0]
}
    deb2:	46c0      	nop			; (mov r8, r8)
    deb4:	46bd      	mov	sp, r7
    deb6:	b004      	add	sp, #16
    deb8:	bd80      	pop	{r7, pc}

0000deba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    deba:	b580      	push	{r7, lr}
    debc:	b084      	sub	sp, #16
    debe:	af00      	add	r7, sp, #0
    dec0:	6078      	str	r0, [r7, #4]
    dec2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    dec4:	683b      	ldr	r3, [r7, #0]
    dec6:	681b      	ldr	r3, [r3, #0]
    dec8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    deca:	68bb      	ldr	r3, [r7, #8]
    decc:	3301      	adds	r3, #1
    dece:	d103      	bne.n	ded8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    ded0:	687b      	ldr	r3, [r7, #4]
    ded2:	691b      	ldr	r3, [r3, #16]
    ded4:	60fb      	str	r3, [r7, #12]
    ded6:	e00c      	b.n	def2 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    ded8:	687b      	ldr	r3, [r7, #4]
    deda:	3308      	adds	r3, #8
    dedc:	60fb      	str	r3, [r7, #12]
    dede:	e002      	b.n	dee6 <vListInsert+0x2c>
    dee0:	68fb      	ldr	r3, [r7, #12]
    dee2:	685b      	ldr	r3, [r3, #4]
    dee4:	60fb      	str	r3, [r7, #12]
    dee6:	68fb      	ldr	r3, [r7, #12]
    dee8:	685b      	ldr	r3, [r3, #4]
    deea:	681a      	ldr	r2, [r3, #0]
    deec:	68bb      	ldr	r3, [r7, #8]
    deee:	429a      	cmp	r2, r3
    def0:	d9f6      	bls.n	dee0 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    def2:	68fb      	ldr	r3, [r7, #12]
    def4:	685a      	ldr	r2, [r3, #4]
    def6:	683b      	ldr	r3, [r7, #0]
    def8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    defa:	683b      	ldr	r3, [r7, #0]
    defc:	685b      	ldr	r3, [r3, #4]
    defe:	683a      	ldr	r2, [r7, #0]
    df00:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    df02:	683b      	ldr	r3, [r7, #0]
    df04:	68fa      	ldr	r2, [r7, #12]
    df06:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
    df08:	68fb      	ldr	r3, [r7, #12]
    df0a:	683a      	ldr	r2, [r7, #0]
    df0c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    df0e:	683b      	ldr	r3, [r7, #0]
    df10:	687a      	ldr	r2, [r7, #4]
    df12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    df14:	687b      	ldr	r3, [r7, #4]
    df16:	681b      	ldr	r3, [r3, #0]
    df18:	1c5a      	adds	r2, r3, #1
    df1a:	687b      	ldr	r3, [r7, #4]
    df1c:	601a      	str	r2, [r3, #0]
}
    df1e:	46c0      	nop			; (mov r8, r8)
    df20:	46bd      	mov	sp, r7
    df22:	b004      	add	sp, #16
    df24:	bd80      	pop	{r7, pc}

0000df26 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    df26:	b580      	push	{r7, lr}
    df28:	b084      	sub	sp, #16
    df2a:	af00      	add	r7, sp, #0
    df2c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    df2e:	687b      	ldr	r3, [r7, #4]
    df30:	691b      	ldr	r3, [r3, #16]
    df32:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    df34:	687b      	ldr	r3, [r7, #4]
    df36:	685b      	ldr	r3, [r3, #4]
    df38:	687a      	ldr	r2, [r7, #4]
    df3a:	6892      	ldr	r2, [r2, #8]
    df3c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    df3e:	687b      	ldr	r3, [r7, #4]
    df40:	689b      	ldr	r3, [r3, #8]
    df42:	687a      	ldr	r2, [r7, #4]
    df44:	6852      	ldr	r2, [r2, #4]
    df46:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    df48:	68fb      	ldr	r3, [r7, #12]
    df4a:	685a      	ldr	r2, [r3, #4]
    df4c:	687b      	ldr	r3, [r7, #4]
    df4e:	429a      	cmp	r2, r3
    df50:	d103      	bne.n	df5a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    df52:	687b      	ldr	r3, [r7, #4]
    df54:	689a      	ldr	r2, [r3, #8]
    df56:	68fb      	ldr	r3, [r7, #12]
    df58:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    df5a:	687b      	ldr	r3, [r7, #4]
    df5c:	2200      	movs	r2, #0
    df5e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    df60:	68fb      	ldr	r3, [r7, #12]
    df62:	681b      	ldr	r3, [r3, #0]
    df64:	1e5a      	subs	r2, r3, #1
    df66:	68fb      	ldr	r3, [r7, #12]
    df68:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    df6a:	68fb      	ldr	r3, [r7, #12]
    df6c:	681b      	ldr	r3, [r3, #0]
}
    df6e:	0018      	movs	r0, r3
    df70:	46bd      	mov	sp, r7
    df72:	b004      	add	sp, #16
    df74:	bd80      	pop	{r7, pc}
	...

0000df78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    df78:	b580      	push	{r7, lr}
    df7a:	b084      	sub	sp, #16
    df7c:	af00      	add	r7, sp, #0
    df7e:	6078      	str	r0, [r7, #4]
    df80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    df82:	687b      	ldr	r3, [r7, #4]
    df84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
    df86:	68fb      	ldr	r3, [r7, #12]
    df88:	2b00      	cmp	r3, #0
    df8a:	d101      	bne.n	df90 <xQueueGenericReset+0x18>
    df8c:	b672      	cpsid	i
    df8e:	e7fe      	b.n	df8e <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
    df90:	4b23      	ldr	r3, [pc, #140]	; (e020 <xQueueGenericReset+0xa8>)
    df92:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    df94:	68fb      	ldr	r3, [r7, #12]
    df96:	681a      	ldr	r2, [r3, #0]
    df98:	68fb      	ldr	r3, [r7, #12]
    df9a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    df9c:	68fb      	ldr	r3, [r7, #12]
    df9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    dfa0:	434b      	muls	r3, r1
    dfa2:	18d2      	adds	r2, r2, r3
    dfa4:	68fb      	ldr	r3, [r7, #12]
    dfa6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    dfa8:	68fb      	ldr	r3, [r7, #12]
    dfaa:	2200      	movs	r2, #0
    dfac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    dfae:	68fb      	ldr	r3, [r7, #12]
    dfb0:	681a      	ldr	r2, [r3, #0]
    dfb2:	68fb      	ldr	r3, [r7, #12]
    dfb4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    dfb6:	68fb      	ldr	r3, [r7, #12]
    dfb8:	681a      	ldr	r2, [r3, #0]
    dfba:	68fb      	ldr	r3, [r7, #12]
    dfbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    dfbe:	1e59      	subs	r1, r3, #1
    dfc0:	68fb      	ldr	r3, [r7, #12]
    dfc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    dfc4:	434b      	muls	r3, r1
    dfc6:	18d2      	adds	r2, r2, r3
    dfc8:	68fb      	ldr	r3, [r7, #12]
    dfca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    dfcc:	68fb      	ldr	r3, [r7, #12]
    dfce:	2244      	movs	r2, #68	; 0x44
    dfd0:	21ff      	movs	r1, #255	; 0xff
    dfd2:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    dfd4:	68fb      	ldr	r3, [r7, #12]
    dfd6:	2245      	movs	r2, #69	; 0x45
    dfd8:	21ff      	movs	r1, #255	; 0xff
    dfda:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
    dfdc:	683b      	ldr	r3, [r7, #0]
    dfde:	2b00      	cmp	r3, #0
    dfe0:	d10d      	bne.n	dffe <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    dfe2:	68fb      	ldr	r3, [r7, #12]
    dfe4:	691b      	ldr	r3, [r3, #16]
    dfe6:	2b00      	cmp	r3, #0
    dfe8:	d013      	beq.n	e012 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    dfea:	68fb      	ldr	r3, [r7, #12]
    dfec:	3310      	adds	r3, #16
    dfee:	0018      	movs	r0, r3
    dff0:	4b0c      	ldr	r3, [pc, #48]	; (e024 <xQueueGenericReset+0xac>)
    dff2:	4798      	blx	r3
    dff4:	1e03      	subs	r3, r0, #0
    dff6:	d00c      	beq.n	e012 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
    dff8:	4b0b      	ldr	r3, [pc, #44]	; (e028 <xQueueGenericReset+0xb0>)
    dffa:	4798      	blx	r3
    dffc:	e009      	b.n	e012 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    dffe:	68fb      	ldr	r3, [r7, #12]
    e000:	3310      	adds	r3, #16
    e002:	0018      	movs	r0, r3
    e004:	4b09      	ldr	r3, [pc, #36]	; (e02c <xQueueGenericReset+0xb4>)
    e006:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    e008:	68fb      	ldr	r3, [r7, #12]
    e00a:	3324      	adds	r3, #36	; 0x24
    e00c:	0018      	movs	r0, r3
    e00e:	4b07      	ldr	r3, [pc, #28]	; (e02c <xQueueGenericReset+0xb4>)
    e010:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
    e012:	4b07      	ldr	r3, [pc, #28]	; (e030 <xQueueGenericReset+0xb8>)
    e014:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    e016:	2301      	movs	r3, #1
}
    e018:	0018      	movs	r0, r3
    e01a:	46bd      	mov	sp, r7
    e01c:	b004      	add	sp, #16
    e01e:	bd80      	pop	{r7, pc}
    e020:	0000dc81 	.word	0x0000dc81
    e024:	0000f4c9 	.word	0x0000f4c9
    e028:	0000dc61 	.word	0x0000dc61
    e02c:	0000de25 	.word	0x0000de25
    e030:	0000dca5 	.word	0x0000dca5

0000e034 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    e034:	b590      	push	{r4, r7, lr}
    e036:	b08b      	sub	sp, #44	; 0x2c
    e038:	af02      	add	r7, sp, #8
    e03a:	60f8      	str	r0, [r7, #12]
    e03c:	60b9      	str	r1, [r7, #8]
    e03e:	1dfb      	adds	r3, r7, #7
    e040:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    e042:	68fb      	ldr	r3, [r7, #12]
    e044:	2b00      	cmp	r3, #0
    e046:	d101      	bne.n	e04c <xQueueGenericCreate+0x18>
    e048:	b672      	cpsid	i
    e04a:	e7fe      	b.n	e04a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
    e04c:	68bb      	ldr	r3, [r7, #8]
    e04e:	2b00      	cmp	r3, #0
    e050:	d102      	bne.n	e058 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    e052:	2300      	movs	r3, #0
    e054:	61fb      	str	r3, [r7, #28]
    e056:	e003      	b.n	e060 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    e058:	68fb      	ldr	r3, [r7, #12]
    e05a:	68ba      	ldr	r2, [r7, #8]
    e05c:	4353      	muls	r3, r2
    e05e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    e060:	69fb      	ldr	r3, [r7, #28]
    e062:	334c      	adds	r3, #76	; 0x4c
    e064:	0018      	movs	r0, r3
    e066:	4b0c      	ldr	r3, [pc, #48]	; (e098 <xQueueGenericCreate+0x64>)
    e068:	4798      	blx	r3
    e06a:	0003      	movs	r3, r0
    e06c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
    e06e:	69bb      	ldr	r3, [r7, #24]
    e070:	2b00      	cmp	r3, #0
    e072:	d00c      	beq.n	e08e <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    e074:	69bb      	ldr	r3, [r7, #24]
    e076:	334c      	adds	r3, #76	; 0x4c
    e078:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    e07a:	1dfb      	adds	r3, r7, #7
    e07c:	781c      	ldrb	r4, [r3, #0]
    e07e:	697a      	ldr	r2, [r7, #20]
    e080:	68b9      	ldr	r1, [r7, #8]
    e082:	68f8      	ldr	r0, [r7, #12]
    e084:	69bb      	ldr	r3, [r7, #24]
    e086:	9300      	str	r3, [sp, #0]
    e088:	0023      	movs	r3, r4
    e08a:	4c04      	ldr	r4, [pc, #16]	; (e09c <xQueueGenericCreate+0x68>)
    e08c:	47a0      	blx	r4
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
    e08e:	69bb      	ldr	r3, [r7, #24]
	}
    e090:	0018      	movs	r0, r3
    e092:	46bd      	mov	sp, r7
    e094:	b009      	add	sp, #36	; 0x24
    e096:	bd90      	pop	{r4, r7, pc}
    e098:	0000ddbd 	.word	0x0000ddbd
    e09c:	0000e0a1 	.word	0x0000e0a1

0000e0a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    e0a0:	b580      	push	{r7, lr}
    e0a2:	b084      	sub	sp, #16
    e0a4:	af00      	add	r7, sp, #0
    e0a6:	60f8      	str	r0, [r7, #12]
    e0a8:	60b9      	str	r1, [r7, #8]
    e0aa:	607a      	str	r2, [r7, #4]
    e0ac:	001a      	movs	r2, r3
    e0ae:	1cfb      	adds	r3, r7, #3
    e0b0:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    e0b2:	68bb      	ldr	r3, [r7, #8]
    e0b4:	2b00      	cmp	r3, #0
    e0b6:	d103      	bne.n	e0c0 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    e0b8:	69bb      	ldr	r3, [r7, #24]
    e0ba:	69ba      	ldr	r2, [r7, #24]
    e0bc:	601a      	str	r2, [r3, #0]
    e0be:	e002      	b.n	e0c6 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    e0c0:	69bb      	ldr	r3, [r7, #24]
    e0c2:	687a      	ldr	r2, [r7, #4]
    e0c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    e0c6:	69bb      	ldr	r3, [r7, #24]
    e0c8:	68fa      	ldr	r2, [r7, #12]
    e0ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    e0cc:	69bb      	ldr	r3, [r7, #24]
    e0ce:	68ba      	ldr	r2, [r7, #8]
    e0d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    e0d2:	69bb      	ldr	r3, [r7, #24]
    e0d4:	2101      	movs	r1, #1
    e0d6:	0018      	movs	r0, r3
    e0d8:	4b04      	ldr	r3, [pc, #16]	; (e0ec <prvInitialiseNewQueue+0x4c>)
    e0da:	4798      	blx	r3
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
    e0dc:	69bb      	ldr	r3, [r7, #24]
    e0de:	2200      	movs	r2, #0
    e0e0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    e0e2:	46c0      	nop			; (mov r8, r8)
    e0e4:	46bd      	mov	sp, r7
    e0e6:	b004      	add	sp, #16
    e0e8:	bd80      	pop	{r7, pc}
    e0ea:	46c0      	nop			; (mov r8, r8)
    e0ec:	0000df79 	.word	0x0000df79

0000e0f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    e0f0:	b580      	push	{r7, lr}
    e0f2:	b08a      	sub	sp, #40	; 0x28
    e0f4:	af00      	add	r7, sp, #0
    e0f6:	60f8      	str	r0, [r7, #12]
    e0f8:	60b9      	str	r1, [r7, #8]
    e0fa:	607a      	str	r2, [r7, #4]
    e0fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    e0fe:	2300      	movs	r3, #0
    e100:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    e102:	68fb      	ldr	r3, [r7, #12]
    e104:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    e106:	6a3b      	ldr	r3, [r7, #32]
    e108:	2b00      	cmp	r3, #0
    e10a:	d101      	bne.n	e110 <xQueueGenericSend+0x20>
    e10c:	b672      	cpsid	i
    e10e:	e7fe      	b.n	e10e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    e110:	68bb      	ldr	r3, [r7, #8]
    e112:	2b00      	cmp	r3, #0
    e114:	d103      	bne.n	e11e <xQueueGenericSend+0x2e>
    e116:	6a3b      	ldr	r3, [r7, #32]
    e118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e11a:	2b00      	cmp	r3, #0
    e11c:	d101      	bne.n	e122 <xQueueGenericSend+0x32>
    e11e:	2301      	movs	r3, #1
    e120:	e000      	b.n	e124 <xQueueGenericSend+0x34>
    e122:	2300      	movs	r3, #0
    e124:	2b00      	cmp	r3, #0
    e126:	d101      	bne.n	e12c <xQueueGenericSend+0x3c>
    e128:	b672      	cpsid	i
    e12a:	e7fe      	b.n	e12a <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    e12c:	683b      	ldr	r3, [r7, #0]
    e12e:	2b02      	cmp	r3, #2
    e130:	d103      	bne.n	e13a <xQueueGenericSend+0x4a>
    e132:	6a3b      	ldr	r3, [r7, #32]
    e134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    e136:	2b01      	cmp	r3, #1
    e138:	d101      	bne.n	e13e <xQueueGenericSend+0x4e>
    e13a:	2301      	movs	r3, #1
    e13c:	e000      	b.n	e140 <xQueueGenericSend+0x50>
    e13e:	2300      	movs	r3, #0
    e140:	2b00      	cmp	r3, #0
    e142:	d101      	bne.n	e148 <xQueueGenericSend+0x58>
    e144:	b672      	cpsid	i
    e146:	e7fe      	b.n	e146 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    e148:	4b53      	ldr	r3, [pc, #332]	; (e298 <xQueueGenericSend+0x1a8>)
    e14a:	4798      	blx	r3
    e14c:	1e03      	subs	r3, r0, #0
    e14e:	d102      	bne.n	e156 <xQueueGenericSend+0x66>
    e150:	687b      	ldr	r3, [r7, #4]
    e152:	2b00      	cmp	r3, #0
    e154:	d101      	bne.n	e15a <xQueueGenericSend+0x6a>
    e156:	2301      	movs	r3, #1
    e158:	e000      	b.n	e15c <xQueueGenericSend+0x6c>
    e15a:	2300      	movs	r3, #0
    e15c:	2b00      	cmp	r3, #0
    e15e:	d101      	bne.n	e164 <xQueueGenericSend+0x74>
    e160:	b672      	cpsid	i
    e162:	e7fe      	b.n	e162 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    e164:	4b4d      	ldr	r3, [pc, #308]	; (e29c <xQueueGenericSend+0x1ac>)
    e166:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    e168:	6a3b      	ldr	r3, [r7, #32]
    e16a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e16c:	6a3b      	ldr	r3, [r7, #32]
    e16e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    e170:	429a      	cmp	r2, r3
    e172:	d302      	bcc.n	e17a <xQueueGenericSend+0x8a>
    e174:	683b      	ldr	r3, [r7, #0]
    e176:	2b02      	cmp	r3, #2
    e178:	d12d      	bne.n	e1d6 <xQueueGenericSend+0xe6>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    e17a:	683a      	ldr	r2, [r7, #0]
    e17c:	68b9      	ldr	r1, [r7, #8]
    e17e:	6a3b      	ldr	r3, [r7, #32]
    e180:	0018      	movs	r0, r3
    e182:	4b47      	ldr	r3, [pc, #284]	; (e2a0 <xQueueGenericSend+0x1b0>)
    e184:	4798      	blx	r3
    e186:	0003      	movs	r3, r0
    e188:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    e18a:	6a3b      	ldr	r3, [r7, #32]
    e18c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    e18e:	2b00      	cmp	r3, #0
    e190:	d00a      	beq.n	e1a8 <xQueueGenericSend+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    e192:	683a      	ldr	r2, [r7, #0]
    e194:	6a3b      	ldr	r3, [r7, #32]
    e196:	0011      	movs	r1, r2
    e198:	0018      	movs	r0, r3
    e19a:	4b42      	ldr	r3, [pc, #264]	; (e2a4 <xQueueGenericSend+0x1b4>)
    e19c:	4798      	blx	r3
    e19e:	1e03      	subs	r3, r0, #0
    e1a0:	d015      	beq.n	e1ce <xQueueGenericSend+0xde>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
    e1a2:	4b41      	ldr	r3, [pc, #260]	; (e2a8 <xQueueGenericSend+0x1b8>)
    e1a4:	4798      	blx	r3
    e1a6:	e012      	b.n	e1ce <xQueueGenericSend+0xde>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    e1a8:	6a3b      	ldr	r3, [r7, #32]
    e1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e1ac:	2b00      	cmp	r3, #0
    e1ae:	d009      	beq.n	e1c4 <xQueueGenericSend+0xd4>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    e1b0:	6a3b      	ldr	r3, [r7, #32]
    e1b2:	3324      	adds	r3, #36	; 0x24
    e1b4:	0018      	movs	r0, r3
    e1b6:	4b3d      	ldr	r3, [pc, #244]	; (e2ac <xQueueGenericSend+0x1bc>)
    e1b8:	4798      	blx	r3
    e1ba:	1e03      	subs	r3, r0, #0
    e1bc:	d007      	beq.n	e1ce <xQueueGenericSend+0xde>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    e1be:	4b3a      	ldr	r3, [pc, #232]	; (e2a8 <xQueueGenericSend+0x1b8>)
    e1c0:	4798      	blx	r3
    e1c2:	e004      	b.n	e1ce <xQueueGenericSend+0xde>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
    e1c4:	69fb      	ldr	r3, [r7, #28]
    e1c6:	2b00      	cmp	r3, #0
    e1c8:	d001      	beq.n	e1ce <xQueueGenericSend+0xde>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
    e1ca:	4b37      	ldr	r3, [pc, #220]	; (e2a8 <xQueueGenericSend+0x1b8>)
    e1cc:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    e1ce:	4b38      	ldr	r3, [pc, #224]	; (e2b0 <xQueueGenericSend+0x1c0>)
    e1d0:	4798      	blx	r3
				return pdPASS;
    e1d2:	2301      	movs	r3, #1
    e1d4:	e05c      	b.n	e290 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    e1d6:	687b      	ldr	r3, [r7, #4]
    e1d8:	2b00      	cmp	r3, #0
    e1da:	d103      	bne.n	e1e4 <xQueueGenericSend+0xf4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    e1dc:	4b34      	ldr	r3, [pc, #208]	; (e2b0 <xQueueGenericSend+0x1c0>)
    e1de:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    e1e0:	2300      	movs	r3, #0
    e1e2:	e055      	b.n	e290 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
    e1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e1e6:	2b00      	cmp	r3, #0
    e1e8:	d106      	bne.n	e1f8 <xQueueGenericSend+0x108>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    e1ea:	2314      	movs	r3, #20
    e1ec:	18fb      	adds	r3, r7, r3
    e1ee:	0018      	movs	r0, r3
    e1f0:	4b30      	ldr	r3, [pc, #192]	; (e2b4 <xQueueGenericSend+0x1c4>)
    e1f2:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    e1f4:	2301      	movs	r3, #1
    e1f6:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    e1f8:	4b2d      	ldr	r3, [pc, #180]	; (e2b0 <xQueueGenericSend+0x1c0>)
    e1fa:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    e1fc:	4b2e      	ldr	r3, [pc, #184]	; (e2b8 <xQueueGenericSend+0x1c8>)
    e1fe:	4798      	blx	r3
		prvLockQueue( pxQueue );
    e200:	4b26      	ldr	r3, [pc, #152]	; (e29c <xQueueGenericSend+0x1ac>)
    e202:	4798      	blx	r3
    e204:	6a3b      	ldr	r3, [r7, #32]
    e206:	2244      	movs	r2, #68	; 0x44
    e208:	5c9b      	ldrb	r3, [r3, r2]
    e20a:	b25b      	sxtb	r3, r3
    e20c:	3301      	adds	r3, #1
    e20e:	d103      	bne.n	e218 <xQueueGenericSend+0x128>
    e210:	6a3b      	ldr	r3, [r7, #32]
    e212:	2244      	movs	r2, #68	; 0x44
    e214:	2100      	movs	r1, #0
    e216:	5499      	strb	r1, [r3, r2]
    e218:	6a3b      	ldr	r3, [r7, #32]
    e21a:	2245      	movs	r2, #69	; 0x45
    e21c:	5c9b      	ldrb	r3, [r3, r2]
    e21e:	b25b      	sxtb	r3, r3
    e220:	3301      	adds	r3, #1
    e222:	d103      	bne.n	e22c <xQueueGenericSend+0x13c>
    e224:	6a3b      	ldr	r3, [r7, #32]
    e226:	2245      	movs	r2, #69	; 0x45
    e228:	2100      	movs	r1, #0
    e22a:	5499      	strb	r1, [r3, r2]
    e22c:	4b20      	ldr	r3, [pc, #128]	; (e2b0 <xQueueGenericSend+0x1c0>)
    e22e:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    e230:	1d3a      	adds	r2, r7, #4
    e232:	2314      	movs	r3, #20
    e234:	18fb      	adds	r3, r7, r3
    e236:	0011      	movs	r1, r2
    e238:	0018      	movs	r0, r3
    e23a:	4b20      	ldr	r3, [pc, #128]	; (e2bc <xQueueGenericSend+0x1cc>)
    e23c:	4798      	blx	r3
    e23e:	1e03      	subs	r3, r0, #0
    e240:	d11f      	bne.n	e282 <xQueueGenericSend+0x192>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    e242:	6a3b      	ldr	r3, [r7, #32]
    e244:	0018      	movs	r0, r3
    e246:	4b1e      	ldr	r3, [pc, #120]	; (e2c0 <xQueueGenericSend+0x1d0>)
    e248:	4798      	blx	r3
    e24a:	1e03      	subs	r3, r0, #0
    e24c:	d012      	beq.n	e274 <xQueueGenericSend+0x184>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    e24e:	6a3b      	ldr	r3, [r7, #32]
    e250:	3310      	adds	r3, #16
    e252:	687a      	ldr	r2, [r7, #4]
    e254:	0011      	movs	r1, r2
    e256:	0018      	movs	r0, r3
    e258:	4b1a      	ldr	r3, [pc, #104]	; (e2c4 <xQueueGenericSend+0x1d4>)
    e25a:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    e25c:	6a3b      	ldr	r3, [r7, #32]
    e25e:	0018      	movs	r0, r3
    e260:	4b19      	ldr	r3, [pc, #100]	; (e2c8 <xQueueGenericSend+0x1d8>)
    e262:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    e264:	4b19      	ldr	r3, [pc, #100]	; (e2cc <xQueueGenericSend+0x1dc>)
    e266:	4798      	blx	r3
    e268:	1e03      	subs	r3, r0, #0
    e26a:	d000      	beq.n	e26e <xQueueGenericSend+0x17e>
    e26c:	e77a      	b.n	e164 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
    e26e:	4b0e      	ldr	r3, [pc, #56]	; (e2a8 <xQueueGenericSend+0x1b8>)
    e270:	4798      	blx	r3
    e272:	e777      	b.n	e164 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    e274:	6a3b      	ldr	r3, [r7, #32]
    e276:	0018      	movs	r0, r3
    e278:	4b13      	ldr	r3, [pc, #76]	; (e2c8 <xQueueGenericSend+0x1d8>)
    e27a:	4798      	blx	r3
				( void ) xTaskResumeAll();
    e27c:	4b13      	ldr	r3, [pc, #76]	; (e2cc <xQueueGenericSend+0x1dc>)
    e27e:	4798      	blx	r3
    e280:	e770      	b.n	e164 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    e282:	6a3b      	ldr	r3, [r7, #32]
    e284:	0018      	movs	r0, r3
    e286:	4b10      	ldr	r3, [pc, #64]	; (e2c8 <xQueueGenericSend+0x1d8>)
    e288:	4798      	blx	r3
			( void ) xTaskResumeAll();
    e28a:	4b10      	ldr	r3, [pc, #64]	; (e2cc <xQueueGenericSend+0x1dc>)
    e28c:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    e28e:	2300      	movs	r3, #0
		}
	}
}
    e290:	0018      	movs	r0, r3
    e292:	46bd      	mov	sp, r7
    e294:	b00a      	add	sp, #40	; 0x28
    e296:	bd80      	pop	{r7, pc}
    e298:	0000f801 	.word	0x0000f801
    e29c:	0000dc81 	.word	0x0000dc81
    e2a0:	0000e7b1 	.word	0x0000e7b1
    e2a4:	0000eab5 	.word	0x0000eab5
    e2a8:	0000dc61 	.word	0x0000dc61
    e2ac:	0000f4c9 	.word	0x0000f4c9
    e2b0:	0000dca5 	.word	0x0000dca5
    e2b4:	0000f589 	.word	0x0000f589
    e2b8:	0000f0b1 	.word	0x0000f0b1
    e2bc:	0000f5b1 	.word	0x0000f5b1
    e2c0:	0000ea05 	.word	0x0000ea05
    e2c4:	0000f431 	.word	0x0000f431
    e2c8:	0000e8e1 	.word	0x0000e8e1
    e2cc:	0000f0c9 	.word	0x0000f0c9

0000e2d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    e2d0:	b580      	push	{r7, lr}
    e2d2:	b088      	sub	sp, #32
    e2d4:	af00      	add	r7, sp, #0
    e2d6:	60f8      	str	r0, [r7, #12]
    e2d8:	60b9      	str	r1, [r7, #8]
    e2da:	607a      	str	r2, [r7, #4]
    e2dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    e2de:	68fb      	ldr	r3, [r7, #12]
    e2e0:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
    e2e2:	69bb      	ldr	r3, [r7, #24]
    e2e4:	2b00      	cmp	r3, #0
    e2e6:	d101      	bne.n	e2ec <xQueueGenericSendFromISR+0x1c>
    e2e8:	b672      	cpsid	i
    e2ea:	e7fe      	b.n	e2ea <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    e2ec:	68bb      	ldr	r3, [r7, #8]
    e2ee:	2b00      	cmp	r3, #0
    e2f0:	d103      	bne.n	e2fa <xQueueGenericSendFromISR+0x2a>
    e2f2:	69bb      	ldr	r3, [r7, #24]
    e2f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e2f6:	2b00      	cmp	r3, #0
    e2f8:	d101      	bne.n	e2fe <xQueueGenericSendFromISR+0x2e>
    e2fa:	2301      	movs	r3, #1
    e2fc:	e000      	b.n	e300 <xQueueGenericSendFromISR+0x30>
    e2fe:	2300      	movs	r3, #0
    e300:	2b00      	cmp	r3, #0
    e302:	d101      	bne.n	e308 <xQueueGenericSendFromISR+0x38>
    e304:	b672      	cpsid	i
    e306:	e7fe      	b.n	e306 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    e308:	683b      	ldr	r3, [r7, #0]
    e30a:	2b02      	cmp	r3, #2
    e30c:	d103      	bne.n	e316 <xQueueGenericSendFromISR+0x46>
    e30e:	69bb      	ldr	r3, [r7, #24]
    e310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    e312:	2b01      	cmp	r3, #1
    e314:	d101      	bne.n	e31a <xQueueGenericSendFromISR+0x4a>
    e316:	2301      	movs	r3, #1
    e318:	e000      	b.n	e31c <xQueueGenericSendFromISR+0x4c>
    e31a:	2300      	movs	r3, #0
    e31c:	2b00      	cmp	r3, #0
    e31e:	d101      	bne.n	e324 <xQueueGenericSendFromISR+0x54>
    e320:	b672      	cpsid	i
    e322:	e7fe      	b.n	e322 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    e324:	4b2d      	ldr	r3, [pc, #180]	; (e3dc <xQueueGenericSendFromISR+0x10c>)
    e326:	4798      	blx	r3
    e328:	0003      	movs	r3, r0
    e32a:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    e32c:	69bb      	ldr	r3, [r7, #24]
    e32e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e330:	69bb      	ldr	r3, [r7, #24]
    e332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    e334:	429a      	cmp	r2, r3
    e336:	d302      	bcc.n	e33e <xQueueGenericSendFromISR+0x6e>
    e338:	683b      	ldr	r3, [r7, #0]
    e33a:	2b02      	cmp	r3, #2
    e33c:	d142      	bne.n	e3c4 <xQueueGenericSendFromISR+0xf4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    e33e:	2313      	movs	r3, #19
    e340:	18fb      	adds	r3, r7, r3
    e342:	69ba      	ldr	r2, [r7, #24]
    e344:	2145      	movs	r1, #69	; 0x45
    e346:	5c52      	ldrb	r2, [r2, r1]
    e348:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    e34a:	683a      	ldr	r2, [r7, #0]
    e34c:	68b9      	ldr	r1, [r7, #8]
    e34e:	69bb      	ldr	r3, [r7, #24]
    e350:	0018      	movs	r0, r3
    e352:	4b23      	ldr	r3, [pc, #140]	; (e3e0 <xQueueGenericSendFromISR+0x110>)
    e354:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    e356:	2313      	movs	r3, #19
    e358:	18fb      	adds	r3, r7, r3
    e35a:	781b      	ldrb	r3, [r3, #0]
    e35c:	b25b      	sxtb	r3, r3
    e35e:	3301      	adds	r3, #1
    e360:	d124      	bne.n	e3ac <xQueueGenericSendFromISR+0xdc>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    e362:	69bb      	ldr	r3, [r7, #24]
    e364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    e366:	2b00      	cmp	r3, #0
    e368:	d00e      	beq.n	e388 <xQueueGenericSendFromISR+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    e36a:	683a      	ldr	r2, [r7, #0]
    e36c:	69bb      	ldr	r3, [r7, #24]
    e36e:	0011      	movs	r1, r2
    e370:	0018      	movs	r0, r3
    e372:	4b1c      	ldr	r3, [pc, #112]	; (e3e4 <xQueueGenericSendFromISR+0x114>)
    e374:	4798      	blx	r3
    e376:	1e03      	subs	r3, r0, #0
    e378:	d021      	beq.n	e3be <xQueueGenericSendFromISR+0xee>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    e37a:	687b      	ldr	r3, [r7, #4]
    e37c:	2b00      	cmp	r3, #0
    e37e:	d01e      	beq.n	e3be <xQueueGenericSendFromISR+0xee>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    e380:	687b      	ldr	r3, [r7, #4]
    e382:	2201      	movs	r2, #1
    e384:	601a      	str	r2, [r3, #0]
    e386:	e01a      	b.n	e3be <xQueueGenericSendFromISR+0xee>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    e388:	69bb      	ldr	r3, [r7, #24]
    e38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e38c:	2b00      	cmp	r3, #0
    e38e:	d016      	beq.n	e3be <xQueueGenericSendFromISR+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    e390:	69bb      	ldr	r3, [r7, #24]
    e392:	3324      	adds	r3, #36	; 0x24
    e394:	0018      	movs	r0, r3
    e396:	4b14      	ldr	r3, [pc, #80]	; (e3e8 <xQueueGenericSendFromISR+0x118>)
    e398:	4798      	blx	r3
    e39a:	1e03      	subs	r3, r0, #0
    e39c:	d00f      	beq.n	e3be <xQueueGenericSendFromISR+0xee>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    e39e:	687b      	ldr	r3, [r7, #4]
    e3a0:	2b00      	cmp	r3, #0
    e3a2:	d00c      	beq.n	e3be <xQueueGenericSendFromISR+0xee>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    e3a4:	687b      	ldr	r3, [r7, #4]
    e3a6:	2201      	movs	r2, #1
    e3a8:	601a      	str	r2, [r3, #0]
    e3aa:	e008      	b.n	e3be <xQueueGenericSendFromISR+0xee>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    e3ac:	2313      	movs	r3, #19
    e3ae:	18fb      	adds	r3, r7, r3
    e3b0:	781b      	ldrb	r3, [r3, #0]
    e3b2:	3301      	adds	r3, #1
    e3b4:	b2db      	uxtb	r3, r3
    e3b6:	b259      	sxtb	r1, r3
    e3b8:	69bb      	ldr	r3, [r7, #24]
    e3ba:	2245      	movs	r2, #69	; 0x45
    e3bc:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
    e3be:	2301      	movs	r3, #1
    e3c0:	61fb      	str	r3, [r7, #28]
		{
    e3c2:	e001      	b.n	e3c8 <xQueueGenericSendFromISR+0xf8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    e3c4:	2300      	movs	r3, #0
    e3c6:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    e3c8:	697b      	ldr	r3, [r7, #20]
    e3ca:	0018      	movs	r0, r3
    e3cc:	4b07      	ldr	r3, [pc, #28]	; (e3ec <xQueueGenericSendFromISR+0x11c>)
    e3ce:	4798      	blx	r3

	return xReturn;
    e3d0:	69fb      	ldr	r3, [r7, #28]
}
    e3d2:	0018      	movs	r0, r3
    e3d4:	46bd      	mov	sp, r7
    e3d6:	b008      	add	sp, #32
    e3d8:	bd80      	pop	{r7, pc}
    e3da:	46c0      	nop			; (mov r8, r8)
    e3dc:	0000dcd5 	.word	0x0000dcd5
    e3e0:	0000e7b1 	.word	0x0000e7b1
    e3e4:	0000eab5 	.word	0x0000eab5
    e3e8:	0000f4c9 	.word	0x0000f4c9
    e3ec:	0000dce1 	.word	0x0000dce1

0000e3f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    e3f0:	b580      	push	{r7, lr}
    e3f2:	b08a      	sub	sp, #40	; 0x28
    e3f4:	af00      	add	r7, sp, #0
    e3f6:	60f8      	str	r0, [r7, #12]
    e3f8:	60b9      	str	r1, [r7, #8]
    e3fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
    e3fc:	2300      	movs	r3, #0
    e3fe:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    e400:	68fb      	ldr	r3, [r7, #12]
    e402:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
    e404:	6a3b      	ldr	r3, [r7, #32]
    e406:	2b00      	cmp	r3, #0
    e408:	d101      	bne.n	e40e <xQueueReceive+0x1e>
    e40a:	b672      	cpsid	i
    e40c:	e7fe      	b.n	e40c <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    e40e:	68bb      	ldr	r3, [r7, #8]
    e410:	2b00      	cmp	r3, #0
    e412:	d103      	bne.n	e41c <xQueueReceive+0x2c>
    e414:	6a3b      	ldr	r3, [r7, #32]
    e416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e418:	2b00      	cmp	r3, #0
    e41a:	d101      	bne.n	e420 <xQueueReceive+0x30>
    e41c:	2301      	movs	r3, #1
    e41e:	e000      	b.n	e422 <xQueueReceive+0x32>
    e420:	2300      	movs	r3, #0
    e422:	2b00      	cmp	r3, #0
    e424:	d101      	bne.n	e42a <xQueueReceive+0x3a>
    e426:	b672      	cpsid	i
    e428:	e7fe      	b.n	e428 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    e42a:	4b4c      	ldr	r3, [pc, #304]	; (e55c <xQueueReceive+0x16c>)
    e42c:	4798      	blx	r3
    e42e:	1e03      	subs	r3, r0, #0
    e430:	d102      	bne.n	e438 <xQueueReceive+0x48>
    e432:	687b      	ldr	r3, [r7, #4]
    e434:	2b00      	cmp	r3, #0
    e436:	d101      	bne.n	e43c <xQueueReceive+0x4c>
    e438:	2301      	movs	r3, #1
    e43a:	e000      	b.n	e43e <xQueueReceive+0x4e>
    e43c:	2300      	movs	r3, #0
    e43e:	2b00      	cmp	r3, #0
    e440:	d101      	bne.n	e446 <xQueueReceive+0x56>
    e442:	b672      	cpsid	i
    e444:	e7fe      	b.n	e444 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    e446:	4b46      	ldr	r3, [pc, #280]	; (e560 <xQueueReceive+0x170>)
    e448:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    e44a:	6a3b      	ldr	r3, [r7, #32]
    e44c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    e44e:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    e450:	69fb      	ldr	r3, [r7, #28]
    e452:	2b00      	cmp	r3, #0
    e454:	d01a      	beq.n	e48c <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    e456:	68ba      	ldr	r2, [r7, #8]
    e458:	6a3b      	ldr	r3, [r7, #32]
    e45a:	0011      	movs	r1, r2
    e45c:	0018      	movs	r0, r3
    e45e:	4b41      	ldr	r3, [pc, #260]	; (e564 <xQueueReceive+0x174>)
    e460:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    e462:	69fb      	ldr	r3, [r7, #28]
    e464:	1e5a      	subs	r2, r3, #1
    e466:	6a3b      	ldr	r3, [r7, #32]
    e468:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    e46a:	6a3b      	ldr	r3, [r7, #32]
    e46c:	691b      	ldr	r3, [r3, #16]
    e46e:	2b00      	cmp	r3, #0
    e470:	d008      	beq.n	e484 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    e472:	6a3b      	ldr	r3, [r7, #32]
    e474:	3310      	adds	r3, #16
    e476:	0018      	movs	r0, r3
    e478:	4b3b      	ldr	r3, [pc, #236]	; (e568 <xQueueReceive+0x178>)
    e47a:	4798      	blx	r3
    e47c:	1e03      	subs	r3, r0, #0
    e47e:	d001      	beq.n	e484 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
    e480:	4b3a      	ldr	r3, [pc, #232]	; (e56c <xQueueReceive+0x17c>)
    e482:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    e484:	4b3a      	ldr	r3, [pc, #232]	; (e570 <xQueueReceive+0x180>)
    e486:	4798      	blx	r3
				return pdPASS;
    e488:	2301      	movs	r3, #1
    e48a:	e062      	b.n	e552 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    e48c:	687b      	ldr	r3, [r7, #4]
    e48e:	2b00      	cmp	r3, #0
    e490:	d103      	bne.n	e49a <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    e492:	4b37      	ldr	r3, [pc, #220]	; (e570 <xQueueReceive+0x180>)
    e494:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    e496:	2300      	movs	r3, #0
    e498:	e05b      	b.n	e552 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
    e49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e49c:	2b00      	cmp	r3, #0
    e49e:	d106      	bne.n	e4ae <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    e4a0:	2314      	movs	r3, #20
    e4a2:	18fb      	adds	r3, r7, r3
    e4a4:	0018      	movs	r0, r3
    e4a6:	4b33      	ldr	r3, [pc, #204]	; (e574 <xQueueReceive+0x184>)
    e4a8:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    e4aa:	2301      	movs	r3, #1
    e4ac:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    e4ae:	4b30      	ldr	r3, [pc, #192]	; (e570 <xQueueReceive+0x180>)
    e4b0:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    e4b2:	4b31      	ldr	r3, [pc, #196]	; (e578 <xQueueReceive+0x188>)
    e4b4:	4798      	blx	r3
		prvLockQueue( pxQueue );
    e4b6:	4b2a      	ldr	r3, [pc, #168]	; (e560 <xQueueReceive+0x170>)
    e4b8:	4798      	blx	r3
    e4ba:	6a3b      	ldr	r3, [r7, #32]
    e4bc:	2244      	movs	r2, #68	; 0x44
    e4be:	5c9b      	ldrb	r3, [r3, r2]
    e4c0:	b25b      	sxtb	r3, r3
    e4c2:	3301      	adds	r3, #1
    e4c4:	d103      	bne.n	e4ce <xQueueReceive+0xde>
    e4c6:	6a3b      	ldr	r3, [r7, #32]
    e4c8:	2244      	movs	r2, #68	; 0x44
    e4ca:	2100      	movs	r1, #0
    e4cc:	5499      	strb	r1, [r3, r2]
    e4ce:	6a3b      	ldr	r3, [r7, #32]
    e4d0:	2245      	movs	r2, #69	; 0x45
    e4d2:	5c9b      	ldrb	r3, [r3, r2]
    e4d4:	b25b      	sxtb	r3, r3
    e4d6:	3301      	adds	r3, #1
    e4d8:	d103      	bne.n	e4e2 <xQueueReceive+0xf2>
    e4da:	6a3b      	ldr	r3, [r7, #32]
    e4dc:	2245      	movs	r2, #69	; 0x45
    e4de:	2100      	movs	r1, #0
    e4e0:	5499      	strb	r1, [r3, r2]
    e4e2:	4b23      	ldr	r3, [pc, #140]	; (e570 <xQueueReceive+0x180>)
    e4e4:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    e4e6:	1d3a      	adds	r2, r7, #4
    e4e8:	2314      	movs	r3, #20
    e4ea:	18fb      	adds	r3, r7, r3
    e4ec:	0011      	movs	r1, r2
    e4ee:	0018      	movs	r0, r3
    e4f0:	4b22      	ldr	r3, [pc, #136]	; (e57c <xQueueReceive+0x18c>)
    e4f2:	4798      	blx	r3
    e4f4:	1e03      	subs	r3, r0, #0
    e4f6:	d11e      	bne.n	e536 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    e4f8:	6a3b      	ldr	r3, [r7, #32]
    e4fa:	0018      	movs	r0, r3
    e4fc:	4b20      	ldr	r3, [pc, #128]	; (e580 <xQueueReceive+0x190>)
    e4fe:	4798      	blx	r3
    e500:	1e03      	subs	r3, r0, #0
    e502:	d011      	beq.n	e528 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    e504:	6a3b      	ldr	r3, [r7, #32]
    e506:	3324      	adds	r3, #36	; 0x24
    e508:	687a      	ldr	r2, [r7, #4]
    e50a:	0011      	movs	r1, r2
    e50c:	0018      	movs	r0, r3
    e50e:	4b1d      	ldr	r3, [pc, #116]	; (e584 <xQueueReceive+0x194>)
    e510:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    e512:	6a3b      	ldr	r3, [r7, #32]
    e514:	0018      	movs	r0, r3
    e516:	4b1c      	ldr	r3, [pc, #112]	; (e588 <xQueueReceive+0x198>)
    e518:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    e51a:	4b1c      	ldr	r3, [pc, #112]	; (e58c <xQueueReceive+0x19c>)
    e51c:	4798      	blx	r3
    e51e:	1e03      	subs	r3, r0, #0
    e520:	d191      	bne.n	e446 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
    e522:	4b12      	ldr	r3, [pc, #72]	; (e56c <xQueueReceive+0x17c>)
    e524:	4798      	blx	r3
    e526:	e78e      	b.n	e446 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
    e528:	6a3b      	ldr	r3, [r7, #32]
    e52a:	0018      	movs	r0, r3
    e52c:	4b16      	ldr	r3, [pc, #88]	; (e588 <xQueueReceive+0x198>)
    e52e:	4798      	blx	r3
				( void ) xTaskResumeAll();
    e530:	4b16      	ldr	r3, [pc, #88]	; (e58c <xQueueReceive+0x19c>)
    e532:	4798      	blx	r3
    e534:	e787      	b.n	e446 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
    e536:	6a3b      	ldr	r3, [r7, #32]
    e538:	0018      	movs	r0, r3
    e53a:	4b13      	ldr	r3, [pc, #76]	; (e588 <xQueueReceive+0x198>)
    e53c:	4798      	blx	r3
			( void ) xTaskResumeAll();
    e53e:	4b13      	ldr	r3, [pc, #76]	; (e58c <xQueueReceive+0x19c>)
    e540:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    e542:	6a3b      	ldr	r3, [r7, #32]
    e544:	0018      	movs	r0, r3
    e546:	4b0e      	ldr	r3, [pc, #56]	; (e580 <xQueueReceive+0x190>)
    e548:	4798      	blx	r3
    e54a:	1e03      	subs	r3, r0, #0
    e54c:	d100      	bne.n	e550 <xQueueReceive+0x160>
    e54e:	e77a      	b.n	e446 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    e550:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    e552:	0018      	movs	r0, r3
    e554:	46bd      	mov	sp, r7
    e556:	b00a      	add	sp, #40	; 0x28
    e558:	bd80      	pop	{r7, pc}
    e55a:	46c0      	nop			; (mov r8, r8)
    e55c:	0000f801 	.word	0x0000f801
    e560:	0000dc81 	.word	0x0000dc81
    e564:	0000e891 	.word	0x0000e891
    e568:	0000f4c9 	.word	0x0000f4c9
    e56c:	0000dc61 	.word	0x0000dc61
    e570:	0000dca5 	.word	0x0000dca5
    e574:	0000f589 	.word	0x0000f589
    e578:	0000f0b1 	.word	0x0000f0b1
    e57c:	0000f5b1 	.word	0x0000f5b1
    e580:	0000e9d1 	.word	0x0000e9d1
    e584:	0000f431 	.word	0x0000f431
    e588:	0000e8e1 	.word	0x0000e8e1
    e58c:	0000f0c9 	.word	0x0000f0c9

0000e590 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
    e590:	b580      	push	{r7, lr}
    e592:	b08a      	sub	sp, #40	; 0x28
    e594:	af00      	add	r7, sp, #0
    e596:	6078      	str	r0, [r7, #4]
    e598:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
    e59a:	2300      	movs	r3, #0
    e59c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    e59e:	687b      	ldr	r3, [r7, #4]
    e5a0:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
    e5a2:	2300      	movs	r3, #0
    e5a4:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
    e5a6:	69fb      	ldr	r3, [r7, #28]
    e5a8:	2b00      	cmp	r3, #0
    e5aa:	d101      	bne.n	e5b0 <xQueueSemaphoreTake+0x20>
    e5ac:	b672      	cpsid	i
    e5ae:	e7fe      	b.n	e5ae <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
    e5b0:	69fb      	ldr	r3, [r7, #28]
    e5b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e5b4:	2b00      	cmp	r3, #0
    e5b6:	d001      	beq.n	e5bc <xQueueSemaphoreTake+0x2c>
    e5b8:	b672      	cpsid	i
    e5ba:	e7fe      	b.n	e5ba <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    e5bc:	4b61      	ldr	r3, [pc, #388]	; (e744 <xQueueSemaphoreTake+0x1b4>)
    e5be:	4798      	blx	r3
    e5c0:	1e03      	subs	r3, r0, #0
    e5c2:	d102      	bne.n	e5ca <xQueueSemaphoreTake+0x3a>
    e5c4:	683b      	ldr	r3, [r7, #0]
    e5c6:	2b00      	cmp	r3, #0
    e5c8:	d101      	bne.n	e5ce <xQueueSemaphoreTake+0x3e>
    e5ca:	2301      	movs	r3, #1
    e5cc:	e000      	b.n	e5d0 <xQueueSemaphoreTake+0x40>
    e5ce:	2300      	movs	r3, #0
    e5d0:	2b00      	cmp	r3, #0
    e5d2:	d101      	bne.n	e5d8 <xQueueSemaphoreTake+0x48>
    e5d4:	b672      	cpsid	i
    e5d6:	e7fe      	b.n	e5d6 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    e5d8:	4b5b      	ldr	r3, [pc, #364]	; (e748 <xQueueSemaphoreTake+0x1b8>)
    e5da:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    e5dc:	69fb      	ldr	r3, [r7, #28]
    e5de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    e5e0:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    e5e2:	69bb      	ldr	r3, [r7, #24]
    e5e4:	2b00      	cmp	r3, #0
    e5e6:	d01d      	beq.n	e624 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    e5e8:	69bb      	ldr	r3, [r7, #24]
    e5ea:	1e5a      	subs	r2, r3, #1
    e5ec:	69fb      	ldr	r3, [r7, #28]
    e5ee:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    e5f0:	69fb      	ldr	r3, [r7, #28]
    e5f2:	681b      	ldr	r3, [r3, #0]
    e5f4:	2b00      	cmp	r3, #0
    e5f6:	d104      	bne.n	e602 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    e5f8:	4b54      	ldr	r3, [pc, #336]	; (e74c <xQueueSemaphoreTake+0x1bc>)
    e5fa:	4798      	blx	r3
    e5fc:	0002      	movs	r2, r0
    e5fe:	69fb      	ldr	r3, [r7, #28]
    e600:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    e602:	69fb      	ldr	r3, [r7, #28]
    e604:	691b      	ldr	r3, [r3, #16]
    e606:	2b00      	cmp	r3, #0
    e608:	d008      	beq.n	e61c <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    e60a:	69fb      	ldr	r3, [r7, #28]
    e60c:	3310      	adds	r3, #16
    e60e:	0018      	movs	r0, r3
    e610:	4b4f      	ldr	r3, [pc, #316]	; (e750 <xQueueSemaphoreTake+0x1c0>)
    e612:	4798      	blx	r3
    e614:	1e03      	subs	r3, r0, #0
    e616:	d001      	beq.n	e61c <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
    e618:	4b4e      	ldr	r3, [pc, #312]	; (e754 <xQueueSemaphoreTake+0x1c4>)
    e61a:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    e61c:	4b4e      	ldr	r3, [pc, #312]	; (e758 <xQueueSemaphoreTake+0x1c8>)
    e61e:	4798      	blx	r3
				return pdPASS;
    e620:	2301      	movs	r3, #1
    e622:	e08b      	b.n	e73c <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    e624:	683b      	ldr	r3, [r7, #0]
    e626:	2b00      	cmp	r3, #0
    e628:	d108      	bne.n	e63c <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
    e62a:	6a3b      	ldr	r3, [r7, #32]
    e62c:	2b00      	cmp	r3, #0
    e62e:	d001      	beq.n	e634 <xQueueSemaphoreTake+0xa4>
    e630:	b672      	cpsid	i
    e632:	e7fe      	b.n	e632 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
    e634:	4b48      	ldr	r3, [pc, #288]	; (e758 <xQueueSemaphoreTake+0x1c8>)
    e636:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    e638:	2300      	movs	r3, #0
    e63a:	e07f      	b.n	e73c <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
    e63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e63e:	2b00      	cmp	r3, #0
    e640:	d106      	bne.n	e650 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    e642:	230c      	movs	r3, #12
    e644:	18fb      	adds	r3, r7, r3
    e646:	0018      	movs	r0, r3
    e648:	4b44      	ldr	r3, [pc, #272]	; (e75c <xQueueSemaphoreTake+0x1cc>)
    e64a:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    e64c:	2301      	movs	r3, #1
    e64e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    e650:	4b41      	ldr	r3, [pc, #260]	; (e758 <xQueueSemaphoreTake+0x1c8>)
    e652:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
    e654:	4b42      	ldr	r3, [pc, #264]	; (e760 <xQueueSemaphoreTake+0x1d0>)
    e656:	4798      	blx	r3
		prvLockQueue( pxQueue );
    e658:	4b3b      	ldr	r3, [pc, #236]	; (e748 <xQueueSemaphoreTake+0x1b8>)
    e65a:	4798      	blx	r3
    e65c:	69fb      	ldr	r3, [r7, #28]
    e65e:	2244      	movs	r2, #68	; 0x44
    e660:	5c9b      	ldrb	r3, [r3, r2]
    e662:	b25b      	sxtb	r3, r3
    e664:	3301      	adds	r3, #1
    e666:	d103      	bne.n	e670 <xQueueSemaphoreTake+0xe0>
    e668:	69fb      	ldr	r3, [r7, #28]
    e66a:	2244      	movs	r2, #68	; 0x44
    e66c:	2100      	movs	r1, #0
    e66e:	5499      	strb	r1, [r3, r2]
    e670:	69fb      	ldr	r3, [r7, #28]
    e672:	2245      	movs	r2, #69	; 0x45
    e674:	5c9b      	ldrb	r3, [r3, r2]
    e676:	b25b      	sxtb	r3, r3
    e678:	3301      	adds	r3, #1
    e67a:	d103      	bne.n	e684 <xQueueSemaphoreTake+0xf4>
    e67c:	69fb      	ldr	r3, [r7, #28]
    e67e:	2245      	movs	r2, #69	; 0x45
    e680:	2100      	movs	r1, #0
    e682:	5499      	strb	r1, [r3, r2]
    e684:	4b34      	ldr	r3, [pc, #208]	; (e758 <xQueueSemaphoreTake+0x1c8>)
    e686:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    e688:	003a      	movs	r2, r7
    e68a:	230c      	movs	r3, #12
    e68c:	18fb      	adds	r3, r7, r3
    e68e:	0011      	movs	r1, r2
    e690:	0018      	movs	r0, r3
    e692:	4b34      	ldr	r3, [pc, #208]	; (e764 <xQueueSemaphoreTake+0x1d4>)
    e694:	4798      	blx	r3
    e696:	1e03      	subs	r3, r0, #0
    e698:	d12e      	bne.n	e6f8 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    e69a:	69fb      	ldr	r3, [r7, #28]
    e69c:	0018      	movs	r0, r3
    e69e:	4b32      	ldr	r3, [pc, #200]	; (e768 <xQueueSemaphoreTake+0x1d8>)
    e6a0:	4798      	blx	r3
    e6a2:	1e03      	subs	r3, r0, #0
    e6a4:	d021      	beq.n	e6ea <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    e6a6:	69fb      	ldr	r3, [r7, #28]
    e6a8:	681b      	ldr	r3, [r3, #0]
    e6aa:	2b00      	cmp	r3, #0
    e6ac:	d10a      	bne.n	e6c4 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
    e6ae:	4b26      	ldr	r3, [pc, #152]	; (e748 <xQueueSemaphoreTake+0x1b8>)
    e6b0:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    e6b2:	69fb      	ldr	r3, [r7, #28]
    e6b4:	685b      	ldr	r3, [r3, #4]
    e6b6:	0018      	movs	r0, r3
    e6b8:	4b2c      	ldr	r3, [pc, #176]	; (e76c <xQueueSemaphoreTake+0x1dc>)
    e6ba:	4798      	blx	r3
    e6bc:	0003      	movs	r3, r0
    e6be:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
    e6c0:	4b25      	ldr	r3, [pc, #148]	; (e758 <xQueueSemaphoreTake+0x1c8>)
    e6c2:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    e6c4:	69fb      	ldr	r3, [r7, #28]
    e6c6:	3324      	adds	r3, #36	; 0x24
    e6c8:	683a      	ldr	r2, [r7, #0]
    e6ca:	0011      	movs	r1, r2
    e6cc:	0018      	movs	r0, r3
    e6ce:	4b28      	ldr	r3, [pc, #160]	; (e770 <xQueueSemaphoreTake+0x1e0>)
    e6d0:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    e6d2:	69fb      	ldr	r3, [r7, #28]
    e6d4:	0018      	movs	r0, r3
    e6d6:	4b27      	ldr	r3, [pc, #156]	; (e774 <xQueueSemaphoreTake+0x1e4>)
    e6d8:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    e6da:	4b27      	ldr	r3, [pc, #156]	; (e778 <xQueueSemaphoreTake+0x1e8>)
    e6dc:	4798      	blx	r3
    e6de:	1e03      	subs	r3, r0, #0
    e6e0:	d000      	beq.n	e6e4 <xQueueSemaphoreTake+0x154>
    e6e2:	e779      	b.n	e5d8 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
    e6e4:	4b1b      	ldr	r3, [pc, #108]	; (e754 <xQueueSemaphoreTake+0x1c4>)
    e6e6:	4798      	blx	r3
    e6e8:	e776      	b.n	e5d8 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
    e6ea:	69fb      	ldr	r3, [r7, #28]
    e6ec:	0018      	movs	r0, r3
    e6ee:	4b21      	ldr	r3, [pc, #132]	; (e774 <xQueueSemaphoreTake+0x1e4>)
    e6f0:	4798      	blx	r3
				( void ) xTaskResumeAll();
    e6f2:	4b21      	ldr	r3, [pc, #132]	; (e778 <xQueueSemaphoreTake+0x1e8>)
    e6f4:	4798      	blx	r3
    e6f6:	e76f      	b.n	e5d8 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
    e6f8:	69fb      	ldr	r3, [r7, #28]
    e6fa:	0018      	movs	r0, r3
    e6fc:	4b1d      	ldr	r3, [pc, #116]	; (e774 <xQueueSemaphoreTake+0x1e4>)
    e6fe:	4798      	blx	r3
			( void ) xTaskResumeAll();
    e700:	4b1d      	ldr	r3, [pc, #116]	; (e778 <xQueueSemaphoreTake+0x1e8>)
    e702:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    e704:	69fb      	ldr	r3, [r7, #28]
    e706:	0018      	movs	r0, r3
    e708:	4b17      	ldr	r3, [pc, #92]	; (e768 <xQueueSemaphoreTake+0x1d8>)
    e70a:	4798      	blx	r3
    e70c:	1e03      	subs	r3, r0, #0
    e70e:	d100      	bne.n	e712 <xQueueSemaphoreTake+0x182>
    e710:	e762      	b.n	e5d8 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
    e712:	6a3b      	ldr	r3, [r7, #32]
    e714:	2b00      	cmp	r3, #0
    e716:	d010      	beq.n	e73a <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
    e718:	4b0b      	ldr	r3, [pc, #44]	; (e748 <xQueueSemaphoreTake+0x1b8>)
    e71a:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
    e71c:	69fb      	ldr	r3, [r7, #28]
    e71e:	0018      	movs	r0, r3
    e720:	4b16      	ldr	r3, [pc, #88]	; (e77c <xQueueSemaphoreTake+0x1ec>)
    e722:	4798      	blx	r3
    e724:	0003      	movs	r3, r0
    e726:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
    e728:	69fb      	ldr	r3, [r7, #28]
    e72a:	685b      	ldr	r3, [r3, #4]
    e72c:	697a      	ldr	r2, [r7, #20]
    e72e:	0011      	movs	r1, r2
    e730:	0018      	movs	r0, r3
    e732:	4b13      	ldr	r3, [pc, #76]	; (e780 <xQueueSemaphoreTake+0x1f0>)
    e734:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
    e736:	4b08      	ldr	r3, [pc, #32]	; (e758 <xQueueSemaphoreTake+0x1c8>)
    e738:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    e73a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    e73c:	0018      	movs	r0, r3
    e73e:	46bd      	mov	sp, r7
    e740:	b00a      	add	sp, #40	; 0x28
    e742:	bd80      	pop	{r7, pc}
    e744:	0000f801 	.word	0x0000f801
    e748:	0000dc81 	.word	0x0000dc81
    e74c:	0000facd 	.word	0x0000facd
    e750:	0000f4c9 	.word	0x0000f4c9
    e754:	0000dc61 	.word	0x0000dc61
    e758:	0000dca5 	.word	0x0000dca5
    e75c:	0000f589 	.word	0x0000f589
    e760:	0000f0b1 	.word	0x0000f0b1
    e764:	0000f5b1 	.word	0x0000f5b1
    e768:	0000e9d1 	.word	0x0000e9d1
    e76c:	0000f839 	.word	0x0000f839
    e770:	0000f431 	.word	0x0000f431
    e774:	0000e8e1 	.word	0x0000e8e1
    e778:	0000f0c9 	.word	0x0000f0c9
    e77c:	0000e785 	.word	0x0000e785
    e780:	0000f9dd 	.word	0x0000f9dd

0000e784 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
    e784:	b580      	push	{r7, lr}
    e786:	b084      	sub	sp, #16
    e788:	af00      	add	r7, sp, #0
    e78a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
    e78c:	687b      	ldr	r3, [r7, #4]
    e78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e790:	2b00      	cmp	r3, #0
    e792:	d006      	beq.n	e7a2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
    e794:	687b      	ldr	r3, [r7, #4]
    e796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    e798:	681b      	ldr	r3, [r3, #0]
    e79a:	2205      	movs	r2, #5
    e79c:	1ad3      	subs	r3, r2, r3
    e79e:	60fb      	str	r3, [r7, #12]
    e7a0:	e001      	b.n	e7a6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    e7a2:	2300      	movs	r3, #0
    e7a4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
    e7a6:	68fb      	ldr	r3, [r7, #12]
	}
    e7a8:	0018      	movs	r0, r3
    e7aa:	46bd      	mov	sp, r7
    e7ac:	b004      	add	sp, #16
    e7ae:	bd80      	pop	{r7, pc}

0000e7b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    e7b0:	b580      	push	{r7, lr}
    e7b2:	b086      	sub	sp, #24
    e7b4:	af00      	add	r7, sp, #0
    e7b6:	60f8      	str	r0, [r7, #12]
    e7b8:	60b9      	str	r1, [r7, #8]
    e7ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
    e7bc:	2300      	movs	r3, #0
    e7be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    e7c0:	68fb      	ldr	r3, [r7, #12]
    e7c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    e7c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    e7c6:	68fb      	ldr	r3, [r7, #12]
    e7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e7ca:	2b00      	cmp	r3, #0
    e7cc:	d10e      	bne.n	e7ec <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    e7ce:	68fb      	ldr	r3, [r7, #12]
    e7d0:	681b      	ldr	r3, [r3, #0]
    e7d2:	2b00      	cmp	r3, #0
    e7d4:	d14e      	bne.n	e874 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    e7d6:	68fb      	ldr	r3, [r7, #12]
    e7d8:	685b      	ldr	r3, [r3, #4]
    e7da:	0018      	movs	r0, r3
    e7dc:	4b2a      	ldr	r3, [pc, #168]	; (e888 <prvCopyDataToQueue+0xd8>)
    e7de:	4798      	blx	r3
    e7e0:	0003      	movs	r3, r0
    e7e2:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
    e7e4:	68fb      	ldr	r3, [r7, #12]
    e7e6:	2200      	movs	r2, #0
    e7e8:	605a      	str	r2, [r3, #4]
    e7ea:	e043      	b.n	e874 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    e7ec:	687b      	ldr	r3, [r7, #4]
    e7ee:	2b00      	cmp	r3, #0
    e7f0:	d119      	bne.n	e826 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    e7f2:	68fb      	ldr	r3, [r7, #12]
    e7f4:	6898      	ldr	r0, [r3, #8]
    e7f6:	68fb      	ldr	r3, [r7, #12]
    e7f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    e7fa:	68bb      	ldr	r3, [r7, #8]
    e7fc:	0019      	movs	r1, r3
    e7fe:	4b23      	ldr	r3, [pc, #140]	; (e88c <prvCopyDataToQueue+0xdc>)
    e800:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    e802:	68fb      	ldr	r3, [r7, #12]
    e804:	689a      	ldr	r2, [r3, #8]
    e806:	68fb      	ldr	r3, [r7, #12]
    e808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e80a:	18d2      	adds	r2, r2, r3
    e80c:	68fb      	ldr	r3, [r7, #12]
    e80e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    e810:	68fb      	ldr	r3, [r7, #12]
    e812:	689a      	ldr	r2, [r3, #8]
    e814:	68fb      	ldr	r3, [r7, #12]
    e816:	685b      	ldr	r3, [r3, #4]
    e818:	429a      	cmp	r2, r3
    e81a:	d32b      	bcc.n	e874 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    e81c:	68fb      	ldr	r3, [r7, #12]
    e81e:	681a      	ldr	r2, [r3, #0]
    e820:	68fb      	ldr	r3, [r7, #12]
    e822:	609a      	str	r2, [r3, #8]
    e824:	e026      	b.n	e874 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    e826:	68fb      	ldr	r3, [r7, #12]
    e828:	68d8      	ldr	r0, [r3, #12]
    e82a:	68fb      	ldr	r3, [r7, #12]
    e82c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    e82e:	68bb      	ldr	r3, [r7, #8]
    e830:	0019      	movs	r1, r3
    e832:	4b16      	ldr	r3, [pc, #88]	; (e88c <prvCopyDataToQueue+0xdc>)
    e834:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    e836:	68fb      	ldr	r3, [r7, #12]
    e838:	68da      	ldr	r2, [r3, #12]
    e83a:	68fb      	ldr	r3, [r7, #12]
    e83c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e83e:	425b      	negs	r3, r3
    e840:	18d2      	adds	r2, r2, r3
    e842:	68fb      	ldr	r3, [r7, #12]
    e844:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    e846:	68fb      	ldr	r3, [r7, #12]
    e848:	68da      	ldr	r2, [r3, #12]
    e84a:	68fb      	ldr	r3, [r7, #12]
    e84c:	681b      	ldr	r3, [r3, #0]
    e84e:	429a      	cmp	r2, r3
    e850:	d207      	bcs.n	e862 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    e852:	68fb      	ldr	r3, [r7, #12]
    e854:	685a      	ldr	r2, [r3, #4]
    e856:	68fb      	ldr	r3, [r7, #12]
    e858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e85a:	425b      	negs	r3, r3
    e85c:	18d2      	adds	r2, r2, r3
    e85e:	68fb      	ldr	r3, [r7, #12]
    e860:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    e862:	687b      	ldr	r3, [r7, #4]
    e864:	2b02      	cmp	r3, #2
    e866:	d105      	bne.n	e874 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    e868:	693b      	ldr	r3, [r7, #16]
    e86a:	2b00      	cmp	r3, #0
    e86c:	d002      	beq.n	e874 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    e86e:	693b      	ldr	r3, [r7, #16]
    e870:	3b01      	subs	r3, #1
    e872:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    e874:	693b      	ldr	r3, [r7, #16]
    e876:	1c5a      	adds	r2, r3, #1
    e878:	68fb      	ldr	r3, [r7, #12]
    e87a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    e87c:	697b      	ldr	r3, [r7, #20]
}
    e87e:	0018      	movs	r0, r3
    e880:	46bd      	mov	sp, r7
    e882:	b006      	add	sp, #24
    e884:	bd80      	pop	{r7, pc}
    e886:	46c0      	nop			; (mov r8, r8)
    e888:	0000f91d 	.word	0x0000f91d
    e88c:	00017b21 	.word	0x00017b21

0000e890 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    e890:	b580      	push	{r7, lr}
    e892:	b082      	sub	sp, #8
    e894:	af00      	add	r7, sp, #0
    e896:	6078      	str	r0, [r7, #4]
    e898:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    e89a:	687b      	ldr	r3, [r7, #4]
    e89c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e89e:	2b00      	cmp	r3, #0
    e8a0:	d018      	beq.n	e8d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    e8a2:	687b      	ldr	r3, [r7, #4]
    e8a4:	68da      	ldr	r2, [r3, #12]
    e8a6:	687b      	ldr	r3, [r7, #4]
    e8a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e8aa:	18d2      	adds	r2, r2, r3
    e8ac:	687b      	ldr	r3, [r7, #4]
    e8ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    e8b0:	687b      	ldr	r3, [r7, #4]
    e8b2:	68da      	ldr	r2, [r3, #12]
    e8b4:	687b      	ldr	r3, [r7, #4]
    e8b6:	685b      	ldr	r3, [r3, #4]
    e8b8:	429a      	cmp	r2, r3
    e8ba:	d303      	bcc.n	e8c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    e8bc:	687b      	ldr	r3, [r7, #4]
    e8be:	681a      	ldr	r2, [r3, #0]
    e8c0:	687b      	ldr	r3, [r7, #4]
    e8c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    e8c4:	687b      	ldr	r3, [r7, #4]
    e8c6:	68d9      	ldr	r1, [r3, #12]
    e8c8:	687b      	ldr	r3, [r7, #4]
    e8ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    e8cc:	683b      	ldr	r3, [r7, #0]
    e8ce:	0018      	movs	r0, r3
    e8d0:	4b02      	ldr	r3, [pc, #8]	; (e8dc <prvCopyDataFromQueue+0x4c>)
    e8d2:	4798      	blx	r3
	}
}
    e8d4:	46c0      	nop			; (mov r8, r8)
    e8d6:	46bd      	mov	sp, r7
    e8d8:	b002      	add	sp, #8
    e8da:	bd80      	pop	{r7, pc}
    e8dc:	00017b21 	.word	0x00017b21

0000e8e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    e8e0:	b580      	push	{r7, lr}
    e8e2:	b084      	sub	sp, #16
    e8e4:	af00      	add	r7, sp, #0
    e8e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    e8e8:	4b34      	ldr	r3, [pc, #208]	; (e9bc <prvUnlockQueue+0xdc>)
    e8ea:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
    e8ec:	230f      	movs	r3, #15
    e8ee:	18fb      	adds	r3, r7, r3
    e8f0:	687a      	ldr	r2, [r7, #4]
    e8f2:	2145      	movs	r1, #69	; 0x45
    e8f4:	5c52      	ldrb	r2, [r2, r1]
    e8f6:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    e8f8:	e022      	b.n	e940 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
    e8fa:	687b      	ldr	r3, [r7, #4]
    e8fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    e8fe:	2b00      	cmp	r3, #0
    e900:	d009      	beq.n	e916 <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    e902:	687b      	ldr	r3, [r7, #4]
    e904:	2100      	movs	r1, #0
    e906:	0018      	movs	r0, r3
    e908:	4b2d      	ldr	r3, [pc, #180]	; (e9c0 <prvUnlockQueue+0xe0>)
    e90a:	4798      	blx	r3
    e90c:	1e03      	subs	r3, r0, #0
    e90e:	d00f      	beq.n	e930 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    e910:	4b2c      	ldr	r3, [pc, #176]	; (e9c4 <prvUnlockQueue+0xe4>)
    e912:	4798      	blx	r3
    e914:	e00c      	b.n	e930 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    e916:	687b      	ldr	r3, [r7, #4]
    e918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e91a:	2b00      	cmp	r3, #0
    e91c:	d017      	beq.n	e94e <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    e91e:	687b      	ldr	r3, [r7, #4]
    e920:	3324      	adds	r3, #36	; 0x24
    e922:	0018      	movs	r0, r3
    e924:	4b28      	ldr	r3, [pc, #160]	; (e9c8 <prvUnlockQueue+0xe8>)
    e926:	4798      	blx	r3
    e928:	1e03      	subs	r3, r0, #0
    e92a:	d001      	beq.n	e930 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    e92c:	4b25      	ldr	r3, [pc, #148]	; (e9c4 <prvUnlockQueue+0xe4>)
    e92e:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    e930:	230f      	movs	r3, #15
    e932:	18fb      	adds	r3, r7, r3
    e934:	781b      	ldrb	r3, [r3, #0]
    e936:	3b01      	subs	r3, #1
    e938:	b2da      	uxtb	r2, r3
    e93a:	230f      	movs	r3, #15
    e93c:	18fb      	adds	r3, r7, r3
    e93e:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
    e940:	230f      	movs	r3, #15
    e942:	18fb      	adds	r3, r7, r3
    e944:	781b      	ldrb	r3, [r3, #0]
    e946:	b25b      	sxtb	r3, r3
    e948:	2b00      	cmp	r3, #0
    e94a:	dcd6      	bgt.n	e8fa <prvUnlockQueue+0x1a>
    e94c:	e000      	b.n	e950 <prvUnlockQueue+0x70>
						break;
    e94e:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
    e950:	687b      	ldr	r3, [r7, #4]
    e952:	2245      	movs	r2, #69	; 0x45
    e954:	21ff      	movs	r1, #255	; 0xff
    e956:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    e958:	4b1c      	ldr	r3, [pc, #112]	; (e9cc <prvUnlockQueue+0xec>)
    e95a:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    e95c:	4b17      	ldr	r3, [pc, #92]	; (e9bc <prvUnlockQueue+0xdc>)
    e95e:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
    e960:	230e      	movs	r3, #14
    e962:	18fb      	adds	r3, r7, r3
    e964:	687a      	ldr	r2, [r7, #4]
    e966:	2144      	movs	r1, #68	; 0x44
    e968:	5c52      	ldrb	r2, [r2, r1]
    e96a:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
    e96c:	e014      	b.n	e998 <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    e96e:	687b      	ldr	r3, [r7, #4]
    e970:	691b      	ldr	r3, [r3, #16]
    e972:	2b00      	cmp	r3, #0
    e974:	d017      	beq.n	e9a6 <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    e976:	687b      	ldr	r3, [r7, #4]
    e978:	3310      	adds	r3, #16
    e97a:	0018      	movs	r0, r3
    e97c:	4b12      	ldr	r3, [pc, #72]	; (e9c8 <prvUnlockQueue+0xe8>)
    e97e:	4798      	blx	r3
    e980:	1e03      	subs	r3, r0, #0
    e982:	d001      	beq.n	e988 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
    e984:	4b0f      	ldr	r3, [pc, #60]	; (e9c4 <prvUnlockQueue+0xe4>)
    e986:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    e988:	230e      	movs	r3, #14
    e98a:	18fb      	adds	r3, r7, r3
    e98c:	781b      	ldrb	r3, [r3, #0]
    e98e:	3b01      	subs	r3, #1
    e990:	b2da      	uxtb	r2, r3
    e992:	230e      	movs	r3, #14
    e994:	18fb      	adds	r3, r7, r3
    e996:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
    e998:	230e      	movs	r3, #14
    e99a:	18fb      	adds	r3, r7, r3
    e99c:	781b      	ldrb	r3, [r3, #0]
    e99e:	b25b      	sxtb	r3, r3
    e9a0:	2b00      	cmp	r3, #0
    e9a2:	dce4      	bgt.n	e96e <prvUnlockQueue+0x8e>
    e9a4:	e000      	b.n	e9a8 <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
    e9a6:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    e9a8:	687b      	ldr	r3, [r7, #4]
    e9aa:	2244      	movs	r2, #68	; 0x44
    e9ac:	21ff      	movs	r1, #255	; 0xff
    e9ae:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    e9b0:	4b06      	ldr	r3, [pc, #24]	; (e9cc <prvUnlockQueue+0xec>)
    e9b2:	4798      	blx	r3
}
    e9b4:	46c0      	nop			; (mov r8, r8)
    e9b6:	46bd      	mov	sp, r7
    e9b8:	b004      	add	sp, #16
    e9ba:	bd80      	pop	{r7, pc}
    e9bc:	0000dc81 	.word	0x0000dc81
    e9c0:	0000eab5 	.word	0x0000eab5
    e9c4:	0000f65d 	.word	0x0000f65d
    e9c8:	0000f4c9 	.word	0x0000f4c9
    e9cc:	0000dca5 	.word	0x0000dca5

0000e9d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    e9d0:	b580      	push	{r7, lr}
    e9d2:	b084      	sub	sp, #16
    e9d4:	af00      	add	r7, sp, #0
    e9d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    e9d8:	4b08      	ldr	r3, [pc, #32]	; (e9fc <prvIsQueueEmpty+0x2c>)
    e9da:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    e9dc:	687b      	ldr	r3, [r7, #4]
    e9de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    e9e0:	2b00      	cmp	r3, #0
    e9e2:	d102      	bne.n	e9ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    e9e4:	2301      	movs	r3, #1
    e9e6:	60fb      	str	r3, [r7, #12]
    e9e8:	e001      	b.n	e9ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    e9ea:	2300      	movs	r3, #0
    e9ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    e9ee:	4b04      	ldr	r3, [pc, #16]	; (ea00 <prvIsQueueEmpty+0x30>)
    e9f0:	4798      	blx	r3

	return xReturn;
    e9f2:	68fb      	ldr	r3, [r7, #12]
}
    e9f4:	0018      	movs	r0, r3
    e9f6:	46bd      	mov	sp, r7
    e9f8:	b004      	add	sp, #16
    e9fa:	bd80      	pop	{r7, pc}
    e9fc:	0000dc81 	.word	0x0000dc81
    ea00:	0000dca5 	.word	0x0000dca5

0000ea04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    ea04:	b580      	push	{r7, lr}
    ea06:	b084      	sub	sp, #16
    ea08:	af00      	add	r7, sp, #0
    ea0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    ea0c:	4b09      	ldr	r3, [pc, #36]	; (ea34 <prvIsQueueFull+0x30>)
    ea0e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    ea10:	687b      	ldr	r3, [r7, #4]
    ea12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    ea14:	687b      	ldr	r3, [r7, #4]
    ea16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    ea18:	429a      	cmp	r2, r3
    ea1a:	d102      	bne.n	ea22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    ea1c:	2301      	movs	r3, #1
    ea1e:	60fb      	str	r3, [r7, #12]
    ea20:	e001      	b.n	ea26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    ea22:	2300      	movs	r3, #0
    ea24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    ea26:	4b04      	ldr	r3, [pc, #16]	; (ea38 <prvIsQueueFull+0x34>)
    ea28:	4798      	blx	r3

	return xReturn;
    ea2a:	68fb      	ldr	r3, [r7, #12]
}
    ea2c:	0018      	movs	r0, r3
    ea2e:	46bd      	mov	sp, r7
    ea30:	b004      	add	sp, #16
    ea32:	bd80      	pop	{r7, pc}
    ea34:	0000dc81 	.word	0x0000dc81
    ea38:	0000dca5 	.word	0x0000dca5

0000ea3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    ea3c:	b580      	push	{r7, lr}
    ea3e:	b086      	sub	sp, #24
    ea40:	af00      	add	r7, sp, #0
    ea42:	60f8      	str	r0, [r7, #12]
    ea44:	60b9      	str	r1, [r7, #8]
    ea46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    ea48:	68fb      	ldr	r3, [r7, #12]
    ea4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    ea4c:	4b15      	ldr	r3, [pc, #84]	; (eaa4 <vQueueWaitForMessageRestricted+0x68>)
    ea4e:	4798      	blx	r3
    ea50:	697b      	ldr	r3, [r7, #20]
    ea52:	2244      	movs	r2, #68	; 0x44
    ea54:	5c9b      	ldrb	r3, [r3, r2]
    ea56:	b25b      	sxtb	r3, r3
    ea58:	3301      	adds	r3, #1
    ea5a:	d103      	bne.n	ea64 <vQueueWaitForMessageRestricted+0x28>
    ea5c:	697b      	ldr	r3, [r7, #20]
    ea5e:	2244      	movs	r2, #68	; 0x44
    ea60:	2100      	movs	r1, #0
    ea62:	5499      	strb	r1, [r3, r2]
    ea64:	697b      	ldr	r3, [r7, #20]
    ea66:	2245      	movs	r2, #69	; 0x45
    ea68:	5c9b      	ldrb	r3, [r3, r2]
    ea6a:	b25b      	sxtb	r3, r3
    ea6c:	3301      	adds	r3, #1
    ea6e:	d103      	bne.n	ea78 <vQueueWaitForMessageRestricted+0x3c>
    ea70:	697b      	ldr	r3, [r7, #20]
    ea72:	2245      	movs	r2, #69	; 0x45
    ea74:	2100      	movs	r1, #0
    ea76:	5499      	strb	r1, [r3, r2]
    ea78:	4b0b      	ldr	r3, [pc, #44]	; (eaa8 <vQueueWaitForMessageRestricted+0x6c>)
    ea7a:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    ea7c:	697b      	ldr	r3, [r7, #20]
    ea7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    ea80:	2b00      	cmp	r3, #0
    ea82:	d106      	bne.n	ea92 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    ea84:	697b      	ldr	r3, [r7, #20]
    ea86:	3324      	adds	r3, #36	; 0x24
    ea88:	687a      	ldr	r2, [r7, #4]
    ea8a:	68b9      	ldr	r1, [r7, #8]
    ea8c:	0018      	movs	r0, r3
    ea8e:	4b07      	ldr	r3, [pc, #28]	; (eaac <vQueueWaitForMessageRestricted+0x70>)
    ea90:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    ea92:	697b      	ldr	r3, [r7, #20]
    ea94:	0018      	movs	r0, r3
    ea96:	4b06      	ldr	r3, [pc, #24]	; (eab0 <vQueueWaitForMessageRestricted+0x74>)
    ea98:	4798      	blx	r3
	}
    ea9a:	46c0      	nop			; (mov r8, r8)
    ea9c:	46bd      	mov	sp, r7
    ea9e:	b006      	add	sp, #24
    eaa0:	bd80      	pop	{r7, pc}
    eaa2:	46c0      	nop			; (mov r8, r8)
    eaa4:	0000dc81 	.word	0x0000dc81
    eaa8:	0000dca5 	.word	0x0000dca5
    eaac:	0000f475 	.word	0x0000f475
    eab0:	0000e8e1 	.word	0x0000e8e1

0000eab4 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    eab4:	b580      	push	{r7, lr}
    eab6:	b086      	sub	sp, #24
    eab8:	af00      	add	r7, sp, #0
    eaba:	6078      	str	r0, [r7, #4]
    eabc:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    eabe:	687b      	ldr	r3, [r7, #4]
    eac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    eac2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
    eac4:	2300      	movs	r3, #0
    eac6:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    eac8:	693b      	ldr	r3, [r7, #16]
    eaca:	2b00      	cmp	r3, #0
    eacc:	d101      	bne.n	ead2 <prvNotifyQueueSetContainer+0x1e>
    eace:	b672      	cpsid	i
    ead0:	e7fe      	b.n	ead0 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    ead2:	693b      	ldr	r3, [r7, #16]
    ead4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    ead6:	693b      	ldr	r3, [r7, #16]
    ead8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    eada:	429a      	cmp	r2, r3
    eadc:	d301      	bcc.n	eae2 <prvNotifyQueueSetContainer+0x2e>
    eade:	b672      	cpsid	i
    eae0:	e7fe      	b.n	eae0 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    eae2:	693b      	ldr	r3, [r7, #16]
    eae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    eae6:	693b      	ldr	r3, [r7, #16]
    eae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    eaea:	429a      	cmp	r2, r3
    eaec:	d22a      	bcs.n	eb44 <prvNotifyQueueSetContainer+0x90>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    eaee:	230f      	movs	r3, #15
    eaf0:	18fb      	adds	r3, r7, r3
    eaf2:	693a      	ldr	r2, [r7, #16]
    eaf4:	2145      	movs	r1, #69	; 0x45
    eaf6:	5c52      	ldrb	r2, [r2, r1]
    eaf8:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    eafa:	683a      	ldr	r2, [r7, #0]
    eafc:	1d39      	adds	r1, r7, #4
    eafe:	693b      	ldr	r3, [r7, #16]
    eb00:	0018      	movs	r0, r3
    eb02:	4b13      	ldr	r3, [pc, #76]	; (eb50 <prvNotifyQueueSetContainer+0x9c>)
    eb04:	4798      	blx	r3
    eb06:	0003      	movs	r3, r0
    eb08:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
    eb0a:	230f      	movs	r3, #15
    eb0c:	18fb      	adds	r3, r7, r3
    eb0e:	781b      	ldrb	r3, [r3, #0]
    eb10:	b25b      	sxtb	r3, r3
    eb12:	3301      	adds	r3, #1
    eb14:	d10d      	bne.n	eb32 <prvNotifyQueueSetContainer+0x7e>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    eb16:	693b      	ldr	r3, [r7, #16]
    eb18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    eb1a:	2b00      	cmp	r3, #0
    eb1c:	d012      	beq.n	eb44 <prvNotifyQueueSetContainer+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    eb1e:	693b      	ldr	r3, [r7, #16]
    eb20:	3324      	adds	r3, #36	; 0x24
    eb22:	0018      	movs	r0, r3
    eb24:	4b0b      	ldr	r3, [pc, #44]	; (eb54 <prvNotifyQueueSetContainer+0xa0>)
    eb26:	4798      	blx	r3
    eb28:	1e03      	subs	r3, r0, #0
    eb2a:	d00b      	beq.n	eb44 <prvNotifyQueueSetContainer+0x90>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
    eb2c:	2301      	movs	r3, #1
    eb2e:	617b      	str	r3, [r7, #20]
    eb30:	e008      	b.n	eb44 <prvNotifyQueueSetContainer+0x90>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    eb32:	230f      	movs	r3, #15
    eb34:	18fb      	adds	r3, r7, r3
    eb36:	781b      	ldrb	r3, [r3, #0]
    eb38:	3301      	adds	r3, #1
    eb3a:	b2db      	uxtb	r3, r3
    eb3c:	b259      	sxtb	r1, r3
    eb3e:	693b      	ldr	r3, [r7, #16]
    eb40:	2245      	movs	r2, #69	; 0x45
    eb42:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    eb44:	697b      	ldr	r3, [r7, #20]
	}
    eb46:	0018      	movs	r0, r3
    eb48:	46bd      	mov	sp, r7
    eb4a:	b006      	add	sp, #24
    eb4c:	bd80      	pop	{r7, pc}
    eb4e:	46c0      	nop			; (mov r8, r8)
    eb50:	0000e7b1 	.word	0x0000e7b1
    eb54:	0000f4c9 	.word	0x0000f4c9

0000eb58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
    eb58:	b590      	push	{r4, r7, lr}
    eb5a:	b08d      	sub	sp, #52	; 0x34
    eb5c:	af04      	add	r7, sp, #16
    eb5e:	60f8      	str	r0, [r7, #12]
    eb60:	60b9      	str	r1, [r7, #8]
    eb62:	603b      	str	r3, [r7, #0]
    eb64:	1dbb      	adds	r3, r7, #6
    eb66:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    eb68:	1dbb      	adds	r3, r7, #6
    eb6a:	881b      	ldrh	r3, [r3, #0]
    eb6c:	009b      	lsls	r3, r3, #2
    eb6e:	0018      	movs	r0, r3
    eb70:	4b1d      	ldr	r3, [pc, #116]	; (ebe8 <xTaskCreate+0x90>)
    eb72:	4798      	blx	r3
    eb74:	0003      	movs	r3, r0
    eb76:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
    eb78:	697b      	ldr	r3, [r7, #20]
    eb7a:	2b00      	cmp	r3, #0
    eb7c:	d010      	beq.n	eba0 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    eb7e:	2050      	movs	r0, #80	; 0x50
    eb80:	4b19      	ldr	r3, [pc, #100]	; (ebe8 <xTaskCreate+0x90>)
    eb82:	4798      	blx	r3
    eb84:	0003      	movs	r3, r0
    eb86:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
    eb88:	69fb      	ldr	r3, [r7, #28]
    eb8a:	2b00      	cmp	r3, #0
    eb8c:	d003      	beq.n	eb96 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    eb8e:	69fb      	ldr	r3, [r7, #28]
    eb90:	697a      	ldr	r2, [r7, #20]
    eb92:	631a      	str	r2, [r3, #48]	; 0x30
    eb94:	e006      	b.n	eba4 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    eb96:	697b      	ldr	r3, [r7, #20]
    eb98:	0018      	movs	r0, r3
    eb9a:	4b14      	ldr	r3, [pc, #80]	; (ebec <xTaskCreate+0x94>)
    eb9c:	4798      	blx	r3
    eb9e:	e001      	b.n	eba4 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
    eba0:	2300      	movs	r3, #0
    eba2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    eba4:	69fb      	ldr	r3, [r7, #28]
    eba6:	2b00      	cmp	r3, #0
    eba8:	d016      	beq.n	ebd8 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    ebaa:	1dbb      	adds	r3, r7, #6
    ebac:	881a      	ldrh	r2, [r3, #0]
    ebae:	683c      	ldr	r4, [r7, #0]
    ebb0:	68b9      	ldr	r1, [r7, #8]
    ebb2:	68f8      	ldr	r0, [r7, #12]
    ebb4:	2300      	movs	r3, #0
    ebb6:	9303      	str	r3, [sp, #12]
    ebb8:	69fb      	ldr	r3, [r7, #28]
    ebba:	9302      	str	r3, [sp, #8]
    ebbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ebbe:	9301      	str	r3, [sp, #4]
    ebc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ebc2:	9300      	str	r3, [sp, #0]
    ebc4:	0023      	movs	r3, r4
    ebc6:	4c0a      	ldr	r4, [pc, #40]	; (ebf0 <xTaskCreate+0x98>)
    ebc8:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
    ebca:	69fb      	ldr	r3, [r7, #28]
    ebcc:	0018      	movs	r0, r3
    ebce:	4b09      	ldr	r3, [pc, #36]	; (ebf4 <xTaskCreate+0x9c>)
    ebd0:	4798      	blx	r3
			xReturn = pdPASS;
    ebd2:	2301      	movs	r3, #1
    ebd4:	61bb      	str	r3, [r7, #24]
    ebd6:	e002      	b.n	ebde <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    ebd8:	2301      	movs	r3, #1
    ebda:	425b      	negs	r3, r3
    ebdc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    ebde:	69bb      	ldr	r3, [r7, #24]
	}
    ebe0:	0018      	movs	r0, r3
    ebe2:	46bd      	mov	sp, r7
    ebe4:	b009      	add	sp, #36	; 0x24
    ebe6:	bd90      	pop	{r4, r7, pc}
    ebe8:	0000ddbd 	.word	0x0000ddbd
    ebec:	0000ddf1 	.word	0x0000ddf1
    ebf0:	0000ebf9 	.word	0x0000ebf9
    ebf4:	0000ecf5 	.word	0x0000ecf5

0000ebf8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
    ebf8:	b580      	push	{r7, lr}
    ebfa:	b086      	sub	sp, #24
    ebfc:	af00      	add	r7, sp, #0
    ebfe:	60f8      	str	r0, [r7, #12]
    ec00:	60b9      	str	r1, [r7, #8]
    ec02:	607a      	str	r2, [r7, #4]
    ec04:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    ec06:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ec08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    ec0a:	687b      	ldr	r3, [r7, #4]
    ec0c:	4936      	ldr	r1, [pc, #216]	; (ece8 <prvInitialiseNewTask+0xf0>)
    ec0e:	468c      	mov	ip, r1
    ec10:	4463      	add	r3, ip
    ec12:	009b      	lsls	r3, r3, #2
    ec14:	18d3      	adds	r3, r2, r3
    ec16:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    ec18:	693b      	ldr	r3, [r7, #16]
    ec1a:	2207      	movs	r2, #7
    ec1c:	4393      	bics	r3, r2
    ec1e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
    ec20:	693b      	ldr	r3, [r7, #16]
    ec22:	2207      	movs	r2, #7
    ec24:	4013      	ands	r3, r2
    ec26:	d001      	beq.n	ec2c <prvInitialiseNewTask+0x34>
    ec28:	b672      	cpsid	i
    ec2a:	e7fe      	b.n	ec2a <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    ec2c:	2300      	movs	r3, #0
    ec2e:	617b      	str	r3, [r7, #20]
    ec30:	e013      	b.n	ec5a <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    ec32:	68ba      	ldr	r2, [r7, #8]
    ec34:	697b      	ldr	r3, [r7, #20]
    ec36:	18d3      	adds	r3, r2, r3
    ec38:	7818      	ldrb	r0, [r3, #0]
    ec3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    ec3c:	2134      	movs	r1, #52	; 0x34
    ec3e:	697b      	ldr	r3, [r7, #20]
    ec40:	18d3      	adds	r3, r2, r3
    ec42:	185b      	adds	r3, r3, r1
    ec44:	1c02      	adds	r2, r0, #0
    ec46:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    ec48:	68ba      	ldr	r2, [r7, #8]
    ec4a:	697b      	ldr	r3, [r7, #20]
    ec4c:	18d3      	adds	r3, r2, r3
    ec4e:	781b      	ldrb	r3, [r3, #0]
    ec50:	2b00      	cmp	r3, #0
    ec52:	d006      	beq.n	ec62 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    ec54:	697b      	ldr	r3, [r7, #20]
    ec56:	3301      	adds	r3, #1
    ec58:	617b      	str	r3, [r7, #20]
    ec5a:	697b      	ldr	r3, [r7, #20]
    ec5c:	2b09      	cmp	r3, #9
    ec5e:	d9e8      	bls.n	ec32 <prvInitialiseNewTask+0x3a>
    ec60:	e000      	b.n	ec64 <prvInitialiseNewTask+0x6c>
		{
			break;
    ec62:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    ec64:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ec66:	223d      	movs	r2, #61	; 0x3d
    ec68:	2100      	movs	r1, #0
    ec6a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    ec6c:	6a3b      	ldr	r3, [r7, #32]
    ec6e:	2b04      	cmp	r3, #4
    ec70:	d901      	bls.n	ec76 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    ec72:	2304      	movs	r3, #4
    ec74:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    ec76:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ec78:	6a3a      	ldr	r2, [r7, #32]
    ec7a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    ec7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ec7e:	6a3a      	ldr	r2, [r7, #32]
    ec80:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
    ec82:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ec84:	2200      	movs	r2, #0
    ec86:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    ec88:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ec8a:	3304      	adds	r3, #4
    ec8c:	0018      	movs	r0, r3
    ec8e:	4b17      	ldr	r3, [pc, #92]	; (ecec <prvInitialiseNewTask+0xf4>)
    ec90:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    ec92:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ec94:	3318      	adds	r3, #24
    ec96:	0018      	movs	r0, r3
    ec98:	4b14      	ldr	r3, [pc, #80]	; (ecec <prvInitialiseNewTask+0xf4>)
    ec9a:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    ec9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ec9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    eca0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    eca2:	6a3b      	ldr	r3, [r7, #32]
    eca4:	2205      	movs	r2, #5
    eca6:	1ad2      	subs	r2, r2, r3
    eca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ecaa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    ecac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ecae:	6aba      	ldr	r2, [r7, #40]	; 0x28
    ecb0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    ecb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ecb4:	2200      	movs	r2, #0
    ecb6:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    ecb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ecba:	224c      	movs	r2, #76	; 0x4c
    ecbc:	2100      	movs	r1, #0
    ecbe:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    ecc0:	683a      	ldr	r2, [r7, #0]
    ecc2:	68f9      	ldr	r1, [r7, #12]
    ecc4:	693b      	ldr	r3, [r7, #16]
    ecc6:	0018      	movs	r0, r3
    ecc8:	4b09      	ldr	r3, [pc, #36]	; (ecf0 <prvInitialiseNewTask+0xf8>)
    ecca:	4798      	blx	r3
    eccc:	0002      	movs	r2, r0
    ecce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ecd0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    ecd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ecd4:	2b00      	cmp	r3, #0
    ecd6:	d002      	beq.n	ecde <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    ecd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ecda:	6aba      	ldr	r2, [r7, #40]	; 0x28
    ecdc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    ecde:	46c0      	nop			; (mov r8, r8)
    ece0:	46bd      	mov	sp, r7
    ece2:	b006      	add	sp, #24
    ece4:	bd80      	pop	{r7, pc}
    ece6:	46c0      	nop			; (mov r8, r8)
    ece8:	3fffffff 	.word	0x3fffffff
    ecec:	0000de61 	.word	0x0000de61
    ecf0:	0000db3d 	.word	0x0000db3d

0000ecf4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    ecf4:	b580      	push	{r7, lr}
    ecf6:	b082      	sub	sp, #8
    ecf8:	af00      	add	r7, sp, #0
    ecfa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    ecfc:	4b29      	ldr	r3, [pc, #164]	; (eda4 <prvAddNewTaskToReadyList+0xb0>)
    ecfe:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
    ed00:	4b29      	ldr	r3, [pc, #164]	; (eda8 <prvAddNewTaskToReadyList+0xb4>)
    ed02:	681b      	ldr	r3, [r3, #0]
    ed04:	1c5a      	adds	r2, r3, #1
    ed06:	4b28      	ldr	r3, [pc, #160]	; (eda8 <prvAddNewTaskToReadyList+0xb4>)
    ed08:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
    ed0a:	4b28      	ldr	r3, [pc, #160]	; (edac <prvAddNewTaskToReadyList+0xb8>)
    ed0c:	681b      	ldr	r3, [r3, #0]
    ed0e:	2b00      	cmp	r3, #0
    ed10:	d109      	bne.n	ed26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    ed12:	4b26      	ldr	r3, [pc, #152]	; (edac <prvAddNewTaskToReadyList+0xb8>)
    ed14:	687a      	ldr	r2, [r7, #4]
    ed16:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    ed18:	4b23      	ldr	r3, [pc, #140]	; (eda8 <prvAddNewTaskToReadyList+0xb4>)
    ed1a:	681b      	ldr	r3, [r3, #0]
    ed1c:	2b01      	cmp	r3, #1
    ed1e:	d110      	bne.n	ed42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    ed20:	4b23      	ldr	r3, [pc, #140]	; (edb0 <prvAddNewTaskToReadyList+0xbc>)
    ed22:	4798      	blx	r3
    ed24:	e00d      	b.n	ed42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    ed26:	4b23      	ldr	r3, [pc, #140]	; (edb4 <prvAddNewTaskToReadyList+0xc0>)
    ed28:	681b      	ldr	r3, [r3, #0]
    ed2a:	2b00      	cmp	r3, #0
    ed2c:	d109      	bne.n	ed42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    ed2e:	4b1f      	ldr	r3, [pc, #124]	; (edac <prvAddNewTaskToReadyList+0xb8>)
    ed30:	681b      	ldr	r3, [r3, #0]
    ed32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ed34:	687b      	ldr	r3, [r7, #4]
    ed36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ed38:	429a      	cmp	r2, r3
    ed3a:	d802      	bhi.n	ed42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    ed3c:	4b1b      	ldr	r3, [pc, #108]	; (edac <prvAddNewTaskToReadyList+0xb8>)
    ed3e:	687a      	ldr	r2, [r7, #4]
    ed40:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    ed42:	4b1d      	ldr	r3, [pc, #116]	; (edb8 <prvAddNewTaskToReadyList+0xc4>)
    ed44:	681b      	ldr	r3, [r3, #0]
    ed46:	1c5a      	adds	r2, r3, #1
    ed48:	4b1b      	ldr	r3, [pc, #108]	; (edb8 <prvAddNewTaskToReadyList+0xc4>)
    ed4a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    ed4c:	687b      	ldr	r3, [r7, #4]
    ed4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ed50:	4b1a      	ldr	r3, [pc, #104]	; (edbc <prvAddNewTaskToReadyList+0xc8>)
    ed52:	681b      	ldr	r3, [r3, #0]
    ed54:	429a      	cmp	r2, r3
    ed56:	d903      	bls.n	ed60 <prvAddNewTaskToReadyList+0x6c>
    ed58:	687b      	ldr	r3, [r7, #4]
    ed5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ed5c:	4b17      	ldr	r3, [pc, #92]	; (edbc <prvAddNewTaskToReadyList+0xc8>)
    ed5e:	601a      	str	r2, [r3, #0]
    ed60:	687b      	ldr	r3, [r7, #4]
    ed62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ed64:	0013      	movs	r3, r2
    ed66:	009b      	lsls	r3, r3, #2
    ed68:	189b      	adds	r3, r3, r2
    ed6a:	009b      	lsls	r3, r3, #2
    ed6c:	4a14      	ldr	r2, [pc, #80]	; (edc0 <prvAddNewTaskToReadyList+0xcc>)
    ed6e:	189a      	adds	r2, r3, r2
    ed70:	687b      	ldr	r3, [r7, #4]
    ed72:	3304      	adds	r3, #4
    ed74:	0019      	movs	r1, r3
    ed76:	0010      	movs	r0, r2
    ed78:	4b12      	ldr	r3, [pc, #72]	; (edc4 <prvAddNewTaskToReadyList+0xd0>)
    ed7a:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    ed7c:	4b12      	ldr	r3, [pc, #72]	; (edc8 <prvAddNewTaskToReadyList+0xd4>)
    ed7e:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
    ed80:	4b0c      	ldr	r3, [pc, #48]	; (edb4 <prvAddNewTaskToReadyList+0xc0>)
    ed82:	681b      	ldr	r3, [r3, #0]
    ed84:	2b00      	cmp	r3, #0
    ed86:	d008      	beq.n	ed9a <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    ed88:	4b08      	ldr	r3, [pc, #32]	; (edac <prvAddNewTaskToReadyList+0xb8>)
    ed8a:	681b      	ldr	r3, [r3, #0]
    ed8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ed8e:	687b      	ldr	r3, [r7, #4]
    ed90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ed92:	429a      	cmp	r2, r3
    ed94:	d201      	bcs.n	ed9a <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
    ed96:	4b0d      	ldr	r3, [pc, #52]	; (edcc <prvAddNewTaskToReadyList+0xd8>)
    ed98:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    ed9a:	46c0      	nop			; (mov r8, r8)
    ed9c:	46bd      	mov	sp, r7
    ed9e:	b002      	add	sp, #8
    eda0:	bd80      	pop	{r7, pc}
    eda2:	46c0      	nop			; (mov r8, r8)
    eda4:	0000dc81 	.word	0x0000dc81
    eda8:	20000380 	.word	0x20000380
    edac:	200002a8 	.word	0x200002a8
    edb0:	0000f699 	.word	0x0000f699
    edb4:	2000038c 	.word	0x2000038c
    edb8:	2000039c 	.word	0x2000039c
    edbc:	20000388 	.word	0x20000388
    edc0:	200002ac 	.word	0x200002ac
    edc4:	0000de77 	.word	0x0000de77
    edc8:	0000dca5 	.word	0x0000dca5
    edcc:	0000dc61 	.word	0x0000dc61

0000edd0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    edd0:	b580      	push	{r7, lr}
    edd2:	b086      	sub	sp, #24
    edd4:	af00      	add	r7, sp, #0
    edd6:	6078      	str	r0, [r7, #4]
    edd8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    edda:	2300      	movs	r3, #0
    eddc:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
    edde:	687b      	ldr	r3, [r7, #4]
    ede0:	2b00      	cmp	r3, #0
    ede2:	d101      	bne.n	ede8 <vTaskDelayUntil+0x18>
    ede4:	b672      	cpsid	i
    ede6:	e7fe      	b.n	ede6 <vTaskDelayUntil+0x16>
		configASSERT( ( xTimeIncrement > 0U ) );
    ede8:	683b      	ldr	r3, [r7, #0]
    edea:	2b00      	cmp	r3, #0
    edec:	d101      	bne.n	edf2 <vTaskDelayUntil+0x22>
    edee:	b672      	cpsid	i
    edf0:	e7fe      	b.n	edf0 <vTaskDelayUntil+0x20>
		configASSERT( uxSchedulerSuspended == 0 );
    edf2:	4b23      	ldr	r3, [pc, #140]	; (ee80 <vTaskDelayUntil+0xb0>)
    edf4:	681b      	ldr	r3, [r3, #0]
    edf6:	2b00      	cmp	r3, #0
    edf8:	d001      	beq.n	edfe <vTaskDelayUntil+0x2e>
    edfa:	b672      	cpsid	i
    edfc:	e7fe      	b.n	edfc <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
    edfe:	4b21      	ldr	r3, [pc, #132]	; (ee84 <vTaskDelayUntil+0xb4>)
    ee00:	4798      	blx	r3
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    ee02:	4b21      	ldr	r3, [pc, #132]	; (ee88 <vTaskDelayUntil+0xb8>)
    ee04:	681b      	ldr	r3, [r3, #0]
    ee06:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    ee08:	687b      	ldr	r3, [r7, #4]
    ee0a:	681a      	ldr	r2, [r3, #0]
    ee0c:	683b      	ldr	r3, [r7, #0]
    ee0e:	18d3      	adds	r3, r2, r3
    ee10:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
    ee12:	687b      	ldr	r3, [r7, #4]
    ee14:	681a      	ldr	r2, [r3, #0]
    ee16:	693b      	ldr	r3, [r7, #16]
    ee18:	429a      	cmp	r2, r3
    ee1a:	d90b      	bls.n	ee34 <vTaskDelayUntil+0x64>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    ee1c:	687b      	ldr	r3, [r7, #4]
    ee1e:	681a      	ldr	r2, [r3, #0]
    ee20:	68fb      	ldr	r3, [r7, #12]
    ee22:	429a      	cmp	r2, r3
    ee24:	d911      	bls.n	ee4a <vTaskDelayUntil+0x7a>
    ee26:	68fa      	ldr	r2, [r7, #12]
    ee28:	693b      	ldr	r3, [r7, #16]
    ee2a:	429a      	cmp	r2, r3
    ee2c:	d90d      	bls.n	ee4a <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
    ee2e:	2301      	movs	r3, #1
    ee30:	617b      	str	r3, [r7, #20]
    ee32:	e00a      	b.n	ee4a <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    ee34:	687b      	ldr	r3, [r7, #4]
    ee36:	681a      	ldr	r2, [r3, #0]
    ee38:	68fb      	ldr	r3, [r7, #12]
    ee3a:	429a      	cmp	r2, r3
    ee3c:	d803      	bhi.n	ee46 <vTaskDelayUntil+0x76>
    ee3e:	68fa      	ldr	r2, [r7, #12]
    ee40:	693b      	ldr	r3, [r7, #16]
    ee42:	429a      	cmp	r2, r3
    ee44:	d901      	bls.n	ee4a <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
    ee46:	2301      	movs	r3, #1
    ee48:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    ee4a:	687b      	ldr	r3, [r7, #4]
    ee4c:	68fa      	ldr	r2, [r7, #12]
    ee4e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    ee50:	697b      	ldr	r3, [r7, #20]
    ee52:	2b00      	cmp	r3, #0
    ee54:	d006      	beq.n	ee64 <vTaskDelayUntil+0x94>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    ee56:	68fa      	ldr	r2, [r7, #12]
    ee58:	693b      	ldr	r3, [r7, #16]
    ee5a:	1ad3      	subs	r3, r2, r3
    ee5c:	2100      	movs	r1, #0
    ee5e:	0018      	movs	r0, r3
    ee60:	4b0a      	ldr	r3, [pc, #40]	; (ee8c <vTaskDelayUntil+0xbc>)
    ee62:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    ee64:	4b0a      	ldr	r3, [pc, #40]	; (ee90 <vTaskDelayUntil+0xc0>)
    ee66:	4798      	blx	r3
    ee68:	0003      	movs	r3, r0
    ee6a:	60bb      	str	r3, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    ee6c:	68bb      	ldr	r3, [r7, #8]
    ee6e:	2b00      	cmp	r3, #0
    ee70:	d101      	bne.n	ee76 <vTaskDelayUntil+0xa6>
		{
			portYIELD_WITHIN_API();
    ee72:	4b08      	ldr	r3, [pc, #32]	; (ee94 <vTaskDelayUntil+0xc4>)
    ee74:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    ee76:	46c0      	nop			; (mov r8, r8)
    ee78:	46bd      	mov	sp, r7
    ee7a:	b006      	add	sp, #24
    ee7c:	bd80      	pop	{r7, pc}
    ee7e:	46c0      	nop			; (mov r8, r8)
    ee80:	200003a8 	.word	0x200003a8
    ee84:	0000f0b1 	.word	0x0000f0b1
    ee88:	20000384 	.word	0x20000384
    ee8c:	0000faf1 	.word	0x0000faf1
    ee90:	0000f0c9 	.word	0x0000f0c9
    ee94:	0000dc61 	.word	0x0000dc61

0000ee98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    ee98:	b580      	push	{r7, lr}
    ee9a:	b084      	sub	sp, #16
    ee9c:	af00      	add	r7, sp, #0
    ee9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
    eea0:	2300      	movs	r3, #0
    eea2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    eea4:	687b      	ldr	r3, [r7, #4]
    eea6:	2b00      	cmp	r3, #0
    eea8:	d010      	beq.n	eecc <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
    eeaa:	4b0d      	ldr	r3, [pc, #52]	; (eee0 <vTaskDelay+0x48>)
    eeac:	681b      	ldr	r3, [r3, #0]
    eeae:	2b00      	cmp	r3, #0
    eeb0:	d001      	beq.n	eeb6 <vTaskDelay+0x1e>
    eeb2:	b672      	cpsid	i
    eeb4:	e7fe      	b.n	eeb4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
    eeb6:	4b0b      	ldr	r3, [pc, #44]	; (eee4 <vTaskDelay+0x4c>)
    eeb8:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    eeba:	687b      	ldr	r3, [r7, #4]
    eebc:	2100      	movs	r1, #0
    eebe:	0018      	movs	r0, r3
    eec0:	4b09      	ldr	r3, [pc, #36]	; (eee8 <vTaskDelay+0x50>)
    eec2:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
    eec4:	4b09      	ldr	r3, [pc, #36]	; (eeec <vTaskDelay+0x54>)
    eec6:	4798      	blx	r3
    eec8:	0003      	movs	r3, r0
    eeca:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    eecc:	68fb      	ldr	r3, [r7, #12]
    eece:	2b00      	cmp	r3, #0
    eed0:	d101      	bne.n	eed6 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
    eed2:	4b07      	ldr	r3, [pc, #28]	; (eef0 <vTaskDelay+0x58>)
    eed4:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    eed6:	46c0      	nop			; (mov r8, r8)
    eed8:	46bd      	mov	sp, r7
    eeda:	b004      	add	sp, #16
    eedc:	bd80      	pop	{r7, pc}
    eede:	46c0      	nop			; (mov r8, r8)
    eee0:	200003a8 	.word	0x200003a8
    eee4:	0000f0b1 	.word	0x0000f0b1
    eee8:	0000faf1 	.word	0x0000faf1
    eeec:	0000f0c9 	.word	0x0000f0c9
    eef0:	0000dc61 	.word	0x0000dc61

0000eef4 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
    eef4:	b580      	push	{r7, lr}
    eef6:	b086      	sub	sp, #24
    eef8:	af00      	add	r7, sp, #0
    eefa:	6078      	str	r0, [r7, #4]
    eefc:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
    eefe:	2300      	movs	r3, #0
    ef00:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
    ef02:	683b      	ldr	r3, [r7, #0]
    ef04:	2b04      	cmp	r3, #4
    ef06:	d901      	bls.n	ef0c <vTaskPrioritySet+0x18>
    ef08:	b672      	cpsid	i
    ef0a:	e7fe      	b.n	ef0a <vTaskPrioritySet+0x16>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    ef0c:	683b      	ldr	r3, [r7, #0]
    ef0e:	2b04      	cmp	r3, #4
    ef10:	d901      	bls.n	ef16 <vTaskPrioritySet+0x22>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    ef12:	2304      	movs	r3, #4
    ef14:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
    ef16:	4b3d      	ldr	r3, [pc, #244]	; (f00c <vTaskPrioritySet+0x118>)
    ef18:	4798      	blx	r3
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
    ef1a:	687b      	ldr	r3, [r7, #4]
    ef1c:	2b00      	cmp	r3, #0
    ef1e:	d102      	bne.n	ef26 <vTaskPrioritySet+0x32>
    ef20:	4b3b      	ldr	r3, [pc, #236]	; (f010 <vTaskPrioritySet+0x11c>)
    ef22:	681b      	ldr	r3, [r3, #0]
    ef24:	e000      	b.n	ef28 <vTaskPrioritySet+0x34>
    ef26:	687b      	ldr	r3, [r7, #4]
    ef28:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
    ef2a:	693b      	ldr	r3, [r7, #16]
    ef2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    ef2e:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
    ef30:	68fa      	ldr	r2, [r7, #12]
    ef32:	683b      	ldr	r3, [r7, #0]
    ef34:	429a      	cmp	r2, r3
    ef36:	d062      	beq.n	effe <vTaskPrioritySet+0x10a>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
    ef38:	683a      	ldr	r2, [r7, #0]
    ef3a:	68fb      	ldr	r3, [r7, #12]
    ef3c:	429a      	cmp	r2, r3
    ef3e:	d90d      	bls.n	ef5c <vTaskPrioritySet+0x68>
				{
					if( pxTCB != pxCurrentTCB )
    ef40:	4b33      	ldr	r3, [pc, #204]	; (f010 <vTaskPrioritySet+0x11c>)
    ef42:	681b      	ldr	r3, [r3, #0]
    ef44:	693a      	ldr	r2, [r7, #16]
    ef46:	429a      	cmp	r2, r3
    ef48:	d00f      	beq.n	ef6a <vTaskPrioritySet+0x76>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
    ef4a:	4b31      	ldr	r3, [pc, #196]	; (f010 <vTaskPrioritySet+0x11c>)
    ef4c:	681b      	ldr	r3, [r3, #0]
    ef4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ef50:	683b      	ldr	r3, [r7, #0]
    ef52:	429a      	cmp	r2, r3
    ef54:	d809      	bhi.n	ef6a <vTaskPrioritySet+0x76>
						{
							xYieldRequired = pdTRUE;
    ef56:	2301      	movs	r3, #1
    ef58:	617b      	str	r3, [r7, #20]
    ef5a:	e006      	b.n	ef6a <vTaskPrioritySet+0x76>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
    ef5c:	4b2c      	ldr	r3, [pc, #176]	; (f010 <vTaskPrioritySet+0x11c>)
    ef5e:	681b      	ldr	r3, [r3, #0]
    ef60:	693a      	ldr	r2, [r7, #16]
    ef62:	429a      	cmp	r2, r3
    ef64:	d101      	bne.n	ef6a <vTaskPrioritySet+0x76>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
    ef66:	2301      	movs	r3, #1
    ef68:	617b      	str	r3, [r7, #20]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
    ef6a:	693b      	ldr	r3, [r7, #16]
    ef6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ef6e:	60bb      	str	r3, [r7, #8]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    ef70:	693b      	ldr	r3, [r7, #16]
    ef72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    ef74:	693b      	ldr	r3, [r7, #16]
    ef76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ef78:	429a      	cmp	r2, r3
    ef7a:	d102      	bne.n	ef82 <vTaskPrioritySet+0x8e>
					{
						pxTCB->uxPriority = uxNewPriority;
    ef7c:	693b      	ldr	r3, [r7, #16]
    ef7e:	683a      	ldr	r2, [r7, #0]
    ef80:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    ef82:	693b      	ldr	r3, [r7, #16]
    ef84:	683a      	ldr	r2, [r7, #0]
    ef86:	641a      	str	r2, [r3, #64]	; 0x40
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    ef88:	693b      	ldr	r3, [r7, #16]
    ef8a:	699b      	ldr	r3, [r3, #24]
    ef8c:	2b00      	cmp	r3, #0
    ef8e:	db04      	blt.n	ef9a <vTaskPrioritySet+0xa6>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    ef90:	683b      	ldr	r3, [r7, #0]
    ef92:	2205      	movs	r2, #5
    ef94:	1ad2      	subs	r2, r2, r3
    ef96:	693b      	ldr	r3, [r7, #16]
    ef98:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    ef9a:	693b      	ldr	r3, [r7, #16]
    ef9c:	6959      	ldr	r1, [r3, #20]
    ef9e:	68ba      	ldr	r2, [r7, #8]
    efa0:	0013      	movs	r3, r2
    efa2:	009b      	lsls	r3, r3, #2
    efa4:	189b      	adds	r3, r3, r2
    efa6:	009b      	lsls	r3, r3, #2
    efa8:	4a1a      	ldr	r2, [pc, #104]	; (f014 <vTaskPrioritySet+0x120>)
    efaa:	189b      	adds	r3, r3, r2
    efac:	4299      	cmp	r1, r3
    efae:	d101      	bne.n	efb4 <vTaskPrioritySet+0xc0>
    efb0:	2301      	movs	r3, #1
    efb2:	e000      	b.n	efb6 <vTaskPrioritySet+0xc2>
    efb4:	2300      	movs	r3, #0
    efb6:	2b00      	cmp	r3, #0
    efb8:	d01c      	beq.n	eff4 <vTaskPrioritySet+0x100>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    efba:	693b      	ldr	r3, [r7, #16]
    efbc:	3304      	adds	r3, #4
    efbe:	0018      	movs	r0, r3
    efc0:	4b15      	ldr	r3, [pc, #84]	; (f018 <vTaskPrioritySet+0x124>)
    efc2:	4798      	blx	r3
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
    efc4:	693b      	ldr	r3, [r7, #16]
    efc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    efc8:	4b14      	ldr	r3, [pc, #80]	; (f01c <vTaskPrioritySet+0x128>)
    efca:	681b      	ldr	r3, [r3, #0]
    efcc:	429a      	cmp	r2, r3
    efce:	d903      	bls.n	efd8 <vTaskPrioritySet+0xe4>
    efd0:	693b      	ldr	r3, [r7, #16]
    efd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    efd4:	4b11      	ldr	r3, [pc, #68]	; (f01c <vTaskPrioritySet+0x128>)
    efd6:	601a      	str	r2, [r3, #0]
    efd8:	693b      	ldr	r3, [r7, #16]
    efda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    efdc:	0013      	movs	r3, r2
    efde:	009b      	lsls	r3, r3, #2
    efe0:	189b      	adds	r3, r3, r2
    efe2:	009b      	lsls	r3, r3, #2
    efe4:	4a0b      	ldr	r2, [pc, #44]	; (f014 <vTaskPrioritySet+0x120>)
    efe6:	189a      	adds	r2, r3, r2
    efe8:	693b      	ldr	r3, [r7, #16]
    efea:	3304      	adds	r3, #4
    efec:	0019      	movs	r1, r3
    efee:	0010      	movs	r0, r2
    eff0:	4b0b      	ldr	r3, [pc, #44]	; (f020 <vTaskPrioritySet+0x12c>)
    eff2:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
    eff4:	697b      	ldr	r3, [r7, #20]
    eff6:	2b00      	cmp	r3, #0
    eff8:	d001      	beq.n	effe <vTaskPrioritySet+0x10a>
				{
					taskYIELD_IF_USING_PREEMPTION();
    effa:	4b0a      	ldr	r3, [pc, #40]	; (f024 <vTaskPrioritySet+0x130>)
    effc:	4798      	blx	r3
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
    effe:	4b0a      	ldr	r3, [pc, #40]	; (f028 <vTaskPrioritySet+0x134>)
    f000:	4798      	blx	r3
	}
    f002:	46c0      	nop			; (mov r8, r8)
    f004:	46bd      	mov	sp, r7
    f006:	b006      	add	sp, #24
    f008:	bd80      	pop	{r7, pc}
    f00a:	46c0      	nop			; (mov r8, r8)
    f00c:	0000dc81 	.word	0x0000dc81
    f010:	200002a8 	.word	0x200002a8
    f014:	200002ac 	.word	0x200002ac
    f018:	0000df27 	.word	0x0000df27
    f01c:	20000388 	.word	0x20000388
    f020:	0000de77 	.word	0x0000de77
    f024:	0000dc61 	.word	0x0000dc61
    f028:	0000dca5 	.word	0x0000dca5

0000f02c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    f02c:	b590      	push	{r4, r7, lr}
    f02e:	b085      	sub	sp, #20
    f030:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    f032:	4916      	ldr	r1, [pc, #88]	; (f08c <vTaskStartScheduler+0x60>)
    f034:	4816      	ldr	r0, [pc, #88]	; (f090 <vTaskStartScheduler+0x64>)
    f036:	4b17      	ldr	r3, [pc, #92]	; (f094 <vTaskStartScheduler+0x68>)
    f038:	9301      	str	r3, [sp, #4]
    f03a:	2300      	movs	r3, #0
    f03c:	9300      	str	r3, [sp, #0]
    f03e:	2300      	movs	r3, #0
    f040:	2282      	movs	r2, #130	; 0x82
    f042:	4c15      	ldr	r4, [pc, #84]	; (f098 <vTaskStartScheduler+0x6c>)
    f044:	47a0      	blx	r4
    f046:	0003      	movs	r3, r0
    f048:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    f04a:	687b      	ldr	r3, [r7, #4]
    f04c:	2b01      	cmp	r3, #1
    f04e:	d103      	bne.n	f058 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
    f050:	4b12      	ldr	r3, [pc, #72]	; (f09c <vTaskStartScheduler+0x70>)
    f052:	4798      	blx	r3
    f054:	0003      	movs	r3, r0
    f056:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    f058:	687b      	ldr	r3, [r7, #4]
    f05a:	2b01      	cmp	r3, #1
    f05c:	d10d      	bne.n	f07a <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    f05e:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    f060:	4b0f      	ldr	r3, [pc, #60]	; (f0a0 <vTaskStartScheduler+0x74>)
    f062:	2201      	movs	r2, #1
    f064:	4252      	negs	r2, r2
    f066:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    f068:	4b0e      	ldr	r3, [pc, #56]	; (f0a4 <vTaskStartScheduler+0x78>)
    f06a:	2201      	movs	r2, #1
    f06c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    f06e:	4b0e      	ldr	r3, [pc, #56]	; (f0a8 <vTaskStartScheduler+0x7c>)
    f070:	2200      	movs	r2, #0
    f072:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    f074:	4b0d      	ldr	r3, [pc, #52]	; (f0ac <vTaskStartScheduler+0x80>)
    f076:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    f078:	e004      	b.n	f084 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    f07a:	687b      	ldr	r3, [r7, #4]
    f07c:	3301      	adds	r3, #1
    f07e:	d101      	bne.n	f084 <vTaskStartScheduler+0x58>
    f080:	b672      	cpsid	i
    f082:	e7fe      	b.n	f082 <vTaskStartScheduler+0x56>
}
    f084:	46c0      	nop			; (mov r8, r8)
    f086:	46bd      	mov	sp, r7
    f088:	b003      	add	sp, #12
    f08a:	bd90      	pop	{r4, r7, pc}
    f08c:	000196e0 	.word	0x000196e0
    f090:	0000f671 	.word	0x0000f671
    f094:	200003a4 	.word	0x200003a4
    f098:	0000eb59 	.word	0x0000eb59
    f09c:	0000fba5 	.word	0x0000fba5
    f0a0:	200003a0 	.word	0x200003a0
    f0a4:	2000038c 	.word	0x2000038c
    f0a8:	20000384 	.word	0x20000384
    f0ac:	0000dc09 	.word	0x0000dc09

0000f0b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    f0b0:	b580      	push	{r7, lr}
    f0b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    f0b4:	4b03      	ldr	r3, [pc, #12]	; (f0c4 <vTaskSuspendAll+0x14>)
    f0b6:	681b      	ldr	r3, [r3, #0]
    f0b8:	1c5a      	adds	r2, r3, #1
    f0ba:	4b02      	ldr	r3, [pc, #8]	; (f0c4 <vTaskSuspendAll+0x14>)
    f0bc:	601a      	str	r2, [r3, #0]
}
    f0be:	46c0      	nop			; (mov r8, r8)
    f0c0:	46bd      	mov	sp, r7
    f0c2:	bd80      	pop	{r7, pc}
    f0c4:	200003a8 	.word	0x200003a8

0000f0c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    f0c8:	b580      	push	{r7, lr}
    f0ca:	b084      	sub	sp, #16
    f0cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    f0ce:	2300      	movs	r3, #0
    f0d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    f0d2:	2300      	movs	r3, #0
    f0d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    f0d6:	4b3a      	ldr	r3, [pc, #232]	; (f1c0 <xTaskResumeAll+0xf8>)
    f0d8:	681b      	ldr	r3, [r3, #0]
    f0da:	2b00      	cmp	r3, #0
    f0dc:	d101      	bne.n	f0e2 <xTaskResumeAll+0x1a>
    f0de:	b672      	cpsid	i
    f0e0:	e7fe      	b.n	f0e0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    f0e2:	4b38      	ldr	r3, [pc, #224]	; (f1c4 <xTaskResumeAll+0xfc>)
    f0e4:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    f0e6:	4b36      	ldr	r3, [pc, #216]	; (f1c0 <xTaskResumeAll+0xf8>)
    f0e8:	681b      	ldr	r3, [r3, #0]
    f0ea:	1e5a      	subs	r2, r3, #1
    f0ec:	4b34      	ldr	r3, [pc, #208]	; (f1c0 <xTaskResumeAll+0xf8>)
    f0ee:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    f0f0:	4b33      	ldr	r3, [pc, #204]	; (f1c0 <xTaskResumeAll+0xf8>)
    f0f2:	681b      	ldr	r3, [r3, #0]
    f0f4:	2b00      	cmp	r3, #0
    f0f6:	d15b      	bne.n	f1b0 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    f0f8:	4b33      	ldr	r3, [pc, #204]	; (f1c8 <xTaskResumeAll+0x100>)
    f0fa:	681b      	ldr	r3, [r3, #0]
    f0fc:	2b00      	cmp	r3, #0
    f0fe:	d057      	beq.n	f1b0 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    f100:	e02f      	b.n	f162 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    f102:	4b32      	ldr	r3, [pc, #200]	; (f1cc <xTaskResumeAll+0x104>)
    f104:	68db      	ldr	r3, [r3, #12]
    f106:	68db      	ldr	r3, [r3, #12]
    f108:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    f10a:	68fb      	ldr	r3, [r7, #12]
    f10c:	3318      	adds	r3, #24
    f10e:	0018      	movs	r0, r3
    f110:	4b2f      	ldr	r3, [pc, #188]	; (f1d0 <xTaskResumeAll+0x108>)
    f112:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    f114:	68fb      	ldr	r3, [r7, #12]
    f116:	3304      	adds	r3, #4
    f118:	0018      	movs	r0, r3
    f11a:	4b2d      	ldr	r3, [pc, #180]	; (f1d0 <xTaskResumeAll+0x108>)
    f11c:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    f11e:	68fb      	ldr	r3, [r7, #12]
    f120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f122:	4b2c      	ldr	r3, [pc, #176]	; (f1d4 <xTaskResumeAll+0x10c>)
    f124:	681b      	ldr	r3, [r3, #0]
    f126:	429a      	cmp	r2, r3
    f128:	d903      	bls.n	f132 <xTaskResumeAll+0x6a>
    f12a:	68fb      	ldr	r3, [r7, #12]
    f12c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f12e:	4b29      	ldr	r3, [pc, #164]	; (f1d4 <xTaskResumeAll+0x10c>)
    f130:	601a      	str	r2, [r3, #0]
    f132:	68fb      	ldr	r3, [r7, #12]
    f134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f136:	0013      	movs	r3, r2
    f138:	009b      	lsls	r3, r3, #2
    f13a:	189b      	adds	r3, r3, r2
    f13c:	009b      	lsls	r3, r3, #2
    f13e:	4a26      	ldr	r2, [pc, #152]	; (f1d8 <xTaskResumeAll+0x110>)
    f140:	189a      	adds	r2, r3, r2
    f142:	68fb      	ldr	r3, [r7, #12]
    f144:	3304      	adds	r3, #4
    f146:	0019      	movs	r1, r3
    f148:	0010      	movs	r0, r2
    f14a:	4b24      	ldr	r3, [pc, #144]	; (f1dc <xTaskResumeAll+0x114>)
    f14c:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    f14e:	68fb      	ldr	r3, [r7, #12]
    f150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f152:	4b23      	ldr	r3, [pc, #140]	; (f1e0 <xTaskResumeAll+0x118>)
    f154:	681b      	ldr	r3, [r3, #0]
    f156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f158:	429a      	cmp	r2, r3
    f15a:	d302      	bcc.n	f162 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
    f15c:	4b21      	ldr	r3, [pc, #132]	; (f1e4 <xTaskResumeAll+0x11c>)
    f15e:	2201      	movs	r2, #1
    f160:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    f162:	4b1a      	ldr	r3, [pc, #104]	; (f1cc <xTaskResumeAll+0x104>)
    f164:	681b      	ldr	r3, [r3, #0]
    f166:	2b00      	cmp	r3, #0
    f168:	d1cb      	bne.n	f102 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    f16a:	68fb      	ldr	r3, [r7, #12]
    f16c:	2b00      	cmp	r3, #0
    f16e:	d001      	beq.n	f174 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    f170:	4b1d      	ldr	r3, [pc, #116]	; (f1e8 <xTaskResumeAll+0x120>)
    f172:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    f174:	4b1d      	ldr	r3, [pc, #116]	; (f1ec <xTaskResumeAll+0x124>)
    f176:	681b      	ldr	r3, [r3, #0]
    f178:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    f17a:	687b      	ldr	r3, [r7, #4]
    f17c:	2b00      	cmp	r3, #0
    f17e:	d00f      	beq.n	f1a0 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    f180:	4b1b      	ldr	r3, [pc, #108]	; (f1f0 <xTaskResumeAll+0x128>)
    f182:	4798      	blx	r3
    f184:	1e03      	subs	r3, r0, #0
    f186:	d002      	beq.n	f18e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
    f188:	4b16      	ldr	r3, [pc, #88]	; (f1e4 <xTaskResumeAll+0x11c>)
    f18a:	2201      	movs	r2, #1
    f18c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    f18e:	687b      	ldr	r3, [r7, #4]
    f190:	3b01      	subs	r3, #1
    f192:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    f194:	687b      	ldr	r3, [r7, #4]
    f196:	2b00      	cmp	r3, #0
    f198:	d1f2      	bne.n	f180 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
    f19a:	4b14      	ldr	r3, [pc, #80]	; (f1ec <xTaskResumeAll+0x124>)
    f19c:	2200      	movs	r2, #0
    f19e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    f1a0:	4b10      	ldr	r3, [pc, #64]	; (f1e4 <xTaskResumeAll+0x11c>)
    f1a2:	681b      	ldr	r3, [r3, #0]
    f1a4:	2b00      	cmp	r3, #0
    f1a6:	d003      	beq.n	f1b0 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    f1a8:	2301      	movs	r3, #1
    f1aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    f1ac:	4b11      	ldr	r3, [pc, #68]	; (f1f4 <xTaskResumeAll+0x12c>)
    f1ae:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    f1b0:	4b11      	ldr	r3, [pc, #68]	; (f1f8 <xTaskResumeAll+0x130>)
    f1b2:	4798      	blx	r3

	return xAlreadyYielded;
    f1b4:	68bb      	ldr	r3, [r7, #8]
}
    f1b6:	0018      	movs	r0, r3
    f1b8:	46bd      	mov	sp, r7
    f1ba:	b004      	add	sp, #16
    f1bc:	bd80      	pop	{r7, pc}
    f1be:	46c0      	nop			; (mov r8, r8)
    f1c0:	200003a8 	.word	0x200003a8
    f1c4:	0000dc81 	.word	0x0000dc81
    f1c8:	20000380 	.word	0x20000380
    f1cc:	20000340 	.word	0x20000340
    f1d0:	0000df27 	.word	0x0000df27
    f1d4:	20000388 	.word	0x20000388
    f1d8:	200002ac 	.word	0x200002ac
    f1dc:	0000de77 	.word	0x0000de77
    f1e0:	200002a8 	.word	0x200002a8
    f1e4:	20000394 	.word	0x20000394
    f1e8:	0000f7b9 	.word	0x0000f7b9
    f1ec:	20000390 	.word	0x20000390
    f1f0:	0000f219 	.word	0x0000f219
    f1f4:	0000dc61 	.word	0x0000dc61
    f1f8:	0000dca5 	.word	0x0000dca5

0000f1fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    f1fc:	b580      	push	{r7, lr}
    f1fe:	b082      	sub	sp, #8
    f200:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    f202:	4b04      	ldr	r3, [pc, #16]	; (f214 <xTaskGetTickCount+0x18>)
    f204:	681b      	ldr	r3, [r3, #0]
    f206:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    f208:	687b      	ldr	r3, [r7, #4]
}
    f20a:	0018      	movs	r0, r3
    f20c:	46bd      	mov	sp, r7
    f20e:	b002      	add	sp, #8
    f210:	bd80      	pop	{r7, pc}
    f212:	46c0      	nop			; (mov r8, r8)
    f214:	20000384 	.word	0x20000384

0000f218 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    f218:	b580      	push	{r7, lr}
    f21a:	b086      	sub	sp, #24
    f21c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    f21e:	2300      	movs	r3, #0
    f220:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    f222:	4b4c      	ldr	r3, [pc, #304]	; (f354 <xTaskIncrementTick+0x13c>)
    f224:	681b      	ldr	r3, [r3, #0]
    f226:	2b00      	cmp	r3, #0
    f228:	d000      	beq.n	f22c <xTaskIncrementTick+0x14>
    f22a:	e083      	b.n	f334 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    f22c:	4b4a      	ldr	r3, [pc, #296]	; (f358 <xTaskIncrementTick+0x140>)
    f22e:	681b      	ldr	r3, [r3, #0]
    f230:	3301      	adds	r3, #1
    f232:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    f234:	4b48      	ldr	r3, [pc, #288]	; (f358 <xTaskIncrementTick+0x140>)
    f236:	693a      	ldr	r2, [r7, #16]
    f238:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    f23a:	693b      	ldr	r3, [r7, #16]
    f23c:	2b00      	cmp	r3, #0
    f23e:	d117      	bne.n	f270 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
    f240:	4b46      	ldr	r3, [pc, #280]	; (f35c <xTaskIncrementTick+0x144>)
    f242:	681b      	ldr	r3, [r3, #0]
    f244:	681b      	ldr	r3, [r3, #0]
    f246:	2b00      	cmp	r3, #0
    f248:	d001      	beq.n	f24e <xTaskIncrementTick+0x36>
    f24a:	b672      	cpsid	i
    f24c:	e7fe      	b.n	f24c <xTaskIncrementTick+0x34>
    f24e:	4b43      	ldr	r3, [pc, #268]	; (f35c <xTaskIncrementTick+0x144>)
    f250:	681b      	ldr	r3, [r3, #0]
    f252:	60fb      	str	r3, [r7, #12]
    f254:	4b42      	ldr	r3, [pc, #264]	; (f360 <xTaskIncrementTick+0x148>)
    f256:	681a      	ldr	r2, [r3, #0]
    f258:	4b40      	ldr	r3, [pc, #256]	; (f35c <xTaskIncrementTick+0x144>)
    f25a:	601a      	str	r2, [r3, #0]
    f25c:	4b40      	ldr	r3, [pc, #256]	; (f360 <xTaskIncrementTick+0x148>)
    f25e:	68fa      	ldr	r2, [r7, #12]
    f260:	601a      	str	r2, [r3, #0]
    f262:	4b40      	ldr	r3, [pc, #256]	; (f364 <xTaskIncrementTick+0x14c>)
    f264:	681b      	ldr	r3, [r3, #0]
    f266:	1c5a      	adds	r2, r3, #1
    f268:	4b3e      	ldr	r3, [pc, #248]	; (f364 <xTaskIncrementTick+0x14c>)
    f26a:	601a      	str	r2, [r3, #0]
    f26c:	4b3e      	ldr	r3, [pc, #248]	; (f368 <xTaskIncrementTick+0x150>)
    f26e:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    f270:	4b3e      	ldr	r3, [pc, #248]	; (f36c <xTaskIncrementTick+0x154>)
    f272:	681b      	ldr	r3, [r3, #0]
    f274:	693a      	ldr	r2, [r7, #16]
    f276:	429a      	cmp	r2, r3
    f278:	d34e      	bcc.n	f318 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    f27a:	4b38      	ldr	r3, [pc, #224]	; (f35c <xTaskIncrementTick+0x144>)
    f27c:	681b      	ldr	r3, [r3, #0]
    f27e:	681b      	ldr	r3, [r3, #0]
    f280:	2b00      	cmp	r3, #0
    f282:	d101      	bne.n	f288 <xTaskIncrementTick+0x70>
    f284:	2301      	movs	r3, #1
    f286:	e000      	b.n	f28a <xTaskIncrementTick+0x72>
    f288:	2300      	movs	r3, #0
    f28a:	2b00      	cmp	r3, #0
    f28c:	d004      	beq.n	f298 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    f28e:	4b37      	ldr	r3, [pc, #220]	; (f36c <xTaskIncrementTick+0x154>)
    f290:	2201      	movs	r2, #1
    f292:	4252      	negs	r2, r2
    f294:	601a      	str	r2, [r3, #0]
					break;
    f296:	e03f      	b.n	f318 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    f298:	4b30      	ldr	r3, [pc, #192]	; (f35c <xTaskIncrementTick+0x144>)
    f29a:	681b      	ldr	r3, [r3, #0]
    f29c:	68db      	ldr	r3, [r3, #12]
    f29e:	68db      	ldr	r3, [r3, #12]
    f2a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    f2a2:	68bb      	ldr	r3, [r7, #8]
    f2a4:	685b      	ldr	r3, [r3, #4]
    f2a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    f2a8:	693a      	ldr	r2, [r7, #16]
    f2aa:	687b      	ldr	r3, [r7, #4]
    f2ac:	429a      	cmp	r2, r3
    f2ae:	d203      	bcs.n	f2b8 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    f2b0:	4b2e      	ldr	r3, [pc, #184]	; (f36c <xTaskIncrementTick+0x154>)
    f2b2:	687a      	ldr	r2, [r7, #4]
    f2b4:	601a      	str	r2, [r3, #0]
						break;
    f2b6:	e02f      	b.n	f318 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    f2b8:	68bb      	ldr	r3, [r7, #8]
    f2ba:	3304      	adds	r3, #4
    f2bc:	0018      	movs	r0, r3
    f2be:	4b2c      	ldr	r3, [pc, #176]	; (f370 <xTaskIncrementTick+0x158>)
    f2c0:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    f2c2:	68bb      	ldr	r3, [r7, #8]
    f2c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f2c6:	2b00      	cmp	r3, #0
    f2c8:	d004      	beq.n	f2d4 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    f2ca:	68bb      	ldr	r3, [r7, #8]
    f2cc:	3318      	adds	r3, #24
    f2ce:	0018      	movs	r0, r3
    f2d0:	4b27      	ldr	r3, [pc, #156]	; (f370 <xTaskIncrementTick+0x158>)
    f2d2:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    f2d4:	68bb      	ldr	r3, [r7, #8]
    f2d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f2d8:	4b26      	ldr	r3, [pc, #152]	; (f374 <xTaskIncrementTick+0x15c>)
    f2da:	681b      	ldr	r3, [r3, #0]
    f2dc:	429a      	cmp	r2, r3
    f2de:	d903      	bls.n	f2e8 <xTaskIncrementTick+0xd0>
    f2e0:	68bb      	ldr	r3, [r7, #8]
    f2e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f2e4:	4b23      	ldr	r3, [pc, #140]	; (f374 <xTaskIncrementTick+0x15c>)
    f2e6:	601a      	str	r2, [r3, #0]
    f2e8:	68bb      	ldr	r3, [r7, #8]
    f2ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f2ec:	0013      	movs	r3, r2
    f2ee:	009b      	lsls	r3, r3, #2
    f2f0:	189b      	adds	r3, r3, r2
    f2f2:	009b      	lsls	r3, r3, #2
    f2f4:	4a20      	ldr	r2, [pc, #128]	; (f378 <xTaskIncrementTick+0x160>)
    f2f6:	189a      	adds	r2, r3, r2
    f2f8:	68bb      	ldr	r3, [r7, #8]
    f2fa:	3304      	adds	r3, #4
    f2fc:	0019      	movs	r1, r3
    f2fe:	0010      	movs	r0, r2
    f300:	4b1e      	ldr	r3, [pc, #120]	; (f37c <xTaskIncrementTick+0x164>)
    f302:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    f304:	68bb      	ldr	r3, [r7, #8]
    f306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f308:	4b1d      	ldr	r3, [pc, #116]	; (f380 <xTaskIncrementTick+0x168>)
    f30a:	681b      	ldr	r3, [r3, #0]
    f30c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f30e:	429a      	cmp	r2, r3
    f310:	d3b3      	bcc.n	f27a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
    f312:	2301      	movs	r3, #1
    f314:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    f316:	e7b0      	b.n	f27a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    f318:	4b19      	ldr	r3, [pc, #100]	; (f380 <xTaskIncrementTick+0x168>)
    f31a:	681b      	ldr	r3, [r3, #0]
    f31c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f31e:	4916      	ldr	r1, [pc, #88]	; (f378 <xTaskIncrementTick+0x160>)
    f320:	0013      	movs	r3, r2
    f322:	009b      	lsls	r3, r3, #2
    f324:	189b      	adds	r3, r3, r2
    f326:	009b      	lsls	r3, r3, #2
    f328:	585b      	ldr	r3, [r3, r1]
    f32a:	2b01      	cmp	r3, #1
    f32c:	d907      	bls.n	f33e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
    f32e:	2301      	movs	r3, #1
    f330:	617b      	str	r3, [r7, #20]
    f332:	e004      	b.n	f33e <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    f334:	4b13      	ldr	r3, [pc, #76]	; (f384 <xTaskIncrementTick+0x16c>)
    f336:	681b      	ldr	r3, [r3, #0]
    f338:	1c5a      	adds	r2, r3, #1
    f33a:	4b12      	ldr	r3, [pc, #72]	; (f384 <xTaskIncrementTick+0x16c>)
    f33c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    f33e:	4b12      	ldr	r3, [pc, #72]	; (f388 <xTaskIncrementTick+0x170>)
    f340:	681b      	ldr	r3, [r3, #0]
    f342:	2b00      	cmp	r3, #0
    f344:	d001      	beq.n	f34a <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
    f346:	2301      	movs	r3, #1
    f348:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    f34a:	697b      	ldr	r3, [r7, #20]
}
    f34c:	0018      	movs	r0, r3
    f34e:	46bd      	mov	sp, r7
    f350:	b006      	add	sp, #24
    f352:	bd80      	pop	{r7, pc}
    f354:	200003a8 	.word	0x200003a8
    f358:	20000384 	.word	0x20000384
    f35c:	20000338 	.word	0x20000338
    f360:	2000033c 	.word	0x2000033c
    f364:	20000398 	.word	0x20000398
    f368:	0000f7b9 	.word	0x0000f7b9
    f36c:	200003a0 	.word	0x200003a0
    f370:	0000df27 	.word	0x0000df27
    f374:	20000388 	.word	0x20000388
    f378:	200002ac 	.word	0x200002ac
    f37c:	0000de77 	.word	0x0000de77
    f380:	200002a8 	.word	0x200002a8
    f384:	20000390 	.word	0x20000390
    f388:	20000394 	.word	0x20000394

0000f38c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    f38c:	b580      	push	{r7, lr}
    f38e:	b082      	sub	sp, #8
    f390:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    f392:	4b22      	ldr	r3, [pc, #136]	; (f41c <vTaskSwitchContext+0x90>)
    f394:	681b      	ldr	r3, [r3, #0]
    f396:	2b00      	cmp	r3, #0
    f398:	d003      	beq.n	f3a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    f39a:	4b21      	ldr	r3, [pc, #132]	; (f420 <vTaskSwitchContext+0x94>)
    f39c:	2201      	movs	r2, #1
    f39e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    f3a0:	e037      	b.n	f412 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
    f3a2:	4b1f      	ldr	r3, [pc, #124]	; (f420 <vTaskSwitchContext+0x94>)
    f3a4:	2200      	movs	r2, #0
    f3a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    f3a8:	4b1e      	ldr	r3, [pc, #120]	; (f424 <vTaskSwitchContext+0x98>)
    f3aa:	681b      	ldr	r3, [r3, #0]
    f3ac:	607b      	str	r3, [r7, #4]
    f3ae:	e007      	b.n	f3c0 <vTaskSwitchContext+0x34>
    f3b0:	687b      	ldr	r3, [r7, #4]
    f3b2:	2b00      	cmp	r3, #0
    f3b4:	d101      	bne.n	f3ba <vTaskSwitchContext+0x2e>
    f3b6:	b672      	cpsid	i
    f3b8:	e7fe      	b.n	f3b8 <vTaskSwitchContext+0x2c>
    f3ba:	687b      	ldr	r3, [r7, #4]
    f3bc:	3b01      	subs	r3, #1
    f3be:	607b      	str	r3, [r7, #4]
    f3c0:	4919      	ldr	r1, [pc, #100]	; (f428 <vTaskSwitchContext+0x9c>)
    f3c2:	687a      	ldr	r2, [r7, #4]
    f3c4:	0013      	movs	r3, r2
    f3c6:	009b      	lsls	r3, r3, #2
    f3c8:	189b      	adds	r3, r3, r2
    f3ca:	009b      	lsls	r3, r3, #2
    f3cc:	585b      	ldr	r3, [r3, r1]
    f3ce:	2b00      	cmp	r3, #0
    f3d0:	d0ee      	beq.n	f3b0 <vTaskSwitchContext+0x24>
    f3d2:	687a      	ldr	r2, [r7, #4]
    f3d4:	0013      	movs	r3, r2
    f3d6:	009b      	lsls	r3, r3, #2
    f3d8:	189b      	adds	r3, r3, r2
    f3da:	009b      	lsls	r3, r3, #2
    f3dc:	4a12      	ldr	r2, [pc, #72]	; (f428 <vTaskSwitchContext+0x9c>)
    f3de:	189b      	adds	r3, r3, r2
    f3e0:	603b      	str	r3, [r7, #0]
    f3e2:	683b      	ldr	r3, [r7, #0]
    f3e4:	685b      	ldr	r3, [r3, #4]
    f3e6:	685a      	ldr	r2, [r3, #4]
    f3e8:	683b      	ldr	r3, [r7, #0]
    f3ea:	605a      	str	r2, [r3, #4]
    f3ec:	683b      	ldr	r3, [r7, #0]
    f3ee:	685a      	ldr	r2, [r3, #4]
    f3f0:	683b      	ldr	r3, [r7, #0]
    f3f2:	3308      	adds	r3, #8
    f3f4:	429a      	cmp	r2, r3
    f3f6:	d104      	bne.n	f402 <vTaskSwitchContext+0x76>
    f3f8:	683b      	ldr	r3, [r7, #0]
    f3fa:	685b      	ldr	r3, [r3, #4]
    f3fc:	685a      	ldr	r2, [r3, #4]
    f3fe:	683b      	ldr	r3, [r7, #0]
    f400:	605a      	str	r2, [r3, #4]
    f402:	683b      	ldr	r3, [r7, #0]
    f404:	685b      	ldr	r3, [r3, #4]
    f406:	68da      	ldr	r2, [r3, #12]
    f408:	4b08      	ldr	r3, [pc, #32]	; (f42c <vTaskSwitchContext+0xa0>)
    f40a:	601a      	str	r2, [r3, #0]
    f40c:	4b05      	ldr	r3, [pc, #20]	; (f424 <vTaskSwitchContext+0x98>)
    f40e:	687a      	ldr	r2, [r7, #4]
    f410:	601a      	str	r2, [r3, #0]
}
    f412:	46c0      	nop			; (mov r8, r8)
    f414:	46bd      	mov	sp, r7
    f416:	b002      	add	sp, #8
    f418:	bd80      	pop	{r7, pc}
    f41a:	46c0      	nop			; (mov r8, r8)
    f41c:	200003a8 	.word	0x200003a8
    f420:	20000394 	.word	0x20000394
    f424:	20000388 	.word	0x20000388
    f428:	200002ac 	.word	0x200002ac
    f42c:	200002a8 	.word	0x200002a8

0000f430 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    f430:	b580      	push	{r7, lr}
    f432:	b082      	sub	sp, #8
    f434:	af00      	add	r7, sp, #0
    f436:	6078      	str	r0, [r7, #4]
    f438:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
    f43a:	687b      	ldr	r3, [r7, #4]
    f43c:	2b00      	cmp	r3, #0
    f43e:	d101      	bne.n	f444 <vTaskPlaceOnEventList+0x14>
    f440:	b672      	cpsid	i
    f442:	e7fe      	b.n	f442 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    f444:	4b08      	ldr	r3, [pc, #32]	; (f468 <vTaskPlaceOnEventList+0x38>)
    f446:	681b      	ldr	r3, [r3, #0]
    f448:	3318      	adds	r3, #24
    f44a:	001a      	movs	r2, r3
    f44c:	687b      	ldr	r3, [r7, #4]
    f44e:	0011      	movs	r1, r2
    f450:	0018      	movs	r0, r3
    f452:	4b06      	ldr	r3, [pc, #24]	; (f46c <vTaskPlaceOnEventList+0x3c>)
    f454:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    f456:	683b      	ldr	r3, [r7, #0]
    f458:	2101      	movs	r1, #1
    f45a:	0018      	movs	r0, r3
    f45c:	4b04      	ldr	r3, [pc, #16]	; (f470 <vTaskPlaceOnEventList+0x40>)
    f45e:	4798      	blx	r3
}
    f460:	46c0      	nop			; (mov r8, r8)
    f462:	46bd      	mov	sp, r7
    f464:	b002      	add	sp, #8
    f466:	bd80      	pop	{r7, pc}
    f468:	200002a8 	.word	0x200002a8
    f46c:	0000debb 	.word	0x0000debb
    f470:	0000faf1 	.word	0x0000faf1

0000f474 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    f474:	b580      	push	{r7, lr}
    f476:	b084      	sub	sp, #16
    f478:	af00      	add	r7, sp, #0
    f47a:	60f8      	str	r0, [r7, #12]
    f47c:	60b9      	str	r1, [r7, #8]
    f47e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
    f480:	68fb      	ldr	r3, [r7, #12]
    f482:	2b00      	cmp	r3, #0
    f484:	d101      	bne.n	f48a <vTaskPlaceOnEventListRestricted+0x16>
    f486:	b672      	cpsid	i
    f488:	e7fe      	b.n	f488 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    f48a:	4b0c      	ldr	r3, [pc, #48]	; (f4bc <vTaskPlaceOnEventListRestricted+0x48>)
    f48c:	681b      	ldr	r3, [r3, #0]
    f48e:	3318      	adds	r3, #24
    f490:	001a      	movs	r2, r3
    f492:	68fb      	ldr	r3, [r7, #12]
    f494:	0011      	movs	r1, r2
    f496:	0018      	movs	r0, r3
    f498:	4b09      	ldr	r3, [pc, #36]	; (f4c0 <vTaskPlaceOnEventListRestricted+0x4c>)
    f49a:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
    f49c:	687b      	ldr	r3, [r7, #4]
    f49e:	2b00      	cmp	r3, #0
    f4a0:	d002      	beq.n	f4a8 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
    f4a2:	2301      	movs	r3, #1
    f4a4:	425b      	negs	r3, r3
    f4a6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    f4a8:	687a      	ldr	r2, [r7, #4]
    f4aa:	68bb      	ldr	r3, [r7, #8]
    f4ac:	0011      	movs	r1, r2
    f4ae:	0018      	movs	r0, r3
    f4b0:	4b04      	ldr	r3, [pc, #16]	; (f4c4 <vTaskPlaceOnEventListRestricted+0x50>)
    f4b2:	4798      	blx	r3
	}
    f4b4:	46c0      	nop			; (mov r8, r8)
    f4b6:	46bd      	mov	sp, r7
    f4b8:	b004      	add	sp, #16
    f4ba:	bd80      	pop	{r7, pc}
    f4bc:	200002a8 	.word	0x200002a8
    f4c0:	0000de77 	.word	0x0000de77
    f4c4:	0000faf1 	.word	0x0000faf1

0000f4c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    f4c8:	b580      	push	{r7, lr}
    f4ca:	b084      	sub	sp, #16
    f4cc:	af00      	add	r7, sp, #0
    f4ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    f4d0:	687b      	ldr	r3, [r7, #4]
    f4d2:	68db      	ldr	r3, [r3, #12]
    f4d4:	68db      	ldr	r3, [r3, #12]
    f4d6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
    f4d8:	68bb      	ldr	r3, [r7, #8]
    f4da:	2b00      	cmp	r3, #0
    f4dc:	d101      	bne.n	f4e2 <xTaskRemoveFromEventList+0x1a>
    f4de:	b672      	cpsid	i
    f4e0:	e7fe      	b.n	f4e0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    f4e2:	68bb      	ldr	r3, [r7, #8]
    f4e4:	3318      	adds	r3, #24
    f4e6:	0018      	movs	r0, r3
    f4e8:	4b1f      	ldr	r3, [pc, #124]	; (f568 <xTaskRemoveFromEventList+0xa0>)
    f4ea:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    f4ec:	4b1f      	ldr	r3, [pc, #124]	; (f56c <xTaskRemoveFromEventList+0xa4>)
    f4ee:	681b      	ldr	r3, [r3, #0]
    f4f0:	2b00      	cmp	r3, #0
    f4f2:	d11d      	bne.n	f530 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    f4f4:	68bb      	ldr	r3, [r7, #8]
    f4f6:	3304      	adds	r3, #4
    f4f8:	0018      	movs	r0, r3
    f4fa:	4b1b      	ldr	r3, [pc, #108]	; (f568 <xTaskRemoveFromEventList+0xa0>)
    f4fc:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    f4fe:	68bb      	ldr	r3, [r7, #8]
    f500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f502:	4b1b      	ldr	r3, [pc, #108]	; (f570 <xTaskRemoveFromEventList+0xa8>)
    f504:	681b      	ldr	r3, [r3, #0]
    f506:	429a      	cmp	r2, r3
    f508:	d903      	bls.n	f512 <xTaskRemoveFromEventList+0x4a>
    f50a:	68bb      	ldr	r3, [r7, #8]
    f50c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f50e:	4b18      	ldr	r3, [pc, #96]	; (f570 <xTaskRemoveFromEventList+0xa8>)
    f510:	601a      	str	r2, [r3, #0]
    f512:	68bb      	ldr	r3, [r7, #8]
    f514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f516:	0013      	movs	r3, r2
    f518:	009b      	lsls	r3, r3, #2
    f51a:	189b      	adds	r3, r3, r2
    f51c:	009b      	lsls	r3, r3, #2
    f51e:	4a15      	ldr	r2, [pc, #84]	; (f574 <xTaskRemoveFromEventList+0xac>)
    f520:	189a      	adds	r2, r3, r2
    f522:	68bb      	ldr	r3, [r7, #8]
    f524:	3304      	adds	r3, #4
    f526:	0019      	movs	r1, r3
    f528:	0010      	movs	r0, r2
    f52a:	4b13      	ldr	r3, [pc, #76]	; (f578 <xTaskRemoveFromEventList+0xb0>)
    f52c:	4798      	blx	r3
    f52e:	e007      	b.n	f540 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    f530:	68bb      	ldr	r3, [r7, #8]
    f532:	3318      	adds	r3, #24
    f534:	001a      	movs	r2, r3
    f536:	4b11      	ldr	r3, [pc, #68]	; (f57c <xTaskRemoveFromEventList+0xb4>)
    f538:	0011      	movs	r1, r2
    f53a:	0018      	movs	r0, r3
    f53c:	4b0e      	ldr	r3, [pc, #56]	; (f578 <xTaskRemoveFromEventList+0xb0>)
    f53e:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    f540:	68bb      	ldr	r3, [r7, #8]
    f542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f544:	4b0e      	ldr	r3, [pc, #56]	; (f580 <xTaskRemoveFromEventList+0xb8>)
    f546:	681b      	ldr	r3, [r3, #0]
    f548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f54a:	429a      	cmp	r2, r3
    f54c:	d905      	bls.n	f55a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    f54e:	2301      	movs	r3, #1
    f550:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    f552:	4b0c      	ldr	r3, [pc, #48]	; (f584 <xTaskRemoveFromEventList+0xbc>)
    f554:	2201      	movs	r2, #1
    f556:	601a      	str	r2, [r3, #0]
    f558:	e001      	b.n	f55e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
    f55a:	2300      	movs	r3, #0
    f55c:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    f55e:	68fb      	ldr	r3, [r7, #12]
}
    f560:	0018      	movs	r0, r3
    f562:	46bd      	mov	sp, r7
    f564:	b004      	add	sp, #16
    f566:	bd80      	pop	{r7, pc}
    f568:	0000df27 	.word	0x0000df27
    f56c:	200003a8 	.word	0x200003a8
    f570:	20000388 	.word	0x20000388
    f574:	200002ac 	.word	0x200002ac
    f578:	0000de77 	.word	0x0000de77
    f57c:	20000340 	.word	0x20000340
    f580:	200002a8 	.word	0x200002a8
    f584:	20000394 	.word	0x20000394

0000f588 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    f588:	b580      	push	{r7, lr}
    f58a:	b082      	sub	sp, #8
    f58c:	af00      	add	r7, sp, #0
    f58e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    f590:	4b05      	ldr	r3, [pc, #20]	; (f5a8 <vTaskInternalSetTimeOutState+0x20>)
    f592:	681a      	ldr	r2, [r3, #0]
    f594:	687b      	ldr	r3, [r7, #4]
    f596:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    f598:	4b04      	ldr	r3, [pc, #16]	; (f5ac <vTaskInternalSetTimeOutState+0x24>)
    f59a:	681a      	ldr	r2, [r3, #0]
    f59c:	687b      	ldr	r3, [r7, #4]
    f59e:	605a      	str	r2, [r3, #4]
}
    f5a0:	46c0      	nop			; (mov r8, r8)
    f5a2:	46bd      	mov	sp, r7
    f5a4:	b002      	add	sp, #8
    f5a6:	bd80      	pop	{r7, pc}
    f5a8:	20000398 	.word	0x20000398
    f5ac:	20000384 	.word	0x20000384

0000f5b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    f5b0:	b580      	push	{r7, lr}
    f5b2:	b086      	sub	sp, #24
    f5b4:	af00      	add	r7, sp, #0
    f5b6:	6078      	str	r0, [r7, #4]
    f5b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    f5ba:	687b      	ldr	r3, [r7, #4]
    f5bc:	2b00      	cmp	r3, #0
    f5be:	d101      	bne.n	f5c4 <xTaskCheckForTimeOut+0x14>
    f5c0:	b672      	cpsid	i
    f5c2:	e7fe      	b.n	f5c2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
    f5c4:	683b      	ldr	r3, [r7, #0]
    f5c6:	2b00      	cmp	r3, #0
    f5c8:	d101      	bne.n	f5ce <xTaskCheckForTimeOut+0x1e>
    f5ca:	b672      	cpsid	i
    f5cc:	e7fe      	b.n	f5cc <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
    f5ce:	4b1e      	ldr	r3, [pc, #120]	; (f648 <xTaskCheckForTimeOut+0x98>)
    f5d0:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    f5d2:	4b1e      	ldr	r3, [pc, #120]	; (f64c <xTaskCheckForTimeOut+0x9c>)
    f5d4:	681b      	ldr	r3, [r3, #0]
    f5d6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    f5d8:	687b      	ldr	r3, [r7, #4]
    f5da:	685b      	ldr	r3, [r3, #4]
    f5dc:	693a      	ldr	r2, [r7, #16]
    f5de:	1ad3      	subs	r3, r2, r3
    f5e0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    f5e2:	683b      	ldr	r3, [r7, #0]
    f5e4:	681b      	ldr	r3, [r3, #0]
    f5e6:	3301      	adds	r3, #1
    f5e8:	d102      	bne.n	f5f0 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    f5ea:	2300      	movs	r3, #0
    f5ec:	617b      	str	r3, [r7, #20]
    f5ee:	e024      	b.n	f63a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    f5f0:	687b      	ldr	r3, [r7, #4]
    f5f2:	681a      	ldr	r2, [r3, #0]
    f5f4:	4b16      	ldr	r3, [pc, #88]	; (f650 <xTaskCheckForTimeOut+0xa0>)
    f5f6:	681b      	ldr	r3, [r3, #0]
    f5f8:	429a      	cmp	r2, r3
    f5fa:	d007      	beq.n	f60c <xTaskCheckForTimeOut+0x5c>
    f5fc:	687b      	ldr	r3, [r7, #4]
    f5fe:	685a      	ldr	r2, [r3, #4]
    f600:	693b      	ldr	r3, [r7, #16]
    f602:	429a      	cmp	r2, r3
    f604:	d802      	bhi.n	f60c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    f606:	2301      	movs	r3, #1
    f608:	617b      	str	r3, [r7, #20]
    f60a:	e016      	b.n	f63a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    f60c:	683b      	ldr	r3, [r7, #0]
    f60e:	681a      	ldr	r2, [r3, #0]
    f610:	68fb      	ldr	r3, [r7, #12]
    f612:	429a      	cmp	r2, r3
    f614:	d90c      	bls.n	f630 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
    f616:	683b      	ldr	r3, [r7, #0]
    f618:	681a      	ldr	r2, [r3, #0]
    f61a:	68fb      	ldr	r3, [r7, #12]
    f61c:	1ad2      	subs	r2, r2, r3
    f61e:	683b      	ldr	r3, [r7, #0]
    f620:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    f622:	687b      	ldr	r3, [r7, #4]
    f624:	0018      	movs	r0, r3
    f626:	4b0b      	ldr	r3, [pc, #44]	; (f654 <xTaskCheckForTimeOut+0xa4>)
    f628:	4798      	blx	r3
			xReturn = pdFALSE;
    f62a:	2300      	movs	r3, #0
    f62c:	617b      	str	r3, [r7, #20]
    f62e:	e004      	b.n	f63a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
    f630:	683b      	ldr	r3, [r7, #0]
    f632:	2200      	movs	r2, #0
    f634:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
    f636:	2301      	movs	r3, #1
    f638:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
    f63a:	4b07      	ldr	r3, [pc, #28]	; (f658 <xTaskCheckForTimeOut+0xa8>)
    f63c:	4798      	blx	r3

	return xReturn;
    f63e:	697b      	ldr	r3, [r7, #20]
}
    f640:	0018      	movs	r0, r3
    f642:	46bd      	mov	sp, r7
    f644:	b006      	add	sp, #24
    f646:	bd80      	pop	{r7, pc}
    f648:	0000dc81 	.word	0x0000dc81
    f64c:	20000384 	.word	0x20000384
    f650:	20000398 	.word	0x20000398
    f654:	0000f589 	.word	0x0000f589
    f658:	0000dca5 	.word	0x0000dca5

0000f65c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    f65c:	b580      	push	{r7, lr}
    f65e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    f660:	4b02      	ldr	r3, [pc, #8]	; (f66c <vTaskMissedYield+0x10>)
    f662:	2201      	movs	r2, #1
    f664:	601a      	str	r2, [r3, #0]
}
    f666:	46c0      	nop			; (mov r8, r8)
    f668:	46bd      	mov	sp, r7
    f66a:	bd80      	pop	{r7, pc}
    f66c:	20000394 	.word	0x20000394

0000f670 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    f670:	b580      	push	{r7, lr}
    f672:	b082      	sub	sp, #8
    f674:	af00      	add	r7, sp, #0
    f676:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    f678:	4b04      	ldr	r3, [pc, #16]	; (f68c <prvIdleTask+0x1c>)
    f67a:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    f67c:	4b04      	ldr	r3, [pc, #16]	; (f690 <prvIdleTask+0x20>)
    f67e:	681b      	ldr	r3, [r3, #0]
    f680:	2b01      	cmp	r3, #1
    f682:	d9f9      	bls.n	f678 <prvIdleTask+0x8>
			{
				taskYIELD();
    f684:	4b03      	ldr	r3, [pc, #12]	; (f694 <prvIdleTask+0x24>)
    f686:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
    f688:	e7f6      	b.n	f678 <prvIdleTask+0x8>
    f68a:	46c0      	nop			; (mov r8, r8)
    f68c:	0000f725 	.word	0x0000f725
    f690:	200002ac 	.word	0x200002ac
    f694:	0000dc61 	.word	0x0000dc61

0000f698 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    f698:	b580      	push	{r7, lr}
    f69a:	b082      	sub	sp, #8
    f69c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    f69e:	2300      	movs	r3, #0
    f6a0:	607b      	str	r3, [r7, #4]
    f6a2:	e00c      	b.n	f6be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    f6a4:	687a      	ldr	r2, [r7, #4]
    f6a6:	0013      	movs	r3, r2
    f6a8:	009b      	lsls	r3, r3, #2
    f6aa:	189b      	adds	r3, r3, r2
    f6ac:	009b      	lsls	r3, r3, #2
    f6ae:	4a14      	ldr	r2, [pc, #80]	; (f700 <prvInitialiseTaskLists+0x68>)
    f6b0:	189b      	adds	r3, r3, r2
    f6b2:	0018      	movs	r0, r3
    f6b4:	4b13      	ldr	r3, [pc, #76]	; (f704 <prvInitialiseTaskLists+0x6c>)
    f6b6:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    f6b8:	687b      	ldr	r3, [r7, #4]
    f6ba:	3301      	adds	r3, #1
    f6bc:	607b      	str	r3, [r7, #4]
    f6be:	687b      	ldr	r3, [r7, #4]
    f6c0:	2b04      	cmp	r3, #4
    f6c2:	d9ef      	bls.n	f6a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
    f6c4:	4b10      	ldr	r3, [pc, #64]	; (f708 <prvInitialiseTaskLists+0x70>)
    f6c6:	0018      	movs	r0, r3
    f6c8:	4b0e      	ldr	r3, [pc, #56]	; (f704 <prvInitialiseTaskLists+0x6c>)
    f6ca:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
    f6cc:	4b0f      	ldr	r3, [pc, #60]	; (f70c <prvInitialiseTaskLists+0x74>)
    f6ce:	0018      	movs	r0, r3
    f6d0:	4b0c      	ldr	r3, [pc, #48]	; (f704 <prvInitialiseTaskLists+0x6c>)
    f6d2:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
    f6d4:	4b0e      	ldr	r3, [pc, #56]	; (f710 <prvInitialiseTaskLists+0x78>)
    f6d6:	0018      	movs	r0, r3
    f6d8:	4b0a      	ldr	r3, [pc, #40]	; (f704 <prvInitialiseTaskLists+0x6c>)
    f6da:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    f6dc:	4b0d      	ldr	r3, [pc, #52]	; (f714 <prvInitialiseTaskLists+0x7c>)
    f6de:	0018      	movs	r0, r3
    f6e0:	4b08      	ldr	r3, [pc, #32]	; (f704 <prvInitialiseTaskLists+0x6c>)
    f6e2:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    f6e4:	4b0c      	ldr	r3, [pc, #48]	; (f718 <prvInitialiseTaskLists+0x80>)
    f6e6:	0018      	movs	r0, r3
    f6e8:	4b06      	ldr	r3, [pc, #24]	; (f704 <prvInitialiseTaskLists+0x6c>)
    f6ea:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    f6ec:	4b0b      	ldr	r3, [pc, #44]	; (f71c <prvInitialiseTaskLists+0x84>)
    f6ee:	4a06      	ldr	r2, [pc, #24]	; (f708 <prvInitialiseTaskLists+0x70>)
    f6f0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    f6f2:	4b0b      	ldr	r3, [pc, #44]	; (f720 <prvInitialiseTaskLists+0x88>)
    f6f4:	4a05      	ldr	r2, [pc, #20]	; (f70c <prvInitialiseTaskLists+0x74>)
    f6f6:	601a      	str	r2, [r3, #0]
}
    f6f8:	46c0      	nop			; (mov r8, r8)
    f6fa:	46bd      	mov	sp, r7
    f6fc:	b002      	add	sp, #8
    f6fe:	bd80      	pop	{r7, pc}
    f700:	200002ac 	.word	0x200002ac
    f704:	0000de25 	.word	0x0000de25
    f708:	20000310 	.word	0x20000310
    f70c:	20000324 	.word	0x20000324
    f710:	20000340 	.word	0x20000340
    f714:	20000354 	.word	0x20000354
    f718:	2000036c 	.word	0x2000036c
    f71c:	20000338 	.word	0x20000338
    f720:	2000033c 	.word	0x2000033c

0000f724 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    f724:	b580      	push	{r7, lr}
    f726:	b082      	sub	sp, #8
    f728:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    f72a:	e01a      	b.n	f762 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
    f72c:	4b11      	ldr	r3, [pc, #68]	; (f774 <prvCheckTasksWaitingTermination+0x50>)
    f72e:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    f730:	4b11      	ldr	r3, [pc, #68]	; (f778 <prvCheckTasksWaitingTermination+0x54>)
    f732:	68db      	ldr	r3, [r3, #12]
    f734:	68db      	ldr	r3, [r3, #12]
    f736:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    f738:	687b      	ldr	r3, [r7, #4]
    f73a:	3304      	adds	r3, #4
    f73c:	0018      	movs	r0, r3
    f73e:	4b0f      	ldr	r3, [pc, #60]	; (f77c <prvCheckTasksWaitingTermination+0x58>)
    f740:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
    f742:	4b0f      	ldr	r3, [pc, #60]	; (f780 <prvCheckTasksWaitingTermination+0x5c>)
    f744:	681b      	ldr	r3, [r3, #0]
    f746:	1e5a      	subs	r2, r3, #1
    f748:	4b0d      	ldr	r3, [pc, #52]	; (f780 <prvCheckTasksWaitingTermination+0x5c>)
    f74a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
    f74c:	4b0d      	ldr	r3, [pc, #52]	; (f784 <prvCheckTasksWaitingTermination+0x60>)
    f74e:	681b      	ldr	r3, [r3, #0]
    f750:	1e5a      	subs	r2, r3, #1
    f752:	4b0c      	ldr	r3, [pc, #48]	; (f784 <prvCheckTasksWaitingTermination+0x60>)
    f754:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
    f756:	4b0c      	ldr	r3, [pc, #48]	; (f788 <prvCheckTasksWaitingTermination+0x64>)
    f758:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
    f75a:	687b      	ldr	r3, [r7, #4]
    f75c:	0018      	movs	r0, r3
    f75e:	4b0b      	ldr	r3, [pc, #44]	; (f78c <prvCheckTasksWaitingTermination+0x68>)
    f760:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    f762:	4b08      	ldr	r3, [pc, #32]	; (f784 <prvCheckTasksWaitingTermination+0x60>)
    f764:	681b      	ldr	r3, [r3, #0]
    f766:	2b00      	cmp	r3, #0
    f768:	d1e0      	bne.n	f72c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    f76a:	46c0      	nop			; (mov r8, r8)
    f76c:	46bd      	mov	sp, r7
    f76e:	b002      	add	sp, #8
    f770:	bd80      	pop	{r7, pc}
    f772:	46c0      	nop			; (mov r8, r8)
    f774:	0000dc81 	.word	0x0000dc81
    f778:	20000354 	.word	0x20000354
    f77c:	0000df27 	.word	0x0000df27
    f780:	20000380 	.word	0x20000380
    f784:	20000368 	.word	0x20000368
    f788:	0000dca5 	.word	0x0000dca5
    f78c:	0000f791 	.word	0x0000f791

0000f790 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    f790:	b580      	push	{r7, lr}
    f792:	b082      	sub	sp, #8
    f794:	af00      	add	r7, sp, #0
    f796:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    f798:	687b      	ldr	r3, [r7, #4]
    f79a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    f79c:	0018      	movs	r0, r3
    f79e:	4b05      	ldr	r3, [pc, #20]	; (f7b4 <prvDeleteTCB+0x24>)
    f7a0:	4798      	blx	r3
			vPortFree( pxTCB );
    f7a2:	687b      	ldr	r3, [r7, #4]
    f7a4:	0018      	movs	r0, r3
    f7a6:	4b03      	ldr	r3, [pc, #12]	; (f7b4 <prvDeleteTCB+0x24>)
    f7a8:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    f7aa:	46c0      	nop			; (mov r8, r8)
    f7ac:	46bd      	mov	sp, r7
    f7ae:	b002      	add	sp, #8
    f7b0:	bd80      	pop	{r7, pc}
    f7b2:	46c0      	nop			; (mov r8, r8)
    f7b4:	0000ddf1 	.word	0x0000ddf1

0000f7b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    f7b8:	b580      	push	{r7, lr}
    f7ba:	b082      	sub	sp, #8
    f7bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    f7be:	4b0e      	ldr	r3, [pc, #56]	; (f7f8 <prvResetNextTaskUnblockTime+0x40>)
    f7c0:	681b      	ldr	r3, [r3, #0]
    f7c2:	681b      	ldr	r3, [r3, #0]
    f7c4:	2b00      	cmp	r3, #0
    f7c6:	d101      	bne.n	f7cc <prvResetNextTaskUnblockTime+0x14>
    f7c8:	2301      	movs	r3, #1
    f7ca:	e000      	b.n	f7ce <prvResetNextTaskUnblockTime+0x16>
    f7cc:	2300      	movs	r3, #0
    f7ce:	2b00      	cmp	r3, #0
    f7d0:	d004      	beq.n	f7dc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    f7d2:	4b0a      	ldr	r3, [pc, #40]	; (f7fc <prvResetNextTaskUnblockTime+0x44>)
    f7d4:	2201      	movs	r2, #1
    f7d6:	4252      	negs	r2, r2
    f7d8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    f7da:	e008      	b.n	f7ee <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    f7dc:	4b06      	ldr	r3, [pc, #24]	; (f7f8 <prvResetNextTaskUnblockTime+0x40>)
    f7de:	681b      	ldr	r3, [r3, #0]
    f7e0:	68db      	ldr	r3, [r3, #12]
    f7e2:	68db      	ldr	r3, [r3, #12]
    f7e4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    f7e6:	687b      	ldr	r3, [r7, #4]
    f7e8:	685a      	ldr	r2, [r3, #4]
    f7ea:	4b04      	ldr	r3, [pc, #16]	; (f7fc <prvResetNextTaskUnblockTime+0x44>)
    f7ec:	601a      	str	r2, [r3, #0]
}
    f7ee:	46c0      	nop			; (mov r8, r8)
    f7f0:	46bd      	mov	sp, r7
    f7f2:	b002      	add	sp, #8
    f7f4:	bd80      	pop	{r7, pc}
    f7f6:	46c0      	nop			; (mov r8, r8)
    f7f8:	20000338 	.word	0x20000338
    f7fc:	200003a0 	.word	0x200003a0

0000f800 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    f800:	b580      	push	{r7, lr}
    f802:	b082      	sub	sp, #8
    f804:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    f806:	4b0a      	ldr	r3, [pc, #40]	; (f830 <xTaskGetSchedulerState+0x30>)
    f808:	681b      	ldr	r3, [r3, #0]
    f80a:	2b00      	cmp	r3, #0
    f80c:	d102      	bne.n	f814 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    f80e:	2301      	movs	r3, #1
    f810:	607b      	str	r3, [r7, #4]
    f812:	e008      	b.n	f826 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    f814:	4b07      	ldr	r3, [pc, #28]	; (f834 <xTaskGetSchedulerState+0x34>)
    f816:	681b      	ldr	r3, [r3, #0]
    f818:	2b00      	cmp	r3, #0
    f81a:	d102      	bne.n	f822 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    f81c:	2302      	movs	r3, #2
    f81e:	607b      	str	r3, [r7, #4]
    f820:	e001      	b.n	f826 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    f822:	2300      	movs	r3, #0
    f824:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    f826:	687b      	ldr	r3, [r7, #4]
	}
    f828:	0018      	movs	r0, r3
    f82a:	46bd      	mov	sp, r7
    f82c:	b002      	add	sp, #8
    f82e:	bd80      	pop	{r7, pc}
    f830:	2000038c 	.word	0x2000038c
    f834:	200003a8 	.word	0x200003a8

0000f838 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    f838:	b580      	push	{r7, lr}
    f83a:	b084      	sub	sp, #16
    f83c:	af00      	add	r7, sp, #0
    f83e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
    f840:	687b      	ldr	r3, [r7, #4]
    f842:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    f844:	2300      	movs	r3, #0
    f846:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
    f848:	687b      	ldr	r3, [r7, #4]
    f84a:	2b00      	cmp	r3, #0
    f84c:	d056      	beq.n	f8fc <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
    f84e:	68bb      	ldr	r3, [r7, #8]
    f850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f852:	4b2d      	ldr	r3, [pc, #180]	; (f908 <xTaskPriorityInherit+0xd0>)
    f854:	681b      	ldr	r3, [r3, #0]
    f856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f858:	429a      	cmp	r2, r3
    f85a:	d246      	bcs.n	f8ea <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    f85c:	68bb      	ldr	r3, [r7, #8]
    f85e:	699b      	ldr	r3, [r3, #24]
    f860:	2b00      	cmp	r3, #0
    f862:	db06      	blt.n	f872 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    f864:	4b28      	ldr	r3, [pc, #160]	; (f908 <xTaskPriorityInherit+0xd0>)
    f866:	681b      	ldr	r3, [r3, #0]
    f868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f86a:	2205      	movs	r2, #5
    f86c:	1ad2      	subs	r2, r2, r3
    f86e:	68bb      	ldr	r3, [r7, #8]
    f870:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
    f872:	68bb      	ldr	r3, [r7, #8]
    f874:	6959      	ldr	r1, [r3, #20]
    f876:	68bb      	ldr	r3, [r7, #8]
    f878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f87a:	0013      	movs	r3, r2
    f87c:	009b      	lsls	r3, r3, #2
    f87e:	189b      	adds	r3, r3, r2
    f880:	009b      	lsls	r3, r3, #2
    f882:	4a22      	ldr	r2, [pc, #136]	; (f90c <xTaskPriorityInherit+0xd4>)
    f884:	189b      	adds	r3, r3, r2
    f886:	4299      	cmp	r1, r3
    f888:	d101      	bne.n	f88e <xTaskPriorityInherit+0x56>
    f88a:	2301      	movs	r3, #1
    f88c:	e000      	b.n	f890 <xTaskPriorityInherit+0x58>
    f88e:	2300      	movs	r3, #0
    f890:	2b00      	cmp	r3, #0
    f892:	d022      	beq.n	f8da <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    f894:	68bb      	ldr	r3, [r7, #8]
    f896:	3304      	adds	r3, #4
    f898:	0018      	movs	r0, r3
    f89a:	4b1d      	ldr	r3, [pc, #116]	; (f910 <xTaskPriorityInherit+0xd8>)
    f89c:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    f89e:	4b1a      	ldr	r3, [pc, #104]	; (f908 <xTaskPriorityInherit+0xd0>)
    f8a0:	681b      	ldr	r3, [r3, #0]
    f8a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f8a4:	68bb      	ldr	r3, [r7, #8]
    f8a6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
    f8a8:	68bb      	ldr	r3, [r7, #8]
    f8aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f8ac:	4b19      	ldr	r3, [pc, #100]	; (f914 <xTaskPriorityInherit+0xdc>)
    f8ae:	681b      	ldr	r3, [r3, #0]
    f8b0:	429a      	cmp	r2, r3
    f8b2:	d903      	bls.n	f8bc <xTaskPriorityInherit+0x84>
    f8b4:	68bb      	ldr	r3, [r7, #8]
    f8b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f8b8:	4b16      	ldr	r3, [pc, #88]	; (f914 <xTaskPriorityInherit+0xdc>)
    f8ba:	601a      	str	r2, [r3, #0]
    f8bc:	68bb      	ldr	r3, [r7, #8]
    f8be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f8c0:	0013      	movs	r3, r2
    f8c2:	009b      	lsls	r3, r3, #2
    f8c4:	189b      	adds	r3, r3, r2
    f8c6:	009b      	lsls	r3, r3, #2
    f8c8:	4a10      	ldr	r2, [pc, #64]	; (f90c <xTaskPriorityInherit+0xd4>)
    f8ca:	189a      	adds	r2, r3, r2
    f8cc:	68bb      	ldr	r3, [r7, #8]
    f8ce:	3304      	adds	r3, #4
    f8d0:	0019      	movs	r1, r3
    f8d2:	0010      	movs	r0, r2
    f8d4:	4b10      	ldr	r3, [pc, #64]	; (f918 <xTaskPriorityInherit+0xe0>)
    f8d6:	4798      	blx	r3
    f8d8:	e004      	b.n	f8e4 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    f8da:	4b0b      	ldr	r3, [pc, #44]	; (f908 <xTaskPriorityInherit+0xd0>)
    f8dc:	681b      	ldr	r3, [r3, #0]
    f8de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f8e0:	68bb      	ldr	r3, [r7, #8]
    f8e2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
    f8e4:	2301      	movs	r3, #1
    f8e6:	60fb      	str	r3, [r7, #12]
    f8e8:	e008      	b.n	f8fc <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
    f8ea:	68bb      	ldr	r3, [r7, #8]
    f8ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    f8ee:	4b06      	ldr	r3, [pc, #24]	; (f908 <xTaskPriorityInherit+0xd0>)
    f8f0:	681b      	ldr	r3, [r3, #0]
    f8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f8f4:	429a      	cmp	r2, r3
    f8f6:	d201      	bcs.n	f8fc <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
    f8f8:	2301      	movs	r3, #1
    f8fa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    f8fc:	68fb      	ldr	r3, [r7, #12]
	}
    f8fe:	0018      	movs	r0, r3
    f900:	46bd      	mov	sp, r7
    f902:	b004      	add	sp, #16
    f904:	bd80      	pop	{r7, pc}
    f906:	46c0      	nop			; (mov r8, r8)
    f908:	200002a8 	.word	0x200002a8
    f90c:	200002ac 	.word	0x200002ac
    f910:	0000df27 	.word	0x0000df27
    f914:	20000388 	.word	0x20000388
    f918:	0000de77 	.word	0x0000de77

0000f91c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    f91c:	b580      	push	{r7, lr}
    f91e:	b084      	sub	sp, #16
    f920:	af00      	add	r7, sp, #0
    f922:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    f924:	687b      	ldr	r3, [r7, #4]
    f926:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    f928:	2300      	movs	r3, #0
    f92a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    f92c:	687b      	ldr	r3, [r7, #4]
    f92e:	2b00      	cmp	r3, #0
    f930:	d044      	beq.n	f9bc <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
    f932:	4b25      	ldr	r3, [pc, #148]	; (f9c8 <xTaskPriorityDisinherit+0xac>)
    f934:	681b      	ldr	r3, [r3, #0]
    f936:	68ba      	ldr	r2, [r7, #8]
    f938:	429a      	cmp	r2, r3
    f93a:	d001      	beq.n	f940 <xTaskPriorityDisinherit+0x24>
    f93c:	b672      	cpsid	i
    f93e:	e7fe      	b.n	f93e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
    f940:	68bb      	ldr	r3, [r7, #8]
    f942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f944:	2b00      	cmp	r3, #0
    f946:	d101      	bne.n	f94c <xTaskPriorityDisinherit+0x30>
    f948:	b672      	cpsid	i
    f94a:	e7fe      	b.n	f94a <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
    f94c:	68bb      	ldr	r3, [r7, #8]
    f94e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f950:	1e5a      	subs	r2, r3, #1
    f952:	68bb      	ldr	r3, [r7, #8]
    f954:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    f956:	68bb      	ldr	r3, [r7, #8]
    f958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f95a:	68bb      	ldr	r3, [r7, #8]
    f95c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    f95e:	429a      	cmp	r2, r3
    f960:	d02c      	beq.n	f9bc <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    f962:	68bb      	ldr	r3, [r7, #8]
    f964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f966:	2b00      	cmp	r3, #0
    f968:	d128      	bne.n	f9bc <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    f96a:	68bb      	ldr	r3, [r7, #8]
    f96c:	3304      	adds	r3, #4
    f96e:	0018      	movs	r0, r3
    f970:	4b16      	ldr	r3, [pc, #88]	; (f9cc <xTaskPriorityDisinherit+0xb0>)
    f972:	4798      	blx	r3
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    f974:	68bb      	ldr	r3, [r7, #8]
    f976:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    f978:	68bb      	ldr	r3, [r7, #8]
    f97a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    f97c:	68bb      	ldr	r3, [r7, #8]
    f97e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f980:	2205      	movs	r2, #5
    f982:	1ad2      	subs	r2, r2, r3
    f984:	68bb      	ldr	r3, [r7, #8]
    f986:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
    f988:	68bb      	ldr	r3, [r7, #8]
    f98a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f98c:	4b10      	ldr	r3, [pc, #64]	; (f9d0 <xTaskPriorityDisinherit+0xb4>)
    f98e:	681b      	ldr	r3, [r3, #0]
    f990:	429a      	cmp	r2, r3
    f992:	d903      	bls.n	f99c <xTaskPriorityDisinherit+0x80>
    f994:	68bb      	ldr	r3, [r7, #8]
    f996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f998:	4b0d      	ldr	r3, [pc, #52]	; (f9d0 <xTaskPriorityDisinherit+0xb4>)
    f99a:	601a      	str	r2, [r3, #0]
    f99c:	68bb      	ldr	r3, [r7, #8]
    f99e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f9a0:	0013      	movs	r3, r2
    f9a2:	009b      	lsls	r3, r3, #2
    f9a4:	189b      	adds	r3, r3, r2
    f9a6:	009b      	lsls	r3, r3, #2
    f9a8:	4a0a      	ldr	r2, [pc, #40]	; (f9d4 <xTaskPriorityDisinherit+0xb8>)
    f9aa:	189a      	adds	r2, r3, r2
    f9ac:	68bb      	ldr	r3, [r7, #8]
    f9ae:	3304      	adds	r3, #4
    f9b0:	0019      	movs	r1, r3
    f9b2:	0010      	movs	r0, r2
    f9b4:	4b08      	ldr	r3, [pc, #32]	; (f9d8 <xTaskPriorityDisinherit+0xbc>)
    f9b6:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    f9b8:	2301      	movs	r3, #1
    f9ba:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    f9bc:	68fb      	ldr	r3, [r7, #12]
	}
    f9be:	0018      	movs	r0, r3
    f9c0:	46bd      	mov	sp, r7
    f9c2:	b004      	add	sp, #16
    f9c4:	bd80      	pop	{r7, pc}
    f9c6:	46c0      	nop			; (mov r8, r8)
    f9c8:	200002a8 	.word	0x200002a8
    f9cc:	0000df27 	.word	0x0000df27
    f9d0:	20000388 	.word	0x20000388
    f9d4:	200002ac 	.word	0x200002ac
    f9d8:	0000de77 	.word	0x0000de77

0000f9dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
    f9dc:	b580      	push	{r7, lr}
    f9de:	b086      	sub	sp, #24
    f9e0:	af00      	add	r7, sp, #0
    f9e2:	6078      	str	r0, [r7, #4]
    f9e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    f9e6:	687b      	ldr	r3, [r7, #4]
    f9e8:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
    f9ea:	2301      	movs	r3, #1
    f9ec:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    f9ee:	687b      	ldr	r3, [r7, #4]
    f9f0:	2b00      	cmp	r3, #0
    f9f2:	d05d      	beq.n	fab0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
    f9f4:	693b      	ldr	r3, [r7, #16]
    f9f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f9f8:	2b00      	cmp	r3, #0
    f9fa:	d101      	bne.n	fa00 <vTaskPriorityDisinheritAfterTimeout+0x24>
    f9fc:	b672      	cpsid	i
    f9fe:	e7fe      	b.n	f9fe <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
    fa00:	693b      	ldr	r3, [r7, #16]
    fa02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    fa04:	683b      	ldr	r3, [r7, #0]
    fa06:	429a      	cmp	r2, r3
    fa08:	d202      	bcs.n	fa10 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
    fa0a:	683b      	ldr	r3, [r7, #0]
    fa0c:	617b      	str	r3, [r7, #20]
    fa0e:	e002      	b.n	fa16 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
    fa10:	693b      	ldr	r3, [r7, #16]
    fa12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    fa14:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
    fa16:	693b      	ldr	r3, [r7, #16]
    fa18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    fa1a:	697b      	ldr	r3, [r7, #20]
    fa1c:	429a      	cmp	r2, r3
    fa1e:	d047      	beq.n	fab0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
    fa20:	693b      	ldr	r3, [r7, #16]
    fa22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    fa24:	68fb      	ldr	r3, [r7, #12]
    fa26:	429a      	cmp	r2, r3
    fa28:	d142      	bne.n	fab0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
    fa2a:	4b23      	ldr	r3, [pc, #140]	; (fab8 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
    fa2c:	681b      	ldr	r3, [r3, #0]
    fa2e:	693a      	ldr	r2, [r7, #16]
    fa30:	429a      	cmp	r2, r3
    fa32:	d101      	bne.n	fa38 <vTaskPriorityDisinheritAfterTimeout+0x5c>
    fa34:	b672      	cpsid	i
    fa36:	e7fe      	b.n	fa36 <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
    fa38:	693b      	ldr	r3, [r7, #16]
    fa3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    fa3c:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
    fa3e:	693b      	ldr	r3, [r7, #16]
    fa40:	697a      	ldr	r2, [r7, #20]
    fa42:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    fa44:	693b      	ldr	r3, [r7, #16]
    fa46:	699b      	ldr	r3, [r3, #24]
    fa48:	2b00      	cmp	r3, #0
    fa4a:	db04      	blt.n	fa56 <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    fa4c:	697b      	ldr	r3, [r7, #20]
    fa4e:	2205      	movs	r2, #5
    fa50:	1ad2      	subs	r2, r2, r3
    fa52:	693b      	ldr	r3, [r7, #16]
    fa54:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    fa56:	693b      	ldr	r3, [r7, #16]
    fa58:	6959      	ldr	r1, [r3, #20]
    fa5a:	68ba      	ldr	r2, [r7, #8]
    fa5c:	0013      	movs	r3, r2
    fa5e:	009b      	lsls	r3, r3, #2
    fa60:	189b      	adds	r3, r3, r2
    fa62:	009b      	lsls	r3, r3, #2
    fa64:	4a15      	ldr	r2, [pc, #84]	; (fabc <vTaskPriorityDisinheritAfterTimeout+0xe0>)
    fa66:	189b      	adds	r3, r3, r2
    fa68:	4299      	cmp	r1, r3
    fa6a:	d101      	bne.n	fa70 <vTaskPriorityDisinheritAfterTimeout+0x94>
    fa6c:	2301      	movs	r3, #1
    fa6e:	e000      	b.n	fa72 <vTaskPriorityDisinheritAfterTimeout+0x96>
    fa70:	2300      	movs	r3, #0
    fa72:	2b00      	cmp	r3, #0
    fa74:	d01c      	beq.n	fab0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    fa76:	693b      	ldr	r3, [r7, #16]
    fa78:	3304      	adds	r3, #4
    fa7a:	0018      	movs	r0, r3
    fa7c:	4b10      	ldr	r3, [pc, #64]	; (fac0 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
    fa7e:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
    fa80:	693b      	ldr	r3, [r7, #16]
    fa82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    fa84:	4b0f      	ldr	r3, [pc, #60]	; (fac4 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
    fa86:	681b      	ldr	r3, [r3, #0]
    fa88:	429a      	cmp	r2, r3
    fa8a:	d903      	bls.n	fa94 <vTaskPriorityDisinheritAfterTimeout+0xb8>
    fa8c:	693b      	ldr	r3, [r7, #16]
    fa8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    fa90:	4b0c      	ldr	r3, [pc, #48]	; (fac4 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
    fa92:	601a      	str	r2, [r3, #0]
    fa94:	693b      	ldr	r3, [r7, #16]
    fa96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    fa98:	0013      	movs	r3, r2
    fa9a:	009b      	lsls	r3, r3, #2
    fa9c:	189b      	adds	r3, r3, r2
    fa9e:	009b      	lsls	r3, r3, #2
    faa0:	4a06      	ldr	r2, [pc, #24]	; (fabc <vTaskPriorityDisinheritAfterTimeout+0xe0>)
    faa2:	189a      	adds	r2, r3, r2
    faa4:	693b      	ldr	r3, [r7, #16]
    faa6:	3304      	adds	r3, #4
    faa8:	0019      	movs	r1, r3
    faaa:	0010      	movs	r0, r2
    faac:	4b06      	ldr	r3, [pc, #24]	; (fac8 <vTaskPriorityDisinheritAfterTimeout+0xec>)
    faae:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    fab0:	46c0      	nop			; (mov r8, r8)
    fab2:	46bd      	mov	sp, r7
    fab4:	b006      	add	sp, #24
    fab6:	bd80      	pop	{r7, pc}
    fab8:	200002a8 	.word	0x200002a8
    fabc:	200002ac 	.word	0x200002ac
    fac0:	0000df27 	.word	0x0000df27
    fac4:	20000388 	.word	0x20000388
    fac8:	0000de77 	.word	0x0000de77

0000facc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
    facc:	b580      	push	{r7, lr}
    face:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    fad0:	4b06      	ldr	r3, [pc, #24]	; (faec <pvTaskIncrementMutexHeldCount+0x20>)
    fad2:	681b      	ldr	r3, [r3, #0]
    fad4:	2b00      	cmp	r3, #0
    fad6:	d004      	beq.n	fae2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    fad8:	4b04      	ldr	r3, [pc, #16]	; (faec <pvTaskIncrementMutexHeldCount+0x20>)
    fada:	681b      	ldr	r3, [r3, #0]
    fadc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    fade:	3201      	adds	r2, #1
    fae0:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
    fae2:	4b02      	ldr	r3, [pc, #8]	; (faec <pvTaskIncrementMutexHeldCount+0x20>)
    fae4:	681b      	ldr	r3, [r3, #0]
	}
    fae6:	0018      	movs	r0, r3
    fae8:	46bd      	mov	sp, r7
    faea:	bd80      	pop	{r7, pc}
    faec:	200002a8 	.word	0x200002a8

0000faf0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    faf0:	b580      	push	{r7, lr}
    faf2:	b084      	sub	sp, #16
    faf4:	af00      	add	r7, sp, #0
    faf6:	6078      	str	r0, [r7, #4]
    faf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    fafa:	4b21      	ldr	r3, [pc, #132]	; (fb80 <prvAddCurrentTaskToDelayedList+0x90>)
    fafc:	681b      	ldr	r3, [r3, #0]
    fafe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    fb00:	4b20      	ldr	r3, [pc, #128]	; (fb84 <prvAddCurrentTaskToDelayedList+0x94>)
    fb02:	681b      	ldr	r3, [r3, #0]
    fb04:	3304      	adds	r3, #4
    fb06:	0018      	movs	r0, r3
    fb08:	4b1f      	ldr	r3, [pc, #124]	; (fb88 <prvAddCurrentTaskToDelayedList+0x98>)
    fb0a:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    fb0c:	687b      	ldr	r3, [r7, #4]
    fb0e:	3301      	adds	r3, #1
    fb10:	d10b      	bne.n	fb2a <prvAddCurrentTaskToDelayedList+0x3a>
    fb12:	683b      	ldr	r3, [r7, #0]
    fb14:	2b00      	cmp	r3, #0
    fb16:	d008      	beq.n	fb2a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    fb18:	4b1a      	ldr	r3, [pc, #104]	; (fb84 <prvAddCurrentTaskToDelayedList+0x94>)
    fb1a:	681b      	ldr	r3, [r3, #0]
    fb1c:	1d1a      	adds	r2, r3, #4
    fb1e:	4b1b      	ldr	r3, [pc, #108]	; (fb8c <prvAddCurrentTaskToDelayedList+0x9c>)
    fb20:	0011      	movs	r1, r2
    fb22:	0018      	movs	r0, r3
    fb24:	4b1a      	ldr	r3, [pc, #104]	; (fb90 <prvAddCurrentTaskToDelayedList+0xa0>)
    fb26:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    fb28:	e026      	b.n	fb78 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
    fb2a:	68fa      	ldr	r2, [r7, #12]
    fb2c:	687b      	ldr	r3, [r7, #4]
    fb2e:	18d3      	adds	r3, r2, r3
    fb30:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    fb32:	4b14      	ldr	r3, [pc, #80]	; (fb84 <prvAddCurrentTaskToDelayedList+0x94>)
    fb34:	681b      	ldr	r3, [r3, #0]
    fb36:	68ba      	ldr	r2, [r7, #8]
    fb38:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
    fb3a:	68ba      	ldr	r2, [r7, #8]
    fb3c:	68fb      	ldr	r3, [r7, #12]
    fb3e:	429a      	cmp	r2, r3
    fb40:	d209      	bcs.n	fb56 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    fb42:	4b14      	ldr	r3, [pc, #80]	; (fb94 <prvAddCurrentTaskToDelayedList+0xa4>)
    fb44:	681a      	ldr	r2, [r3, #0]
    fb46:	4b0f      	ldr	r3, [pc, #60]	; (fb84 <prvAddCurrentTaskToDelayedList+0x94>)
    fb48:	681b      	ldr	r3, [r3, #0]
    fb4a:	3304      	adds	r3, #4
    fb4c:	0019      	movs	r1, r3
    fb4e:	0010      	movs	r0, r2
    fb50:	4b11      	ldr	r3, [pc, #68]	; (fb98 <prvAddCurrentTaskToDelayedList+0xa8>)
    fb52:	4798      	blx	r3
}
    fb54:	e010      	b.n	fb78 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    fb56:	4b11      	ldr	r3, [pc, #68]	; (fb9c <prvAddCurrentTaskToDelayedList+0xac>)
    fb58:	681a      	ldr	r2, [r3, #0]
    fb5a:	4b0a      	ldr	r3, [pc, #40]	; (fb84 <prvAddCurrentTaskToDelayedList+0x94>)
    fb5c:	681b      	ldr	r3, [r3, #0]
    fb5e:	3304      	adds	r3, #4
    fb60:	0019      	movs	r1, r3
    fb62:	0010      	movs	r0, r2
    fb64:	4b0c      	ldr	r3, [pc, #48]	; (fb98 <prvAddCurrentTaskToDelayedList+0xa8>)
    fb66:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
    fb68:	4b0d      	ldr	r3, [pc, #52]	; (fba0 <prvAddCurrentTaskToDelayedList+0xb0>)
    fb6a:	681b      	ldr	r3, [r3, #0]
    fb6c:	68ba      	ldr	r2, [r7, #8]
    fb6e:	429a      	cmp	r2, r3
    fb70:	d202      	bcs.n	fb78 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
    fb72:	4b0b      	ldr	r3, [pc, #44]	; (fba0 <prvAddCurrentTaskToDelayedList+0xb0>)
    fb74:	68ba      	ldr	r2, [r7, #8]
    fb76:	601a      	str	r2, [r3, #0]
}
    fb78:	46c0      	nop			; (mov r8, r8)
    fb7a:	46bd      	mov	sp, r7
    fb7c:	b004      	add	sp, #16
    fb7e:	bd80      	pop	{r7, pc}
    fb80:	20000384 	.word	0x20000384
    fb84:	200002a8 	.word	0x200002a8
    fb88:	0000df27 	.word	0x0000df27
    fb8c:	2000036c 	.word	0x2000036c
    fb90:	0000de77 	.word	0x0000de77
    fb94:	2000033c 	.word	0x2000033c
    fb98:	0000debb 	.word	0x0000debb
    fb9c:	20000338 	.word	0x20000338
    fba0:	200003a0 	.word	0x200003a0

0000fba4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    fba4:	b590      	push	{r4, r7, lr}
    fba6:	b085      	sub	sp, #20
    fba8:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
    fbaa:	2300      	movs	r3, #0
    fbac:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    fbae:	4b0e      	ldr	r3, [pc, #56]	; (fbe8 <xTimerCreateTimerTask+0x44>)
    fbb0:	4798      	blx	r3

	if( xTimerQueue != NULL )
    fbb2:	4b0e      	ldr	r3, [pc, #56]	; (fbec <xTimerCreateTimerTask+0x48>)
    fbb4:	681b      	ldr	r3, [r3, #0]
    fbb6:	2b00      	cmp	r3, #0
    fbb8:	d00c      	beq.n	fbd4 <xTimerCreateTimerTask+0x30>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
    fbba:	2382      	movs	r3, #130	; 0x82
    fbbc:	005a      	lsls	r2, r3, #1
    fbbe:	490c      	ldr	r1, [pc, #48]	; (fbf0 <xTimerCreateTimerTask+0x4c>)
    fbc0:	480c      	ldr	r0, [pc, #48]	; (fbf4 <xTimerCreateTimerTask+0x50>)
    fbc2:	4b0d      	ldr	r3, [pc, #52]	; (fbf8 <xTimerCreateTimerTask+0x54>)
    fbc4:	9301      	str	r3, [sp, #4]
    fbc6:	2304      	movs	r3, #4
    fbc8:	9300      	str	r3, [sp, #0]
    fbca:	2300      	movs	r3, #0
    fbcc:	4c0b      	ldr	r4, [pc, #44]	; (fbfc <xTimerCreateTimerTask+0x58>)
    fbce:	47a0      	blx	r4
    fbd0:	0003      	movs	r3, r0
    fbd2:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    fbd4:	687b      	ldr	r3, [r7, #4]
    fbd6:	2b00      	cmp	r3, #0
    fbd8:	d101      	bne.n	fbde <xTimerCreateTimerTask+0x3a>
    fbda:	b672      	cpsid	i
    fbdc:	e7fe      	b.n	fbdc <xTimerCreateTimerTask+0x38>
	return xReturn;
    fbde:	687b      	ldr	r3, [r7, #4]
}
    fbe0:	0018      	movs	r0, r3
    fbe2:	46bd      	mov	sp, r7
    fbe4:	b003      	add	sp, #12
    fbe6:	bd90      	pop	{r4, r7, pc}
    fbe8:	000101b5 	.word	0x000101b5
    fbec:	200003dc 	.word	0x200003dc
    fbf0:	000196e8 	.word	0x000196e8
    fbf4:	0000fdc9 	.word	0x0000fdc9
    fbf8:	200003e0 	.word	0x200003e0
    fbfc:	0000eb59 	.word	0x0000eb59

0000fc00 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
    fc00:	b590      	push	{r4, r7, lr}
    fc02:	b089      	sub	sp, #36	; 0x24
    fc04:	af02      	add	r7, sp, #8
    fc06:	60f8      	str	r0, [r7, #12]
    fc08:	60b9      	str	r1, [r7, #8]
    fc0a:	607a      	str	r2, [r7, #4]
    fc0c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
    fc0e:	2028      	movs	r0, #40	; 0x28
    fc10:	4b0b      	ldr	r3, [pc, #44]	; (fc40 <xTimerCreate+0x40>)
    fc12:	4798      	blx	r3
    fc14:	0003      	movs	r3, r0
    fc16:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
    fc18:	697b      	ldr	r3, [r7, #20]
    fc1a:	2b00      	cmp	r3, #0
    fc1c:	d00a      	beq.n	fc34 <xTimerCreate+0x34>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
    fc1e:	683c      	ldr	r4, [r7, #0]
    fc20:	687a      	ldr	r2, [r7, #4]
    fc22:	68b9      	ldr	r1, [r7, #8]
    fc24:	68f8      	ldr	r0, [r7, #12]
    fc26:	697b      	ldr	r3, [r7, #20]
    fc28:	9301      	str	r3, [sp, #4]
    fc2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fc2c:	9300      	str	r3, [sp, #0]
    fc2e:	0023      	movs	r3, r4
    fc30:	4c04      	ldr	r4, [pc, #16]	; (fc44 <xTimerCreate+0x44>)
    fc32:	47a0      	blx	r4
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
    fc34:	697b      	ldr	r3, [r7, #20]
	}
    fc36:	0018      	movs	r0, r3
    fc38:	46bd      	mov	sp, r7
    fc3a:	b007      	add	sp, #28
    fc3c:	bd90      	pop	{r4, r7, pc}
    fc3e:	46c0      	nop			; (mov r8, r8)
    fc40:	0000ddbd 	.word	0x0000ddbd
    fc44:	0000fc49 	.word	0x0000fc49

0000fc48 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
    fc48:	b580      	push	{r7, lr}
    fc4a:	b084      	sub	sp, #16
    fc4c:	af00      	add	r7, sp, #0
    fc4e:	60f8      	str	r0, [r7, #12]
    fc50:	60b9      	str	r1, [r7, #8]
    fc52:	607a      	str	r2, [r7, #4]
    fc54:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
    fc56:	68bb      	ldr	r3, [r7, #8]
    fc58:	2b00      	cmp	r3, #0
    fc5a:	d101      	bne.n	fc60 <prvInitialiseNewTimer+0x18>
    fc5c:	b672      	cpsid	i
    fc5e:	e7fe      	b.n	fc5e <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
    fc60:	69fb      	ldr	r3, [r7, #28]
    fc62:	2b00      	cmp	r3, #0
    fc64:	d015      	beq.n	fc92 <prvInitialiseNewTimer+0x4a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
    fc66:	4b0d      	ldr	r3, [pc, #52]	; (fc9c <prvInitialiseNewTimer+0x54>)
    fc68:	4798      	blx	r3

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
    fc6a:	69fb      	ldr	r3, [r7, #28]
    fc6c:	68fa      	ldr	r2, [r7, #12]
    fc6e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    fc70:	69fb      	ldr	r3, [r7, #28]
    fc72:	68ba      	ldr	r2, [r7, #8]
    fc74:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
    fc76:	69fb      	ldr	r3, [r7, #28]
    fc78:	687a      	ldr	r2, [r7, #4]
    fc7a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
    fc7c:	69fb      	ldr	r3, [r7, #28]
    fc7e:	683a      	ldr	r2, [r7, #0]
    fc80:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    fc82:	69fb      	ldr	r3, [r7, #28]
    fc84:	69ba      	ldr	r2, [r7, #24]
    fc86:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    fc88:	69fb      	ldr	r3, [r7, #28]
    fc8a:	3304      	adds	r3, #4
    fc8c:	0018      	movs	r0, r3
    fc8e:	4b04      	ldr	r3, [pc, #16]	; (fca0 <prvInitialiseNewTimer+0x58>)
    fc90:	4798      	blx	r3
		traceTIMER_CREATE( pxNewTimer );
	}
}
    fc92:	46c0      	nop			; (mov r8, r8)
    fc94:	46bd      	mov	sp, r7
    fc96:	b004      	add	sp, #16
    fc98:	bd80      	pop	{r7, pc}
    fc9a:	46c0      	nop			; (mov r8, r8)
    fc9c:	000101b5 	.word	0x000101b5
    fca0:	0000de61 	.word	0x0000de61

0000fca4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    fca4:	b590      	push	{r4, r7, lr}
    fca6:	b08b      	sub	sp, #44	; 0x2c
    fca8:	af00      	add	r7, sp, #0
    fcaa:	60f8      	str	r0, [r7, #12]
    fcac:	60b9      	str	r1, [r7, #8]
    fcae:	607a      	str	r2, [r7, #4]
    fcb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
    fcb2:	2300      	movs	r3, #0
    fcb4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
    fcb6:	68fb      	ldr	r3, [r7, #12]
    fcb8:	2b00      	cmp	r3, #0
    fcba:	d101      	bne.n	fcc0 <xTimerGenericCommand+0x1c>
    fcbc:	b672      	cpsid	i
    fcbe:	e7fe      	b.n	fcbe <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    fcc0:	4b1e      	ldr	r3, [pc, #120]	; (fd3c <xTimerGenericCommand+0x98>)
    fcc2:	681b      	ldr	r3, [r3, #0]
    fcc4:	2b00      	cmp	r3, #0
    fcc6:	d033      	beq.n	fd30 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    fcc8:	2314      	movs	r3, #20
    fcca:	18fb      	adds	r3, r7, r3
    fccc:	68ba      	ldr	r2, [r7, #8]
    fcce:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    fcd0:	2314      	movs	r3, #20
    fcd2:	18fb      	adds	r3, r7, r3
    fcd4:	687a      	ldr	r2, [r7, #4]
    fcd6:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    fcd8:	2314      	movs	r3, #20
    fcda:	18fb      	adds	r3, r7, r3
    fcdc:	68fa      	ldr	r2, [r7, #12]
    fcde:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    fce0:	68bb      	ldr	r3, [r7, #8]
    fce2:	2b05      	cmp	r3, #5
    fce4:	dc1a      	bgt.n	fd1c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    fce6:	4b16      	ldr	r3, [pc, #88]	; (fd40 <xTimerGenericCommand+0x9c>)
    fce8:	4798      	blx	r3
    fcea:	0003      	movs	r3, r0
    fcec:	2b02      	cmp	r3, #2
    fcee:	d10a      	bne.n	fd06 <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    fcf0:	4b12      	ldr	r3, [pc, #72]	; (fd3c <xTimerGenericCommand+0x98>)
    fcf2:	6818      	ldr	r0, [r3, #0]
    fcf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
    fcf6:	2314      	movs	r3, #20
    fcf8:	18f9      	adds	r1, r7, r3
    fcfa:	2300      	movs	r3, #0
    fcfc:	4c11      	ldr	r4, [pc, #68]	; (fd44 <xTimerGenericCommand+0xa0>)
    fcfe:	47a0      	blx	r4
    fd00:	0003      	movs	r3, r0
    fd02:	627b      	str	r3, [r7, #36]	; 0x24
    fd04:	e014      	b.n	fd30 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    fd06:	4b0d      	ldr	r3, [pc, #52]	; (fd3c <xTimerGenericCommand+0x98>)
    fd08:	6818      	ldr	r0, [r3, #0]
    fd0a:	2314      	movs	r3, #20
    fd0c:	18f9      	adds	r1, r7, r3
    fd0e:	2300      	movs	r3, #0
    fd10:	2200      	movs	r2, #0
    fd12:	4c0c      	ldr	r4, [pc, #48]	; (fd44 <xTimerGenericCommand+0xa0>)
    fd14:	47a0      	blx	r4
    fd16:	0003      	movs	r3, r0
    fd18:	627b      	str	r3, [r7, #36]	; 0x24
    fd1a:	e009      	b.n	fd30 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    fd1c:	4b07      	ldr	r3, [pc, #28]	; (fd3c <xTimerGenericCommand+0x98>)
    fd1e:	6818      	ldr	r0, [r3, #0]
    fd20:	683a      	ldr	r2, [r7, #0]
    fd22:	2314      	movs	r3, #20
    fd24:	18f9      	adds	r1, r7, r3
    fd26:	2300      	movs	r3, #0
    fd28:	4c07      	ldr	r4, [pc, #28]	; (fd48 <xTimerGenericCommand+0xa4>)
    fd2a:	47a0      	blx	r4
    fd2c:	0003      	movs	r3, r0
    fd2e:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    fd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    fd32:	0018      	movs	r0, r3
    fd34:	46bd      	mov	sp, r7
    fd36:	b00b      	add	sp, #44	; 0x2c
    fd38:	bd90      	pop	{r4, r7, pc}
    fd3a:	46c0      	nop			; (mov r8, r8)
    fd3c:	200003dc 	.word	0x200003dc
    fd40:	0000f801 	.word	0x0000f801
    fd44:	0000e0f1 	.word	0x0000e0f1
    fd48:	0000e2d1 	.word	0x0000e2d1

0000fd4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    fd4c:	b590      	push	{r4, r7, lr}
    fd4e:	b087      	sub	sp, #28
    fd50:	af02      	add	r7, sp, #8
    fd52:	6078      	str	r0, [r7, #4]
    fd54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    fd56:	4b18      	ldr	r3, [pc, #96]	; (fdb8 <prvProcessExpiredTimer+0x6c>)
    fd58:	681b      	ldr	r3, [r3, #0]
    fd5a:	68db      	ldr	r3, [r3, #12]
    fd5c:	68db      	ldr	r3, [r3, #12]
    fd5e:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    fd60:	68fb      	ldr	r3, [r7, #12]
    fd62:	3304      	adds	r3, #4
    fd64:	0018      	movs	r0, r3
    fd66:	4b15      	ldr	r3, [pc, #84]	; (fdbc <prvProcessExpiredTimer+0x70>)
    fd68:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    fd6a:	68fb      	ldr	r3, [r7, #12]
    fd6c:	69db      	ldr	r3, [r3, #28]
    fd6e:	2b01      	cmp	r3, #1
    fd70:	d119      	bne.n	fda6 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    fd72:	68fb      	ldr	r3, [r7, #12]
    fd74:	699a      	ldr	r2, [r3, #24]
    fd76:	687b      	ldr	r3, [r7, #4]
    fd78:	18d1      	adds	r1, r2, r3
    fd7a:	687b      	ldr	r3, [r7, #4]
    fd7c:	683a      	ldr	r2, [r7, #0]
    fd7e:	68f8      	ldr	r0, [r7, #12]
    fd80:	4c0f      	ldr	r4, [pc, #60]	; (fdc0 <prvProcessExpiredTimer+0x74>)
    fd82:	47a0      	blx	r4
    fd84:	1e03      	subs	r3, r0, #0
    fd86:	d00e      	beq.n	fda6 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    fd88:	687a      	ldr	r2, [r7, #4]
    fd8a:	68f8      	ldr	r0, [r7, #12]
    fd8c:	2300      	movs	r3, #0
    fd8e:	9300      	str	r3, [sp, #0]
    fd90:	2300      	movs	r3, #0
    fd92:	2100      	movs	r1, #0
    fd94:	4c0b      	ldr	r4, [pc, #44]	; (fdc4 <prvProcessExpiredTimer+0x78>)
    fd96:	47a0      	blx	r4
    fd98:	0003      	movs	r3, r0
    fd9a:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
    fd9c:	68bb      	ldr	r3, [r7, #8]
    fd9e:	2b00      	cmp	r3, #0
    fda0:	d101      	bne.n	fda6 <prvProcessExpiredTimer+0x5a>
    fda2:	b672      	cpsid	i
    fda4:	e7fe      	b.n	fda4 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    fda6:	68fb      	ldr	r3, [r7, #12]
    fda8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    fdaa:	68fa      	ldr	r2, [r7, #12]
    fdac:	0010      	movs	r0, r2
    fdae:	4798      	blx	r3
}
    fdb0:	46c0      	nop			; (mov r8, r8)
    fdb2:	46bd      	mov	sp, r7
    fdb4:	b005      	add	sp, #20
    fdb6:	bd90      	pop	{r4, r7, pc}
    fdb8:	200003d4 	.word	0x200003d4
    fdbc:	0000df27 	.word	0x0000df27
    fdc0:	0000ff29 	.word	0x0000ff29
    fdc4:	0000fca5 	.word	0x0000fca5

0000fdc8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    fdc8:	b580      	push	{r7, lr}
    fdca:	b084      	sub	sp, #16
    fdcc:	af00      	add	r7, sp, #0
    fdce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    fdd0:	2308      	movs	r3, #8
    fdd2:	18fb      	adds	r3, r7, r3
    fdd4:	0018      	movs	r0, r3
    fdd6:	4b06      	ldr	r3, [pc, #24]	; (fdf0 <prvTimerTask+0x28>)
    fdd8:	4798      	blx	r3
    fdda:	0003      	movs	r3, r0
    fddc:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    fdde:	68ba      	ldr	r2, [r7, #8]
    fde0:	68fb      	ldr	r3, [r7, #12]
    fde2:	0011      	movs	r1, r2
    fde4:	0018      	movs	r0, r3
    fde6:	4b03      	ldr	r3, [pc, #12]	; (fdf4 <prvTimerTask+0x2c>)
    fde8:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    fdea:	4b03      	ldr	r3, [pc, #12]	; (fdf8 <prvTimerTask+0x30>)
    fdec:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    fdee:	e7ef      	b.n	fdd0 <prvTimerTask+0x8>
    fdf0:	0000fea1 	.word	0x0000fea1
    fdf4:	0000fdfd 	.word	0x0000fdfd
    fdf8:	0000ffb1 	.word	0x0000ffb1

0000fdfc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    fdfc:	b580      	push	{r7, lr}
    fdfe:	b084      	sub	sp, #16
    fe00:	af00      	add	r7, sp, #0
    fe02:	6078      	str	r0, [r7, #4]
    fe04:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    fe06:	4b1e      	ldr	r3, [pc, #120]	; (fe80 <prvProcessTimerOrBlockTask+0x84>)
    fe08:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    fe0a:	2308      	movs	r3, #8
    fe0c:	18fb      	adds	r3, r7, r3
    fe0e:	0018      	movs	r0, r3
    fe10:	4b1c      	ldr	r3, [pc, #112]	; (fe84 <prvProcessTimerOrBlockTask+0x88>)
    fe12:	4798      	blx	r3
    fe14:	0003      	movs	r3, r0
    fe16:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
    fe18:	68bb      	ldr	r3, [r7, #8]
    fe1a:	2b00      	cmp	r3, #0
    fe1c:	d129      	bne.n	fe72 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    fe1e:	683b      	ldr	r3, [r7, #0]
    fe20:	2b00      	cmp	r3, #0
    fe22:	d10c      	bne.n	fe3e <prvProcessTimerOrBlockTask+0x42>
    fe24:	687a      	ldr	r2, [r7, #4]
    fe26:	68fb      	ldr	r3, [r7, #12]
    fe28:	429a      	cmp	r2, r3
    fe2a:	d808      	bhi.n	fe3e <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
    fe2c:	4b16      	ldr	r3, [pc, #88]	; (fe88 <prvProcessTimerOrBlockTask+0x8c>)
    fe2e:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    fe30:	68fa      	ldr	r2, [r7, #12]
    fe32:	687b      	ldr	r3, [r7, #4]
    fe34:	0011      	movs	r1, r2
    fe36:	0018      	movs	r0, r3
    fe38:	4b14      	ldr	r3, [pc, #80]	; (fe8c <prvProcessTimerOrBlockTask+0x90>)
    fe3a:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    fe3c:	e01b      	b.n	fe76 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
    fe3e:	683b      	ldr	r3, [r7, #0]
    fe40:	2b00      	cmp	r3, #0
    fe42:	d006      	beq.n	fe52 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    fe44:	4b12      	ldr	r3, [pc, #72]	; (fe90 <prvProcessTimerOrBlockTask+0x94>)
    fe46:	681b      	ldr	r3, [r3, #0]
    fe48:	681b      	ldr	r3, [r3, #0]
    fe4a:	425a      	negs	r2, r3
    fe4c:	4153      	adcs	r3, r2
    fe4e:	b2db      	uxtb	r3, r3
    fe50:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    fe52:	4b10      	ldr	r3, [pc, #64]	; (fe94 <prvProcessTimerOrBlockTask+0x98>)
    fe54:	6818      	ldr	r0, [r3, #0]
    fe56:	687a      	ldr	r2, [r7, #4]
    fe58:	68fb      	ldr	r3, [r7, #12]
    fe5a:	1ad3      	subs	r3, r2, r3
    fe5c:	683a      	ldr	r2, [r7, #0]
    fe5e:	0019      	movs	r1, r3
    fe60:	4b0d      	ldr	r3, [pc, #52]	; (fe98 <prvProcessTimerOrBlockTask+0x9c>)
    fe62:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    fe64:	4b08      	ldr	r3, [pc, #32]	; (fe88 <prvProcessTimerOrBlockTask+0x8c>)
    fe66:	4798      	blx	r3
    fe68:	1e03      	subs	r3, r0, #0
    fe6a:	d104      	bne.n	fe76 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
    fe6c:	4b0b      	ldr	r3, [pc, #44]	; (fe9c <prvProcessTimerOrBlockTask+0xa0>)
    fe6e:	4798      	blx	r3
}
    fe70:	e001      	b.n	fe76 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
    fe72:	4b05      	ldr	r3, [pc, #20]	; (fe88 <prvProcessTimerOrBlockTask+0x8c>)
    fe74:	4798      	blx	r3
}
    fe76:	46c0      	nop			; (mov r8, r8)
    fe78:	46bd      	mov	sp, r7
    fe7a:	b004      	add	sp, #16
    fe7c:	bd80      	pop	{r7, pc}
    fe7e:	46c0      	nop			; (mov r8, r8)
    fe80:	0000f0b1 	.word	0x0000f0b1
    fe84:	0000fee1 	.word	0x0000fee1
    fe88:	0000f0c9 	.word	0x0000f0c9
    fe8c:	0000fd4d 	.word	0x0000fd4d
    fe90:	200003d8 	.word	0x200003d8
    fe94:	200003dc 	.word	0x200003dc
    fe98:	0000ea3d 	.word	0x0000ea3d
    fe9c:	0000dc61 	.word	0x0000dc61

0000fea0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    fea0:	b580      	push	{r7, lr}
    fea2:	b084      	sub	sp, #16
    fea4:	af00      	add	r7, sp, #0
    fea6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    fea8:	4b0c      	ldr	r3, [pc, #48]	; (fedc <prvGetNextExpireTime+0x3c>)
    feaa:	681b      	ldr	r3, [r3, #0]
    feac:	681b      	ldr	r3, [r3, #0]
    feae:	425a      	negs	r2, r3
    feb0:	4153      	adcs	r3, r2
    feb2:	b2db      	uxtb	r3, r3
    feb4:	001a      	movs	r2, r3
    feb6:	687b      	ldr	r3, [r7, #4]
    feb8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    feba:	687b      	ldr	r3, [r7, #4]
    febc:	681b      	ldr	r3, [r3, #0]
    febe:	2b00      	cmp	r3, #0
    fec0:	d105      	bne.n	fece <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    fec2:	4b06      	ldr	r3, [pc, #24]	; (fedc <prvGetNextExpireTime+0x3c>)
    fec4:	681b      	ldr	r3, [r3, #0]
    fec6:	68db      	ldr	r3, [r3, #12]
    fec8:	681b      	ldr	r3, [r3, #0]
    feca:	60fb      	str	r3, [r7, #12]
    fecc:	e001      	b.n	fed2 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    fece:	2300      	movs	r3, #0
    fed0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    fed2:	68fb      	ldr	r3, [r7, #12]
}
    fed4:	0018      	movs	r0, r3
    fed6:	46bd      	mov	sp, r7
    fed8:	b004      	add	sp, #16
    feda:	bd80      	pop	{r7, pc}
    fedc:	200003d4 	.word	0x200003d4

0000fee0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    fee0:	b580      	push	{r7, lr}
    fee2:	b084      	sub	sp, #16
    fee4:	af00      	add	r7, sp, #0
    fee6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    fee8:	4b0c      	ldr	r3, [pc, #48]	; (ff1c <prvSampleTimeNow+0x3c>)
    feea:	4798      	blx	r3
    feec:	0003      	movs	r3, r0
    feee:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
    fef0:	4b0b      	ldr	r3, [pc, #44]	; (ff20 <prvSampleTimeNow+0x40>)
    fef2:	681b      	ldr	r3, [r3, #0]
    fef4:	68fa      	ldr	r2, [r7, #12]
    fef6:	429a      	cmp	r2, r3
    fef8:	d205      	bcs.n	ff06 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
    fefa:	4b0a      	ldr	r3, [pc, #40]	; (ff24 <prvSampleTimeNow+0x44>)
    fefc:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
    fefe:	687b      	ldr	r3, [r7, #4]
    ff00:	2201      	movs	r2, #1
    ff02:	601a      	str	r2, [r3, #0]
    ff04:	e002      	b.n	ff0c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    ff06:	687b      	ldr	r3, [r7, #4]
    ff08:	2200      	movs	r2, #0
    ff0a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
    ff0c:	4b04      	ldr	r3, [pc, #16]	; (ff20 <prvSampleTimeNow+0x40>)
    ff0e:	68fa      	ldr	r2, [r7, #12]
    ff10:	601a      	str	r2, [r3, #0]

	return xTimeNow;
    ff12:	68fb      	ldr	r3, [r7, #12]
}
    ff14:	0018      	movs	r0, r3
    ff16:	46bd      	mov	sp, r7
    ff18:	b004      	add	sp, #16
    ff1a:	bd80      	pop	{r7, pc}
    ff1c:	0000f1fd 	.word	0x0000f1fd
    ff20:	200003e4 	.word	0x200003e4
    ff24:	000100f5 	.word	0x000100f5

0000ff28 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    ff28:	b580      	push	{r7, lr}
    ff2a:	b086      	sub	sp, #24
    ff2c:	af00      	add	r7, sp, #0
    ff2e:	60f8      	str	r0, [r7, #12]
    ff30:	60b9      	str	r1, [r7, #8]
    ff32:	607a      	str	r2, [r7, #4]
    ff34:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
    ff36:	2300      	movs	r3, #0
    ff38:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    ff3a:	68fb      	ldr	r3, [r7, #12]
    ff3c:	68ba      	ldr	r2, [r7, #8]
    ff3e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    ff40:	68fb      	ldr	r3, [r7, #12]
    ff42:	68fa      	ldr	r2, [r7, #12]
    ff44:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
    ff46:	68ba      	ldr	r2, [r7, #8]
    ff48:	687b      	ldr	r3, [r7, #4]
    ff4a:	429a      	cmp	r2, r3
    ff4c:	d812      	bhi.n	ff74 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    ff4e:	687a      	ldr	r2, [r7, #4]
    ff50:	683b      	ldr	r3, [r7, #0]
    ff52:	1ad2      	subs	r2, r2, r3
    ff54:	68fb      	ldr	r3, [r7, #12]
    ff56:	699b      	ldr	r3, [r3, #24]
    ff58:	429a      	cmp	r2, r3
    ff5a:	d302      	bcc.n	ff62 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    ff5c:	2301      	movs	r3, #1
    ff5e:	617b      	str	r3, [r7, #20]
    ff60:	e01b      	b.n	ff9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    ff62:	4b10      	ldr	r3, [pc, #64]	; (ffa4 <prvInsertTimerInActiveList+0x7c>)
    ff64:	681a      	ldr	r2, [r3, #0]
    ff66:	68fb      	ldr	r3, [r7, #12]
    ff68:	3304      	adds	r3, #4
    ff6a:	0019      	movs	r1, r3
    ff6c:	0010      	movs	r0, r2
    ff6e:	4b0e      	ldr	r3, [pc, #56]	; (ffa8 <prvInsertTimerInActiveList+0x80>)
    ff70:	4798      	blx	r3
    ff72:	e012      	b.n	ff9a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    ff74:	687a      	ldr	r2, [r7, #4]
    ff76:	683b      	ldr	r3, [r7, #0]
    ff78:	429a      	cmp	r2, r3
    ff7a:	d206      	bcs.n	ff8a <prvInsertTimerInActiveList+0x62>
    ff7c:	68ba      	ldr	r2, [r7, #8]
    ff7e:	683b      	ldr	r3, [r7, #0]
    ff80:	429a      	cmp	r2, r3
    ff82:	d302      	bcc.n	ff8a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    ff84:	2301      	movs	r3, #1
    ff86:	617b      	str	r3, [r7, #20]
    ff88:	e007      	b.n	ff9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    ff8a:	4b08      	ldr	r3, [pc, #32]	; (ffac <prvInsertTimerInActiveList+0x84>)
    ff8c:	681a      	ldr	r2, [r3, #0]
    ff8e:	68fb      	ldr	r3, [r7, #12]
    ff90:	3304      	adds	r3, #4
    ff92:	0019      	movs	r1, r3
    ff94:	0010      	movs	r0, r2
    ff96:	4b04      	ldr	r3, [pc, #16]	; (ffa8 <prvInsertTimerInActiveList+0x80>)
    ff98:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
    ff9a:	697b      	ldr	r3, [r7, #20]
}
    ff9c:	0018      	movs	r0, r3
    ff9e:	46bd      	mov	sp, r7
    ffa0:	b006      	add	sp, #24
    ffa2:	bd80      	pop	{r7, pc}
    ffa4:	200003d8 	.word	0x200003d8
    ffa8:	0000debb 	.word	0x0000debb
    ffac:	200003d4 	.word	0x200003d4

0000ffb0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    ffb0:	b590      	push	{r4, r7, lr}
    ffb2:	b08d      	sub	sp, #52	; 0x34
    ffb4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    ffb6:	e07e      	b.n	100b6 <prvProcessReceivedCommands+0x106>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
    ffb8:	2308      	movs	r3, #8
    ffba:	18fb      	adds	r3, r7, r3
    ffbc:	681b      	ldr	r3, [r3, #0]
    ffbe:	2b00      	cmp	r3, #0
    ffc0:	da10      	bge.n	ffe4 <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
    ffc2:	2308      	movs	r3, #8
    ffc4:	18fb      	adds	r3, r7, r3
    ffc6:	3304      	adds	r3, #4
    ffc8:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
    ffca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ffcc:	2b00      	cmp	r3, #0
    ffce:	d101      	bne.n	ffd4 <prvProcessReceivedCommands+0x24>
    ffd0:	b672      	cpsid	i
    ffd2:	e7fe      	b.n	ffd2 <prvProcessReceivedCommands+0x22>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
    ffd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ffd6:	681a      	ldr	r2, [r3, #0]
    ffd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ffda:	6858      	ldr	r0, [r3, #4]
    ffdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ffde:	689b      	ldr	r3, [r3, #8]
    ffe0:	0019      	movs	r1, r3
    ffe2:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    ffe4:	2308      	movs	r3, #8
    ffe6:	18fb      	adds	r3, r7, r3
    ffe8:	681b      	ldr	r3, [r3, #0]
    ffea:	2b00      	cmp	r3, #0
    ffec:	db63      	blt.n	100b6 <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    ffee:	2308      	movs	r3, #8
    fff0:	18fb      	adds	r3, r7, r3
    fff2:	689b      	ldr	r3, [r3, #8]
    fff4:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    fff6:	6a3b      	ldr	r3, [r7, #32]
    fff8:	695b      	ldr	r3, [r3, #20]
    fffa:	2b00      	cmp	r3, #0
    fffc:	d004      	beq.n	10008 <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    fffe:	6a3b      	ldr	r3, [r7, #32]
   10000:	3304      	adds	r3, #4
   10002:	0018      	movs	r0, r3
   10004:	4b33      	ldr	r3, [pc, #204]	; (100d4 <prvProcessReceivedCommands+0x124>)
   10006:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   10008:	1d3b      	adds	r3, r7, #4
   1000a:	0018      	movs	r0, r3
   1000c:	4b32      	ldr	r3, [pc, #200]	; (100d8 <prvProcessReceivedCommands+0x128>)
   1000e:	4798      	blx	r3
   10010:	0003      	movs	r3, r0
   10012:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
   10014:	2308      	movs	r3, #8
   10016:	18fb      	adds	r3, r7, r3
   10018:	681b      	ldr	r3, [r3, #0]
   1001a:	2b09      	cmp	r3, #9
   1001c:	d84a      	bhi.n	100b4 <prvProcessReceivedCommands+0x104>
   1001e:	009a      	lsls	r2, r3, #2
   10020:	4b2e      	ldr	r3, [pc, #184]	; (100dc <prvProcessReceivedCommands+0x12c>)
   10022:	18d3      	adds	r3, r2, r3
   10024:	681b      	ldr	r3, [r3, #0]
   10026:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   10028:	2308      	movs	r3, #8
   1002a:	18fb      	adds	r3, r7, r3
   1002c:	685a      	ldr	r2, [r3, #4]
   1002e:	6a3b      	ldr	r3, [r7, #32]
   10030:	699b      	ldr	r3, [r3, #24]
   10032:	18d1      	adds	r1, r2, r3
   10034:	2308      	movs	r3, #8
   10036:	18fb      	adds	r3, r7, r3
   10038:	685b      	ldr	r3, [r3, #4]
   1003a:	69fa      	ldr	r2, [r7, #28]
   1003c:	6a38      	ldr	r0, [r7, #32]
   1003e:	4c28      	ldr	r4, [pc, #160]	; (100e0 <prvProcessReceivedCommands+0x130>)
   10040:	47a0      	blx	r4
   10042:	1e03      	subs	r3, r0, #0
   10044:	d037      	beq.n	100b6 <prvProcessReceivedCommands+0x106>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   10046:	6a3b      	ldr	r3, [r7, #32]
   10048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1004a:	6a3a      	ldr	r2, [r7, #32]
   1004c:	0010      	movs	r0, r2
   1004e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   10050:	6a3b      	ldr	r3, [r7, #32]
   10052:	69db      	ldr	r3, [r3, #28]
   10054:	2b01      	cmp	r3, #1
   10056:	d12e      	bne.n	100b6 <prvProcessReceivedCommands+0x106>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   10058:	2308      	movs	r3, #8
   1005a:	18fb      	adds	r3, r7, r3
   1005c:	685a      	ldr	r2, [r3, #4]
   1005e:	6a3b      	ldr	r3, [r7, #32]
   10060:	699b      	ldr	r3, [r3, #24]
   10062:	18d2      	adds	r2, r2, r3
   10064:	6a38      	ldr	r0, [r7, #32]
   10066:	2300      	movs	r3, #0
   10068:	9300      	str	r3, [sp, #0]
   1006a:	2300      	movs	r3, #0
   1006c:	2100      	movs	r1, #0
   1006e:	4c1d      	ldr	r4, [pc, #116]	; (100e4 <prvProcessReceivedCommands+0x134>)
   10070:	47a0      	blx	r4
   10072:	0003      	movs	r3, r0
   10074:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
   10076:	69bb      	ldr	r3, [r7, #24]
   10078:	2b00      	cmp	r3, #0
   1007a:	d11c      	bne.n	100b6 <prvProcessReceivedCommands+0x106>
   1007c:	b672      	cpsid	i
   1007e:	e7fe      	b.n	1007e <prvProcessReceivedCommands+0xce>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   10080:	2308      	movs	r3, #8
   10082:	18fb      	adds	r3, r7, r3
   10084:	685a      	ldr	r2, [r3, #4]
   10086:	6a3b      	ldr	r3, [r7, #32]
   10088:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1008a:	6a3b      	ldr	r3, [r7, #32]
   1008c:	699b      	ldr	r3, [r3, #24]
   1008e:	2b00      	cmp	r3, #0
   10090:	d101      	bne.n	10096 <prvProcessReceivedCommands+0xe6>
   10092:	b672      	cpsid	i
   10094:	e7fe      	b.n	10094 <prvProcessReceivedCommands+0xe4>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   10096:	6a3b      	ldr	r3, [r7, #32]
   10098:	699a      	ldr	r2, [r3, #24]
   1009a:	69fb      	ldr	r3, [r7, #28]
   1009c:	18d1      	adds	r1, r2, r3
   1009e:	69fb      	ldr	r3, [r7, #28]
   100a0:	69fa      	ldr	r2, [r7, #28]
   100a2:	6a38      	ldr	r0, [r7, #32]
   100a4:	4c0e      	ldr	r4, [pc, #56]	; (100e0 <prvProcessReceivedCommands+0x130>)
   100a6:	47a0      	blx	r4
					break;
   100a8:	e005      	b.n	100b6 <prvProcessReceivedCommands+0x106>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   100aa:	6a3b      	ldr	r3, [r7, #32]
   100ac:	0018      	movs	r0, r3
   100ae:	4b0e      	ldr	r3, [pc, #56]	; (100e8 <prvProcessReceivedCommands+0x138>)
   100b0:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   100b2:	e000      	b.n	100b6 <prvProcessReceivedCommands+0x106>

				default	:
					/* Don't expect to get here. */
					break;
   100b4:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   100b6:	4b0d      	ldr	r3, [pc, #52]	; (100ec <prvProcessReceivedCommands+0x13c>)
   100b8:	681b      	ldr	r3, [r3, #0]
   100ba:	2208      	movs	r2, #8
   100bc:	18b9      	adds	r1, r7, r2
   100be:	2200      	movs	r2, #0
   100c0:	0018      	movs	r0, r3
   100c2:	4b0b      	ldr	r3, [pc, #44]	; (100f0 <prvProcessReceivedCommands+0x140>)
   100c4:	4798      	blx	r3
   100c6:	1e03      	subs	r3, r0, #0
   100c8:	d000      	beq.n	100cc <prvProcessReceivedCommands+0x11c>
   100ca:	e775      	b.n	ffb8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   100cc:	46c0      	nop			; (mov r8, r8)
   100ce:	46bd      	mov	sp, r7
   100d0:	b00b      	add	sp, #44	; 0x2c
   100d2:	bd90      	pop	{r4, r7, pc}
   100d4:	0000df27 	.word	0x0000df27
   100d8:	0000fee1 	.word	0x0000fee1
   100dc:	000196f0 	.word	0x000196f0
   100e0:	0000ff29 	.word	0x0000ff29
   100e4:	0000fca5 	.word	0x0000fca5
   100e8:	0000ddf1 	.word	0x0000ddf1
   100ec:	200003dc 	.word	0x200003dc
   100f0:	0000e3f1 	.word	0x0000e3f1

000100f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   100f4:	b590      	push	{r4, r7, lr}
   100f6:	b089      	sub	sp, #36	; 0x24
   100f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   100fa:	e03e      	b.n	1017a <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   100fc:	4b28      	ldr	r3, [pc, #160]	; (101a0 <prvSwitchTimerLists+0xac>)
   100fe:	681b      	ldr	r3, [r3, #0]
   10100:	68db      	ldr	r3, [r3, #12]
   10102:	681b      	ldr	r3, [r3, #0]
   10104:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   10106:	4b26      	ldr	r3, [pc, #152]	; (101a0 <prvSwitchTimerLists+0xac>)
   10108:	681b      	ldr	r3, [r3, #0]
   1010a:	68db      	ldr	r3, [r3, #12]
   1010c:	68db      	ldr	r3, [r3, #12]
   1010e:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   10110:	693b      	ldr	r3, [r7, #16]
   10112:	3304      	adds	r3, #4
   10114:	0018      	movs	r0, r3
   10116:	4b23      	ldr	r3, [pc, #140]	; (101a4 <prvSwitchTimerLists+0xb0>)
   10118:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1011a:	693b      	ldr	r3, [r7, #16]
   1011c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1011e:	693a      	ldr	r2, [r7, #16]
   10120:	0010      	movs	r0, r2
   10122:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   10124:	693b      	ldr	r3, [r7, #16]
   10126:	69db      	ldr	r3, [r3, #28]
   10128:	2b01      	cmp	r3, #1
   1012a:	d126      	bne.n	1017a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1012c:	693b      	ldr	r3, [r7, #16]
   1012e:	699a      	ldr	r2, [r3, #24]
   10130:	697b      	ldr	r3, [r7, #20]
   10132:	18d3      	adds	r3, r2, r3
   10134:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   10136:	68fa      	ldr	r2, [r7, #12]
   10138:	697b      	ldr	r3, [r7, #20]
   1013a:	429a      	cmp	r2, r3
   1013c:	d90e      	bls.n	1015c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1013e:	693b      	ldr	r3, [r7, #16]
   10140:	68fa      	ldr	r2, [r7, #12]
   10142:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   10144:	693b      	ldr	r3, [r7, #16]
   10146:	693a      	ldr	r2, [r7, #16]
   10148:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1014a:	4b15      	ldr	r3, [pc, #84]	; (101a0 <prvSwitchTimerLists+0xac>)
   1014c:	681a      	ldr	r2, [r3, #0]
   1014e:	693b      	ldr	r3, [r7, #16]
   10150:	3304      	adds	r3, #4
   10152:	0019      	movs	r1, r3
   10154:	0010      	movs	r0, r2
   10156:	4b14      	ldr	r3, [pc, #80]	; (101a8 <prvSwitchTimerLists+0xb4>)
   10158:	4798      	blx	r3
   1015a:	e00e      	b.n	1017a <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1015c:	697a      	ldr	r2, [r7, #20]
   1015e:	6938      	ldr	r0, [r7, #16]
   10160:	2300      	movs	r3, #0
   10162:	9300      	str	r3, [sp, #0]
   10164:	2300      	movs	r3, #0
   10166:	2100      	movs	r1, #0
   10168:	4c10      	ldr	r4, [pc, #64]	; (101ac <prvSwitchTimerLists+0xb8>)
   1016a:	47a0      	blx	r4
   1016c:	0003      	movs	r3, r0
   1016e:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   10170:	68bb      	ldr	r3, [r7, #8]
   10172:	2b00      	cmp	r3, #0
   10174:	d101      	bne.n	1017a <prvSwitchTimerLists+0x86>
   10176:	b672      	cpsid	i
   10178:	e7fe      	b.n	10178 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1017a:	4b09      	ldr	r3, [pc, #36]	; (101a0 <prvSwitchTimerLists+0xac>)
   1017c:	681b      	ldr	r3, [r3, #0]
   1017e:	681b      	ldr	r3, [r3, #0]
   10180:	2b00      	cmp	r3, #0
   10182:	d1bb      	bne.n	100fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   10184:	4b06      	ldr	r3, [pc, #24]	; (101a0 <prvSwitchTimerLists+0xac>)
   10186:	681b      	ldr	r3, [r3, #0]
   10188:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1018a:	4b09      	ldr	r3, [pc, #36]	; (101b0 <prvSwitchTimerLists+0xbc>)
   1018c:	681a      	ldr	r2, [r3, #0]
   1018e:	4b04      	ldr	r3, [pc, #16]	; (101a0 <prvSwitchTimerLists+0xac>)
   10190:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   10192:	4b07      	ldr	r3, [pc, #28]	; (101b0 <prvSwitchTimerLists+0xbc>)
   10194:	687a      	ldr	r2, [r7, #4]
   10196:	601a      	str	r2, [r3, #0]
}
   10198:	46c0      	nop			; (mov r8, r8)
   1019a:	46bd      	mov	sp, r7
   1019c:	b007      	add	sp, #28
   1019e:	bd90      	pop	{r4, r7, pc}
   101a0:	200003d4 	.word	0x200003d4
   101a4:	0000df27 	.word	0x0000df27
   101a8:	0000debb 	.word	0x0000debb
   101ac:	0000fca5 	.word	0x0000fca5
   101b0:	200003d8 	.word	0x200003d8

000101b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   101b4:	b580      	push	{r7, lr}
   101b6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   101b8:	4b10      	ldr	r3, [pc, #64]	; (101fc <prvCheckForValidListAndQueue+0x48>)
   101ba:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   101bc:	4b10      	ldr	r3, [pc, #64]	; (10200 <prvCheckForValidListAndQueue+0x4c>)
   101be:	681b      	ldr	r3, [r3, #0]
   101c0:	2b00      	cmp	r3, #0
   101c2:	d115      	bne.n	101f0 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   101c4:	4b0f      	ldr	r3, [pc, #60]	; (10204 <prvCheckForValidListAndQueue+0x50>)
   101c6:	0018      	movs	r0, r3
   101c8:	4b0f      	ldr	r3, [pc, #60]	; (10208 <prvCheckForValidListAndQueue+0x54>)
   101ca:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   101cc:	4b0f      	ldr	r3, [pc, #60]	; (1020c <prvCheckForValidListAndQueue+0x58>)
   101ce:	0018      	movs	r0, r3
   101d0:	4b0d      	ldr	r3, [pc, #52]	; (10208 <prvCheckForValidListAndQueue+0x54>)
   101d2:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   101d4:	4b0e      	ldr	r3, [pc, #56]	; (10210 <prvCheckForValidListAndQueue+0x5c>)
   101d6:	4a0b      	ldr	r2, [pc, #44]	; (10204 <prvCheckForValidListAndQueue+0x50>)
   101d8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   101da:	4b0e      	ldr	r3, [pc, #56]	; (10214 <prvCheckForValidListAndQueue+0x60>)
   101dc:	4a0b      	ldr	r2, [pc, #44]	; (1020c <prvCheckForValidListAndQueue+0x58>)
   101de:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   101e0:	2200      	movs	r2, #0
   101e2:	2110      	movs	r1, #16
   101e4:	2005      	movs	r0, #5
   101e6:	4b0c      	ldr	r3, [pc, #48]	; (10218 <prvCheckForValidListAndQueue+0x64>)
   101e8:	4798      	blx	r3
   101ea:	0002      	movs	r2, r0
   101ec:	4b04      	ldr	r3, [pc, #16]	; (10200 <prvCheckForValidListAndQueue+0x4c>)
   101ee:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   101f0:	4b0a      	ldr	r3, [pc, #40]	; (1021c <prvCheckForValidListAndQueue+0x68>)
   101f2:	4798      	blx	r3
}
   101f4:	46c0      	nop			; (mov r8, r8)
   101f6:	46bd      	mov	sp, r7
   101f8:	bd80      	pop	{r7, pc}
   101fa:	46c0      	nop			; (mov r8, r8)
   101fc:	0000dc81 	.word	0x0000dc81
   10200:	200003dc 	.word	0x200003dc
   10204:	200003ac 	.word	0x200003ac
   10208:	0000de25 	.word	0x0000de25
   1020c:	200003c0 	.word	0x200003c0
   10210:	200003d4 	.word	0x200003d4
   10214:	200003d8 	.word	0x200003d8
   10218:	0000e035 	.word	0x0000e035
   1021c:	0000dca5 	.word	0x0000dca5

00010220 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
   10220:	b580      	push	{r7, lr}
   10222:	b084      	sub	sp, #16
   10224:	af00      	add	r7, sp, #0
   10226:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
   10228:	687b      	ldr	r3, [r7, #4]
   1022a:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
   1022c:	687b      	ldr	r3, [r7, #4]
   1022e:	2b00      	cmp	r3, #0
   10230:	d101      	bne.n	10236 <xTimerIsTimerActive+0x16>
   10232:	b672      	cpsid	i
   10234:	e7fe      	b.n	10234 <xTimerIsTimerActive+0x14>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
   10236:	4b07      	ldr	r3, [pc, #28]	; (10254 <xTimerIsTimerActive+0x34>)
   10238:	4798      	blx	r3
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) ); /*lint !e961. Cast is only redundant when NULL is passed into the macro. */
   1023a:	68fb      	ldr	r3, [r7, #12]
   1023c:	695b      	ldr	r3, [r3, #20]
   1023e:	1e5a      	subs	r2, r3, #1
   10240:	4193      	sbcs	r3, r2
   10242:	b2db      	uxtb	r3, r3
   10244:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
   10246:	4b04      	ldr	r3, [pc, #16]	; (10258 <xTimerIsTimerActive+0x38>)
   10248:	4798      	blx	r3

	return xTimerIsInActiveList;
   1024a:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Can't be pointer to const due to the typedef. */
   1024c:	0018      	movs	r0, r3
   1024e:	46bd      	mov	sp, r7
   10250:	b004      	add	sp, #16
   10252:	bd80      	pop	{r7, pc}
   10254:	0000dc81 	.word	0x0000dc81
   10258:	0000dca5 	.word	0x0000dca5

0001025c <wdt_clear_early_warning>:
 *
 *  Clears the Watchdog timer early warning period elapsed flag, so that a new
 *  early warning period can be detected.
 */
static inline void wdt_clear_early_warning(void)
{
   1025c:	b580      	push	{r7, lr}
   1025e:	b082      	sub	sp, #8
   10260:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
   10262:	4b04      	ldr	r3, [pc, #16]	; (10274 <wdt_clear_early_warning+0x18>)
   10264:	607b      	str	r3, [r7, #4]

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
   10266:	687b      	ldr	r3, [r7, #4]
   10268:	2201      	movs	r2, #1
   1026a:	719a      	strb	r2, [r3, #6]
}
   1026c:	46c0      	nop			; (mov r8, r8)
   1026e:	46bd      	mov	sp, r7
   10270:	b002      	add	sp, #8
   10272:	bd80      	pop	{r7, pc}
   10274:	40001000 	.word	0x40001000

00010278 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
   10278:	b580      	push	{r7, lr}
   1027a:	af00      	add	r7, sp, #0
	wdt_clear_early_warning();
   1027c:	4b05      	ldr	r3, [pc, #20]	; (10294 <WDT_Handler+0x1c>)
   1027e:	4798      	blx	r3

	if (wdt_early_warning_callback) {
   10280:	4b05      	ldr	r3, [pc, #20]	; (10298 <WDT_Handler+0x20>)
   10282:	681b      	ldr	r3, [r3, #0]
   10284:	2b00      	cmp	r3, #0
   10286:	d002      	beq.n	1028e <WDT_Handler+0x16>
		wdt_early_warning_callback();
   10288:	4b03      	ldr	r3, [pc, #12]	; (10298 <WDT_Handler+0x20>)
   1028a:	681b      	ldr	r3, [r3, #0]
   1028c:	4798      	blx	r3
	}
}
   1028e:	46c0      	nop			; (mov r8, r8)
   10290:	46bd      	mov	sp, r7
   10292:	bd80      	pop	{r7, pc}
   10294:	0001025d 	.word	0x0001025d
   10298:	200008e4 	.word	0x200008e4

0001029c <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   1029c:	b580      	push	{r7, lr}
   1029e:	af00      	add	r7, sp, #0
   102a0:	2000      	movs	r0, #0
   102a2:	4b02      	ldr	r3, [pc, #8]	; (102ac <TCC0_Handler+0x10>)
   102a4:	4798      	blx	r3
   102a6:	46c0      	nop			; (mov r8, r8)
   102a8:	46bd      	mov	sp, r7
   102aa:	bd80      	pop	{r7, pc}
   102ac:	000102d9 	.word	0x000102d9

000102b0 <TCC1_Handler>:
   102b0:	b580      	push	{r7, lr}
   102b2:	af00      	add	r7, sp, #0
   102b4:	2001      	movs	r0, #1
   102b6:	4b02      	ldr	r3, [pc, #8]	; (102c0 <TCC1_Handler+0x10>)
   102b8:	4798      	blx	r3
   102ba:	46c0      	nop			; (mov r8, r8)
   102bc:	46bd      	mov	sp, r7
   102be:	bd80      	pop	{r7, pc}
   102c0:	000102d9 	.word	0x000102d9

000102c4 <TCC2_Handler>:
   102c4:	b580      	push	{r7, lr}
   102c6:	af00      	add	r7, sp, #0
   102c8:	2002      	movs	r0, #2
   102ca:	4b02      	ldr	r3, [pc, #8]	; (102d4 <TCC2_Handler+0x10>)
   102cc:	4798      	blx	r3
   102ce:	46c0      	nop			; (mov r8, r8)
   102d0:	46bd      	mov	sp, r7
   102d2:	bd80      	pop	{r7, pc}
   102d4:	000102d9 	.word	0x000102d9

000102d8 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   102d8:	b580      	push	{r7, lr}
   102da:	b086      	sub	sp, #24
   102dc:	af00      	add	r7, sp, #0
   102de:	0002      	movs	r2, r0
   102e0:	1dfb      	adds	r3, r7, #7
   102e2:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   102e4:	1dfb      	adds	r3, r7, #7
   102e6:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   102e8:	4b18      	ldr	r3, [pc, #96]	; (1034c <_tcc_interrupt_handler+0x74>)
   102ea:	0092      	lsls	r2, r2, #2
   102ec:	58d3      	ldr	r3, [r2, r3]
   102ee:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   102f0:	693b      	ldr	r3, [r7, #16]
   102f2:	681b      	ldr	r3, [r3, #0]
   102f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   102f6:	693b      	ldr	r3, [r7, #16]
   102f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   102fa:	401a      	ands	r2, r3
			module->enable_callback_mask);
   102fc:	693b      	ldr	r3, [r7, #16]
   102fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   10300:	4013      	ands	r3, r2
   10302:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   10304:	2300      	movs	r3, #0
   10306:	617b      	str	r3, [r7, #20]
   10308:	e019      	b.n	1033e <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   1030a:	4b11      	ldr	r3, [pc, #68]	; (10350 <_tcc_interrupt_handler+0x78>)
   1030c:	697a      	ldr	r2, [r7, #20]
   1030e:	0092      	lsls	r2, r2, #2
   10310:	58d3      	ldr	r3, [r2, r3]
   10312:	68fa      	ldr	r2, [r7, #12]
   10314:	4013      	ands	r3, r2
   10316:	d00f      	beq.n	10338 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   10318:	693a      	ldr	r2, [r7, #16]
   1031a:	697b      	ldr	r3, [r7, #20]
   1031c:	009b      	lsls	r3, r3, #2
   1031e:	18d3      	adds	r3, r2, r3
   10320:	3304      	adds	r3, #4
   10322:	681b      	ldr	r3, [r3, #0]
   10324:	693a      	ldr	r2, [r7, #16]
   10326:	0010      	movs	r0, r2
   10328:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   1032a:	693b      	ldr	r3, [r7, #16]
   1032c:	681b      	ldr	r3, [r3, #0]
   1032e:	4a08      	ldr	r2, [pc, #32]	; (10350 <_tcc_interrupt_handler+0x78>)
   10330:	6979      	ldr	r1, [r7, #20]
   10332:	0089      	lsls	r1, r1, #2
   10334:	588a      	ldr	r2, [r1, r2]
   10336:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   10338:	697b      	ldr	r3, [r7, #20]
   1033a:	3301      	adds	r3, #1
   1033c:	617b      	str	r3, [r7, #20]
   1033e:	697b      	ldr	r3, [r7, #20]
   10340:	2b0b      	cmp	r3, #11
   10342:	dde2      	ble.n	1030a <_tcc_interrupt_handler+0x32>
		}
	}
}
   10344:	46c0      	nop			; (mov r8, r8)
   10346:	46bd      	mov	sp, r7
   10348:	b006      	add	sp, #24
   1034a:	bd80      	pop	{r7, pc}
   1034c:	200008e8 	.word	0x200008e8
   10350:	00019718 	.word	0x00019718

00010354 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   10354:	b580      	push	{r7, lr}
   10356:	af00      	add	r7, sp, #0
   10358:	2000      	movs	r0, #0
   1035a:	4b02      	ldr	r3, [pc, #8]	; (10364 <TC3_Handler+0x10>)
   1035c:	4798      	blx	r3
   1035e:	46c0      	nop			; (mov r8, r8)
   10360:	46bd      	mov	sp, r7
   10362:	bd80      	pop	{r7, pc}
   10364:	000103b9 	.word	0x000103b9

00010368 <TC4_Handler>:
   10368:	b580      	push	{r7, lr}
   1036a:	af00      	add	r7, sp, #0
   1036c:	2001      	movs	r0, #1
   1036e:	4b02      	ldr	r3, [pc, #8]	; (10378 <TC4_Handler+0x10>)
   10370:	4798      	blx	r3
   10372:	46c0      	nop			; (mov r8, r8)
   10374:	46bd      	mov	sp, r7
   10376:	bd80      	pop	{r7, pc}
   10378:	000103b9 	.word	0x000103b9

0001037c <TC5_Handler>:
   1037c:	b580      	push	{r7, lr}
   1037e:	af00      	add	r7, sp, #0
   10380:	2002      	movs	r0, #2
   10382:	4b02      	ldr	r3, [pc, #8]	; (1038c <TC5_Handler+0x10>)
   10384:	4798      	blx	r3
   10386:	46c0      	nop			; (mov r8, r8)
   10388:	46bd      	mov	sp, r7
   1038a:	bd80      	pop	{r7, pc}
   1038c:	000103b9 	.word	0x000103b9

00010390 <TC6_Handler>:
   10390:	b580      	push	{r7, lr}
   10392:	af00      	add	r7, sp, #0
   10394:	2003      	movs	r0, #3
   10396:	4b02      	ldr	r3, [pc, #8]	; (103a0 <TC6_Handler+0x10>)
   10398:	4798      	blx	r3
   1039a:	46c0      	nop			; (mov r8, r8)
   1039c:	46bd      	mov	sp, r7
   1039e:	bd80      	pop	{r7, pc}
   103a0:	000103b9 	.word	0x000103b9

000103a4 <TC7_Handler>:
   103a4:	b580      	push	{r7, lr}
   103a6:	af00      	add	r7, sp, #0
   103a8:	2004      	movs	r0, #4
   103aa:	4b02      	ldr	r3, [pc, #8]	; (103b4 <TC7_Handler+0x10>)
   103ac:	4798      	blx	r3
   103ae:	46c0      	nop			; (mov r8, r8)
   103b0:	46bd      	mov	sp, r7
   103b2:	bd80      	pop	{r7, pc}
   103b4:	000103b9 	.word	0x000103b9

000103b8 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   103b8:	b580      	push	{r7, lr}
   103ba:	b084      	sub	sp, #16
   103bc:	af00      	add	r7, sp, #0
   103be:	0002      	movs	r2, r0
   103c0:	1dfb      	adds	r3, r7, #7
   103c2:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   103c4:	1dfb      	adds	r3, r7, #7
   103c6:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   103c8:	4b28      	ldr	r3, [pc, #160]	; (1046c <_tc_interrupt_handler+0xb4>)
   103ca:	0092      	lsls	r2, r2, #2
   103cc:	58d3      	ldr	r3, [r2, r3]
   103ce:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   103d0:	68fb      	ldr	r3, [r7, #12]
   103d2:	681b      	ldr	r3, [r3, #0]
   103d4:	7b9b      	ldrb	r3, [r3, #14]
   103d6:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   103d8:	68fa      	ldr	r2, [r7, #12]
   103da:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   103dc:	4013      	ands	r3, r2
   103de:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   103e0:	68fb      	ldr	r3, [r7, #12]
   103e2:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   103e4:	230b      	movs	r3, #11
   103e6:	18fb      	adds	r3, r7, r3
   103e8:	400a      	ands	r2, r1
   103ea:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   103ec:	230b      	movs	r3, #11
   103ee:	18fb      	adds	r3, r7, r3
   103f0:	781b      	ldrb	r3, [r3, #0]
   103f2:	2201      	movs	r2, #1
   103f4:	4013      	ands	r3, r2
   103f6:	d008      	beq.n	1040a <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   103f8:	68fb      	ldr	r3, [r7, #12]
   103fa:	689b      	ldr	r3, [r3, #8]
   103fc:	68fa      	ldr	r2, [r7, #12]
   103fe:	0010      	movs	r0, r2
   10400:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   10402:	68fb      	ldr	r3, [r7, #12]
   10404:	681b      	ldr	r3, [r3, #0]
   10406:	2201      	movs	r2, #1
   10408:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   1040a:	230b      	movs	r3, #11
   1040c:	18fb      	adds	r3, r7, r3
   1040e:	781b      	ldrb	r3, [r3, #0]
   10410:	2202      	movs	r2, #2
   10412:	4013      	ands	r3, r2
   10414:	d008      	beq.n	10428 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   10416:	68fb      	ldr	r3, [r7, #12]
   10418:	68db      	ldr	r3, [r3, #12]
   1041a:	68fa      	ldr	r2, [r7, #12]
   1041c:	0010      	movs	r0, r2
   1041e:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   10420:	68fb      	ldr	r3, [r7, #12]
   10422:	681b      	ldr	r3, [r3, #0]
   10424:	2202      	movs	r2, #2
   10426:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   10428:	230b      	movs	r3, #11
   1042a:	18fb      	adds	r3, r7, r3
   1042c:	781b      	ldrb	r3, [r3, #0]
   1042e:	2210      	movs	r2, #16
   10430:	4013      	ands	r3, r2
   10432:	d008      	beq.n	10446 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   10434:	68fb      	ldr	r3, [r7, #12]
   10436:	691b      	ldr	r3, [r3, #16]
   10438:	68fa      	ldr	r2, [r7, #12]
   1043a:	0010      	movs	r0, r2
   1043c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   1043e:	68fb      	ldr	r3, [r7, #12]
   10440:	681b      	ldr	r3, [r3, #0]
   10442:	2210      	movs	r2, #16
   10444:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   10446:	230b      	movs	r3, #11
   10448:	18fb      	adds	r3, r7, r3
   1044a:	781b      	ldrb	r3, [r3, #0]
   1044c:	2220      	movs	r2, #32
   1044e:	4013      	ands	r3, r2
   10450:	d008      	beq.n	10464 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   10452:	68fb      	ldr	r3, [r7, #12]
   10454:	695b      	ldr	r3, [r3, #20]
   10456:	68fa      	ldr	r2, [r7, #12]
   10458:	0010      	movs	r0, r2
   1045a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   1045c:	68fb      	ldr	r3, [r7, #12]
   1045e:	681b      	ldr	r3, [r3, #0]
   10460:	2220      	movs	r2, #32
   10462:	739a      	strb	r2, [r3, #14]
	}
}
   10464:	46c0      	nop			; (mov r8, r8)
   10466:	46bd      	mov	sp, r7
   10468:	b004      	add	sp, #16
   1046a:	bd80      	pop	{r7, pc}
   1046c:	200008f4 	.word	0x200008f4

00010470 <system_gclk_chan_get_config_defaults>:
{
   10470:	b580      	push	{r7, lr}
   10472:	b082      	sub	sp, #8
   10474:	af00      	add	r7, sp, #0
   10476:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   10478:	687b      	ldr	r3, [r7, #4]
   1047a:	2200      	movs	r2, #0
   1047c:	701a      	strb	r2, [r3, #0]
}
   1047e:	46c0      	nop			; (mov r8, r8)
   10480:	46bd      	mov	sp, r7
   10482:	b002      	add	sp, #8
   10484:	bd80      	pop	{r7, pc}
	...

00010488 <system_apb_clock_set_mask>:
{
   10488:	b580      	push	{r7, lr}
   1048a:	b082      	sub	sp, #8
   1048c:	af00      	add	r7, sp, #0
   1048e:	0002      	movs	r2, r0
   10490:	6039      	str	r1, [r7, #0]
   10492:	1dfb      	adds	r3, r7, #7
   10494:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   10496:	1dfb      	adds	r3, r7, #7
   10498:	781b      	ldrb	r3, [r3, #0]
   1049a:	2b01      	cmp	r3, #1
   1049c:	d00a      	beq.n	104b4 <system_apb_clock_set_mask+0x2c>
   1049e:	2b02      	cmp	r3, #2
   104a0:	d00f      	beq.n	104c2 <system_apb_clock_set_mask+0x3a>
   104a2:	2b00      	cmp	r3, #0
   104a4:	d114      	bne.n	104d0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   104a6:	4b0e      	ldr	r3, [pc, #56]	; (104e0 <system_apb_clock_set_mask+0x58>)
   104a8:	4a0d      	ldr	r2, [pc, #52]	; (104e0 <system_apb_clock_set_mask+0x58>)
   104aa:	6991      	ldr	r1, [r2, #24]
   104ac:	683a      	ldr	r2, [r7, #0]
   104ae:	430a      	orrs	r2, r1
   104b0:	619a      	str	r2, [r3, #24]
			break;
   104b2:	e00f      	b.n	104d4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   104b4:	4b0a      	ldr	r3, [pc, #40]	; (104e0 <system_apb_clock_set_mask+0x58>)
   104b6:	4a0a      	ldr	r2, [pc, #40]	; (104e0 <system_apb_clock_set_mask+0x58>)
   104b8:	69d1      	ldr	r1, [r2, #28]
   104ba:	683a      	ldr	r2, [r7, #0]
   104bc:	430a      	orrs	r2, r1
   104be:	61da      	str	r2, [r3, #28]
			break;
   104c0:	e008      	b.n	104d4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   104c2:	4b07      	ldr	r3, [pc, #28]	; (104e0 <system_apb_clock_set_mask+0x58>)
   104c4:	4a06      	ldr	r2, [pc, #24]	; (104e0 <system_apb_clock_set_mask+0x58>)
   104c6:	6a11      	ldr	r1, [r2, #32]
   104c8:	683a      	ldr	r2, [r7, #0]
   104ca:	430a      	orrs	r2, r1
   104cc:	621a      	str	r2, [r3, #32]
			break;
   104ce:	e001      	b.n	104d4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   104d0:	2317      	movs	r3, #23
   104d2:	e000      	b.n	104d6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   104d4:	2300      	movs	r3, #0
}
   104d6:	0018      	movs	r0, r3
   104d8:	46bd      	mov	sp, r7
   104da:	b002      	add	sp, #8
   104dc:	bd80      	pop	{r7, pc}
   104de:	46c0      	nop			; (mov r8, r8)
   104e0:	40000400 	.word	0x40000400

000104e4 <system_pinmux_get_config_defaults>:
{
   104e4:	b580      	push	{r7, lr}
   104e6:	b082      	sub	sp, #8
   104e8:	af00      	add	r7, sp, #0
   104ea:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   104ec:	687b      	ldr	r3, [r7, #4]
   104ee:	2280      	movs	r2, #128	; 0x80
   104f0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   104f2:	687b      	ldr	r3, [r7, #4]
   104f4:	2200      	movs	r2, #0
   104f6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   104f8:	687b      	ldr	r3, [r7, #4]
   104fa:	2201      	movs	r2, #1
   104fc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   104fe:	687b      	ldr	r3, [r7, #4]
   10500:	2200      	movs	r2, #0
   10502:	70da      	strb	r2, [r3, #3]
}
   10504:	46c0      	nop			; (mov r8, r8)
   10506:	46bd      	mov	sp, r7
   10508:	b002      	add	sp, #8
   1050a:	bd80      	pop	{r7, pc}

0001050c <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   1050c:	b580      	push	{r7, lr}
   1050e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   10510:	4b05      	ldr	r3, [pc, #20]	; (10528 <system_is_debugger_present+0x1c>)
   10512:	789b      	ldrb	r3, [r3, #2]
   10514:	b2db      	uxtb	r3, r3
   10516:	001a      	movs	r2, r3
   10518:	2302      	movs	r3, #2
   1051a:	4013      	ands	r3, r2
   1051c:	1e5a      	subs	r2, r3, #1
   1051e:	4193      	sbcs	r3, r2
   10520:	b2db      	uxtb	r3, r3
}
   10522:	0018      	movs	r0, r3
   10524:	46bd      	mov	sp, r7
   10526:	bd80      	pop	{r7, pc}
   10528:	41002000 	.word	0x41002000

0001052c <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   1052c:	b580      	push	{r7, lr}
   1052e:	b084      	sub	sp, #16
   10530:	af00      	add	r7, sp, #0
   10532:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   10534:	687b      	ldr	r3, [r7, #4]
   10536:	681b      	ldr	r3, [r3, #0]
   10538:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   1053a:	68fb      	ldr	r3, [r7, #12]
   1053c:	69db      	ldr	r3, [r3, #28]
   1053e:	1e5a      	subs	r2, r3, #1
   10540:	4193      	sbcs	r3, r2
   10542:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   10544:	0018      	movs	r0, r3
   10546:	46bd      	mov	sp, r7
   10548:	b004      	add	sp, #16
   1054a:	bd80      	pop	{r7, pc}

0001054c <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   1054c:	b580      	push	{r7, lr}
   1054e:	b082      	sub	sp, #8
   10550:	af00      	add	r7, sp, #0
   10552:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   10554:	46c0      	nop			; (mov r8, r8)
   10556:	687b      	ldr	r3, [r7, #4]
   10558:	0018      	movs	r0, r3
   1055a:	4b04      	ldr	r3, [pc, #16]	; (1056c <_usart_wait_for_sync+0x20>)
   1055c:	4798      	blx	r3
   1055e:	1e03      	subs	r3, r0, #0
   10560:	d1f9      	bne.n	10556 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   10562:	46c0      	nop			; (mov r8, r8)
   10564:	46bd      	mov	sp, r7
   10566:	b002      	add	sp, #8
   10568:	bd80      	pop	{r7, pc}
   1056a:	46c0      	nop			; (mov r8, r8)
   1056c:	0001052d 	.word	0x0001052d

00010570 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   10570:	b5b0      	push	{r4, r5, r7, lr}
   10572:	b08c      	sub	sp, #48	; 0x30
   10574:	af02      	add	r7, sp, #8
   10576:	6078      	str	r0, [r7, #4]
   10578:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1057a:	687b      	ldr	r3, [r7, #4]
   1057c:	681b      	ldr	r3, [r3, #0]
   1057e:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   10580:	687b      	ldr	r3, [r7, #4]
   10582:	681b      	ldr	r3, [r3, #0]
   10584:	0018      	movs	r0, r3
   10586:	4bab      	ldr	r3, [pc, #684]	; (10834 <_usart_set_config+0x2c4>)
   10588:	4798      	blx	r3
   1058a:	0003      	movs	r3, r0
   1058c:	617b      	str	r3, [r7, #20]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1058e:	697b      	ldr	r3, [r7, #20]
   10590:	3314      	adds	r3, #20
   10592:	613b      	str	r3, [r7, #16]
#endif

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   10594:	2300      	movs	r3, #0
   10596:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   10598:	2300      	movs	r3, #0
   1059a:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   1059c:	230a      	movs	r3, #10
   1059e:	18fb      	adds	r3, r7, r3
   105a0:	2200      	movs	r2, #0
   105a2:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   105a4:	231f      	movs	r3, #31
   105a6:	18fb      	adds	r3, r7, r3
   105a8:	2200      	movs	r2, #0
   105aa:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   105ac:	231e      	movs	r3, #30
   105ae:	18fb      	adds	r3, r7, r3
   105b0:	2210      	movs	r2, #16
   105b2:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   105b4:	683b      	ldr	r3, [r7, #0]
   105b6:	8a1b      	ldrh	r3, [r3, #16]
   105b8:	2280      	movs	r2, #128	; 0x80
   105ba:	01d2      	lsls	r2, r2, #7
   105bc:	4293      	cmp	r3, r2
   105be:	d01c      	beq.n	105fa <_usart_set_config+0x8a>
   105c0:	2280      	movs	r2, #128	; 0x80
   105c2:	01d2      	lsls	r2, r2, #7
   105c4:	4293      	cmp	r3, r2
   105c6:	dc06      	bgt.n	105d6 <_usart_set_config+0x66>
   105c8:	2b00      	cmp	r3, #0
   105ca:	d00d      	beq.n	105e8 <_usart_set_config+0x78>
   105cc:	2280      	movs	r2, #128	; 0x80
   105ce:	0192      	lsls	r2, r2, #6
   105d0:	4293      	cmp	r3, r2
   105d2:	d024      	beq.n	1061e <_usart_set_config+0xae>
   105d4:	e035      	b.n	10642 <_usart_set_config+0xd2>
   105d6:	22c0      	movs	r2, #192	; 0xc0
   105d8:	01d2      	lsls	r2, r2, #7
   105da:	4293      	cmp	r3, r2
   105dc:	d028      	beq.n	10630 <_usart_set_config+0xc0>
   105de:	2280      	movs	r2, #128	; 0x80
   105e0:	0212      	lsls	r2, r2, #8
   105e2:	4293      	cmp	r3, r2
   105e4:	d012      	beq.n	1060c <_usart_set_config+0x9c>
   105e6:	e02c      	b.n	10642 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   105e8:	231f      	movs	r3, #31
   105ea:	18fb      	adds	r3, r7, r3
   105ec:	2200      	movs	r2, #0
   105ee:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   105f0:	231e      	movs	r3, #30
   105f2:	18fb      	adds	r3, r7, r3
   105f4:	2210      	movs	r2, #16
   105f6:	701a      	strb	r2, [r3, #0]
			break;
   105f8:	e023      	b.n	10642 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   105fa:	231f      	movs	r3, #31
   105fc:	18fb      	adds	r3, r7, r3
   105fe:	2200      	movs	r2, #0
   10600:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   10602:	231e      	movs	r3, #30
   10604:	18fb      	adds	r3, r7, r3
   10606:	2208      	movs	r2, #8
   10608:	701a      	strb	r2, [r3, #0]
			break;
   1060a:	e01a      	b.n	10642 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   1060c:	231f      	movs	r3, #31
   1060e:	18fb      	adds	r3, r7, r3
   10610:	2200      	movs	r2, #0
   10612:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   10614:	231e      	movs	r3, #30
   10616:	18fb      	adds	r3, r7, r3
   10618:	2203      	movs	r2, #3
   1061a:	701a      	strb	r2, [r3, #0]
			break;
   1061c:	e011      	b.n	10642 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   1061e:	231f      	movs	r3, #31
   10620:	18fb      	adds	r3, r7, r3
   10622:	2201      	movs	r2, #1
   10624:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   10626:	231e      	movs	r3, #30
   10628:	18fb      	adds	r3, r7, r3
   1062a:	2210      	movs	r2, #16
   1062c:	701a      	strb	r2, [r3, #0]
			break;
   1062e:	e008      	b.n	10642 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   10630:	231f      	movs	r3, #31
   10632:	18fb      	adds	r3, r7, r3
   10634:	2201      	movs	r2, #1
   10636:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   10638:	231e      	movs	r3, #30
   1063a:	18fb      	adds	r3, r7, r3
   1063c:	2208      	movs	r2, #8
   1063e:	701a      	strb	r2, [r3, #0]
			break;
   10640:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   10642:	683b      	ldr	r3, [r7, #0]
   10644:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   10646:	683b      	ldr	r3, [r7, #0]
   10648:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   1064a:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   1064c:	683b      	ldr	r3, [r7, #0]
   1064e:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   10650:	4313      	orrs	r3, r2
		config->sample_rate |
   10652:	683a      	ldr	r2, [r7, #0]
   10654:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   10656:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   10658:	683a      	ldr	r2, [r7, #0]
   1065a:	7e12      	ldrb	r2, [r2, #24]
   1065c:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   1065e:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   10660:	683a      	ldr	r2, [r7, #0]
   10662:	2126      	movs	r1, #38	; 0x26
   10664:	5c52      	ldrb	r2, [r2, r1]
   10666:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   10668:	4313      	orrs	r3, r2
   1066a:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   1066c:	231d      	movs	r3, #29
   1066e:	18fb      	adds	r3, r7, r3
   10670:	2200      	movs	r2, #0
   10672:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   10674:	683b      	ldr	r3, [r7, #0]
   10676:	685b      	ldr	r3, [r3, #4]
   10678:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   1067a:	68fb      	ldr	r3, [r7, #12]
   1067c:	2b00      	cmp	r3, #0
   1067e:	d01e      	beq.n	106be <_usart_set_config+0x14e>
   10680:	2280      	movs	r2, #128	; 0x80
   10682:	0552      	lsls	r2, r2, #21
   10684:	4293      	cmp	r3, r2
   10686:	d14f      	bne.n	10728 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   10688:	683b      	ldr	r3, [r7, #0]
   1068a:	2227      	movs	r2, #39	; 0x27
   1068c:	5c9b      	ldrb	r3, [r3, r2]
   1068e:	2201      	movs	r2, #1
   10690:	4053      	eors	r3, r2
   10692:	b2db      	uxtb	r3, r3
   10694:	2b00      	cmp	r3, #0
   10696:	d046      	beq.n	10726 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   10698:	683b      	ldr	r3, [r7, #0]
   1069a:	6a1d      	ldr	r5, [r3, #32]
   1069c:	693b      	ldr	r3, [r7, #16]
   1069e:	b2db      	uxtb	r3, r3
   106a0:	0018      	movs	r0, r3
   106a2:	4b65      	ldr	r3, [pc, #404]	; (10838 <_usart_set_config+0x2c8>)
   106a4:	4798      	blx	r3
   106a6:	0001      	movs	r1, r0
   106a8:	231d      	movs	r3, #29
   106aa:	18fc      	adds	r4, r7, r3
   106ac:	230a      	movs	r3, #10
   106ae:	18fb      	adds	r3, r7, r3
   106b0:	001a      	movs	r2, r3
   106b2:	0028      	movs	r0, r5
   106b4:	4b61      	ldr	r3, [pc, #388]	; (1083c <_usart_set_config+0x2cc>)
   106b6:	4798      	blx	r3
   106b8:	0003      	movs	r3, r0
   106ba:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   106bc:	e033      	b.n	10726 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   106be:	683b      	ldr	r3, [r7, #0]
   106c0:	2227      	movs	r2, #39	; 0x27
   106c2:	5c9b      	ldrb	r3, [r3, r2]
   106c4:	2b00      	cmp	r3, #0
   106c6:	d014      	beq.n	106f2 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   106c8:	683b      	ldr	r3, [r7, #0]
   106ca:	6a18      	ldr	r0, [r3, #32]
   106cc:	683b      	ldr	r3, [r7, #0]
   106ce:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   106d0:	231d      	movs	r3, #29
   106d2:	18fc      	adds	r4, r7, r3
   106d4:	231f      	movs	r3, #31
   106d6:	18fb      	adds	r3, r7, r3
   106d8:	781d      	ldrb	r5, [r3, #0]
   106da:	230a      	movs	r3, #10
   106dc:	18fa      	adds	r2, r7, r3
   106de:	231e      	movs	r3, #30
   106e0:	18fb      	adds	r3, r7, r3
   106e2:	781b      	ldrb	r3, [r3, #0]
   106e4:	9300      	str	r3, [sp, #0]
   106e6:	002b      	movs	r3, r5
   106e8:	4d55      	ldr	r5, [pc, #340]	; (10840 <_usart_set_config+0x2d0>)
   106ea:	47a8      	blx	r5
   106ec:	0003      	movs	r3, r0
   106ee:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   106f0:	e01a      	b.n	10728 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   106f2:	683b      	ldr	r3, [r7, #0]
   106f4:	6a1d      	ldr	r5, [r3, #32]
   106f6:	693b      	ldr	r3, [r7, #16]
   106f8:	b2db      	uxtb	r3, r3
   106fa:	0018      	movs	r0, r3
   106fc:	4b4e      	ldr	r3, [pc, #312]	; (10838 <_usart_set_config+0x2c8>)
   106fe:	4798      	blx	r3
				status_code =
   10700:	231d      	movs	r3, #29
   10702:	18fc      	adds	r4, r7, r3
   10704:	231f      	movs	r3, #31
   10706:	18fb      	adds	r3, r7, r3
   10708:	7819      	ldrb	r1, [r3, #0]
   1070a:	230a      	movs	r3, #10
   1070c:	18fa      	adds	r2, r7, r3
   1070e:	231e      	movs	r3, #30
   10710:	18fb      	adds	r3, r7, r3
   10712:	781b      	ldrb	r3, [r3, #0]
   10714:	9300      	str	r3, [sp, #0]
   10716:	000b      	movs	r3, r1
   10718:	0001      	movs	r1, r0
   1071a:	0028      	movs	r0, r5
   1071c:	4d48      	ldr	r5, [pc, #288]	; (10840 <_usart_set_config+0x2d0>)
   1071e:	47a8      	blx	r5
   10720:	0003      	movs	r3, r0
   10722:	7023      	strb	r3, [r4, #0]
			break;
   10724:	e000      	b.n	10728 <_usart_set_config+0x1b8>
			break;
   10726:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   10728:	231d      	movs	r3, #29
   1072a:	18fb      	adds	r3, r7, r3
   1072c:	781b      	ldrb	r3, [r3, #0]
   1072e:	2b00      	cmp	r3, #0
   10730:	d003      	beq.n	1073a <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   10732:	231d      	movs	r3, #29
   10734:	18fb      	adds	r3, r7, r3
   10736:	781b      	ldrb	r3, [r3, #0]
   10738:	e077      	b.n	1082a <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   1073a:	683b      	ldr	r3, [r7, #0]
   1073c:	7e5b      	ldrb	r3, [r3, #25]
   1073e:	2b00      	cmp	r3, #0
   10740:	d003      	beq.n	1074a <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   10742:	683b      	ldr	r3, [r7, #0]
   10744:	7e9a      	ldrb	r2, [r3, #26]
   10746:	69bb      	ldr	r3, [r7, #24]
   10748:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1074a:	687b      	ldr	r3, [r7, #4]
   1074c:	0018      	movs	r0, r3
   1074e:	4b3d      	ldr	r3, [pc, #244]	; (10844 <_usart_set_config+0x2d4>)
   10750:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   10752:	230a      	movs	r3, #10
   10754:	18fb      	adds	r3, r7, r3
   10756:	881a      	ldrh	r2, [r3, #0]
   10758:	69bb      	ldr	r3, [r7, #24]
   1075a:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   1075c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1075e:	68fb      	ldr	r3, [r7, #12]
   10760:	4313      	orrs	r3, r2
   10762:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   10764:	683b      	ldr	r3, [r7, #0]
   10766:	2227      	movs	r2, #39	; 0x27
   10768:	5c9b      	ldrb	r3, [r3, r2]
   1076a:	2201      	movs	r2, #1
   1076c:	4053      	eors	r3, r2
   1076e:	b2db      	uxtb	r3, r3
   10770:	2b00      	cmp	r3, #0
   10772:	d003      	beq.n	1077c <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   10774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10776:	2204      	movs	r2, #4
   10778:	4313      	orrs	r3, r2
   1077a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   1077c:	683b      	ldr	r3, [r7, #0]
   1077e:	7e5b      	ldrb	r3, [r3, #25]
   10780:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   10782:	683b      	ldr	r3, [r7, #0]
   10784:	7f1b      	ldrb	r3, [r3, #28]
   10786:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   10788:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   1078a:	683b      	ldr	r3, [r7, #0]
   1078c:	7f5b      	ldrb	r3, [r3, #29]
   1078e:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   10790:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   10792:	683b      	ldr	r3, [r7, #0]
   10794:	2124      	movs	r1, #36	; 0x24
   10796:	5c5b      	ldrb	r3, [r3, r1]
   10798:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   1079a:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   1079c:	683b      	ldr	r3, [r7, #0]
   1079e:	2125      	movs	r1, #37	; 0x25
   107a0:	5c5b      	ldrb	r3, [r3, r1]
   107a2:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   107a4:	4313      	orrs	r3, r2
	ctrlb =  
   107a6:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   107a8:	683b      	ldr	r3, [r7, #0]
   107aa:	7a9b      	ldrb	r3, [r3, #10]
   107ac:	001a      	movs	r2, r3
   107ae:	6a3b      	ldr	r3, [r7, #32]
   107b0:	4313      	orrs	r3, r2
   107b2:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   107b4:	683b      	ldr	r3, [r7, #0]
   107b6:	7adb      	ldrb	r3, [r3, #11]
   107b8:	001a      	movs	r2, r3
   107ba:	6a3b      	ldr	r3, [r7, #32]
   107bc:	4313      	orrs	r3, r2
   107be:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   107c0:	683b      	ldr	r3, [r7, #0]
   107c2:	891b      	ldrh	r3, [r3, #8]
   107c4:	2bff      	cmp	r3, #255	; 0xff
   107c6:	d00b      	beq.n	107e0 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   107c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   107ca:	2280      	movs	r2, #128	; 0x80
   107cc:	0452      	lsls	r2, r2, #17
   107ce:	4313      	orrs	r3, r2
   107d0:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   107d2:	683b      	ldr	r3, [r7, #0]
   107d4:	891b      	ldrh	r3, [r3, #8]
   107d6:	001a      	movs	r2, r3
   107d8:	6a3b      	ldr	r3, [r7, #32]
   107da:	4313      	orrs	r3, r2
   107dc:	623b      	str	r3, [r7, #32]
   107de:	e008      	b.n	107f2 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   107e0:	683b      	ldr	r3, [r7, #0]
   107e2:	7edb      	ldrb	r3, [r3, #27]
   107e4:	2b00      	cmp	r3, #0
   107e6:	d004      	beq.n	107f2 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   107e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   107ea:	2280      	movs	r2, #128	; 0x80
   107ec:	04d2      	lsls	r2, r2, #19
   107ee:	4313      	orrs	r3, r2
   107f0:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   107f2:	683b      	ldr	r3, [r7, #0]
   107f4:	222c      	movs	r2, #44	; 0x2c
   107f6:	5c9b      	ldrb	r3, [r3, r2]
   107f8:	2b00      	cmp	r3, #0
   107fa:	d103      	bne.n	10804 <_usart_set_config+0x294>
   107fc:	4b12      	ldr	r3, [pc, #72]	; (10848 <_usart_set_config+0x2d8>)
   107fe:	4798      	blx	r3
   10800:	1e03      	subs	r3, r0, #0
   10802:	d003      	beq.n	1080c <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   10804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10806:	2280      	movs	r2, #128	; 0x80
   10808:	4313      	orrs	r3, r2
   1080a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1080c:	687b      	ldr	r3, [r7, #4]
   1080e:	0018      	movs	r0, r3
   10810:	4b0c      	ldr	r3, [pc, #48]	; (10844 <_usart_set_config+0x2d4>)
   10812:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   10814:	69bb      	ldr	r3, [r7, #24]
   10816:	6a3a      	ldr	r2, [r7, #32]
   10818:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1081a:	687b      	ldr	r3, [r7, #4]
   1081c:	0018      	movs	r0, r3
   1081e:	4b09      	ldr	r3, [pc, #36]	; (10844 <_usart_set_config+0x2d4>)
   10820:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   10822:	69bb      	ldr	r3, [r7, #24]
   10824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10826:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   10828:	2300      	movs	r3, #0
}
   1082a:	0018      	movs	r0, r3
   1082c:	46bd      	mov	sp, r7
   1082e:	b00a      	add	sp, #40	; 0x28
   10830:	bdb0      	pop	{r4, r5, r7, pc}
   10832:	46c0      	nop			; (mov r8, r8)
   10834:	0000dac9 	.word	0x0000dac9
   10838:	000138d1 	.word	0x000138d1
   1083c:	0000d643 	.word	0x0000d643
   10840:	0000d6c1 	.word	0x0000d6c1
   10844:	0001054d 	.word	0x0001054d
   10848:	0001050d 	.word	0x0001050d

0001084c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   1084c:	b590      	push	{r4, r7, lr}
   1084e:	b093      	sub	sp, #76	; 0x4c
   10850:	af00      	add	r7, sp, #0
   10852:	60f8      	str	r0, [r7, #12]
   10854:	60b9      	str	r1, [r7, #8]
   10856:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   10858:	233b      	movs	r3, #59	; 0x3b
   1085a:	18fb      	adds	r3, r7, r3
   1085c:	2200      	movs	r2, #0
   1085e:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   10860:	68fb      	ldr	r3, [r7, #12]
   10862:	68ba      	ldr	r2, [r7, #8]
   10864:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   10866:	68fb      	ldr	r3, [r7, #12]
   10868:	681b      	ldr	r3, [r3, #0]
   1086a:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1086c:	68fb      	ldr	r3, [r7, #12]
   1086e:	681b      	ldr	r3, [r3, #0]
   10870:	0018      	movs	r0, r3
   10872:	4b86      	ldr	r3, [pc, #536]	; (10a8c <usart_init+0x240>)
   10874:	4798      	blx	r3
   10876:	0003      	movs	r3, r0
   10878:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   1087a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1087c:	3302      	adds	r3, #2
   1087e:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   10880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10882:	3314      	adds	r3, #20
   10884:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   10886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10888:	681b      	ldr	r3, [r3, #0]
   1088a:	2201      	movs	r2, #1
   1088c:	4013      	ands	r3, r2
   1088e:	d001      	beq.n	10894 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   10890:	2305      	movs	r3, #5
   10892:	e0f6      	b.n	10a82 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   10894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10896:	681b      	ldr	r3, [r3, #0]
   10898:	2202      	movs	r2, #2
   1089a:	4013      	ands	r3, r2
   1089c:	d001      	beq.n	108a2 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   1089e:	231c      	movs	r3, #28
   108a0:	e0ef      	b.n	10a82 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   108a2:	2201      	movs	r2, #1
   108a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   108a6:	409a      	lsls	r2, r3
   108a8:	0013      	movs	r3, r2
   108aa:	0019      	movs	r1, r3
   108ac:	2002      	movs	r0, #2
   108ae:	4b78      	ldr	r3, [pc, #480]	; (10a90 <usart_init+0x244>)
   108b0:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   108b2:	2324      	movs	r3, #36	; 0x24
   108b4:	18fb      	adds	r3, r7, r3
   108b6:	0018      	movs	r0, r3
   108b8:	4b76      	ldr	r3, [pc, #472]	; (10a94 <usart_init+0x248>)
   108ba:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   108bc:	687b      	ldr	r3, [r7, #4]
   108be:	222d      	movs	r2, #45	; 0x2d
   108c0:	5c9a      	ldrb	r2, [r3, r2]
   108c2:	2324      	movs	r3, #36	; 0x24
   108c4:	18fb      	adds	r3, r7, r3
   108c6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   108c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   108ca:	b2db      	uxtb	r3, r3
   108cc:	2224      	movs	r2, #36	; 0x24
   108ce:	18ba      	adds	r2, r7, r2
   108d0:	0011      	movs	r1, r2
   108d2:	0018      	movs	r0, r3
   108d4:	4b70      	ldr	r3, [pc, #448]	; (10a98 <usart_init+0x24c>)
   108d6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   108d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   108da:	b2db      	uxtb	r3, r3
   108dc:	0018      	movs	r0, r3
   108de:	4b6f      	ldr	r3, [pc, #444]	; (10a9c <usart_init+0x250>)
   108e0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   108e2:	687b      	ldr	r3, [r7, #4]
   108e4:	222d      	movs	r2, #45	; 0x2d
   108e6:	5c9b      	ldrb	r3, [r3, r2]
   108e8:	2100      	movs	r1, #0
   108ea:	0018      	movs	r0, r3
   108ec:	4b6c      	ldr	r3, [pc, #432]	; (10aa0 <usart_init+0x254>)
   108ee:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   108f0:	687b      	ldr	r3, [r7, #4]
   108f2:	7ada      	ldrb	r2, [r3, #11]
   108f4:	68fb      	ldr	r3, [r7, #12]
   108f6:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   108f8:	687b      	ldr	r3, [r7, #4]
   108fa:	2224      	movs	r2, #36	; 0x24
   108fc:	5c9a      	ldrb	r2, [r3, r2]
   108fe:	68fb      	ldr	r3, [r7, #12]
   10900:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   10902:	687b      	ldr	r3, [r7, #4]
   10904:	2225      	movs	r2, #37	; 0x25
   10906:	5c9a      	ldrb	r2, [r3, r2]
   10908:	68fb      	ldr	r3, [r7, #12]
   1090a:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   1090c:	687b      	ldr	r3, [r7, #4]
   1090e:	7eda      	ldrb	r2, [r3, #27]
   10910:	68fb      	ldr	r3, [r7, #12]
   10912:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   10914:	687b      	ldr	r3, [r7, #4]
   10916:	7f1a      	ldrb	r2, [r3, #28]
   10918:	68fb      	ldr	r3, [r7, #12]
   1091a:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   1091c:	233b      	movs	r3, #59	; 0x3b
   1091e:	18fc      	adds	r4, r7, r3
   10920:	687a      	ldr	r2, [r7, #4]
   10922:	68fb      	ldr	r3, [r7, #12]
   10924:	0011      	movs	r1, r2
   10926:	0018      	movs	r0, r3
   10928:	4b5e      	ldr	r3, [pc, #376]	; (10aa4 <usart_init+0x258>)
   1092a:	4798      	blx	r3
   1092c:	0003      	movs	r3, r0
   1092e:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   10930:	233b      	movs	r3, #59	; 0x3b
   10932:	18fb      	adds	r3, r7, r3
   10934:	781b      	ldrb	r3, [r3, #0]
   10936:	2b00      	cmp	r3, #0
   10938:	d003      	beq.n	10942 <usart_init+0xf6>
		return status_code;
   1093a:	233b      	movs	r3, #59	; 0x3b
   1093c:	18fb      	adds	r3, r7, r3
   1093e:	781b      	ldrb	r3, [r3, #0]
   10940:	e09f      	b.n	10a82 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   10942:	2320      	movs	r3, #32
   10944:	18fb      	adds	r3, r7, r3
   10946:	0018      	movs	r0, r3
   10948:	4b57      	ldr	r3, [pc, #348]	; (10aa8 <usart_init+0x25c>)
   1094a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1094c:	2320      	movs	r3, #32
   1094e:	18fb      	adds	r3, r7, r3
   10950:	2200      	movs	r2, #0
   10952:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   10954:	2320      	movs	r3, #32
   10956:	18fb      	adds	r3, r7, r3
   10958:	2200      	movs	r2, #0
   1095a:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   1095c:	687b      	ldr	r3, [r7, #4]
   1095e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   10960:	2310      	movs	r3, #16
   10962:	18fb      	adds	r3, r7, r3
   10964:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   10966:	687b      	ldr	r3, [r7, #4]
   10968:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   1096a:	2310      	movs	r3, #16
   1096c:	18fb      	adds	r3, r7, r3
   1096e:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   10970:	687b      	ldr	r3, [r7, #4]
   10972:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   10974:	2310      	movs	r3, #16
   10976:	18fb      	adds	r3, r7, r3
   10978:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   1097a:	687b      	ldr	r3, [r7, #4]
   1097c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   1097e:	2310      	movs	r3, #16
   10980:	18fb      	adds	r3, r7, r3
   10982:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   10984:	2347      	movs	r3, #71	; 0x47
   10986:	18fb      	adds	r3, r7, r3
   10988:	2200      	movs	r2, #0
   1098a:	701a      	strb	r2, [r3, #0]
   1098c:	e02c      	b.n	109e8 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   1098e:	2347      	movs	r3, #71	; 0x47
   10990:	18fb      	adds	r3, r7, r3
   10992:	781a      	ldrb	r2, [r3, #0]
   10994:	2310      	movs	r3, #16
   10996:	18fb      	adds	r3, r7, r3
   10998:	0092      	lsls	r2, r2, #2
   1099a:	58d3      	ldr	r3, [r2, r3]
   1099c:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   1099e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   109a0:	2b00      	cmp	r3, #0
   109a2:	d109      	bne.n	109b8 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   109a4:	2347      	movs	r3, #71	; 0x47
   109a6:	18fb      	adds	r3, r7, r3
   109a8:	781a      	ldrb	r2, [r3, #0]
   109aa:	68bb      	ldr	r3, [r7, #8]
   109ac:	0011      	movs	r1, r2
   109ae:	0018      	movs	r0, r3
   109b0:	4b3e      	ldr	r3, [pc, #248]	; (10aac <usart_init+0x260>)
   109b2:	4798      	blx	r3
   109b4:	0003      	movs	r3, r0
   109b6:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   109b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   109ba:	3301      	adds	r3, #1
   109bc:	d00d      	beq.n	109da <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   109be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   109c0:	b2da      	uxtb	r2, r3
   109c2:	2320      	movs	r3, #32
   109c4:	18fb      	adds	r3, r7, r3
   109c6:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   109c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   109ca:	0c1b      	lsrs	r3, r3, #16
   109cc:	b2db      	uxtb	r3, r3
   109ce:	2220      	movs	r2, #32
   109d0:	18ba      	adds	r2, r7, r2
   109d2:	0011      	movs	r1, r2
   109d4:	0018      	movs	r0, r3
   109d6:	4b36      	ldr	r3, [pc, #216]	; (10ab0 <usart_init+0x264>)
   109d8:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   109da:	2347      	movs	r3, #71	; 0x47
   109dc:	18fb      	adds	r3, r7, r3
   109de:	781a      	ldrb	r2, [r3, #0]
   109e0:	2347      	movs	r3, #71	; 0x47
   109e2:	18fb      	adds	r3, r7, r3
   109e4:	3201      	adds	r2, #1
   109e6:	701a      	strb	r2, [r3, #0]
   109e8:	2347      	movs	r3, #71	; 0x47
   109ea:	18fb      	adds	r3, r7, r3
   109ec:	781b      	ldrb	r3, [r3, #0]
   109ee:	2b03      	cmp	r3, #3
   109f0:	d9cd      	bls.n	1098e <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   109f2:	2300      	movs	r3, #0
   109f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   109f6:	e00a      	b.n	10a0e <usart_init+0x1c2>
		module->callback[i]            = NULL;
   109f8:	68fa      	ldr	r2, [r7, #12]
   109fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   109fc:	3302      	adds	r3, #2
   109fe:	009b      	lsls	r3, r3, #2
   10a00:	18d3      	adds	r3, r2, r3
   10a02:	3304      	adds	r3, #4
   10a04:	2200      	movs	r2, #0
   10a06:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   10a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10a0a:	3301      	adds	r3, #1
   10a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   10a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10a10:	2b05      	cmp	r3, #5
   10a12:	d9f1      	bls.n	109f8 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   10a14:	68fb      	ldr	r3, [r7, #12]
   10a16:	2200      	movs	r2, #0
   10a18:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   10a1a:	68fb      	ldr	r3, [r7, #12]
   10a1c:	2200      	movs	r2, #0
   10a1e:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   10a20:	68fb      	ldr	r3, [r7, #12]
   10a22:	2200      	movs	r2, #0
   10a24:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   10a26:	68fb      	ldr	r3, [r7, #12]
   10a28:	2200      	movs	r2, #0
   10a2a:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   10a2c:	68fb      	ldr	r3, [r7, #12]
   10a2e:	2230      	movs	r2, #48	; 0x30
   10a30:	2100      	movs	r1, #0
   10a32:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   10a34:	68fb      	ldr	r3, [r7, #12]
   10a36:	2231      	movs	r2, #49	; 0x31
   10a38:	2100      	movs	r1, #0
   10a3a:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   10a3c:	68fb      	ldr	r3, [r7, #12]
   10a3e:	2232      	movs	r2, #50	; 0x32
   10a40:	2100      	movs	r1, #0
   10a42:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   10a44:	68fb      	ldr	r3, [r7, #12]
   10a46:	2233      	movs	r2, #51	; 0x33
   10a48:	2100      	movs	r1, #0
   10a4a:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   10a4c:	68fb      	ldr	r3, [r7, #12]
   10a4e:	681b      	ldr	r3, [r3, #0]
   10a50:	2227      	movs	r2, #39	; 0x27
   10a52:	18bc      	adds	r4, r7, r2
   10a54:	0018      	movs	r0, r3
   10a56:	4b0d      	ldr	r3, [pc, #52]	; (10a8c <usart_init+0x240>)
   10a58:	4798      	blx	r3
   10a5a:	0003      	movs	r3, r0
   10a5c:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   10a5e:	4a15      	ldr	r2, [pc, #84]	; (10ab4 <usart_init+0x268>)
   10a60:	2327      	movs	r3, #39	; 0x27
   10a62:	18fb      	adds	r3, r7, r3
   10a64:	781b      	ldrb	r3, [r3, #0]
   10a66:	0011      	movs	r1, r2
   10a68:	0018      	movs	r0, r3
   10a6a:	4b13      	ldr	r3, [pc, #76]	; (10ab8 <usart_init+0x26c>)
   10a6c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   10a6e:	2327      	movs	r3, #39	; 0x27
   10a70:	18fb      	adds	r3, r7, r3
   10a72:	781a      	ldrb	r2, [r3, #0]
   10a74:	4b11      	ldr	r3, [pc, #68]	; (10abc <usart_init+0x270>)
   10a76:	0092      	lsls	r2, r2, #2
   10a78:	68f9      	ldr	r1, [r7, #12]
   10a7a:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   10a7c:	233b      	movs	r3, #59	; 0x3b
   10a7e:	18fb      	adds	r3, r7, r3
   10a80:	781b      	ldrb	r3, [r3, #0]
}
   10a82:	0018      	movs	r0, r3
   10a84:	46bd      	mov	sp, r7
   10a86:	b013      	add	sp, #76	; 0x4c
   10a88:	bd90      	pop	{r4, r7, pc}
   10a8a:	46c0      	nop			; (mov r8, r8)
   10a8c:	0000dac9 	.word	0x0000dac9
   10a90:	00010489 	.word	0x00010489
   10a94:	00010471 	.word	0x00010471
   10a98:	000137ad 	.word	0x000137ad
   10a9c:	000137f1 	.word	0x000137f1
   10aa0:	0000d881 	.word	0x0000d881
   10aa4:	00010571 	.word	0x00010571
   10aa8:	000104e5 	.word	0x000104e5
   10aac:	0000d90d 	.word	0x0000d90d
   10ab0:	00013a99 	.word	0x00013a99
   10ab4:	00010c95 	.word	0x00010c95
   10ab8:	00010fe9 	.word	0x00010fe9
   10abc:	20000908 	.word	0x20000908

00010ac0 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
   10ac0:	b580      	push	{r7, lr}
   10ac2:	b084      	sub	sp, #16
   10ac4:	af00      	add	r7, sp, #0
   10ac6:	6078      	str	r0, [r7, #4]
   10ac8:	000a      	movs	r2, r1
   10aca:	1cbb      	adds	r3, r7, #2
   10acc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   10ace:	687b      	ldr	r3, [r7, #4]
   10ad0:	681b      	ldr	r3, [r3, #0]
   10ad2:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   10ad4:	687b      	ldr	r3, [r7, #4]
   10ad6:	79db      	ldrb	r3, [r3, #7]
   10ad8:	2201      	movs	r2, #1
   10ada:	4053      	eors	r3, r2
   10adc:	b2db      	uxtb	r3, r3
   10ade:	2b00      	cmp	r3, #0
   10ae0:	d001      	beq.n	10ae6 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
   10ae2:	231c      	movs	r3, #28
   10ae4:	e017      	b.n	10b16 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
   10ae6:	687b      	ldr	r3, [r7, #4]
   10ae8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   10aea:	b29b      	uxth	r3, r3
   10aec:	2b00      	cmp	r3, #0
   10aee:	d001      	beq.n	10af4 <usart_write_wait+0x34>
		return STATUS_BUSY;
   10af0:	2305      	movs	r3, #5
   10af2:	e010      	b.n	10b16 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   10af4:	687b      	ldr	r3, [r7, #4]
   10af6:	0018      	movs	r0, r3
   10af8:	4b09      	ldr	r3, [pc, #36]	; (10b20 <usart_write_wait+0x60>)
   10afa:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
   10afc:	68fb      	ldr	r3, [r7, #12]
   10afe:	1cba      	adds	r2, r7, #2
   10b00:	8812      	ldrh	r2, [r2, #0]
   10b02:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
   10b04:	46c0      	nop			; (mov r8, r8)
   10b06:	68fb      	ldr	r3, [r7, #12]
   10b08:	7e1b      	ldrb	r3, [r3, #24]
   10b0a:	b2db      	uxtb	r3, r3
   10b0c:	001a      	movs	r2, r3
   10b0e:	2302      	movs	r3, #2
   10b10:	4013      	ands	r3, r2
   10b12:	d0f8      	beq.n	10b06 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
   10b14:	2300      	movs	r3, #0
}
   10b16:	0018      	movs	r0, r3
   10b18:	46bd      	mov	sp, r7
   10b1a:	b004      	add	sp, #16
   10b1c:	bd80      	pop	{r7, pc}
   10b1e:	46c0      	nop			; (mov r8, r8)
   10b20:	0001054d 	.word	0x0001054d

00010b24 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   10b24:	b580      	push	{r7, lr}
   10b26:	b08a      	sub	sp, #40	; 0x28
   10b28:	af00      	add	r7, sp, #0
   10b2a:	60f8      	str	r0, [r7, #12]
   10b2c:	60b9      	str	r1, [r7, #8]
   10b2e:	1dbb      	adds	r3, r7, #6
   10b30:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
   10b32:	1dbb      	adds	r3, r7, #6
   10b34:	881b      	ldrh	r3, [r3, #0]
   10b36:	2b00      	cmp	r3, #0
   10b38:	d101      	bne.n	10b3e <usart_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
   10b3a:	2317      	movs	r3, #23
   10b3c:	e07e      	b.n	10c3c <usart_write_buffer_wait+0x118>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   10b3e:	68fb      	ldr	r3, [r7, #12]
   10b40:	79db      	ldrb	r3, [r3, #7]
   10b42:	2201      	movs	r2, #1
   10b44:	4053      	eors	r3, r2
   10b46:	b2db      	uxtb	r3, r3
   10b48:	2b00      	cmp	r3, #0
   10b4a:	d001      	beq.n	10b50 <usart_write_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
   10b4c:	231c      	movs	r3, #28
   10b4e:	e075      	b.n	10c3c <usart_write_buffer_wait+0x118>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   10b50:	68fb      	ldr	r3, [r7, #12]
   10b52:	681b      	ldr	r3, [r3, #0]
   10b54:	617b      	str	r3, [r7, #20]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   10b56:	68fb      	ldr	r3, [r7, #12]
   10b58:	0018      	movs	r0, r3
   10b5a:	4b3a      	ldr	r3, [pc, #232]	; (10c44 <usart_write_buffer_wait+0x120>)
   10b5c:	4798      	blx	r3

	uint16_t tx_pos = 0;
   10b5e:	2326      	movs	r3, #38	; 0x26
   10b60:	18fb      	adds	r3, r7, r3
   10b62:	2200      	movs	r2, #0
   10b64:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being transferred */
	while (length--) {
   10b66:	e048      	b.n	10bfa <usart_write_buffer_wait+0xd6>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   10b68:	2300      	movs	r3, #0
   10b6a:	623b      	str	r3, [r7, #32]
   10b6c:	e00f      	b.n	10b8e <usart_write_buffer_wait+0x6a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
   10b6e:	697b      	ldr	r3, [r7, #20]
   10b70:	7e1b      	ldrb	r3, [r3, #24]
   10b72:	b2db      	uxtb	r3, r3
   10b74:	001a      	movs	r2, r3
   10b76:	2301      	movs	r3, #1
   10b78:	4013      	ands	r3, r2
   10b7a:	d10d      	bne.n	10b98 <usart_write_buffer_wait+0x74>
				break;
			} else if (i == USART_TIMEOUT) {
   10b7c:	6a3b      	ldr	r3, [r7, #32]
   10b7e:	4a32      	ldr	r2, [pc, #200]	; (10c48 <usart_write_buffer_wait+0x124>)
   10b80:	4293      	cmp	r3, r2
   10b82:	d101      	bne.n	10b88 <usart_write_buffer_wait+0x64>
				return STATUS_ERR_TIMEOUT;
   10b84:	2312      	movs	r3, #18
   10b86:	e059      	b.n	10c3c <usart_write_buffer_wait+0x118>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   10b88:	6a3b      	ldr	r3, [r7, #32]
   10b8a:	3301      	adds	r3, #1
   10b8c:	623b      	str	r3, [r7, #32]
   10b8e:	6a3b      	ldr	r3, [r7, #32]
   10b90:	4a2d      	ldr	r2, [pc, #180]	; (10c48 <usart_write_buffer_wait+0x124>)
   10b92:	4293      	cmp	r3, r2
   10b94:	d9eb      	bls.n	10b6e <usart_write_buffer_wait+0x4a>
   10b96:	e000      	b.n	10b9a <usart_write_buffer_wait+0x76>
				break;
   10b98:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   10b9a:	2326      	movs	r3, #38	; 0x26
   10b9c:	18fb      	adds	r3, r7, r3
   10b9e:	881b      	ldrh	r3, [r3, #0]
   10ba0:	2226      	movs	r2, #38	; 0x26
   10ba2:	18ba      	adds	r2, r7, r2
   10ba4:	1c59      	adds	r1, r3, #1
   10ba6:	8011      	strh	r1, [r2, #0]
   10ba8:	001a      	movs	r2, r3
   10baa:	68bb      	ldr	r3, [r7, #8]
   10bac:	189b      	adds	r3, r3, r2
   10bae:	781a      	ldrb	r2, [r3, #0]
   10bb0:	231e      	movs	r3, #30
   10bb2:	18fb      	adds	r3, r7, r3
   10bb4:	801a      	strh	r2, [r3, #0]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   10bb6:	68fb      	ldr	r3, [r7, #12]
   10bb8:	795b      	ldrb	r3, [r3, #5]
   10bba:	2b01      	cmp	r3, #1
   10bbc:	d115      	bne.n	10bea <usart_write_buffer_wait+0xc6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   10bbe:	2326      	movs	r3, #38	; 0x26
   10bc0:	18fb      	adds	r3, r7, r3
   10bc2:	881b      	ldrh	r3, [r3, #0]
   10bc4:	2226      	movs	r2, #38	; 0x26
   10bc6:	18ba      	adds	r2, r7, r2
   10bc8:	1c59      	adds	r1, r3, #1
   10bca:	8011      	strh	r1, [r2, #0]
   10bcc:	001a      	movs	r2, r3
   10bce:	68bb      	ldr	r3, [r7, #8]
   10bd0:	189b      	adds	r3, r3, r2
   10bd2:	781b      	ldrb	r3, [r3, #0]
   10bd4:	021b      	lsls	r3, r3, #8
   10bd6:	b21a      	sxth	r2, r3
   10bd8:	231e      	movs	r3, #30
   10bda:	18fb      	adds	r3, r7, r3
   10bdc:	2100      	movs	r1, #0
   10bde:	5e5b      	ldrsh	r3, [r3, r1]
   10be0:	4313      	orrs	r3, r2
   10be2:	b21a      	sxth	r2, r3
   10be4:	231e      	movs	r3, #30
   10be6:	18fb      	adds	r3, r7, r3
   10be8:	801a      	strh	r2, [r3, #0]
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
   10bea:	231e      	movs	r3, #30
   10bec:	18fb      	adds	r3, r7, r3
   10bee:	881a      	ldrh	r2, [r3, #0]
   10bf0:	68fb      	ldr	r3, [r7, #12]
   10bf2:	0011      	movs	r1, r2
   10bf4:	0018      	movs	r0, r3
   10bf6:	4b15      	ldr	r3, [pc, #84]	; (10c4c <usart_write_buffer_wait+0x128>)
   10bf8:	4798      	blx	r3
	while (length--) {
   10bfa:	1dbb      	adds	r3, r7, #6
   10bfc:	881b      	ldrh	r3, [r3, #0]
   10bfe:	1dba      	adds	r2, r7, #6
   10c00:	1e59      	subs	r1, r3, #1
   10c02:	8011      	strh	r1, [r2, #0]
   10c04:	2b00      	cmp	r3, #0
   10c06:	d1af      	bne.n	10b68 <usart_write_buffer_wait+0x44>
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   10c08:	2300      	movs	r3, #0
   10c0a:	61bb      	str	r3, [r7, #24]
   10c0c:	e00f      	b.n	10c2e <usart_write_buffer_wait+0x10a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
   10c0e:	697b      	ldr	r3, [r7, #20]
   10c10:	7e1b      	ldrb	r3, [r3, #24]
   10c12:	b2db      	uxtb	r3, r3
   10c14:	001a      	movs	r2, r3
   10c16:	2302      	movs	r3, #2
   10c18:	4013      	ands	r3, r2
   10c1a:	d10d      	bne.n	10c38 <usart_write_buffer_wait+0x114>
			break;
		} else if (i == USART_TIMEOUT) {
   10c1c:	69bb      	ldr	r3, [r7, #24]
   10c1e:	4a0a      	ldr	r2, [pc, #40]	; (10c48 <usart_write_buffer_wait+0x124>)
   10c20:	4293      	cmp	r3, r2
   10c22:	d101      	bne.n	10c28 <usart_write_buffer_wait+0x104>
			return STATUS_ERR_TIMEOUT;
   10c24:	2312      	movs	r3, #18
   10c26:	e009      	b.n	10c3c <usart_write_buffer_wait+0x118>
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   10c28:	69bb      	ldr	r3, [r7, #24]
   10c2a:	3301      	adds	r3, #1
   10c2c:	61bb      	str	r3, [r7, #24]
   10c2e:	69bb      	ldr	r3, [r7, #24]
   10c30:	4a05      	ldr	r2, [pc, #20]	; (10c48 <usart_write_buffer_wait+0x124>)
   10c32:	4293      	cmp	r3, r2
   10c34:	d9eb      	bls.n	10c0e <usart_write_buffer_wait+0xea>
   10c36:	e000      	b.n	10c3a <usart_write_buffer_wait+0x116>
			break;
   10c38:	46c0      	nop			; (mov r8, r8)
		}
	}

	return STATUS_OK;
   10c3a:	2300      	movs	r3, #0
}
   10c3c:	0018      	movs	r0, r3
   10c3e:	46bd      	mov	sp, r7
   10c40:	b00a      	add	sp, #40	; 0x28
   10c42:	bd80      	pop	{r7, pc}
   10c44:	0001054d 	.word	0x0001054d
   10c48:	0000ffff 	.word	0x0000ffff
   10c4c:	00010ac1 	.word	0x00010ac1

00010c50 <usart_is_syncing>:
{
   10c50:	b580      	push	{r7, lr}
   10c52:	b084      	sub	sp, #16
   10c54:	af00      	add	r7, sp, #0
   10c56:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   10c58:	687b      	ldr	r3, [r7, #4]
   10c5a:	681b      	ldr	r3, [r3, #0]
   10c5c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   10c5e:	68fb      	ldr	r3, [r7, #12]
   10c60:	69db      	ldr	r3, [r3, #28]
   10c62:	1e5a      	subs	r2, r3, #1
   10c64:	4193      	sbcs	r3, r2
   10c66:	b2db      	uxtb	r3, r3
}
   10c68:	0018      	movs	r0, r3
   10c6a:	46bd      	mov	sp, r7
   10c6c:	b004      	add	sp, #16
   10c6e:	bd80      	pop	{r7, pc}

00010c70 <_usart_wait_for_sync>:
{
   10c70:	b580      	push	{r7, lr}
   10c72:	b082      	sub	sp, #8
   10c74:	af00      	add	r7, sp, #0
   10c76:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   10c78:	46c0      	nop			; (mov r8, r8)
   10c7a:	687b      	ldr	r3, [r7, #4]
   10c7c:	0018      	movs	r0, r3
   10c7e:	4b04      	ldr	r3, [pc, #16]	; (10c90 <_usart_wait_for_sync+0x20>)
   10c80:	4798      	blx	r3
   10c82:	1e03      	subs	r3, r0, #0
   10c84:	d1f9      	bne.n	10c7a <_usart_wait_for_sync+0xa>
}
   10c86:	46c0      	nop			; (mov r8, r8)
   10c88:	46bd      	mov	sp, r7
   10c8a:	b002      	add	sp, #8
   10c8c:	bd80      	pop	{r7, pc}
   10c8e:	46c0      	nop			; (mov r8, r8)
   10c90:	00010c51 	.word	0x00010c51

00010c94 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   10c94:	b580      	push	{r7, lr}
   10c96:	b088      	sub	sp, #32
   10c98:	af00      	add	r7, sp, #0
   10c9a:	0002      	movs	r2, r0
   10c9c:	1dfb      	adds	r3, r7, #7
   10c9e:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   10ca0:	1dfb      	adds	r3, r7, #7
   10ca2:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   10ca4:	4ba3      	ldr	r3, [pc, #652]	; (10f34 <_usart_interrupt_handler+0x2a0>)
   10ca6:	0092      	lsls	r2, r2, #2
   10ca8:	58d3      	ldr	r3, [r2, r3]
   10caa:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   10cac:	69bb      	ldr	r3, [r7, #24]
   10cae:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   10cb0:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   10cb2:	69bb      	ldr	r3, [r7, #24]
   10cb4:	0018      	movs	r0, r3
   10cb6:	4ba0      	ldr	r3, [pc, #640]	; (10f38 <_usart_interrupt_handler+0x2a4>)
   10cb8:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   10cba:	697b      	ldr	r3, [r7, #20]
   10cbc:	7e1b      	ldrb	r3, [r3, #24]
   10cbe:	b2da      	uxtb	r2, r3
   10cc0:	2312      	movs	r3, #18
   10cc2:	18fb      	adds	r3, r7, r3
   10cc4:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   10cc6:	697b      	ldr	r3, [r7, #20]
   10cc8:	7d9b      	ldrb	r3, [r3, #22]
   10cca:	b2db      	uxtb	r3, r3
   10ccc:	b29a      	uxth	r2, r3
   10cce:	2312      	movs	r3, #18
   10cd0:	18fb      	adds	r3, r7, r3
   10cd2:	2112      	movs	r1, #18
   10cd4:	1879      	adds	r1, r7, r1
   10cd6:	8809      	ldrh	r1, [r1, #0]
   10cd8:	400a      	ands	r2, r1
   10cda:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   10cdc:	69bb      	ldr	r3, [r7, #24]
   10cde:	2230      	movs	r2, #48	; 0x30
   10ce0:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   10ce2:	69ba      	ldr	r2, [r7, #24]
   10ce4:	2131      	movs	r1, #49	; 0x31
   10ce6:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   10ce8:	4013      	ands	r3, r2
   10cea:	b2da      	uxtb	r2, r3
   10cec:	2310      	movs	r3, #16
   10cee:	18fb      	adds	r3, r7, r3
   10cf0:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   10cf2:	2312      	movs	r3, #18
   10cf4:	18fb      	adds	r3, r7, r3
   10cf6:	881b      	ldrh	r3, [r3, #0]
   10cf8:	2201      	movs	r2, #1
   10cfa:	4013      	ands	r3, r2
   10cfc:	d044      	beq.n	10d88 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   10cfe:	69bb      	ldr	r3, [r7, #24]
   10d00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   10d02:	b29b      	uxth	r3, r3
   10d04:	2b00      	cmp	r3, #0
   10d06:	d03c      	beq.n	10d82 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   10d08:	69bb      	ldr	r3, [r7, #24]
   10d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10d0c:	781b      	ldrb	r3, [r3, #0]
   10d0e:	b2da      	uxtb	r2, r3
   10d10:	231c      	movs	r3, #28
   10d12:	18fb      	adds	r3, r7, r3
   10d14:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   10d16:	69bb      	ldr	r3, [r7, #24]
   10d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10d1a:	1c5a      	adds	r2, r3, #1
   10d1c:	69bb      	ldr	r3, [r7, #24]
   10d1e:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   10d20:	69bb      	ldr	r3, [r7, #24]
   10d22:	795b      	ldrb	r3, [r3, #5]
   10d24:	2b01      	cmp	r3, #1
   10d26:	d113      	bne.n	10d50 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   10d28:	69bb      	ldr	r3, [r7, #24]
   10d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10d2c:	781b      	ldrb	r3, [r3, #0]
   10d2e:	b2db      	uxtb	r3, r3
   10d30:	021b      	lsls	r3, r3, #8
   10d32:	b21a      	sxth	r2, r3
   10d34:	231c      	movs	r3, #28
   10d36:	18fb      	adds	r3, r7, r3
   10d38:	2100      	movs	r1, #0
   10d3a:	5e5b      	ldrsh	r3, [r3, r1]
   10d3c:	4313      	orrs	r3, r2
   10d3e:	b21a      	sxth	r2, r3
   10d40:	231c      	movs	r3, #28
   10d42:	18fb      	adds	r3, r7, r3
   10d44:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   10d46:	69bb      	ldr	r3, [r7, #24]
   10d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10d4a:	1c5a      	adds	r2, r3, #1
   10d4c:	69bb      	ldr	r3, [r7, #24]
   10d4e:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   10d50:	231c      	movs	r3, #28
   10d52:	18fb      	adds	r3, r7, r3
   10d54:	881b      	ldrh	r3, [r3, #0]
   10d56:	05db      	lsls	r3, r3, #23
   10d58:	0ddb      	lsrs	r3, r3, #23
   10d5a:	b29a      	uxth	r2, r3
   10d5c:	697b      	ldr	r3, [r7, #20]
   10d5e:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   10d60:	69bb      	ldr	r3, [r7, #24]
   10d62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   10d64:	b29b      	uxth	r3, r3
   10d66:	3b01      	subs	r3, #1
   10d68:	b29b      	uxth	r3, r3
   10d6a:	69ba      	ldr	r2, [r7, #24]
   10d6c:	1c19      	adds	r1, r3, #0
   10d6e:	85d1      	strh	r1, [r2, #46]	; 0x2e
   10d70:	2b00      	cmp	r3, #0
   10d72:	d109      	bne.n	10d88 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   10d74:	697b      	ldr	r3, [r7, #20]
   10d76:	2201      	movs	r2, #1
   10d78:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   10d7a:	697b      	ldr	r3, [r7, #20]
   10d7c:	2202      	movs	r2, #2
   10d7e:	759a      	strb	r2, [r3, #22]
   10d80:	e002      	b.n	10d88 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   10d82:	697b      	ldr	r3, [r7, #20]
   10d84:	2201      	movs	r2, #1
   10d86:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   10d88:	2312      	movs	r3, #18
   10d8a:	18fb      	adds	r3, r7, r3
   10d8c:	881b      	ldrh	r3, [r3, #0]
   10d8e:	2202      	movs	r2, #2
   10d90:	4013      	ands	r3, r2
   10d92:	d011      	beq.n	10db8 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   10d94:	697b      	ldr	r3, [r7, #20]
   10d96:	2202      	movs	r2, #2
   10d98:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   10d9a:	69bb      	ldr	r3, [r7, #24]
   10d9c:	2233      	movs	r2, #51	; 0x33
   10d9e:	2100      	movs	r1, #0
   10da0:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   10da2:	2310      	movs	r3, #16
   10da4:	18fb      	adds	r3, r7, r3
   10da6:	881b      	ldrh	r3, [r3, #0]
   10da8:	2201      	movs	r2, #1
   10daa:	4013      	ands	r3, r2
   10dac:	d004      	beq.n	10db8 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   10dae:	69bb      	ldr	r3, [r7, #24]
   10db0:	68db      	ldr	r3, [r3, #12]
   10db2:	69ba      	ldr	r2, [r7, #24]
   10db4:	0010      	movs	r0, r2
   10db6:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   10db8:	2312      	movs	r3, #18
   10dba:	18fb      	adds	r3, r7, r3
   10dbc:	881b      	ldrh	r3, [r3, #0]
   10dbe:	2204      	movs	r2, #4
   10dc0:	4013      	ands	r3, r2
   10dc2:	d100      	bne.n	10dc6 <_usart_interrupt_handler+0x132>
   10dc4:	e0bd      	b.n	10f42 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   10dc6:	69bb      	ldr	r3, [r7, #24]
   10dc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   10dca:	b29b      	uxth	r3, r3
   10dcc:	2b00      	cmp	r3, #0
   10dce:	d100      	bne.n	10dd2 <_usart_interrupt_handler+0x13e>
   10dd0:	e0b4      	b.n	10f3c <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   10dd2:	697b      	ldr	r3, [r7, #20]
   10dd4:	8b5b      	ldrh	r3, [r3, #26]
   10dd6:	b29b      	uxth	r3, r3
   10dd8:	b2da      	uxtb	r2, r3
   10dda:	231f      	movs	r3, #31
   10ddc:	18fb      	adds	r3, r7, r3
   10dde:	213f      	movs	r1, #63	; 0x3f
   10de0:	400a      	ands	r2, r1
   10de2:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   10de4:	231f      	movs	r3, #31
   10de6:	18fb      	adds	r3, r7, r3
   10de8:	781b      	ldrb	r3, [r3, #0]
   10dea:	2208      	movs	r2, #8
   10dec:	4013      	ands	r3, r2
   10dee:	d007      	beq.n	10e00 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   10df0:	231f      	movs	r3, #31
   10df2:	18fb      	adds	r3, r7, r3
   10df4:	221f      	movs	r2, #31
   10df6:	18ba      	adds	r2, r7, r2
   10df8:	7812      	ldrb	r2, [r2, #0]
   10dfa:	2108      	movs	r1, #8
   10dfc:	438a      	bics	r2, r1
   10dfe:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   10e00:	231f      	movs	r3, #31
   10e02:	18fb      	adds	r3, r7, r3
   10e04:	781b      	ldrb	r3, [r3, #0]
   10e06:	2b00      	cmp	r3, #0
   10e08:	d050      	beq.n	10eac <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   10e0a:	231f      	movs	r3, #31
   10e0c:	18fb      	adds	r3, r7, r3
   10e0e:	781b      	ldrb	r3, [r3, #0]
   10e10:	2202      	movs	r2, #2
   10e12:	4013      	ands	r3, r2
   10e14:	d007      	beq.n	10e26 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   10e16:	69bb      	ldr	r3, [r7, #24]
   10e18:	2232      	movs	r2, #50	; 0x32
   10e1a:	211a      	movs	r1, #26
   10e1c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   10e1e:	697b      	ldr	r3, [r7, #20]
   10e20:	2202      	movs	r2, #2
   10e22:	835a      	strh	r2, [r3, #26]
   10e24:	e036      	b.n	10e94 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   10e26:	231f      	movs	r3, #31
   10e28:	18fb      	adds	r3, r7, r3
   10e2a:	781b      	ldrb	r3, [r3, #0]
   10e2c:	2204      	movs	r2, #4
   10e2e:	4013      	ands	r3, r2
   10e30:	d007      	beq.n	10e42 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   10e32:	69bb      	ldr	r3, [r7, #24]
   10e34:	2232      	movs	r2, #50	; 0x32
   10e36:	211e      	movs	r1, #30
   10e38:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   10e3a:	697b      	ldr	r3, [r7, #20]
   10e3c:	2204      	movs	r2, #4
   10e3e:	835a      	strh	r2, [r3, #26]
   10e40:	e028      	b.n	10e94 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   10e42:	231f      	movs	r3, #31
   10e44:	18fb      	adds	r3, r7, r3
   10e46:	781b      	ldrb	r3, [r3, #0]
   10e48:	2201      	movs	r2, #1
   10e4a:	4013      	ands	r3, r2
   10e4c:	d007      	beq.n	10e5e <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   10e4e:	69bb      	ldr	r3, [r7, #24]
   10e50:	2232      	movs	r2, #50	; 0x32
   10e52:	2113      	movs	r1, #19
   10e54:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   10e56:	697b      	ldr	r3, [r7, #20]
   10e58:	2201      	movs	r2, #1
   10e5a:	835a      	strh	r2, [r3, #26]
   10e5c:	e01a      	b.n	10e94 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   10e5e:	231f      	movs	r3, #31
   10e60:	18fb      	adds	r3, r7, r3
   10e62:	781b      	ldrb	r3, [r3, #0]
   10e64:	2210      	movs	r2, #16
   10e66:	4013      	ands	r3, r2
   10e68:	d007      	beq.n	10e7a <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   10e6a:	69bb      	ldr	r3, [r7, #24]
   10e6c:	2232      	movs	r2, #50	; 0x32
   10e6e:	2142      	movs	r1, #66	; 0x42
   10e70:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   10e72:	697b      	ldr	r3, [r7, #20]
   10e74:	2210      	movs	r2, #16
   10e76:	835a      	strh	r2, [r3, #26]
   10e78:	e00c      	b.n	10e94 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   10e7a:	231f      	movs	r3, #31
   10e7c:	18fb      	adds	r3, r7, r3
   10e7e:	781b      	ldrb	r3, [r3, #0]
   10e80:	2220      	movs	r2, #32
   10e82:	4013      	ands	r3, r2
   10e84:	d006      	beq.n	10e94 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   10e86:	69bb      	ldr	r3, [r7, #24]
   10e88:	2232      	movs	r2, #50	; 0x32
   10e8a:	2141      	movs	r1, #65	; 0x41
   10e8c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   10e8e:	697b      	ldr	r3, [r7, #20]
   10e90:	2220      	movs	r2, #32
   10e92:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   10e94:	2310      	movs	r3, #16
   10e96:	18fb      	adds	r3, r7, r3
   10e98:	881b      	ldrh	r3, [r3, #0]
   10e9a:	2204      	movs	r2, #4
   10e9c:	4013      	ands	r3, r2
				if (callback_status
   10e9e:	d050      	beq.n	10f42 <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   10ea0:	69bb      	ldr	r3, [r7, #24]
   10ea2:	695b      	ldr	r3, [r3, #20]
   10ea4:	69ba      	ldr	r2, [r7, #24]
   10ea6:	0010      	movs	r0, r2
   10ea8:	4798      	blx	r3
   10eaa:	e04a      	b.n	10f42 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   10eac:	697b      	ldr	r3, [r7, #20]
   10eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   10eb0:	b29a      	uxth	r2, r3
   10eb2:	230e      	movs	r3, #14
   10eb4:	18fb      	adds	r3, r7, r3
   10eb6:	05d2      	lsls	r2, r2, #23
   10eb8:	0dd2      	lsrs	r2, r2, #23
   10eba:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   10ebc:	69bb      	ldr	r3, [r7, #24]
   10ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10ec0:	220e      	movs	r2, #14
   10ec2:	18ba      	adds	r2, r7, r2
   10ec4:	8812      	ldrh	r2, [r2, #0]
   10ec6:	b2d2      	uxtb	r2, r2
   10ec8:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   10eca:	69bb      	ldr	r3, [r7, #24]
   10ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10ece:	1c5a      	adds	r2, r3, #1
   10ed0:	69bb      	ldr	r3, [r7, #24]
   10ed2:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   10ed4:	69bb      	ldr	r3, [r7, #24]
   10ed6:	795b      	ldrb	r3, [r3, #5]
   10ed8:	2b01      	cmp	r3, #1
   10eda:	d10d      	bne.n	10ef8 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   10edc:	69bb      	ldr	r3, [r7, #24]
   10ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10ee0:	220e      	movs	r2, #14
   10ee2:	18ba      	adds	r2, r7, r2
   10ee4:	8812      	ldrh	r2, [r2, #0]
   10ee6:	0a12      	lsrs	r2, r2, #8
   10ee8:	b292      	uxth	r2, r2
   10eea:	b2d2      	uxtb	r2, r2
   10eec:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   10eee:	69bb      	ldr	r3, [r7, #24]
   10ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10ef2:	1c5a      	adds	r2, r3, #1
   10ef4:	69bb      	ldr	r3, [r7, #24]
   10ef6:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   10ef8:	69bb      	ldr	r3, [r7, #24]
   10efa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   10efc:	b29b      	uxth	r3, r3
   10efe:	3b01      	subs	r3, #1
   10f00:	b29b      	uxth	r3, r3
   10f02:	69ba      	ldr	r2, [r7, #24]
   10f04:	1c19      	adds	r1, r3, #0
   10f06:	8591      	strh	r1, [r2, #44]	; 0x2c
   10f08:	2b00      	cmp	r3, #0
   10f0a:	d11a      	bne.n	10f42 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   10f0c:	697b      	ldr	r3, [r7, #20]
   10f0e:	2204      	movs	r2, #4
   10f10:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   10f12:	69bb      	ldr	r3, [r7, #24]
   10f14:	2232      	movs	r2, #50	; 0x32
   10f16:	2100      	movs	r1, #0
   10f18:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   10f1a:	2310      	movs	r3, #16
   10f1c:	18fb      	adds	r3, r7, r3
   10f1e:	881b      	ldrh	r3, [r3, #0]
   10f20:	2202      	movs	r2, #2
   10f22:	4013      	ands	r3, r2
					if (callback_status
   10f24:	d00d      	beq.n	10f42 <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   10f26:	69bb      	ldr	r3, [r7, #24]
   10f28:	691b      	ldr	r3, [r3, #16]
   10f2a:	69ba      	ldr	r2, [r7, #24]
   10f2c:	0010      	movs	r0, r2
   10f2e:	4798      	blx	r3
   10f30:	e007      	b.n	10f42 <_usart_interrupt_handler+0x2ae>
   10f32:	46c0      	nop			; (mov r8, r8)
   10f34:	20000908 	.word	0x20000908
   10f38:	00010c71 	.word	0x00010c71
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   10f3c:	697b      	ldr	r3, [r7, #20]
   10f3e:	2204      	movs	r2, #4
   10f40:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   10f42:	2312      	movs	r3, #18
   10f44:	18fb      	adds	r3, r7, r3
   10f46:	881b      	ldrh	r3, [r3, #0]
   10f48:	2210      	movs	r2, #16
   10f4a:	4013      	ands	r3, r2
   10f4c:	d010      	beq.n	10f70 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   10f4e:	697b      	ldr	r3, [r7, #20]
   10f50:	2210      	movs	r2, #16
   10f52:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   10f54:	697b      	ldr	r3, [r7, #20]
   10f56:	2210      	movs	r2, #16
   10f58:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   10f5a:	2310      	movs	r3, #16
   10f5c:	18fb      	adds	r3, r7, r3
   10f5e:	881b      	ldrh	r3, [r3, #0]
   10f60:	2210      	movs	r2, #16
   10f62:	4013      	ands	r3, r2
   10f64:	d004      	beq.n	10f70 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   10f66:	69bb      	ldr	r3, [r7, #24]
   10f68:	69db      	ldr	r3, [r3, #28]
   10f6a:	69ba      	ldr	r2, [r7, #24]
   10f6c:	0010      	movs	r0, r2
   10f6e:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   10f70:	2312      	movs	r3, #18
   10f72:	18fb      	adds	r3, r7, r3
   10f74:	881b      	ldrh	r3, [r3, #0]
   10f76:	2220      	movs	r2, #32
   10f78:	4013      	ands	r3, r2
   10f7a:	d010      	beq.n	10f9e <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   10f7c:	697b      	ldr	r3, [r7, #20]
   10f7e:	2220      	movs	r2, #32
   10f80:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   10f82:	697b      	ldr	r3, [r7, #20]
   10f84:	2220      	movs	r2, #32
   10f86:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   10f88:	2310      	movs	r3, #16
   10f8a:	18fb      	adds	r3, r7, r3
   10f8c:	881b      	ldrh	r3, [r3, #0]
   10f8e:	2208      	movs	r2, #8
   10f90:	4013      	ands	r3, r2
   10f92:	d004      	beq.n	10f9e <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   10f94:	69bb      	ldr	r3, [r7, #24]
   10f96:	699b      	ldr	r3, [r3, #24]
   10f98:	69ba      	ldr	r2, [r7, #24]
   10f9a:	0010      	movs	r0, r2
   10f9c:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   10f9e:	2312      	movs	r3, #18
   10fa0:	18fb      	adds	r3, r7, r3
   10fa2:	881b      	ldrh	r3, [r3, #0]
   10fa4:	2208      	movs	r2, #8
   10fa6:	4013      	ands	r3, r2
   10fa8:	d010      	beq.n	10fcc <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   10faa:	697b      	ldr	r3, [r7, #20]
   10fac:	2208      	movs	r2, #8
   10fae:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   10fb0:	697b      	ldr	r3, [r7, #20]
   10fb2:	2208      	movs	r2, #8
   10fb4:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   10fb6:	2310      	movs	r3, #16
   10fb8:	18fb      	adds	r3, r7, r3
   10fba:	881b      	ldrh	r3, [r3, #0]
   10fbc:	2220      	movs	r2, #32
   10fbe:	4013      	ands	r3, r2
   10fc0:	d004      	beq.n	10fcc <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   10fc2:	69bb      	ldr	r3, [r7, #24]
   10fc4:	6a1b      	ldr	r3, [r3, #32]
   10fc6:	69ba      	ldr	r2, [r7, #24]
   10fc8:	0010      	movs	r0, r2
   10fca:	4798      	blx	r3
		}
	}
#endif
}
   10fcc:	46c0      	nop			; (mov r8, r8)
   10fce:	46bd      	mov	sp, r7
   10fd0:	b008      	add	sp, #32
   10fd2:	bd80      	pop	{r7, pc}

00010fd4 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   10fd4:	b580      	push	{r7, lr}
   10fd6:	b082      	sub	sp, #8
   10fd8:	af00      	add	r7, sp, #0
   10fda:	0002      	movs	r2, r0
   10fdc:	1dfb      	adds	r3, r7, #7
   10fde:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   10fe0:	46c0      	nop			; (mov r8, r8)
   10fe2:	46bd      	mov	sp, r7
   10fe4:	b002      	add	sp, #8
   10fe6:	bd80      	pop	{r7, pc}

00010fe8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   10fe8:	b580      	push	{r7, lr}
   10fea:	b084      	sub	sp, #16
   10fec:	af00      	add	r7, sp, #0
   10fee:	0002      	movs	r2, r0
   10ff0:	6039      	str	r1, [r7, #0]
   10ff2:	1dfb      	adds	r3, r7, #7
   10ff4:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   10ff6:	4b13      	ldr	r3, [pc, #76]	; (11044 <_sercom_set_handler+0x5c>)
   10ff8:	781b      	ldrb	r3, [r3, #0]
   10ffa:	2201      	movs	r2, #1
   10ffc:	4053      	eors	r3, r2
   10ffe:	b2db      	uxtb	r3, r3
   11000:	2b00      	cmp	r3, #0
   11002:	d015      	beq.n	11030 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   11004:	2300      	movs	r3, #0
   11006:	60fb      	str	r3, [r7, #12]
   11008:	e00c      	b.n	11024 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   1100a:	4b0f      	ldr	r3, [pc, #60]	; (11048 <_sercom_set_handler+0x60>)
   1100c:	68fa      	ldr	r2, [r7, #12]
   1100e:	0092      	lsls	r2, r2, #2
   11010:	490e      	ldr	r1, [pc, #56]	; (1104c <_sercom_set_handler+0x64>)
   11012:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   11014:	4b0e      	ldr	r3, [pc, #56]	; (11050 <_sercom_set_handler+0x68>)
   11016:	68fa      	ldr	r2, [r7, #12]
   11018:	0092      	lsls	r2, r2, #2
   1101a:	2100      	movs	r1, #0
   1101c:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1101e:	68fb      	ldr	r3, [r7, #12]
   11020:	3301      	adds	r3, #1
   11022:	60fb      	str	r3, [r7, #12]
   11024:	68fb      	ldr	r3, [r7, #12]
   11026:	2b05      	cmp	r3, #5
   11028:	d9ef      	bls.n	1100a <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   1102a:	4b06      	ldr	r3, [pc, #24]	; (11044 <_sercom_set_handler+0x5c>)
   1102c:	2201      	movs	r2, #1
   1102e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   11030:	1dfb      	adds	r3, r7, #7
   11032:	781a      	ldrb	r2, [r3, #0]
   11034:	4b04      	ldr	r3, [pc, #16]	; (11048 <_sercom_set_handler+0x60>)
   11036:	0092      	lsls	r2, r2, #2
   11038:	6839      	ldr	r1, [r7, #0]
   1103a:	50d1      	str	r1, [r2, r3]
}
   1103c:	46c0      	nop			; (mov r8, r8)
   1103e:	46bd      	mov	sp, r7
   11040:	b004      	add	sp, #16
   11042:	bd80      	pop	{r7, pc}
   11044:	200003e8 	.word	0x200003e8
   11048:	200003ec 	.word	0x200003ec
   1104c:	00010fd5 	.word	0x00010fd5
   11050:	20000908 	.word	0x20000908

00011054 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   11054:	b590      	push	{r4, r7, lr}
   11056:	b085      	sub	sp, #20
   11058:	af00      	add	r7, sp, #0
   1105a:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   1105c:	2308      	movs	r3, #8
   1105e:	18fb      	adds	r3, r7, r3
   11060:	4a0b      	ldr	r2, [pc, #44]	; (11090 <_sercom_get_interrupt_vector+0x3c>)
   11062:	6811      	ldr	r1, [r2, #0]
   11064:	6019      	str	r1, [r3, #0]
   11066:	8892      	ldrh	r2, [r2, #4]
   11068:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   1106a:	230f      	movs	r3, #15
   1106c:	18fc      	adds	r4, r7, r3
   1106e:	687b      	ldr	r3, [r7, #4]
   11070:	0018      	movs	r0, r3
   11072:	4b08      	ldr	r3, [pc, #32]	; (11094 <_sercom_get_interrupt_vector+0x40>)
   11074:	4798      	blx	r3
   11076:	0003      	movs	r3, r0
   11078:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   1107a:	230f      	movs	r3, #15
   1107c:	18fb      	adds	r3, r7, r3
   1107e:	781b      	ldrb	r3, [r3, #0]
   11080:	2208      	movs	r2, #8
   11082:	18ba      	adds	r2, r7, r2
   11084:	5cd3      	ldrb	r3, [r2, r3]
   11086:	b25b      	sxtb	r3, r3
}
   11088:	0018      	movs	r0, r3
   1108a:	46bd      	mov	sp, r7
   1108c:	b005      	add	sp, #20
   1108e:	bd90      	pop	{r4, r7, pc}
   11090:	00019748 	.word	0x00019748
   11094:	0000dac9 	.word	0x0000dac9

00011098 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   11098:	b580      	push	{r7, lr}
   1109a:	af00      	add	r7, sp, #0
   1109c:	4b03      	ldr	r3, [pc, #12]	; (110ac <SERCOM0_Handler+0x14>)
   1109e:	681b      	ldr	r3, [r3, #0]
   110a0:	2000      	movs	r0, #0
   110a2:	4798      	blx	r3
   110a4:	46c0      	nop			; (mov r8, r8)
   110a6:	46bd      	mov	sp, r7
   110a8:	bd80      	pop	{r7, pc}
   110aa:	46c0      	nop			; (mov r8, r8)
   110ac:	200003ec 	.word	0x200003ec

000110b0 <SERCOM1_Handler>:
   110b0:	b580      	push	{r7, lr}
   110b2:	af00      	add	r7, sp, #0
   110b4:	4b03      	ldr	r3, [pc, #12]	; (110c4 <SERCOM1_Handler+0x14>)
   110b6:	685b      	ldr	r3, [r3, #4]
   110b8:	2001      	movs	r0, #1
   110ba:	4798      	blx	r3
   110bc:	46c0      	nop			; (mov r8, r8)
   110be:	46bd      	mov	sp, r7
   110c0:	bd80      	pop	{r7, pc}
   110c2:	46c0      	nop			; (mov r8, r8)
   110c4:	200003ec 	.word	0x200003ec

000110c8 <SERCOM2_Handler>:
   110c8:	b580      	push	{r7, lr}
   110ca:	af00      	add	r7, sp, #0
   110cc:	4b03      	ldr	r3, [pc, #12]	; (110dc <SERCOM2_Handler+0x14>)
   110ce:	689b      	ldr	r3, [r3, #8]
   110d0:	2002      	movs	r0, #2
   110d2:	4798      	blx	r3
   110d4:	46c0      	nop			; (mov r8, r8)
   110d6:	46bd      	mov	sp, r7
   110d8:	bd80      	pop	{r7, pc}
   110da:	46c0      	nop			; (mov r8, r8)
   110dc:	200003ec 	.word	0x200003ec

000110e0 <SERCOM3_Handler>:
   110e0:	b580      	push	{r7, lr}
   110e2:	af00      	add	r7, sp, #0
   110e4:	4b03      	ldr	r3, [pc, #12]	; (110f4 <SERCOM3_Handler+0x14>)
   110e6:	68db      	ldr	r3, [r3, #12]
   110e8:	2003      	movs	r0, #3
   110ea:	4798      	blx	r3
   110ec:	46c0      	nop			; (mov r8, r8)
   110ee:	46bd      	mov	sp, r7
   110f0:	bd80      	pop	{r7, pc}
   110f2:	46c0      	nop			; (mov r8, r8)
   110f4:	200003ec 	.word	0x200003ec

000110f8 <SERCOM4_Handler>:
   110f8:	b580      	push	{r7, lr}
   110fa:	af00      	add	r7, sp, #0
   110fc:	4b03      	ldr	r3, [pc, #12]	; (1110c <SERCOM4_Handler+0x14>)
   110fe:	691b      	ldr	r3, [r3, #16]
   11100:	2004      	movs	r0, #4
   11102:	4798      	blx	r3
   11104:	46c0      	nop			; (mov r8, r8)
   11106:	46bd      	mov	sp, r7
   11108:	bd80      	pop	{r7, pc}
   1110a:	46c0      	nop			; (mov r8, r8)
   1110c:	200003ec 	.word	0x200003ec

00011110 <SERCOM5_Handler>:
   11110:	b580      	push	{r7, lr}
   11112:	af00      	add	r7, sp, #0
   11114:	4b03      	ldr	r3, [pc, #12]	; (11124 <SERCOM5_Handler+0x14>)
   11116:	695b      	ldr	r3, [r3, #20]
   11118:	2005      	movs	r0, #5
   1111a:	4798      	blx	r3
   1111c:	46c0      	nop			; (mov r8, r8)
   1111e:	46bd      	mov	sp, r7
   11120:	bd80      	pop	{r7, pc}
   11122:	46c0      	nop			; (mov r8, r8)
   11124:	200003ec 	.word	0x200003ec

00011128 <_extint_get_eic_from_channel>:
{
   11128:	b580      	push	{r7, lr}
   1112a:	b084      	sub	sp, #16
   1112c:	af00      	add	r7, sp, #0
   1112e:	0002      	movs	r2, r0
   11130:	1dfb      	adds	r3, r7, #7
   11132:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   11134:	230f      	movs	r3, #15
   11136:	18fb      	adds	r3, r7, r3
   11138:	1dfa      	adds	r2, r7, #7
   1113a:	7812      	ldrb	r2, [r2, #0]
   1113c:	0952      	lsrs	r2, r2, #5
   1113e:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   11140:	230f      	movs	r3, #15
   11142:	18fb      	adds	r3, r7, r3
   11144:	781b      	ldrb	r3, [r3, #0]
   11146:	2b00      	cmp	r3, #0
   11148:	d10c      	bne.n	11164 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1114a:	4b09      	ldr	r3, [pc, #36]	; (11170 <_extint_get_eic_from_channel+0x48>)
   1114c:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   1114e:	230f      	movs	r3, #15
   11150:	18fb      	adds	r3, r7, r3
   11152:	781b      	ldrb	r3, [r3, #0]
   11154:	009b      	lsls	r3, r3, #2
   11156:	2210      	movs	r2, #16
   11158:	4694      	mov	ip, r2
   1115a:	44bc      	add	ip, r7
   1115c:	4463      	add	r3, ip
   1115e:	3b08      	subs	r3, #8
   11160:	681b      	ldr	r3, [r3, #0]
   11162:	e000      	b.n	11166 <_extint_get_eic_from_channel+0x3e>
		return NULL;
   11164:	2300      	movs	r3, #0
}
   11166:	0018      	movs	r0, r3
   11168:	46bd      	mov	sp, r7
   1116a:	b004      	add	sp, #16
   1116c:	bd80      	pop	{r7, pc}
   1116e:	46c0      	nop			; (mov r8, r8)
   11170:	40001800 	.word	0x40001800

00011174 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   11174:	b580      	push	{r7, lr}
   11176:	b084      	sub	sp, #16
   11178:	af00      	add	r7, sp, #0
   1117a:	0002      	movs	r2, r0
   1117c:	1dfb      	adds	r3, r7, #7
   1117e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   11180:	1dfb      	adds	r3, r7, #7
   11182:	781b      	ldrb	r3, [r3, #0]
   11184:	0018      	movs	r0, r3
   11186:	4b0b      	ldr	r3, [pc, #44]	; (111b4 <extint_chan_is_detected+0x40>)
   11188:	4798      	blx	r3
   1118a:	0003      	movs	r3, r0
   1118c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   1118e:	1dfb      	adds	r3, r7, #7
   11190:	781b      	ldrb	r3, [r3, #0]
   11192:	221f      	movs	r2, #31
   11194:	4013      	ands	r3, r2
   11196:	2201      	movs	r2, #1
   11198:	409a      	lsls	r2, r3
   1119a:	0013      	movs	r3, r2
   1119c:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   1119e:	68fb      	ldr	r3, [r7, #12]
   111a0:	691b      	ldr	r3, [r3, #16]
   111a2:	68ba      	ldr	r2, [r7, #8]
   111a4:	4013      	ands	r3, r2
   111a6:	1e5a      	subs	r2, r3, #1
   111a8:	4193      	sbcs	r3, r2
   111aa:	b2db      	uxtb	r3, r3
}
   111ac:	0018      	movs	r0, r3
   111ae:	46bd      	mov	sp, r7
   111b0:	b004      	add	sp, #16
   111b2:	bd80      	pop	{r7, pc}
   111b4:	00011129 	.word	0x00011129

000111b8 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   111b8:	b580      	push	{r7, lr}
   111ba:	b084      	sub	sp, #16
   111bc:	af00      	add	r7, sp, #0
   111be:	0002      	movs	r2, r0
   111c0:	1dfb      	adds	r3, r7, #7
   111c2:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   111c4:	1dfb      	adds	r3, r7, #7
   111c6:	781b      	ldrb	r3, [r3, #0]
   111c8:	0018      	movs	r0, r3
   111ca:	4b09      	ldr	r3, [pc, #36]	; (111f0 <extint_chan_clear_detected+0x38>)
   111cc:	4798      	blx	r3
   111ce:	0003      	movs	r3, r0
   111d0:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   111d2:	1dfb      	adds	r3, r7, #7
   111d4:	781b      	ldrb	r3, [r3, #0]
   111d6:	221f      	movs	r2, #31
   111d8:	4013      	ands	r3, r2
   111da:	2201      	movs	r2, #1
   111dc:	409a      	lsls	r2, r3
   111de:	0013      	movs	r3, r2
   111e0:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   111e2:	68fb      	ldr	r3, [r7, #12]
   111e4:	68ba      	ldr	r2, [r7, #8]
   111e6:	611a      	str	r2, [r3, #16]
}
   111e8:	46c0      	nop			; (mov r8, r8)
   111ea:	46bd      	mov	sp, r7
   111ec:	b004      	add	sp, #16
   111ee:	bd80      	pop	{r7, pc}
   111f0:	00011129 	.word	0x00011129

000111f4 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   111f4:	b580      	push	{r7, lr}
   111f6:	b082      	sub	sp, #8
   111f8:	af00      	add	r7, sp, #0
   111fa:	6078      	str	r0, [r7, #4]
   111fc:	0008      	movs	r0, r1
   111fe:	0011      	movs	r1, r2
   11200:	1cfb      	adds	r3, r7, #3
   11202:	1c02      	adds	r2, r0, #0
   11204:	701a      	strb	r2, [r3, #0]
   11206:	1cbb      	adds	r3, r7, #2
   11208:	1c0a      	adds	r2, r1, #0
   1120a:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   1120c:	1cbb      	adds	r3, r7, #2
   1120e:	781b      	ldrb	r3, [r3, #0]
   11210:	2b00      	cmp	r3, #0
   11212:	d001      	beq.n	11218 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   11214:	2317      	movs	r3, #23
   11216:	e019      	b.n	1124c <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   11218:	1cfb      	adds	r3, r7, #3
   1121a:	781a      	ldrb	r2, [r3, #0]
   1121c:	4b0d      	ldr	r3, [pc, #52]	; (11254 <extint_register_callback+0x60>)
   1121e:	0092      	lsls	r2, r2, #2
   11220:	58d3      	ldr	r3, [r2, r3]
   11222:	2b00      	cmp	r3, #0
   11224:	d107      	bne.n	11236 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   11226:	1cfb      	adds	r3, r7, #3
   11228:	781a      	ldrb	r2, [r3, #0]
   1122a:	4b0a      	ldr	r3, [pc, #40]	; (11254 <extint_register_callback+0x60>)
   1122c:	0092      	lsls	r2, r2, #2
   1122e:	6879      	ldr	r1, [r7, #4]
   11230:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   11232:	2300      	movs	r3, #0
   11234:	e00a      	b.n	1124c <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   11236:	1cfb      	adds	r3, r7, #3
   11238:	781a      	ldrb	r2, [r3, #0]
   1123a:	4b06      	ldr	r3, [pc, #24]	; (11254 <extint_register_callback+0x60>)
   1123c:	0092      	lsls	r2, r2, #2
   1123e:	58d2      	ldr	r2, [r2, r3]
   11240:	687b      	ldr	r3, [r7, #4]
   11242:	429a      	cmp	r2, r3
   11244:	d101      	bne.n	1124a <extint_register_callback+0x56>
		return STATUS_OK;
   11246:	2300      	movs	r3, #0
   11248:	e000      	b.n	1124c <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   1124a:	231d      	movs	r3, #29
}
   1124c:	0018      	movs	r0, r3
   1124e:	46bd      	mov	sp, r7
   11250:	b002      	add	sp, #8
   11252:	bd80      	pop	{r7, pc}
   11254:	200008a0 	.word	0x200008a0

00011258 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   11258:	b580      	push	{r7, lr}
   1125a:	b084      	sub	sp, #16
   1125c:	af00      	add	r7, sp, #0
   1125e:	0002      	movs	r2, r0
   11260:	1dfb      	adds	r3, r7, #7
   11262:	701a      	strb	r2, [r3, #0]
   11264:	1dbb      	adds	r3, r7, #6
   11266:	1c0a      	adds	r2, r1, #0
   11268:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   1126a:	1dbb      	adds	r3, r7, #6
   1126c:	781b      	ldrb	r3, [r3, #0]
   1126e:	2b00      	cmp	r3, #0
   11270:	d10e      	bne.n	11290 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   11272:	1dfb      	adds	r3, r7, #7
   11274:	781b      	ldrb	r3, [r3, #0]
   11276:	0018      	movs	r0, r3
   11278:	4b08      	ldr	r3, [pc, #32]	; (1129c <extint_chan_enable_callback+0x44>)
   1127a:	4798      	blx	r3
   1127c:	0003      	movs	r3, r0
   1127e:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   11280:	1dfb      	adds	r3, r7, #7
   11282:	781b      	ldrb	r3, [r3, #0]
   11284:	2201      	movs	r2, #1
   11286:	409a      	lsls	r2, r3
   11288:	68fb      	ldr	r3, [r7, #12]
   1128a:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   1128c:	2300      	movs	r3, #0
   1128e:	e000      	b.n	11292 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   11290:	2317      	movs	r3, #23
}
   11292:	0018      	movs	r0, r3
   11294:	46bd      	mov	sp, r7
   11296:	b004      	add	sp, #16
   11298:	bd80      	pop	{r7, pc}
   1129a:	46c0      	nop			; (mov r8, r8)
   1129c:	00011129 	.word	0x00011129

000112a0 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   112a0:	b580      	push	{r7, lr}
   112a2:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   112a4:	4b15      	ldr	r3, [pc, #84]	; (112fc <EIC_Handler+0x5c>)
   112a6:	2200      	movs	r2, #0
   112a8:	701a      	strb	r2, [r3, #0]
   112aa:	e020      	b.n	112ee <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   112ac:	4b13      	ldr	r3, [pc, #76]	; (112fc <EIC_Handler+0x5c>)
   112ae:	781b      	ldrb	r3, [r3, #0]
   112b0:	0018      	movs	r0, r3
   112b2:	4b13      	ldr	r3, [pc, #76]	; (11300 <EIC_Handler+0x60>)
   112b4:	4798      	blx	r3
   112b6:	1e03      	subs	r3, r0, #0
   112b8:	d013      	beq.n	112e2 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   112ba:	4b10      	ldr	r3, [pc, #64]	; (112fc <EIC_Handler+0x5c>)
   112bc:	781b      	ldrb	r3, [r3, #0]
   112be:	0018      	movs	r0, r3
   112c0:	4b10      	ldr	r3, [pc, #64]	; (11304 <EIC_Handler+0x64>)
   112c2:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   112c4:	4b0d      	ldr	r3, [pc, #52]	; (112fc <EIC_Handler+0x5c>)
   112c6:	781b      	ldrb	r3, [r3, #0]
   112c8:	001a      	movs	r2, r3
   112ca:	4b0f      	ldr	r3, [pc, #60]	; (11308 <EIC_Handler+0x68>)
   112cc:	0092      	lsls	r2, r2, #2
   112ce:	58d3      	ldr	r3, [r2, r3]
   112d0:	2b00      	cmp	r3, #0
   112d2:	d006      	beq.n	112e2 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   112d4:	4b09      	ldr	r3, [pc, #36]	; (112fc <EIC_Handler+0x5c>)
   112d6:	781b      	ldrb	r3, [r3, #0]
   112d8:	001a      	movs	r2, r3
   112da:	4b0b      	ldr	r3, [pc, #44]	; (11308 <EIC_Handler+0x68>)
   112dc:	0092      	lsls	r2, r2, #2
   112de:	58d3      	ldr	r3, [r2, r3]
   112e0:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   112e2:	4b06      	ldr	r3, [pc, #24]	; (112fc <EIC_Handler+0x5c>)
   112e4:	781b      	ldrb	r3, [r3, #0]
   112e6:	3301      	adds	r3, #1
   112e8:	b2da      	uxtb	r2, r3
   112ea:	4b04      	ldr	r3, [pc, #16]	; (112fc <EIC_Handler+0x5c>)
   112ec:	701a      	strb	r2, [r3, #0]
   112ee:	4b03      	ldr	r3, [pc, #12]	; (112fc <EIC_Handler+0x5c>)
   112f0:	781b      	ldrb	r3, [r3, #0]
   112f2:	2b0f      	cmp	r3, #15
   112f4:	d9da      	bls.n	112ac <EIC_Handler+0xc>
			}
		}
	}
}
   112f6:	46c0      	nop			; (mov r8, r8)
   112f8:	46bd      	mov	sp, r7
   112fa:	bd80      	pop	{r7, pc}
   112fc:	20000920 	.word	0x20000920
   11300:	00011175 	.word	0x00011175
   11304:	000111b9 	.word	0x000111b9
   11308:	200008a0 	.word	0x200008a0

0001130c <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   1130c:	b580      	push	{r7, lr}
   1130e:	b082      	sub	sp, #8
   11310:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   11312:	4b15      	ldr	r3, [pc, #84]	; (11368 <EVSYS_Handler+0x5c>)
   11314:	691b      	ldr	r3, [r3, #16]
   11316:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   11318:	4b14      	ldr	r3, [pc, #80]	; (1136c <EVSYS_Handler+0x60>)
   1131a:	699b      	ldr	r3, [r3, #24]
   1131c:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   1131e:	4b12      	ldr	r3, [pc, #72]	; (11368 <EVSYS_Handler+0x5c>)
   11320:	689a      	ldr	r2, [r3, #8]
   11322:	683b      	ldr	r3, [r7, #0]
   11324:	431a      	orrs	r2, r3
   11326:	4b10      	ldr	r3, [pc, #64]	; (11368 <EVSYS_Handler+0x5c>)
   11328:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   1132a:	4b10      	ldr	r3, [pc, #64]	; (1136c <EVSYS_Handler+0x60>)
   1132c:	4a10      	ldr	r2, [pc, #64]	; (11370 <EVSYS_Handler+0x64>)
   1132e:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   11330:	e008      	b.n	11344 <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   11332:	687b      	ldr	r3, [r7, #4]
   11334:	685a      	ldr	r2, [r3, #4]
   11336:	687b      	ldr	r3, [r7, #4]
   11338:	681b      	ldr	r3, [r3, #0]
   1133a:	0018      	movs	r0, r3
   1133c:	4790      	blx	r2
		current_hook = current_hook->next;
   1133e:	687b      	ldr	r3, [r7, #4]
   11340:	689b      	ldr	r3, [r3, #8]
   11342:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   11344:	687b      	ldr	r3, [r7, #4]
   11346:	2b00      	cmp	r3, #0
   11348:	d1f3      	bne.n	11332 <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   1134a:	4b07      	ldr	r3, [pc, #28]	; (11368 <EVSYS_Handler+0x5c>)
   1134c:	68db      	ldr	r3, [r3, #12]
   1134e:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   11350:	4b05      	ldr	r3, [pc, #20]	; (11368 <EVSYS_Handler+0x5c>)
   11352:	689b      	ldr	r3, [r3, #8]
   11354:	683a      	ldr	r2, [r7, #0]
   11356:	43d2      	mvns	r2, r2
   11358:	401a      	ands	r2, r3
   1135a:	4b03      	ldr	r3, [pc, #12]	; (11368 <EVSYS_Handler+0x5c>)
   1135c:	609a      	str	r2, [r3, #8]
}
   1135e:	46c0      	nop			; (mov r8, r8)
   11360:	46bd      	mov	sp, r7
   11362:	b002      	add	sp, #8
   11364:	bd80      	pop	{r7, pc}
   11366:	46c0      	nop			; (mov r8, r8)
   11368:	20000014 	.word	0x20000014
   1136c:	42000400 	.word	0x42000400
   11370:	0f0fffff 	.word	0x0f0fffff

00011374 <system_gclk_chan_get_config_defaults>:
{
   11374:	b580      	push	{r7, lr}
   11376:	b082      	sub	sp, #8
   11378:	af00      	add	r7, sp, #0
   1137a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1137c:	687b      	ldr	r3, [r7, #4]
   1137e:	2200      	movs	r2, #0
   11380:	701a      	strb	r2, [r3, #0]
}
   11382:	46c0      	nop			; (mov r8, r8)
   11384:	46bd      	mov	sp, r7
   11386:	b002      	add	sp, #8
   11388:	bd80      	pop	{r7, pc}
	...

0001138c <system_apb_clock_set_mask>:
{
   1138c:	b580      	push	{r7, lr}
   1138e:	b082      	sub	sp, #8
   11390:	af00      	add	r7, sp, #0
   11392:	0002      	movs	r2, r0
   11394:	6039      	str	r1, [r7, #0]
   11396:	1dfb      	adds	r3, r7, #7
   11398:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1139a:	1dfb      	adds	r3, r7, #7
   1139c:	781b      	ldrb	r3, [r3, #0]
   1139e:	2b01      	cmp	r3, #1
   113a0:	d00a      	beq.n	113b8 <system_apb_clock_set_mask+0x2c>
   113a2:	2b02      	cmp	r3, #2
   113a4:	d00f      	beq.n	113c6 <system_apb_clock_set_mask+0x3a>
   113a6:	2b00      	cmp	r3, #0
   113a8:	d114      	bne.n	113d4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   113aa:	4b0e      	ldr	r3, [pc, #56]	; (113e4 <system_apb_clock_set_mask+0x58>)
   113ac:	4a0d      	ldr	r2, [pc, #52]	; (113e4 <system_apb_clock_set_mask+0x58>)
   113ae:	6991      	ldr	r1, [r2, #24]
   113b0:	683a      	ldr	r2, [r7, #0]
   113b2:	430a      	orrs	r2, r1
   113b4:	619a      	str	r2, [r3, #24]
			break;
   113b6:	e00f      	b.n	113d8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   113b8:	4b0a      	ldr	r3, [pc, #40]	; (113e4 <system_apb_clock_set_mask+0x58>)
   113ba:	4a0a      	ldr	r2, [pc, #40]	; (113e4 <system_apb_clock_set_mask+0x58>)
   113bc:	69d1      	ldr	r1, [r2, #28]
   113be:	683a      	ldr	r2, [r7, #0]
   113c0:	430a      	orrs	r2, r1
   113c2:	61da      	str	r2, [r3, #28]
			break;
   113c4:	e008      	b.n	113d8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   113c6:	4b07      	ldr	r3, [pc, #28]	; (113e4 <system_apb_clock_set_mask+0x58>)
   113c8:	4a06      	ldr	r2, [pc, #24]	; (113e4 <system_apb_clock_set_mask+0x58>)
   113ca:	6a11      	ldr	r1, [r2, #32]
   113cc:	683a      	ldr	r2, [r7, #0]
   113ce:	430a      	orrs	r2, r1
   113d0:	621a      	str	r2, [r3, #32]
			break;
   113d2:	e001      	b.n	113d8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   113d4:	2317      	movs	r3, #23
   113d6:	e000      	b.n	113da <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   113d8:	2300      	movs	r3, #0
}
   113da:	0018      	movs	r0, r3
   113dc:	46bd      	mov	sp, r7
   113de:	b002      	add	sp, #8
   113e0:	bd80      	pop	{r7, pc}
   113e2:	46c0      	nop			; (mov r8, r8)
   113e4:	40000400 	.word	0x40000400

000113e8 <system_interrupt_enter_critical_section>:
{
   113e8:	b580      	push	{r7, lr}
   113ea:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   113ec:	4b02      	ldr	r3, [pc, #8]	; (113f8 <system_interrupt_enter_critical_section+0x10>)
   113ee:	4798      	blx	r3
}
   113f0:	46c0      	nop			; (mov r8, r8)
   113f2:	46bd      	mov	sp, r7
   113f4:	bd80      	pop	{r7, pc}
   113f6:	46c0      	nop			; (mov r8, r8)
   113f8:	000129f5 	.word	0x000129f5

000113fc <system_interrupt_leave_critical_section>:
{
   113fc:	b580      	push	{r7, lr}
   113fe:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   11400:	4b02      	ldr	r3, [pc, #8]	; (1140c <system_interrupt_leave_critical_section+0x10>)
   11402:	4798      	blx	r3
}
   11404:	46c0      	nop			; (mov r8, r8)
   11406:	46bd      	mov	sp, r7
   11408:	bd80      	pop	{r7, pc}
   1140a:	46c0      	nop			; (mov r8, r8)
   1140c:	00012a49 	.word	0x00012a49

00011410 <_events_find_first_free_channel_and_allocate>:

	return pos;
}

static uint8_t _events_find_first_free_channel_and_allocate(void)
{
   11410:	b580      	push	{r7, lr}
   11412:	b084      	sub	sp, #16
   11414:	af00      	add	r7, sp, #0
	uint8_t count;
	uint32_t tmp;
	bool allocated = false;
   11416:	1dfb      	adds	r3, r7, #7
   11418:	2200      	movs	r2, #0
   1141a:	701a      	strb	r2, [r3, #0]

	system_interrupt_enter_critical_section();
   1141c:	4b21      	ldr	r3, [pc, #132]	; (114a4 <_events_find_first_free_channel_and_allocate+0x94>)
   1141e:	4798      	blx	r3

	tmp = _events_inst.allocated_channels;
   11420:	4b21      	ldr	r3, [pc, #132]	; (114a8 <_events_find_first_free_channel_and_allocate+0x98>)
   11422:	681b      	ldr	r3, [r3, #0]
   11424:	60bb      	str	r3, [r7, #8]

	for(count = 0; count < EVSYS_CHANNELS; ++count) {
   11426:	230f      	movs	r3, #15
   11428:	18fb      	adds	r3, r7, r3
   1142a:	2200      	movs	r2, #0
   1142c:	701a      	strb	r2, [r3, #0]
   1142e:	e022      	b.n	11476 <_events_find_first_free_channel_and_allocate+0x66>

		if(!(tmp & 0x00000001)) {
   11430:	68bb      	ldr	r3, [r7, #8]
   11432:	2201      	movs	r2, #1
   11434:	4013      	ands	r3, r2
   11436:	d114      	bne.n	11462 <_events_find_first_free_channel_and_allocate+0x52>
			/* If free channel found, set as allocated and return number */

			_events_inst.allocated_channels |= 1 << count;
   11438:	4b1b      	ldr	r3, [pc, #108]	; (114a8 <_events_find_first_free_channel_and_allocate+0x98>)
   1143a:	681b      	ldr	r3, [r3, #0]
   1143c:	220f      	movs	r2, #15
   1143e:	18ba      	adds	r2, r7, r2
   11440:	7812      	ldrb	r2, [r2, #0]
   11442:	2101      	movs	r1, #1
   11444:	4091      	lsls	r1, r2
   11446:	000a      	movs	r2, r1
   11448:	431a      	orrs	r2, r3
   1144a:	4b17      	ldr	r3, [pc, #92]	; (114a8 <_events_find_first_free_channel_and_allocate+0x98>)
   1144c:	601a      	str	r2, [r3, #0]
			_events_inst.free_channels--;
   1144e:	4b16      	ldr	r3, [pc, #88]	; (114a8 <_events_find_first_free_channel_and_allocate+0x98>)
   11450:	791b      	ldrb	r3, [r3, #4]
   11452:	3b01      	subs	r3, #1
   11454:	b2da      	uxtb	r2, r3
   11456:	4b14      	ldr	r3, [pc, #80]	; (114a8 <_events_find_first_free_channel_and_allocate+0x98>)
   11458:	711a      	strb	r2, [r3, #4]
			allocated = true;
   1145a:	1dfb      	adds	r3, r7, #7
   1145c:	2201      	movs	r2, #1
   1145e:	701a      	strb	r2, [r3, #0]

			break;
   11460:	e00e      	b.n	11480 <_events_find_first_free_channel_and_allocate+0x70>

		}

		tmp = tmp >> 1;
   11462:	68bb      	ldr	r3, [r7, #8]
   11464:	085b      	lsrs	r3, r3, #1
   11466:	60bb      	str	r3, [r7, #8]
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
   11468:	230f      	movs	r3, #15
   1146a:	18fb      	adds	r3, r7, r3
   1146c:	220f      	movs	r2, #15
   1146e:	18ba      	adds	r2, r7, r2
   11470:	7812      	ldrb	r2, [r2, #0]
   11472:	3201      	adds	r2, #1
   11474:	701a      	strb	r2, [r3, #0]
   11476:	230f      	movs	r3, #15
   11478:	18fb      	adds	r3, r7, r3
   1147a:	781b      	ldrb	r3, [r3, #0]
   1147c:	2b0b      	cmp	r3, #11
   1147e:	d9d7      	bls.n	11430 <_events_find_first_free_channel_and_allocate+0x20>
	}

	system_interrupt_leave_critical_section();
   11480:	4b0a      	ldr	r3, [pc, #40]	; (114ac <_events_find_first_free_channel_and_allocate+0x9c>)
   11482:	4798      	blx	r3

	if(!allocated) {
   11484:	1dfb      	adds	r3, r7, #7
   11486:	781b      	ldrb	r3, [r3, #0]
   11488:	2201      	movs	r2, #1
   1148a:	4053      	eors	r3, r2
   1148c:	b2db      	uxtb	r3, r3
   1148e:	2b00      	cmp	r3, #0
   11490:	d001      	beq.n	11496 <_events_find_first_free_channel_and_allocate+0x86>
		return EVENTS_INVALID_CHANNEL;
   11492:	23ff      	movs	r3, #255	; 0xff
   11494:	e002      	b.n	1149c <_events_find_first_free_channel_and_allocate+0x8c>
	} else {
		return count;
   11496:	230f      	movs	r3, #15
   11498:	18fb      	adds	r3, r7, r3
   1149a:	781b      	ldrb	r3, [r3, #0]
	}
}
   1149c:	0018      	movs	r0, r3
   1149e:	46bd      	mov	sp, r7
   114a0:	b004      	add	sp, #16
   114a2:	bd80      	pop	{r7, pc}
   114a4:	000113e9 	.word	0x000113e9
   114a8:	20000014 	.word	0x20000014
   114ac:	000113fd 	.word	0x000113fd

000114b0 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   114b0:	b580      	push	{r7, lr}
   114b2:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   114b4:	2102      	movs	r1, #2
   114b6:	2002      	movs	r0, #2
   114b8:	4b07      	ldr	r3, [pc, #28]	; (114d8 <_system_events_init+0x28>)
   114ba:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   114bc:	4b07      	ldr	r3, [pc, #28]	; (114dc <_system_events_init+0x2c>)
   114be:	2201      	movs	r2, #1
   114c0:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   114c2:	46c0      	nop			; (mov r8, r8)
   114c4:	4b05      	ldr	r3, [pc, #20]	; (114dc <_system_events_init+0x2c>)
   114c6:	781b      	ldrb	r3, [r3, #0]
   114c8:	b2db      	uxtb	r3, r3
   114ca:	001a      	movs	r2, r3
   114cc:	2301      	movs	r3, #1
   114ce:	4013      	ands	r3, r2
   114d0:	d1f8      	bne.n	114c4 <_system_events_init+0x14>
	}
}
   114d2:	46c0      	nop			; (mov r8, r8)
   114d4:	46bd      	mov	sp, r7
   114d6:	bd80      	pop	{r7, pc}
   114d8:	0001138d 	.word	0x0001138d
   114dc:	42000400 	.word	0x42000400

000114e0 <events_get_config_defaults>:
#if defined(__GNUC__)
#  pragma GCC diagnostic pop
#endif

void events_get_config_defaults(struct events_config *config)
{
   114e0:	b580      	push	{r7, lr}
   114e2:	b082      	sub	sp, #8
   114e4:	af00      	add	r7, sp, #0
   114e6:	6078      	str	r0, [r7, #4]
	/* Check that config is something other than NULL */
	Assert(config);

	config->edge_detect  = EVENTS_EDGE_DETECT_RISING;
   114e8:	687b      	ldr	r3, [r7, #4]
   114ea:	2201      	movs	r2, #1
   114ec:	701a      	strb	r2, [r3, #0]
	config->path         = EVENTS_PATH_SYNCHRONOUS;
   114ee:	687b      	ldr	r3, [r7, #4]
   114f0:	2200      	movs	r2, #0
   114f2:	705a      	strb	r2, [r3, #1]
	config->generator    = EVSYS_ID_GEN_NONE;
   114f4:	687b      	ldr	r3, [r7, #4]
   114f6:	2200      	movs	r2, #0
   114f8:	709a      	strb	r2, [r3, #2]
	config->clock_source = GCLK_GENERATOR_0;
   114fa:	687b      	ldr	r3, [r7, #4]
   114fc:	2200      	movs	r2, #0
   114fe:	70da      	strb	r2, [r3, #3]
}
   11500:	46c0      	nop			; (mov r8, r8)
   11502:	46bd      	mov	sp, r7
   11504:	b002      	add	sp, #8
   11506:	bd80      	pop	{r7, pc}

00011508 <events_allocate>:

enum status_code events_allocate(
		struct events_resource *resource,
		struct events_config *config)
{
   11508:	b590      	push	{r4, r7, lr}
   1150a:	b085      	sub	sp, #20
   1150c:	af00      	add	r7, sp, #0
   1150e:	6078      	str	r0, [r7, #4]
   11510:	6039      	str	r1, [r7, #0]
	uint8_t new_channel;

	Assert(resource);

	new_channel = _events_find_first_free_channel_and_allocate();
   11512:	230f      	movs	r3, #15
   11514:	18fc      	adds	r4, r7, r3
   11516:	4b2a      	ldr	r3, [pc, #168]	; (115c0 <events_allocate+0xb8>)
   11518:	4798      	blx	r3
   1151a:	0003      	movs	r3, r0
   1151c:	7023      	strb	r3, [r4, #0]

	if(new_channel == EVENTS_INVALID_CHANNEL) {
   1151e:	230f      	movs	r3, #15
   11520:	18fb      	adds	r3, r7, r3
   11522:	781b      	ldrb	r3, [r3, #0]
   11524:	2bff      	cmp	r3, #255	; 0xff
   11526:	d101      	bne.n	1152c <events_allocate+0x24>
		return STATUS_ERR_NOT_FOUND;
   11528:	2314      	movs	r3, #20
   1152a:	e045      	b.n	115b8 <events_allocate+0xb0>
	}

	resource->channel = new_channel;
   1152c:	687b      	ldr	r3, [r7, #4]
   1152e:	220f      	movs	r2, #15
   11530:	18ba      	adds	r2, r7, r2
   11532:	7812      	ldrb	r2, [r2, #0]
   11534:	701a      	strb	r2, [r3, #0]

	if (config->path != EVENTS_PATH_ASYNCHRONOUS) {
   11536:	683b      	ldr	r3, [r7, #0]
   11538:	785b      	ldrb	r3, [r3, #1]
   1153a:	2b02      	cmp	r3, #2
   1153c:	d01c      	beq.n	11578 <events_allocate+0x70>
		/* Set up a GLCK channel to use with the specific channel */
		struct system_gclk_chan_config gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1153e:	230c      	movs	r3, #12
   11540:	18fb      	adds	r3, r7, r3
   11542:	0018      	movs	r0, r3
   11544:	4b1f      	ldr	r3, [pc, #124]	; (115c4 <events_allocate+0xbc>)
   11546:	4798      	blx	r3
		gclk_chan_conf.source_generator =
				(enum gclk_generator)config->clock_source;
   11548:	683b      	ldr	r3, [r7, #0]
   1154a:	78da      	ldrb	r2, [r3, #3]
		gclk_chan_conf.source_generator =
   1154c:	230c      	movs	r3, #12
   1154e:	18fb      	adds	r3, r7, r3
   11550:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(EVSYS_GCLK_ID_0 + new_channel, &gclk_chan_conf);
   11552:	230f      	movs	r3, #15
   11554:	18fb      	adds	r3, r7, r3
   11556:	781b      	ldrb	r3, [r3, #0]
   11558:	3307      	adds	r3, #7
   1155a:	b2db      	uxtb	r3, r3
   1155c:	220c      	movs	r2, #12
   1155e:	18ba      	adds	r2, r7, r2
   11560:	0011      	movs	r1, r2
   11562:	0018      	movs	r0, r3
   11564:	4b18      	ldr	r3, [pc, #96]	; (115c8 <events_allocate+0xc0>)
   11566:	4798      	blx	r3
		system_gclk_chan_enable(EVSYS_GCLK_ID_0 + new_channel);
   11568:	230f      	movs	r3, #15
   1156a:	18fb      	adds	r3, r7, r3
   1156c:	781b      	ldrb	r3, [r3, #0]
   1156e:	3307      	adds	r3, #7
   11570:	b2db      	uxtb	r3, r3
   11572:	0018      	movs	r0, r3
   11574:	4b15      	ldr	r3, [pc, #84]	; (115cc <events_allocate+0xc4>)
   11576:	4798      	blx	r3
	}

	/* Save channel setting and configure it after user multiplexer */
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
   11578:	230f      	movs	r3, #15
   1157a:	18fb      	adds	r3, r7, r3
   1157c:	781b      	ldrb	r3, [r3, #0]
   1157e:	220f      	movs	r2, #15
   11580:	401a      	ands	r2, r3
			     EVSYS_CHANNEL_EVGEN(config->generator)   |
   11582:	683b      	ldr	r3, [r7, #0]
   11584:	789b      	ldrb	r3, [r3, #2]
   11586:	041b      	lsls	r3, r3, #16
   11588:	0019      	movs	r1, r3
   1158a:	23fe      	movs	r3, #254	; 0xfe
   1158c:	03db      	lsls	r3, r3, #15
   1158e:	400b      	ands	r3, r1
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
   11590:	431a      	orrs	r2, r3
			     EVSYS_CHANNEL_PATH(config->path)         |
   11592:	683b      	ldr	r3, [r7, #0]
   11594:	785b      	ldrb	r3, [r3, #1]
   11596:	061b      	lsls	r3, r3, #24
   11598:	0019      	movs	r1, r3
   1159a:	23c0      	movs	r3, #192	; 0xc0
   1159c:	049b      	lsls	r3, r3, #18
   1159e:	400b      	ands	r3, r1
			     EVSYS_CHANNEL_EVGEN(config->generator)   |
   115a0:	431a      	orrs	r2, r3
			     EVSYS_CHANNEL_EDGSEL(config->edge_detect);
   115a2:	683b      	ldr	r3, [r7, #0]
   115a4:	781b      	ldrb	r3, [r3, #0]
   115a6:	069b      	lsls	r3, r3, #26
   115a8:	0019      	movs	r1, r3
   115aa:	23c0      	movs	r3, #192	; 0xc0
   115ac:	051b      	lsls	r3, r3, #20
   115ae:	400b      	ands	r3, r1
			     EVSYS_CHANNEL_PATH(config->path)         |
   115b0:	431a      	orrs	r2, r3
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
   115b2:	687b      	ldr	r3, [r7, #4]
   115b4:	605a      	str	r2, [r3, #4]


	return STATUS_OK;
   115b6:	2300      	movs	r3, #0
}
   115b8:	0018      	movs	r0, r3
   115ba:	46bd      	mov	sp, r7
   115bc:	b005      	add	sp, #20
   115be:	bd90      	pop	{r4, r7, pc}
   115c0:	00011411 	.word	0x00011411
   115c4:	00011375 	.word	0x00011375
   115c8:	000137ad 	.word	0x000137ad
   115cc:	000137f1 	.word	0x000137f1

000115d0 <events_attach_user>:

	return false;
}

enum status_code events_attach_user(struct events_resource *resource, uint8_t user_id)
{
   115d0:	b580      	push	{r7, lr}
   115d2:	b082      	sub	sp, #8
   115d4:	af00      	add	r7, sp, #0
   115d6:	6078      	str	r0, [r7, #4]
   115d8:	000a      	movs	r2, r1
   115da:	1cfb      	adds	r3, r7, #3
   115dc:	701a      	strb	r2, [r3, #0]
	Assert(resource);

	/* First configure user multiplexer: channel number is n + 1 */
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(resource->channel + 1) |
   115de:	490f      	ldr	r1, [pc, #60]	; (1161c <events_attach_user+0x4c>)
   115e0:	687b      	ldr	r3, [r7, #4]
   115e2:	781b      	ldrb	r3, [r3, #0]
   115e4:	b29b      	uxth	r3, r3
   115e6:	3301      	adds	r3, #1
   115e8:	b29b      	uxth	r3, r3
   115ea:	021b      	lsls	r3, r3, #8
   115ec:	b29a      	uxth	r2, r3
   115ee:	23f8      	movs	r3, #248	; 0xf8
   115f0:	015b      	lsls	r3, r3, #5
   115f2:	4013      	ands	r3, r2
   115f4:	b29a      	uxth	r2, r3
			  EVSYS_USER_USER(user_id);
   115f6:	1cfb      	adds	r3, r7, #3
   115f8:	781b      	ldrb	r3, [r3, #0]
   115fa:	b29b      	uxth	r3, r3
   115fc:	201f      	movs	r0, #31
   115fe:	4003      	ands	r3, r0
   11600:	b29b      	uxth	r3, r3
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(resource->channel + 1) |
   11602:	4313      	orrs	r3, r2
   11604:	b29b      	uxth	r3, r3
   11606:	810b      	strh	r3, [r1, #8]

	/* Then configure the channel */
	EVSYS->CHANNEL.reg = resource->channel_reg;
   11608:	4a04      	ldr	r2, [pc, #16]	; (1161c <events_attach_user+0x4c>)
   1160a:	687b      	ldr	r3, [r7, #4]
   1160c:	685b      	ldr	r3, [r3, #4]
   1160e:	6053      	str	r3, [r2, #4]

	return STATUS_OK;
   11610:	2300      	movs	r3, #0
}
   11612:	0018      	movs	r0, r3
   11614:	46bd      	mov	sp, r7
   11616:	b002      	add	sp, #8
   11618:	bd80      	pop	{r7, pc}
   1161a:	46c0      	nop			; (mov r8, r8)
   1161c:	42000400 	.word	0x42000400

00011620 <ac_register_callback>:
 */
enum status_code ac_register_callback(
		struct ac_module *const module,
		ac_callback_t callback_func,
		const enum ac_callback callback_type)
{
   11620:	b580      	push	{r7, lr}
   11622:	b084      	sub	sp, #16
   11624:	af00      	add	r7, sp, #0
   11626:	60f8      	str	r0, [r7, #12]
   11628:	60b9      	str	r1, [r7, #8]
   1162a:	1dfb      	adds	r3, r7, #7
   1162c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   1162e:	1dfb      	adds	r3, r7, #7
   11630:	781b      	ldrb	r3, [r3, #0]
   11632:	68fa      	ldr	r2, [r7, #12]
   11634:	009b      	lsls	r3, r3, #2
   11636:	18d3      	adds	r3, r2, r3
   11638:	3304      	adds	r3, #4
   1163a:	68ba      	ldr	r2, [r7, #8]
   1163c:	601a      	str	r2, [r3, #0]

	/* Set software flag for callback */
	module->register_callback_mask |= (1 << callback_type);
   1163e:	68fb      	ldr	r3, [r7, #12]
   11640:	7e1b      	ldrb	r3, [r3, #24]
   11642:	b25a      	sxtb	r2, r3
   11644:	1dfb      	adds	r3, r7, #7
   11646:	781b      	ldrb	r3, [r3, #0]
   11648:	2101      	movs	r1, #1
   1164a:	4099      	lsls	r1, r3
   1164c:	000b      	movs	r3, r1
   1164e:	b25b      	sxtb	r3, r3
   11650:	4313      	orrs	r3, r2
   11652:	b25b      	sxtb	r3, r3
   11654:	b2da      	uxtb	r2, r3
   11656:	68fb      	ldr	r3, [r7, #12]
   11658:	761a      	strb	r2, [r3, #24]

	return STATUS_OK;
   1165a:	2300      	movs	r3, #0
}
   1165c:	0018      	movs	r0, r3
   1165e:	46bd      	mov	sp, r7
   11660:	b004      	add	sp, #16
   11662:	bd80      	pop	{r7, pc}

00011664 <AC_Handler>:
/**
 * \internal ISR handler for AC
 */
#if (AC_INST_NUM == 1)
void AC_Handler(void)
{
   11664:	b580      	push	{r7, lr}
   11666:	af00      	add	r7, sp, #0
	_ac_interrupt_handler(0);
   11668:	2000      	movs	r0, #0
   1166a:	4b02      	ldr	r3, [pc, #8]	; (11674 <AC_Handler+0x10>)
   1166c:	4798      	blx	r3
}
   1166e:	46c0      	nop			; (mov r8, r8)
   11670:	46bd      	mov	sp, r7
   11672:	bd80      	pop	{r7, pc}
   11674:	00011679 	.word	0x00011679

00011678 <_ac_interrupt_handler>:
 * that are registered and enabled.
 *
 * \param [in] instance_index  Default value 0
 */
void _ac_interrupt_handler(const uint32_t instance_index)
{
   11678:	b580      	push	{r7, lr}
   1167a:	b084      	sub	sp, #16
   1167c:	af00      	add	r7, sp, #0
   1167e:	6078      	str	r0, [r7, #4]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */

	struct ac_module *module = _ac_instance[instance_index];
   11680:	4b23      	ldr	r3, [pc, #140]	; (11710 <_ac_interrupt_handler+0x98>)
   11682:	687a      	ldr	r2, [r7, #4]
   11684:	0092      	lsls	r2, r2, #2
   11686:	58d3      	ldr	r3, [r2, r3]
   11688:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask =
			_ac_instance[instance_index]->hw->INTFLAG.reg &
   1168a:	4b21      	ldr	r3, [pc, #132]	; (11710 <_ac_interrupt_handler+0x98>)
   1168c:	687a      	ldr	r2, [r7, #4]
   1168e:	0092      	lsls	r2, r2, #2
   11690:	58d3      	ldr	r3, [r2, r3]
   11692:	681b      	ldr	r3, [r3, #0]
   11694:	799b      	ldrb	r3, [r3, #6]
   11696:	b2da      	uxtb	r2, r3
			(module->register_callback_mask & module->enable_callback_mask);
   11698:	68fb      	ldr	r3, [r7, #12]
   1169a:	7e1b      	ldrb	r3, [r3, #24]
   1169c:	68f9      	ldr	r1, [r7, #12]
   1169e:	7e49      	ldrb	r1, [r1, #25]
	interrupt_and_callback_status_mask =
   116a0:	400b      	ands	r3, r1
   116a2:	b2d9      	uxtb	r1, r3
   116a4:	230b      	movs	r3, #11
   116a6:	18fb      	adds	r3, r7, r3
   116a8:	400a      	ands	r2, r1
   116aa:	701a      	strb	r2, [r3, #0]

	/* Check if comparator channel 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP0) {
   116ac:	230b      	movs	r3, #11
   116ae:	18fb      	adds	r3, r7, r3
   116b0:	781b      	ldrb	r3, [r3, #0]
   116b2:	2201      	movs	r2, #1
   116b4:	4013      	ands	r3, r2
   116b6:	d008      	beq.n	116ca <_ac_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_COMPARATOR_0])(module);
   116b8:	68fb      	ldr	r3, [r7, #12]
   116ba:	685b      	ldr	r3, [r3, #4]
   116bc:	68fa      	ldr	r2, [r7, #12]
   116be:	0010      	movs	r0, r2
   116c0:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP0;
   116c2:	68fb      	ldr	r3, [r7, #12]
   116c4:	681b      	ldr	r3, [r3, #0]
   116c6:	2201      	movs	r2, #1
   116c8:	719a      	strb	r2, [r3, #6]
	}

	/* Check if comparator channel 1 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP1) {
   116ca:	230b      	movs	r3, #11
   116cc:	18fb      	adds	r3, r7, r3
   116ce:	781b      	ldrb	r3, [r3, #0]
   116d0:	2202      	movs	r2, #2
   116d2:	4013      	ands	r3, r2
   116d4:	d008      	beq.n	116e8 <_ac_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_COMPARATOR_1])(module);
   116d6:	68fb      	ldr	r3, [r7, #12]
   116d8:	689b      	ldr	r3, [r3, #8]
   116da:	68fa      	ldr	r2, [r7, #12]
   116dc:	0010      	movs	r0, r2
   116de:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP1;
   116e0:	68fb      	ldr	r3, [r7, #12]
   116e2:	681b      	ldr	r3, [r3, #0]
   116e4:	2202      	movs	r2, #2
   116e6:	719a      	strb	r2, [r3, #6]
	}

	/* Check if window 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_WIN0) {
   116e8:	230b      	movs	r3, #11
   116ea:	18fb      	adds	r3, r7, r3
   116ec:	781b      	ldrb	r3, [r3, #0]
   116ee:	2210      	movs	r2, #16
   116f0:	4013      	ands	r3, r2
   116f2:	d008      	beq.n	11706 <_ac_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_WINDOW_0])(module);
   116f4:	68fb      	ldr	r3, [r7, #12]
   116f6:	695b      	ldr	r3, [r3, #20]
   116f8:	68fa      	ldr	r2, [r7, #12]
   116fa:	0010      	movs	r0, r2
   116fc:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN0;
   116fe:	68fb      	ldr	r3, [r7, #12]
   11700:	681b      	ldr	r3, [r3, #0]
   11702:	2210      	movs	r2, #16
   11704:	719a      	strb	r2, [r3, #6]
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN1;
	}
#  endif
#endif /* (AC_NUM_CMP > 2) */
}
   11706:	46c0      	nop			; (mov r8, r8)
   11708:	46bd      	mov	sp, r7
   1170a:	b004      	add	sp, #16
   1170c:	bd80      	pop	{r7, pc}
   1170e:	46c0      	nop			; (mov r8, r8)
   11710:	20000924 	.word	0x20000924

00011714 <delay_init>:
 * \brief Initialize the delay driver.
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
   11714:	b580      	push	{r7, lr}
   11716:	af00      	add	r7, sp, #0
}
   11718:	46c0      	nop			; (mov r8, r8)
   1171a:	46bd      	mov	sp, r7
   1171c:	bd80      	pop	{r7, pc}
	...

00011720 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
   11720:	b580      	push	{r7, lr}
   11722:	b082      	sub	sp, #8
   11724:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   11726:	4b07      	ldr	r3, [pc, #28]	; (11744 <nvm_is_ready+0x24>)
   11728:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
   1172a:	687b      	ldr	r3, [r7, #4]
   1172c:	7d1b      	ldrb	r3, [r3, #20]
   1172e:	b2db      	uxtb	r3, r3
   11730:	001a      	movs	r2, r3
   11732:	2301      	movs	r3, #1
   11734:	4013      	ands	r3, r2
   11736:	1e5a      	subs	r2, r3, #1
   11738:	4193      	sbcs	r3, r2
   1173a:	b2db      	uxtb	r3, r3
}
   1173c:	0018      	movs	r0, r3
   1173e:	46bd      	mov	sp, r7
   11740:	b002      	add	sp, #8
   11742:	bd80      	pop	{r7, pc}
   11744:	41004000 	.word	0x41004000

00011748 <system_apb_clock_set_mask>:
{
   11748:	b580      	push	{r7, lr}
   1174a:	b082      	sub	sp, #8
   1174c:	af00      	add	r7, sp, #0
   1174e:	0002      	movs	r2, r0
   11750:	6039      	str	r1, [r7, #0]
   11752:	1dfb      	adds	r3, r7, #7
   11754:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   11756:	1dfb      	adds	r3, r7, #7
   11758:	781b      	ldrb	r3, [r3, #0]
   1175a:	2b01      	cmp	r3, #1
   1175c:	d00a      	beq.n	11774 <system_apb_clock_set_mask+0x2c>
   1175e:	2b02      	cmp	r3, #2
   11760:	d00f      	beq.n	11782 <system_apb_clock_set_mask+0x3a>
   11762:	2b00      	cmp	r3, #0
   11764:	d114      	bne.n	11790 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   11766:	4b0e      	ldr	r3, [pc, #56]	; (117a0 <system_apb_clock_set_mask+0x58>)
   11768:	4a0d      	ldr	r2, [pc, #52]	; (117a0 <system_apb_clock_set_mask+0x58>)
   1176a:	6991      	ldr	r1, [r2, #24]
   1176c:	683a      	ldr	r2, [r7, #0]
   1176e:	430a      	orrs	r2, r1
   11770:	619a      	str	r2, [r3, #24]
			break;
   11772:	e00f      	b.n	11794 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   11774:	4b0a      	ldr	r3, [pc, #40]	; (117a0 <system_apb_clock_set_mask+0x58>)
   11776:	4a0a      	ldr	r2, [pc, #40]	; (117a0 <system_apb_clock_set_mask+0x58>)
   11778:	69d1      	ldr	r1, [r2, #28]
   1177a:	683a      	ldr	r2, [r7, #0]
   1177c:	430a      	orrs	r2, r1
   1177e:	61da      	str	r2, [r3, #28]
			break;
   11780:	e008      	b.n	11794 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   11782:	4b07      	ldr	r3, [pc, #28]	; (117a0 <system_apb_clock_set_mask+0x58>)
   11784:	4a06      	ldr	r2, [pc, #24]	; (117a0 <system_apb_clock_set_mask+0x58>)
   11786:	6a11      	ldr	r1, [r2, #32]
   11788:	683a      	ldr	r2, [r7, #0]
   1178a:	430a      	orrs	r2, r1
   1178c:	621a      	str	r2, [r3, #32]
			break;
   1178e:	e001      	b.n	11794 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   11790:	2317      	movs	r3, #23
   11792:	e000      	b.n	11796 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   11794:	2300      	movs	r3, #0
}
   11796:	0018      	movs	r0, r3
   11798:	46bd      	mov	sp, r7
   1179a:	b002      	add	sp, #8
   1179c:	bd80      	pop	{r7, pc}
   1179e:	46c0      	nop			; (mov r8, r8)
   117a0:	40000400 	.word	0x40000400

000117a4 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
   117a4:	b580      	push	{r7, lr}
   117a6:	b084      	sub	sp, #16
   117a8:	af00      	add	r7, sp, #0
   117aa:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   117ac:	4b2f      	ldr	r3, [pc, #188]	; (1186c <nvm_set_config+0xc8>)
   117ae:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
   117b0:	2104      	movs	r1, #4
   117b2:	2001      	movs	r0, #1
   117b4:	4b2e      	ldr	r3, [pc, #184]	; (11870 <nvm_set_config+0xcc>)
   117b6:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   117b8:	68fb      	ldr	r3, [r7, #12]
   117ba:	2220      	movs	r2, #32
   117bc:	32ff      	adds	r2, #255	; 0xff
   117be:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   117c0:	4b2c      	ldr	r3, [pc, #176]	; (11874 <nvm_set_config+0xd0>)
   117c2:	4798      	blx	r3
   117c4:	0003      	movs	r3, r0
   117c6:	001a      	movs	r2, r3
   117c8:	2301      	movs	r3, #1
   117ca:	4053      	eors	r3, r2
   117cc:	b2db      	uxtb	r3, r3
   117ce:	2b00      	cmp	r3, #0
   117d0:	d001      	beq.n	117d6 <nvm_set_config+0x32>
		return STATUS_BUSY;
   117d2:	2305      	movs	r3, #5
   117d4:	e045      	b.n	11862 <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
   117d6:	687b      	ldr	r3, [r7, #4]
   117d8:	781b      	ldrb	r3, [r3, #0]
   117da:	021b      	lsls	r3, r3, #8
   117dc:	001a      	movs	r2, r3
   117de:	23c0      	movs	r3, #192	; 0xc0
   117e0:	009b      	lsls	r3, r3, #2
   117e2:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
   117e4:	687b      	ldr	r3, [r7, #4]
   117e6:	785b      	ldrb	r3, [r3, #1]
   117e8:	01db      	lsls	r3, r3, #7
   117ea:	0019      	movs	r1, r3
   117ec:	23ff      	movs	r3, #255	; 0xff
   117ee:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
   117f0:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
   117f2:	687b      	ldr	r3, [r7, #4]
   117f4:	789b      	ldrb	r3, [r3, #2]
   117f6:	005b      	lsls	r3, r3, #1
   117f8:	0019      	movs	r1, r3
   117fa:	231e      	movs	r3, #30
   117fc:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
   117fe:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
   11800:	687b      	ldr	r3, [r7, #4]
   11802:	78db      	ldrb	r3, [r3, #3]
   11804:	049b      	lsls	r3, r3, #18
   11806:	0019      	movs	r1, r3
   11808:	2380      	movs	r3, #128	; 0x80
   1180a:	02db      	lsls	r3, r3, #11
   1180c:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
   1180e:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
   11810:	687b      	ldr	r3, [r7, #4]
   11812:	791b      	ldrb	r3, [r3, #4]
   11814:	041b      	lsls	r3, r3, #16
   11816:	0019      	movs	r1, r3
   11818:	23c0      	movs	r3, #192	; 0xc0
   1181a:	029b      	lsls	r3, r3, #10
   1181c:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
   1181e:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
   11820:	68fb      	ldr	r3, [r7, #12]
   11822:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
   11824:	68fb      	ldr	r3, [r7, #12]
   11826:	689b      	ldr	r3, [r3, #8]
   11828:	035b      	lsls	r3, r3, #13
   1182a:	0f5b      	lsrs	r3, r3, #29
   1182c:	b2db      	uxtb	r3, r3
   1182e:	001a      	movs	r2, r3
   11830:	2308      	movs	r3, #8
   11832:	4093      	lsls	r3, r2
   11834:	b29a      	uxth	r2, r3
   11836:	4b10      	ldr	r3, [pc, #64]	; (11878 <nvm_set_config+0xd4>)
   11838:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
   1183a:	68fb      	ldr	r3, [r7, #12]
   1183c:	689b      	ldr	r3, [r3, #8]
   1183e:	b29a      	uxth	r2, r3
   11840:	4b0d      	ldr	r3, [pc, #52]	; (11878 <nvm_set_config+0xd4>)
   11842:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
   11844:	687b      	ldr	r3, [r7, #4]
   11846:	785a      	ldrb	r2, [r3, #1]
   11848:	4b0b      	ldr	r3, [pc, #44]	; (11878 <nvm_set_config+0xd4>)
   1184a:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
   1184c:	68fb      	ldr	r3, [r7, #12]
   1184e:	8b1b      	ldrh	r3, [r3, #24]
   11850:	b29b      	uxth	r3, r3
   11852:	001a      	movs	r2, r3
   11854:	2380      	movs	r3, #128	; 0x80
   11856:	005b      	lsls	r3, r3, #1
   11858:	4013      	ands	r3, r2
   1185a:	d001      	beq.n	11860 <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
   1185c:	2310      	movs	r3, #16
   1185e:	e000      	b.n	11862 <nvm_set_config+0xbe>
	}

	return STATUS_OK;
   11860:	2300      	movs	r3, #0
}
   11862:	0018      	movs	r0, r3
   11864:	46bd      	mov	sp, r7
   11866:	b004      	add	sp, #16
   11868:	bd80      	pop	{r7, pc}
   1186a:	46c0      	nop			; (mov r8, r8)
   1186c:	41004000 	.word	0x41004000
   11870:	00011749 	.word	0x00011749
   11874:	00011721 	.word	0x00011721
   11878:	20000404 	.word	0x20000404

0001187c <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
   1187c:	b580      	push	{r7, lr}
   1187e:	b086      	sub	sp, #24
   11880:	af00      	add	r7, sp, #0
   11882:	60b9      	str	r1, [r7, #8]
   11884:	607a      	str	r2, [r7, #4]
   11886:	230f      	movs	r3, #15
   11888:	18fb      	adds	r3, r7, r3
   1188a:	1c02      	adds	r2, r0, #0
   1188c:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
   1188e:	4b3a      	ldr	r3, [pc, #232]	; (11978 <nvm_execute_command+0xfc>)
   11890:	881b      	ldrh	r3, [r3, #0]
   11892:	001a      	movs	r2, r3
   11894:	4b38      	ldr	r3, [pc, #224]	; (11978 <nvm_execute_command+0xfc>)
   11896:	885b      	ldrh	r3, [r3, #2]
   11898:	435a      	muls	r2, r3
   1189a:	68bb      	ldr	r3, [r7, #8]
   1189c:	429a      	cmp	r2, r3
   1189e:	d209      	bcs.n	118b4 <nvm_execute_command+0x38>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
   118a0:	68bb      	ldr	r3, [r7, #8]
   118a2:	4a36      	ldr	r2, [pc, #216]	; (1197c <nvm_execute_command+0x100>)
   118a4:	4293      	cmp	r3, r2
   118a6:	d903      	bls.n	118b0 <nvm_execute_command+0x34>
   118a8:	68bb      	ldr	r3, [r7, #8]
   118aa:	4a35      	ldr	r2, [pc, #212]	; (11980 <nvm_execute_command+0x104>)
   118ac:	4293      	cmp	r3, r2
   118ae:	d901      	bls.n	118b4 <nvm_execute_command+0x38>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
   118b0:	2318      	movs	r3, #24
   118b2:	e05c      	b.n	1196e <nvm_execute_command+0xf2>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   118b4:	4b33      	ldr	r3, [pc, #204]	; (11984 <nvm_execute_command+0x108>)
   118b6:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
   118b8:	697b      	ldr	r3, [r7, #20]
   118ba:	685b      	ldr	r3, [r3, #4]
   118bc:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
   118be:	693b      	ldr	r3, [r7, #16]
   118c0:	2280      	movs	r2, #128	; 0x80
   118c2:	02d2      	lsls	r2, r2, #11
   118c4:	431a      	orrs	r2, r3
   118c6:	697b      	ldr	r3, [r7, #20]
   118c8:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   118ca:	697b      	ldr	r3, [r7, #20]
   118cc:	2220      	movs	r2, #32
   118ce:	32ff      	adds	r2, #255	; 0xff
   118d0:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   118d2:	4b2d      	ldr	r3, [pc, #180]	; (11988 <nvm_execute_command+0x10c>)
   118d4:	4798      	blx	r3
   118d6:	0003      	movs	r3, r0
   118d8:	001a      	movs	r2, r3
   118da:	2301      	movs	r3, #1
   118dc:	4053      	eors	r3, r2
   118de:	b2db      	uxtb	r3, r3
   118e0:	2b00      	cmp	r3, #0
   118e2:	d004      	beq.n	118ee <nvm_execute_command+0x72>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
   118e4:	697b      	ldr	r3, [r7, #20]
   118e6:	693a      	ldr	r2, [r7, #16]
   118e8:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
   118ea:	2305      	movs	r3, #5
   118ec:	e03f      	b.n	1196e <nvm_execute_command+0xf2>
	}

	switch (command) {
   118ee:	230f      	movs	r3, #15
   118f0:	18fb      	adds	r3, r7, r3
   118f2:	781b      	ldrb	r3, [r3, #0]
   118f4:	2b45      	cmp	r3, #69	; 0x45
   118f6:	d81d      	bhi.n	11934 <nvm_execute_command+0xb8>
   118f8:	009a      	lsls	r2, r3, #2
   118fa:	4b24      	ldr	r3, [pc, #144]	; (1198c <nvm_execute_command+0x110>)
   118fc:	18d3      	adds	r3, r2, r3
   118fe:	681b      	ldr	r3, [r3, #0]
   11900:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
   11902:	697b      	ldr	r3, [r7, #20]
   11904:	8b1b      	ldrh	r3, [r3, #24]
   11906:	b29b      	uxth	r3, r3
   11908:	001a      	movs	r2, r3
   1190a:	2380      	movs	r3, #128	; 0x80
   1190c:	005b      	lsls	r3, r3, #1
   1190e:	4013      	ands	r3, r2
   11910:	d004      	beq.n	1191c <nvm_execute_command+0xa0>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
   11912:	697b      	ldr	r3, [r7, #20]
   11914:	693a      	ldr	r2, [r7, #16]
   11916:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
   11918:	2310      	movs	r3, #16
   1191a:	e028      	b.n	1196e <nvm_execute_command+0xf2>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
   1191c:	68bb      	ldr	r3, [r7, #8]
   1191e:	089b      	lsrs	r3, r3, #2
   11920:	005a      	lsls	r2, r3, #1
   11922:	697b      	ldr	r3, [r7, #20]
   11924:	61da      	str	r2, [r3, #28]
			break;
   11926:	e00b      	b.n	11940 <nvm_execute_command+0xc4>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
   11928:	68bb      	ldr	r3, [r7, #8]
   1192a:	089b      	lsrs	r3, r3, #2
   1192c:	005a      	lsls	r2, r3, #1
   1192e:	697b      	ldr	r3, [r7, #20]
   11930:	61da      	str	r2, [r3, #28]
			break;
   11932:	e005      	b.n	11940 <nvm_execute_command+0xc4>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
   11934:	697b      	ldr	r3, [r7, #20]
   11936:	693a      	ldr	r2, [r7, #16]
   11938:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
   1193a:	2317      	movs	r3, #23
   1193c:	e017      	b.n	1196e <nvm_execute_command+0xf2>
			break;
   1193e:	46c0      	nop			; (mov r8, r8)
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
   11940:	230f      	movs	r3, #15
   11942:	18fb      	adds	r3, r7, r3
   11944:	781b      	ldrb	r3, [r3, #0]
   11946:	b29b      	uxth	r3, r3
   11948:	4a11      	ldr	r2, [pc, #68]	; (11990 <nvm_execute_command+0x114>)
   1194a:	4313      	orrs	r3, r2
   1194c:	b29a      	uxth	r2, r3
   1194e:	697b      	ldr	r3, [r7, #20]
   11950:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
   11952:	46c0      	nop			; (mov r8, r8)
   11954:	4b0c      	ldr	r3, [pc, #48]	; (11988 <nvm_execute_command+0x10c>)
   11956:	4798      	blx	r3
   11958:	0003      	movs	r3, r0
   1195a:	001a      	movs	r2, r3
   1195c:	2301      	movs	r3, #1
   1195e:	4053      	eors	r3, r2
   11960:	b2db      	uxtb	r3, r3
   11962:	2b00      	cmp	r3, #0
   11964:	d1f6      	bne.n	11954 <nvm_execute_command+0xd8>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
   11966:	697b      	ldr	r3, [r7, #20]
   11968:	693a      	ldr	r2, [r7, #16]
   1196a:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   1196c:	2300      	movs	r3, #0
}
   1196e:	0018      	movs	r0, r3
   11970:	46bd      	mov	sp, r7
   11972:	b006      	add	sp, #24
   11974:	bd80      	pop	{r7, pc}
   11976:	46c0      	nop			; (mov r8, r8)
   11978:	20000404 	.word	0x20000404
   1197c:	00803fff 	.word	0x00803fff
   11980:	00806000 	.word	0x00806000
   11984:	41004000 	.word	0x41004000
   11988:	00011721 	.word	0x00011721
   1198c:	00019750 	.word	0x00019750
   11990:	ffffa500 	.word	0xffffa500

00011994 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
   11994:	b580      	push	{r7, lr}
   11996:	b088      	sub	sp, #32
   11998:	af00      	add	r7, sp, #0
   1199a:	60f8      	str	r0, [r7, #12]
   1199c:	60b9      	str	r1, [r7, #8]
   1199e:	1dbb      	adds	r3, r7, #6
   119a0:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   119a2:	4b4a      	ldr	r3, [pc, #296]	; (11acc <nvm_write_buffer+0x138>)
   119a4:	881b      	ldrh	r3, [r3, #0]
   119a6:	001a      	movs	r2, r3
   119a8:	4b48      	ldr	r3, [pc, #288]	; (11acc <nvm_write_buffer+0x138>)
   119aa:	885b      	ldrh	r3, [r3, #2]
   119ac:	435a      	muls	r2, r3
	if (destination_address >
   119ae:	68fb      	ldr	r3, [r7, #12]
   119b0:	429a      	cmp	r2, r3
   119b2:	d201      	bcs.n	119b8 <nvm_write_buffer+0x24>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
   119b4:	2318      	movs	r3, #24
   119b6:	e084      	b.n	11ac2 <nvm_write_buffer+0x12e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
   119b8:	4b44      	ldr	r3, [pc, #272]	; (11acc <nvm_write_buffer+0x138>)
   119ba:	881b      	ldrh	r3, [r3, #0]
   119bc:	3b01      	subs	r3, #1
   119be:	001a      	movs	r2, r3
   119c0:	68fb      	ldr	r3, [r7, #12]
   119c2:	4013      	ands	r3, r2
   119c4:	d001      	beq.n	119ca <nvm_write_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
   119c6:	2318      	movs	r3, #24
   119c8:	e07b      	b.n	11ac2 <nvm_write_buffer+0x12e>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
   119ca:	4b40      	ldr	r3, [pc, #256]	; (11acc <nvm_write_buffer+0x138>)
   119cc:	881b      	ldrh	r3, [r3, #0]
   119ce:	1dba      	adds	r2, r7, #6
   119d0:	8812      	ldrh	r2, [r2, #0]
   119d2:	429a      	cmp	r2, r3
   119d4:	d901      	bls.n	119da <nvm_write_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
   119d6:	2317      	movs	r3, #23
   119d8:	e073      	b.n	11ac2 <nvm_write_buffer+0x12e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   119da:	4b3d      	ldr	r3, [pc, #244]	; (11ad0 <nvm_write_buffer+0x13c>)
   119dc:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   119de:	4b3d      	ldr	r3, [pc, #244]	; (11ad4 <nvm_write_buffer+0x140>)
   119e0:	4798      	blx	r3
   119e2:	0003      	movs	r3, r0
   119e4:	001a      	movs	r2, r3
   119e6:	2301      	movs	r3, #1
   119e8:	4053      	eors	r3, r2
   119ea:	b2db      	uxtb	r3, r3
   119ec:	2b00      	cmp	r3, #0
   119ee:	d001      	beq.n	119f4 <nvm_write_buffer+0x60>
		return STATUS_BUSY;
   119f0:	2305      	movs	r3, #5
   119f2:	e066      	b.n	11ac2 <nvm_write_buffer+0x12e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
   119f4:	697b      	ldr	r3, [r7, #20]
   119f6:	4a38      	ldr	r2, [pc, #224]	; (11ad8 <nvm_write_buffer+0x144>)
   119f8:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
   119fa:	46c0      	nop			; (mov r8, r8)
   119fc:	4b35      	ldr	r3, [pc, #212]	; (11ad4 <nvm_write_buffer+0x140>)
   119fe:	4798      	blx	r3
   11a00:	0003      	movs	r3, r0
   11a02:	001a      	movs	r2, r3
   11a04:	2301      	movs	r3, #1
   11a06:	4053      	eors	r3, r2
   11a08:	b2db      	uxtb	r3, r3
   11a0a:	2b00      	cmp	r3, #0
   11a0c:	d1f6      	bne.n	119fc <nvm_write_buffer+0x68>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   11a0e:	697b      	ldr	r3, [r7, #20]
   11a10:	2220      	movs	r2, #32
   11a12:	32ff      	adds	r2, #255	; 0xff
   11a14:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
   11a16:	68fb      	ldr	r3, [r7, #12]
   11a18:	085b      	lsrs	r3, r3, #1
   11a1a:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
   11a1c:	231a      	movs	r3, #26
   11a1e:	18fb      	adds	r3, r7, r3
   11a20:	2200      	movs	r2, #0
   11a22:	801a      	strh	r2, [r3, #0]
   11a24:	e032      	b.n	11a8c <nvm_write_buffer+0xf8>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
   11a26:	231a      	movs	r3, #26
   11a28:	18fb      	adds	r3, r7, r3
   11a2a:	881b      	ldrh	r3, [r3, #0]
   11a2c:	68ba      	ldr	r2, [r7, #8]
   11a2e:	18d3      	adds	r3, r2, r3
   11a30:	781a      	ldrb	r2, [r3, #0]
   11a32:	2318      	movs	r3, #24
   11a34:	18fb      	adds	r3, r7, r3
   11a36:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
   11a38:	231a      	movs	r3, #26
   11a3a:	18fb      	adds	r3, r7, r3
   11a3c:	881a      	ldrh	r2, [r3, #0]
   11a3e:	1dbb      	adds	r3, r7, #6
   11a40:	881b      	ldrh	r3, [r3, #0]
   11a42:	3b01      	subs	r3, #1
   11a44:	429a      	cmp	r2, r3
   11a46:	da11      	bge.n	11a6c <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
   11a48:	231a      	movs	r3, #26
   11a4a:	18fb      	adds	r3, r7, r3
   11a4c:	881b      	ldrh	r3, [r3, #0]
   11a4e:	3301      	adds	r3, #1
   11a50:	68ba      	ldr	r2, [r7, #8]
   11a52:	18d3      	adds	r3, r2, r3
   11a54:	781b      	ldrb	r3, [r3, #0]
   11a56:	021b      	lsls	r3, r3, #8
   11a58:	b21a      	sxth	r2, r3
   11a5a:	2318      	movs	r3, #24
   11a5c:	18fb      	adds	r3, r7, r3
   11a5e:	2100      	movs	r1, #0
   11a60:	5e5b      	ldrsh	r3, [r3, r1]
   11a62:	4313      	orrs	r3, r2
   11a64:	b21a      	sxth	r2, r3
   11a66:	2318      	movs	r3, #24
   11a68:	18fb      	adds	r3, r7, r3
   11a6a:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
   11a6c:	69fb      	ldr	r3, [r7, #28]
   11a6e:	1c5a      	adds	r2, r3, #1
   11a70:	61fa      	str	r2, [r7, #28]
   11a72:	005b      	lsls	r3, r3, #1
   11a74:	001a      	movs	r2, r3
   11a76:	2318      	movs	r3, #24
   11a78:	18fb      	adds	r3, r7, r3
   11a7a:	881b      	ldrh	r3, [r3, #0]
   11a7c:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
   11a7e:	231a      	movs	r3, #26
   11a80:	18fb      	adds	r3, r7, r3
   11a82:	221a      	movs	r2, #26
   11a84:	18ba      	adds	r2, r7, r2
   11a86:	8812      	ldrh	r2, [r2, #0]
   11a88:	3202      	adds	r2, #2
   11a8a:	801a      	strh	r2, [r3, #0]
   11a8c:	231a      	movs	r3, #26
   11a8e:	18fa      	adds	r2, r7, r3
   11a90:	1dbb      	adds	r3, r7, #6
   11a92:	8812      	ldrh	r2, [r2, #0]
   11a94:	881b      	ldrh	r3, [r3, #0]
   11a96:	429a      	cmp	r2, r3
   11a98:	d3c5      	bcc.n	11a26 <nvm_write_buffer+0x92>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
   11a9a:	4b0c      	ldr	r3, [pc, #48]	; (11acc <nvm_write_buffer+0x138>)
   11a9c:	791b      	ldrb	r3, [r3, #4]
   11a9e:	2201      	movs	r2, #1
   11aa0:	4053      	eors	r3, r2
   11aa2:	b2db      	uxtb	r3, r3
   11aa4:	2b00      	cmp	r3, #0
   11aa6:	d00b      	beq.n	11ac0 <nvm_write_buffer+0x12c>
   11aa8:	1dbb      	adds	r3, r7, #6
   11aaa:	881b      	ldrh	r3, [r3, #0]
   11aac:	2b3f      	cmp	r3, #63	; 0x3f
   11aae:	d807      	bhi.n	11ac0 <nvm_write_buffer+0x12c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
   11ab0:	68fb      	ldr	r3, [r7, #12]
   11ab2:	2200      	movs	r2, #0
   11ab4:	0019      	movs	r1, r3
   11ab6:	2004      	movs	r0, #4
   11ab8:	4b08      	ldr	r3, [pc, #32]	; (11adc <nvm_write_buffer+0x148>)
   11aba:	4798      	blx	r3
   11abc:	0003      	movs	r3, r0
   11abe:	e000      	b.n	11ac2 <nvm_write_buffer+0x12e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
   11ac0:	2300      	movs	r3, #0
}
   11ac2:	0018      	movs	r0, r3
   11ac4:	46bd      	mov	sp, r7
   11ac6:	b008      	add	sp, #32
   11ac8:	bd80      	pop	{r7, pc}
   11aca:	46c0      	nop			; (mov r8, r8)
   11acc:	20000404 	.word	0x20000404
   11ad0:	41004000 	.word	0x41004000
   11ad4:	00011721 	.word	0x00011721
   11ad8:	ffffa544 	.word	0xffffa544
   11adc:	0001187d 	.word	0x0001187d

00011ae0 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
   11ae0:	b580      	push	{r7, lr}
   11ae2:	b088      	sub	sp, #32
   11ae4:	af00      	add	r7, sp, #0
   11ae6:	60f8      	str	r0, [r7, #12]
   11ae8:	60b9      	str	r1, [r7, #8]
   11aea:	1dbb      	adds	r3, r7, #6
   11aec:	801a      	strh	r2, [r3, #0]
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   11aee:	4b38      	ldr	r3, [pc, #224]	; (11bd0 <nvm_read_buffer+0xf0>)
   11af0:	881b      	ldrh	r3, [r3, #0]
   11af2:	001a      	movs	r2, r3
   11af4:	4b36      	ldr	r3, [pc, #216]	; (11bd0 <nvm_read_buffer+0xf0>)
   11af6:	885b      	ldrh	r3, [r3, #2]
   11af8:	435a      	muls	r2, r3
	if (source_address >
   11afa:	68fb      	ldr	r3, [r7, #12]
   11afc:	429a      	cmp	r2, r3
   11afe:	d201      	bcs.n	11b04 <nvm_read_buffer+0x24>
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
   11b00:	2318      	movs	r3, #24
   11b02:	e060      	b.n	11bc6 <nvm_read_buffer+0xe6>
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
   11b04:	4b32      	ldr	r3, [pc, #200]	; (11bd0 <nvm_read_buffer+0xf0>)
   11b06:	881b      	ldrh	r3, [r3, #0]
   11b08:	3b01      	subs	r3, #1
   11b0a:	001a      	movs	r2, r3
   11b0c:	68fb      	ldr	r3, [r7, #12]
   11b0e:	4013      	ands	r3, r2
   11b10:	d001      	beq.n	11b16 <nvm_read_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
   11b12:	2318      	movs	r3, #24
   11b14:	e057      	b.n	11bc6 <nvm_read_buffer+0xe6>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
   11b16:	4b2e      	ldr	r3, [pc, #184]	; (11bd0 <nvm_read_buffer+0xf0>)
   11b18:	881b      	ldrh	r3, [r3, #0]
   11b1a:	1dba      	adds	r2, r7, #6
   11b1c:	8812      	ldrh	r2, [r2, #0]
   11b1e:	429a      	cmp	r2, r3
   11b20:	d901      	bls.n	11b26 <nvm_read_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
   11b22:	2317      	movs	r3, #23
   11b24:	e04f      	b.n	11bc6 <nvm_read_buffer+0xe6>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   11b26:	4b2b      	ldr	r3, [pc, #172]	; (11bd4 <nvm_read_buffer+0xf4>)
   11b28:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   11b2a:	4b2b      	ldr	r3, [pc, #172]	; (11bd8 <nvm_read_buffer+0xf8>)
   11b2c:	4798      	blx	r3
   11b2e:	0003      	movs	r3, r0
   11b30:	001a      	movs	r2, r3
   11b32:	2301      	movs	r3, #1
   11b34:	4053      	eors	r3, r2
   11b36:	b2db      	uxtb	r3, r3
   11b38:	2b00      	cmp	r3, #0
   11b3a:	d001      	beq.n	11b40 <nvm_read_buffer+0x60>
		return STATUS_BUSY;
   11b3c:	2305      	movs	r3, #5
   11b3e:	e042      	b.n	11bc6 <nvm_read_buffer+0xe6>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   11b40:	697b      	ldr	r3, [r7, #20]
   11b42:	2220      	movs	r2, #32
   11b44:	32ff      	adds	r2, #255	; 0xff
   11b46:	831a      	strh	r2, [r3, #24]

	uint32_t page_address = source_address / 2;
   11b48:	68fb      	ldr	r3, [r7, #12]
   11b4a:	085b      	lsrs	r3, r3, #1
   11b4c:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
   11b4e:	231a      	movs	r3, #26
   11b50:	18fb      	adds	r3, r7, r3
   11b52:	2200      	movs	r2, #0
   11b54:	801a      	strh	r2, [r3, #0]
   11b56:	e02e      	b.n	11bb6 <nvm_read_buffer+0xd6>
		/* Fetch next 16-bit chunk from the NVM memory space */
		uint16_t data = NVM_MEMORY[page_address++];
   11b58:	69fb      	ldr	r3, [r7, #28]
   11b5a:	1c5a      	adds	r2, r3, #1
   11b5c:	61fa      	str	r2, [r7, #28]
   11b5e:	005b      	lsls	r3, r3, #1
   11b60:	001a      	movs	r2, r3
   11b62:	2312      	movs	r3, #18
   11b64:	18fb      	adds	r3, r7, r3
   11b66:	8812      	ldrh	r2, [r2, #0]
   11b68:	801a      	strh	r2, [r3, #0]

		/* Copy first byte of the 16-bit chunk to the destination buffer */
		buffer[i] = (data & 0xFF);
   11b6a:	231a      	movs	r3, #26
   11b6c:	18fb      	adds	r3, r7, r3
   11b6e:	881b      	ldrh	r3, [r3, #0]
   11b70:	68ba      	ldr	r2, [r7, #8]
   11b72:	18d3      	adds	r3, r2, r3
   11b74:	2212      	movs	r2, #18
   11b76:	18ba      	adds	r2, r7, r2
   11b78:	8812      	ldrh	r2, [r2, #0]
   11b7a:	b2d2      	uxtb	r2, r2
   11b7c:	701a      	strb	r2, [r3, #0]

		/* If we are not at the end of a read request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
   11b7e:	231a      	movs	r3, #26
   11b80:	18fb      	adds	r3, r7, r3
   11b82:	881a      	ldrh	r2, [r3, #0]
   11b84:	1dbb      	adds	r3, r7, #6
   11b86:	881b      	ldrh	r3, [r3, #0]
   11b88:	3b01      	subs	r3, #1
   11b8a:	429a      	cmp	r2, r3
   11b8c:	da0c      	bge.n	11ba8 <nvm_read_buffer+0xc8>
			buffer[i + 1] = (data >> 8);
   11b8e:	231a      	movs	r3, #26
   11b90:	18fb      	adds	r3, r7, r3
   11b92:	881b      	ldrh	r3, [r3, #0]
   11b94:	3301      	adds	r3, #1
   11b96:	68ba      	ldr	r2, [r7, #8]
   11b98:	18d3      	adds	r3, r2, r3
   11b9a:	2212      	movs	r2, #18
   11b9c:	18ba      	adds	r2, r7, r2
   11b9e:	8812      	ldrh	r2, [r2, #0]
   11ba0:	0a12      	lsrs	r2, r2, #8
   11ba2:	b292      	uxth	r2, r2
   11ba4:	b2d2      	uxtb	r2, r2
   11ba6:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < length; i += 2) {
   11ba8:	231a      	movs	r3, #26
   11baa:	18fb      	adds	r3, r7, r3
   11bac:	221a      	movs	r2, #26
   11bae:	18ba      	adds	r2, r7, r2
   11bb0:	8812      	ldrh	r2, [r2, #0]
   11bb2:	3202      	adds	r2, #2
   11bb4:	801a      	strh	r2, [r3, #0]
   11bb6:	231a      	movs	r3, #26
   11bb8:	18fa      	adds	r2, r7, r3
   11bba:	1dbb      	adds	r3, r7, #6
   11bbc:	8812      	ldrh	r2, [r2, #0]
   11bbe:	881b      	ldrh	r3, [r3, #0]
   11bc0:	429a      	cmp	r2, r3
   11bc2:	d3c9      	bcc.n	11b58 <nvm_read_buffer+0x78>
		}
	}

	return STATUS_OK;
   11bc4:	2300      	movs	r3, #0
}
   11bc6:	0018      	movs	r0, r3
   11bc8:	46bd      	mov	sp, r7
   11bca:	b008      	add	sp, #32
   11bcc:	bd80      	pop	{r7, pc}
   11bce:	46c0      	nop			; (mov r8, r8)
   11bd0:	20000404 	.word	0x20000404
   11bd4:	41004000 	.word	0x41004000
   11bd8:	00011721 	.word	0x00011721

00011bdc <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
   11bdc:	b580      	push	{r7, lr}
   11bde:	b084      	sub	sp, #16
   11be0:	af00      	add	r7, sp, #0
   11be2:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   11be4:	4b23      	ldr	r3, [pc, #140]	; (11c74 <nvm_erase_row+0x98>)
   11be6:	881b      	ldrh	r3, [r3, #0]
   11be8:	001a      	movs	r2, r3
   11bea:	4b22      	ldr	r3, [pc, #136]	; (11c74 <nvm_erase_row+0x98>)
   11bec:	885b      	ldrh	r3, [r3, #2]
   11bee:	435a      	muls	r2, r3
	if (row_address >
   11bf0:	687b      	ldr	r3, [r7, #4]
   11bf2:	429a      	cmp	r2, r3
   11bf4:	d201      	bcs.n	11bfa <nvm_erase_row+0x1e>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
   11bf6:	2318      	movs	r3, #24
   11bf8:	e037      	b.n	11c6a <nvm_erase_row+0x8e>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
   11bfa:	4b1e      	ldr	r3, [pc, #120]	; (11c74 <nvm_erase_row+0x98>)
   11bfc:	881b      	ldrh	r3, [r3, #0]
   11bfe:	009b      	lsls	r3, r3, #2
   11c00:	3b01      	subs	r3, #1
   11c02:	001a      	movs	r2, r3
   11c04:	687b      	ldr	r3, [r7, #4]
   11c06:	4013      	ands	r3, r2
   11c08:	d001      	beq.n	11c0e <nvm_erase_row+0x32>
		return STATUS_ERR_BAD_ADDRESS;
   11c0a:	2318      	movs	r3, #24
   11c0c:	e02d      	b.n	11c6a <nvm_erase_row+0x8e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   11c0e:	4b1a      	ldr	r3, [pc, #104]	; (11c78 <nvm_erase_row+0x9c>)
   11c10:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   11c12:	4b1a      	ldr	r3, [pc, #104]	; (11c7c <nvm_erase_row+0xa0>)
   11c14:	4798      	blx	r3
   11c16:	0003      	movs	r3, r0
   11c18:	001a      	movs	r2, r3
   11c1a:	2301      	movs	r3, #1
   11c1c:	4053      	eors	r3, r2
   11c1e:	b2db      	uxtb	r3, r3
   11c20:	2b00      	cmp	r3, #0
   11c22:	d001      	beq.n	11c28 <nvm_erase_row+0x4c>
		return STATUS_BUSY;
   11c24:	2305      	movs	r3, #5
   11c26:	e020      	b.n	11c6a <nvm_erase_row+0x8e>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   11c28:	68fb      	ldr	r3, [r7, #12]
   11c2a:	2220      	movs	r2, #32
   11c2c:	32ff      	adds	r2, #255	; 0xff
   11c2e:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
   11c30:	687b      	ldr	r3, [r7, #4]
   11c32:	089b      	lsrs	r3, r3, #2
   11c34:	005a      	lsls	r2, r3, #1
   11c36:	68fb      	ldr	r3, [r7, #12]
   11c38:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
   11c3a:	68fb      	ldr	r3, [r7, #12]
   11c3c:	4a10      	ldr	r2, [pc, #64]	; (11c80 <nvm_erase_row+0xa4>)
   11c3e:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
   11c40:	46c0      	nop			; (mov r8, r8)
   11c42:	4b0e      	ldr	r3, [pc, #56]	; (11c7c <nvm_erase_row+0xa0>)
   11c44:	4798      	blx	r3
   11c46:	0003      	movs	r3, r0
   11c48:	001a      	movs	r2, r3
   11c4a:	2301      	movs	r3, #1
   11c4c:	4053      	eors	r3, r2
   11c4e:	b2db      	uxtb	r3, r3
   11c50:	2b00      	cmp	r3, #0
   11c52:	d1f6      	bne.n	11c42 <nvm_erase_row+0x66>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
   11c54:	68fb      	ldr	r3, [r7, #12]
   11c56:	8b1b      	ldrh	r3, [r3, #24]
   11c58:	b29b      	uxth	r3, r3
   11c5a:	b2db      	uxtb	r3, r3
   11c5c:	001a      	movs	r2, r3
   11c5e:	231c      	movs	r3, #28
   11c60:	4013      	ands	r3, r2
   11c62:	d001      	beq.n	11c68 <nvm_erase_row+0x8c>
		return STATUS_ABORTED;
   11c64:	2304      	movs	r3, #4
   11c66:	e000      	b.n	11c6a <nvm_erase_row+0x8e>
	}

	return STATUS_OK;
   11c68:	2300      	movs	r3, #0
}
   11c6a:	0018      	movs	r0, r3
   11c6c:	46bd      	mov	sp, r7
   11c6e:	b004      	add	sp, #16
   11c70:	bd80      	pop	{r7, pc}
   11c72:	46c0      	nop			; (mov r8, r8)
   11c74:	20000404 	.word	0x20000404
   11c78:	41004000 	.word	0x41004000
   11c7c:	00011721 	.word	0x00011721
   11c80:	ffffa502 	.word	0xffffa502

00011c84 <nvm_get_parameters>:
 * \param[out] parameters    Parameter structure, which holds page size and
 *                           number of pages in the NVM memory
 */
void nvm_get_parameters(
		struct nvm_parameters *const parameters)
{
   11c84:	b580      	push	{r7, lr}
   11c86:	b086      	sub	sp, #24
   11c88:	af00      	add	r7, sp, #0
   11c8a:	6078      	str	r0, [r7, #4]
	/* Sanity check parameters */
	Assert(parameters);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   11c8c:	4b2a      	ldr	r3, [pc, #168]	; (11d38 <nvm_get_parameters+0xb4>)
   11c8e:	617b      	str	r3, [r7, #20]

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   11c90:	697b      	ldr	r3, [r7, #20]
   11c92:	2220      	movs	r2, #32
   11c94:	32ff      	adds	r2, #255	; 0xff
   11c96:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
   11c98:	697b      	ldr	r3, [r7, #20]
   11c9a:	689b      	ldr	r3, [r3, #8]
   11c9c:	613b      	str	r3, [r7, #16]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
   11c9e:	693b      	ldr	r3, [r7, #16]
   11ca0:	0c1b      	lsrs	r3, r3, #16
   11ca2:	2207      	movs	r2, #7
   11ca4:	4013      	ands	r3, r2
   11ca6:	2208      	movs	r2, #8
   11ca8:	409a      	lsls	r2, r3
   11caa:	0013      	movs	r3, r2
	parameters->page_size =
   11cac:	b2da      	uxtb	r2, r3
   11cae:	687b      	ldr	r3, [r7, #4]
   11cb0:	701a      	strb	r2, [r3, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
   11cb2:	693b      	ldr	r3, [r7, #16]
   11cb4:	b29a      	uxth	r2, r3
   11cb6:	687b      	ldr	r3, [r7, #4]
   11cb8:	805a      	strh	r2, [r3, #2]
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
   11cba:	4b20      	ldr	r3, [pc, #128]	; (11d3c <nvm_get_parameters+0xb8>)
   11cbc:	881b      	ldrh	r3, [r3, #0]
   11cbe:	b29b      	uxth	r3, r3
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;
   11cc0:	091b      	lsrs	r3, r3, #4
   11cc2:	b29a      	uxth	r2, r3
	uint16_t eeprom_fuse_value =
   11cc4:	230e      	movs	r3, #14
   11cc6:	18fb      	adds	r3, r7, r3
   11cc8:	2107      	movs	r1, #7
   11cca:	400a      	ands	r2, r1
   11ccc:	801a      	strh	r2, [r3, #0]

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
   11cce:	230e      	movs	r3, #14
   11cd0:	18fb      	adds	r3, r7, r3
   11cd2:	881b      	ldrh	r3, [r3, #0]
   11cd4:	2b07      	cmp	r3, #7
   11cd6:	d103      	bne.n	11ce0 <nvm_get_parameters+0x5c>
		parameters->eeprom_number_of_pages = 0;
   11cd8:	687b      	ldr	r3, [r7, #4]
   11cda:	2200      	movs	r2, #0
   11cdc:	605a      	str	r2, [r3, #4]
   11cde:	e00a      	b.n	11cf6 <nvm_get_parameters+0x72>
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
   11ce0:	230e      	movs	r3, #14
   11ce2:	18fb      	adds	r3, r7, r3
   11ce4:	881b      	ldrh	r3, [r3, #0]
   11ce6:	2206      	movs	r2, #6
   11ce8:	1ad3      	subs	r3, r2, r3
   11cea:	2204      	movs	r2, #4
   11cec:	409a      	lsls	r2, r3
   11cee:	0013      	movs	r3, r2
   11cf0:	001a      	movs	r2, r3
		parameters->eeprom_number_of_pages =
   11cf2:	687b      	ldr	r3, [r7, #4]
   11cf4:	605a      	str	r2, [r3, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
   11cf6:	4b11      	ldr	r3, [pc, #68]	; (11d3c <nvm_get_parameters+0xb8>)
   11cf8:	881b      	ldrh	r3, [r3, #0]
   11cfa:	b29a      	uxth	r2, r3
	uint16_t boot_fuse_value =
   11cfc:	230c      	movs	r3, #12
   11cfe:	18fb      	adds	r3, r7, r3
   11d00:	2107      	movs	r1, #7
   11d02:	400a      	ands	r2, r1
   11d04:	801a      	strh	r2, [r3, #0]
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
   11d06:	230c      	movs	r3, #12
   11d08:	18fb      	adds	r3, r7, r3
   11d0a:	881b      	ldrh	r3, [r3, #0]
   11d0c:	2b07      	cmp	r3, #7
   11d0e:	d103      	bne.n	11d18 <nvm_get_parameters+0x94>
		parameters->bootloader_number_of_pages = 0;
   11d10:	687b      	ldr	r3, [r7, #4]
   11d12:	2200      	movs	r2, #0
   11d14:	609a      	str	r2, [r3, #8]
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
	}
}
   11d16:	e00a      	b.n	11d2e <nvm_get_parameters+0xaa>
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
   11d18:	230c      	movs	r3, #12
   11d1a:	18fb      	adds	r3, r7, r3
   11d1c:	881b      	ldrh	r3, [r3, #0]
   11d1e:	2207      	movs	r2, #7
   11d20:	1ad3      	subs	r3, r2, r3
   11d22:	2204      	movs	r2, #4
   11d24:	409a      	lsls	r2, r3
   11d26:	0013      	movs	r3, r2
   11d28:	001a      	movs	r2, r3
		parameters->bootloader_number_of_pages =
   11d2a:	687b      	ldr	r3, [r7, #4]
   11d2c:	609a      	str	r2, [r3, #8]
}
   11d2e:	46c0      	nop			; (mov r8, r8)
   11d30:	46bd      	mov	sp, r7
   11d32:	b006      	add	sp, #24
   11d34:	bd80      	pop	{r7, pc}
   11d36:	46c0      	nop			; (mov r8, r8)
   11d38:	41004000 	.word	0x41004000
   11d3c:	00804000 	.word	0x00804000

00011d40 <system_pinmux_get_config_defaults>:
{
   11d40:	b580      	push	{r7, lr}
   11d42:	b082      	sub	sp, #8
   11d44:	af00      	add	r7, sp, #0
   11d46:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   11d48:	687b      	ldr	r3, [r7, #4]
   11d4a:	2280      	movs	r2, #128	; 0x80
   11d4c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   11d4e:	687b      	ldr	r3, [r7, #4]
   11d50:	2200      	movs	r2, #0
   11d52:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   11d54:	687b      	ldr	r3, [r7, #4]
   11d56:	2201      	movs	r2, #1
   11d58:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   11d5a:	687b      	ldr	r3, [r7, #4]
   11d5c:	2200      	movs	r2, #0
   11d5e:	70da      	strb	r2, [r3, #3]
}
   11d60:	46c0      	nop			; (mov r8, r8)
   11d62:	46bd      	mov	sp, r7
   11d64:	b002      	add	sp, #8
   11d66:	bd80      	pop	{r7, pc}

00011d68 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   11d68:	b580      	push	{r7, lr}
   11d6a:	b084      	sub	sp, #16
   11d6c:	af00      	add	r7, sp, #0
   11d6e:	0002      	movs	r2, r0
   11d70:	6039      	str	r1, [r7, #0]
   11d72:	1dfb      	adds	r3, r7, #7
   11d74:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   11d76:	230c      	movs	r3, #12
   11d78:	18fb      	adds	r3, r7, r3
   11d7a:	0018      	movs	r0, r3
   11d7c:	4b10      	ldr	r3, [pc, #64]	; (11dc0 <port_pin_set_config+0x58>)
   11d7e:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   11d80:	230c      	movs	r3, #12
   11d82:	18fb      	adds	r3, r7, r3
   11d84:	2280      	movs	r2, #128	; 0x80
   11d86:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   11d88:	683b      	ldr	r3, [r7, #0]
   11d8a:	781a      	ldrb	r2, [r3, #0]
   11d8c:	230c      	movs	r3, #12
   11d8e:	18fb      	adds	r3, r7, r3
   11d90:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   11d92:	683b      	ldr	r3, [r7, #0]
   11d94:	785a      	ldrb	r2, [r3, #1]
   11d96:	230c      	movs	r3, #12
   11d98:	18fb      	adds	r3, r7, r3
   11d9a:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   11d9c:	683b      	ldr	r3, [r7, #0]
   11d9e:	789a      	ldrb	r2, [r3, #2]
   11da0:	230c      	movs	r3, #12
   11da2:	18fb      	adds	r3, r7, r3
   11da4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   11da6:	230c      	movs	r3, #12
   11da8:	18fa      	adds	r2, r7, r3
   11daa:	1dfb      	adds	r3, r7, #7
   11dac:	781b      	ldrb	r3, [r3, #0]
   11dae:	0011      	movs	r1, r2
   11db0:	0018      	movs	r0, r3
   11db2:	4b04      	ldr	r3, [pc, #16]	; (11dc4 <port_pin_set_config+0x5c>)
   11db4:	4798      	blx	r3
}
   11db6:	46c0      	nop			; (mov r8, r8)
   11db8:	46bd      	mov	sp, r7
   11dba:	b004      	add	sp, #16
   11dbc:	bd80      	pop	{r7, pc}
   11dbe:	46c0      	nop			; (mov r8, r8)
   11dc0:	00011d41 	.word	0x00011d41
   11dc4:	00013a99 	.word	0x00013a99

00011dc8 <nvm_get_config_defaults>:
{
   11dc8:	b580      	push	{r7, lr}
   11dca:	b082      	sub	sp, #8
   11dcc:	af00      	add	r7, sp, #0
   11dce:	6078      	str	r0, [r7, #4]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
   11dd0:	687b      	ldr	r3, [r7, #4]
   11dd2:	2200      	movs	r2, #0
   11dd4:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
   11dd6:	687b      	ldr	r3, [r7, #4]
   11dd8:	2201      	movs	r2, #1
   11dda:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
   11ddc:	4b08      	ldr	r3, [pc, #32]	; (11e00 <nvm_get_config_defaults+0x38>)
   11dde:	685b      	ldr	r3, [r3, #4]
   11de0:	06db      	lsls	r3, r3, #27
   11de2:	0f1b      	lsrs	r3, r3, #28
   11de4:	b2db      	uxtb	r3, r3
   11de6:	001a      	movs	r2, r3
   11de8:	687b      	ldr	r3, [r7, #4]
   11dea:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
   11dec:	687b      	ldr	r3, [r7, #4]
   11dee:	2200      	movs	r2, #0
   11df0:	70da      	strb	r2, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
   11df2:	687b      	ldr	r3, [r7, #4]
   11df4:	2200      	movs	r2, #0
   11df6:	711a      	strb	r2, [r3, #4]
}
   11df8:	46c0      	nop			; (mov r8, r8)
   11dfa:	46bd      	mov	sp, r7
   11dfc:	b002      	add	sp, #8
   11dfe:	bd80      	pop	{r7, pc}
   11e00:	41004000 	.word	0x41004000

00011e04 <_eeprom_emulator_nvm_erase_row>:
 *
 *  \param[in] row  Physical row in EEPROM space to erase
 */
static void _eeprom_emulator_nvm_erase_row(
		const uint8_t row)
{
   11e04:	b590      	push	{r4, r7, lr}
   11e06:	b085      	sub	sp, #20
   11e08:	af00      	add	r7, sp, #0
   11e0a:	0002      	movs	r2, r0
   11e0c:	1dfb      	adds	r3, r7, #7
   11e0e:	701a      	strb	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   11e10:	230f      	movs	r3, #15
   11e12:	18fb      	adds	r3, r7, r3
   11e14:	2200      	movs	r2, #0
   11e16:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_erase_row(
				(uint32_t)&_eeprom_instance.flash[row * NVMCTRL_ROW_PAGES]);
   11e18:	4b0a      	ldr	r3, [pc, #40]	; (11e44 <_eeprom_emulator_nvm_erase_row+0x40>)
   11e1a:	685b      	ldr	r3, [r3, #4]
   11e1c:	1dfa      	adds	r2, r7, #7
   11e1e:	7812      	ldrb	r2, [r2, #0]
   11e20:	0212      	lsls	r2, r2, #8
   11e22:	189b      	adds	r3, r3, r2
		error_code = nvm_erase_row(
   11e24:	220f      	movs	r2, #15
   11e26:	18bc      	adds	r4, r7, r2
   11e28:	0018      	movs	r0, r3
   11e2a:	4b07      	ldr	r3, [pc, #28]	; (11e48 <_eeprom_emulator_nvm_erase_row+0x44>)
   11e2c:	4798      	blx	r3
   11e2e:	0003      	movs	r3, r0
   11e30:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   11e32:	230f      	movs	r3, #15
   11e34:	18fb      	adds	r3, r7, r3
   11e36:	781b      	ldrb	r3, [r3, #0]
   11e38:	2b05      	cmp	r3, #5
   11e3a:	d0ed      	beq.n	11e18 <_eeprom_emulator_nvm_erase_row+0x14>
}
   11e3c:	46c0      	nop			; (mov r8, r8)
   11e3e:	46bd      	mov	sp, r7
   11e40:	b005      	add	sp, #20
   11e42:	bd90      	pop	{r4, r7, pc}
   11e44:	2000040c 	.word	0x2000040c
   11e48:	00011bdd 	.word	0x00011bdd

00011e4c <_eeprom_emulator_nvm_fill_cache>:
 *  \param[in] data           Data to write to the physical memory page
 */
static void _eeprom_emulator_nvm_fill_cache(
		const uint16_t physical_page,
		const void* const data)
{
   11e4c:	b590      	push	{r4, r7, lr}
   11e4e:	b085      	sub	sp, #20
   11e50:	af00      	add	r7, sp, #0
   11e52:	0002      	movs	r2, r0
   11e54:	6039      	str	r1, [r7, #0]
   11e56:	1dbb      	adds	r3, r7, #6
   11e58:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   11e5a:	230f      	movs	r3, #15
   11e5c:	18fb      	adds	r3, r7, r3
   11e5e:	2200      	movs	r2, #0
   11e60:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_write_buffer(
				(uint32_t)&_eeprom_instance.flash[physical_page],
   11e62:	4b0c      	ldr	r3, [pc, #48]	; (11e94 <_eeprom_emulator_nvm_fill_cache+0x48>)
   11e64:	685a      	ldr	r2, [r3, #4]
   11e66:	1dbb      	adds	r3, r7, #6
   11e68:	881b      	ldrh	r3, [r3, #0]
   11e6a:	019b      	lsls	r3, r3, #6
   11e6c:	18d3      	adds	r3, r2, r3
		error_code = nvm_write_buffer(
   11e6e:	0018      	movs	r0, r3
   11e70:	230f      	movs	r3, #15
   11e72:	18fc      	adds	r4, r7, r3
   11e74:	683b      	ldr	r3, [r7, #0]
   11e76:	2240      	movs	r2, #64	; 0x40
   11e78:	0019      	movs	r1, r3
   11e7a:	4b07      	ldr	r3, [pc, #28]	; (11e98 <_eeprom_emulator_nvm_fill_cache+0x4c>)
   11e7c:	4798      	blx	r3
   11e7e:	0003      	movs	r3, r0
   11e80:	7023      	strb	r3, [r4, #0]
				(uint8_t*)data,
				NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
   11e82:	230f      	movs	r3, #15
   11e84:	18fb      	adds	r3, r7, r3
   11e86:	781b      	ldrb	r3, [r3, #0]
   11e88:	2b05      	cmp	r3, #5
   11e8a:	d0ea      	beq.n	11e62 <_eeprom_emulator_nvm_fill_cache+0x16>
}
   11e8c:	46c0      	nop			; (mov r8, r8)
   11e8e:	46bd      	mov	sp, r7
   11e90:	b005      	add	sp, #20
   11e92:	bd90      	pop	{r4, r7, pc}
   11e94:	2000040c 	.word	0x2000040c
   11e98:	00011995 	.word	0x00011995

00011e9c <_eeprom_emulator_nvm_commit_cache>:
 *
 *  \param[in] physical_page  Physical page in EEPROM space to commit
 */
static void _eeprom_emulator_nvm_commit_cache(
		const uint16_t physical_page)
{
   11e9c:	b590      	push	{r4, r7, lr}
   11e9e:	b085      	sub	sp, #20
   11ea0:	af00      	add	r7, sp, #0
   11ea2:	0002      	movs	r2, r0
   11ea4:	1dbb      	adds	r3, r7, #6
   11ea6:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   11ea8:	230f      	movs	r3, #15
   11eaa:	18fb      	adds	r3, r7, r3
   11eac:	2200      	movs	r2, #0
   11eae:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_execute_command(
				NVM_COMMAND_WRITE_PAGE,
				(uint32_t)&_eeprom_instance.flash[physical_page], 0);
   11eb0:	4b0b      	ldr	r3, [pc, #44]	; (11ee0 <_eeprom_emulator_nvm_commit_cache+0x44>)
   11eb2:	685a      	ldr	r2, [r3, #4]
   11eb4:	1dbb      	adds	r3, r7, #6
   11eb6:	881b      	ldrh	r3, [r3, #0]
   11eb8:	019b      	lsls	r3, r3, #6
   11eba:	18d3      	adds	r3, r2, r3
		error_code = nvm_execute_command(
   11ebc:	220f      	movs	r2, #15
   11ebe:	18bc      	adds	r4, r7, r2
   11ec0:	2200      	movs	r2, #0
   11ec2:	0019      	movs	r1, r3
   11ec4:	2004      	movs	r0, #4
   11ec6:	4b07      	ldr	r3, [pc, #28]	; (11ee4 <_eeprom_emulator_nvm_commit_cache+0x48>)
   11ec8:	4798      	blx	r3
   11eca:	0003      	movs	r3, r0
   11ecc:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   11ece:	230f      	movs	r3, #15
   11ed0:	18fb      	adds	r3, r7, r3
   11ed2:	781b      	ldrb	r3, [r3, #0]
   11ed4:	2b05      	cmp	r3, #5
   11ed6:	d0eb      	beq.n	11eb0 <_eeprom_emulator_nvm_commit_cache+0x14>
}
   11ed8:	46c0      	nop			; (mov r8, r8)
   11eda:	46bd      	mov	sp, r7
   11edc:	b005      	add	sp, #20
   11ede:	bd90      	pop	{r4, r7, pc}
   11ee0:	2000040c 	.word	0x2000040c
   11ee4:	0001187d 	.word	0x0001187d

00011ee8 <_eeprom_emulator_nvm_read_page>:
 *  \param[out] data           Destination buffer to fill with the read data
 */
static void _eeprom_emulator_nvm_read_page(
		const uint16_t physical_page,
		void* const data)
{
   11ee8:	b590      	push	{r4, r7, lr}
   11eea:	b085      	sub	sp, #20
   11eec:	af00      	add	r7, sp, #0
   11eee:	0002      	movs	r2, r0
   11ef0:	6039      	str	r1, [r7, #0]
   11ef2:	1dbb      	adds	r3, r7, #6
   11ef4:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   11ef6:	230f      	movs	r3, #15
   11ef8:	18fb      	adds	r3, r7, r3
   11efa:	2200      	movs	r2, #0
   11efc:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_read_buffer(
				(uint32_t)&_eeprom_instance.flash[physical_page],
   11efe:	4b0c      	ldr	r3, [pc, #48]	; (11f30 <_eeprom_emulator_nvm_read_page+0x48>)
   11f00:	685a      	ldr	r2, [r3, #4]
   11f02:	1dbb      	adds	r3, r7, #6
   11f04:	881b      	ldrh	r3, [r3, #0]
   11f06:	019b      	lsls	r3, r3, #6
   11f08:	18d3      	adds	r3, r2, r3
		error_code = nvm_read_buffer(
   11f0a:	0018      	movs	r0, r3
   11f0c:	230f      	movs	r3, #15
   11f0e:	18fc      	adds	r4, r7, r3
   11f10:	683b      	ldr	r3, [r7, #0]
   11f12:	2240      	movs	r2, #64	; 0x40
   11f14:	0019      	movs	r1, r3
   11f16:	4b07      	ldr	r3, [pc, #28]	; (11f34 <_eeprom_emulator_nvm_read_page+0x4c>)
   11f18:	4798      	blx	r3
   11f1a:	0003      	movs	r3, r0
   11f1c:	7023      	strb	r3, [r4, #0]
				(uint8_t*)data,
				NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
   11f1e:	230f      	movs	r3, #15
   11f20:	18fb      	adds	r3, r7, r3
   11f22:	781b      	ldrb	r3, [r3, #0]
   11f24:	2b05      	cmp	r3, #5
   11f26:	d0ea      	beq.n	11efe <_eeprom_emulator_nvm_read_page+0x16>
}
   11f28:	46c0      	nop			; (mov r8, r8)
   11f2a:	46bd      	mov	sp, r7
   11f2c:	b005      	add	sp, #20
   11f2e:	bd90      	pop	{r4, r7, pc}
   11f30:	2000040c 	.word	0x2000040c
   11f34:	00011ae1 	.word	0x00011ae1

00011f38 <_eeprom_emulator_format_memory>:

/**
 * \brief Initializes the emulated EEPROM memory, destroying the current contents.
 */
static void _eeprom_emulator_format_memory(void)
{
   11f38:	b580      	push	{r7, lr}
   11f3a:	b092      	sub	sp, #72	; 0x48
   11f3c:	af00      	add	r7, sp, #0
	uint16_t logical_page = 0;
   11f3e:	2346      	movs	r3, #70	; 0x46
   11f40:	18fb      	adds	r3, r7, r3
   11f42:	2200      	movs	r2, #0
   11f44:	801a      	strh	r2, [r3, #0]

	/* Set row 0 as the spare row */
	_eeprom_instance.spare_row = 0;
   11f46:	4b32      	ldr	r3, [pc, #200]	; (12010 <_eeprom_emulator_format_memory+0xd8>)
   11f48:	2287      	movs	r2, #135	; 0x87
   11f4a:	2100      	movs	r1, #0
   11f4c:	5499      	strb	r1, [r3, r2]
	_eeprom_emulator_nvm_erase_row(_eeprom_instance.spare_row);
   11f4e:	4b30      	ldr	r3, [pc, #192]	; (12010 <_eeprom_emulator_format_memory+0xd8>)
   11f50:	2287      	movs	r2, #135	; 0x87
   11f52:	5c9b      	ldrb	r3, [r3, r2]
   11f54:	0018      	movs	r0, r3
   11f56:	4b2f      	ldr	r3, [pc, #188]	; (12014 <_eeprom_emulator_format_memory+0xdc>)
   11f58:	4798      	blx	r3

	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
   11f5a:	2344      	movs	r3, #68	; 0x44
   11f5c:	18fb      	adds	r3, r7, r3
   11f5e:	2204      	movs	r2, #4
   11f60:	801a      	strh	r2, [r3, #0]
   11f62:	e04a      	b.n	11ffa <_eeprom_emulator_format_memory+0xc2>
			physical_page < _eeprom_instance.physical_pages; physical_page++) {

		if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
   11f64:	2344      	movs	r3, #68	; 0x44
   11f66:	18fb      	adds	r3, r7, r3
   11f68:	881a      	ldrh	r2, [r3, #0]
   11f6a:	4b29      	ldr	r3, [pc, #164]	; (12010 <_eeprom_emulator_format_memory+0xd8>)
   11f6c:	891b      	ldrh	r3, [r3, #8]
   11f6e:	3b01      	subs	r3, #1
   11f70:	429a      	cmp	r2, r3
   11f72:	d03a      	beq.n	11fea <_eeprom_emulator_format_memory+0xb2>
			continue;
		}

		/* If we are at the first page in a new row, erase the entire row */
		if ((physical_page % NVMCTRL_ROW_PAGES) == 0) {
   11f74:	2344      	movs	r3, #68	; 0x44
   11f76:	18fb      	adds	r3, r7, r3
   11f78:	881b      	ldrh	r3, [r3, #0]
   11f7a:	2203      	movs	r2, #3
   11f7c:	4013      	ands	r3, r2
   11f7e:	b29b      	uxth	r3, r3
   11f80:	2b00      	cmp	r3, #0
   11f82:	d108      	bne.n	11f96 <_eeprom_emulator_format_memory+0x5e>
			_eeprom_emulator_nvm_erase_row(physical_page / NVMCTRL_ROW_PAGES);
   11f84:	2344      	movs	r3, #68	; 0x44
   11f86:	18fb      	adds	r3, r7, r3
   11f88:	881b      	ldrh	r3, [r3, #0]
   11f8a:	089b      	lsrs	r3, r3, #2
   11f8c:	b29b      	uxth	r3, r3
   11f8e:	b2db      	uxtb	r3, r3
   11f90:	0018      	movs	r0, r3
   11f92:	4b20      	ldr	r3, [pc, #128]	; (12014 <_eeprom_emulator_format_memory+0xdc>)
   11f94:	4798      	blx	r3
		}

		/* Two logical pages are stored in each physical row; program in a
		 * pair of initialized but blank set of emulated EEPROM pages */
		if ((physical_page % NVMCTRL_ROW_PAGES) < 2) {
   11f96:	2344      	movs	r3, #68	; 0x44
   11f98:	18fb      	adds	r3, r7, r3
   11f9a:	881b      	ldrh	r3, [r3, #0]
   11f9c:	2203      	movs	r2, #3
   11f9e:	4013      	ands	r3, r2
   11fa0:	b29b      	uxth	r3, r3
   11fa2:	2b01      	cmp	r3, #1
   11fa4:	d822      	bhi.n	11fec <_eeprom_emulator_format_memory+0xb4>
			/* Make a buffer to hold the initialized EEPROM page */
			struct _eeprom_page data;
			memset(&data, 0xFF, sizeof(data));
   11fa6:	1d3b      	adds	r3, r7, #4
   11fa8:	2240      	movs	r2, #64	; 0x40
   11faa:	21ff      	movs	r1, #255	; 0xff
   11fac:	0018      	movs	r0, r3
   11fae:	4b1a      	ldr	r3, [pc, #104]	; (12018 <_eeprom_emulator_format_memory+0xe0>)
   11fb0:	4798      	blx	r3

			/* Set up the new EEPROM row's header */
			data.header.logical_page = logical_page;
   11fb2:	2346      	movs	r3, #70	; 0x46
   11fb4:	18fb      	adds	r3, r7, r3
   11fb6:	881b      	ldrh	r3, [r3, #0]
   11fb8:	b2da      	uxtb	r2, r3
   11fba:	1d3b      	adds	r3, r7, #4
   11fbc:	701a      	strb	r2, [r3, #0]

			/* Write the page out to physical memory */
			_eeprom_emulator_nvm_fill_cache(physical_page, &data);
   11fbe:	1d3a      	adds	r2, r7, #4
   11fc0:	2344      	movs	r3, #68	; 0x44
   11fc2:	18fb      	adds	r3, r7, r3
   11fc4:	881b      	ldrh	r3, [r3, #0]
   11fc6:	0011      	movs	r1, r2
   11fc8:	0018      	movs	r0, r3
   11fca:	4b14      	ldr	r3, [pc, #80]	; (1201c <_eeprom_emulator_format_memory+0xe4>)
   11fcc:	4798      	blx	r3
			_eeprom_emulator_nvm_commit_cache(physical_page);
   11fce:	2344      	movs	r3, #68	; 0x44
   11fd0:	18fb      	adds	r3, r7, r3
   11fd2:	881b      	ldrh	r3, [r3, #0]
   11fd4:	0018      	movs	r0, r3
   11fd6:	4b12      	ldr	r3, [pc, #72]	; (12020 <_eeprom_emulator_format_memory+0xe8>)
   11fd8:	4798      	blx	r3

			/* Increment the logical EEPROM page address now that the current
			 * address' page has been initialized */
			logical_page++;
   11fda:	2346      	movs	r3, #70	; 0x46
   11fdc:	18fb      	adds	r3, r7, r3
   11fde:	881a      	ldrh	r2, [r3, #0]
   11fe0:	2346      	movs	r3, #70	; 0x46
   11fe2:	18fb      	adds	r3, r7, r3
   11fe4:	3201      	adds	r2, #1
   11fe6:	801a      	strh	r2, [r3, #0]
   11fe8:	e000      	b.n	11fec <_eeprom_emulator_format_memory+0xb4>
			continue;
   11fea:	46c0      	nop			; (mov r8, r8)
			physical_page < _eeprom_instance.physical_pages; physical_page++) {
   11fec:	2344      	movs	r3, #68	; 0x44
   11fee:	18fb      	adds	r3, r7, r3
   11ff0:	881a      	ldrh	r2, [r3, #0]
   11ff2:	2344      	movs	r3, #68	; 0x44
   11ff4:	18fb      	adds	r3, r7, r3
   11ff6:	3201      	adds	r2, #1
   11ff8:	801a      	strh	r2, [r3, #0]
   11ffa:	4b05      	ldr	r3, [pc, #20]	; (12010 <_eeprom_emulator_format_memory+0xd8>)
   11ffc:	891b      	ldrh	r3, [r3, #8]
	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
   11ffe:	2244      	movs	r2, #68	; 0x44
   12000:	18ba      	adds	r2, r7, r2
   12002:	8812      	ldrh	r2, [r2, #0]
   12004:	429a      	cmp	r2, r3
   12006:	d3ad      	bcc.n	11f64 <_eeprom_emulator_format_memory+0x2c>
		}
	}
}
   12008:	46c0      	nop			; (mov r8, r8)
   1200a:	46bd      	mov	sp, r7
   1200c:	b012      	add	sp, #72	; 0x48
   1200e:	bd80      	pop	{r7, pc}
   12010:	2000040c 	.word	0x2000040c
   12014:	00011e05 	.word	0x00011e05
   12018:	00017b57 	.word	0x00017b57
   1201c:	00011e4d 	.word	0x00011e4d
   12020:	00011e9d 	.word	0x00011e9d

00012024 <_eeprom_emulator_is_full_row>:
 *  it is the full row.
 *
 *  \param[in]  phy_page  Physical page that in a row
 */
static bool _eeprom_emulator_is_full_row(uint16_t phy_page)
{
   12024:	b580      	push	{r7, lr}
   12026:	b082      	sub	sp, #8
   12028:	af00      	add	r7, sp, #0
   1202a:	0002      	movs	r2, r0
   1202c:	1dbb      	adds	r3, r7, #6
   1202e:	801a      	strh	r2, [r3, #0]
	if((_eeprom_instance.flash[phy_page].header.logical_page
   12030:	4b14      	ldr	r3, [pc, #80]	; (12084 <_eeprom_emulator_is_full_row+0x60>)
   12032:	685a      	ldr	r2, [r3, #4]
   12034:	1dbb      	adds	r3, r7, #6
   12036:	881b      	ldrh	r3, [r3, #0]
   12038:	019b      	lsls	r3, r3, #6
   1203a:	18d3      	adds	r3, r2, r3
   1203c:	781a      	ldrb	r2, [r3, #0]
		== _eeprom_instance.flash[phy_page+2].header.logical_page)
   1203e:	4b11      	ldr	r3, [pc, #68]	; (12084 <_eeprom_emulator_is_full_row+0x60>)
   12040:	6859      	ldr	r1, [r3, #4]
   12042:	1dbb      	adds	r3, r7, #6
   12044:	881b      	ldrh	r3, [r3, #0]
   12046:	3302      	adds	r3, #2
   12048:	019b      	lsls	r3, r3, #6
   1204a:	18cb      	adds	r3, r1, r3
   1204c:	781b      	ldrb	r3, [r3, #0]
	if((_eeprom_instance.flash[phy_page].header.logical_page
   1204e:	429a      	cmp	r2, r3
   12050:	d011      	beq.n	12076 <_eeprom_emulator_is_full_row+0x52>
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
   12052:	4b0c      	ldr	r3, [pc, #48]	; (12084 <_eeprom_emulator_is_full_row+0x60>)
   12054:	685a      	ldr	r2, [r3, #4]
   12056:	1dbb      	adds	r3, r7, #6
   12058:	881b      	ldrh	r3, [r3, #0]
   1205a:	3301      	adds	r3, #1
   1205c:	019b      	lsls	r3, r3, #6
   1205e:	18d3      	adds	r3, r2, r3
   12060:	781a      	ldrb	r2, [r3, #0]
		== _eeprom_instance.flash[phy_page+2].header.logical_page )) {
   12062:	4b08      	ldr	r3, [pc, #32]	; (12084 <_eeprom_emulator_is_full_row+0x60>)
   12064:	6859      	ldr	r1, [r3, #4]
   12066:	1dbb      	adds	r3, r7, #6
   12068:	881b      	ldrh	r3, [r3, #0]
   1206a:	3302      	adds	r3, #2
   1206c:	019b      	lsls	r3, r3, #6
   1206e:	18cb      	adds	r3, r1, r3
   12070:	781b      	ldrb	r3, [r3, #0]
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
   12072:	429a      	cmp	r2, r3
   12074:	d101      	bne.n	1207a <_eeprom_emulator_is_full_row+0x56>
		return true;
   12076:	2301      	movs	r3, #1
   12078:	e000      	b.n	1207c <_eeprom_emulator_is_full_row+0x58>
	} else {
		return false;
   1207a:	2300      	movs	r3, #0
	}
}
   1207c:	0018      	movs	r0, r3
   1207e:	46bd      	mov	sp, r7
   12080:	b002      	add	sp, #8
   12082:	bd80      	pop	{r7, pc}
   12084:	2000040c 	.word	0x2000040c

00012088 <_eeprom_emulator_erase_invalid_page>:
 *
 *  \param[in]  pre_phy_page  One physical invalid page
 *  \param[in]  next_phy_page Another physical invalid page
 */
static void _eeprom_emulator_erase_invalid_page(uint16_t pre_phy_page,uint16_t next_phy_page)
{
   12088:	b580      	push	{r7, lr}
   1208a:	b082      	sub	sp, #8
   1208c:	af00      	add	r7, sp, #0
   1208e:	0002      	movs	r2, r0
   12090:	1dbb      	adds	r3, r7, #6
   12092:	801a      	strh	r2, [r3, #0]
   12094:	1d3b      	adds	r3, r7, #4
   12096:	1c0a      	adds	r2, r1, #0
   12098:	801a      	strh	r2, [r3, #0]
 	/* Erase the old/full row*/
	if(_eeprom_emulator_is_full_row(pre_phy_page)) {
   1209a:	1dbb      	adds	r3, r7, #6
   1209c:	881b      	ldrh	r3, [r3, #0]
   1209e:	0018      	movs	r0, r3
   120a0:	4b0c      	ldr	r3, [pc, #48]	; (120d4 <_eeprom_emulator_erase_invalid_page+0x4c>)
   120a2:	4798      	blx	r3
   120a4:	1e03      	subs	r3, r0, #0
   120a6:	d008      	beq.n	120ba <_eeprom_emulator_erase_invalid_page+0x32>
		 _eeprom_emulator_nvm_erase_row(pre_phy_page/4);
   120a8:	1dbb      	adds	r3, r7, #6
   120aa:	881b      	ldrh	r3, [r3, #0]
   120ac:	089b      	lsrs	r3, r3, #2
   120ae:	b29b      	uxth	r3, r3
   120b0:	b2db      	uxtb	r3, r3
   120b2:	0018      	movs	r0, r3
   120b4:	4b08      	ldr	r3, [pc, #32]	; (120d8 <_eeprom_emulator_erase_invalid_page+0x50>)
   120b6:	4798      	blx	r3
	} else {
		_eeprom_emulator_nvm_erase_row(next_phy_page/4);
	}
}
   120b8:	e007      	b.n	120ca <_eeprom_emulator_erase_invalid_page+0x42>
		_eeprom_emulator_nvm_erase_row(next_phy_page/4);
   120ba:	1d3b      	adds	r3, r7, #4
   120bc:	881b      	ldrh	r3, [r3, #0]
   120be:	089b      	lsrs	r3, r3, #2
   120c0:	b29b      	uxth	r3, r3
   120c2:	b2db      	uxtb	r3, r3
   120c4:	0018      	movs	r0, r3
   120c6:	4b04      	ldr	r3, [pc, #16]	; (120d8 <_eeprom_emulator_erase_invalid_page+0x50>)
   120c8:	4798      	blx	r3
}
   120ca:	46c0      	nop			; (mov r8, r8)
   120cc:	46bd      	mov	sp, r7
   120ce:	b002      	add	sp, #8
   120d0:	bd80      	pop	{r7, pc}
   120d2:	46c0      	nop			; (mov r8, r8)
   120d4:	00012025 	.word	0x00012025
   120d8:	00011e05 	.word	0x00011e05

000120dc <_eeprom_emulator_check_logical_page>:
 * \brief Check if there exist rows with same logical pages due to power drop
 *  when writing or erasing page.
 *  when existed same logical page, the old(full) row will be erased.
 */
static void _eeprom_emulator_check_logical_page(void)
{
   120dc:	b580      	push	{r7, lr}
   120de:	b082      	sub	sp, #8
   120e0:	af00      	add	r7, sp, #0
	uint16_t i = 0, j = 0;
   120e2:	1dbb      	adds	r3, r7, #6
   120e4:	2200      	movs	r2, #0
   120e6:	801a      	strh	r2, [r3, #0]
   120e8:	1d3b      	adds	r3, r7, #4
   120ea:	2200      	movs	r2, #0
   120ec:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
   120ee:	1dbb      	adds	r3, r7, #6
   120f0:	2200      	movs	r2, #0
   120f2:	801a      	strh	r2, [r3, #0]
   120f4:	e04a      	b.n	1218c <_eeprom_emulator_check_logical_page+0xb0>

		uint16_t pre_logical_page = _eeprom_instance.flash[i].header.logical_page;
   120f6:	4b2a      	ldr	r3, [pc, #168]	; (121a0 <_eeprom_emulator_check_logical_page+0xc4>)
   120f8:	685a      	ldr	r2, [r3, #4]
   120fa:	1dbb      	adds	r3, r7, #6
   120fc:	881b      	ldrh	r3, [r3, #0]
   120fe:	019b      	lsls	r3, r3, #6
   12100:	18d3      	adds	r3, r2, r3
   12102:	781a      	ldrb	r2, [r3, #0]
   12104:	1cbb      	adds	r3, r7, #2
   12106:	801a      	strh	r2, [r3, #0]
		if( pre_logical_page == EEPROM_INVALID_PAGE_NUMBER) {
   12108:	1cbb      	adds	r3, r7, #2
   1210a:	881b      	ldrh	r3, [r3, #0]
   1210c:	2bff      	cmp	r3, #255	; 0xff
   1210e:	d037      	beq.n	12180 <_eeprom_emulator_check_logical_page+0xa4>
			continue;
		}

		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
   12110:	1d3b      	adds	r3, r7, #4
   12112:	1dba      	adds	r2, r7, #6
   12114:	8812      	ldrh	r2, [r2, #0]
   12116:	3204      	adds	r2, #4
   12118:	801a      	strh	r2, [r3, #0]
   1211a:	e02a      	b.n	12172 <_eeprom_emulator_check_logical_page+0x96>

			if (j == EEPROM_MASTER_PAGE_NUMBER) {
   1211c:	1d3b      	adds	r3, r7, #4
   1211e:	881a      	ldrh	r2, [r3, #0]
   12120:	4b1f      	ldr	r3, [pc, #124]	; (121a0 <_eeprom_emulator_check_logical_page+0xc4>)
   12122:	891b      	ldrh	r3, [r3, #8]
   12124:	3b01      	subs	r3, #1
   12126:	429a      	cmp	r2, r3
   12128:	d01b      	beq.n	12162 <_eeprom_emulator_check_logical_page+0x86>
				continue;
			}
			uint16_t next_logical_page = _eeprom_instance.flash[j].header.logical_page;
   1212a:	4b1d      	ldr	r3, [pc, #116]	; (121a0 <_eeprom_emulator_check_logical_page+0xc4>)
   1212c:	685a      	ldr	r2, [r3, #4]
   1212e:	1d3b      	adds	r3, r7, #4
   12130:	881b      	ldrh	r3, [r3, #0]
   12132:	019b      	lsls	r3, r3, #6
   12134:	18d3      	adds	r3, r2, r3
   12136:	781a      	ldrb	r2, [r3, #0]
   12138:	003b      	movs	r3, r7
   1213a:	801a      	strh	r2, [r3, #0]
			if( next_logical_page == EEPROM_INVALID_PAGE_NUMBER) {
   1213c:	003b      	movs	r3, r7
   1213e:	881b      	ldrh	r3, [r3, #0]
   12140:	2bff      	cmp	r3, #255	; 0xff
   12142:	d010      	beq.n	12166 <_eeprom_emulator_check_logical_page+0x8a>
				continue;
			}

			if(pre_logical_page == next_logical_page) {
   12144:	1cba      	adds	r2, r7, #2
   12146:	003b      	movs	r3, r7
   12148:	8812      	ldrh	r2, [r2, #0]
   1214a:	881b      	ldrh	r3, [r3, #0]
   1214c:	429a      	cmp	r2, r3
   1214e:	d10b      	bne.n	12168 <_eeprom_emulator_check_logical_page+0x8c>
				/* Found invalid logical page and erase it */
				_eeprom_emulator_erase_invalid_page(i,j);
   12150:	1d3b      	adds	r3, r7, #4
   12152:	881a      	ldrh	r2, [r3, #0]
   12154:	1dbb      	adds	r3, r7, #6
   12156:	881b      	ldrh	r3, [r3, #0]
   12158:	0011      	movs	r1, r2
   1215a:	0018      	movs	r0, r3
   1215c:	4b11      	ldr	r3, [pc, #68]	; (121a4 <_eeprom_emulator_check_logical_page+0xc8>)
   1215e:	4798      	blx	r3
   12160:	e002      	b.n	12168 <_eeprom_emulator_check_logical_page+0x8c>
				continue;
   12162:	46c0      	nop			; (mov r8, r8)
   12164:	e000      	b.n	12168 <_eeprom_emulator_check_logical_page+0x8c>
				continue;
   12166:	46c0      	nop			; (mov r8, r8)
		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
   12168:	1d3b      	adds	r3, r7, #4
   1216a:	1d3a      	adds	r2, r7, #4
   1216c:	8812      	ldrh	r2, [r2, #0]
   1216e:	3204      	adds	r2, #4
   12170:	801a      	strh	r2, [r3, #0]
   12172:	4b0b      	ldr	r3, [pc, #44]	; (121a0 <_eeprom_emulator_check_logical_page+0xc4>)
   12174:	891b      	ldrh	r3, [r3, #8]
   12176:	1d3a      	adds	r2, r7, #4
   12178:	8812      	ldrh	r2, [r2, #0]
   1217a:	429a      	cmp	r2, r3
   1217c:	d3ce      	bcc.n	1211c <_eeprom_emulator_check_logical_page+0x40>
   1217e:	e000      	b.n	12182 <_eeprom_emulator_check_logical_page+0xa6>
			continue;
   12180:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
   12182:	1dbb      	adds	r3, r7, #6
   12184:	1dba      	adds	r2, r7, #6
   12186:	8812      	ldrh	r2, [r2, #0]
   12188:	3204      	adds	r2, #4
   1218a:	801a      	strh	r2, [r3, #0]
   1218c:	4b04      	ldr	r3, [pc, #16]	; (121a0 <_eeprom_emulator_check_logical_page+0xc4>)
   1218e:	891b      	ldrh	r3, [r3, #8]
   12190:	1dba      	adds	r2, r7, #6
   12192:	8812      	ldrh	r2, [r2, #0]
   12194:	429a      	cmp	r2, r3
   12196:	d3ae      	bcc.n	120f6 <_eeprom_emulator_check_logical_page+0x1a>
			}
		}
	}
}
   12198:	46c0      	nop			; (mov r8, r8)
   1219a:	46bd      	mov	sp, r7
   1219c:	b002      	add	sp, #8
   1219e:	bd80      	pop	{r7, pc}
   121a0:	2000040c 	.word	0x2000040c
   121a4:	00012089 	.word	0x00012089

000121a8 <_eeprom_emulator_update_page_mapping>:

/**
 * \brief Creates a map in SRAM to translate logical EEPROM pages to physical FLASH pages.
 */
static void _eeprom_emulator_update_page_mapping(void)
{
   121a8:	b580      	push	{r7, lr}
   121aa:	b084      	sub	sp, #16
   121ac:	af00      	add	r7, sp, #0
	/* Check if exists invalid logical page */
	_eeprom_emulator_check_logical_page();
   121ae:	4b51      	ldr	r3, [pc, #324]	; (122f4 <_eeprom_emulator_update_page_mapping+0x14c>)
   121b0:	4798      	blx	r3

	/* Scan through all physical pages, to map physical and logical pages */
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
   121b2:	230e      	movs	r3, #14
   121b4:	18fb      	adds	r3, r7, r3
   121b6:	2200      	movs	r2, #0
   121b8:	801a      	strh	r2, [r3, #0]
   121ba:	e033      	b.n	12224 <_eeprom_emulator_update_page_mapping+0x7c>
		if (c == EEPROM_MASTER_PAGE_NUMBER) {
   121bc:	230e      	movs	r3, #14
   121be:	18fb      	adds	r3, r7, r3
   121c0:	881a      	ldrh	r2, [r3, #0]
   121c2:	4b4d      	ldr	r3, [pc, #308]	; (122f8 <_eeprom_emulator_update_page_mapping+0x150>)
   121c4:	891b      	ldrh	r3, [r3, #8]
   121c6:	3b01      	subs	r3, #1
   121c8:	429a      	cmp	r2, r3
   121ca:	d023      	beq.n	12214 <_eeprom_emulator_update_page_mapping+0x6c>
			continue;
		}

		/* Read in the logical page stored in the current physical page */
		uint16_t logical_page = _eeprom_instance.flash[c].header.logical_page;
   121cc:	4b4a      	ldr	r3, [pc, #296]	; (122f8 <_eeprom_emulator_update_page_mapping+0x150>)
   121ce:	685a      	ldr	r2, [r3, #4]
   121d0:	230e      	movs	r3, #14
   121d2:	18fb      	adds	r3, r7, r3
   121d4:	881b      	ldrh	r3, [r3, #0]
   121d6:	019b      	lsls	r3, r3, #6
   121d8:	18d3      	adds	r3, r2, r3
   121da:	781a      	ldrb	r2, [r3, #0]
   121dc:	2308      	movs	r3, #8
   121de:	18fb      	adds	r3, r7, r3
   121e0:	801a      	strh	r2, [r3, #0]

		/* If the logical page number is valid, add it to the mapping */
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
   121e2:	2308      	movs	r3, #8
   121e4:	18fb      	adds	r3, r7, r3
   121e6:	881b      	ldrh	r3, [r3, #0]
   121e8:	2bff      	cmp	r3, #255	; 0xff
   121ea:	d014      	beq.n	12216 <_eeprom_emulator_update_page_mapping+0x6e>
				(logical_page < _eeprom_instance.logical_pages)) {
   121ec:	4b42      	ldr	r3, [pc, #264]	; (122f8 <_eeprom_emulator_update_page_mapping+0x150>)
   121ee:	7a9b      	ldrb	r3, [r3, #10]
   121f0:	b29b      	uxth	r3, r3
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
   121f2:	2208      	movs	r2, #8
   121f4:	18ba      	adds	r2, r7, r2
   121f6:	8812      	ldrh	r2, [r2, #0]
   121f8:	429a      	cmp	r2, r3
   121fa:	d20c      	bcs.n	12216 <_eeprom_emulator_update_page_mapping+0x6e>
			_eeprom_instance.page_map[logical_page] = c;
   121fc:	2308      	movs	r3, #8
   121fe:	18fb      	adds	r3, r7, r3
   12200:	881b      	ldrh	r3, [r3, #0]
   12202:	220e      	movs	r2, #14
   12204:	18ba      	adds	r2, r7, r2
   12206:	8812      	ldrh	r2, [r2, #0]
   12208:	b2d1      	uxtb	r1, r2
   1220a:	4a3b      	ldr	r2, [pc, #236]	; (122f8 <_eeprom_emulator_update_page_mapping+0x150>)
   1220c:	18d3      	adds	r3, r2, r3
   1220e:	1c0a      	adds	r2, r1, #0
   12210:	72da      	strb	r2, [r3, #11]
   12212:	e000      	b.n	12216 <_eeprom_emulator_update_page_mapping+0x6e>
			continue;
   12214:	46c0      	nop			; (mov r8, r8)
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
   12216:	230e      	movs	r3, #14
   12218:	18fb      	adds	r3, r7, r3
   1221a:	881a      	ldrh	r2, [r3, #0]
   1221c:	230e      	movs	r3, #14
   1221e:	18fb      	adds	r3, r7, r3
   12220:	3201      	adds	r2, #1
   12222:	801a      	strh	r2, [r3, #0]
   12224:	4b34      	ldr	r3, [pc, #208]	; (122f8 <_eeprom_emulator_update_page_mapping+0x150>)
   12226:	891b      	ldrh	r3, [r3, #8]
   12228:	220e      	movs	r2, #14
   1222a:	18ba      	adds	r2, r7, r2
   1222c:	8812      	ldrh	r2, [r2, #0]
   1222e:	429a      	cmp	r2, r3
   12230:	d3c4      	bcc.n	121bc <_eeprom_emulator_update_page_mapping+0x14>
		}
	}

	/* Use an invalid page number as the spare row until a valid one has been
	 * found */
	_eeprom_instance.spare_row = EEPROM_INVALID_ROW_NUMBER;
   12232:	4b31      	ldr	r3, [pc, #196]	; (122f8 <_eeprom_emulator_update_page_mapping+0x150>)
   12234:	2287      	movs	r2, #135	; 0x87
   12236:	213f      	movs	r1, #63	; 0x3f
   12238:	5499      	strb	r1, [r3, r2]

	/* Scan through all physical rows, to find an erased row to use as the
	 * spare */
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
   1223a:	230c      	movs	r3, #12
   1223c:	18fb      	adds	r3, r7, r3
   1223e:	2200      	movs	r2, #0
   12240:	801a      	strh	r2, [r3, #0]
   12242:	e04a      	b.n	122da <_eeprom_emulator_update_page_mapping+0x132>
		bool spare_row_found = true;
   12244:	230b      	movs	r3, #11
   12246:	18fb      	adds	r3, r7, r3
   12248:	2201      	movs	r2, #1
   1224a:	701a      	strb	r2, [r3, #0]

		/* Look through pages within the row to see if they are all erased */
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
   1224c:	230a      	movs	r3, #10
   1224e:	18fb      	adds	r3, r7, r3
   12250:	2200      	movs	r2, #0
   12252:	701a      	strb	r2, [r3, #0]
   12254:	e028      	b.n	122a8 <_eeprom_emulator_update_page_mapping+0x100>
			uint16_t physical_page = (c * NVMCTRL_ROW_PAGES) + c2;
   12256:	230c      	movs	r3, #12
   12258:	18fb      	adds	r3, r7, r3
   1225a:	881b      	ldrh	r3, [r3, #0]
   1225c:	009b      	lsls	r3, r3, #2
   1225e:	b299      	uxth	r1, r3
   12260:	230a      	movs	r3, #10
   12262:	18fb      	adds	r3, r7, r3
   12264:	781b      	ldrb	r3, [r3, #0]
   12266:	b29a      	uxth	r2, r3
   12268:	1dbb      	adds	r3, r7, #6
   1226a:	188a      	adds	r2, r1, r2
   1226c:	801a      	strh	r2, [r3, #0]

			if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
   1226e:	1dbb      	adds	r3, r7, #6
   12270:	881a      	ldrh	r2, [r3, #0]
   12272:	4b21      	ldr	r3, [pc, #132]	; (122f8 <_eeprom_emulator_update_page_mapping+0x150>)
   12274:	891b      	ldrh	r3, [r3, #8]
   12276:	3b01      	subs	r3, #1
   12278:	429a      	cmp	r2, r3
   1227a:	d00d      	beq.n	12298 <_eeprom_emulator_update_page_mapping+0xf0>
				continue;
			}

			if (_eeprom_instance.flash[physical_page].header.logical_page !=
   1227c:	4b1e      	ldr	r3, [pc, #120]	; (122f8 <_eeprom_emulator_update_page_mapping+0x150>)
   1227e:	685a      	ldr	r2, [r3, #4]
   12280:	1dbb      	adds	r3, r7, #6
   12282:	881b      	ldrh	r3, [r3, #0]
   12284:	019b      	lsls	r3, r3, #6
   12286:	18d3      	adds	r3, r2, r3
   12288:	781b      	ldrb	r3, [r3, #0]
   1228a:	2bff      	cmp	r3, #255	; 0xff
   1228c:	d005      	beq.n	1229a <_eeprom_emulator_update_page_mapping+0xf2>
					EEPROM_INVALID_PAGE_NUMBER) {
				spare_row_found = false;
   1228e:	230b      	movs	r3, #11
   12290:	18fb      	adds	r3, r7, r3
   12292:	2200      	movs	r2, #0
   12294:	701a      	strb	r2, [r3, #0]
   12296:	e000      	b.n	1229a <_eeprom_emulator_update_page_mapping+0xf2>
				continue;
   12298:	46c0      	nop			; (mov r8, r8)
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
   1229a:	230a      	movs	r3, #10
   1229c:	18fb      	adds	r3, r7, r3
   1229e:	781a      	ldrb	r2, [r3, #0]
   122a0:	230a      	movs	r3, #10
   122a2:	18fb      	adds	r3, r7, r3
   122a4:	3201      	adds	r2, #1
   122a6:	701a      	strb	r2, [r3, #0]
   122a8:	230a      	movs	r3, #10
   122aa:	18fb      	adds	r3, r7, r3
   122ac:	781b      	ldrb	r3, [r3, #0]
   122ae:	2b03      	cmp	r3, #3
   122b0:	d9d1      	bls.n	12256 <_eeprom_emulator_update_page_mapping+0xae>
			}
		}

		/* If we've now found the spare row, store it and abort the search */
		if (spare_row_found == true) {
   122b2:	230b      	movs	r3, #11
   122b4:	18fb      	adds	r3, r7, r3
   122b6:	781b      	ldrb	r3, [r3, #0]
   122b8:	2b00      	cmp	r3, #0
   122ba:	d007      	beq.n	122cc <_eeprom_emulator_update_page_mapping+0x124>
			_eeprom_instance.spare_row = c;
   122bc:	230c      	movs	r3, #12
   122be:	18fb      	adds	r3, r7, r3
   122c0:	881b      	ldrh	r3, [r3, #0]
   122c2:	b2d9      	uxtb	r1, r3
   122c4:	4b0c      	ldr	r3, [pc, #48]	; (122f8 <_eeprom_emulator_update_page_mapping+0x150>)
   122c6:	2287      	movs	r2, #135	; 0x87
   122c8:	5499      	strb	r1, [r3, r2]
			break;
   122ca:	e00f      	b.n	122ec <_eeprom_emulator_update_page_mapping+0x144>
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
   122cc:	230c      	movs	r3, #12
   122ce:	18fb      	adds	r3, r7, r3
   122d0:	881a      	ldrh	r2, [r3, #0]
   122d2:	230c      	movs	r3, #12
   122d4:	18fb      	adds	r3, r7, r3
   122d6:	3201      	adds	r2, #1
   122d8:	801a      	strh	r2, [r3, #0]
   122da:	4b07      	ldr	r3, [pc, #28]	; (122f8 <_eeprom_emulator_update_page_mapping+0x150>)
   122dc:	891b      	ldrh	r3, [r3, #8]
   122de:	089b      	lsrs	r3, r3, #2
   122e0:	b29b      	uxth	r3, r3
   122e2:	220c      	movs	r2, #12
   122e4:	18ba      	adds	r2, r7, r2
   122e6:	8812      	ldrh	r2, [r2, #0]
   122e8:	429a      	cmp	r2, r3
   122ea:	d3ab      	bcc.n	12244 <_eeprom_emulator_update_page_mapping+0x9c>
		}
	}
}
   122ec:	46c0      	nop			; (mov r8, r8)
   122ee:	46bd      	mov	sp, r7
   122f0:	b004      	add	sp, #16
   122f2:	bd80      	pop	{r7, pc}
   122f4:	000120dd 	.word	0x000120dd
   122f8:	2000040c 	.word	0x2000040c

000122fc <_eeprom_emulator_is_page_free_on_row>:
 * \retval \c false  If the specified row was full and needs an erase
 */
static bool _eeprom_emulator_is_page_free_on_row(
		const uint8_t start_physical_page,
		uint8_t *const free_physical_page)
{
   122fc:	b580      	push	{r7, lr}
   122fe:	b084      	sub	sp, #16
   12300:	af00      	add	r7, sp, #0
   12302:	0002      	movs	r2, r0
   12304:	6039      	str	r1, [r7, #0]
   12306:	1dfb      	adds	r3, r7, #7
   12308:	701a      	strb	r2, [r3, #0]
	/* Convert physical page number to a FLASH row and page within the row */
	uint8_t row         = (start_physical_page / NVMCTRL_ROW_PAGES);
   1230a:	230e      	movs	r3, #14
   1230c:	18fb      	adds	r3, r7, r3
   1230e:	1dfa      	adds	r2, r7, #7
   12310:	7812      	ldrb	r2, [r2, #0]
   12312:	0892      	lsrs	r2, r2, #2
   12314:	701a      	strb	r2, [r3, #0]
	uint8_t page_in_row = (start_physical_page % NVMCTRL_ROW_PAGES);
   12316:	230d      	movs	r3, #13
   12318:	18fb      	adds	r3, r7, r3
   1231a:	1dfa      	adds	r2, r7, #7
   1231c:	7812      	ldrb	r2, [r2, #0]
   1231e:	2103      	movs	r1, #3
   12320:	400a      	ands	r2, r1
   12322:	701a      	strb	r2, [r3, #0]

	/* Look in the current row for a page that isn't currently used */
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
   12324:	230f      	movs	r3, #15
   12326:	18fb      	adds	r3, r7, r3
   12328:	220d      	movs	r2, #13
   1232a:	18ba      	adds	r2, r7, r2
   1232c:	7812      	ldrb	r2, [r2, #0]
   1232e:	701a      	strb	r2, [r3, #0]
   12330:	e023      	b.n	1237a <_eeprom_emulator_is_page_free_on_row+0x7e>
		/* Calculate the page number for the current page being examined */
		uint8_t page = (row * NVMCTRL_ROW_PAGES) + c;
   12332:	230e      	movs	r3, #14
   12334:	18fb      	adds	r3, r7, r3
   12336:	781b      	ldrb	r3, [r3, #0]
   12338:	009b      	lsls	r3, r3, #2
   1233a:	b2d9      	uxtb	r1, r3
   1233c:	230c      	movs	r3, #12
   1233e:	18fb      	adds	r3, r7, r3
   12340:	220f      	movs	r2, #15
   12342:	18ba      	adds	r2, r7, r2
   12344:	7812      	ldrb	r2, [r2, #0]
   12346:	188a      	adds	r2, r1, r2
   12348:	701a      	strb	r2, [r3, #0]

		/* If the page is free, pass it to the caller and exit */
		if (_eeprom_instance.flash[page].header.logical_page ==
   1234a:	4b11      	ldr	r3, [pc, #68]	; (12390 <_eeprom_emulator_is_page_free_on_row+0x94>)
   1234c:	685a      	ldr	r2, [r3, #4]
   1234e:	230c      	movs	r3, #12
   12350:	18fb      	adds	r3, r7, r3
   12352:	781b      	ldrb	r3, [r3, #0]
   12354:	019b      	lsls	r3, r3, #6
   12356:	18d3      	adds	r3, r2, r3
   12358:	781b      	ldrb	r3, [r3, #0]
   1235a:	2bff      	cmp	r3, #255	; 0xff
   1235c:	d106      	bne.n	1236c <_eeprom_emulator_is_page_free_on_row+0x70>
				EEPROM_INVALID_PAGE_NUMBER) {
			*free_physical_page = page;
   1235e:	683b      	ldr	r3, [r7, #0]
   12360:	220c      	movs	r2, #12
   12362:	18ba      	adds	r2, r7, r2
   12364:	7812      	ldrb	r2, [r2, #0]
   12366:	701a      	strb	r2, [r3, #0]
			return true;
   12368:	2301      	movs	r3, #1
   1236a:	e00c      	b.n	12386 <_eeprom_emulator_is_page_free_on_row+0x8a>
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
   1236c:	230f      	movs	r3, #15
   1236e:	18fb      	adds	r3, r7, r3
   12370:	781a      	ldrb	r2, [r3, #0]
   12372:	230f      	movs	r3, #15
   12374:	18fb      	adds	r3, r7, r3
   12376:	3201      	adds	r2, #1
   12378:	701a      	strb	r2, [r3, #0]
   1237a:	230f      	movs	r3, #15
   1237c:	18fb      	adds	r3, r7, r3
   1237e:	781b      	ldrb	r3, [r3, #0]
   12380:	2b03      	cmp	r3, #3
   12382:	d9d6      	bls.n	12332 <_eeprom_emulator_is_page_free_on_row+0x36>
		}
	}

	/* No free page in the current row was found */
	return false;
   12384:	2300      	movs	r3, #0
}
   12386:	0018      	movs	r0, r3
   12388:	46bd      	mov	sp, r7
   1238a:	b004      	add	sp, #16
   1238c:	bd80      	pop	{r7, pc}
   1238e:	46c0      	nop			; (mov r8, r8)
   12390:	2000040c 	.word	0x2000040c

00012394 <_eeprom_emulator_move_data_to_spare>:
 */
static enum status_code _eeprom_emulator_move_data_to_spare(
		const uint8_t row_number,
		const uint8_t logical_page,
		const uint8_t *const data)
{
   12394:	b580      	push	{r7, lr}
   12396:	b086      	sub	sp, #24
   12398:	af00      	add	r7, sp, #0
   1239a:	603a      	str	r2, [r7, #0]
   1239c:	1dfb      	adds	r3, r7, #7
   1239e:	1c02      	adds	r2, r0, #0
   123a0:	701a      	strb	r2, [r3, #0]
   123a2:	1dbb      	adds	r3, r7, #6
   123a4:	1c0a      	adds	r2, r1, #0
   123a6:	701a      	strb	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   123a8:	2314      	movs	r3, #20
   123aa:	18fb      	adds	r3, r7, r3
   123ac:	2200      	movs	r2, #0
   123ae:	701a      	strb	r2, [r3, #0]
		uint8_t logical_page;
		uint8_t physical_page;
	} page_trans[2];

	const struct _eeprom_page *row_data =
			(struct _eeprom_page *)&_eeprom_instance.flash[row_number * NVMCTRL_ROW_PAGES];
   123b0:	4b69      	ldr	r3, [pc, #420]	; (12558 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   123b2:	685b      	ldr	r3, [r3, #4]
   123b4:	1dfa      	adds	r2, r7, #7
   123b6:	7812      	ldrb	r2, [r2, #0]
   123b8:	0212      	lsls	r2, r2, #8
	const struct _eeprom_page *row_data =
   123ba:	189b      	adds	r3, r3, r2
   123bc:	613b      	str	r3, [r7, #16]

	/* There should be two logical pages of data in each row, possibly with
	 * multiple revisions (right-most version is the newest). Start by assuming
	 * the left-most two pages contain the newest page revisions. */
	page_trans[0].logical_page  = row_data[0].header.logical_page;
   123be:	693b      	ldr	r3, [r7, #16]
   123c0:	781a      	ldrb	r2, [r3, #0]
   123c2:	2308      	movs	r3, #8
   123c4:	18fb      	adds	r3, r7, r3
   123c6:	701a      	strb	r2, [r3, #0]
	page_trans[0].physical_page = (row_number * NVMCTRL_ROW_PAGES);
   123c8:	1dfb      	adds	r3, r7, #7
   123ca:	781b      	ldrb	r3, [r3, #0]
   123cc:	009b      	lsls	r3, r3, #2
   123ce:	b2da      	uxtb	r2, r3
   123d0:	2308      	movs	r3, #8
   123d2:	18fb      	adds	r3, r7, r3
   123d4:	705a      	strb	r2, [r3, #1]

	page_trans[1].logical_page  = row_data[1].header.logical_page;
   123d6:	693b      	ldr	r3, [r7, #16]
   123d8:	3340      	adds	r3, #64	; 0x40
   123da:	781a      	ldrb	r2, [r3, #0]
   123dc:	2308      	movs	r3, #8
   123de:	18fb      	adds	r3, r7, r3
   123e0:	709a      	strb	r2, [r3, #2]
	page_trans[1].physical_page = (row_number * NVMCTRL_ROW_PAGES) + 1;
   123e2:	1dfb      	adds	r3, r7, #7
   123e4:	781b      	ldrb	r3, [r3, #0]
   123e6:	009b      	lsls	r3, r3, #2
   123e8:	b2db      	uxtb	r3, r3
   123ea:	3301      	adds	r3, #1
   123ec:	b2da      	uxtb	r2, r3
   123ee:	2308      	movs	r3, #8
   123f0:	18fb      	adds	r3, r7, r3
   123f2:	70da      	strb	r2, [r3, #3]

	/* Look for newer revisions of the two logical pages stored in the row */
	for (uint8_t c = 0; c < 2; c++) {
   123f4:	2317      	movs	r3, #23
   123f6:	18fb      	adds	r3, r7, r3
   123f8:	2200      	movs	r2, #0
   123fa:	701a      	strb	r2, [r3, #0]
   123fc:	e03a      	b.n	12474 <_eeprom_emulator_move_data_to_spare+0xe0>
		/* Look through the remaining pages in the row for any newer revisions */
		for (uint8_t c2 = 2; c2 < NVMCTRL_ROW_PAGES; c2++) {
   123fe:	2316      	movs	r3, #22
   12400:	18fb      	adds	r3, r7, r3
   12402:	2202      	movs	r2, #2
   12404:	701a      	strb	r2, [r3, #0]
   12406:	e029      	b.n	1245c <_eeprom_emulator_move_data_to_spare+0xc8>
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
   12408:	2317      	movs	r3, #23
   1240a:	18fb      	adds	r3, r7, r3
   1240c:	781a      	ldrb	r2, [r3, #0]
   1240e:	2308      	movs	r3, #8
   12410:	18fb      	adds	r3, r7, r3
   12412:	0052      	lsls	r2, r2, #1
   12414:	5cd2      	ldrb	r2, [r2, r3]
   12416:	2316      	movs	r3, #22
   12418:	18fb      	adds	r3, r7, r3
   1241a:	781b      	ldrb	r3, [r3, #0]
   1241c:	019b      	lsls	r3, r3, #6
   1241e:	6939      	ldr	r1, [r7, #16]
   12420:	18cb      	adds	r3, r1, r3
   12422:	781b      	ldrb	r3, [r3, #0]
   12424:	429a      	cmp	r2, r3
   12426:	d112      	bne.n	1244e <_eeprom_emulator_move_data_to_spare+0xba>
				page_trans[c].physical_page =
   12428:	2317      	movs	r3, #23
   1242a:	18fb      	adds	r3, r7, r3
   1242c:	781b      	ldrb	r3, [r3, #0]
						(row_number * NVMCTRL_ROW_PAGES) + c2;
   1242e:	1dfa      	adds	r2, r7, #7
   12430:	7812      	ldrb	r2, [r2, #0]
   12432:	0092      	lsls	r2, r2, #2
   12434:	b2d1      	uxtb	r1, r2
   12436:	2216      	movs	r2, #22
   12438:	18ba      	adds	r2, r7, r2
   1243a:	7812      	ldrb	r2, [r2, #0]
   1243c:	188a      	adds	r2, r1, r2
   1243e:	b2d1      	uxtb	r1, r2
				page_trans[c].physical_page =
   12440:	2208      	movs	r2, #8
   12442:	18ba      	adds	r2, r7, r2
   12444:	005b      	lsls	r3, r3, #1
   12446:	18d3      	adds	r3, r2, r3
   12448:	3301      	adds	r3, #1
   1244a:	1c0a      	adds	r2, r1, #0
   1244c:	701a      	strb	r2, [r3, #0]
		for (uint8_t c2 = 2; c2 < NVMCTRL_ROW_PAGES; c2++) {
   1244e:	2316      	movs	r3, #22
   12450:	18fb      	adds	r3, r7, r3
   12452:	781a      	ldrb	r2, [r3, #0]
   12454:	2316      	movs	r3, #22
   12456:	18fb      	adds	r3, r7, r3
   12458:	3201      	adds	r2, #1
   1245a:	701a      	strb	r2, [r3, #0]
   1245c:	2316      	movs	r3, #22
   1245e:	18fb      	adds	r3, r7, r3
   12460:	781b      	ldrb	r3, [r3, #0]
   12462:	2b03      	cmp	r3, #3
   12464:	d9d0      	bls.n	12408 <_eeprom_emulator_move_data_to_spare+0x74>
	for (uint8_t c = 0; c < 2; c++) {
   12466:	2317      	movs	r3, #23
   12468:	18fb      	adds	r3, r7, r3
   1246a:	781a      	ldrb	r2, [r3, #0]
   1246c:	2317      	movs	r3, #23
   1246e:	18fb      	adds	r3, r7, r3
   12470:	3201      	adds	r2, #1
   12472:	701a      	strb	r2, [r3, #0]
   12474:	2317      	movs	r3, #23
   12476:	18fb      	adds	r3, r7, r3
   12478:	781b      	ldrb	r3, [r3, #0]
   1247a:	2b01      	cmp	r3, #1
   1247c:	d9bf      	bls.n	123fe <_eeprom_emulator_move_data_to_spare+0x6a>
			}
		}
	}

	/* Need to move both saved logical pages stored in the same row */
	for (uint8_t c = 0; c < 2; c++) {
   1247e:	2315      	movs	r3, #21
   12480:	18fb      	adds	r3, r7, r3
   12482:	2200      	movs	r2, #0
   12484:	701a      	strb	r2, [r3, #0]
   12486:	e051      	b.n	1252c <_eeprom_emulator_move_data_to_spare+0x198>
		/* Find the physical page index for the new spare row pages */
		uint32_t new_page =
				((_eeprom_instance.spare_row * NVMCTRL_ROW_PAGES) + c);
   12488:	4b33      	ldr	r3, [pc, #204]	; (12558 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   1248a:	2287      	movs	r2, #135	; 0x87
   1248c:	5c9b      	ldrb	r3, [r3, r2]
   1248e:	009a      	lsls	r2, r3, #2
   12490:	2315      	movs	r3, #21
   12492:	18fb      	adds	r3, r7, r3
   12494:	781b      	ldrb	r3, [r3, #0]
   12496:	18d3      	adds	r3, r2, r3
		uint32_t new_page =
   12498:	60fb      	str	r3, [r7, #12]

		/* Commit any cached data to physical non-volatile memory */
		eeprom_emulator_commit_page_buffer();
   1249a:	4b30      	ldr	r3, [pc, #192]	; (1255c <_eeprom_emulator_move_data_to_spare+0x1c8>)
   1249c:	4798      	blx	r3

		/* Check if we we are looking at the page the calling function wishes
		 * to change during the move operation */
		if (logical_page == page_trans[c].logical_page) {
   1249e:	2315      	movs	r3, #21
   124a0:	18fb      	adds	r3, r7, r3
   124a2:	781a      	ldrb	r2, [r3, #0]
   124a4:	2308      	movs	r3, #8
   124a6:	18fb      	adds	r3, r7, r3
   124a8:	0052      	lsls	r2, r2, #1
   124aa:	5cd3      	ldrb	r3, [r2, r3]
   124ac:	1dba      	adds	r2, r7, #6
   124ae:	7812      	ldrb	r2, [r2, #0]
   124b0:	429a      	cmp	r2, r3
   124b2:	d10d      	bne.n	124d0 <_eeprom_emulator_move_data_to_spare+0x13c>
			/* Fill out new (updated) logical page's header in the cache */
			_eeprom_instance.cache.header.logical_page = logical_page;
   124b4:	4b28      	ldr	r3, [pc, #160]	; (12558 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   124b6:	1dba      	adds	r2, r7, #6
   124b8:	2188      	movs	r1, #136	; 0x88
   124ba:	7812      	ldrb	r2, [r2, #0]
   124bc:	545a      	strb	r2, [r3, r1]

			/* Write data to SRAM cache */
			memcpy(_eeprom_instance.cache.data, data, EEPROM_PAGE_SIZE);
   124be:	4b26      	ldr	r3, [pc, #152]	; (12558 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   124c0:	228c      	movs	r2, #140	; 0x8c
   124c2:	6839      	ldr	r1, [r7, #0]
   124c4:	189b      	adds	r3, r3, r2
   124c6:	223c      	movs	r2, #60	; 0x3c
   124c8:	0018      	movs	r0, r3
   124ca:	4b25      	ldr	r3, [pc, #148]	; (12560 <_eeprom_emulator_move_data_to_spare+0x1cc>)
   124cc:	4798      	blx	r3
   124ce:	e00e      	b.n	124ee <_eeprom_emulator_move_data_to_spare+0x15a>
		} else {
			/* Copy existing EEPROM page to cache buffer wholesale */
			_eeprom_emulator_nvm_read_page(
					page_trans[c].physical_page, &_eeprom_instance.cache);
   124d0:	2315      	movs	r3, #21
   124d2:	18fb      	adds	r3, r7, r3
   124d4:	781b      	ldrb	r3, [r3, #0]
   124d6:	2208      	movs	r2, #8
   124d8:	18ba      	adds	r2, r7, r2
   124da:	005b      	lsls	r3, r3, #1
   124dc:	18d3      	adds	r3, r2, r3
   124de:	3301      	adds	r3, #1
   124e0:	781b      	ldrb	r3, [r3, #0]
			_eeprom_emulator_nvm_read_page(
   124e2:	b29b      	uxth	r3, r3
   124e4:	4a1f      	ldr	r2, [pc, #124]	; (12564 <_eeprom_emulator_move_data_to_spare+0x1d0>)
   124e6:	0011      	movs	r1, r2
   124e8:	0018      	movs	r0, r3
   124ea:	4b1f      	ldr	r3, [pc, #124]	; (12568 <_eeprom_emulator_move_data_to_spare+0x1d4>)
   124ec:	4798      	blx	r3
		}

		/* Fill the physical NVM buffer with the new data so that it can be
		 * quickly committed in the future if needed due to a low power
		 * condition */
		_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
   124ee:	68fb      	ldr	r3, [r7, #12]
   124f0:	b29b      	uxth	r3, r3
   124f2:	4a1c      	ldr	r2, [pc, #112]	; (12564 <_eeprom_emulator_move_data_to_spare+0x1d0>)
   124f4:	0011      	movs	r1, r2
   124f6:	0018      	movs	r0, r3
   124f8:	4b1c      	ldr	r3, [pc, #112]	; (1256c <_eeprom_emulator_move_data_to_spare+0x1d8>)
   124fa:	4798      	blx	r3

		/* Update the page map with the new page location and indicate that
		 * the cache now holds new data */
		_eeprom_instance.page_map[page_trans[c].logical_page] = new_page;
   124fc:	2315      	movs	r3, #21
   124fe:	18fb      	adds	r3, r7, r3
   12500:	781a      	ldrb	r2, [r3, #0]
   12502:	2308      	movs	r3, #8
   12504:	18fb      	adds	r3, r7, r3
   12506:	0052      	lsls	r2, r2, #1
   12508:	5cd3      	ldrb	r3, [r2, r3]
   1250a:	0019      	movs	r1, r3
   1250c:	68fb      	ldr	r3, [r7, #12]
   1250e:	b2da      	uxtb	r2, r3
   12510:	4b11      	ldr	r3, [pc, #68]	; (12558 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   12512:	185b      	adds	r3, r3, r1
   12514:	72da      	strb	r2, [r3, #11]
		_eeprom_instance.cache_active = true;
   12516:	4b10      	ldr	r3, [pc, #64]	; (12558 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   12518:	22c8      	movs	r2, #200	; 0xc8
   1251a:	2101      	movs	r1, #1
   1251c:	5499      	strb	r1, [r3, r2]
	for (uint8_t c = 0; c < 2; c++) {
   1251e:	2315      	movs	r3, #21
   12520:	18fb      	adds	r3, r7, r3
   12522:	781a      	ldrb	r2, [r3, #0]
   12524:	2315      	movs	r3, #21
   12526:	18fb      	adds	r3, r7, r3
   12528:	3201      	adds	r2, #1
   1252a:	701a      	strb	r2, [r3, #0]
   1252c:	2315      	movs	r3, #21
   1252e:	18fb      	adds	r3, r7, r3
   12530:	781b      	ldrb	r3, [r3, #0]
   12532:	2b01      	cmp	r3, #1
   12534:	d9a8      	bls.n	12488 <_eeprom_emulator_move_data_to_spare+0xf4>
	}

	/* Erase the row that was moved and set it as the new spare row */
	_eeprom_emulator_nvm_erase_row(row_number);
   12536:	1dfb      	adds	r3, r7, #7
   12538:	781b      	ldrb	r3, [r3, #0]
   1253a:	0018      	movs	r0, r3
   1253c:	4b0c      	ldr	r3, [pc, #48]	; (12570 <_eeprom_emulator_move_data_to_spare+0x1dc>)
   1253e:	4798      	blx	r3

	/* Keep the index of the new spare row */
	_eeprom_instance.spare_row = row_number;
   12540:	4b05      	ldr	r3, [pc, #20]	; (12558 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   12542:	1dfa      	adds	r2, r7, #7
   12544:	2187      	movs	r1, #135	; 0x87
   12546:	7812      	ldrb	r2, [r2, #0]
   12548:	545a      	strb	r2, [r3, r1]

	return error_code;
   1254a:	2314      	movs	r3, #20
   1254c:	18fb      	adds	r3, r7, r3
   1254e:	781b      	ldrb	r3, [r3, #0]
}
   12550:	0018      	movs	r0, r3
   12552:	46bd      	mov	sp, r7
   12554:	b006      	add	sp, #24
   12556:	bd80      	pop	{r7, pc}
   12558:	2000040c 	.word	0x2000040c
   1255c:	00012991 	.word	0x00012991
   12560:	00017b21 	.word	0x00017b21
   12564:	20000494 	.word	0x20000494
   12568:	00011ee9 	.word	0x00011ee9
   1256c:	00011e4d 	.word	0x00011e4d
   12570:	00011e05 	.word	0x00011e05

00012574 <_eeprom_emulator_create_master_page>:
 *
 * Creates a new master page in emulated EEPROM, giving information on the
 * emulator used to store the EEPROM data.
 */
static void _eeprom_emulator_create_master_page(void)
{
   12574:	b590      	push	{r4, r7, lr}
   12576:	b095      	sub	sp, #84	; 0x54
   12578:	af00      	add	r7, sp, #0
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
   1257a:	2340      	movs	r3, #64	; 0x40
   1257c:	18fb      	adds	r3, r7, r3
   1257e:	4a29      	ldr	r2, [pc, #164]	; (12624 <_eeprom_emulator_create_master_page+0xb0>)
   12580:	ca13      	ldmia	r2!, {r0, r1, r4}
   12582:	c313      	stmia	r3!, {r0, r1, r4}

	struct _eeprom_master_page master_page;
	memset(&master_page, 0xFF, sizeof(master_page));
   12584:	003b      	movs	r3, r7
   12586:	2240      	movs	r2, #64	; 0x40
   12588:	21ff      	movs	r1, #255	; 0xff
   1258a:	0018      	movs	r0, r3
   1258c:	4b26      	ldr	r3, [pc, #152]	; (12628 <_eeprom_emulator_create_master_page+0xb4>)
   1258e:	4798      	blx	r3

	/* Fill out the magic key header to indicate an initialized master page */
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   12590:	234f      	movs	r3, #79	; 0x4f
   12592:	18fb      	adds	r3, r7, r3
   12594:	2200      	movs	r2, #0
   12596:	701a      	strb	r2, [r3, #0]
   12598:	e013      	b.n	125c2 <_eeprom_emulator_create_master_page+0x4e>
		master_page.magic_key[c] = magic_key[c];
   1259a:	234f      	movs	r3, #79	; 0x4f
   1259c:	18fb      	adds	r3, r7, r3
   1259e:	781a      	ldrb	r2, [r3, #0]
   125a0:	234f      	movs	r3, #79	; 0x4f
   125a2:	18fb      	adds	r3, r7, r3
   125a4:	7819      	ldrb	r1, [r3, #0]
   125a6:	2340      	movs	r3, #64	; 0x40
   125a8:	18fb      	adds	r3, r7, r3
   125aa:	0089      	lsls	r1, r1, #2
   125ac:	58c9      	ldr	r1, [r1, r3]
   125ae:	003b      	movs	r3, r7
   125b0:	0092      	lsls	r2, r2, #2
   125b2:	50d1      	str	r1, [r2, r3]
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   125b4:	234f      	movs	r3, #79	; 0x4f
   125b6:	18fb      	adds	r3, r7, r3
   125b8:	781a      	ldrb	r2, [r3, #0]
   125ba:	234f      	movs	r3, #79	; 0x4f
   125bc:	18fb      	adds	r3, r7, r3
   125be:	3201      	adds	r2, #1
   125c0:	701a      	strb	r2, [r3, #0]
   125c2:	234f      	movs	r3, #79	; 0x4f
   125c4:	18fb      	adds	r3, r7, r3
   125c6:	781b      	ldrb	r3, [r3, #0]
   125c8:	2b02      	cmp	r3, #2
   125ca:	d9e6      	bls.n	1259a <_eeprom_emulator_create_master_page+0x26>
	}

	/* Update master header with version information of this emulator */
	master_page.emulator_id   = EEPROM_EMULATOR_ID;
   125cc:	003b      	movs	r3, r7
   125ce:	2201      	movs	r2, #1
   125d0:	73da      	strb	r2, [r3, #15]
	master_page.major_version = EEPROM_MAJOR_VERSION;
   125d2:	003b      	movs	r3, r7
   125d4:	2201      	movs	r2, #1
   125d6:	731a      	strb	r2, [r3, #12]
	master_page.minor_version = EEPROM_MINOR_VERSION;
   125d8:	003b      	movs	r3, r7
   125da:	2200      	movs	r2, #0
   125dc:	735a      	strb	r2, [r3, #13]
	master_page.revision      = EEPROM_REVISION;
   125de:	003b      	movs	r3, r7
   125e0:	2200      	movs	r2, #0
   125e2:	739a      	strb	r2, [r3, #14]

	_eeprom_emulator_nvm_erase_row(
			EEPROM_MASTER_PAGE_NUMBER / NVMCTRL_ROW_PAGES);
   125e4:	4b11      	ldr	r3, [pc, #68]	; (1262c <_eeprom_emulator_create_master_page+0xb8>)
   125e6:	891b      	ldrh	r3, [r3, #8]
   125e8:	3b01      	subs	r3, #1
   125ea:	2b00      	cmp	r3, #0
   125ec:	da00      	bge.n	125f0 <_eeprom_emulator_create_master_page+0x7c>
   125ee:	3303      	adds	r3, #3
   125f0:	109b      	asrs	r3, r3, #2
	_eeprom_emulator_nvm_erase_row(
   125f2:	b2db      	uxtb	r3, r3
   125f4:	0018      	movs	r0, r3
   125f6:	4b0e      	ldr	r3, [pc, #56]	; (12630 <_eeprom_emulator_create_master_page+0xbc>)
   125f8:	4798      	blx	r3

	/* Write the new master page data to physical memory */
	_eeprom_emulator_nvm_fill_cache(EEPROM_MASTER_PAGE_NUMBER, &master_page);
   125fa:	4b0c      	ldr	r3, [pc, #48]	; (1262c <_eeprom_emulator_create_master_page+0xb8>)
   125fc:	891b      	ldrh	r3, [r3, #8]
   125fe:	3b01      	subs	r3, #1
   12600:	b29b      	uxth	r3, r3
   12602:	003a      	movs	r2, r7
   12604:	0011      	movs	r1, r2
   12606:	0018      	movs	r0, r3
   12608:	4b0a      	ldr	r3, [pc, #40]	; (12634 <_eeprom_emulator_create_master_page+0xc0>)
   1260a:	4798      	blx	r3
	_eeprom_emulator_nvm_commit_cache(EEPROM_MASTER_PAGE_NUMBER);
   1260c:	4b07      	ldr	r3, [pc, #28]	; (1262c <_eeprom_emulator_create_master_page+0xb8>)
   1260e:	891b      	ldrh	r3, [r3, #8]
   12610:	3b01      	subs	r3, #1
   12612:	b29b      	uxth	r3, r3
   12614:	0018      	movs	r0, r3
   12616:	4b08      	ldr	r3, [pc, #32]	; (12638 <_eeprom_emulator_create_master_page+0xc4>)
   12618:	4798      	blx	r3
}
   1261a:	46c0      	nop			; (mov r8, r8)
   1261c:	46bd      	mov	sp, r7
   1261e:	b015      	add	sp, #84	; 0x54
   12620:	bd90      	pop	{r4, r7, pc}
   12622:	46c0      	nop			; (mov r8, r8)
   12624:	00019868 	.word	0x00019868
   12628:	00017b57 	.word	0x00017b57
   1262c:	2000040c 	.word	0x2000040c
   12630:	00011e05 	.word	0x00011e05
   12634:	00011e4d 	.word	0x00011e4d
   12638:	00011e9d 	.word	0x00011e9d

0001263c <_eeprom_emulator_verify_master_page>:
 * \retval STATUS_ERR_BAD_FORMAT  Master page contents was invalid
 * \retval STATUS_ERR_IO          Master page indicates the data is incompatible
 *                                with this version of the EEPROM emulator
 */
static enum status_code _eeprom_emulator_verify_master_page(void)
{
   1263c:	b590      	push	{r4, r7, lr}
   1263e:	b095      	sub	sp, #84	; 0x54
   12640:	af00      	add	r7, sp, #0
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
   12642:	2340      	movs	r3, #64	; 0x40
   12644:	18fb      	adds	r3, r7, r3
   12646:	4a22      	ldr	r2, [pc, #136]	; (126d0 <_eeprom_emulator_verify_master_page+0x94>)
   12648:	ca13      	ldmia	r2!, {r0, r1, r4}
   1264a:	c313      	stmia	r3!, {r0, r1, r4}
	struct _eeprom_master_page master_page;

	/* Copy the master page to the RAM buffer so that it can be inspected */
	_eeprom_emulator_nvm_read_page(EEPROM_MASTER_PAGE_NUMBER, &master_page);
   1264c:	4b21      	ldr	r3, [pc, #132]	; (126d4 <_eeprom_emulator_verify_master_page+0x98>)
   1264e:	891b      	ldrh	r3, [r3, #8]
   12650:	3b01      	subs	r3, #1
   12652:	b29b      	uxth	r3, r3
   12654:	003a      	movs	r2, r7
   12656:	0011      	movs	r1, r2
   12658:	0018      	movs	r0, r3
   1265a:	4b1f      	ldr	r3, [pc, #124]	; (126d8 <_eeprom_emulator_verify_master_page+0x9c>)
   1265c:	4798      	blx	r3

	/* Verify magic key is correct in the master page header */
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   1265e:	234f      	movs	r3, #79	; 0x4f
   12660:	18fb      	adds	r3, r7, r3
   12662:	2200      	movs	r2, #0
   12664:	701a      	strb	r2, [r3, #0]
   12666:	e017      	b.n	12698 <_eeprom_emulator_verify_master_page+0x5c>
		if (master_page.magic_key[c] != magic_key[c]) {
   12668:	234f      	movs	r3, #79	; 0x4f
   1266a:	18fb      	adds	r3, r7, r3
   1266c:	781a      	ldrb	r2, [r3, #0]
   1266e:	003b      	movs	r3, r7
   12670:	0092      	lsls	r2, r2, #2
   12672:	58d2      	ldr	r2, [r2, r3]
   12674:	234f      	movs	r3, #79	; 0x4f
   12676:	18fb      	adds	r3, r7, r3
   12678:	7819      	ldrb	r1, [r3, #0]
   1267a:	2340      	movs	r3, #64	; 0x40
   1267c:	18fb      	adds	r3, r7, r3
   1267e:	0089      	lsls	r1, r1, #2
   12680:	58cb      	ldr	r3, [r1, r3]
   12682:	429a      	cmp	r2, r3
   12684:	d001      	beq.n	1268a <_eeprom_emulator_verify_master_page+0x4e>
			return STATUS_ERR_BAD_FORMAT;
   12686:	231a      	movs	r3, #26
   12688:	e01e      	b.n	126c8 <_eeprom_emulator_verify_master_page+0x8c>
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   1268a:	234f      	movs	r3, #79	; 0x4f
   1268c:	18fb      	adds	r3, r7, r3
   1268e:	781a      	ldrb	r2, [r3, #0]
   12690:	234f      	movs	r3, #79	; 0x4f
   12692:	18fb      	adds	r3, r7, r3
   12694:	3201      	adds	r2, #1
   12696:	701a      	strb	r2, [r3, #0]
   12698:	234f      	movs	r3, #79	; 0x4f
   1269a:	18fb      	adds	r3, r7, r3
   1269c:	781b      	ldrb	r3, [r3, #0]
   1269e:	2b02      	cmp	r3, #2
   126a0:	d9e2      	bls.n	12668 <_eeprom_emulator_verify_master_page+0x2c>
		}
	}

	/* Verify emulator ID in header to ensure the same scheme is used */
	if (master_page.emulator_id   != EEPROM_EMULATOR_ID) {
   126a2:	003b      	movs	r3, r7
   126a4:	7bdb      	ldrb	r3, [r3, #15]
   126a6:	2b01      	cmp	r3, #1
   126a8:	d001      	beq.n	126ae <_eeprom_emulator_verify_master_page+0x72>
		return STATUS_ERR_IO;
   126aa:	2310      	movs	r3, #16
   126ac:	e00c      	b.n	126c8 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Verify major version in header to ensure the same version is used */
	if (master_page.major_version != EEPROM_MAJOR_VERSION) {
   126ae:	003b      	movs	r3, r7
   126b0:	7b1b      	ldrb	r3, [r3, #12]
   126b2:	2b01      	cmp	r3, #1
   126b4:	d001      	beq.n	126ba <_eeprom_emulator_verify_master_page+0x7e>
		return STATUS_ERR_IO;
   126b6:	2310      	movs	r3, #16
   126b8:	e006      	b.n	126c8 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Verify minor version in header to ensure the same version is used */
	if (master_page.minor_version != EEPROM_MINOR_VERSION) {
   126ba:	003b      	movs	r3, r7
   126bc:	7b5b      	ldrb	r3, [r3, #13]
   126be:	2b00      	cmp	r3, #0
   126c0:	d001      	beq.n	126c6 <_eeprom_emulator_verify_master_page+0x8a>
		return STATUS_ERR_IO;
   126c2:	2310      	movs	r3, #16
   126c4:	e000      	b.n	126c8 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Don't verify revision number - same major/minor is considered enough
	 * to ensure the stored data is compatible. */

	return STATUS_OK;
   126c6:	2300      	movs	r3, #0
}
   126c8:	0018      	movs	r0, r3
   126ca:	46bd      	mov	sp, r7
   126cc:	b015      	add	sp, #84	; 0x54
   126ce:	bd90      	pop	{r4, r7, pc}
   126d0:	00019868 	.word	0x00019868
   126d4:	2000040c 	.word	0x2000040c
   126d8:	00011ee9 	.word	0x00011ee9

000126dc <eeprom_emulator_init>:
 *                                formatted
 * \retval STATUS_ERR_IO          EEPROM data is incompatible with this version
 *                                or scheme of the EEPROM emulator
 */
enum status_code eeprom_emulator_init(void)
{
   126dc:	b590      	push	{r4, r7, lr}
   126de:	b087      	sub	sp, #28
   126e0:	af00      	add	r7, sp, #0
	enum status_code error_code = STATUS_OK;
   126e2:	2317      	movs	r3, #23
   126e4:	18fb      	adds	r3, r7, r3
   126e6:	2200      	movs	r2, #0
   126e8:	701a      	strb	r2, [r3, #0]
	struct nvm_parameters parameters;

	/* Retrieve the NVM controller configuration - enable manual page writing
	 * mode so that the emulator has exclusive control over page writes to
	 * allow for caching */
	nvm_get_config_defaults(&config);
   126ea:	2310      	movs	r3, #16
   126ec:	18fb      	adds	r3, r7, r3
   126ee:	0018      	movs	r0, r3
   126f0:	4b2e      	ldr	r3, [pc, #184]	; (127ac <eeprom_emulator_init+0xd0>)
   126f2:	4798      	blx	r3
	config.manual_page_write = true;
   126f4:	2310      	movs	r3, #16
   126f6:	18fb      	adds	r3, r7, r3
   126f8:	2201      	movs	r2, #1
   126fa:	705a      	strb	r2, [r3, #1]

	/* Apply new NVM configuration */
	do {
		error_code = nvm_set_config(&config);
   126fc:	2317      	movs	r3, #23
   126fe:	18fc      	adds	r4, r7, r3
   12700:	2310      	movs	r3, #16
   12702:	18fb      	adds	r3, r7, r3
   12704:	0018      	movs	r0, r3
   12706:	4b2a      	ldr	r3, [pc, #168]	; (127b0 <eeprom_emulator_init+0xd4>)
   12708:	4798      	blx	r3
   1270a:	0003      	movs	r3, r0
   1270c:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   1270e:	2317      	movs	r3, #23
   12710:	18fb      	adds	r3, r7, r3
   12712:	781b      	ldrb	r3, [r3, #0]
   12714:	2b05      	cmp	r3, #5
   12716:	d0f1      	beq.n	126fc <eeprom_emulator_init+0x20>

	/* Get the NVM controller configuration parameters */
	nvm_get_parameters(&parameters);
   12718:	1d3b      	adds	r3, r7, #4
   1271a:	0018      	movs	r0, r3
   1271c:	4b25      	ldr	r3, [pc, #148]	; (127b4 <eeprom_emulator_init+0xd8>)
   1271e:	4798      	blx	r3

	/* Ensure the device fuses are configured for at least one master page row,
	 * one user EEPROM data row and one spare row */
	if (parameters.eeprom_number_of_pages < (3 * NVMCTRL_ROW_PAGES)) {
   12720:	1d3b      	adds	r3, r7, #4
   12722:	685b      	ldr	r3, [r3, #4]
   12724:	2b0b      	cmp	r3, #11
   12726:	d801      	bhi.n	1272c <eeprom_emulator_init+0x50>
		return STATUS_ERR_NO_MEMORY;
   12728:	2316      	movs	r3, #22
   1272a:	e03b      	b.n	127a4 <eeprom_emulator_init+0xc8>
	 *  - One row is reserved for the master page
	 *  - One row is reserved for the spare row
	 *  - Two logical pages can be stored in one physical row
	 */
	_eeprom_instance.physical_pages =
			parameters.eeprom_number_of_pages;
   1272c:	1d3b      	adds	r3, r7, #4
   1272e:	685b      	ldr	r3, [r3, #4]
	_eeprom_instance.physical_pages =
   12730:	b29a      	uxth	r2, r3
   12732:	4b21      	ldr	r3, [pc, #132]	; (127b8 <eeprom_emulator_init+0xdc>)
   12734:	811a      	strh	r2, [r3, #8]
	_eeprom_instance.logical_pages  =
			(parameters.eeprom_number_of_pages - (2 * NVMCTRL_ROW_PAGES)) / 2;
   12736:	1d3b      	adds	r3, r7, #4
   12738:	685b      	ldr	r3, [r3, #4]
   1273a:	3b08      	subs	r3, #8
   1273c:	085b      	lsrs	r3, r3, #1
	_eeprom_instance.logical_pages  =
   1273e:	b2da      	uxtb	r2, r3
   12740:	4b1d      	ldr	r3, [pc, #116]	; (127b8 <eeprom_emulator_init+0xdc>)
   12742:	729a      	strb	r2, [r3, #10]

	/* Configure the EEPROM instance starting physical address in FLASH and
	 * pre-compute the index of the first page in FLASH used for EEPROM */
	_eeprom_instance.flash =
			(void*)(FLASH_SIZE -
			((uint32_t)_eeprom_instance.physical_pages * NVMCTRL_PAGE_SIZE));
   12744:	4b1c      	ldr	r3, [pc, #112]	; (127b8 <eeprom_emulator_init+0xdc>)
   12746:	891b      	ldrh	r3, [r3, #8]
   12748:	001a      	movs	r2, r3
			(void*)(FLASH_SIZE -
   1274a:	0013      	movs	r3, r2
   1274c:	069b      	lsls	r3, r3, #26
   1274e:	1a9b      	subs	r3, r3, r2
   12750:	019b      	lsls	r3, r3, #6
   12752:	2280      	movs	r2, #128	; 0x80
   12754:	02d2      	lsls	r2, r2, #11
   12756:	4694      	mov	ip, r2
   12758:	4463      	add	r3, ip
   1275a:	001a      	movs	r2, r3
	_eeprom_instance.flash =
   1275c:	4b16      	ldr	r3, [pc, #88]	; (127b8 <eeprom_emulator_init+0xdc>)
   1275e:	605a      	str	r2, [r3, #4]

	/* Clear EEPROM page write cache on initialization */
	_eeprom_instance.cache_active = false;
   12760:	4b15      	ldr	r3, [pc, #84]	; (127b8 <eeprom_emulator_init+0xdc>)
   12762:	22c8      	movs	r2, #200	; 0xc8
   12764:	2100      	movs	r1, #0
   12766:	5499      	strb	r1, [r3, r2]

	/* Scan physical memory and re-create logical to physical page mapping
	 * table to locate logical pages of EEPROM data in physical FLASH */
	_eeprom_emulator_update_page_mapping();
   12768:	4b14      	ldr	r3, [pc, #80]	; (127bc <eeprom_emulator_init+0xe0>)
   1276a:	4798      	blx	r3

	/* Could not find spare row - abort as the memory appears to be corrupt */
	if (_eeprom_instance.spare_row == EEPROM_INVALID_ROW_NUMBER) {
   1276c:	4b12      	ldr	r3, [pc, #72]	; (127b8 <eeprom_emulator_init+0xdc>)
   1276e:	2287      	movs	r2, #135	; 0x87
   12770:	5c9b      	ldrb	r3, [r3, r2]
   12772:	2b3f      	cmp	r3, #63	; 0x3f
   12774:	d101      	bne.n	1277a <eeprom_emulator_init+0x9e>
		return STATUS_ERR_BAD_FORMAT;
   12776:	231a      	movs	r3, #26
   12778:	e014      	b.n	127a4 <eeprom_emulator_init+0xc8>
	}

	/* Verify that the master page contains valid data for this service */
	error_code = _eeprom_emulator_verify_master_page();
   1277a:	2317      	movs	r3, #23
   1277c:	18fc      	adds	r4, r7, r3
   1277e:	4b10      	ldr	r3, [pc, #64]	; (127c0 <eeprom_emulator_init+0xe4>)
   12780:	4798      	blx	r3
   12782:	0003      	movs	r3, r0
   12784:	7023      	strb	r3, [r4, #0]
	if (error_code != STATUS_OK) {
   12786:	2317      	movs	r3, #23
   12788:	18fb      	adds	r3, r7, r3
   1278a:	781b      	ldrb	r3, [r3, #0]
   1278c:	2b00      	cmp	r3, #0
   1278e:	d003      	beq.n	12798 <eeprom_emulator_init+0xbc>
		return error_code;
   12790:	2317      	movs	r3, #23
   12792:	18fb      	adds	r3, r7, r3
   12794:	781b      	ldrb	r3, [r3, #0]
   12796:	e005      	b.n	127a4 <eeprom_emulator_init+0xc8>
	}

	/* Mark initialization as complete */
	_eeprom_instance.initialized = true;
   12798:	4b07      	ldr	r3, [pc, #28]	; (127b8 <eeprom_emulator_init+0xdc>)
   1279a:	2201      	movs	r2, #1
   1279c:	701a      	strb	r2, [r3, #0]

	return error_code;
   1279e:	2317      	movs	r3, #23
   127a0:	18fb      	adds	r3, r7, r3
   127a2:	781b      	ldrb	r3, [r3, #0]
}
   127a4:	0018      	movs	r0, r3
   127a6:	46bd      	mov	sp, r7
   127a8:	b007      	add	sp, #28
   127aa:	bd90      	pop	{r4, r7, pc}
   127ac:	00011dc9 	.word	0x00011dc9
   127b0:	000117a5 	.word	0x000117a5
   127b4:	00011c85 	.word	0x00011c85
   127b8:	2000040c 	.word	0x2000040c
   127bc:	000121a9 	.word	0x000121a9
   127c0:	0001263d 	.word	0x0001263d

000127c4 <eeprom_emulator_erase_memory>:
 *
 * Erases and re-initializes the emulated EEPROM memory space, destroying any
 * existing data.
 */
void eeprom_emulator_erase_memory(void)
{
   127c4:	b580      	push	{r7, lr}
   127c6:	af00      	add	r7, sp, #0
	/* Create new EEPROM memory block in EEPROM emulation section */
	_eeprom_emulator_format_memory();
   127c8:	4b04      	ldr	r3, [pc, #16]	; (127dc <eeprom_emulator_erase_memory+0x18>)
   127ca:	4798      	blx	r3

	/* Write EEPROM emulation master block */
	_eeprom_emulator_create_master_page();
   127cc:	4b04      	ldr	r3, [pc, #16]	; (127e0 <eeprom_emulator_erase_memory+0x1c>)
   127ce:	4798      	blx	r3

	/* Map the newly created EEPROM memory block */
	_eeprom_emulator_update_page_mapping();
   127d0:	4b04      	ldr	r3, [pc, #16]	; (127e4 <eeprom_emulator_erase_memory+0x20>)
   127d2:	4798      	blx	r3
}
   127d4:	46c0      	nop			; (mov r8, r8)
   127d6:	46bd      	mov	sp, r7
   127d8:	bd80      	pop	{r7, pc}
   127da:	46c0      	nop			; (mov r8, r8)
   127dc:	00011f39 	.word	0x00011f39
   127e0:	00012575 	.word	0x00012575
   127e4:	000121a9 	.word	0x000121a9

000127e8 <eeprom_emulator_write_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_write_page(
		const uint8_t logical_page,
		const uint8_t *const data)
{
   127e8:	b590      	push	{r4, r7, lr}
   127ea:	b085      	sub	sp, #20
   127ec:	af00      	add	r7, sp, #0
   127ee:	0002      	movs	r2, r0
   127f0:	6039      	str	r1, [r7, #0]
   127f2:	1dfb      	adds	r3, r7, #7
   127f4:	701a      	strb	r2, [r3, #0]
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
   127f6:	4b38      	ldr	r3, [pc, #224]	; (128d8 <eeprom_emulator_write_page+0xf0>)
   127f8:	781b      	ldrb	r3, [r3, #0]
   127fa:	2201      	movs	r2, #1
   127fc:	4053      	eors	r3, r2
   127fe:	b2db      	uxtb	r3, r3
   12800:	2b00      	cmp	r3, #0
   12802:	d001      	beq.n	12808 <eeprom_emulator_write_page+0x20>
		return STATUS_ERR_NOT_INITIALIZED;
   12804:	231f      	movs	r3, #31
   12806:	e063      	b.n	128d0 <eeprom_emulator_write_page+0xe8>
	}

	/* Make sure the write address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
   12808:	4b33      	ldr	r3, [pc, #204]	; (128d8 <eeprom_emulator_write_page+0xf0>)
   1280a:	7a9b      	ldrb	r3, [r3, #10]
   1280c:	1dfa      	adds	r2, r7, #7
   1280e:	7812      	ldrb	r2, [r2, #0]
   12810:	429a      	cmp	r2, r3
   12812:	d301      	bcc.n	12818 <eeprom_emulator_write_page+0x30>
		return STATUS_ERR_BAD_ADDRESS;
   12814:	2318      	movs	r3, #24
   12816:	e05b      	b.n	128d0 <eeprom_emulator_write_page+0xe8>
	}

	/* Check if the cache is active and the currently cached page is not the
	 * page that is being written (if not, we need to commit and cache the new
	 * page) */
	if ((_eeprom_instance.cache_active == true) &&
   12818:	4b2f      	ldr	r3, [pc, #188]	; (128d8 <eeprom_emulator_write_page+0xf0>)
   1281a:	22c8      	movs	r2, #200	; 0xc8
   1281c:	5c9b      	ldrb	r3, [r3, r2]
   1281e:	2b00      	cmp	r3, #0
   12820:	d008      	beq.n	12834 <eeprom_emulator_write_page+0x4c>
			(_eeprom_instance.cache.header.logical_page != logical_page)) {
   12822:	4b2d      	ldr	r3, [pc, #180]	; (128d8 <eeprom_emulator_write_page+0xf0>)
   12824:	2288      	movs	r2, #136	; 0x88
   12826:	5c9b      	ldrb	r3, [r3, r2]
	if ((_eeprom_instance.cache_active == true) &&
   12828:	1dfa      	adds	r2, r7, #7
   1282a:	7812      	ldrb	r2, [r2, #0]
   1282c:	429a      	cmp	r2, r3
   1282e:	d001      	beq.n	12834 <eeprom_emulator_write_page+0x4c>
		/* Commit the currently cached data buffer to non-volatile memory */
		eeprom_emulator_commit_page_buffer();
   12830:	4b2a      	ldr	r3, [pc, #168]	; (128dc <eeprom_emulator_write_page+0xf4>)
   12832:	4798      	blx	r3
	}

	/* Check if we have space in the current page location's physical row for
	 * a new version, and if so get the new page index */
	uint8_t new_page = 0;
   12834:	230e      	movs	r3, #14
   12836:	18fb      	adds	r3, r7, r3
   12838:	2200      	movs	r2, #0
   1283a:	701a      	strb	r2, [r3, #0]
	bool page_spare  = _eeprom_emulator_is_page_free_on_row(
   1283c:	1dfb      	adds	r3, r7, #7
   1283e:	781b      	ldrb	r3, [r3, #0]
   12840:	4a25      	ldr	r2, [pc, #148]	; (128d8 <eeprom_emulator_write_page+0xf0>)
   12842:	18d3      	adds	r3, r2, r3
   12844:	7adb      	ldrb	r3, [r3, #11]
   12846:	220f      	movs	r2, #15
   12848:	18bc      	adds	r4, r7, r2
   1284a:	220e      	movs	r2, #14
   1284c:	18ba      	adds	r2, r7, r2
   1284e:	0011      	movs	r1, r2
   12850:	0018      	movs	r0, r3
   12852:	4b23      	ldr	r3, [pc, #140]	; (128e0 <eeprom_emulator_write_page+0xf8>)
   12854:	4798      	blx	r3
   12856:	0003      	movs	r3, r0
   12858:	7023      	strb	r3, [r4, #0]
			_eeprom_instance.page_map[logical_page], &new_page);

	/* Check if the current row is full, and we need to swap it out with a
	 * spare row */
	if (page_spare == false) {
   1285a:	230f      	movs	r3, #15
   1285c:	18fb      	adds	r3, r7, r3
   1285e:	781b      	ldrb	r3, [r3, #0]
   12860:	2201      	movs	r2, #1
   12862:	4053      	eors	r3, r2
   12864:	b2db      	uxtb	r3, r3
   12866:	2b00      	cmp	r3, #0
   12868:	d00e      	beq.n	12888 <eeprom_emulator_write_page+0xa0>
		/* Move the other page we aren't writing that is stored in the same
		 * page to the new row, and replace the old current page with the
		 * new page contents (cache is updated to match) */
		_eeprom_emulator_move_data_to_spare(
				_eeprom_instance.page_map[logical_page] / NVMCTRL_ROW_PAGES,
   1286a:	1dfb      	adds	r3, r7, #7
   1286c:	781b      	ldrb	r3, [r3, #0]
   1286e:	4a1a      	ldr	r2, [pc, #104]	; (128d8 <eeprom_emulator_write_page+0xf0>)
   12870:	18d3      	adds	r3, r2, r3
   12872:	7adb      	ldrb	r3, [r3, #11]
		_eeprom_emulator_move_data_to_spare(
   12874:	089b      	lsrs	r3, r3, #2
   12876:	b2d8      	uxtb	r0, r3
   12878:	683a      	ldr	r2, [r7, #0]
   1287a:	1dfb      	adds	r3, r7, #7
   1287c:	781b      	ldrb	r3, [r3, #0]
   1287e:	0019      	movs	r1, r3
   12880:	4b18      	ldr	r3, [pc, #96]	; (128e4 <eeprom_emulator_write_page+0xfc>)
   12882:	4798      	blx	r3
				logical_page,
				data);

		/* New data is now written and the cache is updated, exit */
		return STATUS_OK;
   12884:	2300      	movs	r3, #0
   12886:	e023      	b.n	128d0 <eeprom_emulator_write_page+0xe8>
	}

	/* Update the page cache header section with the new page header */
	_eeprom_instance.cache.header.logical_page = logical_page;
   12888:	4b13      	ldr	r3, [pc, #76]	; (128d8 <eeprom_emulator_write_page+0xf0>)
   1288a:	1dfa      	adds	r2, r7, #7
   1288c:	2188      	movs	r1, #136	; 0x88
   1288e:	7812      	ldrb	r2, [r2, #0]
   12890:	545a      	strb	r2, [r3, r1]

	/* Update the page cache contents with the new data */
	memcpy(&_eeprom_instance.cache.data,
   12892:	4b11      	ldr	r3, [pc, #68]	; (128d8 <eeprom_emulator_write_page+0xf0>)
   12894:	228c      	movs	r2, #140	; 0x8c
   12896:	6839      	ldr	r1, [r7, #0]
   12898:	189b      	adds	r3, r3, r2
   1289a:	223c      	movs	r2, #60	; 0x3c
   1289c:	0018      	movs	r0, r3
   1289e:	4b12      	ldr	r3, [pc, #72]	; (128e8 <eeprom_emulator_write_page+0x100>)
   128a0:	4798      	blx	r3
			data,
			EEPROM_PAGE_SIZE);

	/* Fill the physical NVM buffer with the new data so that it can be quickly
	 * committed in the future if needed due to a low power condition */
	_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
   128a2:	230e      	movs	r3, #14
   128a4:	18fb      	adds	r3, r7, r3
   128a6:	781b      	ldrb	r3, [r3, #0]
   128a8:	b29b      	uxth	r3, r3
   128aa:	4a10      	ldr	r2, [pc, #64]	; (128ec <eeprom_emulator_write_page+0x104>)
   128ac:	0011      	movs	r1, r2
   128ae:	0018      	movs	r0, r3
   128b0:	4b0f      	ldr	r3, [pc, #60]	; (128f0 <eeprom_emulator_write_page+0x108>)
   128b2:	4798      	blx	r3

	/* Update the cache parameters and mark the cache as active */
	_eeprom_instance.page_map[logical_page] = new_page;
   128b4:	1dfb      	adds	r3, r7, #7
   128b6:	781b      	ldrb	r3, [r3, #0]
   128b8:	220e      	movs	r2, #14
   128ba:	18ba      	adds	r2, r7, r2
   128bc:	7811      	ldrb	r1, [r2, #0]
   128be:	4a06      	ldr	r2, [pc, #24]	; (128d8 <eeprom_emulator_write_page+0xf0>)
   128c0:	18d3      	adds	r3, r2, r3
   128c2:	1c0a      	adds	r2, r1, #0
   128c4:	72da      	strb	r2, [r3, #11]
	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active           = true;
   128c6:	4b04      	ldr	r3, [pc, #16]	; (128d8 <eeprom_emulator_write_page+0xf0>)
   128c8:	22c8      	movs	r2, #200	; 0xc8
   128ca:	2101      	movs	r1, #1
   128cc:	5499      	strb	r1, [r3, r2]

	return STATUS_OK;
   128ce:	2300      	movs	r3, #0
}
   128d0:	0018      	movs	r0, r3
   128d2:	46bd      	mov	sp, r7
   128d4:	b005      	add	sp, #20
   128d6:	bd90      	pop	{r4, r7, pc}
   128d8:	2000040c 	.word	0x2000040c
   128dc:	00012991 	.word	0x00012991
   128e0:	000122fd 	.word	0x000122fd
   128e4:	00012395 	.word	0x00012395
   128e8:	00017b21 	.word	0x00017b21
   128ec:	20000494 	.word	0x20000494
   128f0:	00011e4d 	.word	0x00011e4d

000128f4 <eeprom_emulator_read_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_read_page(
		const uint8_t logical_page,
		uint8_t *const data)
{
   128f4:	b580      	push	{r7, lr}
   128f6:	b092      	sub	sp, #72	; 0x48
   128f8:	af00      	add	r7, sp, #0
   128fa:	0002      	movs	r2, r0
   128fc:	6039      	str	r1, [r7, #0]
   128fe:	1dfb      	adds	r3, r7, #7
   12900:	701a      	strb	r2, [r3, #0]
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
   12902:	4b20      	ldr	r3, [pc, #128]	; (12984 <eeprom_emulator_read_page+0x90>)
   12904:	781b      	ldrb	r3, [r3, #0]
   12906:	2201      	movs	r2, #1
   12908:	4053      	eors	r3, r2
   1290a:	b2db      	uxtb	r3, r3
   1290c:	2b00      	cmp	r3, #0
   1290e:	d001      	beq.n	12914 <eeprom_emulator_read_page+0x20>
		return STATUS_ERR_NOT_INITIALIZED;
   12910:	231f      	movs	r3, #31
   12912:	e033      	b.n	1297c <eeprom_emulator_read_page+0x88>
	}

	/* Make sure the read address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
   12914:	4b1b      	ldr	r3, [pc, #108]	; (12984 <eeprom_emulator_read_page+0x90>)
   12916:	7a9b      	ldrb	r3, [r3, #10]
   12918:	1dfa      	adds	r2, r7, #7
   1291a:	7812      	ldrb	r2, [r2, #0]
   1291c:	429a      	cmp	r2, r3
   1291e:	d301      	bcc.n	12924 <eeprom_emulator_read_page+0x30>
		return STATUS_ERR_BAD_ADDRESS;
   12920:	2318      	movs	r3, #24
   12922:	e02b      	b.n	1297c <eeprom_emulator_read_page+0x88>
	}

	/* Check if the page to read is currently cached (and potentially out of
	 * sync/newer than the physical memory) */
	if ((_eeprom_instance.cache_active == true) &&
   12924:	4b17      	ldr	r3, [pc, #92]	; (12984 <eeprom_emulator_read_page+0x90>)
   12926:	22c8      	movs	r2, #200	; 0xc8
   12928:	5c9b      	ldrb	r3, [r3, r2]
   1292a:	2b00      	cmp	r3, #0
   1292c:	d010      	beq.n	12950 <eeprom_emulator_read_page+0x5c>
		 (_eeprom_instance.cache.header.logical_page == logical_page)) {
   1292e:	4b15      	ldr	r3, [pc, #84]	; (12984 <eeprom_emulator_read_page+0x90>)
   12930:	2288      	movs	r2, #136	; 0x88
   12932:	5c9b      	ldrb	r3, [r3, r2]
	if ((_eeprom_instance.cache_active == true) &&
   12934:	1dfa      	adds	r2, r7, #7
   12936:	7812      	ldrb	r2, [r2, #0]
   12938:	429a      	cmp	r2, r3
   1293a:	d109      	bne.n	12950 <eeprom_emulator_read_page+0x5c>
		/* Copy the potentially newer cached data into the user buffer */
		memcpy(data, _eeprom_instance.cache.data, EEPROM_PAGE_SIZE);
   1293c:	6839      	ldr	r1, [r7, #0]
   1293e:	4b11      	ldr	r3, [pc, #68]	; (12984 <eeprom_emulator_read_page+0x90>)
   12940:	228c      	movs	r2, #140	; 0x8c
   12942:	0008      	movs	r0, r1
   12944:	189b      	adds	r3, r3, r2
   12946:	223c      	movs	r2, #60	; 0x3c
   12948:	0019      	movs	r1, r3
   1294a:	4b0f      	ldr	r3, [pc, #60]	; (12988 <eeprom_emulator_read_page+0x94>)
   1294c:	4798      	blx	r3
   1294e:	e014      	b.n	1297a <eeprom_emulator_read_page+0x86>
	} else {
		struct _eeprom_page temp;

		/* Copy the data from non-volatile memory into the temporary buffer */
		_eeprom_emulator_nvm_read_page(
				_eeprom_instance.page_map[logical_page], &temp);
   12950:	1dfb      	adds	r3, r7, #7
   12952:	781b      	ldrb	r3, [r3, #0]
   12954:	4a0b      	ldr	r2, [pc, #44]	; (12984 <eeprom_emulator_read_page+0x90>)
   12956:	18d3      	adds	r3, r2, r3
   12958:	7adb      	ldrb	r3, [r3, #11]
		_eeprom_emulator_nvm_read_page(
   1295a:	b29b      	uxth	r3, r3
   1295c:	2208      	movs	r2, #8
   1295e:	18ba      	adds	r2, r7, r2
   12960:	0011      	movs	r1, r2
   12962:	0018      	movs	r0, r3
   12964:	4b09      	ldr	r3, [pc, #36]	; (1298c <eeprom_emulator_read_page+0x98>)
   12966:	4798      	blx	r3

		/* Copy the data portion of the read page to the user's buffer */
		memcpy(data, temp.data, EEPROM_PAGE_SIZE);
   12968:	683a      	ldr	r2, [r7, #0]
   1296a:	2308      	movs	r3, #8
   1296c:	18fb      	adds	r3, r7, r3
   1296e:	0010      	movs	r0, r2
   12970:	3304      	adds	r3, #4
   12972:	223c      	movs	r2, #60	; 0x3c
   12974:	0019      	movs	r1, r3
   12976:	4b04      	ldr	r3, [pc, #16]	; (12988 <eeprom_emulator_read_page+0x94>)
   12978:	4798      	blx	r3
	}

	return STATUS_OK;
   1297a:	2300      	movs	r3, #0
}
   1297c:	0018      	movs	r0, r3
   1297e:	46bd      	mov	sp, r7
   12980:	b012      	add	sp, #72	; 0x48
   12982:	bd80      	pop	{r7, pc}
   12984:	2000040c 	.word	0x2000040c
   12988:	00017b21 	.word	0x00017b21
   1298c:	00011ee9 	.word	0x00011ee9

00012990 <eeprom_emulator_commit_page_buffer>:
 *       data loss.
 *
 * \return Status code indicating the status of the operation.
 */
enum status_code eeprom_emulator_commit_page_buffer(void)
{
   12990:	b580      	push	{r7, lr}
   12992:	b082      	sub	sp, #8
   12994:	af00      	add	r7, sp, #0
	enum status_code error_code = STATUS_OK;
   12996:	1dfb      	adds	r3, r7, #7
   12998:	2200      	movs	r2, #0
   1299a:	701a      	strb	r2, [r3, #0]

	/* If cache is inactive, no need to commit anything to physical memory */
	if (_eeprom_instance.cache_active == false) {
   1299c:	4b10      	ldr	r3, [pc, #64]	; (129e0 <eeprom_emulator_commit_page_buffer+0x50>)
   1299e:	22c8      	movs	r2, #200	; 0xc8
   129a0:	5c9b      	ldrb	r3, [r3, r2]
   129a2:	2201      	movs	r2, #1
   129a4:	4053      	eors	r3, r2
   129a6:	b2db      	uxtb	r3, r3
   129a8:	2b00      	cmp	r3, #0
   129aa:	d001      	beq.n	129b0 <eeprom_emulator_commit_page_buffer+0x20>
		return STATUS_OK;
   129ac:	2300      	movs	r3, #0
   129ae:	e013      	b.n	129d8 <eeprom_emulator_commit_page_buffer+0x48>
	}

	uint8_t cached_logical_page = _eeprom_instance.cache.header.logical_page;
   129b0:	1dbb      	adds	r3, r7, #6
   129b2:	4a0b      	ldr	r2, [pc, #44]	; (129e0 <eeprom_emulator_commit_page_buffer+0x50>)
   129b4:	2188      	movs	r1, #136	; 0x88
   129b6:	5c52      	ldrb	r2, [r2, r1]
   129b8:	701a      	strb	r2, [r3, #0]

	/* Perform the page write to commit the NVM page buffer to FLASH */
	_eeprom_emulator_nvm_commit_cache(
			_eeprom_instance.page_map[cached_logical_page]);
   129ba:	1dbb      	adds	r3, r7, #6
   129bc:	781b      	ldrb	r3, [r3, #0]
   129be:	4a08      	ldr	r2, [pc, #32]	; (129e0 <eeprom_emulator_commit_page_buffer+0x50>)
   129c0:	18d3      	adds	r3, r2, r3
   129c2:	7adb      	ldrb	r3, [r3, #11]
	_eeprom_emulator_nvm_commit_cache(
   129c4:	b29b      	uxth	r3, r3
   129c6:	0018      	movs	r0, r3
   129c8:	4b06      	ldr	r3, [pc, #24]	; (129e4 <eeprom_emulator_commit_page_buffer+0x54>)
   129ca:	4798      	blx	r3

	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active = false;
   129cc:	4b04      	ldr	r3, [pc, #16]	; (129e0 <eeprom_emulator_commit_page_buffer+0x50>)
   129ce:	22c8      	movs	r2, #200	; 0xc8
   129d0:	2100      	movs	r1, #0
   129d2:	5499      	strb	r1, [r3, r2]

	return error_code;
   129d4:	1dfb      	adds	r3, r7, #7
   129d6:	781b      	ldrb	r3, [r3, #0]
}
   129d8:	0018      	movs	r0, r3
   129da:	46bd      	mov	sp, r7
   129dc:	b002      	add	sp, #8
   129de:	bd80      	pop	{r7, pc}
   129e0:	2000040c 	.word	0x2000040c
   129e4:	00011e9d 	.word	0x00011e9d

000129e8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   129e8:	b580      	push	{r7, lr}
   129ea:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
   129ec:	46c0      	nop			; (mov r8, r8)
   129ee:	46bd      	mov	sp, r7
   129f0:	bd80      	pop	{r7, pc}
	...

000129f4 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   129f4:	b580      	push	{r7, lr}
   129f6:	b082      	sub	sp, #8
   129f8:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   129fa:	4b10      	ldr	r3, [pc, #64]	; (12a3c <cpu_irq_enter_critical+0x48>)
   129fc:	681b      	ldr	r3, [r3, #0]
   129fe:	2b00      	cmp	r3, #0
   12a00:	d112      	bne.n	12a28 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   12a02:	f3ef 8310 	mrs	r3, PRIMASK
   12a06:	607b      	str	r3, [r7, #4]
  return(result);
   12a08:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   12a0a:	2b00      	cmp	r3, #0
   12a0c:	d109      	bne.n	12a22 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   12a0e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   12a10:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   12a14:	4b0a      	ldr	r3, [pc, #40]	; (12a40 <cpu_irq_enter_critical+0x4c>)
   12a16:	2200      	movs	r2, #0
   12a18:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   12a1a:	4b0a      	ldr	r3, [pc, #40]	; (12a44 <cpu_irq_enter_critical+0x50>)
   12a1c:	2201      	movs	r2, #1
   12a1e:	701a      	strb	r2, [r3, #0]
   12a20:	e002      	b.n	12a28 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   12a22:	4b08      	ldr	r3, [pc, #32]	; (12a44 <cpu_irq_enter_critical+0x50>)
   12a24:	2200      	movs	r2, #0
   12a26:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   12a28:	4b04      	ldr	r3, [pc, #16]	; (12a3c <cpu_irq_enter_critical+0x48>)
   12a2a:	681b      	ldr	r3, [r3, #0]
   12a2c:	1c5a      	adds	r2, r3, #1
   12a2e:	4b03      	ldr	r3, [pc, #12]	; (12a3c <cpu_irq_enter_critical+0x48>)
   12a30:	601a      	str	r2, [r3, #0]
}
   12a32:	46c0      	nop			; (mov r8, r8)
   12a34:	46bd      	mov	sp, r7
   12a36:	b002      	add	sp, #8
   12a38:	bd80      	pop	{r7, pc}
   12a3a:	46c0      	nop			; (mov r8, r8)
   12a3c:	200004d8 	.word	0x200004d8
   12a40:	20000028 	.word	0x20000028
   12a44:	200004dc 	.word	0x200004dc

00012a48 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   12a48:	b580      	push	{r7, lr}
   12a4a:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   12a4c:	4b0b      	ldr	r3, [pc, #44]	; (12a7c <cpu_irq_leave_critical+0x34>)
   12a4e:	681b      	ldr	r3, [r3, #0]
   12a50:	1e5a      	subs	r2, r3, #1
   12a52:	4b0a      	ldr	r3, [pc, #40]	; (12a7c <cpu_irq_leave_critical+0x34>)
   12a54:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   12a56:	4b09      	ldr	r3, [pc, #36]	; (12a7c <cpu_irq_leave_critical+0x34>)
   12a58:	681b      	ldr	r3, [r3, #0]
   12a5a:	2b00      	cmp	r3, #0
   12a5c:	d10a      	bne.n	12a74 <cpu_irq_leave_critical+0x2c>
   12a5e:	4b08      	ldr	r3, [pc, #32]	; (12a80 <cpu_irq_leave_critical+0x38>)
   12a60:	781b      	ldrb	r3, [r3, #0]
   12a62:	b2db      	uxtb	r3, r3
   12a64:	2b00      	cmp	r3, #0
   12a66:	d005      	beq.n	12a74 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   12a68:	4b06      	ldr	r3, [pc, #24]	; (12a84 <cpu_irq_leave_critical+0x3c>)
   12a6a:	2201      	movs	r2, #1
   12a6c:	701a      	strb	r2, [r3, #0]
   12a6e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   12a72:	b662      	cpsie	i
	}
}
   12a74:	46c0      	nop			; (mov r8, r8)
   12a76:	46bd      	mov	sp, r7
   12a78:	bd80      	pop	{r7, pc}
   12a7a:	46c0      	nop			; (mov r8, r8)
   12a7c:	200004d8 	.word	0x200004d8
   12a80:	200004dc 	.word	0x200004dc
   12a84:	20000028 	.word	0x20000028

00012a88 <system_gclk_gen_get_config_defaults>:
{
   12a88:	b580      	push	{r7, lr}
   12a8a:	b082      	sub	sp, #8
   12a8c:	af00      	add	r7, sp, #0
   12a8e:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   12a90:	687b      	ldr	r3, [r7, #4]
   12a92:	2201      	movs	r2, #1
   12a94:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   12a96:	687b      	ldr	r3, [r7, #4]
   12a98:	2200      	movs	r2, #0
   12a9a:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   12a9c:	687b      	ldr	r3, [r7, #4]
   12a9e:	2206      	movs	r2, #6
   12aa0:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   12aa2:	687b      	ldr	r3, [r7, #4]
   12aa4:	2200      	movs	r2, #0
   12aa6:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   12aa8:	687b      	ldr	r3, [r7, #4]
   12aaa:	2200      	movs	r2, #0
   12aac:	725a      	strb	r2, [r3, #9]
}
   12aae:	46c0      	nop			; (mov r8, r8)
   12ab0:	46bd      	mov	sp, r7
   12ab2:	b002      	add	sp, #8
   12ab4:	bd80      	pop	{r7, pc}

00012ab6 <system_gclk_chan_get_config_defaults>:
{
   12ab6:	b580      	push	{r7, lr}
   12ab8:	b082      	sub	sp, #8
   12aba:	af00      	add	r7, sp, #0
   12abc:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   12abe:	687b      	ldr	r3, [r7, #4]
   12ac0:	2200      	movs	r2, #0
   12ac2:	701a      	strb	r2, [r3, #0]
}
   12ac4:	46c0      	nop			; (mov r8, r8)
   12ac6:	46bd      	mov	sp, r7
   12ac8:	b002      	add	sp, #8
   12aca:	bd80      	pop	{r7, pc}

00012acc <system_clock_source_xosc32k_get_config_defaults>:
{
   12acc:	b580      	push	{r7, lr}
   12ace:	b082      	sub	sp, #8
   12ad0:	af00      	add	r7, sp, #0
   12ad2:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
   12ad4:	687b      	ldr	r3, [r7, #4]
   12ad6:	2200      	movs	r2, #0
   12ad8:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
   12ada:	687b      	ldr	r3, [r7, #4]
   12adc:	2204      	movs	r2, #4
   12ade:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
   12ae0:	687b      	ldr	r3, [r7, #4]
   12ae2:	2200      	movs	r2, #0
   12ae4:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
   12ae6:	687b      	ldr	r3, [r7, #4]
   12ae8:	2280      	movs	r2, #128	; 0x80
   12aea:	0212      	lsls	r2, r2, #8
   12aec:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
   12aee:	687b      	ldr	r3, [r7, #4]
   12af0:	2200      	movs	r2, #0
   12af2:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
   12af4:	687b      	ldr	r3, [r7, #4]
   12af6:	2201      	movs	r2, #1
   12af8:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
   12afa:	687b      	ldr	r3, [r7, #4]
   12afc:	2200      	movs	r2, #0
   12afe:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
   12b00:	687b      	ldr	r3, [r7, #4]
   12b02:	2201      	movs	r2, #1
   12b04:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
   12b06:	687b      	ldr	r3, [r7, #4]
   12b08:	2200      	movs	r2, #0
   12b0a:	739a      	strb	r2, [r3, #14]
}
   12b0c:	46c0      	nop			; (mov r8, r8)
   12b0e:	46bd      	mov	sp, r7
   12b10:	b002      	add	sp, #8
   12b12:	bd80      	pop	{r7, pc}

00012b14 <system_clock_source_osc8m_get_config_defaults>:
{
   12b14:	b580      	push	{r7, lr}
   12b16:	b082      	sub	sp, #8
   12b18:	af00      	add	r7, sp, #0
   12b1a:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   12b1c:	687b      	ldr	r3, [r7, #4]
   12b1e:	2203      	movs	r2, #3
   12b20:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   12b22:	687b      	ldr	r3, [r7, #4]
   12b24:	2200      	movs	r2, #0
   12b26:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   12b28:	687b      	ldr	r3, [r7, #4]
   12b2a:	2201      	movs	r2, #1
   12b2c:	709a      	strb	r2, [r3, #2]
}
   12b2e:	46c0      	nop			; (mov r8, r8)
   12b30:	46bd      	mov	sp, r7
   12b32:	b002      	add	sp, #8
   12b34:	bd80      	pop	{r7, pc}

00012b36 <system_clock_source_dfll_get_config_defaults>:
{
   12b36:	b580      	push	{r7, lr}
   12b38:	b082      	sub	sp, #8
   12b3a:	af00      	add	r7, sp, #0
   12b3c:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
   12b3e:	687b      	ldr	r3, [r7, #4]
   12b40:	2200      	movs	r2, #0
   12b42:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   12b44:	687b      	ldr	r3, [r7, #4]
   12b46:	2200      	movs	r2, #0
   12b48:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   12b4a:	687b      	ldr	r3, [r7, #4]
   12b4c:	2200      	movs	r2, #0
   12b4e:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   12b50:	687b      	ldr	r3, [r7, #4]
   12b52:	2200      	movs	r2, #0
   12b54:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   12b56:	687b      	ldr	r3, [r7, #4]
   12b58:	2200      	movs	r2, #0
   12b5a:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
   12b5c:	687b      	ldr	r3, [r7, #4]
   12b5e:	2201      	movs	r2, #1
   12b60:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
   12b62:	687b      	ldr	r3, [r7, #4]
   12b64:	2207      	movs	r2, #7
   12b66:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
   12b68:	687b      	ldr	r3, [r7, #4]
   12b6a:	223f      	movs	r2, #63	; 0x3f
   12b6c:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
   12b6e:	687b      	ldr	r3, [r7, #4]
   12b70:	2201      	movs	r2, #1
   12b72:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
   12b74:	687b      	ldr	r3, [r7, #4]
   12b76:	2201      	movs	r2, #1
   12b78:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
   12b7a:	687b      	ldr	r3, [r7, #4]
   12b7c:	2206      	movs	r2, #6
   12b7e:	821a      	strh	r2, [r3, #16]
}
   12b80:	46c0      	nop			; (mov r8, r8)
   12b82:	46bd      	mov	sp, r7
   12b84:	b002      	add	sp, #8
   12b86:	bd80      	pop	{r7, pc}

00012b88 <system_cpu_clock_set_divider>:
{
   12b88:	b580      	push	{r7, lr}
   12b8a:	b082      	sub	sp, #8
   12b8c:	af00      	add	r7, sp, #0
   12b8e:	0002      	movs	r2, r0
   12b90:	1dfb      	adds	r3, r7, #7
   12b92:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   12b94:	4a03      	ldr	r2, [pc, #12]	; (12ba4 <system_cpu_clock_set_divider+0x1c>)
   12b96:	1dfb      	adds	r3, r7, #7
   12b98:	781b      	ldrb	r3, [r3, #0]
   12b9a:	7213      	strb	r3, [r2, #8]
}
   12b9c:	46c0      	nop			; (mov r8, r8)
   12b9e:	46bd      	mov	sp, r7
   12ba0:	b002      	add	sp, #8
   12ba2:	bd80      	pop	{r7, pc}
   12ba4:	40000400 	.word	0x40000400

00012ba8 <system_apb_clock_set_divider>:
{
   12ba8:	b580      	push	{r7, lr}
   12baa:	b082      	sub	sp, #8
   12bac:	af00      	add	r7, sp, #0
   12bae:	0002      	movs	r2, r0
   12bb0:	1dfb      	adds	r3, r7, #7
   12bb2:	701a      	strb	r2, [r3, #0]
   12bb4:	1dbb      	adds	r3, r7, #6
   12bb6:	1c0a      	adds	r2, r1, #0
   12bb8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   12bba:	1dfb      	adds	r3, r7, #7
   12bbc:	781b      	ldrb	r3, [r3, #0]
   12bbe:	2b01      	cmp	r3, #1
   12bc0:	d008      	beq.n	12bd4 <system_apb_clock_set_divider+0x2c>
   12bc2:	2b02      	cmp	r3, #2
   12bc4:	d00b      	beq.n	12bde <system_apb_clock_set_divider+0x36>
   12bc6:	2b00      	cmp	r3, #0
   12bc8:	d10e      	bne.n	12be8 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   12bca:	4a0b      	ldr	r2, [pc, #44]	; (12bf8 <system_apb_clock_set_divider+0x50>)
   12bcc:	1dbb      	adds	r3, r7, #6
   12bce:	781b      	ldrb	r3, [r3, #0]
   12bd0:	7253      	strb	r3, [r2, #9]
			break;
   12bd2:	e00b      	b.n	12bec <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   12bd4:	4a08      	ldr	r2, [pc, #32]	; (12bf8 <system_apb_clock_set_divider+0x50>)
   12bd6:	1dbb      	adds	r3, r7, #6
   12bd8:	781b      	ldrb	r3, [r3, #0]
   12bda:	7293      	strb	r3, [r2, #10]
			break;
   12bdc:	e006      	b.n	12bec <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   12bde:	4a06      	ldr	r2, [pc, #24]	; (12bf8 <system_apb_clock_set_divider+0x50>)
   12be0:	1dbb      	adds	r3, r7, #6
   12be2:	781b      	ldrb	r3, [r3, #0]
   12be4:	72d3      	strb	r3, [r2, #11]
			break;
   12be6:	e001      	b.n	12bec <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   12be8:	2317      	movs	r3, #23
   12bea:	e000      	b.n	12bee <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   12bec:	2300      	movs	r3, #0
}
   12bee:	0018      	movs	r0, r3
   12bf0:	46bd      	mov	sp, r7
   12bf2:	b002      	add	sp, #8
   12bf4:	bd80      	pop	{r7, pc}
   12bf6:	46c0      	nop			; (mov r8, r8)
   12bf8:	40000400 	.word	0x40000400

00012bfc <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   12bfc:	b580      	push	{r7, lr}
   12bfe:	b082      	sub	sp, #8
   12c00:	af00      	add	r7, sp, #0
   12c02:	0002      	movs	r2, r0
   12c04:	1dfb      	adds	r3, r7, #7
   12c06:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   12c08:	4a08      	ldr	r2, [pc, #32]	; (12c2c <system_flash_set_waitstates+0x30>)
   12c0a:	1dfb      	adds	r3, r7, #7
   12c0c:	781b      	ldrb	r3, [r3, #0]
   12c0e:	210f      	movs	r1, #15
   12c10:	400b      	ands	r3, r1
   12c12:	b2d9      	uxtb	r1, r3
   12c14:	6853      	ldr	r3, [r2, #4]
   12c16:	200f      	movs	r0, #15
   12c18:	4001      	ands	r1, r0
   12c1a:	0049      	lsls	r1, r1, #1
   12c1c:	201e      	movs	r0, #30
   12c1e:	4383      	bics	r3, r0
   12c20:	430b      	orrs	r3, r1
   12c22:	6053      	str	r3, [r2, #4]
}
   12c24:	46c0      	nop			; (mov r8, r8)
   12c26:	46bd      	mov	sp, r7
   12c28:	b002      	add	sp, #8
   12c2a:	bd80      	pop	{r7, pc}
   12c2c:	41004000 	.word	0x41004000

00012c30 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   12c30:	b580      	push	{r7, lr}
   12c32:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   12c34:	46c0      	nop			; (mov r8, r8)
   12c36:	4b04      	ldr	r3, [pc, #16]	; (12c48 <_system_dfll_wait_for_sync+0x18>)
   12c38:	68db      	ldr	r3, [r3, #12]
   12c3a:	2210      	movs	r2, #16
   12c3c:	4013      	ands	r3, r2
   12c3e:	d0fa      	beq.n	12c36 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   12c40:	46c0      	nop			; (mov r8, r8)
   12c42:	46bd      	mov	sp, r7
   12c44:	bd80      	pop	{r7, pc}
   12c46:	46c0      	nop			; (mov r8, r8)
   12c48:	40000800 	.word	0x40000800

00012c4c <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   12c4c:	b580      	push	{r7, lr}
   12c4e:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   12c50:	4b0c      	ldr	r3, [pc, #48]	; (12c84 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   12c52:	2202      	movs	r2, #2
   12c54:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   12c56:	4b0c      	ldr	r3, [pc, #48]	; (12c88 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   12c58:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   12c5a:	4a0a      	ldr	r2, [pc, #40]	; (12c84 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   12c5c:	4b0b      	ldr	r3, [pc, #44]	; (12c8c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   12c5e:	689b      	ldr	r3, [r3, #8]
   12c60:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   12c62:	4a08      	ldr	r2, [pc, #32]	; (12c84 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   12c64:	4b09      	ldr	r3, [pc, #36]	; (12c8c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   12c66:	685b      	ldr	r3, [r3, #4]
   12c68:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   12c6a:	4b06      	ldr	r3, [pc, #24]	; (12c84 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   12c6c:	2200      	movs	r2, #0
   12c6e:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   12c70:	4b05      	ldr	r3, [pc, #20]	; (12c88 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   12c72:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   12c74:	4a03      	ldr	r2, [pc, #12]	; (12c84 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   12c76:	4b05      	ldr	r3, [pc, #20]	; (12c8c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   12c78:	681b      	ldr	r3, [r3, #0]
   12c7a:	b29b      	uxth	r3, r3
   12c7c:	8493      	strh	r3, [r2, #36]	; 0x24
}
   12c7e:	46c0      	nop			; (mov r8, r8)
   12c80:	46bd      	mov	sp, r7
   12c82:	bd80      	pop	{r7, pc}
   12c84:	40000800 	.word	0x40000800
   12c88:	00012c31 	.word	0x00012c31
   12c8c:	200004e0 	.word	0x200004e0

00012c90 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   12c90:	b580      	push	{r7, lr}
   12c92:	b082      	sub	sp, #8
   12c94:	af00      	add	r7, sp, #0
   12c96:	0002      	movs	r2, r0
   12c98:	1dfb      	adds	r3, r7, #7
   12c9a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   12c9c:	1dfb      	adds	r3, r7, #7
   12c9e:	781b      	ldrb	r3, [r3, #0]
   12ca0:	2b08      	cmp	r3, #8
   12ca2:	d841      	bhi.n	12d28 <system_clock_source_get_hz+0x98>
   12ca4:	009a      	lsls	r2, r3, #2
   12ca6:	4b23      	ldr	r3, [pc, #140]	; (12d34 <system_clock_source_get_hz+0xa4>)
   12ca8:	18d3      	adds	r3, r2, r3
   12caa:	681b      	ldr	r3, [r3, #0]
   12cac:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   12cae:	4b22      	ldr	r3, [pc, #136]	; (12d38 <system_clock_source_get_hz+0xa8>)
   12cb0:	691b      	ldr	r3, [r3, #16]
   12cb2:	e03a      	b.n	12d2a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   12cb4:	4b21      	ldr	r3, [pc, #132]	; (12d3c <system_clock_source_get_hz+0xac>)
   12cb6:	6a1b      	ldr	r3, [r3, #32]
   12cb8:	059b      	lsls	r3, r3, #22
   12cba:	0f9b      	lsrs	r3, r3, #30
   12cbc:	b2db      	uxtb	r3, r3
   12cbe:	001a      	movs	r2, r3
   12cc0:	4b1f      	ldr	r3, [pc, #124]	; (12d40 <system_clock_source_get_hz+0xb0>)
   12cc2:	40d3      	lsrs	r3, r2
   12cc4:	e031      	b.n	12d2a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   12cc6:	2380      	movs	r3, #128	; 0x80
   12cc8:	021b      	lsls	r3, r3, #8
   12cca:	e02e      	b.n	12d2a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   12ccc:	2380      	movs	r3, #128	; 0x80
   12cce:	021b      	lsls	r3, r3, #8
   12cd0:	e02b      	b.n	12d2a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   12cd2:	4b19      	ldr	r3, [pc, #100]	; (12d38 <system_clock_source_get_hz+0xa8>)
   12cd4:	695b      	ldr	r3, [r3, #20]
   12cd6:	e028      	b.n	12d2a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   12cd8:	4b17      	ldr	r3, [pc, #92]	; (12d38 <system_clock_source_get_hz+0xa8>)
   12cda:	681b      	ldr	r3, [r3, #0]
   12cdc:	2202      	movs	r2, #2
   12cde:	4013      	ands	r3, r2
   12ce0:	d101      	bne.n	12ce6 <system_clock_source_get_hz+0x56>
			return 0;
   12ce2:	2300      	movs	r3, #0
   12ce4:	e021      	b.n	12d2a <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   12ce6:	4b17      	ldr	r3, [pc, #92]	; (12d44 <system_clock_source_get_hz+0xb4>)
   12ce8:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   12cea:	4b13      	ldr	r3, [pc, #76]	; (12d38 <system_clock_source_get_hz+0xa8>)
   12cec:	681b      	ldr	r3, [r3, #0]
   12cee:	2224      	movs	r2, #36	; 0x24
   12cf0:	4013      	ands	r3, r2
   12cf2:	2b04      	cmp	r3, #4
   12cf4:	d109      	bne.n	12d0a <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   12cf6:	2000      	movs	r0, #0
   12cf8:	4b13      	ldr	r3, [pc, #76]	; (12d48 <system_clock_source_get_hz+0xb8>)
   12cfa:	4798      	blx	r3
   12cfc:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   12cfe:	4b0e      	ldr	r3, [pc, #56]	; (12d38 <system_clock_source_get_hz+0xa8>)
   12d00:	689b      	ldr	r3, [r3, #8]
   12d02:	041b      	lsls	r3, r3, #16
   12d04:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   12d06:	4353      	muls	r3, r2
   12d08:	e00f      	b.n	12d2a <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   12d0a:	4b10      	ldr	r3, [pc, #64]	; (12d4c <system_clock_source_get_hz+0xbc>)
   12d0c:	e00d      	b.n	12d2a <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   12d0e:	4a0b      	ldr	r2, [pc, #44]	; (12d3c <system_clock_source_get_hz+0xac>)
   12d10:	2350      	movs	r3, #80	; 0x50
   12d12:	5cd3      	ldrb	r3, [r2, r3]
   12d14:	b2db      	uxtb	r3, r3
   12d16:	001a      	movs	r2, r3
   12d18:	2304      	movs	r3, #4
   12d1a:	4013      	ands	r3, r2
   12d1c:	d101      	bne.n	12d22 <system_clock_source_get_hz+0x92>
			return 0;
   12d1e:	2300      	movs	r3, #0
   12d20:	e003      	b.n	12d2a <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   12d22:	4b05      	ldr	r3, [pc, #20]	; (12d38 <system_clock_source_get_hz+0xa8>)
   12d24:	68db      	ldr	r3, [r3, #12]
   12d26:	e000      	b.n	12d2a <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   12d28:	2300      	movs	r3, #0
	}
}
   12d2a:	0018      	movs	r0, r3
   12d2c:	46bd      	mov	sp, r7
   12d2e:	b002      	add	sp, #8
   12d30:	bd80      	pop	{r7, pc}
   12d32:	46c0      	nop			; (mov r8, r8)
   12d34:	00019874 	.word	0x00019874
   12d38:	200004e0 	.word	0x200004e0
   12d3c:	40000800 	.word	0x40000800
   12d40:	007a1200 	.word	0x007a1200
   12d44:	00012c31 	.word	0x00012c31
   12d48:	000138d1 	.word	0x000138d1
   12d4c:	02dc6c00 	.word	0x02dc6c00

00012d50 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   12d50:	b580      	push	{r7, lr}
   12d52:	b084      	sub	sp, #16
   12d54:	af00      	add	r7, sp, #0
   12d56:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   12d58:	4b1a      	ldr	r3, [pc, #104]	; (12dc4 <system_clock_source_osc8m_set_config+0x74>)
   12d5a:	6a1b      	ldr	r3, [r3, #32]
   12d5c:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   12d5e:	687b      	ldr	r3, [r7, #4]
   12d60:	781b      	ldrb	r3, [r3, #0]
   12d62:	1c1a      	adds	r2, r3, #0
   12d64:	2303      	movs	r3, #3
   12d66:	4013      	ands	r3, r2
   12d68:	b2da      	uxtb	r2, r3
   12d6a:	230d      	movs	r3, #13
   12d6c:	18fb      	adds	r3, r7, r3
   12d6e:	2103      	movs	r1, #3
   12d70:	400a      	ands	r2, r1
   12d72:	0010      	movs	r0, r2
   12d74:	781a      	ldrb	r2, [r3, #0]
   12d76:	2103      	movs	r1, #3
   12d78:	438a      	bics	r2, r1
   12d7a:	1c11      	adds	r1, r2, #0
   12d7c:	1c02      	adds	r2, r0, #0
   12d7e:	430a      	orrs	r2, r1
   12d80:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   12d82:	687b      	ldr	r3, [r7, #4]
   12d84:	789a      	ldrb	r2, [r3, #2]
   12d86:	230c      	movs	r3, #12
   12d88:	18fb      	adds	r3, r7, r3
   12d8a:	01d0      	lsls	r0, r2, #7
   12d8c:	781a      	ldrb	r2, [r3, #0]
   12d8e:	217f      	movs	r1, #127	; 0x7f
   12d90:	400a      	ands	r2, r1
   12d92:	1c11      	adds	r1, r2, #0
   12d94:	1c02      	adds	r2, r0, #0
   12d96:	430a      	orrs	r2, r1
   12d98:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   12d9a:	687b      	ldr	r3, [r7, #4]
   12d9c:	785a      	ldrb	r2, [r3, #1]
   12d9e:	230c      	movs	r3, #12
   12da0:	18fb      	adds	r3, r7, r3
   12da2:	2101      	movs	r1, #1
   12da4:	400a      	ands	r2, r1
   12da6:	0190      	lsls	r0, r2, #6
   12da8:	781a      	ldrb	r2, [r3, #0]
   12daa:	2140      	movs	r1, #64	; 0x40
   12dac:	438a      	bics	r2, r1
   12dae:	1c11      	adds	r1, r2, #0
   12db0:	1c02      	adds	r2, r0, #0
   12db2:	430a      	orrs	r2, r1
   12db4:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   12db6:	4b03      	ldr	r3, [pc, #12]	; (12dc4 <system_clock_source_osc8m_set_config+0x74>)
   12db8:	68fa      	ldr	r2, [r7, #12]
   12dba:	621a      	str	r2, [r3, #32]
}
   12dbc:	46c0      	nop			; (mov r8, r8)
   12dbe:	46bd      	mov	sp, r7
   12dc0:	b004      	add	sp, #16
   12dc2:	bd80      	pop	{r7, pc}
   12dc4:	40000800 	.word	0x40000800

00012dc8 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
   12dc8:	b580      	push	{r7, lr}
   12dca:	b084      	sub	sp, #16
   12dcc:	af00      	add	r7, sp, #0
   12dce:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
   12dd0:	4a43      	ldr	r2, [pc, #268]	; (12ee0 <system_clock_source_xosc32k_set_config+0x118>)
   12dd2:	230c      	movs	r3, #12
   12dd4:	18fb      	adds	r3, r7, r3
   12dd6:	8a92      	ldrh	r2, [r2, #20]
   12dd8:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
   12dda:	687b      	ldr	r3, [r7, #4]
   12ddc:	785b      	ldrb	r3, [r3, #1]
   12dde:	1c1a      	adds	r2, r3, #0
   12de0:	2307      	movs	r3, #7
   12de2:	4013      	ands	r3, r2
   12de4:	b2da      	uxtb	r2, r3
   12de6:	230c      	movs	r3, #12
   12de8:	18fb      	adds	r3, r7, r3
   12dea:	2107      	movs	r1, #7
   12dec:	400a      	ands	r2, r1
   12dee:	0010      	movs	r0, r2
   12df0:	785a      	ldrb	r2, [r3, #1]
   12df2:	2107      	movs	r1, #7
   12df4:	438a      	bics	r2, r1
   12df6:	1c11      	adds	r1, r2, #0
   12df8:	1c02      	adds	r2, r0, #0
   12dfa:	430a      	orrs	r2, r1
   12dfc:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
   12dfe:	687b      	ldr	r3, [r7, #4]
   12e00:	781b      	ldrb	r3, [r3, #0]
   12e02:	2b00      	cmp	r3, #0
   12e04:	d106      	bne.n	12e14 <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
   12e06:	230c      	movs	r3, #12
   12e08:	18fb      	adds	r3, r7, r3
   12e0a:	781a      	ldrb	r2, [r3, #0]
   12e0c:	2104      	movs	r1, #4
   12e0e:	430a      	orrs	r2, r1
   12e10:	701a      	strb	r2, [r3, #0]
   12e12:	e005      	b.n	12e20 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
   12e14:	230c      	movs	r3, #12
   12e16:	18fb      	adds	r3, r7, r3
   12e18:	781a      	ldrb	r2, [r3, #0]
   12e1a:	2104      	movs	r1, #4
   12e1c:	438a      	bics	r2, r1
   12e1e:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
   12e20:	687b      	ldr	r3, [r7, #4]
   12e22:	789a      	ldrb	r2, [r3, #2]
   12e24:	230c      	movs	r3, #12
   12e26:	18fb      	adds	r3, r7, r3
   12e28:	2101      	movs	r1, #1
   12e2a:	400a      	ands	r2, r1
   12e2c:	0150      	lsls	r0, r2, #5
   12e2e:	781a      	ldrb	r2, [r3, #0]
   12e30:	2120      	movs	r1, #32
   12e32:	438a      	bics	r2, r1
   12e34:	1c11      	adds	r1, r2, #0
   12e36:	1c02      	adds	r2, r0, #0
   12e38:	430a      	orrs	r2, r1
   12e3a:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
   12e3c:	687b      	ldr	r3, [r7, #4]
   12e3e:	78da      	ldrb	r2, [r3, #3]
   12e40:	230c      	movs	r3, #12
   12e42:	18fb      	adds	r3, r7, r3
   12e44:	2101      	movs	r1, #1
   12e46:	400a      	ands	r2, r1
   12e48:	0110      	lsls	r0, r2, #4
   12e4a:	781a      	ldrb	r2, [r3, #0]
   12e4c:	2110      	movs	r1, #16
   12e4e:	438a      	bics	r2, r1
   12e50:	1c11      	adds	r1, r2, #0
   12e52:	1c02      	adds	r2, r0, #0
   12e54:	430a      	orrs	r2, r1
   12e56:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
   12e58:	687b      	ldr	r3, [r7, #4]
   12e5a:	791a      	ldrb	r2, [r3, #4]
   12e5c:	230c      	movs	r3, #12
   12e5e:	18fb      	adds	r3, r7, r3
   12e60:	2101      	movs	r1, #1
   12e62:	400a      	ands	r2, r1
   12e64:	00d0      	lsls	r0, r2, #3
   12e66:	781a      	ldrb	r2, [r3, #0]
   12e68:	2108      	movs	r1, #8
   12e6a:	438a      	bics	r2, r1
   12e6c:	1c11      	adds	r1, r2, #0
   12e6e:	1c02      	adds	r2, r0, #0
   12e70:	430a      	orrs	r2, r1
   12e72:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
   12e74:	687b      	ldr	r3, [r7, #4]
   12e76:	7b5a      	ldrb	r2, [r3, #13]
   12e78:	230c      	movs	r3, #12
   12e7a:	18fb      	adds	r3, r7, r3
   12e7c:	01d0      	lsls	r0, r2, #7
   12e7e:	781a      	ldrb	r2, [r3, #0]
   12e80:	217f      	movs	r1, #127	; 0x7f
   12e82:	400a      	ands	r2, r1
   12e84:	1c11      	adds	r1, r2, #0
   12e86:	1c02      	adds	r2, r0, #0
   12e88:	430a      	orrs	r2, r1
   12e8a:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   12e8c:	687b      	ldr	r3, [r7, #4]
   12e8e:	7b1a      	ldrb	r2, [r3, #12]
   12e90:	230c      	movs	r3, #12
   12e92:	18fb      	adds	r3, r7, r3
   12e94:	2101      	movs	r1, #1
   12e96:	400a      	ands	r2, r1
   12e98:	0190      	lsls	r0, r2, #6
   12e9a:	781a      	ldrb	r2, [r3, #0]
   12e9c:	2140      	movs	r1, #64	; 0x40
   12e9e:	438a      	bics	r2, r1
   12ea0:	1c11      	adds	r1, r2, #0
   12ea2:	1c02      	adds	r2, r0, #0
   12ea4:	430a      	orrs	r2, r1
   12ea6:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
   12ea8:	687b      	ldr	r3, [r7, #4]
   12eaa:	7b9a      	ldrb	r2, [r3, #14]
   12eac:	230c      	movs	r3, #12
   12eae:	18fb      	adds	r3, r7, r3
   12eb0:	2101      	movs	r1, #1
   12eb2:	400a      	ands	r2, r1
   12eb4:	0110      	lsls	r0, r2, #4
   12eb6:	785a      	ldrb	r2, [r3, #1]
   12eb8:	2110      	movs	r1, #16
   12eba:	438a      	bics	r2, r1
   12ebc:	1c11      	adds	r1, r2, #0
   12ebe:	1c02      	adds	r2, r0, #0
   12ec0:	430a      	orrs	r2, r1
   12ec2:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
   12ec4:	687b      	ldr	r3, [r7, #4]
   12ec6:	689a      	ldr	r2, [r3, #8]
   12ec8:	4b06      	ldr	r3, [pc, #24]	; (12ee4 <system_clock_source_xosc32k_set_config+0x11c>)
   12eca:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
   12ecc:	4a04      	ldr	r2, [pc, #16]	; (12ee0 <system_clock_source_xosc32k_set_config+0x118>)
   12ece:	230c      	movs	r3, #12
   12ed0:	18fb      	adds	r3, r7, r3
   12ed2:	881b      	ldrh	r3, [r3, #0]
   12ed4:	8293      	strh	r3, [r2, #20]
}
   12ed6:	46c0      	nop			; (mov r8, r8)
   12ed8:	46bd      	mov	sp, r7
   12eda:	b004      	add	sp, #16
   12edc:	bd80      	pop	{r7, pc}
   12ede:	46c0      	nop			; (mov r8, r8)
   12ee0:	40000800 	.word	0x40000800
   12ee4:	200004e0 	.word	0x200004e0

00012ee8 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
   12ee8:	b580      	push	{r7, lr}
   12eea:	b082      	sub	sp, #8
   12eec:	af00      	add	r7, sp, #0
   12eee:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   12ef0:	687b      	ldr	r3, [r7, #4]
   12ef2:	7a1b      	ldrb	r3, [r3, #8]
   12ef4:	029b      	lsls	r3, r3, #10
   12ef6:	041b      	lsls	r3, r3, #16
   12ef8:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
   12efa:	687b      	ldr	r3, [r7, #4]
   12efc:	895b      	ldrh	r3, [r3, #10]
   12efe:	059b      	lsls	r3, r3, #22
   12f00:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   12f02:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
   12f04:	4b2a      	ldr	r3, [pc, #168]	; (12fb0 <system_clock_source_dfll_set_config+0xc8>)
   12f06:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
   12f08:	687b      	ldr	r3, [r7, #4]
   12f0a:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
   12f0c:	687b      	ldr	r3, [r7, #4]
   12f0e:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
   12f10:	4313      	orrs	r3, r2
   12f12:	b2db      	uxtb	r3, r3
   12f14:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
   12f16:	687b      	ldr	r3, [r7, #4]
   12f18:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
   12f1a:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
   12f1c:	687a      	ldr	r2, [r7, #4]
   12f1e:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
   12f20:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
   12f22:	687b      	ldr	r3, [r7, #4]
   12f24:	785b      	ldrb	r3, [r3, #1]
   12f26:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
   12f28:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
   12f2a:	4b21      	ldr	r3, [pc, #132]	; (12fb0 <system_clock_source_dfll_set_config+0xc8>)
   12f2c:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
   12f2e:	687b      	ldr	r3, [r7, #4]
   12f30:	781b      	ldrb	r3, [r3, #0]
   12f32:	2b04      	cmp	r3, #4
   12f34:	d116      	bne.n	12f64 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   12f36:	687b      	ldr	r3, [r7, #4]
   12f38:	7b1b      	ldrb	r3, [r3, #12]
   12f3a:	069b      	lsls	r3, r3, #26
   12f3c:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   12f3e:	687b      	ldr	r3, [r7, #4]
   12f40:	89db      	ldrh	r3, [r3, #14]
   12f42:	041b      	lsls	r3, r3, #16
   12f44:	0019      	movs	r1, r3
   12f46:	4b1b      	ldr	r3, [pc, #108]	; (12fb4 <system_clock_source_dfll_set_config+0xcc>)
   12f48:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   12f4a:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   12f4c:	687a      	ldr	r2, [r7, #4]
   12f4e:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   12f50:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
   12f52:	4b17      	ldr	r3, [pc, #92]	; (12fb0 <system_clock_source_dfll_set_config+0xc8>)
   12f54:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
   12f56:	4b16      	ldr	r3, [pc, #88]	; (12fb0 <system_clock_source_dfll_set_config+0xc8>)
   12f58:	681b      	ldr	r3, [r3, #0]
   12f5a:	687a      	ldr	r2, [r7, #4]
   12f5c:	7812      	ldrb	r2, [r2, #0]
   12f5e:	431a      	orrs	r2, r3
   12f60:	4b13      	ldr	r3, [pc, #76]	; (12fb0 <system_clock_source_dfll_set_config+0xc8>)
   12f62:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
   12f64:	687b      	ldr	r3, [r7, #4]
   12f66:	781b      	ldrb	r3, [r3, #0]
   12f68:	2b20      	cmp	r3, #32
   12f6a:	d11c      	bne.n	12fa6 <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   12f6c:	687b      	ldr	r3, [r7, #4]
   12f6e:	7b1b      	ldrb	r3, [r3, #12]
   12f70:	069b      	lsls	r3, r3, #26
   12f72:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   12f74:	687b      	ldr	r3, [r7, #4]
   12f76:	89db      	ldrh	r3, [r3, #14]
   12f78:	041b      	lsls	r3, r3, #16
   12f7a:	0019      	movs	r1, r3
   12f7c:	4b0d      	ldr	r3, [pc, #52]	; (12fb4 <system_clock_source_dfll_set_config+0xcc>)
   12f7e:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   12f80:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   12f82:	687a      	ldr	r2, [r7, #4]
   12f84:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   12f86:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
   12f88:	4b09      	ldr	r3, [pc, #36]	; (12fb0 <system_clock_source_dfll_set_config+0xc8>)
   12f8a:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
   12f8c:	4b08      	ldr	r3, [pc, #32]	; (12fb0 <system_clock_source_dfll_set_config+0xc8>)
   12f8e:	681b      	ldr	r3, [r3, #0]
   12f90:	687a      	ldr	r2, [r7, #4]
   12f92:	7812      	ldrb	r2, [r2, #0]
   12f94:	2104      	movs	r1, #4
   12f96:	430a      	orrs	r2, r1
   12f98:	b2d2      	uxtb	r2, r2
   12f9a:	4313      	orrs	r3, r2
   12f9c:	2280      	movs	r2, #128	; 0x80
   12f9e:	00d2      	lsls	r2, r2, #3
   12fa0:	431a      	orrs	r2, r3
   12fa2:	4b03      	ldr	r3, [pc, #12]	; (12fb0 <system_clock_source_dfll_set_config+0xc8>)
   12fa4:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
   12fa6:	46c0      	nop			; (mov r8, r8)
   12fa8:	46bd      	mov	sp, r7
   12faa:	b002      	add	sp, #8
   12fac:	bd80      	pop	{r7, pc}
   12fae:	46c0      	nop			; (mov r8, r8)
   12fb0:	200004e0 	.word	0x200004e0
   12fb4:	03ff0000 	.word	0x03ff0000

00012fb8 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   12fb8:	b580      	push	{r7, lr}
   12fba:	b082      	sub	sp, #8
   12fbc:	af00      	add	r7, sp, #0
   12fbe:	0002      	movs	r2, r0
   12fc0:	1dfb      	adds	r3, r7, #7
   12fc2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   12fc4:	1dfb      	adds	r3, r7, #7
   12fc6:	781b      	ldrb	r3, [r3, #0]
   12fc8:	2b08      	cmp	r3, #8
   12fca:	d83b      	bhi.n	13044 <system_clock_source_enable+0x8c>
   12fcc:	009a      	lsls	r2, r3, #2
   12fce:	4b21      	ldr	r3, [pc, #132]	; (13054 <system_clock_source_enable+0x9c>)
   12fd0:	18d3      	adds	r3, r2, r3
   12fd2:	681b      	ldr	r3, [r3, #0]
   12fd4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   12fd6:	4b20      	ldr	r3, [pc, #128]	; (13058 <system_clock_source_enable+0xa0>)
   12fd8:	4a1f      	ldr	r2, [pc, #124]	; (13058 <system_clock_source_enable+0xa0>)
   12fda:	6a12      	ldr	r2, [r2, #32]
   12fdc:	2102      	movs	r1, #2
   12fde:	430a      	orrs	r2, r1
   12fe0:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   12fe2:	2300      	movs	r3, #0
   12fe4:	e031      	b.n	1304a <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   12fe6:	4b1c      	ldr	r3, [pc, #112]	; (13058 <system_clock_source_enable+0xa0>)
   12fe8:	4a1b      	ldr	r2, [pc, #108]	; (13058 <system_clock_source_enable+0xa0>)
   12fea:	6992      	ldr	r2, [r2, #24]
   12fec:	2102      	movs	r1, #2
   12fee:	430a      	orrs	r2, r1
   12ff0:	619a      	str	r2, [r3, #24]
		break;
   12ff2:	e029      	b.n	13048 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   12ff4:	4a18      	ldr	r2, [pc, #96]	; (13058 <system_clock_source_enable+0xa0>)
   12ff6:	4b18      	ldr	r3, [pc, #96]	; (13058 <system_clock_source_enable+0xa0>)
   12ff8:	8a1b      	ldrh	r3, [r3, #16]
   12ffa:	b29b      	uxth	r3, r3
   12ffc:	2102      	movs	r1, #2
   12ffe:	430b      	orrs	r3, r1
   13000:	b29b      	uxth	r3, r3
   13002:	8213      	strh	r3, [r2, #16]
		break;
   13004:	e020      	b.n	13048 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   13006:	4a14      	ldr	r2, [pc, #80]	; (13058 <system_clock_source_enable+0xa0>)
   13008:	4b13      	ldr	r3, [pc, #76]	; (13058 <system_clock_source_enable+0xa0>)
   1300a:	8a9b      	ldrh	r3, [r3, #20]
   1300c:	b29b      	uxth	r3, r3
   1300e:	2102      	movs	r1, #2
   13010:	430b      	orrs	r3, r1
   13012:	b29b      	uxth	r3, r3
   13014:	8293      	strh	r3, [r2, #20]
		break;
   13016:	e017      	b.n	13048 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   13018:	4b10      	ldr	r3, [pc, #64]	; (1305c <system_clock_source_enable+0xa4>)
   1301a:	681b      	ldr	r3, [r3, #0]
   1301c:	2202      	movs	r2, #2
   1301e:	431a      	orrs	r2, r3
   13020:	4b0e      	ldr	r3, [pc, #56]	; (1305c <system_clock_source_enable+0xa4>)
   13022:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   13024:	4b0e      	ldr	r3, [pc, #56]	; (13060 <system_clock_source_enable+0xa8>)
   13026:	4798      	blx	r3
		break;
   13028:	e00e      	b.n	13048 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   1302a:	4a0b      	ldr	r2, [pc, #44]	; (13058 <system_clock_source_enable+0xa0>)
   1302c:	490a      	ldr	r1, [pc, #40]	; (13058 <system_clock_source_enable+0xa0>)
   1302e:	2344      	movs	r3, #68	; 0x44
   13030:	5ccb      	ldrb	r3, [r1, r3]
   13032:	b2db      	uxtb	r3, r3
   13034:	2102      	movs	r1, #2
   13036:	430b      	orrs	r3, r1
   13038:	b2d9      	uxtb	r1, r3
   1303a:	2344      	movs	r3, #68	; 0x44
   1303c:	54d1      	strb	r1, [r2, r3]
		break;
   1303e:	e003      	b.n	13048 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   13040:	2300      	movs	r3, #0
   13042:	e002      	b.n	1304a <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   13044:	2317      	movs	r3, #23
   13046:	e000      	b.n	1304a <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   13048:	2300      	movs	r3, #0
}
   1304a:	0018      	movs	r0, r3
   1304c:	46bd      	mov	sp, r7
   1304e:	b002      	add	sp, #8
   13050:	bd80      	pop	{r7, pc}
   13052:	46c0      	nop			; (mov r8, r8)
   13054:	00019898 	.word	0x00019898
   13058:	40000800 	.word	0x40000800
   1305c:	200004e0 	.word	0x200004e0
   13060:	00012c4d 	.word	0x00012c4d

00013064 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   13064:	b580      	push	{r7, lr}
   13066:	b084      	sub	sp, #16
   13068:	af00      	add	r7, sp, #0
   1306a:	0002      	movs	r2, r0
   1306c:	1dfb      	adds	r3, r7, #7
   1306e:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   13070:	2300      	movs	r3, #0
   13072:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   13074:	1dfb      	adds	r3, r7, #7
   13076:	781b      	ldrb	r3, [r3, #0]
   13078:	2b08      	cmp	r3, #8
   1307a:	d821      	bhi.n	130c0 <system_clock_source_is_ready+0x5c>
   1307c:	009a      	lsls	r2, r3, #2
   1307e:	4b18      	ldr	r3, [pc, #96]	; (130e0 <system_clock_source_is_ready+0x7c>)
   13080:	18d3      	adds	r3, r2, r3
   13082:	681b      	ldr	r3, [r3, #0]
   13084:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   13086:	2308      	movs	r3, #8
   13088:	60fb      	str	r3, [r7, #12]
		break;
   1308a:	e01b      	b.n	130c4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   1308c:	2304      	movs	r3, #4
   1308e:	60fb      	str	r3, [r7, #12]
		break;
   13090:	e018      	b.n	130c4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   13092:	2301      	movs	r3, #1
   13094:	60fb      	str	r3, [r7, #12]
		break;
   13096:	e015      	b.n	130c4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   13098:	2302      	movs	r3, #2
   1309a:	60fb      	str	r3, [r7, #12]
		break;
   1309c:	e012      	b.n	130c4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
   1309e:	23d0      	movs	r3, #208	; 0xd0
   130a0:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
   130a2:	e00f      	b.n	130c4 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   130a4:	4a0f      	ldr	r2, [pc, #60]	; (130e4 <system_clock_source_is_ready+0x80>)
   130a6:	2350      	movs	r3, #80	; 0x50
   130a8:	5cd3      	ldrb	r3, [r2, r3]
   130aa:	b2db      	uxtb	r3, r3
   130ac:	001a      	movs	r2, r3
   130ae:	2303      	movs	r3, #3
   130b0:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   130b2:	3b03      	subs	r3, #3
   130b4:	425a      	negs	r2, r3
   130b6:	4153      	adcs	r3, r2
   130b8:	b2db      	uxtb	r3, r3
   130ba:	e00c      	b.n	130d6 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   130bc:	2301      	movs	r3, #1
   130be:	e00a      	b.n	130d6 <system_clock_source_is_ready+0x72>

	default:
		return false;
   130c0:	2300      	movs	r3, #0
   130c2:	e008      	b.n	130d6 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   130c4:	4b07      	ldr	r3, [pc, #28]	; (130e4 <system_clock_source_is_ready+0x80>)
   130c6:	68db      	ldr	r3, [r3, #12]
   130c8:	68fa      	ldr	r2, [r7, #12]
   130ca:	401a      	ands	r2, r3
   130cc:	68fb      	ldr	r3, [r7, #12]
   130ce:	1ad3      	subs	r3, r2, r3
   130d0:	425a      	negs	r2, r3
   130d2:	4153      	adcs	r3, r2
   130d4:	b2db      	uxtb	r3, r3
}
   130d6:	0018      	movs	r0, r3
   130d8:	46bd      	mov	sp, r7
   130da:	b004      	add	sp, #16
   130dc:	bd80      	pop	{r7, pc}
   130de:	46c0      	nop			; (mov r8, r8)
   130e0:	000198bc 	.word	0x000198bc
   130e4:	40000800 	.word	0x40000800

000130e8 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   130e8:	b580      	push	{r7, lr}
   130ea:	b082      	sub	sp, #8
   130ec:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
   130ee:	003b      	movs	r3, r7
   130f0:	2202      	movs	r2, #2
   130f2:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   130f4:	2300      	movs	r3, #0
   130f6:	607b      	str	r3, [r7, #4]
   130f8:	e009      	b.n	1310e <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   130fa:	687b      	ldr	r3, [r7, #4]
   130fc:	b2db      	uxtb	r3, r3
   130fe:	003a      	movs	r2, r7
   13100:	0011      	movs	r1, r2
   13102:	0018      	movs	r0, r3
   13104:	4b05      	ldr	r3, [pc, #20]	; (1311c <_switch_peripheral_gclk+0x34>)
   13106:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   13108:	687b      	ldr	r3, [r7, #4]
   1310a:	3301      	adds	r3, #1
   1310c:	607b      	str	r3, [r7, #4]
   1310e:	687b      	ldr	r3, [r7, #4]
   13110:	2b24      	cmp	r3, #36	; 0x24
   13112:	d9f2      	bls.n	130fa <_switch_peripheral_gclk+0x12>
	}
}
   13114:	46c0      	nop			; (mov r8, r8)
   13116:	46bd      	mov	sp, r7
   13118:	b002      	add	sp, #8
   1311a:	bd80      	pop	{r7, pc}
   1311c:	000137ad 	.word	0x000137ad

00013120 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   13120:	b580      	push	{r7, lr}
   13122:	b0aa      	sub	sp, #168	; 0xa8
   13124:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   13126:	4bc1      	ldr	r3, [pc, #772]	; (1342c <system_clock_init+0x30c>)
   13128:	22c2      	movs	r2, #194	; 0xc2
   1312a:	00d2      	lsls	r2, r2, #3
   1312c:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   1312e:	2002      	movs	r0, #2
   13130:	4bbf      	ldr	r3, [pc, #764]	; (13430 <system_clock_init+0x310>)
   13132:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   13134:	4bbf      	ldr	r3, [pc, #764]	; (13434 <system_clock_init+0x314>)
   13136:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
   13138:	2394      	movs	r3, #148	; 0x94
   1313a:	18fb      	adds	r3, r7, r3
   1313c:	0018      	movs	r0, r3
   1313e:	4bbe      	ldr	r3, [pc, #760]	; (13438 <system_clock_init+0x318>)
   13140:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
   13142:	2394      	movs	r3, #148	; 0x94
   13144:	18fb      	adds	r3, r7, r3
   13146:	2280      	movs	r2, #128	; 0x80
   13148:	0212      	lsls	r2, r2, #8
   1314a:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
   1314c:	2394      	movs	r3, #148	; 0x94
   1314e:	18fb      	adds	r3, r7, r3
   13150:	2200      	movs	r2, #0
   13152:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
   13154:	2394      	movs	r3, #148	; 0x94
   13156:	18fb      	adds	r3, r7, r3
   13158:	2206      	movs	r2, #6
   1315a:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
   1315c:	2394      	movs	r3, #148	; 0x94
   1315e:	18fb      	adds	r3, r7, r3
   13160:	2200      	movs	r2, #0
   13162:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
   13164:	2394      	movs	r3, #148	; 0x94
   13166:	18fb      	adds	r3, r7, r3
   13168:	2200      	movs	r2, #0
   1316a:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
   1316c:	2394      	movs	r3, #148	; 0x94
   1316e:	18fb      	adds	r3, r7, r3
   13170:	2201      	movs	r2, #1
   13172:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
   13174:	2394      	movs	r3, #148	; 0x94
   13176:	18fb      	adds	r3, r7, r3
   13178:	2200      	movs	r2, #0
   1317a:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
   1317c:	2394      	movs	r3, #148	; 0x94
   1317e:	18fb      	adds	r3, r7, r3
   13180:	2201      	movs	r2, #1
   13182:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
   13184:	2394      	movs	r3, #148	; 0x94
   13186:	18fb      	adds	r3, r7, r3
   13188:	0018      	movs	r0, r3
   1318a:	4bac      	ldr	r3, [pc, #688]	; (1343c <system_clock_init+0x31c>)
   1318c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
   1318e:	2005      	movs	r0, #5
   13190:	4bab      	ldr	r3, [pc, #684]	; (13440 <system_clock_init+0x320>)
   13192:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
   13194:	46c0      	nop			; (mov r8, r8)
   13196:	2005      	movs	r0, #5
   13198:	4baa      	ldr	r3, [pc, #680]	; (13444 <system_clock_init+0x324>)
   1319a:	4798      	blx	r3
   1319c:	0003      	movs	r3, r0
   1319e:	001a      	movs	r2, r3
   131a0:	2301      	movs	r3, #1
   131a2:	4053      	eors	r3, r2
   131a4:	b2db      	uxtb	r3, r3
   131a6:	2b00      	cmp	r3, #0
   131a8:	d1f5      	bne.n	13196 <system_clock_init+0x76>


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
   131aa:	2380      	movs	r3, #128	; 0x80
   131ac:	18fb      	adds	r3, r7, r3
   131ae:	0018      	movs	r0, r3
   131b0:	4ba5      	ldr	r3, [pc, #660]	; (13448 <system_clock_init+0x328>)
   131b2:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
   131b4:	2380      	movs	r3, #128	; 0x80
   131b6:	18fb      	adds	r3, r7, r3
   131b8:	2204      	movs	r2, #4
   131ba:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
   131bc:	2380      	movs	r3, #128	; 0x80
   131be:	18fb      	adds	r3, r7, r3
   131c0:	2200      	movs	r2, #0
   131c2:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
   131c4:	4ba1      	ldr	r3, [pc, #644]	; (1344c <system_clock_init+0x32c>)
   131c6:	681b      	ldr	r3, [r3, #0]
   131c8:	0e9b      	lsrs	r3, r3, #26
   131ca:	22a4      	movs	r2, #164	; 0xa4
   131cc:	18ba      	adds	r2, r7, r2
   131ce:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
   131d0:	23a4      	movs	r3, #164	; 0xa4
   131d2:	18fb      	adds	r3, r7, r3
   131d4:	681b      	ldr	r3, [r3, #0]
   131d6:	2b3f      	cmp	r3, #63	; 0x3f
   131d8:	d103      	bne.n	131e2 <system_clock_init+0xc2>
		coarse = 0x1f;
   131da:	231f      	movs	r3, #31
   131dc:	22a4      	movs	r2, #164	; 0xa4
   131de:	18ba      	adds	r2, r7, r2
   131e0:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
   131e2:	23a4      	movs	r3, #164	; 0xa4
   131e4:	18fb      	adds	r3, r7, r3
   131e6:	681b      	ldr	r3, [r3, #0]
   131e8:	b2da      	uxtb	r2, r3
   131ea:	2380      	movs	r3, #128	; 0x80
   131ec:	18fb      	adds	r3, r7, r3
   131ee:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   131f0:	2380      	movs	r3, #128	; 0x80
   131f2:	18fb      	adds	r3, r7, r3
   131f4:	2200      	movs	r2, #0
   131f6:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   131f8:	2380      	movs	r3, #128	; 0x80
   131fa:	18fb      	adds	r3, r7, r3
   131fc:	2200      	movs	r2, #0
   131fe:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   13200:	2380      	movs	r3, #128	; 0x80
   13202:	18fb      	adds	r3, r7, r3
   13204:	2200      	movs	r2, #0
   13206:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   13208:	2380      	movs	r3, #128	; 0x80
   1320a:	18fb      	adds	r3, r7, r3
   1320c:	2200      	movs	r2, #0
   1320e:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
   13210:	2380      	movs	r3, #128	; 0x80
   13212:	18fb      	adds	r3, r7, r3
   13214:	22b7      	movs	r2, #183	; 0xb7
   13216:	00d2      	lsls	r2, r2, #3
   13218:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
   1321a:	2380      	movs	r3, #128	; 0x80
   1321c:	18fb      	adds	r3, r7, r3
   1321e:	2203      	movs	r2, #3
   13220:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
   13222:	2380      	movs	r3, #128	; 0x80
   13224:	18fb      	adds	r3, r7, r3
   13226:	221f      	movs	r2, #31
   13228:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
   1322a:	2380      	movs	r3, #128	; 0x80
   1322c:	18fb      	adds	r3, r7, r3
   1322e:	0018      	movs	r0, r3
   13230:	4b87      	ldr	r3, [pc, #540]	; (13450 <system_clock_init+0x330>)
   13232:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   13234:	237c      	movs	r3, #124	; 0x7c
   13236:	18fb      	adds	r3, r7, r3
   13238:	0018      	movs	r0, r3
   1323a:	4b86      	ldr	r3, [pc, #536]	; (13454 <system_clock_init+0x334>)
   1323c:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   1323e:	237c      	movs	r3, #124	; 0x7c
   13240:	18fb      	adds	r3, r7, r3
   13242:	2200      	movs	r2, #0
   13244:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   13246:	237c      	movs	r3, #124	; 0x7c
   13248:	18fb      	adds	r3, r7, r3
   1324a:	2201      	movs	r2, #1
   1324c:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   1324e:	237c      	movs	r3, #124	; 0x7c
   13250:	18fb      	adds	r3, r7, r3
   13252:	2201      	movs	r2, #1
   13254:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   13256:	237c      	movs	r3, #124	; 0x7c
   13258:	18fb      	adds	r3, r7, r3
   1325a:	0018      	movs	r0, r3
   1325c:	4b7e      	ldr	r3, [pc, #504]	; (13458 <system_clock_init+0x338>)
   1325e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   13260:	2006      	movs	r0, #6
   13262:	4b77      	ldr	r3, [pc, #476]	; (13440 <system_clock_init+0x320>)
   13264:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   13266:	4b7d      	ldr	r3, [pc, #500]	; (1345c <system_clock_init+0x33c>)
   13268:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   1326a:	2364      	movs	r3, #100	; 0x64
   1326c:	18fb      	adds	r3, r7, r3
   1326e:	0018      	movs	r0, r3
   13270:	4b7b      	ldr	r3, [pc, #492]	; (13460 <system_clock_init+0x340>)
   13272:	4798      	blx	r3
   13274:	2364      	movs	r3, #100	; 0x64
   13276:	18fb      	adds	r3, r7, r3
   13278:	2205      	movs	r2, #5
   1327a:	701a      	strb	r2, [r3, #0]
   1327c:	2364      	movs	r3, #100	; 0x64
   1327e:	18fb      	adds	r3, r7, r3
   13280:	2201      	movs	r2, #1
   13282:	605a      	str	r2, [r3, #4]
   13284:	2364      	movs	r3, #100	; 0x64
   13286:	18fb      	adds	r3, r7, r3
   13288:	2200      	movs	r2, #0
   1328a:	721a      	strb	r2, [r3, #8]
   1328c:	2364      	movs	r3, #100	; 0x64
   1328e:	18fb      	adds	r3, r7, r3
   13290:	2200      	movs	r2, #0
   13292:	725a      	strb	r2, [r3, #9]
   13294:	2364      	movs	r3, #100	; 0x64
   13296:	18fb      	adds	r3, r7, r3
   13298:	0019      	movs	r1, r3
   1329a:	2001      	movs	r0, #1
   1329c:	4b71      	ldr	r3, [pc, #452]	; (13464 <system_clock_init+0x344>)
   1329e:	4798      	blx	r3
   132a0:	2001      	movs	r0, #1
   132a2:	4b71      	ldr	r3, [pc, #452]	; (13468 <system_clock_init+0x348>)
   132a4:	4798      	blx	r3
   132a6:	234c      	movs	r3, #76	; 0x4c
   132a8:	18fb      	adds	r3, r7, r3
   132aa:	0018      	movs	r0, r3
   132ac:	4b6c      	ldr	r3, [pc, #432]	; (13460 <system_clock_init+0x340>)
   132ae:	4798      	blx	r3
   132b0:	234c      	movs	r3, #76	; 0x4c
   132b2:	18fb      	adds	r3, r7, r3
   132b4:	2206      	movs	r2, #6
   132b6:	701a      	strb	r2, [r3, #0]
   132b8:	234c      	movs	r3, #76	; 0x4c
   132ba:	18fb      	adds	r3, r7, r3
   132bc:	2201      	movs	r2, #1
   132be:	605a      	str	r2, [r3, #4]
   132c0:	234c      	movs	r3, #76	; 0x4c
   132c2:	18fb      	adds	r3, r7, r3
   132c4:	2201      	movs	r2, #1
   132c6:	721a      	strb	r2, [r3, #8]
   132c8:	234c      	movs	r3, #76	; 0x4c
   132ca:	18fb      	adds	r3, r7, r3
   132cc:	2200      	movs	r2, #0
   132ce:	725a      	strb	r2, [r3, #9]
   132d0:	234c      	movs	r3, #76	; 0x4c
   132d2:	18fb      	adds	r3, r7, r3
   132d4:	0019      	movs	r1, r3
   132d6:	2003      	movs	r0, #3
   132d8:	4b62      	ldr	r3, [pc, #392]	; (13464 <system_clock_init+0x344>)
   132da:	4798      	blx	r3
   132dc:	2003      	movs	r0, #3
   132de:	4b62      	ldr	r3, [pc, #392]	; (13468 <system_clock_init+0x348>)
   132e0:	4798      	blx	r3
   132e2:	2340      	movs	r3, #64	; 0x40
   132e4:	18fb      	adds	r3, r7, r3
   132e6:	0018      	movs	r0, r3
   132e8:	4b5d      	ldr	r3, [pc, #372]	; (13460 <system_clock_init+0x340>)
   132ea:	4798      	blx	r3
   132ec:	2340      	movs	r3, #64	; 0x40
   132ee:	18fb      	adds	r3, r7, r3
   132f0:	2203      	movs	r2, #3
   132f2:	701a      	strb	r2, [r3, #0]
   132f4:	2340      	movs	r3, #64	; 0x40
   132f6:	18fb      	adds	r3, r7, r3
   132f8:	2220      	movs	r2, #32
   132fa:	605a      	str	r2, [r3, #4]
   132fc:	2340      	movs	r3, #64	; 0x40
   132fe:	18fb      	adds	r3, r7, r3
   13300:	2200      	movs	r2, #0
   13302:	721a      	strb	r2, [r3, #8]
   13304:	2340      	movs	r3, #64	; 0x40
   13306:	18fb      	adds	r3, r7, r3
   13308:	2200      	movs	r2, #0
   1330a:	725a      	strb	r2, [r3, #9]
   1330c:	2340      	movs	r3, #64	; 0x40
   1330e:	18fb      	adds	r3, r7, r3
   13310:	0019      	movs	r1, r3
   13312:	2004      	movs	r0, #4
   13314:	4b53      	ldr	r3, [pc, #332]	; (13464 <system_clock_init+0x344>)
   13316:	4798      	blx	r3
   13318:	2004      	movs	r0, #4
   1331a:	4b53      	ldr	r3, [pc, #332]	; (13468 <system_clock_init+0x348>)
   1331c:	4798      	blx	r3
   1331e:	2334      	movs	r3, #52	; 0x34
   13320:	18fb      	adds	r3, r7, r3
   13322:	0018      	movs	r0, r3
   13324:	4b4e      	ldr	r3, [pc, #312]	; (13460 <system_clock_init+0x340>)
   13326:	4798      	blx	r3
   13328:	2334      	movs	r3, #52	; 0x34
   1332a:	18fb      	adds	r3, r7, r3
   1332c:	2207      	movs	r2, #7
   1332e:	701a      	strb	r2, [r3, #0]
   13330:	2334      	movs	r3, #52	; 0x34
   13332:	18fb      	adds	r3, r7, r3
   13334:	2201      	movs	r2, #1
   13336:	605a      	str	r2, [r3, #4]
   13338:	2334      	movs	r3, #52	; 0x34
   1333a:	18fb      	adds	r3, r7, r3
   1333c:	2200      	movs	r2, #0
   1333e:	721a      	strb	r2, [r3, #8]
   13340:	2334      	movs	r3, #52	; 0x34
   13342:	18fb      	adds	r3, r7, r3
   13344:	2200      	movs	r2, #0
   13346:	725a      	strb	r2, [r3, #9]
   13348:	2334      	movs	r3, #52	; 0x34
   1334a:	18fb      	adds	r3, r7, r3
   1334c:	0019      	movs	r1, r3
   1334e:	2005      	movs	r0, #5
   13350:	4b44      	ldr	r3, [pc, #272]	; (13464 <system_clock_init+0x344>)
   13352:	4798      	blx	r3
   13354:	2005      	movs	r0, #5
   13356:	4b44      	ldr	r3, [pc, #272]	; (13468 <system_clock_init+0x348>)
   13358:	4798      	blx	r3
   1335a:	2328      	movs	r3, #40	; 0x28
   1335c:	18fb      	adds	r3, r7, r3
   1335e:	0018      	movs	r0, r3
   13360:	4b3f      	ldr	r3, [pc, #252]	; (13460 <system_clock_init+0x340>)
   13362:	4798      	blx	r3
   13364:	2328      	movs	r3, #40	; 0x28
   13366:	18fb      	adds	r3, r7, r3
   13368:	2206      	movs	r2, #6
   1336a:	701a      	strb	r2, [r3, #0]
   1336c:	2328      	movs	r3, #40	; 0x28
   1336e:	18fb      	adds	r3, r7, r3
   13370:	2201      	movs	r2, #1
   13372:	605a      	str	r2, [r3, #4]
   13374:	2328      	movs	r3, #40	; 0x28
   13376:	18fb      	adds	r3, r7, r3
   13378:	2201      	movs	r2, #1
   1337a:	721a      	strb	r2, [r3, #8]
   1337c:	2328      	movs	r3, #40	; 0x28
   1337e:	18fb      	adds	r3, r7, r3
   13380:	2200      	movs	r2, #0
   13382:	725a      	strb	r2, [r3, #9]
   13384:	2328      	movs	r3, #40	; 0x28
   13386:	18fb      	adds	r3, r7, r3
   13388:	0019      	movs	r1, r3
   1338a:	2006      	movs	r0, #6
   1338c:	4b35      	ldr	r3, [pc, #212]	; (13464 <system_clock_init+0x344>)
   1338e:	4798      	blx	r3
   13390:	2006      	movs	r0, #6
   13392:	4b35      	ldr	r3, [pc, #212]	; (13468 <system_clock_init+0x348>)
   13394:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
   13396:	230c      	movs	r3, #12
   13398:	18fb      	adds	r3, r7, r3
   1339a:	0018      	movs	r0, r3
   1339c:	4b33      	ldr	r3, [pc, #204]	; (1346c <system_clock_init+0x34c>)
   1339e:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
   133a0:	230c      	movs	r3, #12
   133a2:	18fb      	adds	r3, r7, r3
   133a4:	2201      	movs	r2, #1
   133a6:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
   133a8:	230c      	movs	r3, #12
   133aa:	18fb      	adds	r3, r7, r3
   133ac:	0019      	movs	r1, r3
   133ae:	2000      	movs	r0, #0
   133b0:	4b2f      	ldr	r3, [pc, #188]	; (13470 <system_clock_init+0x350>)
   133b2:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
   133b4:	2000      	movs	r0, #0
   133b6:	4b2f      	ldr	r3, [pc, #188]	; (13474 <system_clock_init+0x354>)
   133b8:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
   133ba:	2007      	movs	r0, #7
   133bc:	4b20      	ldr	r3, [pc, #128]	; (13440 <system_clock_init+0x320>)
   133be:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
   133c0:	46c0      	nop			; (mov r8, r8)
   133c2:	2007      	movs	r0, #7
   133c4:	4b1f      	ldr	r3, [pc, #124]	; (13444 <system_clock_init+0x324>)
   133c6:	4798      	blx	r3
   133c8:	0003      	movs	r3, r0
   133ca:	001a      	movs	r2, r3
   133cc:	2301      	movs	r3, #1
   133ce:	4053      	eors	r3, r2
   133d0:	b2db      	uxtb	r3, r3
   133d2:	2b00      	cmp	r3, #0
   133d4:	d1f5      	bne.n	133c2 <system_clock_init+0x2a2>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   133d6:	2000      	movs	r0, #0
   133d8:	4b27      	ldr	r3, [pc, #156]	; (13478 <system_clock_init+0x358>)
   133da:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   133dc:	2100      	movs	r1, #0
   133de:	2000      	movs	r0, #0
   133e0:	4b26      	ldr	r3, [pc, #152]	; (1347c <system_clock_init+0x35c>)
   133e2:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   133e4:	2100      	movs	r1, #0
   133e6:	2001      	movs	r0, #1
   133e8:	4b24      	ldr	r3, [pc, #144]	; (1347c <system_clock_init+0x35c>)
   133ea:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   133ec:	2100      	movs	r1, #0
   133ee:	2002      	movs	r0, #2
   133f0:	4b22      	ldr	r3, [pc, #136]	; (1347c <system_clock_init+0x35c>)
   133f2:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   133f4:	003b      	movs	r3, r7
   133f6:	0018      	movs	r0, r3
   133f8:	4b19      	ldr	r3, [pc, #100]	; (13460 <system_clock_init+0x340>)
   133fa:	4798      	blx	r3
   133fc:	003b      	movs	r3, r7
   133fe:	2207      	movs	r2, #7
   13400:	701a      	strb	r2, [r3, #0]
   13402:	003b      	movs	r3, r7
   13404:	2201      	movs	r2, #1
   13406:	605a      	str	r2, [r3, #4]
   13408:	003b      	movs	r3, r7
   1340a:	2200      	movs	r2, #0
   1340c:	721a      	strb	r2, [r3, #8]
   1340e:	003b      	movs	r3, r7
   13410:	2200      	movs	r2, #0
   13412:	725a      	strb	r2, [r3, #9]
   13414:	003b      	movs	r3, r7
   13416:	0019      	movs	r1, r3
   13418:	2000      	movs	r0, #0
   1341a:	4b12      	ldr	r3, [pc, #72]	; (13464 <system_clock_init+0x344>)
   1341c:	4798      	blx	r3
   1341e:	2000      	movs	r0, #0
   13420:	4b11      	ldr	r3, [pc, #68]	; (13468 <system_clock_init+0x348>)
   13422:	4798      	blx	r3
#endif
}
   13424:	46c0      	nop			; (mov r8, r8)
   13426:	46bd      	mov	sp, r7
   13428:	b02a      	add	sp, #168	; 0xa8
   1342a:	bd80      	pop	{r7, pc}
   1342c:	40000800 	.word	0x40000800
   13430:	00012bfd 	.word	0x00012bfd
   13434:	000130e9 	.word	0x000130e9
   13438:	00012acd 	.word	0x00012acd
   1343c:	00012dc9 	.word	0x00012dc9
   13440:	00012fb9 	.word	0x00012fb9
   13444:	00013065 	.word	0x00013065
   13448:	00012b37 	.word	0x00012b37
   1344c:	00806024 	.word	0x00806024
   13450:	00012ee9 	.word	0x00012ee9
   13454:	00012b15 	.word	0x00012b15
   13458:	00012d51 	.word	0x00012d51
   1345c:	00013525 	.word	0x00013525
   13460:	00012a89 	.word	0x00012a89
   13464:	00013555 	.word	0x00013555
   13468:	00013679 	.word	0x00013679
   1346c:	00012ab7 	.word	0x00012ab7
   13470:	000137ad 	.word	0x000137ad
   13474:	000137f1 	.word	0x000137f1
   13478:	00012b89 	.word	0x00012b89
   1347c:	00012ba9 	.word	0x00012ba9

00013480 <system_apb_clock_set_mask>:
{
   13480:	b580      	push	{r7, lr}
   13482:	b082      	sub	sp, #8
   13484:	af00      	add	r7, sp, #0
   13486:	0002      	movs	r2, r0
   13488:	6039      	str	r1, [r7, #0]
   1348a:	1dfb      	adds	r3, r7, #7
   1348c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1348e:	1dfb      	adds	r3, r7, #7
   13490:	781b      	ldrb	r3, [r3, #0]
   13492:	2b01      	cmp	r3, #1
   13494:	d00a      	beq.n	134ac <system_apb_clock_set_mask+0x2c>
   13496:	2b02      	cmp	r3, #2
   13498:	d00f      	beq.n	134ba <system_apb_clock_set_mask+0x3a>
   1349a:	2b00      	cmp	r3, #0
   1349c:	d114      	bne.n	134c8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1349e:	4b0e      	ldr	r3, [pc, #56]	; (134d8 <system_apb_clock_set_mask+0x58>)
   134a0:	4a0d      	ldr	r2, [pc, #52]	; (134d8 <system_apb_clock_set_mask+0x58>)
   134a2:	6991      	ldr	r1, [r2, #24]
   134a4:	683a      	ldr	r2, [r7, #0]
   134a6:	430a      	orrs	r2, r1
   134a8:	619a      	str	r2, [r3, #24]
			break;
   134aa:	e00f      	b.n	134cc <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   134ac:	4b0a      	ldr	r3, [pc, #40]	; (134d8 <system_apb_clock_set_mask+0x58>)
   134ae:	4a0a      	ldr	r2, [pc, #40]	; (134d8 <system_apb_clock_set_mask+0x58>)
   134b0:	69d1      	ldr	r1, [r2, #28]
   134b2:	683a      	ldr	r2, [r7, #0]
   134b4:	430a      	orrs	r2, r1
   134b6:	61da      	str	r2, [r3, #28]
			break;
   134b8:	e008      	b.n	134cc <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   134ba:	4b07      	ldr	r3, [pc, #28]	; (134d8 <system_apb_clock_set_mask+0x58>)
   134bc:	4a06      	ldr	r2, [pc, #24]	; (134d8 <system_apb_clock_set_mask+0x58>)
   134be:	6a11      	ldr	r1, [r2, #32]
   134c0:	683a      	ldr	r2, [r7, #0]
   134c2:	430a      	orrs	r2, r1
   134c4:	621a      	str	r2, [r3, #32]
			break;
   134c6:	e001      	b.n	134cc <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   134c8:	2317      	movs	r3, #23
   134ca:	e000      	b.n	134ce <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   134cc:	2300      	movs	r3, #0
}
   134ce:	0018      	movs	r0, r3
   134d0:	46bd      	mov	sp, r7
   134d2:	b002      	add	sp, #8
   134d4:	bd80      	pop	{r7, pc}
   134d6:	46c0      	nop			; (mov r8, r8)
   134d8:	40000400 	.word	0x40000400

000134dc <system_interrupt_enter_critical_section>:
{
   134dc:	b580      	push	{r7, lr}
   134de:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   134e0:	4b02      	ldr	r3, [pc, #8]	; (134ec <system_interrupt_enter_critical_section+0x10>)
   134e2:	4798      	blx	r3
}
   134e4:	46c0      	nop			; (mov r8, r8)
   134e6:	46bd      	mov	sp, r7
   134e8:	bd80      	pop	{r7, pc}
   134ea:	46c0      	nop			; (mov r8, r8)
   134ec:	000129f5 	.word	0x000129f5

000134f0 <system_interrupt_leave_critical_section>:
{
   134f0:	b580      	push	{r7, lr}
   134f2:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   134f4:	4b02      	ldr	r3, [pc, #8]	; (13500 <system_interrupt_leave_critical_section+0x10>)
   134f6:	4798      	blx	r3
}
   134f8:	46c0      	nop			; (mov r8, r8)
   134fa:	46bd      	mov	sp, r7
   134fc:	bd80      	pop	{r7, pc}
   134fe:	46c0      	nop			; (mov r8, r8)
   13500:	00012a49 	.word	0x00012a49

00013504 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   13504:	b580      	push	{r7, lr}
   13506:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   13508:	4b05      	ldr	r3, [pc, #20]	; (13520 <system_gclk_is_syncing+0x1c>)
   1350a:	785b      	ldrb	r3, [r3, #1]
   1350c:	b2db      	uxtb	r3, r3
   1350e:	b25b      	sxtb	r3, r3
   13510:	2b00      	cmp	r3, #0
   13512:	da01      	bge.n	13518 <system_gclk_is_syncing+0x14>
		return true;
   13514:	2301      	movs	r3, #1
   13516:	e000      	b.n	1351a <system_gclk_is_syncing+0x16>
	}

	return false;
   13518:	2300      	movs	r3, #0
}
   1351a:	0018      	movs	r0, r3
   1351c:	46bd      	mov	sp, r7
   1351e:	bd80      	pop	{r7, pc}
   13520:	40000c00 	.word	0x40000c00

00013524 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   13524:	b580      	push	{r7, lr}
   13526:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   13528:	2108      	movs	r1, #8
   1352a:	2000      	movs	r0, #0
   1352c:	4b07      	ldr	r3, [pc, #28]	; (1354c <system_gclk_init+0x28>)
   1352e:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   13530:	4b07      	ldr	r3, [pc, #28]	; (13550 <system_gclk_init+0x2c>)
   13532:	2201      	movs	r2, #1
   13534:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   13536:	46c0      	nop			; (mov r8, r8)
   13538:	4b05      	ldr	r3, [pc, #20]	; (13550 <system_gclk_init+0x2c>)
   1353a:	781b      	ldrb	r3, [r3, #0]
   1353c:	b2db      	uxtb	r3, r3
   1353e:	001a      	movs	r2, r3
   13540:	2301      	movs	r3, #1
   13542:	4013      	ands	r3, r2
   13544:	d1f8      	bne.n	13538 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   13546:	46c0      	nop			; (mov r8, r8)
   13548:	46bd      	mov	sp, r7
   1354a:	bd80      	pop	{r7, pc}
   1354c:	00013481 	.word	0x00013481
   13550:	40000c00 	.word	0x40000c00

00013554 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   13554:	b580      	push	{r7, lr}
   13556:	b086      	sub	sp, #24
   13558:	af00      	add	r7, sp, #0
   1355a:	0002      	movs	r2, r0
   1355c:	6039      	str	r1, [r7, #0]
   1355e:	1dfb      	adds	r3, r7, #7
   13560:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   13562:	1dfb      	adds	r3, r7, #7
   13564:	781b      	ldrb	r3, [r3, #0]
   13566:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   13568:	1dfb      	adds	r3, r7, #7
   1356a:	781b      	ldrb	r3, [r3, #0]
   1356c:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   1356e:	683b      	ldr	r3, [r7, #0]
   13570:	781b      	ldrb	r3, [r3, #0]
   13572:	021b      	lsls	r3, r3, #8
   13574:	001a      	movs	r2, r3
   13576:	697b      	ldr	r3, [r7, #20]
   13578:	4313      	orrs	r3, r2
   1357a:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   1357c:	683b      	ldr	r3, [r7, #0]
   1357e:	785b      	ldrb	r3, [r3, #1]
   13580:	2b00      	cmp	r3, #0
   13582:	d004      	beq.n	1358e <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   13584:	697b      	ldr	r3, [r7, #20]
   13586:	2280      	movs	r2, #128	; 0x80
   13588:	02d2      	lsls	r2, r2, #11
   1358a:	4313      	orrs	r3, r2
   1358c:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   1358e:	683b      	ldr	r3, [r7, #0]
   13590:	7a5b      	ldrb	r3, [r3, #9]
   13592:	2b00      	cmp	r3, #0
   13594:	d004      	beq.n	135a0 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   13596:	697b      	ldr	r3, [r7, #20]
   13598:	2280      	movs	r2, #128	; 0x80
   1359a:	0312      	lsls	r2, r2, #12
   1359c:	4313      	orrs	r3, r2
   1359e:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   135a0:	683b      	ldr	r3, [r7, #0]
   135a2:	685b      	ldr	r3, [r3, #4]
   135a4:	2b01      	cmp	r3, #1
   135a6:	d92c      	bls.n	13602 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   135a8:	683b      	ldr	r3, [r7, #0]
   135aa:	685a      	ldr	r2, [r3, #4]
   135ac:	683b      	ldr	r3, [r7, #0]
   135ae:	685b      	ldr	r3, [r3, #4]
   135b0:	3b01      	subs	r3, #1
   135b2:	4013      	ands	r3, r2
   135b4:	d11a      	bne.n	135ec <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   135b6:	2300      	movs	r3, #0
   135b8:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   135ba:	2302      	movs	r3, #2
   135bc:	60bb      	str	r3, [r7, #8]
   135be:	e005      	b.n	135cc <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   135c0:	68fb      	ldr	r3, [r7, #12]
   135c2:	3301      	adds	r3, #1
   135c4:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   135c6:	68bb      	ldr	r3, [r7, #8]
   135c8:	005b      	lsls	r3, r3, #1
   135ca:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   135cc:	683b      	ldr	r3, [r7, #0]
   135ce:	685a      	ldr	r2, [r3, #4]
   135d0:	68bb      	ldr	r3, [r7, #8]
   135d2:	429a      	cmp	r2, r3
   135d4:	d8f4      	bhi.n	135c0 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   135d6:	68fb      	ldr	r3, [r7, #12]
   135d8:	021b      	lsls	r3, r3, #8
   135da:	693a      	ldr	r2, [r7, #16]
   135dc:	4313      	orrs	r3, r2
   135de:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   135e0:	697b      	ldr	r3, [r7, #20]
   135e2:	2280      	movs	r2, #128	; 0x80
   135e4:	0352      	lsls	r2, r2, #13
   135e6:	4313      	orrs	r3, r2
   135e8:	617b      	str	r3, [r7, #20]
   135ea:	e00a      	b.n	13602 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   135ec:	683b      	ldr	r3, [r7, #0]
   135ee:	685b      	ldr	r3, [r3, #4]
   135f0:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   135f2:	693a      	ldr	r2, [r7, #16]
   135f4:	4313      	orrs	r3, r2
   135f6:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   135f8:	697b      	ldr	r3, [r7, #20]
   135fa:	2280      	movs	r2, #128	; 0x80
   135fc:	0292      	lsls	r2, r2, #10
   135fe:	4313      	orrs	r3, r2
   13600:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   13602:	683b      	ldr	r3, [r7, #0]
   13604:	7a1b      	ldrb	r3, [r3, #8]
   13606:	2b00      	cmp	r3, #0
   13608:	d004      	beq.n	13614 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   1360a:	697b      	ldr	r3, [r7, #20]
   1360c:	2280      	movs	r2, #128	; 0x80
   1360e:	0392      	lsls	r2, r2, #14
   13610:	4313      	orrs	r3, r2
   13612:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   13614:	46c0      	nop			; (mov r8, r8)
   13616:	4b13      	ldr	r3, [pc, #76]	; (13664 <system_gclk_gen_set_config+0x110>)
   13618:	4798      	blx	r3
   1361a:	1e03      	subs	r3, r0, #0
   1361c:	d1fb      	bne.n	13616 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   1361e:	4b12      	ldr	r3, [pc, #72]	; (13668 <system_gclk_gen_set_config+0x114>)
   13620:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   13622:	4a12      	ldr	r2, [pc, #72]	; (1366c <system_gclk_gen_set_config+0x118>)
   13624:	1dfb      	adds	r3, r7, #7
   13626:	781b      	ldrb	r3, [r3, #0]
   13628:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   1362a:	46c0      	nop			; (mov r8, r8)
   1362c:	4b0d      	ldr	r3, [pc, #52]	; (13664 <system_gclk_gen_set_config+0x110>)
   1362e:	4798      	blx	r3
   13630:	1e03      	subs	r3, r0, #0
   13632:	d1fb      	bne.n	1362c <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   13634:	4b0e      	ldr	r3, [pc, #56]	; (13670 <system_gclk_gen_set_config+0x11c>)
   13636:	693a      	ldr	r2, [r7, #16]
   13638:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   1363a:	46c0      	nop			; (mov r8, r8)
   1363c:	4b09      	ldr	r3, [pc, #36]	; (13664 <system_gclk_gen_set_config+0x110>)
   1363e:	4798      	blx	r3
   13640:	1e03      	subs	r3, r0, #0
   13642:	d1fb      	bne.n	1363c <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   13644:	4b0a      	ldr	r3, [pc, #40]	; (13670 <system_gclk_gen_set_config+0x11c>)
   13646:	4a0a      	ldr	r2, [pc, #40]	; (13670 <system_gclk_gen_set_config+0x11c>)
   13648:	6851      	ldr	r1, [r2, #4]
   1364a:	2280      	movs	r2, #128	; 0x80
   1364c:	0252      	lsls	r2, r2, #9
   1364e:	4011      	ands	r1, r2
   13650:	697a      	ldr	r2, [r7, #20]
   13652:	430a      	orrs	r2, r1
   13654:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   13656:	4b07      	ldr	r3, [pc, #28]	; (13674 <system_gclk_gen_set_config+0x120>)
   13658:	4798      	blx	r3
}
   1365a:	46c0      	nop			; (mov r8, r8)
   1365c:	46bd      	mov	sp, r7
   1365e:	b006      	add	sp, #24
   13660:	bd80      	pop	{r7, pc}
   13662:	46c0      	nop			; (mov r8, r8)
   13664:	00013505 	.word	0x00013505
   13668:	000134dd 	.word	0x000134dd
   1366c:	40000c08 	.word	0x40000c08
   13670:	40000c00 	.word	0x40000c00
   13674:	000134f1 	.word	0x000134f1

00013678 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   13678:	b580      	push	{r7, lr}
   1367a:	b082      	sub	sp, #8
   1367c:	af00      	add	r7, sp, #0
   1367e:	0002      	movs	r2, r0
   13680:	1dfb      	adds	r3, r7, #7
   13682:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   13684:	46c0      	nop			; (mov r8, r8)
   13686:	4b0e      	ldr	r3, [pc, #56]	; (136c0 <system_gclk_gen_enable+0x48>)
   13688:	4798      	blx	r3
   1368a:	1e03      	subs	r3, r0, #0
   1368c:	d1fb      	bne.n	13686 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   1368e:	4b0d      	ldr	r3, [pc, #52]	; (136c4 <system_gclk_gen_enable+0x4c>)
   13690:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   13692:	4a0d      	ldr	r2, [pc, #52]	; (136c8 <system_gclk_gen_enable+0x50>)
   13694:	1dfb      	adds	r3, r7, #7
   13696:	781b      	ldrb	r3, [r3, #0]
   13698:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   1369a:	46c0      	nop			; (mov r8, r8)
   1369c:	4b08      	ldr	r3, [pc, #32]	; (136c0 <system_gclk_gen_enable+0x48>)
   1369e:	4798      	blx	r3
   136a0:	1e03      	subs	r3, r0, #0
   136a2:	d1fb      	bne.n	1369c <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   136a4:	4b09      	ldr	r3, [pc, #36]	; (136cc <system_gclk_gen_enable+0x54>)
   136a6:	4a09      	ldr	r2, [pc, #36]	; (136cc <system_gclk_gen_enable+0x54>)
   136a8:	6852      	ldr	r2, [r2, #4]
   136aa:	2180      	movs	r1, #128	; 0x80
   136ac:	0249      	lsls	r1, r1, #9
   136ae:	430a      	orrs	r2, r1
   136b0:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   136b2:	4b07      	ldr	r3, [pc, #28]	; (136d0 <system_gclk_gen_enable+0x58>)
   136b4:	4798      	blx	r3
}
   136b6:	46c0      	nop			; (mov r8, r8)
   136b8:	46bd      	mov	sp, r7
   136ba:	b002      	add	sp, #8
   136bc:	bd80      	pop	{r7, pc}
   136be:	46c0      	nop			; (mov r8, r8)
   136c0:	00013505 	.word	0x00013505
   136c4:	000134dd 	.word	0x000134dd
   136c8:	40000c04 	.word	0x40000c04
   136cc:	40000c00 	.word	0x40000c00
   136d0:	000134f1 	.word	0x000134f1

000136d4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   136d4:	b580      	push	{r7, lr}
   136d6:	b086      	sub	sp, #24
   136d8:	af00      	add	r7, sp, #0
   136da:	0002      	movs	r2, r0
   136dc:	1dfb      	adds	r3, r7, #7
   136de:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   136e0:	46c0      	nop			; (mov r8, r8)
   136e2:	4b2a      	ldr	r3, [pc, #168]	; (1378c <system_gclk_gen_get_hz+0xb8>)
   136e4:	4798      	blx	r3
   136e6:	1e03      	subs	r3, r0, #0
   136e8:	d1fb      	bne.n	136e2 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   136ea:	4b29      	ldr	r3, [pc, #164]	; (13790 <system_gclk_gen_get_hz+0xbc>)
   136ec:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   136ee:	4a29      	ldr	r2, [pc, #164]	; (13794 <system_gclk_gen_get_hz+0xc0>)
   136f0:	1dfb      	adds	r3, r7, #7
   136f2:	781b      	ldrb	r3, [r3, #0]
   136f4:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   136f6:	46c0      	nop			; (mov r8, r8)
   136f8:	4b24      	ldr	r3, [pc, #144]	; (1378c <system_gclk_gen_get_hz+0xb8>)
   136fa:	4798      	blx	r3
   136fc:	1e03      	subs	r3, r0, #0
   136fe:	d1fb      	bne.n	136f8 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   13700:	4b25      	ldr	r3, [pc, #148]	; (13798 <system_gclk_gen_get_hz+0xc4>)
   13702:	685b      	ldr	r3, [r3, #4]
   13704:	04db      	lsls	r3, r3, #19
   13706:	0edb      	lsrs	r3, r3, #27
   13708:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   1370a:	0018      	movs	r0, r3
   1370c:	4b23      	ldr	r3, [pc, #140]	; (1379c <system_gclk_gen_get_hz+0xc8>)
   1370e:	4798      	blx	r3
   13710:	0003      	movs	r3, r0
   13712:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   13714:	4a1f      	ldr	r2, [pc, #124]	; (13794 <system_gclk_gen_get_hz+0xc0>)
   13716:	1dfb      	adds	r3, r7, #7
   13718:	781b      	ldrb	r3, [r3, #0]
   1371a:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   1371c:	4b1e      	ldr	r3, [pc, #120]	; (13798 <system_gclk_gen_get_hz+0xc4>)
   1371e:	685b      	ldr	r3, [r3, #4]
   13720:	02db      	lsls	r3, r3, #11
   13722:	0fdb      	lsrs	r3, r3, #31
   13724:	b2da      	uxtb	r2, r3
   13726:	2313      	movs	r3, #19
   13728:	18fb      	adds	r3, r7, r3
   1372a:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   1372c:	4a1c      	ldr	r2, [pc, #112]	; (137a0 <system_gclk_gen_get_hz+0xcc>)
   1372e:	1dfb      	adds	r3, r7, #7
   13730:	781b      	ldrb	r3, [r3, #0]
   13732:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   13734:	46c0      	nop			; (mov r8, r8)
   13736:	4b15      	ldr	r3, [pc, #84]	; (1378c <system_gclk_gen_get_hz+0xb8>)
   13738:	4798      	blx	r3
   1373a:	1e03      	subs	r3, r0, #0
   1373c:	d1fb      	bne.n	13736 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   1373e:	4b16      	ldr	r3, [pc, #88]	; (13798 <system_gclk_gen_get_hz+0xc4>)
   13740:	689b      	ldr	r3, [r3, #8]
   13742:	021b      	lsls	r3, r3, #8
   13744:	0c1b      	lsrs	r3, r3, #16
   13746:	b29b      	uxth	r3, r3
   13748:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   1374a:	4b16      	ldr	r3, [pc, #88]	; (137a4 <system_gclk_gen_get_hz+0xd0>)
   1374c:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   1374e:	2313      	movs	r3, #19
   13750:	18fb      	adds	r3, r7, r3
   13752:	781b      	ldrb	r3, [r3, #0]
   13754:	2b00      	cmp	r3, #0
   13756:	d109      	bne.n	1376c <system_gclk_gen_get_hz+0x98>
   13758:	68fb      	ldr	r3, [r7, #12]
   1375a:	2b01      	cmp	r3, #1
   1375c:	d906      	bls.n	1376c <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   1375e:	4b12      	ldr	r3, [pc, #72]	; (137a8 <system_gclk_gen_get_hz+0xd4>)
   13760:	68f9      	ldr	r1, [r7, #12]
   13762:	6978      	ldr	r0, [r7, #20]
   13764:	4798      	blx	r3
   13766:	0003      	movs	r3, r0
   13768:	617b      	str	r3, [r7, #20]
   1376a:	e00a      	b.n	13782 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   1376c:	2313      	movs	r3, #19
   1376e:	18fb      	adds	r3, r7, r3
   13770:	781b      	ldrb	r3, [r3, #0]
   13772:	2b00      	cmp	r3, #0
   13774:	d005      	beq.n	13782 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   13776:	68fb      	ldr	r3, [r7, #12]
   13778:	3301      	adds	r3, #1
   1377a:	697a      	ldr	r2, [r7, #20]
   1377c:	40da      	lsrs	r2, r3
   1377e:	0013      	movs	r3, r2
   13780:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   13782:	697b      	ldr	r3, [r7, #20]
}
   13784:	0018      	movs	r0, r3
   13786:	46bd      	mov	sp, r7
   13788:	b006      	add	sp, #24
   1378a:	bd80      	pop	{r7, pc}
   1378c:	00013505 	.word	0x00013505
   13790:	000134dd 	.word	0x000134dd
   13794:	40000c04 	.word	0x40000c04
   13798:	40000c00 	.word	0x40000c00
   1379c:	00012c91 	.word	0x00012c91
   137a0:	40000c08 	.word	0x40000c08
   137a4:	000134f1 	.word	0x000134f1
   137a8:	000152e1 	.word	0x000152e1

000137ac <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   137ac:	b580      	push	{r7, lr}
   137ae:	b084      	sub	sp, #16
   137b0:	af00      	add	r7, sp, #0
   137b2:	0002      	movs	r2, r0
   137b4:	6039      	str	r1, [r7, #0]
   137b6:	1dfb      	adds	r3, r7, #7
   137b8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   137ba:	1dfb      	adds	r3, r7, #7
   137bc:	781b      	ldrb	r3, [r3, #0]
   137be:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   137c0:	683b      	ldr	r3, [r7, #0]
   137c2:	781b      	ldrb	r3, [r3, #0]
   137c4:	021b      	lsls	r3, r3, #8
   137c6:	001a      	movs	r2, r3
   137c8:	68fb      	ldr	r3, [r7, #12]
   137ca:	4313      	orrs	r3, r2
   137cc:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   137ce:	1dfb      	adds	r3, r7, #7
   137d0:	781b      	ldrb	r3, [r3, #0]
   137d2:	0018      	movs	r0, r3
   137d4:	4b04      	ldr	r3, [pc, #16]	; (137e8 <system_gclk_chan_set_config+0x3c>)
   137d6:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   137d8:	4b04      	ldr	r3, [pc, #16]	; (137ec <system_gclk_chan_set_config+0x40>)
   137da:	68fa      	ldr	r2, [r7, #12]
   137dc:	b292      	uxth	r2, r2
   137de:	805a      	strh	r2, [r3, #2]
}
   137e0:	46c0      	nop			; (mov r8, r8)
   137e2:	46bd      	mov	sp, r7
   137e4:	b004      	add	sp, #16
   137e6:	bd80      	pop	{r7, pc}
   137e8:	00013839 	.word	0x00013839
   137ec:	40000c00 	.word	0x40000c00

000137f0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   137f0:	b580      	push	{r7, lr}
   137f2:	b082      	sub	sp, #8
   137f4:	af00      	add	r7, sp, #0
   137f6:	0002      	movs	r2, r0
   137f8:	1dfb      	adds	r3, r7, #7
   137fa:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   137fc:	4b0a      	ldr	r3, [pc, #40]	; (13828 <system_gclk_chan_enable+0x38>)
   137fe:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   13800:	4a0a      	ldr	r2, [pc, #40]	; (1382c <system_gclk_chan_enable+0x3c>)
   13802:	1dfb      	adds	r3, r7, #7
   13804:	781b      	ldrb	r3, [r3, #0]
   13806:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   13808:	4909      	ldr	r1, [pc, #36]	; (13830 <system_gclk_chan_enable+0x40>)
   1380a:	4b09      	ldr	r3, [pc, #36]	; (13830 <system_gclk_chan_enable+0x40>)
   1380c:	885b      	ldrh	r3, [r3, #2]
   1380e:	b29b      	uxth	r3, r3
   13810:	2280      	movs	r2, #128	; 0x80
   13812:	01d2      	lsls	r2, r2, #7
   13814:	4313      	orrs	r3, r2
   13816:	b29b      	uxth	r3, r3
   13818:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   1381a:	4b06      	ldr	r3, [pc, #24]	; (13834 <system_gclk_chan_enable+0x44>)
   1381c:	4798      	blx	r3
}
   1381e:	46c0      	nop			; (mov r8, r8)
   13820:	46bd      	mov	sp, r7
   13822:	b002      	add	sp, #8
   13824:	bd80      	pop	{r7, pc}
   13826:	46c0      	nop			; (mov r8, r8)
   13828:	000134dd 	.word	0x000134dd
   1382c:	40000c02 	.word	0x40000c02
   13830:	40000c00 	.word	0x40000c00
   13834:	000134f1 	.word	0x000134f1

00013838 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   13838:	b580      	push	{r7, lr}
   1383a:	b084      	sub	sp, #16
   1383c:	af00      	add	r7, sp, #0
   1383e:	0002      	movs	r2, r0
   13840:	1dfb      	adds	r3, r7, #7
   13842:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   13844:	4b1c      	ldr	r3, [pc, #112]	; (138b8 <system_gclk_chan_disable+0x80>)
   13846:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   13848:	4a1c      	ldr	r2, [pc, #112]	; (138bc <system_gclk_chan_disable+0x84>)
   1384a:	1dfb      	adds	r3, r7, #7
   1384c:	781b      	ldrb	r3, [r3, #0]
   1384e:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   13850:	4b1b      	ldr	r3, [pc, #108]	; (138c0 <system_gclk_chan_disable+0x88>)
   13852:	885b      	ldrh	r3, [r3, #2]
   13854:	051b      	lsls	r3, r3, #20
   13856:	0f1b      	lsrs	r3, r3, #28
   13858:	b2db      	uxtb	r3, r3
   1385a:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   1385c:	4a18      	ldr	r2, [pc, #96]	; (138c0 <system_gclk_chan_disable+0x88>)
   1385e:	8853      	ldrh	r3, [r2, #2]
   13860:	4918      	ldr	r1, [pc, #96]	; (138c4 <system_gclk_chan_disable+0x8c>)
   13862:	400b      	ands	r3, r1
   13864:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   13866:	4a16      	ldr	r2, [pc, #88]	; (138c0 <system_gclk_chan_disable+0x88>)
   13868:	4b15      	ldr	r3, [pc, #84]	; (138c0 <system_gclk_chan_disable+0x88>)
   1386a:	885b      	ldrh	r3, [r3, #2]
   1386c:	b29b      	uxth	r3, r3
   1386e:	4916      	ldr	r1, [pc, #88]	; (138c8 <system_gclk_chan_disable+0x90>)
   13870:	400b      	ands	r3, r1
   13872:	b29b      	uxth	r3, r3
   13874:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   13876:	46c0      	nop			; (mov r8, r8)
   13878:	4b11      	ldr	r3, [pc, #68]	; (138c0 <system_gclk_chan_disable+0x88>)
   1387a:	885b      	ldrh	r3, [r3, #2]
   1387c:	b29b      	uxth	r3, r3
   1387e:	001a      	movs	r2, r3
   13880:	2380      	movs	r3, #128	; 0x80
   13882:	01db      	lsls	r3, r3, #7
   13884:	4013      	ands	r3, r2
   13886:	d1f7      	bne.n	13878 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   13888:	4a0d      	ldr	r2, [pc, #52]	; (138c0 <system_gclk_chan_disable+0x88>)
   1388a:	68fb      	ldr	r3, [r7, #12]
   1388c:	b2db      	uxtb	r3, r3
   1388e:	1c19      	adds	r1, r3, #0
   13890:	230f      	movs	r3, #15
   13892:	400b      	ands	r3, r1
   13894:	b2d9      	uxtb	r1, r3
   13896:	8853      	ldrh	r3, [r2, #2]
   13898:	1c08      	adds	r0, r1, #0
   1389a:	210f      	movs	r1, #15
   1389c:	4001      	ands	r1, r0
   1389e:	0208      	lsls	r0, r1, #8
   138a0:	4908      	ldr	r1, [pc, #32]	; (138c4 <system_gclk_chan_disable+0x8c>)
   138a2:	400b      	ands	r3, r1
   138a4:	1c19      	adds	r1, r3, #0
   138a6:	1c03      	adds	r3, r0, #0
   138a8:	430b      	orrs	r3, r1
   138aa:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   138ac:	4b07      	ldr	r3, [pc, #28]	; (138cc <system_gclk_chan_disable+0x94>)
   138ae:	4798      	blx	r3
}
   138b0:	46c0      	nop			; (mov r8, r8)
   138b2:	46bd      	mov	sp, r7
   138b4:	b004      	add	sp, #16
   138b6:	bd80      	pop	{r7, pc}
   138b8:	000134dd 	.word	0x000134dd
   138bc:	40000c02 	.word	0x40000c02
   138c0:	40000c00 	.word	0x40000c00
   138c4:	fffff0ff 	.word	0xfffff0ff
   138c8:	ffffbfff 	.word	0xffffbfff
   138cc:	000134f1 	.word	0x000134f1

000138d0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   138d0:	b580      	push	{r7, lr}
   138d2:	b084      	sub	sp, #16
   138d4:	af00      	add	r7, sp, #0
   138d6:	0002      	movs	r2, r0
   138d8:	1dfb      	adds	r3, r7, #7
   138da:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   138dc:	4b0d      	ldr	r3, [pc, #52]	; (13914 <system_gclk_chan_get_hz+0x44>)
   138de:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   138e0:	4a0d      	ldr	r2, [pc, #52]	; (13918 <system_gclk_chan_get_hz+0x48>)
   138e2:	1dfb      	adds	r3, r7, #7
   138e4:	781b      	ldrb	r3, [r3, #0]
   138e6:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   138e8:	4b0c      	ldr	r3, [pc, #48]	; (1391c <system_gclk_chan_get_hz+0x4c>)
   138ea:	885b      	ldrh	r3, [r3, #2]
   138ec:	051b      	lsls	r3, r3, #20
   138ee:	0f1b      	lsrs	r3, r3, #28
   138f0:	b2da      	uxtb	r2, r3
   138f2:	230f      	movs	r3, #15
   138f4:	18fb      	adds	r3, r7, r3
   138f6:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   138f8:	4b09      	ldr	r3, [pc, #36]	; (13920 <system_gclk_chan_get_hz+0x50>)
   138fa:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   138fc:	230f      	movs	r3, #15
   138fe:	18fb      	adds	r3, r7, r3
   13900:	781b      	ldrb	r3, [r3, #0]
   13902:	0018      	movs	r0, r3
   13904:	4b07      	ldr	r3, [pc, #28]	; (13924 <system_gclk_chan_get_hz+0x54>)
   13906:	4798      	blx	r3
   13908:	0003      	movs	r3, r0
}
   1390a:	0018      	movs	r0, r3
   1390c:	46bd      	mov	sp, r7
   1390e:	b004      	add	sp, #16
   13910:	bd80      	pop	{r7, pc}
   13912:	46c0      	nop			; (mov r8, r8)
   13914:	000134dd 	.word	0x000134dd
   13918:	40000c02 	.word	0x40000c02
   1391c:	40000c00 	.word	0x40000c00
   13920:	000134f1 	.word	0x000134f1
   13924:	000136d5 	.word	0x000136d5

00013928 <system_pinmux_get_group_from_gpio_pin>:
{
   13928:	b580      	push	{r7, lr}
   1392a:	b084      	sub	sp, #16
   1392c:	af00      	add	r7, sp, #0
   1392e:	0002      	movs	r2, r0
   13930:	1dfb      	adds	r3, r7, #7
   13932:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   13934:	230f      	movs	r3, #15
   13936:	18fb      	adds	r3, r7, r3
   13938:	1dfa      	adds	r2, r7, #7
   1393a:	7812      	ldrb	r2, [r2, #0]
   1393c:	09d2      	lsrs	r2, r2, #7
   1393e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   13940:	230e      	movs	r3, #14
   13942:	18fb      	adds	r3, r7, r3
   13944:	1dfa      	adds	r2, r7, #7
   13946:	7812      	ldrb	r2, [r2, #0]
   13948:	0952      	lsrs	r2, r2, #5
   1394a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1394c:	4b0d      	ldr	r3, [pc, #52]	; (13984 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1394e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   13950:	230f      	movs	r3, #15
   13952:	18fb      	adds	r3, r7, r3
   13954:	781b      	ldrb	r3, [r3, #0]
   13956:	2b00      	cmp	r3, #0
   13958:	d10f      	bne.n	1397a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1395a:	230f      	movs	r3, #15
   1395c:	18fb      	adds	r3, r7, r3
   1395e:	781b      	ldrb	r3, [r3, #0]
   13960:	009b      	lsls	r3, r3, #2
   13962:	2210      	movs	r2, #16
   13964:	4694      	mov	ip, r2
   13966:	44bc      	add	ip, r7
   13968:	4463      	add	r3, ip
   1396a:	3b08      	subs	r3, #8
   1396c:	681a      	ldr	r2, [r3, #0]
   1396e:	230e      	movs	r3, #14
   13970:	18fb      	adds	r3, r7, r3
   13972:	781b      	ldrb	r3, [r3, #0]
   13974:	01db      	lsls	r3, r3, #7
   13976:	18d3      	adds	r3, r2, r3
   13978:	e000      	b.n	1397c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1397a:	2300      	movs	r3, #0
}
   1397c:	0018      	movs	r0, r3
   1397e:	46bd      	mov	sp, r7
   13980:	b004      	add	sp, #16
   13982:	bd80      	pop	{r7, pc}
   13984:	41004400 	.word	0x41004400

00013988 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   13988:	b580      	push	{r7, lr}
   1398a:	b088      	sub	sp, #32
   1398c:	af00      	add	r7, sp, #0
   1398e:	60f8      	str	r0, [r7, #12]
   13990:	60b9      	str	r1, [r7, #8]
   13992:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   13994:	2300      	movs	r3, #0
   13996:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   13998:	687b      	ldr	r3, [r7, #4]
   1399a:	78db      	ldrb	r3, [r3, #3]
   1399c:	2201      	movs	r2, #1
   1399e:	4053      	eors	r3, r2
   139a0:	b2db      	uxtb	r3, r3
   139a2:	2b00      	cmp	r3, #0
   139a4:	d035      	beq.n	13a12 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   139a6:	687b      	ldr	r3, [r7, #4]
   139a8:	781b      	ldrb	r3, [r3, #0]
   139aa:	2b80      	cmp	r3, #128	; 0x80
   139ac:	d00b      	beq.n	139c6 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   139ae:	69fb      	ldr	r3, [r7, #28]
   139b0:	2280      	movs	r2, #128	; 0x80
   139b2:	0252      	lsls	r2, r2, #9
   139b4:	4313      	orrs	r3, r2
   139b6:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   139b8:	687b      	ldr	r3, [r7, #4]
   139ba:	781b      	ldrb	r3, [r3, #0]
   139bc:	061b      	lsls	r3, r3, #24
   139be:	001a      	movs	r2, r3
   139c0:	69fb      	ldr	r3, [r7, #28]
   139c2:	4313      	orrs	r3, r2
   139c4:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   139c6:	687b      	ldr	r3, [r7, #4]
   139c8:	785b      	ldrb	r3, [r3, #1]
   139ca:	2b00      	cmp	r3, #0
   139cc:	d003      	beq.n	139d6 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   139ce:	687b      	ldr	r3, [r7, #4]
   139d0:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   139d2:	2b02      	cmp	r3, #2
   139d4:	d110      	bne.n	139f8 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   139d6:	69fb      	ldr	r3, [r7, #28]
   139d8:	2280      	movs	r2, #128	; 0x80
   139da:	0292      	lsls	r2, r2, #10
   139dc:	4313      	orrs	r3, r2
   139de:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   139e0:	687b      	ldr	r3, [r7, #4]
   139e2:	789b      	ldrb	r3, [r3, #2]
   139e4:	2b00      	cmp	r3, #0
   139e6:	d004      	beq.n	139f2 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   139e8:	69fb      	ldr	r3, [r7, #28]
   139ea:	2280      	movs	r2, #128	; 0x80
   139ec:	02d2      	lsls	r2, r2, #11
   139ee:	4313      	orrs	r3, r2
   139f0:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   139f2:	68fb      	ldr	r3, [r7, #12]
   139f4:	68ba      	ldr	r2, [r7, #8]
   139f6:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   139f8:	687b      	ldr	r3, [r7, #4]
   139fa:	785b      	ldrb	r3, [r3, #1]
   139fc:	2b01      	cmp	r3, #1
   139fe:	d003      	beq.n	13a08 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   13a00:	687b      	ldr	r3, [r7, #4]
   13a02:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   13a04:	2b02      	cmp	r3, #2
   13a06:	d107      	bne.n	13a18 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   13a08:	69fb      	ldr	r3, [r7, #28]
   13a0a:	4a22      	ldr	r2, [pc, #136]	; (13a94 <_system_pinmux_config+0x10c>)
   13a0c:	4013      	ands	r3, r2
   13a0e:	61fb      	str	r3, [r7, #28]
   13a10:	e002      	b.n	13a18 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   13a12:	68fb      	ldr	r3, [r7, #12]
   13a14:	68ba      	ldr	r2, [r7, #8]
   13a16:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   13a18:	68bb      	ldr	r3, [r7, #8]
   13a1a:	041b      	lsls	r3, r3, #16
   13a1c:	0c1b      	lsrs	r3, r3, #16
   13a1e:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   13a20:	68bb      	ldr	r3, [r7, #8]
   13a22:	0c1b      	lsrs	r3, r3, #16
   13a24:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   13a26:	69ba      	ldr	r2, [r7, #24]
   13a28:	69fb      	ldr	r3, [r7, #28]
   13a2a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   13a2c:	22a0      	movs	r2, #160	; 0xa0
   13a2e:	05d2      	lsls	r2, r2, #23
   13a30:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   13a32:	68fb      	ldr	r3, [r7, #12]
   13a34:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   13a36:	697a      	ldr	r2, [r7, #20]
   13a38:	69fb      	ldr	r3, [r7, #28]
   13a3a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   13a3c:	22d0      	movs	r2, #208	; 0xd0
   13a3e:	0612      	lsls	r2, r2, #24
   13a40:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   13a42:	68fb      	ldr	r3, [r7, #12]
   13a44:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   13a46:	687b      	ldr	r3, [r7, #4]
   13a48:	78db      	ldrb	r3, [r3, #3]
   13a4a:	2201      	movs	r2, #1
   13a4c:	4053      	eors	r3, r2
   13a4e:	b2db      	uxtb	r3, r3
   13a50:	2b00      	cmp	r3, #0
   13a52:	d01a      	beq.n	13a8a <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   13a54:	69fa      	ldr	r2, [r7, #28]
   13a56:	2380      	movs	r3, #128	; 0x80
   13a58:	02db      	lsls	r3, r3, #11
   13a5a:	4013      	ands	r3, r2
   13a5c:	d00a      	beq.n	13a74 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   13a5e:	687b      	ldr	r3, [r7, #4]
   13a60:	789b      	ldrb	r3, [r3, #2]
   13a62:	2b01      	cmp	r3, #1
   13a64:	d103      	bne.n	13a6e <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   13a66:	68fb      	ldr	r3, [r7, #12]
   13a68:	68ba      	ldr	r2, [r7, #8]
   13a6a:	619a      	str	r2, [r3, #24]
   13a6c:	e002      	b.n	13a74 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   13a6e:	68fb      	ldr	r3, [r7, #12]
   13a70:	68ba      	ldr	r2, [r7, #8]
   13a72:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   13a74:	687b      	ldr	r3, [r7, #4]
   13a76:	785b      	ldrb	r3, [r3, #1]
   13a78:	2b01      	cmp	r3, #1
   13a7a:	d003      	beq.n	13a84 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   13a7c:	687b      	ldr	r3, [r7, #4]
   13a7e:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   13a80:	2b02      	cmp	r3, #2
   13a82:	d102      	bne.n	13a8a <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   13a84:	68fb      	ldr	r3, [r7, #12]
   13a86:	68ba      	ldr	r2, [r7, #8]
   13a88:	609a      	str	r2, [r3, #8]
		}
	}
}
   13a8a:	46c0      	nop			; (mov r8, r8)
   13a8c:	46bd      	mov	sp, r7
   13a8e:	b008      	add	sp, #32
   13a90:	bd80      	pop	{r7, pc}
   13a92:	46c0      	nop			; (mov r8, r8)
   13a94:	fffbffff 	.word	0xfffbffff

00013a98 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   13a98:	b580      	push	{r7, lr}
   13a9a:	b084      	sub	sp, #16
   13a9c:	af00      	add	r7, sp, #0
   13a9e:	0002      	movs	r2, r0
   13aa0:	6039      	str	r1, [r7, #0]
   13aa2:	1dfb      	adds	r3, r7, #7
   13aa4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   13aa6:	1dfb      	adds	r3, r7, #7
   13aa8:	781b      	ldrb	r3, [r3, #0]
   13aaa:	0018      	movs	r0, r3
   13aac:	4b0a      	ldr	r3, [pc, #40]	; (13ad8 <system_pinmux_pin_set_config+0x40>)
   13aae:	4798      	blx	r3
   13ab0:	0003      	movs	r3, r0
   13ab2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   13ab4:	1dfb      	adds	r3, r7, #7
   13ab6:	781b      	ldrb	r3, [r3, #0]
   13ab8:	221f      	movs	r2, #31
   13aba:	4013      	ands	r3, r2
   13abc:	2201      	movs	r2, #1
   13abe:	409a      	lsls	r2, r3
   13ac0:	0013      	movs	r3, r2
   13ac2:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   13ac4:	683a      	ldr	r2, [r7, #0]
   13ac6:	68b9      	ldr	r1, [r7, #8]
   13ac8:	68fb      	ldr	r3, [r7, #12]
   13aca:	0018      	movs	r0, r3
   13acc:	4b03      	ldr	r3, [pc, #12]	; (13adc <system_pinmux_pin_set_config+0x44>)
   13ace:	4798      	blx	r3
}
   13ad0:	46c0      	nop			; (mov r8, r8)
   13ad2:	46bd      	mov	sp, r7
   13ad4:	b004      	add	sp, #16
   13ad6:	bd80      	pop	{r7, pc}
   13ad8:	00013929 	.word	0x00013929
   13adc:	00013989 	.word	0x00013989

00013ae0 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   13ae0:	b580      	push	{r7, lr}
   13ae2:	af00      	add	r7, sp, #0
	return;
   13ae4:	46c0      	nop			; (mov r8, r8)
}
   13ae6:	46bd      	mov	sp, r7
   13ae8:	bd80      	pop	{r7, pc}
	...

00013aec <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   13aec:	b580      	push	{r7, lr}
   13aee:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   13af0:	4b06      	ldr	r3, [pc, #24]	; (13b0c <system_init+0x20>)
   13af2:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   13af4:	4b06      	ldr	r3, [pc, #24]	; (13b10 <system_init+0x24>)
   13af6:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   13af8:	4b06      	ldr	r3, [pc, #24]	; (13b14 <system_init+0x28>)
   13afa:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   13afc:	4b06      	ldr	r3, [pc, #24]	; (13b18 <system_init+0x2c>)
   13afe:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   13b00:	4b06      	ldr	r3, [pc, #24]	; (13b1c <system_init+0x30>)
   13b02:	4798      	blx	r3
}
   13b04:	46c0      	nop			; (mov r8, r8)
   13b06:	46bd      	mov	sp, r7
   13b08:	bd80      	pop	{r7, pc}
   13b0a:	46c0      	nop			; (mov r8, r8)
   13b0c:	00013121 	.word	0x00013121
   13b10:	000129e9 	.word	0x000129e9
   13b14:	000114b1 	.word	0x000114b1
   13b18:	0000cd71 	.word	0x0000cd71
   13b1c:	00013ae1 	.word	0x00013ae1

00013b20 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   13b20:	b580      	push	{r7, lr}
   13b22:	b082      	sub	sp, #8
   13b24:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   13b26:	4b2f      	ldr	r3, [pc, #188]	; (13be4 <Reset_Handler+0xc4>)
   13b28:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   13b2a:	4b2f      	ldr	r3, [pc, #188]	; (13be8 <Reset_Handler+0xc8>)
   13b2c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   13b2e:	687a      	ldr	r2, [r7, #4]
   13b30:	683b      	ldr	r3, [r7, #0]
   13b32:	429a      	cmp	r2, r3
   13b34:	d00c      	beq.n	13b50 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   13b36:	e007      	b.n	13b48 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   13b38:	683b      	ldr	r3, [r7, #0]
   13b3a:	1d1a      	adds	r2, r3, #4
   13b3c:	603a      	str	r2, [r7, #0]
   13b3e:	687a      	ldr	r2, [r7, #4]
   13b40:	1d11      	adds	r1, r2, #4
   13b42:	6079      	str	r1, [r7, #4]
   13b44:	6812      	ldr	r2, [r2, #0]
   13b46:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   13b48:	683a      	ldr	r2, [r7, #0]
   13b4a:	4b28      	ldr	r3, [pc, #160]	; (13bec <Reset_Handler+0xcc>)
   13b4c:	429a      	cmp	r2, r3
   13b4e:	d3f3      	bcc.n	13b38 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   13b50:	4b27      	ldr	r3, [pc, #156]	; (13bf0 <Reset_Handler+0xd0>)
   13b52:	603b      	str	r3, [r7, #0]
   13b54:	e004      	b.n	13b60 <Reset_Handler+0x40>
                *pDest++ = 0;
   13b56:	683b      	ldr	r3, [r7, #0]
   13b58:	1d1a      	adds	r2, r3, #4
   13b5a:	603a      	str	r2, [r7, #0]
   13b5c:	2200      	movs	r2, #0
   13b5e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   13b60:	683a      	ldr	r2, [r7, #0]
   13b62:	4b24      	ldr	r3, [pc, #144]	; (13bf4 <Reset_Handler+0xd4>)
   13b64:	429a      	cmp	r2, r3
   13b66:	d3f6      	bcc.n	13b56 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   13b68:	4b23      	ldr	r3, [pc, #140]	; (13bf8 <Reset_Handler+0xd8>)
   13b6a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   13b6c:	4b23      	ldr	r3, [pc, #140]	; (13bfc <Reset_Handler+0xdc>)
   13b6e:	687a      	ldr	r2, [r7, #4]
   13b70:	21ff      	movs	r1, #255	; 0xff
   13b72:	438a      	bics	r2, r1
   13b74:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   13b76:	4a22      	ldr	r2, [pc, #136]	; (13c00 <Reset_Handler+0xe0>)
   13b78:	2390      	movs	r3, #144	; 0x90
   13b7a:	005b      	lsls	r3, r3, #1
   13b7c:	2102      	movs	r1, #2
   13b7e:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   13b80:	4a20      	ldr	r2, [pc, #128]	; (13c04 <Reset_Handler+0xe4>)
   13b82:	78d3      	ldrb	r3, [r2, #3]
   13b84:	2103      	movs	r1, #3
   13b86:	438b      	bics	r3, r1
   13b88:	1c19      	adds	r1, r3, #0
   13b8a:	2302      	movs	r3, #2
   13b8c:	430b      	orrs	r3, r1
   13b8e:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   13b90:	4a1c      	ldr	r2, [pc, #112]	; (13c04 <Reset_Handler+0xe4>)
   13b92:	78d3      	ldrb	r3, [r2, #3]
   13b94:	210c      	movs	r1, #12
   13b96:	438b      	bics	r3, r1
   13b98:	1c19      	adds	r1, r3, #0
   13b9a:	2308      	movs	r3, #8
   13b9c:	430b      	orrs	r3, r1
   13b9e:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   13ba0:	4a19      	ldr	r2, [pc, #100]	; (13c08 <Reset_Handler+0xe8>)
   13ba2:	7b93      	ldrb	r3, [r2, #14]
   13ba4:	2130      	movs	r1, #48	; 0x30
   13ba6:	438b      	bics	r3, r1
   13ba8:	1c19      	adds	r1, r3, #0
   13baa:	2320      	movs	r3, #32
   13bac:	430b      	orrs	r3, r1
   13bae:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   13bb0:	4a15      	ldr	r2, [pc, #84]	; (13c08 <Reset_Handler+0xe8>)
   13bb2:	7b93      	ldrb	r3, [r2, #14]
   13bb4:	210c      	movs	r1, #12
   13bb6:	438b      	bics	r3, r1
   13bb8:	1c19      	adds	r1, r3, #0
   13bba:	2308      	movs	r3, #8
   13bbc:	430b      	orrs	r3, r1
   13bbe:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   13bc0:	4a11      	ldr	r2, [pc, #68]	; (13c08 <Reset_Handler+0xe8>)
   13bc2:	7b93      	ldrb	r3, [r2, #14]
   13bc4:	2103      	movs	r1, #3
   13bc6:	438b      	bics	r3, r1
   13bc8:	1c19      	adds	r1, r3, #0
   13bca:	2302      	movs	r3, #2
   13bcc:	430b      	orrs	r3, r1
   13bce:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   13bd0:	4a0e      	ldr	r2, [pc, #56]	; (13c0c <Reset_Handler+0xec>)
   13bd2:	6853      	ldr	r3, [r2, #4]
   13bd4:	2180      	movs	r1, #128	; 0x80
   13bd6:	430b      	orrs	r3, r1
   13bd8:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   13bda:	4b0d      	ldr	r3, [pc, #52]	; (13c10 <Reset_Handler+0xf0>)
   13bdc:	4798      	blx	r3

        /* Branch to main function */
        main();
   13bde:	4b0d      	ldr	r3, [pc, #52]	; (13c14 <Reset_Handler+0xf4>)
   13be0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   13be2:	e7fe      	b.n	13be2 <Reset_Handler+0xc2>
   13be4:	00019bcc 	.word	0x00019bcc
   13be8:	20000000 	.word	0x20000000
   13bec:	200001fc 	.word	0x200001fc
   13bf0:	20000200 	.word	0x20000200
   13bf4:	2000092c 	.word	0x2000092c
   13bf8:	00000000 	.word	0x00000000
   13bfc:	e000ed00 	.word	0xe000ed00
   13c00:	41007000 	.word	0x41007000
   13c04:	41005000 	.word	0x41005000
   13c08:	41004800 	.word	0x41004800
   13c0c:	41004000 	.word	0x41004000
   13c10:	00017a69 	.word	0x00017a69
   13c14:	00013e49 	.word	0x00013e49

00013c18 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   13c18:	b580      	push	{r7, lr}
   13c1a:	af00      	add	r7, sp, #0
        while (1) {
   13c1c:	e7fe      	b.n	13c1c <Dummy_Handler+0x4>
	...

00013c20 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   13c20:	b580      	push	{r7, lr}
   13c22:	b084      	sub	sp, #16
   13c24:	af00      	add	r7, sp, #0
   13c26:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   13c28:	4b0a      	ldr	r3, [pc, #40]	; (13c54 <_sbrk+0x34>)
   13c2a:	681b      	ldr	r3, [r3, #0]
   13c2c:	2b00      	cmp	r3, #0
   13c2e:	d102      	bne.n	13c36 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   13c30:	4b08      	ldr	r3, [pc, #32]	; (13c54 <_sbrk+0x34>)
   13c32:	4a09      	ldr	r2, [pc, #36]	; (13c58 <_sbrk+0x38>)
   13c34:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   13c36:	4b07      	ldr	r3, [pc, #28]	; (13c54 <_sbrk+0x34>)
   13c38:	681b      	ldr	r3, [r3, #0]
   13c3a:	60fb      	str	r3, [r7, #12]

	heap += incr;
   13c3c:	4b05      	ldr	r3, [pc, #20]	; (13c54 <_sbrk+0x34>)
   13c3e:	681a      	ldr	r2, [r3, #0]
   13c40:	687b      	ldr	r3, [r7, #4]
   13c42:	18d2      	adds	r2, r2, r3
   13c44:	4b03      	ldr	r3, [pc, #12]	; (13c54 <_sbrk+0x34>)
   13c46:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   13c48:	68fb      	ldr	r3, [r7, #12]
}
   13c4a:	0018      	movs	r0, r3
   13c4c:	46bd      	mov	sp, r7
   13c4e:	b004      	add	sp, #16
   13c50:	bd80      	pop	{r7, pc}
   13c52:	46c0      	nop			; (mov r8, r8)
   13c54:	200004f8 	.word	0x200004f8
   13c58:	20002930 	.word	0x20002930

00013c5c <system_apb_clock_clear_mask>:
 * \retval STATUS_OK               The clock mask was changed successfully
 */
static inline enum status_code system_apb_clock_clear_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   13c5c:	b580      	push	{r7, lr}
   13c5e:	b082      	sub	sp, #8
   13c60:	af00      	add	r7, sp, #0
   13c62:	0002      	movs	r2, r0
   13c64:	6039      	str	r1, [r7, #0]
   13c66:	1dfb      	adds	r3, r7, #7
   13c68:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   13c6a:	1dfb      	adds	r3, r7, #7
   13c6c:	781b      	ldrb	r3, [r3, #0]
   13c6e:	2b01      	cmp	r3, #1
   13c70:	d00b      	beq.n	13c8a <system_apb_clock_clear_mask+0x2e>
   13c72:	2b02      	cmp	r3, #2
   13c74:	d011      	beq.n	13c9a <system_apb_clock_clear_mask+0x3e>
   13c76:	2b00      	cmp	r3, #0
   13c78:	d117      	bne.n	13caa <system_apb_clock_clear_mask+0x4e>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg &= ~mask;
   13c7a:	4b0f      	ldr	r3, [pc, #60]	; (13cb8 <system_apb_clock_clear_mask+0x5c>)
   13c7c:	4a0e      	ldr	r2, [pc, #56]	; (13cb8 <system_apb_clock_clear_mask+0x5c>)
   13c7e:	6992      	ldr	r2, [r2, #24]
   13c80:	6839      	ldr	r1, [r7, #0]
   13c82:	43c9      	mvns	r1, r1
   13c84:	400a      	ands	r2, r1
   13c86:	619a      	str	r2, [r3, #24]
			break;
   13c88:	e011      	b.n	13cae <system_apb_clock_clear_mask+0x52>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg &= ~mask;
   13c8a:	4b0b      	ldr	r3, [pc, #44]	; (13cb8 <system_apb_clock_clear_mask+0x5c>)
   13c8c:	4a0a      	ldr	r2, [pc, #40]	; (13cb8 <system_apb_clock_clear_mask+0x5c>)
   13c8e:	69d2      	ldr	r2, [r2, #28]
   13c90:	6839      	ldr	r1, [r7, #0]
   13c92:	43c9      	mvns	r1, r1
   13c94:	400a      	ands	r2, r1
   13c96:	61da      	str	r2, [r3, #28]
			break;
   13c98:	e009      	b.n	13cae <system_apb_clock_clear_mask+0x52>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg &= ~mask;
   13c9a:	4b07      	ldr	r3, [pc, #28]	; (13cb8 <system_apb_clock_clear_mask+0x5c>)
   13c9c:	4a06      	ldr	r2, [pc, #24]	; (13cb8 <system_apb_clock_clear_mask+0x5c>)
   13c9e:	6a12      	ldr	r2, [r2, #32]
   13ca0:	6839      	ldr	r1, [r7, #0]
   13ca2:	43c9      	mvns	r1, r1
   13ca4:	400a      	ands	r2, r1
   13ca6:	621a      	str	r2, [r3, #32]
			break;
   13ca8:	e001      	b.n	13cae <system_apb_clock_clear_mask+0x52>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   13caa:	2317      	movs	r3, #23
   13cac:	e000      	b.n	13cb0 <system_apb_clock_clear_mask+0x54>
	}

	return STATUS_OK;
   13cae:	2300      	movs	r3, #0
}
   13cb0:	0018      	movs	r0, r3
   13cb2:	46bd      	mov	sp, r7
   13cb4:	b002      	add	sp, #8
   13cb6:	bd80      	pop	{r7, pc}
   13cb8:	40000400 	.word	0x40000400

00013cbc <system_interrupt_enable_global>:
{
   13cbc:	b580      	push	{r7, lr}
   13cbe:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   13cc0:	4b04      	ldr	r3, [pc, #16]	; (13cd4 <system_interrupt_enable_global+0x18>)
   13cc2:	2201      	movs	r2, #1
   13cc4:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   13cc6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   13cca:	b662      	cpsie	i
}
   13ccc:	46c0      	nop			; (mov r8, r8)
   13cce:	46bd      	mov	sp, r7
   13cd0:	bd80      	pop	{r7, pc}
   13cd2:	46c0      	nop			; (mov r8, r8)
   13cd4:	20000028 	.word	0x20000028

00013cd8 <system_pinmux_get_group_from_gpio_pin>:
{
   13cd8:	b580      	push	{r7, lr}
   13cda:	b084      	sub	sp, #16
   13cdc:	af00      	add	r7, sp, #0
   13cde:	0002      	movs	r2, r0
   13ce0:	1dfb      	adds	r3, r7, #7
   13ce2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   13ce4:	230f      	movs	r3, #15
   13ce6:	18fb      	adds	r3, r7, r3
   13ce8:	1dfa      	adds	r2, r7, #7
   13cea:	7812      	ldrb	r2, [r2, #0]
   13cec:	09d2      	lsrs	r2, r2, #7
   13cee:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   13cf0:	230e      	movs	r3, #14
   13cf2:	18fb      	adds	r3, r7, r3
   13cf4:	1dfa      	adds	r2, r7, #7
   13cf6:	7812      	ldrb	r2, [r2, #0]
   13cf8:	0952      	lsrs	r2, r2, #5
   13cfa:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   13cfc:	4b0d      	ldr	r3, [pc, #52]	; (13d34 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   13cfe:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   13d00:	230f      	movs	r3, #15
   13d02:	18fb      	adds	r3, r7, r3
   13d04:	781b      	ldrb	r3, [r3, #0]
   13d06:	2b00      	cmp	r3, #0
   13d08:	d10f      	bne.n	13d2a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   13d0a:	230f      	movs	r3, #15
   13d0c:	18fb      	adds	r3, r7, r3
   13d0e:	781b      	ldrb	r3, [r3, #0]
   13d10:	009b      	lsls	r3, r3, #2
   13d12:	2210      	movs	r2, #16
   13d14:	4694      	mov	ip, r2
   13d16:	44bc      	add	ip, r7
   13d18:	4463      	add	r3, ip
   13d1a:	3b08      	subs	r3, #8
   13d1c:	681a      	ldr	r2, [r3, #0]
   13d1e:	230e      	movs	r3, #14
   13d20:	18fb      	adds	r3, r7, r3
   13d22:	781b      	ldrb	r3, [r3, #0]
   13d24:	01db      	lsls	r3, r3, #7
   13d26:	18d3      	adds	r3, r2, r3
   13d28:	e000      	b.n	13d2c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   13d2a:	2300      	movs	r3, #0
}
   13d2c:	0018      	movs	r0, r3
   13d2e:	46bd      	mov	sp, r7
   13d30:	b004      	add	sp, #16
   13d32:	bd80      	pop	{r7, pc}
   13d34:	41004400 	.word	0x41004400

00013d38 <system_set_sleepmode>:
 * \retval STATUS_ERR_INVALID_ARG  The requested sleep mode was invalid or not
 *                                 available
 */
static inline enum status_code system_set_sleepmode(
	const enum system_sleepmode sleep_mode)
{
   13d38:	b580      	push	{r7, lr}
   13d3a:	b084      	sub	sp, #16
   13d3c:	af00      	add	r7, sp, #0
   13d3e:	0002      	movs	r2, r0
   13d40:	1dfb      	adds	r3, r7, #7
   13d42:	701a      	strb	r2, [r3, #0]

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
   13d44:	4b1a      	ldr	r3, [pc, #104]	; (13db0 <system_set_sleepmode+0x78>)
   13d46:	699b      	ldr	r3, [r3, #24]
   13d48:	60fb      	str	r3, [r7, #12]

	rev &= DSU_DID_REVISION_Msk;
   13d4a:	68fa      	ldr	r2, [r7, #12]
   13d4c:	23f0      	movs	r3, #240	; 0xf0
   13d4e:	011b      	lsls	r3, r3, #4
   13d50:	4013      	ands	r3, r2
   13d52:	60fb      	str	r3, [r7, #12]
	rev = rev >> DSU_DID_REVISION_Pos;
   13d54:	68fb      	ldr	r3, [r7, #12]
   13d56:	0a1b      	lsrs	r3, r3, #8
   13d58:	60fb      	str	r3, [r7, #12]
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
	}
#endif

#if (SAMD21 || SAMR21)
	if (rev < _SYSTEM_MCU_REVISION_D) {
   13d5a:	68fb      	ldr	r3, [r7, #12]
   13d5c:	2b02      	cmp	r3, #2
   13d5e:	d805      	bhi.n	13d6c <system_set_sleepmode+0x34>
		/* Errata 13140: Make sure that the Flash does not power all the way down
		 * when in sleep mode. */
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
   13d60:	4a14      	ldr	r2, [pc, #80]	; (13db4 <system_set_sleepmode+0x7c>)
   13d62:	6853      	ldr	r3, [r2, #4]
   13d64:	21c0      	movs	r1, #192	; 0xc0
   13d66:	0089      	lsls	r1, r1, #2
   13d68:	430b      	orrs	r3, r1
   13d6a:	6053      	str	r3, [r2, #4]
	}
#endif

#endif

	switch (sleep_mode) {
   13d6c:	1dfb      	adds	r3, r7, #7
   13d6e:	781b      	ldrb	r3, [r3, #0]
   13d70:	2b00      	cmp	r3, #0
   13d72:	db16      	blt.n	13da2 <system_set_sleepmode+0x6a>
   13d74:	2b02      	cmp	r3, #2
   13d76:	dd02      	ble.n	13d7e <system_set_sleepmode+0x46>
   13d78:	2b03      	cmp	r3, #3
   13d7a:	d00b      	beq.n	13d94 <system_set_sleepmode+0x5c>
   13d7c:	e011      	b.n	13da2 <system_set_sleepmode+0x6a>
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
   13d7e:	4b0e      	ldr	r3, [pc, #56]	; (13db8 <system_set_sleepmode+0x80>)
   13d80:	4a0d      	ldr	r2, [pc, #52]	; (13db8 <system_set_sleepmode+0x80>)
   13d82:	6912      	ldr	r2, [r2, #16]
   13d84:	2104      	movs	r1, #4
   13d86:	438a      	bics	r2, r1
   13d88:	611a      	str	r2, [r3, #16]
			PM->SLEEP.reg = sleep_mode;
   13d8a:	4a0c      	ldr	r2, [pc, #48]	; (13dbc <system_set_sleepmode+0x84>)
   13d8c:	1dfb      	adds	r3, r7, #7
   13d8e:	781b      	ldrb	r3, [r3, #0]
   13d90:	7053      	strb	r3, [r2, #1]
			break;
   13d92:	e008      	b.n	13da6 <system_set_sleepmode+0x6e>

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
   13d94:	4b08      	ldr	r3, [pc, #32]	; (13db8 <system_set_sleepmode+0x80>)
   13d96:	4a08      	ldr	r2, [pc, #32]	; (13db8 <system_set_sleepmode+0x80>)
   13d98:	6912      	ldr	r2, [r2, #16]
   13d9a:	2104      	movs	r1, #4
   13d9c:	430a      	orrs	r2, r1
   13d9e:	611a      	str	r2, [r3, #16]
			break;
   13da0:	e001      	b.n	13da6 <system_set_sleepmode+0x6e>

		default:
			return STATUS_ERR_INVALID_ARG;
   13da2:	2317      	movs	r3, #23
   13da4:	e000      	b.n	13da8 <system_set_sleepmode+0x70>
	}

	return STATUS_OK;
   13da6:	2300      	movs	r3, #0
}
   13da8:	0018      	movs	r0, r3
   13daa:	46bd      	mov	sp, r7
   13dac:	b004      	add	sp, #16
   13dae:	bd80      	pop	{r7, pc}
   13db0:	41002000 	.word	0x41002000
   13db4:	41004000 	.word	0x41004000
   13db8:	e000ed00 	.word	0xe000ed00
   13dbc:	40000400 	.word	0x40000400

00013dc0 <system_sleep>:
 * all ongoing memory accesses have completed, then a WFI (Wait For Interrupt)
 * instruction to place the device into the sleep mode specified by
 * \ref system_set_sleepmode until woken by an interrupt.
 */
static inline void system_sleep(void)
{
   13dc0:	b580      	push	{r7, lr}
   13dc2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
   13dc4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
   13dc8:	bf30      	wfi
	__DSB();
	__WFI();
}
   13dca:	46c0      	nop			; (mov r8, r8)
   13dcc:	46bd      	mov	sp, r7
   13dce:	bd80      	pop	{r7, pc}

00013dd0 <port_get_group_from_gpio_pin>:
{
   13dd0:	b580      	push	{r7, lr}
   13dd2:	b082      	sub	sp, #8
   13dd4:	af00      	add	r7, sp, #0
   13dd6:	0002      	movs	r2, r0
   13dd8:	1dfb      	adds	r3, r7, #7
   13dda:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   13ddc:	1dfb      	adds	r3, r7, #7
   13dde:	781b      	ldrb	r3, [r3, #0]
   13de0:	0018      	movs	r0, r3
   13de2:	4b03      	ldr	r3, [pc, #12]	; (13df0 <port_get_group_from_gpio_pin+0x20>)
   13de4:	4798      	blx	r3
   13de6:	0003      	movs	r3, r0
}
   13de8:	0018      	movs	r0, r3
   13dea:	46bd      	mov	sp, r7
   13dec:	b002      	add	sp, #8
   13dee:	bd80      	pop	{r7, pc}
   13df0:	00013cd9 	.word	0x00013cd9

00013df4 <port_pin_set_output_level>:
{
   13df4:	b580      	push	{r7, lr}
   13df6:	b084      	sub	sp, #16
   13df8:	af00      	add	r7, sp, #0
   13dfa:	0002      	movs	r2, r0
   13dfc:	1dfb      	adds	r3, r7, #7
   13dfe:	701a      	strb	r2, [r3, #0]
   13e00:	1dbb      	adds	r3, r7, #6
   13e02:	1c0a      	adds	r2, r1, #0
   13e04:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   13e06:	1dfb      	adds	r3, r7, #7
   13e08:	781b      	ldrb	r3, [r3, #0]
   13e0a:	0018      	movs	r0, r3
   13e0c:	4b0d      	ldr	r3, [pc, #52]	; (13e44 <port_pin_set_output_level+0x50>)
   13e0e:	4798      	blx	r3
   13e10:	0003      	movs	r3, r0
   13e12:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   13e14:	1dfb      	adds	r3, r7, #7
   13e16:	781b      	ldrb	r3, [r3, #0]
   13e18:	221f      	movs	r2, #31
   13e1a:	4013      	ands	r3, r2
   13e1c:	2201      	movs	r2, #1
   13e1e:	409a      	lsls	r2, r3
   13e20:	0013      	movs	r3, r2
   13e22:	60bb      	str	r3, [r7, #8]
	if (level) {
   13e24:	1dbb      	adds	r3, r7, #6
   13e26:	781b      	ldrb	r3, [r3, #0]
   13e28:	2b00      	cmp	r3, #0
   13e2a:	d003      	beq.n	13e34 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   13e2c:	68fb      	ldr	r3, [r7, #12]
   13e2e:	68ba      	ldr	r2, [r7, #8]
   13e30:	619a      	str	r2, [r3, #24]
}
   13e32:	e002      	b.n	13e3a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   13e34:	68fb      	ldr	r3, [r7, #12]
   13e36:	68ba      	ldr	r2, [r7, #8]
   13e38:	615a      	str	r2, [r3, #20]
}
   13e3a:	46c0      	nop			; (mov r8, r8)
   13e3c:	46bd      	mov	sp, r7
   13e3e:	b004      	add	sp, #16
   13e40:	bd80      	pop	{r7, pc}
   13e42:	46c0      	nop			; (mov r8, r8)
   13e44:	00013dd1 	.word	0x00013dd1

00013e48 <main>:

bool initSleepSeqeunce=false;
uint32_t tempSleepWait=0;

int main (void)
{
   13e48:	b590      	push	{r4, r7, lr}
   13e4a:	b083      	sub	sp, #12
   13e4c:	af02      	add	r7, sp, #8
	system_init();
   13e4e:	4b18      	ldr	r3, [pc, #96]	; (13eb0 <main+0x68>)
   13e50:	4798      	blx	r3
	
	/* Disable digital interfaces to unused peripherals */
	system_apb_clock_clear_mask(SYSTEM_CLOCK_APB_APBA,
   13e52:	2111      	movs	r1, #17
   13e54:	2000      	movs	r0, #0
   13e56:	4b17      	ldr	r3, [pc, #92]	; (13eb4 <main+0x6c>)
   13e58:	4798      	blx	r3
	PM_APBAMASK_PAC0 | PM_APBAMASK_WDT);
	system_apb_clock_clear_mask(SYSTEM_CLOCK_APB_APBB,
   13e5a:	2103      	movs	r1, #3
   13e5c:	2001      	movs	r0, #1
   13e5e:	4b15      	ldr	r3, [pc, #84]	; (13eb4 <main+0x6c>)
   13e60:	4798      	blx	r3
	PM_APBBMASK_PAC1 | PM_APBBMASK_DSU);
	system_apb_clock_clear_mask(SYSTEM_CLOCK_APB_APBC,
   13e62:	4b15      	ldr	r3, [pc, #84]	; (13eb8 <main+0x70>)
   13e64:	0019      	movs	r1, r3
   13e66:	2002      	movs	r0, #2
   13e68:	4b12      	ldr	r3, [pc, #72]	; (13eb4 <main+0x6c>)
   13e6a:	4798      	blx	r3
	PM_APBCMASK_PAC2 | PM_APBCMASK_AC | PM_APBCMASK_DAC);
	
	/* Disable NVM low power mode during sleep due to lockups (device errata) */
	NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
   13e6c:	4a13      	ldr	r2, [pc, #76]	; (13ebc <main+0x74>)
   13e6e:	6853      	ldr	r3, [r2, #4]
   13e70:	21c0      	movs	r1, #192	; 0xc0
   13e72:	0089      	lsls	r1, r1, #2
   13e74:	430b      	orrs	r3, r1
   13e76:	6053      	str	r3, [r2, #4]
	
	system_set_sleepmode(SYSTEM_SLEEPMODE_STANDBY);
   13e78:	2003      	movs	r0, #3
   13e7a:	4b11      	ldr	r3, [pc, #68]	; (13ec0 <main+0x78>)
   13e7c:	4798      	blx	r3
	
	system_interrupt_enable_global();
   13e7e:	4b11      	ldr	r3, [pc, #68]	; (13ec4 <main+0x7c>)
   13e80:	4798      	blx	r3
	
	//irq_initialize_vectors();
	//cpu_irq_enable();
	delay_init();
   13e82:	4b11      	ldr	r3, [pc, #68]	; (13ec8 <main+0x80>)
   13e84:	4798      	blx	r3
	init_eeprom();
   13e86:	4b11      	ldr	r3, [pc, #68]	; (13ecc <main+0x84>)
   13e88:	4798      	blx	r3
	
	
	
	start_lcd_service();
   13e8a:	4b11      	ldr	r3, [pc, #68]	; (13ed0 <main+0x88>)
   13e8c:	4798      	blx	r3
	start_gsm_service();
   13e8e:	4b11      	ldr	r3, [pc, #68]	; (13ed4 <main+0x8c>)
   13e90:	4798      	blx	r3
	start_motor_service();
   13e92:	4b11      	ldr	r3, [pc, #68]	; (13ed8 <main+0x90>)
   13e94:	4798      	blx	r3
	
	xTaskCreate(vTask_sleep_manager,NULL,(uint16_t)100,NULL,1,NULL);
   13e96:	4811      	ldr	r0, [pc, #68]	; (13edc <main+0x94>)
   13e98:	2300      	movs	r3, #0
   13e9a:	9301      	str	r3, [sp, #4]
   13e9c:	2301      	movs	r3, #1
   13e9e:	9300      	str	r3, [sp, #0]
   13ea0:	2300      	movs	r3, #0
   13ea2:	2264      	movs	r2, #100	; 0x64
   13ea4:	2100      	movs	r1, #0
   13ea6:	4c0e      	ldr	r4, [pc, #56]	; (13ee0 <main+0x98>)
   13ea8:	47a0      	blx	r4
	
	vTaskStartScheduler();
   13eaa:	4b0e      	ldr	r3, [pc, #56]	; (13ee4 <main+0x9c>)
   13eac:	4798      	blx	r3
	
	for (;;)
   13eae:	e7fe      	b.n	13eae <main+0x66>
   13eb0:	00013aed 	.word	0x00013aed
   13eb4:	00013c5d 	.word	0x00013c5d
   13eb8:	00060001 	.word	0x00060001
   13ebc:	41004000 	.word	0x41004000
   13ec0:	00013d39 	.word	0x00013d39
   13ec4:	00013cbd 	.word	0x00013cbd
   13ec8:	00011715 	.word	0x00011715
   13ecc:	00000151 	.word	0x00000151
   13ed0:	000080ad 	.word	0x000080ad
   13ed4:	000078f5 	.word	0x000078f5
   13ed8:	0000b36d 	.word	0x0000b36d
   13edc:	00013f31 	.word	0x00013f31
   13ee0:	0000eb59 	.word	0x0000eb59
   13ee4:	0000f02d 	.word	0x0000f02d

00013ee8 <checkSleepElligible>:
	}
}


bool checkSleepElligible(void)
{
   13ee8:	b580      	push	{r7, lr}
   13eea:	af00      	add	r7, sp, #0
	return (/*!turnOffTimerOn && */!getACPowerState() && motor_checkSleepElligible() && gsm_checkSleepElligible());
   13eec:	4b0d      	ldr	r3, [pc, #52]	; (13f24 <checkSleepElligible+0x3c>)
   13eee:	4798      	blx	r3
   13ef0:	0003      	movs	r3, r0
   13ef2:	001a      	movs	r2, r3
   13ef4:	2301      	movs	r3, #1
   13ef6:	4053      	eors	r3, r2
   13ef8:	b2db      	uxtb	r3, r3
   13efa:	2b00      	cmp	r3, #0
   13efc:	d009      	beq.n	13f12 <checkSleepElligible+0x2a>
   13efe:	4b0a      	ldr	r3, [pc, #40]	; (13f28 <checkSleepElligible+0x40>)
   13f00:	4798      	blx	r3
   13f02:	1e03      	subs	r3, r0, #0
   13f04:	d005      	beq.n	13f12 <checkSleepElligible+0x2a>
   13f06:	4b09      	ldr	r3, [pc, #36]	; (13f2c <checkSleepElligible+0x44>)
   13f08:	4798      	blx	r3
   13f0a:	1e03      	subs	r3, r0, #0
   13f0c:	d001      	beq.n	13f12 <checkSleepElligible+0x2a>
   13f0e:	2301      	movs	r3, #1
   13f10:	e000      	b.n	13f14 <checkSleepElligible+0x2c>
   13f12:	2300      	movs	r3, #0
   13f14:	1c1a      	adds	r2, r3, #0
   13f16:	2301      	movs	r3, #1
   13f18:	4013      	ands	r3, r2
   13f1a:	b2db      	uxtb	r3, r3
}
   13f1c:	0018      	movs	r0, r3
   13f1e:	46bd      	mov	sp, r7
   13f20:	bd80      	pop	{r7, pc}
   13f22:	46c0      	nop			; (mov r8, r8)
   13f24:	00009d81 	.word	0x00009d81
   13f28:	0000b665 	.word	0x0000b665
   13f2c:	0000799d 	.word	0x0000799d

00013f30 <vTask_sleep_manager>:

static void vTask_sleep_manager(void *params)
{
   13f30:	b580      	push	{r7, lr}
   13f32:	b084      	sub	sp, #16
   13f34:	af00      	add	r7, sp, #0
   13f36:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	for (;;)
	{
		if (checkSleepElligible())
   13f38:	4b34      	ldr	r3, [pc, #208]	; (1400c <vTask_sleep_manager+0xdc>)
   13f3a:	4798      	blx	r3
   13f3c:	1e03      	subs	r3, r0, #0
   13f3e:	d060      	beq.n	14002 <vTask_sleep_manager+0xd2>
		{
			if(!initSleepSeqeunce)
   13f40:	4b33      	ldr	r3, [pc, #204]	; (14010 <vTask_sleep_manager+0xe0>)
   13f42:	781b      	ldrb	r3, [r3, #0]
   13f44:	2201      	movs	r2, #1
   13f46:	4053      	eors	r3, r2
   13f48:	b2db      	uxtb	r3, r3
   13f4a:	2b00      	cmp	r3, #0
   13f4c:	d008      	beq.n	13f60 <vTask_sleep_manager+0x30>
			{
				tempSleepWait=xTaskGetTickCount();
   13f4e:	4b31      	ldr	r3, [pc, #196]	; (14014 <vTask_sleep_manager+0xe4>)
   13f50:	4798      	blx	r3
   13f52:	0002      	movs	r2, r0
   13f54:	4b30      	ldr	r3, [pc, #192]	; (14018 <vTask_sleep_manager+0xe8>)
   13f56:	601a      	str	r2, [r3, #0]
				initSleepSeqeunce=true;
   13f58:	4b2d      	ldr	r3, [pc, #180]	; (14010 <vTask_sleep_manager+0xe0>)
   13f5a:	2201      	movs	r2, #1
   13f5c:	701a      	strb	r2, [r3, #0]
   13f5e:	e7eb      	b.n	13f38 <vTask_sleep_manager+0x8>
			}
			else if(initSleepSeqeunce && xTaskGetTickCount()-tempSleepWait>sleepWaitTime)
   13f60:	4b2b      	ldr	r3, [pc, #172]	; (14010 <vTask_sleep_manager+0xe0>)
   13f62:	781b      	ldrb	r3, [r3, #0]
   13f64:	2b00      	cmp	r3, #0
   13f66:	d0e7      	beq.n	13f38 <vTask_sleep_manager+0x8>
   13f68:	4b2a      	ldr	r3, [pc, #168]	; (14014 <vTask_sleep_manager+0xe4>)
   13f6a:	4798      	blx	r3
   13f6c:	0002      	movs	r2, r0
   13f6e:	4b2a      	ldr	r3, [pc, #168]	; (14018 <vTask_sleep_manager+0xe8>)
   13f70:	681b      	ldr	r3, [r3, #0]
   13f72:	1ad3      	subs	r3, r2, r3
   13f74:	4a29      	ldr	r2, [pc, #164]	; (1401c <vTask_sleep_manager+0xec>)
   13f76:	4293      	cmp	r3, r2
   13f78:	d9de      	bls.n	13f38 <vTask_sleep_manager+0x8>
			{
				uint8_t cnt=10;
   13f7a:	230f      	movs	r3, #15
   13f7c:	18fb      	adds	r3, r7, r3
   13f7e:	220a      	movs	r2, #10
   13f80:	701a      	strb	r2, [r3, #0]
				bool led=false;
   13f82:	230e      	movs	r3, #14
   13f84:	18fb      	adds	r3, r7, r3
   13f86:	2200      	movs	r2, #0
   13f88:	701a      	strb	r2, [r3, #0]
				do
				{
					led=!led;
   13f8a:	230e      	movs	r3, #14
   13f8c:	18fb      	adds	r3, r7, r3
   13f8e:	781b      	ldrb	r3, [r3, #0]
   13f90:	1e5a      	subs	r2, r3, #1
   13f92:	4193      	sbcs	r3, r2
   13f94:	b2db      	uxtb	r3, r3
   13f96:	2201      	movs	r2, #1
   13f98:	4053      	eors	r3, r2
   13f9a:	b2db      	uxtb	r3, r3
   13f9c:	001a      	movs	r2, r3
   13f9e:	230e      	movs	r3, #14
   13fa0:	18fb      	adds	r3, r7, r3
   13fa2:	701a      	strb	r2, [r3, #0]
   13fa4:	781a      	ldrb	r2, [r3, #0]
   13fa6:	2101      	movs	r1, #1
   13fa8:	400a      	ands	r2, r1
   13faa:	701a      	strb	r2, [r3, #0]
					if(led)
   13fac:	230e      	movs	r3, #14
   13fae:	18fb      	adds	r3, r7, r3
   13fb0:	781b      	ldrb	r3, [r3, #0]
   13fb2:	2b00      	cmp	r3, #0
   13fb4:	d004      	beq.n	13fc0 <vTask_sleep_manager+0x90>
					THREEPHASE_OK_LED_ON;
   13fb6:	2100      	movs	r1, #0
   13fb8:	2027      	movs	r0, #39	; 0x27
   13fba:	4b19      	ldr	r3, [pc, #100]	; (14020 <vTask_sleep_manager+0xf0>)
   13fbc:	4798      	blx	r3
   13fbe:	e003      	b.n	13fc8 <vTask_sleep_manager+0x98>
					else
					THREEPHASE_OK_LED_OFF;
   13fc0:	2101      	movs	r1, #1
   13fc2:	2027      	movs	r0, #39	; 0x27
   13fc4:	4b16      	ldr	r3, [pc, #88]	; (14020 <vTask_sleep_manager+0xf0>)
   13fc6:	4798      	blx	r3

					tempSleepWait=xTaskGetTickCount();
   13fc8:	4b12      	ldr	r3, [pc, #72]	; (14014 <vTask_sleep_manager+0xe4>)
   13fca:	4798      	blx	r3
   13fcc:	0002      	movs	r2, r0
   13fce:	4b12      	ldr	r3, [pc, #72]	; (14018 <vTask_sleep_manager+0xe8>)
   13fd0:	601a      	str	r2, [r3, #0]
					while(xTaskGetTickCount()-tempSleepWait<200)
   13fd2:	46c0      	nop			; (mov r8, r8)
   13fd4:	4b0f      	ldr	r3, [pc, #60]	; (14014 <vTask_sleep_manager+0xe4>)
   13fd6:	4798      	blx	r3
   13fd8:	0002      	movs	r2, r0
   13fda:	4b0f      	ldr	r3, [pc, #60]	; (14018 <vTask_sleep_manager+0xe8>)
   13fdc:	681b      	ldr	r3, [r3, #0]
   13fde:	1ad3      	subs	r3, r2, r3
   13fe0:	2bc7      	cmp	r3, #199	; 0xc7
   13fe2:	d9f7      	bls.n	13fd4 <vTask_sleep_manager+0xa4>
					{}
				}while(--cnt);
   13fe4:	230f      	movs	r3, #15
   13fe6:	18fb      	adds	r3, r7, r3
   13fe8:	220f      	movs	r2, #15
   13fea:	18ba      	adds	r2, r7, r2
   13fec:	7812      	ldrb	r2, [r2, #0]
   13fee:	3a01      	subs	r2, #1
   13ff0:	701a      	strb	r2, [r3, #0]
   13ff2:	230f      	movs	r3, #15
   13ff4:	18fb      	adds	r3, r7, r3
   13ff6:	781b      	ldrb	r3, [r3, #0]
   13ff8:	2b00      	cmp	r3, #0
   13ffa:	d1c6      	bne.n	13f8a <vTask_sleep_manager+0x5a>
				
				gotoSleep();
   13ffc:	4b09      	ldr	r3, [pc, #36]	; (14024 <vTask_sleep_manager+0xf4>)
   13ffe:	4798      	blx	r3
   14000:	e79a      	b.n	13f38 <vTask_sleep_manager+0x8>
			}
		}
		else
		{
			initSleepSeqeunce=false;
   14002:	4b03      	ldr	r3, [pc, #12]	; (14010 <vTask_sleep_manager+0xe0>)
   14004:	2200      	movs	r2, #0
   14006:	701a      	strb	r2, [r3, #0]
		if (checkSleepElligible())
   14008:	e796      	b.n	13f38 <vTask_sleep_manager+0x8>
   1400a:	46c0      	nop			; (mov r8, r8)
   1400c:	00013ee9 	.word	0x00013ee9
   14010:	200004fc 	.word	0x200004fc
   14014:	0000f1fd 	.word	0x0000f1fd
   14018:	20000500 	.word	0x20000500
   1401c:	00004650 	.word	0x00004650
   14020:	00013df5 	.word	0x00013df5
   14024:	00014029 	.word	0x00014029

00014028 <gotoSleep>:
		}
	}
}

void gotoSleep(void)
{
   14028:	b580      	push	{r7, lr}
   1402a:	af00      	add	r7, sp, #0
	LCD_PWR_DIS();
   1402c:	4b04      	ldr	r3, [pc, #16]	; (14040 <gotoSleep+0x18>)
   1402e:	4798      	blx	r3
	
	lcd_in_sleep = true;
   14030:	4b04      	ldr	r3, [pc, #16]	; (14044 <gotoSleep+0x1c>)
   14032:	2201      	movs	r2, #1
   14034:	701a      	strb	r2, [r3, #0]
	system_sleep();
   14036:	4b04      	ldr	r3, [pc, #16]	; (14048 <gotoSleep+0x20>)
   14038:	4798      	blx	r3
   1403a:	46c0      	nop			; (mov r8, r8)
   1403c:	46bd      	mov	sp, r7
   1403e:	bd80      	pop	{r7, pc}
   14040:	00003895 	.word	0x00003895
   14044:	20000803 	.word	0x20000803
   14048:	00013dc1 	.word	0x00013dc1

0001404c <pow>:
   1404c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1404e:	4657      	mov	r7, sl
   14050:	464e      	mov	r6, r9
   14052:	46de      	mov	lr, fp
   14054:	4645      	mov	r5, r8
   14056:	b5e0      	push	{r5, r6, r7, lr}
   14058:	b08f      	sub	sp, #60	; 0x3c
   1405a:	001d      	movs	r5, r3
   1405c:	0006      	movs	r6, r0
   1405e:	000f      	movs	r7, r1
   14060:	0014      	movs	r4, r2
   14062:	f000 f9ff 	bl	14464 <__ieee754_pow>
   14066:	4bc7      	ldr	r3, [pc, #796]	; (14384 <pow+0x338>)
   14068:	9000      	str	r0, [sp, #0]
   1406a:	9101      	str	r1, [sp, #4]
   1406c:	469a      	mov	sl, r3
   1406e:	781b      	ldrb	r3, [r3, #0]
   14070:	b25b      	sxtb	r3, r3
   14072:	4699      	mov	r9, r3
   14074:	3301      	adds	r3, #1
   14076:	d03e      	beq.n	140f6 <pow+0xaa>
   14078:	0022      	movs	r2, r4
   1407a:	002b      	movs	r3, r5
   1407c:	0020      	movs	r0, r4
   1407e:	0029      	movs	r1, r5
   14080:	f003 fb92 	bl	177a8 <__aeabi_dcmpun>
   14084:	4683      	mov	fp, r0
   14086:	2800      	cmp	r0, #0
   14088:	d135      	bne.n	140f6 <pow+0xaa>
   1408a:	0032      	movs	r2, r6
   1408c:	003b      	movs	r3, r7
   1408e:	0030      	movs	r0, r6
   14090:	0039      	movs	r1, r7
   14092:	f003 fb89 	bl	177a8 <__aeabi_dcmpun>
   14096:	2200      	movs	r2, #0
   14098:	9003      	str	r0, [sp, #12]
   1409a:	2800      	cmp	r0, #0
   1409c:	d000      	beq.n	140a0 <pow+0x54>
   1409e:	e0b6      	b.n	1420e <pow+0x1c2>
   140a0:	2300      	movs	r3, #0
   140a2:	0030      	movs	r0, r6
   140a4:	0039      	movs	r1, r7
   140a6:	f001 faa1 	bl	155ec <__aeabi_dcmpeq>
   140aa:	2800      	cmp	r0, #0
   140ac:	d02c      	beq.n	14108 <pow+0xbc>
   140ae:	2200      	movs	r2, #0
   140b0:	2300      	movs	r3, #0
   140b2:	0020      	movs	r0, r4
   140b4:	0029      	movs	r1, r5
   140b6:	f001 fa99 	bl	155ec <__aeabi_dcmpeq>
   140ba:	4683      	mov	fp, r0
   140bc:	2800      	cmp	r0, #0
   140be:	d100      	bne.n	140c2 <pow+0x76>
   140c0:	e077      	b.n	141b2 <pow+0x166>
   140c2:	ab04      	add	r3, sp, #16
   140c4:	4698      	mov	r8, r3
   140c6:	2301      	movs	r3, #1
   140c8:	4642      	mov	r2, r8
   140ca:	9304      	str	r3, [sp, #16]
   140cc:	4bae      	ldr	r3, [pc, #696]	; (14388 <pow+0x33c>)
   140ce:	6053      	str	r3, [r2, #4]
   140d0:	4643      	mov	r3, r8
   140d2:	9a03      	ldr	r2, [sp, #12]
   140d4:	611c      	str	r4, [r3, #16]
   140d6:	615d      	str	r5, [r3, #20]
   140d8:	621a      	str	r2, [r3, #32]
   140da:	609e      	str	r6, [r3, #8]
   140dc:	60df      	str	r7, [r3, #12]
   140de:	4642      	mov	r2, r8
   140e0:	2300      	movs	r3, #0
   140e2:	2400      	movs	r4, #0
   140e4:	6193      	str	r3, [r2, #24]
   140e6:	61d4      	str	r4, [r2, #28]
   140e8:	464b      	mov	r3, r9
   140ea:	2b00      	cmp	r3, #0
   140ec:	d04d      	beq.n	1418a <pow+0x13e>
   140ee:	2300      	movs	r3, #0
   140f0:	4ca6      	ldr	r4, [pc, #664]	; (1438c <pow+0x340>)
   140f2:	9300      	str	r3, [sp, #0]
   140f4:	9401      	str	r4, [sp, #4]
   140f6:	9800      	ldr	r0, [sp, #0]
   140f8:	9901      	ldr	r1, [sp, #4]
   140fa:	b00f      	add	sp, #60	; 0x3c
   140fc:	bc3c      	pop	{r2, r3, r4, r5}
   140fe:	4690      	mov	r8, r2
   14100:	4699      	mov	r9, r3
   14102:	46a2      	mov	sl, r4
   14104:	46ab      	mov	fp, r5
   14106:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14108:	9800      	ldr	r0, [sp, #0]
   1410a:	9901      	ldr	r1, [sp, #4]
   1410c:	f000 ffc4 	bl	15098 <finite>
   14110:	4681      	mov	r9, r0
   14112:	2800      	cmp	r0, #0
   14114:	d100      	bne.n	14118 <pow+0xcc>
   14116:	e09b      	b.n	14250 <pow+0x204>
   14118:	9800      	ldr	r0, [sp, #0]
   1411a:	9901      	ldr	r1, [sp, #4]
   1411c:	2200      	movs	r2, #0
   1411e:	2300      	movs	r3, #0
   14120:	f001 fa64 	bl	155ec <__aeabi_dcmpeq>
   14124:	2800      	cmp	r0, #0
   14126:	d0e6      	beq.n	140f6 <pow+0xaa>
   14128:	0030      	movs	r0, r6
   1412a:	0039      	movs	r1, r7
   1412c:	f000 ffb4 	bl	15098 <finite>
   14130:	2800      	cmp	r0, #0
   14132:	d0e0      	beq.n	140f6 <pow+0xaa>
   14134:	0020      	movs	r0, r4
   14136:	0029      	movs	r1, r5
   14138:	f000 ffae 	bl	15098 <finite>
   1413c:	2800      	cmp	r0, #0
   1413e:	d0da      	beq.n	140f6 <pow+0xaa>
   14140:	ab04      	add	r3, sp, #16
   14142:	4698      	mov	r8, r3
   14144:	2304      	movs	r3, #4
   14146:	4642      	mov	r2, r8
   14148:	9304      	str	r3, [sp, #16]
   1414a:	4b8f      	ldr	r3, [pc, #572]	; (14388 <pow+0x33c>)
   1414c:	6114      	str	r4, [r2, #16]
   1414e:	6155      	str	r5, [r2, #20]
   14150:	6053      	str	r3, [r2, #4]
   14152:	2300      	movs	r3, #0
   14154:	2400      	movs	r4, #0
   14156:	6213      	str	r3, [r2, #32]
   14158:	2300      	movs	r3, #0
   1415a:	6193      	str	r3, [r2, #24]
   1415c:	61d4      	str	r4, [r2, #28]
   1415e:	4653      	mov	r3, sl
   14160:	781b      	ldrb	r3, [r3, #0]
   14162:	6096      	str	r6, [r2, #8]
   14164:	60d7      	str	r7, [r2, #12]
   14166:	b25b      	sxtb	r3, r3
   14168:	2b02      	cmp	r3, #2
   1416a:	d004      	beq.n	14176 <pow+0x12a>
   1416c:	4640      	mov	r0, r8
   1416e:	f000 ff9d 	bl	150ac <matherr>
   14172:	2800      	cmp	r0, #0
   14174:	d10e      	bne.n	14194 <pow+0x148>
   14176:	f003 fc71 	bl	17a5c <__errno>
   1417a:	2322      	movs	r3, #34	; 0x22
   1417c:	6003      	str	r3, [r0, #0]
   1417e:	e009      	b.n	14194 <pow+0x148>
   14180:	4642      	mov	r2, r8
   14182:	2300      	movs	r3, #0
   14184:	2400      	movs	r4, #0
   14186:	6193      	str	r3, [r2, #24]
   14188:	61d4      	str	r4, [r2, #28]
   1418a:	4640      	mov	r0, r8
   1418c:	f000 ff8e 	bl	150ac <matherr>
   14190:	2800      	cmp	r0, #0
   14192:	d037      	beq.n	14204 <pow+0x1b8>
   14194:	4643      	mov	r3, r8
   14196:	6a1b      	ldr	r3, [r3, #32]
   14198:	2b00      	cmp	r3, #0
   1419a:	d004      	beq.n	141a6 <pow+0x15a>
   1419c:	f003 fc5e 	bl	17a5c <__errno>
   141a0:	4643      	mov	r3, r8
   141a2:	6a1b      	ldr	r3, [r3, #32]
   141a4:	6003      	str	r3, [r0, #0]
   141a6:	4643      	mov	r3, r8
   141a8:	69dc      	ldr	r4, [r3, #28]
   141aa:	699b      	ldr	r3, [r3, #24]
   141ac:	9300      	str	r3, [sp, #0]
   141ae:	9401      	str	r4, [sp, #4]
   141b0:	e7a1      	b.n	140f6 <pow+0xaa>
   141b2:	0020      	movs	r0, r4
   141b4:	0029      	movs	r1, r5
   141b6:	f000 ff6f 	bl	15098 <finite>
   141ba:	2800      	cmp	r0, #0
   141bc:	d09b      	beq.n	140f6 <pow+0xaa>
   141be:	2200      	movs	r2, #0
   141c0:	2300      	movs	r3, #0
   141c2:	0020      	movs	r0, r4
   141c4:	0029      	movs	r1, r5
   141c6:	f001 fa17 	bl	155f8 <__aeabi_dcmplt>
   141ca:	2800      	cmp	r0, #0
   141cc:	d100      	bne.n	141d0 <pow+0x184>
   141ce:	e792      	b.n	140f6 <pow+0xaa>
   141d0:	ab04      	add	r3, sp, #16
   141d2:	4698      	mov	r8, r3
   141d4:	2301      	movs	r3, #1
   141d6:	4642      	mov	r2, r8
   141d8:	9304      	str	r3, [sp, #16]
   141da:	4b6b      	ldr	r3, [pc, #428]	; (14388 <pow+0x33c>)
   141dc:	6053      	str	r3, [r2, #4]
   141de:	4643      	mov	r3, r8
   141e0:	465a      	mov	r2, fp
   141e2:	609e      	str	r6, [r3, #8]
   141e4:	60df      	str	r7, [r3, #12]
   141e6:	621a      	str	r2, [r3, #32]
   141e8:	611c      	str	r4, [r3, #16]
   141ea:	615d      	str	r5, [r3, #20]
   141ec:	4653      	mov	r3, sl
   141ee:	781b      	ldrb	r3, [r3, #0]
   141f0:	b25b      	sxtb	r3, r3
   141f2:	2b00      	cmp	r3, #0
   141f4:	d0c4      	beq.n	14180 <pow+0x134>
   141f6:	2000      	movs	r0, #0
   141f8:	4642      	mov	r2, r8
   141fa:	4965      	ldr	r1, [pc, #404]	; (14390 <pow+0x344>)
   141fc:	6190      	str	r0, [r2, #24]
   141fe:	61d1      	str	r1, [r2, #28]
   14200:	2b02      	cmp	r3, #2
   14202:	d1c2      	bne.n	1418a <pow+0x13e>
   14204:	f003 fc2a 	bl	17a5c <__errno>
   14208:	2321      	movs	r3, #33	; 0x21
   1420a:	6003      	str	r3, [r0, #0]
   1420c:	e7c2      	b.n	14194 <pow+0x148>
   1420e:	2300      	movs	r3, #0
   14210:	0020      	movs	r0, r4
   14212:	0029      	movs	r1, r5
   14214:	f001 f9ea 	bl	155ec <__aeabi_dcmpeq>
   14218:	2800      	cmp	r0, #0
   1421a:	d100      	bne.n	1421e <pow+0x1d2>
   1421c:	e76b      	b.n	140f6 <pow+0xaa>
   1421e:	ab04      	add	r3, sp, #16
   14220:	4698      	mov	r8, r3
   14222:	2301      	movs	r3, #1
   14224:	4642      	mov	r2, r8
   14226:	9304      	str	r3, [sp, #16]
   14228:	4b57      	ldr	r3, [pc, #348]	; (14388 <pow+0x33c>)
   1422a:	4641      	mov	r1, r8
   1422c:	6053      	str	r3, [r2, #4]
   1422e:	4643      	mov	r3, r8
   14230:	465a      	mov	r2, fp
   14232:	621a      	str	r2, [r3, #32]
   14234:	2200      	movs	r2, #0
   14236:	609e      	str	r6, [r3, #8]
   14238:	60df      	str	r7, [r3, #12]
   1423a:	611c      	str	r4, [r3, #16]
   1423c:	615d      	str	r5, [r3, #20]
   1423e:	4b53      	ldr	r3, [pc, #332]	; (1438c <pow+0x340>)
   14240:	618a      	str	r2, [r1, #24]
   14242:	61cb      	str	r3, [r1, #28]
   14244:	9200      	str	r2, [sp, #0]
   14246:	9301      	str	r3, [sp, #4]
   14248:	464b      	mov	r3, r9
   1424a:	2b02      	cmp	r3, #2
   1424c:	d19d      	bne.n	1418a <pow+0x13e>
   1424e:	e752      	b.n	140f6 <pow+0xaa>
   14250:	0030      	movs	r0, r6
   14252:	0039      	movs	r1, r7
   14254:	f000 ff20 	bl	15098 <finite>
   14258:	2800      	cmp	r0, #0
   1425a:	d100      	bne.n	1425e <pow+0x212>
   1425c:	e75c      	b.n	14118 <pow+0xcc>
   1425e:	0020      	movs	r0, r4
   14260:	0029      	movs	r1, r5
   14262:	f000 ff19 	bl	15098 <finite>
   14266:	2800      	cmp	r0, #0
   14268:	d100      	bne.n	1426c <pow+0x220>
   1426a:	e755      	b.n	14118 <pow+0xcc>
   1426c:	9800      	ldr	r0, [sp, #0]
   1426e:	9901      	ldr	r1, [sp, #4]
   14270:	000b      	movs	r3, r1
   14272:	0002      	movs	r2, r0
   14274:	f003 fa98 	bl	177a8 <__aeabi_dcmpun>
   14278:	ab04      	add	r3, sp, #16
   1427a:	4698      	mov	r8, r3
   1427c:	2800      	cmp	r0, #0
   1427e:	d161      	bne.n	14344 <pow+0x2f8>
   14280:	2303      	movs	r3, #3
   14282:	4642      	mov	r2, r8
   14284:	9304      	str	r3, [sp, #16]
   14286:	4b40      	ldr	r3, [pc, #256]	; (14388 <pow+0x33c>)
   14288:	6210      	str	r0, [r2, #32]
   1428a:	6053      	str	r3, [r2, #4]
   1428c:	4653      	mov	r3, sl
   1428e:	781b      	ldrb	r3, [r3, #0]
   14290:	6096      	str	r6, [r2, #8]
   14292:	60d7      	str	r7, [r2, #12]
   14294:	b25b      	sxtb	r3, r3
   14296:	6114      	str	r4, [r2, #16]
   14298:	6155      	str	r5, [r2, #20]
   1429a:	4699      	mov	r9, r3
   1429c:	2b00      	cmp	r3, #0
   1429e:	d12f      	bne.n	14300 <pow+0x2b4>
   142a0:	22e0      	movs	r2, #224	; 0xe0
   142a2:	4641      	mov	r1, r8
   142a4:	4b3b      	ldr	r3, [pc, #236]	; (14394 <pow+0x348>)
   142a6:	0612      	lsls	r2, r2, #24
   142a8:	618a      	str	r2, [r1, #24]
   142aa:	61cb      	str	r3, [r1, #28]
   142ac:	0030      	movs	r0, r6
   142ae:	2200      	movs	r2, #0
   142b0:	2300      	movs	r3, #0
   142b2:	0039      	movs	r1, r7
   142b4:	f001 f9a0 	bl	155f8 <__aeabi_dcmplt>
   142b8:	2800      	cmp	r0, #0
   142ba:	d100      	bne.n	142be <pow+0x272>
   142bc:	e756      	b.n	1416c <pow+0x120>
   142be:	2200      	movs	r2, #0
   142c0:	4b35      	ldr	r3, [pc, #212]	; (14398 <pow+0x34c>)
   142c2:	0020      	movs	r0, r4
   142c4:	0029      	movs	r1, r5
   142c6:	f002 fcd9 	bl	16c7c <__aeabi_dmul>
   142ca:	0004      	movs	r4, r0
   142cc:	000d      	movs	r5, r1
   142ce:	f000 fef5 	bl	150bc <rint>
   142d2:	0002      	movs	r2, r0
   142d4:	000b      	movs	r3, r1
   142d6:	0020      	movs	r0, r4
   142d8:	0029      	movs	r1, r5
   142da:	f001 f987 	bl	155ec <__aeabi_dcmpeq>
   142de:	2800      	cmp	r0, #0
   142e0:	d105      	bne.n	142ee <pow+0x2a2>
   142e2:	22e0      	movs	r2, #224	; 0xe0
   142e4:	4b2d      	ldr	r3, [pc, #180]	; (1439c <pow+0x350>)
   142e6:	0612      	lsls	r2, r2, #24
   142e8:	4641      	mov	r1, r8
   142ea:	618a      	str	r2, [r1, #24]
   142ec:	61cb      	str	r3, [r1, #28]
   142ee:	4653      	mov	r3, sl
   142f0:	781b      	ldrb	r3, [r3, #0]
   142f2:	b25b      	sxtb	r3, r3
   142f4:	4699      	mov	r9, r3
   142f6:	464b      	mov	r3, r9
   142f8:	2b02      	cmp	r3, #2
   142fa:	d000      	beq.n	142fe <pow+0x2b2>
   142fc:	e736      	b.n	1416c <pow+0x120>
   142fe:	e73a      	b.n	14176 <pow+0x12a>
   14300:	2200      	movs	r2, #0
   14302:	4641      	mov	r1, r8
   14304:	4b26      	ldr	r3, [pc, #152]	; (143a0 <pow+0x354>)
   14306:	0030      	movs	r0, r6
   14308:	618a      	str	r2, [r1, #24]
   1430a:	61cb      	str	r3, [r1, #28]
   1430c:	2200      	movs	r2, #0
   1430e:	2300      	movs	r3, #0
   14310:	0039      	movs	r1, r7
   14312:	f001 f971 	bl	155f8 <__aeabi_dcmplt>
   14316:	2800      	cmp	r0, #0
   14318:	d0ed      	beq.n	142f6 <pow+0x2aa>
   1431a:	2200      	movs	r2, #0
   1431c:	4b1e      	ldr	r3, [pc, #120]	; (14398 <pow+0x34c>)
   1431e:	0020      	movs	r0, r4
   14320:	0029      	movs	r1, r5
   14322:	f002 fcab 	bl	16c7c <__aeabi_dmul>
   14326:	0004      	movs	r4, r0
   14328:	000d      	movs	r5, r1
   1432a:	f000 fec7 	bl	150bc <rint>
   1432e:	0002      	movs	r2, r0
   14330:	000b      	movs	r3, r1
   14332:	0020      	movs	r0, r4
   14334:	0029      	movs	r1, r5
   14336:	f001 f959 	bl	155ec <__aeabi_dcmpeq>
   1433a:	2800      	cmp	r0, #0
   1433c:	d1d7      	bne.n	142ee <pow+0x2a2>
   1433e:	2200      	movs	r2, #0
   14340:	4b13      	ldr	r3, [pc, #76]	; (14390 <pow+0x344>)
   14342:	e7d1      	b.n	142e8 <pow+0x29c>
   14344:	2301      	movs	r3, #1
   14346:	4642      	mov	r2, r8
   14348:	9304      	str	r3, [sp, #16]
   1434a:	4b0f      	ldr	r3, [pc, #60]	; (14388 <pow+0x33c>)
   1434c:	6053      	str	r3, [r2, #4]
   1434e:	4643      	mov	r3, r8
   14350:	464a      	mov	r2, r9
   14352:	611c      	str	r4, [r3, #16]
   14354:	615d      	str	r5, [r3, #20]
   14356:	621a      	str	r2, [r3, #32]
   14358:	609e      	str	r6, [r3, #8]
   1435a:	60df      	str	r7, [r3, #12]
   1435c:	2400      	movs	r4, #0
   1435e:	4653      	mov	r3, sl
   14360:	571c      	ldrsb	r4, [r3, r4]
   14362:	2c00      	cmp	r4, #0
   14364:	d100      	bne.n	14368 <pow+0x31c>
   14366:	e70b      	b.n	14180 <pow+0x134>
   14368:	2300      	movs	r3, #0
   1436a:	2200      	movs	r2, #0
   1436c:	0019      	movs	r1, r3
   1436e:	0010      	movs	r0, r2
   14370:	f002 f850 	bl	16414 <__aeabi_ddiv>
   14374:	4643      	mov	r3, r8
   14376:	6198      	str	r0, [r3, #24]
   14378:	61d9      	str	r1, [r3, #28]
   1437a:	2c02      	cmp	r4, #2
   1437c:	d100      	bne.n	14380 <pow+0x334>
   1437e:	e741      	b.n	14204 <pow+0x1b8>
   14380:	e703      	b.n	1418a <pow+0x13e>
   14382:	46c0      	nop			; (mov r8, r8)
   14384:	20000029 	.word	0x20000029
   14388:	000198e0 	.word	0x000198e0
   1438c:	3ff00000 	.word	0x3ff00000
   14390:	fff00000 	.word	0xfff00000
   14394:	47efffff 	.word	0x47efffff
   14398:	3fe00000 	.word	0x3fe00000
   1439c:	c7efffff 	.word	0xc7efffff
   143a0:	7ff00000 	.word	0x7ff00000

000143a4 <sqrt>:
   143a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   143a6:	4647      	mov	r7, r8
   143a8:	46ce      	mov	lr, r9
   143aa:	b580      	push	{r7, lr}
   143ac:	b08d      	sub	sp, #52	; 0x34
   143ae:	0004      	movs	r4, r0
   143b0:	000d      	movs	r5, r1
   143b2:	f000 fd8d 	bl	14ed0 <__ieee754_sqrt>
   143b6:	4b29      	ldr	r3, [pc, #164]	; (1445c <sqrt+0xb8>)
   143b8:	0006      	movs	r6, r0
   143ba:	781b      	ldrb	r3, [r3, #0]
   143bc:	000f      	movs	r7, r1
   143be:	b25b      	sxtb	r3, r3
   143c0:	4698      	mov	r8, r3
   143c2:	3301      	adds	r3, #1
   143c4:	d010      	beq.n	143e8 <sqrt+0x44>
   143c6:	0022      	movs	r2, r4
   143c8:	002b      	movs	r3, r5
   143ca:	0020      	movs	r0, r4
   143cc:	0029      	movs	r1, r5
   143ce:	f003 f9eb 	bl	177a8 <__aeabi_dcmpun>
   143d2:	4681      	mov	r9, r0
   143d4:	2800      	cmp	r0, #0
   143d6:	d107      	bne.n	143e8 <sqrt+0x44>
   143d8:	2200      	movs	r2, #0
   143da:	2300      	movs	r3, #0
   143dc:	0020      	movs	r0, r4
   143de:	0029      	movs	r1, r5
   143e0:	f001 f90a 	bl	155f8 <__aeabi_dcmplt>
   143e4:	2800      	cmp	r0, #0
   143e6:	d106      	bne.n	143f6 <sqrt+0x52>
   143e8:	0030      	movs	r0, r6
   143ea:	0039      	movs	r1, r7
   143ec:	b00d      	add	sp, #52	; 0x34
   143ee:	bc0c      	pop	{r2, r3}
   143f0:	4690      	mov	r8, r2
   143f2:	4699      	mov	r9, r3
   143f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   143f6:	2301      	movs	r3, #1
   143f8:	9302      	str	r3, [sp, #8]
   143fa:	4b19      	ldr	r3, [pc, #100]	; (14460 <sqrt+0xbc>)
   143fc:	9406      	str	r4, [sp, #24]
   143fe:	9507      	str	r5, [sp, #28]
   14400:	9303      	str	r3, [sp, #12]
   14402:	464b      	mov	r3, r9
   14404:	930a      	str	r3, [sp, #40]	; 0x28
   14406:	4643      	mov	r3, r8
   14408:	9404      	str	r4, [sp, #16]
   1440a:	9505      	str	r5, [sp, #20]
   1440c:	2b00      	cmp	r3, #0
   1440e:	d015      	beq.n	1443c <sqrt+0x98>
   14410:	2300      	movs	r3, #0
   14412:	2200      	movs	r2, #0
   14414:	0019      	movs	r1, r3
   14416:	0010      	movs	r0, r2
   14418:	f001 fffc 	bl	16414 <__aeabi_ddiv>
   1441c:	4643      	mov	r3, r8
   1441e:	9008      	str	r0, [sp, #32]
   14420:	9109      	str	r1, [sp, #36]	; 0x24
   14422:	2b02      	cmp	r3, #2
   14424:	d10e      	bne.n	14444 <sqrt+0xa0>
   14426:	f003 fb19 	bl	17a5c <__errno>
   1442a:	2321      	movs	r3, #33	; 0x21
   1442c:	6003      	str	r3, [r0, #0]
   1442e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14430:	9301      	str	r3, [sp, #4]
   14432:	2b00      	cmp	r3, #0
   14434:	d10c      	bne.n	14450 <sqrt+0xac>
   14436:	9e08      	ldr	r6, [sp, #32]
   14438:	9f09      	ldr	r7, [sp, #36]	; 0x24
   1443a:	e7d5      	b.n	143e8 <sqrt+0x44>
   1443c:	2300      	movs	r3, #0
   1443e:	2400      	movs	r4, #0
   14440:	9308      	str	r3, [sp, #32]
   14442:	9409      	str	r4, [sp, #36]	; 0x24
   14444:	a802      	add	r0, sp, #8
   14446:	f000 fe31 	bl	150ac <matherr>
   1444a:	2800      	cmp	r0, #0
   1444c:	d1ef      	bne.n	1442e <sqrt+0x8a>
   1444e:	e7ea      	b.n	14426 <sqrt+0x82>
   14450:	f003 fb04 	bl	17a5c <__errno>
   14454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14456:	9301      	str	r3, [sp, #4]
   14458:	6003      	str	r3, [r0, #0]
   1445a:	e7ec      	b.n	14436 <sqrt+0x92>
   1445c:	20000029 	.word	0x20000029
   14460:	000198e4 	.word	0x000198e4

00014464 <__ieee754_pow>:
   14464:	b5f0      	push	{r4, r5, r6, r7, lr}
   14466:	4657      	mov	r7, sl
   14468:	464e      	mov	r6, r9
   1446a:	4645      	mov	r5, r8
   1446c:	46de      	mov	lr, fp
   1446e:	001c      	movs	r4, r3
   14470:	0013      	movs	r3, r2
   14472:	b5e0      	push	{r5, r6, r7, lr}
   14474:	0065      	lsls	r5, r4, #1
   14476:	b091      	sub	sp, #68	; 0x44
   14478:	086d      	lsrs	r5, r5, #1
   1447a:	9300      	str	r3, [sp, #0]
   1447c:	9401      	str	r4, [sp, #4]
   1447e:	0007      	movs	r7, r0
   14480:	000e      	movs	r6, r1
   14482:	4680      	mov	r8, r0
   14484:	4689      	mov	r9, r1
   14486:	46a2      	mov	sl, r4
   14488:	432b      	orrs	r3, r5
   1448a:	d031      	beq.n	144f0 <__ieee754_pow+0x8c>
   1448c:	4b67      	ldr	r3, [pc, #412]	; (1462c <__ieee754_pow+0x1c8>)
   1448e:	0074      	lsls	r4, r6, #1
   14490:	0864      	lsrs	r4, r4, #1
   14492:	429c      	cmp	r4, r3
   14494:	dc27      	bgt.n	144e6 <__ieee754_pow+0x82>
   14496:	d024      	beq.n	144e2 <__ieee754_pow+0x7e>
   14498:	429d      	cmp	r5, r3
   1449a:	dc24      	bgt.n	144e6 <__ieee754_pow+0x82>
   1449c:	4b63      	ldr	r3, [pc, #396]	; (1462c <__ieee754_pow+0x1c8>)
   1449e:	429d      	cmp	r5, r3
   144a0:	d100      	bne.n	144a4 <__ieee754_pow+0x40>
   144a2:	e081      	b.n	145a8 <__ieee754_pow+0x144>
   144a4:	2300      	movs	r3, #0
   144a6:	469b      	mov	fp, r3
   144a8:	464b      	mov	r3, r9
   144aa:	2b00      	cmp	r3, #0
   144ac:	da00      	bge.n	144b0 <__ieee754_pow+0x4c>
   144ae:	e07f      	b.n	145b0 <__ieee754_pow+0x14c>
   144b0:	2a00      	cmp	r2, #0
   144b2:	d12c      	bne.n	1450e <__ieee754_pow+0xaa>
   144b4:	4b5d      	ldr	r3, [pc, #372]	; (1462c <__ieee754_pow+0x1c8>)
   144b6:	429d      	cmp	r5, r3
   144b8:	d100      	bne.n	144bc <__ieee754_pow+0x58>
   144ba:	e097      	b.n	145ec <__ieee754_pow+0x188>
   144bc:	4b5c      	ldr	r3, [pc, #368]	; (14630 <__ieee754_pow+0x1cc>)
   144be:	429d      	cmp	r5, r3
   144c0:	d066      	beq.n	14590 <__ieee754_pow+0x12c>
   144c2:	2380      	movs	r3, #128	; 0x80
   144c4:	05db      	lsls	r3, r3, #23
   144c6:	459a      	cmp	sl, r3
   144c8:	d100      	bne.n	144cc <__ieee754_pow+0x68>
   144ca:	e3b9      	b.n	14c40 <__ieee754_pow+0x7dc>
   144cc:	4b59      	ldr	r3, [pc, #356]	; (14634 <__ieee754_pow+0x1d0>)
   144ce:	459a      	cmp	sl, r3
   144d0:	d11d      	bne.n	1450e <__ieee754_pow+0xaa>
   144d2:	464b      	mov	r3, r9
   144d4:	2b00      	cmp	r3, #0
   144d6:	db1a      	blt.n	1450e <__ieee754_pow+0xaa>
   144d8:	0038      	movs	r0, r7
   144da:	0031      	movs	r1, r6
   144dc:	f000 fcf8 	bl	14ed0 <__ieee754_sqrt>
   144e0:	e008      	b.n	144f4 <__ieee754_pow+0x90>
   144e2:	2800      	cmp	r0, #0
   144e4:	d00d      	beq.n	14502 <__ieee754_pow+0x9e>
   144e6:	4b54      	ldr	r3, [pc, #336]	; (14638 <__ieee754_pow+0x1d4>)
   144e8:	469c      	mov	ip, r3
   144ea:	4464      	add	r4, ip
   144ec:	4327      	orrs	r7, r4
   144ee:	d10a      	bne.n	14506 <__ieee754_pow+0xa2>
   144f0:	2000      	movs	r0, #0
   144f2:	494f      	ldr	r1, [pc, #316]	; (14630 <__ieee754_pow+0x1cc>)
   144f4:	b011      	add	sp, #68	; 0x44
   144f6:	bc3c      	pop	{r2, r3, r4, r5}
   144f8:	4690      	mov	r8, r2
   144fa:	4699      	mov	r9, r3
   144fc:	46a2      	mov	sl, r4
   144fe:	46ab      	mov	fp, r5
   14500:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14502:	42a5      	cmp	r5, r4
   14504:	ddca      	ble.n	1449c <__ieee754_pow+0x38>
   14506:	484d      	ldr	r0, [pc, #308]	; (1463c <__ieee754_pow+0x1d8>)
   14508:	f000 fdd2 	bl	150b0 <nan>
   1450c:	e7f2      	b.n	144f4 <__ieee754_pow+0x90>
   1450e:	0038      	movs	r0, r7
   14510:	0031      	movs	r1, r6
   14512:	f000 fdbd 	bl	15090 <fabs>
   14516:	4643      	mov	r3, r8
   14518:	2b00      	cmp	r3, #0
   1451a:	d11d      	bne.n	14558 <__ieee754_pow+0xf4>
   1451c:	2c00      	cmp	r4, #0
   1451e:	d004      	beq.n	1452a <__ieee754_pow+0xc6>
   14520:	4a43      	ldr	r2, [pc, #268]	; (14630 <__ieee754_pow+0x1cc>)
   14522:	00b3      	lsls	r3, r6, #2
   14524:	089b      	lsrs	r3, r3, #2
   14526:	4293      	cmp	r3, r2
   14528:	d116      	bne.n	14558 <__ieee754_pow+0xf4>
   1452a:	4653      	mov	r3, sl
   1452c:	2b00      	cmp	r3, #0
   1452e:	da00      	bge.n	14532 <__ieee754_pow+0xce>
   14530:	e3c5      	b.n	14cbe <__ieee754_pow+0x85a>
   14532:	464b      	mov	r3, r9
   14534:	2b00      	cmp	r3, #0
   14536:	dadd      	bge.n	144f4 <__ieee754_pow+0x90>
   14538:	4b3f      	ldr	r3, [pc, #252]	; (14638 <__ieee754_pow+0x1d4>)
   1453a:	469c      	mov	ip, r3
   1453c:	465b      	mov	r3, fp
   1453e:	4464      	add	r4, ip
   14540:	431c      	orrs	r4, r3
   14542:	d101      	bne.n	14548 <__ieee754_pow+0xe4>
   14544:	f000 fc53 	bl	14dee <__ieee754_pow+0x98a>
   14548:	465b      	mov	r3, fp
   1454a:	2b01      	cmp	r3, #1
   1454c:	d1d2      	bne.n	144f4 <__ieee754_pow+0x90>
   1454e:	2480      	movs	r4, #128	; 0x80
   14550:	0624      	lsls	r4, r4, #24
   14552:	190b      	adds	r3, r1, r4
   14554:	0019      	movs	r1, r3
   14556:	e7cd      	b.n	144f4 <__ieee754_pow+0x90>
   14558:	0ff3      	lsrs	r3, r6, #31
   1455a:	3b01      	subs	r3, #1
   1455c:	4698      	mov	r8, r3
   1455e:	465b      	mov	r3, fp
   14560:	4642      	mov	r2, r8
   14562:	4313      	orrs	r3, r2
   14564:	d057      	beq.n	14616 <__ieee754_pow+0x1b2>
   14566:	4b36      	ldr	r3, [pc, #216]	; (14640 <__ieee754_pow+0x1dc>)
   14568:	429d      	cmp	r5, r3
   1456a:	dd77      	ble.n	1465c <__ieee754_pow+0x1f8>
   1456c:	4b35      	ldr	r3, [pc, #212]	; (14644 <__ieee754_pow+0x1e0>)
   1456e:	429d      	cmp	r5, r3
   14570:	dc00      	bgt.n	14574 <__ieee754_pow+0x110>
   14572:	e3b1      	b.n	14cd8 <__ieee754_pow+0x874>
   14574:	4b34      	ldr	r3, [pc, #208]	; (14648 <__ieee754_pow+0x1e4>)
   14576:	429c      	cmp	r4, r3
   14578:	dc00      	bgt.n	1457c <__ieee754_pow+0x118>
   1457a:	e3a8      	b.n	14cce <__ieee754_pow+0x86a>
   1457c:	4653      	mov	r3, sl
   1457e:	2b00      	cmp	r3, #0
   14580:	dd43      	ble.n	1460a <__ieee754_pow+0x1a6>
   14582:	4a32      	ldr	r2, [pc, #200]	; (1464c <__ieee754_pow+0x1e8>)
   14584:	4b32      	ldr	r3, [pc, #200]	; (14650 <__ieee754_pow+0x1ec>)
   14586:	0010      	movs	r0, r2
   14588:	0019      	movs	r1, r3
   1458a:	f002 fb77 	bl	16c7c <__aeabi_dmul>
   1458e:	e7b1      	b.n	144f4 <__ieee754_pow+0x90>
   14590:	4653      	mov	r3, sl
   14592:	0038      	movs	r0, r7
   14594:	0031      	movs	r1, r6
   14596:	2b00      	cmp	r3, #0
   14598:	daac      	bge.n	144f4 <__ieee754_pow+0x90>
   1459a:	003a      	movs	r2, r7
   1459c:	0033      	movs	r3, r6
   1459e:	2000      	movs	r0, #0
   145a0:	4923      	ldr	r1, [pc, #140]	; (14630 <__ieee754_pow+0x1cc>)
   145a2:	f001 ff37 	bl	16414 <__aeabi_ddiv>
   145a6:	e7a5      	b.n	144f4 <__ieee754_pow+0x90>
   145a8:	2a00      	cmp	r2, #0
   145aa:	d100      	bne.n	145ae <__ieee754_pow+0x14a>
   145ac:	e77a      	b.n	144a4 <__ieee754_pow+0x40>
   145ae:	e79a      	b.n	144e6 <__ieee754_pow+0x82>
   145b0:	4b28      	ldr	r3, [pc, #160]	; (14654 <__ieee754_pow+0x1f0>)
   145b2:	429d      	cmp	r5, r3
   145b4:	dc2c      	bgt.n	14610 <__ieee754_pow+0x1ac>
   145b6:	4b24      	ldr	r3, [pc, #144]	; (14648 <__ieee754_pow+0x1e4>)
   145b8:	429d      	cmp	r5, r3
   145ba:	dc00      	bgt.n	145be <__ieee754_pow+0x15a>
   145bc:	e778      	b.n	144b0 <__ieee754_pow+0x4c>
   145be:	4926      	ldr	r1, [pc, #152]	; (14658 <__ieee754_pow+0x1f4>)
   145c0:	152b      	asrs	r3, r5, #20
   145c2:	468c      	mov	ip, r1
   145c4:	4463      	add	r3, ip
   145c6:	2b14      	cmp	r3, #20
   145c8:	dc01      	bgt.n	145ce <__ieee754_pow+0x16a>
   145ca:	f000 fbf3 	bl	14db4 <__ieee754_pow+0x950>
   145ce:	2134      	movs	r1, #52	; 0x34
   145d0:	1acb      	subs	r3, r1, r3
   145d2:	9900      	ldr	r1, [sp, #0]
   145d4:	40d9      	lsrs	r1, r3
   145d6:	0008      	movs	r0, r1
   145d8:	4098      	lsls	r0, r3
   145da:	4282      	cmp	r2, r0
   145dc:	d000      	beq.n	145e0 <__ieee754_pow+0x17c>
   145de:	e767      	b.n	144b0 <__ieee754_pow+0x4c>
   145e0:	2301      	movs	r3, #1
   145e2:	4019      	ands	r1, r3
   145e4:	3301      	adds	r3, #1
   145e6:	1a5b      	subs	r3, r3, r1
   145e8:	469b      	mov	fp, r3
   145ea:	e761      	b.n	144b0 <__ieee754_pow+0x4c>
   145ec:	4b12      	ldr	r3, [pc, #72]	; (14638 <__ieee754_pow+0x1d4>)
   145ee:	18e3      	adds	r3, r4, r3
   145f0:	431f      	orrs	r7, r3
   145f2:	d100      	bne.n	145f6 <__ieee754_pow+0x192>
   145f4:	e77c      	b.n	144f0 <__ieee754_pow+0x8c>
   145f6:	4b14      	ldr	r3, [pc, #80]	; (14648 <__ieee754_pow+0x1e4>)
   145f8:	429c      	cmp	r4, r3
   145fa:	dc00      	bgt.n	145fe <__ieee754_pow+0x19a>
   145fc:	e327      	b.n	14c4e <__ieee754_pow+0x7ea>
   145fe:	9800      	ldr	r0, [sp, #0]
   14600:	9901      	ldr	r1, [sp, #4]
   14602:	4653      	mov	r3, sl
   14604:	2b00      	cmp	r3, #0
   14606:	db00      	blt.n	1460a <__ieee754_pow+0x1a6>
   14608:	e774      	b.n	144f4 <__ieee754_pow+0x90>
   1460a:	2000      	movs	r0, #0
   1460c:	2100      	movs	r1, #0
   1460e:	e771      	b.n	144f4 <__ieee754_pow+0x90>
   14610:	2302      	movs	r3, #2
   14612:	469b      	mov	fp, r3
   14614:	e74c      	b.n	144b0 <__ieee754_pow+0x4c>
   14616:	003a      	movs	r2, r7
   14618:	0033      	movs	r3, r6
   1461a:	0038      	movs	r0, r7
   1461c:	0031      	movs	r1, r6
   1461e:	f002 fdad 	bl	1717c <__aeabi_dsub>
   14622:	0002      	movs	r2, r0
   14624:	000b      	movs	r3, r1
   14626:	f001 fef5 	bl	16414 <__aeabi_ddiv>
   1462a:	e763      	b.n	144f4 <__ieee754_pow+0x90>
   1462c:	7ff00000 	.word	0x7ff00000
   14630:	3ff00000 	.word	0x3ff00000
   14634:	3fe00000 	.word	0x3fe00000
   14638:	c0100000 	.word	0xc0100000
   1463c:	000198e8 	.word	0x000198e8
   14640:	41e00000 	.word	0x41e00000
   14644:	43f00000 	.word	0x43f00000
   14648:	3fefffff 	.word	0x3fefffff
   1464c:	8800759c 	.word	0x8800759c
   14650:	7e37e43c 	.word	0x7e37e43c
   14654:	433fffff 	.word	0x433fffff
   14658:	fffffc01 	.word	0xfffffc01
   1465c:	4be9      	ldr	r3, [pc, #932]	; (14a04 <__ieee754_pow+0x5a0>)
   1465e:	2200      	movs	r2, #0
   14660:	429c      	cmp	r4, r3
   14662:	dc06      	bgt.n	14672 <__ieee754_pow+0x20e>
   14664:	2200      	movs	r2, #0
   14666:	4be8      	ldr	r3, [pc, #928]	; (14a08 <__ieee754_pow+0x5a4>)
   14668:	f002 fb08 	bl	16c7c <__aeabi_dmul>
   1466c:	2235      	movs	r2, #53	; 0x35
   1466e:	000c      	movs	r4, r1
   14670:	4252      	negs	r2, r2
   14672:	4de6      	ldr	r5, [pc, #920]	; (14a0c <__ieee754_pow+0x5a8>)
   14674:	1523      	asrs	r3, r4, #20
   14676:	46ac      	mov	ip, r5
   14678:	4463      	add	r3, ip
   1467a:	4699      	mov	r9, r3
   1467c:	0324      	lsls	r4, r4, #12
   1467e:	4de4      	ldr	r5, [pc, #912]	; (14a10 <__ieee754_pow+0x5ac>)
   14680:	4be4      	ldr	r3, [pc, #912]	; (14a14 <__ieee754_pow+0x5b0>)
   14682:	0b24      	lsrs	r4, r4, #12
   14684:	4491      	add	r9, r2
   14686:	4325      	orrs	r5, r4
   14688:	429c      	cmp	r4, r3
   1468a:	dd09      	ble.n	146a0 <__ieee754_pow+0x23c>
   1468c:	4be2      	ldr	r3, [pc, #904]	; (14a18 <__ieee754_pow+0x5b4>)
   1468e:	429c      	cmp	r4, r3
   14690:	dc00      	bgt.n	14694 <__ieee754_pow+0x230>
   14692:	e3b6      	b.n	14e02 <__ieee754_pow+0x99e>
   14694:	2301      	movs	r3, #1
   14696:	469c      	mov	ip, r3
   14698:	4be0      	ldr	r3, [pc, #896]	; (14a1c <__ieee754_pow+0x5b8>)
   1469a:	44e1      	add	r9, ip
   1469c:	469c      	mov	ip, r3
   1469e:	4465      	add	r5, ip
   146a0:	2300      	movs	r3, #0
   146a2:	2400      	movs	r4, #0
   146a4:	2200      	movs	r2, #0
   146a6:	9308      	str	r3, [sp, #32]
   146a8:	9409      	str	r4, [sp, #36]	; 0x24
   146aa:	930c      	str	r3, [sp, #48]	; 0x30
   146ac:	940d      	str	r4, [sp, #52]	; 0x34
   146ae:	2400      	movs	r4, #0
   146b0:	4bd7      	ldr	r3, [pc, #860]	; (14a10 <__ieee754_pow+0x5ac>)
   146b2:	9206      	str	r2, [sp, #24]
   146b4:	9307      	str	r3, [sp, #28]
   146b6:	9a06      	ldr	r2, [sp, #24]
   146b8:	9b07      	ldr	r3, [sp, #28]
   146ba:	0029      	movs	r1, r5
   146bc:	900a      	str	r0, [sp, #40]	; 0x28
   146be:	910b      	str	r1, [sp, #44]	; 0x2c
   146c0:	f002 fd5c 	bl	1717c <__aeabi_dsub>
   146c4:	9a06      	ldr	r2, [sp, #24]
   146c6:	9b07      	ldr	r3, [sp, #28]
   146c8:	0006      	movs	r6, r0
   146ca:	000f      	movs	r7, r1
   146cc:	980a      	ldr	r0, [sp, #40]	; 0x28
   146ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
   146d0:	f001 fb90 	bl	15df4 <__aeabi_dadd>
   146d4:	0002      	movs	r2, r0
   146d6:	000b      	movs	r3, r1
   146d8:	2000      	movs	r0, #0
   146da:	49cd      	ldr	r1, [pc, #820]	; (14a10 <__ieee754_pow+0x5ac>)
   146dc:	f001 fe9a 	bl	16414 <__aeabi_ddiv>
   146e0:	000a      	movs	r2, r1
   146e2:	0001      	movs	r1, r0
   146e4:	0013      	movs	r3, r2
   146e6:	910e      	str	r1, [sp, #56]	; 0x38
   146e8:	920f      	str	r2, [sp, #60]	; 0x3c
   146ea:	0002      	movs	r2, r0
   146ec:	0039      	movs	r1, r7
   146ee:	0030      	movs	r0, r6
   146f0:	f002 fac4 	bl	16c7c <__aeabi_dmul>
   146f4:	000a      	movs	r2, r1
   146f6:	0001      	movs	r1, r0
   146f8:	2080      	movs	r0, #128	; 0x80
   146fa:	9104      	str	r1, [sp, #16]
   146fc:	9205      	str	r2, [sp, #20]
   146fe:	0013      	movs	r3, r2
   14700:	2200      	movs	r2, #0
   14702:	1069      	asrs	r1, r5, #1
   14704:	2580      	movs	r5, #128	; 0x80
   14706:	0300      	lsls	r0, r0, #12
   14708:	4684      	mov	ip, r0
   1470a:	9202      	str	r2, [sp, #8]
   1470c:	9303      	str	r3, [sp, #12]
   1470e:	2200      	movs	r2, #0
   14710:	05ad      	lsls	r5, r5, #22
   14712:	430d      	orrs	r5, r1
   14714:	4465      	add	r5, ip
   14716:	192b      	adds	r3, r5, r4
   14718:	9802      	ldr	r0, [sp, #8]
   1471a:	9903      	ldr	r1, [sp, #12]
   1471c:	0014      	movs	r4, r2
   1471e:	001d      	movs	r5, r3
   14720:	f002 faac 	bl	16c7c <__aeabi_dmul>
   14724:	0002      	movs	r2, r0
   14726:	000b      	movs	r3, r1
   14728:	0030      	movs	r0, r6
   1472a:	0039      	movs	r1, r7
   1472c:	f002 fd26 	bl	1717c <__aeabi_dsub>
   14730:	9a06      	ldr	r2, [sp, #24]
   14732:	9b07      	ldr	r3, [sp, #28]
   14734:	0006      	movs	r6, r0
   14736:	000f      	movs	r7, r1
   14738:	0020      	movs	r0, r4
   1473a:	0029      	movs	r1, r5
   1473c:	f002 fd1e 	bl	1717c <__aeabi_dsub>
   14740:	0002      	movs	r2, r0
   14742:	000b      	movs	r3, r1
   14744:	980a      	ldr	r0, [sp, #40]	; 0x28
   14746:	990b      	ldr	r1, [sp, #44]	; 0x2c
   14748:	f002 fd18 	bl	1717c <__aeabi_dsub>
   1474c:	9a02      	ldr	r2, [sp, #8]
   1474e:	9b03      	ldr	r3, [sp, #12]
   14750:	f002 fa94 	bl	16c7c <__aeabi_dmul>
   14754:	0002      	movs	r2, r0
   14756:	000b      	movs	r3, r1
   14758:	0030      	movs	r0, r6
   1475a:	0039      	movs	r1, r7
   1475c:	f002 fd0e 	bl	1717c <__aeabi_dsub>
   14760:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   14762:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14764:	f002 fa8a 	bl	16c7c <__aeabi_dmul>
   14768:	9d04      	ldr	r5, [sp, #16]
   1476a:	9e05      	ldr	r6, [sp, #20]
   1476c:	9006      	str	r0, [sp, #24]
   1476e:	9107      	str	r1, [sp, #28]
   14770:	002a      	movs	r2, r5
   14772:	0033      	movs	r3, r6
   14774:	0028      	movs	r0, r5
   14776:	0031      	movs	r1, r6
   14778:	f002 fa80 	bl	16c7c <__aeabi_dmul>
   1477c:	0006      	movs	r6, r0
   1477e:	000f      	movs	r7, r1
   14780:	4aa7      	ldr	r2, [pc, #668]	; (14a20 <__ieee754_pow+0x5bc>)
   14782:	4ba8      	ldr	r3, [pc, #672]	; (14a24 <__ieee754_pow+0x5c0>)
   14784:	f002 fa7a 	bl	16c7c <__aeabi_dmul>
   14788:	4aa7      	ldr	r2, [pc, #668]	; (14a28 <__ieee754_pow+0x5c4>)
   1478a:	4ba8      	ldr	r3, [pc, #672]	; (14a2c <__ieee754_pow+0x5c8>)
   1478c:	f001 fb32 	bl	15df4 <__aeabi_dadd>
   14790:	0032      	movs	r2, r6
   14792:	003b      	movs	r3, r7
   14794:	f002 fa72 	bl	16c7c <__aeabi_dmul>
   14798:	4aa5      	ldr	r2, [pc, #660]	; (14a30 <__ieee754_pow+0x5cc>)
   1479a:	4ba6      	ldr	r3, [pc, #664]	; (14a34 <__ieee754_pow+0x5d0>)
   1479c:	f001 fb2a 	bl	15df4 <__aeabi_dadd>
   147a0:	0032      	movs	r2, r6
   147a2:	003b      	movs	r3, r7
   147a4:	f002 fa6a 	bl	16c7c <__aeabi_dmul>
   147a8:	4aa3      	ldr	r2, [pc, #652]	; (14a38 <__ieee754_pow+0x5d4>)
   147aa:	4ba4      	ldr	r3, [pc, #656]	; (14a3c <__ieee754_pow+0x5d8>)
   147ac:	f001 fb22 	bl	15df4 <__aeabi_dadd>
   147b0:	0032      	movs	r2, r6
   147b2:	003b      	movs	r3, r7
   147b4:	f002 fa62 	bl	16c7c <__aeabi_dmul>
   147b8:	4aa1      	ldr	r2, [pc, #644]	; (14a40 <__ieee754_pow+0x5dc>)
   147ba:	4ba2      	ldr	r3, [pc, #648]	; (14a44 <__ieee754_pow+0x5e0>)
   147bc:	f001 fb1a 	bl	15df4 <__aeabi_dadd>
   147c0:	0032      	movs	r2, r6
   147c2:	003b      	movs	r3, r7
   147c4:	f002 fa5a 	bl	16c7c <__aeabi_dmul>
   147c8:	4a9f      	ldr	r2, [pc, #636]	; (14a48 <__ieee754_pow+0x5e4>)
   147ca:	4ba0      	ldr	r3, [pc, #640]	; (14a4c <__ieee754_pow+0x5e8>)
   147cc:	f001 fb12 	bl	15df4 <__aeabi_dadd>
   147d0:	0032      	movs	r2, r6
   147d2:	0004      	movs	r4, r0
   147d4:	000d      	movs	r5, r1
   147d6:	003b      	movs	r3, r7
   147d8:	0030      	movs	r0, r6
   147da:	0039      	movs	r1, r7
   147dc:	f002 fa4e 	bl	16c7c <__aeabi_dmul>
   147e0:	0002      	movs	r2, r0
   147e2:	000b      	movs	r3, r1
   147e4:	0020      	movs	r0, r4
   147e6:	0029      	movs	r1, r5
   147e8:	f002 fa48 	bl	16c7c <__aeabi_dmul>
   147ec:	9e02      	ldr	r6, [sp, #8]
   147ee:	9f03      	ldr	r7, [sp, #12]
   147f0:	0004      	movs	r4, r0
   147f2:	000d      	movs	r5, r1
   147f4:	9804      	ldr	r0, [sp, #16]
   147f6:	9905      	ldr	r1, [sp, #20]
   147f8:	0032      	movs	r2, r6
   147fa:	003b      	movs	r3, r7
   147fc:	f001 fafa 	bl	15df4 <__aeabi_dadd>
   14800:	9a06      	ldr	r2, [sp, #24]
   14802:	9b07      	ldr	r3, [sp, #28]
   14804:	f002 fa3a 	bl	16c7c <__aeabi_dmul>
   14808:	0022      	movs	r2, r4
   1480a:	002b      	movs	r3, r5
   1480c:	f001 faf2 	bl	15df4 <__aeabi_dadd>
   14810:	0032      	movs	r2, r6
   14812:	900a      	str	r0, [sp, #40]	; 0x28
   14814:	910b      	str	r1, [sp, #44]	; 0x2c
   14816:	003b      	movs	r3, r7
   14818:	0030      	movs	r0, r6
   1481a:	0039      	movs	r1, r7
   1481c:	9602      	str	r6, [sp, #8]
   1481e:	9703      	str	r7, [sp, #12]
   14820:	f002 fa2c 	bl	16c7c <__aeabi_dmul>
   14824:	2200      	movs	r2, #0
   14826:	4b8a      	ldr	r3, [pc, #552]	; (14a50 <__ieee754_pow+0x5ec>)
   14828:	0004      	movs	r4, r0
   1482a:	000d      	movs	r5, r1
   1482c:	f001 fae2 	bl	15df4 <__aeabi_dadd>
   14830:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   14832:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14834:	f001 fade 	bl	15df4 <__aeabi_dadd>
   14838:	2600      	movs	r6, #0
   1483a:	000f      	movs	r7, r1
   1483c:	0032      	movs	r2, r6
   1483e:	000b      	movs	r3, r1
   14840:	9802      	ldr	r0, [sp, #8]
   14842:	9903      	ldr	r1, [sp, #12]
   14844:	f002 fa1a 	bl	16c7c <__aeabi_dmul>
   14848:	2200      	movs	r2, #0
   1484a:	9002      	str	r0, [sp, #8]
   1484c:	9103      	str	r1, [sp, #12]
   1484e:	4b80      	ldr	r3, [pc, #512]	; (14a50 <__ieee754_pow+0x5ec>)
   14850:	0030      	movs	r0, r6
   14852:	0039      	movs	r1, r7
   14854:	f002 fc92 	bl	1717c <__aeabi_dsub>
   14858:	0022      	movs	r2, r4
   1485a:	002b      	movs	r3, r5
   1485c:	f002 fc8e 	bl	1717c <__aeabi_dsub>
   14860:	0002      	movs	r2, r0
   14862:	000b      	movs	r3, r1
   14864:	980a      	ldr	r0, [sp, #40]	; 0x28
   14866:	990b      	ldr	r1, [sp, #44]	; 0x2c
   14868:	f002 fc88 	bl	1717c <__aeabi_dsub>
   1486c:	9a04      	ldr	r2, [sp, #16]
   1486e:	9b05      	ldr	r3, [sp, #20]
   14870:	f002 fa04 	bl	16c7c <__aeabi_dmul>
   14874:	0032      	movs	r2, r6
   14876:	0004      	movs	r4, r0
   14878:	000d      	movs	r5, r1
   1487a:	9806      	ldr	r0, [sp, #24]
   1487c:	9907      	ldr	r1, [sp, #28]
   1487e:	003b      	movs	r3, r7
   14880:	f002 f9fc 	bl	16c7c <__aeabi_dmul>
   14884:	0002      	movs	r2, r0
   14886:	000b      	movs	r3, r1
   14888:	0020      	movs	r0, r4
   1488a:	0029      	movs	r1, r5
   1488c:	f001 fab2 	bl	15df4 <__aeabi_dadd>
   14890:	0004      	movs	r4, r0
   14892:	000d      	movs	r5, r1
   14894:	0002      	movs	r2, r0
   14896:	000b      	movs	r3, r1
   14898:	9802      	ldr	r0, [sp, #8]
   1489a:	9903      	ldr	r1, [sp, #12]
   1489c:	f001 faaa 	bl	15df4 <__aeabi_dadd>
   148a0:	2600      	movs	r6, #0
   148a2:	22e0      	movs	r2, #224	; 0xe0
   148a4:	4b6b      	ldr	r3, [pc, #428]	; (14a54 <__ieee754_pow+0x5f0>)
   148a6:	0612      	lsls	r2, r2, #24
   148a8:	0030      	movs	r0, r6
   148aa:	000f      	movs	r7, r1
   148ac:	f002 f9e6 	bl	16c7c <__aeabi_dmul>
   148b0:	9a02      	ldr	r2, [sp, #8]
   148b2:	9b03      	ldr	r3, [sp, #12]
   148b4:	9004      	str	r0, [sp, #16]
   148b6:	9105      	str	r1, [sp, #20]
   148b8:	0030      	movs	r0, r6
   148ba:	0039      	movs	r1, r7
   148bc:	f002 fc5e 	bl	1717c <__aeabi_dsub>
   148c0:	0002      	movs	r2, r0
   148c2:	000b      	movs	r3, r1
   148c4:	0020      	movs	r0, r4
   148c6:	0029      	movs	r1, r5
   148c8:	f002 fc58 	bl	1717c <__aeabi_dsub>
   148cc:	4a62      	ldr	r2, [pc, #392]	; (14a58 <__ieee754_pow+0x5f4>)
   148ce:	4b61      	ldr	r3, [pc, #388]	; (14a54 <__ieee754_pow+0x5f0>)
   148d0:	f002 f9d4 	bl	16c7c <__aeabi_dmul>
   148d4:	4a61      	ldr	r2, [pc, #388]	; (14a5c <__ieee754_pow+0x5f8>)
   148d6:	0004      	movs	r4, r0
   148d8:	000d      	movs	r5, r1
   148da:	4b61      	ldr	r3, [pc, #388]	; (14a60 <__ieee754_pow+0x5fc>)
   148dc:	0030      	movs	r0, r6
   148de:	0039      	movs	r1, r7
   148e0:	f002 f9cc 	bl	16c7c <__aeabi_dmul>
   148e4:	0002      	movs	r2, r0
   148e6:	000b      	movs	r3, r1
   148e8:	0020      	movs	r0, r4
   148ea:	0029      	movs	r1, r5
   148ec:	f001 fa82 	bl	15df4 <__aeabi_dadd>
   148f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   148f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   148f4:	f001 fa7e 	bl	15df4 <__aeabi_dadd>
   148f8:	0006      	movs	r6, r0
   148fa:	4648      	mov	r0, r9
   148fc:	000f      	movs	r7, r1
   148fe:	f002 ffa7 	bl	17850 <__aeabi_i2d>
   14902:	0004      	movs	r4, r0
   14904:	000d      	movs	r5, r1
   14906:	9804      	ldr	r0, [sp, #16]
   14908:	9905      	ldr	r1, [sp, #20]
   1490a:	0032      	movs	r2, r6
   1490c:	003b      	movs	r3, r7
   1490e:	f001 fa71 	bl	15df4 <__aeabi_dadd>
   14912:	9a08      	ldr	r2, [sp, #32]
   14914:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14916:	f001 fa6d 	bl	15df4 <__aeabi_dadd>
   1491a:	0022      	movs	r2, r4
   1491c:	002b      	movs	r3, r5
   1491e:	f001 fa69 	bl	15df4 <__aeabi_dadd>
   14922:	2000      	movs	r0, #0
   14924:	0022      	movs	r2, r4
   14926:	002b      	movs	r3, r5
   14928:	9002      	str	r0, [sp, #8]
   1492a:	9103      	str	r1, [sp, #12]
   1492c:	f002 fc26 	bl	1717c <__aeabi_dsub>
   14930:	9a08      	ldr	r2, [sp, #32]
   14932:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14934:	f002 fc22 	bl	1717c <__aeabi_dsub>
   14938:	9a04      	ldr	r2, [sp, #16]
   1493a:	9b05      	ldr	r3, [sp, #20]
   1493c:	f002 fc1e 	bl	1717c <__aeabi_dsub>
   14940:	0002      	movs	r2, r0
   14942:	000b      	movs	r3, r1
   14944:	0030      	movs	r0, r6
   14946:	0039      	movs	r1, r7
   14948:	f002 fc18 	bl	1717c <__aeabi_dsub>
   1494c:	9004      	str	r0, [sp, #16]
   1494e:	9105      	str	r1, [sp, #20]
   14950:	465b      	mov	r3, fp
   14952:	4642      	mov	r2, r8
   14954:	3b01      	subs	r3, #1
   14956:	4313      	orrs	r3, r2
   14958:	d100      	bne.n	1495c <__ieee754_pow+0x4f8>
   1495a:	e1ab      	b.n	14cb4 <__ieee754_pow+0x850>
   1495c:	2300      	movs	r3, #0
   1495e:	4c2c      	ldr	r4, [pc, #176]	; (14a10 <__ieee754_pow+0x5ac>)
   14960:	9306      	str	r3, [sp, #24]
   14962:	9407      	str	r4, [sp, #28]
   14964:	9800      	ldr	r0, [sp, #0]
   14966:	9901      	ldr	r1, [sp, #4]
   14968:	2600      	movs	r6, #0
   1496a:	000b      	movs	r3, r1
   1496c:	0032      	movs	r2, r6
   1496e:	000f      	movs	r7, r1
   14970:	f002 fc04 	bl	1717c <__aeabi_dsub>
   14974:	9a02      	ldr	r2, [sp, #8]
   14976:	9b03      	ldr	r3, [sp, #12]
   14978:	f002 f980 	bl	16c7c <__aeabi_dmul>
   1497c:	9a00      	ldr	r2, [sp, #0]
   1497e:	9b01      	ldr	r3, [sp, #4]
   14980:	0004      	movs	r4, r0
   14982:	000d      	movs	r5, r1
   14984:	9804      	ldr	r0, [sp, #16]
   14986:	9905      	ldr	r1, [sp, #20]
   14988:	f002 f978 	bl	16c7c <__aeabi_dmul>
   1498c:	0002      	movs	r2, r0
   1498e:	000b      	movs	r3, r1
   14990:	0020      	movs	r0, r4
   14992:	0029      	movs	r1, r5
   14994:	f001 fa2e 	bl	15df4 <__aeabi_dadd>
   14998:	0004      	movs	r4, r0
   1499a:	000d      	movs	r5, r1
   1499c:	9802      	ldr	r0, [sp, #8]
   1499e:	9903      	ldr	r1, [sp, #12]
   149a0:	0032      	movs	r2, r6
   149a2:	003b      	movs	r3, r7
   149a4:	9400      	str	r4, [sp, #0]
   149a6:	9501      	str	r5, [sp, #4]
   149a8:	f002 f968 	bl	16c7c <__aeabi_dmul>
   149ac:	0002      	movs	r2, r0
   149ae:	000b      	movs	r3, r1
   149b0:	0006      	movs	r6, r0
   149b2:	000f      	movs	r7, r1
   149b4:	0020      	movs	r0, r4
   149b6:	0029      	movs	r1, r5
   149b8:	f001 fa1c 	bl	15df4 <__aeabi_dadd>
   149bc:	4b29      	ldr	r3, [pc, #164]	; (14a64 <__ieee754_pow+0x600>)
   149be:	0004      	movs	r4, r0
   149c0:	000d      	movs	r5, r1
   149c2:	0002      	movs	r2, r0
   149c4:	468b      	mov	fp, r1
   149c6:	4299      	cmp	r1, r3
   149c8:	dc00      	bgt.n	149cc <__ieee754_pow+0x568>
   149ca:	e14f      	b.n	14c6c <__ieee754_pow+0x808>
   149cc:	4b26      	ldr	r3, [pc, #152]	; (14a68 <__ieee754_pow+0x604>)
   149ce:	18cb      	adds	r3, r1, r3
   149d0:	4303      	orrs	r3, r0
   149d2:	d000      	beq.n	149d6 <__ieee754_pow+0x572>
   149d4:	e1e2      	b.n	14d9c <__ieee754_pow+0x938>
   149d6:	9800      	ldr	r0, [sp, #0]
   149d8:	9901      	ldr	r1, [sp, #4]
   149da:	4a24      	ldr	r2, [pc, #144]	; (14a6c <__ieee754_pow+0x608>)
   149dc:	4b24      	ldr	r3, [pc, #144]	; (14a70 <__ieee754_pow+0x60c>)
   149de:	f001 fa09 	bl	15df4 <__aeabi_dadd>
   149e2:	0032      	movs	r2, r6
   149e4:	9002      	str	r0, [sp, #8]
   149e6:	9103      	str	r1, [sp, #12]
   149e8:	003b      	movs	r3, r7
   149ea:	0020      	movs	r0, r4
   149ec:	0029      	movs	r1, r5
   149ee:	f002 fbc5 	bl	1717c <__aeabi_dsub>
   149f2:	0002      	movs	r2, r0
   149f4:	000b      	movs	r3, r1
   149f6:	9802      	ldr	r0, [sp, #8]
   149f8:	9903      	ldr	r1, [sp, #12]
   149fa:	f000 fe11 	bl	15620 <__aeabi_dcmpgt>
   149fe:	46aa      	mov	sl, r5
   14a00:	e038      	b.n	14a74 <__ieee754_pow+0x610>
   14a02:	46c0      	nop			; (mov r8, r8)
   14a04:	000fffff 	.word	0x000fffff
   14a08:	43400000 	.word	0x43400000
   14a0c:	fffffc01 	.word	0xfffffc01
   14a10:	3ff00000 	.word	0x3ff00000
   14a14:	0003988e 	.word	0x0003988e
   14a18:	000bb679 	.word	0x000bb679
   14a1c:	fff00000 	.word	0xfff00000
   14a20:	4a454eef 	.word	0x4a454eef
   14a24:	3fca7e28 	.word	0x3fca7e28
   14a28:	93c9db65 	.word	0x93c9db65
   14a2c:	3fcd864a 	.word	0x3fcd864a
   14a30:	a91d4101 	.word	0xa91d4101
   14a34:	3fd17460 	.word	0x3fd17460
   14a38:	518f264d 	.word	0x518f264d
   14a3c:	3fd55555 	.word	0x3fd55555
   14a40:	db6fabff 	.word	0xdb6fabff
   14a44:	3fdb6db6 	.word	0x3fdb6db6
   14a48:	33333303 	.word	0x33333303
   14a4c:	3fe33333 	.word	0x3fe33333
   14a50:	40080000 	.word	0x40080000
   14a54:	3feec709 	.word	0x3feec709
   14a58:	dc3a03fd 	.word	0xdc3a03fd
   14a5c:	145b01f5 	.word	0x145b01f5
   14a60:	be3e2fe0 	.word	0xbe3e2fe0
   14a64:	408fffff 	.word	0x408fffff
   14a68:	bf700000 	.word	0xbf700000
   14a6c:	652b82fe 	.word	0x652b82fe
   14a70:	3c971547 	.word	0x3c971547
   14a74:	2800      	cmp	r0, #0
   14a76:	d000      	beq.n	14a7a <__ieee754_pow+0x616>
   14a78:	e190      	b.n	14d9c <__ieee754_pow+0x938>
   14a7a:	4aec      	ldr	r2, [pc, #944]	; (14e2c <__ieee754_pow+0x9c8>)
   14a7c:	4653      	mov	r3, sl
   14a7e:	4694      	mov	ip, r2
   14a80:	2280      	movs	r2, #128	; 0x80
   14a82:	0352      	lsls	r2, r2, #13
   14a84:	0011      	movs	r1, r2
   14a86:	151b      	asrs	r3, r3, #20
   14a88:	4463      	add	r3, ip
   14a8a:	4119      	asrs	r1, r3
   14a8c:	000b      	movs	r3, r1
   14a8e:	4690      	mov	r8, r2
   14a90:	4ae7      	ldr	r2, [pc, #924]	; (14e30 <__ieee754_pow+0x9cc>)
   14a92:	445b      	add	r3, fp
   14a94:	4694      	mov	ip, r2
   14a96:	005c      	lsls	r4, r3, #1
   14a98:	0d64      	lsrs	r4, r4, #21
   14a9a:	4de6      	ldr	r5, [pc, #920]	; (14e34 <__ieee754_pow+0x9d0>)
   14a9c:	4464      	add	r4, ip
   14a9e:	4125      	asrs	r5, r4
   14aa0:	001a      	movs	r2, r3
   14aa2:	43aa      	bics	r2, r5
   14aa4:	0011      	movs	r1, r2
   14aa6:	4642      	mov	r2, r8
   14aa8:	031b      	lsls	r3, r3, #12
   14aaa:	0b1b      	lsrs	r3, r3, #12
   14aac:	4313      	orrs	r3, r2
   14aae:	2214      	movs	r2, #20
   14ab0:	1b14      	subs	r4, r2, r4
   14ab2:	4123      	asrs	r3, r4
   14ab4:	4699      	mov	r9, r3
   14ab6:	465b      	mov	r3, fp
   14ab8:	2000      	movs	r0, #0
   14aba:	2b00      	cmp	r3, #0
   14abc:	da00      	bge.n	14ac0 <__ieee754_pow+0x65c>
   14abe:	e1b0      	b.n	14e22 <__ieee754_pow+0x9be>
   14ac0:	0002      	movs	r2, r0
   14ac2:	000b      	movs	r3, r1
   14ac4:	0030      	movs	r0, r6
   14ac6:	0039      	movs	r1, r7
   14ac8:	f002 fb58 	bl	1717c <__aeabi_dsub>
   14acc:	000b      	movs	r3, r1
   14ace:	0002      	movs	r2, r0
   14ad0:	0006      	movs	r6, r0
   14ad2:	000f      	movs	r7, r1
   14ad4:	9800      	ldr	r0, [sp, #0]
   14ad6:	9901      	ldr	r1, [sp, #4]
   14ad8:	f001 f98c 	bl	15df4 <__aeabi_dadd>
   14adc:	464b      	mov	r3, r9
   14ade:	051b      	lsls	r3, r3, #20
   14ae0:	000d      	movs	r5, r1
   14ae2:	4698      	mov	r8, r3
   14ae4:	2400      	movs	r4, #0
   14ae6:	2200      	movs	r2, #0
   14ae8:	4bd3      	ldr	r3, [pc, #844]	; (14e38 <__ieee754_pow+0x9d4>)
   14aea:	0020      	movs	r0, r4
   14aec:	0029      	movs	r1, r5
   14aee:	f002 f8c5 	bl	16c7c <__aeabi_dmul>
   14af2:	0032      	movs	r2, r6
   14af4:	9002      	str	r0, [sp, #8]
   14af6:	9103      	str	r1, [sp, #12]
   14af8:	003b      	movs	r3, r7
   14afa:	0020      	movs	r0, r4
   14afc:	0029      	movs	r1, r5
   14afe:	f002 fb3d 	bl	1717c <__aeabi_dsub>
   14b02:	0002      	movs	r2, r0
   14b04:	000b      	movs	r3, r1
   14b06:	9800      	ldr	r0, [sp, #0]
   14b08:	9901      	ldr	r1, [sp, #4]
   14b0a:	f002 fb37 	bl	1717c <__aeabi_dsub>
   14b0e:	4acb      	ldr	r2, [pc, #812]	; (14e3c <__ieee754_pow+0x9d8>)
   14b10:	4bcb      	ldr	r3, [pc, #812]	; (14e40 <__ieee754_pow+0x9dc>)
   14b12:	f002 f8b3 	bl	16c7c <__aeabi_dmul>
   14b16:	4acb      	ldr	r2, [pc, #812]	; (14e44 <__ieee754_pow+0x9e0>)
   14b18:	0006      	movs	r6, r0
   14b1a:	000f      	movs	r7, r1
   14b1c:	4bca      	ldr	r3, [pc, #808]	; (14e48 <__ieee754_pow+0x9e4>)
   14b1e:	0020      	movs	r0, r4
   14b20:	0029      	movs	r1, r5
   14b22:	f002 f8ab 	bl	16c7c <__aeabi_dmul>
   14b26:	0002      	movs	r2, r0
   14b28:	000b      	movs	r3, r1
   14b2a:	0030      	movs	r0, r6
   14b2c:	0039      	movs	r1, r7
   14b2e:	f001 f961 	bl	15df4 <__aeabi_dadd>
   14b32:	0004      	movs	r4, r0
   14b34:	000d      	movs	r5, r1
   14b36:	0002      	movs	r2, r0
   14b38:	000b      	movs	r3, r1
   14b3a:	9802      	ldr	r0, [sp, #8]
   14b3c:	9903      	ldr	r1, [sp, #12]
   14b3e:	f001 f959 	bl	15df4 <__aeabi_dadd>
   14b42:	9a02      	ldr	r2, [sp, #8]
   14b44:	9b03      	ldr	r3, [sp, #12]
   14b46:	0006      	movs	r6, r0
   14b48:	000f      	movs	r7, r1
   14b4a:	f002 fb17 	bl	1717c <__aeabi_dsub>
   14b4e:	0002      	movs	r2, r0
   14b50:	000b      	movs	r3, r1
   14b52:	0020      	movs	r0, r4
   14b54:	0029      	movs	r1, r5
   14b56:	f002 fb11 	bl	1717c <__aeabi_dsub>
   14b5a:	0032      	movs	r2, r6
   14b5c:	9000      	str	r0, [sp, #0]
   14b5e:	9101      	str	r1, [sp, #4]
   14b60:	003b      	movs	r3, r7
   14b62:	0030      	movs	r0, r6
   14b64:	0039      	movs	r1, r7
   14b66:	f002 f889 	bl	16c7c <__aeabi_dmul>
   14b6a:	0004      	movs	r4, r0
   14b6c:	000d      	movs	r5, r1
   14b6e:	4ab7      	ldr	r2, [pc, #732]	; (14e4c <__ieee754_pow+0x9e8>)
   14b70:	4bb7      	ldr	r3, [pc, #732]	; (14e50 <__ieee754_pow+0x9ec>)
   14b72:	f002 f883 	bl	16c7c <__aeabi_dmul>
   14b76:	4ab7      	ldr	r2, [pc, #732]	; (14e54 <__ieee754_pow+0x9f0>)
   14b78:	4bb7      	ldr	r3, [pc, #732]	; (14e58 <__ieee754_pow+0x9f4>)
   14b7a:	f002 faff 	bl	1717c <__aeabi_dsub>
   14b7e:	0022      	movs	r2, r4
   14b80:	002b      	movs	r3, r5
   14b82:	f002 f87b 	bl	16c7c <__aeabi_dmul>
   14b86:	4ab5      	ldr	r2, [pc, #724]	; (14e5c <__ieee754_pow+0x9f8>)
   14b88:	4bb5      	ldr	r3, [pc, #724]	; (14e60 <__ieee754_pow+0x9fc>)
   14b8a:	f001 f933 	bl	15df4 <__aeabi_dadd>
   14b8e:	0022      	movs	r2, r4
   14b90:	002b      	movs	r3, r5
   14b92:	f002 f873 	bl	16c7c <__aeabi_dmul>
   14b96:	4ab3      	ldr	r2, [pc, #716]	; (14e64 <__ieee754_pow+0xa00>)
   14b98:	4bb3      	ldr	r3, [pc, #716]	; (14e68 <__ieee754_pow+0xa04>)
   14b9a:	f002 faef 	bl	1717c <__aeabi_dsub>
   14b9e:	0022      	movs	r2, r4
   14ba0:	002b      	movs	r3, r5
   14ba2:	f002 f86b 	bl	16c7c <__aeabi_dmul>
   14ba6:	4ab1      	ldr	r2, [pc, #708]	; (14e6c <__ieee754_pow+0xa08>)
   14ba8:	4bb1      	ldr	r3, [pc, #708]	; (14e70 <__ieee754_pow+0xa0c>)
   14baa:	f001 f923 	bl	15df4 <__aeabi_dadd>
   14bae:	0022      	movs	r2, r4
   14bb0:	002b      	movs	r3, r5
   14bb2:	f002 f863 	bl	16c7c <__aeabi_dmul>
   14bb6:	0002      	movs	r2, r0
   14bb8:	000b      	movs	r3, r1
   14bba:	0030      	movs	r0, r6
   14bbc:	0039      	movs	r1, r7
   14bbe:	f002 fadd 	bl	1717c <__aeabi_dsub>
   14bc2:	0004      	movs	r4, r0
   14bc4:	000d      	movs	r5, r1
   14bc6:	0002      	movs	r2, r0
   14bc8:	000b      	movs	r3, r1
   14bca:	0030      	movs	r0, r6
   14bcc:	0039      	movs	r1, r7
   14bce:	f002 f855 	bl	16c7c <__aeabi_dmul>
   14bd2:	2380      	movs	r3, #128	; 0x80
   14bd4:	9002      	str	r0, [sp, #8]
   14bd6:	9103      	str	r1, [sp, #12]
   14bd8:	2200      	movs	r2, #0
   14bda:	05db      	lsls	r3, r3, #23
   14bdc:	0020      	movs	r0, r4
   14bde:	0029      	movs	r1, r5
   14be0:	f002 facc 	bl	1717c <__aeabi_dsub>
   14be4:	0002      	movs	r2, r0
   14be6:	000b      	movs	r3, r1
   14be8:	9802      	ldr	r0, [sp, #8]
   14bea:	9903      	ldr	r1, [sp, #12]
   14bec:	f001 fc12 	bl	16414 <__aeabi_ddiv>
   14bf0:	9a00      	ldr	r2, [sp, #0]
   14bf2:	9b01      	ldr	r3, [sp, #4]
   14bf4:	0004      	movs	r4, r0
   14bf6:	000d      	movs	r5, r1
   14bf8:	0030      	movs	r0, r6
   14bfa:	0039      	movs	r1, r7
   14bfc:	f002 f83e 	bl	16c7c <__aeabi_dmul>
   14c00:	9a00      	ldr	r2, [sp, #0]
   14c02:	9b01      	ldr	r3, [sp, #4]
   14c04:	f001 f8f6 	bl	15df4 <__aeabi_dadd>
   14c08:	0002      	movs	r2, r0
   14c0a:	000b      	movs	r3, r1
   14c0c:	0020      	movs	r0, r4
   14c0e:	0029      	movs	r1, r5
   14c10:	f002 fab4 	bl	1717c <__aeabi_dsub>
   14c14:	0032      	movs	r2, r6
   14c16:	003b      	movs	r3, r7
   14c18:	f002 fab0 	bl	1717c <__aeabi_dsub>
   14c1c:	0002      	movs	r2, r0
   14c1e:	000b      	movs	r3, r1
   14c20:	2000      	movs	r0, #0
   14c22:	4994      	ldr	r1, [pc, #592]	; (14e74 <__ieee754_pow+0xa10>)
   14c24:	f002 faaa 	bl	1717c <__aeabi_dsub>
   14c28:	4643      	mov	r3, r8
   14c2a:	185b      	adds	r3, r3, r1
   14c2c:	151a      	asrs	r2, r3, #20
   14c2e:	2a00      	cmp	r2, #0
   14c30:	dc00      	bgt.n	14c34 <__ieee754_pow+0x7d0>
   14c32:	e149      	b.n	14ec8 <__ieee754_pow+0xa64>
   14c34:	0019      	movs	r1, r3
   14c36:	9a06      	ldr	r2, [sp, #24]
   14c38:	9b07      	ldr	r3, [sp, #28]
   14c3a:	f002 f81f 	bl	16c7c <__aeabi_dmul>
   14c3e:	e459      	b.n	144f4 <__ieee754_pow+0x90>
   14c40:	003a      	movs	r2, r7
   14c42:	0033      	movs	r3, r6
   14c44:	0038      	movs	r0, r7
   14c46:	0031      	movs	r1, r6
   14c48:	f002 f818 	bl	16c7c <__aeabi_dmul>
   14c4c:	e452      	b.n	144f4 <__ieee754_pow+0x90>
   14c4e:	4653      	mov	r3, sl
   14c50:	2b00      	cmp	r3, #0
   14c52:	db00      	blt.n	14c56 <__ieee754_pow+0x7f2>
   14c54:	e4d9      	b.n	1460a <__ieee754_pow+0x1a6>
   14c56:	9c00      	ldr	r4, [sp, #0]
   14c58:	9d01      	ldr	r5, [sp, #4]
   14c5a:	2280      	movs	r2, #128	; 0x80
   14c5c:	0612      	lsls	r2, r2, #24
   14c5e:	002b      	movs	r3, r5
   14c60:	4694      	mov	ip, r2
   14c62:	4463      	add	r3, ip
   14c64:	0020      	movs	r0, r4
   14c66:	0019      	movs	r1, r3
   14c68:	f7ff fc44 	bl	144f4 <__ieee754_pow+0x90>
   14c6c:	004b      	lsls	r3, r1, #1
   14c6e:	085b      	lsrs	r3, r3, #1
   14c70:	469a      	mov	sl, r3
   14c72:	4b81      	ldr	r3, [pc, #516]	; (14e78 <__ieee754_pow+0xa14>)
   14c74:	459a      	cmp	sl, r3
   14c76:	dc00      	bgt.n	14c7a <__ieee754_pow+0x816>
   14c78:	e0b1      	b.n	14dde <__ieee754_pow+0x97a>
   14c7a:	4b80      	ldr	r3, [pc, #512]	; (14e7c <__ieee754_pow+0xa18>)
   14c7c:	445b      	add	r3, fp
   14c7e:	431a      	orrs	r2, r3
   14c80:	d10c      	bne.n	14c9c <__ieee754_pow+0x838>
   14c82:	0032      	movs	r2, r6
   14c84:	003b      	movs	r3, r7
   14c86:	f002 fa79 	bl	1717c <__aeabi_dsub>
   14c8a:	0002      	movs	r2, r0
   14c8c:	000b      	movs	r3, r1
   14c8e:	9800      	ldr	r0, [sp, #0]
   14c90:	9901      	ldr	r1, [sp, #4]
   14c92:	f000 fcbb 	bl	1560c <__aeabi_dcmple>
   14c96:	2800      	cmp	r0, #0
   14c98:	d100      	bne.n	14c9c <__ieee754_pow+0x838>
   14c9a:	e6ee      	b.n	14a7a <__ieee754_pow+0x616>
   14c9c:	9806      	ldr	r0, [sp, #24]
   14c9e:	9907      	ldr	r1, [sp, #28]
   14ca0:	4a77      	ldr	r2, [pc, #476]	; (14e80 <__ieee754_pow+0xa1c>)
   14ca2:	4b78      	ldr	r3, [pc, #480]	; (14e84 <__ieee754_pow+0xa20>)
   14ca4:	f001 ffea 	bl	16c7c <__aeabi_dmul>
   14ca8:	4a75      	ldr	r2, [pc, #468]	; (14e80 <__ieee754_pow+0xa1c>)
   14caa:	4b76      	ldr	r3, [pc, #472]	; (14e84 <__ieee754_pow+0xa20>)
   14cac:	f001 ffe6 	bl	16c7c <__aeabi_dmul>
   14cb0:	f7ff fc20 	bl	144f4 <__ieee754_pow+0x90>
   14cb4:	2300      	movs	r3, #0
   14cb6:	4c74      	ldr	r4, [pc, #464]	; (14e88 <__ieee754_pow+0xa24>)
   14cb8:	9306      	str	r3, [sp, #24]
   14cba:	9407      	str	r4, [sp, #28]
   14cbc:	e652      	b.n	14964 <__ieee754_pow+0x500>
   14cbe:	0002      	movs	r2, r0
   14cc0:	000b      	movs	r3, r1
   14cc2:	2000      	movs	r0, #0
   14cc4:	496b      	ldr	r1, [pc, #428]	; (14e74 <__ieee754_pow+0xa10>)
   14cc6:	f001 fba5 	bl	16414 <__aeabi_ddiv>
   14cca:	f7ff fc32 	bl	14532 <__ieee754_pow+0xce>
   14cce:	4653      	mov	r3, sl
   14cd0:	2b00      	cmp	r3, #0
   14cd2:	db00      	blt.n	14cd6 <__ieee754_pow+0x872>
   14cd4:	e499      	b.n	1460a <__ieee754_pow+0x1a6>
   14cd6:	e454      	b.n	14582 <__ieee754_pow+0x11e>
   14cd8:	4b6c      	ldr	r3, [pc, #432]	; (14e8c <__ieee754_pow+0xa28>)
   14cda:	429c      	cmp	r4, r3
   14cdc:	ddf7      	ble.n	14cce <__ieee754_pow+0x86a>
   14cde:	4b65      	ldr	r3, [pc, #404]	; (14e74 <__ieee754_pow+0xa10>)
   14ce0:	429c      	cmp	r4, r3
   14ce2:	dd00      	ble.n	14ce6 <__ieee754_pow+0x882>
   14ce4:	e44a      	b.n	1457c <__ieee754_pow+0x118>
   14ce6:	2200      	movs	r2, #0
   14ce8:	4b62      	ldr	r3, [pc, #392]	; (14e74 <__ieee754_pow+0xa10>)
   14cea:	f002 fa47 	bl	1717c <__aeabi_dsub>
   14cee:	22c0      	movs	r2, #192	; 0xc0
   14cf0:	4b67      	ldr	r3, [pc, #412]	; (14e90 <__ieee754_pow+0xa2c>)
   14cf2:	05d2      	lsls	r2, r2, #23
   14cf4:	0004      	movs	r4, r0
   14cf6:	000d      	movs	r5, r1
   14cf8:	f001 ffc0 	bl	16c7c <__aeabi_dmul>
   14cfc:	4a65      	ldr	r2, [pc, #404]	; (14e94 <__ieee754_pow+0xa30>)
   14cfe:	0006      	movs	r6, r0
   14d00:	000f      	movs	r7, r1
   14d02:	4b65      	ldr	r3, [pc, #404]	; (14e98 <__ieee754_pow+0xa34>)
   14d04:	0020      	movs	r0, r4
   14d06:	0029      	movs	r1, r5
   14d08:	f001 ffb8 	bl	16c7c <__aeabi_dmul>
   14d0c:	2200      	movs	r2, #0
   14d0e:	9002      	str	r0, [sp, #8]
   14d10:	9103      	str	r1, [sp, #12]
   14d12:	4b62      	ldr	r3, [pc, #392]	; (14e9c <__ieee754_pow+0xa38>)
   14d14:	0020      	movs	r0, r4
   14d16:	0029      	movs	r1, r5
   14d18:	f001 ffb0 	bl	16c7c <__aeabi_dmul>
   14d1c:	0002      	movs	r2, r0
   14d1e:	000b      	movs	r3, r1
   14d20:	485f      	ldr	r0, [pc, #380]	; (14ea0 <__ieee754_pow+0xa3c>)
   14d22:	4960      	ldr	r1, [pc, #384]	; (14ea4 <__ieee754_pow+0xa40>)
   14d24:	f002 fa2a 	bl	1717c <__aeabi_dsub>
   14d28:	0022      	movs	r2, r4
   14d2a:	002b      	movs	r3, r5
   14d2c:	f001 ffa6 	bl	16c7c <__aeabi_dmul>
   14d30:	0002      	movs	r2, r0
   14d32:	000b      	movs	r3, r1
   14d34:	2000      	movs	r0, #0
   14d36:	495c      	ldr	r1, [pc, #368]	; (14ea8 <__ieee754_pow+0xa44>)
   14d38:	f002 fa20 	bl	1717c <__aeabi_dsub>
   14d3c:	0022      	movs	r2, r4
   14d3e:	9004      	str	r0, [sp, #16]
   14d40:	9105      	str	r1, [sp, #20]
   14d42:	002b      	movs	r3, r5
   14d44:	0020      	movs	r0, r4
   14d46:	0029      	movs	r1, r5
   14d48:	f001 ff98 	bl	16c7c <__aeabi_dmul>
   14d4c:	0002      	movs	r2, r0
   14d4e:	000b      	movs	r3, r1
   14d50:	9804      	ldr	r0, [sp, #16]
   14d52:	9905      	ldr	r1, [sp, #20]
   14d54:	f001 ff92 	bl	16c7c <__aeabi_dmul>
   14d58:	4a54      	ldr	r2, [pc, #336]	; (14eac <__ieee754_pow+0xa48>)
   14d5a:	4b4d      	ldr	r3, [pc, #308]	; (14e90 <__ieee754_pow+0xa2c>)
   14d5c:	f001 ff8e 	bl	16c7c <__aeabi_dmul>
   14d60:	0002      	movs	r2, r0
   14d62:	000b      	movs	r3, r1
   14d64:	9802      	ldr	r0, [sp, #8]
   14d66:	9903      	ldr	r1, [sp, #12]
   14d68:	f002 fa08 	bl	1717c <__aeabi_dsub>
   14d6c:	0002      	movs	r2, r0
   14d6e:	000b      	movs	r3, r1
   14d70:	0004      	movs	r4, r0
   14d72:	000d      	movs	r5, r1
   14d74:	0030      	movs	r0, r6
   14d76:	0039      	movs	r1, r7
   14d78:	f001 f83c 	bl	15df4 <__aeabi_dadd>
   14d7c:	2000      	movs	r0, #0
   14d7e:	0032      	movs	r2, r6
   14d80:	003b      	movs	r3, r7
   14d82:	9002      	str	r0, [sp, #8]
   14d84:	9103      	str	r1, [sp, #12]
   14d86:	f002 f9f9 	bl	1717c <__aeabi_dsub>
   14d8a:	0002      	movs	r2, r0
   14d8c:	000b      	movs	r3, r1
   14d8e:	0020      	movs	r0, r4
   14d90:	0029      	movs	r1, r5
   14d92:	f002 f9f3 	bl	1717c <__aeabi_dsub>
   14d96:	9004      	str	r0, [sp, #16]
   14d98:	9105      	str	r1, [sp, #20]
   14d9a:	e5d9      	b.n	14950 <__ieee754_pow+0x4ec>
   14d9c:	4a44      	ldr	r2, [pc, #272]	; (14eb0 <__ieee754_pow+0xa4c>)
   14d9e:	4b45      	ldr	r3, [pc, #276]	; (14eb4 <__ieee754_pow+0xa50>)
   14da0:	9806      	ldr	r0, [sp, #24]
   14da2:	9907      	ldr	r1, [sp, #28]
   14da4:	f001 ff6a 	bl	16c7c <__aeabi_dmul>
   14da8:	4a41      	ldr	r2, [pc, #260]	; (14eb0 <__ieee754_pow+0xa4c>)
   14daa:	4b42      	ldr	r3, [pc, #264]	; (14eb4 <__ieee754_pow+0xa50>)
   14dac:	f001 ff66 	bl	16c7c <__aeabi_dmul>
   14db0:	f7ff fba0 	bl	144f4 <__ieee754_pow+0x90>
   14db4:	2a00      	cmp	r2, #0
   14db6:	d001      	beq.n	14dbc <__ieee754_pow+0x958>
   14db8:	f7ff fba9 	bl	1450e <__ieee754_pow+0xaa>
   14dbc:	3214      	adds	r2, #20
   14dbe:	1ad3      	subs	r3, r2, r3
   14dc0:	002a      	movs	r2, r5
   14dc2:	411a      	asrs	r2, r3
   14dc4:	0011      	movs	r1, r2
   14dc6:	4099      	lsls	r1, r3
   14dc8:	428d      	cmp	r5, r1
   14dca:	d001      	beq.n	14dd0 <__ieee754_pow+0x96c>
   14dcc:	f7ff fb76 	bl	144bc <__ieee754_pow+0x58>
   14dd0:	2301      	movs	r3, #1
   14dd2:	401a      	ands	r2, r3
   14dd4:	18db      	adds	r3, r3, r3
   14dd6:	1a9b      	subs	r3, r3, r2
   14dd8:	469b      	mov	fp, r3
   14dda:	f7ff fb6f 	bl	144bc <__ieee754_pow+0x58>
   14dde:	2200      	movs	r2, #0
   14de0:	4b31      	ldr	r3, [pc, #196]	; (14ea8 <__ieee754_pow+0xa44>)
   14de2:	4690      	mov	r8, r2
   14de4:	4691      	mov	r9, r2
   14de6:	459a      	cmp	sl, r3
   14de8:	dc00      	bgt.n	14dec <__ieee754_pow+0x988>
   14dea:	e67b      	b.n	14ae4 <__ieee754_pow+0x680>
   14dec:	e645      	b.n	14a7a <__ieee754_pow+0x616>
   14dee:	0002      	movs	r2, r0
   14df0:	000b      	movs	r3, r1
   14df2:	f002 f9c3 	bl	1717c <__aeabi_dsub>
   14df6:	0002      	movs	r2, r0
   14df8:	000b      	movs	r3, r1
   14dfa:	f001 fb0b 	bl	16414 <__aeabi_ddiv>
   14dfe:	f7ff fb79 	bl	144f4 <__ieee754_pow+0x90>
   14e02:	2380      	movs	r3, #128	; 0x80
   14e04:	4c2c      	ldr	r4, [pc, #176]	; (14eb8 <__ieee754_pow+0xa54>)
   14e06:	05db      	lsls	r3, r3, #23
   14e08:	9308      	str	r3, [sp, #32]
   14e0a:	9409      	str	r4, [sp, #36]	; 0x24
   14e0c:	4b2b      	ldr	r3, [pc, #172]	; (14ebc <__ieee754_pow+0xa58>)
   14e0e:	4c2c      	ldr	r4, [pc, #176]	; (14ec0 <__ieee754_pow+0xa5c>)
   14e10:	2200      	movs	r2, #0
   14e12:	930c      	str	r3, [sp, #48]	; 0x30
   14e14:	940d      	str	r4, [sp, #52]	; 0x34
   14e16:	2480      	movs	r4, #128	; 0x80
   14e18:	4b2a      	ldr	r3, [pc, #168]	; (14ec4 <__ieee754_pow+0xa60>)
   14e1a:	02e4      	lsls	r4, r4, #11
   14e1c:	9206      	str	r2, [sp, #24]
   14e1e:	9307      	str	r3, [sp, #28]
   14e20:	e449      	b.n	146b6 <__ieee754_pow+0x252>
   14e22:	464b      	mov	r3, r9
   14e24:	425b      	negs	r3, r3
   14e26:	4699      	mov	r9, r3
   14e28:	e64a      	b.n	14ac0 <__ieee754_pow+0x65c>
   14e2a:	46c0      	nop			; (mov r8, r8)
   14e2c:	fffffc02 	.word	0xfffffc02
   14e30:	fffffc01 	.word	0xfffffc01
   14e34:	000fffff 	.word	0x000fffff
   14e38:	3fe62e43 	.word	0x3fe62e43
   14e3c:	fefa39ef 	.word	0xfefa39ef
   14e40:	3fe62e42 	.word	0x3fe62e42
   14e44:	0ca86c39 	.word	0x0ca86c39
   14e48:	be205c61 	.word	0xbe205c61
   14e4c:	72bea4d0 	.word	0x72bea4d0
   14e50:	3e663769 	.word	0x3e663769
   14e54:	c5d26bf1 	.word	0xc5d26bf1
   14e58:	3ebbbd41 	.word	0x3ebbbd41
   14e5c:	af25de2c 	.word	0xaf25de2c
   14e60:	3f11566a 	.word	0x3f11566a
   14e64:	16bebd93 	.word	0x16bebd93
   14e68:	3f66c16c 	.word	0x3f66c16c
   14e6c:	5555553e 	.word	0x5555553e
   14e70:	3fc55555 	.word	0x3fc55555
   14e74:	3ff00000 	.word	0x3ff00000
   14e78:	4090cbff 	.word	0x4090cbff
   14e7c:	3f6f3400 	.word	0x3f6f3400
   14e80:	c2f8f359 	.word	0xc2f8f359
   14e84:	01a56e1f 	.word	0x01a56e1f
   14e88:	bff00000 	.word	0xbff00000
   14e8c:	3feffffe 	.word	0x3feffffe
   14e90:	3ff71547 	.word	0x3ff71547
   14e94:	f85ddf44 	.word	0xf85ddf44
   14e98:	3e54ae0b 	.word	0x3e54ae0b
   14e9c:	3fd00000 	.word	0x3fd00000
   14ea0:	55555555 	.word	0x55555555
   14ea4:	3fd55555 	.word	0x3fd55555
   14ea8:	3fe00000 	.word	0x3fe00000
   14eac:	652b82fe 	.word	0x652b82fe
   14eb0:	8800759c 	.word	0x8800759c
   14eb4:	7e37e43c 	.word	0x7e37e43c
   14eb8:	3fe2b803 	.word	0x3fe2b803
   14ebc:	43cfd006 	.word	0x43cfd006
   14ec0:	3e4cfdeb 	.word	0x3e4cfdeb
   14ec4:	3ff80000 	.word	0x3ff80000
   14ec8:	464a      	mov	r2, r9
   14eca:	f000 f999 	bl	15200 <scalbn>
   14ece:	e6b2      	b.n	14c36 <__ieee754_pow+0x7d2>

00014ed0 <__ieee754_sqrt>:
   14ed0:	4b6c      	ldr	r3, [pc, #432]	; (15084 <__ieee754_sqrt+0x1b4>)
   14ed2:	b5f0      	push	{r4, r5, r6, r7, lr}
   14ed4:	000a      	movs	r2, r1
   14ed6:	4646      	mov	r6, r8
   14ed8:	000d      	movs	r5, r1
   14eda:	46d6      	mov	lr, sl
   14edc:	464f      	mov	r7, r9
   14ede:	0019      	movs	r1, r3
   14ee0:	b5c0      	push	{r6, r7, lr}
   14ee2:	0004      	movs	r4, r0
   14ee4:	0006      	movs	r6, r0
   14ee6:	4029      	ands	r1, r5
   14ee8:	4299      	cmp	r1, r3
   14eea:	d100      	bne.n	14eee <__ieee754_sqrt+0x1e>
   14eec:	e0a7      	b.n	1503e <__ieee754_sqrt+0x16e>
   14eee:	2d00      	cmp	r5, #0
   14ef0:	dc00      	bgt.n	14ef4 <__ieee754_sqrt+0x24>
   14ef2:	e081      	b.n	14ff8 <__ieee754_sqrt+0x128>
   14ef4:	152f      	asrs	r7, r5, #20
   14ef6:	d100      	bne.n	14efa <__ieee754_sqrt+0x2a>
   14ef8:	e08e      	b.n	15018 <__ieee754_sqrt+0x148>
   14efa:	4b63      	ldr	r3, [pc, #396]	; (15088 <__ieee754_sqrt+0x1b8>)
   14efc:	0312      	lsls	r2, r2, #12
   14efe:	469c      	mov	ip, r3
   14f00:	2380      	movs	r3, #128	; 0x80
   14f02:	0b12      	lsrs	r2, r2, #12
   14f04:	035b      	lsls	r3, r3, #13
   14f06:	4467      	add	r7, ip
   14f08:	431a      	orrs	r2, r3
   14f0a:	07fb      	lsls	r3, r7, #31
   14f0c:	d468      	bmi.n	14fe0 <__ieee754_sqrt+0x110>
   14f0e:	107b      	asrs	r3, r7, #1
   14f10:	469c      	mov	ip, r3
   14f12:	0fe3      	lsrs	r3, r4, #31
   14f14:	189b      	adds	r3, r3, r2
   14f16:	189b      	adds	r3, r3, r2
   14f18:	2280      	movs	r2, #128	; 0x80
   14f1a:	2116      	movs	r1, #22
   14f1c:	2600      	movs	r6, #0
   14f1e:	2500      	movs	r5, #0
   14f20:	0064      	lsls	r4, r4, #1
   14f22:	0392      	lsls	r2, r2, #14
   14f24:	18a8      	adds	r0, r5, r2
   14f26:	4298      	cmp	r0, r3
   14f28:	dc02      	bgt.n	14f30 <__ieee754_sqrt+0x60>
   14f2a:	1885      	adds	r5, r0, r2
   14f2c:	1a1b      	subs	r3, r3, r0
   14f2e:	18b6      	adds	r6, r6, r2
   14f30:	0fe0      	lsrs	r0, r4, #31
   14f32:	005b      	lsls	r3, r3, #1
   14f34:	3901      	subs	r1, #1
   14f36:	181b      	adds	r3, r3, r0
   14f38:	0064      	lsls	r4, r4, #1
   14f3a:	0852      	lsrs	r2, r2, #1
   14f3c:	2900      	cmp	r1, #0
   14f3e:	d1f1      	bne.n	14f24 <__ieee754_sqrt+0x54>
   14f40:	2200      	movs	r2, #0
   14f42:	4692      	mov	sl, r2
   14f44:	4690      	mov	r8, r2
   14f46:	2280      	movs	r2, #128	; 0x80
   14f48:	2020      	movs	r0, #32
   14f4a:	0612      	lsls	r2, r2, #24
   14f4c:	e009      	b.n	14f62 <__ieee754_sqrt+0x92>
   14f4e:	42ab      	cmp	r3, r5
   14f50:	d038      	beq.n	14fc4 <__ieee754_sqrt+0xf4>
   14f52:	0fe1      	lsrs	r1, r4, #31
   14f54:	18c9      	adds	r1, r1, r3
   14f56:	3801      	subs	r0, #1
   14f58:	18cb      	adds	r3, r1, r3
   14f5a:	0064      	lsls	r4, r4, #1
   14f5c:	0852      	lsrs	r2, r2, #1
   14f5e:	2800      	cmp	r0, #0
   14f60:	d018      	beq.n	14f94 <__ieee754_sqrt+0xc4>
   14f62:	4641      	mov	r1, r8
   14f64:	1851      	adds	r1, r2, r1
   14f66:	42ab      	cmp	r3, r5
   14f68:	ddf1      	ble.n	14f4e <__ieee754_sqrt+0x7e>
   14f6a:	188f      	adds	r7, r1, r2
   14f6c:	46b8      	mov	r8, r7
   14f6e:	46a9      	mov	r9, r5
   14f70:	2900      	cmp	r1, #0
   14f72:	db30      	blt.n	14fd6 <__ieee754_sqrt+0x106>
   14f74:	1b5b      	subs	r3, r3, r5
   14f76:	428c      	cmp	r4, r1
   14f78:	41ad      	sbcs	r5, r5
   14f7a:	426d      	negs	r5, r5
   14f7c:	1b5b      	subs	r3, r3, r5
   14f7e:	1a64      	subs	r4, r4, r1
   14f80:	0fe1      	lsrs	r1, r4, #31
   14f82:	18c9      	adds	r1, r1, r3
   14f84:	3801      	subs	r0, #1
   14f86:	4492      	add	sl, r2
   14f88:	464d      	mov	r5, r9
   14f8a:	18cb      	adds	r3, r1, r3
   14f8c:	0064      	lsls	r4, r4, #1
   14f8e:	0852      	lsrs	r2, r2, #1
   14f90:	2800      	cmp	r0, #0
   14f92:	d1e6      	bne.n	14f62 <__ieee754_sqrt+0x92>
   14f94:	4323      	orrs	r3, r4
   14f96:	d128      	bne.n	14fea <__ieee754_sqrt+0x11a>
   14f98:	4653      	mov	r3, sl
   14f9a:	085b      	lsrs	r3, r3, #1
   14f9c:	493b      	ldr	r1, [pc, #236]	; (1508c <__ieee754_sqrt+0x1bc>)
   14f9e:	1072      	asrs	r2, r6, #1
   14fa0:	4688      	mov	r8, r1
   14fa2:	4442      	add	r2, r8
   14fa4:	07f1      	lsls	r1, r6, #31
   14fa6:	d502      	bpl.n	14fae <__ieee754_sqrt+0xde>
   14fa8:	2180      	movs	r1, #128	; 0x80
   14faa:	0609      	lsls	r1, r1, #24
   14fac:	430b      	orrs	r3, r1
   14fae:	4661      	mov	r1, ip
   14fb0:	001e      	movs	r6, r3
   14fb2:	050f      	lsls	r7, r1, #20
   14fb4:	18bd      	adds	r5, r7, r2
   14fb6:	0030      	movs	r0, r6
   14fb8:	0029      	movs	r1, r5
   14fba:	bc1c      	pop	{r2, r3, r4}
   14fbc:	4690      	mov	r8, r2
   14fbe:	4699      	mov	r9, r3
   14fc0:	46a2      	mov	sl, r4
   14fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14fc4:	42a1      	cmp	r1, r4
   14fc6:	d8c4      	bhi.n	14f52 <__ieee754_sqrt+0x82>
   14fc8:	188f      	adds	r7, r1, r2
   14fca:	46b8      	mov	r8, r7
   14fcc:	2900      	cmp	r1, #0
   14fce:	db42      	blt.n	15056 <__ieee754_sqrt+0x186>
   14fd0:	4699      	mov	r9, r3
   14fd2:	2300      	movs	r3, #0
   14fd4:	e7d3      	b.n	14f7e <__ieee754_sqrt+0xae>
   14fd6:	2f00      	cmp	r7, #0
   14fd8:	db2f      	blt.n	1503a <__ieee754_sqrt+0x16a>
   14fda:	1c6f      	adds	r7, r5, #1
   14fdc:	46b9      	mov	r9, r7
   14fde:	e7c9      	b.n	14f74 <__ieee754_sqrt+0xa4>
   14fe0:	0fe1      	lsrs	r1, r4, #31
   14fe2:	0052      	lsls	r2, r2, #1
   14fe4:	188a      	adds	r2, r1, r2
   14fe6:	0064      	lsls	r4, r4, #1
   14fe8:	e791      	b.n	14f0e <__ieee754_sqrt+0x3e>
   14fea:	4653      	mov	r3, sl
   14fec:	3301      	adds	r3, #1
   14fee:	d035      	beq.n	1505c <__ieee754_sqrt+0x18c>
   14ff0:	4653      	mov	r3, sl
   14ff2:	3301      	adds	r3, #1
   14ff4:	085b      	lsrs	r3, r3, #1
   14ff6:	e7d1      	b.n	14f9c <__ieee754_sqrt+0xcc>
   14ff8:	006b      	lsls	r3, r5, #1
   14ffa:	085b      	lsrs	r3, r3, #1
   14ffc:	4303      	orrs	r3, r0
   14ffe:	d0da      	beq.n	14fb6 <__ieee754_sqrt+0xe6>
   15000:	2700      	movs	r7, #0
   15002:	2d00      	cmp	r5, #0
   15004:	d132      	bne.n	1506c <__ieee754_sqrt+0x19c>
   15006:	0ae2      	lsrs	r2, r4, #11
   15008:	3f15      	subs	r7, #21
   1500a:	0564      	lsls	r4, r4, #21
   1500c:	2a00      	cmp	r2, #0
   1500e:	d0fa      	beq.n	15006 <__ieee754_sqrt+0x136>
   15010:	2380      	movs	r3, #128	; 0x80
   15012:	035b      	lsls	r3, r3, #13
   15014:	421a      	tst	r2, r3
   15016:	d124      	bne.n	15062 <__ieee754_sqrt+0x192>
   15018:	2080      	movs	r0, #128	; 0x80
   1501a:	2300      	movs	r3, #0
   1501c:	0340      	lsls	r0, r0, #13
   1501e:	e000      	b.n	15022 <__ieee754_sqrt+0x152>
   15020:	000b      	movs	r3, r1
   15022:	0052      	lsls	r2, r2, #1
   15024:	1c59      	adds	r1, r3, #1
   15026:	4202      	tst	r2, r0
   15028:	d0fa      	beq.n	15020 <__ieee754_sqrt+0x150>
   1502a:	2020      	movs	r0, #32
   1502c:	1a40      	subs	r0, r0, r1
   1502e:	1aff      	subs	r7, r7, r3
   15030:	0023      	movs	r3, r4
   15032:	40c3      	lsrs	r3, r0
   15034:	408c      	lsls	r4, r1
   15036:	431a      	orrs	r2, r3
   15038:	e75f      	b.n	14efa <__ieee754_sqrt+0x2a>
   1503a:	46a9      	mov	r9, r5
   1503c:	e79a      	b.n	14f74 <__ieee754_sqrt+0xa4>
   1503e:	002b      	movs	r3, r5
   15040:	0002      	movs	r2, r0
   15042:	0029      	movs	r1, r5
   15044:	f001 fe1a 	bl	16c7c <__aeabi_dmul>
   15048:	0032      	movs	r2, r6
   1504a:	002b      	movs	r3, r5
   1504c:	f000 fed2 	bl	15df4 <__aeabi_dadd>
   15050:	0006      	movs	r6, r0
   15052:	000d      	movs	r5, r1
   15054:	e7af      	b.n	14fb6 <__ieee754_sqrt+0xe6>
   15056:	2f00      	cmp	r7, #0
   15058:	dabf      	bge.n	14fda <__ieee754_sqrt+0x10a>
   1505a:	e7b9      	b.n	14fd0 <__ieee754_sqrt+0x100>
   1505c:	3601      	adds	r6, #1
   1505e:	2300      	movs	r3, #0
   15060:	e79c      	b.n	14f9c <__ieee754_sqrt+0xcc>
   15062:	2301      	movs	r3, #1
   15064:	2100      	movs	r1, #0
   15066:	2020      	movs	r0, #32
   15068:	425b      	negs	r3, r3
   1506a:	e7e0      	b.n	1502e <__ieee754_sqrt+0x15e>
   1506c:	002b      	movs	r3, r5
   1506e:	0002      	movs	r2, r0
   15070:	0029      	movs	r1, r5
   15072:	f002 f883 	bl	1717c <__aeabi_dsub>
   15076:	0002      	movs	r2, r0
   15078:	000b      	movs	r3, r1
   1507a:	f001 f9cb 	bl	16414 <__aeabi_ddiv>
   1507e:	0006      	movs	r6, r0
   15080:	000d      	movs	r5, r1
   15082:	e798      	b.n	14fb6 <__ieee754_sqrt+0xe6>
   15084:	7ff00000 	.word	0x7ff00000
   15088:	fffffc01 	.word	0xfffffc01
   1508c:	3fe00000 	.word	0x3fe00000

00015090 <fabs>:
   15090:	0049      	lsls	r1, r1, #1
   15092:	084b      	lsrs	r3, r1, #1
   15094:	0019      	movs	r1, r3
   15096:	4770      	bx	lr

00015098 <finite>:
   15098:	4b03      	ldr	r3, [pc, #12]	; (150a8 <finite+0x10>)
   1509a:	0048      	lsls	r0, r1, #1
   1509c:	469c      	mov	ip, r3
   1509e:	0840      	lsrs	r0, r0, #1
   150a0:	4460      	add	r0, ip
   150a2:	0fc0      	lsrs	r0, r0, #31
   150a4:	4770      	bx	lr
   150a6:	46c0      	nop			; (mov r8, r8)
   150a8:	80100000 	.word	0x80100000

000150ac <matherr>:
   150ac:	2000      	movs	r0, #0
   150ae:	4770      	bx	lr

000150b0 <nan>:
   150b0:	2000      	movs	r0, #0
   150b2:	4901      	ldr	r1, [pc, #4]	; (150b8 <nan+0x8>)
   150b4:	4770      	bx	lr
   150b6:	46c0      	nop			; (mov r8, r8)
   150b8:	7ff80000 	.word	0x7ff80000

000150bc <rint>:
   150bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   150be:	46c6      	mov	lr, r8
   150c0:	b500      	push	{lr}
   150c2:	0fcb      	lsrs	r3, r1, #31
   150c4:	4698      	mov	r8, r3
   150c6:	4c4a      	ldr	r4, [pc, #296]	; (151f0 <rint+0x134>)
   150c8:	004b      	lsls	r3, r1, #1
   150ca:	0d5b      	lsrs	r3, r3, #21
   150cc:	191e      	adds	r6, r3, r4
   150ce:	b082      	sub	sp, #8
   150d0:	0007      	movs	r7, r0
   150d2:	000a      	movs	r2, r1
   150d4:	2e13      	cmp	r6, #19
   150d6:	dc35      	bgt.n	15144 <rint+0x88>
   150d8:	2e00      	cmp	r6, #0
   150da:	db57      	blt.n	1518c <rint+0xd0>
   150dc:	4b45      	ldr	r3, [pc, #276]	; (151f4 <rint+0x138>)
   150de:	0004      	movs	r4, r0
   150e0:	4133      	asrs	r3, r6
   150e2:	001f      	movs	r7, r3
   150e4:	400f      	ands	r7, r1
   150e6:	4307      	orrs	r7, r0
   150e8:	000d      	movs	r5, r1
   150ea:	2f00      	cmp	r7, #0
   150ec:	d024      	beq.n	15138 <rint+0x7c>
   150ee:	085b      	lsrs	r3, r3, #1
   150f0:	001c      	movs	r4, r3
   150f2:	400c      	ands	r4, r1
   150f4:	4320      	orrs	r0, r4
   150f6:	2700      	movs	r7, #0
   150f8:	2800      	cmp	r0, #0
   150fa:	d007      	beq.n	1510c <rint+0x50>
   150fc:	2e13      	cmp	r6, #19
   150fe:	d100      	bne.n	15102 <rint+0x46>
   15100:	e073      	b.n	151ea <rint+0x12e>
   15102:	2280      	movs	r2, #128	; 0x80
   15104:	02d2      	lsls	r2, r2, #11
   15106:	4132      	asrs	r2, r6
   15108:	4399      	bics	r1, r3
   1510a:	430a      	orrs	r2, r1
   1510c:	4643      	mov	r3, r8
   1510e:	00de      	lsls	r6, r3, #3
   15110:	4b39      	ldr	r3, [pc, #228]	; (151f8 <rint+0x13c>)
   15112:	0011      	movs	r1, r2
   15114:	199e      	adds	r6, r3, r6
   15116:	6834      	ldr	r4, [r6, #0]
   15118:	6875      	ldr	r5, [r6, #4]
   1511a:	0038      	movs	r0, r7
   1511c:	0022      	movs	r2, r4
   1511e:	002b      	movs	r3, r5
   15120:	f000 fe68 	bl	15df4 <__aeabi_dadd>
   15124:	9000      	str	r0, [sp, #0]
   15126:	9101      	str	r1, [sp, #4]
   15128:	9800      	ldr	r0, [sp, #0]
   1512a:	9901      	ldr	r1, [sp, #4]
   1512c:	0022      	movs	r2, r4
   1512e:	002b      	movs	r3, r5
   15130:	f002 f824 	bl	1717c <__aeabi_dsub>
   15134:	0004      	movs	r4, r0
   15136:	000d      	movs	r5, r1
   15138:	0020      	movs	r0, r4
   1513a:	0029      	movs	r1, r5
   1513c:	b002      	add	sp, #8
   1513e:	bc04      	pop	{r2}
   15140:	4690      	mov	r8, r2
   15142:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15144:	2e33      	cmp	r6, #51	; 0x33
   15146:	dd0c      	ble.n	15162 <rint+0xa6>
   15148:	2380      	movs	r3, #128	; 0x80
   1514a:	0004      	movs	r4, r0
   1514c:	00db      	lsls	r3, r3, #3
   1514e:	000d      	movs	r5, r1
   15150:	429e      	cmp	r6, r3
   15152:	d1f1      	bne.n	15138 <rint+0x7c>
   15154:	0002      	movs	r2, r0
   15156:	000b      	movs	r3, r1
   15158:	f000 fe4c 	bl	15df4 <__aeabi_dadd>
   1515c:	0004      	movs	r4, r0
   1515e:	000d      	movs	r5, r1
   15160:	e7ea      	b.n	15138 <rint+0x7c>
   15162:	4c26      	ldr	r4, [pc, #152]	; (151fc <rint+0x140>)
   15164:	000d      	movs	r5, r1
   15166:	46a4      	mov	ip, r4
   15168:	2401      	movs	r4, #1
   1516a:	4463      	add	r3, ip
   1516c:	4264      	negs	r4, r4
   1516e:	40dc      	lsrs	r4, r3
   15170:	46a4      	mov	ip, r4
   15172:	4661      	mov	r1, ip
   15174:	0004      	movs	r4, r0
   15176:	4201      	tst	r1, r0
   15178:	d0de      	beq.n	15138 <rint+0x7c>
   1517a:	0849      	lsrs	r1, r1, #1
   1517c:	4201      	tst	r1, r0
   1517e:	d0c5      	beq.n	1510c <rint+0x50>
   15180:	2780      	movs	r7, #128	; 0x80
   15182:	05ff      	lsls	r7, r7, #23
   15184:	411f      	asrs	r7, r3
   15186:	4388      	bics	r0, r1
   15188:	4307      	orrs	r7, r0
   1518a:	e7bf      	b.n	1510c <rint+0x50>
   1518c:	004b      	lsls	r3, r1, #1
   1518e:	085b      	lsrs	r3, r3, #1
   15190:	4303      	orrs	r3, r0
   15192:	0004      	movs	r4, r0
   15194:	000d      	movs	r5, r1
   15196:	2b00      	cmp	r3, #0
   15198:	d0ce      	beq.n	15138 <rint+0x7c>
   1519a:	030b      	lsls	r3, r1, #12
   1519c:	0b1b      	lsrs	r3, r3, #12
   1519e:	4303      	orrs	r3, r0
   151a0:	001a      	movs	r2, r3
   151a2:	425b      	negs	r3, r3
   151a4:	4313      	orrs	r3, r2
   151a6:	2280      	movs	r2, #128	; 0x80
   151a8:	0b1b      	lsrs	r3, r3, #12
   151aa:	0312      	lsls	r2, r2, #12
   151ac:	4013      	ands	r3, r2
   151ae:	0c4a      	lsrs	r2, r1, #17
   151b0:	0452      	lsls	r2, r2, #17
   151b2:	4313      	orrs	r3, r2
   151b4:	0019      	movs	r1, r3
   151b6:	4643      	mov	r3, r8
   151b8:	00da      	lsls	r2, r3, #3
   151ba:	4b0f      	ldr	r3, [pc, #60]	; (151f8 <rint+0x13c>)
   151bc:	189b      	adds	r3, r3, r2
   151be:	681c      	ldr	r4, [r3, #0]
   151c0:	685d      	ldr	r5, [r3, #4]
   151c2:	0022      	movs	r2, r4
   151c4:	002b      	movs	r3, r5
   151c6:	f000 fe15 	bl	15df4 <__aeabi_dadd>
   151ca:	9000      	str	r0, [sp, #0]
   151cc:	9101      	str	r1, [sp, #4]
   151ce:	9800      	ldr	r0, [sp, #0]
   151d0:	9901      	ldr	r1, [sp, #4]
   151d2:	0022      	movs	r2, r4
   151d4:	002b      	movs	r3, r5
   151d6:	f001 ffd1 	bl	1717c <__aeabi_dsub>
   151da:	4642      	mov	r2, r8
   151dc:	004b      	lsls	r3, r1, #1
   151de:	085b      	lsrs	r3, r3, #1
   151e0:	07d6      	lsls	r6, r2, #31
   151e2:	4333      	orrs	r3, r6
   151e4:	0004      	movs	r4, r0
   151e6:	001d      	movs	r5, r3
   151e8:	e7a6      	b.n	15138 <rint+0x7c>
   151ea:	2780      	movs	r7, #128	; 0x80
   151ec:	063f      	lsls	r7, r7, #24
   151ee:	e788      	b.n	15102 <rint+0x46>
   151f0:	fffffc01 	.word	0xfffffc01
   151f4:	000fffff 	.word	0x000fffff
   151f8:	000198f0 	.word	0x000198f0
   151fc:	fffffbed 	.word	0xfffffbed

00015200 <scalbn>:
   15200:	004b      	lsls	r3, r1, #1
   15202:	b570      	push	{r4, r5, r6, lr}
   15204:	0d5b      	lsrs	r3, r3, #21
   15206:	0014      	movs	r4, r2
   15208:	000a      	movs	r2, r1
   1520a:	2b00      	cmp	r3, #0
   1520c:	d11a      	bne.n	15244 <scalbn+0x44>
   1520e:	004b      	lsls	r3, r1, #1
   15210:	085b      	lsrs	r3, r3, #1
   15212:	4303      	orrs	r3, r0
   15214:	d015      	beq.n	15242 <scalbn+0x42>
   15216:	2200      	movs	r2, #0
   15218:	4b22      	ldr	r3, [pc, #136]	; (152a4 <scalbn+0xa4>)
   1521a:	f001 fd2f 	bl	16c7c <__aeabi_dmul>
   1521e:	4b22      	ldr	r3, [pc, #136]	; (152a8 <scalbn+0xa8>)
   15220:	000a      	movs	r2, r1
   15222:	429c      	cmp	r4, r3
   15224:	db22      	blt.n	1526c <scalbn+0x6c>
   15226:	004b      	lsls	r3, r1, #1
   15228:	0d5b      	lsrs	r3, r3, #21
   1522a:	3b36      	subs	r3, #54	; 0x36
   1522c:	4d1f      	ldr	r5, [pc, #124]	; (152ac <scalbn+0xac>)
   1522e:	18e3      	adds	r3, r4, r3
   15230:	42ab      	cmp	r3, r5
   15232:	dc20      	bgt.n	15276 <scalbn+0x76>
   15234:	2b00      	cmp	r3, #0
   15236:	dd0d      	ble.n	15254 <scalbn+0x54>
   15238:	4c1d      	ldr	r4, [pc, #116]	; (152b0 <scalbn+0xb0>)
   1523a:	051b      	lsls	r3, r3, #20
   1523c:	4022      	ands	r2, r4
   1523e:	431a      	orrs	r2, r3
   15240:	0011      	movs	r1, r2
   15242:	bd70      	pop	{r4, r5, r6, pc}
   15244:	4d1b      	ldr	r5, [pc, #108]	; (152b4 <scalbn+0xb4>)
   15246:	42ab      	cmp	r3, r5
   15248:	d1f0      	bne.n	1522c <scalbn+0x2c>
   1524a:	0002      	movs	r2, r0
   1524c:	000b      	movs	r3, r1
   1524e:	f000 fdd1 	bl	15df4 <__aeabi_dadd>
   15252:	e7f6      	b.n	15242 <scalbn+0x42>
   15254:	001d      	movs	r5, r3
   15256:	3535      	adds	r5, #53	; 0x35
   15258:	da18      	bge.n	1528c <scalbn+0x8c>
   1525a:	4b17      	ldr	r3, [pc, #92]	; (152b8 <scalbn+0xb8>)
   1525c:	0002      	movs	r2, r0
   1525e:	429c      	cmp	r4, r3
   15260:	dc0a      	bgt.n	15278 <scalbn+0x78>
   15262:	000b      	movs	r3, r1
   15264:	4815      	ldr	r0, [pc, #84]	; (152bc <scalbn+0xbc>)
   15266:	4916      	ldr	r1, [pc, #88]	; (152c0 <scalbn+0xc0>)
   15268:	f000 f832 	bl	152d0 <copysign>
   1526c:	4a13      	ldr	r2, [pc, #76]	; (152bc <scalbn+0xbc>)
   1526e:	4b14      	ldr	r3, [pc, #80]	; (152c0 <scalbn+0xc0>)
   15270:	f001 fd04 	bl	16c7c <__aeabi_dmul>
   15274:	e7e5      	b.n	15242 <scalbn+0x42>
   15276:	0002      	movs	r2, r0
   15278:	000b      	movs	r3, r1
   1527a:	4812      	ldr	r0, [pc, #72]	; (152c4 <scalbn+0xc4>)
   1527c:	4912      	ldr	r1, [pc, #72]	; (152c8 <scalbn+0xc8>)
   1527e:	f000 f827 	bl	152d0 <copysign>
   15282:	4a10      	ldr	r2, [pc, #64]	; (152c4 <scalbn+0xc4>)
   15284:	4b10      	ldr	r3, [pc, #64]	; (152c8 <scalbn+0xc8>)
   15286:	f001 fcf9 	bl	16c7c <__aeabi_dmul>
   1528a:	e7da      	b.n	15242 <scalbn+0x42>
   1528c:	4c08      	ldr	r4, [pc, #32]	; (152b0 <scalbn+0xb0>)
   1528e:	3336      	adds	r3, #54	; 0x36
   15290:	4022      	ands	r2, r4
   15292:	051b      	lsls	r3, r3, #20
   15294:	4313      	orrs	r3, r2
   15296:	0019      	movs	r1, r3
   15298:	2200      	movs	r2, #0
   1529a:	4b0c      	ldr	r3, [pc, #48]	; (152cc <scalbn+0xcc>)
   1529c:	f001 fcee 	bl	16c7c <__aeabi_dmul>
   152a0:	e7cf      	b.n	15242 <scalbn+0x42>
   152a2:	46c0      	nop			; (mov r8, r8)
   152a4:	43500000 	.word	0x43500000
   152a8:	ffff3cb0 	.word	0xffff3cb0
   152ac:	000007fe 	.word	0x000007fe
   152b0:	800fffff 	.word	0x800fffff
   152b4:	000007ff 	.word	0x000007ff
   152b8:	0000c350 	.word	0x0000c350
   152bc:	c2f8f359 	.word	0xc2f8f359
   152c0:	01a56e1f 	.word	0x01a56e1f
   152c4:	8800759c 	.word	0x8800759c
   152c8:	7e37e43c 	.word	0x7e37e43c
   152cc:	3c900000 	.word	0x3c900000

000152d0 <copysign>:
   152d0:	b530      	push	{r4, r5, lr}
   152d2:	004a      	lsls	r2, r1, #1
   152d4:	0fdb      	lsrs	r3, r3, #31
   152d6:	07db      	lsls	r3, r3, #31
   152d8:	0852      	lsrs	r2, r2, #1
   152da:	431a      	orrs	r2, r3
   152dc:	0011      	movs	r1, r2
   152de:	bd30      	pop	{r4, r5, pc}

000152e0 <__udivsi3>:
   152e0:	2200      	movs	r2, #0
   152e2:	0843      	lsrs	r3, r0, #1
   152e4:	428b      	cmp	r3, r1
   152e6:	d374      	bcc.n	153d2 <__udivsi3+0xf2>
   152e8:	0903      	lsrs	r3, r0, #4
   152ea:	428b      	cmp	r3, r1
   152ec:	d35f      	bcc.n	153ae <__udivsi3+0xce>
   152ee:	0a03      	lsrs	r3, r0, #8
   152f0:	428b      	cmp	r3, r1
   152f2:	d344      	bcc.n	1537e <__udivsi3+0x9e>
   152f4:	0b03      	lsrs	r3, r0, #12
   152f6:	428b      	cmp	r3, r1
   152f8:	d328      	bcc.n	1534c <__udivsi3+0x6c>
   152fa:	0c03      	lsrs	r3, r0, #16
   152fc:	428b      	cmp	r3, r1
   152fe:	d30d      	bcc.n	1531c <__udivsi3+0x3c>
   15300:	22ff      	movs	r2, #255	; 0xff
   15302:	0209      	lsls	r1, r1, #8
   15304:	ba12      	rev	r2, r2
   15306:	0c03      	lsrs	r3, r0, #16
   15308:	428b      	cmp	r3, r1
   1530a:	d302      	bcc.n	15312 <__udivsi3+0x32>
   1530c:	1212      	asrs	r2, r2, #8
   1530e:	0209      	lsls	r1, r1, #8
   15310:	d065      	beq.n	153de <__udivsi3+0xfe>
   15312:	0b03      	lsrs	r3, r0, #12
   15314:	428b      	cmp	r3, r1
   15316:	d319      	bcc.n	1534c <__udivsi3+0x6c>
   15318:	e000      	b.n	1531c <__udivsi3+0x3c>
   1531a:	0a09      	lsrs	r1, r1, #8
   1531c:	0bc3      	lsrs	r3, r0, #15
   1531e:	428b      	cmp	r3, r1
   15320:	d301      	bcc.n	15326 <__udivsi3+0x46>
   15322:	03cb      	lsls	r3, r1, #15
   15324:	1ac0      	subs	r0, r0, r3
   15326:	4152      	adcs	r2, r2
   15328:	0b83      	lsrs	r3, r0, #14
   1532a:	428b      	cmp	r3, r1
   1532c:	d301      	bcc.n	15332 <__udivsi3+0x52>
   1532e:	038b      	lsls	r3, r1, #14
   15330:	1ac0      	subs	r0, r0, r3
   15332:	4152      	adcs	r2, r2
   15334:	0b43      	lsrs	r3, r0, #13
   15336:	428b      	cmp	r3, r1
   15338:	d301      	bcc.n	1533e <__udivsi3+0x5e>
   1533a:	034b      	lsls	r3, r1, #13
   1533c:	1ac0      	subs	r0, r0, r3
   1533e:	4152      	adcs	r2, r2
   15340:	0b03      	lsrs	r3, r0, #12
   15342:	428b      	cmp	r3, r1
   15344:	d301      	bcc.n	1534a <__udivsi3+0x6a>
   15346:	030b      	lsls	r3, r1, #12
   15348:	1ac0      	subs	r0, r0, r3
   1534a:	4152      	adcs	r2, r2
   1534c:	0ac3      	lsrs	r3, r0, #11
   1534e:	428b      	cmp	r3, r1
   15350:	d301      	bcc.n	15356 <__udivsi3+0x76>
   15352:	02cb      	lsls	r3, r1, #11
   15354:	1ac0      	subs	r0, r0, r3
   15356:	4152      	adcs	r2, r2
   15358:	0a83      	lsrs	r3, r0, #10
   1535a:	428b      	cmp	r3, r1
   1535c:	d301      	bcc.n	15362 <__udivsi3+0x82>
   1535e:	028b      	lsls	r3, r1, #10
   15360:	1ac0      	subs	r0, r0, r3
   15362:	4152      	adcs	r2, r2
   15364:	0a43      	lsrs	r3, r0, #9
   15366:	428b      	cmp	r3, r1
   15368:	d301      	bcc.n	1536e <__udivsi3+0x8e>
   1536a:	024b      	lsls	r3, r1, #9
   1536c:	1ac0      	subs	r0, r0, r3
   1536e:	4152      	adcs	r2, r2
   15370:	0a03      	lsrs	r3, r0, #8
   15372:	428b      	cmp	r3, r1
   15374:	d301      	bcc.n	1537a <__udivsi3+0x9a>
   15376:	020b      	lsls	r3, r1, #8
   15378:	1ac0      	subs	r0, r0, r3
   1537a:	4152      	adcs	r2, r2
   1537c:	d2cd      	bcs.n	1531a <__udivsi3+0x3a>
   1537e:	09c3      	lsrs	r3, r0, #7
   15380:	428b      	cmp	r3, r1
   15382:	d301      	bcc.n	15388 <__udivsi3+0xa8>
   15384:	01cb      	lsls	r3, r1, #7
   15386:	1ac0      	subs	r0, r0, r3
   15388:	4152      	adcs	r2, r2
   1538a:	0983      	lsrs	r3, r0, #6
   1538c:	428b      	cmp	r3, r1
   1538e:	d301      	bcc.n	15394 <__udivsi3+0xb4>
   15390:	018b      	lsls	r3, r1, #6
   15392:	1ac0      	subs	r0, r0, r3
   15394:	4152      	adcs	r2, r2
   15396:	0943      	lsrs	r3, r0, #5
   15398:	428b      	cmp	r3, r1
   1539a:	d301      	bcc.n	153a0 <__udivsi3+0xc0>
   1539c:	014b      	lsls	r3, r1, #5
   1539e:	1ac0      	subs	r0, r0, r3
   153a0:	4152      	adcs	r2, r2
   153a2:	0903      	lsrs	r3, r0, #4
   153a4:	428b      	cmp	r3, r1
   153a6:	d301      	bcc.n	153ac <__udivsi3+0xcc>
   153a8:	010b      	lsls	r3, r1, #4
   153aa:	1ac0      	subs	r0, r0, r3
   153ac:	4152      	adcs	r2, r2
   153ae:	08c3      	lsrs	r3, r0, #3
   153b0:	428b      	cmp	r3, r1
   153b2:	d301      	bcc.n	153b8 <__udivsi3+0xd8>
   153b4:	00cb      	lsls	r3, r1, #3
   153b6:	1ac0      	subs	r0, r0, r3
   153b8:	4152      	adcs	r2, r2
   153ba:	0883      	lsrs	r3, r0, #2
   153bc:	428b      	cmp	r3, r1
   153be:	d301      	bcc.n	153c4 <__udivsi3+0xe4>
   153c0:	008b      	lsls	r3, r1, #2
   153c2:	1ac0      	subs	r0, r0, r3
   153c4:	4152      	adcs	r2, r2
   153c6:	0843      	lsrs	r3, r0, #1
   153c8:	428b      	cmp	r3, r1
   153ca:	d301      	bcc.n	153d0 <__udivsi3+0xf0>
   153cc:	004b      	lsls	r3, r1, #1
   153ce:	1ac0      	subs	r0, r0, r3
   153d0:	4152      	adcs	r2, r2
   153d2:	1a41      	subs	r1, r0, r1
   153d4:	d200      	bcs.n	153d8 <__udivsi3+0xf8>
   153d6:	4601      	mov	r1, r0
   153d8:	4152      	adcs	r2, r2
   153da:	4610      	mov	r0, r2
   153dc:	4770      	bx	lr
   153de:	e7ff      	b.n	153e0 <__udivsi3+0x100>
   153e0:	b501      	push	{r0, lr}
   153e2:	2000      	movs	r0, #0
   153e4:	f000 f8f0 	bl	155c8 <__aeabi_idiv0>
   153e8:	bd02      	pop	{r1, pc}
   153ea:	46c0      	nop			; (mov r8, r8)

000153ec <__aeabi_uidivmod>:
   153ec:	2900      	cmp	r1, #0
   153ee:	d0f7      	beq.n	153e0 <__udivsi3+0x100>
   153f0:	e776      	b.n	152e0 <__udivsi3>
   153f2:	4770      	bx	lr

000153f4 <__divsi3>:
   153f4:	4603      	mov	r3, r0
   153f6:	430b      	orrs	r3, r1
   153f8:	d47f      	bmi.n	154fa <__divsi3+0x106>
   153fa:	2200      	movs	r2, #0
   153fc:	0843      	lsrs	r3, r0, #1
   153fe:	428b      	cmp	r3, r1
   15400:	d374      	bcc.n	154ec <__divsi3+0xf8>
   15402:	0903      	lsrs	r3, r0, #4
   15404:	428b      	cmp	r3, r1
   15406:	d35f      	bcc.n	154c8 <__divsi3+0xd4>
   15408:	0a03      	lsrs	r3, r0, #8
   1540a:	428b      	cmp	r3, r1
   1540c:	d344      	bcc.n	15498 <__divsi3+0xa4>
   1540e:	0b03      	lsrs	r3, r0, #12
   15410:	428b      	cmp	r3, r1
   15412:	d328      	bcc.n	15466 <__divsi3+0x72>
   15414:	0c03      	lsrs	r3, r0, #16
   15416:	428b      	cmp	r3, r1
   15418:	d30d      	bcc.n	15436 <__divsi3+0x42>
   1541a:	22ff      	movs	r2, #255	; 0xff
   1541c:	0209      	lsls	r1, r1, #8
   1541e:	ba12      	rev	r2, r2
   15420:	0c03      	lsrs	r3, r0, #16
   15422:	428b      	cmp	r3, r1
   15424:	d302      	bcc.n	1542c <__divsi3+0x38>
   15426:	1212      	asrs	r2, r2, #8
   15428:	0209      	lsls	r1, r1, #8
   1542a:	d065      	beq.n	154f8 <__divsi3+0x104>
   1542c:	0b03      	lsrs	r3, r0, #12
   1542e:	428b      	cmp	r3, r1
   15430:	d319      	bcc.n	15466 <__divsi3+0x72>
   15432:	e000      	b.n	15436 <__divsi3+0x42>
   15434:	0a09      	lsrs	r1, r1, #8
   15436:	0bc3      	lsrs	r3, r0, #15
   15438:	428b      	cmp	r3, r1
   1543a:	d301      	bcc.n	15440 <__divsi3+0x4c>
   1543c:	03cb      	lsls	r3, r1, #15
   1543e:	1ac0      	subs	r0, r0, r3
   15440:	4152      	adcs	r2, r2
   15442:	0b83      	lsrs	r3, r0, #14
   15444:	428b      	cmp	r3, r1
   15446:	d301      	bcc.n	1544c <__divsi3+0x58>
   15448:	038b      	lsls	r3, r1, #14
   1544a:	1ac0      	subs	r0, r0, r3
   1544c:	4152      	adcs	r2, r2
   1544e:	0b43      	lsrs	r3, r0, #13
   15450:	428b      	cmp	r3, r1
   15452:	d301      	bcc.n	15458 <__divsi3+0x64>
   15454:	034b      	lsls	r3, r1, #13
   15456:	1ac0      	subs	r0, r0, r3
   15458:	4152      	adcs	r2, r2
   1545a:	0b03      	lsrs	r3, r0, #12
   1545c:	428b      	cmp	r3, r1
   1545e:	d301      	bcc.n	15464 <__divsi3+0x70>
   15460:	030b      	lsls	r3, r1, #12
   15462:	1ac0      	subs	r0, r0, r3
   15464:	4152      	adcs	r2, r2
   15466:	0ac3      	lsrs	r3, r0, #11
   15468:	428b      	cmp	r3, r1
   1546a:	d301      	bcc.n	15470 <__divsi3+0x7c>
   1546c:	02cb      	lsls	r3, r1, #11
   1546e:	1ac0      	subs	r0, r0, r3
   15470:	4152      	adcs	r2, r2
   15472:	0a83      	lsrs	r3, r0, #10
   15474:	428b      	cmp	r3, r1
   15476:	d301      	bcc.n	1547c <__divsi3+0x88>
   15478:	028b      	lsls	r3, r1, #10
   1547a:	1ac0      	subs	r0, r0, r3
   1547c:	4152      	adcs	r2, r2
   1547e:	0a43      	lsrs	r3, r0, #9
   15480:	428b      	cmp	r3, r1
   15482:	d301      	bcc.n	15488 <__divsi3+0x94>
   15484:	024b      	lsls	r3, r1, #9
   15486:	1ac0      	subs	r0, r0, r3
   15488:	4152      	adcs	r2, r2
   1548a:	0a03      	lsrs	r3, r0, #8
   1548c:	428b      	cmp	r3, r1
   1548e:	d301      	bcc.n	15494 <__divsi3+0xa0>
   15490:	020b      	lsls	r3, r1, #8
   15492:	1ac0      	subs	r0, r0, r3
   15494:	4152      	adcs	r2, r2
   15496:	d2cd      	bcs.n	15434 <__divsi3+0x40>
   15498:	09c3      	lsrs	r3, r0, #7
   1549a:	428b      	cmp	r3, r1
   1549c:	d301      	bcc.n	154a2 <__divsi3+0xae>
   1549e:	01cb      	lsls	r3, r1, #7
   154a0:	1ac0      	subs	r0, r0, r3
   154a2:	4152      	adcs	r2, r2
   154a4:	0983      	lsrs	r3, r0, #6
   154a6:	428b      	cmp	r3, r1
   154a8:	d301      	bcc.n	154ae <__divsi3+0xba>
   154aa:	018b      	lsls	r3, r1, #6
   154ac:	1ac0      	subs	r0, r0, r3
   154ae:	4152      	adcs	r2, r2
   154b0:	0943      	lsrs	r3, r0, #5
   154b2:	428b      	cmp	r3, r1
   154b4:	d301      	bcc.n	154ba <__divsi3+0xc6>
   154b6:	014b      	lsls	r3, r1, #5
   154b8:	1ac0      	subs	r0, r0, r3
   154ba:	4152      	adcs	r2, r2
   154bc:	0903      	lsrs	r3, r0, #4
   154be:	428b      	cmp	r3, r1
   154c0:	d301      	bcc.n	154c6 <__divsi3+0xd2>
   154c2:	010b      	lsls	r3, r1, #4
   154c4:	1ac0      	subs	r0, r0, r3
   154c6:	4152      	adcs	r2, r2
   154c8:	08c3      	lsrs	r3, r0, #3
   154ca:	428b      	cmp	r3, r1
   154cc:	d301      	bcc.n	154d2 <__divsi3+0xde>
   154ce:	00cb      	lsls	r3, r1, #3
   154d0:	1ac0      	subs	r0, r0, r3
   154d2:	4152      	adcs	r2, r2
   154d4:	0883      	lsrs	r3, r0, #2
   154d6:	428b      	cmp	r3, r1
   154d8:	d301      	bcc.n	154de <__divsi3+0xea>
   154da:	008b      	lsls	r3, r1, #2
   154dc:	1ac0      	subs	r0, r0, r3
   154de:	4152      	adcs	r2, r2
   154e0:	0843      	lsrs	r3, r0, #1
   154e2:	428b      	cmp	r3, r1
   154e4:	d301      	bcc.n	154ea <__divsi3+0xf6>
   154e6:	004b      	lsls	r3, r1, #1
   154e8:	1ac0      	subs	r0, r0, r3
   154ea:	4152      	adcs	r2, r2
   154ec:	1a41      	subs	r1, r0, r1
   154ee:	d200      	bcs.n	154f2 <__divsi3+0xfe>
   154f0:	4601      	mov	r1, r0
   154f2:	4152      	adcs	r2, r2
   154f4:	4610      	mov	r0, r2
   154f6:	4770      	bx	lr
   154f8:	e05d      	b.n	155b6 <__divsi3+0x1c2>
   154fa:	0fca      	lsrs	r2, r1, #31
   154fc:	d000      	beq.n	15500 <__divsi3+0x10c>
   154fe:	4249      	negs	r1, r1
   15500:	1003      	asrs	r3, r0, #32
   15502:	d300      	bcc.n	15506 <__divsi3+0x112>
   15504:	4240      	negs	r0, r0
   15506:	4053      	eors	r3, r2
   15508:	2200      	movs	r2, #0
   1550a:	469c      	mov	ip, r3
   1550c:	0903      	lsrs	r3, r0, #4
   1550e:	428b      	cmp	r3, r1
   15510:	d32d      	bcc.n	1556e <__divsi3+0x17a>
   15512:	0a03      	lsrs	r3, r0, #8
   15514:	428b      	cmp	r3, r1
   15516:	d312      	bcc.n	1553e <__divsi3+0x14a>
   15518:	22fc      	movs	r2, #252	; 0xfc
   1551a:	0189      	lsls	r1, r1, #6
   1551c:	ba12      	rev	r2, r2
   1551e:	0a03      	lsrs	r3, r0, #8
   15520:	428b      	cmp	r3, r1
   15522:	d30c      	bcc.n	1553e <__divsi3+0x14a>
   15524:	0189      	lsls	r1, r1, #6
   15526:	1192      	asrs	r2, r2, #6
   15528:	428b      	cmp	r3, r1
   1552a:	d308      	bcc.n	1553e <__divsi3+0x14a>
   1552c:	0189      	lsls	r1, r1, #6
   1552e:	1192      	asrs	r2, r2, #6
   15530:	428b      	cmp	r3, r1
   15532:	d304      	bcc.n	1553e <__divsi3+0x14a>
   15534:	0189      	lsls	r1, r1, #6
   15536:	d03a      	beq.n	155ae <__divsi3+0x1ba>
   15538:	1192      	asrs	r2, r2, #6
   1553a:	e000      	b.n	1553e <__divsi3+0x14a>
   1553c:	0989      	lsrs	r1, r1, #6
   1553e:	09c3      	lsrs	r3, r0, #7
   15540:	428b      	cmp	r3, r1
   15542:	d301      	bcc.n	15548 <__divsi3+0x154>
   15544:	01cb      	lsls	r3, r1, #7
   15546:	1ac0      	subs	r0, r0, r3
   15548:	4152      	adcs	r2, r2
   1554a:	0983      	lsrs	r3, r0, #6
   1554c:	428b      	cmp	r3, r1
   1554e:	d301      	bcc.n	15554 <__divsi3+0x160>
   15550:	018b      	lsls	r3, r1, #6
   15552:	1ac0      	subs	r0, r0, r3
   15554:	4152      	adcs	r2, r2
   15556:	0943      	lsrs	r3, r0, #5
   15558:	428b      	cmp	r3, r1
   1555a:	d301      	bcc.n	15560 <__divsi3+0x16c>
   1555c:	014b      	lsls	r3, r1, #5
   1555e:	1ac0      	subs	r0, r0, r3
   15560:	4152      	adcs	r2, r2
   15562:	0903      	lsrs	r3, r0, #4
   15564:	428b      	cmp	r3, r1
   15566:	d301      	bcc.n	1556c <__divsi3+0x178>
   15568:	010b      	lsls	r3, r1, #4
   1556a:	1ac0      	subs	r0, r0, r3
   1556c:	4152      	adcs	r2, r2
   1556e:	08c3      	lsrs	r3, r0, #3
   15570:	428b      	cmp	r3, r1
   15572:	d301      	bcc.n	15578 <__divsi3+0x184>
   15574:	00cb      	lsls	r3, r1, #3
   15576:	1ac0      	subs	r0, r0, r3
   15578:	4152      	adcs	r2, r2
   1557a:	0883      	lsrs	r3, r0, #2
   1557c:	428b      	cmp	r3, r1
   1557e:	d301      	bcc.n	15584 <__divsi3+0x190>
   15580:	008b      	lsls	r3, r1, #2
   15582:	1ac0      	subs	r0, r0, r3
   15584:	4152      	adcs	r2, r2
   15586:	d2d9      	bcs.n	1553c <__divsi3+0x148>
   15588:	0843      	lsrs	r3, r0, #1
   1558a:	428b      	cmp	r3, r1
   1558c:	d301      	bcc.n	15592 <__divsi3+0x19e>
   1558e:	004b      	lsls	r3, r1, #1
   15590:	1ac0      	subs	r0, r0, r3
   15592:	4152      	adcs	r2, r2
   15594:	1a41      	subs	r1, r0, r1
   15596:	d200      	bcs.n	1559a <__divsi3+0x1a6>
   15598:	4601      	mov	r1, r0
   1559a:	4663      	mov	r3, ip
   1559c:	4152      	adcs	r2, r2
   1559e:	105b      	asrs	r3, r3, #1
   155a0:	4610      	mov	r0, r2
   155a2:	d301      	bcc.n	155a8 <__divsi3+0x1b4>
   155a4:	4240      	negs	r0, r0
   155a6:	2b00      	cmp	r3, #0
   155a8:	d500      	bpl.n	155ac <__divsi3+0x1b8>
   155aa:	4249      	negs	r1, r1
   155ac:	4770      	bx	lr
   155ae:	4663      	mov	r3, ip
   155b0:	105b      	asrs	r3, r3, #1
   155b2:	d300      	bcc.n	155b6 <__divsi3+0x1c2>
   155b4:	4240      	negs	r0, r0
   155b6:	b501      	push	{r0, lr}
   155b8:	2000      	movs	r0, #0
   155ba:	f000 f805 	bl	155c8 <__aeabi_idiv0>
   155be:	bd02      	pop	{r1, pc}

000155c0 <__aeabi_idivmod>:
   155c0:	2900      	cmp	r1, #0
   155c2:	d0f8      	beq.n	155b6 <__divsi3+0x1c2>
   155c4:	e716      	b.n	153f4 <__divsi3>
   155c6:	4770      	bx	lr

000155c8 <__aeabi_idiv0>:
   155c8:	4770      	bx	lr
   155ca:	46c0      	nop			; (mov r8, r8)

000155cc <__aeabi_cdrcmple>:
   155cc:	4684      	mov	ip, r0
   155ce:	1c10      	adds	r0, r2, #0
   155d0:	4662      	mov	r2, ip
   155d2:	468c      	mov	ip, r1
   155d4:	1c19      	adds	r1, r3, #0
   155d6:	4663      	mov	r3, ip
   155d8:	e000      	b.n	155dc <__aeabi_cdcmpeq>
   155da:	46c0      	nop			; (mov r8, r8)

000155dc <__aeabi_cdcmpeq>:
   155dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   155de:	f001 faeb 	bl	16bb8 <__ledf2>
   155e2:	2800      	cmp	r0, #0
   155e4:	d401      	bmi.n	155ea <__aeabi_cdcmpeq+0xe>
   155e6:	2100      	movs	r1, #0
   155e8:	42c8      	cmn	r0, r1
   155ea:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000155ec <__aeabi_dcmpeq>:
   155ec:	b510      	push	{r4, lr}
   155ee:	f001 fa45 	bl	16a7c <__eqdf2>
   155f2:	4240      	negs	r0, r0
   155f4:	3001      	adds	r0, #1
   155f6:	bd10      	pop	{r4, pc}

000155f8 <__aeabi_dcmplt>:
   155f8:	b510      	push	{r4, lr}
   155fa:	f001 fadd 	bl	16bb8 <__ledf2>
   155fe:	2800      	cmp	r0, #0
   15600:	db01      	blt.n	15606 <__aeabi_dcmplt+0xe>
   15602:	2000      	movs	r0, #0
   15604:	bd10      	pop	{r4, pc}
   15606:	2001      	movs	r0, #1
   15608:	bd10      	pop	{r4, pc}
   1560a:	46c0      	nop			; (mov r8, r8)

0001560c <__aeabi_dcmple>:
   1560c:	b510      	push	{r4, lr}
   1560e:	f001 fad3 	bl	16bb8 <__ledf2>
   15612:	2800      	cmp	r0, #0
   15614:	dd01      	ble.n	1561a <__aeabi_dcmple+0xe>
   15616:	2000      	movs	r0, #0
   15618:	bd10      	pop	{r4, pc}
   1561a:	2001      	movs	r0, #1
   1561c:	bd10      	pop	{r4, pc}
   1561e:	46c0      	nop			; (mov r8, r8)

00015620 <__aeabi_dcmpgt>:
   15620:	b510      	push	{r4, lr}
   15622:	f001 fa65 	bl	16af0 <__gedf2>
   15626:	2800      	cmp	r0, #0
   15628:	dc01      	bgt.n	1562e <__aeabi_dcmpgt+0xe>
   1562a:	2000      	movs	r0, #0
   1562c:	bd10      	pop	{r4, pc}
   1562e:	2001      	movs	r0, #1
   15630:	bd10      	pop	{r4, pc}
   15632:	46c0      	nop			; (mov r8, r8)

00015634 <__aeabi_dcmpge>:
   15634:	b510      	push	{r4, lr}
   15636:	f001 fa5b 	bl	16af0 <__gedf2>
   1563a:	2800      	cmp	r0, #0
   1563c:	da01      	bge.n	15642 <__aeabi_dcmpge+0xe>
   1563e:	2000      	movs	r0, #0
   15640:	bd10      	pop	{r4, pc}
   15642:	2001      	movs	r0, #1
   15644:	bd10      	pop	{r4, pc}
   15646:	46c0      	nop			; (mov r8, r8)

00015648 <__aeabi_uldivmod>:
   15648:	2b00      	cmp	r3, #0
   1564a:	d111      	bne.n	15670 <__aeabi_uldivmod+0x28>
   1564c:	2a00      	cmp	r2, #0
   1564e:	d10f      	bne.n	15670 <__aeabi_uldivmod+0x28>
   15650:	2900      	cmp	r1, #0
   15652:	d100      	bne.n	15656 <__aeabi_uldivmod+0xe>
   15654:	2800      	cmp	r0, #0
   15656:	d002      	beq.n	1565e <__aeabi_uldivmod+0x16>
   15658:	2100      	movs	r1, #0
   1565a:	43c9      	mvns	r1, r1
   1565c:	1c08      	adds	r0, r1, #0
   1565e:	b407      	push	{r0, r1, r2}
   15660:	4802      	ldr	r0, [pc, #8]	; (1566c <__aeabi_uldivmod+0x24>)
   15662:	a102      	add	r1, pc, #8	; (adr r1, 1566c <__aeabi_uldivmod+0x24>)
   15664:	1840      	adds	r0, r0, r1
   15666:	9002      	str	r0, [sp, #8]
   15668:	bd03      	pop	{r0, r1, pc}
   1566a:	46c0      	nop			; (mov r8, r8)
   1566c:	ffffff5d 	.word	0xffffff5d
   15670:	b403      	push	{r0, r1}
   15672:	4668      	mov	r0, sp
   15674:	b501      	push	{r0, lr}
   15676:	9802      	ldr	r0, [sp, #8]
   15678:	f000 f84e 	bl	15718 <__udivmoddi4>
   1567c:	9b01      	ldr	r3, [sp, #4]
   1567e:	469e      	mov	lr, r3
   15680:	b002      	add	sp, #8
   15682:	bc0c      	pop	{r2, r3}
   15684:	4770      	bx	lr
   15686:	46c0      	nop			; (mov r8, r8)

00015688 <__aeabi_lmul>:
   15688:	b5f0      	push	{r4, r5, r6, r7, lr}
   1568a:	46ce      	mov	lr, r9
   1568c:	4647      	mov	r7, r8
   1568e:	0415      	lsls	r5, r2, #16
   15690:	0c2d      	lsrs	r5, r5, #16
   15692:	002e      	movs	r6, r5
   15694:	b580      	push	{r7, lr}
   15696:	0407      	lsls	r7, r0, #16
   15698:	0c14      	lsrs	r4, r2, #16
   1569a:	0c3f      	lsrs	r7, r7, #16
   1569c:	4699      	mov	r9, r3
   1569e:	0c03      	lsrs	r3, r0, #16
   156a0:	437e      	muls	r6, r7
   156a2:	435d      	muls	r5, r3
   156a4:	4367      	muls	r7, r4
   156a6:	4363      	muls	r3, r4
   156a8:	197f      	adds	r7, r7, r5
   156aa:	0c34      	lsrs	r4, r6, #16
   156ac:	19e4      	adds	r4, r4, r7
   156ae:	469c      	mov	ip, r3
   156b0:	42a5      	cmp	r5, r4
   156b2:	d903      	bls.n	156bc <__aeabi_lmul+0x34>
   156b4:	2380      	movs	r3, #128	; 0x80
   156b6:	025b      	lsls	r3, r3, #9
   156b8:	4698      	mov	r8, r3
   156ba:	44c4      	add	ip, r8
   156bc:	464b      	mov	r3, r9
   156be:	4351      	muls	r1, r2
   156c0:	4343      	muls	r3, r0
   156c2:	0436      	lsls	r6, r6, #16
   156c4:	0c36      	lsrs	r6, r6, #16
   156c6:	0c25      	lsrs	r5, r4, #16
   156c8:	0424      	lsls	r4, r4, #16
   156ca:	4465      	add	r5, ip
   156cc:	19a4      	adds	r4, r4, r6
   156ce:	1859      	adds	r1, r3, r1
   156d0:	1949      	adds	r1, r1, r5
   156d2:	0020      	movs	r0, r4
   156d4:	bc0c      	pop	{r2, r3}
   156d6:	4690      	mov	r8, r2
   156d8:	4699      	mov	r9, r3
   156da:	bdf0      	pop	{r4, r5, r6, r7, pc}

000156dc <__aeabi_d2uiz>:
   156dc:	b570      	push	{r4, r5, r6, lr}
   156de:	2200      	movs	r2, #0
   156e0:	4b0c      	ldr	r3, [pc, #48]	; (15714 <__aeabi_d2uiz+0x38>)
   156e2:	0004      	movs	r4, r0
   156e4:	000d      	movs	r5, r1
   156e6:	f7ff ffa5 	bl	15634 <__aeabi_dcmpge>
   156ea:	2800      	cmp	r0, #0
   156ec:	d104      	bne.n	156f8 <__aeabi_d2uiz+0x1c>
   156ee:	0020      	movs	r0, r4
   156f0:	0029      	movs	r1, r5
   156f2:	f002 f879 	bl	177e8 <__aeabi_d2iz>
   156f6:	bd70      	pop	{r4, r5, r6, pc}
   156f8:	4b06      	ldr	r3, [pc, #24]	; (15714 <__aeabi_d2uiz+0x38>)
   156fa:	2200      	movs	r2, #0
   156fc:	0020      	movs	r0, r4
   156fe:	0029      	movs	r1, r5
   15700:	f001 fd3c 	bl	1717c <__aeabi_dsub>
   15704:	f002 f870 	bl	177e8 <__aeabi_d2iz>
   15708:	2380      	movs	r3, #128	; 0x80
   1570a:	061b      	lsls	r3, r3, #24
   1570c:	469c      	mov	ip, r3
   1570e:	4460      	add	r0, ip
   15710:	e7f1      	b.n	156f6 <__aeabi_d2uiz+0x1a>
   15712:	46c0      	nop			; (mov r8, r8)
   15714:	41e00000 	.word	0x41e00000

00015718 <__udivmoddi4>:
   15718:	b5f0      	push	{r4, r5, r6, r7, lr}
   1571a:	4657      	mov	r7, sl
   1571c:	464e      	mov	r6, r9
   1571e:	4645      	mov	r5, r8
   15720:	46de      	mov	lr, fp
   15722:	b5e0      	push	{r5, r6, r7, lr}
   15724:	0004      	movs	r4, r0
   15726:	b083      	sub	sp, #12
   15728:	000d      	movs	r5, r1
   1572a:	4692      	mov	sl, r2
   1572c:	4699      	mov	r9, r3
   1572e:	428b      	cmp	r3, r1
   15730:	d82f      	bhi.n	15792 <__udivmoddi4+0x7a>
   15732:	d02c      	beq.n	1578e <__udivmoddi4+0x76>
   15734:	4649      	mov	r1, r9
   15736:	4650      	mov	r0, sl
   15738:	f002 f974 	bl	17a24 <__clzdi2>
   1573c:	0029      	movs	r1, r5
   1573e:	0006      	movs	r6, r0
   15740:	0020      	movs	r0, r4
   15742:	f002 f96f 	bl	17a24 <__clzdi2>
   15746:	1a33      	subs	r3, r6, r0
   15748:	4698      	mov	r8, r3
   1574a:	3b20      	subs	r3, #32
   1574c:	469b      	mov	fp, r3
   1574e:	d500      	bpl.n	15752 <__udivmoddi4+0x3a>
   15750:	e074      	b.n	1583c <__udivmoddi4+0x124>
   15752:	4653      	mov	r3, sl
   15754:	465a      	mov	r2, fp
   15756:	4093      	lsls	r3, r2
   15758:	001f      	movs	r7, r3
   1575a:	4653      	mov	r3, sl
   1575c:	4642      	mov	r2, r8
   1575e:	4093      	lsls	r3, r2
   15760:	001e      	movs	r6, r3
   15762:	42af      	cmp	r7, r5
   15764:	d829      	bhi.n	157ba <__udivmoddi4+0xa2>
   15766:	d026      	beq.n	157b6 <__udivmoddi4+0x9e>
   15768:	465b      	mov	r3, fp
   1576a:	1ba4      	subs	r4, r4, r6
   1576c:	41bd      	sbcs	r5, r7
   1576e:	2b00      	cmp	r3, #0
   15770:	da00      	bge.n	15774 <__udivmoddi4+0x5c>
   15772:	e079      	b.n	15868 <__udivmoddi4+0x150>
   15774:	2200      	movs	r2, #0
   15776:	2300      	movs	r3, #0
   15778:	9200      	str	r2, [sp, #0]
   1577a:	9301      	str	r3, [sp, #4]
   1577c:	2301      	movs	r3, #1
   1577e:	465a      	mov	r2, fp
   15780:	4093      	lsls	r3, r2
   15782:	9301      	str	r3, [sp, #4]
   15784:	2301      	movs	r3, #1
   15786:	4642      	mov	r2, r8
   15788:	4093      	lsls	r3, r2
   1578a:	9300      	str	r3, [sp, #0]
   1578c:	e019      	b.n	157c2 <__udivmoddi4+0xaa>
   1578e:	4282      	cmp	r2, r0
   15790:	d9d0      	bls.n	15734 <__udivmoddi4+0x1c>
   15792:	2200      	movs	r2, #0
   15794:	2300      	movs	r3, #0
   15796:	9200      	str	r2, [sp, #0]
   15798:	9301      	str	r3, [sp, #4]
   1579a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1579c:	2b00      	cmp	r3, #0
   1579e:	d001      	beq.n	157a4 <__udivmoddi4+0x8c>
   157a0:	601c      	str	r4, [r3, #0]
   157a2:	605d      	str	r5, [r3, #4]
   157a4:	9800      	ldr	r0, [sp, #0]
   157a6:	9901      	ldr	r1, [sp, #4]
   157a8:	b003      	add	sp, #12
   157aa:	bc3c      	pop	{r2, r3, r4, r5}
   157ac:	4690      	mov	r8, r2
   157ae:	4699      	mov	r9, r3
   157b0:	46a2      	mov	sl, r4
   157b2:	46ab      	mov	fp, r5
   157b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   157b6:	42a3      	cmp	r3, r4
   157b8:	d9d6      	bls.n	15768 <__udivmoddi4+0x50>
   157ba:	2200      	movs	r2, #0
   157bc:	2300      	movs	r3, #0
   157be:	9200      	str	r2, [sp, #0]
   157c0:	9301      	str	r3, [sp, #4]
   157c2:	4643      	mov	r3, r8
   157c4:	2b00      	cmp	r3, #0
   157c6:	d0e8      	beq.n	1579a <__udivmoddi4+0x82>
   157c8:	07fb      	lsls	r3, r7, #31
   157ca:	0872      	lsrs	r2, r6, #1
   157cc:	431a      	orrs	r2, r3
   157ce:	4646      	mov	r6, r8
   157d0:	087b      	lsrs	r3, r7, #1
   157d2:	e00e      	b.n	157f2 <__udivmoddi4+0xda>
   157d4:	42ab      	cmp	r3, r5
   157d6:	d101      	bne.n	157dc <__udivmoddi4+0xc4>
   157d8:	42a2      	cmp	r2, r4
   157da:	d80c      	bhi.n	157f6 <__udivmoddi4+0xde>
   157dc:	1aa4      	subs	r4, r4, r2
   157de:	419d      	sbcs	r5, r3
   157e0:	2001      	movs	r0, #1
   157e2:	1924      	adds	r4, r4, r4
   157e4:	416d      	adcs	r5, r5
   157e6:	2100      	movs	r1, #0
   157e8:	3e01      	subs	r6, #1
   157ea:	1824      	adds	r4, r4, r0
   157ec:	414d      	adcs	r5, r1
   157ee:	2e00      	cmp	r6, #0
   157f0:	d006      	beq.n	15800 <__udivmoddi4+0xe8>
   157f2:	42ab      	cmp	r3, r5
   157f4:	d9ee      	bls.n	157d4 <__udivmoddi4+0xbc>
   157f6:	3e01      	subs	r6, #1
   157f8:	1924      	adds	r4, r4, r4
   157fa:	416d      	adcs	r5, r5
   157fc:	2e00      	cmp	r6, #0
   157fe:	d1f8      	bne.n	157f2 <__udivmoddi4+0xda>
   15800:	465b      	mov	r3, fp
   15802:	9800      	ldr	r0, [sp, #0]
   15804:	9901      	ldr	r1, [sp, #4]
   15806:	1900      	adds	r0, r0, r4
   15808:	4169      	adcs	r1, r5
   1580a:	2b00      	cmp	r3, #0
   1580c:	db22      	blt.n	15854 <__udivmoddi4+0x13c>
   1580e:	002b      	movs	r3, r5
   15810:	465a      	mov	r2, fp
   15812:	40d3      	lsrs	r3, r2
   15814:	002a      	movs	r2, r5
   15816:	4644      	mov	r4, r8
   15818:	40e2      	lsrs	r2, r4
   1581a:	001c      	movs	r4, r3
   1581c:	465b      	mov	r3, fp
   1581e:	0015      	movs	r5, r2
   15820:	2b00      	cmp	r3, #0
   15822:	db2c      	blt.n	1587e <__udivmoddi4+0x166>
   15824:	0026      	movs	r6, r4
   15826:	409e      	lsls	r6, r3
   15828:	0033      	movs	r3, r6
   1582a:	0026      	movs	r6, r4
   1582c:	4647      	mov	r7, r8
   1582e:	40be      	lsls	r6, r7
   15830:	0032      	movs	r2, r6
   15832:	1a80      	subs	r0, r0, r2
   15834:	4199      	sbcs	r1, r3
   15836:	9000      	str	r0, [sp, #0]
   15838:	9101      	str	r1, [sp, #4]
   1583a:	e7ae      	b.n	1579a <__udivmoddi4+0x82>
   1583c:	4642      	mov	r2, r8
   1583e:	2320      	movs	r3, #32
   15840:	1a9b      	subs	r3, r3, r2
   15842:	4652      	mov	r2, sl
   15844:	40da      	lsrs	r2, r3
   15846:	4641      	mov	r1, r8
   15848:	0013      	movs	r3, r2
   1584a:	464a      	mov	r2, r9
   1584c:	408a      	lsls	r2, r1
   1584e:	0017      	movs	r7, r2
   15850:	431f      	orrs	r7, r3
   15852:	e782      	b.n	1575a <__udivmoddi4+0x42>
   15854:	4642      	mov	r2, r8
   15856:	2320      	movs	r3, #32
   15858:	1a9b      	subs	r3, r3, r2
   1585a:	002a      	movs	r2, r5
   1585c:	4646      	mov	r6, r8
   1585e:	409a      	lsls	r2, r3
   15860:	0023      	movs	r3, r4
   15862:	40f3      	lsrs	r3, r6
   15864:	4313      	orrs	r3, r2
   15866:	e7d5      	b.n	15814 <__udivmoddi4+0xfc>
   15868:	4642      	mov	r2, r8
   1586a:	2320      	movs	r3, #32
   1586c:	2100      	movs	r1, #0
   1586e:	1a9b      	subs	r3, r3, r2
   15870:	2200      	movs	r2, #0
   15872:	9100      	str	r1, [sp, #0]
   15874:	9201      	str	r2, [sp, #4]
   15876:	2201      	movs	r2, #1
   15878:	40da      	lsrs	r2, r3
   1587a:	9201      	str	r2, [sp, #4]
   1587c:	e782      	b.n	15784 <__udivmoddi4+0x6c>
   1587e:	4642      	mov	r2, r8
   15880:	2320      	movs	r3, #32
   15882:	0026      	movs	r6, r4
   15884:	1a9b      	subs	r3, r3, r2
   15886:	40de      	lsrs	r6, r3
   15888:	002f      	movs	r7, r5
   1588a:	46b4      	mov	ip, r6
   1588c:	4097      	lsls	r7, r2
   1588e:	4666      	mov	r6, ip
   15890:	003b      	movs	r3, r7
   15892:	4333      	orrs	r3, r6
   15894:	e7c9      	b.n	1582a <__udivmoddi4+0x112>
   15896:	46c0      	nop			; (mov r8, r8)

00015898 <__aeabi_fdiv>:
   15898:	b5f0      	push	{r4, r5, r6, r7, lr}
   1589a:	4657      	mov	r7, sl
   1589c:	464e      	mov	r6, r9
   1589e:	46de      	mov	lr, fp
   158a0:	4645      	mov	r5, r8
   158a2:	b5e0      	push	{r5, r6, r7, lr}
   158a4:	0244      	lsls	r4, r0, #9
   158a6:	0043      	lsls	r3, r0, #1
   158a8:	0fc6      	lsrs	r6, r0, #31
   158aa:	b083      	sub	sp, #12
   158ac:	1c0f      	adds	r7, r1, #0
   158ae:	0a64      	lsrs	r4, r4, #9
   158b0:	0e1b      	lsrs	r3, r3, #24
   158b2:	46b2      	mov	sl, r6
   158b4:	d053      	beq.n	1595e <__aeabi_fdiv+0xc6>
   158b6:	2bff      	cmp	r3, #255	; 0xff
   158b8:	d027      	beq.n	1590a <__aeabi_fdiv+0x72>
   158ba:	2280      	movs	r2, #128	; 0x80
   158bc:	00e4      	lsls	r4, r4, #3
   158be:	04d2      	lsls	r2, r2, #19
   158c0:	4314      	orrs	r4, r2
   158c2:	227f      	movs	r2, #127	; 0x7f
   158c4:	4252      	negs	r2, r2
   158c6:	4690      	mov	r8, r2
   158c8:	4498      	add	r8, r3
   158ca:	2300      	movs	r3, #0
   158cc:	4699      	mov	r9, r3
   158ce:	469b      	mov	fp, r3
   158d0:	027d      	lsls	r5, r7, #9
   158d2:	0078      	lsls	r0, r7, #1
   158d4:	0ffb      	lsrs	r3, r7, #31
   158d6:	0a6d      	lsrs	r5, r5, #9
   158d8:	0e00      	lsrs	r0, r0, #24
   158da:	9300      	str	r3, [sp, #0]
   158dc:	d024      	beq.n	15928 <__aeabi_fdiv+0x90>
   158de:	28ff      	cmp	r0, #255	; 0xff
   158e0:	d046      	beq.n	15970 <__aeabi_fdiv+0xd8>
   158e2:	2380      	movs	r3, #128	; 0x80
   158e4:	2100      	movs	r1, #0
   158e6:	00ed      	lsls	r5, r5, #3
   158e8:	04db      	lsls	r3, r3, #19
   158ea:	431d      	orrs	r5, r3
   158ec:	387f      	subs	r0, #127	; 0x7f
   158ee:	4647      	mov	r7, r8
   158f0:	1a38      	subs	r0, r7, r0
   158f2:	464f      	mov	r7, r9
   158f4:	430f      	orrs	r7, r1
   158f6:	00bf      	lsls	r7, r7, #2
   158f8:	46b9      	mov	r9, r7
   158fa:	0033      	movs	r3, r6
   158fc:	9a00      	ldr	r2, [sp, #0]
   158fe:	4f87      	ldr	r7, [pc, #540]	; (15b1c <__aeabi_fdiv+0x284>)
   15900:	4053      	eors	r3, r2
   15902:	464a      	mov	r2, r9
   15904:	58ba      	ldr	r2, [r7, r2]
   15906:	9301      	str	r3, [sp, #4]
   15908:	4697      	mov	pc, r2
   1590a:	2c00      	cmp	r4, #0
   1590c:	d14e      	bne.n	159ac <__aeabi_fdiv+0x114>
   1590e:	2308      	movs	r3, #8
   15910:	4699      	mov	r9, r3
   15912:	33f7      	adds	r3, #247	; 0xf7
   15914:	4698      	mov	r8, r3
   15916:	3bfd      	subs	r3, #253	; 0xfd
   15918:	469b      	mov	fp, r3
   1591a:	027d      	lsls	r5, r7, #9
   1591c:	0078      	lsls	r0, r7, #1
   1591e:	0ffb      	lsrs	r3, r7, #31
   15920:	0a6d      	lsrs	r5, r5, #9
   15922:	0e00      	lsrs	r0, r0, #24
   15924:	9300      	str	r3, [sp, #0]
   15926:	d1da      	bne.n	158de <__aeabi_fdiv+0x46>
   15928:	2d00      	cmp	r5, #0
   1592a:	d126      	bne.n	1597a <__aeabi_fdiv+0xe2>
   1592c:	2000      	movs	r0, #0
   1592e:	2101      	movs	r1, #1
   15930:	0033      	movs	r3, r6
   15932:	9a00      	ldr	r2, [sp, #0]
   15934:	4f7a      	ldr	r7, [pc, #488]	; (15b20 <__aeabi_fdiv+0x288>)
   15936:	4053      	eors	r3, r2
   15938:	4642      	mov	r2, r8
   1593a:	1a10      	subs	r0, r2, r0
   1593c:	464a      	mov	r2, r9
   1593e:	430a      	orrs	r2, r1
   15940:	0092      	lsls	r2, r2, #2
   15942:	58ba      	ldr	r2, [r7, r2]
   15944:	001d      	movs	r5, r3
   15946:	4697      	mov	pc, r2
   15948:	9b00      	ldr	r3, [sp, #0]
   1594a:	002c      	movs	r4, r5
   1594c:	469a      	mov	sl, r3
   1594e:	468b      	mov	fp, r1
   15950:	465b      	mov	r3, fp
   15952:	2b02      	cmp	r3, #2
   15954:	d131      	bne.n	159ba <__aeabi_fdiv+0x122>
   15956:	4653      	mov	r3, sl
   15958:	21ff      	movs	r1, #255	; 0xff
   1595a:	2400      	movs	r4, #0
   1595c:	e038      	b.n	159d0 <__aeabi_fdiv+0x138>
   1595e:	2c00      	cmp	r4, #0
   15960:	d117      	bne.n	15992 <__aeabi_fdiv+0xfa>
   15962:	2304      	movs	r3, #4
   15964:	4699      	mov	r9, r3
   15966:	2300      	movs	r3, #0
   15968:	4698      	mov	r8, r3
   1596a:	3301      	adds	r3, #1
   1596c:	469b      	mov	fp, r3
   1596e:	e7af      	b.n	158d0 <__aeabi_fdiv+0x38>
   15970:	20ff      	movs	r0, #255	; 0xff
   15972:	2d00      	cmp	r5, #0
   15974:	d10b      	bne.n	1598e <__aeabi_fdiv+0xf6>
   15976:	2102      	movs	r1, #2
   15978:	e7da      	b.n	15930 <__aeabi_fdiv+0x98>
   1597a:	0028      	movs	r0, r5
   1597c:	f002 f834 	bl	179e8 <__clzsi2>
   15980:	1f43      	subs	r3, r0, #5
   15982:	409d      	lsls	r5, r3
   15984:	2376      	movs	r3, #118	; 0x76
   15986:	425b      	negs	r3, r3
   15988:	1a18      	subs	r0, r3, r0
   1598a:	2100      	movs	r1, #0
   1598c:	e7af      	b.n	158ee <__aeabi_fdiv+0x56>
   1598e:	2103      	movs	r1, #3
   15990:	e7ad      	b.n	158ee <__aeabi_fdiv+0x56>
   15992:	0020      	movs	r0, r4
   15994:	f002 f828 	bl	179e8 <__clzsi2>
   15998:	1f43      	subs	r3, r0, #5
   1599a:	409c      	lsls	r4, r3
   1599c:	2376      	movs	r3, #118	; 0x76
   1599e:	425b      	negs	r3, r3
   159a0:	1a1b      	subs	r3, r3, r0
   159a2:	4698      	mov	r8, r3
   159a4:	2300      	movs	r3, #0
   159a6:	4699      	mov	r9, r3
   159a8:	469b      	mov	fp, r3
   159aa:	e791      	b.n	158d0 <__aeabi_fdiv+0x38>
   159ac:	230c      	movs	r3, #12
   159ae:	4699      	mov	r9, r3
   159b0:	33f3      	adds	r3, #243	; 0xf3
   159b2:	4698      	mov	r8, r3
   159b4:	3bfc      	subs	r3, #252	; 0xfc
   159b6:	469b      	mov	fp, r3
   159b8:	e78a      	b.n	158d0 <__aeabi_fdiv+0x38>
   159ba:	2b03      	cmp	r3, #3
   159bc:	d100      	bne.n	159c0 <__aeabi_fdiv+0x128>
   159be:	e0a5      	b.n	15b0c <__aeabi_fdiv+0x274>
   159c0:	4655      	mov	r5, sl
   159c2:	2b01      	cmp	r3, #1
   159c4:	d000      	beq.n	159c8 <__aeabi_fdiv+0x130>
   159c6:	e081      	b.n	15acc <__aeabi_fdiv+0x234>
   159c8:	2301      	movs	r3, #1
   159ca:	2100      	movs	r1, #0
   159cc:	2400      	movs	r4, #0
   159ce:	402b      	ands	r3, r5
   159d0:	0264      	lsls	r4, r4, #9
   159d2:	05c9      	lsls	r1, r1, #23
   159d4:	0a60      	lsrs	r0, r4, #9
   159d6:	07db      	lsls	r3, r3, #31
   159d8:	4308      	orrs	r0, r1
   159da:	4318      	orrs	r0, r3
   159dc:	b003      	add	sp, #12
   159de:	bc3c      	pop	{r2, r3, r4, r5}
   159e0:	4690      	mov	r8, r2
   159e2:	4699      	mov	r9, r3
   159e4:	46a2      	mov	sl, r4
   159e6:	46ab      	mov	fp, r5
   159e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   159ea:	2480      	movs	r4, #128	; 0x80
   159ec:	2300      	movs	r3, #0
   159ee:	03e4      	lsls	r4, r4, #15
   159f0:	21ff      	movs	r1, #255	; 0xff
   159f2:	e7ed      	b.n	159d0 <__aeabi_fdiv+0x138>
   159f4:	21ff      	movs	r1, #255	; 0xff
   159f6:	2400      	movs	r4, #0
   159f8:	e7ea      	b.n	159d0 <__aeabi_fdiv+0x138>
   159fa:	2301      	movs	r3, #1
   159fc:	1a59      	subs	r1, r3, r1
   159fe:	291b      	cmp	r1, #27
   15a00:	dd66      	ble.n	15ad0 <__aeabi_fdiv+0x238>
   15a02:	9a01      	ldr	r2, [sp, #4]
   15a04:	4013      	ands	r3, r2
   15a06:	2100      	movs	r1, #0
   15a08:	2400      	movs	r4, #0
   15a0a:	e7e1      	b.n	159d0 <__aeabi_fdiv+0x138>
   15a0c:	2380      	movs	r3, #128	; 0x80
   15a0e:	03db      	lsls	r3, r3, #15
   15a10:	421c      	tst	r4, r3
   15a12:	d038      	beq.n	15a86 <__aeabi_fdiv+0x1ee>
   15a14:	421d      	tst	r5, r3
   15a16:	d051      	beq.n	15abc <__aeabi_fdiv+0x224>
   15a18:	431c      	orrs	r4, r3
   15a1a:	0264      	lsls	r4, r4, #9
   15a1c:	0a64      	lsrs	r4, r4, #9
   15a1e:	0033      	movs	r3, r6
   15a20:	21ff      	movs	r1, #255	; 0xff
   15a22:	e7d5      	b.n	159d0 <__aeabi_fdiv+0x138>
   15a24:	0163      	lsls	r3, r4, #5
   15a26:	016c      	lsls	r4, r5, #5
   15a28:	42a3      	cmp	r3, r4
   15a2a:	d23b      	bcs.n	15aa4 <__aeabi_fdiv+0x20c>
   15a2c:	261b      	movs	r6, #27
   15a2e:	2100      	movs	r1, #0
   15a30:	3801      	subs	r0, #1
   15a32:	2501      	movs	r5, #1
   15a34:	001f      	movs	r7, r3
   15a36:	0049      	lsls	r1, r1, #1
   15a38:	005b      	lsls	r3, r3, #1
   15a3a:	2f00      	cmp	r7, #0
   15a3c:	db01      	blt.n	15a42 <__aeabi_fdiv+0x1aa>
   15a3e:	429c      	cmp	r4, r3
   15a40:	d801      	bhi.n	15a46 <__aeabi_fdiv+0x1ae>
   15a42:	1b1b      	subs	r3, r3, r4
   15a44:	4329      	orrs	r1, r5
   15a46:	3e01      	subs	r6, #1
   15a48:	2e00      	cmp	r6, #0
   15a4a:	d1f3      	bne.n	15a34 <__aeabi_fdiv+0x19c>
   15a4c:	001c      	movs	r4, r3
   15a4e:	1e63      	subs	r3, r4, #1
   15a50:	419c      	sbcs	r4, r3
   15a52:	430c      	orrs	r4, r1
   15a54:	0001      	movs	r1, r0
   15a56:	317f      	adds	r1, #127	; 0x7f
   15a58:	2900      	cmp	r1, #0
   15a5a:	ddce      	ble.n	159fa <__aeabi_fdiv+0x162>
   15a5c:	0763      	lsls	r3, r4, #29
   15a5e:	d004      	beq.n	15a6a <__aeabi_fdiv+0x1d2>
   15a60:	230f      	movs	r3, #15
   15a62:	4023      	ands	r3, r4
   15a64:	2b04      	cmp	r3, #4
   15a66:	d000      	beq.n	15a6a <__aeabi_fdiv+0x1d2>
   15a68:	3404      	adds	r4, #4
   15a6a:	0123      	lsls	r3, r4, #4
   15a6c:	d503      	bpl.n	15a76 <__aeabi_fdiv+0x1de>
   15a6e:	0001      	movs	r1, r0
   15a70:	4b2c      	ldr	r3, [pc, #176]	; (15b24 <__aeabi_fdiv+0x28c>)
   15a72:	3180      	adds	r1, #128	; 0x80
   15a74:	401c      	ands	r4, r3
   15a76:	29fe      	cmp	r1, #254	; 0xfe
   15a78:	dd0d      	ble.n	15a96 <__aeabi_fdiv+0x1fe>
   15a7a:	2301      	movs	r3, #1
   15a7c:	9a01      	ldr	r2, [sp, #4]
   15a7e:	21ff      	movs	r1, #255	; 0xff
   15a80:	4013      	ands	r3, r2
   15a82:	2400      	movs	r4, #0
   15a84:	e7a4      	b.n	159d0 <__aeabi_fdiv+0x138>
   15a86:	2380      	movs	r3, #128	; 0x80
   15a88:	03db      	lsls	r3, r3, #15
   15a8a:	431c      	orrs	r4, r3
   15a8c:	0264      	lsls	r4, r4, #9
   15a8e:	0a64      	lsrs	r4, r4, #9
   15a90:	0033      	movs	r3, r6
   15a92:	21ff      	movs	r1, #255	; 0xff
   15a94:	e79c      	b.n	159d0 <__aeabi_fdiv+0x138>
   15a96:	2301      	movs	r3, #1
   15a98:	9a01      	ldr	r2, [sp, #4]
   15a9a:	01a4      	lsls	r4, r4, #6
   15a9c:	0a64      	lsrs	r4, r4, #9
   15a9e:	b2c9      	uxtb	r1, r1
   15aa0:	4013      	ands	r3, r2
   15aa2:	e795      	b.n	159d0 <__aeabi_fdiv+0x138>
   15aa4:	1b1b      	subs	r3, r3, r4
   15aa6:	261a      	movs	r6, #26
   15aa8:	2101      	movs	r1, #1
   15aaa:	e7c2      	b.n	15a32 <__aeabi_fdiv+0x19a>
   15aac:	9b00      	ldr	r3, [sp, #0]
   15aae:	468b      	mov	fp, r1
   15ab0:	469a      	mov	sl, r3
   15ab2:	2400      	movs	r4, #0
   15ab4:	e74c      	b.n	15950 <__aeabi_fdiv+0xb8>
   15ab6:	0263      	lsls	r3, r4, #9
   15ab8:	d5e5      	bpl.n	15a86 <__aeabi_fdiv+0x1ee>
   15aba:	2500      	movs	r5, #0
   15abc:	2480      	movs	r4, #128	; 0x80
   15abe:	03e4      	lsls	r4, r4, #15
   15ac0:	432c      	orrs	r4, r5
   15ac2:	0264      	lsls	r4, r4, #9
   15ac4:	0a64      	lsrs	r4, r4, #9
   15ac6:	9b00      	ldr	r3, [sp, #0]
   15ac8:	21ff      	movs	r1, #255	; 0xff
   15aca:	e781      	b.n	159d0 <__aeabi_fdiv+0x138>
   15acc:	9501      	str	r5, [sp, #4]
   15ace:	e7c1      	b.n	15a54 <__aeabi_fdiv+0x1bc>
   15ad0:	0023      	movs	r3, r4
   15ad2:	2020      	movs	r0, #32
   15ad4:	40cb      	lsrs	r3, r1
   15ad6:	1a41      	subs	r1, r0, r1
   15ad8:	408c      	lsls	r4, r1
   15ada:	1e61      	subs	r1, r4, #1
   15adc:	418c      	sbcs	r4, r1
   15ade:	431c      	orrs	r4, r3
   15ae0:	0763      	lsls	r3, r4, #29
   15ae2:	d004      	beq.n	15aee <__aeabi_fdiv+0x256>
   15ae4:	230f      	movs	r3, #15
   15ae6:	4023      	ands	r3, r4
   15ae8:	2b04      	cmp	r3, #4
   15aea:	d000      	beq.n	15aee <__aeabi_fdiv+0x256>
   15aec:	3404      	adds	r4, #4
   15aee:	0163      	lsls	r3, r4, #5
   15af0:	d505      	bpl.n	15afe <__aeabi_fdiv+0x266>
   15af2:	2301      	movs	r3, #1
   15af4:	9a01      	ldr	r2, [sp, #4]
   15af6:	2101      	movs	r1, #1
   15af8:	4013      	ands	r3, r2
   15afa:	2400      	movs	r4, #0
   15afc:	e768      	b.n	159d0 <__aeabi_fdiv+0x138>
   15afe:	2301      	movs	r3, #1
   15b00:	9a01      	ldr	r2, [sp, #4]
   15b02:	01a4      	lsls	r4, r4, #6
   15b04:	0a64      	lsrs	r4, r4, #9
   15b06:	4013      	ands	r3, r2
   15b08:	2100      	movs	r1, #0
   15b0a:	e761      	b.n	159d0 <__aeabi_fdiv+0x138>
   15b0c:	2380      	movs	r3, #128	; 0x80
   15b0e:	03db      	lsls	r3, r3, #15
   15b10:	431c      	orrs	r4, r3
   15b12:	0264      	lsls	r4, r4, #9
   15b14:	0a64      	lsrs	r4, r4, #9
   15b16:	4653      	mov	r3, sl
   15b18:	21ff      	movs	r1, #255	; 0xff
   15b1a:	e759      	b.n	159d0 <__aeabi_fdiv+0x138>
   15b1c:	00019900 	.word	0x00019900
   15b20:	00019940 	.word	0x00019940
   15b24:	f7ffffff 	.word	0xf7ffffff

00015b28 <__aeabi_fmul>:
   15b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15b2a:	4657      	mov	r7, sl
   15b2c:	464e      	mov	r6, r9
   15b2e:	4645      	mov	r5, r8
   15b30:	46de      	mov	lr, fp
   15b32:	b5e0      	push	{r5, r6, r7, lr}
   15b34:	0247      	lsls	r7, r0, #9
   15b36:	0046      	lsls	r6, r0, #1
   15b38:	4688      	mov	r8, r1
   15b3a:	0a7f      	lsrs	r7, r7, #9
   15b3c:	0e36      	lsrs	r6, r6, #24
   15b3e:	0fc4      	lsrs	r4, r0, #31
   15b40:	2e00      	cmp	r6, #0
   15b42:	d047      	beq.n	15bd4 <__aeabi_fmul+0xac>
   15b44:	2eff      	cmp	r6, #255	; 0xff
   15b46:	d024      	beq.n	15b92 <__aeabi_fmul+0x6a>
   15b48:	00fb      	lsls	r3, r7, #3
   15b4a:	2780      	movs	r7, #128	; 0x80
   15b4c:	04ff      	lsls	r7, r7, #19
   15b4e:	431f      	orrs	r7, r3
   15b50:	2300      	movs	r3, #0
   15b52:	4699      	mov	r9, r3
   15b54:	469a      	mov	sl, r3
   15b56:	3e7f      	subs	r6, #127	; 0x7f
   15b58:	4643      	mov	r3, r8
   15b5a:	025d      	lsls	r5, r3, #9
   15b5c:	0058      	lsls	r0, r3, #1
   15b5e:	0fdb      	lsrs	r3, r3, #31
   15b60:	0a6d      	lsrs	r5, r5, #9
   15b62:	0e00      	lsrs	r0, r0, #24
   15b64:	4698      	mov	r8, r3
   15b66:	d043      	beq.n	15bf0 <__aeabi_fmul+0xc8>
   15b68:	28ff      	cmp	r0, #255	; 0xff
   15b6a:	d03b      	beq.n	15be4 <__aeabi_fmul+0xbc>
   15b6c:	00eb      	lsls	r3, r5, #3
   15b6e:	2580      	movs	r5, #128	; 0x80
   15b70:	2200      	movs	r2, #0
   15b72:	04ed      	lsls	r5, r5, #19
   15b74:	431d      	orrs	r5, r3
   15b76:	387f      	subs	r0, #127	; 0x7f
   15b78:	1836      	adds	r6, r6, r0
   15b7a:	1c73      	adds	r3, r6, #1
   15b7c:	4641      	mov	r1, r8
   15b7e:	469b      	mov	fp, r3
   15b80:	464b      	mov	r3, r9
   15b82:	4061      	eors	r1, r4
   15b84:	4313      	orrs	r3, r2
   15b86:	2b0f      	cmp	r3, #15
   15b88:	d864      	bhi.n	15c54 <__aeabi_fmul+0x12c>
   15b8a:	4875      	ldr	r0, [pc, #468]	; (15d60 <__aeabi_fmul+0x238>)
   15b8c:	009b      	lsls	r3, r3, #2
   15b8e:	58c3      	ldr	r3, [r0, r3]
   15b90:	469f      	mov	pc, r3
   15b92:	2f00      	cmp	r7, #0
   15b94:	d142      	bne.n	15c1c <__aeabi_fmul+0xf4>
   15b96:	2308      	movs	r3, #8
   15b98:	4699      	mov	r9, r3
   15b9a:	3b06      	subs	r3, #6
   15b9c:	26ff      	movs	r6, #255	; 0xff
   15b9e:	469a      	mov	sl, r3
   15ba0:	e7da      	b.n	15b58 <__aeabi_fmul+0x30>
   15ba2:	4641      	mov	r1, r8
   15ba4:	2a02      	cmp	r2, #2
   15ba6:	d028      	beq.n	15bfa <__aeabi_fmul+0xd2>
   15ba8:	2a03      	cmp	r2, #3
   15baa:	d100      	bne.n	15bae <__aeabi_fmul+0x86>
   15bac:	e0ce      	b.n	15d4c <__aeabi_fmul+0x224>
   15bae:	2a01      	cmp	r2, #1
   15bb0:	d000      	beq.n	15bb4 <__aeabi_fmul+0x8c>
   15bb2:	e0ac      	b.n	15d0e <__aeabi_fmul+0x1e6>
   15bb4:	4011      	ands	r1, r2
   15bb6:	2000      	movs	r0, #0
   15bb8:	2200      	movs	r2, #0
   15bba:	b2cc      	uxtb	r4, r1
   15bbc:	0240      	lsls	r0, r0, #9
   15bbe:	05d2      	lsls	r2, r2, #23
   15bc0:	0a40      	lsrs	r0, r0, #9
   15bc2:	07e4      	lsls	r4, r4, #31
   15bc4:	4310      	orrs	r0, r2
   15bc6:	4320      	orrs	r0, r4
   15bc8:	bc3c      	pop	{r2, r3, r4, r5}
   15bca:	4690      	mov	r8, r2
   15bcc:	4699      	mov	r9, r3
   15bce:	46a2      	mov	sl, r4
   15bd0:	46ab      	mov	fp, r5
   15bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15bd4:	2f00      	cmp	r7, #0
   15bd6:	d115      	bne.n	15c04 <__aeabi_fmul+0xdc>
   15bd8:	2304      	movs	r3, #4
   15bda:	4699      	mov	r9, r3
   15bdc:	3b03      	subs	r3, #3
   15bde:	2600      	movs	r6, #0
   15be0:	469a      	mov	sl, r3
   15be2:	e7b9      	b.n	15b58 <__aeabi_fmul+0x30>
   15be4:	20ff      	movs	r0, #255	; 0xff
   15be6:	2202      	movs	r2, #2
   15be8:	2d00      	cmp	r5, #0
   15bea:	d0c5      	beq.n	15b78 <__aeabi_fmul+0x50>
   15bec:	2203      	movs	r2, #3
   15bee:	e7c3      	b.n	15b78 <__aeabi_fmul+0x50>
   15bf0:	2d00      	cmp	r5, #0
   15bf2:	d119      	bne.n	15c28 <__aeabi_fmul+0x100>
   15bf4:	2000      	movs	r0, #0
   15bf6:	2201      	movs	r2, #1
   15bf8:	e7be      	b.n	15b78 <__aeabi_fmul+0x50>
   15bfa:	2401      	movs	r4, #1
   15bfc:	22ff      	movs	r2, #255	; 0xff
   15bfe:	400c      	ands	r4, r1
   15c00:	2000      	movs	r0, #0
   15c02:	e7db      	b.n	15bbc <__aeabi_fmul+0x94>
   15c04:	0038      	movs	r0, r7
   15c06:	f001 feef 	bl	179e8 <__clzsi2>
   15c0a:	2676      	movs	r6, #118	; 0x76
   15c0c:	1f43      	subs	r3, r0, #5
   15c0e:	409f      	lsls	r7, r3
   15c10:	2300      	movs	r3, #0
   15c12:	4276      	negs	r6, r6
   15c14:	1a36      	subs	r6, r6, r0
   15c16:	4699      	mov	r9, r3
   15c18:	469a      	mov	sl, r3
   15c1a:	e79d      	b.n	15b58 <__aeabi_fmul+0x30>
   15c1c:	230c      	movs	r3, #12
   15c1e:	4699      	mov	r9, r3
   15c20:	3b09      	subs	r3, #9
   15c22:	26ff      	movs	r6, #255	; 0xff
   15c24:	469a      	mov	sl, r3
   15c26:	e797      	b.n	15b58 <__aeabi_fmul+0x30>
   15c28:	0028      	movs	r0, r5
   15c2a:	f001 fedd 	bl	179e8 <__clzsi2>
   15c2e:	1f43      	subs	r3, r0, #5
   15c30:	409d      	lsls	r5, r3
   15c32:	2376      	movs	r3, #118	; 0x76
   15c34:	425b      	negs	r3, r3
   15c36:	1a18      	subs	r0, r3, r0
   15c38:	2200      	movs	r2, #0
   15c3a:	e79d      	b.n	15b78 <__aeabi_fmul+0x50>
   15c3c:	2080      	movs	r0, #128	; 0x80
   15c3e:	2400      	movs	r4, #0
   15c40:	03c0      	lsls	r0, r0, #15
   15c42:	22ff      	movs	r2, #255	; 0xff
   15c44:	e7ba      	b.n	15bbc <__aeabi_fmul+0x94>
   15c46:	003d      	movs	r5, r7
   15c48:	4652      	mov	r2, sl
   15c4a:	e7ab      	b.n	15ba4 <__aeabi_fmul+0x7c>
   15c4c:	003d      	movs	r5, r7
   15c4e:	0021      	movs	r1, r4
   15c50:	4652      	mov	r2, sl
   15c52:	e7a7      	b.n	15ba4 <__aeabi_fmul+0x7c>
   15c54:	0c3b      	lsrs	r3, r7, #16
   15c56:	469c      	mov	ip, r3
   15c58:	042a      	lsls	r2, r5, #16
   15c5a:	0c12      	lsrs	r2, r2, #16
   15c5c:	0c2b      	lsrs	r3, r5, #16
   15c5e:	0014      	movs	r4, r2
   15c60:	4660      	mov	r0, ip
   15c62:	4665      	mov	r5, ip
   15c64:	043f      	lsls	r7, r7, #16
   15c66:	0c3f      	lsrs	r7, r7, #16
   15c68:	437c      	muls	r4, r7
   15c6a:	4342      	muls	r2, r0
   15c6c:	435d      	muls	r5, r3
   15c6e:	437b      	muls	r3, r7
   15c70:	0c27      	lsrs	r7, r4, #16
   15c72:	189b      	adds	r3, r3, r2
   15c74:	18ff      	adds	r7, r7, r3
   15c76:	42ba      	cmp	r2, r7
   15c78:	d903      	bls.n	15c82 <__aeabi_fmul+0x15a>
   15c7a:	2380      	movs	r3, #128	; 0x80
   15c7c:	025b      	lsls	r3, r3, #9
   15c7e:	469c      	mov	ip, r3
   15c80:	4465      	add	r5, ip
   15c82:	0424      	lsls	r4, r4, #16
   15c84:	043a      	lsls	r2, r7, #16
   15c86:	0c24      	lsrs	r4, r4, #16
   15c88:	1912      	adds	r2, r2, r4
   15c8a:	0193      	lsls	r3, r2, #6
   15c8c:	1e5c      	subs	r4, r3, #1
   15c8e:	41a3      	sbcs	r3, r4
   15c90:	0c3f      	lsrs	r7, r7, #16
   15c92:	0e92      	lsrs	r2, r2, #26
   15c94:	197d      	adds	r5, r7, r5
   15c96:	431a      	orrs	r2, r3
   15c98:	01ad      	lsls	r5, r5, #6
   15c9a:	4315      	orrs	r5, r2
   15c9c:	012b      	lsls	r3, r5, #4
   15c9e:	d504      	bpl.n	15caa <__aeabi_fmul+0x182>
   15ca0:	2301      	movs	r3, #1
   15ca2:	465e      	mov	r6, fp
   15ca4:	086a      	lsrs	r2, r5, #1
   15ca6:	401d      	ands	r5, r3
   15ca8:	4315      	orrs	r5, r2
   15caa:	0032      	movs	r2, r6
   15cac:	327f      	adds	r2, #127	; 0x7f
   15cae:	2a00      	cmp	r2, #0
   15cb0:	dd25      	ble.n	15cfe <__aeabi_fmul+0x1d6>
   15cb2:	076b      	lsls	r3, r5, #29
   15cb4:	d004      	beq.n	15cc0 <__aeabi_fmul+0x198>
   15cb6:	230f      	movs	r3, #15
   15cb8:	402b      	ands	r3, r5
   15cba:	2b04      	cmp	r3, #4
   15cbc:	d000      	beq.n	15cc0 <__aeabi_fmul+0x198>
   15cbe:	3504      	adds	r5, #4
   15cc0:	012b      	lsls	r3, r5, #4
   15cc2:	d503      	bpl.n	15ccc <__aeabi_fmul+0x1a4>
   15cc4:	0032      	movs	r2, r6
   15cc6:	4b27      	ldr	r3, [pc, #156]	; (15d64 <__aeabi_fmul+0x23c>)
   15cc8:	3280      	adds	r2, #128	; 0x80
   15cca:	401d      	ands	r5, r3
   15ccc:	2afe      	cmp	r2, #254	; 0xfe
   15cce:	dc94      	bgt.n	15bfa <__aeabi_fmul+0xd2>
   15cd0:	2401      	movs	r4, #1
   15cd2:	01a8      	lsls	r0, r5, #6
   15cd4:	0a40      	lsrs	r0, r0, #9
   15cd6:	b2d2      	uxtb	r2, r2
   15cd8:	400c      	ands	r4, r1
   15cda:	e76f      	b.n	15bbc <__aeabi_fmul+0x94>
   15cdc:	2080      	movs	r0, #128	; 0x80
   15cde:	03c0      	lsls	r0, r0, #15
   15ce0:	4207      	tst	r7, r0
   15ce2:	d007      	beq.n	15cf4 <__aeabi_fmul+0x1cc>
   15ce4:	4205      	tst	r5, r0
   15ce6:	d105      	bne.n	15cf4 <__aeabi_fmul+0x1cc>
   15ce8:	4328      	orrs	r0, r5
   15cea:	0240      	lsls	r0, r0, #9
   15cec:	0a40      	lsrs	r0, r0, #9
   15cee:	4644      	mov	r4, r8
   15cf0:	22ff      	movs	r2, #255	; 0xff
   15cf2:	e763      	b.n	15bbc <__aeabi_fmul+0x94>
   15cf4:	4338      	orrs	r0, r7
   15cf6:	0240      	lsls	r0, r0, #9
   15cf8:	0a40      	lsrs	r0, r0, #9
   15cfa:	22ff      	movs	r2, #255	; 0xff
   15cfc:	e75e      	b.n	15bbc <__aeabi_fmul+0x94>
   15cfe:	2401      	movs	r4, #1
   15d00:	1aa3      	subs	r3, r4, r2
   15d02:	2b1b      	cmp	r3, #27
   15d04:	dd05      	ble.n	15d12 <__aeabi_fmul+0x1ea>
   15d06:	400c      	ands	r4, r1
   15d08:	2200      	movs	r2, #0
   15d0a:	2000      	movs	r0, #0
   15d0c:	e756      	b.n	15bbc <__aeabi_fmul+0x94>
   15d0e:	465e      	mov	r6, fp
   15d10:	e7cb      	b.n	15caa <__aeabi_fmul+0x182>
   15d12:	002a      	movs	r2, r5
   15d14:	2020      	movs	r0, #32
   15d16:	40da      	lsrs	r2, r3
   15d18:	1ac3      	subs	r3, r0, r3
   15d1a:	409d      	lsls	r5, r3
   15d1c:	002b      	movs	r3, r5
   15d1e:	1e5d      	subs	r5, r3, #1
   15d20:	41ab      	sbcs	r3, r5
   15d22:	4313      	orrs	r3, r2
   15d24:	075a      	lsls	r2, r3, #29
   15d26:	d004      	beq.n	15d32 <__aeabi_fmul+0x20a>
   15d28:	220f      	movs	r2, #15
   15d2a:	401a      	ands	r2, r3
   15d2c:	2a04      	cmp	r2, #4
   15d2e:	d000      	beq.n	15d32 <__aeabi_fmul+0x20a>
   15d30:	3304      	adds	r3, #4
   15d32:	015a      	lsls	r2, r3, #5
   15d34:	d504      	bpl.n	15d40 <__aeabi_fmul+0x218>
   15d36:	2401      	movs	r4, #1
   15d38:	2201      	movs	r2, #1
   15d3a:	400c      	ands	r4, r1
   15d3c:	2000      	movs	r0, #0
   15d3e:	e73d      	b.n	15bbc <__aeabi_fmul+0x94>
   15d40:	2401      	movs	r4, #1
   15d42:	019b      	lsls	r3, r3, #6
   15d44:	0a58      	lsrs	r0, r3, #9
   15d46:	400c      	ands	r4, r1
   15d48:	2200      	movs	r2, #0
   15d4a:	e737      	b.n	15bbc <__aeabi_fmul+0x94>
   15d4c:	2080      	movs	r0, #128	; 0x80
   15d4e:	2401      	movs	r4, #1
   15d50:	03c0      	lsls	r0, r0, #15
   15d52:	4328      	orrs	r0, r5
   15d54:	0240      	lsls	r0, r0, #9
   15d56:	0a40      	lsrs	r0, r0, #9
   15d58:	400c      	ands	r4, r1
   15d5a:	22ff      	movs	r2, #255	; 0xff
   15d5c:	e72e      	b.n	15bbc <__aeabi_fmul+0x94>
   15d5e:	46c0      	nop			; (mov r8, r8)
   15d60:	00019980 	.word	0x00019980
   15d64:	f7ffffff 	.word	0xf7ffffff

00015d68 <__aeabi_ui2f>:
   15d68:	b510      	push	{r4, lr}
   15d6a:	1e04      	subs	r4, r0, #0
   15d6c:	d027      	beq.n	15dbe <__aeabi_ui2f+0x56>
   15d6e:	f001 fe3b 	bl	179e8 <__clzsi2>
   15d72:	239e      	movs	r3, #158	; 0x9e
   15d74:	1a1b      	subs	r3, r3, r0
   15d76:	2b96      	cmp	r3, #150	; 0x96
   15d78:	dc0a      	bgt.n	15d90 <__aeabi_ui2f+0x28>
   15d7a:	2296      	movs	r2, #150	; 0x96
   15d7c:	1ad2      	subs	r2, r2, r3
   15d7e:	4094      	lsls	r4, r2
   15d80:	0264      	lsls	r4, r4, #9
   15d82:	0a64      	lsrs	r4, r4, #9
   15d84:	b2db      	uxtb	r3, r3
   15d86:	0264      	lsls	r4, r4, #9
   15d88:	05db      	lsls	r3, r3, #23
   15d8a:	0a60      	lsrs	r0, r4, #9
   15d8c:	4318      	orrs	r0, r3
   15d8e:	bd10      	pop	{r4, pc}
   15d90:	2b99      	cmp	r3, #153	; 0x99
   15d92:	dc17      	bgt.n	15dc4 <__aeabi_ui2f+0x5c>
   15d94:	2299      	movs	r2, #153	; 0x99
   15d96:	1ad2      	subs	r2, r2, r3
   15d98:	2a00      	cmp	r2, #0
   15d9a:	dd27      	ble.n	15dec <__aeabi_ui2f+0x84>
   15d9c:	4094      	lsls	r4, r2
   15d9e:	0022      	movs	r2, r4
   15da0:	4c13      	ldr	r4, [pc, #76]	; (15df0 <__aeabi_ui2f+0x88>)
   15da2:	4014      	ands	r4, r2
   15da4:	0751      	lsls	r1, r2, #29
   15da6:	d004      	beq.n	15db2 <__aeabi_ui2f+0x4a>
   15da8:	210f      	movs	r1, #15
   15daa:	400a      	ands	r2, r1
   15dac:	2a04      	cmp	r2, #4
   15dae:	d000      	beq.n	15db2 <__aeabi_ui2f+0x4a>
   15db0:	3404      	adds	r4, #4
   15db2:	0162      	lsls	r2, r4, #5
   15db4:	d412      	bmi.n	15ddc <__aeabi_ui2f+0x74>
   15db6:	01a4      	lsls	r4, r4, #6
   15db8:	0a64      	lsrs	r4, r4, #9
   15dba:	b2db      	uxtb	r3, r3
   15dbc:	e7e3      	b.n	15d86 <__aeabi_ui2f+0x1e>
   15dbe:	2300      	movs	r3, #0
   15dc0:	2400      	movs	r4, #0
   15dc2:	e7e0      	b.n	15d86 <__aeabi_ui2f+0x1e>
   15dc4:	22b9      	movs	r2, #185	; 0xb9
   15dc6:	0021      	movs	r1, r4
   15dc8:	1ad2      	subs	r2, r2, r3
   15dca:	4091      	lsls	r1, r2
   15dcc:	000a      	movs	r2, r1
   15dce:	1e51      	subs	r1, r2, #1
   15dd0:	418a      	sbcs	r2, r1
   15dd2:	2105      	movs	r1, #5
   15dd4:	1a09      	subs	r1, r1, r0
   15dd6:	40cc      	lsrs	r4, r1
   15dd8:	4314      	orrs	r4, r2
   15dda:	e7db      	b.n	15d94 <__aeabi_ui2f+0x2c>
   15ddc:	4b04      	ldr	r3, [pc, #16]	; (15df0 <__aeabi_ui2f+0x88>)
   15dde:	401c      	ands	r4, r3
   15de0:	239f      	movs	r3, #159	; 0x9f
   15de2:	01a4      	lsls	r4, r4, #6
   15de4:	1a1b      	subs	r3, r3, r0
   15de6:	0a64      	lsrs	r4, r4, #9
   15de8:	b2db      	uxtb	r3, r3
   15dea:	e7cc      	b.n	15d86 <__aeabi_ui2f+0x1e>
   15dec:	0022      	movs	r2, r4
   15dee:	e7d7      	b.n	15da0 <__aeabi_ui2f+0x38>
   15df0:	fbffffff 	.word	0xfbffffff

00015df4 <__aeabi_dadd>:
   15df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15df6:	4645      	mov	r5, r8
   15df8:	46de      	mov	lr, fp
   15dfa:	4657      	mov	r7, sl
   15dfc:	464e      	mov	r6, r9
   15dfe:	030c      	lsls	r4, r1, #12
   15e00:	b5e0      	push	{r5, r6, r7, lr}
   15e02:	004e      	lsls	r6, r1, #1
   15e04:	0fc9      	lsrs	r1, r1, #31
   15e06:	4688      	mov	r8, r1
   15e08:	000d      	movs	r5, r1
   15e0a:	0a61      	lsrs	r1, r4, #9
   15e0c:	0f44      	lsrs	r4, r0, #29
   15e0e:	430c      	orrs	r4, r1
   15e10:	00c7      	lsls	r7, r0, #3
   15e12:	0319      	lsls	r1, r3, #12
   15e14:	0058      	lsls	r0, r3, #1
   15e16:	0fdb      	lsrs	r3, r3, #31
   15e18:	469b      	mov	fp, r3
   15e1a:	0a4b      	lsrs	r3, r1, #9
   15e1c:	0f51      	lsrs	r1, r2, #29
   15e1e:	430b      	orrs	r3, r1
   15e20:	0d76      	lsrs	r6, r6, #21
   15e22:	0d40      	lsrs	r0, r0, #21
   15e24:	0019      	movs	r1, r3
   15e26:	00d2      	lsls	r2, r2, #3
   15e28:	45d8      	cmp	r8, fp
   15e2a:	d100      	bne.n	15e2e <__aeabi_dadd+0x3a>
   15e2c:	e0ae      	b.n	15f8c <__aeabi_dadd+0x198>
   15e2e:	1a35      	subs	r5, r6, r0
   15e30:	2d00      	cmp	r5, #0
   15e32:	dc00      	bgt.n	15e36 <__aeabi_dadd+0x42>
   15e34:	e0f6      	b.n	16024 <__aeabi_dadd+0x230>
   15e36:	2800      	cmp	r0, #0
   15e38:	d10f      	bne.n	15e5a <__aeabi_dadd+0x66>
   15e3a:	4313      	orrs	r3, r2
   15e3c:	d100      	bne.n	15e40 <__aeabi_dadd+0x4c>
   15e3e:	e0db      	b.n	15ff8 <__aeabi_dadd+0x204>
   15e40:	1e6b      	subs	r3, r5, #1
   15e42:	2b00      	cmp	r3, #0
   15e44:	d000      	beq.n	15e48 <__aeabi_dadd+0x54>
   15e46:	e137      	b.n	160b8 <__aeabi_dadd+0x2c4>
   15e48:	1aba      	subs	r2, r7, r2
   15e4a:	4297      	cmp	r7, r2
   15e4c:	41bf      	sbcs	r7, r7
   15e4e:	1a64      	subs	r4, r4, r1
   15e50:	427f      	negs	r7, r7
   15e52:	1be4      	subs	r4, r4, r7
   15e54:	2601      	movs	r6, #1
   15e56:	0017      	movs	r7, r2
   15e58:	e024      	b.n	15ea4 <__aeabi_dadd+0xb0>
   15e5a:	4bc6      	ldr	r3, [pc, #792]	; (16174 <__aeabi_dadd+0x380>)
   15e5c:	429e      	cmp	r6, r3
   15e5e:	d04d      	beq.n	15efc <__aeabi_dadd+0x108>
   15e60:	2380      	movs	r3, #128	; 0x80
   15e62:	041b      	lsls	r3, r3, #16
   15e64:	4319      	orrs	r1, r3
   15e66:	2d38      	cmp	r5, #56	; 0x38
   15e68:	dd00      	ble.n	15e6c <__aeabi_dadd+0x78>
   15e6a:	e107      	b.n	1607c <__aeabi_dadd+0x288>
   15e6c:	2d1f      	cmp	r5, #31
   15e6e:	dd00      	ble.n	15e72 <__aeabi_dadd+0x7e>
   15e70:	e138      	b.n	160e4 <__aeabi_dadd+0x2f0>
   15e72:	2020      	movs	r0, #32
   15e74:	1b43      	subs	r3, r0, r5
   15e76:	469a      	mov	sl, r3
   15e78:	000b      	movs	r3, r1
   15e7a:	4650      	mov	r0, sl
   15e7c:	4083      	lsls	r3, r0
   15e7e:	4699      	mov	r9, r3
   15e80:	0013      	movs	r3, r2
   15e82:	4648      	mov	r0, r9
   15e84:	40eb      	lsrs	r3, r5
   15e86:	4318      	orrs	r0, r3
   15e88:	0003      	movs	r3, r0
   15e8a:	4650      	mov	r0, sl
   15e8c:	4082      	lsls	r2, r0
   15e8e:	1e50      	subs	r0, r2, #1
   15e90:	4182      	sbcs	r2, r0
   15e92:	40e9      	lsrs	r1, r5
   15e94:	431a      	orrs	r2, r3
   15e96:	1aba      	subs	r2, r7, r2
   15e98:	1a61      	subs	r1, r4, r1
   15e9a:	4297      	cmp	r7, r2
   15e9c:	41a4      	sbcs	r4, r4
   15e9e:	0017      	movs	r7, r2
   15ea0:	4264      	negs	r4, r4
   15ea2:	1b0c      	subs	r4, r1, r4
   15ea4:	0223      	lsls	r3, r4, #8
   15ea6:	d562      	bpl.n	15f6e <__aeabi_dadd+0x17a>
   15ea8:	0264      	lsls	r4, r4, #9
   15eaa:	0a65      	lsrs	r5, r4, #9
   15eac:	2d00      	cmp	r5, #0
   15eae:	d100      	bne.n	15eb2 <__aeabi_dadd+0xbe>
   15eb0:	e0df      	b.n	16072 <__aeabi_dadd+0x27e>
   15eb2:	0028      	movs	r0, r5
   15eb4:	f001 fd98 	bl	179e8 <__clzsi2>
   15eb8:	0003      	movs	r3, r0
   15eba:	3b08      	subs	r3, #8
   15ebc:	2b1f      	cmp	r3, #31
   15ebe:	dd00      	ble.n	15ec2 <__aeabi_dadd+0xce>
   15ec0:	e0d2      	b.n	16068 <__aeabi_dadd+0x274>
   15ec2:	2220      	movs	r2, #32
   15ec4:	003c      	movs	r4, r7
   15ec6:	1ad2      	subs	r2, r2, r3
   15ec8:	409d      	lsls	r5, r3
   15eca:	40d4      	lsrs	r4, r2
   15ecc:	409f      	lsls	r7, r3
   15ece:	4325      	orrs	r5, r4
   15ed0:	429e      	cmp	r6, r3
   15ed2:	dd00      	ble.n	15ed6 <__aeabi_dadd+0xe2>
   15ed4:	e0c4      	b.n	16060 <__aeabi_dadd+0x26c>
   15ed6:	1b9e      	subs	r6, r3, r6
   15ed8:	1c73      	adds	r3, r6, #1
   15eda:	2b1f      	cmp	r3, #31
   15edc:	dd00      	ble.n	15ee0 <__aeabi_dadd+0xec>
   15ede:	e0f1      	b.n	160c4 <__aeabi_dadd+0x2d0>
   15ee0:	2220      	movs	r2, #32
   15ee2:	0038      	movs	r0, r7
   15ee4:	0029      	movs	r1, r5
   15ee6:	1ad2      	subs	r2, r2, r3
   15ee8:	40d8      	lsrs	r0, r3
   15eea:	4091      	lsls	r1, r2
   15eec:	4097      	lsls	r7, r2
   15eee:	002c      	movs	r4, r5
   15ef0:	4301      	orrs	r1, r0
   15ef2:	1e78      	subs	r0, r7, #1
   15ef4:	4187      	sbcs	r7, r0
   15ef6:	40dc      	lsrs	r4, r3
   15ef8:	2600      	movs	r6, #0
   15efa:	430f      	orrs	r7, r1
   15efc:	077b      	lsls	r3, r7, #29
   15efe:	d009      	beq.n	15f14 <__aeabi_dadd+0x120>
   15f00:	230f      	movs	r3, #15
   15f02:	403b      	ands	r3, r7
   15f04:	2b04      	cmp	r3, #4
   15f06:	d005      	beq.n	15f14 <__aeabi_dadd+0x120>
   15f08:	1d3b      	adds	r3, r7, #4
   15f0a:	42bb      	cmp	r3, r7
   15f0c:	41bf      	sbcs	r7, r7
   15f0e:	427f      	negs	r7, r7
   15f10:	19e4      	adds	r4, r4, r7
   15f12:	001f      	movs	r7, r3
   15f14:	0223      	lsls	r3, r4, #8
   15f16:	d52c      	bpl.n	15f72 <__aeabi_dadd+0x17e>
   15f18:	4b96      	ldr	r3, [pc, #600]	; (16174 <__aeabi_dadd+0x380>)
   15f1a:	3601      	adds	r6, #1
   15f1c:	429e      	cmp	r6, r3
   15f1e:	d100      	bne.n	15f22 <__aeabi_dadd+0x12e>
   15f20:	e09a      	b.n	16058 <__aeabi_dadd+0x264>
   15f22:	4645      	mov	r5, r8
   15f24:	4b94      	ldr	r3, [pc, #592]	; (16178 <__aeabi_dadd+0x384>)
   15f26:	08ff      	lsrs	r7, r7, #3
   15f28:	401c      	ands	r4, r3
   15f2a:	0760      	lsls	r0, r4, #29
   15f2c:	0576      	lsls	r6, r6, #21
   15f2e:	0264      	lsls	r4, r4, #9
   15f30:	4307      	orrs	r7, r0
   15f32:	0b24      	lsrs	r4, r4, #12
   15f34:	0d76      	lsrs	r6, r6, #21
   15f36:	2100      	movs	r1, #0
   15f38:	0324      	lsls	r4, r4, #12
   15f3a:	0b23      	lsrs	r3, r4, #12
   15f3c:	0d0c      	lsrs	r4, r1, #20
   15f3e:	4a8f      	ldr	r2, [pc, #572]	; (1617c <__aeabi_dadd+0x388>)
   15f40:	0524      	lsls	r4, r4, #20
   15f42:	431c      	orrs	r4, r3
   15f44:	4014      	ands	r4, r2
   15f46:	0533      	lsls	r3, r6, #20
   15f48:	4323      	orrs	r3, r4
   15f4a:	005b      	lsls	r3, r3, #1
   15f4c:	07ed      	lsls	r5, r5, #31
   15f4e:	085b      	lsrs	r3, r3, #1
   15f50:	432b      	orrs	r3, r5
   15f52:	0038      	movs	r0, r7
   15f54:	0019      	movs	r1, r3
   15f56:	bc3c      	pop	{r2, r3, r4, r5}
   15f58:	4690      	mov	r8, r2
   15f5a:	4699      	mov	r9, r3
   15f5c:	46a2      	mov	sl, r4
   15f5e:	46ab      	mov	fp, r5
   15f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15f62:	4664      	mov	r4, ip
   15f64:	4304      	orrs	r4, r0
   15f66:	d100      	bne.n	15f6a <__aeabi_dadd+0x176>
   15f68:	e211      	b.n	1638e <__aeabi_dadd+0x59a>
   15f6a:	0004      	movs	r4, r0
   15f6c:	4667      	mov	r7, ip
   15f6e:	077b      	lsls	r3, r7, #29
   15f70:	d1c6      	bne.n	15f00 <__aeabi_dadd+0x10c>
   15f72:	4645      	mov	r5, r8
   15f74:	0760      	lsls	r0, r4, #29
   15f76:	08ff      	lsrs	r7, r7, #3
   15f78:	4307      	orrs	r7, r0
   15f7a:	08e4      	lsrs	r4, r4, #3
   15f7c:	4b7d      	ldr	r3, [pc, #500]	; (16174 <__aeabi_dadd+0x380>)
   15f7e:	429e      	cmp	r6, r3
   15f80:	d030      	beq.n	15fe4 <__aeabi_dadd+0x1f0>
   15f82:	0324      	lsls	r4, r4, #12
   15f84:	0576      	lsls	r6, r6, #21
   15f86:	0b24      	lsrs	r4, r4, #12
   15f88:	0d76      	lsrs	r6, r6, #21
   15f8a:	e7d4      	b.n	15f36 <__aeabi_dadd+0x142>
   15f8c:	1a33      	subs	r3, r6, r0
   15f8e:	469a      	mov	sl, r3
   15f90:	2b00      	cmp	r3, #0
   15f92:	dd78      	ble.n	16086 <__aeabi_dadd+0x292>
   15f94:	2800      	cmp	r0, #0
   15f96:	d031      	beq.n	15ffc <__aeabi_dadd+0x208>
   15f98:	4876      	ldr	r0, [pc, #472]	; (16174 <__aeabi_dadd+0x380>)
   15f9a:	4286      	cmp	r6, r0
   15f9c:	d0ae      	beq.n	15efc <__aeabi_dadd+0x108>
   15f9e:	2080      	movs	r0, #128	; 0x80
   15fa0:	0400      	lsls	r0, r0, #16
   15fa2:	4301      	orrs	r1, r0
   15fa4:	4653      	mov	r3, sl
   15fa6:	2b38      	cmp	r3, #56	; 0x38
   15fa8:	dc00      	bgt.n	15fac <__aeabi_dadd+0x1b8>
   15faa:	e0e9      	b.n	16180 <__aeabi_dadd+0x38c>
   15fac:	430a      	orrs	r2, r1
   15fae:	1e51      	subs	r1, r2, #1
   15fb0:	418a      	sbcs	r2, r1
   15fb2:	2100      	movs	r1, #0
   15fb4:	19d2      	adds	r2, r2, r7
   15fb6:	42ba      	cmp	r2, r7
   15fb8:	41bf      	sbcs	r7, r7
   15fba:	1909      	adds	r1, r1, r4
   15fbc:	427c      	negs	r4, r7
   15fbe:	0017      	movs	r7, r2
   15fc0:	190c      	adds	r4, r1, r4
   15fc2:	0223      	lsls	r3, r4, #8
   15fc4:	d5d3      	bpl.n	15f6e <__aeabi_dadd+0x17a>
   15fc6:	4b6b      	ldr	r3, [pc, #428]	; (16174 <__aeabi_dadd+0x380>)
   15fc8:	3601      	adds	r6, #1
   15fca:	429e      	cmp	r6, r3
   15fcc:	d100      	bne.n	15fd0 <__aeabi_dadd+0x1dc>
   15fce:	e13a      	b.n	16246 <__aeabi_dadd+0x452>
   15fd0:	2001      	movs	r0, #1
   15fd2:	4b69      	ldr	r3, [pc, #420]	; (16178 <__aeabi_dadd+0x384>)
   15fd4:	401c      	ands	r4, r3
   15fd6:	087b      	lsrs	r3, r7, #1
   15fd8:	4007      	ands	r7, r0
   15fda:	431f      	orrs	r7, r3
   15fdc:	07e0      	lsls	r0, r4, #31
   15fde:	4307      	orrs	r7, r0
   15fe0:	0864      	lsrs	r4, r4, #1
   15fe2:	e78b      	b.n	15efc <__aeabi_dadd+0x108>
   15fe4:	0023      	movs	r3, r4
   15fe6:	433b      	orrs	r3, r7
   15fe8:	d100      	bne.n	15fec <__aeabi_dadd+0x1f8>
   15fea:	e1cb      	b.n	16384 <__aeabi_dadd+0x590>
   15fec:	2280      	movs	r2, #128	; 0x80
   15fee:	0312      	lsls	r2, r2, #12
   15ff0:	4314      	orrs	r4, r2
   15ff2:	0324      	lsls	r4, r4, #12
   15ff4:	0b24      	lsrs	r4, r4, #12
   15ff6:	e79e      	b.n	15f36 <__aeabi_dadd+0x142>
   15ff8:	002e      	movs	r6, r5
   15ffa:	e77f      	b.n	15efc <__aeabi_dadd+0x108>
   15ffc:	0008      	movs	r0, r1
   15ffe:	4310      	orrs	r0, r2
   16000:	d100      	bne.n	16004 <__aeabi_dadd+0x210>
   16002:	e0b4      	b.n	1616e <__aeabi_dadd+0x37a>
   16004:	1e58      	subs	r0, r3, #1
   16006:	2800      	cmp	r0, #0
   16008:	d000      	beq.n	1600c <__aeabi_dadd+0x218>
   1600a:	e0de      	b.n	161ca <__aeabi_dadd+0x3d6>
   1600c:	18ba      	adds	r2, r7, r2
   1600e:	42ba      	cmp	r2, r7
   16010:	419b      	sbcs	r3, r3
   16012:	1864      	adds	r4, r4, r1
   16014:	425b      	negs	r3, r3
   16016:	18e4      	adds	r4, r4, r3
   16018:	0017      	movs	r7, r2
   1601a:	2601      	movs	r6, #1
   1601c:	0223      	lsls	r3, r4, #8
   1601e:	d5a6      	bpl.n	15f6e <__aeabi_dadd+0x17a>
   16020:	2602      	movs	r6, #2
   16022:	e7d5      	b.n	15fd0 <__aeabi_dadd+0x1dc>
   16024:	2d00      	cmp	r5, #0
   16026:	d16e      	bne.n	16106 <__aeabi_dadd+0x312>
   16028:	1c70      	adds	r0, r6, #1
   1602a:	0540      	lsls	r0, r0, #21
   1602c:	0d40      	lsrs	r0, r0, #21
   1602e:	2801      	cmp	r0, #1
   16030:	dc00      	bgt.n	16034 <__aeabi_dadd+0x240>
   16032:	e0f9      	b.n	16228 <__aeabi_dadd+0x434>
   16034:	1ab8      	subs	r0, r7, r2
   16036:	4684      	mov	ip, r0
   16038:	4287      	cmp	r7, r0
   1603a:	4180      	sbcs	r0, r0
   1603c:	1ae5      	subs	r5, r4, r3
   1603e:	4240      	negs	r0, r0
   16040:	1a2d      	subs	r5, r5, r0
   16042:	0228      	lsls	r0, r5, #8
   16044:	d400      	bmi.n	16048 <__aeabi_dadd+0x254>
   16046:	e089      	b.n	1615c <__aeabi_dadd+0x368>
   16048:	1bd7      	subs	r7, r2, r7
   1604a:	42ba      	cmp	r2, r7
   1604c:	4192      	sbcs	r2, r2
   1604e:	1b1c      	subs	r4, r3, r4
   16050:	4252      	negs	r2, r2
   16052:	1aa5      	subs	r5, r4, r2
   16054:	46d8      	mov	r8, fp
   16056:	e729      	b.n	15eac <__aeabi_dadd+0xb8>
   16058:	4645      	mov	r5, r8
   1605a:	2400      	movs	r4, #0
   1605c:	2700      	movs	r7, #0
   1605e:	e76a      	b.n	15f36 <__aeabi_dadd+0x142>
   16060:	4c45      	ldr	r4, [pc, #276]	; (16178 <__aeabi_dadd+0x384>)
   16062:	1af6      	subs	r6, r6, r3
   16064:	402c      	ands	r4, r5
   16066:	e749      	b.n	15efc <__aeabi_dadd+0x108>
   16068:	003d      	movs	r5, r7
   1606a:	3828      	subs	r0, #40	; 0x28
   1606c:	4085      	lsls	r5, r0
   1606e:	2700      	movs	r7, #0
   16070:	e72e      	b.n	15ed0 <__aeabi_dadd+0xdc>
   16072:	0038      	movs	r0, r7
   16074:	f001 fcb8 	bl	179e8 <__clzsi2>
   16078:	3020      	adds	r0, #32
   1607a:	e71d      	b.n	15eb8 <__aeabi_dadd+0xc4>
   1607c:	430a      	orrs	r2, r1
   1607e:	1e51      	subs	r1, r2, #1
   16080:	418a      	sbcs	r2, r1
   16082:	2100      	movs	r1, #0
   16084:	e707      	b.n	15e96 <__aeabi_dadd+0xa2>
   16086:	2b00      	cmp	r3, #0
   16088:	d000      	beq.n	1608c <__aeabi_dadd+0x298>
   1608a:	e0f3      	b.n	16274 <__aeabi_dadd+0x480>
   1608c:	1c70      	adds	r0, r6, #1
   1608e:	0543      	lsls	r3, r0, #21
   16090:	0d5b      	lsrs	r3, r3, #21
   16092:	2b01      	cmp	r3, #1
   16094:	dc00      	bgt.n	16098 <__aeabi_dadd+0x2a4>
   16096:	e0ad      	b.n	161f4 <__aeabi_dadd+0x400>
   16098:	4b36      	ldr	r3, [pc, #216]	; (16174 <__aeabi_dadd+0x380>)
   1609a:	4298      	cmp	r0, r3
   1609c:	d100      	bne.n	160a0 <__aeabi_dadd+0x2ac>
   1609e:	e0d1      	b.n	16244 <__aeabi_dadd+0x450>
   160a0:	18ba      	adds	r2, r7, r2
   160a2:	42ba      	cmp	r2, r7
   160a4:	41bf      	sbcs	r7, r7
   160a6:	1864      	adds	r4, r4, r1
   160a8:	427f      	negs	r7, r7
   160aa:	19e4      	adds	r4, r4, r7
   160ac:	07e7      	lsls	r7, r4, #31
   160ae:	0852      	lsrs	r2, r2, #1
   160b0:	4317      	orrs	r7, r2
   160b2:	0864      	lsrs	r4, r4, #1
   160b4:	0006      	movs	r6, r0
   160b6:	e721      	b.n	15efc <__aeabi_dadd+0x108>
   160b8:	482e      	ldr	r0, [pc, #184]	; (16174 <__aeabi_dadd+0x380>)
   160ba:	4285      	cmp	r5, r0
   160bc:	d100      	bne.n	160c0 <__aeabi_dadd+0x2cc>
   160be:	e093      	b.n	161e8 <__aeabi_dadd+0x3f4>
   160c0:	001d      	movs	r5, r3
   160c2:	e6d0      	b.n	15e66 <__aeabi_dadd+0x72>
   160c4:	0029      	movs	r1, r5
   160c6:	3e1f      	subs	r6, #31
   160c8:	40f1      	lsrs	r1, r6
   160ca:	2b20      	cmp	r3, #32
   160cc:	d100      	bne.n	160d0 <__aeabi_dadd+0x2dc>
   160ce:	e08d      	b.n	161ec <__aeabi_dadd+0x3f8>
   160d0:	2240      	movs	r2, #64	; 0x40
   160d2:	1ad3      	subs	r3, r2, r3
   160d4:	409d      	lsls	r5, r3
   160d6:	432f      	orrs	r7, r5
   160d8:	1e7d      	subs	r5, r7, #1
   160da:	41af      	sbcs	r7, r5
   160dc:	2400      	movs	r4, #0
   160de:	430f      	orrs	r7, r1
   160e0:	2600      	movs	r6, #0
   160e2:	e744      	b.n	15f6e <__aeabi_dadd+0x17a>
   160e4:	002b      	movs	r3, r5
   160e6:	0008      	movs	r0, r1
   160e8:	3b20      	subs	r3, #32
   160ea:	40d8      	lsrs	r0, r3
   160ec:	0003      	movs	r3, r0
   160ee:	2d20      	cmp	r5, #32
   160f0:	d100      	bne.n	160f4 <__aeabi_dadd+0x300>
   160f2:	e07d      	b.n	161f0 <__aeabi_dadd+0x3fc>
   160f4:	2040      	movs	r0, #64	; 0x40
   160f6:	1b45      	subs	r5, r0, r5
   160f8:	40a9      	lsls	r1, r5
   160fa:	430a      	orrs	r2, r1
   160fc:	1e51      	subs	r1, r2, #1
   160fe:	418a      	sbcs	r2, r1
   16100:	2100      	movs	r1, #0
   16102:	431a      	orrs	r2, r3
   16104:	e6c7      	b.n	15e96 <__aeabi_dadd+0xa2>
   16106:	2e00      	cmp	r6, #0
   16108:	d050      	beq.n	161ac <__aeabi_dadd+0x3b8>
   1610a:	4e1a      	ldr	r6, [pc, #104]	; (16174 <__aeabi_dadd+0x380>)
   1610c:	42b0      	cmp	r0, r6
   1610e:	d057      	beq.n	161c0 <__aeabi_dadd+0x3cc>
   16110:	2680      	movs	r6, #128	; 0x80
   16112:	426b      	negs	r3, r5
   16114:	4699      	mov	r9, r3
   16116:	0436      	lsls	r6, r6, #16
   16118:	4334      	orrs	r4, r6
   1611a:	464b      	mov	r3, r9
   1611c:	2b38      	cmp	r3, #56	; 0x38
   1611e:	dd00      	ble.n	16122 <__aeabi_dadd+0x32e>
   16120:	e0d6      	b.n	162d0 <__aeabi_dadd+0x4dc>
   16122:	2b1f      	cmp	r3, #31
   16124:	dd00      	ble.n	16128 <__aeabi_dadd+0x334>
   16126:	e135      	b.n	16394 <__aeabi_dadd+0x5a0>
   16128:	2620      	movs	r6, #32
   1612a:	1af5      	subs	r5, r6, r3
   1612c:	0026      	movs	r6, r4
   1612e:	40ae      	lsls	r6, r5
   16130:	46b2      	mov	sl, r6
   16132:	003e      	movs	r6, r7
   16134:	40de      	lsrs	r6, r3
   16136:	46ac      	mov	ip, r5
   16138:	0035      	movs	r5, r6
   1613a:	4656      	mov	r6, sl
   1613c:	432e      	orrs	r6, r5
   1613e:	4665      	mov	r5, ip
   16140:	40af      	lsls	r7, r5
   16142:	1e7d      	subs	r5, r7, #1
   16144:	41af      	sbcs	r7, r5
   16146:	40dc      	lsrs	r4, r3
   16148:	4337      	orrs	r7, r6
   1614a:	1bd7      	subs	r7, r2, r7
   1614c:	42ba      	cmp	r2, r7
   1614e:	4192      	sbcs	r2, r2
   16150:	1b0c      	subs	r4, r1, r4
   16152:	4252      	negs	r2, r2
   16154:	1aa4      	subs	r4, r4, r2
   16156:	0006      	movs	r6, r0
   16158:	46d8      	mov	r8, fp
   1615a:	e6a3      	b.n	15ea4 <__aeabi_dadd+0xb0>
   1615c:	4664      	mov	r4, ip
   1615e:	4667      	mov	r7, ip
   16160:	432c      	orrs	r4, r5
   16162:	d000      	beq.n	16166 <__aeabi_dadd+0x372>
   16164:	e6a2      	b.n	15eac <__aeabi_dadd+0xb8>
   16166:	2500      	movs	r5, #0
   16168:	2600      	movs	r6, #0
   1616a:	2700      	movs	r7, #0
   1616c:	e706      	b.n	15f7c <__aeabi_dadd+0x188>
   1616e:	001e      	movs	r6, r3
   16170:	e6c4      	b.n	15efc <__aeabi_dadd+0x108>
   16172:	46c0      	nop			; (mov r8, r8)
   16174:	000007ff 	.word	0x000007ff
   16178:	ff7fffff 	.word	0xff7fffff
   1617c:	800fffff 	.word	0x800fffff
   16180:	2b1f      	cmp	r3, #31
   16182:	dc63      	bgt.n	1624c <__aeabi_dadd+0x458>
   16184:	2020      	movs	r0, #32
   16186:	1ac3      	subs	r3, r0, r3
   16188:	0008      	movs	r0, r1
   1618a:	4098      	lsls	r0, r3
   1618c:	469c      	mov	ip, r3
   1618e:	4683      	mov	fp, r0
   16190:	4653      	mov	r3, sl
   16192:	0010      	movs	r0, r2
   16194:	40d8      	lsrs	r0, r3
   16196:	0003      	movs	r3, r0
   16198:	4658      	mov	r0, fp
   1619a:	4318      	orrs	r0, r3
   1619c:	4663      	mov	r3, ip
   1619e:	409a      	lsls	r2, r3
   161a0:	1e53      	subs	r3, r2, #1
   161a2:	419a      	sbcs	r2, r3
   161a4:	4653      	mov	r3, sl
   161a6:	4302      	orrs	r2, r0
   161a8:	40d9      	lsrs	r1, r3
   161aa:	e703      	b.n	15fb4 <__aeabi_dadd+0x1c0>
   161ac:	0026      	movs	r6, r4
   161ae:	433e      	orrs	r6, r7
   161b0:	d006      	beq.n	161c0 <__aeabi_dadd+0x3cc>
   161b2:	43eb      	mvns	r3, r5
   161b4:	4699      	mov	r9, r3
   161b6:	2b00      	cmp	r3, #0
   161b8:	d0c7      	beq.n	1614a <__aeabi_dadd+0x356>
   161ba:	4e94      	ldr	r6, [pc, #592]	; (1640c <__aeabi_dadd+0x618>)
   161bc:	42b0      	cmp	r0, r6
   161be:	d1ac      	bne.n	1611a <__aeabi_dadd+0x326>
   161c0:	000c      	movs	r4, r1
   161c2:	0017      	movs	r7, r2
   161c4:	0006      	movs	r6, r0
   161c6:	46d8      	mov	r8, fp
   161c8:	e698      	b.n	15efc <__aeabi_dadd+0x108>
   161ca:	4b90      	ldr	r3, [pc, #576]	; (1640c <__aeabi_dadd+0x618>)
   161cc:	459a      	cmp	sl, r3
   161ce:	d00b      	beq.n	161e8 <__aeabi_dadd+0x3f4>
   161d0:	4682      	mov	sl, r0
   161d2:	e6e7      	b.n	15fa4 <__aeabi_dadd+0x1b0>
   161d4:	2800      	cmp	r0, #0
   161d6:	d000      	beq.n	161da <__aeabi_dadd+0x3e6>
   161d8:	e09e      	b.n	16318 <__aeabi_dadd+0x524>
   161da:	0018      	movs	r0, r3
   161dc:	4310      	orrs	r0, r2
   161de:	d100      	bne.n	161e2 <__aeabi_dadd+0x3ee>
   161e0:	e0e9      	b.n	163b6 <__aeabi_dadd+0x5c2>
   161e2:	001c      	movs	r4, r3
   161e4:	0017      	movs	r7, r2
   161e6:	46d8      	mov	r8, fp
   161e8:	4e88      	ldr	r6, [pc, #544]	; (1640c <__aeabi_dadd+0x618>)
   161ea:	e687      	b.n	15efc <__aeabi_dadd+0x108>
   161ec:	2500      	movs	r5, #0
   161ee:	e772      	b.n	160d6 <__aeabi_dadd+0x2e2>
   161f0:	2100      	movs	r1, #0
   161f2:	e782      	b.n	160fa <__aeabi_dadd+0x306>
   161f4:	0023      	movs	r3, r4
   161f6:	433b      	orrs	r3, r7
   161f8:	2e00      	cmp	r6, #0
   161fa:	d000      	beq.n	161fe <__aeabi_dadd+0x40a>
   161fc:	e0ab      	b.n	16356 <__aeabi_dadd+0x562>
   161fe:	2b00      	cmp	r3, #0
   16200:	d100      	bne.n	16204 <__aeabi_dadd+0x410>
   16202:	e0e7      	b.n	163d4 <__aeabi_dadd+0x5e0>
   16204:	000b      	movs	r3, r1
   16206:	4313      	orrs	r3, r2
   16208:	d100      	bne.n	1620c <__aeabi_dadd+0x418>
   1620a:	e677      	b.n	15efc <__aeabi_dadd+0x108>
   1620c:	18ba      	adds	r2, r7, r2
   1620e:	42ba      	cmp	r2, r7
   16210:	41bf      	sbcs	r7, r7
   16212:	1864      	adds	r4, r4, r1
   16214:	427f      	negs	r7, r7
   16216:	19e4      	adds	r4, r4, r7
   16218:	0223      	lsls	r3, r4, #8
   1621a:	d400      	bmi.n	1621e <__aeabi_dadd+0x42a>
   1621c:	e0f2      	b.n	16404 <__aeabi_dadd+0x610>
   1621e:	4b7c      	ldr	r3, [pc, #496]	; (16410 <__aeabi_dadd+0x61c>)
   16220:	0017      	movs	r7, r2
   16222:	401c      	ands	r4, r3
   16224:	0006      	movs	r6, r0
   16226:	e669      	b.n	15efc <__aeabi_dadd+0x108>
   16228:	0020      	movs	r0, r4
   1622a:	4338      	orrs	r0, r7
   1622c:	2e00      	cmp	r6, #0
   1622e:	d1d1      	bne.n	161d4 <__aeabi_dadd+0x3e0>
   16230:	2800      	cmp	r0, #0
   16232:	d15b      	bne.n	162ec <__aeabi_dadd+0x4f8>
   16234:	001c      	movs	r4, r3
   16236:	4314      	orrs	r4, r2
   16238:	d100      	bne.n	1623c <__aeabi_dadd+0x448>
   1623a:	e0a8      	b.n	1638e <__aeabi_dadd+0x59a>
   1623c:	001c      	movs	r4, r3
   1623e:	0017      	movs	r7, r2
   16240:	46d8      	mov	r8, fp
   16242:	e65b      	b.n	15efc <__aeabi_dadd+0x108>
   16244:	0006      	movs	r6, r0
   16246:	2400      	movs	r4, #0
   16248:	2700      	movs	r7, #0
   1624a:	e697      	b.n	15f7c <__aeabi_dadd+0x188>
   1624c:	4650      	mov	r0, sl
   1624e:	000b      	movs	r3, r1
   16250:	3820      	subs	r0, #32
   16252:	40c3      	lsrs	r3, r0
   16254:	4699      	mov	r9, r3
   16256:	4653      	mov	r3, sl
   16258:	2b20      	cmp	r3, #32
   1625a:	d100      	bne.n	1625e <__aeabi_dadd+0x46a>
   1625c:	e095      	b.n	1638a <__aeabi_dadd+0x596>
   1625e:	2340      	movs	r3, #64	; 0x40
   16260:	4650      	mov	r0, sl
   16262:	1a1b      	subs	r3, r3, r0
   16264:	4099      	lsls	r1, r3
   16266:	430a      	orrs	r2, r1
   16268:	1e51      	subs	r1, r2, #1
   1626a:	418a      	sbcs	r2, r1
   1626c:	464b      	mov	r3, r9
   1626e:	2100      	movs	r1, #0
   16270:	431a      	orrs	r2, r3
   16272:	e69f      	b.n	15fb4 <__aeabi_dadd+0x1c0>
   16274:	2e00      	cmp	r6, #0
   16276:	d130      	bne.n	162da <__aeabi_dadd+0x4e6>
   16278:	0026      	movs	r6, r4
   1627a:	433e      	orrs	r6, r7
   1627c:	d067      	beq.n	1634e <__aeabi_dadd+0x55a>
   1627e:	43db      	mvns	r3, r3
   16280:	469a      	mov	sl, r3
   16282:	2b00      	cmp	r3, #0
   16284:	d01c      	beq.n	162c0 <__aeabi_dadd+0x4cc>
   16286:	4e61      	ldr	r6, [pc, #388]	; (1640c <__aeabi_dadd+0x618>)
   16288:	42b0      	cmp	r0, r6
   1628a:	d060      	beq.n	1634e <__aeabi_dadd+0x55a>
   1628c:	4653      	mov	r3, sl
   1628e:	2b38      	cmp	r3, #56	; 0x38
   16290:	dd00      	ble.n	16294 <__aeabi_dadd+0x4a0>
   16292:	e096      	b.n	163c2 <__aeabi_dadd+0x5ce>
   16294:	2b1f      	cmp	r3, #31
   16296:	dd00      	ble.n	1629a <__aeabi_dadd+0x4a6>
   16298:	e09f      	b.n	163da <__aeabi_dadd+0x5e6>
   1629a:	2620      	movs	r6, #32
   1629c:	1af3      	subs	r3, r6, r3
   1629e:	0026      	movs	r6, r4
   162a0:	409e      	lsls	r6, r3
   162a2:	469c      	mov	ip, r3
   162a4:	46b3      	mov	fp, r6
   162a6:	4653      	mov	r3, sl
   162a8:	003e      	movs	r6, r7
   162aa:	40de      	lsrs	r6, r3
   162ac:	0033      	movs	r3, r6
   162ae:	465e      	mov	r6, fp
   162b0:	431e      	orrs	r6, r3
   162b2:	4663      	mov	r3, ip
   162b4:	409f      	lsls	r7, r3
   162b6:	1e7b      	subs	r3, r7, #1
   162b8:	419f      	sbcs	r7, r3
   162ba:	4653      	mov	r3, sl
   162bc:	40dc      	lsrs	r4, r3
   162be:	4337      	orrs	r7, r6
   162c0:	18bf      	adds	r7, r7, r2
   162c2:	4297      	cmp	r7, r2
   162c4:	4192      	sbcs	r2, r2
   162c6:	1864      	adds	r4, r4, r1
   162c8:	4252      	negs	r2, r2
   162ca:	18a4      	adds	r4, r4, r2
   162cc:	0006      	movs	r6, r0
   162ce:	e678      	b.n	15fc2 <__aeabi_dadd+0x1ce>
   162d0:	4327      	orrs	r7, r4
   162d2:	1e7c      	subs	r4, r7, #1
   162d4:	41a7      	sbcs	r7, r4
   162d6:	2400      	movs	r4, #0
   162d8:	e737      	b.n	1614a <__aeabi_dadd+0x356>
   162da:	4e4c      	ldr	r6, [pc, #304]	; (1640c <__aeabi_dadd+0x618>)
   162dc:	42b0      	cmp	r0, r6
   162de:	d036      	beq.n	1634e <__aeabi_dadd+0x55a>
   162e0:	2680      	movs	r6, #128	; 0x80
   162e2:	425b      	negs	r3, r3
   162e4:	0436      	lsls	r6, r6, #16
   162e6:	469a      	mov	sl, r3
   162e8:	4334      	orrs	r4, r6
   162ea:	e7cf      	b.n	1628c <__aeabi_dadd+0x498>
   162ec:	0018      	movs	r0, r3
   162ee:	4310      	orrs	r0, r2
   162f0:	d100      	bne.n	162f4 <__aeabi_dadd+0x500>
   162f2:	e603      	b.n	15efc <__aeabi_dadd+0x108>
   162f4:	1ab8      	subs	r0, r7, r2
   162f6:	4684      	mov	ip, r0
   162f8:	4567      	cmp	r7, ip
   162fa:	41ad      	sbcs	r5, r5
   162fc:	1ae0      	subs	r0, r4, r3
   162fe:	426d      	negs	r5, r5
   16300:	1b40      	subs	r0, r0, r5
   16302:	0205      	lsls	r5, r0, #8
   16304:	d400      	bmi.n	16308 <__aeabi_dadd+0x514>
   16306:	e62c      	b.n	15f62 <__aeabi_dadd+0x16e>
   16308:	1bd7      	subs	r7, r2, r7
   1630a:	42ba      	cmp	r2, r7
   1630c:	4192      	sbcs	r2, r2
   1630e:	1b1c      	subs	r4, r3, r4
   16310:	4252      	negs	r2, r2
   16312:	1aa4      	subs	r4, r4, r2
   16314:	46d8      	mov	r8, fp
   16316:	e5f1      	b.n	15efc <__aeabi_dadd+0x108>
   16318:	0018      	movs	r0, r3
   1631a:	4310      	orrs	r0, r2
   1631c:	d100      	bne.n	16320 <__aeabi_dadd+0x52c>
   1631e:	e763      	b.n	161e8 <__aeabi_dadd+0x3f4>
   16320:	08f8      	lsrs	r0, r7, #3
   16322:	0767      	lsls	r7, r4, #29
   16324:	4307      	orrs	r7, r0
   16326:	2080      	movs	r0, #128	; 0x80
   16328:	08e4      	lsrs	r4, r4, #3
   1632a:	0300      	lsls	r0, r0, #12
   1632c:	4204      	tst	r4, r0
   1632e:	d008      	beq.n	16342 <__aeabi_dadd+0x54e>
   16330:	08dd      	lsrs	r5, r3, #3
   16332:	4205      	tst	r5, r0
   16334:	d105      	bne.n	16342 <__aeabi_dadd+0x54e>
   16336:	08d2      	lsrs	r2, r2, #3
   16338:	0759      	lsls	r1, r3, #29
   1633a:	4311      	orrs	r1, r2
   1633c:	000f      	movs	r7, r1
   1633e:	002c      	movs	r4, r5
   16340:	46d8      	mov	r8, fp
   16342:	0f7b      	lsrs	r3, r7, #29
   16344:	00e4      	lsls	r4, r4, #3
   16346:	431c      	orrs	r4, r3
   16348:	00ff      	lsls	r7, r7, #3
   1634a:	4e30      	ldr	r6, [pc, #192]	; (1640c <__aeabi_dadd+0x618>)
   1634c:	e5d6      	b.n	15efc <__aeabi_dadd+0x108>
   1634e:	000c      	movs	r4, r1
   16350:	0017      	movs	r7, r2
   16352:	0006      	movs	r6, r0
   16354:	e5d2      	b.n	15efc <__aeabi_dadd+0x108>
   16356:	2b00      	cmp	r3, #0
   16358:	d038      	beq.n	163cc <__aeabi_dadd+0x5d8>
   1635a:	000b      	movs	r3, r1
   1635c:	4313      	orrs	r3, r2
   1635e:	d100      	bne.n	16362 <__aeabi_dadd+0x56e>
   16360:	e742      	b.n	161e8 <__aeabi_dadd+0x3f4>
   16362:	08f8      	lsrs	r0, r7, #3
   16364:	0767      	lsls	r7, r4, #29
   16366:	4307      	orrs	r7, r0
   16368:	2080      	movs	r0, #128	; 0x80
   1636a:	08e4      	lsrs	r4, r4, #3
   1636c:	0300      	lsls	r0, r0, #12
   1636e:	4204      	tst	r4, r0
   16370:	d0e7      	beq.n	16342 <__aeabi_dadd+0x54e>
   16372:	08cb      	lsrs	r3, r1, #3
   16374:	4203      	tst	r3, r0
   16376:	d1e4      	bne.n	16342 <__aeabi_dadd+0x54e>
   16378:	08d2      	lsrs	r2, r2, #3
   1637a:	0749      	lsls	r1, r1, #29
   1637c:	4311      	orrs	r1, r2
   1637e:	000f      	movs	r7, r1
   16380:	001c      	movs	r4, r3
   16382:	e7de      	b.n	16342 <__aeabi_dadd+0x54e>
   16384:	2700      	movs	r7, #0
   16386:	2400      	movs	r4, #0
   16388:	e5d5      	b.n	15f36 <__aeabi_dadd+0x142>
   1638a:	2100      	movs	r1, #0
   1638c:	e76b      	b.n	16266 <__aeabi_dadd+0x472>
   1638e:	2500      	movs	r5, #0
   16390:	2700      	movs	r7, #0
   16392:	e5f3      	b.n	15f7c <__aeabi_dadd+0x188>
   16394:	464e      	mov	r6, r9
   16396:	0025      	movs	r5, r4
   16398:	3e20      	subs	r6, #32
   1639a:	40f5      	lsrs	r5, r6
   1639c:	464b      	mov	r3, r9
   1639e:	002e      	movs	r6, r5
   163a0:	2b20      	cmp	r3, #32
   163a2:	d02d      	beq.n	16400 <__aeabi_dadd+0x60c>
   163a4:	2540      	movs	r5, #64	; 0x40
   163a6:	1aed      	subs	r5, r5, r3
   163a8:	40ac      	lsls	r4, r5
   163aa:	4327      	orrs	r7, r4
   163ac:	1e7c      	subs	r4, r7, #1
   163ae:	41a7      	sbcs	r7, r4
   163b0:	2400      	movs	r4, #0
   163b2:	4337      	orrs	r7, r6
   163b4:	e6c9      	b.n	1614a <__aeabi_dadd+0x356>
   163b6:	2480      	movs	r4, #128	; 0x80
   163b8:	2500      	movs	r5, #0
   163ba:	0324      	lsls	r4, r4, #12
   163bc:	4e13      	ldr	r6, [pc, #76]	; (1640c <__aeabi_dadd+0x618>)
   163be:	2700      	movs	r7, #0
   163c0:	e5dc      	b.n	15f7c <__aeabi_dadd+0x188>
   163c2:	4327      	orrs	r7, r4
   163c4:	1e7c      	subs	r4, r7, #1
   163c6:	41a7      	sbcs	r7, r4
   163c8:	2400      	movs	r4, #0
   163ca:	e779      	b.n	162c0 <__aeabi_dadd+0x4cc>
   163cc:	000c      	movs	r4, r1
   163ce:	0017      	movs	r7, r2
   163d0:	4e0e      	ldr	r6, [pc, #56]	; (1640c <__aeabi_dadd+0x618>)
   163d2:	e593      	b.n	15efc <__aeabi_dadd+0x108>
   163d4:	000c      	movs	r4, r1
   163d6:	0017      	movs	r7, r2
   163d8:	e590      	b.n	15efc <__aeabi_dadd+0x108>
   163da:	4656      	mov	r6, sl
   163dc:	0023      	movs	r3, r4
   163de:	3e20      	subs	r6, #32
   163e0:	40f3      	lsrs	r3, r6
   163e2:	4699      	mov	r9, r3
   163e4:	4653      	mov	r3, sl
   163e6:	2b20      	cmp	r3, #32
   163e8:	d00e      	beq.n	16408 <__aeabi_dadd+0x614>
   163ea:	2340      	movs	r3, #64	; 0x40
   163ec:	4656      	mov	r6, sl
   163ee:	1b9b      	subs	r3, r3, r6
   163f0:	409c      	lsls	r4, r3
   163f2:	4327      	orrs	r7, r4
   163f4:	1e7c      	subs	r4, r7, #1
   163f6:	41a7      	sbcs	r7, r4
   163f8:	464b      	mov	r3, r9
   163fa:	2400      	movs	r4, #0
   163fc:	431f      	orrs	r7, r3
   163fe:	e75f      	b.n	162c0 <__aeabi_dadd+0x4cc>
   16400:	2400      	movs	r4, #0
   16402:	e7d2      	b.n	163aa <__aeabi_dadd+0x5b6>
   16404:	0017      	movs	r7, r2
   16406:	e5b2      	b.n	15f6e <__aeabi_dadd+0x17a>
   16408:	2400      	movs	r4, #0
   1640a:	e7f2      	b.n	163f2 <__aeabi_dadd+0x5fe>
   1640c:	000007ff 	.word	0x000007ff
   16410:	ff7fffff 	.word	0xff7fffff

00016414 <__aeabi_ddiv>:
   16414:	b5f0      	push	{r4, r5, r6, r7, lr}
   16416:	4657      	mov	r7, sl
   16418:	4645      	mov	r5, r8
   1641a:	46de      	mov	lr, fp
   1641c:	464e      	mov	r6, r9
   1641e:	b5e0      	push	{r5, r6, r7, lr}
   16420:	004c      	lsls	r4, r1, #1
   16422:	030e      	lsls	r6, r1, #12
   16424:	b087      	sub	sp, #28
   16426:	4683      	mov	fp, r0
   16428:	4692      	mov	sl, r2
   1642a:	001d      	movs	r5, r3
   1642c:	4680      	mov	r8, r0
   1642e:	0b36      	lsrs	r6, r6, #12
   16430:	0d64      	lsrs	r4, r4, #21
   16432:	0fcf      	lsrs	r7, r1, #31
   16434:	2c00      	cmp	r4, #0
   16436:	d04f      	beq.n	164d8 <__aeabi_ddiv+0xc4>
   16438:	4b6f      	ldr	r3, [pc, #444]	; (165f8 <__aeabi_ddiv+0x1e4>)
   1643a:	429c      	cmp	r4, r3
   1643c:	d035      	beq.n	164aa <__aeabi_ddiv+0x96>
   1643e:	2380      	movs	r3, #128	; 0x80
   16440:	0f42      	lsrs	r2, r0, #29
   16442:	041b      	lsls	r3, r3, #16
   16444:	00f6      	lsls	r6, r6, #3
   16446:	4313      	orrs	r3, r2
   16448:	4333      	orrs	r3, r6
   1644a:	4699      	mov	r9, r3
   1644c:	00c3      	lsls	r3, r0, #3
   1644e:	4698      	mov	r8, r3
   16450:	4b6a      	ldr	r3, [pc, #424]	; (165fc <__aeabi_ddiv+0x1e8>)
   16452:	2600      	movs	r6, #0
   16454:	469c      	mov	ip, r3
   16456:	2300      	movs	r3, #0
   16458:	4464      	add	r4, ip
   1645a:	9303      	str	r3, [sp, #12]
   1645c:	032b      	lsls	r3, r5, #12
   1645e:	0b1b      	lsrs	r3, r3, #12
   16460:	469b      	mov	fp, r3
   16462:	006b      	lsls	r3, r5, #1
   16464:	0fed      	lsrs	r5, r5, #31
   16466:	4650      	mov	r0, sl
   16468:	0d5b      	lsrs	r3, r3, #21
   1646a:	9501      	str	r5, [sp, #4]
   1646c:	d05e      	beq.n	1652c <__aeabi_ddiv+0x118>
   1646e:	4a62      	ldr	r2, [pc, #392]	; (165f8 <__aeabi_ddiv+0x1e4>)
   16470:	4293      	cmp	r3, r2
   16472:	d053      	beq.n	1651c <__aeabi_ddiv+0x108>
   16474:	465a      	mov	r2, fp
   16476:	00d1      	lsls	r1, r2, #3
   16478:	2280      	movs	r2, #128	; 0x80
   1647a:	0f40      	lsrs	r0, r0, #29
   1647c:	0412      	lsls	r2, r2, #16
   1647e:	4302      	orrs	r2, r0
   16480:	430a      	orrs	r2, r1
   16482:	4693      	mov	fp, r2
   16484:	4652      	mov	r2, sl
   16486:	00d1      	lsls	r1, r2, #3
   16488:	4a5c      	ldr	r2, [pc, #368]	; (165fc <__aeabi_ddiv+0x1e8>)
   1648a:	4694      	mov	ip, r2
   1648c:	2200      	movs	r2, #0
   1648e:	4463      	add	r3, ip
   16490:	0038      	movs	r0, r7
   16492:	4068      	eors	r0, r5
   16494:	4684      	mov	ip, r0
   16496:	9002      	str	r0, [sp, #8]
   16498:	1ae4      	subs	r4, r4, r3
   1649a:	4316      	orrs	r6, r2
   1649c:	2e0f      	cmp	r6, #15
   1649e:	d900      	bls.n	164a2 <__aeabi_ddiv+0x8e>
   164a0:	e0b4      	b.n	1660c <__aeabi_ddiv+0x1f8>
   164a2:	4b57      	ldr	r3, [pc, #348]	; (16600 <__aeabi_ddiv+0x1ec>)
   164a4:	00b6      	lsls	r6, r6, #2
   164a6:	599b      	ldr	r3, [r3, r6]
   164a8:	469f      	mov	pc, r3
   164aa:	0003      	movs	r3, r0
   164ac:	4333      	orrs	r3, r6
   164ae:	4699      	mov	r9, r3
   164b0:	d16c      	bne.n	1658c <__aeabi_ddiv+0x178>
   164b2:	2300      	movs	r3, #0
   164b4:	4698      	mov	r8, r3
   164b6:	3302      	adds	r3, #2
   164b8:	2608      	movs	r6, #8
   164ba:	9303      	str	r3, [sp, #12]
   164bc:	e7ce      	b.n	1645c <__aeabi_ddiv+0x48>
   164be:	46cb      	mov	fp, r9
   164c0:	4641      	mov	r1, r8
   164c2:	9a03      	ldr	r2, [sp, #12]
   164c4:	9701      	str	r7, [sp, #4]
   164c6:	2a02      	cmp	r2, #2
   164c8:	d165      	bne.n	16596 <__aeabi_ddiv+0x182>
   164ca:	9b01      	ldr	r3, [sp, #4]
   164cc:	4c4a      	ldr	r4, [pc, #296]	; (165f8 <__aeabi_ddiv+0x1e4>)
   164ce:	469c      	mov	ip, r3
   164d0:	2300      	movs	r3, #0
   164d2:	2200      	movs	r2, #0
   164d4:	4698      	mov	r8, r3
   164d6:	e06b      	b.n	165b0 <__aeabi_ddiv+0x19c>
   164d8:	0003      	movs	r3, r0
   164da:	4333      	orrs	r3, r6
   164dc:	4699      	mov	r9, r3
   164de:	d04e      	beq.n	1657e <__aeabi_ddiv+0x16a>
   164e0:	2e00      	cmp	r6, #0
   164e2:	d100      	bne.n	164e6 <__aeabi_ddiv+0xd2>
   164e4:	e1bc      	b.n	16860 <__aeabi_ddiv+0x44c>
   164e6:	0030      	movs	r0, r6
   164e8:	f001 fa7e 	bl	179e8 <__clzsi2>
   164ec:	0003      	movs	r3, r0
   164ee:	3b0b      	subs	r3, #11
   164f0:	2b1c      	cmp	r3, #28
   164f2:	dd00      	ble.n	164f6 <__aeabi_ddiv+0xe2>
   164f4:	e1ac      	b.n	16850 <__aeabi_ddiv+0x43c>
   164f6:	221d      	movs	r2, #29
   164f8:	1ad3      	subs	r3, r2, r3
   164fa:	465a      	mov	r2, fp
   164fc:	0001      	movs	r1, r0
   164fe:	40da      	lsrs	r2, r3
   16500:	3908      	subs	r1, #8
   16502:	408e      	lsls	r6, r1
   16504:	0013      	movs	r3, r2
   16506:	4333      	orrs	r3, r6
   16508:	4699      	mov	r9, r3
   1650a:	465b      	mov	r3, fp
   1650c:	408b      	lsls	r3, r1
   1650e:	4698      	mov	r8, r3
   16510:	2300      	movs	r3, #0
   16512:	4c3c      	ldr	r4, [pc, #240]	; (16604 <__aeabi_ddiv+0x1f0>)
   16514:	2600      	movs	r6, #0
   16516:	1a24      	subs	r4, r4, r0
   16518:	9303      	str	r3, [sp, #12]
   1651a:	e79f      	b.n	1645c <__aeabi_ddiv+0x48>
   1651c:	4651      	mov	r1, sl
   1651e:	465a      	mov	r2, fp
   16520:	4311      	orrs	r1, r2
   16522:	d129      	bne.n	16578 <__aeabi_ddiv+0x164>
   16524:	2200      	movs	r2, #0
   16526:	4693      	mov	fp, r2
   16528:	3202      	adds	r2, #2
   1652a:	e7b1      	b.n	16490 <__aeabi_ddiv+0x7c>
   1652c:	4659      	mov	r1, fp
   1652e:	4301      	orrs	r1, r0
   16530:	d01e      	beq.n	16570 <__aeabi_ddiv+0x15c>
   16532:	465b      	mov	r3, fp
   16534:	2b00      	cmp	r3, #0
   16536:	d100      	bne.n	1653a <__aeabi_ddiv+0x126>
   16538:	e19e      	b.n	16878 <__aeabi_ddiv+0x464>
   1653a:	4658      	mov	r0, fp
   1653c:	f001 fa54 	bl	179e8 <__clzsi2>
   16540:	0003      	movs	r3, r0
   16542:	3b0b      	subs	r3, #11
   16544:	2b1c      	cmp	r3, #28
   16546:	dd00      	ble.n	1654a <__aeabi_ddiv+0x136>
   16548:	e18f      	b.n	1686a <__aeabi_ddiv+0x456>
   1654a:	0002      	movs	r2, r0
   1654c:	4659      	mov	r1, fp
   1654e:	3a08      	subs	r2, #8
   16550:	4091      	lsls	r1, r2
   16552:	468b      	mov	fp, r1
   16554:	211d      	movs	r1, #29
   16556:	1acb      	subs	r3, r1, r3
   16558:	4651      	mov	r1, sl
   1655a:	40d9      	lsrs	r1, r3
   1655c:	000b      	movs	r3, r1
   1655e:	4659      	mov	r1, fp
   16560:	430b      	orrs	r3, r1
   16562:	4651      	mov	r1, sl
   16564:	469b      	mov	fp, r3
   16566:	4091      	lsls	r1, r2
   16568:	4b26      	ldr	r3, [pc, #152]	; (16604 <__aeabi_ddiv+0x1f0>)
   1656a:	2200      	movs	r2, #0
   1656c:	1a1b      	subs	r3, r3, r0
   1656e:	e78f      	b.n	16490 <__aeabi_ddiv+0x7c>
   16570:	2300      	movs	r3, #0
   16572:	2201      	movs	r2, #1
   16574:	469b      	mov	fp, r3
   16576:	e78b      	b.n	16490 <__aeabi_ddiv+0x7c>
   16578:	4651      	mov	r1, sl
   1657a:	2203      	movs	r2, #3
   1657c:	e788      	b.n	16490 <__aeabi_ddiv+0x7c>
   1657e:	2300      	movs	r3, #0
   16580:	4698      	mov	r8, r3
   16582:	3301      	adds	r3, #1
   16584:	2604      	movs	r6, #4
   16586:	2400      	movs	r4, #0
   16588:	9303      	str	r3, [sp, #12]
   1658a:	e767      	b.n	1645c <__aeabi_ddiv+0x48>
   1658c:	2303      	movs	r3, #3
   1658e:	46b1      	mov	r9, r6
   16590:	9303      	str	r3, [sp, #12]
   16592:	260c      	movs	r6, #12
   16594:	e762      	b.n	1645c <__aeabi_ddiv+0x48>
   16596:	2a03      	cmp	r2, #3
   16598:	d100      	bne.n	1659c <__aeabi_ddiv+0x188>
   1659a:	e25c      	b.n	16a56 <__aeabi_ddiv+0x642>
   1659c:	9b01      	ldr	r3, [sp, #4]
   1659e:	2a01      	cmp	r2, #1
   165a0:	d000      	beq.n	165a4 <__aeabi_ddiv+0x190>
   165a2:	e1e4      	b.n	1696e <__aeabi_ddiv+0x55a>
   165a4:	4013      	ands	r3, r2
   165a6:	469c      	mov	ip, r3
   165a8:	2300      	movs	r3, #0
   165aa:	2400      	movs	r4, #0
   165ac:	2200      	movs	r2, #0
   165ae:	4698      	mov	r8, r3
   165b0:	2100      	movs	r1, #0
   165b2:	0312      	lsls	r2, r2, #12
   165b4:	0b13      	lsrs	r3, r2, #12
   165b6:	0d0a      	lsrs	r2, r1, #20
   165b8:	0512      	lsls	r2, r2, #20
   165ba:	431a      	orrs	r2, r3
   165bc:	0523      	lsls	r3, r4, #20
   165be:	4c12      	ldr	r4, [pc, #72]	; (16608 <__aeabi_ddiv+0x1f4>)
   165c0:	4640      	mov	r0, r8
   165c2:	4022      	ands	r2, r4
   165c4:	4313      	orrs	r3, r2
   165c6:	4662      	mov	r2, ip
   165c8:	005b      	lsls	r3, r3, #1
   165ca:	07d2      	lsls	r2, r2, #31
   165cc:	085b      	lsrs	r3, r3, #1
   165ce:	4313      	orrs	r3, r2
   165d0:	0019      	movs	r1, r3
   165d2:	b007      	add	sp, #28
   165d4:	bc3c      	pop	{r2, r3, r4, r5}
   165d6:	4690      	mov	r8, r2
   165d8:	4699      	mov	r9, r3
   165da:	46a2      	mov	sl, r4
   165dc:	46ab      	mov	fp, r5
   165de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   165e0:	2300      	movs	r3, #0
   165e2:	2280      	movs	r2, #128	; 0x80
   165e4:	469c      	mov	ip, r3
   165e6:	0312      	lsls	r2, r2, #12
   165e8:	4698      	mov	r8, r3
   165ea:	4c03      	ldr	r4, [pc, #12]	; (165f8 <__aeabi_ddiv+0x1e4>)
   165ec:	e7e0      	b.n	165b0 <__aeabi_ddiv+0x19c>
   165ee:	2300      	movs	r3, #0
   165f0:	4c01      	ldr	r4, [pc, #4]	; (165f8 <__aeabi_ddiv+0x1e4>)
   165f2:	2200      	movs	r2, #0
   165f4:	4698      	mov	r8, r3
   165f6:	e7db      	b.n	165b0 <__aeabi_ddiv+0x19c>
   165f8:	000007ff 	.word	0x000007ff
   165fc:	fffffc01 	.word	0xfffffc01
   16600:	000199c0 	.word	0x000199c0
   16604:	fffffc0d 	.word	0xfffffc0d
   16608:	800fffff 	.word	0x800fffff
   1660c:	45d9      	cmp	r9, fp
   1660e:	d900      	bls.n	16612 <__aeabi_ddiv+0x1fe>
   16610:	e139      	b.n	16886 <__aeabi_ddiv+0x472>
   16612:	d100      	bne.n	16616 <__aeabi_ddiv+0x202>
   16614:	e134      	b.n	16880 <__aeabi_ddiv+0x46c>
   16616:	2300      	movs	r3, #0
   16618:	4646      	mov	r6, r8
   1661a:	464d      	mov	r5, r9
   1661c:	469a      	mov	sl, r3
   1661e:	3c01      	subs	r4, #1
   16620:	465b      	mov	r3, fp
   16622:	0e0a      	lsrs	r2, r1, #24
   16624:	021b      	lsls	r3, r3, #8
   16626:	431a      	orrs	r2, r3
   16628:	020b      	lsls	r3, r1, #8
   1662a:	0c17      	lsrs	r7, r2, #16
   1662c:	9303      	str	r3, [sp, #12]
   1662e:	0413      	lsls	r3, r2, #16
   16630:	0c1b      	lsrs	r3, r3, #16
   16632:	0039      	movs	r1, r7
   16634:	0028      	movs	r0, r5
   16636:	4690      	mov	r8, r2
   16638:	9301      	str	r3, [sp, #4]
   1663a:	f7fe fe51 	bl	152e0 <__udivsi3>
   1663e:	0002      	movs	r2, r0
   16640:	9b01      	ldr	r3, [sp, #4]
   16642:	4683      	mov	fp, r0
   16644:	435a      	muls	r2, r3
   16646:	0028      	movs	r0, r5
   16648:	0039      	movs	r1, r7
   1664a:	4691      	mov	r9, r2
   1664c:	f7fe fece 	bl	153ec <__aeabi_uidivmod>
   16650:	0c35      	lsrs	r5, r6, #16
   16652:	0409      	lsls	r1, r1, #16
   16654:	430d      	orrs	r5, r1
   16656:	45a9      	cmp	r9, r5
   16658:	d90d      	bls.n	16676 <__aeabi_ddiv+0x262>
   1665a:	465b      	mov	r3, fp
   1665c:	4445      	add	r5, r8
   1665e:	3b01      	subs	r3, #1
   16660:	45a8      	cmp	r8, r5
   16662:	d900      	bls.n	16666 <__aeabi_ddiv+0x252>
   16664:	e13a      	b.n	168dc <__aeabi_ddiv+0x4c8>
   16666:	45a9      	cmp	r9, r5
   16668:	d800      	bhi.n	1666c <__aeabi_ddiv+0x258>
   1666a:	e137      	b.n	168dc <__aeabi_ddiv+0x4c8>
   1666c:	2302      	movs	r3, #2
   1666e:	425b      	negs	r3, r3
   16670:	469c      	mov	ip, r3
   16672:	4445      	add	r5, r8
   16674:	44e3      	add	fp, ip
   16676:	464b      	mov	r3, r9
   16678:	1aeb      	subs	r3, r5, r3
   1667a:	0039      	movs	r1, r7
   1667c:	0018      	movs	r0, r3
   1667e:	9304      	str	r3, [sp, #16]
   16680:	f7fe fe2e 	bl	152e0 <__udivsi3>
   16684:	9b01      	ldr	r3, [sp, #4]
   16686:	0005      	movs	r5, r0
   16688:	4343      	muls	r3, r0
   1668a:	0039      	movs	r1, r7
   1668c:	9804      	ldr	r0, [sp, #16]
   1668e:	4699      	mov	r9, r3
   16690:	f7fe feac 	bl	153ec <__aeabi_uidivmod>
   16694:	0433      	lsls	r3, r6, #16
   16696:	0409      	lsls	r1, r1, #16
   16698:	0c1b      	lsrs	r3, r3, #16
   1669a:	430b      	orrs	r3, r1
   1669c:	4599      	cmp	r9, r3
   1669e:	d909      	bls.n	166b4 <__aeabi_ddiv+0x2a0>
   166a0:	4443      	add	r3, r8
   166a2:	1e6a      	subs	r2, r5, #1
   166a4:	4598      	cmp	r8, r3
   166a6:	d900      	bls.n	166aa <__aeabi_ddiv+0x296>
   166a8:	e11a      	b.n	168e0 <__aeabi_ddiv+0x4cc>
   166aa:	4599      	cmp	r9, r3
   166ac:	d800      	bhi.n	166b0 <__aeabi_ddiv+0x29c>
   166ae:	e117      	b.n	168e0 <__aeabi_ddiv+0x4cc>
   166b0:	3d02      	subs	r5, #2
   166b2:	4443      	add	r3, r8
   166b4:	464a      	mov	r2, r9
   166b6:	1a9b      	subs	r3, r3, r2
   166b8:	465a      	mov	r2, fp
   166ba:	0412      	lsls	r2, r2, #16
   166bc:	432a      	orrs	r2, r5
   166be:	9903      	ldr	r1, [sp, #12]
   166c0:	4693      	mov	fp, r2
   166c2:	0c10      	lsrs	r0, r2, #16
   166c4:	0c0a      	lsrs	r2, r1, #16
   166c6:	4691      	mov	r9, r2
   166c8:	0409      	lsls	r1, r1, #16
   166ca:	465a      	mov	r2, fp
   166cc:	0c09      	lsrs	r1, r1, #16
   166ce:	464e      	mov	r6, r9
   166d0:	000d      	movs	r5, r1
   166d2:	0412      	lsls	r2, r2, #16
   166d4:	0c12      	lsrs	r2, r2, #16
   166d6:	4345      	muls	r5, r0
   166d8:	9105      	str	r1, [sp, #20]
   166da:	4351      	muls	r1, r2
   166dc:	4372      	muls	r2, r6
   166de:	4370      	muls	r0, r6
   166e0:	1952      	adds	r2, r2, r5
   166e2:	0c0e      	lsrs	r6, r1, #16
   166e4:	18b2      	adds	r2, r6, r2
   166e6:	4295      	cmp	r5, r2
   166e8:	d903      	bls.n	166f2 <__aeabi_ddiv+0x2de>
   166ea:	2580      	movs	r5, #128	; 0x80
   166ec:	026d      	lsls	r5, r5, #9
   166ee:	46ac      	mov	ip, r5
   166f0:	4460      	add	r0, ip
   166f2:	0c15      	lsrs	r5, r2, #16
   166f4:	0409      	lsls	r1, r1, #16
   166f6:	0412      	lsls	r2, r2, #16
   166f8:	0c09      	lsrs	r1, r1, #16
   166fa:	1828      	adds	r0, r5, r0
   166fc:	1852      	adds	r2, r2, r1
   166fe:	4283      	cmp	r3, r0
   16700:	d200      	bcs.n	16704 <__aeabi_ddiv+0x2f0>
   16702:	e0ce      	b.n	168a2 <__aeabi_ddiv+0x48e>
   16704:	d100      	bne.n	16708 <__aeabi_ddiv+0x2f4>
   16706:	e0c8      	b.n	1689a <__aeabi_ddiv+0x486>
   16708:	1a1d      	subs	r5, r3, r0
   1670a:	4653      	mov	r3, sl
   1670c:	1a9e      	subs	r6, r3, r2
   1670e:	45b2      	cmp	sl, r6
   16710:	4192      	sbcs	r2, r2
   16712:	4252      	negs	r2, r2
   16714:	1aab      	subs	r3, r5, r2
   16716:	469a      	mov	sl, r3
   16718:	4598      	cmp	r8, r3
   1671a:	d100      	bne.n	1671e <__aeabi_ddiv+0x30a>
   1671c:	e117      	b.n	1694e <__aeabi_ddiv+0x53a>
   1671e:	0039      	movs	r1, r7
   16720:	0018      	movs	r0, r3
   16722:	f7fe fddd 	bl	152e0 <__udivsi3>
   16726:	9b01      	ldr	r3, [sp, #4]
   16728:	0005      	movs	r5, r0
   1672a:	4343      	muls	r3, r0
   1672c:	0039      	movs	r1, r7
   1672e:	4650      	mov	r0, sl
   16730:	9304      	str	r3, [sp, #16]
   16732:	f7fe fe5b 	bl	153ec <__aeabi_uidivmod>
   16736:	9804      	ldr	r0, [sp, #16]
   16738:	040b      	lsls	r3, r1, #16
   1673a:	0c31      	lsrs	r1, r6, #16
   1673c:	4319      	orrs	r1, r3
   1673e:	4288      	cmp	r0, r1
   16740:	d909      	bls.n	16756 <__aeabi_ddiv+0x342>
   16742:	4441      	add	r1, r8
   16744:	1e6b      	subs	r3, r5, #1
   16746:	4588      	cmp	r8, r1
   16748:	d900      	bls.n	1674c <__aeabi_ddiv+0x338>
   1674a:	e107      	b.n	1695c <__aeabi_ddiv+0x548>
   1674c:	4288      	cmp	r0, r1
   1674e:	d800      	bhi.n	16752 <__aeabi_ddiv+0x33e>
   16750:	e104      	b.n	1695c <__aeabi_ddiv+0x548>
   16752:	3d02      	subs	r5, #2
   16754:	4441      	add	r1, r8
   16756:	9b04      	ldr	r3, [sp, #16]
   16758:	1acb      	subs	r3, r1, r3
   1675a:	0018      	movs	r0, r3
   1675c:	0039      	movs	r1, r7
   1675e:	9304      	str	r3, [sp, #16]
   16760:	f7fe fdbe 	bl	152e0 <__udivsi3>
   16764:	9b01      	ldr	r3, [sp, #4]
   16766:	4682      	mov	sl, r0
   16768:	4343      	muls	r3, r0
   1676a:	0039      	movs	r1, r7
   1676c:	9804      	ldr	r0, [sp, #16]
   1676e:	9301      	str	r3, [sp, #4]
   16770:	f7fe fe3c 	bl	153ec <__aeabi_uidivmod>
   16774:	9801      	ldr	r0, [sp, #4]
   16776:	040b      	lsls	r3, r1, #16
   16778:	0431      	lsls	r1, r6, #16
   1677a:	0c09      	lsrs	r1, r1, #16
   1677c:	4319      	orrs	r1, r3
   1677e:	4288      	cmp	r0, r1
   16780:	d90d      	bls.n	1679e <__aeabi_ddiv+0x38a>
   16782:	4653      	mov	r3, sl
   16784:	4441      	add	r1, r8
   16786:	3b01      	subs	r3, #1
   16788:	4588      	cmp	r8, r1
   1678a:	d900      	bls.n	1678e <__aeabi_ddiv+0x37a>
   1678c:	e0e8      	b.n	16960 <__aeabi_ddiv+0x54c>
   1678e:	4288      	cmp	r0, r1
   16790:	d800      	bhi.n	16794 <__aeabi_ddiv+0x380>
   16792:	e0e5      	b.n	16960 <__aeabi_ddiv+0x54c>
   16794:	2302      	movs	r3, #2
   16796:	425b      	negs	r3, r3
   16798:	469c      	mov	ip, r3
   1679a:	4441      	add	r1, r8
   1679c:	44e2      	add	sl, ip
   1679e:	9b01      	ldr	r3, [sp, #4]
   167a0:	042d      	lsls	r5, r5, #16
   167a2:	1ace      	subs	r6, r1, r3
   167a4:	4651      	mov	r1, sl
   167a6:	4329      	orrs	r1, r5
   167a8:	9d05      	ldr	r5, [sp, #20]
   167aa:	464f      	mov	r7, r9
   167ac:	002a      	movs	r2, r5
   167ae:	040b      	lsls	r3, r1, #16
   167b0:	0c08      	lsrs	r0, r1, #16
   167b2:	0c1b      	lsrs	r3, r3, #16
   167b4:	435a      	muls	r2, r3
   167b6:	4345      	muls	r5, r0
   167b8:	437b      	muls	r3, r7
   167ba:	4378      	muls	r0, r7
   167bc:	195b      	adds	r3, r3, r5
   167be:	0c17      	lsrs	r7, r2, #16
   167c0:	18fb      	adds	r3, r7, r3
   167c2:	429d      	cmp	r5, r3
   167c4:	d903      	bls.n	167ce <__aeabi_ddiv+0x3ba>
   167c6:	2580      	movs	r5, #128	; 0x80
   167c8:	026d      	lsls	r5, r5, #9
   167ca:	46ac      	mov	ip, r5
   167cc:	4460      	add	r0, ip
   167ce:	0c1d      	lsrs	r5, r3, #16
   167d0:	0412      	lsls	r2, r2, #16
   167d2:	041b      	lsls	r3, r3, #16
   167d4:	0c12      	lsrs	r2, r2, #16
   167d6:	1828      	adds	r0, r5, r0
   167d8:	189b      	adds	r3, r3, r2
   167da:	4286      	cmp	r6, r0
   167dc:	d200      	bcs.n	167e0 <__aeabi_ddiv+0x3cc>
   167de:	e093      	b.n	16908 <__aeabi_ddiv+0x4f4>
   167e0:	d100      	bne.n	167e4 <__aeabi_ddiv+0x3d0>
   167e2:	e08e      	b.n	16902 <__aeabi_ddiv+0x4ee>
   167e4:	2301      	movs	r3, #1
   167e6:	4319      	orrs	r1, r3
   167e8:	4ba0      	ldr	r3, [pc, #640]	; (16a6c <__aeabi_ddiv+0x658>)
   167ea:	18e3      	adds	r3, r4, r3
   167ec:	2b00      	cmp	r3, #0
   167ee:	dc00      	bgt.n	167f2 <__aeabi_ddiv+0x3de>
   167f0:	e099      	b.n	16926 <__aeabi_ddiv+0x512>
   167f2:	074a      	lsls	r2, r1, #29
   167f4:	d000      	beq.n	167f8 <__aeabi_ddiv+0x3e4>
   167f6:	e09e      	b.n	16936 <__aeabi_ddiv+0x522>
   167f8:	465a      	mov	r2, fp
   167fa:	01d2      	lsls	r2, r2, #7
   167fc:	d506      	bpl.n	1680c <__aeabi_ddiv+0x3f8>
   167fe:	465a      	mov	r2, fp
   16800:	4b9b      	ldr	r3, [pc, #620]	; (16a70 <__aeabi_ddiv+0x65c>)
   16802:	401a      	ands	r2, r3
   16804:	2380      	movs	r3, #128	; 0x80
   16806:	4693      	mov	fp, r2
   16808:	00db      	lsls	r3, r3, #3
   1680a:	18e3      	adds	r3, r4, r3
   1680c:	4a99      	ldr	r2, [pc, #612]	; (16a74 <__aeabi_ddiv+0x660>)
   1680e:	4293      	cmp	r3, r2
   16810:	dd68      	ble.n	168e4 <__aeabi_ddiv+0x4d0>
   16812:	2301      	movs	r3, #1
   16814:	9a02      	ldr	r2, [sp, #8]
   16816:	4c98      	ldr	r4, [pc, #608]	; (16a78 <__aeabi_ddiv+0x664>)
   16818:	401a      	ands	r2, r3
   1681a:	2300      	movs	r3, #0
   1681c:	4694      	mov	ip, r2
   1681e:	4698      	mov	r8, r3
   16820:	2200      	movs	r2, #0
   16822:	e6c5      	b.n	165b0 <__aeabi_ddiv+0x19c>
   16824:	2280      	movs	r2, #128	; 0x80
   16826:	464b      	mov	r3, r9
   16828:	0312      	lsls	r2, r2, #12
   1682a:	4213      	tst	r3, r2
   1682c:	d00a      	beq.n	16844 <__aeabi_ddiv+0x430>
   1682e:	465b      	mov	r3, fp
   16830:	4213      	tst	r3, r2
   16832:	d106      	bne.n	16842 <__aeabi_ddiv+0x42e>
   16834:	431a      	orrs	r2, r3
   16836:	0312      	lsls	r2, r2, #12
   16838:	0b12      	lsrs	r2, r2, #12
   1683a:	46ac      	mov	ip, r5
   1683c:	4688      	mov	r8, r1
   1683e:	4c8e      	ldr	r4, [pc, #568]	; (16a78 <__aeabi_ddiv+0x664>)
   16840:	e6b6      	b.n	165b0 <__aeabi_ddiv+0x19c>
   16842:	464b      	mov	r3, r9
   16844:	431a      	orrs	r2, r3
   16846:	0312      	lsls	r2, r2, #12
   16848:	0b12      	lsrs	r2, r2, #12
   1684a:	46bc      	mov	ip, r7
   1684c:	4c8a      	ldr	r4, [pc, #552]	; (16a78 <__aeabi_ddiv+0x664>)
   1684e:	e6af      	b.n	165b0 <__aeabi_ddiv+0x19c>
   16850:	0003      	movs	r3, r0
   16852:	465a      	mov	r2, fp
   16854:	3b28      	subs	r3, #40	; 0x28
   16856:	409a      	lsls	r2, r3
   16858:	2300      	movs	r3, #0
   1685a:	4691      	mov	r9, r2
   1685c:	4698      	mov	r8, r3
   1685e:	e657      	b.n	16510 <__aeabi_ddiv+0xfc>
   16860:	4658      	mov	r0, fp
   16862:	f001 f8c1 	bl	179e8 <__clzsi2>
   16866:	3020      	adds	r0, #32
   16868:	e640      	b.n	164ec <__aeabi_ddiv+0xd8>
   1686a:	0003      	movs	r3, r0
   1686c:	4652      	mov	r2, sl
   1686e:	3b28      	subs	r3, #40	; 0x28
   16870:	409a      	lsls	r2, r3
   16872:	2100      	movs	r1, #0
   16874:	4693      	mov	fp, r2
   16876:	e677      	b.n	16568 <__aeabi_ddiv+0x154>
   16878:	f001 f8b6 	bl	179e8 <__clzsi2>
   1687c:	3020      	adds	r0, #32
   1687e:	e65f      	b.n	16540 <__aeabi_ddiv+0x12c>
   16880:	4588      	cmp	r8, r1
   16882:	d200      	bcs.n	16886 <__aeabi_ddiv+0x472>
   16884:	e6c7      	b.n	16616 <__aeabi_ddiv+0x202>
   16886:	464b      	mov	r3, r9
   16888:	07de      	lsls	r6, r3, #31
   1688a:	085d      	lsrs	r5, r3, #1
   1688c:	4643      	mov	r3, r8
   1688e:	085b      	lsrs	r3, r3, #1
   16890:	431e      	orrs	r6, r3
   16892:	4643      	mov	r3, r8
   16894:	07db      	lsls	r3, r3, #31
   16896:	469a      	mov	sl, r3
   16898:	e6c2      	b.n	16620 <__aeabi_ddiv+0x20c>
   1689a:	2500      	movs	r5, #0
   1689c:	4592      	cmp	sl, r2
   1689e:	d300      	bcc.n	168a2 <__aeabi_ddiv+0x48e>
   168a0:	e733      	b.n	1670a <__aeabi_ddiv+0x2f6>
   168a2:	9e03      	ldr	r6, [sp, #12]
   168a4:	4659      	mov	r1, fp
   168a6:	46b4      	mov	ip, r6
   168a8:	44e2      	add	sl, ip
   168aa:	45b2      	cmp	sl, r6
   168ac:	41ad      	sbcs	r5, r5
   168ae:	426d      	negs	r5, r5
   168b0:	4445      	add	r5, r8
   168b2:	18eb      	adds	r3, r5, r3
   168b4:	3901      	subs	r1, #1
   168b6:	4598      	cmp	r8, r3
   168b8:	d207      	bcs.n	168ca <__aeabi_ddiv+0x4b6>
   168ba:	4298      	cmp	r0, r3
   168bc:	d900      	bls.n	168c0 <__aeabi_ddiv+0x4ac>
   168be:	e07f      	b.n	169c0 <__aeabi_ddiv+0x5ac>
   168c0:	d100      	bne.n	168c4 <__aeabi_ddiv+0x4b0>
   168c2:	e0bc      	b.n	16a3e <__aeabi_ddiv+0x62a>
   168c4:	1a1d      	subs	r5, r3, r0
   168c6:	468b      	mov	fp, r1
   168c8:	e71f      	b.n	1670a <__aeabi_ddiv+0x2f6>
   168ca:	4598      	cmp	r8, r3
   168cc:	d1fa      	bne.n	168c4 <__aeabi_ddiv+0x4b0>
   168ce:	9d03      	ldr	r5, [sp, #12]
   168d0:	4555      	cmp	r5, sl
   168d2:	d9f2      	bls.n	168ba <__aeabi_ddiv+0x4a6>
   168d4:	4643      	mov	r3, r8
   168d6:	468b      	mov	fp, r1
   168d8:	1a1d      	subs	r5, r3, r0
   168da:	e716      	b.n	1670a <__aeabi_ddiv+0x2f6>
   168dc:	469b      	mov	fp, r3
   168de:	e6ca      	b.n	16676 <__aeabi_ddiv+0x262>
   168e0:	0015      	movs	r5, r2
   168e2:	e6e7      	b.n	166b4 <__aeabi_ddiv+0x2a0>
   168e4:	465a      	mov	r2, fp
   168e6:	08c9      	lsrs	r1, r1, #3
   168e8:	0752      	lsls	r2, r2, #29
   168ea:	430a      	orrs	r2, r1
   168ec:	055b      	lsls	r3, r3, #21
   168ee:	4690      	mov	r8, r2
   168f0:	0d5c      	lsrs	r4, r3, #21
   168f2:	465a      	mov	r2, fp
   168f4:	2301      	movs	r3, #1
   168f6:	9902      	ldr	r1, [sp, #8]
   168f8:	0252      	lsls	r2, r2, #9
   168fa:	4019      	ands	r1, r3
   168fc:	0b12      	lsrs	r2, r2, #12
   168fe:	468c      	mov	ip, r1
   16900:	e656      	b.n	165b0 <__aeabi_ddiv+0x19c>
   16902:	2b00      	cmp	r3, #0
   16904:	d100      	bne.n	16908 <__aeabi_ddiv+0x4f4>
   16906:	e76f      	b.n	167e8 <__aeabi_ddiv+0x3d4>
   16908:	4446      	add	r6, r8
   1690a:	1e4a      	subs	r2, r1, #1
   1690c:	45b0      	cmp	r8, r6
   1690e:	d929      	bls.n	16964 <__aeabi_ddiv+0x550>
   16910:	0011      	movs	r1, r2
   16912:	4286      	cmp	r6, r0
   16914:	d000      	beq.n	16918 <__aeabi_ddiv+0x504>
   16916:	e765      	b.n	167e4 <__aeabi_ddiv+0x3d0>
   16918:	9a03      	ldr	r2, [sp, #12]
   1691a:	4293      	cmp	r3, r2
   1691c:	d000      	beq.n	16920 <__aeabi_ddiv+0x50c>
   1691e:	e761      	b.n	167e4 <__aeabi_ddiv+0x3d0>
   16920:	e762      	b.n	167e8 <__aeabi_ddiv+0x3d4>
   16922:	2101      	movs	r1, #1
   16924:	4249      	negs	r1, r1
   16926:	2001      	movs	r0, #1
   16928:	1ac2      	subs	r2, r0, r3
   1692a:	2a38      	cmp	r2, #56	; 0x38
   1692c:	dd21      	ble.n	16972 <__aeabi_ddiv+0x55e>
   1692e:	9b02      	ldr	r3, [sp, #8]
   16930:	4003      	ands	r3, r0
   16932:	469c      	mov	ip, r3
   16934:	e638      	b.n	165a8 <__aeabi_ddiv+0x194>
   16936:	220f      	movs	r2, #15
   16938:	400a      	ands	r2, r1
   1693a:	2a04      	cmp	r2, #4
   1693c:	d100      	bne.n	16940 <__aeabi_ddiv+0x52c>
   1693e:	e75b      	b.n	167f8 <__aeabi_ddiv+0x3e4>
   16940:	000a      	movs	r2, r1
   16942:	1d11      	adds	r1, r2, #4
   16944:	4291      	cmp	r1, r2
   16946:	4192      	sbcs	r2, r2
   16948:	4252      	negs	r2, r2
   1694a:	4493      	add	fp, r2
   1694c:	e754      	b.n	167f8 <__aeabi_ddiv+0x3e4>
   1694e:	4b47      	ldr	r3, [pc, #284]	; (16a6c <__aeabi_ddiv+0x658>)
   16950:	18e3      	adds	r3, r4, r3
   16952:	2b00      	cmp	r3, #0
   16954:	dde5      	ble.n	16922 <__aeabi_ddiv+0x50e>
   16956:	2201      	movs	r2, #1
   16958:	4252      	negs	r2, r2
   1695a:	e7f2      	b.n	16942 <__aeabi_ddiv+0x52e>
   1695c:	001d      	movs	r5, r3
   1695e:	e6fa      	b.n	16756 <__aeabi_ddiv+0x342>
   16960:	469a      	mov	sl, r3
   16962:	e71c      	b.n	1679e <__aeabi_ddiv+0x38a>
   16964:	42b0      	cmp	r0, r6
   16966:	d839      	bhi.n	169dc <__aeabi_ddiv+0x5c8>
   16968:	d06e      	beq.n	16a48 <__aeabi_ddiv+0x634>
   1696a:	0011      	movs	r1, r2
   1696c:	e73a      	b.n	167e4 <__aeabi_ddiv+0x3d0>
   1696e:	9302      	str	r3, [sp, #8]
   16970:	e73a      	b.n	167e8 <__aeabi_ddiv+0x3d4>
   16972:	2a1f      	cmp	r2, #31
   16974:	dc3c      	bgt.n	169f0 <__aeabi_ddiv+0x5dc>
   16976:	2320      	movs	r3, #32
   16978:	1a9b      	subs	r3, r3, r2
   1697a:	000c      	movs	r4, r1
   1697c:	4658      	mov	r0, fp
   1697e:	4099      	lsls	r1, r3
   16980:	4098      	lsls	r0, r3
   16982:	1e4b      	subs	r3, r1, #1
   16984:	4199      	sbcs	r1, r3
   16986:	465b      	mov	r3, fp
   16988:	40d4      	lsrs	r4, r2
   1698a:	40d3      	lsrs	r3, r2
   1698c:	4320      	orrs	r0, r4
   1698e:	4308      	orrs	r0, r1
   16990:	001a      	movs	r2, r3
   16992:	0743      	lsls	r3, r0, #29
   16994:	d009      	beq.n	169aa <__aeabi_ddiv+0x596>
   16996:	230f      	movs	r3, #15
   16998:	4003      	ands	r3, r0
   1699a:	2b04      	cmp	r3, #4
   1699c:	d005      	beq.n	169aa <__aeabi_ddiv+0x596>
   1699e:	0001      	movs	r1, r0
   169a0:	1d08      	adds	r0, r1, #4
   169a2:	4288      	cmp	r0, r1
   169a4:	419b      	sbcs	r3, r3
   169a6:	425b      	negs	r3, r3
   169a8:	18d2      	adds	r2, r2, r3
   169aa:	0213      	lsls	r3, r2, #8
   169ac:	d53a      	bpl.n	16a24 <__aeabi_ddiv+0x610>
   169ae:	2301      	movs	r3, #1
   169b0:	9a02      	ldr	r2, [sp, #8]
   169b2:	2401      	movs	r4, #1
   169b4:	401a      	ands	r2, r3
   169b6:	2300      	movs	r3, #0
   169b8:	4694      	mov	ip, r2
   169ba:	4698      	mov	r8, r3
   169bc:	2200      	movs	r2, #0
   169be:	e5f7      	b.n	165b0 <__aeabi_ddiv+0x19c>
   169c0:	2102      	movs	r1, #2
   169c2:	4249      	negs	r1, r1
   169c4:	468c      	mov	ip, r1
   169c6:	9d03      	ldr	r5, [sp, #12]
   169c8:	44e3      	add	fp, ip
   169ca:	46ac      	mov	ip, r5
   169cc:	44e2      	add	sl, ip
   169ce:	45aa      	cmp	sl, r5
   169d0:	41ad      	sbcs	r5, r5
   169d2:	426d      	negs	r5, r5
   169d4:	4445      	add	r5, r8
   169d6:	18ed      	adds	r5, r5, r3
   169d8:	1a2d      	subs	r5, r5, r0
   169da:	e696      	b.n	1670a <__aeabi_ddiv+0x2f6>
   169dc:	1e8a      	subs	r2, r1, #2
   169de:	9903      	ldr	r1, [sp, #12]
   169e0:	004d      	lsls	r5, r1, #1
   169e2:	428d      	cmp	r5, r1
   169e4:	4189      	sbcs	r1, r1
   169e6:	4249      	negs	r1, r1
   169e8:	4441      	add	r1, r8
   169ea:	1876      	adds	r6, r6, r1
   169ec:	9503      	str	r5, [sp, #12]
   169ee:	e78f      	b.n	16910 <__aeabi_ddiv+0x4fc>
   169f0:	201f      	movs	r0, #31
   169f2:	4240      	negs	r0, r0
   169f4:	1ac3      	subs	r3, r0, r3
   169f6:	4658      	mov	r0, fp
   169f8:	40d8      	lsrs	r0, r3
   169fa:	0003      	movs	r3, r0
   169fc:	2a20      	cmp	r2, #32
   169fe:	d028      	beq.n	16a52 <__aeabi_ddiv+0x63e>
   16a00:	2040      	movs	r0, #64	; 0x40
   16a02:	465d      	mov	r5, fp
   16a04:	1a82      	subs	r2, r0, r2
   16a06:	4095      	lsls	r5, r2
   16a08:	4329      	orrs	r1, r5
   16a0a:	1e4a      	subs	r2, r1, #1
   16a0c:	4191      	sbcs	r1, r2
   16a0e:	4319      	orrs	r1, r3
   16a10:	2307      	movs	r3, #7
   16a12:	2200      	movs	r2, #0
   16a14:	400b      	ands	r3, r1
   16a16:	d009      	beq.n	16a2c <__aeabi_ddiv+0x618>
   16a18:	230f      	movs	r3, #15
   16a1a:	2200      	movs	r2, #0
   16a1c:	400b      	ands	r3, r1
   16a1e:	0008      	movs	r0, r1
   16a20:	2b04      	cmp	r3, #4
   16a22:	d1bd      	bne.n	169a0 <__aeabi_ddiv+0x58c>
   16a24:	0001      	movs	r1, r0
   16a26:	0753      	lsls	r3, r2, #29
   16a28:	0252      	lsls	r2, r2, #9
   16a2a:	0b12      	lsrs	r2, r2, #12
   16a2c:	08c9      	lsrs	r1, r1, #3
   16a2e:	4319      	orrs	r1, r3
   16a30:	2301      	movs	r3, #1
   16a32:	4688      	mov	r8, r1
   16a34:	9902      	ldr	r1, [sp, #8]
   16a36:	2400      	movs	r4, #0
   16a38:	4019      	ands	r1, r3
   16a3a:	468c      	mov	ip, r1
   16a3c:	e5b8      	b.n	165b0 <__aeabi_ddiv+0x19c>
   16a3e:	4552      	cmp	r2, sl
   16a40:	d8be      	bhi.n	169c0 <__aeabi_ddiv+0x5ac>
   16a42:	468b      	mov	fp, r1
   16a44:	2500      	movs	r5, #0
   16a46:	e660      	b.n	1670a <__aeabi_ddiv+0x2f6>
   16a48:	9d03      	ldr	r5, [sp, #12]
   16a4a:	429d      	cmp	r5, r3
   16a4c:	d3c6      	bcc.n	169dc <__aeabi_ddiv+0x5c8>
   16a4e:	0011      	movs	r1, r2
   16a50:	e762      	b.n	16918 <__aeabi_ddiv+0x504>
   16a52:	2500      	movs	r5, #0
   16a54:	e7d8      	b.n	16a08 <__aeabi_ddiv+0x5f4>
   16a56:	2280      	movs	r2, #128	; 0x80
   16a58:	465b      	mov	r3, fp
   16a5a:	0312      	lsls	r2, r2, #12
   16a5c:	431a      	orrs	r2, r3
   16a5e:	9b01      	ldr	r3, [sp, #4]
   16a60:	0312      	lsls	r2, r2, #12
   16a62:	0b12      	lsrs	r2, r2, #12
   16a64:	469c      	mov	ip, r3
   16a66:	4688      	mov	r8, r1
   16a68:	4c03      	ldr	r4, [pc, #12]	; (16a78 <__aeabi_ddiv+0x664>)
   16a6a:	e5a1      	b.n	165b0 <__aeabi_ddiv+0x19c>
   16a6c:	000003ff 	.word	0x000003ff
   16a70:	feffffff 	.word	0xfeffffff
   16a74:	000007fe 	.word	0x000007fe
   16a78:	000007ff 	.word	0x000007ff

00016a7c <__eqdf2>:
   16a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   16a7e:	464f      	mov	r7, r9
   16a80:	4646      	mov	r6, r8
   16a82:	46d6      	mov	lr, sl
   16a84:	005c      	lsls	r4, r3, #1
   16a86:	b5c0      	push	{r6, r7, lr}
   16a88:	031f      	lsls	r7, r3, #12
   16a8a:	0fdb      	lsrs	r3, r3, #31
   16a8c:	469a      	mov	sl, r3
   16a8e:	4b17      	ldr	r3, [pc, #92]	; (16aec <__eqdf2+0x70>)
   16a90:	030e      	lsls	r6, r1, #12
   16a92:	004d      	lsls	r5, r1, #1
   16a94:	4684      	mov	ip, r0
   16a96:	4680      	mov	r8, r0
   16a98:	0b36      	lsrs	r6, r6, #12
   16a9a:	0d6d      	lsrs	r5, r5, #21
   16a9c:	0fc9      	lsrs	r1, r1, #31
   16a9e:	4691      	mov	r9, r2
   16aa0:	0b3f      	lsrs	r7, r7, #12
   16aa2:	0d64      	lsrs	r4, r4, #21
   16aa4:	2001      	movs	r0, #1
   16aa6:	429d      	cmp	r5, r3
   16aa8:	d008      	beq.n	16abc <__eqdf2+0x40>
   16aaa:	429c      	cmp	r4, r3
   16aac:	d001      	beq.n	16ab2 <__eqdf2+0x36>
   16aae:	42a5      	cmp	r5, r4
   16ab0:	d00b      	beq.n	16aca <__eqdf2+0x4e>
   16ab2:	bc1c      	pop	{r2, r3, r4}
   16ab4:	4690      	mov	r8, r2
   16ab6:	4699      	mov	r9, r3
   16ab8:	46a2      	mov	sl, r4
   16aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16abc:	4663      	mov	r3, ip
   16abe:	4333      	orrs	r3, r6
   16ac0:	d1f7      	bne.n	16ab2 <__eqdf2+0x36>
   16ac2:	42ac      	cmp	r4, r5
   16ac4:	d1f5      	bne.n	16ab2 <__eqdf2+0x36>
   16ac6:	433a      	orrs	r2, r7
   16ac8:	d1f3      	bne.n	16ab2 <__eqdf2+0x36>
   16aca:	2001      	movs	r0, #1
   16acc:	42be      	cmp	r6, r7
   16ace:	d1f0      	bne.n	16ab2 <__eqdf2+0x36>
   16ad0:	45c8      	cmp	r8, r9
   16ad2:	d1ee      	bne.n	16ab2 <__eqdf2+0x36>
   16ad4:	4551      	cmp	r1, sl
   16ad6:	d007      	beq.n	16ae8 <__eqdf2+0x6c>
   16ad8:	2d00      	cmp	r5, #0
   16ada:	d1ea      	bne.n	16ab2 <__eqdf2+0x36>
   16adc:	4663      	mov	r3, ip
   16ade:	431e      	orrs	r6, r3
   16ae0:	0030      	movs	r0, r6
   16ae2:	1e46      	subs	r6, r0, #1
   16ae4:	41b0      	sbcs	r0, r6
   16ae6:	e7e4      	b.n	16ab2 <__eqdf2+0x36>
   16ae8:	2000      	movs	r0, #0
   16aea:	e7e2      	b.n	16ab2 <__eqdf2+0x36>
   16aec:	000007ff 	.word	0x000007ff

00016af0 <__gedf2>:
   16af0:	b5f0      	push	{r4, r5, r6, r7, lr}
   16af2:	4645      	mov	r5, r8
   16af4:	46de      	mov	lr, fp
   16af6:	4657      	mov	r7, sl
   16af8:	464e      	mov	r6, r9
   16afa:	b5e0      	push	{r5, r6, r7, lr}
   16afc:	031f      	lsls	r7, r3, #12
   16afe:	0b3d      	lsrs	r5, r7, #12
   16b00:	4f2c      	ldr	r7, [pc, #176]	; (16bb4 <__gedf2+0xc4>)
   16b02:	030e      	lsls	r6, r1, #12
   16b04:	004c      	lsls	r4, r1, #1
   16b06:	46ab      	mov	fp, r5
   16b08:	005d      	lsls	r5, r3, #1
   16b0a:	4684      	mov	ip, r0
   16b0c:	0b36      	lsrs	r6, r6, #12
   16b0e:	0d64      	lsrs	r4, r4, #21
   16b10:	0fc9      	lsrs	r1, r1, #31
   16b12:	4690      	mov	r8, r2
   16b14:	0d6d      	lsrs	r5, r5, #21
   16b16:	0fdb      	lsrs	r3, r3, #31
   16b18:	42bc      	cmp	r4, r7
   16b1a:	d02a      	beq.n	16b72 <__gedf2+0x82>
   16b1c:	4f25      	ldr	r7, [pc, #148]	; (16bb4 <__gedf2+0xc4>)
   16b1e:	42bd      	cmp	r5, r7
   16b20:	d02d      	beq.n	16b7e <__gedf2+0x8e>
   16b22:	2c00      	cmp	r4, #0
   16b24:	d10f      	bne.n	16b46 <__gedf2+0x56>
   16b26:	4330      	orrs	r0, r6
   16b28:	0007      	movs	r7, r0
   16b2a:	4681      	mov	r9, r0
   16b2c:	4278      	negs	r0, r7
   16b2e:	4178      	adcs	r0, r7
   16b30:	b2c0      	uxtb	r0, r0
   16b32:	2d00      	cmp	r5, #0
   16b34:	d117      	bne.n	16b66 <__gedf2+0x76>
   16b36:	465f      	mov	r7, fp
   16b38:	433a      	orrs	r2, r7
   16b3a:	d114      	bne.n	16b66 <__gedf2+0x76>
   16b3c:	464b      	mov	r3, r9
   16b3e:	2000      	movs	r0, #0
   16b40:	2b00      	cmp	r3, #0
   16b42:	d00a      	beq.n	16b5a <__gedf2+0x6a>
   16b44:	e006      	b.n	16b54 <__gedf2+0x64>
   16b46:	2d00      	cmp	r5, #0
   16b48:	d102      	bne.n	16b50 <__gedf2+0x60>
   16b4a:	4658      	mov	r0, fp
   16b4c:	4302      	orrs	r2, r0
   16b4e:	d001      	beq.n	16b54 <__gedf2+0x64>
   16b50:	4299      	cmp	r1, r3
   16b52:	d018      	beq.n	16b86 <__gedf2+0x96>
   16b54:	4248      	negs	r0, r1
   16b56:	2101      	movs	r1, #1
   16b58:	4308      	orrs	r0, r1
   16b5a:	bc3c      	pop	{r2, r3, r4, r5}
   16b5c:	4690      	mov	r8, r2
   16b5e:	4699      	mov	r9, r3
   16b60:	46a2      	mov	sl, r4
   16b62:	46ab      	mov	fp, r5
   16b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16b66:	2800      	cmp	r0, #0
   16b68:	d0f2      	beq.n	16b50 <__gedf2+0x60>
   16b6a:	2001      	movs	r0, #1
   16b6c:	3b01      	subs	r3, #1
   16b6e:	4318      	orrs	r0, r3
   16b70:	e7f3      	b.n	16b5a <__gedf2+0x6a>
   16b72:	0037      	movs	r7, r6
   16b74:	4307      	orrs	r7, r0
   16b76:	d0d1      	beq.n	16b1c <__gedf2+0x2c>
   16b78:	2002      	movs	r0, #2
   16b7a:	4240      	negs	r0, r0
   16b7c:	e7ed      	b.n	16b5a <__gedf2+0x6a>
   16b7e:	465f      	mov	r7, fp
   16b80:	4317      	orrs	r7, r2
   16b82:	d0ce      	beq.n	16b22 <__gedf2+0x32>
   16b84:	e7f8      	b.n	16b78 <__gedf2+0x88>
   16b86:	42ac      	cmp	r4, r5
   16b88:	dce4      	bgt.n	16b54 <__gedf2+0x64>
   16b8a:	da03      	bge.n	16b94 <__gedf2+0xa4>
   16b8c:	1e48      	subs	r0, r1, #1
   16b8e:	2101      	movs	r1, #1
   16b90:	4308      	orrs	r0, r1
   16b92:	e7e2      	b.n	16b5a <__gedf2+0x6a>
   16b94:	455e      	cmp	r6, fp
   16b96:	d8dd      	bhi.n	16b54 <__gedf2+0x64>
   16b98:	d006      	beq.n	16ba8 <__gedf2+0xb8>
   16b9a:	2000      	movs	r0, #0
   16b9c:	455e      	cmp	r6, fp
   16b9e:	d2dc      	bcs.n	16b5a <__gedf2+0x6a>
   16ba0:	2301      	movs	r3, #1
   16ba2:	1e48      	subs	r0, r1, #1
   16ba4:	4318      	orrs	r0, r3
   16ba6:	e7d8      	b.n	16b5a <__gedf2+0x6a>
   16ba8:	45c4      	cmp	ip, r8
   16baa:	d8d3      	bhi.n	16b54 <__gedf2+0x64>
   16bac:	2000      	movs	r0, #0
   16bae:	45c4      	cmp	ip, r8
   16bb0:	d3f6      	bcc.n	16ba0 <__gedf2+0xb0>
   16bb2:	e7d2      	b.n	16b5a <__gedf2+0x6a>
   16bb4:	000007ff 	.word	0x000007ff

00016bb8 <__ledf2>:
   16bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   16bba:	464e      	mov	r6, r9
   16bbc:	4645      	mov	r5, r8
   16bbe:	46de      	mov	lr, fp
   16bc0:	4657      	mov	r7, sl
   16bc2:	005c      	lsls	r4, r3, #1
   16bc4:	b5e0      	push	{r5, r6, r7, lr}
   16bc6:	031f      	lsls	r7, r3, #12
   16bc8:	0fdb      	lsrs	r3, r3, #31
   16bca:	4699      	mov	r9, r3
   16bcc:	4b2a      	ldr	r3, [pc, #168]	; (16c78 <__ledf2+0xc0>)
   16bce:	030e      	lsls	r6, r1, #12
   16bd0:	004d      	lsls	r5, r1, #1
   16bd2:	0fc9      	lsrs	r1, r1, #31
   16bd4:	4684      	mov	ip, r0
   16bd6:	0b36      	lsrs	r6, r6, #12
   16bd8:	0d6d      	lsrs	r5, r5, #21
   16bda:	468b      	mov	fp, r1
   16bdc:	4690      	mov	r8, r2
   16bde:	0b3f      	lsrs	r7, r7, #12
   16be0:	0d64      	lsrs	r4, r4, #21
   16be2:	429d      	cmp	r5, r3
   16be4:	d020      	beq.n	16c28 <__ledf2+0x70>
   16be6:	4b24      	ldr	r3, [pc, #144]	; (16c78 <__ledf2+0xc0>)
   16be8:	429c      	cmp	r4, r3
   16bea:	d022      	beq.n	16c32 <__ledf2+0x7a>
   16bec:	2d00      	cmp	r5, #0
   16bee:	d112      	bne.n	16c16 <__ledf2+0x5e>
   16bf0:	4330      	orrs	r0, r6
   16bf2:	4243      	negs	r3, r0
   16bf4:	4143      	adcs	r3, r0
   16bf6:	b2db      	uxtb	r3, r3
   16bf8:	2c00      	cmp	r4, #0
   16bfa:	d01f      	beq.n	16c3c <__ledf2+0x84>
   16bfc:	2b00      	cmp	r3, #0
   16bfe:	d00c      	beq.n	16c1a <__ledf2+0x62>
   16c00:	464b      	mov	r3, r9
   16c02:	2001      	movs	r0, #1
   16c04:	3b01      	subs	r3, #1
   16c06:	4303      	orrs	r3, r0
   16c08:	0018      	movs	r0, r3
   16c0a:	bc3c      	pop	{r2, r3, r4, r5}
   16c0c:	4690      	mov	r8, r2
   16c0e:	4699      	mov	r9, r3
   16c10:	46a2      	mov	sl, r4
   16c12:	46ab      	mov	fp, r5
   16c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16c16:	2c00      	cmp	r4, #0
   16c18:	d016      	beq.n	16c48 <__ledf2+0x90>
   16c1a:	45cb      	cmp	fp, r9
   16c1c:	d017      	beq.n	16c4e <__ledf2+0x96>
   16c1e:	465b      	mov	r3, fp
   16c20:	4259      	negs	r1, r3
   16c22:	2301      	movs	r3, #1
   16c24:	430b      	orrs	r3, r1
   16c26:	e7ef      	b.n	16c08 <__ledf2+0x50>
   16c28:	0031      	movs	r1, r6
   16c2a:	2302      	movs	r3, #2
   16c2c:	4301      	orrs	r1, r0
   16c2e:	d1eb      	bne.n	16c08 <__ledf2+0x50>
   16c30:	e7d9      	b.n	16be6 <__ledf2+0x2e>
   16c32:	0039      	movs	r1, r7
   16c34:	2302      	movs	r3, #2
   16c36:	4311      	orrs	r1, r2
   16c38:	d1e6      	bne.n	16c08 <__ledf2+0x50>
   16c3a:	e7d7      	b.n	16bec <__ledf2+0x34>
   16c3c:	433a      	orrs	r2, r7
   16c3e:	d1dd      	bne.n	16bfc <__ledf2+0x44>
   16c40:	2300      	movs	r3, #0
   16c42:	2800      	cmp	r0, #0
   16c44:	d0e0      	beq.n	16c08 <__ledf2+0x50>
   16c46:	e7ea      	b.n	16c1e <__ledf2+0x66>
   16c48:	433a      	orrs	r2, r7
   16c4a:	d1e6      	bne.n	16c1a <__ledf2+0x62>
   16c4c:	e7e7      	b.n	16c1e <__ledf2+0x66>
   16c4e:	42a5      	cmp	r5, r4
   16c50:	dce5      	bgt.n	16c1e <__ledf2+0x66>
   16c52:	db05      	blt.n	16c60 <__ledf2+0xa8>
   16c54:	42be      	cmp	r6, r7
   16c56:	d8e2      	bhi.n	16c1e <__ledf2+0x66>
   16c58:	d007      	beq.n	16c6a <__ledf2+0xb2>
   16c5a:	2300      	movs	r3, #0
   16c5c:	42be      	cmp	r6, r7
   16c5e:	d2d3      	bcs.n	16c08 <__ledf2+0x50>
   16c60:	4659      	mov	r1, fp
   16c62:	2301      	movs	r3, #1
   16c64:	3901      	subs	r1, #1
   16c66:	430b      	orrs	r3, r1
   16c68:	e7ce      	b.n	16c08 <__ledf2+0x50>
   16c6a:	45c4      	cmp	ip, r8
   16c6c:	d8d7      	bhi.n	16c1e <__ledf2+0x66>
   16c6e:	2300      	movs	r3, #0
   16c70:	45c4      	cmp	ip, r8
   16c72:	d3f5      	bcc.n	16c60 <__ledf2+0xa8>
   16c74:	e7c8      	b.n	16c08 <__ledf2+0x50>
   16c76:	46c0      	nop			; (mov r8, r8)
   16c78:	000007ff 	.word	0x000007ff

00016c7c <__aeabi_dmul>:
   16c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   16c7e:	4657      	mov	r7, sl
   16c80:	4645      	mov	r5, r8
   16c82:	46de      	mov	lr, fp
   16c84:	464e      	mov	r6, r9
   16c86:	b5e0      	push	{r5, r6, r7, lr}
   16c88:	030c      	lsls	r4, r1, #12
   16c8a:	4698      	mov	r8, r3
   16c8c:	004e      	lsls	r6, r1, #1
   16c8e:	0b23      	lsrs	r3, r4, #12
   16c90:	b087      	sub	sp, #28
   16c92:	0007      	movs	r7, r0
   16c94:	4692      	mov	sl, r2
   16c96:	469b      	mov	fp, r3
   16c98:	0d76      	lsrs	r6, r6, #21
   16c9a:	0fcd      	lsrs	r5, r1, #31
   16c9c:	2e00      	cmp	r6, #0
   16c9e:	d06b      	beq.n	16d78 <__aeabi_dmul+0xfc>
   16ca0:	4b6d      	ldr	r3, [pc, #436]	; (16e58 <__aeabi_dmul+0x1dc>)
   16ca2:	429e      	cmp	r6, r3
   16ca4:	d035      	beq.n	16d12 <__aeabi_dmul+0x96>
   16ca6:	2480      	movs	r4, #128	; 0x80
   16ca8:	465b      	mov	r3, fp
   16caa:	0f42      	lsrs	r2, r0, #29
   16cac:	0424      	lsls	r4, r4, #16
   16cae:	00db      	lsls	r3, r3, #3
   16cb0:	4314      	orrs	r4, r2
   16cb2:	431c      	orrs	r4, r3
   16cb4:	00c3      	lsls	r3, r0, #3
   16cb6:	4699      	mov	r9, r3
   16cb8:	4b68      	ldr	r3, [pc, #416]	; (16e5c <__aeabi_dmul+0x1e0>)
   16cba:	46a3      	mov	fp, r4
   16cbc:	469c      	mov	ip, r3
   16cbe:	2300      	movs	r3, #0
   16cc0:	2700      	movs	r7, #0
   16cc2:	4466      	add	r6, ip
   16cc4:	9302      	str	r3, [sp, #8]
   16cc6:	4643      	mov	r3, r8
   16cc8:	031c      	lsls	r4, r3, #12
   16cca:	005a      	lsls	r2, r3, #1
   16ccc:	0fdb      	lsrs	r3, r3, #31
   16cce:	4650      	mov	r0, sl
   16cd0:	0b24      	lsrs	r4, r4, #12
   16cd2:	0d52      	lsrs	r2, r2, #21
   16cd4:	4698      	mov	r8, r3
   16cd6:	d100      	bne.n	16cda <__aeabi_dmul+0x5e>
   16cd8:	e076      	b.n	16dc8 <__aeabi_dmul+0x14c>
   16cda:	4b5f      	ldr	r3, [pc, #380]	; (16e58 <__aeabi_dmul+0x1dc>)
   16cdc:	429a      	cmp	r2, r3
   16cde:	d06d      	beq.n	16dbc <__aeabi_dmul+0x140>
   16ce0:	2380      	movs	r3, #128	; 0x80
   16ce2:	0f41      	lsrs	r1, r0, #29
   16ce4:	041b      	lsls	r3, r3, #16
   16ce6:	430b      	orrs	r3, r1
   16ce8:	495c      	ldr	r1, [pc, #368]	; (16e5c <__aeabi_dmul+0x1e0>)
   16cea:	00e4      	lsls	r4, r4, #3
   16cec:	468c      	mov	ip, r1
   16cee:	431c      	orrs	r4, r3
   16cf0:	00c3      	lsls	r3, r0, #3
   16cf2:	2000      	movs	r0, #0
   16cf4:	4462      	add	r2, ip
   16cf6:	4641      	mov	r1, r8
   16cf8:	18b6      	adds	r6, r6, r2
   16cfa:	4069      	eors	r1, r5
   16cfc:	1c72      	adds	r2, r6, #1
   16cfe:	9101      	str	r1, [sp, #4]
   16d00:	4694      	mov	ip, r2
   16d02:	4307      	orrs	r7, r0
   16d04:	2f0f      	cmp	r7, #15
   16d06:	d900      	bls.n	16d0a <__aeabi_dmul+0x8e>
   16d08:	e0b0      	b.n	16e6c <__aeabi_dmul+0x1f0>
   16d0a:	4a55      	ldr	r2, [pc, #340]	; (16e60 <__aeabi_dmul+0x1e4>)
   16d0c:	00bf      	lsls	r7, r7, #2
   16d0e:	59d2      	ldr	r2, [r2, r7]
   16d10:	4697      	mov	pc, r2
   16d12:	465b      	mov	r3, fp
   16d14:	4303      	orrs	r3, r0
   16d16:	4699      	mov	r9, r3
   16d18:	d000      	beq.n	16d1c <__aeabi_dmul+0xa0>
   16d1a:	e087      	b.n	16e2c <__aeabi_dmul+0x1b0>
   16d1c:	2300      	movs	r3, #0
   16d1e:	469b      	mov	fp, r3
   16d20:	3302      	adds	r3, #2
   16d22:	2708      	movs	r7, #8
   16d24:	9302      	str	r3, [sp, #8]
   16d26:	e7ce      	b.n	16cc6 <__aeabi_dmul+0x4a>
   16d28:	4642      	mov	r2, r8
   16d2a:	9201      	str	r2, [sp, #4]
   16d2c:	2802      	cmp	r0, #2
   16d2e:	d067      	beq.n	16e00 <__aeabi_dmul+0x184>
   16d30:	2803      	cmp	r0, #3
   16d32:	d100      	bne.n	16d36 <__aeabi_dmul+0xba>
   16d34:	e20e      	b.n	17154 <__aeabi_dmul+0x4d8>
   16d36:	2801      	cmp	r0, #1
   16d38:	d000      	beq.n	16d3c <__aeabi_dmul+0xc0>
   16d3a:	e162      	b.n	17002 <__aeabi_dmul+0x386>
   16d3c:	2300      	movs	r3, #0
   16d3e:	2400      	movs	r4, #0
   16d40:	2200      	movs	r2, #0
   16d42:	4699      	mov	r9, r3
   16d44:	9901      	ldr	r1, [sp, #4]
   16d46:	4001      	ands	r1, r0
   16d48:	b2cd      	uxtb	r5, r1
   16d4a:	2100      	movs	r1, #0
   16d4c:	0312      	lsls	r2, r2, #12
   16d4e:	0d0b      	lsrs	r3, r1, #20
   16d50:	0b12      	lsrs	r2, r2, #12
   16d52:	051b      	lsls	r3, r3, #20
   16d54:	4313      	orrs	r3, r2
   16d56:	4a43      	ldr	r2, [pc, #268]	; (16e64 <__aeabi_dmul+0x1e8>)
   16d58:	0524      	lsls	r4, r4, #20
   16d5a:	4013      	ands	r3, r2
   16d5c:	431c      	orrs	r4, r3
   16d5e:	0064      	lsls	r4, r4, #1
   16d60:	07ed      	lsls	r5, r5, #31
   16d62:	0864      	lsrs	r4, r4, #1
   16d64:	432c      	orrs	r4, r5
   16d66:	4648      	mov	r0, r9
   16d68:	0021      	movs	r1, r4
   16d6a:	b007      	add	sp, #28
   16d6c:	bc3c      	pop	{r2, r3, r4, r5}
   16d6e:	4690      	mov	r8, r2
   16d70:	4699      	mov	r9, r3
   16d72:	46a2      	mov	sl, r4
   16d74:	46ab      	mov	fp, r5
   16d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16d78:	4303      	orrs	r3, r0
   16d7a:	4699      	mov	r9, r3
   16d7c:	d04f      	beq.n	16e1e <__aeabi_dmul+0x1a2>
   16d7e:	465b      	mov	r3, fp
   16d80:	2b00      	cmp	r3, #0
   16d82:	d100      	bne.n	16d86 <__aeabi_dmul+0x10a>
   16d84:	e189      	b.n	1709a <__aeabi_dmul+0x41e>
   16d86:	4658      	mov	r0, fp
   16d88:	f000 fe2e 	bl	179e8 <__clzsi2>
   16d8c:	0003      	movs	r3, r0
   16d8e:	3b0b      	subs	r3, #11
   16d90:	2b1c      	cmp	r3, #28
   16d92:	dd00      	ble.n	16d96 <__aeabi_dmul+0x11a>
   16d94:	e17a      	b.n	1708c <__aeabi_dmul+0x410>
   16d96:	221d      	movs	r2, #29
   16d98:	1ad3      	subs	r3, r2, r3
   16d9a:	003a      	movs	r2, r7
   16d9c:	0001      	movs	r1, r0
   16d9e:	465c      	mov	r4, fp
   16da0:	40da      	lsrs	r2, r3
   16da2:	3908      	subs	r1, #8
   16da4:	408c      	lsls	r4, r1
   16da6:	0013      	movs	r3, r2
   16da8:	408f      	lsls	r7, r1
   16daa:	4323      	orrs	r3, r4
   16dac:	469b      	mov	fp, r3
   16dae:	46b9      	mov	r9, r7
   16db0:	2300      	movs	r3, #0
   16db2:	4e2d      	ldr	r6, [pc, #180]	; (16e68 <__aeabi_dmul+0x1ec>)
   16db4:	2700      	movs	r7, #0
   16db6:	1a36      	subs	r6, r6, r0
   16db8:	9302      	str	r3, [sp, #8]
   16dba:	e784      	b.n	16cc6 <__aeabi_dmul+0x4a>
   16dbc:	4653      	mov	r3, sl
   16dbe:	4323      	orrs	r3, r4
   16dc0:	d12a      	bne.n	16e18 <__aeabi_dmul+0x19c>
   16dc2:	2400      	movs	r4, #0
   16dc4:	2002      	movs	r0, #2
   16dc6:	e796      	b.n	16cf6 <__aeabi_dmul+0x7a>
   16dc8:	4653      	mov	r3, sl
   16dca:	4323      	orrs	r3, r4
   16dcc:	d020      	beq.n	16e10 <__aeabi_dmul+0x194>
   16dce:	2c00      	cmp	r4, #0
   16dd0:	d100      	bne.n	16dd4 <__aeabi_dmul+0x158>
   16dd2:	e157      	b.n	17084 <__aeabi_dmul+0x408>
   16dd4:	0020      	movs	r0, r4
   16dd6:	f000 fe07 	bl	179e8 <__clzsi2>
   16dda:	0003      	movs	r3, r0
   16ddc:	3b0b      	subs	r3, #11
   16dde:	2b1c      	cmp	r3, #28
   16de0:	dd00      	ble.n	16de4 <__aeabi_dmul+0x168>
   16de2:	e149      	b.n	17078 <__aeabi_dmul+0x3fc>
   16de4:	211d      	movs	r1, #29
   16de6:	1acb      	subs	r3, r1, r3
   16de8:	4651      	mov	r1, sl
   16dea:	0002      	movs	r2, r0
   16dec:	40d9      	lsrs	r1, r3
   16dee:	4653      	mov	r3, sl
   16df0:	3a08      	subs	r2, #8
   16df2:	4094      	lsls	r4, r2
   16df4:	4093      	lsls	r3, r2
   16df6:	430c      	orrs	r4, r1
   16df8:	4a1b      	ldr	r2, [pc, #108]	; (16e68 <__aeabi_dmul+0x1ec>)
   16dfa:	1a12      	subs	r2, r2, r0
   16dfc:	2000      	movs	r0, #0
   16dfe:	e77a      	b.n	16cf6 <__aeabi_dmul+0x7a>
   16e00:	2501      	movs	r5, #1
   16e02:	9b01      	ldr	r3, [sp, #4]
   16e04:	4c14      	ldr	r4, [pc, #80]	; (16e58 <__aeabi_dmul+0x1dc>)
   16e06:	401d      	ands	r5, r3
   16e08:	2300      	movs	r3, #0
   16e0a:	2200      	movs	r2, #0
   16e0c:	4699      	mov	r9, r3
   16e0e:	e79c      	b.n	16d4a <__aeabi_dmul+0xce>
   16e10:	2400      	movs	r4, #0
   16e12:	2200      	movs	r2, #0
   16e14:	2001      	movs	r0, #1
   16e16:	e76e      	b.n	16cf6 <__aeabi_dmul+0x7a>
   16e18:	4653      	mov	r3, sl
   16e1a:	2003      	movs	r0, #3
   16e1c:	e76b      	b.n	16cf6 <__aeabi_dmul+0x7a>
   16e1e:	2300      	movs	r3, #0
   16e20:	469b      	mov	fp, r3
   16e22:	3301      	adds	r3, #1
   16e24:	2704      	movs	r7, #4
   16e26:	2600      	movs	r6, #0
   16e28:	9302      	str	r3, [sp, #8]
   16e2a:	e74c      	b.n	16cc6 <__aeabi_dmul+0x4a>
   16e2c:	2303      	movs	r3, #3
   16e2e:	4681      	mov	r9, r0
   16e30:	270c      	movs	r7, #12
   16e32:	9302      	str	r3, [sp, #8]
   16e34:	e747      	b.n	16cc6 <__aeabi_dmul+0x4a>
   16e36:	2280      	movs	r2, #128	; 0x80
   16e38:	2300      	movs	r3, #0
   16e3a:	2500      	movs	r5, #0
   16e3c:	0312      	lsls	r2, r2, #12
   16e3e:	4699      	mov	r9, r3
   16e40:	4c05      	ldr	r4, [pc, #20]	; (16e58 <__aeabi_dmul+0x1dc>)
   16e42:	e782      	b.n	16d4a <__aeabi_dmul+0xce>
   16e44:	465c      	mov	r4, fp
   16e46:	464b      	mov	r3, r9
   16e48:	9802      	ldr	r0, [sp, #8]
   16e4a:	e76f      	b.n	16d2c <__aeabi_dmul+0xb0>
   16e4c:	465c      	mov	r4, fp
   16e4e:	464b      	mov	r3, r9
   16e50:	9501      	str	r5, [sp, #4]
   16e52:	9802      	ldr	r0, [sp, #8]
   16e54:	e76a      	b.n	16d2c <__aeabi_dmul+0xb0>
   16e56:	46c0      	nop			; (mov r8, r8)
   16e58:	000007ff 	.word	0x000007ff
   16e5c:	fffffc01 	.word	0xfffffc01
   16e60:	00019a00 	.word	0x00019a00
   16e64:	800fffff 	.word	0x800fffff
   16e68:	fffffc0d 	.word	0xfffffc0d
   16e6c:	464a      	mov	r2, r9
   16e6e:	4649      	mov	r1, r9
   16e70:	0c17      	lsrs	r7, r2, #16
   16e72:	0c1a      	lsrs	r2, r3, #16
   16e74:	041b      	lsls	r3, r3, #16
   16e76:	0c1b      	lsrs	r3, r3, #16
   16e78:	0408      	lsls	r0, r1, #16
   16e7a:	0019      	movs	r1, r3
   16e7c:	0c00      	lsrs	r0, r0, #16
   16e7e:	4341      	muls	r1, r0
   16e80:	0015      	movs	r5, r2
   16e82:	4688      	mov	r8, r1
   16e84:	0019      	movs	r1, r3
   16e86:	437d      	muls	r5, r7
   16e88:	4379      	muls	r1, r7
   16e8a:	9503      	str	r5, [sp, #12]
   16e8c:	4689      	mov	r9, r1
   16e8e:	0029      	movs	r1, r5
   16e90:	0015      	movs	r5, r2
   16e92:	4345      	muls	r5, r0
   16e94:	444d      	add	r5, r9
   16e96:	9502      	str	r5, [sp, #8]
   16e98:	4645      	mov	r5, r8
   16e9a:	0c2d      	lsrs	r5, r5, #16
   16e9c:	46aa      	mov	sl, r5
   16e9e:	9d02      	ldr	r5, [sp, #8]
   16ea0:	4455      	add	r5, sl
   16ea2:	45a9      	cmp	r9, r5
   16ea4:	d906      	bls.n	16eb4 <__aeabi_dmul+0x238>
   16ea6:	468a      	mov	sl, r1
   16ea8:	2180      	movs	r1, #128	; 0x80
   16eaa:	0249      	lsls	r1, r1, #9
   16eac:	4689      	mov	r9, r1
   16eae:	44ca      	add	sl, r9
   16eb0:	4651      	mov	r1, sl
   16eb2:	9103      	str	r1, [sp, #12]
   16eb4:	0c29      	lsrs	r1, r5, #16
   16eb6:	9104      	str	r1, [sp, #16]
   16eb8:	4641      	mov	r1, r8
   16eba:	0409      	lsls	r1, r1, #16
   16ebc:	042d      	lsls	r5, r5, #16
   16ebe:	0c09      	lsrs	r1, r1, #16
   16ec0:	4688      	mov	r8, r1
   16ec2:	0029      	movs	r1, r5
   16ec4:	0c25      	lsrs	r5, r4, #16
   16ec6:	0424      	lsls	r4, r4, #16
   16ec8:	4441      	add	r1, r8
   16eca:	0c24      	lsrs	r4, r4, #16
   16ecc:	9105      	str	r1, [sp, #20]
   16ece:	0021      	movs	r1, r4
   16ed0:	4341      	muls	r1, r0
   16ed2:	4688      	mov	r8, r1
   16ed4:	0021      	movs	r1, r4
   16ed6:	4379      	muls	r1, r7
   16ed8:	468a      	mov	sl, r1
   16eda:	4368      	muls	r0, r5
   16edc:	4641      	mov	r1, r8
   16ede:	4450      	add	r0, sl
   16ee0:	4681      	mov	r9, r0
   16ee2:	0c08      	lsrs	r0, r1, #16
   16ee4:	4448      	add	r0, r9
   16ee6:	436f      	muls	r7, r5
   16ee8:	4582      	cmp	sl, r0
   16eea:	d903      	bls.n	16ef4 <__aeabi_dmul+0x278>
   16eec:	2180      	movs	r1, #128	; 0x80
   16eee:	0249      	lsls	r1, r1, #9
   16ef0:	4689      	mov	r9, r1
   16ef2:	444f      	add	r7, r9
   16ef4:	0c01      	lsrs	r1, r0, #16
   16ef6:	4689      	mov	r9, r1
   16ef8:	0039      	movs	r1, r7
   16efa:	4449      	add	r1, r9
   16efc:	9102      	str	r1, [sp, #8]
   16efe:	4641      	mov	r1, r8
   16f00:	040f      	lsls	r7, r1, #16
   16f02:	9904      	ldr	r1, [sp, #16]
   16f04:	0c3f      	lsrs	r7, r7, #16
   16f06:	4688      	mov	r8, r1
   16f08:	0400      	lsls	r0, r0, #16
   16f0a:	19c0      	adds	r0, r0, r7
   16f0c:	4480      	add	r8, r0
   16f0e:	4641      	mov	r1, r8
   16f10:	9104      	str	r1, [sp, #16]
   16f12:	4659      	mov	r1, fp
   16f14:	0c0f      	lsrs	r7, r1, #16
   16f16:	0409      	lsls	r1, r1, #16
   16f18:	0c09      	lsrs	r1, r1, #16
   16f1a:	4688      	mov	r8, r1
   16f1c:	4359      	muls	r1, r3
   16f1e:	468a      	mov	sl, r1
   16f20:	0039      	movs	r1, r7
   16f22:	4351      	muls	r1, r2
   16f24:	4689      	mov	r9, r1
   16f26:	4641      	mov	r1, r8
   16f28:	434a      	muls	r2, r1
   16f2a:	4651      	mov	r1, sl
   16f2c:	0c09      	lsrs	r1, r1, #16
   16f2e:	468b      	mov	fp, r1
   16f30:	437b      	muls	r3, r7
   16f32:	18d2      	adds	r2, r2, r3
   16f34:	445a      	add	r2, fp
   16f36:	4293      	cmp	r3, r2
   16f38:	d903      	bls.n	16f42 <__aeabi_dmul+0x2c6>
   16f3a:	2380      	movs	r3, #128	; 0x80
   16f3c:	025b      	lsls	r3, r3, #9
   16f3e:	469b      	mov	fp, r3
   16f40:	44d9      	add	r9, fp
   16f42:	4651      	mov	r1, sl
   16f44:	0409      	lsls	r1, r1, #16
   16f46:	0c09      	lsrs	r1, r1, #16
   16f48:	468a      	mov	sl, r1
   16f4a:	4641      	mov	r1, r8
   16f4c:	4361      	muls	r1, r4
   16f4e:	437c      	muls	r4, r7
   16f50:	0c13      	lsrs	r3, r2, #16
   16f52:	0412      	lsls	r2, r2, #16
   16f54:	444b      	add	r3, r9
   16f56:	4452      	add	r2, sl
   16f58:	46a1      	mov	r9, r4
   16f5a:	468a      	mov	sl, r1
   16f5c:	003c      	movs	r4, r7
   16f5e:	4641      	mov	r1, r8
   16f60:	436c      	muls	r4, r5
   16f62:	434d      	muls	r5, r1
   16f64:	4651      	mov	r1, sl
   16f66:	444d      	add	r5, r9
   16f68:	0c0f      	lsrs	r7, r1, #16
   16f6a:	197d      	adds	r5, r7, r5
   16f6c:	45a9      	cmp	r9, r5
   16f6e:	d903      	bls.n	16f78 <__aeabi_dmul+0x2fc>
   16f70:	2180      	movs	r1, #128	; 0x80
   16f72:	0249      	lsls	r1, r1, #9
   16f74:	4688      	mov	r8, r1
   16f76:	4444      	add	r4, r8
   16f78:	9f04      	ldr	r7, [sp, #16]
   16f7a:	9903      	ldr	r1, [sp, #12]
   16f7c:	46b8      	mov	r8, r7
   16f7e:	4441      	add	r1, r8
   16f80:	468b      	mov	fp, r1
   16f82:	4583      	cmp	fp, r0
   16f84:	4180      	sbcs	r0, r0
   16f86:	4241      	negs	r1, r0
   16f88:	4688      	mov	r8, r1
   16f8a:	4651      	mov	r1, sl
   16f8c:	0408      	lsls	r0, r1, #16
   16f8e:	042f      	lsls	r7, r5, #16
   16f90:	0c00      	lsrs	r0, r0, #16
   16f92:	183f      	adds	r7, r7, r0
   16f94:	4658      	mov	r0, fp
   16f96:	9902      	ldr	r1, [sp, #8]
   16f98:	1810      	adds	r0, r2, r0
   16f9a:	4689      	mov	r9, r1
   16f9c:	4290      	cmp	r0, r2
   16f9e:	4192      	sbcs	r2, r2
   16fa0:	444f      	add	r7, r9
   16fa2:	46ba      	mov	sl, r7
   16fa4:	4252      	negs	r2, r2
   16fa6:	4699      	mov	r9, r3
   16fa8:	4693      	mov	fp, r2
   16faa:	44c2      	add	sl, r8
   16fac:	44d1      	add	r9, sl
   16fae:	44cb      	add	fp, r9
   16fb0:	428f      	cmp	r7, r1
   16fb2:	41bf      	sbcs	r7, r7
   16fb4:	45c2      	cmp	sl, r8
   16fb6:	4189      	sbcs	r1, r1
   16fb8:	4599      	cmp	r9, r3
   16fba:	419b      	sbcs	r3, r3
   16fbc:	4593      	cmp	fp, r2
   16fbe:	4192      	sbcs	r2, r2
   16fc0:	427f      	negs	r7, r7
   16fc2:	4249      	negs	r1, r1
   16fc4:	0c2d      	lsrs	r5, r5, #16
   16fc6:	4252      	negs	r2, r2
   16fc8:	430f      	orrs	r7, r1
   16fca:	425b      	negs	r3, r3
   16fcc:	4313      	orrs	r3, r2
   16fce:	197f      	adds	r7, r7, r5
   16fd0:	18ff      	adds	r7, r7, r3
   16fd2:	465b      	mov	r3, fp
   16fd4:	193c      	adds	r4, r7, r4
   16fd6:	0ddb      	lsrs	r3, r3, #23
   16fd8:	9a05      	ldr	r2, [sp, #20]
   16fda:	0264      	lsls	r4, r4, #9
   16fdc:	431c      	orrs	r4, r3
   16fde:	0243      	lsls	r3, r0, #9
   16fe0:	4313      	orrs	r3, r2
   16fe2:	1e5d      	subs	r5, r3, #1
   16fe4:	41ab      	sbcs	r3, r5
   16fe6:	465a      	mov	r2, fp
   16fe8:	0dc0      	lsrs	r0, r0, #23
   16fea:	4303      	orrs	r3, r0
   16fec:	0252      	lsls	r2, r2, #9
   16fee:	4313      	orrs	r3, r2
   16ff0:	01e2      	lsls	r2, r4, #7
   16ff2:	d556      	bpl.n	170a2 <__aeabi_dmul+0x426>
   16ff4:	2001      	movs	r0, #1
   16ff6:	085a      	lsrs	r2, r3, #1
   16ff8:	4003      	ands	r3, r0
   16ffa:	4313      	orrs	r3, r2
   16ffc:	07e2      	lsls	r2, r4, #31
   16ffe:	4313      	orrs	r3, r2
   17000:	0864      	lsrs	r4, r4, #1
   17002:	485a      	ldr	r0, [pc, #360]	; (1716c <__aeabi_dmul+0x4f0>)
   17004:	4460      	add	r0, ip
   17006:	2800      	cmp	r0, #0
   17008:	dd4d      	ble.n	170a6 <__aeabi_dmul+0x42a>
   1700a:	075a      	lsls	r2, r3, #29
   1700c:	d009      	beq.n	17022 <__aeabi_dmul+0x3a6>
   1700e:	220f      	movs	r2, #15
   17010:	401a      	ands	r2, r3
   17012:	2a04      	cmp	r2, #4
   17014:	d005      	beq.n	17022 <__aeabi_dmul+0x3a6>
   17016:	1d1a      	adds	r2, r3, #4
   17018:	429a      	cmp	r2, r3
   1701a:	419b      	sbcs	r3, r3
   1701c:	425b      	negs	r3, r3
   1701e:	18e4      	adds	r4, r4, r3
   17020:	0013      	movs	r3, r2
   17022:	01e2      	lsls	r2, r4, #7
   17024:	d504      	bpl.n	17030 <__aeabi_dmul+0x3b4>
   17026:	2080      	movs	r0, #128	; 0x80
   17028:	4a51      	ldr	r2, [pc, #324]	; (17170 <__aeabi_dmul+0x4f4>)
   1702a:	00c0      	lsls	r0, r0, #3
   1702c:	4014      	ands	r4, r2
   1702e:	4460      	add	r0, ip
   17030:	4a50      	ldr	r2, [pc, #320]	; (17174 <__aeabi_dmul+0x4f8>)
   17032:	4290      	cmp	r0, r2
   17034:	dd00      	ble.n	17038 <__aeabi_dmul+0x3bc>
   17036:	e6e3      	b.n	16e00 <__aeabi_dmul+0x184>
   17038:	2501      	movs	r5, #1
   1703a:	08db      	lsrs	r3, r3, #3
   1703c:	0762      	lsls	r2, r4, #29
   1703e:	431a      	orrs	r2, r3
   17040:	0264      	lsls	r4, r4, #9
   17042:	9b01      	ldr	r3, [sp, #4]
   17044:	4691      	mov	r9, r2
   17046:	0b22      	lsrs	r2, r4, #12
   17048:	0544      	lsls	r4, r0, #21
   1704a:	0d64      	lsrs	r4, r4, #21
   1704c:	401d      	ands	r5, r3
   1704e:	e67c      	b.n	16d4a <__aeabi_dmul+0xce>
   17050:	2280      	movs	r2, #128	; 0x80
   17052:	4659      	mov	r1, fp
   17054:	0312      	lsls	r2, r2, #12
   17056:	4211      	tst	r1, r2
   17058:	d008      	beq.n	1706c <__aeabi_dmul+0x3f0>
   1705a:	4214      	tst	r4, r2
   1705c:	d106      	bne.n	1706c <__aeabi_dmul+0x3f0>
   1705e:	4322      	orrs	r2, r4
   17060:	0312      	lsls	r2, r2, #12
   17062:	0b12      	lsrs	r2, r2, #12
   17064:	4645      	mov	r5, r8
   17066:	4699      	mov	r9, r3
   17068:	4c43      	ldr	r4, [pc, #268]	; (17178 <__aeabi_dmul+0x4fc>)
   1706a:	e66e      	b.n	16d4a <__aeabi_dmul+0xce>
   1706c:	465b      	mov	r3, fp
   1706e:	431a      	orrs	r2, r3
   17070:	0312      	lsls	r2, r2, #12
   17072:	0b12      	lsrs	r2, r2, #12
   17074:	4c40      	ldr	r4, [pc, #256]	; (17178 <__aeabi_dmul+0x4fc>)
   17076:	e668      	b.n	16d4a <__aeabi_dmul+0xce>
   17078:	0003      	movs	r3, r0
   1707a:	4654      	mov	r4, sl
   1707c:	3b28      	subs	r3, #40	; 0x28
   1707e:	409c      	lsls	r4, r3
   17080:	2300      	movs	r3, #0
   17082:	e6b9      	b.n	16df8 <__aeabi_dmul+0x17c>
   17084:	f000 fcb0 	bl	179e8 <__clzsi2>
   17088:	3020      	adds	r0, #32
   1708a:	e6a6      	b.n	16dda <__aeabi_dmul+0x15e>
   1708c:	0003      	movs	r3, r0
   1708e:	3b28      	subs	r3, #40	; 0x28
   17090:	409f      	lsls	r7, r3
   17092:	2300      	movs	r3, #0
   17094:	46bb      	mov	fp, r7
   17096:	4699      	mov	r9, r3
   17098:	e68a      	b.n	16db0 <__aeabi_dmul+0x134>
   1709a:	f000 fca5 	bl	179e8 <__clzsi2>
   1709e:	3020      	adds	r0, #32
   170a0:	e674      	b.n	16d8c <__aeabi_dmul+0x110>
   170a2:	46b4      	mov	ip, r6
   170a4:	e7ad      	b.n	17002 <__aeabi_dmul+0x386>
   170a6:	2501      	movs	r5, #1
   170a8:	1a2a      	subs	r2, r5, r0
   170aa:	2a38      	cmp	r2, #56	; 0x38
   170ac:	dd06      	ble.n	170bc <__aeabi_dmul+0x440>
   170ae:	9b01      	ldr	r3, [sp, #4]
   170b0:	2400      	movs	r4, #0
   170b2:	401d      	ands	r5, r3
   170b4:	2300      	movs	r3, #0
   170b6:	2200      	movs	r2, #0
   170b8:	4699      	mov	r9, r3
   170ba:	e646      	b.n	16d4a <__aeabi_dmul+0xce>
   170bc:	2a1f      	cmp	r2, #31
   170be:	dc21      	bgt.n	17104 <__aeabi_dmul+0x488>
   170c0:	2520      	movs	r5, #32
   170c2:	0020      	movs	r0, r4
   170c4:	1aad      	subs	r5, r5, r2
   170c6:	001e      	movs	r6, r3
   170c8:	40ab      	lsls	r3, r5
   170ca:	40a8      	lsls	r0, r5
   170cc:	40d6      	lsrs	r6, r2
   170ce:	1e5d      	subs	r5, r3, #1
   170d0:	41ab      	sbcs	r3, r5
   170d2:	4330      	orrs	r0, r6
   170d4:	4318      	orrs	r0, r3
   170d6:	40d4      	lsrs	r4, r2
   170d8:	0743      	lsls	r3, r0, #29
   170da:	d009      	beq.n	170f0 <__aeabi_dmul+0x474>
   170dc:	230f      	movs	r3, #15
   170de:	4003      	ands	r3, r0
   170e0:	2b04      	cmp	r3, #4
   170e2:	d005      	beq.n	170f0 <__aeabi_dmul+0x474>
   170e4:	0003      	movs	r3, r0
   170e6:	1d18      	adds	r0, r3, #4
   170e8:	4298      	cmp	r0, r3
   170ea:	419b      	sbcs	r3, r3
   170ec:	425b      	negs	r3, r3
   170ee:	18e4      	adds	r4, r4, r3
   170f0:	0223      	lsls	r3, r4, #8
   170f2:	d521      	bpl.n	17138 <__aeabi_dmul+0x4bc>
   170f4:	2501      	movs	r5, #1
   170f6:	9b01      	ldr	r3, [sp, #4]
   170f8:	2401      	movs	r4, #1
   170fa:	401d      	ands	r5, r3
   170fc:	2300      	movs	r3, #0
   170fe:	2200      	movs	r2, #0
   17100:	4699      	mov	r9, r3
   17102:	e622      	b.n	16d4a <__aeabi_dmul+0xce>
   17104:	251f      	movs	r5, #31
   17106:	0021      	movs	r1, r4
   17108:	426d      	negs	r5, r5
   1710a:	1a28      	subs	r0, r5, r0
   1710c:	40c1      	lsrs	r1, r0
   1710e:	0008      	movs	r0, r1
   17110:	2a20      	cmp	r2, #32
   17112:	d01d      	beq.n	17150 <__aeabi_dmul+0x4d4>
   17114:	355f      	adds	r5, #95	; 0x5f
   17116:	1aaa      	subs	r2, r5, r2
   17118:	4094      	lsls	r4, r2
   1711a:	4323      	orrs	r3, r4
   1711c:	1e5c      	subs	r4, r3, #1
   1711e:	41a3      	sbcs	r3, r4
   17120:	2507      	movs	r5, #7
   17122:	4303      	orrs	r3, r0
   17124:	401d      	ands	r5, r3
   17126:	2200      	movs	r2, #0
   17128:	2d00      	cmp	r5, #0
   1712a:	d009      	beq.n	17140 <__aeabi_dmul+0x4c4>
   1712c:	220f      	movs	r2, #15
   1712e:	2400      	movs	r4, #0
   17130:	401a      	ands	r2, r3
   17132:	0018      	movs	r0, r3
   17134:	2a04      	cmp	r2, #4
   17136:	d1d6      	bne.n	170e6 <__aeabi_dmul+0x46a>
   17138:	0003      	movs	r3, r0
   1713a:	0765      	lsls	r5, r4, #29
   1713c:	0264      	lsls	r4, r4, #9
   1713e:	0b22      	lsrs	r2, r4, #12
   17140:	08db      	lsrs	r3, r3, #3
   17142:	432b      	orrs	r3, r5
   17144:	2501      	movs	r5, #1
   17146:	4699      	mov	r9, r3
   17148:	9b01      	ldr	r3, [sp, #4]
   1714a:	2400      	movs	r4, #0
   1714c:	401d      	ands	r5, r3
   1714e:	e5fc      	b.n	16d4a <__aeabi_dmul+0xce>
   17150:	2400      	movs	r4, #0
   17152:	e7e2      	b.n	1711a <__aeabi_dmul+0x49e>
   17154:	2280      	movs	r2, #128	; 0x80
   17156:	2501      	movs	r5, #1
   17158:	0312      	lsls	r2, r2, #12
   1715a:	4322      	orrs	r2, r4
   1715c:	9901      	ldr	r1, [sp, #4]
   1715e:	0312      	lsls	r2, r2, #12
   17160:	0b12      	lsrs	r2, r2, #12
   17162:	400d      	ands	r5, r1
   17164:	4699      	mov	r9, r3
   17166:	4c04      	ldr	r4, [pc, #16]	; (17178 <__aeabi_dmul+0x4fc>)
   17168:	e5ef      	b.n	16d4a <__aeabi_dmul+0xce>
   1716a:	46c0      	nop			; (mov r8, r8)
   1716c:	000003ff 	.word	0x000003ff
   17170:	feffffff 	.word	0xfeffffff
   17174:	000007fe 	.word	0x000007fe
   17178:	000007ff 	.word	0x000007ff

0001717c <__aeabi_dsub>:
   1717c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1717e:	4646      	mov	r6, r8
   17180:	46d6      	mov	lr, sl
   17182:	464f      	mov	r7, r9
   17184:	030c      	lsls	r4, r1, #12
   17186:	b5c0      	push	{r6, r7, lr}
   17188:	0fcd      	lsrs	r5, r1, #31
   1718a:	004e      	lsls	r6, r1, #1
   1718c:	0a61      	lsrs	r1, r4, #9
   1718e:	0f44      	lsrs	r4, r0, #29
   17190:	430c      	orrs	r4, r1
   17192:	00c1      	lsls	r1, r0, #3
   17194:	0058      	lsls	r0, r3, #1
   17196:	0d40      	lsrs	r0, r0, #21
   17198:	4684      	mov	ip, r0
   1719a:	468a      	mov	sl, r1
   1719c:	000f      	movs	r7, r1
   1719e:	0319      	lsls	r1, r3, #12
   171a0:	0f50      	lsrs	r0, r2, #29
   171a2:	0a49      	lsrs	r1, r1, #9
   171a4:	4301      	orrs	r1, r0
   171a6:	48c6      	ldr	r0, [pc, #792]	; (174c0 <__aeabi_dsub+0x344>)
   171a8:	0d76      	lsrs	r6, r6, #21
   171aa:	46a8      	mov	r8, r5
   171ac:	0fdb      	lsrs	r3, r3, #31
   171ae:	00d2      	lsls	r2, r2, #3
   171b0:	4584      	cmp	ip, r0
   171b2:	d100      	bne.n	171b6 <__aeabi_dsub+0x3a>
   171b4:	e0d8      	b.n	17368 <__aeabi_dsub+0x1ec>
   171b6:	2001      	movs	r0, #1
   171b8:	4043      	eors	r3, r0
   171ba:	42ab      	cmp	r3, r5
   171bc:	d100      	bne.n	171c0 <__aeabi_dsub+0x44>
   171be:	e0a6      	b.n	1730e <__aeabi_dsub+0x192>
   171c0:	4660      	mov	r0, ip
   171c2:	1a35      	subs	r5, r6, r0
   171c4:	2d00      	cmp	r5, #0
   171c6:	dc00      	bgt.n	171ca <__aeabi_dsub+0x4e>
   171c8:	e105      	b.n	173d6 <__aeabi_dsub+0x25a>
   171ca:	2800      	cmp	r0, #0
   171cc:	d110      	bne.n	171f0 <__aeabi_dsub+0x74>
   171ce:	000b      	movs	r3, r1
   171d0:	4313      	orrs	r3, r2
   171d2:	d100      	bne.n	171d6 <__aeabi_dsub+0x5a>
   171d4:	e0d7      	b.n	17386 <__aeabi_dsub+0x20a>
   171d6:	1e6b      	subs	r3, r5, #1
   171d8:	2b00      	cmp	r3, #0
   171da:	d000      	beq.n	171de <__aeabi_dsub+0x62>
   171dc:	e14b      	b.n	17476 <__aeabi_dsub+0x2fa>
   171de:	4653      	mov	r3, sl
   171e0:	1a9f      	subs	r7, r3, r2
   171e2:	45ba      	cmp	sl, r7
   171e4:	4180      	sbcs	r0, r0
   171e6:	1a64      	subs	r4, r4, r1
   171e8:	4240      	negs	r0, r0
   171ea:	1a24      	subs	r4, r4, r0
   171ec:	2601      	movs	r6, #1
   171ee:	e01e      	b.n	1722e <__aeabi_dsub+0xb2>
   171f0:	4bb3      	ldr	r3, [pc, #716]	; (174c0 <__aeabi_dsub+0x344>)
   171f2:	429e      	cmp	r6, r3
   171f4:	d048      	beq.n	17288 <__aeabi_dsub+0x10c>
   171f6:	2380      	movs	r3, #128	; 0x80
   171f8:	041b      	lsls	r3, r3, #16
   171fa:	4319      	orrs	r1, r3
   171fc:	2d38      	cmp	r5, #56	; 0x38
   171fe:	dd00      	ble.n	17202 <__aeabi_dsub+0x86>
   17200:	e119      	b.n	17436 <__aeabi_dsub+0x2ba>
   17202:	2d1f      	cmp	r5, #31
   17204:	dd00      	ble.n	17208 <__aeabi_dsub+0x8c>
   17206:	e14c      	b.n	174a2 <__aeabi_dsub+0x326>
   17208:	2320      	movs	r3, #32
   1720a:	000f      	movs	r7, r1
   1720c:	1b5b      	subs	r3, r3, r5
   1720e:	0010      	movs	r0, r2
   17210:	409a      	lsls	r2, r3
   17212:	409f      	lsls	r7, r3
   17214:	40e8      	lsrs	r0, r5
   17216:	1e53      	subs	r3, r2, #1
   17218:	419a      	sbcs	r2, r3
   1721a:	40e9      	lsrs	r1, r5
   1721c:	4307      	orrs	r7, r0
   1721e:	4317      	orrs	r7, r2
   17220:	4653      	mov	r3, sl
   17222:	1bdf      	subs	r7, r3, r7
   17224:	1a61      	subs	r1, r4, r1
   17226:	45ba      	cmp	sl, r7
   17228:	41a4      	sbcs	r4, r4
   1722a:	4264      	negs	r4, r4
   1722c:	1b0c      	subs	r4, r1, r4
   1722e:	0223      	lsls	r3, r4, #8
   17230:	d400      	bmi.n	17234 <__aeabi_dsub+0xb8>
   17232:	e0c5      	b.n	173c0 <__aeabi_dsub+0x244>
   17234:	0264      	lsls	r4, r4, #9
   17236:	0a65      	lsrs	r5, r4, #9
   17238:	2d00      	cmp	r5, #0
   1723a:	d100      	bne.n	1723e <__aeabi_dsub+0xc2>
   1723c:	e0f6      	b.n	1742c <__aeabi_dsub+0x2b0>
   1723e:	0028      	movs	r0, r5
   17240:	f000 fbd2 	bl	179e8 <__clzsi2>
   17244:	0003      	movs	r3, r0
   17246:	3b08      	subs	r3, #8
   17248:	2b1f      	cmp	r3, #31
   1724a:	dd00      	ble.n	1724e <__aeabi_dsub+0xd2>
   1724c:	e0e9      	b.n	17422 <__aeabi_dsub+0x2a6>
   1724e:	2220      	movs	r2, #32
   17250:	003c      	movs	r4, r7
   17252:	1ad2      	subs	r2, r2, r3
   17254:	409d      	lsls	r5, r3
   17256:	40d4      	lsrs	r4, r2
   17258:	409f      	lsls	r7, r3
   1725a:	4325      	orrs	r5, r4
   1725c:	429e      	cmp	r6, r3
   1725e:	dd00      	ble.n	17262 <__aeabi_dsub+0xe6>
   17260:	e0db      	b.n	1741a <__aeabi_dsub+0x29e>
   17262:	1b9e      	subs	r6, r3, r6
   17264:	1c73      	adds	r3, r6, #1
   17266:	2b1f      	cmp	r3, #31
   17268:	dd00      	ble.n	1726c <__aeabi_dsub+0xf0>
   1726a:	e10a      	b.n	17482 <__aeabi_dsub+0x306>
   1726c:	2220      	movs	r2, #32
   1726e:	0038      	movs	r0, r7
   17270:	1ad2      	subs	r2, r2, r3
   17272:	0029      	movs	r1, r5
   17274:	4097      	lsls	r7, r2
   17276:	002c      	movs	r4, r5
   17278:	4091      	lsls	r1, r2
   1727a:	40d8      	lsrs	r0, r3
   1727c:	1e7a      	subs	r2, r7, #1
   1727e:	4197      	sbcs	r7, r2
   17280:	40dc      	lsrs	r4, r3
   17282:	2600      	movs	r6, #0
   17284:	4301      	orrs	r1, r0
   17286:	430f      	orrs	r7, r1
   17288:	077b      	lsls	r3, r7, #29
   1728a:	d009      	beq.n	172a0 <__aeabi_dsub+0x124>
   1728c:	230f      	movs	r3, #15
   1728e:	403b      	ands	r3, r7
   17290:	2b04      	cmp	r3, #4
   17292:	d005      	beq.n	172a0 <__aeabi_dsub+0x124>
   17294:	1d3b      	adds	r3, r7, #4
   17296:	42bb      	cmp	r3, r7
   17298:	41bf      	sbcs	r7, r7
   1729a:	427f      	negs	r7, r7
   1729c:	19e4      	adds	r4, r4, r7
   1729e:	001f      	movs	r7, r3
   172a0:	0223      	lsls	r3, r4, #8
   172a2:	d525      	bpl.n	172f0 <__aeabi_dsub+0x174>
   172a4:	4b86      	ldr	r3, [pc, #536]	; (174c0 <__aeabi_dsub+0x344>)
   172a6:	3601      	adds	r6, #1
   172a8:	429e      	cmp	r6, r3
   172aa:	d100      	bne.n	172ae <__aeabi_dsub+0x132>
   172ac:	e0af      	b.n	1740e <__aeabi_dsub+0x292>
   172ae:	4b85      	ldr	r3, [pc, #532]	; (174c4 <__aeabi_dsub+0x348>)
   172b0:	2501      	movs	r5, #1
   172b2:	401c      	ands	r4, r3
   172b4:	4643      	mov	r3, r8
   172b6:	0762      	lsls	r2, r4, #29
   172b8:	08ff      	lsrs	r7, r7, #3
   172ba:	0264      	lsls	r4, r4, #9
   172bc:	0576      	lsls	r6, r6, #21
   172be:	4317      	orrs	r7, r2
   172c0:	0b24      	lsrs	r4, r4, #12
   172c2:	0d76      	lsrs	r6, r6, #21
   172c4:	401d      	ands	r5, r3
   172c6:	2100      	movs	r1, #0
   172c8:	0324      	lsls	r4, r4, #12
   172ca:	0b23      	lsrs	r3, r4, #12
   172cc:	0d0c      	lsrs	r4, r1, #20
   172ce:	4a7e      	ldr	r2, [pc, #504]	; (174c8 <__aeabi_dsub+0x34c>)
   172d0:	0524      	lsls	r4, r4, #20
   172d2:	431c      	orrs	r4, r3
   172d4:	4014      	ands	r4, r2
   172d6:	0533      	lsls	r3, r6, #20
   172d8:	4323      	orrs	r3, r4
   172da:	005b      	lsls	r3, r3, #1
   172dc:	07ed      	lsls	r5, r5, #31
   172de:	085b      	lsrs	r3, r3, #1
   172e0:	432b      	orrs	r3, r5
   172e2:	0038      	movs	r0, r7
   172e4:	0019      	movs	r1, r3
   172e6:	bc1c      	pop	{r2, r3, r4}
   172e8:	4690      	mov	r8, r2
   172ea:	4699      	mov	r9, r3
   172ec:	46a2      	mov	sl, r4
   172ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   172f0:	2501      	movs	r5, #1
   172f2:	4643      	mov	r3, r8
   172f4:	0762      	lsls	r2, r4, #29
   172f6:	08ff      	lsrs	r7, r7, #3
   172f8:	4317      	orrs	r7, r2
   172fa:	08e4      	lsrs	r4, r4, #3
   172fc:	401d      	ands	r5, r3
   172fe:	4b70      	ldr	r3, [pc, #448]	; (174c0 <__aeabi_dsub+0x344>)
   17300:	429e      	cmp	r6, r3
   17302:	d036      	beq.n	17372 <__aeabi_dsub+0x1f6>
   17304:	0324      	lsls	r4, r4, #12
   17306:	0576      	lsls	r6, r6, #21
   17308:	0b24      	lsrs	r4, r4, #12
   1730a:	0d76      	lsrs	r6, r6, #21
   1730c:	e7db      	b.n	172c6 <__aeabi_dsub+0x14a>
   1730e:	4663      	mov	r3, ip
   17310:	1af3      	subs	r3, r6, r3
   17312:	2b00      	cmp	r3, #0
   17314:	dc00      	bgt.n	17318 <__aeabi_dsub+0x19c>
   17316:	e094      	b.n	17442 <__aeabi_dsub+0x2c6>
   17318:	4660      	mov	r0, ip
   1731a:	2800      	cmp	r0, #0
   1731c:	d035      	beq.n	1738a <__aeabi_dsub+0x20e>
   1731e:	4868      	ldr	r0, [pc, #416]	; (174c0 <__aeabi_dsub+0x344>)
   17320:	4286      	cmp	r6, r0
   17322:	d0b1      	beq.n	17288 <__aeabi_dsub+0x10c>
   17324:	2780      	movs	r7, #128	; 0x80
   17326:	043f      	lsls	r7, r7, #16
   17328:	4339      	orrs	r1, r7
   1732a:	2b38      	cmp	r3, #56	; 0x38
   1732c:	dc00      	bgt.n	17330 <__aeabi_dsub+0x1b4>
   1732e:	e0fd      	b.n	1752c <__aeabi_dsub+0x3b0>
   17330:	430a      	orrs	r2, r1
   17332:	0017      	movs	r7, r2
   17334:	2100      	movs	r1, #0
   17336:	1e7a      	subs	r2, r7, #1
   17338:	4197      	sbcs	r7, r2
   1733a:	4457      	add	r7, sl
   1733c:	4557      	cmp	r7, sl
   1733e:	4180      	sbcs	r0, r0
   17340:	1909      	adds	r1, r1, r4
   17342:	4244      	negs	r4, r0
   17344:	190c      	adds	r4, r1, r4
   17346:	0223      	lsls	r3, r4, #8
   17348:	d53a      	bpl.n	173c0 <__aeabi_dsub+0x244>
   1734a:	4b5d      	ldr	r3, [pc, #372]	; (174c0 <__aeabi_dsub+0x344>)
   1734c:	3601      	adds	r6, #1
   1734e:	429e      	cmp	r6, r3
   17350:	d100      	bne.n	17354 <__aeabi_dsub+0x1d8>
   17352:	e14b      	b.n	175ec <__aeabi_dsub+0x470>
   17354:	2201      	movs	r2, #1
   17356:	4b5b      	ldr	r3, [pc, #364]	; (174c4 <__aeabi_dsub+0x348>)
   17358:	401c      	ands	r4, r3
   1735a:	087b      	lsrs	r3, r7, #1
   1735c:	4017      	ands	r7, r2
   1735e:	431f      	orrs	r7, r3
   17360:	07e2      	lsls	r2, r4, #31
   17362:	4317      	orrs	r7, r2
   17364:	0864      	lsrs	r4, r4, #1
   17366:	e78f      	b.n	17288 <__aeabi_dsub+0x10c>
   17368:	0008      	movs	r0, r1
   1736a:	4310      	orrs	r0, r2
   1736c:	d000      	beq.n	17370 <__aeabi_dsub+0x1f4>
   1736e:	e724      	b.n	171ba <__aeabi_dsub+0x3e>
   17370:	e721      	b.n	171b6 <__aeabi_dsub+0x3a>
   17372:	0023      	movs	r3, r4
   17374:	433b      	orrs	r3, r7
   17376:	d100      	bne.n	1737a <__aeabi_dsub+0x1fe>
   17378:	e1b9      	b.n	176ee <__aeabi_dsub+0x572>
   1737a:	2280      	movs	r2, #128	; 0x80
   1737c:	0312      	lsls	r2, r2, #12
   1737e:	4314      	orrs	r4, r2
   17380:	0324      	lsls	r4, r4, #12
   17382:	0b24      	lsrs	r4, r4, #12
   17384:	e79f      	b.n	172c6 <__aeabi_dsub+0x14a>
   17386:	002e      	movs	r6, r5
   17388:	e77e      	b.n	17288 <__aeabi_dsub+0x10c>
   1738a:	0008      	movs	r0, r1
   1738c:	4310      	orrs	r0, r2
   1738e:	d100      	bne.n	17392 <__aeabi_dsub+0x216>
   17390:	e0ca      	b.n	17528 <__aeabi_dsub+0x3ac>
   17392:	1e58      	subs	r0, r3, #1
   17394:	4684      	mov	ip, r0
   17396:	2800      	cmp	r0, #0
   17398:	d000      	beq.n	1739c <__aeabi_dsub+0x220>
   1739a:	e0e7      	b.n	1756c <__aeabi_dsub+0x3f0>
   1739c:	4452      	add	r2, sl
   1739e:	4552      	cmp	r2, sl
   173a0:	4180      	sbcs	r0, r0
   173a2:	1864      	adds	r4, r4, r1
   173a4:	4240      	negs	r0, r0
   173a6:	1824      	adds	r4, r4, r0
   173a8:	0017      	movs	r7, r2
   173aa:	2601      	movs	r6, #1
   173ac:	0223      	lsls	r3, r4, #8
   173ae:	d507      	bpl.n	173c0 <__aeabi_dsub+0x244>
   173b0:	2602      	movs	r6, #2
   173b2:	e7cf      	b.n	17354 <__aeabi_dsub+0x1d8>
   173b4:	4664      	mov	r4, ip
   173b6:	432c      	orrs	r4, r5
   173b8:	d100      	bne.n	173bc <__aeabi_dsub+0x240>
   173ba:	e1b3      	b.n	17724 <__aeabi_dsub+0x5a8>
   173bc:	002c      	movs	r4, r5
   173be:	4667      	mov	r7, ip
   173c0:	077b      	lsls	r3, r7, #29
   173c2:	d000      	beq.n	173c6 <__aeabi_dsub+0x24a>
   173c4:	e762      	b.n	1728c <__aeabi_dsub+0x110>
   173c6:	0763      	lsls	r3, r4, #29
   173c8:	08ff      	lsrs	r7, r7, #3
   173ca:	431f      	orrs	r7, r3
   173cc:	2501      	movs	r5, #1
   173ce:	4643      	mov	r3, r8
   173d0:	08e4      	lsrs	r4, r4, #3
   173d2:	401d      	ands	r5, r3
   173d4:	e793      	b.n	172fe <__aeabi_dsub+0x182>
   173d6:	2d00      	cmp	r5, #0
   173d8:	d178      	bne.n	174cc <__aeabi_dsub+0x350>
   173da:	1c75      	adds	r5, r6, #1
   173dc:	056d      	lsls	r5, r5, #21
   173de:	0d6d      	lsrs	r5, r5, #21
   173e0:	2d01      	cmp	r5, #1
   173e2:	dc00      	bgt.n	173e6 <__aeabi_dsub+0x26a>
   173e4:	e0f2      	b.n	175cc <__aeabi_dsub+0x450>
   173e6:	4650      	mov	r0, sl
   173e8:	1a80      	subs	r0, r0, r2
   173ea:	4582      	cmp	sl, r0
   173ec:	41bf      	sbcs	r7, r7
   173ee:	1a65      	subs	r5, r4, r1
   173f0:	427f      	negs	r7, r7
   173f2:	1bed      	subs	r5, r5, r7
   173f4:	4684      	mov	ip, r0
   173f6:	0228      	lsls	r0, r5, #8
   173f8:	d400      	bmi.n	173fc <__aeabi_dsub+0x280>
   173fa:	e08c      	b.n	17516 <__aeabi_dsub+0x39a>
   173fc:	4650      	mov	r0, sl
   173fe:	1a17      	subs	r7, r2, r0
   17400:	42ba      	cmp	r2, r7
   17402:	4192      	sbcs	r2, r2
   17404:	1b0c      	subs	r4, r1, r4
   17406:	4255      	negs	r5, r2
   17408:	1b65      	subs	r5, r4, r5
   1740a:	4698      	mov	r8, r3
   1740c:	e714      	b.n	17238 <__aeabi_dsub+0xbc>
   1740e:	2501      	movs	r5, #1
   17410:	4643      	mov	r3, r8
   17412:	2400      	movs	r4, #0
   17414:	401d      	ands	r5, r3
   17416:	2700      	movs	r7, #0
   17418:	e755      	b.n	172c6 <__aeabi_dsub+0x14a>
   1741a:	4c2a      	ldr	r4, [pc, #168]	; (174c4 <__aeabi_dsub+0x348>)
   1741c:	1af6      	subs	r6, r6, r3
   1741e:	402c      	ands	r4, r5
   17420:	e732      	b.n	17288 <__aeabi_dsub+0x10c>
   17422:	003d      	movs	r5, r7
   17424:	3828      	subs	r0, #40	; 0x28
   17426:	4085      	lsls	r5, r0
   17428:	2700      	movs	r7, #0
   1742a:	e717      	b.n	1725c <__aeabi_dsub+0xe0>
   1742c:	0038      	movs	r0, r7
   1742e:	f000 fadb 	bl	179e8 <__clzsi2>
   17432:	3020      	adds	r0, #32
   17434:	e706      	b.n	17244 <__aeabi_dsub+0xc8>
   17436:	430a      	orrs	r2, r1
   17438:	0017      	movs	r7, r2
   1743a:	2100      	movs	r1, #0
   1743c:	1e7a      	subs	r2, r7, #1
   1743e:	4197      	sbcs	r7, r2
   17440:	e6ee      	b.n	17220 <__aeabi_dsub+0xa4>
   17442:	2b00      	cmp	r3, #0
   17444:	d000      	beq.n	17448 <__aeabi_dsub+0x2cc>
   17446:	e0e5      	b.n	17614 <__aeabi_dsub+0x498>
   17448:	1c73      	adds	r3, r6, #1
   1744a:	469c      	mov	ip, r3
   1744c:	055b      	lsls	r3, r3, #21
   1744e:	0d5b      	lsrs	r3, r3, #21
   17450:	2b01      	cmp	r3, #1
   17452:	dc00      	bgt.n	17456 <__aeabi_dsub+0x2da>
   17454:	e09f      	b.n	17596 <__aeabi_dsub+0x41a>
   17456:	4b1a      	ldr	r3, [pc, #104]	; (174c0 <__aeabi_dsub+0x344>)
   17458:	459c      	cmp	ip, r3
   1745a:	d100      	bne.n	1745e <__aeabi_dsub+0x2e2>
   1745c:	e0c5      	b.n	175ea <__aeabi_dsub+0x46e>
   1745e:	4452      	add	r2, sl
   17460:	4552      	cmp	r2, sl
   17462:	4180      	sbcs	r0, r0
   17464:	1864      	adds	r4, r4, r1
   17466:	4240      	negs	r0, r0
   17468:	1824      	adds	r4, r4, r0
   1746a:	07e7      	lsls	r7, r4, #31
   1746c:	0852      	lsrs	r2, r2, #1
   1746e:	4317      	orrs	r7, r2
   17470:	0864      	lsrs	r4, r4, #1
   17472:	4666      	mov	r6, ip
   17474:	e708      	b.n	17288 <__aeabi_dsub+0x10c>
   17476:	4812      	ldr	r0, [pc, #72]	; (174c0 <__aeabi_dsub+0x344>)
   17478:	4285      	cmp	r5, r0
   1747a:	d100      	bne.n	1747e <__aeabi_dsub+0x302>
   1747c:	e085      	b.n	1758a <__aeabi_dsub+0x40e>
   1747e:	001d      	movs	r5, r3
   17480:	e6bc      	b.n	171fc <__aeabi_dsub+0x80>
   17482:	0029      	movs	r1, r5
   17484:	3e1f      	subs	r6, #31
   17486:	40f1      	lsrs	r1, r6
   17488:	2b20      	cmp	r3, #32
   1748a:	d100      	bne.n	1748e <__aeabi_dsub+0x312>
   1748c:	e07f      	b.n	1758e <__aeabi_dsub+0x412>
   1748e:	2240      	movs	r2, #64	; 0x40
   17490:	1ad3      	subs	r3, r2, r3
   17492:	409d      	lsls	r5, r3
   17494:	432f      	orrs	r7, r5
   17496:	1e7d      	subs	r5, r7, #1
   17498:	41af      	sbcs	r7, r5
   1749a:	2400      	movs	r4, #0
   1749c:	430f      	orrs	r7, r1
   1749e:	2600      	movs	r6, #0
   174a0:	e78e      	b.n	173c0 <__aeabi_dsub+0x244>
   174a2:	002b      	movs	r3, r5
   174a4:	000f      	movs	r7, r1
   174a6:	3b20      	subs	r3, #32
   174a8:	40df      	lsrs	r7, r3
   174aa:	2d20      	cmp	r5, #32
   174ac:	d071      	beq.n	17592 <__aeabi_dsub+0x416>
   174ae:	2340      	movs	r3, #64	; 0x40
   174b0:	1b5d      	subs	r5, r3, r5
   174b2:	40a9      	lsls	r1, r5
   174b4:	430a      	orrs	r2, r1
   174b6:	1e51      	subs	r1, r2, #1
   174b8:	418a      	sbcs	r2, r1
   174ba:	2100      	movs	r1, #0
   174bc:	4317      	orrs	r7, r2
   174be:	e6af      	b.n	17220 <__aeabi_dsub+0xa4>
   174c0:	000007ff 	.word	0x000007ff
   174c4:	ff7fffff 	.word	0xff7fffff
   174c8:	800fffff 	.word	0x800fffff
   174cc:	2e00      	cmp	r6, #0
   174ce:	d03e      	beq.n	1754e <__aeabi_dsub+0x3d2>
   174d0:	4eb3      	ldr	r6, [pc, #716]	; (177a0 <__aeabi_dsub+0x624>)
   174d2:	45b4      	cmp	ip, r6
   174d4:	d045      	beq.n	17562 <__aeabi_dsub+0x3e6>
   174d6:	2680      	movs	r6, #128	; 0x80
   174d8:	0436      	lsls	r6, r6, #16
   174da:	426d      	negs	r5, r5
   174dc:	4334      	orrs	r4, r6
   174de:	2d38      	cmp	r5, #56	; 0x38
   174e0:	dd00      	ble.n	174e4 <__aeabi_dsub+0x368>
   174e2:	e0a8      	b.n	17636 <__aeabi_dsub+0x4ba>
   174e4:	2d1f      	cmp	r5, #31
   174e6:	dd00      	ble.n	174ea <__aeabi_dsub+0x36e>
   174e8:	e11f      	b.n	1772a <__aeabi_dsub+0x5ae>
   174ea:	2620      	movs	r6, #32
   174ec:	0027      	movs	r7, r4
   174ee:	4650      	mov	r0, sl
   174f0:	1b76      	subs	r6, r6, r5
   174f2:	40b7      	lsls	r7, r6
   174f4:	40e8      	lsrs	r0, r5
   174f6:	4307      	orrs	r7, r0
   174f8:	4650      	mov	r0, sl
   174fa:	40b0      	lsls	r0, r6
   174fc:	1e46      	subs	r6, r0, #1
   174fe:	41b0      	sbcs	r0, r6
   17500:	40ec      	lsrs	r4, r5
   17502:	4338      	orrs	r0, r7
   17504:	1a17      	subs	r7, r2, r0
   17506:	42ba      	cmp	r2, r7
   17508:	4192      	sbcs	r2, r2
   1750a:	1b0c      	subs	r4, r1, r4
   1750c:	4252      	negs	r2, r2
   1750e:	1aa4      	subs	r4, r4, r2
   17510:	4666      	mov	r6, ip
   17512:	4698      	mov	r8, r3
   17514:	e68b      	b.n	1722e <__aeabi_dsub+0xb2>
   17516:	4664      	mov	r4, ip
   17518:	4667      	mov	r7, ip
   1751a:	432c      	orrs	r4, r5
   1751c:	d000      	beq.n	17520 <__aeabi_dsub+0x3a4>
   1751e:	e68b      	b.n	17238 <__aeabi_dsub+0xbc>
   17520:	2500      	movs	r5, #0
   17522:	2600      	movs	r6, #0
   17524:	2700      	movs	r7, #0
   17526:	e6ea      	b.n	172fe <__aeabi_dsub+0x182>
   17528:	001e      	movs	r6, r3
   1752a:	e6ad      	b.n	17288 <__aeabi_dsub+0x10c>
   1752c:	2b1f      	cmp	r3, #31
   1752e:	dc60      	bgt.n	175f2 <__aeabi_dsub+0x476>
   17530:	2720      	movs	r7, #32
   17532:	1af8      	subs	r0, r7, r3
   17534:	000f      	movs	r7, r1
   17536:	4684      	mov	ip, r0
   17538:	4087      	lsls	r7, r0
   1753a:	0010      	movs	r0, r2
   1753c:	40d8      	lsrs	r0, r3
   1753e:	4307      	orrs	r7, r0
   17540:	4660      	mov	r0, ip
   17542:	4082      	lsls	r2, r0
   17544:	1e50      	subs	r0, r2, #1
   17546:	4182      	sbcs	r2, r0
   17548:	40d9      	lsrs	r1, r3
   1754a:	4317      	orrs	r7, r2
   1754c:	e6f5      	b.n	1733a <__aeabi_dsub+0x1be>
   1754e:	0026      	movs	r6, r4
   17550:	4650      	mov	r0, sl
   17552:	4306      	orrs	r6, r0
   17554:	d005      	beq.n	17562 <__aeabi_dsub+0x3e6>
   17556:	43ed      	mvns	r5, r5
   17558:	2d00      	cmp	r5, #0
   1755a:	d0d3      	beq.n	17504 <__aeabi_dsub+0x388>
   1755c:	4e90      	ldr	r6, [pc, #576]	; (177a0 <__aeabi_dsub+0x624>)
   1755e:	45b4      	cmp	ip, r6
   17560:	d1bd      	bne.n	174de <__aeabi_dsub+0x362>
   17562:	000c      	movs	r4, r1
   17564:	0017      	movs	r7, r2
   17566:	4666      	mov	r6, ip
   17568:	4698      	mov	r8, r3
   1756a:	e68d      	b.n	17288 <__aeabi_dsub+0x10c>
   1756c:	488c      	ldr	r0, [pc, #560]	; (177a0 <__aeabi_dsub+0x624>)
   1756e:	4283      	cmp	r3, r0
   17570:	d00b      	beq.n	1758a <__aeabi_dsub+0x40e>
   17572:	4663      	mov	r3, ip
   17574:	e6d9      	b.n	1732a <__aeabi_dsub+0x1ae>
   17576:	2d00      	cmp	r5, #0
   17578:	d000      	beq.n	1757c <__aeabi_dsub+0x400>
   1757a:	e096      	b.n	176aa <__aeabi_dsub+0x52e>
   1757c:	0008      	movs	r0, r1
   1757e:	4310      	orrs	r0, r2
   17580:	d100      	bne.n	17584 <__aeabi_dsub+0x408>
   17582:	e0e2      	b.n	1774a <__aeabi_dsub+0x5ce>
   17584:	000c      	movs	r4, r1
   17586:	0017      	movs	r7, r2
   17588:	4698      	mov	r8, r3
   1758a:	4e85      	ldr	r6, [pc, #532]	; (177a0 <__aeabi_dsub+0x624>)
   1758c:	e67c      	b.n	17288 <__aeabi_dsub+0x10c>
   1758e:	2500      	movs	r5, #0
   17590:	e780      	b.n	17494 <__aeabi_dsub+0x318>
   17592:	2100      	movs	r1, #0
   17594:	e78e      	b.n	174b4 <__aeabi_dsub+0x338>
   17596:	0023      	movs	r3, r4
   17598:	4650      	mov	r0, sl
   1759a:	4303      	orrs	r3, r0
   1759c:	2e00      	cmp	r6, #0
   1759e:	d000      	beq.n	175a2 <__aeabi_dsub+0x426>
   175a0:	e0a8      	b.n	176f4 <__aeabi_dsub+0x578>
   175a2:	2b00      	cmp	r3, #0
   175a4:	d100      	bne.n	175a8 <__aeabi_dsub+0x42c>
   175a6:	e0de      	b.n	17766 <__aeabi_dsub+0x5ea>
   175a8:	000b      	movs	r3, r1
   175aa:	4313      	orrs	r3, r2
   175ac:	d100      	bne.n	175b0 <__aeabi_dsub+0x434>
   175ae:	e66b      	b.n	17288 <__aeabi_dsub+0x10c>
   175b0:	4452      	add	r2, sl
   175b2:	4552      	cmp	r2, sl
   175b4:	4180      	sbcs	r0, r0
   175b6:	1864      	adds	r4, r4, r1
   175b8:	4240      	negs	r0, r0
   175ba:	1824      	adds	r4, r4, r0
   175bc:	0017      	movs	r7, r2
   175be:	0223      	lsls	r3, r4, #8
   175c0:	d400      	bmi.n	175c4 <__aeabi_dsub+0x448>
   175c2:	e6fd      	b.n	173c0 <__aeabi_dsub+0x244>
   175c4:	4b77      	ldr	r3, [pc, #476]	; (177a4 <__aeabi_dsub+0x628>)
   175c6:	4666      	mov	r6, ip
   175c8:	401c      	ands	r4, r3
   175ca:	e65d      	b.n	17288 <__aeabi_dsub+0x10c>
   175cc:	0025      	movs	r5, r4
   175ce:	4650      	mov	r0, sl
   175d0:	4305      	orrs	r5, r0
   175d2:	2e00      	cmp	r6, #0
   175d4:	d1cf      	bne.n	17576 <__aeabi_dsub+0x3fa>
   175d6:	2d00      	cmp	r5, #0
   175d8:	d14f      	bne.n	1767a <__aeabi_dsub+0x4fe>
   175da:	000c      	movs	r4, r1
   175dc:	4314      	orrs	r4, r2
   175de:	d100      	bne.n	175e2 <__aeabi_dsub+0x466>
   175e0:	e0a0      	b.n	17724 <__aeabi_dsub+0x5a8>
   175e2:	000c      	movs	r4, r1
   175e4:	0017      	movs	r7, r2
   175e6:	4698      	mov	r8, r3
   175e8:	e64e      	b.n	17288 <__aeabi_dsub+0x10c>
   175ea:	4666      	mov	r6, ip
   175ec:	2400      	movs	r4, #0
   175ee:	2700      	movs	r7, #0
   175f0:	e685      	b.n	172fe <__aeabi_dsub+0x182>
   175f2:	001f      	movs	r7, r3
   175f4:	0008      	movs	r0, r1
   175f6:	3f20      	subs	r7, #32
   175f8:	40f8      	lsrs	r0, r7
   175fa:	0007      	movs	r7, r0
   175fc:	2b20      	cmp	r3, #32
   175fe:	d100      	bne.n	17602 <__aeabi_dsub+0x486>
   17600:	e08e      	b.n	17720 <__aeabi_dsub+0x5a4>
   17602:	2040      	movs	r0, #64	; 0x40
   17604:	1ac3      	subs	r3, r0, r3
   17606:	4099      	lsls	r1, r3
   17608:	430a      	orrs	r2, r1
   1760a:	1e51      	subs	r1, r2, #1
   1760c:	418a      	sbcs	r2, r1
   1760e:	2100      	movs	r1, #0
   17610:	4317      	orrs	r7, r2
   17612:	e692      	b.n	1733a <__aeabi_dsub+0x1be>
   17614:	2e00      	cmp	r6, #0
   17616:	d114      	bne.n	17642 <__aeabi_dsub+0x4c6>
   17618:	0026      	movs	r6, r4
   1761a:	4650      	mov	r0, sl
   1761c:	4306      	orrs	r6, r0
   1761e:	d062      	beq.n	176e6 <__aeabi_dsub+0x56a>
   17620:	43db      	mvns	r3, r3
   17622:	2b00      	cmp	r3, #0
   17624:	d15c      	bne.n	176e0 <__aeabi_dsub+0x564>
   17626:	1887      	adds	r7, r0, r2
   17628:	4297      	cmp	r7, r2
   1762a:	4192      	sbcs	r2, r2
   1762c:	1864      	adds	r4, r4, r1
   1762e:	4252      	negs	r2, r2
   17630:	18a4      	adds	r4, r4, r2
   17632:	4666      	mov	r6, ip
   17634:	e687      	b.n	17346 <__aeabi_dsub+0x1ca>
   17636:	4650      	mov	r0, sl
   17638:	4320      	orrs	r0, r4
   1763a:	1e44      	subs	r4, r0, #1
   1763c:	41a0      	sbcs	r0, r4
   1763e:	2400      	movs	r4, #0
   17640:	e760      	b.n	17504 <__aeabi_dsub+0x388>
   17642:	4e57      	ldr	r6, [pc, #348]	; (177a0 <__aeabi_dsub+0x624>)
   17644:	45b4      	cmp	ip, r6
   17646:	d04e      	beq.n	176e6 <__aeabi_dsub+0x56a>
   17648:	2680      	movs	r6, #128	; 0x80
   1764a:	0436      	lsls	r6, r6, #16
   1764c:	425b      	negs	r3, r3
   1764e:	4334      	orrs	r4, r6
   17650:	2b38      	cmp	r3, #56	; 0x38
   17652:	dd00      	ble.n	17656 <__aeabi_dsub+0x4da>
   17654:	e07f      	b.n	17756 <__aeabi_dsub+0x5da>
   17656:	2b1f      	cmp	r3, #31
   17658:	dd00      	ble.n	1765c <__aeabi_dsub+0x4e0>
   1765a:	e08b      	b.n	17774 <__aeabi_dsub+0x5f8>
   1765c:	2620      	movs	r6, #32
   1765e:	0027      	movs	r7, r4
   17660:	4650      	mov	r0, sl
   17662:	1af6      	subs	r6, r6, r3
   17664:	40b7      	lsls	r7, r6
   17666:	40d8      	lsrs	r0, r3
   17668:	4307      	orrs	r7, r0
   1766a:	4650      	mov	r0, sl
   1766c:	40b0      	lsls	r0, r6
   1766e:	1e46      	subs	r6, r0, #1
   17670:	41b0      	sbcs	r0, r6
   17672:	4307      	orrs	r7, r0
   17674:	40dc      	lsrs	r4, r3
   17676:	18bf      	adds	r7, r7, r2
   17678:	e7d6      	b.n	17628 <__aeabi_dsub+0x4ac>
   1767a:	000d      	movs	r5, r1
   1767c:	4315      	orrs	r5, r2
   1767e:	d100      	bne.n	17682 <__aeabi_dsub+0x506>
   17680:	e602      	b.n	17288 <__aeabi_dsub+0x10c>
   17682:	4650      	mov	r0, sl
   17684:	1a80      	subs	r0, r0, r2
   17686:	4582      	cmp	sl, r0
   17688:	41bf      	sbcs	r7, r7
   1768a:	1a65      	subs	r5, r4, r1
   1768c:	427f      	negs	r7, r7
   1768e:	1bed      	subs	r5, r5, r7
   17690:	4684      	mov	ip, r0
   17692:	0228      	lsls	r0, r5, #8
   17694:	d400      	bmi.n	17698 <__aeabi_dsub+0x51c>
   17696:	e68d      	b.n	173b4 <__aeabi_dsub+0x238>
   17698:	4650      	mov	r0, sl
   1769a:	1a17      	subs	r7, r2, r0
   1769c:	42ba      	cmp	r2, r7
   1769e:	4192      	sbcs	r2, r2
   176a0:	1b0c      	subs	r4, r1, r4
   176a2:	4252      	negs	r2, r2
   176a4:	1aa4      	subs	r4, r4, r2
   176a6:	4698      	mov	r8, r3
   176a8:	e5ee      	b.n	17288 <__aeabi_dsub+0x10c>
   176aa:	000d      	movs	r5, r1
   176ac:	4315      	orrs	r5, r2
   176ae:	d100      	bne.n	176b2 <__aeabi_dsub+0x536>
   176b0:	e76b      	b.n	1758a <__aeabi_dsub+0x40e>
   176b2:	4650      	mov	r0, sl
   176b4:	0767      	lsls	r7, r4, #29
   176b6:	08c0      	lsrs	r0, r0, #3
   176b8:	4307      	orrs	r7, r0
   176ba:	2080      	movs	r0, #128	; 0x80
   176bc:	08e4      	lsrs	r4, r4, #3
   176be:	0300      	lsls	r0, r0, #12
   176c0:	4204      	tst	r4, r0
   176c2:	d007      	beq.n	176d4 <__aeabi_dsub+0x558>
   176c4:	08cd      	lsrs	r5, r1, #3
   176c6:	4205      	tst	r5, r0
   176c8:	d104      	bne.n	176d4 <__aeabi_dsub+0x558>
   176ca:	002c      	movs	r4, r5
   176cc:	4698      	mov	r8, r3
   176ce:	08d7      	lsrs	r7, r2, #3
   176d0:	0749      	lsls	r1, r1, #29
   176d2:	430f      	orrs	r7, r1
   176d4:	0f7b      	lsrs	r3, r7, #29
   176d6:	00e4      	lsls	r4, r4, #3
   176d8:	431c      	orrs	r4, r3
   176da:	00ff      	lsls	r7, r7, #3
   176dc:	4e30      	ldr	r6, [pc, #192]	; (177a0 <__aeabi_dsub+0x624>)
   176de:	e5d3      	b.n	17288 <__aeabi_dsub+0x10c>
   176e0:	4e2f      	ldr	r6, [pc, #188]	; (177a0 <__aeabi_dsub+0x624>)
   176e2:	45b4      	cmp	ip, r6
   176e4:	d1b4      	bne.n	17650 <__aeabi_dsub+0x4d4>
   176e6:	000c      	movs	r4, r1
   176e8:	0017      	movs	r7, r2
   176ea:	4666      	mov	r6, ip
   176ec:	e5cc      	b.n	17288 <__aeabi_dsub+0x10c>
   176ee:	2700      	movs	r7, #0
   176f0:	2400      	movs	r4, #0
   176f2:	e5e8      	b.n	172c6 <__aeabi_dsub+0x14a>
   176f4:	2b00      	cmp	r3, #0
   176f6:	d039      	beq.n	1776c <__aeabi_dsub+0x5f0>
   176f8:	000b      	movs	r3, r1
   176fa:	4313      	orrs	r3, r2
   176fc:	d100      	bne.n	17700 <__aeabi_dsub+0x584>
   176fe:	e744      	b.n	1758a <__aeabi_dsub+0x40e>
   17700:	08c0      	lsrs	r0, r0, #3
   17702:	0767      	lsls	r7, r4, #29
   17704:	4307      	orrs	r7, r0
   17706:	2080      	movs	r0, #128	; 0x80
   17708:	08e4      	lsrs	r4, r4, #3
   1770a:	0300      	lsls	r0, r0, #12
   1770c:	4204      	tst	r4, r0
   1770e:	d0e1      	beq.n	176d4 <__aeabi_dsub+0x558>
   17710:	08cb      	lsrs	r3, r1, #3
   17712:	4203      	tst	r3, r0
   17714:	d1de      	bne.n	176d4 <__aeabi_dsub+0x558>
   17716:	08d7      	lsrs	r7, r2, #3
   17718:	0749      	lsls	r1, r1, #29
   1771a:	430f      	orrs	r7, r1
   1771c:	001c      	movs	r4, r3
   1771e:	e7d9      	b.n	176d4 <__aeabi_dsub+0x558>
   17720:	2100      	movs	r1, #0
   17722:	e771      	b.n	17608 <__aeabi_dsub+0x48c>
   17724:	2500      	movs	r5, #0
   17726:	2700      	movs	r7, #0
   17728:	e5e9      	b.n	172fe <__aeabi_dsub+0x182>
   1772a:	002e      	movs	r6, r5
   1772c:	0027      	movs	r7, r4
   1772e:	3e20      	subs	r6, #32
   17730:	40f7      	lsrs	r7, r6
   17732:	2d20      	cmp	r5, #32
   17734:	d02f      	beq.n	17796 <__aeabi_dsub+0x61a>
   17736:	2640      	movs	r6, #64	; 0x40
   17738:	1b75      	subs	r5, r6, r5
   1773a:	40ac      	lsls	r4, r5
   1773c:	4650      	mov	r0, sl
   1773e:	4320      	orrs	r0, r4
   17740:	1e44      	subs	r4, r0, #1
   17742:	41a0      	sbcs	r0, r4
   17744:	2400      	movs	r4, #0
   17746:	4338      	orrs	r0, r7
   17748:	e6dc      	b.n	17504 <__aeabi_dsub+0x388>
   1774a:	2480      	movs	r4, #128	; 0x80
   1774c:	2500      	movs	r5, #0
   1774e:	0324      	lsls	r4, r4, #12
   17750:	4e13      	ldr	r6, [pc, #76]	; (177a0 <__aeabi_dsub+0x624>)
   17752:	2700      	movs	r7, #0
   17754:	e5d3      	b.n	172fe <__aeabi_dsub+0x182>
   17756:	4650      	mov	r0, sl
   17758:	4320      	orrs	r0, r4
   1775a:	0007      	movs	r7, r0
   1775c:	1e78      	subs	r0, r7, #1
   1775e:	4187      	sbcs	r7, r0
   17760:	2400      	movs	r4, #0
   17762:	18bf      	adds	r7, r7, r2
   17764:	e760      	b.n	17628 <__aeabi_dsub+0x4ac>
   17766:	000c      	movs	r4, r1
   17768:	0017      	movs	r7, r2
   1776a:	e58d      	b.n	17288 <__aeabi_dsub+0x10c>
   1776c:	000c      	movs	r4, r1
   1776e:	0017      	movs	r7, r2
   17770:	4e0b      	ldr	r6, [pc, #44]	; (177a0 <__aeabi_dsub+0x624>)
   17772:	e589      	b.n	17288 <__aeabi_dsub+0x10c>
   17774:	001e      	movs	r6, r3
   17776:	0027      	movs	r7, r4
   17778:	3e20      	subs	r6, #32
   1777a:	40f7      	lsrs	r7, r6
   1777c:	2b20      	cmp	r3, #32
   1777e:	d00c      	beq.n	1779a <__aeabi_dsub+0x61e>
   17780:	2640      	movs	r6, #64	; 0x40
   17782:	1af3      	subs	r3, r6, r3
   17784:	409c      	lsls	r4, r3
   17786:	4650      	mov	r0, sl
   17788:	4320      	orrs	r0, r4
   1778a:	1e44      	subs	r4, r0, #1
   1778c:	41a0      	sbcs	r0, r4
   1778e:	4307      	orrs	r7, r0
   17790:	2400      	movs	r4, #0
   17792:	18bf      	adds	r7, r7, r2
   17794:	e748      	b.n	17628 <__aeabi_dsub+0x4ac>
   17796:	2400      	movs	r4, #0
   17798:	e7d0      	b.n	1773c <__aeabi_dsub+0x5c0>
   1779a:	2400      	movs	r4, #0
   1779c:	e7f3      	b.n	17786 <__aeabi_dsub+0x60a>
   1779e:	46c0      	nop			; (mov r8, r8)
   177a0:	000007ff 	.word	0x000007ff
   177a4:	ff7fffff 	.word	0xff7fffff

000177a8 <__aeabi_dcmpun>:
   177a8:	b570      	push	{r4, r5, r6, lr}
   177aa:	4e0e      	ldr	r6, [pc, #56]	; (177e4 <__aeabi_dcmpun+0x3c>)
   177ac:	030d      	lsls	r5, r1, #12
   177ae:	031c      	lsls	r4, r3, #12
   177b0:	0049      	lsls	r1, r1, #1
   177b2:	005b      	lsls	r3, r3, #1
   177b4:	0b2d      	lsrs	r5, r5, #12
   177b6:	0d49      	lsrs	r1, r1, #21
   177b8:	0b24      	lsrs	r4, r4, #12
   177ba:	0d5b      	lsrs	r3, r3, #21
   177bc:	42b1      	cmp	r1, r6
   177be:	d004      	beq.n	177ca <__aeabi_dcmpun+0x22>
   177c0:	4908      	ldr	r1, [pc, #32]	; (177e4 <__aeabi_dcmpun+0x3c>)
   177c2:	2000      	movs	r0, #0
   177c4:	428b      	cmp	r3, r1
   177c6:	d008      	beq.n	177da <__aeabi_dcmpun+0x32>
   177c8:	bd70      	pop	{r4, r5, r6, pc}
   177ca:	4305      	orrs	r5, r0
   177cc:	2001      	movs	r0, #1
   177ce:	2d00      	cmp	r5, #0
   177d0:	d1fa      	bne.n	177c8 <__aeabi_dcmpun+0x20>
   177d2:	4904      	ldr	r1, [pc, #16]	; (177e4 <__aeabi_dcmpun+0x3c>)
   177d4:	2000      	movs	r0, #0
   177d6:	428b      	cmp	r3, r1
   177d8:	d1f6      	bne.n	177c8 <__aeabi_dcmpun+0x20>
   177da:	4314      	orrs	r4, r2
   177dc:	0020      	movs	r0, r4
   177de:	1e44      	subs	r4, r0, #1
   177e0:	41a0      	sbcs	r0, r4
   177e2:	e7f1      	b.n	177c8 <__aeabi_dcmpun+0x20>
   177e4:	000007ff 	.word	0x000007ff

000177e8 <__aeabi_d2iz>:
   177e8:	b530      	push	{r4, r5, lr}
   177ea:	4d13      	ldr	r5, [pc, #76]	; (17838 <__aeabi_d2iz+0x50>)
   177ec:	030a      	lsls	r2, r1, #12
   177ee:	004b      	lsls	r3, r1, #1
   177f0:	0b12      	lsrs	r2, r2, #12
   177f2:	0d5b      	lsrs	r3, r3, #21
   177f4:	0fc9      	lsrs	r1, r1, #31
   177f6:	2400      	movs	r4, #0
   177f8:	42ab      	cmp	r3, r5
   177fa:	dd10      	ble.n	1781e <__aeabi_d2iz+0x36>
   177fc:	4c0f      	ldr	r4, [pc, #60]	; (1783c <__aeabi_d2iz+0x54>)
   177fe:	42a3      	cmp	r3, r4
   17800:	dc0f      	bgt.n	17822 <__aeabi_d2iz+0x3a>
   17802:	2480      	movs	r4, #128	; 0x80
   17804:	4d0e      	ldr	r5, [pc, #56]	; (17840 <__aeabi_d2iz+0x58>)
   17806:	0364      	lsls	r4, r4, #13
   17808:	4322      	orrs	r2, r4
   1780a:	1aed      	subs	r5, r5, r3
   1780c:	2d1f      	cmp	r5, #31
   1780e:	dd0b      	ble.n	17828 <__aeabi_d2iz+0x40>
   17810:	480c      	ldr	r0, [pc, #48]	; (17844 <__aeabi_d2iz+0x5c>)
   17812:	1ac3      	subs	r3, r0, r3
   17814:	40da      	lsrs	r2, r3
   17816:	4254      	negs	r4, r2
   17818:	2900      	cmp	r1, #0
   1781a:	d100      	bne.n	1781e <__aeabi_d2iz+0x36>
   1781c:	0014      	movs	r4, r2
   1781e:	0020      	movs	r0, r4
   17820:	bd30      	pop	{r4, r5, pc}
   17822:	4b09      	ldr	r3, [pc, #36]	; (17848 <__aeabi_d2iz+0x60>)
   17824:	18cc      	adds	r4, r1, r3
   17826:	e7fa      	b.n	1781e <__aeabi_d2iz+0x36>
   17828:	4c08      	ldr	r4, [pc, #32]	; (1784c <__aeabi_d2iz+0x64>)
   1782a:	40e8      	lsrs	r0, r5
   1782c:	46a4      	mov	ip, r4
   1782e:	4463      	add	r3, ip
   17830:	409a      	lsls	r2, r3
   17832:	4302      	orrs	r2, r0
   17834:	e7ef      	b.n	17816 <__aeabi_d2iz+0x2e>
   17836:	46c0      	nop			; (mov r8, r8)
   17838:	000003fe 	.word	0x000003fe
   1783c:	0000041d 	.word	0x0000041d
   17840:	00000433 	.word	0x00000433
   17844:	00000413 	.word	0x00000413
   17848:	7fffffff 	.word	0x7fffffff
   1784c:	fffffbed 	.word	0xfffffbed

00017850 <__aeabi_i2d>:
   17850:	b570      	push	{r4, r5, r6, lr}
   17852:	2800      	cmp	r0, #0
   17854:	d030      	beq.n	178b8 <__aeabi_i2d+0x68>
   17856:	17c3      	asrs	r3, r0, #31
   17858:	18c4      	adds	r4, r0, r3
   1785a:	405c      	eors	r4, r3
   1785c:	0fc5      	lsrs	r5, r0, #31
   1785e:	0020      	movs	r0, r4
   17860:	f000 f8c2 	bl	179e8 <__clzsi2>
   17864:	4b17      	ldr	r3, [pc, #92]	; (178c4 <__aeabi_i2d+0x74>)
   17866:	4a18      	ldr	r2, [pc, #96]	; (178c8 <__aeabi_i2d+0x78>)
   17868:	1a1b      	subs	r3, r3, r0
   1786a:	1ad2      	subs	r2, r2, r3
   1786c:	2a1f      	cmp	r2, #31
   1786e:	dd18      	ble.n	178a2 <__aeabi_i2d+0x52>
   17870:	4a16      	ldr	r2, [pc, #88]	; (178cc <__aeabi_i2d+0x7c>)
   17872:	1ad2      	subs	r2, r2, r3
   17874:	4094      	lsls	r4, r2
   17876:	2200      	movs	r2, #0
   17878:	0324      	lsls	r4, r4, #12
   1787a:	055b      	lsls	r3, r3, #21
   1787c:	0b24      	lsrs	r4, r4, #12
   1787e:	0d5b      	lsrs	r3, r3, #21
   17880:	2100      	movs	r1, #0
   17882:	0010      	movs	r0, r2
   17884:	0324      	lsls	r4, r4, #12
   17886:	0d0a      	lsrs	r2, r1, #20
   17888:	0b24      	lsrs	r4, r4, #12
   1788a:	0512      	lsls	r2, r2, #20
   1788c:	4322      	orrs	r2, r4
   1788e:	4c10      	ldr	r4, [pc, #64]	; (178d0 <__aeabi_i2d+0x80>)
   17890:	051b      	lsls	r3, r3, #20
   17892:	4022      	ands	r2, r4
   17894:	4313      	orrs	r3, r2
   17896:	005b      	lsls	r3, r3, #1
   17898:	07ed      	lsls	r5, r5, #31
   1789a:	085b      	lsrs	r3, r3, #1
   1789c:	432b      	orrs	r3, r5
   1789e:	0019      	movs	r1, r3
   178a0:	bd70      	pop	{r4, r5, r6, pc}
   178a2:	0021      	movs	r1, r4
   178a4:	4091      	lsls	r1, r2
   178a6:	000a      	movs	r2, r1
   178a8:	210b      	movs	r1, #11
   178aa:	1a08      	subs	r0, r1, r0
   178ac:	40c4      	lsrs	r4, r0
   178ae:	055b      	lsls	r3, r3, #21
   178b0:	0324      	lsls	r4, r4, #12
   178b2:	0b24      	lsrs	r4, r4, #12
   178b4:	0d5b      	lsrs	r3, r3, #21
   178b6:	e7e3      	b.n	17880 <__aeabi_i2d+0x30>
   178b8:	2500      	movs	r5, #0
   178ba:	2300      	movs	r3, #0
   178bc:	2400      	movs	r4, #0
   178be:	2200      	movs	r2, #0
   178c0:	e7de      	b.n	17880 <__aeabi_i2d+0x30>
   178c2:	46c0      	nop			; (mov r8, r8)
   178c4:	0000041e 	.word	0x0000041e
   178c8:	00000433 	.word	0x00000433
   178cc:	00000413 	.word	0x00000413
   178d0:	800fffff 	.word	0x800fffff

000178d4 <__aeabi_ui2d>:
   178d4:	b510      	push	{r4, lr}
   178d6:	1e04      	subs	r4, r0, #0
   178d8:	d028      	beq.n	1792c <__aeabi_ui2d+0x58>
   178da:	f000 f885 	bl	179e8 <__clzsi2>
   178de:	4b15      	ldr	r3, [pc, #84]	; (17934 <__aeabi_ui2d+0x60>)
   178e0:	4a15      	ldr	r2, [pc, #84]	; (17938 <__aeabi_ui2d+0x64>)
   178e2:	1a1b      	subs	r3, r3, r0
   178e4:	1ad2      	subs	r2, r2, r3
   178e6:	2a1f      	cmp	r2, #31
   178e8:	dd15      	ble.n	17916 <__aeabi_ui2d+0x42>
   178ea:	4a14      	ldr	r2, [pc, #80]	; (1793c <__aeabi_ui2d+0x68>)
   178ec:	1ad2      	subs	r2, r2, r3
   178ee:	4094      	lsls	r4, r2
   178f0:	2200      	movs	r2, #0
   178f2:	0324      	lsls	r4, r4, #12
   178f4:	055b      	lsls	r3, r3, #21
   178f6:	0b24      	lsrs	r4, r4, #12
   178f8:	0d5b      	lsrs	r3, r3, #21
   178fa:	2100      	movs	r1, #0
   178fc:	0010      	movs	r0, r2
   178fe:	0324      	lsls	r4, r4, #12
   17900:	0d0a      	lsrs	r2, r1, #20
   17902:	0b24      	lsrs	r4, r4, #12
   17904:	0512      	lsls	r2, r2, #20
   17906:	4322      	orrs	r2, r4
   17908:	4c0d      	ldr	r4, [pc, #52]	; (17940 <__aeabi_ui2d+0x6c>)
   1790a:	051b      	lsls	r3, r3, #20
   1790c:	4022      	ands	r2, r4
   1790e:	4313      	orrs	r3, r2
   17910:	005b      	lsls	r3, r3, #1
   17912:	0859      	lsrs	r1, r3, #1
   17914:	bd10      	pop	{r4, pc}
   17916:	0021      	movs	r1, r4
   17918:	4091      	lsls	r1, r2
   1791a:	000a      	movs	r2, r1
   1791c:	210b      	movs	r1, #11
   1791e:	1a08      	subs	r0, r1, r0
   17920:	40c4      	lsrs	r4, r0
   17922:	055b      	lsls	r3, r3, #21
   17924:	0324      	lsls	r4, r4, #12
   17926:	0b24      	lsrs	r4, r4, #12
   17928:	0d5b      	lsrs	r3, r3, #21
   1792a:	e7e6      	b.n	178fa <__aeabi_ui2d+0x26>
   1792c:	2300      	movs	r3, #0
   1792e:	2400      	movs	r4, #0
   17930:	2200      	movs	r2, #0
   17932:	e7e2      	b.n	178fa <__aeabi_ui2d+0x26>
   17934:	0000041e 	.word	0x0000041e
   17938:	00000433 	.word	0x00000433
   1793c:	00000413 	.word	0x00000413
   17940:	800fffff 	.word	0x800fffff

00017944 <__aeabi_f2d>:
   17944:	0041      	lsls	r1, r0, #1
   17946:	0e09      	lsrs	r1, r1, #24
   17948:	1c4b      	adds	r3, r1, #1
   1794a:	b570      	push	{r4, r5, r6, lr}
   1794c:	b2db      	uxtb	r3, r3
   1794e:	0246      	lsls	r6, r0, #9
   17950:	0a75      	lsrs	r5, r6, #9
   17952:	0fc4      	lsrs	r4, r0, #31
   17954:	2b01      	cmp	r3, #1
   17956:	dd14      	ble.n	17982 <__aeabi_f2d+0x3e>
   17958:	23e0      	movs	r3, #224	; 0xe0
   1795a:	009b      	lsls	r3, r3, #2
   1795c:	076d      	lsls	r5, r5, #29
   1795e:	0b36      	lsrs	r6, r6, #12
   17960:	18cb      	adds	r3, r1, r3
   17962:	2100      	movs	r1, #0
   17964:	0d0a      	lsrs	r2, r1, #20
   17966:	0028      	movs	r0, r5
   17968:	0512      	lsls	r2, r2, #20
   1796a:	4d1c      	ldr	r5, [pc, #112]	; (179dc <__aeabi_f2d+0x98>)
   1796c:	4332      	orrs	r2, r6
   1796e:	055b      	lsls	r3, r3, #21
   17970:	402a      	ands	r2, r5
   17972:	085b      	lsrs	r3, r3, #1
   17974:	4313      	orrs	r3, r2
   17976:	005b      	lsls	r3, r3, #1
   17978:	07e4      	lsls	r4, r4, #31
   1797a:	085b      	lsrs	r3, r3, #1
   1797c:	4323      	orrs	r3, r4
   1797e:	0019      	movs	r1, r3
   17980:	bd70      	pop	{r4, r5, r6, pc}
   17982:	2900      	cmp	r1, #0
   17984:	d114      	bne.n	179b0 <__aeabi_f2d+0x6c>
   17986:	2d00      	cmp	r5, #0
   17988:	d01e      	beq.n	179c8 <__aeabi_f2d+0x84>
   1798a:	0028      	movs	r0, r5
   1798c:	f000 f82c 	bl	179e8 <__clzsi2>
   17990:	280a      	cmp	r0, #10
   17992:	dc1c      	bgt.n	179ce <__aeabi_f2d+0x8a>
   17994:	230b      	movs	r3, #11
   17996:	002a      	movs	r2, r5
   17998:	1a1b      	subs	r3, r3, r0
   1799a:	40da      	lsrs	r2, r3
   1799c:	0003      	movs	r3, r0
   1799e:	3315      	adds	r3, #21
   179a0:	409d      	lsls	r5, r3
   179a2:	4b0f      	ldr	r3, [pc, #60]	; (179e0 <__aeabi_f2d+0x9c>)
   179a4:	0312      	lsls	r2, r2, #12
   179a6:	1a1b      	subs	r3, r3, r0
   179a8:	055b      	lsls	r3, r3, #21
   179aa:	0b16      	lsrs	r6, r2, #12
   179ac:	0d5b      	lsrs	r3, r3, #21
   179ae:	e7d8      	b.n	17962 <__aeabi_f2d+0x1e>
   179b0:	2d00      	cmp	r5, #0
   179b2:	d006      	beq.n	179c2 <__aeabi_f2d+0x7e>
   179b4:	0b32      	lsrs	r2, r6, #12
   179b6:	2680      	movs	r6, #128	; 0x80
   179b8:	0336      	lsls	r6, r6, #12
   179ba:	076d      	lsls	r5, r5, #29
   179bc:	4316      	orrs	r6, r2
   179be:	4b09      	ldr	r3, [pc, #36]	; (179e4 <__aeabi_f2d+0xa0>)
   179c0:	e7cf      	b.n	17962 <__aeabi_f2d+0x1e>
   179c2:	4b08      	ldr	r3, [pc, #32]	; (179e4 <__aeabi_f2d+0xa0>)
   179c4:	2600      	movs	r6, #0
   179c6:	e7cc      	b.n	17962 <__aeabi_f2d+0x1e>
   179c8:	2300      	movs	r3, #0
   179ca:	2600      	movs	r6, #0
   179cc:	e7c9      	b.n	17962 <__aeabi_f2d+0x1e>
   179ce:	0003      	movs	r3, r0
   179d0:	002a      	movs	r2, r5
   179d2:	3b0b      	subs	r3, #11
   179d4:	409a      	lsls	r2, r3
   179d6:	2500      	movs	r5, #0
   179d8:	e7e3      	b.n	179a2 <__aeabi_f2d+0x5e>
   179da:	46c0      	nop			; (mov r8, r8)
   179dc:	800fffff 	.word	0x800fffff
   179e0:	00000389 	.word	0x00000389
   179e4:	000007ff 	.word	0x000007ff

000179e8 <__clzsi2>:
   179e8:	211c      	movs	r1, #28
   179ea:	2301      	movs	r3, #1
   179ec:	041b      	lsls	r3, r3, #16
   179ee:	4298      	cmp	r0, r3
   179f0:	d301      	bcc.n	179f6 <__clzsi2+0xe>
   179f2:	0c00      	lsrs	r0, r0, #16
   179f4:	3910      	subs	r1, #16
   179f6:	0a1b      	lsrs	r3, r3, #8
   179f8:	4298      	cmp	r0, r3
   179fa:	d301      	bcc.n	17a00 <__clzsi2+0x18>
   179fc:	0a00      	lsrs	r0, r0, #8
   179fe:	3908      	subs	r1, #8
   17a00:	091b      	lsrs	r3, r3, #4
   17a02:	4298      	cmp	r0, r3
   17a04:	d301      	bcc.n	17a0a <__clzsi2+0x22>
   17a06:	0900      	lsrs	r0, r0, #4
   17a08:	3904      	subs	r1, #4
   17a0a:	a202      	add	r2, pc, #8	; (adr r2, 17a14 <__clzsi2+0x2c>)
   17a0c:	5c10      	ldrb	r0, [r2, r0]
   17a0e:	1840      	adds	r0, r0, r1
   17a10:	4770      	bx	lr
   17a12:	46c0      	nop			; (mov r8, r8)
   17a14:	02020304 	.word	0x02020304
   17a18:	01010101 	.word	0x01010101
	...

00017a24 <__clzdi2>:
   17a24:	b510      	push	{r4, lr}
   17a26:	2900      	cmp	r1, #0
   17a28:	d103      	bne.n	17a32 <__clzdi2+0xe>
   17a2a:	f7ff ffdd 	bl	179e8 <__clzsi2>
   17a2e:	3020      	adds	r0, #32
   17a30:	e002      	b.n	17a38 <__clzdi2+0x14>
   17a32:	1c08      	adds	r0, r1, #0
   17a34:	f7ff ffd8 	bl	179e8 <__clzsi2>
   17a38:	bd10      	pop	{r4, pc}
   17a3a:	46c0      	nop			; (mov r8, r8)

00017a3c <atoi>:
   17a3c:	b510      	push	{r4, lr}
   17a3e:	220a      	movs	r2, #10
   17a40:	2100      	movs	r1, #0
   17a42:	f000 fadd 	bl	18000 <strtol>
   17a46:	bd10      	pop	{r4, pc}

00017a48 <calloc>:
   17a48:	b510      	push	{r4, lr}
   17a4a:	4b03      	ldr	r3, [pc, #12]	; (17a58 <calloc+0x10>)
   17a4c:	000a      	movs	r2, r1
   17a4e:	0001      	movs	r1, r0
   17a50:	6818      	ldr	r0, [r3, #0]
   17a52:	f000 f888 	bl	17b66 <_calloc_r>
   17a56:	bd10      	pop	{r4, pc}
   17a58:	2000002c 	.word	0x2000002c

00017a5c <__errno>:
   17a5c:	4b01      	ldr	r3, [pc, #4]	; (17a64 <__errno+0x8>)
   17a5e:	6818      	ldr	r0, [r3, #0]
   17a60:	4770      	bx	lr
   17a62:	46c0      	nop			; (mov r8, r8)
   17a64:	2000002c 	.word	0x2000002c

00017a68 <__libc_init_array>:
   17a68:	b570      	push	{r4, r5, r6, lr}
   17a6a:	2600      	movs	r6, #0
   17a6c:	4d0c      	ldr	r5, [pc, #48]	; (17aa0 <__libc_init_array+0x38>)
   17a6e:	4c0d      	ldr	r4, [pc, #52]	; (17aa4 <__libc_init_array+0x3c>)
   17a70:	1b64      	subs	r4, r4, r5
   17a72:	10a4      	asrs	r4, r4, #2
   17a74:	42a6      	cmp	r6, r4
   17a76:	d109      	bne.n	17a8c <__libc_init_array+0x24>
   17a78:	2600      	movs	r6, #0
   17a7a:	f002 f893 	bl	19ba4 <_init>
   17a7e:	4d0a      	ldr	r5, [pc, #40]	; (17aa8 <__libc_init_array+0x40>)
   17a80:	4c0a      	ldr	r4, [pc, #40]	; (17aac <__libc_init_array+0x44>)
   17a82:	1b64      	subs	r4, r4, r5
   17a84:	10a4      	asrs	r4, r4, #2
   17a86:	42a6      	cmp	r6, r4
   17a88:	d105      	bne.n	17a96 <__libc_init_array+0x2e>
   17a8a:	bd70      	pop	{r4, r5, r6, pc}
   17a8c:	00b3      	lsls	r3, r6, #2
   17a8e:	58eb      	ldr	r3, [r5, r3]
   17a90:	4798      	blx	r3
   17a92:	3601      	adds	r6, #1
   17a94:	e7ee      	b.n	17a74 <__libc_init_array+0xc>
   17a96:	00b3      	lsls	r3, r6, #2
   17a98:	58eb      	ldr	r3, [r5, r3]
   17a9a:	4798      	blx	r3
   17a9c:	3601      	adds	r6, #1
   17a9e:	e7f2      	b.n	17a86 <__libc_init_array+0x1e>
   17aa0:	00019bb0 	.word	0x00019bb0
   17aa4:	00019bb0 	.word	0x00019bb0
   17aa8:	00019bb0 	.word	0x00019bb0
   17aac:	00019bb4 	.word	0x00019bb4

00017ab0 <__locale_ctype_ptr_l>:
   17ab0:	30ec      	adds	r0, #236	; 0xec
   17ab2:	6800      	ldr	r0, [r0, #0]
   17ab4:	4770      	bx	lr
	...

00017ab8 <__locale_ctype_ptr>:
   17ab8:	4b04      	ldr	r3, [pc, #16]	; (17acc <__locale_ctype_ptr+0x14>)
   17aba:	681b      	ldr	r3, [r3, #0]
   17abc:	6a1b      	ldr	r3, [r3, #32]
   17abe:	2b00      	cmp	r3, #0
   17ac0:	d100      	bne.n	17ac4 <__locale_ctype_ptr+0xc>
   17ac2:	4b03      	ldr	r3, [pc, #12]	; (17ad0 <__locale_ctype_ptr+0x18>)
   17ac4:	33ec      	adds	r3, #236	; 0xec
   17ac6:	6818      	ldr	r0, [r3, #0]
   17ac8:	4770      	bx	lr
   17aca:	46c0      	nop			; (mov r8, r8)
   17acc:	2000002c 	.word	0x2000002c
   17ad0:	20000090 	.word	0x20000090

00017ad4 <malloc>:
   17ad4:	b510      	push	{r4, lr}
   17ad6:	4b03      	ldr	r3, [pc, #12]	; (17ae4 <malloc+0x10>)
   17ad8:	0001      	movs	r1, r0
   17ada:	6818      	ldr	r0, [r3, #0]
   17adc:	f000 f89c 	bl	17c18 <_malloc_r>
   17ae0:	bd10      	pop	{r4, pc}
   17ae2:	46c0      	nop			; (mov r8, r8)
   17ae4:	2000002c 	.word	0x2000002c

00017ae8 <free>:
   17ae8:	b510      	push	{r4, lr}
   17aea:	4b03      	ldr	r3, [pc, #12]	; (17af8 <free+0x10>)
   17aec:	0001      	movs	r1, r0
   17aee:	6818      	ldr	r0, [r3, #0]
   17af0:	f000 f848 	bl	17b84 <_free_r>
   17af4:	bd10      	pop	{r4, pc}
   17af6:	46c0      	nop			; (mov r8, r8)
   17af8:	2000002c 	.word	0x2000002c

00017afc <__ascii_mbtowc>:
   17afc:	b082      	sub	sp, #8
   17afe:	2900      	cmp	r1, #0
   17b00:	d100      	bne.n	17b04 <__ascii_mbtowc+0x8>
   17b02:	a901      	add	r1, sp, #4
   17b04:	1e10      	subs	r0, r2, #0
   17b06:	d006      	beq.n	17b16 <__ascii_mbtowc+0x1a>
   17b08:	2b00      	cmp	r3, #0
   17b0a:	d006      	beq.n	17b1a <__ascii_mbtowc+0x1e>
   17b0c:	7813      	ldrb	r3, [r2, #0]
   17b0e:	600b      	str	r3, [r1, #0]
   17b10:	7810      	ldrb	r0, [r2, #0]
   17b12:	1e43      	subs	r3, r0, #1
   17b14:	4198      	sbcs	r0, r3
   17b16:	b002      	add	sp, #8
   17b18:	4770      	bx	lr
   17b1a:	2002      	movs	r0, #2
   17b1c:	4240      	negs	r0, r0
   17b1e:	e7fa      	b.n	17b16 <__ascii_mbtowc+0x1a>

00017b20 <memcpy>:
   17b20:	2300      	movs	r3, #0
   17b22:	b510      	push	{r4, lr}
   17b24:	429a      	cmp	r2, r3
   17b26:	d100      	bne.n	17b2a <memcpy+0xa>
   17b28:	bd10      	pop	{r4, pc}
   17b2a:	5ccc      	ldrb	r4, [r1, r3]
   17b2c:	54c4      	strb	r4, [r0, r3]
   17b2e:	3301      	adds	r3, #1
   17b30:	e7f8      	b.n	17b24 <memcpy+0x4>

00017b32 <memmove>:
   17b32:	b510      	push	{r4, lr}
   17b34:	4288      	cmp	r0, r1
   17b36:	d902      	bls.n	17b3e <memmove+0xc>
   17b38:	188b      	adds	r3, r1, r2
   17b3a:	4298      	cmp	r0, r3
   17b3c:	d308      	bcc.n	17b50 <memmove+0x1e>
   17b3e:	2300      	movs	r3, #0
   17b40:	429a      	cmp	r2, r3
   17b42:	d007      	beq.n	17b54 <memmove+0x22>
   17b44:	5ccc      	ldrb	r4, [r1, r3]
   17b46:	54c4      	strb	r4, [r0, r3]
   17b48:	3301      	adds	r3, #1
   17b4a:	e7f9      	b.n	17b40 <memmove+0xe>
   17b4c:	5c8b      	ldrb	r3, [r1, r2]
   17b4e:	5483      	strb	r3, [r0, r2]
   17b50:	3a01      	subs	r2, #1
   17b52:	d2fb      	bcs.n	17b4c <memmove+0x1a>
   17b54:	bd10      	pop	{r4, pc}

00017b56 <memset>:
   17b56:	0003      	movs	r3, r0
   17b58:	1882      	adds	r2, r0, r2
   17b5a:	4293      	cmp	r3, r2
   17b5c:	d100      	bne.n	17b60 <memset+0xa>
   17b5e:	4770      	bx	lr
   17b60:	7019      	strb	r1, [r3, #0]
   17b62:	3301      	adds	r3, #1
   17b64:	e7f9      	b.n	17b5a <memset+0x4>

00017b66 <_calloc_r>:
   17b66:	434a      	muls	r2, r1
   17b68:	b570      	push	{r4, r5, r6, lr}
   17b6a:	0011      	movs	r1, r2
   17b6c:	0014      	movs	r4, r2
   17b6e:	f000 f853 	bl	17c18 <_malloc_r>
   17b72:	1e05      	subs	r5, r0, #0
   17b74:	d003      	beq.n	17b7e <_calloc_r+0x18>
   17b76:	0022      	movs	r2, r4
   17b78:	2100      	movs	r1, #0
   17b7a:	f7ff ffec 	bl	17b56 <memset>
   17b7e:	0028      	movs	r0, r5
   17b80:	bd70      	pop	{r4, r5, r6, pc}
	...

00017b84 <_free_r>:
   17b84:	b570      	push	{r4, r5, r6, lr}
   17b86:	0005      	movs	r5, r0
   17b88:	2900      	cmp	r1, #0
   17b8a:	d010      	beq.n	17bae <_free_r+0x2a>
   17b8c:	1f0c      	subs	r4, r1, #4
   17b8e:	6823      	ldr	r3, [r4, #0]
   17b90:	2b00      	cmp	r3, #0
   17b92:	da00      	bge.n	17b96 <_free_r+0x12>
   17b94:	18e4      	adds	r4, r4, r3
   17b96:	0028      	movs	r0, r5
   17b98:	f000 fab4 	bl	18104 <__malloc_lock>
   17b9c:	4a1d      	ldr	r2, [pc, #116]	; (17c14 <_free_r+0x90>)
   17b9e:	6813      	ldr	r3, [r2, #0]
   17ba0:	2b00      	cmp	r3, #0
   17ba2:	d105      	bne.n	17bb0 <_free_r+0x2c>
   17ba4:	6063      	str	r3, [r4, #4]
   17ba6:	6014      	str	r4, [r2, #0]
   17ba8:	0028      	movs	r0, r5
   17baa:	f000 faac 	bl	18106 <__malloc_unlock>
   17bae:	bd70      	pop	{r4, r5, r6, pc}
   17bb0:	42a3      	cmp	r3, r4
   17bb2:	d909      	bls.n	17bc8 <_free_r+0x44>
   17bb4:	6821      	ldr	r1, [r4, #0]
   17bb6:	1860      	adds	r0, r4, r1
   17bb8:	4283      	cmp	r3, r0
   17bba:	d1f3      	bne.n	17ba4 <_free_r+0x20>
   17bbc:	6818      	ldr	r0, [r3, #0]
   17bbe:	685b      	ldr	r3, [r3, #4]
   17bc0:	1841      	adds	r1, r0, r1
   17bc2:	6021      	str	r1, [r4, #0]
   17bc4:	e7ee      	b.n	17ba4 <_free_r+0x20>
   17bc6:	0013      	movs	r3, r2
   17bc8:	685a      	ldr	r2, [r3, #4]
   17bca:	2a00      	cmp	r2, #0
   17bcc:	d001      	beq.n	17bd2 <_free_r+0x4e>
   17bce:	42a2      	cmp	r2, r4
   17bd0:	d9f9      	bls.n	17bc6 <_free_r+0x42>
   17bd2:	6819      	ldr	r1, [r3, #0]
   17bd4:	1858      	adds	r0, r3, r1
   17bd6:	42a0      	cmp	r0, r4
   17bd8:	d10b      	bne.n	17bf2 <_free_r+0x6e>
   17bda:	6820      	ldr	r0, [r4, #0]
   17bdc:	1809      	adds	r1, r1, r0
   17bde:	1858      	adds	r0, r3, r1
   17be0:	6019      	str	r1, [r3, #0]
   17be2:	4282      	cmp	r2, r0
   17be4:	d1e0      	bne.n	17ba8 <_free_r+0x24>
   17be6:	6810      	ldr	r0, [r2, #0]
   17be8:	6852      	ldr	r2, [r2, #4]
   17bea:	1841      	adds	r1, r0, r1
   17bec:	6019      	str	r1, [r3, #0]
   17bee:	605a      	str	r2, [r3, #4]
   17bf0:	e7da      	b.n	17ba8 <_free_r+0x24>
   17bf2:	42a0      	cmp	r0, r4
   17bf4:	d902      	bls.n	17bfc <_free_r+0x78>
   17bf6:	230c      	movs	r3, #12
   17bf8:	602b      	str	r3, [r5, #0]
   17bfa:	e7d5      	b.n	17ba8 <_free_r+0x24>
   17bfc:	6821      	ldr	r1, [r4, #0]
   17bfe:	1860      	adds	r0, r4, r1
   17c00:	4282      	cmp	r2, r0
   17c02:	d103      	bne.n	17c0c <_free_r+0x88>
   17c04:	6810      	ldr	r0, [r2, #0]
   17c06:	6852      	ldr	r2, [r2, #4]
   17c08:	1841      	adds	r1, r0, r1
   17c0a:	6021      	str	r1, [r4, #0]
   17c0c:	6062      	str	r2, [r4, #4]
   17c0e:	605c      	str	r4, [r3, #4]
   17c10:	e7ca      	b.n	17ba8 <_free_r+0x24>
   17c12:	46c0      	nop			; (mov r8, r8)
   17c14:	20000504 	.word	0x20000504

00017c18 <_malloc_r>:
   17c18:	2303      	movs	r3, #3
   17c1a:	b570      	push	{r4, r5, r6, lr}
   17c1c:	1ccd      	adds	r5, r1, #3
   17c1e:	439d      	bics	r5, r3
   17c20:	3508      	adds	r5, #8
   17c22:	0006      	movs	r6, r0
   17c24:	2d0c      	cmp	r5, #12
   17c26:	d21e      	bcs.n	17c66 <_malloc_r+0x4e>
   17c28:	250c      	movs	r5, #12
   17c2a:	42a9      	cmp	r1, r5
   17c2c:	d81d      	bhi.n	17c6a <_malloc_r+0x52>
   17c2e:	0030      	movs	r0, r6
   17c30:	f000 fa68 	bl	18104 <__malloc_lock>
   17c34:	4a25      	ldr	r2, [pc, #148]	; (17ccc <_malloc_r+0xb4>)
   17c36:	6814      	ldr	r4, [r2, #0]
   17c38:	0021      	movs	r1, r4
   17c3a:	2900      	cmp	r1, #0
   17c3c:	d119      	bne.n	17c72 <_malloc_r+0x5a>
   17c3e:	4c24      	ldr	r4, [pc, #144]	; (17cd0 <_malloc_r+0xb8>)
   17c40:	6823      	ldr	r3, [r4, #0]
   17c42:	2b00      	cmp	r3, #0
   17c44:	d103      	bne.n	17c4e <_malloc_r+0x36>
   17c46:	0030      	movs	r0, r6
   17c48:	f000 f844 	bl	17cd4 <_sbrk_r>
   17c4c:	6020      	str	r0, [r4, #0]
   17c4e:	0029      	movs	r1, r5
   17c50:	0030      	movs	r0, r6
   17c52:	f000 f83f 	bl	17cd4 <_sbrk_r>
   17c56:	1c43      	adds	r3, r0, #1
   17c58:	d12c      	bne.n	17cb4 <_malloc_r+0x9c>
   17c5a:	230c      	movs	r3, #12
   17c5c:	0030      	movs	r0, r6
   17c5e:	6033      	str	r3, [r6, #0]
   17c60:	f000 fa51 	bl	18106 <__malloc_unlock>
   17c64:	e003      	b.n	17c6e <_malloc_r+0x56>
   17c66:	2d00      	cmp	r5, #0
   17c68:	dadf      	bge.n	17c2a <_malloc_r+0x12>
   17c6a:	230c      	movs	r3, #12
   17c6c:	6033      	str	r3, [r6, #0]
   17c6e:	2000      	movs	r0, #0
   17c70:	bd70      	pop	{r4, r5, r6, pc}
   17c72:	680b      	ldr	r3, [r1, #0]
   17c74:	1b5b      	subs	r3, r3, r5
   17c76:	d41a      	bmi.n	17cae <_malloc_r+0x96>
   17c78:	2b0b      	cmp	r3, #11
   17c7a:	d903      	bls.n	17c84 <_malloc_r+0x6c>
   17c7c:	600b      	str	r3, [r1, #0]
   17c7e:	18cc      	adds	r4, r1, r3
   17c80:	6025      	str	r5, [r4, #0]
   17c82:	e003      	b.n	17c8c <_malloc_r+0x74>
   17c84:	428c      	cmp	r4, r1
   17c86:	d10e      	bne.n	17ca6 <_malloc_r+0x8e>
   17c88:	6863      	ldr	r3, [r4, #4]
   17c8a:	6013      	str	r3, [r2, #0]
   17c8c:	0030      	movs	r0, r6
   17c8e:	f000 fa3a 	bl	18106 <__malloc_unlock>
   17c92:	0020      	movs	r0, r4
   17c94:	2207      	movs	r2, #7
   17c96:	300b      	adds	r0, #11
   17c98:	1d23      	adds	r3, r4, #4
   17c9a:	4390      	bics	r0, r2
   17c9c:	1ac3      	subs	r3, r0, r3
   17c9e:	d0e7      	beq.n	17c70 <_malloc_r+0x58>
   17ca0:	425a      	negs	r2, r3
   17ca2:	50e2      	str	r2, [r4, r3]
   17ca4:	e7e4      	b.n	17c70 <_malloc_r+0x58>
   17ca6:	684b      	ldr	r3, [r1, #4]
   17ca8:	6063      	str	r3, [r4, #4]
   17caa:	000c      	movs	r4, r1
   17cac:	e7ee      	b.n	17c8c <_malloc_r+0x74>
   17cae:	000c      	movs	r4, r1
   17cb0:	6849      	ldr	r1, [r1, #4]
   17cb2:	e7c2      	b.n	17c3a <_malloc_r+0x22>
   17cb4:	2303      	movs	r3, #3
   17cb6:	1cc4      	adds	r4, r0, #3
   17cb8:	439c      	bics	r4, r3
   17cba:	42a0      	cmp	r0, r4
   17cbc:	d0e0      	beq.n	17c80 <_malloc_r+0x68>
   17cbe:	1a21      	subs	r1, r4, r0
   17cc0:	0030      	movs	r0, r6
   17cc2:	f000 f807 	bl	17cd4 <_sbrk_r>
   17cc6:	1c43      	adds	r3, r0, #1
   17cc8:	d1da      	bne.n	17c80 <_malloc_r+0x68>
   17cca:	e7c6      	b.n	17c5a <_malloc_r+0x42>
   17ccc:	20000504 	.word	0x20000504
   17cd0:	20000508 	.word	0x20000508

00017cd4 <_sbrk_r>:
   17cd4:	2300      	movs	r3, #0
   17cd6:	b570      	push	{r4, r5, r6, lr}
   17cd8:	4c06      	ldr	r4, [pc, #24]	; (17cf4 <_sbrk_r+0x20>)
   17cda:	0005      	movs	r5, r0
   17cdc:	0008      	movs	r0, r1
   17cde:	6023      	str	r3, [r4, #0]
   17ce0:	f7fb ff9e 	bl	13c20 <_sbrk>
   17ce4:	1c43      	adds	r3, r0, #1
   17ce6:	d103      	bne.n	17cf0 <_sbrk_r+0x1c>
   17ce8:	6823      	ldr	r3, [r4, #0]
   17cea:	2b00      	cmp	r3, #0
   17cec:	d000      	beq.n	17cf0 <_sbrk_r+0x1c>
   17cee:	602b      	str	r3, [r5, #0]
   17cf0:	bd70      	pop	{r4, r5, r6, pc}
   17cf2:	46c0      	nop			; (mov r8, r8)
   17cf4:	20000928 	.word	0x20000928

00017cf8 <sniprintf>:
   17cf8:	b40c      	push	{r2, r3}
   17cfa:	b530      	push	{r4, r5, lr}
   17cfc:	4b16      	ldr	r3, [pc, #88]	; (17d58 <sniprintf+0x60>)
   17cfe:	b09d      	sub	sp, #116	; 0x74
   17d00:	1e0c      	subs	r4, r1, #0
   17d02:	681d      	ldr	r5, [r3, #0]
   17d04:	da08      	bge.n	17d18 <sniprintf+0x20>
   17d06:	238b      	movs	r3, #139	; 0x8b
   17d08:	2001      	movs	r0, #1
   17d0a:	602b      	str	r3, [r5, #0]
   17d0c:	4240      	negs	r0, r0
   17d0e:	b01d      	add	sp, #116	; 0x74
   17d10:	bc30      	pop	{r4, r5}
   17d12:	bc08      	pop	{r3}
   17d14:	b002      	add	sp, #8
   17d16:	4718      	bx	r3
   17d18:	2382      	movs	r3, #130	; 0x82
   17d1a:	a902      	add	r1, sp, #8
   17d1c:	009b      	lsls	r3, r3, #2
   17d1e:	818b      	strh	r3, [r1, #12]
   17d20:	2300      	movs	r3, #0
   17d22:	9002      	str	r0, [sp, #8]
   17d24:	6108      	str	r0, [r1, #16]
   17d26:	429c      	cmp	r4, r3
   17d28:	d000      	beq.n	17d2c <sniprintf+0x34>
   17d2a:	1e63      	subs	r3, r4, #1
   17d2c:	608b      	str	r3, [r1, #8]
   17d2e:	614b      	str	r3, [r1, #20]
   17d30:	2301      	movs	r3, #1
   17d32:	425b      	negs	r3, r3
   17d34:	81cb      	strh	r3, [r1, #14]
   17d36:	9a20      	ldr	r2, [sp, #128]	; 0x80
   17d38:	ab21      	add	r3, sp, #132	; 0x84
   17d3a:	0028      	movs	r0, r5
   17d3c:	9301      	str	r3, [sp, #4]
   17d3e:	f000 fa45 	bl	181cc <_svfiprintf_r>
   17d42:	1c43      	adds	r3, r0, #1
   17d44:	da01      	bge.n	17d4a <sniprintf+0x52>
   17d46:	238b      	movs	r3, #139	; 0x8b
   17d48:	602b      	str	r3, [r5, #0]
   17d4a:	2c00      	cmp	r4, #0
   17d4c:	d0df      	beq.n	17d0e <sniprintf+0x16>
   17d4e:	2300      	movs	r3, #0
   17d50:	9a02      	ldr	r2, [sp, #8]
   17d52:	7013      	strb	r3, [r2, #0]
   17d54:	e7db      	b.n	17d0e <sniprintf+0x16>
   17d56:	46c0      	nop			; (mov r8, r8)
   17d58:	2000002c 	.word	0x2000002c

00017d5c <siprintf>:
   17d5c:	b40e      	push	{r1, r2, r3}
   17d5e:	b510      	push	{r4, lr}
   17d60:	b09d      	sub	sp, #116	; 0x74
   17d62:	a902      	add	r1, sp, #8
   17d64:	9002      	str	r0, [sp, #8]
   17d66:	6108      	str	r0, [r1, #16]
   17d68:	480b      	ldr	r0, [pc, #44]	; (17d98 <siprintf+0x3c>)
   17d6a:	2482      	movs	r4, #130	; 0x82
   17d6c:	6088      	str	r0, [r1, #8]
   17d6e:	6148      	str	r0, [r1, #20]
   17d70:	2001      	movs	r0, #1
   17d72:	4240      	negs	r0, r0
   17d74:	ab1f      	add	r3, sp, #124	; 0x7c
   17d76:	81c8      	strh	r0, [r1, #14]
   17d78:	4808      	ldr	r0, [pc, #32]	; (17d9c <siprintf+0x40>)
   17d7a:	cb04      	ldmia	r3!, {r2}
   17d7c:	00a4      	lsls	r4, r4, #2
   17d7e:	6800      	ldr	r0, [r0, #0]
   17d80:	9301      	str	r3, [sp, #4]
   17d82:	818c      	strh	r4, [r1, #12]
   17d84:	f000 fa22 	bl	181cc <_svfiprintf_r>
   17d88:	2300      	movs	r3, #0
   17d8a:	9a02      	ldr	r2, [sp, #8]
   17d8c:	7013      	strb	r3, [r2, #0]
   17d8e:	b01d      	add	sp, #116	; 0x74
   17d90:	bc10      	pop	{r4}
   17d92:	bc08      	pop	{r3}
   17d94:	b003      	add	sp, #12
   17d96:	4718      	bx	r3
   17d98:	7fffffff 	.word	0x7fffffff
   17d9c:	2000002c 	.word	0x2000002c

00017da0 <strcat>:
   17da0:	0002      	movs	r2, r0
   17da2:	b510      	push	{r4, lr}
   17da4:	7813      	ldrb	r3, [r2, #0]
   17da6:	2b00      	cmp	r3, #0
   17da8:	d105      	bne.n	17db6 <strcat+0x16>
   17daa:	5ccc      	ldrb	r4, [r1, r3]
   17dac:	54d4      	strb	r4, [r2, r3]
   17dae:	3301      	adds	r3, #1
   17db0:	2c00      	cmp	r4, #0
   17db2:	d1fa      	bne.n	17daa <strcat+0xa>
   17db4:	bd10      	pop	{r4, pc}
   17db6:	3201      	adds	r2, #1
   17db8:	e7f4      	b.n	17da4 <strcat+0x4>

00017dba <strchr>:
   17dba:	b2c9      	uxtb	r1, r1
   17dbc:	7803      	ldrb	r3, [r0, #0]
   17dbe:	2b00      	cmp	r3, #0
   17dc0:	d004      	beq.n	17dcc <strchr+0x12>
   17dc2:	4299      	cmp	r1, r3
   17dc4:	d100      	bne.n	17dc8 <strchr+0xe>
   17dc6:	4770      	bx	lr
   17dc8:	3001      	adds	r0, #1
   17dca:	e7f7      	b.n	17dbc <strchr+0x2>
   17dcc:	424b      	negs	r3, r1
   17dce:	4159      	adcs	r1, r3
   17dd0:	4249      	negs	r1, r1
   17dd2:	4008      	ands	r0, r1
   17dd4:	e7f7      	b.n	17dc6 <strchr+0xc>

00017dd6 <strcpy>:
   17dd6:	1c03      	adds	r3, r0, #0
   17dd8:	780a      	ldrb	r2, [r1, #0]
   17dda:	3101      	adds	r1, #1
   17ddc:	701a      	strb	r2, [r3, #0]
   17dde:	3301      	adds	r3, #1
   17de0:	2a00      	cmp	r2, #0
   17de2:	d1f9      	bne.n	17dd8 <strcpy+0x2>
   17de4:	4770      	bx	lr

00017de6 <strlen>:
   17de6:	2300      	movs	r3, #0
   17de8:	5cc2      	ldrb	r2, [r0, r3]
   17dea:	3301      	adds	r3, #1
   17dec:	2a00      	cmp	r2, #0
   17dee:	d1fb      	bne.n	17de8 <strlen+0x2>
   17df0:	1e58      	subs	r0, r3, #1
   17df2:	4770      	bx	lr

00017df4 <strncmp>:
   17df4:	2300      	movs	r3, #0
   17df6:	b530      	push	{r4, r5, lr}
   17df8:	429a      	cmp	r2, r3
   17dfa:	d00a      	beq.n	17e12 <strncmp+0x1e>
   17dfc:	3a01      	subs	r2, #1
   17dfe:	5cc4      	ldrb	r4, [r0, r3]
   17e00:	5ccd      	ldrb	r5, [r1, r3]
   17e02:	42ac      	cmp	r4, r5
   17e04:	d104      	bne.n	17e10 <strncmp+0x1c>
   17e06:	429a      	cmp	r2, r3
   17e08:	d002      	beq.n	17e10 <strncmp+0x1c>
   17e0a:	3301      	adds	r3, #1
   17e0c:	2c00      	cmp	r4, #0
   17e0e:	d1f6      	bne.n	17dfe <strncmp+0xa>
   17e10:	1b63      	subs	r3, r4, r5
   17e12:	0018      	movs	r0, r3
   17e14:	bd30      	pop	{r4, r5, pc}

00017e16 <strstr>:
   17e16:	b510      	push	{r4, lr}
   17e18:	0002      	movs	r2, r0
   17e1a:	7800      	ldrb	r0, [r0, #0]
   17e1c:	2800      	cmp	r0, #0
   17e1e:	d104      	bne.n	17e2a <strstr+0x14>
   17e20:	7809      	ldrb	r1, [r1, #0]
   17e22:	2900      	cmp	r1, #0
   17e24:	d00d      	beq.n	17e42 <strstr+0x2c>
   17e26:	bd10      	pop	{r4, pc}
   17e28:	3201      	adds	r2, #1
   17e2a:	7810      	ldrb	r0, [r2, #0]
   17e2c:	2800      	cmp	r0, #0
   17e2e:	d0fa      	beq.n	17e26 <strstr+0x10>
   17e30:	2300      	movs	r3, #0
   17e32:	5cc8      	ldrb	r0, [r1, r3]
   17e34:	2800      	cmp	r0, #0
   17e36:	d004      	beq.n	17e42 <strstr+0x2c>
   17e38:	5cd4      	ldrb	r4, [r2, r3]
   17e3a:	4284      	cmp	r4, r0
   17e3c:	d1f4      	bne.n	17e28 <strstr+0x12>
   17e3e:	3301      	adds	r3, #1
   17e40:	e7f7      	b.n	17e32 <strstr+0x1c>
   17e42:	0010      	movs	r0, r2
   17e44:	e7ef      	b.n	17e26 <strstr+0x10>
	...

00017e48 <strtok>:
   17e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17e4a:	4b12      	ldr	r3, [pc, #72]	; (17e94 <strtok+0x4c>)
   17e4c:	0006      	movs	r6, r0
   17e4e:	681d      	ldr	r5, [r3, #0]
   17e50:	000f      	movs	r7, r1
   17e52:	6dac      	ldr	r4, [r5, #88]	; 0x58
   17e54:	2c00      	cmp	r4, #0
   17e56:	d116      	bne.n	17e86 <strtok+0x3e>
   17e58:	2050      	movs	r0, #80	; 0x50
   17e5a:	f7ff fe3b 	bl	17ad4 <malloc>
   17e5e:	65a8      	str	r0, [r5, #88]	; 0x58
   17e60:	6004      	str	r4, [r0, #0]
   17e62:	6044      	str	r4, [r0, #4]
   17e64:	6084      	str	r4, [r0, #8]
   17e66:	60c4      	str	r4, [r0, #12]
   17e68:	6104      	str	r4, [r0, #16]
   17e6a:	6144      	str	r4, [r0, #20]
   17e6c:	6184      	str	r4, [r0, #24]
   17e6e:	6284      	str	r4, [r0, #40]	; 0x28
   17e70:	62c4      	str	r4, [r0, #44]	; 0x2c
   17e72:	6304      	str	r4, [r0, #48]	; 0x30
   17e74:	6344      	str	r4, [r0, #52]	; 0x34
   17e76:	6384      	str	r4, [r0, #56]	; 0x38
   17e78:	63c4      	str	r4, [r0, #60]	; 0x3c
   17e7a:	6404      	str	r4, [r0, #64]	; 0x40
   17e7c:	6444      	str	r4, [r0, #68]	; 0x44
   17e7e:	6484      	str	r4, [r0, #72]	; 0x48
   17e80:	64c4      	str	r4, [r0, #76]	; 0x4c
   17e82:	7704      	strb	r4, [r0, #28]
   17e84:	6244      	str	r4, [r0, #36]	; 0x24
   17e86:	6daa      	ldr	r2, [r5, #88]	; 0x58
   17e88:	0039      	movs	r1, r7
   17e8a:	0030      	movs	r0, r6
   17e8c:	2301      	movs	r3, #1
   17e8e:	f000 f803 	bl	17e98 <__strtok_r>
   17e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17e94:	2000002c 	.word	0x2000002c

00017e98 <__strtok_r>:
   17e98:	b5f0      	push	{r4, r5, r6, r7, lr}
   17e9a:	2800      	cmp	r0, #0
   17e9c:	d104      	bne.n	17ea8 <__strtok_r+0x10>
   17e9e:	6810      	ldr	r0, [r2, #0]
   17ea0:	2800      	cmp	r0, #0
   17ea2:	d101      	bne.n	17ea8 <__strtok_r+0x10>
   17ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17ea6:	0020      	movs	r0, r4
   17ea8:	000e      	movs	r6, r1
   17eaa:	7805      	ldrb	r5, [r0, #0]
   17eac:	1c44      	adds	r4, r0, #1
   17eae:	7837      	ldrb	r7, [r6, #0]
   17eb0:	2f00      	cmp	r7, #0
   17eb2:	d104      	bne.n	17ebe <__strtok_r+0x26>
   17eb4:	2d00      	cmp	r5, #0
   17eb6:	d110      	bne.n	17eda <__strtok_r+0x42>
   17eb8:	6015      	str	r5, [r2, #0]
   17eba:	0028      	movs	r0, r5
   17ebc:	e7f2      	b.n	17ea4 <__strtok_r+0xc>
   17ebe:	3601      	adds	r6, #1
   17ec0:	42bd      	cmp	r5, r7
   17ec2:	d1f4      	bne.n	17eae <__strtok_r+0x16>
   17ec4:	2b00      	cmp	r3, #0
   17ec6:	d1ee      	bne.n	17ea6 <__strtok_r+0xe>
   17ec8:	6014      	str	r4, [r2, #0]
   17eca:	7003      	strb	r3, [r0, #0]
   17ecc:	e7ea      	b.n	17ea4 <__strtok_r+0xc>
   17ece:	0033      	movs	r3, r6
   17ed0:	e00e      	b.n	17ef0 <__strtok_r+0x58>
   17ed2:	3501      	adds	r5, #1
   17ed4:	001c      	movs	r4, r3
   17ed6:	2f00      	cmp	r7, #0
   17ed8:	d102      	bne.n	17ee0 <__strtok_r+0x48>
   17eda:	000d      	movs	r5, r1
   17edc:	7826      	ldrb	r6, [r4, #0]
   17ede:	1c63      	adds	r3, r4, #1
   17ee0:	782f      	ldrb	r7, [r5, #0]
   17ee2:	42be      	cmp	r6, r7
   17ee4:	d1f5      	bne.n	17ed2 <__strtok_r+0x3a>
   17ee6:	2e00      	cmp	r6, #0
   17ee8:	d0f1      	beq.n	17ece <__strtok_r+0x36>
   17eea:	2400      	movs	r4, #0
   17eec:	1e59      	subs	r1, r3, #1
   17eee:	700c      	strb	r4, [r1, #0]
   17ef0:	6013      	str	r3, [r2, #0]
   17ef2:	e7d7      	b.n	17ea4 <__strtok_r+0xc>

00017ef4 <_strtol_l.isra.0>:
   17ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
   17ef6:	001f      	movs	r7, r3
   17ef8:	000e      	movs	r6, r1
   17efa:	b087      	sub	sp, #28
   17efc:	9005      	str	r0, [sp, #20]
   17efe:	9103      	str	r1, [sp, #12]
   17f00:	9202      	str	r2, [sp, #8]
   17f02:	980c      	ldr	r0, [sp, #48]	; 0x30
   17f04:	7834      	ldrb	r4, [r6, #0]
   17f06:	f7ff fdd3 	bl	17ab0 <__locale_ctype_ptr_l>
   17f0a:	2208      	movs	r2, #8
   17f0c:	1900      	adds	r0, r0, r4
   17f0e:	7843      	ldrb	r3, [r0, #1]
   17f10:	1c75      	adds	r5, r6, #1
   17f12:	4013      	ands	r3, r2
   17f14:	d10c      	bne.n	17f30 <_strtol_l.isra.0+0x3c>
   17f16:	2c2d      	cmp	r4, #45	; 0x2d
   17f18:	d10c      	bne.n	17f34 <_strtol_l.isra.0+0x40>
   17f1a:	3301      	adds	r3, #1
   17f1c:	782c      	ldrb	r4, [r5, #0]
   17f1e:	9301      	str	r3, [sp, #4]
   17f20:	1cb5      	adds	r5, r6, #2
   17f22:	2f00      	cmp	r7, #0
   17f24:	d00c      	beq.n	17f40 <_strtol_l.isra.0+0x4c>
   17f26:	2f10      	cmp	r7, #16
   17f28:	d114      	bne.n	17f54 <_strtol_l.isra.0+0x60>
   17f2a:	2c30      	cmp	r4, #48	; 0x30
   17f2c:	d00a      	beq.n	17f44 <_strtol_l.isra.0+0x50>
   17f2e:	e011      	b.n	17f54 <_strtol_l.isra.0+0x60>
   17f30:	002e      	movs	r6, r5
   17f32:	e7e6      	b.n	17f02 <_strtol_l.isra.0+0xe>
   17f34:	9301      	str	r3, [sp, #4]
   17f36:	2c2b      	cmp	r4, #43	; 0x2b
   17f38:	d1f3      	bne.n	17f22 <_strtol_l.isra.0+0x2e>
   17f3a:	782c      	ldrb	r4, [r5, #0]
   17f3c:	1cb5      	adds	r5, r6, #2
   17f3e:	e7f0      	b.n	17f22 <_strtol_l.isra.0+0x2e>
   17f40:	2c30      	cmp	r4, #48	; 0x30
   17f42:	d12f      	bne.n	17fa4 <_strtol_l.isra.0+0xb0>
   17f44:	2220      	movs	r2, #32
   17f46:	782b      	ldrb	r3, [r5, #0]
   17f48:	4393      	bics	r3, r2
   17f4a:	2b58      	cmp	r3, #88	; 0x58
   17f4c:	d151      	bne.n	17ff2 <_strtol_l.isra.0+0xfe>
   17f4e:	2710      	movs	r7, #16
   17f50:	786c      	ldrb	r4, [r5, #1]
   17f52:	3502      	adds	r5, #2
   17f54:	9b01      	ldr	r3, [sp, #4]
   17f56:	4a29      	ldr	r2, [pc, #164]	; (17ffc <_strtol_l.isra.0+0x108>)
   17f58:	0039      	movs	r1, r7
   17f5a:	189e      	adds	r6, r3, r2
   17f5c:	0030      	movs	r0, r6
   17f5e:	f7fd fa45 	bl	153ec <__aeabi_uidivmod>
   17f62:	0030      	movs	r0, r6
   17f64:	9104      	str	r1, [sp, #16]
   17f66:	0039      	movs	r1, r7
   17f68:	f7fd f9ba 	bl	152e0 <__udivsi3>
   17f6c:	2101      	movs	r1, #1
   17f6e:	2300      	movs	r3, #0
   17f70:	4249      	negs	r1, r1
   17f72:	0002      	movs	r2, r0
   17f74:	468c      	mov	ip, r1
   17f76:	0018      	movs	r0, r3
   17f78:	0021      	movs	r1, r4
   17f7a:	3930      	subs	r1, #48	; 0x30
   17f7c:	2909      	cmp	r1, #9
   17f7e:	d813      	bhi.n	17fa8 <_strtol_l.isra.0+0xb4>
   17f80:	000c      	movs	r4, r1
   17f82:	42a7      	cmp	r7, r4
   17f84:	dd1c      	ble.n	17fc0 <_strtol_l.isra.0+0xcc>
   17f86:	1c59      	adds	r1, r3, #1
   17f88:	d009      	beq.n	17f9e <_strtol_l.isra.0+0xaa>
   17f8a:	4663      	mov	r3, ip
   17f8c:	4282      	cmp	r2, r0
   17f8e:	d306      	bcc.n	17f9e <_strtol_l.isra.0+0xaa>
   17f90:	d102      	bne.n	17f98 <_strtol_l.isra.0+0xa4>
   17f92:	9904      	ldr	r1, [sp, #16]
   17f94:	42a1      	cmp	r1, r4
   17f96:	db02      	blt.n	17f9e <_strtol_l.isra.0+0xaa>
   17f98:	2301      	movs	r3, #1
   17f9a:	4378      	muls	r0, r7
   17f9c:	1820      	adds	r0, r4, r0
   17f9e:	782c      	ldrb	r4, [r5, #0]
   17fa0:	3501      	adds	r5, #1
   17fa2:	e7e9      	b.n	17f78 <_strtol_l.isra.0+0x84>
   17fa4:	270a      	movs	r7, #10
   17fa6:	e7d5      	b.n	17f54 <_strtol_l.isra.0+0x60>
   17fa8:	0021      	movs	r1, r4
   17faa:	3941      	subs	r1, #65	; 0x41
   17fac:	2919      	cmp	r1, #25
   17fae:	d801      	bhi.n	17fb4 <_strtol_l.isra.0+0xc0>
   17fb0:	3c37      	subs	r4, #55	; 0x37
   17fb2:	e7e6      	b.n	17f82 <_strtol_l.isra.0+0x8e>
   17fb4:	0021      	movs	r1, r4
   17fb6:	3961      	subs	r1, #97	; 0x61
   17fb8:	2919      	cmp	r1, #25
   17fba:	d801      	bhi.n	17fc0 <_strtol_l.isra.0+0xcc>
   17fbc:	3c57      	subs	r4, #87	; 0x57
   17fbe:	e7e0      	b.n	17f82 <_strtol_l.isra.0+0x8e>
   17fc0:	1c5a      	adds	r2, r3, #1
   17fc2:	d108      	bne.n	17fd6 <_strtol_l.isra.0+0xe2>
   17fc4:	9a05      	ldr	r2, [sp, #20]
   17fc6:	3323      	adds	r3, #35	; 0x23
   17fc8:	6013      	str	r3, [r2, #0]
   17fca:	9b02      	ldr	r3, [sp, #8]
   17fcc:	0030      	movs	r0, r6
   17fce:	2b00      	cmp	r3, #0
   17fd0:	d10b      	bne.n	17fea <_strtol_l.isra.0+0xf6>
   17fd2:	b007      	add	sp, #28
   17fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17fd6:	9a01      	ldr	r2, [sp, #4]
   17fd8:	2a00      	cmp	r2, #0
   17fda:	d000      	beq.n	17fde <_strtol_l.isra.0+0xea>
   17fdc:	4240      	negs	r0, r0
   17fde:	9a02      	ldr	r2, [sp, #8]
   17fe0:	2a00      	cmp	r2, #0
   17fe2:	d0f6      	beq.n	17fd2 <_strtol_l.isra.0+0xde>
   17fe4:	9a03      	ldr	r2, [sp, #12]
   17fe6:	2b00      	cmp	r3, #0
   17fe8:	d000      	beq.n	17fec <_strtol_l.isra.0+0xf8>
   17fea:	1e6a      	subs	r2, r5, #1
   17fec:	9b02      	ldr	r3, [sp, #8]
   17fee:	601a      	str	r2, [r3, #0]
   17ff0:	e7ef      	b.n	17fd2 <_strtol_l.isra.0+0xde>
   17ff2:	2430      	movs	r4, #48	; 0x30
   17ff4:	2f00      	cmp	r7, #0
   17ff6:	d1ad      	bne.n	17f54 <_strtol_l.isra.0+0x60>
   17ff8:	3708      	adds	r7, #8
   17ffa:	e7ab      	b.n	17f54 <_strtol_l.isra.0+0x60>
   17ffc:	7fffffff 	.word	0x7fffffff

00018000 <strtol>:
   18000:	b537      	push	{r0, r1, r2, r4, r5, lr}
   18002:	0013      	movs	r3, r2
   18004:	4a06      	ldr	r2, [pc, #24]	; (18020 <strtol+0x20>)
   18006:	0005      	movs	r5, r0
   18008:	6810      	ldr	r0, [r2, #0]
   1800a:	6a04      	ldr	r4, [r0, #32]
   1800c:	2c00      	cmp	r4, #0
   1800e:	d100      	bne.n	18012 <strtol+0x12>
   18010:	4c04      	ldr	r4, [pc, #16]	; (18024 <strtol+0x24>)
   18012:	000a      	movs	r2, r1
   18014:	9400      	str	r4, [sp, #0]
   18016:	0029      	movs	r1, r5
   18018:	f7ff ff6c 	bl	17ef4 <_strtol_l.isra.0>
   1801c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1801e:	46c0      	nop			; (mov r8, r8)
   18020:	2000002c 	.word	0x2000002c
   18024:	20000090 	.word	0x20000090

00018028 <__utoa>:
   18028:	b5f0      	push	{r4, r5, r6, r7, lr}
   1802a:	0017      	movs	r7, r2
   1802c:	b08f      	sub	sp, #60	; 0x3c
   1802e:	2225      	movs	r2, #37	; 0x25
   18030:	0006      	movs	r6, r0
   18032:	000d      	movs	r5, r1
   18034:	a804      	add	r0, sp, #16
   18036:	4918      	ldr	r1, [pc, #96]	; (18098 <__utoa+0x70>)
   18038:	f7ff fd72 	bl	17b20 <memcpy>
   1803c:	aa04      	add	r2, sp, #16
   1803e:	1ebb      	subs	r3, r7, #2
   18040:	2400      	movs	r4, #0
   18042:	9203      	str	r2, [sp, #12]
   18044:	2b22      	cmp	r3, #34	; 0x22
   18046:	d905      	bls.n	18054 <__utoa+0x2c>
   18048:	702c      	strb	r4, [r5, #0]
   1804a:	0025      	movs	r5, r4
   1804c:	0028      	movs	r0, r5
   1804e:	b00f      	add	sp, #60	; 0x3c
   18050:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18052:	9c01      	ldr	r4, [sp, #4]
   18054:	1c63      	adds	r3, r4, #1
   18056:	9301      	str	r3, [sp, #4]
   18058:	18eb      	adds	r3, r5, r3
   1805a:	9300      	str	r3, [sp, #0]
   1805c:	0030      	movs	r0, r6
   1805e:	3b01      	subs	r3, #1
   18060:	0039      	movs	r1, r7
   18062:	9302      	str	r3, [sp, #8]
   18064:	f7fd f9c2 	bl	153ec <__aeabi_uidivmod>
   18068:	9b03      	ldr	r3, [sp, #12]
   1806a:	9a02      	ldr	r2, [sp, #8]
   1806c:	5c5b      	ldrb	r3, [r3, r1]
   1806e:	0030      	movs	r0, r6
   18070:	7013      	strb	r3, [r2, #0]
   18072:	0039      	movs	r1, r7
   18074:	f7fd f934 	bl	152e0 <__udivsi3>
   18078:	1e06      	subs	r6, r0, #0
   1807a:	d1ea      	bne.n	18052 <__utoa+0x2a>
   1807c:	9b00      	ldr	r3, [sp, #0]
   1807e:	7018      	strb	r0, [r3, #0]
   18080:	002b      	movs	r3, r5
   18082:	1b5a      	subs	r2, r3, r5
   18084:	4294      	cmp	r4, r2
   18086:	dde1      	ble.n	1804c <__utoa+0x24>
   18088:	781a      	ldrb	r2, [r3, #0]
   1808a:	5d29      	ldrb	r1, [r5, r4]
   1808c:	7019      	strb	r1, [r3, #0]
   1808e:	552a      	strb	r2, [r5, r4]
   18090:	3301      	adds	r3, #1
   18092:	3c01      	subs	r4, #1
   18094:	e7f5      	b.n	18082 <__utoa+0x5a>
   18096:	46c0      	nop			; (mov r8, r8)
   18098:	00019a4a 	.word	0x00019a4a

0001809c <utoa>:
   1809c:	b510      	push	{r4, lr}
   1809e:	f7ff ffc3 	bl	18028 <__utoa>
   180a2:	bd10      	pop	{r4, pc}

000180a4 <_vsiprintf_r>:
   180a4:	b530      	push	{r4, r5, lr}
   180a6:	b09b      	sub	sp, #108	; 0x6c
   180a8:	9100      	str	r1, [sp, #0]
   180aa:	9104      	str	r1, [sp, #16]
   180ac:	4908      	ldr	r1, [pc, #32]	; (180d0 <_vsiprintf_r+0x2c>)
   180ae:	466d      	mov	r5, sp
   180b0:	9102      	str	r1, [sp, #8]
   180b2:	9105      	str	r1, [sp, #20]
   180b4:	2101      	movs	r1, #1
   180b6:	2482      	movs	r4, #130	; 0x82
   180b8:	4249      	negs	r1, r1
   180ba:	81e9      	strh	r1, [r5, #14]
   180bc:	00a4      	lsls	r4, r4, #2
   180be:	4669      	mov	r1, sp
   180c0:	81ac      	strh	r4, [r5, #12]
   180c2:	f000 f883 	bl	181cc <_svfiprintf_r>
   180c6:	2300      	movs	r3, #0
   180c8:	9a00      	ldr	r2, [sp, #0]
   180ca:	7013      	strb	r3, [r2, #0]
   180cc:	b01b      	add	sp, #108	; 0x6c
   180ce:	bd30      	pop	{r4, r5, pc}
   180d0:	7fffffff 	.word	0x7fffffff

000180d4 <vsiprintf>:
   180d4:	b510      	push	{r4, lr}
   180d6:	0013      	movs	r3, r2
   180d8:	000a      	movs	r2, r1
   180da:	0001      	movs	r1, r0
   180dc:	4802      	ldr	r0, [pc, #8]	; (180e8 <vsiprintf+0x14>)
   180de:	6800      	ldr	r0, [r0, #0]
   180e0:	f7ff ffe0 	bl	180a4 <_vsiprintf_r>
   180e4:	bd10      	pop	{r4, pc}
   180e6:	46c0      	nop			; (mov r8, r8)
   180e8:	2000002c 	.word	0x2000002c

000180ec <__ascii_wctomb>:
   180ec:	1e0b      	subs	r3, r1, #0
   180ee:	d004      	beq.n	180fa <__ascii_wctomb+0xe>
   180f0:	2aff      	cmp	r2, #255	; 0xff
   180f2:	d904      	bls.n	180fe <__ascii_wctomb+0x12>
   180f4:	238a      	movs	r3, #138	; 0x8a
   180f6:	6003      	str	r3, [r0, #0]
   180f8:	3b8b      	subs	r3, #139	; 0x8b
   180fa:	0018      	movs	r0, r3
   180fc:	4770      	bx	lr
   180fe:	700a      	strb	r2, [r1, #0]
   18100:	2301      	movs	r3, #1
   18102:	e7fa      	b.n	180fa <__ascii_wctomb+0xe>

00018104 <__malloc_lock>:
   18104:	4770      	bx	lr

00018106 <__malloc_unlock>:
   18106:	4770      	bx	lr

00018108 <__ssputs_r>:
   18108:	b5f0      	push	{r4, r5, r6, r7, lr}
   1810a:	688e      	ldr	r6, [r1, #8]
   1810c:	b085      	sub	sp, #20
   1810e:	0007      	movs	r7, r0
   18110:	000c      	movs	r4, r1
   18112:	9203      	str	r2, [sp, #12]
   18114:	9301      	str	r3, [sp, #4]
   18116:	429e      	cmp	r6, r3
   18118:	d839      	bhi.n	1818e <__ssputs_r+0x86>
   1811a:	2390      	movs	r3, #144	; 0x90
   1811c:	898a      	ldrh	r2, [r1, #12]
   1811e:	00db      	lsls	r3, r3, #3
   18120:	421a      	tst	r2, r3
   18122:	d034      	beq.n	1818e <__ssputs_r+0x86>
   18124:	2503      	movs	r5, #3
   18126:	6909      	ldr	r1, [r1, #16]
   18128:	6823      	ldr	r3, [r4, #0]
   1812a:	1a5b      	subs	r3, r3, r1
   1812c:	9302      	str	r3, [sp, #8]
   1812e:	6963      	ldr	r3, [r4, #20]
   18130:	9802      	ldr	r0, [sp, #8]
   18132:	435d      	muls	r5, r3
   18134:	0feb      	lsrs	r3, r5, #31
   18136:	195d      	adds	r5, r3, r5
   18138:	9b01      	ldr	r3, [sp, #4]
   1813a:	106d      	asrs	r5, r5, #1
   1813c:	3301      	adds	r3, #1
   1813e:	181b      	adds	r3, r3, r0
   18140:	42ab      	cmp	r3, r5
   18142:	d900      	bls.n	18146 <__ssputs_r+0x3e>
   18144:	001d      	movs	r5, r3
   18146:	0553      	lsls	r3, r2, #21
   18148:	d532      	bpl.n	181b0 <__ssputs_r+0xa8>
   1814a:	0029      	movs	r1, r5
   1814c:	0038      	movs	r0, r7
   1814e:	f7ff fd63 	bl	17c18 <_malloc_r>
   18152:	1e06      	subs	r6, r0, #0
   18154:	d109      	bne.n	1816a <__ssputs_r+0x62>
   18156:	230c      	movs	r3, #12
   18158:	603b      	str	r3, [r7, #0]
   1815a:	2340      	movs	r3, #64	; 0x40
   1815c:	2001      	movs	r0, #1
   1815e:	89a2      	ldrh	r2, [r4, #12]
   18160:	4240      	negs	r0, r0
   18162:	4313      	orrs	r3, r2
   18164:	81a3      	strh	r3, [r4, #12]
   18166:	b005      	add	sp, #20
   18168:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1816a:	9a02      	ldr	r2, [sp, #8]
   1816c:	6921      	ldr	r1, [r4, #16]
   1816e:	f7ff fcd7 	bl	17b20 <memcpy>
   18172:	89a3      	ldrh	r3, [r4, #12]
   18174:	4a14      	ldr	r2, [pc, #80]	; (181c8 <__ssputs_r+0xc0>)
   18176:	401a      	ands	r2, r3
   18178:	2380      	movs	r3, #128	; 0x80
   1817a:	4313      	orrs	r3, r2
   1817c:	81a3      	strh	r3, [r4, #12]
   1817e:	9b02      	ldr	r3, [sp, #8]
   18180:	6126      	str	r6, [r4, #16]
   18182:	18f6      	adds	r6, r6, r3
   18184:	6026      	str	r6, [r4, #0]
   18186:	6165      	str	r5, [r4, #20]
   18188:	9e01      	ldr	r6, [sp, #4]
   1818a:	1aed      	subs	r5, r5, r3
   1818c:	60a5      	str	r5, [r4, #8]
   1818e:	9b01      	ldr	r3, [sp, #4]
   18190:	42b3      	cmp	r3, r6
   18192:	d200      	bcs.n	18196 <__ssputs_r+0x8e>
   18194:	001e      	movs	r6, r3
   18196:	0032      	movs	r2, r6
   18198:	9903      	ldr	r1, [sp, #12]
   1819a:	6820      	ldr	r0, [r4, #0]
   1819c:	f7ff fcc9 	bl	17b32 <memmove>
   181a0:	68a3      	ldr	r3, [r4, #8]
   181a2:	2000      	movs	r0, #0
   181a4:	1b9b      	subs	r3, r3, r6
   181a6:	60a3      	str	r3, [r4, #8]
   181a8:	6823      	ldr	r3, [r4, #0]
   181aa:	199e      	adds	r6, r3, r6
   181ac:	6026      	str	r6, [r4, #0]
   181ae:	e7da      	b.n	18166 <__ssputs_r+0x5e>
   181b0:	002a      	movs	r2, r5
   181b2:	0038      	movs	r0, r7
   181b4:	f000 faa1 	bl	186fa <_realloc_r>
   181b8:	1e06      	subs	r6, r0, #0
   181ba:	d1e0      	bne.n	1817e <__ssputs_r+0x76>
   181bc:	6921      	ldr	r1, [r4, #16]
   181be:	0038      	movs	r0, r7
   181c0:	f7ff fce0 	bl	17b84 <_free_r>
   181c4:	e7c7      	b.n	18156 <__ssputs_r+0x4e>
   181c6:	46c0      	nop			; (mov r8, r8)
   181c8:	fffffb7f 	.word	0xfffffb7f

000181cc <_svfiprintf_r>:
   181cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   181ce:	b09f      	sub	sp, #124	; 0x7c
   181d0:	9002      	str	r0, [sp, #8]
   181d2:	9305      	str	r3, [sp, #20]
   181d4:	898b      	ldrh	r3, [r1, #12]
   181d6:	000f      	movs	r7, r1
   181d8:	0016      	movs	r6, r2
   181da:	061b      	lsls	r3, r3, #24
   181dc:	d511      	bpl.n	18202 <_svfiprintf_r+0x36>
   181de:	690b      	ldr	r3, [r1, #16]
   181e0:	2b00      	cmp	r3, #0
   181e2:	d10e      	bne.n	18202 <_svfiprintf_r+0x36>
   181e4:	2140      	movs	r1, #64	; 0x40
   181e6:	f7ff fd17 	bl	17c18 <_malloc_r>
   181ea:	6038      	str	r0, [r7, #0]
   181ec:	6138      	str	r0, [r7, #16]
   181ee:	2800      	cmp	r0, #0
   181f0:	d105      	bne.n	181fe <_svfiprintf_r+0x32>
   181f2:	230c      	movs	r3, #12
   181f4:	9a02      	ldr	r2, [sp, #8]
   181f6:	3801      	subs	r0, #1
   181f8:	6013      	str	r3, [r2, #0]
   181fa:	b01f      	add	sp, #124	; 0x7c
   181fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   181fe:	2340      	movs	r3, #64	; 0x40
   18200:	617b      	str	r3, [r7, #20]
   18202:	2300      	movs	r3, #0
   18204:	ad06      	add	r5, sp, #24
   18206:	616b      	str	r3, [r5, #20]
   18208:	3320      	adds	r3, #32
   1820a:	766b      	strb	r3, [r5, #25]
   1820c:	3310      	adds	r3, #16
   1820e:	76ab      	strb	r3, [r5, #26]
   18210:	0034      	movs	r4, r6
   18212:	7823      	ldrb	r3, [r4, #0]
   18214:	2b00      	cmp	r3, #0
   18216:	d147      	bne.n	182a8 <_svfiprintf_r+0xdc>
   18218:	1ba3      	subs	r3, r4, r6
   1821a:	9304      	str	r3, [sp, #16]
   1821c:	d00d      	beq.n	1823a <_svfiprintf_r+0x6e>
   1821e:	1ba3      	subs	r3, r4, r6
   18220:	0032      	movs	r2, r6
   18222:	0039      	movs	r1, r7
   18224:	9802      	ldr	r0, [sp, #8]
   18226:	f7ff ff6f 	bl	18108 <__ssputs_r>
   1822a:	1c43      	adds	r3, r0, #1
   1822c:	d100      	bne.n	18230 <_svfiprintf_r+0x64>
   1822e:	e0b5      	b.n	1839c <_svfiprintf_r+0x1d0>
   18230:	696a      	ldr	r2, [r5, #20]
   18232:	9b04      	ldr	r3, [sp, #16]
   18234:	4694      	mov	ip, r2
   18236:	4463      	add	r3, ip
   18238:	616b      	str	r3, [r5, #20]
   1823a:	7823      	ldrb	r3, [r4, #0]
   1823c:	2b00      	cmp	r3, #0
   1823e:	d100      	bne.n	18242 <_svfiprintf_r+0x76>
   18240:	e0ac      	b.n	1839c <_svfiprintf_r+0x1d0>
   18242:	2201      	movs	r2, #1
   18244:	2300      	movs	r3, #0
   18246:	4252      	negs	r2, r2
   18248:	606a      	str	r2, [r5, #4]
   1824a:	a902      	add	r1, sp, #8
   1824c:	3254      	adds	r2, #84	; 0x54
   1824e:	1852      	adds	r2, r2, r1
   18250:	3401      	adds	r4, #1
   18252:	602b      	str	r3, [r5, #0]
   18254:	60eb      	str	r3, [r5, #12]
   18256:	60ab      	str	r3, [r5, #8]
   18258:	7013      	strb	r3, [r2, #0]
   1825a:	65ab      	str	r3, [r5, #88]	; 0x58
   1825c:	4e58      	ldr	r6, [pc, #352]	; (183c0 <_svfiprintf_r+0x1f4>)
   1825e:	2205      	movs	r2, #5
   18260:	7821      	ldrb	r1, [r4, #0]
   18262:	0030      	movs	r0, r6
   18264:	f000 fa3e 	bl	186e4 <memchr>
   18268:	1c62      	adds	r2, r4, #1
   1826a:	2800      	cmp	r0, #0
   1826c:	d120      	bne.n	182b0 <_svfiprintf_r+0xe4>
   1826e:	6829      	ldr	r1, [r5, #0]
   18270:	06cb      	lsls	r3, r1, #27
   18272:	d504      	bpl.n	1827e <_svfiprintf_r+0xb2>
   18274:	2353      	movs	r3, #83	; 0x53
   18276:	ae02      	add	r6, sp, #8
   18278:	3020      	adds	r0, #32
   1827a:	199b      	adds	r3, r3, r6
   1827c:	7018      	strb	r0, [r3, #0]
   1827e:	070b      	lsls	r3, r1, #28
   18280:	d504      	bpl.n	1828c <_svfiprintf_r+0xc0>
   18282:	2353      	movs	r3, #83	; 0x53
   18284:	202b      	movs	r0, #43	; 0x2b
   18286:	ae02      	add	r6, sp, #8
   18288:	199b      	adds	r3, r3, r6
   1828a:	7018      	strb	r0, [r3, #0]
   1828c:	7823      	ldrb	r3, [r4, #0]
   1828e:	2b2a      	cmp	r3, #42	; 0x2a
   18290:	d016      	beq.n	182c0 <_svfiprintf_r+0xf4>
   18292:	2000      	movs	r0, #0
   18294:	210a      	movs	r1, #10
   18296:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18298:	7822      	ldrb	r2, [r4, #0]
   1829a:	3a30      	subs	r2, #48	; 0x30
   1829c:	2a09      	cmp	r2, #9
   1829e:	d955      	bls.n	1834c <_svfiprintf_r+0x180>
   182a0:	2800      	cmp	r0, #0
   182a2:	d015      	beq.n	182d0 <_svfiprintf_r+0x104>
   182a4:	9309      	str	r3, [sp, #36]	; 0x24
   182a6:	e013      	b.n	182d0 <_svfiprintf_r+0x104>
   182a8:	2b25      	cmp	r3, #37	; 0x25
   182aa:	d0b5      	beq.n	18218 <_svfiprintf_r+0x4c>
   182ac:	3401      	adds	r4, #1
   182ae:	e7b0      	b.n	18212 <_svfiprintf_r+0x46>
   182b0:	2301      	movs	r3, #1
   182b2:	1b80      	subs	r0, r0, r6
   182b4:	4083      	lsls	r3, r0
   182b6:	6829      	ldr	r1, [r5, #0]
   182b8:	0014      	movs	r4, r2
   182ba:	430b      	orrs	r3, r1
   182bc:	602b      	str	r3, [r5, #0]
   182be:	e7cd      	b.n	1825c <_svfiprintf_r+0x90>
   182c0:	9b05      	ldr	r3, [sp, #20]
   182c2:	1d18      	adds	r0, r3, #4
   182c4:	681b      	ldr	r3, [r3, #0]
   182c6:	9005      	str	r0, [sp, #20]
   182c8:	2b00      	cmp	r3, #0
   182ca:	db39      	blt.n	18340 <_svfiprintf_r+0x174>
   182cc:	9309      	str	r3, [sp, #36]	; 0x24
   182ce:	0014      	movs	r4, r2
   182d0:	7823      	ldrb	r3, [r4, #0]
   182d2:	2b2e      	cmp	r3, #46	; 0x2e
   182d4:	d10b      	bne.n	182ee <_svfiprintf_r+0x122>
   182d6:	7863      	ldrb	r3, [r4, #1]
   182d8:	1c62      	adds	r2, r4, #1
   182da:	2b2a      	cmp	r3, #42	; 0x2a
   182dc:	d13e      	bne.n	1835c <_svfiprintf_r+0x190>
   182de:	9b05      	ldr	r3, [sp, #20]
   182e0:	3402      	adds	r4, #2
   182e2:	1d1a      	adds	r2, r3, #4
   182e4:	681b      	ldr	r3, [r3, #0]
   182e6:	9205      	str	r2, [sp, #20]
   182e8:	2b00      	cmp	r3, #0
   182ea:	db34      	blt.n	18356 <_svfiprintf_r+0x18a>
   182ec:	9307      	str	r3, [sp, #28]
   182ee:	4e35      	ldr	r6, [pc, #212]	; (183c4 <_svfiprintf_r+0x1f8>)
   182f0:	7821      	ldrb	r1, [r4, #0]
   182f2:	2203      	movs	r2, #3
   182f4:	0030      	movs	r0, r6
   182f6:	f000 f9f5 	bl	186e4 <memchr>
   182fa:	2800      	cmp	r0, #0
   182fc:	d006      	beq.n	1830c <_svfiprintf_r+0x140>
   182fe:	2340      	movs	r3, #64	; 0x40
   18300:	1b80      	subs	r0, r0, r6
   18302:	4083      	lsls	r3, r0
   18304:	682a      	ldr	r2, [r5, #0]
   18306:	3401      	adds	r4, #1
   18308:	4313      	orrs	r3, r2
   1830a:	602b      	str	r3, [r5, #0]
   1830c:	7821      	ldrb	r1, [r4, #0]
   1830e:	2206      	movs	r2, #6
   18310:	482d      	ldr	r0, [pc, #180]	; (183c8 <_svfiprintf_r+0x1fc>)
   18312:	1c66      	adds	r6, r4, #1
   18314:	7629      	strb	r1, [r5, #24]
   18316:	f000 f9e5 	bl	186e4 <memchr>
   1831a:	2800      	cmp	r0, #0
   1831c:	d046      	beq.n	183ac <_svfiprintf_r+0x1e0>
   1831e:	4b2b      	ldr	r3, [pc, #172]	; (183cc <_svfiprintf_r+0x200>)
   18320:	2b00      	cmp	r3, #0
   18322:	d12f      	bne.n	18384 <_svfiprintf_r+0x1b8>
   18324:	6829      	ldr	r1, [r5, #0]
   18326:	9b05      	ldr	r3, [sp, #20]
   18328:	2207      	movs	r2, #7
   1832a:	05c9      	lsls	r1, r1, #23
   1832c:	d528      	bpl.n	18380 <_svfiprintf_r+0x1b4>
   1832e:	189b      	adds	r3, r3, r2
   18330:	4393      	bics	r3, r2
   18332:	3308      	adds	r3, #8
   18334:	9305      	str	r3, [sp, #20]
   18336:	696b      	ldr	r3, [r5, #20]
   18338:	9a03      	ldr	r2, [sp, #12]
   1833a:	189b      	adds	r3, r3, r2
   1833c:	616b      	str	r3, [r5, #20]
   1833e:	e767      	b.n	18210 <_svfiprintf_r+0x44>
   18340:	425b      	negs	r3, r3
   18342:	60eb      	str	r3, [r5, #12]
   18344:	2302      	movs	r3, #2
   18346:	430b      	orrs	r3, r1
   18348:	602b      	str	r3, [r5, #0]
   1834a:	e7c0      	b.n	182ce <_svfiprintf_r+0x102>
   1834c:	434b      	muls	r3, r1
   1834e:	3401      	adds	r4, #1
   18350:	189b      	adds	r3, r3, r2
   18352:	2001      	movs	r0, #1
   18354:	e7a0      	b.n	18298 <_svfiprintf_r+0xcc>
   18356:	2301      	movs	r3, #1
   18358:	425b      	negs	r3, r3
   1835a:	e7c7      	b.n	182ec <_svfiprintf_r+0x120>
   1835c:	2300      	movs	r3, #0
   1835e:	0014      	movs	r4, r2
   18360:	200a      	movs	r0, #10
   18362:	001a      	movs	r2, r3
   18364:	606b      	str	r3, [r5, #4]
   18366:	7821      	ldrb	r1, [r4, #0]
   18368:	3930      	subs	r1, #48	; 0x30
   1836a:	2909      	cmp	r1, #9
   1836c:	d903      	bls.n	18376 <_svfiprintf_r+0x1aa>
   1836e:	2b00      	cmp	r3, #0
   18370:	d0bd      	beq.n	182ee <_svfiprintf_r+0x122>
   18372:	9207      	str	r2, [sp, #28]
   18374:	e7bb      	b.n	182ee <_svfiprintf_r+0x122>
   18376:	4342      	muls	r2, r0
   18378:	3401      	adds	r4, #1
   1837a:	1852      	adds	r2, r2, r1
   1837c:	2301      	movs	r3, #1
   1837e:	e7f2      	b.n	18366 <_svfiprintf_r+0x19a>
   18380:	3307      	adds	r3, #7
   18382:	e7d5      	b.n	18330 <_svfiprintf_r+0x164>
   18384:	ab05      	add	r3, sp, #20
   18386:	9300      	str	r3, [sp, #0]
   18388:	003a      	movs	r2, r7
   1838a:	4b11      	ldr	r3, [pc, #68]	; (183d0 <_svfiprintf_r+0x204>)
   1838c:	0029      	movs	r1, r5
   1838e:	9802      	ldr	r0, [sp, #8]
   18390:	e000      	b.n	18394 <_svfiprintf_r+0x1c8>
   18392:	bf00      	nop
   18394:	9003      	str	r0, [sp, #12]
   18396:	9b03      	ldr	r3, [sp, #12]
   18398:	3301      	adds	r3, #1
   1839a:	d1cc      	bne.n	18336 <_svfiprintf_r+0x16a>
   1839c:	89bb      	ldrh	r3, [r7, #12]
   1839e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   183a0:	065b      	lsls	r3, r3, #25
   183a2:	d400      	bmi.n	183a6 <_svfiprintf_r+0x1da>
   183a4:	e729      	b.n	181fa <_svfiprintf_r+0x2e>
   183a6:	2001      	movs	r0, #1
   183a8:	4240      	negs	r0, r0
   183aa:	e726      	b.n	181fa <_svfiprintf_r+0x2e>
   183ac:	ab05      	add	r3, sp, #20
   183ae:	9300      	str	r3, [sp, #0]
   183b0:	003a      	movs	r2, r7
   183b2:	4b07      	ldr	r3, [pc, #28]	; (183d0 <_svfiprintf_r+0x204>)
   183b4:	0029      	movs	r1, r5
   183b6:	9802      	ldr	r0, [sp, #8]
   183b8:	f000 f87a 	bl	184b0 <_printf_i>
   183bc:	e7ea      	b.n	18394 <_svfiprintf_r+0x1c8>
   183be:	46c0      	nop			; (mov r8, r8)
   183c0:	00019b70 	.word	0x00019b70
   183c4:	00019b76 	.word	0x00019b76
   183c8:	00019b7a 	.word	0x00019b7a
   183cc:	00000000 	.word	0x00000000
   183d0:	00018109 	.word	0x00018109

000183d4 <_printf_common>:
   183d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   183d6:	0015      	movs	r5, r2
   183d8:	9301      	str	r3, [sp, #4]
   183da:	688a      	ldr	r2, [r1, #8]
   183dc:	690b      	ldr	r3, [r1, #16]
   183de:	9000      	str	r0, [sp, #0]
   183e0:	000c      	movs	r4, r1
   183e2:	4293      	cmp	r3, r2
   183e4:	da00      	bge.n	183e8 <_printf_common+0x14>
   183e6:	0013      	movs	r3, r2
   183e8:	0022      	movs	r2, r4
   183ea:	602b      	str	r3, [r5, #0]
   183ec:	3243      	adds	r2, #67	; 0x43
   183ee:	7812      	ldrb	r2, [r2, #0]
   183f0:	2a00      	cmp	r2, #0
   183f2:	d001      	beq.n	183f8 <_printf_common+0x24>
   183f4:	3301      	adds	r3, #1
   183f6:	602b      	str	r3, [r5, #0]
   183f8:	6823      	ldr	r3, [r4, #0]
   183fa:	069b      	lsls	r3, r3, #26
   183fc:	d502      	bpl.n	18404 <_printf_common+0x30>
   183fe:	682b      	ldr	r3, [r5, #0]
   18400:	3302      	adds	r3, #2
   18402:	602b      	str	r3, [r5, #0]
   18404:	2706      	movs	r7, #6
   18406:	6823      	ldr	r3, [r4, #0]
   18408:	401f      	ands	r7, r3
   1840a:	d027      	beq.n	1845c <_printf_common+0x88>
   1840c:	0023      	movs	r3, r4
   1840e:	3343      	adds	r3, #67	; 0x43
   18410:	781b      	ldrb	r3, [r3, #0]
   18412:	1e5a      	subs	r2, r3, #1
   18414:	4193      	sbcs	r3, r2
   18416:	6822      	ldr	r2, [r4, #0]
   18418:	0692      	lsls	r2, r2, #26
   1841a:	d430      	bmi.n	1847e <_printf_common+0xaa>
   1841c:	0022      	movs	r2, r4
   1841e:	9901      	ldr	r1, [sp, #4]
   18420:	3243      	adds	r2, #67	; 0x43
   18422:	9800      	ldr	r0, [sp, #0]
   18424:	9e08      	ldr	r6, [sp, #32]
   18426:	47b0      	blx	r6
   18428:	1c43      	adds	r3, r0, #1
   1842a:	d025      	beq.n	18478 <_printf_common+0xa4>
   1842c:	2306      	movs	r3, #6
   1842e:	6820      	ldr	r0, [r4, #0]
   18430:	682a      	ldr	r2, [r5, #0]
   18432:	68e1      	ldr	r1, [r4, #12]
   18434:	4003      	ands	r3, r0
   18436:	2500      	movs	r5, #0
   18438:	2b04      	cmp	r3, #4
   1843a:	d103      	bne.n	18444 <_printf_common+0x70>
   1843c:	1a8d      	subs	r5, r1, r2
   1843e:	43eb      	mvns	r3, r5
   18440:	17db      	asrs	r3, r3, #31
   18442:	401d      	ands	r5, r3
   18444:	68a3      	ldr	r3, [r4, #8]
   18446:	6922      	ldr	r2, [r4, #16]
   18448:	4293      	cmp	r3, r2
   1844a:	dd01      	ble.n	18450 <_printf_common+0x7c>
   1844c:	1a9b      	subs	r3, r3, r2
   1844e:	18ed      	adds	r5, r5, r3
   18450:	2700      	movs	r7, #0
   18452:	42bd      	cmp	r5, r7
   18454:	d120      	bne.n	18498 <_printf_common+0xc4>
   18456:	2000      	movs	r0, #0
   18458:	e010      	b.n	1847c <_printf_common+0xa8>
   1845a:	3701      	adds	r7, #1
   1845c:	68e3      	ldr	r3, [r4, #12]
   1845e:	682a      	ldr	r2, [r5, #0]
   18460:	1a9b      	subs	r3, r3, r2
   18462:	429f      	cmp	r7, r3
   18464:	dad2      	bge.n	1840c <_printf_common+0x38>
   18466:	0022      	movs	r2, r4
   18468:	2301      	movs	r3, #1
   1846a:	3219      	adds	r2, #25
   1846c:	9901      	ldr	r1, [sp, #4]
   1846e:	9800      	ldr	r0, [sp, #0]
   18470:	9e08      	ldr	r6, [sp, #32]
   18472:	47b0      	blx	r6
   18474:	1c43      	adds	r3, r0, #1
   18476:	d1f0      	bne.n	1845a <_printf_common+0x86>
   18478:	2001      	movs	r0, #1
   1847a:	4240      	negs	r0, r0
   1847c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1847e:	2030      	movs	r0, #48	; 0x30
   18480:	18e1      	adds	r1, r4, r3
   18482:	3143      	adds	r1, #67	; 0x43
   18484:	7008      	strb	r0, [r1, #0]
   18486:	0021      	movs	r1, r4
   18488:	1c5a      	adds	r2, r3, #1
   1848a:	3145      	adds	r1, #69	; 0x45
   1848c:	7809      	ldrb	r1, [r1, #0]
   1848e:	18a2      	adds	r2, r4, r2
   18490:	3243      	adds	r2, #67	; 0x43
   18492:	3302      	adds	r3, #2
   18494:	7011      	strb	r1, [r2, #0]
   18496:	e7c1      	b.n	1841c <_printf_common+0x48>
   18498:	0022      	movs	r2, r4
   1849a:	2301      	movs	r3, #1
   1849c:	321a      	adds	r2, #26
   1849e:	9901      	ldr	r1, [sp, #4]
   184a0:	9800      	ldr	r0, [sp, #0]
   184a2:	9e08      	ldr	r6, [sp, #32]
   184a4:	47b0      	blx	r6
   184a6:	1c43      	adds	r3, r0, #1
   184a8:	d0e6      	beq.n	18478 <_printf_common+0xa4>
   184aa:	3701      	adds	r7, #1
   184ac:	e7d1      	b.n	18452 <_printf_common+0x7e>
	...

000184b0 <_printf_i>:
   184b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   184b2:	b08b      	sub	sp, #44	; 0x2c
   184b4:	9206      	str	r2, [sp, #24]
   184b6:	000a      	movs	r2, r1
   184b8:	3243      	adds	r2, #67	; 0x43
   184ba:	9307      	str	r3, [sp, #28]
   184bc:	9005      	str	r0, [sp, #20]
   184be:	9204      	str	r2, [sp, #16]
   184c0:	7e0a      	ldrb	r2, [r1, #24]
   184c2:	000c      	movs	r4, r1
   184c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   184c6:	2a6e      	cmp	r2, #110	; 0x6e
   184c8:	d100      	bne.n	184cc <_printf_i+0x1c>
   184ca:	e08f      	b.n	185ec <_printf_i+0x13c>
   184cc:	d817      	bhi.n	184fe <_printf_i+0x4e>
   184ce:	2a63      	cmp	r2, #99	; 0x63
   184d0:	d02c      	beq.n	1852c <_printf_i+0x7c>
   184d2:	d808      	bhi.n	184e6 <_printf_i+0x36>
   184d4:	2a00      	cmp	r2, #0
   184d6:	d100      	bne.n	184da <_printf_i+0x2a>
   184d8:	e099      	b.n	1860e <_printf_i+0x15e>
   184da:	2a58      	cmp	r2, #88	; 0x58
   184dc:	d054      	beq.n	18588 <_printf_i+0xd8>
   184de:	0026      	movs	r6, r4
   184e0:	3642      	adds	r6, #66	; 0x42
   184e2:	7032      	strb	r2, [r6, #0]
   184e4:	e029      	b.n	1853a <_printf_i+0x8a>
   184e6:	2a64      	cmp	r2, #100	; 0x64
   184e8:	d001      	beq.n	184ee <_printf_i+0x3e>
   184ea:	2a69      	cmp	r2, #105	; 0x69
   184ec:	d1f7      	bne.n	184de <_printf_i+0x2e>
   184ee:	6821      	ldr	r1, [r4, #0]
   184f0:	681a      	ldr	r2, [r3, #0]
   184f2:	0608      	lsls	r0, r1, #24
   184f4:	d523      	bpl.n	1853e <_printf_i+0x8e>
   184f6:	1d11      	adds	r1, r2, #4
   184f8:	6019      	str	r1, [r3, #0]
   184fa:	6815      	ldr	r5, [r2, #0]
   184fc:	e025      	b.n	1854a <_printf_i+0x9a>
   184fe:	2a73      	cmp	r2, #115	; 0x73
   18500:	d100      	bne.n	18504 <_printf_i+0x54>
   18502:	e088      	b.n	18616 <_printf_i+0x166>
   18504:	d808      	bhi.n	18518 <_printf_i+0x68>
   18506:	2a6f      	cmp	r2, #111	; 0x6f
   18508:	d029      	beq.n	1855e <_printf_i+0xae>
   1850a:	2a70      	cmp	r2, #112	; 0x70
   1850c:	d1e7      	bne.n	184de <_printf_i+0x2e>
   1850e:	2220      	movs	r2, #32
   18510:	6809      	ldr	r1, [r1, #0]
   18512:	430a      	orrs	r2, r1
   18514:	6022      	str	r2, [r4, #0]
   18516:	e003      	b.n	18520 <_printf_i+0x70>
   18518:	2a75      	cmp	r2, #117	; 0x75
   1851a:	d020      	beq.n	1855e <_printf_i+0xae>
   1851c:	2a78      	cmp	r2, #120	; 0x78
   1851e:	d1de      	bne.n	184de <_printf_i+0x2e>
   18520:	0022      	movs	r2, r4
   18522:	2178      	movs	r1, #120	; 0x78
   18524:	3245      	adds	r2, #69	; 0x45
   18526:	7011      	strb	r1, [r2, #0]
   18528:	4a6c      	ldr	r2, [pc, #432]	; (186dc <_printf_i+0x22c>)
   1852a:	e030      	b.n	1858e <_printf_i+0xde>
   1852c:	000e      	movs	r6, r1
   1852e:	681a      	ldr	r2, [r3, #0]
   18530:	3642      	adds	r6, #66	; 0x42
   18532:	1d11      	adds	r1, r2, #4
   18534:	6019      	str	r1, [r3, #0]
   18536:	6813      	ldr	r3, [r2, #0]
   18538:	7033      	strb	r3, [r6, #0]
   1853a:	2301      	movs	r3, #1
   1853c:	e079      	b.n	18632 <_printf_i+0x182>
   1853e:	0649      	lsls	r1, r1, #25
   18540:	d5d9      	bpl.n	184f6 <_printf_i+0x46>
   18542:	1d11      	adds	r1, r2, #4
   18544:	6019      	str	r1, [r3, #0]
   18546:	2300      	movs	r3, #0
   18548:	5ed5      	ldrsh	r5, [r2, r3]
   1854a:	2d00      	cmp	r5, #0
   1854c:	da03      	bge.n	18556 <_printf_i+0xa6>
   1854e:	232d      	movs	r3, #45	; 0x2d
   18550:	9a04      	ldr	r2, [sp, #16]
   18552:	426d      	negs	r5, r5
   18554:	7013      	strb	r3, [r2, #0]
   18556:	4b62      	ldr	r3, [pc, #392]	; (186e0 <_printf_i+0x230>)
   18558:	270a      	movs	r7, #10
   1855a:	9303      	str	r3, [sp, #12]
   1855c:	e02f      	b.n	185be <_printf_i+0x10e>
   1855e:	6820      	ldr	r0, [r4, #0]
   18560:	6819      	ldr	r1, [r3, #0]
   18562:	0605      	lsls	r5, r0, #24
   18564:	d503      	bpl.n	1856e <_printf_i+0xbe>
   18566:	1d08      	adds	r0, r1, #4
   18568:	6018      	str	r0, [r3, #0]
   1856a:	680d      	ldr	r5, [r1, #0]
   1856c:	e005      	b.n	1857a <_printf_i+0xca>
   1856e:	0640      	lsls	r0, r0, #25
   18570:	d5f9      	bpl.n	18566 <_printf_i+0xb6>
   18572:	680d      	ldr	r5, [r1, #0]
   18574:	1d08      	adds	r0, r1, #4
   18576:	6018      	str	r0, [r3, #0]
   18578:	b2ad      	uxth	r5, r5
   1857a:	4b59      	ldr	r3, [pc, #356]	; (186e0 <_printf_i+0x230>)
   1857c:	2708      	movs	r7, #8
   1857e:	9303      	str	r3, [sp, #12]
   18580:	2a6f      	cmp	r2, #111	; 0x6f
   18582:	d018      	beq.n	185b6 <_printf_i+0x106>
   18584:	270a      	movs	r7, #10
   18586:	e016      	b.n	185b6 <_printf_i+0x106>
   18588:	3145      	adds	r1, #69	; 0x45
   1858a:	700a      	strb	r2, [r1, #0]
   1858c:	4a54      	ldr	r2, [pc, #336]	; (186e0 <_printf_i+0x230>)
   1858e:	9203      	str	r2, [sp, #12]
   18590:	681a      	ldr	r2, [r3, #0]
   18592:	6821      	ldr	r1, [r4, #0]
   18594:	1d10      	adds	r0, r2, #4
   18596:	6018      	str	r0, [r3, #0]
   18598:	6815      	ldr	r5, [r2, #0]
   1859a:	0608      	lsls	r0, r1, #24
   1859c:	d522      	bpl.n	185e4 <_printf_i+0x134>
   1859e:	07cb      	lsls	r3, r1, #31
   185a0:	d502      	bpl.n	185a8 <_printf_i+0xf8>
   185a2:	2320      	movs	r3, #32
   185a4:	4319      	orrs	r1, r3
   185a6:	6021      	str	r1, [r4, #0]
   185a8:	2710      	movs	r7, #16
   185aa:	2d00      	cmp	r5, #0
   185ac:	d103      	bne.n	185b6 <_printf_i+0x106>
   185ae:	2320      	movs	r3, #32
   185b0:	6822      	ldr	r2, [r4, #0]
   185b2:	439a      	bics	r2, r3
   185b4:	6022      	str	r2, [r4, #0]
   185b6:	0023      	movs	r3, r4
   185b8:	2200      	movs	r2, #0
   185ba:	3343      	adds	r3, #67	; 0x43
   185bc:	701a      	strb	r2, [r3, #0]
   185be:	6863      	ldr	r3, [r4, #4]
   185c0:	60a3      	str	r3, [r4, #8]
   185c2:	2b00      	cmp	r3, #0
   185c4:	db5c      	blt.n	18680 <_printf_i+0x1d0>
   185c6:	2204      	movs	r2, #4
   185c8:	6821      	ldr	r1, [r4, #0]
   185ca:	4391      	bics	r1, r2
   185cc:	6021      	str	r1, [r4, #0]
   185ce:	2d00      	cmp	r5, #0
   185d0:	d158      	bne.n	18684 <_printf_i+0x1d4>
   185d2:	9e04      	ldr	r6, [sp, #16]
   185d4:	2b00      	cmp	r3, #0
   185d6:	d064      	beq.n	186a2 <_printf_i+0x1f2>
   185d8:	0026      	movs	r6, r4
   185da:	9b03      	ldr	r3, [sp, #12]
   185dc:	3642      	adds	r6, #66	; 0x42
   185de:	781b      	ldrb	r3, [r3, #0]
   185e0:	7033      	strb	r3, [r6, #0]
   185e2:	e05e      	b.n	186a2 <_printf_i+0x1f2>
   185e4:	0648      	lsls	r0, r1, #25
   185e6:	d5da      	bpl.n	1859e <_printf_i+0xee>
   185e8:	b2ad      	uxth	r5, r5
   185ea:	e7d8      	b.n	1859e <_printf_i+0xee>
   185ec:	6809      	ldr	r1, [r1, #0]
   185ee:	681a      	ldr	r2, [r3, #0]
   185f0:	0608      	lsls	r0, r1, #24
   185f2:	d505      	bpl.n	18600 <_printf_i+0x150>
   185f4:	1d11      	adds	r1, r2, #4
   185f6:	6019      	str	r1, [r3, #0]
   185f8:	6813      	ldr	r3, [r2, #0]
   185fa:	6962      	ldr	r2, [r4, #20]
   185fc:	601a      	str	r2, [r3, #0]
   185fe:	e006      	b.n	1860e <_printf_i+0x15e>
   18600:	0649      	lsls	r1, r1, #25
   18602:	d5f7      	bpl.n	185f4 <_printf_i+0x144>
   18604:	1d11      	adds	r1, r2, #4
   18606:	6019      	str	r1, [r3, #0]
   18608:	6813      	ldr	r3, [r2, #0]
   1860a:	8aa2      	ldrh	r2, [r4, #20]
   1860c:	801a      	strh	r2, [r3, #0]
   1860e:	2300      	movs	r3, #0
   18610:	9e04      	ldr	r6, [sp, #16]
   18612:	6123      	str	r3, [r4, #16]
   18614:	e054      	b.n	186c0 <_printf_i+0x210>
   18616:	681a      	ldr	r2, [r3, #0]
   18618:	1d11      	adds	r1, r2, #4
   1861a:	6019      	str	r1, [r3, #0]
   1861c:	6816      	ldr	r6, [r2, #0]
   1861e:	2100      	movs	r1, #0
   18620:	6862      	ldr	r2, [r4, #4]
   18622:	0030      	movs	r0, r6
   18624:	f000 f85e 	bl	186e4 <memchr>
   18628:	2800      	cmp	r0, #0
   1862a:	d001      	beq.n	18630 <_printf_i+0x180>
   1862c:	1b80      	subs	r0, r0, r6
   1862e:	6060      	str	r0, [r4, #4]
   18630:	6863      	ldr	r3, [r4, #4]
   18632:	6123      	str	r3, [r4, #16]
   18634:	2300      	movs	r3, #0
   18636:	9a04      	ldr	r2, [sp, #16]
   18638:	7013      	strb	r3, [r2, #0]
   1863a:	e041      	b.n	186c0 <_printf_i+0x210>
   1863c:	6923      	ldr	r3, [r4, #16]
   1863e:	0032      	movs	r2, r6
   18640:	9906      	ldr	r1, [sp, #24]
   18642:	9805      	ldr	r0, [sp, #20]
   18644:	9d07      	ldr	r5, [sp, #28]
   18646:	47a8      	blx	r5
   18648:	1c43      	adds	r3, r0, #1
   1864a:	d043      	beq.n	186d4 <_printf_i+0x224>
   1864c:	6823      	ldr	r3, [r4, #0]
   1864e:	2500      	movs	r5, #0
   18650:	079b      	lsls	r3, r3, #30
   18652:	d40f      	bmi.n	18674 <_printf_i+0x1c4>
   18654:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18656:	68e0      	ldr	r0, [r4, #12]
   18658:	4298      	cmp	r0, r3
   1865a:	da3d      	bge.n	186d8 <_printf_i+0x228>
   1865c:	0018      	movs	r0, r3
   1865e:	e03b      	b.n	186d8 <_printf_i+0x228>
   18660:	0022      	movs	r2, r4
   18662:	2301      	movs	r3, #1
   18664:	3219      	adds	r2, #25
   18666:	9906      	ldr	r1, [sp, #24]
   18668:	9805      	ldr	r0, [sp, #20]
   1866a:	9e07      	ldr	r6, [sp, #28]
   1866c:	47b0      	blx	r6
   1866e:	1c43      	adds	r3, r0, #1
   18670:	d030      	beq.n	186d4 <_printf_i+0x224>
   18672:	3501      	adds	r5, #1
   18674:	68e3      	ldr	r3, [r4, #12]
   18676:	9a09      	ldr	r2, [sp, #36]	; 0x24
   18678:	1a9b      	subs	r3, r3, r2
   1867a:	429d      	cmp	r5, r3
   1867c:	dbf0      	blt.n	18660 <_printf_i+0x1b0>
   1867e:	e7e9      	b.n	18654 <_printf_i+0x1a4>
   18680:	2d00      	cmp	r5, #0
   18682:	d0a9      	beq.n	185d8 <_printf_i+0x128>
   18684:	9e04      	ldr	r6, [sp, #16]
   18686:	0028      	movs	r0, r5
   18688:	0039      	movs	r1, r7
   1868a:	f7fc feaf 	bl	153ec <__aeabi_uidivmod>
   1868e:	9b03      	ldr	r3, [sp, #12]
   18690:	3e01      	subs	r6, #1
   18692:	5c5b      	ldrb	r3, [r3, r1]
   18694:	0028      	movs	r0, r5
   18696:	7033      	strb	r3, [r6, #0]
   18698:	0039      	movs	r1, r7
   1869a:	f7fc fe21 	bl	152e0 <__udivsi3>
   1869e:	1e05      	subs	r5, r0, #0
   186a0:	d1f1      	bne.n	18686 <_printf_i+0x1d6>
   186a2:	2f08      	cmp	r7, #8
   186a4:	d109      	bne.n	186ba <_printf_i+0x20a>
   186a6:	6823      	ldr	r3, [r4, #0]
   186a8:	07db      	lsls	r3, r3, #31
   186aa:	d506      	bpl.n	186ba <_printf_i+0x20a>
   186ac:	6863      	ldr	r3, [r4, #4]
   186ae:	6922      	ldr	r2, [r4, #16]
   186b0:	4293      	cmp	r3, r2
   186b2:	dc02      	bgt.n	186ba <_printf_i+0x20a>
   186b4:	2330      	movs	r3, #48	; 0x30
   186b6:	3e01      	subs	r6, #1
   186b8:	7033      	strb	r3, [r6, #0]
   186ba:	9b04      	ldr	r3, [sp, #16]
   186bc:	1b9b      	subs	r3, r3, r6
   186be:	6123      	str	r3, [r4, #16]
   186c0:	9b07      	ldr	r3, [sp, #28]
   186c2:	aa09      	add	r2, sp, #36	; 0x24
   186c4:	9300      	str	r3, [sp, #0]
   186c6:	0021      	movs	r1, r4
   186c8:	9b06      	ldr	r3, [sp, #24]
   186ca:	9805      	ldr	r0, [sp, #20]
   186cc:	f7ff fe82 	bl	183d4 <_printf_common>
   186d0:	1c43      	adds	r3, r0, #1
   186d2:	d1b3      	bne.n	1863c <_printf_i+0x18c>
   186d4:	2001      	movs	r0, #1
   186d6:	4240      	negs	r0, r0
   186d8:	b00b      	add	sp, #44	; 0x2c
   186da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   186dc:	00019b92 	.word	0x00019b92
   186e0:	00019b81 	.word	0x00019b81

000186e4 <memchr>:
   186e4:	b2c9      	uxtb	r1, r1
   186e6:	1882      	adds	r2, r0, r2
   186e8:	4290      	cmp	r0, r2
   186ea:	d101      	bne.n	186f0 <memchr+0xc>
   186ec:	2000      	movs	r0, #0
   186ee:	4770      	bx	lr
   186f0:	7803      	ldrb	r3, [r0, #0]
   186f2:	428b      	cmp	r3, r1
   186f4:	d0fb      	beq.n	186ee <memchr+0xa>
   186f6:	3001      	adds	r0, #1
   186f8:	e7f6      	b.n	186e8 <memchr+0x4>

000186fa <_realloc_r>:
   186fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   186fc:	0007      	movs	r7, r0
   186fe:	000d      	movs	r5, r1
   18700:	0016      	movs	r6, r2
   18702:	2900      	cmp	r1, #0
   18704:	d105      	bne.n	18712 <_realloc_r+0x18>
   18706:	0011      	movs	r1, r2
   18708:	f7ff fa86 	bl	17c18 <_malloc_r>
   1870c:	0004      	movs	r4, r0
   1870e:	0020      	movs	r0, r4
   18710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18712:	2a00      	cmp	r2, #0
   18714:	d103      	bne.n	1871e <_realloc_r+0x24>
   18716:	f7ff fa35 	bl	17b84 <_free_r>
   1871a:	0034      	movs	r4, r6
   1871c:	e7f7      	b.n	1870e <_realloc_r+0x14>
   1871e:	f000 f812 	bl	18746 <_malloc_usable_size_r>
   18722:	002c      	movs	r4, r5
   18724:	4286      	cmp	r6, r0
   18726:	d9f2      	bls.n	1870e <_realloc_r+0x14>
   18728:	0031      	movs	r1, r6
   1872a:	0038      	movs	r0, r7
   1872c:	f7ff fa74 	bl	17c18 <_malloc_r>
   18730:	1e04      	subs	r4, r0, #0
   18732:	d0ec      	beq.n	1870e <_realloc_r+0x14>
   18734:	0029      	movs	r1, r5
   18736:	0032      	movs	r2, r6
   18738:	f7ff f9f2 	bl	17b20 <memcpy>
   1873c:	0029      	movs	r1, r5
   1873e:	0038      	movs	r0, r7
   18740:	f7ff fa20 	bl	17b84 <_free_r>
   18744:	e7e3      	b.n	1870e <_realloc_r+0x14>

00018746 <_malloc_usable_size_r>:
   18746:	1f0b      	subs	r3, r1, #4
   18748:	681b      	ldr	r3, [r3, #0]
   1874a:	1f18      	subs	r0, r3, #4
   1874c:	2b00      	cmp	r3, #0
   1874e:	da01      	bge.n	18754 <_malloc_usable_size_r+0xe>
   18750:	580b      	ldr	r3, [r1, r0]
   18752:	18c0      	adds	r0, r0, r3
   18754:	4770      	bx	lr
   18756:	0000      	movs	r0, r0
   18758:	30303030 	.word	0x30303030
   1875c:	30303030 	.word	0x30303030
   18760:	00003030 	.word	0x00003030
   18764:	2e707466 	.word	0x2e707466
   18768:	76697264 	.word	0x76697264
   1876c:	2e716865 	.word	0x2e716865
   18770:	006d6f63 	.word	0x006d6f63
   18774:	7269662f 	.word	0x7269662f
   18778:	7261776d 	.word	0x7261776d
   1877c:	00002f65 	.word	0x00002f65
   18780:	75686172 	.word	0x75686172
   18784:	61726e6c 	.word	0x61726e6c
   18788:	646f6874 	.word	0x646f6874
   1878c:	006c636b 	.word	0x006c636b
   18790:	34333231 	.word	0x34333231
   18794:	38373635 	.word	0x38373635
   18798:	00000039 	.word	0x00000039
   1879c:	6d726966 	.word	0x6d726966
   187a0:	65726177 	.word	0x65726177
   187a4:	6e69622e 	.word	0x6e69622e
   187a8:	00000000 	.word	0x00000000
   187ac:	31343037 	.word	0x31343037
   187b0:	39363931 	.word	0x39363931
   187b4:	00003935 	.word	0x00003935
   187b8:	38393637 	.word	0x38393637
   187bc:	32393334 	.word	0x32393334
   187c0:	00003130 	.word	0x00003130
   187c4:	33383337 	.word	0x33383337
   187c8:	32343136 	.word	0x32343136
   187cc:	00003431 	.word	0x00003431
   187d0:	33383337 	.word	0x33383337
   187d4:	36323236 	.word	0x36323236
   187d8:	00003837 	.word	0x00003837
   187dc:	36383539 	.word	0x36383539
   187e0:	39353331 	.word	0x39353331
   187e4:	00003837 	.word	0x00003837
   187e8:	00003a50 	.word	0x00003a50
   187ec:	00003a53 	.word	0x00003a53
   187f0:	0000000a 	.word	0x0000000a
   187f4:	204d5347 	.word	0x204d5347
   187f8:	656d6954 	.word	0x656d6954
   187fc:	0074756f 	.word	0x0074756f
   18800:	4f525245 	.word	0x4f525245
   18804:	00000052 	.word	0x00000052
   18808:	00004b4f 	.word	0x00004b4f
   1880c:	000d5441 	.word	0x000d5441
   18810:	492b5441 	.word	0x492b5441
   18814:	303d4346 	.word	0x303d4346
   18818:	000d302c 	.word	0x000d302c
   1881c:	4552432b 	.word	0x4552432b
   18820:	30203a47 	.word	0x30203a47
   18824:	0000312c 	.word	0x0000312c
   18828:	432b5441 	.word	0x432b5441
   1882c:	3f474552 	.word	0x3f474552
   18830:	0000000d 	.word	0x0000000d
   18834:	4552432b 	.word	0x4552432b
   18838:	30203a47 	.word	0x30203a47
   1883c:	0000352c 	.word	0x0000352c
   18840:	492b5441 	.word	0x492b5441
   18844:	253d5250 	.word	0x253d5250
   18848:	00000d64 	.word	0x00000d64
   1884c:	492b5441 	.word	0x492b5441
   18850:	303d5250 	.word	0x303d5250
   18854:	0000000d 	.word	0x0000000d
   18858:	432b5441 	.word	0x432b5441
   1885c:	3d474552 	.word	0x3d474552
   18860:	00000d31 	.word	0x00000d31
   18864:	432b5441 	.word	0x432b5441
   18868:	3d4e5546 	.word	0x3d4e5546
   1886c:	00000d31 	.word	0x00000d31
   18870:	5546432b 	.word	0x5546432b
   18874:	31203a4e 	.word	0x31203a4e
   18878:	00000000 	.word	0x00000000
   1887c:	432b5441 	.word	0x432b5441
   18880:	3f4e5546 	.word	0x3f4e5546
   18884:	0000000d 	.word	0x0000000d
   18888:	432b5441 	.word	0x432b5441
   1888c:	3d4e5546 	.word	0x3d4e5546
   18890:	00000d30 	.word	0x00000d30
   18894:	5546432b 	.word	0x5546432b
   18898:	30203a4e 	.word	0x30203a4e
   1889c:	00000000 	.word	0x00000000
   188a0:	432b5441 	.word	0x432b5441
   188a4:	3d4e5546 	.word	0x3d4e5546
   188a8:	0d312c31 	.word	0x0d312c31
   188ac:	00000000 	.word	0x00000000
   188b0:	4950432b 	.word	0x4950432b
   188b4:	52203a4e 	.word	0x52203a4e
   188b8:	59444145 	.word	0x59444145
   188bc:	00000000 	.word	0x00000000
   188c0:	432b5441 	.word	0x432b5441
   188c4:	3f4e4950 	.word	0x3f4e4950
   188c8:	0000000d 	.word	0x0000000d
   188cc:	432b5441 	.word	0x432b5441
   188d0:	4144474d 	.word	0x4144474d
   188d4:	4544223d 	.word	0x4544223d
   188d8:	4c41204c 	.word	0x4c41204c
   188dc:	000d224c 	.word	0x000d224c
   188e0:	57265441 	.word	0x57265441
   188e4:	0000000d 	.word	0x0000000d
   188e8:	432b5441 	.word	0x432b5441
   188ec:	3d50494c 	.word	0x3d50494c
   188f0:	00000d31 	.word	0x00000d31
   188f4:	432b5441 	.word	0x432b5441
   188f8:	3d504c4f 	.word	0x3d504c4f
   188fc:	00000d31 	.word	0x00000d31
   18900:	432b5441 	.word	0x432b5441
   18904:	4b4c4353 	.word	0x4b4c4353
   18908:	000d313d 	.word	0x000d313d
   1890c:	432b5441 	.word	0x432b5441
   18910:	3f504c4f 	.word	0x3f504c4f
   18914:	0000000d 	.word	0x0000000d
   18918:	4c4f432b 	.word	0x4c4f432b
   1891c:	00000050 	.word	0x00000050
   18920:	0000003a 	.word	0x0000003a
   18924:	0000002c 	.word	0x0000002c
   18928:	432b5441 	.word	0x432b5441
   1892c:	3d43434c 	.word	0x3d43434c
   18930:	00000d31 	.word	0x00000d31
   18934:	46265441 	.word	0x46265441
   18938:	0000000d 	.word	0x0000000d
   1893c:	30455441 	.word	0x30455441
   18940:	0000000d 	.word	0x0000000d
   18944:	432b5441 	.word	0x432b5441
   18948:	3d46474d 	.word	0x3d46474d
   1894c:	00000d31 	.word	0x00000d31
   18950:	432b5441 	.word	0x432b5441
   18954:	3d504d53 	.word	0x3d504d53
   18958:	312c3731 	.word	0x312c3731
   1895c:	302c3736 	.word	0x302c3736
   18960:	000d302c 	.word	0x000d302c
   18964:	432b5441 	.word	0x432b5441
   18968:	3d534153 	.word	0x3d534153
   1896c:	00000d30 	.word	0x00000d30
   18970:	432b5441 	.word	0x432b5441
   18974:	3d534153 	.word	0x3d534153
   18978:	00000d31 	.word	0x00000d31
   1897c:	432b5441 	.word	0x432b5441
   18980:	000d5153 	.word	0x000d5153
   18984:	00003939 	.word	0x00003939
   18988:	432b5441 	.word	0x432b5441
   1898c:	3d494d4e 	.word	0x3d494d4e
   18990:	2c312c32 	.word	0x2c312c32
   18994:	2c302c30 	.word	0x2c302c30
   18998:	00000d30 	.word	0x00000d30
   1899c:	432b5441 	.word	0x432b5441
   189a0:	3d494d4e 	.word	0x3d494d4e
   189a4:	2c302c31 	.word	0x2c302c31
   189a8:	2c302c30 	.word	0x2c302c30
   189ac:	00000d30 	.word	0x00000d30
   189b0:	432b5441 	.word	0x432b5441
   189b4:	3d53474d 	.word	0x3d53474d
   189b8:	22732522 	.word	0x22732522
   189bc:	0000000d 	.word	0x0000000d
   189c0:	0000003e 	.word	0x0000003e
   189c4:	0d1a7325 	.word	0x0d1a7325
   189c8:	00000000 	.word	0x00000000
   189cc:	432b5441 	.word	0x432b5441
   189d0:	3d4c474d 	.word	0x3d4c474d
   189d4:	43455222 	.word	0x43455222
   189d8:	524e5520 	.word	0x524e5520
   189dc:	22444145 	.word	0x22444145
   189e0:	0000000d 	.word	0x0000000d
   189e4:	432b5441 	.word	0x432b5441
   189e8:	3d4c474d 	.word	0x3d4c474d
   189ec:	43455222 	.word	0x43455222
   189f0:	41455220 	.word	0x41455220
   189f4:	000d2244 	.word	0x000d2244
   189f8:	432b5441 	.word	0x432b5441
   189fc:	3d4c474d 	.word	0x3d4c474d
   18a00:	4c4c4122 	.word	0x4c4c4122
   18a04:	00000d22 	.word	0x00000d22
   18a08:	4c474d43 	.word	0x4c474d43
   18a0c:	00000000 	.word	0x00000000
   18a10:	432b5441 	.word	0x432b5441
   18a14:	3d52474d 	.word	0x3d52474d
   18a18:	000d6425 	.word	0x000d6425
   18a1c:	474d432b 	.word	0x474d432b
   18a20:	00000052 	.word	0x00000052
   18a24:	25445441 	.word	0x25445441
   18a28:	000d3b73 	.word	0x000d3b73
   18a2c:	0d415441 	.word	0x0d415441
   18a30:	00000000 	.word	0x00000000
   18a34:	432b5441 	.word	0x432b5441
   18a38:	3d53544c 	.word	0x3d53544c
   18a3c:	00000d31 	.word	0x00000d31
   18a40:	432b5441 	.word	0x432b5441
   18a44:	3d53544c 	.word	0x3d53544c
   18a48:	00000d30 	.word	0x00000d30
   18a4c:	442b5441 	.word	0x442b5441
   18a50:	3d544544 	.word	0x3d544544
   18a54:	00000d31 	.word	0x00000d31
   18a58:	562b5441 	.word	0x562b5441
   18a5c:	223d5354 	.word	0x223d5354
   18a60:	0d227325 	.word	0x0d227325
   18a64:	00000000 	.word	0x00000000
   18a68:	432b5441 	.word	0x432b5441
   18a6c:	0d505548 	.word	0x0d505548
   18a70:	00000000 	.word	0x00000000
   18a74:	432b5441 	.word	0x432b5441
   18a78:	3d415743 	.word	0x3d415743
   18a7c:	0d302c30 	.word	0x0d302c30
   18a80:	00000000 	.word	0x00000000
   18a84:	472b5441 	.word	0x472b5441
   18a88:	55424d53 	.word	0x55424d53
   18a8c:	313d5953 	.word	0x313d5953
   18a90:	0000000d 	.word	0x0000000d
   18a94:	472b5441 	.word	0x472b5441
   18a98:	55424d53 	.word	0x55424d53
   18a9c:	303d5953 	.word	0x303d5953
   18aa0:	0000000d 	.word	0x0000000d
   18aa4:	432b5441 	.word	0x432b5441
   18aa8:	3d434552 	.word	0x3d434552
   18aac:	00000d35 	.word	0x00000d35
   18ab0:	432b5441 	.word	0x432b5441
   18ab4:	3d434552 	.word	0x3d434552
   18ab8:	43222c34 	.word	0x43222c34
   18abc:	73555c3a 	.word	0x73555c3a
   18ac0:	255c7265 	.word	0x255c7265
   18ac4:	6d612e63 	.word	0x6d612e63
   18ac8:	302c2272 	.word	0x302c2272
   18acc:	2c30392c 	.word	0x2c30392c
   18ad0:	000d7525 	.word	0x000d7525
   18ad4:	432b5441 	.word	0x432b5441
   18ad8:	3f4b4c43 	.word	0x3f4b4c43
   18adc:	0000000d 	.word	0x0000000d
   18ae0:	00000022 	.word	0x00000022
   18ae4:	0000002f 	.word	0x0000002f
   18ae8:	0000002b 	.word	0x0000002b
   18aec:	544d432b 	.word	0x544d432b
   18af0:	00003a49 	.word	0x00003a49
   18af4:	474e4952 	.word	0x474e4952
   18af8:	00000000 	.word	0x00000000
   18afc:	494c432b 	.word	0x494c432b
   18b00:	00000050 	.word	0x00000050
   18b04:	43204f4e 	.word	0x43204f4e
   18b08:	49525241 	.word	0x49525241
   18b0c:	00005245 	.word	0x00005245
   18b10:	59535542 	.word	0x59535542
   18b14:	00000000 	.word	0x00000000
   18b18:	41204f4e 	.word	0x41204f4e
   18b1c:	4557534e 	.word	0x4557534e
   18b20:	00000052 	.word	0x00000052
   18b24:	4d54442b 	.word	0x4d54442b
   18b28:	00003a46 	.word	0x00003a46
   18b2c:	4552432b 	.word	0x4552432b
   18b30:	30203a43 	.word	0x30203a43
   18b34:	00000000 	.word	0x00000000
   18b38:	532b5441 	.word	0x532b5441
   18b3c:	52425041 	.word	0x52425041
   18b40:	312c333d 	.word	0x312c333d
   18b44:	4f43222c 	.word	0x4f43222c
   18b48:	5059544e 	.word	0x5059544e
   18b4c:	222c2245 	.word	0x222c2245
   18b50:	53525047 	.word	0x53525047
   18b54:	00000d22 	.word	0x00000d22
   18b58:	432b5441 	.word	0x432b5441
   18b5c:	3f53504f 	.word	0x3f53504f
   18b60:	0000000d 	.word	0x0000000d
   18b64:	504f432b 	.word	0x504f432b
   18b68:	00003a53 	.word	0x00003a53
   18b6c:	41454449 	.word	0x41454449
   18b70:	00000000 	.word	0x00000000
   18b74:	532b5441 	.word	0x532b5441
   18b78:	52425041 	.word	0x52425041
   18b7c:	312c333d 	.word	0x312c333d
   18b80:	5041222c 	.word	0x5041222c
   18b84:	222c224e 	.word	0x222c224e
   18b88:	65746e69 	.word	0x65746e69
   18b8c:	74656e72 	.word	0x74656e72
   18b90:	00000d22 	.word	0x00000d22
   18b94:	41444f56 	.word	0x41444f56
   18b98:	00000000 	.word	0x00000000
   18b9c:	532b5441 	.word	0x532b5441
   18ba0:	52425041 	.word	0x52425041
   18ba4:	312c333d 	.word	0x312c333d
   18ba8:	5041222c 	.word	0x5041222c
   18bac:	222c224e 	.word	0x222c224e
   18bb0:	22777777 	.word	0x22777777
   18bb4:	0000000d 	.word	0x0000000d
   18bb8:	4c4e5342 	.word	0x4c4e5342
   18bbc:	00000000 	.word	0x00000000
   18bc0:	532b5441 	.word	0x532b5441
   18bc4:	52425041 	.word	0x52425041
   18bc8:	312c333d 	.word	0x312c333d
   18bcc:	5041222c 	.word	0x5041222c
   18bd0:	222c224e 	.word	0x222c224e
   18bd4:	6c6e7362 	.word	0x6c6e7362
   18bd8:	2274656e 	.word	0x2274656e
   18bdc:	0000000d 	.word	0x0000000d
   18be0:	54524941 	.word	0x54524941
   18be4:	00004c45 	.word	0x00004c45
   18be8:	532b5441 	.word	0x532b5441
   18bec:	52425041 	.word	0x52425041
   18bf0:	312c333d 	.word	0x312c333d
   18bf4:	5041222c 	.word	0x5041222c
   18bf8:	222c224e 	.word	0x222c224e
   18bfc:	74726961 	.word	0x74726961
   18c00:	70676c65 	.word	0x70676c65
   18c04:	632e7372 	.word	0x632e7372
   18c08:	0d226d6f 	.word	0x0d226d6f
   18c0c:	00000000 	.word	0x00000000
   18c10:	532b5441 	.word	0x532b5441
   18c14:	52425041 	.word	0x52425041
   18c18:	312c333d 	.word	0x312c333d
   18c1c:	5041222c 	.word	0x5041222c
   18c20:	222c224e 	.word	0x222c224e
   18c24:	00000d22 	.word	0x00000d22
   18c28:	532b5441 	.word	0x532b5441
   18c2c:	52425041 	.word	0x52425041
   18c30:	312c323d 	.word	0x312c323d
   18c34:	0000000d 	.word	0x0000000d
   18c38:	5041532b 	.word	0x5041532b
   18c3c:	203a5242 	.word	0x203a5242
   18c40:	00302c31 	.word	0x00302c31
   18c44:	5041532b 	.word	0x5041532b
   18c48:	203a5242 	.word	0x203a5242
   18c4c:	00312c31 	.word	0x00312c31
   18c50:	5041532b 	.word	0x5041532b
   18c54:	203a5242 	.word	0x203a5242
   18c58:	00322c31 	.word	0x00322c31
   18c5c:	5041532b 	.word	0x5041532b
   18c60:	203a5242 	.word	0x203a5242
   18c64:	00332c31 	.word	0x00332c31
   18c68:	532b5441 	.word	0x532b5441
   18c6c:	52425041 	.word	0x52425041
   18c70:	312c313d 	.word	0x312c313d
   18c74:	0000000d 	.word	0x0000000d
   18c78:	532b5441 	.word	0x532b5441
   18c7c:	52425041 	.word	0x52425041
   18c80:	312c303d 	.word	0x312c303d
   18c84:	0000000d 	.word	0x0000000d
   18c88:	462b5441 	.word	0x462b5441
   18c8c:	49435054 	.word	0x49435054
   18c90:	0d313d44 	.word	0x0d313d44
   18c94:	00000000 	.word	0x00000000
   18c98:	462b5441 	.word	0x462b5441
   18c9c:	45535054 	.word	0x45535054
   18ca0:	223d5652 	.word	0x223d5652
   18ca4:	0d227325 	.word	0x0d227325
   18ca8:	00000000 	.word	0x00000000
   18cac:	462b5441 	.word	0x462b5441
   18cb0:	4e555054 	.word	0x4e555054
   18cb4:	7325223d 	.word	0x7325223d
   18cb8:	00000d22 	.word	0x00000d22
   18cbc:	462b5441 	.word	0x462b5441
   18cc0:	57505054 	.word	0x57505054
   18cc4:	7325223d 	.word	0x7325223d
   18cc8:	00000d22 	.word	0x00000d22
   18ccc:	462b5441 	.word	0x462b5441
   18cd0:	45475054 	.word	0x45475054
   18cd4:	4d414e54 	.word	0x4d414e54
   18cd8:	25223d45 	.word	0x25223d45
   18cdc:	000d2273 	.word	0x000d2273
   18ce0:	462b5441 	.word	0x462b5441
   18ce4:	45475054 	.word	0x45475054
   18ce8:	54415054 	.word	0x54415054
   18cec:	25223d48 	.word	0x25223d48
   18cf0:	000d2273 	.word	0x000d2273
   18cf4:	5054462b 	.word	0x5054462b
   18cf8:	455a4953 	.word	0x455a4953
   18cfc:	2c31203a 	.word	0x2c31203a
   18d00:	00000000 	.word	0x00000000
   18d04:	462b5441 	.word	0x462b5441
   18d08:	49535054 	.word	0x49535054
   18d0c:	000d455a 	.word	0x000d455a
   18d10:	5054462b 	.word	0x5054462b
   18d14:	3a544547 	.word	0x3a544547
   18d18:	312c3120 	.word	0x312c3120
   18d1c:	00000000 	.word	0x00000000
   18d20:	462b5441 	.word	0x462b5441
   18d24:	45475054 	.word	0x45475054
   18d28:	0d313d54 	.word	0x0d313d54
   18d2c:	00000000 	.word	0x00000000
   18d30:	462b5441 	.word	0x462b5441
   18d34:	45475054 	.word	0x45475054
   18d38:	2c323d54 	.word	0x2c323d54
   18d3c:	000d6425 	.word	0x000d6425
   18d40:	5054462b 	.word	0x5054462b
   18d44:	3a544547 	.word	0x3a544547
   18d48:	00000020 	.word	0x00000020
   18d4c:	434c432b 	.word	0x434c432b
   18d50:	31203a43 	.word	0x31203a43
   18d54:	322c302c 	.word	0x322c302c
   18d58:	00000000 	.word	0x00000000
   18d5c:	434c432b 	.word	0x434c432b
   18d60:	31203a43 	.word	0x31203a43
   18d64:	332c302c 	.word	0x332c302c
   18d68:	00000000 	.word	0x00000000
   18d6c:	434c432b 	.word	0x434c432b
   18d70:	31203a43 	.word	0x31203a43
   18d74:	302c302c 	.word	0x302c302c
   18d78:	00000000 	.word	0x00000000
   18d7c:	434c432b 	.word	0x434c432b
   18d80:	31203a43 	.word	0x31203a43
   18d84:	362c302c 	.word	0x362c302c
	...
   18d90:	4e4f4d41 	.word	0x4e4f4d41
   18d94:	00000000 	.word	0x00000000
   18d98:	55475250 	.word	0x55475250
   18d9c:	00004450 	.word	0x00004450
   18da0:	54494157 	.word	0x54494157
   18da4:	00000000 	.word	0x00000000
   18da8:	204d5347 	.word	0x204d5347
   18dac:	4c4c4143 	.word	0x4c4c4143
   18db0:	49415720 	.word	0x49415720
   18db4:	4e495454 	.word	0x4e495454
   18db8:	49442047 	.word	0x49442047
   18dbc:	4c424153 	.word	0x4c424153
   18dc0:	203a2045 	.word	0x203a2045
   18dc4:	43435553 	.word	0x43435553
   18dc8:	00535345 	.word	0x00535345
   18dcc:	204d5347 	.word	0x204d5347
   18dd0:	4c4c4143 	.word	0x4c4c4143
   18dd4:	49415720 	.word	0x49415720
   18dd8:	4e495454 	.word	0x4e495454
   18ddc:	49442047 	.word	0x49442047
   18de0:	4c424153 	.word	0x4c424153
   18de4:	203a2045 	.word	0x203a2045
   18de8:	4c494146 	.word	0x4c494146
   18dec:	00004445 	.word	0x00004445
   18df0:	41454c43 	.word	0x41454c43
   18df4:	4c4c4152 	.word	0x4c4c4152
   18df8:	00000000 	.word	0x00000000
   18dfc:	204c4c41 	.word	0x204c4c41
   18e00:	52455355 	.word	0x52455355
   18e04:	4d554e20 	.word	0x4d554e20
   18e08:	53524542 	.word	0x53524542
   18e0c:	454c4320 	.word	0x454c4320
   18e10:	44455241 	.word	0x44455241
   18e14:	00000000 	.word	0x00000000
   18e18:	41464544 	.word	0x41464544
   18e1c:	00544c55 	.word	0x00544c55
   18e20:	204c4c41 	.word	0x204c4c41
   18e24:	54544553 	.word	0x54544553
   18e28:	53474e49 	.word	0x53474e49
   18e2c:	45524120 	.word	0x45524120
   18e30:	574f4e20 	.word	0x574f4e20
   18e34:	43414620 	.word	0x43414620
   18e38:	59524f54 	.word	0x59524f54
   18e3c:	46454420 	.word	0x46454420
   18e40:	544c5541 	.word	0x544c5541
   18e44:	00000000 	.word	0x00000000
   18e48:	004d554e 	.word	0x004d554e
   18e4c:	4e206f4e 	.word	0x4e206f4e
   18e50:	65626d75 	.word	0x65626d75
   18e54:	45207372 	.word	0x45207372
   18e58:	74736978 	.word	0x74736978
   18e5c:	00000073 	.word	0x00000073
   18e60:	45534552 	.word	0x45534552
   18e64:	00000054 	.word	0x00000054
   18e68:	00444944 	.word	0x00444944
   18e6c:	4f545541 	.word	0x4f545541
   18e70:	00004e4f 	.word	0x00004e4f
   18e74:	4f544f4d 	.word	0x4f544f4d
   18e78:	55412052 	.word	0x55412052
   18e7c:	4e4f4f54 	.word	0x4e4f4f54
   18e80:	004e4f20 	.word	0x004e4f20
   18e84:	4f545541 	.word	0x4f545541
   18e88:	0046464f 	.word	0x0046464f
   18e8c:	4f544f4d 	.word	0x4f544f4d
   18e90:	55412052 	.word	0x55412052
   18e94:	4e4f4f54 	.word	0x4e4f4f54
   18e98:	46464f20 	.word	0x46464f20
   18e9c:	00000000 	.word	0x00000000
   18ea0:	50594257 	.word	0x50594257
   18ea4:	00004e4f 	.word	0x00004e4f
   18ea8:	45544157 	.word	0x45544157
   18eac:	59422052 	.word	0x59422052
   18eb0:	53534150 	.word	0x53534150
   18eb4:	004e4f20 	.word	0x004e4f20
   18eb8:	50594257 	.word	0x50594257
   18ebc:	0046464f 	.word	0x0046464f
   18ec0:	45544157 	.word	0x45544157
   18ec4:	59422052 	.word	0x59422052
   18ec8:	53534150 	.word	0x53534150
   18ecc:	46464f20 	.word	0x46464f20
   18ed0:	00000000 	.word	0x00000000
   18ed4:	4f505053 	.word	0x4f505053
   18ed8:	0000004e 	.word	0x0000004e
   18edc:	20505053 	.word	0x20505053
   18ee0:	00004e4f 	.word	0x00004e4f
   18ee4:	4f505053 	.word	0x4f505053
   18ee8:	00004646 	.word	0x00004646
   18eec:	20505053 	.word	0x20505053
   18ef0:	0046464f 	.word	0x0046464f
   18ef4:	56505053 	.word	0x56505053
   18ef8:	00000000 	.word	0x00000000
   18efc:	20505053 	.word	0x20505053
   18f00:	544c4f56 	.word	0x544c4f56
   18f04:	54455320 	.word	0x54455320
   18f08:	00000000 	.word	0x00000000
   18f0c:	4f514553 	.word	0x4f514553
   18f10:	0000004e 	.word	0x0000004e
   18f14:	50514553 	.word	0x50514553
   18f18:	004e4f20 	.word	0x004e4f20
   18f1c:	4f514553 	.word	0x4f514553
   18f20:	00004646 	.word	0x00004646
   18f24:	50514553 	.word	0x50514553
   18f28:	46464f20 	.word	0x46464f20
   18f2c:	00000000 	.word	0x00000000
   18f30:	00444e44 	.word	0x00444e44
   18f34:	20444e44 	.word	0x20444e44
   18f38:	0000203a 	.word	0x0000203a
   18f3c:	004b4f20 	.word	0x004b4f20
   18f40:	4b424446 	.word	0x4b424446
   18f44:	00000000 	.word	0x00000000
   18f48:	4b424446 	.word	0x4b424446
   18f4c:	25203a20 	.word	0x25203a20
   18f50:	00000064 	.word	0x00000064
   18f54:	50534552 	.word	0x50534552
   18f58:	00000000 	.word	0x00000000
   18f5c:	50534552 	.word	0x50534552
   18f60:	00203a20 	.word	0x00203a20
   18f64:	0052564f 	.word	0x0052564f
   18f68:	2052564f 	.word	0x2052564f
   18f6c:	20544553 	.word	0x20544553
   18f70:	00004b4f 	.word	0x00004b4f
   18f74:	52444e55 	.word	0x52444e55
   18f78:	00000000 	.word	0x00000000
   18f7c:	52444e55 	.word	0x52444e55
   18f80:	54455320 	.word	0x54455320
   18f84:	004b4f20 	.word	0x004b4f20
   18f88:	41545341 	.word	0x41545341
   18f8c:	00000054 	.word	0x00000054
   18f90:	75253a43 	.word	0x75253a43
   18f94:	0a75252e 	.word	0x0a75252e
   18f98:	75253a4e 	.word	0x75253a4e
   18f9c:	253a4f0a 	.word	0x253a4f0a
   18fa0:	3a550a75 	.word	0x3a550a75
   18fa4:	4f0a7525 	.word	0x4f0a7525
   18fa8:	75253a50 	.word	0x75253a50
   18fac:	3a50550a 	.word	0x3a50550a
   18fb0:	00007525 	.word	0x00007525
   18fb4:	4f46564f 	.word	0x4f46564f
   18fb8:	0000004e 	.word	0x0000004e
   18fbc:	56455250 	.word	0x56455250
   18fc0:	20544e45 	.word	0x20544e45
   18fc4:	5245564f 	.word	0x5245564f
   18fc8:	574f4c46 	.word	0x574f4c46
   18fcc:	54455320 	.word	0x54455320
   18fd0:	474e4954 	.word	0x474e4954
   18fd4:	004e4f20 	.word	0x004e4f20
   18fd8:	4f46564f 	.word	0x4f46564f
   18fdc:	00004646 	.word	0x00004646
   18fe0:	56455250 	.word	0x56455250
   18fe4:	20544e45 	.word	0x20544e45
   18fe8:	5245564f 	.word	0x5245564f
   18fec:	574f4c46 	.word	0x574f4c46
   18ff0:	54455320 	.word	0x54455320
   18ff4:	474e4954 	.word	0x474e4954
   18ff8:	46464f20 	.word	0x46464f20
   18ffc:	00000000 	.word	0x00000000
   19000:	4f4d324d 	.word	0x4f4d324d
   19004:	0000004e 	.word	0x0000004e
   19008:	204d324d 	.word	0x204d324d
   1900c:	6e727554 	.word	0x6e727554
   19010:	4f206465 	.word	0x4f206465
   19014:	52202c6e 	.word	0x52202c6e
   19018:	746f6d65 	.word	0x746f6d65
   1901c:	754e2065 	.word	0x754e2065
   19020:	7265626d 	.word	0x7265626d
   19024:	726c4120 	.word	0x726c4120
   19028:	79646165 	.word	0x79646165
   1902c:	72655620 	.word	0x72655620
   19030:	65696669 	.word	0x65696669
   19034:	00000064 	.word	0x00000064
   19038:	6f727245 	.word	0x6f727245
   1903c:	4d203a72 	.word	0x4d203a72
   19040:	52204d32 	.word	0x52204d32
   19044:	746f6d65 	.word	0x746f6d65
   19048:	754e2065 	.word	0x754e2065
   1904c:	7265626d 	.word	0x7265626d
   19050:	746f4e20 	.word	0x746f4e20
   19054:	65725020 	.word	0x65725020
   19058:	746e6573 	.word	0x746e6573
   1905c:	00000000 	.word	0x00000000
   19060:	4f4d324d 	.word	0x4f4d324d
   19064:	00004646 	.word	0x00004646
   19068:	204d324d 	.word	0x204d324d
   1906c:	54544553 	.word	0x54544553
   19070:	20474e49 	.word	0x20474e49
   19074:	0046464f 	.word	0x0046464f
   19078:	54415453 	.word	0x54415453
   1907c:	00005355 	.word	0x00005355
   19080:	45544c41 	.word	0x45544c41
   19084:	54414e52 	.word	0x54414e52
   19088:	554e2045 	.word	0x554e2045
   1908c:	5245424d 	.word	0x5245424d
   19090:	004e4f20 	.word	0x004e4f20
   19094:	45544c41 	.word	0x45544c41
   19098:	54414e52 	.word	0x54414e52
   1909c:	554e2045 	.word	0x554e2045
   190a0:	5245424d 	.word	0x5245424d
   190a4:	544f4e20 	.word	0x544f4e20
   190a8:	45525020 	.word	0x45525020
   190ac:	544e4553 	.word	0x544e4553
   190b0:	00000000 	.word	0x00000000
   190b4:	464f4d41 	.word	0x464f4d41
   190b8:	00000046 	.word	0x00000046
   190bc:	45544c41 	.word	0x45544c41
   190c0:	54414e52 	.word	0x54414e52
   190c4:	4f4d2045 	.word	0x4f4d2045
   190c8:	454c4942 	.word	0x454c4942
   190cc:	4d554e20 	.word	0x4d554e20
   190d0:	20524542 	.word	0x20524542
   190d4:	0046464f 	.word	0x0046464f
   190d8:	464f434e 	.word	0x464f434e
   190dc:	00000046 	.word	0x00000046
   190e0:	43204f4e 	.word	0x43204f4e
   190e4:	204c4c41 	.word	0x204c4c41
   190e8:	54544553 	.word	0x54544553
   190ec:	20474e49 	.word	0x20474e49
   190f0:	0046464f 	.word	0x0046464f
   190f4:	54544547 	.word	0x54544547
   190f8:	00454d49 	.word	0x00454d49
   190fc:	454d4954 	.word	0x454d4954
   19100:	25203a20 	.word	0x25203a20
   19104:	75253a75 	.word	0x75253a75
   19108:	00000000 	.word	0x00000000
   1910c:	54544553 	.word	0x54544553
   19110:	00454d49 	.word	0x00454d49
   19114:	4954434e 	.word	0x4954434e
   19118:	0000454d 	.word	0x0000454d
   1911c:	0000002d 	.word	0x0000002d
   19120:	0000003a 	.word	0x0000003a
   19124:	43204f4e 	.word	0x43204f4e
   19128:	204c4c41 	.word	0x204c4c41
   1912c:	494d4954 	.word	0x494d4954
   19130:	2053474e 	.word	0x2053474e
   19134:	00544553 	.word	0x00544553
   19138:	47415453 	.word	0x47415453
   1913c:	00000045 	.word	0x00000045
   19140:	4c4c4143 	.word	0x4c4c4143
   19144:	41545320 	.word	0x41545320
   19148:	53204547 	.word	0x53204547
   1914c:	54205445 	.word	0x54205445
   19150:	203a204f 	.word	0x203a204f
   19154:	00006425 	.word	0x00006425
   19158:	52415453 	.word	0x52415453
   1915c:	454d4954 	.word	0x454d4954
   19160:	00000000 	.word	0x00000000
   19164:	41545320 	.word	0x41545320
   19168:	4d495452 	.word	0x4d495452
   1916c:	45532045 	.word	0x45532045
   19170:	4f542054 	.word	0x4f542054
   19174:	25203a20 	.word	0x25203a20
   19178:	00000064 	.word	0x00000064
   1917c:	4f545541 	.word	0x4f545541
   19180:	454d4954 	.word	0x454d4954
   19184:	00000000 	.word	0x00000000
   19188:	54554120 	.word	0x54554120
   1918c:	4d49544f 	.word	0x4d49544f
   19190:	45532045 	.word	0x45532045
   19194:	4f542054 	.word	0x4f542054
   19198:	25203a20 	.word	0x25203a20
   1919c:	00000064 	.word	0x00000064
   191a0:	004c4142 	.word	0x004c4142
   191a4:	002b504d 	.word	0x002b504d
   191a8:	4f4e2050 	.word	0x4f4e2050
   191ac:	44444120 	.word	0x44444120
   191b0:	00444544 	.word	0x00444544
   191b4:	002b534d 	.word	0x002b534d
   191b8:	4f4e2053 	.word	0x4f4e2053
   191bc:	44444120 	.word	0x44444120
   191c0:	00444544 	.word	0x00444544
   191c4:	00002b4d 	.word	0x00002b4d
   191c8:	49424f4d 	.word	0x49424f4d
   191cc:	4e20454c 	.word	0x4e20454c
   191d0:	00003a4f 	.word	0x00003a4f
   191d4:	0000000a 	.word	0x0000000a
   191d8:	45444441 	.word	0x45444441
   191dc:	55532044 	.word	0x55532044
   191e0:	53454343 	.word	0x53454343
   191e4:	4c554653 	.word	0x4c554653
   191e8:	0000594c 	.word	0x0000594c
   191ec:	00002d4d 	.word	0x00002d4d
   191f0:	4f4d4552 	.word	0x4f4d4552
   191f4:	20444556 	.word	0x20444556
   191f8:	43435553 	.word	0x43435553
   191fc:	46535345 	.word	0x46535345
   19200:	594c4c55 	.word	0x594c4c55
   19204:	00000000 	.word	0x00000000
   19208:	002b4d41 	.word	0x002b4d41
   1920c:	45544c41 	.word	0x45544c41
   19210:	54414e52 	.word	0x54414e52
   19214:	4f4d2045 	.word	0x4f4d2045
   19218:	454c4942 	.word	0x454c4942
   1921c:	204f4e20 	.word	0x204f4e20
   19220:	20444441 	.word	0x20444441
   19224:	43435553 	.word	0x43435553
   19228:	00535345 	.word	0x00535345
   1922c:	002b4d4d 	.word	0x002b4d4d
   19230:	204d324d 	.word	0x204d324d
   19234:	202e4f4e 	.word	0x202e4f4e
   19238:	45444441 	.word	0x45444441
   1923c:	00000044 	.word	0x00000044
   19240:	002b524d 	.word	0x002b524d
   19244:	204d324d 	.word	0x204d324d
   19248:	4f4d4552 	.word	0x4f4d4552
   1924c:	4e204554 	.word	0x4e204554
   19250:	41202e4f 	.word	0x41202e4f
   19254:	44454444 	.word	0x44454444
   19258:	00000000 	.word	0x00000000
   1925c:	4f525245 	.word	0x4f525245
   19260:	203a2052 	.word	0x203a2052
   19264:	00007325 	.word	0x00007325
   19268:	00004e4f 	.word	0x00004e4f
   1926c:	48502032 	.word	0x48502032
   19270:	00455341 	.word	0x00455341
   19274:	00004b4f 	.word	0x00004b4f
   19278:	4f525245 	.word	0x4f525245
   1927c:	00000052 	.word	0x00000052
   19280:	203a5952 	.word	0x203a5952
   19284:	59206425 	.word	0x59206425
   19288:	25203a42 	.word	0x25203a42
   1928c:	52422064 	.word	0x52422064
   19290:	6425203a 	.word	0x6425203a
   19294:	3a43410a 	.word	0x3a43410a
   19298:	0a732520 	.word	0x0a732520
   1929c:	75716553 	.word	0x75716553
   192a0:	65636e65 	.word	0x65636e65
   192a4:	7325203a 	.word	0x7325203a
   192a8:	746f4d0a 	.word	0x746f4d0a
   192ac:	203a726f 	.word	0x203a726f
   192b0:	430a7325 	.word	0x430a7325
   192b4:	65727275 	.word	0x65727275
   192b8:	203a746e 	.word	0x203a746e
   192bc:	0a416425 	.word	0x0a416425
   192c0:	7774654e 	.word	0x7774654e
   192c4:	3a6b726f 	.word	0x3a6b726f
   192c8:	00642520 	.word	0x00642520
   192cc:	304d4d56 	.word	0x304d4d56
   192d0:	00000031 	.word	0x00000031
   192d4:	4f544f4d 	.word	0x4f544f4d
   192d8:	00002052 	.word	0x00002052
   192dc:	0046464f 	.word	0x0046464f
   192e0:	494d4441 	.word	0x494d4441
   192e4:	0000004e 	.word	0x0000004e
   192e8:	00000023 	.word	0x00000023
   192ec:	30524d56 	.word	0x30524d56
   192f0:	00000032 	.word	0x00000032
   192f4:	204d324d 	.word	0x204d324d
   192f8:	4e525554 	.word	0x4e525554
   192fc:	4f204445 	.word	0x4f204445
   19300:	0000004e 	.word	0x0000004e
   19304:	0000203a 	.word	0x0000203a
   19308:	00006c6c 	.word	0x00006c6c
   1930c:	00006d52 	.word	0x00006d52
   19310:	00006d52 	.word	0x00006d52
   19314:	00006c6c 	.word	0x00006c6c
   19318:	00006d52 	.word	0x00006d52
   1931c:	00006d52 	.word	0x00006d52
   19320:	00006d52 	.word	0x00006d52
   19324:	00006d52 	.word	0x00006d52
   19328:	00006d52 	.word	0x00006d52
   1932c:	00006d52 	.word	0x00006d52
   19330:	00006d52 	.word	0x00006d52
   19334:	00006d52 	.word	0x00006d52
   19338:	00006c6c 	.word	0x00006c6c
   1933c:	00006d52 	.word	0x00006d52
   19340:	00006d52 	.word	0x00006d52
   19344:	00006d52 	.word	0x00006d52
   19348:	00006c2e 	.word	0x00006c2e
   1934c:	00006d52 	.word	0x00006d52
   19350:	00006c6c 	.word	0x00006c6c
   19354:	49524b20 	.word	0x49524b20
   19358:	414e4853 	.word	0x414e4853
   1935c:	4d532020 	.word	0x4d532020
   19360:	20545241 	.word	0x20545241
   19364:	00000000 	.word	0x00000000
   19368:	54202020 	.word	0x54202020
   1936c:	4e484345 	.word	0x4e484345
   19370:	474f4c4f 	.word	0x474f4c4f
   19374:	20202059 	.word	0x20202059
   19378:	00000000 	.word	0x00000000
   1937c:	4f532020 	.word	0x4f532020
   19380:	41575446 	.word	0x41575446
   19384:	56204552 	.word	0x56204552
   19388:	20205245 	.word	0x20205245
   1938c:	00000000 	.word	0x00000000
   19390:	31422020 	.word	0x31422020
   19394:	33302d36 	.word	0x33302d36
   19398:	2d34302d 	.word	0x2d34302d
   1939c:	20203931 	.word	0x20203931
   193a0:	00000000 	.word	0x00000000
   193a4:	00007325 	.word	0x00007325
   193a8:	20595256 	.word	0x20595256
   193ac:	59562020 	.word	0x59562020
   193b0:	20202042 	.word	0x20202042
   193b4:	20524256 	.word	0x20524256
   193b8:	00000000 	.word	0x00000000
   193bc:	6c333025 	.word	0x6c333025
   193c0:	20202075 	.word	0x20202075
   193c4:	00000000 	.word	0x00000000
   193c8:	6c333025 	.word	0x6c333025
   193cc:	00002075 	.word	0x00002075
   193d0:	4f544f4d 	.word	0x4f544f4d
   193d4:	20203a52 	.word	0x20203a52
   193d8:	2046464f 	.word	0x2046464f
   193dc:	20202020 	.word	0x20202020
   193e0:	00000000 	.word	0x00000000
   193e4:	20202020 	.word	0x20202020
   193e8:	20202020 	.word	0x20202020
   193ec:	20202020 	.word	0x20202020
   193f0:	20202020 	.word	0x20202020
   193f4:	00000000 	.word	0x00000000
   193f8:	4f544f4d 	.word	0x4f544f4d
   193fc:	55432052 	.word	0x55432052
   19400:	4e455252 	.word	0x4e455252
   19404:	20203a54 	.word	0x20203a54
   19408:	00000000 	.word	0x00000000
   1940c:	6c333025 	.word	0x6c333025
   19410:	30252e75 	.word	0x30252e75
   19414:	20756c32 	.word	0x20756c32
   19418:	20202020 	.word	0x20202020
   1941c:	20202020 	.word	0x20202020
   19420:	00202020 	.word	0x00202020
   19424:	48502033 	.word	0x48502033
   19428:	20455341 	.word	0x20455341
   1942c:	3a514553 	.word	0x3a514553
   19430:	00000000 	.word	0x00000000
   19434:	204b4f20 	.word	0x204b4f20
   19438:	00000000 	.word	0x00000000
   1943c:	52524520 	.word	0x52524520
   19440:	00000000 	.word	0x00000000
   19444:	53414850 	.word	0x53414850
   19448:	54532045 	.word	0x54532045
   1944c:	3a455441 	.word	0x3a455441
   19450:	00000000 	.word	0x00000000
   19454:	48503320 	.word	0x48503320
   19458:	00000020 	.word	0x00000020
   1945c:	48503220 	.word	0x48503220
   19460:	00000020 	.word	0x00000020
   19464:	46464f20 	.word	0x46464f20
   19468:	00000000 	.word	0x00000000
   1946c:	454c2d4f 	.word	0x454c2d4f
   19470:	204c4556 	.word	0x204c4556
   19474:	0000203a 	.word	0x0000203a
   19478:	48474948 	.word	0x48474948
   1947c:	00002020 	.word	0x00002020
   19480:	2044494d 	.word	0x2044494d
   19484:	00002020 	.word	0x00002020
   19488:	20574f4c 	.word	0x20574f4c
   1948c:	00002020 	.word	0x00002020
   19490:	454c2d55 	.word	0x454c2d55
   19494:	204c4556 	.word	0x204c4556
   19498:	0000203a 	.word	0x0000203a
   1949c:	43545243 	.word	0x43545243
   194a0:	0000204c 	.word	0x0000204c
   194a4:	74746142 	.word	0x74746142
   194a8:	50797265 	.word	0x50797265
   194ac:	203a7265 	.word	0x203a7265
   194b0:	25257525 	.word	0x25257525
   194b4:	00000020 	.word	0x00000020
   194b8:	4e474953 	.word	0x4e474953
   194bc:	3a204c41 	.word	0x3a204c41
   194c0:	00000020 	.word	0x00000020
   194c4:	20202020 	.word	0x20202020
   194c8:	00202020 	.word	0x00202020
   194cc:	4f434e49 	.word	0x4f434e49
   194d0:	474e494d 	.word	0x474e494d
   194d4:	4c414320 	.word	0x4c414320
   194d8:	202e2e4c 	.word	0x202e2e4c
   194dc:	00000000 	.word	0x00000000
   194e0:	36312d25 	.word	0x36312d25
   194e4:	00000073 	.word	0x00000073
   194e8:	43204e49 	.word	0x43204e49
   194ec:	2e4c4c41 	.word	0x2e4c4c41
   194f0:	20202e2e 	.word	0x20202e2e
   194f4:	20202020 	.word	0x20202020
   194f8:	00000000 	.word	0x00000000
   194fc:	4c414944 	.word	0x4c414944
   19500:	2e474e49 	.word	0x2e474e49
   19504:	20202e2e 	.word	0x20202e2e
   19508:	20202020 	.word	0x20202020
   1950c:	00000000 	.word	0x00000000
   19510:	4f434e49 	.word	0x4f434e49
   19514:	474e494d 	.word	0x474e494d
   19518:	534d5320 	.word	0x534d5320
   1951c:	202e2e2e 	.word	0x202e2e2e
   19520:	00000000 	.word	0x00000000
   19524:	4754554f 	.word	0x4754554f
   19528:	474e494f 	.word	0x474e494f
   1952c:	534d5320 	.word	0x534d5320
   19530:	202e2e2e 	.word	0x202e2e2e
	...
   1953c:	1f1f0000 	.word	0x1f1f0000
   19540:	00000000 	.word	0x00000000
   19544:	1f1f1f00 	.word	0x1f1f1f00
   19548:	00000000 	.word	0x00000000
   1954c:	1f1f1f1f 	.word	0x1f1f1f1f
   19550:	1f1f0000 	.word	0x1f1f0000
   19554:	1f1f1f1f 	.word	0x1f1f1f1f
   19558:	1f1f1f1f 	.word	0x1f1f1f1f
   1955c:	1f1f1f1f 	.word	0x1f1f1f1f
   19560:	00007fb4 	.word	0x00007fb4
   19564:	00007bc8 	.word	0x00007bc8
   19568:	00007c0c 	.word	0x00007c0c
   1956c:	00007c72 	.word	0x00007c72
   19570:	00007ce0 	.word	0x00007ce0
   19574:	00007d84 	.word	0x00007d84
   19578:	00007ee8 	.word	0x00007ee8
   1957c:	00007fb2 	.word	0x00007fb2
   19580:	00007f02 	.word	0x00007f02
   19584:	00007f20 	.word	0x00007f20
   19588:	00007f3e 	.word	0x00007f3e
   1958c:	00007f5c 	.word	0x00007f5c
   19590:	00007f84 	.word	0x00007f84
   19594:	756c2530 	.word	0x756c2530
   19598:	756c2530 	.word	0x756c2530
   1959c:	756c2530 	.word	0x756c2530
   195a0:	00000000 	.word	0x00000000
   195a4:	00000002 	.word	0x00000002
   195a8:	00000003 	.word	0x00000003
   195ac:	00000028 	.word	0x00000028
   195b0:	00000029 	.word	0x00000029
   195b4:	00000004 	.word	0x00000004
   195b8:	00000005 	.word	0x00000005
   195bc:	00000006 	.word	0x00000006
   195c0:	00000007 	.word	0x00000007
   195c4:	00000020 	.word	0x00000020
   195c8:	00000021 	.word	0x00000021
   195cc:	00000022 	.word	0x00000022
   195d0:	00000023 	.word	0x00000023
   195d4:	00000024 	.word	0x00000024
   195d8:	00000025 	.word	0x00000025
   195dc:	00000026 	.word	0x00000026
   195e0:	00000027 	.word	0x00000027
   195e4:	00000008 	.word	0x00000008
   195e8:	00000009 	.word	0x00000009
   195ec:	0000000a 	.word	0x0000000a
   195f0:	0000000b 	.word	0x0000000b
   195f4:	0000c302 	.word	0x0000c302
   195f8:	0000c308 	.word	0x0000c308
   195fc:	0000c308 	.word	0x0000c308
   19600:	0000c308 	.word	0x0000c308
   19604:	0000c308 	.word	0x0000c308
   19608:	0000c308 	.word	0x0000c308
   1960c:	0000c308 	.word	0x0000c308
   19610:	0000c308 	.word	0x0000c308
   19614:	0000c308 	.word	0x0000c308
   19618:	0000c308 	.word	0x0000c308
   1961c:	0000c308 	.word	0x0000c308
   19620:	0000c308 	.word	0x0000c308
   19624:	0000c308 	.word	0x0000c308
   19628:	0000c308 	.word	0x0000c308
   1962c:	0000c308 	.word	0x0000c308
   19630:	0000c308 	.word	0x0000c308
   19634:	0000c2e0 	.word	0x0000c2e0
   19638:	0000c308 	.word	0x0000c308
   1963c:	0000c308 	.word	0x0000c308
   19640:	0000c308 	.word	0x0000c308
   19644:	0000c308 	.word	0x0000c308
   19648:	0000c308 	.word	0x0000c308
   1964c:	0000c308 	.word	0x0000c308
   19650:	0000c308 	.word	0x0000c308
   19654:	0000c308 	.word	0x0000c308
   19658:	0000c308 	.word	0x0000c308
   1965c:	0000c308 	.word	0x0000c308
   19660:	0000c308 	.word	0x0000c308
   19664:	0000c308 	.word	0x0000c308
   19668:	0000c308 	.word	0x0000c308
   1966c:	0000c308 	.word	0x0000c308
   19670:	0000c308 	.word	0x0000c308
   19674:	0000c2fc 	.word	0x0000c2fc
   19678:	0000c308 	.word	0x0000c308
   1967c:	0000c308 	.word	0x0000c308
   19680:	0000c308 	.word	0x0000c308
   19684:	0000c308 	.word	0x0000c308
   19688:	0000c308 	.word	0x0000c308
   1968c:	0000c308 	.word	0x0000c308
   19690:	0000c308 	.word	0x0000c308
   19694:	0000c308 	.word	0x0000c308
   19698:	0000c308 	.word	0x0000c308
   1969c:	0000c308 	.word	0x0000c308
   196a0:	0000c308 	.word	0x0000c308
   196a4:	0000c308 	.word	0x0000c308
   196a8:	0000c308 	.word	0x0000c308
   196ac:	0000c308 	.word	0x0000c308
   196b0:	0000c308 	.word	0x0000c308
   196b4:	0000c2f6 	.word	0x0000c2f6
   196b8:	0000c29e 	.word	0x0000c29e
   196bc:	0000c2b4 	.word	0x0000c2b4
   196c0:	0000c2ca 	.word	0x0000c2ca
   196c4:	0000c284 	.word	0x0000c284
   196c8:	42000800 	.word	0x42000800
   196cc:	42000c00 	.word	0x42000c00
   196d0:	42001000 	.word	0x42001000
   196d4:	42001400 	.word	0x42001400
   196d8:	42001800 	.word	0x42001800
   196dc:	42001c00 	.word	0x42001c00
   196e0:	454c4449 	.word	0x454c4449
   196e4:	00000000 	.word	0x00000000
   196e8:	20726d54 	.word	0x20726d54
   196ec:	00637653 	.word	0x00637653
   196f0:	00010028 	.word	0x00010028
   196f4:	00010028 	.word	0x00010028
   196f8:	00010028 	.word	0x00010028
   196fc:	000100b6 	.word	0x000100b6
   19700:	00010080 	.word	0x00010080
   19704:	000100aa 	.word	0x000100aa
   19708:	00010028 	.word	0x00010028
   1970c:	00010028 	.word	0x00010028
   19710:	000100b6 	.word	0x000100b6
   19714:	00010080 	.word	0x00010080

00019718 <_tcc_intflag>:
   19718:	00000001 00000002 00000004 00000008     ................
   19728:	00001000 00002000 00004000 00008000     ..... ...@......
   19738:	00010000 00020000 00040000 00080000     ................
   19748:	0c0b0a09 00000e0d 00011934 00011934     ........4...4...
   19758:	00011928 00011934 00011928 00011902     (...4...(.......
   19768:	00011902 00011934 00011934 00011934     ....4...4...4...
   19778:	00011934 00011934 00011934 00011934     4...4...4...4...
   19788:	00011934 00011934 00011934 00011934     4...4...4...4...
   19798:	00011934 00011934 00011934 00011934     4...4...4...4...
   197a8:	00011934 00011934 00011934 00011934     4...4...4...4...
   197b8:	00011934 00011934 00011934 00011934     4...4...4...4...
   197c8:	00011934 00011934 00011934 00011934     4...4...4...4...
   197d8:	00011934 00011934 00011934 00011934     4...4...4...4...
   197e8:	00011934 00011934 00011934 00011934     4...4...4...4...
   197f8:	00011934 00011934 00011934 00011934     4...4...4...4...
   19808:	00011934 00011934 00011934 00011934     4...4...4...4...
   19818:	00011934 00011934 00011934 00011934     4...4...4...4...
   19828:	00011934 00011934 00011934 00011934     4...4...4...4...
   19838:	00011934 00011934 00011934 00011934     4...4...4...4...
   19848:	00011934 00011934 00011928 00011928     4...4...(...(...
   19858:	0001193e 0001193e 0001193e 0001193e     >...>...>...>...
   19868:	41744545 50524f4d 456d752e 00012cae     EEtAMORP.umE.,..
   19878:	00012d28 00012d28 00012ccc 00012cc6     (-..(-...,...,..
   19888:	00012cd2 00012cb4 00012cd8 00012d0e     .,...,...,...-..
   19898:	00012ff4 00013044 00013044 00013040     ./..D0..D0..@0..
   198a8:	00012fe6 00013006 00012fd6 00013018     ./...0.../...0..
   198b8:	0001302a 00013092 000130c0 000130c0     *0...0...0...0..
   198c8:	000130bc 0001308c 00013098 00013086     .0...0...0...0..
   198d8:	0001309e 000130a4 00776f70 74727173     .0...0..pow.sqrt
	...

000198f0 <TWO52>:
   198f0:	00000000 43300000 00000000 c3300000     ......0C......0.
   19900:	00015a24 000159f4 00015a06 00015948     $Z...Y...Z..HY..
   19910:	00015a06 000159ea 00015a06 00015948     .Z...Y...Z..HY..
   19920:	000159f4 000159f4 000159ea 00015948     .Y...Y...Y..HY..
   19930:	00015950 00015950 00015950 00015a0c     PY..PY..PY...Z..
   19940:	000159f4 000159f4 000159c8 00015aac     .Y...Y...Y...Z..
   19950:	000159c8 000159ea 000159c8 00015aac     .Y...Y...Y...Z..
   19960:	000159f4 000159f4 000159ea 00015aac     .Y...Y...Y...Z..
   19970:	00015950 00015950 00015950 00015ab6     PY..PY..PY...Z..
   19980:	00015c54 00015ba4 00015ba4 00015ba2     T\...[...[...[..
   19990:	00015c46 00015c46 00015c3c 00015ba2     F\..F\..<\...[..
   199a0:	00015c46 00015c3c 00015c46 00015ba2     F\..<\..F\...[..
   199b0:	00015c4c 00015c4c 00015c4c 00015cdc     L\..L\..L\...\..
   199c0:	0001660c 000165ee 000165a8 000164c6     .f...e...e...d..
   199d0:	000165a8 000165e0 000165a8 000164c6     .e...e...e...d..
   199e0:	000165ee 000165ee 000165e0 000164c6     .e...e...e...d..
   199f0:	000164be 000164be 000164be 00016824     .d...d...d..$h..
   19a00:	00016e6c 00016d2c 00016d2c 00016d28     ln..,m..,m..(m..
   19a10:	00016e44 00016e44 00016e36 00016d28     Dn..Dn..6n..(m..
   19a20:	00016e44 00016e36 00016e44 00016d28     Dn..6n..Dn..(m..
   19a30:	00016e4c 00016e4c 00016e4c 00017050     Ln..Ln..Ln..Pp..
   19a40:	4f500043 00584953 3130002e 35343332     C.POSIX...012345
   19a50:	39383736 64636261 68676665 6c6b6a69     6789abcdefghijkl
   19a60:	706f6e6d 74737271 78777675 00007a79              mnopqrstuvwxyz.

00019a6f <_ctype_>:
   19a6f:	20202000 20202020 28282020 20282828     .         ((((( 
   19a7f:	20202020 20202020 20202020 20202020                     
   19a8f:	10108820 10101010 10101010 10101010      ...............
   19a9f:	04040410 04040404 10040404 10101010     ................
   19aaf:	41411010 41414141 01010101 01010101     ..AAAAAA........
   19abf:	01010101 01010101 01010101 10101010     ................
   19acf:	42421010 42424242 02020202 02020202     ..BBBBBB........
   19adf:	02020202 02020202 02020202 10101010     ................
   19aef:	00000020 00000000 00000000 00000000      ...............
	...
   19b6f:	302d2300 6800202b 65004c6c 46456766     .#-0+ .hlL.efgEF
   19b7f:	31300047 35343332 39383736 44434241     G.0123456789ABCD
   19b8f:	30004645 34333231 38373635 63626139     EF.0123456789abc
   19b9f:	00666564 c0b5f800                                def..

00019ba4 <_init>:
   19ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19ba6:	46c0      	nop			; (mov r8, r8)
   19ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   19baa:	bc08      	pop	{r3}
   19bac:	469e      	mov	lr, r3
   19bae:	4770      	bx	lr

00019bb0 <__init_array_start>:
   19bb0:	000000dd 	.word	0x000000dd

00019bb4 <_fini>:
   19bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19bb6:	46c0      	nop			; (mov r8, r8)
   19bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   19bba:	bc08      	pop	{r3}
   19bbc:	469e      	mov	lr, r3
   19bbe:	4770      	bx	lr

00019bc0 <__fini_array_start>:
   19bc0:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <ucharPhase_Seq_Check_Flag>:
2000000c:	0101                                             .

2000000d <ucharVoltage_Detect_Timer_Counter>:
2000000d:	0001 aa00                                        ...

20000010 <uxCriticalNesting>:
20000010:	aaaa aaaa                                   ....

20000014 <_events_inst>:
20000014:	0000 0000 000c 0000 0000 0000 0000 0000     ................
20000024:	0000 0000                                   ....

20000028 <g_interrupt_enabled>:
20000028:	0101                                             .

20000029 <__fdlib_version>:
20000029:	0001 3000                                        ...

2000002c <_impure_ptr>:
2000002c:	0030 2000                                   0.. 

20000030 <impure_data>:
	...

20000090 <__global_locale>:
20000090:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000b0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000d0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000f0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000110:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000130:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000150:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000170:	80ed 0001 7afd 0001 0000 0000 9a6f 0001     .....z......o...
20000180:	9a48 0001 9b75 0001 9b75 0001 9b75 0001     H...u...u...u...
20000190:	9b75 0001 9b75 0001 9b75 0001 9b75 0001     u...u...u...u...
200001a0:	9b75 0001 9b75 0001 ffff ffff ffff ffff     u...u...........
200001b0:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
200001d8:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
